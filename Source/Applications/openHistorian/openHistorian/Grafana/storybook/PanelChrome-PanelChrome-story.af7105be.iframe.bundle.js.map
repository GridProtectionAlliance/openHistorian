{"version":3,"file":"PanelChrome-PanelChrome-story.af7105be.iframe.bundle.js","mappings":";;AA2OA","sources":["webpack://@grafana/ui/./src/components/PanelChrome/PanelChrome.mdx"],"sourcesContent":["\nimport React from 'react';\n\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"/src/node_modules/@storybook/addon-docs/dist/shims/mdx-react-shim.mjs\";\nimport {css} from '@emotion/css';\nimport {Meta, Preview} from '@storybook/blocks';\nimport {PanelChrome} from './PanelChrome';\nimport {action} from '@storybook/addon-actions';\nimport {LoadingState} from '@grafana/data';\nimport {Button} from '../Button';\nimport {Menu} from '../Menu/Menu';\nimport {Stack} from '../Layout/Stack/Stack';\nimport {IconButton} from '../IconButton/IconButton';\nfunction _createMdxContent(props) {\n  const _components = {\n    blockquote: \"blockquote\",\n    code: \"code\",\n    div: \"div\",\n    em: \"em\",\n    h1: \"h1\",\n    h3: \"h3\",\n    h4: \"h4\",\n    p: \"p\",\n    pre: \"pre\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  if (!PanelChrome) _missingMdxReference(\"PanelChrome\", false);\n  if (!PanelChrome.LoadingIndicator) _missingMdxReference(\"PanelChrome.LoadingIndicator\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(Meta, {\n      title: \"MDX|PanelChrome\",\n      component: PanelChrome\n    }), \"\\n\", _jsx(_components.h1, {\n      id: \"panelchrome\",\n      children: \"PanelChrome\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Component used for rendering content wrapped in the same style as grafana panels\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"basic-usage-title-description-and-content\",\n      children: \"Basic Usage: Title, Description and Content\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"<PanelChrome\\n  title=\\\"My awesome panel title\\\"\\n  description=\\\"Here I will put a description that explains a bit more this panel\\\"\\n  width={400}\\n  height={200}\\n>\\n  {(innerwidth, innerheight) => {\\n    return (\\n      <div\\n        style={{\\n          width: innerwidth,\\n          height: innerheight,\\n          background: 'white',\\n          display: 'flex',\\n          alignItems: 'center',\\n          justifyContent: 'center',\\n        }}\\n      >\\n        New panel with old API\\n      </div>\\n    );\\n  }}\\n</PanelChrome>\\n\"\n      })\n    }), \"\\n\", _jsx(Preview, {\n      children: _jsx(PanelChrome, {\n        title: \"My awesome panel title\",\n        description: \"Here I will put a description that explains a bit more this panel\",\n        width: 400,\n        height: 200,\n        children: (innerwidth, innerheight) => {\n          return _jsx(_components.div, {\n            style: {\n              width: innerwidth,\n              height: innerheight,\n              background: 'rgba(230,0,0,0.05)',\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center'\n            },\n            children: \"Content\"\n          });\n        }\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"menu-standard--hover\",\n      children: \"Menu: Standard & Hover\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"<PanelChrome\\n  title=\\\"My awesome panel title\\\"\\n  hoverHeader={<true || false>}\\n  menu={() => (\\n    <Menu>\\n      <Menu.Item label=\\\"View\\\" icon=\\\"eye\\\" />\\n      <Menu.Item label=\\\"Edit\\\" icon=\\\"edit\\\" />\\n      <Menu.Item label=\\\"Share\\\" icon=\\\"share-alt\\\" />\\n      <Menu.Divider />\\n      <Menu.Item label=\\\"Remove\\\" icon=\\\"trash-alt\\\" />\\n    </Menu>\\n  )}\\n  description=\\\"Here I will put a description that explains a bit more this panel\\\"\\n  width={400}\\n  height={200}\\n>\\n  {(innerwidth, innerheight) => {\\n    return (\\n      <div\\n        style={{\\n          width: innerwidth,\\n          height: innerheight,\\n          background: 'white',\\n          display: 'flex',\\n          alignItems: 'center',\\n          justifyContent: 'center',\\n        }}\\n      >\\n        New panel with old API\\n      </div>\\n    );\\n  }}\\n</PanelChrome>\\n\"\n      })\n    }), \"\\n\", _jsx(Preview, {\n      children: _jsxs(Stack, {\n        gap: 2,\n        alignItems: \"flex-start\",\n        wrap: \"wrap\",\n        children: [_jsx(PanelChrome, {\n          title: \"My awesome panel title\",\n          menu: () => _jsxs(Menu, {\n            children: [_jsx(Menu.Item, {\n              label: \"View\",\n              icon: \"eye\"\n            }), _jsx(Menu.Item, {\n              label: \"Edit\",\n              icon: \"edit\"\n            }), _jsx(Menu.Item, {\n              label: \"Share\",\n              icon: \"share-alt\"\n            }), _jsx(Menu.Divider, {}), _jsx(Menu.Item, {\n              label: \"Remove\",\n              icon: \"trash-alt\"\n            })]\n          }),\n          description: \"Here I will put a description that explains a bit more this panel\",\n          width: 400,\n          height: 200,\n          children: (innerwidth, innerheight) => {\n            return _jsx(_components.div, {\n              style: {\n                width: innerwidth,\n                height: innerheight,\n                background: 'rgba(230,0,0,0.05)',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center'\n              },\n              children: \"Content with fixed header\"\n            });\n          }\n        }), _jsx(PanelChrome, {\n          title: \"My awesome panel title\",\n          menu: () => _jsxs(Menu, {\n            children: [_jsx(Menu.Item, {\n              label: \"View\",\n              icon: \"eye\"\n            }), _jsx(Menu.Item, {\n              label: \"Edit\",\n              icon: \"edit\"\n            }), _jsx(Menu.Item, {\n              label: \"Share\",\n              icon: \"share-alt\"\n            }), _jsx(Menu.Divider, {}), _jsx(Menu.Item, {\n              label: \"Remove\",\n              icon: \"trash-alt\"\n            })]\n          }),\n          hoverHeader: true,\n          description: \"Here I will put a description that explains a bit more this panel\",\n          width: 400,\n          height: 200,\n          children: (innerwidth, innerheight) => {\n            return _jsx(_components.div, {\n              style: {\n                width: innerwidth,\n                height: innerheight,\n                background: 'rgba(230,0,0,0.05)',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center'\n              },\n              children: \"Content with hoverHeader=true\"\n            });\n          }\n        })]\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"states-loading--streaming-error\",\n      children: \"States: Loading , Streaming, Error\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"<PanelChrome\\n  title=\\\"My awesome panel title\\\"\\n  loadingState={<Loading.Loading || Loading.Streaming>}\\n  statusMessage='Error text'\\n  statusMessageOnClick={action('ErrorIndicator: onClick fired')}\\n  width={400}\\n  height={200}\\n>\\n  {(innerwidth, innerheight) => {\\n    return (\\n      <div\\n        style={{\\n          width: innerwidth,\\n          height: innerheight,\\n          background: 'rgba(230,0,0,0.05)',\\n          display: 'flex',\\n          alignItems: 'center',\\n          justifyContent: 'center',\\n        }}\\n      >\\n        New panel with old API\\n      </div>\\n    );\\n  }}\\n</PanelChrome>\\n\"\n      })\n    }), \"\\n\", _jsx(Preview, {\n      children: _jsxs(Stack, {\n        gap: 2,\n        alignItems: \"flex-start\",\n        wrap: \"wrap\",\n        children: [_jsx(PanelChrome, {\n          title: \"My awesome panel title\",\n          loadingState: LoadingState.Loading,\n          width: 400,\n          height: 200,\n          children: (innerwidth, innerheight) => {\n            return _jsx(_components.div, {\n              style: {\n                width: innerwidth,\n                height: innerheight,\n                background: 'rgba(230,0,0,0.05)',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center'\n              },\n              children: \"Data is loading\"\n            });\n          }\n        }), _jsx(PanelChrome, {\n          title: \"My awesome panel title\",\n          loadingState: LoadingState.Streaming,\n          width: 400,\n          height: 200,\n          children: (innerwidth, innerheight) => {\n            return _jsx(_components.div, {\n              style: {\n                width: innerwidth,\n                height: innerheight,\n                background: 'rgba(230,0,0,0.05)',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center'\n              },\n              children: \"Data is Streaming\"\n            });\n          }\n        }), _jsx(PanelChrome, {\n          title: \"My awesome panel title\",\n          statusMessage: \"Error text\",\n          statusMessageOnClick: action('ErrorIndicator: onClick fired'),\n          width: 400,\n          height: 200,\n          children: (innerwidth, innerheight) => {\n            return _jsx(_components.div, {\n              style: {\n                width: innerwidth,\n                height: innerheight,\n                background: 'rgba(230,0,0,0.05)',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center'\n              },\n              children: \"There is an error\"\n            });\n          }\n        })]\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"extra-options-title-items-and-actions\",\n      children: \"Extra options? Title items and actions\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"<PanelChrome\\n  title=\\\"My awesome panel title\\\"\\n  titleItems={\\n    <>\\n      <IconButton\\n        className={css`\\n          margin-right: 10px;\\n        `}\\n        name=\\\"github\\\"\\n        variant=\\\"secondary\\\"\\n        tooltip=\\\"extra content to render\\\"\\n      />\\n      <IconButton name=\\\"sliders-v-alt\\\" variant=\\\"secondary\\\" tooltip=\\\"extra content2 to render\\\" />\\n    </>\\n  }\\n  actions={\\n    <Button size=\\\"sm\\\" variant=\\\"secondary\\\" key=\\\"A\\\">\\n      Breakdown\\n    </Button>\\n  }\\n  width={500}\\n  height={200}\\n>\\n  {(innerwidth, innerheight) => {\\n    return (\\n      <div\\n        style={{\\n          width: innerwidth,\\n          height: innerheight,\\n          background: 'rgba(230,0,0,0.05)',\\n          display: 'flex',\\n          alignItems: 'center',\\n          justifyContent: 'center',\\n        }}\\n      >\\n        New panel with old API\\n      </div>\\n    );\\n  }}\\n</PanelChrome>\\n\"\n      })\n    }), \"\\n\", _jsx(Preview, {\n      children: _jsx(PanelChrome, {\n        title: \"My awesome panel title\",\n        titleItems: _jsxs(_Fragment, {\n          children: [_jsx(IconButton, {\n            className: css`\n            margin-right: 10px;\n          `,\n            name: \"github\",\n            variant: \"secondary\",\n            tooltip: \"extra content to render\"\n          }), _jsx(IconButton, {\n            name: \"sliders-v-alt\",\n            variant: \"secondary\",\n            tooltip: \"extra content to render\"\n          })]\n        }),\n        actions: _jsx(Button, {\n          size: \"sm\",\n          variant: \"secondary\",\n          children: \"Breakdown\"\n        }, \"A\"),\n        width: 500,\n        height: 200,\n        children: (innerwidth, innerheight) => {\n          return _jsx(_components.div, {\n            style: {\n              width: innerwidth,\n              height: innerheight,\n              background: 'rgba(230,0,0,0.05)',\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center'\n            },\n            children: \"Content\"\n          });\n        }\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"migration-from-old-panelchrome-before-v940\",\n      children: \"Migration from old PanelChrome (before v9.4.0)\"\n    }), \"\\n\", _jsx(_components.h4, {\n      id: \"before\",\n      children: \"Before\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"<PanelChrome\\n  title=\\\"My awesome panel title\\\"\\n  leftItems={[<PanelChrome.LoadingIndicator loading={isRefreshing} onCancel={onCancelQuery} key=\\\"loading-indicator\\\" />]}\\n  width={400}\\n  height={200}\\n>\\n  {(innerwidth, innerheight) => {\\n    return (\\n      <div\\n        style={{\\n          width: innerwidth,\\n          height: innerheight,\\n          background: 'white',\\n          display: 'flex',\\n          alignItems: 'center',\\n          justifyContent: 'center',\\n        }}\\n      >\\n        New panel with old API\\n      </div>\\n    );\\n  }}\\n</PanelChrome>\\n\"\n      })\n    }), \"\\n\", _jsx(Preview, {\n      children: _jsx(PanelChrome, {\n        title: \"My awesome panel title\",\n        leftItems: [_jsx(PanelChrome.LoadingIndicator, {\n          loading: true,\n          onCancel: action('CancelQuery: onClick fired')\n        }, \"loading-indicator\")],\n        width: 400,\n        height: 200,\n        children: (innerwidth, innerheight) => {\n          return _jsx(_components.div, {\n            style: {\n              width: innerwidth,\n              height: innerheight,\n              background: 'rgba(230,0,0,0.05)',\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center'\n            },\n            children: \"Content\"\n          });\n        }\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      id: \"after\",\n      children: \"After\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"<PanelChrome\\n  title=\\\"My awesome panel title\\\"\\n  loadingState={LoadingState.Loading}\\n  onCancelQuery={onCancelQuery}\\n  width={400}\\n  height={200}\\n>\\n  {(innerwidth, innerheight) => {\\n    return (\\n      <div\\n        style={{\\n          width: innerwidth,\\n          height: innerheight,\\n          background: 'white',\\n          display: 'flex',\\n          alignItems: 'center',\\n          justifyContent: 'center',\\n        }}\\n      >\\n        New panel with old API\\n      </div>\\n    );\\n  }}\\n</PanelChrome>\\n\"\n      })\n    }), \"\\n\", _jsx(Preview, {\n      children: _jsx(PanelChrome, {\n        title: \"My awesome panel title\",\n        loadingState: LoadingState.Loading,\n        onCancelQuery: action('CancelQuery: onClick fired'),\n        width: 400,\n        height: 200,\n        children: (innerwidth, innerheight) => {\n          return _jsx(_components.div, {\n            style: {\n              width: innerwidth,\n              height: innerheight,\n              background: 'rgba(230,0,0,0.05)',\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center'\n            },\n            children: \"Content\"\n          });\n        }\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"collapsible\",\n      children: \"Collapsible\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The panel can be collapsed/expanded by clicking on the chevron or the title.\"\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: _jsxs(_components.em, {\n          children: [\"Note: \", _jsx(_components.code, {\n            children: \"collapsible\"\n          }), \" and \", _jsx(_components.code, {\n            children: \"hoverHeader\"\n          }), \" props are mutually exclusive and cannot be used in the same panel.\"]\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"function Container() {\\n  const [isCollapsed, setCollapsed] = useState(true);\\n\\n  return (\\n    <PanelChrome\\n      title=\\\"My awesome panel title\\\"\\n      width={400}\\n      height={200}\\n      collapsible={true}\\n      collapsed={isCollapsed}\\n      onToggleCollapse={(isCollapsed) => setCollapsed(isCollapsed)}\\n    >\\n      {(innerwidth, innerheight) => {\\n        return (\\n          <div\\n            style={{\\n              width: innerwidth,\\n              height: innerheight,\\n              background: 'rgba(230,0,0,0.05)',\\n              display: 'flex',\\n              alignItems: 'center',\\n              justifyContent: 'center',\\n            }}\\n          >\\n            Content\\n          </div>\\n        );\\n      }}\\n    </PanelChrome>\\n  );\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(Preview, {\n      children: _jsx(PanelChrome, {\n        title: \"My awesome panel title\",\n        width: 400,\n        height: 200,\n        collapsible: true,\n        children: (innerwidth, innerheight) => {\n          return _jsx(_components.div, {\n            style: {\n              width: innerwidth,\n              height: innerheight,\n              background: 'rgba(230,0,0,0.05)',\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center'\n            },\n            children: \"Content\"\n          });\n        }\n      })\n    })]\n  });\n}\nexport default function MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n"],"names":[],"sourceRoot":""}