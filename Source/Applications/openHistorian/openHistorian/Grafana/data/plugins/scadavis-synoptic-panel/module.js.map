{"version":3,"file":"module.js","mappings":"2FAAAA,EAAOC,QAAUC,C,UCAjBF,EAAOC,QAAUE,C,UCAjBH,EAAOC,QAAUG,C,GCCbC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaP,QAGrB,IAAID,EAASK,EAAyBE,GAAY,CAGjDN,QAAS,CAAC,GAOX,OAHAS,EAAoBH,GAAUP,EAAQA,EAAOC,QAASK,GAG/CN,EAAOC,OACf,CCrBAK,EAAoBK,EAAKX,IACxB,IAAIY,EAASZ,GAAUA,EAAOa,WAC7B,IAAOb,EAAiB,QACxB,IAAM,EAEP,OADAM,EAAoBQ,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,CAAM,ECLdN,EAAoBQ,EAAI,CAACb,EAASe,KACjC,IAAI,IAAIC,KAAOD,EACXV,EAAoBY,EAAEF,EAAYC,KAASX,EAAoBY,EAAEjB,EAASgB,IAC5EE,OAAOC,eAAenB,EAASgB,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDX,EAAoBY,EAAI,CAACK,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFlB,EAAoBsB,EAAK3B,IACH,oBAAX4B,QAA0BA,OAAOC,aAC1CX,OAAOC,eAAenB,EAAS4B,OAAOC,YAAa,CAAEC,MAAO,WAE7DZ,OAAOC,eAAenB,EAAS,aAAc,CAAE8B,OAAO,GAAO,E,iFCmB7D,kB,sGAUM,MAAMC,EAgDXC,aAAAA,GACE,MAAMC,EAAK,WACT,OAA+B,OAArB,EAAIC,KAAKC,UAAuB,GAAGC,SAAS,IAAIC,UAAU,EACtE,EACA,OAAOJ,IAAOA,IAAO,IAAMA,IAAO,IAAMA,IAAO,IAAMA,IAAO,IAAMA,IAAOA,IAAOA,GAClF,CASAK,qBAAAA,CAAuBC,GACrB,MAAMC,EAAMC,SAASC,cAAc,OAEnC,OADAF,EAAIG,UAAYJ,EAAWK,OACpBJ,EAAIK,UACb,CAQAC,OAAAA,CAASC,GAIP,GAHAC,KAAKC,OAAS,KACdD,KAAKE,cAAe,EACpBF,KAAKD,OAASA,EACM,KAAhBC,KAAKD,QAAqC,IAApBC,KAAKG,WAAkB,CAC/CH,KAAKG,WAAa,EAClB,MAAMC,EAAM,IAAIC,eAChBD,EAAIE,KAAK,MAAON,KAAKD,QACrB,IAAIQ,EAAQP,KACZI,EAAII,OAAS,W,IAOPD,EAAAA,EANe,MAAfH,EAAIK,SAEJF,EAAMJ,WAAa,EAEjBI,EAAMG,gBAEI,QAAZH,EAAAA,EAAMI,cAANJ,IAAAA,GAA2B,QAA3BA,EAAAA,EAAcK,qBAAdL,IAAAA,GAAAA,EAA6BM,YAAYT,EAAIU,aAAcP,EAAMQ,QAIjER,EAAMN,OAASG,EAAIU,aAGzB,EACAV,EAAIY,mBAAqB,SAAUC,GACV,IAAnBb,EAAIc,aACa,MAAfd,EAAIK,SAENF,EAAMJ,WAAa,EACfH,KAAKmB,QACPZ,EAAMY,QAAQf,EAAIgB,YAElBC,QAAQC,KAAK,2CAA6ClB,EAAIgB,aAItE,EACAhB,EAAImB,MACN,CACF,CAOAC,SAAAA,GACExB,KAAKyB,IAAM,EACXzB,KAAK0B,KAAO,CAAC,EACb1B,KAAK2B,KAAO,CAAC,EACb3B,KAAK4B,QAAU,CAAC,EAChB5B,KAAK6B,aAAe,CAAC,EAErB,MAAMvD,EAAM,CAAEwD,KAAM,CAAEC,KAAM,cACxB/B,KAAKE,aACP8B,OAAOnB,YAAYvC,EAAK0B,KAAKe,QAE7Bf,KAAKiC,SAAW3D,CAEpB,CASA4D,cAAAA,CAAgBC,GACd,IAAI5B,EAAQP,KACZ,OAAO,IAAIoC,SAAQ,SAAUC,EAASC,GAC/B/B,EAAML,aAIPK,EAAMgC,gBACRD,EAAO,IAAIE,MAAM,8BAGnBjC,EAAMgC,gBAAkBF,EACxB9B,EAAMkC,eAAiBH,EACvB/B,EAAMmC,aAAaP,IATjBG,EAAO,IAAIE,MAAM,uBAUrB,GACF,CASAE,YAAAA,CAAcP,G,IA0CZ,IAzCA,IAAKnC,KAAKE,aACR,OAAO,KAET,IAAIK,EAAQP,KACU,iBAAXmC,GAAkC,OAAXA,GAChCjE,OAAOyE,KAAKR,GAAQS,KAAI,SAAUC,EAAKC,GACrC,IAAIpF,EACAmF,KAAOtC,EAAMmB,KACfhE,EAAI6C,EAAMmB,KAAKmB,IAEfnF,IAAM6C,EAAMkB,IACZlB,EAAMmB,KAAKmB,GAAOnF,GAEpB6C,EAAMoB,KAAKkB,GAAOV,EAAOU,GACzBtC,EAAMqB,QAAQiB,GAAO,CACvB,IAGF,MAAME,EAAc,CAClBjB,KAAM,CAAEC,KAAM,OAAQiB,KAAM,GAAIC,SAAUjD,KAAKkD,eAuBjD,OArBAhF,OAAOyE,KAAK3C,KAAK0B,MAAMkB,KAAI,SAAUC,EAAKC,GACxCC,EAAOjB,KAAKkB,KAAKF,GAAS,CAAC,EAC3BC,EAAOjB,KAAKkB,KAAKF,GAAOK,KAAON,EAC/BE,EAAOjB,KAAKkB,KAAKF,GAAOhE,MAAQyB,EAAMoB,KAAKkB,GAC3CE,EAAOjB,KAAKkB,KAAKF,GAAOM,UAAiC,IAArB7C,EAAMqB,QAAQiB,IACnB,iBAApBtC,EAAMoB,KAAKkB,GACpBE,EAAOjB,KAAKkB,KAAKF,GAAOf,KAAO,QACK,kBAApBxB,EAAMoB,KAAKkB,GAC3BE,EAAOjB,KAAKkB,KAAKF,GAAOf,KAAO,OAE/BgB,EAAOjB,KAAKkB,KAAKF,GAAOf,KAAO,SAEjCgB,EAAOjB,KAAKkB,KAAKF,GAAOO,WAAa,CACnCC,MAAO,CACLC,cAAehD,EAAMmB,KAAKmB,GAC1BW,QAA0C,MAAX,IAArBjD,EAAMqB,QAAQiB,IACxBY,KAAMlD,EAAMsB,aAAagB,IAG/B,IACW,QAAX,EAAA7C,KAAKW,cAAL,OAA0B,QAA1B,IAAaC,qBAAb,SAA4BC,YAAYkC,EAAQ/C,KAAKe,QAC9CgC,EAAOE,MAChB,CAeAS,QAAAA,CAAUb,EAAa/D,EAAe6E,EAAkBC,EAAmBC,GACzE,GAAY,KAARhB,SAAcA,EAChB,OAAO7C,KAAKE,aAEd,IAAIxC,EAaJ,GAZAiG,EAASA,IAAU,EACnBC,EAAUA,IAAW,EACrBC,EAAcA,GAAehB,EACzBA,KAAO7C,KAAK0B,KACdhE,EAAIsC,KAAK0B,KAAKmB,IAEdnF,IAAMsC,KAAKyB,IACXzB,KAAK0B,KAAKmB,GAAOnF,GAEnBsC,KAAK2B,KAAKkB,GAAO/D,EACjBkB,KAAK4B,QAAQiB,IAAQc,EAAS,IAAO,IAASC,EAAU,IAAQ,GAChE5D,KAAK6B,aAAagB,GAAOgB,EACrB7D,KAAKE,aAAc,C,IAsBrB,IArBA,MAAM6C,EAAc,CAClBjB,KAAM,CAAEC,KAAM,OAAQiB,KAAM,GAAIC,SAAUjD,KAAKkD,eAEjDH,EAAOjB,KAAKkB,KAAK,GAAK,CAAC,EACvBD,EAAOjB,KAAKkB,KAAK,GAAGG,KAAON,EAC3BE,EAAOjB,KAAKkB,KAAK,GAAGlE,MAAQA,EAC5BiE,EAAOjB,KAAKkB,KAAK,GAAGI,UAAgC,IAApBpD,KAAK4B,QAAQiB,IAE3CE,EAAOjB,KAAKkB,KAAK,GAAGjB,KADD,iBAAVjD,EACkB,QACD,kBAAVA,EACW,OAEA,SAE7BiE,EAAOjB,KAAKkB,KAAK,GAAGK,WAAa,CAC/BC,MAAO,CACLC,cAAe7F,EACf8F,QAAyC,MAAX,IAApBxD,KAAK4B,QAAQiB,IACvBY,KAAMzD,KAAK6B,aAAagB,KAGjB,QAAX,EAAA7C,KAAKW,cAAL,OAA0B,QAA1B,IAAaC,qBAAb,SAA4BC,YAAYkC,EAAQ/C,KAAKe,OACvD,CACA,OAAOf,KAAKE,YACd,CAaA4D,UAAAA,CAAYjB,EAAa/D,EAAe6E,EAAkBC,EAAmBC,GAC3E,GAAY,KAARhB,SAAcA,EAChB,OAAO7C,KAAKE,aAEd,IAAIxC,EAaJ,OAZAiG,EAASA,IAAU,EACnBC,EAAUA,IAAW,EACrBC,EAAcA,GAAehB,EACzBA,KAAO7C,KAAK0B,KACdhE,EAAIsC,KAAK0B,KAAKmB,IAEdnF,IAAMsC,KAAKyB,IACXzB,KAAK0B,KAAKmB,GAAOnF,GAEnBsC,KAAK2B,KAAKkB,GAAO/D,EACjBkB,KAAK4B,QAAQiB,IAAQc,EAAS,IAAO,IAASC,EAAU,IAAQ,GAChE5D,KAAK6B,aAAagB,GAAOgB,EAClB7D,KAAKE,YACd,CASA6D,QAAAA,CAAUlB,GACR,OAAIA,KAAO7C,KAAK2B,KACP3B,KAAK2B,KAAKkB,GAEZ,IACT,CAQAmB,SAAAA,GACE,OAAOhE,KAAKiE,MACd,CAQAC,UAAAA,GACE,OAAOlE,KAAKmE,OACd,CAQAC,SAAAA,GACE,OAAOpE,KAAKW,MACd,CAQA0D,iBAAAA,GACE,OAA6B,IAAzBrE,KAAKU,gBACA,GACwB,IAAtBV,KAAKE,aACP,EAEF,CACT,CAQAoE,mBAAAA,GACE,OAAOtE,KAAKmE,OACd,CAQAI,WAAAA,GACE,OAAOvE,KAAKwE,QACd,CAUAC,MAAAA,CAAQC,EAAYC,EAAaC,GAI/B,MAAMtG,EAAM,CAAEwD,KAAM,CAAEC,KAAM,SAAU2C,GAHtCA,EAAKA,GAAM,EAGmCC,GAF9CA,EAAKA,GAAM,EAE2CC,QADtDA,EAAUA,IAAW,I,IAGnB,IADE5E,KAAKE,aACI,QAAX,EAAAF,KAAKW,cAAL,OAA0B,QAA1B,IAAaC,qBAAb,SAA4BC,YAAYvC,EAAK0B,KAAKe,QAElDf,KAAK6E,QAAUvG,CAEnB,CAUAwG,MAAAA,CAAQC,EAAmBC,EAAcJ,GAGvC,MAAMtG,EAAM,CACVwD,KAAM,CACJC,KAAM,SACNgD,UALJA,EAAYA,GAAa,IAMrBC,OAAQA,EACRJ,QANJA,EAAUA,IAAW,I,IAUnB,IADE5E,KAAKE,aACI,QAAX,EAAAF,KAAKW,cAAL,OAA0B,QAA1B,IAAaC,qBAAb,SAA4BC,YAAYvC,EAAK0B,KAAKe,QAElDf,KAAKiF,QAAU3G,CAEnB,CAQA4G,cAAAA,CAAgBN,GAEd,MAAMtG,EAAM,CAAEwD,KAAM,CAAEC,KAAM,iBAAkB6C,QAD9CA,EAAUA,IAAW,I,IAGnB,IADE5E,KAAKE,eACI,QAAX,EAAAF,KAAKW,cAAL,OAA0B,QAA1B,IAAaC,qBAAb,SAA4BC,YAAYvC,EAAK0B,KAAKe,QAEtD,CASAoE,WAAAA,CAAaC,EAAsBC,SACP,IAAfD,GAA8BA,KACvCA,GAAa,QAEY,IAAhBC,IACTA,GAAc,GAEhB,MAAM/G,EAAM,CACVwD,KAAM,CACJC,KAAM,cACNqD,WAAYA,EACZC,YAAaA,I,IAIf,IADErF,KAAKE,aACI,QAAX,EAAAF,KAAKW,cAAL,OAA0B,QAA1B,IAAaC,qBAAb,SAA4BC,YAAYvC,EAAK0B,KAAKe,QAElDf,KAAKsF,eAAiBhH,CAE1B,CASAiH,WAAAA,CAAaH,EAAsBC,SACP,IAAfD,GAA8BA,KACvCA,GAAa,SAEY,IAAhBC,GAA+BA,KACxCA,GAAc,GAEhB,MAAM/G,EAAM,CACVwD,KAAM,CACJC,KAAM,cACNqD,WAAYA,EACZC,YAAaA,I,IAIf,IADErF,KAAKE,aACI,QAAX,EAAAF,KAAKW,cAAL,OAA0B,QAA1B,IAAaC,qBAAb,SAA4BC,YAAYvC,EAAK0B,KAAKe,QAElDf,KAAKwF,eAAiBlH,CAE1B,CASAmH,aAAAA,CAAeC,EAA4BC,SACT,IAArBD,GAAoCA,KAC7CA,GAAmB,SAEgB,IAA1BC,GAAyCA,KAClDA,GAAwB,GAE1B,MAAMrH,EAAM,CACVwD,KAAM,CACJC,KAAM,gBACN2D,iBAAkBA,EAClBC,sBAAuBA,I,IAIzB,IADE3F,KAAKE,aACI,QAAX,EAAAF,KAAKW,cAAL,OAA0B,QAA1B,IAAaC,qBAAb,SAA4BC,YAAYvC,EAAK0B,KAAKe,QAElDf,KAAK4F,cAAgBtH,CAEzB,CAQAuH,cAAAA,CAAgBC,SACY,IAAfA,GAA8BA,KACvCA,GAAa,GAEf,MAAMxH,EAAM,CAAEwD,KAAM,CAAEC,KAAM,iBAAkB+D,WAAYA,I,IAExD,IADE9F,KAAKE,aACI,QAAX,EAAAF,KAAKW,cAAL,OAA0B,QAA1B,IAAaC,qBAAb,SAA4BC,YAAYvC,EAAK0B,KAAKe,QAElDf,KAAK+F,kBAAoBzH,CAE7B,CAQA0H,gBAAAA,CAAkBC,SACiB,IAAtBA,GAAqCA,KAC9CA,GAAoB,GAEtB,MAAM3H,EAAM,CACVwD,KAAM,CAAEC,KAAM,mBAAoBkE,kBAAmBA,I,IAGrD,IADEjG,KAAKU,gBACI,QAAX,EAAAV,KAAKW,cAAL,OAA0B,QAA1B,IAAaC,qBAAb,SAA4BC,YAAYvC,EAAK0B,KAAKe,QAElDf,KAAKkG,eAAiB5H,CAE1B,CAOA6H,aAAAA,GACE,MAAM7H,EAAM,CAAEwD,KAAM,CAAEC,KAAM,kB,IAE1B,IADE/B,KAAKE,aACI,QAAX,EAAAF,KAAKW,cAAL,OAA0B,QAA1B,IAAaC,qBAAb,SAA4BC,YAAYvC,EAAK0B,KAAKe,QAElDf,KAAKoG,iBAAmB9H,CAE5B,CASA+H,QAAAA,CAAUC,EAAqBC,GAC7B,MAAMjI,EAAM,CACVwD,KAAM,CACJC,KAAM,WACNuE,YAAaA,EACbC,UAAWA,I,IAIb,IADEvG,KAAKU,gBACI,QAAX,EAAAV,KAAKW,cAAL,OAA0B,QAA1B,IAAaC,qBAAb,SAA4BC,YAAYvC,EAAK0B,KAAKe,QAElDf,KAAKwG,YAAYC,KAAKnI,EAE1B,CAQAoI,SAAAA,CAAWC,GACT,MAAMrI,EAAM,CACVwD,KAAM,CACJC,KAAM,YACN4E,YAAaA,I,IAIf,IADE3G,KAAKU,gBACI,QAAX,EAAAV,KAAKW,cAAL,OAA0B,QAA1B,IAAaC,qBAAb,SAA4BC,YAAYvC,EAAK0B,KAAKe,QAElDf,KAAK4G,aAAetI,CAExB,CAUAuI,EAAAA,CAAIC,EAAeC,GACjB,IAAIC,GAAM,EACV,OAAQF,GACN,IAAK,SACH9G,KAAKiH,OAASF,EACdC,GAAM,EACN,MACF,IAAK,QACHhH,KAAKkH,QAAUH,EACfC,GAAM,EACN,MACF,IAAK,QACHhH,KAAKmB,QAAU4F,EACfC,GAAM,EACN,MACF,IAAK,QACHhH,KAAKmH,QAAUJ,EACfC,GAAM,EAMV,OAAOA,CACT,CAWAI,WAAAA,CAAaC,EAA4BC,EAAuBvH,G,IA6E/CwH,EAA8BA,EAAAA,EAhuB/CpD,EAAAA,KAAAA,UAAU,UACVxD,EAAAA,KAAAA,SAAmC,MACnCD,EAAAA,KAAAA,mBAAkB,GAClBR,EAAAA,KAAAA,gBAAe,GACfa,EAAAA,KAAAA,SAAS,KACTgC,EAAAA,KAAAA,SAAc,CAAEjB,KAAM,CAAEC,KAAM,OAAQiB,KAAM,MAC5CtB,EAAAA,KAAAA,OAAY,CAAC,GACbC,EAAAA,KAAAA,OAAY,CAAC,GACbC,EAAAA,KAAAA,UAAe,CAAC,GAChBC,EAAAA,KAAAA,eAAoB,CAAC,GACrBJ,EAAAA,KAAAA,MAAM,GACNxB,EAAAA,KAAAA,SAAc,MACdgF,EAAAA,KAAAA,UAAe,MACfJ,EAAAA,KAAAA,UAAe,MACfS,EAAAA,KAAAA,iBAAsB,MACtBS,EAAAA,KAAAA,oBAAyB,MACzBG,EAAAA,KAAAA,iBAAsB,MACtBE,EAAAA,KAAAA,mBAAwB,MACxBI,EAAAA,KAAAA,cAAmB,IACnBI,EAAAA,KAAAA,eAAoB,MACpB3E,EAAAA,KAAAA,WAAgB,MAChBuC,EAAAA,KAAAA,WAAW,IACX0C,EAAAA,KAAAA,UAAe,MACf/F,EAAAA,KAAAA,UAAe,MACfgG,EAAAA,KAAAA,UAAe,MACfhH,EAAAA,KAAAA,aAAa,GACb+C,EAAAA,KAAAA,eAAe,GACfX,EAAAA,KAAAA,kBAAuB,MACvBE,EAAAA,KAAAA,iBAAsB,MACtB4E,EAAAA,KAAAA,YAAoD,MACpDpD,EAAAA,KAAAA,SAAc,MACdqD,EAAAA,KAAAA,eAAoB,MACpBvH,EAAAA,KAAAA,SAAc,MACd4G,EAAAA,KAAAA,cAAmB,MACnBnB,EAAAA,KAAAA,iBAAsB,MACtBI,EAAAA,KAAAA,gBAAqB,MACrBqB,EAAAA,KAAAA,SAAc,MACdO,EAAAA,KAAAA,OAAM,GACNC,EAAAA,KAAAA,oCAAAA,GA8mBE,MAAMlH,EAAaP,KACnB,IAAI0H,EACAC,EACAC,EAAY,mBAES,iBAAdP,GACTrH,KAAKqH,UAAYA,EAAUA,WAAa,GACxCrH,KAAKiE,OAASoD,EAAUpD,QAAU,GAClCjE,KAAKsH,aAAeD,EAAUC,cAAgB,2CAC9CtH,KAAKD,OAASsH,EAAUtH,QAAU,GAClCC,KAAK2G,YAAcU,EAAUV,aAAe,OAE5C3G,KAAKqH,UAAYA,GAAa,GAC9BrH,KAAKiE,OAAS,GACdjE,KAAKsH,aAAeA,GAAgB,2CACpCtH,KAAKD,OAASA,GAAU,GACxBC,KAAK2G,YAAc,MAGrB3G,KAAKW,OAAS,KACdX,KAAKU,iBAAkB,EACvBV,KAAKE,cAAe,EACpBF,KAAKe,OAAS,IACdf,KAAK+C,OAAS,CAAEjB,KAAM,CAAEC,KAAM,OAAQiB,KAAM,KAC5ChD,KAAK0B,KAAO,CAAC,EACb1B,KAAK2B,KAAO,CAAC,EACb3B,KAAK4B,QAAU,CAAC,EAChB5B,KAAK6B,aAAe,CAAC,EACrB7B,KAAKyB,IAAM,EACXzB,KAAKC,OAAS,KACdD,KAAKiF,QAAU,KACfjF,KAAK6E,QAAU,KACf7E,KAAKsF,eAAiB,KACtBtF,KAAK+F,kBAAoB,KACzB/F,KAAKkG,eAAiB,KACtBlG,KAAKoG,iBAAmB,KACxBpG,KAAKwG,YAAc,GACnBxG,KAAK4G,aAAe,KACpB5G,KAAKiC,SAAW,KAChBjC,KAAKwE,SAAW,GAChBxE,KAAKkH,QAAU,KACflH,KAAKmB,QAAU,KACfnB,KAAKmH,QAAU,KACfnH,KAAKG,WAAa,EAClBH,KAAKkD,aAAe,EACpBlD,KAAKuC,gBAAkB,KACvBvC,KAAKyC,eAAiB,KAEtBiF,EAAK1H,KAAKhB,gBAEoB,iBAAnBgB,KAAKqH,YACuB,IAAjCrH,KAAKqH,UAAUzH,OAAOiI,OACxB7H,KAAKqH,UAAY5H,SAASqI,MAE1B9H,KAAKqH,UAAY5H,SAASsI,eAAe/H,KAAKqH,WACvB,OAAnBrH,KAAKqH,YACPrH,KAAKqH,UAAY5H,SAASqI,QAiB5B9H,KAAKsH,aAAaU,QAAQ,cAAgB,IAC5CJ,EAAY,IAEd,MAAMK,GAASV,QAAAA,EAAAA,uBAAAA,IAAAA,OAAAA,EAAAA,EAAiBW,aAAaX,QAAAA,EAAAA,uBAAAA,IAAAA,GAAyB,QAAzBA,EAAAA,EAAiBY,gBAAjBZ,IAAAA,OAAAA,EAAAA,EAA2BW,YAAa,GACrFP,EACE,eACAD,EACA,2FACA1H,KAAKsH,aACLM,EACA,SAASK,kFACsBzK,IAA7BwC,KAAKqH,UAAU1H,UAChBK,KAAKqH,UAA6Be,YAAYpI,KAAKV,sBAAsBqI,IAEzE3H,KAAKqH,UAA6BgB,mBAAmB,WAAYV,GAGpE3H,KAAKW,OAASlB,SAASsI,eAAeL,GAEtC1H,KAAKU,iBAAkB,EACvBV,KAAKE,cAAe,EAEhBF,KAAK2G,aACP3G,KAAK0G,UAAU1G,KAAK2G,aAEF,KAAhB3G,KAAKD,QACPC,KAAKF,QAAQE,KAAKD,QAGpBiC,OAAOsG,iBAAiB,WAAW,SAAUxB,GAI3C,GACEA,EAAMyB,SAAWhI,EAAMI,OAAOC,cAE9B,CAEA,GACwB,iBAAfkG,EAAMhF,WACYtE,IAAzBsJ,EAAMhF,KAAKA,KAAKC,MACS,YAAzB+E,EAAMhF,KAAKA,KAAKC,MAChB+E,EAAMhF,KAAKA,KAAKmB,SAAW1C,EAAM2C,aAWjC,OATI4D,EAAMhF,KAAKA,KAAK0G,MACdjI,EAAMkC,gBACRlC,EAAMkC,eAAe,IAAID,MAAMsE,EAAMhF,KAAKA,KAAK0G,QAExCjI,EAAMgC,iBACfhC,EAAMgC,kBAERhC,EAAMgC,gBAAkB,UACxBhC,EAAMkC,eAAiB,MAKzB,GAA0B,iBAAfqE,EAAMhF,WAA8CtE,IAAzBsJ,EAAMhF,KAAKA,KAAKC,MAA+C,WAAzB+E,EAAMhF,KAAKA,KAAKC,KAAmB,CAE7G,GADAxB,EAAMG,iBAAkB,EACpBH,EAAMiG,YAAYqB,OAAS,EAAG,CAChC,IAAK,IAAIY,EAAI,EAAGA,EAAIlI,EAAMiG,YAAYqB,OAAQY,IAC5C3B,EAAMyB,OAAO1H,YAAYN,EAAMiG,YAAYiC,GAAI3B,EAAM4B,QAEvDnI,EAAMiG,YAAc,EACtB,CAgBA,OAf2B,OAAvBjG,EAAMqG,eACRE,EAAMyB,OAAO1H,YAAYN,EAAMqG,aAAcE,EAAM4B,QACnDnI,EAAMqG,aAAe,MAEM,OAAzBrG,EAAM2F,iBACRY,EAAMyB,OAAO1H,YAAYN,EAAM2F,eAAgBY,EAAM4B,QACrDnI,EAAM2F,eAAiB,WAEJ,OAAjB3F,EAAMN,OACR6G,EAAMyB,OAAO1H,YAAYN,EAAMN,OAAQ6G,EAAM4B,QAGrB,KAAjBnI,EAAMR,QACbQ,EAAMT,QAAQS,EAAMR,QAGxB,CAGA,GAA0B,iBAAf+G,EAAMhF,WAA8CtE,IAAzBsJ,EAAMhF,KAAKA,KAAKC,MAA+C,UAAzB+E,EAAMhF,KAAKA,KAAKC,KAyC1F,OAxCAxB,EAAML,cAAe,EACrBK,EAAMiE,SAAWsC,EAAMhF,KAAKA,KAAK6G,WAAWnE,SACxCjE,EAAMwC,OAAOjB,KAAKkB,KAAK6E,QACzBtH,EAAMmC,eAEJnC,EAAM0E,UACR6B,EAAMyB,OAAO1H,YAAYN,EAAM0E,QAAS6B,EAAM4B,QAC9CnI,EAAM0E,QAAU,MAEd1E,EAAMsE,UACRiC,EAAMyB,OAAO1H,YAAYN,EAAMsE,QAASiC,EAAM4B,QAC9CnI,EAAMsE,QAAU,MAEdtE,EAAM+E,iBACRwB,EAAMyB,OAAO1H,YAAYN,EAAM+E,eAAgBwB,EAAM4B,QACrDnI,EAAM+E,eAAiB,MAErB/E,EAAMiF,iBACRsB,EAAMyB,OAAO1H,YAAYN,EAAMiF,eAAgBsB,EAAM4B,QACrDnI,EAAMiF,eAAiB,MAErBjF,EAAMqF,gBACRkB,EAAMyB,OAAO1H,YAAYN,EAAMqF,cAAekB,EAAM4B,QACpDnI,EAAMqF,cAAgB,MAEpBrF,EAAMwF,oBACRe,EAAMyB,OAAO1H,YAAYN,EAAMwF,kBAAmBe,EAAM4B,QACxDnI,EAAMwF,kBAAoB,MAExBxF,EAAM6F,mBACRU,EAAMyB,OAAO1H,YAAYN,EAAM6F,iBAAkBU,EAAM4B,QACvDnI,EAAM6F,iBAAmB,MAEvB7F,EAAM0B,WACR6E,EAAMyB,OAAO1H,YAAYN,EAAM0B,SAAU6E,EAAM4B,QAC/CnI,EAAM0B,SAAW,WAEf1B,EAAM2G,SACR3G,EAAM2G,WAMV,GAA0B,iBAAfJ,EAAMhF,WAA8CtE,IAAzBsJ,EAAMhF,KAAKA,KAAKC,MAA+C,UAAzB+E,EAAMhF,KAAKA,KAAKC,KAI1F,YAHIxB,EAAM4G,SACR5G,EAAM4G,QAAQL,EAAMhF,KAAKA,KAAK6G,WAAW7B,MAAOA,EAAMhF,KAAKA,KAAK6G,WAAW9F,KAIjF,CACF,GAGF,ECn4BF,MAAM+F,EAAiC,GACjCC,EAAsB,GAmB5B,SAASC,EAAUC,EAA+BC,G,IAGrCA,EAAAA,EAFXA,EAAQ9D,iBACR8D,EAAQvE,QAAQsE,EAAQE,SAAUF,EAAQG,SAC1C,MAAMC,EAAsB,QAAjBH,EAAAA,EAAQ5E,mBAAR4E,IAAAA,GAAkC,QAAlCA,EAAAA,EAAqBI,qBAArBJ,IAAAA,OAAAA,EAAAA,EAAoCI,cAC/C,GAAID,GAAMA,EAAGE,YAAc,GAAKF,EAAGG,aAAe,EAAG,CACnD,MAAM3I,EAASqI,EAAQ5E,YACnBzD,IACFA,EAAO4I,MAAQ,IAAMJ,EAAGE,YAAc,GACtC1I,EAAO6I,OAAS,IAAML,EAAGG,aAAe,IAEtCP,EAAQU,WACVT,EAAQlE,OACNiE,EAAQhE,WAAaoE,EAAGE,YAAcF,EAAGG,aAAeH,EAAGE,YAAc,IAAMF,EAAGG,aAAe,MAGnGN,EAAQlE,OAAOiE,EAAQhE,UAE3B,MACEiE,EAAQlE,OAAOiE,EAAQhE,UAE3B,CAGA,SAAS2E,EACPX,EACAC,EACAW,EACAC,GAEA,MAAMC,EAAOpK,SAASqK,iBAAiB,QAAUjB,EAAQc,GAAQI,KAAO,MAClEpJ,EAASqI,EAAQ5E,YACvB,IAAK,IAAIqE,EAAI,EAAG9H,GAAU8H,EAAIoB,EAAKhC,OAAQY,IACrCoB,EAAKpB,GAAG5I,aAAec,IACzBkJ,EAAKpB,GAAGL,YAAYzH,GACpBqI,EAAQnC,GAAG,SAAS,K,IAKPlG,EAJXqI,EAAQzD,YAAYwD,EAAQiB,eAAgBjB,EAAQkB,sBACpDjB,EAAQ7D,YAAY4D,EAAQmB,YAAanB,EAAQmB,aACjDlB,EAAQ9D,iBACR8D,EAAQvE,QAAQsE,EAAQE,SAAUF,EAAQG,SAC1C,MAAMC,EAAyB,QAApBxI,EAAAA,EAAOyI,qBAAPzI,IAAAA,OAAAA,EAAAA,EAAsByI,cAC7BD,IACFH,EAAQvB,6BAA+B,IAAI0C,gBAAgBC,IACzD,IAAK,MAAMC,KAASD,EACdC,EAAMC,aACRxB,EAAUC,EAASC,EAEvB,IAEFA,EAAQvB,6BAA6B8C,QAAQpB,IAE3CA,GAAMA,EAAGE,YAAc,GAAKF,EAAGG,aAAe,GAChD3I,EAAO4I,MAAQ,IAAMJ,EAAGE,YAAc,GACtC1I,EAAO6I,OAAS,IAAML,EAAGG,aAAe,GACpCP,EAAQU,WACVT,EAAQlE,OACNiE,EAAQhE,WAAaoE,EAAGE,YAAcF,EAAGG,aAAeH,EAAGE,YAAc,IAAMF,EAAGG,aAAe,MAGnGN,EAAQlE,OAAOiE,EAAQhE,YAGzBiE,EAAQlE,OAAOiE,EAAQhE,WAEzBiE,EAAQtG,aAAakH,EAAU,KAMjCY,KAAKC,UAAU5B,EAAQc,GAAQe,eAAiBF,KAAKC,UAAU1B,KACjED,EAAUC,EAASH,EAAOe,IAC1Bd,EAAQc,GAAQe,YAAcxM,OAAOyM,OAAO5B,IAE9CC,EAAQtG,aAAakH,EACvB,C,aCnGO,MAAMgB,EAAY,EAAIC,cAEzB,kBAACC,EAAAA,WAAUA,CACTC,OAAO,OACPC,aAAelE,I,IAETmE,EAAcA,EADlB,MAAMA,EAAWnE,EAAM9B,OACvB,IAAIiG,QAAAA,EAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAKC,SAASD,QAAAA,EAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAKC,MAAMrD,QAAO,EAAE,C,IACvBoD,EAAb,MAAME,EAAOF,QAAAA,EAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAKC,MAAM,GACxB,GAAkB,kBAAdC,EAAKpJ,KAA0B,CACjC,MAAMqJ,EAAS,IAAIC,WACnBD,EAAO5K,OAAS,WACfqK,EAASO,EAAOE,OACjB,EACAF,EAAOG,cAAcJ,EACtB,CACH,IAEH,mBCbQK,EAAS,IAAIC,EAAAA,aFiG+C,EACvE1C,UACAjH,OACAyH,QACAC,SACAkC,sB,IA6Be5J,EA1Bf,MAAM8H,GAAY+B,EAAAA,EAAAA,UAAQ,KACjB,CAAC,IACP,IACH,IAAIC,EAAkB,EACtB,IAAK,IAAInD,EAAI,EAAGA,EAAI3G,EAAK+J,OAAOhE,OAAQY,IAAK,CAC3C,MAAMqD,EAAIhK,EAAK+J,OAAOpD,GACtB,IAAK,IAAIsD,EAAI,EAAGA,EAAID,EAAEE,OAAOnE,OAAQkE,IAAK,CACxC,MAAME,EAAIH,EAAEE,OAAOD,GACnB,GAAe,WAAXE,EAAElK,MAAyC,IAApBkK,EAAE9J,OAAO0F,SAGpC+D,IACAhC,EAAU,IAAMgC,GAAmBK,EAAE9J,OAAO8J,EAAE9J,OAAO0F,OAAS,GAC1DoE,EAAEC,MAAM,CACV,MAAM/J,EAAS8J,EAAE9J,OACbA,EAAOgK,QACTvC,EAAU,IAAMgC,GAAmBzJ,EAAOgK,OAAOhK,EAAOgK,OAAOtE,OAAS,GACxE+B,EAAUqC,EAAEC,MAAQ/J,EAAOgK,OAAOhK,EAAOgK,OAAOtE,OAAS,KAEzD+B,EAAU,IAAMgC,GAAmBzJ,EAAO8J,EAAE9J,OAAO0F,OAAS,GAC5D+B,EAAUqC,EAAEC,MAAQD,EAAE9J,OAAOA,EAAO0F,OAAS,GAEjD,CACF,CACF,CAEA,MAAM8B,GAAqB,QAAZ7H,EAAAA,EAAKsK,eAALtK,IAAAA,OAAAA,EAAAA,EAAcuK,WAAY,EACnCC,IAAc3C,KAAUf,KAAYnJ,SAASsI,eAAea,EAAOe,GAAQtC,UAAUK,IAC3F,GAAI4E,EAAW,C,IAsBGxK,EAAAA,EApBhB,IAAI4I,EAAoC,CACtC6B,OAAQ,GACRxH,WAAY,EACZkE,SAAU,OACVC,SAAU,OACVO,YAAY,EACZS,aAAa,EACbF,gBAAgB,EAChBC,sBAAsB,G,IAIenI,EAAAA,EAFnC6H,KAAUd,IACZ6B,EAAc7B,EAAQc,GAAQe,YAC1B7B,EAAQc,GAAQ6C,gBAAiB1K,QAAAA,EAAAA,SAAAA,IAAAA,GAAa,QAAbA,EAAAA,EAAMsK,eAANtK,IAAAA,OAAAA,EAAAA,EAAe0K,gBAClDzD,EAAQwD,OAAS7B,EAAY6B,SAGjC,MAAMxC,EAAO,YAxIR,uCAAuC0C,QAAQ,UAAWC,IAC9DA,EAAKC,OAAOC,gBAAgB,IAAIC,WAAW,IAAI,GAAM,IAAOH,EAAI,GAAMtN,SAAS,MAwIhFyJ,EAAQc,GAAU,CAChBI,KAAMA,EACN+C,YAAaC,IAAAA,cAAoB,MAAO,CAAErF,GAAIqC,IAC9CyC,aAAc1K,QAAAA,EAAAA,SAAAA,IAAAA,GAAa,QAAbA,EAAAA,EAAMsK,eAANtK,IAAAA,OAAAA,EAAAA,EAAe0K,aAC7B9B,YAAaA,EAEjB,CAEA,IAAK4B,GAAavD,EAAQwD,SAAW1D,EAAQc,GAAQe,YAAY6B,OAAQ,CAEvE,MAAMvD,EAAUJ,EAAOe,GACvBD,EAAaX,EAASC,EAASW,EAAQC,EACzC,CAEA,IAAK0C,GAECvD,EAAQwD,SAAW1D,EAAQc,GAAQe,YAAY6B,OAAQ,C,IACzD3D,EAAwB,QAAxBA,EAAAA,EAAOe,GAAQvF,mBAAfwE,IAAAA,GAAAA,EAA4BoE,SAC5B,MAAMhE,EAAU,IAAIiE,EAAqB,CACvC5F,UAAWwB,EAAQc,GAAQI,KAC3BzC,aAAc,2BAA2BkC,aAAkBD,KAC3DxJ,OAAQgJ,EAAQwD,SAElB,GAAIvD,EAAS,CACXJ,EAAOe,GAAUX,EACjB,MAAMrI,EAASqI,EAAQ5E,Y,IAErB3E,EADEkB,IACiD,QAAnDlB,EAAAA,SAASsI,eAAea,EAAOe,GAAQtC,UAAUK,WAAjDjI,IAAAA,GAAAA,EAAsD2I,YAAYzH,GAEtE,CACAkI,EAAQc,GAAQe,YAAcxM,OAAOyM,OAAO5B,GAC5CW,EAAaX,EAASC,EAASW,EAAQC,EACzC,CA2CF,OAxCAsD,EAAAA,EAAAA,YAAU,KAGR,KAAMvD,KAAUf,KAAYnJ,SAASsI,eAAea,EAAOe,GAAQtC,UAAUK,IAAK,CAChF,MAAMsB,EAAU,IAAIiE,EAAqB,CACvC5F,UAAWwB,EAAQc,GAAQI,KAC3BzC,aAAc,2BAA2BkC,aAAkBD,KAC3DxJ,OAAQgJ,EAAQwD,SAElB3D,EAAOe,GAAUX,EACjBH,EAAQc,GAAQe,YAAcxM,OAAOyM,OAAO5B,GACxCC,GACFA,EAAQnC,GAAG,SAAS,K,IAIPmC,EAAAA,EAHXA,EAAQzD,YAAYwD,EAAQiB,eAAgBjB,EAAQkB,sBACpDjB,EAAQ7D,YAAY4D,EAAQmB,YAAanB,EAAQmB,aACjDlB,EAAQvE,QAAQsE,EAAQE,SAAUF,EAAQG,SAC1C,MAAMC,EAAsB,QAAjBH,EAAAA,EAAQ5E,mBAAR4E,IAAAA,GAAkC,QAAlCA,EAAAA,EAAqBI,qBAArBJ,IAAAA,OAAAA,EAAAA,EAAoCI,cAC3CD,GAAMA,EAAGE,YAAc,GAAKF,EAAGG,aAAe,IAChDN,EAAQvB,6BAA+B,IAAI0C,gBAAgBC,IACzD,IAAK,MAAMC,KAASD,EACdC,EAAMC,aACRxB,EAAUC,EAASC,EAEvB,IAEFA,EAAQvB,6BAA6B8C,QAAQpB,GACzCJ,EAAQU,WACVT,EAAQlE,OACNiE,EAAQhE,WAAaoE,EAAGE,YAAcF,EAAGG,aAAeH,EAAGE,YAAc,IAAMF,EAAGG,aAAe,MAGnGN,EAAQlE,OAAOiE,EAAQhE,YAG3BiE,EAAQtG,aAAakH,EAAU,GAGrC,IACC,CAACb,EAASa,EAAWD,EAAQH,EAAQD,IAEjCV,EAAQc,GAAQmD,WAAW,IEnOuCK,iBAAgBC,GAClFA,EACJC,aAAa,CACZlK,KAAM,SACN+I,KAAM,UACNrI,YAAa,gBACbyJ,aAAc,mFAEfC,gBAAgB,CACf7F,GAAI,YACJvE,KAAM,SACN+I,KAAM,wBACNsB,OAAQ5C,EACR0C,aAAc,mFAEfG,eAAe,CACdtK,KAAM,YACN+I,KAAM,iBACNrI,YAAa,qDACbyJ,aAAc,EACdnF,SAAU,CACRuF,IAAK,GACLC,IAAK,EACLC,KAAM,MAGTH,eAAe,CACdtK,KAAM,UACN+I,KAAM,oBACNrI,YAAa,kDACbyJ,aAAc,EACdnF,SAAU,CACRuF,KAAM,IACNC,IAAK,IACLC,KAAM,KAGTH,eAAe,CACdtK,KAAM,UACN+I,KAAM,kBACNrI,YAAa,+CACbyJ,aAAc,EACdnF,SAAU,CACRuF,KAAM,IACNC,IAAK,IACLC,KAAM,KAGTC,iBAAiB,CAChB1K,KAAM,aACN+I,KAAM,cACNrI,YAAa,mCACbyJ,cAAc,IAEfO,iBAAiB,CAChB1K,KAAM,cACN+I,KAAM,qBACNrI,YAAa,yDACbyJ,cAAc,IAEfO,iBAAiB,CAChB1K,KAAM,iBACN+I,KAAM,mBACNrI,YAAa,mCACbyJ,cAAc,IAEfO,iBAAiB,CAChB1K,KAAM,uBACN+I,KAAM,0BACNrI,YAAa,0CACbyJ,cAAc,K","sources":["webpack:///external amd \"@grafana/data\"","webpack:///external amd \"@grafana/ui\"","webpack:///external amd \"react\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./synoptic/index.ts","webpack:///./ScadavisPanel.tsx","webpack:///./SvgFilePicker.tsx","webpack:///./module.ts"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__305__;","module.exports = __WEBPACK_EXTERNAL_MODULE__388__;","module.exports = __WEBPACK_EXTERNAL_MODULE__650__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/*\n *\n * SCADAvis.io Synoptic API © 2018-2023 Ricardo L. Olsen / DSC Systems ALL RIGHTS RESERVED.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, version 3.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n */\n\nexport type SvArgs = {\n  container: HTMLDivElement | string;\n  apikey: string;\n  iframeparams: string | null;\n  svgurl: string | null;\n  colorsTable: Record<number, string>;\n};\n\nexport class ScadaVis {\n  version = '2.0.7t';\n  iframe: HTMLIFrameElement | null = null;\n  componentloaded = false;\n  readyfordata = false;\n  domain = '*';\n  rtdata: any = { data: { type: 'tags', tags: [] } };\n  npts: any = {};\n  vals: any = {};\n  qualifs: any = {};\n  descriptions: any = {};\n  npt = 0;\n  svgobj: any = null;\n  zoomobj: any = null;\n  moveobj: any = null;\n  enabletoolsobj: any = null;\n  enablekeyboardobj: any = null;\n  enableflashobj: any = null;\n  hidewatermarkobj: any = null;\n  setcolorobj: any = [];\n  setcolorsobj: any = null;\n  resetobj: any = null;\n  tagsList = '';\n  onready: any = null;\n  onerror: any = null;\n  onclick: any = null;\n  loadingSVG = 0;\n  updateHandle = 0;\n  resolveFunction: any = null;\n  rejectFunction: any = null;\n  container: HTMLDivElement | string | Object | any = null;\n  apikey: any = null;\n  iframeparams: any = null;\n  svgurl: any = null;\n  colorsTable: any = null;\n  enablemouseobj: any = null;\n  mousewheelobj: any = null;\n  loaded: any = null;\n  aux = false;\n  panelContainerResizeObserver: any;\n\n  /**\n   * Generate an unique DOM element ID.\n   * @private\n   * @method guidGenerator\n   * @memberof scadavis\n   * @returns {string} DOM ID.\n   */\n  guidGenerator (): string {\n    const S4 = function () {\n      return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\n    };\n    return S4() + S4() + '-' + S4() + '-' + S4() + '-' + S4() + '-' + S4() + S4() + S4();\n  }\n\n  /**\n   * Create a DOM element from HTML.\n   * @private\n   * @method createElementFromHTML\n   * @memberof scadavis\n   * @returns {string} DOM ID.\n   */\n  createElementFromHTML (htmlString: string): ChildNode | null {\n    const div = document.createElement('div');\n    div.innerHTML = htmlString.trim();\n    return div.firstChild;\n  }\n\n  /**\n   * Load the SVG synoptic display file from a SVG URL.\n   * @method loadURL\n   * @memberof scadavis\n   * @param {string} svgurl - The SVG URL.\n   */\n  loadURL (svgurl: string) {\n    this.svgobj = null;\n    this.readyfordata = false;\n    this.svgurl = svgurl;\n    if (this.svgurl !== '' && this.loadingSVG === 0) {\n      this.loadingSVG = 1;\n      const xhr = new XMLHttpRequest();\n      xhr.open('GET', this.svgurl); // here you point to the SVG synoptic display file\n      let _this = this;\n      xhr.onload = function () {\n        if (xhr.status === 200) {\n          {\n            _this.loadingSVG = 0;\n          }\n          if (_this.componentloaded) {\n            // SCADAvis component already loaded?\n            _this.iframe?.contentWindow?.postMessage(xhr.responseText, _this.domain);\n          }\n          // send the SVG file contents to the component\n          else {\n            _this.svgobj = xhr.responseText;\n          } // buffers the result for later use (this can save some time)\n        }\n      };\n      xhr.onreadystatechange = function (oEvent) {\n        if (xhr.readyState === 4) {\n          if (xhr.status === 200) {\n          } else {\n            _this.loadingSVG = 0;\n            if (this.onerror) {\n              _this.onerror(xhr.statusText);\n            } else {\n              console.warn('SCADAvis.io API: error loading SVG URL. ' + xhr.statusText);\n            }\n          }\n        }\n      };\n      xhr.send();\n    }\n  }\n\n  /**\n   * Reset all data values and tags.\n   * @method resetData\n   * @memberof scadavis\n   */\n  resetData () {\n    this.npt = 0;\n    this.npts = {};\n    this.vals = {};\n    this.qualifs = {};\n    this.descriptions = {};\n\n    const obj = { data: { type: 'resetData' } };\n    if (this.readyfordata) {\n      window.postMessage(obj, this.domain);\n    } else {\n      this.resetobj = obj;\n    }\n  }\n\n  /**\n   * Update values for tags to the component. Send all tags available. Work as a promise. Only available for version 2+.\n   * @method refreshDisplay\n   * @memberof scadavis\n   * @param {Object.<string, number>} [values] - values in a object like { \"tag1\" : 1.0, \"tag2\": 1.2, \"tag3\": true }.\n   * @returns {Object} Returns a promise. The promise resolves after the display refresh is completed.\n   */\n  refreshDisplay (values?: Record<string, number>) {\n    let _this = this;\n    return new Promise(function (resolve, reject) {\n      if (!_this.readyfordata) {\n        reject(new Error('Not ready for data!'));\n        return;\n      }\n      if (_this.resolveFunction) {\n        reject(new Error('Ongoing display refresh!'));\n        return;\n      }\n      _this.resolveFunction = resolve;\n      _this.rejectFunction = reject;\n      _this.updateValues(values);\n    });\n  }\n\n  /**\n   * Update values for tags to the component. Send all tags available. (use refreshDisplay when promise-based method preferred)\n   * @method updateValues\n   * @memberof scadavis\n   * @param {Object.<string, number>} [values] - values in a object like { \"tag1\" : 1.0, \"tag2\": 1.2, \"tag3\": true }.\n   * @returns {number} Returns request handle or null if not ready.\n   */\n  updateValues (values?: Record<string, number>) {\n    if (!this.readyfordata) {\n      return null;\n    }\n    let _this = this;\n    if (typeof values === 'object' && values !== null) {\n      Object.keys(values).map(function (tag, index) {\n        let n;\n        if (tag in _this.npts) {\n          n = _this.npts[tag];\n        } else {\n          n = ++_this.npt;\n          _this.npts[tag] = n;\n        }\n        _this.vals[tag] = values[tag];\n        _this.qualifs[tag] = 0x00;\n      });\n    }\n\n    const rtdata: any = {\n      data: { type: 'tags', tags: [], handle: ++this.updateHandle },\n    };\n    Object.keys(this.npts).map(function (tag, index) {\n      rtdata.data.tags[index] = {};\n      rtdata.data.tags[index].path = tag;\n      rtdata.data.tags[index].value = _this.vals[tag];\n      rtdata.data.tags[index].quality = !(_this.qualifs[tag] & 0x80);\n      if (typeof _this.vals[tag] === 'number') {\n        rtdata.data.tags[index].type = 'float';\n      } else if (typeof _this.vals[tag] === 'boolean') {\n        rtdata.data.tags[index].type = 'bool';\n      } else {\n        rtdata.data.tags[index].type = 'string';\n      }\n      rtdata.data.tags[index].parameters = {\n        Value: {\n          TagClientItem: _this.npts[tag],\n          Alarmed: (_this.qualifs[tag] & 0x100) === 0x100,\n          Desc: _this.descriptions[tag],\n        },\n      };\n    });\n    this.iframe?.contentWindow?.postMessage(rtdata, this.domain);\n    return rtdata.handle;\n  }\n\n  /**\n   * Set a value for a tag. The component will be updated immediately if the component is ready for data.\n   * Notice that updating the component at too many times per second can cause performance problems.\n   * Preferably update many values using storeValue() then call updateValues() once (repeat after a second or more).\n   * @method setValue\n   * @memberof scadavis\n   * @param {string} tag - Tag name.\n   * @param {number} value - Value for the tag.\n   * @param {bool} [failed=false] - True if value is bad or old, false or absent if value is good.\n   * @param {bool} [alarmed=false] - True if value is alarmed, false or absent if value is normal.\n   * @param {string} [description=tag] - Description.\n   * @returns {bool} Returns true if the component was updated (true) or the value was buffered (false).\n   */\n  setValue (tag: string, value: number, failed?: boolean, alarmed?: boolean, description?: string) {\n    if (tag === '' || tag === undefined || tag === null) {\n      return this.readyfordata;\n    }\n    let n;\n    failed = failed || false;\n    alarmed = alarmed || false;\n    description = description || tag;\n    if (tag in this.npts) {\n      n = this.npts[tag];\n    } else {\n      n = ++this.npt;\n      this.npts[tag] = n;\n    }\n    this.vals[tag] = value;\n    this.qualifs[tag] = (failed ? 0x80 : 0x00) | (alarmed ? 0x100 : 0x00);\n    this.descriptions[tag] = description;\n    if (this.readyfordata) {\n      const rtdata: any = {\n        data: { type: 'tags', tags: [], handle: ++this.updateHandle },\n      };\n      rtdata.data.tags[0] = {};\n      rtdata.data.tags[0].path = tag;\n      rtdata.data.tags[0].value = value;\n      rtdata.data.tags[0].quality = !(this.qualifs[tag] & 0x80);\n      if (typeof value === 'number') {\n        rtdata.data.tags[0].type = 'float';\n      } else if (typeof value === 'boolean') {\n        rtdata.data.tags[0].type = 'bool';\n      } else {\n        rtdata.data.tags[0].type = 'string';\n      }\n      rtdata.data.tags[0].parameters = {\n        Value: {\n          TagClientItem: n,\n          Alarmed: (this.qualifs[tag] & 0x100) === 0x100,\n          Desc: this.descriptions[tag],\n        },\n      };\n      this.iframe?.contentWindow?.postMessage(rtdata, this.domain);\n    }\n    return this.readyfordata;\n  }\n\n  /**\n   * Store a value for a tag. The component will not be updated until called updateValues().\n   * @method storeValue\n   * @memberof scadavis\n   * @param {string} tag - Tag name.\n   * @param {number} value - Value for the tag.\n   * @param {bool} [failed=false] - True if value is bad or old, false or absent if value is good.\n   * @param {bool} [alarmed=false] - True if value is alarmed, false or absent if value is normal.\n   * @param {string} [description=tag] - Description.\n   * @returns {bool} - Returns true if the component is ready for data, false if not.\n   */\n  storeValue (tag: string, value: number, failed?: boolean, alarmed?: boolean, description?: string) {\n    if (tag === '' || tag === undefined || tag === null) {\n      return this.readyfordata;\n    }\n    let n;\n    failed = failed || false;\n    alarmed = alarmed || false;\n    description = description || tag;\n    if (tag in this.npts) {\n      n = this.npts[tag];\n    } else {\n      n = ++this.npt;\n      this.npts[tag] = n;\n    }\n    this.vals[tag] = value;\n    this.qualifs[tag] = (failed ? 0x80 : 0x00) | (alarmed ? 0x100 : 0x00);\n    this.descriptions[tag] = description;\n    return this.readyfordata;\n  }\n\n  /**\n   * Get a value for a tag.\n   * @method getValue\n   * @memberof scadavis\n   * @param {Object} tag - Tag name.\n   * @returns {number} Returns the value for the tag or null if not found.\n   */\n  getValue (tag: string): number | null {\n    if (tag in this.vals) {\n      return this.vals[tag];\n    }\n    return null;\n  }\n\n  /**\n   * Recover the API Key.\n   * @method getApiKey\n   * @memberof scadavis\n   * @returns {string} API Key.\n   */\n  getApiKey (): string {\n    return this.apikey;\n  }\n\n  /**\n   * Get SCADAvis.io API Version.\n   * @method getVersion\n   * @memberof scadavis\n   * @returns {string} SCADAvis.io API Version.\n   */\n  getVersion (): string {\n    return this.version;\n  }\n\n  /**\n   * Get the DOM element of the iframe.\n   * @method getIframe\n   * @memberof scadavis\n   * @returns {Object} DOM element reference.\n   */\n  getIframe (): HTMLIFrameElement | null {\n    return this.iframe;\n  }\n\n  /**\n   * Get the current state of the component.\n   * @method getComponentState\n   * @memberof scadavis\n   * @returns {number} 0=not loaded, 1=loaded and ready for graphics, 2=SVG graphics processed and ready for data.\n   */\n  getComponentState (): number {\n    if (this.componentloaded === false) {\n      return 0;\n    } else if (this.readyfordata === false) {\n      return 1;\n    }\n    return 2;\n  }\n\n  /**\n   * Get SCADAvis.io Component Version.\n   * @method getComponentVersion\n   * @memberof scadavis\n   * @returns {string} SCADAvis.io Component Version.\n   */\n  getComponentVersion (): string {\n    return this.version;\n  }\n\n  /**\n   * Get tags list from the loaded SVG graphics.\n   * @method getTagsList\n   * @memberof scadavis\n   * @returns {string} Tags list.\n   */\n  getTagsList (): string {\n    return this.tagsList;\n  }\n\n  /**\n   * Move the graphic. Multiple calls have cumulative effect.\n   * @method moveBy\n   * @memberof scadavis\n   * @param {number} [dx=0] Horizontal distance.\n   * @param {number} [dy=0] Vertical distance.\n   * @param {boolean} [animate=false] Animate or not.\n   */\n  moveBy (dx: number, dy?: number, animate?: any) {\n    dx = dx || 0;\n    dy = dy || 0;\n    animate = animate || false;\n    const obj = { data: { type: 'moveBy', dx: dx, dy: dy, animate: animate } };\n    if (this.readyfordata) {\n      this.iframe?.contentWindow?.postMessage(obj, this.domain);\n    } else {\n      this.moveobj = obj;\n    }\n  }\n\n  /**\n   * Apply zoom level. Multiple calls have cumulative effect.\n   * @method zoomTo\n   * @memberof scadavis\n   * @param {number} [zoomLevel=1.1] Zoom level. >1 zoom in, <1 zoom out.\n   * @param {string|{x: number, y: number}} [target={x:0,y:0}] Id of object to zoom in/out or x/y coordinates.\n   * @param {boolean} [animate=false] Animate or not.\n   */\n  zoomTo (zoomLevel: number, target?: any, animate?: boolean) {\n    zoomLevel = zoomLevel || 1.1;\n    animate = animate || false;\n    const obj = {\n      data: {\n        type: 'zoomTo',\n        zoomLevel: zoomLevel,\n        target: target,\n        animate: animate,\n      },\n    };\n    if (this.readyfordata) {\n      this.iframe?.contentWindow?.postMessage(obj, this.domain);\n    } else {\n      this.zoomobj = obj;\n    }\n  }\n\n  /**\n   * Apply default zoom level/position.\n   * @method zoomToOriginal\n   * @memberof scadavis\n   * @param {boolean} [animate=false] Animate or not.\n   */\n  zoomToOriginal (animate?: boolean) {\n    animate = animate || false;\n    const obj = { data: { type: 'zoomToOriginal', animate: animate } };\n    if (this.readyfordata) {\n      this.iframe?.contentWindow?.postMessage(obj, this.domain);\n    }\n  }\n\n  /**\n   * Enable or disable pan and zoom tools.\n   * @method enableTools\n   * @memberof scadavis\n   * @param {boolean} [panEnabled=true] Enable/disable Pan tool.\n   * @param {boolean} [zoomEnabled=false] Enable/disable Zoom tool.\n   */\n  enableTools (panEnabled?: boolean, zoomEnabled?: boolean) {\n    if (typeof panEnabled === 'undefined' || panEnabled) {\n      panEnabled = true;\n    }\n    if (typeof zoomEnabled === 'undefined') {\n      zoomEnabled = false;\n    }\n    const obj = {\n      data: {\n        type: 'enableTools',\n        panEnabled: panEnabled,\n        zoomEnabled: zoomEnabled,\n      },\n    };\n    if (this.readyfordata) {\n      this.iframe?.contentWindow?.postMessage(obj, this.domain);\n    } else {\n      this.enabletoolsobj = obj;\n    }\n  }\n\n  /**\n   * Enable or disable pan and zoom via mouse.\n   * @method enableMouse\n   * @memberof scadavis\n   * @param {boolean} [panEnabled=true] Enable/disable pan via mouse.\n   * @param {boolean} [zoomEnabled=true] Enable/disable zoom via mouse.\n   */\n  enableMouse (panEnabled?: boolean, zoomEnabled?: boolean) {\n    if (typeof panEnabled === 'undefined' || panEnabled) {\n      panEnabled = true;\n    }\n    if (typeof zoomEnabled === 'undefined' || zoomEnabled) {\n      zoomEnabled = true;\n    }\n    const obj = {\n      data: {\n        type: 'enableMouse',\n        panEnabled: panEnabled,\n        zoomEnabled: zoomEnabled,\n      },\n    };\n    if (this.readyfordata) {\n      this.iframe?.contentWindow?.postMessage(obj, this.domain);\n    } else {\n      this.enablemouseobj = obj;\n    }\n  }\n\n  /**\n   * Set direction of zoom bound to mouse wheel, and event propagation.\n   * @method setMouseWheel\n   * @memberof scadavis\n   * @param {boolean} [directionBackOut=true] true=back/out, false=back/in.\n   * @param {boolean} [blockEventPropagation=true] Enable/disable wheel event propagation.\n   */\n  setMouseWheel (directionBackOut?: boolean, blockEventPropagation?: boolean) {\n    if (typeof directionBackOut === 'undefined' || directionBackOut) {\n      directionBackOut = true;\n    }\n    if (typeof blockEventPropagation === 'undefined' || blockEventPropagation) {\n      blockEventPropagation = true;\n    }\n    const obj = {\n      data: {\n        type: 'setMouseWheel',\n        directionBackOut: directionBackOut,\n        blockEventPropagation: blockEventPropagation,\n      },\n    };\n    if (this.readyfordata) {\n      this.iframe?.contentWindow?.postMessage(obj, this.domain);\n    } else {\n      this.mousewheelobj = obj;\n    }\n  }\n\n  /**\n   * Enable or disable keyboard functions (zoom & pan).\n   * @method enableKeyboard\n   * @memberof scadavis\n   * @param {boolean} [keyEnabled=true] Enable/disable Pan tool.\n   */\n  enableKeyboard (keyEnabled?: boolean) {\n    if (typeof keyEnabled === 'undefined' || keyEnabled) {\n      keyEnabled = true;\n    }\n    const obj = { data: { type: 'enableKeyboard', keyEnabled: keyEnabled } };\n    if (this.readyfordata) {\n      this.iframe?.contentWindow?.postMessage(obj, this.domain);\n    } else {\n      this.enablekeyboardobj = obj;\n    }\n  }\n\n  /**\n   * Enable or disable alarm flash (objects blinking when alarmed).\n   * @method enableAlarmFlash\n   * @memberof scadavis\n   * @param {boolean} [alarmFlashEnabled=true] Enable/disable global alarm flash.\n   */\n  enableAlarmFlash (alarmFlashEnabled?: boolean) {\n    if (typeof alarmFlashEnabled === 'undefined' || alarmFlashEnabled) {\n      alarmFlashEnabled = true;\n    }\n    const obj = {\n      data: { type: 'enableAlarmFlash', alarmFlashEnabled: alarmFlashEnabled },\n    };\n    if (this.componentloaded) {\n      this.iframe?.contentWindow?.postMessage(obj, this.domain);\n    } else {\n      this.enableflashobj = obj;\n    }\n  }\n\n  /**\n   * Hides the watermark.\n   * @method hideWatermark\n   * @memberof scadavis\n   */\n  hideWatermark () {\n    const obj = { data: { type: 'hideWatermark' } };\n    if (this.readyfordata) {\n      this.iframe?.contentWindow?.postMessage(obj, this.domain);\n    } else {\n      this.hidewatermarkobj = obj;\n    }\n  }\n\n  /**\n   * Set color code for color shortcuts.\n   * @method setColor\n   * @memberof scadavis\n   * @param {number} [colorNumber] Color shortcut number.\n   * @param {string} [colorCode] Color code.\n   */\n  setColor (colorNumber: number, colorCode: string) {\n    const obj = {\n      data: {\n        type: 'setColor',\n        colorNumber: colorNumber,\n        colorCode: colorCode,\n      },\n    };\n    if (this.componentloaded) {\n      this.iframe?.contentWindow?.postMessage(obj, this.domain);\n    } else {\n      this.setcolorobj.push(obj);\n    }\n  }\n\n  /**\n   * Set color codes for color shortcuts.\n   * @method setColors\n   * @memberof scadavis\n   * @param {Object.<number,string>} [colorsTable] Color shortcut number.\n   */\n  setColors (colorsTable: Record<number, string>) {\n    const obj = {\n      data: {\n        type: 'setColors',\n        colorsTable: colorsTable,\n      },\n    };\n    if (this.componentloaded) {\n      this.iframe?.contentWindow?.postMessage(obj, this.domain);\n    } else {\n      this.setcolorsobj = obj;\n    }\n  }\n\n  /**\n   * Set event listeners.\n   * @method on\n   * @memberof scadavis\n   * @param {string} event Event name, one of: \"ready\", \"click\" (the first parameter of callback is the element id).\n   * @param {function} callback Callback function.\n   * @returns True for valid event, false for invalid event name.\n   */\n  on (event: string, callback: Function): boolean {\n    let ret = false;\n    switch (event) {\n      case 'loaded':\n        this.loaded = callback;\n        ret = true;\n        break;\n      case 'ready':\n        this.onready = callback;\n        ret = true;\n        break;\n      case 'error':\n        this.onerror = callback;\n        ret = true;\n        break;\n      case 'click':\n        this.onclick = callback;\n        ret = true;\n        break;\n      default:\n        break;\n    }\n\n    return ret;\n  }\n\n  /**\n   * Must be created with the \"new\" keyword. (use scadavisInit when promise-based method preferred). E.g. var svgraph = new scadavis(\"div1\", \"\", \"https://svgurl.com/svgurl.svg\");\n   * @class scadavis - SCADAvis.io synoptic API class.\n   * @param {string} [container] - ID of the container object. If empty or null the iframe will be appended to the body.\n   * @param {string} [iframeparams] - Parameter string for configuring iframe (excluding id and src and sandbox) e.g. 'frameborder=\"0\" height=\"250\" width=\"250\"'.\n   * @param {string} [svgurl] - URL for the SVG file.\n   * @param {{container: string|Object, iframeparams: string, svgurl: string, colorsTable: Object}} [paramsobj] - Alternatively parameters can be passed in an object.\n   * Example usage: var svgraph = new scadavis(\"div1\", \"\", \"https://svgurl.com/svgurl.svg\");\n   */\n  constructor (container: SvArgs | string, iframeparams?: string, svgurl?: string) {\n    const _this: any = this;\n    let id;\n    let iframehtm;\n    let scrolling = ' scrolling=\"no\" ';\n\n    if (typeof container === 'object') {\n      this.container = container.container || '';\n      this.apikey = container.apikey || '';\n      this.iframeparams = container.iframeparams || 'frameborder=\"0\" height=\"250\" width=\"250\"';\n      this.svgurl = container.svgurl || '';\n      this.colorsTable = container.colorsTable || null;\n    } else {\n      this.container = container || '';\n      this.apikey = '';\n      this.iframeparams = iframeparams || 'frameborder=\"0\" height=\"250\" width=\"250\"';\n      this.svgurl = svgurl || '';\n      this.colorsTable = null;\n    }\n\n    this.iframe = null;\n    this.componentloaded = false;\n    this.readyfordata = false;\n    this.domain = '*';\n    this.rtdata = { data: { type: 'tags', tags: [] } };\n    this.npts = {};\n    this.vals = {};\n    this.qualifs = {};\n    this.descriptions = {};\n    this.npt = 0;\n    this.svgobj = null;\n    this.zoomobj = null;\n    this.moveobj = null;\n    this.enabletoolsobj = null;\n    this.enablekeyboardobj = null;\n    this.enableflashobj = null;\n    this.hidewatermarkobj = null;\n    this.setcolorobj = [];\n    this.setcolorsobj = null;\n    this.resetobj = null;\n    this.tagsList = '';\n    this.onready = null;\n    this.onerror = null;\n    this.onclick = null;\n    this.loadingSVG = 0;\n    this.updateHandle = 0;\n    this.resolveFunction = null;\n    this.rejectFunction = null;\n\n    id = this.guidGenerator();\n\n    if (typeof this.container === 'string') {\n      if (this.container.trim().length === 0) {\n        this.container = document.body;\n      } else {\n        this.container = document.getElementById(this.container);\n        if (this.container === null) {\n          this.container = document.body;\n        }\n      }\n    }\n\n    //// get library path\n    //const scripts = document.getElementsByTagName('script');\n    //let libPath = '.';\n    //for (let i = 0; i < scripts.length; ++i) {\n    //  const pos = scripts[i].src.indexOf('synopticapi.js');\n    //  if (pos > 0) {\n    //    libPath = scripts[i].src.substring(0, pos - 1);\n    //    break;\n    //  }\n    //}\n\n    // default is scrolling='no'\n    if (this.iframeparams.indexOf('scrolling') >= 0) {\n      scrolling = '';\n    }\n    const subUrl = grafanaBootData?.appSubUrl || grafanaBootData?.settings?.appSubUrl || '';\n    iframehtm =\n      '<iframe id=\"' +\n      id +\n      '\" sandbox=\"allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox\" ' +\n      this.iframeparams +\n      scrolling +\n      ` src=\"${subUrl}/public/plugins/scadavis-synoptic-panel/synoptic/synoptic.html\"></iframe>`;\n    if (this.container.innerHTML !== undefined) {\n      (this.container as HTMLDivElement).appendChild(this.createElementFromHTML(iframehtm) as Node);\n    } else {\n      (this.container as HTMLDivElement).insertAdjacentHTML('afterend', iframehtm);\n    }\n\n    this.iframe = document.getElementById(id) as HTMLIFrameElement;\n\n    this.componentloaded = false;\n    this.readyfordata = false;\n\n    if (this.colorsTable) {\n      this.setColors(this.colorsTable);\n    }\n    if (this.svgurl !== '') {\n      this.loadURL(this.svgurl);\n    }\n\n    window.addEventListener('message', function (event: any) {\n      // receive messages, watch for messages from the SCADAvis.io component.\n\n      // for better security: check the origin of the message ( must be from the SCADAvis.io domain and component iframe )\n      if (\n        event.source === _this.iframe.contentWindow\n        // && event.origin === this.domain\n      ) {\n        // when message of type \"updated\", resolve promise\n        if (\n          typeof event.data === 'object' &&\n          event.data.data.type !== undefined &&\n          event.data.data.type === 'updated' &&\n          event.data.data.handle === _this.updateHandle\n        ) {\n          if (event.data.data.error) {\n            if (_this.rejectFunction) {\n              _this.rejectFunction(new Error(event.data.data.error));\n            }\n          } else if (_this.resolveFunction) {\n            _this.resolveFunction();\n          }\n          _this.resolveFunction = null;\n          _this.rejectFunction = null;\n          return;\n        }\n\n        // when message of type \"loaded\", get and send an SVG file to it\n        if (typeof event.data === 'object' && event.data.data.type !== undefined && event.data.data.type === 'loaded') {\n          _this.componentloaded = true;\n          if (_this.setcolorobj.length > 0) {\n            for (let i = 0; i < _this.setcolorobj.length; i++) {\n              event.source.postMessage(_this.setcolorobj[i], event.origin);\n            }\n            _this.setcolorobj = [];\n          }\n          if (_this.setcolorsobj !== null) {\n            event.source.postMessage(_this.setcolorsobj, event.origin);\n            _this.setcolorsobj = null;\n          }\n          if (_this.enableflashobj !== null) {\n            event.source.postMessage(_this.enableflashobj, event.origin);\n            _this.enableflashobj = null;\n          }\n          if (_this.svgobj !== null) {\n            event.source.postMessage(_this.svgobj, event.origin);\n          }\n          // send the SVG file contents to the component\n          else if (_this.svgurl !== '') {\n            _this.loadURL(_this.svgurl);\n          }\n          return;\n        }\n\n        // when message type \"ready\", the SVG screen is processed, then we can send real time data to the SCADAvis.io component\n        if (typeof event.data === 'object' && event.data.data.type !== undefined && event.data.data.type === 'ready') {\n          _this.readyfordata = true;\n          _this.tagsList = event.data.data.attributes.tagsList;\n          if (_this.rtdata.data.tags.length) {\n            _this.updateValues();\n          }\n          if (_this.zoomobj) {\n            event.source.postMessage(_this.zoomobj, event.origin);\n            _this.zoomobj = null;\n          }\n          if (_this.moveobj) {\n            event.source.postMessage(_this.moveobj, event.origin);\n            _this.moveobj = null;\n          }\n          if (_this.enabletoolsobj) {\n            event.source.postMessage(_this.enabletoolsobj, event.origin);\n            _this.enabletoolsobj = null;\n          }\n          if (_this.enablemouseobj) {\n            event.source.postMessage(_this.enablemouseobj, event.origin);\n            _this.enablemouseobj = null;\n          }\n          if (_this.mousewheelobj) {\n            event.source.postMessage(_this.mousewheelobj, event.origin);\n            _this.mousewheelobj = null;\n          }\n          if (_this.enablekeyboardobj) {\n            event.source.postMessage(_this.enablekeyboardobj, event.origin);\n            _this.enablekeyboardobj = null;\n          }\n          if (_this.hidewatermarkobj) {\n            event.source.postMessage(_this.hidewatermarkobj, event.origin);\n            _this.hidewatermarkobj = null;\n          }\n          if (_this.resetobj) {\n            event.source.postMessage(_this.resetobj, event.origin);\n            _this.resetobj = null;\n          }\n          if (_this.onready) {\n            _this.onready();\n          }\n          return;\n        }\n\n        // when message of type \"click\", emit the event callback\n        if (typeof event.data === 'object' && event.data.data.type !== undefined && event.data.data.type === 'click') {\n          if (_this.onclick) {\n            _this.onclick(event.data.data.attributes.event, event.data.data.attributes.tag);\n          }\n          return;\n        }\n      }\n    });\n\n    // return this\n  }\n\n  /**\n   * Initialization of the library via promise. Only available for version 2+.\n   * @function scadavisInit\n   * @global\n   * @param {string} [container] - ID of the container object. If empty or null the iframe will be appended to the body.\n   * @param {string} [iframeparams] - Parameter string for configuring iframe (excluding id and src and sandbox) e.g. 'frameborder=\"0\" height=\"250\" width=\"250\"'.\n   * @param {string} [svgurl] - URL for the SVG file.\n   * @param {{container: string|Object, iframeparams: string, svgurl: string, colorsTable: Object}} [paramsobj] - Alternatively parameters can be passed in an object.\n   * @returns {Object} Returns a promise with the {@link scadavis} object as a parameter. The promise resolves after the svg file is preprocessed (if an SVG file was specified) or after the component is loaded.\n   * Example usage: scadavisInit( {container: \"div1\", svgurl: \"file.svg\"} ).then(function (sv) { ... });\n   */\n  /*  \nscadavisInit (container: any, iframeparams: string, svgurl: string) {\n  let _this = this;\n  return new Promise(function (resolve, reject) {\n    try {\n      if (typeof container === 'object') {\n        svgurl = svgurl || container.svgurl;\n        delete container.svgurl;\n      }\n      const sv = _this.scadavis(container, iframeparams, '');\n      if (!svgurl) {\n        resolve(sv);\n        return;\n      }\n      sv.on('error', function (errMsg: any) {\n        reject(errMsg);\n      });\n      sv.on('ready', function () {\n        resolve(sv);\n      });\n      sv.loadURL(svgurl);\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n*/\n}\n","// SCADAVis.io Synoptic Panel for Grafana\n// © 2023 Ricardo L. Olsen / DSC Systems\n\nimport { PanelProps } from '@grafana/data';\nimport React, { useEffect, useMemo } from 'react';\nimport { ScadavisPanelOptions } from 'types';\nimport * as synopticapi from './synoptic';\n\nconst svObjs: synopticapi.ScadaVis[] = [];\nconst svState: svStateT[] = [];\ntype tagValuesT = Record<string, number>;\ntype svStateT = {\n  svId: string;\n  svReactElem: any;\n  dashboardUID: string;\n  lastOptions: ScadavisPanelOptions;\n};\n\n// replacement for crypt.randomUUID (that is only available for https context)\n// https://stackoverflow.com/a/2117523/2800218\n// LICENSE: https://creativecommons.org/licenses/by-sa/4.0/legalcode\nfunction _randomUUID(): string {\n  return '10000000-1000-4000-8000-100000000000'.replace(/[018]/g, (c: any) =>\n    (c ^ (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (c / 4)))).toString(16)\n  );\n}\n\n// apply zoom, etc. to the SVG view\nfunction doAdjusts(options: ScadavisPanelOptions, svgraph: synopticapi.ScadaVis) {\n  svgraph.zoomToOriginal();\n  svgraph.moveBy(-options.moveByX, -options.moveByY);\n  const el = svgraph.getIframe()?.parentElement?.parentElement;\n  if (el && el.clientWidth > 0 && el.clientHeight > 0) {\n    const iframe = svgraph.getIframe();\n    if (iframe) {\n      iframe.width = '' + (el.clientWidth - 5);\n      iframe.height = '' + (el.clientHeight - 5);\n    }\n    if (options.autoResize) {\n      svgraph.zoomTo(\n        options.zoomLevel * (el.clientWidth < el.clientHeight ? el.clientWidth / 250 : el.clientHeight / 250)\n      );\n    } else {\n      svgraph.zoomTo(options.zoomLevel);\n    }\n  } else {\n    svgraph.zoomTo(options.zoomLevel);\n  }\n}\n\n// update for edit mode (will have 2 parent elements for the scadavis div)\nfunction updatePanels(\n  options: ScadavisPanelOptions,\n  svgraph: synopticapi.ScadaVis,\n  objInd: number,\n  tagValues: tagValuesT\n) {\n  const elms = document.querySelectorAll(\"[id='\" + svState[objInd].svId + \"']\");\n  const iframe = svgraph.getIframe();\n  for (let i = 0; iframe && i < elms.length; i++) {\n    if (elms[i].firstChild !== iframe) {\n      elms[i].appendChild(iframe);\n      svgraph.on('ready', () => {\n        svgraph.enableMouse(options.enableMousePan, options.enableMouseWheelZoom);\n        svgraph.enableTools(options.showZoomPan, options.showZoomPan);\n        svgraph.zoomToOriginal();\n        svgraph.moveBy(-options.moveByX, -options.moveByY);\n        const el = iframe.parentElement?.parentElement;\n        if (el) {\n          svgraph.panelContainerResizeObserver = new ResizeObserver((entries) => {\n            for (const entry of entries) {\n              if (entry.contentRect) {\n                doAdjusts(options, svgraph);\n              }\n            }\n          });\n          svgraph.panelContainerResizeObserver.observe(el);\n        }\n        if (el && el.clientWidth > 0 && el.clientHeight > 0) {\n          iframe.width = '' + (el.clientWidth - 5);\n          iframe.height = '' + (el.clientHeight - 5);\n          if (options.autoResize) {\n            svgraph.zoomTo(\n              options.zoomLevel * (el.clientWidth < el.clientHeight ? el.clientWidth / 250 : el.clientHeight / 250)\n            );\n          } else {\n            svgraph.zoomTo(options.zoomLevel);\n          }\n        } else {\n          svgraph.zoomTo(options.zoomLevel);\n        }\n        svgraph.updateValues(tagValues);\n      });\n    }\n  }\n\n  // changed options, apply new zoom etc.\n  if (JSON.stringify(svState[objInd].lastOptions) !== JSON.stringify(options)) {\n    doAdjusts(options, svObjs[objInd]);\n    svState[objInd].lastOptions = Object.assign(options);\n  }\n  svgraph.updateValues(tagValues);\n}\n\nexport const ScadavisPanel: React.FC<PanelProps<ScadavisPanelOptions>> = ({\n  options,\n  data,\n  width,\n  height,\n  onOptionsChange,\n}) => {\n  // maps tag values\n  const tagValues = useMemo((): tagValuesT => {\n    return {};\n  }, []);\n  let cntMappedFields = 0;\n  for (let i = 0; i < data.series.length; i++) {\n    const s = data.series[i];\n    for (let j = 0; j < s.fields.length; j++) {\n      const f = s.fields[j];\n      if (f.type !== 'number' || f.values.length === 0) {\n        continue;\n      }\n      cntMappedFields++;\n      tagValues['@' + cntMappedFields] = f.values[f.values.length - 1];\n      if (f.name) {\n        const values = f.values as any;\n        if (values.buffer) {\n          tagValues['@' + cntMappedFields] = values.buffer[values.buffer.length - 1];\n          tagValues[f.name] = values.buffer[values.buffer.length - 1];\n        } else {\n          tagValues['@' + cntMappedFields] = values[f.values.length - 1];\n          tagValues[f.name] = f.values[values.length - 1];\n        }\n      }\n    }\n  }\n\n  const objInd = data.request?.panelId || -1;\n  const firstExec = !(objInd in svObjs) || !document.getElementById(svObjs[objInd].container.id);\n  if (firstExec) {\n    // first execution: create object to save current state\n    let lastOptions: ScadavisPanelOptions = {\n      svgUrl: '',\n      zoomLevel: -1,\n      moveByX: -999999,\n      moveByY: -999999,\n      autoResize: false,\n      showZoomPan: false,\n      enableMousePan: false,\n      enableMouseWheelZoom: false,\n    };\n    if (objInd in svState) {\n      lastOptions = svState[objInd].lastOptions;\n      if (svState[objInd].dashboardUID === data?.request?.dashboardUID) {\n        options.svgUrl = lastOptions.svgUrl;\n      }\n    }\n    const svId = 'scadavis_' + _randomUUID();\n    svState[objInd] = {\n      svId: svId,\n      svReactElem: React.createElement('div', { id: svId }),\n      dashboardUID: data?.request?.dashboardUID as string,\n      lastOptions: lastOptions,\n    };\n  }\n\n  if (!firstExec && options.svgUrl === svState[objInd].lastOptions.svgUrl) {\n    // check edit mode (will have 2 parent elements for the scadavis div)\n    const svgraph = svObjs[objInd];\n    updatePanels(options, svgraph, objInd, tagValues);\n  }\n\n  if (!firstExec) {\n    // new SVG file (loaded as URL or from URL)?\n    if (options.svgUrl !== svState[objInd].lastOptions.svgUrl) {\n      svObjs[objInd].getIframe()?.remove();\n      const svgraph = new synopticapi.ScadaVis({\n        container: svState[objInd].svId,\n        iframeparams: `frameborder=\"0\" height=\"${height}\" width=\"${width}\"`,\n        svgurl: options.svgUrl,\n      } as synopticapi.SvArgs);\n      if (svgraph) {\n        svObjs[objInd] = svgraph;\n        const iframe = svgraph.getIframe();\n        if (iframe) {\n          document.getElementById(svObjs[objInd].container.id)?.appendChild(iframe);\n        }\n      }\n      svState[objInd].lastOptions = Object.assign(options);\n      updatePanels(options, svgraph, objInd, tagValues);\n    }\n  }\n\n  useEffect(() => {\n    // at first execution, after the react object created (id=svState[objInd].svId),\n    // will create the scadavis object with the react object as the parent\n    if (!(objInd in svObjs) || !document.getElementById(svObjs[objInd].container.id)) {\n      const svgraph = new synopticapi.ScadaVis({\n        container: svState[objInd].svId,\n        iframeparams: `frameborder=\"0\" height=\"${height}\" width=\"${width}\"`,\n        svgurl: options.svgUrl,\n      } as synopticapi.SvArgs);\n      svObjs[objInd] = svgraph;\n      svState[objInd].lastOptions = Object.assign(options);\n      if (svgraph) {\n        svgraph.on('ready', () => {\n          svgraph.enableMouse(options.enableMousePan, options.enableMouseWheelZoom);\n          svgraph.enableTools(options.showZoomPan, options.showZoomPan);\n          svgraph.moveBy(-options.moveByX, -options.moveByY);\n          const el = svgraph.getIframe()?.parentElement?.parentElement;\n          if (el && el.clientWidth > 0 && el.clientHeight > 0) {\n            svgraph.panelContainerResizeObserver = new ResizeObserver((entries) => {\n              for (const entry of entries) {\n                if (entry.contentRect) {\n                  doAdjusts(options, svgraph);\n                }\n              }\n            });\n            svgraph.panelContainerResizeObserver.observe(el);\n            if (options.autoResize) {\n              svgraph.zoomTo(\n                options.zoomLevel * (el.clientWidth < el.clientHeight ? el.clientWidth / 250 : el.clientHeight / 250)\n              );\n            } else {\n              svgraph.zoomTo(options.zoomLevel);\n            }\n          }\n          svgraph.updateValues(tagValues);\n        });\n      }\n    }\n  }, [options, tagValues, objInd, height, width]);\n\n  return svState[objInd].svReactElem;\n};\n","import React from 'react';\nimport { FileUpload } from '@grafana/ui';\n\nexport const UploadSVG = ( { onChange }: { onChange: (value: string) => any } ) => {\n  return (\n    <FileUpload\n      accept=\".svg\"\n      onFileUpload={(event) => {\n        const tgt: any = event.target;\n        if (tgt?.files && tgt?.files.length>0){\n          const file = tgt?.files[0];\n          if (file.type === \"image/svg+xml\") {\n            const reader = new FileReader();\n            reader.onload = function () {\n             onChange(reader.result as string); \n            }\n            reader.readAsDataURL(file);\n           } \n        }\n      }}\n    >\n      Upload SVG file\n    </FileUpload>\n  );\n};\n","import { PanelPlugin } from '@grafana/data';\nimport { ScadavisPanel } from './ScadavisPanel';\nimport { ScadavisPanelOptions } from './types';\nimport { UploadSVG } from './SvgFilePicker';\ndeclare global {\n  let grafanaBootData: any;\n}\nexport const plugin = new PanelPlugin<ScadavisPanelOptions>(ScadavisPanel).setPanelOptions(builder => {\n  return builder\n    .addTextInput({\n      path: 'svgUrl',\n      name: 'SVG URL',\n      description: 'Enter SVG URL',\n      defaultValue: 'https://raw.githubusercontent.com/riclolsen/displayfiles/master/helloworld.svg',\n    })\n    .addCustomEditor({\n      id: 'svgFileId',\n      path: 'svgUrl',\n      name: 'Upload local SVG file',\n      editor: UploadSVG,\n      defaultValue: 'https://raw.githubusercontent.com/riclolsen/displayfiles/master/helloworld.svg',\n    })\n    .addSliderInput({\n      path: 'zoomLevel',\n      name: 'SVG zoom level',\n      description: 'Enter value <1 to shrink SVG view or >1 to grow it',\n      defaultValue: 1,\n      settings: {\n        min: 0.1,\n        max: 3,\n        step: 0.1,\n      },\n    })\n    .addSliderInput({\n      path: 'moveByX',\n      name: 'Horizontal offset',\n      description: 'Enter value <0 to move left or >0 to move right',\n      defaultValue: 0,\n      settings: {\n        min: -1000,\n        max: 1000,\n        step: 1,\n      },\n    })\n    .addSliderInput({\n      path: 'moveByY',\n      name: 'Vertical offset',\n      description: 'Enter value <0 to move up or >0 to move down',\n      defaultValue: 0,\n      settings: {\n        min: -1000,\n        max: 1000,\n        step: 1,\n      },\n    })\n    .addBooleanSwitch({\n      path: 'autoResize',\n      name: 'Auto resize',\n      description: 'Bind SVG view size to panel size',\n      defaultValue: false,\n    })\n    .addBooleanSwitch({\n      path: 'showZoomPan',\n      name: 'Show zoom/pan tool',\n      description: 'Toolbar over SVG top-left corner with zoom/pan buttons',\n      defaultValue: false,\n    })\n    .addBooleanSwitch({\n      path: 'enableMousePan',\n      name: 'Enable mouse pan',\n      description: 'Pan the SVG view with mouse drag',\n      defaultValue: false,\n    })\n    .addBooleanSwitch({\n      path: 'enableMouseWheelZoom',\n      name: 'Enable mouse wheel zoom',\n      description: 'Zoom the SVG view with mouse wheel roll',\n      defaultValue: false,\n    });\n});\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__305__","__WEBPACK_EXTERNAL_MODULE__388__","__WEBPACK_EXTERNAL_MODULE__650__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","ScadaVis","guidGenerator","S4","Math","random","toString","substring","createElementFromHTML","htmlString","div","document","createElement","innerHTML","trim","firstChild","loadURL","svgurl","this","svgobj","readyfordata","loadingSVG","xhr","XMLHttpRequest","open","_this","onload","status","componentloaded","iframe","contentWindow","postMessage","responseText","domain","onreadystatechange","oEvent","readyState","onerror","statusText","console","warn","send","resetData","npt","npts","vals","qualifs","descriptions","data","type","window","resetobj","refreshDisplay","values","Promise","resolve","reject","resolveFunction","Error","rejectFunction","updateValues","keys","map","tag","index","rtdata","tags","handle","updateHandle","path","quality","parameters","Value","TagClientItem","Alarmed","Desc","setValue","failed","alarmed","description","storeValue","getValue","getApiKey","apikey","getVersion","version","getIframe","getComponentState","getComponentVersion","getTagsList","tagsList","moveBy","dx","dy","animate","moveobj","zoomTo","zoomLevel","target","zoomobj","zoomToOriginal","enableTools","panEnabled","zoomEnabled","enabletoolsobj","enableMouse","enablemouseobj","setMouseWheel","directionBackOut","blockEventPropagation","mousewheelobj","enableKeyboard","keyEnabled","enablekeyboardobj","enableAlarmFlash","alarmFlashEnabled","enableflashobj","hideWatermark","hidewatermarkobj","setColor","colorNumber","colorCode","setcolorobj","push","setColors","colorsTable","setcolorsobj","on","event","callback","ret","loaded","onready","onclick","constructor","container","iframeparams","grafanaBootData","aux","panelContainerResizeObserver","id","iframehtm","scrolling","length","body","getElementById","indexOf","subUrl","appSubUrl","settings","appendChild","insertAdjacentHTML","addEventListener","source","error","i","origin","attributes","svObjs","svState","doAdjusts","options","svgraph","moveByX","moveByY","el","parentElement","clientWidth","clientHeight","width","height","autoResize","updatePanels","objInd","tagValues","elms","querySelectorAll","svId","enableMousePan","enableMouseWheelZoom","showZoomPan","ResizeObserver","entries","entry","contentRect","observe","JSON","stringify","lastOptions","assign","UploadSVG","onChange","FileUpload","accept","onFileUpload","tgt","files","file","reader","FileReader","result","readAsDataURL","plugin","PanelPlugin","onOptionsChange","useMemo","cntMappedFields","series","s","j","fields","f","name","buffer","request","panelId","firstExec","svgUrl","dashboardUID","replace","c","crypto","getRandomValues","Uint8Array","svReactElem","React","remove","synopticapi","useEffect","setPanelOptions","builder","addTextInput","defaultValue","addCustomEditor","editor","addSliderInput","min","max","step","addBooleanSwitch"],"sourceRoot":""}