define(["@grafana/data","@grafana/ui","react"],((e,t,a)=>(()=>{"use strict";var n=[t=>{t.exports=e},e=>{e.exports=a},e=>{e.exports=t}],r={};function s(e){var t=r[e];if(void 0!==t)return t.exports;var a=r[e]={exports:{}};return n[e](a,a.exports,s),a.exports}s.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return s.d(t,{a:t}),t},s.d=(e,t)=>{for(var a in t)s.o(t,a)&&!s.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var o={};return(()=>{s.r(o),s.d(o,{plugin:()=>v});var e,t,a,n=s(0),r=s(1),i=s.n(r),l=s(2);function u(e){return e&&e.length?(0,n.toCSV)(e.map((e=>(0,n.toDataFrame)(e)))):""}function d(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}class c extends r.PureComponent{constructor(){super(...arguments),d(this,"state",{text:""}),d(this,"onSeriesParsed",((e,t)=>{const{options:a,onOptionsChange:r}=this.props;e||(e=[new n.MutableDataFrame]);const s=Object.assign({},a.jsonData,{data:e});r(Object.assign({},a,{jsonData:s})),this.setState({text:t})}))}componentDidMount(){const{options:e}=this.props;if(e.jsonData.data){const t=u(e.jsonData.data);this.setState({text:t})}}render(){const{text:n}=this.state;return i().createElement("div",null,i().createElement("div",{className:"gf-form-group"},e||(e=i().createElement("h4",null,"Shared Data:")),t||(t=i().createElement("span",null,"Enter CSV")),i().createElement(l.TableInputCSV,{text:n,onSeriesParsed:this.onSeriesParsed,width:"100%",height:200})),a||(a=i().createElement("div",{className:"grafana-info-box"},"This data is stored in the datasource json and is returned to every user in the initial request for any datasource. This is an appropriate place to enter a few values. Large datasets will perform better in other datasources.",i().createElement("br",null),i().createElement("br",null),i().createElement("b",null,"NOTE:")," Changes to this data will only be reflected after a browser refresh.")))}}class h extends n.DataSourceApi{constructor(e){var t,a,r;super(e),r=[],(a="data")in(t=this)?Object.defineProperty(t,a,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[a]=r,e.jsonData.data&&(this.data=e.jsonData.data.map((e=>(0,n.toDataFrame)(e))))}getQueryDisplayText(e){return e.data?"Panel Data: "+f(e.data):`Shared Data From: ${this.name} (${f(this.data)})`}metricFindQuery(e,t){return new Promise(((e,t)=>{const a=[];for(const e of this.data)for(const t of e.fields)a.push({text:t.name});e(a)}))}query(e){const t=[];for(const a of e.targets){if(a.hide)continue;let e=this.data;a.data&&(e=a.data.map((e=>(0,n.toDataFrame)(e))));for(let n=0;n<e.length;n++)t.push(Object.assign({},e[n],{refId:a.refId}))}return Promise.resolve({data:t})}testDatasource(){return new Promise(((e,t)=>{let a=0,n=`${this.data.length} Series:`;for(const e of this.data){const t=e.length;n+=` [${e.fields.length} Fields, ${t} Rows]`,a+=t}a>0&&e({status:"success",message:n}),t({status:"error",message:"No Data Entered"})}))}}function p(e){return e&&e.fields&&e.fields.length?e.hasOwnProperty("length")?e.length:e.fields[0].values.length:0}function f(e){if(!e||!e.length)return"";if(e.length>1){const t=e.reduce(((e,t)=>e+p(t)),0);return`${e.length} Series, ${t} Rows`}const t=e[0];if(!t.fields)return"Missing Fields";const a=p(t);return`${t.fields.length} Fields, ${a} Rows`}var m;function g(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}const b=[{value:"panel",label:"Panel",description:"Save data in the panel configuration."},{value:"shared",label:"Shared",description:"Save data in the shared datasource object."}];class S extends r.PureComponent{constructor(){super(...arguments),g(this,"state",{text:""}),g(this,"onSourceChange",(e=>{const{datasource:t,query:a,onChange:r,onRunQuery:s}=this.props;let o;if("panel"===e.value){if(a.data)return;o=[...t.data],o||(o=[new n.MutableDataFrame]),this.setState({text:(0,n.toCSV)(o)})}r(Object.assign({},a,{data:o})),s()})),g(this,"onSeriesParsed",((e,t)=>{const{query:a,onChange:r,onRunQuery:s}=this.props;this.setState({text:t}),e||(e=[new n.MutableDataFrame]),r(Object.assign({},a,{data:e})),s()}))}onComponentDidMount(){const{query:e}=this.props,t=u(e.data);this.setState({text:t})}render(){const{datasource:e,query:t}=this.props,{uid:a,name:n}=e,{text:r}=this.state,s=t.data?b[0]:b[1];return i().createElement("div",null,i().createElement(l.InlineField,{label:"Data",labelWidth:8},i().createElement(i().Fragment,null,i().createElement(l.Select,{width:20,options:b,value:s,onChange:this.onSourceChange}),t.data?i().createElement("div",{style:{alignSelf:"center"}},f(t.data)):i().createElement(l.LinkButton,{fill:"text",href:`datasources/edit/${a}/`},n,": ",f(e.data),"   ",m||(m=i().createElement(l.Icon,{name:"pen"}))))),t.data&&i().createElement(l.TableInputCSV,{text:r,onSeriesParsed:this.onSeriesParsed,width:"100%",height:200}))}}const v=new n.DataSourcePlugin(h).setConfigEditor(c).setQueryEditor(S)})(),o})()));
//# sourceMappingURL=module.js.map