{"version":3,"sources":["webpack://grafana/../lib/monaco/min/vs/language/kusto/kusto.javascript.client.min.js"],"sourcesContent":["Bridge.assembly(\"Kusto.JavaScript.Client\",function($asm,globals){\"use strict\";Bridge.define(\"Kusto.Charting.AnomalyDataHelper2\",{statics:{props:{TimestampColumnName:null,ValueColumnName:null,SeriesColumnName:null,AnomalySerieSuffix:null},ctors:{init:function(){this.TimestampColumnName=\"Timestamp\";this.ValueColumnName=\"Value\";this.SeriesColumnName=\"Series\";this.AnomalySerieSuffix=\"(anomaly)\"}},methods:{EnchanceDataWithAnomalyDataFromServiceAsync:function(kustoContext,data){var $step=0,$task1,$taskResult1,$jumpFromFinally,$tcs=new System.Threading.Tasks.TaskCompletionSource,$returnValue,res,dataAsCsl,query,results,$t,$async_e,$asyncBody=Bridge.fn.bind(this,function(){try{for(;;){$step=System.Array.min([0,1],$step);switch($step){case 0:if(res=new Kusto.Charting.AnomalyDataHelper2.AnomalyDataFromServiceResult,kustoContext==null){res.Data=data;res.HasErrors=!0;res.Message=\"Failed sending the request for anomalies to the service\";$tcs.setResult(res);return}if(dataAsCsl=Kusto.Charting.AnomalyDataHelper2.DataItemsToDataTableLiteral(data),query=(dataAsCsl||\"\")+(System.String.format(\"| summarize dt = makelist({0}, 100000), y=makelist({1}, 100000) by {2}\\r\\n| extend (anomalies, scores, baseline)=series_decompose_anomalies(y)\\r\\n| project dt, y, anomalies, Series\\r\\n| mvexpand dt to typeof(datetime), y to typeof(double), anomalies to typeof(double) limit 1000000\\r\\n| where anomalies != 0\\r\\n| project dt, anomaly_value = (anomalies * anomalies)*y, Series\",Kusto.Charting.AnomalyDataHelper2.TimestampColumnName,Kusto.Charting.AnomalyDataHelper2.ValueColumnName,Kusto.Charting.AnomalyDataHelper2.SeriesColumnName)||\"\"),System.Text.Encoding.UTF8.GetByteCount$2(query)>2e6){res.Data=data;res.HasErrors=!0;res.Message=\"The anomalies request to the service exceeds the 2MB limit, consider adding more filters\";$tcs.setResult(res);return}if($task1=kustoContext.Kusto$Charting$IKustoClientContext$ExecuteQueryAsync(Kusto.Charting.AnomalyDataHelper2.AnomalyInputOutputRecord,query),$step=1,$task1.isCompleted())continue;$task1.continue($asyncBody);return;case 1:if($taskResult1=$task1.getAwaitedResult(),results=$taskResult1,results=($t=Kusto.Charting.AnomalyDataHelper2.AnomalyInputOutputRecord,System.Linq.Enumerable.from(results,$t).ToArray($t)),results==null||!System.Linq.Enumerable.from(results,Kusto.Charting.AnomalyDataHelper2.AnomalyInputOutputRecord).any()){res.Data=data;res.HasErrors=!0;res.Message=\"Failed retrieving the anomalies result from the service\";$tcs.setResult(res);return}data.AddRange(System.Linq.Enumerable.from(results,Kusto.Charting.AnomalyDataHelper2.AnomalyInputOutputRecord).select($asm.$.Kusto.Charting.AnomalyDataHelper2.f1));res.Data=data;res.HasErrors=!1;res.Message=\"\";$tcs.setResult(res);return;default:$tcs.setResult(null);return}}}catch($async_e1){$async_e=System.Exception.create($async_e1);$tcs.setException($async_e)}},arguments);return $asyncBody(),$tcs.task},DataItemsToDataTableLiteral:function(items){var $t,result=new System.Text.StringBuilder,item,seriesName;result.append(\"datatable\");result.appendLine(System.String.format(\"({0}:datetime,{1}:double,{2}:string)\",Kusto.Charting.AnomalyDataHelper2.TimestampColumnName,Kusto.Charting.AnomalyDataHelper2.ValueColumnName,Kusto.Charting.AnomalyDataHelper2.SeriesColumnName));result.append(\"[\");$t=Bridge.getEnumerator(items,Kusto.Charting.DataItem);try{while($t.moveNext())item=$t.Current,result.append(\"datetime(\"),result.append(System.DateTime.format(item.ArgumentDateTime,\"o\")),result.append(\"),\"),result.append(\"double(\"),result.append(System.Double.format(item.ValueData)),result.append(\"),\"),seriesName=Kusto.Cloud.Platform.Text.StringLiteral.GetLiteral(item.SeriesName),result.append(seriesName),result.appendLine(\",\")}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return result.appendLine(\"]\"),result.toString()},EnchanceDataWithAnomalyDataFromColumns:function(data,anomalyColumns,anomalySeriesMap){var $t,$t1,valueData,anomalyColumn,anomalyData,anomalyPointsCount,i,valuePoint,anomalyPoint,seriesName,a,a1;anomalySeriesMap.v=new(System.Collections.Generic.Dictionary$2(System.String,System.String).ctor);var result=new(System.Collections.Generic.List$1(Kusto.Charting.DataItem).ctor),anomalyColumnsHashset=new(System.Collections.Generic.HashSet$1(System.String).$ctor1)(anomalyColumns),valueColumn=System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).where(function(d){return!anomalyColumnsHashset.contains(d.ValueName)}).select($asm.$.Kusto.Charting.AnomalyDataHelper2.f2).firstOrDefault(null,null);if(System.String.isNullOrEmpty(valueColumn))return data;result.AddRange(System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).where(function(d){return!anomalyColumnsHashset.contains(d.ValueName)}));valueData=System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).where(function(d){return System.String.equals(d.ValueName,valueColumn)}).ToArray(Kusto.Charting.DataItem);$t=Bridge.getEnumerator(anomalyColumns);try{while($t.moveNext()){if(anomalyColumn={v:$t.Current},anomalyData=System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).where(function($me,anomalyColumn){return function(d){return System.String.equals(d.ValueName,anomalyColumn.v)}}(this,anomalyColumn)).ToArray(Kusto.Charting.DataItem),valueData.length!==anomalyData.length)return data;for(anomalyPointsCount=0,i=0;i<valueData.length;i=i+1|0)valuePoint=valueData[System.Array.index(i,valueData)],anomalyPoint=anomalyData[System.Array.index(i,anomalyData)],anomalyPoint.ValueData!==0&&(anomalyPointsCount=anomalyPointsCount+1|0,seriesName=(anomalyPoint.SeriesName||\"\")+(Kusto.Charting.AnomalyDataHelper2.AnomalySerieSuffix||\"\"),a=($t1=new Kusto.Charting.DataItem.ctor,$t1.ArgumentDateTime=anomalyPoint.ArgumentDateTime,$t1.ArgumentData=anomalyPoint.ArgumentData,$t1.SeriesName=seriesName,$t1.ValueData=valuePoint.ValueData,$t1.PrefferredChartKind=Kusto.Charting.ChartKind.Point,$t1),result.add(a),anomalySeriesMap.v.containsKey(seriesName)||anomalySeriesMap.v.add(seriesName,valuePoint.SeriesName));anomalyPointsCount===0&&(a1=($t1=new Kusto.Charting.DataItem.ctor,$t1.ArgumentDateTime=anomalyData[System.Array.index(0,anomalyData)].ArgumentDateTime,$t1.ArgumentData=null,$t1.SeriesName=(anomalyData[System.Array.index(0,anomalyData)].SeriesName||\"\")+(Kusto.Charting.AnomalyDataHelper2.AnomalySerieSuffix||\"\"),$t1.ValueData=Number.NaN,$t1.PrefferredChartKind=Kusto.Charting.ChartKind.Point,$t1),result.add(a1))}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return result}}}});Bridge.ns(\"Kusto.Charting.AnomalyDataHelper2\",$asm.$);Bridge.apply($asm.$.Kusto.Charting.AnomalyDataHelper2,{f1:function(r){var $t1;return $t1=new Kusto.Charting.DataItem.ctor,$t1.ArgumentDateTime=r.Timestamp,$t1.ArgumentData=System.DateTime.format(r.Timestamp,\"o\"),$t1.SeriesName=(r.Series||\"\")+(Kusto.Charting.AnomalyDataHelper2.AnomalySerieSuffix||\"\"),$t1.ValueData=r.Value,$t1.PrefferredChartKind=Kusto.Charting.ChartKind.Point,$t1},f2:function(d){return d.ValueName}});Bridge.define(\"Kusto.Charting.AnomalyDataHelper2.AnomalyDataFromServiceResult\",{$kind:\"nested class\",fields:{Data:null,HasErrors:!1,Message:null}});Bridge.define(\"Kusto.Charting.AnomalyDataHelper2.AnomalyInputOutputRecord\",{$kind:\"nested class\",fields:{Timestamp:null,Value:0,Series:null},ctors:{init:function(){this.Timestamp=System.DateTime.getDefaultValue()}}});Bridge.define(\"Kusto.Charting.ArgumentColumnType\",{$kind:\"enum\",statics:{fields:{None:0,Numeric:2,DateTime:4,TimeSpan:8,String:16,Object:32,Geospatial:64,DateTimeOrTimeSpan:12,StringOrDateTimeOrTimeSpan:28,NumericOrDateTimeOrTimeSpan:14,StringOrObject:48,AllExceptGeospatial:62}},$flags:!0});Bridge.define(\"Kusto.Charting.ArgumentRestrictions\",{$kind:\"enum\",statics:{fields:{None:0,MustHave:1,NotIncludedInSeries:2,GeospatialAsSeries:4,PreferLast:8,NumericAsSeries:16}},$flags:!0});Bridge.define(\"Kusto.Charting.ChartKind\",{$kind:\"enum\",statics:{fields:{Unspecified:0,Line:1,Point:2,Bar:3}}});Bridge.define(\"Kusto.Charting.ChartLimitsPolicy\",{props:{MaxPointsPerChartError:0,MaxPointsPerChartWarning:0,MaxSeriesPerChartError:0,MaxSeriesPerChartWarning:0,MaxDatetimePeriodError:null},ctors:{init:function(){this.MaxDatetimePeriodError=new System.TimeSpan},ctor:function(maxPointsPerChartError,maxPointsPerChartWarning,maxSeriesPerChartError,maxSeriesPerChartWarning,maxDatetimePeriodError){this.$initialize();this.MaxPointsPerChartError=maxPointsPerChartError;this.MaxPointsPerChartWarning=maxPointsPerChartWarning;this.MaxSeriesPerChartError=maxSeriesPerChartError;this.MaxSeriesPerChartWarning=maxSeriesPerChartWarning;this.MaxDatetimePeriodError=maxDatetimePeriodError}}});Bridge.define(\"Kusto.Charting.DataChartsHelper\",{statics:{fields:{c_minFractionOfIntervalsToDetectDistribution:0,c_minElementsAmountToFillGapsWithNans:0,c_decimalRoundingPrecision:0,c_doubleAcceptableApproximation:0,c_defaultArgumentNumeric:0,c_defaultArgumentString:null,c_defaultArgumentDatetime:null},ctors:{init:function(){this.c_defaultArgumentDatetime=System.DateTime.getDefaultValue();this.c_minFractionOfIntervalsToDetectDistribution=.8;this.c_minElementsAmountToFillGapsWithNans=4;this.c_decimalRoundingPrecision=8;this.c_doubleAcceptableApproximation=1e-8;this.c_defaultArgumentNumeric=Number.NaN;this.c_defaultArgumentString=\"<empty>\";this.c_defaultArgumentDatetime=Bridge.getDefaultValue(System.DateTime)}},methods:{GetData:function(table,argumentColumnType,argumentRestrictions,seriesColumns,accumulateResults,xColumn,yColumns){argumentColumnType===void 0&&(argumentColumnType=16);argumentRestrictions===void 0&&(argumentRestrictions=0);seriesColumns===void 0&&(seriesColumns=null);accumulateResults===void 0&&(accumulateResults=!1);xColumn===void 0&&(xColumn=null);yColumns===void 0&&(yColumns=null);var chartProps=Kusto.Charting.DataChartsHelper.GetMetaData(table,argumentColumnType,argumentRestrictions,seriesColumns,xColumn,yColumns);return Kusto.Charting.DataChartsHelper.GetData$1(table,chartProps,accumulateResults)},GetData$1:function(table,metaData,accumulateResults){var i,baseSeriesName,emptySeries;if(accumulateResults===void 0&&(accumulateResults=!1),table==null||metaData==null)return System.Linq.Enumerable.empty();var tableSchema=table.Kusto$Charting$IChartingDataSource$GetSchema(),allColumns=System.Linq.Enumerable.from(tableSchema,System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).select($asm.$.Kusto.Charting.DataChartsHelper.f1).toList(Kusto.Charting.DataChartsHelper.ColumnDesc),seriesList=System.Linq.Enumerable.from(metaData.Kusto$Charting$IChartMetaData$SeriesIndexes,System.Int32).any()?System.Linq.Enumerable.from(allColumns,Kusto.Charting.DataChartsHelper.ColumnDesc).where(function(col){return System.Linq.Enumerable.from(metaData.Kusto$Charting$IChartMetaData$SeriesIndexes,System.Int32).contains(col.Index)}).ToArray(Kusto.Charting.DataChartsHelper.ColumnDesc):null,dataColumns=System.Linq.Enumerable.from(allColumns,Kusto.Charting.DataChartsHelper.ColumnDesc).where(function(col){return System.Linq.Enumerable.from(metaData.Kusto$Charting$IChartMetaData$DataIndexes,System.Int32).contains(col.Index)}).ToArray(Kusto.Charting.DataChartsHelper.ColumnDesc),unusedColumns=System.Linq.Enumerable.from(allColumns,Kusto.Charting.DataChartsHelper.ColumnDesc).where(function(col){return System.Linq.Enumerable.from(metaData.Kusto$Charting$IChartMetaData$UnusedIndexes,System.Int32).contains(col.Index)}).ToArray(Kusto.Charting.DataChartsHelper.ColumnDesc),argumentData=new Kusto.Charting.DataChartsHelper.ArgumentData(metaData.Kusto$Charting$IChartMetaData$ArgumentDataColumnIndex,metaData.Kusto$Charting$IChartMetaData$ArgumentDataColumnIndex>=0?allColumns.getItem(metaData.Kusto$Charting$IChartMetaData$ArgumentDataColumnIndex).Name:\"\",metaData.Kusto$Charting$IChartMetaData$ArgumentDataColumnIndex>=0?System.Linq.Enumerable.from(tableSchema,System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).elementAt(metaData.Kusto$Charting$IChartMetaData$ArgumentDataColumnIndex).Item2:Kusto.Charting.ArgumentColumnType.None,metaData.Kusto$Charting$IChartMetaData$ArgumentColumnType,metaData.Kusto$Charting$IChartMetaData$GeospatialColumnIndexes),result=new(System.Collections.Generic.List$1(Kusto.Charting.DataItem).ctor),lastValues=new(System.Collections.Generic.Dictionary$2(System.String,System.Double).ctor);for(i=0;i<table.Kusto$Charting$IChartingDataSource$RowsCount;i=i+1|0)baseSeriesName=Kusto.Charting.DataChartsHelper.GetBaseSeriesName(table,seriesList,i),metaData.Kusto$Charting$IChartMetaData$IsDataFormedAsSeries?Kusto.Charting.DataChartsHelper.ResolveDataSeriesFromDataRow(result,table,dataColumns,unusedColumns,i,baseSeriesName,metaData.Kusto$Charting$IChartMetaData$ArgumentColumnType,accumulateResults,metaData.Kusto$Charting$IChartMetaData$ArgumentDataColumnIndex):(argumentData.ResolveArgumentFromRow(table,i),Kusto.Charting.DataChartsHelper.ResolveDataItemsFromDataRow(result,table,dataColumns,unusedColumns,i,baseSeriesName,argumentData,lastValues,accumulateResults));return metaData.Kusto$Charting$IChartMetaData$ArgumentColumnType!==Kusto.Charting.ArgumentColumnType.Geospatial&&(emptySeries=System.Linq.Enumerable.from(lastValues,System.Collections.Generic.KeyValuePair$2(System.String,System.Double)).where($asm.$.Kusto.Charting.DataChartsHelper.f2).toDictionary($asm.$.Kusto.Charting.DataChartsHelper.f3,$asm.$.Kusto.Charting.DataChartsHelper.f4,System.String,System.Boolean),emptySeries.Count>0&&(result=System.Linq.Enumerable.from(result,Kusto.Charting.DataItem).where(function(d){return!emptySeries.containsKey(d.SeriesName)}).toList(Kusto.Charting.DataItem))),result},GetMetaData:function(table,argumentColumnType,argumentRestrictions,seriesColumns,xColumn,yColumns){var tableSchema,metaData,isTableValidForCharting,tempDataIndex,firstDataIndex;return(argumentColumnType===void 0&&(argumentColumnType=16),argumentRestrictions===void 0&&(argumentRestrictions=0),seriesColumns===void 0&&(seriesColumns=null),xColumn===void 0&&(xColumn=null),yColumns===void 0&&(yColumns=null),tableSchema=table.Kusto$Charting$IChartingDataSource$GetSchema(),tableSchema==null||!System.Linq.Enumerable.from(tableSchema,System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).any())?null:(seriesColumns==null&&(seriesColumns=new(System.Collections.Generic.List$1(System.String).ctor)),yColumns==null&&(yColumns=new(System.Collections.Generic.List$1(System.String).ctor)),metaData={v:new Kusto.Charting.DataChartsHelper.ChartMetaData(argumentColumnType)},Kusto.Charting.DataChartsHelper.ResolvePredefinedColumnsIndexes(table,seriesColumns,yColumns,xColumn,argumentRestrictions,metaData),isTableValidForCharting=!1,metaData.v.IsDataFormedAsSeries||(isTableValidForCharting=Kusto.Charting.DataChartsHelper.DetectChartDimensionsUsingColumnTypesAndData(tableSchema,table,argumentRestrictions,metaData),metaData.v.IsDataFormedAsSeries=!isTableValidForCharting),metaData.v.IsDataFormedAsSeries&&(isTableValidForCharting=Kusto.Charting.DataChartsHelper.DetectChartDimensionsUsingData(tableSchema,table,seriesColumns,argumentRestrictions,metaData)),!isTableValidForCharting)?null:(tempDataIndex=metaData.v.DataIndexes,metaData.v.DataIndexesList=System.Linq.Enumerable.from(tableSchema,System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).select(function(col,index){return index!==metaData.v.ArgumentDataColumnIndex&&!metaData.v.GeospatiaColumnlIndexesList.contains(index)&&(!System.Linq.Enumerable.from(tempDataIndex,System.Int32).any()||System.Linq.Enumerable.from(tempDataIndex,System.Int32).contains(index))&&!System.Linq.Enumerable.from(metaData.v.SeriesIndexes,System.Int32).contains(index)&&(!metaData.v.IsDataFormedAsSeries&&System.Enum.hasFlag(Kusto.Charting.ArgumentColumnType.NumericOrDateTimeOrTimeSpan,Bridge.box(col.Item2,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))||metaData.v.IsDataFormedAsSeries&&System.Enum.hasFlag(Kusto.Charting.ArgumentColumnType.StringOrObject,Bridge.box(col.Item2,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType))))?index:-1}).where($asm.$.Kusto.Charting.DataChartsHelper.f5).toList(System.Int32),metaData.v.ArgumentColumnType===Kusto.Charting.ArgumentColumnType.Geospatial&&(metaData.v.DataIndexesList.Count>1&&(firstDataIndex=System.Linq.Enumerable.from(metaData.v.DataIndexesList,System.Int32).first(),metaData.v.DataIndexesList.clear(),metaData.v.DataIndexesList.add(firstDataIndex)),argumentRestrictions===Kusto.Charting.ArgumentRestrictions.GeospatialAsSeries&&(metaData.v.ArgumentDataColumnIndex===-1||!System.Linq.Enumerable.from(metaData.v.DataIndexesList,System.Int32).any())))?null:(metaData.v.UnusedIndexes=System.Linq.Enumerable.range(0,System.Linq.Enumerable.from(tableSchema,System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).count()).except(metaData.v.DataIndexes).except(metaData.v.GeospatialColumnIndexes).except(metaData.v.SeriesIndexes).except(System.Array.init([metaData.v.ArgumentDataColumnIndex],System.Int32)).toList(System.Int32),metaData.v)},IsNumericType:function(type,considerDateTimeAndTimeSpanAsNumeric){if(considerDateTimeAndTimeSpanAsNumeric===void 0&&(considerDateTimeAndTimeSpanAsNumeric=!0),type==null)return!1;else if(Bridge.referenceEquals(type,System.TimeSpan)||Bridge.referenceEquals(type,System.DateTime))return considerDateTimeAndTimeSpanAsNumeric;else if(Bridge.referenceEquals(type,System.Byte)||Bridge.referenceEquals(type,System.Decimal)||Bridge.referenceEquals(type,System.Double)||Bridge.referenceEquals(type,System.Int16)||Bridge.referenceEquals(type,System.Int32)||Bridge.referenceEquals(type,System.Int64)||Bridge.referenceEquals(type,System.SByte)||Bridge.referenceEquals(type,System.UInt16)||Bridge.referenceEquals(type,System.UInt32)||Bridge.referenceEquals(type,System.UInt64))return!0;else if(Bridge.referenceEquals(type,System.Object)&&Bridge.Reflection.isGenericType(type)&&Bridge.referenceEquals(Bridge.Reflection.getGenericTypeDefinition(type),System.Nullable$1))return Kusto.Charting.DataChartsHelper.IsNumericType(System.Nullable.getUnderlyingType(type),considerDateTimeAndTimeSpanAsNumeric);return!1},GetAllArgumentColumns:function(table,columnsToExclude){var i,columnName;columnsToExclude===void 0&&(columnsToExclude=null);var result=new(System.Collections.Generic.List$1(System.String).ctor),schema=table.Kusto$Charting$IChartingDataSource$GetSchema(),n=System.Linq.Enumerable.from(table.Kusto$Charting$IChartingDataSource$GetSchema(),System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).count(),columnsToExcludeDefined=columnsToExclude!=null&&System.Linq.Enumerable.from(columnsToExclude,System.String).any();if(n>1)for(i=0;i<n;i=i+1|0)(columnName=System.Linq.Enumerable.from(schema,System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).elementAt(i).Item1,columnsToExcludeDefined&&System.Linq.Enumerable.from(columnsToExclude,System.String).contains(columnName))||result.add(columnName);return result},GetFirstStringColumnName:function(table,amountToSkip){var schema,n,i;for(amountToSkip===void 0&&(amountToSkip=0),schema=table.Kusto$Charting$IChartingDataSource$GetSchema(),n=System.Linq.Enumerable.from(table.Kusto$Charting$IChartingDataSource$GetSchema(),System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).count(),i=0;i<n;i=i+1|0)if(System.Linq.Enumerable.from(schema,System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).elementAt(i).Item2===Kusto.Charting.ArgumentColumnType.String)if(amountToSkip===0)return System.Linq.Enumerable.from(schema,System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).elementAt(i).Item1;else amountToSkip=amountToSkip-1|0;return null},FillGapsWithNaNs:function(data,argType){var $t,dataGroups,result,dg,serieDataItems;if(data==null||!System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).any()||data.Count<Kusto.Charting.DataChartsHelper.c_minElementsAmountToFillGapsWithNans)return data;dataGroups=System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).groupBy($asm.$.Kusto.Charting.DataChartsHelper.f6);result=new(System.Collections.Generic.List$1(Kusto.Charting.DataItem).$ctor2)(data.Count);$t=Bridge.getEnumerator(dataGroups);try{while($t.moveNext())dg=$t.Current,serieDataItems=Kusto.Charting.DataChartsHelper.FillGapsWithNaNs$1(dg.select($asm.$.Kusto.Charting.DataChartsHelper.f7),argType),result.AddRange(serieDataItems)}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return result},FillGapsWithNaNs$1:function(data,argType){var $t,argData,result,prevItem,item,currentDistance,gapLength,mod,j,newItem;if(System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).count()<Kusto.Charting.DataChartsHelper.c_minElementsAmountToFillGapsWithNans)return data;switch(argType){case Kusto.Charting.ArgumentColumnType.TimeSpan:case Kusto.Charting.ArgumentColumnType.DateTime:data=System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).orderBy($asm.$.Kusto.Charting.DataChartsHelper.f8);argData=System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).select($asm.$.Kusto.Charting.DataChartsHelper.f9).ToArray(System.Double);break;case Kusto.Charting.ArgumentColumnType.Numeric:data=System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).orderBy($asm.$.Kusto.Charting.DataChartsHelper.f10);argData=System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).select($asm.$.Kusto.Charting.DataChartsHelper.f10).ToArray(System.Double);break;default:return data}if(argData==null||!System.Linq.Enumerable.from(argData,System.Double).any())return data;var distances=Kusto.Charting.DataChartsHelper.SelectSuccessivePairs(argData),maxGroup=Kusto.Charting.DataChartsHelper.GetTopGroupByCount(distances,argType),initialDistance=maxGroup.Item1;if(maxGroup==null||System.Convert.toDouble(Bridge.box(maxGroup.Item2,System.Int32))/System.Linq.Enumerable.from(distances,System.Double).count()<Kusto.Charting.DataChartsHelper.c_minFractionOfIntervalsToDetectDistribution)return data;result=new(System.Collections.Generic.List$1(Kusto.Charting.DataItem).$ctor2)(System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).count());prevItem=null;$t=Bridge.getEnumerator(data,Kusto.Charting.DataItem);try{while($t.moveNext()){if(item=$t.Current,prevItem==null){result.add(item);prevItem=item;continue}if(currentDistance=Kusto.Charting.DataChartsHelper.GetDistance(prevItem,item,argType),currentDistance-initialDistance>Kusto.Charting.DataChartsHelper.c_doubleAcceptableApproximation){gapLength=0;try{gapLength=System.Convert.toInt32(Bridge.box(Bridge.Math.round(currentDistance/initialDistance,0,6),System.Double,System.Double.format,System.Double.getHashCode))}catch($e1){return $e1=System.Exception.create($e1),data}if(mod=currentDistance-gapLength*initialDistance,mod>Kusto.Charting.DataChartsHelper.c_doubleAcceptableApproximation)return data;for(j=1;j<gapLength;j=j+1|0){newItem=prevItem.Clone();newItem.ValueData=Number.NaN;switch(argType){case Kusto.Charting.ArgumentColumnType.Numeric:newItem.ArgumentNumeric+=initialDistance*j;newItem.ArgumentData=System.Double.format(newItem.ArgumentNumeric);break;case Kusto.Charting.ArgumentColumnType.DateTime:newItem.ArgumentDateTime=System.DateTime.addTicks(newItem.ArgumentDateTime,System.Convert.toInt64(Bridge.box(initialDistance,System.Double,System.Double.format,System.Double.getHashCode)).mul(System.Int64(j)));newItem.ArgumentData=System.DateTime.format(newItem.ArgumentDateTime);break;case Kusto.Charting.ArgumentColumnType.TimeSpan:newItem.ArgumentDateTime=System.DateTime.addTicks(newItem.ArgumentDateTime,System.Convert.toInt64(Bridge.box(initialDistance,System.Double,System.Double.format,System.Double.getHashCode)).mul(System.Int64(j)));newItem.ArgumentData=Bridge.toString(System.TimeSpan.fromTicks(System.DateTime.getTicks(newItem.ArgumentDateTime)));break}result.add(newItem)}}result.add(item);prevItem=item}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return result},ResolveArgumentType:function(data){if(data==null||!System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).any())return Kusto.Charting.ArgumentColumnType.None;var ts={};return System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).all(function(d){return!System.String.isNullOrEmpty(d.ArgumentData)&&System.String.indexOf(d.ArgumentData,\":\")>0&&System.TimeSpan.tryParse(d.ArgumentData,null,ts)})?Kusto.Charting.ArgumentColumnType.TimeSpan:System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).all($asm.$.Kusto.Charting.DataChartsHelper.f11)?Kusto.Charting.ArgumentColumnType.DateTime:System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).any($asm.$.Kusto.Charting.DataChartsHelper.f12)?Kusto.Charting.ArgumentColumnType.Numeric:Kusto.Charting.ArgumentColumnType.String},ValidateData:function(data,argType,limits,error){var $t,minValue,maxValue,item,seriesCount,dataPoints;if(error.v=\"\",data==null||!System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).any())return error.v=\"Data was not provided\",Kusto.Charting.ValidationStatus.PolicyViolationError;if(System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).where($asm.$.Kusto.Charting.DataChartsHelper.f13).any())return error.v=\"Data includes non-finite values\",Kusto.Charting.ValidationStatus.PolicyViolationError;if(argType===Kusto.Charting.ArgumentColumnType.Geospatial&&System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).any($asm.$.Kusto.Charting.DataChartsHelper.f14))return error.v=\"Data includes invalid geospatial coordinates. Longitude values must be in range [-180,180]. Latitude values must be in range [-90,90].\",Kusto.Charting.ValidationStatus.PolicyViolationError;if(argType===Kusto.Charting.ArgumentColumnType.DateTime&&System.TimeSpan.neq(limits.MaxDatetimePeriodError,Bridge.getDefaultValue(System.TimeSpan))){minValue=System.DateTime.getMaxValue();maxValue=System.DateTime.getMinValue();$t=Bridge.getEnumerator(data,Kusto.Charting.DataItem);try{while($t.moveNext())item=$t.Current,System.DateTime.lt(maxValue,item.ArgumentDateTime)&&(maxValue=item.ArgumentDateTime),System.DateTime.gt(minValue,item.ArgumentDateTime)&&(minValue=item.ArgumentDateTime)}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}if(System.DateTime.gt(minValue,maxValue)||System.TimeSpan.gt(System.DateTime.subdd(maxValue,minValue),limits.MaxDatetimePeriodError))return error.v=\"Input time range is too wide to fit into chart\",Kusto.Charting.ValidationStatus.PolicyViolationError}return(seriesCount=System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).select($asm.$.Kusto.Charting.DataChartsHelper.f6).distinct().count(),dataPoints=System.Linq.Enumerable.from(data,Kusto.Charting.DataItem).count(),seriesCount>limits.MaxSeriesPerChartError)?(error.v=\"Too many series\\n\"+(System.String.format(\"Provided data contains {0} series which exceeds allowed amount for the chart: {1}\",Bridge.box(seriesCount,System.Int32),Bridge.box(limits.MaxSeriesPerChartError,System.Int32))||\"\"),Kusto.Charting.ValidationStatus.PolicyViolationError):dataPoints>limits.MaxPointsPerChartError?(error.v=\"Too many points\\n\"+(System.String.format(\"Provided data contains {0} points which exceeds allowed amount for the chart: {1}\",Bridge.box(dataPoints,System.Int32),Bridge.box(limits.MaxPointsPerChartError,System.Int32))||\"\"),Kusto.Charting.ValidationStatus.PolicyViolationError):seriesCount>limits.MaxSeriesPerChartWarning||dataPoints>limits.MaxPointsPerChartWarning?(error.v=\"Too many series or data points\\nChart can perform badly when large amount of data is used.\\n\"+(System.String.format(\"You are about to plot {0} series with {1} points.\",Bridge.box(seriesCount,System.Int32),Bridge.box(dataPoints,System.Int32))||\"\"),Kusto.Charting.ValidationStatus.PolicyViolationWarning):Kusto.Charting.ValidationStatus.Valid},ResolveJsonArrayType:function(value){var arr;try{arr=Newtonsoft.Json.JsonConvert.DeserializeObject(value,System.Array.type(System.String))}catch($e1){return $e1=System.Exception.create($e1),Kusto.Charting.ArgumentColumnType.None}return arr==null||System.Linq.Enumerable.from(arr,System.String).count()===0?Kusto.Charting.ArgumentColumnType.None:Kusto.Charting.DataChartsHelper.ArrayIsDouble(arr)?Kusto.Charting.ArgumentColumnType.Numeric:Kusto.Charting.DataChartsHelper.ArrayIsTimespan(arr)?Kusto.Charting.ArgumentColumnType.TimeSpan:Kusto.Charting.DataChartsHelper.ArrayIsDatetime(arr)?Kusto.Charting.ArgumentColumnType.DateTime:Kusto.Charting.ArgumentColumnType.String},SelectSuccessivePairs:function(collection){var $t,item;if(collection==null||System.Linq.Enumerable.from(collection,System.Double).count()<=1)return null;var result=System.Array.init(System.Linq.Enumerable.from(collection,System.Double).count()-1|0,0,System.Double),isFirstElement=!0,prev=Bridge.getDefaultValue(System.Double),idx=0;$t=Bridge.getEnumerator(collection);try{while($t.moveNext()){if(item=$t.Current,isFirstElement){isFirstElement=!1;prev=item;continue}result[System.Array.index(idx,result)]=Math.abs(item-prev);idx=idx+1|0;prev=item}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return result},GetTopGroupByCount:function(data,sequenceType){var $t,sorted=System.Linq.Enumerable.from(data,System.Double).orderBy($asm.$.Kusto.Charting.DataChartsHelper.f7),currentGroup=new(System.Collections.Generic.List$1(System.Double).$ctor2)(System.Linq.Enumerable.from(data,System.Double).count()),maxGroupCount=0,maxGroupValue=0,prevNum=null,num,diff;$t=Bridge.getEnumerator(sorted);try{while($t.moveNext()){if(num=$t.Current,!System.Nullable.hasValue(prevNum)){prevNum=num;currentGroup.add(num);continue}diff=num-System.Nullable.getValue(prevNum);diff>Kusto.Charting.DataChartsHelper.c_doubleAcceptableApproximation&&(System.Linq.Enumerable.from(currentGroup,System.Double).count()>maxGroupCount&&(maxGroupCount=System.Linq.Enumerable.from(currentGroup,System.Double).count(),maxGroupValue=Bridge.Math.round(System.Linq.Enumerable.from(currentGroup,System.Double).average(),Kusto.Charting.DataChartsHelper.c_decimalRoundingPrecision,6)),currentGroup.clear());currentGroup.add(num);prevNum=num}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return{Item1:maxGroupValue,Item2:maxGroupCount}},GetDistance:function(start,end,sequenceType){if(start==null||end==null)return-1;var distance=-1;switch(sequenceType){case Kusto.Charting.ArgumentColumnType.TimeSpan:case Kusto.Charting.ArgumentColumnType.DateTime:distance=System.Int64.toNumber(System.DateTime.getTicks(end.ArgumentDateTime).sub(System.DateTime.getTicks(start.ArgumentDateTime)));break;case Kusto.Charting.ArgumentColumnType.Numeric:distance=end.ArgumentNumeric-start.ArgumentNumeric;break}return Bridge.Math.round(Math.abs(distance),Kusto.Charting.DataChartsHelper.c_decimalRoundingPrecision,6)},ResolvePredefinedColumnsIndexes:function(data,seriesColumns,yColumns,xColumn,argumentRestrictions,metaData){var dataIsSeries=null,columns=data.Kusto$Charting$IChartingDataSource$GetSchema(),i,column,columnName,isY,isX,columnType,isSeries,value,type;if(argumentRestrictions===Kusto.Charting.ArgumentRestrictions.GeospatialAsSeries&&System.Linq.Enumerable.from(seriesColumns,System.String).any()&&(System.Linq.Enumerable.from(yColumns,System.String).any()||!System.String.isNullOrWhiteSpace(xColumn)))throw new Kusto.Charting.SeriesCreationException(\"GeospatialAsSeries: it's not possible to set both series and x/y columns.\");for(i=0;i<System.Linq.Enumerable.from(columns,System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).count();i=i+1|0){if(column=System.Linq.Enumerable.from(columns,System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).elementAt(i),columnName=column.Item1,System.Linq.Enumerable.from(seriesColumns,System.String).any()&&System.Linq.Enumerable.from(seriesColumns,System.String).contains(columnName)){metaData.v.SeriesIndexesList.add(i);argumentRestrictions===Kusto.Charting.ArgumentRestrictions.GeospatialAsSeries&&metaData.v.GeospatiaColumnlIndexesList.add(i);continue}if(isY=System.Linq.Enumerable.from(yColumns,System.String).any()&&System.Linq.Enumerable.from(yColumns,System.String).contains(columnName),isX=!System.String.isNullOrWhiteSpace(xColumn)&&Bridge.referenceEquals(xColumn,columnName),isY||isX){if(columnType=column.Item2,isSeries=!1,System.Enum.hasFlag(Kusto.Charting.ArgumentColumnType.StringOrObject,Bridge.box(columnType,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))&&metaData.v.ArgumentColumnType!==Kusto.Charting.ArgumentColumnType.Geospatial&&(value=Bridge.toString(data.Kusto$Charting$IChartingDataSource$GetValue(0,i)),type=Kusto.Charting.DataChartsHelper.ResolveJsonArrayType(value),type!==Kusto.Charting.ArgumentColumnType.None&&(columnType=type,isSeries=!0)),System.Nullable.hasValue(dataIsSeries)){if(System.Nullable.getValue(dataIsSeries)!==isSeries)throw new Kusto.Charting.SeriesCreationException(\"Y-Axes and X-Axis both should be defined as scalars or as series\");}else dataIsSeries=isSeries;if(metaData.v.ArgumentColumnType===Kusto.Charting.ArgumentColumnType.Geospatial)metaData.v.GeospatiaColumnlIndexesList.Count>0&&isX?metaData.v.GeospatiaColumnlIndexesList.insert(0,i):metaData.v.GeospatiaColumnlIndexesList.add(i),argumentRestrictions===Kusto.Charting.ArgumentRestrictions.GeospatialAsSeries&&(metaData.v.SeriesIndexesList.Count>0&&isX?metaData.v.SeriesIndexesList.insert(0,i):metaData.v.SeriesIndexesList.add(i));else if(isX)if(System.Enum.hasFlag(metaData.v.ArgumentColumnType,Bridge.box(columnType,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType))))metaData.v.ArgumentDataColumnIndex=i;else throw new Kusto.Charting.SeriesCreationException(System.String.format(\"Type of column {0}, provided as X-Axis, does not match required by chart type\",[columnName]));else if(isY)if(System.Enum.hasFlag(Kusto.Charting.ArgumentColumnType.NumericOrDateTimeOrTimeSpan,Bridge.box(columnType,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType))))metaData.v.DataIndexesList.add(i);else throw new Kusto.Charting.SeriesCreationException(System.String.format(\"Column {0}, provided as Y-Axis, sould be one of types: Numeric, DateTime, Timespan\",[columnName]));}}if(metaData.v.IsDataFormedAsSeries=System.Nullable.hasValue(dataIsSeries)?System.Nullable.getValue(dataIsSeries):!1,!System.Linq.Enumerable.from(metaData.v.DataIndexesList,System.Int32).any()&&System.Linq.Enumerable.from(yColumns,System.String).any()&&metaData.v.ArgumentColumnType!==Kusto.Charting.ArgumentColumnType.Geospatial)throw new Kusto.Charting.SeriesCreationException(\"Any of columns defined as Y-Axes were not found in data, not of an appropriate type or used as argument or series\");if(!System.String.isNullOrWhiteSpace(xColumn)&&metaData.v.ArgumentDataColumnIndex<0&&metaData.v.ArgumentColumnType!==Kusto.Charting.ArgumentColumnType.Geospatial)throw new Kusto.Charting.SeriesCreationException(System.String.format(\"Column {0}, provided as X-Axis, was not found in data\",[xColumn]));if(System.Linq.Enumerable.from(seriesColumns,System.String).any()&&!System.Linq.Enumerable.from(metaData.v.SeriesIndexesList,System.Int32).any())throw new Kusto.Charting.SeriesCreationException(\"Any of columns, provided as Series, were not found in data\");},ResolveDataSeriesFromDataRow:function(result,table,columns,propertyColumns,rowIdx,baseSeriesName,argumentColumnType,accumulate,argumentDataColumnIndex){var $t,$t1,$t2,argumentValue=table.Kusto$Charting$IChartingDataSource$GetValue(rowIdx,argumentDataColumnIndex),argumentActualType=Kusto.Charting.DataChartsHelper.ResolveJsonArrayType(Bridge.toString(argumentValue)),values,j,argumentData,dataItem;$t=Bridge.getEnumerator(columns,Kusto.Charting.DataChartsHelper.ColumnDesc);try{while($t.moveNext()){var column=$t.Current,cellValue=table.Kusto$Charting$IChartingDataSource$GetValue(rowIdx,column.Index),value=($t1=Bridge.as(cellValue,System.String),$t1!=null?$t1:Bridge.toString(cellValue)),type=Kusto.Charting.DataChartsHelper.ResolveJsonArrayType(value);if(type!==Kusto.Charting.ArgumentColumnType.None&&System.Enum.hasFlag(Kusto.Charting.ArgumentColumnType.NumericOrDateTimeOrTimeSpan,Bridge.box(type,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))){if(values=Kusto.Charting.DataChartsHelper.ParseJsonArrayAsDouble(value,!0),values==null||System.Linq.Enumerable.from(value,System.Char).count()===0)continue;var seriesName=System.String.isNullOrEmpty(baseSeriesName)?column.Name:(baseSeriesName||\"\")+\":\"+(column.Name||\"\"),lastValue=0,argumentDateTime=Kusto.Charting.DataChartsHelper.GetArgumentDateTimeArray(argumentValue,argumentActualType,argumentDataColumnIndex,System.Linq.Enumerable.from(values,System.Double).count()),argumentNumeric=Kusto.Charting.DataChartsHelper.GetArgumentNumericArray(argumentValue,argumentActualType,argumentDataColumnIndex,System.Linq.Enumerable.from(values,System.Double).count()),argumentString=Kusto.Charting.DataChartsHelper.GetArgumentStringArray(argumentValue,argumentActualType,argumentDataColumnIndex,System.Linq.Enumerable.from(values,System.Double).count()),argumentProperties=System.Linq.Enumerable.from(propertyColumns,Kusto.Charting.DataChartsHelper.ColumnDesc).select(function(p){return table.Kusto$Charting$IChartingDataSource$GetValue(rowIdx,p.Index)}).select($asm.$.Kusto.Charting.DataChartsHelper.f15).ToArray(System.Object);for(j=0;j<values.length;j=j+1|0)argumentData=\"\",System.Enum.hasFlag(Kusto.Charting.ArgumentColumnType.DateTimeOrTimeSpan,Bridge.box(argumentColumnType,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))&&System.Enum.hasFlag(Kusto.Charting.ArgumentColumnType.DateTimeOrTimeSpan,Bridge.box(argumentActualType,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))?argumentData=System.DateTime.format(argumentDateTime[System.Array.index(j,argumentDateTime)]):System.Enum.hasFlag(argumentColumnType,Bridge.box(Kusto.Charting.ArgumentColumnType.Numeric,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))&&argumentActualType===Kusto.Charting.ArgumentColumnType.Numeric?argumentData=System.Double.format(argumentNumeric[System.Array.index(j,argumentNumeric)]):System.Enum.hasFlag(argumentColumnType,Bridge.box(Kusto.Charting.ArgumentColumnType.String,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))&&(argumentData=argumentString[System.Array.index(j,argumentString)],System.String.isNullOrEmpty(argumentData)&&(argumentData=Bridge.as(argumentValue,System.String))),dataItem=($t2=new Kusto.Charting.DataItem.ctor,$t2.ArgumentData=argumentData,$t2.ArgumentDateTime=argumentDateTime[System.Array.index(j,argumentDateTime)],$t2.ArgumentNumeric=argumentNumeric[System.Array.index(j,argumentNumeric)],$t2.ValueData=accumulate?values[System.Array.index(j,values)]+lastValue:values[System.Array.index(j,values)],$t2.ValueName=column.Name,$t2.SeriesName=seriesName,$t2.Properties=Kusto.Charting.DataChartsHelper.ResolvePropertiesFromMultiValue(table,argumentProperties,propertyColumns,j),$t2),System.String.isNullOrEmpty(dataItem.ArgumentData)&&(dataItem.ArgumentData=Kusto.Charting.DataChartsHelper.c_defaultArgumentString),result.add(dataItem),lastValue=dataItem.ValueData}}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}},ResolveProperties:function(table,rowIdx,propertyColumns){return Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(Kusto.Charting.DataChartsHelper.ColumnDesc,propertyColumns)?\"\":Bridge.toArray(System.Linq.Enumerable.from(propertyColumns,Kusto.Charting.DataChartsHelper.ColumnDesc).select(function(column){var cellValue=table.Kusto$Charting$IChartingDataSource$GetValue(rowIdx,column.Index),value=Kusto.Charting.DataChartsHelper.ObjectToString(cellValue);return System.String.format(\"{0}:{1}\",column.Name,value)})).join(\", \")},ResolvePropertiesFromMultiValue:function(table,properties,propertyColumns,j){return Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(Kusto.Charting.DataChartsHelper.ColumnDesc,propertyColumns)?\"\":Bridge.toArray(System.Linq.Enumerable.from(propertyColumns,Kusto.Charting.DataChartsHelper.ColumnDesc).zip(properties,$asm.$.Kusto.Charting.DataChartsHelper.f16).select(function(kvp){var value,arr;return value=(arr=Bridge.as(kvp.Item2,System.Array.type(System.String)))!=null?arr[System.Array.index(j,arr)]:Kusto.Charting.DataChartsHelper.ObjectToString(kvp.Item2),System.String.format(\"{0}:{1}\",kvp.Item1.Name,value)})).join(\", \")},ObjectToString:function(o){var s,d;return(s=Bridge.as(o,System.String))!=null?s:Bridge.equals(d=Bridge.is(o,System.DateTime)?System.Nullable.getValue(Bridge.cast(Bridge.unbox(o,System.DateTime),System.DateTime)):null,null)?Bridge.toString(o):Kusto.Cloud.Platform.Utils.ExtendedDateTime.ToUtcString(d)},GetArgumentStringArray:function(value,argumentColumnType,argumentDataColumnIndex,count){if(!System.Enum.hasFlag(argumentColumnType,Bridge.box(Kusto.Charting.ArgumentColumnType.String,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))||argumentDataColumnIndex<0)return System.Array.init(count,null,System.String);var result=Kusto.Charting.DataChartsHelper.ParseJsonArrayAsString(Bridge.toString(value));return result==null?System.Array.init(count,null,System.String):result},GetArgumentNumericArray:function(value,argumentColumnType,argumentDataColumnIndex,count){if(argumentColumnType!==Kusto.Charting.ArgumentColumnType.Numeric||argumentDataColumnIndex<0)return System.Linq.Enumerable.repeat(Kusto.Charting.DataChartsHelper.c_defaultArgumentNumeric,count).ToArray(System.Double);var result=Kusto.Charting.DataChartsHelper.ParseJsonArrayAsDouble(Bridge.toString(value));return result==null?System.Linq.Enumerable.repeat(Kusto.Charting.DataChartsHelper.c_defaultArgumentNumeric,count).ToArray(System.Double):result},GetArgumentDateTimeArray:function(value,argumentColumnType,argumentDataColumnIndex,count){if(!System.Enum.hasFlag(Kusto.Charting.ArgumentColumnType.DateTimeOrTimeSpan,Bridge.box(argumentColumnType,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))||argumentDataColumnIndex<0)return System.Linq.Enumerable.repeat(Kusto.Charting.DataChartsHelper.c_defaultArgumentDatetime,count).ToArray(System.DateTime);var result=Kusto.Charting.DataChartsHelper.ParseJsonArrayAsDateTime(Bridge.toString(value),argumentColumnType);return result==null?System.Linq.Enumerable.repeat(Kusto.Charting.DataChartsHelper.c_defaultArgumentDatetime,count).ToArray(System.DateTime):result},ResolveDataItemsFromDataRow:function(result,table,columns,propertyColumns,rowIdx,baseSeriesName,argumentData,lastValues,accumulate){var $t,$t1,hasPrevValue;System.Linq.Enumerable.from(columns,Kusto.Charting.DataChartsHelper.ColumnDesc).any()||argumentData.GeospatialArgumentDataType!==Kusto.Charting.ArgumentColumnType.Geospatial||result.add(($t=new Kusto.Charting.DataItem.ctor,$t.GeoCoordinates=argumentData.GeoCoordinates,$t.SeriesName=System.String.isNullOrWhiteSpace(baseSeriesName)?\"\":baseSeriesName,$t.Properties=Kusto.Charting.DataChartsHelper.ResolveProperties(table,rowIdx,propertyColumns),$t));$t=Bridge.getEnumerator(columns,Kusto.Charting.DataChartsHelper.ColumnDesc);try{while($t.moveNext()){var column=$t.Current,cellValue=table.Kusto$Charting$IChartingDataSource$GetValue(rowIdx,column.Index),value=Kusto.Charting.DataChartsHelper.TryConvertToDouble(cellValue,column.Type),lastValue={},dataItem=($t1=new Kusto.Charting.DataItem.ctor,$t1.ArgumentData=argumentData.Value,$t1.ArgumentDateTime=argumentData.DateTime,$t1.ArgumentNumeric=argumentData.NumericValue,$t1.ValueName=column.Name,$t1.Properties=Kusto.Charting.DataChartsHelper.ResolveProperties(table,rowIdx,propertyColumns),$t1);argumentData.GeospatialArgumentDataType===Kusto.Charting.ArgumentColumnType.Geospatial?(dataItem.SeriesName=System.String.isNullOrWhiteSpace(baseSeriesName)?\"\":baseSeriesName,dataItem.GeoCoordinates=argumentData.GeoCoordinates):dataItem.SeriesName=System.String.isNullOrEmpty(baseSeriesName)?column.Name:(baseSeriesName||\"\")+\":\"+(column.Name||\"\");hasPrevValue=lastValues.tryGetValue(dataItem.SeriesName,lastValue);dataItem.ValueData=accumulate&&hasPrevValue?value+lastValue.v:value;result.add(dataItem);accumulate||!hasPrevValue?lastValues.setItem(dataItem.SeriesName,dataItem.ValueData):isNaN(value)||lastValues.setItem(dataItem.SeriesName,value)}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}},GetBaseSeriesName:function(table,seriesColumns,rowIdx){var $t,baseSeriesName=\"\",baseSeriesNameBuilder,column,columnValue;if(seriesColumns!=null){baseSeriesNameBuilder=new System.Text.StringBuilder;$t=Bridge.getEnumerator(seriesColumns,Kusto.Charting.DataChartsHelper.ColumnDesc);try{while($t.moveNext())column=$t.Current,baseSeriesNameBuilder.getLength()>0&&baseSeriesNameBuilder.append(\", \"),columnValue=Bridge.toString(table.Kusto$Charting$IChartingDataSource$GetValue(rowIdx,column.Index)),columnValue=System.String.isNullOrWhiteSpace(columnValue)?Kusto.Charting.DataChartsHelper.c_defaultArgumentString:columnValue,baseSeriesNameBuilder.appendFormat(\"{0}:{1}\",column.Name,columnValue)}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}baseSeriesName=baseSeriesNameBuilder.toString()}return baseSeriesName},TrySetGeoJSONPoint:function(value,point){point.v=null;try{point.v=Newtonsoft.Json.JsonConvert.DeserializeObject(value,Kusto.Charting.DataChartsHelper.GeoJSONPoint)}catch($e1){if($e1=System.Exception.create($e1),Bridge.is($e1,Newtonsoft.Json.JsonException))return!1;else throw $e1;}if((point.v!=null?point.v.coordinates:null)==null)return!1;else if(point.v.coordinates.length!==2)return!1;return!0},GetArgumentDateTime:function(value,argumentColumnType){if(!System.Enum.hasFlag(argumentColumnType,Bridge.box(Kusto.Charting.ArgumentColumnType.DateTime,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))&&!System.Enum.hasFlag(argumentColumnType,Bridge.box(Kusto.Charting.ArgumentColumnType.TimeSpan,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType))))return Kusto.Charting.DataChartsHelper.c_defaultArgumentDatetime;if(Bridge.is(value,System.DateTime))return System.Nullable.getValue(Bridge.cast(Bridge.unbox(value,System.DateTime),System.DateTime));else if(Bridge.is(value,System.TimeSpan))return Kusto.Charting.DataChartsHelper.TimeSpanToDateTime(System.Nullable.getValue(Bridge.cast(Bridge.unbox(value,System.TimeSpan),System.TimeSpan)));return Kusto.Charting.DataChartsHelper.c_defaultArgumentDatetime},ConvertToDouble:function(obj,type){var value=Kusto.Charting.DataChartsHelper.c_defaultArgumentNumeric;if(obj==null)return value;if(type===Kusto.Charting.ArgumentColumnType.DateTime)value=Kusto.Charting.DataChartsHelper.DateTimeToTotalSeconds(System.Nullable.getValue(Bridge.cast(Bridge.unbox(obj,System.DateTime),System.DateTime)));else if(type===Kusto.Charting.ArgumentColumnType.TimeSpan)value=Kusto.Charting.DataChartsHelper.TimeSpanToTotalSeconds(System.Nullable.getValue(Bridge.cast(Bridge.unbox(obj,System.TimeSpan),System.TimeSpan)));else try{value=System.Convert.toDouble(obj)}catch($e1){$e1=System.Exception.create($e1);value=Kusto.Charting.DataChartsHelper.c_defaultArgumentNumeric}return value},TryConvertToDouble:function(value,type){return value==null||Kusto.Charting.DataChartsHelper.IsEmptyValue(value)?Kusto.Charting.DataChartsHelper.c_defaultArgumentNumeric:Kusto.Charting.DataChartsHelper.ConvertToDouble(value,type)},DetectChartDimensionsUsingData:function(columns,table,seriesColumns,argumentRestrictions,metaData){var $t,resolvedColumnTypes=System.Array.init(System.Linq.Enumerable.from(columns,System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).count(),0,Kusto.Charting.ArgumentColumnType),firstNumericColumnIndex,i,column;if(table.Kusto$Charting$IChartingDataSource$RowsCount===0)return!1;for(firstNumericColumnIndex=-1,i=0;i<System.Linq.Enumerable.from(columns,System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).count();i=i+1|0)if((column=System.Linq.Enumerable.from(columns,System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).elementAt(i),resolvedColumnTypes[System.Array.index(i,resolvedColumnTypes)]=column.Item2,!metaData.v.DataIndexesList.contains(i))&&(column.Item2===Kusto.Charting.ArgumentColumnType.String||column.Item2===Kusto.Charting.ArgumentColumnType.Object)){var item=table.Kusto$Charting$IChartingDataSource$GetValue(0,i),value=($t=Bridge.as(item,System.String),$t!=null?$t:Bridge.toString(item)),type=Kusto.Charting.DataChartsHelper.ResolveJsonArrayType(value);if(type===Kusto.Charting.ArgumentColumnType.None){!System.Linq.Enumerable.from(seriesColumns,System.String).any()&&metaData.v.ArgumentDataColumnIndex<0&&metaData.v.SeriesIndexesList.add(i);continue}resolvedColumnTypes[System.Array.index(i,resolvedColumnTypes)]=type;System.Enum.hasFlag(metaData.v.ArgumentColumnType,Bridge.box(type,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))&&(metaData.v.ArgumentDataColumnIndex<0||System.Enum.hasFlag(argumentRestrictions,Bridge.box(Kusto.Charting.ArgumentRestrictions.PreferLast,Kusto.Charting.ArgumentRestrictions,System.Enum.toStringFn(Kusto.Charting.ArgumentRestrictions))))?metaData.v.ArgumentDataColumnIndex=i:type===Kusto.Charting.ArgumentColumnType.Numeric&&firstNumericColumnIndex<0&&(firstNumericColumnIndex=i)}return Kusto.Charting.DataChartsHelper.CompleteChartDimentionsDetection(columns,argumentRestrictions,firstNumericColumnIndex,resolvedColumnTypes,metaData)},DetectChartDimensionsUsingColumnTypesAndData:function(columns,table,argumentRestrictions,metaData){for(var column,resolvedColumnTypes,$t,firstNumericColumnIndex=-1,geoJSONPointCandidateColumns=new(System.Collections.Generic.List$1(System.Int32).ctor),geoColumnsPredefined=System.Linq.Enumerable.from(metaData.v.GeospatiaColumnlIndexesList,System.Int32).any(),i=0;i<System.Linq.Enumerable.from(columns,System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).count();i=i+1|0)if(!metaData.v.DataIndexesList.contains(i)&&!metaData.v.SeriesIndexesList.contains(i))if(column=System.Linq.Enumerable.from(columns,System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).elementAt(i),metaData.v.ArgumentColumnType===Kusto.Charting.ArgumentColumnType.Geospatial&&System.Enum.hasFlag(Kusto.Charting.ArgumentColumnType.StringOrObject,Bridge.box(column.Item2,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))&&geoJSONPointCandidateColumns.add(i),metaData.v.ArgumentColumnType===Kusto.Charting.ArgumentColumnType.Geospatial&&System.Enum.hasFlag(Kusto.Charting.ArgumentColumnType.Numeric,Bridge.box(column.Item2,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))&&System.Linq.Enumerable.from(metaData.v.GeospatiaColumnlIndexesList,System.Int32).count()<2&&!geoColumnsPredefined)metaData.v.GeospatiaColumnlIndexesList.add(i);else if(System.Enum.hasFlag(metaData.v.ArgumentColumnType,Bridge.box(column.Item2,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))&&(metaData.v.ArgumentDataColumnIndex<0||System.Enum.hasFlag(argumentRestrictions,Bridge.box(Kusto.Charting.ArgumentRestrictions.PreferLast,Kusto.Charting.ArgumentRestrictions,System.Enum.toStringFn(Kusto.Charting.ArgumentRestrictions)))))metaData.v.ArgumentDataColumnIndex=i;else if(column.Item2===Kusto.Charting.ArgumentColumnType.Numeric&&metaData.v.ArgumentDataColumnIndex!==-1&&System.Enum.hasFlag(argumentRestrictions,Bridge.box(Kusto.Charting.ArgumentRestrictions.NumericAsSeries,Kusto.Charting.ArgumentRestrictions,System.Enum.toStringFn(Kusto.Charting.ArgumentRestrictions)))){firstNumericColumnIndex=i;break}if(metaData.v.ArgumentColumnType===Kusto.Charting.ArgumentColumnType.Geospatial&&System.Linq.Enumerable.from(metaData.v.GeospatiaColumnlIndexesList,System.Int32).count()<2&&!geoColumnsPredefined){metaData.v.GeospatiaColumnlIndexesList.clear();$t=Bridge.getEnumerator(geoJSONPointCandidateColumns);try{while($t.moveNext()){var columnId=$t.Current,columnFirstValue=Bridge.toString(table.Kusto$Charting$IChartingDataSource$GetValue(0,columnId)),geojsonPoint={};if(Kusto.Charting.DataChartsHelper.TrySetGeoJSONPoint(columnFirstValue,geojsonPoint)){metaData.v.GeospatiaColumnlIndexesList.add(columnId);break}}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}}return resolvedColumnTypes=System.Linq.Enumerable.from(columns,System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).select($asm.$.Kusto.Charting.DataChartsHelper.f17).ToArray(Kusto.Charting.ArgumentColumnType),Kusto.Charting.DataChartsHelper.CompleteChartDimentionsDetection(columns,argumentRestrictions,firstNumericColumnIndex,resolvedColumnTypes,metaData)},CompleteChartDimentionsDetection:function(columns,argumentRestrictions,firstNumericColumnIndex,resolvedColumnTypes,metaData){var $t,seriesOrArgumentDataIndex,geoColumnIndex,seriesDefaultIndex;if(metaData.v.ArgumentDataColumnIndex>=0&&System.Linq.Enumerable.from(metaData.v.SeriesIndexesList,System.Int32).any())return!0;if(metaData.v.ArgumentDataColumnIndex<0&&firstNumericColumnIndex<0&&System.Enum.hasFlag(metaData.v.ArgumentColumnType,Bridge.box(Kusto.Charting.ArgumentColumnType.Numeric,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType))))return!1;else if(metaData.v.ArgumentColumnType===Kusto.Charting.ArgumentColumnType.Geospatial&&!System.Linq.Enumerable.from(metaData.v.GeospatiaColumnlIndexesList,System.Int32).any())return!1;if(metaData.v.ArgumentDataColumnIndex<0&&metaData.v.ArgumentColumnType!==Kusto.Charting.ArgumentColumnType.Geospatial){if(System.Enum.hasFlag(Kusto.Charting.ArgumentColumnType.DateTimeOrTimeSpan,Bridge.box(metaData.v.ArgumentColumnType,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType))))return!1;System.Enum.hasFlag(metaData.v.ArgumentColumnType,Bridge.box(Kusto.Charting.ArgumentColumnType.Numeric,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))?System.Linq.Enumerable.from(columns,System.Tuple$2(System.String,Kusto.Charting.ArgumentColumnType)).count()>1&&(metaData.v.ArgumentDataColumnIndex=firstNumericColumnIndex):metaData.v.ArgumentDataColumnIndex=System.Enum.hasFlag(argumentRestrictions,Bridge.box(Kusto.Charting.ArgumentRestrictions.NotIncludedInSeries,Kusto.Charting.ArgumentRestrictions,System.Enum.toStringFn(Kusto.Charting.ArgumentRestrictions)))?Kusto.Charting.DataChartsHelper.GoBackwardsAndFindColumnNotInList(firstNumericColumnIndex,metaData.v.SeriesIndexes,metaData.v.DataIndexes):firstNumericColumnIndex-1|0}if(metaData.v.ArgumentDataColumnIndex<0&&System.Enum.hasFlag(argumentRestrictions,Bridge.box(Kusto.Charting.ArgumentRestrictions.MustHave,Kusto.Charting.ArgumentRestrictions,System.Enum.toStringFn(Kusto.Charting.ArgumentRestrictions)))&&(metaData.v.ArgumentDataColumnIndex=0),metaData.v.ArgumentColumnType===Kusto.Charting.ArgumentColumnType.Geospatial)if(seriesOrArgumentDataIndex=Kusto.Charting.DataChartsHelper.GetFirstStringAvailableColumnIndexOrNonStringIfAbsent(resolvedColumnTypes,metaData.v.GeospatialColumnIndexes),argumentRestrictions===Kusto.Charting.ArgumentRestrictions.GeospatialAsSeries){if(metaData.v.ArgumentDataColumnIndex=seriesOrArgumentDataIndex,!System.Linq.Enumerable.from(metaData.v.SeriesIndexesList,System.Int32).any()){$t=Bridge.getEnumerator(metaData.v.GeospatiaColumnlIndexesList);try{while($t.moveNext())geoColumnIndex=$t.Current,metaData.v.SeriesIndexesList.add(geoColumnIndex)}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}}}else seriesOrArgumentDataIndex===-1||System.Linq.Enumerable.from(metaData.v.SeriesIndexesList,System.Int32).any()||metaData.v.SeriesIndexesList.add(seriesOrArgumentDataIndex);else!System.Linq.Enumerable.from(metaData.v.SeriesIndexesList,System.Int32).any()&&metaData.v.ArgumentDataColumnIndex>=0&&(seriesDefaultIndex=metaData.v.ArgumentDataColumnIndex,resolvedColumnTypes[System.Array.index(metaData.v.ArgumentDataColumnIndex,resolvedColumnTypes)]!==Kusto.Charting.ArgumentColumnType.String?seriesDefaultIndex=Kusto.Charting.DataChartsHelper.GetFirstStringColumnIndex(resolvedColumnTypes):System.Enum.hasFlag(argumentRestrictions,Bridge.box(Kusto.Charting.ArgumentRestrictions.NotIncludedInSeries,Kusto.Charting.ArgumentRestrictions,System.Enum.toStringFn(Kusto.Charting.ArgumentRestrictions)))&&(seriesDefaultIndex=metaData.v.ArgumentDataColumnIndex-1|0),metaData.v.IsDataFormedAsSeries||seriesDefaultIndex===-1&&System.Enum.hasFlag(argumentRestrictions,Bridge.box(Kusto.Charting.ArgumentRestrictions.NumericAsSeries,Kusto.Charting.ArgumentRestrictions,System.Enum.toStringFn(Kusto.Charting.ArgumentRestrictions)))&&(seriesDefaultIndex=Kusto.Charting.DataChartsHelper.GetFirstStringAvailableColumnIndexOrNonStringIfAbsent(resolvedColumnTypes,null),System.Enum.hasFlag(argumentRestrictions,Bridge.box(Kusto.Charting.ArgumentRestrictions.NotIncludedInSeries,Kusto.Charting.ArgumentRestrictions,System.Enum.toStringFn(Kusto.Charting.ArgumentRestrictions)))&&seriesDefaultIndex===metaData.v.ArgumentDataColumnIndex&&(seriesDefaultIndex=-1)),seriesDefaultIndex>=0&&!metaData.v.DataIndexesList.contains(seriesDefaultIndex)&&metaData.v.SeriesIndexesList.add(seriesDefaultIndex));return!0},GoBackwardsAndFindColumnNotInList:function(startIndex,seriesIndices,yIndexes){for(var isNotInSeries,isNotInYs,i=startIndex-1|0;i>=0;i=i-1|0)if(isNotInSeries=seriesIndices==null?!0:!System.Linq.Enumerable.from(seriesIndices,System.Int32).contains(i),isNotInYs=yIndexes==null?!0:!System.Linq.Enumerable.from(yIndexes,System.Int32).contains(i),isNotInSeries&&isNotInYs)return i;return-1},GetFirstStringColumnIndex:function(columns){for(var i=0;i<System.Linq.Enumerable.from(columns,Kusto.Charting.ArgumentColumnType).count();i=i+1|0)if(System.Linq.Enumerable.from(columns,Kusto.Charting.ArgumentColumnType).elementAt(i)===Kusto.Charting.ArgumentColumnType.String)return i;return-1},GetFirstStringAvailableColumnIndexOrNonStringIfAbsent:function(columns,indexesToExclude){for(var $t,$t1,nonStringIndex=-1,i=0;i<System.Linq.Enumerable.from(columns,Kusto.Charting.ArgumentColumnType).count();i=i+1|0)if(columns[System.Array.index(i,columns)]===Kusto.Charting.ArgumentColumnType.String&&($t=System.Nullable.not(indexesToExclude!=null?System.Linq.Enumerable.from(indexesToExclude,System.Int32).contains(i):null),$t!=null?$t:!0))return i;else nonStringIndex===-1&&($t1=System.Nullable.not(indexesToExclude!=null?System.Linq.Enumerable.from(indexesToExclude,System.Int32).contains(i):null),$t1!=null?$t1:!0)&&(nonStringIndex=i);return nonStringIndex},TimeSpanToDateTime:function(ts){return ts.getTicks().lte(System.Int64(0))?System.DateTime.getMinValue():System.DateTime.create$2(ts.getTicks(),1)},TimeSpanToTotalSeconds:function(ts){return ts.getTotalSeconds()},DateTimeToTotalSeconds:function(dt){return System.TimeSpan.fromTicks(System.DateTime.getTicks(dt)).getTotalSeconds()},ParseJsonArrayAsDateTime:function(value,columnType){if(System.String.isNullOrWhiteSpace(value)||!System.String.startsWith(value.trim(),\"[\",4))return null;try{if(columnType===Kusto.Charting.ArgumentColumnType.DateTime)return System.Linq.Enumerable.from(Newtonsoft.Json.JsonConvert.DeserializeObject(value,System.Array.type(System.DateTime)),System.DateTime).select($asm.$.Kusto.Charting.DataChartsHelper.f18).ToArray(System.DateTime);else if(columnType===Kusto.Charting.ArgumentColumnType.TimeSpan){var resultAsTimeSpan=Newtonsoft.Json.JsonConvert.DeserializeObject(value,System.Array.type(System.TimeSpan));return System.Linq.Enumerable.from(resultAsTimeSpan,System.TimeSpan).select($asm.$.Kusto.Charting.DataChartsHelper.f19).ToArray(System.DateTime)}}catch($e1){$e1=System.Exception.create($e1)}return null},ParseJsonArrayAsDouble:function(value,considerDateTimeAndTimeSpanAsDouble){var result,valueAsArr,resolvedValueType,d,i,val,ts,dt;if(considerDateTimeAndTimeSpanAsDouble===void 0&&(considerDateTimeAndTimeSpanAsDouble=!1),System.String.isNullOrWhiteSpace(value)||!System.String.startsWith(value.trim(),\"[\",4))return null;try{valueAsArr=Newtonsoft.Json.JsonConvert.DeserializeObject(value,System.Array.type(System.String));result=System.Array.init(System.Linq.Enumerable.from(valueAsArr,System.String).count(),0,System.Double)}catch($e1){return $e1=System.Exception.create($e1),null}for(resolvedValueType=Kusto.Charting.ArgumentColumnType.None,d={},i=0;i<valueAsArr.length;i=i+1|0){if(val=valueAsArr[System.Array.index(i,valueAsArr)],val==null){result[System.Array.index(i,result)]=Number.NaN;continue}else if(System.Enum.hasFlag(Kusto.Charting.ArgumentColumnType.Numeric,Bridge.box(resolvedValueType,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))&&System.Double.tryParse(val,null,d)){resolvedValueType===Kusto.Charting.ArgumentColumnType.None&&(resolvedValueType=Kusto.Charting.ArgumentColumnType.Numeric);result[System.Array.index(i,result)]=d.v;continue}else if(considerDateTimeAndTimeSpanAsDouble){if(ts={},System.Enum.hasFlag(Kusto.Charting.ArgumentColumnType.TimeSpan,Bridge.box(resolvedValueType,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))&&System.TimeSpan.tryParse(val,null,ts)){resolvedValueType===Kusto.Charting.ArgumentColumnType.None&&(resolvedValueType=Kusto.Charting.ArgumentColumnType.TimeSpan);result[System.Array.index(i,result)]=ts.v.getTotalSeconds();continue}if(dt={},System.Enum.hasFlag(Kusto.Charting.ArgumentColumnType.DateTime,Bridge.box(resolvedValueType,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))&&System.DateTime.tryParse(val,null,dt)){resolvedValueType===Kusto.Charting.ArgumentColumnType.None&&(resolvedValueType=Kusto.Charting.ArgumentColumnType.DateTime);result[System.Array.index(i,result)]=System.TimeSpan.fromTicks(System.DateTime.getTicks(dt.v)).getTotalSeconds();continue}}return null}return resolvedValueType!==Kusto.Charting.ArgumentColumnType.None?result:null},ParseJsonArrayAsString:function(value){if(System.String.isNullOrWhiteSpace(value)||!System.String.startsWith(value.trim(),\"[\",4))return null;try{return Newtonsoft.Json.JsonConvert.DeserializeObject(value,System.Array.type(System.String))}catch($e1){$e1=System.Exception.create($e1)}return null},ArrayIsTimespan:function(arr){var $t,hasTimeSpanValues=!1,ts={},val;$t=Bridge.getEnumerator(arr);try{while($t.moveNext()){if(val=$t.Current,val==null)continue;else if(System.TimeSpan.tryParse(val,null,ts)){hasTimeSpanValues=!0;continue}return!1}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return hasTimeSpanValues},ArrayIsDatetime:function(arr){var $t,hasDateTimeValues=!1,d={},val;$t=Bridge.getEnumerator(arr);try{while($t.moveNext()){if(val=$t.Current,val==null)continue;else if(System.DateTime.tryParse(val,null,d)){hasDateTimeValues=!0;continue}return!1}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return hasDateTimeValues},ArrayIsDouble:function(arr){var $t,hasNumericValues=!1,d={},val;$t=Bridge.getEnumerator(arr);try{while($t.moveNext()){if(val=$t.Current,val==null)continue;else if(System.Double.tryParse(val,null,d)){hasNumericValues=!0;continue}return!1}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return hasNumericValues},IsEmptyValue:function(value){return value==null?!0:Bridge.referenceEquals(value,System.DBNull.Value)?!0:Bridge.is(value,System.String)&&System.String.isNullOrEmpty(Bridge.cast(value,System.String))?!0:!1}}}});Bridge.ns(\"Kusto.Charting.DataChartsHelper\",$asm.$);Bridge.apply($asm.$.Kusto.Charting.DataChartsHelper,{f1:function(col,index){return new Kusto.Charting.DataChartsHelper.ColumnDesc(col.Item1,col.Item2,index)},f2:function(kvp){return!Kusto.Charting.ExtendedDouble.IsFinite(kvp.value)},f3:function(kvp){return kvp.key},f4:function(_){return!0},f5:function(colIndex){return colIndex>=0},f6:function(d){return d.SeriesName},f7:function(d){return d},f8:function(d){return System.DateTime.getTicks(d.ArgumentDateTime)},f9:function(d){return System.Convert.toDouble(System.DateTime.getTicks(d.ArgumentDateTime))},f10:function(d){return d.ArgumentNumeric},f11:function(d){return!Bridge.equals(d.ArgumentDateTime,Kusto.Charting.DataChartsHelper.c_defaultArgumentDatetime)},f12:function(d){return!isNaN(d.ArgumentNumeric)},f13:function(d){return Math.abs(d.ValueData)===Number.POSITIVE_INFINITY},f14:function(d){return d.GeoCoordinates!=null&&(d.GeoCoordinates.Longitude>180||d.GeoCoordinates.Longitude<-180||d.GeoCoordinates.Latitude>90||d.GeoCoordinates.Latitude<-90)},f15:function(o){return Kusto.Charting.DataChartsHelper.ParseJsonArrayAsString(Bridge.as(o,System.String))||o},f16:function(a,b){return{Item1:a,Item2:b}},f17:function(c){return c.Item2},f18:function(dt){return Kusto.Cloud.Platform.Utils.ExtendedDateTime.ToUtc(dt)},f19:function(ts){return Kusto.Charting.DataChartsHelper.TimeSpanToDateTime(ts)}});Bridge.define(\"Kusto.Charting.DataChartsHelper.ArgumentData\",{$kind:\"nested class\",fields:{m_requestedType:0,m_colIndex:0,m_colName:null,m_colType:0,m_geospatialIndexes:null},props:{GeospatialArgumentDataType:0,Value:null,DateTime:null,NumericValue:0,GeoCoordinates:null},ctors:{init:function(){this.DateTime=System.DateTime.getDefaultValue()},ctor:function(colIndex,colName,colType,requestedType,geospatialColumnIndexes){geospatialColumnIndexes===void 0&&(geospatialColumnIndexes=null);var $t;this.$initialize();this.m_colIndex=colIndex;this.m_colName=colName;this.m_colType=colType;this.m_requestedType=requestedType;geospatialColumnIndexes!=null&&System.Linq.Enumerable.from(geospatialColumnIndexes,System.Int32).any()?(this.m_geospatialIndexes=($t=System.Int32,System.Linq.Enumerable.from(geospatialColumnIndexes,$t).toList($t)),this.GeospatialArgumentDataType=Kusto.Charting.ArgumentColumnType.Geospatial):this.GeospatialArgumentDataType=Kusto.Charting.ArgumentColumnType.None}},methods:{ResolveArgumentFromRow:function(table,rowIndex){var $t,$t1,$t2,longitudeValue,latitudeValue,geojsonPoint;if(this.m_requestedType!==Kusto.Charting.ArgumentColumnType.Geospatial){this.ResolveArgument(table,rowIndex);return}this.m_geospatialIndexes.Count===2?(longitudeValue=table.Kusto$Charting$IChartingDataSource$GetValue(rowIndex,this.m_geospatialIndexes.getItem(0)),latitudeValue=table.Kusto$Charting$IChartingDataSource$GetValue(rowIndex,this.m_geospatialIndexes.getItem(1)),this.GeoCoordinates=($t=new Kusto.Charting.GeospatialCoordinates,$t.Longitude=Kusto.Charting.DataChartsHelper.TryConvertToDouble(longitudeValue,Kusto.Charting.ArgumentColumnType.Numeric),$t.Latitude=Kusto.Charting.DataChartsHelper.TryConvertToDouble(latitudeValue,Kusto.Charting.ArgumentColumnType.Numeric),$t)):(geojsonPoint={},this.GeoCoordinates=this.m_geospatialIndexes.Count===1&&Kusto.Charting.DataChartsHelper.TrySetGeoJSONPoint(Bridge.toString(table.Kusto$Charting$IChartingDataSource$GetValue(rowIndex,this.m_geospatialIndexes.getItem(0))),geojsonPoint)?($t=new Kusto.Charting.GeospatialCoordinates,$t.Longitude=($t1=geojsonPoint.v.coordinates)[System.Array.index(0,$t1)],$t.Latitude=($t2=geojsonPoint.v.coordinates)[System.Array.index(1,$t2)],$t):($t=new Kusto.Charting.GeospatialCoordinates,$t.Longitude=Kusto.Charting.DataChartsHelper.c_defaultArgumentNumeric,$t.Latitude=Kusto.Charting.DataChartsHelper.c_defaultArgumentNumeric,$t));this.m_colIndex!==-1&&this.ResolveArgument(table,rowIndex,!0)},ResolveArgument:function(table,rowIndex,includeColName){var argumentValue,argumentActualType,value;includeColName===void 0&&(includeColName=!1);argumentValue=table.Kusto$Charting$IChartingDataSource$GetValue(rowIndex,this.m_colIndex);argumentActualType=argumentValue==null?this.m_requestedType:this.m_colType;this.DateTime=Kusto.Charting.DataChartsHelper.GetArgumentDateTime(argumentValue,argumentActualType);value=this.m_colIndex>=0?Bridge.toString(argumentValue):\"\";System.String.isNullOrWhiteSpace(value)&&(value=Kusto.Charting.DataChartsHelper.c_defaultArgumentString);this.Value=includeColName?System.String.format(\"{0}:{1}\",this.m_colName,value):value;this.NumericValue=!System.Enum.hasFlag(argumentActualType,Bridge.box(Kusto.Charting.ArgumentColumnType.Numeric,Kusto.Charting.ArgumentColumnType,System.Enum.toStringFn(Kusto.Charting.ArgumentColumnType)))||Kusto.Charting.DataChartsHelper.IsEmptyValue(argumentValue)?Kusto.Charting.DataChartsHelper.c_defaultArgumentNumeric:Kusto.Charting.DataChartsHelper.TryConvertToDouble(argumentValue,argumentActualType)}}});Bridge.define(\"Kusto.Charting.IChartMetaData\",{$kind:\"interface\"});Bridge.define(\"Kusto.Charting.DataChartsHelper.ColumnDesc\",{$kind:\"nested class\",props:{Name:null,Type:0,Index:0},ctors:{ctor:function(name,type,index){this.$initialize();this.Name=name;this.Type=type;this.Index=index}}});Bridge.define(\"Kusto.Charting.DataChartsHelper.GeoJSON\",{$kind:\"nested enum\",statics:{fields:{Point:0}}});Bridge.define(\"Kusto.Charting.DataChartsHelper.GeoJSONPoint\",{$kind:\"nested class\",props:{type:0,coordinates:null}});Bridge.define(\"Kusto.Charting.DataItem\",{props:{SeriesName:null,ArgumentData:null,ValueData:0,ValueName:null,ArgumentDateTime:null,ArgumentNumeric:0,GeoCoordinates:null,SecondaryAxisYName:null,PrefferredChartKind:0,Properties:null,PropertiesTruncated:{get:function(){if(System.String.isNullOrEmpty(this.Properties))return\"\";var maxLen=150;return this.Properties.length<maxLen?this.Properties:(this.Properties.substr(0,maxLen)||\"\")+\"...\"}}},ctors:{init:function(){this.ArgumentDateTime=System.DateTime.getDefaultValue()},ctor:function(){this.$initialize()},$ctor1:function(other){var $t;this.$initialize();this.SeriesName=other.SeriesName;this.ArgumentData=other.ArgumentData;this.ValueData=other.ValueData;this.ValueName=other.ValueName;this.ArgumentDateTime=other.ArgumentDateTime;this.ArgumentNumeric=other.ArgumentNumeric;this.SecondaryAxisYName=other.SecondaryAxisYName;this.PrefferredChartKind=other.PrefferredChartKind;this.Properties=other.Properties;this.GeoCoordinates=other.GeoCoordinates==null?null:($t=new Kusto.Charting.GeospatialCoordinates,$t.Longitude=other.GeoCoordinates.Longitude,$t.Latitude=other.GeoCoordinates.Latitude,$t)}},methods:{Clone:function(){return new Kusto.Charting.DataItem.$ctor1(this)}}});Bridge.define(\"Kusto.Charting.ExtendedDouble\",{statics:{methods:{IsFinite:function(d){return!(Math.abs(d)===Number.POSITIVE_INFINITY)&&!isNaN(d)}}}});Bridge.define(\"Kusto.Charting.GeospatialCoordinates\",{props:{Longitude:0,Latitude:0}});Bridge.define(\"Kusto.Charting.IChartingDataSource\",{$kind:\"interface\"});Bridge.define(\"Kusto.Charting.IKustoClientContext\",{$kind:\"interface\"});Bridge.define(\"Kusto.Charting.SeriesCreationException\",{inherits:[System.Exception],ctors:{ctor:function(error){this.$initialize();System.Exception.ctor.call(this,error)}}});Bridge.define(\"Kusto.Charting.ValidationStatus\",{$kind:\"enum\",statics:{fields:{Valid:0,PolicyViolationError:1,PolicyViolationWarning:2}}});Bridge.define(\"Kusto.Cloud.Platform.Text.StringLiteral\",{statics:{fields:{MultiLineStringQuote:null,AlternateMultiLineStringQuote:null,categoryForLatin1:null},ctors:{init:function(){this.MultiLineStringQuote=\"```\";this.AlternateMultiLineStringQuote=\"~~~\";this.categoryForLatin1=System.Array.init([14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,11,24,24,24,26,24,24,24,20,21,24,25,24,19,24,24,8,8,8,8,8,8,8,8,8,8,24,24,25,25,25,24,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,24,21,27,18,27,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,20,25,21,25,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,11,24,26,26,26,26,28,28,27,28,1,22,25,19,28,27,28,25,10,10,27,1,28,24,27,10,1,23,10,10,10,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,25,1,1,1,1,1,1,1,1],System.Byte)}},methods:{ParseStringLiteral:function(literal){var _discard1={};return Kusto.Cloud.Platform.Text.StringLiteral.ParseStringLiteral$1(literal,_discard1)},ParseStringLiteral$1:function(literal,isHidden){var result={};if(Kusto.Cloud.Platform.Text.StringLiteral.TryParseStringLiteral$1(literal,result,isHidden))return result.v;throw new System.ArgumentException.$ctor1(System.String.format(\"Malformed string literal: '{0}'\",[literal]));},TryParseStringLiteral:function(str,literal){var _discard2={};return Kusto.Cloud.Platform.Text.StringLiteral.TryParseStringLiteral$1(str,literal,_discard2)},TryParseStringLiteral$1:function(str,literal,isHidden){var multiLineLiteral,ret,ret1;if(literal.v=str,isHidden.v=!1,System.String.isNullOrWhiteSpace(literal.v))return!1;if((literal.v.charCodeAt(0)===104||literal.v.charCodeAt(0)===72)&&(isHidden.v=!0,literal.v=literal.v.substr(1)),multiLineLiteral={},Kusto.Cloud.Platform.Text.StringLiteral.TryParseMultiLineStringLiteral(literal.v,multiLineLiteral))return literal.v=multiLineLiteral.v,!0;if(System.String.startsWith(literal.v,'\"',4)){if(literal.v.length>=2&&System.String.endsWith(literal.v,'\"'))return(literal.v=literal.v.substr(1,literal.v.length-2|0),!Kusto.Cloud.Platform.Utils.ExtendedRegex.TryUnescape(literal.v,literal))?!1:!0}else if(System.String.startsWith(literal.v,\"'\",4)){if(literal.v.length>=2&&System.String.endsWith(literal.v,\"'\",4))return(literal.v=literal.v.substr(1,literal.v.length-2|0),!Kusto.Cloud.Platform.Utils.ExtendedRegex.TryUnescape(literal.v,literal))?!1:!0}else if(System.String.startsWith(literal.v,'@\"',4)){if(literal.v.length>=3&&System.String.endsWith(literal.v,'\"',4))return ret=literal.v.substr(2,literal.v.length-3|0),literal.v=System.String.replaceAll(ret,'\"\"','\"'),!0}else if(System.String.startsWith(literal.v,\"@'\",4)&&literal.v.length>=3&&System.String.endsWith(literal.v,\"'\",4))return ret1=literal.v.substr(2,literal.v.length-3|0),literal.v=System.String.replaceAll(ret1,\"''\",\"'\"),!0;return!1},Equals:function(str1,str2){return str1==null&&str2==null?!0:str1==null||str2==null?!1:System.String.equals(str1,str2,4)},TrimSingleQuotes:function(name){return System.String.isNullOrWhiteSpace(name)?name:(System.String.startsWith(name,\"'\",4)&&System.String.endsWith(name,\"'\",4)&&name.length>=2&&(name=name.substr(1,name.length-2|0)),name)},TrimBrackets:function(input){return System.String.startsWith(input,\"[\",4)&&System.String.endsWith(input,\"]\",4)&&input.length>=2&&(input=input.substr(1,input.length-2|0)),input},InitArray:function(T,arr,value){if(arr!=null)for(var i=0;i<arr.length;i=i+1|0)arr[System.Array.index(i,arr)]=value},GetLiteral:function(value){return Kusto.Cloud.Platform.Text.StringLiteral.GetLiteral$1(value,!1)},GetLiteral$1:function(value,hidden){var $t,literal,c;if(value==null)return null;literal=new System.Text.StringBuilder;hidden&&literal.append(\"h\");literal.append('\"');$t=Bridge.getEnumerator(value);try{while($t.moveNext()){c=$t.Current;switch(c){case 39:literal.append(\"\\\\'\");break;case 34:literal.append('\\\\\"');break;case 92:literal.append(\"\\\\\\\\\");break;case 0:literal.append(\"\\\\0\");break;case 7:literal.append(\"\\\\a\");break;case 8:literal.append(\"\\\\b\");break;case 12:literal.append(\"\\\\f\");break;case 10:literal.append(\"\\\\n\");break;case 13:literal.append(\"\\\\r\");break;case 9:literal.append(\"\\\\t\");break;case 11:literal.append(\"\\\\v\");break;default:Kusto.Cloud.Platform.Text.StringLiteral.ShouldBeEscaped(c)?(literal.append(\"\\\\u\"),literal.append(System.UInt16.format(c,\"x4\"))):literal.append(String.fromCharCode(c));break}}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return literal.append('\"'),literal.toString()},GetLiteralAsHiddenString:function(value){return Kusto.Cloud.Platform.Text.StringLiteral.GetLiteral$1(value,!0)},TryParseMultiLineStringLiteral:function(str,literal){return Kusto.Cloud.Platform.Text.StringLiteral.TryParseSimpleStringLiteral(str,Kusto.Cloud.Platform.Text.StringLiteral.MultiLineStringQuote,literal)||Kusto.Cloud.Platform.Text.StringLiteral.TryParseSimpleStringLiteral(str,Kusto.Cloud.Platform.Text.StringLiteral.AlternateMultiLineStringQuote,literal)},TryParseSimpleStringLiteral:function(str,quote,literal){if(System.String.startsWith(str,quote,4)){var twiceQuoteLen=quote.length<<1;return str.length>=twiceQuoteLen&&System.String.endsWith(str,quote,4)?(literal.v=str.substr(quote.length,str.length-twiceQuoteLen|0),!0):(literal.v=str.substr(quote.length),!0)}return literal.v=null,!1},ShouldBeEscaped:function(c){return Kusto.Cloud.Platform.Text.StringLiteral.IsLatin1(c)?Kusto.Cloud.Platform.Text.StringLiteral.GetLatin1UnicodeCategory(c)===14:!0},GetLatin1UnicodeCategory:function(ch){return Kusto.Cloud.Platform.Text.StringLiteral.categoryForLatin1[System.Array.index(ch,Kusto.Cloud.Platform.Text.StringLiteral.categoryForLatin1)]},IsLatin1:function(ch){return ch<=255},IsAscii:function(ch){return ch<=127}}}});Bridge.define(\"Kusto.Cloud.Platform.Utils.BitTwiddling\",{statics:{methods:{CountBits:function(n){for(var ret=0;n!==0;)n=n&(n-1|0),ret=ret+1|0;return ret},CountBits$1:function(n){for(var ret=0;n.ne(System.Int64(0));)n=n.and(n.sub(System.Int64(1))),ret=ret+1|0;return ret}}}});Bridge.define(\"Kusto.Cloud.Platform.Utils.ChopOptions\",{$kind:\"enum\",statics:{fields:{ChopFromBeginning:1,ChopFromEnd:2,ChopFromMiddle:4,ThreeDotsCharacterNotSupported:8}}});Bridge.define(\"Kusto.Cloud.Platform.Utils.CountConstants\",{statics:{fields:{_1K:0,_64K:0,_1M:0},ctors:{init:function(){this._1K=1e3;this._64K=64e3;this._1M=1e6}}}});Bridge.define(\"Kusto.Cloud.Platform.Utils.DateTimeRange\",{inherits:function(){return[System.IEquatable$1(Kusto.Cloud.Platform.Utils.DateTimeRange)]},$kind:\"struct\",statics:{fields:{All:null},ctors:{init:function(){this.All=new Kusto.Cloud.Platform.Utils.DateTimeRange;this.All=new Kusto.Cloud.Platform.Utils.DateTimeRange.$ctor1(Kusto.Cloud.Platform.Utils.ExtendedDateTime.MinValueUtc,Kusto.Cloud.Platform.Utils.ExtendedDateTime.MaxValueUtc)}},methods:{Aggregate:function(a,b){return new Kusto.Cloud.Platform.Utils.DateTimeRange.$ctor1(System.DateTime.gt(a.Begin,b.Begin)?b.Begin:a.Begin,System.DateTime.gt(a.End,b.End)?a.End:b.End)},Merge:function(ranges){var $t,count=Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastCountUpTo(Kusto.Cloud.Platform.Utils.DateTimeRange,ranges,System.Int64(2)),range;if(count.equals(System.Int64(0)))return new(System.Collections.Generic.HashSet$1(Kusto.Cloud.Platform.Utils.DateTimeRange).ctor);else if(count.equals(System.Int64(1)))return new(System.Collections.Generic.HashSet$1(Kusto.Cloud.Platform.Utils.DateTimeRange).$ctor1)(ranges);var result=new(System.Collections.Generic.HashSet$1(Kusto.Cloud.Platform.Utils.DateTimeRange).ctor),orderedRanges=System.Linq.Enumerable.from(ranges,Kusto.Cloud.Platform.Utils.DateTimeRange).orderBy($asm.$.Kusto.Cloud.Platform.Utils.DateTimeRange.f1),firstItem=!0,begin=null,end=null;$t=Bridge.getEnumerator(orderedRanges);try{while($t.moveNext())range=$t.Current,firstItem&&(begin=range.Begin,end=range.End,firstItem=!1),System.DateTime.lte(range.Begin,end)?System.DateTime.lt(end,range.End)&&(end=range.End):(result.add(new Kusto.Cloud.Platform.Utils.DateTimeRange.$ctor1(System.Nullable.getValue(begin),System.Nullable.getValue(end))),begin=range.Begin,end=range.End)}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return result.add(new Kusto.Cloud.Platform.Utils.DateTimeRange.$ctor1(System.Nullable.getValue(begin),System.Nullable.getValue(end))),result},Intersect:function(rangeGroupA,rangeGroupB){var $t,$t1,intersectedTimeRanges,rangeFromA;if(Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(Kusto.Cloud.Platform.Utils.DateTimeRange,rangeGroupA)||Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(Kusto.Cloud.Platform.Utils.DateTimeRange,rangeGroupB))return new(System.Collections.Generic.HashSet$1(Kusto.Cloud.Platform.Utils.DateTimeRange).ctor);intersectedTimeRanges=new(System.Collections.Generic.HashSet$1(Kusto.Cloud.Platform.Utils.DateTimeRange).ctor);$t=Bridge.getEnumerator(rangeGroupA,Kusto.Cloud.Platform.Utils.DateTimeRange);try{while($t.moveNext()){rangeFromA=$t.Current;$t1=Bridge.getEnumerator(rangeGroupB,Kusto.Cloud.Platform.Utils.DateTimeRange);try{while($t1.moveNext()){var rangeFromB=$t1.Current,intersectedStart=System.DateTime.create$2(System.Int64.max(System.DateTime.getTicks(rangeFromA.Begin),System.DateTime.getTicks(rangeFromB.Begin)),1),intersectedEnd=System.DateTime.create$2(System.Int64.min(System.DateTime.getTicks(rangeFromA.End),System.DateTime.getTicks(rangeFromB.End)),1);System.DateTime.lte(intersectedStart,intersectedEnd)&&intersectedTimeRanges.add(new Kusto.Cloud.Platform.Utils.DateTimeRange.$ctor1(intersectedStart,intersectedEnd))}}finally{Bridge.is($t1,System.IDisposable)&&$t1.System$IDisposable$Dispose()}}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return intersectedTimeRanges},getDefaultValue:function(){return new Kusto.Cloud.Platform.Utils.DateTimeRange}}},fields:{m_begin:null,m_end:null},props:{Begin:{get:function(){return this.m_begin}},End:{get:function(){return this.m_end}},Span:{get:function(){return System.DateTime.subdd(this.End,this.Begin)}},IsOpenRange:{get:function(){return Bridge.equalsT(this.Begin,Kusto.Cloud.Platform.Utils.ExtendedDateTime.MinValueUtc)||Bridge.equalsT(this.End,Kusto.Cloud.Platform.Utils.ExtendedDateTime.MaxValueUtc)}}},alias:[\"equalsT\",\"System$IEquatable$1$Kusto$Cloud$Platform$Utils$DateTimeRange$equalsT\"],ctors:{init:function(){this.m_begin=System.DateTime.getDefaultValue();this.m_end=System.DateTime.getDefaultValue()},$ctor1:function(begin,end){this.$initialize();this.m_begin=begin;this.m_end=end;throw new System.ArgumentException.$ctor1(\"DateTimeRange construction: End parameter should be later than Begin parameter\");},ctor:function(){this.$initialize()}},methods:{IsInRangeInclusive:function(value){return System.DateTime.lte(this.Begin,value)&&System.DateTime.lte(value,this.End)},IsInRangeExclusive:function(value){return System.DateTime.lt(this.Begin,value)&&System.DateTime.lt(value,this.End)},equalsT:function(other){return Bridge.equalsT(this.Begin,other.Begin)&&Bridge.equalsT(this.End,other.End)},equals:function(other){return other==null?!1:Bridge.is(other,Kusto.Cloud.Platform.Utils.DateTimeRange)?this.equalsT(System.Nullable.getValue(Bridge.cast(Bridge.unbox(other,Kusto.Cloud.Platform.Utils.DateTimeRange),Kusto.Cloud.Platform.Utils.DateTimeRange))):!1},getHashCode:function(){return Bridge.getHashCode(this.Begin)^Bridge.getHashCode(this.End)},toString:function(){return System.String.formatProvider(System.Globalization.CultureInfo.invariantCulture,\"[Begin={0}, End={1}]\",System.DateTime.format(this.Begin,\"R\"),System.DateTime.format(this.End,\"R\"))},$clone:function(to){var s=to||new Kusto.Cloud.Platform.Utils.DateTimeRange;return s.m_begin=this.m_begin,s.m_end=this.m_end,s}}});Bridge.ns(\"Kusto.Cloud.Platform.Utils.DateTimeRange\",$asm.$);Bridge.apply($asm.$.Kusto.Cloud.Platform.Utils.DateTimeRange,{f1:function(r){return r.Begin}});Bridge.define(\"Kusto.Cloud.Platform.Utils.ExtendedDateTime\",{statics:{fields:{MaxUnixTimeMilliseconds:System.Int64(0),MinUnixTimeMilliseconds:System.Int64(0),MaxUnixTimeMicroseconds:System.Int64(0),MinUnixTimeMicroseconds:System.Int64(0),MicrosecondsPerMillisecond:System.Int64(0),TicksPerMillisecond:System.Int64(0),TicksPerSecond:System.Int64(0),TicksPerMinute:System.Int64(0),TicksPerHour:System.Int64(0),TicksPerDay:System.Int64(0),MillisPerSecond:0,MillisPerMinute:0,MillisPerHour:0,MillisPerDay:0,DaysPerYear:0,DaysPer4Years:0,DaysPer100Years:0,DaysPer400Years:0,DaysTo1601:0,DaysTo1899:0,DaysTo1970:0,DaysTo10000:0,MinTicks:System.Int64(0),MaxTicks:System.Int64(0),MaxMillis:System.Int64(0),FileTimeOffset:System.Int64(0),DoubleDateOffset:System.Int64(0),OADateMinAsTicks:System.Int64(0),OADateMinAsDouble:0,OADateMaxAsDouble:0,DatePartYear:0,DatePartDayOfYear:0,DatePartMonth:0,DatePartDay:0,MinValueUtc:null,MaxValueUtc:null,SupportedNonStandardFormats:null,EpochStart:null,s_simulating:!1,s_numCharactersInIso8601:0,ts_lastUtcNow:null,ts_lastUtcNowAsString:null,DaysToMonth365:null,DaysToMonth366:null},events:{OnStopSimulatingTime:null},props:{IsSimulatingTime:{get:function(){return Kusto.Cloud.Platform.Utils.ExtendedDateTime.s_simulating}},UtcNow:{get:function(){return System.DateTime.getUtcNow()}}},ctors:{init:function(){this.MinValueUtc=System.DateTime.getDefaultValue();this.MaxValueUtc=System.DateTime.getDefaultValue();this.EpochStart=System.DateTime.getDefaultValue();this.ts_lastUtcNow=System.DateTime.getDefaultValue();this.MaxUnixTimeMilliseconds=System.Int64([-769664001,58999]);this.MinUnixTimeMilliseconds=System.Int64([-304928768,-14468]);this.MaxUnixTimeMicroseconds=System.Int64([-864855016,58999820]);this.MinUnixTimeMicroseconds=System.Int64([13910016,-14467071]);this.MicrosecondsPerMillisecond=System.Int64(1e3);this.TicksPerMillisecond=System.Int64(1e4);this.TicksPerSecond=System.Int64(1e7);this.TicksPerMinute=System.Int64(6e8);this.TicksPerHour=System.Int64([1640261632,8]);this.TicksPerDay=System.Int64([711573504,201]);this.MillisPerSecond=1e3;this.MillisPerMinute=6e4;this.MillisPerHour=36e5;this.MillisPerDay=864e5;this.DaysPerYear=365;this.DaysPer4Years=1461;this.DaysPer100Years=36524;this.DaysPer400Years=146097;this.DaysTo1601=584388;this.DaysTo1899=693593;this.DaysTo1970=719162;this.DaysTo10000=3652059;this.MinTicks=System.Int64(0);this.MaxTicks=System.Int64([-197705729,734668917]);this.MaxMillis=System.Int64([-464735232,73466]);this.FileTimeOffset=System.Int64([578224128,117558807]);this.DoubleDateOffset=System.Int64([-880558080,139527104]);this.OADateMinAsTicks=System.Int64([-1362739200,7273949]);this.OADateMinAsDouble=-657435;this.OADateMaxAsDouble=2958466;this.DatePartYear=0;this.DatePartDayOfYear=1;this.DatePartMonth=2;this.DatePartDay=3;this.MinValueUtc=System.DateTime.create$2(System.DateTime.getTicks(System.DateTime.getMinValue()),1);this.MaxValueUtc=System.DateTime.create$2(System.DateTime.getTicks(System.DateTime.getMaxValue()),1);this.SupportedNonStandardFormats=$asm.$.Kusto.Cloud.Platform.Utils.ExtendedDateTime.f1(new(System.Collections.Generic.Dictionary$2(System.Int32,System.Array.type(System.String)).ctor));this.EpochStart=System.DateTime.create(1970,1,1,0,0,0,0,1);this.s_numCharactersInIso8601=System.DateTime.format(Kusto.Cloud.Platform.Utils.ExtendedDateTime.MinValueUtc,\"O\").length;this.ts_lastUtcNow=Kusto.Cloud.Platform.Utils.ExtendedDateTime.MinValueUtc;this.ts_lastUtcNowAsString=System.DateTime.format(Kusto.Cloud.Platform.Utils.ExtendedDateTime.ts_lastUtcNow,\"O\");this.DaysToMonth365=System.Array.init([0,31,59,90,120,151,181,212,243,273,304,334,365],System.Int32);this.DaysToMonth366=System.Array.init([0,31,60,91,121,152,182,213,244,274,305,335,366],System.Int32)}},methods:{StopSimulatingTime:function(){Kusto.Cloud.Platform.Utils.ExtendedDateTime.s_simulating=!1;Bridge.staticEquals(Kusto.Cloud.Platform.Utils.ExtendedDateTime.OnStopSimulatingTime,null)||Kusto.Cloud.Platform.Utils.ExtendedDateTime.OnStopSimulatingTime()},ToUtcString:function(value){return Kusto.Cloud.Platform.Utils.ExtendedDateTime.ToUtcString$1(value,System.Globalization.CultureInfo.invariantCulture)},ToUtcString$1:function(value,culture){var inputTime=value,utcTime=inputTime;return System.DateTime.getKind(inputTime)===0?utcTime=System.DateTime.create$2(System.DateTime.getTicks(value),1):System.DateTime.getKind(inputTime)===2&&(utcTime=System.DateTime.toUniversalTime(inputTime)),System.String.formatProvider(culture,\"{0:yyyy-MM-dd HH:mm:ss.fffffff}\",[Bridge.box(utcTime,System.DateTime,System.DateTime.format)])},Max:function(t1,t2){return System.DateTime.gt(t1,t2)?t1:t2},Max$1:function(t1,t2){return Bridge.equals(t2,null)?t1:Bridge.equals(t1,null)?t2:Kusto.Cloud.Platform.Utils.ExtendedDateTime.Max(System.Nullable.getValue(t1),System.Nullable.getValue(t2))},Min:function(t1,t2){return System.DateTime.lt(t1,t2)?t1:t2},Min$1:function(t1,t2){return Bridge.equals(t2,null)?t1:Bridge.equals(t1,null)?t2:Kusto.Cloud.Platform.Utils.ExtendedDateTime.Min(System.Nullable.getValue(t1),System.Nullable.getValue(t2))},RangesIntersect:function(firstStart,firstEnd,secondStart,secondEnd){return System.DateTime.gte(firstStart,secondStart)&&System.DateTime.lte(firstStart,secondEnd)||System.DateTime.gte(firstEnd,secondStart)&&System.DateTime.lte(firstEnd,secondEnd)||System.DateTime.gte(secondStart,firstStart)&&System.DateTime.lte(secondStart,firstEnd)||System.DateTime.gte(secondEnd,firstStart)&&System.DateTime.lte(secondEnd,firstEnd)},SafeAdd:function(datetime,value){var highBound=System.DateTime.subdd(System.DateTime.getMaxValue(),datetime),lowBound=System.DateTime.subdd(datetime,System.DateTime.getMinValue()).negate();return System.TimeSpan.lte(lowBound,value)&&System.TimeSpan.lte(value,highBound)?System.DateTime.add(datetime,value):System.TimeSpan.gt(value,highBound)?System.DateTime.getMaxValue():System.DateTime.getMinValue()},SafeSubtract:function(datetime,value){return System.TimeSpan.eq(value,System.TimeSpan.minValue)?System.DateTime.getMaxValue():Kusto.Cloud.Platform.Utils.ExtendedDateTime.SafeAdd(datetime,value.negate())},ToUnixTimeSpan:function(date){return System.DateTime.subdd(System.DateTime.toUniversalTime(date),Kusto.Cloud.Platform.Utils.ExtendedDateTime.EpochStart)},FromTimeSpan:function(timeSpan){return System.DateTime.create$2(timeSpan.getTicks())},ToZonalTimeDisplayString:function(dateTime){return System.DateTime.format(dateTime,\"yyyy-MM-dd HH:mm:ss zzz\")},ToUtc:function(value){switch(System.DateTime.getKind(value)){case 1:return value;case 0:return System.DateTime.create$2(System.DateTime.getTicks(value),1);case 2:return System.DateTime.toUniversalTime(value);default:throw new System.ArgumentException.$ctor1(System.String.format(\"DateTimeKind: {0} is not supported\",[Bridge.box(System.DateTime.getKind(value),System.DateTimeKind,System.Enum.toStringFn(System.DateTimeKind))]));}},FastAppendFormattedInt7:function(sb,value){var g=System.Int64.clipu16(System.Int64(48).add(value.mod(System.Int64(10)))),f,e,d,c,b,a;value=value.div(System.Int64(10));f=System.Int64.clipu16(System.Int64(48).add(value.mod(System.Int64(10))));value=value.div(System.Int64(10));e=System.Int64.clipu16(System.Int64(48).add(value.mod(System.Int64(10))));value=value.div(System.Int64(10));d=System.Int64.clipu16(System.Int64(48).add(value.mod(System.Int64(10))));value=value.div(System.Int64(10));c=System.Int64.clipu16(System.Int64(48).add(value.mod(System.Int64(10))));value=value.div(System.Int64(10));b=System.Int64.clipu16(System.Int64(48).add(value.mod(System.Int64(10))));value=value.div(System.Int64(10));a=System.Int64.clipu16(System.Int64(48).add(value.mod(System.Int64(10))));sb.append(String.fromCharCode(a));sb.append(String.fromCharCode(b));sb.append(String.fromCharCode(c));sb.append(String.fromCharCode(d));sb.append(String.fromCharCode(e));sb.append(String.fromCharCode(f));sb.append(String.fromCharCode(g))},FastAppendFormattedInt4:function(sb,value){var d=(48+value%10|0)&65535,c,b,a;value=Bridge.Int.div(value,10)|0;c=(48+value%10|0)&65535;value=Bridge.Int.div(value,10)|0;b=(48+value%10|0)&65535;value=Bridge.Int.div(value,10)|0;a=(48+value%10|0)&65535;sb.append(String.fromCharCode(a));sb.append(String.fromCharCode(b));sb.append(String.fromCharCode(c));sb.append(String.fromCharCode(d))},FastAppendFormattedInt2:function(sb,value){var b=(48+value%10|0)&65535,a;value=Bridge.Int.div(value,10)|0;a=(48+value%10|0)&65535;sb.append(String.fromCharCode(a));sb.append(String.fromCharCode(b))},FastGetParts:function(value,year,month,day,hour,minute,second,fraction){var ticks=System.DateTime.getTicks(value),n=System.Int64.clip32(ticks.div(Kusto.Cloud.Platform.Utils.ExtendedDateTime.TicksPerDay)),y400=Bridge.Int.div(n,Kusto.Cloud.Platform.Utils.ExtendedDateTime.DaysPer400Years)|0,y100,y4,y1;n=n-Bridge.Int.mul(y400,Kusto.Cloud.Platform.Utils.ExtendedDateTime.DaysPer400Years)|0;y100=Bridge.Int.div(n,Kusto.Cloud.Platform.Utils.ExtendedDateTime.DaysPer100Years)|0;y100===4&&(y100=3);n=n-Bridge.Int.mul(y100,Kusto.Cloud.Platform.Utils.ExtendedDateTime.DaysPer100Years)|0;y4=Bridge.Int.div(n,Kusto.Cloud.Platform.Utils.ExtendedDateTime.DaysPer4Years)|0;n=n-Bridge.Int.mul(y4,Kusto.Cloud.Platform.Utils.ExtendedDateTime.DaysPer4Years)|0;y1=Bridge.Int.div(n,Kusto.Cloud.Platform.Utils.ExtendedDateTime.DaysPerYear)|0;y1===4&&(y1=3);year.v=(((Bridge.Int.mul(y400,400)+Bridge.Int.mul(y100,100)|0)+Bridge.Int.mul(y4,4)|0)+y1|0)+1|0;n=n-Bridge.Int.mul(y1,Kusto.Cloud.Platform.Utils.ExtendedDateTime.DaysPerYear)|0;for(var leapYear=y1===3&&(y4!==24||y100===3),days=leapYear?Kusto.Cloud.Platform.Utils.ExtendedDateTime.DaysToMonth366:Kusto.Cloud.Platform.Utils.ExtendedDateTime.DaysToMonth365,m=n>>6;n>=days[System.Array.index(m,days)];)m=m+1|0;month.v=m;day.v=(n-days[System.Array.index(m-1|0,days)]|0)+1|0;hour.v=System.DateTime.getHour(value);minute.v=System.DateTime.getMinute(value);second.v=System.DateTime.getSecond(value);fraction.v=ticks.mod(Kusto.Cloud.Platform.Utils.ExtendedDateTime.TicksPerSecond)},FromUnixTimeSeconds$1:function(seconds){return System.DateTimeOffset.FromUnixTimeSeconds(seconds).UtcDateTime},FromUnixTimeSeconds:function(seconds){var secondsLong=Bridge.Int.clip64(seconds),additionTicks=Bridge.Int.clip64((seconds-System.Int64.toNumber(secondsLong))*Kusto.Cloud.Platform.Utils.ExtendedDateTime.TicksPerSecond);return System.DateTimeOffset.FromUnixTimeSeconds(secondsLong).AddTicks(additionTicks).UtcDateTime},FromUnixTimeMilliseconds$1:function(milliseconds){return System.DateTimeOffset.FromUnixTimeMilliseconds(milliseconds).UtcDateTime},FromUnixTimeMilliseconds:function(milliseconds){var millisecondsLong=Bridge.Int.clip64(milliseconds),additionTicks=Bridge.Int.clip64((milliseconds-System.Int64.toNumber(millisecondsLong))*Kusto.Cloud.Platform.Utils.ExtendedDateTime.TicksPerMillisecond);return System.DateTimeOffset.FromUnixTimeMilliseconds(millisecondsLong).AddTicks(additionTicks).UtcDateTime},FromUnixTimeMicroseconds$1:function(microseconds){var TicksPerMicrosecond=System.Int64(10),MicrosecondsPerMillisecond=System.Int64(1e3),milliseconds=microseconds.div(MicrosecondsPerMillisecond),additionTicks=microseconds.sub(milliseconds.mul(MicrosecondsPerMillisecond)).mul(TicksPerMicrosecond);return System.DateTimeOffset.FromUnixTimeMilliseconds(milliseconds).AddTicks(additionTicks).UtcDateTime},FromUnixTimeMicroseconds:function(microseconds){var TicksPerMicrosecond=System.Int64(10),MicrosecondsPerMillisecond=System.Int64(1e3),milliseconds=Bridge.Int.clip64(microseconds/MicrosecondsPerMillisecond),additionTicks=Bridge.Int.clip64((microseconds-System.Int64.toNumber(milliseconds.mul(MicrosecondsPerMillisecond)))*TicksPerMicrosecond);return System.DateTimeOffset.FromUnixTimeMilliseconds(milliseconds).AddTicks(additionTicks).UtcDateTime},FromUnixTimeNanoseconds:function(nanoseconds){var NanosecondsPerTick=System.Int64(100),NanosecondsPerMillisecond=System.Int64(1e6),milliseconds=nanoseconds.div(NanosecondsPerMillisecond),additionTicks=nanoseconds.sub(milliseconds.mul(NanosecondsPerMillisecond)).div(NanosecondsPerTick);return System.DateTimeOffset.FromUnixTimeMilliseconds(milliseconds).AddTicks(additionTicks).UtcDateTime}}}});Bridge.ns(\"Kusto.Cloud.Platform.Utils.ExtendedDateTime\",$asm.$);Bridge.apply($asm.$.Kusto.Cloud.Platform.Utils.ExtendedDateTime,{f1:function(_o1){return _o1.add(4,System.Array.init([\"yyyy\"],System.String)),_o1.add(6,System.Array.init([\"yyyyMM\"],System.String)),_o1.add(8,System.Array.init([\"yyyyMMdd\"],System.String)),_o1.add(10,System.Array.init([\"yyyyMMddHH\"],System.String)),_o1.add(12,System.Array.init([\"yyyyMMddHHmm\"],System.String)),_o1.add(14,System.Array.init([\"yyyyMMddHHmmss\"],System.String)),_o1.add(17,System.Array.init([\"yyyyMMdd HH:mm:ss\"],System.String)),_o1.add(19,System.Array.init([\"yyyyMMdd HH:mm:ss.f\"],System.String)),_o1.add(20,System.Array.init([\"yyyyMMdd HH:mm:ss.ff\"],System.String)),_o1.add(21,System.Array.init([\"yyyyMMdd HH:mm:ss.fff\"],System.String)),_o1.add(22,System.Array.init([\"yyyyMMdd HH:mm:ss.ffff\"],System.String)),_o1.add(23,System.Array.init([\"yyyyMMdd HH:mm:ss.fffff\"],System.String)),_o1.add(24,System.Array.init([\"yyyyMMdd HH:mm:ss.ffffff\"],System.String)),_o1.add(25,System.Array.init([\"yyyyMMdd HH:mm:ss.fffffff\"],System.String)),_o1}});Bridge.define(\"Kusto.Cloud.Platform.Utils.ExtendedDateTime.RoundTo\",{$kind:\"nested enum\",statics:{fields:{Second:0,Minute:1,Hour:2,Day:3}}});Bridge.define(\"Kusto.Cloud.Platform.Utils.ExtendedEnumerable\",{statics:{methods:{LongCount:function(TSource,source,maxCount){if(maxCount.equals(System.Int64.MaxValue))return System.Linq.Enumerable.from(source,TSource).count();if(source==null)throw new System.ArgumentNullException.$ctor1(\"source\");if(maxCount.lt(System.Int64(0)))throw new System.ArgumentOutOfRangeException.$ctor1(\"maxCount\");var count=System.Int64(0),e=Bridge.getEnumerator(source,TSource);try{while(e.System$Collections$IEnumerator$moveNext())if(count=count.inc(1),count.equals(maxCount))break}finally{Bridge.hasValue(e)&&e.System$IDisposable$Dispose()}return count},SafeFastDistinct:function(T,collection){var asICollectionT,asICollection;return collection==null?null:(asICollectionT=Bridge.as(collection,System.Collections.Generic.ICollection$1(T)))!=null&&System.Array.getCount(asICollectionT,T)<=1?collection:(asICollection=Bridge.as(collection,System.Collections.ICollection))!=null&&System.Array.getCount(asICollection)<=1?collection:System.Linq.Enumerable.from(collection,T).distinct()},SafeFastCountUpTo:function(T,collection,maxCount){var asICollectionT,asICollection;if(maxCount.lt(System.Int64(0)))throw new System.ArgumentOutOfRangeException.$ctor1(\"maxCount\");return collection==null?System.Int64(0):(asICollectionT=Bridge.as(collection,System.Collections.Generic.ICollection$1(T)))!=null?System.Int64.min(maxCount,System.Int64(System.Array.getCount(asICollectionT,T))):(asICollection=Bridge.as(collection,System.Collections.ICollection))!=null?System.Int64.min(maxCount,System.Int64(System.Array.getCount(asICollection))):Kusto.Cloud.Platform.Utils.ExtendedEnumerable.LongCount(T,collection,maxCount)},SafeSequenceEquals:function(T,collection,other,equalityComparer){equalityComparer===void 0&&(equalityComparer=null);var basicComparison=Kusto.Cloud.Platform.Utils.ExtendedEnumerable.BasicCompare(T,collection,other);return System.Nullable.hasValue(basicComparison)?System.Nullable.getValue(basicComparison):System.Linq.Enumerable.from(System.Linq.Enumerable.from(collection,T).orderBy($asm.$.Kusto.Cloud.Platform.Utils.ExtendedEnumerable.f1),T).sequenceEqual(System.Linq.Enumerable.from(other,T).orderBy($asm.$.Kusto.Cloud.Platform.Utils.ExtendedEnumerable.f2),equalityComparer)},SortedSequenceEquals:function(T,sortedCollection1,sortedCollection2,equalityComparer){var $t,basicComparison;return(equalityComparer===void 0&&(equalityComparer=null),basicComparison=Kusto.Cloud.Platform.Utils.ExtendedEnumerable.BasicCompare(T,sortedCollection1,sortedCollection2),System.Nullable.hasValue(basicComparison))?System.Nullable.getValue(basicComparison):Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SequenceEqual(T,sortedCollection1,sortedCollection2,Bridge.fn.cacheBind($t=equalityComparer||System.Collections.Generic.EqualityComparer$1(T).def,$t)[Bridge.geti($t,\"System$Collections$Generic$IEqualityComparer$1$\"+Bridge.getTypeAlias(T)+\"$equals2\",\"System$Collections$Generic$IEqualityComparer$1$equals2\")])},SequenceEqual:function(T,collection,other,predicate){var basicComparison=Kusto.Cloud.Platform.Utils.ExtendedEnumerable.BasicCompare(T,collection,other),enumerator1,enumerator2;if(System.Nullable.hasValue(basicComparison))return System.Nullable.getValue(basicComparison);enumerator1=Bridge.getEnumerator(collection,T);try{enumerator2=Bridge.getEnumerator(other,T);try{while(enumerator1.System$Collections$IEnumerator$moveNext())if(!enumerator2.System$Collections$IEnumerator$moveNext()||!predicate(enumerator1[Bridge.geti(enumerator1,\"System$Collections$Generic$IEnumerator$1$\"+Bridge.getTypeAlias(T)+\"$Current$1\",\"System$Collections$Generic$IEnumerator$1$Current$1\")],enumerator2[Bridge.geti(enumerator2,\"System$Collections$Generic$IEnumerator$1$\"+Bridge.getTypeAlias(T)+\"$Current$1\",\"System$Collections$Generic$IEnumerator$1$Current$1\")]))return!1;if(enumerator2.System$Collections$IEnumerator$moveNext())return!1}finally{Bridge.hasValue(enumerator2)&&enumerator2.System$IDisposable$Dispose()}}finally{Bridge.hasValue(enumerator1)&&enumerator1.System$IDisposable$Dispose()}return!0},SafeSetEquals:function(T,that,other){return Bridge.referenceEquals(that,other)?!0:that==null||other==null?!1:new(System.Collections.Generic.HashSet$1(T).$ctor1)(that).setEquals(other)},BasicCompare:function(T,collection,other){if(Bridge.referenceEquals(collection,other))return!0;if(collection==null||other==null)return!1;var length1=Kusto.Cloud.Platform.Utils.ExtendedEnumerable.GetSequenceLength(T,collection),length2=Kusto.Cloud.Platform.Utils.ExtendedEnumerable.GetSequenceLength(T,other);return System.Nullable.hasValue(length1)&&System.Nullable.hasValue(length2)&&System.Nullable.getValue(length1).ne(System.Nullable.getValue(length2))?!1:null},GetSequenceLength:function(T,sequence){var asArrayT,asIReadOnlyCollectionT,asICollectionT,asICollection;return(asArrayT=Bridge.as(sequence,System.Array.type(T)))!=null?System.Int64.lift(asArrayT.length):(asIReadOnlyCollectionT=Bridge.as(sequence,System.Collections.Generic.IReadOnlyCollection$1(T)))!=null?System.Int64.lift(System.Array.getCount(asIReadOnlyCollectionT,T)):(asICollectionT=Bridge.as(sequence,System.Collections.Generic.ICollection$1(T)))!=null?System.Int64.lift(System.Array.getCount(asICollectionT,T)):(asICollection=Bridge.as(sequence,System.Collections.ICollection))!=null?System.Int64.lift(System.Array.getCount(asICollection)):System.Int64.lift(null)},ToDisplayString:function(T,collection,delimiter,maxTake,nullString,estimatedStringSize,elementPrefix,elementPostfix){var $t,$t1,$t2,$t3,toStringRes,toStringRes1;if(delimiter===void 0&&(delimiter=\", \"),maxTake===void 0&&(maxTake=null),nullString===void 0&&(nullString=\"null\"),estimatedStringSize===void 0&&(estimatedStringSize=128),elementPrefix===void 0&&(elementPrefix=\"\"),elementPostfix===void 0&&(elementPostfix=\"\"),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(T,collection)||System.Nullable.lte(maxTake,0))return\"\";delimiter=($t=delimiter,$t!=null?$t:\", \");nullString=($t1=nullString,$t1!=null?$t1:\"null\");var displayStringBuilder=new System.Text.StringBuilder(\"\",estimatedStringSize),itemsPassed=0,enumerator=Bridge.getEnumerator(collection,T);try{for(enumerator.System$Collections$IEnumerator$moveNext()&&(toStringRes=($t2=enumerator[Bridge.geti(enumerator,\"System$Collections$Generic$IEnumerator$1$\"+Bridge.getTypeAlias(T)+\"$Current$1\",\"System$Collections$Generic$IEnumerator$1$Current$1\")])!=null?Bridge.toString($t2):null,displayStringBuilder.append(toStringRes!=null?(elementPrefix||\"\")+(toStringRes||\"\")+(elementPostfix||\"\"):nullString),itemsPassed=itemsPassed+1|0);enumerator.System$Collections$IEnumerator$moveNext()&&!System.Nullable.gte(itemsPassed,maxTake);)displayStringBuilder.append(delimiter),toStringRes1=($t3=enumerator[Bridge.geti(enumerator,\"System$Collections$Generic$IEnumerator$1$\"+Bridge.getTypeAlias(T)+\"$Current$1\",\"System$Collections$Generic$IEnumerator$1$Current$1\")])!=null?Bridge.toString($t3):null,displayStringBuilder.append(toStringRes1!=null?(elementPrefix||\"\")+(toStringRes1||\"\")+(elementPostfix||\"\"):nullString),itemsPassed=itemsPassed+1|0;enumerator.System$Collections$IEnumerator$moveNext()&&(displayStringBuilder=displayStringBuilder.append(delimiter).append(\"... more\"))}finally{Bridge.hasValue(enumerator)&&enumerator.System$IDisposable$Dispose()}return displayStringBuilder.toString()},SafeShallowClone:function(T,collection){return collection==null?null:new(System.Collections.Generic.List$1(T).$ctor1)(collection)},IndexOf:function(TCollection,collection,predicate){var $t,i,item;if(Bridge.staticEquals(predicate,null)||collection==null)return-1;i=0;$t=Bridge.getEnumerator(collection,TCollection);try{while($t.moveNext()){if(item=$t.Current,predicate(item))return i;i=i+1|0}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return-1},SafeConcat:function(T,first,second){return first==null?second:second==null?first:System.Linq.Enumerable.from(first,T).concat(second)},SafeUnion:function(T,first,second){return first==null&&second==null?null:first==null?System.Linq.Enumerable.from(second,T).distinct():second==null?System.Linq.Enumerable.from(first,T).distinct():System.Linq.Enumerable.from(first,T).union(second)},SafeFastNullIfEmpty:function(TCollection,collection){return collection==null||Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone(collection)?null:collection},SafeEmptyIEnumerableIfNull:function(T,collectionEnumerable){return collectionEnumerable||System.Linq.Enumerable.empty()},SafeFastAny$2:function(T,collection){var asICollection,asIReadOnlyCollection;return collection==null?!1:(asICollection=Bridge.as(collection,System.Collections.ICollection))!=null?System.Array.getCount(asICollection)!==0:(asIReadOnlyCollection=Bridge.as(collection,System.Collections.Generic.IReadOnlyCollection$1(T)))!=null?System.Array.getCount(asIReadOnlyCollection,T)!==0:System.Linq.Enumerable.from(collection,T).any()},SafeFastAny$4:function(T,list){return list!=null&&list.Count>0},SafeFastAny$1:function(T,collection){return collection!=null&&System.Array.getCount(collection,T)>0},SafeFastAny:function(collection){var $t,asICollection,e;if(collection==null)return!1;if((asICollection=Bridge.as(collection,System.Collections.ICollection))!=null)return System.Array.getCount(asICollection)!==0;e=Bridge.getEnumerator(collection);$t=Bridge.as(e,System.IDisposable);try{if(e.System$Collections$IEnumerator$moveNext())return!0}finally{Bridge.hasValue($t)&&$t.System$IDisposable$Dispose()}return!1},SafeFastAny$3:function(T,collection,predicate){return Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(T,collection)?System.Linq.Enumerable.from(collection,T).any(predicate):!1},SafeFastNone$2:function(T,collection){return!Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(T,collection)},SafeFastNone$1:function(T,collection){return!Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$1(T,collection)},SafeFastNone:function(collection){return!Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny(collection)},SafeFastNone$3:function(T,collection,predicate){return!Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$3(T,collection,predicate)},None$1:function(T,source,predicate){return!System.Linq.Enumerable.from(source,T).any(predicate)},None:function(T,source){return Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(T,source)},SafeFastContains:function(T,collection,item,comparer){return(comparer===void 0&&(comparer=null),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(T,collection))?!1:System.Linq.Enumerable.from(collection,T).contains(item,comparer)},DistinctBy:function(T,TKey,source,keySelector){return System.Linq.Enumerable.from(source,T).groupBy(keySelector).select($asm.$.Kusto.Cloud.Platform.Utils.ExtendedEnumerable.f3)},Intersect:function(T,collections){var enumerator,result;if(Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(System.Collections.Generic.IEnumerable$1(T),collections))return null;if(enumerator=Bridge.getEnumerator(collections,System.Collections.Generic.IEnumerable$1(T)),enumerator.System$Collections$IEnumerator$moveNext()){for(result=new(System.Collections.Generic.HashSet$1(T).$ctor1)(enumerator[Bridge.geti(enumerator,\"System$Collections$Generic$IEnumerator$1$System$Collections$Generic$IEnumerable$1$\"+Bridge.getTypeAlias(T)+\"$Current$1\",\"System$Collections$Generic$IEnumerator$1$Current$1\")]);enumerator.System$Collections$IEnumerator$moveNext();)result.intersectWith(enumerator[Bridge.geti(enumerator,\"System$Collections$Generic$IEnumerator$1$System$Collections$Generic$IEnumerable$1$\"+Bridge.getTypeAlias(T)+\"$Current$1\",\"System$Collections$Generic$IEnumerator$1$Current$1\")]);return result}return null},SplitBy:function(T,TR,collection,isFirst,transform){var $t,typeOfT,list1,list2;if(transform===void 0&&(transform=null),typeOfT=T,Kusto.Cloud.Platform.Utils.ExtendedEnumerable.IsTupleType(typeOfT)&&Bridge.staticEquals(transform,null)?transform=$asm.$.Kusto.Cloud.Platform.Utils.ExtendedEnumerable.f4:Bridge.referenceEquals(typeOfT,TR)&&Bridge.staticEquals(transform,null)&&(transform=function(t){return Bridge.cast(Bridge.unbox(t,TR),TR)}),Bridge.staticEquals(transform,null))throw new System.NullReferenceException.ctor;list1=new(System.Collections.Generic.List$1(TR).ctor);list2=new(System.Collections.Generic.List$1(TR).ctor);$t=Bridge.getEnumerator(collection,T);try{while($t.moveNext()){var item=$t.Current,itemToAdd=transform(item),first=isFirst(item);switch(first){case null:case undefined:continue;case!0:list1.add(itemToAdd);break;default:list2.add(itemToAdd);break}}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return{Item1:list1,Item2:list2}},IntersectWith:function(T,collection,other){if(Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(T,collection)||Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(T,other))return System.Linq.Enumerable.empty();var result=new(System.Collections.Generic.HashSet$1(T).$ctor1)(collection);return result.intersectWith(other),result},IsTupleType:function(type,checkBaseTypes){if(checkBaseTypes===void 0&&(checkBaseTypes=!1),type==null)throw new System.ArgumentNullException.$ctor1(\"type\");if(Bridge.referenceEquals(type,System.Tuple))return!0;while(type!=null){if(Bridge.Reflection.isGenericType(type)){var genType=Bridge.Reflection.getGenericTypeDefinition(type);if(Bridge.referenceEquals(genType,System.Tuple$1)||Bridge.referenceEquals(genType,System.Tuple$2)||Bridge.referenceEquals(genType,System.Tuple$3)||Bridge.referenceEquals(genType,System.Tuple$4)||Bridge.referenceEquals(genType,System.Tuple$5)||Bridge.referenceEquals(genType,System.Tuple$6)||Bridge.referenceEquals(genType,System.Tuple$7)||Bridge.referenceEquals(genType,System.Tuple$8)||Bridge.referenceEquals(genType,System.Tuple$8))return!0}if(!checkBaseTypes)break;type=Bridge.Reflection.getBaseType(type)}return!1},AddIfNotNullOrWhiteSpace:function(that,value){return System.String.isNullOrWhiteSpace(value)||System.Array.add(that,value,System.String),that}}}});Bridge.ns(\"Kusto.Cloud.Platform.Utils.ExtendedEnumerable\",$asm.$);Bridge.apply($asm.$.Kusto.Cloud.Platform.Utils.ExtendedEnumerable,{f1:function(item){return item},f2:function(items){return items},f3:function(x){return x.first()},f4:function(t){return t.Item1}});Bridge.define(\"Kusto.Cloud.Platform.Utils.ExtendedRegex\",{statics:{methods:{TryUnescape:function(str,result){result.v=\"\";try{return result.v=System.Text.RegularExpressions.Regex.unescape(str),!0}catch($e1){if($e1=System.Exception.create($e1),Bridge.is($e1,System.ArgumentException))return!1;else throw $e1;}},TryTransformWildCardPatternToRegex:function(wildcardPattern){try{var input=System.String.trim(wildcardPattern,[91,93]),regexString=System.String.replaceAll(input,\"*\",\".*\");return new System.Text.RegularExpressions.Regex.ctor(regexString,0)}catch($e1){return $e1=System.Exception.create($e1),null}},IsWildCardPattern:function(wildcardPattern){return System.String.indexOf(wildcardPattern,String.fromCharCode(42))>=0},RegexEquals:function(regex,other){if(Bridge.referenceEquals(regex,other))return!0;var otherAsRegex;return regex==null||other==null||!((otherAsRegex=Bridge.as(other,System.Text.RegularExpressions.Regex))!=null)?!1:Kusto.Cloud.Platform.Utils.ExtendedRegex.RegexEquals$1(regex,otherAsRegex)},RegexEquals$1:function(regex,other){return Bridge.referenceEquals(regex,other)?!0:regex==null||other==null?!1:System.String.equals(Bridge.toString(regex),Bridge.toString(other))&&regex.getOptions()===other.getOptions()&&System.TimeSpan.eq(regex.getMatchTimeout(),other.getMatchTimeout())},RegexEquivalent:function(regex,other){return Bridge.referenceEquals(regex,other)?!0:regex==null||other==null?!1:System.String.equals(Bridge.toString(regex),Bridge.toString(other))&&regex.getOptions()===other.getOptions()},ReplaceAndCountReplacements:function(regex,input,replacement,replacesCount){var count=0,result=regex.replace(input,function(match){return count=count+1|0,replacement});return replacesCount.v=count,result}}}});Bridge.define(\"Kusto.Cloud.Platform.Utils.ExtendedString\",{statics:{fields:{c_postfix:null,c_wrap:null,c_newlineAsStringArray:null,c_nullGuids:null,SafeToString:null,EmptyArray:null,s_alternativeSpaceChars:null,s_alternativeNewlineChars:null,s_alternativeQutoes:null},ctors:{init:function(){this.c_postfix=\"...\";this.c_wrap=\"  \";this.c_newlineAsStringArray=System.Array.init([\"\\n\"],System.String);this.c_nullGuids=System.Array.init([System.Guid.Empty.toString(),\"{\"+(System.Guid.Empty.toString()||\"\")+\"}\"],System.String);this.SafeToString=$asm.$.Kusto.Cloud.Platform.Utils.ExtendedString.f1;this.EmptyArray=System.Array.init(0,null,System.String);this.s_alternativeSpaceChars=$asm.$.Kusto.Cloud.Platform.Utils.ExtendedString.f2(new(System.Collections.Generic.HashSet$1(System.Char).ctor));this.s_alternativeNewlineChars=$asm.$.Kusto.Cloud.Platform.Utils.ExtendedString.f3(new(System.Collections.Generic.HashSet$1(System.Char).ctor));this.s_alternativeQutoes=$asm.$.Kusto.Cloud.Platform.Utils.ExtendedString.f4(new(System.Collections.Generic.HashSet$1(System.Char).ctor))}},methods:{SafeGetHashCode:function(value){return value==null?20080512:Bridge.getHashCode(value)},GuidSafeFastGetHashCode:function(value){return value==null||value.length<26?Kusto.Cloud.Platform.Utils.ExtendedString.SafeGetHashCode(value):(value.charCodeAt(1)^value.charCodeAt(9)<<8|value.charCodeAt(10))^(value.charCodeAt(16)<<16|value.charCodeAt(17))^(value.charCodeAt(24)<<24|value.charCodeAt(25))},SafeToTraceString:function(value){return value==null?\"[null]\":value.length===0?\"[empty]\":value},SafeFormat:function(format,args){var args2,a,arg,arg2,argStr;if(args===void 0&&(args=[]),format==null)return\"[format:null]\";if(args==null||args.length===0)return System.String.format.apply(System.String,[format].concat(args));for(args2=System.Array.init(args.length,null,System.String),a=0;a<args.length;a=a+1|0)arg=args[System.Array.index(a,args)],arg==null?arg2=\"[null]\":(argStr=Bridge.toString(arg),arg2=argStr==null?\"[ToStringNull]\":argStr.length===0?\"[ToStringEmpty]\":System.String.isNullOrWhiteSpace(argStr)?\"[ToStringWhitespace]\":argStr),args2[System.Array.index(a,args2)]=arg2;return System.String.format.apply(System.String,[format].concat(args2))},FormatWithCurrentCulture:function(format,args){return args===void 0&&(args=[]),Kusto.Cloud.Platform.Utils.ExtendedString.FormatWith(format,System.Globalization.CultureInfo.getCurrentCulture(),args)},FormatWithInvariantCulture:function(format,args){return args===void 0&&(args=[]),Kusto.Cloud.Platform.Utils.ExtendedString.FormatWith(format,System.Globalization.CultureInfo.invariantCulture,args)},FormatWith:function(format,formatProvider,args){return args===void 0&&(args=[]),System.String.formatProvider.apply(System.String,[formatProvider,format].concat(args))},ToCamelCase:function(str){return String.fromCharCode(String.fromCharCode(str.charCodeAt(0)).toLowerCase().charCodeAt(0))+(str.substr(1)||\"\")},SafeIsNullGuid:function(value){return System.String.isNullOrWhiteSpace(value)||Bridge.referenceEquals(value,Kusto.Cloud.Platform.Utils.ExtendedString.c_nullGuids[System.Array.index(0,Kusto.Cloud.Platform.Utils.ExtendedString.c_nullGuids)])||Bridge.referenceEquals(value,Kusto.Cloud.Platform.Utils.ExtendedString.c_nullGuids[System.Array.index(1,Kusto.Cloud.Platform.Utils.ExtendedString.c_nullGuids)])},SafeIsValidGuid:function(value){var _discard1={v:new System.Guid};return!Kusto.Cloud.Platform.Utils.ExtendedString.SafeIsNullGuid(value)&&System.Guid.TryParse(value,_discard1)},GetDiff:function(lhs,rhs){var i;if(Bridge.referenceEquals(lhs,rhs)){if(lhs==null)return\"Strings are the same (both null)\";else if(Bridge.referenceEquals(lhs,\"\"))return\"Strings are the same (both empty)\";return\"Strings are the same\"}if(lhs==null)return\"LHS is null, RHS is not\";if(rhs==null)return\"RHS is null, LHS is not\";for(i=0;i<Math.min(lhs.length,rhs.length);i=i+1|0)if(lhs.charCodeAt(i)!==rhs.charCodeAt(i))return Kusto.Cloud.Platform.Utils.ExtendedString.GetDiffFromPosition(lhs,rhs,i);return Kusto.Cloud.Platform.Utils.ExtendedString.GetDiffFromPosition(lhs,rhs,Math.min(lhs.length,rhs.length))},GetDiffFromPosition:function(lhs,rhs,position){var before=20,after=20,start=Math.max(0,position-before|0),count=before+after|0;return\"Strings differ starting from position \"+(Bridge.toString(position)||\"\")+\" \\nLHS=...'\"+(Kusto.Cloud.Platform.Utils.ExtendedString.SafeSubstring(lhs,start,count)||\"\")+\"'...\\nRHS=...'\"+(Kusto.Cloud.Platform.Utils.ExtendedString.SafeSubstring(rhs,start,count)||\"\")+\"'...\\n\"+(System.String.fromCharCount(32,((start===0?position:before)+1|0)+7|0)||\"\")+\"^\"},SafeSubstring:function(value,startIndex,count){return value==null?null:(startIndex=Math.max(0,startIndex),startIndex>=value.length)?\"\":count<=0?\"\":(count=Math.min(count,value.length-startIndex|0),value.substr(startIndex,count))},SafeIsValidNonEmptyBase64:function(value,allowWhitespace){var $t,offsetFirstEquality,i,c,j;if((allowWhitespace===void 0&&(allowWhitespace=!1),allowWhitespace&&value!=null&&(value=value.trim()),System.String.isNullOrEmpty(value))||value.length%4!=0)return!1;offsetFirstEquality=-1;i=-1;$t=Bridge.getEnumerator(value);try{while($t.moveNext())if(c=$t.Current,i=i+1|0,(!(c>=48)||!(c<=57))&&(!(c>=65)||!(c<=90))&&(!(c>=97)||!(c<=122))&&c!==43&&c!==47){if(c===61){offsetFirstEquality=i;break}return!1}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}if(offsetFirstEquality===-1)return value.length%4==0;if((value.length-offsetFirstEquality|0)>3)return!1;for(j=offsetFirstEquality;j<value.length;j=j+1|0)if(value.charCodeAt(j)!==61)return!1;return!0},SafeIsDoubleSlashCommentOrEmptyBlock:function(cmd){if(System.String.isNullOrWhiteSpace(cmd))return!0;for(var slash=!1,i=0,c;;){if(i>=cmd.length)return!slash;if(c=cmd.charCodeAt(i),c===47){if(slash){while((i=i+1|0)<cmd.length)if(c=cmd.charCodeAt(i),c===13||c===10)break;slash=!1}else slash=!0;i=i+1|0;continue}if(slash)return!1;if(System.Char.isWhiteSpace(String.fromCharCode(c))||c===13||c===10){i=i+1|0;continue}return!1}},SafeFastTrimEmptyLines:function(text){var nextNewLine;if(System.String.isNullOrEmpty(text)||System.String.indexOf(text,\"\\n\")===-1)return text;for(var sb=Kusto.Cloud.Platform.Utils.UtilsStringBuilderCache.Acquire(Math.min(text.length,Kusto.Cloud.Platform.Utils.MemoryConstants.LargeObjectHeapChars)),hasPrecedingText=!1,i=0;i<text.length;){if(nextNewLine=System.String.indexOf(text,\"\\n\",i),nextNewLine===-1){hasPrecedingText&&sb.appendLine();sb.append(text,i,text.length-i|0);break}if(nextNewLine!==i){hasPrecedingText&&sb.appendLine();sb.append(text,i,nextNewLine-i|0);i=nextNewLine+1|0;hasPrecedingText=!0;continue}i=i+1|0}return Kusto.Cloud.Platform.Utils.UtilsStringBuilderCache.GetStringAndRelease(sb)},SafeFastTrim:function(text){return System.String.isNullOrEmpty(text)?text:text.trim()},TrimStart$1:function(text,prefix,comparison){return(comparison===void 0&&(comparison=4),System.String.startsWith(text,prefix,comparison))?text.substr(prefix.length,text.length-prefix.length|0):text},TrimStart:function(text,c,justOne){if(System.String.isNullOrEmpty(text))return text;if(justOne)return text.charCodeAt(0)===c?text.substr(1):text;if(text.charCodeAt(0)!==c)return text;for(var i=0;i<text.length&&text.charCodeAt(i)===c;)i=i+1|0;return i===text.length?\"\":text.substr(i)},TrimEnd:function(text,suffix,comparison){return(comparison===void 0&&(comparison=4),System.String.endsWith(text,suffix,comparison))?text.substr(0,text.length-suffix.length|0):text},TrimBalancedSquareBrackets:function(text){return text!=null&&text.length>=2&&text.charCodeAt(0)===91&&text.charCodeAt(text.length-1|0)===93&&(text=text.substr(1,text.length-2|0)),text},TrimBalancedRoundBrackets:function(text){return Kusto.Cloud.Platform.Utils.ExtendedString.TrimBalanced(text,\"(\",\")\")},TrimBalancedCurlyBrackets:function(text){return Kusto.Cloud.Platform.Utils.ExtendedString.TrimBalanced(text,\"{\",\"}\")},TrimBalanced:function(text,openning,closing,comparison){return comparison===void 0&&(comparison=4),text!=null&&System.String.startsWith(text,openning,comparison)&&System.String.endsWith(text,closing,comparison)&&(text=text.substr(openning.length,text.length-(openning.length+closing.length|0)|0)),text},TrimBalancedSingleAndDoubleQuotes:function(text){if(System.String.isNullOrEmpty(text))return text;for(var start=0,end=text.length-1|0;start<end;){if(text.charCodeAt(start)===34&&text.charCodeAt(end)===34){start=start+1|0;end=end-1|0;continue}if(text.charCodeAt(start)===39&&text.charCodeAt(end)===39){start=start+1|0;end=end-1|0;continue}break}return start>end?\"\":text.substr(start,(end-start|0)+1|0)},DetermineMaxLineWidth:function(text){var ret,currentPos,i,c;if(System.String.isNullOrEmpty(text))return 0;for(ret=0,currentPos=0,i=0;i<text.length;i=i+1|0)c=text.charCodeAt(i),c===13||c===10?(ret=Math.max(ret,i-currentPos|0),currentPos=i+1|0):i===(text.length-1|0)&&(ret=Math.max(ret,(i-currentPos|0)+1|0));return ret},SafeCountCharacterUpTo:function(value,c,maxCount){var ret,i;if(value==null)return System.Int64(-1);for(ret=0,i=0;i<value.length;i=i+1|0)if(value.charCodeAt(i)===c&&(ret=ret+1|0),System.Int64(ret).equals(maxCount))break;return System.Int64(ret)},SafeCountAnyCharacterUpTo:function(value,chars,maxCount){var ret,i;if(value==null)return System.Int64(-1);for(ret=0,i=0;i<value.length;i=i+1|0)if(System.Array.contains(chars,value.charCodeAt(i),System.Char)&&(ret=ret+1|0),System.Int64(ret).equals(maxCount))break;return System.Int64(ret)},FindFirstNonWhitespaceCharacter:function(value,index){if(index===void 0&&(index=0),value==null)return-1;for(;;){if(index>=value.length)return-1;if(!System.Char.isWhiteSpace(String.fromCharCode(value.charCodeAt(index))))return index;index=index+1|0}},FirstFirstUnequalCharacter:function(lhs,rhs){if(Bridge.referenceEquals(lhs,rhs))return-1;if(lhs==null||rhs==null||lhs.length===0||rhs.length===0)return 0;for(var i=0;i<lhs.length&&i<rhs.length;i=i+1|0)if(lhs.charCodeAt(i)!==rhs.charCodeAt(i))return i;return i},CountNonOverlappingSubstrings:function(text,substring,comparison){if(comparison===void 0&&(comparison=4),System.String.isNullOrEmpty(text)||System.String.isNullOrEmpty(substring))return 0;for(var count=0,i=0;i<text.length;){if(i=System.String.indexOf(text,substring,i,null,comparison),i<0)return count;count=count+1|0;i=i+substring.length|0}return count},SafeStartsWith:function(what,c){return System.String.isNullOrEmpty(what)?!1:what.charCodeAt(0)===c},SafeStartsWith$1:function(what,value,comparison){return(comparison===void 0&&(comparison=4),System.String.isNullOrEmpty(what))?!1:System.String.startsWith(what,value,comparison)},EqualsOrdinalIgnoreCase:function(me,other){return System.String.equals(me,other,5)},IsEmpty:function(me){return Bridge.referenceEquals(me,\"\")},IsNotEmpty:function(me){return!Bridge.referenceEquals(me,\"\")},IsNullOrEmpty:function(me){return System.String.isNullOrEmpty(me)},IsNotNullOrEmpty:function(me){return!System.String.isNullOrEmpty(me)},EmptyIfNull:function(me){var $t;return $t=me,$t!=null?$t:\"\"},SafeGetTail:function(what,length){return what==null?null:length<=0?\"\":length>=what.length?what:what.substr(what.length-length|0)},SafeIndexOf:function(what,value){return System.String.isNullOrEmpty(what)?-1:System.String.indexOf(what,String.fromCharCode(value))},SafeIndexOf$2:function(what,value,startIndex,comparisonType){return System.String.isNullOrEmpty(what)||System.String.isNullOrEmpty(value)||startIndex>what.length?-1:System.String.indexOf(what,value,startIndex,null,comparisonType)},SafeIndexOf$1:function(what,value,startIndex,count,comparisonType){return System.String.isNullOrEmpty(what)||System.String.isNullOrEmpty(value)||(startIndex+value.length|0)>what.length?-1:System.String.indexOf(what,value,startIndex,count,comparisonType)},SplitFirst$2:function(what,delimiter,comparison){var delimiterIndex;return(comparison===void 0&&(comparison=4),what==null||System.String.isNullOrEmpty(delimiter))?null:(delimiterIndex=System.String.indexOf(what,delimiter,0,null,comparison),delimiterIndex<0)?what:what.substr(0,delimiterIndex)},SplitFirst:function(what,delimiter){var delimiterIndex;return what==null?null:(delimiterIndex=System.String.indexOf(what,String.fromCharCode(delimiter)),delimiterIndex<0)?what:what.substr(0,delimiterIndex)},SplitFirst$1:function(what,delimiters){var delimitersIndex;return what==null||delimiters==null||delimiters.length===0?null:(delimitersIndex=System.String.indexOfAny(what,delimiters),delimitersIndex<0)?what:what.substr(0,delimitersIndex)},Rotate:function(s){return System.String.isNullOrEmpty(s)||s.length<2?s:(s.substr(1,s.length-1|0)||\"\")+(s.substr(0,1)||\"\")},AdjustNewLineDelimiter:function(text){for(var c,isNextChar_slashN,resultBuilder=Kusto.Cloud.Platform.Utils.UtilsStringBuilderCache.Acquire(text.length),i=0;i<text.length;i=i+1|0){c=text.charCodeAt(i);switch(c){case 13:isNextChar_slashN=i<(text.length-1|0)&&text.charCodeAt(i+1|0)===10;isNextChar_slashN&&(i=i+1|0);resultBuilder.append(\"\\n\");break;case 10:resultBuilder.append(\"\\n\");break;default:resultBuilder.append(String.fromCharCode(c));break}}return Kusto.Cloud.Platform.Utils.UtilsStringBuilderCache.GetStringAndRelease(resultBuilder)},ReplaceInvisibleWhitespaces:function(value){var c_space=\" \";return Kusto.Cloud.Platform.Utils.ExtendedString.Replace$1(value,function(c,replacement){return replacement.v=null,Kusto.Cloud.Platform.Utils.ExtendedString.s_alternativeSpaceChars.contains(c)?replacement.v=c_space:Kusto.Cloud.Platform.Utils.ExtendedString.s_alternativeNewlineChars.contains(c)&&(replacement.v=\"\\n\"),replacement.v!=null})},HasNonAsciiQuotes:function(value){return System.String.isNullOrWhiteSpace(value)?!1:System.Linq.Enumerable.from(value,System.Char).any(Bridge.fn.cacheBind(Kusto.Cloud.Platform.Utils.ExtendedString.s_alternativeQutoes,Kusto.Cloud.Platform.Utils.ExtendedString.s_alternativeQutoes.contains))},ReplaceNonAsciiQuotes:function(value){var c_quotes='\"';return Kusto.Cloud.Platform.Utils.ExtendedString.Replace$1(value,function(c,replacement){return replacement.v=c_quotes,Kusto.Cloud.Platform.Utils.ExtendedString.s_alternativeQutoes.contains(c)})},Replace:function(value,replacements){return Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$1(System.Collections.Generic.KeyValuePair$2(System.Char,System.String),replacements)?Kusto.Cloud.Platform.Utils.ExtendedString.Replace$1(value,Bridge.fn.cacheBind(replacements,replacements.System$Collections$Generic$IDictionary$2$System$Char$System$String$tryGetValue)):value},Replace$1:function(value,shouldReplace){var sb,i,c,replacement;if(System.String.isNullOrEmpty(value))return value;for(sb=null,i=0;i<value.length;i=i+1|0)c=value.charCodeAt(i),replacement={},shouldReplace(c,replacement)?(sb=Kusto.Cloud.Platform.Utils.ExtendedStringBuilder.InitializeStringBuildIfNeeded(value,sb,i),sb.append(replacement.v)):sb!=null&&sb.append(String.fromCharCode(c));return sb==null?value:sb.toString()},IsAscii:function(str){return System.Text.Encoding.UTF8.GetByteCount$2(str)===str.length}}}});Bridge.ns(\"Kusto.Cloud.Platform.Utils.ExtendedString\",$asm.$);Bridge.apply($asm.$.Kusto.Cloud.Platform.Utils.ExtendedString,{f1:function(obj){var $t;return obj!=null?($t=Bridge.toString(obj),$t!=null?$t:\"[ToStringNull]\"):\"[null]\"},f2:function(_o1){return _o1.add(160),_o1.add(5760),_o1.add(6158),_o1.add(8192),_o1.add(8193),_o1.add(8194),_o1.add(8195),_o1.add(8196),_o1.add(8197),_o1.add(8198),_o1.add(8199),_o1.add(8200),_o1.add(8201),_o1.add(8202),_o1.add(8203),_o1.add(8239),_o1.add(8287),_o1.add(12288),_o1.add(65279),_o1.add(8288),_o1},f3:function(_o2){return _o2.add(11),_o2},f4:function(_o3){return _o3.add(171),_o3.add(187),_o3.add(8216),_o3.add(8217),_o3.add(8218),_o3.add(8220),_o3.add(8221),_o3.add(8222),_o3.add(8249),_o3.add(8250),_o3}});Bridge.define(\"Kusto.Cloud.Platform.Utils.ExtendedStringBuilder\",{statics:{methods:{InitializeStringBuildIfNeeded:function(value,sb,i){return sb!=null?sb:(sb=new System.Text.StringBuilder(\"\",value.length),i>0&&sb.append(value.substr(0,i)),sb)}}}});Bridge.define(\"Kusto.Cloud.Platform.Utils.MemoryConstants\",{statics:{fields:{_1KB:0,_2KB:0,_4KB:0,_8KB:0,_16KB:0,_32KB:0,_64KB:0,_128KB:0,_256KB:0,_512KB:0,_1MB:0,_2MB:0,_32MB:0,_64MB:0,_512MB:0,_1GB:0,_1TB:System.Int64(0),_1PB:System.Int64(0),LargeObjectHeap:0,LargeObjectHeapChars:0,LargeObjectHeapCharsStreamReaderWriter:0},ctors:{init:function(){this._1KB=1024;this._2KB=2048;this._4KB=4096;this._8KB=8192;this._16KB=16384;this._32KB=32768;this._64KB=65536;this._128KB=131072;this._256KB=262144;this._512KB=524288;this._1MB=1048576;this._2MB=2097152;this._32MB=33554432;this._64MB=67108864;this._512MB=536870912;this._1GB=1073741824;this._1TB=System.Int64([0,256]);this._1PB=System.Int64([0,262144]);this.LargeObjectHeap=65536;this.LargeObjectHeapChars=32768;this.LargeObjectHeapCharsStreamReaderWriter=24576}}}});Bridge.define(\"Kusto.Cloud.Platform.Utils.StringBuilderCache\",{statics:{fields:{MAX_BUILDER_SIZE:0,DEFAULT_CAPACITY:0},ctors:{init:function(){this.MAX_BUILDER_SIZE=32768;this.DEFAULT_CAPACITY=16}},methods:{Acquire:function(threadStaticStringBuilder,capacity,maxBuilderSize){if(capacity===void 0&&(capacity=16),maxBuilderSize===void 0&&(maxBuilderSize=32768),capacity<=maxBuilderSize){var sb=threadStaticStringBuilder.v;if(sb!=null&&capacity<=sb.getCapacity())return threadStaticStringBuilder.v=null,sb.clear(),sb}return new System.Text.StringBuilder(\"\",capacity)},Acquire$1:function(threadStaticStringBuilder,value){var sb=Kusto.Cloud.Platform.Utils.StringBuilderCache.Acquire(threadStaticStringBuilder,Math.max(value.length,Kusto.Cloud.Platform.Utils.StringBuilderCache.DEFAULT_CAPACITY));return sb.append(value),sb},Release:function(threadStaticStringBuilder,sb,maxBuilderSize){maxBuilderSize===void 0&&(maxBuilderSize=32768);sb.getCapacity()<=maxBuilderSize&&(threadStaticStringBuilder.v=sb)},GetStringAndRelease:function(threadStaticStringBuilder,sb,maxBuilderSize){maxBuilderSize===void 0&&(maxBuilderSize=32768);var result=sb.toString();return Kusto.Cloud.Platform.Utils.StringBuilderCache.Release(threadStaticStringBuilder,sb,maxBuilderSize),result},GetStringAndClear:function(threadStaticStringBuilder,sb){var result=sb.toString();return sb.clear(),result}}}});Bridge.define(\"Kusto.Cloud.Platform.Utils.TimeSpanConstants\",{statics:{fields:{_2sec:null,_5sec:null,_10sec:null,_20sec:null,_1min:null,_2min:null,_3min:null,_4min:null,_5min:null,_10min:null,_59min:null,_60min:null,_1hour:null,_2hours:null,_3hours:null,_4hours:null,_5hours:null,_6hours:null,_10hours:null},ctors:{init:function(){this._2sec=new System.TimeSpan;this._5sec=new System.TimeSpan;this._10sec=new System.TimeSpan;this._20sec=new System.TimeSpan;this._1min=new System.TimeSpan;this._2min=new System.TimeSpan;this._3min=new System.TimeSpan;this._4min=new System.TimeSpan;this._5min=new System.TimeSpan;this._10min=new System.TimeSpan;this._59min=new System.TimeSpan;this._60min=new System.TimeSpan;this._1hour=new System.TimeSpan;this._2hours=new System.TimeSpan;this._3hours=new System.TimeSpan;this._4hours=new System.TimeSpan;this._5hours=new System.TimeSpan;this._6hours=new System.TimeSpan;this._10hours=new System.TimeSpan;this._2sec=System.TimeSpan.fromSeconds(2);this._5sec=System.TimeSpan.fromSeconds(5);this._10sec=System.TimeSpan.fromSeconds(10);this._20sec=System.TimeSpan.fromSeconds(20);this._1min=System.TimeSpan.fromMinutes(1);this._2min=System.TimeSpan.fromMinutes(2);this._3min=System.TimeSpan.fromMinutes(3);this._4min=System.TimeSpan.fromMinutes(4);this._5min=System.TimeSpan.fromMinutes(5);this._10min=System.TimeSpan.fromMinutes(10);this._59min=System.TimeSpan.fromMinutes(59);this._60min=System.TimeSpan.fromMinutes(60);this._1hour=System.TimeSpan.fromHours(1);this._2hours=System.TimeSpan.fromHours(2);this._3hours=System.TimeSpan.fromHours(3);this._4hours=System.TimeSpan.fromHours(4);this._5hours=System.TimeSpan.fromHours(5);this._6hours=System.TimeSpan.fromHours(6);this._10hours=System.TimeSpan.fromHours(10)}}}});Bridge.define(\"Kusto.Cloud.Platform.Utils.UtilsStringBuilderCache\",{statics:{fields:{MAX_BUILDER_SIZE:0,DEFAULT_CAPACITY:0,t_cachedInstance:null},ctors:{init:function(){this.MAX_BUILDER_SIZE=24576;this.DEFAULT_CAPACITY=16}},methods:{Acquire:function(capacity){return capacity===void 0&&(capacity=16),Kusto.Cloud.Platform.Utils.StringBuilderCache.Acquire(Bridge.ref(Kusto.Cloud.Platform.Utils.UtilsStringBuilderCache,\"t_cachedInstance\"),capacity)},Acquire$1:function(value){return Kusto.Cloud.Platform.Utils.StringBuilderCache.Acquire$1(Bridge.ref(Kusto.Cloud.Platform.Utils.UtilsStringBuilderCache,\"t_cachedInstance\"),value)},Release:function(sb){Kusto.Cloud.Platform.Utils.StringBuilderCache.Release(Bridge.ref(Kusto.Cloud.Platform.Utils.UtilsStringBuilderCache,\"t_cachedInstance\"),sb)},GetStringAndRelease:function(sb){return Kusto.Cloud.Platform.Utils.StringBuilderCache.GetStringAndRelease(Bridge.ref(Kusto.Cloud.Platform.Utils.UtilsStringBuilderCache,\"t_cachedInstance\"),sb)},GetStringAndClear:function(sb){return Kusto.Cloud.Platform.Utils.StringBuilderCache.GetStringAndClear(Bridge.ref(Kusto.Cloud.Platform.Utils.UtilsStringBuilderCache,\"t_cachedInstance\"),sb)}}}});Bridge.define(\"Kusto.Data.Common.CslQueryParser\",{statics:{methods:{PrettifyQuery:function(query,appendText){var parser=new Kusto.Data.IntelliSense.CslCommandParser,commands=parser.Parse(null,query,Kusto.Data.IntelliSense.ParseMode.CommandTokensOnly),queryFormatted;return System.Linq.Enumerable.from(commands,Kusto.Data.IntelliSense.CslCommand).count()!==1?query:(queryFormatted=System.Linq.Enumerable.from(commands,Kusto.Data.IntelliSense.CslCommand).first().FormatAsString(\"\\n\",7),System.String.isNullOrEmpty(queryFormatted)&&(queryFormatted=query),System.String.isNullOrEmpty(appendText)||(queryFormatted=(queryFormatted||\"\")+(appendText||\"\")),queryFormatted)}}}});Bridge.define(\"Kusto.Data.Common.CslSyntaxGenerator\",{statics:{fields:{s_keywords:null},ctors:{init:function(){this.s_keywords=$asm.$.Kusto.Data.Common.CslSyntaxGenerator.f1(new(System.Collections.Generic.HashSet$1(System.String).ctor))}},methods:{NormalizeDatabaseName$1:function(databaseName,forceNormalization){return Kusto.Data.Common.CslSyntaxGenerator.NormalizeName(databaseName,forceNormalization)},NormalizeDatabaseName:function(databaseName){return Kusto.Data.Common.CslSyntaxGenerator.NormalizeName(databaseName,!1)},NormalizeVirutalClusterName:function(virtualClusterName,forceNormalization){return forceNormalization===void 0&&(forceNormalization=!1),Kusto.Data.Common.CslSyntaxGenerator.NormalizeName(virtualClusterName,forceNormalization)},NormalizeFunctionName:function(functionName,forceNormalizeFunctionName){return forceNormalizeFunctionName===void 0&&(forceNormalizeFunctionName=!1),Kusto.Data.Common.CslSyntaxGenerator.NormalizeName(functionName,forceNormalizeFunctionName)},NormalizeTableName:function(tableName,forceNormalizeTableName){return forceNormalizeTableName===void 0&&(forceNormalizeTableName=!1),Kusto.Data.Common.CslSyntaxGenerator.NormalizeName(tableName,forceNormalizeTableName)},NormalizeColumnName:function(columnName,forceNormalizeColumnName){return forceNormalizeColumnName===void 0&&(forceNormalizeColumnName=!1),Kusto.Data.Common.CslSyntaxGenerator.NormalizeName(columnName,forceNormalizeColumnName)},NormalizeRowStoreName:function(rowStoreName){return Kusto.Data.Common.CslSyntaxGenerator.NormalizeName(rowStoreName,!1)},NormalizeWorkloadGroupName:function(workloadGroupName){return Kusto.Data.Common.CslSyntaxGenerator.NormalizeName(workloadGroupName,!1)},IsIdentifier:function(token){if(System.String.isNullOrEmpty(token)||!System.Char.isLetter(token.charCodeAt(0))&&token.charCodeAt(0)!==95)return!1;return System.Linq.Enumerable.from(token,System.Char).all($asm.$.Kusto.Data.Common.CslSyntaxGenerator.f2)},IsAscii:function(c){return c<=127},NormalizeName:function(name,forceNormalization){return System.String.isNullOrEmpty(name)?name:!forceNormalization&&Kusto.Data.Common.CslSyntaxGenerator.IsIdentifier(name)&&!Kusto.Data.Common.CslSyntaxGenerator.IsKeyword(name)?name:System.String.startsWith(name,\"[\",4)?name:System.String.contains(name,\"'\")?'[\"'+(name||\"\")+'\"]':\"['\"+(name||\"\")+\"']\"},IsKeyword:function(token){return Kusto.Data.Common.CslSyntaxGenerator.s_keywords.contains(token)}}}});Bridge.ns(\"Kusto.Data.Common.CslSyntaxGenerator\",$asm.$);Bridge.apply($asm.$.Kusto.Data.Common.CslSyntaxGenerator,{f1:function(_o1){return _o1.add(\"access\"),_o1.add(\"accounts\"),_o1.add(\"accumulate\"),_o1.add(\"add\"),_o1.add(\"adl\"),_o1.add(\"admin\"),_o1.add(\"admins\"),_o1.add(\"aggregations\"),_o1.add(\"alias\"),_o1.add(\"all\"),_o1.add(\"alldatabasesadmins\"),_o1.add(\"alldatabasesmonitors\"),_o1.add(\"alldatabasesviewers\"),_o1.add(\"alter\"),_o1.add(\"alter-merge\"),_o1.add(\"and\"),_o1.add(\"anomalycolumns\"),_o1.add(\"append\"),_o1.add(\"artifacts\"),_o1.add(\"as\"),_o1.add(\"asc\"),_o1.add(\"assert-schema\"),_o1.add(\"async\"),_o1.add(\"attach\"),_o1.add(\"autoUpdateSchema\"),_o1.add(\"auto_delete\"),_o1.add(\"avro\"),_o1.add(\"apacheavro\"),_o1.add(\"axes\"),_o1.add(\"base\"),_o1.add(\"based-on\"),_o1.add(\"basicauth\"),_o1.add(\"between\"),_o1.add(\"bin\"),_o1.add(\"blob\"),_o1.add(\"block\"),_o1.add(\"blocked\"),_o1.add(\"by\"),_o1.add(\"cache\"),_o1.add(\"caching\"),_o1.add(\"cachingpolicy\"),_o1.add(\"call-tree\"),_o1.add(\"callout\"),_o1.add(\"cancel\"),_o1.add(\"capacity\"),_o1.add(\"certificates\"),_o1.add(\"classification\"),_o1.add(\"clean\"),_o1.add(\"clear\"),_o1.add(\"cluster\"),_o1.add(\"column\"),_o1.add(\"columns\"),_o1.add(\"column-docstrings\"),_o1.add(\"commands\"),_o1.add(\"commands-and-queries\"),_o1.add(\"commconcurrency\"),_o1.add(\"commpools\"),_o1.add(\"compact\"),_o1.add(\"completed\"),_o1.add(\"compressed\"),_o1.add(\"consume\"),_o1.add(\"contains\"),_o1.add(\"continuous\"),_o1.add(\"continuous-export\"),_o1.add(\"continuous-exports\"),_o1.add(\"continuous-job\"),_o1.add(\"conservative\"),_o1.add(\"copy\"),_o1.add(\"corrupted\"),_o1.add(\"count\"),_o1.add(\"crash\"),_o1.add(\"create\"),_o1.add(\"create-or-alter\"),_o1.add(\"createdon\"),_o1.add(\"create-merge\"),_o1.add(\"csl\"),_o1.add(\"cslschema\"),_o1.add(\"csv\"),_o1.add(\"cursor\"),_o1.add(\"data\"),_o1.add(\"database\"),_o1.add(\"databasecreators\"),_o1.add(\"databases\"),_o1.add(\"dataexport\"),_o1.add(\"data-export\"),_o1.add(\"dataformat\"),_o1.add(\"datatable\"),_o1.add(\"declare\"),_o1.add(\"decryption-certificate-thumbprint\"),_o1.add(\"default\"),_o1.add(\"define\"),_o1.add(\"delete\"),_o1.add(\"delta\"),_o1.add(\"desc\"),_o1.add(\"detach\"),_o1.add(\"details\"),_o1.add(\"diagnostics\"),_o1.add(\"disable\"),_o1.add(\"distinct\"),_o1.add(\"dnshostname\"),_o1.add(\"docstring\"),_o1.add(\"drop\"),_o1.add(\"drop-pretend\"),_o1.add(\"dup-next-failed-ingest\"),_o1.add(\"dup-next-ingest\"),_o1.add(\"earliest\"),_o1.add(\"echo\"),_o1.add(\"effective\"),_o1.add(\"enable\"),_o1.add(\"encoding\"),_o1.add(\"encodingpolicy\"),_o1.add(\"entity\"),_o1.add(\"entity_group\"),_o1.add(\"entity_groups\"),_o1.add(\"ephemeral\"),_o1.add(\"escape\"),_o1.add(\"evaluate\"),_o1.add(\"except\"),_o1.add(\"execute\"),_o1.add(\"export\"),_o1.add(\"extend\"),_o1.add(\"extent\"),_o1.add(\"extentcontainers\"),_o1.add(\"extents\"),_o1.add(\"extentsmerge\"),_o1.add(\"extents-merge\"),_o1.add(\"extents-partition\"),_o1.add(\"extent_tags_retention\"),_o1.add(\"external\"),_o1.add(\"externaldata\"),_o1.add(\"external_data\"),_o1.add(\"fabric\"),_o1.add(\"fabriccache\"),_o1.add(\"fabricclocks\"),_o1.add(\"fabriclocks\"),_o1.add(\"facet\"),_o1.add(\"failures\"),_o1.add(\"featureflags\"),_o1.add(\"filter\"),_o1.add(\"find\"),_o1.add(\"first\"),_o1.add(\"flags\"),_o1.add(\"flush\"),_o1.add(\"folder\"),_o1.add(\"fork\"),_o1.add(\"freshness\"),_o1.add(\"from\"),_o1.add(\"function\"),_o1.add(\"functions\"),_o1.add(\"generic\"),_o1.add(\"get\"),_o1.add(\"getschema\"),_o1.add(\"granny-asc\"),_o1.add(\"granny-desc\"),_o1.add(\"granularity\"),_o1.add(\"greedy\"),_o1.add(\"groups\"),_o1.add(\"harddelete\"),_o1.add(\"hardretention\"),_o1.add(\"has\"),_o1.add(\"has_all\"),_o1.add(\"has_any\"),_o1.add(\"hash\"),_o1.add(\"hidden\"),_o1.add(\"hot\"),_o1.add(\"hotdata\"),_o1.add(\"hotindex\"),_o1.add(\"hours\"),_o1.add(\"id\"),_o1.add(\"if_later_than\"),_o1.add(\"ifexists\"),_o1.add(\"ifnotexists\"),_o1.add(\"in\"),_o1.add(\"in~\"),_o1.add(\"info\"),_o1.add(\"ingest\"),_o1.add(\"ingest-from-storage\"),_o1.add(\"ingest-inline\"),_o1.add(\"ingestion\"),_o1.add(\"ingestionbatching\"),_o1.add(\"ingestions\"),_o1.add(\"ingestiontime\"),_o1.add(\"ingestors\"),_o1.add(\"inline\"),_o1.add(\"internal\"),_o1.add(\"into\"),_o1.add(\"invoke\"),_o1.add(\"journal\"),_o1.add(\"json\"),_o1.add(\"jobs\"),_o1.add(\"key\"),_o1.add(\"keys\"),_o1.add(\"kind\"),_o1.add(\"kv_delimiter\"),_o1.add(\"last\"),_o1.add(\"latest\"),_o1.add(\"legend\"),_o1.add(\"let\"),_o1.add(\"limit\"),_o1.add(\"linear\"),_o1.add(\"list\"),_o1.add(\"load\"),_o1.add(\"local\"),_o1.add(\"location\"),_o1.add(\"lookback\"),_o1.add(\"lookup\"),_o1.add(\"log\"),_o1.add(\"macro-expand\"),_o1.add(\"maintenance_mode\"),_o1.add(\"make-series\"),_o1.add(\"management\"),_o1.add(\"map\"),_o1.add(\"mapping\"),_o1.add(\"mappings\"),_o1.add(\"managed_identity\"),_o1.add(\"materialize\"),_o1.add(\"materialized-view\"),_o1.add(\"materialized-views\"),_o1.add(\"materialized-view-combine\"),_o1.add(\"maxRecords\"),_o1.add(\"mdm\"),_o1.add(\"memory\"),_o1.add(\"mempools\"),_o1.add(\"merge\"),_o1.add(\"metadata\"),_o1.add(\"method\"),_o1.add(\"mirroring\"),_o1.add(\"missing\"),_o1.add(\"monitoring\"),_o1.add(\"monitors\"),_o1.add(\"move\"),_o1.add(\"multidatabaseadmins\"),_o1.add(\"mv-apply\"),_o1.add(\"mv-expand\"),_o1.add(\"mvapply\"),_o1.add(\"mvexpand\"),_o1.add(\"nan\"),_o1.add(\"node\"),_o1.add(\"nodes\"),_o1.add(\"none\"),_o1.add(\"!between\"),_o1.add(\"!in\"),_o1.add(\"!in~\"),_o1.add(\"null\"),_o1.add(\"nulls\"),_o1.add(\"of\"),_o1.add(\"on\"),_o1.add(\"older\"),_o1.add(\"operation\"),_o1.add(\"operations\"),_o1.add(\"ops\"),_o1.add(\"optional\"),_o1.add(\"or\"),_o1.add(\"orc\"),_o1.add(\"order\"),_o1.add(\"others\"),_o1.add(\"output\"),_o1.add(\"over\"),_o1.add(\"pack\"),_o1.add(\"pair_delimiter\"),_o1.add(\"panels\"),_o1.add(\"parse\"),_o1.add(\"parse-where\"),_o1.add(\"parse-kv\"),_o1.add(\"parquet\"),_o1.add(\"partition\"),_o1.add(\"__partitionby\"),_o1.add(\"partitioning\"),_o1.add(\"password\"),_o1.add(\"patch\"),_o1.add(\"pathformat\"),_o1.add(\"pattern\"),_o1.add(\"pending\"),_o1.add(\"period\"),_o1.add(\"periodic-storage-artifacts-cleanup\"),_o1.add(\"persist\"),_o1.add(\"plugin\"),_o1.add(\"plugins\"),_o1.add(\"policies\"),_o1.add(\"policy\"),_o1.add(\"pretend\"),_o1.add(\"prettyname\"),_o1.add(\"principal\"),_o1.add(\"principals\"),_o1.add(\"print\"),_o1.add(\"project\"),_o1.add(\"project-away\"),_o1.add(\"project-keep\"),_o1.add(\"project-rename\"),_o1.add(\"project-reorder\"),_o1.add(\"project-smart\"),_o1.add(\"purge\"),_o1.add(\"purge-cleanup\"),_o1.add(\"purge-storage-artifacts-cleanup\"),_o1.add(\"queries\"),_o1.add(\"query\"),_o1.add(\"query_parameters\"),_o1.add(\"queryexecution\"),_o1.add(\"queryplan\"),_o1.add(\"query_weak_consistency\"),_o1.add(\"query_results\"),_o1.add(\"quote\"),_o1.add(\"range\"),_o1.add(\"readonly\"),_o1.add(\"readwrite\"),_o1.add(\"reason\"),_o1.add(\"rebuild\"),_o1.add(\"record\"),_o1.add(\"records\"),_o1.add(\"recycle\"),_o1.add(\"reduce\"),_o1.add(\"regex\"),_o1.add(\"remote-schema\"),_o1.add(\"rename\"),_o1.add(\"render\"),_o1.add(\"replace\"),_o1.add(\"resources\"),_o1.add(\"restore\"),_o1.add(\"restrict\"),_o1.add(\"restricted_view_access\"),_o1.add(\"resume\"),_o1.add(\"resume-purges\"),_o1.add(\"retention\"),_o1.add(\"request_classification\"),_o1.add(\"request_support\"),_o1.add(\"roles\"),_o1.add(\"row_level_security\"),_o1.add(\"roworder\"),_o1.add(\"roworderpolicy\"),_o1.add(\"rowstore\"),_o1.add(\"rowstorepolicy\"),_o1.add(\"rowstore_references\"),_o1.add(\"rowstores\"),_o1.add(\"rowstore_sealinfo\"),_o1.add(\"run\"),_o1.add(\"running\"),_o1.add(\"sample\"),_o1.add(\"sample-distinct\"),_o1.add(\"sandbox\"),_o1.add(\"sandboxes\"),_o1.add(\"save\"),_o1.add(\"scalein\"),_o1.add(\"scan\"),_o1.add(\"schema\"),_o1.add(\"script\"),_o1.add(\"seal\"),_o1.add(\"seals\"),_o1.add(\"search\"),_o1.add(\"serialize\"),_o1.add(\"series\"),_o1.add(\"servicepoints\"),_o1.add(\"services\"),_o1.add(\"set\"),_o1.add(\"set-or-append\"),_o1.add(\"set-or-replace\"),_o1.add(\"sharding\"),_o1.add(\"shards\"),_o1.add(\"shard-groups\"),_o1.add(\"shards-group\"),_o1.add(\"shards_grouping\"),_o1.add(\"show\"),_o1.add(\"softdelete\"),_o1.add(\"softretention\"),_o1.add(\"sort\"),_o1.add(\"sql\"),_o1.add(\"stacked\"),_o1.add(\"stacked100\"),_o1.add(\"state\"),_o1.add(\"stats\"),_o1.add(\"status\"),_o1.add(\"statistics\"),_o1.add(\"step\"),_o1.add(\"storedqueryresultcontainers\"),_o1.add(\"stream\"),_o1.add(\"streamingingestion\"),_o1.add(\"streaming-ingestion-post-processing\"),_o1.add(\"stored-query-results\"),_o1.add(\"summarize\"),_o1.add(\"sstream\"),_o1.add(\"storage\"),_o1.add(\"suspend\"),_o1.add(\"systemdb\"),_o1.add(\"table\"),_o1.add(\"tablepurge\"),_o1.add(\"table-purge\"),_o1.add(\"tables\"),_o1.add(\"tags\"),_o1.add(\"take\"),_o1.add(\"tcpconnections\"),_o1.add(\"tcpports\"),_o1.add(\"tempstorage\"),_o1.add(\"tenants\"),_o1.add(\"threadpools\"),_o1.add(\"threshold\"),_o1.add(\"throw\"),_o1.add(\"title\"),_o1.add(\"to\"),_o1.add(\"top\"),_o1.add(\"top-hitters\"),_o1.add(\"top-nested\"),_o1.add(\"toscalar\"),_o1.add(\"totable\"),_o1.add(\"trace\"),_o1.add(\"traces\"),_o1.add(\"traceresults\"),_o1.add(\"tsv\"),_o1.add(\"type\"),_o1.add(\"typeof\"),_o1.add(\"undo\"),_o1.add(\"unstacked\"),_o1.add(\"unrestrictedviewers\"),_o1.add(\"update\"),_o1.add(\"usage\"),_o1.add(\"user\"),_o1.add(\"users\"),_o1.add(\"using\"),_o1.add(\"uuid\"),_o1.add(\"verbose\"),_o1.add(\"version\"),_o1.add(\"view\"),_o1.add(\"views\"),_o1.add(\"viewers\"),_o1.add(\"virtual_cluster\"),_o1.add(\"virtual_clusters\"),_o1.add(\"visible\"),_o1.add(\"volatile\"),_o1.add(\"v9\"),_o1.add(\"v10\"),_o1.add(\"w3clogfile\"),_o1.add(\"warm\"),_o1.add(\"warming\"),_o1.add(\"whatif\"),_o1.add(\"where\"),_o1.add(\"with\"),_o1.add(\"workload_group\"),_o1.add(\"workload_groups\"),_o1.add(\"writeaheadlog\"),_o1.add(\"xaxis\"),_o1.add(\"xcolumn\"),_o1.add(\"xmin\"),_o1.add(\"xmax\"),_o1.add(\"xtitle\"),_o1.add(\"yaxis\"),_o1.add(\"ycolumns\"),_o1.add(\"ymin\"),_o1.add(\"ymax\"),_o1.add(\"ysplit\"),_o1.add(\"ytitle\"),_o1.add(\"bool\"),_o1.add(\"boolean\"),_o1.add(\"int8\"),_o1.add(\"char\"),_o1.add(\"uint8\"),_o1.add(\"byte\"),_o1.add(\"int16\"),_o1.add(\"uint16\"),_o1.add(\"int\"),_o1.add(\"int32\"),_o1.add(\"uint\"),_o1.add(\"uint32\"),_o1.add(\"long\"),_o1.add(\"int64\"),_o1.add(\"ulong\"),_o1.add(\"uint64\"),_o1.add(\"float\"),_o1.add(\"real\"),_o1.add(\"double\"),_o1.add(\"string\"),_o1.add(\"time\"),_o1.add(\"timespan\"),_o1.add(\"date\"),_o1.add(\"datetime\"),_o1.add(\"guid\"),_o1.add(\"uniqueid\"),_o1.add(\"dynamic\"),_o1.add(\"decimal\"),_o1.add(\"complete\"),_o1.add(\"job\"),_o1.add(\"kuiper\"),_o1.add(\"start\"),_o1.add(\"task\"),_o1.add(\"tasks\"),_o1.add(\"GB\"),_o1.add(\"MB\"),_o1.add(\"application\"),_o1.add(\"blockedprincipals\"),_o1.add(\"bytes\"),_o1.add(\"callstacks\"),_o1.add(\"concurrency\"),_o1.add(\"configuration\"),_o1.add(\"container\"),_o1.add(\"containers\"),_o1.add(\"datasize\"),_o1.add(\"datastats\"),_o1.add(\"datetime_pattern\"),_o1.add(\"days\"),_o1.add(\"dimensions\"),_o1.add(\"disabled\"),_o1.add(\"dryrun\"),_o1.add(\"empty\"),_o1.add(\"enabled\"),_o1.add(\"exclude\"),_o1.add(\"expired_tables_cleanup\"),_o1.add(\"extentsize\"),_o1.add(\"follower\"),_o1.add(\"for\"),_o1.add(\"format_datetime\"),_o1.add(\"hot_window\"),_o1.add(\"identity\"),_o1.add(\"include\"),_o1.add(\"network\"),_o1.add(\"recoverability\"),_o1.add(\"startofday\"),_o1.add(\"startofmonth\"),_o1.add(\"startofweek\"),_o1.add(\"startofyear\"),_o1.add(\"stored_query_result\"),_o1.add(\"stored_query_results\"),_o1.add(\"transactions\"),_o1.add(\"trim\"),_o1.add(\"union\"),_o1.add(\"until\"),_o1.add(\"unused\"),_o1.add(\"utilization\"),_o1.add(\"violations\"),_o1.add(\"3Dchart\"),_o1.add(\"__contextual_datatable\"),_o1.add(\"__crossCluster\"),_o1.add(\"__crossDB\"),_o1.add(\"__executeAndCache\"),_o1.add(\"__id\"),_o1.add(\"__isFuzzy\"),_o1.add(\"__noWithSource\"),_o1.add(\"__packedColumn\"),_o1.add(\"__projectAway\"),_o1.add(\"__sourceColumnIndex\"),_o1.add(\"anomalychart\"),_o1.add(\"areachart\"),_o1.add(\"bagexpansion\"),_o1.add(\"barchart\"),_o1.add(\"bin_legacy\"),_o1.add(\"card\"),_o1.add(\"columnchart\"),_o1.add(\"datascope\"),_o1.add(\"decodeblocks\"),_o1.add(\"expandoutput\"),_o1.add(\"force_remote\"),_o1.add(\"hotcache\"),_o1.add(\"isfuzzy\"),_o1.add(\"join\"),_o1.add(\"ladderchart\"),_o1.add(\"linechart\"),_o1.add(\"nooptimization\"),_o1.add(\"piechart\"),_o1.add(\"pivotchart\"),_o1.add(\"relaxed\"),_o1.add(\"scatterchart\"),_o1.add(\"simple\"),_o1.add(\"stackedareachart\"),_o1.add(\"timechart\"),_o1.add(\"timeline\"),_o1.add(\"timepivot\"),_o1.add(\"treemap\"),_o1.add(\"with_itemindex\"),_o1.add(\"with_match_id\"),_o1.add(\"with_source\"),_o1.add(\"with_step_name\"),_o1.add(\"withsource\"),_o1},f2:function(c){return(System.Char.isDigit(c)||System.Char.isLetter(c))&&Kusto.Data.Common.CslSyntaxGenerator.IsAscii(c)||c===95}});Bridge.define(\"Kusto.Data.Common.DatabaseShowFlavor\",{$kind:\"enum\",statics:{fields:{Identity:0,Verbose:1,Policies:2,DataStats:3,Default:4}}});Bridge.define(\"Kusto.Data.Common.DataConnectionError\",{$kind:\"enum\",statics:{fields:{ManagedIdentityUnauthorized:0,ManagedIdentityNotFound:1,UsingDeprecatedConnectionString:2}}});Bridge.define(\"Kusto.Data.Common.DataRecoverability\",{$kind:\"enum\",statics:{fields:{Unknown:0,Enabled:1,Disabled:2}}});Bridge.define(\"Kusto.Data.Common.DataSourceCompressionType\",{$kind:\"enum\",statics:{fields:{None:0,GZip:1,Zip:2}}});Bridge.define(\"Kusto.Data.Common.EntityType\",{$kind:\"enum\",statics:{fields:{Unknown:0,Cluster:1,Database:2,Table:3,Column:4,Function:5,ExternalTable:6,MaterializedView:7,EntityGroup:8}}});Bridge.define(\"Kusto.Data.Common.ExtendedDatabaseShowFlavor\",{statics:{methods:{FastToString:function(that){switch(that){case Kusto.Data.Common.DatabaseShowFlavor.Identity:return\"Identity\";case Kusto.Data.Common.DatabaseShowFlavor.Verbose:return\"Verbose\";case Kusto.Data.Common.DatabaseShowFlavor.Policies:return\"Policies\";case Kusto.Data.Common.DatabaseShowFlavor.DataStats:return\"DataStats\";case Kusto.Data.Common.DatabaseShowFlavor.Default:return\"Default\";default:break}return System.String.format(\"[unknown: {0}]\",[Bridge.box(that,System.Int32)])},FastIsDefined$1:function(value){var dummy={v:new Kusto.Data.Common.DatabaseShowFlavor};return Kusto.Data.Common.ExtendedDatabaseShowFlavor.FastTryParse(value,dummy,!1,!0)},FastIsDefined:function(value){switch(value){case Kusto.Data.Common.DatabaseShowFlavor.Identity:return!0;case Kusto.Data.Common.DatabaseShowFlavor.Verbose:return!0;case Kusto.Data.Common.DatabaseShowFlavor.Policies:return!0;case Kusto.Data.Common.DatabaseShowFlavor.DataStats:return!0;case Kusto.Data.Common.DatabaseShowFlavor.Default:return!0;default:return!1}},FastHasFlag$1:function(that,flag){return(that&flag)===flag},FastHasFlag:function(that,flag){return(that&flag)===flag},FastParse:function(value,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);var ret={v:new Kusto.Data.Common.DatabaseShowFlavor};if(Kusto.Data.Common.ExtendedDatabaseShowFlavor.FastTryParse(value,ret,ignoreCase,ignoreInts))return ret.v;throw new System.Exception(\"Invalid enum value: \"+(value||\"\"));},FastTryParse:function(value,ret,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);switch(value){case\"0\":case\"Identity\":return ret.v=Kusto.Data.Common.DatabaseShowFlavor.Identity,!0;case\"1\":case\"Verbose\":return ret.v=Kusto.Data.Common.DatabaseShowFlavor.Verbose,!0;case\"2\":case\"Policies\":return ret.v=Kusto.Data.Common.DatabaseShowFlavor.Policies,!0;case\"3\":case\"DataStats\":return ret.v=Kusto.Data.Common.DatabaseShowFlavor.DataStats,!0;case\"4\":case\"Default\":return ret.v=Kusto.Data.Common.DatabaseShowFlavor.Default,!0;default:break}if(ignoreCase&&!System.String.isNullOrEmpty(value))switch(value.toLowerCase()){case\"identity\":return ret.v=Kusto.Data.Common.DatabaseShowFlavor.Identity,!0;case\"verbose\":return ret.v=Kusto.Data.Common.DatabaseShowFlavor.Verbose,!0;case\"policies\":return ret.v=Kusto.Data.Common.DatabaseShowFlavor.Policies,!0;case\"datastats\":return ret.v=Kusto.Data.Common.DatabaseShowFlavor.DataStats,!0;case\"default\":return ret.v=Kusto.Data.Common.DatabaseShowFlavor.Default,!0;default:break}if(!ignoreInts){var reti={v:0};if(System.Int32.tryParse(value,reti))return ret.v=reti.v,!0}return ret.v=0,!1},FastGetHashCode:function(that){return that},FastGetDescription:function(that){switch(that){case Kusto.Data.Common.DatabaseShowFlavor.Identity:return\"\";case Kusto.Data.Common.DatabaseShowFlavor.Verbose:return\"\";case Kusto.Data.Common.DatabaseShowFlavor.Policies:return\"\";case Kusto.Data.Common.DatabaseShowFlavor.DataStats:return\"\";case Kusto.Data.Common.DatabaseShowFlavor.Default:return\"\";default:return null}}}}});Bridge.define(\"Kusto.Data.Common.ExtendedDataConnectionError\",{statics:{methods:{FastToString:function(that){switch(that){case Kusto.Data.Common.DataConnectionError.ManagedIdentityUnauthorized:return\"ManagedIdentityUnauthorized\";case Kusto.Data.Common.DataConnectionError.ManagedIdentityNotFound:return\"ManagedIdentityNotFound\";case Kusto.Data.Common.DataConnectionError.UsingDeprecatedConnectionString:return\"UsingDeprecatedConnectionString\";default:break}return System.String.format(\"[unknown: {0}]\",[Bridge.box(that,System.Int32)])},FastIsDefined$1:function(value){var dummy={v:new Kusto.Data.Common.DataConnectionError};return Kusto.Data.Common.ExtendedDataConnectionError.FastTryParse(value,dummy,!1,!0)},FastIsDefined:function(value){switch(value){case Kusto.Data.Common.DataConnectionError.ManagedIdentityUnauthorized:return!0;case Kusto.Data.Common.DataConnectionError.ManagedIdentityNotFound:return!0;case Kusto.Data.Common.DataConnectionError.UsingDeprecatedConnectionString:return!0;default:return!1}},FastHasFlag$1:function(that,flag){return(that&flag)===flag},FastHasFlag:function(that,flag){return(that&flag)===flag},FastParse:function(value,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);var ret={v:new Kusto.Data.Common.DataConnectionError};if(Kusto.Data.Common.ExtendedDataConnectionError.FastTryParse(value,ret,ignoreCase,ignoreInts))return ret.v;throw new System.Exception(\"Invalid enum value: \"+(value||\"\"));},FastTryParse:function(value,ret,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);switch(value){case\"ManagedIdentityUnauthorized\":return ret.v=Kusto.Data.Common.DataConnectionError.ManagedIdentityUnauthorized,!0;case\"ManagedIdentityNotFound\":return ret.v=Kusto.Data.Common.DataConnectionError.ManagedIdentityNotFound,!0;case\"UsingDeprecatedConnectionString\":return ret.v=Kusto.Data.Common.DataConnectionError.UsingDeprecatedConnectionString,!0;default:break}if(ignoreCase&&!System.String.isNullOrEmpty(value))switch(value.toLowerCase()){case\"managedidentityunauthorized\":return ret.v=Kusto.Data.Common.DataConnectionError.ManagedIdentityUnauthorized,!0;case\"managedidentitynotfound\":return ret.v=Kusto.Data.Common.DataConnectionError.ManagedIdentityNotFound,!0;case\"usingdeprecatedconnectionstring\":return ret.v=Kusto.Data.Common.DataConnectionError.UsingDeprecatedConnectionString,!0;default:break}if(!ignoreInts){var reti={v:0};if(System.Int32.tryParse(value,reti))return ret.v=reti.v,!0}return ret.v=0,!1},FastGetHashCode:function(that){return that},FastGetDescription:function(that){switch(that){case Kusto.Data.Common.DataConnectionError.ManagedIdentityUnauthorized:return\"Managed Identity doesn't have sufficient authorizations. This likely indicates that the user didn't provide the Managed Identity with the necessary role or scope.\";case Kusto.Data.Common.DataConnectionError.ManagedIdentityNotFound:return\"Managed Identity doesn't exist in the cluster. This likely indicates the user didn't link their Managed Identity to this ADX cluster.\";case Kusto.Data.Common.DataConnectionError.UsingDeprecatedConnectionString:return\"Data Connection authenticates using a connection string instead of a managed identity, which is deprecated.\";default:return null}}}}});Bridge.define(\"Kusto.Data.Common.ExtendedDataRecoverability\",{statics:{methods:{FastToString:function(that){switch(that){case Kusto.Data.Common.DataRecoverability.Unknown:return\"Unknown\";case Kusto.Data.Common.DataRecoverability.Enabled:return\"Enabled\";case Kusto.Data.Common.DataRecoverability.Disabled:return\"Disabled\";default:break}return System.String.format(\"[unknown: {0}]\",[Bridge.box(that,System.Int32)])},FastIsDefined$1:function(value){var dummy={v:new Kusto.Data.Common.DataRecoverability};return Kusto.Data.Common.ExtendedDataRecoverability.FastTryParse(value,dummy,!1,!0)},FastIsDefined:function(value){switch(value){case Kusto.Data.Common.DataRecoverability.Unknown:return!0;case Kusto.Data.Common.DataRecoverability.Enabled:return!0;case Kusto.Data.Common.DataRecoverability.Disabled:return!0;default:return!1}},FastHasFlag$1:function(that,flag){return(that&flag)===flag},FastHasFlag:function(that,flag){return(that&flag)===flag},FastParse:function(value,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);var ret={v:new Kusto.Data.Common.DataRecoverability};if(Kusto.Data.Common.ExtendedDataRecoverability.FastTryParse(value,ret,ignoreCase,ignoreInts))return ret.v;throw new System.Exception(\"Invalid enum value: \"+(value||\"\"));},FastTryParse:function(value,ret,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);switch(value){case\"0\":case\"Unknown\":return ret.v=Kusto.Data.Common.DataRecoverability.Unknown,!0;case\"1\":case\"Enabled\":return ret.v=Kusto.Data.Common.DataRecoverability.Enabled,!0;case\"2\":case\"Disabled\":return ret.v=Kusto.Data.Common.DataRecoverability.Disabled,!0;default:break}if(ignoreCase&&!System.String.isNullOrEmpty(value))switch(value.toLowerCase()){case\"unknown\":return ret.v=Kusto.Data.Common.DataRecoverability.Unknown,!0;case\"enabled\":return ret.v=Kusto.Data.Common.DataRecoverability.Enabled,!0;case\"disabled\":return ret.v=Kusto.Data.Common.DataRecoverability.Disabled,!0;default:break}if(!ignoreInts){var reti={v:0};if(System.Int32.tryParse(value,reti))return ret.v=reti.v,!0}return ret.v=0,!1},FastGetHashCode:function(that){return that},FastGetDescription:function(that){switch(that){case Kusto.Data.Common.DataRecoverability.Unknown:return\"\";case Kusto.Data.Common.DataRecoverability.Enabled:return\"\";case Kusto.Data.Common.DataRecoverability.Disabled:return\"\";default:return null}}}}});Bridge.define(\"Kusto.Data.Common.ExtendedDataSourceCompressionType\",{statics:{methods:{FastToString:function(that){switch(that){case Kusto.Data.Common.DataSourceCompressionType.None:return\"None\";case Kusto.Data.Common.DataSourceCompressionType.GZip:return\"GZip\";case Kusto.Data.Common.DataSourceCompressionType.Zip:return\"Zip\";default:break}return System.String.format(\"[unknown: {0}]\",[Bridge.box(that,System.Int32)])},FastIsDefined$1:function(value){var dummy={v:new Kusto.Data.Common.DataSourceCompressionType};return Kusto.Data.Common.ExtendedDataSourceCompressionType.FastTryParse(value,dummy,!1,!0)},FastIsDefined:function(value){switch(value){case Kusto.Data.Common.DataSourceCompressionType.None:return!0;case Kusto.Data.Common.DataSourceCompressionType.GZip:return!0;case Kusto.Data.Common.DataSourceCompressionType.Zip:return!0;default:return!1}},FastHasFlag$1:function(that,flag){return(that&flag)===flag},FastHasFlag:function(that,flag){return(that&flag)===flag},FastParse:function(value,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);var ret={v:new Kusto.Data.Common.DataSourceCompressionType};if(Kusto.Data.Common.ExtendedDataSourceCompressionType.FastTryParse(value,ret,ignoreCase,ignoreInts))return ret.v;throw new System.Exception(\"Invalid enum value: \"+(value||\"\"));},FastTryParse:function(value,ret,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);switch(value){case\"0\":case\"None\":return ret.v=Kusto.Data.Common.DataSourceCompressionType.None,!0;case\"1\":case\"GZip\":return ret.v=Kusto.Data.Common.DataSourceCompressionType.GZip,!0;case\"2\":case\"Zip\":return ret.v=Kusto.Data.Common.DataSourceCompressionType.Zip,!0;default:break}if(ignoreCase&&!System.String.isNullOrEmpty(value))switch(value.toLowerCase()){case\"none\":return ret.v=Kusto.Data.Common.DataSourceCompressionType.None,!0;case\"gzip\":return ret.v=Kusto.Data.Common.DataSourceCompressionType.GZip,!0;case\"zip\":return ret.v=Kusto.Data.Common.DataSourceCompressionType.Zip,!0;default:break}if(!ignoreInts){var reti={v:0};if(System.Int32.tryParse(value,reti))return ret.v=reti.v,!0}return ret.v=0,!1},FastGetHashCode:function(that){return that},FastGetDescription:function(that){switch(that){case Kusto.Data.Common.DataSourceCompressionType.None:return\"No compression\";case Kusto.Data.Common.DataSourceCompressionType.GZip:return\"GZip compression\";case Kusto.Data.Common.DataSourceCompressionType.Zip:return\"Zip compression\";default:return null}}}}});Bridge.define(\"Kusto.Data.Common.ExtendedEntityType\",{statics:{methods:{FastToString:function(that){switch(that){case Kusto.Data.Common.EntityType.Unknown:return\"Unknown\";case Kusto.Data.Common.EntityType.Cluster:return\"Cluster\";case Kusto.Data.Common.EntityType.Database:return\"Database\";case Kusto.Data.Common.EntityType.Table:return\"Table\";case Kusto.Data.Common.EntityType.Column:return\"Column\";case Kusto.Data.Common.EntityType.Function:return\"Function\";case Kusto.Data.Common.EntityType.ExternalTable:return\"ExternalTable\";case Kusto.Data.Common.EntityType.MaterializedView:return\"MaterializedView\";case Kusto.Data.Common.EntityType.EntityGroup:return\"EntityGroup\";default:break}return System.String.format(\"[unknown: {0}]\",[Bridge.box(that,System.Int32)])},FastIsDefined$1:function(value){var dummy={v:new Kusto.Data.Common.EntityType};return Kusto.Data.Common.ExtendedEntityType.FastTryParse(value,dummy,!1,!0)},FastIsDefined:function(value){switch(value){case Kusto.Data.Common.EntityType.Unknown:return!0;case Kusto.Data.Common.EntityType.Cluster:return!0;case Kusto.Data.Common.EntityType.Database:return!0;case Kusto.Data.Common.EntityType.Table:return!0;case Kusto.Data.Common.EntityType.Column:return!0;case Kusto.Data.Common.EntityType.Function:return!0;case Kusto.Data.Common.EntityType.ExternalTable:return!0;case Kusto.Data.Common.EntityType.MaterializedView:return!0;case Kusto.Data.Common.EntityType.EntityGroup:return!0;default:return!1}},FastHasFlag$1:function(that,flag){return(that&flag)===flag},FastHasFlag:function(that,flag){return(that&flag)===flag},FastParse:function(value,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);var ret={v:new Kusto.Data.Common.EntityType};if(Kusto.Data.Common.ExtendedEntityType.FastTryParse(value,ret,ignoreCase,ignoreInts))return ret.v;throw new System.Exception(\"Invalid enum value: \"+(value||\"\"));},FastTryParse:function(value,ret,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);switch(value){case\"0\":case\"Unknown\":return ret.v=Kusto.Data.Common.EntityType.Unknown,!0;case\"1\":case\"Cluster\":return ret.v=Kusto.Data.Common.EntityType.Cluster,!0;case\"2\":case\"Database\":return ret.v=Kusto.Data.Common.EntityType.Database,!0;case\"3\":case\"Table\":return ret.v=Kusto.Data.Common.EntityType.Table,!0;case\"4\":case\"Column\":return ret.v=Kusto.Data.Common.EntityType.Column,!0;case\"5\":case\"Function\":return ret.v=Kusto.Data.Common.EntityType.Function,!0;case\"6\":case\"ExternalTable\":return ret.v=Kusto.Data.Common.EntityType.ExternalTable,!0;case\"7\":case\"MaterializedView\":case\"materialized-view\":return ret.v=Kusto.Data.Common.EntityType.MaterializedView,!0;case\"8\":case\"EntityGroup\":return ret.v=Kusto.Data.Common.EntityType.EntityGroup,!0;default:break}if(ignoreCase&&!System.String.isNullOrEmpty(value))switch(value.toLowerCase()){case\"unknown\":return ret.v=Kusto.Data.Common.EntityType.Unknown,!0;case\"cluster\":return ret.v=Kusto.Data.Common.EntityType.Cluster,!0;case\"database\":return ret.v=Kusto.Data.Common.EntityType.Database,!0;case\"table\":return ret.v=Kusto.Data.Common.EntityType.Table,!0;case\"column\":return ret.v=Kusto.Data.Common.EntityType.Column,!0;case\"function\":return ret.v=Kusto.Data.Common.EntityType.Function,!0;case\"externaltable\":return ret.v=Kusto.Data.Common.EntityType.ExternalTable,!0;case\"materializedview\":case\"materialized-view\":return ret.v=Kusto.Data.Common.EntityType.MaterializedView,!0;case\"entitygroup\":return ret.v=Kusto.Data.Common.EntityType.EntityGroup,!0;default:break}if(!ignoreInts){var reti={v:0};if(System.Int32.tryParse(value,reti))return ret.v=reti.v,!0}return ret.v=0,!1},FastGetHashCode:function(that){return that},FastGetDescription:function(that){switch(that){case Kusto.Data.Common.EntityType.Unknown:return\"Unknown\";case Kusto.Data.Common.EntityType.Cluster:return\"Cluster entity type\";case Kusto.Data.Common.EntityType.Database:return\"Database entity type\";case Kusto.Data.Common.EntityType.Table:return\"Table entity type\";case Kusto.Data.Common.EntityType.Column:return\"Column entity type\";case Kusto.Data.Common.EntityType.Function:return\"Function entity type\";case Kusto.Data.Common.EntityType.ExternalTable:return\"External table entity type\";case Kusto.Data.Common.EntityType.MaterializedView:return\"Materialized view entity type\";case Kusto.Data.Common.EntityType.EntityGroup:return\"Entity Group entity type\";default:return null}}}}});Bridge.define(\"Kusto.Data.Common.ExtendedExtentsMergeLookbackPeriodKind\",{statics:{methods:{FastToString:function(that){switch(that){case Kusto.Data.Common.ExtentsMergeLookbackPeriodKind.Default:return\"Default\";case Kusto.Data.Common.ExtentsMergeLookbackPeriodKind.HotCache:return\"HotCache\";case Kusto.Data.Common.ExtentsMergeLookbackPeriodKind.All:return\"All\";case Kusto.Data.Common.ExtentsMergeLookbackPeriodKind.Custom:return\"Custom\";default:break}return System.String.format(\"[unknown: {0}]\",[Bridge.box(that,System.Int32)])},FastIsDefined$1:function(value){var dummy={v:new Kusto.Data.Common.ExtentsMergeLookbackPeriodKind};return Kusto.Data.Common.ExtendedExtentsMergeLookbackPeriodKind.FastTryParse(value,dummy,!1,!0)},FastIsDefined:function(value){switch(value){case Kusto.Data.Common.ExtentsMergeLookbackPeriodKind.Default:return!0;case Kusto.Data.Common.ExtentsMergeLookbackPeriodKind.HotCache:return!0;case Kusto.Data.Common.ExtentsMergeLookbackPeriodKind.All:return!0;case Kusto.Data.Common.ExtentsMergeLookbackPeriodKind.Custom:return!0;default:return!1}},FastHasFlag$1:function(that,flag){return(that&flag)===flag},FastHasFlag:function(that,flag){return(that&flag)===flag},FastParse:function(value,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);var ret={v:new Kusto.Data.Common.ExtentsMergeLookbackPeriodKind};if(Kusto.Data.Common.ExtendedExtentsMergeLookbackPeriodKind.FastTryParse(value,ret,ignoreCase,ignoreInts))return ret.v;throw new System.Exception(\"Invalid enum value: \"+(value||\"\"));},FastTryParse:function(value,ret,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);switch(value){case\"0\":case\"Default\":return ret.v=Kusto.Data.Common.ExtentsMergeLookbackPeriodKind.Default,!0;case\"1\":case\"HotCache\":return ret.v=Kusto.Data.Common.ExtentsMergeLookbackPeriodKind.HotCache,!0;case\"2\":case\"All\":return ret.v=Kusto.Data.Common.ExtentsMergeLookbackPeriodKind.All,!0;case\"3\":case\"Custom\":return ret.v=Kusto.Data.Common.ExtentsMergeLookbackPeriodKind.Custom,!0;default:break}if(ignoreCase&&!System.String.isNullOrEmpty(value))switch(value.toLowerCase()){case\"default\":return ret.v=Kusto.Data.Common.ExtentsMergeLookbackPeriodKind.Default,!0;case\"hotcache\":return ret.v=Kusto.Data.Common.ExtentsMergeLookbackPeriodKind.HotCache,!0;case\"all\":return ret.v=Kusto.Data.Common.ExtentsMergeLookbackPeriodKind.All,!0;case\"custom\":return ret.v=Kusto.Data.Common.ExtentsMergeLookbackPeriodKind.Custom,!0;default:break}if(!ignoreInts){var reti={v:0};if(System.Int32.tryParse(value,reti))return ret.v=reti.v,!0}return ret.v=0,!1},FastGetHashCode:function(that){return that},FastGetDescription:function(that){switch(that){case Kusto.Data.Common.ExtentsMergeLookbackPeriodKind.Default:return\"The default lookback period, as defined by the system\";case Kusto.Data.Common.ExtentsMergeLookbackPeriodKind.HotCache:return\"The hot cache period\";case Kusto.Data.Common.ExtentsMergeLookbackPeriodKind.All:return\"The entire period in which data exists\";case Kusto.Data.Common.ExtentsMergeLookbackPeriodKind.Custom:return\"A custom period, provided by the admin of the entity\";default:return null}}}}});Bridge.define(\"Kusto.Data.Common.ExtendedIngestionErrorCategory\",{statics:{methods:{FastToString:function(that){switch(that){case Kusto.Data.Common.IngestionErrorCategory.Unknown:return\"Unknown\";case Kusto.Data.Common.IngestionErrorCategory.InternalServiceError:return\"InternalServiceError\";case Kusto.Data.Common.IngestionErrorCategory.BadFormat:return\"BadFormat\";case Kusto.Data.Common.IngestionErrorCategory.BadRequest:return\"BadRequest\";case Kusto.Data.Common.IngestionErrorCategory.UpdatePolicyFailure:return\"UpdatePolicyFailure\";case Kusto.Data.Common.IngestionErrorCategory.EntityNotFound:return\"EntityNotFound\";case Kusto.Data.Common.IngestionErrorCategory.UserAccessNotAuthorized:return\"UserAccessNotAuthorized\";case Kusto.Data.Common.IngestionErrorCategory.DataAccessNotAuthorized:return\"DataAccessNotAuthorized\";case Kusto.Data.Common.IngestionErrorCategory.FileTooLarge:return\"FileTooLarge\";case Kusto.Data.Common.IngestionErrorCategory.ThrottledOnEngine:return\"ThrottledOnEngine\";case Kusto.Data.Common.IngestionErrorCategory.DownloadFailed:return\"DownloadFailed\";case Kusto.Data.Common.IngestionErrorCategory.RetryAttemptsExceeded:return\"RetryAttemptsExceeded\";case Kusto.Data.Common.IngestionErrorCategory.BlobAlreadyReceived:return\"BlobAlreadyReceived\";case Kusto.Data.Common.IngestionErrorCategory.Cancelled:return\"Cancelled\";case Kusto.Data.Common.IngestionErrorCategory.Configuration:return\"Configuration\";default:break}return System.String.format(\"[unknown: {0}]\",[Bridge.box(that,System.Int32)])},FastIsDefined$1:function(value){var dummy={v:new Kusto.Data.Common.IngestionErrorCategory};return Kusto.Data.Common.ExtendedIngestionErrorCategory.FastTryParse(value,dummy,!1,!0)},FastIsDefined:function(value){switch(value){case Kusto.Data.Common.IngestionErrorCategory.Unknown:return!0;case Kusto.Data.Common.IngestionErrorCategory.InternalServiceError:return!0;case Kusto.Data.Common.IngestionErrorCategory.BadFormat:return!0;case Kusto.Data.Common.IngestionErrorCategory.BadRequest:return!0;case Kusto.Data.Common.IngestionErrorCategory.UpdatePolicyFailure:return!0;case Kusto.Data.Common.IngestionErrorCategory.EntityNotFound:return!0;case Kusto.Data.Common.IngestionErrorCategory.UserAccessNotAuthorized:return!0;case Kusto.Data.Common.IngestionErrorCategory.DataAccessNotAuthorized:return!0;case Kusto.Data.Common.IngestionErrorCategory.FileTooLarge:return!0;case Kusto.Data.Common.IngestionErrorCategory.ThrottledOnEngine:return!0;case Kusto.Data.Common.IngestionErrorCategory.DownloadFailed:return!0;case Kusto.Data.Common.IngestionErrorCategory.RetryAttemptsExceeded:return!0;case Kusto.Data.Common.IngestionErrorCategory.BlobAlreadyReceived:return!0;case Kusto.Data.Common.IngestionErrorCategory.Cancelled:return!0;case Kusto.Data.Common.IngestionErrorCategory.Configuration:return!0;default:return!1}},FastHasFlag$1:function(that,flag){return(that&flag)===flag},FastHasFlag:function(that,flag){return(that&flag)===flag},FastParse:function(value,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);var ret={v:new Kusto.Data.Common.IngestionErrorCategory};if(Kusto.Data.Common.ExtendedIngestionErrorCategory.FastTryParse(value,ret,ignoreCase,ignoreInts))return ret.v;throw new System.Exception(\"Invalid enum value: \"+(value||\"\"));},FastTryParse:function(value,ret,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);switch(value){case\"Unknown\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.Unknown,!0;case\"InternalServiceError\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.InternalServiceError,!0;case\"BadFormat\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.BadFormat,!0;case\"BadRequest\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.BadRequest,!0;case\"UpdatePolicyFailure\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.UpdatePolicyFailure,!0;case\"EntityNotFound\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.EntityNotFound,!0;case\"UserAccessNotAuthorized\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.UserAccessNotAuthorized,!0;case\"DataAccessNotAuthorized\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.DataAccessNotAuthorized,!0;case\"FileTooLarge\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.FileTooLarge,!0;case\"ThrottledOnEngine\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.ThrottledOnEngine,!0;case\"DownloadFailed\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.DownloadFailed,!0;case\"RetryAttemptsExceeded\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.RetryAttemptsExceeded,!0;case\"BlobAlreadyReceived\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.BlobAlreadyReceived,!0;case\"Cancelled\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.Cancelled,!0;case\"Configuration\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.Configuration,!0;default:break}if(ignoreCase&&!System.String.isNullOrEmpty(value))switch(value.toLowerCase()){case\"unknown\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.Unknown,!0;case\"internalserviceerror\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.InternalServiceError,!0;case\"badformat\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.BadFormat,!0;case\"badrequest\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.BadRequest,!0;case\"updatepolicyfailure\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.UpdatePolicyFailure,!0;case\"entitynotfound\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.EntityNotFound,!0;case\"useraccessnotauthorized\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.UserAccessNotAuthorized,!0;case\"dataaccessnotauthorized\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.DataAccessNotAuthorized,!0;case\"filetoolarge\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.FileTooLarge,!0;case\"throttledonengine\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.ThrottledOnEngine,!0;case\"downloadfailed\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.DownloadFailed,!0;case\"retryattemptsexceeded\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.RetryAttemptsExceeded,!0;case\"blobalreadyreceived\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.BlobAlreadyReceived,!0;case\"cancelled\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.Cancelled,!0;case\"configuration\":return ret.v=Kusto.Data.Common.IngestionErrorCategory.Configuration,!0;default:break}if(!ignoreInts){var reti={v:0};if(System.Int32.tryParse(value,reti))return ret.v=reti.v,!0}return ret.v=0,!1},FastGetHashCode:function(that){return that},FastGetDescription:function(that){switch(that){case Kusto.Data.Common.IngestionErrorCategory.Unknown:return\"\";case Kusto.Data.Common.IngestionErrorCategory.InternalServiceError:return\"\";case Kusto.Data.Common.IngestionErrorCategory.BadFormat:return\"\";case Kusto.Data.Common.IngestionErrorCategory.BadRequest:return\"\";case Kusto.Data.Common.IngestionErrorCategory.UpdatePolicyFailure:return\"\";case Kusto.Data.Common.IngestionErrorCategory.EntityNotFound:return\"\";case Kusto.Data.Common.IngestionErrorCategory.UserAccessNotAuthorized:return\"\";case Kusto.Data.Common.IngestionErrorCategory.DataAccessNotAuthorized:return\"\";case Kusto.Data.Common.IngestionErrorCategory.FileTooLarge:return\"\";case Kusto.Data.Common.IngestionErrorCategory.ThrottledOnEngine:return\"\";case Kusto.Data.Common.IngestionErrorCategory.DownloadFailed:return\"\";case Kusto.Data.Common.IngestionErrorCategory.RetryAttemptsExceeded:return\"\";case Kusto.Data.Common.IngestionErrorCategory.BlobAlreadyReceived:return\"\";case Kusto.Data.Common.IngestionErrorCategory.Cancelled:return\"\";case Kusto.Data.Common.IngestionErrorCategory.Configuration:return\"\";default:return null}}}}});Bridge.define(\"Kusto.Data.Common.ExtendedIngestionErrorCode\",{statics:{methods:{FastToString:function(that){switch(that){case Kusto.Data.Common.IngestionErrorCode.Unknown:return\"Unknown\";case Kusto.Data.Common.IngestionErrorCode.OutOfMemory:return\"OutOfMemory\";case Kusto.Data.Common.IngestionErrorCode.Stream_WrongNumberOfFields:return\"Stream_WrongNumberOfFields\";case Kusto.Data.Common.IngestionErrorCode.Stream_InputStreamTooLarge:return\"Stream_InputStreamTooLarge\";case Kusto.Data.Common.IngestionErrorCode.Stream_NoDataToIngest:return\"Stream_NoDataToIngest\";case Kusto.Data.Common.IngestionErrorCode.Stream_ClosingQuoteMissing:return\"Stream_ClosingQuoteMissing\";case Kusto.Data.Common.IngestionErrorCode.Stream_DynamicPropertyBagTooLarge:return\"Stream_DynamicPropertyBagTooLarge\";case Kusto.Data.Common.IngestionErrorCode.Download_SourceNotFound:return\"Download_SourceNotFound\";case Kusto.Data.Common.IngestionErrorCode.Download_AccessConditionNotSatisfied:return\"Download_AccessConditionNotSatisfied\";case Kusto.Data.Common.IngestionErrorCode.Download_Forbidden:return\"Download_Forbidden\";case Kusto.Data.Common.IngestionErrorCode.Download_AccountNotFound:return\"Download_AccountNotFound\";case Kusto.Data.Common.IngestionErrorCode.Download_TransientNameResolutionFailure:return\"Download_TransientNameResolutionFailure\";case Kusto.Data.Common.IngestionErrorCode.Download_BadRequest:return\"Download_BadRequest\";case Kusto.Data.Common.IngestionErrorCode.Download_NotTransient:return\"Download_NotTransient\";case Kusto.Data.Common.IngestionErrorCode.Download_UnknownError:return\"Download_UnknownError\";case Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_QuerySchemaDoesNotMatchTableSchema:return\"UpdatePolicy_QuerySchemaDoesNotMatchTableSchema\";case Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_FailedDescendantTransaction:return\"UpdatePolicy_FailedDescendantTransaction\";case Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_IngestionError:return\"UpdatePolicy_IngestionError\";case Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_UnknownError:return\"UpdatePolicy_UnknownError\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_MissingMappingFailure:return\"BadRequest_MissingMappingFailure\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidBlob:return\"BadRequest_InvalidBlob\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyBlob:return\"BadRequest_EmptyBlob\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_NoRecordsOrWrongFormat:return\"BadRequest_NoRecordsOrWrongFormat\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyArchive:return\"BadRequest_EmptyArchive\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidArchive:return\"BadRequest_InvalidArchive\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidBlobUri:return\"BadRequest_InvalidBlobUri\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyBlobUri:return\"BadRequest_EmptyBlobUri\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_DatabaseNotExist:return\"BadRequest_DatabaseNotExist\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_TableNotExist:return\"BadRequest_TableNotExist\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidKustoIdentityToken:return\"BadRequest_InvalidKustoIdentityToken\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_FileTooLarge:return\"BadRequest_FileTooLarge\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_TableAccessDenied:return\"BadRequest_TableAccessDenied\";case Kusto.Data.Common.IngestionErrorCode.General_RetryAttemptsExceeded:return\"General_RetryAttemptsExceeded\";case Kusto.Data.Common.IngestionErrorCode.General_BadRequest:return\"General_BadRequest\";case Kusto.Data.Common.IngestionErrorCode.General_InternalServerError:return\"General_InternalServerError\";case Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_Cyclic_Update_Not_Allowed:return\"UpdatePolicy_Cyclic_Update_Not_Allowed\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidMapping:return\"BadRequest_InvalidMapping\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidMappingReference:return\"BadRequest_InvalidMappingReference\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_MappingReferenceWasNotFound:return\"BadRequest_MappingReferenceWasNotFound\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_FormatNotSupported:return\"BadRequest_FormatNotSupported\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_DuplicateMapping:return\"BadRequest_DuplicateMapping\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_CorruptedMessage:return\"BadRequest_CorruptedMessage\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_InconsistentMapping:return\"BadRequest_InconsistentMapping\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_SyntaxError:return\"BadRequest_SyntaxError\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidOrEmptyTableName:return\"BadRequest_InvalidOrEmptyTableName\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyDatabaseName:return\"BadRequest_EmptyDatabaseName\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyTenantIdentifier:return\"BadRequest_EmptyTenantIdentifier\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyMappingReference:return\"BadRequest_EmptyMappingReference\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_EntityNotFound:return\"BadRequest_EntityNotFound\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_EntityNameIsNotValid:return\"BadRequest_EntityNameIsNotValid\";case Kusto.Data.Common.IngestionErrorCode.General_AbandonedIngestion:return\"General_AbandonedIngestion\";case Kusto.Data.Common.IngestionErrorCode.General_ThrottledIngestion:return\"General_ThrottledIngestion\";case Kusto.Data.Common.IngestionErrorCode.General_TransientSchemaMismatch:return\"General_TransientSchemaMismatch\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_DatabaseAccessDenied:return\"BadRequest_DatabaseAccessDenied\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_UnexpectedCharacterInInputStream:return\"BadRequest_UnexpectedCharacterInInputStream\";case Kusto.Data.Common.IngestionErrorCode.Forbidden:return\"Forbidden\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_ZeroRetentionPolicyWithNoUpdatePolicy:return\"BadRequest_ZeroRetentionPolicyWithNoUpdatePolicy\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_CreationTimeEarlierThanSoftDeletePeriod:return\"BadRequest_CreationTimeEarlierThanSoftDeletePeriod\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_NotSupported:return\"BadRequest_NotSupported\";case Kusto.Data.Common.IngestionErrorCode.Skipped_IngestByTagAlreadyExists:return\"Skipped_IngestByTagAlreadyExists\";case Kusto.Data.Common.IngestionErrorCode.Timeout:return\"Timeout\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_MalformedIngestionProperty:return\"BadRequest_MalformedIngestionProperty\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_IngestionPropertyNotSupportedInThisContext:return\"BadRequest_IngestionPropertyNotSupportedInThisContext\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidAuthentication:return\"BadRequest_InvalidAuthentication\";case Kusto.Data.Common.IngestionErrorCode.BlobAlreadyReceived_BlobAlreadyFoundInBatch:return\"BlobAlreadyReceived_BlobAlreadyFoundInBatch\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidManagedIdentity:return\"BadRequest_InvalidManagedIdentity\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_DataCapacityLimitReached:return\"BadRequest_DataCapacityLimitReached\";case Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_BadRequest:return\"UpdatePolicy_BadRequest\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_NonMultiDatabaseDataConnection:return\"BadRequest_NonMultiDatabaseDataConnection\";case Kusto.Data.Common.IngestionErrorCode.Cancelled:return\"Cancelled\";case Kusto.Data.Common.IngestionErrorCode.AbandonedByConfiguration_StorageAccount:return\"AbandonedByConfiguration_StorageAccount\";case Kusto.Data.Common.IngestionErrorCode.AbandonedByConfiguration_DatabaseAndTable:return\"AbandonedByConfiguration_DatabaseAndTable\";default:break}return System.String.format(\"[unknown: {0}]\",[Bridge.box(that,System.UInt32)])},FastIsDefined:function(value){var dummy={v:new Kusto.Data.Common.IngestionErrorCode};return Kusto.Data.Common.ExtendedIngestionErrorCode.FastTryParse(value,dummy,!1,!0)},FastIsDefined$1:function(value){switch(value){case Kusto.Data.Common.IngestionErrorCode.Unknown:return!0;case Kusto.Data.Common.IngestionErrorCode.OutOfMemory:return!0;case Kusto.Data.Common.IngestionErrorCode.Stream_WrongNumberOfFields:return!0;case Kusto.Data.Common.IngestionErrorCode.Stream_InputStreamTooLarge:return!0;case Kusto.Data.Common.IngestionErrorCode.Stream_NoDataToIngest:return!0;case Kusto.Data.Common.IngestionErrorCode.Stream_ClosingQuoteMissing:return!0;case Kusto.Data.Common.IngestionErrorCode.Stream_DynamicPropertyBagTooLarge:return!0;case Kusto.Data.Common.IngestionErrorCode.Download_SourceNotFound:return!0;case Kusto.Data.Common.IngestionErrorCode.Download_AccessConditionNotSatisfied:return!0;case Kusto.Data.Common.IngestionErrorCode.Download_Forbidden:return!0;case Kusto.Data.Common.IngestionErrorCode.Download_AccountNotFound:return!0;case Kusto.Data.Common.IngestionErrorCode.Download_TransientNameResolutionFailure:return!0;case Kusto.Data.Common.IngestionErrorCode.Download_BadRequest:return!0;case Kusto.Data.Common.IngestionErrorCode.Download_NotTransient:return!0;case Kusto.Data.Common.IngestionErrorCode.Download_UnknownError:return!0;case Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_QuerySchemaDoesNotMatchTableSchema:return!0;case Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_FailedDescendantTransaction:return!0;case Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_IngestionError:return!0;case Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_UnknownError:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_MissingMappingFailure:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidBlob:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyBlob:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_NoRecordsOrWrongFormat:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyArchive:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidArchive:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidBlobUri:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyBlobUri:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_DatabaseNotExist:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_TableNotExist:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidKustoIdentityToken:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_FileTooLarge:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_TableAccessDenied:return!0;case Kusto.Data.Common.IngestionErrorCode.General_RetryAttemptsExceeded:return!0;case Kusto.Data.Common.IngestionErrorCode.General_BadRequest:return!0;case Kusto.Data.Common.IngestionErrorCode.General_InternalServerError:return!0;case Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_Cyclic_Update_Not_Allowed:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidMapping:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidMappingReference:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_MappingReferenceWasNotFound:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_FormatNotSupported:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_DuplicateMapping:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_CorruptedMessage:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_InconsistentMapping:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_SyntaxError:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidOrEmptyTableName:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyDatabaseName:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyTenantIdentifier:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyMappingReference:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_EntityNotFound:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_EntityNameIsNotValid:return!0;case Kusto.Data.Common.IngestionErrorCode.General_AbandonedIngestion:return!0;case Kusto.Data.Common.IngestionErrorCode.General_ThrottledIngestion:return!0;case Kusto.Data.Common.IngestionErrorCode.General_TransientSchemaMismatch:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_DatabaseAccessDenied:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_UnexpectedCharacterInInputStream:return!0;case Kusto.Data.Common.IngestionErrorCode.Forbidden:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_ZeroRetentionPolicyWithNoUpdatePolicy:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_CreationTimeEarlierThanSoftDeletePeriod:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_NotSupported:return!0;case Kusto.Data.Common.IngestionErrorCode.Skipped_IngestByTagAlreadyExists:return!0;case Kusto.Data.Common.IngestionErrorCode.Timeout:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_MalformedIngestionProperty:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_IngestionPropertyNotSupportedInThisContext:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidAuthentication:return!0;case Kusto.Data.Common.IngestionErrorCode.BlobAlreadyReceived_BlobAlreadyFoundInBatch:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidManagedIdentity:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_DataCapacityLimitReached:return!0;case Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_BadRequest:return!0;case Kusto.Data.Common.IngestionErrorCode.BadRequest_NonMultiDatabaseDataConnection:return!0;case Kusto.Data.Common.IngestionErrorCode.Cancelled:return!0;case Kusto.Data.Common.IngestionErrorCode.AbandonedByConfiguration_StorageAccount:return!0;case Kusto.Data.Common.IngestionErrorCode.AbandonedByConfiguration_DatabaseAndTable:return!0;default:return!1}},FastHasFlag$1:function(that,flag){return(that&flag)>>>0===flag},FastHasFlag:function(that,flag){return(that&flag)>>>0===flag},FastParse:function(value,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);var ret={v:new Kusto.Data.Common.IngestionErrorCode};if(Kusto.Data.Common.ExtendedIngestionErrorCode.FastTryParse(value,ret,ignoreCase,ignoreInts))return ret.v;throw new System.Exception(\"Invalid enum value: \"+(value||\"\"));},FastTryParse:function(value,ret,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);switch(value){case\"Unknown\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Unknown,!0;case\"0x80DA0007\":case\"OutOfMemory\":return ret.v=Kusto.Data.Common.IngestionErrorCode.OutOfMemory,!0;case\"0x80DA0008\":case\"Stream_WrongNumberOfFields\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Stream_WrongNumberOfFields,!0;case\"0x80DA0009\":case\"Stream_InputStreamTooLarge\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Stream_InputStreamTooLarge,!0;case\"Stream_NoDataToIngest\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Stream_NoDataToIngest,!0;case\"0x80DA000b\":case\"Stream_ClosingQuoteMissing\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Stream_ClosingQuoteMissing,!0;case\"0x80DA000E\":case\"Stream_DynamicPropertyBagTooLarge\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Stream_DynamicPropertyBagTooLarge,!0;case\"Download_SourceNotFound\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Download_SourceNotFound,!0;case\"Download_AccessConditionNotSatisfied\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Download_AccessConditionNotSatisfied,!0;case\"Download_Forbidden\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Download_Forbidden,!0;case\"Download_AccountNotFound\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Download_AccountNotFound,!0;case\"Download_TransientNameResolutionFailure\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Download_TransientNameResolutionFailure,!0;case\"Download_BadRequest\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Download_BadRequest,!0;case\"Download_NotTransient\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Download_NotTransient,!0;case\"Download_UnknownError\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Download_UnknownError,!0;case\"UpdatePolicy_QuerySchemaDoesNotMatchTableSchema\":return ret.v=Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_QuerySchemaDoesNotMatchTableSchema,!0;case\"UpdatePolicy_FailedDescendantTransaction\":return ret.v=Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_FailedDescendantTransaction,!0;case\"UpdatePolicy_IngestionError\":return ret.v=Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_IngestionError,!0;case\"UpdatePolicy_UnknownError\":return ret.v=Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_UnknownError,!0;case\"BadRequest_MissingMappingFailure\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_MissingMappingFailure,!0;case\"BadRequest_InvalidBlob\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidBlob,!0;case\"BadRequest_EmptyBlob\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyBlob,!0;case\"BadRequest_NoRecordsOrWrongFormat\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_NoRecordsOrWrongFormat,!0;case\"BadRequest_EmptyArchive\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyArchive,!0;case\"BadRequest_InvalidArchive\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidArchive,!0;case\"BadRequest_InvalidBlobUri\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidBlobUri,!0;case\"BadRequest_EmptyBlobUri\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyBlobUri,!0;case\"BadRequest_DatabaseNotExist\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_DatabaseNotExist,!0;case\"BadRequest_TableNotExist\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_TableNotExist,!0;case\"BadRequest_InvalidKustoIdentityToken\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidKustoIdentityToken,!0;case\"BadRequest_FileTooLarge\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_FileTooLarge,!0;case\"BadRequest_TableAccessDenied\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_TableAccessDenied,!0;case\"General_RetryAttemptsExceeded\":return ret.v=Kusto.Data.Common.IngestionErrorCode.General_RetryAttemptsExceeded,!0;case\"General_BadRequest\":return ret.v=Kusto.Data.Common.IngestionErrorCode.General_BadRequest,!0;case\"General_InternalServerError\":return ret.v=Kusto.Data.Common.IngestionErrorCode.General_InternalServerError,!0;case\"UpdatePolicy_Cyclic_Update_Not_Allowed\":return ret.v=Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_Cyclic_Update_Not_Allowed,!0;case\"BadRequest_InvalidMapping\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidMapping,!0;case\"BadRequest_InvalidMappingReference\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidMappingReference,!0;case\"BadRequest_MappingReferenceWasNotFound\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_MappingReferenceWasNotFound,!0;case\"BadRequest_FormatNotSupported\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_FormatNotSupported,!0;case\"BadRequest_DuplicateMapping\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_DuplicateMapping,!0;case\"BadRequest_CorruptedMessage\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_CorruptedMessage,!0;case\"BadRequest_InconsistentMapping\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_InconsistentMapping,!0;case\"BadRequest_SyntaxError\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_SyntaxError,!0;case\"BadRequest_InvalidOrEmptyTableName\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidOrEmptyTableName,!0;case\"BadRequest_EmptyDatabaseName\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyDatabaseName,!0;case\"BadRequest_EmptyTenantIdentifier\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyTenantIdentifier,!0;case\"BadRequest_EmptyMappingReference\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyMappingReference,!0;case\"BadRequest_EntityNotFound\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_EntityNotFound,!0;case\"BadRequest_EntityNameIsNotValid\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_EntityNameIsNotValid,!0;case\"General_AbandonedIngestion\":return ret.v=Kusto.Data.Common.IngestionErrorCode.General_AbandonedIngestion,!0;case\"General_ThrottledIngestion\":return ret.v=Kusto.Data.Common.IngestionErrorCode.General_ThrottledIngestion,!0;case\"General_TransientSchemaMismatch\":return ret.v=Kusto.Data.Common.IngestionErrorCode.General_TransientSchemaMismatch,!0;case\"BadRequest_DatabaseAccessDenied\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_DatabaseAccessDenied,!0;case\"BadRequest_UnexpectedCharacterInInputStream\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_UnexpectedCharacterInInputStream,!0;case\"Forbidden\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Forbidden,!0;case\"BadRequest_ZeroRetentionPolicyWithNoUpdatePolicy\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_ZeroRetentionPolicyWithNoUpdatePolicy,!0;case\"BadRequest_CreationTimeEarlierThanSoftDeletePeriod\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_CreationTimeEarlierThanSoftDeletePeriod,!0;case\"BadRequest_NotSupported\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_NotSupported,!0;case\"Skipped_IngestByTagAlreadyExists\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Skipped_IngestByTagAlreadyExists,!0;case\"0x80131505\":case\"Timeout\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Timeout,!0;case\"BadRequest_MalformedIngestionProperty\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_MalformedIngestionProperty,!0;case\"BadRequest_IngestionPropertyNotSupportedInThisContext\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_IngestionPropertyNotSupportedInThisContext,!0;case\"BadRequest_InvalidAuthentication\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidAuthentication,!0;case\"BlobAlreadyReceived_BlobAlreadyFoundInBatch\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BlobAlreadyReceived_BlobAlreadyFoundInBatch,!0;case\"BadRequest_InvalidManagedIdentity\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidManagedIdentity,!0;case\"BadRequest_DataCapacityLimitReached\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_DataCapacityLimitReached,!0;case\"UpdatePolicy_BadRequest\":return ret.v=Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_BadRequest,!0;case\"BadRequest_NonMultiDatabaseDataConnection\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_NonMultiDatabaseDataConnection,!0;case\"Cancelled\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Cancelled,!0;case\"AbandonedByConfiguration_StorageAccount\":return ret.v=Kusto.Data.Common.IngestionErrorCode.AbandonedByConfiguration_StorageAccount,!0;case\"AbandonedByConfiguration_DatabaseAndTable\":return ret.v=Kusto.Data.Common.IngestionErrorCode.AbandonedByConfiguration_DatabaseAndTable,!0;default:break}if(ignoreCase&&!System.String.isNullOrEmpty(value))switch(value.toLowerCase()){case\"unknown\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Unknown,!0;case\"outofmemory\":return ret.v=Kusto.Data.Common.IngestionErrorCode.OutOfMemory,!0;case\"stream_wrongnumberoffields\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Stream_WrongNumberOfFields,!0;case\"stream_inputstreamtoolarge\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Stream_InputStreamTooLarge,!0;case\"stream_nodatatoingest\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Stream_NoDataToIngest,!0;case\"stream_closingquotemissing\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Stream_ClosingQuoteMissing,!0;case\"stream_dynamicpropertybagtoolarge\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Stream_DynamicPropertyBagTooLarge,!0;case\"download_sourcenotfound\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Download_SourceNotFound,!0;case\"download_accessconditionnotsatisfied\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Download_AccessConditionNotSatisfied,!0;case\"download_forbidden\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Download_Forbidden,!0;case\"download_accountnotfound\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Download_AccountNotFound,!0;case\"download_transientnameresolutionfailure\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Download_TransientNameResolutionFailure,!0;case\"download_badrequest\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Download_BadRequest,!0;case\"download_nottransient\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Download_NotTransient,!0;case\"download_unknownerror\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Download_UnknownError,!0;case\"updatepolicy_queryschemadoesnotmatchtableschema\":return ret.v=Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_QuerySchemaDoesNotMatchTableSchema,!0;case\"updatepolicy_faileddescendanttransaction\":return ret.v=Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_FailedDescendantTransaction,!0;case\"updatepolicy_ingestionerror\":return ret.v=Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_IngestionError,!0;case\"updatepolicy_unknownerror\":return ret.v=Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_UnknownError,!0;case\"badrequest_missingmappingfailure\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_MissingMappingFailure,!0;case\"badrequest_invalidblob\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidBlob,!0;case\"badrequest_emptyblob\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyBlob,!0;case\"badrequest_norecordsorwrongformat\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_NoRecordsOrWrongFormat,!0;case\"badrequest_emptyarchive\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyArchive,!0;case\"badrequest_invalidarchive\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidArchive,!0;case\"badrequest_invalidbloburi\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidBlobUri,!0;case\"badrequest_emptybloburi\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyBlobUri,!0;case\"badrequest_databasenotexist\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_DatabaseNotExist,!0;case\"badrequest_tablenotexist\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_TableNotExist,!0;case\"badrequest_invalidkustoidentitytoken\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidKustoIdentityToken,!0;case\"badrequest_filetoolarge\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_FileTooLarge,!0;case\"badrequest_tableaccessdenied\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_TableAccessDenied,!0;case\"general_retryattemptsexceeded\":return ret.v=Kusto.Data.Common.IngestionErrorCode.General_RetryAttemptsExceeded,!0;case\"general_badrequest\":return ret.v=Kusto.Data.Common.IngestionErrorCode.General_BadRequest,!0;case\"general_internalservererror\":return ret.v=Kusto.Data.Common.IngestionErrorCode.General_InternalServerError,!0;case\"updatepolicy_cyclic_update_not_allowed\":return ret.v=Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_Cyclic_Update_Not_Allowed,!0;case\"badrequest_invalidmapping\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidMapping,!0;case\"badrequest_invalidmappingreference\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidMappingReference,!0;case\"badrequest_mappingreferencewasnotfound\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_MappingReferenceWasNotFound,!0;case\"badrequest_formatnotsupported\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_FormatNotSupported,!0;case\"badrequest_duplicatemapping\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_DuplicateMapping,!0;case\"badrequest_corruptedmessage\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_CorruptedMessage,!0;case\"badrequest_inconsistentmapping\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_InconsistentMapping,!0;case\"badrequest_syntaxerror\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_SyntaxError,!0;case\"badrequest_invalidoremptytablename\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidOrEmptyTableName,!0;case\"badrequest_emptydatabasename\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyDatabaseName,!0;case\"badrequest_emptytenantidentifier\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyTenantIdentifier,!0;case\"badrequest_emptymappingreference\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyMappingReference,!0;case\"badrequest_entitynotfound\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_EntityNotFound,!0;case\"badrequest_entitynameisnotvalid\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_EntityNameIsNotValid,!0;case\"general_abandonedingestion\":return ret.v=Kusto.Data.Common.IngestionErrorCode.General_AbandonedIngestion,!0;case\"general_throttledingestion\":return ret.v=Kusto.Data.Common.IngestionErrorCode.General_ThrottledIngestion,!0;case\"general_transientschemamismatch\":return ret.v=Kusto.Data.Common.IngestionErrorCode.General_TransientSchemaMismatch,!0;case\"badrequest_databaseaccessdenied\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_DatabaseAccessDenied,!0;case\"badrequest_unexpectedcharacterininputstream\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_UnexpectedCharacterInInputStream,!0;case\"forbidden\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Forbidden,!0;case\"badrequest_zeroretentionpolicywithnoupdatepolicy\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_ZeroRetentionPolicyWithNoUpdatePolicy,!0;case\"badrequest_creationtimeearlierthansoftdeleteperiod\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_CreationTimeEarlierThanSoftDeletePeriod,!0;case\"badrequest_notsupported\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_NotSupported,!0;case\"skipped_ingestbytagalreadyexists\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Skipped_IngestByTagAlreadyExists,!0;case\"timeout\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Timeout,!0;case\"badrequest_malformedingestionproperty\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_MalformedIngestionProperty,!0;case\"badrequest_ingestionpropertynotsupportedinthiscontext\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_IngestionPropertyNotSupportedInThisContext,!0;case\"badrequest_invalidauthentication\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidAuthentication,!0;case\"blobalreadyreceived_blobalreadyfoundinbatch\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BlobAlreadyReceived_BlobAlreadyFoundInBatch,!0;case\"badrequest_invalidmanagedidentity\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidManagedIdentity,!0;case\"badrequest_datacapacitylimitreached\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_DataCapacityLimitReached,!0;case\"updatepolicy_badrequest\":return ret.v=Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_BadRequest,!0;case\"badrequest_nonmultidatabasedataconnection\":return ret.v=Kusto.Data.Common.IngestionErrorCode.BadRequest_NonMultiDatabaseDataConnection,!0;case\"cancelled\":return ret.v=Kusto.Data.Common.IngestionErrorCode.Cancelled,!0;case\"abandonedbyconfiguration_storageaccount\":return ret.v=Kusto.Data.Common.IngestionErrorCode.AbandonedByConfiguration_StorageAccount,!0;case\"abandonedbyconfiguration_databaseandtable\":return ret.v=Kusto.Data.Common.IngestionErrorCode.AbandonedByConfiguration_DatabaseAndTable,!0;default:break}if(!ignoreInts){var reti={v:0};if(System.Int32.tryParse(value,reti))return ret.v=reti.v>>>0,!0}return ret.v=0,!1},FastGetHashCode:function(that){return that|0},FastGetDescription:function(that){switch(that){case Kusto.Data.Common.IngestionErrorCode.Unknown:return\"Unknown error occurred\";case Kusto.Data.Common.IngestionErrorCode.OutOfMemory:return\"Ingestion operation ran out of memory\";case Kusto.Data.Common.IngestionErrorCode.Stream_WrongNumberOfFields:return\"Wrong number of fields.\";case Kusto.Data.Common.IngestionErrorCode.Stream_InputStreamTooLarge:return\"Input stream/record/field too large.\";case Kusto.Data.Common.IngestionErrorCode.Stream_NoDataToIngest:return\"No data streams to ingest\";case Kusto.Data.Common.IngestionErrorCode.Stream_ClosingQuoteMissing:return\"Invalid csv format - closing quote missing.\";case Kusto.Data.Common.IngestionErrorCode.Stream_DynamicPropertyBagTooLarge:return\"The combined size of the property bag's distinct keys is getting too large.\";case Kusto.Data.Common.IngestionErrorCode.Download_SourceNotFound:return\"Failed to download source from Azure storage - source not found\";case Kusto.Data.Common.IngestionErrorCode.Download_AccessConditionNotSatisfied:return\"Failed to download source from Azure storage - access condition not satisfied\";case Kusto.Data.Common.IngestionErrorCode.Download_Forbidden:return\"Failed to download source from Azure storage - access forbidden\";case Kusto.Data.Common.IngestionErrorCode.Download_AccountNotFound:return\"Failed to download source from Azure storage - account not found\";case Kusto.Data.Common.IngestionErrorCode.Download_TransientNameResolutionFailure:return\"Failed to download source from Azure storage - transient storage account name resolution failure\";case Kusto.Data.Common.IngestionErrorCode.Download_BadRequest:return\"Failed to download source from Azure storage - bad request\";case Kusto.Data.Common.IngestionErrorCode.Download_NotTransient:return\"Failed to download source from Azure storage - not transient error\";case Kusto.Data.Common.IngestionErrorCode.Download_UnknownError:return\"Failed to download source from Azure storage - unknown error\";case Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_QuerySchemaDoesNotMatchTableSchema:return\"Failed to invoke update policy. Query schema does not match table schema\";case Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_FailedDescendantTransaction:return\"Failed to invoke update policy. Failed descendant transactional update policy\";case Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_IngestionError:return\"Failed to invoke update policy. Ingestion Error occurred\";case Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_UnknownError:return\"Failed to invoke update policy. Unknown error occurred\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_MissingMappingFailure:return\"A format that requires ingestion mapping was sent without the one. Identity ingestion mapping can be auto-created only when the ingestion format is specified\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidBlob:return\"Blob is invalid\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyBlob:return\"Blob is empty\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_NoRecordsOrWrongFormat:return\"No records to ingest or using wrong data format\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyArchive:return\"Archive is empty\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidArchive:return\"Archive is invalid\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidBlobUri:return\"Blob Uri is invalid\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyBlobUri:return\"Blob Uri is empty\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_DatabaseNotExist:return\"Database does not exist\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_TableNotExist:return\"Table does not exist\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidKustoIdentityToken:return\"Invalid kusto identity token\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_FileTooLarge:return\"File too large\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_TableAccessDenied:return\"Access to table is denied\";case Kusto.Data.Common.IngestionErrorCode.General_RetryAttemptsExceeded:return\"Operation has exceeded the retry attempts limit or timespan following a recurring transient error\";case Kusto.Data.Common.IngestionErrorCode.General_BadRequest:return\"Bad request\";case Kusto.Data.Common.IngestionErrorCode.General_InternalServerError:return\"Internal server error occurred\";case Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_Cyclic_Update_Not_Allowed:return\"Failed to invoke update policy. Cyclic update is not allowed\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidMapping:return\"Failed to parse ingestion mapping.\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidMappingReference:return\"Invalid mapping reference.\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_MappingReferenceWasNotFound:return\"Mapping reference wasn't found.\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_FormatNotSupported:return\"Format is not supported\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_DuplicateMapping:return\"Ingestion properties contains ingestion mapping and ingestion mapping reference.\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_CorruptedMessage:return\"Message is corrupted\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_InconsistentMapping:return\"Inconsistent ingestion mapping\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_SyntaxError:return\"Syntax error\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidOrEmptyTableName:return\"Table name is empty or invalid\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyDatabaseName:return\"Database name is empty\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyTenantIdentifier:return\"TenantIdentifier is empty\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_EmptyMappingReference:return\"MappingReference is empty\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_EntityNotFound:return\"Failed to locate an entity\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_EntityNameIsNotValid:return\"Entity name is not valid\";case Kusto.Data.Common.IngestionErrorCode.General_AbandonedIngestion:return\"Abandoned ingestion.\";case Kusto.Data.Common.IngestionErrorCode.General_ThrottledIngestion:return\"Throttled ingestion.\";case Kusto.Data.Common.IngestionErrorCode.General_TransientSchemaMismatch:return\"Schema of target table at start time doesn't match the one at commit time.\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_DatabaseAccessDenied:return\"Access to database is denied\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_UnexpectedCharacterInInputStream:return\"Unexpected character in the input stream\";case Kusto.Data.Common.IngestionErrorCode.Forbidden:return\"Insufficient security permissions to execute request\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_ZeroRetentionPolicyWithNoUpdatePolicy:return\"Table has zero rentention policy and is not the source table for any update policy\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_CreationTimeEarlierThanSoftDeletePeriod:return\"Specified creation time is earlier than table's soft delete period\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_NotSupported:return\"Request not supported\";case Kusto.Data.Common.IngestionErrorCode.Skipped_IngestByTagAlreadyExists:return\"Another stream with the same ingest-by tag was already ingested\";case Kusto.Data.Common.IngestionErrorCode.Timeout:return\"Ingestion operation timed out\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_MalformedIngestionProperty:return\"Ingestion property is malformed\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_IngestionPropertyNotSupportedInThisContext:return\"Ingestion property is not supported in this context\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidAuthentication:return\"Authentication to data is not valid\";case Kusto.Data.Common.IngestionErrorCode.BlobAlreadyReceived_BlobAlreadyFoundInBatch:return\"One copy of this blob has already been processed. The service will only attempt to ingest one copy of the blob\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_InvalidManagedIdentity:return\"Managed Identity is not defined, not allowed by a policy, or doesn't have permissions on the resource\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_DataCapacityLimitReached:return\"Raised to indicate that storage data capacity has reached its limit\";case Kusto.Data.Common.IngestionErrorCode.UpdatePolicy_BadRequest:return\"Failed to invoke update policy as a result of a bad request, e.g. query semantic error\";case Kusto.Data.Common.IngestionErrorCode.BadRequest_NonMultiDatabaseDataConnection:return\"Event contains the 'database' property directing the ingestion into a database different than the target database configured in the data connection's settings. Since this data connection is set to multiDatabase = false, dynamic database routing is forbidden.\";case Kusto.Data.Common.IngestionErrorCode.Cancelled:return\"Ingestion operation cancelled\";case Kusto.Data.Common.IngestionErrorCode.AbandonedByConfiguration_StorageAccount:return\"Blob abandoned by configuration - storage account\";case Kusto.Data.Common.IngestionErrorCode.AbandonedByConfiguration_DatabaseAndTable:return\"Blob abandoned by configuration - database and table combination\";default:return null}}}}});Bridge.define(\"Kusto.Data.Common.ExtendedStorageEngineKind\",{statics:{methods:{FastToString:function(that){switch(that){case Kusto.Data.Common.StorageEngineKind.StorageV2:return\"StorageV2\";case Kusto.Data.Common.StorageEngineKind.StorageV3:return\"StorageV3\";default:break}return System.String.format(\"[unknown: {0}]\",[Bridge.box(that,System.Int32)])},FastIsDefined$1:function(value){var dummy={v:new Kusto.Data.Common.StorageEngineKind};return Kusto.Data.Common.ExtendedStorageEngineKind.FastTryParse(value,dummy,!1,!0)},FastIsDefined:function(value){switch(value){case Kusto.Data.Common.StorageEngineKind.StorageV2:return!0;case Kusto.Data.Common.StorageEngineKind.StorageV3:return!0;default:return!1}},FastHasFlag$1:function(that,flag){return(that&flag)===flag},FastHasFlag:function(that,flag){return(that&flag)===flag},FastParse:function(value,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);var ret={v:new Kusto.Data.Common.StorageEngineKind};if(Kusto.Data.Common.ExtendedStorageEngineKind.FastTryParse(value,ret,ignoreCase,ignoreInts))return ret.v;throw new System.Exception(\"Invalid enum value: \"+(value||\"\"));},FastTryParse:function(value,ret,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);switch(value){case\"0\":case\"StorageV2\":return ret.v=Kusto.Data.Common.StorageEngineKind.StorageV2,!0;case\"1\":case\"StorageV3\":return ret.v=Kusto.Data.Common.StorageEngineKind.StorageV3,!0;default:break}if(ignoreCase&&!System.String.isNullOrEmpty(value))switch(value.toLowerCase()){case\"storagev2\":return ret.v=Kusto.Data.Common.StorageEngineKind.StorageV2,!0;case\"storagev3\":return ret.v=Kusto.Data.Common.StorageEngineKind.StorageV3,!0;default:break}if(!ignoreInts){var reti={v:0};if(System.Int32.tryParse(value,reti))return ret.v=reti.v,!0}return ret.v=0,!1},FastGetHashCode:function(that){return that},FastGetDescription:function(that){switch(that){case Kusto.Data.Common.StorageEngineKind.StorageV2:return\"V2 - extents data storage engine\";case Kusto.Data.Common.StorageEngineKind.StorageV3:return\"V3 - shard data storage engine\";default:return null}}}}});Bridge.define(\"Kusto.Data.Common.ExtendedTransformationMethod\",{statics:{methods:{FastToString:function(that){switch(that){case Kusto.Data.Common.TransformationMethod.None:return\"None\";case Kusto.Data.Common.TransformationMethod.PropertyBagArrayToDictionary:return\"PropertyBagArrayToDictionary\";case Kusto.Data.Common.TransformationMethod.SourceLocation:return\"SourceLocation\";case Kusto.Data.Common.TransformationMethod.SourceLineNumber:return\"SourceLineNumber\";case Kusto.Data.Common.TransformationMethod.UnknownMethod1:return\"UnknownMethod1\";case Kusto.Data.Common.TransformationMethod.UnknownMethod:return\"UnknownMethod\";case Kusto.Data.Common.TransformationMethod.DateTimeFromUnixSeconds:return\"DateTimeFromUnixSeconds\";case Kusto.Data.Common.TransformationMethod.DateTimeFromUnixMilliseconds:return\"DateTimeFromUnixMilliseconds\";case Kusto.Data.Common.TransformationMethod.DateTimeFromUnixMicroseconds:return\"DateTimeFromUnixMicroseconds\";case Kusto.Data.Common.TransformationMethod.DateTimeFromUnixNanoseconds:return\"DateTimeFromUnixNanoseconds\";default:break}return System.String.format(\"[unknown: {0}]\",[Bridge.box(that,System.Int32)])},FastIsDefined$1:function(value){var dummy={v:new Kusto.Data.Common.TransformationMethod};return Kusto.Data.Common.ExtendedTransformationMethod.FastTryParse(value,dummy,!1,!0)},FastIsDefined:function(value){switch(value){case Kusto.Data.Common.TransformationMethod.None:return!0;case Kusto.Data.Common.TransformationMethod.PropertyBagArrayToDictionary:return!0;case Kusto.Data.Common.TransformationMethod.SourceLocation:return!0;case Kusto.Data.Common.TransformationMethod.SourceLineNumber:return!0;case Kusto.Data.Common.TransformationMethod.UnknownMethod1:return!0;case Kusto.Data.Common.TransformationMethod.UnknownMethod:return!0;case Kusto.Data.Common.TransformationMethod.DateTimeFromUnixSeconds:return!0;case Kusto.Data.Common.TransformationMethod.DateTimeFromUnixMilliseconds:return!0;case Kusto.Data.Common.TransformationMethod.DateTimeFromUnixMicroseconds:return!0;case Kusto.Data.Common.TransformationMethod.DateTimeFromUnixNanoseconds:return!0;default:return!1}},FastHasFlag$1:function(that,flag){return(that&flag)===flag},FastHasFlag:function(that,flag){return(that&flag)===flag},FastParse:function(value,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);var ret={v:new Kusto.Data.Common.TransformationMethod};if(Kusto.Data.Common.ExtendedTransformationMethod.FastTryParse(value,ret,ignoreCase,ignoreInts))return ret.v;throw new System.Exception(\"Invalid enum value: \"+(value||\"\"));},FastTryParse:function(value,ret,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);switch(value){case\"0\":case\"None\":return ret.v=Kusto.Data.Common.TransformationMethod.None,!0;case\"1\":case\"PropertyBagArrayToDictionary\":return ret.v=Kusto.Data.Common.TransformationMethod.PropertyBagArrayToDictionary,!0;case\"2\":case\"SourceLocation\":return ret.v=Kusto.Data.Common.TransformationMethod.SourceLocation,!0;case\"3\":case\"SourceLineNumber\":return ret.v=Kusto.Data.Common.TransformationMethod.SourceLineNumber,!0;case\"4\":case\"UnknownMethod1\":return ret.v=Kusto.Data.Common.TransformationMethod.UnknownMethod1,!0;case\"5\":case\"UnknownMethod\":return ret.v=Kusto.Data.Common.TransformationMethod.UnknownMethod,!0;case\"6\":case\"DateTimeFromUnixSeconds\":return ret.v=Kusto.Data.Common.TransformationMethod.DateTimeFromUnixSeconds,!0;case\"7\":case\"DateTimeFromUnixMilliseconds\":return ret.v=Kusto.Data.Common.TransformationMethod.DateTimeFromUnixMilliseconds,!0;case\"8\":case\"DateTimeFromUnixMicroseconds\":return ret.v=Kusto.Data.Common.TransformationMethod.DateTimeFromUnixMicroseconds,!0;case\"9\":case\"DateTimeFromUnixNanoseconds\":return ret.v=Kusto.Data.Common.TransformationMethod.DateTimeFromUnixNanoseconds,!0;default:break}if(ignoreCase&&!System.String.isNullOrEmpty(value))switch(value.toLowerCase()){case\"none\":return ret.v=Kusto.Data.Common.TransformationMethod.None,!0;case\"propertybagarraytodictionary\":return ret.v=Kusto.Data.Common.TransformationMethod.PropertyBagArrayToDictionary,!0;case\"sourcelocation\":return ret.v=Kusto.Data.Common.TransformationMethod.SourceLocation,!0;case\"sourcelinenumber\":return ret.v=Kusto.Data.Common.TransformationMethod.SourceLineNumber,!0;case\"unknownmethod1\":return ret.v=Kusto.Data.Common.TransformationMethod.UnknownMethod1,!0;case\"unknownmethod\":return ret.v=Kusto.Data.Common.TransformationMethod.UnknownMethod,!0;case\"datetimefromunixseconds\":return ret.v=Kusto.Data.Common.TransformationMethod.DateTimeFromUnixSeconds,!0;case\"datetimefromunixmilliseconds\":return ret.v=Kusto.Data.Common.TransformationMethod.DateTimeFromUnixMilliseconds,!0;case\"datetimefromunixmicroseconds\":return ret.v=Kusto.Data.Common.TransformationMethod.DateTimeFromUnixMicroseconds,!0;case\"datetimefromunixnanoseconds\":return ret.v=Kusto.Data.Common.TransformationMethod.DateTimeFromUnixNanoseconds,!0;default:break}if(!ignoreInts){var reti={v:0};if(System.Int32.tryParse(value,reti))return ret.v=reti.v,!0}return ret.v=0,!1},FastGetHashCode:function(that){return that},FastGetDescription:function(that){switch(that){case Kusto.Data.Common.TransformationMethod.None:return\"Comma-separated value.\";case Kusto.Data.Common.TransformationMethod.PropertyBagArrayToDictionary:return\"Property bag array to dictionary.\";case Kusto.Data.Common.TransformationMethod.SourceLocation:return\"Source location.\";case Kusto.Data.Common.TransformationMethod.SourceLineNumber:return\"Source line number.\";case Kusto.Data.Common.TransformationMethod.UnknownMethod1:return\"Was GetPathElement\";case Kusto.Data.Common.TransformationMethod.UnknownMethod:return\"Unknown method.\";case Kusto.Data.Common.TransformationMethod.DateTimeFromUnixSeconds:return\"Converts UNIX epoch (seconds) to UTC datetime.\";case Kusto.Data.Common.TransformationMethod.DateTimeFromUnixMilliseconds:return\"Converts UNIX epoch (milliseconds) to UTC datetime.\";case Kusto.Data.Common.TransformationMethod.DateTimeFromUnixMicroseconds:return\"Converts UNIX epoch (microseconds) to UTC datetime.\";case Kusto.Data.Common.TransformationMethod.DateTimeFromUnixNanoseconds:return\"Converts UNIX epoch (nanoseconds) to UTC datetime.\";default:return null}}}}});Bridge.define(\"Kusto.Data.Common.ExtentsMergeLookbackPeriodKind\",{$kind:\"enum\",statics:{fields:{Default:0,HotCache:1,All:2,Custom:3}}});Bridge.define(\"Kusto.Data.Common.IngestionErrorCategory\",{$kind:\"enum\",statics:{fields:{Unknown:0,InternalServiceError:1,BadFormat:2,BadRequest:3,UpdatePolicyFailure:4,EntityNotFound:5,UserAccessNotAuthorized:6,DataAccessNotAuthorized:7,FileTooLarge:8,ThrottledOnEngine:9,DownloadFailed:10,RetryAttemptsExceeded:11,BlobAlreadyReceived:12,Cancelled:13,Configuration:14}}});Bridge.define(\"Kusto.Data.Common.IngestionErrorCode\",{$kind:\"enum\",statics:{fields:{Unknown:0,OutOfMemory:2161770503,Stream_WrongNumberOfFields:2161770504,Stream_InputStreamTooLarge:2161770505,Stream_NoDataToIngest:2161770506,Stream_ClosingQuoteMissing:2161770507,Stream_DynamicPropertyBagTooLarge:2161770510,Download_SourceNotFound:2161770511,Download_AccessConditionNotSatisfied:2161770512,Download_Forbidden:2161770513,Download_AccountNotFound:2161770514,Download_TransientNameResolutionFailure:2161770515,Download_BadRequest:2161770516,Download_NotTransient:2161770517,Download_UnknownError:2161770518,UpdatePolicy_QuerySchemaDoesNotMatchTableSchema:2161770519,UpdatePolicy_FailedDescendantTransaction:2161770520,UpdatePolicy_IngestionError:2161770521,UpdatePolicy_UnknownError:2161770522,BadRequest_MissingMappingFailure:2161770523,BadRequest_InvalidBlob:2161770524,BadRequest_EmptyBlob:2161770525,BadRequest_NoRecordsOrWrongFormat:2161770526,BadRequest_EmptyArchive:2161770527,BadRequest_InvalidArchive:2161770528,BadRequest_InvalidBlobUri:2161770529,BadRequest_EmptyBlobUri:2161770530,BadRequest_DatabaseNotExist:2161770531,BadRequest_TableNotExist:2161770532,BadRequest_InvalidKustoIdentityToken:2161770533,BadRequest_FileTooLarge:2161770534,BadRequest_TableAccessDenied:2161770535,General_RetryAttemptsExceeded:2161770536,General_BadRequest:2161770537,General_InternalServerError:2161770538,UpdatePolicy_Cyclic_Update_Not_Allowed:2161770539,BadRequest_InvalidMapping:2161770540,BadRequest_InvalidMappingReference:2161770541,BadRequest_MappingReferenceWasNotFound:2161770542,BadRequest_FormatNotSupported:2161770543,BadRequest_DuplicateMapping:2161770544,BadRequest_CorruptedMessage:2161770545,BadRequest_InconsistentMapping:2161770546,BadRequest_SyntaxError:2161770547,BadRequest_InvalidOrEmptyTableName:2161770548,BadRequest_EmptyDatabaseName:2161770549,BadRequest_EmptyTenantIdentifier:2161770550,BadRequest_EmptyMappingReference:2161770551,BadRequest_EntityNotFound:2161770552,BadRequest_EntityNameIsNotValid:2161770553,General_AbandonedIngestion:2161770554,General_ThrottledIngestion:2161770555,General_TransientSchemaMismatch:2161770556,BadRequest_DatabaseAccessDenied:2161770557,BadRequest_UnexpectedCharacterInInputStream:2161770558,Forbidden:2161770559,BadRequest_ZeroRetentionPolicyWithNoUpdatePolicy:2161770560,BadRequest_CreationTimeEarlierThanSoftDeletePeriod:2161770561,BadRequest_NotSupported:2161770562,Skipped_IngestByTagAlreadyExists:2161770563,Timeout:2148734213,BadRequest_MalformedIngestionProperty:2148734214,BadRequest_IngestionPropertyNotSupportedInThisContext:2148734215,BadRequest_InvalidAuthentication:2148734216,BlobAlreadyReceived_BlobAlreadyFoundInBatch:2148734217,BadRequest_InvalidManagedIdentity:2148734218,BadRequest_DataCapacityLimitReached:2148734219,UpdatePolicy_BadRequest:2148734220,BadRequest_NonMultiDatabaseDataConnection:2148734221,Cancelled:2148734222,AbandonedByConfiguration_StorageAccount:2148734223,AbandonedByConfiguration_DatabaseAndTable:2148734224}},$utype:System.UInt32});Bridge.define(\"Kusto.Data.Common.StorageEngineKind\",{$kind:\"enum\",statics:{fields:{StorageV2:0,StorageV3:1}}});Bridge.define(\"Kusto.Data.Common.TransformationMethod\",{$kind:\"enum\",statics:{fields:{None:0,PropertyBagArrayToDictionary:1,SourceLocation:2,SourceLineNumber:3,UnknownMethod1:4,UnknownMethod:5,DateTimeFromUnixSeconds:6,DateTimeFromUnixMilliseconds:7,DateTimeFromUnixMicroseconds:8,DateTimeFromUnixNanoseconds:9}}});Bridge.define(\"Kusto.Data.DmSettingsType\",{$kind:\"enum\",statics:{fields:{AdminSettings:0,DataObtainerServiceSettings:1,DataAggregatorSettings:2,DataObtainerSettings:3,CloudManagersSettings:5,SchemaManagmentSettings:6,CommonSettings:7,DataImporterSettings:8,StatusReporterSettings:9,All:10,VirtualDmsSettings:11}}});Bridge.define(\"Kusto.Data.ExtendedDmSettingsType\",{statics:{methods:{FastToString:function(that){switch(that){case Kusto.Data.DmSettingsType.AdminSettings:return\"AdminSettings\";case Kusto.Data.DmSettingsType.DataObtainerServiceSettings:return\"DataObtainerServiceSettings\";case Kusto.Data.DmSettingsType.DataAggregatorSettings:return\"DataAggregatorSettings\";case Kusto.Data.DmSettingsType.DataObtainerSettings:return\"DataObtainerSettings\";case Kusto.Data.DmSettingsType.CloudManagersSettings:return\"CloudManagersSettings\";case Kusto.Data.DmSettingsType.SchemaManagmentSettings:return\"SchemaManagmentSettings\";case Kusto.Data.DmSettingsType.CommonSettings:return\"CommonSettings\";case Kusto.Data.DmSettingsType.DataImporterSettings:return\"DataImporterSettings\";case Kusto.Data.DmSettingsType.StatusReporterSettings:return\"StatusReporterSettings\";case Kusto.Data.DmSettingsType.All:return\"All\";case Kusto.Data.DmSettingsType.VirtualDmsSettings:return\"VirtualDmsSettings\";default:break}return System.String.format(\"[unknown: {0}]\",[Bridge.box(that,System.Int32)])},FastIsDefined$1:function(value){var dummy={v:new Kusto.Data.DmSettingsType};return Kusto.Data.ExtendedDmSettingsType.FastTryParse(value,dummy,!1,!0)},FastIsDefined:function(value){switch(value){case Kusto.Data.DmSettingsType.AdminSettings:return!0;case Kusto.Data.DmSettingsType.DataObtainerServiceSettings:return!0;case Kusto.Data.DmSettingsType.DataAggregatorSettings:return!0;case Kusto.Data.DmSettingsType.DataObtainerSettings:return!0;case Kusto.Data.DmSettingsType.CloudManagersSettings:return!0;case Kusto.Data.DmSettingsType.SchemaManagmentSettings:return!0;case Kusto.Data.DmSettingsType.CommonSettings:return!0;case Kusto.Data.DmSettingsType.DataImporterSettings:return!0;case Kusto.Data.DmSettingsType.StatusReporterSettings:return!0;case Kusto.Data.DmSettingsType.All:return!0;case Kusto.Data.DmSettingsType.VirtualDmsSettings:return!0;default:return!1}},FastHasFlag$1:function(that,flag){return(that&flag)===flag},FastHasFlag:function(that,flag){return(that&flag)===flag},FastParse:function(value,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);var ret={v:new Kusto.Data.DmSettingsType};if(Kusto.Data.ExtendedDmSettingsType.FastTryParse(value,ret,ignoreCase,ignoreInts))return ret.v;throw new System.Exception(\"Invalid enum value: \"+(value||\"\"));},FastTryParse:function(value,ret,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);switch(value){case\"0\":case\"AdminSettings\":return ret.v=Kusto.Data.DmSettingsType.AdminSettings,!0;case\"1\":case\"DataObtainerServiceSettings\":return ret.v=Kusto.Data.DmSettingsType.DataObtainerServiceSettings,!0;case\"2\":case\"DataAggregatorSettings\":return ret.v=Kusto.Data.DmSettingsType.DataAggregatorSettings,!0;case\"3\":case\"DataObtainerSettings\":return ret.v=Kusto.Data.DmSettingsType.DataObtainerSettings,!0;case\"5\":case\"CloudManagersSettings\":return ret.v=Kusto.Data.DmSettingsType.CloudManagersSettings,!0;case\"6\":case\"SchemaManagmentSettings\":return ret.v=Kusto.Data.DmSettingsType.SchemaManagmentSettings,!0;case\"7\":case\"CommonSettings\":return ret.v=Kusto.Data.DmSettingsType.CommonSettings,!0;case\"8\":case\"DataImporterSettings\":return ret.v=Kusto.Data.DmSettingsType.DataImporterSettings,!0;case\"9\":case\"StatusReporterSettings\":return ret.v=Kusto.Data.DmSettingsType.StatusReporterSettings,!0;case\"10\":case\"All\":return ret.v=Kusto.Data.DmSettingsType.All,!0;case\"11\":case\"VirtualDmsSettings\":return ret.v=Kusto.Data.DmSettingsType.VirtualDmsSettings,!0;default:break}if(ignoreCase&&!System.String.isNullOrEmpty(value))switch(value.toLowerCase()){case\"adminsettings\":return ret.v=Kusto.Data.DmSettingsType.AdminSettings,!0;case\"dataobtainerservicesettings\":return ret.v=Kusto.Data.DmSettingsType.DataObtainerServiceSettings,!0;case\"dataaggregatorsettings\":return ret.v=Kusto.Data.DmSettingsType.DataAggregatorSettings,!0;case\"dataobtainersettings\":return ret.v=Kusto.Data.DmSettingsType.DataObtainerSettings,!0;case\"cloudmanagerssettings\":return ret.v=Kusto.Data.DmSettingsType.CloudManagersSettings,!0;case\"schemamanagmentsettings\":return ret.v=Kusto.Data.DmSettingsType.SchemaManagmentSettings,!0;case\"commonsettings\":return ret.v=Kusto.Data.DmSettingsType.CommonSettings,!0;case\"dataimportersettings\":return ret.v=Kusto.Data.DmSettingsType.DataImporterSettings,!0;case\"statusreportersettings\":return ret.v=Kusto.Data.DmSettingsType.StatusReporterSettings,!0;case\"all\":return ret.v=Kusto.Data.DmSettingsType.All,!0;case\"virtualdmssettings\":return ret.v=Kusto.Data.DmSettingsType.VirtualDmsSettings,!0;default:break}if(!ignoreInts){var reti={v:0};if(System.Int32.tryParse(value,reti))return ret.v=reti.v,!0}return ret.v=0,!1},FastGetHashCode:function(that){return that},FastGetDescription:function(that){switch(that){case Kusto.Data.DmSettingsType.AdminSettings:return\"\";case Kusto.Data.DmSettingsType.DataObtainerServiceSettings:return\"\";case Kusto.Data.DmSettingsType.DataAggregatorSettings:return\"\";case Kusto.Data.DmSettingsType.DataObtainerSettings:return\"\";case Kusto.Data.DmSettingsType.CloudManagersSettings:return\"\";case Kusto.Data.DmSettingsType.SchemaManagmentSettings:return\"\";case Kusto.Data.DmSettingsType.CommonSettings:return\"\";case Kusto.Data.DmSettingsType.DataImporterSettings:return\"\";case Kusto.Data.DmSettingsType.StatusReporterSettings:return\"\";case Kusto.Data.DmSettingsType.All:return\"\";case Kusto.Data.DmSettingsType.VirtualDmsSettings:return\"\";default:return null}}}}});Bridge.define(\"Kusto.Data.ExtendedIngestionQueueType\",{statics:{methods:{FastToString:function(that){switch(that){case Kusto.Data.IngestionQueueType.All:return\"All\";case Kusto.Data.IngestionQueueType.InputQueue:return\"InputQueue\";case Kusto.Data.IngestionQueueType.InternalQueue:return\"InternalQueue\";case Kusto.Data.IngestionQueueType.ReadyForAggregationQueue:return\"ReadyForAggregationQueue\";case Kusto.Data.IngestionQueueType.SecuredReadyForAggregationQueue:return\"SecuredReadyForAggregationQueue\";case Kusto.Data.IngestionQueueType.AggregatedReadyForImportQueue:return\"AggregatedReadyForImportQueue\";case Kusto.Data.IngestionQueueType.FailedIngestionsQueue:return\"FailedIngestionsQueue\";case Kusto.Data.IngestionQueueType.SuccessfulIngestionsQueue:return\"SuccessfulIngestionsQueue\";case Kusto.Data.IngestionQueueType.AbandonedIngestionsQueue:return\"AbandonedIngestionsQueue\";case Kusto.Data.IngestionQueueType.SecuredAbandonedIngestionsQueue:return\"SecuredAbandonedIngestionsQueue\";case Kusto.Data.IngestionQueueType.InternalFailedIngestionsQueue:return\"InternalFailedIngestionsQueue\";case Kusto.Data.IngestionQueueType.AbandonedInputQueues:return\"AbandonedInputQueues\";default:break}return System.String.format(\"[unknown: {0}]\",[Bridge.box(that,System.Int32)])},FastIsDefined$1:function(value){var dummy={v:new Kusto.Data.IngestionQueueType};return Kusto.Data.ExtendedIngestionQueueType.FastTryParse(value,dummy,!1,!0)},FastIsDefined:function(value){switch(value){case Kusto.Data.IngestionQueueType.All:return!0;case Kusto.Data.IngestionQueueType.InputQueue:return!0;case Kusto.Data.IngestionQueueType.InternalQueue:return!0;case Kusto.Data.IngestionQueueType.ReadyForAggregationQueue:return!0;case Kusto.Data.IngestionQueueType.SecuredReadyForAggregationQueue:return!0;case Kusto.Data.IngestionQueueType.AggregatedReadyForImportQueue:return!0;case Kusto.Data.IngestionQueueType.FailedIngestionsQueue:return!0;case Kusto.Data.IngestionQueueType.SuccessfulIngestionsQueue:return!0;case Kusto.Data.IngestionQueueType.AbandonedIngestionsQueue:return!0;case Kusto.Data.IngestionQueueType.SecuredAbandonedIngestionsQueue:return!0;case Kusto.Data.IngestionQueueType.InternalFailedIngestionsQueue:return!0;case Kusto.Data.IngestionQueueType.AbandonedInputQueues:return!0;default:return!1}},FastHasFlag$1:function(that,flag){return(that&flag)===flag},FastHasFlag:function(that,flag){return(that&flag)===flag},FastParse:function(value,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);var ret={v:new Kusto.Data.IngestionQueueType};if(Kusto.Data.ExtendedIngestionQueueType.FastTryParse(value,ret,ignoreCase,ignoreInts))return ret.v;throw new System.Exception(\"Invalid enum value: \"+(value||\"\"));},FastTryParse:function(value,ret,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);switch(value){case\"0\":case\"All\":return ret.v=Kusto.Data.IngestionQueueType.All,!0;case\"1\":case\"InputQueue\":return ret.v=Kusto.Data.IngestionQueueType.InputQueue,!0;case\"2\":case\"InternalQueue\":return ret.v=Kusto.Data.IngestionQueueType.InternalQueue,!0;case\"3\":case\"ReadyForAggregationQueue\":return ret.v=Kusto.Data.IngestionQueueType.ReadyForAggregationQueue,!0;case\"4\":case\"SecuredReadyForAggregationQueue\":return ret.v=Kusto.Data.IngestionQueueType.SecuredReadyForAggregationQueue,!0;case\"5\":case\"AggregatedReadyForImportQueue\":return ret.v=Kusto.Data.IngestionQueueType.AggregatedReadyForImportQueue,!0;case\"6\":case\"FailedIngestionsQueue\":return ret.v=Kusto.Data.IngestionQueueType.FailedIngestionsQueue,!0;case\"7\":case\"SuccessfulIngestionsQueue\":return ret.v=Kusto.Data.IngestionQueueType.SuccessfulIngestionsQueue,!0;case\"9\":case\"AbandonedIngestionsQueue\":return ret.v=Kusto.Data.IngestionQueueType.AbandonedIngestionsQueue,!0;case\"10\":case\"SecuredAbandonedIngestionsQueue\":return ret.v=Kusto.Data.IngestionQueueType.SecuredAbandonedIngestionsQueue,!0;case\"11\":case\"InternalFailedIngestionsQueue\":return ret.v=Kusto.Data.IngestionQueueType.InternalFailedIngestionsQueue,!0;case\"12\":case\"AbandonedInputQueues\":return ret.v=Kusto.Data.IngestionQueueType.AbandonedInputQueues,!0;default:break}if(ignoreCase&&!System.String.isNullOrEmpty(value))switch(value.toLowerCase()){case\"all\":return ret.v=Kusto.Data.IngestionQueueType.All,!0;case\"inputqueue\":return ret.v=Kusto.Data.IngestionQueueType.InputQueue,!0;case\"internalqueue\":return ret.v=Kusto.Data.IngestionQueueType.InternalQueue,!0;case\"readyforaggregationqueue\":return ret.v=Kusto.Data.IngestionQueueType.ReadyForAggregationQueue,!0;case\"securedreadyforaggregationqueue\":return ret.v=Kusto.Data.IngestionQueueType.SecuredReadyForAggregationQueue,!0;case\"aggregatedreadyforimportqueue\":return ret.v=Kusto.Data.IngestionQueueType.AggregatedReadyForImportQueue,!0;case\"failedingestionsqueue\":return ret.v=Kusto.Data.IngestionQueueType.FailedIngestionsQueue,!0;case\"successfulingestionsqueue\":return ret.v=Kusto.Data.IngestionQueueType.SuccessfulIngestionsQueue,!0;case\"abandonedingestionsqueue\":return ret.v=Kusto.Data.IngestionQueueType.AbandonedIngestionsQueue,!0;case\"securedabandonedingestionsqueue\":return ret.v=Kusto.Data.IngestionQueueType.SecuredAbandonedIngestionsQueue,!0;case\"internalfailedingestionsqueue\":return ret.v=Kusto.Data.IngestionQueueType.InternalFailedIngestionsQueue,!0;case\"abandonedinputqueues\":return ret.v=Kusto.Data.IngestionQueueType.AbandonedInputQueues,!0;default:break}if(!ignoreInts){var reti={v:0};if(System.Int32.tryParse(value,reti))return ret.v=reti.v,!0}return ret.v=0,!1},FastGetHashCode:function(that){return that},FastGetDescription:function(that){switch(that){case Kusto.Data.IngestionQueueType.All:return\"\";case Kusto.Data.IngestionQueueType.InputQueue:return\"\";case Kusto.Data.IngestionQueueType.InternalQueue:return\"\";case Kusto.Data.IngestionQueueType.ReadyForAggregationQueue:return\"\";case Kusto.Data.IngestionQueueType.SecuredReadyForAggregationQueue:return\"\";case Kusto.Data.IngestionQueueType.AggregatedReadyForImportQueue:return\"\";case Kusto.Data.IngestionQueueType.FailedIngestionsQueue:return\"\";case Kusto.Data.IngestionQueueType.SuccessfulIngestionsQueue:return\"\";case Kusto.Data.IngestionQueueType.AbandonedIngestionsQueue:return\"\";case Kusto.Data.IngestionQueueType.SecuredAbandonedIngestionsQueue:return\"\";case Kusto.Data.IngestionQueueType.InternalFailedIngestionsQueue:return\"\";case Kusto.Data.IngestionQueueType.AbandonedInputQueues:return\"\";default:return null}}}}});Bridge.define(\"Kusto.Data.Ingestion.ExtendedIngestionMappingKind\",{statics:{methods:{FastToString:function(that){switch(that){case Kusto.Data.Ingestion.IngestionMappingKind.Unknown:return\"Unknown\";case Kusto.Data.Ingestion.IngestionMappingKind.Csv:return\"Csv\";case Kusto.Data.Ingestion.IngestionMappingKind.Json:return\"Json\";case Kusto.Data.Ingestion.IngestionMappingKind.Avro:return\"Avro\";case Kusto.Data.Ingestion.IngestionMappingKind.Parquet:return\"Parquet\";case Kusto.Data.Ingestion.IngestionMappingKind.SStream:return\"SStream\";case Kusto.Data.Ingestion.IngestionMappingKind.Orc:return\"Orc\";case Kusto.Data.Ingestion.IngestionMappingKind.ApacheAvro:return\"ApacheAvro\";case Kusto.Data.Ingestion.IngestionMappingKind.W3CLogFile:return\"W3CLogFile\";default:break}return System.String.format(\"[unknown: {0}]\",[Bridge.box(that,System.Int32)])},FastIsDefined$1:function(value){var dummy={v:new Kusto.Data.Ingestion.IngestionMappingKind};return Kusto.Data.Ingestion.ExtendedIngestionMappingKind.FastTryParse(value,dummy,!1,!0)},FastIsDefined:function(value){switch(value){case Kusto.Data.Ingestion.IngestionMappingKind.Unknown:return!0;case Kusto.Data.Ingestion.IngestionMappingKind.Csv:return!0;case Kusto.Data.Ingestion.IngestionMappingKind.Json:return!0;case Kusto.Data.Ingestion.IngestionMappingKind.Avro:return!0;case Kusto.Data.Ingestion.IngestionMappingKind.Parquet:return!0;case Kusto.Data.Ingestion.IngestionMappingKind.SStream:return!0;case Kusto.Data.Ingestion.IngestionMappingKind.Orc:return!0;case Kusto.Data.Ingestion.IngestionMappingKind.ApacheAvro:return!0;case Kusto.Data.Ingestion.IngestionMappingKind.W3CLogFile:return!0;default:return!1}},FastHasFlag$1:function(that,flag){return(that&flag)===flag},FastHasFlag:function(that,flag){return(that&flag)===flag},FastParse:function(value,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);var ret={v:new Kusto.Data.Ingestion.IngestionMappingKind};if(Kusto.Data.Ingestion.ExtendedIngestionMappingKind.FastTryParse(value,ret,ignoreCase,ignoreInts))return ret.v;throw new System.Exception(\"Invalid enum value: \"+(value||\"\"));},FastTryParse:function(value,ret,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);switch(value){case\"0\":case\"Unknown\":return ret.v=Kusto.Data.Ingestion.IngestionMappingKind.Unknown,!0;case\"1\":case\"Csv\":return ret.v=Kusto.Data.Ingestion.IngestionMappingKind.Csv,!0;case\"2\":case\"Json\":return ret.v=Kusto.Data.Ingestion.IngestionMappingKind.Json,!0;case\"4\":case\"Avro\":return ret.v=Kusto.Data.Ingestion.IngestionMappingKind.Avro,!0;case\"5\":case\"Parquet\":return ret.v=Kusto.Data.Ingestion.IngestionMappingKind.Parquet,!0;case\"6\":case\"SStream\":return ret.v=Kusto.Data.Ingestion.IngestionMappingKind.SStream,!0;case\"7\":case\"Orc\":return ret.v=Kusto.Data.Ingestion.IngestionMappingKind.Orc,!0;case\"8\":case\"ApacheAvro\":return ret.v=Kusto.Data.Ingestion.IngestionMappingKind.ApacheAvro,!0;case\"9\":case\"W3CLogFile\":return ret.v=Kusto.Data.Ingestion.IngestionMappingKind.W3CLogFile,!0;default:break}if(ignoreCase&&!System.String.isNullOrEmpty(value))switch(value.toLowerCase()){case\"unknown\":return ret.v=Kusto.Data.Ingestion.IngestionMappingKind.Unknown,!0;case\"csv\":return ret.v=Kusto.Data.Ingestion.IngestionMappingKind.Csv,!0;case\"json\":return ret.v=Kusto.Data.Ingestion.IngestionMappingKind.Json,!0;case\"avro\":return ret.v=Kusto.Data.Ingestion.IngestionMappingKind.Avro,!0;case\"parquet\":return ret.v=Kusto.Data.Ingestion.IngestionMappingKind.Parquet,!0;case\"sstream\":return ret.v=Kusto.Data.Ingestion.IngestionMappingKind.SStream,!0;case\"orc\":return ret.v=Kusto.Data.Ingestion.IngestionMappingKind.Orc,!0;case\"apacheavro\":return ret.v=Kusto.Data.Ingestion.IngestionMappingKind.ApacheAvro,!0;case\"w3clogfile\":return ret.v=Kusto.Data.Ingestion.IngestionMappingKind.W3CLogFile,!0;default:break}if(!ignoreInts){var reti={v:0};if(System.Int32.tryParse(value,reti))return ret.v=reti.v,!0}return ret.v=0,!1},FastGetHashCode:function(that){return that},FastGetDescription:function(that){switch(that){case Kusto.Data.Ingestion.IngestionMappingKind.Unknown:return\"Unknown\";case Kusto.Data.Ingestion.IngestionMappingKind.Csv:return\"Csv\";case Kusto.Data.Ingestion.IngestionMappingKind.Json:return\"Json\";case Kusto.Data.Ingestion.IngestionMappingKind.Avro:return\"Avro\";case Kusto.Data.Ingestion.IngestionMappingKind.Parquet:return\"Parquet\";case Kusto.Data.Ingestion.IngestionMappingKind.SStream:return\"SStream\";case Kusto.Data.Ingestion.IngestionMappingKind.Orc:return\"Orc\";case Kusto.Data.Ingestion.IngestionMappingKind.ApacheAvro:return\"Apache Avro (through avro2json)\";case Kusto.Data.Ingestion.IngestionMappingKind.W3CLogFile:return\"W3C Extended Log File format\";default:return null}}}}});Bridge.define(\"Kusto.Data.Ingestion.IngestionMappingKind\",{$kind:\"enum\",statics:{fields:{Unknown:0,Csv:1,Json:2,Avro:4,Parquet:5,SStream:6,Orc:7,ApacheAvro:8,W3CLogFile:9}}});Bridge.define(\"Kusto.Data.IngestionQueueType\",{$kind:\"enum\",statics:{fields:{All:0,InputQueue:1,InternalQueue:2,ReadyForAggregationQueue:3,SecuredReadyForAggregationQueue:4,AggregatedReadyForImportQueue:5,FailedIngestionsQueue:6,SuccessfulIngestionsQueue:7,AbandonedIngestionsQueue:9,SecuredAbandonedIngestionsQueue:10,InternalFailedIngestionsQueue:11,AbandonedInputQueues:12}}});Bridge.define(\"Kusto.Data.IntelliSense.AdminEngineRuleKind\",{$kind:\"enum\",statics:{fields:{None:0,Start:0,YieldShowCommandOptions:0,YieldTableNamesForAdminOptions:1,YieldFunctionNamesForAdminOptions:2,YieldDatabaseNames:3,YieldShowBasicAuthOptions:4,YieldShowDatabasePrincipalsPoliciesAndSchemaOptions:5,YieldShowDatabasesOptions:6,YieldShowClusterPrincipalsOptions:7,YieldSetDatabaseAdminsUsersViewersPrettyNameOptions:8,YieldSetClusterAdminsUsersViewersDatabaseCreatorsOptions:9,YieldSetTableAdminsOptions:10,YieldAddDatabaseAdminsUsersViewersOptions:11,YieldDropDatabaseOptions:12,YieldAddClusterAdminsUsersViewersDatabaseCreatorsBlockedPrincipalsOptions:13,YieldDropClusterAdminsUsersViewersDatabaseCreatorsBlockedPrincipalsOptions:14,YieldAddClusterBlockedPrincipalsOptions:15,YieldAddTableAdminsOptions:16,YieldDropTableEntitiesOptions:17,YieldDeleteTableEntitiesOptions:18,YieldCreateTableEntitiesOptions:19,YieldAlterTableEntitiesOptions:20,YieldDropTableColumnsSyntaxOptions:21,YieldSetDatabaseUsersNoneOptions:22,YieldSetDatabaseAdminsNoneOptions:23,YieldSetDatabaseViewersNoneOptions:24,YieldSetClusterUsersNoneOptions:25,YieldSetClusterAdminsNoneOptions:26,YieldSetClusterViewersNoneOptions:27,YieldSetClusterDatabaseCreatorsNoneOptions:28,YieldSetTableAdminsNoneOptions:29,YieldShowTableEntitiesOptions:30,YieldAlterExtentTagsOptions:31,YieldAttachExtentsOptions:32,YieldAttachExtentsIntoTableOptions:33,YieldDropExtentTagsOptions:34,YieldMoveExtentsOptions:35,YieldMoveSpecifiedExtentsOptions:36,YieldMoveExtentsToTableOptions:37,YieldReplaceCommandOptions:38,YieldReplaceExtentsOptions:39,YieldRunCommandOptions:40,YieldShowExtentsOptions:41,YieldShowExtentsByEntityOptions:42,YieldShowExtentsByEntityWithTagsFiltersOptions:43,YieldSetCommandOptions:44,YieldSetOrAppendCommandOptions:45,YieldAddCommandOptions:46,YieldAttachCommandOptions:47,YieldDropCommandOptions:48,YieldMoveCommandOptions:49,YieldPoliciesOptions:50,YieldClusterPoliciesOptions:51,YieldDatabasePoliciesOptions:52,YieldTablePoliciesOptions:53,YieldColumnPoliciesOptions:54,YieldAlterCommandOptions:55,YieldAlterMergeCommandOptions:56,YieldDeleteCommandOptions:57,YieldCreateCommandOptions:58,YieldMultiplePoliciesOptions:59,YieldDatabaseCreatePersistencyOptions:60,YieldCreateIfNotExistsOptions:61,YieldAdminCommandsOptions:62,YieldExportCommandOptions:63,YieldExportCommandWithModifiersAndOptions:64,YieldExportCommandNoModifiersAndOptions:65,YieldAlterDatabaseCommandOptions:66,YieldDeleteMultiplePoliciesOptions:67,YieldIngestionDuplicationOptions:68,YieldPurgeOptions:69,YieldPurgeCleanupOptions:70,YieldPurgeWhatIfOptions:71,YieldPurgeWithPropertiesOptions:72,YieldPurgeTableOptions:73,YieldShowPrincipalCommandOptions:74,YieldAlterFunctionEntitiesOptions:75,YieldAlterMergePolicyRetentionOptions:76,YieldAlterMergePolicyRetentionSoftDeleteDefinedOptions:77,YieldAlterTimeSpanPolicyOptions:78,YieldCreateOrAlterOptions:79,YieldShowFabricOptions:80,YieldRowStoreCreatePersistencyOptions:81,YieldSetDatabaseIngestorsNoneOptions:82,YieldSetTableIngestorsNoneOptions:83,YieldSuspendNodeControlCommandOptions:84},ctors:{init:function(){this.None=Kusto.Data.IntelliSense.RuleKind.None;this.Start=Kusto.Data.IntelliSense.RuleKind.Last}}}});Bridge.define(\"Kusto.Data.IntelliSense.AnalyzedCommand\",{fields:{Command:null,Context:null}});Bridge.define(\"Kusto.Data.IntelliSense.ApiKind\",{$kind:\"enum\",statics:{fields:{Query:0,AdminSyncCommand:1,AdminAsyncCommand:2}}});Bridge.define(\"Kusto.Data.IntelliSense.ApplyPolicy\",{statics:{fields:{NullApplyPolicy:null,AppendSpacePolicy:null,AppendPipePolicy:null,AppendStringLiteralArrayPolicy:null,StringComparisonPolicy:null,AppendCommaPolicy:null,AppendDoubleCommaPolicy:null,AppendSpaceStepBackPolicy:null,AppendSpaceAfterBracketPolicy:null,MoveAfterTheBracketPolicy:null,AppendAssignmentPolicy:null,AppendJoinClauseWithOpenningBracketPolicy:null,AppendJoinClauseWithoutOpenningBracketPolicy:null,AppendFindInClausePolicy:null,AppendSearchInClausePolicy:null,AppendFindInClauseWithoutOpenningBracketPolicy:null},ctors:{init:function(){var $t;this.NullApplyPolicy=($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=\"\",$t);this.AppendSpacePolicy=($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=\" \",$t);this.AppendPipePolicy=($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=\" | \",$t);this.AppendStringLiteralArrayPolicy=($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=' (\"\", \"\")',$t.OffsetPosition=2,$t.OffsetToken=\"(\",$t);this.StringComparisonPolicy=($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=' \"\" ',$t.OffsetPosition=-2,$t);this.AppendCommaPolicy=($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=\", \",$t.OffsetPosition=0,$t);this.AppendDoubleCommaPolicy=($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=\", , \",$t.OffsetPosition=-2,$t);this.AppendSpaceStepBackPolicy=($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=\" \",$t.OffsetPosition=-2,$t);this.AppendSpaceAfterBracketPolicy=($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=\" \",$t.OffsetToken=\"(\",$t.OffsetPosition=1,$t);this.MoveAfterTheBracketPolicy=($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=\"\",$t.OffsetToken=\")\",$t.OffsetPosition=1,$t);this.AppendAssignmentPolicy=($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=\" = \",$t);this.AppendJoinClauseWithOpenningBracketPolicy=($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.OffsetPosition=-13,$t.Text=\" (\\r\\n    \\r\\n) on Key1 \",$t);this.AppendJoinClauseWithoutOpenningBracketPolicy=($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.OffsetPosition=-13,$t.Text=\"\\r\\n    \\r\\n) on Key1 \",$t);this.AppendFindInClausePolicy=($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.OffsetPosition=-8,$t.Text=\" () where \",$t);this.AppendSearchInClausePolicy=($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.OffsetPosition=-2,$t.Text=\" () \",$t);this.AppendFindInClauseWithoutOpenningBracketPolicy=($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.OffsetPosition=-8,$t.Text=\") where \",$t)}}},props:{Text:null,OffsetPosition:0,OffsetToken:null},ctors:{ctor:function(){this.$initialize()}}});Bridge.define(\"Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase\",{statics:{fields:{CommonRegexOptions:0,DefaultRegexOptions:0,s_isCommandRegex:null,s_firstWordAfterPipeRegex:null},ctors:{init:function(){this.CommonRegexOptions=16;this.DefaultRegexOptions=0;this.s_isCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_firstWordAfterPipeRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*(?<FirstWord>[\\\\w\\\\-]+)\\\\s+\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions)}},methods:{FindRules:function(rules,command,commandContext,lastPart,keywordFromCommand){var $t,r,hasKeywordMatch;$t=Bridge.getEnumerator(rules);try{while($t.moveNext())if((r=$t.Current,r.RequiredKeywords==null||!(r.RequiredKeywords.Count>0)||(hasKeywordMatch=!1,hasKeywordMatch=r.RequiresFullCommand?System.Linq.Enumerable.from(r.RequiredKeywords,System.String).any(function(keyword){return System.String.contains(command,keyword)}):!System.String.isNullOrEmpty(keywordFromCommand)&&r.RequiredKeywords.contains(keywordFromCommand),hasKeywordMatch))&&r.IsMatch(commandContext,r.RequiresFullCommand?command:lastPart))return r}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return null},FindLastStatement:function(statements){return System.String.isNullOrEmpty(statements)?\"\":System.Linq.Enumerable.from(Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.ParseAsStatements(statements,59,!1),System.String).lastOrDefault(null,null)},ParseAsStatements:function(input,delimeter,trimDelimeter){var result=new(System.Collections.Generic.List$1(System.String).ctor),currentStatementStart,chars,i,ch,eofString,len;if(System.String.isNullOrEmpty(input))return result;for(currentStatementStart=0,chars=System.String.toCharArray(input,0,input.length),i=0;i<chars.length;i=i+1|0)ch=chars[System.Array.index(i,chars)],!(ch===34|ch===39)||(i=Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.SkipToBalancedChar(chars,i+1|0,ch,System.Array.init([34,39],System.Char))),eofString=i===(chars.length-1|0),(ch===delimeter||eofString)&&(len=(i-currentStatementStart|0)+1|0,trimDelimeter&&ch===delimeter&&(len=len-1|0),len>0&&result.add(input.substr(currentStatementStart,len)),currentStatementStart=i+1|0);return result},SkipToBalancedChar:function(chars,start,balancedChar,recursionChars){for(var ch,i=start;i<chars.length;i=i+1|0){if(ch=chars[System.Array.index(i,chars)],ch===balancedChar)return i;System.Array.contains(recursionChars,ch,System.Char)&&(i=Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.SkipToBalancedChar(chars,i+1|0,ch,recursionChars))}return chars.length-1|0},GetApproximateCommandLastPart:function(command,lastPart,firstWordAfterPipe){var parts=System.String.split(command,[124].map(function(i){return String.fromCharCode(i)})),last=System.Linq.Enumerable.from(parts,System.String).lastOrDefault(null,null);if(lastPart.v=last,parts.length>1&&(lastPart.v=\"|\"+(last||\"\")),System.String.isNullOrEmpty(last)){firstWordAfterPipe.v=\"\";return}firstWordAfterPipe.v=Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.GetFirstWordAfterPipe(last)},GetFirstWordAfterPipe:function(input){var match=Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.s_firstWordAfterPipeRegex.match(input);return match.getGroups().getByName(\"FirstWord\").toString()}}},props:{Locker:null,GeneralRules:null,CommandRules:null,QueryParametersRules:null,DefaultRule:null,CommandToolTips:null,ContextConnection:null},ctors:{ctor:function(){this.$initialize();this.Locker={}}},methods:{TryMatchAnyRule:function(command,rule){var $t,$t1,analyzedCommand=this.AnalyzeCommand$1(command,null),commandContext=analyzedCommand.Context,firstWordAfterPipe={},lastPart={},isCommand,r,r1;if(Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.GetApproximateCommandLastPart(analyzedCommand.Command,lastPart,firstWordAfterPipe),isCommand=Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.s_isCommandRegex.isMatch(command),rule.v=null,isCommand){Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.PrivateTracer.Tracer.TraceVerbose(\"TryMatchAnyRule: start matching rules for commands rules\");$t=Bridge.getEnumerator(this.CommandRules);try{while($t.moveNext())if(r=$t.Current,r.IsMatch(commandContext,r.RequiresFullCommand?command:lastPart.v)){rule.v=r;break}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}}if(rule.v==null&&(Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.PrivateTracer.Tracer.TraceVerbose(\"TryMatchAnyRule: start matching rules for general rules\"),rule.v=Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.FindRules(this.GeneralRules,command,commandContext,lastPart.v,firstWordAfterPipe.v)),rule.v==null){Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.PrivateTracer.Tracer.TraceVerbose(\"TryMatchAnyRule: start matching rules for query parameters rules\");$t1=Bridge.getEnumerator(this.QueryParametersRules);try{while($t1.moveNext())if(r1=$t1.Current,r1.IsMatch(commandContext,r1.RequiresFullCommand?command:lastPart.v)){rule.v=r1;break}}finally{Bridge.is($t1,System.IDisposable)&&$t1.System$IDisposable$Dispose()}}return rule.v!=null&&rule.v.IsContextual?(Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.PrivateTracer.Tracer.TraceVerbose(\"TryMatchAnyRule: rule {0} was found\",[Bridge.box(rule.v.Kind,System.Int32)]),this.UpdateProviderAvailableEntities(command,commandContext),Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.PrivateTracer.Tracer.TraceVerbose(\"TryMatchAnyRule: Entities were updated\",[Bridge.box(rule.v.Kind,System.Int32)])):Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.PrivateTracer.Tracer.TraceVerbose(\"TryMatchAnyRule: no rule was found\"),rule.v!=null},TryMatchSpecificRule:function(command,commandContext,ruleKind,rule){rule.v=null;var isCommand=Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.s_isCommandRegex.isMatch(command);return isCommand&&(rule.v=System.Linq.Enumerable.from(this.CommandRules,Kusto.Data.IntelliSense.IntelliSenseRule).firstOrDefault(function(r){return r.Kind===ruleKind&&r.IsMatch(commandContext,command)},null)),rule.v==null&&(rule.v=System.Linq.Enumerable.from(this.GeneralRules,Kusto.Data.IntelliSense.IntelliSenseRule).firstOrDefault(function(r){return r.Kind===ruleKind&&r.IsMatch(commandContext,command)},null)),rule.v!=null&&rule.v.IsContextual&&this.UpdateProviderAvailableEntities(command,commandContext),rule.v!=null},SetQueryParametersRule:function(queryParameters){},Initialize:function(){this.CommandRules=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseRule).ctor);this.GeneralRules=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseRule).ctor);this.CommandToolTips=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTip).ctor);this.QueryParametersRules=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseRule).ctor)}}});Bridge.define(\"Kusto.Data.IntelliSense.CMRuleKind\",{$kind:\"enum\",statics:{fields:{None:0,Start:0,YieldServiceCancelMaintenance:0,YieldServiceMoveToMaintenance:1,YieldShowRegionsByHosters:2,YieldShowTridentCmServices:3,YieldAdminCommandsOptions:4,YieldPipeOptions:5,YieldOperatorsAfterPipe:6,YieldShowCommandOptions:7,YieldShowFabricCommandOptions:8,YieldShowAccountCommandOptions:9,YieldShowAccountsKeywordOptions:10,YieldMoveAccountCommandOptions:11,YieldMoveAccountSubscriptionCommandOptions:12,YieldMoveCommandOptions:13,YieldMigrateCommandOptions:14,YieldAlterCommandOptions:15,YieldAddCommandOptions:16,YieldDropCommandOptions:17,YieldRemoveCommandOptions:18,YieldCreateCommandOptions:19,YieldCreateExternalCommandOptions:20,YieldDeleteCommandOptions:21,YieldDetachCommandOptions:22,YieldCheckCommandOptions:23,YieldSetCommandOptions:24,YieldRegisterCommandOptions:25,YieldPutCommandOptions:26,YieldListCommandOptions:27,YieldListKustoPoolsServicesCommandPropertiesSuffix:28,YieldSyncCommandOptions:29,YieldServiceKeywordOptions:30,YieldServiceOrClusterKeywordOptions:31,YieldStorageAccountsKeywordOptions:32,YieldIngestLogsIntoKeywordsOptions:33,YieldInServiceKeywordOptions:34,YieldShowClusterKeywordOptions:35,YieldOperationsKeywordOptions:36,YieldOrchestrationKeywordOptions:37,YieldOrchestrationTaskHubKeywordOptions:38,YieldPcCodeKeywordOptions:39,YieldsAlterServiceConfigurationKeywordOptions:40,YieldFromAccountKeywordOptions:41,YieldShowAuditLogCommandOptions:42,YieldShowAuditLogFromCommandOptions:43,YieldShowCmServiceCommandOptions:44,YieldShowClusterClientOptions:45,YieldShowClusterClientSubscriptionCommandOptions:46,YieldShowClusterClusterNamePrincipalCommandOptions:47,YieldShowServicesCompletionKeywordsOptions:48,YieldConfigurationPropertySetKeywordOptions:49,YieldConfigurationPropertyDropKeywordOptions:50,YieldToStringKeywordOptions:51,YieldToKeywordOptions:52,YieldConfigurationPropertyWithConsentKeywordOptions:53,YieldAccountAlterOperationsKeywordOptions:54,YieldAccountAddOperationsKeywordOptions:55,YieldAccountRemoveOperationsKeywordOptions:56,YieldAccountSetOperationsKeywordOptions:57,YieldAccountRenameOperationsKeywordOptions:58,YieldServiceAlterOperationsKeywordOptions:59,YieldMetadataKeywordOptions:60,YieldSummaryKeywordOptions:61,YieldSummaryOrMetadataKeywordOptions:62,YieldDatabaseOrAccountMetadataKeywordOptions:63,YieldAccountNames:64,YieldDmServiceAddKeywordOptions:65,YieldDmServiceDropKeywordOptions:66,YieldDmServiceAlterKeywordOptions:67,YieldDmServiceAlterSettingsOptions:68,YieldDmServiceShowKeywordOptions:69,YieldServicesNames:70,YieldServicesNamesCombinedWithOptions:71,YieldTargetServiceOptions:72,YieldWithPropertiesSuffix:73,YieldWithEventHubPropertiesSuffix:74,YieldWithCosmosDbDataConnectionPropertiesSuffix:75,YieldInstallCommandOptions:76,YieldReinstallCommandOptions:77,YieldUninstallServiceCommandOptions:78,YieldUninstallCommandOptions:79,YieldUpdateCommandOptions:80,YieldMigrateServiceCommandOptions:81,YieldMigrateClusterCommandOptions:82,YieldFromServiceKeywordOptions:83,YieldDatabaseMoveFromServiceCommandOptions:84,YieldSetClusterPrincipalsCommandOptions:85,YieldAddClusterPrincipalsCommandOptions:86,YieldDropClusterPrincipalsCommandOptions:87,YieldAddClusterJitPrincipalsCommandOptions:88,YieldDropClusterJitPrincipalsCommandOptions:89,YieldSetClusterPrincipalsNoneOptions:90,YieldDropAccountPrincipalsCommandOptions:91,YieldDatabaseCreateCommandOptions:92,YieldServiceCreateCommandOptions:93,YieldShowPrincipalRolesCommandOptions:94,YieldAddKeywordOptions:95,YieldAlterServiceConfigurationPropertiesOptions:96,YieldAlterServiceConfigurationCommandOptions:97,YieldMoveServiceConfigurationCommandOptions:98,YieldAddServiceServiceNameOptions:99,YieldLoadBalancerKeywordOptions:100,YieldOperationKeywordOptions:101,YieldShowSubscriptionCommandOptions:102,YieldShowServiceSecurityRulesCommandOptions:103,YieldKeysCommandOptions:104,YieldKeyTypesCommandOptions:105,YieldAlterServiceStorageAccountsCommandOptions:106,YieldCmNotifyCommandOptions:107,YieldExecuteCommandOptions:108,YieldExecuteJobCommandOptions:109,YieldGenerateCommandOptions:110,YieldPublishCommandOptions:111,YieldSkuAvailabilityPrefix:112,YieldSkuAvailabilityCommandValues:113,YieldSkuAvailabilityPropertiesSuffix:114,YieldServiceRegenerateSuffix:115,YieldVersionKeywordOptions:116,YieldExportCommandOptions:117,YieldExportPackageForOptions:118,YieldExportPackageForServiceTypeOptions:119,YieldSharedIdentity:120,YieldSetRegionVisibility:121,YieldRegisterFeature:122,YieldBillingServiceCreateResources:123,YieldPublishServiceCommandOptions:124,YieldResultsKeywordOptions:125,YieldUnPublishCommandOptions:126,YieldUnPublishServiceCommandOptions:127,YieldRotateCommandOptions:128,YieldRotateServiceCommandOptions:129,YieldCreateFollowerDatabaseInServiceCommandOptions:130,YieldColumnNamesAfterPipeCommandOptions:131,YieldPutClientSubscriptionsNotification:132,YieldDatabaseKeywordOptions:133,YieldSyncKustoPoolRbacCommandOptions:134,YieldTridentServiceShowByResourceId:135,YieldShowServiceDiagnosticSettingsCommandOptions:136,YieldSyncKeyVaultPolicy:137,YieldRegionKeyVaultRotateCertificate:138,YieldShowResourceCommandOptions:139,YieldShowResourceMetricsCommandPropertiesSuffix:140,YieldWithUnallocatedVirtualClustersPoolExtendSuffix:141,YieldShowAzureMonitorManifestCommandPropertiesSuffix:142,YieldPublishAzureMonitorManifestCommandPropertiesSuffix:143},ctors:{init:function(){this.None=Kusto.Data.IntelliSense.RuleKind.None;this.Start=Kusto.Data.IntelliSense.RuleKind.Last}}}});Bridge.define(\"Kusto.Data.IntelliSense.CompletionOption\",{props:{Kind:0,Value:null},ctors:{ctor:function(kind,value){this.$initialize();this.Kind=kind;this.Value=value}}});Bridge.define(\"Kusto.Data.IntelliSense.CompletionOptionCollection\",{fields:{m_materializedOptions:null},props:{Kind:0,Values:null,Priority:0},ctors:{ctor:function(kind,values,priority){priority===void 0&&(priority=0);this.$initialize();this.Kind=kind;this.Values=values;this.Priority=priority}},methods:{GetCompletionOptions:function(){return this.m_materializedOptions==null&&(this.m_materializedOptions=System.Linq.Enumerable.from(this.Values,System.String).select(Bridge.fn.bind(this,$asm.$.Kusto.Data.IntelliSense.CompletionOptionCollection.f1)).ToArray(Kusto.Data.IntelliSense.CompletionOption)),this.m_materializedOptions}}});Bridge.ns(\"Kusto.Data.IntelliSense.CompletionOptionCollection\",$asm.$);Bridge.apply($asm.$.Kusto.Data.IntelliSense.CompletionOptionCollection,{f1:function(o){return new Kusto.Data.IntelliSense.CompletionOption(this.Kind,o)}});Bridge.define(\"Kusto.Data.IntelliSense.ContextOperation\",{$kind:\"enum\",statics:{fields:{None:0,Union:1,Intersect:2}}});Bridge.define(\"Kusto.Data.IntelliSense.IntelliSenseRule\",{props:{Kind:0,RequiredKeywords:null,AfterApplyPolicies:null,BeforeApplyPolicies:null,DefaultAfterApplyPolicy:null,DefaultBeforeApplyPolicy:null},methods:{GetAfterApplyInfo:function(selectedOption){var policy={v:null};return this.AfterApplyPolicies!=null&&this.AfterApplyPolicies.tryGetValue(selectedOption,policy),policy.v||this.DefaultAfterApplyPolicy||Kusto.Data.IntelliSense.ApplyPolicy.NullApplyPolicy},GetBeforeApplyInfo:function(selectedOption){var policy={v:null};return this.BeforeApplyPolicies!=null&&this.BeforeApplyPolicies.tryGetValue(selectedOption,policy),policy.v||this.DefaultBeforeApplyPolicy||Kusto.Data.IntelliSense.ApplyPolicy.NullApplyPolicy}}});Bridge.define(\"Kusto.Data.IntelliSense.CslCommand\",{statics:{fields:{c_tabulation:null,s_newLineRegex:null,s_removeWhiteSpacesAfterPipeRegex:null,s_joinStartRegex:null,s_joinEndRegex:null,s_makeSeriesOperatorRegex:null,s_operatorRegex:null,s_operatorsNotRequiringFullEntitiesResolve:null,s_nameOrListRegex:null,s_hasAssignmentOperationRegex:null,s_startsWithAlpha:null},ctors:{init:function(){this.c_tabulation=\"    \";this.s_newLineRegex=new System.Text.RegularExpressions.Regex.ctor(\"[\\\\n\\\\r]\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_removeWhiteSpacesAfterPipeRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\|\\\\s+\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.DefaultRegexOptions);this.s_joinStartRegex=new System.Text.RegularExpressions.Regex.ctor(\"(?<JoinOpPart>^\\\\s*\\\\|\\\\s*join\\\\s+(kind\\\\s*=\\\\s*\\\\w+\\\\s*)?)(?<Bracket>\\\\()?(?<PostJoinPart>.+$)\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_joinEndRegex=new System.Text.RegularExpressions.Regex.ctor(\"(?!^.*\\\\bmake-series\\\\b.*$)((?<InnerJoinPart>^.*?)(?<Bracket>\\\\)?)\\\\s*\\\\b(?<JoinOnPart>on\\\\s+.+))\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_makeSeriesOperatorRegex=new System.Text.RegularExpressions.Regex.ctor(\"\\\\bmake-series\\\\b\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.DefaultRegexOptions);this.s_operatorRegex=new System.Text.RegularExpressions.Regex.ctor(\"\\\\|\\\\s*(?<Operator>[\\\\w-]+)\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.DefaultRegexOptions);this.s_operatorsNotRequiringFullEntitiesResolve=$asm.$.Kusto.Data.IntelliSense.CslCommand.f1(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_nameOrListRegex=\"(?:\\\\w+)|(?:\\\\((\\\\w+)(,\\\\s*\\\\w+)*\\\\))\";this.s_hasAssignmentOperationRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^\\\\s*\\\\|\\\\s*(extend|parse|summarize|project|mvexpand|mv-expand|make-series|project-rename)\\\\s+\"+(Kusto.Data.IntelliSense.CslCommand.s_nameOrListRegex||\"\")+\")|(^\\\\s*range)\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.DefaultRegexOptions);this.s_startsWithAlpha=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*[a-z]\",1)}},methods:{MakeTrivialCommandFromText:function(text){var $t,$t1;return $t=new Kusto.Data.IntelliSense.CslCommand,$t.m_commandParts=($t1=Kusto.Data.IntelliSense.CslCommandToken,System.Linq.Enumerable.from(System.Array.init([new Kusto.Data.IntelliSense.CslCommandToken(text,0,Kusto.Data.IntelliSense.CslCommandToken.Kind.CslCommandToken)],Kusto.Data.IntelliSense.CslCommandToken),$t1).toList($t1)),$t.Text=text,$t.Length=text.length,$t.AbsolutePositionBias=0,$t.RelativeStart=0,$t.ParseMode=Kusto.Data.IntelliSense.ParseMode.CommandTokensOnly,$t.IsRunnable=!System.String.isNullOrWhiteSpace(text),$t},UnionCommands:function(commands){var $t,firstCommand,result;return System.Linq.Enumerable.from(commands,Kusto.Data.IntelliSense.CslCommand).count()<2?System.Linq.Enumerable.from(commands,Kusto.Data.IntelliSense.CslCommand).firstOrDefault(null,null):(firstCommand=System.Linq.Enumerable.from(commands,Kusto.Data.IntelliSense.CslCommand).first(),result=($t=new Kusto.Data.IntelliSense.CslCommand,$t.m_tokens=System.Linq.Enumerable.from(commands,Kusto.Data.IntelliSense.CslCommand).selectMany($asm.$.Kusto.Data.IntelliSense.CslCommand.f2).toList(Kusto.Data.IntelliSense.CslCommandToken),$t.m_commandParts=System.Linq.Enumerable.from(commands,Kusto.Data.IntelliSense.CslCommand).selectMany($asm.$.Kusto.Data.IntelliSense.CslCommand.f3).toList(Kusto.Data.IntelliSense.CslCommandToken),$t.m_commentsParts=System.Linq.Enumerable.from(commands,Kusto.Data.IntelliSense.CslCommand).selectMany($asm.$.Kusto.Data.IntelliSense.CslCommand.f4).toList(Kusto.Data.IntelliSense.CslCommandToken),$t.m_clientDirectivesParts=System.Linq.Enumerable.from(commands,Kusto.Data.IntelliSense.CslCommand).selectMany($asm.$.Kusto.Data.IntelliSense.CslCommand.f5).toList(Kusto.Data.IntelliSense.CslCommandToken),$t.m_bracketParts=System.Linq.Enumerable.from(commands,Kusto.Data.IntelliSense.CslCommand).selectMany($asm.$.Kusto.Data.IntelliSense.CslCommand.f6).toList(Kusto.Data.IntelliSense.CslCommandToken),$t.Text=Bridge.toArray(System.Linq.Enumerable.from(commands,Kusto.Data.IntelliSense.CslCommand).selectMany($asm.$.Kusto.Data.IntelliSense.CslCommand.f7)).join(\"\"),$t.IsRunnable=System.Linq.Enumerable.from(commands,Kusto.Data.IntelliSense.CslCommand).any($asm.$.Kusto.Data.IntelliSense.CslCommand.f8),$t.RelativeStart=firstCommand.RelativeStart,$t.AbsolutePositionBias=firstCommand.AbsolutePositionBias,$t.ParseMode=firstCommand.ParseMode,$t),result.Length=result.Text.length,result)},NormalizeCommandPart:function(partValue){return partValue=partValue.trim(),Kusto.Data.IntelliSense.CslCommand.s_removeWhiteSpacesAfterPipeRegex.replace(partValue,\"| \")},AppendTabulatedText:function(sb,level,text){Kusto.Data.IntelliSense.CslCommand.AppendTabulations(sb,level);sb.append(text)},AppendTabulations:function(sb,level){if(!(level<=0))for(var j=0;j<level;j=j+1|0)sb.append(Kusto.Data.IntelliSense.CslCommand.c_tabulation)},ResolveOperatorContext:function(part){return part==null?\"\":System.String.indexOf(part.Text,\" on \")>0&&!Kusto.Data.IntelliSense.CslCommand.s_makeSeriesOperatorRegex.isMatch(part.Text)?\"\":Kusto.Data.IntelliSense.CslCommand.s_operatorRegex.match(part.Text).getGroups().getByName(\"Operator\").toString()},GetKnownEntities:function(rulesProvider,mapOfKnownEntities,mapOfOriginallyKnownEntities,part,commandBuilder,context,operatorContext,knownEntities,originallyKnownEntities){if((knownEntities.v=new(System.Collections.Generic.List$1(System.String).ctor),originallyKnownEntities.v=mapOfOriginallyKnownEntities.containsKey(context)?mapOfOriginallyKnownEntities.getItem(context):new(System.Collections.Generic.List$1(System.String).ctor),part==null)||Kusto.Data.IntelliSense.CslCommand.s_operatorsNotRequiringFullEntitiesResolve.contains(operatorContext))return mapOfKnownEntities.containsKey(context)&&(knownEntities.v=mapOfKnownEntities.getItem(context)),!1;var command=commandBuilder.toString();return rulesProvider.GetKnownEntities(command,context,mapOfOriginallyKnownEntities,knownEntities,originallyKnownEntities)},IsMatchingRegex:function(commandPart,opRegex){return System.String.isNullOrWhiteSpace(commandPart)?!1:opRegex.isMatch(commandPart)},StartsWithAlpha:function(text){return System.String.isNullOrWhiteSpace(text)?!1:Kusto.Data.IntelliSense.CslCommand.s_startsWithAlpha.isMatch(text)}}},fields:{m_tokens:null,m_commandParts:null,m_commentsParts:null,m_clientDirectivesParts:null,m_bracketParts:null,m_commandPartsParseStates:null},props:{CslExpressionStartPosition:{get:function(){return Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$1(Kusto.Data.IntelliSense.CslCommandToken,this.m_commandParts)?0:this.m_commandParts.getItem(0).RelativeStart}},CslExpressionLength:{get:function(){return Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$1(Kusto.Data.IntelliSense.CslCommandToken,this.m_commandParts)?0:System.Linq.Enumerable.from(this.m_commandParts,Kusto.Data.IntelliSense.CslCommandToken).last().RelativeEnd-this.m_commandParts.getItem(0).RelativeStart|0}},Tokens:{get:function(){return this.m_tokens}},CommandParts:{get:function(){return this.m_commandParts}},CommentParts:{get:function(){return this.m_commentsParts}},BracketParts:{get:function(){return this.m_bracketParts}},AllParts:{get:function(){var linqParts=0,result=null;return(Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$4(Kusto.Data.IntelliSense.CslCommandToken,this.m_commandParts)&&(linqParts=linqParts+1|0,result=this.m_commandParts),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$4(Kusto.Data.IntelliSense.CslCommandToken,this.m_commentsParts)&&(linqParts=linqParts+1|0,result=result!=null?System.Linq.Enumerable.from(result,Kusto.Data.IntelliSense.CslCommandToken).union(this.m_commentsParts):Bridge.cast(this.m_commentsParts,System.Collections.Generic.IEnumerable$1(Kusto.Data.IntelliSense.CslCommandToken))),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$4(Kusto.Data.IntelliSense.CslCommandToken,this.m_clientDirectivesParts)&&(linqParts=linqParts+1|0,result=result!=null?System.Linq.Enumerable.from(result,Kusto.Data.IntelliSense.CslCommandToken).union(this.m_clientDirectivesParts):Bridge.cast(this.m_clientDirectivesParts,System.Collections.Generic.IEnumerable$1(Kusto.Data.IntelliSense.CslCommandToken))),linqParts>1)?System.Linq.Enumerable.from(result,Kusto.Data.IntelliSense.CslCommandToken).orderBy($asm.$.Kusto.Data.IntelliSense.CslCommand.f9):result}},Text:null,RelativeStart:0,Length:0,RelativeEnd:{get:function(){return(this.RelativeStart+this.Length|0)-1|0}},AbsoluteStart:{get:function(){return this.AbsolutePositionBias+this.RelativeStart|0}},AbsoluteEnd:{get:function(){return this.AbsolutePositionBias+this.RelativeEnd|0}},AbsolutePositionBias:0,IsRunnable:!1,ParseMode:0,ContextCache:null},ctors:{ctor:function(){this.$initialize()}},methods:{FormatAsString:function(separator,traits){var $t,parts,part,partValue,wasHandled;if(Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$1(Kusto.Data.IntelliSense.CslCommandToken,this.m_commandParts))return\"\";parts=this.m_commandParts;System.Enum.hasFlag(traits,Bridge.box(Kusto.Data.IntelliSense.CslCommand.FormatTraits.IncludeComments,Kusto.Data.IntelliSense.CslCommand.FormatTraits,System.Enum.toStringFn(Kusto.Data.IntelliSense.CslCommand.FormatTraits)))&&Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$4(Kusto.Data.IntelliSense.CslCommandToken,this.m_commentsParts)&&(parts=System.Linq.Enumerable.from(parts,Kusto.Data.IntelliSense.CslCommandToken).union(this.m_commentsParts).union(this.m_clientDirectivesParts).orderBy($asm.$.Kusto.Data.IntelliSense.CslCommand.f10).toList(Kusto.Data.IntelliSense.CslCommandToken));var sb=new System.Text.StringBuilder,level={v:0},isFirstTime=!0;$t=Bridge.getEnumerator(parts);try{while($t.moveNext())part=$t.Current,partValue=Kusto.Data.IntelliSense.CslCommand.s_newLineRegex.replace(part.Value,\" \"),isFirstTime||sb.append(separator),isFirstTime=!1,Kusto.Data.IntelliSense.CslCommand.AppendTabulations(sb,level.v),wasHandled=!1,!wasHandled&&System.Enum.hasFlag(traits,Bridge.box(Kusto.Data.IntelliSense.CslCommand.FormatTraits.IncludeComments,Kusto.Data.IntelliSense.CslCommand.FormatTraits,System.Enum.toStringFn(Kusto.Data.IntelliSense.CslCommand.FormatTraits)))&&(wasHandled=this.HandleCommentsAndClientDirectives(separator,sb,level,part,partValue)),!wasHandled&&System.Enum.hasFlag(traits,Bridge.box(Kusto.Data.IntelliSense.CslCommand.FormatTraits.TabulateOnFunctionBoundaries,Kusto.Data.IntelliSense.CslCommand.FormatTraits,System.Enum.toStringFn(Kusto.Data.IntelliSense.CslCommand.FormatTraits)))&&(wasHandled=this.HandleFunctions(separator,sb,level,part)),!wasHandled&&System.Enum.hasFlag(traits,Bridge.box(Kusto.Data.IntelliSense.CslCommand.FormatTraits.TabulateOnJoins,Kusto.Data.IntelliSense.CslCommand.FormatTraits,System.Enum.toStringFn(Kusto.Data.IntelliSense.CslCommand.FormatTraits)))&&(wasHandled=this.HandleJoins(separator,sb,level,part,partValue)),wasHandled||sb.append(Kusto.Data.IntelliSense.CslCommand.NormalizeCommandPart(partValue))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return sb.toString()},HandleCommentsAndClientDirectives:function(separator,sb,level,part,partValue){return Kusto.Cloud.Platform.Utils.ExtendedEnumerable.None$1(Kusto.Data.IntelliSense.CslCommandToken,System.Linq.Enumerable.from(this.m_commentsParts,Kusto.Data.IntelliSense.CslCommandToken).union(this.m_clientDirectivesParts),function(cp){return cp.AbsoluteStart===part.AbsoluteStart&&cp.AbsoluteEnd===part.AbsoluteEnd})?!1:(sb.append(partValue.trim()),!0)},HandleFunctions:function(separator,sb,level,part){var wasHandled=!1,processedStart=0,startRelativeIndex=System.String.indexOf(part.Value,String.fromCharCode(123)),startAbsoluteIndex=part.AbsoluteStart+startRelativeIndex|0,funcPrefix,endRelativeIndex,endAbsoluteIndex,boddy,funcSuffix,boddy1;return startRelativeIndex>=0&&Kusto.Cloud.Platform.Utils.ExtendedEnumerable.None$1(Kusto.Data.IntelliSense.CslCommandToken,this.m_tokens,function(t){return startAbsoluteIndex>=t.AbsoluteStart&&startAbsoluteIndex<=t.AbsoluteEnd})&&(funcPrefix=part.Value.substr(0,startRelativeIndex).trim(),funcPrefix=Kusto.Data.IntelliSense.CslCommand.s_newLineRegex.replace(funcPrefix,\" \"),sb.append(funcPrefix),sb.append(separator),sb.append(\"{\"),sb.append(separator),level.v=level.v+1|0,wasHandled=!0,processedStart=startRelativeIndex+1|0),endRelativeIndex=System.String.indexOf(part.Value,String.fromCharCode(125)),endAbsoluteIndex=part.AbsoluteStart+endRelativeIndex|0,endRelativeIndex>=0&&Kusto.Cloud.Platform.Utils.ExtendedEnumerable.None$1(Kusto.Data.IntelliSense.CslCommandToken,this.m_tokens,function(t){return endAbsoluteIndex>=t.AbsoluteStart&&endAbsoluteIndex<=t.AbsoluteEnd})&&startRelativeIndex<endRelativeIndex?(boddy=part.Value.substr(processedStart,endRelativeIndex-processedStart|0).trim(),funcSuffix=part.Value.substr(endRelativeIndex+1|0).trim(),funcSuffix=Kusto.Data.IntelliSense.CslCommand.s_newLineRegex.replace(funcSuffix,\" \"),wasHandled&&Kusto.Data.IntelliSense.CslCommand.AppendTabulations(sb,level.v),sb.append(boddy),sb.append(separator),sb.append(\"}\"),level.v=level.v-1|0,level.v<0&&(level.v=0),Kusto.Data.IntelliSense.CslCommand.AppendTabulatedText(sb,level.v,funcSuffix),wasHandled=!0):wasHandled&&(boddy1=part.Value.substr(processedStart).trim(),boddy1=Kusto.Data.IntelliSense.CslCommand.s_newLineRegex.replace(boddy1,\" \"),Kusto.Data.IntelliSense.CslCommand.AppendTabulatedText(sb,level.v,boddy1)),wasHandled},HandleJoins:function(separator,sb,level,part,partValue){var assumeJoinStartedWithBracket=!1,wasHandled=!1,remainingText=partValue,joinStartMatch=Kusto.Data.IntelliSense.CslCommand.s_joinStartRegex.match(remainingText),relativePosition=0,joinOpPart,joinEndMatch,tabLength,bracketClosed;if(joinStartMatch.getSuccess()&&(joinOpPart=joinStartMatch.getGroups().getByName(\"JoinOpPart\").toString(),sb.append(Kusto.Data.IntelliSense.CslCommand.NormalizeCommandPart(joinOpPart)),sb.append(separator),assumeJoinStartedWithBracket=!System.String.isNullOrEmpty(joinStartMatch.getGroups().getByName(\"Bracket\").toString()),level.v=level.v+1|0,remainingText=joinStartMatch.getGroups().getByName(\"PostJoinPart\").toString(),relativePosition=joinStartMatch.getGroups().getByName(\"PostJoinPart\").getIndex(),wasHandled=!0),joinEndMatch=Kusto.Data.IntelliSense.CslCommand.s_joinEndRegex.match(remainingText),joinEndMatch.getSuccess()&&System.Linq.Enumerable.from(this.m_tokens,Kusto.Data.IntelliSense.CslCommandToken).any(function(t){return t.TokenKind===Kusto.Data.IntelliSense.CslCommandToken.Kind.SubOperatorToken&&Bridge.referenceEquals(t.Value,\"on\")&&t.AbsoluteStart===((joinEndMatch.getGroups().getByName(\"JoinOnPart\").getIndex()+part.AbsoluteStart|0)+relativePosition|0)})){var joinInnerPart=Kusto.Data.IntelliSense.CslCommand.NormalizeCommandPart(joinEndMatch.getGroups().getByName(\"InnerJoinPart\").toString()),onJoinPart=Kusto.Data.IntelliSense.CslCommand.NormalizeCommandPart(joinEndMatch.getGroups().getByName(\"JoinOnPart\").toString()),hasBracket=!System.String.isNullOrEmpty(joinEndMatch.getGroups().getByName(\"Bracket\").toString()),shouldCloseBracket=hasBracket||assumeJoinStartedWithBracket,openBrackets=Kusto.Cloud.Platform.Utils.ExtendedString.CountNonOverlappingSubstrings(joinInnerPart,\"(\"),closeBrackets=Kusto.Cloud.Platform.Utils.ExtendedString.CountNonOverlappingSubstrings(joinInnerPart,\")\");hasBracket&&openBrackets>closeBrackets&&(shouldCloseBracket=!1,joinInnerPart=(joinInnerPart||\"\")+\")\");joinStartMatch.getSuccess()&&(assumeJoinStartedWithBracket&&(Kusto.Data.IntelliSense.CslCommand.AppendTabulatedText(sb,level.v-1|0,\"(\"),sb.append(separator)),Kusto.Data.IntelliSense.CslCommand.AppendTabulations(sb,level.v));level.v=level.v-1|0;level.v<0&&(level.v=0);System.String.isNullOrEmpty(joinInnerPart)?(tabLength=Kusto.Data.IntelliSense.CslCommand.c_tabulation.length,sb.replace(Kusto.Data.IntelliSense.CslCommand.c_tabulation,\"\",sb.getLength()-tabLength|0,tabLength),bracketClosed=!1,shouldCloseBracket&&(sb.append(\")\"),sb.append(separator),bracketClosed=!0),bracketClosed?Kusto.Data.IntelliSense.CslCommand.AppendTabulatedText(sb,level.v,Kusto.Data.IntelliSense.CslCommand.NormalizeCommandPart(onJoinPart)):sb.append(onJoinPart)):(sb.append(joinInnerPart),sb.append(separator),shouldCloseBracket&&(Kusto.Data.IntelliSense.CslCommand.AppendTabulatedText(sb,level.v,\")\"),sb.append(separator)),Kusto.Data.IntelliSense.CslCommand.AppendTabulatedText(sb,level.v,Kusto.Data.IntelliSense.CslCommand.NormalizeCommandPart(onJoinPart)));wasHandled=!0}else joinStartMatch.getSuccess()&&(assumeJoinStartedWithBracket&&(Kusto.Data.IntelliSense.CslCommand.AppendTabulatedText(sb,level.v-1|0,\"(\"),sb.append(separator)),Kusto.Data.IntelliSense.CslCommand.AppendTabulatedText(sb,level.v,Kusto.Data.IntelliSense.CslCommand.NormalizeCommandPart(remainingText)));return wasHandled},AcquireTokens:function(other){this.m_tokens=System.Linq.Enumerable.from(other.m_tokens,Kusto.Data.IntelliSense.CslCommandToken).select(Bridge.fn.bind(this,$asm.$.Kusto.Data.IntelliSense.CslCommand.f11)).toList(Kusto.Data.IntelliSense.CslCommandToken);this.m_commandParts=System.Linq.Enumerable.from(other.m_commandParts,Kusto.Data.IntelliSense.CslCommandToken).select(Bridge.fn.bind(this,$asm.$.Kusto.Data.IntelliSense.CslCommand.f11)).toList(Kusto.Data.IntelliSense.CslCommandToken);this.m_commentsParts=System.Linq.Enumerable.from(other.m_commentsParts,Kusto.Data.IntelliSense.CslCommandToken).select(Bridge.fn.bind(this,$asm.$.Kusto.Data.IntelliSense.CslCommand.f11)).toList(Kusto.Data.IntelliSense.CslCommandToken);this.m_clientDirectivesParts=System.Linq.Enumerable.from(other.m_clientDirectivesParts,Kusto.Data.IntelliSense.CslCommandToken).select(Bridge.fn.bind(this,$asm.$.Kusto.Data.IntelliSense.CslCommand.f11)).toList(Kusto.Data.IntelliSense.CslCommandToken);this.m_bracketParts=System.Linq.Enumerable.from(other.m_bracketParts,Kusto.Data.IntelliSense.CslCommandToken).select(Bridge.fn.bind(this,$asm.$.Kusto.Data.IntelliSense.CslCommand.f11)).toList(Kusto.Data.IntelliSense.CslCommandToken)},ParseTokens:function(rulesProvider,parseMode,previousCandidate){var tokens=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandToken).ctor),allowQueryParameters,indexer,recognizedTokens,commandParts,commentsParts,clientDirectivesPositions;if(System.String.isNullOrEmpty(this.Text)){this.m_tokens=tokens;return}rulesProvider!=null&&(rulesProvider.ResetState(),previousCandidate!=null&&Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$1(System.Collections.Generic.KeyValuePair$2(System.Int32,Kusto.Data.IntelliSense.KustoCommandContext),previousCandidate.ContextCache)&&(rulesProvider.ContextCache=new(System.Collections.Generic.Dictionary$2(System.Int32,Kusto.Data.IntelliSense.KustoCommandContext).$ctor1)(previousCandidate.ContextCache)));allowQueryParameters=rulesProvider!=null?rulesProvider.AllowQueryParameters:!1;indexer=new Kusto.Data.IntelliSense.CslCommandIndexer(allowQueryParameters);indexer.AntiTokenizers=new(System.Collections.Generic.HashSet$1(System.Char).$ctor1)(System.Array.init([45,95,40],System.Char));indexer.TokenStarters=System.Array.init([46],System.Char);indexer.TokenTerminators=new(System.Collections.Generic.HashSet$1(System.Char).$ctor1)(System.Array.init([40,46],System.Char));indexer.IndexText(this.Text);recognizedTokens=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).ctor);this.m_commandParts=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandToken).ctor);commandParts=indexer.GetCommandPartsPositions();this.AddCategorizedTokens(this.m_commandParts,null,commandParts,Kusto.Data.IntelliSense.CslCommandToken.Kind.CommandPartToken);this.m_commentsParts=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandToken).ctor);commentsParts=indexer.GetCommentsPositions();this.AddCategorizedTokens(this.m_commentsParts,null,commentsParts,Kusto.Data.IntelliSense.CslCommandToken.Kind.CommentToken);this.m_clientDirectivesParts=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandToken).ctor);clientDirectivesPositions=indexer.GetClientDirectivesPositions();this.AddCategorizedTokens(this.m_clientDirectivesParts,null,clientDirectivesPositions,Kusto.Data.IntelliSense.CslCommandToken.Kind.ClientDirectiveToken);this.m_bracketParts=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandToken).ctor);this.AddCategorizedTokens(this.m_bracketParts,null,indexer.GetBracketsPositions(),Kusto.Data.IntelliSense.CslCommandToken.Kind.BracketRangeToken);this.AddCategorizedTokens(tokens,recognizedTokens,commentsParts,Kusto.Data.IntelliSense.CslCommandToken.Kind.CommentToken);this.AddCategorizedTokens(tokens,recognizedTokens,clientDirectivesPositions,Kusto.Data.IntelliSense.CslCommandToken.Kind.ClientDirectiveToken);allowQueryParameters&&this.AddCategorizedTokens(tokens,recognizedTokens,indexer.GetQueryParametersPositions(),Kusto.Data.IntelliSense.CslCommandToken.Kind.QueryParametersToken);this.AddCategorizedTokens(tokens,recognizedTokens,indexer.GetStringLiteralsPositions(),Kusto.Data.IntelliSense.CslCommandToken.Kind.StringLiteralToken);this.AddCategorizedTokens(tokens,recognizedTokens,indexer.GetAllTokenPositions(Kusto.Data.IntelliSense.CslCommandParser.ControlCommandsTokens),Kusto.Data.IntelliSense.CslCommandToken.Kind.ControlCommandToken);this.AddCategorizedTokens(tokens,recognizedTokens,indexer.GetAllTokenPositions(Kusto.Data.IntelliSense.CslCommandParser.CslCommandsTokens),Kusto.Data.IntelliSense.CslCommandToken.Kind.CslCommandToken);this.AddCategorizedTokens(tokens,recognizedTokens,indexer.GetAllTokenPositions(Kusto.Data.IntelliSense.CslCommandParser.OperatorCommandTokens),Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken);this.AddCategorizedTokens(tokens,recognizedTokens,indexer.GetAllTokenPositions(Kusto.Data.IntelliSense.CslCommandParser.SubOperatorsTokens),Kusto.Data.IntelliSense.CslCommandToken.Kind.SubOperatorToken);this.AddCategorizedTokens(tokens,recognizedTokens,indexer.GetAllTokenPositions(Kusto.Data.IntelliSense.CslCommandParser.JoinKindTokens),Kusto.Data.IntelliSense.CslCommandToken.Kind.SubOperatorToken);this.AddCategorizedTokens(tokens,recognizedTokens,indexer.GetAllTokenPositions(Kusto.Data.IntelliSense.CslCommandParser.ReduceByKindTokens),Kusto.Data.IntelliSense.CslCommandToken.Kind.SubOperatorToken);this.AddCategorizedTokens(tokens,recognizedTokens,indexer.GetAllTokenPositions(Kusto.Data.IntelliSense.CslCommandParser.DataTypesTokens),Kusto.Data.IntelliSense.CslCommandToken.Kind.DataTypeToken);this.AddCategorizedTokens(tokens,recognizedTokens,indexer.GetAllTokenPositions(Kusto.Data.IntelliSense.CslCommandParser.FunctionsTokens,40),Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken);this.AddCategorizedTokens(tokens,recognizedTokens,indexer.GetAllTokenPositions(Kusto.Data.IntelliSense.CslCommandParser.PluginTokens,40),Kusto.Data.IntelliSense.CslCommandToken.Kind.PluginToken);rulesProvider!=null&&this.AddEntitiesTokens(rulesProvider,tokens,recognizedTokens,indexer,commandParts,previousCandidate);tokens.Sort$2($asm.$.Kusto.Data.IntelliSense.CslCommand.f12);this.ValidateTokensOutput(tokens,this.Text);parseMode===Kusto.Data.IntelliSense.ParseMode.TokenizeAllText&&(this.EnsureAllTextIsAnnotated(indexer,tokens,recognizedTokens),tokens.Sort$2($asm.$.Kusto.Data.IntelliSense.CslCommand.f12));this.m_tokens=tokens;rulesProvider!=null&&(this.ContextCache=rulesProvider.ContextCache)},ValidateTokensOutput:function(tokens,text){for(var t,tokenToRemove,$t,invalidTokens=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandToken).ctor),currentEnd=0,maxLen=text.length,i=0;i<System.Linq.Enumerable.from(tokens,Kusto.Data.IntelliSense.CslCommandToken).count();i=i+1|0)t=tokens.getItem(i),t.RelativeEnd<currentEnd||t.RelativeStart<currentEnd||t.RelativeEnd>maxLen?invalidTokens.add(t):currentEnd=t.RelativeEnd;$t=Bridge.getEnumerator(invalidTokens);try{while($t.moveNext())tokenToRemove=$t.Current,tokens.remove(tokenToRemove)}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}},AddEntitiesTokens:function(rulesProvider,tokens,recognizedTokens,indexer,commandParts,refernceCommand){var i,prevPart,part,command,tableContext,calculatedColumns,availableTableColumns,newCalculatedColumns,result,prevCalculatedColumns,calculatedColumnTokens;this.AddCategorizedTokens(tokens,recognizedTokens,indexer.GetAllTokenPositions(rulesProvider.TableNames),Kusto.Data.IntelliSense.CslCommandToken.Kind.TableToken);this.m_commandPartsParseStates=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommand.AddEntitiesTokensState).ctor);var commandBuilder=new System.Text.StringBuilder,letVariables=new(System.Collections.Generic.HashSet$1(System.String).$ctor1)(rulesProvider.FunctionNames),canUseReference=refernceCommand!=null,state=null,analyzedCommand=null;for(i=0;i<(System.Array.getCount(commandParts,Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition)+1|0);i=i+1|0){if(prevPart=i>0?System.Array.getItem(commandParts,i-1|0,Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition):null,part={v:i<System.Array.getCount(commandParts,Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition)?System.Array.getItem(commandParts,i,Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition):null},state=state!=null?state.Clone():new Kusto.Data.IntelliSense.CslCommand.AddEntitiesTokensState,part.v!=null&&commandBuilder.append(part.v.Text),canUseReference=!!(canUseReference&(part.v!=null&&refernceCommand!=null&&Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(Kusto.Data.IntelliSense.CslCommandToken,refernceCommand.CommandParts)&&Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$4(Kusto.Data.IntelliSense.CslCommand.AddEntitiesTokensState,refernceCommand.m_commandPartsParseStates)&&System.Linq.Enumerable.from(refernceCommand.m_commandPartsParseStates,Kusto.Data.IntelliSense.CslCommand.AddEntitiesTokensState).count()>i&&System.Linq.Enumerable.from(refernceCommand.CommandParts,Kusto.Data.IntelliSense.CslCommandToken).count()>i&&System.String.equals(part.v.Text,System.Linq.Enumerable.from(refernceCommand.CommandParts,Kusto.Data.IntelliSense.CslCommandToken).elementAt(i).Value))),canUseReference){var referencePart=System.Linq.Enumerable.from(refernceCommand.CommandParts,Kusto.Data.IntelliSense.CslCommandToken).elementAt(i),offset={v:part.v.Start-referencePart.RelativeStart|0},capturedTokens=System.Linq.Enumerable.from(refernceCommand.Tokens,Kusto.Data.IntelliSense.CslCommandToken).where(function($me,part){return function(t){return(t.TokenKind===Kusto.Data.IntelliSense.CslCommandToken.Kind.CalculatedColumnToken||t.TokenKind===Kusto.Data.IntelliSense.CslCommandToken.Kind.TableColumnToken||t.TokenKind===Kusto.Data.IntelliSense.CslCommandToken.Kind.TableToken||t.TokenKind===Kusto.Data.IntelliSense.CslCommandToken.Kind.LetVariablesToken)&&t.RelativeStart>=part.v.Start&&t.RelativeEnd<=part.v.End}}(this,part)).select(function($me,offset){return function(t){var clonedToken=Bridge.as(t.clone(),Kusto.Data.IntelliSense.CslCommandToken);return clonedToken.RelativeStart=clonedToken.RelativeStart+offset.v|0,clonedToken}}(this,offset)).ToArray(Kusto.Data.IntelliSense.CslCommandToken);tokens.AddRange(capturedTokens);recognizedTokens.AddRange(indexer.GetTokenPositionsInRange(System.Linq.Enumerable.from(capturedTokens,Kusto.Data.IntelliSense.CslCommandToken).select($asm.$.Kusto.Data.IntelliSense.CslCommand.f13),part.v.Start,part.v.End));this.AddLetStatementTokens(tokens,recognizedTokens,indexer,letVariables,part.v);state=refernceCommand.m_commandPartsParseStates.getItem(i).Clone();this.m_commandPartsParseStates.add(state);continue}if(part.v!=null&&this.AddLetStatementTokens(tokens,recognizedTokens,indexer,letVariables,part.v),analyzedCommand==null?(command=commandBuilder.toString(),analyzedCommand=rulesProvider.AnalyzeCommand$1(command,refernceCommand)):part.v!=null&&(analyzedCommand=rulesProvider.AnalyzeCommand(analyzedCommand,part.v.Text)),tableContext=analyzedCommand.Context,!tableContext.IsEmpty()){var operatorContext=Kusto.Data.IntelliSense.CslCommand.ResolveOperatorContext(part.v),knownEntities={},originallyKnownEntities={},wasFullyResolved=Kusto.Data.IntelliSense.CslCommand.GetKnownEntities(rulesProvider,state.MapOfKnownEntities,state.MapOfOriginallyKnownEntities,part.v,commandBuilder,tableContext,operatorContext,knownEntities,originallyKnownEntities);if(part.v!=null&&(rulesProvider.ResolveKnownEntitiesFromContext(tableContext),calculatedColumns=System.Linq.Enumerable.from(knownEntities.v,System.String).except(originallyKnownEntities.v),availableTableColumns=System.Linq.Enumerable.from(originallyKnownEntities.v,System.String).intersect(knownEntities.v),this.AddCategorizedTokens(tokens,recognizedTokens,indexer.GetTokenPositionsInRange(availableTableColumns,part.v.Start,part.v.End),Kusto.Data.IntelliSense.CslCommandToken.Kind.TableColumnToken),this.AddCategorizedTokens(tokens,recognizedTokens,indexer.GetTokenPositionsInRange(calculatedColumns,part.v.Start,part.v.End),Kusto.Data.IntelliSense.CslCommandToken.Kind.CalculatedColumnToken),this.AddCategorizedTokens(tokens,recognizedTokens,indexer.GetTokenPositionsInRange(rulesProvider.RemoteTableNames,part.v.Start,part.v.End),Kusto.Data.IntelliSense.CslCommandToken.Kind.TableToken)),!wasFullyResolved&&part.v!=null){newCalculatedColumns=new(System.Collections.Generic.List$1(System.String).ctor);result=rulesProvider.ResolveEntitiesFromCommand((part.v.Text||\"\")+\" | \",newCalculatedColumns,knownEntities.v);switch(result){case Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.ReplaceEntities:knownEntities.v=newCalculatedColumns;break;case Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.None:break;case Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.AppendEntities:knownEntities.v=System.Linq.Enumerable.from(knownEntities.v,System.String).union(newCalculatedColumns).toList(System.String);break}}state.MapOfKnownEntities.setItem(tableContext,knownEntities.v);prevPart!=null&&Kusto.Data.IntelliSense.CslCommand.IsMatchingRegex(prevPart.Text,Kusto.Data.IntelliSense.CslCommand.s_hasAssignmentOperationRegex)&&state.MapOfPreviousCalculatedEntities.containsKey(tableContext)&&(prevCalculatedColumns=state.MapOfPreviousCalculatedEntities.getItem(tableContext),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$4(System.String,prevCalculatedColumns)&&(calculatedColumnTokens=indexer.GetTokenPositionsInRange(prevCalculatedColumns,prevPart.Start,prevPart.End),System.Linq.Enumerable.from(calculatedColumnTokens,Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).any()&&this.AddCategorizedTokens(tokens,recognizedTokens,calculatedColumnTokens,Kusto.Data.IntelliSense.CslCommandToken.Kind.CalculatedColumnToken)));state.MapOfPreviousCalculatedEntities.setItem(tableContext,System.Linq.Enumerable.from(knownEntities.v,System.String).except(originallyKnownEntities.v).toList(System.String));this.m_commandPartsParseStates.add(state)}}},AddLetStatementTokens:function(tokens,recognizedTokens,indexer,letVariables,part){var letVariable=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveLetVariable(part.Text);System.String.isNullOrEmpty(letVariable)||letVariables.add(letVariable);letVariables.Count>0&&this.AddCategorizedTokens(tokens,recognizedTokens,indexer.GetTokenPositionsInRange(letVariables,part.Start,part.End),Kusto.Data.IntelliSense.CslCommandToken.Kind.LetVariablesToken)},AddCategorizedTokens:function(target,recognizedTokenList,textTokens,tokenKind){recognizedTokenList!=null&&recognizedTokenList.AddRange(textTokens);target.AddRange(System.Linq.Enumerable.from(textTokens,Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).select(Bridge.fn.bind(this,function(t){var $t;return $t=new Kusto.Data.IntelliSense.CslCommandToken(t.Text,this.RelativeStart,tokenKind),$t.Length=t.Length,$t.RelativeStart=t.Start,$t})))},EnsureAllTextIsAnnotated:function(indexer,tokens,recognizedTokens){var start,tokensCount,i,token,newTokenLen,tokenText,tokenText1;if(tokens!=null){for(this.AddUnrecognizedTokens(indexer,tokens,recognizedTokens),tokens.Sort$2($asm.$.Kusto.Data.IntelliSense.CslCommand.f12),start=0,tokensCount=tokens.Count,i=0;i<tokensCount;i=i+1|0)token=tokens.getItem(i),start<token.RelativeStart&&(newTokenLen=token.RelativeStart-start|0,newTokenLen>0&&(tokenText=this.Text.substr(start,newTokenLen),this.AddPlainOrUnrecognizedTokens(tokens,start,tokenText))),start=token.RelativeEnd;start<this.Length&&(tokenText1=this.Text.substr(start,this.Length-start|0),this.AddPlainOrUnrecognizedTokens(tokens,start,tokenText1))}},AddUnrecognizedTokens:function(indexer,tokens,recognizedTokens){var $t,unrecognizedTokens=indexer.GetUnrecognizedTokenPositions(recognizedTokens),t;$t=Bridge.getEnumerator(unrecognizedTokens,Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition);try{while($t.moveNext())t=$t.Current,this.AddPlainOrUnrecognizedTokens(tokens,t.Start,t.Text)}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}},AddPlainOrUnrecognizedTokens:function(tokens,tokenStart,text){for(var prefixText,prefixToken,suffixText,suffixToken,$t,chars=System.String.toCharArray(text,0,text.length),startTextIndex=-1,endTextIndex=chars.length,i=0;i<chars.length;i=i+1|0)System.Char.isWhiteSpace(String.fromCharCode(chars[System.Array.index(i,chars)]))||(endTextIndex=i+1|0,startTextIndex=startTextIndex>=0?startTextIndex:i);startTextIndex>0?(prefixText=text.substr(0,startTextIndex),prefixToken=($t=new Kusto.Data.IntelliSense.CslCommandToken(prefixText,this.RelativeStart,Kusto.Data.IntelliSense.CslCommandToken.Kind.PlainTextToken),$t.Length=startTextIndex,$t.RelativeStart=tokenStart,$t),tokens.add(prefixToken)):startTextIndex=0;var tokenText=text.substr(startTextIndex,endTextIndex-startTextIndex|0),tokenKind=Kusto.Data.IntelliSense.CslCommand.StartsWithAlpha(tokenText)?Kusto.Data.IntelliSense.CslCommandToken.Kind.UnknownToken:Kusto.Data.IntelliSense.CslCommandToken.Kind.PlainTextToken,token=($t=new Kusto.Data.IntelliSense.CslCommandToken(tokenText,this.RelativeStart,tokenKind),$t.Length=tokenText.length,$t.RelativeStart=tokenStart+startTextIndex|0,$t);tokens.add(token);endTextIndex<chars.length&&(suffixText=text.substr(endTextIndex,chars.length-endTextIndex|0),suffixToken=($t=new Kusto.Data.IntelliSense.CslCommandToken(suffixText,this.RelativeStart,Kusto.Data.IntelliSense.CslCommandToken.Kind.PlainTextToken),$t.Length=suffixText.length,$t.RelativeStart=tokenStart+endTextIndex|0,$t),tokens.add(suffixToken))}}});Bridge.ns(\"Kusto.Data.IntelliSense.CslCommand\",$asm.$);Bridge.apply($asm.$.Kusto.Data.IntelliSense.CslCommand,{f1:function(_o1){return _o1.add(\"distinct\"),_o1.add(\"extend\"),_o1.add(\"project\"),_o1.add(\"project-rename\"),_o1.add(\"mvexpand\"),_o1.add(\"mv-expand\"),_o1.add(\"where\"),_o1.add(\"filter\"),_o1.add(\"parse\"),_o1.add(\"limit\"),_o1.add(\"count\"),_o1.add(\"order\"),_o1.add(\"sort\"),_o1.add(\"reduce\"),_o1.add(\"take\"),_o1.add(\"summarize\"),_o1.add(\"top\"),_o1.add(\"top-nested\"),_o1.add(\"top-hitters\"),_o1.add(\"render\"),_o1.add(\"fork\"),_o1.add(\"find\"),_o1.add(\"sample\"),_o1.add(\"sample-distinct\"),_o1.add(\"search\"),_o1.add(\"make-series\"),_o1},f2:function(c){return c.m_tokens},f3:function(c){return c.m_commandParts},f4:function(c){return c.m_commentsParts},f5:function(c){return c.m_clientDirectivesParts},f6:function(c){return c.m_bracketParts},f7:function(c){return c.Text},f8:function(c){return c.IsRunnable},f9:function(p){return p.AbsoluteStart},f10:function(p){return p.RelativeStart},f11:function(t){var token=Bridge.as(t.clone(),Kusto.Data.IntelliSense.CslCommandToken);return token.AbsolutePositionBias=this.RelativeStart,token},f12:function(x,y){return x.CompareTo(y)},f13:function(ct){return ct.Value}});Bridge.define(\"Kusto.Data.IntelliSense.CslCommand.AddEntitiesTokensState\",{$kind:\"nested class\",fields:{MapOfKnownEntities:null,MapOfPreviousCalculatedEntities:null,MapOfOriginallyKnownEntities:null},ctors:{init:function(){this.MapOfKnownEntities=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).ctor);this.MapOfPreviousCalculatedEntities=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).ctor);this.MapOfOriginallyKnownEntities=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).ctor)}},methods:{Clone:function(){var $t;return $t=new Kusto.Data.IntelliSense.CslCommand.AddEntitiesTokensState,$t.MapOfKnownEntities=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).$ctor1)(this.MapOfKnownEntities),$t.MapOfOriginallyKnownEntities=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).$ctor1)(this.MapOfOriginallyKnownEntities),$t.MapOfPreviousCalculatedEntities=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).$ctor1)(this.MapOfPreviousCalculatedEntities),$t}}});Bridge.define(\"Kusto.Data.IntelliSense.CslCommand.FormatTraits\",{$kind:\"nested enum\",statics:{fields:{None:0,IncludeComments:1,TabulateOnJoins:2,TabulateOnFunctionBoundaries:4}},$flags:!0});Bridge.define(\"Kusto.Data.IntelliSense.CslCommand.PrivateTracer\",{$kind:\"nested class\",statics:{fields:{Tracer:null},ctors:{init:function(){this.Tracer=new Kusto.Data.IntelliSense.CslCommand.PrivateTracer}}},methods:{TraceVerbose:function(format,list){list===void 0&&(list=[])}}});Bridge.define(\"Kusto.Data.IntelliSense.CslCommandIndexer\",{statics:{fields:{MultiLineRegexOptions:0,SingleLineRegexOptions:0,s_defaultCommentRegex:null,s_defaultClientDirectivesRegex:null,s_defaultStringLiteralsRegex:null,s_defaultQueryParametersRegex:null,s_matchingBrackets:null},ctors:{init:function(){this.MultiLineRegexOptions=2;this.SingleLineRegexOptions=16;this.s_defaultCommentRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^\\\\s*//.*?(\\\\n|$))\",Kusto.Data.IntelliSense.CslCommandIndexer.MultiLineRegexOptions);this.s_defaultClientDirectivesRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^\\\\s*#.*?(\\\\n|$))\",Kusto.Data.IntelliSense.CslCommandIndexer.MultiLineRegexOptions);this.s_defaultStringLiteralsRegex=new System.Text.RegularExpressions.Regex.ctor(\"(@?'.*?\\\\'|@?\\\\\\\".*?\\\\\\\")\",Kusto.Data.IntelliSense.CslCommandIndexer.MultiLineRegexOptions);this.s_defaultQueryParametersRegex=new System.Text.RegularExpressions.Regex.ctor(\"\\\\{([a-zA-Z]\\\\w+?)\\\\}\",Kusto.Data.IntelliSense.CslCommandIndexer.MultiLineRegexOptions);this.s_matchingBrackets=$asm.$.Kusto.Data.IntelliSense.CslCommandIndexer.f1(new(System.Collections.Generic.Dictionary$2(System.Char,System.Char).ctor))}},methods:{AddToCollection:function(text,chars,tokenStart,scanStart,target){var $t,endOfArray={},terminators=System.Array.init([10,13],System.Char),token=($t=new Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition,$t.Start=tokenStart,$t.End=Kusto.Data.IntelliSense.CslCommandIndexer.ReadTill(chars,scanStart+1|0,terminators,null,endOfArray),$t),len;return token.End>token.Start&&(endOfArray.v&&(token.End=token.End-1|0),len=(token.End-token.Start|0)+1|0,token.Text=text.substr(token.Start,len),target.add(token)),token.End},ReadTill:function(chars,i,terminators,escaping,endOfArray){endOfArray.v=!0;for(var foundTerminators=new(System.Collections.Generic.HashSet$1(System.Char).ctor);i<chars.length;i=i+1|0){if(System.Linq.Enumerable.from(foundTerminators,System.Char).any()){if(System.Array.contains(terminators,chars[System.Array.index(i,chars)],System.Char)&&!foundTerminators.contains(chars[System.Array.index(i,chars)])){foundTerminators.add(chars[System.Array.index(i,chars)]);continue}endOfArray.v=!1;i=i-1|0;break}if(System.Array.contains(terminators,chars[System.Array.index(i,chars)],System.Char)){foundTerminators.add(chars[System.Array.index(i,chars)]);continue}escaping!=null&&System.Linq.Enumerable.from(escaping,System.Char).any(function(t){return chars[System.Array.index(i,chars)]===t})&&(i=i+1|0)}return i>chars.length?chars.length:i},ReadVerbatimTill:function(chars,i,terminators,endOfArray){endOfArray.v=!0;for(var escapeSequence=0;i<chars.length;i=i+1|0)if(System.Array.contains(terminators,chars[System.Array.index(i,chars)],System.Char)&&(escapeSequence=escapeSequence+1|0,escapeSequence%2!=0&&i<(chars.length-1|0)&&!System.Array.contains(terminators,chars[System.Array.index(i+1|0,chars)],System.Char))){endOfArray.v=!1;break}return i},CaptureTokensUsingRegex:function(text,regexList,tokenList){var $t,$t1,$t2,$t3,commentRegex,matches,m,c,token;if(!Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$1(System.Text.RegularExpressions.Regex,regexList)){$t=Bridge.getEnumerator(regexList);try{while($t.moveNext()){commentRegex=$t.Current;matches=commentRegex.matches(text);$t1=Bridge.getEnumerator(matches);try{while($t1.moveNext()){m=Bridge.cast($t1.Current,System.Text.RegularExpressions.Match);$t2=Bridge.getEnumerator(m.getCaptures());try{while($t2.moveNext())c=Bridge.cast($t2.Current,System.Text.RegularExpressions.Capture),token=($t3=new Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition,$t3.Start=c.getIndex(),$t3.End=(c.getIndex()+c.getLength()|0)-1|0,$t3.Text=c.getValue(),$t3),tokenList.add(token)}finally{Bridge.is($t2,System.IDisposable)&&$t2.System$IDisposable$Dispose()}}}finally{Bridge.is($t1,System.IDisposable)&&$t1.System$IDisposable$Dispose()}}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}}}}},fields:{m_tokensAndPositions:null,m_commentTokenPositions:null,m_clientDirectivesTokenPositions:null,m_stringLiteralsPositions:null,m_queryParametersPositions:null,m_commandPartsPositions:null,m_bracketPartsPositions:null,m_sourceText:null,m_commentRegexCollection:null,m_clientDirectivesRegexCollection:null,m_stringLiteralsRegexCollection:null,m_queryParametersRegexCollection:null},props:{AntiTokenizers:null,TokenTerminators:null,TokenStarters:null},ctors:{init:function(){this.m_tokensAndPositions=new(System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition)).ctor);this.m_commentTokenPositions=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).ctor);this.m_clientDirectivesTokenPositions=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).ctor);this.m_stringLiteralsPositions=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).ctor);this.m_queryParametersPositions=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).ctor);this.m_commandPartsPositions=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).ctor);this.m_bracketPartsPositions=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).ctor);this.m_commentRegexCollection=new(System.Collections.Generic.List$1(System.Text.RegularExpressions.Regex).ctor);this.m_clientDirectivesRegexCollection=new(System.Collections.Generic.List$1(System.Text.RegularExpressions.Regex).ctor);this.m_stringLiteralsRegexCollection=new(System.Collections.Generic.List$1(System.Text.RegularExpressions.Regex).ctor);this.m_queryParametersRegexCollection=new(System.Collections.Generic.List$1(System.Text.RegularExpressions.Regex).ctor)},ctor:function(indexQueryParameters){this.$initialize();this.m_commentRegexCollection.add(Kusto.Data.IntelliSense.CslCommandIndexer.s_defaultCommentRegex);this.m_clientDirectivesRegexCollection.add(Kusto.Data.IntelliSense.CslCommandIndexer.s_defaultClientDirectivesRegex);this.m_stringLiteralsRegexCollection.add(Kusto.Data.IntelliSense.CslCommandIndexer.s_defaultStringLiteralsRegex);indexQueryParameters&&this.m_queryParametersRegexCollection.add(Kusto.Data.IntelliSense.CslCommandIndexer.s_defaultQueryParametersRegex)}},methods:{IndexText:function(text){var $t,chars,i,len,partText,bracketItem,bracketToken,isTokenEnd;this.m_tokensAndPositions.clear();this.m_sourceText=text;chars=System.String.toCharArray(text,0,text.length);this.DetectCommentsAndStringLiterals(text);var skipRanges=this.GetTokenLookupSkipRanges(text.length),tokenLookupState=Kusto.Data.IntelliSense.CslCommandIndexer.State.LookingForTokenStart,tokenBuilder=null,tokenPosition=null,commandPartPosition=null,bracketsStack=new(System.Collections.Generic.Stack$1(System.Tuple$2(System.Char,System.Int32)).ctor);for(i=0;i<chars.length;i=i+1|0){var isInsideTokenLookupSkipRange=skipRanges[System.Array.index(i,skipRanges)],isInsideCommentRange=System.Linq.Enumerable.from(this.m_commentTokenPositions,Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).where(function(r){return i>=r.Start&&i<=r.End}).any(),c=chars[System.Array.index(i,chars)],isAfterWhiteSpace=i===0||System.Char.isWhiteSpace(String.fromCharCode(chars[System.Array.index(i-1|0,chars)])),canStartNewPart=!0;commandPartPosition!=null&&((c===124||c===59)&&!isInsideTokenLookupSkipRange||isInsideCommentRange||i===(chars.length-1|0))&&(i===(chars.length-1|0)||c===59?(commandPartPosition.End=i,canStartNewPart=!1):commandPartPosition.End=i-1|0,len=(commandPartPosition.End-commandPartPosition.Start|0)+1|0,len>1&&(partText=text.substr(commandPartPosition.Start,len),commandPartPosition.Text=partText,System.String.equals(partText,\"\\n\")||System.String.isNullOrWhiteSpace(partText)||this.m_commandPartsPositions.add(commandPartPosition)),commandPartPosition=null);commandPartPosition==null&&!isInsideCommentRange&&canStartNewPart&&(commandPartPosition=($t=new Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition,$t.Start=i,$t.End=i,$t));isInsideTokenLookupSkipRange||Kusto.Data.IntelliSense.CslCommandIndexer.s_matchingBrackets.containsKey(c)&&(bracketsStack.Count>0&&bracketsStack.Peek().Item1===c?(bracketItem=bracketsStack.Pop(),bracketToken=($t=new Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition,$t.Start=bracketItem.Item2,$t.End=i,$t),bracketToken.Text=text.substr(bracketToken.Start,(bracketToken.End-bracketToken.Start|0)+1|0),this.m_bracketPartsPositions.add(bracketToken)):bracketsStack.Push({Item1:Kusto.Data.IntelliSense.CslCommandIndexer.s_matchingBrackets.getItem(c),Item2:i}));switch(tokenLookupState){case Kusto.Data.IntelliSense.CslCommandIndexer.State.LookingForTokenStart:!isInsideTokenLookupSkipRange&&(this.IsPartOfTheToken(c)&&!this.IsTokenTerminator(c)||isAfterWhiteSpace&&this.IsTokenStarter(c))&&(tokenBuilder=new System.Text.StringBuilder,tokenPosition=($t=new Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition,$t.Start=i,$t.End=i,$t),tokenBuilder.append(String.fromCharCode(c)),tokenLookupState=Kusto.Data.IntelliSense.CslCommandIndexer.State.LookingForTokenEnd);break;case Kusto.Data.IntelliSense.CslCommandIndexer.State.LookingForTokenEnd:isTokenEnd=!1;!isInsideTokenLookupSkipRange&&this.IsPartOfTheToken(c)?this.IsTokenTerminator(c)?(tokenPosition.TokenTerminator=c,isTokenEnd=!0):(tokenBuilder.append(String.fromCharCode(c)),tokenPosition.End=i):isTokenEnd=!0;(isTokenEnd||i===(chars.length-1|0))&&(tokenPosition.Text=tokenBuilder.toString(),this.AddTokenPosition(tokenPosition),tokenLookupState=Kusto.Data.IntelliSense.CslCommandIndexer.State.LookingForTokenStart);break}}},GetTokenLookupSkipRanges:function(size){var ranges=new(System.Collections.Generic.List$1(System.Tuple$2(System.Int32,System.Int32)).ctor),i;ranges.AddRange(System.Linq.Enumerable.from(this.m_stringLiteralsPositions,Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).select($asm.$.Kusto.Data.IntelliSense.CslCommandIndexer.f2));ranges.AddRange(System.Linq.Enumerable.from(this.m_commentTokenPositions,Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).select($asm.$.Kusto.Data.IntelliSense.CslCommandIndexer.f2));ranges.AddRange(System.Linq.Enumerable.from(this.m_clientDirectivesTokenPositions,Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).select($asm.$.Kusto.Data.IntelliSense.CslCommandIndexer.f2));ranges.AddRange(System.Linq.Enumerable.from(this.m_queryParametersPositions,Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).select($asm.$.Kusto.Data.IntelliSense.CslCommandIndexer.f2));ranges.Sort$2($asm.$.Kusto.Data.IntelliSense.CslCommandIndexer.f3);var rIndex=0,currentSkipRange=System.Linq.Enumerable.from(ranges,System.Tuple$2(System.Int32,System.Int32)).firstOrDefault(null,null),result=System.Array.init(size,!1,System.Boolean);for(i=0;i<size&&currentSkipRange!=null;i=i+1|0)i>=currentSkipRange.Item1&&(result[System.Array.index(i,result)]=!0),currentSkipRange.Item2===i&&(currentSkipRange=System.Linq.Enumerable.from(ranges,System.Tuple$2(System.Int32,System.Int32)).elementAtOrDefault(rIndex=rIndex+1|0,null));return result},GetCommandPartsPositions:function(){return this.m_commandPartsPositions},GetCommentsPositions:function(){return this.m_commentTokenPositions},GetClientDirectivesPositions:function(){return this.m_clientDirectivesTokenPositions},GetStringLiteralsPositions:function(){return this.m_stringLiteralsPositions},GetQueryParametersPositions:function(){return this.m_queryParametersPositions},GetBracketsPositions:function(){return this.m_bracketPartsPositions},GetUnrecognizedTokenPositions:function(recognizedTokens){return System.Linq.Enumerable.from(this.m_tokensAndPositions.Values,System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition)).selectMany($asm.$.Kusto.Data.IntelliSense.CslCommandIndexer.f4).except(recognizedTokens)},GetTokenPositionsInRange:function(searchForTokens,rangeStart,rangeEnd){var $t,result=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).ctor),token,tokensInRange;if(Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(System.String,searchForTokens))return result;$t=Bridge.getEnumerator(searchForTokens,System.String);try{while($t.moveNext())(token=$t.Current,System.String.isNullOrEmpty(token))||this.m_tokensAndPositions.containsKey(token)&&(tokensInRange=System.Linq.Enumerable.from(this.m_tokensAndPositions.getItem(token),Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).where(function(t){return t.Start>=rangeStart&&t.End<=rangeEnd}),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition,tokensInRange)&&result.AddRange(tokensInRange))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return result},GetAllTokensSortedByPosition:function(){return Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$1(System.Collections.Generic.KeyValuePair$2(System.String,System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition)),this.m_tokensAndPositions)?null:System.Linq.Enumerable.from(this.m_tokensAndPositions,System.Collections.Generic.KeyValuePair$2(System.String,System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition))).selectMany($asm.$.Kusto.Data.IntelliSense.CslCommandIndexer.f5).orderBy($asm.$.Kusto.Data.IntelliSense.CslCommandIndexer.f6)},GetAllTokenPositions:function(tokens,tokenSuffix){var $t,result,token;if(tokenSuffix===void 0&&(tokenSuffix=0),result=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).ctor),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(System.String,tokens))return result;$t=Bridge.getEnumerator(tokens,System.String);try{while($t.moveNext())token=$t.Current,this.m_tokensAndPositions.containsKey(token)&&result.AddRange(System.Linq.Enumerable.from(this.m_tokensAndPositions.getItem(token),Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).where(function(t){return t.TokenTerminator===tokenSuffix}))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return result},IsPartOfTheToken:function(c){return System.Char.isDigit(c)||System.Char.isLetter(c)||this.AntiTokenizers!=null&&this.AntiTokenizers.contains(c)},IsTokenTerminator:function(c){return this.TokenTerminators!=null&&this.TokenTerminators.contains(c)},IsTokenStarter:function(c){return this.TokenStarters!=null&&System.Array.contains(this.TokenStarters,c,System.Char)},DetectCommentsAndStringLiterals:function(text){Kusto.Data.IntelliSense.CslCommandIndexer.CaptureTokensUsingRegex(text,this.m_queryParametersRegexCollection,this.m_queryParametersPositions);Kusto.Cloud.Platform.Utils.ExtendedEnumerable.None(Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition,this.m_queryParametersPositions)?this.DetectCommentsAndStringLiterals_Simple(text):this.DetectCommentsAndStringLiterals_Complex(text)},DetectCommentsAndStringLiterals_Simple:function(text){for(var ch,chars=System.String.toCharArray(text,0,text.length),state=0,i=0;i<chars.length;i=i+1|0){ch=chars[System.Array.index(i,chars)];switch(state){case 0:ch===64?state=1:ch===39||ch===34?i=this.AddStringLiteralToken(text,chars,i,i,ch,!1):ch===47?state=2:ch===35&&(i=this.AddClientDirectiveToken(text,chars,i,i),state=0);break;case 1:(ch===39||ch===34)&&(i=this.AddStringLiteralToken(text,chars,i-1|0,i,ch,!0));state=0;break;case 2:ch===47&&(i=this.AddCommentToken(text,chars,i-1|0,i));state=0;break}}},AddCommentToken:function(text,chars,tokenStart,scanStart){return Kusto.Data.IntelliSense.CslCommandIndexer.AddToCollection(text,chars,tokenStart,scanStart,this.m_commentTokenPositions)},AddClientDirectiveToken:function(text,chars,tokenStart,scanStart){return Kusto.Data.IntelliSense.CslCommandIndexer.AddToCollection(text,chars,tokenStart,scanStart,this.m_clientDirectivesTokenPositions)},AddStringLiteralToken:function(text,chars,start,position,ch,ifVerbatim){var $t,endOfArray={},token=($t=new Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition,$t.Start=start,$t.End=ifVerbatim?Kusto.Data.IntelliSense.CslCommandIndexer.ReadVerbatimTill(chars,position+1|0,System.Array.init([ch],System.Char),endOfArray):Kusto.Data.IntelliSense.CslCommandIndexer.ReadTill(chars,position+1|0,System.Array.init([ch],System.Char),System.Array.init([92],System.Char),endOfArray),$t),len;return token.End>token.Start&&(endOfArray.v&&(token.End=token.End-1|0),len=(token.End-token.Start|0)+1|0,token.Text=text.substr(token.Start,len),this.m_stringLiteralsPositions.add(token)),token.End},DetectCommentsAndStringLiterals_Complex:function(text){var $t,i,slp,i1,slp1,i2,qpp,slp2,newSlp;for(Kusto.Data.IntelliSense.CslCommandIndexer.CaptureTokensUsingRegex(text,this.m_commentRegexCollection,this.m_commentTokenPositions),Kusto.Data.IntelliSense.CslCommandIndexer.CaptureTokensUsingRegex(text,this.m_clientDirectivesRegexCollection,this.m_clientDirectivesTokenPositions),i=this.m_queryParametersPositions.Count-1|0;i>=0;i=i-1|0)slp={v:this.m_queryParametersPositions.getItem(i)},System.Linq.Enumerable.from(this.m_commentTokenPositions,Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).where(function($me,slp){return function(comment){return comment.Start<=slp.v.Start&&comment.End>=slp.v.End}}(this,slp)).any()&&this.m_queryParametersPositions.removeAt(i);for(Kusto.Data.IntelliSense.CslCommandIndexer.CaptureTokensUsingRegex(text,this.m_stringLiteralsRegexCollection,this.m_stringLiteralsPositions),i1=this.m_stringLiteralsPositions.Count-1|0;i1>=0;i1=i1-1|0)slp1={v:this.m_stringLiteralsPositions.getItem(i1)},System.Linq.Enumerable.from(this.m_commentTokenPositions,Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).where(function($me,slp1){return function(comment){return comment.Start<=slp1.v.Start&&comment.End>=slp1.v.End}}(this,slp1)).any()&&this.m_stringLiteralsPositions.removeAt(i1);for(i2=this.m_queryParametersPositions.Count-1|0;i2>=0;i2=i2-1|0)qpp={v:this.m_queryParametersPositions.getItem(i2)},slp2=System.Linq.Enumerable.from(this.m_stringLiteralsPositions,Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).where(function($me,qpp){return function(s){return s.Start<=qpp.v.Start&&s.End>=qpp.v.End}}(this,qpp)).firstOrDefault(null,null),slp2!=null&&(newSlp=($t=new Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition,$t.Start=qpp.v.End+1|0,$t.End=slp2.End,$t.Text=slp2.Text.substr((qpp.v.End-slp2.Start|0)+1|0),$t),slp2.End=qpp.v.Start-1|0,slp2.Text=slp2.Text.substr(0,slp2.Length),this.m_stringLiteralsPositions.add(newSlp))},AddTokenPosition:function(tokenPosition){this.m_tokensAndPositions.containsKey(tokenPosition.Text)||this.m_tokensAndPositions.add(tokenPosition.Text,new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition).ctor));this.m_tokensAndPositions.getItem(tokenPosition.Text).add(tokenPosition)}}});Bridge.ns(\"Kusto.Data.IntelliSense.CslCommandIndexer\",$asm.$);Bridge.apply($asm.$.Kusto.Data.IntelliSense.CslCommandIndexer,{f1:function(_o1){return _o1.add(40,41),_o1.add(41,40),_o1.add(91,93),_o1.add(93,91),_o1.add(123,125),_o1.add(125,123),_o1},f2:function(p){return{Item1:p.Start,Item2:p.End}},f3:function(r1,r2){return Bridge.compare(r1.Item1,r2.Item1)},f4:function(t){return t},f5:function(kvp){return kvp.value},f6:function(t){return t.Start}});Bridge.define(\"Kusto.Data.IntelliSense.CslCommandIndexer.State\",{$kind:\"nested enum\",statics:{fields:{LookingForTokenStart:0,LookingForTokenEnd:1,InsideComment:2,InsideStringLiteral:3}}});Bridge.define(\"Kusto.Data.IntelliSense.CslCommandIndexer.TokenPosition\",{$kind:\"nested class\",props:{Text:null,Start:0,End:0,TokenTerminator:0,Length:{get:function(){return(this.End-this.Start|0)+1|0}}},ctors:{ctor:function(){this.$initialize();this.TokenTerminator=0}}});Bridge.define(\"Kusto.Data.IntelliSense.CslCommandParser\",{statics:{fields:{ControlCommandsTokens:null,CslCommandsTokens:null,ChartRenderTypesTokens:null,ChartRenderKindTokens:null,SubOperatorsTokens:null,JoinKindTokens:null,ReduceByKindTokens:null,DataTypesTokens:null,ScalarFunctionsDateTimeTokens:null,ScalarFunctionsNoDateTimeTokens:null,SingleParameterFunctionsDateTimeTokens:null,ZeroParameterFunctionsNoDateTimeTokens:null,SingleParameterFunctionsNoDateTimeTokens:null,IntrinsicFunctionTokens:null,TwoParameterFunctionsTokens:null,ThreeParameterFunctionsTokens:null,ManyParametersFunctionsTokens:null,PromotedOperatorCommandTokens:null,ClientDirectiveTokens:null,OperatorCommandTokens:null,DataOperatorTokens:null,SummarizeAggregationSingleParameterTokens:null,SummarizeAggregationTwoParametersTokens:null,SummarizeAggregationThreeParametersTokens:null,SummarizeAggregationManyParametersTokens:null,MakeSeriesAggregationTokens:null,PluginTokens:null,DatetimeFunctionsTokens:null,ScalarFunctionsTokens:null,SingleParameterFunctionsTokens:null,SummarizeAggregationTokens:null,SummarizeAggregationAliasesTokens:null,SortedSummarizeAggregators:null,SortedMakeSeriesAggregationTokens:null,SortedDatetimeFunctions:null,SortedExtendFunctions:null,FunctionsTokens:null,SortedEvaluateFunctions:null,s_asyncSeeker:null,s_isCommentLineRegex:null},ctors:{init:function(){this.ControlCommandsTokens=System.Array.init([\".add\",\".alter\",\".alter-merge\",\".attach\",\".append\",\".create\",\".create-merge\",\".create-set\",\".create-or-alter\",\".define\",\".detach\",\".delete\",\".drop\",\".drop-pretend\",\".dup-next-ingest\",\".dup-next-failed-ingest\",\".ingest\",\".export\",\".load\",\".move\",\".purge\",\".purge-cleanup\",\".remove\",\".replace\",\".save\",\".set\",\".set-or-append\",\".set-or-replace\",\".show\",\".rename\",\".run\",\"async\",\"data\",\"into\",\"ifnotexists\",\"whatif\",\"compressed\",\"monitoring\",\"metadata\",\"folder\",\"docstring\",\"details\",\"hot\",\"records\",\"until\",\"as\",\"csv\",\"tsv\",\"json\",\"sql\",\"policy\",\"encoding\",\"retention\",\"merge\",\"policies\",\"update\",\"ingestiontime\",\"caching\",\"sharding\",\"callout\",\"restricted_view_access\",\"ingestionbatching\",\"query_weak_consistency\",\"partitioning\",\"softdelete\",\"harddelete\",\"rowstore\",\"rowstores\",\"seal\",\"writeaheadlog\",\"streamingingestion\",\"rowstore_references\",\"follower\"],System.String);this.CslCommandsTokens=System.Array.init([\"set\",\"let\",\"restrict\",\"access\",\"alias\",\"pattern\",\"declare\",\"query_parameters\"],System.String);this.ChartRenderTypesTokens=System.Linq.Enumerable.from(System.Array.init([\"columnchart\",\"barchart\",\"piechart\",\"timechart\",\"anomalychart\",\"linechart\",\"ladderchart\",\"pivotchart\",\"areachart\",\"stackedareachart\",\"scatterchart\",\"timepivot\",\"timeline\",\"card\",\"table\",\"list\",\"treemap\"],System.String),System.String).orderBy($asm.$.Kusto.Data.IntelliSense.CslCommandParser.f1).ToArray(System.String);this.ChartRenderKindTokens=System.Array.init([\"default\",\"stacked\",\"stacked100\",\"unstacked\",\"map\"],System.String);this.SubOperatorsTokens=System.Linq.Enumerable.from(System.Array.init([\"like\",\"notlike\",\"contains\",\"notcontains\",\"!contains\",\"contains_cs\",\"!contains_cs\",\"startswith\",\"!startswith\",\"has\",\"!has\",\"has_cs\",\"!has_cs\",\"hasprefix\",\"!hasprefix\",\"hassuffix\",\"!hassuffix\",\"matches\",\"regex\",\"in\",\"!in\",\"endswith\",\"!endswith\",\"between\",\"!between\",\"extent\",\"database\",\"diagnostics\",\"jitmanagers\",\"admins\",\"basicauth\",\"cache\",\"capacity\",\"cluster\",\"continuous-export\",\"continuous-exports\",\"databases\",\"extents\",\"external\",\"journal\",\"memory\",\"extentcontainers\",\"viewers\",\"unrestrictedviewers\",\"tags\",\"prettyname\",\"blockedprincipals\",\"failed\",\"operations\",\"password\",\"principal\",\"principals\",\"settings\",\"schema\",\"table\",\"tables\",\"user\",\"users\",\"ingestors\",\"monitors\",\"version\",\"roles\",\"fabric\",\"locks\",\"service\",\"services\",\"nodes\",\"unallocated\",\"subscriptions\",\"nonregistered\",\"packages\",\"configuration\",\"commands\",\"commands-and-queries\",\"queries\",\"query\",\"function\",\"functions\",\"by\",\"on\",\"of\",\"true\",\"false\",\"and\",\"or\",\"asc\",\"desc\",\"nulls\",\"last\",\"first\",\"with\",\"withsource\",\"kind\",\"flags\",\"from\",\"to\",\"step\",\"ingestion\",\"failures\",\"mapping\",\"mappings\",\"geneva\",\"eventhub\",\"source\",\"sources\",\"types\",\"application\",\"period\",\"reason\",\"title\"],System.String),System.String).union(Kusto.Data.IntelliSense.CslCommandParser.ChartRenderTypesTokens).union(Kusto.Data.IntelliSense.CslCommandParser.ChartRenderKindTokens).distinct().ToArray(System.String);this.JoinKindTokens=System.Array.init([\"anti\",\"inner\",\"innerunique\",\"fullouter\",\"leftanti\",\"leftantisemi\",\"leftouter\",\"leftsemi\",\"rightanti\",\"rightantisemi\",\"rightsemi\",\"rightouter\"],System.String);this.ReduceByKindTokens=System.Array.init([\"mining\"],System.String);this.DataTypesTokens=System.Array.init([\"timespan\",\"datetime\",\"int\",\"long\",\"real\",\"string\",\"bool\",\"double\",\"dynamic\",\"decimal\",\"guid\"],System.String);this.ScalarFunctionsDateTimeTokens=System.Array.init([\"now\",\"ago\",\"datetime\",\"ingestion_time\"],System.String);this.ScalarFunctionsNoDateTimeTokens=System.Array.init([\"time\",\"timespan\",\"dynamic\",\"decimal\"],System.String);this.SingleParameterFunctionsDateTimeTokens=System.Array.init([\"todatetime\",\"between\",\"!between\"],System.String);this.ZeroParameterFunctionsNoDateTimeTokens=System.Array.init([\"row_number\",\"extent_id\",\"extent_tags\",\"pi\",\"pack_all\",\"rowstore_ordinal_range\"],System.String);this.SingleParameterFunctionsNoDateTimeTokens=System.Array.init([\"strlen\",\"tostring\",\"toupper\",\"tolower\",\"typeof\",\"reverse\",\"parsejson\",\"parse_json\",\"parse_xml\",\"parse_csv\",\"tobool\",\"toboolean\",\"todynamic\",\"toobject\",\"toint\",\"tolong\",\"toguid\",\"todouble\",\"toreal\",\"totimespan\",\"tohex\",\"todecimal\",\"isempty\",\"isnotempty\",\"isnull\",\"isnotnull\",\"isnan\",\"isinf\",\"isfinite\",\"dayofweek\",\"dayofmonth\",\"dayofyear\",\"week_of_year\",\"monthofyear\",\"sqrt\",\"rand\",\"log\",\"log10\",\"log2\",\"exp\",\"exp2\",\"exp10\",\"abs\",\"degrees\",\"radians\",\"sign\",\"sin\",\"cos\",\"tan\",\"asin\",\"acos\",\"atan\",\"cot\",\"getmonth\",\"getyear\",\"array_length\",\"gettype\",\"bag_keys\",\"cursor_after\",\"gamma\",\"loggamma\",\"dcount_hll\",\"parse_ipv4\",\"parse_url\",\"parse_path\",\"parse_version\",\"parse_urlquery\",\"url_encode\",\"url_decode\",\"binary_not\",\"not\",\"toscalar\",\"materialize\",\"series_stats\",\"series_fit_line\",\"series_fit_2lines\",\"series_stats_dynamic\",\"series_fit_line_dynamic\",\"series_fit_2lines_dynamic\",\"base64_encodestring\",\"base64_decodestring\",\"hash_sha256\",\"ceiling\",\"string_size\",\"isascii\",\"isutf8\",\"geo_geohash_to_central_point\"],System.String);this.IntrinsicFunctionTokens=System.Array.init([\"cluster\",\"database\",\"table\"],System.String);this.TwoParameterFunctionsTokens=System.Array.init([\"bin\",\"columnifexists\",\"floor\",\"countof\",\"hash\",\"round\",\"pow\",\"binary_and\",\"binary_or\",\"binary_xor\",\"binary_shift_left\",\"binary_shift_right\",\"datepart\",\"datetime_part\",\"repeat\",\"series_seasonal\",\"series_outliers\",\"array_split\",\"series_add\",\"series_subtract\",\"series_multiply\",\"series_divide\",\"series_pow\",\"series_pearson_correlation\",\"series_greater\",\"series_greater_equals\",\"series_less\",\"series_less_equals\",\"series_equals\",\"series_not_equals\",\"rank_tdigest\",\"percentrank_tdigest\",\"trim\",\"trim_start\",\"trim_end\",\"startofday\",\"startofweek\",\"startofmonth\",\"startofyear\",\"endofday\",\"endofweek\",\"endofmonth\",\"endofyear\",\"series_fill_backward\",\"series_fill_forward\",\"atan2\",\"format_datetime\",\"format_timespan\",\"strrep\",\"strcat_array\",\"parse_user_agent\",\"strcmp\",\"row_cumsum\"],System.String);this.ThreeParameterFunctionsTokens=System.Array.init([\"iff\",\"iif\",\"range\",\"replace\",\"translate\",\"series_iir\",\"bin_at\",\"series_fill_const\",\"series_decompose\",\"series_decompose_forecast\",\"series_decompose_anomalies\",\"datetime_diff\",\"datetime_add\",\"geo_point_to_geohash\",\"geo_point_in_polygon\"],System.String);this.ManyParametersFunctionsTokens=System.Array.init([\"extract\",\"extractjson\",\"extractall\",\"strcat\",\"strcat_delim\",\"substring\",\"indexof\",\"split\",\"case\",\"coalesce\",\"max_of\",\"min_of\",\"percentile_tdigest\",\"zip\",\"pack\",\"pack_dictionary\",\"pack_array\",\"array_concat\",\"array_slice\",\"welch_test\",\"row_window_session\",\"series_fir\",\"series_periods_detect\",\"prev\",\"next\",\"tdigest_merge\",\"hll_merge\",\"series_fill_linear\",\"series_periods_validate\",\"datatable\",\"make_datetime\",\"make_timespan\",\"make_string\",\"geo_distance_2points\",\"geo_point_in_circle\"],System.String);this.PromotedOperatorCommandTokens=System.Array.init([\"where\",\"count\",\"extend\",\"join\",\"limit\",\"order\",\"project\",\"project-away\",\"project-rename\",\"project-reorder\",\"project-keep\",\"render\",\"sort\",\"summarize\",\"distinct\",\"take\",\"top\",\"top-nested\",\"top-hitters\",\"union\",\"mv-expand\",\"mv-apply\",\"reduce\",\"evaluate\",\"parse\",\"parse-where\",\"parse-kv\",\"sample\",\"sample-distinct\",\"make-series\",\"getschema\",\"serialize\",\"invoke\",\"as\",\"scan\"],System.String);this.ClientDirectiveTokens=System.Array.init([\"connect\"],System.String);this.OperatorCommandTokens=System.Linq.Enumerable.from(System.Array.init([\"filter\",\"fork\",\"facet\",\"range\",\"consume\",\"find\",\"search\",\"print\",\"partition\",\"lookup\"],System.String),System.String).union(Kusto.Data.IntelliSense.CslCommandParser.PromotedOperatorCommandTokens).ToArray(System.String);this.DataOperatorTokens=System.Array.init([\"datatable\",\"externaldata\"],System.String);this.SummarizeAggregationSingleParameterTokens=System.Array.init([\"count\",\"countif\",\"dcount\",\"dcountif\",\"sum\",\"min\",\"max\",\"avg\",\"avgif\",\"any\",\"makelist\",\"makeset\",\"make_dictionary\",\"stdev\",\"stdevif\",\"varianceif\",\"variance\",\"buildschema\",\"hll\",\"hll_merge\",\"tdigest\",\"tdigest_merge\"],System.String);this.SummarizeAggregationTwoParametersTokens=System.Array.init([\"percentile\",\"sumif\"],System.String);this.SummarizeAggregationThreeParametersTokens=System.Array.init([\"percentilew\"],System.String);this.SummarizeAggregationManyParametersTokens=System.Array.init([\"arg_min\",\"arg_max\",\"percentilesw_array\",\"percentilesw\",\"percentiles_array\",\"percentiles\"],System.String);this.MakeSeriesAggregationTokens=System.Array.init([\"count\",\"countif\",\"dcount\",\"dcountif\",\"sum\",\"min\",\"max\",\"avg\",\"any\",\"stdev\",\"stdevp\",\"variance\",\"variancep\",\"sumif\"],System.String);this.PluginTokens=System.Array.init([\"autocluster\",\"diffpatterns\",\"basket\",\"extractcolumns\"],System.String);this.DatetimeFunctionsTokens=System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.ScalarFunctionsDateTimeTokens,System.String).union(Kusto.Data.IntelliSense.CslCommandParser.SingleParameterFunctionsDateTimeTokens).ToArray(System.String);this.ScalarFunctionsTokens=System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.ScalarFunctionsDateTimeTokens,System.String).union(Kusto.Data.IntelliSense.CslCommandParser.ScalarFunctionsNoDateTimeTokens).ToArray(System.String);this.SingleParameterFunctionsTokens=System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.SingleParameterFunctionsDateTimeTokens,System.String).union(Kusto.Data.IntelliSense.CslCommandParser.SingleParameterFunctionsNoDateTimeTokens).ToArray(System.String);this.SummarizeAggregationTokens=System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.SummarizeAggregationSingleParameterTokens,System.String).union(Kusto.Data.IntelliSense.CslCommandParser.SummarizeAggregationManyParametersTokens).union(Kusto.Data.IntelliSense.CslCommandParser.SummarizeAggregationThreeParametersTokens).union(Kusto.Data.IntelliSense.CslCommandParser.SummarizeAggregationTwoParametersTokens).ToArray(System.String);this.SummarizeAggregationAliasesTokens=System.Array.init([\"argmax\",\"argmin\"],System.String);this.SortedSummarizeAggregators=System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.SummarizeAggregationTokens,System.String).orderBy($asm.$.Kusto.Data.IntelliSense.CslCommandParser.f2).select($asm.$.Kusto.Data.IntelliSense.CslCommandParser.f3).ToArray(System.String);this.SortedMakeSeriesAggregationTokens=System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.MakeSeriesAggregationTokens,System.String).orderBy($asm.$.Kusto.Data.IntelliSense.CslCommandParser.f2).select($asm.$.Kusto.Data.IntelliSense.CslCommandParser.f3).ToArray(System.String);this.SortedDatetimeFunctions=System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.DatetimeFunctionsTokens,System.String).orderBy($asm.$.Kusto.Data.IntelliSense.CslCommandParser.f2).select($asm.$.Kusto.Data.IntelliSense.CslCommandParser.f3).ToArray(System.String);this.SortedExtendFunctions=System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.ManyParametersFunctionsTokens,System.String).union(Kusto.Data.IntelliSense.CslCommandParser.ScalarFunctionsTokens).union(Kusto.Data.IntelliSense.CslCommandParser.ZeroParameterFunctionsNoDateTimeTokens).union(Kusto.Data.IntelliSense.CslCommandParser.SingleParameterFunctionsTokens).union(Kusto.Data.IntelliSense.CslCommandParser.TwoParameterFunctionsTokens).union(Kusto.Data.IntelliSense.CslCommandParser.ThreeParameterFunctionsTokens).orderBy($asm.$.Kusto.Data.IntelliSense.CslCommandParser.f2).select($asm.$.Kusto.Data.IntelliSense.CslCommandParser.f3).ToArray(System.String);this.FunctionsTokens=System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.ManyParametersFunctionsTokens,System.String).union(Kusto.Data.IntelliSense.CslCommandParser.ScalarFunctionsTokens).union(Kusto.Data.IntelliSense.CslCommandParser.ZeroParameterFunctionsNoDateTimeTokens).union(Kusto.Data.IntelliSense.CslCommandParser.SingleParameterFunctionsTokens).union(Kusto.Data.IntelliSense.CslCommandParser.TwoParameterFunctionsTokens).union(Kusto.Data.IntelliSense.CslCommandParser.ThreeParameterFunctionsTokens).union(Kusto.Data.IntelliSense.CslCommandParser.SummarizeAggregationTokens).union(Kusto.Data.IntelliSense.CslCommandParser.IntrinsicFunctionTokens).ToArray(System.String);this.SortedEvaluateFunctions=System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.PluginTokens,System.String).orderBy($asm.$.Kusto.Data.IntelliSense.CslCommandParser.f2).ToArray(System.String);this.s_asyncSeeker=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\.[\\\\w\\\\-]+\\\\s+async\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.DefaultRegexOptions);this.s_isCommentLineRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*//\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.DefaultRegexOptions)}},methods:{IsAdminCommand$1:function(query,queryWithoutLeadingComments){return Kusto.Data.IntelliSense.CslCommandParser.IsStartingWithPrefix(query,\".\",queryWithoutLeadingComments)},IsAdminCommand:function(command){var commandWithoutLeadingComments={};return Kusto.Data.IntelliSense.CslCommandParser.IsAdminCommand$1(command,commandWithoutLeadingComments)},ResolveRequestApiKind:function(requestContent){var requestContentWithoutLeadingComments={},isAdminCommand=Kusto.Data.IntelliSense.CslCommandParser.IsStartingWithPrefix(requestContent,\".\",requestContentWithoutLeadingComments);return isAdminCommand?Kusto.Data.IntelliSense.CslCommandParser.s_asyncSeeker.isMatch(requestContentWithoutLeadingComments.v)?Kusto.Data.IntelliSense.ApiKind.AdminAsyncCommand:Kusto.Data.IntelliSense.ApiKind.AdminSyncCommand:Kusto.Data.IntelliSense.ApiKind.Query},IsStartingWithPrefix:function(query,prefix,queryWithoutLeadingComments){var lines,i,line;for(queryWithoutLeadingComments.v=query.trim(),lines=System.String.split(query,System.Array.init([13,10],System.Char).map(function(i){return String.fromCharCode(i)}),null,1),i=0;i<lines.length;i=i+1|0){if(line=lines[System.Array.index(i,lines)],System.String.startsWith(System.String.trimStart(line),prefix))return i>0&&(queryWithoutLeadingComments.v=Bridge.toArray(System.Linq.Enumerable.from(lines,System.String).skip(i)).join(\"\\n\").trim()),!0;if(!Kusto.Data.IntelliSense.CslCommandParser.s_isCommentLineRegex.isMatch(line))return i>0&&(queryWithoutLeadingComments.v=Bridge.toArray(System.Linq.Enumerable.from(lines,System.String).skip(i)).join(\"\\n\").trim()),!1}return!1},IsClientDirective:function(command,directiveWithoutLeadingComments){return Kusto.Data.IntelliSense.CslCommandParser.IsStartingWithPrefix(command,\"#\",directiveWithoutLeadingComments)}}},fields:{m_hashedCommands:null,m_rulesProvider:null},props:{Results:null},ctors:{ctor:function(){this.$initialize();this.Reset()}},methods:{Reset:function(){this.m_hashedCommands=new(System.Collections.Generic.Dictionary$2(System.String,Kusto.Data.IntelliSense.CslCommand).ctor);this.Results=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommand).ctor)},Parse:function(rulesProvider,text,parseMode){var results=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommand).ctor),parsedCommands,i,newCommand,wasFound,previousCandidate;if(Bridge.referenceEquals(this.m_rulesProvider,rulesProvider)||(this.Reset(),this.m_rulesProvider=rulesProvider),parsedCommands=Kusto.Data.IntelliSense.CslCommandParser.CslCommandTokenizer.GetCommands(text),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$4(Kusto.Data.IntelliSense.CslCommand,parsedCommands))for(i=0;i<parsedCommands.Count;i=i+1|0)newCommand=parsedCommands.getItem(i),newCommand.ParseMode=parseMode,wasFound=this.FetchFromCache(parseMode,newCommand),wasFound||(previousCandidate=this.Results!=null?System.Linq.Enumerable.from(this.Results,Kusto.Data.IntelliSense.CslCommand).elementAtOrDefault(i,null):null,newCommand.ParseTokens(rulesProvider,parseMode,previousCandidate)),results.add(newCommand);return this.m_hashedCommands=System.Linq.Enumerable.from(Kusto.Cloud.Platform.Utils.ExtendedEnumerable.DistinctBy(Kusto.Data.IntelliSense.CslCommand,System.String,results,$asm.$.Kusto.Data.IntelliSense.CslCommandParser.f4),Kusto.Data.IntelliSense.CslCommand).toDictionary($asm.$.Kusto.Data.IntelliSense.CslCommandParser.f4,$asm.$.Kusto.Data.IntelliSense.CslCommandParser.f5,System.String,Kusto.Data.IntelliSense.CslCommand),this.Results=results,results},FetchFromCache:function(parseMode,newCommand){var wasFound=!1,previouslyParsedCommand={};return this.m_hashedCommands.tryGetValue(newCommand.Text,previouslyParsedCommand)&&previouslyParsedCommand.v.ParseMode===parseMode&&(newCommand.AcquireTokens(previouslyParsedCommand.v),wasFound=!0),wasFound},Clone:function(){var $t,parser=new Kusto.Data.IntelliSense.CslCommandParser;return parser.m_hashedCommands=Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$1(System.Collections.Generic.KeyValuePair$2(System.String,Kusto.Data.IntelliSense.CslCommand),this.m_hashedCommands)?new(System.Collections.Generic.Dictionary$2(System.String,Kusto.Data.IntelliSense.CslCommand).$ctor1)(this.m_hashedCommands):new(System.Collections.Generic.Dictionary$2(System.String,Kusto.Data.IntelliSense.CslCommand).ctor),parser.m_rulesProvider=this.m_rulesProvider,parser.Results=Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(Kusto.Data.IntelliSense.CslCommand,this.Results)?($t=Kusto.Data.IntelliSense.CslCommand,System.Linq.Enumerable.from(this.Results,$t).toList($t)):new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommand).ctor),parser}}});Bridge.ns(\"Kusto.Data.IntelliSense.CslCommandParser\",$asm.$);Bridge.apply($asm.$.Kusto.Data.IntelliSense.CslCommandParser,{f1:function(t){return t},f2:function(f){return f},f3:function(f){return(f||\"\")+\"()\"},f4:function(c){return c.Text},f5:function(c){return c}});Bridge.define(\"Kusto.Data.IntelliSense.CslCommandParser.CslCommandTokenizer\",{$kind:\"nested class\",statics:{methods:{GetCommands:function(text){var $t,$t1,result=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CslCommand).ctor),i,ch,commandLength;if(System.String.isNullOrEmpty(text))return result;var command=null,mode=0,endOfStream=!1,expectedNewLine=0,chars=($t=System.Char,System.Linq.Enumerable.from(text,$t).ToArray($t));for(i=0;i<chars.length;i=i+1|0){ch=chars[System.Array.index(i,chars)];endOfStream=i===(chars.length-1|0);endOfStream&&(mode===0&&(command=($t1=new Kusto.Data.IntelliSense.CslCommand,$t1.RelativeStart=i,$t1)),mode=2);switch(mode){case 0:command=($t1=new Kusto.Data.IntelliSense.CslCommand,$t1.RelativeStart=i,$t1);mode=1;break;case 1:(ch===13||ch===10)&&(expectedNewLine=ch,mode=2);break;case 2:if((ch===10||ch===13)&&chars[System.Array.index(i-1|0,chars)]===ch&&(ch=expectedNewLine),ch===expectedNewLine||endOfStream){if(command!=null){while(!endOfStream){if(chars[System.Array.index(i+1|0,chars)]===13||chars[System.Array.index(i+1|0,chars)]===10)i=i+1|0;else break;endOfStream=i===(chars.length-1|0)}commandLength=(i-command.RelativeStart|0)+1|0;command.Text=text.substr(command.RelativeStart,commandLength);command.Length=commandLength;command.IsRunnable=!System.String.isNullOrWhiteSpace(command.Text);result.add(command)}mode=0;command=null}else System.Char.isWhiteSpace(String.fromCharCode(ch))||(mode=1);break}}return result}}}});Bridge.define(\"Kusto.Data.IntelliSense.CslCommandToken\",{inherits:[System.ICloneable],props:{AbsolutePositionBias:0,Value:null,TokenKind:0,AbsoluteStart:{get:function(){return this.RelativeStart+this.AbsolutePositionBias|0}},AbsoluteEnd:{get:function(){return this.RelativeEnd+this.AbsolutePositionBias|0}},RelativeStart:0,Length:0,RelativeEnd:{get:function(){return this.RelativeStart+this.Length|0}}},alias:[\"clone\",\"System$ICloneable$clone\"],ctors:{ctor:function(value,absolutePositionBias,tokenKind){this.$initialize();this.Value=value;this.TokenKind=tokenKind;this.AbsolutePositionBias=absolutePositionBias}},methods:{CompareTo:function(other){return other==null?1:this.RelativeStart===other.RelativeStart?0:this.RelativeStart<other.RelativeStart?-1:1},clone:function(){var $t;return $t=new Kusto.Data.IntelliSense.CslCommandToken(this.Value,this.AbsolutePositionBias,this.TokenKind),$t.RelativeStart=this.RelativeStart,$t.Length=this.Length,$t},equals:function(obj){var other=Bridge.as(obj,Kusto.Data.IntelliSense.CslCommandToken);return other==null?!1:Bridge.referenceEquals(this.Value,other.Value)&&this.TokenKind===other.TokenKind&&this.RelativeStart===other.RelativeStart&&this.RelativeEnd===other.RelativeEnd&&this.AbsolutePositionBias===other.AbsolutePositionBias},getHashCode:function(){return Bridge.getHashCode(this.Value)^Bridge.getHashCode(this.TokenKind)^this.RelativeStart^this.RelativeEnd^this.AbsolutePositionBias}}});Bridge.define(\"Kusto.Data.IntelliSense.CslCommandToken.Kind\",{$kind:\"nested enum\",statics:{fields:{TableToken:2,TableColumnToken:4,OperatorToken:8,SubOperatorToken:16,CalculatedColumnToken:32,StringLiteralToken:64,FunctionNameToken:128,UnknownToken:256,CommentToken:512,PlainTextToken:1024,DataTypeToken:2048,ControlCommandToken:4096,CommandPartToken:8192,QueryParametersToken:16384,CslCommandToken:32768,LetVariablesToken:65536,PluginToken:131072,BracketRangeToken:262144,ClientDirectiveToken:524288,IsRecognizedEntity:536870912,IsMismatchedTokenValue:1073741824}},$flags:!0});Bridge.define(\"Kusto.Data.IntelliSense.CslDocumentation\",{statics:{fields:{s_instance:null},props:{Instance:{get:function(){return Kusto.Data.IntelliSense.CslDocumentation.s_instance==null&&(Kusto.Data.IntelliSense.CslDocumentation.s_instance=new Kusto.Data.IntelliSense.CslDocumentation,Kusto.Data.IntelliSense.CslDocumentation.s_instance.Initialize()),Kusto.Data.IntelliSense.CslDocumentation.s_instance}}},methods:{TrimFunctionParameters:function(signature){var parenStart=System.String.indexOf(signature,String.fromCharCode(40));return parenStart>0?signature.substr(0,parenStart):signature}}},fields:{m_documentation:null},props:{Topics:{get:function(){return this.m_documentation==null?System.Linq.Enumerable.empty():System.Linq.Enumerable.from(this.m_documentation,System.Collections.Generic.KeyValuePair$2(System.Tuple$2(Kusto.Data.IntelliSense.CslCommandToken.Kind,System.String),Kusto.Data.IntelliSense.CslTopicDocumentation)).select($asm.$.Kusto.Data.IntelliSense.CslDocumentation.f1)}}},ctors:{init:function(){this.m_documentation=new(System.Collections.Generic.Dictionary$2(System.Tuple$2(Kusto.Data.IntelliSense.CslCommandToken.Kind,System.String),Kusto.Data.IntelliSense.CslTopicDocumentation).ctor)}},methods:{AddTopic:function(topic){var key={Item1:topic.TokenKind,Item2:topic.Name.toLowerCase()};this.m_documentation.setItem(key,topic)},GetTopic:function(option){if(option.Kind===Kusto.Data.IntelliSense.OptionKind.Operator)return this.GetTopic$1(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,option.Value);else if(option.Kind===Kusto.Data.IntelliSense.OptionKind.FunctionAggregation||option.Kind===Kusto.Data.IntelliSense.OptionKind.FunctionScalar)return this.GetTopic$1(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,Kusto.Data.IntelliSense.CslDocumentation.TrimFunctionParameters(option.Value));return null},GetTopic$1:function(tokenKind,name){var key={Item1:tokenKind,Item2:name.toLowerCase()},result={};return this.m_documentation.tryGetValue(key,result),result.v},GetTopicByMarkdownSource:function(markdownSource){var $t,kvp;if(System.String.isNullOrWhiteSpace(markdownSource))return null;$t=Bridge.getEnumerator(this.m_documentation);try{while($t.moveNext())if(kvp=$t.Current,Bridge.referenceEquals(kvp.value.MarkdownSource,markdownSource))return kvp.value}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return null},GetTopicByName:function(name){var $t,kvp;if(System.String.isNullOrWhiteSpace(name))return null;$t=Bridge.getEnumerator(this.m_documentation);try{while($t.moveNext())if(kvp=$t.Current,Bridge.referenceEquals(kvp.key.Item2,name))return kvp.value}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return null},equals:function(obj){if(obj==null)return!1;var other=Bridge.as(obj,Kusto.Data.IntelliSense.CslDocumentation);return other==null?!1:this.m_documentation.Count!==other.m_documentation.Count?!1:System.Linq.Enumerable.from(other.m_documentation,System.Collections.Generic.KeyValuePair$2(System.Tuple$2(Kusto.Data.IntelliSense.CslCommandToken.Kind,System.String),Kusto.Data.IntelliSense.CslTopicDocumentation)).except(this.m_documentation).any()?!1:System.Linq.Enumerable.from(this.m_documentation,System.Collections.Generic.KeyValuePair$2(System.Tuple$2(Kusto.Data.IntelliSense.CslCommandToken.Kind,System.String),Kusto.Data.IntelliSense.CslTopicDocumentation)).except(other.m_documentation).any()?!1:!0},getHashCode:function(){return Bridge.getHashCode(this.m_documentation)},Initialize:function(){System.Linq.Enumerable.from(this.m_documentation,System.Collections.Generic.KeyValuePair$2(System.Tuple$2(Kusto.Data.IntelliSense.CslCommandToken.Kind,System.String),Kusto.Data.IntelliSense.CslTopicDocumentation)).any()||(this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"!~\",\"Filters a record set for data that does not match a case-insensitive string.\",'The following table provides a comparison of the `==` (equals) operators:\\r\\n\\r\\n|Operator   |Description   |Case-Sensitive  |Example (yields `true`)  |\\r\\n|-----------|--------------|----------------|-------------------------|\\r\\n|[`==`](equals-cs-operator.md)|Equals |Yes|`\"aBc\" == \"aBc\"`|\\r\\n|[`!=`](not-equals-cs-operator.md)|Not equals |Yes |`\"abc\" != \"ABC\"`|\\r\\n|[`=~`](equals-operator.md) |Equals |No |`\"abc\" =~ \"ABC\"`|\\r\\n|[`!~`](not-equals-operator.md) |Not equals |No |`\"aBc\" !~ \"xyz\"`|\\r\\n\\r\\nFor further information about other operators and to determine which operator is most appropriate for your query, see [datatype string operators](datatypes-string-operators.md). \\r\\n\\r\\nCase-insensitive operators are currently supported only for ASCII-text. For non-ASCII comparison, use the [tolower()](tolowerfunction.md) function.\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n> [!NOTE]\\r\\n> Performance depends on the type of search and the structure of the data.\\r\\n\\r\\nFor faster results, use the case-sensitive version of an operator, for example, `==`, not `=~`.\\r\\n\\r\\nIf you\\'re testing for the presence of a symbol or alphanumeric word that is bound by non-alphanumeric characters at the start or end of a field, for faster results use `has` or `in`. \\r\\n\\r\\nFor best practices, see [Query best practices](best-practices.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *col* `!~` `(`*expression*`)` \\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T* - The tabular input whose records are to be filtered.\\r\\n* *col* - The column to filter.\\r\\n* *expression* - Scalar or literal expression.\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.','```\\r\\nStormEvents\\r\\n    | summarize event_count=count() by State\\r\\n    | where (State !~ \"texas\") and (event_count > 3000)\\r\\n    | project State, event_count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|event_count|\\r\\n|-----|-----------|\\r\\n|KANSAS|3,166|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/not-equals-operator\",\"not-equals-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"!=\",\"Filters a record set for data that does not match a case-sensitive string.\",'The following table provides a comparison of the `==` (equals) operators:\\r\\n\\r\\n|Operator   |Description   |Case-Sensitive  |Example (yields `true`)  |\\r\\n|-----------|--------------|----------------|-------------------------|\\r\\n|[`==`](equals-cs-operator.md)|Equals |Yes|`\"aBc\" == \"aBc\"`|\\r\\n|[`!=`](not-equals-cs-operator.md)|Not equals |Yes |`\"abc\" != \"ABC\"`|\\r\\n|[`=~`](equals-operator.md) |Equals |No |`\"abc\" =~ \"ABC\"`|\\r\\n|[`!~`](not-equals-operator.md) |Not equals |No |`\"aBc\" !~ \"xyz\"`|\\r\\n\\r\\nFor further information about other operators and to determine which operator is most appropriate for your query, see [datatype string operators](datatypes-string-operators.md). \\r\\n\\r\\n## Performance tips\\r\\n\\r\\n> [!NOTE]\\r\\n> Performance depends on the type of search and the structure of the data.\\r\\n\\r\\nFor faster results, use the case-sensitive version of an operator, for example, `==`, not `=~`.\\r\\n\\r\\nIf you\\'re testing for the presence of a symbol or alphanumeric word that is bound by non-alphanumeric characters at the start or end of a field, for faster results use `has` or `in`. \\r\\n\\r\\nFor best practices, see [Query best practices](best-practices.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *col* `!=` `(`*list of scalar expressions*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T* - The tabular input whose records are to be filtered.\\r\\n* *col* - The column to filter.\\r\\n* *expression* - Scalar or literal expression.\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.','```\\r\\nStormEvents\\r\\n    | summarize event_count=count() by State\\r\\n    | where (State != \"FLORIDA\") and (event_count > 4000)\\r\\n    | project State, event_count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|event_count|\\r\\n|-----|-----------|\\r\\n|TEXAS|4,701|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/not-equals-cs-operator\",\"not-equals-cs-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"!between\",\"Matches the input that is outside the inclusive range.\",\"```\\r\\nTable1 | where Num1 !between (1 .. 10)\\r\\nTable1 | where Time !between (datetime(2017-01-01) .. datetime(2017-01-01))\\r\\n```\\r\\n\\r\\n`!between` can operate on any numeric, datetime, or timespan expression.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *expr* `!between` `(`*leftRange*` .. `*rightRange*`)`   \\r\\n\\r\\nIf *expr* expression is datetime - another syntactic sugar syntax is provided:\\r\\n\\r\\n*T* `|` `where` *expr* `!between` `(`*leftRangeDateTime*` .. `*rightRangeTimespan*`)`   \\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T* - The tabular input whose records are to be matched.\\r\\n* *expr* - the expression to filter.\\r\\n* *leftRange* - expression of the left range (inclusive).\\r\\n* *rightRange* - expression of the right range (inclusive).\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate of (*expr* < *leftRange* or *expr* > *rightRange*) evaluates to `true`.\",\"### Filter numeric values   \\r\\n\\r\\n```\\r\\nrange x from 1 to 10 step 1\\r\\n| where x !between (5 .. 9)\\r\\n```\\r\\n\\r\\n|x|\\r\\n|---|\\r\\n|1|\\r\\n|2|\\r\\n|3|\\r\\n|4|\\r\\n|10|\\r\\n\\r\\n### Filter datetime  \\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| where StartTime !between (datetime(2007-07-27) .. datetime(2007-07-30))\\r\\n| count \\r\\n```\\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|58590|\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| where StartTime !between (datetime(2007-07-27) .. 3d)\\r\\n| count \\r\\n```\\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|58590|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/notbetweenoperator\",\"notbetweenoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"!contains\",\"Filters a record set for data that does not include a case-sensitive string. `contains` searches for characters rather than [terms](datatypes-string-operators.md#what-is-a-term) of three or more characters. The query scans the values in the column, which is slower than looking up a term in a term index.\",'The following table provides a comparison of the `contains` operators:\\r\\n\\r\\n|Operator   |Description   |Case-Sensitive  |Example (yields `true`)  |\\r\\n|-----------|--------------|----------------|-------------------------|\\r\\n|[`contains`](contains-operator.md) |RHS occurs as a subsequence of LHS |No |`\"FabriKam\" contains \"BRik\"`|\\r\\n|[`!contains`](not-contains-operator.md) |RHS doesn\\'t occur in LHS |No |`\"Fabrikam\" !contains \"xyz\"`|\\r\\n|[`contains_cs`](contains-cs-operator.md) |RHS occurs as a subsequence of LHS |Yes |`\"FabriKam\" contains_cs \"Kam\"`|\\r\\n|[`!contains_cs`](not-contains-cs-operator.md)   |RHS doesn\\'t occur in LHS |Yes |`\"Fabrikam\" !contains_cs \"Kam\"`|\\r\\n\\r\\n> [!NOTE]\\r\\n> The following abbreviations are used in the table above:\\r\\n>\\r\\n> * RHS = right hand side of the expression\\r\\n> * LHS = left hand side of the expression\\r\\n\\r\\nFor further information about other operators and to determine which operator is most appropriate for your query, see [datatype string operators](datatypes-string-operators.md). \\r\\n\\r\\nCase-insensitive operators are currently supported only for ASCII-text. For non-ASCII comparison, use the [tolower()](tolowerfunction.md) function.\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n> [!NOTE]\\r\\n> Performance depends on the type of search and the structure of the data.\\r\\n\\r\\nFor faster results, use the case-sensitive version of an operator, for example, `contains_cs`, not `contains`.\\r\\n\\r\\nIf you\\'re testing for the presence of a symbol or alphanumeric word that is bound by non-alphanumeric characters at the start or end of a field, for faster results use `has` or `in`. Also, `has` works faster than `contains`, `startswith`, or `endswith`, however it is not as precise and could provide unwanted records.\\r\\n\\r\\nFor best practices, see [Query best practices](best-practices.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n### Case insensitive syntax\\r\\n\\r\\n*T* `|` `where` *Column* `!contains` `(`*Expression*`)`   \\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T* - The tabular input whose records are to be filtered.\\r\\n* *Column* - The column to filter.\\r\\n* *Expression* - Scalar or literal expression.\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.','```\\r\\nStormEvents\\r\\n    | summarize event_count=count() by State\\r\\n    | where State !contains \"kan\"\\r\\n    | where event_count > 3000\\r\\n    | project State, event_count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|event_count|\\r\\n|-----|-----------|\\r\\n|TEXAS|4701|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/not-contains-operator\",\"not-contains-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"!contains_cs\",\"Filters a record set for data that does not include a case-sensitive string. `contains` searches for characters rather than [terms](datatypes-string-operators.md#what-is-a-term) of three or more characters. The query scans the values in the column, which is slower than looking up a term in a term index.\",'The following table provides a comparison of the `contains` operators:\\r\\n\\r\\n|Operator   |Description   |Case-Sensitive  |Example (yields `true`)  |\\r\\n|-----------|--------------|----------------|-------------------------|\\r\\n|[`contains`](contains-operator.md) |RHS occurs as a subsequence of LHS |No |`\"FabriKam\" contains \"BRik\"`|\\r\\n|[`!contains`](not-contains-operator.md) |RHS doesn\\'t occur in LHS |No |`\"Fabrikam\" !contains \"xyz\"`|\\r\\n|[`contains_cs`](contains-cs-operator.md) |RHS occurs as a subsequence of LHS |Yes |`\"FabriKam\" contains_cs \"Kam\"`|\\r\\n|[`!contains_cs`](not-contains-cs-operator.md)   |RHS doesn\\'t occur in LHS |Yes |`\"Fabrikam\" !contains_cs \"Kam\"`|\\r\\n\\r\\n> [!NOTE]\\r\\n> The following abbreviations are used in the table above:\\r\\n>\\r\\n> * RHS = right hand side of the expression\\r\\n> * LHS = left hand side of the expression\\r\\n\\r\\nFor further information about other operators and to determine which operator is most appropriate for your query, see [datatype string operators](datatypes-string-operators.md). \\r\\n\\r\\n## Performance tips\\r\\n\\r\\n> [!NOTE]\\r\\n> Performance depends on the type of search and the structure of the data.\\r\\n\\r\\nFor faster results, use the case-sensitive version of an operator, for example, `contains_cs`, not `contains`.\\r\\n\\r\\nIf you\\'re testing for the presence of a symbol or alphanumeric word that is bound by non-alphanumeric characters at the start or end of a field, for faster results use `has` or `in`. Also, `has` works faster than `contains`, `startswith`, or `endswith`, however it is not as precise and could provide unwanted records.\\r\\n\\r\\nFor best practices, see [Query best practices](best-practices.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n### Case-sensitive syntax\\r\\n\\r\\n*T* `|` `where` *Column* `!contains_cs` `(`*Expression*`)` \\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T* - The tabular input whose records are to be filtered.\\r\\n* *Column* - The column to filter.\\r\\n* *Expression* - Scalar or literal expression.\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.','```\\r\\nStormEvents\\r\\n    | summarize event_count=count() by State\\r\\n    | where State !contains_cs \"AS\"\\r\\n    | count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Count|\\r\\n|-----|\\r\\n|59|\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n    | summarize event_count=count() by State\\r\\n    | where State !contains_cs \"TEX\"\\r\\n    | where event_count > 3000\\r\\n    | project State, event_count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|event_count|\\r\\n|-----|-----------|\\r\\n|KANSAS|3,166|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/not-contains-cs-operator\",\"not-contains-cs-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"!endswith\",\"Filters a record set for data that excludes a case-insensitive ending string.\",'The following table provides a comparison of the `endswith` operators:\\r\\n\\r\\n|Operator   |Description   |Case-Sensitive  |Example (yields `true`)  |\\r\\n|-----------|--------------|----------------|-------------------------|\\r\\n|[`endswith`](endswith-operator.md) |RHS is a closing subsequence of LHS |No |`\"Fabrikam\" endswith \"Kam\"`|\\r\\n|[`!endswith`](not-endswith-operator.md) |RHS isn\\'t a closing subsequence of LHS |No |`\"Fabrikam\" !endswith \"brik\"`|\\r\\n|[`endswith_cs`](endswith-cs-operator.md) |RHS is a closing subsequence of LHS |Yes |`\"Fabrikam\" endswith_cs \"kam\"`|\\r\\n|[`!endswith_cs`](not-endswith-cs-operator.md) |RHS isn\\'t a closing subsequence of LHS |Yes |`\"Fabrikam\" !endswith_cs \"brik\"`|\\r\\n\\r\\n> [!NOTE]\\r\\n> The following abbreviations are used in the table above:\\r\\n>\\r\\n> * RHS = right hand side of the expression\\r\\n> * LHS = left hand side of the expression\\r\\n\\r\\nFor more information about other operators and to determine which operator is most appropriate for your query, see [datatype string operators](datatypes-string-operators.md). \\r\\n\\r\\nCase-insensitive operators are currently supported only for ASCII-text. For non-ASCII comparison, use the [tolower()](tolowerfunction.md) function.\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n> [!NOTE]\\r\\n> Performance depends on the type of search and the structure of the data.\\r\\n\\r\\nFor faster results, use the case-sensitive version of an operator, for example, `endswith_cs`, not `endswith`. For best practices, see [Query best practices](best-practices.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *col* `!endswith` `(`*expression*`)`   \\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T* - The tabular input whose records are to be filtered.\\r\\n* *col* - The column to filter.\\r\\n* *expression* - Scalar or literal expression.\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.','```\\r\\nStormEvents\\r\\n    | summarize event_count=count() by State\\r\\n    | where State !endswith \"is\"\\r\\n    | where event_count > 2000\\r\\n    | project State, event_count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|event_count|\\r\\n|-----|-----------|\\r\\n|TEXAS|4701|\\r\\n|KANSAS|3166|\\r\\n|IOWA|2337|\\r\\n|MISSOURI|2016|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/not-endswith-operator\",\"not-endswith-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"!endswith_cs\",\"Filters a record set for data that does not contain a case-insensitive ending string.\",'The following table provides a comparison of the `endswith` operators:\\r\\n\\r\\n|Operator   |Description   |Case-Sensitive  |Example (yields `true`)  |\\r\\n|-----------|--------------|----------------|-------------------------|\\r\\n|[`endswith`](endswith-operator.md) |RHS is a closing subsequence of LHS |No |`\"Fabrikam\" endswith \"Kam\"`|\\r\\n|[`!endswith`](not-endswith-operator.md) |RHS isn\\'t a closing subsequence of LHS |No |`\"Fabrikam\" !endswith \"brik\"`|\\r\\n|[`endswith_cs`](endswith-cs-operator.md) |RHS is a closing subsequence of LHS |Yes |`\"Fabrikam\" endswith_cs \"kam\"`|\\r\\n|[`!endswith_cs`](not-endswith-cs-operator.md) |RHS isn\\'t a closing subsequence of LHS |Yes |`\"Fabrikam\" !endswith_cs \"brik\"`|\\r\\n\\r\\n> [!NOTE]\\r\\n> The following abbreviations are used in the table above:\\r\\n>\\r\\n> * RHS = right hand side of the expression\\r\\n> * LHS = left hand side of the expression\\r\\n\\r\\nFor further information about other operators and to determine which operator is most appropriate for your query, see [datatype string operators](datatypes-string-operators.md). \\r\\n\\r\\n## Performance tips\\r\\n\\r\\n> [!NOTE]\\r\\n> Performance depends on the type of search and the structure of the data.\\r\\n\\r\\nFor faster results, use the case-sensitive version of an operator, for example, `endswith_cs`, not `endswith`. For best practices, see [Query best practices](best-practices.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *col* `!endswith_cs` `(`*expression*`)`  \\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T* - The tabular input whose records are to be filtered.\\r\\n* *col* - The column to filter.\\r\\n* *expression* - Scalar or literal expression.\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.','```\\r\\nStormEvents\\r\\n    | summarize event_count=count() by State\\r\\n    | where State !endswith_cs \"AS\"\\r\\n    | count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Count|\\r\\n|-----|\\r\\n|64|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/not-endswith-cs-operator\",\"not-endswith-cs-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"!has\",\"Filters a record set for data that does not have a matching case-insensitive string. `has` searches for indexed terms, where a [term](datatypes-string-operators.md#what-is-a-term) is three or more characters. If your term is fewer than three characters, the query scans the values in the column, which is slower than looking up the term in the term index.\",'The following table provides a comparison of the `has` operators:\\r\\n\\r\\n|Operator   |Description   |Case-Sensitive  |Example (yields `true`)  |\\r\\n|-----------|--------------|----------------|-------------------------|\\r\\n|[`has`](has-operator.md) |Right-hand-side (RHS) is a whole term in left-hand-side (LHS) |No |`\"North America\" has \"america\"`|\\r\\n|[`!has`](not-has-operator.md) |RHS isn\\'t a full term in LHS |No |`\"North America\" !has \"amer\"`|\\r\\n|[`has_cs`](has-cs-operator.md) |RHS is a whole term in LHS |Yes |`\"North America\" has_cs \"America\"`|\\r\\n|[`!has_cs`](not-has-cs-operator.md) |RHS isn\\'t a full term in LHS |Yes |`\"North America\" !has_cs \"amer\"`|\\r\\n\\r\\n> [!NOTE]\\r\\n> The following abbreviations are used in the table above:\\r\\n>\\r\\n> * RHS = right hand side of the expression\\r\\n> * LHS = left hand side of the expression\\r\\n\\r\\nFor further information about other operators and to determine which operator is most appropriate for your query, see [datatype string operators](datatypes-string-operators.md). \\r\\n\\r\\nCase-insensitive operators are currently supported only for ASCII-text. For non-ASCII comparison, use the [tolower()](tolowerfunction.md) function.\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n> [!NOTE]\\r\\n> Performance depends on the type of search and the structure of the data.\\r\\n\\r\\nFor faster results, use the case-sensitive version of an operator, for example, `has_cs`, not `has`.\\r\\n\\r\\nIf you\\'re testing for the presence of a symbol or alphanumeric word that is bound by non-alphanumeric characters at the start or end of a field, for faster results use `has` or `in`. \\r\\n\\r\\nFor best practices, see [Query best practices](best-practices.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *Column* `!has` `(`*Expression*`)`   \\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T* - The tabular input whose records are to be filtered.\\r\\n* *Column* - The column to filter.\\r\\n* *Expression* - Scalar or literal expression.\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.','```\\r\\nStormEvents\\r\\n    | summarize event_count=count() by State\\r\\n    | where State !has \"NEW\"\\r\\n    | where event_count > 3000\\r\\n    | project State, event_count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|event_count|\\r\\n|-----|-----------|\\r\\n|TEXAS|4,701|\\r\\n|KANSAS|3,166|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/not-has-operator\",\"not-has-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"!has_cs\",\"Filters a record set for data that does not have a matching case-sensitive string. `has` searches for indexed terms, where a [term](datatypes-string-operators.md#what-is-a-term) is three or more characters. If your term is fewer than three characters, the query scans the values in the column, which is slower than looking up the term in the term index.\",'The following table provides a comparison of the `has` operators:\\r\\n\\r\\n|Operator   |Description   |Case-Sensitive  |Example (yields `true`)  |\\r\\n|-----------|--------------|----------------|-------------------------|\\r\\n|[`has`](has-operator.md) |Right-hand-side (RHS) is a whole term in left-hand-side (LHS) |No |`\"North America\" has \"america\"`|\\r\\n|[`!has`](not-has-operator.md) |RHS isn\\'t a full term in LHS |No |`\"North America\" !has \"amer\"`|\\r\\n|[`has_cs`](has-cs-operator.md) |RHS is a whole term in LHS |Yes |`\"North America\" has_cs \"America\"`|\\r\\n|[`!has_cs`](not-has-cs-operator.md) |RHS isn\\'t a full term in LHS |Yes |`\"North America\" !has_cs \"amer\"`|\\r\\n\\r\\n> [!NOTE]\\r\\n> The following abbreviations are used in the table above:\\r\\n>\\r\\n> * RHS = right hand side of the expression\\r\\n> * LHS = left hand side of the expression\\r\\n\\r\\nFor further information about other operators and to determine which operator is most appropriate for your query, see [datatype string operators](datatypes-string-operators.md). \\r\\n\\r\\n## Performance tips\\r\\n\\r\\n> [!NOTE]\\r\\n> Performance depends on the type of search and the structure of the data.\\r\\n\\r\\nFor faster results, use the case-sensitive version of an operator, for example, `has_cs`, not `has`.\\r\\n\\r\\nIf you\\'re testing for the presence of a symbol or alphanumeric word that is bound by non-alphanumeric characters at the start or end of a field, for faster results use `has` or `in`. \\r\\n\\r\\nFor best practices, see [Query best practices](best-practices.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *Column* `!has_cs` `(`*Expression*`)`  \\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T* - The tabular input whose records are to be filtered.\\r\\n* *Column* - The column to filter.\\r\\n* *Expression* - Scalar or literal expression.\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.','```\\r\\nStormEvents\\r\\n    | summarize event_count=count() by State\\r\\n    | where State !has_cs \"new\"\\r\\n    | count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Count|\\r\\n|-----|\\r\\n|67|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/not-has-cs-operator\",\"not-has-cs-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"!hasprefix\",\"Filters a record set for data that does not include a case-insensitive starting string. `has` searches for indexed terms, where a [term](datatypes-string-operators.md#what-is-a-term) is three or more characters. If your term is fewer than three characters, the query scans the values in the column, which is slower than looking up the term in the term index.\",'The following table provides a comparison of the `hasprefix` operators:\\r\\n\\r\\n|Operator   |Description   |Case-Sensitive  |Example (yields `true`)  |\\r\\n|-----------|--------------|----------------|-------------------------|\\r\\n|[`hasprefix`](hasprefix-operator.md) |RHS is a term prefix in LHS |No |`\"North America\" hasprefix \"ame\"`|\\r\\n|[`!hasprefix`](not-hasprefix-operator.md) |RHS isn\\'t a term prefix in LHS |No |`\"North America\" !hasprefix \"mer\"`|\\r\\n|[`hasprefix_cs`](hasprefix-cs-operator.md) |RHS is a term prefix in LHS |Yes |`\"North America\" hasprefix_cs \"Ame\"`|\\r\\n|[`!hasprefix_cs`](not-hasprefix-cs-operator.md) |RHS isn\\'t a term prefix in LHS |Yes |`\"North America\" !hasprefix_cs \"CA\"`|\\r\\n\\r\\n> [!NOTE]\\r\\n> The following abbreviations are used in the table above:\\r\\n>\\r\\n> * RHS = right hand side of the expression\\r\\n> * LHS = left hand side of the expression\\r\\n\\r\\nFor more information about other operators and to determine which operator is most appropriate for your query, see [datatype string operators](datatypes-string-operators.md). \\r\\n\\r\\nCase-insensitive operators are currently supported only for ASCII-text. For non-ASCII comparison, use the [tolower()](tolowerfunction.md) function.\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n> [!NOTE]\\r\\n> Performance depends on the type of search and the structure of the data.\\r\\n\\r\\nFor faster results, use the case-sensitive version of an operator, for example, `hasprefix_cs`, not `hasprefix`.\\r\\n\\r\\nIf you\\'re testing for the presence of a symbol or alphanumeric word that is bound by non-alphanumeric characters at the start or end of a field, for faster results use `has` or `in`. \\r\\n\\r\\nFor best practices, see [Query best practices](best-practices.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *Column* `!hasprefix` `(`*Expression*`)`   \\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T* - The tabular input whose records are to be filtered.\\r\\n* *Column* - The column to filter.\\r\\n* *Expression* - Scalar or literal expression.\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.','```\\r\\nStormEvents\\r\\n    | summarize event_count=count() by State\\r\\n    | where State !hasprefix \"N\"\\r\\n    | where event_count > 2000\\r\\n    | project State, event_count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|event_count|\\r\\n|-----|-----------|\\r\\n|TEXAS|4701|\\r\\n|KANSAS|3166|\\r\\n|IOWA|2337|\\r\\n|ILLINOIS|2022|\\r\\n|MISSOURI|2016|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/not-hasprefix-operator\",\"not-hasprefix-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"!hasprefix_cs\",\"Filters a record set for data that does not have a case-sensitive starting string. `has` searches for indexed terms, where a [term](datatypes-string-operators.md#what-is-a-term) is three or more characters. If your term is fewer than three characters, the query scans the values in the column, which is slower than looking up the term in the term index.\",'|Operator   |Description   |Case-Sensitive  |Example (yields `true`)  |\\r\\n|-----------|--------------|----------------|-------------------------|\\r\\n|[`hasprefix`](hasprefix-operator.md) |RHS is a term prefix in LHS |No |`\"North America\" hasprefix \"ame\"`|\\r\\n|[`!hasprefix`](not-hasprefix-operator.md) |RHS isn\\'t a term prefix in LHS |No |`\"North America\" !hasprefix \"mer\"`|\\r\\n|[`hasprefix_cs`](hasprefix-cs-operator.md) |RHS is a term prefix in LHS |Yes |`\"North America\" hasprefix_cs \"Ame\"`|\\r\\n|[`!hasprefix_cs`](not-hasprefix-cs-operator.md) |RHS isn\\'t a term prefix in LHS |Yes |`\"North America\" !hasprefix_cs \"CA\"`|\\r\\n\\r\\n> [!NOTE]\\r\\n> The following abbreviations are used in the table above:\\r\\n>\\r\\n> * RHS = right hand side of the expression\\r\\n> * LHS = left hand side of the expression\\r\\n\\r\\nFor further information about other operators and to determine which operator is most appropriate for your query, see [datatype string operators](datatypes-string-operators.md). \\r\\n\\r\\n## Performance tips\\r\\n\\r\\n> [!NOTE]\\r\\n> Performance depends on the type of search and the structure of the data.\\r\\n\\r\\nFor faster results, use the case-sensitive version of an operator, for example, `hasprefix_cs`, not `hasprefix`. For best practices, see [Query best practices](best-practices.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *Column* `!hasprefix_cs` `(`*Expression*`)`  \\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T* - The tabular input whose records are to be filtered.\\r\\n* *Column* - The column to filter.\\r\\n* *Expression* - Scalar or literal expression.\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.','```\\r\\nStormEvents\\r\\n    | summarize event_count=count() by State\\r\\n    | where State !hasprefix_cs \"P\"\\r\\n    | count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Count|\\r\\n|-----|\\r\\n|64|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/not-hasprefix-cs-operator\",\"not-hasprefix-cs-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"!hassuffix\",\"Filters a record set for data that does not have a case-insensitive ending string.`has` searches for indexed terms, where a [term](datatypes-string-operators.md#what-is-a-term) is three or more characters. If your term is fewer than three characters, the query scans the values in the column, which is slower than looking up the term in the term index.\",'The following table provides a comparison of the `hassuffix` operators:\\r\\n\\r\\n|Operator   |Description   |Case-Sensitive  |Example (yields `true`)  |\\r\\n|-----------|--------------|----------------|-------------------------|\\r\\n|[`hassuffix`](hassuffix-operator.md) |RHS is a term suffix in LHS |No |`\"North America\" hassuffix \"ica\"`|\\r\\n|[`!hassuffix`](not-hassuffix-operator.md) |RHS isn\\'t a term suffix in LHS |No |`\"North America\" !hassuffix \"americ\"`|\\r\\n|[`hassuffix_cs`](hassuffix-cs-operator.md)  |RHS is a term suffix in LHS |Yes |`\"North America\" hassuffix_cs \"ica\"`|\\r\\n|[`!hassuffix_cs`](not-hassuffix-cs-operator.md) |RHS isn\\'t a term suffix in LHS |Yes |`\"North America\" !hassuffix_cs \"icA\"`|\\r\\n\\r\\n> [!NOTE]\\r\\n> The following abbreviations are used in the table above:\\r\\n>\\r\\n> * RHS = right hand side of the expression\\r\\n> * LHS = left hand side of the expression\\r\\n\\r\\nFor more information about other operators and to determine which operator is most appropriate for your query, see [datatype string operators](datatypes-string-operators.md). \\r\\n\\r\\nCase-insensitive operators are currently supported only for ASCII-text. For non-ASCII comparison, use the [tolower()](tolowerfunction.md) function.\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n> [!NOTE]\\r\\n> Performance depends on the type of search and the structure of the data.\\r\\n\\r\\nFor faster results, use the case-sensitive version of an operator, for example, `hassuffix_cs`, not `hassuffix`. \\r\\n\\r\\nIf you\\'re testing for the presence of a symbol or alphanumeric word that is bound by non-alphanumeric characters at the start or end of a field, for faster results use `has` or `in`. \\r\\n\\r\\nFor best practices, see [Query best practices](best-practices.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *Column* `!hassuffix` `(`*Expression*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T* - The tabular input whose records are to be filtered.\\r\\n* *Column* - The column to filter.\\r\\n* *Expression* - Scalar or literal expression.\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.','```\\r\\nStormEvents\\r\\n    | summarize event_count=count() by State\\r\\n    | where State !hassuffix \"A\"\\r\\n    | where event_count > 2000\\r\\n    | project State, event_count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|event_count|\\r\\n|-----|-----------|\\r\\n|TEXAS|4701|\\r\\n|KANSAS|3166|\\r\\n|ILLINOIS|2022|\\r\\n|MISSOURI|2016|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/not-hassuffix-operator\",\"not-hassuffix-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"!hassuffix_cs\",\"Filters a record set for data that does not have a case-sensitive ending string. `has` searches for indexed terms, where a [term](datatypes-string-operators.md#what-is-a-term) is three or more characters. If your term is fewer than three characters, the query scans the values in the column, which is slower than looking up the term in the term index.\",'The following table provides a comparison of the `hassuffix` operators:\\r\\n\\r\\n|Operator   |Description   |Case-Sensitive  |Example (yields `true`)  |\\r\\n|-----------|--------------|----------------|-------------------------|\\r\\n|[`hassuffix`](hassuffix-operator.md) |RHS is a term suffix in LHS |No |`\"North America\" hassuffix \"ica\"`|\\r\\n|[`!hassuffix`](not-hassuffix-operator.md) |RHS isn\\'t a term suffix in LHS |No |`\"North America\" !hassuffix \"americ\"`|\\r\\n|[`hassuffix_cs`](hassuffix-cs-operator.md)  |RHS is a term suffix in LHS |Yes |`\"North America\" hassuffix_cs \"ica\"`|\\r\\n|[`!hassuffix_cs`](not-hassuffix-cs-operator.md) |RHS isn\\'t a term suffix in LHS |Yes |`\"North America\" !hassuffix_cs \"icA\"`|\\r\\n\\r\\n> [!NOTE]\\r\\n> The following abbreviations are used in the table above:\\r\\n>\\r\\n> * RHS = right hand side of the expression\\r\\n> * LHS = left hand side of the expression\\r\\n\\r\\nFor further information about other operators and to determine which operator is most appropriate for your query, see [datatype string operators](datatypes-string-operators.md). \\r\\n\\r\\n## Performance tips\\r\\n\\r\\n> [!NOTE]\\r\\n> Performance depends on the type of search and the structure of the data.\\r\\n\\r\\nFor faster results, use the case-sensitive version of an operator, for example, `hassuffix_cs`, not `hassuffix`. \\r\\n\\r\\nIf you\\'re testing for the presence of a symbol or alphanumeric word that is bound by non-alphanumeric characters at the start or end of a field, for faster results use `has` or `in`. \\r\\n\\r\\nFor best practices, see [Query best practices](best-practices.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *Column* `!hassuffix_cs` `(`*Expression*`)`  \\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T* - The tabular input whose records are to be filtered.\\r\\n* *Column* - The column to filter.\\r\\n* *Expression* - Scalar or literal expression.\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.','```\\r\\nStormEvents\\r\\n    | summarize event_count=count() by State\\r\\n    | where State !hassuffix_cs \"AS\"\\r\\n    | where event_count > 2000\\r\\n    | project State, event_count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|event_count|\\r\\n|-----|-----------|\\r\\n|IOWA|2337|\\r\\n|ILLINOIS|2022|\\r\\n|MISSOURI|2016|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/not-hassuffix-cs-operator\",\"not-hassuffix-cs-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"!in\",\"Filters a record set for data without a case-sensitive string.\",'The following table provides a comparison of the `has` operators:\\r\\n\\r\\n|Operator   |Description   |Case-Sensitive  |Example (yields `true`)  |\\r\\n|-----------|--------------|----------------|-------------------------|\\r\\n|[`in`](in-cs-operator.md) |Equals to one of the elements |Yes |`\"abc\" in (\"123\", \"345\", \"abc\")`|\\r\\n|[`!in`](not-in-cs-operator.md) |Not equals to any of the elements |Yes | `\"bca\" !in (\"123\", \"345\", \"abc\")` |\\r\\n|[`in~`](inoperator.md) |Equals to any of the elements |No | `\"Abc\" in~ (\"123\", \"345\", \"abc\")` |\\r\\n|[`!in~`](not-in-operator.md) |Not equals to any of the elements |No | `\"bCa\" !in~ (\"123\", \"345\", \"ABC\")` |\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * In tabular expressions, the first column of the result set is selected.\\r\\n> * The expression list can produce up to `1,000,000` values.\\r\\n> * Nested arrays are flattened into a single list of values. For example, `x in (dynamic([1,[2,3]]))` becomes `x in (1,2,3)`.\\r\\n\\r\\nFor further information about other operators and to determine which operator is most appropriate for your query, see [datatype string operators](datatypes-string-operators.md). \\r\\n\\r\\n## Performance tips\\r\\n\\r\\n> [!NOTE]\\r\\n> Performance depends on the type of search and the structure of the data.\\r\\n\\r\\nFor faster results, use the case-sensitive version of an operator, for example, `in`, not `in~`. \\r\\n\\r\\nIf you\\'re testing for the presence of a symbol or alphanumeric word that is bound by non-alphanumeric characters at the start or end of a field, for faster results use `has` or `in`. \\r\\n\\r\\nFor best practices, see [Query best practices](best-practices.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *col* `!in` `(`*list of scalar expressions*`)`\\r\\n*T* `|` `where` *col* `!in` `(`*tabular expression*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T* - The tabular input whose records are to be filtered.\\r\\n* *col* - The column to filter.\\r\\n* *list of expressions* - A comma-separated list of tabular, scalar, or literal expressions.\\r\\n* *tabular expression* - A tabular expression that has a set of values. If the expression has multiple columns, the first column is used.\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.','```\\r\\nStormEvents \\r\\n| where State !in (\"FLORIDA\", \"GEORGIA\", \"NEW YORK\") \\r\\n| count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|54291|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/not-in-cs-operator\",\"not-in-cs-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"!in~\",\"Filters a record set for data without a case-insensitive string.\",'The following table provides a comparison of the `has` operators:.\\r\\n\\r\\n|Operator   |Description   |Case-Sensitive  |Example (yields `true`)  |\\r\\n|-----------|--------------|----------------|-------------------------|\\r\\n|[`in`](in-cs-operator.md) |Equals to one of the elements |Yes |`\"abc\" in (\"123\", \"345\", \"abc\")`|\\r\\n|[`!in`](not-in-cs-operator.md) |Not equals to any of the elements |Yes | `\"bca\" !in (\"123\", \"345\", \"abc\")` |\\r\\n|[`in~`](inoperator.md) |Equals to any of the elements |No | `\"Abc\" in~ (\"123\", \"345\", \"abc\")` |\\r\\n|[`!in~`](not-in-operator.md) |Not equals to any of the elements |No | `\"bCa\" !in~ (\"123\", \"345\", \"ABC\")` |\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * In tabular expressions, the first column of the result set is selected.\\r\\n> * The expression list can produce up to `1,000,000` values.\\r\\n> * Nested arrays are flattened into a single list of values. For example, `x in (dynamic([1,[2,3]]))` becomes `x in (1,2,3)`.\\r\\n\\r\\nFor further information about other operators and to determine which operator is most appropriate for your query, see [datatype string operators](datatypes-string-operators.md). \\r\\n\\r\\nCase-insensitive operators are currently supported only for ASCII-text. For non-ASCII comparison, use the [tolower()](tolowerfunction.md) function.\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n> [!NOTE]\\r\\n> Performance depends on the type of search and the structure of the data.\\r\\n\\r\\nFor faster results, use the case-sensitive version of an operator, for example, `in`, not `in~`. \\r\\n\\r\\nIf you\\'re testing for the presence of a symbol or alphanumeric word that is bound by non-alphanumeric characters at the start or end of a field, for faster results use `has` or `in`. \\r\\n\\r\\nFor best practices, see [Query best practices](best-practices.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *col* `!in~` `(`*list of scalar expressions*`)`  \\r\\n*T* `|` `where` *col* `!in~` `(`*tabular expression*`)`   \\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T* - The tabular input whose records are to be filtered.\\r\\n* *col* - The column to filter.\\r\\n* *list of expressions* - A comma-separated list of tabular, scalar, or literal expressions.\\r\\n* *tabular expression* - A tabular expression that has a set of values. If the expression has multiple columns, the first column is used.\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.','```\\r\\nStormEvents \\r\\n| where State !in~ (\"Florida\", \"Georgia\", \"New York\") \\r\\n| count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|54,291|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/not-in-operator\",\"not-in-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"!startswith\",\"Filters a record set retrieving data that does not start a case-insensitive search string.\",'The following table provides a comparison of the `startswith` operators:\\r\\n\\r\\n> [!NOTE]\\r\\n> The following abbreviations are used in the table below:\\r\\n>\\r\\n> * RHS = right hand side of the expression\\r\\n> * LHS = left hand side of the expression\\r\\n\\r\\n|Operator   |Description   |Case-Sensitive  |Example (yields `true`)  |\\r\\n|-----------|--------------|----------------|-------------------------|\\r\\n|[`startswith`](startswith-operator.md) |RHS is an initial subsequence of LHS |No |`\"Fabrikam\" startswith \"fab\"`|\\r\\n|[`!startswith`](not-startswith-operator.md) |RHS isn\\'t an initial subsequence of LHS |No |`\"Fabrikam\" !startswith \"kam\"`|\\r\\n|[`startswith_cs`](startswith-cs-operator.md)  |RHS is an initial subsequence of LHS |Yes |`\"Fabrikam\" startswith_cs \"Fab\"`|\\r\\n|[`!startswith_cs`](not-startswith-cs-operator.md) |RHS isn\\'t an initial subsequence of LHS |Yes |`\"Fabrikam\" !startswith_cs \"fab\"`|\\r\\n\\r\\n> [!NOTE]\\r\\n> The following abbreviations are used in the table above:\\r\\n>\\r\\n> * RHS = right hand side of the expression\\r\\n> * LHS = left hand side of the expression\\r\\n\\r\\nFor further information about other operators and to determine which operator is most appropriate for your query, see [datatype string operators](datatypes-string-operators.md). \\r\\n\\r\\nCase-insensitive operators are currently supported only for ASCII-text. For non-ASCII comparison, use the [tolower()](tolowerfunction.md) function.\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n> [!NOTE]\\r\\n> Performance depends on the type of search and the structure of the data.\\r\\n\\r\\nFor faster results, use the case-sensitive version of an operator, for example, `hassuffix_cs`, not `hassuffix`. \\r\\n\\r\\nIf you\\'re testing for the presence of a symbol or alphanumeric word that is bound by non-alphanumeric characters at the start or end of a field, for faster results use `has` or `in`. \\r\\n\\r\\nFor best practices, see [Query best practices](best-practices.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *col* `!startswith` `(`*expression*`)` \\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T* - The tabular input whose records are to be filtered.\\r\\n* *col* - The column to filter.\\r\\n* *expression* - Scalar or literal expression.\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.','```\\r\\nStormEvents\\r\\n    | summarize event_count=count() by State\\r\\n    | where State !startswith \"i\"\\r\\n    | where event_count > 2000\\r\\n    | project State, event_count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|event_count|\\r\\n|-----|-----------|\\r\\n|TEXAS|4701|\\r\\n|KANSAS|3166|\\r\\n|MISSOURI|2016|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/not-startswith-operator\",\"not-startswith-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"!startswith_cs\",\"Filters a record set for data that does not start with a case-sensitive search string.\",'The following table provides a comparison of the `startswith` operators:\\r\\n\\r\\n|Operator   |Description   |Case-Sensitive  |Example (yields `true`)  |\\r\\n|-----------|--------------|----------------|-------------------------|\\r\\n|[`startswith`](startswith-operator.md) |RHS is an initial subsequence of LHS |No |`\"Fabrikam\" startswith \"fab\"`|\\r\\n|[`!startswith`](not-startswith-operator.md) |RHS isn\\'t an initial subsequence of LHS |No |`\"Fabrikam\" !startswith \"kam\"`|\\r\\n|[`startswith_cs`](startswith-cs-operator.md)  |RHS is an initial subsequence of LHS |Yes |`\"Fabrikam\" startswith_cs \"Fab\"`|\\r\\n|[`!startswith_cs`](not-startswith-cs-operator.md) |RHS isn\\'t an initial subsequence of LHS |Yes |`\"Fabrikam\" !startswith_cs \"fab\"`|\\r\\n\\r\\n> [!NOTE]\\r\\n> The following abbreviations are used in the table above:\\r\\n>\\r\\n> * RHS = right hand side of the expression\\r\\n> * LHS = left hand side of the expression\\r\\n\\r\\nFor further information about other operators and to determine which operator is most appropriate for your query, see [datatype string operators](datatypes-string-operators.md). \\r\\n\\r\\n## Performance tips\\r\\n\\r\\n> [!NOTE]\\r\\n> Performance depends on the type of search and the structure of the data.\\r\\n\\r\\nFor faster results, use the case-sensitive version of an operator, for example, `hassuffix_cs`, not `hassuffix`. \\r\\n\\r\\nIf you\\'re testing for the presence of a symbol or alphanumeric word that is bound by non-alphanumeric characters at the start or end of a field, for faster results use `has` or `in`. \\r\\n\\r\\nFor best practices, see [Query best practices](best-practices.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *col* `!startswith_cs` `(`*expression*`)`  \\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T* - The tabular input whose records are to be filtered.\\r\\n* *col* - The column to filter.\\r\\n* *expression* - Scalar or literal expression.\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.','```\\r\\nStormEvents\\r\\n    | summarize event_count=count() by State\\r\\n    | where State !startswith_cs \"I\"\\r\\n    | where event_count > 2000\\r\\n    | project State, event_count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|event_count|\\r\\n|-----|-----------|\\r\\n|TEXAS|4701|\\r\\n|KANSAS|3166|\\r\\n|MISSOURI|2016|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/not-startswith-cs-operator\",\"not-startswith-cs-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"=~\",\"Filters a record set for data with a case-insensitive string.\",'The following table provides a comparison of the `==` (equals) operators:\\r\\n\\r\\n|Operator   |Description   |Case-Sensitive  |Example (yields `true`)  |\\r\\n|-----------|--------------|----------------|-------------------------|\\r\\n|[`==`](equals-cs-operator.md)|Equals |Yes|`\"aBc\" == \"aBc\"`|\\r\\n|[`!=`](not-equals-cs-operator.md)|Not equals |Yes |`\"abc\" != \"ABC\"`|\\r\\n|[`=~`](equals-operator.md) |Equals |No |`\"abc\" =~ \"ABC\"`|\\r\\n|[`!~`](not-equals-operator.md) |Not equals |No |`\"aBc\" !~ \"xyz\"`|\\r\\n\\r\\nFor further information about other operators and to determine which operator is most appropriate for your query, see [datatype string operators](datatypes-string-operators.md). \\r\\n\\r\\nCase-insensitive operators are currently supported only for ASCII-text. For non-ASCII comparison, use the [tolower()](tolowerfunction.md) function.\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n> [!NOTE]\\r\\n> Performance depends on the type of search and the structure of the data.\\r\\n\\r\\nFor faster results, use the case-sensitive version of an operator, for example, `==`, not `=~`. For best practices, see [Query best practices](best-practices.md).\\r\\n\\r\\n## Syntax \\r\\n\\r\\n*T* `|` `where` *col* `=~` `(`*expression*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T* - The tabular input whose records are to be filtered.\\r\\n* *col* - The column to filter.\\r\\n* *expression* - Scalar or literal expression.\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.','```\\r\\nStormEvents\\r\\n    | where State =~ \"kansas\"\\r\\n    | count \\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|3,166|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/equals-operator\",\"equals-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"==\",\"Filters a record set for data matching a case-sensitive string.\",'The following table provides a comparison of the `==` operators:\\r\\n\\r\\n|Operator   |Description   |Case-Sensitive  |Example (yields `true`)  |\\r\\n|-----------|--------------|----------------|-------------------------|\\r\\n|[`==`](equals-cs-operator.md)|Equals |Yes|`\"aBc\" == \"aBc\"`|\\r\\n|[`!=`](not-equals-cs-operator.md)|Not equals |Yes |`\"abc\" != \"ABC\"`|\\r\\n|[`=~`](equals-operator.md) |Equals |No |`\"abc\" =~ \"ABC\"`|\\r\\n|[`!~`](not-equals-operator.md) |Not equals |No |`\"aBc\" !~ \"xyz\"`|\\r\\n\\r\\nFor further information about other operators and to determine which operator is most appropriate for your query, see [datatype string operators](datatypes-string-operators.md). \\r\\n\\r\\n## Performance tips\\r\\n\\r\\n> [!NOTE]\\r\\n> Performance depends on the type of search and the structure of the data.\\r\\n\\r\\nFor faster results, use the case-sensitive version of an operator, for example, `==`, not `=~`. For best practices, see [Query best practices](best-practices.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *col* `==` `(`*expressions`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T* - The tabular input whose records are to be filtered.\\r\\n* *col* - The column to filter.\\r\\n* *expression* - Scalar or literal expression.\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.','```\\r\\nStormEvents\\r\\n    | where State == \"kansas\"\\r\\n    | count \\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|0|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/equals-cs-operator\",\"equals-cs-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"abs\",\"Calculates the absolute value of the input.\",\"## Syntax\\r\\n\\r\\n`abs(`*x*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *x*: An integer or real number, or a timespan value.\\r\\n\\r\\n## Returns\\r\\n\\r\\n* Absolute value of x.\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/abs-function\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"acos\",\"Calculates the angle whose cosine is the specified number (the inverse operation of [`cos()`](cosfunction.md)).\",\"## Syntax\\r\\n\\r\\n`acos(`*x*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *x*: A real number in range [-1, 1].\\r\\n\\r\\n## Returns\\r\\n\\r\\n* The value of the arc cosine of `x`\\r\\n* `null` if `x` < -1 or `x` > 1\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/acosfunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"active_users_count\",\"Calculates distinct count of values, where each value has appeared in at least a minimum number of periods in a lookback period.\",'Useful for calculating distinct counts of \"fans\" only, while not including appearances of \"non-fans\". A user is counted as a \"fan\" only if it was active during the lookback period. The lookback period is only used to determine whether a user is considered `active` (\"fan\") or not. The aggregation itself doesn\\'t include users from the lookback window. In comparison, the [sliding_window_counts](sliding-window-counts-plugin.md) aggregation is performed over a sliding window of the lookback period.\\r\\n\\r\\n```\\r\\nT | evaluate active_users_count(id, datetime_column, startofday(ago(30d)), startofday(now()), 7d, 1d, 2, 7d, dim1, dim2, dim3)\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `| evaluate` `active_users_count(`*IdColumn*`,` *TimelineColumn*`,` *Start*`,` *End*`,` *LookbackWindow*`,` *Period*`,` *ActivePeriodsCount*`,` *Bin* `,` [*dim1*`,` *dim2*`,` ...]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n| -- | -- | -- | -- |\\r\\n| *T* | tabular expression | &check; | The input tabular expression.|\\r\\n| *IdColumn* | string | &check; | The name of the column with ID values that represent user activity. |\\r\\n| *TimelineColumn* | string | &check; | The name of the column that represents timeline. |\\r\\n| *Start* | datetime |  &check;  | Scalar with value of the analysis start period. |\\r\\n| *End* | datetime | &check; | Scalar with value of the analysis end period. |\\r\\n| *LookbackWindow* | timespan | &check; | A sliding time window defining a period where user appearance is checked. Lookback period starts at ([current appearance] - [lookback window]) and ends on ([current appearance]). |\\r\\n| *Period* | timespan | &check; | Scalar constant timespan to count as single appearance (a user will be counted as active if it appears in at least distinct ActivePeriodsCount of this timespan. |\\r\\n| *ActivePeriodsCount* | decimal | &check; | Minimal number of distinct active periods to decide if user is active. Active users are those users who appeared in at least (equal or greater than) active periods count. |\\r\\n| *Bin* | decimal/datetime/timespan | &check; | Scalar constant value of the analysis step period. Can be a numeric/datetime/timestamp value, or a string that is `week`/`month`/`year`. All periods will be the corresponding [startofweek](startofweekfunction.md)/[startofmonth](startofmonthfunction.md)/[startofyear](startofyearfunction.md) functions. |\\r\\n| *dim1*, *dim2*, ... | dynamic |   | list of the dimensions columns that slice the activity metrics calculation. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a table that has distinct count values for IDs that have appeared in ActivePeriodCounts in the following periods: the lookback period, each timeline period, and each existing dimensions combination.\\r\\n\\r\\nOutput table schema is:\\r\\n\\r\\n|*TimelineColumn*|dim1|..|dim_n|dcount_values|\\r\\n|---|---|---|---|---|\\r\\n|type: as of *TimelineColumn*|..|..|..|long|','Calculate weekly number of distinct users that appeared in at least three different days over a period of prior eight days. Period of analysis: July 2018.\\r\\n\\r\\n```\\r\\nlet Start = datetime(2018-07-01);\\r\\nlet End = datetime(2018-07-31);\\r\\nlet LookbackWindow = 8d;\\r\\nlet Period = 1d;\\r\\nlet ActivePeriods = 3;\\r\\nlet Bin = 7d;\\r\\nlet T =  datatable(User:string, Timestamp:datetime)\\r\\n[\\r\\n    \"B\",      datetime(2018-06-29),\\r\\n    \"B\",      datetime(2018-06-30),\\r\\n    \"A\",      datetime(2018-07-02),\\r\\n    \"B\",      datetime(2018-07-04),\\r\\n    \"B\",      datetime(2018-07-08),\\r\\n    \"A\",      datetime(2018-07-10),\\r\\n    \"A\",      datetime(2018-07-14),\\r\\n    \"A\",      datetime(2018-07-17),\\r\\n    \"A\",      datetime(2018-07-20),\\r\\n    \"B\",      datetime(2018-07-24)\\r\\n];\\r\\nT | evaluate active_users_count(User, Timestamp, Start, End, LookbackWindow, Period, ActivePeriods, Bin)\\r\\n```\\r\\n\\r\\n|Timestamp|`dcount`|\\r\\n|---|---|\\r\\n|2018-07-01 00:00:00.0000000|1|\\r\\n|2018-07-15 00:00:00.0000000|1|\\r\\n\\r\\nA user is considered active if it fulfills both of the following criteria:\\r\\n\\r\\n* The user was seen in at least three distinct days (Period = 1d, ActivePeriods=3).\\r\\n* The user was seen in a lookback window of 8d before and including their current appearance.\\r\\n\\r\\n\\r\\nIn the illustration below, the only appearances that are active by this criteria are the following instances: User A on 7/20 and User B on 7/4 (see plugin results above).\\r\\nThe appearances of User B are included for the lookback window on 7/4, but not for the Start-End time range of 6/29-30.\\r\\n\\r\\n![Graph showing active users based on the loopback window and active period specified in the query.](images/queries/active-users-count.png)',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/active-users-count-plugin\",\"active-users-count-plugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"activity_counts_metrics\",\"Calculates useful activity metrics for each time window compared/aggregated to *all* previous time windows. Metrics include: total count values, distinct count values, distinct count of new values, and aggregated distinct count. Compare this plugin to [activity_metrics plugin](activity-metrics-plugin.md), in which every time window is compared to its previous time window only.\",\"```\\r\\nT | evaluate activity_counts_metrics(id, datetime_column, startofday(ago(30d)), startofday(now()), 1d, dim1, dim2, dim3)\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `| evaluate` `activity_counts_metrics(`*IdColumn*`,` *TimelineColumn*`,` *Start*`,` *End*`,` *Window* [`,` *Cohort*] [`,` *dim1*`,` *dim2*`,` ...] [`,` *Lookback*] `)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n| -- | -- | -- | -- |\\r\\n| *T* | tabular expression | &check; | The input tabular expression. |\\r\\n| *IdColumn* | string | &check; | The name of the column with ID values that represent user activity. |\\r\\n| *TimelineColumn* | string | &check; | The name of the column that represents the timeline. |\\r\\n| *Start* | datetime | &check; | Scalar with value of the analysis start period. |\\r\\n| *End* | datetime | &check; | Scalar with value of the analysis end period. |\\r\\n| *Window* | decimal/datetime/timespan | &check; | Scalar with value of the analysis window period. Can be either a numeric/datetime/timestamp value, or a string that is one of `week`/`month`/`year`, in which case all periods will be [startofweek](startofweekfunction.md)/[startofmonth](startofmonthfunction.md) or [startofyear](startofyearfunction.md). |\\r\\n|  *dim1*, *dim2*, ... | dynamic |   | list of the dimensions columns that slice the activity metrics calculation. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a table that has: total count values, distinct count values, distinct count of new values, and aggregated distinct count for each time window.\\r\\n\\r\\nOutput table schema is:\\r\\n\\r\\n|`TimelineColumn`|`dim1`|...|`dim_n`|`count`|`dcount`|`new_dcount`|`aggregated_dcount`|\\r\\n|---|---|---|---|---|---|---|---|\\r\\n|type: as of *`TimelineColumn`*|..|..|..|long|long|long|long|\\r\\n\\r\\n* *`TimelineColumn`*: The time window start time.\\r\\n* *`count`*: The total records count in the time window and *dim(s)*\\r\\n* *`dcount`*: The distinct ID values count in the time window and *dim(s)*\\r\\n* *`new_dcount`*: The distinct ID values in the time window and *dim(s)* compared to all previous time windows.\\r\\n* *`aggregated_dcount`*: The total aggregated distinct ID values of *dim(s)* from first-time window to current (inclusive).\",\"### Daily activity counts\\r\\n\\r\\nThe next query calculates daily activity counts for the provided input table\\r\\n\\r\\n```\\r\\nlet start=datetime(2017-08-01);\\r\\nlet end=datetime(2017-08-04);\\r\\nlet window=1d;\\r\\nlet T = datatable(UserId:string, Timestamp:datetime)\\r\\n[\\r\\n'A', datetime(2017-08-01),\\r\\n'D', datetime(2017-08-01),\\r\\n'J', datetime(2017-08-01),\\r\\n'B', datetime(2017-08-01),\\r\\n'C', datetime(2017-08-02),\\r\\n'T', datetime(2017-08-02),\\r\\n'J', datetime(2017-08-02),\\r\\n'H', datetime(2017-08-03),\\r\\n'T', datetime(2017-08-03),\\r\\n'T', datetime(2017-08-03),\\r\\n'J', datetime(2017-08-03),\\r\\n'B', datetime(2017-08-03),\\r\\n'S', datetime(2017-08-03),\\r\\n'S', datetime(2017-08-04),\\r\\n];\\r\\n T\\r\\n | evaluate activity_counts_metrics(UserId, Timestamp, start, end, window)\\r\\n```\\r\\n\\r\\n|`Timestamp`|`count`|`dcount`|`new_dcount`|`aggregated_dcount`|\\r\\n|---|---|---|---|---|\\r\\n|2017-08-01 00:00:00.0000000|4|4|4|4|\\r\\n|2017-08-02 00:00:00.0000000|3|3|2|6|\\r\\n|2017-08-03 00:00:00.0000000|6|5|2|8|\\r\\n|2017-08-04 00:00:00.0000000|1|1|0|8|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/activity-counts-metrics-plugin\",\"activity-counts-metrics-plugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"activity_engagement\",\"Calculates activity engagement ratio based on ID column over a sliding timeline window.\",\"activity_engagement plugin can be used for calculating DAU/WAU/MAU (daily/weekly/monthly activities).\\r\\n\\r\\n```\\r\\nT | evaluate activity_engagement(id, datetime_column, 1d, 30d)\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `| evaluate` `activity_engagement(`*IdColumn*`,` *TimelineColumn*`,` [*Start*`,` *End*`,`] *InnerActivityWindow*`,` *OuterActivityWindow* [`,` *dim1*`,` *dim2*`,` ...]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | tabular expression | &check; | The input tabular expression. |\\r\\n| *IdCoumn* | string | &check; | The name of the column with ID values that represent user activity. |\\r\\n| *TimelineColumn* | string | &check; | The name of the column that represents timeline. |\\r\\n| *Start* | datetime |  | Scalar with value of the analysis start period. |\\r\\n| *End* | datetime |  | Scalar with value of the analysis end period. |\\r\\n| *InnerActivityWindow* | timespan | &check; | Value of the inner-scope analysis window period. |\\r\\n| *OuterActivityWindow* | timespan | &check; | Value of the outer-scope analysis window period. |\\r\\n| *dim1*, *dim2*, ... | table array |  | List of the dimensions columns that slice the activity metrics calculation. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a table that has a distinct count of ID values inside an inner-scope window, inside an outer-scope window, and the activity ratio for each inner-scope window period for each existing dimensions combination.\\r\\n\\r\\nOutput table schema is:\\r\\n\\r\\n|TimelineColumn|dcount_activities_inner|dcount_activities_outer|activity_ratio|dim1|..|dim_n|\\r\\n|---|---|---|---|--|--|--|--|--|--|\\r\\n|type: as of *TimelineColumn*|long|long|double|..|..|..|\",\"### DAU/WAU calculation\\r\\n\\r\\nThe following example calculates DAU/WAU (Daily Active Users / Weekly Active Users ratio) over a randomly generated data.\\r\\n\\r\\n```\\r\\n// Generate random data of user activities\\r\\nlet _start = datetime(2017-01-01);\\r\\nlet _end = datetime(2017-01-31);\\r\\nrange _day from _start to _end  step 1d\\r\\n| extend d = tolong((_day - _start)/1d)\\r\\n| extend r = rand()+1\\r\\n| extend _users=range(tolong(d*50*r), tolong(d*50*r+100*r-1), 1) \\r\\n| mv-expand id=_users to typeof(long) limit 1000000\\r\\n// Calculate DAU/WAU ratio\\r\\n| evaluate activity_engagement(['id'], _day, _start, _end, 1d, 7d)\\r\\n| project _day, Dau_Wau=activity_ratio*100 \\r\\n| render timechart \\r\\n```\\r\\n\\r\\n![Graph displaying the ratio of daily active users to weekly active users as specified in the query.](images/activity-engagement-plugin/activity-engagement-dau-wau.png)\\r\\n\\r\\n### DAU/MAU calculation\\r\\n\\r\\nThe following example calculates DAU/WAU (Daily Active Users / Weekly Active Users ratio) over a randomly generated data.\\r\\n\\r\\n```\\r\\n// Generate random data of user activities\\r\\nlet _start = datetime(2017-01-01);\\r\\nlet _end = datetime(2017-05-31);\\r\\nrange _day from _start to _end  step 1d\\r\\n| extend d = tolong((_day - _start)/1d)\\r\\n| extend r = rand()+1\\r\\n| extend _users=range(tolong(d*50*r), tolong(d*50*r+100*r-1), 1) \\r\\n| mv-expand id=_users to typeof(long) limit 1000000\\r\\n// Calculate DAU/MAU ratio\\r\\n| evaluate activity_engagement(['id'], _day, _start, _end, 1d, 30d)\\r\\n| project _day, Dau_Mau=activity_ratio*100 \\r\\n| render timechart \\r\\n```\\r\\n\\r\\n![Graph displaying the ratio of daily active users to monthly active users as specified in the query.](images/activity-engagement-plugin/activity-engagement-dau-mau.png)\\r\\n\\r\\n### DAU/MAU calculation with additional dimensions\\r\\n\\r\\nThe following example calculates DAU/WAU (Daily Active Users / Weekly Active Users ratio) over a randomly generated data with additional dimension (`mod3`).\\r\\n\\r\\n```\\r\\n// Generate random data of user activities\\r\\nlet _start = datetime(2017-01-01);\\r\\nlet _end = datetime(2017-05-31);\\r\\nrange _day from _start to _end  step 1d\\r\\n| extend d = tolong((_day - _start)/1d)\\r\\n| extend r = rand()+1\\r\\n| extend _users=range(tolong(d*50*r), tolong(d*50*r+100*r-1), 1) \\r\\n| mv-expand id=_users to typeof(long) limit 1000000\\r\\n| extend mod3 = strcat(\\\"mod3=\\\", id % 3)\\r\\n// Calculate DAU/MAU ratio\\r\\n| evaluate activity_engagement(['id'], _day, _start, _end, 1d, 30d, mod3)\\r\\n| project _day, Dau_Mau=activity_ratio*100, mod3 \\r\\n| render timechart \\r\\n```\\r\\n\\r\\n![Graph displaying the ratio of daily active users to monthly active users with modulo 3 as specified in the query.](images/activity-engagement-plugin/activity-engagement-dau-mau-mod3.png)\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/activity-engagement-plugin\",\"activity-engagement-plugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"activity_metrics\",\"Calculates useful metrics that include distinct count values, distinct count of new values, retention rate, and churn rate. This plugin is different from [activity_counts_metrics plugin](activity-counts-metrics-plugin.md) in which every time window is compared to *all* previous time windows.\",\"```\\r\\nT | evaluate activity_metrics(id, datetime_column, startofday(ago(30d)), startofday(now()), 1d, dim1, dim2, dim3)\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `| evaluate` `activity_metrics(`*IdColumn*`,` *TimelineColumn*`,` [*Start*`,` *End*`,`] *Window* [`,` *dim1*`,` *dim2*`,` ...]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *T* | tabular expression | &check; | The input tabular expression. |\\r\\n| *IdCoumn* | string | &check; | The name of the column with ID values that represent user activity. |\\r\\n| *TimelineColumn* | string | &check; | The name of the column that represents timeline. |\\r\\n| *Start* | datetime |  | Value of the analysis start period. |\\r\\n| *End* | datetime |  | Value of the analysis end period. |\\r\\n| *Window* | decimal/datetime/timespan | &check; | Value of the analysis window period. Can be either a numeric, datetime, timestamp, or string value. Strings are either `week`, `month`, or `year`, in which case all periods will be [startofweek](startofweekfunction.md), [startofmonth](startofmonthfunction.md), or [startofyear](startofyearfunction.md) respectively. |\\r\\n| *dim1*, *dim2*, ... | table array |  | List of the dimensions columns that slice the activity metrics calculation. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe plugin returns a table with the distinct count values, distinct count of new values, retention rate, and churn rate for each timeline period for each existing dimensions combination.\\r\\n\\r\\nOutput table schema is:\\r\\n\\r\\n|*TimelineColumn*|dcount_values|dcount_newvalues|retention_rate|churn_rate|dim1|..|dim_n|\\r\\n|---|---|---|---|---|--|--|--|--|--|--|\\r\\n|type: as of *TimelineColumn*|long|long|double|double|..|..|..|\\r\\n\\r\\n### Notes\\r\\n\\r\\n***Retention Rate Definition***\\r\\n\\r\\n`Retention Rate` over a period is calculated as:\\r\\n\\r\\n> *number of customers returned during the period*\\r\\n> / (divided by)\\r\\n> *number customers at the beginning of the period*\\r\\n\\r\\nwhere the `# of customers returned during the period` is defined as:\\r\\n\\r\\n> *number of customers at end of period*\\r\\n> \\\\- (minus)\\r\\n> *number of new customers acquired during the period*\\r\\n\\r\\n`Retention Rate` can vary from 0.0 to 1.0\\r\\nA higher score means a larger number of returning users.\\r\\n\\r\\n***Churn Rate Definition***\\r\\n\\r\\n`Churn Rate` over a period is calculated as:\\r\\n\\r\\n> *number of customers lost in the period*\\r\\n> / (divided by)\\r\\n> *number of customers at the beginning of the period*\\r\\n\\r\\nwhere the `# of customer lost in the period` is defined as:\\r\\n\\r\\n> *number of customers at the beginning of the period*\\r\\n> \\\\- (minus)\\r\\n> *number of customers at the end of the period*\\r\\n\\r\\n`Churn Rate` can vary from 0.0 to 1.0\\r\\nThe higher score means the larger number of users are NOT returning to the service.\\r\\n\\r\\n***Churn vs. Retention Rate***\\r\\nThe churn vs. retention Rate is derived from the definition of `Churn Rate` and `Retention Rate`. The following calculation is always true:\\r\\n\\r\\n> [`Retention Rate`] = 100.0% - [`Churn Rate`]\",\"### Weekly retention rate and churn rate\\r\\n\\r\\nThe next query calculates retention and churn rate for week-over-week window.\\r\\n\\r\\n```\\r\\n// Generate random data of user activities\\r\\nlet _start = datetime(2017-01-02);\\r\\nlet _end = datetime(2017-05-31);\\r\\nrange _day from _start to _end  step 1d\\r\\n| extend d = tolong((_day - _start)/1d)\\r\\n| extend r = rand()+1\\r\\n| extend _users=range(tolong(d*50*r), tolong(d*50*r+200*r-1), 1)\\r\\n| mv-expand id=_users to typeof(long) limit 1000000\\r\\n//\\r\\n| evaluate activity_metrics(['id'], _day, _start, _end, 7d)\\r\\n| project _day, retention_rate, churn_rate\\r\\n| render timechart\\r\\n```\\r\\n\\r\\n|_day|retention_rate|churn_rate|\\r\\n|---|---|---|\\r\\n|2017-01-02 00:00:00.0000000|NaN|NaN|\\r\\n|2017-01-09 00:00:00.0000000|0.179910044977511|0.820089955022489|\\r\\n|2017-01-16 00:00:00.0000000|0.744374437443744|0.255625562556256|\\r\\n|2017-01-23 00:00:00.0000000|0.612096774193548|0.387903225806452|\\r\\n|2017-01-30 00:00:00.0000000|0.681141439205955|0.318858560794045|\\r\\n|2017-02-06 00:00:00.0000000|0.278145695364238|0.721854304635762|\\r\\n|2017-02-13 00:00:00.0000000|0.223172628304821|0.776827371695179|\\r\\n|2017-02-20 00:00:00.0000000|0.38|0.62|\\r\\n|2017-02-27 00:00:00.0000000|0.295519001701645|0.704480998298355|\\r\\n|2017-03-06 00:00:00.0000000|0.280387770320656|0.719612229679344|\\r\\n|2017-03-13 00:00:00.0000000|0.360628154795289|0.639371845204711|\\r\\n|2017-03-20 00:00:00.0000000|0.288008028098344|0.711991971901656|\\r\\n|2017-03-27 00:00:00.0000000|0.306134969325153|0.693865030674847|\\r\\n|2017-04-03 00:00:00.0000000|0.356866537717602|0.643133462282398|\\r\\n|2017-04-10 00:00:00.0000000|0.495098039215686|0.504901960784314|\\r\\n|2017-04-17 00:00:00.0000000|0.198296836982968|0.801703163017032|\\r\\n|2017-04-24 00:00:00.0000000|0.0618811881188119|0.938118811881188|\\r\\n|2017-05-01 00:00:00.0000000|0.204657727593507|0.795342272406493|\\r\\n|2017-05-08 00:00:00.0000000|0.517391304347826|0.482608695652174|\\r\\n|2017-05-15 00:00:00.0000000|0.143667296786389|0.856332703213611|\\r\\n|2017-05-22 00:00:00.0000000|0.199122325836533|0.800877674163467|\\r\\n|2017-05-29 00:00:00.0000000|0.063468992248062|0.936531007751938|\\r\\n\\r\\n![Table showing the calculated retention and churn rates per seven days as specified in the query.](images/activity-metrics-plugin/activity-metrics-churn-and-retention.png)\\r\\n\\r\\n### Distinct values and distinct 'new' values\\r\\n\\r\\nThe next query calculates distinct values and 'new' values (IDs that didn't appear in previous time window) for week-over-week window.\\r\\n\\r\\n```\\r\\n// Generate random data of user activities\\r\\nlet _start = datetime(2017-01-02);\\r\\nlet _end = datetime(2017-05-31);\\r\\nrange _day from _start to _end  step 1d\\r\\n| extend d = tolong((_day - _start)/1d)\\r\\n| extend r = rand()+1\\r\\n| extend _users=range(tolong(d*50*r), tolong(d*50*r+200*r-1), 1)\\r\\n| mv-expand id=_users to typeof(long) limit 1000000\\r\\n//\\r\\n| evaluate activity_metrics(['id'], _day, _start, _end, 7d)\\r\\n| project _day, dcount_values, dcount_newvalues\\r\\n| render timechart\\r\\n```\\r\\n\\r\\n| _day | dcount_values | dcount_newvalues |\\r\\n|--|--|--|\\r\\n| 2017-01-02 00:00:00.0000000 | 630 | 630 |\\r\\n| 2017-01-09 00:00:00.0000000 | 738 | 575 |\\r\\n| 2017-01-16 00:00:00.0000000 | 1187 | 841 |\\r\\n| 2017-01-23 00:00:00.0000000 | 1092 | 465 |\\r\\n| 2017-01-30 00:00:00.0000000 | 1261 | 647 |\\r\\n| 2017-02-06 00:00:00.0000000 | 1744 | 1043 |\\r\\n| 2017-02-13 00:00:00.0000000 | 1563 | 432 |\\r\\n| 2017-02-20 00:00:00.0000000 | 1406 | 818 |\\r\\n| 2017-02-27 00:00:00.0000000 | 1956 | 1429 |\\r\\n| 2017-03-06 00:00:00.0000000 | 1593 | 848 |\\r\\n| 2017-03-13 00:00:00.0000000 | 1801 | 1423 |\\r\\n| 2017-03-20 00:00:00.0000000 | 1710 | 1017 |\\r\\n| 2017-03-27 00:00:00.0000000 | 1796 | 1516 |\\r\\n| 2017-04-03 00:00:00.0000000 | 1381 | 1008 |\\r\\n| 2017-04-10 00:00:00.0000000 | 1756 | 1162 |\\r\\n| 2017-04-17 00:00:00.0000000 | 1831 | 1409 |\\r\\n| 2017-04-24 00:00:00.0000000 | 1823 | 1164 |\\r\\n| 2017-05-01 00:00:00.0000000 | 1811 | 1353 |\\r\\n| 2017-05-08 00:00:00.0000000 | 1691 | 1246 |\\r\\n| 2017-05-15 00:00:00.0000000 | 1812 | 1608 |\\r\\n| 2017-05-22 00:00:00.0000000 | 1740 | 1017 |\\r\\n| 2017-05-29 00:00:00.0000000 | 960 | 756 |\\r\\n\\r\\n![Table showing the count of distinct values (dcount_values) and of new distinct values (dcount_newvalues) that didn](images/activity-metrics-plugin/activity-metrics-dcount-and-dcount-newvalues.png)\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/activity-metrics-plugin\",\"activity-metrics-plugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"ago\",\"Subtracts the given timespan from the current UTC clock time.\",\"```\\r\\nago(1h)\\r\\nago(1d)\\r\\n```\\r\\n\\r\\nLike `now()`, this function can be used multiple times\\r\\nin a statement and the UTC clock time being referenced will be the same\\r\\nfor all instantiations.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`ago(`*a_timespan*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *[a_timespan](scalar-data-types/timespan.md)*: Interval to subtract from the current UTC clock time\\r\\n(`now()`).\\r\\n\\r\\n## Returns\\r\\n\\r\\n`now() - a_timespan`\",\"All rows with a timestamp in the past hour:\\r\\n\\r\\n```\\r\\nT | where Timestamp > ago(1h)\\r\\n```\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/agofunction\",\"agofunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"arg_max\",\"Finds a row in the group that maximizes *ExprToMaximize*.\",\"[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`arg_max` `(`*ExprToMaximize*`,` *\\\\** | *ExprToReturn*  [`,` ...]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *ExprToMaximize* | string | &check; | Expression used for aggregation calculation. |\\r\\n| *ExprToReturn* | string | &check; | Expression used for returning the value when *ExprToMaximize* is maximum.  Use a `*` to return all columns of the input table. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a row in the group that maximizes *ExprToMaximize*, and the values of columns specified in *ExprToReturn*.\",'The following examples demonstrate how to use this function.\\r\\n\\r\\n**Example 1**\\r\\n\\r\\nFind the maximum latitude of a storm event in each state.\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSspVuCqUSguzc1NLMqsSlVILEqPz02s0HBKTc/M80ks0VGAsPKTE0sy8/M0FZIqFYJLEktSATqyPZtCAAAA)**\\\\]**\\r\\n\\r\\n```\\r\\nStormEvents \\r\\n| summarize arg_max(BeginLat, BeginLocation) by State\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\nThe results table displays only the first 10 rows.\\r\\n\\r\\n| State                | BeginLat | BeginLocation        |\\r\\n| -------------------- | -------- | -------------------- |\\r\\n| MISSISSIPPI          | 34.97    | BARTON               |\\r\\n| VERMONT              | 45       | NORTH TROY           |\\r\\n| AMERICAN SAMOA       | -14.2    | OFU                  |\\r\\n| HAWAII               | 22.2113  | PRINCEVILLE          |\\r\\n| MINNESOTA            | 49.35    | ARNESEN              |\\r\\n| RHODE ISLAND         | 42       | WOONSOCKET           |\\r\\n| INDIANA              | 41.73    | FREMONT              |\\r\\n| WEST VIRGINIA        | 40.62    | CHESTER              |\\r\\n| SOUTH CAROLINA       | 35.18    | LANDRUM              |\\r\\n| TEXAS                | 36.4607  | DARROUZETT           |\\r\\n| ...             | ...    | ...            |\\r\\n\\r\\n**Example 2**\\r\\n\\r\\nFind the first time an event with a direct death happened in each state showing all the columns.\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKM9ILUpVcElNLMkodsksSk0uUbBTMABKFJfm5iYWZValKiQWpcfnJlZoBJckFpWEZOam6ihoaSokVSoABUpSAQPollZPAAAA)**\\\\]**\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| where DeathsDirect > 0\\r\\n| summarize arg_max(StartTime, *) by State\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\nThe results table displays only the first 10 rows and first 3 columns.\\r\\n\\r\\n| State          | StartTime            | EndTime              | ... |\\r\\n| -------------- | -------------------- | -------------------- | --- |\\r\\n| GUAM           | 2007-01-27T11:15:00Z | 2007-01-27T11:30:00Z | ... |\\r\\n| MASSACHUSETTS  | 2007-02-03T22:00:00Z | 2007-02-04T10:00:00Z | ... |\\r\\n| AMERICAN SAMOA | 2007-02-17T13:00:00Z | 2007-02-18T11:00:00Z | ... |\\r\\n| IDAHO          | 2007-02-17T13:00:00Z | 2007-02-17T15:00:00Z | ... |\\r\\n| DELAWARE       | 2007-02-25T13:00:00Z | 2007-02-26T01:00:00Z | ... |\\r\\n| WYOMING        | 2007-03-10T17:00:00Z | 2007-03-10T17:00:00Z | ... |\\r\\n| NEW MEXICO     | 2007-03-23T18:42:00Z | 2007-03-23T19:06:00Z | ... |\\r\\n| INDIANA        | 2007-05-15T14:14:00Z | 2007-05-15T14:14:00Z | ... |\\r\\n| MONTANA        | 2007-05-18T14:20:00Z | 2007-05-18T14:20:00Z | ... |\\r\\n| LAKE MICHIGAN  | 2007-06-07T13:00:00Z | 2007-06-07T13:00:00Z | ... |\\r\\n|... | ... | ...| ... |\\r\\n\\r\\n**Example 3**\\r\\n\\r\\nThe following example demonstrates null handling.\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/kvc6bc487453a064d3c9de.northeurope/databases/new-free-database?query=H4sIAAAAAAAAA31PwQrCMAy97ytCT530osfdnKBX8SCIiHQsjEKWjrRjKH68nWwoguYdkry8l5DaxoSKUG+ld7GAEMVxY2Djycu7PaIE57kAxzGHcwYp1LrrCJUBdcA6paX5oneCyKlIHs09UT4JSssJo+KERH74K/m1ZI9WxnkpfuCP6zM/+1Ymu2QPCH3bWnF3BCvNtXWsp5cMLHKobvD6/wlU5dHuDwEAAA==)**\\\\]**\\r\\n\\r\\n```\\r\\ndatatable(Fruit: string, Color: string, Version: int) [\\r\\n    \"Apple\", \"Red\", 1,\\r\\n    \"Apple\", \"Green\", int(null),\\r\\n    \"Banana\", \"Yellow\", int(null),\\r\\n    \"Banana\", \"Green\", int(null),\\r\\n    \"Pear\", \"Brown\", 1,\\r\\n    \"Pear\", \"Green\", 2,\\r\\n]\\r\\n| summarize arg_max(Version, *) by Fruit\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n| Fruit | Version | Color |\\r\\n|--|--|--|\\r\\n| Apple | 1 | Red |\\r\\n| Banana |  | Yellow |\\r\\n| Pear | 2 | Green |',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/arg-max-aggfunction\",\"arg-max-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"arg_min\",\"Finds a row in the group that minimizes *ExprToMinimize*.\",\"[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`arg_min` `(`*ExprToMinimize*`,` *\\\\** | *ExprToReturn*  [`,` ...]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *ExprToMinimize*| string | &check; | Expression used for aggregation calculation. |\\r\\n| *ExprToReturn* | string | &check; | Expression used for returning the value when *ExprToMinimize* is minimum. Use a wildcard (*) to return all columns of the input table. |\\r\\n\\r\\n## Null handling\\r\\n\\r\\nWhen *ExprToMinimize* is null for all rows in a group, one row in the group is picked. Otherwise, rows where *ExprToMinimize* is null are ignored.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a row in the group that minimizes *ExprToMinimize*, and the value of *ExprToReturn*. Use or `*` to return the entire row.\",'The following examples demonstrate how to use this function.\\r\\n\\r\\n**Example 1**\\r\\n\\r\\nFind the minimum latitude of a storm event in each state.\\r\\n\\r\\n[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSspVuCqUSguzc1NLMqsSlVILEqPz83M03BKTc/M80ks0VGAsPKTE0sy8/M0FZIqFYJLEktSASw9sGhCAAAA)\\r\\n\\r\\n```\\r\\nStormEvents \\r\\n| summarize arg_min(BeginLat, BeginLocation) by State\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\nThe results table shown includes only the first 10 rows.\\r\\n\\r\\n| State          | BeginLat | BeginLocation |\\r\\n| -------------- | -------- | ------------- |\\r\\n| AMERICAN SAMOA | -14.3    | PAGO PAGO     |\\r\\n| CALIFORNIA     | 32.5709  | NESTOR        |\\r\\n| MINNESOTA      | 43.5     | BIGELOW       |\\r\\n| WASHINGTON     | 45.58    | WASHOUGAL     |\\r\\n| GEORGIA        | 30.67    | FARGO         |\\r\\n| ILLINOIS       | 37       | CAIRO         |\\r\\n| FLORIDA        | 24.6611  | SUGARLOAF KEY |\\r\\n| KENTUCKY       | 36.5     | HAZEL         |\\r\\n| TEXAS          | 25.92    | BROWNSVILLE   |\\r\\n| OHIO           | 38.42    | SOUTH PT      |\\r\\n| ... | ... | ... |\\r\\n\\r\\n**Example 2**\\r\\n\\r\\nFind the first time an event with a direct death happened in each state showing all of the columns.\\r\\n\\r\\n[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKM9ILUpVcElNLMkodsksSk0uUbBTMABKFJfm5iYWZValKiQWpcfnZuZpBJckFpWEZOam6ihoaSokVSoABUpSAdlWy7VPAAAA)\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| where DeathsDirect > 0\\r\\n| summarize arg_min(StartTime, *) by State\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\nThe results table shown includes only the first 10 rows and first 3 columns.\\r\\n\\r\\n| State      | StartTime            | EndTime              | ... |\\r\\n| ---------- | -------------------- | -------------------- | --- |\\r\\n| INDIANA    | 2007-01-01T00:00:00Z | 2007-01-22T18:49:00Z | ... |\\r\\n| FLORIDA    | 2007-01-03T10:55:00Z | 2007-01-03T10:55:00Z | ... |\\r\\n| NEVADA     | 2007-01-04T09:00:00Z | 2007-01-05T14:00:00Z | ... |\\r\\n| LOUISIANA  | 2007-01-04T15:45:00Z | 2007-01-04T15:52:00Z | ... |\\r\\n| WASHINGTON | 2007-01-09T17:00:00Z | 2007-01-09T18:00:00Z | ... |\\r\\n| CALIFORNIA | 2007-01-11T22:00:00Z | 2007-01-24T10:00:00Z | ... |\\r\\n| OKLAHOMA   | 2007-01-12T00:00:00Z | 2007-01-18T23:59:00Z | ... |\\r\\n| MISSOURI   | 2007-01-13T03:00:00Z | 2007-01-13T08:30:00Z | ... |\\r\\n| TEXAS      | 2007-01-13T10:30:00Z | 2007-01-13T14:30:00Z | ... |\\r\\n| ARKANSAS   | 2007-01-14T03:00:00Z | 2007-01-14T03:00:00Z | ... |\\r\\n| ... | ... | ... | ... |\\r\\n\\r\\n**Example 3**\\r\\n\\r\\nThe following example demonstrates null handling.\\r\\n\\r\\n[**Click to run query**](https://dataexplorer.azure.com/clusters/kvc6bc487453a064d3c9de.northeurope/databases/new-free-database?query=H4sIAAAAAAAAA31PwQrCMAy97ytCT530osfdnKBX8SCIiHQsjEKWjrRjKH68nWwoguYdkry8l5DaxoSKUG+ld7GAEMVxY2Djycu7PaIE57kAxzGHcwYp1LrrCJUBdcA6paX5oneCyKlIHs09UT4JSssJo+KERH74K/m1ZI9WxnkpfuCP6zM/+1Ymu2QPCH3bWnF3BCvNtXWsp5cMLHKobvD6/wlU5dHuDwEAAA==)\\r\\n\\r\\n```\\r\\ndatatable(Fruit: string, Color: string, Version: int) [\\r\\n    \"Apple\", \"Red\", 1,\\r\\n    \"Apple\", \"Green\", int(null),\\r\\n    \"Banana\", \"Yellow\", int(null),\\r\\n    \"Banana\", \"Green\", int(null),\\r\\n    \"Pear\", \"Brown\", 1,\\r\\n    \"Pear\", \"Green\", 2,\\r\\n]\\r\\n| summarize arg_min(Version, *) by Fruit\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n| Fruit | Version | Color |\\r\\n|--|--|--|\\r\\n| Apple | 1 | Red |\\r\\n| Banana |  | Yellow |\\r\\n| Pear | 1 | Brown |',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/arg-min-aggfunction\",\"arg-min-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"around\",\"Creates a `bool` value indicating if the first argument is within a range around the center value.\",\"## Syntax\\r\\n\\r\\n`around(`*value*`,`*center*`,`*delta*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*value*| scalar | &check; | A number, date, or [timespan](scalar-data-types/timespan.md) that is evaluated.|\\r\\n| *center* | scalar | &check; | A number, date, or [timespan](scalar-data-types/timespan.md) representing the center of the range defined as [(`center`-`delta`) .. (`center` + `delta`)]. |\\r\\n| *delta* | scalar| &check; | A number, or [timespan](scalar-data-types/timespan.md) representing the delta value of the range defined as [(`center`-`delta`) .. (`center` + `delta`)].|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns `true` if the value is within the range, `false` if the value is outside the range.\\r\\nReturns `null` if any of the arguments is `null`.\\r\\n\\r\\n## Example: Filtering values around a specific timestamp\\r\\n\\r\\nThe following example filters rows around specific timestamp.\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAytKzEtPVUgpUeBSAIK0ovxchZTEktSSzNxUDSMDI0NdAxBSMDC0MjDQhCgqyceuxAihpLgktUDBMDczj6tGoTwjtShVIbEovzQvRSOlRAeX+cYGmjpgPZoA56xhi5QAAAA=)**\\\\]**\\r\\n\\r\\n```\\r\\nrange dt \\r\\n    from datetime(2021-01-01 01:00) \\r\\n    to datetime(2021-01-01 02:00) \\r\\n    step 1min\\r\\n| where around(dt, datetime(2021-01-01 01:30), 1min)\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|dt|\\r\\n|---|\\r\\n|2021-01-01 01:29:00.0000000|\\r\\n|2021-01-01 01:30:00.0000000|\\r\\n|2021-01-01 01:31:00.0000000|\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/around-function\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"array_concat\",\"Concatenates many dynamic arrays to a single array.\",\"## Syntax\\r\\n\\r\\n`array_concat(`*arr1*`[`, `*arr2*, ...]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *arr1...arrN* | dynamic | &check; |Arrays to be concatenated into a dynamic array. All arguments must be dynamic arrays (see [pack_array](packarrayfunction.md)).|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a dynamic array of arrays with arr1, arr2, ... , arrN.\",\"The following example shows concatenated arrays.\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA13LMQ6DMAxG4b1S7/CPBGUJnXsWZKUuEogkcj3EiMMTmCrWT+8JpYlR8ZW8IkAzXvgpF4TnYwdX5fSB4d2SHsOfbc3sZhQaForLSCJkXfXmN+dBw91h7vyK5Jmj4uIx5hRJOwrn4Q5bQXxcmgAAAA==)**\\\\]**\\r\\n\\r\\n```\\r\\nrange x from 1 to 3 step 1\\r\\n| extend y = x * 2\\r\\n| extend z = y * 2\\r\\n| extend a1 = pack_array(x,y,z), a2 = pack_array(x, y)\\r\\n| project array_concat(a1, a2)\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|Column1|\\r\\n|---|\\r\\n|[1,2,4,1,2]|\\r\\n|[2,4,8,2,4]|\\r\\n|[3,6,12,3,6]|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/arrayconcatfunction\",\"arrayconcatfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"array_iif\",\"Element-wise iif function on dynamic arrays.\",\"Another alias: array_iff().\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`array_iif(`*ConditionArray*, *IfTrue*, *IfFalse*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *conditionArray*| dynamic | &check;| Array of *boolean* or numeric values.|\\r\\n| *ifTrue* |  | &check; | Array of values or primitive value. This will be the result when *ConditionArray* is *true*.|\\r\\n| *ifFalse* |  | &check; | Array of values or primitive value. This will be the result when *ConditionArray* is *false*.|\\r\\n\\r\\n### Notes\\r\\n\\r\\n* The result length is the length of *conditionArray*.\\r\\n* Numeric condition value is treated as *condition* != *0*.\\r\\n* Non-numeric/null condition value will have null in the corresponding index of the result.\\r\\n* Missing values (in shorter length arrays) are treated as null.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a dynamic array of the values taken either from the *IfTrue* or *IfFalse* [array] values, according to the corresponding value of the Condition array.\",\"**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUjOz0vJLMnMz7NNqcxLzM1M1oguKSpN1UlLzClO1QExYzV1FHIQsoY6RjrGILEihJiJjqmOWaymAi9XjUJqRUlqXopCUWqxbWJRUWJlfGZmmgbcFqBRQJ2aACda2uZ8AAAA)**\\\\]**\\r\\n\\r\\n```\\r\\nprint condition=dynamic([true,false,true]), l=dynamic([1,2,3]), r=dynamic([4,5,6]) \\r\\n| extend res=array_iif(condition, l, r)\\r\\n```\\r\\n\\r\\n**Results** \\r\\n\\r\\n|condition|l|r|res|\\r\\n|---|---|---|---|\\r\\n|[true, false, true]|[1, 2, 3]|[4, 5, 6]|[1, 5, 3]|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/arrayifffunction\",\"arrayifffunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"array_index_of\",\"Searches an array for the specified item, and returns its position.\",\"## Syntax\\r\\n\\r\\n`array_index_of(`*array*,*lookup*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *array*| array | &check; | Input array to search.|\\r\\n| *lookup* |scalar | &check; | Value to lookup. The value should be of type `long`, `integer`, `double`, `datetime`, `timespan`, `decimal`, `string`, `guid`, or `boolean`. |\\r\\n| *start_index* | number |  | Search start position. A negative value will offset the starting search value from the end of the array by `abs(start_index)` steps.\\r\\n| *length* | number |  | Number of values to examine. A value of -1 means unlimited length.\\r\\n| *occurrence* | The number of the occurrence. The default is 1.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a zero-based index position of lookup.\\r\\nReturns -1 if the value isn't found in the array.\\r\\nReturns *null* for irrelevant inputs (*occurrence* < 0 or  *length* < -1).\",'The following example shows the position number of specific words within the array.\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA52T7WrCMBiF/3sVB//MQoq0dV8Mr2QMielbDUuTkqRO735pmsk2dQ5LG0jhPOfkvK0iD27tsj5o3koxe536rXRThum4cj2stOdtp+j0xVv2Mums1H4CWe8LLAcYP6ykrmm/Ms0sbNmgyRCu+RzKmPe+Q2N6XUPqcHe9h/OBsZmADZTyAuUYomBVdo5lyRG3Yks1LNcbQgJW14FlBI7ykIZb79BY0yIqUDCsY0zTOfDGk0WJHVc9OQZnvpIIru881jRGSu6LC+5DvyVbnDEeDYwQvbWkBcE0ySEh768dqGR5kZ30ndQP59VptOGoeXjKbJyXI2FCu9/C/BpdbDqRH/9DrhJZG4RPzf5gH6mRkqhPf1LzI4823MsdjS2mwX1IpWIH4B6KO48KpKgl7V3CP1/Cxx8gX9yK/wT41ILVWgMAAA==)**\\\\]**\\r\\n\\r\\n```\\r\\nlet arr=dynamic([\"this\", \"is\", \"an\", \"example\", \"an\", \"example\"]);\\r\\nprint\\r\\n idx1 = array_index_of(arr,\"an\")    // lookup found in input string\\r\\n , idx2 = array_index_of(arr,\"example\",1,3) // lookup found in researched range \\r\\n , idx3 = array_index_of(arr,\"example\",1,2) // search starts from index 1, but stops after 2 values, so lookup can\\'t be found\\r\\n , idx4 = array_index_of(arr,\"is\",2,4) // search starts after occurrence of lookup\\r\\n , idx5 = array_index_of(arr,\"example\",2,-1)  // lookup found\\r\\n , idx6 = array_index_of(arr, \"an\", 1, -1, 2)   // second occurrence found in input range\\r\\n , idx7 = array_index_of(arr, \"an\", 1, -1, 3)   // no third occurrence in input array\\r\\n , idx8 = array_index_of(arr, \"an\", -3)   // negative start index will look at last 3 elements\\r\\n , idx9 = array_index_of(arr, \"is\", -4)   // negative start index will look at last 3 elements\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|idx1|idx2|idx3|idx4|idx5|idx6|idx7|idx8|idx9|\\r\\n|----|----|----|----|----|----|----|----|----|\\r\\n|2   |3   |-1  |-1   |3   |4   |-1  |4  |-1  |\\r\\n\\r\\n## See also\\r\\n\\r\\nIf you only want to check whether a value exists in an array,\\r\\nbut you aren\\'t interested in its position, you can use\\r\\n[set_has_element(`arr`, `value`)](sethaselementfunction.md). This function will improve the readability of your query. Both functions have the same performance.',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/arrayindexoffunction\",\"arrayindexoffunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"array_length\",\"Calculates the number of elements in a dynamic array.\",\"## Syntax\\r\\n\\r\\n`array_length(`*array*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *array* |dynamic | &check; | A `dynamic` value.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the number of elements in *array*, or `null` if *array* isn't an array.\",\"The following example shows the number of elements in the array.\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUgsKkqsjM9JzUsvydAoSCwqTo3PKs7P01CPNtRRMNJRMNZRUErLLy1SilXX1AQAe4KK2TMAAAA=)**\\\\]**\\r\\n\\r\\n```\\r\\nprint array_length(parse_json('[1, 2, 3, \\\"four\\\"]'))\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|print_0|\\r\\n|--|\\r\\n|4|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/arraylengthfunction\",\"arraylengthfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"array_reverse\",\"Reverses the order of the elements in a dynamic array.\",\"## Syntax\\r\\n\\r\\n`array_reverse(`*array*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*array*|  | &check;| Input array to reverse.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns an array that contains exactly the same elements as the input array, but in reverse order.\",'This example shows an array of words reversed.\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUgsKrJNqcxLzM1M1ohWKsnILFbSUVCCkIl5IDK1IjG3ICdVKVZTgZerRqGgKD8rNblEISi1uDSnxBaoP7Eyvii1LLWoOFUDyNMEAKks9PlYAAAA)**\\\\]**\\r\\n\\r\\n```\\r\\nprint arr=dynamic([\"this\", \"is\", \"an\", \"example\"]) \\r\\n| project Result=array_reverse(arr)\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|Result|\\r\\n|---|\\r\\n|[\"example\",\"an\",\"is\",\"this\"]|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/array-reverse-function\",\"array-reverse-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"array_rotate_left\",\"Rotates values inside a `dynamic` array to the left.\",\"## Syntax\\r\\n\\r\\n`array_rotate_left(`*array*, *rotate_count*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*array* | dynamic | &check;| Input array to rotate, must be dynamic array.|\\r\\n|*rotate_count*| integer | &check;| Number of positions that array elements will be rotated to the left. If the value is negative, the elements will be rotated to the right.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nDynamic array containing the same amount of the elements as in original array, where each element was rotated according to *rotate_count*.\\r\\n\\r\\n## See also\\r\\n\\r\\n* For rotating array to the right, see [array_rotate_right()](array_rotate_rightfunction.md).\\r\\n* For shifting array to the left, see [array_shift_left()](array_shift_leftfunction.md).\\r\\n* For shifting array to the right, see [array_shift_right()](array_shift_rightfunction.md).\",\"* Rotating to the left by two positions:\\r\\n\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUgsKrJNqcxLzM1M1og21DHSMdYx0TGN1eSqUUitKEnNSwGpiC/KL0ksSU2xBbITK6G8+JzUtBINoIiOgpEmACPTVOVNAAAA)**\\\\]**\\r\\n\\r\\n```\\r\\nprint arr=dynamic([1,2,3,4,5])\\r\\n| extend arr_rotated=array_rotate_left(arr, 2)\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|arr|arr_rotated|\\r\\n|---|---|\\r\\n|[1,2,3,4,5]|[3,4,5,1,2]|\\r\\n\\r\\n* Rotating to the right by two positions by using negative rotate_count value:\\r\\n\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUgsKrJNqcxLzM1M1og21DHSMdYx0TGN1eSqUUitKEnNSwGpiC/KL0ksSU2xBbITK6G8+JzUtBINoIiOgq6RJgCXfX6MTgAAAA==)**\\\\]**\\r\\n\\r\\n```\\r\\nprint arr=dynamic([1,2,3,4,5])\\r\\n| extend arr_rotated=array_rotate_left(arr, -2)\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|arr|arr_rotated|\\r\\n|---|---|\\r\\n|[1,2,3,4,5]|[4,5,1,2,3]|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/array_rotate_leftfunction\",\"array_rotate_leftfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"array_rotate_right\",\"Rotates values inside a `dynamic` array to the right.\",\"## Syntax\\r\\n\\r\\n`array_rotate_right(`*array*, *rotate_count*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*array* | dynamic | &check;| Input array to rotate, must be dynamic array.|\\r\\n|*rotate_count*| integer | &check;| Number of positions that array elements will be rotated to the right. If the value is negative, the elements will be rotated to the Left.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nDynamic array containing the same amount of the elements as in the original array, where each element was rotated according to *rotate_count*.\\r\\n\\r\\n## See also\\r\\n\\r\\n* For rotating array to the left, see [array_rotate_left()](array_rotate_leftfunction.md).\\r\\n* For shifting array to the left, see [array_shift_left()](array_shift_leftfunction.md).\\r\\n* For shifting array to the right, see [array_shift_right()](array_shift_rightfunction.md).\",\"* Rotating to the right by two positions:\\r\\n\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUgsKrJNqcxLzM1M1og21DHSMdYx0TGN1eSqUUitKEnNSwGpiC/KL0ksSU2xBbITK6G8+KLM9IwSDaCQjoKRJgBslCYKTgAAAA==)**\\\\]**\\r\\n\\r\\n```\\r\\nprint arr=dynamic([1,2,3,4,5])\\r\\n| extend arr_rotated=array_rotate_right(arr, 2)\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|arr|arr_rotated|\\r\\n|---|---|\\r\\n|[1,2,3,4,5]|[4,5,1,2,3]|\\r\\n\\r\\n* Rotating to the left by two positions by using negative rotate_count value:\\r\\n\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUgsKrJNqcxLzM1M1og21DHSMdYx0TGN1eSqUUitKEnNSwGpiC/KL0ksSU2xBbITK6G8+KLM9IwSDaCQjoKukSYA0VPyak8AAAA=)**\\\\]**\\r\\n\\r\\n**Results**\\r\\n\\r\\n```\\r\\nprint arr=dynamic([1,2,3,4,5])\\r\\n| extend arr_rotated=array_rotate_right(arr, -2)\\r\\n```\\r\\n\\r\\n|arr|arr_rotated|\\r\\n|---|---|\\r\\n|[1,2,3,4,5]|[3,4,5,1,2]|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/array_rotate_rightfunction\",\"array_rotate_rightfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"array_shift_left\",\"Shifts the values inside a `dynamic` array to the left.\",\"## Syntax\\r\\n\\r\\n`array_shift_left(`*array*, *shift_count* `[,` *fill_value* ]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*array* | dynamic |&check; | Input array to shift, must be dynamic array.|\\r\\n|*shift_count* | integer | &check; | Number of positions that array elements will be shifted to the left. If the value is negative, the elements will be shifted to the right. |\\r\\n|*fill_value* | scalar | &check; | Value used for inserting elements instead of the ones that were shifted and removed. The default is null or an empty string depending on the *array* type.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a dynamic array containing the same number of elements as in the original array. Each element has been shifted according to *shift_count*. New elements that are added in place of removed elements will have a value of *fill_value*.\\r\\n\\r\\n## See also\\r\\n\\r\\n* For shifting array right, see [array_shift_right()](array_shift_rightfunction.md).\\r\\n* For rotating array right, see [array_rotate_right()](array_rotate_rightfunction.md).\\r\\n* For rotating array left, see [array_rotate_left()](array_rotate_leftfunction.md).\",\"* Shifting to the left by two positions:\\r\\n\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUgsKrJNqcxLzM1M1og21DHSMdYx0TGN1eTlqlFIrShJzUsBKYkvzshMK7EFshIrIez4nNS0Eg2ggI6CkSYADEKYSUsAAAA=)**\\\\]**\\r\\n\\r\\n```\\r\\nprint arr=dynamic([1,2,3,4,5])\\r\\n| extend arr_shift=array_shift_left(arr, 2)\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|`arr`|`arr_shift`|\\r\\n|---|---|\\r\\n|[1,2,3,4,5]|[3,4,5,null,null]|\\r\\n\\r\\n* Shifting to the left by two positions and adding default value:\\r\\n\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUgsKrJNqcxLzM1M1og21DHSMdYx0TGN1eTlqlFIrShJzUsBKYkvzshMK7EFshIrIez4nNS0Eg2ggI6CkY6CrqEmAA+qvHJPAAAA)**\\\\]**\\r\\n\\r\\n```\\r\\nprint arr=dynamic([1,2,3,4,5])\\r\\n| extend arr_shift=array_shift_left(arr, 2, -1)\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|`arr`|`arr_shift`|\\r\\n|---|---|\\r\\n|[1,2,3,4,5]|[3,4,5,-1,-1]|\\r\\n\\r\\n* Shifting to the right by two positions by using negative *shift_count* value:\\r\\n\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUgsKrJNqcxLzM1M1og21DHSMdYx0TGN1eTlqlFIrShJzUsBKYkvzshMK7EFshIrIez4nNS0Eg2ggI6CrhEQG2oCAIeuighQAAAA)**\\\\]**\\r\\n\\r\\n```\\r\\nprint arr=dynamic([1,2,3,4,5])\\r\\n| extend arr_shift=array_shift_left(arr, -2, -1)\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|`arr`|`arr_shift`|\\r\\n|---|---|\\r\\n|[1,2,3,4,5]|[-1,-1,1,2,3]|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/array_shift_leftfunction\",\"array_shift_leftfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"array_shift_right\",\"Shifts the values inside a dynamic array to the right.\",\"## Syntax\\r\\n\\r\\n`array_shift_right(`*array*, *shift_count* [, *fill_value* ]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*array* | dynamic |&check; | Input array to shift, must be dynamic array.|\\r\\n|*shift_count* | integer | &check; | Number of positions that array elements will be shifted to the right. If the value is negative, the elements will be shifted to the left. |\\r\\n|*fill_value* | scalar | &check; | Value used for inserting elements instead of the ones that were shifted and removed. The default is null or an empty string depending on the *array* type.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a dynamic array containing the same amount of the elements as in the original array. Each element has been shifted according to *shift_count*. New elements that are added instead of the removed elements will have a value of *fill_value*.\\r\\n\\r\\n## See also\\r\\n\\r\\n* For shifting array left, see [array_shift_left()](array_shift_leftfunction.md).\\r\\n* For rotating array right, see [array_rotate_right()](array_rotate_rightfunction.md).\\r\\n* For rotating array left, see [array_rotate_left()](array_rotate_leftfunction.md).\",\"* Shifting to the right by two positions:\\r\\n\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUgsKrJNqcxLzM1M1og21DHSMdYx0TGN1eTlqlFIrShJzUsBKYkvzshMK7EFshIrIez4osz0jBINoIiOgpEmAKRlW6FMAAAA)**\\\\]**\\r\\n\\r\\n```\\r\\nprint arr=dynamic([1,2,3,4,5])\\r\\n| extend arr_shift=array_shift_right(arr, 2)\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|arr|arr_shift|\\r\\n|---|---|\\r\\n|[1,2,3,4,5]|[null,null,1,2,3]|\\r\\n\\r\\n* Shifting to the right by two positions and adding a default value:\\r\\n\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUgsKrJNqcxLzM1M1og21DHSMdYx0TGN1eTlqlFIrShJzUsBKYkvzshMK7EFshIrIez4osz0jBINoIiOgpGOgq6hJgBHJWeJUAAAAA==)**\\\\]**\\r\\n\\r\\n```\\r\\nprint arr=dynamic([1,2,3,4,5])\\r\\n| extend arr_shift=array_shift_right(arr, 2, -1)\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|arr|arr_shift|\\r\\n|---|---|\\r\\n|[1,2,3,4,5]|[-1,-1,1,2,3]|\\r\\n\\r\\n* Shifting to the left by two positions by using a negative shift_count value:\\r\\n\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUgsKrJNqcxLzM1M1og21DHSMdYx0TGN1eTlqlFIrShJzUsBKYkvzshMK7EFshIrIez4osz0jBINoIiOgq4REBtqAgCqvHZwUQAAAA==)**\\\\]**\\r\\n\\r\\n```\\r\\nprint arr=dynamic([1,2,3,4,5])\\r\\n| extend arr_shift=array_shift_right(arr, -2, -1)\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|arr|arr_shift|\\r\\n|---|---|\\r\\n|[1,2,3,4,5]|[3,4,5,-1,-1]|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/array_shift_rightfunction\",\"array_shift_rightfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"array_slice\",\"Extracts a slice of a dynamic array.\",\"## Syntax\\r\\n\\r\\n`array_slice`(*array*, *start*, *end*)\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *array* | dynamic | &check; | Input array to extract the slice.|\\r\\n| *start*| number | &check; | Start index of the slice (inclusive). Negative values are converted to `array_length`+`start`.|\\r\\n| *end*| number | &check; | Last index of the slice. (inclusive). Negative values are converted to `array_length`+`start`.|\\r\\n\\r\\n> [!NOTE]\\r\\n> Out of bounds indices are ignored.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a dynamic array of the values in the range [`start..end`] from `array`.\",\"The following examples return a slice of the array.\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUgsKrJNqcxLzM1M1og21DHSMY7VVOCqUUitKEnNS1EozslMTk2xBapKrIwHczSAbB0FQx0FI00AeoUyQ0IAAAA=)**\\\\]**\\r\\n\\r\\n```\\r\\nprint arr=dynamic([1,2,3]) \\r\\n| extend sliced=array_slice(arr, 1, 2)\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|`arr`|`sliced`|\\r\\n|---|---|\\r\\n|[1,2,3]|[2,3]|\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUgsKrJNqcxLzM1M1og21DHSMdYx0TGN1VTgqlFIrShJzUtRKM7JTE5NsQWqTKyMB3M0gGwdBSMdBV1DTQAv2T4vRwAAAA==)**\\\\]**\\r\\n\\r\\n```\\r\\nprint arr=dynamic([1,2,3,4,5]) \\r\\n| extend sliced=array_slice(arr, 2, -1)\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|`arr`|sliced|\\r\\n|---|---|\\r\\n|[1,2,3,4,5]|[3,4,5]|\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUgsKrJNqcxLzM1M1og21DHSMdYx0TGN1VTgqlFIrShJzUtRKM7JTE5NsQWqTKyMB3M0gGwdBV1jIDbSBABajMjTSAAAAA==)**\\\\]**\\r\\n\\r\\n```\\r\\nprint arr=dynamic([1,2,3,4,5]) \\r\\n| extend sliced=array_slice(arr, -3, -2)\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|`arr`|sliced|\\r\\n|---|---|\\r\\n|[1,2,3,4,5]|[3,4]|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/arrayslicefunction\",\"arrayslicefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"array_sort_asc\",\"Receives one or more arrays. Sorts the first array in ascending order. Orders the remaining arrays to match the reordered first array.\",'## Syntax\\r\\n\\r\\n`array_sort_asc(`*array1*[, ..., *argumentN*]`)`\\r\\n\\r\\n`array_sort_asc(`*array1*[, ..., *argumentN*]`,`*nulls_last*`)`\\r\\n\\r\\nIf *nulls_last* isn\\'t provided, a default value of `true` is used.\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*array1...arrayN*|  | &check; | Input arrays.|\\r\\n| *nulls_last* |bool |  | Indicating whether `null`s should be last.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the same number of arrays as in the input, with the first array sorted in ascending order, and the remaining arrays ordered to match the reordered first array.\\r\\n\\r\\n`null` will be returned for every array that differs in length from the first one.\\r\\n\\r\\nIf an array contains elements of different types, it will be sorted in the following order:\\r\\n\\r\\n* Numeric, `datetime`, and `timespan` elements\\r\\n* String elements\\r\\n* Guid elements\\r\\n* All other elements\\r\\n\\r\\n## Example 1 - Sorting two arrays\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA8tJLVFILCpKrDRUsFVIqcxLzM1M1og21DHWMdEx1TGK1bTmyoEpMUJWopSopKOUBMTJQJwCxKlKIMUFRZl5UOXxxflFJfGJxckaEAt0IIZoAgAts93scwAAAA==)**\\\\]**\\r\\n\\r\\n```\\r\\nlet array1 = dynamic([1,3,4,5,2]);\\r\\nlet array2 = dynamic([\"a\",\"b\",\"c\",\"d\",\"e\"]);\\r\\nprint array_sort_asc(array1,array2)\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|`array1_sorted`|`array2_sorted`|\\r\\n|---|---|\\r\\n|[1,2,3,4,5]|[\"a\",\"e\",\"b\",\"c\",\"d\"]|\\r\\n\\r\\n> [!NOTE]\\r\\n> The output column names are generated automatically, based on the arguments to the function. To assign different names to the output columns, use the following syntax: `... | extend (out1, out2) = array_sort_asc(array1,array2)`\\r\\n\\r\\n## Example 2 - Sorting substrings\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA8tJLVHwS8xNLVawVVDyys/I0wlILM3RcU/NL0pP1QnKzEvPV7LmygGqCs4vKklNgaktLilKTiyJTywqSqzUAJPxxUAF8YnFyRrFBTmZJRpglToKSjpKmpoQypqroCgzr0ShKLW4NKcEaAiSkQD+ChdoiAAAAA==)**\\\\]**\\r\\n\\r\\n```\\r\\nlet Names = \"John,Paul,George,Ringo\";\\r\\nlet SortedNames = strcat_array(array_sort_asc(split(Names, \",\")), \",\");\\r\\nprint result = SortedNames\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|`result`|\\r\\n|---|\\r\\n|George,John,Paul,Ringo|\\r\\n\\r\\n## Example 3 - Combining summarize and array_sort_asc\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA5WR0WoDIRBF3/crJC9ZYQO7tiU00C8JQSYqiY2uy4yhpPTjq23sFmIK1ZdxOPdy5WqI6e6daVXwHka9oYh2PHTs+pbRerPREE0eOnYmg9IWjDfbhqWzVEcf9LJLY0Fb0Q/Pq369Gp543i+yclh037yjL7jG96LCa4tXwQ0varw/FcVtnscKj/5uHrGu8NObvpun9t+//B9mXvzTP/O75oPROZWF9t2wjFIEPxF7YR5ORjpLsf3dJv8pt8pwtr+UmpP1hOHVqFg2s1baUaojhjG4cLAKnAyoDSZLQISLpIBRAql2jjSL+XbYfQJov9dSfAIAAA==)**\\\\]**\\r\\n\\r\\n```\\r\\ndatatable(command:string, command_time:datetime, user_id:string)\\r\\n[\\r\\n    \\'chmod\\',   datetime(2019-07-15),   \"user1\",\\r\\n    \\'ls\\',      datetime(2019-07-02),   \"user1\",\\r\\n    \\'dir\\',     datetime(2019-07-22),   \"user1\",\\r\\n    \\'mkdir\\',   datetime(2019-07-14),   \"user1\",\\r\\n    \\'rm\\',      datetime(2019-07-27),   \"user1\",\\r\\n    \\'pwd\\',     datetime(2019-07-25),   \"user1\",\\r\\n    \\'rm\\',      datetime(2019-07-23),   \"user2\",\\r\\n    \\'pwd\\',     datetime(2019-07-25),   \"user2\",\\r\\n]\\r\\n| summarize timestamps = make_list(command_time), commands = make_list(command) by user_id\\r\\n| project user_id, commands_in_chronological_order = array_sort_asc(timestamps, commands)[1]\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|`user_id`|`commands_in_chronological_order`|\\r\\n|---|---|\\r\\n|user1|[<br>  \"ls\",<br>  \"mkdir\",<br>  \"chmod\",<br>  \"dir\",<br>  \"pwd\",<br>  \"rm\"<br>]|\\r\\n|user2|[<br>  \"rm\",<br>  \"pwd\"<br>]|\\r\\n\\r\\n> [!NOTE]\\r\\n> If your data may contain `null` values, use [make_list_with_nulls](make-list-with-nulls-aggfunction.md) instead of [make_list](makelist-aggfunction.md).\\r\\n\\r\\n## Example 4 - Controlling location of `null` values\\r\\n\\r\\nBy default, `null` values are put last in the sorted array. However, you can control it explicitly by adding a `bool` value as the last argument to `array_sort_asc()`.\\r\\n\\r\\nExample with default behavior:\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUgsKkqsjC/OLyqJTyxO1kipzEvMzUzWiM4rzcnRUUrKKU1V0lGqTM3JyS8HMtKLUlPzlHRAkrGamgDOvUliQgAAAA==)**\\\\]**\\r\\n\\r\\n```\\r\\nprint array_sort_asc(dynamic([null,\"blue\",\"yellow\",\"green\",null]))\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|`print_0`|\\r\\n|---|\\r\\n|[\"blue\",\"green\",\"yellow\",null,null]|\\r\\n\\r\\nExample with non-default behavior:\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAxXJUQqAIAwA0KvIvhR2owhZtkJYMzYlvH319+DdVrUHMqOZvVnP5CXuU+mqJS46RBA2GQwIk0Xa8+E0ZgX8c00YDhLn9ALNIgvjSQAAAA==)**\\\\]**\\r\\n\\r\\n```\\r\\nprint array_sort_asc(dynamic([null,\"blue\",\"yellow\",\"green\",null]), false)\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|`print_0`|\\r\\n|---|\\r\\n|[null,null,\"blue\",\"green\",\"yellow\"]|\\r\\n\\r\\n## See also\\r\\n\\r\\nTo sort the first array in descending order, use [array_sort_desc()](arraysortdescfunction.md).',\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/arraysortascfunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"array_sort_desc\",\"Receives one or more arrays. Sorts the first array in descending order. Orders the remaining arrays to match the reordered first array.\",'## Syntax\\r\\n\\r\\n`array_sort_desc(`*array1*[, ..., *argumentN*]`)`\\r\\n\\r\\n`array_sort_desc(`*array1*[, ..., *argumentN*]`,`*nulls_last*`)`\\r\\n\\r\\nIf *nulls_last* isn\\'t provided, a default value of `true` is used.\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*array1...arrayN*|  | &check; | Input arrays.|\\r\\n| *nulls_last* |bool |  | Indicating whether `null`s should be last.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the same number of arrays as in the input, with the first array sorted in ascending order, and the remaining arrays ordered to match the reordered first array.\\r\\n\\r\\n`null` will be returned for every array that differs in length from the first one.\\r\\n\\r\\nIf an array contains elements of different types, it will be sorted in the following order:\\r\\n\\r\\n* Numeric, `datetime`, and `timespan` elements\\r\\n* String elements\\r\\n* Guid elements\\r\\n* All other elements\\r\\n\\r\\n## Example 1 - Sorting two arrays\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA8tJLVFILCpKrDRUsFVIqcxLzM1M1og21DHWMdEx1TGK1bTmyoEpMUJWopSopKOUBMTJQJwCxKlKIMUFRZl5UOXxxflFJfEpqcXJGhAbdCCmaAIAmTiTMnQAAAA=)**\\\\]**\\r\\n\\r\\n```\\r\\nlet array1 = dynamic([1,3,4,5,2]);\\r\\nlet array2 = dynamic([\"a\",\"b\",\"c\",\"d\",\"e\"]);\\r\\nprint array_sort_desc(array1,array2)\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|`array1_sorted`|`array2_sorted`|\\r\\n|---|---|\\r\\n|[5,4,3,2,1]|[\"d\",\"c\",\"b\",\"e\",\"a\"]|\\r\\n\\r\\n> [!NOTE]\\r\\n> The output column names are generated automatically, based on the arguments to the function. To assign different names to the output columns, use the following syntax: `... | extend (out1, out2) = array_sort_desc(array1,array2)`\\r\\n\\r\\n## Example 2 - Sorting substrings\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA8tJLVHwS8xNLVawVVDyys/I0wlILM3RcU/NL0pP1QnKzEvPV7LmygGqCs4vKklNgaktLilKTiyJTywqSqzUAJPxxUAF8SmpxckaxQU5mSUaYKU6Cko6SpqaEMqaq6AoM69EoSi1uDSnBGgKkpkA+RSmRokAAAA=)**\\\\]**\\r\\n\\r\\n```\\r\\nlet Names = \"John,Paul,George,Ringo\";\\r\\nlet SortedNames = strcat_array(array_sort_desc(split(Names, \",\")), \",\");\\r\\nprint result = SortedNames\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|`result`|\\r\\n|---|\\r\\n|Ringo,Paul,John,George|\\r\\n\\r\\n## Example 3 - Combining summarize and array_sort_desc\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA5WR0WoDIRBF3/crJC9ZYQO7tiU00C8JQYwOiY2uy4yhpPTjq23sFmIK1ZdxOPdy5RoV0907aHXwXo1mQxHteOjY9S2j9bAxKkIeOnYmQGkLxpttw9JZ6qMPZtmlsaCt6IfnVb9eDU887xdZOSy6b97RF1zje1HhjcWr4IYXNd6fiuI2z2OFR383j1hX+OnN3M1T++9f/g8zL/7pn/ld88HonMpC+w4soxSVn4i9MK9OIJ2l2P5uk/+UW2U4219Kzcl6wvAKOpbNrJV2lPqIYQwuHKxWTgY0gMlSIaqLpIBRGiDdzplmNd8Ou0832AsNfQIAAA==)**\\\\]**\\r\\n\\r\\n```\\r\\ndatatable(command:string, command_time:datetime, user_id:string)\\r\\n[\\r\\n    \\'chmod\\',   datetime(2019-07-15),   \"user1\",\\r\\n    \\'ls\\',      datetime(2019-07-02),   \"user1\",\\r\\n    \\'dir\\',     datetime(2019-07-22),   \"user1\",\\r\\n    \\'mkdir\\',   datetime(2019-07-14),   \"user1\",\\r\\n    \\'rm\\',      datetime(2019-07-27),   \"user1\",\\r\\n    \\'pwd\\',     datetime(2019-07-25),   \"user1\",\\r\\n    \\'rm\\',      datetime(2019-07-23),   \"user2\",\\r\\n    \\'pwd\\',     datetime(2019-07-25),   \"user2\",\\r\\n]\\r\\n| summarize timestamps = make_list(command_time), commands = make_list(command) by user_id\\r\\n| project user_id, commands_in_chronological_order = array_sort_desc(timestamps, commands)[1]\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|`user_id`|`commands_in_chronological_order`|\\r\\n|---|---|\\r\\n|user1|[<br>  \"rm\",<br>  \"pwd\",<br>  \"dir\",<br>  \"chmod\",<br>  \"mkdir\",<br>  \"ls\"<br>]|\\r\\n|user2|[<br>  \"pwd\",<br>  \"rm\"<br>]|\\r\\n\\r\\n> [!NOTE]\\r\\n> If your data may contain `null` values, use [make_list_with_nulls](make-list-with-nulls-aggfunction.md) instead of [make_list](makelist-aggfunction.md).\\r\\n\\r\\n## Example 4 - Controlling location of `null` values\\r\\n\\r\\nBy default, `null` values are put last in the sorted array. However, you can control it explicitly by adding a `bool` value as the last argument to `array_sort_desc()`.\\r\\n\\r\\nExample with default behavior:\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUgsKkqsjC/OLyqJT0ktTtZIqcxLzM1M1ojOK83J0VFKyilNVdJRqkzNyckvBzLSi1JT85R0QJKxmpoAGsR2QUMAAAA=)**\\\\]**\\r\\n\\r\\n```\\r\\nprint array_sort_desc(dynamic([null,\"blue\",\"yellow\",\"green\",null]))\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|`print_0`|\\r\\n|---|\\r\\n|[\"yellow\",\"green\",\"blue\",null,null]|\\r\\n\\r\\nExample with non-default behavior:\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/?query=H4sIAAAAAAAAAxXJUQqAIAwA0KvIvhR2owhZukKYM6YS3r76e/BuKzocmdGKvdmImXvyeSnVkvymUwThkMmAsFikPR8uY1bAP/eA7iTpHF4VdlwBSgAAAA==)**\\\\]**\\r\\n\\r\\n```\\r\\nprint array_sort_desc(dynamic([null,\"blue\",\"yellow\",\"green\",null]), false)\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|`print_0`|\\r\\n|---|\\r\\n|[null,null,\"yellow\",\"green\",\"blue\"]|\\r\\n\\r\\n## See also\\r\\n\\r\\nTo sort the first array in ascending order, use [array_sort_asc()](arraysortascfunction.md).',\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/arraysortdescfunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"array_split\",\"Splits an array to multiple arrays according to the split indices and packs the generated array in a dynamic array.\",\"## Syntax\\r\\n\\r\\n`array_split`(*array*, *`indices`*)\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *array*| dynamic| &check; |Array to split.|\\r\\n| *indices* | integer | &check;| Split indices (zero based). This can be a single integer or a dynamic array of integers. Negative values are converted to `array_length` + `value`.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a dynamic array containing N+1 arrays with the values in the range `[0..i1), [i1..i2), ... [iN..array_length)` from `array`, where N is the number of input indices and `i1...iN` are the indices.\",\"This following example shows how to split and array.\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/?query=H4sIAAAAAAAAAysoyswrUUgsKrJNqcxLzM1M1og21DHSMdYx0TGN1VTgqlFIrShJzUsBKYkvLsjJLLEFshIrIWwNIFtHwUgTAB7YikBGAAAA)**\\\\]**\\r\\n\\r\\n```\\r\\nprint arr=dynamic([1,2,3,4,5]) \\r\\n| extend arr_split=array_split(arr, 2)\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|`arr`|`arr_split`|\\r\\n|---|---|\\r\\n|[1,2,3,4,5]|[[1,2],[3,4,5]]|\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/?query=H4sIAAAAAAAAAysoyswrUUgsKrJNqcxLzM1M1og21DHSMdYx0TGN1VTgqlFIrShJzUsBKYkvLsjJLLEFshIrIWwNIFtHAUmncaymJgD5vl9PUwAAAA==)**\\\\]**\\r\\n\\r\\n```\\r\\nprint arr=dynamic([1,2,3,4,5]) \\r\\n| extend arr_split=array_split(arr, dynamic([1,3]))\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|`arr`|`arr_split`|\\r\\n|---|---|\\r\\n|[1,2,3,4,5]|[[1],[2,3],[4,5]]|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/arraysplitfunction\",\"arraysplitfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"array_sum\",\"Calculates the sum of elements in a dynamic array.\",\"## Syntax\\r\\n\\r\\n`array_sum`(*array*)\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *array*| | &check;| Array used for input.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a double type value with the sum of the elements of the array.\\r\\n\\r\\n> [!NOTE]\\r\\n> If the array contains elements of non-numeric types, the result is `null`.\",\"This following example shows the sum of an array.\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUgsKrJNqcxLzM1M1og21DHSMdYxidVU4OWqUUitKEnNSwGpiC8uzbUF0omVIJYGkKUJANbCqMA+AAAA)**\\\\]**\\r\\n\\r\\n```\\r\\nprint arr=dynamic([1,2,3,4]) \\r\\n| extend arr_sum=array_sum(arr)\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|`arr`|`arr_sum`|\\r\\n|---|---|\\r\\n|[1,2,3,4]|10|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/array-sum-function\",\"array-sum-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"as\",\"Binds a name to the operator's input tabular expression. This allows the query to reference the value of the tabular expression multiple times without breaking the query and binding a name through the [let statement](letstatement.md).\",\"To optimize multiple uses of the `as` operator within a single query, see [Named expressions](../../named-expressions.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `as` [`hint.materialized` `=` `true`] *Name*\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*T*| tabular | &check; |  A tabular expression.|\\r\\n| *Name*| string| &check; | A temporary name for the tabular expression|\\r\\n| * `hint.materialized`| bool |  | If set to `true`, the value of the tabular expression will be  materialized as if it was wrapped by a [materialize()](./materializefunction.md) function call.|\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * The name given by `as` will be used in the `withsource=` column of [union](./unionoperator.md), the `source_` column of [find](./findoperator.md), and the `$table` column of [search](./searchoperator.md).\\r\\n> * The tabular expression named using the operator in a [join](./joinoperator.md)'s outer tabular input (`$left`) can also be used in the join's tabular inner input (`$right`).\",'In the following 2 example the union\\'s generated TableName column will consist of \\'T1\\' and \\'T2\\'\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/?query=H4sIAAAAAAAAAytKzEtPVahQSCvKz1UwVCjJVzA0UCguSS0AcrhqFBKLFULAjNK8zPw8hfLMkozi/NKi5FTbkMSknFS/xNxUBY0iPGZAjDDSBAAgKK6faAAAAA==)**\\\\]**\\r\\n\\r\\n```\\r\\nrange x from 1 to 10 step 1 \\r\\n| as T1 \\r\\n| union withsource=TableName (range x from 1 to 10 step 1 | as T2)\\r\\n```\\r\\n\\r\\nAlternatively, you can write the same example, as follows:\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/?query=H4sIAAAAAAAAAyvNy8zPUyjPLMkozi8tSk61DUlMykn1S8xNVdAoSsxLT1WoUEgrys9VMFQoyVcwNFAoLkktAHJqFBKLFUIMNXWIUWakCQB5tG07ZwAAAA==)**\\\\]**\\r\\n\\r\\n```\\r\\nunion withsource=TableName (range x from 1 to 10 step 1 | as T1), (range x from 1 to 10 step 1 | as T2)\\r\\n```\\r\\n\\r\\nIn the following example, the \\'left side\\' of the join will be:\\r\\n`MyLogTable` filtered by `type == \"Event\"` and `Name == \"Start\"`\\r\\nand the \\'right side\\' of the join will be:\\r\\n`MyLogTable` filtered by `type == \"Event\"` and `Name == \"Stop\"`\\r\\n\\r\\n```\\r\\nMyLogTable  \\r\\n| where type == \"Event\"\\r\\n| as T\\r\\n| where Name == \"Start\"\\r\\n| join (\\r\\n    T\\r\\n    | where Name == \"Stop\"\\r\\n) on ActivityId\\r\\n```',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/asoperator\",\"asoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"asin\",\"Calculates the angle whose sine is the specified number (the inverse operation of [`sin()`](sinfunction.md)).\",\"## Syntax\\r\\n\\r\\n`asin(`*x*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*x* |  | &check;| A real number in range [-1, 1].|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the value of the arc sine of `x`. Returns `null` if `x` < -1 or `x` > 1.\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/asinfunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"assert\",\"Checks for a condition. If the condition is false, outputs error messages and fails the query.\",\"## Syntax\\r\\n\\r\\n`assert(`*condition*`, `*message*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *condition* | expression | &check; |Conditional expression to evaluate. If the condition is `false`, the specified message is used to report an error. If the condition is `true`, it returns `true` as an evaluation result. Condition must be evaluated to constant during the query analysis phase.|\\r\\n| *message* | string | &check; | The message used if assertion is evaluated to `false`.|\\r\\n\\r\\n> [!NOTE]\\r\\n> `condition` must be evaluated to constant during the query analysis phase. In other words, it can be constructed from other expressions referencing constants, and can't be bound to row-context.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns `true` if the condition is `true`. \\r\\nRaises a semantic error if the condition is evaluated to `false`.\",\"The following query defines a function `checkLength()` that checks input string length, and uses `assert` to validate input length parameter (checks that it's greater than zero).\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/?query=H4sIAAAAAAAAA02OywrCMBBF9/mKoZsmEMH6hEr9Av9AXKTtkBTjVJIpgo9/N60izmzuYs6d45GhcdicD0iWHVQgPVLpe7IaYhk5dGSVeAhIY2LEwOMB7GGuIftClyEy1Ag2oGEMwM4Q3DH0mQJD7cSmpsTJqBKagnjtRGs4be1RdnQd+PfsOAF5sVjm+hNX6802FyfxhJvDgP/Go0016spZoTRMTeoNUTSJPdYAAAA=)**\\\\]**\\r\\n\\r\\n```\\r\\nlet checkLength = (len:long, s:string)\\r\\n{\\r\\n    assert(len > 0, \\\"Length must be greater than zero\\\") and\\r\\n    strlen(s) > len\\r\\n};\\r\\ndatatable(input:string)\\r\\n[\\r\\n    '123',\\r\\n    '4567'\\r\\n]\\r\\n| where checkLength(len=long(-1), input)\\r\\n```\\r\\n\\r\\nRunning this query yields an error:\\r\\n`assert() has failed with message: 'Length must be greater than zero'`\\r\\n\\r\\nExample of running with valid `len` input:\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/?query=H4sIAAAAAAAAA02OzQrCMBCE73mKoZc2kINaf6BSn8A3EA9pXZJiTCXZIvjz7qZVxN3LHOabGUeM1lJ73pM3bFGjcOQr13ujEKvIofNGiodAOh0jBR4N2GGmkH2hyxAZDcEE0kwBbLXHnUKfSWh/QkpJTBFlwpIQr604aU7fOCo6fx34V3SYivL5oszVRy5X600ujuKJm6VA/2vHJXWpMEXIN3+iHkjLAAAA)**\\\\]**\\r\\n\\r\\n```\\r\\nlet checkLength = (len:long, s:string)\\r\\n{\\r\\n    assert(len > 0, \\\"Length must be greater than zero\\\") and strlen(s) > len\\r\\n};\\r\\ndatatable(input:string)\\r\\n[\\r\\n    '123',\\r\\n    '4567'\\r\\n]\\r\\n| where checkLength(len=3, input)\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|input|\\r\\n|---|\\r\\n|4567|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/assert-function\",\"assert-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"atan\",\"Returns the angle whose tangent is the specified number (the inverse operation of [`tan()`](tanfunction.md)).\",\"## Syntax\\r\\n\\r\\n`atan(`*x*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *x*: A real number.\\r\\n\\r\\n## Returns\\r\\n\\r\\n* The value of the arc tangent of `x`\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/atanfunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"atan2\",\"Calculates the angle, in radians, between the positive x-axis and the ray from the origin to the point (y, x).\",\"## Syntax\\r\\n\\r\\n`atan2(`*y*`,`*x*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *x*: X coordinate (a real number).\\r\\n* *y*: Y coordinate (a real number).\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the angle in radians between the positive x-axis and the ray from the origin to the point (y, x).\",\"The following example returns the angle measurements in radians.\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/?query=H4sIAAAAAAAAAysoyswrUUgsScwzijdQsIWwNAx1DDUV9PUVAjIV9BVMFIoSUzIT84oVNExMFVJS04tSU4s1uWoUUitKUvNSoJoN4ZoNdHThuuE6DS0McGo1gmvVNdQxAGvVhVhthDBA1xJhAAA4Vl3utQAAAA==)**\\\\]**\\r\\n\\r\\n```\\r\\nprint atan2_0 = atan2(1,1) // Pi / 4 radians (45 degrees)\\r\\n| extend atan2_1 = atan2(0,-1) // Pi radians (180 degrees)\\r\\n| extend atan2_2 = atan2(-1,0) // - Pi / 2 radians (-90 degrees)\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|atan2_0|atan2_1|atan2_2|\\r\\n|---|---|---|\\r\\n|0.785398163397448|3.14159265358979|-1.5707963267949|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/atan2function\",\"atan2function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"autocluster\",\"`autocluster` finds common patterns of discrete attributes (dimensions) in the data. It then reduces the results of the original query, whether it's 100 or 100,000 rows, to a few patterns. The plugin was developed to help analyze failures (such as exceptions or crashes) but can potentially work on any filtered data set. The plugin is invoked with the [`evaluate`](evaluateoperator.md) operator.\",\"> [!NOTE]\\r\\n> `autocluster` is largely based on the Seed-Expand algorithm from the following paper: [Algorithms for Telemetry Data Mining using Discrete Attributes](https://www.scitepress.org/DigitalLibrary/PublicationsDetail.aspx?ID=d5kcrO+cpEU=&t=1).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*Table* | `evaluate` `autocluster` `(`[*SizeWeight*, *WeightColumn*, *NumSeeds*, *CustomWildcard*, *CustomWildcard*, ...]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n> [!NOTE]\\r\\n> All arguments are optional.\\r\\n\\r\\nAll arguments are optional, but they must be ordered as above. To indicate that the default value should be used, put the string tilde value '~' (see the \\\"Example\\\" column in the table).\\r\\n\\r\\n|Argument  | Type, range, default  |Description | Example   |\\r\\n|----------------|-----------------------------------|---------------------------|------------------------------------------------|\\r\\n| SizeWeight     | 0 < *double* < 1 [default: 0.5]   | Gives you some control over the balance between generic (high coverage) and informative (many shared) values. If you increase the value, it usually reduces the number of patterns, and each pattern tends to cover a larger percentage coverage. If you decrease the value, it usually produces more specific patterns with more shared values, and a smaller percentage coverage. The under-the-hood formula is a weighted geometric mean, between the normalized generic score and the informative score with weights `SizeWeight` and `1-SizeWeight`    | `T | evaluate autocluster(0.8)`                |\\r\\n|WeightColumn    | *column_name*     | Considers each row in the input according to the specified weight (by default each row has a weight of '1'). The argument must be a name of a numeric column (such as int, long, real). A common usage of a weight column is to take into account sampling or bucketing/aggregation of the data that is already embedded into each row.   | `T | evaluate autocluster('~', sample_Count)` |\\r\\n| NumSeeds        | *int* [default: 25]  | The number of seeds determines the number of initial local search points of the algorithm. In some cases, depending on the structure of the data and if you increase the number of seeds, then the number (or quality) of the results increases through the expanded search space with a slower query tradeoff. The value has diminishing results in both directions, so if you decrease it to below five, it will achieve negligible performance improvements. If you increase to above 50, it will rarely generate additional patterns.  | `T | evaluate autocluster('~', '~', 15)`       |\\r\\n| CustomWildcard  | *\\\"any_value_per_type\\\"* | Sets the wildcard value for a specific type in the results table. It will indicate that the current pattern doesn't have a restriction on this column. The default is null, since the string default is an empty string. If the default is a good value in the data, a different wildcard value should be used (such as `*`).   | `T | evaluate autocluster('~', '~', '~', '*', int(-1), double(-1), long(0), datetime(1900-1-1))` |\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe `autocluster` plugin usually returns a small set of patterns. The patterns capture portions of the data with shared common values across multiple discrete attributes. Each pattern in the results is represented by a row.\\r\\n\\r\\nThe first column is the segment ID. The next two columns are the count and percentage of rows out of the original query that are captured by the pattern. The remaining columns are from the original query. Their value is either a specific value from the column, or a wildcard value (which are by default null) meaning variable values.\\r\\n\\r\\nThe patterns aren't distinct, may be overlapping, and usually don't cover all the original rows. Some rows may not fall under any pattern.\\r\\n\\r\\n> [!TIP]\\r\\n> Use [where](./whereoperator.md) and [project](./projectoperator.md) in the input pipe to reduce the data to just what you're interested in.\\r\\n>\\r\\n> When you find an interesting row, you might want to drill into it further by adding its specific values to your `where` filter.\",'### Using evaluate\\r\\n\\r\\n```\\r\\nT | evaluate autocluster()\\r\\n```\\r\\n\\r\\n### Using autocluster\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| where monthofyear(StartTime) == 5\\r\\n| extend Damage = iff(DamageCrops + DamageProperty > 0 , \"YES\" , \"NO\")\\r\\n| project State , EventType , Damage\\r\\n| evaluate autocluster(0.6)\\r\\n```\\r\\n\\r\\n|SegmentId|Count|Percent|State|EventType|Damage|\\r\\n|---|---|---|---|---|---|---|---|---|\\r\\n|0|2278|38.7||Hail|NO\\r\\n|1|512|8.7||Thunderstorm Wind|YES\\r\\n|2|898|15.3|TEXAS||\\r\\n\\r\\n### Using custom wildcards\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| where monthofyear(StartTime) == 5\\r\\n| extend Damage = iff(DamageCrops + DamageProperty > 0 , \"YES\" , \"NO\")\\r\\n| project State , EventType , Damage\\r\\n| evaluate autocluster(0.2, \\'~\\', \\'~\\', \\'*\\')\\r\\n```\\r\\n\\r\\n|SegmentId|Count|Percent|State|EventType|Damage|\\r\\n|---|---|---|---|---|---|---|---|---|\\r\\n|0|2278|38.7|\\\\*|Hail|NO\\r\\n|1|512|8.7|\\\\*|Thunderstorm Wind|YES\\r\\n|2|898|15.3|TEXAS|\\\\*|\\\\*\\r\\n\\r\\n## See also\\r\\n\\r\\n* [basket](./basketplugin.md)\\r\\n* [reduce](./reduceoperator.md)\\r\\n\\r\\n\\r\\n\\r\\n---\\r\\n\\r\\n> [!IMPORTANT]\\r\\n> The content below is Microsoft confidential(not available in the [public site](https://docs.microsoft.com/en-us/azure/data-explorer/))\\r\\n\\r\\n# autocluster plugin - Internal\\r\\n\\r\\nIf you have questions about autocluster or other ML related workflows in Kusto you can post them on the following DL: [KustoML](mailto:kustoML@microsoft.com).',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/autoclusterplugin\",\"autoclusterplugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"avg\",\"Calculates the average (arithmetic mean) of *Expr* across the group.\",\"[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`avg` `(`*Expr*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *Expr* | string | &check; | Expression used for aggregation calculation. Records with `null` values are ignored and not included in the calculation. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the average value of *Expr* across the group.\",\"This example returns the average number of damaged crops per state.\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKC7NzU0syqxKVXAsS3dJzE1MTw3Jdy7KLyhWsFVILEvXgIiBRTQVkioVgksSS1IBk8Ju20QAAAA=)**\\\\]**\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize AvgDamageToCrops = avg(DamageCrops) by State\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\nThe results table shown includes only the first 10 rows.\\r\\n\\r\\n| State                | AvgDamageToCrops |\\r\\n| -------------------- | ---------------- |\\r\\n| TEXAS                | 7524.569241      |\\r\\n| KANSAS               | 15366.86671      |\\r\\n| IOWA                 | 4332.477535      |\\r\\n| ILLINOIS             | 44568.00198      |\\r\\n| MISSOURI             | 340719.2212      |\\r\\n| GEORGIA              | 490702.5214      |\\r\\n| MINNESOTA            | 2835.991494      |\\r\\n| WISCONSIN            | 17764.37838      |\\r\\n| NEBRASKA             | 21366.36467      |\\r\\n| NEW YORK             | 5.714285714      |\\r\\n| ...      | ...   |\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/avg-aggfunction\",\"avg-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"avgif\",\"Calculates the [average](avg-aggfunction.md) of *Expr* across the group for which *Predicate* evaluates to `true`.\",\"[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`avgif` `(`*Expr*`,` *Predicate*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *Expr* | string | &check; | Expression used for aggregation calculation. Records with `null` values are ignored and not included in the calculation. |\\r\\n| *Predicate* | string | &check; | Predicate that if true, the *Expr* calculated value will be added to the average. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the average value of *Expr* across the group where *Predicate* evaluates to `true`.\",\"This example calculates the average damage by state in cases where there was any damage.\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKC7NzU0syqxKVXAsSy1KTE9NScwFkrYl+Tn5eekaiWXpGgouYCHnovyCYk1NHai68IzUPBd0tZlpGkiKdZDYCnYGmpoKSZUKwSWJJakAP4a4kIQAAAA=)**\\\\]**\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize Averagedamage=tolong(avg( DamageCrops)),AverageWhenDamage=tolong(avgif(DamageCrops,DamageCrops >0)) by State\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\nThe results table shown includes only the first 10 rows.\\r\\n\\r\\n| State                | Averagedamage | Averagewhendamage |\\r\\n| -------------------- | ------------- | ----------------- |\\r\\n| TEXAS                | 7524          | 491291            |\\r\\n| KANSAS               | 15366         | 695021            |\\r\\n| IOWA                 | 4332          | 28203             |\\r\\n| ILLINOIS             | 44568         | 2574757           |\\r\\n| MISSOURI             | 340719        | 8806281           |\\r\\n| GEORGIA              | 490702        | 57239005          |\\r\\n| MINNESOTA            | 2835          | 144175            |\\r\\n| WISCONSIN            | 17764         | 438188            |\\r\\n| NEBRASKA             | 21366         | 187726            |\\r\\n| NEW YORK             | 5             | 10000             |\\r\\n| ... | ... | ... |\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/avgif-aggfunction\",\"avgif-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"azure_digital_twins_query_request\",\"The `azure_digital_twins_query_request` plugin runs an Azure Digital Twins query as part of a Kusto Query Language query. The plugin is invoked with the [`evaluate`](evaluateoperator.md) operator.\",\"Using the plugin, you can query across data in both Azure Digital Twins and any data source accessible through the Kusto Query Language. For example, you can use the plugin to contextualize time series data in a Kusto query by joining it with knowledge graph data held in Azure Digital Twins.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`evaluate` `azure_digital_twins_query_request` `(` *AdtInstanceEndpoint* `,` *AdtQuery* `)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *AdtInstanceEndpoint*: A `string` literal indicating the Azure Digital Twins instance endpoint to be queried.\\r\\n* *AdtQuery*: A `string` literal indicating the query that is to be run against the Azure Digital Twins endpoint. This query is written in a custom SQL-like query language for Azure Digital Twins, referred to as the **Azure Digital Twins query language**. For more information, see [**Query language for Azure Digital Twins**](https://docs.microsoft.com/azure/digital-twins/concepts-query-language).\\r\\n\\r\\n## Authentication and authorization\\r\\n\\r\\nThe azure_digital_twins_query_request plugin uses the Azure AD account of the user running the query to authenticate. To run a query, a user must at least be granted the **Azure Digital Twins Data Reader** role. Information on how to assign this role can be found in [**Security for Azure Digital Twins solutions**](https://docs.microsoft.com/azure/digital-twins/concepts-security#authorization-azure-roles-for-azure-digital-twins).\",\"The following examples show how you can run various Azure Digital Twins queries, including queries that use additional Kusto expressions.\\r\\n\\r\\n### Retrieval of all twins within an Azure Digital Twins instance\\r\\n\\r\\nThe following example returns all digital twins within an Azure Digital Twins instance.\\r\\n\\r\\n```\\r\\nevaluate azure_digital_twins_query_request(\\r\\n  'https://contoso.api.wcus.digitaltwins.azure.net',\\r\\n  'SELECT T AS Twins FROM DIGITALTWINS T')\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n![Screenshot of the twins present in the Azure Digital Twins instance.](images/azure-digital-twins-query-request-plugin/adt-twins.png)\\r\\n\\r\\n### Projection of twin properties as columns along with additional Kusto expressions\\r\\n\\r\\nThe following example returns the result from the plugin as separate columns, and then performs additional operations using Kusto expressions.\\r\\n\\r\\n```\\r\\nevaluate azure_digital_twins_query_request(\\r\\n  'https://contoso.api.wcus.digitaltwins.azure.net',\\r\\n  'SELECT T.Temperature, T.Humidity FROM DIGITALTWINS T WHERE IS_PRIMITIVE(T.Temperature) AND IS_PRIMITIVE(T.Humidity)')\\r\\n| where Temperature > 20\\r\\n| project TemperatureInC = Temperature, Humidity\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|TemperatureInC|Humidity|\\r\\n|---|---|\\r\\n|21|48|\\r\\n|49|34|\\r\\n|80|32|\\r\\n\\r\\n### Joining the plugin results with another data source\\r\\n\\r\\nThe following example shows how to perform complex analysis, such as anomaly detection, through a `join` operation between the plugin results and a table containing historical data in a Kusto table, based on the ID column (`$dtid`).\\r\\n\\r\\n```\\r\\nevaluate azure_digital_twins_query_request(\\r\\n  'https://contoso.api.wcus.digitaltwins.azure.net',\\r\\n  'SELECT T.$dtId AS tid, T.Temperature FROM DIGITALTWINS T WHERE IS_PRIMITIVE(T.$dtId) AND IS_PRIMITIVE(T.Temperature)')\\r\\n| project tostring(tid), todouble(Temperature)\\r\\n| join kind=inner (\\r\\n    ADT_Data_History\\r\\n) on $left.tid == $right.twinId\\r\\n| make-series num=avg(value) on timestamp from min_t to max_t step dt by tid\\r\\n| extend (anomalies, score , baseline) = \\r\\n          series_decompose_anomalies(num, 1.5, -1, 'linefit')\\r\\n| render anomalychart with(anomalycolumns=anomalies, title= 'Test, anomalies')\\r\\n```\\r\\n\\r\\nADT_Data_History is a table whose schema as follows:\\r\\n\\r\\n|timestamp|twinId|modelId|name|value|relationshipTarget|relationshipId|\\r\\n|---|---|---|---|---|---|---|\\r\\n|2021-02-01 17:24|contosoRoom|dtmi:com:contoso:Room;1|Temperature|24|...|..|\\r\\n\\r\\n**Output**\\r\\n\\r\\n![Screenshot of the Anomaly chart of the test expression. Highlighted point is the anomaly.](images/azure-digital-twins-query-request-plugin/adt-anomaly.png)\\r\\n\\r\\n---\\r\\n\\r\\n> [!IMPORTANT]\\r\\n> The content below is Microsoft confidential(not available in the [public site](https://docs.microsoft.com/en-us/azure/data-explorer/))\\r\\n\\r\\n# azure_digital_twins_query_request plugin (preview)\\r\\n\\r\\nRuns an Azure Digital Twins query as part of the KQL query.\\r\\n\\r\\nUsing the plugin, you can reason across data in both Azure Digital Twins and any data source accessible through the Kusto Query Language (KQL). For example, you can use the plugin to contextualize time series data in Kusto by joining it with knowledge graph data held in Azure Digital Twins.\\r\\n\\r\\n>[!NOTE]\\r\\n>* The Azure Digital Twins query plugin is in preview.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`evaluate` `azure_digital_twins_query_request` `(` *AdtInstanceEndpoint* `,` *AdtQuery* `)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *AdtInstanceEndpoint*: A `string` literal indicating the Azure Digital Twins instance endpoint to be queried.\\r\\n\\r\\n* *AdtQuery*: A `string` literal indicating the query that is to be executed against the Azure Digital Twins endpoint. This query is written in a custom SQL-like query language for Azure Digital Twins, referred to as the **Azure Digital Twins query language**. For more information on the query language, see [**Query language | Azure Digital Twins documentation**](https://docs.microsoft.com/azure/digital-twins/concepts-query-language).\\r\\n\\r\\n\\r\\n## Authentication and Authorization\\r\\n\\r\\nThe user of the azure_digital_twins_query_request plugin must be granted the **Azure Digital Twins Data Reader** role, as the user's Azure AD token is used to authenticate. Information on how to assign this role can be found in [**Security for Azure Digital Twins solutions | Azure Digital Twins documentation**](https://docs.microsoft.com/azure/digital-twins/concepts-security#authorization-azure-roles-for-azure-digital-twins).\\r\\n\\r\\n## Setup\\r\\n\\r\\nThis plugin is disabled by default, as it is in still in preview. To enable the plugin on your cluster, run the following command:\\r\\n`.enable plugin azure_digital_twins_query_request`. This command requires **All Databases admin** permission. \\r\\n\\r\\nFor more information on this command, see [**.enable plugin | Azure Data Explorer documentation**](../management/enable-plugin.md). For more information on role-based authorization in Kusto, see [**Role-based Authorization in Kusto | Azure Data Explorer documentation**](https://docs.microsoft.com/azure/data-explorer/kusto/management/access-control/role-based-authorization).\\r\\n\\r\\n## Examples\\r\\n\\r\\nThe following examples show how you can perform various queries, along with using additional Kusto expressions.\\r\\n\\r\\n### Retrieval of all twins within an Azure Digital Twins instance\\r\\n\\r\\nThis example returns all digital twins within an Azure Digital Twins instance.\\r\\n\\r\\n```kusto\\r\\nevaluate azure_digital_twins_query_request(\\r\\n  'https://contoso.api.wcus.digitaltwins.azure.net',\\r\\n  'SELECT T AS Twins FROM DIGITALTWINS T')\\r\\n```\\r\\n\\r\\nThe result looks like this:\\r\\n\\r\\n![The twins present in the Azure Digital Twins instance](images/adt-twins.png \\\"The twins present in the Azure Digital Twins instance\\\")\\r\\n\\r\\n### Projection of twin properties as columns along with additional Kusto expressions\\r\\n\\r\\nThis example returns the result from the plugin as separate columns, and then performs additional operations using Kusto expressions.\\r\\n\\r\\n```kusto\\r\\nevaluate azure_digital_twins_query_request(\\r\\n  'https://contoso.api.wcus.digitaltwins.azure.net',\\r\\n  'SELECT T.Temperature, T.Humidity FROM DIGITALTWINS T WHERE IS_PRIMITIVE(T.Temperature) AND IS_PRIMITIVE(T.Humidity)')\\r\\n| where Temperature > 20\\r\\n| project TemperatureInC = Temperature, Humidity\\r\\n```\\r\\n\\r\\nThe result looks like this:\\r\\n\\r\\n|TemperatureInC|Humidity|\\r\\n|---|---|\\r\\n|21|48|\\r\\n|49|34|\\r\\n|80|32|\\r\\n\\r\\n### Joining the plugin results with another data source\\r\\n\\r\\nThis example shows how to perform complex analysis, such as anomaly detection, through a `join` operation between the plugin results and a table containing historical data in a Kusto table, based on the ID column (`$dtid`).\\r\\n\\r\\n```kusto\\r\\nevaluate azure_digital_twins_query_request(\\r\\n  'https://contoso.api.wcus.digitaltwins.azure.net',\\r\\n  'SELECT T.$dtId AS tid, T.Temperature FROM DIGITALTWINS T WHERE IS_PRIMITIVE(T.$dtId) AND IS_PRIMITIVE(T.Temperature)')\\r\\n| project tostring(tid), todouble(Temperature)\\r\\n| join kind=inner (\\r\\n    ADT_Data_History\\r\\n) on $left.tid == $right.twinId\\r\\n| make-series num=avg(value) on timestamp from min_t to max_t step dt by tid\\r\\n| extend (anomalies, score , baseline) = \\r\\n          series_decompose_anomalies(num, 1.5, -1, 'linefit')\\r\\n| render anomalychart with(anomalycolumns=anomalies, title= 'Test, anomalies')\\r\\n```\\r\\n\\r\\nADT_Data_History is a table whose schema as follows:\\r\\n\\r\\n|timestamp|twinId|modelId|name|value|relationshipTarget|relationshipId|\\r\\n|---|---|---|---|---|---|---|\\r\\n|2021-02-01 17:24|contosoRoom|dtmi:com:contoso:Room;1|Temperature|24|...|..|\\r\\n\\r\\nThe output looks like this:\\r\\n\\r\\n![Anomaly chart of the above expression](images/adt-anomaly.png \\\"Highlighted point is the anomaly\\\")\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/azure-digital-twins-query-request-plugin\",\"azure-digital-twins-query-request-plugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"bag_has_key\",\"Checks whether a dynamic bag column contains a given key.\",\"## Syntax\\r\\n\\r\\n`bag_has_key(`*bag*`, `*key*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n| -- | -- | -- | -- |\\r\\n| *bag* | dynamic | &check; | The property bag to search. |\\r\\n| *key* | string | &check; | The key to search for.  You can search for a nested key using the [JSONPath](jsonpath.md) notation. Array indexing isn't supported. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nTrue or false depending on if the key exists in the bag.\",\"```\\r\\ndatatable(input: dynamic)\\r\\n[\\r\\n    dynamic({'key1' : 123, 'key2': 'abc'}),\\r\\n    dynamic({'key1' : 123, 'key3': 'abc'}),\\r\\n]\\r\\n| extend result = bag_has_key(input, 'key2')\\r\\n```\\r\\n\\r\\n|input|result|\\r\\n|---|---|\\r\\n|{<br>  \\\"key1\\\": 123,<br>  \\\"key2\\\": \\\"abc\\\"<br>}|true<br>|\\r\\n|{<br>  \\\"key1\\\": 123,<br>  \\\"key3\\\": \\\"abc\\\"<br>}|false<br>|\\r\\n\\r\\n### Search using a JSONPath key\\r\\n\\r\\n```\\r\\ndatatable(input: dynamic)\\r\\n[\\r\\n    dynamic({'key1': 123, 'key2': {'prop1' : 'abc', 'prop2': 'xyz'}, 'key3': [100, 200]}),\\r\\n]\\r\\n| extend result = bag_has_key(input, '$.key2.prop1')\\r\\n```\\r\\n\\r\\n|input|result|\\r\\n|---|---|\\r\\n|{<br>  \\\"key1\\\": 123,<br>  \\\"key2\\\": {<br>    \\\"prop1\\\": \\\"abc\\\",<br>    \\\"prop2\\\": \\\"xyz\\\"<br>  },<br>  \\\"key3\\\": [<br>    100,<br>    200<br>  ]<br>}|true<br>|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/bag-has-key-function\",\"bag-has-key-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"bag_keys\",\"Enumerates all the root keys in a dynamic property-bag object.\",\"## Syntax\\r\\n\\r\\n`bag_keys(`*dynamic object*`)`\\r\\n\\r\\n## Returns\\r\\n\\r\\nAn array of keys, order is undetermined.\",'```\\r\\ndatatable(index:long, d:dynamic) [\\r\\n    1, dynamic({\\'a\\':\\'b\\', \\'c\\':123}), \\r\\n    2, dynamic({\\'a\\':\\'b\\', \\'c\\':{\\'d\\':123}}),\\r\\n    3, dynamic({\\'a\\':\\'b\\', \\'c\\':[{\\'d\\':123}]}),\\r\\n    4, dynamic(null),\\r\\n    5, dynamic({}),\\r\\n    6, dynamic(\\'a\\'),\\r\\n    7, dynamic([])\\r\\n]\\r\\n| extend keys = bag_keys(d)\\r\\n```\\r\\n\\r\\n|index|d|keys|\\r\\n|---|---|---|\\r\\n|1|{<br>  \"a\": \"b\",<br>  \"c\": 123<br>}|[<br>  \"a\",<br>  \"c\"<br>]|\\r\\n|2|{<br>  \"a\": \"b\",<br>  \"c\": {<br>    \"d\": 123<br>  }<br>}|[<br>  \"a\",<br>  \"c\"<br>]|\\r\\n|3|{<br>  \"a\": \"b\",<br>  \"c\": [<br>    {<br>      \"d\": 123<br>    }<br>  ]<br>}|[<br>  \"a\",<br>  \"c\"<br>]|\\r\\n|4|||\\r\\n|5|{}|[]|\\r\\n|6|a||\\r\\n|7|[]||',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/bagkeysfunction\",\"bagkeysfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"bag_merge\",\"Merges `dynamic` property-bags into a `dynamic` property-bag with all properties merged.\",\"## Syntax\\r\\n\\r\\n`bag_merge(`*bag1*`, `*bag2*`[`,` *bag3*, ...])`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *bag1...bagN*: Input `dynamic` property-bags. The function accepts between 2 to 64 arguments.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a `dynamic` property-bag. Results from merging all of the input property-bag objects. If a key appears in more than one input object, an arbitrary value (out of the possible values for this key) will be chosen.\",\"Expression:\\r\\n\\r\\n```\\r\\nprint result = bag_merge(\\r\\n   dynamic({'A1':12, 'B1':2, 'C1':3}),\\r\\n   dynamic({'A2':81, 'B2':82, 'A1':1}))\\r\\n```\\r\\n\\r\\n|result|\\r\\n|---|\\r\\n|{<br>  \\\"A1\\\": 12,<br>  \\\"B1\\\": 2,<br>  \\\"C1\\\": 3,<br>  \\\"A2\\\": 81,<br>  \\\"B2\\\": 82<br>}|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/bag-merge-function\",\"bag-merge-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"bag_pack\",\"Creates a `dynamic` JSON object (property bag) from a list of keys and values.\",\"> **Deprecated aliases**: pack(), pack_dictionary()\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`bag_pack(`*key1*`,` *value1*`,` *key2*`,` *value2*`,... )`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*key*| string | &check; | Key name.|\\r\\n|*value* | string | &check; | Key value.|\\r\\n\\r\\n> [!NOTE]\\r\\n> The *key* and *value* strings are an alternating list the total length of the list must be even.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a `dynamic` JSON object (property bag) from the listed *key* and *value* inputs.\",'**Example 1**\\r\\n\\r\\nThe following example creates and returns a property bag from an alternating list of keys and values.\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUUhKTI8vSEzO1lDySS1LzVHSUVDyzEvLL8pNLMnMzwNxA4ryk1OLiz1dgBxDI2MToJBLYkkikIfQW1oE1lleXq6XlJmXrpecn6ukqQkA9RzT32IAAAA=)**\\\\]**\\r\\n\\r\\n```\\r\\nprint bag_pack(\"Level\", \"Information\", \"ProcessID\", 1234, \"Data\", bag_pack(\"url\", \"www.bing.com\"))\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|print_0|\\r\\n|--|\\r\\n|{\"Level\":\"Information\",\"ProcessID\":1234,\"Data\":{\"url\":\"www.bing.com\"}}|\\r\\n\\r\\n**Example 2**\\r\\n\\r\\nThe following example uses two tables, *SmsMessages* and *MmsMessages*, and returns their common columns and a property bag from the other columns. The tables are created ad-hoc as part of the query.\\r\\n\\r\\nSmsMessages\\r\\n\\r\\n|SourceNumber |TargetNumber| CharsCount |\\r\\n|---|---|---|\\r\\n|555-555-1234 |555-555-1212 | 46 |\\r\\n|555-555-1234 |555-555-1213 | 50 |\\r\\n|555-555-1212 |555-555-1234 | 32 |\\r\\n\\r\\nMmsMessages\\r\\n\\r\\n|SourceNumber |TargetNumber| AttachmentSize | AttachmentType | AttachmentName |\\r\\n|---|---|---|---|---|\\r\\n|555-555-1212 |555-555-1213 | 200 | jpeg | Pic1 |\\r\\n|555-555-1234 |555-555-1212 | 250 | jpeg | Pic2 |\\r\\n|555-555-1234 |555-555-1213 | 300 | png | Pic3 |\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA61Sy26DMBC88xUrnxKJSmBCD604VDknikRuVVUZWIEJGGQb9aF+fG1olJgmbQ/FwmZ3Zr3MaBvUkLZqg0qxEhUkUDBtVtYgLDwwT9oNMsft0GYo70BpyUXpj8ieyRL1JWRdManW3SD0Me8t4XGESBzHN/YNabQi/nkcUhuvbs3+KzUa44D4c+Z0ybwyogS8p3uvMXI3/y73QWuWVy0KnfJ3vIbt3/qr2Ja1+JNVc1WTfhoE9qh7LO2543n43ZDLLtN4Xkr/UDp2jaauvThWRsRaez5F3gfUHRdw4KJIuBAoHdc74dhs2PiqURSwY/kBiyRj5XNvPhfkNEim1ykwfV3PDeomHIZ13mHYhMOw/jsMm1haHS8VSnR+F5JkZpKh9bKrMdcO0XdGxv9S9wkokKY3cgMAAA==)**\\\\]**\\r\\n\\r\\n```\\r\\nlet SmsMessages = datatable (\\r\\n    SourceNumber: string,\\r\\n    TargetNumber: string,\\r\\n    CharsCount: string\\r\\n) [\\r\\n    \"555-555-1234\", \"555-555-1212\", \"46\", \\r\\n    \"555-555-1234\", \"555-555-1213\", \"50\",\\r\\n    \"555-555-1212\", \"555-555-1234\", \"32\" \\r\\n];\\r\\nlet MmsMessages = datatable (\\r\\n    SourceNumber: string,\\r\\n    TargetNumber: string,\\r\\n    AttachmentSize: string,\\r\\n    AttachmentType: string,\\r\\n    AttachmentName: string\\r\\n) [\\r\\n    \"555-555-1212\", \"555-555-1213\", \"200\", \"jpeg\", \"Pic1\",\\r\\n    \"555-555-1234\", \"555-555-1212\", \"250\", \"jpeg\", \"Pic2\",\\r\\n    \"555-555-1234\", \"555-555-1213\", \"300\", \"png\", \"Pic3\"\\r\\n];\\r\\nSmsMessages \\r\\n| join kind=inner MmsMessages on SourceNumber\\r\\n| extend Packed=bag_pack(\"CharsCount\", CharsCount, \"AttachmentSize\", AttachmentSize, \"AttachmentType\", AttachmentType, \"AttachmentName\", AttachmentName) \\r\\n| where SourceNumber == \"555-555-1234\"\\r\\n| project SourceNumber, TargetNumber, Packed\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n| SourceNumber | TargetNumber | Packed |\\r\\n|--|--|--|--|\\r\\n| 555-555-1234 | 555-555-1213 | {\"CharsCount\":\"50\",\"AttachmentSize\":\"250\",\"AttachmentType\":\"jpeg\",\"AttachmentName\":\"Pic2\"} |\\r\\n| 555-555-1234 | 555-555-1212 | {\"CharsCount\":\"46\",\"AttachmentSize\":\"250\",\"AttachmentType\":\"jpeg\",\"AttachmentName\":\"Pic2\"} |\\r\\n| 555-555-1234 | 555-555-1213 | {\"CharsCount\":\"50\",\"AttachmentSize\":\"300\",\"AttachmentType\":\"png\",\"AttachmentName\":\"Pic3\"} |\\r\\n| 555-555-1234 | 555-555-1212 | {\"CharsCount\":\"46\",\"AttachmentSize\":\"300\",\"AttachmentType\":\"png\",\"AttachmentName\":\"Pic3\"} |',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/packfunction\",\"packfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"bag_remove_keys\",\"Removes keys and associated values from a `dynamic` property-bag.\",\"## Syntax\\r\\n\\r\\n`bag_remove_keys(`*bag*`, `*keys*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n| -- | -- | -- | -- |\\r\\n| *bag* | dynamic | &check; | Property-bag input. |\\r\\n| *keys* | string | &check; | Array includes keys to be removed from the input. Keys refer to the first level of the property bag. You can specify keys on the nested levels using [JSONPath](jsonpath.md) notation. Array indexing isn't supported. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a `dynamic` property-bag without specified keys and their values.\",'```\\r\\ndatatable(input:dynamic)\\r\\n[\\r\\n    dynamic({\\'key1\\' : 123,     \\'key2\\': \\'abc\\'}),\\r\\n    dynamic({\\'key1\\' : \\'value\\', \\'key3\\': 42.0}),\\r\\n]\\r\\n| extend result=bag_remove_keys(input, dynamic([\\'key2\\', \\'key4\\']))\\r\\n```\\r\\n\\r\\n|input|result|\\r\\n|---|---|\\r\\n|{<br>  \"key1\": 123,<br>  \"key2\": \"abc\"<br>}|{<br>  \"key1\": 123<br>}|\\r\\n|{<br>  \"key1\": \"value\",<br>  \"key3\": 42.0<br>}|{<br>  \"key1\": \"value\",<br>  \"key3\": 42.0<br>}|\\r\\n\\r\\n### Remove inner properties of dynamic values using JSONPath notation\\r\\n\\r\\n```\\r\\ndatatable(input:dynamic)\\r\\n[\\r\\n    dynamic({\\'key1\\': 123, \\'key2\\': {\\'prop1\\' : \\'abc\\', \\'prop2\\': \\'xyz\\'}, \\'key3\\': [100, 200]}),\\r\\n]\\r\\n| extend result=bag_remove_keys(input, dynamic([\\'$.key2.prop1\\', \\'key3\\']))\\r\\n```\\r\\n\\r\\n|input|result|\\r\\n|---|---|\\r\\n|{<br>  \"key1\": 123,<br>  \"key2\": {<br>    \"prop1\": \"abc\",<br>    \"prop2\": \"xyz\"<br>  },<br>  \"key3\": [<br>    100,<br>    200<br>  ]<br>}|{<br>  \"key1\": 123,<br>  \"key2\": {<br>    \"prop2\": \"xyz\"<br>  }<br>}|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/bag-remove-keys-function\",\"bag-remove-keys-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"bag_unpack\",\"The `bag_unpack` plugin unpacks a single column of type `dynamic`, by treating each property bag top-level slot as a column. The plugin is invoked with the [`evaluate`](evaluateoperator.md) operator.\",\"## Syntax\\r\\n\\r\\n*T* `|` `evaluate` `bag_unpack(` *Column* [`,` *OutputColumnPrefix* ] [`,` *columnsConflict* ] [`,` *ignoredProperties* ] `)` [`:` *OutputSchema*]\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required| Description |\\r\\n|---|---|---|---|\\r\\n| *T* |  | &check; | The tabular input whose column *Column* is to be unpacked. |\\r\\n| *Column* | dynamic | &check; | The column of *T* to unpack. |\\r\\n| *OutputColumnPrefix* | string | | A common prefix to add to all columns produced by the plugin. |\\r\\n| *columnsConflict* | string | | A direction for column conflict resolution. Valid values: <br />`error` - Query produces an error (default)<br />`replace_source` - Source column is replaced<br />`keep_source` - Source column is kept\\r\\n| *ignoredProperties* | dynamic | Optional set of bag properties to be ignored.\\r\\n| *OutputSchema* | | | The names and types for the expected columns of the `bag_unpack` plugin output.<br /><br />**Syntax**: `(` *ColumnName* `:` *ColumnType* [`,` ...] `)`<br /><br />Specifying the expected schema optimizes query execution by not having to first run the actual query to explore the schema. An error is raised if the run-time schema doesn't match the *OutputSchema* schema. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe `bag_unpack` plugin returns a table with as many records as its tabular input (*T*). The schema of the table is the same as the schema of its tabular input with the following modifications:\\r\\n\\r\\n* The specified input column (*Column*) is removed.\\r\\n* The schema is extended with as many columns as there are distinct slots in\\r\\n  the top-level property bag values of *T*. The name of each column corresponds\\r\\n  to the name of each slot, optionally prefixed by *OutputColumnPrefix*. Its\\r\\n  type is either the type of the slot, if all values of the same slot have the\\r\\n  same type, or `dynamic`, if the values differ in type.\\r\\n\\r\\n> [!NOTE]\\r\\n> If the OutputSchema is not specified, the plugin's output schema varies according to the input data values. Therefore, multiple executions of the plugin using different data inputs, may produce different output schema.\\r\\n\\r\\n> [!NOTE]\\r\\n> The input data to the plugin must be such that the output schema follows all the rules for a tabular schema. In particular:\\r\\n>\\r\\n> * An output column name can't be the same as an existing column in the tabular\\r\\n    input *T*, unless it's the column to be unpacked (*Column*), since that will produce two columns with the same name.\\r\\n>\\r\\n> * All slot names, when prefixed by *OutputColumnPrefix*, must be valid\\r\\n    entity names and follow the [identifier naming rules](./schema-entities/entity-names.md#identifier-naming-rules).\",'### Expand a bag\\r\\n\\r\\n```\\r\\ndatatable(d:dynamic)\\r\\n[\\r\\n    dynamic({\"Name\": \"John\", \"Age\":20}),\\r\\n    dynamic({\"Name\": \"Dave\", \"Age\":40}),\\r\\n    dynamic({\"Name\": \"Jasmine\", \"Age\":30}),\\r\\n]\\r\\n| evaluate bag_unpack(d)\\r\\n```\\r\\n\\r\\n|Age|Name   |\\r\\n|---|-------|\\r\\n|20 |John   |\\r\\n|40 |Dave   |\\r\\n|30 |Jasmine|\\r\\n\\r\\n### Expand a bag with OutputColumnPrefix\\r\\n\\r\\nExpand a bag and use the `OutputColumnPrefix` option to produce column names that begin with the prefix \\'Property_\\'.\\r\\n\\r\\n```\\r\\ndatatable(d:dynamic)\\r\\n[\\r\\n    dynamic({\"Name\": \"John\", \"Age\":20}),\\r\\n    dynamic({\"Name\": \"Dave\", \"Age\":40}),\\r\\n    dynamic({\"Name\": \"Jasmine\", \"Age\":30}),\\r\\n]\\r\\n| evaluate bag_unpack(d, \\'Property_\\')\\r\\n```\\r\\n\\r\\n|Property_Age|Property_Name|\\r\\n|------------|-------------|\\r\\n|20          |John         |\\r\\n|40          |Dave         |\\r\\n|30          |Jasmine      |\\r\\n\\r\\n### Expand a bag with columnsConflict\\r\\n\\r\\nExpand a bag and use the `columnsConflict` option to resolve conflicts between existing columns and columns produced by the `bag_unpack()` operator.\\r\\n\\r\\n```\\r\\ndatatable(Name:string, d:dynamic)\\r\\n[\\r\\n    \\'Old_name\\', dynamic({\"Name\": \"John\", \"Age\":20}),\\r\\n    \\'Old_name\\', dynamic({\"Name\": \"Dave\", \"Age\":40}),\\r\\n    \\'Old_name\\', dynamic({\"Name\": \"Jasmine\", \"Age\":30}),\\r\\n]\\r\\n| evaluate bag_unpack(d, columnsConflict=\\'replace_source\\') // Use new name\\r\\n```\\r\\n\\r\\n|Age|Name   |\\r\\n|---|-------|\\r\\n|20 |John   |\\r\\n|40 |Dave   |\\r\\n|30 |Jasmine|\\r\\n\\r\\n```\\r\\ndatatable(Name:string, d:dynamic)\\r\\n[\\r\\n    \\'Old_name\\', dynamic({\"Name\": \"John\", \"Age\":20}),\\r\\n    \\'Old_name\\', dynamic({\"Name\": \"Dave\", \"Age\":40}),\\r\\n    \\'Old_name\\', dynamic({\"Name\": \"Jasmine\", \"Age\":30}),\\r\\n]\\r\\n| evaluate bag_unpack(d, columnsConflict=\\'keep_source\\') // Keep old name\\r\\n```\\r\\n\\r\\n|Age|Name     |\\r\\n|---|---------|\\r\\n|20 |Old_name |\\r\\n|40 |Old_name |\\r\\n|30 |Old_name |\\r\\n\\r\\n### Expand a bag with ignoredProperties\\r\\n\\r\\nExpand a bag and use the `ignoredProperties` option to ignore certain properties in the property bag.\\r\\n\\r\\n```\\r\\ndatatable(d:dynamic)\\r\\n[\\r\\n    dynamic({\"Name\": \"John\", \"Age\":20, \"Address\": \"Address-1\" }),\\r\\n    dynamic({\"Name\": \"Dave\", \"Age\":40, \"Address\": \"Address-2\"}),\\r\\n    dynamic({\"Name\": \"Jasmine\", \"Age\":30, \"Address\": \"Address-3\"}),\\r\\n]\\r\\n// Ignore \\'Age\\' and \\'Address\\' properties\\r\\n| evaluate bag_unpack(d, ignoredProperties=dynamic([\\'Address\\', \\'Age\\']))\\r\\n```\\r\\n\\r\\n|Name|\\r\\n|---|\\r\\n|John|\\r\\n|Dave|\\r\\n|Jasmine|\\r\\n\\r\\n### Expand a bag with a query-defined OutputSchema\\r\\n\\r\\nExpand a bag and use the `OutputSchema` option to allow various optimizations to be evaluated before running the actual query.\\r\\n\\r\\n```\\r\\ndatatable(d:dynamic)\\r\\n[\\r\\n    dynamic({\"Name\": \"John\", \"Age\":20}),\\r\\n    dynamic({\"Name\": \"Dave\", \"Age\":40}),\\r\\n    dynamic({\"Name\": \"Jasmine\", \"Age\":30}),\\r\\n]\\r\\n| evaluate bag_unpack(d) : (Name:string, Age:long)\\r\\n```\\r\\n\\r\\n|Name  |Age  |\\r\\n|---------|---------|\\r\\n|John     |  20  |\\r\\n|Dave     |  40  |\\r\\n|Jasmine  |  30  |',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/bag-unpackplugin\",\"bag-unpackplugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"base64_decode_toarray\",\"Decodes a base64 string to an array of long values.\",\"## Syntax\\r\\n\\r\\n`base64_decode_toarray(`*String*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *String*: Input base64 string to be decoded from base64 to an array of long values.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns an array of long values decoded from a base64 string.\\r\\n\\r\\n* To decode base64 strings to a UTF-8 string, see [base64_decode_tostring()](base64_decode_tostringfunction.md)\\r\\n* To encode strings to a base64 string, see [base64_encode_tostring()](base64_encode_tostringfunction.md)\",\"```\\r\\nprint Quine=base64_decode_toarray(\\\"S3VzdG8=\\\")  \\r\\n// 'K', 'u', 's', 't', 'o'\\r\\n```\\r\\n\\r\\n|Quine|\\r\\n|-----|\\r\\n|[75,117,115,116,111]|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/base64_decode_toarrayfunction\",\"base64_decode_toarrayfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"base64_decode_toguid\",\"Decodes a base64 string to a [GUID](./scalar-data-types/guid.md).\",\"## Syntax\\r\\n\\r\\n`base64_decode_toguid(`*String*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *String*: Input string to be decoded from base64 to a [GUID](./scalar-data-types/guid.md).\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a [GUID](./scalar-data-types/guid.md) decoded from a base64 string.\\r\\n\\r\\n* To encode a [GUID](./scalar-data-types/guid.md) to a base64 string, see [base64_encode_fromguid()](base64-encode-fromguid-function.md)\",'```\\r\\nprint Quine = base64_decode_toguid(\"JpbpECu8dUy7Pv5gbeJXAA==\")  \\r\\n```\\r\\n\\r\\n|Quine|\\r\\n|-----|\\r\\n|10e99626-bc2b-754c-bb3e-fe606de25700|\\r\\n\\r\\nIf you try to decode an invalid base64 string, \"null\" will be returned:\\r\\n\\r\\n```\\r\\nprint Empty = base64_decode_toarray(\"abcd1231\")\\r\\n```\\r\\n\\r\\n|Empty|\\r\\n|-----|\\r\\n||',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/base64-decode-toguid-function\",\"base64-decode-toguid-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"base64_decode_tostring\",\"Decodes a base64 string to a UTF-8 string.\",\"## Syntax\\r\\n\\r\\n`base64_decode_tostring(`*String*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *String*: Input string to be decoded from base64 to UTF-8 string.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns UTF-8 string decoded from base64 string.\\r\\n\\r\\n* To decode base64 strings to an array of long values, see [base64_decode_toarray()](base64_decode_toarrayfunction.md)\\r\\n* To encode strings to base64 string, see [base64_encode_tostring()](base64_encode_tostringfunction.md)\",'```\\r\\nprint Quine=base64_decode_tostring(\"S3VzdG8=\")\\r\\n```\\r\\n\\r\\n|Quine|\\r\\n|-----|\\r\\n|Kusto|\\r\\n\\r\\nTrying to decode a base64 string that was generated from invalid UTF-8 encoding will return null:\\r\\n\\r\\n```\\r\\nprint Empty=base64_decode_tostring(\"U3RyaW5n0KHR0tGA0L7Rh9C60LA=\")\\r\\n```\\r\\n\\r\\n|Empty|\\r\\n|-----|\\r\\n||',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/base64_decode_tostringfunction\",\"base64_decode_tostringfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"base64_encode_fromarray\",\"Encodes a base64 string from a bytes array.\",\"## Syntax\\r\\n\\r\\n`base64_encode_fromarray(`*BytesArray*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *BytesArray*: Input bytes array to be encoded into base64 string.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the base64 string encoded from the bytes array.\\r\\n\\r\\n* For decoding base64 strings to a UTF-8 string see [base64_decode_tostring()](base64_decode_tostringfunction.md)\\r\\n* For encoding strings to base64 string see [base64_encode_tostring()](base64_encode_tostringfunction.md)\\r\\n* This function is the inverse of [base64_decode_toarray()](base64_decode_toarrayfunction.md)\",'```\\r\\nlet bytes_array = toscalar(print base64_decode_toarray(\"S3VzdG8=\"));\\r\\nprint decoded_base64_string = base64_encode_fromarray(bytes_array)\\r\\n```\\r\\n\\r\\n|decoded_base64_string|\\r\\n|---|\\r\\n|S3VzdG8=|\\r\\n\\r\\nTrying to encode a base64 string from an invalid bytes array that was generated from invalid UTF-8 encoded string will return null:\\r\\n\\r\\n```\\r\\nlet empty_bytes_array = toscalar(print base64_decode_toarray(\"U3RyaW5n0KHR0tGA0L7Rh9C60LA\"));\\r\\nprint empty_string = base64_encode_fromarray(empty_bytes_array)\\r\\n```\\r\\n\\r\\n|empty_string|\\r\\n|---|\\r\\n||',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/base64_encode_fromarrayfunction\",\"base64_encode_fromarrayfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"base64_encode_fromguid\",\"Encodes a [GUID](./scalar-data-types/guid.md) to a base64 string.\",\"## Syntax\\r\\n\\r\\n`base64_encode_fromguid(`*GUID*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *GUID*: Input [GUID](./scalar-data-types/guid.md) to be encoded to a base64 string.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a base64 string encoded from a GUID.\\r\\n\\r\\n* To decode a base64 string to a [GUID](./scalar-data-types/guid.md), see [base64_decode_toguid()](base64-decode-toguid-function.md)\\r\\n* To create a [GUID](./scalar-data-types/guid.md) from a string, see [toguid()](toguidfunction.md)\",'```\\r\\nprint Quine = base64_encode_fromguid(toguid(\"ae3133f2-6e22-49ae-b06a-16e6a9b212eb\"))  \\r\\n```\\r\\n\\r\\n|Quine|\\r\\n|-----|\\r\\n|8jMxriJurkmwahbmqbIS6w==|\\r\\n\\r\\nIf you try to encode anything that isn\\'t a [GUID](./scalar-data-types/guid.md) as below, an error will be thrown:\\r\\n\\r\\n```\\r\\nprint Empty = base64_encode_fromguid(\"abcd1231\")\\r\\n```',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/base64-encode-fromguid-function\",\"base64-encode-fromguid-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"base64_encode_tostring\",\"Encodes a string as base64 string.\",\"## Syntax\\r\\n\\r\\n`base64_encode_tostring(`*String*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *String*: Input string to be encoded as base64 string.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the string encoded as base64 string.\\r\\n\\r\\n* To decode base64 strings to UTF-8 strings, see [base64_decode_tostring()](base64_decode_tostringfunction.md)\\r\\n* To decode base64 strings to an array of long values, see [base64_decode_toarray()](base64_decode_toarrayfunction.md)\",'```\\r\\nprint Quine=base64_encode_tostring(\"Kusto\")\\r\\n```\\r\\n\\r\\n|Quine   |\\r\\n|--------|\\r\\n|S3VzdG8=|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/base64_encode_tostringfunction\",\"base64_encode_tostringfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"basket\",\"The `basket` plugin finds frequent patterns of attributes in the data and returns the patterns that pass a frequency threshold in that data. A pattern represents a subset of the rows that have the same value across one or more columns. The `basket` plugin is based on the [Apriori algorithm](https://en.wikipedia.org/wiki/Association_rule_learning#Apriori_algorithm) originally developed for basket analysis data mining.\",\"## Syntax\\r\\n\\r\\n*T* | `evaluate` `basket` `(` [*Threshold*, *WeightColumn*, *MaxDimensions*, *CustomWildcard*, *CustomWildcard*, ...]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\nAll arguments are optional, but they must be ordered as above. To indicate that the default value should be used, use the string tilde value - '~'. See examples below.\\r\\n\\r\\nAvailable arguments:\\r\\n\\r\\n* Threshold - 0.015 < *double* < 1 [default: 0.05]\\r\\n    Sets the minimal ratio of the rows to be considered frequent. Patterns with a smaller ratio won't be returned.\\r\\n    Example: `T | evaluate basket(0.02)`\\r\\n* WeightColumn - *column_name*\\r\\n    Considers each row in the input according to the specified weight. By default, each row has a weight of '1'. The argument must be a name of a numeric column, such as int, long, real. A common use of a weight column, is to take into account sampling or bucketing/aggregation of the data that is already embedded into each row.\\r\\n    Example: `T | evaluate basket('~', sample_Count)`\\r\\n* MaxDimensions - 1 < *int* [default: 5]\\r\\n    Sets the maximal number of uncorrelated dimensions per basket, limited by default, to minimize the query runtime.\\r\\n    Example: `T | evaluate basket('~', '~', 3)`\\r\\n* CustomWildcard - *\\\"any_value_per_type\\\"*\\r\\n    Sets the wildcard value for a specific type in the result table that will indicate that the current pattern doesn't have a restriction on this column.\\r\\n    Default is null. The default for a string is an empty string. If the default is a good value in the data, a different wildcard value should be used, such as `*`.\\r\\n    For example:\\r\\n     `T | evaluate basket('~', '~', '~', '*', int(-1), double(-1), long(0), datetime(1900-1-1))`\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe `basket` plugin returns frequent patterns that pass a ratio threshold. The default threshold is 0.05.\\r\\n\\r\\nEach pattern is represented by a row in the results. The first column is the segment ID. The next two columns are the *count* and *percentage of rows*, from the original query that match the pattern. The remaining columns relate to the original query, with either a specific value from the column or a wildcard value, which is by default null, meaning a variable value.\\r\\n\\r\\n**Notes**\\r\\nThe algorithm uses sampling to determine the initial frequent values. Therefore, the results could slightly differ between multiple runs for patterns whose frequency is close to the threshold.\",'```\\r\\nStormEvents\\r\\n| where monthofyear(StartTime) == 5\\r\\n| extend Damage = iff(DamageCrops + DamageProperty > 0 , \"YES\" , \"NO\")\\r\\n| project State, EventType, Damage, DamageCrops\\r\\n| evaluate basket(0.2)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|SegmentId|Count|Percent|State|EventType|Damage|DamageCrops|\\r\\n|---|---|---|---|---|---|---|---|---|\\r\\n|0|4574|77.7|||NO|0\\r\\n|1|2278|38.7||Hail|NO|0\\r\\n|2|5675|96.4||||0\\r\\n|3|2371|40.3||Hail||0\\r\\n|4|1279|21.7||Thunderstorm Wind||0\\r\\n|5|2468|41.9||Hail||\\r\\n|6|1310|22.3|||YES|\\r\\n|7|1291|21.9||Thunderstorm Wind||\\r\\n\\r\\n## Example with custom wildcards\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| where monthofyear(StartTime) == 5\\r\\n| extend Damage = iff(DamageCrops + DamageProperty > 0 , \"YES\" , \"NO\")\\r\\n| project State, EventType, Damage, DamageCrops\\r\\n| evaluate basket(0.2, \\'~\\', \\'~\\', \\'*\\', int(-1))\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|SegmentId|Count|Percent|State|EventType|Damage|DamageCrops|\\r\\n|---|---|---|---|---|---|---|---|---|\\r\\n|0|4574|77.7|\\\\*|\\\\*|NO|0\\r\\n|1|2278|38.7|\\\\*|Hail|NO|0\\r\\n|2|5675|96.4|\\\\*|\\\\*|\\\\*|0\\r\\n|3|2371|40.3|\\\\*|Hail|\\\\*|0\\r\\n|4|1279|21.7|\\\\*|Thunderstorm Wind|\\\\*|0\\r\\n|5|2468|41.9|\\\\*|Hail|\\\\*|-1\\r\\n|6|1310|22.3|\\\\*|\\\\*|YES|-1\\r\\n|7|1291|21.9|\\\\*|Thunderstorm Wind|\\\\*|-1\\r\\n\\r\\n---\\r\\n\\r\\n> [!IMPORTANT]\\r\\n> The content below is Microsoft confidential(not available in the [public site](https://docs.microsoft.com/en-us/azure/data-explorer/))\\r\\n\\r\\n# Basket plugin - Internal\\r\\n\\r\\nIf you have questions about basket or other ML related workflows in Kusto you can post them on the following DL: [KustoML](mailto:kustoML@microsoft.com).',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/basketplugin\",\"basketplugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"beta_cdf\",\"Returns the standard cumulative beta distribution function.\",\"```\\r\\nbeta_cdf(0.2, 10.0, 50.0)\\r\\n```\\r\\n\\r\\nIf *probability* = `beta_cdf(`*x*,...`)`, then `beta_inv(`*probability*,...`)` = *x*.\\r\\n\\r\\nThe beta distribution is commonly used to study variation in the percentage of something across samples, such as the fraction of the day people spend watching television.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`beta_cdf(`*x*`, `*alpha*`, `*beta*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *x*: A value at which to evaluate the function.\\r\\n* *alpha*: A parameter of the distribution.\\r\\n* *beta*: A parameter of the distribution.\\r\\n\\r\\n## Returns\\r\\n\\r\\n* The [cumulative beta distribution function](https://en.wikipedia.org/wiki/Beta_distribution#Cumulative_distribution_function).\\r\\n\\r\\n**Notes**\\r\\n\\r\\nIf any argument is nonnumeric, beta_cdf() returns null value.\\r\\n\\r\\nIf x < 0 or x > 1, beta_cdf() returns NaN value.\\r\\n\\r\\nIf alpha \\u2264 0 or alpha > 10000, beta_cdf() returns the NaN value.\\r\\n\\r\\nIf beta \\u2264 0 or beta > 10000, beta_cdf() returns the NaN value.\",'```\\r\\ndatatable(x:double, alpha:double, beta:double, comment:string)\\r\\n[\\r\\n    0.9, 10.0, 20.0, \"Valid input\",\\r\\n    1.5, 10.0, 20.0, \"x > 1, yields NaN\",\\r\\n    double(-10), 10.0, 20.0, \"x < 0, yields NaN\",\\r\\n    0.1, double(-1.0), 20.0, \"alpha is < 0, yields NaN\"\\r\\n]\\r\\n| extend b = beta_cdf(x, alpha, beta)\\r\\n```\\r\\n\\r\\n|x|alpha|beta|comment|b|\\r\\n|---|---|---|---|---|\\r\\n|0.9|10|20|Valid input|0.999999999999959|\\r\\n|1.5|10|20|x > 1, yields NaN|NaN|\\r\\n|-10|10|20|x < 0, yields NaN|NaN|\\r\\n|0.1|-1|20|alpha is < 0, yields NaN|NaN|\\r\\n\\r\\n## See also\\r\\n\\r\\n* For computing the inverse of the beta cumulative probability density function, see [beta-inv()](./beta-invfunction.md).\\r\\n* For computing probability density function, see [beta-pdf()](./beta-pdffunction.md).',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/beta-cdffunction\",\"beta-cdffunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"beta_inv\",\"Returns the inverse of the beta cumulative probability beta density function.\",\"```\\r\\nbeta_inv(0.1, 10.0, 50.0)\\r\\n```\\r\\n\\r\\nIf *probability* = `beta_cdf(`*x*,...`)`, then `beta_inv(`*probability*,...`)` = *x*.\\r\\n\\r\\nThe beta distribution can be used in project planning to model probable completion times given an expected completion time and variability.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`beta_inv(`*probability*`, `*alpha*`, `*beta*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *probability*: A probability associated with the beta distribution.\\r\\n* *alpha*: A parameter of the distribution.\\r\\n* *beta*: A parameter of the distribution.\\r\\n\\r\\n## Returns\\r\\n\\r\\n* The inverse of the beta cumulative probability density function [beta_cdf()](./beta-cdffunction.md)\\r\\n\\r\\n**Notes**\\r\\n\\r\\nIf any argument is nonnumeric, beta_inv() returns null value.\\r\\n\\r\\nIf alpha \\u2264 0 or beta \\u2264 0, beta_inv() returns the null value.\\r\\n\\r\\nIf probability \\u2264 0 or probability > 1, beta_inv() returns the NaN value.\\r\\n\\r\\nGiven a value for probability, beta_inv() seeks that value x such that beta_cdf(x, alpha, beta) = probability.\",'```\\r\\ndatatable(p:double, alpha:double, beta:double, comment:string)\\r\\n[\\r\\n    0.1, 10.0, 20.0, \"Valid input\",\\r\\n    1.5, 10.0, 20.0, \"p > 1, yields null\",\\r\\n    0.1, double(-1.0), 20.0, \"alpha is < 0, yields NaN\"\\r\\n]\\r\\n| extend b = beta_inv(p, alpha, beta)\\r\\n```\\r\\n\\r\\n|p|alpha|beta|comment|b|\\r\\n|---|---|---|---|---|\\r\\n|0.1|10|20|Valid input|0.226415022388749|\\r\\n|1.5|10|20|p > 1, yields null||\\r\\n|0.1|-1|20|alpha is < 0, yields NaN|NaN|\\r\\n\\r\\n## See also\\r\\n\\r\\n* For computing cumulative beta distribution function, see [beta-cdf()](./beta-cdffunction.md).\\r\\n* For computing probability beta density function, see [beta-pdf()](./beta-pdffunction.md).',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/beta-invfunction\",\"beta-invfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"beta_pdf\",\"Returns the probability density beta function.\",\"```\\r\\nbeta_pdf(0.2, 10.0, 50.0)\\r\\n```\\r\\n\\r\\nThe beta distribution is commonly used to study variation in the percentage of something across samples, such as the fraction of the day people spend watching television.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`beta_pdf(`*x*`, `*alpha*`, `*beta*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *x*: A value at which to evaluate the function.\\r\\n* *alpha*: A parameter of the distribution.\\r\\n* *beta*: A parameter of the distribution.\\r\\n\\r\\n## Returns\\r\\n\\r\\n* The [probability beta density function](https://en.wikipedia.org/wiki/Beta_distribution#Probability_density_function).\\r\\n\\r\\n**Notes**\\r\\n\\r\\nIf any argument is nonnumeric, beta_pdf() returns null value.\\r\\n\\r\\nIf x \\u2264 0 or 1 \\u2264 x, beta_pdf() returns NaN value.\\r\\n\\r\\nIf alpha \\u2264 0 or beta \\u2264 0, beta_pdf() returns the NaN value.\",'```\\r\\ndatatable(x:double, alpha:double, beta:double, comment:string)\\r\\n[\\r\\n    0.5, 10.0, 20.0, \"Valid input\",\\r\\n    1.5, 10.0, 20.0, \"x > 1, yields NaN\",\\r\\n    double(-10), 10.0, 20.0, \"x < 0, yields NaN\",\\r\\n    0.1, double(-1.0), 20.0, \"alpha is < 0, yields NaN\"\\r\\n]\\r\\n| extend r = beta_pdf(x, alpha, beta)\\r\\n```\\r\\n\\r\\n|x|alpha|beta|comment|r|\\r\\n|---|---|---|---|---|\\r\\n|0.5|10|20|Valid input|0.746176019310951|\\r\\n|1.5|10|20|x > 1, yields NaN|NaN|\\r\\n|-10|10|20|x < 0, yields NaN|NaN|\\r\\n|0.1|-1|20|alpha is < 0, yields NaN|NaN|\\r\\n\\r\\n## See also\\r\\n\\r\\n* For computing the inverse of the beta cumulative probability density function, see [beta-inv()](./beta-invfunction.md).\\r\\n* For the standard cumulative beta distribution function, see [beta-cdf()](./beta-cdffunction.md).',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/beta-pdffunction\",\"beta-pdffunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"between\",\"Filters a record set for data matching the values in an inclusive range.\",\"`between` can operate on any numeric, datetime, or timespan expression.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *expr* `between` `(`*leftRange*` .. `*rightRange*`)`\\r\\n\\r\\nIf *expr* expression is datetime - another syntactic sugar syntax is provided:\\r\\n\\r\\n*T* `|` `where` *expr* `between` `(`*leftRangeDateTime*` .. `*rightRangeTimespan*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T* - The tabular input whose records are to be matched.\\r\\n* *expr* - the expression to filter.\\r\\n* *leftRange* - expression of the left range (inclusive).\\r\\n* *rightRange* - expression of the right range (inclusive).\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate of (*expr* >= *leftRange* and *expr* <= *rightRange*) evaluates to `true`.\",\"### Filter numeric values\\r\\n\\r\\n```\\r\\nrange x from 1 to 100 step 1\\r\\n| where x between (50 .. 55)\\r\\n```\\r\\n\\r\\n|x|\\r\\n|---|\\r\\n|50|\\r\\n|51|\\r\\n|52|\\r\\n|53|\\r\\n|54|\\r\\n|55|\\r\\n\\r\\n### Filter datetime\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| where StartTime between (datetime(2007-07-27) .. datetime(2007-07-30))\\r\\n| count\\r\\n```\\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|476|\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| where StartTime between (datetime(2007-07-27) .. 3d)\\r\\n| count\\r\\n```\\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|476|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/betweenoperator\",\"betweenoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"bin\",\"Rounds values down to an integer multiple of a given bin size.\",'Used frequently in combination with [`summarize by ...`](./summarizeoperator.md).\\r\\nIf you have a scattered set of values, they\\'ll be grouped into a smaller set of specific values.\\r\\n\\r\\nNull values, a null bin size, or a negative bin size will result in null.\\r\\n\\r\\nAlias to `floor()` function.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`bin(`*value*`,`*roundTo*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *value*: A number, date, or [timespan](scalar-data-types/timespan.md).\\r\\n* *roundTo*: The \"bin size\". A number or timespan that divides *value*.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe nearest multiple of *roundTo* below *value*.\\r\\n\\r\\n```\\r\\n(toint((value/roundTo))) * roundTo`\\r\\n```',\"Expression | Result\\r\\n---|---\\r\\n`bin(4.5, 1)` | `4.0`\\r\\n`bin(time(16d), 7d)` | `14d`\\r\\n`bin(datetime(1970-05-11 13:45:07), 1d)`|  `datetime(1970-05-11)`\\r\\n\\r\\nThe following expression calculates a histogram of durations,\\r\\nwith a bucket size of 1 second:\\r\\n\\r\\n```\\r\\nT | summarize Hits=count() by bin(Duration, 1s)\\r\\n```\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/binfunction\",\"binfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"bin_at\",'Rounds values down to a fixed-size \"bin\", with control over the bin\\'s starting point.\\r\\n(See also [`bin function`](./binfunction.md).)','## Syntax\\r\\n\\r\\n`bin_at` `(`*Expression*`,` *BinSize*`, ` *FixedPoint*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *Expression*: A scalar expression of a numeric type (including `datetime` and `timespan`)\\r\\n  indicating the value to round.\\r\\n* *BinSize*: A scalar constant of a numeric type or `timespan` (for a `datetime` or `timespan` *Expression*) indicating\\r\\n  the size of each bin.\\r\\n* *FixedPoint*: A scalar constant of the same type as *Expression* indicating\\r\\n  one value of *Expression, which is a \"fixed point\" (that is, a value `fixed_point`\\r\\n  for which `bin_at(fixed_point, bin_size, fixed_point) == fixed_point`.)\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe nearest multiple of *BinSize* below *Expression*, shifted so that *FixedPoint*\\r\\nwill be translated into itself.','|Expression                                                                    |Result                           |Comments                   |\\r\\n|------------------------------------------------------------------------------|---------------------------------|---------------------------|\\r\\n|`bin_at(6.5, 2.5, 7)`                                                         |`4.5`                            ||\\r\\n|`bin_at(time(1h), 1d, 12h)`                                                   |`-12h`                           ||\\r\\n|`bin_at(datetime(2017-05-15 10:20:00.0), 1d, datetime(1970-01-01 12:00:00.0))`|`datetime(2017-05-14 12:00:00.0)`|All bins will be at noon   |\\r\\n|`bin_at(datetime(2017-05-17 10:20:00.0), 7d, datetime(2017-06-04 00:00:00.0))`|`datetime(2017-05-14 00:00:00.0)`|All bins will be on Sundays|\\r\\n\\r\\nIn the following example, notice that the `\"fixed point\"` arg is returned as one of the bins and the other bins are aligned to it based on the `bin_size`. Also note that each datetime bin represents the starting time of that bin:\\r\\n\\r\\n```\\r\\n\\r\\ndatatable(Date:datetime, Num:int)[\\r\\ndatetime(2018-02-24T15:14),3,\\r\\ndatetime(2018-02-23T16:14),4,\\r\\ndatetime(2018-02-26T15:14),5]\\r\\n| summarize sum(Num) by bin_at(Date, 1d, datetime(2018-02-24 15:14:00.0000000)) \\r\\n```\\r\\n\\r\\n|Date|sum_Num|\\r\\n|---|---|\\r\\n|2018-02-23 15:14:00.0000000|4|\\r\\n|2018-02-24 15:14:00.0000000|3|\\r\\n|2018-02-26 15:14:00.0000000|5|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/binatfunction\",\"binatfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"bin_auto\",'Rounds values down to a fixed-size \"bin\", with control over the bin size and starting point provided by a query property.','## Syntax\\r\\n\\r\\n`bin_auto` `(` *Expression* `)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *Expression*: A scalar expression of a numeric type indicating the value to round.\\r\\n\\r\\n## Client request properties\\r\\n\\r\\n* `query_bin_auto_size`: A numeric literal indicating the size of each bin.\\r\\n* `query_bin_auto_at`: A numeric literal indicating one value of *Expression* which is a \"fixed point\" (that is, a value `fixed_point`\\r\\n  for which `bin_auto(fixed_point)` == `fixed_point`.)\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe nearest multiple of `query_bin_auto_at` below *Expression*, shifted so that `query_bin_auto_at`\\r\\nwill be translated into itself.',\"```\\r\\nset query_bin_auto_size=1h;\\r\\nset query_bin_auto_at=datetime(2017-01-01 00:05);\\r\\nrange Timestamp from datetime(2017-01-01 00:05) to datetime(2017-01-01 02:00) step 1m\\r\\n| summarize count() by bin_auto(Timestamp)\\r\\n```\\r\\n\\r\\n|Timestamp                    | count_|\\r\\n|-----------------------------|-------|\\r\\n|2017-01-01 00:05:00.0000000  | 60    |\\r\\n|2017-01-01 01:05:00.0000000  | 56    |\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/bin-autofunction\",\"bin-autofunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"binary_all_and\",\"Accumulates values using the binary `AND` operation for each summarization group, or in total if a group is not specified.\",\"[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`binary_all_and` `(`*Expr*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *Expr* | long | &check; | A long number used for the binary `AND`  calculation. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns an aggregated value using the binary `AND` operation over records for each summarization group, or in total if a group is not specified.\",\"The following example produces `CAFEF00D` using binary `AND` operations:\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0tJLAHCpJxUjbzSXKuc/Lx0Ta5oLgUFgwo3KNBRQHANDNx0wDxniJwLhOfm6OYKVsoVy1WjUFyam5tYlFmVqlCUWlyaU6Jgq1CSX1pQkFqkUZKfkVqhkZSZl1hUGZ+YkxOfmJcCslhTUxMAwZHTS4kAAAA=)**\\\\]**\\r\\n\\r\\n```\\r\\ndatatable(num:long)\\r\\n[\\r\\n  0xFFFFFFFF, \\r\\n  0xFFFFF00F,\\r\\n  0xCFFFFFFD,\\r\\n  0xFAFEFFFF,\\r\\n]\\r\\n| summarize result = toupper(tohex(binary_all_and(num)))\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|result|\\r\\n|---|\\r\\n|CAFEF00D|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/binary-all-and-aggfunction\",\"binary-all-and-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"binary_all_or\",\"Accumulates values using the binary `OR` operation for each summarization group, or in total if a group is not specified.\",\"[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`binary_all_or` `(`*Expr*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *Expr* | long | &check; | A long number used for the binary `AND`  calculation. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns an aggregated value using the binary `OR` operation over records for each summarization group, or in total if a group is not specified.\",\"The following example produces `CAFEF00D` using binary `OR` operations:\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0tJLAHCpJxUjbzSXKuc/Lx0Ta5oLgUFgwoLEDAwsNAB80yMDMAAwjMwMDczR+KBgamOAlcsV41CcWlubmJRZlWqQlFqcWlOiYKtQkl+aUFBapFGSX5GaoVGUmZeYlFlfGJOTnx+EcheTU1NAEGLHNSIAAAA)**\\\\]**\\r\\n\\r\\n```\\r\\ndatatable(num:long)\\r\\n[\\r\\n  0x88888008,\\r\\n  0x42000000,\\r\\n  0x00767000,\\r\\n  0x00000005, \\r\\n]\\r\\n| summarize result = toupper(tohex(binary_all_or(num)))\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|result|\\r\\n|---|\\r\\n|CAFEF00D|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/binary-all-or-aggfunction\",\"binary-all-or-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"binary_all_xor\",\"Accumulates values using the binary `XOR` operation for each summarization group, or in total if a group is not specified.\",\"[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`binary_all_xor` `(`*Expr*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *Expr* | long | &check; | A long number used for the binary `AND`  calculation. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a value that is aggregated using the binary `XOR` operation over records for each summarization group, or in total if a group is not specified.\",\"The following example produces `CAFEF00D` using binary `XOR` operations:\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0tJLAHCpJxUjbzSXKuc/Lx0Ta5oLgUFgwoTExMDENYB8wxdIRDCszRwdHJyNLCE8AwMDJwMDUwddbhiuWoUiktzcxOLMqtSFYpSi0tzShRsFUrySwsKUos0SvIzUis0kjLzEosq4xNzcuIr8otA9mpqagIAuXol8IgAAAA=)**\\\\]**\\r\\n\\r\\n```\\r\\ndatatable(num:long)\\r\\n[\\r\\n  0x44404440,\\r\\n  0x1E1E1E1E,\\r\\n  0x90ABBA09,\\r\\n  0x000B105A,\\r\\n]\\r\\n| summarize result = toupper(tohex(binary_all_xor(num)))\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|results|\\r\\n|--|\\r\\n|CAFEF00D|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/binary-all-xor-aggfunction\",\"binary-all-xor-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"binary_and\",\"Returns a result of the bitwise `and` operation between two values.\",\"```\\r\\nbinary_and(x,y)\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`binary_and(`*num1*`,` *num2* `)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *num1*, *num2*: long numbers.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns logical AND operation on a pair of numbers: num1 & num2.\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/binary-andfunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"binary_not\",\"Returns a bitwise negation of the input value.\",\"```\\r\\nbinary_not(x)\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`binary_not(`*num1*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *num1*: numeric\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns logical NOT operation on a number: num1.\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/binary-notfunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"binary_or\",\"Returns a result of the bitwise `or` operation of the two values.\",\"```\\r\\nbinary_or(x,y)\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`binary_or(`*num1*`,` *num2* `)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *num1*, *num2*: long numbers.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns logical OR operation on a pair of numbers: num1 | num2.\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/binary-orfunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"binary_shift_left\",\"Returns binary shift left operation on a pair of numbers.\",\"```\\r\\nbinary_shift_left(x,y)\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`binary_shift_left(`*num1*`,` *num2* `)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *num1*, *num2*: int numbers.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns binary shift left operation on a pair of numbers: num1 << (num2%64).\\r\\nIf n is negative a NULL value is returned.\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/binary-shift-leftfunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"binary_shift_right\",\"Returns binary shift right operation on a pair of numbers.\",\"```\\r\\nbinary_shift_right(x,y)\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`binary_shift_right(`*num1*`,` *num2* `)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *num1*, *num2*: long numbers.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns binary shift right operation on a pair of numbers: num1 >> (num2%64).\\r\\nIf n is negative a NULL value is returned.\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/binary-shift-rightfunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"binary_xor\",\"Returns a result of the bitwise `xor` operation of the two values.\",\"```\\r\\nbinary_xor(x,y)\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`binary_xor(`*num1*`,` *num2* `)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *num1*, *num2*: long numbers.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns logical XOR operation on a pair of numbers: num1 ^ num2.\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/binary-xorfunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"bitset_count_ones\",\"Returns the number of set bits in the binary representation of a number.\",\"```\\r\\nbitset_count_ones(42)\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`bitset_count_ones(`*num1*``)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *num1*: long or integer number.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the number of set bits in the binary representation of a number.\",\"```\\r\\n// 42 = 32+8+2 : b'00101010' == 3 bits set\\r\\nprint ones = bitset_count_ones(42) \\r\\n```\\r\\n\\r\\n|ones|\\r\\n|---|\\r\\n|3|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/bitset-count-onesfunction\",\"bitset-count-onesfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"buildschema\",\"Builds the minimal schema that admits all values of *DynamicExpr*.\",\"[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`buildschema` `(`*DynamicExpr*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*DynamicExpr*| dynamic | &check; | Expression used for the aggregation calculation.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the minimal schema that admits all values of *DynamicExpr*.\\r\\n\\r\\n> [!TIP]\\r\\n> If `buildschema(json_column)` gives a syntax error:\\r\\n>\\r\\n> > *Is your `json_column` a string rather than a dynamic object?*\\r\\n>\\r\\n> then use `buildschema(parsejson(json_column))`.\",'The following example builds a schema based on:\\r\\n\\r\\n* `{\"x\":1, \"y\":3.5}`\\r\\n* `{\"x\":\"somevalue\", \"z\":[1, 2, 3]}`\\r\\n* `{\"y\":{\"w\":\"zzz\"}, \"t\":[\"aa\", \"bb\"], \"z\":[\"foo\"]}`\\r\\n\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA2WOQQrCMBBF9z3F8FctBEGLm1ylZDFpIgYSA7ZVm9q7O2p3nVkN/73POB5lbfT1g+PkNbn5xin0DXUVyWxnveAFfVSEGbo9nNdG7WMMOflfDQQs0J0IJ0Wt2eNSs+ApTikFq+Cj4GD+mtbCbAW45AzRK1O9aZhS4nsonuwUohv6q0/8/7v5AOnXbR3IAAAA)**\\\\]**\\r\\n\\r\\n```\\r\\ndatatable(value: dynamic) [\\r\\n    dynamic({\"x\":1, \"y\":3.5}),\\r\\n    dynamic({\"x\":\"somevalue\", \"z\":[1, 2, 3]}),\\r\\n    dynamic({\"y\":{\"w\":\"zzz\"}, \"t\":[\"aa\", \"bb\"], \"z\":[\"foo\"]})\\r\\n]\\r\\n| summarize buildschema(value)\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|schema_value|\\r\\n|--|\\r\\n|{\"x\":[\"long\",\"string\"],\"y\":[\"double\",{\"w\":\"string\"}],\"z\":{\"`indexer`\":[\"long\",\"string\"]},\"t\":{\"`indexer`\":\"string\"}}|\\r\\n\\r\\nThe resulting schema tells us that:\\r\\n\\r\\n* The root object is a container with four properties named x, y, z, and t.\\r\\n* The property called `x` is of type *long* or of type *string*.\\r\\n* The property called `y` ii of type *double*, or another container with a property called `w` of type *string*.\\r\\n* The `indexer` keyword indicates that `z` and `t` are arrays.\\r\\n* Each item in the array `z` is of type *long* or of type *string*.\\r\\n* `t` is an array of strings.\\r\\n* Every property is implicitly optional, and any array may be empty.\\r\\n\\r\\n\\r\\n### Schema model\\r\\n\\r\\nThe syntax of the returned schema is:\\r\\n\\r\\nContainer ::= \\'{\\' Named-type* \\'}\\';\\r\\nNamed-type: := (name | \\'\"`indexer`\"\\') \\':\\' Type;\\r\\nType ::= Primitive-type | Union-type | Container;\\r\\nUnion-type ::= \\'[\\' Type* \\']\\';\\r\\nPrimitive-type ::= \"long\" | \"string\" | ...;\\r\\n\\r\\nThe values are equivalent to a subset of TypeScript type annotations, encoded as a Kusto dynamic value.\\r\\nIn TypeScript, the example schema would be:\\r\\n\\r\\n```typescript\\r\\nvar someobject:\\r\\n{\\r\\n    x?: (number | string),\\r\\n    y?: (number | { w?: string}),\\r\\n    z?: { [n:number] : (long | string)},\\r\\n    t?: { [n:number]: string }\\r\\n}\\r\\n```',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/buildschema-aggfunction\",\"buildschema-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"case\",\"Evaluates a list of predicates and returns the first result expression whose predicate is satisfied.\",\"If neither of the predicates return `true`, the result of the last expression (the `else`) is returned.\\r\\nAll odd arguments (count starts at 1) must be expressions that evaluate to a  `boolean` value.\\r\\nAll even arguments (the `then`s) and the last argument (the `else`) must be of the same type.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`case(`*predicate_1*, *then_1*,\\r\\n       *predicate_2*, *then_2*,\\r\\n       *predicate_3*, *then_3*,\\r\\n       *else*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *predicate_i*: An expression that evaluates to a `boolean` value.\\r\\n* *then_i*: An expression that gets evaluated and its value is returned from the function if *predicate_i* is the first predicate that evaluates to `true`.\\r\\n* *else*: An expression that gets evaluated and its value is returned from the function if neither of the *predicate_i* evaluate to `true`.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe value of the first *then_i* whose *predicate_i* evaluates to `true`, or the value of *else* if neither of the predicates are satisfied.\",'```\\r\\nrange Size from 1 to 15 step 2\\r\\n| extend bucket = case(Size <= 3, \"Small\", \\r\\n                       Size <= 10, \"Medium\", \\r\\n                       \"Large\")\\r\\n```\\r\\n\\r\\n|Size|bucket|\\r\\n|---|---|\\r\\n|1|Small|\\r\\n|3|Small|\\r\\n|5|Medium|\\r\\n|7|Medium|\\r\\n|9|Medium|\\r\\n|11|Large|\\r\\n|13|Large|\\r\\n|15|Large|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/casefunction\",\"casefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"ceiling\",\"Calculates the smallest integer greater than, or equal to, the specified numeric expression.\",\"## Syntax\\r\\n\\r\\n`ceiling(`*x*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *x*: A real number.\\r\\n\\r\\n## Returns\\r\\n\\r\\n* The smallest integer greater than, or equal to, the specified numeric expression.\",\"```\\r\\nprint c1 = ceiling(-1.1), c2 = ceiling(0), c3 = ceiling(0.9)\\r\\n```\\r\\n\\r\\n|c1|c2|c3|\\r\\n|---|---|---|\\r\\n|-1|0|1|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/ceilingfunction\",\"ceilingfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"cluster\",\"Changes the reference of the query to a remote cluster.\",\"```\\r\\ncluster('help').database('Sample').SomeTable\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`cluster(`*stringConstant*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *stringConstant*: Name of the cluster that is referenced. Cluster name can be either\\r\\na fully qualified DNS name, or a string that will be suffixed with `.kusto.windows.net`. Argument has to be _constant_ prior to the query's execution,\\r\\ni.e. cannot come from sub-query evaluation.\\r\\n\\r\\n**Notes**\\r\\n\\r\\n* For accessing database within the same cluster - use [database()](databasefunction.md) function.\\r\\n* More information about cross-cluster and cross-database queries available [here](cross-cluster-or-database-queries.md)\",\"### Use cluster() to access remote cluster\\r\\n\\r\\nThe next query can be run on any of the Kusto clusters.\\r\\n\\r\\n```\\r\\ncluster('help').database('Samples').StormEvents | count\\r\\n\\r\\ncluster('help.kusto.windows.net').database('Samples').StormEvents | count\\r\\n```\\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|59066|\\r\\n\\r\\n### Use cluster() inside let statements\\r\\n\\r\\nThe same query as above can be rewritten to use inline function (let statement) that\\r\\nreceives a parameter `clusterName` - which is passed into the cluster() function.\\r\\n\\r\\n```\\r\\nlet foo = (clusterName:string)\\r\\n{\\r\\n    cluster(clusterName).database('Samples').StormEvents | count\\r\\n};\\r\\nfoo('help')\\r\\n```\\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|59066|\\r\\n\\r\\n### Use cluster() inside Functions\\r\\n\\r\\nThe same query as above can be rewritten to be used in a function that\\r\\nreceives a parameter `clusterName` - which is passed into the cluster() function.\\r\\n\\r\\n```\\r\\n.create function foo(clusterName:string)\\r\\n{\\r\\n    cluster(clusterName).database('Samples').StormEvents | count\\r\\n};\\r\\n```\\r\\n\\r\\n**Note:** such functions can be used only locally and not in the cross-cluster query.\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/clusterfunction\",\"clusterfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"coalesce\",\"Evaluates a list of expressions and returns the first non-null (or non-empty for string) expression.\",'```\\r\\ncoalesce(tolong(\"not a number\"), tolong(\"42\"), 33) == 42\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`coalesce(`*expr_1*`, `*expr_2*`,` ...)\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *expr_i*: A scalar expression, to be evaluated.\\r\\n\\r\\n- All arguments must be of the same type.\\r\\n- Maximum of 64 arguments is supported.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe value of the first *expr_i* whose value isn\\'t null (or not-empty for string expressions).','```\\r\\nprint result=coalesce(tolong(\"not a number\"), tolong(\"42\"), 33)\\r\\n```\\r\\n\\r\\n|result|\\r\\n|---|\\r\\n|42|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/coalescefunction\",\"coalescefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"consume\",\"Consumes the tabular data stream handed to the operator.\",\"The `consume` operator is mostly used for triggering the query side-effect without actually returning\\r\\nthe results back to the caller.\\r\\n\\r\\n```\\r\\nT | consume\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`consume` [`decodeblocks` `=` *DecodeBlocks*]\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *DecodeBlocks*: A constant Boolean value. If set to `true`, or if the request\\r\\n  property `perftrace` is set to `true`, the `consume` operator won't just\\r\\n  enumerate the records at its input, but actually force each value in those\\r\\n  records to be decompressed and decoded.\\r\\n\\r\\nThe `consume` operator can be used for estimating the\\r\\ncost of a query without actually delivering the results back to the client.\\r\\n(The estimation isn't exact for various reasons; for example, `consume`\\r\\nis calculated distributively, so `T | consume` won't transmit the table's\\r\\ndata between the nodes of the cluster.)\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/consumeoperator\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"contains\",\"Filters a record set for data containing a case-insensitive string. `contains` searches for characters rather than [terms](datatypes-string-operators.md#what-is-a-term) of three or more characters. The query scans the values in the column, which is slower than looking up a term in a term index.\",'The following table provides a comparison of the `contains` operators:\\r\\n\\r\\n|Operator   |Description   |Case-Sensitive  |Example (yields `true`)  |\\r\\n|-----------|--------------|----------------|-------------------------|\\r\\n|[`contains`](contains-operator.md) |RHS occurs as a subsequence of LHS |No |`\"FabriKam\" contains \"BRik\"`|\\r\\n|[`!contains`](not-contains-operator.md) |RHS doesn\\'t occur in LHS |No |`\"Fabrikam\" !contains \"xyz\"`|\\r\\n|[`contains_cs`](contains-cs-operator.md) |RHS occurs as a subsequence of LHS |Yes |`\"FabriKam\" contains_cs \"Kam\"`|\\r\\n|[`!contains_cs`](not-contains-cs-operator.md)   |RHS doesn\\'t occur in LHS |Yes |`\"Fabrikam\" !contains_cs \"Kam\"`|\\r\\n\\r\\n> [!NOTE]\\r\\n> The following abbreviations are used in the table above:\\r\\n>\\r\\n> * RHS = right hand side of the expression\\r\\n> * LHS = left hand side of the expression\\r\\n\\r\\nFor further information about other operators and to determine which operator is most appropriate for your query, see [datatype string operators](datatypes-string-operators.md).\\r\\n\\r\\nCase-insensitive operators are currently supported only for ASCII-text. For non-ASCII comparison, use the [tolower()](tolowerfunction.md) function.\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n> [!NOTE]\\r\\n> Performance depends on the type of search and the structure of the data.\\r\\n\\r\\nFor better performance, try the case-sensitive version of an operator, for example, `contains_cs`, not `contains`.\\r\\n\\r\\nIf you\\'re testing for the presence of a symbol or alphanumeric word that is bound by non-alphanumeric characters at the start or end of a field, for better performance, try `has` or `in`. Also, `has` works faster than `contains`, `startswith`, or `endswith`, however it isn\\'t as precise and could provide unwanted records.\\r\\n\\r\\nFor best practices, see [Query best practices](best-practices.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *col* `contains` `(`*expression*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T* - The tabular input whose records are to be filtered.\\r\\n* *col* - The column to filter.\\r\\n* *expression* - Scalar or literal expression.\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.','```\\r\\nStormEvents\\r\\n    | summarize event_count=count() by State\\r\\n    | where State contains \"enn\"\\r\\n    | where event_count > 10\\r\\n    | project State, event_count\\r\\n    | render table\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|event_count|\\r\\n|-----|-----------|\\r\\n|PENNSYLVANIA|1687|\\r\\n|TENNESSEE|1125|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/contains-operator\",\"contains-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"contains_cs\",\"Filters a record set for data containing a case-sensitive string. `contains` searches for characters rather than [terms](datatypes-string-operators.md#what-is-a-term) of three or more characters. The query scans the values in the column, which is slower than looking up a term in a term index.\",'The following table provides a comparison of the `contains` operators:\\r\\n\\r\\n|Operator   |Description   |Case-Sensitive  |Example (yields `true`)  |\\r\\n|-----------|--------------|----------------|-------------------------|\\r\\n|[`contains`](contains-operator.md) |RHS occurs as a subsequence of LHS |No |`\"FabriKam\" contains \"BRik\"`|\\r\\n|[`!contains`](not-contains-operator.md) |RHS doesn\\'t occur in LHS |No |`\"Fabrikam\" !contains \"xyz\"`|\\r\\n|[`contains_cs`](contains-cs-operator.md) |RHS occurs as a subsequence of LHS |Yes |`\"FabriKam\" contains_cs \"Kam\"`|\\r\\n|[`!contains_cs`](not-contains-cs-operator.md)   |RHS doesn\\'t occur in LHS |Yes |`\"Fabrikam\" !contains_cs \"Kam\"`|\\r\\n\\r\\n> [!NOTE]\\r\\n> The following abbreviations are used in the table above:\\r\\n>\\r\\n> * RHS = right hand side of the expression\\r\\n> * LHS = left hand side of the expression\\r\\n\\r\\nFor further information about other operators and to determine which operator is most appropriate for your query, see [datatype string operators](datatypes-string-operators.md).\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n> [!NOTE]\\r\\n> Performance depends on the type of search and the structure of the data.\\r\\nFor faster results, use the case-sensitive version of an operator, for example, `contains_cs`, not `contains`.\\r\\n\\r\\nIf you\\'re testing for the presence of a symbol or alphanumeric word that is bound by non-alphanumeric characters at the start or end of a field, for faster results use `has` or `in`. Also, `has` works faster than `contains`, `startswith`, or `endswith`, however it isn\\'t as precise and could provide unwanted records.\\r\\n\\r\\nFor best practices, see [Query best practices](best-practices.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *col* `contains_cs` `(`*expression*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T* - The tabular input whose records are to be filtered.\\r\\n* *col* - The column to filter.\\r\\n* *expression* - Scalar or literal expression.\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.','```\\r\\nStormEvents\\r\\n    | summarize event_count=count() by State\\r\\n    | where State contains_cs \"AS\"\\r\\n    | count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Count|\\r\\n|-----|\\r\\n|8|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/contains-cs-operator\",\"contains-cs-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"convert_angle\",\"Convert an angle value from one unit to another.\",\"## Syntax\\r\\n\\r\\n`convert_angle(`*value*`,`*from*`,`*to*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| `value` | real | &check; | The value to be converted. |\\r\\n| `from` | string | &check; | The unit to convert from. For possible values, see [Conversion units](#conversion-units). |\\r\\n| `to` | string | &check; | The unit to convert to. For possible values, see [Conversion units](#conversion-units). |\\r\\n\\r\\n### Conversion units\\r\\n\\r\\n* Arcminute\\r\\n* Arcsecond\\r\\n* Centiradian\\r\\n* Deciradian\\r\\n* Degree\\r\\n* Gradian\\r\\n* Microdegree\\r\\n* Microradian\\r\\n* Millidegree\\r\\n* Milliradian\\r\\n* Nanodegree\\r\\n* Nanoradian\\r\\n* NatoMil\\r\\n* Radian\\r\\n* Revolution\\r\\n* Tilt\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the input value converted from one angle unit to another.\",\"**\\\\[**[**Click to run query**]( https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShKLS7NKVGwVUjOzytLLSqJT8xLz0nVMNQz0lFQd0lNL0pNVQeyHIuSczPzSktS1TUBit/6iDgAAAA=)**\\\\]**\\r\\n\\r\\n```\\r\\nprint result = convert_angle(1.2, 'Degree', 'Arcminute')\\r\\n```\\r\\n\\r\\n|result|\\r\\n|---|\\r\\n|72|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/convert-angle-function\",\"convert-angle-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"convert_energy\",\"Convert an energy value from one unit to another.\",\"## Syntax\\r\\n\\r\\n`convert_energy(`*value*`,`*from*`,`*to*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| `value` | real | &check; | The value to be converted. |\\r\\n| `from` | string | &check; | The unit to convert from. For possible values, see [Conversion units](#conversion-units). |\\r\\n| `to` | string | &check; | The unit to convert to. For possible values, see [Conversion units](#conversion-units). |\\r\\n\\r\\n### Conversion units\\r\\n\\r\\n* BritishThermalUnit\\r\\n* Calorie\\r\\n* DecathermEc\\r\\n* DecathermImperial\\r\\n* DecathermUs\\r\\n* ElectronVolt\\r\\n* Erg\\r\\n* FootPound\\r\\n* GigabritishThermalUnit\\r\\n* GigaelectronVolt\\r\\n* Gigajoule\\r\\n* GigawattDay\\r\\n* GigawattHour\\r\\n* HorsepowerHour\\r\\n* Joule\\r\\n* KilobritishThermalUnit\\r\\n* Kilocalorie\\r\\n* KiloelectronVolt\\r\\n* Kilojoule\\r\\n* KilowattDay\\r\\n* KilowattHour\\r\\n* MegabritishThermalUnit\\r\\n* Megacalorie\\r\\n* MegaelectronVolt\\r\\n* Megajoule\\r\\n* MegawattDay\\r\\n* MegawattHour\\r\\n* Millijoule\\r\\n* TeraelectronVolt\\r\\n* TerawattDay\\r\\n* TerawattHour\\r\\n* ThermEc\\r\\n* ThermImperial\\r\\n* ThermUs\\r\\n* WattDay\\r\\n* WattHour\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the input value converted from one energy unit to another.\",\"**\\\\[**[**Click to run query**]( https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShKLS7NKVGwVUjOzytLLSqJT81LLUqv1DDUM9JRUPfKL81JVQcynIoySzKLM0IyUotyE3NC8zJL1DUBDSFj0EEAAAA=)**\\\\]**\\r\\n\\r\\n```\\r\\nprint result = convert_energy(1.2, 'Joule', 'BritishThermalUnit')\\r\\n```\\r\\n\\r\\n|result|\\r\\n|---|\\r\\n|0.00113738054437598|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/convert-energy-function\",\"convert-energy-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"convert_force\",\"Convert a force value from one unit to another.\",\"## Syntax\\r\\n\\r\\n`convert_force(`*value*`,`*from*`,`*to*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| `value` | real | &check; | The value to be converted. |\\r\\n| `from` | string | &check; | The unit to convert from. For possible values, see [Conversion units](#conversion-units). |\\r\\n| `to` | string | &check; | The unit to convert to. For possible values, see [Conversion units](#conversion-units). |\\r\\n\\r\\n### Conversion units\\r\\n\\r\\n* Decanewton\\r\\n* Dyn\\r\\n* KilogramForce\\r\\n* Kilonewton\\r\\n* KiloPond\\r\\n* KilopoundForce\\r\\n* Meganewton\\r\\n* Micronewton\\r\\n* Millinewton\\r\\n* Newton\\r\\n* OunceForce\\r\\n* Poundal\\r\\n* PoundForce\\r\\n* ShortTonForce\\r\\n* TonneForce\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the input value converted from one force unit to another.\",\"**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShKLS7NKVGwVUjOzytLLSqJT8svSk7VMNQz0lFQ90stL8nPUweyXFKTE/MgPE0AhSGK6TkAAAA=)**\\\\]**\\r\\n\\r\\n```\\r\\nprint result = convert_force(1.2, 'Newton', 'Decanewton')\\r\\n```\\r\\n\\r\\n|result|\\r\\n|---|\\r\\n|0.12|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/convert-force-function\",\"convert-force-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"convert_length\",\"Convert a length value from one unit to another.\",\"## Syntax\\r\\n\\r\\n`convert_length(`*value*`,`*from*`,`*to*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| `value` | real | &check; | The value to be converted. |\\r\\n| `from` | string | &check; | The unit to convert from. For possible values, see [Conversion units](#conversion-units). |\\r\\n| `to` | string | &check; | The unit to convert to. For possible values, see [Conversion units](#conversion-units). |\\r\\n\\r\\n### Conversion units\\r\\n\\r\\n* Angstrom\\r\\n* AstronomicalUnit\\r\\n* Centimeter\\r\\n* Chain\\r\\n* DataMile\\r\\n* Decameter\\r\\n* Decimeter\\r\\n* DtpPica\\r\\n* DtpPoint\\r\\n* Fathom\\r\\n* Foot\\r\\n* Hand\\r\\n* Hectometer\\r\\n* Inch\\r\\n* KilolightYear\\r\\n* Kilometer\\r\\n* Kiloparsec\\r\\n* LightYear\\r\\n* MegalightYear\\r\\n* Megaparsec\\r\\n* Meter\\r\\n* Microinch\\r\\n* Micrometer\\r\\n* Mil\\r\\n* Mile\\r\\n* Millimeter\\r\\n* Nanometer\\r\\n* NauticalMile\\r\\n* Parsec\\r\\n* PrinterPica\\r\\n* PrinterPoint\\r\\n* Shackle\\r\\n* SolarRadius\\r\\n* Twip\\r\\n* UsSurveyFoot\\r\\n* Yard\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the input value converted from one length unit to another.\",\"**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShKLS7NKVGwVUjOzytLLSqJz0nNSy/J0DDUM9JRUPdNLUktUgcy3PLzS9Q1AWLmFfkzAAAA)**\\\\]**\\r\\n\\r\\n```\\r\\nprint result = convert_length(1.2, 'Meter', 'Foot')\\r\\n```\\r\\n\\r\\n|result|\\r\\n|---|\\r\\n|3.93700787401575|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/convert-length-function\",\"convert-length-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"convert_mass\",\"Convert a mass value from one unit to another.\",\"## Syntax\\r\\n\\r\\n`convert_mass(`*value*`,`*from*`,`*to*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| `value` | real | &check; | The value to be converted. |\\r\\n| `from` | string | &check; | The unit to convert from. For possible values, see [Conversion units](#conversion-units). |\\r\\n| `to` | string | &check; | The unit to convert to. For possible values, see [Conversion units](#conversion-units). |\\r\\n\\r\\n### Conversion units\\r\\n\\r\\n* Centigram\\r\\n* Decagram\\r\\n* Decigram\\r\\n* EarthMass\\r\\n* Grain\\r\\n* Gram\\r\\n* Hectogram\\r\\n* Kilogram\\r\\n* Kilopound\\r\\n* Kilotonne\\r\\n* LongHundredweight\\r\\n* LongTon\\r\\n* Megapound\\r\\n* Megatonne\\r\\n* Microgram\\r\\n* Milligram\\r\\n* Nanogram\\r\\n* Ounce\\r\\n* Pound\\r\\n* ShortHundredweight\\r\\n* ShortTon\\r\\n* Slug\\r\\n* SolarMass\\r\\n* Stone\\r\\n* Tonne\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the input value converted from one mass unit to another.\",\"**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShKLS7NKVGwVUjOzytLLSqJz00sLtYw1DPSUVD3zszJTy9KzFUHsgPyS/NS1DUBemVMijUAAAA=)**\\\\]**\\r\\n\\r\\n```\\r\\nprint result = convert_mass(1.2, 'Kilogram', 'Pound')\\r\\n```\\r\\n\\r\\n|result|\\r\\n|---|\\r\\n|2.64554714621853|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/convert-mass-function\",\"convert-mass-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"convert_speed\",\"Convert a speed value from one unit to another.\",\"## Syntax\\r\\n\\r\\n`convert_speed(`*value*`,`*from*`,`*to*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| `value` | real | &check; | The value to be converted. |\\r\\n| `from` | string | &check; | The unit to convert from. For possible values, see [Conversion units](#conversion-units).|\\r\\n| `to` | string | &check; | The unit to convert to. For possible values, see [Conversion units](#conversion-units). |\\r\\n\\r\\n### Conversion units\\r\\n\\r\\n* CentimeterPerHour\\r\\n* CentimeterPerMinute\\r\\n* CentimeterPerSecond\\r\\n* DecimeterPerMinute\\r\\n* DecimeterPerSecond\\r\\n* FootPerHour\\r\\n* FootPerMinute\\r\\n* FootPerSecond\\r\\n* InchPerHour\\r\\n* InchPerMinute\\r\\n* InchPerSecond\\r\\n* KilometerPerHour\\r\\n* KilometerPerMinute\\r\\n* KilometerPerSecond\\r\\n* Knot\\r\\n* MeterPerHour\\r\\n* MeterPerMinute\\r\\n* MeterPerSecond\\r\\n* MicrometerPerMinute\\r\\n* MicrometerPerSecond\\r\\n* MilePerHour\\r\\n* MillimeterPerHour\\r\\n* MillimeterPerMinute\\r\\n* MillimeterPerSecond\\r\\n* NanometerPerMinute\\r\\n* NanometerPerSecond\\r\\n* UsSurveyFootPerHour\\r\\n* UsSurveyFootPerMinute\\r\\n* UsSurveyFootPerSecond\\r\\n* YardPerHour\\r\\n* YardPerMinute\\r\\n* YardPerSecond\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the input value converted from one speed unit to another.\",\"**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShKLS7NKVGwVUjOzytLLSqJLy5ITU3RMNQz0lFQ900tSS0KSC0KTgXKpqgDRZxT80oyc6HCHvmlReqaAK/HOJBIAAAA)**\\\\]**\\r\\n\\r\\n```\\r\\nprint result = convert_speed(1.2, 'MeterPerSecond', 'CentimeterPerHour')\\r\\n```\\r\\n\\r\\n|result|\\r\\n|---|\\r\\n|432000|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/convert-speed-function\",\"convert-speed-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"convert_temperature\",\"Convert a temperature value from one unit to another.\",\"## Syntax\\r\\n\\r\\n`convert_temperature(`*value*`,`*from*`,`*to*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| `value` | real | &check; | The value to be converted. |\\r\\n| `from` | string | &check; | The unit to convert from. For possible values, see [Conversion units](#conversion-units). |\\r\\n| `to` | string | &check; | The unit to convert to. For possible values, see [Conversion units](#conversion-units). |\\r\\n\\r\\n### Conversion units\\r\\n\\r\\n* DegreeCelsius\\r\\n* DegreeDelisle\\r\\n* DegreeFahrenheit\\r\\n* DegreeNewton\\r\\n* DegreeRankine\\r\\n* DegreeReaumur\\r\\n* DegreeRoemer\\r\\n* Kelvin\\r\\n* MillidegreeCelsius\\r\\n* SolarTemperature\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the input value converted from one temperature unit to another.\",\"**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShKLS7NKVGwVUjOzytLLSqJL0nNLUgtSiwpLUrVMNQz0lFQ907NKcvMUweyXFLTi1JTnVNzijNLi9U1AVVJ6WxCAAAA)**\\\\]**\\r\\n\\r\\n```\\r\\nprint result = convert_temperature(1.2, 'Kelvin', 'DegreeCelsius')\\r\\n```\\r\\n\\r\\n|result|\\r\\n|---|\\r\\n|-271.95|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/convert-temperature-function\",\"convert-temperature-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"convert_volume\",\"Convert a volume value from one unit to another.\",\"## Syntax\\r\\n\\r\\n`convert_volume(`*value*`,`*from*`,`*to*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| `value` | real | &check; | The value to be converted. |\\r\\n| `from` | string | &check; | The unit to convert from. For possible values, see [Conversion units](#conversion-units). |\\r\\n| `to` | string | &check; | The unit to convert to. For possible values, see [Conversion units](#conversion-units). |\\r\\n\\r\\n### Conversion units\\r\\n\\r\\n* AcreFoot\\r\\n* AuTablespoon\\r\\n* BoardFoot\\r\\n* Centiliter\\r\\n* CubicCentimeter\\r\\n* CubicDecimeter\\r\\n* CubicFoot\\r\\n* CubicHectometer\\r\\n* CubicInch\\r\\n* CubicKilometer\\r\\n* CubicMeter\\r\\n* CubicMicrometer\\r\\n* CubicMile\\r\\n* CubicMillimeter\\r\\n* CubicYard\\r\\n* Decaliter\\r\\n* DecausGallon\\r\\n* Deciliter\\r\\n* DeciusGallon\\r\\n* HectocubicFoot\\r\\n* HectocubicMeter\\r\\n* Hectoliter\\r\\n* HectousGallon\\r\\n* ImperialBeerBarrel\\r\\n* ImperialGallon\\r\\n* ImperialOunce\\r\\n* ImperialPint\\r\\n* KilocubicFoot\\r\\n* KilocubicMeter\\r\\n* KiloimperialGallon\\r\\n* Kiloliter\\r\\n* KilousGallon\\r\\n* Liter\\r\\n* MegacubicFoot\\r\\n* MegaimperialGallon\\r\\n* Megaliter\\r\\n* MegausGallon\\r\\n* MetricCup\\r\\n* MetricTeaspoon\\r\\n* Microliter\\r\\n* Milliliter\\r\\n* OilBarrel\\r\\n* UkTablespoon\\r\\n* UsBeerBarrel\\r\\n* UsCustomaryCup\\r\\n* UsGallon\\r\\n* UsLegalCup\\r\\n* UsOunce\\r\\n* UsPint\\r\\n* UsQuart\\r\\n* UsTablespoon\\r\\n* UsTeaspoon\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the input value converted from one volume unit to another.\",\"**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAysoyswrUShKLS7NKVGwVUjOzytLLSqJL8vPKc1N1TDUM9JRUHcuTcpM9k0tSS1SB/Ick4tS3fLzS9Q1Abo7scQ8AAAA)**\\\\]**\\r\\n\\r\\n```\\r\\nprint result = convert_volume(1.2, 'CubicMeter', 'AcreFoot')\\r\\n```\\r\\n\\r\\n|result|\\r\\n|---|\\r\\n|0.0009728568|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/convert-volume-function\",\"convert-volume-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"cos\",\"Returns the cosine function.\",\"## Syntax\\r\\n\\r\\n`cos(`*x*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *x*: A real number.\\r\\n\\r\\n## Returns\\r\\n\\r\\n* The result of `cos(x)`\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/cosfunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"cosmosdb_sql_request\",\"The `cosmosdb_sql_request` plugin sends a SQL query to an Azure Cosmos DB SQL network endpoint and returns the results of the query. This plugin is primarily designed for querying small datasets, for example, enriching data with reference data stored in [Azure Cosmos DB](https://docs.microsoft.com/azure/cosmos-db/). The plugin is invoked with the [`evaluate`](evaluateoperator.md) operator.\",'## Syntax\\r\\n\\r\\n`evaluate` `cosmosdb_sql_request` `(` *ConnectionString* `,` *SqlQuery* [`,` *SqlParameters* [`,` *Options*]] `)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n|Argument name | Description | Required/optional |\\r\\n|---|---|---|\\r\\n| *ConnectionString* | A `string` literal indicating the connection string that points to the Azure Cosmos DB collection to query. It must include *AccountEndpoint*, *Database*, and *Collection*. It may include *AccountKey* if a master key is used for authentication. <br> **Example:** `\\'AccountEndpoint=https://cosmosdbacc.documents.azure.com/ ;Database=MyDatabase;Collection=MyCollection;AccountKey=\\' h\\'R8PM...;\\'`| Required |\\r\\n| *SqlQuery*| A `string` literal indicating the query to execute. | Required |\\r\\n| *SqlParameters* | A constant value of type `dynamic` that holds key-value pairs to pass as parameters along with the query. Parameter names must begin with `@`. | Optional |\\r\\n| *Options* | A constant value of type `dynamic` that holds more advanced settings as key-value pairs. | Optional |\\r\\n|| ----*Supported Options settings include:*-----\\r\\n|      `armResourceId` | Retrieve the API key from the Azure Resource Manager <br> **Example:** `/subscriptions/a0cd6542-7eaf-43d2-bbdd-b678a869aad1/resourceGroups/ cosmoddbresourcegrouput/providers/Microsoft.DocumentDb/databaseAccounts/cosmosdbacc`|\\r\\n|  `token` | Provide the Azure AD access token used to authenticate with the Azure Resource Manager.\\r\\n| `preferredLocations` | Control which region the data is queried from. <br> **Example:** `[\\'East US\\']` | |\\r\\n\\r\\n## Set callout policy\\r\\n\\r\\nThe plugin makes callouts to the Azure Cosmos DB instance. Make sure that the cluster\\'s [callout policy](../management/calloutpolicy.md) enables calls of type `cosmosdb` to the target *CosmosDbUri*.\\r\\n\\r\\nThe following example shows how to define the callout policy for Azure Cosmos DB. It\\'s recommended to restrict it to specific endpoints (`my_endpoint1`, `my_endpoint2`).\\r\\n\\r\\n```\\r\\n[\\r\\n  {\\r\\n    \"CalloutType\": \"CosmosDB\",\\r\\n    \"CalloutUriRegex\": \"my_endpoint1\\\\\\\\.documents\\\\\\\\.azure\\\\\\\\.com\",\\r\\n    \"CanCall\": true\\r\\n  },\\r\\n  {\\r\\n    \"CalloutType\": \"CosmosDB\",\\r\\n    \"CalloutUriRegex\": \"my_endpoint2\\\\\\\\.documents\\\\\\\\.azure\\\\\\\\.com\",\\r\\n    \"CanCall\": true\\r\\n  }\\r\\n]\\r\\n```\\r\\n\\r\\nThe following example shows an alter callout policy command for `cosmosdb` *CalloutType*\\r\\n\\r\\n```\\r\\n.alter cluster policy callout @\\'[{\"CalloutType\": \"cosmosdb\", \"CalloutUriRegex\": \"\\\\\\\\.documents\\\\\\\\.azure\\\\\\\\.com\", \"CanCall\": true}]\\'\\r\\n```',\"### Query Azure Cosmos DB\\r\\n\\r\\nThe following example uses the *cosmosdb_sql_request* plugin to send a SQL query to fetch data from Azure Cosmos DB using its Azure Cosmos DB for NoSQL.\\r\\n\\r\\n```\\r\\nevaluate cosmosdb_sql_request(\\r\\n  'AccountEndpoint=https://cosmosdbacc.documents.azure.com/;Database=MyDatabase;Collection=MyCollection;AccountKey=' h'R8PM...;',\\r\\n  'SELECT * from c')\\r\\n```\\r\\n\\r\\n### Query Azure Cosmos DB with parameters\\r\\n\\r\\nThe following example uses SQL query parameters and queries the data from an alternate region. For more information, see [`preferredLocations`](https://docs.microsoft.com/azure/cosmos-db/tutorial-global-distribution-sql-api?tabs=dotnetv2%2Capi-async#preferred-locations).\\r\\n\\r\\n```\\r\\nevaluate cosmosdb_sql_request(\\r\\n    'AccountEndpoint=https://cosmosdbacc.documents.azure.com/;Database=MyDatabase;Collection=MyCollection;AccountKey=' h'R8PM...;',\\r\\n    \\\"SELECT c.id, c.lastName, @param0 as Column0 FROM c WHERE c.dob >= '1970-01-01T00:00:00Z'\\\",\\r\\n    dynamic({'@param0': datetime(2019-04-16 16:47:26.7423305)}),\\r\\n    dynamic({'preferredLocations': ['East US']}))\\r\\n| where lastName == 'Smith'\\r\\n```\\r\\n\\r\\n---\\r\\n\\r\\n> [!IMPORTANT]\\r\\n> The content below is Microsoft confidential(not available in the [public site](https://docs.microsoft.com/en-us/azure/data-explorer/))\\r\\n\\r\\n# cosmosdb_sql_request plugin - Internal\\r\\n\\r\\nThe `cosmosdb_sql_request` plugin sends an SQL query to a Cosmos DB SQL network endpoint.\\r\\n\\r\\n- `evaluate` `cosmosdb_sql_request` `(` *ConnectionString* `,` *SqlQuery* [`,` *SqlParameters* [`,` *Options*]] `)`\\r\\n- `evaluate` `cosmosdb_sql_request` `(` *CosmosDbUri* `,` *authorization_key* `,` *database_name* `,` *collection_name* `,` *SqlQuery* `)`\\r\\n\\r\\n\\r\\n> [!NOTE]\\r\\n> It's recommended to use the syntax with `ConnectionString`. The other syntax is kept for backward-compatibility purposes.\\r\\n\\r\\n**Arguments**\\r\\n\\r\\n* *ConnectionString*: A `string` literal indicating the connection string that\\r\\n  points to the Cosmos DB collection to query. It must include `AccountEndpoint`, `Database`, `Collection`\\r\\n  and may include `AccountKey` if an API key is used for authentication. \\r\\n\\r\\n  Example:\\r\\n  `'AccountEndpoint=https://cosmosdbut.documents.azure.com:443/;Database=MyDatabase;Collection=MyCollection;AccountKey=' h'R8PM...;'`,\\r\\n  where the key is an [obfuscated string literal](./scalar-data-types/string.md#obfuscated-string-literals)\\r\\n  to prevent secret leakage.\\r\\n\\r\\n* *SqlQuery*: A `string` literal indicating the query to execute.\\r\\n\\r\\n* *SqlParameters*: A constant value of type `dynamic` that holds key-value pairs\\r\\n  to pass as parameters along with the query. Parameter names must begin with `@`. Optional.\\r\\n  \\r\\n* *Options*: A constant value of type `dynamic` that holds more advanced settings\\r\\n  as key-value pairs. Supported settings include `armResourceId` (Example: `/subscriptions/a0cd6542-7eaf-43d2-bbdd-b678a869aad1/resourceGroups/cosmoddbresourcegrouput/providers/Microsoft.DocumentDb/databaseAccounts/cosmosdbut`)\\r\\n  to retrieve the API key from ARM, `token` to provide the AAD access token used to authenticate with ARM, and `preferredLocations` (Example: `['East US']`)\\r\\n  to control which region the data is queried from. Optional.\\r\\n\\r\\n* *CosmosDbUri*: A `string` literal indicating the URI of the Cosmos DB endpoint\\r\\n  to connect to.\\r\\n\\r\\n* *authorization_key*: A `string` literal specifying CosmosDB resource or master token.\\r\\n  It is **strongly recommended** that this argument use the\\r\\n  [obfuscated string literals](./scalar-data-types/string.md#obfuscated-string-literals)\\r\\n  to prevent secret leakage.\\r\\n\\r\\n* *database_name*: A `string` literal specifying CosmosDB Database name.\\r\\n\\r\\n* *collection_name*: A `string` literal specifying CosmosDB collection name.\\r\\n\\r\\n\\r\\n**Restrictions**\\r\\n\\r\\nThe plugin makes callouts to Cosmos DB and so make sure that the\\r\\ncluster's [Callout policy](../management/calloutpolicy.md) enables calls of type\\r\\n`cosmosdb` to the target *CosmosDbUri*.\\r\\n\\r\\nBelow is an example of defining call-out policy for CosmosDB. It's recommended to restrict it to specific endpoints (`my_endpoint1`, `my_endpoint2`).\\r\\n\\r\\n```json\\r\\n[\\r\\n  {\\r\\n    \\\"CalloutType\\\": \\\"CosmosDB\\\",\\r\\n    \\\"CalloutUriRegex\\\": \\\"my_endpoint1.documents.azure.com\\\",\\r\\n    \\\"CanCall\\\": true\\r\\n  },\\r\\n  {\\r\\n    \\\"CalloutType\\\": \\\"CosmosDB\\\",\\r\\n    \\\"CalloutUriRegex\\\": \\\"my_endpoint2.documents.azure.com\\\",\\r\\n    \\\"CanCall\\\": true\\r\\n  }\\r\\n]\\r\\n```\\r\\n\\r\\n**Examples**\\r\\n\\r\\nUsing SQL query to fetch all rows from Cosmos DB:\\r\\n\\r\\n```\\r\\nevaluate cosmosdb_sql_request(\\r\\n  'AccountEndpoint=https://cosmosdbut.documents.azure.com:443/;Database=MyDatabase;Collection=MyCollection;AccountKey=' h'R8PM...;',\\r\\n  'SELECT * from c')\\r\\n```\\r\\n\\r\\nUsing SQL query parameters and querying the data from an alternate region:\\r\\n\\r\\n```\\r\\nevaluate cosmosdb_sql_request(\\r\\n    'AccountEndpoint=https://cosmosdbut.documents.azure.com:443/;Database=MyDatabase;Collection=MyCollection;AccountKey=' h'R8PM...;',\\r\\n    \\\"SELECT c.id, c.lastName, @param0 as Column0 FROM c WHERE c.dob >= '1970-01-01T00:00:00Z'\\\",\\r\\n    dynamic({'@param0': datetime(2019-04-16 16:47:26.7423305)}),\\r\\n    dynamic({'preferredLocations': ['East US']}))\\r\\n| where lastName == 'Smith'\\r\\n```\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/cosmosdb-plugin\",\"cosmosdb-plugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"cot\",\"Calculates the trigonometric cotangent of the specified angle, in radians.\",\"## Syntax\\r\\n\\r\\n`cot(`*x*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *x*: A real number.\\r\\n\\r\\n## Returns\\r\\n\\r\\n* The cotangent function value for `x`\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/cotfunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"count\",\"Counts the number of records per summarization group, or total if summarization is done without grouping.\",\"Use the [countif](countif-aggfunction.md) aggregation function to count only records for which a predicate returns `true`.\\r\\n\\r\\n[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`count` `(` `)`\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a count of the records per summarization group (or in total, if summarization is done without grouping).\",'This example returns a count of events in states starting with letter `W`:\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKM9ILUpVCC5JLElVKC5JLCopLs8syVBQClcCShaX5uYmFmVWpSo455fmldgmg0gNTYWkSogOAJStyvpLAAAA)**\\\\]**\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| where State startswith \"W\"\\r\\n| summarize Count=count() by State\\r\\n```\\r\\n\\r\\n|State|Count|\\r\\n|---|---|\\r\\n|WEST VIRGINIA|757|\\r\\n|WYOMING|396|\\r\\n|WASHINGTON|261|\\r\\n|WISCONSIN|1850|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/count-aggfunction\",\"count-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"count\",\"Returns the number of records in the input record set.\",\"## Syntax\\r\\n\\r\\n`T | count`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n*T*: The tabular data whose records are to be counted.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThis function returns a table with a single record and column of type\\r\\n`long`. The value of the only cell is the number of records in *T*.\",\"```\\r\\nStormEvents | count\\r\\n```\\r\\n\\r\\n## See also\\r\\n\\r\\nFor information about the count() aggregation function, see [count() (aggregation function)](count-aggfunction.md).\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/countoperator\",\"countoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"countif\",\"Counts the rows for which *Predicate* evaluates to `true`.\",'[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`countif` `(`*Predicate*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *Predicate*|  string | &check; | Expression used for aggregation calculation. *Predicate* can be any scalar expression with a return type of bool (evaluating to true/false).\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a count of rows for which *Predicate* evaluates to `true`.\\r\\n\\r\\n## Example of counting storms by state\\r\\n\\r\\nThis example shows the number of storms with damage to crops by state.\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKC7NzU0syqxKVQjJL0nMcc4vzSuxTQaRGpo6YKHwzJIMl8TcxPRUiHhmmgaE61yUX1CsYGegqZBUqRBckliSCgAAARcgWwAAAA==)**\\\\]**\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize TotalCount=count(),TotalWithDamage=countif(DamageCrops >0) by State\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\nThe results table shown includes only the first 10 rows.\\r\\n\\r\\n| State                | TotalCount | TotalWithDamage |\\r\\n| -------------------- | ---------- | --------------- |\\r\\n| TEXAS                | 4701       | 72              |\\r\\n| KANSAS               | 3166       | 70              |\\r\\n| IOWA                 | 2337       | 359             |\\r\\n| ILLINOIS             | 2022       | 35              |\\r\\n| MISSOURI             | 2016       | 78              |\\r\\n| GEORGIA              | 1983       | 17              |\\r\\n| MINNESOTA            | 1881       | 37              |\\r\\n| WISCONSIN            | 1850       | 75              |\\r\\n| NEBRASKA             | 1766       | 201             |\\r\\n| NEW YORK             | 1750       | 1               |\\r\\n| ... | ... | ... |\\r\\n\\r\\n## Example of counting based on string length\\r\\n\\r\\nThis example shows the number of names with more than 4 letters.\\r\\n\\r\\n```\\r\\nlet T = datatable(name:string, day_of_birth:long)\\r\\n[\\r\\n   \"John\", 9,\\r\\n   \"Paul\", 18,\\r\\n   \"George\", 25,\\r\\n   \"Ringo\", 7\\r\\n];\\r\\nT\\r\\n| summarize countif(strlen(name) > 4)\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|countif_|\\r\\n|----|\\r\\n|2|\\r\\n\\r\\n## See also\\r\\n\\r\\n[count()](count-aggfunction.md) function, which counts rows without predicate expression.',\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/countif-aggfunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"countof\",\"Counts occurrences of a substring in a string. Plain string matches may overlap; regex matches don't.\",'```\\r\\ncountof(\"The cat sat on the mat\", \"at\") == 3\\r\\ncountof(\"The cat sat on the mat\", @\"\\\\b.at\\\\b\", \"regex\") == 3\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`countof(`*source*`,` *search* [`,` *kind*]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *source*: A string.\\r\\n* *search*: The plain string or [regular expression](./re2.md) to match inside *source*.\\r\\n* *kind*: `\"normal\"|\"regex\"` Default `normal`.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe number of times that the search string can be matched in the container. Plain string matches may overlap; regex matches don\\'t.','|Function call|Result|\\r\\n|---|---\\r\\n|`countof(\"aaa\", \"a\")`| 3\\r\\n|`countof(\"aaaa\", \"aa\")`| 3 (not 2!)\\r\\n|`countof(\"ababa\", \"ab\", \"normal\")`| 2\\r\\n|`countof(\"ababa\", \"aba\")`| 2\\r\\n|`countof(\"ababa\", \"aba\", \"regex\")`| 1\\r\\n|`countof(\"abcabc\", \"a.c\", \"regex\")`| 2',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/countoffunction\",\"countoffunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"current_cluster_endpoint\",\"Returns the network endpoint (DNS name) of the current cluster being queried.\",\"## Syntax\\r\\n\\r\\n`current_cluster_endpoint()`\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe network endpoint (DNS name) of the current cluster being queried,\\r\\nas a value of type `string`.\",'```\\r\\nprint strcat(\"This query executed on: \", current_cluster_endpoint())\\r\\n```',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/current-cluster-endpoint-function\",\"current-cluster-endpoint-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"current_database\",\"Returns the name of the database in scope (database that all query\\r\\nentities are resolved against if no other database is specified).\",\"## Syntax\\r\\n\\r\\n`current_database()`\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe name of the database in scope as a value of type `string`.\",'```\\r\\nprint strcat(\"Database in scope: \", current_database())\\r\\n```',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/current-database-function\",\"current-database-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"current_principal\",\"Returns the current principal name that runs the query.\",\"## Syntax\\r\\n\\r\\n`current_principal()`\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe current principal fully qualified name (FQN) as a `string`.  \\r\\nThe string format is:  \\r\\n*PrinciplaType*`=`*PrincipalId*`;`*TenantId*\",\"```\\r\\nprint fqn=current_principal()\\r\\n```\\r\\n\\r\\n|fqn|\\r\\n|---|\\r\\n|aaduser=346e950e-4a62-42bf-96f5-4cf4eac3f11e;72f988bf-86f1-41af-91ab-2d7cd011db47|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/current-principalfunction\",\"current-principalfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"current_principal_details\",\"Returns details of the principal running the query.\",\"## Syntax\\r\\n\\r\\n`current_principal_details()`\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe details of the current principal as a `dynamic`.\",'```\\r\\nprint d=current_principal_details()\\r\\n```\\r\\n\\r\\n|d|\\r\\n|---|\\r\\n|{<br>  \"UserPrincipalName\": \"user@fabrikam.com\",<br>  \"IdentityProvider\": \"https://sts.windows.net\",<br>  \"Authority\": \"72f988bf-86f1-41af-91ab-2d7cd011db47\",<br>  \"Mfa\": \"True\",<br>  \"Type\": \"AadUser\",<br>  \"DisplayName\": \"James Smith (upn: user@fabrikam.com)\",<br>  \"ObjectId\": \"346e950e-4a62-42bf-96f5-4cf4eac3f11e\",<br>  \"FQN\": null,<br>  \"Notes\": null<br>}|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/current-principal-detailsfunction\",\"current-principal-detailsfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"current_principal_is_member_of\",\"Checks group membership or principal identity of the current principal running the query.\",\"## Syntax\\r\\n\\r\\n`current_principal_is_member_of`(`*list of string literals*`)\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *list of expressions* - a comma-separated list of string literals, where each literal represents an AAD principal. See [examples for AAD principals](../management/access-control/principals-and-identity-providers.md#azure-ad-tenants).\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe function returns:\\r\\n\\r\\n* `true`: if the current principal running the query was successfully matched for at least one input argument.\\r\\n* `false`: otherwise\",\"```\\r\\nprint result=current_principal_is_member_of(\\r\\n    'aaduser=user1@fabrikam.com', \\r\\n    'aadgroup=group1@fabrikam.com',\\r\\n    'aadapp=66ad1332-3a94-4a69-9fa2-17732f093664;72f988bf-86f1-41af-91ab-2d7cd011db47'\\r\\n    )\\r\\n```\\r\\n\\r\\n| result |\\r\\n|--------|\\r\\n| false  |\\r\\n\\r\\nUsing dynamic array instead of multiple arguments:\\r\\n\\r\\n```\\r\\nprint result=current_principal_is_member_of(\\r\\n    dynamic([\\r\\n    'aaduser=user1@fabrikam.com', \\r\\n    'aadgroup=group1@fabrikam.com',\\r\\n    'aadapp=66ad1332-3a94-4a69-9fa2-17732f093664;72f988bf-86f1-41af-91ab-2d7cd011db47'\\r\\n    ]))\\r\\n```\\r\\n\\r\\n| result |\\r\\n|--------|\\r\\n| false  |\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/current-principal-ismemberoffunction\",\"current-principal-ismemberoffunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"cursor_after\",\"A predicate over the records of a table to compare their ingestion time\\r\\nagainst a database cursor.\",\"## Syntax\\r\\n\\r\\n`cursor_after` `(` *RHS* `)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *RHS*: Either an empty string literal, or a valid database cursor value.\\r\\n\\r\\n## Returns\\r\\n\\r\\nA scalar value of type `bool` that indicates whether the record was ingested\\r\\nafter the database cursor *RHS* (`true`) or not (`false`).\\r\\n\\r\\n**Notes**\\r\\n\\r\\nSee [database cursors](../management/databasecursor.md) for additional\\r\\ndetails on database cursors.\\r\\n\\r\\nThis function can only be invoked on records of a table which has the\\r\\n[IngestionTime policy](../management/ingestiontimepolicy.md) enabled.\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/cursorafterfunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"cursor_before_or_at\",\"A predicate over the records of a table to compare their ingestion time\\r\\nagainst a database cursor.\",\"## Syntax\\r\\n\\r\\n`cursor_before_or_at` `(` *RHS* `)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *RHS*: Either an empty string literal, or a valid database cursor value.\\r\\n\\r\\n## Returns\\r\\n\\r\\nA scalar value of type `bool` that indicates whether the record was ingested\\r\\nbefore or at the database cursor *RHS* (`true`) or not (`false`).\\r\\n\\r\\n**Notes**\\r\\n\\r\\nSee [database cursors](../management/databasecursor.md) for additional\\r\\ndetails on database cursors.\\r\\n\\r\\nThis function can only be invoked on records of a table which has the\\r\\n[IngestionTime policy](../management/ingestiontimepolicy.md) enabled.\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/cursorbeforeoratfunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"database\",\"Changes the reference of the query to a specific database within the cluster scope.\",\"```\\r\\ndatabase('Sample').StormEvents\\r\\ncluster('help').database('Sample').StormEvents\\r\\n```\\r\\n\\r\\n> [!NOTE]\\r\\n\\r\\n> * For more information, see [cross-database and cross-cluster queries](cross-cluster-or-database-queries.md).\\r\\n> * For accessing remote cluster and remote database, see [`cluster()`](clusterfunction.md) scope function.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`database(`*stringConstant*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *stringConstant*: Name of the database that is referenced. Database identified can be either `DatabaseName` or `PrettyName`. The argument must be a *constant* value and can't come from a subquery evaluation.\",\"### Use database() to access table of other database\\r\\n\\r\\n```\\r\\ndatabase('Samples').StormEvents | count\\r\\n```\\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|59066|\\r\\n\\r\\n### Use database() inside let statements\\r\\n\\r\\nThe same query as above can be rewritten to use inline function (let statement) that\\r\\nreceives a parameter `dbName` - which is passed into the database() function.\\r\\n\\r\\n```\\r\\nlet foo = (dbName:string)\\r\\n{\\r\\n    database(dbName).StormEvents | count\\r\\n};\\r\\nfoo('help')\\r\\n```\\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|59066|\\r\\n\\r\\n### Use database() inside stored functions\\r\\n\\r\\nThe same query as above can be rewritten to be used in a function that\\r\\nreceives a parameter `dbName` - which is passed into the database() function.\\r\\n\\r\\n```\\r\\n.create function foo(dbName:string)\\r\\n{\\r\\n    database(dbName).StormEvents | count\\r\\n};\\r\\n```\\r\\n\\r\\n> [!NOTE]\\r\\n> Such functions can be used only locally and not in the cross-cluster query.\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/databasefunction\",\"databasefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"datatable\",\"Returns a table whose schema and values are defined in the query itself.\",\"> [!NOTE]\\r\\n> This operator doesn't have a pipeline input.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`datatable` `(` *ColumnName* `:` *ColumnType* [`,` ...] `)` `[` *ScalarValue* [`,` *ScalarValue* ...] `]`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *ColumnName*, *ColumnType*: These arguments define the schema of the table. The arguments use the same syntax as used when defining a table.\\r\\n  For more information, see [.create table](../management/create-table-command.md)).\\r\\n* *ScalarValue*: A constant scalar value to insert into the table. The number of values\\r\\n  must be an integer multiple of the columns in the table. The *n*'th value\\r\\n  must have a type that corresponds to column *n* % *NumColumns*.\\r\\n\\r\\n\\r\\n## Returns\\r\\n\\r\\nThis operator returns a data table of the given schema and data.\",'```\\r\\ndatatable(Date:datetime, Event:string, MoreData:dynamic) [\\r\\n    datetime(1910-06-11), \"Born\", dynamic({\"key1\":\"value1\", \"key2\":\"value2\"}),\\r\\n    datetime(1930-01-01), \"Enters Ecole Navale\", dynamic({\"key1\":\"value3\", \"key2\":\"value4\"}),\\r\\n    datetime(1953-01-01), \"Published first book\", dynamic({\"key1\":\"value5\", \"key2\":\"value6\"}),\\r\\n    datetime(1997-06-25), \"Died\", dynamic({\"key1\":\"value7\", \"key2\":\"value8\"}),\\r\\n]\\r\\n| where strlen(Event) > 4\\r\\n| extend key2 = MoreData.key2\\r\\n```\\r\\n\\r\\nResult:\\r\\n\\r\\n|Date|Event|MoreData|key2|\\r\\n|---|---|---|---|\\r\\n|1930-01-01 00:00:00.0000000|Enters Ecole Navale|{<br>  \"key1\": \"value3\",<br>  \"key2\": \"value4\"<br>}|value4|\\r\\n|1953-01-01 00:00:00.0000000|Published first book|{<br>  \"key1\": \"value5\",<br>  \"key2\": \"value6\"<br>}|value6|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/datatableoperator\",\"datatableoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"datetime_add\",\"Calculates a new [datetime](./scalar-data-types/datetime.md) from a specified datepart multiplied by a specified amount, added to a specified [datetime](./scalar-data-types/datetime.md).\",\"## Syntax\\r\\n\\r\\n`datetime_add(`*period*`,`*amount*`,`*datetime*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* `period`: [string](./scalar-data-types/string.md).\\r\\n* `amount`: [integer](./scalar-data-types/int.md).\\r\\n* `datetime`: [datetime](./scalar-data-types/datetime.md) value.\\r\\n\\r\\nPossible values of *period*:\\r\\n\\r\\n* Year\\r\\n* Quarter\\r\\n* Month\\r\\n* Week\\r\\n* Day\\r\\n* Hour\\r\\n* Minute\\r\\n* Second\\r\\n* Millisecond\\r\\n* Microsecond\\r\\n* Nanosecond\\r\\n\\r\\n## Returns\\r\\n\\r\\nA date after a certain time/date interval has been added.\",\"```\\r\\nprint  year = datetime_add('year',1,make_datetime(2017,1,1)),\\r\\nquarter = datetime_add('quarter',1,make_datetime(2017,1,1)),\\r\\nmonth = datetime_add('month',1,make_datetime(2017,1,1)),\\r\\nweek = datetime_add('week',1,make_datetime(2017,1,1)),\\r\\nday = datetime_add('day',1,make_datetime(2017,1,1)),\\r\\nhour = datetime_add('hour',1,make_datetime(2017,1,1)),\\r\\nminute = datetime_add('minute',1,make_datetime(2017,1,1)),\\r\\nsecond = datetime_add('second',1,make_datetime(2017,1,1))\\r\\n\\r\\n```\\r\\n\\r\\n|year|quarter|month|week|day|hour|minute|second|\\r\\n|---|---|---|---|---|---|---|---|\\r\\n|2018-01-01 00:00:00.0000000|2017-04-01 00:00:00.0000000|2017-02-01 00:00:00.0000000|2017-01-08 00:00:00.0000000|2017-01-02 00:00:00.0000000|2017-01-01 01:00:00.0000000|2017-01-01 00:01:00.0000000|2017-01-01 00:00:01.0000000|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/datetime-addfunction\",\"datetime-addfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"datetime_diff\",\"Calculates the number of the specified periods between two [datetime](./scalar-data-types/datetime.md) values.\",\"## Syntax\\r\\n\\r\\n`datetime_diff(`*period*`,`*datetime_1*`,`*datetime_2*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* `period`: `string`.\\r\\n* `datetime_1`: [datetime](./scalar-data-types/datetime.md) value.\\r\\n* `datetime_2`: [datetime](./scalar-data-types/datetime.md) value.\\r\\n\\r\\nPossible values of *period*:\\r\\n\\r\\n* Year\\r\\n* Quarter\\r\\n* Month\\r\\n* Week\\r\\n* Day\\r\\n* Hour\\r\\n* Minute\\r\\n* Second\\r\\n* Millisecond\\r\\n* Microsecond\\r\\n* Nanosecond\\r\\n\\r\\n## Returns\\r\\n\\r\\nAn integer, which represents amount of `periods` in the result of subtraction (`datetime_1` - `datetime_2`).\",\"```\\r\\nprint\\r\\nyear = datetime_diff('year',datetime(2017-01-01),datetime(2000-12-31)),\\r\\nquarter = datetime_diff('quarter',datetime(2017-07-01),datetime(2017-03-30)),\\r\\nmonth = datetime_diff('month',datetime(2017-01-01),datetime(2015-12-30)),\\r\\nweek = datetime_diff('week',datetime(2017-10-29 00:00),datetime(2017-09-30 23:59)),\\r\\nday = datetime_diff('day',datetime(2017-10-29 00:00),datetime(2017-09-30 23:59)),\\r\\nhour = datetime_diff('hour',datetime(2017-10-31 01:00),datetime(2017-10-30 23:59)),\\r\\nminute = datetime_diff('minute',datetime(2017-10-30 23:05:01),datetime(2017-10-30 23:00:59)),\\r\\nsecond = datetime_diff('second',datetime(2017-10-30 23:00:10.100),datetime(2017-10-30 23:00:00.900)),\\r\\nmillisecond = datetime_diff('millisecond',datetime(2017-10-30 23:00:00.200100),datetime(2017-10-30 23:00:00.100900)),\\r\\nmicrosecond = datetime_diff('microsecond',datetime(2017-10-30 23:00:00.1009001),datetime(2017-10-30 23:00:00.1008009)),\\r\\nnanosecond = datetime_diff('nanosecond',datetime(2017-10-30 23:00:00.0000000),datetime(2017-10-30 23:00:00.0000007))\\r\\n```\\r\\n\\r\\n|year|quarter|month|week|day|hour|minute|second|millisecond|microsecond|nanosecond|\\r\\n|---|---|---|---|---|---|---|---|---|---|---|\\r\\n|17|2|13|5|29|2|5|10|100|100|-700|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/datetime-difffunction\",\"datetime-difffunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"datetime_local_to_utc\",\"Converts local datetime to UTC datetime using [a time-zone specification](timezone.md).\",\"## Syntax\\r\\n\\r\\n`datetime_local_to_utc(`*from*`,`*timezone*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *from*: local [datetime](./scalar-data-types/datetime.md).\\r\\n* *timezone*: [string](./scalar-data-types/string.md).  The timezone string must be one of the supported [timezones](timezone.md).\\r\\n\\r\\n## Returns\\r\\n\\r\\nA UTC [datetime](./scalar-data-types/datetime.md) that corresponds the local [datetime](./scalar-data-types/datetime.md) in the specified `timezone`.\",\"```\\r\\ndatatable(local_dt: datetime, tz: string)\\r\\n[ datetime(2020-02-02 20:02:20), 'US/Pacific', \\r\\n  datetime(2020-02-02 20:02:20), 'America/Chicago', \\r\\n  datetime(2020-02-02 20:02:20), 'Europe/Paris']\\r\\n| extend utc_dt = datetime_local_to_utc(local_dt, tz)\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|local_dt|tz|utc_dt|\\r\\n|---|---|---|\\r\\n|2020-02-02 20:02:20.0000000|Europe/Paris|2020-02-02 19:02:20.0000000|\\r\\n|2020-02-02 20:02:20.0000000|America/Chicago|2020-02-03 02:02:20.0000000|\\r\\n|2020-02-02 20:02:20.0000000|US/Pacific|2020-02-03 04:02:20.0000000|\\r\\n\\r\\n## See also\\r\\n\\r\\n* To convert from UTC to local, see [datetime_utc_to_local()](datetime-utc-to-local-function.md).\\r\\n* [Timezones](timezone.md)\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/datetime-local-to-utc-function\",\"datetime-local-to-utc-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"datetime_part\",\"Extracts the requested date part as an integer value.\",'```\\r\\ndatetime_part(\"Day\",datetime(2015-12-14))\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`datetime_part(`*part*`,`*datetime*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* `date`: `datetime`\\r\\n* `part`: `string`\\r\\n\\r\\nPossible values of `part`: \\r\\n\\r\\n* Year\\r\\n* Quarter\\r\\n* Month\\r\\n* week_of_year\\r\\n* Day\\r\\n* DayOfYear\\r\\n* Hour\\r\\n* Minute\\r\\n* Second\\r\\n* Millisecond\\r\\n* Microsecond\\r\\n* Nanosecond\\r\\n\\r\\n## Returns\\r\\n\\r\\nAn integer representing the extracted part.\\r\\n\\r\\n> [!NOTE]\\r\\n> `week_of_year` returns an integer which represents the week number. The week number is calculated from the first week of a year, which is the one that includes the first Thursday.','```\\r\\nlet dt = datetime(2017-10-30 01:02:03.7654321); \\r\\nprint \\r\\nyear = datetime_part(\"year\", dt),\\r\\nquarter = datetime_part(\"quarter\", dt),\\r\\nmonth = datetime_part(\"month\", dt),\\r\\nweekOfYear = datetime_part(\"week_of_year\", dt),\\r\\nday = datetime_part(\"day\", dt),\\r\\ndayOfYear = datetime_part(\"dayOfYear\", dt),\\r\\nhour = datetime_part(\"hour\", dt),\\r\\nminute = datetime_part(\"minute\", dt),\\r\\nsecond = datetime_part(\"second\", dt),\\r\\nmillisecond = datetime_part(\"millisecond\", dt),\\r\\nmicrosecond = datetime_part(\"microsecond\", dt),\\r\\nnanosecond = datetime_part(\"nanosecond\", dt)\\r\\n\\r\\n```\\r\\n\\r\\n|year|quarter|month|weekOfYear|day|dayOfYear|hour|minute|second|millisecond|microsecond|nanosecond|\\r\\n|---|---|---|---|---|---|---|---|---|---|---|---|\\r\\n|2017|4|10|44|30|303|1|2|3|765|765432|765432100|\\r\\n\\r\\n> [!NOTE]\\r\\n> `weekofyear` is an obsolete variant of `week_of_year` part. `weekofyear` was not ISO 8601 compliant; the first week of a year was defined as the week with the year\\'s first Wednesday in it.\\r\\n> `week_of_year` is ISO 8601 compliant; the first week of a year is defined as the week with the year\\'s first Thursday in it. [For more information](https://en.wikipedia.org/wiki/ISO_8601#Week_dates).',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/datetime-partfunction\",\"datetime-partfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"datetime_utc_to_local\",\"Converts UTC datetime to local datetime using a [time-zone specification](timezone.md).\",\"## Syntax\\r\\n\\r\\n`datetime_utc_to_local(`*from*`,`*timezone*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *from*: UTC [datetime](./scalar-data-types/datetime.md).\\r\\n* *timezone*: [string](./scalar-data-types/string.md). The timezone string must be one of the supported [timezones](timezone.md).\\r\\n\\r\\n## Returns\\r\\n\\r\\nA local [datetime](./scalar-data-types/datetime.md) in the `timezone` that corresponds the UTC [datetime](./scalar-data-types/datetime.md).\",\"```\\r\\nprint dt=now()\\r\\n| extend pacific_dt = datetime_utc_to_local(dt, 'US/Pacific'), canberra_dt = datetime_utc_to_local(dt, 'Australia/Canberra')\\r\\n| extend diff = pacific_dt - canberra_dt\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|dt|pacific_dt|canberra_dt|diff|\\r\\n|---|---|---|---|\\r\\n|2022-07-11 22:18:48.4678620|2022-07-11 15:18:48.4678620|2022-07-12 08:18:48.4678620|-17:00:00|\\r\\n\\r\\n## See also\\r\\n\\r\\n* To convert a datetime from local to UTC, see [datetime_local_to_utc()](datetime-local-to-utc-function.md).\\r\\n* [Timezones](timezone.md)\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/datetime-utc-to-local-function\",\"datetime-utc-to-local-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"dayofmonth\",\"Returns the integer number representing the day number of the given month\",\"```\\r\\ndayofmonth(datetime(2015-12-14)) == 14\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`dayofmonth(`*a_date*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* `a_date`: A `datetime`.\\r\\n\\r\\n## Returns\\r\\n\\r\\n`day number` of the given month.\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/dayofmonthfunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"dayofweek\",\"Returns the integer number of days since the preceding Sunday, as a `timespan`.\",\"```\\r\\ndayofweek(datetime(2015-12-14)) == 1d  // Monday\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`dayofweek(`*a_date*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* `a_date`: A `datetime`.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe `timespan` since midnight at the beginning of the preceding Sunday, rounded down to an integer number of days.\",\"```\\r\\ndayofweek(datetime(1947-11-30 10:00:05))  // time(0.00:00:00), indicating Sunday\\r\\ndayofweek(datetime(1970-05-11))           // time(1.00:00:00), indicating Monday\\r\\n```\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/dayofweekfunction\",\"dayofweekfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"dayofyear\",\"Returns the integer number represents the day number of the given year.\",\"```\\r\\ndayofyear(datetime(2015-12-14))\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`dayofyear(`*a_date*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* `a_date`: A `datetime`.\\r\\n\\r\\n## Returns\\r\\n\\r\\n`day number` of the given year.\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/dayofyearfunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"dcount\",\"Calculates an estimate of the number of distinct values that are taken by a scalar expression in the summary group.\",\"> [!NOTE]\\r\\n> The `dcount()` aggregation function is primarily useful for estimating the cardinality of huge sets. It trades accuracy for performance, and may return a result that varies between executions. The order of inputs may have an effect on its output.\\r\\n\\r\\n[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`dcount` `(`*Expr*[`,` *Accuracy*]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *Expr*| scalar | &check; | A scalar expression whose distinct values are to be counted. |\\r\\n| *Accuracy* | int |   | Defines the requested estimation accuracy. If unspecified, the default value is `1`. See [Estimation accuracy](#estimation-accuracy) for supported values. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns an estimate of the number of distinct values of *`Expr`* in the group.\",\"This example shows how many types of storm events happened in each state.\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKC7NzU0syqxKVXDJTEtLLQIKQ+RsU5LzS/NKNMC8kMqCVE2FpEqF4JLEklSgtvyilNQikACaLgBDbD8AXQAAAA==)**\\\\]**\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize DifferentEvents=dcount(EventType) by State\\r\\n| order by DifferentEvents\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\nThe results table shown includes only the first 10 rows.\\r\\n\\r\\n| State                | DifferentEvents |\\r\\n| -------------------- | --------------- |\\r\\n| TEXAS                | 27              |\\r\\n| CALIFORNIA           | 26              |\\r\\n| PENNSYLVANIA         | 25              |\\r\\n| GEORGIA              | 24              |\\r\\n| ILLINOIS             | 23              |\\r\\n| MARYLAND             | 23              |\\r\\n| NORTH CAROLINA       | 23              |\\r\\n| MICHIGAN             | 22              |\\r\\n| FLORIDA              | 22              |\\r\\n| OREGON               | 21              |\\r\\n| KANSAS               | 21              |\\r\\n| ... | ... |\\r\\n\\r\\n## Estimation accuracy\\r\\n\\r\\n[!INCLUDE [data-explorer-estimation-accuracy](../../includes/data-explorer-estimation-accuracy.md)]\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/dcount-aggfunction\",\"dcount-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"dcount_hll\",\"Calculates the dcount from hll results (that were generated by [hll](hll-aggfunction.md) or [hll_merge](hll-merge-aggfunction.md)).\",\"Read about the [underlying algorithm (*H*yper*L*og*L*og) and estimation accuracy](#estimation-accuracy)).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`dcount_hll(`*Expr*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*Expr*|string|&check;|Expression that was generated by [hll](hll-aggfunction.md) or [hll-merge](hll-merge-aggfunction.md)|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the distinct count of each value in *Expr*.\",\"The following example shows the distinct count hll merged results.\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5uWqUSguzc1NLMqsSlXIyMkJSi1WsAUxNFwScxPTUwOK8gtSi0oqNRWSKhWSMvM0gksSi0pCMnNTdQwNcjUx9PumFqWnpkCMiM8FcTQgpoKVFhTlZ6UmlyikJOeX5pXEg6yB69EEAKm9wyCXAAAA)**\\\\]**\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize hllRes = hll(DamageProperty) by bin(StartTime,10m)\\r\\n| summarize hllMerged = hll_merge(hllRes)\\r\\n| project dcount_hll(hllMerged)\\r\\n```\\r\\n\\r\\n|dcount_hll_hllMerged|\\r\\n|---|\\r\\n|315|\\r\\n\\r\\n## Estimation accuracy\\r\\n\\r\\n[!INCLUDE [data-explorer-estimation-accuracy](../../includes/data-explorer-estimation-accuracy.md)]\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/dcount-hllfunction\",\"dcount-hllfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"dcount_intersect\",\"Calculates intersection between N sets based on `hll` values (N in range of [2..16]), and returns N `dcount` values. The plugin is invoked with the [`evaluate`](evaluateoperator.md) operator.\",\"Given sets S<sub>1<\\/sub>, S<sub>2<\\/sub>, .. S<sub>n<\\/sub> - returns values will be representing distinct counts of:  \\r\\nS<sub>1<\\/sub>,  \\r\\nS<sub>1<\\/sub> \\u2229 S<sub>2<\\/sub>,  \\r\\nS<sub>1<\\/sub> \\u2229 S<sub>2<\\/sub> \\u2229 S<sub>3<\\/sub>,  \\r\\n... ,  \\r\\nS<sub>1<\\/sub> \\u2229 S<sub>2<\\/sub> \\u2229 ... \\u2229 S<sub>n<\\/sub>\\r\\n\\r\\n```\\r\\nT | evaluate dcount_intersect(hll_1, hll_2, hll_3)\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `| evaluate` `dcount_intersect(`*hll_1*, *hll_2*, [`,` *hll_3*`,` ...]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T*: The input tabular expression.\\r\\n* *hll_i*: the values of set S<sub>i<\\/sub> calculated with [`hll()`](./hll-aggfunction.md) function.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a table with N `dcount` values (per column, representing set intersections).\\r\\nColumn names are s0, s1, ... (until n-1).\",\"```\\r\\n// Generate numbers from 1 to 100\\r\\nrange x from 1 to 100 step 1\\r\\n| extend isEven = (x % 2 == 0), isMod3 = (x % 3 == 0), isMod5 = (x % 5 == 0)\\r\\n// Calculate conditional HLL values (note that '0' is included in each of them as additional value, so we will subtract it later)\\r\\n| summarize hll_even = hll(iif(isEven, x, 0), 2),\\r\\n            hll_mod3 = hll(iif(isMod3, x, 0), 2),\\r\\n            hll_mod5 = hll(iif(isMod5, x, 0), 2) \\r\\n// Invoke the plugin that calculates dcount intersections         \\r\\n| evaluate dcount_intersect(hll_even, hll_mod3, hll_mod5)\\r\\n| project evenNumbers = s0 - 1,             //                             100 / 2 = 50\\r\\n          even_and_mod3 = s1 - 1,           // gcd(2,3) = 6, therefor:     100 / 6 = 16\\r\\n          even_and_mod3_and_mod5 = s2 - 1   // gcd(2,3,5) is 30, therefore: 100 / 30 = 3 \\r\\n```\\r\\n\\r\\n|evenNumbers|even_and_mod3|even_and_mod3_and_mod5|\\r\\n|---|---|---|\\r\\n|50|16|3|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/dcount-intersect-plugin\",\"dcount-intersect-plugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"dcountif\",\"Calculates an estimate of the number of distinct values of *Expr* of rows for which *Predicate* evaluates to `true`.\",\"[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`dcountif` `(`*Expr*, *Predicate*, [`,` *Accuracy*]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *Expr* | string | &check; | Expression that will be used for aggregation calculation. |\\r\\n| *Predicate* | string | &check; | Expression that will be used to filter rows. |\\r\\n| *Accuracy* | int |  | Controls the balance between speed and accuracy. If unspecified, the default value is `1`. See [Estimation accuracy](#estimation-accuracy) for supported values. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns an estimate of the number of distinct values of *Expr* of rows for which *Predicate* evaluates to `true` in the group.\\r\\n\\r\\n> [!TIP]\\r\\n> `dcountif()` may return an error in cases where all, or none of the rows pass the `Predicate` expression.\",\"This example shows how many types of fatal storm events happened in each state.\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA22MMQ6DMBAE+7ziShAUfAAqEyk1+cCBz8ISttH5AIHy+BhoKXc0O50Edu1KXuLrB3FxDtkeBMoaQ5zwGwWnW6j1EBYv1mTX/u4zlZkilDEqyzQIFHDPj9cXyJsqh36HTlAo9bcxNR/b0ECVhMCa+Hw8OX+LHx0UrAAAAA==)**\\\\]**\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize DifferentFatalEvents=dcountif(EventType,(DeathsDirect + DeathsIndirect)>0) by State\\r\\n| where DifferentFatalEvents > 0\\r\\n| order by DifferentFatalEvents \\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\nThe results table shown includes only the first 10 rows.\\r\\n\\r\\n| State          | DifferentFatalEvents |\\r\\n| -------------- | -------------------- |\\r\\n| CALIFORNIA     | 12                   |\\r\\n| TEXAS          | 12                   |\\r\\n| OKLAHOMA       | 10                   |\\r\\n| ILLINOIS       | 9                    |\\r\\n| KANSAS         | 9                    |\\r\\n| NEW YORK       | 9                    |\\r\\n| NEW JERSEY     | 7                    |\\r\\n| WASHINGTON     | 7                    |\\r\\n| MICHIGAN       | 7                    |\\r\\n| MISSOURI       | 7                    |\\r\\n| ... | ... |\\r\\n\\r\\n## Estimation accuracy\\r\\n\\r\\n[!INCLUDE [data-explorer-estimation-accuracy](../../includes/data-explorer-estimation-accuracy.md)]\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/dcountif-aggfunction\",\"dcountif-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"degrees\",\"Converts angle value in radians into value in degrees, using formula `degrees = (180 / PI ) * angle_in_radians`\",\"## Syntax\\r\\n\\r\\n`degrees(`*a*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *a*: Angle in radians (a real number).\\r\\n\\r\\n## Returns\\r\\n\\r\\n* The corresponding angle in degrees for an angle specified in radians.\",\"```\\r\\nprint degrees0 = degrees(pi()/4), degrees1 = degrees(pi()*1.5), degrees2 = degrees(0)\\r\\n\\r\\n```\\r\\n\\r\\n|degrees0|degrees1|degrees2|\\r\\n|---|---|---|\\r\\n|45|270|0|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/degreesfunction\",\"degreesfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"diff\",\"Compares two data sets of the same structure and finds patterns of discrete attributes (dimensions) that characterize differences between the two data sets. The plugin is invoked with the [`evaluate`](evaluateoperator.md) operator.\",'`Diffpatterns` was developed to help analyze failures (for example, by comparing failures to non-failures in a given time frame), but can potentially find differences between any two data sets of the same structure. \\r\\n\\r\\n> [!NOTE]\\r\\n> `diffpatterns` aims to find significant patterns (that capture portions of the data difference between the sets) and isn\\'t meant for row-by-row differences.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`T | evaluate diffpatterns(SplitColumn, SplitValueA, SplitValueB [,\\u00a0WeightColumn,\\u00a0Threshold, MaxDimensions,\\u00a0CustomWildcard, ...])` \\r\\n\\r\\n## Arguments \\r\\n\\r\\n### Required arguments\\r\\n\\r\\n* SplitColumn - *column_name*\\r\\n    Tells the algorithm how to split the query into data sets. According to the specified values for the SplitValueA and SplitValueB arguments (see below), the algorithm splits the query into two data sets, \\u201cA\\u201d and \\u201cB\\u201d, and analyze the differences between them. As such, the split column must have at least two distinct values.\\r\\n* SplitValueA - *string*\\r\\n    A string representation of one of the values in the SplitColumn that was specified. All the rows that have this value in their SplitColumn considered as data set \\u201cA\\u201d.\\r\\n* SplitValueB - *string*\\r\\n    A string representation of one of the values in the SplitColumn that was specified. All the rows that have this value in their SplitColumn considered as data set  \\u201cB\\u201d.\\r\\n    Example: `T | extend splitColumn=iff(request_responseCode == 200, \"Success\" , \"Failure\") | evaluate diffpatterns(splitColumn, \"Success\",\"Failure\") `\\r\\n\\r\\n### Optional arguments\\r\\n\\r\\nAll other arguments are optional, but they must be ordered as below. To indicate that the default value should be used, put the string tilde value - \\'~\\' (see examples below).\\r\\n\\r\\n* WeightColumn - *column_name*\\r\\n    Considers each row in the input according to the specified weight (by default each row has a weight of \\'1\\'). The argument must be a name of a numeric column (for example, `int`, `long`, `real`).\\r\\n    A common usage of a weight column is to take into account sampling or bucketing/aggregation of the data that is already embedded into each row.\\r\\n    \\r\\n    Example: `T | extend splitColumn=iff(request_responseCode == 200, \"Success\" , \"Failure\") | evaluate diffpatterns(splitColumn, \"Success\",\"Failure\", sample_Count) `\\r\\n* Threshold - 0.015 < *double* < 1 [default: 0.05]\\r\\n    Sets the minimal pattern (ratio) difference between the two sets.\\r\\n    Example:  `T | extend splitColumn = iff(request-responseCode == 200, \"Success\" , \"Failure\") | evaluate diffpatterns(splitColumn, \"Success\",\"Failure\", \"~\", 0.04)`\\r\\n* MaxDimensions  - 0 < *int* [default: unlimited]\\r\\n    Sets the maximum number of uncorrelated dimensions per result pattern. By specifying a limit, you decrease the query runtime.\\r\\n    Example:  `T | extend splitColumn = iff(request-responseCode == 200, \"Success\" , \"Failure\") | evaluate diffpatterns(splitColumn, \"Success\",\"Failure\", \"~\", \"~\", 3)`\\r\\n* CustomWildcard - *\"any-value-per-type\"*\\r\\n    Sets the wildcard value for a specific type in the result table that will indicate that the current pattern doesn\\'t have a restriction on this column.\\r\\n    Default is null, for string default is an empty string. If the default is a viable value in the data, a different wildcard value should be used (for example, `*`).\\r\\n    See an example below.\\r\\n    Example: `T | extend splitColumn = iff(request-responseCode == 200, \"Success\" , \"Failure\") | evaluate diffpatterns(splitColumn, \"Success\",\"Failure\", \"~\", \"~\", \"~\", int(-1), double(-1), long(0), datetime(1900-1-1))`\\r\\n\\r\\n## Returns\\r\\n\\r\\n`Diffpatterns` returns a small set of patterns that capture different portions of the data in the two sets (that is, a pattern capturing a large percentage of the rows in the first data set and low percentage of the rows in the second set). Each pattern is represented by a row in the results.\\r\\n\\r\\nThe result of `diffpatterns` returns the following columns:\\r\\n\\r\\n* SegmentId: the identity assigned to the pattern in the current query (note: IDs are not guaranteed to be the same in repeating queries).\\r\\n* CountA: the number of rows captured by the pattern in Set A (Set A is the equivalent of `where tostring(splitColumn) == SplitValueA`).\\r\\n* CountB: the number of rows captured by the pattern in Set B (Set B is the equivalent of `where tostring(splitColumn) == SplitValueB`).\\r\\n* PercentA: the percentage of rows in Set A captured by the pattern (100.0 * CountA / count(SetA)).\\r\\n* PercentB: the percentage of rows in Set B captured by the pattern (100.0 * CountB / count(SetB)).\\r\\n* PercentDiffAB: the absolute percentage point difference between A and B (|PercentA - PercentB|) is the main measure of significance of patterns in describing the difference between the two sets.\\r\\n* Rest of the columns: are the original schema of the input and describe the pattern, each row (pattern) reresents the intersection of the non-wildcard values of the columns (equivalent of `where col1==val1 and col2==val2 and ... colN=valN` for each non-wildcard value in the row).\\r\\n\\r\\nFor each pattern, columns that are not set in the pattern (that is, without restriction on a specific value) will contain a wildcard value, which is null by default. See in the Arguments section below how wildcards can be manually changed.\\r\\n\\r\\n* Note: the patterns are often not distinct. They may be overlapping, and usually do not cover all the original rows. Some rows may not fall under any pattern.\\r\\n\\r\\n> [!TIP]\\r\\n> * Use [where](./whereoperator.md) and [project](./projectoperator.md) in the input pipe to reduce the data to just what you\\'re interested in.\\r\\n> * When you find an interesting row, you might want to drill into it further by adding its specific values to your `where` filter.','```\\r\\nStormEvents \\r\\n| where monthofyear(StartTime) == 5\\r\\n| extend Damage = iff(DamageCrops + DamageProperty > 0 , 1 , 0)\\r\\n| project State , EventType , Source , Damage, DamageCrops\\r\\n| evaluate diffpatterns(Damage, \"0\", \"1\" )\\r\\n```\\r\\n\\r\\n|SegmentId|CountA|CountB|PercentA|PercentB|PercentDiffAB|State|EventType|Source|DamageCrops|\\r\\n|---|---|---|---|---|---|---|---|---|---|\\r\\n|0|2278|93|49.8|7.1|42.7||Hail||0|\\r\\n|1|779|512|17.03|39.08|22.05||Thunderstorm Wind|||\\r\\n|2|1098|118|24.01|9.01|15|||Trained Spotter|0|\\r\\n|3|136|158|2.97|12.06|9.09|||Newspaper||\\r\\n|4|359|214|7.85|16.34|8.49||Flash Flood|||\\r\\n|5|50|122|1.09|9.31|8.22|IOWA||||\\r\\n|6|655|279|14.32|21.3|6.98|||Law Enforcement||\\r\\n|7|150|117|3.28|8.93|5.65||Flood|||\\r\\n|8|362|176|7.91|13.44|5.52|||Emergency Manager||\\r\\n\\r\\n---\\r\\n\\r\\n> [!IMPORTANT]\\r\\n> The content below is Microsoft confidential(not available in the [public site](https://docs.microsoft.com/en-us/azure/data-explorer/))\\r\\n\\r\\n# diffpatterns plugin - Internal\\r\\n\\r\\nIf you have questions about diffpatterns or other ML related workflows in Kusto you can post them on the following DL: [KustoML](mailto:kustoML@microsoft.com).',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/diffpatternsplugin\",\"diffpatternsplugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"diffpatterns_text\",\"Compares two data sets of string values and finds text patterns that characterize differences between the two data sets. The plugin is invoked with the [`evaluate`](evaluateoperator.md) operator.\",\"The `diffpatterns_text` returns a set of text patterns that capture different portions of the data in the two sets (i.e. a pattern capturing a large percentage of the rows when the condition is `true` and low percentage of the rows when the condition is `false`). The patterns are built from consecutive tokens (separated by white space), with a token from the text column or a `*` representing a wildcard. Each pattern is represented by a row in the results.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`T | evaluate diffpatterns_text(`TextColumn, BooleanCondition [, MinTokens,\\u00a0Threshold , MaxTokens]`)` \\r\\n\\r\\n## Arguments\\r\\n\\r\\n### Required arguments\\r\\n\\r\\n* TextColumn - *column_name*\\r\\n    The text column to analyze, must be of type string.\\r\\n    \\r\\n* BooleanCondition - *Boolean expression*\\r\\n    Defines how to generate the two record subsets to compare to the input table. The algorithm splits the query into two data sets, \\u201cTrue\\u201d and \\u201cFalse\\u201d according to the condition, then analyzes the (text) differences between them. \\r\\n\\r\\n### Optional arguments\\r\\n\\r\\nAll other arguments are optional, but they must be ordered as below. \\r\\n\\r\\n* MinTokens  - 0 < *int* < 200 [default: 1]\\r\\n    Sets the minimal number of non-wildcard tokens per result pattern.\\r\\n* Threshold - 0.015 < *double* < 1 [default: 0.05]\\r\\n    Sets the minimal pattern (ratio) difference between the two sets (see [diffpatterns](diffpatternsplugin.md)).\\r\\n* MaxTokens  - 0 < *int* [default: 20]\\r\\n    Sets the maximal number of tokens (from the beginning) per result pattern, specifying a lower limit decreases the query runtime.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe result of diffpatterns_text returns the following columns:\\r\\n\\r\\n* Count_of_True: The number of rows matching the pattern when the condition is `true`.\\r\\n* Count_of_False: The number of rows matching the pattern when the condition is `false`.\\r\\n* Percent_of_True: The percentage of rows matching the pattern from the rows when the condition is `true`.\\r\\n* Percent_of_False: The percentage of rows matching the pattern from the rows when the condition is `false`.\\r\\n* Pattern: The text pattern containing tokens from the text string and '`*`' for wildcards. \\r\\n\\r\\n> [!NOTE]\\r\\n> The patterns aren't necessarily distinct and may not provide full coverage of the data set. The patterns may be overlapping and some rows may not match any pattern.\",'The following example uses data from the StormEvents table in the help cluster. To access this data, sign in to [https://dataexplorer.azure.com/clusters/help/databases/Samples](https://dataexplorer.azure.com/clusters/help/databases/Samples). In the left menu, browse to **help** > **Samples** > **Tables** > **Storm_Events**.\\r\\n\\r\\n```\\r\\nStormEvents     \\r\\n| where EventNarrative != \"\" and monthofyear(StartTime) > 1 and monthofyear(StartTime) < 9\\r\\n| where EventType == \"Drought\" or EventType == \"Extreme Cold/Wind Chill\"\\r\\n| evaluate diffpatterns_text(EpisodeNarrative, EventType == \"Extreme Cold/Wind Chill\", 2)\\r\\n```\\r\\n\\r\\n|Count_of_True|Count_of_False|Percent_of_True|Percent_of_False|Pattern|\\r\\n|---|---|---|---|---|\\r\\n|11|0|6.29|0|Winds shifting northwest in * wake * a surface trough brought heavy lake effect snowfall downwind * Lake Superior from|\\r\\n|9|0|5.14|0|Canadian high pressure settled * * region * produced the coldest temperatures since February * 2006. Durations * freezing temperatures|\\r\\n|0|34|0|6.24|* * * * * * * * * * * * * * * * * * West Tennessee,|\\r\\n|0|42|0|7.71|* * * * * * caused * * * * * * * * across western Colorado. *|\\r\\n|0|45|0|8.26|* * below normal *|\\r\\n|0|110|0|20.18|Below normal *|\\r\\n\\r\\n---\\r\\n\\r\\n> [!IMPORTANT]\\r\\n> The content below is Microsoft confidential(not available in the [public site](https://docs.microsoft.com/en-us/azure/data-explorer/))\\r\\n\\r\\n# diffpatterns_text plugin - Internal\\r\\n\\r\\nIf you have questions about diffpatterns_text or other ML related workflows in Kusto you can post them on the following DL: [KustoML](mailto:kustoML@microsoft.com).',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/diffpatterns-textplugin\",\"diffpatterns-textplugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"distinct\",\"Produces a table with the distinct combination of the provided columns of the input table.\",\"```\\r\\nT | distinct Column1, Column2\\r\\n```\\r\\n\\r\\nProduces a table with the distinct combination of all columns in the input table.\\r\\n\\r\\n```\\r\\nT | distinct *\\r\\n```\",\"Shows the distinct combination of fruit and price.\\r\\n\\r\\n```\\r\\nTable | distinct fruit, price\\r\\n```\\r\\n\\r\\n![Two tables. One has suppliers, fruit types, and prices, with some fruit-price combinations repeated. The second table lists only unique combinations.](images/distinctoperator/distinct.PNG)\\r\\n**Notes**\\r\\n\\r\\n* Unlike `summarize by ...`, the `distinct` operator supports providing an asterisk (`*`) as the group key, making it easier to use for wide tables.\\r\\n* If the group by keys are of high cardinalities, using `summarize by ...` with the [shuffle strategy](shufflequery.md) could be useful.\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/distinctoperator\",\"distinctoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"dynamic_to_json\",\"Converts a scalar value of type `dynamic` to a canonical `string` representation.\",\"## Syntax\\r\\n\\r\\n`dynamic_to_json(Expr)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *Expr*: Expression of `dynamic` type. The function accepts one argument.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a canonical representation of the input as a value of type `string`,\\r\\naccording to the following rules:\\r\\n\\r\\n* If the input is a scalar value of type other than `dynamic`,\\r\\n   the output is the application of `tostring()` to that value.\\r\\n* If the input in an array of values, the output is composed of the\\r\\n   characters `[`, `,`, and `]` interspersed with the canonical representation\\r\\n   described here of each array element.\\r\\n* If the input is a property bag, the output is composed of the characters\\r\\n   `{`, `,`, and `}` interspersed with the colon (`:`)-delimited name/value pairs\\r\\n   of the properties. The pairs are sorted by the names, and the values\\r\\n   are in the canonical representation described here of each array element.\",\"Expression:\\r\\n\\r\\n```\\r\\nlet bag1 = dynamic_to_json(\\r\\n  dynamic({\\r\\n    'Y10':dynamic({}),\\r\\n    'X8': dynamic({\\r\\n      'c3':1,\\r\\n      'd8':5,\\r\\n      'a4':6\\r\\n    }),\\r\\n    'D1':114,\\r\\n    'A1':12,\\r\\n    'B1':2,\\r\\n    'C1':3,\\r\\n    'A14':[15, 13, 18]\\r\\n}));\\r\\nlet bag2 = dynamic_to_json(\\r\\n  dynamic({\\r\\n    'X8': dynamic({\\r\\n      'a4':6,\\r\\n      'c3':1,\\r\\n      'd8':5\\r\\n    }),\\r\\n    'A14':[15, 13, 18],\\r\\n    'C1':3,\\r\\n    'B1':2,\\r\\n    'Y10': dynamic({}),\\r\\n    'A1':12, 'D1':114\\r\\n  }));\\r\\nprint AreEqual=bag1 == bag2, Result=bag1\\r\\n```\\r\\n\\r\\nResult:\\r\\n\\r\\n|AreEqual|Result|\\r\\n|---|---|\\r\\n|true|{\\\"A1\\\":12,\\\"A14\\\":[15,13,18],\\\"B1\\\":2,\\\"C1\\\":3,\\\"D1\\\":114,\\\"X8\\\":{\\\"a4\\\":6,\\\"c3\\\":1,\\\"d8\\\":5},\\\"Y10\\\":{}}|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/dynamic-to-json-function\",\"dynamic-to-json-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"endofday\",\"Returns the end of the day containing the date, shifted by an offset, if provided.\",\"## Syntax\\r\\n\\r\\n`endofday(`*date* [`,`*offset*]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* `date`: The input date.\\r\\n* `offset`: An optional number of offset days from the input date (integer, default - 0).\\r\\n\\r\\n## Returns\\r\\n\\r\\nA datetime representing the end of the day for the given *date* value, with the offset, if specified.\",\"```\\r\\n  range offset from -1 to 1 step 1\\r\\n | project dayEnd = endofday(datetime(2017-01-01 10:10:17), offset) \\r\\n```\\r\\n\\r\\n|dayEnd|\\r\\n|---|\\r\\n|2016-12-31 23:59:59.9999999|\\r\\n|2017-01-01 23:59:59.9999999|\\r\\n|2017-01-02 23:59:59.9999999|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/endofdayfunction\",\"endofdayfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"endofmonth\",\"Returns the end of the month containing the date, shifted by an offset, if provided.\",\"## Syntax\\r\\n\\r\\n`endofmonth(`*date* [`,`*offset*]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* `date`: The input date.\\r\\n* `offset`: An optional number of offset months from the input date (integer, default - 0).\\r\\n\\r\\n## Returns\\r\\n\\r\\nA datetime representing the end of the month for the given *date* value, with the offset, if specified.\",\"```\\r\\n  range offset from -1 to 1 step 1\\r\\n | project monthEnd = endofmonth(datetime(2017-01-01 10:10:17), offset) \\r\\n```\\r\\n\\r\\n|monthEnd|\\r\\n|---|\\r\\n|2016-12-31 23:59:59.9999999|\\r\\n|2017-01-31 23:59:59.9999999|\\r\\n|2017-02-28 23:59:59.9999999|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/endofmonthfunction\",\"endofmonthfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"endofweek\",\"Returns the end of the week containing the date, shifted by an offset, if provided.\",\"Last day of the week is considered to be a Saturday.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`endofweek(`*date* [`,`*offset*]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* `date`: The input date.\\r\\n* `offset`: An optional number of offset weeks from the input date (integer, default - 0).\\r\\n\\r\\n## Returns\\r\\n\\r\\nA datetime representing the end of the week for the given *date* value, with the offset, if specified.\",\"```\\r\\n  range offset from -1 to 1 step 1\\r\\n | project weekEnd = endofweek(datetime(2017-01-01 10:10:17), offset)  \\r\\n\\r\\n```\\r\\n\\r\\n|weekEnd|\\r\\n|---|\\r\\n|2016-12-31 23:59:59.9999999|\\r\\n|2017-01-07 23:59:59.9999999|\\r\\n|2017-01-14 23:59:59.9999999|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/endofweekfunction\",\"endofweekfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"endofyear\",\"Returns the end of the year containing the date, shifted by an offset, if provided.\",\"## Syntax\\r\\n\\r\\n`endofyear(`*date* [`,`*offset*]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* `date`: The input date.\\r\\n* `offset`: An optional number of offset years from the input date (integer, default - 0).\\r\\n\\r\\n## Returns\\r\\n\\r\\nA datetime representing the end of the year for the given *date* value, with the offset, if specified.\",\"```\\r\\n  range offset from -1 to 1 step 1\\r\\n | project yearEnd = endofyear(datetime(2017-01-01 10:10:17), offset) \\r\\n```\\r\\n\\r\\n|yearEnd|\\r\\n|---|\\r\\n|2016-12-31 23:59:59.9999999|\\r\\n|2017-12-31 23:59:59.9999999|\\r\\n|2018-12-31 23:59:59.9999999|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/endofyearfunction\",\"endofyearfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"endswith\",\"Filters a record set for data with a case-insensitive ending string.\",'The following table provides a comparison of the `endswith` operators:\\r\\n\\r\\n|Operator   |Description   |Case-Sensitive  |Example (yields `true`)  |\\r\\n|-----------|--------------|----------------|-------------------------|\\r\\n|[`endswith`](endswith-operator.md) |RHS is a closing subsequence of LHS |No |`\"Fabrikam\" endswith \"Kam\"`|\\r\\n|[`!endswith`](not-endswith-operator.md) |RHS isn\\'t a closing subsequence of LHS |No |`\"Fabrikam\" !endswith \"brik\"`|\\r\\n|[`endswith_cs`](endswith-cs-operator.md) |RHS is a closing subsequence of LHS |Yes |`\"Fabrikam\" endswith_cs \"kam\"`|\\r\\n|[`!endswith_cs`](not-endswith-cs-operator.md) |RHS isn\\'t a closing subsequence of LHS |Yes |`\"Fabrikam\" !endswith_cs \"brik\"`|\\r\\n\\r\\n> [!NOTE]\\r\\n> The following abbreviations are used in the table above:\\r\\n>\\r\\n> * RHS = right hand side of the expression\\r\\n> * LHS = left hand side of the expression\\r\\n\\r\\nFor further information about other operators and to determine which operator is most appropriate for your query, see [datatype string operators](datatypes-string-operators.md). \\r\\n\\r\\nCase-insensitive operators are currently supported only for ASCII-text. For non-ASCII comparison, use the [tolower()](tolowerfunction.md) function.\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n> [!NOTE]\\r\\n> Performance depends on the type of search and the structure of the data.\\r\\n\\r\\nFor faster results, use the case-sensitive version of an operator, for example, `endswith_cs`, not `endswith`. For best practices, see [Query best practices](best-practices.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *col* `endswith` `(`*expression*`)`   \\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T* - The tabular input whose records are to be filtered.\\r\\n* *col* - The column to filter.\\r\\n* *expression* - Scalar or literal expression.\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.','```\\r\\nStormEvents\\r\\n    | summarize event_count=count() by State\\r\\n    | where State endswith \"sas\"\\r\\n    | where event_count > 10\\r\\n    | project State, event_count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|event_count|\\r\\n|-----|-----------|\\r\\n|KANSAS|3166|\\r\\n|ARKANSAS|1028|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/endswith-operator\",\"endswith-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"endswith_cs\",\"Filters a record set for data with a case-sensitive ending string.\",'The following table provides a comparison of the `endswith` operators:\\r\\n\\r\\n|Operator   |Description   |Case-Sensitive  |Example (yields `true`)  |\\r\\n|-----------|--------------|----------------|-------------------------|\\r\\n|[`endswith`](endswith-operator.md) |RHS is a closing subsequence of LHS |No |`\"Fabrikam\" endswith \"Kam\"`|\\r\\n|[`!endswith`](not-endswith-operator.md) |RHS isn\\'t a closing subsequence of LHS |No |`\"Fabrikam\" !endswith \"brik\"`|\\r\\n|[`endswith_cs`](endswith-cs-operator.md) |RHS is a closing subsequence of LHS |Yes |`\"Fabrikam\" endswith_cs \"kam\"`|\\r\\n|[`!endswith_cs`](not-endswith-cs-operator.md) |RHS isn\\'t a closing subsequence of LHS |Yes |`\"Fabrikam\" !endswith_cs \"brik\"`|\\r\\n\\r\\n> [!NOTE]\\r\\n> The following abbreviations are used in the table above:\\r\\n>\\r\\n> * RHS = right hand side of the expression\\r\\n> * LHS = left hand side of the expression\\r\\n\\r\\nFor further information about other operators and to determine which operator is most appropriate for your query, see [datatype string operators](datatypes-string-operators.md). \\r\\n\\r\\n## Performance tips\\r\\n\\r\\n> [!NOTE]\\r\\n> Performance depends on the type of search and the structure of the data.\\r\\n\\r\\nFor faster results, use the case-sensitive version of an operator, for example, `endswith_cs`, not `endswith`. For best practices, see [Query best practices](best-practices.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *col* `endswith_cs` `(`*expression*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T* - The tabular input whose records are to be filtered.\\r\\n* *col* - The column to filter.\\r\\n* *expression* - Scalar or literal expression.\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.','```\\r\\nStormEvents\\r\\n    | summarize event_count=count() by State\\r\\n    | where State endswith_cs \"IDA\"\\r\\n    | count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Count|\\r\\n|-----|\\r\\n|1|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/endswith-cs-operator\",\"endswith-cs-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"estimate_data_size\",\"Returns an estimated data size in bytes of the selected columns of the tabular expression.\",\"```\\r\\nestimate_data_size(*)\\r\\nestimate_data_size(Col1, Col2, Col3)\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`estimate_data_size(*)`\\r\\n\\r\\n`estimate_data_size(`*col1*`, `*col2*`, `...`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *col1*, *col2*: Selection of column references in the source tabular expression that are used for data size estimation. To include all columns, use `*` (asterisk) syntax.\\r\\n\\r\\n## Returns\\r\\n\\r\\n* The estimated data size  in bytes of the record size. Estimation is based on data types and values lengths.\",\"Calculating total data size using `estimate_data_size()`:\\r\\n\\r\\n```\\r\\nrange x from 1 to 10 step 1                    // x (long) is 8 \\r\\n| extend Text = '1234567890'                   // Text length is 10  \\r\\n| summarize Total=sum(estimate_data_size(*))   // (8+10)x10 = 180\\r\\n```\\r\\n\\r\\n|Total|\\r\\n|---|\\r\\n|180|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/estimate-data-sizefunction\",\"estimate-data-sizefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"evaluate\",\"Invokes a service-side query extension (plugin).\",\"The `evaluate` operator is a tabular operator that provides the ability to\\r\\ninvoke query language extensions known as **plugins**. Plugins can be enabled\\r\\nor disabled (unlike other language constructs, which are always available),\\r\\nand aren't \\\"bound\\\" by the relational nature of the language (for example, they may\\r\\nnot have a predefined, statically determined, output schema).\\r\\n\\r\\n> [!NOTE]\\r\\n> * Syntactically, `evaluate` behaves similarly to the [invoke operator](./invokeoperator.md), which invokes tabular functions.\\r\\n> * Plugins provided through the evaluate operator aren't bound by the regular rules of query execution or argument evaluation.\\r\\n> * Specific plugins may have specific restrictions. For example, plugins whose output schema depends on the data (for example, [bag_unpack plugin](./bag-unpackplugin.md) and [pivot plugin](./pivotplugin.md)) can't be used when performing cross-cluster queries.\\r\\n\\r\\n## Syntax \\r\\n\\r\\n[*T* `|`] `evaluate` [ *evaluateParameters* ] *PluginName* `(` [*PluginArg1* [`,` *PluginArg2*]... `)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T* is an optional tabular input to the plugin. (Some plugins don't take\\r\\n  any input, and act as a tabular data source.)\\r\\n* *PluginName* is the mandatory name of the plugin being invoked.\\r\\n* *PluginArg1*, ... are the optional arguments to the plugin.\\r\\n* *evaluateParameters*: Zero or more (space-separated) parameters in the form of\\r\\n  *Name* `=` *Value* that control the behavior of the evaluate operation and execution plan. Each plugin may decide differently how to handle each parameter. Refer to each plugin's documentation for specific behavior.  \\r\\n\\r\\n## Parameters\\r\\n\\r\\nThe following parameters are supported: \\r\\n\\r\\n|Name                |Values                           |Description                                |\\r\\n  |--------------------|---------------------------------|-------------------------------------------|\\r\\n  |`hint.distribution` |`single`, `per_node`, `per_shard`| [Distribution hints](#distribution-hints) |\\r\\n  |`hint.pass_filters` |`true`, `false`| Allow `evaluate` operator to passthrough any matching filters before the plugin. Filter is considered as 'matched' if it refers to a column existing before the `evaluate` operator. Default: `false` |\\r\\n  |`hint.pass_filters_column` |*column_name*| Allow plugin operator to passthrough filters referring to *column_name* before the plugin. Parameter can be used multiple times with different column names. |\\r\\n\\r\\n## Plugins\\r\\n\\r\\nThe following plugins are supported:\\r\\n\\r\\n- [autocluster plugin](autoclusterplugin.md)\\r\\n- [azure-digital-twins-query-request plugin](azure-digital-twins-query-request-plugin.md)\\r\\n- [bag-unpack plugin](bag-unpackplugin.md)\\r\\n- [basket plugin](basketplugin.md)\\r\\n- [cosmosdb-sql-request plugin](cosmosdb-plugin.md)\\r\\n- [dcount-intersect plugin](dcount-intersect-plugin.md)\\r\\n- [diffpatterns plugin](diffpatternsplugin.md)\\r\\n- [diffpatterns-text plugin](diffpatterns-textplugin.md)\\r\\n- [infer-storage-schema plugin](inferstorageschemaplugin.md)\\r\\n- [ipv4-lookup plugin](ipv4-lookup-plugin.md)\\r\\n- [mysql-request-plugin](mysqlrequest-plugin.md)\\r\\n- [narrow plugin](narrowplugin.md)\\r\\n- [pivot plugin](pivotplugin.md)\\r\\n- [preview plugin](previewplugin.md)\\r\\n- [R plugin](rplugin.md)\\r\\n- [rolling-percentile plugin](rolling-percentile-plugin.md)\\r\\n- [rows-near plugin](rows-near-plugin.md)\\r\\n- [schema-merge plugin](schemamergeplugin.md)\\r\\n- [sql-request plugin](mysqlrequest-plugin.md)\\r\\n- [sequence-detect plugin](sequence-detect-plugin.md)\\r\\n\\r\\n## Distribution hints\\r\\n\\r\\nDistribution hints specify how the plugin execution will be distributed across multiple cluster nodes. Each plugin may implement a different support for the distribution. The plugin's documentation specifies the distribution options supported by the plugin.\\r\\n\\r\\nPossible values:\\r\\n\\r\\n* `single`: A single instance of the plugin will run over the entire query data.\\r\\n* `per_node`: If the query before the plugin call is distributed across nodes, then an instance of the plugin will run on each node over the data that it contains.\\r\\n* `per_shard`: If the data before the plugin call is distributed across shards, then an instance of the plugin will run over each shard of the data.\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/evaluateoperator\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"exp\",\"The base-e exponential function of x, which is e raised to the power x: e^x.\",\"## Syntax\\r\\n\\r\\n`exp(`*x*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *x*: A real number, value of the exponent.\\r\\n\\r\\n## Returns\\r\\n\\r\\n* Exponential value of x.\\r\\n* For natural (base-e) logarithms, see [log()](log-function.md).\\r\\n* For exponential functions of base-2 and base-10 logarithms, see [exp2()](exp2-function.md), [exp10()](exp10-function.md)\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/exp-function\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"exp10\",\"The base-10 exponential function of x, which is 10 raised to the power x: 10^x.\",\"## Syntax\\r\\n\\r\\n`exp10(`*x*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *x*: A real number, value of the exponent.\\r\\n\\r\\n## Returns\\r\\n\\r\\n* Exponential value of x.\\r\\n* For natural (base-10) logarithms, see [log10()](log10-function.md).\\r\\n* For exponential functions of base-e and base-2 logarithms, see [exp()](exp-function.md), [exp2()](exp2-function.md)\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/exp10-function\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"exp2\",\"The base-2 exponential function of x, which is 2 raised to the power x: 2^x.\",\"## Syntax\\r\\n\\r\\n`exp2(`*x*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *x*: A real number, value of the exponent.\\r\\n\\r\\n## Returns\\r\\n\\r\\n* Exponential value of x.\\r\\n* For natural (base-2) logarithms, see [log2()](log2-function.md).\\r\\n* For exponential functions of base-e and base-10 logarithms, see [exp()](exp-function.md), [exp10()](exp10-function.md)\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/exp2-function\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"extend\",\"Create calculated columns and append them to the result set.\",\"```\\r\\nT | extend duration = endTime - startTime\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `| extend` [*ColumnName* | `(`*ColumnName*[`,` ...]`)` `=`] *Expression* [`,` ...]\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T*: The input tabular result set.\\r\\n* *ColumnName:* Optional. The name of the column to add or update. If omitted, the name will be generated. If *Expression* returns more than one column, a list of column names can be specified in parentheses. In this case *Expression*'s output columns will be given the specified names, dropping the rest of the output columns, if there are any. If a list of the column names is not specified, all *Expression*'s output columns with generated names will be added to the output.\\r\\n* *Expression:* A calculation over the columns of the input.\\r\\n\\r\\n## Returns\\r\\n\\r\\nA copy of the input tabular result set, such that:\\r\\n\\r\\n1. Column names noted by `extend` that already exist in the input are removed\\r\\n   and appended as their new calculated values.\\r\\n2. Column names noted by `extend` that do not exist in the input are appended\\r\\n   as their new calculated values.\\r\\n\\r\\n**Tips**\\r\\n\\r\\n* The `extend` operator adds a new column to the input result set, which does\\r\\n  **not** have an index. In most cases, if the new column is set to be exactly\\r\\n  the same as an existing table column that has an index, Kusto can automatically\\r\\n  use the existing index. However, in some complex scenarios this propagation is\\r\\n  not done. In such cases, if the goal is to rename a column,\\r\\n  use the [`project-rename` operator](projectrenameoperator.md) instead.\",'```\\r\\nLogs\\r\\n| extend\\r\\n    Duration = CreatedOn - CompletedOn\\r\\n    , Age = now() - CreatedOn\\r\\n    , IsSevere = Level == \"Critical\" or Level == \"Error\"\\r\\n```\\r\\n\\r\\nYou can use the [series_stats](series-statsfunction.md) function to return multiple columns.',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/extendoperator\",\"extendoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"extent_id\",'Returns a unique identifier that identifies the data shard (\"extent\") that the current record resides in.',\"Applying this function to calculated data that isn't attached to a data shard returns an empty guid (all zeros).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`extent_id()`\\r\\n\\r\\n## Returns\\r\\n\\r\\nA value of type `guid` that identifies the current record's data shard,\\r\\nor an empty guid (all zeros).\",\"The following example shows how to get a list of all the data shards\\r\\nthat have records from an hour ago with a specific value for the\\r\\ncolumn `ActivityId`. It demonstrates that some query operators (here,\\r\\nthe `where` operator, and also `extend` and `project`)\\r\\npreserve the information about the data shard hosting the record.\\r\\n\\r\\n```\\r\\nT\\r\\n| where Timestamp > ago(1h)\\r\\n| where ActivityId == 'dd0595d4-183e-494e-b88e-54c52fe90e5a'\\r\\n| extend eid=extent_id()\\r\\n| summarize by eid\\r\\n```\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/extentidfunction\",\"extentidfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"extent_tags\",'Returns a dynamic array with the [tags](../management/extents-overview.md#extent-tagging) of the data shard (\"extent\") that the current record is in.',\"Applying this function to calculated data, which isn't attached to a data shard, returns an empty value.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`extent_tags()`\\r\\n\\r\\n## Returns\\r\\n\\r\\nA value of type `dynamic` that is an array holding the current record's extent tags,\\r\\nor an empty value.\",\"Some query operators preserve the information about the data shard hosting the record.\\r\\nThese operators include `where`, `extend`, and `project`.\\r\\nThe following example shows how to get a list the tags of all the data shards\\r\\nthat have records from an hour ago, with a specific value for the\\r\\ncolumn `ActivityId`. \\r\\n\\r\\n```\\r\\nT\\r\\n| where Timestamp > ago(1h)\\r\\n| where ActivityId == 'dd0595d4-183e-494e-b88e-54c52fe90e5a'\\r\\n| extend tags = extent_tags()\\r\\n| summarize by tostring(tags)\\r\\n```\\r\\n\\r\\nThe following example shows how to obtain a count of all records from the \\r\\nlast hour, which are stored in extents tagged with the tag `MyTag`\\r\\n(and potentially other tags), but not tagged with the tag `drop-by:MyOtherTag`.\\r\\n\\r\\n```\\r\\nT\\r\\n| where Timestamp > ago(1h)\\r\\n| extend Tags = extent_tags()\\r\\n| where Tags has_cs 'MyTag' and Tags !has_cs 'drop-by:MyOtherTag'\\r\\n| count\\r\\n```\\r\\n\\r\\n> [!NOTE]\\r\\n> Filtering on the value of `extent_tags()` performs best when one of the following string operators is used:\\r\\n> `has`, `has_cs`, `!has`, `!has_cs`.\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/extenttagsfunction\",\"extenttagsfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"external_table\",\"References an [external table](schema-entities/externaltables.md) by name.\",\"```\\r\\nexternal_table('StormEvent')\\r\\n```\\r\\n\\r\\n> [!NOTE]\\r\\n> * The `external_table` function has similar restrictions as the [table](tablefunction.md) function.\\r\\n> * Standard [query limits](../concepts/querylimits.md) apply to external table queries as well.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`external_table` `(` *TableName* [`,` *MappingName* ] `)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *TableName*: The name of the external table being queried.\\r\\n  Must be a string literal referencing an external table of kind\\r\\n  `blob`, `adl` or `sql`.\\r\\n* *MappingName*: An optional name of the mapping object that maps the\\r\\n  fields in the actual (external) data shards to the columns output\\r\\n  by this function.\\r\\n\\r\\n## Next steps\\r\\n\\r\\n* [External tables overview](schema-entities/externaltables.md)\\r\\n* [Create and alter Azure Storage external tables](../management/external-tables-azurestorage-azuredatalake.md)\\r\\n* [Create and alter SQL Server external tables](../management/external-sql-tables.md)\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/externaltablefunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"externaldata\",\"The `externaldata` operator returns a table whose schema is defined in the query itself, and whose data is read from an external storage artifact, such as a blob in \\r\\nAzure Blob Storage or a file in Azure Data Lake Storage.\",\"## Syntax\\r\\n\\r\\n`externaldata` `(` *ColumnName* `:` *ColumnType* [`,` ...] `)`   \\r\\n`[` *StorageConnectionString* [`,` ...] `]`   \\r\\n[`with` `(` *PropertyName* `=` *PropertyValue* [`,` ...] `)`]\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *ColumnName*, *ColumnType*: The arguments define the schema of the table.\\r\\n  The syntax is the same as the syntax used when defining a table in [`.create table`](../management/create-table-command.md).\\r\\n* *StorageConnectionString*: [Storage connection strings](../api/connection-strings/storage-connection-strings.md) that describe the storage artifacts holding the data to return.\\r\\n\\r\\n> [!NOTE]\\r\\n> The `externaldata` operator supports Shared Access (SAS) key, Access key, and Azure AD Token authentication methods. For more information, see [Storage authentication methods](../api/connection-strings/storage-authentication-methods.md).\\r\\n\\r\\n* *PropertyName*, *PropertyValue*, ...: Additional properties that describe how to interpret\\r\\n  the data retrieved from storage, as listed under [ingestion properties](../../ingestion-properties.md).\\r\\n\\r\\nCurrently supported properties are:\\r\\n\\r\\n| Property         | Type     | Description       |\\r\\n|------------------|----------|-------------------|\\r\\n| `format`         | `string` | Data format. If not specified, an attempt is made to detect the data format from file extension (defaults to `CSV`). Any of the [ingestion data formats](../../ingestion-supported-formats.md) are supported. |\\r\\n| `ignoreFirstRecord` | `bool` | If set to true, indicates that the first record in every file is ignored. This property is useful when querying CSV files with headers. |\\r\\n| `ingestionMapping` | `string` | A string value that indicates how to map data from the source file to the actual columns in the operator result set. See [data mappings](../management/mappings.md). |\\r\\n\\r\\n> [!NOTE]\\r\\n> * This operator doesn't accept any pipeline input.\\r\\n> * Standard [query limits](../concepts/querylimits.md) apply to external data queries as well.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe `externaldata` operator returns a data table of the given schema whose data was parsed from the specified storage artifact, indicated by the storage connection string.\",'**Fetch a list of user IDs stored in Azure Blob Storage**\\r\\n\\r\\nThe following example shows how to find all records in a table whose `UserID` column falls into a known set of IDs, held (one per line) in an external storage file. Since the data format isn\\'t specified, the detected data format is `TXT`.\\r\\n\\r\\n```\\r\\nUsers\\r\\n| where UserID in ((externaldata (UserID:string) [\\r\\n    @\"https://storageaccount.blob.core.windows.net/storagecontainer/users.txt\" \\r\\n      h@\"?...SAS...\" // Secret token needed to access the blob\\r\\n    ]))\\r\\n| ...\\r\\n```\\r\\n\\r\\n**Query multiple data files**\\r\\n\\r\\nThe following example queries multiple data files stored in external storage.\\r\\n\\r\\n```\\r\\nexternaldata(Timestamp:datetime, ProductId:string, ProductDescription:string)\\r\\n[\\r\\n  h@\"https://mycompanystorage.blob.core.windows.net/archivedproducts/2019/01/01/part-00000-7e967c99-cf2b-4dbb-8c53-ce388389470d.csv.gz?...SAS...\",\\r\\n  h@\"https://mycompanystorage.blob.core.windows.net/archivedproducts/2019/01/02/part-00000-ba356fa4-f85f-430a-8b5a-afd64f128ca4.csv.gz?...SAS...\",\\r\\n  h@\"https://mycompanystorage.blob.core.windows.net/archivedproducts/2019/01/03/part-00000-acb644dc-2fc6-467c-ab80-d1590b23fc31.csv.gz?...SAS...\"\\r\\n]\\r\\nwith(format=\"csv\")\\r\\n| summarize count() by ProductId\\r\\n```\\r\\n\\r\\nThe above example can be thought of as a quick way to query multiple data files without defining an [external table](schema-entities/externaltables.md).\\r\\n\\r\\n> [!NOTE]\\r\\n> Data partitioning isn\\'t recognized by the `externaldata` operator.\\r\\n\\r\\n**Query hierarchical data formats**\\r\\n\\r\\nTo query hierarchical data format, such as `JSON`, `Parquet`, `Avro`, or `ORC`, `ingestionMapping` must be specified in the operator properties. \\r\\nIn this example, there\\'s a JSON file stored in Azure Blob Storage with the following contents:\\r\\n\\r\\n```JSON\\r\\n{\\r\\n  \"timestamp\": \"2019-01-01 10:00:00.238521\",   \\r\\n  \"data\": {    \\r\\n    \"tenant\": \"e1ef54a6-c6f2-4389-836e-d289b37bcfe0\",   \\r\\n    \"method\": \"RefreshTableMetadata\"   \\r\\n  }   \\r\\n}   \\r\\n{\\r\\n  \"timestamp\": \"2019-01-01 10:00:01.845423\",   \\r\\n  \"data\": {   \\r\\n    \"tenant\": \"9b49d0d7-b3e6-4467-bb35-fa420a25d324\",   \\r\\n    \"method\": \"GetFileList\"   \\r\\n  }   \\r\\n}\\r\\n...\\r\\n```\\r\\n\\r\\nTo query this file using the `externaldata` operator, a data mapping must be specified. The mapping dictates how to map JSON fields to the operator result set columns:\\r\\n\\r\\n```\\r\\nexternaldata(Timestamp: datetime, TenantId: guid, MethodName: string)\\r\\n[ \\r\\n   h@\\'https://mycompanystorage.blob.core.windows.net/events/2020/09/01/part-0000046c049c1-86e2-4e74-8583-506bda10cca8.json?...SAS...\\'\\r\\n]\\r\\nwith(format=\\'multijson\\', ingestionMapping=\\'[{\"Column\":\"Timestamp\",\"Properties\":{\"Path\":\"$.timestamp\"}},{\"Column\":\"TenantId\",\"Properties\":{\"Path\":\"$.data.tenant\"}},{\"Column\":\"MethodName\",\"Properties\":{\"Path\":\"$.data.method\"}}]\\')\\r\\n```\\r\\n\\r\\nThe `MultiJSON` format is used here because single JSON records are spanned into multiple lines.\\r\\n\\r\\nFor more info on mapping syntax, see [data mappings](../management/mappings.md).',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/externaldata-operator\",\"externaldata-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"extract\",\"Get a match for a [regular expression](./re2.md) from a source string.\",'Optionally, convert the extracted substring to the indicated type.\\r\\n\\r\\n```\\r\\nextract(\"x=([0-9.]+)\", 1, \"hello x=45.6|wo\") == \"45.6\"\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`extract(`*regex*`,` *captureGroup*`,` *source* [`,` *typeLiteral*]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *regex*: A [regular expression](./re2.md).\\r\\n* *captureGroup*: A positive `int` constant indicating the\\r\\ncapture group to extract. 0 stands for the entire match, 1 for the value matched by the first \\'(\\'parenthesis\\')\\' in the regular expression, 2 or more for subsequent parentheses.\\r\\n* *source*: A `string` to search.\\r\\n* *typeLiteral*: An optional type literal (e.g., `typeof(long)`). If provided, the extracted substring is converted to this type. \\r\\n\\r\\n## Returns\\r\\n\\r\\nIf *regex* finds a match in *source*: the substring matched against the indicated capture group *captureGroup*, optionally converted to *typeLiteral*.\\r\\n\\r\\nIf there\\'s no match, or the type conversion fails: `null`.','The example string `Trace` is searched for a definition for `Duration`. \\r\\nThe match is converted to `real`, then multiplied it by a time constant (`1s`) so that `Duration` is of type `timespan`. In this example, it is equal to 123.45 seconds:\\r\\n\\r\\n```\\r\\n...\\r\\n| extend Trace=\"A=1, B=2, Duration=123.45, ...\"\\r\\n| extend Duration = extract(\"Duration=([0-9.]+)\", 1, Trace, typeof(real)) * time(1s) \\r\\n```\\r\\n\\r\\nThis example is equivalent to `substring(Text, 2, 4)`:\\r\\n\\r\\n```\\r\\nextract(\"^.{2,2}(.{4,4})\", 1, Text)\\r\\n```',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/extractfunction\",\"extractfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"extract_all\",\"Get all matches for a [regular expression](./re2.md) from a source string.\\r\\nOptionally, retrieve a subset of matching groups.\",'```\\r\\nprint extract_all(@\"(\\\\d+)\", \"a set of numbers: 123, 567 and 789\") // results with the dynamic array [\"123\", \"567\", \"789\"]\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`extract_all(`*regex*`,` [*captureGroups*`,`] *source*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n|Argument        |Description                                  |Required or Optional  |\\r\\n|----------------|---------------------------------------------|----------------------|\\r\\n|regex           | A [regular expression](./re2.md) containing between one and 16 capture groups. Example of a valid regex: `@\"(\\\\d+)\"`. Example of an invalid regex: `@\"\\\\d+\"`                                                         |Required              |\\r\\n|captureGroups   |A dynamic array constant that indicates the capture group to extract. Valid values are from 1 to the number of capturing groups in the regular expression. Named capture groups are allowed as well (See [Examples](#examples))|Optional         |\\r\\n|source            |A `string` to search                         |Required              |\\r\\n\\r\\n## Returns\\r\\n\\r\\n* If *regex* finds a match in *source*: Returns dynamic array including all matches against the indicated capture groups *captureGroups*, or all of capturing groups in the *regex*.\\r\\n* If number of *captureGroups* is 1: The returned array has a single dimension of matched values.\\r\\n* If number of *captureGroups* is more than 1: The returned array is a two-dimensional collection of multi-value matches per *captureGroups* selection, or all capture groups present in the *regex* if *captureGroups* is omitted.\\r\\n* If there\\'s no match: `null`.','### Extract a single capture group\\r\\n\\r\\nReturns hex-byte representation (two hex-digits) of the GUID.\\r\\n\\r\\n```\\r\\nprint Id=\"82b8be2d-dfa7-4bd1-8f63-24ad26d31449\"\\r\\n| extend guid_bytes = extract_all(@\"([\\\\da-f]{2})\", Id) \\r\\n```\\r\\n\\r\\n|ID|guid_bytes|\\r\\n|---|---|\\r\\n|82b8be2d-dfa7-4bd1-8f63-24ad26d31449|[\"82\",\"b8\",\"be\",\"2d\",\"df\",\"a7\",\"4b\",\"d1\",\"8f\",\"63\",\"24\",\"ad\",\"26\",\"d3\",\"14\",\"49\"]|\\r\\n\\r\\n### Extract several capture groups \\r\\n\\r\\nUses a regular expression with three capturing groups to split each GUID part into first letter, last letter, and whatever is in the middle.\\r\\n\\r\\n```\\r\\nprint Id=\"82b8be2d-dfa7-4bd1-8f63-24ad26d31449\"\\r\\n| extend guid_bytes = extract_all(@\"(\\\\w)(\\\\w+)(\\\\w)\", Id)\\r\\n```\\r\\n\\r\\n|ID|guid_bytes|\\r\\n|---|---|\\r\\n|82b8be2d-dfa7-4bd1-8f63-24ad26d31449|[[\"8\",\"2b8be2\",\"d\"],[\"d\",\"fa\",\"7\"],[\"4\",\"bd\",\"1\"],[\"8\",\"f6\",\"3\"],[\"2\",\"4ad26d3144\",\"9\"]]|\\r\\n\\r\\n### Extract a subset of capture groups\\r\\n\\r\\nShows how to select a subset of capturing groups. \\r\\nThe regular expression matches the first letter, last letter, and all the rest. \\r\\nThe *captureGroups* parameter is used to select only the first and the last parts.\\r\\n\\r\\n```\\r\\nprint Id=\"82b8be2d-dfa7-4bd1-8f63-24ad26d31449\"\\r\\n| extend guid_bytes = extract_all(@\"(\\\\w)(\\\\w+)(\\\\w)\", dynamic([1,3]), Id) \\r\\n```\\r\\n\\r\\n|ID|guid_bytes|\\r\\n|---|---|\\r\\n|82b8be2d-dfa7-4bd1-8f63-24ad26d31449|[[\"8\",\"d\"],[\"d\",\"7\"],[\"4\",\"1\"],[\"8\",\"3\"],[\"2\",\"9\"]]|\\r\\n\\r\\n### Using named capture groups\\r\\n\\r\\nYou can use named capture groups of RE2 in extract_all().\\r\\nThe *captureGroups* uses both capture group indexes and named capture group reference to fetch matching values.\\r\\n\\r\\n```\\r\\nprint Id=\"82b8be2d-dfa7-4bd1-8f63-24ad26d31449\"\\r\\n| extend guid_bytes = extract_all(@\"(?P<first>\\\\w)(?P<middle>\\\\w+)(?P<last>\\\\w)\", dynamic([\\'first\\',2,\\'last\\']), Id) \\r\\n```\\r\\n\\r\\n|ID|guid_bytes|\\r\\n|---|---|\\r\\n|82b8be2d-dfa7-4bd1-8f63-24ad26d31449|[[\"8\",\"2b8be2\",\"d\"],[\"d\",\"fa\",\"7\"],[\"4\",\"bd\",\"1\"],[\"8\",\"f6\",\"3\"],[\"2\",\"4ad26d3144\",\"9\"]]|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/extractallfunction\",\"extractallfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"extract_json\",\"Get a specified element out of a JSON text using a path expression.\",'Optionally convert the extracted string to a specific type.\\r\\n\\r\\n> [!NOTE]\\r\\n> The `extract_json()` and `extractjson()` functions are interpreted equivalently.\\r\\n\\r\\n```\\r\\nextract_json(\"$.hosts[1].AvailableMB\", EventText, typeof(int))\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`extract_json(`*jsonPath*`,` *dataSource*`, ` *type*`)` \\r\\n\\r\\n`extractjson(`*jsonPath*`,` *dataSource*`, ` *type*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *jsonPath*: [JSONPath](jsonpath.md) string that defines an accessor into the JSON document.\\r\\n* *dataSource*: A JSON document.\\r\\n* *type*: An optional type literal (for example, typeof(long)). If provided, the extracted value is converted to this type.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThis function performs a [JSONPath](jsonpath.md) query into dataSource, which contains a valid JSON string, optionally converting that value to another type depending on the third argument.',\"The `[`bracket`]` notation and dot (`.`) notation are equivalent:\\r\\n\\r\\n```\\r\\nT\\r\\n| extend AvailableMB = extract_json(\\\"$.hosts[1].AvailableMB\\\", EventText, typeof(int))\\r\\n\\r\\nT\\r\\n| extend AvailableMB = extract_json(\\\"$['hosts'][1]['AvailableMB']\\\", EventText, typeof(int))\\r\\n```\\r\\n\\r\\n**Performance tips**\\r\\n\\r\\n* Apply where-clauses before using `extract_json()`\\r\\n* Consider using a regular expression match with [extract](extractfunction.md) instead. This can run very much faster, and is effective if the JSON is produced from a template.\\r\\n* Use `parse_json()` if you need to extract more than one value from the JSON.\\r\\n* Consider having the JSON parsed at ingestion by declaring the type of the column to be dynamic.\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/extractjsonfunction\",\"extractjsonfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"facet\",\"Returns a set of tables, one for each specified column.\\r\\nEach table specifies the list of values taken by its column.\\r\\nAn additional table can be created by using the `with` clause.\",\"## Syntax\\r\\n\\r\\n*T* `| facet by` *ColumnName* [`, ` ...] [`with (` *filterPipe* `)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *ColumnName:* The name of column in the input, to be summarized as an output table.\\r\\n* *filterPipe:* A query expression applied to the input table to produce one of the outputs.\\r\\n\\r\\n## Returns\\r\\n\\r\\nMultiple tables: one for the `with` clause, and one for each column.\",'```\\r\\nStormEvents\\r\\n| where State startswith \"A\" and EventType has \"Heavy\"\\r\\n| facet by State, EventType\\r\\n  with \\r\\n  (\\r\\n  where StartTime between(datetime(2007-01-04) .. 7d) \\r\\n  | project StartTime, Source, EpisodeId, EventType\\r\\n  | take 5\\r\\n  )\\r\\n```\\r\\n\\r\\n|StartTime|Source|EpisodeId|EventType|\\r\\n|---|---|---|---|\\r\\n|2007-01-04 12:00:00.0000000|COOP Observer|2192|Heavy Snow|\\r\\n|2007-01-04 15:00:00.0000000|Trained Spotter|2192|Heavy Snow|\\r\\n|2007-01-04 15:00:00.0000000|Trained Spotter|2192|Heavy Snow|\\r\\n|2007-01-04 15:00:00.0000000|Trained Spotter|2192|Heavy Snow|\\r\\n|2007-01-06 18:00:00.0000000|COOP Observer|2193|Heavy Snow|\\r\\n\\r\\n|State|count_State|\\r\\n|---|---|\\r\\n|ALABAMA|19|\\r\\n|ARIZONA|33|\\r\\n|ARKANSAS|1|\\r\\n|AMERICAN SAMOA|1|\\r\\n|ALASKA|58|\\r\\n\\r\\n|EventType|count_EventType|\\r\\n|---|---|\\r\\n|Heavy Rain|34|\\r\\n|Heavy Snow|78|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/facetoperator\",\"facetoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"find\",\"Finds rows that match a predicate across a set of tables.\",\"The scope of the `find` can also be cross-database or cross-cluster.\\r\\n\\r\\n```\\r\\nfind in (Table1, Table2, Table3) where Fruit==\\\"apple\\\"\\r\\nfind in (database('*').*) where Fruit == \\\"apple\\\"\\r\\nfind in (cluster('cluster_name').database('MyDB*'.*)) where Fruit == \\\"apple\\\"\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n* `find` [`withsource`=*ColumnName*] [`in` `(`*Table* [`,` *Table*, ...]`)`] `where` *Predicate* [`project-smart` | `project` *ColumnName* [`:`*ColumnType*] [`,` *ColumnName*[`:`*ColumnType*], ...][`,` `pack(*)`]] \\r\\n* `find` *Predicate* [`project-smart` | `project` *ColumnName*[`:`*ColumnType*] [`,` *ColumnName*[`:`*ColumnType*], ...] [`, pack(*)`]] \\r\\n\\r\\n## Arguments\\r\\n\\r\\n* `withsource=`*ColumnName*: Optional. By default, the output will include a column called *source_* whose values indicate which source table has contributed each row. If specified, *ColumnName* will be used instead of *source_*.\\r\\nAfter wildcard matching, if the query references tables from more than one database (including the default database), the value of this column will have a table name qualified with the database. Similarly *cluster* and *database* qualifications will be present in the value if more than one cluster is referenced.\\r\\n* *Predicate*: A `boolean` [expression](./scalar-data-types/bool.md) over the columns of the input tables *Table* [`,` *Table*, ...]. It's evaluated for each row in each input table. For more information, see  [predicate-syntax details](./findoperator.md#predicate-syntax).\\r\\n* `Table`: Optional. By default, *find* will look in all the tables in the current database, for:\\r\\n    *  The name of a table, such as `Events`\\r\\n    *  A query expression, such as `(Events | where id==42)`\\r\\n    *  A set of tables specified with a wildcard. For example, `E*` would form the union of all the tables in the database whose names begin with `E`.\\r\\n* `project-smart` | `project`: If not specified, `project-smart` will be used by default. For more information, see [output-schema details](./findoperator.md#output-schema).\\r\\n\\r\\n\\r\\n## Returns\\r\\n\\r\\nTransformation of rows in *Table* [`,` *Table*, ...] for which *Predicate* is `true`. The rows are transformed according to the [output schema](#output-schema).\\r\\n\\r\\n## Output schema\\r\\n\\r\\n**source_ column**\\r\\n\\r\\nThe find operator output will always include a *source_* column with the source table name. The column can be renamed using the `withsource` parameter.\\r\\n\\r\\n**results columns**\\r\\n\\r\\nSource tables that don't contain any column used by the predicate evaluation, will be filtered out.\\r\\n\\r\\nWhen using `project-smart`, the columns that will appear in the output will be:\\r\\n\\r\\n* Columns that appear explicitly in the predicate.\\r\\n* Columns that are common to all the filtered tables.\\r\\n\\r\\nThe rest of the columns will be packed into a property bag and will appear in an additional `pack_` column.\\r\\nA column that is referenced explicitly by the predicate and appears in multiple tables with multiple types, will have a different column in the result schema for each such type. Each of the column names will be constructed from the original column name and type, separated by an underscore.\\r\\n\\r\\nWhen using `project` *ColumnName*[`:`*ColumnType*] [`,` *ColumnName*[`:`*ColumnType*], ...][`,` `pack(*)`]:\\r\\n\\r\\n* The result table will include the columns specified in the list. If a source table doesn't contain a certain column, the values in the corresponding rows will be null.\\r\\n* When specifying a *ColumnType* with a *ColumnName*, this column in the \\\"result\\\" will have the given type, and the values will be cast to that type if needed. The casting won't have an effect on the column type when evaluating the *Predicate*.\\r\\n* When `pack(*)` is used, the rest of the columns will be packed into a property bag and will appear in an additional `pack_` column.\\r\\n\\r\\n**pack_ column**\\r\\n\\r\\nThis column will contain a property bag with the data from all the columns that doesn't appear in the output schema. The source column name will serve as the property name and the column value will serve as the property value.\\r\\n\\r\\n## Predicate syntax\\r\\n\\r\\nThe *find* operator supports an alternative syntax for the `* has` term, and using just *term*, will search a term across all input columns.\\r\\n\\r\\nFor a summary of some filtering functions, see [where operator](./whereoperator.md).\\r\\n\\r\\n## Notes\\r\\n\\r\\n* If the `project` clause references a column that appears in multiple tables and has multiple types, a type must follow this column reference in the project clause\\r\\n* If a column appears in multiple tables and has multiple types and `project-smart` is in use, there will be a corresponding column for each type in the `find`'s result, as described in [union](./unionoperator.md)\\r\\n* When using *project-smart*, changes in the predicate, in the source tables set, or in the tables schema, may result in a change to the output schema. If a constant result schema is needed, use *project* instead\\r\\n* `find` scope can't include [functions](../management/functions.md). To include a function in the find scope, define a [let statement](./letstatement.md) with [view keyword](./letstatement.md).\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n* Use [tables](../management/tables.md) as opposed to [tabular expressions](./tabularexpressionstatements.md).\\r\\nIf tabular expression, the find operator falls back to a `union` query that can result in degraded performance.\\r\\n* If a column that appears in multiple tables and has multiple types, is part of the project clause, prefer adding a *ColumnType* to the project clause over modifying the table before passing it to `find`.\\r\\n* Add time-based filters to the predicate. Use a datetime column value or [ingestion_time()](./ingestiontimefunction.md).\\r\\n* Search in specific columns rather than a full text search.\\r\\n* It's better not to reference columns that appear in multiple tables and have multiple types. If the predicate is valid when resolving such columns type for more than one type, the query will fall back to union.\\r\\nFor example, see [examples of cases where find will act as a union](./findoperator.md#examples-of-cases-where-find-will-act-as-union).\",'### Term lookup across all tables in current database\\r\\n\\r\\nThe query finds all rows from all tables in the current database in which any column includes the word `Kusto`.\\r\\nThe resulting records are transformed according to the [output schema](#output-schema).\\r\\n\\r\\n```\\r\\nfind \"Kusto\"\\r\\n```\\r\\n\\r\\n## Term lookup across all tables matching a name pattern in the current database\\r\\n\\r\\nThe query finds all rows from all tables in the current database whose name starts with `K`, and in which any column includes the word `Kusto`.\\r\\nThe resulting records are transformed according to the [output schema](#output-schema).\\r\\n\\r\\n```\\r\\nfind in (K*) where * has \"Kusto\"\\r\\n```\\r\\n\\r\\n### Term lookup across all tables in all databases in the cluster\\r\\n\\r\\nThe query finds all rows from all tables in all databases in which any column includes the word `Kusto`.\\r\\nThis query is a [cross-database](./cross-cluster-or-database-queries.md) query.\\r\\nThe resulting records are transformed according to the [output schema](#output-schema).\\r\\n\\r\\n```\\r\\nfind in (database(\\'*\\').*) \"Kusto\"\\r\\n```\\r\\n\\r\\n### Term lookup across all tables and databases matching a name pattern in the cluster\\r\\n\\r\\nThe query finds all rows from all tables whose name starts with `K` in all databases whose name start with `B` and in which any column includes the word `Kusto`.\\r\\nThe resulting records are transformed according to the [output schema](#output-schema).\\r\\n\\r\\n```\\r\\nfind in (database(\"B*\").K*) where * has \"Kusto\"\\r\\n```\\r\\n\\r\\n### Term lookup in several clusters\\r\\n\\r\\nThe query finds all rows from all tables whose name starts with `K` in all databases whose name start with `B` and in which any column includes the word `Kusto`.\\r\\nThe resulting records are transformed according to the [output schema](#output-schema).\\r\\n\\r\\n```\\r\\nfind in (cluster(\"cluster1\").database(\"B*\").K*, cluster(\"cluster2\").database(\"C*\".*))\\r\\nwhere * has \"Kusto\"\\r\\n```\\r\\n\\r\\n## Examples of `find` output results  \\r\\n\\r\\nThe following examples show how `find` can be used over two tables: *EventsTable1* and *EventsTable2*.\\r\\nAssume we have the next content of these two tables:\\r\\n\\r\\n### EventsTable1\\r\\n\\r\\n|Session_Id|Level|EventText|Version\\r\\n|---|---|---|---|\\r\\n|acbd207d-51aa-4df7-bfa7-be70eb68f04e|Information|Some Text1|v1.0.0\\r\\n|acbd207d-51aa-4df7-bfa7-be70eb68f04e|Error|Some Text2|v1.0.0\\r\\n|28b8e46e-3c31-43cf-83cb-48921c3986fc|Error|Some Text3|v1.0.1\\r\\n|8f057b11-3281-45c3-a856-05ebb18a3c59|Information|Some Text4|v1.1.0\\r\\n\\r\\n### EventsTable2\\r\\n\\r\\n|Session_Id|Level|EventText|EventName\\r\\n|---|---|---|---|\\r\\n|f7d5f95f-f580-4ea6-830b-5776c8d64fdd|Information|Some Other Text1|Event1\\r\\n|acbd207d-51aa-4df7-bfa7-be70eb68f04e|Information|Some Other Text2|Event2\\r\\n|acbd207d-51aa-4df7-bfa7-be70eb68f04e|Error|Some Other Text3|Event3\\r\\n|15eaeab5-8576-4b58-8fc6-478f75d8fee4|Error|Some Other Text4|Event4\\r\\n\\r\\n### Search in common columns, project common and uncommon columns, and pack the rest  \\r\\n\\r\\n```\\r\\nfind in (EventsTable1, EventsTable2) \\r\\n     where Session_Id == \\'acbd207d-51aa-4df7-bfa7-be70eb68f04e\\' and Level == \\'Error\\' \\r\\n     project EventText, Version, EventName, pack(*)\\r\\n```\\r\\n\\r\\n|source_|EventText|Version|EventName|pack_\\r\\n|---|---|---|---|---|\\r\\n|EventsTable1|Some Text2|v1.0.0||{\"Session_Id\":\"acbd207d-51aa-4df7-bfa7-be70eb68f04e\", \"Level\":\"Error\"}\\r\\n|EventsTable2|Some Other Text3||Event3|{\"Session_Id\":\"acbd207d-51aa-4df7-bfa7-be70eb68f04e\", \"Level\":\"Error\"}\\r\\n\\r\\n### Search in common and uncommon columns\\r\\n\\r\\n```\\r\\nfind Version == \\'v1.0.0\\' or EventName == \\'Event1\\' project Session_Id, EventText, Version, EventName\\r\\n```\\r\\n\\r\\n|source_|Session_Id|EventText|Version|EventName|\\r\\n|---|---|---|---|---|\\r\\n|EventsTable1|acbd207d-51aa-4df7-bfa7-be70eb68f04e|Some Text1|v1.0.0\\r\\n|EventsTable1|acbd207d-51aa-4df7-bfa7-be70eb68f04e|Some Text2|v1.0.0\\r\\n|EventsTable2|f7d5f95f-f580-4ea6-830b-5776c8d64fdd|Some Other Text1||Event1\\r\\n\\r\\nNote: in practice, *EventsTable1* rows will be filtered with ```Version == \\'v1.0.0\\'``` predicate and *EventsTable2* rows will be filtered with ```EventName == \\'Event1\\'``` predicate.\\r\\n\\r\\n### Use abbreviated notation to search across all tables in the current database\\r\\n\\r\\n```\\r\\nfind Session_Id == \\'acbd207d-51aa-4df7-bfa7-be70eb68f04e\\'\\r\\n```\\r\\n\\r\\n|source_|Session_Id|Level|EventText|pack_|\\r\\n|---|---|---|---|---|\\r\\n|EventsTable1|acbd207d-51aa-4df7-bfa7-be70eb68f04e|Information|Some Text1|{\"Version\":\"v1.0.0\"}\\r\\n|EventsTable1|acbd207d-51aa-4df7-bfa7-be70eb68f04e|Error|Some Text2|{\"Version\":\"v1.0.0\"}\\r\\n|EventsTable2|acbd207d-51aa-4df7-bfa7-be70eb68f04e|Information|Some Other Text2|{\"EventName\":\"Event2\"}\\r\\n|EventsTable2|acbd207d-51aa-4df7-bfa7-be70eb68f04e|Error|Some Other Text3|{\"EventName\":\"Event3\"}\\r\\n\\r\\n### Return the results from each row as a property bag\\r\\n\\r\\n```\\r\\nfind Session_Id == \\'acbd207d-51aa-4df7-bfa7-be70eb68f04e\\' project pack(*)\\r\\n```\\r\\n\\r\\n|source_|pack_|\\r\\n|---|---|\\r\\n|EventsTable1|{\"Session_Id\":\"acbd207d-51aa-4df7-bfa7-be70eb68f04e\", \"Level\":\"Information\", \"EventText\":\"Some Text1\", \"Version\":\"v1.0.0\"}\\r\\n|EventsTable1|{\"Session_Id\":\"acbd207d-51aa-4df7-bfa7-be70eb68f04e\", \"Level\":\"Error\", \"EventText\":\"Some Text2\", \"Version\":\"v1.0.0\"}\\r\\n|EventsTable2|{\"Session_Id\":\"acbd207d-51aa-4df7-bfa7-be70eb68f04e\", \"Level\":\"Information\", \"EventText\":\"Some Other Text2\", \"EventName\":\"Event2\"}\\r\\n|EventsTable2|{\"Session_Id\":\"acbd207d-51aa-4df7-bfa7-be70eb68f04e\", \"Level\":\"Error\", \"EventText\":\"Some Other Text3\", \"EventName\":\"Event3\"}\\r\\n\\r\\n## Examples of cases where `find` will act as `union`\\r\\n\\r\\n### Using a non-tabular expression as find operand\\r\\n\\r\\n```\\r\\nlet PartialEventsTable1 = view() { EventsTable1 | where Level == \\'Error\\' };\\r\\nfind in (PartialEventsTable1, EventsTable2) \\r\\n     where Session_Id == \\'acbd207d-51aa-4df7-bfa7-be70eb68f04e\\'\\r\\n```\\r\\n\\r\\n### Referencing a column that appears in multiple tables and has multiple types\\r\\n\\r\\nAssume we\\'ve created two tables by running: \\r\\n\\r\\n```\\r\\n.create tables \\r\\n  Table1 (Level:string, Timestamp:datetime, ProcessId:string),\\r\\n  Table2 (Level:string, Timestamp:datetime, ProcessId:int64)\\r\\n```\\r\\n\\r\\n* The following query will be executed as `union`.\\r\\n\\r\\n\\r\\n\\r\\n```\\r\\nfind in (Table1, Table2) where ProcessId == 1001\\r\\n```\\r\\n\\r\\nThe output result schema will be *(Level:string, Timestamp, ProcessId_string, ProcessId_int)*.\\r\\n\\r\\n* The following query will also be executed as `union`, but will produce a different result schema.\\r\\n\\r\\n\\r\\n\\r\\n```\\r\\nfind in (Table1, Table2) where ProcessId == 1001 project Level, Timestamp, ProcessId:string \\r\\n```\\r\\n\\r\\nThe output result schema will be *(Level:string, Timestamp, ProcessId_string)*',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/findoperator\",\"findoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"floor\",\"An alias for [`bin()`](binfunction.md).\",\"\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/floorfunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"fork\",\"Runs multiple consumer operators in parallel.\",\"## Syntax\\r\\n\\r\\n*T* `|` `fork` [*name*`=`]`(`*subquery*`)` [*name*`=`]`(`*subquery*`)` ...\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *subquery* is a downstream pipeline of query operators\\r\\n* *name* is a temporary name for the subquery result table\\r\\n\\r\\n## Returns\\r\\n\\r\\nMultiple result tables, one for each of the subqueries.\\r\\n\\r\\n**Supported Operators**\\r\\n\\r\\n[`as`](asoperator.md), [`count`](countoperator.md), [`extend`](extendoperator.md), [`parse`](parseoperator.md), [`where`](whereoperator.md), [`take`](takeoperator.md), [`project`](projectoperator.md), [`project-away`](projectawayoperator.md), [`project-keep`](project-keep-operator.md), [`project-rename`](projectrenameoperator.md), [`project-reorder`](projectreorderoperator.md), [`summarize`](summarizeoperator.md), [`top`](topoperator.md), [`top-nested`](topnestedoperator.md), [`sort`](sortoperator.md), [`mv-expand`](mvexpandoperator.md), [`reduce`](reduceoperator.md)\\r\\n\\r\\n**Notes**\\r\\n\\r\\n* [`materialize`](materializefunction.md) function can be used as a replacement for using [`join`](joinoperator.md) or [`union`](unionoperator.md) on fork legs.\\r\\nThe input stream will be cached by materialize and then the cached expression can be used in join/union legs.\\r\\n* A name, given by the `name` argument or by using [`as`](asoperator.md) operator will be used as the to name the result tab in [`Kusto.Explorer`](../tools/kusto-explorer.md) tool.\\r\\n* Avoid using `fork` with a single subquery.\\r\\n* Prefer using [batch](batches.md) with [`materialize`](materializefunction.md) of tabular expression statements over `fork` operator.\",'In the following example, the result tables will be named \"GenericResult\",  \"GenericResult_2\" and \"GenericResult_3\":\\r\\n\\r\\n```\\r\\nKustoLogs\\r\\n| where Timestamp > ago(1h)\\r\\n| fork\\r\\n    ( where Level == \"Error\" | project EventText | limit 100 )\\r\\n    ( project Timestamp, EventText | top 1000 by Timestamp desc)\\r\\n    ( summarize min(Timestamp), max(Timestamp) by ActivityID )\\r\\n```\\r\\n\\r\\nIn the following examples, the result tables will be named \"Errors\", \"EventsTexts\" and \"TimeRangePerActivityID\":\\r\\n\\r\\n```\\r\\nKustoLogs\\r\\n| where Timestamp > ago(1h)\\r\\n| fork\\r\\n    ( where Level == \"Error\" | project EventText | limit 100 | as Errors )\\r\\n    ( project Timestamp, EventText | top 1000 by Timestamp desc | as EventsTexts )\\r\\n    ( summarize min(Timestamp), max(Timestamp) by ActivityID | as TimeRangePerActivityID )\\r\\n```\\r\\n\\r\\n```\\r\\nKustoLogs\\r\\n| where Timestamp > ago(1h)\\r\\n| fork\\r\\n    Errors = ( where Level == \"Error\" | project EventText | limit 100 )\\r\\n    EventsTexts = ( project Timestamp, EventText | top 1000 by Timestamp desc )\\r\\n    TimeRangePerActivityID = ( summarize min(Timestamp), max(Timestamp) by ActivityID )\\r\\n```',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/forkoperator\",\"forkoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"format_bytes\",\"Formats a number as a string representing data size in bytes.\",\"```\\r\\nformat_bytes(1024) == '1 KB'\\\"\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`format_bytes(`*value* [`,` *precision* [`,` *units*]]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* `value`: a number to be formatted as data size in bytes.\\r\\n* `precision`: (optional) Number of digits the value will be rounded to. (default value is 0).\\r\\n* `units`: (optional) Units of the target data size the string formatting will use (`Bytes`, `KB`, `MB`, `GB`, `TB`, `PB`). If parameter is empty - the units will be auto-selected based on input value.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe string with the format result.\",'```\\r\\nprint \\r\\nv1 = format_bytes(564),\\r\\nv2 = format_bytes(10332, 1),\\r\\nv3 = format_bytes(20010332),\\r\\nv4 = format_bytes(20010332, 2),\\r\\nv5 = format_bytes(20010332, 0, \"KB\")\\r\\n```\\r\\n\\r\\n|v1|v2|v3|v4|v5|\\r\\n|---|---|---|---|---|\\r\\n|564 Bytes|10.1 KB|19 MB|19.08 MB|19541 KB|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/format-bytesfunction\",\"format-bytesfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"format_datetime\",\"Formats a datetime according to the provided format.\",\"```\\r\\nformat_datetime(datetime(2015-12-14 02:03:04.12345), 'y-M-d h:m:s.fffffff') == \\\"15-12-14 2:3:4.1234500\\\"\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`format_datetime(`*datetime* `,` *format*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* `datetime`: value of a type `datetime`.\\r\\n* `format`: format specifier string, consisting of one or more [format elements](#supported-formats).\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe string with the format result.\\r\\n\\r\\n## Supported formats\\r\\n\\r\\n|Format specifier\\t|Description\\t|Examples\\r\\n|---|---|---\\r\\n|`d`\\t|The day of the month, from 1 through 31. |\\t2009-06-01T13:45:30 -> 1, 2009-06-15T13:45:30 -> 15\\r\\n|`dd`\\t|The day of the month, from 01 through 31.|\\t2009-06-01T13:45:30 -> 01, 2009-06-15T13:45:30 -> 15\\r\\n|`f`\\t|The tenths of a second in a date and time value. |2009-06-15T13:45:30.6170000 -> 6, 2009-06-15T13:45:30.05 -> 0\\r\\n|`ff`\\t|The hundredths of a second in a date and time value. |2009-06-15T13:45:30.6170000 -> 61, 2009-06-15T13:45:30.0050000 -> 00\\r\\n|`fff`\\t|The milliseconds in a date and time value. |6/15/2009 13:45:30.617 -> 617, 6/15/2009 13:45:30.0005 -> 000\\r\\n|`ffff`\\t|The ten thousandths of a second in a date and time value. |2009-06-15T13:45:30.6175000 -> 6175, 2009-06-15T13:45:30.0000500 -> 0000\\r\\n|`fffff`\\t|The hundred thousandths of a second in a date and time value. |2009-06-15T13:45:30.6175400 -> 61754, 2009-06-15T13:45:30.000005 -> 00000\\r\\n|`ffffff`\\t|The millionths of a second in a date and time value. |2009-06-15T13:45:30.6175420 -> 617542, 2009-06-15T13:45:30.0000005 -> 000000\\r\\n|`fffffff`\\t|The ten millionths of a second in a date and time value. |2009-06-15T13:45:30.6175425 -> 6175425, 2009-06-15T13:45:30.0001150 -> 0001150\\r\\n|`F`\\t|If non-zero, the tenths of a second in a date and time value. |2009-06-15T13:45:30.6170000 -> 6, 2009-06-15T13:45:30.0500000 -> (no output)\\r\\n|`FF`\\t|If non-zero, the hundredths of a second in a date and time value. |2009-06-15T13:45:30.6170000 -> 61, 2009-06-15T13:45:30.0050000 -> (no output)\\r\\n|`FFF`\\t|If non-zero, the milliseconds in a date and time value. |2009-06-15T13:45:30.6170000 -> 617, 2009-06-15T13:45:30.0005000 -> (no output)\\r\\n|`FFFF`\\t|If non-zero, the ten thousandths of a second in a date and time value. |2009-06-15T13:45:30.5275000 -> 5275, 2009-06-15T13:45:30.0000500 -> (no output)\\r\\n|`FFFFF`\\t|If non-zero, the hundred thousandths of a second in a date and time value. |2009-06-15T13:45:30.6175400 -> 61754, 2009-06-15T13:45:30.0000050 -> (no output)\\r\\n|`FFFFFF`\\t|If non-zero, the millionths of a second in a date and time value. |2009-06-15T13:45:30.6175420 -> 617542, 2009-06-15T13:45:30.0000005 -> (no output)\\r\\n|`FFFFFFF`\\t|If non-zero, the ten millionths of a second in a date and time value. |2009-06-15T13:45:30.6175425 -> 6175425, 2009-06-15T13:45:30.0001150 -> 000115\\r\\n|`h`\\t|The hour, using a 12-hour clock from 1 to 12. |2009-06-15T01:45:30 -> 1, 2009-06-15T13:45:30 -> 1\\r\\n|`hh`\\t|The hour, using a 12-hour clock from 01 to 12. |2009-06-15T01:45:30 -> 01, 2009-06-15T13:45:30 -> 01\\r\\n|`H`\\t|The hour, using a 24-hour clock from 0 to 23. |2009-06-15T01:45:30 -> 1, 2009-06-15T13:45:30 -> 13\\r\\n|`HH`\\t|The hour, using a 24-hour clock from 00 to 23. |2009-06-15T01:45:30 -> 01, 2009-06-15T13:45:30 -> 13\\r\\n|`m`\\t|The minute, from 0 through 59. |2009-06-15T01:09:30 -> 9, 2009-06-15T13:29:30 -> 29\\r\\n|`mm`\\t|The minute, from 00 through 59. |2009-06-15T01:09:30 -> 09, 2009-06-15T01:45:30 -> 45\\r\\n|`M`\\t|The month, from 1 through 12. |2009-06-15T13:45:30 -> 6\\r\\n|`MM`\\t|The month, from 01 through 12.|2009-06-15T13:45:30 -> 06\\r\\n|`s`\\t|The second, from 0 through 59. |2009-06-15T13:45:09 -> 9\\r\\n|`ss`\\t|The second, from 00 through 59. |2009-06-15T13:45:09 -> 09\\r\\n|`y`\\t|The year, from 0 to 99. |0001-01-01T00:00:00 -> 1, 0900-01-01T00:00:00 -> 0, 1900-01-01T00:00:00 -> 0, 2009-06-15T13:45:30 -> 9, 2019-06-15T13:45:30 -> 19\\r\\n|`yy`\\t|The year, from 00 to 99. |\\t0001-01-01T00:00:00 -> 01, 0900-01-01T00:00:00 -> 00, 1900-01-01T00:00:00 -> 00, 2019-06-15T13:45:30 -> 19\\r\\n|`yyyy`\\t|The year as a four-digit number. |\\t0001-01-01T00:00:00 -> 0001, 0900-01-01T00:00:00 -> 0900, 1900-01-01T00:00:00 -> 1900, 2009-06-15T13:45:30 -> 2009\\r\\n|`tt`\\t|AM / PM hours |2009-06-15T13:45:09 -> PM\\r\\n\\r\\n**Supported delimeters**\\r\\n\\r\\nFormat specifier can include following delimeters characters:\\r\\n\\r\\n|Delimeter|Comment|\\r\\n|---------|-------|\\r\\n|`' '`| Space|\\r\\n|`'/'`||\\r\\n|`'-'`|Dash|\\r\\n|`':'`||\\r\\n|`','`||\\r\\n|`'.'`||\\r\\n|`'_'`||\\r\\n|`'['`||\\r\\n|`']'`||\",\"```\\r\\nlet dt = datetime(2017-01-29 09:00:05);\\r\\nprint \\r\\nv1=format_datetime(dt,'yy-MM-dd [HH:mm:ss]'), \\r\\nv2=format_datetime(dt, 'yyyy-M-dd [H:mm:ss]'),\\r\\nv3=format_datetime(dt, 'yy-MM-dd [hh:mm:ss tt]')\\r\\n```\\r\\n\\r\\n|v1|v2|v3|\\r\\n|---|---|---|\\r\\n|17-01-29 [09:00:05]|2017-1-29 [9:00:05]|17-01-29 [09:00:05 AM]|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/format-datetimefunction\",\"format-datetimefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"format_ipv4\",\"Parses input with a netmask and returns string representing IPv4 address.\",\"```\\r\\nprint format_ipv4('192.168.1.255', 24) == '192.168.1.0'\\r\\nprint format_ipv4(3232236031, 24) == '192.168.1.0'\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`format_ipv4(`*Expr* [`,` *PrefixMask*`])`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *`Expr`*: A string or number representation (in big-endian order) of the IPv4 address.\\r\\n* *`PrefixMask`*: (Optional) An integer from 0 to 32 representing the number of most-significant bits that are taken into account. If argument isn't specified, all bit-masks are used (32).\\r\\n\\r\\n## Returns\\r\\n\\r\\nIf conversion is successful, the result will be a string representing IPv4 address.\\r\\nIf conversion isn't successful, the result will be an empty string.\\r\\n\\r\\n## See also\\r\\n\\r\\n- [format_ipv4_mask()](format-ipv4-mask-function.md): For IPv4 address formatting including CIDR notation.\\r\\n- [IPv4 and IPv6 functions](scalarfunctions.md#ipv4ipv6-functions)\",\"```\\r\\ndatatable(address:string, mask:long)\\r\\n[\\r\\n '192.168.1.1', 24,          \\r\\n '192.168.1.1', 32,          \\r\\n '192.168.1.1/24', 32,       \\r\\n '192.168.1.1/24', long(-1), \\r\\n]\\r\\n| extend result = format_ipv4(address, mask), \\r\\n         result_mask = format_ipv4_mask(address, mask)\\r\\n```\\r\\n\\r\\n|address|mask|result|result_mask|\\r\\n|---|---|---|---|\\r\\n|192.168.1.1|24|192.168.1.0|192.168.1.0/24|\\r\\n|192.168.1.1|32|192.168.1.1|192.168.1.1/32|\\r\\n|192.168.1.1/24|32|192.168.1.0|192.168.1.0/24|\\r\\n|192.168.1.1/24|-1|||\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/format-ipv4-function\",\"format-ipv4-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"format_ipv4_mask\",\"Parses input with a netmask and returns string representing IPv4 address as CIDR notation.\",\"```\\r\\nprint format_ipv4_mask('192.168.1.255', 24) == '192.168.1.0/24'\\r\\nprint format_ipv4_mask(3232236031, 24) == '192.168.1.0/24'\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`format_ipv4_mask(`*Expr* [`,` *PrefixMask*`])`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *`Expr`*: A string or number representation (in big-endian order) of the IPv4 address as CIDR notation.\\r\\n* *`PrefixMask`*: (Optional) An integer from 0 to 32 representing the number of most-significant bits that are taken into account. If argument isn't specified, all bit-masks are used (32).\\r\\n\\r\\n## Returns\\r\\n\\r\\nIf conversion is successful, the result will be a string representing IPv4 address as CIDR notation.\\r\\nIf conversion isn't successful, the result will be an empty string.\\r\\n\\r\\n## See also\\r\\n\\r\\n- [format_ipv4()](format-ipv4-function.md): For IPv4 address formatting without CIDR notation.\\r\\n- [IPv4 and IPv6 functions](scalarfunctions.md#ipv4ipv6-functions)\",\"```\\r\\ndatatable(address:string, mask:long)\\r\\n[\\r\\n '192.168.1.1', 24,          \\r\\n '192.168.1.1', 32,          \\r\\n '192.168.1.1/24', 32,       \\r\\n '192.168.1.1/24', long(-1), \\r\\n]\\r\\n| extend result = format_ipv4(address, mask), \\r\\n         result_mask = format_ipv4_mask(address, mask)\\r\\n```\\r\\n\\r\\n|address|mask|result|result_mask|\\r\\n|---|---|---|---|\\r\\n|192.168.1.1|24|192.168.1.0|192.168.1.0/24|\\r\\n|192.168.1.1|32|192.168.1.1|192.168.1.1/32|\\r\\n|192.168.1.1/24|32|192.168.1.0|192.168.1.0/24|\\r\\n|192.168.1.1/24|-1|||\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/format-ipv4-mask-function\",\"format-ipv4-mask-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"format_timespan\",\"Formats a timespan according to the provided format.\",\"```\\r\\nformat_timespan(time(14.02:03:04.12345), 'h:m:s.fffffff') == \\\"2:3:4.1234500\\\"\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`format_timespan(`*timespan* `,` *format*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* `timespan`: value of a type `timespan`.\\r\\n* `format`: format specifier string, consisting of one or more [format elements](#supported-formats).\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe string with the format result.\\r\\n\\r\\n## Supported formats\\r\\n\\r\\n|Format specifier\\t|Description\\t|Examples\\r\\n|---|---|---\\r\\n|`d`-`dddddddd`\\t|The number of whole days in the time interval. Padded with zeros if needed.|\\t15.13:45:30: d -> 15, dd -> 15, ddd -> 015\\r\\n|`f`\\t|The tenths of a second in the time interval. |15.13:45:30.6170000 -> 6, 15.13:45:30.05 -> 0\\r\\n|`ff`\\t|The hundredths of a second in the time interval. |15.13:45:30.6170000 -> 61, 15.13:45:30.0050000 -> 00\\r\\n|`fff`\\t|The milliseconds in the time interval. |6/15/2009 13:45:30.617 -> 617, 6/15/2009 13:45:30.0005 -> 000\\r\\n|`ffff`\\t|The ten thousandths of a second in the time interval. |15.13:45:30.6175000 -> 6175, 15.13:45:30.0000500 -> 0000\\r\\n|`fffff`\\t|The hundred thousandths of a second in the time interval. |15.13:45:30.6175400 -> 61754, 15.13:45:30.000005 -> 00000\\r\\n|`ffffff`\\t|The millionths of a second in the time interval. |15.13:45:30.6175420 -> 617542, 15.13:45:30.0000005 -> 000000\\r\\n|`fffffff`\\t|The ten millionths of a second in the time interval. |15.13:45:30.6175425 -> 6175425, 15.13:45:30.0001150 -> 0001150\\r\\n|`F`\\t|If non-zero, the tenths of a second in the time interval. |15.13:45:30.6170000 -> 6, 15.13:45:30.0500000 -> (no output)\\r\\n|`FF`\\t|If non-zero, the hundredths of a second in the time interval. |15.13:45:30.6170000 -> 61, 15.13:45:30.0050000 -> (no output)\\r\\n|`FFF`\\t|If non-zero, the milliseconds in the time interval. |15.13:45:30.6170000 -> 617, 15.13:45:30.0005000 -> (no output)\\r\\n|`FFFF`\\t|If non-zero, the ten thousandths of a second in the time interval. |15.13:45:30.5275000 -> 5275, 15.13:45:30.0000500 -> (no output)\\r\\n|`FFFFF`\\t|If non-zero, the hundred thousandths of a second in the time interval. |15.13:45:30.6175400 -> 61754, 15.13:45:30.0000050 -> (no output)\\r\\n|`FFFFFF`\\t|If non-zero, the millionths of a second in the time interval. |15.13:45:30.6175420 -> 617542, 15.13:45:30.0000005 -> (no output)\\r\\n|`FFFFFFF`\\t|If non-zero, the ten millionths of a second in the time interval. |15.13:45:30.6175425 -> 6175425, 15.13:45:30.0001150 -> 000115\\r\\n|`H`\\t|The hour, using a 24-hour clock from 0 to 23. |15.01:45:30 -> 1, 15.13:45:30 -> 13\\r\\n|`HH`\\t|The hour, using a 24-hour clock from 00 to 23. |15.01:45:30 -> 01, 15.13:45:30 -> 13\\r\\n|`m`\\t|The number of whole minutes in the time interval that are not included as part of hours or days. Single-digit minutes do not have a leading zero. |15.01:09:30 -> 9, 15.13:29:30 -> 29\\r\\n|`mm`\\t|The number of whole minutes in the time interval that are not included as part of hours or days. Single-digit minutes have a leading zero. |15.01:09:30 -> 09, 15.01:45:30 -> 45\\r\\n|`s`\\t|The number of whole seconds in the time interval that are not included as part of hours, days, or minutes. Single-digit seconds do not have a leading zero. |15.13:45:09 -> 9\\r\\n|`ss`\\t|The number of whole seconds in the time interval that are not included as part of hours, days, or minutes. Single-digit seconds have a leading zero. |15.13:45:09 -> 09\\r\\n\\r\\n**Supported delimeters**\\r\\n\\r\\nFormat specifier can include following delimeters characters:\\r\\n\\r\\n|Delimeter|Comment|\\r\\n|---------|-------|\\r\\n|`' '`| Space|\\r\\n|`'/'`||\\r\\n|`'-'`|Dash|\\r\\n|`':'`||\\r\\n|`','`||\\r\\n|`'.'`||\\r\\n|`'_'`||\\r\\n|`'['`||\\r\\n|`']'`||\",\"```\\r\\nlet t = time(29.09:00:05.12345);\\r\\nprint \\r\\nv1=format_timespan(t, 'dd.hh:mm:ss:FF'),\\r\\nv2=format_timespan(t, 'ddd.h:mm:ss [fffffff]')\\r\\n```\\r\\n\\r\\n|v1|v2|\\r\\n|---|---|\\r\\n|29.09:00:05:12|029.9:00:05 [1234500]|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/format-timespanfunction\",\"format-timespanfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"funnel_sequence\",\"Calculates distinct count of users who have taken a sequence of states, and the distribution of previous/next states that have led to/were followed by the sequence. The plugin is invoked with the [`evaluate`](evaluateoperator.md) operator.\",\"```\\r\\nT | evaluate funnel_sequence(id, datetime_column, startofday(ago(30d)), startofday(now()), 10m, 1d, state_column, dynamic(['S1', 'S2', 'S3']))\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `| evaluate` `funnel_sequence(`*IdColumn*`,` *TimelineColumn*`,` *Start*`,` *End*`,` *MaxSequenceStepWindow*, *Step*, *StateColumn*, *Sequence*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T*: the input tabular expression.\\r\\n* *IdColum*: column reference, must be present in the source expression.\\r\\n* *TimelineColumn*: column reference representing timeline, must be present in the source expression.\\r\\n* *Start*: scalar constant value of the analysis start period.\\r\\n* *End*: scalar constant value of the analysis end period.\\r\\n* *MaxSequenceStepWindow*: scalar constant value of the max allowed timespan between two sequential steps in the sequence.\\r\\n* *Step*: scalar constant value of the analysis step period (bin).\\r\\n* *StateColumn*: column reference representing the state, must be present in the source expression.\\r\\n* *Sequence*: a constant dynamic array with the sequence values (values are looked up in `StateColumn`).\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns three output tables, which are useful for constructing a sankey diagram for the analyzed sequence:\\r\\n\\r\\n* Table #1 - prev-sequence-next `dcount`\\r\\n    - TimelineColumn: the analyzed time window\\r\\n    - prev: the prev state (may be empty if there were any users that only had events for the searched sequence, but not any events prior to it). \\r\\n    - next: the next state (may be empty if there were any users that only had events for the searched sequence, but not any events that followed it). \\r\\n    - `dcount`: distinct count of `IdColumn` in time window that transitioned `prev` --> `Sequence` --> `next`. \\r\\n    - samples: an array of IDs (from `IdColumn`) corresponding to the row's sequence (a maximum of 128 IDs are returned). \\r\\n* Table #2 - prev-sequence `dcount`\\r\\n    - TimelineColumn: the analyzed time window\\r\\n    - prev: the prev state (may be empty if there were any users that only had events for the searched sequence, but not any events prior to it). \\r\\n    - `dcount`: distinct count of `IdColumn` in time window that transitioned `prev` --> `Sequence` --> `next`. \\r\\n    - samples: an array of IDs (from `IdColumn`) corresponding to the row's sequence (a maximum of 128 IDs are returned). \\r\\n* Table #3 - sequence-next `dcount`\\r\\n    - TimelineColumn: the analyzed time window\\r\\n    - next: the next state (may be empty if there were any users that only had events for the searched sequence, but not any events that followed it). \\r\\n    - `dcount`: distinct count of `IdColumn` in time window that transitioned `prev` --> `Sequence` --> `next`.\\r\\n    - samples: an array of IDs (from `IdColumn`) corresponding to the row's sequence (a maximum of 128 IDs are returned).\",\"### Exploring Storm Events \\r\\n\\r\\nThe following query looks at the table StormEvents (weather statistics for 2007) and shows which events happened before/after all Tornado events occurred in 2007.\\r\\n\\r\\n```\\r\\n// Looking on StormEvents statistics: \\r\\n// Q1: What happens before Tornado event?\\r\\n// Q2: What happens after Tornado event?\\r\\nStormEvents\\r\\n| evaluate funnel_sequence(EpisodeId, StartTime, datetime(2007-01-01), datetime(2008-01-01), 1d,365d, EventType, dynamic(['Tornado']))\\r\\n```\\r\\n\\r\\nResult includes three tables:\\r\\n\\r\\n* Table #1: All possible variants of what happened before and after the sequence. For example, the second line means that there were 87 different events that had following sequence: `Hail` -> `Tornado` -> `Hail`\\r\\n\\r\\n\\r\\n\\r\\n|`StartTime`|`prev`|`next`|`dcount`|\\r\\n|---|---|---|---|\\r\\n|2007-01-01 00:00:00.0000000|||293|\\r\\n|2007-01-01 00:00:00.0000000|Hail|Hail|87|\\r\\n|2007-01-01 00:00:00.0000000|Thunderstorm Wind|Thunderstorm Wind|77|\\r\\n|2007-01-01 00:00:00.0000000|Hail|Thunderstorm Wind|28|\\r\\n|2007-01-01 00:00:00.0000000|Hail||28|\\r\\n|2007-01-01 00:00:00.0000000||Hail|27|\\r\\n|2007-01-01 00:00:00.0000000||Thunderstorm Wind|25|\\r\\n|2007-01-01 00:00:00.0000000|Thunderstorm Wind|Hail|24|\\r\\n|2007-01-01 00:00:00.0000000|Thunderstorm Wind||24|\\r\\n|2007-01-01 00:00:00.0000000|Flash Flood|Flash Flood|12|\\r\\n|2007-01-01 00:00:00.0000000|Thunderstorm Wind|Flash Flood|8|\\r\\n|2007-01-01 00:00:00.0000000|Flash Flood||8|\\r\\n|2007-01-01 00:00:00.0000000|Funnel Cloud|Thunderstorm Wind|6|\\r\\n|2007-01-01 00:00:00.0000000||Funnel Cloud|6|\\r\\n|2007-01-01 00:00:00.0000000||Flash Flood|6|\\r\\n|2007-01-01 00:00:00.0000000|Funnel Cloud|Funnel Cloud|6|\\r\\n|2007-01-01 00:00:00.0000000|Hail|Flash Flood|4|\\r\\n|2007-01-01 00:00:00.0000000|Flash Flood|Thunderstorm Wind|4|\\r\\n|2007-01-01 00:00:00.0000000|Hail|Funnel Cloud|4|\\r\\n|2007-01-01 00:00:00.0000000|Funnel Cloud|Hail|4|\\r\\n|2007-01-01 00:00:00.0000000|Funnel Cloud||4|\\r\\n|2007-01-01 00:00:00.0000000|Thunderstorm Wind|Funnel Cloud|3|\\r\\n|2007-01-01 00:00:00.0000000|Heavy Rain|Thunderstorm Wind|2|\\r\\n|2007-01-01 00:00:00.0000000|Flash Flood|Funnel Cloud|2|\\r\\n|2007-01-01 00:00:00.0000000|Flash Flood|Hail|2|\\r\\n|2007-01-01 00:00:00.0000000|Strong Wind|Thunderstorm Wind|1|\\r\\n|2007-01-01 00:00:00.0000000|Heavy Rain|Flash Flood|1|\\r\\n|2007-01-01 00:00:00.0000000|Heavy Rain|Hail|1|\\r\\n|2007-01-01 00:00:00.0000000|Hail|Flood|1|\\r\\n|2007-01-01 00:00:00.0000000|Lightning|Hail|1|\\r\\n|2007-01-01 00:00:00.0000000|Heavy Rain|Lightning|1|\\r\\n|2007-01-01 00:00:00.0000000|Funnel Cloud|Heavy Rain|1|\\r\\n|2007-01-01 00:00:00.0000000|Flash Flood|Flood|1|\\r\\n|2007-01-01 00:00:00.0000000|Flood|Flash Flood|1|\\r\\n|2007-01-01 00:00:00.0000000||Heavy Rain|1|\\r\\n|2007-01-01 00:00:00.0000000|Funnel Cloud|Lightning|1|\\r\\n|2007-01-01 00:00:00.0000000|Lightning|Thunderstorm Wind|1|\\r\\n|2007-01-01 00:00:00.0000000|Flood|Thunderstorm Wind|1|\\r\\n|2007-01-01 00:00:00.0000000|Hail|Lightning|1|\\r\\n|2007-01-01 00:00:00.0000000||Lightning|1|\\r\\n|2007-01-01 00:00:00.0000000|Tropical Storm|Hurricane (Typhoon)|1|\\r\\n|2007-01-01 00:00:00.0000000|Coastal Flood||1|\\r\\n|2007-01-01 00:00:00.0000000|Rip Current||1|\\r\\n|2007-01-01 00:00:00.0000000|Heavy Snow||1|\\r\\n|2007-01-01 00:00:00.0000000|Strong Wind||1|\\r\\n\\r\\n* Table #2: shows all distinct events grouped by the previous event. For example, the second line shows that there were a total of 150 events of `Hail` that happened just before `Tornado`.\\r\\n\\r\\n\\r\\n|`StartTime`|`prev`|`dcount`|\\r\\n|---------|-----|------|\\r\\n|2007-01-01 00:00:00.0000000||331|\\r\\n|2007-01-01 00:00:00.0000000|Hail|150|\\r\\n|2007-01-01 00:00:00.0000000|Thunderstorm Wind|135|\\r\\n|2007-01-01 00:00:00.0000000|Flash Flood|28|\\r\\n|2007-01-01 00:00:00.0000000|Funnel Cloud|22|\\r\\n|2007-01-01 00:00:00.0000000|Heavy Rain|5|\\r\\n|2007-01-01 00:00:00.0000000|Flood|2|\\r\\n|2007-01-01 00:00:00.0000000|Lightning|2|\\r\\n|2007-01-01 00:00:00.0000000|Strong Wind|2|\\r\\n|2007-01-01 00:00:00.0000000|Heavy Snow|1|\\r\\n|2007-01-01 00:00:00.0000000|Rip Current|1|\\r\\n|2007-01-01 00:00:00.0000000|Coastal Flood|1|\\r\\n|2007-01-01 00:00:00.0000000|Tropical Storm|1|\\r\\n\\r\\n* Table #3: shows all distinct events grouped by next event. For example, the second line shows that there were a total of 143 events of `Hail` that happened after `Tornado`.\\r\\n\\r\\n\\r\\n|`StartTime`|`next`|`dcount`|\\r\\n|---------|-----|------|\\r\\n|2007-01-01 00:00:00.0000000||332|\\r\\n|2007-01-01 00:00:00.0000000|Hail|145|\\r\\n|2007-01-01 00:00:00.0000000|Thunderstorm Wind|143|\\r\\n|2007-01-01 00:00:00.0000000|Flash Flood|32|\\r\\n|2007-01-01 00:00:00.0000000|Funnel Cloud|21|\\r\\n|2007-01-01 00:00:00.0000000|Lightning|4|\\r\\n|2007-01-01 00:00:00.0000000|Heavy Rain|2|\\r\\n|2007-01-01 00:00:00.0000000|Flood|2|\\r\\n|2007-01-01 00:00:00.0000000|Hurricane (Typhoon)|1|\\r\\n\\r\\nNow, let's try to find out how the following sequence continues:  \\r\\n`Hail` -> `Tornado` -> `Thunderstorm Wind`\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| evaluate funnel_sequence(EpisodeId, StartTime, datetime(2007-01-01), datetime(2008-01-01), 1d,365d, EventType, \\r\\ndynamic(['Hail', 'Tornado', 'Thunderstorm Wind']))\\r\\n```\\r\\n\\r\\nSkipping `Table #1` and `Table #2`, and looking at `Table #3`, we can conclude that sequence `Hail` -> `Tornado` -> `Thunderstorm Wind` in 92 events ended with this sequence, continued as `Hail` in 41 events, and turned back to `Tornado` in 14.\\r\\n\\r\\n|`StartTime`|`next`|`dcount`|\\r\\n|---------|-----|------|\\r\\n|2007-01-01 00:00:00.0000000||92|\\r\\n|2007-01-01 00:00:00.0000000|Hail|41|\\r\\n|2007-01-01 00:00:00.0000000|Tornado|14|\\r\\n|2007-01-01 00:00:00.0000000|Flash Flood|11|\\r\\n|2007-01-01 00:00:00.0000000|Lightning|2|\\r\\n|2007-01-01 00:00:00.0000000|Heavy Rain|1|\\r\\n|2007-01-01 00:00:00.0000000|Flood|1|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/funnel-sequence-plugin\",\"funnel-sequence-plugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"funnel_sequence_completion\",\"Calculates a funnel of completed sequence steps while comparing different time periods. The plugin is invoked with the [`evaluate`](evaluateoperator.md) operator.\",\"```\\r\\nT | evaluate funnel_sequence_completion(id, datetime_column, startofday(ago(30d)), startofday(now()), 1d, state_column, dynamic(['S1', 'S2', 'S3']), dynamic([10m, 30min, 1h]))\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `| evaluate` `funnel_sequence_completion(`*IdColumn*`,` *TimelineColumn*`,` *Start*`,` *End*`,` *BinSize*`,` *StateColumn*`,` *Sequence*`,` *MaxSequenceStepWindows*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T*: The input tabular expression.\\r\\n* *IdColum*: column reference, must be present in the source expression.\\r\\n* *TimelineColumn*: column reference representing timeline, must be present in the source expression.\\r\\n* *Start*: scalar constant value of the analysis start period.\\r\\n* *End*: scalar constant value of the analysis end period.\\r\\n* *BinSize*: scalar constant value of the analysis window (bin) size, each window is analyzed separately.\\r\\n* *StateColumn*: column reference representing the state, must be present in the source expression.\\r\\n* *Sequence*: a constant dynamic array with the sequence values (values are looked up in `StateColumn`).\\r\\n* *MaxSequenceStepPeriods*: scalar constant dynamic array with the values of the max allowed timespan between the first and last sequential steps in the sequence. Each period in the array generates a funnel analysis result.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a single table useful for constructing a funnel diagram for the analyzed sequence:\\r\\n\\r\\n* `TimelineColumn`: the analyzed time window (bin), each bin in the analysis timeframe (*Start* to *End*) generates a funnel analysis separately.\\r\\n* `StateColumn`: the state of the sequence.\\r\\n* `Period`: the maximal period allowed for completing steps in the funnel sequence measured from the first step in the sequence. Each value in *MaxSequenceStepPeriods* generates a funnel analysis with a separate period. \\r\\n* `dcount`: distinct count of `IdColumn` in time window that transitioned from first sequence state to the value of `StateColumn`.\\r\\n\\r\\n## See also\\r\\n\\r\\n* [scan operator](scan-operator.md)\",\"### Exploring Storm Events \\r\\n\\r\\nThe following query checks the completion funnel of the sequence: `Hail` -> `Tornado` -> `Thunderstorm Wind`\\r\\nin \\\"overall\\\" time of 1hour, 4hours, 1day. \\r\\n\\r\\n```\\r\\nlet _start = datetime(2007-01-01);\\r\\nlet _end =  datetime(2008-01-01);\\r\\nlet _windowSize = 365d;\\r\\nlet _sequence = dynamic(['Hail', 'Tornado', 'Thunderstorm Wind']);\\r\\nlet _periods = dynamic([1h, 4h, 1d]);\\r\\nStormEvents\\r\\n| evaluate funnel_sequence_completion(EpisodeId, StartTime, _start, _end, _windowSize, EventType, _sequence, _periods) \\r\\n```\\r\\n\\r\\n|`StartTime`|`EventType`|`Period`|`dcount`|\\r\\n|---|---|---|---|\\r\\n|2007-01-01 00:00:00.0000000|Hail|01:00:00|2877|\\r\\n|2007-01-01 00:00:00.0000000|Tornado|01:00:00|208|\\r\\n|2007-01-01 00:00:00.0000000|Thunderstorm Wind|01:00:00|87|\\r\\n|2007-01-01 00:00:00.0000000|Hail|04:00:00|2877|\\r\\n|2007-01-01 00:00:00.0000000|Tornado|04:00:00|231|\\r\\n|2007-01-01 00:00:00.0000000|Thunderstorm Wind|04:00:00|141|\\r\\n|2007-01-01 00:00:00.0000000|Hail|1.00:00:00|2877|\\r\\n|2007-01-01 00:00:00.0000000|Tornado|1.00:00:00|244|\\r\\n|2007-01-01 00:00:00.0000000|Thunderstorm Wind|1.00:00:00|155|\\r\\n\\r\\nUnderstanding the results:  \\r\\nThe outcome is three funnels (for periods: One hour, 4 hours, and one day). For each funnel step, a number \\r\\nof distinct counts of  are shown. You can see that the more time is given to complete the whole sequence of `Hail` -> `Tornado` -> `Thunderstorm Wind`, the higher `dcount` value is obtained. In other words, there were more occurrences of the sequence reaching the funnel step.\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/funnel-sequence-completion-plugin\",\"funnel-sequence-completion-plugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"gamma\",\"Computes [gamma function](https://en.wikipedia.org/wiki/Gamma_function)\",\"## Syntax\\r\\n\\r\\n`gamma(`*x*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *x*: Parameter for the gamma function\\r\\n\\r\\n## Returns\\r\\n\\r\\n* Gamma function of x.\\r\\n* For computing log-gamma function, see [loggamma()](loggammafunction.md).\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/gammafunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_distance_2points\",\"Calculates the shortest distance between two geospatial coordinates on Earth.\",\"## Syntax\\r\\n\\r\\n`geo_distance_2points(`*p1_longitude*`, `*p1_latitude*`, `*p2_longitude*`, `*p2_latitude*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *p1_longitude*: First geospatial coordinate, longitude value in degrees. Valid value is a real number and in the range [-180, +180].\\r\\n* *p1_latitude*: First geospatial coordinate, latitude value in degrees. Valid value is a real number and in the range [-90, +90].\\r\\n* *p2_longitude*: Second geospatial coordinate, longitude value in degrees. Valid value is a real number and in the range [-180, +180].\\r\\n* *p2_latitude*: Second geospatial coordinate, latitude value in degrees. Valid value is a real number and in the range [-90, +90].\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe shortest distance, in meters, between two geographic locations on Earth. If the coordinates are invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n> * The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/GandG/update/index.php?action=home) coordinate reference system.\\r\\n> * The [geodetic datum](https://en.wikipedia.org/wiki/Geodetic_datum) used to measure distance on Earth is a sphere.\",'The following example finds the shortest distance between Seattle and Los Angeles.\\r\\n\\r\\n![Distance between Seattle and Los Angeles.](images/geo-distance-2points-function/distance_2points_seattle_los_angeles.png)\\r\\n\\r\\n```\\r\\nprint distance_in_meters = geo_distance_2points(-122.407628, 47.578557, -118.275287, 34.019056)\\r\\n```\\r\\n\\r\\n| distance_in_meters |\\r\\n|--------------------|\\r\\n| 1546754.35197381   |\\r\\n\\r\\nHere is an approximation of shortest path from Seattle to London. The line consists of coordinates along the LineString and within 500 meters from it.\\r\\n\\r\\n![Seattle to London LineString.](images/geo-distance-2points-function/line_seattle_london.png)\\r\\n\\r\\n```\\r\\nrange i from 1 to 1000000 step 1\\r\\n| project lng = rand() * real(-122), lat = rand() * 90\\r\\n| where lng between(real(-122) .. 0) and lat between(47 .. 90)\\r\\n| where geo_distance_point_to_line(lng,lat,dynamic({\"type\":\"LineString\",\"coordinates\":[[-122,47],[0,51]]})) < 500\\r\\n| render scatterchart with (kind=map)\\r\\n```\\r\\n\\r\\nThe following example finds all rows in which the shortest distance between two coordinates is between 1 and 11 meters.\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| extend distance_1_to_11m = geo_distance_2points(BeginLon, BeginLat, EndLon, EndLat)\\r\\n| where distance_1_to_11m between (1 .. 11)\\r\\n| project distance_1_to_11m\\r\\n```\\r\\n\\r\\n| distance_1_to_11m |\\r\\n|-------------------|\\r\\n| 10.5723100154958  |\\r\\n| 7.92153588248414  |\\r\\n\\r\\nThe following example returns a null result because of the invalid coordinate input.\\r\\n\\r\\n```\\r\\nprint distance = geo_distance_2points(300,1,1,1)\\r\\n```\\r\\n\\r\\n| distance |\\r\\n|----------|\\r\\n|          |',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-distance-2points-function\",\"geo-distance-2points-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_distance_point_to_line\",\"Calculates the shortest distance between a coordinate and a line or multiline on Earth.\",'## Syntax\\r\\n\\r\\n`geo_distance_point_to_line(`*longitude*`, `*latitude*`, `*lineString*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *longitude*: Geospatial coordinate longitude value in degrees. Valid value is a real number and in the range [-180, +180].\\r\\n* *latitude*: Geospatial coordinate latitude value in degrees. Valid value is a real number and in the range [-90, +90].\\r\\n* *lineString*: Line or multiline in the [GeoJSON format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe shortest distance, in meters, between a coordinate and a line or multiline on Earth. If the coordinate or lineString are invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n> * The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/GandG/update/index.php?action=home) coordinate reference system.\\r\\n> * The [geodetic datum](https://en.wikipedia.org/wiki/Geodetic_datum) used to measure distance on Earth is a sphere. Line edges are [geodesics](https://en.wikipedia.org/wiki/Geodesic) on the sphere.\\r\\n> * If input line edges are straight cartesian lines, consider using [geo_line_densify()](geo-line-densify-function.md) in order to convert planar edges to geodesics.\\r\\n\\r\\n**LineString definition and constraints**\\r\\n\\r\\ndynamic({\"type\": \"LineString\",\"coordinates\": [ [lng_1,lat_1], [lng_2,lat_2] ,..., [lng_N,lat_N] ]})\\r\\n\\r\\ndynamic({\"type\": \"MultiLineString\",\"coordinates\": [ [ line_1, line_2 ,..., line_N ] ]})\\r\\n\\r\\n* LineString coordinates array must contain at least two entries.\\r\\n* Coordinates [longitude,latitude] must be valid where longitude is a real number in the range [-180, +180] and latitude is a real number in the range [-90, +90].\\r\\n* Edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\\r\\n\\r\\n> [!TIP]\\r\\n> * Using literal LineString or a MultiLineString may result in better performance.\\r\\n> * If you want to know the shortest distance between one or more points to many lines, consider folding these lines into one multiline. See the [example](#examples) below.','The following example finds the shortest distance between North Las Vegas Airport and a nearby road.\\r\\n\\r\\n![Distance between North Las Vegas Airport and road.](images/geo-distance-point-to-line-function/distance-point-to-line.png)\\r\\n\\r\\n```\\r\\nprint distance_in_meters = geo_distance_point_to_line(-115.199625, 36.210419, dynamic({ \"type\":\"LineString\",\"coordinates\":[[-115.115385,36.229195],[-115.136995,36.200366],[-115.140252,36.192470],[-115.143558,36.188523],[-115.144076,36.181954],[-115.154662,36.174483],[-115.166431,36.176388],[-115.183289,36.175007],[-115.192612,36.176736],[-115.202485,36.173439],[-115.225355,36.174365]]}))\\r\\n```\\r\\n\\r\\n| distance_in_meters |\\r\\n|--------------------|\\r\\n| 3797.88887253334   |\\r\\n\\r\\nStorm events in south coast US. The events are filtered by a maximum distance of 5 km from the defined shore line.\\r\\n\\r\\n![Storm events in the US south coast.](images/geo-distance-point-to-line-function/us-south-coast-storm-events.png)\\r\\n\\r\\n```\\r\\nlet southCoast = dynamic({\"type\":\"LineString\",\"coordinates\":[[-97.18505859374999,25.997549919572112],[-97.58056640625,26.96124577052697],[-97.119140625,27.955591004642553],[-94.04296874999999,29.726222319395504],[-92.98828125,29.82158272057499],[-89.18701171875,29.11377539511439],[-89.384765625,30.315987718557867],[-87.5830078125,30.221101852485987],[-86.484375,30.4297295750316],[-85.1220703125,29.6880527498568],[-84.00146484374999,30.14512718337613],[-82.6611328125,28.806173508854776],[-82.81494140625,28.033197847676377],[-82.177734375,26.52956523826758],[-80.9912109375,25.20494115356912]]});\\r\\nStormEvents\\r\\n| project BeginLon, BeginLat, EventType\\r\\n| where geo_distance_point_to_line(BeginLon, BeginLat, southCoast) < 5000\\r\\n| render scatterchart with (kind=map)\\r\\n```\\r\\n\\r\\nNY taxi pickups. Pickups are filtered by maximum distance of 0.1 meters from the defined multiline.\\r\\n\\r\\n![NYC taxi pickups on Madison Ave.](images/geo-distance-point-to-line-function/madison-ave-road.png)\\r\\n\\r\\n```\\r\\nlet MadisonAve = dynamic({\"type\":\"MultiLineString\",\"coordinates\":[[[-73.9879823,40.7408625],[-73.9876492,40.7413345],[-73.9874982,40.7415046],[-73.9870343,40.7421446],[-73.9865812,40.7427655],[-73.9861292,40.7433756],[-73.9856813,40.7439956],[-73.9854932,40.7442606],[-73.9852232,40.7446216],[-73.9847903,40.7452305],[-73.9846232,40.7454536],[-73.9844803,40.7456606],[-73.9843413,40.7458585],[-73.9839533,40.7463955],[-73.9839002,40.7464696],[-73.9837683,40.7466566],[-73.9834342,40.7471015],[-73.9833833,40.7471746],[-73.9829712,40.7477686],[-73.9824752,40.7484255],[-73.9820262,40.7490436],[-73.9815623,40.7496566],[-73.9811212,40.7502796],[-73.9809762,40.7504976],[-73.9806982,40.7509255],[-73.9802752,40.7515216],[-73.9798033,40.7521795],[-73.9795863,40.7524656],[-73.9793082,40.7528316],[-73.9787872,40.7534725],[-73.9783433,40.7540976],[-73.9778912,40.7547256],[-73.9774213,40.7553365],[-73.9769402,40.7559816],[-73.9764622,40.7565766],[-73.9760073,40.7572036],[-73.9755592,40.7578366],[-73.9751013,40.7584665],[-73.9746532,40.7590866],[-73.9741902,40.7597326],[-73.9737632,40.7603566],[-73.9733032,40.7609866],[-73.9728472,40.7616205],[-73.9723422,40.7622826],[-73.9718672,40.7629556],[-73.9714042,40.7635726],[-73.9709362,40.7642185],[-73.9705282,40.7647636],[-73.9704903,40.7648196],[-73.9703342,40.7650355],[-73.9701562,40.7652826],[-73.9700322,40.7654535],[-73.9695742,40.7660886],[-73.9691232,40.7667166],[-73.9686672,40.7673375],[-73.9682142,40.7679605],[-73.9677482,40.7685786],[-73.9672883,40.7692076],[-73.9668412,40.7698296],[-73.9663882,40.7704605],[-73.9659222,40.7710936],[-73.9654262,40.7717756],[-73.9649292,40.7724595],[-73.9644662,40.7730955],[-73.9640012,40.7737285],[-73.9635382,40.7743615],[-73.9630692,40.7749936],[-73.9626122,40.7756275],[-73.9621172,40.7763106],[-73.9616111,40.7769896],[-73.9611552,40.7776245],[-73.9606891,40.7782625],[-73.9602212,40.7788866],[-73.9597532,40.7795236],[-73.9595842,40.7797445],[-73.9592942,40.7801635],[-73.9591122,40.7804105],[-73.9587982,40.7808305],[-73.9582992,40.7815116],[-73.9578452,40.7821455],[-73.9573802,40.7827706],[-73.9569262,40.7833965],[-73.9564802,40.7840315],[-73.9560102,40.7846486],[-73.9555601,40.7852755],[-73.9551221,40.7859005],[-73.9546752,40.7865426],[-73.9542571,40.7871505],[-73.9541771,40.7872335],[-73.9540892,40.7873366],[-73.9536971,40.7879115],[-73.9532792,40.7884706],[-73.9532142,40.7885205],[-73.9531522,40.7885826],[-73.9527382,40.7891785],[-73.9523081,40.7897545],[-73.9518332,40.7904115],[-73.9513721,40.7910435],[-73.9509082,40.7916695],[-73.9504602,40.7922995],[-73.9499882,40.7929195],[-73.9495051,40.7936045],[-73.9490071,40.7942835],[-73.9485542,40.7949065],[-73.9480832,40.7955345],[-73.9476372,40.7961425],[-73.9471772,40.7967915],[-73.9466841,40.7974475],[-73.9453432,40.7992905],[-73.9448332,40.7999835],[-73.9443442,40.8006565],[-73.9438862,40.8012945],[-73.9434262,40.8019196],[-73.9431412,40.8023325],[-73.9429842,40.8025585],[-73.9425691,40.8031855],[-73.9424401,40.8033609],[-73.9422987,40.8035533],[-73.9422013,40.8036857],[-73.9421022,40.8038205],[-73.9420024,40.8039552],[-73.9416372,40.8044485],[-73.9411562,40.8050725],[-73.9406471,40.8057176],[-73.9401481,40.8064135],[-73.9397022,40.8070255],[-73.9394081,40.8074155],[-73.9392351,40.8076495],[-73.9387842,40.8082715],[-73.9384681,40.8087086],[-73.9383211,40.8089025],[-73.9378792,40.8095215],[-73.9374011,40.8101795],[-73.936405,40.8115707],[-73.9362328,40.8118098]],[[-73.9362328,40.8118098],[-73.9362432,40.8118567],[-73.9361239,40.8120222],[-73.9360302,40.8120805]],[[-73.9362328,40.8118098],[-73.9361571,40.8118294],[-73.9360443,40.8119993],[-73.9360302,40.8120805]],[[-73.9360302,40.8120805],[-73.9359423,40.8121378],[-73.9358551,40.8122385],[-73.9352181,40.8130815],[-73.9348702,40.8135515],[-73.9347541,40.8137145],[-73.9346332,40.8138615],[-73.9345542,40.8139595],[-73.9344981,40.8139945],[-73.9344571,40.8140165],[-73.9343962,40.8140445],[-73.9343642,40.8140585],[-73.9343081,40.8140725],[-73.9341971,40.8140895],[-73.9341041,40.8141005],[-73.9340022,40.8140965],[-73.9338442,40.8141005],[-73.9333712,40.8140895],[-73.9325541,40.8140755],[-73.9324561,40.8140705],[-73.9324022,40.8140695]],[[-73.9360302,40.8120805],[-73.93605,40.8121667],[-73.9359632,40.8122805],[-73.9353631,40.8130795],[-73.9351482,40.8133625],[-73.9350072,40.8135415],[-73.9347441,40.8139168],[-73.9346611,40.8140125],[-73.9346101,40.8140515],[-73.9345401,40.8140965],[-73.9344381,40.8141385],[-73.9343451,40.8141555],[-73.9342991,40.8141675],[-73.9341552,40.8141985],[-73.9338601,40.8141885],[-73.9333991,40.8141815],[-73.9323981,40.8141665]]]});\\r\\nnyc_taxi\\r\\n| project pickup_longitude, pickup_latitude\\r\\n| where geo_distance_point_to_line(pickup_longitude, pickup_latitude, MadisonAve) <= 0.1\\r\\n| take 100\\r\\n| render scatterchart with (kind=map)\\r\\n```\\r\\n\\r\\nThe following example folds many lines into one multiline and queries this multiline. The query finds all taxi pickups that happened 10km away from all roads in Manhattan.\\r\\n\\r\\n![Lines folding.](images/geo-distance-point-to-line-function/lines-folding.png)\\r\\n\\r\\n```\\r\\nlet ManhattanRoads =\\r\\n    datatable(features:dynamic)\\r\\n    [\\r\\n        dynamic({\"type\":\"Feature\",\"properties\":{\"Label\":\"145thStreetBrg\"},\"geometry\":{\"type\":\"MultiLineString\",\"coordinates\":[[[-73.9322259,40.8194635],[-73.9323259,40.8194743],[-73.9323973,40.8194779]]]}}),\\r\\n        dynamic({\"type\":\"Feature\",\"properties\":{\"Label\":\"W120thSt\"},\"geometry\":{\"type\":\"MultiLineString\",\"coordinates\":[[[-73.9619541,40.8104844],[-73.9621542,40.8105725],[-73.9630542,40.8109455],[-73.9635902,40.8111714],[-73.9639492,40.8113174],[-73.9640502,40.8113705]]]}}),\\r\\n        dynamic({\"type\":\"Feature\",\"properties\":{\"Label\":\"1stAve\"},\"geometry\":{\"type\":\"MultiLineString\",\"coordinates\":[[[-73.9704124,40.748033],[-73.9702043,40.7480906],[-73.9696892,40.7487346],[-73.9695012,40.7491976],[-73.9694522,40.7493196]],[[-73.9699932,40.7488636],[-73.9694522,40.7493196]],[[-73.9694522,40.7493196],[-73.9693113,40.7494946],[-73.9688832,40.7501056],[-73.9686562,40.7504196],[-73.9684231,40.7507476],[-73.9679832,40.7513586],[-73.9678702,40.7514986]],[[-73.9676833,40.7520426],[-73.9675462,40.7522286],[-73.9673532,40.7524976],[-73.9672892,40.7525906],[-73.9672122,40.7526806]]]}})\\r\\n        // ... more roads ...\\r\\n    ];\\r\\nlet allRoads=toscalar(\\r\\n    ManhattanRoads\\r\\n    | project road_coordinates=features.geometry.coordinates\\r\\n    | summarize make_list(road_coordinates)\\r\\n    | project multiline = pack(\"type\",\"MultiLineString\", \"coordinates\", list_road_coordinates));\\r\\nnyc_taxi\\r\\n| project pickup_longitude, pickup_latitude\\r\\n| where pickup_longitude != 0 and pickup_latitude != 0\\r\\n| where geo_distance_point_to_line(pickup_longitude, pickup_latitude, todynamic(allRoads)) > 10000\\r\\n| take 10\\r\\n| render scatterchart with (kind=map)\\r\\n```\\r\\n\\r\\nThe following example will return a null result because of the invalid LineString input.\\r\\n\\r\\n```\\r\\nprint distance_in_meters = geo_distance_point_to_line(1,1, dynamic({ \"type\":\"LineString\"}))\\r\\n```\\r\\n\\r\\n| distance_in_meters |\\r\\n|--------------------|\\r\\n|                    |\\r\\n\\r\\nThe following example will return a null result because of the invalid coordinate input.\\r\\n\\r\\n```\\r\\nprint distance_in_meters = geo_distance_point_to_line(300, 3, dynamic({ \"type\":\"LineString\",\"coordinates\":[[1,1],[2,2]]}))\\r\\n```\\r\\n\\r\\n| distance_in_meters |\\r\\n|--------------------|\\r\\n|                    |',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-distance-point-to-line-function\",\"geo-distance-point-to-line-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_distance_point_to_polygon\",\"Calculates the shortest distance between a coordinate and a polygon or multipolygon on Earth.\",'## Syntax\\r\\n\\r\\n`geo_distance_point_to_polygon(`*longitude*`, `*latitude*`, `*polygon*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *longitude*: Geospatial coordinate, longitude value in degrees. Valid value is a real number and in the range [-180, +180].\\r\\n* *latitude*: Geospatial coordinate, latitude value in degrees. Valid value is a real number and in the range [-90, +90].\\r\\n* *polygon*: Polygon or multipolygon in the [GeoJSON format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe shortest distance, in meters, between a coordinate and a polygon or a multipolygon on Earth. If polygon contains point, the distance will be 0. If the coordinate or polygon are invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n> * The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/GandG/update/index.php?action=home) coordinate reference system.\\r\\n> * The [geodetic datum](https://en.wikipedia.org/wiki/Geodetic_datum) used for measurements on Earth is a sphere. Polygon edges are [geodesics](https://en.wikipedia.org/wiki/Geodesic) on the sphere.\\r\\n> * If input polygon edges are straight cartesian lines, consider using [geo_polygon_densify()](geo-polygon-densify-function.md) to convert planar edges to geodesics.\\r\\n\\r\\n**Polygon definition and constraints**\\r\\n\\r\\ndynamic({\"type\": \"Polygon\",\"coordinates\": [ LinearRingShell, LinearRingHole_1 ,..., LinearRingHole_N ]})\\r\\n\\r\\ndynamic({\"type\": \"MultiPolygon\",\"coordinates\": [[ LinearRingShell, LinearRingHole_1 ,..., LinearRingHole_N ] ,..., [LinearRingShell, LinearRingHole_1 ,..., LinearRingHole_M]]})\\r\\n\\r\\n* LinearRingShell is required and defined as a `counterclockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be only one shell.\\r\\n* LinearRingHole is optional and defined as a `clockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be any number of interior rings and holes.\\r\\n* LinearRing vertices must be distinct with at least three coordinates. The first coordinate must be equal to the last. At least four entries are required.\\r\\n* Coordinates [longitude,latitude] must be valid. Longitude must be a real number in the range [-180, +180] and latitude must be a real number in the range [-90, +90].\\r\\n* LinearRingShell encloses at most half of the sphere. LinearRing divides the sphere into two regions. The smaller of the two regions will be chosen.\\r\\n* LinearRing edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\\r\\n* LinearRings must not cross and must not share edges. LinearRings may share vertices.\\r\\n* Polygon doesn\\'t necessarily contain its vertices.\\r\\n\\r\\n> [!TIP]\\r\\n> * Using literal polygons may result in better performance.\\r\\n> * If you want to know if polygon contains point, see [geo_point_in_polygon()](./geo-point-in-polygon-function.md)','The following example calculates shortest distance in meters from some location in NYC to Central Park.\\r\\n\\r\\n```\\r\\nlet central_park = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9495,40.7969],[-73.95807266235352,40.80068603561921],[-73.98201942443848,40.76825672305777],[-73.97317886352539,40.76455136505513],[-73.9495,40.7969]]]});\\r\\nprint geo_distance_point_to_polygon(-73.9839, 40.7705, central_park)\\r\\n```\\r\\n\\r\\n|print_0|\\r\\n|---|\\r\\n|259.940756070596|\\r\\n\\r\\nThe following example enriches the data with distance.\\r\\n\\r\\n```\\r\\nlet multipolygon = dynamic({\"type\":\"MultiPolygon\",\"coordinates\":[[[[-73.991460000000131,40.731738000000206],[-73.992854491775518,40.730082566051351],[-73.996772,40.725432000000154],[-73.997634685522883,40.725786309886963],[-74.002855946639244,40.728346630056791],[-74.001413,40.731065000000207],[-73.996796995070824,40.73736378205173],[-73.991724524037934,40.735245208931886],[-73.990703782359589,40.734781896080477],[-73.991460000000131,40.731738000000206]]],[[[-73.958357552055688,40.800369095633819],[-73.98143901556422,40.768762584141953],[-73.981548752788598,40.7685590292784],[-73.981565335901905,40.768307084720796],[-73.981754418060945,40.768399727738668],[-73.982038573548124,40.768387823012056],[-73.982268248204349,40.768298621883247],[-73.982384797518051,40.768097213086911],[-73.982320919746599,40.767894461792181],[-73.982155532845766,40.767756204474757],[-73.98238873834039,40.767411004834273],[-73.993650353659021,40.772145571634361],[-73.99415893763998,40.772493009137818],[-73.993831082030937,40.772931787850908],[-73.993891252437052,40.772955194876722],[-73.993962585514595,40.772944653908901],[-73.99401262480508,40.772882846631894],[-73.994122058082397,40.77292405902601],[-73.994136652588594,40.772901870174394],[-73.994301342391154,40.772970028663913],[-73.994281535134448,40.77299380206933],[-73.994376552751078,40.77303955110149],[-73.994294029824005,40.773156243992048],[-73.995023275860802,40.773481196576356],[-73.99508939189289,40.773388475039134],[-73.995013963716758,40.773358035426909],[-73.995050284699261,40.773297153189958],[-73.996240651898916,40.773789791397689],[-73.996195837470992,40.773852356184044],[-73.996098807369748,40.773951805299085],[-73.996179459973888,40.773986954351571],[-73.996095245226442,40.774086186437756],[-73.995572265161172,40.773870731394297],[-73.994017424135961,40.77321375261053],[-73.993935876811335,40.773179512586211],[-73.993861942928888,40.773269531698837],[-73.993822393527211,40.773381758622882],[-73.993767019318497,40.773483981224835],[-73.993698463744295,40.773562141052594],[-73.993358326468751,40.773926888327956],[-73.992622663865575,40.774974056037109],[-73.992577842766124,40.774956016359418],[-73.992527743951555,40.775002110439829],[-73.992469745815342,40.775024159551755],[-73.992403837191887,40.775018140390664],[-73.99226708903538,40.775116033858794],[-73.99217809026365,40.775279293897171],[-73.992059084937338,40.775497598192516],[-73.992125372394938,40.775509075053385],[-73.992226867797001,40.775482211026116],[-73.992329346608813,40.775468900958522],[-73.992361756801131,40.775501899766638],[-73.992386042960277,40.775557180424634],[-73.992087684712729,40.775983970821372],[-73.990927174149746,40.777566878763238],[-73.99039616003671,40.777585065679204],[-73.989461267506471,40.778875124584417],[-73.989175778438053,40.779287524015778],[-73.988868617400072,40.779692922911607],[-73.988871874499793,40.779713738253008],[-73.989219022880576,40.779697895209402],[-73.98927785904425,40.779723439271038],[-73.989409054180143,40.779737706471963],[-73.989498614927044,40.779725044389757],[-73.989596493388234,40.779698146683387],[-73.989679812902509,40.779677568658038],[-73.989752702937935,40.779671244211556],[-73.989842247806507,40.779680752670664],[-73.990040102120489,40.779707677698219],[-73.990137977524839,40.779699769704784],[-73.99033584033225,40.779661794394983],[-73.990430598697046,40.779664973055503],[-73.990622199396725,40.779676064914298],[-73.990745069505479,40.779671328184051],[-73.990872114282197,40.779646007643876],[-73.990961672224358,40.779639683751753],[-73.991057472829539,40.779652352625774],[-73.991157429497036,40.779669775606465],[-73.991242817404469,40.779671367084504],[-73.991255318289745,40.779650782516491],[-73.991294887120119,40.779630209208889],[-73.991321967649895,40.779631796041372],[-73.991359455569423,40.779585883337383],[-73.991551059227476,40.779574821437407],[-73.99141982585985,40.779755280287233],[-73.988886144117032,40.779878898532999],[-73.988939656706265,40.779956178440393],[-73.988926103530844,40.780059292013632],[-73.988911680264692,40.780096037146606],[-73.988919261468567,40.780226094343945],[-73.988381050202634,40.780981074045783],[-73.988232413846987,40.781233144215555],[-73.988210420831663,40.781225482542055],[-73.988140000000143,40.781409000000224],[-73.988041288067166,40.781585961353777],[-73.98810029382463,40.781602878305286],[-73.988076449145055,40.781650935001608],[-73.988018059972219,40.781634188810422],[-73.987960792842145,40.781770987031535],[-73.985465811970457,40.785360700575431],[-73.986172704965611,40.786068452258647],[-73.986455862401996,40.785919219081421],[-73.987072345615601,40.785189638820121],[-73.98711901394276,40.785210319004058],[-73.986497781023601,40.785951202887254],[-73.986164628806279,40.786121882448327],[-73.986128422486075,40.786239001331111],[-73.986071135219746,40.786240706026611],[-73.986027274789123,40.786228964236727],[-73.986097637849426,40.78605822569795],[-73.985429321269592,40.785413942184597],[-73.985081137732209,40.785921935110366],[-73.985198833254501,40.785966552197777],[-73.985170502389906,40.78601333415817],[-73.985216218673656,40.786030501816427],[-73.98525509797993,40.785976205511588],[-73.98524273937646,40.785972572653328],[-73.98524962933017,40.785963139855845],[-73.985281779186749,40.785978620950075],[-73.985240032884533,40.786035858136792],[-73.985683885242182,40.786222123919686],[-73.985717529004575,40.786175994668795],[-73.985765660297687,40.786196274858618],[-73.985682871922691,40.786309786213067],[-73.985636270930442,40.786290150649279],[-73.985670722564691,40.786242911993817],[-73.98520511880038,40.786047669212785],[-73.985211035607492,40.786039554883686],[-73.985162639946992,40.786020999769754],[-73.985131636312062,40.786060297019972],[-73.985016964065125,40.78601423719563],[-73.984655078830457,40.786534741807841],[-73.985743787901043,40.786570082854738],[-73.98589227228328,40.786426529019593],[-73.985942854994988,40.786452847880334],[-73.985949561556794,40.78648711396653],[-73.985812373526713,40.786616865357047],[-73.985135209703174,40.78658761889551],[-73.984619428584324,40.786586016349787],[-73.981952458164173,40.790393724337193],[-73.972823037363767,40.803428052816756],[-73.971036786332192,40.805918478839672],[-73.966701,40.804169000000186],[-73.959647,40.801156000000113],[-73.958508540159471,40.800682279767472],[-73.95853274080838,40.800491362464697],[-73.958357552055688,40.800369095633819]]],[[[-73.943592454622546,40.782747908206574],[-73.943648235390199,40.782656161333449],[-73.943870759887162,40.781273026571704],[-73.94345932494096,40.780048275653243],[-73.943213862652243,40.779317588660199],[-73.943004239504688,40.779639495474292],[-73.942716005450905,40.779544169476175],[-73.942712374762181,40.779214856940001],[-73.942535563208608,40.779090956062532],[-73.942893408188027,40.778614093246276],[-73.942438481745029,40.777315235766039],[-73.942244919522594,40.777104088947254],[-73.942074188038887,40.776917846977142],[-73.942002667222781,40.776185317382648],[-73.942620205199006,40.775180871576474],[-73.94285645694552,40.774796600349191],[-73.94293043781397,40.774676268036011],[-73.945870899588215,40.771692257932997],[-73.946618690150586,40.77093339256956],[-73.948664164778933,40.768857624399587],[-73.950069793030679,40.767025088383498],[-73.954418260786071,40.762184104951245],[-73.95650786241211,40.760285256574043],[-73.958787773424007,40.758213471309809],[-73.973015157270069,40.764278692864671],[-73.955760332998182,40.787906554459667],[-73.944023,40.782960000000301],[-73.943592454622546,40.782747908206574]]]]});\\r\\nlet coordinates = \\r\\n    datatable(longitude:real, latitude:real, description:string)\\r\\n    [\\r\\n        real(-73.9741), 40.7914, \\'Upper West Side\\',\\r\\n        real(-73.9950), 40.7340, \\'Greenwich Village\\',\\r\\n        real(-73.8743), 40.7773, \\'LaGuardia Airport\\',\\r\\n    ];\\r\\ncoordinates\\r\\n| extend distance = geo_distance_point_to_polygon(longitude, latitude, multipolygon)\\r\\n```\\r\\n\\r\\n|longitude|latitude|description|distance|\\r\\n|---|---|---|---|\\r\\n|-73.9741|40.7914|Upper West Side|0|\\r\\n|-73.995|40.734|Greenwich Village|0|\\r\\n|-73.8743|40.7773|LaGuardia Airport|5702.15731467514|\\r\\n\\r\\nThe following example finds all states that are within 200 km distance, excluding state that contains the point.\\r\\n\\r\\n```\\r\\nUS_States\\r\\n| project name = features.properties.NAME, polygon = features.geometry\\r\\n| project name, distance = ceiling(geo_distance_point_to_polygon(-111.905, 40.634, polygon) / 1000)\\r\\n| where distance < 200 and distance > 0\\r\\n```\\r\\n\\r\\n|name|distance|\\r\\n|---|---|\\r\\n|Idaho|152|\\r\\n|Nevada|181|\\r\\n|Wyoming|83|\\r\\n\\r\\nThe following example will return a null result because of the invalid coordinate input.\\r\\n\\r\\n```\\r\\nprint distance = geo_distance_point_to_polygon(500,1,dynamic({\"type\": \"Polygon\",\"coordinates\": [[[0,0],[10,10],[10,1],[0,0]]]}))\\r\\n```\\r\\n\\r\\n| distance |\\r\\n|------------|\\r\\n|            |\\r\\n\\r\\nThe following example will return a null result because of the invalid polygon input.\\r\\n\\r\\n```\\r\\nprint distance = geo_distance_point_to_polygon(1,1,dynamic({\"type\": \"Polygon\",\"coordinates\": [[[0,0],[10,10],[10,10],[0,0]]]}))\\r\\n```\\r\\n\\r\\n| distance |\\r\\n|------------|\\r\\n|            |',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-distance-point-to-polygon-function\",\"geo-distance-point-to-polygon-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_geohash_neighbors\",\"Calculates the Geohash neighbors.\",\"Read more about [`geohash`](https://en.wikipedia.org/wiki/Geohash).  \\r\\n\\r\\n## Syntax\\r\\n\\r\\n`geo_geohash_neighbors(`*geohash*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n*geohash*: Geohash string value as it was calculated by [geo_point_to_geohash()](geo-point-to-geohash-function.md). The geohash string must be between 1 and 18 characters.\\r\\n\\r\\n## Returns\\r\\n\\r\\nAn array of Geohash neighbors. If the Geohash is invalid, the query will produce a null result.\",'The following example calculates Geohash neighbors.\\r\\n\\r\\n```\\r\\nprint neighbors = geo_geohash_neighbors(\\'sunny\\')\\r\\n```\\r\\n\\r\\n|neighbors|\\r\\n|---|\\r\\n|[\"sunnt\",\"sunpj\",\"sunnx\",\"sunpn\",\"sunnv\",\"sunpp\",\"sunnz\",\"sunnw\"]|\\r\\n\\r\\nThe following example calculates an array of input Geohash with its neighbors.\\r\\n\\r\\n```\\r\\nlet geohash = \\'sunny\\';\\r\\nprint cells = array_concat(pack_array(geohash), geo_geohash_neighbors(geohash))\\r\\n```\\r\\n\\r\\n|cells|\\r\\n|---|\\r\\n|[\"sunny\",\"sunnt\",\"sunpj\",\"sunnx\",\"sunpn\",\"sunnv\",\"sunpp\",\"sunnz\",\"sunnw\"]|\\r\\n\\r\\nThe following example calculates Geohash polygons GeoJSON geometry collection.\\r\\n\\r\\n```\\r\\nlet geohash = \\'sunny\\';\\r\\nprint cells = array_concat(pack_array(geohash), geo_geohash_neighbors(geohash))\\r\\n| mv-expand cells to typeof(string)\\r\\n| project polygons = geo_geohash_to_polygon(cells)\\r\\n| summarize arr = make_list(polygons)\\r\\n| project geojson = pack(\"type\", \"Feature\",\"geometry\", pack(\"type\", \"GeometryCollection\", \"geometries\", arr), \"properties\", pack(\"name\", \"polygons\"))\\r\\n```\\r\\n\\r\\n|geojson|\\r\\n|---|\\r\\n|{\"type\": \"Feature\",\"geometry\": {\"type\": \"GeometryCollection\",\"geometries\": [<br>  {\"type\":\"Polygon\",\"coordinates\":[[[42.451171875,23.6865234375],[42.4951171875,23.6865234375],[42.4951171875,23.73046875],[42.451171875,23.73046875],[42.451171875,23.6865234375]]]},<br>  {\"type\":\"Polygon\",\"coordinates\":[[[42.4072265625,23.642578125],[42.451171875,23.642578125],[42.451171875,23.6865234375],[42.4072265625,23.6865234375],[42.4072265625,23.642578125]]]},<br>  {\"type\":\"Polygon\",\"coordinates\":[[[42.4072265625,23.73046875],[42.451171875,23.73046875],[42.451171875,23.7744140625],[42.4072265625,23.7744140625],[42.4072265625,23.73046875]]]},<br>  {\"type\":\"Polygon\",\"coordinates\":[[[42.4951171875,23.642578125],[42.5390625,23.642578125],[42.5390625,23.6865234375],[42.4951171875,23.6865234375],[42.4951171875,23.642578125]]]},<br>  {\"type\":\"Polygon\",\"coordinates\":[[[42.451171875,23.73046875],[42.4951171875,23.73046875],[42.4951171875,23.7744140625],[42.451171875,23.7744140625],[42.451171875,23.73046875]]]},<br>  {\"type\":\"Polygon\",\"coordinates\":[[[42.4072265625,23.6865234375],[42.451171875,23.6865234375],[42.451171875,23.73046875],[42.4072265625,23.73046875],[42.4072265625,23.6865234375]]]},<br>  {\"type\":\"Polygon\",\"coordinates\":[[[42.4951171875,23.73046875],[42.5390625,23.73046875],[42.5390625,23.7744140625],[42.4951171875,23.7744140625],[42.4951171875,23.73046875]]]},<br>  {\"type\":\"Polygon\",\"coordinates\":[[[42.4951171875,23.6865234375],[42.5390625,23.6865234375],[42.5390625,23.73046875],[42.4951171875,23.73046875],[42.4951171875,23.6865234375]]]},<br>  {\"type\":\"Polygon\",\"coordinates\":[[[42.451171875,23.642578125],[42.4951171875,23.642578125],[42.4951171875,23.6865234375],[42.451171875,23.6865234375],[42.451171875,23.642578125]]]}]},<br>  \"properties\": {\"name\": \"polygons\"}}|\\r\\n\\r\\nThe following example calculates polygons union that represent Geohash and its neighbors.\\r\\n\\r\\n```\\r\\nlet h3cell = \\'sunny\\';\\r\\nprint cells = array_concat(pack_array(h3cell), geo_geohash_neighbors(h3cell))\\r\\n| mv-expand cells to typeof(string)\\r\\n| project polygons = geo_geohash_to_polygon(cells)\\r\\n| summarize arr = make_list(polygons)\\r\\n| project polygon = geo_union_polygons_array(arr)\\r\\n```\\r\\n\\r\\n|polygon|\\r\\n|---|\\r\\n|{\"type\":\"Polygon\",\"coordinates\":[[[42.4072265625,23.642578125],[42.451171875,23.642578125],[42.4951171875,23.642578125],[42.5390625,23.642578125],[42.5390625,23.686523437500004],[42.5390625,23.730468750000004],[42.5390625,23.7744140625],[42.4951171875,23.7744140625],[42.451171875,23.7744140625],[42.407226562499993,23.7744140625],[42.4072265625,23.73046875],[42.4072265625,23.6865234375],[42.4072265625,23.642578125]]]}|\\r\\n\\r\\nThe following example returns true because of the invalid Geohash token input.\\r\\n\\r\\n```\\r\\nprint invalid = isnull(geo_geohash_neighbors(\\'a\\'))\\r\\n```\\r\\n\\r\\n|invalid|\\r\\n|---|\\r\\n|1|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-geohash-neighbors-function\",\"geo-geohash-neighbors-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_geohash_to_central_point\",\"Calculates the geospatial coordinates that represent the center of a geohash rectangular area.\",\"Read more about [`geohash`](https://en.wikipedia.org/wiki/Geohash).  \\r\\n\\r\\n## Syntax\\r\\n\\r\\n`geo_geohash_to_central_point(`*geohash*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n*geohash*: Geohash string value as it was calculated by [geo_point_to_geohash()](geo-point-to-geohash-function.md). The geohash string can be 1 to 18 characters.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe geospatial coordinate values in [GeoJSON Format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type. If the geohash is invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n> The GeoJSON format specifies longitude first and latitude second.\",'```\\r\\nprint point = geo_geohash_to_central_point(\"sunny\")\\r\\n| extend coordinates = point.coordinates\\r\\n| extend longitude = coordinates[0], latitude = coordinates[1]\\r\\n```\\r\\n\\r\\n|point|coordinates|longitude|latitude|\\r\\n|---|---|---|---|\\r\\n|{<br>  \"type\": \"Point\",<br>  \"coordinates\": [<br>    42.47314453125,<br>    23.70849609375<br>  ]<br>}|[<br>  42.47314453125,<br>  23.70849609375<br>]|42.47314453125|23.70849609375|\\r\\n\\r\\nThe following example returns a null result because of the invalid geohash input.\\r\\n\\r\\n```\\r\\nprint geohash = geo_geohash_to_central_point(\"a\")\\r\\n```\\r\\n\\r\\n|geohash|\\r\\n|---|\\r\\n||\\r\\n\\r\\n## Example: Creating location deep-links for Bing Maps\\r\\n\\r\\nYou can use the geohash value to create a deep-link URL to Bing Maps by pointing to the geohash center point:\\r\\n\\r\\n```\\r\\n// Use string concatenation to create Bing Map deep-link URL from a geo-point\\r\\nlet point_to_map_url = (_point:dynamic, _title:string) \\r\\n{\\r\\n    strcat(\\'https://www.bing.com/maps?sp=point.\\', _point.coordinates[1] ,\\'_\\', _point.coordinates[0], \\'_\\', url_encode(_title)) \\r\\n};\\r\\n// Convert geohash to center point, and then use \\'point_to_map_url\\' to create Bing Map deep-link\\r\\nlet geohash_to_map_url = (_geohash:string, _title:string)\\r\\n{\\r\\n    point_to_map_url(geo_geohash_to_central_point(_geohash), _title)\\r\\n};\\r\\nprint geohash = \\'sv8wzvy7\\'\\r\\n| extend url = geohash_to_map_url(geohash, \"You are here\")\\r\\n```\\r\\n\\r\\n|geohash|url|\\r\\n|---|---|\\r\\n|sv8wzvy7|[https://www.bing.com/maps?sp=point.32.15620994567871_34.80245590209961_You+are+here](https://www.bing.com/maps?sp=point.32.15620994567871_34.80245590209961_You+are+here)|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-geohash-to-central-point-function\",\"geo-geohash-to-central-point-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_geohash_to_polygon\",\"Calculates the polygon that represents the geohash rectangular area.\",\"Read more about [geohash](https://en.wikipedia.org/wiki/Geohash).  \\r\\n\\r\\n## Syntax\\r\\n\\r\\n`geo_geohash_to_polygon(`*geohash*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n*geohash*: Geohash string value as it was calculated by [geo_point_to_geohash()](geo-point-to-geohash-function.md). The geohash string must be between 1 and 18 characters.\\r\\n\\r\\n## Returns\\r\\n\\r\\nPolygon in [GeoJSON Format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type. If the geohash is invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n> Geohash edges are straight lines and aren't geodesics. If the geohash polygon is part of some other calculation, consider densifying it with [geo_polygon_densify()](geo-polygon-densify-function.md).\",'```\\r\\nprint GeohashPolygon = geo_geohash_to_polygon(\"dr5ru\");\\r\\n```\\r\\n\\r\\n|GeohashPolygon|\\r\\n|---|\\r\\n|{<br>\"type\": \"Polygon\",<br>\"coordinates\": [<br>[[-74.00390625, 40.7373046875], [-73.9599609375, 40.7373046875], [-73.9599609375, 40.78125], [-74.00390625, 40.78125], [-74.00390625, 40.7373046875]]]<br>}|\\r\\n\\r\\nThe following example assembles GeoJSON geometry collection of geohash polygons.\\r\\n\\r\\n```\\r\\n// Geohash GeoJSON collection\\r\\ndatatable(lng:real, lat:real)\\r\\n[\\r\\n    -73.975212, 40.789608,\\r\\n    -73.916869, 40.818314,\\r\\n    -73.989148, 40.743273,\\r\\n]\\r\\n| project geohash = geo_point_to_geohash(lng, lat, 5)\\r\\n| project geohash_polygon = geo_geohash_to_polygon(geohash)\\r\\n| summarize geohash_polygon_lst = make_list(geohash_polygon)\\r\\n| project pack(\\r\\n    \"type\", \"Feature\",\\r\\n    \"geometry\", pack(\"type\", \"GeometryCollection\", \"geometries\", geohash_polygon_lst),\\r\\n    \"properties\", pack(\"name\", \"Geohash polygons collection\"))\\r\\n```\\r\\n\\r\\n|Column1|\\r\\n|---|\\r\\n|{<br>\"type\": \"Feature\",<br>\"geometry\": {\"type\": \"GeometryCollection\",\"geometries\": [<br>{\"type\": \"Polygon\", \"coordinates\": [[[-74.00390625, 40.78125], [-73.9599609375, 40.78125], [-73.9599609375, 40.8251953125],[ -74.00390625, 40.8251953125], [ -74.00390625, 40.78125]]]},<br>{\"type\": \"Polygon\", \"coordinates\": [[[ -73.9599609375, 40.78125], [-73.916015625, 40.78125], [-73.916015625, 40.8251953125], [-73.9599609375, 40.8251953125], [-73.9599609375, 40.78125]]]},<br>{\"type\": \"Polygon\", \"coordinates\": [[[-74.00390625, 40.7373046875], [-73.9599609375, 40.7373046875], [-73.9599609375, 40.78125], [-74.00390625, 40.78125], [-74.00390625, 40.7373046875]]]}]<br>},<br>\"properties\": {\"name\": \"Geohash polygons collection\"<br>}}|\\r\\n\\r\\nThe following example returns a null result because of the invalid geohash input.\\r\\n\\r\\n```\\r\\nprint GeohashPolygon = geo_geohash_to_polygon(\"a\");\\r\\n```\\r\\n\\r\\n|GeohashPolygon|\\r\\n|---|\\r\\n||',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-geohash-to-polygon-function\",\"geo-geohash-to-polygon-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_h3cell_children\",\"Calculates the H3 cell children.\",\"Read more about [H3 Cell](https://eng.uber.com/h3/).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`geo_h3cell_children(`*h3cell*`, `*resolution*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *h3cell*: H3 Cell token string value as it was calculated by [geo_point_to_h3cell()](geo-point-to-h3cell-function.md).\\r\\n* *resolution*: An optional `int` that defines the requested children cells resolution. Supported values are in the range [1, 15]. If unspecified, an immediate children tokens will be calculated.\\r\\n\\r\\n## Returns\\r\\n\\r\\nArray of H3 Cell children tokens. If the H3 Cell is invalid or child resolution is lower than given cell, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> A difference between cell resolution and its children can't be more than 5. A difference of 5 levels will be resulted in up to 16807 children tokens.\",'```\\r\\nprint children = geo_h3cell_children(\\'862a1072fffffff\\')\\r\\n```\\r\\n\\r\\n|children|\\r\\n|---|\\r\\n|[ \"872a10728ffffff\", \"872a10729ffffff\", \"872a1072affffff\", \"872a1072bffffff\", \"872a1072cffffff\", \"872a1072dffffff\", \"872a1072effffff\" ]|\\r\\n\\r\\nThe following example counts children 3 levels below a given cell.\\r\\n\\r\\n```\\r\\nlet h3_cell = \\'862a1072fffffff\\'; \\r\\nprint children_count = array_length(geo_h3cell_children(h3_cell, geo_h3cell_level(h3_cell) + 3))\\r\\n```\\r\\n\\r\\n|children_count|\\r\\n|---|\\r\\n|343|\\r\\n\\r\\nThe following example assembles GeoJSON geometry collection of H3 Cell children polygons.\\r\\n\\r\\n```\\r\\nprint children = geo_h3cell_children(\\'862a1072fffffff\\')\\r\\n| mv-expand children to typeof(string)\\r\\n| project child = geo_h3cell_to_polygon(children)\\r\\n| summarize h3_hash_polygon_lst = make_list(child)\\r\\n| project geojson = pack(\\r\\n    \"type\", \"Feature\",\\r\\n    \"geometry\", pack(\"type\", \"GeometryCollection\", \"geometries\", h3_hash_polygon_lst),\\r\\n    \"properties\", pack(\"name\", \"H3 polygons collection\"))\\r\\n```\\r\\n\\r\\n|geojson|\\r\\n|---|\\r\\n|{ \"type\": \"Feature\", \"geometry\": { \"type\": \"GeometryCollection\", \"geometries\": [ ... ... ... ] }, \"properties\": { \"name\": \"H3 polygons collection\" }}|\\r\\n\\r\\nThe following example returns true because of the invalid cell.\\r\\n\\r\\n```\\r\\nprint is_null = isnull(geo_h3cell_children(\\'abc\\'))\\r\\n```\\r\\n\\r\\n|is_null|\\r\\n|---|\\r\\n|1|\\r\\n\\r\\nThe following example returns true because the level difference between cell and its children is more than 5.\\r\\n\\r\\n```\\r\\nprint is_null = isnull(geo_h3cell_children(geo_point_to_h3cell(1, 1, 9), 15))\\r\\n```\\r\\n\\r\\n|is_null|\\r\\n|---|\\r\\n|1|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-h3cell-children-function\",\"geo-h3cell-children-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_h3cell_level\",\"Calculates the H3 cell resolution.\",\"Read more about [H3 Cell](https://eng.uber.com/h3/).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`geo_h3cell_level(`*h3cell*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n*h3cell*: H3 Cell token string value as it was calculated by [geo_point_to_h3cell()](geo-point-to-h3cell-function.md).\\r\\n\\r\\n## Returns\\r\\n\\r\\nAn Integer that represents H3 Cell level. Valid level is in range [0, 15]. If the H3 Cell is invalid, the query will produce a null result.\",\"```\\r\\nprint cell_res = geo_h3cell_level('862a1072fffffff')\\r\\n```\\r\\n\\r\\n|cell_res|\\r\\n|---|\\r\\n|6|\\r\\n\\r\\n```\\r\\nprint cell_res = geo_h3cell_level(geo_point_to_h3cell(1,1,10))\\r\\n```\\r\\n\\r\\n|cell_res|\\r\\n|---|\\r\\n|10|\\r\\n\\r\\nThe following example returns true because of the invalid H3 Cell token input.\\r\\n\\r\\n```\\r\\nprint invalid_res = isnull(geo_h3cell_level('abc'))\\r\\n```\\r\\n\\r\\n|invalid_res|\\r\\n|---|\\r\\n|1|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-h3cell-level-function\",\"geo-h3cell-level-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_h3cell_neighbors\",\"Calculates the H3 cell neighbors.\",\"Read more about [H3 Cell](https://eng.uber.com/h3/).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`geo_h3cell_neighbors(`*h3cell*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n*h3cell*: H3 Cell token string value as it was calculated by [geo_point_to_h3cell()](geo-point-to-h3cell-function.md).\\r\\n\\r\\n## Returns\\r\\n\\r\\nAn array of H3 cell neighbors. If the H3 Cell is invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n> If more than immidiate neighbors are needed, please see [geo_h3cell_rings()](geo-h3cell-rings-function.md).\",'The following example calculates H3 cell neighbors.\\r\\n\\r\\n```\\r\\nprint neighbors = geo_h3cell_neighbors(\\'862a1072fffffff\\')\\r\\n```\\r\\n\\r\\n|neighbors|\\r\\n|---|\\r\\n|[\"862a10727ffffff\",\"862a10707ffffff\",\"862a1070fffffff\",\"862a10777ffffff\",\"862a100dfffffff\",\"862a100d7ffffff\"]|\\r\\n\\r\\nThe following example calculates an array of input H3 cell with its neighbors.\\r\\n\\r\\n```\\r\\nlet h3cell = \\'862a1072fffffff\\';\\r\\nprint cells = array_concat(pack_array(h3cell), geo_h3cell_neighbors(h3cell))\\r\\n```\\r\\n\\r\\n|cells|\\r\\n|---|\\r\\n|[\"862a1072fffffff\",\"862a10727ffffff\",\"862a10707ffffff\",\"862a1070fffffff\",\"862a10777ffffff\",\"862a100dfffffff\",\"862a100d7ffffff\"]|\\r\\n\\r\\nThe following example calculates H3 cells polygons GeoJSON geometry collection.\\r\\n\\r\\n```\\r\\nlet h3cell = \\'862a1072fffffff\\';\\r\\nprint cells = array_concat(pack_array(h3cell), geo_h3cell_neighbors(h3cell))\\r\\n| mv-expand cells to typeof(string)\\r\\n| project polygons = geo_h3cell_to_polygon(cells)\\r\\n| summarize arr = make_list(polygons)\\r\\n| project geojson = pack(\"type\", \"Feature\",\"geometry\", pack(\"type\", \"GeometryCollection\", \"geometries\", arr), \"properties\", pack(\"name\", \"polygons\"))\\r\\n```\\r\\n\\r\\n|geojson|\\r\\n|---|\\r\\n|{\"type\": \"Feature\",\"geometry\": {\"type\": \"GeometryCollection\",\"geometries\": [<br>  {\"type\":\"Polygon\",\"coordinates\":[[[-74.0022744646159,40.735376026215022],[-74.046908029686236,40.727986222489115],[-74.060610712223664,40.696775140349033],[-74.029724408156682,40.672970047595463],[-73.985140983708192,40.680349049267583],[-73.971393761028622,40.71154393543933],[-74.0022744646159,40.735376026215022]]]},<br>  {\"type\":\"Polygon\",\"coordinates\":[[[-74.019448383546617,40.790439140236963],[-74.064132193843633,40.783038509825],[-74.077839665342211,40.751803958414136],[-74.046908029686236,40.727986222489115],[-74.0022744646159,40.735376026215022],[-73.988522328408948,40.766594382212254],[-74.019448383546617,40.790439140236963]]]},<br>  {\"type\":\"Polygon\",\"coordinates\":[[[-74.077839665342211,40.751803958414136],[-74.1224794808745,40.744383587828388],[-74.1361375042681,40.713156370029125],[-74.1052004095288,40.689365648097258],[-74.060610712223664,40.696775140349033],[-74.046908029686236,40.727986222489115],[-74.077839665342211,40.751803958414136]]]},<br>  {\"type\":\"Polygon\",\"coordinates\":[[[-74.060610712223664,40.696775140349033],[-74.1052004095288,40.689365648097258],[-74.118853750491638,40.658161927046628],[-74.0879619670209,40.634383824229609],[-74.043422283844933,40.641782462872115],[-74.029724408156682,40.672970047595463],[-74.060610712223664,40.696775140349033]]]},<br>  {\"type\":\"Polygon\",\"coordinates\":[[[-73.985140983708192,40.680349049267583],[-74.029724408156682,40.672970047595463],[-74.043422283844933,40.641782462872115],[-74.012581189358343,40.617990065981623],[-73.968047801220749,40.625358290164748],[-73.954305509472675,40.656529678451555],[-73.985140983708192,40.680349049267583]]]},<br>  {\"type\":\"Polygon\",\"coordinates\":[[[-73.926766604813565,40.718903205013063],[-73.971393761028622,40.71154393543933],[-73.985140983708192,40.680349049267583],[-73.954305509472675,40.656529678451555],[-73.909728515658443,40.663878222244435],[-73.895936872069854,40.69505685239637],[-73.926766604813565,40.718903205013063]]]},<br>  {\"type\":\"Polygon\",\"coordinates\":[[[-73.943844904976629,40.773964402038523],[-73.988522328408948,40.766594382212254],[-74.0022744646159,40.735376026215022],[-73.971393761028622,40.71154393543933],[-73.926766604813565,40.718903205013063],[-73.912969923470314,40.750105305345329],[-73.943844904976629,40.773964402038523]]]}]},<br>  \"properties\": {\"name\": \"polygons\"}}|\\r\\n\\r\\nThe following example calculates polygons union that represent H3 cell and its neighbors.\\r\\n\\r\\n```\\r\\nlet h3cell = \\'862a1072fffffff\\';\\r\\nprint cells = array_concat(pack_array(h3cell), geo_h3cell_neighbors(h3cell))\\r\\n| mv-expand cells to typeof(string)\\r\\n| project polygons = geo_h3cell_to_polygon(cells)\\r\\n| summarize arr = make_list(polygons)\\r\\n| project polygon = geo_union_polygons_array(arr)\\r\\n```\\r\\n\\r\\n|polygon|\\r\\n|---|\\r\\n|{<br>  \"type\": \"Polygon\",<br>  \"coordinates\": [[[  -73.926766604813565,  40.718903205013063],[  -73.912969923470314,  40.750105305345329],[  -73.943844904976629,  40.773964402038523],[  -73.988522328408948,  40.766594382212254],[  -74.019448383546617,  40.79043914023697],[  -74.064132193843633,  40.783038509825005],[  -74.077839665342211,  40.751803958414136],[  -74.1224794808745,  40.744383587828388],[  -74.1361375042681,  40.713156370029125],[  -74.1052004095288,  40.689365648097251],[  -74.118853750491638,  40.658161927046628],[  -74.0879619670209,  40.6343838242296],[  -74.043422283844933,  40.641782462872115],[  -74.012581189358343,  40.617990065981623],[  -73.968047801220749,  40.625358290164755],[  -73.954305509472675,  40.656529678451555],[  -73.909728515658443,  40.663878222244442],[  -73.895936872069854,  40.695056852396377],[  -73.926766604813565,  40.718903205013063]]]}|\\r\\n\\r\\nThe following example returns true because of the invalid H3 Cell token input.\\r\\n\\r\\n```\\r\\nprint invalid = isnull(geo_h3cell_neighbors(\\'abc\\'))\\r\\n```\\r\\n\\r\\n|invalid|\\r\\n|---|\\r\\n|1|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-h3cell-neighbors-function\",\"geo-h3cell-neighbors-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_h3cell_parent\",\"Calculates the H3 cell parent.\",\"Read more about [H3 Cell](https://eng.uber.com/h3/).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`geo_h3cell_parent(`*h3cell*`, `*resolution*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *h3cell*: H3 Cell token string value as it was calculated by [geo_point_to_h3cell()](geo-point-to-h3cell-function.md).\\r\\n* *resolution*: An optional `int` that defines the requested parent cell resolution. Supported values are in the range [0, 14]. If unspecified, an immediate parent will be calculated.\\r\\n\\r\\n## Returns\\r\\n\\r\\nH3 Cell parent token `string`. If the H3 Cell is invalid or parent resolution is higher than given cell, the query will produce an empty result.\",\"```\\r\\nprint parent_cell = geo_h3cell_parent('862a1072fffffff')\\r\\n```\\r\\n\\r\\n|parent_cell|\\r\\n|---|\\r\\n|852a1073fffffff|\\r\\n\\r\\nThe following calculates cell parent at level 1.\\r\\n\\r\\n```\\r\\nprint parent_cell = geo_h3cell_parent('862a1072fffffff', 1)\\r\\n```\\r\\n\\r\\n|parent_cell|\\r\\n|---|\\r\\n|812a3ffffffffff|\\r\\n\\r\\n```\\r\\nprint parent_res = geo_h3cell_level(geo_h3cell_parent((geo_point_to_h3cell(1,1,10))))\\r\\n```\\r\\n\\r\\n|parent_res|\\r\\n|---|\\r\\n|9|\\r\\n\\r\\n```\\r\\nprint parent_res = geo_h3cell_level(geo_h3cell_parent(geo_point_to_h3cell(1,1,10), 3))\\r\\n```\\r\\n\\r\\n|parent_res|\\r\\n|---|\\r\\n|3|\\r\\n\\r\\nThe following example produces an empty result because of the invalid cell input.\\r\\n\\r\\n```\\r\\nprint invalid = isempty(geo_h3cell_parent('123'))\\r\\n```\\r\\n\\r\\n|invalid|\\r\\n|---|\\r\\n|1|\\r\\n\\r\\nThe following example produces an empty result because of the invalid parent resolution.\\r\\n\\r\\n```\\r\\nprint invalid = isempty(geo_h3cell_parent('862a1072fffffff', 100))\\r\\n```\\r\\n\\r\\n|invalid|\\r\\n|---|\\r\\n|1|\\r\\n\\r\\nThe following example produces an empty result because parent can't be of a higher resolution than child.\\r\\n\\r\\n```\\r\\nprint invalid = isempty(geo_h3cell_parent('862a1072fffffff', 15))\\r\\n```\\r\\n\\r\\n|invalid|\\r\\n|---|\\r\\n|1|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-h3cell-parent-function\",\"geo-h3cell-parent-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_h3cell_rings\",\"Calculates the H3 cell Rings.\",\"Read more about [H3 Cell](https://eng.uber.com/h3/).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`geo_h3cell_rings(`*h3cell*`, `*distance*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *h3cell*: H3 Cell token string value as it was calculated by [geo_point_to_h3cell()](geo-point-to-h3cell-function.md).\\r\\n* *distance*: An `int` that defines the maximum ring distance from given cell. Valid distance is in range [0, 142].\\r\\n\\r\\n## Returns\\r\\n\\r\\nAn ordered array of ring arrays where 1st ring contains the original cell, 2nd ring contains neighboring cells, and so on. If either the H3 Cell or distance is invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n> * For H3 Cell immidiate neighbors only, please see [geo_h3cell_neighbors()](geo-h3cell-neighbors-function.md).\\r\\n> * A cell might be not present in the ring if pentagonal distortion was encountered.\",'The following example produces rings up to distance 2.\\r\\n\\r\\n```\\r\\nprint rings = geo_h3cell_rings(\\'861f8894fffffff\\', 2)\\r\\n```\\r\\n\\r\\n|rings|\\r\\n|---|\\r\\n|[<br> [\"861f8894fffffff\"],<br> [\"861f88947ffffff\",\"861f8895fffffff\",\"861f88867ffffff\",\"861f8d497ffffff\",\"861f8d4b7ffffff\",\"861f8896fffffff\"],<br> [\"861f88967ffffff\",\"861f88977ffffff\",\"861f88957ffffff\",\"861f8882fffffff\",\"861f88877ffffff\",\"861f88847ffffff\",\"861f8886fffffff\",\"861f8d49fffffff\",\"861f8d487ffffff\",\"861f8d4a7ffffff\",\"861f8d59fffffff\",\"861f8d597ffffff\"]<br> ]|\\r\\n\\r\\nThe following example produces all cells at level 1 (all neighbors).\\r\\n\\r\\n```\\r\\nprint neighbors = geo_h3cell_rings(\\'861f8894fffffff\\', 1)[1]\\r\\n```\\r\\n\\r\\n|neighbors|\\r\\n|---|\\r\\n|[\"861f88947ffffff\", \"861f8895fffffff\", \"861f88867ffffff\", \"861f8d497ffffff\", \"861f8d4b7ffffff\",\"861f8896fffffff\"]|\\r\\n\\r\\nThe following example produces list of cells from all rings.\\r\\n\\r\\n```\\r\\nprint rings = geo_h3cell_rings(\\'861f8894fffffff\\', 1)\\r\\n| mv-apply rings on \\r\\n(\\r\\n  summarize cells = make_list(rings)\\r\\n)\\r\\n```\\r\\n\\r\\n|cells|\\r\\n|---|\\r\\n|[\"861f8894fffffff\",\"861f88947ffffff\",\"861f8895fffffff\",\"861f88867ffffff\",\"861f8d497ffffff\",\"861f8d4b7ffffff\",\"861f8896fffffff\"]|\\r\\n\\r\\nThe following example assembles GeoJSON geometry collection of all cells.\\r\\n\\r\\n```\\r\\nprint rings = geo_h3cell_rings(\\'861f8894fffffff\\', 1)\\r\\n| mv-apply rings on \\r\\n(\\r\\n  summarize make_list(rings)\\r\\n)\\r\\n| mv-expand list_rings to typeof(string)\\r\\n| project polygon = geo_h3cell_to_polygon(list_rings)\\r\\n| summarize polygon_lst = make_list(polygon)\\r\\n| project geojson = pack(\\r\\n    \"type\", \"Feature\",\\r\\n    \"geometry\", pack(\"type\", \"GeometryCollection\", \"geometries\", polygon_lst),\\r\\n    \"properties\", pack(\"name\", \"H3 polygons collection\"))\\r\\n```\\r\\n\\r\\n|geojson|\\r\\n|---|\\r\\n|{ \"type\": \"Feature\", \"geometry\": { \"type\": \"GeometryCollection\", \"geometries\": [ ... ... ... ]}, \"properties\": { \"name\": \"H3 polygons collection\" }}|\\r\\n\\r\\nThe following example returns true because of the invalid cell.\\r\\n\\r\\n```\\r\\nprint is_null = isnull(geo_h3cell_rings(\\'abc\\', 3))\\r\\n```\\r\\n\\r\\n|is_null|\\r\\n|---|\\r\\n|1|\\r\\n\\r\\nThe following example returns true because of the invalid distance.\\r\\n\\r\\n```\\r\\nprint is_null = isnull(geo_h3cell_rings(\\'861f8894fffffff\\', 150))\\r\\n```\\r\\n\\r\\n|is_null|\\r\\n|---|\\r\\n|1|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-h3cell-rings-function\",\"geo-h3cell-rings-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_h3cell_to_central_point\",\"Calculates the geospatial coordinates that represent the center of an H3 Cell.\",\"Read more about [H3 Cell](https://eng.uber.com/h3/).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`geo_h3cell_to_central_point(`*h3cell*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n*h3cell*: H3 cell token string value as it was calculated by [geo_point_to_h3cell()](geo-point-to-h3cell-function.md).\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe geospatial coordinate values in [GeoJSON Format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type. If the H3 cell token is invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n> The GeoJSON format specifies longitude first and latitude second.\",'```\\r\\nprint h3cell = geo_h3cell_to_central_point(\"862a1072fffffff\")\\r\\n```\\r\\n\\r\\n|h3cell|\\r\\n|---|\\r\\n|{<br>\"type\": \"Point\",<br>\"coordinates\": [-74.016008479792447, 40.7041679083504]<br>}|\\r\\n\\r\\nThe following example returns the longitude of the H3 Cell center point:\\r\\n\\r\\n```\\r\\nprint longitude = geo_h3cell_to_central_point(\"862a1072fffffff\").coordinates[0]\\r\\n```\\r\\n\\r\\n|longitude|\\r\\n|---|\\r\\n|-74.0160084797924|\\r\\n\\r\\nThe following example returns a null result because of the invalid H3 cell token input.\\r\\n\\r\\n```\\r\\nprint h3cell = geo_h3cell_to_central_point(\"1\")\\r\\n```\\r\\n\\r\\n|h3cell|\\r\\n|---|\\r\\n||',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-h3cell-to-central-point-function\",\"geo-h3cell-to-central-point-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_h3cell_to_polygon\",\"Calculates the polygon that represents the H3 Cell rectangular area.\",\"Read more about [H3 Cell](https://eng.uber.com/h3/).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`geo_h3cell_to_polygon(`*h3cell*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n*h3cell*: H3 Cell token string value as it was calculated by [geo_point_to_h3cell()](geo-point-to-h3cell-function.md).\\r\\n\\r\\n## Returns\\r\\n\\r\\nPolygon in [GeoJSON Format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type. If the H3 Cell is invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n> H3 Cell polygon edges are straight lines and aren't geodesics. If an H3 Cell polygon is part of some other calculation, consider densifying it with [geo_polygon_densify()](geo-polygon-densify-function.md).\",'```\\r\\nprint geo_h3cell_to_polygon(\"862a1072fffffff\")\\r\\n```\\r\\n\\r\\n|print_0|\\r\\n|---|\\r\\n|{<br>\"type\": \"Polygon\",<br>\"coordinates\": [[[-74.0022744646159, 40.735376026215022], [-74.046908029686236, 40.727986222489115], [-74.060610712223664, 40.696775140349033],[  -74.029724408156682, 40.672970047595463], [-73.985140983708192, 40.680349049267583],[  -73.971393761028622, 40.71154393543933], [-74.0022744646159, 40.735376026215022]]]<br>}|\\r\\n\\r\\nThe following example assembles GeoJSON geometry collection of H3 Cell polygons.\\r\\n\\r\\n```\\r\\n// H3 cell GeoJSON collection\\r\\ndatatable(lng:real, lat:real)\\r\\n[\\r\\n    -73.956683, 40.807907,\\r\\n    -73.916869, 40.818314,\\r\\n    -73.989148, 40.743273,\\r\\n]\\r\\n| project h3_hash = geo_point_to_h3cell(lng, lat, 6)\\r\\n| project h3_hash_polygon = geo_h3cell_to_polygon(h3_hash)\\r\\n| summarize h3_hash_polygon_lst = make_list(h3_hash_polygon)\\r\\n| project pack(\\r\\n    \"type\", \"Feature\",\\r\\n    \"geometry\", pack(\"type\", \"GeometryCollection\", \"geometries\", h3_hash_polygon_lst),\\r\\n    \"properties\", pack(\"name\", \"H3 polygons collection\"))\\r\\n```\\r\\n\\r\\n|Column1|\\r\\n|---|\\r\\n|{<br>\"type\": \"Feature\",<br>\"geometry\": {\"type\": \"GeometryCollection\", \"geometries\": [{\"type\": \"Polygon\",\"coordinates\": [[[-73.9609635556213, 40.829061732419916], [-74.005691351383675, 40.821680937801922], [-74.019448383546617, 40.790439140236963], [-73.988522328408948, 40.766594382212254], [-73.943844904976629, 40.773964402038523], [-73.930043202964953, 40.805189944379514], [-73.9609635556213, 40.829061732419916] ]]},<br>{\"type\": \"Polygon\", \"coordinates\": [[[-73.902385078754875, 40.867671551513595], [-73.94715685019348, 40.860310688399885], [-73.9609635556213, 40.829061732419916], [-73.930043202964953, 40.805189944379514], [-73.885321931061725, 40.812540084842404 ], [-73.871470551071766, 40.843772725733125], [ -73.902385078754875, 40.867671551513595]]]},<br>{\"type\": \"Polygon\",\"coordinates\": [[[-73.943844904976629, 40.773964402038523], [-73.988522328408948, 40.766594382212254], [-74.0022744646159, 40.735376026215022], [-73.971393761028622, 40.71154393543933], [-73.926766604813565, 40.718903205013063], [ -73.912969923470314, 40.750105305345329 ], [-73.943844904976629, 40.773964402038523]]]}]<br>},<br>\"properties\": {\"name\": \"H3 polygons collection\"}<br>}|\\r\\n\\r\\nThe following example returns a null result because of the invalid H3 Cell token input.\\r\\n\\r\\n```\\r\\nprint geo_h3cell_to_polygon(\"@\")\\r\\n```\\r\\n\\r\\n|print_0|\\r\\n|---|\\r\\n||',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-h3cell-to-polygon-function\",\"geo-h3cell-to-polygon-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_intersection_2lines\",\"Calculates the intersection of two lines or multilines.\",'## Syntax\\r\\n\\r\\n`geo_intersection_2lines(`*lineString1*`, `*lineString2*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *lineString1*: Line or multiline in the [GeoJSON format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type.\\r\\n* *lineString2*: Line or multiline in the [GeoJSON format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type.\\r\\n\\r\\n## Returns\\r\\n\\r\\nIntersection in [GeoJSON Format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type. If LineString or a MultiLineString are invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n> * The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/GandG/update/index.php?action=home) coordinate reference system.\\r\\n> * The [geodetic datum](https://en.wikipedia.org/wiki/Geodetic_datum) used to measure distance on Earth is a sphere. Line edges are [geodesics](https://en.wikipedia.org/wiki/Geodesic) on the sphere.\\r\\n> * If input line edges are straight cartesian lines, consider using [geo_line_densify()](geo-line-densify-function.md) in order to convert planar edges to geodesics.\\r\\n\\r\\n**LineString definition and constraints**\\r\\n\\r\\ndynamic({\"type\": \"LineString\",\"coordinates\": [ [lng_1,lat_1], [lng_2,lat_2] ,..., [lng_N,lat_N] ]})\\r\\n\\r\\ndynamic({\"type\": \"MultiLineString\",\"coordinates\": [ [ line_1, line_2 ,..., line_N ] ]})\\r\\n\\r\\n* LineString coordinates array must contain at least two entries.\\r\\n* Coordinates [longitude,latitude] must be valid where longitude is a real number in the range [-180, +180] and latitude is a real number in the range [-90, +90].\\r\\n* Edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\\r\\n\\r\\n> [!TIP]\\r\\n> * Using literal LineString or a MultiLineString may result in better performance.','The following example calculates intersection between two lines. In this case, the result is a point.\\r\\n\\r\\n```\\r\\nlet lineString1 = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.978929,40.785155],[-73.980903,40.782621]]});\\r\\nlet lineString2 = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.985195,40.788275],[-73.974552,40.779761]]});\\r\\nprint intersection = geo_intersection_2lines(lineString1, lineString2)\\r\\n```\\r\\n\\r\\n|intersection|\\r\\n|---|\\r\\n|{\"type\": \"Point\",\"coordinates\": [-73.979837116670978,40.783989289772165]}|\\r\\n\\r\\nThe following example calculates intersection between two lines. In this case, the result is a line.\\r\\n\\r\\n```\\r\\nlet line = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.978929,40.785155],[-73.980903,40.782621]]});\\r\\nprint intersection = geo_intersection_2lines(line, line)\\r\\n```\\r\\n\\r\\n|intersection|\\r\\n|---|\\r\\n|{\"type\": \"LineString\",\"coordinates\": [[ -73.978929, 40.785155],[ -73.980903, 40.782621]]}|\\r\\n\\r\\nThe following two lines do not intersect.\\r\\n\\r\\n```\\r\\nlet lineString1 = dynamic({\"type\":\"LineString\",\"coordinates\":[[1, 1],[2, 2]]});\\r\\nlet lineString2 = dynamic({\"type\":\"LineString\",\"coordinates\":[[3, 3],[4, 4]]});\\r\\nprint intersection = geo_intersection_2lines(lineString1, lineString2)\\r\\n```\\r\\n\\r\\n|intersection|\\r\\n|---|\\r\\n|{\"type\": \"GeometryCollection\", \"geometries\": []}|\\r\\n\\r\\nThe following example will return a null result because one of lines is invalid.\\r\\n\\r\\n```\\r\\nlet lineString1 = dynamic({\"type\":\"LineString\",\"coordinates\":[[1, 1],[2, 2]]});\\r\\nlet lineString2 = dynamic({\"type\":\"LineString\",\"coordinates\":[[3, 3]]});\\r\\nprint invalid = isnull(geo_intersection_2lines(lineString1, lineString2))\\r\\n```\\r\\n\\r\\n|invalid|\\r\\n|---|\\r\\n|1|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-intersection-2lines-function\",\"geo-intersection-2lines-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_intersection_2polygons\",\"Calculates the intersection of two polygons or multipolygons.\",'## Syntax\\r\\n\\r\\n`geo_intersection_2polygons(`*polygon1*`, `*polygon1*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *polygon1*: Polygon or multipolygon in the [GeoJSON format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type.\\r\\n* *polygon2*: Polygon or multipolygon in the [GeoJSON format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type.\\r\\n\\r\\n## Returns\\r\\n\\r\\nIntersection in [GeoJSON Format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type. If Polygon or a MultiPolygon are invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n> * The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/GandG/update/index.php?action=home) coordinate reference system.\\r\\n> * The [geodetic datum](https://en.wikipedia.org/wiki/Geodetic_datum) used for measurements on Earth is a sphere. Polygon edges are [geodesics](https://en.wikipedia.org/wiki/Geodesic) on the sphere.\\r\\n> * If input polygon edges are straight cartesian lines, consider using [geo_polygon_densify()](geo-polygon-densify-function.md) to convert planar edges to geodesics.\\r\\n\\r\\n**Polygon definition and constraints**\\r\\n\\r\\ndynamic({\"type\": \"Polygon\",\"coordinates\": [ LinearRingShell, LinearRingHole_1 ,..., LinearRingHole_N ]})\\r\\n\\r\\ndynamic({\"type\": \"MultiPolygon\",\"coordinates\": [[ LinearRingShell, LinearRingHole_1 ,..., LinearRingHole_N ] ,..., [LinearRingShell, LinearRingHole_1 ,..., LinearRingHole_M]]})\\r\\n\\r\\n* LinearRingShell is required and defined as a `counterclockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be only one shell.\\r\\n* LinearRingHole is optional and defined as a `clockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be any number of interior rings and holes.\\r\\n* LinearRing vertices must be distinct with at least three coordinates. The first coordinate must be equal to the last. At least four entries are required.\\r\\n* Coordinates [longitude,latitude] must be valid. Longitude must be a real number in the range [-180, +180] and latitude must be a real number in the range [-90, +90].\\r\\n* LinearRingShell encloses at most half of the sphere. LinearRing divides the sphere into two regions. The smaller of the two regions will be chosen.\\r\\n* LinearRing edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\\r\\n* LinearRings must not cross and must not share edges. LinearRings may share vertices.\\r\\n* Polygon contains its vertices.\\r\\n\\r\\n> [!TIP]\\r\\n> * Using literal Polygon or a MultiPolygon may result in better performance.','The following example calculates intersection between two polygons. In this case, the result is a polygon.\\r\\n\\r\\n```\\r\\nlet polygon1 = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9630937576294,40.77498840732385],[-73.963565826416,40.774383111780914],[-73.96205306053162,40.773745311181585],[-73.96160781383514,40.7743912365898],[-73.9630937576294,40.77498840732385]]]});\\r\\nlet polygon2 = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.96213352680206,40.775045280447145],[-73.9631313085556,40.774578106920345],[-73.96207988262177,40.77416780398293],[-73.96213352680206,40.775045280447145]]]});\\r\\nprint intersection = geo_intersection_2polygons(polygon1, polygon2)\\r\\n```\\r\\n\\r\\n|intersection|\\r\\n|---|\\r\\n|{\"type\": \"Polygon\",  \"coordinates\": [[[-73.962105776437156,40.774591360999679],[-73.962642403166868,40.774807020251778],[-73.9631313085556,40.774578106920352],[-73.962079882621765,40.774167803982927],[-73.962105776437156,40.774591360999679]    ]  ]}|\\r\\n\\r\\nThe following example calculates intersection between two polygons. In this case, the result is a point.\\r\\n\\r\\n```\\r\\nlet polygon1 = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[2,45],[0,45],[1,44],[2,45]]]});\\r\\nlet polygon2 = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[3,44],[2,45],[2,43],[3,44]]]});\\r\\nprint intersection = geo_intersection_2polygons(polygon1, polygon2)\\r\\n```\\r\\n\\r\\n|intersection|\\r\\n|---|\\r\\n|{\"type\": \"Point\",\"coordinates\": [2,45]}|\\r\\n\\r\\nThe following two polygons intersection is a collection.\\r\\n\\r\\n```\\r\\nlet polygon1 = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[2,45],[0,45],[1,44],[2,45]]]});\\r\\nlet polygon2 = dynamic({\"type\":\"MultiPolygon\",\"coordinates\":[[[[3,44],[2,45],[2,43],[3,44]]],[[[1.192,45.265],[1.005,44.943],[1.356,44.937],[1.192,45.265]]]]});\\r\\nprint intersection = geo_intersection_2polygons(polygon1, polygon2)\\r\\n```\\r\\n\\r\\n|intersection|\\r\\n|---|\\r\\n|{\"type\": \"GeometryCollection\",\"geometries\": [<br>{ \"type\": \"Point\", \"coordinates\": [2, 45]},<br>{ \"type\": \"Polygon\", \"coordinates\": [[[1.3227075526410679,45.003909145068739],[1.0404565374899824,45.004356403066552],[1.005,44.943],[1.356,44.937],[1.3227075526410679,45.003909145068739]]]}]}|\\r\\n\\r\\nThe following two polygons do not intersect.\\r\\n\\r\\n```\\r\\nlet polygon1 = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[2,45],[0,45],[1,44],[2,45]]]});\\r\\nlet polygon2 = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[3,44],[3,45],[2,43],[3,44]]]});\\r\\nprint intersection = geo_intersection_2polygons(polygon1, polygon2)\\r\\n```\\r\\n\\r\\n|intersection|\\r\\n|---|\\r\\n|{\"type\": \"GeometryCollection\", \"geometries\": []}|\\r\\n\\r\\nThe following example finds all counties in USA which intersect with area of interest polygon.\\r\\n\\r\\n```\\r\\nlet area_of_interest = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.96213352680206,40.775045280447145],[-73.9631313085556,40.774578106920345],[-73.96207988262177,40.77416780398293],[-73.96213352680206,40.775045280447145]]]});\\r\\nUS_Counties\\r\\n| project name = features.properties.NAME, county = features.geometry\\r\\n| project name, intersection = geo_intersection_2polygons(county, area_of_interest)\\r\\n| where array_length(intersection.geometries) != 0\\r\\n```\\r\\n\\r\\n|name|intersection|\\r\\n|---|---|\\r\\n|New York|{\"type\": \"Polygon\",\"coordinates\": [[[-73.96213352680206, 40.775045280447145], [-73.9631313085556, 40.774578106920345], [-73.96207988262177,40.77416780398293],[-73.96213352680206, 40.775045280447145]]]}|\\r\\n\\r\\nThe following example will return a null result because one of the polygons is invalid.\\r\\n\\r\\n```\\r\\nlet central_park_polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9495,40.7969],[-73.95807266235352,40.80068603561921],[-73.98201942443848,40.76825672305777],[-73.97317886352539,40.76455136505513],[-73.9495,40.7969]]]});\\r\\nlet invalid_polygon = dynamic({\"type\":\"Polygon\"});\\r\\nprint isnull(geo_intersection_2polygons(invalid_polygon, central_park_polygon))\\r\\n```\\r\\n\\r\\n|print_0|\\r\\n|---|\\r\\n|1|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-intersection-2polygons-function\",\"geo-intersection-2polygons-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_intersection_line_with_polygon\",\"Calculates the intersection of line or multiline with polygon or multipolygon.\",'## Syntax\\r\\n\\r\\n`geo_intersection_line_with_polygon(`*lineString*`, `*polygon*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *lineString*: LineString or MultiLineString in the [GeoJSON format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type.\\r\\n* *polygon*: Polygon or MultiPolygon in the [GeoJSON format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type.\\r\\n\\r\\n## Returns\\r\\n\\r\\nIntersection in [GeoJSON Format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type. If lineString or a multiLineString or a polygon or a multipolygon are invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n> * The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/GandG/update/index.php?action=home) coordinate reference system.\\r\\n> * The [geodetic datum](https://en.wikipedia.org/wiki/Geodetic_datum) used to measure distance on Earth is a sphere. Line edges are [geodesics](https://en.wikipedia.org/wiki/Geodesic) on the sphere.\\r\\n> * If input line or a polygon edges are straight cartesian lines, consider using [geo_line_densify()](geo-line-densify-function.md) or a [geo_polygon_densify()](geo-polygon-densify-function.md) in order to convert planar edges to geodesics.\\r\\n\\r\\n**LineString definition and constraints**\\r\\n\\r\\ndynamic({\"type\": \"LineString\",\"coordinates\": [ [lng_1,lat_1], [lng_2,lat_2] ,..., [lng_N,lat_N] ]})\\r\\n\\r\\ndynamic({\"type\": \"MultiLineString\",\"coordinates\": [ [ line_1, line_2 ,..., line_N ] ]})\\r\\n\\r\\n* LineString coordinates array must contain at least two entries.\\r\\n* Coordinates [longitude,latitude] must be valid where longitude is a real number in the range [-180, +180] and latitude is a real number in the range [-90, +90].\\r\\n* Edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\\r\\n\\r\\n**Polygon definition and constraints**\\r\\n\\r\\ndynamic({\"type\": \"Polygon\",\"coordinates\": [ LinearRingShell, LinearRingHole_1 ,..., LinearRingHole_N ]})\\r\\n\\r\\ndynamic({\"type\": \"MultiPolygon\",\"coordinates\": [[ LinearRingShell, LinearRingHole_1 ,..., LinearRingHole_N ] ,..., [LinearRingShell, LinearRingHole_1 ,..., LinearRingHole_M]]})\\r\\n\\r\\n* LinearRingShell is required and defined as a `counterclockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be only one shell.\\r\\n* LinearRingHole is optional and defined as a `clockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be any number of interior rings and holes.\\r\\n* LinearRing vertices must be distinct with at least three coordinates. The first coordinate must be equal to the last. At least four entries are required.\\r\\n* Coordinates [longitude,latitude] must be valid. Longitude must be a real number in the range [-180, +180] and latitude must be a real number in the range [-90, +90].\\r\\n* LinearRingShell encloses at most half of the sphere. LinearRing divides the sphere into two regions. The smaller of the two regions will be chosen.\\r\\n* LinearRing edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\\r\\n* LinearRings must not cross and must not share edges. LinearRings may share vertices.\\r\\n* Polygon contains its vertices.\\r\\n\\r\\n> [!TIP]\\r\\n> * Using literal LineString or a MultiLineString or a Polygon or a MultiPolygon may result in better performance.','The following example calculates intersection between line and polygon. In this case, the result is a line.\\r\\n\\r\\n```\\r\\nlet lineString = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.985195,40.788275],[-73.974552,40.779761]]});\\r\\nlet polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9712905883789,40.78580561168767],[-73.98004531860352,40.775276834803655],[-73.97000312805176,40.77852663535664],[-73.9712905883789,40.78580561168767]]]});\\r\\nprint intersection = geo_intersection_line_with_polygon(lineString, polygon)\\r\\n```\\r\\n\\r\\n|intersection|\\r\\n|---|\\r\\n|{\"type\": \"LineString\",\"coordinates\": [[-73.975611956578192,40.78060906714618],[-73.974552,40.779761]]}|\\r\\n\\r\\nThe following example calculates intersection between line and polygon. In this case, the result is a multiline.\\r\\n\\r\\n```\\r\\nlet lineString = dynamic({\"type\":\"LineString\",\"coordinates\":[[-110.522, 39.198],[-91.428, 40.880]]});\\r\\nlet polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-90.263,36.738],[-102.041,45.274],[-109.335,36.527],[-90.263,36.738]],[[-100.393,41.705],[-103.139,38.925],[-97.558,39.113],[-100.393,41.705]]]});\\r\\nprint intersection = geo_intersection_line_with_polygon(lineString, polygon)\\r\\n```\\r\\n\\r\\n|intersection|\\r\\n|---|\\r\\n|{\"type\": \"MultiLineString\",\"coordinates\": [[[  -106.89353655881905,  39.769226209776306],[  -101.74448553679453,  40.373506008712525]],[[-99.136499431328858,  40.589336512699994],[-95.284527737311791,  40.799060242246348]]]}|\\r\\n\\r\\nThe following line and polygon do not intersect.\\r\\n\\r\\n```\\r\\nlet lineString = dynamic({\"type\":\"LineString\",\"coordinates\":[[1, 1],[2, 2]]});\\r\\nlet polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9712905883789,40.78580561168767],[-73.98004531860352,40.775276834803655],[-73.97000312805176,40.77852663535664],[-73.9712905883789,40.78580561168767]]]});\\r\\nprint intersection = geo_intersection_line_with_polygon(lineString, polygon)\\r\\n```\\r\\n\\r\\n|intersection|\\r\\n|---|\\r\\n|{\"type\": \"GeometryCollection\",\"geometries\": []}|\\r\\n\\r\\nThe following example finds all roads in NYC GeoJSON roads table which intersects with area of interest literal polygon.\\r\\n\\r\\n```\\r\\nlet area_of_interest = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.95768642425537,40.80065354924362],[-73.9582872390747,40.80089719667298],[-73.95869493484497,40.80050736035672],[-73.9580512046814,40.80019873831593],[-73.95768642425537,40.80065354924362]]]});\\r\\nNY_Manhattan_Roads\\r\\n| project name = features.properties.Label, road = features.geometry\\r\\n| project name, intersection = geo_intersection_line_with_polygon(road, area_of_interest)\\r\\n| where array_length(intersection.geometries) != 0\\r\\n```\\r\\n\\r\\n|name|intersection|\\r\\n|---|---|\\r\\n|CentralParkW|{\"type\":\"MultiLineString\",\"coordinates\":[[[-73.958295846836933,40.800316027289647],[-73.9582724,40.8003415]],[[-73.958413422194482,40.80037239620097],[-73.9584093,40.8003797]]]}|\\r\\n|FrederickDouglassCir|{\"type\":\"LineString\",\"coordinates\":[[-73.9579272943862,40.800751229494182],[-73.9579019,40.8007238],[-73.9578688,40.8006749],[-73.9578508,40.8006203],[-73.9578459,40.800570199999996],[-73.9578484,40.80053310000001],[-73.9578627,40.800486700000008],[-73.957913,40.800421100000008],[-73.9579668,40.8003923],[-73.9580189,40.80037260000001],[-73.9580543,40.8003616],[-73.9581237,40.8003395],[-73.9581778,40.8003365],[-73.9582724,40.8003415],[-73.958308,40.8003466],[-73.9583328,40.8003517],[-73.9583757,40.8003645],[-73.9584093,40.8003797],[-73.9584535,40.80041099999999],[-73.9584818,40.8004536],[-73.958507000000012,40.8004955],[-73.9585217,40.800562400000004],[-73.9585282,40.8006155],[-73.958416200000016,40.8007325],[-73.9583541,40.8007785],[-73.9582772,40.800811499999995],[-73.9582151,40.8008285],[-73.958145918999392,40.800839887820239]]}|\\r\\n|W110thSt|{\"type\":\"MultiLineString\",\"coordinates\":[[[-73.957828446036331,40.800476476316327],[-73.9578627,40.800486700000008]],[[-73.9585282,40.8006155],[-73.958565492035873,40.800631133466972]],[[-73.958416200000016,40.8007325],[-73.958446850928084,40.800744577466617]]]}|\\r\\n|WestDr|{\"type\":\"LineString\",\"coordinates\":[[-73.9580543,40.8003616],[-73.958009693938735,40.800250494588468]]}|\\r\\n\\r\\nThe following example finds all counties in USA which intersect with area of interest literal LineString.\\r\\n\\r\\n```\\r\\nlet area_of_interest = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.97159099578857,40.794513338780895],[-73.96738529205322,40.792758888618756],[-73.96978855133057,40.789769718601505]]});\\r\\nUS_Counties\\r\\n| project name = features.properties.NAME, county = features.geometry\\r\\n| project name, intersection = geo_intersection_line_with_polygon(area_of_interest, county)\\r\\n| where array_length(intersection.geometries) != 0\\r\\n```\\r\\n\\r\\n|name|intersection|\\r\\n|---|---|\\r\\n|New York|{\"type\": \"LineString\",\"coordinates\": [[-73.971590995788574, 40.794513338780895], [-73.967385292053223, 40.792758888618756],[-73.969788551330566, 40.789769718601512]]}|\\r\\n\\r\\nThe following example will return a null result because the LineString is invalid.\\r\\n\\r\\n```\\r\\nlet lineString = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.985195,40.788275]]});\\r\\nlet polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.95768642425537,40.80065354924362],[-73.9582872390747,40.80089719667298],[-73.95869493484497,40.80050736035672],[-73.9580512046814,40.80019873831593],[-73.95768642425537,40.80065354924362]]]});\\r\\nprint is_invalid = isnull(geo_intersection_2lines(lineString, polygon))\\r\\n```\\r\\n\\r\\n|is_invalid|\\r\\n|---|\\r\\n|1|\\r\\n\\r\\nThe following example will return a null result because the polygon is invalid.\\r\\n\\r\\n```\\r\\nlet lineString = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.97159099578857,40.794513338780895],[-73.96738529205322,40.792758888618756],[-73.96978855133057,40.789769718601505]]});\\r\\nlet polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[]});\\r\\nprint is_invalid = isnull(geo_intersection_2lines(lineString, polygon))\\r\\n```\\r\\n\\r\\n|is_invalid|\\r\\n|---|\\r\\n|1|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-intersection-line-with-polygon-function\",\"geo-intersection-line-with-polygon-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_intersects_2lines\",\"Calculates whether the two lines or multilines intersects.\",'## Syntax\\r\\n\\r\\n`geo_intersects_2lines(`*lineString1*`, `*lineString2*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *lineString1*: Line or multiline in the [GeoJSON format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type.\\r\\n* *lineString2*: Line or multiline in the [GeoJSON format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type.\\r\\n\\r\\n## Returns\\r\\n\\r\\nIndicates whether the two lines or multilines intersects. If lineString or a multiLineString are invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n> * The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/GandG/update/index.php?action=home) coordinate reference system.\\r\\n> * The [geodetic datum](https://en.wikipedia.org/wiki/Geodetic_datum) used to measure distance on Earth is a sphere. Line edges are [geodesics](https://en.wikipedia.org/wiki/Geodesic) on the sphere.\\r\\n> * If input line edges are straight cartesian lines, consider using [geo_line_densify()](geo-line-densify-function.md) in order to convert planar edges to geodesics.\\r\\n\\r\\n**LineString definition and constraints**\\r\\n\\r\\ndynamic({\"type\": \"LineString\",\"coordinates\": [ [lng_1,lat_1], [lng_2,lat_2] ,..., [lng_N,lat_N] ]})\\r\\n\\r\\ndynamic({\"type\": \"MultiLineString\",\"coordinates\": [ [ line_1, line_2 ,..., line_N ] ]})\\r\\n\\r\\n* LineString coordinates array must contain at least two entries.\\r\\n* Coordinates [longitude,latitude] must be valid where longitude is a real number in the range [-180, +180] and latitude is a real number in the range [-90, +90].\\r\\n* Edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\\r\\n\\r\\n> [!TIP]\\r\\n> * Using literal LineString or a MultiLineString may result in better performance.','The following example checks whether some two literal lines intersects.\\r\\n\\r\\n```\\r\\nlet lineString1 = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.978929,40.785155],[-73.980903,40.782621]]});\\r\\nlet lineString2 = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.985195,40.788275],[-73.974552,40.779761]]});\\r\\nprint intersects = geo_intersects_2lines(lineString1, lineString2)\\r\\n```\\r\\n\\r\\n|intersects|\\r\\n|---|\\r\\n|True|\\r\\n\\r\\nThe following example finds all roads in NYC GeoJSON roads table which intersects with some line of interest.\\r\\n\\r\\n```\\r\\nlet my_road = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.97892951965332,40.78515573551921],[-73.98090362548828,40.78262115769851]]});\\r\\nNY_Manhattan_Roads\\r\\n| project name = features.properties.Label, road = features.geometry\\r\\n| where geo_intersects_2lines(road, my_road)\\r\\n| project name\\r\\n```\\r\\n\\r\\n|name|\\r\\n|---|\\r\\n|Broadway|\\r\\n|W 78th St|\\r\\n|W 79th St|\\r\\n|W 80th St|\\r\\n|W 81st St|\\r\\n\\r\\nThe following example will return a null result because one of lines is invalid.\\r\\n\\r\\n```\\r\\nlet lineString1 = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.978929,40.785155],[-73.980903,40.782621]]});\\r\\nlet lineString2 = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.985195,40.788275]]});\\r\\nprint isnull(geo_intersects_2lines(lineString1, lineString2))\\r\\n```\\r\\n\\r\\n|print_0|\\r\\n|---|\\r\\n|True|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-intersects-2lines-function\",\"geo-intersects-2lines-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_intersects_2polygons\",\"Calculates whether the two polygons or multipolygons intersects.\",'## Syntax\\r\\n\\r\\n`geo_intersects_2polygons(`*polygon1*`, `*polygon1*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *polygon1*: Polygon or multipolygon in the [GeoJSON format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type.\\r\\n* *polygon2*: Polygon or multipolygon in the [GeoJSON format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type.\\r\\n\\r\\n## Returns\\r\\n\\r\\nIndicates whether the two polygons or a multipolygons intersects. If Polygon or a MultiPolygon are invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n> * The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/GandG/update/index.php?action=home) coordinate reference system.\\r\\n> * The [geodetic datum](https://en.wikipedia.org/wiki/Geodetic_datum) used for measurements on Earth is a sphere. Polygon edges are [geodesics](https://en.wikipedia.org/wiki/Geodesic) on the sphere.\\r\\n> * If input polygon edges are straight cartesian lines, consider using [geo_polygon_densify()](geo-polygon-densify-function.md) to convert planar edges to geodesics.\\r\\n\\r\\n**Polygon definition and constraints**\\r\\n\\r\\ndynamic({\"type\": \"Polygon\",\"coordinates\": [ LinearRingShell, LinearRingHole_1 ,..., LinearRingHole_N ]})\\r\\n\\r\\ndynamic({\"type\": \"MultiPolygon\",\"coordinates\": [[ LinearRingShell, LinearRingHole_1 ,..., LinearRingHole_N ] ,..., [LinearRingShell, LinearRingHole_1 ,..., LinearRingHole_M]]})\\r\\n\\r\\n* LinearRingShell is required and defined as a `counterclockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be only one shell.\\r\\n* LinearRingHole is optional and defined as a `clockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be any number of interior rings and holes.\\r\\n* LinearRing vertices must be distinct with at least three coordinates. The first coordinate must be equal to the last. At least four entries are required.\\r\\n* Coordinates [longitude,latitude] must be valid. Longitude must be a real number in the range [-180, +180] and latitude must be a real number in the range [-90, +90].\\r\\n* LinearRingShell encloses at most half of the sphere. LinearRing divides the sphere into two regions. The smaller of the two regions will be chosen.\\r\\n* LinearRing edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\\r\\n* LinearRings must not cross and must not share edges. LinearRings may share vertices.\\r\\n* Polygon contains its vertices.\\r\\n\\r\\n> [!TIP]\\r\\n> * Using literal Polygon or a MultiPolygon may result in better performance.','The following example checks whether some two literal polygons intersects.\\r\\n\\r\\n```\\r\\nlet polygon1 = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9630937576294,40.77498840732385],[-73.963565826416,40.774383111780914],[-73.96205306053162,40.773745311181585],[-73.96160781383514,40.7743912365898],[-73.9630937576294,40.77498840732385]]]});\\r\\nlet polygon2 = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.96213352680206,40.775045280447145],[-73.9631313085556,40.774578106920345],[-73.96207988262177,40.77416780398293],[-73.96213352680206,40.775045280447145]]]});\\r\\nprint geo_intersects_2polygons(polygon1, polygon2)\\r\\n```\\r\\n\\r\\n|print_0|\\r\\n|---|\\r\\n|True|\\r\\n\\r\\nThe following example finds all counties in USA which intersect with area of interest literal polygon.\\r\\n\\r\\n```\\r\\nlet area_of_interest = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.96213352680206,40.775045280447145],[-73.9631313085556,40.774578106920345],[-73.96207988262177,40.77416780398293],[-73.96213352680206,40.775045280447145]]]});\\r\\nUS_Counties\\r\\n| project name = features.properties.NAME, county = features.geometry\\r\\n| where geo_intersects_2polygons(county, area_of_interest)\\r\\n| project name\\r\\n```\\r\\n\\r\\n|name|\\r\\n|---|\\r\\n|New York|\\r\\n\\r\\nThe following example will return a null result because one of the polygons is invalid.\\r\\n\\r\\n```\\r\\nlet central_park_polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9495,40.7969],[-73.95807266235352,40.80068603561921],[-73.98201942443848,40.76825672305777],[-73.97317886352539,40.76455136505513],[-73.9495,40.7969]]]});\\r\\nlet invalid_polygon = dynamic({\"type\":\"Polygon\"});\\r\\nprint isnull(geo_intersects_2polygons(invalid_polygon, central_park_polygon))\\r\\n```\\r\\n\\r\\n|print_0|\\r\\n|---|\\r\\n|True|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-intersects-2polygons-function\",\"geo-intersects-2polygons-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_intersects_line_with_polygon\",\"Calculates whether the lines or multiline intersects with polygon or a multipolygon.\",'## Syntax\\r\\n\\r\\n`geo_intersects_line_with_polygon(`*lineString*`, `*polygon*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *lineString*: LineString or MultiLineString in the [GeoJSON format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type.\\r\\n* *polygon*: Polygon or MultiPolygon in the [GeoJSON format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type.\\r\\n\\r\\n## Returns\\r\\n\\r\\nIndicates whether the line or multiline intersects with polygon or a multipolygon. If lineString or a multiLineString or a polygon or a multipolygon are invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n> * The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/GandG/update/index.php?action=home) coordinate reference system.\\r\\n> * The [geodetic datum](https://en.wikipedia.org/wiki/Geodetic_datum) used to measure distance on Earth is a sphere. Line edges are [geodesics](https://en.wikipedia.org/wiki/Geodesic) on the sphere.\\r\\n> * If input line or a polygon edges are straight cartesian lines, consider using [geo_line_densify()](geo-line-densify-function.md) or a [geo_polygon_densify()](geo-polygon-densify-function.md) in order to convert planar edges to geodesics.\\r\\n\\r\\n**LineString definition and constraints**\\r\\n\\r\\ndynamic({\"type\": \"LineString\",\"coordinates\": [ [lng_1,lat_1], [lng_2,lat_2] ,..., [lng_N,lat_N] ]})\\r\\n\\r\\ndynamic({\"type\": \"MultiLineString\",\"coordinates\": [ [ line_1, line_2 ,..., line_N ] ]})\\r\\n\\r\\n* LineString coordinates array must contain at least two entries.\\r\\n* Coordinates [longitude,latitude] must be valid where longitude is a real number in the range [-180, +180] and latitude is a real number in the range [-90, +90].\\r\\n* Edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\\r\\n\\r\\n**Polygon definition and constraints**\\r\\n\\r\\ndynamic({\"type\": \"Polygon\",\"coordinates\": [ LinearRingShell, LinearRingHole_1 ,..., LinearRingHole_N ]})\\r\\n\\r\\ndynamic({\"type\": \"MultiPolygon\",\"coordinates\": [[ LinearRingShell, LinearRingHole_1 ,..., LinearRingHole_N ] ,..., [LinearRingShell, LinearRingHole_1 ,..., LinearRingHole_M]]})\\r\\n\\r\\n* LinearRingShell is required and defined as a `counterclockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be only one shell.\\r\\n* LinearRingHole is optional and defined as a `clockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be any number of interior rings and holes.\\r\\n* LinearRing vertices must be distinct with at least three coordinates. The first coordinate must be equal to the last. At least four entries are required.\\r\\n* Coordinates [longitude,latitude] must be valid. Longitude must be a real number in the range [-180, +180] and latitude must be a real number in the range [-90, +90].\\r\\n* LinearRingShell encloses at most half of the sphere. LinearRing divides the sphere into two regions. The smaller of the two regions will be chosen.\\r\\n* LinearRing edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\\r\\n* LinearRings must not cross and must not share edges. LinearRings may share vertices.\\r\\n* Polygon doesn\\'t necessarily contain its vertices.\\r\\n\\r\\n> [!TIP]\\r\\n> * Using literal LineString or a MultiLineString or a Polygon or a MultiPolygon may result in better performance.','The following example checks whether a literal LineString intersects with Polygon.\\r\\n\\r\\n```\\r\\nlet lineString = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.985195,40.788275],[-73.974552,40.779761]]});\\r\\nlet polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9712905883789,40.78580561168767],[-73.98004531860352,40.775276834803655],[-73.97000312805176,40.77852663535664],[-73.9712905883789,40.78580561168767]]]});\\r\\nprint intersects = geo_intersects_line_with_polygon(lineString, polygon)\\r\\n```\\r\\n\\r\\n|intersects|\\r\\n|---|\\r\\n|True|\\r\\n\\r\\nThe following example finds all roads in NYC GeoJSON roads table which intersects with area of interest literal polygon.\\r\\n\\r\\n```\\r\\nlet area_of_interest = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.95768642425537,40.80065354924362],[-73.9582872390747,40.80089719667298],[-73.95869493484497,40.80050736035672],[-73.9580512046814,40.80019873831593],[-73.95768642425537,40.80065354924362]]]});\\r\\nNY_Manhattan_Roads\\r\\n| project name = features.properties.Label, road = features.geometry\\r\\n| where geo_intersects_line_with_polygon(road, area_of_interest)\\r\\n| project name\\r\\n```\\r\\n\\r\\n|name|\\r\\n|---|\\r\\n|Central Park W|\\r\\n|Frederick Douglass Cir|\\r\\n|W 110th St|\\r\\n|West Dr|\\r\\n\\r\\nThe following example finds all counties in USA which intersect with area of interest literal LineString.\\r\\n\\r\\n```\\r\\nlet area_of_interest = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.97159099578857,40.794513338780895],[-73.96738529205322,40.792758888618756],[-73.96978855133057,40.789769718601505]]});\\r\\nUS_Counties\\r\\n| project name = features.properties.NAME, county = features.geometry\\r\\n| where geo_intersects_line_with_polygon(area_of_interest, county)\\r\\n| project name\\r\\n```\\r\\n\\r\\n|name|\\r\\n|---|\\r\\n|New York|\\r\\n\\r\\nThe following example will return a null result because the LineString is invalid.\\r\\n\\r\\n```\\r\\nlet lineString = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.985195,40.788275]]});\\r\\nlet polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.95768642425537,40.80065354924362],[-73.9582872390747,40.80089719667298],[-73.95869493484497,40.80050736035672],[-73.9580512046814,40.80019873831593],[-73.95768642425537,40.80065354924362]]]});\\r\\nprint isnull(geo_intersects_2lines(lineString, polygon))\\r\\n```\\r\\n\\r\\n|print_0|\\r\\n|---|\\r\\n|True|\\r\\n\\r\\nThe following example will return a null result because the polygon is invalid.\\r\\n\\r\\n```\\r\\nlet lineString = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.97159099578857,40.794513338780895],[-73.96738529205322,40.792758888618756],[-73.96978855133057,40.789769718601505]]});\\r\\nlet polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[]});\\r\\nprint isnull(geo_intersects_2lines(lineString, polygon))\\r\\n```\\r\\n\\r\\n|print_0|\\r\\n|---|\\r\\n|True|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-intersects-line-with-polygon-function\",\"geo-intersects-line-with-polygon-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_line_centroid\",\"Calculates the centroid of line or a multiline on Earth.\",'## Syntax\\r\\n\\r\\n`geo_line_centroid(`*lineString*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *lineString*: Line or multiline in the [GeoJSON format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe centroid coordinate values in [GeoJSON Format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type. If line or multiline are invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n> * The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/GandG/update/index.php?action=home) coordinate reference system.\\r\\n> * The [geodetic datum](https://en.wikipedia.org/wiki/Geodetic_datum) used to measure distance on Earth is a sphere. Line edges are [geodesics](https://en.wikipedia.org/wiki/Geodesic) on the sphere.\\r\\n> * If input line edges are straight cartesian lines, consider using [geo_line_densify()](geo-line-densify-function.md) in order to convert planar edges to geodesics.\\r\\n> * If input is a multiline and contains more than one line, the result will be the centroid of lines union.\\r\\n\\r\\n**LineString definition and constraints**\\r\\n\\r\\ndynamic({\"type\": \"LineString\",\"coordinates\": [ [lng_1,lat_1], [lng_2,lat_2] ,..., [lng_N,lat_N] ]})\\r\\n\\r\\ndynamic({\"type\": \"MultiLineString\",\"coordinates\": [ [ line_1, line_2 ,..., line_N ] ]})\\r\\n\\r\\n* LineString coordinates array must contain at least two entries.\\r\\n* Coordinates [longitude,latitude] must be valid where longitude is a real number in the range [-180, +180] and latitude is a real number in the range [-90, +90].\\r\\n* Edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.','The following example calculates line centroid.\\r\\n\\r\\n```\\r\\nlet line = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.95796, 40.80042], [-73.97317, 40.764486]]});\\r\\nprint centroid = geo_line_centroid(line);\\r\\n```\\r\\n\\r\\n|centroid|\\r\\n|---|\\r\\n|{\"type\": \"Point\", \"coordinates\": [-73.965567057230942, 40.782453249627416]}|\\r\\n\\r\\nThe following example calculates line centroid longitude.\\r\\n\\r\\n```\\r\\nlet line = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.95807266235352,40.800426144169315],[-73.94966125488281,40.79691751000055],[-73.97317886352539,40.764486356930334],[-73.98210525512695,40.76786669510221],[-73.96004676818848,40.7980870753293]]});\\r\\nprint centroid = geo_line_centroid(line)\\r\\n| project lng = centroid.coordinates[0]\\r\\n```\\r\\n\\r\\n|lng|\\r\\n|---|\\r\\n|-73.9660675626837|\\r\\n\\r\\nThe following example visualizes line centroid on a map.\\r\\n\\r\\n```\\r\\nlet line = dynamic({\"type\":\"MultiLineString\",\"coordinates\":[[[-73.95798683166502,40.800556090021466],[-73.98193359375,40.76819171855746]],[[-73.94940376281738,40.79691751000055],[-73.97317886352539,40.76435634049001]]]});\\r\\nprint centroid = geo_line_centroid(line)\\r\\n| render scatterchart with (kind = map)\\r\\n```\\r\\n\\r\\n![Screenshot of N Y C Central park line centroid.](images/geo-line-centroid-function/nyc-central-park-centroid.png)\\r\\nThe following example returns True because of the invalid line.\\r\\n\\r\\n```\\r\\nprint is_bad_line = isnull(geo_line_centroid(dynamic({\"type\":\"LineString\",\"coordinates\":[[1, 1]]})))\\r\\n```\\r\\n\\r\\n|is_bad_line|\\r\\n|---|\\r\\n|True|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-line-centroid-function\",\"geo-line-centroid-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_line_densify\",\"Converts planar line or multiline edges to geodesics by adding intermediate points.\",'## Syntax\\r\\n\\r\\n`geo_line_densify(`*lineString*`, `*tolerance*`)`\\r\\n\\r\\n`geo_line_densify(`*lineString*`, `*tolerance*`, `*preserve_crossing*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *lineString*: Line or multiline in the [GeoJSON format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type.\\r\\n* *tolerance*: An optional numeric that defines maximum distance in meters between the original planar edge and the converted geodesic edge chain. Supported values are in the range [0.1, 10000]. If unspecified, the default value `10` is used.\\r\\n* *preserve_crossing*: An optional boolean that preserves edge crossing over antimeridian. If unspecified, the default value `False` is used.\\r\\n\\r\\n## Returns\\r\\n\\r\\nDensified line in the [GeoJSON format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type. If either the line or tolerance is invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n> * The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/GandG/update/index.php?action=home) coordinate reference system.\\r\\n\\r\\n**LineString definition**\\r\\n\\r\\ndynamic({\"type\": \"LineString\",\"coordinates\": [ [lng_1,lat_1], [lng_2,lat_2] ,..., [lng_N,lat_N] ]})\\r\\n\\r\\ndynamic({\"type\": \"MultiLineString\",\"coordinates\": [ [ line_1, line_2 ,..., line_N ] ]})\\r\\n\\r\\n* LineString coordinates array must contain at least two entries.\\r\\n* The coordinates [longitude,latitude] must be valid. The longitude must be a real number in the range [-180, +180] and the latitude must be a real number in the range [-90, +90].\\r\\n* The edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\\r\\n\\r\\n**Constraints**\\r\\n\\r\\n* The maximum number of points in the densified line is limited to 10485760.\\r\\n* Storing lines in [dynamic](./scalar-data-types/dynamic.md) format has size limits.\\r\\n\\r\\n**Motivation**\\r\\n\\r\\n* [GeoJSON format](https://tools.ietf.org/html/rfc7946) defines an edge between two points as a straight cartesian line while Azure Data Explorer uses [geodesic](https://en.wikipedia.org/wiki/Geodesic).\\r\\n* The decision to use geodesic or planar edges might depend on the dataset and is especially relevant in long edges.','The following example densifies a road in Manhattan island. The edge is short and the distance between the planar edge and its geodesic counterpart is less than the distance specified by tolerance. As such, the result remains unchanged.\\r\\n\\r\\n```\\r\\nprint densified_line = tostring(geo_line_densify(dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.949247, 40.796860],[-73.973017, 40.764323]]})))\\r\\n```\\r\\n\\r\\n|densified_line|\\r\\n|---|\\r\\n|{\"type\":\"LineString\",\"coordinates\":[[-73.949247, 40.796860], [-73.973017, 40.764323]]}|\\r\\n\\r\\nThe following example densifies an edge of ~130 km length\\r\\n\\r\\n```\\r\\nprint densified_line = tostring(geo_line_densify(dynamic({\"type\":\"LineString\",\"coordinates\":[[50, 50], [51, 51]]})))\\r\\n```\\r\\n\\r\\n|densified_line|\\r\\n|---|\\r\\n|{\"type\":\"LineString\",\"coordinates\":[[50,50],[50.125,50.125],[50.25,50.25],[50.375,50.375],[50.5,50.5],[50.625,50.625],[50.75,50.75],[50.875,50.875],[51,51]]}|\\r\\n\\r\\nThe following example returns a null result because of the invalid coordinate input.\\r\\n\\r\\n```\\r\\nprint densified_line = geo_line_densify(dynamic({\"type\":\"LineString\",\"coordinates\":[[300,1],[1,1]]}))\\r\\n```\\r\\n\\r\\n|densified_line|\\r\\n|---|\\r\\n||\\r\\n\\r\\nThe following example returns a null result because of the invalid tolerance input.\\r\\n\\r\\n```\\r\\nprint densified_line = geo_line_densify(dynamic({\"type\":\"LineString\",\"coordinates\":[[1,1],[2,2]]}), 0)\\r\\n```\\r\\n\\r\\n|densified_line|\\r\\n|---|\\r\\n||',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-line-densify-function\",\"geo-line-densify-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_line_length\",\"Calculates the total length of line or a multiline on Earth.\",'## Syntax\\r\\n\\r\\n`geo_line_length(`*lineString*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *lineString*: Line or multiline in the [GeoJSON format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe total length of a line or a multiline, in meters, on Earth. If line or multiline are invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n> * The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/GandG/update/index.php?action=home) coordinate reference system.\\r\\n> * The [geodetic datum](https://en.wikipedia.org/wiki/Geodetic_datum) used to measure distance on Earth is a sphere. Line edges are [geodesics](https://en.wikipedia.org/wiki/Geodesic) on the sphere.\\r\\n> * If input line edges are straight cartesian lines, consider using [geo_line_densify()](geo-line-densify-function.md) in order to convert planar edges to geodesics.\\r\\n> * If input is a multiline and contains more than one line, the result will be total length of lines union.\\r\\n\\r\\n**LineString definition and constraints**\\r\\n\\r\\ndynamic({\"type\": \"LineString\",\"coordinates\": [ [lng_1,lat_1], [lng_2,lat_2] ,..., [lng_N,lat_N] ]})\\r\\n\\r\\ndynamic({\"type\": \"MultiLineString\",\"coordinates\": [ [ line_1, line_2 ,..., line_N ] ]})\\r\\n\\r\\n* LineString coordinates array must contain at least two entries.\\r\\n* Coordinates [longitude,latitude] must be valid where longitude is a real number in the range [-180, +180] and latitude is a real number in the range [-90, +90].\\r\\n* Edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.','The following example calculates total line length, in meters.\\r\\n\\r\\n```\\r\\nlet line = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.95807266235352,40.800426144169315],[-73.94966125488281,40.79691751000055],[-73.97317886352539,40.764486356930334]]});\\r\\nprint length = geo_line_length(line)\\r\\n```\\r\\n\\r\\n|length|\\r\\n|---|\\r\\n|4922.48016992081|\\r\\n\\r\\nThe following example calculates total multiline length, in meters.\\r\\n\\r\\n```\\r\\nlet line = dynamic({\"type\":\"MultiLineString\",\"coordinates\":[[[-73.95798683166502,40.800556090021466],[-73.98193359375,40.76819171855746]],[[-73.94940376281738,40.79691751000055],[-73.97317886352539,40.76435634049001]]]});\\r\\nprint length = geo_line_length(line)\\r\\n```\\r\\n\\r\\n|length|\\r\\n|---|\\r\\n|8262.24339753741|\\r\\n\\r\\nThe following example returns True because of the invalid line.\\r\\n\\r\\n```\\r\\nprint is_bad_line = isnull(geo_line_length(dynamic({\"type\":\"LineString\",\"coordinates\":[[1, 1]]})))\\r\\n```\\r\\n\\r\\n|is_bad_line|\\r\\n|---|\\r\\n|True|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-line-length-function\",\"geo-line-length-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_line_simplify\",\"Simplifies line or a multiline by replacing nearly straight chains of short edges with a single long edge on Earth.\",'## Syntax\\r\\n\\r\\n`geo_line_simplify(`*lineString*`, `*tolerance*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *lineString*: Line or multiline in the [GeoJSON format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type.\\r\\n* *tolerance*: An optional numeric that defines minimum distance in meters between any two vertices. Supported values are in the range [0, ~7,800,000 meters). If unspecified, the default value `10` is used.\\r\\n\\r\\n## Returns\\r\\n\\r\\nSimplified line or a multiline in the [GeoJSON format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type, with no two vertices with distance less than tolerance. If either the line or tolerance is invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n> * The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/GandG/update/index.php?action=home) coordinate reference system.\\r\\n> * The [geodetic datum](https://en.wikipedia.org/wiki/Geodetic_datum) used to measure distance on Earth is a sphere. Line edges are [geodesics](https://en.wikipedia.org/wiki/Geodesic) on the sphere.\\r\\n> * If input line edges are straight cartesian lines, consider using [geo_line_densify()](geo-line-densify-function.md) in order to convert planar edges to geodesics.\\r\\n> * If input is a multiline and contains more than one line, the result will be simplification of lines union.\\r\\n> * High tolerance may cause small line to disappear.\\r\\n\\r\\n**LineString definition and constraints**\\r\\n\\r\\ndynamic({\"type\": \"LineString\",\"coordinates\": [ [lng_1,lat_1], [lng_2,lat_2] ,..., [lng_N,lat_N] ]})\\r\\n\\r\\ndynamic({\"type\": \"MultiLineString\",\"coordinates\": [ [ line_1, line_2 ,..., line_N ] ]})\\r\\n\\r\\n* LineString coordinates array must contain at least two entries.\\r\\n* Coordinates [longitude,latitude] must be valid where longitude is a real number in the range [-180, +180] and latitude is a real number in the range [-90, +90].\\r\\n* Edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.','The following example simplifies line by removing vertices that are within 10 meters distance from each other.\\r\\n\\r\\n```\\r\\nlet line = dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.97033169865608,40.789063020152824],[-73.97039607167244,40.78897975920816],[-73.9704617857933,40.78888837512432],[-73.97052884101868,40.7887949601531],[-73.9706052839756,40.788698498903564],[-73.97065222263336,40.78862640672032],[-73.97072866559029,40.78852791445617],[-73.97079303860664,40.788434498977836]]});\\r\\nprint simplified = geo_line_simplify(line, 10)\\r\\n```\\r\\n\\r\\n|simplified|\\r\\n|---|\\r\\n|{\"type\": \"LineString\", \"coordinates\": [[-73.97033169865608, 40.789063020152824], [-73.97079303860664, 40.788434498977836]]}|\\r\\n\\r\\nThe following example simplifies lines and combines results into GeoJSON geometry collection.\\r\\n\\r\\n```\\r\\nNY_Manhattan_Roads\\r\\n| project road = features.geometry\\r\\n| project road_simplified = geo_line_simplify(road, 100)\\r\\n| summarize roads_lst = make_list(road_simplified)\\r\\n| project geojson = pack(\"type\", \"Feature\",\"geometry\", pack(\"type\", \"GeometryCollection\", \"geometries\", roads_lst), \"properties\", pack(\"name\", \"roads\"))\\r\\n```\\r\\n\\r\\n|geojson|\\r\\n|---|\\r\\n|{\"type\": \"Feature\", \"geometry\": {\"type\": \"GeometryCollection\", \"geometries\": [ ... ]}, \"properties\": {\"name\": \"roads\"}}|\\r\\n\\r\\nThe following example simplifies lines and unifies result\\r\\n\\r\\n```\\r\\nNY_Manhattan_Roads\\r\\n| project road = features.geometry\\r\\n| project road_simplified = geo_line_simplify(road, 100)\\r\\n| summarize roads_lst = make_list(road_simplified)\\r\\n| project roads = geo_union_lines_array(roads_lst)\\r\\n```\\r\\n\\r\\n|roads|\\r\\n|---|\\r\\n|{\"type\": \"MultiLineString\", \"coordinates\": [ ... ]}|\\r\\n\\r\\nThe following example returns True because of the invalid line.\\r\\n\\r\\n```\\r\\nprint is_invalid_line = isnull(geo_line_simplify(dynamic({\"type\":\"LineString\",\"coordinates\":[[1, 1]]})))\\r\\n```\\r\\n\\r\\n|is_invalid_line|\\r\\n|---|\\r\\n|True|\\r\\n\\r\\nThe following example returns True because of the invalid tolerance.\\r\\n\\r\\n```\\r\\nprint is_invalid_line = isnull(geo_line_simplify(dynamic({\"type\":\"LineString\",\"coordinates\":[[1, 1],[2,2]]}), -1))\\r\\n```\\r\\n\\r\\n|is_invalid_line|\\r\\n|---|\\r\\n|True|\\r\\n\\r\\nThe following example returns True because high tolerance causes small line to disappear.\\r\\n\\r\\n```\\r\\nprint is_invalid_line = isnull(geo_line_simplify(dynamic({\"type\":\"LineString\",\"coordinates\":[[1.1, 1.1],[1.2,1.2]]}), 100000))\\r\\n```\\r\\n\\r\\n|is_invalid_line|\\r\\n|---|\\r\\n|True|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-line-simplify-function\",\"geo-line-simplify-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_point_in_circle\",\"Calculates whether the geospatial coordinates are inside a circle on Earth.\",\"## Syntax\\r\\n\\r\\n`geo_point_in_circle(`*p_longitude*`, `*p_latitude*`, `*pc_longitude*`, `*pc_latitude*`, `*c_radius*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *p_longitude*: Geospatial coordinate longitude value in degrees. Valid value is a real number and in the range [-180, +180].\\r\\n* *p_latitude*: Geospatial coordinate latitude value in degrees. Valid value is a real number and in the range [-90, +90].\\r\\n* *pc_longitude*: Circle center geospatial coordinate longitude value in degrees. Valid value is a real number and in the range [-180, +180].\\r\\n* *pc_latitude*: circle center geospatial coordinate latitude value in degrees. Valid value is a real number and in the range [-90, +90].\\r\\n* *c_radius*: Circle radius in meters. Valid value must be positive.\\r\\n\\r\\n## Returns\\r\\n\\r\\nIndicates whether the geospatial coordinates are inside a circle. If the coordinates or circle is invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n>* The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/GandG/update/index.php?action=home) coordinate reference system.\\r\\n>* The [geodetic datum](https://en.wikipedia.org/wiki/Geodetic_datum) used to measure distance on Earth is a sphere.\\r\\n>* A circle is a spherical cap on Earth. The radius of the cap is measured along the surface of the sphere.\",\"The following query finds all the places in the area defined by the following circle: Radius of 18 km, center at [-122.317404, 47.609119] coordinates.\\r\\n\\r\\n![Places near Seattle.](images/geo-point-in-circle-function/circle-seattle.png)\\r\\n\\r\\n```\\r\\ndatatable(longitude:real, latitude:real, place:string)\\r\\n[\\r\\n    real(-122.317404), 47.609119, 'Seattle',                   // In circle \\r\\n    real(-123.497688), 47.458098, 'Olympic National Forest',   // In exterior of circle  \\r\\n    real(-122.201741), 47.677084, 'Kirkland',                  // In circle\\r\\n    real(-122.443663), 47.247092, 'Tacoma',                    // In exterior of circle\\r\\n    real(-122.121975), 47.671345, 'Redmond',                   // In circle\\r\\n]\\r\\n| where geo_point_in_circle(longitude, latitude, -122.317404, 47.609119, 18000)\\r\\n| project place\\r\\n```\\r\\n\\r\\n|place|\\r\\n|---|\\r\\n|Seattle|\\r\\n|Kirkland|\\r\\n|Redmond|\\r\\n\\r\\nStorm events in Orlando. The events are filtered by 100 km within Orlando coordinates, and aggregated by event type and hash.\\r\\n\\r\\n![Storm events in Orlando.](images/geo-point-in-circle-function/orlando-storm-events.png)\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| project BeginLon, BeginLat, EventType\\r\\n| where geo_point_in_circle(BeginLon, BeginLat, real(-81.3891), 28.5346, 1000 * 100)\\r\\n| summarize count() by EventType, hash = geo_point_to_s2cell(BeginLon, BeginLat)\\r\\n| project geo_s2cell_to_central_point(hash), EventType, count_\\r\\n| render piechart with (kind=map) // map pie rendering available in Kusto Explorer desktop\\r\\n```\\r\\n\\r\\nThe following example shows NY Taxi pickups within 10 meters of a particular location. Relevant pickups are aggregated by hash.\\r\\n\\r\\n![NY Taxi nearby Pickups.](images/geo-point-in-circle-function/circle-junction.png)\\r\\n\\r\\n```\\r\\nnyc_taxi\\r\\n| project pickup_longitude, pickup_latitude\\r\\n| where geo_point_in_circle( pickup_longitude, pickup_latitude, real(-73.9928), 40.7429, 10)\\r\\n| summarize by hash = geo_point_to_s2cell(pickup_longitude, pickup_latitude, 22)\\r\\n| project geo_s2cell_to_central_point(hash)\\r\\n| render scatterchart with (kind = map)\\r\\n```\\r\\n\\r\\nThe following example will return true.\\r\\n\\r\\n```\\r\\nprint in_circle = geo_point_in_circle(-122.143564, 47.535677, -122.100896, 47.527351, 3500)\\r\\n```\\r\\n\\r\\n|in_circle|\\r\\n|---|\\r\\n|1|\\r\\n\\r\\nThe following example will return false.\\r\\n\\r\\n```\\r\\nprint in_circle = geo_point_in_circle(-122.137575, 47.630683, -122.100896, 47.527351, 3500)\\r\\n```\\r\\n\\r\\n|in_circle|\\r\\n|---|\\r\\n|0|\\r\\n\\r\\nThe following example will return a null result because of the invalid coordinate input.\\r\\n\\r\\n```\\r\\nprint in_circle = geo_point_in_circle(200, 1, 1, 1, 1)\\r\\n```\\r\\n\\r\\n|in_circle|\\r\\n|---|\\r\\n||\\r\\n\\r\\nThe following example will return a  null result because of the invalid circle radius input.\\r\\n\\r\\n```\\r\\nprint in_circle = geo_point_in_circle(1, 1, 1, 1, -1)\\r\\n```\\r\\n\\r\\n|in_circle|\\r\\n|---|\\r\\n||\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-point-in-circle-function\",\"geo-point-in-circle-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_point_in_polygon\",\"Calculates whether the geospatial coordinates are inside a polygon or a multipolygon on Earth.\",'## Syntax\\r\\n\\r\\n`geo_point_in_polygon(`*longitude*`, `*latitude*`, `*polygon*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *longitude*: Geospatial coordinate, longitude value in degrees. Valid value is a real number and in the range [-180, +180].\\r\\n* *latitude*: Geospatial coordinate, latitude value in degrees. Valid value is a real number and in the range [-90, +90].\\r\\n* *polygon*: Polygon or multipolygon in the [GeoJSON format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type.\\r\\n\\r\\n## Returns\\r\\n\\r\\nIndicates whether the geospatial coordinates are inside a polygon. If the coordinates or polygon is invalid, the query will produce a null result. \\r\\n\\r\\n> [!NOTE]\\r\\n> * The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/GandG/update/index.php?action=home) coordinate reference system.\\r\\n> * The [geodetic datum](https://en.wikipedia.org/wiki/Geodetic_datum) used for measurements on Earth is a sphere. Polygon edges are [geodesics](https://en.wikipedia.org/wiki/Geodesic) on the sphere.\\r\\n> * If input polygon edges are straight cartesian lines, consider using [geo_polygon_densify()](geo-polygon-densify-function.md) to convert planar edges to geodesics.\\r\\n\\r\\n**Polygon definition and constraints**\\r\\n\\r\\ndynamic({\"type\": \"Polygon\",\"coordinates\": [ LinearRingShell, LinearRingHole_1 ,..., LinearRingHole_N ]})\\r\\n\\r\\ndynamic({\"type\": \"MultiPolygon\",\"coordinates\": [[ LinearRingShell, LinearRingHole_1 ,..., LinearRingHole_N ] ,..., [LinearRingShell, LinearRingHole_1 ,..., LinearRingHole_M]]})\\r\\n\\r\\n* LinearRingShell is required and defined as a `counterclockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be only one shell.\\r\\n* LinearRingHole is optional and defined as a `clockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be any number of interior rings and holes.\\r\\n* LinearRing vertices must be distinct with at least three coordinates. The first coordinate must be equal to the last. At least four entries are required.\\r\\n* Coordinates [longitude,latitude] must be valid. Longitude must be a real number in the range [-180, +180] and latitude must be a real number in the range [-90, +90].\\r\\n* LinearRingShell encloses at most half of the sphere. LinearRing divides the sphere into two regions. The smaller of the two regions will be chosen.\\r\\n* LinearRing edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\\r\\n* LinearRings must not cross and must not share edges. LinearRings may share vertices.\\r\\n* Polygon doesn\\'t necessarily contain its vertices. Point containment in polygon is defined so that if the Earth is subdivided into polygons, every point is contained by exactly one polygon.\\r\\n\\r\\n> [!TIP]\\r\\n> * Using literal Polygon or a MultiPolygon may result in better performance.\\r\\n> * If you want to know if any of the polygons contains a point, try the following steps: Fold the collection of polygons into one multipolygon. Then query this multipolygon. This may improve performance. See the example below.','Manhattan island without Central Park.\\r\\n\\r\\n![Screenshot of a map of the Manhattan area, with markers for a landmark, a museum, and an airport. The island appears dimmed except for Central Park.](images/geo-point-in-polygon-function/polygon-manhattan-with-hole.png)\\r\\n\\r\\n```\\r\\ndatatable(longitude:real, latitude:real, description:string)\\r\\n[\\r\\n    real(-73.985654), 40.748487, \\'Empire State Building\\',           // In Polygon \\r\\n    real(-73.963249), 40.779525, \\'The Metropolitan Museum of Art\\',  // In exterior of polygon\\r\\n    real(-73.874367), 40.777356, \\'LaGuardia Airport\\',               // In exterior of polygon\\r\\n]\\r\\n| where geo_point_in_polygon(longitude, latitude, dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.92597198486328,40.87821814104651],[-73.94691467285156,40.85069618625578],[-73.94691467285156,40.841865966890786],[-74.01008605957031,40.7519385984599],[-74.01866912841797,40.704586878965245],[-74.01214599609375,40.699901911003046],[-73.99772644042969,40.70875101828792],[-73.97747039794922,40.71083299030839],[-73.97026062011719,40.7290474687069],[-73.97506713867186,40.734510840309376],[-73.970947265625,40.74543623770158],[-73.94210815429688,40.77586181063573],[-73.9434814453125,40.78080140115127],[-73.92974853515625,40.79691751000055],[-73.93077850341797,40.804454347291006],[-73.93489837646484,40.80965166748853],[-73.93524169921875,40.837190668541105],[-73.92288208007812,40.85770758108904],[-73.9101791381836,40.871728144624974],[-73.92597198486328,40.87821814104651]],[[-73.95824432373047,40.80071852197889],[-73.98206233978271,40.76815921628347],[-73.97309303283691,40.76422632379533],[-73.94914627075195,40.796949998204596],[-73.95824432373047,40.80071852197889]]]}))\\r\\n```\\r\\n\\r\\n|longitude|latitude|description|\\r\\n|---|---|---|\\r\\n|-73.985654|40.748487|Empire State Building|\\r\\n\\r\\nSearch for coordinates in multipolygon.\\r\\n\\r\\n![Screenshot of a map of the Manhattan area, with markers for the Upper West Side, Greenwich Village, and an airport. Three neighborhoods appear dimmed.](images/geo-point-in-polygon-function/multipolygon-manhattan.png)\\r\\n\\r\\n```\\r\\nlet multipolygon = dynamic({\"type\":\"MultiPolygon\",\"coordinates\":[[[[-73.991460000000131,40.731738000000206],[-73.992854491775518,40.730082566051351],[-73.996772,40.725432000000154],[-73.997634685522883,40.725786309886963],[-74.002855946639244,40.728346630056791],[-74.001413,40.731065000000207],[-73.996796995070824,40.73736378205173],[-73.991724524037934,40.735245208931886],[-73.990703782359589,40.734781896080477],[-73.991460000000131,40.731738000000206]]],[[[-73.958357552055688,40.800369095633819],[-73.98143901556422,40.768762584141953],[-73.981548752788598,40.7685590292784],[-73.981565335901905,40.768307084720796],[-73.981754418060945,40.768399727738668],[-73.982038573548124,40.768387823012056],[-73.982268248204349,40.768298621883247],[-73.982384797518051,40.768097213086911],[-73.982320919746599,40.767894461792181],[-73.982155532845766,40.767756204474757],[-73.98238873834039,40.767411004834273],[-73.993650353659021,40.772145571634361],[-73.99415893763998,40.772493009137818],[-73.993831082030937,40.772931787850908],[-73.993891252437052,40.772955194876722],[-73.993962585514595,40.772944653908901],[-73.99401262480508,40.772882846631894],[-73.994122058082397,40.77292405902601],[-73.994136652588594,40.772901870174394],[-73.994301342391154,40.772970028663913],[-73.994281535134448,40.77299380206933],[-73.994376552751078,40.77303955110149],[-73.994294029824005,40.773156243992048],[-73.995023275860802,40.773481196576356],[-73.99508939189289,40.773388475039134],[-73.995013963716758,40.773358035426909],[-73.995050284699261,40.773297153189958],[-73.996240651898916,40.773789791397689],[-73.996195837470992,40.773852356184044],[-73.996098807369748,40.773951805299085],[-73.996179459973888,40.773986954351571],[-73.996095245226442,40.774086186437756],[-73.995572265161172,40.773870731394297],[-73.994017424135961,40.77321375261053],[-73.993935876811335,40.773179512586211],[-73.993861942928888,40.773269531698837],[-73.993822393527211,40.773381758622882],[-73.993767019318497,40.773483981224835],[-73.993698463744295,40.773562141052594],[-73.993358326468751,40.773926888327956],[-73.992622663865575,40.774974056037109],[-73.992577842766124,40.774956016359418],[-73.992527743951555,40.775002110439829],[-73.992469745815342,40.775024159551755],[-73.992403837191887,40.775018140390664],[-73.99226708903538,40.775116033858794],[-73.99217809026365,40.775279293897171],[-73.992059084937338,40.775497598192516],[-73.992125372394938,40.775509075053385],[-73.992226867797001,40.775482211026116],[-73.992329346608813,40.775468900958522],[-73.992361756801131,40.775501899766638],[-73.992386042960277,40.775557180424634],[-73.992087684712729,40.775983970821372],[-73.990927174149746,40.777566878763238],[-73.99039616003671,40.777585065679204],[-73.989461267506471,40.778875124584417],[-73.989175778438053,40.779287524015778],[-73.988868617400072,40.779692922911607],[-73.988871874499793,40.779713738253008],[-73.989219022880576,40.779697895209402],[-73.98927785904425,40.779723439271038],[-73.989409054180143,40.779737706471963],[-73.989498614927044,40.779725044389757],[-73.989596493388234,40.779698146683387],[-73.989679812902509,40.779677568658038],[-73.989752702937935,40.779671244211556],[-73.989842247806507,40.779680752670664],[-73.990040102120489,40.779707677698219],[-73.990137977524839,40.779699769704784],[-73.99033584033225,40.779661794394983],[-73.990430598697046,40.779664973055503],[-73.990622199396725,40.779676064914298],[-73.990745069505479,40.779671328184051],[-73.990872114282197,40.779646007643876],[-73.990961672224358,40.779639683751753],[-73.991057472829539,40.779652352625774],[-73.991157429497036,40.779669775606465],[-73.991242817404469,40.779671367084504],[-73.991255318289745,40.779650782516491],[-73.991294887120119,40.779630209208889],[-73.991321967649895,40.779631796041372],[-73.991359455569423,40.779585883337383],[-73.991551059227476,40.779574821437407],[-73.99141982585985,40.779755280287233],[-73.988886144117032,40.779878898532999],[-73.988939656706265,40.779956178440393],[-73.988926103530844,40.780059292013632],[-73.988911680264692,40.780096037146606],[-73.988919261468567,40.780226094343945],[-73.988381050202634,40.780981074045783],[-73.988232413846987,40.781233144215555],[-73.988210420831663,40.781225482542055],[-73.988140000000143,40.781409000000224],[-73.988041288067166,40.781585961353777],[-73.98810029382463,40.781602878305286],[-73.988076449145055,40.781650935001608],[-73.988018059972219,40.781634188810422],[-73.987960792842145,40.781770987031535],[-73.985465811970457,40.785360700575431],[-73.986172704965611,40.786068452258647],[-73.986455862401996,40.785919219081421],[-73.987072345615601,40.785189638820121],[-73.98711901394276,40.785210319004058],[-73.986497781023601,40.785951202887254],[-73.986164628806279,40.786121882448327],[-73.986128422486075,40.786239001331111],[-73.986071135219746,40.786240706026611],[-73.986027274789123,40.786228964236727],[-73.986097637849426,40.78605822569795],[-73.985429321269592,40.785413942184597],[-73.985081137732209,40.785921935110366],[-73.985198833254501,40.785966552197777],[-73.985170502389906,40.78601333415817],[-73.985216218673656,40.786030501816427],[-73.98525509797993,40.785976205511588],[-73.98524273937646,40.785972572653328],[-73.98524962933017,40.785963139855845],[-73.985281779186749,40.785978620950075],[-73.985240032884533,40.786035858136792],[-73.985683885242182,40.786222123919686],[-73.985717529004575,40.786175994668795],[-73.985765660297687,40.786196274858618],[-73.985682871922691,40.786309786213067],[-73.985636270930442,40.786290150649279],[-73.985670722564691,40.786242911993817],[-73.98520511880038,40.786047669212785],[-73.985211035607492,40.786039554883686],[-73.985162639946992,40.786020999769754],[-73.985131636312062,40.786060297019972],[-73.985016964065125,40.78601423719563],[-73.984655078830457,40.786534741807841],[-73.985743787901043,40.786570082854738],[-73.98589227228328,40.786426529019593],[-73.985942854994988,40.786452847880334],[-73.985949561556794,40.78648711396653],[-73.985812373526713,40.786616865357047],[-73.985135209703174,40.78658761889551],[-73.984619428584324,40.786586016349787],[-73.981952458164173,40.790393724337193],[-73.972823037363767,40.803428052816756],[-73.971036786332192,40.805918478839672],[-73.966701,40.804169000000186],[-73.959647,40.801156000000113],[-73.958508540159471,40.800682279767472],[-73.95853274080838,40.800491362464697],[-73.958357552055688,40.800369095633819]]],[[[-73.943592454622546,40.782747908206574],[-73.943648235390199,40.782656161333449],[-73.943870759887162,40.781273026571704],[-73.94345932494096,40.780048275653243],[-73.943213862652243,40.779317588660199],[-73.943004239504688,40.779639495474292],[-73.942716005450905,40.779544169476175],[-73.942712374762181,40.779214856940001],[-73.942535563208608,40.779090956062532],[-73.942893408188027,40.778614093246276],[-73.942438481745029,40.777315235766039],[-73.942244919522594,40.777104088947254],[-73.942074188038887,40.776917846977142],[-73.942002667222781,40.776185317382648],[-73.942620205199006,40.775180871576474],[-73.94285645694552,40.774796600349191],[-73.94293043781397,40.774676268036011],[-73.945870899588215,40.771692257932997],[-73.946618690150586,40.77093339256956],[-73.948664164778933,40.768857624399587],[-73.950069793030679,40.767025088383498],[-73.954418260786071,40.762184104951245],[-73.95650786241211,40.760285256574043],[-73.958787773424007,40.758213471309809],[-73.973015157270069,40.764278692864671],[-73.955760332998182,40.787906554459667],[-73.944023,40.782960000000301],[-73.943592454622546,40.782747908206574]]]]});\\r\\nlet coordinates = \\r\\n    datatable(longitude:real, latitude:real, description:string)\\r\\n    [\\r\\n        real(-73.9741), 40.7914, \\'Upper West Side\\',    // In MultiPolygon\\r\\n        real(-73.9950), 40.7340, \\'Greenwich Village\\',  // In MultiPolygon\\r\\n        real(-73.8743), 40.7773, \\'LaGuardia Airport\\',  // In exterior of MultiPolygon\\r\\n    ];\\r\\ncoordinates\\r\\n| where geo_point_in_polygon(longitude, latitude, multipolygon)\\r\\n```\\r\\n\\r\\n|longitude|latitude|description|\\r\\n|---|---|---|\\r\\n|-73.9741|40.7914|Upper West Side|\\r\\n|-73.995|40.734|Greenwich Village|\\r\\n\\r\\nStorm events in California. The events are filtered by a California state polygon and aggregated by event type and hash.\\r\\n\\r\\n![Storm events in California.](images/geo-point-in-polygon-function/california-storm-events.png)\\r\\n\\r\\n```\\r\\nlet california = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-123.233256,42.006186],[-122.378853,42.011663],[-121.037003,41.995232],[-120.001861,41.995232],[-119.996384,40.264519],[-120.001861,38.999346],[-118.71478,38.101128],[-117.498899,37.21934],[-116.540435,36.501861],[-115.85034,35.970598],[-114.634459,35.00118],[-114.634459,34.87521],[-114.470151,34.710902],[-114.333228,34.448009],[-114.136058,34.305608],[-114.256551,34.174162],[-114.415382,34.108438],[-114.535874,33.933176],[-114.497536,33.697668],[-114.524921,33.54979],[-114.727567,33.40739],[-114.661844,33.034958],[-114.524921,33.029481],[-114.470151,32.843265],[-114.524921,32.755634],[-114.72209,32.717295],[-116.04751,32.624187],[-117.126467,32.536556],[-117.24696,32.668003],[-117.252437,32.876127],[-117.329114,33.122589],[-117.471515,33.297851],[-117.7837,33.538836],[-118.183517,33.763391],[-118.260194,33.703145],[-118.413548,33.741483],[-118.391641,33.840068],[-118.566903,34.042715],[-118.802411,33.998899],[-119.218659,34.146777],[-119.278905,34.26727],[-119.558229,34.415147],[-119.875891,34.40967],[-120.138784,34.475393],[-120.472878,34.448009],[-120.64814,34.579455],[-120.609801,34.858779],[-120.670048,34.902595],[-120.631709,35.099764],[-120.894602,35.247642],[-120.905556,35.450289],[-121.004141,35.461243],[-121.168449,35.636505],[-121.283465,35.674843],[-121.332757,35.784382],[-121.716143,36.195153],[-121.896882,36.315645],[-121.935221,36.638785],[-121.858544,36.6114],[-121.787344,36.803093],[-121.929744,36.978355],[-122.105006,36.956447],[-122.335038,37.115279],[-122.417192,37.241248],[-122.400761,37.361741],[-122.515777,37.520572],[-122.515777,37.783465],[-122.329561,37.783465],[-122.406238,38.15042],[-122.488392,38.112082],[-122.504823,37.931343],[-122.701993,37.893004],[-122.937501,38.029928],[-122.97584,38.265436],[-123.129194,38.451652],[-123.331841,38.566668],[-123.44138,38.698114],[-123.737134,38.95553],[-123.687842,39.032208],[-123.824765,39.366301],[-123.764519,39.552517],[-123.85215,39.831841],[-124.109566,40.105688],[-124.361506,40.259042],[-124.410798,40.439781],[-124.158859,40.877937],[-124.109566,41.025814],[-124.158859,41.14083],[-124.065751,41.442061],[-124.147905,41.715908],[-124.257444,41.781632],[-124.213628,42.000709],[-123.233256,42.006186]]]});\\r\\nStormEvents\\r\\n| project BeginLon, BeginLat, EventType\\r\\n| where geo_point_in_polygon(BeginLon, BeginLat, california)\\r\\n| summarize count() by EventType, hash = geo_point_to_s2cell(BeginLon, BeginLat, 7)\\r\\n| project geo_s2cell_to_central_point(hash), EventType, count_\\r\\n| render piechart with (kind=map) // map rendering available in Kusto Explorer desktop\\r\\n```\\r\\n\\r\\nThe following example shows how to classify coordinates to polygons using the [partition](./partitionoperator.md) operator.\\r\\n\\r\\n```\\r\\nlet Polygons = datatable(description:string, polygon:dynamic)\\r\\n    [  \\r\\n      \"New York city area\", dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.85009765625,40.85744791303121],[-74.16046142578125,40.84290487729676],[-74.190673828125,40.59935608796518],[-73.83087158203125,40.61812224225511],[-73.85009765625,40.85744791303121]]]}),\\r\\n      \"Seattle area\",       dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-122.200927734375,47.68573021131587],[-122.4591064453125,47.68573021131587],[-122.4755859375,47.468949677672484],[-122.17620849609374,47.47266286861342],[-122.200927734375,47.68573021131587]]]}),\\r\\n      \"Las Vegas\",          dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-114.9,36.36],[-115.4498291015625,36.33282808737917],[-115.4498291015625,35.84453450421662],[-114.949951171875,35.902399875143615],[-114.9,36.36]]]}),\\r\\n    ];\\r\\nlet Locations = datatable(longitude:real, latitude:real)\\r\\n    [\\r\\n      real(-73.95),  real(40.75), // Somewhere in New York\\r\\n      real(-122.3),  real(47.6),  // Somewhere in Seattle\\r\\n      real(-115.18), real(36.16)  // Somewhere in Las Vegas\\r\\n    ];\\r\\nPolygons\\r\\n| project polygonPartition = tostring(pack(\"description\", description, \"polygon\", polygon))\\r\\n| partition hint.materialized=true by polygonPartition\\r\\n{   \\r\\n     Locations\\r\\n     | extend description = todynamic(toscalar(polygonPartition)).description\\r\\n     | extend polygon = todynamic(toscalar(polygonPartition)).polygon\\r\\n     | where geo_point_in_polygon(longitude, latitude, polygon)\\r\\n     | project-away polygon\\r\\n}\\r\\n```\\r\\n\\r\\n|longitude|latitude|description|\\r\\n|---|---|---|\\r\\n|-73.95|40.75|New York city area|\\r\\n|-122.3|47.6|Seattle area|\\r\\n|-115.18|36.16|Las Vegas|\\r\\n\\r\\nSee also [geo_polygon_to_s2cells()](geo-polygon-to-s2cells-function.md).\\r\\n\\r\\nFolding several polygons into one multipolygon and querying it.\\r\\n\\r\\n```\\r\\nlet Polygons = \\r\\n    datatable(polygon:dynamic)\\r\\n    [\\r\\n        dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.991460000000131,40.731738000000206],[-73.992854491775518,40.730082566051351],[-73.996772,40.725432000000154],[-73.997634685522883,40.725786309886963],[-74.002855946639244,40.728346630056791],[-74.001413,40.731065000000207],[-73.996796995070824,40.73736378205173],[-73.991724524037934,40.735245208931886],[-73.990703782359589,40.734781896080477],[-73.991460000000131,40.731738000000206]]]}),\\r\\n        dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.958357552055688,40.800369095633819],[-73.98143901556422,40.768762584141953],[-73.981548752788598,40.7685590292784],[-73.981565335901905,40.768307084720796],[-73.981754418060945,40.768399727738668],[-73.982038573548124,40.768387823012056],[-73.982268248204349,40.768298621883247],[-73.982384797518051,40.768097213086911],[-73.982320919746599,40.767894461792181],[-73.982155532845766,40.767756204474757],[-73.98238873834039,40.767411004834273],[-73.993650353659021,40.772145571634361],[-73.99415893763998,40.772493009137818],[-73.993831082030937,40.772931787850908],[-73.993891252437052,40.772955194876722],[-73.993962585514595,40.772944653908901],[-73.99401262480508,40.772882846631894],[-73.994122058082397,40.77292405902601],[-73.994136652588594,40.772901870174394],[-73.994301342391154,40.772970028663913],[-73.994281535134448,40.77299380206933],[-73.994376552751078,40.77303955110149],[-73.994294029824005,40.773156243992048],[-73.995023275860802,40.773481196576356],[-73.99508939189289,40.773388475039134],[-73.995013963716758,40.773358035426909],[-73.995050284699261,40.773297153189958],[-73.996240651898916,40.773789791397689],[-73.996195837470992,40.773852356184044],[-73.996098807369748,40.773951805299085],[-73.996179459973888,40.773986954351571],[-73.996095245226442,40.774086186437756],[-73.995572265161172,40.773870731394297],[-73.994017424135961,40.77321375261053],[-73.993935876811335,40.773179512586211],[-73.993861942928888,40.773269531698837],[-73.993822393527211,40.773381758622882],[-73.993767019318497,40.773483981224835],[-73.993698463744295,40.773562141052594],[-73.993358326468751,40.773926888327956],[-73.992622663865575,40.774974056037109],[-73.992577842766124,40.774956016359418],[-73.992527743951555,40.775002110439829],[-73.992469745815342,40.775024159551755],[-73.992403837191887,40.775018140390664],[-73.99226708903538,40.775116033858794],[-73.99217809026365,40.775279293897171],[-73.992059084937338,40.775497598192516],[-73.992125372394938,40.775509075053385],[-73.992226867797001,40.775482211026116],[-73.992329346608813,40.775468900958522],[-73.992361756801131,40.775501899766638],[-73.992386042960277,40.775557180424634],[-73.992087684712729,40.775983970821372],[-73.990927174149746,40.777566878763238],[-73.99039616003671,40.777585065679204],[-73.989461267506471,40.778875124584417],[-73.989175778438053,40.779287524015778],[-73.988868617400072,40.779692922911607],[-73.988871874499793,40.779713738253008],[-73.989219022880576,40.779697895209402],[-73.98927785904425,40.779723439271038],[-73.989409054180143,40.779737706471963],[-73.989498614927044,40.779725044389757],[-73.989596493388234,40.779698146683387],[-73.989679812902509,40.779677568658038],[-73.989752702937935,40.779671244211556],[-73.989842247806507,40.779680752670664],[-73.990040102120489,40.779707677698219],[-73.990137977524839,40.779699769704784],[-73.99033584033225,40.779661794394983],[-73.990430598697046,40.779664973055503],[-73.990622199396725,40.779676064914298],[-73.990745069505479,40.779671328184051],[-73.990872114282197,40.779646007643876],[-73.990961672224358,40.779639683751753],[-73.991057472829539,40.779652352625774],[-73.991157429497036,40.779669775606465],[-73.991242817404469,40.779671367084504],[-73.991255318289745,40.779650782516491],[-73.991294887120119,40.779630209208889],[-73.991321967649895,40.779631796041372],[-73.991359455569423,40.779585883337383],[-73.991551059227476,40.779574821437407],[-73.99141982585985,40.779755280287233],[-73.988886144117032,40.779878898532999],[-73.988939656706265,40.779956178440393],[-73.988926103530844,40.780059292013632],[-73.988911680264692,40.780096037146606],[-73.988919261468567,40.780226094343945],[-73.988381050202634,40.780981074045783],[-73.988232413846987,40.781233144215555],[-73.988210420831663,40.781225482542055],[-73.988140000000143,40.781409000000224],[-73.988041288067166,40.781585961353777],[-73.98810029382463,40.781602878305286],[-73.988076449145055,40.781650935001608],[-73.988018059972219,40.781634188810422],[-73.987960792842145,40.781770987031535],[-73.985465811970457,40.785360700575431],[-73.986172704965611,40.786068452258647],[-73.986455862401996,40.785919219081421],[-73.987072345615601,40.785189638820121],[-73.98711901394276,40.785210319004058],[-73.986497781023601,40.785951202887254],[-73.986164628806279,40.786121882448327],[-73.986128422486075,40.786239001331111],[-73.986071135219746,40.786240706026611],[-73.986027274789123,40.786228964236727],[-73.986097637849426,40.78605822569795],[-73.985429321269592,40.785413942184597],[-73.985081137732209,40.785921935110366],[-73.985198833254501,40.785966552197777],[-73.985170502389906,40.78601333415817],[-73.985216218673656,40.786030501816427],[-73.98525509797993,40.785976205511588],[-73.98524273937646,40.785972572653328],[-73.98524962933017,40.785963139855845],[-73.985281779186749,40.785978620950075],[-73.985240032884533,40.786035858136792],[-73.985683885242182,40.786222123919686],[-73.985717529004575,40.786175994668795],[-73.985765660297687,40.786196274858618],[-73.985682871922691,40.786309786213067],[-73.985636270930442,40.786290150649279],[-73.985670722564691,40.786242911993817],[-73.98520511880038,40.786047669212785],[-73.985211035607492,40.786039554883686],[-73.985162639946992,40.786020999769754],[-73.985131636312062,40.786060297019972],[-73.985016964065125,40.78601423719563],[-73.984655078830457,40.786534741807841],[-73.985743787901043,40.786570082854738],[-73.98589227228328,40.786426529019593],[-73.985942854994988,40.786452847880334],[-73.985949561556794,40.78648711396653],[-73.985812373526713,40.786616865357047],[-73.985135209703174,40.78658761889551],[-73.984619428584324,40.786586016349787],[-73.981952458164173,40.790393724337193],[-73.972823037363767,40.803428052816756],[-73.971036786332192,40.805918478839672],[-73.966701,40.804169000000186],[-73.959647,40.801156000000113],[-73.958508540159471,40.800682279767472],[-73.95853274080838,40.800491362464697],[-73.958357552055688,40.800369095633819]]]}),\\r\\n        dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.943592454622546,40.782747908206574],[-73.943648235390199,40.782656161333449],[-73.943870759887162,40.781273026571704],[-73.94345932494096,40.780048275653243],[-73.943213862652243,40.779317588660199],[-73.943004239504688,40.779639495474292],[-73.942716005450905,40.779544169476175],[-73.942712374762181,40.779214856940001],[-73.942535563208608,40.779090956062532],[-73.942893408188027,40.778614093246276],[-73.942438481745029,40.777315235766039],[-73.942244919522594,40.777104088947254],[-73.942074188038887,40.776917846977142],[-73.942002667222781,40.776185317382648],[-73.942620205199006,40.775180871576474],[-73.94285645694552,40.774796600349191],[-73.94293043781397,40.774676268036011],[-73.945870899588215,40.771692257932997],[-73.946618690150586,40.77093339256956],[-73.948664164778933,40.768857624399587],[-73.950069793030679,40.767025088383498],[-73.954418260786071,40.762184104951245],[-73.95650786241211,40.760285256574043],[-73.958787773424007,40.758213471309809],[-73.973015157270069,40.764278692864671],[-73.955760332998182,40.787906554459667],[-73.944023,40.782960000000301],[-73.943592454622546,40.782747908206574]]]}),\\r\\n    ];\\r\\nlet Coordinates = \\r\\n    datatable(longitude:real, latitude:real, description:string)\\r\\n    [\\r\\n        real(-73.9741), 40.7914, \\'Upper West Side\\',\\r\\n        real(-73.9950), 40.7340, \\'Greenwich Village\\',\\r\\n        real(-73.8743), 40.7773, \\'LaGuardia Airport\\',\\r\\n    ];\\r\\nlet multipolygon = toscalar(\\r\\n    Polygons\\r\\n    | project individual_polygon = pack_array(polygon.coordinates)\\r\\n    | summarize multipolygon_coordinates = make_list(individual_polygon)\\r\\n    | project multipolygon = pack(\"type\",\"MultiPolygon\", \"coordinates\", multipolygon_coordinates));\\r\\nCoordinates\\r\\n| where geo_point_in_polygon(longitude, latitude, multipolygon)\\r\\n```\\r\\n\\r\\n|longitude|latitude|description|\\r\\n|---|---|---|\\r\\n|-73.9741|40.7914|Upper West Side|\\r\\n|-73.995|40.734|Greenwich Village|\\r\\n\\r\\nThe following example will return a null result because of the invalid coordinate input.\\r\\n\\r\\n```\\r\\nprint in_polygon = geo_point_in_polygon(200,1,dynamic({\"type\": \"Polygon\",\"coordinates\": [[[0,0],[10,10],[10,1],[0,0]]]}))\\r\\n```\\r\\n\\r\\n| in_polygon |\\r\\n|------------|\\r\\n|            |\\r\\n\\r\\nThe following example will return a null result because of the invalid polygon input.\\r\\n\\r\\n```\\r\\nprint in_polygon = geo_point_in_polygon(1,1,dynamic({\"type\": \"Polygon\",\"coordinates\": [[[0,0],[10,10],[10,10],[0,0]]]}))\\r\\n```\\r\\n\\r\\n| in_polygon |\\r\\n|------------|\\r\\n|            |',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-point-in-polygon-function\",\"geo-point-in-polygon-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_point_to_geohash\",\"Calculates the geohash string value for a geographic location.\",\"Read more about [geohash](https://en.wikipedia.org/wiki/Geohash).  \\r\\n\\r\\n## Syntax\\r\\n\\r\\n`geo_point_to_geohash(`*longitude*`, `*latitude*`, `[*accuracy*]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *longitude*: Longitude value of a geographic location. Longitude x will be considered valid if x is a real number and is in the range [-180, +180]. \\r\\n* *latitude*: Latitude value of a geographic location. Latitude y will be considered valid if y is a real number and y is in the range [-90, +90]. \\r\\n* *accuracy*: An optional `int` that defines the requested accuracy. Supported values are in the range [1,18]. If unspecified, the default value `5` is used.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe geohash string value of a given geographic location with requested accuracy length. If the coordinate or accuracy is invalid, the query will produce an empty result.\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * Geohash can be a useful geospatial clustering tool.\\r\\n> * Geohash has 18 accuracy levels with area coverage ranging from 25 Million km\\u00b2 at the highest level 1 to 0.6 \\u03bc\\u00b2 at the lowest level 18.\\r\\n> * Common prefixes of geohash indicate proximity of points to each other. The longer a shared prefix is, the closer the two places are. Accuracy value translates to geohash length.\\r\\n> * Geohash is a rectangular area on a plane surface.\\r\\n> * Invoking the [geo_geohash_to_central_point()](geo-geohash-to-central-point-function.md) function on a geohash string that was calculated on longitude x and latitude y won't necessarily return x and y.\\r\\n> * Due to the geohash definition, it's possible that two geographic locations are very close to each other but have different geohash codes.\\r\\n\\r\\n**Geohash rectangular area coverage per accuracy value:**\\r\\n\\r\\n| Accuracy | Width     | Height    |\\r\\n|----------|-----------|-----------|\\r\\n| 1        | 5000 km   | 5000 km   |\\r\\n| 2        | 1250 km   | 625 km    |\\r\\n| 3        | 156.25 km | 156.25 km |\\r\\n| 4        | 39.06 km  | 19.53 km  |\\r\\n| 5        | 4.88 km   | 4.88 km   |\\r\\n| 6        | 1.22 km   | 0.61 km   |\\r\\n| 7        | 152.59 m  | 152.59 m  |\\r\\n| 8        | 38.15 m   | 19.07 m   |\\r\\n| 9        | 4.77 m    | 4.77 m    |\\r\\n| 10       | 1.19 m    | 0.59 m    |\\r\\n| 11       | 149.01 mm | 149.01 mm |\\r\\n| 12       | 37.25 mm  | 18.63 mm  |\\r\\n| 13       | 4.66 mm   | 4.66 mm   |\\r\\n| 14       | 1.16 mm   | 0.58 mm   |\\r\\n| 15       | 145.52 \\u03bc  | 145.52 \\u03bc  |\\r\\n| 16       | 36.28 \\u03bc   | 18.19 \\u03bc   |\\r\\n| 17       | 4.55 \\u03bc    | 4.55 \\u03bc    |\\r\\n| 18       | 1.14 \\u03bc    | 0.57 \\u03bc    |\\r\\n\\r\\nSee also [geo_point_to_s2cell()](geo-point-to-s2cell-function.md), [geo_point_to_h3cell()](geo-point-to-h3cell-function.md).\\r\\n\\r\\nFor comparison with other available grid systems, see [geospatial clustering with Kusto Query Language](geospatial-grid-systems.md).\",'US storm events aggregated by geohash.\\r\\n\\r\\n![US geohash.](images/geo-point-to-geohash-function/geohash.png)\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| project BeginLon, BeginLat\\r\\n| summarize by hash=geo_point_to_geohash(BeginLon, BeginLat, 3)\\r\\n| project geo_geohash_to_central_point(hash)\\r\\n| render scatterchart with (kind=map)\\r\\n```\\r\\n\\r\\n```\\r\\nprint geohash = geo_point_to_geohash(139.806115, 35.554128, 12)  \\r\\n```\\r\\n\\r\\n| geohash      |\\r\\n|--------------|\\r\\n| xn76m27ty9g4 |\\r\\n\\r\\n```\\r\\nprint geohash = geo_point_to_geohash(-80.195829, 25.802215, 8)\\r\\n```\\r\\n\\r\\n|geohash|\\r\\n|---|\\r\\n|dhwfz15h|\\r\\n\\r\\nThe following example finds groups of coordinates. Every pair of coordinates in the group resides in a rectangular area of 4.88 km by 4.88 km.\\r\\n\\r\\n```\\r\\ndatatable(location_id:string, longitude:real, latitude:real)\\r\\n[\\r\\n  \"A\", double(-122.303404), 47.570482,\\r\\n  \"B\", double(-122.304745), 47.567052,\\r\\n  \"C\", double(-122.278156), 47.566936,\\r\\n]\\r\\n| summarize count = count(),                                          // items per group count\\r\\n            locations = make_list(location_id)                        // items in the group\\r\\n            by geohash = geo_point_to_geohash(longitude, latitude)    // geohash of the group\\r\\n```\\r\\n\\r\\n| geohash | count | locations  |\\r\\n|---------|-------|------------|\\r\\n| c23n8   | 2     | [\"A\", \"B\"] |\\r\\n| c23n9   | 1     | [\"C\"]      |\\r\\n\\r\\nThe following example produces an empty result because of the invalid coordinate input.\\r\\n\\r\\n```\\r\\nprint geohash = geo_point_to_geohash(200,1,8)\\r\\n```\\r\\n\\r\\n| geohash |\\r\\n|---------|\\r\\n|         |\\r\\n\\r\\nThe following example produces an empty result because of the invalid accuracy input.\\r\\n\\r\\n```\\r\\nprint geohash = geo_point_to_geohash(1,1,int(null))\\r\\n```\\r\\n\\r\\n| geohash |\\r\\n|---------|\\r\\n|         |',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-point-to-geohash-function\",\"geo-point-to-geohash-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_point_to_h3cell\",\"Calculates the H3 Cell token string value for a geographic location.\",\"Read more about [H3 Cell](https://eng.uber.com/h3/).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`geo_point_to_h3cell(`*longitude*`, `*latitude*`, `*resolution*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *longitude*: Longitude value of a geographic location. Longitude *x* will be considered valid if *x* is a real number and *x* is in the range [-180, +180].\\r\\n* *latitude*: Latitude value of a geographic location. Latitude *y* will be considered valid if y is a real number and y in the range [-90, +90].\\r\\n* *resolution*: An optional `int` that defines the requested cell resolution. Supported values are in the range [0, 15]. If unspecified, the default value `6` is used.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe H3 Cell token string value of a given geographic location. If the coordinates or levels are invalid, the query will produce an empty result.\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * H3 Cell can be a useful geospatial clustering tool.\\r\\n> * H3 Cell has 16 levels of hierarchy with area coverage ranging from 4,250,547km\\u00b2 at the highest level 0 to 0.9m\\u00b2 at the lowest level 15.\\r\\n> * H3 Cell has a unique hexagon shape and this leads some unique properties:\\r\\n>   - Hexagons have 6 neighbors\\r\\n>   - Hexagons allow us to approximate radiuses easily and all neighbors are equidistant\\r\\n>   - Hexagons are visually pleasant to look at\\r\\n> * In some rare cases the shape is pentagon.\\r\\n> * H3 Cell has a rectangular area on a plane surface.\\r\\n> * Invoking the [geo_h3cell_to_central_point()](geo-h3cell-to-central-point-function.md) function on an H3 Cell token string that was calculated on longitude x and latitude y won't necessarily return x and y.\\r\\n> * It's possible that two geographic locations are very close to each other but have different H3 Cell tokens.\\r\\n\\r\\n**H3 Cell approximate area coverage per resolution value**\\r\\n\\r\\n|Level|Average Hexagon Edge Length|\\r\\n|--|--|\\r\\n|0|1108 km|\\r\\n|1|419 km|\\r\\n|2|158 km|\\r\\n|3|60 km|\\r\\n|4|23 km|\\r\\n|5|8 km|\\r\\n|6|3 km|\\r\\n|7|1 km|\\r\\n|8|460 m|\\r\\n|9|174 m|\\r\\n|10|66 m|\\r\\n|11|25 m|\\r\\n|12|9 m|\\r\\n|13|3 m|\\r\\n|14|1 m|\\r\\n|15|0.5 m|\\r\\n\\r\\nThe table source can be found [in this H3 Cell statistical resource](https://h3geo.org/docs/core-library/restable/).\\r\\n\\r\\nSee also [geo_point_to_s2cell()](geo-point-to-s2cell-function.md), [geo_point_to_geohash()](geo-point-to-geohash-function.md).\\r\\n\\r\\nFor comparison with other available grid systems. see [geospatial clustering with Kusto Query Language](geospatial-grid-systems.md).\",'```\\r\\nprint h3cell = geo_point_to_h3cell(-74.04450446039874, 40.689250859314974, 6)\\r\\n```\\r\\n\\r\\n|h3cell|\\r\\n|---|\\r\\n|862a1072fffffff|\\r\\n\\r\\nThe following example finds groups of coordinates. Every pair of coordinates in the group resides in the H3 Cell with average hexagon area of 253 km\\u00b2.\\r\\n\\r\\n```\\r\\ndatatable(location_id:string, longitude:real, latitude:real)\\r\\n[\\r\\n    \"A\", -73.956683, 40.807907,\\r\\n    \"B\", -73.916869, 40.818314,\\r\\n    \"C\", -73.989148, 40.743273,\\r\\n]\\r\\n| summarize count = count(),                                         // Items per group count\\r\\n            locations = make_list(location_id)                       // Items in the group\\r\\n            by h3cell = geo_point_to_h3cell(longitude, latitude, 5)  // H3 Cell of the group\\r\\n```\\r\\n\\r\\n|h3cell|count|locations|\\r\\n|---|---|---|\\r\\n|852a100bfffffff|2|[<br>  \"A\",<br>  \"B\"<br>]|\\r\\n|852a1073fffffff|1|[<br>  \"C\"<br>]|\\r\\n\\r\\nThe following example produces an empty result because of the invalid coordinate input.\\r\\n\\r\\n```\\r\\nprint h3cell = geo_point_to_h3cell(300,1,8)\\r\\n```\\r\\n\\r\\n|h3cell|\\r\\n|---|\\r\\n||\\r\\n\\r\\nThe following example produces an empty result because of the invalid level input.\\r\\n\\r\\n```\\r\\nprint h3cell = geo_point_to_h3cell(1,1,16)\\r\\n```\\r\\n\\r\\n|h3cell|\\r\\n|---|\\r\\n||\\r\\n\\r\\nThe following example produces an empty result because of the invalid level input.\\r\\n\\r\\n```\\r\\nprint h3cell = geo_point_to_h3cell(1,1,int(null))\\r\\n```\\r\\n\\r\\n|h3cell|\\r\\n|---|\\r\\n||',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-point-to-h3cell-function\",\"geo-point-to-h3cell-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_point_to_s2cell\",\"Calculates the S2 cell token string value for a geographic location.\",\"S2 Cell can be a useful geospatial clustering tool. The S2 Cell is a cell on a spherical surface and its edges are geodesics. S2 Cell has 31 levels of hierarchy with area coverage ranging from 85,011,012.19km\\u00b2 at the highest level of 0 to 0.44cm\\u00b2 at the lowest level of 30. S2 Cell preserves the cell center well during level increase from 0 to 30. Two geographic locations can be very close to each other but have different S2 cell tokens.\\r\\n\\r\\n>[!NOTE]\\r\\n> If you invoke the [geo_s2cell_to_central_point()](geo-s2cell-to-central-point-function.md) function on an S2 cell token string that was calculated on longitude x and latitude y, the function won't necessarily return x and y.\\r\\n\\r\\nRead more about [S2 cell hierarchy](https://s2geometry.io/devguide/s2cell_hierarchy).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`geo_point_to_s2cell(`*longitude*`, `*latitude*`, `*level*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *longitude*: Longitude value of a geographic location. Longitude *x* will be considered valid if *x* is a real number and *x* is in the range [-180, +180]. \\r\\n* *latitude*: Latitude value of a geographic location. Latitude y will be considered valid if y is a real number and y in the range [-90, +90]. \\r\\n* *level*: An optional `int` that defines the requested cell level. Supported values are in the range [0, 30]. If unspecified, the default value `11` is used.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe S2 cell token string value of a given geographic location. If the coordinates or levels are invalid, the query will produce an empty result.\\r\\n\\r\\n## S2 Cell approximate area coverage per level value\\r\\n\\r\\nFor every level, the size of the S2 Cell is similar but not exactly equal. Nearby cell sizes tend to be more equal.\\r\\n\\r\\n|Level|Minimum random cell edge length (UK)|Maximum random cell edge length (US)|\\r\\n|--|--|--|\\r\\n|0|7842 km|7842 km|\\r\\n|1|3921 km|5004 km|\\r\\n|2|1825 km|2489 km|\\r\\n|3|840 km|1310 km|\\r\\n|4|432 km|636 km|\\r\\n|5|210 km|315 km|\\r\\n|6|108 km|156 km|\\r\\n|7|54 km|78 km|\\r\\n|8|27 km|39 km|\\r\\n|9|14 km|20 km|\\r\\n|10|7 km|10 km|\\r\\n|11|3 km|5 km|\\r\\n|12|1699 m|2 km|\\r\\n|13|850 m|1225 m|\\r\\n|14|425 m|613 m|\\r\\n|15|212 m|306 m|\\r\\n|16|106 m|153 m|\\r\\n|17|53 m|77 m|\\r\\n|18|27 m|38 m|\\r\\n|19|13 m|19 m|\\r\\n|20|7 m|10 m|\\r\\n|21|3 m|5 m|\\r\\n|22|166 cm|2 m|\\r\\n|23|83 cm|120 cm|\\r\\n|24|41 cm|60 cm|\\r\\n|25|21 cm|30 cm|\\r\\n|26|10 cm|15 cm|\\r\\n|27|5 cm|7 cm|\\r\\n|28|2 cm|4 cm|\\r\\n|29|12 mm|18 mm|\\r\\n|30|6 mm|9 mm|\\r\\n\\r\\nThe table source can be found [in this S2 Cell statistical resource](https://s2geometry.io/resources/s2cell_statistics).\\r\\n\\r\\nFor comparison with other available grid systems, see [geospatial clustering with Kusto Query Language](geospatial-grid-systems.md).\",'### US storm events aggregated by S2 Cell.\\r\\n\\r\\n![US s2cell.](images/geo-point-to-s2cell-function/s2cell.png)\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| project BeginLon, BeginLat\\r\\n| summarize by hash=geo_point_to_s2cell(BeginLon, BeginLat, 5)\\r\\n| project geo_s2cell_to_central_point(hash)\\r\\n| render scatterchart with (kind=map)\\r\\n```\\r\\n\\r\\n```\\r\\nprint s2cell = geo_point_to_s2cell(-80.195829, 25.802215, 8)\\r\\n```\\r\\n\\r\\n| s2cell |\\r\\n|--------|\\r\\n| 88d9b  |\\r\\n\\r\\n### Find a group of coordinates\\r\\n\\r\\nThe following example finds groups of coordinates. Every pair of coordinates in the group resides in the S2 cell with a maximum area of 1632.45 km\\u00b2.\\r\\n\\r\\n```\\r\\ndatatable(location_id:string, longitude:real, latitude:real)\\r\\n[\\r\\n  \"A\", 10.1234, 53,\\r\\n  \"B\", 10.3579, 53,\\r\\n  \"C\", 10.6842, 53,\\r\\n]\\r\\n| summarize count = count(),                                        // items per group count\\r\\n            locations = make_list(location_id)                      // items in the group\\r\\n            by s2cell = geo_point_to_s2cell(longitude, latitude, 8) // s2 cell of the group\\r\\n```\\r\\n\\r\\n| s2cell | count | locations |\\r\\n|--------|-------|-----------|\\r\\n| 47b1d  | 2     | [\"A\",\"B\"] |\\r\\n| 47ae3  | 1     | [\"C\"]     |\\r\\n\\r\\n### Empty results\\r\\n\\r\\nThe following example produces an empty result because of the invalid coordinate input.\\r\\n\\r\\n```\\r\\nprint s2cell = geo_point_to_s2cell(300,1,8)\\r\\n```\\r\\n\\r\\n| s2cell |\\r\\n|--------|\\r\\n|        |\\r\\n\\r\\nThe following example produces an empty result because of the invalid level input.\\r\\n\\r\\n```\\r\\nprint s2cell = geo_point_to_s2cell(1,1,35)\\r\\n```\\r\\n\\r\\n| s2cell |\\r\\n|--------|\\r\\n|        |\\r\\n\\r\\nThe following example produces an empty result because of the invalid level input.\\r\\n\\r\\n```\\r\\nprint s2cell = geo_point_to_s2cell(1,1,int(null))\\r\\n```\\r\\n\\r\\n| s2cell |\\r\\n|--------|\\r\\n|        |\\r\\n\\r\\n## See also\\r\\n\\r\\n* [geo_point_to_geohash()](geo-point-to-geohash-function.md)\\r\\n* [geo_point_to_h3cell()](geo-point-to-h3cell-function.md)',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-point-to-s2cell-function\",\"geo-point-to-s2cell-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_polygon_area\",\"Calculates the area of polygon or a multipolygon on Earth.\",'## Syntax\\r\\n\\r\\n`geo_polygon_area(`*polygon*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *polygon*: Polygon or multipolygon in the [GeoJSON format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe area of a polygon or a multipolygon, in square meters, on Earth. If polygon or multipolygon are invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n> * The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/GandG/update/index.php?action=home) coordinate reference system.\\r\\n> * The [geodetic datum](https://en.wikipedia.org/wiki/Geodetic_datum) used for measurements on Earth is a sphere. Polygon edges are [geodesics](https://en.wikipedia.org/wiki/Geodesic) on the sphere.\\r\\n> * If input polygon edges are straight cartesian lines, consider using [geo_polygon_densify()](geo-polygon-densify-function.md) to convert planar edges to geodesics.\\r\\n> * If input is a multipolygon and contains more than one polygon, the result will be the area of polygons union.\\r\\n\\r\\n**Polygon definition and constraints**\\r\\n\\r\\ndynamic({\"type\": \"Polygon\",\"coordinates\": [ LinearRingShell, LinearRingHole_1 ,..., LinearRingHole_N ]})\\r\\n\\r\\ndynamic({\"type\": \"MultiPolygon\",\"coordinates\": [[ LinearRingShell, LinearRingHole_1 ,..., LinearRingHole_N ] ,..., [LinearRingShell, LinearRingHole_1 ,..., LinearRingHole_M]]})\\r\\n\\r\\n* LinearRingShell is required and defined as a `counterclockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be only one shell.\\r\\n* LinearRingHole is optional and defined as a `clockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be any number of interior rings and holes.\\r\\n* LinearRing vertices must be distinct with at least three coordinates. The first coordinate must be equal to the last. At least four entries are required.\\r\\n* Coordinates [longitude,latitude] must be valid. Longitude must be a real number in the range [-180, +180] and latitude must be a real number in the range [-90, +90].\\r\\n* LinearRingShell encloses at most half of the sphere. LinearRing divides the sphere into two regions. The smaller of the two regions will be chosen.\\r\\n* LinearRing edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\\r\\n* LinearRings must not cross and must not share edges. LinearRings may share vertices.','The following example calculates NYC Central Park area.\\r\\n\\r\\n```\\r\\nlet central_park = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9495,40.7969],[-73.95807266235352,40.80068603561921],[-73.98201942443848,40.76825672305777],[-73.97317886352539,40.76455136505513],[-73.9495,40.7969]]]});\\r\\nprint area = geo_polygon_area(central_park)\\r\\n```\\r\\n\\r\\n|area|\\r\\n|---|\\r\\n|3475207.28346606|\\r\\n\\r\\nThe following example performs union of polygons in multipolygon and calculates area on the unified polygon.\\r\\n\\r\\n```\\r\\nlet polygons = dynamic({\"type\":\"MultiPolygon\",\"coordinates\":[[[[-73.9495,40.7969],[-73.95807266235352,40.80068603561921],[-73.98201942443848,40.76825672305777],[-73.97317886352539,40.76455136505513],[-73.9495,40.7969]]],[[[-73.94262313842773,40.775991804565585],[-73.98107528686523,40.791849155467695],[-73.99600982666016,40.77092185281977],[-73.96150588989258,40.75609977566361],[-73.94262313842773,40.775991804565585]]]]});\\r\\nprint polygons_union_area = geo_polygon_area(polygons)\\r\\n```\\r\\n\\r\\n|polygons_union_area|\\r\\n|---|\\r\\n|10889971.5343487|\\r\\n\\r\\nThe following example calculates top 5 biggest US states by area.\\r\\n\\r\\n```\\r\\nUS_States\\r\\n| project name = features.properties.NAME, polygon = geo_polygon_densify(features.geometry)\\r\\n| project name, area = geo_polygon_area(polygon)\\r\\n| top 5 by area desc\\r\\n```\\r\\n\\r\\n|name|area|\\r\\n|---|---|\\r\\n|Alaska|1550934810070.61|\\r\\n|Texas|693231378868.483|\\r\\n|California|410339536449.521|\\r\\n|Montana|379583933973.436|\\r\\n|New Mexico|314979912310.579|\\r\\n\\r\\nThe following example returns True because of the invalid polygon.\\r\\n\\r\\n```\\r\\nprint isnull(geo_polygon_area(dynamic({\"type\": \"Polygon\",\"coordinates\": [[[0,0],[10,10],[10,10],[0,0]]]})))\\r\\n```\\r\\n\\r\\n|print_0|\\r\\n|---|\\r\\n|True|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-polygon-area-function\",\"geo-polygon-area-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_polygon_centroid\",\"Calculates the centroid of polygon or a multipolygon on Earth.\",'## Syntax\\r\\n\\r\\n`geo_polygon_centroid(`*polygon*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *polygon*: Polygon or multipolygon in the [GeoJSON format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe centroid coordinate values in [GeoJSON Format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type. If polygon or multipolygon are invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n> * The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/GandG/update/index.php?action=home) coordinate reference system.\\r\\n> * The [geodetic datum](https://en.wikipedia.org/wiki/Geodetic_datum) used for measurements on Earth is a sphere. Polygon edges are [geodesics](https://en.wikipedia.org/wiki/Geodesic) on the sphere.\\r\\n> * If input polygon edges are straight cartesian lines, consider using [geo_polygon_densify()](geo-polygon-densify-function.md) to convert planar edges to geodesics.\\r\\n> * If input is a multipolygon and contains more than one polygon, the result will be the centroid of polygons union.\\r\\n\\r\\n**Polygon definition and constraints**\\r\\n\\r\\ndynamic({\"type\": \"Polygon\",\"coordinates\": [ LinearRingShell, LinearRingHole_1 ,..., LinearRingHole_N ]})\\r\\n\\r\\ndynamic({\"type\": \"MultiPolygon\",\"coordinates\": [[ LinearRingShell, LinearRingHole_1 ,..., LinearRingHole_N ] ,..., [LinearRingShell, LinearRingHole_1 ,..., LinearRingHole_M]]})\\r\\n\\r\\n* LinearRingShell is required and defined as a `counterclockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be only one shell.\\r\\n* LinearRingHole is optional and defined as a `clockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be any number of interior rings and holes.\\r\\n* LinearRing vertices must be distinct with at least three coordinates. The first coordinate must be equal to the last. At least four entries are required.\\r\\n* Coordinates [longitude,latitude] must be valid. Longitude must be a real number in the range [-180, +180] and latitude must be a real number in the range [-90, +90].\\r\\n* LinearRingShell encloses at most half of the sphere. LinearRing divides the sphere into two regions. The smaller of the two regions will be chosen.\\r\\n* LinearRing edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\\r\\n* LinearRings must not cross and must not share edges. LinearRings may share vertices.','The following example calculates NYC Central Park centroid.\\r\\n\\r\\n```\\r\\nlet central_park = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9495,40.7969],[-73.95807266235352,40.80068603561921],[-73.98201942443848,40.76825672305777],[-73.97317886352539,40.76455136505513],[-73.9495,40.7969]]]});\\r\\nprint centroid = geo_polygon_centroid(central_park)\\r\\n```\\r\\n\\r\\n|centroid|\\r\\n|---|\\r\\n|{\"type\": \"Point\", \"coordinates\": [-73.965735689907618, 40.782550538057812]}|\\r\\n\\r\\nThe following example calculates NYC Central Park centroid longitude.\\r\\n\\r\\n```\\r\\nlet central_park = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9495,40.7969],[-73.95807266235352,40.80068603561921],[-73.98201942443848,40.76825672305777],[-73.97317886352539,40.76455136505513],[-73.9495,40.7969]]]});\\r\\nprint \\r\\ncentroid = geo_polygon_centroid(central_park)\\r\\n| project lng = centroid.coordinates[0]\\r\\n```\\r\\n\\r\\n|lng|\\r\\n|---|\\r\\n|-73.9657356899076|\\r\\n\\r\\nThe following example performs union of polygons in multipolygon and calculates centroid of the unified polygon.\\r\\n\\r\\n```\\r\\nlet polygons = dynamic({\"type\":\"MultiPolygon\",\"coordinates\":[[[[-73.9495,40.7969],[-73.95807266235352,40.80068603561921],[-73.98201942443848,40.76825672305777],[-73.97317886352539,40.76455136505513],[-73.9495,40.7969]]],[[[-73.94262313842773,40.775991804565585],[-73.98107528686523,40.791849155467695],[-73.99600982666016,40.77092185281977],[-73.96150588989258,40.75609977566361],[-73.94262313842773,40.775991804565585]]]]});\\r\\nprint polygons_union_centroid = geo_polygon_centroid(polygons)\\r\\n```\\r\\n\\r\\n|polygons_union_centroid|\\r\\n|---|\\r\\n|\"type\": \"Point\", \"coordinates\": [-73.968569587829577, 40.776310752555119]}|\\r\\n\\r\\nThe following example visualizes NYC Central Park centroid on a map\\r\\n\\r\\n```\\r\\nlet central_park = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9495,40.7969],[-73.95807266235352,40.80068603561921],[-73.98201942443848,40.76825672305777],[-73.97317886352539,40.76455136505513],[-73.9495,40.7969]]]});\\r\\nprint \\r\\ncentroid = geo_polygon_centroid(central_park)\\r\\n| render scatterchart with (kind = map)\\r\\n```\\r\\n\\r\\n![Screenshot of N Y C Central park centroid.](images/geo-polygon-centroid-function/nyc-central-park-centroid.png)\\r\\nThe following example returns True because of the invalid polygon.\\r\\n\\r\\n```\\r\\nprint isnull(geo_polygon_centroid(dynamic({\"type\": \"Polygon\",\"coordinates\": [[[0,0],[10,10],[10,10],[0,0]]]})))\\r\\n```\\r\\n\\r\\n|print_0|\\r\\n|---|\\r\\n|True|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-polygon-centroid-function\",\"geo-polygon-centroid-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_polygon_densify\",\"Converts polygon or multipolygon planar edges to geodesics by adding intermediate points.\",'## Syntax\\r\\n\\r\\n`geo_polygon_densify(`*polygon*`, `*tolerance*`)`\\r\\n\\r\\n`geo_polygon_densify(`*polygon*`, `*tolerance*`, `*preserve_crossing*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *polygon*: Polygon or multipolygon in the [GeoJSON format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type.\\r\\n* *tolerance*: An optional numeric that defines maximum distance in meters between the original planar edge and the converted geodesic edge chain. Supported values are in the range [0.1, 10000]. If unspecified, the default value is  `10`.\\r\\n* *preserve_crossing*: An optional boolean that preserves edge crossing over antimeridian. If unspecified, the default value `False` is used.\\r\\n\\r\\n### Polygon definition\\r\\n\\r\\ndynamic({\"type\": \"Polygon\",\"coordinates\": [ LinearRingShell, LinearRingHole_1 ,..., LinearRingHole_N ]})\\r\\n\\r\\ndynamic({\"type\": \"MultiPolygon\",\"coordinates\": [[ LinearRingShell, LinearRingHole_1 ,..., LinearRingHole_N ] ,..., [LinearRingShell, LinearRingHole_1 ,..., LinearRingHole_M]]})\\r\\n\\r\\n* `LinearRingShell` is required and defined as a `counterclockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be only one shell.\\r\\n* `LinearRingHole` is optional and defined as a `clockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be any number of interior rings and holes.\\r\\n* `LinearRing` vertices must be distinct with at least three coordinates. The first coordinate must be equal to the last. At least four entries are required.\\r\\n* Coordinates [longitude,latitude] must be valid. Longitude must be a real number in the range [-180, +180] and latitude must be a real number in the range [-90, +90].\\r\\n* `LinearRingShell` encloses at most half of the sphere. LinearRing divides the sphere into two regions. The smaller of the two regions will be chosen.\\r\\n* `LinearRing` edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\\r\\n\\r\\n### Constraints\\r\\n\\r\\n* The maximum number of points in the densified polygon is limited to 10485760.\\r\\n* Storing polygons in [dynamic](./scalar-data-types/dynamic.md) format has size limits.\\r\\n* Densifying a valid polygon may invalidate the polygon. The algorithm adds points in a non-uniform manner, and as such may cause edges to intertwine with each other.\\r\\n\\r\\n### Motivation\\r\\n\\r\\n* [GeoJSON format](https://tools.ietf.org/html/rfc7946) defines an edge between two points as a straight cartesian line while Azure Data Explorer uses [geodesic](https://en.wikipedia.org/wiki/Geodesic).\\r\\n* The decision to use geodesic or planar edges might depend on the dataset and is especially relevant in long edges.\\r\\n\\r\\n## Returns\\r\\n\\r\\nDensified polygon in the [GeoJSON format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type. If either the polygon or tolerance is invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n> * The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/GandG/update/index.php?action=home) coordinate reference system.','The following example densifies Manhattan Central Park polygon. The edges are short and the distance between planar edges and their geodesic counterparts is less than the distance specified by tolerance. As such, the result remains unchanged.\\r\\n\\r\\n```\\r\\nprint densified_polygon = tostring(geo_polygon_densify(dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.958244,40.800719],[-73.949146,40.79695],[-73.973093,40.764226],[-73.982062,40.768159],[-73.958244,40.800719]]]})))\\r\\n```\\r\\n\\r\\n|densified_polygon|\\r\\n|---|\\r\\n|{\"type\":\"Polygon\",\"coordinates\":[[[-73.958244,40.800719],[-73.949146,40.79695],[-73.973093,40.764226],[-73.982062,40.768159],[-73.958244,40.800719]]]}|\\r\\n\\r\\nThe following example densifies two edges of the polygon. Densified edges length is ~110 km\\r\\n\\r\\n```\\r\\nprint densified_polygon = tostring(geo_polygon_densify(dynamic({\"type\":\"Polygon\",\"coordinates\":[[[10,10],[11,10],[11,11],[10,11],[10,10]]]})))\\r\\n```\\r\\n\\r\\n|densified_polygon|\\r\\n|---|\\r\\n|{\"type\":\"Polygon\",\"coordinates\":[[[10,10],[10.25,10],[10.5,10],[10.75,10],[11,10],[11,11],[10.75,11],[10.5,11],[10.25,11],[10,11],[10,10]]]}|\\r\\n\\r\\nThe following example returns a null result because of the invalid coordinate input.\\r\\n\\r\\n```\\r\\nprint densified_polygon = geo_polygon_densify(dynamic({\"type\":\"Polygon\",\"coordinates\":[[[10,900],[11,10],[11,11],[10,11],[10,10]]]}))\\r\\n```\\r\\n\\r\\n|densified_polygon|\\r\\n|---|\\r\\n||\\r\\n\\r\\nThe following example returns a null result because of the invalid tolerance input.\\r\\n\\r\\n```\\r\\nprint densified_polygon = geo_polygon_densify(dynamic({\"type\":\"Polygon\",\"coordinates\":[[[10,10],[11,10],[11,11],[10,11],[10,10]]]}), 0)\\r\\n```\\r\\n\\r\\n|densified_polygon|\\r\\n|---|\\r\\n||',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-polygon-densify-function\",\"geo-polygon-densify-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_polygon_perimeter\",\"Calculates the length of the boundary of polygon or a multipolygon on Earth.\",'## Syntax\\r\\n\\r\\n`geo_polygon_perimeter(`*polygon*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *polygon*: Polygon or multipolygon in the [GeoJSON format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe length of the boundary of polygon or a multipolygon, in meters, on Earth. If polygon or multipolygon are invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n> * The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/GandG/update/index.php?action=home) coordinate reference system.\\r\\n> * The [geodetic datum](https://en.wikipedia.org/wiki/Geodetic_datum) used for measurements on Earth is a sphere. Polygon edges are [geodesics](https://en.wikipedia.org/wiki/Geodesic) on the sphere.\\r\\n> * If input polygon edges are straight cartesian lines, consider using [geo_polygon_densify()](geo-polygon-densify-function.md) to convert planar edges to geodesics.\\r\\n> * If input is a multipolygon and contains more than one polygon, the result will be the length of the boundary of polygons union.\\r\\n\\r\\n**Polygon definition and constraints**\\r\\n\\r\\ndynamic({\"type\": \"Polygon\",\"coordinates\": [ LinearRingShell, LinearRingHole_1 ,..., LinearRingHole_N ]})\\r\\n\\r\\ndynamic({\"type\": \"MultiPolygon\",\"coordinates\": [[ LinearRingShell, LinearRingHole_1 ,..., LinearRingHole_N ] ,..., [LinearRingShell, LinearRingHole_1 ,..., LinearRingHole_M]]})\\r\\n\\r\\n* LinearRingShell is required and defined as a `counterclockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be only one shell.\\r\\n* LinearRingHole is optional and defined as a `clockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be any number of interior rings and holes.\\r\\n* LinearRing vertices must be distinct with at least three coordinates. The first coordinate must be equal to the last. At least four entries are required.\\r\\n* Coordinates [longitude,latitude] must be valid. Longitude must be a real number in the range [-180, +180] and latitude must be a real number in the range [-90, +90].\\r\\n* LinearRingShell encloses at most half of the sphere. LinearRing divides the sphere into two regions. The smaller of the two regions will be chosen.\\r\\n* LinearRing edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\\r\\n* LinearRings must not cross and must not share edges. LinearRings may share vertices.','The following example calculates NYC Central Park perimeter, in meters.\\r\\n\\r\\n```\\r\\nlet central_park = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9495,40.7969],[-73.95807266235352,40.80068603561921],[-73.98201942443848,40.76825672305777],[-73.97317886352539,40.76455136505513],[-73.9495,40.7969]]]});\\r\\nprint perimeter = geo_polygon_perimeter(central_park)\\r\\n```\\r\\n\\r\\n|perimeter|\\r\\n|---|\\r\\n|9930.30149604938|\\r\\n\\r\\nThe following example performs union of polygons in multipolygon and calculates perimeter of the unified polygon.\\r\\n\\r\\n```\\r\\nlet polygons = dynamic({\"type\":\"MultiPolygon\",\"coordinates\":[[[[-73.9495,40.7969],[-73.95807266235352,40.80068603561921],[-73.98201942443848,40.76825672305777],[-73.97317886352539,40.76455136505513],[-73.9495,40.7969]]],[[[-73.94262313842773,40.775991804565585],[-73.98107528686523,40.791849155467695],[-73.99600982666016,40.77092185281977],[-73.96150588989258,40.75609977566361],[-73.94262313842773,40.775991804565585]]]]});\\r\\nprint perimeter = geo_polygon_perimeter(polygons)\\r\\n```\\r\\n\\r\\n|perimeter|\\r\\n|---|\\r\\n|15943.5384578745|\\r\\n\\r\\nThe following example returns True because of the invalid polygon.\\r\\n\\r\\n```\\r\\nprint is_invalid = isnull(geo_polygon_perimeter(dynamic({\"type\": \"Polygon\",\"coordinates\": [[[0,0],[10,10],[10,10],[0,0]]]})))\\r\\n```\\r\\n\\r\\n|is_invalid|\\r\\n|---|\\r\\n|True|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-polygon-perimeter-function\",\"geo-polygon-perimeter-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_polygon_simplify\",\"Simplifies polygon or a multipolygon by replacing nearly straight chains of short edges with a single long edge on Earth.\",'## Syntax\\r\\n\\r\\n`geo_polygon_simplify(`*polygon*`, `*tolerance*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *polygon*: Polygon or multipolygon in the [GeoJSON format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type.\\r\\n* *tolerance*: An optional numeric that defines minimum distance in meters between any two vertices. Supported values are in the range [0, ~7,800,000 meters). If unspecified, the default value `10` is used.\\r\\n\\r\\n## Returns\\r\\n\\r\\nSimplified polygon or a multipolygon in the [GeoJSON format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type, with no two vertices with distance less than tolerance. If either the polygon or tolerance is invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n> * If input has more than one polygon, with mutual borders, please see [geo_simplify_polygons_array()](geo-simplify-polygons-array-function.md).\\r\\n> * The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/GandG/update/index.php?action=home) coordinate reference system.\\r\\n> * The [geodetic datum](https://en.wikipedia.org/wiki/Geodetic_datum) used for measurements on Earth is a sphere. Polygon edges are [geodesics](https://en.wikipedia.org/wiki/Geodesic) on the sphere.\\r\\n> * If input polygon edges are straight cartesian lines, consider using [geo_polygon_densify()](geo-polygon-densify-function.md) to convert planar edges to geodesics.\\r\\n> * If input is a multipolygon and contains more than one polygon, the result will be the area of polygons union.\\r\\n> * High tolerance may cause small polygon to disappear.\\r\\n\\r\\n**Polygon definition and constraints**\\r\\n\\r\\ndynamic({\"type\": \"Polygon\",\"coordinates\": [ LinearRingShell, LinearRingHole_1 ,..., LinearRingHole_N ]})\\r\\n\\r\\ndynamic({\"type\": \"MultiPolygon\",\"coordinates\": [[ LinearRingShell, LinearRingHole_1 ,..., LinearRingHole_N ] ,..., [LinearRingShell, LinearRingHole_1 ,..., LinearRingHole_M]]})\\r\\n\\r\\n* LinearRingShell is required and defined as a `counterclockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be only one shell.\\r\\n* LinearRingHole is optional and defined as a `clockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be any number of interior rings and holes.\\r\\n* LinearRing vertices must be distinct with at least three coordinates. The first coordinate must be equal to the last. At least four entries are required.\\r\\n* Coordinates [longitude,latitude] must be valid. Longitude must be a real number in the range [-180, +180] and latitude must be a real number in the range [-90, +90].\\r\\n* LinearRingShell encloses at most half of the sphere. LinearRing divides the sphere into two regions. The smaller of the two regions will be chosen.\\r\\n* LinearRing edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\\r\\n* LinearRings must not cross and must not share edges. LinearRings may share vertices.','The following example simplifies polygon by removing vertices that are within 10 meters distance from each other.\\r\\n\\r\\n```\\r\\nlet polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.94885122776031,40.79673476355657],[-73.94885927438736,40.79692258628347],[-73.94887939095497,40.79692055577034],[-73.9488673210144,40.79693476936093],[-73.94888743758202,40.79693476936093],[-73.9488834142685,40.796959135509105],[-73.94890084862709,40.79695304397289],[-73.94906312227248,40.79710736271788],[-73.94923612475395,40.7968708081794],[-73.94885122776031,40.79673476355657]]]});\\r\\nprint simplified = geo_polygon_simplify(polygon)\\r\\n```\\r\\n\\r\\n|simplified|\\r\\n|---|\\r\\n|{\"type\": \"Polygon\", \"coordinates\": [[[-73.948851227760315, 40.796734763556572],[-73.949063122272477, 40.797107362717881],[-73.949236124753952, 40.7968708081794],[-73.948851227760315, 40.796734763556572]]]}|\\r\\n\\r\\nThe following example simplifies polygons and combines results into GeoJSON geometry collection.\\r\\n\\r\\n```\\r\\nPolygons\\r\\n| project polygon = features.geometry\\r\\n| project simplified = geo_polygon_simplify(polygon, 1000)\\r\\n| summarize lst = make_list(simplified)\\r\\n| project geojson = pack(\"type\", \"Feature\",\"geometry\", pack(\"type\", \"GeometryCollection\", \"geometries\", lst), \"properties\", pack(\"name\", \"polygons\"))\\r\\n```\\r\\n\\r\\n|geojson|\\r\\n|---|\\r\\n|{\"type\": \"Feature\", \"geometry\": {\"type\": \"GeometryCollection\", \"geometries\": [ ... ]}, \"properties\": {\"name\": \"polygons\"}}|\\r\\n\\r\\nThe following example simplifies polygons and unifies result\\r\\n\\r\\n```\\r\\nUS_States\\r\\n| project polygon = features.geometry\\r\\n| project simplified = geo_polygon_simplify(polygon, 1000)\\r\\n| summarize lst = make_list(simplified)\\r\\n| project polygons = geo_union_polygons_array(lst)\\r\\n```\\r\\n\\r\\n|polygons|\\r\\n|---|\\r\\n|{\"type\": \"MultiPolygon\", \"coordinates\": [ ... ]}|\\r\\n\\r\\nThe following example returns True because of the invalid polygon.\\r\\n\\r\\n```\\r\\nlet polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[5,48],[5,48]]]});\\r\\nprint is_invalid_polygon = isnull(geo_polygon_simplify(polygon))\\r\\n```\\r\\n\\r\\n|is_invalid_polygon|\\r\\n|---|\\r\\n|1|\\r\\n\\r\\nThe following example returns True because of the invalid tolerance.\\r\\n\\r\\n```\\r\\nlet polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[5,48],[0,50],[0,47],[4,47],[5,48]]]});\\r\\nprint is_invalid_polygon = isnull(geo_polygon_simplify(polygon, -0.1))\\r\\n```\\r\\n\\r\\n|is_invalid_polygon|\\r\\n|---|\\r\\n|1|\\r\\n\\r\\nThe following example returns True because high tolerance causes polygon to disappear.\\r\\n\\r\\n```\\r\\nlet polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[5,48],[0,50],[0,47],[4,47],[5,48]]]});\\r\\nprint is_invalid_polygon = isnull(geo_polygon_simplify(polygon, 1000000))\\r\\n```\\r\\n\\r\\n|is_invalid_polygon|\\r\\n|---|\\r\\n|1|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-polygon-simplify-function\",\"geo-polygon-simplify-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_polygon_to_s2cells\",\"Calculates S2 cell tokens that cover a polygon or multipolygon on Earth. This function is a useful geospatial join tool.\",'Read more about [S2 cell hierarchy](https://s2geometry.io/devguide/s2cell_hierarchy).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`geo_polygon_to_s2cells(`*polygon*`, `*level*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *polygon*: Polygon or multiPolygon in the [GeoJSON format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type. \\r\\n* *level*: An optional `int` that defines the requested cell level. Supported values are in the range [0, 30]. If unspecified, the default value `11` is used.\\r\\n\\r\\n## Returns\\r\\n\\r\\nArray of S2 cell token strings that cover a polygon or multipolygon. If either the polygon or level is invalid, or the cell count exceeds the limit, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * Covering the polygon with S2 cell tokens can be useful in matching coordinates to polygons that might include these coordinates and matching polygons to polygons.\\r\\n> * The polygon covering tokens are of the same S2 cell level.\\r\\n> * The maximum count of tokens per polygon is 65536.\\r\\n> * The [geodetic datum](https://en.wikipedia.org/wiki/Geodetic_datum) used for measurements on Earth is a sphere. Polygon edges are [Geodesics](https://en.wikipedia.org/wiki/Geodesic) on the sphere.\\r\\n> * If input polygon edges are straight cartesian lines, consider using [geo_polygon_densify()](geo-polygon-densify-function.md) in order to convert planar edges to geodesics.\\r\\n\\r\\n**Motivation for covering polygons with S2 cell tokens**\\r\\n\\r\\nWithout this function, here is one approach we could take in order to classify coordinates into polygons containing these coordinates.\\r\\n\\r\\n```\\r\\nlet Polygons = \\r\\n    datatable(description:string, polygon:dynamic)\\r\\n    [  \\r\\n      \"New York\",  dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.85009765625,40.85744791303121],[-74.16046142578125,40.84290487729676],[-74.190673828125,40.59935608796518],[-73.83087158203125,40.61812224225511],[-73.85009765625,40.85744791303121]]]}),\\r\\n      \"Seattle\",   dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-122.200927734375,47.68573021131587],[-122.4591064453125,47.68573021131587],[-122.4755859375,47.468949677672484],[-122.17620849609374,47.47266286861342],[-122.200927734375,47.68573021131587]]]}),\\r\\n      \"Las Vegas\", dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-114.9,36.36],[-115.4498291015625,36.33282808737917],[-115.4498291015625,35.84453450421662],[-114.949951171875,35.902399875143615],[-114.9,36.36]]]}),\\r\\n    ];\\r\\nlet Coordinates = \\r\\n    datatable(longitude:real, latitude:real)\\r\\n    [\\r\\n      real(-73.95),  real(40.75), // New York\\r\\n      real(-122.3),  real(47.6),  // Seattle\\r\\n      real(-115.18), real(36.16)  // Las Vegas\\r\\n    ];\\r\\nPolygons | extend dummy=1\\r\\n| join kind=inner (Coordinates | extend dummy=1) on dummy\\r\\n| where geo_point_in_polygon(longitude, latitude, polygon)\\r\\n| project longitude, latitude, description\\r\\n```\\r\\n\\r\\n|longitude|latitude|description|\\r\\n|---|---|---|\\r\\n|-73.95|40.75|New York city|\\r\\n|-122.3|47.6|Seattle|\\r\\n|-115.18|36.16|Las Vegas|\\r\\n\\r\\nWhile this method works in some cases, it is inefficient. This method does a cross-join, meaning that it tries to match every polygon to every point. This process consumes a large amount of memory and compute resources.\\r\\nInstead, we would like to match every polygon to a point with a high probability of containment success, and filter out other points.\\r\\n\\r\\nThis match can be achieved by the following process:\\r\\n\\r\\n1. Converting polygons to S2 cells of level k,\\r\\n1. Converting points to the same S2 cells level k, \\r\\n1. Joining on S2 cells,\\r\\n1. Filtering by [geo_point_in_polygon()](geo-point-in-polygon-function.md).\\r\\n\\r\\n**Choosing the S2 cell level**\\r\\n\\r\\n* Ideally we would want to cover every polygon with one or just a few unique cells such that no two polygons share the same cell.\\r\\n* If the polygons are close to each other, choose the [S2 cell level](geo-point-to-s2cell-function.md) such that its cell edge will be smaller (4, 8, 12 times smaller) than the edge of the average polygon.\\r\\n* If the polygons are far from each other, choose the [S2 cell level](geo-point-to-s2cell-function.md) such that its cell edge will be similar to the edge of the average polygon.\\r\\n* In practice, covering a polygon with more than 10000 cells might not yield good performance.\\r\\n* Sample use cases:\\r\\n   - S2 cell level 5 might prove to be good for covering countries.\\r\\n   - S2 cell level 16 can cover dense and relatively small Manhattan (New York) neighborhoods.\\r\\n   - S2 cell level 11 can be used for covering suburbs of Australia.\\r\\n* Query run time and memory consumption might differ because of different S2 cell level values.\\r\\n\\r\\n> [!WARNING]\\r\\n> Covering a large-area polygon with small-area cells can lead to a huge amount of covering cells. As a result, the query might return null.','The following example classifies coordinates into polygons.\\r\\n\\r\\n```\\r\\nlet Polygons = \\r\\n    datatable(description:string, polygon:dynamic)\\r\\n    [\\r\\n        \\'Greenwich Village\\', dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.991460000000131,40.731738000000206],[-73.992854491775518,40.730082566051351],[-73.996772,40.725432000000154],[-73.997634685522883,40.725786309886963],[-74.002855946639244,40.728346630056791],[-74.001413,40.731065000000207],[-73.996796995070824,40.73736378205173],[-73.991724524037934,40.735245208931886],[-73.990703782359589,40.734781896080477],[-73.991460000000131,40.731738000000206]]]}),\\r\\n        \\'Upper West Side\\',   dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.958357552055688,40.800369095633819],[-73.98143901556422,40.768762584141953],[-73.981548752788598,40.7685590292784],[-73.981565335901905,40.768307084720796],[-73.981754418060945,40.768399727738668],[-73.982038573548124,40.768387823012056],[-73.982268248204349,40.768298621883247],[-73.982384797518051,40.768097213086911],[-73.982320919746599,40.767894461792181],[-73.982155532845766,40.767756204474757],[-73.98238873834039,40.767411004834273],[-73.993650353659021,40.772145571634361],[-73.99415893763998,40.772493009137818],[-73.993831082030937,40.772931787850908],[-73.993891252437052,40.772955194876722],[-73.993962585514595,40.772944653908901],[-73.99401262480508,40.772882846631894],[-73.994122058082397,40.77292405902601],[-73.994136652588594,40.772901870174394],[-73.994301342391154,40.772970028663913],[-73.994281535134448,40.77299380206933],[-73.994376552751078,40.77303955110149],[-73.994294029824005,40.773156243992048],[-73.995023275860802,40.773481196576356],[-73.99508939189289,40.773388475039134],[-73.995013963716758,40.773358035426909],[-73.995050284699261,40.773297153189958],[-73.996240651898916,40.773789791397689],[-73.996195837470992,40.773852356184044],[-73.996098807369748,40.773951805299085],[-73.996179459973888,40.773986954351571],[-73.996095245226442,40.774086186437756],[-73.995572265161172,40.773870731394297],[-73.994017424135961,40.77321375261053],[-73.993935876811335,40.773179512586211],[-73.993861942928888,40.773269531698837],[-73.993822393527211,40.773381758622882],[-73.993767019318497,40.773483981224835],[-73.993698463744295,40.773562141052594],[-73.993358326468751,40.773926888327956],[-73.992622663865575,40.774974056037109],[-73.992577842766124,40.774956016359418],[-73.992527743951555,40.775002110439829],[-73.992469745815342,40.775024159551755],[-73.992403837191887,40.775018140390664],[-73.99226708903538,40.775116033858794],[-73.99217809026365,40.775279293897171],[-73.992059084937338,40.775497598192516],[-73.992125372394938,40.775509075053385],[-73.992226867797001,40.775482211026116],[-73.992329346608813,40.775468900958522],[-73.992361756801131,40.775501899766638],[-73.992386042960277,40.775557180424634],[-73.992087684712729,40.775983970821372],[-73.990927174149746,40.777566878763238],[-73.99039616003671,40.777585065679204],[-73.989461267506471,40.778875124584417],[-73.989175778438053,40.779287524015778],[-73.988868617400072,40.779692922911607],[-73.988871874499793,40.779713738253008],[-73.989219022880576,40.779697895209402],[-73.98927785904425,40.779723439271038],[-73.989409054180143,40.779737706471963],[-73.989498614927044,40.779725044389757],[-73.989596493388234,40.779698146683387],[-73.989679812902509,40.779677568658038],[-73.989752702937935,40.779671244211556],[-73.989842247806507,40.779680752670664],[-73.990040102120489,40.779707677698219],[-73.990137977524839,40.779699769704784],[-73.99033584033225,40.779661794394983],[-73.990430598697046,40.779664973055503],[-73.990622199396725,40.779676064914298],[-73.990745069505479,40.779671328184051],[-73.990872114282197,40.779646007643876],[-73.990961672224358,40.779639683751753],[-73.991057472829539,40.779652352625774],[-73.991157429497036,40.779669775606465],[-73.991242817404469,40.779671367084504],[-73.991255318289745,40.779650782516491],[-73.991294887120119,40.779630209208889],[-73.991321967649895,40.779631796041372],[-73.991359455569423,40.779585883337383],[-73.991551059227476,40.779574821437407],[-73.99141982585985,40.779755280287233],[-73.988886144117032,40.779878898532999],[-73.988939656706265,40.779956178440393],[-73.988926103530844,40.780059292013632],[-73.988911680264692,40.780096037146606],[-73.988919261468567,40.780226094343945],[-73.988381050202634,40.780981074045783],[-73.988232413846987,40.781233144215555],[-73.988210420831663,40.781225482542055],[-73.988140000000143,40.781409000000224],[-73.988041288067166,40.781585961353777],[-73.98810029382463,40.781602878305286],[-73.988076449145055,40.781650935001608],[-73.988018059972219,40.781634188810422],[-73.987960792842145,40.781770987031535],[-73.985465811970457,40.785360700575431],[-73.986172704965611,40.786068452258647],[-73.986455862401996,40.785919219081421],[-73.987072345615601,40.785189638820121],[-73.98711901394276,40.785210319004058],[-73.986497781023601,40.785951202887254],[-73.986164628806279,40.786121882448327],[-73.986128422486075,40.786239001331111],[-73.986071135219746,40.786240706026611],[-73.986027274789123,40.786228964236727],[-73.986097637849426,40.78605822569795],[-73.985429321269592,40.785413942184597],[-73.985081137732209,40.785921935110366],[-73.985198833254501,40.785966552197777],[-73.985170502389906,40.78601333415817],[-73.985216218673656,40.786030501816427],[-73.98525509797993,40.785976205511588],[-73.98524273937646,40.785972572653328],[-73.98524962933017,40.785963139855845],[-73.985281779186749,40.785978620950075],[-73.985240032884533,40.786035858136792],[-73.985683885242182,40.786222123919686],[-73.985717529004575,40.786175994668795],[-73.985765660297687,40.786196274858618],[-73.985682871922691,40.786309786213067],[-73.985636270930442,40.786290150649279],[-73.985670722564691,40.786242911993817],[-73.98520511880038,40.786047669212785],[-73.985211035607492,40.786039554883686],[-73.985162639946992,40.786020999769754],[-73.985131636312062,40.786060297019972],[-73.985016964065125,40.78601423719563],[-73.984655078830457,40.786534741807841],[-73.985743787901043,40.786570082854738],[-73.98589227228328,40.786426529019593],[-73.985942854994988,40.786452847880334],[-73.985949561556794,40.78648711396653],[-73.985812373526713,40.786616865357047],[-73.985135209703174,40.78658761889551],[-73.984619428584324,40.786586016349787],[-73.981952458164173,40.790393724337193],[-73.972823037363767,40.803428052816756],[-73.971036786332192,40.805918478839672],[-73.966701,40.804169000000186],[-73.959647,40.801156000000113],[-73.958508540159471,40.800682279767472],[-73.95853274080838,40.800491362464697],[-73.958357552055688,40.800369095633819]]]}),\\r\\n        \\'Upper East Side\\',   dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.943592454622546,40.782747908206574],[-73.943648235390199,40.782656161333449],[-73.943870759887162,40.781273026571704],[-73.94345932494096,40.780048275653243],[-73.943213862652243,40.779317588660199],[-73.943004239504688,40.779639495474292],[-73.942716005450905,40.779544169476175],[-73.942712374762181,40.779214856940001],[-73.942535563208608,40.779090956062532],[-73.942893408188027,40.778614093246276],[-73.942438481745029,40.777315235766039],[-73.942244919522594,40.777104088947254],[-73.942074188038887,40.776917846977142],[-73.942002667222781,40.776185317382648],[-73.942620205199006,40.775180871576474],[-73.94285645694552,40.774796600349191],[-73.94293043781397,40.774676268036011],[-73.945870899588215,40.771692257932997],[-73.946618690150586,40.77093339256956],[-73.948664164778933,40.768857624399587],[-73.950069793030679,40.767025088383498],[-73.954418260786071,40.762184104951245],[-73.95650786241211,40.760285256574043],[-73.958787773424007,40.758213471309809],[-73.973015157270069,40.764278692864671],[-73.955760332998182,40.787906554459667],[-73.944023,40.782960000000301],[-73.943592454622546,40.782747908206574]]]}),\\r\\n    ];\\r\\nlet Coordinates = \\r\\n    datatable(longitude:real, latitude:real)\\r\\n    [\\r\\n        real(-73.9741), 40.7914, // Upper West Side\\r\\n        real(-73.9950), 40.7340, // Greenwich Village\\r\\n        real(-73.9584), 40.7688, // Upper East Side\\r\\n    ];\\r\\nlet Level = 16;\\r\\nPolygons\\r\\n| extend covering = geo_polygon_to_s2cells(polygon, Level) // cover every polygon with s2 cell token array\\r\\n| mv-expand covering to typeof(string)                     // expand cells array such that every row will have one cell mapped to its polygon\\r\\n| join kind=inner hint.strategy=broadcast                  // assume that Polygons count is small (In some specific case)\\r\\n(\\r\\n    Coordinates\\r\\n    | extend covering = geo_point_to_s2cell(longitude, latitude, Level) // cover point with cell\\r\\n) on covering // join on the cell, this filters out rows of point and polygons where the point definitely does not belong to the polygon\\r\\n| where geo_point_in_polygon(longitude, latitude, polygon)\\r\\n| project longitude, latitude, description\\r\\n```\\r\\n\\r\\n|longitude|latitude|description|\\r\\n|---|---|---|\\r\\n|-73.9741|40.7914|Upper West Side|\\r\\n|-73.995|40.734|Greenwich Village|\\r\\n|-73.9584|40.7688|Upper East Side|\\r\\n\\r\\nThe following example filters out polygons that don\\'t intersect with the area of the polygon of interest. The maximum error is diagonal of s2cell length. This example is based on a polygonized earth at night raster file.\\r\\n\\r\\n```\\r\\nlet intersection_level_hint = 7;\\r\\nlet area_of_interest = dynamic({\"type\": \"Polygon\",\"coordinates\": [[[-73.94966125488281,40.79698248639272],[-73.95841598510742,40.800426144169315],[-73.98124694824219,40.76806170936614],[-73.97283554077148,40.7645513650551],[-73.94966125488281,40.79698248639272]]]});\\r\\nlet area_of_interest_covering = geo_polygon_to_s2cells(area_of_interest, intersection_level_hint);\\r\\nEarthAtNight\\r\\n| project value = features.properties.DN, polygon = features.geometry\\r\\n| extend covering = geo_polygon_to_s2cells(polygon, intersection_level_hint)\\r\\n| mv-apply c = covering to typeof(string) on\\r\\n(\\r\\n    summarize is_intersects = anyif(1, array_index_of(area_of_interest_covering, c) != -1)\\r\\n)\\r\\n| where is_intersects == 1\\r\\n| count\\r\\n```\\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|83|\\r\\n\\r\\nCount of cells that will be needed in order to cover some polygon with S2 cells of level 5.\\r\\n\\r\\n```\\r\\nlet polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[0,0],[0,50],[100,50],[0,0]]]});\\r\\nprint s2_cell_token_count = array_length(geo_polygon_to_s2cells(polygon, 5));\\r\\n```\\r\\n\\r\\n|s2_cell_token_count|\\r\\n|---|\\r\\n|286|\\r\\n\\r\\nCovering a large-area polygon with small-area cells returns null.\\r\\n\\r\\n```\\r\\nlet polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[0,0],[0,50],[100,50],[0,0]]]});\\r\\nprint geo_polygon_to_s2cells(polygon, 30);\\r\\n```\\r\\n\\r\\n|print_0|\\r\\n|---|\\r\\n||\\r\\n\\r\\nCovering a large-area polygon with small-area cells returns null.\\r\\n\\r\\n```\\r\\nlet polygon = dynamic({\"type\":\"Polygon\",\"coordinates\":[[[0,0],[0,50],[100,50],[0,0]]]});\\r\\nprint isnull(geo_polygon_to_s2cells(polygon, 30));\\r\\n```\\r\\n\\r\\n|print_0|\\r\\n|---|\\r\\n|1|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-polygon-to-s2cells-function\",\"geo-polygon-to-s2cells-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_s2cell_neighbors\",\"Calculates the S2 cell neighbors.\",\"Read more about [S2 cell hierarchy](https://s2geometry.io/devguide/s2cell_hierarchy).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`geo_s2cell_neighbors(`*s2cell*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n*s2cell*: S2 cell token string value as it was calculated by [geo_point_to_s2cell()](geo-point-to-s2cell-function.md). The S2 cell token maximum string length is 16 characters.\\r\\n\\r\\n## Returns\\r\\n\\r\\nAn array of S2 cell neighbors. If the S2 Cell is invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n> S2 Cell edges are spherical geodesics.\",'The following example calculates S2 cell neighbors.\\r\\n\\r\\n```\\r\\nprint neighbors = geo_s2cell_neighbors(\\'89c259\\')\\r\\n```\\r\\n\\r\\n|neighbors|\\r\\n|---|\\r\\n|[\"89c25d\",\"89c2f9\",\"89c251\",\"89c257\",\"89c25f\",\"89c25b\",\"89c2f7\",\"89c2f5\"]|\\r\\n\\r\\nThe following example calculates an array of input S2 cell with its neighbors.\\r\\n\\r\\n```\\r\\nlet s2cell = \\'89c259\\';\\r\\nprint cells = array_concat(pack_array(s2cell), geo_s2cell_neighbors(s2cell))\\r\\n```\\r\\n\\r\\n|cells|\\r\\n|---|\\r\\n|[\"89c259\",\"89c25d\",\"89c2f9\",\"89c251\",\"89c257\",\"89c25f\",\"89c25b\",\"89c2f7\",\"89c2f5\"]|\\r\\n\\r\\nThe following example calculates S2 cells polygons GeoJSON geometry collection.\\r\\n\\r\\n```\\r\\nlet s2cell = \\'89c259\\';\\r\\nprint cells = array_concat(pack_array(s2cell), geo_s2cell_neighbors(s2cell))\\r\\n| mv-expand cells to typeof(string)\\r\\n| project polygons = geo_s2cell_to_polygon(cells)\\r\\n| summarize arr = make_list(polygons)\\r\\n| project geojson = pack(\"type\", \"Feature\",\"geometry\", pack(\"type\", \"GeometryCollection\", \"geometries\", arr), \"properties\", pack(\"name\", \"polygons\"))\\r\\n```\\r\\n\\r\\n|geojson|\\r\\n|---|\\r\\n|{\"type\": \"Feature\",\"geometry\": {\"type\": \"GeometryCollection\",\"geometries\": [<br>  {\"type\": \"Polygon\",\"coordinates\": [[[  -74.030012249838478,  40.8012684339439],[  -74.030012249838478,  40.7222262918358],[  -73.935982114337421,  40.708880489804564],[  -73.935982114337421,  40.787917134506841],[  -74.030012249838478,  40.8012684339439]]]},<br>  {\"type\": \"Polygon\",\"coordinates\": [[[  -73.935982114337421,  40.708880489804564],[  -73.935982114337421,  40.629736433321796],[  -73.841906340776248,  40.616308079144915],[  -73.841906340776248,  40.695446474556284],[  -73.935982114337421,  40.708880489804564]]]},<br>  {\"type\": \"Polygon\",\"coordinates\": [[[  -74.1239959854733,  40.893471289549765],[  -74.1239959854733,  40.814531536204242],[  -74.030012249838478,  40.8012684339439],[  -74.030012249838478,  40.880202851376716],[  -74.1239959854733,  40.893471289549765]]]},<br>  {\"type\": \"Polygon\",\"coordinates\": [[[  -74.1239959854733,  40.735483949993387],[  -74.1239959854733,  40.656328734184143],[  -74.030012249838478,  40.643076628676461],[  -74.030012249838478,  40.7222262918358],[  -74.1239959854733,  40.735483949993387]]]},<br>  {\"type\": \"Polygon\",\"coordinates\": [[[  -74.1239959854733,  40.814531536204242],[  -74.1239959854733,  40.735483949993387],[  -74.030012249838478,  40.7222262918358],[  -74.030012249838478,  40.8012684339439],[  -74.1239959854733,  40.814531536204242]]]},<br>  {\"type\": \"Polygon\",\"coordinates\": [[[  -73.935982114337421,  40.787917134506841],[  -73.935982114337421,  40.708880489804564],[  -73.841906340776248,  40.695446474556284],[  -73.841906340776248,  40.774477568182071],[  -73.935982114337421,  40.787917134506841]]]},<br>  {\"type\": \"Polygon\",\"coordinates\": [[[  -74.030012249838478,  40.7222262918358],[  -74.030012249838478,  40.643076628676461],[  -73.935982114337421,  40.629736433321796],[  -73.935982114337421,  40.708880489804564],[  -74.030012249838478,  40.7222262918358]]]},<br>  {\"type\": \"Polygon\",\"coordinates\": [[[  -74.030012249838478,  40.880202851376716],[  -74.030012249838478,  40.8012684339439],[  -73.935982114337421,  40.787917134506841],[  -73.935982114337421,  40.866846163445771],[  -74.030012249838478,  40.880202851376716]]]},<br>  {\"type\": \"Polygon\",\"coordinates\": [[[  -73.935982114337421,  40.866846163445771],[  -73.935982114337421,  40.787917134506841],[  -73.841906340776248,  40.774477568182071],[  -73.841906340776248,  40.853401155678846],[  -73.935982114337421,  40.866846163445771]]]}]},<br>  \"properties\": {\"name\": \"polygons\"}}|\\r\\n\\r\\nThe following example calculates polygons union that represent S2 cell and its neighbors.\\r\\n\\r\\n```\\r\\nlet s2cell = \\'89c259\\';\\r\\nprint cells = array_concat(pack_array(s2cell), geo_s2cell_neighbors(s2cell))\\r\\n| mv-expand cells to typeof(string)\\r\\n| project polygons = geo_s2cell_to_polygon(cells)\\r\\n| summarize arr = make_list(polygons)\\r\\n| project polygon = geo_union_polygons_array(arr)\\r\\n```\\r\\n\\r\\n|polygon|\\r\\n|---|\\r\\n|{\"type\": \"Polygon\",\"coordinates\": [[[-73.841906340776248,40.695446474556284],[-73.841906340776248,40.774477568182071],[-73.841906340776248,40.853401155678846],[-73.935982114337421,40.866846163445771],[-74.030012249838478,40.880202851376716],[-74.1239959854733,40.893471289549758],[-74.1239959854733,40.814531536204242],[-74.1239959854733,40.735483949993387],[-74.1239959854733,40.656328734184143],[-74.030012249838478,40.643076628676461],[-73.935982114337421,40.629736433321796],[-73.841906340776248,40.616308079144915],[-73.841906340776248,40.695446474556284]]]}|\\r\\n\\r\\nThe following example returns true because of the invalid S2 Cell token input.\\r\\n\\r\\n```\\r\\nprint invalid = isnull(geo_s2cell_neighbors(\\'a\\'))\\r\\n```\\r\\n\\r\\n|invalid|\\r\\n|---|\\r\\n|1|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-s2cell-neighbors-function\",\"geo-s2cell-neighbors-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_s2cell_to_central_point\",\"Calculates the geospatial coordinates that represent the center of an S2 cell.\",\"Read more about [S2 cell hierarchy](https://s2geometry.io/devguide/s2cell_hierarchy).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`geo_s2cell_to_central_point(`*s2cell*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n*s2cell*: S2 cell token string value as it was calculated by [geo_point_to_s2cell()](geo-point-to-s2cell-function.md). The S2 cell token maximum string length is 16 characters.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe geospatial coordinate values in [GeoJSON Format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type. If the S2 cell token is invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n> The GeoJSON format specifies longitude first and latitude second.\",'```\\r\\nprint point = geo_s2cell_to_central_point(\"1234567\")\\r\\n| extend coordinates = point.coordinates\\r\\n| extend longitude = coordinates[0], latitude = coordinates[1]\\r\\n```\\r\\n\\r\\n|point|coordinates|longitude|latitude|\\r\\n|---|---|---|---|\\r\\n|{<br>  \"type\": \"Point\",<br>  \"coordinates\": [<br>    9.86830731850408,<br>    27.468392925827604<br>  ]<br>}|[<br>  9.86830731850408,<br>  27.468392925827604<br>]|9.86830731850408|27.4683929258276|\\r\\n\\r\\nThe following example returns a null result because of the invalid S2 cell token input.\\r\\n\\r\\n```\\r\\nprint point = geo_s2cell_to_central_point(\"a\")\\r\\n```\\r\\n\\r\\n|point|\\r\\n|---|\\r\\n||',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-s2cell-to-central-point-function\",\"geo-s2cell-to-central-point-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_s2cell_to_polygon\",\"Calculates the polygon that represents the S2 Cell rectangular area.\",\"Read more about [S2 Cells](https://s2geometry.io/devguide/s2cell_hierarchy).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`geo_s2cell_to_polygon(`*s2cell*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n*s2cell*: S2 Cell token string value as it was calculated by [geo_point_to_s2cell()](geo-point-to-s2cell-function.md). The S2 Cell token maximum string length is 16 characters.\\r\\n\\r\\n## Returns\\r\\n\\r\\nPolygon in [GeoJSON Format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type. If the s2cell is invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n> S2 Cell edges are spherical geodesics.\",'```\\r\\nprint s2cellPolygon = geo_s2cell_to_polygon(\"89c259\")\\r\\n```\\r\\n\\r\\n|s2cellPolygon|\\r\\n|---|\\r\\n|{<br>\"type\": \"Polygon\",<br>\"coordinates\": [[[-74.030012249838478, 40.8012684339439], [-74.030012249838478, 40.7222262918358], [-73.935982114337421, 40.708880489804564], [-73.935982114337421, 40.787917134506841], [-74.030012249838478, 40.8012684339439]]]<br>}|\\r\\n\\r\\nThe following example assembles GeoJSON geometry collection of S2 Cell polygons.\\r\\n\\r\\n```\\r\\ndatatable(lng:real, lat:real)\\r\\n[\\r\\n    -73.956683, 40.807907,\\r\\n    -73.916869, 40.818314,\\r\\n    -73.989148, 40.743273,\\r\\n]\\r\\n| project s2_hash = geo_point_to_s2cell(lng, lat, 10)\\r\\n| project s2_hash_polygon = geo_s2cell_to_polygon(s2_hash)\\r\\n| summarize s2_hash_polygon_lst = make_list(s2_hash_polygon)\\r\\n| project pack(\\r\\n    \"type\", \"Feature\",\\r\\n    \"geometry\", pack(\"type\", \"GeometryCollection\", \"geometries\", s2_hash_polygon_lst),\\r\\n    \"properties\", pack(\"name\", \"S2 Cell polygons collection\"))\\r\\n```\\r\\n\\r\\n|Column1|\\r\\n|---|\\r\\n|{<br>\"type\": \"Feature\",<br>\"geometry\": {\"type\": \"GeometryCollection\", \"geometries\": [<br>{\"type\": \"Polygon\", \"coordinates\": [[[-74.030012249838478, 40.880202851376716], [-74.030012249838478, 40.8012684339439], [-73.935982114337421, 40.787917134506841], [-73.935982114337421, 40.866846163445771], [-74.030012249838478, 40.880202851376716]]]},<br>{\"type\": \"Polygon\", \"coordinates\": [[[-73.935982114337421, 40.866846163445771], [-73.935982114337421, 40.787917134506841], [-73.841906340776248, 40.774477568182071], [-73.841906340776248, 40.853401155678846], [-73.935982114337421, 40.866846163445771]]]},<br>{\"type\": \"Polygon\", \"coordinates\": [[[-74.030012249838478, 40.8012684339439], [-74.030012249838478, 40.7222262918358], [-73.935982114337421, 40.708880489804564], [-73.935982114337421, 40.787917134506841], [-74.030012249838478, 40.8012684339439]]]}]<br>},<br> \"properties\": {\"name\": \"S2 Cell polygons collection\"}<br>}|\\r\\n\\r\\nThe following example returns a null result because of the invalid s2cell token input.\\r\\n\\r\\n```\\r\\nprint s2cellPolygon = geo_s2cell_to_polygon(\"a\")\\r\\n```\\r\\n\\r\\n|s2cellPolygon|\\r\\n|---|\\r\\n||',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-s2cell-to-polygon-function\",\"geo-s2cell-to-polygon-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_simplify_polygons_array\",\"Simplifies polygons by replacing nearly straight chains of short edges with a single long edge, while ensuring mutual boundaries consistency related to each other, on Earth.\",'## Syntax\\r\\n\\r\\n`geo_simplify_polygons_array(`*polygons*`, `*tolerance*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *polygons*: An array of polygons or multipolygons in the [GeoJSON format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type.\\r\\n* *tolerance*: An optional numeric that defines minimum distance in meters between any two vertices. Supported values are in the range [0, ~7,800,000 meters). If unspecified, the default value `10` is used.\\r\\n\\r\\n## Returns\\r\\n\\r\\nSimplified polygon or a multipolygon in the [GeoJSON format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type, with no two vertices with distance less than tolerance. If either the polygon or tolerance is invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n> * If input is a single polygon, please see [geo_polygon_simplify()](geo-polygon-simplify-function.md).\\r\\n> * The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/GandG/update/index.php?action=home) coordinate reference system.\\r\\n> * The [geodetic datum](https://en.wikipedia.org/wiki/Geodetic_datum) used for measurements on Earth is a sphere. Polygon edges are [geodesics](https://en.wikipedia.org/wiki/Geodesic) on the sphere.\\r\\n> * If input polygon edges are straight cartesian lines, consider using [geo_polygon_densify()](geo-polygon-densify-function.md) to convert planar edges to geodesics.\\r\\n> * If input is a multipolygon and contains more than one polygon, the result will be the area of polygons union.\\r\\n> * High tolerance may cause small polygon to disappear.\\r\\n\\r\\n**Polygon definition and constraints**\\r\\n\\r\\ndynamic({\"type\": \"Polygon\",\"coordinates\": [ LinearRingShell, LinearRingHole_1 ,..., LinearRingHole_N ]})\\r\\n\\r\\ndynamic({\"type\": \"MultiPolygon\",\"coordinates\": [[ LinearRingShell, LinearRingHole_1 ,..., LinearRingHole_N ] ,..., [LinearRingShell, LinearRingHole_1 ,..., LinearRingHole_M]]})\\r\\n\\r\\n* LinearRingShell is required and defined as a `counterclockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be only one shell.\\r\\n* LinearRingHole is optional and defined as a `clockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be any number of interior rings and holes.\\r\\n* LinearRing vertices must be distinct with at least three coordinates. The first coordinate must be equal to the last. At least four entries are required.\\r\\n* Coordinates [longitude,latitude] must be valid. Longitude must be a real number in the range [-180, +180] and latitude must be a real number in the range [-90, +90].\\r\\n* LinearRingShell encloses at most half of the sphere. LinearRing divides the sphere into two regions. The smaller of the two regions will be chosen.\\r\\n* LinearRing edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\\r\\n* LinearRings must not cross and must not share edges. LinearRings may share vertices.','The following example simplifies polygons with mutual borders (USA states), by removing vertices that are within 100 meters distance from each other.\\r\\n\\r\\n```\\r\\nUS_States\\r\\n| project polygon = features.geometry\\r\\n| summarize lst = make_list(polygon)\\r\\n| project polygons = geo_simplify_polygons_array(lst, 100)\\r\\n```\\r\\n\\r\\n|polygons|\\r\\n|---|\\r\\n|{ \"type\": \"MultiPolygon\", \"coordinates\": [ ... ]]}|\\r\\n\\r\\nThe following example returns True because one of the polygons is invalid.\\r\\n\\r\\n```\\r\\ndatatable(polygons:dynamic)\\r\\n[\\r\\n    dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9495,40.7969],[-73.95807,40.80068],[-73.98201,40.76825],[-73.97317,40.76455],[-73.9495,40.7969]]]}),\\r\\n    dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.94622,40.79249]]]}),\\r\\n    dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.97335,40.77274],[-73.9936,40.76630],[-73.97171,40.75655],[-73.97335,40.77274]]]})\\r\\n]\\r\\n| summarize arr = make_list(polygons)\\r\\n| project is_invalid_polygon = isnull(geo_simplify_polygons_array(arr))\\r\\n```\\r\\n\\r\\n|is_invalid_polygon|\\r\\n|---|\\r\\n|1|\\r\\n\\r\\nThe following example returns True because of the invalid tolerance.\\r\\n\\r\\n```\\r\\ndatatable(polygons:dynamic)\\r\\n[\\r\\n    dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9495,40.7969],[-73.95807,40.80068],[-73.98201,40.76825],[-73.97317,40.76455],[-73.9495,40.7969]]]}),\\r\\n    dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.94622,40.79249],[-73.96888,40.79282],[-73.9577,40.7789],[-73.94622,40.79249]]]}),\\r\\n    dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.97335,40.77274],[-73.9936,40.76630],[-73.97171,40.75655],[-73.97335,40.77274]]]})\\r\\n]\\r\\n| summarize arr = make_list(polygons)\\r\\n| project is_null = isnull(geo_simplify_polygons_array(arr, -1))\\r\\n```\\r\\n\\r\\n|is_null|\\r\\n|---|\\r\\n|1|\\r\\n\\r\\nThe following example returns True because high tolerance causes polygon to disappear.\\r\\n\\r\\n```\\r\\ndatatable(polygons:dynamic)\\r\\n[\\r\\n    dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9495,40.7969],[-73.95807,40.80068],[-73.98201,40.76825],[-73.97317,40.76455],[-73.9495,40.7969]]]}),\\r\\n    dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.94622,40.79249],[-73.96888,40.79282],[-73.9577,40.7789],[-73.94622,40.79249]]]}),\\r\\n    dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.97335,40.77274],[-73.9936,40.76630],[-73.97171,40.75655],[-73.97335,40.77274]]]})\\r\\n]\\r\\n| summarize arr = make_list(polygons)\\r\\n| project is_null = isnull(geo_simplify_polygons_array(arr, 10000))\\r\\n```\\r\\n\\r\\n|is_null|\\r\\n|---|\\r\\n|1|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-simplify-polygons-array-function\",\"geo-simplify-polygons-array-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_union_lines_array\",\"Calculates the union of lines or multilines on Earth.\",'## Syntax\\r\\n\\r\\n`geo_union_lines_array(`*lineStrings*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *lineStrings*: An array of lines or multilines in the [GeoJSON format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type.\\r\\n\\r\\n## Returns\\r\\n\\r\\nLine or a multiline in [GeoJSON Format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type. If any of the provided lines or multilines is invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n> * The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/GandG/update/index.php?action=home) coordinate reference system.\\r\\n> * The [geodetic datum](https://en.wikipedia.org/wiki/Geodetic_datum) used for measurements on Earth is a sphere. Polygon edges are [geodesics](https://en.wikipedia.org/wiki/Geodesic) on the sphere.\\r\\n> * If input line edges are straight cartesian lines, consider using [geo_line_densify()](geo-line-densify-function.md) in order to convert planar edges to geodesics.\\r\\n\\r\\n**LineString definition and constraints**\\r\\n\\r\\ndynamic({\"type\": \"LineString\",\"coordinates\": [ [lng_1,lat_1], [lng_2,lat_2] ,..., [lng_N,lat_N] ]})\\r\\n\\r\\ndynamic({\"type\": \"MultiLineString\",\"coordinates\": [ [ line_1, line_2 ,..., line_N ] ]})\\r\\n\\r\\n* LineString coordinates array must contain at least two entries.\\r\\n* Coordinates [longitude,latitude] must be valid where longitude is a real number in the range [-180, +180] and latitude is a real number in the range [-90, +90].\\r\\n* Edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.','The following example performs geospatial union on line rows.\\r\\n\\r\\n```\\r\\ndatatable(lines:dynamic)\\r\\n[\\r\\n    dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.95683884620665,40.80502891480884],[-73.95633727312088,40.8057171711177],[-73.95489156246185,40.80510200431311]]}),\\r\\n    dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.95633727312088,40.8057171711177],[-73.95489156246185,40.80510200431311],[-73.95537436008453,40.804413741624515]]}),\\r\\n    dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.95633727312088,40.8057171711177],[-73.95489156246185,40.80510200431311]]})\\r\\n]\\r\\n| summarize lines_arr = make_list(lines)\\r\\n| project lines_union = geo_union_lines_array(lines_arr)\\r\\n```\\r\\n\\r\\n|lines_union|\\r\\n|---|\\r\\n|{\"type\": \"LineString\", \"coordinates\": [[-73.956838846206651, 40.805028914808844], [-73.95633727312088, 40.8057171711177], [ -73.954891562461853, 40.80510200431312], [-73.955374360084534, 40.804413741624522]]}|\\r\\n\\r\\nThe following example performs geospatial union on line columns.\\r\\n\\r\\n```\\r\\ndatatable(line1:dynamic, line2:dynamic)\\r\\n[\\r\\n    dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.95683884620665,40.80502891480884],[-73.95633727312088,40.8057171711177],[-73.95489156246185,40.80510200431311]]}), dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.95633727312088,40.8057171711177],[-73.95489156246185,40.80510200431311],[-73.95537436008453,40.804413741624515]]})\\r\\n]\\r\\n| project lines_arr = pack_array(line1, line2)\\r\\n| project lines_union = geo_union_lines_array(lines_arr)\\r\\n```\\r\\n\\r\\n|lines_union|\\r\\n|---|\\r\\n|{\"type\": \"LineString\", \"coordinates\":[[-73.956838846206651, 40.805028914808844], [-73.95633727312088, 40.8057171711177], [-73.954891562461853, 40.80510200431312], [-73.955374360084534, 40.804413741624522]]}|\\r\\n\\r\\nThe following example returns True because one of the lines is invalid.\\r\\n\\r\\n```\\r\\ndatatable(lines:dynamic)\\r\\n[\\r\\n    dynamic({\"type\":\"LineString\",\"coordinates\":[[-73.95683884620665,40.80502891480884],[-73.95633727312088,40.8057171711177],[-73.95489156246185,40.80510200431311]]}),\\r\\n    dynamic({\"type\":\"LineString\",\"coordinates\":[[1, 1]]})\\r\\n]\\r\\n| summarize lines_arr = make_list(lines)\\r\\n| project invalid_union = isnull(geo_union_lines_array(lines_arr))\\r\\n```\\r\\n\\r\\n|invalid_union|\\r\\n|---|\\r\\n|True|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-union-lines-array-function\",\"geo-union-lines-array-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"geo_union_polygons_array\",\"Calculates the union of polygons or multipolygons on Earth.\",'## Syntax\\r\\n\\r\\n`geo_union_polygons_array(`*polygons*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *polygons*: An array of polygons or multipolygons in the [GeoJSON format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type.\\r\\n\\r\\n## Returns\\r\\n\\r\\nPolygon or a multipolygon in [GeoJSON Format](https://tools.ietf.org/html/rfc7946) and of a [dynamic](./scalar-data-types/dynamic.md) data type. If any of the provided polygons or multipolygons is invalid, the query will produce a null result.\\r\\n\\r\\n> [!NOTE]\\r\\n> * The geospatial coordinates are interpreted as represented by the [WGS-84](https://earth-info.nga.mil/GandG/update/index.php?action=home) coordinate reference system.\\r\\n> * The [geodetic datum](https://en.wikipedia.org/wiki/Geodetic_datum) used for measurements on Earth is a sphere. Polygon edges are [geodesics](https://en.wikipedia.org/wiki/Geodesic) on the sphere.\\r\\n> * If input polygon edges are straight cartesian lines, consider using [geo_polygon_densify()](geo-polygon-densify-function.md) to convert planar edges to geodesics.\\r\\n\\r\\n**Polygon definition and constraints**\\r\\n\\r\\ndynamic({\"type\": \"Polygon\",\"coordinates\": [ LinearRingShell, LinearRingHole_1 ,..., LinearRingHole_N ]})\\r\\n\\r\\ndynamic({\"type\": \"MultiPolygon\",\"coordinates\": [[ LinearRingShell, LinearRingHole_1 ,..., LinearRingHole_N ] ,..., [LinearRingShell, LinearRingHole_1 ,..., LinearRingHole_M]]})\\r\\n\\r\\n* LinearRingShell is required and defined as a `counterclockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be only one shell.\\r\\n* LinearRingHole is optional and defined as a `clockwise` ordered array of coordinates [[lng_1,lat_1],...,[lng_i,lat_i],...,[lng_j,lat_j],...,[lng_1,lat_1]]. There can be any number of interior rings and holes.\\r\\n* LinearRing vertices must be distinct with at least three coordinates. The first coordinate must be equal to the last. At least four entries are required.\\r\\n* Coordinates [longitude,latitude] must be valid. Longitude must be a real number in the range [-180, +180] and latitude must be a real number in the range [-90, +90].\\r\\n* LinearRingShell encloses at most half of the sphere. LinearRing divides the sphere into two regions. The smaller of the two regions will be chosen.\\r\\n* LinearRing edge length must be less than 180 degrees. The shortest edge between the two vertices will be chosen.\\r\\n* LinearRings must not cross and must not share edges. LinearRings may share vertices.','The following example performs geospatial union on polygon rows.\\r\\n\\r\\n```\\r\\ndatatable(polygons:dynamic)\\r\\n[\\r\\n    dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9495,40.7969],[-73.95807,40.80068],[-73.98201,40.76825],[-73.97317,40.76455],[-73.9495,40.7969]]]}),\\r\\n    dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.94622,40.79249],[-73.96888,40.79282],[-73.9577,40.7789],[-73.94622,40.79249]]]}),\\r\\n    dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.97335,40.77274],[-73.9936,40.76630],[-73.97171,40.75655],[-73.97335,40.77274]]]})\\r\\n]\\r\\n| summarize polygons_arr = make_list(polygons)\\r\\n| project polygons_union = geo_union_polygons_array(polygons_arr)\\r\\n```\\r\\n\\r\\n|polygons_union|\\r\\n|---|\\r\\n|{\"type\":\"Polygon\",\"coordinates\":[[[-73.972599326729608,40.765330371902991],[-73.960302383706178,40.782140794645024],[-73.9577,40.7789],[-73.94622,40.79249],[-73.9526593223173,40.792584227716468],[-73.9495,40.7969],[-73.95807,40.80068],[-73.9639277517478,40.792748258673875],[-73.96888,40.792819999999992],[-73.9662719791645,40.7895734224338],[-73.9803360309571,40.770518810606404],[-73.9936,40.7663],[-73.97171,40.756550000000004],[-73.972599326729608,40.765330371902991]]]}|\\r\\n\\r\\nThe following example performs geospatial union on polygon columns.\\r\\n\\r\\n```\\r\\ndatatable(polygon1:dynamic, polygon2:dynamic)\\r\\n[\\r\\n    dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9495,40.7969],[-73.95807,40.80068],[-73.98201,40.76825],[-73.97317,40.76455],[-73.9495,40.7969]]]}), dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.94622,40.79249],[-73.96888,40.79282],[-73.9577,40.7789],[-73.94622,40.79249]]]})\\r\\n]\\r\\n| project polygons_arr = pack_array(polygon1, polygon2)\\r\\n| project polygons_union = geo_union_polygons_array(polygons_arr)\\r\\n```\\r\\n\\r\\n|polygons_union|\\r\\n|---|\\r\\n|{\"type\":\"Polygon\",\"coordinates\":[[[-73.9495,40.7969],[-73.95807,40.80068],[-73.9639277517478,40.792748258673875],[-73.96888,40.792819999999992],[-73.9662719791645,40.7895734224338],[-73.98201,40.76825],[-73.97317,40.76455],[-73.960302383706178,40.782140794645024],[-73.9577,40.7789],[-73.94622,40.79249],[-73.9526593223173,40.792584227716468],[-73.9495,40.7969]]]}|\\r\\n\\r\\nThe following example returns True because one of the polygons is invalid.\\r\\n\\r\\n```\\r\\ndatatable(polygons:dynamic)\\r\\n[\\r\\n    dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.9495,40.7969],[-73.95807,40.80068],[-73.98201,40.76825],[-73.97317,40.76455],[-73.9495,40.7969]]]}),\\r\\n    dynamic({\"type\":\"Polygon\",\"coordinates\":[[[-73.94622,40.79249]]]})\\r\\n]\\r\\n| summarize polygons_arr = make_list(polygons)\\r\\n| project invalid_union = isnull(geo_union_polygons_array(polygons_arr))\\r\\n```\\r\\n\\r\\n|invalid_union|\\r\\n|---|\\r\\n|True|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/geo-union-polygons-array-function\",\"geo-union-polygons-array-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"getmonth\",\"Get the month number (1-12) from a datetime.\",\"Another alias: monthofyear()\",\"```\\r\\nprint month = getmonth(datetime(2015-10-12))\\r\\n```\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/getmonthfunction\",\"getmonthfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"getschema\",\"Produce a table that represents a tabular schema of the input.\",\"```\\r\\nT | summarize MyCount=count() by Country | getschema \\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `| ` `getschema`\",\"```\\r\\nStormEvents\\r\\n| getschema\\r\\n```\\r\\n\\r\\n|ColumnName|ColumnOrdinal|DataType|ColumnType|\\r\\n|---|---|---|---|\\r\\n|StartTime|0|System.DateTime|datetime|\\r\\n|EndTime|1|System.DateTime|datetime|\\r\\n|EpisodeId|2|System.Int32|int|\\r\\n|EventId|3|System.Int32|int|\\r\\n|State|4|System.String|string|\\r\\n|EventType|5|System.String|string|\\r\\n|InjuriesDirect|6|System.Int32|int|\\r\\n|InjuriesIndirect|7|System.Int32|int|\\r\\n|DeathsDirect|8|System.Int32|int|\\r\\n|DeathsIndirect|9|System.Int32|int|\\r\\n|DamageProperty|10|System.Int32|int|\\r\\n|DamageCrops|11|System.Int32|int|\\r\\n|Source|12|System.String|string|\\r\\n|BeginLocation|13|System.String|string|\\r\\n|EndLocation|14|System.String|string|\\r\\n|BeginLat|15|System.Double|real|\\r\\n|BeginLon|16|System.Double|real|\\r\\n|EndLat|17|System.Double|real|\\r\\n|EndLon|18|System.Double|real|\\r\\n|EpisodeNarrative|19|System.String|string|\\r\\n|EventNarrative|20|System.String|string|\\r\\n|StormSummary|21|System.Object|dynamic|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/getschemaoperator\",\"getschemaoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"gettype\",\"Returns the runtime type of its single argument.\",\"The runtime type may be different than the nominal (static) type for expressions whose nominal type is `dynamic`; in such cases `gettype()` can be useful to reveal the type of the actual value (how the value is encoded in memory).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`gettype(`*Expr*`)`\\r\\n\\r\\n## Returns\\r\\n\\r\\nA string representing the runtime type of its single argument.\",\"|Expression                          |Returns      |\\r\\n|------------------------------------|-------------|\\r\\n|`gettype(\\\"a\\\")`                      |`string`     |\\r\\n|`gettype(111)`                      |`long`       |\\r\\n|`gettype(1==1)`                     |`bool`       |\\r\\n|`gettype(now())`                    |`datetime`   |\\r\\n|`gettype(1s)`                       |`timespan`   |\\r\\n|`gettype(parse_json('1'))`           |`int`        |\\r\\n|`gettype(parse_json(' \\\"abc\\\" '))`     |`string`     |\\r\\n|`gettype(parse_json(' {\\\"abc\\\":1} '))` |`dictionary` | \\r\\n|`gettype(parse_json(' [1, 2, 3] '))` |`array`      |\\r\\n|`gettype(123.45)`                   |`real`       |\\r\\n|`gettype(guid(12e8b78d-55b4-46ae-b068-26d7a0080254))`|`guid`| \\r\\n|`gettype(parse_json(''))`            |`null`|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/gettypefunction\",\"gettypefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"getyear\",\"Returns the year part of the `datetime` argument.\",\"\",\"```\\r\\nT\\r\\n| extend year = getyear(datetime(2015-10-12))\\r\\n// year == 2015\\r\\n```\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/getyearfunction\",\"getyearfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"has\",\"Filters a record set for data with a case-insensitive string. `has` searches for indexed terms, where a [term](datatypes-string-operators.md#what-is-a-term) is three or more characters. If your term is fewer than three characters, the query scans the values in the column, which is slower than looking up the term in the term index.\",'The following table provides a comparison of the `has` operators:\\r\\n\\r\\n|Operator   |Description   |Case-Sensitive  |Example (yields `true`)  |\\r\\n|-----------|--------------|----------------|-------------------------|\\r\\n|[`has`](has-operator.md) |Right-hand-side (RHS) is a whole term in left-hand-side (LHS) |No |`\"North America\" has \"america\"`|\\r\\n|[`!has`](not-has-operator.md) |RHS isn\\'t a full term in LHS |No |`\"North America\" !has \"amer\"`|\\r\\n|[`has_cs`](has-cs-operator.md) |RHS is a whole term in LHS |Yes |`\"North America\" has_cs \"America\"`|\\r\\n|[`!has_cs`](not-has-cs-operator.md) |RHS isn\\'t a full term in LHS |Yes |`\"North America\" !has_cs \"amer\"`|\\r\\n\\r\\n> [!NOTE]\\r\\n> The following abbreviations are used in the table above:\\r\\n>\\r\\n> * RHS = right hand side of the expression\\r\\n> * LHS = left hand side of the expression\\r\\n\\r\\nFor further information about other operators and to determine which operator is most appropriate for your query, see [datatype string operators](datatypes-string-operators.md). \\r\\n\\r\\nCase-insensitive operators are currently supported only for ASCII-text. For non-ASCII comparison, use the [tolower()](tolowerfunction.md) function.\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n> [!NOTE]\\r\\n> Performance depends on the type of search and the structure of the data.\\r\\n\\r\\nFor faster results, use the case-sensitive version of an operator, for example, `has_cs`, not `has`. For best practices, see [Query best practices](best-practices.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *Column* `has` `(`*Expression*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T* - The tabular input whose records are to be filtered.\\r\\n* *Column* - The column to filter.\\r\\n* *Expression* - Scalar or literal expression.\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.','```\\r\\nStormEvents\\r\\n    | summarize event_count=count() by State\\r\\n    | where State has \"New\"\\r\\n    | where event_count > 10\\r\\n    | project State, event_count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|event_count|\\r\\n|-----|-----------|\\r\\n|NEW YORK|1,750|\\r\\n|NEW JERSEY|1,044|\\r\\n|NEW MEXICO|527|\\r\\n|NEW HAMPSHIRE|394|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/has-operator\",\"has-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"has_all\",\"Filters a record set for data with one or more case-insensitive search strings. `has` searches for indexed terms, where a [term](datatypes-string-operators.md#what-is-a-term) is three or more characters. If your term is fewer than three characters, the query scans the values in the column, which is slower than looking up the term in the term index.\",\"For more information about other operators and to determine which operator is most appropriate for your query, see [datatype string operators](datatypes-string-operators.md).\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n> [!NOTE]\\r\\n> Performance depends on the type of search and the structure of the data.\\r\\n\\r\\nFor faster results, use the case-sensitive version of an operator, for example, `has_cs`, not `has`. For best practices, see [Query best practices](best-practices.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *Column* `has_all` `(`*list of scalar expressions*`)`   \\r\\n*T* `|` `where` *Column* `has_all` `(`*tabular expression*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T*: Tabular input whose records are to be filtered.\\r\\n* *Column*: Column to filter.\\r\\n* *list of expressions*: Comma separated list of tabular, scalar, or literal expressions.  \\r\\n* *tabular expression*: Tabular expression that has a set of values (if expression has multiple columns, the first column is used).\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * The expression list can produce up to `256` values.\\r\\n> * For tabular expressions, the first column of the result set is selected.\",'### Use has_all operator with a list\\r\\n\\r\\n```\\r\\nStormEvents \\r\\n| where EpisodeNarrative has_all (\"cold\", \"strong\", \"afternoon\", \"hail\")\\r\\n| summarize Count=count() by EventType\\r\\n| top 3 by Count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|EventType|Count|\\r\\n|---|---|\\r\\n|Thunderstorm Wind|517|\\r\\n|Hail|392|\\r\\n|Flash Flood|24|\\r\\n\\r\\n### Use has_all operator with a dynamic array\\r\\n\\r\\nThe same result can be achieved using a dynamic array notation:\\r\\n\\r\\n```\\r\\nlet keywords = dynamic([\"cold\", \"strong\", \"afternoon\", \"hail\"]);\\r\\nStormEvents \\r\\n| where EpisodeNarrative has_all (keywords)\\r\\n| summarize Count=count() by EventType\\r\\n| top 3 by Count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|EventType|Count|\\r\\n|---|---|\\r\\n|Thunderstorm Wind|517|\\r\\n|Hail|392|\\r\\n|Flash Flood|24|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/has-all-operator\",\"has-all-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"has_any\",\"Filters a record set for data with any of a set of case-insensitive strings. `has` searches for indexed terms, where a [term](datatypes-string-operators.md#what-is-a-term) is three or more characters. If your term is fewer than three characters, the query scans the values in the column, which is slower than looking up the term in the term index.\",\"For more information about other operators and to determine which operator is most appropriate for your query, see [datatype string operators](datatypes-string-operators.md).\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n> [!NOTE]\\r\\n> Performance depends on the type of search and the structure of the data.\\r\\n\\r\\nFor faster results, use the case-sensitive version of an operator, for example, `has_cs`, not `has`. For best practices, see [Query best practices](best-practices.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *Column* `has_any` `(`*list of scalar expressions*`)`   \\r\\n*T* `|` `where` *Column* `has_any` `(`*tabular expression*`)`   \\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T* - Tabular input whose records are to be filtered.\\r\\n* *Column* - Column to filter.\\r\\n* *list of expressions* - Comma separated list of scalar or literal expressions\\r\\n* *tabular expression* - Tabular expression that has a set of values (if expression has multiple columns, the first column is used)\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`\\r\\n\\r\\n## Notes\\r\\n\\r\\n* The expression list can produce up to `10,000` values.    \\r\\n* For tabular expressions, the first column of the result set is selected.\",'### Use has_any operator with a list \\r\\n\\r\\n```\\r\\nStormEvents \\r\\n| where State has_any (\"CAROLINA\", \"DAKOTA\", \"NEW\") \\r\\n| summarize count() by State\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|count_|\\r\\n|---|---|\\r\\n|NEW YORK|1750|\\r\\n|NORTH CAROLINA|1721|\\r\\n|SOUTH DAKOTA|1567|\\r\\n|NEW JERSEY|1044|\\r\\n|SOUTH CAROLINA|915|\\r\\n|NORTH DAKOTA|905|\\r\\n|NEW MEXICO|527|\\r\\n|NEW HAMPSHIRE|394|\\r\\n\\r\\n### Use has_any operator with a dynamic array\\r\\n\\r\\n```\\r\\nlet states = dynamic([\\'south\\', \\'north\\']);\\r\\nStormEvents \\r\\n| where State has_any (states)\\r\\n| summarize count() by State\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|count_|\\r\\n|---|---|\\r\\n|NORTH CAROLINA|1721|\\r\\n|SOUTH DAKOTA|1567|\\r\\n|SOUTH CAROLINA|915|\\r\\n|NORTH DAKOTA|905|\\r\\n|ATLANTIC SOUTH|193|\\r\\n|ATLANTIC NORTH|188|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/has-anyoperator\",\"has-anyoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"has_any_index\",\"Searches the string for items specified in the array and returns the position in the array of the first item found in the string. `has` searches for indexed terms, where a [term](datatypes-string-operators.md#what-is-a-term) is three or more characters. If your term is fewer than three characters, the query scans the values in the column, which is slower than looking up the term in the term index.\",\"## Syntax\\r\\n\\r\\n`has_any_index` `(`*string*`,` *lookup_array*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *string*: Input string to search.\\r\\n* *lookup_array*: Array of scalar or literal expressions to look up. The value should be of type long, integer, double, decimal, string, or guid.\\r\\n\\r\\n## Returns\\r\\n\\r\\nZero-based index position of the first item in *lookup_array* that is found in *string*.\\r\\nReturns -1 if none of the array items were found in the string or if *lookup_array* is empty.\",\"```\\r\\nprint\\r\\n idx1 = has_any_index(\\\"this is an example\\\", dynamic(['this', 'example']))  // first lookup found in input string\\r\\n , idx2 = has_any_index(\\\"this is an example\\\", dynamic(['not', 'example'])) // last lookup found in input string\\r\\n , idx3 = has_any_index(\\\"this is an example\\\", dynamic(['not', 'found'])) // no lookup found in input string\\r\\n , idx4 = has_any_index(\\\"Example number 2\\\", range(1, 3, 1)) // Lookup array of integers\\r\\n , idx5 = has_any_index(\\\"this is an example\\\", dynamic([]))  // Empty lookup array\\r\\n```\\r\\n\\r\\n|idx1|idx2|idx3|idx4|idx5|\\r\\n|----|----|----|----|----|\\r\\n| 0  | 1 | -1 |1 | -1 |\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/has-any-index-function\",\"has-any-index-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"has_any_ipv4\",\"Returns a value indicating whether one of specified IPv4 addresses appears in a text.\",'IP address entrances in a text must be properly delimited with non-alphanumeric characters. For example, properly delimited IP addresses are:\\r\\n\\r\\n* \"These requests came from: 192.168.1.1, 10.1.1.115 and 10.1.1.201\"\\r\\n * \"05:04:54 127.0.0.1 GET /favicon.ico 404\"\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`has_any_ipv4(`*text* `,` *ip_address* [ `,` *ip_address* ...] `)`     \\r\\n\\r\\n`has_any_ipv4(`*text* `,` *ip_addresses* `)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *text*: The value containing the text to search in.\\r\\n* *ip_address*: String value containing the IP address to look for.\\r\\n* *ip_addresses*: Dynamic array containing the list of IP addresses to look for.\\r\\n\\r\\n## Returns\\r\\n\\r\\n`true` if one of specified IP addresses is a valid IPv4 address, and it was found in *text*. Otherwise, the function returns `false`.',\"```\\r\\nhas_any_ipv4('05:04:54 127.0.0.1 GET /favicon.ico 404', '127.0.0.1', '127.0.0.2') // true\\r\\n\\r\\nhas_any_ipv4('05:04:54 127.0.0.256 GET /favicon.ico 404', dynamic([\\\"127.0.0.256\\\", \\\"192.168.1.1\\\"])) // false, invalid IPv4 address\\r\\n\\r\\nhas_any_ipv4('05:04:54127.0.0.1 GET /favicon.ico 404', '127.0.0.1', '192.168.1.1') // false, improperly delimited IP address\\r\\n```\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/has-any-ipv4-function\",\"has-any-ipv4-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"has_any_ipv4_prefix\",\"Returns a value indicating whether one of specified IPv4 address prefixes appears in a text.\",'A valid IP address prefix is either a complete IPv4 address (`192.168.1.11`) or its prefix ending with a dot (`192.`, `192.168.` or `192.168.1.`).\\r\\n\\r\\nIP address entrances in a text must be properly delimited with non-alphanumeric characters. For example, properly delimited IP addresses are:\\r\\n\\r\\n* \"These requests came from: 192.168.1.1, 10.1.1.115 and 10.1.1.201\"\\r\\n * \"05:04:54 127.0.0.1 GET /favicon.ico 404\"\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`has_any_ipv4_prefix(`*text* `,` *ip_address_prefix* [`,` *ip_address_prefix* ...] `)`     \\r\\n\\r\\n`has_any_ipv4_prefix(`*text* `,` *ip_address_prefixes* `)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *text*: The value containing the text to search in.\\r\\n* *ip_address_prefix*: String value containing the IP address prefix to look for.\\r\\n* *ip_address_prefixes*: Dynamic array containing IP address prefixes to look for.\\r\\n\\r\\n## Returns\\r\\n\\r\\n`true` if the one of specified IP address prefixes is a valid IPv4 address prefix, and it was found in *text*. Otherwise, the function returns `false`.',\"```\\r\\nhas_any_ipv4_prefix('05:04:54 127.0.0.1 GET /favicon.ico 404', '127.0.', '192.168.') // true\\r\\n\\r\\nhas_any_ipv4_prefix('05:04:54 127.0.0.1 GET /favicon.ico 404', dynamic([\\\"127.0\\\", \\\"192.168.\\\"])) // false, invalid IPv4 prefix\\r\\n\\r\\nhas_any_ipv4_prefix('05:04:54 127.0.0.256 GET /favicon.ico 404', '127.0.', '192.168.') // false, invalid IPv4 address\\r\\n\\r\\nhas_any_ipv4_prefix('05:04:54127.0.0.1 GET /favicon.ico 404', '127.0.', '192.') // false, improperly delimited IP address\\r\\n```\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/has-any-ipv4-prefix-function\",\"has-any-ipv4-prefix-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"has_cs_\",\"Filters a record set for data with a case-sensitive search string. `has` searches for indexed terms, where a [term](datatypes-string-operators.md#what-is-a-term) is three or more characters. If your term is fewer than three characters, the query scans the values in the column, which is slower than looking up the term in the term index.\",'The following table provides a comparison of the `has` operators:\\r\\n\\r\\n|Operator   |Description   |Case-Sensitive  |Example (yields `true`)  |\\r\\n|-----------|--------------|----------------|-------------------------|\\r\\n|[`has`](has-operator.md) |Right-hand-side (RHS) is a whole term in left-hand-side (LHS) |No |`\"North America\" has \"america\"`|\\r\\n|[`!has`](not-has-operator.md) |RHS isn\\'t a full term in LHS |No |`\"North America\" !has \"amer\"`|\\r\\n|[`has_cs`](has-cs-operator.md) |RHS is a whole term in LHS |Yes |`\"North America\" has_cs \"America\"`|\\r\\n|[`!has_cs`](not-has-cs-operator.md) |RHS isn\\'t a full term in LHS |Yes |`\"North America\" !has_cs \"amer\"`|\\r\\n\\r\\n> [!NOTE]\\r\\n> The following abbreviations are used in the table above:\\r\\n>\\r\\n> * RHS = right hand side of the expression\\r\\n> * LHS = left hand side of the expression\\r\\n\\r\\nFor further information about other operators and to determine which operator is most appropriate for your query, see [datatype string operators](datatypes-string-operators.md). \\r\\n\\r\\nCase-insensitive operators are currently supported only for ASCII-text. For non-ASCII comparison, use the [tolower()](tolowerfunction.md) function.\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n> [!NOTE]\\r\\n> Performance depends on the type of search and the structure of the data.\\r\\n\\r\\nFor faster results, use the case-sensitive version of an operator, for example, `has_cs`, not `has`. For best practices, see [Query best practices](best-practices.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *Column* `has_cs` `(`*Expression*`)`   \\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T* - The tabular input whose records are to be filtered.\\r\\n* *Column* - The column to filter.\\r\\n* *Expression* - Scalar or literal expression.\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.','```\\r\\nStormEvents\\r\\n    | summarize event_count=count() by State\\r\\n    | where State has_cs \"New\"\\r\\n    | count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Count|\\r\\n|-----|\\r\\n|0|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/has-cs-operator\",\"has-cs-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"has_ipv4\",\"Returns a value indicating whether a specified IPv4 address appears in a text.\",'IP address entrances in a text must be properly delimited with non-alphanumeric characters. For example, properly delimited IP addresses are:\\r\\n\\r\\n* \"These requests came from: 192.168.1.1, 10.1.1.115 and 10.1.1.201\"\\r\\n * \"05:04:54 127.0.0.1 GET /favicon.ico 404\"\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`has_ipv4(`*source* `,` *ip_address* `)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *source*: The value containing the text to search in.\\r\\n* *ip_address*: String value containing the IP address to look for.\\r\\n\\r\\n## Returns\\r\\n\\r\\n`true`  if the *ip_address* is a valid IPv4 address, and it was found in *source*. Otherwise, the function returns `false`.\\r\\n\\r\\n> [!TIP]\\r\\n>\\r\\n> * To search for many IPv4 addresses at once, use [has_any_ipv4()](has-any-ipv4-function.md) function.\\r\\n> * To search for IPv4 addresses prefix, use [has_ipv4_prefix()](has-ipv4-prefix-function.md) function.',\"```\\r\\nhas_ipv4('05:04:54 127.0.0.1 GET /favicon.ico 404', '127.0.0.1') // true\\r\\n\\r\\nhas_ipv4('05:04:54 127.0.0.256 GET /favicon.ico 404', '127.0.0.256') // false, invalid IPv4 address\\r\\n\\r\\nhas_ipv4('05:04:54127.0.0.1 GET /favicon.ico 404', '127.0.0.1') // false, improperly delimited IP address\\r\\n```\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/has-ipv4-function\",\"has-ipv4-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"has_ipv4_prefix\",\"Returns a value indicating whether a specified IPv4 address prefix appears in a text.\",'A valid IP address prefix is either a complete IPv4 address (`192.168.1.11`) or its prefix ending with a dot (`192.`, `192.168.` or `192.168.1.`).\\r\\n\\r\\nIP address entrances in a text must be properly delimited with non-alphanumeric characters. For example, properly delimited IP addresses are:\\r\\n\\r\\n* \"These requests came from: 192.168.1.1, 10.1.1.115 and 10.1.1.201\"\\r\\n * \"05:04:54 127.0.0.1 GET /favicon.ico 404\"\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`has_ipv4_prefix(`*source* `,` *ip_address_prefix* `)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *source*: The value containing the text to search in.\\r\\n* *ip_address_prefix*: String value containing the IP address prefix to look for.\\r\\n\\r\\n## Returns\\r\\n\\r\\n`true` if the *ip_address_prefix* is a valid IPv4 address prefix, and it was found in *source*. Otherwise, the function returns `false`.\\r\\n\\r\\n> [!TIP]\\r\\n> To search for many IPv4 prefixes at once, use the [has_any_ipv4_prefix()](has-any-ipv4-prefix-function.md) function.',\"```\\r\\nhas_ipv4_prefix('05:04:54 127.0.0.1 GET /favicon.ico 404', '127.0.') // true\\r\\n\\r\\nhas_ipv4_prefix('05:04:54 127.0.0.1 GET /favicon.ico 404', '127.0') // false, invalid IPv4 prefix\\r\\n\\r\\nhas_ipv4_prefix('05:04:54 127.0.0.256 GET /favicon.ico 404', '127.0.') // false, invalid IPv4 address\\r\\n\\r\\nhas_ipv4_prefix('05:04:54127.0.0.1 GET /favicon.ico 404', '127.0.') // false, improperly delimited IP address\\r\\n```\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/has-ipv4-prefix-function\",\"has-ipv4-prefix-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"hash\",\"Returns a hash value for the input value.\",\"## Syntax\\r\\n\\r\\n`hash(`*source* [`,` *mod*]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *source*: The value to be hashed.\\r\\n* *mod*: An optional modulo value to be applied to the hash result, so that\\r\\n  the output value is between `0` and *mod* - 1\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe hash value of *source*. If *mod* is specified, the function returns the hash value modulo the value of *mod*.\\r\\n\\r\\n> [!WARNING]\\r\\n> The function uses the *xxhash64* algorithm to calculate the hash for each scalar, but this may change. We therefore only recommend using this function within a single query where all invocations of the function will use the same algorithm.\\r\\n>\\r\\n> If you need to persist a combined hash, we recommend using [hash_sha256()](sha256hashfunction.md), [hash_sha1()](sha1-hash-function.md), or [hash_md5()](md5hashfunction.md) and combining the hashes into a single hash with a [bitwise operator](binoperators.md). Note that these functions are more complex to calculate than `hash()`.\",'```\\r\\nhash(\"World\")                   // 1846988464401551951\\r\\nhash(\"World\", 100)              // 51 (1846988464401551951 % 100)\\r\\nhash(datetime(\"2015-01-01\"))    // 1380966698541616202\\r\\n```\\r\\n\\r\\nYou can use the `hash()` function for sampling data if the values in one of its columns are uniformly distributed. In the following example, *StartTime* values are uniformly distributed and the function is used to run a query on 10% of the data.\\r\\n\\r\\n```\\r\\nStormEvents \\r\\n| where hash(StartTime, 10) == 0\\r\\n| summarize StormCount = count(), TypeOfStorms = dcount(EventType) by State \\r\\n| top 5 by StormCount desc\\r\\n```',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/hashfunction\",\"hashfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"hash_combine\",\"Combines hash values of two or more hashes.\",\"## Syntax\\r\\n\\r\\n`hash_combine(`*h1* `,` *h2* [`,` *h3* ...]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *h1*: Long value representing the first hash value.\\r\\n* *h2*: Long value representing the second hash value.\\r\\n* *hN*: Long value representing Nth hash value.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe combined hash value of the given scalars.\",'```\\r\\nprint value1 = \"Hello\", value2 = \"World\"\\r\\n| extend h1 = hash(value1), h2=hash(value2)\\r\\n| extend combined = hash_combine(h1, h2)\\r\\n```\\r\\n\\r\\n|value1|value2|h1|h2|combined|\\r\\n|---|---|---|---|---|\\r\\n|Hello|World|753694413698530628|1846988464401551951|-1440138333540407281|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/hash_combinefunction\",\"hash_combinefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"hash_many\",\"Returns a combined hash value of multiple values.\",\"## Syntax\\r\\n\\r\\n`hash_many(`*s1* `,` *s2* [`,` *s3* ...]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *s1*, *s2*, ..., *sN*: input values that will be hashed together.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe [hash()](hashfunction.md) function is applied to each of the specified scalars. The resulting hashes are combined into a single hash and returned.\\r\\n\\r\\n> [!WARNING]\\r\\n> The function uses the *xxhash64* algorithm to calculate the hash for each scalar, but this may change. We therefore only recommend using this function within a single query where all invocations of the function will use the same algorithm.\\r\\n>\\r\\n> If you need to persist a combined hash, we recommend using [hash_sha256()](sha256hashfunction.md), [hash_sha1()](sha1-hash-function.md), or [hash_md5()](md5hashfunction.md) and combining the hashes into a single hash with a [bitwise operator](binoperators.md). Note that these functions are more complex to calculate than `hash()`.\",'```\\r\\nprint value1 = \"Hello\", value2 = \"World\"\\r\\n| extend combined = hash_many(value1, value2)\\r\\n```\\r\\n\\r\\n|value1|value2|combined|\\r\\n|---|---|---|\\r\\n|Hello|World|-1440138333540407281|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/hash_manyfunction\",\"hash_manyfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"hash_md5\",\"Returns an MD5 hash value for the input value.\",'## Syntax\\r\\n\\r\\n`hash_md5(`*source*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *source*: The value to be hashed.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe MD5 hash value of the given scalar, encoded as a hex string (a string\\r\\nof characters, each two of which represent a single Hex number between 0\\r\\nand 255).\\r\\n\\r\\n> [!WARNING]\\r\\n> The algorithm used by this function (MD5) is guaranteed\\r\\n> to not be modified in the future, but is very complex to calculate. Users that\\r\\n> need a \"lightweight\" hash function for the duration of a single query are advised\\r\\n> to use the function [hash()](./hashfunction.md) instead.','```\\r\\nprint \\r\\nh1=hash_md5(\"World\"),\\r\\nh2=hash_md5(datetime(2020-01-01))\\r\\n```\\r\\n\\r\\n|h1|h2|\\r\\n|---|---|\\r\\n|f5a7924e621e84c9280a9a27e1bcb7f6|786c530672d1f8db31fee25ea8a9390b|\\r\\n\\r\\nThe following example uses the `hash_md5()` function to aggregate StormEvents based on State\\'s MD5 hash value. \\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize StormCount = count() by State, StateHash=hash_md5(State)\\r\\n| top 5 by StormCount\\r\\n```\\r\\n\\r\\n|State|StateHash|StormCount|\\r\\n|---|---|---|\\r\\n|TEXAS|3b00dbe6e07e7485a1c12d36c8e9910a|4701|\\r\\n|KANSAS|e1338d0ac8be43846cf9ae967bd02e7f|3166|\\r\\n|IOWA|6d4a7c02942f093576149db764d4e2d2|2337|\\r\\n|ILLINOIS|8c00d9e0b3fcd55aed5657e42cc40cf1|2022|\\r\\n|MISSOURI|2d82f0c963c0763012b2539d469e5008|2016|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/md5hashfunction\",\"md5hashfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"hash_sha1\",\"Returns a sha1 hash value for the input value.\",'## Syntax\\r\\n\\r\\n`hash_sha1(`*source*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n*source*: The value to be hashed.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe sha1 hash value of the given scalar, encoded as a hex string (a string\\r\\nof characters, each two of which represent a single Hex number between 0\\r\\nand 255).\\r\\n\\r\\n> [!WARNING]\\r\\n> The algorithm used by this function (SHA1) is guaranteed\\r\\n> to not be modified in the future, but is very complex to calculate. If you\\r\\n> need a \"lightweight\" hash function for the duration of a single query, consider using [hash()](./hashfunction.md).','```\\r\\nprint \\r\\nh1=hash_sha1(\"World\"),\\r\\nh2=hash_sha1(datetime(2020-01-01))\\r\\n```\\r\\n\\r\\n|h1|h2|\\r\\n|---|---|\\r\\n|70c07ec18ef89c5309bbb0937f3a6342411e1fdd|e903e533f4d636b4fc0dcf3cf81e7b7f330de776|\\r\\n\\r\\nThe following example uses the `hash_sha1()` function to aggregate StormEvents based on State\\'s SHA1 hash value. \\r\\n\\r\\n```\\r\\nStormEvents \\r\\n| summarize StormCount = count() by State, StateHash=hash_sha1(State)\\r\\n| top 5 by StormCount desc\\r\\n```\\r\\n\\r\\n|State|StateHash|StormCount|\\r\\n|---|---|---|\\r\\n|TEXAS|3128d805194d4e6141766cc846778eeacb12e3ea|4701|\\r\\n|KANSAS|ea926e17098148921e472b1a760cd5a8117e84d6|3166|\\r\\n|IOWA|cacf86ec119cfd5b574bde5b59604774de3273db|2337|\\r\\n|ILLINOIS|03740763b16dae9d799097f51623fe635d8c4852|2022|\\r\\n|MISSOURI|26d938907240121b54d9e039473dacc96e712f61|2016|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/sha1-hash-function\",\"sha1-hash-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"hash_sha256\",\"Returns a sha256 hash value for the input value.\",'## Syntax\\r\\n\\r\\n`hash_sha256(`*source*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *source*: The value to be hashed.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe sha256 hash value of the given scalar, encoded as a hex string (a string\\r\\nof characters, each two of which represent a single Hex number between 0\\r\\nand 255).\\r\\n\\r\\n> [!WARNING]\\r\\n> The algorithm used by this function (SHA256) is guaranteed\\r\\n> to not be modified in the future, but is very complex to calculate. Users that\\r\\n> need a \"lightweight\" hash function for the duration of a single query are advised\\r\\n> to use the function [hash()](./hashfunction.md) instead.','```\\r\\nprint \\r\\nh1=hash_sha256(\"World\"),\\r\\nh2=hash_sha256(datetime(2020-01-01))\\r\\n```\\r\\n\\r\\n|h1|h2|\\r\\n|---|---|\\r\\n|78ae647dc5544d227130a0682a51e30bc7777fbb6d8a8f17007463a3ecd1d524|ba666752dc1a20eb750b0eb64e780cc4c968bc9fb8813461c1d7e750f302d71d|\\r\\n\\r\\nThe following example uses the `hash_sha256()` function to aggregate StormEvents based on State\\'s SHA256 hash value. \\r\\n\\r\\n```\\r\\nStormEvents \\r\\n| summarize StormCount = count() by State, StateHash=hash_sha256(State)\\r\\n| top 5 by StormCount desc\\r\\n```\\r\\n\\r\\n|State|StateHash|StormCount|\\r\\n|---|---|---|\\r\\n|TEXAS|9087f20f23f91b5a77e8406846117049029e6798ebbd0d38aea68da73a00ca37|4701|\\r\\n|KANSAS|c80e328393541a3181b258cdb4da4d00587c5045e8cf3bb6c8fdb7016b69cc2e|3166|\\r\\n|IOWA|f85893dca466f779410f65cd904fdc4622de49e119ad4e7c7e4a291ceed1820b|2337|\\r\\n|ILLINOIS|ae3eeabfd7eba3d9a4ccbfed6a9b8cff269dc43255906476282e0184cf81b7fd|2022|\\r\\n|MISSOURI|d15dfc28abc3ee73b7d1f664a35980167ca96f6f90e034db2a6525c0b8ba61b1|2016|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/sha256hashfunction\",\"sha256hashfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"hash_xxhash64\",\"Returns an xxhash64 value for the input value.\",\"## Syntax\\r\\n\\r\\n`hash_xxhash64(`*source* [`,` *mod*]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *source*: The value to be hashed.\\r\\n* *mod*: An optional modulo value to be applied to the hash result, so that\\r\\n  the output value is between `0` and *mod* - 1\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe hash value of *source*. If *mod* is specified, the function returns the hash value modulo the value of *mod*.\",'```\\r\\nxxhash64(\"World\")                   // 1846988464401551951\\r\\nxxhash64(\"World\", 100)              // 51 (1846988464401551951 % 100)\\r\\nxxhash64(datetime(\"2015-01-01\"))    // 1380966698541616202\\r\\n```',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/hash-xxhash64-function\",\"hash-xxhash64-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"hasprefix\",\"Filters a record set for data with a case-insensitive starting string. `has` searches for indexed terms, where a [term](datatypes-string-operators.md#what-is-a-term) is three or more characters. If your term is fewer than three characters, the query scans the values in the column, which is slower than looking up the term in the term index.\",'The following table provides a comparison of the `hasprefix` operators:\\r\\n\\r\\n|Operator   |Description   |Case-Sensitive  |Example (yields `true`)  |\\r\\n|-----------|--------------|----------------|-------------------------|\\r\\n|[`hasprefix`](hasprefix-operator.md) |RHS is a term prefix in LHS |No |`\"North America\" hasprefix \"ame\"`|\\r\\n|[`!hasprefix`](not-hasprefix-operator.md) |RHS isn\\'t a term prefix in LHS |No |`\"North America\" !hasprefix \"mer\"`|\\r\\n|[`hasprefix_cs`](hasprefix-cs-operator.md) |RHS is a term prefix in LHS |Yes |`\"North America\" hasprefix_cs \"Ame\"`|\\r\\n|[`!hasprefix_cs`](not-hasprefix-cs-operator.md) |RHS isn\\'t a term prefix in LHS |Yes |`\"North America\" !hasprefix_cs \"CA\"`|\\r\\n\\r\\n> [!NOTE]\\r\\n> The following abbreviations are used in the table above:\\r\\n>\\r\\n> * RHS = right hand side of the expression\\r\\n> * LHS = left hand side of the expression\\r\\n\\r\\nFor more information about other operators and to determine which operator is most appropriate for your query, see [datatype string operators](datatypes-string-operators.md). \\r\\n\\r\\nCase-insensitive operators are currently supported only for ASCII-text. For non-ASCII comparison, use the [tolower()](tolowerfunction.md) function.\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n> [!NOTE]\\r\\n> Performance depends on the type of search and the structure of the data.\\r\\n\\r\\nFor faster results, use the case-sensitive version of an operator, for example, `hasprefix_cs`, not `hasprefix`. For best practices, see [Query best practices](best-practices.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *Column* `hasprefix` `(`*Expression*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T* - The tabular input whose records are to be filtered.\\r\\n* *Column* - The column to filter.\\r\\n* *Expression* - Scalar or literal expression.\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.','### Use hasprefix operator\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n    | summarize event_count=count() by State\\r\\n    | where State hasprefix \"la\"\\r\\n    | project State, event_count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|event_count|\\r\\n|-----|-----------|\\r\\n|LAKE MICHIGAN|182|\\r\\n|LAKE HURON|63|\\r\\n|LAKE SUPERIOR|34|\\r\\n|LAKE ST CLAIR|32|\\r\\n|LAKE ERIE|27|\\r\\n|LAKE ONTARIO|8|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/hasprefix-operator\",\"hasprefix-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"hasprefix_cs\",\"Filters a record set for data with a case-sensitive starting string. `has` searches for indexed terms, where a [term](datatypes-string-operators.md#what-is-a-term) is three or more characters. If your term is fewer than three characters, the query scans the values in the column, which is slower than looking up the term in the term index.\",'The following table provides a comparison of the `has` operators:\\r\\n\\r\\n|Operator   |Description   |Case-Sensitive  |Example (yields `true`)  |\\r\\n|-----------|--------------|----------------|-------------------------|\\r\\n|[`hasprefix`](hasprefix-operator.md) |RHS is a term prefix in LHS |No |`\"North America\" hasprefix \"ame\"`|\\r\\n|[`!hasprefix`](not-hasprefix-operator.md) |RHS isn\\'t a term prefix in LHS |No |`\"North America\" !hasprefix \"mer\"`|\\r\\n|[`hasprefix_cs`](hasprefix-cs-operator.md) |RHS is a term prefix in LHS |Yes |`\"North America\" hasprefix_cs \"Ame\"`|\\r\\n|[`!hasprefix_cs`](not-hasprefix-cs-operator.md) |RHS isn\\'t a term prefix in LHS |Yes |`\"North America\" !hasprefix_cs \"CA\"`|\\r\\n\\r\\n> [!NOTE]\\r\\n> The following abbreviations are used in the table above:\\r\\n>\\r\\n> * RHS = right hand side of the expression\\r\\n> * LHS = left hand side of the expression\\r\\n\\r\\nFor further information about other operators and to determine which operator is most appropriate for your query, see [datatype string operators](datatypes-string-operators.md). \\r\\n\\r\\n## Performance tips\\r\\n\\r\\n> [!NOTE]\\r\\n> Performance depends on the type of search and the structure of the data.\\r\\n\\r\\nFor faster results, use the case-sensitive version of an operator, for example, `hasprefix_cs`, not `hasprefix`. For best practices, see [Query best practices](best-practices.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *col* `hasprefix_cs` `(`*expression*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T* - The tabular input whose records are to be filtered.\\r\\n* *col* - The column to filter.\\r\\n* *expression* - Scalar or literal expression.\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.','```\\r\\nStormEvents\\r\\n    | summarize event_count=count() by State\\r\\n    | where State hasprefix_cs \"P\"\\r\\n    | count \\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Count|\\r\\n|-----|\\r\\n|3|\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n    | summarize event_count=count() by State\\r\\n    | where State hasprefix_cs \"P\"\\r\\n    | project State, event_count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|event_count|\\r\\n|-----|-----------|\\r\\n|PENNSYLVANIA|1687|\\r\\n|PUERTO RICO|192|\\r\\n|E PACIFIC|10|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/hasprefix-cs-operator\",\"hasprefix-cs-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"hassuffix\",\"Filters a record set for data with a case-insensitive ending string. `has` searches for indexed terms, where a [term](datatypes-string-operators.md#what-is-a-term) is three or more characters. If your term is fewer than three characters, the query scans the values in the column, which is slower than looking up the term in the term index.\",'The following table provides a comparison of the `hassuffix` operators:\\r\\n\\r\\n|Operator   |Description   |Case-Sensitive  |Example (yields `true`)  |\\r\\n|-----------|--------------|----------------|-------------------------|\\r\\n|[`hassuffix`](hassuffix-operator.md) |RHS is a term suffix in LHS |No |`\"North America\" hassuffix \"ica\"`|\\r\\n|[`!hassuffix`](not-hassuffix-operator.md) |RHS isn\\'t a term suffix in LHS |No |`\"North America\" !hassuffix \"americ\"`|\\r\\n|[`hassuffix_cs`](hassuffix-cs-operator.md)  |RHS is a term suffix in LHS |Yes |`\"North America\" hassuffix_cs \"ica\"`|\\r\\n|[`!hassuffix_cs`](not-hassuffix-cs-operator.md) |RHS isn\\'t a term suffix in LHS |Yes |`\"North America\" !hassuffix_cs \"icA\"`|\\r\\n\\r\\n> [!NOTE]\\r\\n> The following abbreviations are used in the table above:\\r\\n>\\r\\n> * RHS = right hand side of the expression\\r\\n> * LHS = left hand side of the expression\\r\\n\\r\\nFor further information about other operators and to determine which operator is most appropriate for your query, see [datatype string operators](datatypes-string-operators.md). \\r\\n\\r\\nCase-insensitive operators are currently supported only for ASCII-text. For non-ASCII comparison, use the [tolower()](tolowerfunction.md) function.\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n> [!NOTE]\\r\\n> Performance depends on the type of search and the structure of the data.\\r\\n\\r\\nFor faster results, use the case-sensitive version of an operator, for example, `hassuffix_cs`, not `hassuffix`. For best practices, see [Query best practices](best-practices.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *Column* `hassuffix` `(`*Expression*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T* - The tabular input whose records are to be filtered.\\r\\n* *Column* - The column to filter.\\r\\n* *Expression* - Scalar or literal expression.\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.','```\\r\\nStormEvents\\r\\n    | summarize event_count=count() by State\\r\\n    | where State hassuffix \"o\"\\r\\n    | project State, event_count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|event_count|\\r\\n|-----|-----------|\\r\\n|COLORADO|1654|\\r\\n|OHIO|1233|\\r\\n|GULF OF MEXICO|577|\\r\\n|NEW MEXICO|527|\\r\\n|IDAHO|247|\\r\\n|PUERTO RICO|192|\\r\\n|LAKE ONTARIO|8|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/hassuffix-operator\",\"hassuffix-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"hassuffix_cs\",\"Filters a record set for data with a case-sensitive ending string. `has` searches for indexed terms, where a [term](datatypes-string-operators.md#what-is-a-term) is three or more characters. If your term is fewer than three characters, the query scans the values in the column, which is slower than looking up the term in the term index.\",'The following table provides a comparison of the `hassuffix` operators:\\r\\n\\r\\n|Operator   |Description   |Case-Sensitive  |Example (yields `true`)  |\\r\\n|-----------|--------------|----------------|-------------------------|\\r\\n|[`hassuffix`](hassuffix-operator.md) |RHS is a term suffix in LHS |No |`\"North America\" hassuffix \"ica\"`|\\r\\n|[`!hassuffix`](not-hassuffix-operator.md) |RHS isn\\'t a term suffix in LHS |No |`\"North America\" !hassuffix \"americ\"`|\\r\\n|[`hassuffix_cs`](hassuffix-cs-operator.md)  |RHS is a term suffix in LHS |Yes |`\"North America\" hassuffix_cs \"ica\"`|\\r\\n|[`!hassuffix_cs`](not-hassuffix-cs-operator.md) |RHS isn\\'t a term suffix in LHS |Yes |`\"North America\" !hassuffix_cs \"icA\"`|\\r\\n\\r\\n> [!NOTE]\\r\\n> The following abbreviations are used in the table above:\\r\\n>\\r\\n> * RHS = right hand side of the expression\\r\\n> * LHS = left hand side of the expression\\r\\n\\r\\nFor further information about other operators and to determine which operator is most appropriate for your query, see [datatype string operators](datatypes-string-operators.md). \\r\\n\\r\\n## Performance tips\\r\\n\\r\\n> [!NOTE]\\r\\n> Performance depends on the type of search and the structure of the data.\\r\\n\\r\\nFor faster results, use the case-sensitive version of an operator, for example, `hassuffix_cs`, not `hassuffix`. For best practices, see [Query best practices](best-practices.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *col* `hassuffix_cs` `(`*expression*`)`   \\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T* - The tabular input whose records are to be filtered.\\r\\n* *col* - The column to filter.\\r\\n* *expression* - Scalar or literal expression.\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.','```\\r\\nStormEvents\\r\\n    | summarize event_count=count() by State\\r\\n    | where State hassuffix_cs \"AS\"\\r\\n    | where event_count > 2000\\r\\n    | project State, event_count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|event_count|\\r\\n|-----|-----------|\\r\\n|TEXAS|4701|\\r\\n|KANSAS|3166|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/hassuffix-cs-operator\",\"hassuffix-cs-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"hll\",\"Calculates the Intermediate results of [`dcount`](dcount-aggfunction.md) across the group only in context of aggregation inside [summarize](summarizeoperator.md).\",\"Read about the [underlying algorithm (*H*yper*L*og*L*og) and the estimation accuracy](#estimation-accuracy).\\r\\n\\r\\n[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`hll` `(`*Expr* [`,` *Accuracy*]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *Expr* |  string | &check; | Expression used for the aggregation calculation. |\\r\\n| *Accuracy* |   |   | Controls the balance between speed and accuracy. If unspecified, the default value is `1`. For supported values, see [Estimation accuracy](#estimation-accuracy). |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the intermediate results of distinct count of *`Expr`* across the group.\\r\\n\\r\\n> [!TIP]\\r\\n>\\r\\n>- You may use the aggregation function [`hll_merge`](hll-merge-aggfunction.md) to merge more than one `hll` intermediate results (it works on `hll` output only).\\r\\n>- You may use the function [`dcount_hll`](dcount-hllfunction.md), which will calculate the `dcount` from `hll` / `hll_merge` aggregation functions.\",'The following example returns the hll results of property damage based on the start time.\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKC7NzU0syqxKVcjIydFwScxNTE8NKMovSC0qqdRUSKpUSMrM0wguSSwqCcnMTdUxNMjVBACCSG7CQQAAAA==)**\\\\]**\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize hll(DamageProperty) by bin(StartTime,10m)\\r\\n```\\r\\n\\r\\nThe results table shown includes only the first 10 rows.\\r\\n\\r\\n| StartTime | hll_DamageProperty |\\r\\n|--|--|\\r\\n| 2007-01-01T00:20:00Z | [[1024,14],[\"3803688792395291579\"],[]] |\\r\\n| 2007-01-01T01:00:00Z | [[1024,14],[\"7755241107725382121\",\"-5665157283053373866\",\"3803688792395291579\",\"-1003235211361077779\"],[]] |\\r\\n| 2007-01-01T02:00:00Z | [[1024,14],[\"-1003235211361077779\",\"-5665157283053373866\",\"7755241107725382121\"],[]] |\\r\\n| 2007-01-01T02:20:00Z  | [[1024,14],[\"7755241107725382121\"],[]] |\\r\\n| 2007-01-01T03:30:00Z  | [[1024,14],[\"3803688792395291579\"],[]] |\\r\\n| 2007-01-01T03:40:00Z | [[1024,14],[\"-5665157283053373866\"],[]] |\\r\\n| 2007-01-01T04:30:00Z | [[1024,14],[\"3803688792395291579\"],[]] |\\r\\n| 2007-01-01T05:30:00Z | [[1024,14],[\"3803688792395291579\"],[]] |\\r\\n| 2007-01-01T06:30:00Z | [[1024,14],[\"1589522558235929902\"],[]] |\\r\\n\\r\\n## Estimation accuracy\\r\\n\\r\\n[!INCLUDE [data-explorer-estimation-accuracy](../../includes/data-explorer-estimation-accuracy.md)]',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/hll-aggfunction\",\"hll-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"hll_merge\",\"Merges `hll` results (scalar version of the aggregate version [`hll_merge()`](hll-merge-aggfunction.md)).\",\"Read about the [underlying algorithm (*H*yper*L*og*L*og) and estimation accuracy](#estimation-accuracy).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`hll_merge(` *Expr1*`,` *Expr2*`, ...)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*Expr*|string|&check;|Columns that have `hll` values to be merged.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns one `hll` value which is the result of merging the columns `*Exrp1*`, `*Expr2*`, ... `*ExprN*`.\",\"This example shows the value of the merged columns.\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA1WMQQ6DMAwE75X4wx6J6KE8gLdEiLi0iCTIGCmp+vg6gUtP1uzsmscwExKeHD16SET/wC60KTS3LygJBYeMQUudyhLuh/cjvz+E17rapE5vm8y9cr44m9LdOC40CTzxTO5UtkJbx9fmr+umeASx5ck5Mz9Hg5B+pwAAAA==)**\\\\]**\\r\\n\\r\\n```\\r\\nrange x from 1 to 10 step 1 \\r\\n| extend y = x + 10\\r\\n| summarize hll_x = hll(x), hll_y = hll(y)\\r\\n| project merged = hll_merge(hll_x, hll_y)\\r\\n| project dcount_hll(merged)\\r\\n```\\r\\n\\r\\n|`dcount_hll_merged`|\\r\\n|---|\\r\\n|20|\\r\\n\\r\\n## Estimation accuracy\\r\\n\\r\\n[!INCLUDE [data-explorer-estimation-accuracy](../../includes/data-explorer-estimation-accuracy.md)]\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/hllmergefunction\",\"hllmergefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"hourofday\",\"Returns the integer number representing the hour number of the given date\",\"```\\r\\nhourofday(datetime(2015-12-14 18:54)) == 18\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`hourofday(`*a_date*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* `a_date`: A `datetime`.\\r\\n\\r\\n## Returns\\r\\n\\r\\n`hour number` of the day (0-23).\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/hourofdayfunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"http_request\",\"The `http_request` (GET) and `http_request_post` (POST) plugins send an HTTP request and convert the response into a table.\",\"> [!IMPORTANT]\\r\\n> Both plugins are disabled by default, as they allow queries to send data\\r\\n> and the user's security token to external user-specified network endpoints.\\r\\n> Once enabled, both plugins are further subject to the configured\\r\\n> [callout policy](../management/calloutpolicy.md) that cluster admins\\r\\n> can use to granularly control which URIs the request can be sent to.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`evaluate` `http_request` `(` *Uri* [`,` *RequestHeaders* [`,` *Options*]] `)`\\r\\n\\r\\n`evaluate` `http_request_post` `(` *Uri* [`,` *RequestHeaders* [`,` *Options* [`,` *Content*]]] `)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *Uri* | string | &check; | The destination URI for the HTTP or HTTPS request. |\\r\\n| *RequestHeaders* | dynamic |  | A property bag containing [HTTP headers](#headers) to send with the request. |\\r\\n| *Options* | dynamic |  | A property bag containing additional properties of the request. |\\r\\n| *Content* | string |  | The body content to send with the request. The content is encoded in `UTF-8` and the media type for the `Content-Type` attribute is `application/json`. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nBoth plugins return a table that has a single record with the following dynamic columns:\\r\\n\\r\\n* *ResponseHeaders*: A property bag with the response header.\\r\\n* *ResponseBody*: The response body parsed as a value of type `dynamic`.\\r\\n\\r\\nIf the HTTP response indicates (via the `Content-Type` response header) that the media type is `application/json`,\\r\\nthe response body is automatically parsed as-if it's a JSON object. Otherwise, it's returned as-is.\\r\\n\\r\\n## Prerequisites\\r\\n\\r\\nBefore you use the `http_request` and `http_request_post` plugins, make sure that requests meet the following requirements:\\r\\n\\r\\n* The specified *Uri* value must be a destination that is enabled for `webapi` callout by the [Callout policy](../management/calloutpolicy.md). Otherwise, running the query results in an error.\\r\\n* If you're using authentication, you must use the HTTPS protocol. Attempts to use HTTP with authentication enabled results in an error.\\r\\n\\r\\n## Authentication\\r\\n\\r\\nYou can use the query arguments to specify authentication parameters for the `http_request` and `http_request_post` plugins. The following scenarios are supported:\\r\\n\\r\\n| Argument | Description |\\r\\n|--|--|\\r\\n| *Uri* | The URI to authenticate with. |\\r\\n| *RequestHeaders* | Using the HTTP standard `Authorization` header or any custom header supported by the web service. |\\r\\n\\r\\n<!--\\r\\n| *Options* | Using the HTTP standard `Authorization` header.<br />If you want to use Azure Active Directory (Azure AD) authentication, you must use an HTTPS URI for the request and set the following values:<br />* `azure_active_directory` to `Active Directory Integrated`<br />* `AadResourceId` to the Azure AD ResourceId value of the target web service. |\\r\\n-->\\r\\n\\r\\n> [!WARNING]\\r\\n> Be extra careful not to send secret information, such as\\r\\n> authentication tokens, over HTTP connections. Additionally, if the query includes\\r\\n> confidential information, make sure that the relevant parts of the\\r\\n> query text are obfuscated so that they'll be omitted from any tracing.\\r\\n> For more information, see [obfuscated string literals](./scalar-data-types/string.md#obfuscated-string-literals).\\r\\n\\r\\n## Headers\\r\\n\\r\\nThe *RequestHeaders* argument can be used to add custom headers\\r\\nto the outgoing HTTP request. In addition to the standard HTTP request headers\\r\\nand the user-provided custom headers, the plugin also adds the following\\r\\ncustom headers:\\r\\n\\r\\n| Name | Description |\\r\\n|--|--|\\r\\n| `x-ms-client-request-id` | A correlation ID that identifies the request. Multiple invocations of the plugin in the same query will all have the same ID. |\\r\\n| `x-ms-readonly` | A flag indicating that the processor of this request shouldn't make any persistent changes. |\\r\\n\\r\\n> [!WARNING]\\r\\n> The `x-ms-readonly` flag is set for every HTTP request sent by the plugin\\r\\n> that was triggered by a query and not a control command. Web services should\\r\\n> treat any requests with this flag as one that does not make internal\\r\\n> state changes, otherwise they should refuse the request. This protects users from being\\r\\n> sent seemingly-innocent queries that end up making unwanted changes by using\\r\\n> a Kusto query as the launchpad for such attacks.\",\"The following example retrieves Azure retails prices for Azure Purview in west Europe:\\r\\n\\r\\n```\\r\\nlet Uri = \\\"https://prices.azure.com/api/retail/prices?$filter=serviceName eq 'Azure Purview' and location eq 'EU West'\\\";\\r\\nevaluate http_request(Uri)\\r\\n| project ResponseBody.Items\\r\\n| mv-expand ResponseBody_Items\\r\\n| evaluate bag_unpack(ResponseBody_Items)\\r\\n```\\r\\n\\r\\n| armRegionName |                   armSkuName                   | currencyCode |  effectiveStartDate  | isPrimaryMeterRegion | location |               meterId                |                      meterName                       |  productId   |                     productName                     | retailPrice | serviceFamily |  serviceId   |  serviceName  |       skuId       |                 skuName                  | tierMinimumUnits |    type     | unitOfMeasure | unitPrice |\\r\\n|---------------|------------------------------------------------|--------------|----------------------|----------------------|----------|--------------------------------------|------------------------------------------------------|--------------|-----------------------------------------------------|-------------|---------------|--------------|---------------|-------------------|------------------------------------------|------------------|-------------|---------------|-----------|\\r\\n| westeurope    | Data Insights                                  | USD          | 2022-06-01T00:00:00Z | false                | EU West  | 8ce915f7-20db-564d-8cc3-5702a7c952ab | Data Insights Insights Report Consumption            | DZH318Z08M22 | Azure Purview Data Map                              |        0.21 | Analytics     | DZH318Q66D0F | Azure Purview | DZH318Z08M22/006C | Catalog Insights                         |                0 | Consumption | 1 API Calls   |      0.21 |\\r\\n| westeurope    | Data Map Enrichment - Data Insights Generation | USD          | 2022-06-01T00:00:00Z | false                | EU West  | 7ce2db1d-59a0-5193-8a57-0431a10622b6 | Data Map Enrichment - Data Insights Generation vCore | DZH318Z08M22 | Azure Purview Data Map                              |        0.82 | Analytics     | DZH318Q66D0F | Azure Purview | DZH318Z08M22/005C | Data Map Enrichment - Insight Generation |                0 | Consumption | 1 Hour        |      0.82 |\\r\\n| westeurope    |                                                | USD          | 2021-09-28T00:00:00Z | false                | EU West  | 053e2dcb-82c0-5e50-86cd-1f1c8d803705 | PowerBI vCore                                        | DZH318Z08M23 | Azure Purview Scanning Ingestion and Classification |           0 | Analytics     | DZH318Q66D0F | Azure Purview | DZH318Z08M23/0005 | PowerBI                                  |                0 | Consumption | 1 Hour        |         0 |\\r\\n| westeurope    |                                                | USD          | 2021-09-28T00:00:00Z | false                | EU West  | a7f57f26-5f31-51e5-a5ed-ffc2b0da37b9 | Resource Set vCore                                   | DZH318Z08M22 | Azure Purview Data Map                              |        0.21 | Analytics     | DZH318Q66D0F | Azure Purview | DZH318Z08M22/000X | Resource Set                             |                0 | Consumption | 1 Hour        |      0.21 |\\r\\n| westeurope    |                                                | USD          | 2021-09-28T00:00:00Z | false                | EU West  | 5d157295-441c-5ea7-ba7c-5083026dc456 | SQL Server vCore                                     | DZH318Z08M23 | Azure Purview Scanning Ingestion and Classification |           0 | Analytics     | DZH318Q66D0F | Azure Purview | DZH318Z08M23/000F | SQL Server                               |                0 | Consumption | 1 Hour        |         0 |\\r\\n| westeurope    |                                                | USD          | 2021-09-28T00:00:00Z | false                | EU West  | 0745df0d-ce4f-52db-ac31-ac574d4dcfe5 | Standard Capacity Unit                               | DZH318Z08M22 | Azure Purview Data Map                              |       0.411 | Analytics     | DZH318Q66D0F | Azure Purview | DZH318Z08M22/0002 | Standard                                 |                0 | Consumption | 1 Hour        |     0.411 |\\r\\n| westeurope    |                                                | USD          | 2021-09-28T00:00:00Z | false                | EU West  | 811e3118-5380-5ee8-a5d9-01d48d0a0627 | Standard vCore                                       | DZH318Z08M23 | Azure Purview Scanning Ingestion and Classification |        0.63 | Analytics     | DZH318Q66D0F | Azure Purview | DZH318Z08M23/0009 | Standard                                 |                0 | Consumption | 1 Hour        |      0.63 |\\r\\n\\r\\nThe following example is for a hypothetical HTTPS web service that accepts additional request headers and must be authenticated to using Azure AD:\\r\\n\\r\\n```\\r\\nlet uri='https://example.com/node/js/on/eniac';\\r\\nlet headers=dynamic({'x-ms-correlation-vector':'abc.0.1.0', 'authorization':'bearer ...Azure-AD-bearer-token-for-target-endpoint...'});\\r\\nevaluate http_request_post(uri, headers)\\r\\n```\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/http-request-plugin\",\"http-request-plugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"iff\",\"Evaluates the first argument (the predicate), and returns the value of either the second or third arguments, depending on whether the predicate evaluated to `true` (second) or `false` (third).\",\"The second and third arguments must be of the same type.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`iff(`*predicate*`,` *ifTrue*`,` *ifFalse*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *predicate*: An expression that evaluates to a `boolean` value.\\r\\n* *ifTrue*: An expression that gets evaluated and its value returned from the function if *predicate* evaluates to `true`.\\r\\n* *ifFalse*: An expression that gets evaluated and its value returned from the function if *predicate* evaluates to `false`.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThis function returns the value of *ifTrue* if *predicate* evaluates to `true`,\\r\\nor the value of *ifFalse* otherwise.\",'<a href=\"https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRSK0oSc1LUQhKzMxTsFXITEvT0ADLhVQWpCoAxTSUPFITyyrBCpR0FJTcchKLMxTccvLzUyBcEENTE8gEG5EK0guS8MsvUShCiGgCrSooys9KTS5RCC5JLEnVUQBb45kCZYDs0wHbAgAA0TJCoAAAAA==\" target=\"_blank\">Click to run query<\\/a>\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| extend Rain = iff((EventType in (\"Heavy Rain\", \"Flash Flood\", \"Flood\")), \"Rain event\", \"Not rain event\")\\r\\n| project State, EventId, EventType, Rain\\r\\n```',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/ifffunction\",\"ifffunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"iif\",\"Evaluates the first argument (the predicate), and returns the value of either the second or third arguments, depending on whether the predicate evaluated to `true` (second) or `false` (third).\",\"The second and third arguments must be of the same type.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`iif(`*predicate*`,` *ifTrue*`,` *ifFalse*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *predicate*: An expression that evaluates to a `boolean` value.\\r\\n* *ifTrue*: An expression that gets evaluated and its value returned from the function if *predicate* evaluates to `true`.\\r\\n* *ifFalse*: An expression that gets evaluated and its value returned from the function if *predicate* evaluates to `false`.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThis function returns the value of *ifTrue* if *predicate* evaluates to `true`,\\r\\nor the value of *ifFalse* otherwise.\",'```\\r\\nT \\r\\n| extend day = iif(floor(Timestamp, 1d)==floor(now(), 1d), \"today\", \"anotherday\")\\r\\n```\\r\\n\\r\\nAn alias for [`iff()`](ifffunction.md).',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/iiffunction\",\"iiffunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"in\",\"Filters a record set for data with a case-sensitive string.\",'The following table provides a comparison of the `in` operators:\\r\\n\\r\\n|Operator   |Description   |Case-Sensitive  |Example (yields `true`)  |\\r\\n|-----------|--------------|----------------|-------------------------|\\r\\n|[`in`](in-cs-operator.md) |Equals to any of the elements |Yes |`\"abc\" in (\"123\", \"345\", \"abc\")`|\\r\\n|[`!in`](not-in-cs-operator.md) |Not equals to any of the elements |Yes | `\"bca\" !in (\"123\", \"345\", \"abc\")` |\\r\\n|[`in~`](inoperator.md) |Equals to any of the elements |No | `\"Abc\" in~ (\"123\", \"345\", \"abc\")` |\\r\\n|[`!in~`](not-in-operator.md) |Not equals to any of the elements |No | `\"bCa\" !in~ (\"123\", \"345\", \"ABC\")` |\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * In tabular expressions, the first column of the result set is selected.\\r\\n> * The expression list can produce up to `1,000,000` values.\\r\\n> * Nested arrays are flattened into a single list of values. For example, `x in (dynamic([1,[2,3]]))` becomes `x in (1,2,3)`.\\r\\n\\r\\nFor further information about other operators and to determine which operator is most appropriate for your query, see [datatype string operators](datatypes-string-operators.md). \\r\\n\\r\\n## Performance tips\\r\\n\\r\\n> [!NOTE]\\r\\n> Performance depends on the type of search and the structure of the data.\\r\\n\\r\\nFor faster results, use the case-sensitive version of an operator, for example, `in`, not `in~`. For best practices, see [Query best practices](best-practices.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *col* `in` `(`*list of scalar expressions*`)`   \\r\\n*T* `|` `where` *col* `in` `(`*tabular expression*`)`   \\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T* - The tabular input whose records are to be filtered.\\r\\n* *col* - The column to filter.\\r\\n* *list of expressions* - A comma-separated list of tabular, scalar, or literal expressions.\\r\\n* *tabular expression* - A tabular expression that has a set of values. If the expression has multiple columns, the first column is used.\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.','### Use in operator\\r\\n\\r\\n```\\r\\nStormEvents \\r\\n| where State in (\"FLORIDA\", \"GEORGIA\", \"NEW YORK\") \\r\\n| count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|4775|  \\r\\n\\r\\n### Use dynamic array\\r\\n\\r\\n```\\r\\nlet states = dynamic([\\'FLORIDA\\', \\'ATLANTIC SOUTH\\', \\'GEORGIA\\']);\\r\\nStormEvents \\r\\n| where State in (states)\\r\\n| count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|3218|\\r\\n\\r\\n### Subquery\\r\\n\\r\\n```\\r\\n// Using subquery\\r\\nlet Top_5_States = \\r\\nStormEvents\\r\\n| summarize count() by State\\r\\n| top 5 by count_; \\r\\nStormEvents \\r\\n| where State in (Top_5_States) \\r\\n| count\\r\\n```\\r\\n\\r\\nThe same query can be written as:\\r\\n\\r\\n```\\r\\n// Inline subquery \\r\\nStormEvents \\r\\n| where State in (\\r\\n    ( StormEvents\\r\\n    | summarize count() by State\\r\\n    | top 5 by count_ )\\r\\n) \\r\\n| count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|14242|  \\r\\n\\r\\n### Top with other example\\r\\n\\r\\n```\\r\\nlet Lightning_By_State = materialize(StormEvents | summarize lightning_events = countif(EventType == \\'Lightning\\') by State);\\r\\nlet Top_5_States = Lightning_By_State | top 5 by lightning_events | project State; \\r\\nLightning_By_State\\r\\n| extend State = iif(State in (Top_5_States), State, \"Other\")\\r\\n| summarize sum(lightning_events) by State \\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n| State     | sum_lightning_events |\\r\\n|-----------|----------------------|\\r\\n| ALABAMA   | 29                   |\\r\\n| WISCONSIN | 31                   |\\r\\n| TEXAS     | 55                   |\\r\\n| FLORIDA   | 85                   |\\r\\n| GEORGIA   | 106                  |\\r\\n| Other     | 415                  |\\r\\n\\r\\n### Use a static list returned by a function\\r\\n\\r\\n```\\r\\nStormEvents | where State in (InterestingStates()) | count\\r\\n\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|4775|  \\r\\n\\r\\nThe function definition.\\r\\n\\r\\n```\\r\\n.show function InterestingStates\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Name|Parameters|Body|Folder|DocString|\\r\\n|---|---|---|---|---|\\r\\n|InterestingStates|()|{ dynamic([\"WASHINGTON\", \"FLORIDA\", \"GEORGIA\", \"NEW YORK\"]) }',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/in-cs-operator\",\"in-cs-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"in~\",\"Filters a record set for data with a case-insensitive string.\",'The following table provides a comparison of the `in` operators:\\r\\n\\r\\n|Operator   |Description   |Case-Sensitive  |Example (yields `true`)  |\\r\\n|-----------|--------------|----------------|-------------------------|\\r\\n|[`in`](in-cs-operator.md) |Equals to one of the elements |Yes |`\"abc\" in (\"123\", \"345\", \"abc\")`|\\r\\n|[`!in`](not-in-cs-operator.md) |Not equals to any of the elements |Yes | `\"bca\" !in (\"123\", \"345\", \"abc\")` |\\r\\n|[`in~`](inoperator.md) |Equals to any of the elements |No | `\"Abc\" in~ (\"123\", \"345\", \"abc\")` |\\r\\n|[`!in~`](not-in-operator.md) |Not equals to any of the elements |No | `\"bCa\" !in~ (\"123\", \"345\", \"ABC\")` |\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * In tabular expressions, the first column of the result set is selected.\\r\\n> * The expression list can produce up to `1,000,000` values.\\r\\n> * Nested arrays are flattened into a single list of values. For example, `x in (dynamic([1,[2,3]]))` becomes `x in (1,2,3)`.\\r\\n\\r\\nFor further information about other operators and to determine which operator is most appropriate for your query, see [datatype string operators](datatypes-string-operators.md). \\r\\n\\r\\nCase-insensitive operators are currently supported only for ASCII-text. For non-ASCII comparison, use the [tolower()](tolowerfunction.md) function.\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n> [!NOTE]\\r\\n> Performance depends on the type of search and the structure of the data.\\r\\n\\r\\nFor faster results, use the case-sensitive version of an operator, for example, `in`, not `in~`. \\r\\n\\r\\nIf you\\'re testing for the presence of a symbol or alphanumeric word that is bound by non-alphanumeric characters at the start or end of a field, for faster results use `has` or `in`. \\r\\n\\r\\nFor best practices, see [Query best practices](best-practices.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *col* `in~` `(` *list of scalar expressions* `)`\\r\\n*T* `|` `where` *col* `in~` `(` *tabular expression* `)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T* - The tabular input whose records are to be filtered.\\r\\n* *col* - The column to filter.\\r\\n* *list of expressions* - A comma-separated list of tabular, scalar, or literal expressions.\\r\\n* *tabular expression* - A tabular expression that has a set of values. If the expression has multiple columns, the first column is used.\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.','```\\r\\nStormEvents \\r\\n| where State in~ (\"FLORIDA\", \"georgia\", \"NEW YORK\") \\r\\n| count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|4775|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/inoperator\",\"inoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"indexof\",\"Reports the zero-based index of the first occurrence of a specified string within the input string.\",\"If lookup or input string isn't of *string* type, the function forcibly casts the value to *string*.\\r\\n\\r\\nFor more information, see [`indexof_regex()`](indexofregexfunction.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`indexof(`*source*`,`*lookup*`[,`*start_index*`[,`*length*`[,`*occurrence*`]]])`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *source*: Input string.  \\r\\n* *lookup*: String to look up.\\r\\n* *start_index*: Search start position. A negative value will offset the starting search position from the end of the *source* by this many steps: abs(*start_index*). Optional.\\r\\n* *length*: Number of character positions to examine. A value of -1 means unlimited length. Optional.\\r\\n* *occurrence*: The number of the occurrence. Default 1. Optional.\\r\\n\\r\\n## Returns\\r\\n\\r\\nZero-based index position of *lookup*.\\r\\n\\r\\nReturns -1 if the string isn't found in the input.\\r\\n\\r\\nFor irrelevant inputs (*occurrence* < 0 or  *length* < -1) - returns *null*.\",'```\\r\\nprint\\r\\n idx1 = indexof(\"abcdefg\",\"cde\")    // lookup found in input string\\r\\n , idx2 = indexof(\"abcdefg\",\"cde\",1,4) // lookup found in researched range \\r\\n , idx3 = indexof(\"abcdefg\",\"cde\",1,2) // search starts from index 1, but stops after 2 chars, so full lookup can\\'t be found\\r\\n , idx4 = indexof(\"abcdefg\",\"cde\",3,4) // search starts after occurrence of lookup\\r\\n , idx5 = indexof(\"abcdefg\",\"cde\",-5)  // negative start index\\r\\n , idx6 = indexof(1234567,5,1,4)       // two first parameters were forcibly casted to strings \"12345\" and \"5\"\\r\\n , idx7 = indexof(\"abcdefg\",\"cde\",2,-1)  // lookup found in input string\\r\\n , idx8 = indexof(\"abcdefgabcdefg\", \"cde\", 1, 10, 2)   // lookup found in input range\\r\\n , idx9 = indexof(\"abcdefgabcdefg\", \"cde\", 1, -1, 3)   // the third occurrence of lookup is not in researched range\\r\\n```\\r\\n\\r\\n|idx1|idx2|idx3|idx4|idx5|idx6|idx7|idx8|idx9|\\r\\n|----|----|----|----|----|----|----|----|----|\\r\\n|2   |2   |-1  |-1  | 2  |4   |2   |9   |-1  |',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/indexoffunction\",\"indexoffunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"indexof_regex\",\"Returns the zero-based index of the first occurrence of a specified lookup regular expression within the input string.\",\"See [`indexof()`](indexoffunction.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`indexof_regex(`*source*`,`*lookup*`[,`*start_index*`[,`*length*`[,`*occurrence*`]]])`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n|Arguments     | Description                                     |Required or Optional|\\r\\n|--------------|-------------------------------------------------|--------------------|\\r\\n|source        | Input string                                    |Required            |\\r\\n|lookup        | Regular expression lookup string.               |Required            |\\r\\n|start_index   | Search start position                           |Optional            |\\r\\n|length        | Number of character positions to examine. -1 defines an unlimited length |Optional            |\\r\\n|occurrence    | Find the index of the N-th appearance of the pattern. \\r\\n                 Default is 1, the index of the first occurrence |Optional            |\\r\\n\\r\\n## Returns\\r\\n\\r\\nZero-based index position of *lookup*.\\r\\n\\r\\n* Returns -1 if the string isn't found in the input.\\r\\n* Returns *null* if:\\r\\n     * start_index is less than 0.\\r\\n     * occurrence is less than 0.\\r\\n     * length parameter is less than -1.\\r\\n\\r\\n> [!NOTE]\\r\\n\\r\\n- Overlapping matches lookup aren't supported.\\r\\n- Regular expression strings may contain characters that require either escaping or using @'' string-literals.\",'```\\r\\nprint\\r\\n idx1 = indexof_regex(\"abcabc\", @\"a.c\") // lookup found in input string\\r\\n , idx2 = indexof_regex(\"abcabcdefg\", @\"a.c\", 0, 9, 2)  // lookup found in input string\\r\\n , idx3 = indexof_regex(\"abcabc\", @\"a.c\", 1, -1, 2)  // there is no second occurrence in the search range\\r\\n , idx4 = indexof_regex(\"ababaa\", @\"a.a\", 0, -1, 2)  // Matches do not overlap so full lookup can\\'t be found\\r\\n , idx5 = indexof_regex(\"abcabc\", @\"a|ab\", -1)  // invalid start_index argument\\r\\n```\\r\\n\\r\\n|idx1|idx2|idx3|idx4|idx5|\\r\\n|----|----|----|----|----|\\r\\n|0   |3   |-1  |-1  |    |',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/indexofregexfunction\",\"indexofregexfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"infer_storage_schema\",\"This plug-in infers schema of external data, and returns it as CSL schema string. The string can be used when [creating external tables](../management/external-tables-azurestorage-azuredatalake.md#create-or-alter-external-table). The plugin is invoked with the [`evaluate`](evaluateoperator.md) operator.\",\"## Syntax\\r\\n\\r\\n`evaluate` `infer_storage_schema(` *Options* `)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\nA single *Options* argument is a constant value of type `dynamic` that holds\\r\\na property bag specifying properties of the request:\\r\\n\\r\\n|Name                    |Required|Description|\\r\\n|------------------------|--------|-----------|\\r\\n|`StorageContainers`|Yes|List of [storage connection strings](../api/connection-strings/storage-connection-strings.md) that represent prefix URI for stored data artifacts|\\r\\n|`DataFormat`|Yes|One of supported [data formats](../../ingestion-supported-formats.md).|\\r\\n|`FileExtension`|No|Only scan files ending with this file extension. It's not required, but specifying it may speed up the process (or eliminate data reading issues)|\\r\\n|`FileNamePrefix`|No|Only scan files starting with this prefix. It's not required, but specifying it may speed up the process|\\r\\n|`Mode`|No|Schema inference strategy, one of: `any`, `last`, `all`. Infer data schema from any (first found) file, from last written file, or from all files respectively. The default value is `last`.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe `infer_storage_schema` plugin returns a single result table containing a single row/column holding CSL schema string.\\r\\n\\r\\n> [!NOTE]\\r\\n> * Storage container URI secret keys must have the permissions for *List* in addition to *Read*.\\r\\n> * Schema inference strategy 'all' is a very \\\"expensive\\\" operation, as it implies reading from *all* artifacts found and merging their schema.\\r\\n> * Some returned types may not be the actual ones as a result of wrong type guess (or, as a result of schema merge process). This is why you should review the result carefully before creating an external table.\",\"```\\r\\nlet options = dynamic({\\r\\n  'StorageContainers': [\\r\\n    h@'https://storageaccount.blob.core.windows.net/MovileEvents;secretKey'\\r\\n  ],\\r\\n  'FileExtension': '.parquet',\\r\\n  'FileNamePrefix': 'part-',\\r\\n  'DataFormat': 'parquet'\\r\\n});\\r\\nevaluate infer_storage_schema(options)\\r\\n```\\r\\n\\r\\n*Result*\\r\\n\\r\\n|CslSchema|\\r\\n|---|\\r\\n|app_id:string, user_id:long, event_time:datetime, country:string, city:string, device_type:string, device_vendor:string, ad_network:string, campaign:string, site_id:string, event_type:string, event_name:string, organic:string, days_from_install:int, revenue:real|\\r\\n\\r\\nUse the returned schema in external table definition:\\r\\n\\r\\n```\\r\\n.create external table MobileEvents(\\r\\n    app_id:string, user_id:long, event_time:datetime, country:string, city:string, device_type:string, device_vendor:string, ad_network:string, campaign:string, site_id:string, event_type:string, event_name:string, organic:string, days_from_install:int, revenue:real\\r\\n)\\r\\nkind=blob\\r\\npartition by (dt:datetime = bin(event_time, 1d), app:string = app_id)\\r\\npathformat = ('app=' app '/dt=' datetime_pattern('yyyyMMdd', dt))\\r\\ndataformat = parquet\\r\\n(\\r\\n    h@'https://storageaccount.blob.core.windows.net/MovileEvents;secretKey'\\r\\n)\\r\\n```\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/inferstorageschemaplugin\",\"inferstorageschemaplugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"ingestion_time\",\"Returns the approximate time at which the current record was ingested.\",'This function must be used in the context of a table of ingested data for which the [IngestionTime policy](../management/ingestiontimepolicy.md) was enabled when the data was ingested. Otherwise, this function produces null values.\\r\\n\\r\\n> [!NOTE]\\r\\n> The value returned by this function is only approximate, as the ingestion process may take several minutes to complete and multiple ingestion activities may take place concurrently. To process all records of a table with exactly-once guarantees, use [database cursors](../management/databasecursor.md).\\r\\n\\r\\n> [!TIP] \\r\\n> The ingestion_time() function returns values according to the service clock as measured when ingestion was completed. As a result, this value cannot be used to \"order\" ingestion operations, as two operations that overlap in time might have any ordering of these values. If ordering records is important for application semantics, one should ensure that the htable has a timestamp column as measured by the source of the data instead of relying on the ingestion_time() value.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`ingestion_time()`\\r\\n\\r\\n## Returns\\r\\n\\r\\nA `datetime` value specifying the approximate time of ingestion into a table.',\"```\\r\\nT\\r\\n| extend ingestionTime = ingestion_time() | top 10 by ingestionTime\\r\\n```\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/ingestiontimefunction\",\"ingestiontimefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"invoke\",\"Invokes lambda that receives the source of `invoke` as tabular parameter argument.\",\"```\\r\\nT | invoke foo(param1, param2)\\r\\n```\\r\\n\\r\\n> [!NOTE]\\r\\n> See [let statements](./letstatement.md) for more details on how to declare lambda expressions that can accept tabular arguments.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`T | invoke` *function*`(`[*param1*`,` *param2*]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T*: The tabular source.\\r\\n* *function*: The name of the lambda `let` expression or stored function name to be evaluated.\\r\\n* *param1*, *param2* ... : additional lambda arguments.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the result of the evaluated expression.\",\"The following example shows how to use `invoke` operator to call lambda `let` expression:\\r\\n\\r\\n```\\r\\n// clipped_average(): calculates percentiles limits, and then makes another \\r\\n//                    pass over the data to calculate average with values inside the percentiles\\r\\nlet clipped_average = (T:(x: long), lowPercentile:double, upPercentile:double)\\r\\n{\\r\\n   let high = toscalar(T | summarize percentiles(x, upPercentile));\\r\\n   let low = toscalar(T | summarize percentiles(x, lowPercentile));\\r\\n   T \\r\\n   | where x > low and x < high\\r\\n   | summarize avg(x) \\r\\n};\\r\\nrange x from 1 to 100 step 1\\r\\n| invoke clipped_average(5, 99)\\r\\n```\\r\\n\\r\\n|avg_x|\\r\\n|---|\\r\\n|52|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/invokeoperator\",\"invokeoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"ipv4_compare\",\"Compares two IPv4 strings. The two IPv4 strings are parsed and compared while accounting for the combined IP-prefix mask calculated from argument prefixes, and the optional `PrefixMask` argument.\",\"```\\r\\nipv4_compare(\\\"127.0.0.1\\\", \\\"127.0.0.1\\\") == 0\\r\\nipv4_compare('192.168.1.1', '192.168.1.255') < 0\\r\\nipv4_compare('192.168.1.1/24', '192.168.1.255/24') == 0\\r\\nipv4_compare('192.168.1.1', '192.168.1.255', 24) == 0\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`ipv4_compare(`*Expr1*`, `*Expr2*`[ ,`*PrefixMask*`])`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *Expr1*, *Expr2*: A string expression representing an IPv4 address. IPv4 strings can be masked using [IP-prefix notation](#ip-prefix-notation).\\r\\n* *PrefixMask*: An integer from 0 to 32 representing the number of most-significant bits that are taken into account.\\r\\n\\r\\n## IP-prefix notation\\r\\n\\r\\nIP addresses can be defined with `IP-prefix notation` using a slash (`/`) character.\\r\\nThe IP address to the LEFT of the slash (`/`) is the base IP address. The number (1 to 32) to the RIGHT of the slash (`/`) is the number of contiguous 1 bit in the netmask. \\r\\n\\r\\nFor example, 192.168.2.0/24 will have an associated net/subnetmask containing 24 contiguous bits or 255.255.255.0 in dotted decimal format.\\r\\n\\r\\n## Returns\\r\\n\\r\\n* `0`: If the long representation of the first IPv4 string argument is equal to the second IPv4 string argument\\r\\n* `1`: If the long representation of the first IPv4 string argument is greater than the second IPv4 string argument\\r\\n* `-1`: If the long representation of the first IPv4 string argument is less than the second IPv4 string argument\\r\\n* `null`: If conversion for one of the two IPv4 strings wasn't successful.\\r\\n\\r\\n## Examples: IPv4 comparison equality cases\\r\\n\\r\\n### Compare IPs using the IP-prefix notation specified inside the IPv4 strings\\r\\n\\r\\n```\\r\\ndatatable(ip1_string:string, ip2_string:string)\\r\\n[\\r\\n '192.168.1.0',    '192.168.1.0',       // Equal IPs\\r\\n '192.168.1.1/24', '192.168.1.255',     // 24 bit IP-prefix is used for comparison\\r\\n '192.168.1.1',    '192.168.1.255/24',  // 24 bit IP-prefix is used for comparison\\r\\n '192.168.1.1/30', '192.168.1.255/24',  // 24 bit IP-prefix is used for comparison\\r\\n]\\r\\n| extend result = ipv4_compare(ip1_string, ip2_string)\\r\\n```\\r\\n\\r\\n|ip1_string|ip2_string|result|\\r\\n|---|---|---|\\r\\n|192.168.1.0|192.168.1.0|0|\\r\\n|192.168.1.1/24|192.168.1.255|0|\\r\\n|192.168.1.1|192.168.1.255/24|0|\\r\\n|192.168.1.1/30|192.168.1.255/24|0|\\r\\n\\r\\n### Compare IPs using IP-prefix notation specified inside the IPv4 strings and as additional argument of the `ipv4_compare()` function\\r\\n\\r\\n```\\r\\ndatatable(ip1_string:string, ip2_string:string, prefix:long)\\r\\n[\\r\\n '192.168.1.1',    '192.168.1.0',   31, // 31 bit IP-prefix is used for comparison\\r\\n '192.168.1.1/24', '192.168.1.255', 31, // 24 bit IP-prefix is used for comparison\\r\\n '192.168.1.1',    '192.168.1.255', 24, // 24 bit IP-prefix is used for comparison\\r\\n]\\r\\n| extend result = ipv4_compare(ip1_string, ip2_string, prefix)\\r\\n```\\r\\n\\r\\n|ip1_string|ip2_string|prefix|result|\\r\\n|---|---|---|---|\\r\\n|192.168.1.1|192.168.1.0|31|0|\\r\\n|192.168.1.1/24|192.168.1.255|31|0|\\r\\n|192.168.1.1|192.168.1.255|24|0|\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/ipv4-comparefunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"ipv4_is_in_any_range\",\"Checks whether IPv4 string address is in any of the specified IPv4 address ranges.\",\"```\\r\\nipv4_is_in_any_range(\\\"127.0.0.1\\\", dynamic([\\\"127.0.0.1\\\", \\\"192.168.1.1\\\"])) == true\\r\\nipv4_is_in_any_range('192.168.1.6', '192.168.1.1/24', '10.0.0.1/8', '127.1.0.1/16') == true\\r\\nipv4_is_in_any_range('192.168.1.1', '192.168.2.1/24', '10.0.0.1/8', '127.1.0.1/16') == false\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`ipv4_is_in_any_range(`*Ipv4Address* `,` *Ipv4Range* [ `,` *Ipv4Range* ...] `)`\\r\\n\\r\\n`ipv4_is_in_any_range(`*Ipv4Address* `,` *Ipv4Ranges* `)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *Ipv4Address*: A string expression representing an IPv4 address.\\r\\n* *Ipv4Range*: A string expression representing an IPv4 range using [IP-prefix notation](#ip-prefix-notation).\\r\\n* *Ipv4Ranges*: A dynamic array containing IPv4 ranges using [IP-prefix notation](#ip-prefix-notation).\\r\\n\\r\\n## IP-prefix notation\\r\\n\\r\\nIP addresses can be defined with `IP-prefix notation` using a slash (`/`) character. The IP address to the LEFT of the slash (`/`) is the base IP address. The number (1 to 32) to the RIGHT of the slash (`/`) is the number of contiguous 1 bit in the netmask.\\r\\n\\r\\nFor example, 192.168.2.0/24 will have an associated net/subnetmask containing 24 contiguous bits or 255.255.255.0 in dotted decimal format.\\r\\n\\r\\n## Returns\\r\\n\\r\\n* `true`: If the IPv4 address is in the range of any of the specified IPv4 networks.\\r\\n* `false`: Otherwise.\\r\\n* `null`: If conversion for one of the two IPv4 strings wasn't successful.\",'### IPv4 range check\\r\\n\\r\\n```\\r\\nlet LocalNetworks=dynamic([\\r\\n    \"192.168.1.1/16\",\\r\\n    \"127.0.0.1/8\",\\r\\n    \"10.0.0.1/8\"\\r\\n]);\\r\\nlet IPs=datatable(IP:string) [\\r\\n    \"10.1.2.3\",\\r\\n    \"192.168.1.5\",\\r\\n    \"123.1.11.21\",\\r\\n    \"1.1.1.1\"\\r\\n];\\r\\nIPs\\r\\n| extend IsLocal=ipv4_is_in_any_range(IP, LocalNetworks)\\r\\n```\\r\\n\\r\\n|IP|IsLocal|\\r\\n|---|---|\\r\\n|10.1.2.3|1|\\r\\n|192.168.1.5|1|\\r\\n|123.1.11.21|0|\\r\\n|1.1.1.1|0|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/ipv4-is-in-any-range-function\",\"ipv4-is-in-any-range-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"ipv4_is_in_range\",\"Checks if IPv4 string address is in IPv4-prefix notation range.\",\"```\\r\\nipv4_is_in_range(\\\"127.0.0.1\\\", \\\"127.0.0.1\\\") == true\\r\\nipv4_is_in_range('192.168.1.6', '192.168.1.1/24') == true\\r\\nipv4_is_in_range('192.168.1.1', '192.168.2.1/24') == false\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`ipv4_is_in_range(`*Ipv4Address*`, `*Ipv4Range*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *Ipv4Address*: A string expression representing an IPv4 address. \\r\\n* *Ipv4Range*: A string expression representing an IPv4 range using [IP-prefix notation](#ip-prefix-notation).\\r\\n\\r\\n## IP-prefix notation\\r\\n\\r\\nIP addresses can be defined with `IP-prefix notation` using a slash (`/`) character. The IP address to the LEFT of the slash (`/`) is the base IP address. The number (1 to 32) to the RIGHT of the slash (`/`) is the number of contiguous 1 bit in the netmask. \\r\\n\\r\\nFor example, 192.168.2.0/24 will have an associated net/subnetmask containing 24 contiguous bits or 255.255.255.0 in dotted decimal format.\\r\\n\\r\\n## Returns\\r\\n\\r\\n* `true`: If the long representation of the first IPv4 string argument is in range of the second IPv4 string argument.\\r\\n* `false`: Otherwise.\\r\\n* `null`: If conversion for one of the two IPv4 strings wasn't successful.\",\"### IPv4 range check\\r\\n\\r\\n```\\r\\ndatatable(ip_address:string, ip_range:string)\\r\\n[\\r\\n '192.168.1.1',    '192.168.1.1',       // Equal IPs\\r\\n '192.168.1.1',    '192.168.1.255/24',  // 24 bit IP-prefix is used for comparison\\r\\n]\\r\\n| extend result = ipv4_is_in_range(ip_address, ip_range)\\r\\n```\\r\\n\\r\\n|ip_address|ip_range|result|\\r\\n|---|---|---|\\r\\n|192.168.1.1|192.168.1.1|1|\\r\\n|192.168.1.1|192.168.1.255/24|1|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/ipv4-is-in-range-function\",\"ipv4-is-in-range-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"ipv4_is_match\",\"Matches two IPv4 strings. The two IPv4 strings are parsed and compared while accounting for the combined IP-prefix mask calculated from argument prefixes, and the optional `PrefixMask` argument.\",\"```\\r\\nipv4_is_match(\\\"127.0.0.1\\\", \\\"127.0.0.1\\\") == true\\r\\nipv4_is_match('192.168.1.1', '192.168.1.255') == false\\r\\nipv4_is_match('192.168.1.1/24', '192.168.1.255/24') == true\\r\\nipv4_is_match('192.168.1.1', '192.168.1.255', 24) == true\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`ipv4_is_match(`*Expr1*`, `*Expr2*`[ ,`*PrefixMask*`])`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *Expr1*, *Expr2*: A string expression representing an IPv4 address. IPv4 strings can be masked using [IP-prefix notation](#ip-prefix-notation).\\r\\n* *PrefixMask*: An integer from 0 to 32 representing the number of most-significant bits that are taken into account.\\r\\n\\r\\n## IP-prefix notation\\r\\n\\r\\nIP addresses can be defined with `IP-prefix notation` using a slash (`/`) character. The IP address to the LEFT of the slash (`/`) is the base IP address. The number (1 to 32) to the RIGHT of the slash (`/`) is the number of contiguous 1 bit in the netmask. \\r\\n\\r\\nFor example, 192.168.2.0/24 will have an associated net/subnetmask containing 24 contiguous bits or 255.255.255.0 in dotted decimal format.\\r\\n\\r\\n## Returns\\r\\n\\r\\n* `true`: If the long representation of the first IPv4 string argument is equal to the second IPv4 string argument.\\r\\n*  `false`: Otherwise.\\r\\n* `null`: If conversion for one of the two IPv4 strings wasn't successful.\\r\\n\\r\\n>[!NOTE]\\r\\n> When matching against an IPv4 address that's not a range, we recommend using the [equals operator](equals-cs-operator.md) (`==`), for better performance.\",\"### IPv4 comparison equality - IP-prefix notation specified inside the IPv4 strings\\r\\n\\r\\n```\\r\\ndatatable(ip1_string:string, ip2_string:string)\\r\\n[\\r\\n '192.168.1.0',    '192.168.1.0',       // Equal IPs\\r\\n '192.168.1.1/24', '192.168.1.255',     // 24 bit IP-prefix is used for comparison\\r\\n '192.168.1.1',    '192.168.1.255/24',  // 24 bit IP-prefix is used for comparison\\r\\n '192.168.1.1/30', '192.168.1.255/24',  // 24 bit IP-prefix is used for comparison\\r\\n]\\r\\n| extend result = ipv4_is_match(ip1_string, ip2_string)\\r\\n```\\r\\n\\r\\n|ip1_string|ip2_string|result|\\r\\n|---|---|---|\\r\\n|192.168.1.0|192.168.1.0|1|\\r\\n|192.168.1.1/24|192.168.1.255|1|\\r\\n|192.168.1.1|192.168.1.255/24|1|\\r\\n|192.168.1.1/30|192.168.1.255/24|1|\\r\\n\\r\\n### IPv4 comparison equality - IP-prefix notation specified inside the IPv4 strings and an additional argument of the `ipv4_is_match()` function\\r\\n\\r\\n```\\r\\ndatatable(ip1_string:string, ip2_string:string, prefix:long)\\r\\n[\\r\\n '192.168.1.1',    '192.168.1.0',   31, // 31 bit IP-prefix is used for comparison\\r\\n '192.168.1.1/24', '192.168.1.255', 31, // 24 bit IP-prefix is used for comparison\\r\\n '192.168.1.1',    '192.168.1.255', 24, // 24 bit IP-prefix is used for comparison\\r\\n]\\r\\n| extend result = ipv4_is_match(ip1_string, ip2_string, prefix)\\r\\n```\\r\\n\\r\\n|ip1_string|ip2_string|prefix|result|\\r\\n|---|---|---|---|\\r\\n|192.168.1.1|192.168.1.0|31|1|\\r\\n|192.168.1.1/24|192.168.1.255|31|1|\\r\\n|192.168.1.1|192.168.1.255|24|1|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/ipv4-is-matchfunction\",\"ipv4-is-matchfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"ipv4_is_private\",\"Checks if IPv4 string address belongs to a set of private network IPs.\",\"[Private network addresses](https://en.wikipedia.org/wiki/Private_network) were originally defined to assist in delaying IPv4 address exhaustion. IP packets originating from or addressed to a private IP address cannot be routed through the public internet.\\r\\n\\r\\n## Private IPv4 addresses\\r\\n\\r\\nThe Internet Engineering Task Force (IETF) has directed the Internet Assigned Numbers Authority (IANA) to reserve the following IPv4 address ranges for private networks:\\r\\n\\r\\n| IP address range|Number of addresses|Largest CIDR block (subnet mask)|\\r\\n|-----------------|-------------------|--------------------------------|\\r\\n|10.0.0.0 \\u2013 10.255.255.255|16777216|10.0.0.0/8 (255.0.0.0)|\\r\\n|172.16.0.0 \\u2013 172.31.255.255|1048576|172.16.0.0/12 (255.240.0.0)|\\r\\n|192.168.0.0 \\u2013 192.168.255.255|65536|192.168.0.0/16 (255.255.0.0)|\\r\\n\\r\\n```\\r\\nipv4_is_private('192.168.1.1/24') == true\\r\\nipv4_is_private('10.1.2.3/24') == true\\r\\nipv4_is_private('202.1.2.3') == false\\r\\nipv4_is_private(\\\"127.0.0.1\\\") == false\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`ipv4_is_private(`*Expr*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n*Expr*: A string expression representing an IPv4 address. IPv4 strings can be masked using [IP-prefix notation](#ip-prefix-notation).\\r\\n\\r\\n### IP-prefix notation\\r\\n\\r\\nIP addresses can be defined with `IP-prefix notation` using a slash (`/`) character. The IP address to the left of the slash (`/`) is the base IP address. The number (1 to 32) to the right of the slash (`/`) is the number of contiguous 1 bit in the netmask. \\r\\n\\r\\nFor example, 192.168.2.0/24 will have an associated net/subnetmask containing 24 contiguous bits or 255.255.255.0 in dotted decimal format.\\r\\n\\r\\n## Returns\\r\\n\\r\\n* `true`: If the IPv4 address belongs to any of the private network ranges.\\r\\n* `false`: Otherwise.\\r\\n* `null`: If parsing of the input as IPv4 address string wasn't successful.\\r\\n\\r\\n## Example: Check if IPv4 belongs to a private network\\r\\n\\r\\n```\\r\\ndatatable(ip_string:string)\\r\\n[\\r\\n '10.1.2.3',\\r\\n '192.168.1.1/24',\\r\\n '127.0.0.1',\\r\\n]\\r\\n| extend result = ipv4_is_private(ip_string)\\r\\n```\\r\\n\\r\\n|ip_string|result|\\r\\n|---|---|\\r\\n|10.1.2.3|1|\\r\\n|192.168.1.1/24|1|\\r\\n|127.0.0.1|0|\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/ipv4-is-privatefunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"ipv4_lookup\",\"The `ipv4_lookup` plugin looks up an IPv4 value in a lookup table and returns rows with matched values. The plugin is invoked with the [`evaluate`](evaluateoperator.md) operator.\",\"```\\r\\nT | evaluate ipv4_lookup(LookupTable, SourceIPv4Key, IPv4LookupKey)\\r\\nT | evaluate ipv4_lookup(LookupTable, SourceIPv4Key, IPv4LookupKey, return_unmatched = true)\\r\\nT | evaluate ipv4_lookup(LookupTable, SourceIPv4Key, IPv4LookupKey, ExtraKey1, ExtraKey2, return_unmatched = true)\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `evaluate` `ipv4_lookup(` *LookupTable* `,` *SourceIPv4Key* `,` *IPv4LookupKey* [`,` *ExtraKey1* [.. `,` *ExtraKeyN* [`,` *return_unmatched* ]]] `)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T*: The tabular input whose column *SourceIPv4Key* will be used for IPv4 matching.\\r\\n* *LookupTable*: Table or tabular expression with IPv4 lookup data, whose column *LookupKey* will be used for IPv4 matching. IPv4 values can be masked using [IP-prefix notation](#ip-prefix-notation).\\r\\n* *SourceIPv4Key*: The column of *T* with IPv4 string to be looked up in *LookupTable*. IPv4 values can be masked using [IP-prefix notation](#ip-prefix-notation).\\r\\n* *IPv4LookupKey*: The column of *LookupTable* with IPv4 string that is matched against each *SourceIPv4Key* value.\\r\\n* *ExtraKey1* .. *ExtraKeyN*: (Optional) Additional column references that are used for lookup matches. Similar to `join` operation: records with equal values will be considered matching. Column name references must exist both is source table `T` and `LookupTable`.\\r\\n* *return_unmatched*: A boolean flag that defines if the result should include all or only matching rows (default: `false` - only matching rows returned).\\r\\n\\r\\n### IP-prefix notation\\r\\n\\r\\nIP addresses can be defined with `IP-prefix notation` using a slash (`/`) character.\\r\\nThe IP address to the left of the slash (`/`) is the base IP address. The number (1 to 32) to the right of the slash (`/`) is the number of contiguous 1 bit in the netmask. \\r\\n\\r\\nFor example, 192.168.2.0/24 will have an associated net/subnetmask containing 24 contiguous bits or 255.255.255.0 in dotted decimal format.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe `ipv4_lookup` plugin returns a result of join (lookup) based on IPv4 key. The schema of the table is the union of the source table and the lookup table, similar to the result of the [`lookup` operator](lookupoperator.md).\\r\\n\\r\\nIf the *return_unmatched* argument is set to `true`, the resulting table will include both matched and unmatched rows (filled with nulls).\\r\\n\\r\\nIf the *return_unmatched* argument is set to `false`, or omitted (the default value of `false` is used), the resulting table will have as many records as matching results. This variant of lookup has better performance compared to `return_unmatched=true` execution.\\r\\n\\r\\n> [!NOTE]\\r\\n> * This plugin covers the scenario of IPv4-based join, assuming a small lookup table size (100K-200K rows), with the input table optionally having a larger size.\\r\\n> * The performance of the plugin will depend on the sizes of the lookup and data source tables, the number of columns, and number of matching records.\",'### IPv4 lookup - matching rows only\\r\\n\\r\\n```\\r\\n// IP lookup table: IP_Data\\r\\n// Partial data from: https://raw.githubusercontent.com/datasets/geoip2-ipv4/master/data/geoip2-ipv4.csv\\r\\nlet IP_Data = datatable(network:string, continent_code:string ,continent_name:string, country_iso_code:string, country_name:string)\\r\\n[\\r\\n  \"111.68.128.0/17\",\"AS\",\"Asia\",\"JP\",\"Japan\",\\r\\n  \"5.8.0.0/19\",\"EU\",\"Europe\",\"RU\",\"Russia\",\\r\\n  \"223.255.254.0/24\",\"AS\",\"Asia\",\"SG\",\"Singapore\",\\r\\n  \"46.36.200.51/32\",\"OC\",\"Oceania\",\"CK\",\"Cook Islands\",\\r\\n  \"2.20.183.0/24\",\"EU\",\"Europe\",\"GB\",\"United Kingdom\",\\r\\n];\\r\\nlet IPs = datatable(ip:string)\\r\\n[\\r\\n  \\'2.20.183.12\\',   // United Kingdom\\r\\n  \\'5.8.1.2\\',       // Russia\\r\\n  \\'192.165.12.17\\', // Unknown\\r\\n];\\r\\nIPs\\r\\n| evaluate ipv4_lookup(IP_Data, ip, network)\\r\\n```\\r\\n\\r\\n|ip|network|continent_code|continent_name|country_iso_code|country_name|\\r\\n|---|---|---|---|---|---|\\r\\n|2.20.183.12|2.20.183.0/24|EU|Europe|GB|United Kingdom|\\r\\n|5.8.1.2|5.8.0.0/19|EU|Europe|RU|Russia|\\r\\n\\r\\n### IPv4 lookup - return both matching and non-matching rows\\r\\n\\r\\n```\\r\\n// IP lookup table: IP_Data\\r\\n// Partial data from: \\r\\n// https://raw.githubusercontent.com/datasets/geoip2-ipv4/master/data/geoip2-ipv4.csv\\r\\nlet IP_Data = datatable(network:string,continent_code:string ,continent_name:string ,country_iso_code:string ,country_name:string )\\r\\n[\\r\\n    \"111.68.128.0/17\",\"AS\",\"Asia\",\"JP\",\"Japan\",\\r\\n    \"5.8.0.0/19\",\"EU\",\"Europe\",\"RU\",\"Russia\",\\r\\n    \"223.255.254.0/24\",\"AS\",\"Asia\",\"SG\",\"Singapore\",\\r\\n    \"46.36.200.51/32\",\"OC\",\"Oceania\",\"CK\",\"Cook Islands\",\\r\\n    \"2.20.183.0/24\",\"EU\",\"Europe\",\"GB\",\"United Kingdom\",\\r\\n];\\r\\nlet IPs = datatable(ip:string)\\r\\n[\\r\\n    \\'2.20.183.12\\',   // United Kingdom\\r\\n    \\'5.8.1.2\\',       // Russia\\r\\n    \\'192.165.12.17\\', // Unknown\\r\\n];\\r\\nIPs\\r\\n| evaluate ipv4_lookup(IP_Data, ip, network, return_unmatched = true)\\r\\n```\\r\\n\\r\\n|ip|network|continent_code|continent_name|country_iso_code|country_name|\\r\\n|---|---|---|---|---|---|\\r\\n|2.20.183.12|2.20.183.0/24|EU|Europe|GB|United Kingdom|\\r\\n|5.8.1.2|5.8.0.0/19|EU|Europe|RU|Russia|\\r\\n|192.165.12.17||||||\\r\\n\\r\\n### IPv4 lookup - using source in external_data()\\r\\n\\r\\n```\\r\\nlet IP_Data = external_data(network:string,geoname_id:long,continent_code:string,continent_name:string ,country_iso_code:string,country_name:string,is_anonymous_proxy:bool,is_satellite_provider:bool)\\r\\n    [\\'https://raw.githubusercontent.com/datasets/geoip2-ipv4/master/data/geoip2-ipv4.csv\\'];\\r\\nlet IPs = datatable(ip:string)\\r\\n[\\r\\n    \\'2.20.183.12\\',   // United Kingdom\\r\\n    \\'5.8.1.2\\',       // Russia\\r\\n    \\'192.165.12.17\\', // Sweden\\r\\n];\\r\\nIPs\\r\\n| evaluate ipv4_lookup(IP_Data, ip, network, return_unmatched = true)\\r\\n```\\r\\n\\r\\n|ip|network|geoname_id|continent_code|continent_name|country_iso_code|country_name|is_anonymous_proxy|is_satellite_provider|\\r\\n|---|---|---|---|---|---|---|---|---|\\r\\n|2.20.183.12|2.20.183.0/24|2635167|EU|Europe|GB|United Kingdom|0|0|\\r\\n|5.8.1.2|5.8.0.0/19|2017370|EU|Europe|RU|Russia|0|0|\\r\\n|192.165.12.17|192.165.8.0/21|2661886|EU|Europe|SE|Sweden|0|0|\\r\\n\\r\\n### IPv4 lookup - using extra columns for matching\\r\\n\\r\\n```\\r\\nlet IP_Data = external_data(network:string,geoname_id:long,continent_code:string,continent_name:string ,country_iso_code:string,country_name:string,is_anonymous_proxy:bool,is_satellite_provider:bool)\\r\\n    [\\'https://raw.githubusercontent.com/datasets/geoip2-ipv4/master/data/geoip2-ipv4.csv\\'];\\r\\nlet IPs = datatable(ip:string, continent_name:string, country_iso_code:string)\\r\\n[\\r\\n    \\'2.20.183.12\\',   \\'Europe\\', \\'GB\\', // United Kingdom\\r\\n    \\'5.8.1.2\\',       \\'Europe\\', \\'RU\\', // Russia\\r\\n    \\'192.165.12.17\\', \\'Europe\\', \\'\\',   // Sweden is \\'SE\\' - so it won\\'t be matched\\r\\n];\\r\\nIPs\\r\\n| evaluate ipv4_lookup(IP_Data, ip, network, continent_name, country_iso_code)\\r\\n```\\r\\n\\r\\n|ip|continent_name|country_iso_code|network|geoname_id|continent_code|country_name|is_anonymous_proxy|is_satellite_provider|\\r\\n|---|---|---|---|---|---|---|---|---|\\r\\n|2.20.183.12|Europe|GB|2.20.183.0/24|2635167|EU|United Kingdom|0|0|\\r\\n|5.8.1.2|Europe|RU|5.8.0.0/19|2017370|EU|Russia|0|0|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/ipv4-lookup-plugin\",\"ipv4-lookup-plugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"ipv4_netmask_suffix\",\"Returns the value of the IPv4 netmask suffix from IPv4 string address.\",\"```\\r\\nipv4_netmask_suffix('192.168.1.1/24') == 24\\r\\nipv4_netmask_suffix('192.168.1.1') == 32\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`ipv4_netmask_suffix(`*Expr*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n*Expr*: A string expression representing an IPv4 address. IPv4 strings can be masked using [IP-prefix notation](#ip-prefix-notation).\\r\\n\\r\\n### IP-prefix notation\\r\\n\\r\\nIP addresses can be defined with `IP-prefix notation` using a slash (`/`) character. The IP address to the left of the slash (`/`) is the base IP address. The number (1 to 32) to the right of the slash (`/`) is the number of contiguous 1 bit in the netmask. \\r\\n\\r\\nFor example, 192.168.2.0/24 will have an associated net/subnetmask containing 24 contiguous bits or 255.255.255.0 in dotted decimal format.\\r\\n\\r\\n## Returns\\r\\n\\r\\n* The value of the netmask suffix the IPv4 address. If suffix is not present in the input, a value of `32` (full netmask suffix) is returned.\\r\\n* `null`: If parsing of the input as IPv4 address string wasn't successful.\\r\\n\\r\\n## Example: Resolve IPv4 mask suffix\\r\\n\\r\\n```\\r\\ndatatable(ip_string:string)\\r\\n[\\r\\n '10.1.2.3',\\r\\n '192.168.1.1/24',\\r\\n '127.0.0.1/16',\\r\\n]\\r\\n| extend cidr_suffix = ipv4_netmask_suffix(ip_string)\\r\\n```\\r\\n\\r\\n|ip_string|cidr_suffix|\\r\\n|---|---|\\r\\n|10.1.2.3|32|\\r\\n|192.168.1.1/24|24|\\r\\n|127.0.0.1/16|16|\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/ipv4-netmask-suffix-function\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"ipv6_compare\",\"Compares two IPv6 or IPv4 network address strings. The two IPv6 strings are parsed and compared while accounting for the combined IP-prefix mask calculated from argument prefixes, and the optional `PrefixMask` argument.\",\"```\\r\\nipv6_compare('::ffff:7f00:1', '127.0.0.1') == 0\\r\\nipv6_compare('fe80::85d:e82c:9446:7994', 'fe80::85d:e82c:9446:7995')  < 0\\r\\nipv6_compare('192.168.1.1/24', '192.168.1.255/24') == 0\\r\\nipv6_compare('fe80::85d:e82c:9446:7994/127', 'fe80::85d:e82c:9446:7995/127') == 0\\r\\nipv6_compare('fe80::85d:e82c:9446:7994', 'fe80::85d:e82c:9446:7995', 127) == 0\\r\\n```\\r\\n\\r\\n> [!Note]\\r\\n> The function can accept and compare arguments representing both IPv6 and IPv4 network addresses. However, if the caller knows that arguments are in IPv4 format, use [ipv4_is_compare()](./ipv4-comparefunction.md) function. This function will result in better runtime performance.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`ipv6_compare(`*Expr1*`, `*Expr2*`[ ,`*PrefixMask*`])`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *Expr1*, *Expr2*: A string expression representing an IPv6 or IPv4 address. IPv6 and IPv4 strings can be masked using IP-prefix notation (see note).\\r\\n* *PrefixMask*: An integer from 0 to 128 representing the number of most significant bits that are taken into account.\\r\\n\\r\\n## IP-prefix notation\\r\\n\\r\\nIt's common practice to define IP addresses with `IP-prefix notation` using a slash (`/`) character.\\r\\nThe IP address to the LEFT of the slash (`/`) is the base IP address, and the number (1 to 127) to the RIGHT of the slash (`/`) is the number of contiguous 1 bits in the netmask. \\r\\n\\r\\nFor example, fe80::85d:e82c:9446:7994/120 will have an associated net/subnetmask containing 120 contiguous bits.\\r\\n\\r\\n## Returns\\r\\n\\r\\n* `0`: If the long representation of the first IPv6 string argument is equal to the second IPv6 string argument.\\r\\n* `1`: If the long representation of the first IPv6 string argument is greater than the second IPv6 string argument.\\r\\n* `-1`: If the long representation of the first IPv6 string argument is less than the second IPv6 string argument.\\r\\n* `null`: If conversion for one of the two IPv6 strings wasn't successful.\\r\\n\\r\\n## Examples: IPv6/IPv4 comparison equality cases\\r\\n\\r\\n### Compare IPs using the IP-prefix notation specified inside the IPv6/IPv4 strings\\r\\n\\r\\n```\\r\\ndatatable(ip1_string:string, ip2_string:string)\\r\\n[\\r\\n // IPv4 are compared as IPv6 addresses\\r\\n '192.168.1.1',    '192.168.1.1',       // Equal IPs\\r\\n '192.168.1.1/24', '192.168.1.255',     // 24 bit IP4-prefix is used for comparison\\r\\n '192.168.1.1',    '192.168.1.255/24',  // 24 bit IP4-prefix is used for comparison\\r\\n '192.168.1.1/30', '192.168.1.255/24',  // 24 bit IP4-prefix is used for comparison\\r\\n  // IPv6 cases\\r\\n 'fe80::85d:e82c:9446:7994', 'fe80::85d:e82c:9446:7994',         // Equal IPs\\r\\n 'fe80::85d:e82c:9446:7994/120', 'fe80::85d:e82c:9446:7998',     // 120 bit IP6-prefix is used for comparison\\r\\n 'fe80::85d:e82c:9446:7994', 'fe80::85d:e82c:9446:7998/120',     // 120 bit IP6-prefix is used for comparison\\r\\n 'fe80::85d:e82c:9446:7994/120', 'fe80::85d:e82c:9446:7998/120', // 120 bit IP6-prefix is used for comparison\\r\\n // Mixed case of IPv4 and IPv6\\r\\n '192.168.1.1',      '::ffff:c0a8:0101', // Equal IPs\\r\\n '192.168.1.1/24',   '::ffff:c0a8:01ff', // 24 bit IP-prefix is used for comparison\\r\\n '::ffff:c0a8:0101', '192.168.1.255/24', // 24 bit IP-prefix is used for comparison\\r\\n '::192.168.1.1/30', '192.168.1.255/24', // 24 bit IP-prefix is used for comparison\\r\\n]\\r\\n| extend result = ipv6_compare(ip1_string, ip2_string)\\r\\n```\\r\\n\\r\\n|ip1_string|ip2_string|result|\\r\\n|---|---|---|\\r\\n|192.168.1.1|192.168.1.1|0|\\r\\n|192.168.1.1/24|192.168.1.255|0|\\r\\n|192.168.1.1|192.168.1.255/24|0|\\r\\n|192.168.1.1/30|192.168.1.255/24|0|\\r\\n|fe80::85d:e82c:9446:7994|fe80::85d:e82c:9446:7994|0|\\r\\n|fe80::85d:e82c:9446:7994/120|fe80::85d:e82c:9446:7998|0|\\r\\n|fe80::85d:e82c:9446:7994|fe80::85d:e82c:9446:7998/120|0|\\r\\n|fe80::85d:e82c:9446:7994/120|fe80::85d:e82c:9446:7998/120|0|\\r\\n|192.168.1.1|::ffff:c0a8:0101|0|\\r\\n|192.168.1.1/24|::ffff:c0a8:01ff|0|\\r\\n|::ffff:c0a8:0101|192.168.1.255/24|0|\\r\\n|::192.168.1.1/30|192.168.1.255/24|0|\\r\\n\\r\\n### Compare IPs using IP-prefix notation specified inside the IPv6/IPv4 strings and as additional argument of the `ipv6_compare()` function\\r\\n\\r\\n```\\r\\ndatatable(ip1_string:string, ip2_string:string, prefix:long)\\r\\n[\\r\\n // IPv4 are compared as IPv6 addresses \\r\\n '192.168.1.1',    '192.168.1.0',   31, // 31 bit IP4-prefix is used for comparison\\r\\n '192.168.1.1/24', '192.168.1.255', 31, // 24 bit IP4-prefix is used for comparison\\r\\n '192.168.1.1',    '192.168.1.255', 24, // 24 bit IP4-prefix is used for comparison\\r\\n   // IPv6 cases\\r\\n 'fe80::85d:e82c:9446:7994', 'fe80::85d:e82c:9446:7995',     127, // 127 bit IP6-prefix is used for comparison\\r\\n 'fe80::85d:e82c:9446:7994/127', 'fe80::85d:e82c:9446:7998', 120, // 120 bit IP6-prefix is used for comparison\\r\\n 'fe80::85d:e82c:9446:7994/120', 'fe80::85d:e82c:9446:7998', 127, // 120 bit IP6-prefix is used for comparison\\r\\n // Mixed case of IPv4 and IPv6\\r\\n '192.168.1.1/24',   '::ffff:c0a8:01ff', 127, // 127 bit IP6-prefix is used for comparison\\r\\n '::ffff:c0a8:0101', '192.168.1.255',    120, // 120 bit IP6-prefix is used for comparison\\r\\n '::192.168.1.1/30', '192.168.1.255/24', 127, // 120 bit IP6-prefix is used for comparison\\r\\n]\\r\\n| extend result = ipv6_compare(ip1_string, ip2_string, prefix)\\r\\n```\\r\\n\\r\\n|ip1_string|ip2_string|prefix|result|\\r\\n|---|---|---|---|\\r\\n|192.168.1.1|192.168.1.0|31|0|\\r\\n|192.168.1.1/24|192.168.1.255|31|0|\\r\\n|192.168.1.1|192.168.1.255|24|0|\\r\\n|fe80::85d:e82c:9446:7994|fe80::85d:e82c:9446:7995|127|0|\\r\\n|fe80::85d:e82c:9446:7994/127|fe80::85d:e82c:9446:7998|120|0|\\r\\n|fe80::85d:e82c:9446:7994/120|fe80::85d:e82c:9446:7998|127|0|\\r\\n|192.168.1.1/24|::ffff:c0a8:01ff|127|0|\\r\\n|::ffff:c0a8:0101|192.168.1.255|120|0|\\r\\n|::192.168.1.1/30|192.168.1.255/24|127|0|\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/ipv6-comparefunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"ipv6_is_match\",\"Matches two IPv6 or IPv4 network address strings. The two IPv6/IPv4 strings are parsed and compared while accounting for the combined IP-prefix mask calculated from argument prefixes, and the optional `PrefixMask` argument.\",\"```\\r\\nipv6_is_match('::ffff:7f00:1', '127.0.0.1') == true\\r\\nipv6_is_match('fe80::85d:e82c:9446:7994', 'fe80::85d:e82c:9446:7995') == false\\r\\nipv6_is_match('192.168.1.1/24', '192.168.1.255/24') == true\\r\\nipv6_is_match('fe80::85d:e82c:9446:7994/127', 'fe80::85d:e82c:9446:7995/127') == true\\r\\nipv6_is_match('fe80::85d:e82c:9446:7994', 'fe80::85d:e82c:9446:7995', 127) == true\\r\\n```\\r\\n\\r\\n> [!NOTE]\\r\\n> The function can accept and compare arguments representing both IPv6 and IPv4 network addresses. If the caller knows that arguments are in IPv4 format, use the [ipv4_is_match()](./ipv4-is-matchfunction.md) function. This function will result in better runtime performance.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`ipv6_is_match(`*Expr1*`, `*Expr2*`[ ,`*PrefixMask*`])`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *Expr1*, *Expr2*: A string expression representing an IPv6 or IPv4 address. IPv6 and IPv4 strings can be masked using [IP-prefix notation](#ip-prefix-notation).\\r\\n* *PrefixMask*: An integer from 0 to 128 representing the number of most-significant bits that are taken into account.\\r\\n\\r\\n## IP-prefix notation\\r\\n\\r\\nIP addresses can be defined with `IP-prefix notation` using a slash (`/`) character.\\r\\nThe IP address to the LEFT of the slash (`/`) is the base IP address. The number (1 to 127) to the RIGHT of the slash (`/`) is the number of contiguous 1 bit in the netmask. \\r\\n\\r\\nFor example, fe80::85d:e82c:9446:7994/120 will have an associated net/subnetmask containing 120 contiguous bits.\\r\\n\\r\\n## Returns\\r\\n\\r\\n* `true`: If the long representation of the first IPv6/IPv4 string argument is equal to the second IPv6/IPv4 string argument.\\r\\n* `false`: Otherwise.\\r\\n* `null`: If conversion for one of the two IPv6/IPv4 strings wasn't successful.\",\"### IPv6/IPv4 comparison equality case - IP-prefix notation specified inside the IPv6/IPv4 strings\\r\\n\\r\\n```\\r\\ndatatable(ip1_string:string, ip2_string:string)\\r\\n[\\r\\n // IPv4 are compared as IPv6 addresses\\r\\n '192.168.1.1',    '192.168.1.1',       // Equal IPs\\r\\n '192.168.1.1/24', '192.168.1.255',     // 24 bit IP4-prefix is used for comparison\\r\\n '192.168.1.1',    '192.168.1.255/24',  // 24 bit IP4-prefix is used for comparison\\r\\n '192.168.1.1/30', '192.168.1.255/24',  // 24 bit IP4-prefix is used for comparison\\r\\n  // IPv6 cases\\r\\n 'fe80::85d:e82c:9446:7994', 'fe80::85d:e82c:9446:7994',         // Equal IPs\\r\\n 'fe80::85d:e82c:9446:7994/120', 'fe80::85d:e82c:9446:7998',     // 120 bit IP6-prefix is used for comparison\\r\\n 'fe80::85d:e82c:9446:7994', 'fe80::85d:e82c:9446:7998/120',     // 120 bit IP6-prefix is used for comparison\\r\\n 'fe80::85d:e82c:9446:7994/120', 'fe80::85d:e82c:9446:7998/120', // 120 bit IP6-prefix is used for comparison\\r\\n // Mixed case of IPv4 and IPv6\\r\\n '192.168.1.1',      '::ffff:c0a8:0101', // Equal IPs\\r\\n '192.168.1.1/24',   '::ffff:c0a8:01ff', // 24 bit IP-prefix is used for comparison\\r\\n '::ffff:c0a8:0101', '192.168.1.255/24', // 24 bit IP-prefix is used for comparison\\r\\n '::192.168.1.1/30', '192.168.1.255/24', // 24 bit IP-prefix is used for comparison\\r\\n]\\r\\n| extend result = ipv6_is_match(ip1_string, ip2_string)\\r\\n```\\r\\n\\r\\n|ip1_string|ip2_string|result|\\r\\n|---|---|---|\\r\\n|192.168.1.1|192.168.1.1|1|\\r\\n|192.168.1.1/24|192.168.1.255|1|\\r\\n|192.168.1.1|192.168.1.255/24|1|\\r\\n|192.168.1.1/30|192.168.1.255/24|1|\\r\\n|fe80::85d:e82c:9446:7994|fe80::85d:e82c:9446:7994|1|\\r\\n|fe80::85d:e82c:9446:7994/120|fe80::85d:e82c:9446:7998|1|\\r\\n|fe80::85d:e82c:9446:7994|fe80::85d:e82c:9446:7998/120|1|\\r\\n|fe80::85d:e82c:9446:7994/120|fe80::85d:e82c:9446:7998/120|1|\\r\\n|192.168.1.1|::ffff:c0a8:0101|1|\\r\\n|192.168.1.1/24|::ffff:c0a8:01ff|1|\\r\\n|::ffff:c0a8:0101|192.168.1.255/24|1|\\r\\n|::192.168.1.1/30|192.168.1.255/24|1|\\r\\n\\r\\n### IPv6/IPv4 comparison equality case- IP-prefix notation specified inside the IPv6/IPv4 strings and as additional argument of the `ipv6_is_match()` function\\r\\n\\r\\n```\\r\\ndatatable(ip1_string:string, ip2_string:string, prefix:long)\\r\\n[\\r\\n // IPv4 are compared as IPv6 addresses \\r\\n '192.168.1.1',    '192.168.1.0',   31, // 31 bit IP4-prefix is used for comparison\\r\\n '192.168.1.1/24', '192.168.1.255', 31, // 24 bit IP4-prefix is used for comparison\\r\\n '192.168.1.1',    '192.168.1.255', 24, // 24 bit IP4-prefix is used for comparison\\r\\n   // IPv6 cases\\r\\n 'fe80::85d:e82c:9446:7994', 'fe80::85d:e82c:9446:7995',     127, // 127 bit IP6-prefix is used for comparison\\r\\n 'fe80::85d:e82c:9446:7994/127', 'fe80::85d:e82c:9446:7998', 120, // 120 bit IP6-prefix is used for comparison\\r\\n 'fe80::85d:e82c:9446:7994/120', 'fe80::85d:e82c:9446:7998', 127, // 120 bit IP6-prefix is used for comparison\\r\\n // Mixed case of IPv4 and IPv6\\r\\n '192.168.1.1/24',   '::ffff:c0a8:01ff', 127, // 127 bit IP6-prefix is used for comparison\\r\\n '::ffff:c0a8:0101', '192.168.1.255',    120, // 120 bit IP6-prefix is used for comparison\\r\\n '::192.168.1.1/30', '192.168.1.255/24', 127, // 120 bit IP6-prefix is used for comparison\\r\\n]\\r\\n| extend result = ipv6_is_match(ip1_string, ip2_string, prefix)\\r\\n```\\r\\n\\r\\n|ip1_string|ip2_string|prefix|result|\\r\\n|---|---|---|---|\\r\\n|192.168.1.1|192.168.1.0|31|1|\\r\\n|192.168.1.1/24|192.168.1.255|31|1|\\r\\n|192.168.1.1|192.168.1.255|24|1|\\r\\n|fe80::85d:e82c:9446:7994|fe80::85d:e82c:9446:7995|127|1|\\r\\n|fe80::85d:e82c:9446:7994/127|fe80::85d:e82c:9446:7998|120|1|\\r\\n|fe80::85d:e82c:9446:7994/120|fe80::85d:e82c:9446:7998|127|1|\\r\\n|192.168.1.1/24|::ffff:c0a8:01ff|127|1|\\r\\n|::ffff:c0a8:0101|192.168.1.255|120|1|\\r\\n|::192.168.1.1/30|192.168.1.255/24|127|1|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/ipv6-is-matchfunction\",\"ipv6-is-matchfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"isempty\",\"Returns `true` if the argument is an empty string or is null.\",'```\\r\\nisempty(\"\") == true\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`isempty(`[*value*]`)`\\r\\n\\r\\n## Returns\\r\\n\\r\\nIndicates whether the argument is an empty string or isnull.\\r\\n\\r\\n|x|isempty(x)\\r\\n|---|---\\r\\n| \"\" | true\\r\\n|\"x\" | false\\r\\n|parsejson(\"\")|true\\r\\n|parsejson(\"[]\")|false\\r\\n|parsejson(\"{}\")|false',\"```\\r\\nT\\r\\n| where isempty(fieldName)\\r\\n| count\\r\\n```\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/isemptyfunction\",\"isemptyfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"isfinite\",\"Returns whether input is a finite value (is neither infinite nor NaN).\",\"## Syntax\\r\\n\\r\\n`isfinite(`*x*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *x*: A real number.\\r\\n\\r\\n## Returns\\r\\n\\r\\nA non-zero value (true) if x is finite; and zero (false) otherwise.\\r\\n\\r\\n## See also\\r\\n\\r\\n* For checking if value is null, see [isnull()](isnullfunction.md).\\r\\n* For checking if value is infinite, see [isinf()](isinffunction.md).\\r\\n* For checking if value is NaN (Not-a-Number), see [isnan()](isnanfunction.md).\",\"```\\r\\nrange x from -1 to 1 step 1\\r\\n| extend y = 0.0\\r\\n| extend div = 1.0*x/y\\r\\n| extend isfinite=isfinite(div)\\r\\n```\\r\\n\\r\\n|x|y|div|isfinite|\\r\\n|---|---|---|---|\\r\\n|-1|0|-\\u221e|0|\\r\\n|0|0|NaN|0|\\r\\n|1|0|\\u221e|0|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/isfinitefunction\",\"isfinitefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"isinf\",\"Returns whether input is an infinite (positive or negative) value.\",\"## Syntax\\r\\n\\r\\n`isinf(`*x*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *x*: A real number.\\r\\n\\r\\n## Returns\\r\\n\\r\\nA non-zero value (true) if x is a positive or negative infinite; and zero (false) otherwise.\\r\\n\\r\\n## See also\\r\\n\\r\\n* For checking if value is null, see [isnull()](isnullfunction.md).\\r\\n* For checking if value is finite, see [isfinite()](isfinitefunction.md).\\r\\n* For checking if value is NaN (Not-a-Number), see [isnan()](isnanfunction.md).\",\"```\\r\\nrange x from -1 to 1 step 1\\r\\n| extend y = 0.0\\r\\n| extend div = 1.0*x/y\\r\\n| extend isinf=isinf(div)\\r\\n```\\r\\n\\r\\n|x|y|div|isinf|\\r\\n|---|---|---|---|\\r\\n|-1|0|-\\u221e|1|\\r\\n|0|0|NaN|0|\\r\\n|1|0|\\u221e|1|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/isinffunction\",\"isinffunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"isnan\",\"Returns whether input is Not-a-Number (NaN) value.\",\"## Syntax\\r\\n\\r\\n`isnan(`*x*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *x*: A real number.\\r\\n\\r\\n## Returns\\r\\n\\r\\nA non-zero value (true) if x is NaN; and zero (false) otherwise.\\r\\n\\r\\n## See also\\r\\n\\r\\n* For checking if value is null, see [isnull()](isnullfunction.md).\\r\\n* For checking if value is finite, see [isfinite()](isfinitefunction.md).\\r\\n* For checking if value is infinite, see [isinf()](isinffunction.md).\",\"```\\r\\nrange x from -1 to 1 step 1\\r\\n| extend y = (-1*x) \\r\\n| extend div = 1.0*x/y\\r\\n| extend isnan=isnan(div)\\r\\n```\\r\\n\\r\\n|x|y|div|isnan|\\r\\n|---|---|---|---|\\r\\n|-1|1|-1|0|\\r\\n|0|0|NaN|1|\\r\\n|1|-1|-1|0|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/isnanfunction\",\"isnanfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"isnotempty\",\"Returns `true` if the argument isn't an empty string, and it isn't null.\",'```\\r\\nisnotempty(\"\") == false\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`isnotempty(`[*value*]`)`\\r\\n\\r\\n`notempty(`[*value*]`)` -- alias of `isnotempty`',\"```\\r\\nT\\r\\n| where isnotempty(fieldName)\\r\\n| count\\r\\n```\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/isnotemptyfunction\",\"isnotemptyfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"isnotnull\",\"Returns `true` if the argument is not null.\",\"## Syntax\\r\\n\\r\\n`isnotnull(`[*value*]`)`\\r\\n\\r\\n`notnull(`[*value*]`)` - alias for `isnotnull`\",\"```\\r\\nT | where isnotnull(PossiblyNull) | count\\r\\n```\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/isnotnullfunction\",\"isnotnullfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"isnull\",\"Evaluates its sole argument and returns a `bool` value indicating if the argument evaluates to a null value.\",'```\\r\\nisnull(parse_json(\"\")) == true\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`isnull(`*Expr*`)`\\r\\n\\r\\n## Returns\\r\\n\\r\\nTrue or false, depending on whether or not the value is null.\\r\\n\\r\\n**Notes**\\r\\n\\r\\n* `string` values cannot be null. Use [isempty](./isemptyfunction.md)\\r\\n  to determine if a value of type `string` is empty or not.\\r\\n\\r\\n|x                |`isnull(x)`|\\r\\n|-----------------|-----------|\\r\\n|`\"\"`             |`false`    |\\r\\n|`\"x\"`            |`false`    |\\r\\n|`parse_json(\"\")`  |`true`     |\\r\\n|`parse_json(\"[]\")`|`false`    |\\r\\n|`parse_json(\"{}\")`|`false`    |',\"```\\r\\nT | where isnull(PossiblyNull) | count\\r\\n```\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/isnullfunction\",\"isnullfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"jaccard_index\",\"Calculates the [Jaccard index](https://en.wikipedia.org/wiki/Jaccard_index) of two sets\",\"## Syntax\\r\\n\\r\\n`jaccard_index`(*set1*, *set2*)\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *set1*: Input array representing the first set for the calculation.\\r\\n* *set2*: Input array representing the second set for the calculation.\\r\\n\\r\\n> [!NOTE]\\r\\n> Duplicate values in the input arrays are ignored.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe [Jaccard index](https://en.wikipedia.org/wiki/Jaccard_index) of the two input sets. The Jaccard index formula is |*set1* \\u2229 *set2*| / |*set1* \\u222a *set2*|.\",\"```\\r\\nprint set1=dynamic([1,2,3]), set2=dynamic([1,2,3,4])\\r\\n| extend jaccard=jaccard_index(set1, set2)\\r\\n```\\r\\n\\r\\n|`set1`|`set2`|`jaccard`|\\r\\n|---|---|---|\\r\\n|[1,2,3]|[1,2,3,4]|0.75|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/jaccard-index-function\",\"jaccard-index-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"join\",\"Merge the rows of two tables to form a new table by matching values of the specified columns from each table.\",\"```\\r\\nTable1 | join (Table2) on CommonColumn, $left.Col1 == $right.Col2\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*LeftTable* `|` `join` [*JoinParameters*] `(` *RightTable* `)` `on` *Attributes*\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *LeftTable*: The **left** table or tabular expression, sometimes called **outer** table, whose rows are to be merged. Denoted as `$left`.\\r\\n* *RightTable*: The **right** table or tabular expression, sometimes called **inner** table, whose rows are to be merged. Denoted as `$right`.\\r\\n* *Attributes*: One or more comma-separated **rules** that describe how rows from\\r\\n  *LeftTable* are matched to rows from *RightTable*. Multiple rules are evaluated using the `and` logical operator.\\r\\n  A **rule** can be one of:\\r\\n  |Rule kind        |Syntax          |Predicate    |\\r\\n  |-----------------|--------------|-------------------------|\\r\\n  |Equality by name |*ColumnName*    |`where` *LeftTable*.*ColumnName* `==` *RightTable*.*ColumnName*|\\r\\n  |Equality by value|`$left.`*LeftColumn* `==` `$right.`*RightColumn*|`where` `$left.`*LeftColumn* `==` `$right.`*RightColumn*       |\\r\\n    > [!NOTE]\\r\\n    > For 'equality by value', the column names *must* be qualified with the applicable owner table denoted by `$left` and `$right` notations.\\r\\n* *JoinParameters*: Zero or more space-separated parameters in the form of *Name* `=` *Value* that control the behavior of the row-match operation and execution plan. The following parameters are supported:\\r\\n\\r\\n    |Parameters name |Values |Description  |\\r\\n    |---|---|---|\\r\\n    |`kind`|Join flavors|See [Join Flavors](#join-flavors)|\\r\\n    |`hint.remote`  |`auto`, `left`, `local`, `right` |See [Cross-Cluster Join](joincrosscluster.md)|\\r\\n    |`hint.strategy=broadcast` |Specifies the way to share the query load on cluster nodes. |See [broadcast join](broadcastjoin.md) |\\r\\n    |`hint.shufflekey=<key>` |The `shufflekey` query shares the query load on cluster nodes, using a key to partition data. |See [shuffle query](shufflequery.md) |\\r\\n    |`hint.strategy=shuffle` |The `shuffle` strategy query shares the query load on cluster nodes, where each node will process one partition of the data. |See [shuffle query](shufflequery.md)  |\\r\\n\\r\\n\\r\\n> [!WARNING]\\r\\n> If `kind` isn't specified, the default join flavor is `innerunique`. This is different than some other analytics products that have `inner` as the default flavor.  See [join-flavors](#join-flavors) to understand the differences and make sure  the query yields the intended results.\\r\\n\\r\\n## Returns\\r\\n\\r\\n**The output schema depends on the join flavor:**\\r\\n\\r\\n| Join flavor | Output schema |\\r\\n|---|---|\\r\\n|`kind=leftanti`, `kind=leftsemi`| The result table contains columns from the left side only.|\\r\\n| `kind=rightanti`, `kind=rightsemi` | The result table contains columns from the right side only.|\\r\\n|  `kind=innerunique`, `kind=inner`, `kind=leftouter`, `kind=rightouter`, `kind=fullouter` |  A column for every column in each of the two tables, including the matching keys. The columns of the right side will be automatically renamed if there are name clashes. |\\r\\n\\r\\n**Output records depend on the join flavor:**\\r\\n\\r\\n> [!NOTE]\\r\\n   >\\r\\n   > If there are several rows with the same values for those fields, you'll get rows for all the combinations.\\r\\n   > A match is a row selected from one table that has the same value for all the `on` fields as a row in the other table.\\r\\n\\r\\n| Join flavor | Output records |\\r\\n|---|---|\\r\\n| `kind=leftanti`, `kind=leftantisemi`| Returns all the records from the left side that don't have matches from the right|\\r\\n| `kind=rightanti`, `kind=rightantisemi`| Returns all the records from the right side that don't have matches from the left.|\\r\\n| `kind` unspecified, `kind=innerunique`| Only one row from the left side is matched for each value of the `on` key. The output contains a row for each match of this row with rows from the right.|\\r\\n| `kind=leftsemi`| Returns all the records from the left side that have matches from the right. |\\r\\n| `kind=rightsemi`| Returns all the records from the right side that have matches from the left. |\\r\\n| `kind=inner`| Returns all matching records from left and right sides. |\\r\\n| `kind=fullouter`| Returns all the records for all the records from the left and right sides. Unmatched cells contain nulls. |\\r\\n| `kind=leftouter`| Returns all the records from the left side and only matching records from the right side. |\\r\\n| `kind=rightouter`| Returns all the records from the right side and only matching records from the left side. |\\r\\n\\r\\n> [!TIP]\\r\\n>\\r\\n> For best performance, if one table is always smaller than the other, use it as the left (piped) side of the join.\",\"Get extended activities from a `login` that some entries mark as the start and end of an activity.\\r\\n\\r\\n```\\r\\nlet Events = MyLogTable | where type==\\\"Event\\\" ;\\r\\nEvents\\r\\n| where Name == \\\"Start\\\"\\r\\n| project Name, City, ActivityId, StartTime=timestamp\\r\\n| join (Events\\r\\n    | where Name == \\\"Stop\\\"\\r\\n        | project StopTime=timestamp, ActivityId)\\r\\n    on ActivityId\\r\\n| project City, ActivityId, StartTime, StopTime, Duration = StopTime - StartTime\\r\\n```\\r\\n\\r\\n```\\r\\nlet Events = MyLogTable | where type==\\\"Event\\\" ;\\r\\nEvents\\r\\n| where Name == \\\"Start\\\"\\r\\n| project Name, City, ActivityIdLeft = ActivityId, StartTime=timestamp\\r\\n| join (Events\\r\\n        | where Name == \\\"Stop\\\"\\r\\n        | project StopTime=timestamp, ActivityIdRight = ActivityId)\\r\\n    on $left.ActivityIdLeft == $right.ActivityIdRight\\r\\n| project City, ActivityId, StartTime, StopTime, Duration = StopTime - StartTime\\r\\n```\\r\\n\\r\\n## Join flavors\\r\\n\\r\\nThe exact flavor of the join operator is specified with the *kind* keyword. The following flavors of the join operator are supported:\\r\\n\\r\\n|Join kind/flavor|Description|\\r\\n|--|--|\\r\\n|[`innerunique`](#default-join-flavor) (or empty as default)|Inner join with left side deduplication|\\r\\n|[`inner`](#inner-join-flavor)|Standard inner join|\\r\\n|[`leftouter`](#left-outer-join-flavor)|Left outer join|\\r\\n|[`rightouter`](#right-outer-join-flavor)|Right outer join|\\r\\n|[`fullouter`](#full-outer-join-flavor)|Full outer join|\\r\\n|[`leftanti`](#left-anti-join-flavor), [`anti`](#left-anti-join-flavor), or [`leftantisemi`](#left-anti-join-flavor)|Left anti join|\\r\\n|[`rightanti`](#right-anti-join-flavor) or [`rightantisemi`](#right-anti-join-flavor)|Right anti join|\\r\\n|[`leftsemi`](#left-semi-join-flavor)|Left semi join|\\r\\n|[`rightsemi`](#right-semi-join-flavor)|Right semi join|\\r\\n\\r\\n### Default join flavor\\r\\n\\r\\nThe default join flavor is an inner join with left side deduplication. Default join implementation is useful in typical log/trace analysis scenarios where you want to correlate two events, each matching some filtering criterion, under the same correlation ID. You want to get back all appearances of the phenomenon, and ignore multiple appearances of the contributing trace records.\\r\\n\\r\\n```\\r\\nX | join Y on Key\\r\\n \\r\\nX | join kind=innerunique Y on Key\\r\\n```\\r\\n\\r\\nThe following two sample tables are used to explain the operation of the join.\\r\\n\\r\\n**Table X**\\r\\n\\r\\n|Key |Value1\\r\\n|---|---\\r\\n|a |1\\r\\n|b |2\\r\\n|b |3\\r\\n|c |4\\r\\n\\r\\n**Table Y**\\r\\n\\r\\n|Key |Value2\\r\\n|---|---\\r\\n|b |10\\r\\n|c |20\\r\\n|c |30\\r\\n|d |40\\r\\n\\r\\nThe default join does an inner join after deduplicating the left side on the join key (deduplication keeps the first record).\\r\\n\\r\\nGiven this statement: `X | join Y on Key`\\r\\n\\r\\nthe effective left side of the join, table X after deduplication, would be:\\r\\n\\r\\n|Key |Value1\\r\\n|---|---\\r\\n|a |1\\r\\n|b |2\\r\\n|c |4\\r\\n\\r\\nand the result of the join would be:\\r\\n\\r\\n```\\r\\nlet X = datatable(Key:string, Value1:long)\\r\\n[\\r\\n    'a',1,\\r\\n    'b',2,\\r\\n    'b',3,\\r\\n    'c',4\\r\\n];\\r\\nlet Y = datatable(Key:string, Value2:long)\\r\\n[\\r\\n    'b',10,\\r\\n    'c',20,\\r\\n    'c',30,\\r\\n    'd',40\\r\\n];\\r\\nX | join Y on Key\\r\\n```\\r\\n\\r\\n|Key|Value1|Key1|Value2|\\r\\n|---|---|---|---|\\r\\n|b|2|b|10|\\r\\n|c|4|c|20|\\r\\n|c|4|c|30|\\r\\n\\r\\n> [!NOTE]\\r\\n> The keys 'a' and 'd' don't appear in the output, since there were no matching keys on both left and right sides.\\r\\n\\r\\n### Inner-join flavor\\r\\n\\r\\nThe inner-join function is like the standard inner-join from the SQL world. An output record is produced whenever a record on the left side has the same join key as the record on the right side.\\r\\n\\r\\n```\\r\\nlet X = datatable(Key:string, Value1:long)\\r\\n[\\r\\n    'a',1,\\r\\n    'b',2,\\r\\n    'b',3,\\r\\n    'c',4\\r\\n];\\r\\nlet Y = datatable(Key:string, Value2:long)\\r\\n[\\r\\n    'b',10,\\r\\n    'c',20,\\r\\n    'c',30,\\r\\n    'd',40\\r\\n];\\r\\nX | join kind=inner Y on Key\\r\\n```\\r\\n\\r\\n|Key|Value1|Key1|Value2|\\r\\n|---|---|---|---|\\r\\n|b|3|b|10|\\r\\n|b|2|b|10|\\r\\n|c|4|c|20|\\r\\n|c|4|c|30|\\r\\n\\r\\n> [!NOTE]\\r\\n> * (b,10) from the right side, was joined twice: with both (b,2) and (b,3) on the left.\\r\\n> * (c,4) on the left side, was joined twice: with both (c,20) and (c,30) on the right.\\r\\n\\r\\n### Innerunique-join flavor\\r\\n\\r\\nUse **innerunique-join flavor** to deduplicate keys from the left side. The result will be a row in the output from every combination of deduplicated left keys and right keys.\\r\\n\\r\\n> [!NOTE]\\r\\n> **innerunique flavor** may yield two possible outputs and both are correct.\\r\\n    In the first output, the join operator randomly selected the first key that appears in t1, with the value \\\"val1.1\\\" and matched it with t2 keys.\\r\\n    In the second output, the join operator randomly selected the second key that appears in t1, with the value \\\"val1.2\\\" and matched it with t2 keys.\\r\\n\\r\\n```\\r\\nlet t1 = datatable(key:long, value:string)  \\r\\n[\\r\\n1, \\\"val1.1\\\",  \\r\\n1, \\\"val1.2\\\"  \\r\\n];\\r\\nlet t2 = datatable(key:long, value:string)  \\r\\n[  \\r\\n1, \\\"val1.3\\\",\\r\\n1, \\\"val1.4\\\"  \\r\\n];\\r\\nt1\\r\\n| join kind = innerunique\\r\\n    t2\\r\\non key\\r\\n```\\r\\n\\r\\n|key|value|key1|value1|\\r\\n|---|---|---|---|\\r\\n|1|val1.1|1|val1.3|\\r\\n|1|val1.1|1|val1.4|\\r\\n\\r\\n```\\r\\nlet t1 = datatable(key:long, value:string)  \\r\\n[\\r\\n1, \\\"val1.1\\\",  \\r\\n1, \\\"val1.2\\\"  \\r\\n];\\r\\nlet t2 = datatable(key:long, value:string)  \\r\\n[  \\r\\n1, \\\"val1.3\\\", \\r\\n1, \\\"val1.4\\\"  \\r\\n];\\r\\nt1\\r\\n| join kind = innerunique\\r\\n    t2\\r\\non key\\r\\n```\\r\\n\\r\\n|key|value|key1|value1|\\r\\n|---|---|---|---|\\r\\n|1|val1.2|1|val1.3|\\r\\n|1|val1.2|1|val1.4|\\r\\n\\r\\n* Kusto is optimized to push filters that come after the `join`, towards the appropriate join side, left or right, when possible.\\r\\n\\r\\n* Sometimes, the flavor used is **innerunique** and the filter is propagated to the left side of the join. The flavor will be automatically propagated and the keys that apply to that filter will always appear in the output.\\r\\n    \\r\\n* Use the example above and add a filter `where value == \\\"val1.2\\\" `. It will always give the second result and will never give the first result for the datasets:\\r\\n\\r\\n\\r\\n\\r\\n```\\r\\nlet t1 = datatable(key:long, value:string)  \\r\\n[\\r\\n1, \\\"val1.1\\\",  \\r\\n1, \\\"val1.2\\\"  \\r\\n];\\r\\nlet t2 = datatable(key:long, value:string)  \\r\\n[  \\r\\n1, \\\"val1.3\\\", \\r\\n1, \\\"val1.4\\\"  \\r\\n];\\r\\nt1\\r\\n| join kind = innerunique\\r\\n    t2\\r\\non key\\r\\n| where value == \\\"val1.2\\\"\\r\\n```\\r\\n\\r\\n|key|value|key1|value1|\\r\\n|---|---|---|---|\\r\\n|1|val1.2|1|val1.3|\\r\\n|1|val1.2|1|val1.4|\\r\\n\\r\\n### Left outer-join flavor\\r\\n\\r\\nThe result of a left outer-join for tables X and Y always contains all records of the left table (X), even if the join condition doesn't find any matching record in the right table (Y).\\r\\n\\r\\n```\\r\\nlet X = datatable(Key:string, Value1:long)\\r\\n[\\r\\n    'a',1,\\r\\n    'b',2,\\r\\n    'b',3,\\r\\n    'c',4\\r\\n];\\r\\nlet Y = datatable(Key:string, Value2:long)\\r\\n[\\r\\n    'b',10,\\r\\n    'c',20,\\r\\n    'c',30,\\r\\n    'd',40\\r\\n];\\r\\nX | join kind=leftouter Y on Key\\r\\n```\\r\\n\\r\\n|Key|Value1|Key1|Value2|\\r\\n|---|---|---|---|\\r\\n|a|1|||\\r\\n|b|2|b|10|\\r\\n|b|3|b|10|\\r\\n|c|4|c|20|\\r\\n|c|4|c|30|\\r\\n\\r\\n### Right outer-join flavor\\r\\n\\r\\nThe right outer-join flavor resembles the left outer-join, but the treatment of the tables is reversed.\\r\\n\\r\\n```\\r\\nlet X = datatable(Key:string, Value1:long)\\r\\n[\\r\\n    'a',1,\\r\\n    'b',2,\\r\\n    'b',3,\\r\\n    'c',4\\r\\n];\\r\\nlet Y = datatable(Key:string, Value2:long)\\r\\n[\\r\\n    'b',10,\\r\\n    'c',20,\\r\\n    'c',30,\\r\\n    'd',40\\r\\n];\\r\\nX | join kind=rightouter Y on Key\\r\\n```\\r\\n\\r\\n|Key|Value1|Key1|Value2|\\r\\n|---|---|---|---|\\r\\n|b|2|b|10|\\r\\n|b|3|b|10|\\r\\n|c|4|c|20|\\r\\n|c|4|c|30|\\r\\n|||d|40|\\r\\n\\r\\n### Full outer-join flavor\\r\\n\\r\\nA full outer-join combines the effect of applying both left and right outer-joins. Whenever records in the joined tables don't match, the result set will have `null` values for every column of the table that lacks a matching row. For those records that do match, a single row will be produced in the result set, containing fields populated from both tables.\\r\\n\\r\\n```\\r\\nlet X = datatable(Key:string, Value1:long)\\r\\n[\\r\\n    'a',1,\\r\\n    'b',2,\\r\\n    'b',3,\\r\\n    'c',4\\r\\n];\\r\\nlet Y = datatable(Key:string, Value2:long)\\r\\n[\\r\\n    'b',10,\\r\\n    'c',20,\\r\\n    'c',30,\\r\\n    'd',40\\r\\n];\\r\\nX | join kind=fullouter Y on Key\\r\\n```\\r\\n\\r\\n|Key|Value1|Key1|Value2|\\r\\n|---|---|---|---|\\r\\n|a|1|||\\r\\n|b|2|b|10|\\r\\n|b|3|b|10|\\r\\n|c|4|c|20|\\r\\n|c|4|c|30|\\r\\n|||d|40|\\r\\n\\r\\n### Left anti-join flavor\\r\\n\\r\\nLeft anti-join returns all records from the left side that don't match any record from the right side.\\r\\n\\r\\n```\\r\\nlet X = datatable(Key:string, Value1:long)\\r\\n[\\r\\n    'a',1,\\r\\n    'b',2,\\r\\n    'b',3,\\r\\n    'c',4\\r\\n];\\r\\nlet Y = datatable(Key:string, Value2:long)\\r\\n[\\r\\n    'b',10,\\r\\n    'c',20,\\r\\n    'c',30,\\r\\n    'd',40\\r\\n];\\r\\nX | join kind=leftanti Y on Key\\r\\n```\\r\\n\\r\\n|Key|Value1|\\r\\n|---|---|\\r\\n|a|1|\\r\\n\\r\\n> [!NOTE]\\r\\n> Anti-join models the \\\"NOT IN\\\" query.\\r\\n\\r\\n### Right anti-join flavor\\r\\n\\r\\nRight anti-join returns all records from the right side that don't match any record from the left side.\\r\\n\\r\\n```\\r\\nlet X = datatable(Key:string, Value1:long)\\r\\n[\\r\\n    'a',1,\\r\\n    'b',2,\\r\\n    'b',3,\\r\\n    'c',4\\r\\n];\\r\\nlet Y = datatable(Key:string, Value2:long)\\r\\n[\\r\\n    'b',10,\\r\\n    'c',20,\\r\\n    'c',30,\\r\\n    'd',40\\r\\n];\\r\\nX | join kind=rightanti Y on Key\\r\\n```\\r\\n\\r\\n|Key|Value2|\\r\\n|---|---|\\r\\n|d|40|\\r\\n\\r\\n> [!NOTE]\\r\\n> Anti-join models the \\\"NOT IN\\\" query.\\r\\n\\r\\n### Left semi-join flavor\\r\\n\\r\\nLeft semi-join returns all records from the left side that match a record from the right side. Only columns from the left side are returned.\\r\\n\\r\\n```\\r\\nlet X = datatable(Key:string, Value1:long)\\r\\n[\\r\\n    'a',1,\\r\\n    'b',2,\\r\\n    'b',3,\\r\\n    'c',4\\r\\n];\\r\\nlet Y = datatable(Key:string, Value2:long)\\r\\n[\\r\\n    'b',10,\\r\\n    'c',20,\\r\\n    'c',30,\\r\\n    'd',40\\r\\n];\\r\\nX | join kind=leftsemi Y on Key\\r\\n```\\r\\n\\r\\n|Key|Value1|\\r\\n|---|---|\\r\\n|b|2|\\r\\n|b|3|\\r\\n|c|4|\\r\\n\\r\\n### Right semi-join flavor\\r\\n\\r\\nRight semi-join returns all records from the right side that match a record from the left side. Only columns from the right side are returned.\\r\\n\\r\\n```\\r\\nlet X = datatable(Key:string, Value1:long)\\r\\n[\\r\\n    'a',1,\\r\\n    'b',2,\\r\\n    'b',3,\\r\\n    'c',4\\r\\n];\\r\\nlet Y = datatable(Key:string, Value2:long)\\r\\n[\\r\\n    'b',10,\\r\\n    'c',20,\\r\\n    'c',30,\\r\\n    'd',40\\r\\n];\\r\\nX | join kind=rightsemi Y on Key\\r\\n```\\r\\n\\r\\n|Key|Value2|\\r\\n|---|---|\\r\\n|b|10|\\r\\n|c|20|\\r\\n|c|30|\\r\\n\\r\\n### Cross-join\\r\\n\\r\\nKusto doesn't natively provide a cross-join flavor. You can't mark the operator with the `kind=cross`.\\r\\nTo simulate, use a dummy key.\\r\\n\\r\\n`X | extend dummy=1 | join kind=inner (Y | extend dummy=1) on dummy`\\r\\n\\r\\n## Join hints\\r\\n\\r\\nThe `join` operator supports a number of hints that control the way a query runs.\\r\\nThese hints don't change the semantic of `join`, but may affect its performance.\\r\\n\\r\\nJoin hints are explained in the following articles:\\r\\n\\r\\n* `hint.shufflekey=<key>` and `hint.strategy=shuffle` - [shuffle query](shufflequery.md)\\r\\n* `hint.strategy=broadcast` - [broadcast join](broadcastjoin.md)\\r\\n* `hint.remote=<strategy>` - [cross-cluster join](joincrosscluster.md)\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/joinoperator\",\"joinoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"limit\",\"Return up to the specified number of rows.\",\"```\\r\\nT | limit 5\\r\\n```\\r\\n\\r\\n**Alias**\\r\\n\\r\\n[take operator](takeoperator.md)\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/limitoperator\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"log\",\"`log()` returns the natural logarithm function.\",\"## Syntax\\r\\n\\r\\n`log(`*x*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *x*: A real number > 0.\\r\\n\\r\\n## Returns\\r\\n\\r\\n* The natural logarithm is the base-e logarithm: the inverse of the natural exponential function (exp).\\r\\n* `null` if the argument is negative or null or can't be converted to a `real` value. \\r\\n\\r\\n## See also\\r\\n\\r\\n* For common (base-10) logarithms, see [log10()](log10-function.md).\\r\\n* For base-2 logarithms, see [log2()](log2-function.md)\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/log-function\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"log10\",\"`log10()` returns the common (base-10) logarithm function.\",\"## Syntax\\r\\n\\r\\n`log10(`*x*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *x*: A real number > 0.\\r\\n\\r\\n## Returns\\r\\n\\r\\n* The common logarithm is the base-10 logarithm: the inverse of the exponential function (exp) with base 10.\\r\\n* `null` if the argument is negative or null or can't be converted to a `real` value. \\r\\n\\r\\n## See also\\r\\n\\r\\n* For natural (base-e) logarithms, see [log()](log-function.md).\\r\\n* For base-2 logarithms, see [log2()](log2-function.md)\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/log10-function\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"log2\",\"`log2()` returns the base-2 logarithm function.\",\"## Syntax\\r\\n\\r\\n`log2(`*x*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *x*: A real number > 0.\\r\\n\\r\\n## Returns\\r\\n\\r\\n* The logarithm is the base-2 logarithm: the inverse of the exponential function (exp) with base 2.\\r\\n* `null` if the argument is negative or null or can't be converted to a `real` value. \\r\\n\\r\\n## See also\\r\\n\\r\\n* For natural (base-e) logarithms, see [log()](log-function.md).\\r\\n* For common (base-10) logarithms, see [log10()](log10-function.md).\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/log2-function\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"loggamma\",\"Computes log of absolute value of the [gamma function](https://en.wikipedia.org/wiki/Gamma_function)\",\"## Syntax\\r\\n\\r\\n`loggamma(`*x*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *x*: Parameter for the gamma function\\r\\n\\r\\n## Returns\\r\\n\\r\\n* Returns the natural logarithm of the absolute value of the gamma function of x.\\r\\n* For computing gamma function, see [gamma()](gammafunction.md).\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/loggammafunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"lookup\",\"Extends the columns of a fact table with values looked-up in a dimension table.\",\"```\\r\\nFactTable | lookup kind=leftouter (DimensionTable) on CommonColumn, $left.Col1 == $right.Col2\\r\\n```\\r\\n\\r\\nHere, the result is a table that extends the `FactTable` (`$left`) with data from `DimensionTable` (referenced by `$right`)\\r\\n by performing a lookup of each pair (`CommonColumn`,`Col`) from the former table\\r\\nwith each pair (`CommonColumn1`,`Col2`) in the latter table. \\r\\nFor the differences between fact and dimension tables, see [fact and dimension tables](../concepts/fact-and-dimension-tables.md). \\r\\n\\r\\nThe `lookup` operator performs an operation similar to the [join operator](joinoperator.md)\\r\\nwith the following differences:\\r\\n\\r\\n* The result does not repeat columns from the `$right` table that are the basis\\r\\n  for the join operation.\\r\\n* Only two kinds of lookup are supported, `leftouter` and `inner`,\\r\\n  with `leftouter` being the default.\\r\\n* In terms of performance, the system by default assumes that the `$left` table\\r\\n  is the larger (facts) table, and the `$right` table is the smaller (dimensions)\\r\\n  table. This is exactly opposite to the assumption used by the `join` operator.\\r\\n* The `lookup` operator automatically broadcasts the `$right` table to the `$left`\\r\\n  table (essentially, behaves as if `hint.broadcast` was specified). Note that\\r\\n  this limits the size of the `$right` table.\\r\\n\\r\\n> [!NOTE]\\r\\n> If the right side of the lookup is larger than several tens of MBs, the query will fail.\\r\\n> \\r\\n> You can run the following query to estimate the size of the right side in bytes:\\r\\n> \\r\\n> ```kusto\\r\\n> rightSide\\r\\n> | summarize sum(estimate_data_size(*))\\r\\n> ```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*LeftTable* `|` `lookup` [`kind` `=` (`leftouter`|`inner`)] `(` *RightTable* `)` `on` *Attributes*\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *LeftTable*: The table or tabular expression that is the basis for the lookup.\\r\\n  Denoted as `$left`.\\r\\n* *RightTable*: The table or tabular expression that is used to \\\"populate\\\"\\r\\n  new columns in the fact table. Denoted as `$right`.\\r\\n* *Attributes*: A comma-delimited list of one or more rules that describe how rows from\\r\\n  *LeftTable* are matched to rows from *RightTable*. Multiple rules are evaluated using the `and` logical operator.\\r\\n  A rule can be one of:\\r\\n  |Rule kind        |Syntax                                          |Predicate                                                      |\\r\\n  |-----------------|------------------------------------------------|---------------------------------------------------------------|\\r\\n  |Equality by name |*ColumnName*                                    |`where` *LeftTable*.*ColumnName* `==` *RightTable*.*ColumnName*|\\r\\n  |Equality by value|`$left.`*LeftColumn* `==` `$right.`*RightColumn*|`where` `$left.`*LeftColumn* `==` `$right.`*RightColumn        |\\r\\n  > [!Note] \\r\\n  > In case of 'equality by value', the column names *must* be qualified with the applicable owner table denoted by `$left` and `$right` notations.\\r\\n* `kind`: An optional instruction on how to treat rows in *LeftTable* that\\r\\n  have no match in *RightTable*. By default, `leftouter` is used, which means\\r\\n  all those rows will appear in the output with null values used for the\\r\\n  missing values of *RightTable* columns added by the operator. If `inner`\\r\\n  is used, such rows are omitted from the output. (Other kinds\\r\\n  of join are not supported by the `lookup` operator.)\\r\\n  \\r\\n\\r\\n## Returns\\r\\n\\r\\nA table with:\\r\\n\\r\\n* A column for every column in each of the two tables, including the matching keys.\\r\\n  The columns of the right side will be automatically renamed if there are name conflicts.\\r\\n* A row for every match between the input tables. A match is a row selected from one table that has the same value for all the `on` fields as a row in the other table. \\r\\n* The Attributes (lookup keys) will appear only once in the output table.\\r\\n * `kind` unspecified, `kind=leftouter`\\r\\n     In addition to the inner matches, there's a row for every row on the left (and/or right), even if it has no match. In that case, the unmatched output cells contain nulls.\\r\\n * `kind=inner`\\r\\n     There's a row in the output for every combination of matching rows from left and right.\",'```\\r\\nlet FactTable=datatable(Row:string,Personal:string,Family:string) [\\r\\n  \"1\", \"Bill\",   \"Gates\",\\r\\n  \"2\", \"Bill\",   \"Clinton\",\\r\\n  \"3\", \"Bill\",   \"Clinton\",\\r\\n  \"4\", \"Steve\",  \"Ballmer\",\\r\\n  \"5\", \"Tim\",    \"Cook\"\\r\\n];\\r\\nlet DimTable=datatable(Personal:string,Family:string,Alias:string) [\\r\\n  \"Bill\",  \"Gates\",   \"billg\",\\r\\n  \"Bill\",  \"Clinton\", \"billc\",\\r\\n  \"Steve\", \"Ballmer\", \"steveb\",\\r\\n  \"Tim\",   \"Cook\",    \"timc\"\\r\\n];\\r\\nFactTable\\r\\n| lookup kind=leftouter DimTable on Personal, Family\\r\\n```\\r\\n\\r\\nRow     | Personal  | Family   | Alias\\r\\n--------|-----------|----------|--------\\r\\n1       | Bill      | Gates    | billg\\r\\n2       | Bill      | Clinton  | billc\\r\\n3       | Bill      | Clinton  | billc\\r\\n4       | Steve     | Ballmer  | steveb\\r\\n5       | Tim       | Cook     | timc',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/lookupoperator\",\"lookupoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"make_bag\",\"Creates a `dynamic` JSON property bag (dictionary) of all the values of *`Expr`* in the group.\",\"[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`make_bag` `(`*Expr* [`,` *MaxSize*]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *Expr* | dynamic | &check; | Expression used for aggregation calculations. |\\r\\n| *MaxSize* | integer |  | The limit on the maximum number of elements returned. The default is *1048576* and can't exceed *1048576*. |\\r\\n\\r\\n> [!NOTE]\\r\\n> `make_dictionary()` has been deprecated in favor of `make_bag()`. The legacy version has a default *MaxSize* limit of 128.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a `dynamic` JSON property bag (dictionary) of all the values of *`Expr`* in the group, which are property bags.\\r\\nNon-dictionary values will be skipped.\\r\\nIf a key appears in more than one row, an arbitrary value, out of the possible values for this key, will be selected.\",'The following example shows a packed JSON property bag.\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA8tJLVEIUbBVSEksAcKknFSNgqL8AqvikqLMvHQdhbLEnNJUKE+TK5pLAQiUQCoMDJV0FJSA0vGJSjpIwkYw4SQUYWOYcDJQONaaK4SrRiG1oiQ1L0WhAGh7QWJyNthiqI2aQOni0tzcxKLMqlSFlMzkEtvcxOzU+KTEdI0CTQBPpqLVtAAAAA==)**\\\\]**\\r\\n\\r\\n```\\r\\nlet T = datatable(prop:string, value:string)\\r\\n[\\r\\n    \"prop01\", \"val_a\",\\r\\n    \"prop02\", \"val_b\",\\r\\n    \"prop03\", \"val_c\",\\r\\n];\\r\\nT\\r\\n| extend p = pack(prop, value)\\r\\n| summarize dict=make_bag(p)\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|dict|\\r\\n|----|\\r\\n|{ \"prop01\": \"val_a\", \"prop02\": \"val_b\", \"prop03\": \"val_c\" } |\\r\\n\\r\\nUse the [bag_unpack()](bag-unpackplugin.md) plugin for transforming the bag keys in the make_bag() output into columns.\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA1WNvQrDMAyEdz+F8BSDh/5sLXmLbKUYOREhxHZNYpdS+vCVTQKttJy+O3GOEnTQwoCJ1zpq4vKIlzUtUxg1PNFl2i4lbgJ4ZEkcjlKDZNug1D/4tGP7h8877hnfr6ITH6BXojBA5PaI/VyLt0bF9pq9x2V6E1gcW48zGRZNLB6VFKZqmRzqO0v1BTGl9vXOAAAA)**\\\\]**\\r\\n\\r\\n```\\r\\nlet T = datatable(prop:string, value:string)\\r\\n[\\r\\n    \"prop01\", \"val_a\",\\r\\n    \"prop02\", \"val_b\",\\r\\n    \"prop03\", \"val_c\",\\r\\n];\\r\\nT\\r\\n| extend p = pack(prop, value)\\r\\n| summarize bag=make_bag(p)\\r\\n| evaluate bag_unpack(bag)\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|prop01|prop02|prop03|\\r\\n|---|---|---|\\r\\n|val_a|val_b|val_c|\\r\\n\\r\\n## See also\\r\\n\\r\\n[bag_unpack()](bag-unpackplugin.md)',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/make-bag-aggfunction\",\"make-bag-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"make_bag_if\",\"Creates a `dynamic` JSON property bag (dictionary) of all the values of *'Expr'* in the group, for which *Predicate* evaluates to `true`.\",\"[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`make_bag_if` `(`*Expr*`,` *Predicate* [`,` *MaxSize*]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *Expr* | dynamic | &check; | Expression used for aggregation calculation. |\\r\\n| *Predicate* | boolean | &check; | Predicate that evaluates to `true`, in order for *'Expr'* to be added to the result. |\\r\\n| *MaxSize* | integer |  | Limit on the maximum number of elements returned. The default value is *1048576* and can't exceed 1048576. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a `dynamic` JSON property bag (dictionary) of all the values of *'Expr'* in the group that are property bags (dictionaries), for which *Predicate* evaluates to `true`.\\r\\nNon-dictionary values will be skipped.\\r\\nIf a key appears in more than one row, an arbitrary value, out of the possible values for this key, will be selected.\\r\\n\\r\\n> [!NOTE]\\r\\n> This function without the predicate is similar to [`make_bag`](./make-bag-aggfunction.md).\",'The following example shows a packed JSON property bag.\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA1WOTQuDMAyG7/0VwZNCD/u4OfwX3saQtEYpVi1tHGPsxy8bOlxyecOTFx5PDDVU0CLLGk95iHMoE0c39Rru6Bf6XSFS6ywylWaefaGuCmSyT+NwzDRk8t6gBI4L6R08bdBI6NCnP3reqF2r6nZRtXoBPZimFoL4BbTDV211KgSnZRwxuieBWHE14kCNwb5xXR52ssUbsXCntuQAAAA=)**\\\\]**\\r\\n\\r\\n```\\r\\nlet T = datatable(prop:string, value:string, predicate:bool)\\r\\n[\\r\\n    \"prop01\", \"val_a\", true,\\r\\n    \"prop02\", \"val_b\", false,\\r\\n    \"prop03\", \"val_c\", true\\r\\n];\\r\\nT\\r\\n| extend p = pack(prop, value)\\r\\n| summarize dict=make_bag_if(p, predicate)\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|dict|\\r\\n|----|\\r\\n|{ \"prop01\": \"val_a\", \"prop03\": \"val_c\" } |\\r\\n\\r\\nUse [bag_unpack()](bag-unpackplugin.md) plugin for transforming the bag keys in the make_bag_if() output into columns.\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA1WOywqDMBBF9/mKwZWCiz52Fv/CXSlhoqMEo4Y8Sin9+E5Ei002J5x7wzUUoIEaOgx8laHcusVWPjg9DyU80UT6vayjTrcYqFLLYgpxF8AnS43TOSsh47hEhuAilQd52aVi6NH4P3vdbbtVxeMmGvEBegWaO7C8z2I7rtO2TQVrH6cJnX4TKBzqCUeSDFL3uT1sTUlKHeYUlHFeP2MsvmCOilb+AAAA)**\\\\]**\\r\\n\\r\\n```\\r\\nlet T = datatable(prop:string, value:string, predicate:bool)\\r\\n[\\r\\n    \"prop01\", \"val_a\", true,\\r\\n    \"prop02\", \"val_b\", false,\\r\\n    \"prop03\", \"val_c\", true\\r\\n];\\r\\nT\\r\\n| extend p = pack(prop, value)\\r\\n| summarize bag=make_bag_if(p, predicate)\\r\\n| evaluate bag_unpack(bag)\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|prop01|prop03|\\r\\n|---|---|\\r\\n|val_a|val_c|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/make-bag-if-aggfunction\",\"make-bag-if-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"make_datetime\",\"Creates a [datetime](./scalar-data-types/datetime.md) scalar value from the specified date and time.\",\"```\\r\\nmake_datetime(2017,10,01,12,10) == datetime(2017-10-01 12:10)\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`make_datetime(`*year*,*month*,*day*`)`\\r\\n\\r\\n`make_datetime(`*year*,*month*,*day*,*hour*,*minute*`)`\\r\\n\\r\\n`make_datetime(`*year*,*month*,*day*,*hour*,*minute*,*second*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *year*: year (an integer value, from 0 to 9999)\\r\\n* *month*: month (an integer value, from 1 to 12)\\r\\n* *day*: day (an integer value, from 1 to 28-31)\\r\\n* *hour*: hour (an integer value, from 0 to 23)\\r\\n* *minute*: minute (an integer value, from 0 to 59)\\r\\n* *second*: second (a real value, from 0 to 59.9999999)\\r\\n\\r\\n## Returns\\r\\n\\r\\nIf creation is successful, result will be a [datetime](./scalar-data-types/datetime.md) value, otherwise, result will be null.\",\"```\\r\\nprint year_month_day = make_datetime(2017,10,01)\\r\\n```\\r\\n\\r\\n|year_month_day|\\r\\n|---|\\r\\n|2017-10-01 00:00:00.0000000|\\r\\n\\r\\n```\\r\\nprint year_month_day_hour_minute = make_datetime(2017,10,01,12,10)\\r\\n```\\r\\n\\r\\n|year_month_day_hour_minute|\\r\\n|---|\\r\\n|2017-10-01 12:10:00.0000000|\\r\\n\\r\\n```\\r\\nprint year_month_day_hour_minute_second = make_datetime(2017,10,01,12,11,0.1234567)\\r\\n```\\r\\n\\r\\n|year_month_day_hour_minute_second|\\r\\n|---|\\r\\n|2017-10-01 12:11:00.1234567|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/make-datetimefunction\",\"make-datetimefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"make_list\",\"Creates a `dynamic` JSON object (array) of all the values of *Expr* in the group.\",\"[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`make_list` `(`*Expr* [`,` *MaxSize*]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *Expr* | dynamic | &check; | Expression used for aggregation calculations. |\\r\\n| *MaxSize* | integer |  | The limit on the maximum number of elements returned. The default is *1048576* and can't exceed *1048576*. |\\r\\n\\r\\n> [!NOTE]\\r\\n> `makelist()` has been deprecated in favor of `make_list`. The legacy version has a default *MaxSize* limit of 128.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a `dynamic` JSON array of all the values of *Expr* in the group.\\r\\nIf the input to the `summarize` operator is not sorted, the order of elements in the resulting array is undefined.\\r\\nIf the input to the `summarize` operator is sorted, the order of elements in the resulting array tracks that of the input.\\r\\n\\r\\n> [!TIP]\\r\\n> Use the [`array_sort_asc()`](./arraysortascfunction.md) or [`array_sort_desc()`](./arraysortdescfunction.md) function to create an ordered list by some key.\",'### One column\\r\\n\\r\\nThe following example makes a list out of a single column:\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAz3PzwrCMAwG8HufIuzkYAfF/xNPPoaI1C1sxTadbQYqPrydy0wu4Zfv8llkiK3uMMIRas1pbxZhRtphCZGDoaaAaGo8+Z64BEOcq7OCNFn6amosZgUsi5Hio9dhgJVAwIqn0GQdEuvGU6K1UItPkc1fuim0FfLVJDsR8iSyF6mxElnM1eWgxnLqA7F3TgfzRnAvayKnvk7f8Trcv7r5F8QGBpEMAQAA)**\\\\]**\\r\\n\\r\\n```\\r\\nlet shapes = datatable (name: string, sideCount: int)\\r\\n[\\r\\n    \"triangle\", 3,\\r\\n    \"square\", 4,\\r\\n    \"rectangle\", 4,\\r\\n    \"pentagon\", 5,\\r\\n    \"hexagon\", 6,\\r\\n    \"heptagon\", 7,\\r\\n    \"octagon\", 8,\\r\\n    \"nonagon\", 9,\\r\\n    \"decagon\", 10\\r\\n];\\r\\nshapes\\r\\n| summarize mylist = make_list(name)\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|mylist|\\r\\n|---|\\r\\n|[\"triangle\",\"square\",\"rectangle\",\"pentagon\",\"hexagon\",\"heptagon\",\"octagon\",\"nonagon\",\"decagon\"]|\\r\\n\\r\\n### Using the \\'by\\' clause\\r\\n\\r\\nThe following example runs a query using the `by` clause:\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAz3Py26DMBCF4b2f4ggpUiOxIEnTCxWrKE+QZRVVDoyIVTwmeKhK1YePCQZ7Y30+m78hgb/qljwKVFrCvTSEJ9aWcnjpDNcpvKno4HqWHIZlrT4VwknCr+a6oSTFLp3I33rdjfAcoaNS5tFsLbHo2nGgfaQr/UZ5WaSdR6+RXClukrco7Dhu3qNUVEbZZOr8oaY49Q/fW6s780ewQ2O8hF6rv+lrfD9y17gMMP74Q3yae8NoaccKWxQFsjvUEHjHNAEAAA==)**\\\\]**\\r\\n\\r\\n```\\r\\nlet shapes = datatable (name: string, sideCount: int)\\r\\n[\\r\\n    \"triangle\", 3,\\r\\n    \"square\", 4,\\r\\n    \"rectangle\", 4,\\r\\n    \"pentagon\", 5,\\r\\n    \"hexagon\", 6,\\r\\n    \"heptagon\", 7,\\r\\n    \"octagon\", 8,\\r\\n    \"nonagon\", 9,\\r\\n    \"decagon\", 10\\r\\n];\\r\\nshapes\\r\\n| summarize mylist = make_list(name) by isEvenSideCount = sideCount % 2 == 0\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|isEvenSideCount| mylist|\\r\\n|---|---|\\r\\n|false|[\"triangle\",\"pentagon\",\"heptagon\",\"nonagon\"]|\\r\\n|true|[\"square\",\"rectangle\",\"hexagon\",\"octagon\",\"decagon\"]|\\r\\n\\r\\n### Packing a dynamic object\\r\\n\\r\\nThe following examples shows how to [pack](./packfunction.md) a dynamic object in a column before making it a list.\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA03PTWrDMBAF4L1OMRgKNniR/qcpXoWeIMtSysQaHBFr5FjjkJQevmMshVoLi09vhF5PAvGAA0VowKLo2vcEJaOnDUQZHXc1RGdpGyaWDTiWynwa0K/QU+Sup6KGx3qheJpwnOEpwUit5FC2gViwC6z0nOhAlyQvNxly6DVRaCUssk7CgVPmLYmlNsn9yny9m6Wc+QW6CLEFqz0HbI9lMVfU2Pyr9eG5YvGvbqVzcfIeR/dD4K+9i6LzHo/0Pe9LW8H+Ci5+nIl3eUoTtxvgDh6gaWD1B75NBjppAQAA)**\\\\]**\\r\\n\\r\\n```\\r\\nlet shapes = datatable (name: string, sideCount: int)\\r\\n[\\r\\n    \"triangle\", 3,\\r\\n    \"square\", 4,\\r\\n    \"rectangle\", 4,\\r\\n    \"pentagon\", 5,\\r\\n    \"hexagon\", 6,\\r\\n    \"heptagon\", 7,\\r\\n    \"octagon\", 8,\\r\\n    \"nonagon\", 9,\\r\\n    \"decagon\", 10\\r\\n];\\r\\nshapes\\r\\n| extend d = pack(\"name\", name, \"sideCount\", sideCount)\\r\\n| summarize mylist = make_list(d) by isEvenSideCount = sideCount % 2 == 0\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|mylist|isEvenSideCount|\\r\\n|---|---|\\r\\n|false|[{\"name\":\"triangle\",\"sideCount\":3},{\"name\":\"pentagon\",\"sideCount\":5},{\"name\":\"heptagon\",\"sideCount\":7},{\"name\":\"nonagon\",\"sideCount\":9}]|\\r\\n|true|[{\"name\":\"square\",\"sideCount\":4},{\"name\":\"rectangle\",\"sideCount\":4},{\"name\":\"hexagon\",\"sideCount\":6},{\"name\":\"octagon\",\"sideCount\":8},{\"name\":\"decagon\",\"sideCount\":10}]|\\r\\n\\r\\n## See also\\r\\n\\r\\n[`make_list_if`](./makelistif-aggfunction.md) operator is similar to `make_list`, except it also accepts a predicate.',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/makelist-aggfunction\",\"makelist-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"make_list_if\",\"Creates a `dynamic` JSON object (array) of all the values of *Expr* in the group, for which *Predicate* evaluates to `true`.\",\"[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`make_list_if` `(`*Expr*`,` *Predicate* [`,` *MaxSize*]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *Expr* | string | &check; | Expression that will be used for aggregation calculation. |\\r\\n| *Predicate* | string | &check; | Predicate that has to evaluate to `true`, in order for *Expr* to be added to the result. |\\r\\n| *MaxSize* | integer |  | The limit on the maximum number of elements returned. The default is *1048576* and can't exceed *1048576*. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a `dynamic` JSON object (array) of all the values of *Expr* in the group, for which *Predicate* evaluates to `true`.\\r\\nIf the input to the `summarize` operator is not sorted, the order of elements in the resulting array is undefined.\\r\\nIf the input to the `summarize` operator is sorted, the order of elements in the resulting array tracks that of the input.\",'The following example shows a list of names with more than 4 letters.\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAyXNMQvCMBCG4T2/4uhkIIuiqJW6Ck4i3URCitc0eEkgSQfFH++RctPzDvcRFuihg5cpfAPhKhiPbS7JBas4f3Qc9eBSmVqKwUrxEADQXOMUGgVHVXUzM7HWh4UXjMkih81uCXd+Ftl78TyJXvwgz96b5L4I3rxRk8tFu7FuK+BxwlAh4Qxb+Qd6P2/WpQAAAA==)**\\\\]**\\r\\n\\r\\n```\\r\\nlet T = datatable(name:string, day_of_birth:long)\\r\\n[\\r\\n   \"John\", 9,\\r\\n   \"Paul\", 18,\\r\\n   \"George\", 25,\\r\\n   \"Ringo\", 7\\r\\n];\\r\\nT\\r\\n| summarize make_list_if(name, strlen(name) > 4)\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|list_name|\\r\\n|----|\\r\\n|[\"George\", \"Ringo\"]|\\r\\n\\r\\n## See also\\r\\n\\r\\n[`make_list`](./makelist-aggfunction.md) function, which does the same, without predicate expression.',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/makelistif-aggfunction\",\"makelistif-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"make_list_with_nulls\",\"Creates a `dynamic` JSON object (array) of all the values of *Expr* in the group, including null values.\",\"[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`make_list_with_nulls` `(` *Expr* `)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *Expr* | string | &check; | Expression that will be used for aggregation calculation. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a `dynamic` JSON object (array) of all the values of *Expr* in the group, including null values.\\r\\nIf the input to the `summarize` operator is not sorted, the order of elements in the resulting array is undefined.\\r\\nIf the input to the `summarize` operator is sorted, the order of elements in the resulting array tracks that of the input.\\r\\n\\r\\n> [!TIP]\\r\\n> Use the [`array_sort_asc()`](./arraysortascfunction.md) or [`array_sort_desc()`](./arraysortdescfunction.md) function to create an ordered list by some key.\",'The following example shows null values in the results.\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAz3PywqDMBAF0H2+YnCl4KKFPi1d9TNKkVQHDU0mNhnpg358E4xmNuHcu7kaGXwvB/RwhlZyuLtGyEkarDw7RR2U4FWLFzsSV6CIC3EVEF4WYkmdxqyMnNOodVFOkX+O0sVgk8Bhw3N5tgGJZWcp0DZRj+8ku0WGubRPZBu2kxySkKXUOSZpsUmyXonbSUwjxQ/8aIx06otgPlp5DruNfGAd//VLcV/HHT5fNhd/aMS6MiQBAAA=)**\\\\]**\\r\\n\\r\\n```\\r\\nlet shapes = datatable (name:string , sideCount: int)\\r\\n[\\r\\n    \"triangle\", int(null),\\r\\n    \"square\", 4,\\r\\n    \"rectangle\", 4,\\r\\n    \"pentagon\", 5,\\r\\n    \"hexagon\", 6,\\r\\n    \"heptagon\", 7,\\r\\n    \"octagon\", 8,\\r\\n    \"nonagon\", 9,\\r\\n    \"decagon\", 10\\r\\n];\\r\\nshapes\\r\\n| summarize mylist = make_list_with_nulls(sideCount)\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n| mylist |\\r\\n| ------ |\\r\\n| [null,4,4,5,6,7,8,9,10] |',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/make-list-with-nulls-aggfunction\",\"make-list-with-nulls-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"make_set\",\"Creates a `dynamic` JSON array of the set of distinct values that *Expr* takes in the group.\",\"[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`make_set` `(`*Expr* [`,` *MaxSize*]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *Expr* | string | &check; | Expression used for the aggregation calculation. |\\r\\n| *MaxSize* |  |  | Integer limit on the maximum number of elements returned. *MaxSize* value can't exceed 1048576. The default is *1048576*. |\\r\\n\\r\\n> [!NOTE]\\r\\n> `makeset()` has been deprecated in favor of `make_set`. The legacy version has a default *MaxSize* limit of 128.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a `dynamic` JSON array of the set of distinct values that *Expr* takes in the group.\\r\\nThe array's sort order is undefined.\\r\\n\\r\\n> [!TIP]\\r\\n> To only count distinct values, use [dcount()](dcount-aggfunction.md).\",'This example shows the set of States grouped with the same amount of crop damage.\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/kvc6bc487453a064d3c9de.northeurope/databases/NewDatabase1?query=H4sIAAAAAAAAAwsuyS/KdS1LzSspVuDlqlEoLs3NTSzKrEpVKC5JLEktts1NzE6NL04t0QgG8TUVkioVXBJzE9NTnYvyC4oBmxrbeD8AAAA=)**\\\\]**\\r\\n\\r\\n```\\r\\nStormEvents \\r\\n| summarize states=make_set(State) by DamageCrops\\r\\n```\\r\\n\\r\\nThe results table shown includes only the first 10 rows.\\r\\n\\r\\n| DamageCrops | states |\\r\\n|--|--|\\r\\n| 0 | [\"NORTH CAROLINA\",\"WISCONSIN\",\"NEW YORK\",\"ALASKA\",\"DELAWARE\",\"OKLAHOMA\",\"INDIANA\",\"ILLINOIS\",\"MINNESOTA\",\"SOUTH DAKOTA\",\"TEXAS\",\"UTAH\",\"COLORADO\",\"VERMONT\",\"NEW JERSEY\",\"VIRGINIA\",\"CALIFORNIA\",\"PENNSYLVANIA\",\"MONTANA\",\"WASHINGTON\",\"OREGON\",\"HAWAII\",\"IDAHO\",\"PUERTO RICO\",\"MICHIGAN\",\"FLORIDA\",\"WYOMING\",\"GULF OF MEXICO\",\"NEVADA\",\"LOUISIANA\",\"TENNESSEE\",\"KENTUCKY\",\"MISSISSIPPI\",\"ALABAMA\",\"GEORGIA\",\"SOUTH CAROLINA\",\"OHIO\",\"NEW MEXICO\",\"ATLANTIC SOUTH\",\"NEW HAMPSHIRE\",\"ATLANTIC NORTH\",\"NORTH DAKOTA\",\"IOWA\",\"NEBRASKA\",\"WEST VIRGINIA\",\"MARYLAND\",\"KANSAS\",\"MISSOURI\",\"ARKANSAS\",\"ARIZONA\",\"MASSACHUSETTS\",\"MAINE\",\"CONNECTICUT\",\"GUAM\",\"HAWAII WATERS\",\"AMERICAN SAMOA\",\"LAKE HURON\",\"DISTRICT OF COLUMBIA\",\"RHODE ISLAND\",\"LAKE MICHIGAN\",\"LAKE SUPERIOR\",\"LAKE ST CLAIR\",\"LAKE ERIE\",\"LAKE ONTARIO\",\"E PACIFIC\",\"GULF OF ALASKA\"] |\\r\\n| 30000 | [\"TEXAS\",\"NEBRASKA\",\"IOWA\",\"MINNESOTA\",\"WISCONSIN\"] |\\r\\n| 4000000 | [\"CALIFORNIA\",\"KENTUCKY\",\"NORTH DAKOTA\",\"WISCONSIN\",\"VIRGINIA\"] |\\r\\n| 3000000 | [\"CALIFORNIA\",\"ILLINOIS\",\"MISSOURI\",\"SOUTH CAROLINA\",\"NORTH CAROLINA\",\"MISSISSIPPI\",\"NORTH DAKOTA\",\"OHIO\"] |\\r\\n| 14000000 | [\"CALIFORNIA\",\"NORTH DAKOTA\"] |\\r\\n| 400000 | [\"CALIFORNIA\",\"MISSOURI\",\"MISSISSIPPI\",\"NEBRASKA\",\"WISCONSIN\",\"NORTH DAKOTA\"] |\\r\\n| 50000 | [\"CALIFORNIA\",\"GEORGIA\",\"NEBRASKA\",\"TEXAS\",\"WEST VIRGINIA\",\"KANSAS\",\"MISSOURI\",\"MISSISSIPPI\",\"NEW MEXICO\",\"IOWA\",\"NORTH DAKOTA\",\"OHIO\",\"WISCONSIN\",\"ILLINOIS\",\"MINNESOTA\",\"KENTUCKY\"] |\\r\\n| 18000 | [\"WASHINGTON\",\"WISCONSIN\"] |\\r\\n| 107900000 | [\"CALIFORNIA\"] |\\r\\n| 28900000 | [\"CALIFORNIA\"] |\\r\\n\\r\\n## See also\\r\\n\\r\\n* Use [`mv-expand`](./mvexpandoperator.md) operator for the opposite function.\\r\\n* [`make_set_if`](./makesetif-aggfunction.md) operator is similar to `make_set`, except it also accepts a predicate.',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/makeset-aggfunction\",\"makeset-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"make_set_if\",\"Creates a `dynamic` JSON object (array) of the set of distinct values that *Expr* takes in the group, for which *Predicate* evaluates to `true`.\",\"[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`make_set_if` `(`*Expr*`,` *Predicate* [`,` *MaxSize*]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *Expr* | string | &check; | Expression that will be used for aggregation calculation. |\\r\\n| *Predicate* | string | &check; | Predicate that has to evaluate to `true`, in order for *Expr* to be added to the result. |\\r\\n| *MaxSize* | integer |  | The limit on the maximum number of elements returned. The default is *1048576* and can't exceed *1048576*. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a `dynamic` JSON object (array) of the set of distinct values that *Expr* takes in the group, for which *Predicate* evaluates to `true`.\\r\\nThe array's sort order is undefined.\\r\\n\\r\\n> [!TIP]\\r\\n> To only count the distinct values, use [dcountif()](dcountif-aggfunction.md)\\r\\n\\r\\n## See also\\r\\n\\r\\n[`make_set`](./makeset-aggfunction.md) function, which does the same, without predicate expression.\",'The following example shows a list of names with more than 4 letters.\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAyXNPQvCMBSF4T2/4tDJQBZFUSt1FZxEuomEFG/bYD4gSQfFH++l5U7PO9zjqKBFg5cpfJ2jVTCe6lySDYPi/NGx151NZaxdDIMUDwGgusYxVApHNetmJsdaHxZeKKaBOGx2S7jzs8jei+dJtOKHPHlvkv0SvHmTzlS07edpBd52FGZInLGVf+88QMOkAAAA)**\\\\]**\\r\\n\\r\\n```\\r\\nlet T = datatable(name:string, day_of_birth:long)\\r\\n[\\r\\n   \"John\", 9,\\r\\n   \"Paul\", 18,\\r\\n   \"George\", 25,\\r\\n   \"Ringo\", 7\\r\\n];\\r\\nT\\r\\n| summarize make_set_if(name, strlen(name) > 4)\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|set_name|\\r\\n|----|\\r\\n|[\"George\", \"Ringo\"]|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/makesetif-aggfunction\",\"makesetif-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"make_string\",\"Returns the string generated by the Unicode characters.\",\"## Syntax\\r\\n\\r\\n`make_string (`*Arg1*[, *ArgN*]... `)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *Arg1* ... *ArgN*: Expressions that are integers (int or long) or a dynamic value holding an array of integral numbers.\\r\\n* This function receives up to 64 arguments.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the string made of the Unicode characters whose codepoint value is provided by the arguments to this function. The input must consist of valid Unicode codepoints.\\r\\nIf any argument isn't mapped to a Unicode character, the function returns `null`.\",\"```\\r\\nprint str = make_string(75, 117, 115, 116, 111)\\r\\n```\\r\\n\\r\\n|str|\\r\\n|---|\\r\\n|Kusto|\\r\\n\\r\\n```\\r\\nprint str = make_string(dynamic([75, 117, 115, 116, 111]))\\r\\n```\\r\\n\\r\\n|str|\\r\\n|---|\\r\\n|Kusto|\\r\\n\\r\\n```\\r\\nprint str = make_string(dynamic([75, 117, 115]), 116, 111)\\r\\n```\\r\\n\\r\\n|str|\\r\\n|---|\\r\\n|Kusto|\\r\\n\\r\\n```\\r\\nprint str = make_string(75, 10, 117, 10, 115, 10, 116, 10, 111)\\r\\n```\\r\\n\\r\\n|str|\\r\\n|---|\\r\\n|K<br>u<br>s<br>t<br>o|\\r\\n\\r\\n```\\r\\nprint str = make_string(range(48,57), range(65,90), range(97,122))\\r\\n```\\r\\n\\r\\n|str|\\r\\n|---|\\r\\n0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/makestringfunction\",\"makestringfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"make_timespan\",\"Creates a [timespan](./scalar-data-types/timespan.md) scalar value from the specified time period.\",\"```\\r\\nmake_timespan(1,12,30,55.123) == time(1.12:30:55.123)\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`make_timespan(`*hour*,*minute*`)`\\r\\n\\r\\n`make_timespan(`*hour*,*minute*,*second*`)`\\r\\n\\r\\n`make_timespan(`*day*,*hour*,*minute*,*second*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *day*: day (a positive integer value)\\r\\n* *hour*: hour (an integer value, from 0 to 23)\\r\\n* *minute*: minute (an integer value, from 0 to 59)\\r\\n* *second*: second (a real value, from 0 to 59.9999999)\\r\\n\\r\\n## Returns\\r\\n\\r\\nIf creation is successful, result will be a [timespan](./scalar-data-types/timespan.md) value, otherwise, result will be null.\",\"```\\r\\nprint ['timespan'] = make_timespan(1,12,30,55.123)\\r\\n\\r\\n```\\r\\n\\r\\n|timespan|\\r\\n|---|\\r\\n|1.12:30:55.1230000|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/make-timespanfunction\",\"make-timespanfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"make-series\",\"Create series of specified aggregated values along a specified axis.\",\"```\\r\\nT | make-series sum(amount) default=0, avg(price) default=0 on timestamp from datetime(2016-01-01) to datetime(2016-01-10) step 1d by fruit, supplier\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `| make-series` [*MakeSeriesParameters*]\\r\\n      [*Column* `=`] *Aggregation* [`default` `=` *DefaultValue*] [`,` ...]\\r\\n    `on` *AxisColumn* [`from` *start*] [`to` *end*] `step` *step* \\r\\n    [`by`\\r\\n      [*Column* `=`] *GroupExpression* [`,` ...]]\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *Column:* Optional name for a result column. Defaults to a name derived from the expression.\\r\\n* *DefaultValue:* Default value that will be used instead of absent values. If there is no row with specific values of *AxisColumn* and *GroupExpression*, then in the results the corresponding element of the array will be assigned a *DefaultValue*. If *DefaultValue* is omitted, then 0 is assumed. \\r\\n* *Aggregation:* A call to an [aggregation function](make-seriesoperator.md#list-of-aggregation-functions) such as `count()` or `avg()`, with column names as arguments. See the [list of aggregation functions](make-seriesoperator.md#list-of-aggregation-functions). Only aggregation functions that return numeric results can be used with the `make-series` operator.\\r\\n* AxisColumn: A column on which the series will be ordered, usually of type `datetime` or `timespan`, but all numeric types are also accepted.\\r\\n* *start*: (optional) The low bound value of the *AxisColumn* for each of the series to be built. *start*, *end*, and *step* are used to build an array of *AxisColumn* values within a given range and using specified *step*. All *Aggregation* values are ordered respectively to this array. This *AxisColumn* array is also the last output column in the output that has the same name as *AxisColumn*. If a *start* value is not specified, the start is the first bin (step) which has data in each series.\\r\\n* *end*: (optional) The high bound (non-inclusive) value of the *AxisColumn*. The last index of the time series is smaller than this value (and will be *start* plus integer multiple of *step* that is smaller than *end*). If *end* value is not provided, it will be the upper bound of the last bin (step) which has data per each series.\\r\\n* *step*: The difference between two consecutive elements of the *AxisColumn* array (that is, the bin size). For a list of possible time intervals, see [timespan](./scalar-data-types/timespan.md). \\r\\n* *GroupExpression:* An expression over the columns that provides a set of distinct values. Typically it's a column name that already provides a restricted set of values. \\r\\n* *MakeSeriesParameters*: Zero or more (space-separated) parameters in the form of *Name* `=` *Value*\\r\\n\\tthat control the behavior. The following parameters are supported: \\r\\n  \\r\\n  |Name  |Description  |\\r\\n  |---|---|\\r\\n  |`kind` |Produces default result when the input of make-series operator is empty. Value: `nonempty`|  \\r\\n  |`hint.shufflekey=<key>` |The `shufflekey` query shares the query load on cluster nodes, using a key to partition data. See [shuffle query](shufflequery.md) |  \\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> The arrays generated by make-series are limited to 1048576 values (2^20). Trying to generate a larger array with make-series would result in either an error or a truncated array.\\r\\n\\r\\n**Alternate Syntax**\\r\\n\\r\\n*T* `| make-series`\\r\\n      [*Column* `=`] *Aggregation* [`default` `=` *DefaultValue*] [`,` ...]\\r\\n    `on` *AxisColumn* `in` `range(`*start*`,` *stop*`,` *step*`)`\\r\\n    [`by`\\r\\n      [*Column* `=`] *GroupExpression* [`,` ...]]\\r\\n\\r\\nThe generated series from the alternate syntax differs from the main syntax in two aspects:\\r\\n\\r\\n* The *stop* value is inclusive.\\r\\n* Binning the index axis is generated with bin() and not bin_at(), which means that *start* may not be included in the generated series.\\r\\n\\r\\nIt is recommended to use the main syntax of make-series and not the alternate syntax.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe input rows are arranged into groups having the same values of the `by` expressions and the `bin_at(`*AxisColumn*`, `*step*`, `*start*`)` expression. Then the specified aggregation functions are computed over each group, producing a row for each group. The result contains the `by` columns, *AxisColumn* column and also at least one column for each computed aggregate. (Aggregations over multiple columns or non-numeric results are not supported.)\\r\\n\\r\\nThis intermediate result has as many rows as there are distinct combinations of `by` and `bin_at(`*AxisColumn*`, `*step*`, `*start*`)` values.\\r\\n\\r\\nFinally the rows from the intermediate result arranged into groups having the same values of the `by` expressions and all aggregated values are arranged into arrays (values of `dynamic` type). For each aggregation, there is one column containing its array with the same name. The last column is an array containing the values of *AxisColumn* binned according to the specified *step*.\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> Although you can provide arbitrary expressions for both the aggregation and grouping expressions, it's more efficient to use simple column names.\\r\\n\\r\\n## List of aggregation functions\\r\\n\\r\\n|Function|Description|\\r\\n|--------|-----------|\\r\\n|[avg()](avg-aggfunction.md)|Returns an average value across the group|\\r\\n|[avgif()](avgif-aggfunction.md)|Returns an average with the predicate of the group|\\r\\n|[count()](count-aggfunction.md)|Returns a count of the group|\\r\\n|[countif()](countif-aggfunction.md)|Returns a count with the predicate of the group|\\r\\n|[dcount()](dcount-aggfunction.md)|Returns an  approximate distinct count of the group elements|\\r\\n|[dcountif()](dcountif-aggfunction.md)|Returns an approximate distinct count with the predicate of the group|\\r\\n|[max()](max-aggfunction.md)|Returns the maximum value across the group|\\r\\n|[maxif()](maxif-aggfunction.md)|Returns the maximum value with the predicate of the group|\\r\\n|[min()](min-aggfunction.md)|Returns the minimum value across the group|\\r\\n|[minif()](minif-aggfunction.md)|Returns the minimum value with the predicate of the group|\\r\\n|[percentile()](percentiles-aggfunction.md)|Returns the percentile value across the group|\\r\\n|[take_any()](take-any-aggfunction.md)|Returns a random non-empty value for the group|\\r\\n|[stdev()](stdev-aggfunction.md)|Returns the standard deviation across the group|\\r\\n|[sum()](sum-aggfunction.md)|Returns the sum of the elements within the group|\\r\\n|[sumif()](sumif-aggfunction.md)|Returns the sum of the elements with the predicate of the group|\\r\\n|[variance()](variance-aggfunction.md)|Returns the variance across the group|\\r\\n\\r\\n## List of series analysis functions\\r\\n\\r\\n|Function|Description|\\r\\n|--------|-----------|\\r\\n|[series_fir()](series-firfunction.md)|Applies [Finite Impulse Response](https://en.wikipedia.org/wiki/Finite_impulse_response) filter|\\r\\n|[series_iir()](series-iirfunction.md)|Applies [Infinite Impulse Response](https://en.wikipedia.org/wiki/Infinite_impulse_response) filter|\\r\\n|[series_fit_line()](series-fit-linefunction.md)|Finds a straight line that is the best approximation of the input|\\r\\n|[series_fit_line_dynamic()](series-fit-line-dynamicfunction.md)|Finds a line that is the best approximation of the input, returning dynamic object|\\r\\n|[series_fit_2lines()](series-fit-2linesfunction.md)|Finds two lines that are the best approximation of the input|\\r\\n|[series_fit_2lines_dynamic()](series-fit-2lines-dynamicfunction.md)|Finds two lines that are the best approximation of the input, returning dynamic object|\\r\\n|[series_outliers()](series-outliersfunction.md)|Scores anomaly points in a series|\\r\\n|[series_periods_detect()](series-periods-detectfunction.md)|Finds the most significant periods that exist in a time series|\\r\\n|[series_periods_validate()](series-periods-validatefunction.md)|Checks whether a time series contains periodic patterns of given lengths|\\r\\n|[series_stats_dynamic()](series-stats-dynamicfunction.md)|Return multiple columns with the common statistics (min/max/variance/stdev/average)|\\r\\n|[series_stats()](series-statsfunction.md)|Generates a dynamic value with the common statistics (min/max/variance/stdev/average)|\\r\\n\\r\\nFor a complete list of series analysis functions see: [Series processing functions](scalarfunctions.md#series-processing-functions)\\r\\n\\r\\n## List of series interpolation functions\\r\\n\\r\\n|Function|Description|\\r\\n|--------|-----------|\\r\\n|[series_fill_backward()](series-fill-backwardfunction.md)|Performs backward fill interpolation of missing values in a series|\\r\\n|[series_fill_const()](series-fill-constfunction.md)|Replaces missing values in a series with a specified constant value|\\r\\n|[series_fill_forward()](series-fill-forwardfunction.md)|Performs forward fill interpolation of missing values in a series|\\r\\n|[series_fill_linear()](series-fill-linearfunction.md)|Performs linear interpolation of missing values in a series|\\r\\n\\r\\n* Note: Interpolation functions by default assume `null` as a missing value. Therefore specify `default=`*double*(`null`) in `make-series` if you intend to use interpolation functions for the series.\",'A table that shows arrays of the numbers and average prices of each fruit from each supplier ordered by the timestamp with specified range. There\\'s a row in the output for each distinct combination of fruit and supplier. The output columns show the fruit, supplier, and arrays of: count, average, and the whole timeline (from 2016-01-01 until 2016-01-10). All arrays are sorted by the respective timestamp and all gaps are filled with default values (0 in this example). All other input columns are ignored.\\r\\n\\r\\n```\\r\\nT | make-series PriceAvg=avg(Price) default=0\\r\\non Purchase from datetime(2016-09-10) to datetime(2016-09-13) step 1d by Supplier, Fruit\\r\\n```\\r\\n\\r\\n![Three tables. The first lists raw data, the second has only distinct supplier-fruit-date combinations, and the third contains the make-series results.](images/make-seriesoperator/makeseries.png)\\r\\n\\r\\n```\\r\\nlet data=datatable(timestamp:datetime, metric: real)\\r\\n[\\r\\n  datetime(2016-12-31T06:00), 50,\\r\\n  datetime(2017-01-01), 4,\\r\\n  datetime(2017-01-02), 3,\\r\\n  datetime(2017-01-03), 4,\\r\\n  datetime(2017-01-03T03:00), 6,\\r\\n  datetime(2017-01-05), 8,\\r\\n  datetime(2017-01-05T13:40), 13,\\r\\n  datetime(2017-01-06), 4,\\r\\n  datetime(2017-01-07), 3,\\r\\n  datetime(2017-01-08), 8,\\r\\n  datetime(2017-01-08T21:00), 8,\\r\\n  datetime(2017-01-09), 2,\\r\\n  datetime(2017-01-09T12:00), 11,\\r\\n  datetime(2017-01-10T05:00), 5,\\r\\n];\\r\\nlet interval = 1d;\\r\\nlet stime = datetime(2017-01-01);\\r\\nlet etime = datetime(2017-01-10);\\r\\ndata\\r\\n| make-series avg(metric) on timestamp from stime to etime step interval \\r\\n```\\r\\n\\r\\n|avg_metric|timestamp|\\r\\n|---|---|\\r\\n|[ 4.0, 3.0, 5.0, 0.0, 10.5, 4.0, 3.0, 8.0, 6.5 ]|[ \"2017-01-01T00:00:00.0000000Z\", \"2017-01-02T00:00:00.0000000Z\", \"2017-01-03T00:00:00.0000000Z\", \"2017-01-04T00:00:00.0000000Z\", \"2017-01-05T00:00:00.0000000Z\", \"2017-01-06T00:00:00.0000000Z\", \"2017-01-07T00:00:00.0000000Z\", \"2017-01-08T00:00:00.0000000Z\", \"2017-01-09T00:00:00.0000000Z\" ]|  \\r\\n\\r\\nWhen the input to `make-series` is empty, the default behavior of `make-series` produces an empty result as well.\\r\\n\\r\\n```\\r\\nlet data=datatable(timestamp:datetime, metric: real)\\r\\n[\\r\\n  datetime(2016-12-31T06:00), 50,\\r\\n  datetime(2017-01-01), 4,\\r\\n  datetime(2017-01-02), 3,\\r\\n  datetime(2017-01-03), 4,\\r\\n  datetime(2017-01-03T03:00), 6,\\r\\n  datetime(2017-01-05), 8,\\r\\n  datetime(2017-01-05T13:40), 13,\\r\\n  datetime(2017-01-06), 4,\\r\\n  datetime(2017-01-07), 3,\\r\\n  datetime(2017-01-08), 8,\\r\\n  datetime(2017-01-08T21:00), 8,\\r\\n  datetime(2017-01-09), 2,\\r\\n  datetime(2017-01-09T12:00), 11,\\r\\n  datetime(2017-01-10T05:00), 5,\\r\\n];\\r\\nlet interval = 1d;\\r\\nlet stime = datetime(2017-01-01);\\r\\nlet etime = datetime(2017-01-10);\\r\\ndata\\r\\n| limit 0\\r\\n| make-series avg(metric) default=1.0 on timestamp from stime to etime step interval \\r\\n| count \\r\\n```\\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|0|\\r\\n\\r\\nUsing `kind=nonempty` in `make-series` will produce a non-empty result of the default values:\\r\\n\\r\\n```\\r\\nlet data=datatable(timestamp:datetime, metric: real)\\r\\n[\\r\\n  datetime(2016-12-31T06:00), 50,\\r\\n  datetime(2017-01-01), 4,\\r\\n  datetime(2017-01-02), 3,\\r\\n  datetime(2017-01-03), 4,\\r\\n  datetime(2017-01-03T03:00), 6,\\r\\n  datetime(2017-01-05), 8,\\r\\n  datetime(2017-01-05T13:40), 13,\\r\\n  datetime(2017-01-06), 4,\\r\\n  datetime(2017-01-07), 3,\\r\\n  datetime(2017-01-08), 8,\\r\\n  datetime(2017-01-08T21:00), 8,\\r\\n  datetime(2017-01-09), 2,\\r\\n  datetime(2017-01-09T12:00), 11,\\r\\n  datetime(2017-01-10T05:00), 5,\\r\\n];\\r\\nlet interval = 1d;\\r\\nlet stime = datetime(2017-01-01);\\r\\nlet etime = datetime(2017-01-10);\\r\\ndata\\r\\n| limit 0\\r\\n| make-series kind=nonempty avg(metric) default=1.0 on timestamp from stime to etime step interval \\r\\n```\\r\\n\\r\\n|avg_metric|timestamp|\\r\\n|---|---|\\r\\n|[<br>  1.0,<br>  1.0,<br>  1.0,<br>  1.0,<br>  1.0,<br>  1.0,<br>  1.0,<br>  1.0,<br>  1.0<br>]|[<br>  \"2017-01-01T00:00:00.0000000Z\",<br>  \"2017-01-02T00:00:00.0000000Z\",<br>  \"2017-01-03T00:00:00.0000000Z\",<br>  \"2017-01-04T00:00:00.0000000Z\",<br>  \"2017-01-05T00:00:00.0000000Z\",<br>  \"2017-01-06T00:00:00.0000000Z\",<br>  \"2017-01-07T00:00:00.0000000Z\",<br>  \"2017-01-08T00:00:00.0000000Z\",<br>  \"2017-01-09T00:00:00.0000000Z\"<br>]|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/make-seriesoperator\",\"make-seriesoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"match\",\"Filters a record set based on a case-sensitive regex value.\",\"For further information about other operators and to determine which operator is most appropriate for your query, see [datatype string operators](datatypes-string-operators.md).\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n> [!NOTE]\\r\\n> Performance depends on the type of search and the structure of the data.\\r\\n\\r\\nFor best practices, see [Query best practices](best-practices.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *col* `matches` `regex` `(`*expression*`)`   \\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T* - The tabular input whose records are to be filtered.\\r\\n* *col* - The column to filter.\\r\\n* *expression* - Scalar or literal expression.\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.\",'```\\r\\nStormEvents\\r\\n    | summarize event_count=count() by State\\r\\n    | where State matches regex \"K.*S\"\\r\\n    | where event_count > 10\\r\\n    | project State, event_count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|event_count|\\r\\n|-----|-----------|\\r\\n|KANSAS|3166|\\r\\n|ARKANSAS|1028|\\r\\n|LAKE SUPERIOR|34|\\r\\n|LAKE ST CLAIR|32|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/regex-operator\",\"regex-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"materialize\",\"Captures the value of a tabular expression for the duration of the query execution so that it can be referenced multiple times by the query without recalculation.\",'## Syntax\\r\\n\\r\\n`materialize(`*expression*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *expression*: Tabular expression to be evaluated and cached during query execution.\\r\\n\\r\\n## Remarks\\r\\n\\r\\nThe `materialize()` function is useful in the following scenarios:\\r\\n\\r\\n* To speed up queries that perform *heavy* calculations whose results are used multiple times in the query.\\r\\n* To evaluate a tabular expression only once and use it many times in a query. This is commonly required if the tabular expression is non-deterministic. For example, if the expression uses the `rand()` or the `dcount()` functions.\\r\\n\\r\\n> [!NOTE]\\r\\n> Materialize has a cache size limit of **5 GB**. This limit is per cluster node and is mutual for all queries running concurrently. If a query uses `materialize()` and the cache can\\'t hold any more data, the query will abort with an error.\\r\\n\\r\\n>[!TIP]\\r\\n> Another way to perform materialization of tabular expression is by using the `hint.materialized` flag\\r\\n> of the [as operator](asoperator.md) and [partition operator](partitionoperator.md). They all share a\\r\\n> single materialization cache.\\r\\n\\r\\n>[!TIP]\\r\\n>\\r\\n>* Push all possible operators that reduce the materialized data set and keep the semantics of the query. For example, use common filters on top of the same materialized expression.\\r\\n>* Use materialize with join or union when their operands have mutual subqueries that can be executed once. For example, join/union fork legs. See [example of using join operator](#examples-of-query-performance-improvement).\\r\\n>* Materialize can only be used in let statements if you give the cached result a name. See [example of using let statements](#examples-of-using-materialize)).\\r\\n\\r\\n## Examples of query performance improvement\\r\\n\\r\\nThe following example shows how `materialize()` can be used to improve performance of the query.\\r\\nThe expression `_detailed_data` is defined using `materialize()` function and therefore is calculated only once.\\r\\n\\r\\n```\\r\\nlet _detailed_data = materialize(StormEvents | summarize Events=count() by State, EventType);\\r\\n_detailed_data\\r\\n| summarize TotalStateEvents=sum(Events) by State\\r\\n| join (_detailed_data) on State\\r\\n| extend EventPercentage = Events*100.0 / TotalStateEvents\\r\\n| project State, EventType, EventPercentage, Events\\r\\n| top 10 by EventPercentage\\r\\n```\\r\\n\\r\\n|State|EventType|EventPercentage|Events|\\r\\n|---|---|---|---|\\r\\n|HAWAII WATERS|Waterspout|100|2|\\r\\n|LAKE ONTARIO|Marine Thunderstorm Wind|100|8|\\r\\n|GULF OF ALASKA|Waterspout|100|4|\\r\\n|ATLANTIC NORTH|Marine Thunderstorm Wind|95.2127659574468|179|\\r\\n|LAKE ERIE|Marine Thunderstorm Wind|92.5925925925926|25|\\r\\n|E PACIFIC|Waterspout|90|9|\\r\\n|LAKE MICHIGAN|Marine Thunderstorm Wind|85.1648351648352|155|\\r\\n|LAKE HURON|Marine Thunderstorm Wind|79.3650793650794|50|\\r\\n|GULF OF MEXICO|Marine Thunderstorm Wind|71.7504332755633|414|\\r\\n|HAWAII|High Surf|70.0218818380744|320|\\r\\n\\r\\nThe following example generates a set of random numbers and calculates:\\r\\n\\r\\n* How many distinct values in the set (`Dcount`)\\r\\n* The top three values in the set\\r\\n* The sum of all these values in the set\\r\\n\\r\\nThis operation can be done using [batches](batches.md) and materialize:\\r\\n\\r\\n```\\r\\nlet randomSet = \\r\\n    materialize(\\r\\n        range x from 1 to 3000000 step 1\\r\\n        | project value = rand(10000000));\\r\\nrandomSet | summarize Dcount=dcount(value);\\r\\nrandomSet | top 3 by value;\\r\\nrandomSet | summarize Sum=sum(value)\\r\\n```\\r\\n\\r\\nResult set 1:  \\r\\n\\r\\n|Dcount|\\r\\n|---|\\r\\n|2578351|\\r\\n\\r\\nResult set 2:\\r\\n\\r\\n|value|\\r\\n|---|\\r\\n|9999998|\\r\\n|9999998|\\r\\n|9999997|\\r\\n\\r\\nResult set 3:\\r\\n\\r\\n|Sum|\\r\\n|---|\\r\\n|15002960543563|\\r\\n\\r\\n## Examples of using materialize()\\r\\n\\r\\n> [!TIP]\\r\\n> Materialize your column at ingestion time if most of your queries extract fields from dynamic objects across millions of rows.\\r\\n\\r\\nTo use the `let` statement with a value that you use more than once, use the [materialize() function](./materializefunction.md). Try to push all possible operators that will reduce the materialized data set and still keep the semantics of the query. For example, use filters, or project only required columns.\\r\\n\\r\\n```\\r\\n    let materializedData = materialize(Table\\r\\n    | where Timestamp > ago(1d));\\r\\n    union (materializedData\\r\\n    | where Text !has \"somestring\"\\r\\n    | summarize dcount(Resource1)), (materializedData\\r\\n    | where Text !has \"somestring\"\\r\\n    | summarize dcount(Resource2))\\r\\n```\\r\\n\\r\\nThe filter on `Text` is mutual and can be pushed to the materialize expression.\\r\\nThe query only needs columns `Timestamp`, `Text`, `Resource1`, and `Resource2`. Project these columns inside the materialized expression.\\r\\n\\r\\n```\\r\\n    let materializedData = materialize(Table\\r\\n    | where Timestamp > ago(1d)\\r\\n    | where Text !has \"somestring\"\\r\\n    | project Timestamp, Resource1, Resource2, Text);\\r\\n    union (materializedData\\r\\n    | summarize dcount(Resource1)), (materializedData\\r\\n    | summarize dcount(Resource2))\\r\\n```\\r\\n\\r\\nIf the filters aren\\'t identical, as in the following query:  \\r\\n\\r\\n```\\r\\n    let materializedData = materialize(Table\\r\\n    | where Timestamp > ago(1d));\\r\\n    union (materializedData\\r\\n    | where Text has \"String1\"\\r\\n    | summarize dcount(Resource1)), (materializedData\\r\\n    | where Text has \"String2\"\\r\\n    | summarize dcount(Resource2))\\r\\n ```\\r\\n\\r\\nWhen the combined filter reduces the materialized result drastically, combine both filters on the materialized result by a logical `or` expression as in the query below. However, keep the filters in each union leg to preserve the semantics of the query.\\r\\n\\r\\n```\\r\\n    let materializedData = materialize(Table\\r\\n    | where Timestamp > ago(1d)\\r\\n    | where Text has \"String1\" or Text has \"String2\"\\r\\n    | project Timestamp, Resource1, Resource2, Text);\\r\\n    union (materializedData\\r\\n    | where Text has \"String1\"\\r\\n    | summarize dcount(Resource1)), (materializedData\\r\\n    | where Text has \"String2\"\\r\\n    | summarize dcount(Resource2))\\r\\n```',\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/materializefunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"materialized_view\",\"References the materialized part of a [materialized view](../management/materialized-views/materialized-view-overview.md).\",\"The `materialized_view()` function supports a way of querying the *materialized* part only of the view, while specifying the max latency the user is willing to tolerate. This option isn't guaranteed to return the most up-to-date records, but should always be more performant than querying the entire view. This function is useful for scenarios in which you're willing to sacrifice some freshness for performance, for example in telemetry dashboards.\\r\\n\\r\\n<!--- csl --->\\r\\n\\r\\n```\\r\\nmaterialized_view('ViewName')\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`materialized_view` `(`*ViewName*`,` [*max_age*] `)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *ViewName*: The name of the `materialized view`.\\r\\n* *max_age*: Optional. If not provided, only the *materialized* part of the view is returned. If provided, function will return the \\r\\n_materialized_ part of the view if last materialization time is greater than [@now -  max_age]. Otherwise, the entire view is returned (identical \\r\\nto querying *ViewName* directly.\",'Query the *materialized* part of the view only, independent on when it was last materialized.\\r\\n\\r\\n```\\r\\nmaterialized_view(\"ViewName\")\\r\\n```\\r\\n\\r\\nQuery the *materialized* part only if it was materialized in the last 10 minutes. If the materialized part is older than 10 minutes, return the full view. This option is expected to be less performant than querying the materialized part.\\r\\n\\r\\n```\\r\\nmaterialized_view(\"ViewName\", 10m)\\r\\n```\\r\\n\\r\\n## Notes\\r\\n\\r\\n* Once a view is created, it can be queried just as any other table in the database, including participate in cross-cluster / cross-database queries.\\r\\n* Materialized views aren\\'t included in wildcard unions or searches.\\r\\n* Syntax for querying the view is the view name (like a table reference).\\r\\n* Querying the materialized view will always return the most up-to-date results, based on all records ingested to the source table. The query combines the materialized part of the view with all unmaterialized records in the source table. For more information, see [behind the scenes](../management/materialized-views/materialized-view-overview.md#how-materialized-views-work) for details.',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/materialized-view-function\",\"materialized-view-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"max\",\"Finds the maximum value across the group.\",\"[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`max` `(`*Expr*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *Expr*  string | &check; | Expression used for aggregation calculation. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the maximum value of *Expr* across the group.\\r\\n\\r\\n> [!TIP]\\r\\n> This gives you the max on its own. But if you want other columns in the rowuse [arg_max](arg-max-aggfunction.md).\",\"This example returns the last record in a table.\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKC7NzU0syqxKVfBJLEktLgFL2OYmVmgElyQWlYRk5qZqAgAAp60yMgAAAA==)**\\\\]**\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize LatestEvent=max(StartTime)\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n| LatestEvent |\\r\\n|--|\\r\\n| 2007-12-31T23:53:00Z |\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/max-aggfunction\",\"max-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"max_of\",\"Returns the maximum value of several evaluated numeric expressions.\",\"```\\r\\nmax_of(10, 1, -3, 17) == 17\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`max_of` `(`*expr_1*`,` *expr_2* ...`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *expr_i*: A scalar expression, to be evaluated.\\r\\n\\r\\n- All arguments must be of the same type.\\r\\n- Maximum of 64 arguments is supported.\\r\\n- Non-null values take precedence to null values.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe maximum value of all argument expressions.\",\"Find the maximum value in an array: \\r\\n\\r\\n```\\r\\nprint result = max_of(10, 1, -3, 17) \\r\\n```\\r\\n\\r\\n|result|\\r\\n|---|\\r\\n|17|\\r\\n\\r\\nFind the maximum value in a data-table. Non-null values take precedence over null values:\\r\\n\\r\\n```\\r\\ndatatable (A:int, B:int)\\r\\n[1, 6,\\r\\n8, 1,\\r\\nint(null), 2,\\r\\n1, int(null),\\r\\nint(null), int(null)]\\r\\n| project max_of(A, B)\\r\\n```\\r\\n\\r\\n|result|\\r\\n|---|\\r\\n|6|\\r\\n|8| \\r\\n|2| \\r\\n|1|\\r\\n|(null)|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/max-offunction\",\"max-offunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"maxif\",\"Calculates the maximum value across the group for which *Predicate* evaluates to `true`.\",\"[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\nSee also - [max()](max-aggfunction.md) function, which returns the maximum value across the group without predicate expression.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`maxif` `(`*Expr*`,`*Predicate*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *Expr* | string | &check; | Expression that will be used for aggregation calculation. |\\r\\n| *Predicate* | string | &check; | Expression that will be used to filter rows. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the maximum value of *Expr* across the group for which *Predicate* evaluates to `true`.\",\"This example shows the maximum damage for events with no casualties.\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAyWMMQ7CQAwEe17hkigp+ICrHAUFCCkvMImBk7g7ZDvRBfF4IlztjFa7gxVJx4Wz6e4LXI3zBIESPRg9eilvbZ2vG7PY2kFgsqeiR4jCo7Uupzz9dbvTOSWS+GE4U/WHS+lJZ3pZZMVENd73XnS+BsRDA7cVBiPjH/V0dHmeAAAA)**\\\\]**\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| extend Damage=DamageCrops+DamageProperty, Deaths=DeathsDirect+DeathsIndirect\\r\\n| summarize MaxDamageNoCasualties=maxif(Damage,Deaths ==0) by State\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\nThe results table shown includes only the first 10 rows.\\r\\n\\r\\n| State                | MaxDamageNoCasualties |\\r\\n| -------------------- | --------------------- |\\r\\n| TEXAS                | 25000000              |\\r\\n| KANSAS               | 37500000              |\\r\\n| IOWA                 | 15000000              |\\r\\n| ILLINOIS             | 5000000               |\\r\\n| MISSOURI             | 500005000             |\\r\\n| GEORGIA              | 344000000             |\\r\\n| MINNESOTA            | 38390000              |\\r\\n| WISCONSIN            | 45000000              |\\r\\n| NEBRASKA             | 4000000               |\\r\\n| NEW YORK             | 26000000              |\\r\\n| ... | ... |\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/maxif-aggfunction\",\"maxif-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"min\",\"Finds the minimum value across the group.\",\"[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`min` `(`*Expr*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *Expr*  string | &check; | Expression used for aggregation calculation. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the minimum value of *Expr* across the group.\\r\\n\\r\\n> [!TIP]\\r\\n> This gives you the min on its own. But if you want other columns in the row [arg_min](arg-min-aggfunction.md).\",\"This example returns the first record in a table.\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKC7NzU0syqxKVXDLLCouAYvb5mbmaQSXJBaVhGTmpmoCAMaAOl8xAAAA)**\\\\]**\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize FirstEvent=min(StartTime)\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n| FirstEvent |\\r\\n|--|\\r\\n| 2007-01-01T00:00:00Z |\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/min-aggfunction\",\"min-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"min_of\",\"Returns the minimum value of several evaluated numeric expressions.\",\"```\\r\\nmin_of(10, 1, -3, 17) == -3\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`min_of` `(`*expr_1*`,` *expr_2* ...`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *expr_i*: A scalar expression, to be evaluated.\\r\\n\\r\\n- All arguments must be of the same type.\\r\\n- Maximum of 64 arguments is supported.\\r\\n- Non-null values take precedence to null values.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe minimum value of all argument expressions.\",\"Find the maximum value in an array: \\r\\n\\r\\n```\\r\\nprint result=min_of(10, 1, -3, 17) \\r\\n```\\r\\n\\r\\n|result|\\r\\n|---|\\r\\n|-3|\\r\\n\\r\\nFind the minimum value in a data-table. Non-null values take precedence over null values:\\r\\n\\r\\n```\\r\\ndatatable (A:int, B:int)\\r\\n[5, 2,\\r\\n10, 1,\\r\\nint(null), 3,\\r\\n1, int(null),\\r\\nint(null), int(null)]\\r\\n| project min_of(A, B)\\r\\n```\\r\\n\\r\\n|result|\\r\\n|---|\\r\\n|2|\\r\\n|1|\\r\\n|3| \\r\\n|1| \\r\\n|(null) |\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/min-offunction\",\"min-offunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"minif\",\"Returns the minimum value across the group for which *Predicate* evaluates to `true`.\",\"* Can be used only in context of aggregation inside [summarize](summarizeoperator.md)\\r\\n\\r\\nSee also - [min()](min-aggfunction.md) function, which returns the minimum value across the group without predicate expression.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`minif` `(`*Expr*`,`*Predicate*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *Expr* | string | &check; | Expression that will be used for aggregation calculation. |\\r\\n| *Predicate* | string | &check; | Expression that will be used to filter rows. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe minimum value of *Expr* across the group for which *Predicate* evaluates to `true`.\",\"This example shows the minimum damage for events with casualties (Except 0)\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA3WOsQ6CUAxFd7+iIwQGfwAXcHAwMWFwrlKlCa+Y16Ji/Hif1NXp3tvenrS1MYbtncR09QZ6GkkHDQa8UuVSx/GmhftD8hRtLqEhtF4rl4Yjna3wsJNuiQmnUwgY+UWwZ3HCka2vUSccjEmrwMKXzFdl5gDYrHPA9MZv/s05nGZoDY0gcR89xb/MVF+uWWU0mYYh+1PMPyFcEcH8AAAA)**\\\\]**\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| extend Damage=DamageCrops+DamageProperty, Deaths=DeathsDirect+DeathsIndirect\\r\\n| summarize MinDamageWithCasualties=minif(Damage,(Deaths >0) and (Damage >0)) by State \\r\\n| where MinDamageWithCasualties >0 and isnotnull(MinDamageWithCasualties)\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\nThe results table shown includes only the first 10 rows.\\r\\n\\r\\n| State          | MinDamageWithCasualties |\\r\\n| -------------- | ----------------------- |\\r\\n| TEXAS          | 8000                    |\\r\\n| KANSAS         | 5000                    |\\r\\n| IOWA           | 45000                   |\\r\\n| ILLINOIS       | 100000                  |\\r\\n| MISSOURI       | 10000                   |\\r\\n| GEORGIA        | 500000                  |\\r\\n| MINNESOTA      | 200000                  |\\r\\n| WISCONSIN      | 10000                   |\\r\\n| NEW YORK       | 25000                   |\\r\\n| NORTH CAROLINA | 15000                   |\\r\\n| ... | ... |\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/minif-aggfunction\",\"minif-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"monthofyear\",\"Returns the integer number represents the month number of the given year.\",'Another alias: getmonth()\\r\\n\\r\\n```\\r\\nmonthofyear(datetime(\"2015-12-14\"))\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`monthofyear(`*a_date*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* `a_date`: A `datetime`.\\r\\n\\r\\n## Returns\\r\\n\\r\\n`month number` of the given year.',\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/monthofyearfunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"mv-apply\",\"Applies a subquery to each record, and returns the union of the results of\\r\\nall subqueries.\",\"For example, assume a table `T` has a column `Metric` of type `dynamic`\\r\\nwhose values are arrays of `real` numbers. The following query will locate the\\r\\ntwo biggest values in each `Metric` value, and return the records corresponding\\r\\nto these values.\\r\\n\\r\\n```\\r\\nT | mv-apply Metric to typeof(real) on \\r\\n(\\r\\n   top 2 by Metric desc\\r\\n)\\r\\n```\\r\\n\\r\\nThe `mv-apply` operator has the following\\r\\nprocessing steps:\\r\\n\\r\\n1. Uses the [`mv-expand`](./mvexpandoperator.md) operator to expand each record in the input into subtables (order is preserved).\\r\\n1. Applies the subquery for each of the subtables.\\r\\n1. Adds zero or more columns to the resulting subtable. These columns contain the values of the source columns that aren't expanded, and are repeated where needed.\\r\\n1. Returns the union of the results.\\r\\n\\r\\nThe `mv-apply` operator gets the following inputs:\\r\\n\\r\\n1. One or more expressions that evaluate into dynamic arrays to expand.\\r\\n   The number of records in each expanded subtable is the maximum length of\\r\\n   each of those dynamic arrays. Null values are added where multiple expressions are specified and the corresponding arrays have different lengths.\\r\\n1. Optionally, the names to assign the values of the expressions after expansion.\\r\\n   These names become the columns names in the subtables.\\r\\n   If not specified, the original name of the column is used when the expression is a column reference. A random name is used otherwise. \\r\\n   > [!NOTE]\\r\\n   > It is recommended to use the default column names.\\r\\n1. The data types of the elements of those dynamic arrays, after expansion.\\r\\n   These become the column types of the columns in the subtables.\\r\\n   If not specified, `dynamic` is used.\\r\\n1. Optionally, the name of a column to add to the subtables that specifies the\\r\\n   0-based index of the element in the array that resulted in the subtable record.\\r\\n1. Optionally, the maximum number of array elements to expand.\\r\\n\\r\\nThe `mv-apply` operator can be thought of as a generalization of the\\r\\n[`mv-expand`](./mvexpandoperator.md) operator (in fact, the latter can be implemented\\r\\nby the former, if the subquery includes only projections.)\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `mv-apply` [*ItemIndex*] *ColumnsToExpand* [*RowLimit*] `on` `(` *SubQuery* `)`\\r\\n\\r\\nWhere *ItemIndex* has the syntax:\\r\\n\\r\\n`with_itemindex` `=` *IndexColumnName*\\r\\n\\r\\n*ColumnsToExpand* is a comma-separated list of one or more elements of the form:\\r\\n\\r\\n[*Name* `=`] *ArrayExpression* [`to` `typeof` `(`*Typename*`)`]\\r\\n\\r\\n*RowLimit* is simply:\\r\\n\\r\\n`limit` *RowLimit*\\r\\n\\r\\nand *SubQuery* has the same syntax of any query statement.\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *ItemIndex*: If used, indicates the name of a column of type `long` that is appended to the input as part of the array-expansion phase and indicates the 0-based array index of the\\r\\n  expanded value.\\r\\n* *Name*: If used, the name to assign the array-expanded values of each\\r\\n  array-expanded expression.\\r\\n  If not specified, the name of the column will be used if available.\\r\\n  A random name is generated if *ArrayExpression* is not a simple column name.\\r\\n* *ArrayExpression*: An expression of type `dynamic` whose values will be array-expanded.\\r\\n  If the expression is the name of a column in the input, the input column is\\r\\n  removed from the input and a new column of the same name (or *ColumnName* if\\r\\n  specified) appears in the output.\\r\\n* *Typename*: If used, the name of the type that the individual elements of the\\r\\n  `dynamic` array *ArrayExpression* take. Elements that do not conform to this\\r\\n  type will be replaced by a null value.\\r\\n  (If unspecified, `dynamic` is used by default.)\\r\\n* *RowLimit*: If used, a limit on the number of records to generate from each\\r\\n  record of the input.\\r\\n  (If unspecified, 2147483647 is used.)\\r\\n* *SubQuery*: A tabular query expression with an implicit tabular source that gets\\r\\n  applied to each array-expanded subtable.\\r\\n\\r\\n**Notes**\\r\\n\\r\\n* Unlike the [`mv-expand`](./mvexpandoperator.md) operator, the `mv-apply` operator\\r\\n  does not support `bagexpand=array` expansion. If the expression to be expanded\\r\\n  is a property bag and not an array, it is possible to use an inner `mv-expand`\\r\\n  operator (see example below).\",'### Getting the largest element from the array\\r\\n\\r\\n```\\r\\nlet _data =\\r\\nrange x from 1 to 8 step 1\\r\\n| summarize l=make_list(x) by xMod2 = x % 2;\\r\\n_data\\r\\n| mv-apply element=l to typeof(long) on \\r\\n(\\r\\n   top 1 by element\\r\\n)\\r\\n```\\r\\n\\r\\n|`xMod2`|l           |element|\\r\\n|-----|------------|-------|\\r\\n|1    |[1, 3, 5, 7]|7      |\\r\\n|0    |[2, 4, 6, 8]|8      |\\r\\n\\r\\n### Calculating the sum of the largest two elements in an array\\r\\n\\r\\n```\\r\\nlet _data =\\r\\nrange x from 1 to 8 step 1\\r\\n| summarize l=make_list(x) by xMod2 = x % 2;\\r\\n_data\\r\\n| mv-apply l to typeof(long) on\\r\\n(\\r\\n   top 2 by l\\r\\n   | summarize SumOfTop2=sum(l)\\r\\n)\\r\\n```\\r\\n\\r\\n|`xMod2`|l        |SumOfTop2|\\r\\n|-----|---------|---------|\\r\\n|1    |[1,3,5,7]|12       |\\r\\n|0    |[2,4,6,8]|14       |\\r\\n\\r\\n### Using `with_itemindex` for working with a subset of the array\\r\\n\\r\\n```\\r\\nlet _data =\\r\\nrange x from 1 to 10 step 1\\r\\n| summarize l=make_list(x) by xMod2 = x % 2;\\r\\n_data\\r\\n| mv-apply with_itemindex=index element=l to typeof(long) on \\r\\n(\\r\\n   // here you have \\'index\\' column\\r\\n   where index >= 3\\r\\n)\\r\\n| project index, element\\r\\n```\\r\\n\\r\\n|index|element|\\r\\n|---|---|\\r\\n|3|7|\\r\\n|4|9|\\r\\n|3|8|\\r\\n|4|10|\\r\\n\\r\\n### Applying mv-apply to a property bag\\r\\n\\r\\nIn the following example, `mv-apply` is used in combination with an\\r\\ninner `mv-expand` to remove values that don\\'t start with \"555\" from a property bag:\\r\\n\\r\\n```\\r\\ndatatable(SourceNumber:string,TargetNumber:string,CharsCount:long)\\r\\n[\\r\\n    \\'555-555-1234\\',\\'555-555-1212\\',46,\\r\\n    \\'555-555-1212\\',\\'\\',int(null)\\r\\n]\\r\\n| extend values = pack_all()\\r\\n| mv-apply removeProperties = values on \\r\\n(\\r\\n    mv-expand kind = array values\\r\\n    | where values[1] !startswith \"555\"\\r\\n    | summarize propsToRemove = make_set(values[0])\\r\\n)\\r\\n| extend values = bag_remove_keys(values, propsToRemove)\\r\\n| project-away propsToRemove\\r\\n```\\r\\n\\r\\n|SourceNumber|TargetNumber|CharsCount|values\\r\\n|---|---|---|---|\\r\\n|555-555-1234|555-555-1212|46|{<br> \"SourceNumber\": \"555-555-1234\",<br>   \"TargetNumber\": \"555-555-1212\"<br> }|\\r\\n|555-555-1212|&nbsp;|&nbsp;|{<br> \"SourceNumber\": \"555-555-1212\"<br> }|\\r\\n\\r\\n## See also\\r\\n\\r\\n* [mv-expand](./mvexpandoperator.md) operator.',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/mv-applyoperator\",\"mv-applyoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"mv-expand\",\"Expands multi-value dynamic arrays or property bags into multiple records.\",\"`mv-expand` can be described as the opposite of the aggregation operators\\r\\nthat pack multiple values into a single [dynamic](./scalar-data-types/dynamic.md)-typed\\r\\narray or property bag, such as `summarize` ... `make-list()` and `make-series`.\\r\\nEach element in the (scalar) array or property bag generates a new record in the\\r\\noutput of the operator. All columns of the input that aren't expanded are duplicated to all the records in the output.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `| mv-expand ` [`bagexpansion=`(`bag` | `array`)] [`with_itemindex=`*IndexColumnName*] *ColumnName* [`to typeof(` *Typename*`)`] [`,` *ColumnName* ...] [`limit` *Rowlimit*]\\r\\n\\r\\n*T* `| mv-expand ` [`bagexpansion=`(`bag` | `array`)] *Name* `=` *ArrayExpression* [`to typeof(`*Typename*`)`] [, [*Name* `=`] *ArrayExpression* [`to typeof(`*Typename*`)`] ...] [`limit` *Rowlimit*]\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *ColumnName*, *ArrayExpression*: A column reference, or a scalar expression, with a value\\r\\n  of type `dynamic`, that holds an array or a property bag. The individual top-level elements\\r\\n  of the array or property bag get expanded into multiple records.<br>\\r\\n  When *ArrayExpression* is used and *Name* doesn't equal any input column name,\\r\\n  the expanded value is extended into a new column in the output.\\r\\n  Otherwise, the existing *ColumnName* is replaced.\\r\\n* *Name:* A name for the new column.\\r\\n* *Typename:* Indicates the underlying type of the array's elements, which becomes the type of the column produced by the `mv-expand` operator. The operation of applying type is cast-only and doesn't include parsing or type-conversion. Array elements that don't conform with the declared type will become `null` values.\\r\\n* *RowLimit:* The maximum number of rows generated from each original row. The default is 2147483647. \\r\\n  > [!NOTE]\\r\\n  > `mvexpand` is a legacy and obsolete form of the operator `mv-expand`. The legacy version has a default row limit of 128.\\r\\n* *IndexColumnName:* If `with_itemindex` is specified, the output will include another column (named *IndexColumnName*), which contains the index (starting at 0) of the item in the original expanded collection. \\r\\n\\r\\n## Returns\\r\\n\\r\\nFor each record in the input, the operator returns zero, one, or many records in the output,\\r\\nas determined in the following way:\\r\\n\\r\\n1. Input columns that aren't expanded appear in the output with their original value.\\r\\n   If a single input record is expanded into multiple output records, the value is duplicated\\r\\n   to all records.\\r\\n1. For each *ColumnName* or *ArrayExpression* that is expanded, the number of output records\\r\\n   is determined for each value as explained [below](#modes-of-expansion). For each input record, the maximum number of output records is calculated. All arrays or property bags are expanded \\\"in parallel\\\"\\r\\n   so that missing values (if any) are replaced by null values. Elements are expanded into rows in the order that they appear in the original array/bag.\\r\\n1. If the dynamic value is null, then a single record is produced for that value (null).\\r\\n   If the dynamic value is an empty array or property bag, no record is produced for that value.\\r\\n   Otherwise, as many records are produced as there are elements in the dynamic value.\\r\\n\\r\\nThe expanded columns are of type `dynamic`, unless they're explicitly typed\\r\\nby using the `to typeof()` clause.\\r\\n\\r\\n### Modes of expansion\\r\\n\\r\\nTwo modes of property bag expansions are supported:\\r\\n\\r\\n* `bagexpansion=bag` or `kind=bag`: Property bags are expanded into single-entry property bags. This mode is the default mode.\\r\\n* `bagexpansion=array` or `kind=array`: Property bags are expanded into two-element `[`*key*`,`*value*`]` array structures, allowing uniform access to keys and values. This mode also allows, for example, running a distinct-count aggregation over property names.\",'### Single column - array expansion\\r\\n\\r\\n```\\r\\ndatatable (a:int, b:dynamic)\\r\\n[1,dynamic([10, 20]),\\r\\n 2,dynamic([\\'a\\', \\'b\\'])]\\r\\n| mv-expand b\\r\\n```\\r\\n\\r\\n|a|b|\\r\\n|---|---|\\r\\n|1|10|\\r\\n|1|20|\\r\\n|2|a|\\r\\n|2|b|\\r\\n\\r\\n### Single column - bag expansion\\r\\n\\r\\nA simple expansion of a single column:\\r\\n\\r\\n```\\r\\ndatatable (a:int, b:dynamic)\\r\\n[1,dynamic({\"prop1\":\"a1\", \"prop2\":\"b1\"}),\\r\\n 2,dynamic({\"prop1\":\"a2\", \"prop2\":\"b2\"})]\\r\\n| mv-expand b\\r\\n```\\r\\n\\r\\n|a|b|\\r\\n|---|---|\\r\\n|1|{\"prop1\": \"a1\"}|\\r\\n|1|{\"prop2\": \"b1\"}|\\r\\n|2|{\"prop1\": \"a2\"}|\\r\\n|2|{\"prop2\": \"b2\"}|\\r\\n\\r\\n### Single column - bag expansion to key-value pairs\\r\\n\\r\\nA simple bag expansion to key-value pairs:\\r\\n\\r\\n```\\r\\ndatatable (a:int, b:dynamic)\\r\\n[1,dynamic({\"prop1\":\"a1\", \"prop2\":\"b1\"}),\\r\\n 2,dynamic({\"prop1\":\"a2\", \"prop2\":\"b2\"})]\\r\\n| mv-expand bagexpansion=array b \\r\\n| extend key = b[0], val=b[1]\\r\\n```\\r\\n\\r\\n|a|b|key|val|\\r\\n|---|---|---|---|\\r\\n|1|[\"prop1\",\"a1\"]|prop1|a1|\\r\\n|1|[\"prop2\",\"b1\"]|prop2|b1|\\r\\n|2|[\"prop1\",\"a2\"]|prop1|a2|\\r\\n|2|[\"prop2\",\"b2\"]|prop2|b2|\\r\\n\\r\\n### Zipped two columns\\r\\n\\r\\nExpanding two columns will first \\'zip\\' the applicable columns and then expand them:\\r\\n\\r\\n```\\r\\ndatatable (a:int, b:dynamic, c:dynamic)[1,dynamic({\"prop1\":\"a\", \"prop2\":\"b\"}), dynamic([5, 4, 3])]\\r\\n| mv-expand b, c\\r\\n```\\r\\n\\r\\n|a|b|c|\\r\\n|---|---|---|\\r\\n|1|{\"prop1\":\"a\"}|5|\\r\\n|1|{\"prop2\":\"b\"}|4|\\r\\n|1||3|\\r\\n\\r\\n### Cartesian product of two columns\\r\\n\\r\\nIf you want to get a Cartesian product of expanding two columns, expand one after the other:\\r\\n\\r\\n```\\r\\ndatatable (a:int, b:dynamic, c:dynamic)\\r\\n  [\\r\\n  1,\\r\\n  dynamic({\"prop1\":\"a\", \"prop2\":\"b\"}),\\r\\n  dynamic([5, 6])\\r\\n  ]\\r\\n| mv-expand b\\r\\n| mv-expand c\\r\\n```\\r\\n\\r\\n|a|b|c|\\r\\n|---|---|---|\\r\\n|1|{  \"prop1\": \"a\"}|5|\\r\\n|1|{  \"prop1\": \"a\"}|6|\\r\\n|1|{  \"prop2\": \"b\"}|5|\\r\\n|1|{  \"prop2\": \"b\"}|6|\\r\\n\\r\\n### Convert output\\r\\n\\r\\nTo force the output of an mv-expand to a certain type (default is dynamic), use `to typeof`:\\r\\n\\r\\n```\\r\\ndatatable (a:string, b:dynamic, c:dynamic)[\"Constant\", dynamic([1,2,3,4]), dynamic([6,7,8,9])]\\r\\n| mv-expand b, c to typeof(int)\\r\\n| getschema \\r\\n```\\r\\n\\r\\nColumnName|ColumnOrdinal|DateType|ColumnType\\r\\n-|-|-|-\\r\\na|0|System.String|string\\r\\nb|1|System.Object|dynamic\\r\\nc|2|System.Int32|int\\r\\n\\r\\nNotice column `b` is returned as `dynamic` while `c` is returned as `int`.\\r\\n\\r\\n### Using with_itemindex\\r\\n\\r\\nExpansion of an array with `with_itemindex`:\\r\\n\\r\\n```\\r\\nrange x from 1 to 4 step 1\\r\\n| summarize x = make_list(x)\\r\\n| mv-expand with_itemindex=Index x\\r\\n```\\r\\n\\r\\n|x|Index|\\r\\n|---|---|\\r\\n|1|0|\\r\\n|2|1|\\r\\n|3|2|\\r\\n|4|3|\\r\\n\\r\\n## See also\\r\\n\\r\\n* See [Chart count of live activities over time](./samples.md#chart-concurrent-sessions-over-time) for more examples.\\r\\n* [mv-apply](./mv-applyoperator.md) operator.\\r\\n* [summarize make_list()](makelist-aggfunction.md), which is the opposite function of mv-expand.\\r\\n* [bag_unpack()](bag-unpackplugin.md) plugin for expanding dynamic JSON objects into columns using property bag keys.',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/mvexpandoperator\",\"mvexpandoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"mysql_request\",\"The `mysql_request` plugin sends a SQL query to a MySQL Server network endpoint and returns the first rowset in the results. The query may return more than one rowset, but only the first rowset is made available for the rest of the Kusto query.\",'The plugin is invoked with the [`evaluate`](evaluateoperator.md) operator.\\r\\n\\r\\n> [!IMPORTANT]\\r\\n> The `mysql_request` plugin is disabled by default.\\r\\n> To enable the plugin, run the [`.enable plugin mysql_request` command](../management/enable-plugin.md). To see which plugins are enabled, use [`.show plugin` management commands](../management/show-plugins.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`evaluate` `mysql_request` `(` *ConnectionString* `,` *SqlQuery* [`,` *SqlParameters*] `)` [`:` *OutputSchema*]\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required| Description |\\r\\n|---|---|---|---|\\r\\n| *ConnectionString* | string | &check; | Indicates the connection string that points at the MySQL Server network endpoint. See [authentication](#username-and-password-authentication) and how to specify the [network endpoint](#specify-the-network-endpoint). |\\r\\n| *SqlQuery* | string | &check; | Indicates the query that is to be executed against the SQL endpoint. Must return one or more row sets, but only the first one is made available for the rest of the query. |\\r\\n| *SqlParameters* | dynamic | | Holds key-value pairs to pass as parameters along with the query. |\\r\\n| *OutputSchema* | | | The names and types for the expected columns of the `mysql_request` plugin output.<br /><br />**Syntax**: `(` *ColumnName* `:` *ColumnType* [`,` ...] `)`<br /><br />Specifying the expected schema optimizes query execution by not having to first run the actual query to explore the schema. An error is raised if the run-time schema doesn\\'t match the *OutputSchema* schema. |\\r\\n\\r\\n## Set callout policy\\r\\n\\r\\nThe plugin makes callouts to the MySql database. Make sure that the cluster\\'s [callout policy](../management/calloutpolicy.md) enables calls of type `mysql` to the target *MySqlDbUri*.\\r\\n\\r\\nThe following example shows how to define the callout policy for MySQL databases. We recommend restricting the callout policy to specific endpoints (`my_endpoint1`, `my_endpoint2`).\\r\\n\\r\\n```\\r\\n[\\r\\n  {\\r\\n    \"CalloutType\": \"mysql\",\\r\\n    \"CalloutUriRegex\": \"my_endpoint1\\\\\\\\.mysql\\\\\\\\.database\\\\\\\\.azure\\\\\\\\.com\",\\r\\n    \"CanCall\": true\\r\\n  },\\r\\n  {\\r\\n    \"CalloutType\": \"mysql\",\\r\\n    \"CalloutUriRegex\": \"my_endpoint2\\\\\\\\.mysql\\\\\\\\.database\\\\\\\\.azure\\\\\\\\.com\",\\r\\n    \"CanCall\": true\\r\\n  }\\r\\n]\\r\\n```\\r\\n\\r\\nThe following example shows an `.alter callout policy` command for `mysql` *CalloutType*:\\r\\n\\r\\n```\\r\\n.alter cluster policy callout @\\'[{\"CalloutType\": \"mysql\", \"CalloutUriRegex\": \"\\\\\\\\.mysql\\\\\\\\.database\\\\\\\\.azure\\\\\\\\.com\", \"CanCall\": true}]\\'\\r\\n```\\r\\n\\r\\n## Username and password authentication\\r\\n\\r\\nThe `mysql_request` plugin only supports username and password authentication to the MySQL server endpoint and doesn\\'t integrate with Azure Active Directory authentication.\\r\\n\\r\\nThe username and password are provided as part of the connections string using the following parameters:\\r\\n\\r\\n`User ID=...; Password=...;`\\r\\n\\r\\n> [!WARNING]\\r\\n> Confidential or guarded information should be obfuscated from connection strings and queries so that they are omitted from any Kusto tracing.\\r\\n> For more information, see [obfuscated string literals](scalar-data-types/string.md#obfuscated-string-literals).\\r\\n\\r\\n## Encryption and server validation\\r\\n\\r\\nFor security, `SslMode` is unconditionally set to `Required` when connecting to a MySQL server network endpoint. As a result, the server must be configured with a valid SSL/TLS server certificate.\\r\\n\\r\\n## Specify the network endpoint\\r\\n\\r\\nSpecify the MySQL network endpoint as part of the connection string.\\r\\n\\r\\n**Syntax**:\\r\\n\\r\\n`Server` `=` *FQDN* [`Port` `=` *Port*]\\r\\n\\r\\nWhere:\\r\\n\\r\\n* *FQDN* is the fully qualified domain name of the endpoint.\\r\\n* *Port* is the TCP port of the endpoint. By default, `3306` is assumed.',\"### SQL query to Azure MySQL DB\\r\\n\\r\\nThe following example sends a SQL query to an Azure MySQL database. It retrieves all records from `[dbo].[Table]`, and then processes the results.\\r\\n\\r\\n> [!NOTE]\\r\\n> This example shouldn't be taken as a recommendation to filter or project data in this manner. SQL queries should be constructed to return the smallest data set possible, since the Kusto optimizer doesn't currently attempt to optimize queries between Kusto and SQL.\\r\\n\\r\\n```\\r\\nevaluate mysql_request(\\r\\n    'Server=contoso.mysql.database.azure.com; Port = 3306;'\\r\\n    'Database=Fabrikam;'\\r\\n    h'UID=USERNAME;'\\r\\n    h'Pwd=PASSWORD;',\\r\\n    'select * from [dbo].[Table]')\\r\\n| where Id > 0\\r\\n| project Name\\r\\n```\\r\\n\\r\\n### Authentication with username and password\\r\\n\\r\\nThe following example is identical to the previous one, but authentication is by username and password. For confidentiality, use obfuscated strings.\\r\\n\\r\\n```\\r\\nevaluate mysql_request(\\r\\n    'Server=contoso.mysql.database.azure.com; Port = 3306;'\\r\\n    'Database=Fabrikam;'\\r\\n    h'UID=USERNAME;'\\r\\n    h'Pwd=PASSWORD;',\\r\\n    'select * from [dbo].[Table]')\\r\\n| where Id > 0\\r\\n| project Name\\r\\n```\\r\\n\\r\\n### SQL query to an Azure MySQL database with modifications\\r\\n\\r\\nThe following example sends a SQL query to an Azure MySQL database\\r\\nretrieving all records from `[dbo].[Table]`, while appending another `datetime` column,\\r\\nand then processes the results on the Kusto side.\\r\\nIt specifies a SQL parameter (`@param0`) to be used in the SQL query.\\r\\n\\r\\n```\\r\\nevaluate mysql_request(\\r\\n    'Server=contoso.mysql.database.azure.com; Port = 3306;'\\r\\n    'Database=Fabrikam;'\\r\\n    h'UID=USERNAME;'\\r\\n    h'Pwd=PASSWORD;',\\r\\n    'select *, @param0 as dt from [dbo].[Table]',\\r\\n    dynamic({'param0': datetime(2020-01-01 16:47:26.7423305)}))\\r\\n| where Id > 0\\r\\n| project Name\\r\\n```\\r\\n\\r\\n## SQL query with a query-defined output schema\\r\\n\\r\\nThe following example sends a SQL query to an Azure MySQL database\\r\\nretrieving all records from `[dbo].[Table]`, while selecting only specific columns.\\r\\nIt uses an explicit schema definition that allows various optimizations to be evaluated before the actual query against the server is run.\\r\\n\\r\\n```\\r\\nevaluate mysql_request(\\r\\n  'Server=contoso.mysql.database.azure.com; Posvsrt = 3306;'\\r\\n     'Database=Fabrikam;'\\r\\n    h'UID=USERNAME;'\\r\\n    h'Pwd=PASSWORD;',\\r\\n  'select Id, Name') : (Id:long, Name:string)\\r\\n| where Id > 0\\r\\n| project Name\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/mysqlrequest-plugin\",\"mysqlrequest-plugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"narrow\",'The `narrow` plugin \"unpivots\" a wide table into a table with just three columns: Row number, column type, and column value (as `string`).',\"The `narrow` plugin is designed mainly for display purposes, as it allows wide\\r\\ntables to be displayed comfortably without the need of horizontal scrolling.\\r\\n\\r\\nThe plugin is invoked with the [`evaluate`](evaluateoperator.md) operator.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`T | evaluate narrow()`\",'The following example shows an easy way to read the output of the Kusto\\r\\n`.show diagnostics` control command.\\r\\n\\r\\n```\\r\\n.show diagnostics\\r\\n | evaluate narrow()\\r\\n```\\r\\n\\r\\nThe results of `.show diagnostics` itself is a table with a single row and\\r\\n33 columns. By using the `narrow` plugin we \"rotate\" the output to something\\r\\nlike this:\\r\\n\\r\\nRow  | Column                              | Value\\r\\n-----|-------------------------------------|-----------------------------\\r\\n0    | IsHealthy                           | True\\r\\n0    | IsRebalanceRequired                 | False\\r\\n0    | IsScaleOutRequired                  | False\\r\\n0    | MachinesTotal                       | 2\\r\\n0    | MachinesOffline                     | 0\\r\\n0    | NodeLastRestartedOn                 | 2017-03-14 10:59:18.9263023\\r\\n0    | AdminLastElectedOn                  | 2017-03-14 10:58:41.6741934\\r\\n0    | ClusterWarmDataCapacityFactor       | 0.130552847673333\\r\\n0    | ExtentsTotal                        | 136\\r\\n0    | DiskColdAllocationPercentage        | 5\\r\\n0    | InstancesTargetBasedOnDataCapacity  | 2\\r\\n0    | TotalOriginalDataSize               | 5167628070\\r\\n0    | TotalExtentSize                     | 1779165230\\r\\n0    | IngestionsLoadFactor                | 0\\r\\n0    | IngestionsInProgress                | 0\\r\\n0    | IngestionsSuccessRate               | 100\\r\\n0    | MergesInProgress                    | 0\\r\\n0    | BuildVersion                        | 1.0.6281.19882\\r\\n0    | BuildTime                           | 2017-03-13 11:02:44.0000000\\r\\n0    | ClusterDataCapacityFactor           | 0.130552847673333\\r\\n0    | IsDataWarmingRequired               | False\\r\\n0    | RebalanceLastRunOn                  | 2017-03-21 09:14:53.8523455\\r\\n0    | DataWarmingLastRunOn                | 2017-03-21 09:19:54.1438800\\r\\n0    | MergesSuccessRate                   | 100\\r\\n0    | NotHealthyReason                    | [null]\\r\\n0    | IsAttentionRequired                 | False\\r\\n0    | AttentionRequiredReason             | [null]\\r\\n0    | ProductVersion                      | KustoRelease_2017.03.13.2\\r\\n0    | FailedIngestOperations              | 0\\r\\n0    | FailedMergeOperations               | 0\\r\\n0    | MaxExtentsInSingleTable             | 64\\r\\n0    | TableWithMaxExtents                 | KustoMonitoringPersistentDatabase.KustoMonitoringTable\\r\\n0    | WarmExtentSize                      | 1779165230',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/narrowplugin\",\"narrowplugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"new_activity_metrics\",\"Calculates useful activity metrics (distinct count values, distinct count of new values, retention rate, and churn rate) for the cohort of `New Users`. Each cohort of `New Users` (all users, which were first seen in time window) is compared to all prior cohorts.\\r\\nComparison takes into account *all* previous time windows. For example, for records from T2 to T3, the distinct count of users will be all users in T3 who weren't seen in both T1 and T2.\\r\\nThe plugin is invoked with the [`evaluate`](evaluateoperator.md) operator.\",\"## Syntax\\r\\n\\r\\n*TabularExpression* `| evaluate` `new_activity_metrics(`*IdColumn*`,` *TimelineColumn*`,` *Start*`,` *End*`,` *Window* [`,` *Cohort*] [`,` *dim1*`,` *dim2*`,` ...] [`,` *Lookback*] `)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *TabularExpression*: The tabular expression that serves as input.\\r\\n* *IdColumn*: The name of the column with ID values that represent user activity. \\r\\n* *TimelineColumn*: The name of the column that represents the timeline.\\r\\n* *Start*: Scalar with value of the analysis start period.\\r\\n* *End*: Scalar with value of the analysis end period.\\r\\n* *Window*: Scalar with value of the analysis window period. Can be either a numeric, datetime, or timestamp value, or a string that is one of `week`, `month` or `year`, in which case all periods will be [startofweek](startofweekfunction.md)/[startofmonth](startofmonthfunction.md)/[startofyear](startofyearfunction.md) accordingly. \\r\\n* *Cohort*: (optional) a scalar constant indicating specific cohort. If not provided, all cohorts corresponding to the analysis time window are calculated and returned.\\r\\n* *dim1*, *dim2*, ...: (optional) list of the dimensions columns that slice the activity metrics calculation.\\r\\n* *Lookback*: (optional) a tabular expression with a set of IDs that belong to the 'look back' period.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a table that contains the following for each combination of 'from' and 'to' timeline periods and for each existing column (dimensions) combination:\\r\\n\\r\\n* distinct count values\\r\\n* distinct count of new values\\r\\n* retention rate\\r\\n* churn rate\\r\\n\\r\\nOutput table schema is:\\r\\n\\r\\n|from_TimelineColumn|to_TimelineColumn|dcount_new_values|dcount_retained_values|dcount_churn_values|retention_rate|churn_rate|dim1|..|dim_n|\\r\\n|---|---|---|---|---|---|---|---|---|---|\\r\\n|type: as of *TimelineColumn*|same|long|long|double|double|double|..|..|..|\\r\\n\\r\\n* `from_TimelineColumn` - the cohort of new users. Metrics in this record refer to all users who were first seen in this period. The decision on \\r\\n*first seen* takes into account all previous periods in the analysis period. \\r\\n* `to_TimelineColumn` - the period being compared to. \\r\\n* `dcount_new_values` - the number of distinct users in `to_TimelineColumn` that weren't seen in *all* periods prior to and including `from_TimelineColumn`. \\r\\n* `dcount_retained_values` - out of all new users, first seen in `from_TimelineColumn`, the number of distinct users that were seen in `to_TimelineCoumn`.\\r\\n* `dcount_churn_values` - out of all new users, first seen in `from_TimelineColumn`, the number of distinct users that weren't seen in `to_TimelineCoumn`.\\r\\n* `retention_rate` - the percent of `dcount_retained_values` out of the cohort (users first seen in `from_TimelineColumn`).\\r\\n* `churn_rate` - the percent of `dcount_churn_values` out of the cohort (users first seen in `from_TimelineColumn`).\\r\\n\\r\\n**Notes**\\r\\n\\r\\nFor definitions of `Retention Rate` and `Churn Rate` - refer to **Notes** section in \\r\\n[activity_metrics plugin](./activity-metrics-plugin.md) documentation.\",\"The following sample data set shows which users seen on which days. The table was generated based on a source `Users` table, as follows: \\r\\n\\r\\n```\\r\\nUsers | summarize tostring(make_set(user)) by bin(Timestamp, 1d) | order by Timestamp asc;\\r\\n```\\r\\n\\r\\n|Timestamp|set_user|\\r\\n|---|---|\\r\\n|2019-11-01 00:00:00.0000000|[0,2,3,4]|\\r\\n|2019-11-02 00:00:00.0000000|[0,1,3,4,5]|\\r\\n|2019-11-03 00:00:00.0000000|[0,2,4,5]|\\r\\n|2019-11-04 00:00:00.0000000|[0,1,2,3]|\\r\\n|2019-11-05 00:00:00.0000000|[0,1,2,3,4]|\\r\\n\\r\\nThe output of the plugin for the original table is the following: \\r\\n\\r\\n```\\r\\nlet StartDate = datetime(2019-11-01 00:00:00);\\r\\nlet EndDate = datetime(2019-11-07 00:00:00);\\r\\nUsers \\r\\n| evaluate new_activity_metrics(user, Timestamp, StartDate, EndDate-1tick, 1d) \\r\\n| where from_Timestamp < datetime(2019-11-03 00:00:00.0000000)\\r\\n```\\r\\n\\r\\n|R|from_Timestamp|to_Timestamp|dcount_new_values|dcount_retained_values|dcount_churn_values|retention_rate|churn_rate|\\r\\n|---|---|---|---|---|---|---|---|\\r\\n|1|2019-11-01 00:00:00.0000000|2019-11-01 00:00:00.0000000|4|4|0|1|0|\\r\\n|2|2019-11-01 00:00:00.0000000|2019-11-02 00:00:00.0000000|2|3|1|0.75|0.25|\\r\\n|3|2019-11-01 00:00:00.0000000|2019-11-03 00:00:00.0000000|1|3|1|0.75|0.25|\\r\\n|4|2019-11-01 00:00:00.0000000|2019-11-04 00:00:00.0000000|1|3|1|0.75|0.25|\\r\\n|5|2019-11-01 00:00:00.0000000|2019-11-05 00:00:00.0000000|1|4|0|1|0|\\r\\n|6|2019-11-01 00:00:00.0000000|2019-11-06 00:00:00.0000000|0|0|4|0|1|\\r\\n|7|2019-11-02 00:00:00.0000000|2019-11-02 00:00:00.0000000|2|2|0|1|0|\\r\\n|8|2019-11-02 00:00:00.0000000|2019-11-03 00:00:00.0000000|0|1|1|0.5|0.5|\\r\\n|9|2019-11-02 00:00:00.0000000|2019-11-04 00:00:00.0000000|0|1|1|0.5|0.5|\\r\\n|10|2019-11-02 00:00:00.0000000|2019-11-05 00:00:00.0000000|0|1|1|0.5|0.5|\\r\\n|11|2019-11-02 00:00:00.0000000|2019-11-06 00:00:00.0000000|0|0|2|0|1|\\r\\n\\r\\nFollowing is an analysis of a few records from the output: \\r\\n\\r\\n* Record `R=3`, `from_TimelineColumn` = `2019-11-01`,  `to_TimelineColumn` = `2019-11-03`:\\r\\n    * The users considered for this record are all new users seen on 11/1. Since this is the first period, these are all users in that bin \\u2013 [0,2,3,4]\\r\\n    * `dcount_new_values` \\u2013 the number of users on 11/3 who weren't seen on 11/1. This includes a single user \\u2013 `5`.\\r\\n    * `dcount_retained_values` \\u2013 out of all new users on 11/1, how many were retained until 11/3? There are three values (`[0,2,4]`), while `count_churn_values` is one (user=`3`).\\r\\n    * `retention_rate` = 0.75 \\u2013 the three retained users out of the four new users who were first seen in 11/1.\\r\\n\\r\\n* Record `R=9`, `from_TimelineColumn` = `2019-11-02`,  `to_TimelineColumn` = `2019-11-04`:\\r\\n    * This record focuses on the new users who were first seen on 11/2 \\u2013 users `1` and `5`. \\r\\n    * `dcount_new_values` \\u2013 the number of users on 11/4 who weren't seen through all periods `T0 .. from_Timestamp`. Meaning, users who are seen on 11/4 but who weren't seen on either 11/1 or 11/2 \\u2013 there are no such users. \\r\\n    * `dcount_retained_values` \\u2013 out of all new users on 11/2 (`[1,5]`), how many were retained until 11/4? There's one such user (`[1]`), `while count_churn_values` is one (user `5`). \\r\\n    * `retention_rate` is 0.5 \\u2013 the single user that was retained on 11/4 out of the two new ones on 11/2. \\r\\n\\r\\n\\r\\n### Weekly retention rate, and churn rate (single week)\\r\\n\\r\\nThe next query calculates a retention and churn rate for week-over-week window for `New Users` cohort (users that arrived on the first week).\\r\\n\\r\\n```\\r\\n// Generate random data of user activities\\r\\nlet _start = datetime(2017-05-01);\\r\\nlet _end = datetime(2017-05-31);\\r\\nrange Day from _start to _end  step 1d\\r\\n| extend d = tolong((Day - _start)/1d)\\r\\n| extend r = rand()+1\\r\\n| extend _users=range(tolong(d*50*r), tolong(d*50*r+200*r-1), 1) \\r\\n| mv-expand id=_users to typeof(long) limit 1000000\\r\\n// Take only the first week cohort (last parameter)\\r\\n| evaluate new_activity_metrics(['id'], Day, _start, _end, 7d, _start)\\r\\n| project from_Day, to_Day, retention_rate, churn_rate\\r\\n```\\r\\n\\r\\n|from_Day|to_Day|retention_rate|churn_rate|\\r\\n|---|---|---|---|\\r\\n|2017-05-01 00:00:00.0000000|2017-05-01 00:00:00.0000000|1|0|\\r\\n|2017-05-01 00:00:00.0000000|2017-05-08 00:00:00.0000000|0.544632768361582|0.455367231638418|\\r\\n|2017-05-01 00:00:00.0000000|2017-05-15 00:00:00.0000000|0.031638418079096|0.968361581920904|\\r\\n|2017-05-01 00:00:00.0000000|2017-05-22 00:00:00.0000000|0|1|\\r\\n|2017-05-01 00:00:00.0000000|2017-05-29 00:00:00.0000000|0|1|\\r\\n\\r\\n### Weekly retention rate, and churn rate (complete matrix)\\r\\n\\r\\nThe next query calculates retention and churn rate for week-over-week window for `New Users` cohort. If the previous example calculated the statistics for a single week - the following query produces an NxN table for each from/to combination.\\r\\n\\r\\n```\\r\\n// Generate random data of user activities\\r\\nlet _start = datetime(2017-05-01);\\r\\nlet _end = datetime(2017-05-31);\\r\\nrange Day from _start to _end  step 1d\\r\\n| extend d = tolong((Day - _start)/1d)\\r\\n| extend r = rand()+1\\r\\n| extend _users=range(tolong(d*50*r), tolong(d*50*r+200*r-1), 1) \\r\\n| mv-expand id=_users to typeof(long) limit 1000000\\r\\n// Last parameter is omitted - \\r\\n| evaluate new_activity_metrics(['id'], Day, _start, _end, 7d)\\r\\n| project from_Day, to_Day, retention_rate, churn_rate\\r\\n```\\r\\n\\r\\n|from_Day|to_Day|retention_rate|churn_rate|\\r\\n|---|---|---|---|\\r\\n|2017-05-01 00:00:00.0000000|2017-05-01 00:00:00.0000000|1|0|\\r\\n|2017-05-01 00:00:00.0000000|2017-05-08 00:00:00.0000000|0.190397350993377|0.809602649006622|\\r\\n|2017-05-01 00:00:00.0000000|2017-05-15 00:00:00.0000000|0|1|\\r\\n|2017-05-01 00:00:00.0000000|2017-05-22 00:00:00.0000000|0|1|\\r\\n|2017-05-01 00:00:00.0000000|2017-05-29 00:00:00.0000000|0|1|\\r\\n|2017-05-08 00:00:00.0000000|2017-05-08 00:00:00.0000000|1|0|\\r\\n|2017-05-08 00:00:00.0000000|2017-05-15 00:00:00.0000000|0.405263157894737|0.594736842105263|\\r\\n|2017-05-08 00:00:00.0000000|2017-05-22 00:00:00.0000000|0.227631578947368|0.772368421052632|\\r\\n|2017-05-08 00:00:00.0000000|2017-05-29 00:00:00.0000000|0|1|\\r\\n|2017-05-15 00:00:00.0000000|2017-05-15 00:00:00.0000000|1|0|\\r\\n|2017-05-15 00:00:00.0000000|2017-05-22 00:00:00.0000000|0.785488958990536|0.214511041009464|\\r\\n|2017-05-15 00:00:00.0000000|2017-05-29 00:00:00.0000000|0.237644584647739|0.762355415352261|\\r\\n|2017-05-22 00:00:00.0000000|2017-05-22 00:00:00.0000000|1|0|\\r\\n|2017-05-22 00:00:00.0000000|2017-05-29 00:00:00.0000000|0.621835443037975|0.378164556962025|\\r\\n|2017-05-29 00:00:00.0000000|2017-05-29 00:00:00.0000000|1|0|\\r\\n\\r\\n### Weekly retention rate with lookback period\\r\\n\\r\\nThe following query calculates the retention rate of `New Users` cohort when taking into \\r\\nconsideration `lookback` period: a tabular query with set of Ids that are used to define\\r\\nthe `New Users` cohort (all IDs that don't appear in this set are `New Users`). The \\r\\nquery examines the retention behavior of the `New Users` during the analysis period.\\r\\n\\r\\n```\\r\\n// Generate random data of user activities\\r\\nlet _lookback = datetime(2017-02-01);\\r\\nlet _start = datetime(2017-05-01);\\r\\nlet _end = datetime(2017-05-31);\\r\\nlet _data = range Day from _lookback to _end  step 1d\\r\\n| extend d = tolong((Day - _lookback)/1d)\\r\\n| extend r = rand()+1\\r\\n| extend _users=range(tolong(d*50*r), tolong(d*50*r+200*r-1), 1) \\r\\n| mv-expand id=_users to typeof(long) limit 1000000;\\r\\n//\\r\\nlet lookback_data = _data | where Day < _start | project Day, id;\\r\\n_data\\r\\n| evaluate new_activity_metrics(id, Day, _start, _end, 7d, _start, lookback_data)\\r\\n| project from_Day, to_Day, retention_rate\\r\\n```\\r\\n\\r\\n|from_Day|to_Day|retention_rate|\\r\\n|---|---|---|\\r\\n|2017-05-01 00:00:00.0000000|2017-05-01 00:00:00.0000000|1|\\r\\n|2017-05-01 00:00:00.0000000|2017-05-08 00:00:00.0000000|0.404081632653061|\\r\\n|2017-05-01 00:00:00.0000000|2017-05-15 00:00:00.0000000|0.257142857142857|\\r\\n|2017-05-01 00:00:00.0000000|2017-05-22 00:00:00.0000000|0.296326530612245|\\r\\n|2017-05-01 00:00:00.0000000|2017-05-29 00:00:00.0000000|0.0587755102040816|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/new-activity-metrics-plugin\",\"new-activity-metrics-plugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"new_guid\",\"Returns a random GUID (Globally Unique Identifier).\",\"```\\r\\nnew_guid()\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n* `new_guid()` - generates a new value of type `guid`.\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/newguidfunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"next\",\"Returns the value of a column in a row that is at some offset following the\\r\\ncurrent row in a [serialized row set](./windowsfunctions.md#serialized-row-set).\",\"## Syntax\\r\\n\\r\\n`next(column)`\\r\\n\\r\\n`next(column, offset)`\\r\\n\\r\\n`next(column, offset, default_value)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* `column`: the column to get the values from.\\r\\n* `offset`: the offset to go ahead in rows. When no offset is specified a default offset 1 is used.\\r\\n* `default_value`: the default value to be used when there is no next rows to take the value from. When no default value is specified, null is used.\",\"```\\r\\nTable | serialize | extend nextA = next(A,1)\\r\\n| extend diff = A - nextA\\r\\n| where diff > 1\\r\\n\\r\\nTable | serialize nextA = next(A,1,10)\\r\\n| extend diff = A - nextA\\r\\n| where diff <= 10\\r\\n```\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/nextfunction\",\"nextfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"not\",\"Reverses the value of its `bool` argument.\",\"```\\r\\nnot(false) == true\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`not(`*expr*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *expr*: A `bool` expression to be reversed.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the reversed logical value of its `bool` argument.\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/notfunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"now\",\"Returns the current UTC clock time, optionally offset by a given timespan.\\r\\nThis function can be used multiple times in a statement and the clock time being referenced will be the same for all instances.\",\"```\\r\\nnow()\\r\\nnow(-2d)\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`now(`[*offset*]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *offset*: A `timespan`, added to the current UTC clock time. Default: 0.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe current UTC clock time as a `datetime`.\\r\\n\\r\\n`now()` + *offset*\",\"Determines the interval since the event identified by the predicate:\\r\\n\\r\\n```\\r\\nT | where ... | extend Elapsed=now() - Timestamp\\r\\n```\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/nowfunction\",\"nowfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"order\",\"Sort the rows of the input table into order by one or more columns.\",\"```\\r\\nT | order by country asc, price desc\\r\\n```\\r\\n\\r\\n> [!NOTE]\\r\\n> The order operator is an alias to the sort operator. For more information, see [sort operator](sortoperator.md)\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `| order by` *column* [`asc` | `desc`] [`nulls first` | `nulls last`] [`,` ...]\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T*: The table input to sort.\\r\\n* *column*: Column of *T* by which to sort. The type of the values must be numeric, date, time or string.\\r\\n* `asc` Sort by into ascending order, low to high. The default is `desc`, descending high to low.\\r\\n* `nulls first` (the default for `asc` order) will place the null values at the beginning and `nulls last` (the default for `desc` order) will place the null values at the end.\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/orderoperator\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"pack_all\",\"Creates a `dynamic` object (property bag) from all the columns of the tabular expression.\",\"> [!NOTE]\\r\\n> The representation of the returned object isn't guaranteed to be byte-level-compatible between runs. For example, properties that appear in the bag may appear in a different order.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`pack_all(`[*ignore_null_empty*]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *ignore_null_empty*: An optional `bool` indicating whether to ignore null/empty columns and exclude them from the resulting property bag. Default: `false`.\",'Given a table SmsMessages \\r\\n\\r\\n|SourceNumber |TargetNumber| CharsCount\\r\\n|---|---|---\\r\\n|555-555-1234 |555-555-1212 | 46 \\r\\n|555-555-1234 |555-555-1213 | 50 \\r\\n|555-555-1313 | | 42 \\r\\n| |555-555-3456 | 74 \\r\\n\\r\\nThe following query:\\r\\n\\r\\n```\\r\\ndatatable(SourceNumber:string,TargetNumber:string,CharsCount:long)\\r\\n[\\r\\n\\'555-555-1234\\',\\'555-555-1212\\',46,\\r\\n\\'555-555-1234\\',\\'555-555-1213\\',50,\\r\\n\\'555-555-1313\\',\\'\\',42, \\r\\n\\'\\',\\'555-555-3456\\',74 \\r\\n]\\r\\n| extend Packed=pack_all(), PackedIgnoreNullEmpty=pack_all(true)\\r\\n```\\r\\n\\r\\nReturns:\\r\\n\\r\\n|SourceNumber |TargetNumber | CharsCount | Packed |PackedIgnoreNullEmpty\\r\\n|---|---|---|---|---\\r\\n|555-555-1234 |555-555-1212 | 46 |{\"SourceNumber\":\"555-555-1234\", \"TargetNumber\":\"555-555-1212\", \"CharsCount\": 46} | {\"SourceNumber\":\"555-555-1234\", \"TargetNumber\":\"555-555-1212\", \"CharsCount\": 46}\\r\\n|555-555-1234 |555-555-1213 | 50 |{\"SourceNumber\":\"555-555-1234\", \"TargetNumber\":\"555-555-1213\", \"CharsCount\": 50} | {\"SourceNumber\":\"555-555-1234\", \"TargetNumber\":\"555-555-1213\", \"CharsCount\": 50}\\r\\n|555-555-1313 | | 42 | {\"SourceNumber\":\"555-555-1313\", \"TargetNumber\":\"\", \"CharsCount\": 42} | {\"SourceNumber\":\"555-555-1313\", \"CharsCount\": 42}\\r\\n| |555-555-3456 | 74 | {\"SourceNumber\":\"\", \"TargetNumber\":\"555-555-3456\", \"CharsCount\": 74} | {\"TargetNumber\":\"555-555-3456\", \"CharsCount\": 74}\\r\\n\\r\\n> [!NOTE]\\r\\n> There is a difference between the *Packed* and the *PackedIgnoreNullEmpty* columns in the last two rows of the above example. These two rows included empty values that were ignored by *pack_all(true)*.',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/packallfunction\",\"packallfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"pack_array\",\"Packs all input values into a dynamic array.\",\"## Syntax\\r\\n\\r\\n`pack_array(`*Expr1*`[`,` *Expr2*]`)`\\r\\n\\r\\n`pack_array(*)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *Expr1...N*: Input expressions to be packed into a dynamic array.\\r\\n* *The wildcard `*`*: providing the wildcard `*` will pack all input columns into a dynamic array.\\r\\n\\r\\n## Returns\\r\\n\\r\\nDynamic array which includes the values of Expr1, Expr2, ... , ExprN.\",'```\\r\\nrange x from 1 to 3 step 1\\r\\n| extend y = x * 2\\r\\n| extend z = y * 2\\r\\n| project pack_array(x,y,z)\\r\\n```\\r\\n\\r\\n|Column1|\\r\\n|---|\\r\\n|[1,2,4]|\\r\\n|[2,4,8]|\\r\\n|[3,6,12]|\\r\\n\\r\\n```\\r\\nrange x from 1 to 3 step 1\\r\\n| extend y = tostring(x * 2)\\r\\n| extend z = (x * 2) * 1s\\r\\n| project pack_array(x,y,z)\\r\\n```\\r\\n\\r\\n|Column1|\\r\\n|---|\\r\\n|[1,\"2\",\"00:00:02\"]|\\r\\n|[2,\"4\",\"00:00:04\"]|\\r\\n|[3,\"6\",\"00:00:06\"]|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/packarrayfunction\",\"packarrayfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"parse\",\"Evaluates a string expression and parses its value into one or more calculated columns. The calculated columns will have nulls, for unsuccessfully parsed strings. If there is no need to use rows where parsing doesn't succeed, prefer using the [parse-where operator](parsewhereoperator.md).\",\"```\\r\\nT | parse Text with \\\"ActivityName=\\\" name \\\", ActivityType=\\\" type\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `| parse` [`kind=regex` [`flags=regex_flags`] |`simple`|`relaxed`] *Expression* `with` `*` (*StringConstant* *ColumnName* [`:` *ColumnType*]) `*`...\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T*: The input table.\\r\\n* kind:\\r\\n\\t* simple (the default): StringConstant is a regular string value and the match is strict. All string delimiters should appear in the parsed string, and all extended columns must match the required types.\\r\\n\\t\\t\\r\\n\\t* regex: StringConstant may be a regular expression and the match is strict. All string delimiters, which can be a regex for this mode, should appear in the parsed string, and all extended columns must match the required types.\\r\\n\\t\\r\\n\\t* flags: Flags to be used in regex mode like `U` (Ungreedy), `m` (multi-line mode), `s` (match new line `\\\\n`), `i` (case-insensitive) in [RE2 flags](re2.md).\\r\\n\\t\\t\\r\\n\\t* relaxed: StringConstant is a regular string value and the match is relaxed. All string delimiters should appear in the parsed string, but extended columns may partially match the required types. Extended columns that didn't match the required types will get the value null.\\r\\n* *Expression*: An expression that evaluates to a string.\\r\\n* *ColumnName:* The name of a column to assign a value to, extracted from the string expression. \\r\\n  \\r\\n* *ColumnType:* Optional. The scalar value that indicates the type to convert the value to. The default is the `string` type.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe input table, extended according to the list of columns that are\\r\\nprovided to the operator.\\r\\n\\r\\n**Tips**\\r\\n\\r\\n* Use [`project`](projectoperator.md) if you also want to drop or rename some columns.\\r\\n* Use * in the pattern, to skip junk values. \\r\\n    > [!NOTE] \\r\\n    > The `*` can't be used after a `string` type column.\\r\\n* The parse pattern may start with *ColumnName* and not only with *StringConstant*.\\r\\n* If the parsed *Expression* isn't of type `string`, it will be converted to type `string`.\\r\\n* If regex mode is used, there's an option to add regex flags to control the entire regex that is used in the parse.\\r\\n* In regex mode, parse will translate the pattern to a regex. Use [RE2 syntax](re2.md) to do the matching, and use numbered captured groups that are handled internally.\\r\\n    For example:\\r\\n    \\r\\n    ```\\r\\n    parse kind=regex Col with * <regex1> var1:string <regex2> var2:long\\r\\n    ```\\r\\n\\tIn the parse statement, the regex that will be internally generated by the parse is `.*?<regex1>(.*?)<regex2>(\\\\-\\\\d+)`.\\r\\n\\t\\t\\r\\n\\t* `*` was translated to `.*?`.\\r\\n\\t\\t\\r\\n\\t* `string` was translated to `.*?`.\\r\\n\\t\\t\\r\\n\\t* `long` was translated to `\\\\-\\\\d+`.\",'The `parse` operator provides a streamlined way to `extend` a table by using multiple `extract` applications on the same `string` expression. This result is useful, when the table has a `string` column that contains several values that you want to break into individual columns. For example, a column that was produced by a developer trace (\"`printf`\"/\"`Console.WriteLine`\") statement.\\r\\n\\r\\nIn the example below, assume that the column `EventText` of table `Traces` contains\\r\\nstrings of the form `Event: NotifySliceRelease (resourceName={0}, totalSlices={1}, sliceNumber={2}, lockTime={3}, releaseTime={4}, previousLockTime={5})`.\\r\\nThe operation will extend the table with six columns: `resourceName`, `totalSlices`, `sliceNumber`, `lockTime `, `releaseTime`, and `previousLockTime`. \\r\\n\\r\\n```\\r\\nlet Traces = datatable(EventText:string)\\r\\n[\\r\\n\"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=23, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01, previousLockTime=02/17/2016 08:39:01)\",\\r\\n\"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=15, lockTime=02/17/2016 08:40:00, releaseTime=02/17/2016 08:40:00, previousLockTime=02/17/2016 08:39:00)\",\\r\\n\"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=20, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01, previousLockTime=02/17/2016 08:39:01)\",\\r\\n\"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=22, lockTime=02/17/2016 08:41:01, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:01)\",\\r\\n\"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=16, lockTime=02/17/2016 08:41:00, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:00)\"\\r\\n];\\r\\nTraces  \\r\\n| parse EventText with * \"resourceName=\" resourceName \", totalSlices=\" totalSlices:long * \"sliceNumber=\" sliceNumber:long * \"lockTime=\" lockTime \", releaseTime=\" releaseTime:date \",\" * \"previousLockTime=\" previousLockTime:date \")\" *  \\r\\n| project resourceName, totalSlices, sliceNumber, lockTime, releaseTime, previousLockTime\\r\\n```\\r\\n\\r\\n|resourceName|totalSlices|sliceNumber|lockTime|releaseTime|previousLockTime|\\r\\n|---|---|---|---|---|---|\\r\\n|PipelineScheduler|27|15|02/17/2016 08:40:00|2016-02-17 08:40:00.0000000|2016-02-17 08:39:00.0000000|\\r\\n|PipelineScheduler|27|23|02/17/2016 08:40:01|2016-02-17 08:40:01.0000000|2016-02-17 08:39:01.0000000|\\r\\n|PipelineScheduler|27|20|02/17/2016 08:40:01|2016-02-17 08:40:01.0000000|2016-02-17 08:39:01.0000000|\\r\\n|PipelineScheduler|27|16|02/17/2016 08:41:00|2016-02-17 08:41:00.0000000|2016-02-17 08:40:00.0000000|\\r\\n|PipelineScheduler|27|22|02/17/2016 08:41:01|2016-02-17 08:41:00.0000000|2016-02-17 08:40:01.0000000|\\r\\n\\r\\n**For regex mode**\\r\\n\\r\\n```\\r\\nlet Traces = datatable(EventText:string)\\r\\n[\\r\\n\"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=23, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01, previousLockTime=02/17/2016 08:39:01)\",\\r\\n\"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=15, lockTime=02/17/2016 08:40:00, releaseTime=02/17/2016 08:40:00, previousLockTime=02/17/2016 08:39:00)\",\\r\\n\"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=20, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01, previousLockTime=02/17/2016 08:39:01)\",\\r\\n\"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=22, lockTime=02/17/2016 08:41:01, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:01)\",\\r\\n\"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=16, lockTime=02/17/2016 08:41:00, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:00)\"\\r\\n];\\r\\nTraces  \\r\\n| parse kind = regex EventText with \"(.*?)[a-zA-Z]*=\" resourceName @\", totalSlices=\\\\s*\\\\d+\\\\s*.*?sliceNumber=\" sliceNumber:long  \".*?(previous)?lockTime=\" lockTime \".*?releaseTime=\" releaseTime \".*?previousLockTime=\" previousLockTime:date \"\\\\\\\\)\"  \\r\\n| project resourceName, sliceNumber, lockTime, releaseTime, previousLockTime\\r\\n```\\r\\n\\r\\n|resourceName|sliceNumber|lockTime|releaseTime|previousLockTime|\\r\\n|---|---|---|---|---|\\r\\n|PipelineScheduler|15|02/17/2016 08:40:00, |02/17/2016 08:40:00, |2016-02-17 08:39:00.0000000|\\r\\n|PipelineScheduler|23|02/17/2016 08:40:01, |02/17/2016 08:40:01, |2016-02-17 08:39:01.0000000|\\r\\n|PipelineScheduler|20|02/17/2016 08:40:01, |02/17/2016 08:40:01, |2016-02-17 08:39:01.0000000|\\r\\n|PipelineScheduler|16|02/17/2016 08:41:00, |02/17/2016 08:41:00, |2016-02-17 08:40:00.0000000|\\r\\n|PipelineScheduler|22|02/17/2016 08:41:01, |02/17/2016 08:41:00, |2016-02-17 08:40:01.0000000|\\r\\n\\r\\n**For regex mode using regex flags**\\r\\n\\r\\nIf you\\'re interested in getting the resourceName only, use this query:\\r\\n\\r\\n```\\r\\nlet Traces = datatable(EventText:string)\\r\\n[\\r\\n\"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=23, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01, previousLockTime=02/17/2016 08:39:01)\",\\r\\n\"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=15, lockTime=02/17/2016 08:40:00, releaseTime=02/17/2016 08:40:00, previousLockTime=02/17/2016 08:39:00)\",\\r\\n\"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=20, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01, previousLockTime=02/17/2016 08:39:01)\",\\r\\n\"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=22, lockTime=02/17/2016 08:41:01, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:01)\",\\r\\n\"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=16, lockTime=02/17/2016 08:41:00, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:00)\"\\r\\n];\\r\\nTraces\\r\\n| parse kind = regex  EventText with * \"resourceName=\" resourceName \\',\\' *\\r\\n| project resourceName\\r\\n```\\r\\n\\r\\n|resourceName|\\r\\n|---|\\r\\n|PipelineScheduler, totalSlices=27, sliceNumber=23, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01|\\r\\n|PipelineScheduler, totalSlices=27, sliceNumber=15, lockTime=02/17/2016 08:40:00, releaseTime=02/17/2016 08:40:00|\\r\\n|PipelineScheduler, totalSlices=27, sliceNumber=20, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01|\\r\\n|PipelineScheduler, totalSlices=27, sliceNumber=22, lockTime=02/17/2016 08:41:01, releaseTime=02/17/2016 08:41:00|\\r\\n|PipelineScheduler, totalSlices=27, sliceNumber=16, lockTime=02/17/2016 08:41:00, releaseTime=02/17/2016 08:41:00|\\r\\n\\r\\nYou won\\'t get the expected results, since the default mode is greedy.\\r\\nIf you have a few records where the *resourceName*  sometimes appears as lower-case and sometimes as upper-case, you may get nulls for some values.\\r\\n\\r\\nTo get the wanted result, run the query with the non-greedy `U`, and disable case-sensitive `i` regex flags.\\r\\n\\r\\n```\\r\\nlet Traces = datatable(EventText:string)\\r\\n[\\r\\n\"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=23, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01, previousLockTime=02/17/2016 08:39:01)\",\\r\\n\"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=15, lockTime=02/17/2016 08:40:00, releaseTime=02/17/2016 08:40:00, previousLockTime=02/17/2016 08:39:00)\",\\r\\n\"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=20, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01, previousLockTime=02/17/2016 08:39:01)\",\\r\\n\"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=22, lockTime=02/17/2016 08:41:01, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:01)\",\\r\\n\"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=16, lockTime=02/17/2016 08:41:00, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:00)\"\\r\\n];\\r\\nTraces\\r\\n| parse kind = regex flags = Ui EventText with * \"RESOURCENAME=\" resourceName \\',\\' *\\r\\n| project resourceName\\r\\n```\\r\\n\\r\\n|resourceName|\\r\\n|---|\\r\\n|PipelineScheduler|\\r\\n|PipelineScheduler|\\r\\n|PipelineScheduler|\\r\\n|PipelineScheduler|\\r\\n|PipelineScheduler|\\r\\n\\r\\nIf the parsed string has newlines, use the flag `s`, to parse the text.\\r\\n\\r\\n```\\r\\nlet Traces = datatable(EventText:string)\\r\\n[\\r\\n\"Event: NotifySliceRelease (resourceName=PipelineScheduler\\\\ntotalSlices=27\\\\nsliceNumber=23\\\\nlockTime=02/17/2016 08:40:01\\\\nreleaseTime=02/17/2016 08:40:01\\\\npreviousLockTime=02/17/2016 08:39:01)\",\\r\\n\"Event: NotifySliceRelease (resourceName=PipelineScheduler\\\\ntotalSlices=27\\\\nsliceNumber=15\\\\nlockTime=02/17/2016 08:40:00\\\\nreleaseTime=02/17/2016 08:40:00\\\\npreviousLockTime=02/17/2016 08:39:00)\",\\r\\n\"Event: NotifySliceRelease (resourceName=PipelineScheduler\\\\ntotalSlices=27\\\\nsliceNumber=20\\\\nlockTime=02/17/2016 08:40:01\\\\nreleaseTime=02/17/2016 08:40:01\\\\npreviousLockTime=02/17/2016 08:39:01)\",\\r\\n\"Event: NotifySliceRelease (resourceName=PipelineScheduler\\\\ntotalSlices=27\\\\nsliceNumber=22\\\\nlockTime=02/17/2016 08:41:01\\\\nreleaseTime=02/17/2016 08:41:00\\\\npreviousLockTime=02/17/2016 08:40:01)\",\\r\\n\"Event: NotifySliceRelease (resourceName=PipelineScheduler\\\\ntotalSlices=27\\\\nsliceNumber=16\\\\nlockTime=02/17/2016 08:41:00\\\\nreleaseTime=02/17/2016 08:41:00\\\\npreviousLockTime=02/17/2016 08:40:00)\"\\r\\n];\\r\\nTraces\\r\\n| parse kind=regex flags=s EventText with * \"resourceName=\" resourceName:string \"(.*?)totalSlices=\" totalSlices:long \"(.*?)lockTime=\" lockTime:datetime \"(.*?)releaseTime=\" releaseTime:datetime \"(.*?)previousLockTime=\" previousLockTime:datetime \"\\\\\\\\)\" \\r\\n| project-away EventText\\r\\n```\\r\\n\\r\\n|resourceName|totalSlices|lockTime|releaseTime|previousLockTime|\\r\\n|---|---|---|---|---|\\r\\n|PipelineScheduler<br>|27|2016-02-17 08:40:00.0000000|2016-02-17 08:40:00.0000000|2016-02-17 08:39:00.0000000|\\r\\n|PipelineScheduler<br>|27|2016-02-17 08:40:01.0000000|2016-02-17 08:40:01.0000000|2016-02-17 08:39:01.0000000|\\r\\n|PipelineScheduler<br>|27|2016-02-17 08:40:01.0000000|2016-02-17 08:40:01.0000000|2016-02-17 08:39:01.0000000|\\r\\n|PipelineScheduler<br>|27|2016-02-17 08:41:00.0000000|2016-02-17 08:41:00.0000000|2016-02-17 08:40:00.0000000|\\r\\n|PipelineScheduler<br>|27|2016-02-17 08:41:01.0000000|2016-02-17 08:41:00.0000000|2016-02-17 08:40:01.0000000|\\r\\n\\r\\n**Relaxed mode**\\r\\n\\r\\nIn this example for relaxed mode, *totalSlices* extended column must be of type `long`. However, in the parsed string, it has the value *nonValidLongValue*.\\r\\nIn *releaseTime* extended column, the value *nonValidDateTime* can\\'t be parsed as *datetime*.\\r\\nThese two extended columns will get the value null while the other ones, such as *sliceNumber*, still get the correct values.\\r\\n\\r\\nIf you use option *kind = simple* for the same query below, you\\'ll get null for all extended columns. This option is strict on extended columns, and is the difference between relaxed and simple mode.\\r\\n\\r\\n> [!NOTE] \\r\\n > In relaxed mode, extended columns can be partially matched.\\r\\n\\r\\n```\\r\\nlet Traces = datatable(EventText:string)\\r\\n[\\r\\n\"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=23, lockTime=02/17/2016 08:40:01, releaseTime=nonValidDateTime 08:40:01, previousLockTime=02/17/2016 08:39:01)\",\\r\\n\"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=15, lockTime=02/17/2016 08:40:00, releaseTime=nonValidDateTime, previousLockTime=02/17/2016 08:39:00)\",\\r\\n\"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=nonValidLongValue, sliceNumber=20, lockTime=02/17/2016 08:40:01, releaseTime=nonValidDateTime 08:40:01, previousLockTime=02/17/2016 08:39:01)\",\\r\\n\"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=22, lockTime=02/17/2016 08:41:01, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:01)\",\\r\\n\"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=nonValidLongValue, sliceNumber=16, lockTime=02/17/2016 08:41:00, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:00)\"\\r\\n];\\r\\nTraces\\r\\n| parse kind=relaxed EventText with * \"resourceName=\" resourceName \", totalSlices=\" totalSlices:long * \"sliceNumber=\" sliceNumber:long * \"lockTime=\" lockTime \", releaseTime=\" releaseTime:date \",\" * \"previousLockTime=\" previousLockTime:date \")\" *\\r\\n| project-away EventText\\r\\n```\\r\\n\\r\\n|resourceName|totalSlices|sliceNumber|lockTime|releaseTime|previousLockTime|\\r\\n|---|---|---|---|---|---|\\r\\n|PipelineScheduler|27|15|02/17/2016 08:40:00||2016-02-17 08:39:00.0000000|\\r\\n|PipelineScheduler|27|23|02/17/2016 08:40:01||2016-02-17 08:39:01.0000000|\\r\\n|PipelineScheduler||20|02/17/2016 08:40:01||2016-02-17 08:39:01.0000000|\\r\\n|PipelineScheduler||16|02/17/2016 08:41:00|2016-02-17 08:41:00.0000000|2016-02-17 08:40:00.0000000|\\r\\n|PipelineScheduler|27|22|02/17/2016 08:41:01|2016-02-17 08:41:00.0000000|2016-02-17 08:40:01.0000000|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/parseoperator\",\"parseoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"parse_csv\",\"Splits a given string representing a single record of comma-separated values and returns a string array with these values.\",'```\\r\\nparse_csv(\"aaa,bbb,ccc\") == [\"aaa\",\"bbb\",\"ccc\"]\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`parse_csv(`*source*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *source*: The source string representing a single record of comma-separated values.\\r\\n\\r\\n## Returns\\r\\n\\r\\nA string array that contains the split values.\\r\\n\\r\\n**Notes**\\r\\n\\r\\nEmbedded line feeds, commas, and quotes may be escaped using the double quotation mark (\\'\"\\'). \\r\\nThis function doesn\\'t support multiple records per row (only the first record is taken).','```\\r\\nprint result=parse_csv(\\'aa,\"b,b,b\",cc,\"Escaping quotes: \"\"Title\"\"\",\"line1\\\\nline2\"\\')\\r\\n```\\r\\n\\r\\n|result|\\r\\n|---|\\r\\n|[<br>  \"aa\",<br>  \"b,b,b\",<br>  \"cc\",<br>  \"Escaping quotes: \\\\\"Title\\\\\"\",<br>  \"line1\\\\nline2\"<br>]|\\r\\n\\r\\nCSV payload with multiple records:\\r\\n\\r\\n```\\r\\nprint result_multi_record=parse_csv(\\'record1,a,b,c\\\\nrecord2,x,y,z\\')\\r\\n```\\r\\n\\r\\n|result_multi_record|\\r\\n|---|\\r\\n|[<br>  \"record1\",<br>  \"a\",<br>  \"b\",<br>  \"c\"<br>]|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/parsecsvfunction\",\"parsecsvfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"parse_ipv4\",\"Converts IPv4 string to long (signed 64-bit) number representation in big-endian order.\",\"```\\r\\nparse_ipv4(\\\"127.0.0.1\\\") == 2130706433\\r\\nparse_ipv4('192.1.168.1') < parse_ipv4('192.1.168.2') == true\\r\\ntohex(parse_ipv4('127.2.3.4')) == '7f020304'\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`parse_ipv4(`*`Expr`*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *`Expr`*: String expression representing IPv4 that will be converted to long. String may include net-mask using [IP-prefix notation](#ip-prefix-notation).\\r\\n\\r\\n## IP-prefix notation\\r\\n\\r\\nIP addresses can be defined with `IP-prefix notation` using a slash (`/`) character.\\r\\nThe IP address to the LEFT of the slash (`/`) is the base IP address. The number (1 to 32) to the RIGHT of the slash (/) is the number of contiguous 1 bit in the netmask.\\r\\n\\r\\nFor example, 192.168.2.0/24 will have an associated net/subnetmask containing 24 contiguous bits or 255.255.255.0 in dotted decimal format.\\r\\n\\r\\n## Returns\\r\\n\\r\\nIf conversion is successful, the result will be a long number.\\r\\nIf conversion isn't successful, the result will be `null`.\",\"```\\r\\ndatatable(ip_string:string)\\r\\n[\\r\\n '192.168.1.1',\\r\\n '192.168.1.1/24',\\r\\n '255.255.255.255/31'\\r\\n]\\r\\n| extend ip_long = parse_ipv4(ip_string)\\r\\n```\\r\\n\\r\\n|ip_string|ip_long|\\r\\n|---|---|\\r\\n|192.168.1.1|3232235777|\\r\\n|192.168.1.1/24|3232235776|\\r\\n|255.255.255.255/31|4294967294|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/parse-ipv4function\",\"parse-ipv4function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"parse_ipv4_mask\",\"Converts the input string of IPv4 and netmask to a signed, 64-bit wide, long number representation in big-endian order.\",\"```\\r\\nparse_ipv4_mask(\\\"127.0.0.1\\\", 24) == 2130706432\\r\\nparse_ipv4_mask('192.1.168.2', 31) == parse_ipv4_mask('192.1.168.3', 31)\\r\\ntohex(parse_ipv4_mask('127.2.3.4', 32)) == '7f020304'\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`parse_ipv4_mask(`*`Expr`*`, `*`PrefixMask`*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *`Expr`*: A string representation of the IPv4 address that will be converted to long. \\r\\n* *`PrefixMask`*: An integer from 0 to 32 representing the number of most-significant bits that are taken into account.\\r\\n\\r\\n## Returns\\r\\n\\r\\nIf conversion is successful, the result will be a long number.\\r\\nIf conversion isn't successful, the result will be `null`.\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/parse-ipv4-maskfunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"parse_ipv6\",\"Converts IPv6 or IPv4 string to a canonical IPv6 string representation.\",\"```\\r\\nparse_ipv6(\\\"127.0.0.1\\\") == '0000:0000:0000:0000:0000:ffff:7f00:0001'\\r\\nparse_ipv6(\\\":fe80::85d:e82c:9446:7994\\\") == 'fe80:0000:0000:0000:085d:e82c:9446:7994'\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`parse_ipv6(`*`Expr`*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *`Expr`*: String expression representing IPv6/IPv4 network address that will be converted to canonical IPv6 representation. String may include net-mask using [IP-prefix notation](#ip-prefix-notation).\\r\\n\\r\\n## IP-prefix notation\\r\\n\\r\\nIP addresses can be defined with `IP-prefix notation` using a slash (`/`) character.\\r\\nThe IP address to the LEFT of the slash (`/`) is the base IP address. The number (1 to 127) to the RIGHT of the slash (`/`) is the number of contiguous 1 bits in the netmask.\\r\\n\\r\\n## Returns\\r\\n\\r\\nIf conversion is successful, the result will be a string representing a canonical IPv6 network address.\\r\\nIf conversion isn't successful, the result will be an empty string.\",\"```\\r\\ndatatable(ipv4:string)\\r\\n[\\r\\n '192.168.255.255',\\r\\n '192.168.255.255/24',\\r\\n '255.255.255.255'\\r\\n]\\r\\n| extend ipv6 = parse_ipv6(ip_string)\\r\\n```\\r\\n\\r\\n| ipv4               | ipv6                                    |\\r\\n|--------------------|-----------------------------------------|\\r\\n| 192.168.255.255    | 0000:0000:0000:0000:0000:ffff:c0a8:ffff |\\r\\n| 192.168.255.255/24 | 0000:0000:0000:0000:0000:ffff:c0a8:ff00 |\\r\\n| 255.255.255.255    | 0000:0000:0000:0000:0000:ffff:ffff:ffff |\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/parse-ipv6function\",\"parse-ipv6function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"parse_ipv6_mask\",\"Converts IPv6/IPv4 string and netmask to a canonical IPv6 string representation.\",\"```\\r\\nparse_ipv6_mask(\\\"127.0.0.1\\\", 24) == '0000:0000:0000:0000:0000:ffff:7f00:0000'\\r\\nparse_ipv6_mask(\\\":fe80::85d:e82c:9446:7994\\\", 120) == 'fe80:0000:0000:0000:085d:e82c:9446:7900'\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`parse_ipv6_mask(`*`Expr`*`, `*`PrefixMask`*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *`Expr`*: String expression representing IPv6/IPv4 network address that will be converted to canonical IPv6 representation. String may include net-mask using [IP-prefix notation](#ip-prefix-notation).\\r\\n* *`PrefixMask`*: An integer from 0 to 128 representing the number of most-significant bits that are taken into account.\\r\\n\\r\\n## IP-prefix notation\\r\\n\\r\\nIP addresses can be defined with `IP-prefix notation` using a slash (`/`) character.\\r\\nThe IP address to the LEFT of the slash (`/`) is the base IP address. The number (1 to 127) to the RIGHT of the slash (`/`) is the number of contiguous 1 bit in the netmask.\\r\\n\\r\\n## Returns\\r\\n\\r\\nIf conversion is successful, the result will be a string representing a canonical IPv6 network address.\\r\\nIf conversion isn't successful, the result will be `null`.\",\"```\\r\\ndatatable(ip_string:string, netmask:long)\\r\\n[\\r\\n // IPv4 addresses\\r\\n '192.168.255.255',     120,  // 120-bit netmask is used\\r\\n '192.168.255.255/24',  124,  // 120-bit netmask is used, as IPv4 address doesn't use upper 8 bits\\r\\n '255.255.255.255', 128,  // 128-bit netmask is used\\r\\n // IPv6 addresses\\r\\n 'fe80::85d:e82c:9446:7994', 128,     // 128-bit netmask is used\\r\\n 'fe80::85d:e82c:9446:7994/120', 124, // 120-bit netmask is used\\r\\n // IPv6 with IPv4 notation\\r\\n '::192.168.255.255',    128,  // 128-bit netmask is used\\r\\n '::192.168.255.255/24', 128,  // 120-bit netmask is used, as IPv4 address doesn't use upper 8 bits\\r\\n]\\r\\n| extend ip6_canonical = parse_ipv6_mask(ip_string, netmask)\\r\\n```\\r\\n\\r\\n|ip_string|netmask|ip6_canonical|\\r\\n|---|---|---|\\r\\n|192.168.255.255|120|0000:0000:0000:0000:0000:ffff:c0a8:ff00|\\r\\n|192.168.255.255/24|124|0000:0000:0000:0000:0000:ffff:c0a8:ff00|\\r\\n|255.255.255.255|128|0000:0000:0000:0000:0000:ffff:ffff:ffff|\\r\\n|fe80::85d:e82c:9446:7994|128|fe80:0000:0000:0000:085d:e82c:9446:7994|\\r\\n|fe80::85d:e82c:9446:7994/120|124|fe80:0000:0000:0000:085d:e82c:9446:7900|\\r\\n|::192.168.255.255|128|0000:0000:0000:0000:0000:ffff:c0a8:ffff|\\r\\n|::192.168.255.255/24|128|0000:0000:0000:0000:0000:ffff:c0a8:ff00|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/parse-ipv6-maskfunction\",\"parse-ipv6-maskfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"parse_path\",\"Parses a file path `string` and returns a [`dynamic`](./scalar-data-types/dynamic.md) object that contains the following parts of the path:\",'* Scheme\\r\\n* RootPath\\r\\n* DirectoryPath\\r\\n* DirectoryName\\r\\n* FileName\\r\\n* Extension\\r\\n* AlternateDataStreamName\\r\\n\\r\\nIn addition to the simple paths with both types of slashes, the function supports paths with:\\r\\n\\r\\n* Schemas. For example, \"file://...\"\\r\\n* Shared paths. For example, \"\\\\\\\\shareddrive\\\\users...\"\\r\\n* Long paths. For example, \"\\\\\\\\?\\\\C:...\"\"\\r\\n* Alternate data streams. For example, \"file1.exe:file2.exe\"\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`parse_path(`*path*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *path*: A string that represents a file path.\\r\\n\\r\\n## Returns\\r\\n\\r\\nAn object of type `dynamic` that included the path components as listed above.','```\\r\\ndatatable(p:string) \\r\\n[\\r\\n    @\"C:\\\\temp\\\\file.txt\",\\r\\n    @\"temp\\\\file.txt\",\\r\\n    \"file://C:/temp/file.txt:some.exe\",\\r\\n    @\"\\\\\\\\shared\\\\users\\\\temp\\\\file.txt.gz\",\\r\\n    \"/usr/lib/temp/file.txt\"\\r\\n]\\r\\n| extend path_parts = parse_path(p)\\r\\n\\r\\n```\\r\\n\\r\\n|p|path_parts\\r\\n|---|---\\r\\n|C:\\\\temp\\\\file.txt|{\"Scheme\":\"\",\"RootPath\":\"C:\",\"DirectoryPath\":\"C:\\\\\\\\temp\",\"DirectoryName\":\"temp\",\"Filename\":\"file.txt\",\"Extension\":\"txt\",\"AlternateDataStreamName\":\"\"}\\r\\n|temp\\\\file.txt|{\"Scheme\":\"\",\"RootPath\":\"\",\"DirectoryPath\":\"temp\",\"DirectoryName\":\"temp\",\"Filename\":\"file.txt\",\"Extension\":\"txt\",\"AlternateDataStreamName\":\"\"}\\r\\n|file://C:/temp/file.txt:some.exe|{\"Scheme\":\"file\",\"RootPath\":\"C:\",\"DirectoryPath\":\"C:/temp\",\"DirectoryName\":\"temp\",\"Filename\":\"file.txt\",\"Extension\":\"txt\",\"AlternateDataStreamName\":\"some.exe\"}\\r\\n|\\\\\\\\shared\\\\users\\\\temp\\\\file.txt.gz|{\"Scheme\":\"\",\"RootPath\":\"\",\"DirectoryPath\":\"\\\\\\\\\\\\\\\\shared\\\\\\\\users\\\\\\\\temp\",\"DirectoryName\":\"temp\",\"Filename\":\"file.txt.gz\",\"Extension\":\"gz\",\"AlternateDataStreamName\":\"\"}\\r\\n|/usr/lib/temp/file.txt|{\"Scheme\":\"\",\"RootPath\":\"\",\"DirectoryPath\":\"/usr/lib/temp\",\"DirectoryName\":\"temp\",\"Filename\":\"file.txt\",\"Extension\":\"txt\",\"AlternateDataStreamName\":\"\"}',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/parsepathfunction\",\"parsepathfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"parse_url\",\"Parses an absolute URL `string` and returns a `dynamic` object contains URL parts.\",\"## Syntax\\r\\n\\r\\n`parse_url(`*url*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *url*: A string represents a URL or the query part of the URL.\\r\\n\\r\\n## Returns\\r\\n\\r\\nAn object of type [dynamic](./scalar-data-types/dynamic.md) that included the URL components: Scheme, Host, Port, Path, Username, Password, Query Parameters, Fragment.\",'```\\r\\nT | extend Result = parse_url(\"scheme://username:password@host:1234/this/is/a/path?k1=v1&k2=v2#fragment\")\\r\\n```\\r\\n\\r\\nwill result\\r\\n\\r\\n```\\r\\n {\\r\\n \\t\"Scheme\":\"scheme\",\\r\\n \\t\"Host\":\"host\",\\r\\n \\t\"Port\":\"1234\",\\r\\n \\t\"Path\":\"this/is/a/path\",\\r\\n \\t\"Username\":\"username\",\\r\\n \\t\"Password\":\"password\",\\r\\n \\t\"Query Parameters\":\"{\"k1\":\"v1\", \"k2\":\"v2\"}\",\\r\\n \\t\"Fragment\":\"fragment\"\\r\\n }\\r\\n```',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/parseurlfunction\",\"parseurlfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"parse_urlquery\",\"Returns a `dynamic` object contains the Query parameters.\",\"## Syntax\\r\\n\\r\\n`parse_urlquery(`*query*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *query*: A string represents a url query.\\r\\n\\r\\n## Returns\\r\\n\\r\\nAn object of type [dynamic](./scalar-data-types/dynamic.md) that includes the query parameters.\",'```\\r\\nparse_urlquery(\"k1=v1&k2=v2&k3=v3\")\\r\\n```\\r\\n\\r\\nresult:\\r\\n\\r\\n```\\r\\n {\\r\\n \\t\"Query Parameters\":\"{\"k1\":\"v1\", \"k2\":\"v2\", \"k3\":\"v3\"}\",\\r\\n }\\r\\n```\\r\\n\\r\\nThe following example uses a function to extract specific query parameters:\\r\\n\\r\\n```\\r\\nlet getQueryParamValue = (querystring: string, param: string)\\r\\n{\\r\\n    let params = parse_urlquery(querystring);\\r\\n    tostring(params[\"Query Parameters\"].[param])\\r\\n};\\r\\nprint UrlQuery = \\'view=vs-2019&preserve-view=true\\'\\r\\n| extend view = getQueryParamValue(UrlQuery, \\'view\\')\\r\\n| extend preserve = getQueryParamValue(UrlQuery, \\'preserve-view\\')\\r\\n```\\r\\n\\r\\nresult:\\r\\n\\r\\n| UrlQuery | view | preserve |\\r\\n|--|--|--|\\r\\n|view=vs-2019&preserve-view=true|vs-2019|true|\\r\\n\\r\\n**Notes**\\r\\n\\r\\n* Input format should follow URL query standards (key=value& ...)',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/parseurlqueryfunction\",\"parseurlqueryfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"parse_user_agent\",\"Interprets a user-agent string, which identifies the user's browser and provides certain system details to servers hosting the websites the user visits. The result is returned as [`dynamic`](./scalar-data-types/dynamic.md).\",'## Syntax\\r\\n\\r\\n`parse_user_agent(`*user-agent-string*, *look-for*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *user-agent-string*: An expression of type `string`, representing a user-agent string.\\r\\n* *look-for*: An expression of type `string` or `dynamic`, representing what the function should be looking for in the user-agent string (parsing target). \\r\\nThe possible options: \"browser\", \"os\", \"device\". If only a single parsing target is required it can be passed a `string` parameter.\\r\\nIf two or three are required they can be passed as a `dynamic array`.\\r\\n\\r\\n## Returns\\r\\n\\r\\nAn object of type `dynamic` that contains the information about the requested parsing targets.\\r\\n\\r\\nBrowser: Family, MajorVersion, MinorVersion, Patch                 \\r\\n\\r\\nOperatingSystem: Family, MajorVersion, MinorVersion, Patch, PatchMinor             \\r\\n\\r\\nDevice: Family, Brand, Model\\r\\n\\r\\n> [!WARNING]\\r\\n> The function implementation is built on regex checks of the input string against a huge number of predefined patterns. Therefore the expected time and CPU consumption is high.\\r\\nWhen the function is used in a query, make sure it runs in a distributed manner on multiple machines.\\r\\nIf queries with this function are frequently used, you may want to pre-create the results via [update policy](../management/updatepolicy.md), but you need to take into account that using this function inside the update policy will increase the ingestion latency.','```\\r\\nprint useragent = \"Mozilla/5.0 (Windows; U; en-US) AppleWebKit/531.9 (KHTML, like Gecko) AdobeAIR/2.5.1\"\\r\\n| extend x = parse_user_agent(useragent, \"browser\") \\r\\n```\\r\\n\\r\\nExpected result is a dynamic object:\\r\\n\\r\\n{\\r\\n  \"Browser\": {\\r\\n    \"Family\": \"AdobeAIR\",\\r\\n    \"MajorVersion\": \"2\",\\r\\n    \"MinorVersion\": \"5\",\\r\\n    \"Patch\": \"1\"\\r\\n  }\\r\\n}\\r\\n\\r\\n```\\r\\nprint useragent = \"Mozilla/5.0 (SymbianOS/9.2; U; Series60/3.1 NokiaN81-3/10.0.032 Profile/MIDP-2.0 Configuration/CLDC-1.1 ) AppleWebKit/413 (KHTML, like Gecko) Safari/4\"\\r\\n| extend x = parse_user_agent(useragent, dynamic([\"browser\",\"os\",\"device\"])) \\r\\n```\\r\\n\\r\\nExpected result is a dynamic object:\\r\\n\\r\\n{\\r\\n  \"Browser\": {\\r\\n    \"Family\": \"Nokia OSS Browser\",\\r\\n    \"MajorVersion\": \"3\",\\r\\n    \"MinorVersion\": \"1\",\\r\\n    \"Patch\": \"\"\\r\\n  },\\r\\n  \"OperatingSystem\": {\\r\\n    \"Family\": \"Symbian OS\",\\r\\n    \"MajorVersion\": \"9\",\\r\\n    \"MinorVersion\": \"2\",\\r\\n    \"Patch\": \"\",\\r\\n    \"PatchMinor\": \"\"\\r\\n  },\\r\\n  \"Device\": {\\r\\n    \"Family\": \"Nokia N81\",\\r\\n    \"Brand\": \"Nokia\",\\r\\n    \"Model\": \"N81-3\"\\r\\n  }\\r\\n}',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/parse-useragentfunction\",\"parse-useragentfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"parse_version\",\"Converts the input string representation of version to a comparable decimal number.\",\"```\\r\\nparse_version(\\\"0.0.0.1\\\")\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`parse_version` `(` *Expr* `)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *`Expr`*: A scalar expression of type `string` that specifies the version to be parsed.\\r\\n\\r\\n> [!NOTE]\\r\\n> * Input string must contain from one to four version parts, represented as numbers and separated with dots ('.').\\r\\n> * Each part of version may contain up to eight digits, with the max value at 99999999.\\r\\n> * If the number of parts is less than four, all the missing parts are considered as trailing (`1.0` == `1.0.0.0`).\\r\\n\\r\\n## Returns\\r\\n\\r\\nIf conversion is successful, the result will be a decimal.\\r\\nIf conversion is unsuccessful, the result will be `null`.\",'```\\r\\nlet dt = datatable(v:string)\\r\\n[\"0.0.0.5\",\"0.0.7.0\",\"0.0.3\",\"0.2\",\"0.1.2.0\",\"1.2.3.4\",\"1\",\"99999999.0.0.0\"];\\r\\ndt | project v1=v, _key=1 \\r\\n| join kind=inner (dt | project v2=v, _key = 1) on _key | where v1 != v2\\r\\n| summarize v1 = max(v1),v2 = min(v2) by (hash(v1) + hash(v2)) // removing duplications\\r\\n| project v1, v2, higher_version = iif(parse_version(v1) > parse_version(v2), v1, v2)\\r\\n\\r\\n```\\r\\n\\r\\n|v1|v2|higher_version|\\r\\n|---|---|---|\\r\\n|99999999.0.0.0|0.0.0.5|99999999.0.0.0|\\r\\n|1|0.0.0.5|1|\\r\\n|1.2.3.4|0.0.0.5|1.2.3.4|\\r\\n|0.1.2.0|0.0.0.5|0.1.2.0|\\r\\n|0.2|0.0.0.5|0.2|\\r\\n|0.0.3|0.0.0.5|0.0.3|\\r\\n|0.0.7.0|0.0.0.5|0.0.7.0|\\r\\n|99999999.0.0.0|0.0.7.0|99999999.0.0.0|\\r\\n|1|0.0.7.0|1|\\r\\n|1.2.3.4|0.0.7.0|1.2.3.4|\\r\\n|0.1.2.0|0.0.7.0|0.1.2.0|\\r\\n|0.2|0.0.7.0|0.2|\\r\\n|0.0.7.0|0.0.3|0.0.7.0|\\r\\n|99999999.0.0.0|0.0.3|99999999.0.0.0|\\r\\n|1|0.0.3|1|\\r\\n|1.2.3.4|0.0.3|1.2.3.4|\\r\\n|0.1.2.0|0.0.3|0.1.2.0|\\r\\n|0.2|0.0.3|0.2|\\r\\n|99999999.0.0.0|0.2|99999999.0.0.0|\\r\\n|1|0.2|1|\\r\\n|1.2.3.4|0.2|1.2.3.4|\\r\\n|0.2|0.1.2.0|0.2|\\r\\n|99999999.0.0.0|0.1.2.0|99999999.0.0.0|\\r\\n|1|0.1.2.0|1|\\r\\n|1.2.3.4|0.1.2.0|1.2.3.4|\\r\\n|99999999.0.0.0|1.2.3.4|99999999.0.0.0|\\r\\n|1.2.3.4|1|1.2.3.4|\\r\\n|99999999.0.0.0|1|99999999.0.0.0|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/parse-versionfunction\",\"parse-versionfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"parse_xml\",\"Interprets a `string` as a XML value, converts the value to a JSON and returns the value as `dynamic`.\",'## Syntax\\r\\n\\r\\n`parse_xml(`*xml*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *xml*: An expression of type `string`, representing a XML-formatted value.\\r\\n\\r\\n## Returns\\r\\n\\r\\nAn object of type [dynamic](./scalar-data-types/dynamic.md) that is determined by the value of *xml*, or null, if the XML format is invalid.\\r\\n\\r\\nThe conversion is done as following:\\r\\n\\r\\nXML                                |JSON                                            |Access\\r\\n-----------------------------------|------------------------------------------------|--------------         \\r\\n`<e/>`                             | { \"e\": null }                                  | o.e\\r\\n`<e>text<\\/e>`\\t                   | { \"e\": \"text\" }\\t                            | o.e\\r\\n`<e name=\"value\" />`               | { \"e\":{\"@name\": \"value\"} }\\t                    | o.e[\"@name\"]\\r\\n`<e name=\"value\">text<\\/e>`         | { \"e\": { \"@name\": \"value\", \"#text\": \"text\" } } | o.e[\"@name\"] o.e[\"#text\"]\\r\\n`<e> <a>text<\\/a> <b>text<\\/b> <\\/e>` | { \"e\": { \"a\": \"text\", \"b\": \"text\" } }\\t        | o.e.a o.e.b\\r\\n`<e> <a>text<\\/a> <a>text<\\/a> <\\/e>` | { \"e\": { \"a\": [\"text\", \"text\"] } }\\t            | o.e.a[0] o.e.a[1]\\r\\n`<e> text <a>text<\\/a> <\\/e>`        | { \"e\": { \"#text\": \"text\", \"a\": \"text\" } }\\t    | 1`o.e[\"#text\"] o.e.a\\r\\n\\r\\n**Notes**\\r\\n\\r\\n* Maximal input `string` length for `parse_xml` is 1MB (1,048,576 bytes). Longer strings interpretation will result in a null object\\r\\n* Only element nodes, attributes and text nodes will be translated. Everything else will be skipped','In the following example, when `context_custom_metrics` is a `string`\\r\\nthat looks like this: \\r\\n\\r\\n```xml\\r\\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\r\\n<duration>\\r\\n    <value>118.0<\\/value>\\r\\n    <count>5.0<\\/count>\\r\\n    <min>100.0<\\/min>\\r\\n    <max>150.0<\\/max>\\r\\n    <stdDev>0.0<\\/stdDev>\\r\\n    <sampledValue>118.0<\\/sampledValue>\\r\\n    <sum>118.0<\\/sum>\\r\\n<\\/duration>\\r\\n```\\r\\n\\r\\nthen the following CSL Fragment translates the XML to the following JSON:\\r\\n\\r\\n```json\\r\\n{\\r\\n    \"duration\": {\\r\\n        \"value\": 118.0,\\r\\n        \"count\": 5.0,\\r\\n        \"min\": 100.0,\\r\\n        \"max\": 150.0,\\r\\n        \"stdDev\": 0.0,\\r\\n        \"sampledValue\": 118.0,\\r\\n        \"sum\": 118.0\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\nand retrieves the value of the `duration` slot\\r\\nin the object, and from that it retrieves two slots, `duration.value` and\\r\\n `duration.min` (`118.0` and `100.0`, respectively).\\r\\n\\r\\n```\\r\\nT\\r\\n| extend d=parse_xml(context_custom_metrics) \\r\\n| extend duration_value=d.duration.value, duration_min=d[\"duration\"][\"min\"]\\r\\n```',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/parse-xmlfunction\",\"parse-xmlfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"parse-kv\",\"Extracts structured information from a string expression and represents the information in a key/value form.\",\"The following extraction modes are supported:\\r\\n\\r\\n* [**Specified delimeter**](#specified-delimeter): Extraction based on specified delimiters that dictate how keys/values and pairs are separated from each other.\\r\\n* [**Non-specified delimeter**](#non-specified-delimiter): Extraction with no need to specify delimiters. Any non-alphanumeric character is considered a delimiter.\\r\\n* [**Regex**](#regex): Extraction based on [RE2](re2.md) regular expression.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n### Specified delimeter\\r\\n\\r\\n*T* `|` `parse-kv` *Expression* `as` `(` *KeysList* `)` `with` `(` `pair_delimiter` `=` *PairDelimiter* `,` `kv_delimiter` `=` *KvDelimiter*  [`,` `quote` `=` *QuoteChars* ... [`,` `escape` `=` *EscapeChar* ...]] [`,` `greedy` `=` `true`] `)`\\r\\n\\r\\n### Non-specified delimiter\\r\\n\\r\\n*T* `|` `parse-kv` *Expression* `as` `(` *KeysList* `)` `with` `(` [`quote` `=` *QuoteChars* ... [`,` `escape` `=` *EscapeChar* ...]] `)`\\r\\n\\r\\n### Regex\\r\\n\\r\\n*T* `|` `parse-kv` *Expression* `as` `(` *KeysList* `)` `with` `(` `regex` `=` *RegexPattern*) `)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* **Expression**: The string expression to extract key values from.\\r\\n* **KeysList**: A comma-separated list of key names and their value data types. The order of the keys doesn't have to match the order in which they appear in the text.\\r\\n* **PairDelimiter**: A string literal representing a delimiter that separates key value pairs from each other.\\r\\n* **KvDelimiter**: A string literal representing a delimiter that separates keys from values.\\r\\n* **QuoteChars**: A one- or two-character string literal representing opening and closing quotes that key name or the extracted value may be wrapped with. The parameter can be repeated to specify a separate set of opening/closing quotes.\\r\\n* **EscapeChar**: A one-character string literal describing a character that may be used for escaping special characters in a quoted value. The parameter can be repeated if multiple escape characters are used.\\r\\n* **RegexPattern**: A [RE2](re2.md) regular expression containing two capturing groups exactly. The first group represents the key name, the second group represents the key value.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe original input tabular expression *T*, extended with columns per specified keys to extract.\\r\\n\\r\\n> [!NOTE]\\r\\n> * If a key doesn't appear in a record, the corresponding column value will either be `null` or an empty string, depending on the column type.\\r\\n> * Only keys that are listed in the operator are extracted.\\r\\n> * The first appearance of a key is extracted, and subsequent values are ignored.\\r\\n> * When extracting keys and values, leading and trailing white spaces are ignored.\",\"### Extraction with well-defined delimiters\\r\\n\\r\\nIn the following example, keys and values are separated by well defined delimiters. These delimeters are comma and colon characters. :\\r\\n\\r\\n```\\r\\nprint str=\\\"ThreadId:458745723, Machine:Node001, Text: The service is up, Level: Info\\\"\\r\\n| parse-kv str as (Text: string, ThreadId:long, Machine: string) with (pair_delimiter=',', kv_delimiter=':')\\r\\n| project-away str\\r\\n```\\r\\n\\r\\n|Text|\\tThreadId|\\tMachine|\\r\\n|--|--|--|\\r\\n|The service is up| 458745723|\\tNode001\\r\\n\\r\\n### Extraction with value quoting\\r\\n\\r\\nSometimes key names or values are wrapped in quotes, which allows the values themselves to contain delimiter characters. The following examples show how a `quote` argument is used for extracting such values.\\r\\n\\r\\n```\\r\\nprint str='src=10.1.1.123 dst=10.1.1.124 bytes=125 failure=\\\"connection aborted\\\" \\\"event time\\\"=2021-01-01T10:00:54'\\r\\n| parse-kv str as (['event time']:datetime, src:string, dst:string, bytes:long, failure:string) with (pair_delimiter=' ', kv_delimiter='=', quote='\\\"')\\r\\n| project-away str\\r\\n```\\r\\n\\r\\n|event time|\\tsrc|\\tdst|\\tbytes|\\tfailure|\\r\\n|--|--|--|--|--|\\r\\n|2021-01-01 10:00:54.0000000|\\t10.1.1.123|\\t10.1.1.124|\\t125|\\tconnection aborted|\\r\\n\\r\\nThe following example uses different opening and closing quotes:\\r\\n\\r\\n```\\r\\nprint str='src=10.1.1.123 dst=10.1.1.124 bytes=125 failure=(connection aborted) (event time)=(2021-01-01 10:00:54)'\\r\\n| parse-kv str as (['event time']:datetime, src:string, dst:string, bytes:long, failure:string) with (pair_delimiter=' ', kv_delimiter='=', quote='()')\\r\\n| project-away str\\r\\n```\\r\\n\\r\\n|event time|\\tsrc|\\tdst|\\tbytes|\\tfailure|\\r\\n|--|--|--|--|--|\\r\\n|2021-01-01 10:00:54.0000000|\\t10.1.1.123|\\t10.1.1.124|\\t125|\\tconnection aborted|\\r\\n\\r\\nThe values themselves may contain properly escaped quote characters, as the following example shows:\\r\\n\\r\\n```\\r\\nprint str='src=10.1.1.123 dst=10.1.1.124 bytes=125 failure=\\\"the remote host sent \\\\\\\\\\\"bye!\\\\\\\\\\\"\\\" time=2021-01-01T10:00:54'\\r\\n| parse-kv str as (['time']:datetime, src:string, dst:string, bytes:long, failure:string) with (pair_delimiter=' ', kv_delimiter='=', quote='\\\"', escape='\\\\\\\\')\\r\\n| project-away str\\r\\n```\\r\\n\\r\\n|time|\\tsrc|\\tdst|\\tbytes|\\tfailure|\\r\\n|--|--|--|--|--|\\r\\n|2021-01-01 10:00:54.0000000|\\t10.1.1.123|\\t10.1.1.124|\\t125|\\tthe remote host sent \\\"bye!\\\"|\\r\\n\\r\\n### Extraction in greedy mode\\r\\n\\r\\nThere are cases when unquoted values may contain pair delimiters. In this case, use the `greedy` mode to indicate to the operator to scan until the next key appearance (or end of string) when looking for the value ending.\\r\\n\\r\\nThe following examples compare how the operator works with and without the `greedy` mode specified:\\r\\n\\r\\n```\\r\\nprint str='name=John Doe phone=555 5555 city=New York'\\r\\n| parse-kv str as (name:string, phone:string, city:string) with (pair_delimiter=' ', kv_delimiter='=')\\r\\n| project-away str\\r\\n```\\r\\n\\r\\n|name|\\tphone|\\tcity|\\r\\n|--|--|--|\\r\\n|John|\\t555|\\tNew\\r\\n\\r\\n```\\r\\nprint str='name=John Doe phone=555 5555 city=New York'\\r\\n| parse-kv str as (name:string, phone:string, city:string) with (pair_delimiter=' ', kv_delimiter='=', greedy=true)\\r\\n| project-away str\\r\\n```\\r\\n\\r\\n|name|\\tphone|\\tcity|\\r\\n|--|--|--|\\r\\n|John Doe|\\t555 5555|\\tNew York|\\r\\n\\r\\n### Extraction with no well-defined delimiters\\r\\n\\r\\nIn the following example, any non-alphanumeric character is considered a valid delimiter:\\r\\n\\r\\n```\\r\\nprint str=\\\"2021-01-01T10:00:34 [INFO] ThreadId:458745723, Machine:Node001, Text: Started\\\"\\r\\n| parse-kv str as (Text: string, ThreadId:long, Machine: string)\\r\\n| project-away str\\r\\n```\\r\\n\\r\\n|Text|\\tThreadId|\\tMachine|\\r\\n|--|--|--|\\r\\n|Started|\\t458745723|\\tNode001|\\r\\n\\r\\nValues quoting and escaping is allowed in this mode as shown in the following example:\\r\\n\\r\\n```\\r\\nprint str=\\\"2021-01-01T10:00:34 [INFO] ThreadId:458745723, Machine:Node001, Text: 'The service \\\\\\\\' is up'\\\"\\r\\n| parse-kv str as (Text: string, ThreadId:long, Machine: string) with (quote=\\\"'\\\", escape='\\\\\\\\')\\r\\n| project-away str\\r\\n```\\r\\n\\r\\n|Text|\\tThreadId|\\tMachine|\\r\\n|--|--|--|\\r\\n|The service ' is up|\\t458745723|\\tNode001|\\r\\n\\r\\n### Extraction using regex\\r\\n\\r\\nWhen no delimiters define text structure well enough, regular expression-based extraction can be useful.\\r\\n\\r\\n```\\r\\nprint str=@'[\\\"referer url: https://hostname.com/redirect?dest=/?h=1234\\\", \\\"request url: https://hostname.com/?h=1234\\\", \\\"advertiser id: 24fefbca-cf27-4d62-a623-249c2ad30c73\\\"]'\\r\\n| parse-kv str as (['referer url']:string, ['request url']:string, ['advertiser id']: guid) with (regex=@'\\\"([\\\\w ]+)\\\\s*:\\\\s*([^\\\"]*)\\\"')\\r\\n| project-away str\\r\\n```\\r\\n\\r\\n|referer url|\\trequest url|\\tadvertiser id|\\r\\n|--|--|--|\\r\\n|`https://hostname.com/redirect?dest=/?h=1234`|\\t`https://hostname.com/?h=1234`|\\t24fefbca-cf27-4d62-a623-249c2ad30c73|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/parse-kv-operator\",\"parse-kv-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"parse-where\",\"Evaluates a string expression, and parses its value into one or more calculated columns. The result is only the successfully parsed strings.\",'See [parse operator](parseoperator.md), which produces nulls for unsuccessfully parsed strings.\\r\\n\\r\\n```\\r\\nT | parse-where Text with \"ActivityName=\" name \", ActivityType=\" type\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `| parse-where` [`kind=regex` [`flags=regex_flags`] |`simple`] *Expression* `with` `*` (*StringConstant* *ColumnName* [`:` *ColumnType*]) `*`...\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T*: The input table.\\r\\n* *kind*: \\r\\n\\t* *simple* (default): StringConstant is a regular string value, and the match is strict. All string delimiters should appear in the parsed string, and all extended columns must match the required types.\\r\\n\\t\\t\\r\\n\\t* *regex*: StringConstant may be a regular expression, and the match is strict. All string delimiters should appear in the parsed string, and all extended columns must match the required types. String delimiters can be a regex for this mode.\\r\\n\\t\\r\\n\\t* *flags*: Flags to be used in regex mode:  `U` (Ungreedy), `m` (multi-line mode), `s` (match new line `\\\\n`), `i` (case-insensitive), More flags can be found in [RE2 flags](re2.md).\\r\\n\\t\\t\\r\\n* *Expression*: An expression that evaluates to a string.\\r\\n* *ColumnName:* The name of a column that is assigned to a value that was taken out of the string expression. \\r\\n  \\r\\n* *ColumnType:* should be an optional scalar type that indicates the type to convert the value to. The default is string type.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe input table, which is extended according to the list of columns that are provided to the operator.\\r\\n\\r\\n> [!Note] \\r\\n> Only successfully parsed strings will be in the output. Strings that don\\'t match the pattern will be filtered out.\\r\\n\\r\\n**Tips**\\r\\n\\r\\n* `parse-where` parses the strings in the same way as [parse](parseoperator.md), and filters out strings that were not parsed successfully.\\r\\n* Use [project](projectoperator.md) if you also want to drop or rename some columns.\\r\\n* Use * in the pattern to skip junk values. This value can\\'t be used after string column.\\r\\n* The parse pattern may start with *ColumnName*, in addition to *StringConstant*. \\r\\n* If the parsed *Expression* isn\\'t of type string, it will be converted to type string.\\r\\n* If regex mode is used, you can add regex flags to control the whole regex used in parse.\\r\\n* In regex mode, parse will translate the pattern to a regex and use [RE2 syntax](re2.md) in order to do the matching using numbered captured groups that are handled internally.\\r\\n  \\r\\n  For example, this parse statement:\\r\\n  \\r\\n    \\r\\n    ```\\r\\n    parse-where kind=regex Col with * <regex1> var1:string <regex2> var2:long\\r\\n    ```\\r\\n\\tThe regex that will be generated by the parse internally is `.*?<regex1>(.*?)<regex2>(\\\\-\\\\d+)`.\\r\\n\\t\\t\\r\\n\\t- `*` was translated to `.*?`.\\r\\n\\t\\t\\r\\n\\t- `string` was translated to `.*?`.\\r\\n\\t\\t\\r\\n\\t- `long` was translated to `\\\\-\\\\d+`.','The `parse-where` operator provides a streamlined way to `extend` a table by using multiple `extract` applications on the same `string` expression. This is most useful when the table has a `string` column that contains several values that you want to break into individual columns. For example, you can break up a column that was produced by a developer trace (\"`printf`\"/\"`Console.WriteLine`\") statement.\\r\\n\\r\\n### Using `parse`\\r\\n\\r\\nIn the example below, the column `EventText` of table `Traces` contains strings of the form `Event: NotifySliceRelease (resourceName={0}, totalSlices= {1}, sliceNumber={2}, lockTime={3}, releaseTime={4}, previousLockTime={5})`. The operation below will extend the table with six columns: `resourceName` , `totalSlices`, `sliceNumber`, `lockTime `, `releaseTime`, `previousLockTime`, `Month`, and `Day`. \\r\\n\\r\\nA few of the strings don\\'t have a full match.\\r\\n\\r\\nUsing `parse`, the calculated columns will have nulls.\\r\\n\\r\\n```\\r\\nlet Traces = datatable(EventText:string)\\r\\n[\\r\\n\"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=invalid_number, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01, previousLockTime=02/17/2016 08:39:01)\",\\r\\n\"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=15, lockTime=02/17/2016 08:40:00, releaseTime=invalid_datetime, previousLockTime=02/17/2016 08:39:00)\",\\r\\n\"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=20, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01, previousLockTime=02/17/2016 08:39:01)\",\\r\\n\"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=22, lockTime=02/17/2016 08:41:01, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:01)\",\\r\\n\"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=invalid_number, sliceNumber=16, lockTime=02/17/2016 08:41:00, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:00)\"\\r\\n];\\r\\nTraces  \\r\\n| parse EventText with * \"resourceName=\" resourceName \", totalSlices=\" totalSlices:long * \"sliceNumber=\" sliceNumber:long * \"lockTime=\" lockTime \", releaseTime=\" releaseTime:date \",\" * \"previousLockTime=\" previouLockTime:date \")\" *  \\r\\n| project resourceName ,totalSlices , sliceNumber , lockTime , releaseTime , previousLockTime\\r\\n```\\r\\n\\r\\n|resourceName|totalSlices|sliceNumber|lockTime|releaseTime|previousLockTime|\\r\\n|---|---|---|---|---|---|\\r\\n|||||||\\r\\n|||||||\\r\\n|||||||\\r\\n|PipelineScheduler|27|20|02/17/2016 08:40:01|2016-02-17 08:40:01.0000000|2016-02-17 08:39:01.0000000|\\r\\n|PipelineScheduler|27|22|02/17/2016 08:41:01|2016-02-17 08:41:00.0000000|2016-02-17 08:40:01.0000000|\\r\\n\\r\\n### Using `parse-where` \\r\\n\\r\\nUsing \\'parse-where\\' will filter-out unsuccessfully parsed strings from the result.\\r\\n\\r\\n```\\r\\nlet Traces = datatable(EventText:string)\\r\\n[\\r\\n\"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=invalid_number, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01, previousLockTime=02/17/2016 08:39:01)\",\\r\\n\"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=15, lockTime=02/17/2016 08:40:00, releaseTime=invalid_datetime, previousLockTime=02/17/2016 08:39:00)\",\\r\\n\"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=20, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01, previousLockTime=02/17/2016 08:39:01)\",\\r\\n\"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=22, lockTime=02/17/2016 08:41:01, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:01)\",\\r\\n\"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=invalid_number, sliceNumber=16, lockTime=02/17/2016 08:41:00, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:00)\"\\r\\n];\\r\\nTraces  \\r\\n| parse-where EventText with * \"resourceName=\" resourceName \", totalSlices=\" totalSlices:long * \"sliceNumber=\" sliceNumber:long * \"lockTime=\" lockTime \", releaseTime=\" releaseTime:date \",\" * \"previousLockTime=\" previousLockTime:date \")\" *  \\r\\n| project resourceName ,totalSlices , sliceNumber , lockTime , releaseTime , previousLockTime\\r\\n```\\r\\n\\r\\n|resourceName|totalSlices|sliceNumber|lockTime|releaseTime|previousLockTime|\\r\\n|---|---|---|---|---|---|\\r\\n|PipelineScheduler|27|20|02/17/2016 08:40:01|2016-02-17 08:40:01.0000000|2016-02-17 08:39:01.0000000|\\r\\n|PipelineScheduler|27|22|02/17/2016 08:41:01|2016-02-17 08:41:00.0000000|2016-02-17 08:40:01.0000000|\\r\\n\\r\\n### Regex mode using regex flags\\r\\n\\r\\nTo get the resourceName and totalSlices, use the following query:\\r\\n\\r\\n```\\r\\nlet Traces = datatable(EventText:string)\\r\\n[\\r\\n\"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=non_valid_integer, sliceNumber=11, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01, previousLockTime=02/17/2016 08:39:01)\",\\r\\n\"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=15, lockTime=02/17/2016 08:40:00, releaseTime=02/17/2016 08:40:00, previousLockTime=02/17/2016 08:39:00)\",\\r\\n\"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=non_valid_integer, sliceNumber=44, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01, previousLockTime=02/17/2016 08:39:01)\",\\r\\n\"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=22, lockTime=02/17/2016 08:41:01, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:01)\",\\r\\n\"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=16, lockTime=02/17/2016 08:41:00, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:00)\"\\r\\n];\\r\\nTraces\\r\\n| parse-where kind = regex EventText with * \"RESOURCENAME=\" resourceName \",\" * \"totalSlices=\" totalSlices:long \",\" *\\r\\n| project resourceName, totalSlices\\r\\n```\\r\\n\\r\\n### `parse-where` with case-insensitive regex flag\\r\\n\\r\\nIn the above query, the default mode was case-sensitive, so the strings were parsed successfully. No result was obtained.\\r\\n\\r\\nTo get the required result, run `parse-where` with a case-insensitive (`i`) regex flag.\\r\\n\\r\\nOnly three strings will be parsed successfully, so the result is three records (some totalSlices hold invalid integers).\\r\\n\\r\\n```\\r\\nlet Traces = datatable(EventText:string)\\r\\n[\\r\\n\"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=non_valid_integer, sliceNumber=11, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01, previousLockTime=02/17/2016 08:39:01)\",\\r\\n\"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=15, lockTime=02/17/2016 08:40:00, releaseTime=02/17/2016 08:40:00, previousLockTime=02/17/2016 08:39:00)\",\\r\\n\"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=non_valid_integer, sliceNumber=44, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01, previousLockTime=02/17/2016 08:39:01)\",\\r\\n\"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=22, lockTime=02/17/2016 08:41:01, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:01)\",\\r\\n\"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=16, lockTime=02/17/2016 08:41:00, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:00)\"\\r\\n];\\r\\nTraces\\r\\n| parse-where kind = regex flags=i EventText with * \"RESOURCENAME=\" resourceName \",\" * \"totalSlices=\" totalSlices:long \",\" *\\r\\n| project resourceName, totalSlices\\r\\n```\\r\\n\\r\\n|resourceName|totalSlices|\\r\\n|---|---|\\r\\n|PipelineScheduler|27|\\r\\n|PipelineScheduler|27|\\r\\n|PipelineScheduler|27|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/parsewhereoperator\",\"parsewhereoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"Partition\",\"The partition operator partitions the records of its input table into multiple subtables according to values in a key column, runs a subquery on each subtable, and produces a single output table that is the union of the results of all subqueries. This operator is useful when you need to perform a subquery only on a subset of rows that belongs to the same partition key, and not query the whole dataset. These subqueries could include aggregate functions, window functions, top N and others.\",\"The partition operator supports several strategies of subquery operation: \\r\\n\\r\\n* [Native](#native-strategy) - use with an implicit data source with thousands of key partition values.\\r\\n* [Shuffle](#shuffle-strategy) - use with an implicit source with millions of key partition values.\\r\\n* [Legacy](#legacy-strategy) - use with an implicit or explicit source for 64 or less key partition values.\\r\\n\\r\\n## Native strategy\\r\\n\\r\\nThis subquery is a tabular transformation that doesn't specify a tabular source. The source is implicit and is assigned according to the subtable partitions. It should be applied when the number of distinct values of the partition key isn't large, roughly in the thousand. Use `hint.strategy=native` for this strategy. There's no restriction on the number of partitions.\\r\\n\\r\\n## Shuffle strategy\\r\\n\\r\\nThis subquery is a tabular transformation that doesn't specify a tabular source. The source is implicit and will be assigned according to the subtable partitions. The strategy applies when the number of distinct values of the partition key is large, in the millions. Use `hint.strategy=shuffle` for this strategy. There's no restriction on the number of partitions. For more information about shuffle strategy and performance, see [shuffle](shufflequery.md).\\r\\n\\r\\n## Native and shuffle strategy operators\\r\\n\\r\\nThe difference between `hint.strategy=native` and `hint.strategy=shuffle` is mainly to allow the caller to indicate the cardinality and execution strategy of the subquery, and can affect the execution time. There's no other semantic difference\\r\\nbetween the two.\\r\\n\\r\\nFor `native` and `shuffle` strategy, the source of the subquery is implicit, and can't be referenced by the subquery. This strategy supports a limited set of operators: `project`, `sort`, `summarize`, `take`, `top`, `order`, `mv-expand`, `mv-apply`, `make-series`, `limit`, `extend`, `distinct`, `count`, `project-away`, `project-keep`, `project-rename`, `project-reorder`, `parse`, `parse-where`, `reduce`, `sample`, `sample-distinct`, `scan`, `search`, `serialize`, `top-nested`, `top-hitters` and `where`.\\r\\n\\r\\nOperators like `join`, `union`, `external_data`, `plugins`, or any other operator that involves table source that isn't the subtable partitions, aren't allowed.\\r\\n\\r\\n## Legacy strategy\\r\\n\\r\\nLegacy subqueries can use the following sources:\\r\\n\\r\\n* Implicit - The source is a tabular transformation that doesn't specify a tabular source. The source is implicit and will be assigned according to the subtable partitions. This scenario applies when there are 64 or less key values. \\r\\n* Explicit - The subquery must include a tabular source explicitly. Only the key column of the input table is available in the subquery, and referenced by using its name in the `toscalar()` function.\\r\\n\\r\\nFor both implicit and explicit sources, the subquery type is used for legacy purposes only, and indicated by the use of `hint.strategy=legacy`, or by not including any strategy indication. \\r\\n\\r\\nAny other reference to the source is taken to mean the entire input table, for example, by using the [as operator](asoperator.md) and calling up the value again.\\r\\n\\r\\n> [!NOTE]\\r\\n> It is recommended to use the native or shuffle strategies rather than the legacy strategy, since the legacy strategy is limited to 64 partitions and is less efficient.\\r\\n> The legacy partition operator is currently limited by the number of partitions.\\r\\n> The operator will yield an error if the partition column (*Column*) has more than 64 distinct values.\\r\\n\\r\\n## All strategies\\r\\n\\r\\nFor native, shuffle and legacy subqueries, the result must be a single tabular result. Multiple tabular results and the use of the `fork` operator aren't supported. A subquery can't include other statements, for example, it can't have a `let` statement.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `partition` [`hint.strategy=` *strategy*] [*PartitionParameters*] `by` *Column* `(` *TransformationSubQuery* `)`\\r\\n\\r\\n*T* `|` `partition` [*PartitionParameters*] `by` *Column* `{` *ContextFreeSubQuery* `}`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T*: The tabular source whose data is to be processed by the operator.\\r\\n* *strategy*: The partition strategy, `native`, `shuffle` or `legacy`. `native` strategy is used with an implicit source with thousands of key partition values. `shuffle` strategy is used with an implicit source with millions of key partition values. `legacy` strategy is used with an explicit or implicit source with 64 or less key partition values. \\r\\n* *Column*: The name of a column in *T* whose values determine how the input table   is to be partitioned. See **Notes** below.\\r\\n* *TransformationSubQuery*: A tabular transformation expression, whose source is implicitly the subtables produced by partitioning the records of *T*, each subtable being homogenous on the value of *Column*.\\r\\n* *ContextFreeSubQuery*: A tabular expression that includes its own tabular source, such as a table reference. The expression can reference a single column from *T*, being the key column *Column* using the syntax `toscalar(`*Column*`)`.\\r\\n* *PartitionParameters*: Zero or more (space-separated) parameters in the form of: <br>\\r\\n  *HintName* `=` *Value* that control the behavior of the operator. The following hints are supported:\\r\\n  |HintName               |Values         |Description|Native/Shuffle/Legacy strategy|\\r\\n  |-------------------|---------------|-----------|----------|\\r\\n  |`hint.strategy`|`legacy`, `shuffle`, `native`|Defines the execution strategy of the partition operator.|Native, Shuffle, Legacy|\\r\\n  |`hint.shufflekey`|the partition key|Runs the partition operator in shuffle strategy where the shuffle key is the specified partition key.|Shuffle|\\r\\n  |`hint.materialized`|`true`,`false` |If set to `true`, will materialize the source of the `partition` operator. The default value is `false`. |Legacy|\\r\\n  |`hint.concurrency`|*Number*|Hints the system how many partitions to run in parallel. The default value is 16.|Legacy|\\r\\n  |`hint.spread`|*Number*|Hints the system how to distribute the partitions among cluster nodes. For example, if there are N partitions and the spread hint is set to P, then the N partitions will be processed by P different cluster nodes equally in parallel/sequentially depending on the concurrency hint. The default value is 1.|Legacy|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe operator returns a union of the results of the individual subqueries.\",\"### Native strategy examples\\r\\n\\r\\nUse `hint.strategy=native` for this strategy. See the following examples:\\r\\n\\r\\nThis query returns foreach InjuriesDirect, the count of events and total injuries in each State that starts with 'W'.\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| where State startswith 'W'\\r\\n| partition hint.strategy=native by InjuriesDirect (summarize Events=count(), Injuries=sum(InjuriesDirect) by State);\\r\\n```\\r\\n\\r\\n**Output** \\r\\n\\r\\n|State|Events|Injuries|\\r\\n|---|---|---|\\r\\n|WISCONSIN|4|4|\\r\\n|WYOMING|5|5|\\r\\n|WEST VIRGINIA|1|1|\\r\\n|WASHINGTON|2|2|\\r\\n|WEST VIRGINIA|756|0|\\r\\n|WYOMING|390|0|\\r\\n|WASHINGTON|256|0|\\r\\n|WISCONSIN|1845|0|\\r\\n|WYOMING|1|4|\\r\\n|WASHINGTON|1|5|\\r\\n|WISCONSIN|1|2|\\r\\n|WASHINGTON|1|2|\\r\\n|WASHINGTON|1|10|\\r\\n\\r\\nThis query returns the top 1 EventType by total injuries for each State that starts with 'W':\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| where State startswith 'W'\\r\\n| partition hint.strategy = native by State\\r\\n(\\r\\n    summarize TotalInjueries = sum(InjuriesDirect) by EventType\\r\\n    | top 2 by TotalInjueries\\r\\n)\\r\\n```\\r\\n\\r\\n**Output** \\r\\n\\r\\n|EventType|TotalInjueries|\\r\\n|---|---|\\r\\n|Tornado|4|\\r\\n|Hail|1|\\r\\n|Thunderstorm Wind|1|\\r\\n|Excessive Heat|0|\\r\\n|High Wind|13|\\r\\n|Lightning|5|\\r\\n|High Wind|5|\\r\\n|Avalanche|3|\\r\\n\\r\\n### Shuffle strategy example\\r\\n\\r\\nUse `hint.strategy=shuffle` for this strategy. See the following example:\\r\\n\\r\\nThis query will return the top 3 DamagedProperty foreach EpisodeId, it returns also the columns EpisodeId and State.\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| partition hint.strategy=shuffle by EpisodeId\\r\\n(\\r\\n    top 3 by DamageProperty\\r\\n    | project EpisodeId, State, DamageProperty\\r\\n)\\r\\n| count\\r\\n```\\r\\n\\r\\n**Output** \\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|22345|\\r\\n\\r\\n### Legacy strategy with explicit source\\r\\n\\r\\nThis strategy is for legacy purposes only, and indicated by the use of `hint.strategy=legacy` or by not including a strategy indication at all. See the following example:\\r\\n\\r\\nThis query will run two subqueries:\\r\\n\\r\\n* When x == 1, the query will return all rows from StormEvents that has InjuriesIndirect == 1.\\r\\n* When x == 2, the query will return all rows from StormEvents that has InjuriesIndirect == 2.\\r\\n\\r\\n\\r\\nthe final result is the union of these 2 subqueries.\\r\\n\\r\\n```\\r\\nrange x from 1 to 2 step 1\\r\\n| partition hint.strategy=legacy by x { StormEvents | where x == InjuriesIndirect}\\r\\n| count \\r\\n```\\r\\n\\r\\n**Output** \\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|113|\\r\\n\\r\\n### Partition operator\\r\\n\\r\\nIn some cases, it's more performant and easier to write a query using the `partition` operator than using the [`top-nested` operator](topnestedoperator.md). The following example runs a subquery calculating `summarize` and `top` for each of States starting with `W`: (WYOMING, WASHINGTON, WEST VIRGINIA, WISCONSIN)\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| where State startswith 'W'\\r\\n| partition hint.strategy=native by State \\r\\n(\\r\\n    summarize Events=count(), Injuries=sum(InjuriesDirect) by EventType, State\\r\\n    | top 3 by Events \\r\\n) \\r\\n```\\r\\n\\r\\n**Output** \\r\\n\\r\\n|EventType|State|Events|Injuries|\\r\\n|---|---|---|---|\\r\\n|Hail|WYOMING|108|0|\\r\\n|High Wind|WYOMING|81|5|\\r\\n|Winter Storm|WYOMING|72|0|\\r\\n|Heavy Snow|WASHINGTON|82|0|\\r\\n|High Wind|WASHINGTON|58|13|\\r\\n|Wildfire|WASHINGTON|29|0|\\r\\n|Thunderstorm Wind|WEST VIRGINIA|180|1|\\r\\n|Hail|WEST VIRGINIA|103|0|\\r\\n|Winter Weather|WEST VIRGINIA|88|0|\\r\\n|Thunderstorm Wind|WISCONSIN|416|1|\\r\\n|Winter Storm|WISCONSIN|310|0|\\r\\n|Hail|WISCONSIN|303|1|\\r\\n\\r\\n### Partition reference\\r\\n\\r\\nThe following example shows how to use the [as operator](asoperator.md) to give a \\\"name\\\" to each data partition and then reuse that name within the subquery. This approach is only relevant to the legacy strategy.\\r\\n\\r\\n```\\r\\nT\\r\\n| partition by Dim\\r\\n(\\r\\n    as Partition\\r\\n    | extend MetricPct = Metric * 100.0 / toscalar(Partition | summarize sum(Metric))\\r\\n)\\r\\n```\\r\\n\\r\\n---\\r\\n\\r\\n> [!IMPORTANT]\\r\\n> The content below is Microsoft confidential(not available in the [public site](https://docs.microsoft.com/en-us/azure/data-explorer/))\\r\\n\\r\\n# partition operator - Internal\\r\\n\\r\\n## Limitless partitions (preview)\\r\\n\\r\\nThe partition operator now supports (in preview mode) \\\"limitless\\\" partitions.\\r\\nThis alternative implementation lifts the limit on the number of partitions\\r\\nthat the operator can process, and performs better in all scenarios.\\r\\n\\r\\nTo enable this alternative implementation, add the following to the list of\\r\\nthe operator's *PartitionParamteres*:\\r\\n\\r\\n`hint.strategy` `=` `native`\\r\\n\\r\\nFor example, the following query will return the two highest mountains in each continent:\\r\\n\\r\\n```kusto\\r\\ndatatable (Name:string, Summit:long, Continent:string)\\r\\n[\\r\\n  // Asia\\r\\n  'Everest', 8848, 'Asia',\\r\\n  'K2', 8611, 'Asia',\\r\\n  'Kangchenjunga', 8586, 'Asia',\\r\\n  // Europe\\r\\n  'Elbrus', 5642, 'Europe',\\r\\n  'Dykh-Tau', 5205, 'Europe',\\r\\n  'Shkhara', 5201, 'Europe'\\r\\n  // Etc..\\r\\n]\\r\\n| partition hint.strategy=native by Continent\\r\\n  (top 2 by Summit desc)\\r\\n```\\r\\n\\r\\n|Name|Summit|Continent|\\r\\n|---|---|---|\\r\\n|Everest|8848|Asia|\\r\\n|K2|8611|Asia|\\r\\n|Elbrus|5642|Europe|\\r\\n|Dykh-Tau|5205|Europe|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/partitionoperator\",\"partitionoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"percentile\",\"Calculates an estimate for the specified [nearest-rank percentile](#nearest-rank-percentile) of the population defined by `*Expr*`.\\r\\nThe accuracy depends on the density of population in the region of the percentile.\",'[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n* `percentiles()` is like `percentile()`, but calculates a number of percentile values, which is faster than calculating each percentile individually.\\r\\n* `percentilesw()` is like `percentilew()`, but calculates a number of weighted percentile values, which is faster than calculating each percentile individually.\\r\\n* `percentilew()` and `percentilesw()` let you calculate weighted percentiles. Weighted percentiles calculate the given percentiles in a \"weighted\" way, by treating each value as if it was repeated `weight` times, in the input.\\r\\n\\r\\nTo add a percentage calculation to your results, see the [percentages example](tutorial.md#percentages).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`percentile` `(`*Expr*`,` *Percentile*`)`\\r\\n\\r\\n`percentiles` `(`*Expr*`,` *Percentile1* [`,` *Percentile2*]`)`\\r\\n\\r\\n`percentiles_array` `(`*Expr*`,` *Percentile1* [`,` *Percentile2*]`)`\\r\\n\\r\\n`percentiles_array` `(`*Expr*`,` *Dynamic array*`)`\\r\\n\\r\\n`percentilew` `(`*Expr*`,` *WeightExpr*`,` *Percentile*`)`\\r\\n\\r\\n`percentilesw` `(`*Expr*`,` *WeightExpr*`,` *Percentile1* [`,` *Percentile2*]`)`\\r\\n\\r\\n`percentilesw_array` `(`*Expr*`,` *WeightExpr*`,` *Percentile1* [`,` *Percentile2*]`)`\\r\\n\\r\\n`percentilesw_array` `(`*Expr*`,` *WeightExpr*`,` *Dynamic array*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*Expr* | string | &check; | Expression that will be used for aggregation calculation.|\\r\\n|*WeightExpr*| string | &check; | Expression that will be used as the weight of values for aggregation calculation.|\\r\\n|*Percentile*| double | &check;| A constant that specifies the percentile.|\\r\\n|*Dynamic array* | dynamic | &check; | A list of percentiles in a dynamic array of integers or floating point numbers.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns an estimate for `*Expr*` of the specified percentiles in the group.','**Example 1**\\r\\n\\r\\nThe following example shows the value of `DamageProperty` being larger than 95% of the sample set and smaller than 5% of the sample set.\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSspVqhRKC7NzU0syqxKVShILUoGCmbmpGq4JOYmpqcGFOUDxUoqdRQsTTUVkioVgksSS1IBgwSa1j8AAAA=)**\\\\]**\\r\\n\\r\\n```\\r\\nStormEvents | summarize percentile(DamageProperty, 95) by State\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\nThe results table shown includes only the first 10 rows.\\r\\n\\r\\n| State | percentile_DamageProperty_95 |\\r\\n|--|--|\\r\\n| ATLANTIC SOUTH | 0 |\\r\\n| FLORIDA | 40000 |\\r\\n| GEORGIA | 143333 |\\r\\n| MISSISSIPPI | 80000 |\\r\\n| AMERICAN SAMOA | 250000 |\\r\\n| KENTUCKY | 35000 |\\r\\n| OHIO | 150000 |\\r\\n| KANSAS | 51392 |\\r\\n| MICHIGAN | 49167 |\\r\\n| ALABAMA | 50000 |\\r\\n\\r\\n**Example 2**\\r\\n\\r\\nThe following example shows the value of `DamageProperty` simultaneously calculated using 5, 50 (median) and 95.\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSspVqhRKC7NzU0syqxKVShILUoGCmbmpBZruCTmJqanBhTlAwVLKnUUTIHIQEfB0lRTIalSIbgksSQVAL6yeg1HAAAA)**\\\\]**\\r\\n\\r\\n```\\r\\nStormEvents | summarize percentiles(DamageProperty, 5, 50, 95) by State\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\nThe results table shown includes only the first 10 rows.\\r\\n\\r\\n| State | percentile_DamageProperty_5 | percentile_DamageProperty_50 | percentile_DamageProperty_95 |\\r\\n|--|--|--|--|\\r\\n| ATLANTIC SOUTH | 0 | 0 | 0 |\\r\\n| FLORIDA | 0 | 0 | 40000 |\\r\\n| GEORGIA | 0 | 0 | 143333 |\\r\\n| MISSISSIPPI | 0 | 0 | 80000 |\\r\\n| AMERICAN SAMOA | 0 | 0 | 250000 |\\r\\n| KENTUCKY | 0 | 0 | 35000 |\\r\\n| OHIO | 0 | 2000 | 150000 |\\r\\n| KANSAS | 0 | 0 | 51392 |\\r\\n| MICHIGAN | 0 | 0 | 49167 |\\r\\n| ALABAMA | 0 | 0 | 50000 |\\r\\n|...|...|\\r\\n\\r\\n## Weighted percentiles\\r\\n\\r\\nAssume you repetitively measure the time (Duration) it takes an action to complete. Instead of recording every value of the measurement, you record each value of Duration, rounded to 100 msec, and how many times the rounded value appeared (BucketSize).\\r\\n\\r\\nUse `summarize percentilesw(Duration, BucketSize, ...)` to calculate the given\\r\\npercentiles in a \"weighted\" way. Treat each value of Duration as if it was repeated\\r\\nBucketSize times in the input, without actually needing to materialize those records.\\r\\n\\r\\n## Example\\r\\n\\r\\nThe following example shows weighted percentiles.\\r\\nUsing the following set of latency values in milliseconds:\\r\\n`{ 1, 1, 2, 2, 2, 5, 7, 7, 12, 12, 15, 15, 15, 18, 21, 22, 26, 35 }`.\\r\\n\\r\\nTo reduce bandwidth and storage, do pre-aggregation to the\\r\\nfollowing buckets: `{ 10, 20, 30, 40, 50, 100 }`. Count the number of events in each bucket to produce the following table:\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA8tJLVHISSxJzUuuDElMyklVsFVISSwBQhBbIyi10Dm/NK/EKic/L11HwQei0Kk0OTsVIqapwBWtwKUABBY6CoYGOhC2mY6CEYxtrKNgDGMb6iiYGChwxVpzIVsJAGDD8KqDAAAA)**\\\\]**\\r\\n\\r\\n```\\r\\nlet latencyTable = datatable (ReqCount:long, LatencyBucket:long) \\r\\n[ \\r\\n    8, 10, \\r\\n    6, 20, \\r\\n    3, 30, \\r\\n    1, 40 \\r\\n];\\r\\nlatencyTable\\r\\n```\\r\\n\\r\\nThe table displays:\\r\\n\\r\\n* Eight events in the 10-ms bucket (corresponding to subset `{ 1, 1, 2, 2, 2, 5, 7, 7 }`)\\r\\n* Six events in the 20-ms bucket (corresponding to subset `{ 12, 12, 15, 15, 15, 18 }`)\\r\\n* Three events in the 30-ms bucket (corresponding to subset `{ 21, 22, 26 }`)\\r\\n* One event  in the 40-ms bucket (corresponding to subset `{ 35 }`)\\r\\n\\r\\n\\r\\nAt this point, the original data is no longer available. Only the number of events in each bucket. To compute percentiles from this data, use the `percentilesw()` function.\\r\\nFor the 50, 75, and 99.9 percentiles, use the following query:\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA1WOMQvCMBCF9/yKN7ZwSGutGsVFVydxE4cYDymmqbYJovjjjYSA3i0fj8d9Z9jBKMdWP/fqZBgrnJUL++Vsx/dN561bmM5eCNtYXHt95ZjlEAcIhJkTyoIiTwnjxBWhSlwSJgXEcSl+leKNwbet6psX48a9Zusaw8Mj+/MR0jeEOlyc1QQpRzL/AMC/VMrDAAAA)**\\\\]**\\r\\n\\r\\n```\\r\\nlet latencyTable = datatable (ReqCount:long, LatencyBucket:long) \\r\\n[ \\r\\n    8, 10, \\r\\n    6, 20, \\r\\n    3, 30, \\r\\n    1, 40 \\r\\n];\\r\\nlatencyTable\\r\\n| summarize percentilesw(LatencyBucket, ReqCount, 50, 75, 99.9)\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n| percentile_LatencyBucket_50 | percentile_LatencyBucket_75 | percentile_LatencyBucket_99_9 |\\r\\n|--|--|--|\\r\\n| 20 | 20 | 40 |\\r\\n\\r\\n## Getting multiple percentiles in an array\\r\\n\\r\\nMultiple percentiles can be obtained as an array in a single dynamic column, instead of in multiple columns.\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/SampleIoTData?query=H4sIAAAAAAAAAwspSswrTssvyk1NCU7NK84vKnZJLEnk5apRKC7NzU0syqxKVShILUpOzSvJzEktjk8sKkqs1AhLzClN1VEw1VEwAmJTAx0FcyBtaaqpo5BYlg6R1lRIqlSAmOmXmJsKANY0tLFpAAAA)**\\\\]**\\r\\n\\r\\n```\\r\\nTransformedSensorsData\\r\\n| summarize percentiles_array(Value, 5, 25, 50, 75, 95), avg(Value) by SensorName\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\nThe results table displays only the first 10 rows.\\r\\n\\r\\n|SensorName|percentiles_Value|avg_Value |\\r\\n|--|--|--|\\r\\n|sensor-82|[\"0.048141473520867069\",\"0.24407515500271132\",\"0.48974511106780577\",\"0.74160998970950343\",\"0.94587903204190071\"]|0.493950914|\\r\\n|sensor-130|[\"0.049200214398937764\",\"0.25735850440187535\",\"0.51206374010048239\",\"0.74182335059053839\",\"0.95210342463616771\"]|0.505111463|\\r\\n|sensor-56|[\"0.04857779335488676\",\"0.24709868149337144\",\"0.49668762923789589\",\"0.74458470404241883\",\"0.94889104840865857\"]|0.497955018|\\r\\n|sensor-24|[\"0.051507199150534679\",\"0.24803904945640423\",\"0.50397070213183581\",\"0.75653888126010793\",\"0.9518782718727431\"]|0.501084379|\\r\\n|sensor-47|[\"0.045991246974755672\",\"0.24644331118208851\",\"0.48089197707088743\",\"0.74475142784472248\",\"0.9518322864959039\"]|0.49386228|\\r\\n|sensor-135|[\"0.05132897529660399\",\"0.24204987641954018\",\"0.48470113942206461\",\"0.74275730068433621\",\"0.94784079559229406\"]|0.494817619|\\r\\n|sensor-74|[\"0.048914714739047828\",\"0.25160926036445724\",\"0.49832498850160978\",\"0.75257887767110776\",\"0.94932261924236094\"]|0.501627252|\\r\\n|sensor-173|[\"0.048333149363009836\",\"0.26084250046756496\",\"0.51288012531934613\",\"0.74964772791583412\",\"0.95156058795294\"]|0.505401226|\\r\\n|sensor-28|[\"0.048511161184567046\",\"0.2547387968731824\",\"0.50101318228599656\",\"0.75693845702682039\",\"0.95243122486483989\"]|0.502066244|\\r\\n|sensor-34|[\"0.049980293859462954\",\"0.25094722564949412\",\"0.50914023067384762\",\"0.75571549713447961\",\"0.95176564809278674\"]|0.504309494|\\r\\n|...|...|...|\\r\\n\\r\\nSimilarly, weighted percentiles can be returned as a dynamic array using `percentilesw_array`.\\r\\n\\r\\nPercentiles for `percentiles_array` and `percentilesw_array` can be specified in a dynamic array of integer or floating-point numbers. The array must be constant but doesn\\'t have to be literal.\\r\\n\\r\\n```\\r\\nCallDetailRecords \\r\\n| summarize percentiles_array(Duration, dynamic([5, 25, 50, 75, 95])), avg(Duration)\\r\\n```\\r\\n\\r\\n```\\r\\nTransformedSensorsData\\r\\n| summarize percentiles_array(Value, range(0, 100, 5)), avg(Value) by SensorName\\r\\n```\\r\\n\\r\\n## Nearest-rank percentile\\r\\n\\r\\n*P*-th percentile (0 < *P* <= 100) of a list of ordered values, sorted from least to greatest, is the smallest value in the list. The *P* percent of the data is less or equal to *P*-th percentile value ([from Wikipedia article on percentiles](https://en.wikipedia.org/wiki/Percentile#The_Nearest_Rank_method)).\\r\\n\\r\\nDefine *0*-th percentiles to be the smallest member of the population.\\r\\n\\r\\n>[!NOTE]\\r\\n> Given the approximating nature of the calculation, the actual returned value may not be a member of the population.\\r\\n> Nearest-rank definition means that *P*=50 does not conform to the [interpolative definition of the median](https://en.wikipedia.org/wiki/Median). When evaluating the significance of this discrepancy for the specific application, the size of the population and an [estimation error](#estimation-error-in-percentiles) should be taken into account.\\r\\n\\r\\n## Estimation error in percentiles\\r\\n\\r\\nThe percentiles aggregate provides an approximate value using [T-Digest](https://github.com/tdunning/t-digest/blob/master/docs/t-digest-paper/histo.pdf).\\r\\n\\r\\n>[!NOTE]\\r\\n>\\r\\n> * The bounds on the estimation error vary with the value of the requested percentile. The best accuracy is at both ends of the [0..100] scale. Percentiles 0 and 100 are the exact minimum and maximum values of the distribution. The accuracy gradually decreases towards the middle of the scale. It\\'s worst at the median and is capped at 1%.\\r\\n> * Error bounds are observed on the rank, not on the value. Suppose percentile(X, 50) returned a value of Xm. The estimate guarantees that at least 49% and at most 51% of the values of X are less or equal to Xm. There is no theoretical limit on the difference between Xm and the actual median value of X.\\r\\n> * The estimation may sometimes result in a precise value but there are no reliable conditions to define when it will be the case.',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/percentiles-aggfunction\",\"percentiles-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"percentile_array_tdigest\",\"Calculates the percentile result from the `tdigest` results (which was generated by [tdigest()](tdigest-aggfunction.md) or [tdigest_merge()](tdigest-merge-aggfunction.md))\",\"## Syntax\\r\\n\\r\\n`percentiles_array_tdigest(`*`Expr`*`,` *Percentile1* [`,` *Percentile2*] ...[`,` *PercentileN*]`)`\\r\\n\\r\\n`percentiles_array_tdigest(`*`Expr`*`,` *Dynamic array*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *Expr*: Expression that was generated by [`tdigest`](tdigest-aggfunction.md) or [tdigest_merge()](tdigest-merge-aggfunction.md).\\r\\n* *Percentile* is a double constant that specifies the percentile.\\r\\n* *Dynamic array*: list of percentiles in a dynamic array of integer or floating point numbers.\\r\\n* *typeLiteral*: An optional type literal (for example, `typeof(long)`). If provided, the result set will be of this type. \\r\\n\\r\\n## Returns\\r\\n\\r\\nThe percentile/percentiles value of each value in *`Expr`*.\\r\\n\\r\\n**Tips**\\r\\n\\r\\n* The function must receive at least one percent (and maybe more, see the syntax above: *Percentile1* [`,` *Percentile2*] ...[`,` *PercentileN*]) and the result will be\\r\\n  a dynamic array that includes the results. (such like [`percentiles()`](percentiles-aggfunction.md))\\r\\n  \\r\\n* If only one percent was provided, and the type was provided also, then the result will be a column of the same type provided with the results of that percent. In this case, all `tdigest` functions must be of that type.\\r\\n* If *`Expr`* includes `tdigest` functions of different types, don't provide the type. The result will be of type dynamic. See below examples.\",\"```\\r\\nStormEvents\\r\\n| summarize tdigestRes = tdigest(DamageProperty) by State\\r\\n| project percentiles_array_tdigest(tdigestRes, range(0, 100, 50), typeof(int))\\r\\n```\\r\\n\\r\\n|percentile_tdigest_tdigestRes|\\r\\n|---|\\r\\n|[0,0,0]|\\r\\n|[0,0,62000000]|\\r\\n|[0,0,110000000]|\\r\\n|[0,0,1200000]|\\r\\n|[0,0,250000]|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/percentile-array-tdigestfunction\",\"percentile-array-tdigestfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"percentile_tdigest\",\"Calculates the percentile result from the `tdigest` results (which was generated by [tdigest()](tdigest-aggfunction.md) or [tdigest_merge()](tdigest-merge-aggfunction.md))\",\"## Syntax\\r\\n\\r\\n`percentile_tdigest(`*`Expr`*`,` *Percentile1* `,` *typeLiteral*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *Expr*: Expression that was generated by [`tdigest`](tdigest-aggfunction.md) or [tdigest_merge()](tdigest-merge-aggfunction.md).\\r\\n* *Percentile* is a double constant that specifies the percentile.\\r\\n* *typeLiteral*: An optional type literal (for example, `typeof(long)`). If provided, the result set will be of this type. \\r\\n\\r\\n## Returns\\r\\n\\r\\nThe percentile value of each value in *`Expr`*.\\r\\n\\r\\n**Tips**\\r\\n\\r\\n* If the type was provided, the result will be a column of the same type provided with the results of the percentile. In this case, all `tdigest` functions must be of that type.\\r\\n* If *`Expr`* includes `tdigest` functions of different types, don't provide the type. The result will be of type dynamic. See below examples.\",'```\\r\\nStormEvents\\r\\n| summarize tdigestRes = tdigest(DamageProperty) by State\\r\\n| project percentile_tdigest(tdigestRes, 100, typeof(int))\\r\\n```\\r\\n\\r\\n|percentile_tdigest_tdigestRes|\\r\\n|---|\\r\\n|0|\\r\\n|62000000|\\r\\n|110000000|\\r\\n|1200000|\\r\\n|250000|\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize tdigestRes = tdigest(DamageProperty) by State\\r\\n| union (StormEvents | summarize tdigestRes = tdigest(EndTime) by State)\\r\\n| project percentile_tdigest(tdigestRes, 100)\\r\\n```\\r\\n\\r\\n|percentile_tdigest_tdigestRes|\\r\\n|---|\\r\\n|[0]|\\r\\n|[62000000]|\\r\\n|[\"2007-12-20T11:30:00.0000000Z\"]|\\r\\n|[\"2007-12-31T23:59:00.0000000Z\"]|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/percentile-tdigestfunction\",\"percentile-tdigestfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"percentrank_tdigest\",\"Calculates the approximate rank of the value in a set, where rank is expressed as a percentage of the set's size.\\r\\nThis function can be viewed as the inverse of the percentile.\",\"## Syntax\\r\\n\\r\\n`percentrank_tdigest(`*TDigest*`,` *Expr*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *TDigest*: Expression that was generated by [tdigest()](tdigest-aggfunction.md) or [tdigest_merge()](tdigest-merge-aggfunction.md).\\r\\n* *Expr*: Expression representing a value to be used for percentage ranking calculation.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe percentage rank of value in a dataset.\\r\\n\\r\\n**Tips**\\r\\n\\r\\n1) The type of second parameter and the type of the elements in the `tdigest` should be the same.\\r\\n2) First parameter should be TDigest that was generated by [tdigest()](tdigest-aggfunction.md) or [tdigest_merge()](tdigest-merge-aggfunction.md)\",\"Getting the percentrank_tdigest() of the damage property that valued 4490$ is ~85%:\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize tdigestRes = tdigest(DamageProperty)\\r\\n| project percentrank_tdigest(tdigestRes, 4490)\\r\\n\\r\\n```\\r\\n\\r\\n|Column1|\\r\\n|---|\\r\\n|85.0015237192293|\\r\\n\\r\\nUsing percentile 85 over the damage property should give 4490$:\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize tdigestRes = tdigest(DamageProperty)\\r\\n| project percentile_tdigest(tdigestRes, 85, typeof(long))\\r\\n\\r\\n```\\r\\n\\r\\n|percentile_tdigest_tdigestRes|\\r\\n|---|\\r\\n|4490|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/percentrank-tdigestfunction\",\"percentrank-tdigestfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"pi\",\"Returns the constant value of Pi.\",\"## Syntax\\r\\n\\r\\n`pi()`\\r\\n\\r\\n## Returns\\r\\n\\r\\n* The double value of Pi (3.1415926...)\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/pifunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"pivot\",\"Rotates a table by turning the unique values from one column in the input table into multiple columns in the output table and performs aggregations as required on any remaining column values that will appear in the final output.\",\"```\\r\\nT | evaluate pivot(PivotColumn)\\r\\n```\\r\\n\\r\\n> [!NOTE]\\r\\n> If the OutputSchema is not specified, the output schema of the `pivot` plugin is based on the input data. Therefore, multiple executions of the plugin using different data inputs, may produce different output schema. This also means that the query that is referencing unpacked columns may become 'broken' at any time. For this reason, we do not recommend using this plugin for automation jobs without specifying the OutputSchema function.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`T | evaluate pivot(`*pivotColumn*`[, `*aggregationFunction*`] [,`*column1* `[,`*column2* ... `]])` [`:` *OutputSchema*]\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required| Description |\\r\\n|---|---|---|---|\\r\\n| *pivotColumn* | string | &check; | The column to rotate. Each unique value from this column will be a column in the output table.|\\r\\n| *aggregationFunction* | aggregation function |  | Aggregates multiple rows in the input table to a single row in the output table. Currently supported functions: `min()`, `max()`, `take_any()`, `sum()`, `dcount()`, `avg()`, `stdev()`, `variance()`, `make_list()`, `make_bag()`, `make_set()`, `count()` (default is `count()`). |\\r\\n| *column1*, *column2*, ... | string | | Column names. The output table will contain an additional column per each specified column. Default: all columns other than the pivoted column and the aggregation column. |\\r\\n| *OutputSchema* | | | The names and types for the expected columns of the `pivot` plugin output.<br /><br />**Syntax**: `(` *ColumnName* `:` *ColumnType* [`,` ...] `)`<br /><br />Specifying the expected schema optimizes query execution by not having to first run the actual query to explore the schema. An error is raised if the run-time schema doesn't match the *OutputSchema* schema. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nPivot returns the rotated table with specified columns (*column1*, *column2*, ...) plus all unique values of the pivot columns. Each cell for the pivoted columns will contain the aggregate function computation.\",'### Pivot by a column\\r\\n\\r\\nFor each EventType and State starting with \\'AL\\', count the number of events of this type in this state.\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| project State, EventType\\r\\n| where State startswith \"AL\"\\r\\n| where EventType has \"Wind\"\\r\\n| evaluate pivot(State)\\r\\n```\\r\\n\\r\\n|EventType|ALABAMA|ALASKA|\\r\\n|---|---|---|\\r\\n|Thunderstorm Wind|352|1|\\r\\n|High Wind|0|95|\\r\\n|Extreme Cold/Wind Chill|0|10|\\r\\n|Strong Wind|22|0|\\r\\n\\r\\n### Pivot by a column with aggregation function\\r\\n\\r\\nFor each EventType and State starting with \\'AR\\', display the total number of direct deaths.\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| where State startswith \"AR\"\\r\\n| project State, EventType, DeathsDirect\\r\\n| where DeathsDirect > 0\\r\\n| evaluate pivot(State, sum(DeathsDirect))\\r\\n```\\r\\n\\r\\n|EventType|ARKANSAS|ARIZONA|\\r\\n|---|---|---|\\r\\n|Heavy Rain|1|0|\\r\\n|Thunderstorm Wind|1|0|\\r\\n|Lightning|0|1|\\r\\n|Flash Flood|0|6|\\r\\n|Strong Wind|1|0|\\r\\n|Heat|3|0|\\r\\n\\r\\n### Pivot by a column with aggregation function and a single additional column\\r\\n\\r\\nResult is identical to previous example.\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| where State startswith \"AR\"\\r\\n| project State, EventType, DeathsDirect\\r\\n| where DeathsDirect > 0\\r\\n| evaluate pivot(State, sum(DeathsDirect), EventType)\\r\\n```\\r\\n\\r\\n|EventType|ARKANSAS|ARIZONA|\\r\\n|---|---|---|\\r\\n|Heavy Rain|1|0|\\r\\n|Thunderstorm Wind|1|0|\\r\\n|Lightning|0|1|\\r\\n|Flash Flood|0|6|\\r\\n|Strong Wind|1|0|\\r\\n|Heat|3|0|\\r\\n\\r\\n### Specify the pivoted column, aggregation function, and multiple additional columns\\r\\n\\r\\nFor each event type, source, and state, sum the number of direct deaths.\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| where State startswith \"AR\"\\r\\n| where DeathsDirect > 0\\r\\n| evaluate pivot(State, sum(DeathsDirect), EventType, Source)\\r\\n```\\r\\n\\r\\n|EventType|Source|ARKANSAS|ARIZONA|\\r\\n|---|---|---|---|\\r\\n|Heavy Rain|Emergency Manager|1|0|\\r\\n|Thunderstorm Wind|Emergency Manager|1|0|\\r\\n|Lightning|Newspaper|0|1|\\r\\n|Flash Flood|Trained Spotter|0|2|\\r\\n|Flash Flood|Broadcast Media|0|3|\\r\\n|Flash Flood|Newspaper|0|1|\\r\\n|Strong Wind|Law Enforcement|1|0|\\r\\n|Heat|Newspaper|3|0|\\r\\n\\r\\n### Pivot with a query-defined output schema\\r\\n\\r\\nThe following example selects specific columns in the StormEvents table.\\r\\nIt uses an explicit schema definition that allows various optimizations to be evaluated before running the actual query.\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| project State, EventType\\r\\n| where EventType has \"Wind\"\\r\\n| evaluate pivot(State): (EventType:string, ALABAMA:long, ALASKA:long)\\r\\n```\\r\\n\\r\\n|EventType|ALABAMA|ALASKA|\\r\\n|---|---|---|\\r\\n|Thunderstorm Wind|352|1|\\r\\n|High Wind|0|95|\\r\\n|Marine Thunderstorm Wind|0|0|\\r\\n|Strong Wind|22|0|\\r\\n|Extreme Cold/Wind Chill|0|10|\\r\\n|Cold/Wind Chill|0|0|\\r\\n|Marine Strong Wind|0|0|\\r\\n|Marine High Wind|0|0|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/pivotplugin\",\"pivotplugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"pow\",\"Returns a result of raising to power\",\"## Syntax\\r\\n\\r\\n`pow(`*base*`,` *exponent* `)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *base*: Base value.\\r\\n* *exponent*: Exponent value.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns base raised to the power exponent: base ^ exponent.\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/powfunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"prev\",\"Returns the value of a specific column in a specified row.\\r\\nThe specified row is at a specified offset from the current row in a [serialized row set](./windowsfunctions.md#serialized-row-set).\",\"## Syntax\\r\\n\\r\\nThere are several possibilities.\\r\\n\\r\\n* `prev(column)`\\r\\n* `prev(column, offset)`\\r\\n* `prev(column, offset, default_value)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* `column`: The column to get the values from.\\r\\n* `offset`: The offset to go back in rows. When no offset is specified, a default offset 1 is used.\\r\\n* `default_value`: The default value to be used when there are no previous rows to take the value from. When no default value is specified, null is used.\",\"```\\r\\nTable | serialize | extend prevA = prev(A,1)\\r\\n| extend diff = A - prevA\\r\\n| where diff > 1\\r\\n\\r\\nTable | serialize prevA = prev(A,1,10)\\r\\n| extend diff = A - prevA\\r\\n| where diff <= 10\\r\\n```\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/prevfunction\",\"prevfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"preview\",\"Returns a table with up to the specified number of rows from the input record set, and the total number of records in the input record set.\",\"```\\r\\nT | evaluate preview(50)\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`T` `|` `evaluate` `preview(` *NumberOfRows* `)`\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe `preview` plugin returns two result tables:\\r\\n\\r\\n* A table with up to the specified number of rows.\\r\\n  For example, the sample query above is equivalent to running `T | take 50`.\\r\\n* A table with a single row/column, holding the number of records in the\\r\\n  input record set.\\r\\n  For example, the sample query above is equivalent to running `T | count`.\\r\\n\\r\\n> [!TIP]\\r\\n> If `evaluate` is preceded by a tabular source that includes a complex filter, or a filter that references most of the source table columns, prefer to use the [`materialize`](materializefunction.md) function. For example:\\r\\n\\r\\n```\\r\\nlet MaterializedT = materialize(T);\\r\\nMaterializedT | evaluate preview(50)\\r\\n```\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/previewplugin\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"print\",\"Outputs a single-row with one or more scalar expression results as columns.\",'```\\r\\nprint x=1, s=strcat(\"Hello\", \", \", \"World!\")\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`print` [*ColumnName* `=`] *ScalarExpression* [\\',\\' ...]\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *ColumnName*: An optional name to assign to the output column.\\r\\n* *ScalarExpression*: A scalar expression to evaluate.\\r\\n\\r\\n## Returns\\r\\n\\r\\nA table with one or more columns and a single row. Each column returns the corresponding value of the evaluated *ScalarExpression*.','The `print` operator is useful as a quick way to evaluate one or more\\r\\nscalar expressions and make a single-row table out of the resulting values.\\r\\nFor example:\\r\\n\\r\\n```\\r\\nprint 0 + 1 + 2 + 3 + 4 + 5, x = \"Wow!\"\\r\\n```\\r\\n\\r\\n```\\r\\nprint banner=strcat(\"Hello\", \", \", \"World!\")\\r\\n```',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/printoperator\",\"printoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"project\",\"Select the columns to include, rename or drop, and insert new computed columns.\",\"The order of the columns in the result is specified by the order of the arguments. Only the columns specified in the arguments are included in the result. Any other columns in the input are dropped.  See also [`extend`](extendoperator.md).\\r\\n\\r\\n```\\r\\nT | project cost=price*quantity, price\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `| project` *ColumnName* [`=` *Expression*] [`,` ...]\\r\\n\\r\\nor\\r\\n\\r\\n*T* `| project` [*ColumnName* | `(`*ColumnName*[`,`]`)` `=`] *Expression* [`,` ...]\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T*: The input table.\\r\\n* *ColumnName:* Optional name of a column to appear in the output. If there is no *Expression*, then *ColumnName* is mandatory and a column of that name must appear in the input. If omitted, the name will be automatically generated. If *Expression* returns more than one column, a list of column names can be specified in parentheses. In this case *Expression*'s output columns will be given the specified names, dropping all the rest of the output columns, if there are any. If a list of the column names is not specified, all *Expression*'s output columns with generated names will be added to the output.\\r\\n* *Expression:* Optional scalar expression referencing the input columns. If *ColumnName* is not omitted then *Expression* is mandatory.\\r\\n    It is legal to return a new calculated column with the same name as an existing column in the input.\\r\\n\\r\\n## Returns\\r\\n\\r\\nA table that has the columns named as arguments, and as many rows as the input table.\",'The following example shows several kinds of manipulations that can be done\\r\\nusing the `project` operator. The input table `T` has three columns of type `int`: `A`, `B`, and `C`. \\r\\n\\r\\n```\\r\\nT\\r\\n| project\\r\\n    X=C,                       // Rename column C to X\\r\\n    A=2*B,                     // Calculate a new column A from the old B\\r\\n    C=strcat(\"-\",tostring(C)), // Calculate a new column C from the old C\\r\\n    B=2*B                      // Calculate a new column B from the old B\\r\\n```\\r\\n\\r\\n[series_stats](series-statsfunction.md) is an example of a function that returns multiple columns.',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/projectoperator\",\"projectoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"project-away\",\"Select what columns from the input to exclude from the output.\",\"```\\r\\nT | project-away price, quantity, zz*\\r\\n```\\r\\n\\r\\nThe order of the columns in the result is determined by their original order in the table. Only the columns that were specified as arguments are dropped. The other columns are included in the result. (See also `project`.)\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `| project-away` *ColumnNameOrPattern* [`,` ...]\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T*: The input table\\r\\n* *ColumnNameOrPattern:* The name of the column or column wildcard-pattern to be removed from the output.\\r\\n\\r\\n## Returns\\r\\n\\r\\nA table with columns that were not named as arguments. Contains same number of rows as the input table.\\r\\n\\r\\n> [!TIP]\\r\\n>\\r\\n> * To rename columns, use [`project-rename`](projectrenameoperator.md).\\r\\n> * To reorder columns, use [`project-reorder`](projectreorderoperator.md).\\r\\n> * You can `project-away` any columns that are present in the original table or that were computed as part of the query.\",\"The input table `T` has three columns of type `long`: `A`, `B`, and `C`.\\r\\n\\r\\n```\\r\\ndatatable(A:long, B:long, C:long) [1, 2, 3]\\r\\n| project-away C    // Removes column C from the output\\r\\n```\\r\\n\\r\\n|A|B|\\r\\n|---|---|\\r\\n|1|2|\\r\\n\\r\\nRemoving columns starting with 'a'.\\r\\n\\r\\n```\\r\\nprint a2='a2', b = 'b', a3='a3', a1='a1'\\r\\n| project-away a*\\r\\n```\\r\\n\\r\\n|b|\\r\\n|---|\\r\\n|b|\\r\\n\\r\\n## See also\\r\\n\\r\\nTo choose what columns from the input to keep in the output, use [project-keep](project-keep-operator.md).\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/projectawayoperator\",\"projectawayoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"project-keep\",\"Select what columns from the input to keep in the output using a columnname pattern matcher.\",\"```\\r\\nT | project-keep price, quantity, zz*\\r\\n```\\r\\n\\r\\nThe order of the columns in the result is determined by their original order in the table. Only the columns that were specified as arguments are kept. The other columns are excluded from the result. See also [`project`](projectoperator.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `| project-keep` *ColumnNameOrPattern* [`,` ...]\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T*: The input table\\r\\n* *ColumnNameOrPattern:* The name of the column or column wildcard-pattern to be kept in the output.\\r\\n\\r\\n## Returns\\r\\n\\r\\nA table with columns that were named as arguments. Contains same number of rows as the input table.\\r\\n\\r\\n> [!TIP]\\r\\n>* To rename columns, use [`project-rename`](projectrenameoperator.md).\\r\\n>* To reorder columns, use [`project-reorder`](projectreorderoperator.md).\\r\\n>* You can `project-keep` any columns that are present in the original table or that were computed as part of the query.\",\"The input table `T` has three columns of type `long`: `A`, `B`, and `C`.\\r\\n\\r\\n```\\r\\ndatatable(A1:long, A2:long, B:long) [1, 2, 3]\\r\\n| project-keep A*    // Keeps only columns A1 and A2 in the output\\r\\n```\\r\\n\\r\\n|A1|A2|\\r\\n|---|---|\\r\\n|1|2|\\r\\n\\r\\n## See also\\r\\n\\r\\nTo choose what columns from the input to exclude from the output, use [project-away](projectawayoperator.md).\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/project-keep-operator\",\"project-keep-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"project-rename\",\"Renames columns in the result output.\",\"```\\r\\nT | project-rename new_column_name = column_name\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `| project-rename` *NewColumnName* = *ExistingColumnName* [`,` ...]\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T*: The input table.\\r\\n* *NewColumnName:* The new name of a column. \\r\\n* *ExistingColumnName:* The existing name of a column. \\r\\n\\r\\n## Returns\\r\\n\\r\\nA table that has the columns in the same order as in an existing table, with columns renamed.\",\"```\\r\\nprint a='a', b='b', c='c'\\r\\n|  project-rename new_b=b, new_a=a\\r\\n```\\r\\n\\r\\n|new_a|new_b|c|\\r\\n|---|---|---|\\r\\n|a|b|c|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/projectrenameoperator\",\"projectrenameoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"project-reorder\",\"Reorders columns in the result output.\",\"```\\r\\nT | project-reorder Col2, Col1, Col* asc\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `| project-reorder` *ColumnNameOrPattern* [`asc` | `desc` | `granny-asc` | `granny-desc`] [`,` ...]\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T*: The input table.\\r\\n* *ColumnNameOrPattern:* The name of the column or column wildcard pattern added to the output.\\r\\n* For wildcard patterns: Specifying `asc` or `desc` orders columns using their names in ascending or descending manner.\\r\\n  Additionally, `granny-asc` and `granny-desc` keywords indicate ascending or descending order that takes numeric values into account\\r\\n  (for example, `a100` comes before `a20` when `granny-asc` is specified.)\\r\\n  If no explicit ordering is specified, the order is determined by the matching columns as they appear in the source table.\\r\\n\\r\\n> [!NOTE]\\r\\n> * In ambiguous *ColumnNameOrPattern* matching, the column appears in the first position matching the pattern.\\r\\n> * Specifying columns for the `project-reorder` is optional. Columns that aren't specified explicitly appear as the last columns of the output table.\\r\\n> * To remove columns, use [`project-away`](projectawayoperator.md).\\r\\n> * To choose which columns to keep, use [`project-keep`](project-keep-operator.md).\\r\\n> * To rename columns, use [`project-rename`](projectrenameoperator.md).\\r\\n\\r\\n## Returns\\r\\n\\r\\nA table that contains columns in the order specified by the operator arguments. `project-reorder` doesn't rename or remove columns from the table, therefore, all columns that existed in the source table, appear in the result table.\",\"Reorder a table with three columns (a, b, c) so the second column (b) will appear first.\\r\\n\\r\\n```\\r\\nprint a='a', b='b', c='c'\\r\\n|  project-reorder b\\r\\n```\\r\\n\\r\\n|b|a|c|\\r\\n|---|---|---|\\r\\n|b|a|c|\\r\\n\\r\\nReorder columns of a table so that columns starting with `a` will appear before other columns.\\r\\n\\r\\n```\\r\\nprint b = 'b', a2='a2', a3='a3', a1='a1'\\r\\n|  project-reorder a* asc\\r\\n```\\r\\n\\r\\n|a1|a2|a3|b|\\r\\n|---|---|---|---|\\r\\n|a1|a2|a3|b|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/projectreorderoperator\",\"projectreorderoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"Python\",\"The Python plugin runs a user-defined function (UDF) using a Python script. The Python script gets tabular data as its input, and produces tabular output.\\r\\nThe plugin's runtime is hosted in [sandboxes](../concepts/sandboxes.md), running on the cluster's nodes.\",\"## Syntax\\r\\n\\r\\n*T* `|` `evaluate` [`hint.distribution` `=` (`single` | `per_node`)] `python(`*output_schema*`,` *script* [`,` *script_parameters*][`,` *external_artifacts*][`,` *spill_to_disk*]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *output_schema*: A `type` literal that defines the output schema of the tabular data, returned by the Python code.\\r\\n    * The format is: `typeof(`*ColumnName*`:` *ColumnType*[, ...]`)`. For example, `typeof(col1:string, col2:long)`.\\r\\n    * To extend the input schema, use the following syntax: `typeof(*, col1:string, col2:long)`\\r\\n* *script*: A `string` literal that is a valid Python script to execute. To generate multi-line strings see [Usage tips](#usage-tips).\\r\\n* *script_parameters*: An optional `dynamic` literal. It's a property bag of name/value pairs to be passed to the\\r\\n   Python script as the reserved `kargs` dictionary. For more information, see [Reserved Python variables](#reserved-python-variables).\\r\\n* *hint.distribution*: An optional hint for the plugin's execution to be distributed across multiple cluster nodes.\\r\\n  * The default value is `single`.\\r\\n  * `single`: A single instance of the script will run over the entire query data.\\r\\n  * `per_node`: If the query before the Python block is distributed, an instance of the script will run on each node, on the data that it contains.\\r\\n* *external_artifacts*: An optional `dynamic` literal that is a property bag of name and URL pairs, for artifacts that are accessible from cloud storage. They can be made available for the script to use at runtime.\\r\\n  * URLs referenced in this property bag are required to be:\\r\\n    * Included in the cluster's [callout policy](../management/calloutpolicy.md).\\r\\n    * In a publicly available location, or provide the necessary credentials, as explained in [storage connection strings](../api/connection-strings/storage-connection-strings.md).\\r\\n  * The artifacts are made available for the script to consume from a local temporary directory, `.\\\\Temp`. The names provided in the property bag are used as the local file names. See [Examples](#examples).\\r\\n  * For more information, see [Install packages for the Python plugin](#install-packages-for-the-python-plugin). \\r\\n* *spill_to_disk*: An optional `boolean` literal specifying an alternative method for serializing the input table to the Python sandbox. For serializing big tables set it to `true` to speed up the serialization and significantly reduce the sandbox memory consumption. Default is `false` as this parameter is experimental.\\r\\n\\r\\n## Reserved Python variables\\r\\n\\r\\nThe following variables are reserved for interaction between Kusto Query Language and the Python code.\\r\\n\\r\\n* `df`: The input tabular data (the values of `T` above), as a `pandas` DataFrame.\\r\\n* `kargs`: The value of the *script_parameters* argument, as a Python dictionary.\\r\\n* `result`: A `pandas` DataFrame created by the Python script, whose value becomes the tabular data that gets sent to the Kusto query operator that follows the plugin.\\r\\n\\r\\n## Enable the plugin\\r\\n\\r\\n* The plugin is disabled by default.\\r\\n* To enable the plugin, see the list of [prerequisites](../concepts/sandboxes.md#prerequisites-and-limitations).\\r\\n* Enable or disable the plugin in the Azure portal, in your cluster's [Configuration tab](../../language-extensions.md).\\r\\n\\r\\n## Python sandbox image\\r\\n\\r\\n* The Python sandbox image is based on *Anaconda 5.2.0* distribution with the *Python 3.6* engine.\\r\\n  See the list of [Anaconda packages](http://docs.anaconda.com/anaconda/packages/old-pkg-lists/5.2.0/py3.6_win-64/).\\r\\n  \\r\\n  > [!NOTE]\\r\\n  > A small percentage of packages might be incompatible with the limitations enforced by the sandbox where the plugin is run.\\r\\n  \\r\\n* The Python image also contains common ML packages: `tensorflow`, `keras`, `torch`, `hdbscan`, `xgboost`, and other useful packages.\\r\\n* The plugin imports *numpy* (as `np`) & *pandas* (as `pd`) by default.  You can import other modules as needed.\\r\\n\\r\\n## Use Ingestion from query and update policy\\r\\n\\r\\n* Use the plugin in queries that are:\\r\\n  * Defined as part of an [update policy](../management/updatepolicy.md), whose source table is ingested to using *non-streaming* ingestion.\\r\\n  * Run as part of a command that [ingests from a query](../management/data-ingestion/ingest-from-query.md), such as `.set-or-append`.\\r\\n    In both these cases, verify that the volume and frequency of the ingestion, and the complexity and\\r\\n    resources used by the Python logic, align with [sandbox parameters](../concepts/sandboxes.md#sandbox-parameters) and the cluster's available resources. Failure to do so may result in [throttling errors](../concepts/sandboxes.md#errors).\\r\\n* You can't use the plugin in a query that is defined as part of an update policy, whose source table is ingested using [streaming ingestion](../../ingest-data-streaming.md).\",\"~~~kusto\\r\\nrange x from 1 to 360 step 1\\r\\n| evaluate python(\\r\\n//\\r\\ntypeof(*, fx:double),               //  Output schema: append a new fx column to original table \\r\\n```\\r\\nresult = df\\r\\nn = df.shape[0]\\r\\ng = kargs[\\\"gain\\\"]\\r\\nf = kargs[\\\"cycles\\\"]\\r\\nresult[\\\"fx\\\"] = g * np.sin(df[\\\"x\\\"]/n*2*np.pi*f)\\r\\n```\\r\\n, pack('gain', 100, 'cycles', 4)    //  dictionary of parameters\\r\\n)\\r\\n| render linechart \\r\\n~~~\\r\\n\\r\\n![sine demo.](images/plugin/sine-demo.png)\\r\\n\\r\\n~~~kusto\\r\\nprint \\\"This is an example for using 'external_artifacts'\\\"\\r\\n| evaluate python(\\r\\n    typeof(File:string, Size:string), ```if 1:\\r\\n    import os\\r\\n    result = pd.DataFrame(columns=['File','Size'])\\r\\n    sizes = []\\r\\n    path = '.\\\\\\\\\\\\\\\\Temp'\\r\\n    files = os.listdir(path)\\r\\n    result['File']=files\\r\\n    for file in files:\\r\\n        sizes.append(os.path.getsize(path + '\\\\\\\\\\\\\\\\' + file))\\r\\n    result['Size'] = sizes\\r\\n    ```,\\r\\n    external_artifacts = \\r\\n        dynamic({\\\"this_is_my_first_file\\\":\\\"https://kustoscriptsamples.blob.core.windows.net/samples/R/sample_script.r\\\",\\r\\n                 \\\"this_is_a_script\\\":\\\"https://kustoscriptsamples.blob.core.windows.net/samples/python/sample_script.py\\\"})\\r\\n)\\r\\n~~~\\r\\n\\r\\n| File                  | Size |\\r\\n|-----------------------|------|\\r\\n| this_is_a_script      | 120  |\\r\\n| this_is_my_first_file | 105  |\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n* Reduce the plugin's input data set to the minimum amount required (columns/rows).\\r\\n    * Use filters on the source data set, when possible, with Kusto's query language.\\r\\n    * To do a calculation on a subset of the source columns, project only those columns before invoking the plugin.\\r\\n* Use `hint.distribution = per_node` whenever the logic in your script is distributable.\\r\\n    * You can also use the [partition operator](partitionoperator.md) for partitioning the input data set.\\r\\n* Use Kusto's query language whenever possible, to implement the logic of your Python script.\\r\\n\\r\\n\\r\\n## Usage tips\\r\\n\\r\\n* To generate multi-line strings containing the Python script in `Kusto.Explorer`, copy your Python script from your favorite\\r\\n  Python editor (*Jupyter*, *Visual Studio Code*, *PyCharm*, and so on). \\r\\n  Now do one of:\\r\\n    * Enclose the full script between lines containing three consecutive backticks, for example:  \\r\\n      ` ``` `  \\r\\n      ` python code`  \\r\\n      ` ``` `\\r\\n    * Press **F2** to open the *Edit in Python* window. Paste the script into this window. Select **OK**. The script will be\\r\\n      decorated with quotes and new lines, so it's valid in Kusto, and automatically pasted into the query tab.\\r\\n    * Paste the Python code directly into the query tab. Select those lines, and press **Ctrl+K**, **Ctrl+S** hot keys, to decorate them as\\r\\n      above. To reverse, press **Ctrl+K**, **Ctrl+M** hot keys. See the full list of [Query Editor shortcuts](../tools/kusto-explorer-shortcuts.md#query-editor).\\r\\n* To avoid conflicts between Kusto string delimiters and Python string literals, use:\\r\\n     * Single quote characters (`'`) for Kusto string literals in Kusto queries\\r\\n     * Double quote characters (`\\\"`) for Python string literals in Python scripts\\r\\n* Use the [`externaldata` operator](externaldata-operator.md) to obtain the content of a script that you've stored in an external location, such as Azure Blob storage.\\r\\n  \\r\\n    ### Example\\r\\n\\r\\n    \\r\\n    ```\\r\\n    let script = \\r\\n        externaldata(script:string)\\r\\n        [h'https://kustoscriptsamples.blob.core.windows.net/samples/python/sample_script.py']\\r\\n        with(format = raw);\\r\\n    range x from 1 to 360 step 1\\r\\n    | evaluate python(\\r\\n        typeof(*, fx:double),\\r\\n        toscalar(script), \\r\\n        pack('gain', 100, 'cycles', 4))\\r\\n    | render linechart \\r\\n    ```\\r\\n\\r\\n\\r\\n## Install packages for the Python plugin\\r\\n\\r\\nYou may need to install package(s) yourself, for the following reasons:\\r\\n\\r\\n* The package is private and is your own.\\r\\n* The package is public but isn't included in the plugin's base image.\\r\\n\\r\\n\\r\\nInstall packages as follows:\\r\\n\\r\\n### Prerequisites\\r\\n\\r\\n1. Create a blob container to host the packages, preferably in the same place as your cluster. For example, `https://artifactswestus.blob.core.windows.net/python`, assuming your cluster is in West US.\\r\\n  1. Alter the cluster's [callout policy](../management/calloutpolicy.md) to allow access to that location.\\r\\n        * This change requires [AllDatabasesAdmin](../management/access-control/role-based-authorization.md) permissions.\\r\\n\\r\\n        * For example, to enable access to a blob located in `https://artifactswestus.blob.core.windows.net/python`, run the following command:\\r\\n\\r\\n        \\r\\n        ```\\r\\n        .alter-merge cluster policy callout @'[ { \\\"CalloutType\\\": \\\"sandbox_artifacts\\\", \\\"CalloutUriRegex\\\": \\\"artifactswestus\\\\\\\\.blob\\\\\\\\.core\\\\\\\\.windows\\\\\\\\.net/python/\\\",\\\"CanCall\\\": true } ]'\\r\\n        ```\\r\\n\\r\\n\\r\\n### Install packages\\r\\n\\r\\n1. For public packages in [PyPi](https://pypi.org/) or other channels,\\r\\ndownload the package and its dependencies.\\r\\n\\r\\n   * From a cmd window in your local Windows Python environment, run:\\r\\n    \\r\\n    ```python\\r\\n    pip wheel [-w download-dir] package-name.\\r\\n    ```\\r\\n\\r\\n1. Create a zip file that contains the required package and its dependencies.\\r\\n\\r\\n    * For private packages, zip the folder of the package and the folders of its dependencies.\\r\\n    * For public packages, zip the files that were downloaded in the previous step.\\r\\n    \\r\\n    > [!NOTE]\\r\\n    > * Make sure to download the package that is compatible to the Python engine and the platform of the sandbox runtime (currently 3.6.5 on Windows)\\r\\n    > * Make sure to zip the `.whl` files themselves, and not their parent folder.\\r\\n    > * You can skip `.whl` files for packages that already exist with the same version in the base sandbox image.\\r\\n\\r\\n1. Upload the zipped file to a blob in the artifacts location (from step 1).\\r\\n\\r\\n1. Call the `python` plugin.\\r\\n    * Specify the `external_artifacts` parameter with a property bag of name and reference to the zip file (the blob's URL, including a SAS token).\\r\\n    * In your inline python code, import `Zipackage` from `sandbox_utils` and call its `install()` method with the name of the zip file.\\r\\n\\r\\n\\r\\n### Example\\r\\n\\r\\nInstall the [Faker](https://pypi.org/project/Faker/) package that generates fake data.\\r\\n\\r\\n~~~kusto\\r\\nrange ID from 1 to 3 step 1 \\r\\n| extend Name=''\\r\\n| evaluate python(typeof(*), ```if 1:\\r\\n    from sandbox_utils import Zipackage\\r\\n    Zipackage.install(\\\"Faker.zip\\\")\\r\\n    from faker import Faker\\r\\n    fake = Faker()\\r\\n    result = df\\r\\n    for i in range(df.shape[0]):\\r\\n        result.loc[i, \\\"Name\\\"] = fake.name()\\r\\n    ```,\\r\\n    external_artifacts=pack('faker.zip', 'https://artifacts.blob.core.windows.net/kusto/Faker.zip?*** REPLACE WITH YOUR SAS TOKEN ***'))\\r\\n~~~\\r\\n\\r\\n| ID | Name         |\\r\\n|----|--------------|\\r\\n|   1| Gary Tapia   |\\r\\n|   2| Emma Evans   |\\r\\n|   3| Ashley Bowen |\\r\\n\\r\\n---\\r\\n\\r\\n---\\r\\n\\r\\n> [!IMPORTANT]\\r\\n> The content below is Microsoft confidential(not available in the [public site](https://docs.microsoft.com/en-us/azure/data-explorer/))\\r\\n\\r\\n# Python plugin (Preview) - Internal\\r\\n\\r\\nFor questions or feedback about this plugin join the discussion at [Kusto Machine Learning DL](mailto:kustoML@microsoft.com).\\r\\n\\r\\n## Installing packages for the Python plugin (experimental) - Internal\\r\\n\\r\\nThe `python` plugin sandbox image is based on Anaconda 5.2.0 distribution with Python 3.6 engine. If you need a common public package that is not pre-installed, we recommend contacting [Kusto Machine Learning DL](mailto:kustoml@microsoft.com)to check if it can be added to the common image.\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/pythonplugin\",\"pythonplugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"R\",\"The R plugin runs a user-defined-function (UDF) using an R script. \\r\\nThe script gets tabular data as its input, and produces tabular output.\\r\\nThe plugin's runtime is hosted in a [sandbox](../concepts/sandboxes.md) on the cluster's nodes. The sandbox provides an isolated and secure environment.\",\"## Syntax\\r\\n\\r\\n*T* `|` `evaluate` [`hint.distribution` `=` (`single` | `per_node`)] `r(`*output_schema*`,` *script* [`,` *script_parameters*] [`,` *external_artifacts*]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *output_schema*: A `type` literal that defines the output schema of the tabular data, returned by the R code.\\r\\n    * The format is: `typeof(`*ColumnName*`:` *ColumnType*[, ...]`)`, for example: `typeof(col1:string, col2:long)`.\\r\\n    * To extend the input schema, use the following syntax: `typeof(*, col1:string, col2:long)`.\\r\\n* *script*: A `string` literal that is the valid R script to be executed.\\r\\n* *script_parameters*: An optional `dynamic` literal that is a property bag of name and value pairs to be passed to the R script as the reserved `kargs` dictionary. For more information, see [Reserved R variables](#reserved-r-variables).\\r\\n* *hint.distribution*: An optional hint for the plugin's execution to be distributed across multiple cluster nodes.\\r\\n   Default: `single`.\\r\\n    * `single`: A single instance of the script will run over the entire query data.\\r\\n    * `per_node`: If the query before the R block is distributed, an instance of the script will run on each node over the data that it contains.\\r\\n* *external_artifacts*: An optional `dynamic` literal that is a property bag of name and URL pairs, for artifacts that are accessible from cloud storage. They can be made available for the script to use at runtime.\\r\\n  * URLs referenced in this property bag are required to be:\\r\\n    * Included in the cluster's [callout policy](../management/calloutpolicy.md).\\r\\n    * In a publicly available location, or provide the necessary credentials, as explained in [storage connection strings](../api/connection-strings/storage-connection-strings.md).\\r\\n  * The artifacts are made available for the script to consume from a local temporary directory, `.\\\\Temp`. The names provided in the property bag are used as the local file names. See [Example](#example).\\r\\n  * For more information, see [Install packages for the R plugin](#install-packages-for-the-r-plugin). \\r\\n\\r\\n## Reserved R variables\\r\\n\\r\\nThe following variables are reserved for interaction between Kusto Query Language and the R code:\\r\\n\\r\\n* `df`: The input tabular data (the values of `T` above), as an R DataFrame.\\r\\n* `kargs`: The value of the *script_parameters* argument, as an R dictionary.\\r\\n* `result`: An R DataFrame created by the R script. The value becomes the tabular data that gets sent to any Kusto query operator that follows the plugin.\\r\\n\\r\\n## Enable the plugin\\r\\n\\r\\n* The plugin is disabled by default.\\r\\n* Enable or disable the plugin in the Azure portal in the **Configuration** tab of your cluster. For more information see [Manage language extensions in your Azure Data Explorer cluster (Preview)](../../language-extensions.md)\\r\\n\\r\\n## R sandbox image\\r\\n\\r\\n* The R sandbox image is based on *R 3.4.4 for Windows*, and includes packages from [Anaconda's R Essentials bundle](https://docs.anaconda.com/anaconda/packages/r-language-pkg-docs/).\",\"```\\r\\nrange x from 1 to 360 step 1\\r\\n| evaluate r(\\r\\n//\\r\\ntypeof(*, fx:double),               //  Output schema: append a new fx column to original table \\r\\n//\\r\\n'result <- df\\\\n'                    //  The R decorated script\\r\\n'n <- nrow(df)\\\\n'\\r\\n'g <- kargs$gain\\\\n'\\r\\n'f <- kargs$cycles\\\\n'\\r\\n'result$fx <- g * sin(df$x / n * 2 * pi * f)'\\r\\n//\\r\\n, pack('gain', 100, 'cycles', 4)    //  dictionary of parameters\\r\\n)\\r\\n| render linechart \\r\\n```\\r\\n\\r\\n![Sine demo.](images/plugin/sine-demo.png)\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n* Reduce the plugin's input data set to the minimum amount required (columns/rows).\\r\\n    * Use filters on the source data set using the Kusto Query Language, when possible.\\r\\n    * To make a calculation on a subset of the source columns, project only those columns before invoking the plugin.\\r\\n* Use `hint.distribution = per_node` whenever the logic in your script is distributable.\\r\\n    * You can also use the [partition operator](partitionoperator.md) for partitioning the input data set.\\r\\n* Whenever possible, use the Kusto Query Language to implement the logic of your R script.\\r\\n\\r\\n    For example:\\r\\n\\r\\n    \\r\\n    ```\\r\\n    .show operations\\r\\n    | where StartedOn > ago(1d) // Filtering out irrelevant records before invoking the plugin\\r\\n    | project d_seconds = Duration / 1s // Projecting only a subset of the necessary columns\\r\\n    | evaluate hint.distribution = per_node r( // Using per_node distribution, as the script's logic allows it\\r\\n        typeof(*, d2:double),\\r\\n        'result <- df\\\\n'\\r\\n        'result$d2 <- df$d_seconds\\\\n' // Negative example: this logic should have been written using Kusto's query language\\r\\n      )\\r\\n    | summarize avg = avg(d2)\\r\\n    ```\\r\\n\\r\\n\\r\\n## Usage tips\\r\\n\\r\\n* To avoid conflicts between Kusto string delimiters and R string delimiters:  \\r\\n    * Use single quote characters (`'`) for Kusto string literals in Kusto queries.\\r\\n    * Use double quote characters (`\\\"`) for R string literals in R scripts.\\r\\n* Use the [external data operator](externaldata-operator.md) to obtain the content of\\r\\n  a script that you've stored in an external location, such as Azure blob storage or a public GitHub repository.\\r\\n  \\r\\n  For example:\\r\\n\\r\\n    \\r\\n    ```\\r\\n    let script = \\r\\n        externaldata(script:string)\\r\\n        [h'https://kustoscriptsamples.blob.core.windows.net/samples/R/sample_script.r']\\r\\n        with(format = raw);\\r\\n    range x from 1 to 360 step 1\\r\\n    | evaluate r(\\r\\n        typeof(*, fx:double),\\r\\n        toscalar(script), \\r\\n        pack('gain', 100, 'cycles', 4))\\r\\n    | render linechart \\r\\n    ```\\r\\n\\r\\n\\r\\n## Install packages for the R plugin\\r\\n\\r\\nFollow these step by step instructions to install package(s) that are not included in the plugin's base image.\\r\\n\\r\\n### Prerequisites\\r\\n\\r\\n1. Create a blob container to host the packages, preferably in the same place as your cluster. For example, `https://artifactswestus.blob.core.windows.net/r`, assuming your cluster is in West US.\\r\\n  1. Alter the cluster's [callout policy](../management/calloutpolicy.md) to allow access to that location.\\r\\n        * This change requires [AllDatabasesAdmin](../management/access-control/role-based-authorization.md) permissions.\\r\\n\\r\\n        * For example, to enable access to a blob located in `https://artifactswestus.blob.core.windows.net/r`, run the following command:\\r\\n\\r\\n        \\r\\n        ```\\r\\n        .alter-merge cluster policy callout @'[ { \\\"CalloutType\\\": \\\"sandbox_artifacts\\\", \\\"CalloutUriRegex\\\": \\\"artifactswestus\\\\\\\\.blob\\\\\\\\.core\\\\\\\\.windows\\\\\\\\.net/r/\\\",\\\"CanCall\\\": true } ]'\\r\\n        ```\\r\\n\\r\\n\\r\\n### Install packages\\r\\n\\r\\nThe example snips below assume local R machine on Windows environment.\\r\\n\\r\\n1. Verify you're using the appropriate R version \\u2013 current R Sandbox version is 3.4.4:\\r\\n\\r\\n    ``` \\r\\n    > R.Version()[\\\"version.string\\\"]\\r\\n\\r\\n    $version.string\\r\\n    [1] \\\"R version 3.4.4 (2018-03-15)\\\"\\r\\n    ``` \\r\\n\\r\\n    If needed you can download it from [here](https://cran.r-project.org/bin/windows/base/old/3.4.4/).\\r\\n\\r\\n1. Launch the x64 RGui \\r\\n\\r\\n1. Create a new empty folder to be populated with all the relevant packages you would like to install. In this example we install the [brglm2 package](https://cran.r-project.org/web/packages/brglm2/index.html), so creating \\\"C:\\\\brglm2\\\".\\r\\n\\r\\n1. Add the newly created folder path to lib paths:\\r\\n\\r\\n    ```\\r\\n    > .libPaths(\\\"C://brglm2\\\")\\r\\n    ```\\r\\n\\r\\n1. Verify that the new folder is now the first path in .libPaths():\\r\\n\\r\\n    ```\\r\\n    > .libPaths()\\r\\n    \\r\\n    [1] \\\"C:/brglm2\\\"    \\\"C:/Program Files/R/R-3.4.4/library\\\"\\r\\n    \\r\\n    ```\\r\\n\\r\\n1. Once this setup is done, any package that we install shall be added to this new folder. Let's install the requested package and its dependencies:\\r\\n\\r\\n    ```\\r\\n    > install.packages(\\\"brglm2\\\")\\r\\n    ```\\r\\n\\r\\n    In case the question \\\"Do you want to install from sources the packages which need compilation?\\\" pops up, answer \\\"Y\\\".\\r\\n\\r\\n1. Verify that new folders were added to \\\"C:\\\\brglm2\\\":\\r\\n\\r\\n    ![Screenshot of library directory content.](images/plugin/sample-directory.png)\\r\\n8. Select all items in that folder and zip them to e.g. libs.zip (do not zip the parent folder). You should get an archive structure like this:\\r\\n\\r\\n\\r\\n    libs.zip:\\r\\n\\r\\n    - brglm2 (folder)\\r\\n    - enrichwith (folder)\\r\\n    - numDeriv (folder)\\r\\n    \\r\\n9. Upload libs.zip to the blob container that was set above\\r\\n\\r\\n1. Call the `r` plugin.\\r\\n    * Specify the `external_artifacts` parameter with a property bag of name and reference to the zip file (the blob's URL, including a SAS token).\\r\\n    * In your inline r code, import `zipfile` from `sandboxutils` and call its `install()` method with the name of the zip file.\\r\\n\\r\\n\\r\\n### Example\\r\\n\\r\\nInstall the [brglm2 package](https://cran.r-project.org/web/packages/brglm2/index.html):\\r\\n\\r\\n~~~kusto\\r\\nprint x=1\\r\\n| evaluate r(typeof(*, ver:string),\\r\\n    'library(sandboxutils)\\\\n'\\r\\n    'zipfile.install(\\\"brglm2.zip\\\")\\\\n'\\r\\n    'library(\\\"brglm2\\\")\\\\n'\\r\\n    'result <- df\\\\n'\\r\\n    'result$ver <-packageVersion(\\\"brglm2\\\")\\\\n'\\r\\n    ,external_artifacts=pack(brglm2.zip', 'https://artifactswestus.blob.core.windows.net/r/libs.zip?*** REPLACE WITH YOUR SAS TOKEN ***'))\\r\\n~~~\\r\\n\\r\\n| x | ver     |\\r\\n|---|---------|\\r\\n|  1| 1.8.2   |\\r\\n\\r\\nMake sure that the archive's name (first value in pack pair) has the *.zip suffix to prevent collisions when unzipping folders whose name is identical to the archive name.\\r\\n\\r\\n---\\r\\n\\r\\n---\\r\\n\\r\\n> [!IMPORTANT]\\r\\n> The content below is Microsoft confidential(not available in the [public site](https://docs.microsoft.com/en-us/azure/data-explorer/))\\r\\n\\r\\n# R plugin (Preview) - Internal\\r\\n\\r\\n### Syntax\\r\\n\\r\\n*T* `|` `evaluate` [`hint.distribution` `=` (`single` | `per_node`)] `r(`*output_schema*`,` *script* [`,` *script_parameters*][`,` *external_artifacts*]`)`\\r\\n\\r\\n### Arguments\\r\\n\\r\\n* *external_artifacts*: An optional (and **experimental**) `dynamic` literal which is a property bag of name/URL pairs of artifacts\\r\\n    that are accessible from cloud storage and can be made available for the script to use at runtime.\\r\\n    * Any URL that is referenced as part of this property bag is required to be included in the cluster's [Callout policy](../management/calloutpolicy.md).\\r\\n    * The artifacts are made available for the script to consume from a local temporary directory, `D:/Temp`, and the names provided in the property bag are used as the local file names (see [example](#examples) below).\\r\\n\\r\\n\\r\\n### Onboarding\\r\\n\\r\\n* Prerequisites for enabling the plugin are listed [here](../concepts/sandboxes.md#prerequisites).\\r\\n* The plugin is disabled by default.\\r\\n    * *Interested in enabling the plugin on your cluster?*\\r\\n        * Open a [support ticket](https://aka.ms/kustosupport) in which you should specify\\r\\n          you've read and acknowledged all the prerequisites, and have approval from the cluster's owner(s).\\r\\n        * Disabling the plugin requires opening a support ticket as well.\\r\\n\\r\\n\\r\\n### Notes and Limitations\\r\\n\\r\\n* The R sandbox limits accessing the network, therefore the R code can't dynamically install additional packages that are not included in the image. Contact [Kusto Machine Learning DL](mailto:kustoml@microsoft.com) if you need specific packages.\\r\\n* **[Ingestion from query](../management/data-ingestion/ingest-from-query.md) and [Update policies](../management/updatepolicy.md)**\\r\\n    * It is possible to use the plugin in queries which are:\\r\\n        1. Defined as part of an update policy, whose source table is ingested to using *non-streaming* ingestion.\\r\\n        1. Run as part of a command which ingests from a query (for example, `.set-or-append`).\\r\\n    * In both the above cases, it's recommended to verify that the volume and frequency of the ingestion, as well as the complexity and\\r\\n      resources utilization of the R logic are aligned with [sandbox limitations](../concepts/sandboxes.md#limitations), and the cluster's available resources.\\r\\n      Failure to do so may result in [throttling errors](../concepts/sandboxes.md#errors).\\r\\n    * It is *not* possible to use the plugin in a query which is defined as part of an update policy, whose source table is ingested to\\r\\n    using [*streaming* ingestion](../management/streamingingestionpolicy.md).\\r\\n\\r\\n\\r\\n### Examples\\r\\n\\r\\n```\\r\\nprint \\\"This is an example for using 'external_artifacts'\\\"\\r\\n| evaluate r(\\r\\n    typeof(File:string),\\r\\n    'df <- as.data.frame(list(File=dir(\\\"D:/Temp\\\", all.files = TRUE, recursive = TRUE, include.dirs = TRUE)));'\\r\\n    'result <- df',\\r\\n    external_artifacts =\\r\\n        dynamic({\\\"this_is_my_first_file\\\":\\\"https://raw.githubusercontent.com/yonileibowitz/kusto.blog/master/resources/R/sample_script.r\\\",\\r\\n                 \\\"this_is_a_script\\\":\\\"https://raw.githubusercontent.com/yonileibowitz/kusto.blog/master/resources/python/sample_script.py\\\"})\\r\\n)\\r\\n```\\r\\n\\r\\n| File                  |\\r\\n|-----------------------|\\r\\n| this_is_a_script      |\\r\\n| this_is_my_first_file |\\r\\n\\r\\nPlease send feedback and questions about this plugin to [Kusto Machine Learning DL](mailto:kustoML@microsoft.com).\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/rplugin\",\"rplugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"radians\",\"Converts angle value in degrees into value in radians, using formula `radians = (PI / 180 ) * angle_in_degrees`\",\"## Syntax\\r\\n\\r\\n`radians(`*a*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *a*: Angle in degrees (a real number).\\r\\n\\r\\n## Returns\\r\\n\\r\\n* The corresponding angle in radians for an angle specified in degrees.\",\"```\\r\\nprint radians0 = radians(90), radians1 = radians(180), radians2 = radians(360) \\r\\n\\r\\n```\\r\\n\\r\\n|radians0|radians1|radians2|\\r\\n|---|---|---|\\r\\n|1.5707963267949|3.14159265358979|6.28318530717959|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/radiansfunction\",\"radiansfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"rand\",\"Returns a random number.\",\"```\\r\\nrand()\\r\\nrand(1000)\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n* `rand()` - returns a value of type `real`\\r\\n  with a uniform distribution in the range [0.0, 1.0).\\r\\n* `rand(` *N* `)` - returns a value of type `real`\\r\\n  chosen with a uniform distribution from the set {0.0, 1.0, ..., *N* - 1}.\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/randfunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"range\",\"Generates a dynamic array holding a series of equally-spaced values.\",\"## Syntax\\r\\n\\r\\n`range(`*start*`,` *stop*[`,` *step*]`)` \\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *start*: The value of the first element in the resulting array. \\r\\n* *stop*: The value of the last element in the resulting array,\\r\\nor the least value that is greater than the last element in the resulting\\r\\narray and within an integer multiple of *step* from *start*.\\r\\n* *step*: The difference between two consecutive elements of\\r\\nthe array. \\r\\nThe default value for *step* is `1` for numeric and `1h` for `timespan` or `datetime`\\r\\n\\r\\n## Returns\\r\\n\\r\\nDynamic array whose values are: *start*, *start* + *step*, ... up to and including *stop*.  The array will be truncated if the maximum number of values is reached.  \\r\\n\\r\\n> [!NOTE]\\r\\n> The maximum number of values is 1,048,576 (2^20).\",'The following example returns `[1, 4, 7]`:\\r\\n\\r\\n```\\r\\nT | extend r = range(1, 8, 3)\\r\\n```\\r\\n\\r\\nThe following example returns an array holding all days\\r\\nin the year 2015:\\r\\n\\r\\n```\\r\\nT | extend r = range(datetime(2015-01-01), datetime(2015-12-31), 1d)\\r\\n```\\r\\n\\r\\nThe following example returns `[1,2,3]`:\\r\\n\\r\\n```\\r\\nrange(1, 3)\\r\\n```\\r\\n\\r\\nThe following example returns `[\"01:00:00\",\"02:00:00\",\"03:00:00\",\"04:00:00\",\"05:00:00\"]`:\\r\\n\\r\\n```\\r\\nrange(1h, 5h)\\r\\n```\\r\\n\\r\\nThe following example returns `1048576`:\\r\\n\\r\\n```\\r\\nprint r = range(1,1000000000) | mv-expand r | count\\r\\n```',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/rangefunction\",\"rangefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"range\",\"Generates a single-column table of values.\",\"Notice that it doesn't have a pipeline input. \\r\\n\\r\\n## Syntax\\r\\n\\r\\n`range` *columnName* `from` *start* `to` *stop* `step` *step*\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *columnName*: The name of the single column in the output table.\\r\\n* *start*: The smallest value in the output.\\r\\n* *stop*: The highest value being generated in the output (or a bound\\r\\non the highest value, if *step* steps over this value).\\r\\n* *step*: The difference between two consecutive values. \\r\\n\\r\\nThe arguments must be numeric, date or timespan values. They can't reference the columns of any table. (If you want to compute the range based on an input table, use the range function, maybe with the mv-expand operator.) \\r\\n\\r\\n## Returns\\r\\n\\r\\nA table with a single column called *columnName*,\\r\\nwhose values are *start*, *start* `+` *step*, ... up to and until *stop*.\",\"A table of midnight at the past seven days. The bin (floor) function reduces each time to the start of the day.\\r\\n\\r\\n```\\r\\nrange LastWeek from ago(7d) to now() step 1d\\r\\n```\\r\\n\\r\\n|LastWeek|\\r\\n|---|\\r\\n|2015-12-05 09:10:04.627|\\r\\n|2015-12-06 09:10:04.627|\\r\\n|...|\\r\\n|2015-12-12 09:10:04.627|\\r\\n\\r\\nA table with a single column called `Steps`\\r\\nwhose type is `long` and whose values are `1`, `4`, and `7`.\\r\\n\\r\\n```\\r\\nrange Steps from 1 to 8 step 3\\r\\n```\\r\\n\\r\\nThe next example shows how the `range` operator can be used to create\\r\\na small, ad-hoc, dimension table which is then used to introduce zeros where the source data has no values.\\r\\n\\r\\n```\\r\\nrange TIMESTAMP from ago(4h) to now() step 1m\\r\\n| join kind=fullouter\\r\\n  (Traces\\r\\n      | where TIMESTAMP > ago(4h)\\r\\n      | summarize Count=count() by bin(TIMESTAMP, 1m)\\r\\n  ) on TIMESTAMP\\r\\n| project Count=iff(isnull(Count), 0, Count), TIMESTAMP\\r\\n| render timechart  \\r\\n```\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/rangeoperator\",\"rangeoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"reduce\",\"Groups a set of strings together based on values similarity.\",'```\\r\\nT | reduce by LogMessage with threshold=0.1\\r\\n```\\r\\n\\r\\nFor each such group, it outputs a **pattern** that best describes the group (possibly using the\\r\\nasterix (`*`) character to represent wildcards), a **count** of the number of values in the group,\\r\\nand a **representative** of the group (one of the original values in the group).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `reduce` [`kind` `=` *ReduceKind*] `by` *Expr* [`with` [`threshold` `=` *Threshold*] [`,` `characters` `=` *Characters*] ]\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *Expr*: An expression that evaluates to a `string` value.\\r\\n* *Threshold*: A `real` literal in the range (0..1). Default is 0.1. For large inputs, threshold should be small. \\r\\n* *Characters*: A `string` literal containing a list of characters to add to the list of characters\\r\\n  that don\\'t break a term. (For example, if you want `aaa=bbbb` and `aaa:bbb` to each be a whole term,\\r\\n  rather than break on `=` and `:`, use `\":=\"` as the string literal.)\\r\\n* *ReduceKind*: Specifies the reduce flavor. The only valid value for the time being is `source`.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThis operator returns a table with three columns (`Pattern`, `Count`, and `Representative`),\\r\\nand as many rows as there are groups. `Pattern` is the pattern value for the group, with `*`\\r\\nbeing used as a wildcard (representing arbitrary insertion strings), `Count` counts how\\r\\nmany rows in the input to the operator are represented by this pattern, and `Representative`\\r\\nis one value from the input that falls into this group.\\r\\n\\r\\nIf `[kind=source]` is specified, the operator will append the `Pattern` column to the existing rows in the table (instead of aggregating by `Pattern`).\\r\\nNote that the syntax an schema of this flavor might be subjected to future changes.\\r\\n\\r\\nFor example, the result of `reduce by city` might include: \\r\\n\\r\\n|Pattern     |Count |Representative|\\r\\n|------------|------|--------------|\\r\\n| San *      | 5182 |San Bernard   |\\r\\n| Saint *    | 2846 |Saint Lucy    |\\r\\n| Moscow     | 3726 |Moscow        |\\r\\n| \\\\* -on- \\\\* | 2730 |One -on- One  |\\r\\n| Paris      | 2716 |Paris         |\\r\\n\\r\\nAnother example with customized tokenization:\\r\\n\\r\\n```\\r\\nrange x from 1 to 1000 step 1\\r\\n| project MyText = strcat(\"MachineLearningX\", tostring(toint(rand(10))))\\r\\n| reduce by MyText  with threshold=0.001 , characters = \"X\" \\r\\n```\\r\\n\\r\\n|Pattern         |Count|Representative   |\\r\\n|----------------|-----|-----------------|\\r\\n|MachineLearning*|1000 |MachineLearningX4|','The following example shows how one might apply the `reduce` operator to a \"sanitized\"\\r\\ninput, in which GUIDs in the column being reduced are replaced prior to reducing\\r\\n\\r\\n```\\r\\n// Start with a few records from the Trace table.\\r\\nTrace | take 10000\\r\\n// We will reduce the Text column which includes random GUIDs.\\r\\n// As random GUIDs interfere with the reduce operation, replace them all\\r\\n// by the string \"GUID\".\\r\\n| extend Text=replace(@\"[[:xdigit:]]{8}-[[:xdigit:]]{4}-[[:xdigit:]]{4}-[[:xdigit:]]{4}-[[:xdigit:]]{12}\", @\"GUID\", Text)\\r\\n// Now perform the reduce. In case there are other \"quasi-random\" identifiers with embedded \\'-\\'\\r\\n// or \\'_\\' characters in them, treat these as non-term-breakers.\\r\\n| reduce by Text with characters=\"-_\"\\r\\n```\\r\\n\\r\\n## See also\\r\\n\\r\\n[autocluster](./autoclusterplugin.md)\\r\\n\\r\\n**Notes**\\r\\n\\r\\nThe implementation of `reduce` operator is largely based on the paper [A Data Clustering Algorithm for Mining Patterns From Event Logs](https://ristov.github.io/publications/slct-ipom03-web.pdf), by Risto Vaarandi.',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/reduceoperator\",\"reduceoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"regex_quote\",\"Returns a string that escapes all regular expression characters.\",\"## Syntax\\r\\n\\r\\n`regex_quote(`*value*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n*value*: The string to escape.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns *string* where all regex expression characters are escaped.\",\"This statement:\\r\\n\\r\\n```\\r\\nprint result = regex_quote('(so$me.Te^xt)')\\r\\n```\\r\\n\\r\\nReturns the following results:\\r\\n\\r\\n| result |\\r\\n|---|\\r\\n| `\\\\(so\\\\\\\\$me\\\\\\\\.Te\\\\\\\\^xt\\\\\\\\)` |\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/regexquotefunction\",\"regexquotefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"render\",\"Instructs the user agent to render the results of the query in a particular way.\",'```\\r\\nrange x from 0.0 to 2*pi() step 0.01 | extend y=sin(x) | render linechart\\r\\n```\\r\\n\\r\\n> [!NOTE]\\r\\n>\\r\\n> * The render operator should be the last operator in the query, and used only with queries that produce a single tabular data stream result.\\r\\n> * The render operator does not modify data. It injects an annotation (\"Visualization\") into the result\\'s extended properties. The annotation contains the information provided by the operator in the query.\\r\\n> * The interpretation of the visualization information is done by the user agent. Different agents (such as Kusto.Explorer,Kusto.WebExplorer) might support different visualizations.\\r\\n\\r\\n> [!TIP]\\r\\n>\\r\\n> * Use `where`, `summarize` and `top` to limit the volume that you display.\\r\\n> * Sort the data to define the order of the x-axis.\\r\\n> * User agents are free to \"guess\" the value of properties that are not specified\\r\\n  by the query. In particular, having \"uninteresting\" columns in the schema of\\r\\n  the result might translate into them guessing wrong. Try projecting-away such\\r\\n  columns when that happens.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `render` *Visualization* [`with` `(` *PropertyName* `=` *PropertyValue* [`,` ...] `)`]\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *Visualization* indicates the kind of visualization to use. The supported values are:\\r\\n\\r\\n\\r\\n|*Visualization*     |Description|Example|\\r\\n|--------------------|---|---|\\r\\n| `anomalychart`     | Similar to timechart, but [highlights anomalies](./samples.md#get-more-from-your-data-by-using-kusto-with-machine-learning) using [series_decompose_anomalies](./series-decompose-anomaliesfunction.md) function. | **[**Click to run sample query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA3WR3W7CMAyF73mKI25KpRbaTmjSUJ8CpF1WoXVptPxUifmb9vBLoGO7GFeR7ePv2I4ihpamYdToBBNLTYuqKF/zosyLdbqZqagQl/8UVV68oKreimLSdVFUDZtZR9o2WnxQ48lJ8tXsCzHM7yHMUdfidFiEN4U12AXoloUe0Turp4nYTsaeaYzs/RVedgis80CObkFdI9ltywTAagV4UtQyRKiZgyLEaTGZ9taFQqtIGHI4SX8USn4KltYEJF2YTIeFMFaHPPkMvrWOMuxFoEpDaVjujmo6aq0erafmIY+7ZCiX6wx5mSGJHb3kJA1sF8jB8q69toNwjLPkYfGTseqoja//eLNkRXXyTnuIcVyCneh72cL2YQdtDQ8ZHvIkDcsfPWH+3AvPvObx0FMXD/RLhfDYW9VhtNKwj/8U69M1b2S//AbRUQMWQQIAAA==)** |\\r\\n| `areachart`        | Area graph. First column is the x-axis and should be a numeric column. Other numeric columns are y-axes. | **[**Click to run sample query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0tJzc2PL04tykwtNuKqUUitKEnNS1GACMSnZZbEG+Vk5qUWa1Rq6iCLggSBYkAdRUD1qUUKiUWpickZiUUlCgrlmSUZGhXJ+TmluXm2FZoApaRQYmIAAAA=)** |\\r\\n| `barchart`         | First column is the x-axis and can be text, datetime or numeric. Other columns are numeric, displayed as horizontal strips.|  **[**Click to run sample query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5lIAghqF4tLc3MSizKpUhVSQcHxyfmleiS2Y1NBUSKpUCC5JLEmFKi7PSC1CUahgp2BoAJUsKMrPSk0ugWjQQVYFVVCUmpeSWqSQlFiUnJFYVAIAB5xR2owAAAA=)** |\\r\\n| `card`             | First result record is treated as set of scalar values and shows as a card. |  **[**Click to run sample query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0tJzc2PL04tykwtNuKqUUitKEnNS1GACMSnZZbEG+Vk5qUWa1Rq6iCLggSBYkAdRUD1qUUKCsmJRSkKQFCeWZKhUZGcn1Oam2dboQkA5CRu0GAAAAA=)** |\\r\\n| `columnchart`      | Like `barchart` with vertical strips instead of horizontal strips.|  **[**Click to run sample query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5lIAghqF4tLc3MSizKpUhVSQcHxyfmleiS2Y1NBUSKpUCC5JLEmFKi7PSC1CUahgp2BoAJUsKMrPSk0ugWjQQVYFVVCUmpeSWqSQnJ9TmpuXnJFYVAIAJOFS3Y8AAAA=)** |\\r\\n| `ladderchart`      | Last two columns are the x-axis, other columns are y-axis.| |\\r\\n| `linechart`        | Line graph. First column is x-axis, and should be a numeric column. Other numeric columns are y-axes. |  **[**Click to run sample query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0tJzc2PL04tykwtNuKqUUitKEnNS1GACMSnZZbEG+Vk5qUWa1Rq6iCLggSBYkAdRUD1qUUKIIHkjMSiEoXyzJIMjYrk/JzS3DzbCk0AUIIJ02EAAAA=)** |\\r\\n| `piechart`         | First column is color-axis, second column is numeric. |  **[**Click to run sample query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5uWqUSguzc1NLMqsSlUoLkksSU3OL80rsQWTGpoKSZUKwSBRsML8ohKQAEKZAkg4JzM3s0TB0ADELkrNS0ktUijITE3OSASqLsksyUm1VfKtVAjITFVwBovBjFQCADspGXyIAAAA)** |\\r\\n| `pivotchart`       | Displays a pivot table and chart. User can interactively select data, columns, rows and various chart types. |   |\\r\\n| `scatterchart`     | Points graph. First column is x-axis and should be a numeric column. Other numeric columns are y-axes. |  **[**Click to run sample query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA0tJzc2PL04tykwtNuKqUUitKEnNS1GACMSnZZbEG+Vk5qUWa1Rq6iCLggSBYkAdRUD1qUUKCsXJiSUlqUXJGYlFJQoK5ZklGRoVyfk5pbl5thWaAI8A701mAAAA)** |\\r\\n| `stackedareachart` | Stacked area graph. First column is x-axis, and should be a numeric column. Other numeric columns are y-axes. |  **[**Click to run sample query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA03LSwqAIBRG4XmruEODRs5bi4j+oeQDrjcyaPEZTZp+nOORq2ngiKanm9AFxdMHZotidIoFTV3z8tcXh42DRw8mamLdDm8Z1gXLQkRnlKC6q+nIZe3zAzEfsitrAAAA)** |\\r\\n| `table`            | Default - results are shown as a table.|  **[**Click to run sample query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5lIAghqF4tLc3MSizKpUhVSQcHxyfmleiS2Y1NBUSKpUCC5JLEmFKi7PSC1CUahgp2BoAJUsKMrPSk0ugWjQQVYFVVCUmpeSWqRQkpiUkwoAW+Ur0IkAAAA=)** |\\r\\n| `timechart`        | Line graph. First column is x-axis, and must be datetime. Other (numeric) columns are y-axes. There\\'s one string column whose values are used to \"group\" the numeric columns and create different lines in the chart (further string columns are ignored). |  **[**Click to run sample query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA3WQ3WrDMAyF7/sUukvCnDXJGIOVPEULuwxqoixm/gm2+jf28JObFjbYrmyho3M+yRCD1a5jaGFAJtaW8qaqX8qqLqvnYrMySYHnvxRNWT1B07xW1U03JFEzbVYDWd9Z/KAuUtAUm9UXpLJcSnAH2+LxPZe3AO9gJ6ZbRjvDGLy9EbG/BUemOXnvLxD1AOJ1mijQtWhbyHbbOgOA9RogkqGeAaXn3g1BooVb6OiDNHpD6CjAUccDGv2JrL0TSzozuQHyPYqHdqRkDKN3aBRwkJaCQJIoQ4VsuXh2A/Xezj5SWkVBWSvI0vSoOSsWpLtEpyDwY4KTW8nnJ5ws+2+eAhSyOxjkd+HDVVcIfHplp2TYTxgYTpqnnDUbarM32gPO86PY4jjqfmGw3vGkftNlCi5xNprbWW5kYvENQQnqDh8CAAA=)** |\\r\\n| `timepivot`        | Interactive navigation over the events time-line (pivoting on time axis)|  |\\r\\n\\r\\n> [!NOTE]\\r\\n> The ladderchart, pivotchart, and timepivot visualizations can be used in Kusto.Explorer but are not available in the Azure Data Explorer web UI.\\r\\n\\r\\n* *PropertyName*/*PropertyValue* indicate additional information to use when rendering.\\r\\n  All properties are optional. The supported properties are:\\r\\n\\r\\n\\r\\n|*PropertyName*|*PropertyValue*                                                                   |\\r\\n|--------------|----------------------------------------------------------------------------------|\\r\\n|`accumulate`  |Whether the value of each measure gets added to all its predecessors. (`true` or `false`)|\\r\\n|`kind`        |Further elaboration of the visualization kind. See below.                         |\\r\\n|`legend`      |Whether to display a legend or not (`visible` or `hidden`).                       |\\r\\n|`series`      |Comma-delimited list of columns whose combined per-record values define the series that record belongs to.|\\r\\n|`ymin`        |The minimum value to be displayed on Y-axis.                                      |\\r\\n|`ymax`        |The maximum value to be displayed on Y-axis.                                      |\\r\\n|`title`       |The title of the visualization (of type `string`).                                |\\r\\n|`xaxis`       |How to scale the x-axis (`linear` or `log`).                                      |\\r\\n|`xcolumn`     |Which column in the result is used for the x-axis.                                |\\r\\n|`xtitle`      |The title of the x-axis (of type `string`).                                       |\\r\\n|`yaxis`       |How to scale the y-axis (`linear` or `log`).                                      |\\r\\n|`ycolumns`    |Comma-delimited list of columns that consist of the values provided per value of the x column.|\\r\\n|`ysplit`      |How to split multiple the visualization. See below.                               |\\r\\n|`ytitle`      |The title of the y-axis (of type `string`).                                       |\\r\\n|`anomalycolumns`|Property relevant only for `anomalychart`. Comma-delimited list of columns, which will be considered as anomaly series and displayed as points on the chart|\\r\\n\\r\\nSome visualizations can be further elaborated by providing the `kind` property, such as:\\r\\n\\r\\n|*Visualization*|`kind`             |Description                        |\\r\\n|---------------|-------------------|-----------------------------------|\\r\\n|`areachart`    |`default`          |Each \"area\" stands on its own.     |\\r\\n|               |`unstacked`        |Same as `default`.                 |\\r\\n|               |`stacked`          |Stack \"areas\" to the right.        |\\r\\n|               |`stacked100`       |Stack \"areas\" to the right and stretch each one to the same width as the others.|\\r\\n|`barchart`     |`default`          |Each \"bar\" stands on its own.      |\\r\\n|               |`unstacked`        |Same as `default`.                 |\\r\\n|               |`stacked`          |Stack \"bars\".                      |\\r\\n|               |`stacked100`       |Stack \"bars\" and stretch each one to the same width as the others.|\\r\\n|`columnchart`  |`default`          |Each \"column\" stands on its own.   |\\r\\n|               |`unstacked`        |Same as `default`.                 |\\r\\n|               |`stacked`          |Stack \"columns\" one atop the other.|\\r\\n|               |`stacked100`       |Stack \"columns\" and stretch each one to the same height as the others.|\\r\\n|`scatterchart` |`map`              |Expected columns are [Longitude, Latitude] or GeoJSON point. Series column is optional.|\\r\\n|`piechart`     |`map`              |Expected columns are [Longitude, Latitude] or GeoJSON point, color-axis and numeric. Supported in Kusto Explorer desktop.|\\r\\n\\r\\nSome visualizations support splitting into multiple y-axis values:\\r\\n\\r\\n|`ysplit`  |Description                                                       |\\r\\n|----------|------------------------------------------------------------------|\\r\\n|`none`    |A single y-axis is displayed for all series data. (Default)       |\\r\\n|`axes`    |A single chart is displayed with multiple y-axes (one per series).|\\r\\n|`panels`  |One chart is rendered for each `ycolumn` value (up to some limit).|\\r\\n\\r\\n> [!NOTE]\\r\\n> The data model of the render operator looks at the tabular data as if it has\\r\\nthree kinds of columns:\\r\\n>\\r\\n> * The x axis column (indicated by the `xcolumn` property).\\r\\n> * The series columns (any number of columns indicated by the `series` property.)\\r\\n  For each record, the combined values of these columns defines a single series,\\r\\n  and the chart has as many series as there are distinct combined values.\\r\\n> * The y axis columns (any number of columns indicated by the `ycolumns`\\r\\n  property).\\r\\n  For each record, the series has as many measurements (\"points\" in the chart)\\r\\n  as there are y-axis columns.\\r\\n\\r\\n## How to render continuous data\\r\\n\\r\\nSeveral visualizations are used for rendering sequences of values, for example, `linechart`, `timechart`, and `areachart`.\\r\\nThese visualizations have the following conceptual model:\\r\\n\\r\\n* One column in the table represents the x-axis of the data. This column can be explicitly defined using the\\r\\n    `xcolumn` property. If not defined, the user agent will pick the first column that is appropriate for the visualization.\\r\\n  * For example: in the `timechart` visualization, the user agent will use the first `datetime` column.\\r\\n  * If this column is of type `dynamic` and it holds an array, the individual values in the array will be treated as the values of the x-axis.\\r\\n* One or more columns in the table represent one or more measures that vary by the x-axis.\\r\\n    These columns can be explicitly defined using the `ycolumns` property. If not defined, the user agent will pick all columns that are appropriate for the visualization.\\r\\n  * For example: in the `timechart` visualization, the user agent will use all columns with a numeric value that have not been specified otherwise.\\r\\n  * If the x-axis is an array, the values of each y-axis should also be an array of a similar length, with each y-axis occurring in a single column.\\r\\n* Zero or more columns in the table represent a unique set of dimensions that group together the measures. These columns can be specified by the `series` property, or the user agent will pick them automatically from the columns that are otherwise unspecified.\\r\\n\\r\\n### Conceptual example\\r\\n\\r\\nYou have a set of anemometers (wind gauges) that measure the wind force, speed, and direction. These wind gauges are spread over a large geographic region.\\r\\n\\r\\nThe data from these measurements is found in a table with one record per measurement by each device, with columns for the timestamp (x-axis), measurements (three y-axes), and a longitude/latitude location (the series). \\r\\n\\r\\nUsing the `render` operator and the `timechart` visualization, you can render time graphs of each measurement in a different panel over time, with each line representing a different device by its longitute/latitude position.\\r\\n\\r\\n## Example: render linechart \\r\\n\\r\\n```\\r\\nrange x from -2 to 2 step 0.1\\r\\n| extend sin = sin(x), cos = cos(x)\\r\\n| extend x_sign = iif(x > 0, \"x_pos\", \"x_neg\")\\r\\n| extend sum_sign = iif(sin + cos > 0, \"sum_pos\", \"sum_neg\")\\r\\n| render linechart with  (ycolumns = sin, cos, series = x_sign, sum_sign)\\r\\n```\\r\\n\\r\\n[Rendering examples in the tutorial](./tutorial.md#displaychartortable)\\r\\n\\r\\n[Anomaly detection](./samples.md#get-more-from-your-data-by-using-kusto-with-machine-learning)',\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/renderoperator\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"repeat\",\"Generates a dynamic array holding a series of equal values.\",\"## Syntax\\r\\n\\r\\n`repeat(`*value*`,` *count*`)` \\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *value*: The value of the element in the resulting array. The type of *value* can be boolean, integer, long, real, datetime, or timespan.   \\r\\n* *count*: The count of the elements in the resulting array. The *count* must be an integer number.\\r\\nIf *count* is equal to zero, a empty array is returned.\\r\\nIf *count* is less than zero, a null value is returned.\",\"The following example returns `[1, 1, 1]`:\\r\\n\\r\\n```\\r\\nT | extend r = repeat(1, 3)\\r\\n```\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/repeatfunction\",\"repeatfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"replace_regex\",\"Replaces all regex matches with another string.\",\"## Syntax\\r\\n\\r\\n`replace_regex(`*text*`,`*regex*`,` *rewrite*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *text*: A string.\\r\\n* *regex*: The [regular expression](https://github.com/google/re2/wiki/Syntax) to search *text*. The expression can contain capture groups in parentheses.\\r\\n* *rewrite*: The replacement regex for any match made by *matchingRegex*. Use `\\\\0` to refer to the whole match, `\\\\1` for the first capture group, `\\\\2` and so on for subsequent capture groups.\\r\\n\\r\\n## Returns\\r\\n\\r\\n*source* after replacing all matches of *regex* with evaluations of *rewrite*. Matches do not overlap.\\r\\n\\r\\n## See also\\r\\n\\r\\n* For string matching, see [replace_string()](replace-string-function.md).\\r\\n* For replacing a set of characters, see [translate()](translatefunction.md).\",\"```\\r\\nrange x from 1 to 5 step 1\\r\\n| extend str=strcat('Number is ', tostring(x))\\r\\n| extend replaced=replace_regex(str, @'is (\\\\d+)', @'was: \\\\1')\\r\\n```\\r\\n\\r\\n**Output:**\\r\\n\\r\\n| x    | str | replaced|\\r\\n|---|---|---|\\r\\n| 1    | Number is 1.000000  | Number was: 1.000000|\\r\\n| 2    | Number is 2.000000  | Number was: 2.000000|\\r\\n| 3    | Number is 3.000000  | Number was: 3.000000|\\r\\n| 4    | Number is 4.000000  | Number was: 4.000000|\\r\\n| 5    | Number is 5.000000  | Number was: 5.000000|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/replace-regex-function\",\"replace-regex-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"replace_string\",\"Replaces all string matches with another string.\",\"## Syntax\\r\\n\\r\\n`replace_string(`*text*`,` *lookup*`,` *rewrite*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *text*: A string.\\r\\n* *lookup*: A string to be replaced.\\r\\n* *rewrite*: A replacement string.\\r\\n\\r\\n## Returns\\r\\n\\r\\n*text* after replacing all matches of *lookup* with evaluations of *rewrite*. Matches do not overlap.\\r\\n\\r\\n## See also\\r\\n\\r\\n* For regex matching, see [replace_regex()](replace-regex-function.md).\\r\\n* For replacing a set of characters, see [translate()](translatefunction.md).\",\"```\\r\\nrange x from 1 to 5 step 1\\r\\n| extend str=strcat('Number is ', tostring(x))\\r\\n| extend replaced=replace_string(str, 'is', 'was')\\r\\n```\\r\\n\\r\\n**Output:**\\r\\n\\r\\n| x    | str | replaced|\\r\\n|---|---|---|\\r\\n| 1    | Number is 1.000000  | Number was 1.000000|\\r\\n| 2    | Number is 2.000000  | Number was 2.000000|\\r\\n| 3    | Number is 3.000000  | Number was 3.000000|\\r\\n| 4    | Number is 4.000000  | Number was 4.000000|\\r\\n| 5    | Number is 5.000000  | Number was 5.000000|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/replace-string-function\",\"replace-string-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"reverse\",\"Function reverses the order of the input string.\\r\\nIf the input value isn't of type `string`, then the function forcibly casts the value to type `string`.\",\"## Syntax\\r\\n\\r\\n`reverse(`*source*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *source*: input value.  \\r\\n\\r\\n## Returns\\r\\n\\r\\nThe reverse order of a string value.\",\"```\\r\\nprint str = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\\"\\r\\n| extend rstr = reverse(str)\\r\\n```\\r\\n\\r\\n|str|rstr|\\r\\n|---|---|\\r\\n|ABCDEFGHIJKLMNOPQRSTUVWXYZ|ZYXWVUTSRQPONMLKJIHGFEDCBA|\\r\\n\\r\\n```\\r\\nprint ['int'] = 12345, ['double'] = 123.45, \\r\\n['datetime'] = datetime(2017-10-15 12:00), ['timespan'] = 3h\\r\\n| project rint = reverse(['int']), rdouble = reverse(['double']), \\r\\nrdatetime = reverse(['datetime']), rtimespan = reverse(['timespan'])\\r\\n```\\r\\n\\r\\n|rint|rdouble|rdatetime|rtimespan|\\r\\n|---|---|---|---|\\r\\n|54321|54.321|Z0000000.00:00:21T51-01-7102|00:00:30|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/reversefunction\",\"reversefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"rolling_percentile\",\"Returns an estimate for the specified percentile of the *ValueColumn* population in a rolling (sliding) *BinsPerWindow* size window per *BinSize*.\",\"The plugin is invoked with the [`evaluate`](evaluateoperator.md) operator.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `| evaluate` `rolling_percentile(`*ValueColumn*`,` *Percentile*`,` *IndexColumn*`,` *BinSize*`,` *BinsPerWindow*  [`,` *dim1*`,` *dim2*`,` ...] `)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T*: The input tabular expression.\\r\\n* *ValueColumn*: The name of the column with values to calculate the percentile of. \\r\\n* *Percentile*: Scalar with the percentile to calculate.\\r\\n* *IndexColumn*: The name of the column to run the rolling window over.\\r\\n* *BinSize*: Scalar with size of the bins to apply over the *IndexColumn*.\\r\\n* *BinsPerWindow*: Scalar with number of bins included in each window.\\r\\n* *dim1*, *dim2*, ... : (optional) list of the dimensions columns to slice by.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a table with a row per each bin (and combination of dimensions if specified) that has the rolling percentile of values in the window ending at the bin (inclusive). \\r\\nOutput table schema is:\\r\\n\\r\\n|IndexColumn|dim1|...|dim_n|rolling_BinsPerWindow_percentile_ValueColumn_Pct\\r\\n|---|---|---|---|---|\",'### Rolling 3-day median value per day \\r\\n\\r\\nThe next query calculates a 3-day median value in daily granularity. Each row in the output represents the median value for the last 3 bins (days), including the bin itself.\\r\\n\\r\\n```\\r\\nlet T = \\r\\nrange idx from 0 to 24*10-1 step 1\\r\\n| project Timestamp = datetime(2018-01-01) + 1h*idx, val=idx+1\\r\\n| extend EvenOrOdd = iff(val % 2 == 0, \"Even\", \"Odd\");\\r\\n T  \\r\\n | evaluate rolling_percentile(val, 50, Timestamp, 1d, 3)\\r\\n```\\r\\n\\r\\n|Timestamp|rolling_3_percentile_val_50|\\r\\n|---|---|\\r\\n|2018-01-01 00:00:00.0000000|\\t12|\\r\\n|2018-01-02 00:00:00.0000000|\\t24|\\r\\n|2018-01-03 00:00:00.0000000|\\t36|\\r\\n|2018-01-04 00:00:00.0000000|\\t60|\\r\\n|2018-01-05 00:00:00.0000000|\\t84|\\r\\n|2018-01-06 00:00:00.0000000|\\t108|\\r\\n|2018-01-07 00:00:00.0000000|\\t132|\\r\\n|2018-01-08 00:00:00.0000000|\\t156|\\r\\n|2018-01-09 00:00:00.0000000|\\t180|\\r\\n|2018-01-10 00:00:00.0000000|\\t204|\\r\\n\\r\\n### Rolling 3-day median value per day by dimension\\r\\n\\r\\nSame example from above, but now also calculates the rolling window partitioned for each value of the dimension.\\r\\n\\r\\n```\\r\\nlet T = \\r\\nrange idx from 0 to 24*10-1 step 1\\r\\n| project Timestamp = datetime(2018-01-01) + 1h*idx, val=idx+1\\r\\n| extend EvenOrOdd = iff(val % 2 == 0, \"Even\", \"Odd\");\\r\\n T  \\r\\n | evaluate rolling_percentile(val, 50, Timestamp, 1d, 3, EvenOrOdd)\\r\\n```\\r\\n\\r\\n|Timestamp|\\tEvenOrOdd|\\trolling_3_percentile_val_50|\\r\\n|---|---|---|\\r\\n|2018-01-01 00:00:00.0000000|\\tEven|\\t12|\\r\\n|2018-01-02 00:00:00.0000000|\\tEven|\\t24|\\r\\n|2018-01-03 00:00:00.0000000|\\tEven|\\t36|\\r\\n|2018-01-04 00:00:00.0000000|\\tEven|\\t60|\\r\\n|2018-01-05 00:00:00.0000000|\\tEven|\\t84|\\r\\n|2018-01-06 00:00:00.0000000|\\tEven|\\t108|\\r\\n|2018-01-07 00:00:00.0000000|\\tEven|\\t132|\\r\\n|2018-01-08 00:00:00.0000000|\\tEven|\\t156|\\r\\n|2018-01-09 00:00:00.0000000|\\tEven|\\t180|\\r\\n|2018-01-10 00:00:00.0000000|\\tEven|\\t204|\\r\\n|2018-01-01 00:00:00.0000000|\\tOdd|\\t11|\\r\\n|2018-01-02 00:00:00.0000000|\\tOdd|    23|\\r\\n|2018-01-03 00:00:00.0000000|\\tOdd|\\t35|\\r\\n|2018-01-04 00:00:00.0000000|\\tOdd|\\t59|\\r\\n|2018-01-05 00:00:00.0000000|\\tOdd|\\t83|\\r\\n|2018-01-06 00:00:00.0000000|\\tOdd|\\t107|\\r\\n|2018-01-07 00:00:00.0000000|\\tOdd|\\t131|\\r\\n|2018-01-08 00:00:00.0000000|\\tOdd|\\t155|\\r\\n|2018-01-09 00:00:00.0000000|\\tOdd|\\t179|\\r\\n|2018-01-10 00:00:00.0000000|\\tOdd|\\t203|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/rolling-percentile-plugin\",\"rolling-percentile-plugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"round\",\"Returns the rounded source to the specified precision.\",\"## Syntax\\r\\n\\r\\n`round(`*source* [`,` *Precision*]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *source*: The source scalar the round is calculated on.\\r\\n* *Precision*: Number of digits the source will be rounded to.(default value is 0)\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe rounded source to the specified precision.\\r\\n\\r\\nRound is different than [`bin()`](binfunction.md)/[`floor()`](floorfunction.md) in\\r\\nthat the first rounds a number to a specific number of digits while the last rounds value to an integer multiple \\r\\nof a given bin size (round(2.15, 1) returns 2.2 while bin(2.15, 1) returns 2).\",\"```\\r\\nround(2.15, 1)                   // 2.2\\r\\nround(2.15) (which is the same as round(2.15, 0))                   // 2\\r\\nround(-50.55, -2)                   // -100\\r\\nround(21.5, -1)                   // 20\\r\\n```\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/roundfunction\",\"roundfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"row_cumsum\",\"Calculates the cumulative sum of a column in a [serialized row set](./windowsfunctions.md#serialized-row-set).\",\"## Syntax\\r\\n\\r\\n`row_cumsum` `(` *Term* [`,` *Restart*] `)`\\r\\n\\r\\n* *Term* is an expression indicating the value to be summed.\\r\\n  The expression must be a scalar of one of the following types:\\r\\n  `decimal`, `int`, `long`, or `real`. Null *Term* values do not affect the\\r\\n  sum.\\r\\n* *Restart* is an optional argument of type `bool` that indicates when the\\r\\n  accumulation operation should be restarted (set back to 0). It can be\\r\\n  used to indicate partitions of the data; see the second example below.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe function returns the cumulative sum of its argument.\",'The following example shows how to calculate the cumulative sum of the first\\r\\nfew even integers.\\r\\n\\r\\n```\\r\\ndatatable (a:long) [\\r\\n    1, 2, 3, 4, 5, 6, 7, 8, 9, 10\\r\\n]\\r\\n| where a%2==0\\r\\n| serialize cs=row_cumsum(a)\\r\\n```\\r\\n\\r\\na    | cs\\r\\n-----|-----\\r\\n2    | 2\\r\\n4    | 6\\r\\n6    | 12\\r\\n8    | 20\\r\\n10   | 30\\r\\n\\r\\nThis example shows how to calculate the cumulative sum (here, of `salary`)\\r\\nwhen the data is partitioned (here, by `name`):\\r\\n\\r\\n```\\r\\ndatatable (name:string, month:int, salary:long)\\r\\n[\\r\\n    \"Alice\", 1, 1000,\\r\\n    \"Bob\",   1, 1000,\\r\\n    \"Alice\", 2, 2000,\\r\\n    \"Bob\",   2, 1950,\\r\\n    \"Alice\", 3, 1400,\\r\\n    \"Bob\",   3, 1450,\\r\\n]\\r\\n| order by name asc, month asc\\r\\n| extend total=row_cumsum(salary, name != prev(name))\\r\\n```\\r\\n\\r\\nname   | month  | salary  | total\\r\\n-------|--------|---------|------\\r\\nAlice  | 1      | 1000    | 1000\\r\\nAlice  | 2      | 2000    | 3000\\r\\nAlice  | 3      | 1400    | 4400\\r\\nBob    | 1      | 1000    | 1000\\r\\nBob    | 2      | 1950    | 2950\\r\\nBob    | 3      | 1450    | 4400',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/rowcumsumfunction\",\"rowcumsumfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"row_number\",\"Returns the current row's index in a [serialized row set](./windowsfunctions.md#serialized-row-set).\\r\\nThe row index starts by default at `1` for the first row, and is incremented by `1` for each additional row.\\r\\nOptionally, the row index can start at a different value than `1`.\\r\\nAdditionally, the row index may be reset according to some provided predicate.\",\"## Syntax\\r\\n\\r\\n`row_number` `(` [*StartingIndex* [`,` *Restart*]] `)`\\r\\n\\r\\n* *StartingIndex* is a constant expression of type `long` indicating the value\\r\\n  of the row index to start at (or to restart to). The default value is `1`.\\r\\n* *Restart* is an optional argument of type `bool` that indicates when the\\r\\n  numbering is to be restarted to the *StartingIndex* value. If not provided,\\r\\n  the default value of `false` is used.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe function returns the row index of the current row as a value of type `long`.\",'The following example returns a table with two columns, the first column (`a`)\\r\\nwith numbers from `10` down to `1`, and the second column (`rn`) with numbers\\r\\nfrom `1` up to `10`:\\r\\n\\r\\n```\\r\\nrange a from 1 to 10 step 1\\r\\n| sort by a desc\\r\\n| extend rn=row_number()\\r\\n```\\r\\n\\r\\nThe following example is similar to the above, only the second column (`rn`)\\r\\nstarts at `7`:\\r\\n\\r\\n```\\r\\nrange a from 1 to 10 step 1\\r\\n| sort by a desc\\r\\n| extend rn=row_number(7)\\r\\n```\\r\\n\\r\\nThe last example shows how one can partition the data and number the rows\\r\\nper each partition. Here, we partition the data by `Airport`:\\r\\n\\r\\n```\\r\\ndatatable (Airport:string, Airline:string, Departures:long)\\r\\n[\\r\\n  \"TLV\", \"LH\", 1,\\r\\n  \"TLV\", \"LY\", 100,\\r\\n  \"SEA\", \"LH\", 1,\\r\\n  \"SEA\", \"BA\", 2,\\r\\n  \"SEA\", \"LY\", 0\\r\\n]\\r\\n| sort by Airport asc, Departures desc\\r\\n| extend Rank=row_number(1, prev(Airport) != Airport)\\r\\n```\\r\\n\\r\\nRunning this query produces the following result:\\r\\n\\r\\nAirport  | Airline  | Departures  | Rank\\r\\n---------|----------|-------------|------\\r\\nSEA      | BA       | 2           | 1\\r\\nSEA      | LH       | 1           | 2\\r\\nSEA      | LY       | 0           | 3\\r\\nTLV      | LY       | 100         | 1\\r\\nTLV      | LH       | 1           | 2',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/rownumberfunction\",\"rownumberfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"row_rank\",\"Returns the current row's rank in a [serialized row set](./windowsfunctions.md#serialized-row-set).\\r\\nThe row index starts by default at `1` for the first row, and is incremented by `1` whenever the provided *Term* is different than the previous row's *Term*.\",\"## Syntax\\r\\n\\r\\n`row_rank` `(` *Term* `)`\\r\\n\\r\\n* *Term* is is an expression indicating the value to consider for the rank. The rank is increased whenever the *Term* changes.\\r\\n  \\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the row rank of the current row as a value of type `long`.\",'This example shows how to rank the `Airline` by the number of departures from the SEA `Airport`:\\r\\n\\r\\n```\\r\\ndatatable (Airport:string, Airline:string, Departures:long)\\r\\n[\\r\\n  \"SEA\", \"LH\", 3,\\r\\n  \"SEA\", \"LY\", 100,\\r\\n  \"SEA\", \"UA\", 3,\\r\\n  \"SEA\", \"BA\", 2,\\r\\n  \"SEA\", \"EL\", 3\\r\\n]\\r\\n| sort by Departures asc\\r\\n| extend Rank=row_rank(Departures)\\r\\n```\\r\\n\\r\\nRunning this query produces the following result:\\r\\n\\r\\nAirport  | Airline  | Departures  | Rank\\r\\n---------|----------|-------------|------\\r\\nSEA      | BA       | 2           | 1\\r\\nSEA      | LH       | 3           | 2\\r\\nSEA      | UA       | 3           | 2\\r\\nSEA      | EL       | 3           | 2\\r\\nSEA      | LY       | 100         | 3',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/rowrankfunction\",\"rowrankfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"row_window_session\",\"`row_window_session()` calculates session start values of a column in a [serialized row set](./windowsfunctions.md#serialized-row-set).\",\"## Syntax\\r\\n\\r\\n`row_window_session` `(` *`Expr`* `,` *`MaxDistanceFromFirst`* `,` *`MaxDistanceBetweenNeighbors`* [`,` *`Restart`*] `)`\\r\\n\\r\\n* *`Expr`* is an expression whose values are grouped together in sessions.\\r\\n  Null values produce null values, and the next value starts a new session.\\r\\n  *`Expr`* must be a scalar expression of type `datetime`.\\r\\n* *`MaxDistanceFromFirst`* establishes one criterion for starting a new session:\\r\\n  The maximum distance between the current value of *`Expr`* and the value of\\r\\n  *`Expr`* at the beginning of the session.\\r\\n  It is a scalar constant of type `timespan`.\\r\\n* *`MaxDistanceBetweenNeighbors`* establishes a second criterion for starting a new session:\\r\\n  The maximum distance from one value of *`Expr`* to the next.\\r\\n  It is a scalar constant of type `timespan`.\\r\\n* *Restart* is an optional scalar expression of type `boolean`. If specified,\\r\\n  every value that evaluates to `true` will immediately restart the session.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe function returns the values at the beginning of each session.\\r\\n\\r\\n**Notes**\\r\\n\\r\\nThe function has the following conceptual calculation model:\\r\\n\\r\\n1. Go over the input sequence of values *`Expr`* in order.\\r\\n1. For every value, determine if it establishes a new session.\\r\\n1. If it establishes a new session, emit the value of *`Expr`*. Otherwise, emit the previous value of *`Expr`*.\\r\\n\\r\\nThe condition that determines if the value represents a new session is\\r\\na logical OR one of the following conditions:\\r\\n\\r\\n* If there was no previous session value, or the previous session value was null.\\r\\n* If the value of *`Expr`* equals or exceeds the previous session value plus\\r\\n  *`MaxDistanceFromFirst`*.\\r\\n* If the value of *`Expr`* equals or exceeds the previous value of *`Expr`*\\r\\n  plus *`MaxDistanceBetweenNeighbors`*.\\r\\n* If *`Restart`* condition is specified and evaluates to `true`.\",\"The following example shows how to calculate the session start values for a table\\r\\nwith two columns: an `ID` column that identifies a sequence, and a `Timestamp`\\r\\ncolumn that gives the time at which each record occurred. In this example,\\r\\na session can't exceed 1 hour, and it continues as long as records are less than\\r\\n5 minutes apart.\\r\\n\\r\\n```\\r\\ndatatable (ID:string, Timestamp:datetime) [\\r\\n    // ...\\r\\n]\\r\\n| sort by ID asc, Timestamp asc\\r\\n| extend SessionStarted = row_window_session(Timestamp, 1h, 5m, ID != prev(ID))\\r\\n```\\r\\n\\r\\n## See also\\r\\n\\r\\n* [scan operator](scan-operator.md)\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/row-window-session-function\",\"row-window-session-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"rows_near\",\"Finds rows near a specified condition.\",\"The plugin is invoked with the [`evaluate`](evaluateoperator.md) operator.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `| evaluate` `rows_near(`*Condition*`,` *NumRows*`,` [`,` *RowsAfter* ]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T*: A serialized input tabular expression.\\r\\n* *Condition*: Boolean expression representing the condition to find rows around. \\r\\n* *NumRows*: The number of rows to find before and after the condition.\\r\\n* *RowsAfter*: (optional) when specified, overrides the number of rows to find after the condition.\\r\\n\\r\\n## Returns\\r\\n\\r\\nEvery row from the input that is within *NumRows* from a `true` *Condition*,\\r\\nWhen *RowsAfter* is specified, returns every row from the input that is *NumRows* before or *RowsAfter* after a `true` *Condition*.\",'Find rows with an `\"Error\"` *State*, and returns `2` rows before and after the `\"Error\"` record.\\r\\n\\r\\n```\\r\\ndatatable (Timestamp:datetime, Value:long, State:string )\\r\\n[\\r\\n    datetime(2021-06-01), 1, \"Success\",\\r\\n    datetime(2021-06-02), 4, \"Success\",\\r\\n    datetime(2021-06-03), 3, \"Success\",\\r\\n    datetime(2021-06-04), 11, \"Success\",\\r\\n    datetime(2021-06-05), 15, \"Success\",\\r\\n    datetime(2021-06-06), 2, \"Success\",\\r\\n    datetime(2021-06-07), 19, \"Error\",\\r\\n    datetime(2021-06-08), 12, \"Success\",\\r\\n    datetime(2021-06-09), 7, \"Success\",\\r\\n    datetime(2021-06-10), 9, \"Success\",\\r\\n    datetime(2021-06-11), 4, \"Success\",\\r\\n    datetime(2021-06-12), 1, \"Success\",\\r\\n]\\r\\n| sort by Timestamp asc \\r\\n| evaluate rows_near(State == \"Error\", 2)\\r\\n```\\r\\n\\r\\n|Timestamp|Value|State|\\r\\n|---|---|---|\\r\\n|2021-06-05 00:00:00.0000000|15|Success|\\r\\n|2021-06-06 00:00:00.0000000|2|Success|\\r\\n|2021-06-07 00:00:00.0000000|19|Error|\\r\\n|2021-06-08 00:00:00.0000000|12|Success|\\r\\n|2021-06-09 00:00:00.0000000|7|Success|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/rows-near-plugin\",\"rows-near-plugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"sample\",\"Returns up to the specified number of random rows from the input table.\",\"```\\r\\nT | sample 5\\r\\n```\\r\\n\\r\\n> [!NOTE]\\r\\n> * `sample` is geared for speed rather than even distribution of values. Specifically, it means that it will not produce 'fair' results if used after operators that union 2 data sets of different sizes (such as a `union` or `join` operators). It's recommended to use `sample` right after the table reference and filters.\\r\\n> * `sample` is a non-deterministic operator, and will return different result set each time it is evaluated during the query. For example, the following query yields two different rows (even if one would expect to return the same row twice).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `| sample` *NumberOfRows*\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *NumberOfRows*: The number of rows of *T* to return. You can specify any numeric expression.\",\"```\\r\\nlet _data = range x from 1 to 100 step 1;\\r\\nlet _sample = _data | sample 1;\\r\\nunion (_sample), (_sample)\\r\\n```\\r\\n\\r\\n| x   |\\r\\n| --- |\\r\\n| 83  |\\r\\n| 3   |\\r\\n\\r\\nTo ensure that in example above `_sample` is calculated once, one can use [materialize()](./materializefunction.md) function:\\r\\n\\r\\n```\\r\\nlet _data = range x from 1 to 100 step 1;\\r\\nlet _sample = materialize(_data | sample 1);\\r\\nunion (_sample), (_sample)\\r\\n```\\r\\n\\r\\n| x   |\\r\\n| --- |\\r\\n| 34  |\\r\\n| 34  |\\r\\n\\r\\nTo sample a certain percentage of your data (rather than a specified number of rows), you can use\\r\\n\\r\\n```\\r\\nStormEvents | where rand() < 0.1\\r\\n```\\r\\n\\r\\nTo sample keys rather than rows (for example - sample 10 Ids and get all rows for these Ids) you can use [`sample-distinct`](./sampledistinctoperator.md) in combination with the `in` operator.\\r\\n\\r\\n```\\r\\nlet sampleEpisodes = StormEvents | sample-distinct 10 of EpisodeId;\\r\\nStormEvents\\r\\n| where EpisodeId in (sampleEpisodes)\\r\\n```\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/sampleoperator\",\"sampleoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"sample-distinct\",\"Returns a single column that contains up to the specified number of distinct values of the requested column.\",\"the default (and currently only) flavor of the operator tries to return an answer as quickly as possible (rather than trying to make a fair sample)\\r\\n\\r\\n```\\r\\nT | sample-distinct 5 of DeviceId\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `| sample-distinct` *NumberOfValues* `of` *ColumnName*\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *NumberOfValues*: The number distinct values of *T* to return. You can specify any numeric expression.\\r\\n\\r\\n**Tips**\\r\\n\\r\\nCan be handy to sample a population by putting `sample-distinct` in a let statement and later filter using the `in` operator (see example) \\r\\n\\r\\nIf you want the top values rather than just a sample, you can use the [top-hitters](tophittersoperator.md) operator \\r\\n\\r\\nif you want to sample data rows (rather than values of a specific column), refer to the [sample operator](sampleoperator.md)\",\"Get 10 distinct values from a population\\r\\n\\r\\n```\\r\\nStormEvents | sample-distinct 10 of EpisodeId\\r\\n\\r\\n```\\r\\n\\r\\nSample a population and do further computation knowing the summarize won't exceed query limits. \\r\\n\\r\\n```\\r\\nlet sampleEpisodes = StormEvents | sample-distinct 10 of EpisodeId;\\r\\nStormEvents \\r\\n| where EpisodeId in (sampleEpisodes) \\r\\n| summarize totalInjuries=sum(InjuriesDirect) by EpisodeId\\r\\n```\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/sampledistinctoperator\",\"sampledistinctoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"scan\",\"Scans data, matches, and builds sequences based on the predicates.\",'Matching records are determined according to predicates defined in the operator\\u2019s steps. A predicate can depend on the state that is generated by previous steps.\\r\\nThe output for the matching record is determined by the input record and assignments defined in the operator\\'s steps.\\r\\n\\r\\nSteps are evaluated from last to first, according to the [scan logic](#scan-logic).\\r\\n\\r\\n```\\r\\nT\\r\\n| sort by Timestamp asc\\r\\n| scan with \\r\\n(\\r\\n    step s1 output=last: Event == \"Start\";\\r\\n    step s2: Event != \"Start\" and Event != \"Stop\" and Timestamp - s1.Timestamp <= 5m;\\r\\n    step s3: Event == \"Stop\"  and Ts - s1.Timestamp <= 5m;\\r\\n)\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `| scan` [ `with_match_id` `=` *MatchIdColumnName* ] [ `declare` `(` *ColumnDeclarations* `)` ] `with` `(` *StepDefinitions* `)`\\r\\n\\r\\n### *ColumnDeclarations* syntax\\r\\n\\r\\n*ColumnName* `:` *ColumnType*[`=` *DefaultValue* ] [`,` ... ]\\r\\n\\r\\n### *StepDefinition* syntax\\r\\n\\r\\n`step` *StepName* [ `output` = `all` | `last` | `none`] `:` *Condition* [ `=>` *Column* `=` *Assignment* [`,` ... ] ] `;`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *MatchIdColumnName*:  Indicates the name of a column of type `long` that is appended to the output as part of the scan execution. Indicates the 0-based index of the match for the row. (Optional)\\r\\n* *ColumnDeclarations*: Declares an extension to the schema of the operator\\u2019s source. Additional columns are assigned in the steps or *DefaultValue* if not assigned. *DefaultValue* is `null` if not specified. (Optional)\\r\\n* *StepName*: Used to reference values in the state of scan for conditions and assignments. The step name must be unique.\\r\\n* *Condition*: A Boolean expression that defines which records from the input matches the step. A record matches the step when the condition is true with the step\\u2019s state or with the previous step\\u2019s state.\\r\\n* *Assignment*: A scalar expression that is assigned to the corresponding column when a record matches a step.\\r\\n* `output`: Controls the output logic of the step on repeated matches. `all` (default) outputs all records matching the step, `last` outputs only the last record in a series of repeating matches for the step, `none` does not output records matching the step.\\r\\n\\r\\n## Returns\\r\\n\\r\\nA record for each match of a record from the input to a step. The schema of the output is the schema of the source extended with the column in the `declare` clause.','### Cumulative sum\\r\\n\\r\\nCalculate the cumulative sum for an input column. The result of this example is equivalent to using [row_cumsum()](rowcumsumfunction.md).\\r\\n\\r\\n```\\r\\nrange x from 1 to 5 step 1 \\r\\n| scan declare (cumulative_x:long=0) with \\r\\n(\\r\\n    step s1: true => cumulative_x = x + s1.cumulative_x;\\r\\n)\\r\\n```\\r\\n\\r\\n|x|cumulative_x|\\r\\n|---|---|\\r\\n|1|1|\\r\\n|2|3|\\r\\n|3|6|\\r\\n|4|10|\\r\\n|5|15|\\r\\n\\r\\n### Cumulative sum on multiple columns with a reset condition\\r\\n\\r\\nCalculate the cumulative sum for two input column, reset the sum value to the current row value whenever the cumulative sum reached 10 or more.\\r\\n\\r\\n```\\r\\nrange x from 1 to 5 step 1\\r\\n| extend y = 2 * x\\r\\n| scan declare (cumulative_x:long=0, cumulative_y:long=0) with \\r\\n(\\r\\n    step s1: true => cumulative_x = iff(s1.cumulative_x >= 10, x, x + s1.cumulative_x), \\r\\n                     cumulative_y = iff(s1.cumulative_y >= 10, y, y + s1.cumulative_y);\\r\\n)\\r\\n```\\r\\n\\r\\n|x|y|cumulative_x|cumulative_y|\\r\\n|---|---|---|---|\\r\\n|1|2|1|2|\\r\\n|2|4|3|6|\\r\\n|3|6|6|12|\\r\\n|4|8|10|8|\\r\\n|5|10|5|18|\\r\\n\\r\\n### Fill forward a column\\r\\n\\r\\nFill forward a string column. Each empty value is assigned the last seen non-empty value.\\r\\n\\r\\n```\\r\\nlet Events = datatable ( Ts: timespan, Event: string ) \\r\\n[   0m, \"A\",\\r\\n1m, \"\",\\r\\n2m, \"B\",\\r\\n3m, \"\",\\r\\n4m, \"\",\\r\\n6m, \"C\",\\r\\n8m, \"\",\\r\\n11m, \"D\",\\r\\n12m, \"\"  ]\\r\\n;\\r\\nEvents\\r\\n| sort by Ts asc\\r\\n| scan declare (Event_filled:string=\"\") with \\r\\n(\\r\\n    step s1: true => Event_filled = iff(isempty(Event), s1.Event_filled, Event);\\r\\n)\\r\\n```\\r\\n\\r\\n|Ts|Event|Event_filled|\\r\\n|---|---|---|\\r\\n|00:00:00|A|A|\\r\\n|00:01:00||A|\\r\\n|00:02:00|B|B|\\r\\n|00:03:00||B|\\r\\n|00:04:00||B|\\r\\n|00:06:00|C|C|\\r\\n|00:08:00||C|\\r\\n|00:11:00|D|D|\\r\\n|00:12:00||D|\\r\\n\\r\\n### Sessions tagging \\r\\n\\r\\nDivide the input into sessions: a session ends 30 minutes after the first event of the session, after which a new session starts. Note the use of `with_match_id` flag which assigns a unique value for each distinct match (session) of *scan*. Also note the special use of two *steps* in this example, `inSession` has `true` as condition so it captures and outputs all the records from the input while `endSession` captures records that happen more than 30m from the `sessionStart` value for the current match. The `endSession` step has `output=none` meaning it doesn\\'t produce output records. The `endSession` step is used to advance the state of the current match from `inSession` to `endSession`, allowing a new match (session) to begin, starting from the current record.\\r\\n\\r\\n```\\r\\nlet Events = datatable ( Ts: timespan, Event: string ) \\r\\n[   0m, \"A\",\\r\\n1m, \"A\",\\r\\n2m, \"B\",\\r\\n3m, \"D\",\\r\\n32m, \"B\",\\r\\n36m, \"C\",\\r\\n38m, \"D\",\\r\\n41m, \"E\",\\r\\n75m, \"A\"  ]\\r\\n;\\r\\nEvents\\r\\n| sort by Ts asc\\r\\n| scan with_match_id=session_id declare (sessionStart:timespan) with \\r\\n(\\r\\n    step inSession: true => sessionStart = iff(isnull(inSession.sessionStart), Ts, inSession.sessionStart);\\r\\n    step endSession output=none: Ts - inSession.sessionStart > 30m;\\r\\n)\\r\\n```\\r\\n\\r\\n|Ts|Event|sessionStart|session_id|\\r\\n|---|---|---|---|\\r\\n|00:00:00|A|00:00:00|0|\\r\\n|00:01:00|A|00:00:00|0|\\r\\n|00:02:00|B|00:00:00|0|\\r\\n|00:03:00|D|00:00:00|0|\\r\\n|00:32:00|B|00:32:00|1|\\r\\n|00:36:00|C|00:32:00|1|\\r\\n|00:38:00|D|00:32:00|1|\\r\\n|00:41:00|E|00:32:00|1|\\r\\n|01:15:00|A|01:15:00|2|\\r\\n\\r\\n### Events between Start and Stop\\r\\n\\r\\nFind all sequences of events between the event `Start` and the event `Stop` that occur within 5 minutes. Assign a match ID for each sequence. \\r\\n\\r\\n```\\r\\nlet Events = datatable ( Ts: timespan, Event: string ) \\r\\n[   0m, \"A\",\\r\\n1m, \"Start\",\\r\\n2m, \"B\",\\r\\n3m, \"D\",\\r\\n4m, \"Stop\",\\r\\n6m, \"C\",\\r\\n8m, \"Start\",\\r\\n11m, \"E\",\\r\\n12m, \"Stop\"  ]\\r\\n;\\r\\nEvents\\r\\n| sort by Ts asc\\r\\n| scan with_match_id=m_id with \\r\\n(\\r\\n    step s1: Event == \"Start\";\\r\\n    step s2: Event != \"Start\" and Event != \"Stop\" and Ts - s1.Ts <= 5m;\\r\\n    step s3: Event == \"Stop\"  and Ts - s1.Ts <= 5m;\\r\\n)\\r\\n```\\r\\n\\r\\n|Ts|Event|m_id|\\r\\n|---|---|---|\\r\\n|00:01:00|Start|0|\\r\\n|00:02:00|B|0|\\r\\n|00:03:00|D|0|\\r\\n|00:04:00|Stop|0|\\r\\n|00:08:00|Start|1|\\r\\n|00:11:00|E|1|\\r\\n|00:12:00|Stop|1|\\r\\n\\r\\n### Calculate a custom funnel of events\\r\\n\\r\\nCalculate a funnel completion of the sequence  `Hail` -> `Tornado` -> `Thunderstorm Wind` by `State` with custom thresholds on the times between the events (`Tornado` within `1h` and `Thunderstorm Wind` within `2h`). This example is similar to the [funnel_sequence_completion plugin](funnel-sequence-completion-plugin.md), but allows greater flexibility.\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| partition hint.strategy=native by State \\r\\n(\\r\\n    sort by StartTime asc\\r\\n    | scan with \\r\\n    (\\r\\n        step hail: EventType == \"Hail\";\\r\\n        step tornado: EventType == \"Tornado\" and StartTime - hail.StartTime <= 1h;\\r\\n        step thunderstormWind: EventType == \"Thunderstorm Wind\" and StartTime - tornado.StartTime <= 2h;\\r\\n    )\\r\\n)\\r\\n| summarize dcount(State) by EventType\\r\\n```\\r\\n\\r\\n|EventType|dcount_State|\\r\\n|---|---|\\r\\n|Hail|50|\\r\\n|Tornado|34|\\r\\n|Thunderstorm Wind|32|\\r\\n\\r\\n## Scan logic\\r\\n\\r\\n`scan` goes over the serialized input data, record by record, comparing each record against each step\\u2019s condition while taking into account the current state of each step.\\r\\n\\r\\n### Scan\\'s state\\r\\n\\r\\nThe state that is used behind the scenes by `scan` is a set of records, with the same schema of the output, including source and declared columns.\\r\\nEach step has its own state, the state of step *k* has *k* records in it, where each record in the step\\u2019s state corresponds to a step up to *k*.\\r\\n\\r\\nFor example, if a scan operator has *n* steps named *s_1*, *s_2*, ..., *s_n* then step *s_k* would have *k* records in its state corresponding to *s_1*, *s_2*, ..., *s_k*.\\r\\nReferencing a value in the state is done in the form *StepName*.*ColumnName*. For example, `s_2.col1` references column `col1` that belongs to step *s_2* in the state of *s_k*.\\r\\n\\r\\n### Matching logic\\r\\n\\r\\nEach record from the input is evaluated against all of scan\\u2019s steps, starting from last to first. When a record *r* is considered against some step *s_k*, the following logic is applied:\\r\\n\\r\\n* If the state of the previous step is not empty and the record *r* satisfies the condition of *s_k* using the state of the previous step *s_(k-1)*, then the following happens:\\r\\n    1. The state of *s_k* is deleted.\\r\\n    1. The state of *s_(k-1)* becomes (\"promoted\" to be) the state of *s_k*, and the state of *s_(k-1)* becomes empty.\\r\\n    1. All the assignments of *s_k* are calculated and extend *r*.\\r\\n    1. The extended *r* is added to the output (if *s_k* is defined as `output=all`) and to the state of *s_k*.\\r\\n* If *r* doesn\\'t satisfy the condition of *s_k* with the state of *s_(k-1)*, *r* is then checked with the state of *s_k*. If *r* satisfies the condition of *s_k* with the state of *s_k*, the following happens:\\r\\n    1. The record *r* is extended with the assignments of *s_k*.\\r\\n    1. If *s_k* is defined as `output=all`, the extended record r is added to the output.\\r\\n    1. The last record in the state of *s_k* (which represents *s_k* itself in the state) is replaced by the extended record *r*.\\r\\n    1. Whenever the first step is matched while its state is empty, a new match begins and the match ID is increased by `1`. This only affects the output when `with_match_id` is used.\\r\\n* If r doesn\\'t satisfy the condition *s_k* with the state *s_k*, evaluate *r* against condition *s_k-1* and repeat the logic above.',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/scan-operator\",\"scan-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"schema_merge\",\"Merges tabular schema definitions into unified schema.\",\"Schema definitions are expected to be in the format produced by the [`getschema`](./getschemaoperator.md) operator.\\r\\n\\r\\nThe `schema merge` operation joins columns in input schemas and tries to reduce\\r\\ndata types to common ones. If data types can't be reduced, an error is displayed on the problematic column.\\r\\n\\r\\nThe plugin is invoked with the [`evaluate`](evaluateoperator.md) operator.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`T` `|` `evaluate` `schema_merge(` *PreserveOrder* `)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *PreserveOrder*: (Optional) When set to `true`, directs the plugin to validate the column order as defined by the first tabular schema that is kept. If the same column is in several schemas, the column ordinal must be like the column ordinal of the first schema that it appeared in. Default value is `true`.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe `schema_merge` plugin returns output similar to what [`getschema`](./getschemaoperator.md) operator returns.\",\"Merge with a schema that has a new column appended.\\r\\n\\r\\n```\\r\\nlet schema1 = datatable(Uri:string, HttpStatus:int)[] | getschema;\\r\\nlet schema2 = datatable(Uri:string, HttpStatus:int, Referrer:string)[] | getschema;\\r\\nunion schema1, schema2 | evaluate schema_merge()\\r\\n```\\r\\n\\r\\n*Result*\\r\\n\\r\\n|ColumnName | ColumnOrdinal | DataType | ColumnType|\\r\\n|---|---|---|---|\\r\\n|Uri|0|System.String|string|\\r\\n|HttpStatus|1|System.Int32|int|\\r\\n|Referrer|2|System.String|string|\\r\\n\\r\\nMerge with a schema that has different column ordering (`HttpStatus` ordinal changes from `1` to `2` in the new variant).\\r\\n\\r\\n```\\r\\nlet schema1 = datatable(Uri:string, HttpStatus:int)[] | getschema;\\r\\nlet schema2 = datatable(Uri:string, Referrer:string, HttpStatus:int)[] | getschema;\\r\\nunion schema1, schema2 | evaluate schema_merge()\\r\\n```\\r\\n\\r\\n*Result*\\r\\n\\r\\n|ColumnName | ColumnOrdinal | DataType | ColumnType|\\r\\n|---|---|---|---|\\r\\n|Uri|0|System.String|string|\\r\\n|Referrer|1|System.String|string|\\r\\n|HttpStatus|-1|ERROR(unknown CSL type:ERROR(columns are out of order))|ERROR(columns are out of order)|\\r\\n\\r\\nMerge with a schema that has different column ordering, but with `PreserveOrder` set to `false`.\\r\\n\\r\\n```\\r\\nlet schema1 = datatable(Uri:string, HttpStatus:int)[] | getschema;\\r\\nlet schema2 = datatable(Uri:string, Referrer:string, HttpStatus:int)[] | getschema;\\r\\nunion schema1, schema2 | evaluate schema_merge(PreserveOrder = false)\\r\\n```\\r\\n\\r\\n*Result*\\r\\n\\r\\n|ColumnName | ColumnOrdinal | DataType | ColumnType|\\r\\n|---|---|---|---|\\r\\n|Uri|0|System.String|string\\r\\n|Referrer|1|System.String|string\\r\\n|HttpStatus|2|System.Int32|int|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/schemamergeplugin\",\"schemamergeplugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"search\",\"Searches a text pattern in multiple tables and columns.\",'## Syntax\\r\\n\\r\\n* [*TabularSource* `|`] `search` [`kind=`*CaseSensitivity*] [`in` `(`*TableSources*`)`] *SearchPredicate*\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *TabularSource*: An optional tabular expression that acts as a data source to be searched over,\\r\\n  such as a table name, a [union operator](unionoperator.md), the results\\r\\n  of a tabular query, etc. Cannot appear together with the optional phrase that includes *TableSources*.\\r\\n* *CaseSensitivity*: An optional flag that controls the behavior of all `string` scalar operators\\r\\n  with respect to case sensitivity. Valid values are the two synonyms `default` and `case_insensitive`\\r\\n  (which is the default for operators such as `has`, namely being case-insensitive) and `case_sensitive`\\r\\n  (which forces all such operators into case-sensitive matching mode).\\r\\n* *TableSources*: An optional comma-separated list of \"wildcarded\" table names to take part in the search.\\r\\n  The list has the same syntax as the list of the [union operator](unionoperator.md).\\r\\n  Cannot appear together with the optional *TabularSource*.\\r\\n* *SearchPredicate*: A mandatory predicate that defines what to search for (in other words,\\r\\n  a Boolean expression that is evaluated for every record in the input and that, if it returns\\r\\n  `true`, the record is outputted.)\\r\\n  The syntax for *SearchPredicate* extends and modifies the normal Kusto syntax for Boolean expressions:\\r\\n  **String matching extensions**: String literals that appear as terms in the *SearchPredicate* indicate a term\\r\\n    match between all columns and the literal using `has`, `hasprefix`, `hassuffix`, and the inverted (`!`)\\r\\n    or case-sensitive (`cs`) versions of these operators. The decision whether to apply `has`, `hasprefix`,\\r\\n    or `hassuffix` depends on whether the literal starts or ends (or both) by an asterisk (`*`). Asterisks\\r\\n    inside the literal are not allowed.\\r\\n    |Literal   |Operator   |\\r\\n    |----------|-----------|\\r\\n    |`billg`   |`has`      |\\r\\n    |`*billg`  |`hassuffix`|\\r\\n    |`billg*`  |`hasprefix`|\\r\\n    |`*billg*` |`contains` |\\r\\n    |`bi*lg`   |`matches regex`|\\r\\n  **Column restriction**: By default, string matching extensions attempt to match against all columns\\r\\n    of the data set. It is possible to restrict this matching to a particular column by using\\r\\n    the following syntax: *ColumnName*`:`*StringLiteral*.\\r\\n  **String equality**: Exact matches of a column against a string value (instead of a term-match)\\r\\n    can be done using the syntax *ColumnName*`==`*StringLiteral*.\\r\\n  **Other Boolean expressions**: All regular Kusto Boolean expressions are supported by the syntax.\\r\\n    For example, `\"error\" and x==123` means: search for records that have the term `error` in any\\r\\n    of their columns, and have the value `123` in the `x` column.\"\\r\\n  **Regex match**: Regular expression matching is indicated using *Column* `matches regex` *StringLiteral*\\r\\n    syntax, where *StringLiteral* is the regex pattern.\\r\\n\\r\\nNote that if both *TabularSource* and *TableSources* are omitted, the search is carried over all unrestricted tables\\r\\nand views of the database in scope.\\r\\n\\r\\n## Summary of string matching extensions\\r\\n\\r\\n|# |Syntax                                 |Meaning (equivalent `where`)           |Comments|\\r\\n  |--|---------------------------------------|---------------------------------------|--------|\\r\\n  | 1|`search \"err\"`                         |`where * has \"err\"`                    ||\\r\\n  | 2|`search in (T1,T2,A*) \"err\"`           |<code>union T1,T2,A* &#124; where * has \"err\"<code>   ||\\r\\n  | 3|`search col:\"err\"`                     |`where col has \"err\"`                  ||\\r\\n  | 4|`search col==\"err\"`                    |`where col==\"err\"`                     ||\\r\\n  | 5|`search \"err*\"`                        |`where * hasprefix \"err\"`              ||\\r\\n  | 6|`search \"*err\"`                        |`where * hassuffix \"err\"`              ||\\r\\n  | 7|`search \"*err*\"`                       |`where * contains \"err\"`               ||\\r\\n  | 8|`search \"Lab*PC\"`                      |`where * matches regex @\"\\\\bLab.*PC\\\\b\"`||\\r\\n  | 9|`search *`                             |`where 0==0`                           ||\\r\\n  |10|`search col matches regex \"...\"`       |`where col matches regex \"...\"`        ||\\r\\n  |11|`search kind=case_sensitive`           |                                       |All string comparisons are case-sensitive|\\r\\n  |12|`search \"abc\" and (\"def\" or \"hij\")`    |`where * has \"abc\" and (* has \"def\" or * has hij\")`||\\r\\n  |13|`search \"err\" or (A>a and A<b)`        |`where * has \"err\" or (A>a and A<b)`   ||\\r\\n\\r\\n## Remarks\\r\\n\\r\\n**Unlike** the [find operator](findoperator.md), the `search` operator does not support the following:\\r\\n\\r\\n1. `withsource=`: The output will always include a column called `$table` of type `string` whose value\\r\\n   is the table name from which each record was retrieved (or some system-generated name if the source\\r\\n   is not a table but a composite expression).\\r\\n2. `project=`, `project-smart`: The output schema is equivalent to `project-smart` output schema.','```\\r\\n// 1. Simple term search over all unrestricted tables and views of the database in scope\\r\\nsearch \"billg\"\\r\\n\\r\\n// 2. Like (1), but looking only for records that match both terms\\r\\nsearch \"billg\" and (\"steveb\" or \"satyan\")\\r\\n\\r\\n// 3. Like (1), but looking only in the TraceEvent table\\r\\nsearch in (TraceEvent) \"billg\"\\r\\n\\r\\n// 4. Like (2), but performing a case-sensitive match of all terms\\r\\nsearch kind=case_sensitive \"BillB\" and (\"SteveB\" or \"SatyaN\")\\r\\n\\r\\n// 5. Like (1), but restricting the match to some columns\\r\\nsearch CEO:\"billg\" or CSA:\"billg\"\\r\\n\\r\\n// 6. Like (1), but only for some specific time limit\\r\\nsearch \"billg\" and Timestamp >= datetime(1981-01-01)\\r\\n\\r\\n// 7. Searches over all the higher-ups\\r\\nsearch in (C*, TF) \"billg\" or \"davec\" or \"steveb\"\\r\\n\\r\\n// 8. A different way to say (7). Prefer to use (7) when possible\\r\\nunion C*, TF | search \"billg\" or \"davec\" or \"steveb\"\\r\\n```\\r\\n\\r\\n## Performance Tips\\r\\n\\r\\n|# |Tip                                                                                  |Prefer                                        |Over                                                                    |\\r\\n  |--|-------------------------------------------------------------------------------------|----------------------------------------------|------------------------------------------------------------------------|\\r\\n  | 1| Prefer to use a single `search` operator over several consecutive `search` operators|`search \"billg\" and (\"steveb\" or \"satyan\")`   |<code>search \"billg\" &#124; search \"steveb\" or \"satyan\"<code>           |\\r\\n  | 2| Prefer to filter inside the `search` operator                                       |`search \"billg\" and \"steveb\"`                 |<code>search * &#124; where * has \"billg\" and * has \"steveb\"<code>      |',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/searchoperator\",\"searchoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"sequence_detect\",\"Detects sequence occurrences based on provided predicates. The plugin is invoked with the [`evaluate`](evaluateoperator.md) operator.\",\"## Syntax\\r\\n\\r\\n*T* `| evaluate` `sequence_detect` `(`*TimelineColumn*`,` *MaxSequenceStepWindow*`,` *MaxSequenceSpan*`,` *Expr1*`,` *Expr2*`,` ..., *Dim1*`,` *Dim2*`,` ...`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T*: The input tabular expression.\\r\\n* *TimelineColumn*: column reference representing timeline, must be present in the source expression\\r\\n* *MaxSequenceStepWindow*: scalar constant value of the max allowed timespan between 2 sequential steps in the sequence\\r\\n* *MaxSequenceSpan*: scalar constant value of the max span for the sequence to complete all steps\\r\\n* *Expr1*, *Expr2*, ...: boolean predicate expressions defining sequence steps\\r\\n* *Dim1*, *Dim2*, ...: dimension expressions that are used to correlate sequences\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a single table where each row in the table represents a single sequence occurrence:\\r\\n\\r\\n* *Dim1*, *Dim2*, ...: dimension columns that were used to correlate sequences.\\r\\n* *Expr1*_*TimelineColumn*, *Expr2*_*TimelineColumn*, ...: Columns with time values, representing the timeline of each sequence step.\\r\\n* *Duration*: the overall sequence time window\",\"The following query looks at the table T to search for relevant data from a specified time period.\\r\\n\\r\\n```\\r\\nT | evaluate sequence_detect(datetime_column, 10m, 1h, e1 = (Col1 == 'Val'), e2 = (Col2 == 'Val2'), Dim1, Dim2)\\r\\n```\\r\\n\\r\\n### Exploring Storm Events \\r\\n\\r\\nThe following query looks on the table StormEvents (weather statistics for 2007) and shows cases where sequence of 'Excessive Heat' was followed by 'Wildfire' within 5 days.\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| evaluate sequence_detect(\\r\\n        StartTime,\\r\\n        5d,  // step max-time\\r\\n        5d,  // sequence max-time\\r\\n        heat=(EventType == \\\"Excessive Heat\\\"), \\r\\n        wildfire=(EventType == 'Wildfire'), \\r\\n        State)\\r\\n```\\r\\n\\r\\n|State|heat_StartTime|wildfire_StartTime|Duration|\\r\\n|---|---|---|---|\\r\\n|CALIFORNIA|2007-05-08 00:00:00.0000000|2007-05-08 16:02:00.0000000|16:02:00|\\r\\n|CALIFORNIA|2007-05-08 00:00:00.0000000|2007-05-10 11:30:00.0000000|2.11:30:00|\\r\\n|CALIFORNIA|2007-07-04 09:00:00.0000000|2007-07-05 23:01:00.0000000|1.14:01:00|\\r\\n|SOUTH DAKOTA|2007-07-23 12:00:00.0000000|2007-07-27 09:00:00.0000000|3.21:00:00|\\r\\n|TEXAS|2007-08-10 08:00:00.0000000|2007-08-11 13:56:00.0000000|1.05:56:00|\\r\\n|CALIFORNIA|2007-08-31 08:00:00.0000000|2007-09-01 11:28:00.0000000|1.03:28:00|\\r\\n|CALIFORNIA|2007-08-31 08:00:00.0000000|2007-09-02 13:30:00.0000000|2.05:30:00|\\r\\n|CALIFORNIA|2007-09-02 12:00:00.0000000|2007-09-02 13:30:00.0000000|01:30:00|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/sequence-detect-plugin\",\"sequence-detect-plugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"serialize\",\"Marks that the order of the input row set is safe to use for window functions.\",\"The operator has a declarative meaning. It marks the input row set as serialized (ordered), so that [window functions](./windowsfunctions.md) can be applied to it.\\r\\n\\r\\n```\\r\\nT | serialize rn=row_number()\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`serialize` [*Name1* `=` *Expr1* [`,` *Name2* `=` *Expr2*]...]\\r\\n\\r\\n* The *Name*/*Expr* pairs are similar to those pairs in the [extend operator](./extendoperator.md).\",'```\\r\\nTraces\\r\\n| where ActivityId == \"479671d99b7b\"\\r\\n| serialize\\r\\n\\r\\nTraces\\r\\n| where ActivityId == \"479671d99b7b\"\\r\\n| serialize rn = row_number()\\r\\n```\\r\\n\\r\\nThe output row set of the following operators is marked as serialized.\\r\\n\\r\\n[range](./rangeoperator.md), [sort](./sortoperator.md), [order](./orderoperator.md), [top](./topoperator.md), [top-hitters](./tophittersoperator.md), [getschema](./getschemaoperator.md).\\r\\n\\r\\nThe output row set of the following operators is marked as non-serialized.\\r\\n\\r\\n[sample](./sampleoperator.md), [sample-distinct](./sampledistinctoperator.md), [distinct](./distinctoperator.md), [join](./joinoperator.md), \\r\\n[top-nested](./topnestedoperator.md), [count](./countoperator.md), [summarize](./summarizeoperator.md), [facet](./facetoperator.md), [mv-expand](./mvexpandoperator.md), \\r\\n[evaluate](./evaluateoperator.md), [reduce by](./reduceoperator.md), [make-series](./make-seriesoperator.md)\\r\\n\\r\\nAll other operators preserve the serialization property. \\r\\nIf the input row set is serialized, then the output row set is also serialized.',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/serializeoperator\",\"serializeoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_abs\",\"Calculates the element-wise absolute value of the numeric series input.\",\"## Syntax\\r\\n\\r\\n`series_abs(`*series*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *series*: Input numeric array, on which the absolute value function is applied. The argument must be a dynamic array. \\r\\n\\r\\n## Returns\\r\\n\\r\\nDynamic array of calculated absolute value. Any non-numeric element yields a `null` element value.\",\"```\\r\\nprint arr = dynamic([-6.5,0,8.2])\\r\\n| extend arr_abs = series_abs(arr)\\r\\n```\\r\\n\\r\\n|arr|arr_abs|\\r\\n|---|---|\\r\\n|[-6.5,0,8.2]|[6.5,0,8.2]|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-absfunction\",\"series-absfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_acos\",\"Calculates the element-wise arccosine function of the numeric series input.\",\"## Syntax\\r\\n\\r\\n`series_acos(`*series*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *series*: Input numeric array, on which the arccosine function is applied. The argument must be a dynamic array. \\r\\n\\r\\n## Returns\\r\\n\\r\\nDynamic array of calculated arccosine function values. Any non-numeric element yields a `null` element value.\",\"```\\r\\nprint arr = dynamic([-1,0,1])\\r\\n| extend arr_acos = series_acos(arr)\\r\\n```\\r\\n\\r\\n|arr|arr_acos|\\r\\n|---|---|\\r\\n|[-6.5,0,8.2]|[3.1415926535897931,1.5707963267948966,0.0]|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-acosfunction\",\"series-acosfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_add\",\"Calculates the element-wise addition of two numeric series inputs.\",\"## Syntax\\r\\n\\r\\n`series_add(`*series1*`,` *series2*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *series1, series2*: Input numeric arrays to be element-wise added into a dynamic array result. All arguments must be dynamic arrays. \\r\\n\\r\\n## Returns\\r\\n\\r\\nDynamic array of calculated element-wise add operation between the two inputs. Any non-numeric element or non-existing element (arrays of different sizes) yields a `null` element value.\",\"```\\r\\nrange x from 1 to 3 step 1\\r\\n| extend y = x * 2\\r\\n| extend z = y * 2\\r\\n| project s1 = pack_array(x,y,z), s2 = pack_array(z, y, x)\\r\\n| extend s1_add_s2 = series_add(s1, s2)\\r\\n```\\r\\n\\r\\n|s1|s2|s1_add_s2|\\r\\n|---|---|---|\\r\\n|[1,2,4]|[4,2,1]|[5,4,5]|\\r\\n|[2,4,8]|[8,4,2]|[10,8,10]|\\r\\n|[3,6,12]|[12,6,3]|[15,12,15]|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-addfunction\",\"series-addfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_asin\",\"Calculates the element-wise arcsine function of the numeric series input.\",\"## Syntax\\r\\n\\r\\n`series_asin(`*series*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *series*: Input numeric array, on which the arcsine function is applied. The argument must be a dynamic array. \\r\\n\\r\\n## Returns\\r\\n\\r\\nDynamic array of calculated arcsine function values. Any non-numeric element yields a `null` element value.\",\"```\\r\\nprint arr = dynamic([-1,0,1])\\r\\n| extend arr_asin = series_asin(arr)\\r\\n```\\r\\n\\r\\n|arr|arr_asin|\\r\\n|---|---|\\r\\n|[-6.5,0,8.2]|[1.5707963267948966,0.0,1.5707963267948966]|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-asinfunction\",\"series-asinfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_atan\",\"Calculates the element-wise arctangent function of the numeric series input.\",\"## Syntax\\r\\n\\r\\n`series_atan(`*series*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *series*: Input numeric array, on which the arctangent function is applied. The argument must be a dynamic array. \\r\\n\\r\\n## Returns\\r\\n\\r\\nDynamic array of calculated arctangent function values. Any non-numeric element yields a `null` element value.\",\"```\\r\\nprint arr = dynamic([-1,0,1])\\r\\n| extend arr_atan = series_atan(arr)\\r\\n```\\r\\n\\r\\n|arr|arr_atan|\\r\\n|---|---|\\r\\n|[-6.5,0,8.2]|[-0.78539816339744828,0.0,0.78539816339744828]|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-atanfunction\",\"series-atanfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_cos\",\"Calculates the element-wise cosine function of the numeric series input.\",\"## Syntax\\r\\n\\r\\n`series_cos(`*series*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *series*: Input numeric array, on which the cosine function is applied. The argument must be a dynamic array. \\r\\n\\r\\n## Returns\\r\\n\\r\\nDynamic array of calculated cosine function values. Any non-numeric element yields a `null` element value.\",\"```\\r\\nprint arr = dynamic([-1,0,1])\\r\\n| extend arr_cos = series_cos(arr)\\r\\n```\\r\\n\\r\\n|arr|arr_cos|\\r\\n|---|---|\\r\\n|[-6.5,0,8.2]|[0.54030230586813976,1.0,0.54030230586813976]|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-cosfunction\",\"series-cosfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_decompose\",\"Applies a decomposition transformation on a series.\",'Takes an expression containing a series (dynamic numerical array) as input and decomposes it to seasonal, trend, and residual components.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`series_decompose(`*Series* `[,` *Seasonality*`,` *Trend*`,` *Test_points*`,` *Seasonality_threshold*`])`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *Series*: Dynamic array cell, which is an array of numeric values, typically the resulting output of [make-series](make-seriesoperator.md) or [make_list](makelist-aggfunction.md) operators\\r\\n* *Seasonality*: An integer controlling the seasonal analysis, containing either\\r\\n    * -1: autodetect seasonality using [series_periods_detect](series-periods-detectfunction.md) (default).\\r\\n    * period: positive integer specifying the expected period in number of bins. For example, if the series is in 1-h bins, a weekly period is 168 bins.\\r\\n    * 0: no seasonality (skip extracting this component).    \\r\\n* *Trend*: A string controlling the trend analysis, containing one of the following values:\\r\\n    * \"avg\": define trend component as average(x) (default)\\r\\n    * \"linefit\": extract trend component using linear regression.\\r\\n    * \"none\": no trend, skip extracting this component.    \\r\\n* *Test_points*: 0 (default) or positive integer, specifying the number of points at the end of the series to exclude from the learning (regression) process. This parameter should be set for forecasting purposes.\\r\\n* *Seasonality_threshold*: The threshold for seasonality score when *Seasonality* is set to autodetect, the default score threshold is `0.6`. For more information, see [series_periods_detect](series-periods-detectfunction.md).\\r\\n\\r\\n**Return**\\r\\n\\r\\nThe function returns the following respective series:\\r\\n\\r\\n* `baseline`: the predicted value of the series (sum of seasonal and trend components, see below).\\r\\n* `seasonal`: the series of the seasonal component:\\r\\n    * if the period isn\\'t detected or is explicitly set to 0: constant 0.\\r\\n    * if detected or set to positive integer: median of the series points in the same phase\\r\\n* `trend`: the series of the trend component.\\r\\n* `residual`: the series of the residual component (that is, x - baseline).\\r\\n  \\r\\n\\r\\n**Notes**\\r\\n\\r\\n* Component execution order:\\r\\n    1. Extract the seasonal series\\r\\n    2. Subtract it from x, generating the deseasonal series\\r\\n    3. Extract the trend component from the deseasonal series\\r\\n    4. Create the baseline = seasonal + trend\\r\\n    5. Create the residual = x - baseline\\r\\n    \\r\\n* Either seasonality and, or trend should be enabled. Otherwise, the function is redundant, and just returns baseline = 0 and residual = x.\\r\\n\\r\\n**More about series decomposition**\\r\\n\\r\\nThis method is usually applied to time series of metrics expected to manifest periodic and/or trend behavior. You can use the method to  forecast future metric values and/or detect anomalous values. The implicit assumption of this regression process is that apart from seasonal and trend behavior, the time series is stochastic and randomly distributed. Forecast future metric values from the seasonal and trend components while ignoring the residual part. Detect anomalous values based on outlier detection only on the residual part only. Further details can be found in the [Time Series Decomposition chapter](https://otexts.com/fpp2/decomposition.html).',\"**Weekly seasonality**\\r\\n\\r\\nIn the following example, we generate a series with weekly seasonality and without trend, we then add some outliers to it. `series_decompose` finds and automatically detects the seasonality, and generates a baseline that is almost identical to the seasonal component. The outliers we added can be clearly seen in the residuals component.\\r\\n\\r\\n```\\r\\nlet ts=range t from 1 to 24*7*5 step 1 \\r\\n| extend Timestamp = datetime(2018-03-01 05:00) + 1h * t \\r\\n| extend y = 2*rand() + iff((t/24)%7>=5, 10.0, 15.0) - (((t%24)/10)*((t%24)/10)) // generate a series with weekly seasonality\\r\\n| extend y=iff(t==150 or t==200 or t==780, y-8.0, y) // add some dip outliers\\r\\n| extend y=iff(t==300 or t==400 or t==600, y+8.0, y) // add some spike outliers\\r\\n| summarize Timestamp=make_list(Timestamp, 10000),y=make_list(y, 10000);\\r\\nts \\r\\n| extend series_decompose(y)\\r\\n| render timechart  \\r\\n```\\r\\n\\r\\n![Series decompose 1.](images/samples/series-decompose1.png)\\r\\n**Weekly seasonality with trend**\\r\\n\\r\\nIn this example, we add a trend to the series from the previous example. First, we run `series_decompose` with the default parameters. The trend `avg` default value only takes the average and doesn't compute the trend. The generated baseline doesn't contain the trend. When observing the trend in the residuals, it becomes apparent that this example is less accurate than the previous example.\\r\\n\\r\\n```\\r\\nlet ts=range t from 1 to 24*7*5 step 1 \\r\\n| extend Timestamp = datetime(2018-03-01 05:00) + 1h * t \\r\\n| extend y = 2*rand() + iff((t/24)%7>=5, 5.0, 15.0) - (((t%24)/10)*((t%24)/10)) + t/72.0 // generate a series with weekly seasonality and ongoing trend\\r\\n| extend y=iff(t==150 or t==200 or t==780, y-8.0, y) // add some dip outliers\\r\\n| extend y=iff(t==300 or t==400 or t==600, y+8.0, y) // add some spike outliers\\r\\n| summarize Timestamp=make_list(Timestamp, 10000),y=make_list(y, 10000);\\r\\nts \\r\\n| extend series_decompose(y)\\r\\n| render timechart  \\r\\n```\\r\\n\\r\\n![Series decompose 2.](images/samples/series-decompose2.png)\\r\\nNext, we rerun the same example. Since we're expecting a trend in the series, we specify `linefit` in the trend parameter. We can see that the positive trend is detected and the baseline is much closer to the input series. The residuals are close to zero, and only the outliers stand out. We can see all the components on the series in the chart.\\r\\n\\r\\n```\\r\\nlet ts=range t from 1 to 24*7*5 step 1 \\r\\n| extend Timestamp = datetime(2018-03-01 05:00) + 1h * t \\r\\n| extend y = 2*rand() + iff((t/24)%7>=5, 5.0, 15.0) - (((t%24)/10)*((t%24)/10)) + t/72.0 // generate a series with weekly seasonality and ongoing trend\\r\\n| extend y=iff(t==150 or t==200 or t==780, y-8.0, y) // add some dip outliers\\r\\n| extend y=iff(t==300 or t==400 or t==600, y+8.0, y) // add some spike outliers\\r\\n| summarize Timestamp=make_list(Timestamp, 10000),y=make_list(y, 10000);\\r\\nts \\r\\n| extend series_decompose(y, -1, 'linefit')\\r\\n| render timechart  \\r\\n```\\r\\n\\r\\n![Series decompose 3.](images/samples/series-decompose3.png)\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-decomposefunction\",\"series-decomposefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_decompose_anomalies\",\"Anomaly Detection is based on series decomposition.\\r\\nFor more information, see [series_decompose()](series-decomposefunction.md).\",'The function takes an expression containing a series (dynamic numerical array) as input, and extracts anomalous points with scores.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`series_decompose_anomalies (`*Series* `[, ` *Threshold*`,` *Seasonality*`,` *Trend*`, ` *Test_points*`, ` *AD_method*`,` *Seasonality_threshold* `])`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *Series*: Dynamic array cell that is an array of numeric values, typically the resulting output of [make-series](make-seriesoperator.md) or [make_list](makelist-aggfunction.md) operators\\r\\n* *Threshold*: Anomaly threshold, default 1.5 (k value) for detecting mild or stronger anomalies\\r\\n* *Seasonality*: An integer controlling the seasonal analysis, containing either\\r\\n    * -1: Autodetect seasonality (using [series_periods_detect](series-periods-detectfunction.md)) [default]\\r\\n    * 0: No seasonality (that is, skip extracting this component)\\r\\n    * period: Positive integer, specifying the expected period in number of bins unit. For example, if the series is in one hour bins, a weekly period is 168 bins\\r\\n* *Trend*: A string controlling the trend analysis, containing either\\r\\n    * \"avg\": Define trend component as average of the series [default]\\r\\n    * \"none\": No trend, skip extracting this component\\r\\n    * \"linefit\": Extract trend component using linear regression\\r\\n* *Test_points*: 0 [default] or a positive integer, that specifies the number of points at the end of the series to exclude from the learning (regression) process. This parameter should be set for forecasting purposes\\r\\n* *AD_method*: A string controlling the anomaly detection method on the residual time series, containing one of the following values:\\r\\n    * \\u201cctukey\\u201d: [Tukey\\u2019s fence test](https://en.wikipedia.org/wiki/Outlier#Tukey\\'s_fences) with custom 10th-90th percentile range [default]\\r\\n    * \\u201ctukey\\u201d: [Tukey\\u2019s fence test](https://en.wikipedia.org/wiki/Outlier#Tukey\\'s_fences) with standard 25th-75th percentile range\\r\\n    For more information on residual time series, see [series_outliers](series-outliersfunction.md)\\r\\n* *Seasonality_threshold*: The threshold for seasonality score when *Seasonality* is set to autodetect. The default score threshold is `0.6`. For more information, see [series_periods_detect](series-periods-detectfunction.md)\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe function returns the following respective series:\\r\\n\\r\\n* `ad_flag`: A ternary series containing (+1, -1, 0) marking up/down/no anomaly respectively\\r\\n* `ad_score`: Anomaly score\\r\\n* `baseline`: The predicted value of the series, according to the decomposition\\r\\n\\r\\n## The algorithm\\r\\n\\r\\nThis function follows these steps:\\r\\n\\r\\n1. Calls [series_decompose()](series-decomposefunction.md) with the respective parameters, to create the baseline and residuals series.\\r\\n1. Calculates ad_score series by applying [series_outliers()](series-outliersfunction.md) with the chosen anomaly detection method on the residuals series.\\r\\n1. Calculates the ad_flag series by applying the threshold on the ad_score to mark up/down/no anomaly respectively.',\"### Detect anomalies in weekly seasonality\\r\\n\\r\\nIn the following example, generate a series with weekly seasonality, and then add some outliers to it. `series_decompose_anomalies` autodetects the seasonality and generates a baseline that captures the repetitive pattern. The outliers you added can be clearly spotted in the ad_score component.\\r\\n\\r\\n```\\r\\nlet ts=range t from 1 to 24*7*5 step 1 \\r\\n| extend Timestamp = datetime(2018-03-01 05:00) + 1h * t \\r\\n| extend y = 2*rand() + iff((t/24)%7>=5, 10.0, 15.0) - (((t%24)/10)*((t%24)/10)) // generate a series with weekly seasonality\\r\\n| extend y=iff(t==150 or t==200 or t==780, y-8.0, y) // add some dip outliers\\r\\n| extend y=iff(t==300 or t==400 or t==600, y+8.0, y) // add some spike outliers\\r\\n| summarize Timestamp=make_list(Timestamp, 10000),y=make_list(y, 10000);\\r\\nts \\r\\n| extend series_decompose_anomalies(y)\\r\\n| render timechart  \\r\\n```\\r\\n\\r\\n![Weekly seasonality showing baseline and outliers.](images/series-decompose-anomaliesfunction/weekly-seasonality-outliers.png)\\r\\n\\r\\n### Detect anomalies in weekly seasonality with trend\\r\\n\\r\\nIn this example, add a trend to the series from the previous example. First, run `series_decompose_anomalies` with the default parameters in which the trend `avg` default value only takes the average and doesn't compute the trend. The generated baseline doesn't contain the trend and is less exact, compared to the previous example. Consequently, some of the outliers you inserted in the data aren't detected because of the higher variance.\\r\\n\\r\\n```\\r\\nlet ts=range t from 1 to 24*7*5 step 1 \\r\\n| extend Timestamp = datetime(2018-03-01 05:00) + 1h * t \\r\\n| extend y = 2*rand() + iff((t/24)%7>=5, 5.0, 15.0) - (((t%24)/10)*((t%24)/10)) + t/72.0 // generate a series with weekly seasonality and ongoing trend\\r\\n| extend y=iff(t==150 or t==200 or t==780, y-8.0, y) // add some dip outliers\\r\\n| extend y=iff(t==300 or t==400 or t==600, y+8.0, y) // add some spike outliers\\r\\n| summarize Timestamp=make_list(Timestamp, 10000),y=make_list(y, 10000);\\r\\nts \\r\\n| extend series_decompose_anomalies(y)\\r\\n| extend series_decompose_anomalies_y_ad_flag = \\r\\nseries_multiply(10, series_decompose_anomalies_y_ad_flag) // multiply by 10 for visualization purposes\\r\\n| render timechart\\r\\n```\\r\\n\\r\\n![Weekly seasonality outliers with trend.](images/series-decompose-anomaliesfunction/weekly-seasonality-outliers-with-trend.png)\\r\\nNext, run the same example, but since you're expecting a trend in the series, specify `linefit` in the trend parameter. You can see that the baseline is much closer to the input series. All the inserted outliers are detected, and also some false positives. See the next example on tweaking the threshold.\\r\\n\\r\\n```\\r\\nlet ts=range t from 1 to 24*7*5 step 1 \\r\\n| extend Timestamp = datetime(2018-03-01 05:00) + 1h * t \\r\\n| extend y = 2*rand() + iff((t/24)%7>=5, 5.0, 15.0) - (((t%24)/10)*((t%24)/10)) + t/72.0 // generate a series with weekly seasonality and ongoing trend\\r\\n| extend y=iff(t==150 or t==200 or t==780, y-8.0, y) // add some dip outliers\\r\\n| extend y=iff(t==300 or t==400 or t==600, y+8.0, y) // add some spike outliers\\r\\n| summarize Timestamp=make_list(Timestamp, 10000),y=make_list(y, 10000);\\r\\nts \\r\\n| extend series_decompose_anomalies(y, 1.5, -1, 'linefit')\\r\\n| extend series_decompose_anomalies_y_ad_flag = \\r\\nseries_multiply(10, series_decompose_anomalies_y_ad_flag) // multiply by 10 for visualization purposes\\r\\n| render timechart  \\r\\n```\\r\\n\\r\\n![Weekly seasonality anomalies with linefit trend.](images/series-decompose-anomaliesfunction/weekly-seasonality-linefit-trend.png)\\r\\n\\r\\n### Tweak the anomaly detection threshold\\r\\n\\r\\nA few noisy points were detected as anomalies in the previous example. Now increase the anomaly detection threshold from a default of 1.5 to 2.5. Use this interpercentile range, so that only stronger anomalies are detected. Now, only the outliers you inserted in the data, will be detected.\\r\\n\\r\\n```\\r\\nlet ts=range t from 1 to 24*7*5 step 1 \\r\\n| extend Timestamp = datetime(2018-03-01 05:00) + 1h * t \\r\\n| extend y = 2*rand() + iff((t/24)%7>=5, 5.0, 15.0) - (((t%24)/10)*((t%24)/10)) + t/72.0 // generate a series with weekly seasonality and onlgoing trend\\r\\n| extend y=iff(t==150 or t==200 or t==780, y-8.0, y) // add some dip outliers\\r\\n| extend y=iff(t==300 or t==400 or t==600, y+8.0, y) // add some spike outliers\\r\\n| summarize Timestamp=make_list(Timestamp, 10000),y=make_list(y, 10000);\\r\\nts \\r\\n| extend series_decompose_anomalies(y, 2.5, -1, 'linefit')\\r\\n| extend series_decompose_anomalies_y_ad_flag = \\r\\nseries_multiply(10, series_decompose_anomalies_y_ad_flag) // multiply by 10 for visualization purposes\\r\\n| render timechart  \\r\\n```\\r\\n\\r\\n![Weekly series anomalies with higher anomaly threshold.](images/series-decompose-anomaliesfunction/weekly-seasonality-higher-threshold.png)\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-decompose-anomaliesfunction\",\"series-decompose-anomaliesfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_decompose_forecast\",\"Forecast based on series decomposition.\",\"Takes an expression containing a series (dynamic numerical array) as input, and predicts the values of the last trailing points. For more information, see [series_decompose](series-decomposefunction.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`series_decompose_forecast(`*Series* `,` *Points* `[,` *Seasonality*`,` *Trend*`,` *Seasonality_threshold*`])`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *Series*: Dynamic array cell of numeric values. Typically, the resulting output of [make-series](make-seriesoperator.md) or [make_list](makelist-aggfunction.md) operators.\\r\\n* *Points*: Integer specifying the number of points at the end of the series to predict (forecast). These points are excluded from the learning (regression) process.\\r\\n* *Seasonality*: An integer controlling the seasonal analysis, containing one of:\\r\\n    * -1: Autodetect seasonality using [series_periods_detect](series-periods-detectfunction.md) (default).\\r\\n    * period: Positive integer, specifying the expected period in number of bins. For example, if the series is in 1h bins, a weekly period is 168 bins.\\r\\n    * 0: No seasonality (skip extracting this component).\\r\\n* *Trend*: A string controlling the trend analysis, containing one of:\\r\\n    * `linefit`: Extract trend component using linear regression (default).\\r\\n    * `avg`: Define trend component as average(x).\\r\\n    * `none`: No trend, skip extracting this component.\\r\\n* *Seasonality_threshold*: The threshold for seasonality score when *Seasonality* is set to autodetect. The default score threshold is `0.6`. For more information, see [series_periods_detect](series-periods-detectfunction.md).\\r\\n\\r\\n**Return**\\r\\n\\r\\nA dynamic array with the forecasted series.\\r\\n\\r\\n> [!NOTE]\\r\\n> * The dynamic array of the original input series should include a number of *points* slots to be forecasted. The forecast is typically done by using [make-series](make-seriesoperator.md) and specifying the end time in the range that includes the timeframe to forecast.\\r\\n> * Either seasonality or trend should be enabled, otherwise the function is redundant, and just returns a series filled with zeroes.\",\"In the following example, we generate a series of four weeks in an hourly grain, with weekly seasonality and a small upward trend. We then use `make-series` and add another empty week to the series. `series_decompose_forecast` is called with a week (24*7 points), and it automatically detects the seasonality and trend, and generates a forecast of the entire five-week period.\\r\\n\\r\\n```\\r\\nlet ts=range t from 1 to 24*7*4 step 1 // generate 4 weeks of hourly data\\r\\n| extend Timestamp = datetime(2018-03-01 05:00) + 1h * t \\r\\n| extend y = 2*rand() + iff((t/24)%7>=5, 5.0, 15.0) - (((t%24)/10)*((t%24)/10)) + t/72.0 // generate a series with weekly seasonality and ongoing trend\\r\\n| extend y=iff(t==150 or t==200 or t==780, y-8.0, y) // add some dip outliers\\r\\n| extend y=iff(t==300 or t==400 or t==600, y+8.0, y) // add some spike outliers\\r\\n| make-series y=max(y) on Timestamp from datetime(2018-03-01 05:00) to datetime(2018-03-01 05:00)+24*7*5h step 1h; // create a time series of 5 weeks (last week is empty)\\r\\nts \\r\\n| extend y_forcasted = series_decompose_forecast(y, 24*7)  // forecast a week forward\\r\\n| render timechart \\r\\n```\\r\\n\\r\\n![Series decompose forecast.](images/series-decompose-forecastfunction/series-decompose-forecast.png)\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-decompose-forecastfunction\",\"series-decompose-forecastfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_divide\",\"Calculates the element-wise division of two numeric series inputs.\",\"## Syntax\\r\\n\\r\\n`series_divide(`*series1*`,` *series2*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *series1, series2*: Input numeric arrays, the first to be element-wise divided by the second into a dynamic array result. All arguments must be dynamic arrays. \\r\\n\\r\\n## Returns\\r\\n\\r\\nDynamic array of calculated element-wise divide operation between the two inputs. Any non-numeric element or non-existing element (arrays of different sizes) yields a `null` element value.\\r\\n\\r\\nNote: the result series is of double type, even if the inputs are integers. Division by zero follows the double division by zero (e.g. 2/0 yields double(+inf)).\",\"```\\r\\nrange x from 1 to 3 step 1\\r\\n| extend y = x * 2\\r\\n| extend z = y * 2\\r\\n| project s1 = pack_array(x,y,z), s2 = pack_array(z, y, x)\\r\\n| extend s1_divide_s2 = series_divide(s1, s2)\\r\\n```\\r\\n\\r\\n|s1\\t        |s2|\\t    s1_divide_s2|\\r\\n|---|---|---|\\r\\n|[1,2,4]\\t|[4,2,1]|\\t[0.25,1.0,4.0]|\\r\\n|[2,4,8]\\t|[8,4,2]|\\t[0.25,1.0,4.0]|\\r\\n|[3,6,12]\\t|[12,6,3]|\\t[0.25,1.0,4.0]|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-dividefunction\",\"series-dividefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_equals\",\"Calculates the element-wise equals (`==`) logic operation of two numeric series inputs.\",\"## Syntax\\r\\n\\r\\n`series_equals (`*Series1*`,` *Series2*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *Series1, Series2*: Input numeric arrays to be element-wise compared. All arguments must be dynamic arrays. \\r\\n\\r\\n## Returns\\r\\n\\r\\nDynamic array of booleans containing the calculated element-wise equal logic operation between the two inputs. Any non-numeric element or non-existing element (arrays of different sizes) yields a `null` element value.\",\"```\\r\\nprint s1 = dynamic([1,2,4]), s2 = dynamic([4,2,1])\\r\\n| extend s1_equals_s2 = series_equals(s1, s2)\\r\\n```\\r\\n\\r\\n|s1|s2|s1_equals_s2|\\r\\n|---|---|---|\\r\\n|[1,2,4]|[4,2,1]|[false,true,false]|\\r\\n\\r\\n## See also\\r\\n\\r\\nFor entire series statistics comparisons, see:\\r\\n\\r\\n* [series_stats()](series-statsfunction.md)\\r\\n* [series_stats_dynamic()](series-stats-dynamicfunction.md)\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-equalsfunction\",\"series-equalsfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_exp\",\"Calculates the element-wise base-e exponential function (e^x) of the numeric series input.\",\"## Syntax\\r\\n\\r\\n`series_exp(`*series*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *series*: Input numeric array whose elements are applied as the exponent in the exponential function. The argument must be a dynamic array. \\r\\n\\r\\n## Returns\\r\\n\\r\\nDynamic array of calculated exponential function. Any non-numeric element yields a `null` element value.\",\"```\\r\\nprint s = dynamic([1,2,3])\\r\\n| extend s_exp = series_exp(s)\\r\\n```\\r\\n\\r\\n|s|s_exp|\\r\\n|---|---|\\r\\n|[1,2,3]|[2.7182818284590451,7.38905609893065,20.085536923187668]|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-expfunction\",\"series-expfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_fft\",\"Applies the Fast Fourier Transform (FFT) on a series.\",\"The series_fft() function takes a series of complex numbers in the time/spatial domain and transforms it to the frequency domain using the [Fast Fourier Transform](https://en.wikipedia.org/wiki/Fast_Fourier_transform). The transformed complex series represents the magnitude and phase of the frequencies appearing in the original series. Use the complementary function [series_ifft](series-ifft-function.md) to transform from the frequency domain back to the time/spatial domain.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`series_fft(`*x_real* [`,` *x_imaginary*]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *x_real*: Dynamic array of numeric values representing the real component of the series to transform.\\r\\n* *x_imaginary*: A similar dynamic array representing the imaginary component of the series. This parameter is optional and should be specified only if the input series contains complex numbers.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe function returns the complex inverse fft in two series. The first series for the real component and the second one for the imaginary component.\",\"* Generate a complex series, where the real and imaginary components are pure sine waves in different frequencies. Use FFT to transform it to the frequency domain:\\r\\n\\r\\n    \\r\\n    ```\\r\\n    let sinewave=(x:double, period:double, gain:double=1.0, phase:double=0.0)\\r\\n    {\\r\\n        gain*sin(2*pi()/period*(x+phase))\\r\\n    }\\r\\n    ;\\r\\n    let n=128;      //  signal length\\r\\n    range x from 0 to n-1 step 1 | extend yr=sinewave(x, 8), yi=sinewave(x, 32)\\r\\n    | summarize x=make_list(x), y_real=make_list(yr), y_imag=make_list(yi)\\r\\n    | extend (fft_y_real, fft_y_imag) = series_fft(y_real, y_imag)\\r\\n    | render linechart with(ysplit=panels)\\r\\n    ```\\r\\n    \\r\\n    This query returns *fft_y_real* and *fft_y_imag*:  \\r\\n    \\r\\n    ![Series fft.](images/series-fft-function/series-fft.png)    \\r\\n* Transform a series to the frequency domain, and then apply the inverse transform to get back the original series:\\r\\n\\r\\n    \\r\\n    ```\\r\\n    let sinewave=(x:double, period:double, gain:double=1.0, phase:double=0.0)\\r\\n    {\\r\\n        gain*sin(2*pi()/period*(x+phase))\\r\\n    }\\r\\n    ;\\r\\n    let n=128;      //  signal length\\r\\n    range x from 0 to n-1 step 1 | extend yr=sinewave(x, 8), yi=sinewave(x, 32)\\r\\n    | summarize x=make_list(x), y_real=make_list(yr), y_imag=make_list(yi)\\r\\n    | extend (fft_y_real, fft_y_imag) = series_fft(y_real, y_imag)\\r\\n    | extend (y_real2, y_image2) = series_ifft(fft_y_real, fft_y_imag)\\r\\n    | project-away fft_y_real, fft_y_imag   //  too many series for linechart with panels\\r\\n    | render linechart with(ysplit=panels)\\r\\n    ```\\r\\n    \\r\\n    This query returns *y_real2* and *y_imag2, which are the same as *y_real* and *y_imag*:  \\r\\n    \\r\\n    ![Series ifft.](images/series-fft-function/series-ifft.png)\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-fft-function\",\"series-fft-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_fill_backward\",\"Performs a backward fill interpolation of missing values in a series.\",\"An expression containing dynamic numerical array is the input. The function replaces all instances of missing_value_placeholder with the nearest value from its right side (other than missing_value_placeholder), and returns the resulting array. The rightmost instances of missing_value_placeholder are preserved.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`series_fill_backward(`*x*`[, `*missing_value_placeholder*`])`\\r\\n\\r\\n* Will return series *x* with all instances of *missing_value_placeholder* filled backwards.\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *x*: dynamic array scalar expression, which is an array of numeric values.\\r\\n* *missing_value_placeholder*: this optional parameter specifies a placeholder for missing values. The default value is `double`(*null*).\\r\\n\\r\\n**Notes**\\r\\n\\r\\n* Specify *null* as the default value to apply any interpolation functions after [make-series](make-seriesoperator.md): \\r\\n\\r\\n\\r\\n```\\r\\nmake-series num=count() default=long(null) on TimeStamp from ago(1d) to ago(1h) step 1h by Os, Browser\\r\\n```\\r\\n\\r\\n* The *missing_value_placeholder* can be of any type that will be converted to actual element types. Both `double`(*null*), `long`(*null*) and `int`(*null*) have the same meaning.\\r\\n* If *missing_value_placeholder* is `double`(*null*), (or omitted, which have the same meaning) then a result may contain *null* values. To fill these *null* values, use other interpolation functions. Currently only [series_outliers()](series-outliersfunction.md) support *null* values in input arrays.\\r\\n* The function preserves original type of array elements.\",\"```\\r\\nlet data = datatable(arr: dynamic)\\r\\n[\\r\\n    dynamic([111,null,36,41,null,null,16,61,33,null,null])   \\r\\n];\\r\\ndata \\r\\n| project arr, \\r\\n          fill_backward = series_fill_backward(arr)\\r\\n\\r\\n```\\r\\n\\r\\n|`arr`|`fill_backward`|\\r\\n|---|---|\\r\\n|[111,null,36,41,null,null,16,61,33,null,null]|[111,36,36,41,16,16,16,61,33,null,null]|\\r\\n\\r\\nUse [series_fill_forward](series-fill-forwardfunction.md) or [series-fill-const](series-fill-constfunction.md) to complete interpolation of the above array.\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-fill-backwardfunction\",\"series-fill-backwardfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_fill_const\",\"Replaces missing values in a series with a specified constant value.\",\"Takes an expression containing dynamic numerical array as input, replaces all instances of missing_value_placeholder with the specified constant_value and returns the resulting array.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`series_fill_const(`*x*`, `*constant_value*`[,` *missing_value_placeholder*`])`\\r\\n\\r\\n* Will return series *x* with all instances of *missing_value_placeholder* replaced with *constant_value*.\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *x*: dynamic array scalar expression that is an array of numeric values.\\r\\n* *constant_value*: the value replacing missing values. \\r\\n* *missing_value_placeholder*: optional parameter that specifies a placeholder for a missing value to be replaced. Default value is `double`(*null*).\\r\\n\\r\\n**Notes**\\r\\n\\r\\n* If you create the series using the [make-series](make-seriesoperator.md) operator, it fills in the missing values using default 0. Alternatively, you can specify a constant value to fill in by specifying `default = ` *DefaultValue* in the make-series statement.\\r\\n\\r\\n\\r\\n```\\r\\nmake-series num=count() default=-1 on TimeStamp from ago(1d) to ago(1h) step 1h by Os, Browser\\r\\n```\\r\\n\\r\\n* To apply any interpolation functions after [make-series](make-seriesoperator.md), specify *null* as a default value: \\r\\n\\r\\n\\r\\n```\\r\\nmake-series num=count() default=long(null) on TimeStamp from ago(1d) to ago(1h) step 1h by Os, Browser\\r\\n```\\r\\n\\r\\n* The *missing_value_placeholder* can be of any type, which will be converted to actual element types. As such, either `double`(*null*), `long`(*null*) or `int`(*null*) have the same meaning.\\r\\n* The function preserves original type of the array elements.\",\"```\\r\\nlet data = datatable(`arr`: dynamic)\\r\\n[\\r\\n    dynamic([111,null,36,41,23,null,16,61,33,null,null])   \\r\\n];\\r\\ndata \\r\\n| project arr, \\r\\n          fill_const1 = series_fill_const(arr, 0.0),\\r\\n          fill_const2 = series_fill_const(arr, -1)  \\r\\n```\\r\\n\\r\\n|`arr`|`fill_const1`|`fill_const2`|\\r\\n|---|---|---|\\r\\n|[111,null,36,41,23,null,16,61,33,null,null]|[111,0.0,36,41,23,0.0,16,61,33,0.0,0.0]|[111,-1,36,41,23,-1,16,61,33,-1,-1]|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-fill-constfunction\",\"series-fill-constfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_fill_forward\",\"Performs a forward fill interpolation of missing values in a series.\",\"An expression containing dynamic numerical array is the input. The function replaces all instances of missing_value_placeholder with the nearest value from its left side other than missing_value_placeholder, and returns the resulting array. The leftmost instances of missing_value_placeholder are preserved.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`series_fill_forward(`*x*`[, `*missing_value_placeholder*`])`\\r\\n\\r\\n* Will return series *x* with all instances of *missing_value_placeholder* filled forwards.\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *x*: dynamic array scalar expression, which is an array of numeric values. \\r\\n* *missing_value_placeholder*: optional parameter, which specifies a placeholder for a missing value to be replaced. Default value is `double`(*null*).\\r\\n\\r\\n**Notes**\\r\\n\\r\\n* Specify *null* as the default value to apply interpolation functions after [make-series](make-seriesoperator.md): \\r\\n\\r\\n\\r\\n```\\r\\nmake-series num=count() default=long(null) on TimeStamp from ago(1d) to ago(1h) step 1h by Os, Browser\\r\\n```\\r\\n\\r\\n* The *missing_value_placeholder* can be of any type that will be converted to actual element types. Both `double`(*null*) `long`(*null*) and `int`(*null*) have the same meaning.\\r\\n* If missing_value_placeholder is (null) (or omitted - which have the same meaning), then a result may contain *null* values. To fill these *null* values, use other interpolation functions. Currently only [series_outliers()](series-outliersfunction.md) support *null* values in input arrays.\\r\\n* The functions preserve the original type of array elements.\",\"```\\r\\nlet data = datatable(arr: dynamic)\\r\\n[\\r\\n    dynamic([null,null,36,41,null,null,16,61,33,null,null])   \\r\\n];\\r\\ndata \\r\\n| project arr, \\r\\n          fill_forward = series_fill_forward(arr)  \\r\\n\\r\\n```\\r\\n\\r\\n|`arr`|`fill_forward`|\\r\\n|---|---|\\r\\n|[null,null,36,41,null,null,16,61,33,null,null]|[null,null,36,41,41,41,16,61,33,33,33]|\\r\\n\\r\\nUse [series_fill_backward](series-fill-backwardfunction.md) or [series-fill-const](series-fill-constfunction.md) to complete interpolation of the above array.\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-fill-forwardfunction\",\"series-fill-forwardfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_fill_linear\",\"Linearly interpolates missing values in a series.\",'Takes an expression containing dynamic numerical array as input, does linear interpolation for all instances of missing_value_placeholder, and returns the resulting array. If the beginning and end of the array contain missing_value_placeholder, then it will be replaced with the nearest value other than missing_value_placeholder. This feature can be turned off. If the whole array consists of the missing_value_placeholder, the array will be filled with constant_value, or 0 if not specified.  \\r\\n\\r\\n## Syntax\\r\\n\\r\\n`series_fill_linear(`*x*`[,` *missing_value_placeholder*` [,`*fill_edges*` [,`*constant_value*`]]]))`\\r\\n\\r\\n* Will return series linear interpolation of *x* using specified parameters.\\r\\n \\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *x*: dynamic array scalar expression, which is an array of numeric values.\\r\\n* *missing_value_placeholder*: optional parameter, which specifies a placeholder for the \"missing values\" to be replaced. Default value is `double`(*null*).\\r\\n* *fill_edges*: Boolean value, which indicates whether *missing_value_placeholder* at the start and end of the array should be replaced with nearest value. *True* by default. If set to *false*, then *missing_value_placeholder* at the start and end of the array will be preserved.\\r\\n* *constant_value*: optional parameter relevant only for arrays entirely consists of *null* values. This parameter specifies a constant value to fill the series with. Default value is *0*. Setting this parameter it to `double`(*null*) will effectively leave *null* values where they are.\\r\\n\\r\\n## Notes\\r\\n\\r\\n* To apply any interpolation functions after [make-series](make-seriesoperator.md), specify *null* as the default value: \\r\\n    \\r\\n    ```\\r\\n    make-series num=count() default=long(null) on TimeStamp from ago(1d) to ago(1h) step 1h by Os, Browser\\r\\n    ```\\r\\n* The *missing_value_placeholder* can be of any type that will be converted to actual element types. As such, either `double`(*null*), `long`(*null*) or `int`(*null*) have the same meaning.\\r\\n* If *missing_value_placeholder* is `double`(*null*) (or omitted, which have the same meaning) then a result may contain *null* values. Use other interpolation functions to fill these *null* values. Currently only [series_outliers()](series-outliersfunction.md) support *null* values in input arrays.\\r\\n* The function preserves original type of array elements. If x contains only int or long elements, then the linear interpolation will return rounded interpolated values rather than exact ones.',\"```\\r\\nlet data = datatable(arr: dynamic)\\r\\n[\\r\\n    dynamic([null, 111.0, null, 36.0, 41.0, null, null, 16.0, 61.0, 33.0, null, null]), // Array of double    \\r\\n    dynamic([null, 111,   null, 36,   41,   null, null, 16,   61,   33,   null, null]), // Similar array of int\\r\\n    dynamic([null, null, null, null])                                                   // Array with missing values only\\r\\n];\\r\\ndata\\r\\n| project arr, \\r\\n          without_args = series_fill_linear(arr),\\r\\n          with_edges = series_fill_linear(arr, double(null), true),\\r\\n          wo_edges = series_fill_linear(arr, double(null), false),\\r\\n          with_const = series_fill_linear(arr, double(null), true, 3.14159)  \\r\\n\\r\\n```\\r\\n\\r\\n|`arr`|`without_args`|`with_edges`|`wo_edges`|`with_const`|\\r\\n|---|---|---|---|---|\\r\\n|[null,111.0,null,36.0,41.0,null,null,16.0,61.0,33.0,null,null]|[111.0,111.0,73.5,36.0,41.0,32.667,24.333,16.0,61.0,33.0,33.0,33.0]|[111.0,111.0,73.5,36.0,41.0,32.667,24.333,16.0,61.0,33.0,33.0,33.0]|[null,111.0,73.5,36.0,41.0,32.667,24.333,16.0,61.0,33.0,null,null]|[111.0,111.0,73.5,36.0,41.0,32.667,24.333,16.0,61.0,33.0,33.0,33.0]|\\r\\n|[null,111,null,36,41,null,null,16,61,33,null,null]|[111,111,73,36,41,32,24,16,61,33,33,33]|[111,111,73,36,41,32,24,16,61,33,33,33]|[null,111,73,36,41,32,24,16,61,33,null,null]|[111,111,74,38,  41,32,24,16,61,33,33,33]|\\r\\n|[null,null,null,null]|[0.0,0.0,0.0,0.0]|[0.0,0.0,0.0,0.0]|[0.0,0.0,0.0,0.0]|[3.14159,3.14159,3.14159,3.14159]|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-fill-linearfunction\",\"series-fill-linearfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_fir\",\"Applies a Finite Impulse Response (FIR) filter on a series.\",\"The function takes an expression containing a dynamic numerical array as input and applies a [Finite Impulse Response](https://en.wikipedia.org/wiki/Finite_impulse_response) filter. By specifying the `filter` coefficients, it can be used for calculating a moving average, smoothing, change-detection, and many more use cases. The function takes the column containing the dynamic array and a static dynamic array of the filter's coefficients as input, and applies the filter on the column. It outputs a new dynamic array column, containing the filtered output.  \\r\\n\\r\\n## Syntax\\r\\n\\r\\n`series_fir(`*x*`,` *filter* [`,` *normalize*[`,` *center*]]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *x*: Dynamic array of numeric values. Typically the resulting output of [make-series](make-seriesoperator.md) or [make_list](makelist-aggfunction.md) operators.\\r\\n* *filter*: Dynamic array of numeric values containing the coefficients of the filter.\\r\\n* *normalize*: Optional Boolean value indicating whether the filter should be normalized. That is, divided by the sum of the coefficients. If filter contains negative values, then *normalize* must be specified as `false`, otherwise result will be `null`. If not specified, then a default value of *normalize* is assumed, depending on the presence of negative values in the *filter*. If *filter* contains at least one negative value, then *normalize* is assumed to be `false`.  \\r\\nNormalization is a convenient way to make sure that the sum of the coefficients is 1. Then the filter doesn't amplify or attenuate the series. For example, the moving average of four bins could be specified by *filter*=[1,1,1,1] and *normalized*=true, which is easier than typing [0.25,0.25.0.25,0.25].\\r\\n* *center*: An optional Boolean value that indicates whether the filter is applied symmetrically on a time window before and after the current point, or on a time window from the current point backwards. By default, center is false, which fits the scenario of streaming data, where we can only apply the filter on the current and older points. However, for ad-hoc processing you can set it to `true`, keeping it synchronized with the time series. See examples below. This parameter controls the filter\\u2019s [group delay](https://en.wikipedia.org/wiki/Group_delay_and_phase_delay).\",\"* Calculate a moving average of five points by setting *filter*=[1,1,1,1,1] and *normalize*=`true` (default). Note the effect of *center*=`false` (default) vs. `true`:\\r\\n\\r\\n\\r\\n\\r\\n```\\r\\nrange t from bin(now(), 1h)-23h to bin(now(), 1h) step 1h\\r\\n| summarize t=make_list(t)\\r\\n| project id='TS', val=dynamic([0,0,0,0,0,0,0,0,0,10,20,40,100,40,20,10,0,0,0,0,0,0,0,0]), t\\r\\n| extend 5h_MovingAvg=series_fir(val, dynamic([1,1,1,1,1])),\\r\\n         5h_MovingAvg_centered=series_fir(val, dynamic([1,1,1,1,1]), true, true)\\r\\n| render timechart\\r\\n```\\r\\n\\r\\nThis query returns:  \\r\\n*5h_MovingAvg*: Five points moving average filter. The spike is smoothed and its peak shifted by (5-1)/2 = 2h.  \\r\\n*5h_MovingAvg_centered*: Same, but by setting `center=true`, the peak stays in its original location.\\r\\n\\r\\n![Series fir.](images/series-firfunction/series-fir.png)\\r\\n\\r\\n* To calculate the difference between a point and its preceding one, set *filter*=[1,-1].\\r\\n\\r\\n\\r\\n\\r\\n```\\r\\nrange t from bin(now(), 1h)-11h to bin(now(), 1h) step 1h\\r\\n| summarize t=make_list(t)\\r\\n| project id='TS',t,value=dynamic([0,0,0,0,2,2,2,2,3,3,3,3])\\r\\n| extend diff=series_fir(value, dynamic([1,-1]), false, false)\\r\\n| render timechart\\r\\n```\\r\\n\\r\\n![Series fir 2.](images/series-firfunction/series-fir2.png)\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-firfunction\",\"series-firfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_fit_2lines\",\"Applies two segments linear regression on a series, returning multiple columns.\",\"Takes an expression containing dynamic numerical array as input and applies [two segments linear regression](https://en.wikipedia.org/wiki/Segmented_regression) in order to identify and quantify a trend change in a series. The function iterates on the series indexes. In each iteration, the function splits the series to two parts, fits a separate line (using [series_fit_line()](series-fit-linefunction.md)) to each part, and calculates the total r-square. The best split is the one that maximized r-square; the function returns its parameters:\\r\\n\\r\\n|Parameter  |Description  |\\r\\n|---------|---------|\\r\\n|`rsquare`     | [R-square](https://en.wikipedia.org/wiki/Coefficient_of_determination) is standard measure of the fit quality. It's a number in the range [0-1], where 1 - is the best possible fit, and 0 means the data is unordered and do not fit any line.        |\\r\\n|`split_idx`     |   The index of breaking point to two segments (zero-based).      |\\r\\n|`variance`     | Variance of the input data.        |\\r\\n|`rvariance`     | Residual variance, which is the variance between the input data values the approximated ones (by the two line segments).        |\\r\\n|`line_fit`     | Numerical array holding a series of values of the best fitted line. The series length is equal to the length of the input array. It's mainly used for charting.        |\\r\\n|`right_rsquare`     | R-square of the line on the right side of the split, see [series_fit_line()](series-fit-linefunction.md).        |\\r\\n|`right_slope`     | Slope of the right approximated line (of the form y=ax+b).         |\\r\\n|`right_interception`     |  Interception of the approximated left line (b from y=ax+b).       |\\r\\n|`right_variance`    | Variance of the input data on the right side of the split.        |\\r\\n|`right_rvariance`     | Residual variance of the input data on the right side of the split.        |\\r\\n|`left_rsquare`     | R-square of the line on the left side of the split, see [series_fit_line()](series-fit-linefunction.md).        |\\r\\n|`left_slope`    | Slope of the left approximated line (of the form y=ax+b).        |\\r\\n|`left_interception`     |   Interception of the approximated left line (of the form y=ax+b).      |\\r\\n|`left_variance`     | Variance of the input data on the left side of the split.        |\\r\\n|`left_rvariance`     | Residual variance of the input data on the left side of the split.        |\\r\\n\\r\\n> [!Note]\\r\\n> This function returns multiple columns an so cannot be used as an argument for another function.\\r\\n\\r\\n## Syntax\\r\\n\\r\\nproject `series_fit_2lines(`*x*`)`\\r\\n\\r\\n* Will return all mentioned above columns with the following names: series_fit_2lines_x_rsquare, series_fit_2lines_x_split_idx etc.\\r\\n\\r\\nproject (rs, si, v)=`series_fit_2lines(`*x*`)`\\r\\n\\r\\n* Will return the following columns: rs (r-square), si (split index), v (variance) and the rest will look like series_fit_2lines_x_rvariance, series_fit_2lines_x_line_fit and etc.\\r\\n\\r\\nextend (rs, si, v)=`series_fit_2lines(`*x*`)`\\r\\n\\r\\n* Will return only: rs (r-square), si (split index) and v (variance).\\r\\n  \\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *x*: Dynamic array of numeric values.  \\r\\n\\r\\n> [!TIP]\\r\\n> The most convenient way of using this function is applying it to the results of [make-series](make-seriesoperator.md) operator.\",\"```\\r\\nprint id=' ', x=range(bin(now(), 1h)-11h, bin(now(), 1h), 1h), y=dynamic([1,2.2, 2.5, 4.7, 5.0, 12, 10.3, 10.3, 9, 8.3, 6.2])\\r\\n| extend (Slope,Interception,RSquare,Variance,RVariance,LineFit)=series_fit_line(y), (RSquare2, SplitIdx, Variance2,RVariance2,LineFit2)=series_fit_2lines(y)\\r\\n| project id, x, y, LineFit, LineFit2\\r\\n| render timechart\\r\\n```\\r\\n\\r\\n![Series fit 2 lines.](images/series-fit-2lines/series-fit-2lines.png)\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-fit-2linesfunction\",\"series-fit-2linesfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_fit_2lines_dynamic\",\"Applies two segments linear regression on a series, returning a dynamic object.\",\"Takes an expression containing dynamic numerical array as input and applies [two segments linear regression](https://en.wikipedia.org/wiki/Segmented_regression) in order to identify and quantify trend changes in a series. The function iterates on the series indexes. In each iteration, it splits the series to two parts, and fits a separate line using [series_fit_line()](series-fit-linefunction.md) or [series_fit_line_dynamic()](series-fit-line-dynamicfunction.md). The function fits the lines to each of the two parts, and calculates the total R-squared value. The best split is the one that maximizes R-squared. The function returns its parameters in dynamic value with the following content:\\r\\n\\r\\n* `rsquare`: [R-squared](https://en.wikipedia.org/wiki/Coefficient_of_determination) is a standard measure of the fit quality. It's a number in the range of [0-1], where 1 is the best possible fit, and 0 means the data is unordered and do not fit any line.\\r\\n* `split_idx`: the index of breaking point to two segments (zero-based).\\r\\n* `variance`: variance of the input data.\\r\\n* `rvariance`: residual variance that is the variance between the input data values the approximated ones (by the two line segments).\\r\\n* `line_fit`: numerical array holding a series of values of the best fitted line. The series length is equal to the length of the input array. It is used for charting.\\r\\n* `right.rsquare`: r-square of the line on the right side of the split, see [series_fit_line()](series-fit-linefunction.md) or [series_fit_line_dynamic()](series-fit-line-dynamicfunction.md).\\r\\n* `right.slope`: slope of the right approximated line (of the form y=ax+b).\\r\\n* `right.interception`: interception of the approximated left line (b from y=ax+b).\\r\\n* `right.variance`: variance of the input data on the right side of the split.\\r\\n* `right.rvariance`: residual variance of the input data on the right side of the split.\\r\\n* `left.rsquare`: r-square of the line on the left side of the split, see [series_fit_line()].(series-fit-linefunction.md) or [series_fit_line_dynamic()](series-fit-line-dynamicfunction.md).\\r\\n* `left.slope`: slope of the left approximated line (of the form y=ax+b).\\r\\n* `left.interception`: interception of the approximated left line (of the form y=ax+b).\\r\\n* `left.variance`: variance of the input data on the left side of the split.\\r\\n* `left.rvariance`: residual variance of the input data on the left side of the split.\\r\\n\\r\\nThis operator is similar to [series_fit_2lines](series-fit-2linesfunction.md). Unlike `series-fit-2lines`, it returns a dynamic bag.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`series_fit_2lines_dynamic(`*x*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *x*: Dynamic array of numeric values.  \\r\\n\\r\\n> [!TIP]\\r\\n> The most convenient way of using this function is applying it to the results of the [make-series](make-seriesoperator.md) operator.\",\"```\\r\\nprint id=' ', x=range(bin(now(), 1h)-11h, bin(now(), 1h), 1h), y=dynamic([1,2.2, 2.5, 4.7, 5.0, 12, 10.3, 10.3, 9, 8.3, 6.2])\\r\\n| extend LineFit=series_fit_line_dynamic(y).line_fit, LineFit2=series_fit_2lines_dynamic(y).line_fit\\r\\n| project id, x, y, LineFit, LineFit2\\r\\n| render timechart\\r\\n```\\r\\n\\r\\n![Series fit 2 lines.](images/series-fit-2lines/series-fit-2lines.png)\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-fit-2lines-dynamicfunction\",\"series-fit-2lines-dynamicfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_fit_line\",\"Applies linear regression on a series, returning multiple columns.\",'Takes an expression containing dynamic numerical array as input and does [linear regression](https://en.wikipedia.org/wiki/Line_fitting) to find the line that best fits it. This function should be used on time series arrays, fitting the output of make-series operator. The function generates the following columns:\\r\\n\\r\\n* `rsquare`: [r-square](https://en.wikipedia.org/wiki/Coefficient_of_determination) is a standard measure of the fit quality. The value\\'s a number in the range [0-1], where 1 - is the best possible fit, and 0 means the data is unordered and doesn\\'t fit any line. \\r\\n* `slope`: Slope of the approximated line (\"a\" from y=ax+b).\\r\\n* `variance`: Variance of the input data.\\r\\n* `rvariance`: Residual variance that is the variance between the input data values the approximated ones.\\r\\n* `interception`: Interception of the approximated line (\"b\" from y=ax+b).\\r\\n* `line_fit`: Numerical array holding a series of values of the best fitted line. The series length is equal to the length of the input array. The value\\'s used for charting.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`series_fit_line(`*x*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *x*: Dynamic array of numeric values.\\r\\n\\r\\n> [!TIP]\\r\\n> The most convenient way of using this function is to apply it to the results of [make-series](make-seriesoperator.md) operator.',\"```\\r\\nprint id=' ', x=range(bin(now(), 1h)-11h, bin(now(), 1h), 1h), y=dynamic([2,5,6,8,11,15,17,18,25,26,30,30])\\r\\n| extend (RSquare,Slope,Variance,RVariance,Interception,LineFit)=series_fit_line(y)\\r\\n| render timechart\\r\\n```\\r\\n\\r\\n![Series fit line.](images/series-fit-line/series-fit-line.png)\\r\\n| RSquare | Slope | Variance | RVariance | Interception | LineFit                                                                                     |\\r\\n|---------|-------|----------|-----------|--------------|---------------------------------------------------------------------------------------------|\\r\\n| 0.982   | 2.730 | 98.628   | 1.686     | -1.666       | 1.064, 3.7945, 6.526, 9.256, 11.987, 14.718, 17.449, 20.180, 22.910, 25.641, 28.371, 31.102 |\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-fit-linefunction\",\"series-fit-linefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_fit_line_dynamic\",\"Applies linear regression on a series, returning dynamic object.\",\"Takes an expression containing dynamic numerical array as input, and does [linear regression](https://en.wikipedia.org/wiki/Line_fitting) to find the line that best fits it. This function should be used on time series arrays, fitting the output of make-series operator. It generates a dynamic value with the following content:\\r\\n\\r\\n* `rsquare`: [r-square](https://en.wikipedia.org/wiki/Coefficient_of_determination) is a standard measure of the fit quality. It's a number in the range [0-1], where 1 is the best possible fit, and 0 means the data is unordered and doesn't fit any line\\r\\n* `slope`: Slope of the approximated line (the *a*-value from *y=ax+b*)\\r\\n* `variance`: Variance of the input data\\r\\n* `rvariance`: Residual variance that is the variance between the input data values and the approximated ones.\\r\\n* `interception`: Interception of the approximated line (the *b*-value from *y=ax+b*)\\r\\n* `line_fit`: Numerical array containing a series of values of the best fit line. The series length is equal to the length of the input array. It's used mainly for charting.\\r\\n\\r\\nThis operator is similar to [series_fit_line](series-fit-linefunction.md), but unlike `series-fit-line` it returns a dynamic bag.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`series_fit_line_dynamic(`*x*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *x*: Dynamic array of numeric values.\\r\\n\\r\\n> [!TIP]\\r\\n> The most convenient way of using this function is by applying it to the results of [make-series](make-seriesoperator.md) operator.\",\"```\\r\\nprint id=' ', x=range(bin(now(), 1h)-11h, bin(now(), 1h), 1h), y=dynamic([2,5,6,8,11,15,17,18,25,26,30,30])\\r\\n| extend fit=series_fit_line_dynamic(y)\\r\\n| extend RSquare=fit.rsquare, Slope=fit.slope, Variance=fit.variance,RVariance=fit.rvariance,Interception=fit.interception,LineFit=fit.line_fit\\r\\n| render timechart\\r\\n```\\r\\n\\r\\n![Series fit line.](images/series-fit-line/series-fit-line.png)\\r\\n| RSquare | Slope | Variance | RVariance | Interception | LineFit                                                                                     |\\r\\n|---------|-------|----------|-----------|--------------|---------------------------------------------------------------------------------------------|\\r\\n| 0.982   | 2.730 | 98.628   | 1.686     | -1.666       | 1.064, 3.7945, 6.526, 9.256, 11.987, 14.718, 17.449, 20.180, 22.910, 25.641, 28.371, 31.102 |\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-fit-line-dynamicfunction\",\"series-fit-line-dynamicfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_fit_poly\",\"Applies a polynomial regression from an independent variable (x_series) to a dependent variable (y_series). This function takes a table containing multiple series (dynamic numerical arrays) and generates the best fit high-order polynomial for each series using [polynomial regression](https://en.wikipedia.org/wiki/Polynomial_regression).\",\"> [!TIP]\\r\\n> * For linear regression of an evenly spaced series, as created by [make-series operator](make-seriesoperator.md), use the simpler function [series_fit_line()](series-fit-linefunction.md). See [Example 2](#example-2).\\r\\n> * If *x_series* is supplied, and the regression is done for a high degree, consider normalizing to the [0-1] range. See [Example 3](#example-3).\\r\\n> * If *x_series* is of datetime type, it must be converted to double and normalized. See [Example 3](#example-3).\\r\\n> * For reference implementation of polynomial regression using inline Python, see [series_fit_poly_fl()](../functions-library/series-fit-poly-fl.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`T | extend  series_fit_poly(`*y_series*`, `*x_series*`, `*degree*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n|Argument| Description| Required/optional| Notes|\\r\\n|---|---|---|---|\\r\\n| *y_series* | Dynamic numerical array containing the [dependent variable](https://en.wikipedia.org/wiki/Dependent_and_independent_variables). | Required |\\r\\n| *x_series* | Dynamic numerical array containing the [independent variable](https://en.wikipedia.org/wiki/Dependent_and_independent_variables). | Optional. Required only for [unevenly spaced series](https://en.wikipedia.org/wiki/Unevenly_spaced_time_series). | If not given, it's set to a default value of [1,2, ..., length(y_series)].|\\r\\n| *degree* | The required order of the polynomial to fit. For example, 1 for linear regression, 2 for quadratic regression, and so on. | Optional | Defaults to 1 (linear regression).|\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe `series_fit_poly()` function returns the following columns:\\r\\n\\r\\n* `rsquare`: [r-square](https://en.wikipedia.org/wiki/Coefficient_of_determination) is a standard measure of the fit quality. The value's a number in the range [0-1], where 1 - is the best possible fit, and 0 means the data is unordered and doesn't fit any line.\\r\\n* `coefficients`:  Numerical array holding the coefficients of the best fitted polynomial with the given degree, ordered from the highest power coefficient to the lowest.\\r\\n* `variance`: Variance of the dependent variable (y_series).\\r\\n* `rvariance`: Residual variance that is the variance between the input data values the approximated ones.\\r\\n* `poly_fit`: Numerical array holding a series of values of the best fitted polynomial. The series length is equal to the length of the dependent variable (y_series). The value's used for charting.\",\"### Example 1\\r\\n\\r\\nA fifth order polynomial with noise on x & y axes:\\r\\n\\r\\n```\\r\\nrange x from 1 to 200 step 1\\r\\n| project x = rand()*5 - 2.3\\r\\n| extend y = pow(x, 5)-8*pow(x, 3)+10*x+6\\r\\n| extend y = y + (rand() - 0.5)*0.5*y\\r\\n| summarize x=make_list(x), y=make_list(y)\\r\\n| extend series_fit_poly(y, x, 5)\\r\\n| project-rename fy=series_fit_poly_y_poly_fit, coeff=series_fit_poly_y_coefficients\\r\\n|fork (project x, y, fy) (project-away x, y, fy)\\r\\n| render linechart \\r\\n```\\r\\n\\r\\n![Graph showing fifth order polynomial fit to a series with noise.](images/series-fit-poly-function/fifth-order-noise-1.png)\\r\\n![Coefficients of fifth order polynomial fit to  a series with noise.](images/series-fit-poly-function/fifth-order-noise-table-1.png)\\r\\n\\r\\n### Example 2\\r\\n\\r\\nVerify that `series_fit_poly` with degree=1 matches `series_fit_line`:\\r\\n\\r\\n```\\r\\ndemo_series1\\r\\n| extend series_fit_line(y)\\r\\n| extend series_fit_poly(y)\\r\\n| project-rename y_line = series_fit_line_y_line_fit, y_poly = series_fit_poly_y_poly_fit\\r\\n| fork (project x, y, y_line, y_poly) (project-away id, x, y, y_line, y_poly) \\r\\n| render linechart with(xcolumn=x, ycolumns=y, y_line, y_poly)\\r\\n```\\r\\n\\r\\n![Graph showing linear regression.](images/series-fit-poly-function/fit-poly-line.png)\\r\\n![Coefficients of linear regression.](images/series-fit-poly-function/fit-poly-line-table.png)    \\r\\n\\r\\n### Example 3\\r\\n\\r\\nIrregular (unevenly spaced) time series:\\r\\n\\r\\n```\\r\\n//\\r\\n//  x-axis must be normalized to the range [0-1] if either degree is relatively big (>= 5) or original x range is big.\\r\\n//  so if x is a time axis it must be normalized as conversion of timestamp to long generate huge numbers (number of 100 nano-sec ticks from 1/1/1970)\\r\\n//\\r\\n//  Normalization: x_norm = (x - min(x))/(max(x) - min(x))\\r\\n//\\r\\nirregular_ts\\r\\n| extend series_stats(series_add(TimeStamp, 0))                                                                 //  extract min/max of time axis as doubles\\r\\n| extend x = series_divide(series_subtract(TimeStamp, series_stats__min), series_stats__max-series_stats__min)  // normalize time axis to [0-1] range\\r\\n| extend series_fit_poly(num, x, 8)\\r\\n| project-rename fnum=series_fit_poly_num_poly_fit\\r\\n| render timechart with(ycolumns=num, fnum)\\r\\n```\\r\\n\\r\\n![Graph showing eighth order polynomial fit to an irregular time series.](images/series-fit-poly-function/irregular-time-series-1.png)\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-fit-poly-function\",\"series-fit-poly-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_greater\",\"Calculates the element-wise greater (`>`) logic operation of two numeric series inputs.\",\"## Syntax\\r\\n\\r\\n`series_greater (`*Series1*`,` *Series2*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *Series1, Series2*: Input numeric arrays to be element-wise compared. All arguments must be dynamic arrays. \\r\\n\\r\\n## Returns\\r\\n\\r\\nDynamic array of booleans containing the calculated element-wise greater logic operation between the two inputs. Any non-numeric element or non-existing element (arrays of different sizes) yields a `null` element value.\",\"```\\r\\nprint s1 = dynamic([1,2,4]), s2 = dynamic([4,2,1])\\r\\n| extend s1_greater_s2 = series_greater(s1, s2)\\r\\n```\\r\\n\\r\\n|s1|s2|s1_greater_s2|\\r\\n|---|---|---|\\r\\n|[1,2,4]|[4,2,1]|[false,false,true]|\\r\\n\\r\\n## See also\\r\\n\\r\\nFor entire series statistics comparisons, see:\\r\\n\\r\\n* [series_stats()](series-statsfunction.md)\\r\\n* [series_stats_dynamic()](series-stats-dynamicfunction.md)\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-greaterfunction\",\"series-greaterfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_greater_equals\",\"Calculates the element-wise greater or equals (`>=`) logic operation of two numeric series inputs.\",\"## Syntax\\r\\n\\r\\n`series_greater_equals (`*Series1*`,` *Series2*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *Series1, Series2*: Input numeric arrays to be element-wise compared. All arguments must be dynamic arrays. \\r\\n\\r\\n## Returns\\r\\n\\r\\nDynamic array of booleans containing the calculated element-wise greater or equal logic operation between the two inputs. Any non-numeric element or non-existing element (arrays of different sizes) yields a `null` element value.\",\"```\\r\\nprint s1 = dynamic([1,2,4]), s2 = dynamic([4,2,1])\\r\\n| extend s1_greater_equals_s2 = series_greater_equals(s1, s2)\\r\\n```\\r\\n\\r\\n|s1|s2|s1_greater_equals_s2|\\r\\n|---|---|---|\\r\\n|[1,2,4]|[4,2,1]|[false,true,true]|\\r\\n\\r\\n## See also\\r\\n\\r\\nFor entire series statistics comparisons, see:\\r\\n\\r\\n* [series_stats()](series-statsfunction.md)\\r\\n* [series_stats_dynamic()](series-stats-dynamicfunction.md)\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-greater-equalsfunction\",\"series-greater-equalsfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_ifft\",\"Applies the Inverse Fast Fourier Transform (IFFT) on a series.\",\"The series_ifft() function takes a series of complex numbers in the frequency domain and transforms it back to the time/spatial domain using the [Fast Fourier Transform](https://en.wikipedia.org/wiki/Fast_Fourier_transform). This function is the complementary function of [series_fft](series-fft-function.md). Commonly the original series is transformed to the frequency domain for spectral processing and then back to the time/spatial domain.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`series_ifft(`*fft_real* [`,` *fft_imaginary*]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *fft_real*: Dynamic array of numeric values representing the real component of the series to transform.\\r\\n* *fft_imaginary*: A similar dynamic array representing the imaginary component of the series. This parameter is optional and should be specified only if the input series contains complex numbers.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe function returns the complex inverse fft in two series. The first series for the real component and the second one for the imaginary component.\",\"See [series_fft](series-fft-function.md#example)\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-ifft-function\",\"series-ifft-function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_iir\",\"Applies an Infinite Impulse Response filter on a series.\",\"The function takes an expression containing dynamic numerical array as input, and applies an [Infinite Impulse Response](https://en.wikipedia.org/wiki/Infinite_impulse_response) filter. By specifying the filter coefficients, the function can be used:\\r\\n\\r\\n* to calculate the cumulative sum of the series\\r\\n* to apply smoothing operations\\r\\n* to apply various [high-pass](https://en.wikipedia.org/wiki/High-pass_filter), [band-pass](https://en.wikipedia.org/wiki/Band-pass_filter), and [low-pass](https://en.wikipedia.org/wiki/Low-pass_filter) filters\\r\\n\\r\\nThe function takes as input the column containing the dynamic array and two static dynamic arrays of the filter's *a* and *b* coefficients, and applies the filter on the column. It outputs a new dynamic array column, containing the filtered output.  \\r\\n\\r\\n## Syntax\\r\\n\\r\\n`series_iir(`*x*`,` *b* `,` *a*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *x*: Dynamic array of numeric values, typically the resulting output of [make-series](make-seriesoperator.md) or [make_list](makelist-aggfunction.md) operators.\\r\\n* *b*: Dynamic array of numeric values, containing the numerator coefficients of the filter.\\r\\n* *a*: Dynamic array of numeric values, containing the denominator coefficients of the filter.\\r\\n\\r\\n> [!IMPORTANT]\\r\\n> The first element of `a` (that is, `a[0]`) mustn't be zero, to avoid division by 0. See the [formula below](#the-filters-recursive-formula).\\r\\n\\r\\n## The filter's recursive formula\\r\\n\\r\\n* Consider an input array X, and coefficients arrays a and b of lengths n_a and n_b respectively. The transfer function of the filter that will generate the output array Y, is defined by:\\r\\n\\r\\n<div align=\\\"center\\\">\\r\\nY<sub>i<\\/sub> = a<sub>0<\\/sub><sup>-1<\\/sup>(b<sub>0<\\/sub>X<sub>i<\\/sub>\\r\\n + b<sub>1<\\/sub>X<sub>i-1<\\/sub> + ... + b<sub>n<sub>b<\\/sub>-1<\\/sub>X<sub>i-n<sub>b<\\/sub>-1<\\/sub>\\r\\n - a<sub>1<\\/sub>Y<sub>i-1<\\/sub>-a<sub>2<\\/sub>Y<sub>i-2<\\/sub> - ... - a<sub>n<sub>a<\\/sub>-1<\\/sub>Y<sub>i-n<sub>a<\\/sub>-1<\\/sub>)\\r\\n<\\/div>\",\"Calculate a cumulative sum. \\r\\nUse the iir filter with coefficients *a*=[1,-1] and *b*=[1]:  \\r\\n\\r\\n```\\r\\nlet x = range(1.0, 10, 1);\\r\\nprint x=x, y = series_iir(x, dynamic([1]), dynamic([1,-1]))\\r\\n| mv-expand x, y\\r\\n```\\r\\n\\r\\n| x | y |\\r\\n|:--|:--|\\r\\n|1.0|1.0|\\r\\n|2.0|3.0|\\r\\n|3.0|6.0|\\r\\n|4.0|10.0|\\r\\n\\r\\nHere's how to wrap it in a function:\\r\\n\\r\\n```\\r\\nlet vector_sum=(x:dynamic)\\r\\n{\\r\\n  let y=array_length(x) - 1;\\r\\n  toreal(series_iir(x, dynamic([1]), dynamic([1, -1]))[y])\\r\\n};\\r\\nprint d=dynamic([0, 1, 2, 3, 4])\\r\\n| extend dd=vector_sum(d)\\r\\n```\\r\\n\\r\\n|d            |dd  |\\r\\n|-------------|----|\\r\\n|`[0,1,2,3,4]`|`10`|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-iirfunction\",\"series-iirfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_less\",\"Calculates the element-wise less (`<`) logic operation of two numeric series inputs.\",\"## Syntax\\r\\n\\r\\n`series_less (`*Series1*`,` *Series2*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *Series1, Series2*: Input numeric arrays to be element-wise compared. All arguments must be dynamic arrays. \\r\\n\\r\\n## Returns\\r\\n\\r\\nDynamic array of booleans containing the calculated element-wise less logic operation between the two inputs. Any non-numeric element or non-existing element (arrays of different sizes) yields a `null` element value.\",\"```\\r\\nprint s1 = dynamic([1,2,4]), s2 = dynamic([4,2,1])\\r\\n| extend s1_less_s2 = series_less(s1, s2)\\r\\n```\\r\\n\\r\\n|s1|s2|s1_less_s2|\\r\\n|---|---|---|\\r\\n|[1,2,4]|[4,2,1]|[true,false,false]|\\r\\n\\r\\n## See also\\r\\n\\r\\nFor entire series statistics comparisons, see:\\r\\n\\r\\n* [series_stats()](series-statsfunction.md)\\r\\n* [series_stats_dynamic()](series-stats-dynamicfunction.md)\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-lessfunction\",\"series-lessfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_less_equals\",\"Calculates the element-wise less or equal (`<=`) logic operation of two numeric series inputs.\",\"## Syntax\\r\\n\\r\\n`series_less_equals (`*Series1*`,` *Series2*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *Series1, Series2*: Input numeric arrays to be element-wise compared. All arguments must be dynamic arrays. \\r\\n\\r\\n## Returns\\r\\n\\r\\nDynamic array of booleans containing the calculated element-wise less or equal logic operation between the two inputs. Any non-numeric element or non-existing element (arrays of different sizes) yields a `null` element value.\",\"```\\r\\nprint s1 = dynamic([1,2,4]), s2 = dynamic([4,2,1])\\r\\n| extend s1_less_equals_s2 = series_less_equals(s1, s2)\\r\\n```\\r\\n\\r\\n|s1|s2|s1_less_equals_s2|\\r\\n|---|---|---|\\r\\n|[1,2,4]|[4,2,1]|[true,true,false]|\\r\\n\\r\\n## See also\\r\\n\\r\\nFor entire series statistics comparisons, see:\\r\\n\\r\\n* [series_stats()](series-statsfunction.md)\\r\\n* [series_stats_dynamic()](series-stats-dynamicfunction.md)\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-less-equalsfunction\",\"series-less-equalsfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_multiply\",\"Calculates the element-wise multiplication of two numeric series inputs.\",\"## Syntax\\r\\n\\r\\n`series_multiply(`*series1*`,` *series2*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *series1, series2*: Input numeric arrays, to be element-wise multiplied into a dynamic array result. All arguments must be dynamic arrays. \\r\\n\\r\\n## Returns\\r\\n\\r\\nDynamic array of calculated element-wise multiplication operation between the two inputs. Any non-numeric element or non-existing element (arrays of different sizes) yields a `null` element value.\",\"```\\r\\nrange x from 1 to 3 step 1\\r\\n| extend y = x * 2\\r\\n| extend z = y * 2\\r\\n| project s1 = pack_array(x,y,z), s2 = pack_array(z, y, x)\\r\\n| extend s1_multiply_s2 = series_multiply(s1, s2)\\r\\n```\\r\\n\\r\\n|s1\\t        |s2|\\t    s1_multiply_s2|\\r\\n|---|---|---|\\r\\n|[1,2,4]\\t|[4,2,1]|\\t[4,4,4]|\\r\\n|[2,4,8]\\t|[8,4,2]|\\t[16,16,16]|\\r\\n|[3,6,12]\\t|[12,6,3]|\\t[36,36,36]|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-multiplyfunction\",\"series-multiplyfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_not_equals\",\"Calculates the element-wise not equals (`!=`) logic operation of two numeric series inputs.\",\"## Syntax\\r\\n\\r\\n`series_not_equals (`*Series1*`,` *Series2*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *Series1, Series2*: Input numeric arrays to be element-wise compared. All arguments must be dynamic arrays. \\r\\n\\r\\n## Returns\\r\\n\\r\\nDynamic array of booleans containing the calculated element-wise not equal logic operation between the two inputs. Any non-numeric element or non-existing element (arrays of different sizes) yields a `null` element value.\",\"```\\r\\nprint s1 = dynamic([1,2,4]), s2 = dynamic([4,2,1])\\r\\n| extend s1_not_equals_s2 = series_not_equals(s1, s2)\\r\\n```\\r\\n\\r\\n|s1|s2|s1_not_equals_s2|\\r\\n|---|---|---|\\r\\n|[1,2,4]|[4,2,1]|[true,false,true]|\\r\\n\\r\\n## See also\\r\\n\\r\\nFor entire series statistics comparisons, see:\\r\\n\\r\\n* [series_stats()](series-statsfunction.md)\\r\\n* [series_stats_dynamic()](series-stats-dynamicfunction.md)\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-not-equalsfunction\",\"series-not-equalsfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_outliers\",\"Scores anomaly points in a series.\",'The function takes an expression with a dynamic numerical array as input, and generates a dynamic numeric array of the same length. Each value of the array indicates a score of a possible anomaly, using [\"Tukey\\'s test\"](https://en.wikipedia.org/wiki/Outlier#Tukey\\'s_fences). A value greater than 1.5 in the same element of the input indicates a rise or decline anomaly. A value less than -1.5, indicates a decline anomaly.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`series_outliers(`*x*`, `*kind*`, `*ignore_val*`, `*min_percentile*`, `*max_percentile*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *x*: Dynamic array cell that is an array of numeric values\\r\\n* *kind*: Algorithm of outlier detection. Currently supports `\"tukey\"` (traditional \"Tukey\") and  `\"ctukey\"` (custom \"Tukey\"). Default is `\"ctukey\"`\\r\\n* *ignore_val*: Numeric value indicating missing values in the series. Default is double(null). The score of nulls and ignore values is set to `0`\\r\\n* *min_percentile*: For calculating the normal inter-quantile range. Default is 10, custom values supported are in range `[2.0, 98.0]` (`ctukey` only)\\r\\n* *max_percentile*: same, default is 90, custom values supported are in range `[2.0, 98.0]` (ctukey only)\\r\\n\\r\\nThe following table describes differences between `\"tukey\"` and `\"ctukey\"`:\\r\\n\\r\\n| Algorithm | Default quantile range | Supports custom quantile range |\\r\\n|-----------|----------------------- |--------------------------------|\\r\\n| `\"tukey\"` | 25% / 75%              | No                             |\\r\\n| `\"ctukey\"`| 10% / 90%              | Yes                            |\\r\\n\\r\\n> [!TIP]\\r\\n> The best way to use this function is to apply it to the results of the [make-series](make-seriesoperator.md) operator.',\"A time series with some noise creates outliers. If you would like to replace those outliers (noise) with the average value, use series_outliers() to detect the outliers, and then replace them.\\r\\n\\r\\n```\\r\\nrange x from 1 to 100 step 1 \\r\\n| extend y=iff(x==20 or x==80, 10*rand()+10+(50-x)/2, 10*rand()+10) // generate a sample series with outliers at x=20 and x=80\\r\\n| summarize x=make_list(x),series=make_list(y)\\r\\n| extend series_stats(series), outliers=series_outliers(series)\\r\\n| mv-expand x to typeof(long), series to typeof(double), outliers to typeof(double)\\r\\n| project x, series , outliers_removed=iff(outliers > 1.5 or outliers < -1.5, series_stats_series_avg , series ) // replace outliers with the average\\r\\n| render linechart\\r\\n``` \\r\\n\\r\\n![Series outliers.](images/series-outliersfunction/series-outliers.png)\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-outliersfunction\",\"series-outliersfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_pearson_correlation\",\"Calculates the pearson correlation coefficient of two numeric series inputs.\",\"See: [Pearson correlation coefficient](https://en.wikipedia.org/wiki/Pearson_correlation_coefficient).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`series_pearson_correlation(`*Series1*`,` *Series2*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *Series1, Series2*: Input numeric arrays for calculating the correlation coefficient. All arguments must be dynamic arrays of the same length. \\r\\n\\r\\n## Returns\\r\\n\\r\\nThe calculated Pearson correlation coefficient between the two inputs. Any non-numeric element or non-existing element (arrays of different sizes) yields a `null` result.\",\"```\\r\\nrange s1 from 1 to 5 step 1 | extend s2 = 2*s1 // Perfect correlation\\r\\n| summarize s1 = make_list(s1), s2 = make_list(s2)\\r\\n| extend correlation_coefficient = series_pearson_correlation(s1,s2)\\r\\n```\\r\\n\\r\\n|s1|s2|correlation_coefficient|\\r\\n|---|---|---|\\r\\n|[1,2,3,4,5]|[2,4,6,8,10]|1|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-pearson-correlationfunction\",\"series-pearson-correlationfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_periods_detect\",\"Finds the most significant periods that exist in a time series.\",\"The function takes as input:\\r\\n\\r\\n* A column containing a dynamic array of time series. Typically, the column is the resulting output of [make-series](make-seriesoperator.md) operator.\\r\\n* Two `real` numbers defining the minimal and maximal period size, the number of bins to search for. For example, for a 1h bin, the size of a daily period would be 24. \\r\\n* A `long` number defining the total number of periods for the function to search. \\r\\n\\r\\nThe function outputs two columns:\\r\\n\\r\\n* *periods*: A dynamic array containing the periods that have been found, in units of the bin size, ordered by their scores.\\r\\n* *scores*: A dynamic array containing values between 0 and 1. Each array measures the significance of a period in its respective position in the *periods* array.\\r\\n \\r\\n\\r\\n## Syntax\\r\\n\\r\\n`series_periods_detect(`*x*`,` *min_period*`,` *max_period*`,` *num_periods*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *x*: Dynamic array scalar expression that is an array of numeric values, typically the resulting output of [make-series](make-seriesoperator.md) or [make_list](makelist-aggfunction.md) operators.\\r\\n* *min_period*: A `real` number specifying the minimal period to search for.\\r\\n* *max_period*: A `real` number specifying the maximal period to search for.\\r\\n* *num_periods*: A `long` number specifying the maximum required number of periods. This number will be the length of the output dynamic arrays.\\r\\n\\r\\n> [!IMPORTANT]\\r\\n> * The algorithm can detect periods containing at least 4 points and at most half of the series length. \\r\\n>\\r\\n> * Set the *min_period* a little below, and *max_period* a little above, the periods you expect to find in the time series. For example, if you have an hourly aggregated signal, and you look for both daily and weekly periods (24 and 168 hours respectively), you can set *min_period*=0.8\\\\*24, *max_period*=1.2\\\\*168, and leave 20% margins around these periods.\\r\\n>\\r\\n> * The input time series must be regular. That is, aggregated in constant bins, which is always the case if it has been created using [make-series](make-seriesoperator.md). Otherwise, the output is meaningless.\",\"The following query embeds a snapshot of a month of an application\\u2019s traffic, aggregated twice a day. The bin size is 12 hours.\\r\\n\\r\\n```\\r\\nprint y=dynamic([80,139,87,110,68,54,50,51,53,133,86,141,97,156,94,149,95,140,77,61,50,54,47,133,72,152,94,148,105,162,101,160,87,63,53,55,54,151,103,189,108,183,113,175,113,178,90,71,62,62,65,165,109,181,115,182,121,178,114,170])\\r\\n| project x=range(1, array_length(y), 1), y  \\r\\n| render linechart \\r\\n```\\r\\n\\r\\n![Series periods.](images/series-periods/series-periods.png)\\r\\nRunning `series_periods_detect()` on this series, results in the weekly period, 14 points long.\\r\\n\\r\\n```\\r\\nprint y=dynamic([80,139,87,110,68,54,50,51,53,133,86,141,97,156,94,149,95,140,77,61,50,54,47,133,72,152,94,148,105,162,101,160,87,63,53,55,54,151,103,189,108,183,113,175,113,178,90,71,62,62,65,165,109,181,115,182,121,178,114,170])\\r\\n| project x=range(1, array_length(y), 1), y  \\r\\n| project series_periods_detect(y, 0.0, 50.0, 2)\\r\\n```\\r\\n\\r\\n| series\\\\_periods\\\\_detect\\\\_y\\\\_periods  | series\\\\_periods\\\\_detect\\\\_y\\\\_periods\\\\_scores |\\r\\n|-------------|-------------------|\\r\\n| [14.0, 0.0] | [0.84, 0.0]  |\\r\\n\\r\\n> [!NOTE] \\r\\n> The daily period that can be also seen in the chart wasn't found because the sampling is too coarse (12h bin size), so a daily period of 2 bins is below the minimum period size of 4 points, required by the algorithm.\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-periods-detectfunction\",\"series-periods-detectfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_periods_validate\",\"Checks whether a time series contains periodic patterns of given lengths.\",\"Often a metric measuring the traffic of an application is characterized by a weekly or daily period. This period can be confirmed by running `series_periods_validate()` that checks for a weekly and daily period.\\r\\n\\r\\nThe function takes as input a column that contains a dynamic array of time series (typically the resulting output of [make-series](make-seriesoperator.md) operator), and one or more `real` numbers that define the lengths of the periods to validate.\\r\\n\\r\\nThe function outputs two columns:\\r\\n\\r\\n* *periods*: A dynamic array that contains the periods to validate (supplied in the input).\\r\\n* *scores*: A dynamic array that contains a score between 0 and 1. The score shows the significance of a period in its respective position in the *periods* array.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`series_periods_validate(`*x*`,` *period1* [ `,` *period2* `,` . . . ] `)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *x*: Dynamic array scalar expression that is an array of numeric values, typically the resulting output of [make-series](make-seriesoperator.md) or [make_list](makelist-aggfunction.md) operators.\\r\\n* *period1*, *period2*, and so on: `real` numbers specifying the periods to validate, in units of the bin size. For example, if the series is in 1h bins, a weekly period is 168 bins.\\r\\n\\r\\n> [!IMPORTANT]\\r\\n> * The minimal value for each of the *period* arguments is **4** and the maximal is half of the length of the input series. For a *period* argument outside these bounds, the output score will be **0**.\\r\\n>\\r\\n> * The input time series must be regular, that is, aggregated in constant bins, and is always the case if it has been created using [make-series](make-seriesoperator.md). Otherwise, the output is meaningless.\\r\\n> \\r\\n> * The function accepts up to 16 periods to validate.\",\"The following query embeds a snapshot of a month of an application\\u2019s traffic, aggregated twice a day (the bin size is 12 hours).\\r\\n\\r\\n```\\r\\nprint y=dynamic([80,139,87,110,68,54,50,51,53,133,86,141,97,156,94,149,95,140,77,61,50,54,47,133,72,152,94,148,105,162,101,160,87,63,53,55,54,151,103,189,108,183,113,175,113,178,90,71,62,62,65,165,109,181,115,182,121,178,114,170])\\r\\n| project x=range(1, array_length(y), 1), y  \\r\\n| render linechart \\r\\n```\\r\\n\\r\\n![Series periods.](images/series-periods/series-periods.png)\\r\\nIf you run `series_periods_validate()` on this series to validate a weekly period (14 points long) it results in a high score, and with a **0** score when you validate a five-day period (10 points long).\\r\\n\\r\\n```\\r\\nprint y=dynamic([80,139,87,110,68,54,50,51,53,133,86,141,97,156,94,149,95,140,77,61,50,54,47,133,72,152,94,148,105,162,101,160,87,63,53,55,54,151,103,189,108,183,113,175,113,178,90,71,62,62,65,165,109,181,115,182,121,178,114,170])\\r\\n| project x=range(1, array_length(y), 1), y  \\r\\n| project series_periods_validate(y, 14.0, 10.0)\\r\\n```\\r\\n\\r\\n| series\\\\_periods\\\\_validate\\\\_y\\\\_periods  | series\\\\_periods\\\\_validate\\\\_y\\\\_scores |\\r\\n|-------------|-------------------|\\r\\n| [14.0, 10.0] | [0.84,0.0]  |\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-periods-validatefunction\",\"series-periods-validatefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_pow\",\"Calculates the element-wise power of two numeric series inputs.\",\"## Syntax\\r\\n\\r\\n`series_pow(`*series1*`,` *series2*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *series1, series2*: Input numeric arrays, the first (base) is element-wise raised to the power of the second (power) into a dynamic array result. All arguments must be dynamic arrays.\\r\\n\\r\\n## Returns\\r\\n\\r\\nDynamic array of calculated element-wise power operation between the two inputs. Any non-numeric element or non-existing element (arrays of different sizes) yields a `null` element value.\",\"```\\r\\nprint x = dynamic([1,2,3,4]), y=dynamic([1,2,3,0.5])\\r\\n| extend x_pow_y = series_pow(x,y) \\r\\n```\\r\\n\\r\\n|x|y|x_pow_y|\\r\\n|---|---|---|\\r\\n|[1,2,3,4]|[1,2,3,0.5]|[1.0,4.0,27.0,2.0]|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-powfunction\",\"series-powfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_seasonal\",\"Calculates the seasonal component of a series, according to the detected or given seasonal period.\",\"## Syntax\\r\\n\\r\\n`series_seasonal(`*series* `[,` *period*`])`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *series*: Input numeric dynamic array\\r\\n* *period* (optional): Integer number of bins in each seasonal period, possible values:\\r\\n    *  -1 (default): Autodetects the period by using [series_periods_detect()](series-periods-detectfunction.md) with a threshold of *0.7*. Returns zeroes if seasonality isn't detected\\r\\n    * Positive integer: Used as the period for the seasonal component\\r\\n    * Any other value: Ignores seasonality and returns a series of zeroes\\r\\n\\r\\n## Returns\\r\\n\\r\\nDynamic array of the same length as the *series* input that contains the calculated seasonal component of the series. The seasonal component is calculated as the *median* of all the values that correspond to the location of the bin, across the periods.\",\"### Auto detect the period\\r\\n\\r\\nIn the following example, the series' period is automatically detected. The first series' period is detected to be six bins and the second five bins. The third series' period is too short to be detected and returns a series of zeroes. \\r\\nSee the next example on [how to force the period](#force-a-period).\\r\\n\\r\\n```\\r\\nprint s=dynamic([2,5,3,4,3,2,1,2,3,4,3,2,1,2,3,4,3,2,1,2,3,4,3,2,1])\\r\\n| union (print s=dynamic([8,12,14,12,10,10,12,14,12,10,10,12,14,12,10,10,12,14,12,10]))\\r\\n| union (print s=dynamic([1,3,5,2,4,6,1,3,5,2,4,6]))\\r\\n| extend s_seasonal = series_seasonal(s)\\r\\n```\\r\\n\\r\\n|s|s_seasonal|\\r\\n|---|---|\\r\\n|[2,5,3,4,3,2,1,2,3,4,3,2,1,2,3,4,3,2,1,2,3,4,3,2,1]|[1.0,2.0,3.0,4.0,3.0,2.0,1.0,2.0,3.0,4.0,3.0,2.0,1.0,2.0,3.0,4.0,3.0,2.0,1.0,2.0,3.0,4.0,3.0,2.0,1.0]|\\r\\n|[8,12,14,12,10,10,12,14,12,10,10,12,14,12,10,10,12,14,12,10]|[10.0,12.0,14.0,12.0,10.0,10.0,12.0,14.0,12.0,10.0,10.0,12.0,14.0,12.0,10.0,10.0,12.0,14.0,12.0,10.0]|\\r\\n|[1,3,5,2,4,6,1,3,5,2,4,6]|[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]|\\r\\n\\r\\n### Force a period\\r\\n\\r\\nIn this example, the series' period is too short to be detected by [series_periods_detect()](series-periods-detectfunction.md), so we explicitly force the period to get the seasonal pattern.\\r\\n\\r\\n```\\r\\nprint s=dynamic([1,3,5,1,3,5,2,4,6]) \\r\\n| union (print s=dynamic([1,3,5,2,4,6,1,3,5,2,4,6]))\\r\\n| extend s_seasonal = series_seasonal(s,3)\\r\\n```\\r\\n\\r\\n|s|s_seasonal|\\r\\n|---|---|\\r\\n|[1,3,5,1,3,5,2,4,6]|[1.0,3.0,5.0,1.0,3.0,5.0,1.0,3.0,5.0]|\\r\\n|[1,3,5,2,4,6,1,3,5,2,4,6]|[1.5,3.5,5.5,1.5,3.5,5.5,1.5,3.5,5.5,1.5,3.5,5.5]|\\r\\n\\r\\n## Next steps\\r\\n\\r\\n* [series_periods_detect()](series-periods-detectfunction.md)\\r\\n* [series_periods_validate()](series-periods-validatefunction.md)\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-seasonalfunction\",\"series-seasonalfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_sign\",\"Calculates the element-wise sign of the numeric series input.\",\"## Syntax\\r\\n\\r\\n`series_sign(`*series*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *series*: Input numeric array, on which the sign function is applied. The argument must be a dynamic array. \\r\\n\\r\\n## Returns\\r\\n\\r\\nDynamic array of calculated sign function values (-1 for negative, 0 for 0, and 1 for positive). Any non-numeric element yields a `null` element value.\",\"```\\r\\nprint arr = dynamic([-6,0,8])\\r\\n| extend arr_sign = series_sign(arr)\\r\\n```\\r\\n\\r\\n|arr|arr_sign|\\r\\n|---|---|\\r\\n|[-6,0,8]|[-1,0,1]|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-signfunction\",\"series-signfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_sin\",\"Calculates the element-wise sine function of the numeric series input.\",\"## Syntax\\r\\n\\r\\n`series_sin(`*series*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *series*: Input numeric array, on which the sine function is applied. The argument must be a dynamic array. \\r\\n\\r\\n## Returns\\r\\n\\r\\nDynamic array of calculated sine function values. Any non-numeric element yields a `null` element value.\",\"```\\r\\nprint arr = dynamic([-1,0,1])\\r\\n| extend arr_sin = series_sin(arr)\\r\\n```\\r\\n\\r\\n|arr|arr_sin|\\r\\n|---|---|\\r\\n|[-6.5,0,8.2]|[-0.8414709848078965,0.0,0.8414709848078965]|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-sinfunction\",\"series-sinfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_stats\",\"`series_stats()` returns statistics for a numerical series using multiple columns.\",'The `series_stats()` function takes an expression returning a dynamical numerical array as input, and calculates the following statistics:\\r\\n\\r\\nStatistic | Description\\r\\n---|---\\r\\n `min` | Minimum value in the input array.\\r\\n `min_idx`| The first position of the minimum value in the input array.\\r\\n`max` | Maximum value in the input array.\\r\\n`max_idx`| First position of the maximum value in the input array.\\r\\n`avg`| Average value of the input array.\\r\\n `variance` | Sample variance of input array.\\r\\n `stdev`| Sample standard deviation of the input array.\\r\\n\\r\\n> [!NOTE] \\r\\n> This function returns multiple values, so it can\\'t be used as the input for another function.\\r\\n> Consider using [series_stats_dynamic](./series-stats-dynamicfunction.md) if you only need a single value, such as \"average\".\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`...` `|` `extend` `series_stats` `(` *Expr* [`,` *IgnoreNonFinite*] `)`\\r\\n\\r\\n`...` `|` `extend` `(` *Name1* [`,` *Name2*...] `)` `=` `series_stats` `(` *Expr* [`,` *IgnoreNonFinite*] `)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *Expr*: An expression that returns a value of type `dynamic`, holding\\r\\n  an array of numeric values. Numeric values are values for which arithmetic\\r\\n  operators are defined.\\r\\n  \\r\\n* *IgnoreNonFinite*: A Boolean expression that specifies whether to calculate the\\r\\n  statistics while ignoring non-finite values of *Expr* (`null`, `NaN`, `inf`, and so on).\\r\\n  If `false`, a single item in *Expr* with this value will result in\\r\\n  a value of `null` generated for all statistics values. The default value is `false`.\\r\\n\\r\\n## Returns\\r\\n\\r\\n### Syntax 1\\r\\n\\r\\nThe following syntax results in the following new columns being added where *Expr* is the column reference `x`: `series_stats_x_min`, `series_stats_x_idx`, and so on.\\r\\n\\r\\n`...` `|` `extend` `series_stats` `(` *Expr* [`,` *IgnoreNonFinite*] `)`\\r\\n\\r\\n### Syntax 2\\r\\n\\r\\nThe following syntax results in columns named `Name1`, `Name2`, and so on, containing these values in order.\\r\\n\\r\\n`...` `|` `extend` `(` *Name1* [`,` *Name2*...] `)` `=` `series_stats` `(` *Expr* [`,` *IgnoreNonFinite*] `)`',\"```\\r\\nprint x=dynamic([23,46,23,87,4,8,3,75,2,56,13,75,32,16,29]) \\r\\n| project series_stats(x)\\r\\n\\r\\n```\\r\\n\\r\\n|series_stats_x_min|series_stats_x_min_idx|series_stats_x_max|series_stats_x_max_idx|series_stats_x_avg|series_stats_x_stdev|series_stats_x_variance|\\r\\n|---|---|---|---|---|---|---|\\r\\n|2|8|87|3|32.8|28.5036338535483|812.457142857143|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-statsfunction\",\"series-statsfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_stats_dynamic\",\"Returns statistics for a series in a dynamic object.\",\"The `series_stats_dynamic()` function takes a column containing dynamic numerical array as input and generates a dynamic value with the following content:\\r\\n\\r\\n* `min`: minimum value in the input array\\r\\n* `min_idx`: first position of the minimum value in the input array\\r\\n* `max`: maximum value in the input array\\r\\n* `max_idx`: first position of the maximum value in the input array\\r\\n* `avg`: average value of the input array\\r\\n* `variance`: sample variance of input array\\r\\n* `stdev`: sample standard deviation of the input array\\r\\n* `sum`: sum of the values in the input array\\r\\n* `len`: length of the input array\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`series_stats_dynamic(`*x* `[,`*ignore_nonfinite*`])`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *x*: Dynamic array cell which is an array of numeric values. \\r\\n* *ignore_nonfinite*: Boolean (optional, default: `false`) flag that specifies whether to calculate the statistics while ignoring non-finite values (*null*, *NaN*, *inf*, etc.). If set to `false` the returned result is `null` if non-finite values are present in the array.\",'```\\r\\nprint x=dynamic([23,46,23,87,4,8,3,75,2,56,13,75,32,16,29]) \\r\\n| project stats=series_stats_dynamic(x)\\r\\n```\\r\\n\\r\\n|stats|\\r\\n|---|\\r\\n|{\"min\": 2.0, \"min_idx\": 8, \"max\": 87.0, \"max_idx\": 3, \"avg\": 32.8, \"stdev\": 28.503633853548269, \"variance\": 812.45714285714291, \"sum\": 492.0, \"len\": 15}|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-stats-dynamicfunction\",\"series-stats-dynamicfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_subtract\",\"Calculates the element-wise subtraction of two numeric series inputs.\",\"## Syntax\\r\\n\\r\\n`series_subtract(`*series1*`,` *series2*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *series1, series2*: Input numeric arrays, the second to be element-wise subtracted from the first into a dynamic array result. All arguments must be dynamic arrays. \\r\\n\\r\\n## Returns\\r\\n\\r\\nDynamic array of calculated element-wise subtract operation between the two inputs. Any non-numeric element or non-existing element (arrays of different sizes) yields a `null` element value.\",\"```\\r\\nrange x from 1 to 3 step 1\\r\\n| extend y = x * 2\\r\\n| extend z = y * 2\\r\\n| project s1 = pack_array(x,y,z), s2 = pack_array(z, y, x)\\r\\n| extend s1_subtract_s2 = series_subtract(s1, s2)\\r\\n```\\r\\n\\r\\n|s1|s2|s1_subtract_s2|\\r\\n|---|---|---|\\r\\n|[1,2,4]|[4,2,1]|[-3,0,3]|\\r\\n|[2,4,8]|[8,4,2]|[-6,0,6]|\\r\\n|[3,6,12]|[12,6,3]|[-9,0,9]|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-subtractfunction\",\"series-subtractfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"series_tan\",\"Calculates the element-wise tangent function of the numeric series input.\",\"## Syntax\\r\\n\\r\\n`series_tan(`*series*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *series*: Input numeric array, on which the tangent function is applied. The argument must be a dynamic array. \\r\\n\\r\\n## Returns\\r\\n\\r\\nDynamic array of calculated tangent function values. Any non-numeric element yields a `null` element value.\",\"```\\r\\nprint arr = dynamic([-1,0,1])\\r\\n| extend arr_tan = series_tan(arr)\\r\\n```\\r\\n\\r\\n|arr|arr_tan|\\r\\n|---|---|\\r\\n|[-6.5,0,8.2]|[-1.5574077246549023,0.0,1.5574077246549023]|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/series-tanfunction\",\"series-tanfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"session_count\",\"Calculates sessions count based on ID column over a timeline. The plugin is invoked with the [`evaluate`](evaluateoperator.md) operator.\",\"## Syntax\\r\\n\\r\\n*TabularExpression* `| evaluate` `session_count(`*IdColumn*`,` *TimelineColumn*`,` *Start*`,` *End*`,` *Bin*`,` *LookBackWindow* [`,` *dim1*`,` *dim2*`,` ...]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *TabularExpression*: The tabular expression that serves as input.\\r\\n* *IdColumn*: The name of the column with ID values that represents user activity.\\r\\n* *TimelineColumn*: The name of the column that represents the timeline.\\r\\n* *Start*: A scalar value that defines the start of the analysis period.\\r\\n* *End*: A scalar value that defines the end of the analysis period.\\r\\n* *Bin*: A constant scalar value that defines the session's analysis step period.\\r\\n* *LookBackWindow*: scalar constant value representing session lookback period. If the ID from `IdColumn` appears in a time window within `LookBackWindow`, the session is considered to be an existing one. If the ID doesn't appear, then the session is considered to be new.\\r\\n* *dim1*, *dim2*, ...: (optional) list of the dimensions columns that slice the session count calculation.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a table that has the session count values for each timeline period and for each existing dimensions combination.\\r\\n\\r\\nOutput table schema is:\\r\\n\\r\\n|*TimelineColumn*|dim1|..|dim_n|count_sessions|\\r\\n|---|---|---|---|---|--|--|--|--|--|--|\\r\\n|type: as of *TimelineColumn*|..|..|..|long|\",\"For this example, the data is deterministic, and we use a table with two columns:\\r\\n\\r\\n- `Timeline`: a running number from 1 to 10,000\\r\\n- `Id`: ID of the user from 1 to 50\\r\\n\\r\\n\\r\\n`Id` appears at the specific `Timeline` slot if it's a divider of `Timeline` (Timeline % Id == 0).\\r\\n\\r\\nAn event with `Id==1` will appear at any `Timeline` slot, an event with `Id==2` at every second `Timeline` slot, and so on.\\r\\n\\r\\nHere are few 20 lines of the data:\\r\\n\\r\\n```\\r\\nlet _data = range Timeline from 1 to 10000 step 1\\r\\n| extend __key = 1\\r\\n| join kind=inner (range Id from 1 to 50 step 1 | extend __key=1) on __key\\r\\n| where Timeline % Id == 0\\r\\n| project Timeline, Id;\\r\\n// Look on few lines of the data\\r\\n_data\\r\\n| order by Timeline asc, Id asc\\r\\n| limit 20\\r\\n```\\r\\n\\r\\n|Timeline|Id|\\r\\n|---|---|\\r\\n|1|1|\\r\\n|2|1|\\r\\n|2|2|\\r\\n|3|1|\\r\\n|3|3|\\r\\n|4|1|\\r\\n|4|2|\\r\\n|4|4|\\r\\n|5|1|\\r\\n|5|5|\\r\\n|6|1|\\r\\n|6|2|\\r\\n|6|3|\\r\\n|6|6|\\r\\n|7|1|\\r\\n|7|7|\\r\\n|8|1|\\r\\n|8|2|\\r\\n|8|4|\\r\\n|8|8|\\r\\n\\r\\nLet's define a session in next terms: session considered to be active as long as user (`Id`) appears at least once at a timeframe of 100 time slots, while session look-back window is 41 time slots.\\r\\n\\r\\nThe next query shows the count of active sessions according to the above definition.\\r\\n\\r\\n```\\r\\nlet _data = range Timeline from 1 to 9999 step 1\\r\\n| extend __key = 1\\r\\n| join kind=inner (range Id from 1 to 50 step 1 | extend __key=1) on __key\\r\\n| where Timeline % Id == 0\\r\\n| project Timeline, Id;\\r\\n// End of data definition\\r\\n_data\\r\\n| evaluate session_count(Id, Timeline, 1, 10000, 100, 41)\\r\\n| render linechart \\r\\n```\\r\\n\\r\\n![Example session count.](images/session-count-plugin/example-session-count.png)\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/session-count-plugin\",\"session-count-plugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"set_difference\",\"Returns a `dynamic` (JSON) array of the set of all distinct values that are in the first array but aren't in other arrays - (((arr1 \\\\ arr2) \\\\ arr3) \\\\ ...).\",\"## Syntax\\r\\n\\r\\n`set_difference(`*arr1*`, `*arr2*`[`,` *arr3*, ...])`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *arr1...arrN*: Input arrays to create a difference set (at least two arrays). All arguments must be dynamic arrays (see [pack_array](packarrayfunction.md)). \\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a dynamic array of the set of all distinct values that are in arr1 but aren't in other arrays. See [`set_union()`](setunionfunction.md) and [`set_intersect()`](setintersectfunction.md).\",\"```\\r\\nrange x from 1 to 3 step 1\\r\\n| extend y = x * 2\\r\\n| extend z = y * 2\\r\\n| extend w = z * 2\\r\\n| extend a1 = pack_array(x,y,x,z), a2 = pack_array(x, y), a3 = pack_array(x,y,w)\\r\\n| project set_difference(a1, a2, a3)\\r\\n```\\r\\n\\r\\n|Column1|\\r\\n|---|\\r\\n|[4]|\\r\\n|[8]|\\r\\n|[12]|\\r\\n\\r\\n```\\r\\nprint arr = set_difference(dynamic([1,2,3]), dynamic([1,2,3]))\\r\\n```\\r\\n\\r\\n|arr|\\r\\n|---|\\r\\n|[]|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/setdifferencefunction\",\"setdifferencefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"set_has_element\",\"Determines whether the specified set contains the specified element.\",\"## Syntax\\r\\n\\r\\n`set_has_element(`*array*,*value*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *array*: Input array to search.\\r\\n* *value*: Value to search for. The value should be of type `long`, `integer`, `double`, `datetime`, `timespan`, `decimal`, `string`, `guid`, or `boolean`.\\r\\n\\r\\n## Returns\\r\\n\\r\\nTrue or false depending on if the value exists in the array.\",'```\\r\\nprint arr=dynamic([\"this\", \"is\", \"an\", \"example\"]) \\r\\n| project Result=set_has_element(arr, \"example\")\\r\\n```\\r\\n\\r\\n|Result|\\r\\n|---|\\r\\n|1|\\r\\n\\r\\n## See also\\r\\n\\r\\nUse [`array_index_of(arr, value)`](arrayindexoffunction.md) to find the position at which the value exists in the array. Both functions are equally performant.',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/sethaselementfunction\",\"sethaselementfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"set_intersect\",\"Returns a `dynamic` array of the set of all distinct values that are in all arrays - (arr1 \\u2229 arr2 \\u2229 ...).\",\"## Syntax\\r\\n\\r\\n`set_intersect(`*arr1*`, `*arr2*`[`,` *arr3*, ...])`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *arr1...arrN*: Input arrays to create an intersect set (at least two arrays). All arguments must be dynamic arrays. For more information, see [pack_array](packarrayfunction.md). \\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a dynamic array of the set of all distinct values that are in all arrays. See [`set_union()`](setunionfunction.md) and [`set_difference()`](setdifferencefunction.md).\",\"```\\r\\nrange x from 1 to 3 step 1\\r\\n| extend y = x * 2\\r\\n| extend z = y * 2\\r\\n| extend w = z * 2\\r\\n| extend a1 = pack_array(x,y,x,z), a2 = pack_array(x, y), a3 = pack_array(w,x)\\r\\n| project set_intersect(a1, a2, a3)\\r\\n```\\r\\n\\r\\n|Column1|\\r\\n|---|\\r\\n|[1]|\\r\\n|[2]|\\r\\n|[3]|\\r\\n\\r\\n```\\r\\nprint arr = set_intersect(dynamic([1, 2, 3]), dynamic([4,5]))\\r\\n```\\r\\n\\r\\n|arr|\\r\\n|---|\\r\\n|[]|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/setintersectfunction\",\"setintersectfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"set_union\",\"Returns a `dynamic` array of the set of all distinct values that are in any of arrays - (arr1 \\u222a arr2 \\u222a ...).\",\"## Syntax\\r\\n\\r\\n`set_union(`*arr1*`, `*arr2*`[`,` *arr3*, ...]``)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *arr1...arrN*: Input arrays to create a union set (at least two arrays). All arguments must be dynamic arrays (see [pack_array](packarrayfunction.md)). \\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a dynamic array of the set of all distinct values that are in any of arrays. See [`set_intersect()`](setintersectfunction.md)  and [`set_difference()`](setdifferencefunction.md).\",\"```\\r\\nrange x from 1 to 3 step 1\\r\\n| extend y = x * 2\\r\\n| extend z = y * 2\\r\\n| extend w = z * 2\\r\\n| extend a1 = pack_array(x,y,x,z), a2 = pack_array(x, y), a3 = pack_array(w)\\r\\n| project set_union(a1, a2, a3)\\r\\n```\\r\\n\\r\\n|Column1|\\r\\n|---|\\r\\n|[1,2,4,8]|\\r\\n|[2,4,8,16]|\\r\\n|[3,6,12,24]|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/setunionfunction\",\"setunionfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"sign\",\"Sign of a numeric expression\",\"## Syntax\\r\\n\\r\\n`sign(`*x*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *x*: A real number.\\r\\n\\r\\n## Returns\\r\\n\\r\\n* The positive (+1), zero (0), or negative (-1) sign of the specified expression.\",\"```\\r\\nprint s1 = sign(-42), s2 = sign(0), s3 = sign(11.2)\\r\\n\\r\\n```\\r\\n\\r\\n|s1|s2|s3|\\r\\n|---|---|---|\\r\\n|-1|0|1|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/signfunction\",\"signfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"sin\",\"Returns the sine function.\",\"## Syntax\\r\\n\\r\\n`sin(`*x*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *x*: A real number.\\r\\n\\r\\n## Returns\\r\\n\\r\\n* The result of `sin(x)`\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/sinfunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"sliding_window_counts\",\"Calculates counts and distinct count of values in a sliding window over a lookback period, \\r\\nusing the technique described [here](samples.md#perform-aggregations-over-a-sliding-window). The plugin is invoked with the [`evaluate`](evaluateoperator.md) operator.\",\"For instance, for each *day*, calculate count and distinct count of users in previous *week*. \\r\\n\\r\\n```\\r\\nT | evaluate sliding_window_counts(id, datetime_column, startofday(ago(30d)), startofday(now()), 7d, 1d, dim1, dim2, dim3)\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `| evaluate` `sliding_window_counts(`*IdColumn*`,` *TimelineColumn*`,` *Start*`,` *End*`,` *LookbackWindow*`,` *Bin* `,` [*dim1*`,` *dim2*`,` ...]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T*: The input tabular expression.\\r\\n* *IdColumn*: The name of the column with ID values that represent user activity. \\r\\n* *TimelineColumn*: The name of the column representing the timeline.\\r\\n* *Start*: Scalar with value of the analysis start period.\\r\\n* *End*: Scalar with value of the analysis end period.\\r\\n* *LookbackWindow*: Scalar constant value of the lookback period (for example, for `dcount` users in past 7d: LookbackWindow = 7d)\\r\\n* *Bin*: Scalar constant value of the analysis step period. This value can be a numeric/datetime/timestamp value. If the value is a string with the format `week`/`month`/`year`, all periods will be [startofweek](startofweekfunction.md)/[startofmonth](startofmonthfunction.md)/[startofyear](startofyearfunction.md). \\r\\n* *dim1*, *dim2*, ...: (optional) list of the dimensions columns that slice the activity metrics calculation.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a table that has the count and distinct count values of Ids in the lookback period, for each timeline period (by bin) and for each existing dimensions combination.\\r\\n\\r\\nOutput table schema is:\\r\\n\\r\\n|*TimelineColumn*|`dim1`|..|`dim_n`|`count`|`dcount`|\\r\\n|---|---|---|---|---|---|\\r\\n|type: as of *TimelineColumn*|..|..|..|long|long|\",\"Calculate counts and `dcounts` for users in past week, for each day in the analysis period. \\r\\n\\r\\n```\\r\\nlet start = datetime(2017 - 08 - 01);\\r\\nlet end = datetime(2017 - 08 - 07); \\r\\nlet lookbackWindow = 3d;  \\r\\nlet bin = 1d;\\r\\nlet T = datatable(UserId:string, Timestamp:datetime)\\r\\n[\\r\\n'Bob',      datetime(2017 - 08 - 01), \\r\\n'David',    datetime(2017 - 08 - 01), \\r\\n'David',    datetime(2017 - 08 - 01), \\r\\n'John',     datetime(2017 - 08 - 01), \\r\\n'Bob',      datetime(2017 - 08 - 01), \\r\\n'Ananda',   datetime(2017 - 08 - 02),  \\r\\n'Atul',     datetime(2017 - 08 - 02), \\r\\n'John',     datetime(2017 - 08 - 02), \\r\\n'Ananda',   datetime(2017 - 08 - 03), \\r\\n'Atul',     datetime(2017 - 08 - 03), \\r\\n'Atul',     datetime(2017 - 08 - 03), \\r\\n'John',     datetime(2017 - 08 - 03), \\r\\n'Bob',      datetime(2017 - 08 - 03), \\r\\n'Betsy',    datetime(2017 - 08 - 04), \\r\\n'Bob',      datetime(2017 - 08 - 05), \\r\\n];\\r\\nT | evaluate sliding_window_counts(UserId, Timestamp, start, end, lookbackWindow, bin)\\r\\n\\r\\n\\r\\n```\\r\\n\\r\\n|Timestamp|Count|`dcount`|\\r\\n|---|---|---|\\r\\n|2017-08-01 00:00:00.0000000|5|3|\\r\\n|2017-08-02 00:00:00.0000000|8|5|\\r\\n|2017-08-03 00:00:00.0000000|13|5|\\r\\n|2017-08-04 00:00:00.0000000|9|5|\\r\\n|2017-08-05 00:00:00.0000000|7|5|\\r\\n|2017-08-06 00:00:00.0000000|2|2|\\r\\n|2017-08-07 00:00:00.0000000|1|1|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/sliding-window-counts-plugin\",\"sliding-window-counts-plugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"sort\",\"Sort the rows of the input table into order by one or more columns.\",\"```\\r\\nT | sort by strlen(country) asc, price desc\\r\\n```\\r\\n\\r\\n**Alias**\\r\\n\\r\\n`order`\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `| sort by` *expression* [`asc` | `desc`] [`nulls first` | `nulls last`] [`,` ...]\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T*: The table input to sort.\\r\\n* *expression*: A scalar expression by which to sort. The type of the values must be numeric, date, time or string.\\r\\n* `asc` Sort by into ascending order, low to high. The default is `desc`, descending high to low.\\r\\n* `nulls first` (the default for `asc` order) will place the null values at the beginning and `nulls last` (the default for `desc` order) will place the null values at the end.\",'```\\r\\nTraces\\r\\n| where ActivityId == \"479671d99b7b\"\\r\\n| sort by Timestamp asc nulls first\\r\\n```\\r\\n\\r\\nAll rows in table Traces that have a specific `ActivityId`, sorted by their timestamp. If `Timestamp` column contains null values, those will appear at the first lines of the result.\\r\\n\\r\\nIn order to exclude null values from the result add a filter before the call to sort:\\r\\n\\r\\n```\\r\\nTraces\\r\\n| where ActivityId == \"479671d99b7b\" and isnotnull(Timestamp)\\r\\n| sort by Timestamp asc\\r\\n```',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/sortoperator\",\"sortoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"split\",\"Splits a given string according to a given delimiter and returns a string array with the contained substrings.\",'Optionally, a specific substring can be returned if exists.\\r\\n\\r\\n```\\r\\nsplit(\"aaa_bbb_ccc\", \"_\") == [\"aaa\",\"bbb\",\"ccc\"]\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`split(`*source*`,` *delimiter* [`,` *requestedIndex*]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *source*: The source string that will be split according to the given delimiter.\\r\\n* *delimiter*: The delimiter that will be used in order to split the source string.\\r\\n* *requestedIndex*: An optional zero-based index `int`. If provided, the returned string array will contain the requested substring if exists. \\r\\n\\r\\n## Returns\\r\\n\\r\\nA string array that contains the substrings of the given source string that are delimited by the given delimiter.','```\\r\\nprint\\r\\n    split(\"aa_bb\", \"_\"),           // [\"aa\",\"bb\"]\\r\\n    split(\"aaa_bbb_ccc\", \"_\", 1),  // [\"bbb\"]\\r\\n    split(\"\", \"_\"),                // [\"\"]\\r\\n    split(\"a__b\", \"_\"),            // [\"a\",\"\",\"b\"]\\r\\n    split(\"aabbcc\", \"bb\")          // [\"aa\",\"cc\"]\\r\\n```',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/splitfunction\",\"splitfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"sql_request\",\"The `sql_request` plugin sends a SQL query to a SQL Server network endpoint and returns the results.\\r\\nIf more than one rowset is returned by SQL, only the first one is used.\\r\\nThe plugin is invoked with the [`evaluate`](evaluateoperator.md) operator.\",\"## Syntax\\r\\n\\r\\n`evaluate` `sql_request` `(` *ConnectionString* `,` *SqlQuery* [`,` *SqlParameters* [`,` *Options*]] `)` [`:` *OutputSchema*]\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required| Description |\\r\\n|---|---|---|---|\\r\\n| *ConnectionString* | string | &check; | Indicates the connection string that points at the SQL Server network endpoint. See [valid methods of authentication](#authentication) and how to specify the [network endpoint](#specify-the-network-endpoint). |\\r\\n| *SqlQuery* | string | &check; | Indicates the query that is to be executed against the SQL endpoint. Must return one or more row sets, but only the first one is made available for the rest of the Kusto query. |\\r\\n| *SqlParameters* | dynamic | | Holds key-value pairs to pass as parameters along with the query. |\\r\\n|*Options* | dynamic | |Holds more advanced settings as key-value pairs. Currently, only `token` can be set, to pass a caller-provided Azure AD access token that is forwarded to the SQL endpoint for authentication.\\r\\n| *OutputSchema* | | | The names and types for the expected columns of the `sql_request` plugin output.|\\r\\n\\r\\nThe optional *OutputSchema* argument has the following syntax:\\r\\n\\r\\n`(` *ColumnName* `:` *ColumnType* [`,` ...] `)`\\r\\n\\r\\nSpecifying this argument allows the plugin to be used\\r\\nin scenarios (such as a cross-cluster query) which would otherwise prevent it from running,\\r\\nand enables multiple query optimizations.\\r\\nIt is therefore recommended to always specify it.\\r\\nAn error is raised if the run-time schema of the first rowset returned by the SQL network endpoint\\r\\ndoesn't match the *OutputSchema* schema.\",\"### Send a SQL query using Azure AD-integrated authentication\\r\\n\\r\\nThe following example sends a SQL query to an Azure SQL DB database. It\\r\\nretrieves all records from `[dbo].[Table]`, and then processes the results on the\\r\\n Kusto side. Authentication reuses the calling user's Azure AD token.\\r\\n\\r\\n> [!NOTE]\\r\\n> This example should not be taken as a recommendation to filter or project data in this manner. SQL queries should be constructed to return the smallest data set possible, since the Kusto optimizer doesn't attempt to optimize queries between Kusto and SQL.\\r\\n\\r\\n```\\r\\nevaluate sql_request(\\r\\n  'Server=tcp:contoso.database.windows.net,1433;'\\r\\n    'Authentication=\\\"Active Directory Integrated\\\";'\\r\\n    'Initial Catalog=Fabrikam;',\\r\\n  'select * from [dbo].[Table]')\\r\\n| where Id > 0\\r\\n| project Name\\r\\n```\\r\\n\\r\\n### Send a SQL query using Username/Password authentication\\r\\n\\r\\nThe following example is identical to the previous one, except that SQL\\r\\nauthentication is done by username/password. For confidentiality,\\r\\nwe use obfuscated strings here.\\r\\n\\r\\n```\\r\\nevaluate sql_request(\\r\\n  'Server=tcp:contoso.database.windows.net,1433;'\\r\\n    'Initial Catalog=Fabrikam;'\\r\\n    h'User ID=USERNAME;'\\r\\n    h'Password=PASSWORD;',\\r\\n  'select * from [dbo].[Table]')\\r\\n| where Id > 0\\r\\n| project Name\\r\\n```\\r\\n\\r\\n### Send a SQL query using an Azure AD access token\\r\\n\\r\\nThe following example sends a SQL query to an Azure SQL DB database\\r\\nretrieving all records from `[dbo].[Table]`, while appending another `datetime` column,\\r\\nand then processes the results on the Kusto side.\\r\\nIt specifies a SQL parameter (`@param0`) to be used in the SQL query.\\r\\n\\r\\n```\\r\\nevaluate sql_request(\\r\\n  'Server=tcp:contoso.database.windows.net,1433;'\\r\\n    'Authentication=\\\"Active Directory Integrated\\\";'\\r\\n    'Initial Catalog=Fabrikam;',\\r\\n  'select *, @param0 as dt from [dbo].[Table]',\\r\\n  dynamic({'param0': datetime(2020-01-01 16:47:26.7423305)}))\\r\\n| where Id > 0\\r\\n| project Name\\r\\n```\\r\\n\\r\\n### Send a SQL query with a query-defined output schema\\r\\n\\r\\nThe following example sends a SQL query to an Azure SQL DB database\\r\\nretrieving all records from `[dbo].[Table]`, while selecting only specific columns.\\r\\nIt uses explicit schema definitions that allow various optimizations to be evaluated before the\\r\\nactual query against SQL is run.\\r\\n\\r\\n```\\r\\nevaluate sql_request(\\r\\n  'Server=tcp:contoso.database.windows.net,1433;'\\r\\n    'Authentication=\\\"Active Directory Integrated\\\";'\\r\\n    'Initial Catalog=Fabrikam;',\\r\\n  'select Id, Name') : (Id:long, Name:string)\\r\\n| where Id > 0\\r\\n| project Name\\r\\n```\\r\\n\\r\\n## Authentication\\r\\n\\r\\nThe sql_request plugin supports three methods of authentication to the\\r\\nSQL Server endpoint:\\r\\n\\r\\n### Azure AD-integrated authentication\\r\\n\\r\\n`Authentication=\\\"Active Directory Integrated\\\"`\\r\\n\\r\\nAzure AD-integrated authentication is the preferred method. This method has the user or application authenticate via Azure AD to Kusto. The same token is then used to access the SQL Server network endpoint.\\r\\n\\r\\n### Username/Password authentication\\r\\n\\r\\n`User ID=...; Password=...;`\\r\\n\\r\\nUsername and password authentication support is provided when Azure AD-integrated authentication can't be done. Avoid this method, when possible, as secret information is sent through Kusto.\\r\\n\\r\\n### Azure AD access token\\r\\n\\r\\n`dynamic({'token': h\\\"eyJ0...\\\"})`\\r\\n\\r\\nWith the Azure AD access token authentication method, the caller generates the access token, which is forwarded by Kusto to the SQL endpoint. The connection string shouldn't include authentication information like `Authentication`, `User ID`, or `Password`. Instead, the access token is passed as `token` property in the `Options` argument of the sql_request plugin.\\r\\n\\r\\n> [!WARNING]\\r\\n> Connection strings and queries that include confidential information or information that should be guarded should be obfuscated to be omitted from any Kusto tracing.\\r\\n> For more informations, see [obfuscated string literals](scalar-data-types/string.md#obfuscated-string-literals).\\r\\n\\r\\n## Encryption and server validation\\r\\n\\r\\nThe following connection properties are forced when connecting to a SQL Server network\\r\\nendpoint, for security reasons.\\r\\n\\r\\n* `Encrypt` is set to `true` unconditionally.\\r\\n* `TrustServerCertificate` is set to `false` unconditionally.\\r\\n\\r\\n\\r\\nAs a result, the SQL Server must be configured with a valid SSL/TLS server certificate.\\r\\n\\r\\n## Specify the network endpoint\\r\\n\\r\\nSpecifying the SQL network endpoint as part of the connection string is mandatory.\\r\\nThe appropriate syntax is:\\r\\n\\r\\n`Server` `=` `tcp:` *FQDN* [`,` *Port*]\\r\\n\\r\\nWhere:\\r\\n\\r\\n* *FQDN* is the fully qualified domain name of the endpoint.\\r\\n* *Port* is the TCP port of the endpoint. By default, `1433` is assumed.\\r\\n\\r\\n\\r\\n> [!NOTE]\\r\\n> Other forms of specifying the network endpoint are not supported.\\r\\n> One cannot omit, for example, the prefix `tcp:` even though it is possible to\\r\\n> do so when using the SQL client libraries programmatically.\\r\\n\\r\\n---\\r\\n\\r\\n> [!IMPORTANT]\\r\\n> The content below is Microsoft confidential(not available in the [public site](https://docs.microsoft.com/en-us/azure/data-explorer/))\\r\\n\\r\\n# sql_request plugin - Internal\\r\\n\\r\\n**Restrictions**\\r\\n\\r\\nKusto service controls allow sql-request plugin destinations by [Callout policy](../management/calloutpolicy.md)\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/sqlrequestplugin\",\"sqlrequestplugin.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"sqrt\",\"Returns the square root function.\",\"## Syntax\\r\\n\\r\\n`sqrt(`*x*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *x*: A real number >= 0.\\r\\n\\r\\n## Returns\\r\\n\\r\\n* A positive number such that `sqrt(x) * sqrt(x) == x`\\r\\n* `null` if the argument is negative or cannot be converted to a `real` value.\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/sqrtfunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"startofday\",\"Returns the start of the day containing the date, shifted by an offset, if provided.\",\"## Syntax\\r\\n\\r\\n`startofday(`*date* [`,`*offset*]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* `date`: The input date.\\r\\n* `offset`: An optional number of offset days from the input date (integer, default - 0). \\r\\n\\r\\n## Returns\\r\\n\\r\\nA datetime representing the start of the day for the given *date* value, with the offset, if specified.\",\"```\\r\\n  range offset from -1 to 1 step 1\\r\\n | project dayStart = startofday(datetime(2017-01-01 10:10:17), offset) \\r\\n```\\r\\n\\r\\n|dayStart|\\r\\n|---|\\r\\n|2016-12-31 00:00:00.0000000|\\r\\n|2017-01-01 00:00:00.0000000|\\r\\n|2017-01-02 00:00:00.0000000|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/startofdayfunction\",\"startofdayfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"startofmonth\",\"Returns the start of the month containing the date, shifted by an offset, if provided.\",\"## Syntax\\r\\n\\r\\n`startofmonth(`*date* [`,`*offset*]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* `date`: The input date.\\r\\n* `offset`: An optional number of offset months from the input date (integer, default - 0).\\r\\n\\r\\n## Returns\\r\\n\\r\\nA datetime representing the start of the month for the given *date* value, with the offset, if specified.\",\"```\\r\\n  range offset from -1 to 1 step 1\\r\\n | project monthStart = startofmonth(datetime(2017-01-01 10:10:17), offset) \\r\\n```\\r\\n\\r\\n|monthStart|\\r\\n|---|\\r\\n|2016-12-01 00:00:00.0000000|\\r\\n|2017-01-01 00:00:00.0000000|\\r\\n|2017-02-01 00:00:00.0000000|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/startofmonthfunction\",\"startofmonthfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"startofweek\",\"Returns the start of the week containing the date, shifted by an offset, if provided.\",\"Start of the week is considered to be a Sunday.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`startofweek(`*date* [`,`*offset*]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* `date`: The input date.\\r\\n* `offset`: An optional number of offset weeks from the input date (integer, default - 0).\\r\\n\\r\\n## Returns\\r\\n\\r\\nA datetime representing the start of the week for the given *date* value, with the offset, if specified.\",\"```\\r\\n  range offset from -1 to 1 step 1\\r\\n | project weekStart = startofweek(datetime(2017-01-01 10:10:17), offset) \\r\\n```\\r\\n\\r\\n|weekStart|\\r\\n|---|\\r\\n|2016-12-25 00:00:00.0000000|\\r\\n|2017-01-01 00:00:00.0000000|\\r\\n|2017-01-08 00:00:00.0000000|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/startofweekfunction\",\"startofweekfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"startofyear\",\"Returns the start of the year containing the date, shifted by an offset, if provided.\",\"## Syntax\\r\\n\\r\\n`startofyear(`*date* [`,`*offset*]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* `date`: The input date.\\r\\n* `offset`: An optional number of offset years from the input date (integer, default - 0). \\r\\n\\r\\n## Returns\\r\\n\\r\\nA datetime representing the start of the year for the given *date* value, with the offset, if specified.\",\"```\\r\\n  range offset from -1 to 1 step 1\\r\\n | project yearStart = startofyear(datetime(2017-01-01 10:10:17), offset) \\r\\n```\\r\\n\\r\\n|yearStart|\\r\\n|---|\\r\\n|2016-01-01 00:00:00.0000000|\\r\\n|2017-01-01 00:00:00.0000000|\\r\\n|2018-01-01 00:00:00.0000000|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/startofyearfunction\",\"startofyearfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"startswith\",\"Filters a record set for data with a case-insensitive string starting sequence.\",'The following table provides a comparison of the `startswith` operators:\\r\\n\\r\\n|Operator   |Description   |Case-Sensitive  |Example (yields `true`)  |\\r\\n|-----------|--------------|----------------|-------------------------|\\r\\n|[`startswith`](startswith-operator.md) |RHS is an initial subsequence of LHS |No |`\"Fabrikam\" startswith \"fab\"`|\\r\\n|[`!startswith`](not-startswith-operator.md) |RHS isn\\'t an initial subsequence of LHS |No |`\"Fabrikam\" !startswith \"kam\"`|\\r\\n|[`startswith_cs`](startswith-cs-operator.md)  |RHS is an initial subsequence of LHS |Yes |`\"Fabrikam\" startswith_cs \"Fab\"`|\\r\\n|[`!startswith_cs`](not-startswith-cs-operator.md) |RHS isn\\'t an initial subsequence of LHS |Yes |`\"Fabrikam\" !startswith_cs \"fab\"`|\\r\\n\\r\\n> [!NOTE]\\r\\n> The following abbreviations are used in the table above:\\r\\n>\\r\\n> * RHS = right hand side of the expression\\r\\n> * LHS = left hand side of the expression\\r\\n\\r\\nFor further information about other operators and to determine which operator is most appropriate for your query, see [datatype string operators](datatypes-string-operators.md). \\r\\n\\r\\nCase-insensitive operators are currently supported only for ASCII-text. For non-ASCII comparison, use the [tolower()](tolowerfunction.md) function.\\r\\n\\r\\n## Performance tips\\r\\n\\r\\n> [!NOTE]\\r\\n> Performance depends on the type of search and the structure of the data.\\r\\n\\r\\nFor faster results, use the case-sensitive version of an operator, for example, `hassuffix_cs`, not `hassuffix`. For best practices, see [Query best practices](best-practices.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *col* `startswith` `(`*expression*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T* - The tabular input whose records are to be filtered.\\r\\n* *col* - The column to filter.\\r\\n* *expression* - Scalar or literal expression.\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.','```\\r\\nStormEvents\\r\\n    | summarize event_count=count() by State\\r\\n    | where State startswith \"Lo\"\\r\\n    | where event_count > 10\\r\\n    | project State, event_count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|event_count|\\r\\n|-----|-----------|\\r\\n|LOUISIANA|463|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/startswith-operator\",\"startswith-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"startswith_cs\",\"Filters a record set for data with a case-sensitive string starting sequence.\",'The following table provides a comparison of the `startswith` operators:\\r\\n\\r\\n|Operator   |Description   |Case-Sensitive  |Example (yields `true`)  |\\r\\n|-----------|--------------|----------------|-------------------------|\\r\\n|[`startswith`](startswith-operator.md) |RHS is an initial subsequence of LHS |No |`\"Fabrikam\" startswith \"fab\"`|\\r\\n|[`!startswith`](not-startswith-operator.md) |RHS isn\\'t an initial subsequence of LHS |No |`\"Fabrikam\" !startswith \"kam\"`|\\r\\n|[`startswith_cs`](startswith-cs-operator.md)  |RHS is an initial subsequence of LHS |Yes |`\"Fabrikam\" startswith_cs \"Fab\"`|\\r\\n|[`!startswith_cs`](not-startswith-cs-operator.md) |RHS isn\\'t an initial subsequence of LHS |Yes |`\"Fabrikam\" !startswith_cs \"fab\"`|\\r\\n\\r\\n> [!NOTE]\\r\\n> The following abbreviations are used in the table above:\\r\\n>\\r\\n> * RHS = right hand side of the expression\\r\\n> * LHS = left hand side of the expression\\r\\n\\r\\nFor further information about other operators and to determine which operator is most appropriate for your query, see [datatype string operators](datatypes-string-operators.md). \\r\\n\\r\\n## Performance tips\\r\\n\\r\\n> [!NOTE]\\r\\n> Performance depends on the type of search and the structure of the data.\\r\\n\\r\\nFor faster results, use the case-sensitive version of an operator, for example, `hassuffix_cs`, not `hassuffix`. For best practices, see [Query best practices](best-practices.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `where` *col* `startswith_cs` `(`*expression*`)`  \\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T* - The tabular input whose records are to be filtered.\\r\\n* *col* - The column to filter.\\r\\n* *expression* - Scalar or literal expression.\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which the predicate is `true`.','```\\r\\nStormEvents\\r\\n    | summarize event_count=count() by State\\r\\n    | where State startswith_cs \"I\"\\r\\n    | where event_count > 2000\\r\\n    | project State, event_count\\r\\n```\\r\\n\\r\\n**Output**\\r\\n\\r\\n|State|event_count|\\r\\n|-----|-----------|\\r\\n|IOWA|2337|\\r\\n|ILLINOIS|2022|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/startswith-cs-operator\",\"startswith-cs-operator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"stdev\",\"Calculates the standard deviation of *Expr* across the group, using [Bessel's correction](https://en.wikipedia.org/wiki/Bessel's_correction) for a small data set that is considered a [sample](https://en.wikipedia.org/wiki/Sample_%28statistics%29).\",\"For a large data set that is representative of the population, use [stdevp() (aggregation function)](stdevp-aggfunction.md).\\r\\n\\r\\n* Used formula:\\r\\n\\r\\n![Image showing a Stdev sample formula.](images/stdev-aggfunction/stdev-sample.png)\\r\\n[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`stdev` `(`*Expr*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *Expr* | string | &check; | Expression that will be used for aggregation calculation. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the standard deviation value of *Expr* across the group.\",\"The following example shows the standard deviation for the group.\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAytKzEtPVahQSCvKz1UwVCjJVzBVKC5JLVAw5KpRKC7NzU0syqxKVchNzE6Nz8ksLtGo0NQBKkhJLQOyAG3qbWE9AAAA)**\\\\]**\\r\\n\\r\\n```\\r\\nrange x from 1 to 5 step 1\\r\\n| summarize make_list(x), stdev(x)\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|list_x|stdev_x|\\r\\n|---|---|\\r\\n|[ 1, 2, 3, 4, 5]|1.58113883008419|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/stdev-aggfunction\",\"stdev-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"stdevif\",\"Calculates the [stdev](stdev-aggfunction.md) of *Expr* across the group for which *Predicate* evaluates to `true`.\",\"[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`stdevif` `(`*Expr*`,`*Predicate*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *Expr* | string | &check; | Expression that will be used for aggregation calculation. |\\r\\n| *Predicate* | string | &check; | Predicate that has to evaluate to `true`, in order for *Expr* to be added to the result. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the standard deviation value of *Expr* across the group where *Predicate* evaluates to `true`.\",\"The following example shows the standard deviation in a range of 1 to 100.\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAytKzEtPVahQSCvKz1UwVCjJVzA0MFAoLkktUDDkqlEoLs3NTSzKrEoFCqWklmWmaVToKFSoGinY2ioYaAIA/zirvz0AAAA=)**\\\\]**\\r\\n\\r\\n```\\r\\nrange x from 1 to 100 step 1\\r\\n| summarize stdevif(x, x%2 == 0)\\r\\n\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|stdevif_x|\\r\\n|---|\\r\\n|29.1547594742265|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/stdevif-aggfunction\",\"stdevif-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"stdevp\",\"Calculates the standard deviation of *Expr* across the group, considering the group as a [population](https://en.wikipedia.org/wiki/Statistical_population) for a large data set that is representative of the population.\",\"For a small data set that is a [sample](https://en.wikipedia.org/wiki/Sample_%28statistics%29), use [stdev() (aggregation function)](stdev-aggfunction.md).\\r\\n\\r\\nThe following formula is used:\\r\\n\\r\\n![Image showing a Stdev sample formula.](images/stdevp-aggfunction/stdev-population.png)\\r\\n[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`stdevp` `(`*Expr*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*Expr* | string | &check; | Expression that will be used for aggregation calculation.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the standard deviation value of *Expr* across the group.\",\"**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAytKzEtPVahQSCvKz1UwVCjJVzBVKC5JLVAw5KpRKC7NzU0syqxKVchNzE6Nz8ksLtGo0NQBKkhJLSsAMgEGYndiPgAAAA==)**\\\\]**\\r\\n\\r\\n```\\r\\nrange x from 1 to 5 step 1\\r\\n| summarize make_list(x), stdevp(x)\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|list_x|stdevp_x|\\r\\n|---|---|\\r\\n|[ 1, 2, 3, 4, 5]|1.4142135623731|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/stdevp-aggfunction\",\"stdevp-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"strcat\",\"Concatenates between 1 and 64 arguments.\",\"* If the arguments aren't of string type, they'll be forcibly converted to string.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`strcat(`*argument1*, *argument2*[, *argumentN*]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *argument1* ... *argumentN*: Expressions to be concatenated.\\r\\n\\r\\n## Returns\\r\\n\\r\\nArguments, concatenated to a single string.\",'```\\r\\nprint str = strcat(\"hello\", \" \", \"world\")\\r\\n```\\r\\n\\r\\n|str|\\r\\n|---|\\r\\n|hello world|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/strcatfunction\",\"strcatfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"strcat_array\",\"Creates a concatenated string of array values using specified delimiter.\",\"## Syntax\\r\\n\\r\\n`strcat_array(`*array*, *delimiter*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *array*: A `dynamic` value representing an array of values to be concatenated.\\r\\n* *delimeter*: A `string` value that will be used to concatenate the values in *array*\\r\\n\\r\\n## Returns\\r\\n\\r\\nArray values, concatenated to a single string.\",'```\\r\\nprint str = strcat_array(dynamic([1, 2, 3]), \"->\")\\r\\n```\\r\\n\\r\\n|str|\\r\\n|---|\\r\\n|1->2->3|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/strcat-arrayfunction\",\"strcat-arrayfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"strcat_delim\",\"Concatenates between 2 and 64 arguments, with delimiter, provided as first argument.\",\"* If arguments aren't of string type, they'll be forcibly converted to string.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`strcat_delim(`*delimiter*, *argument1*, *argument2*[ , *argumentN*]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *delimiter*: string expression, which will be used as separator.\\r\\n* *argument1* ... *argumentN*: Expressions to be concatenated.\\r\\n\\r\\n## Returns\\r\\n\\r\\nArguments, concatenated to a single string with *delimiter*.\",\"```\\r\\nprint st = strcat_delim('-', 1, '2', 'A', 1s)\\r\\n\\r\\n```\\r\\n\\r\\n|st|\\r\\n|---|\\r\\n|1-2-A-00:00:01|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/strcat-delimfunction\",\"strcat-delimfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"strcmp\",\"Compares two strings.\",\"The function starts comparing the first character of each string. If they are equal to each other, it continues with the following pairs until the characters differ or until the end of shorter string is reached.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`strcmp(`*string1*`,` *string2*`)` \\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *string1*: first input string for comparison. \\r\\n* *string2*: second input string for comparison.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns an integral value indicating the relationship between the strings:\\r\\n\\r\\n* *<0* - the first character that does not match has a lower value in string1 than in string2\\r\\n* *0* - the contents of both strings are equal\\r\\n* *>0* - the first character that does not match has a greater value in string1 than in string2\",'```\\r\\ndatatable(string1:string, string2:string) [\\r\\n    \"ABC\",\"ABC\",\\r\\n    \"abc\",\"ABC\",\\r\\n    \"ABC\",\"abc\",\\r\\n    \"abcde\",\"abc\"\\r\\n]\\r\\n| extend result = strcmp(string1,string2)\\r\\n```\\r\\n\\r\\n|string1|string2|result|\\r\\n|---|---|---|\\r\\n|ABC|ABC|0|\\r\\n|abc|ABC|1|\\r\\n|ABC|abc|-1|\\r\\n|abcde|abc|1|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/strcmpfunction\",\"strcmpfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"string_size\",\"Returns the size, in bytes, of the input string.\",\"## Syntax\\r\\n\\r\\n`string_size(`*source*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *source*: The source string that will be measured for string size.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the length, in bytes, of the input string.\",'```\\r\\nprint size = string_size(\"hello\")\\r\\n```\\r\\n\\r\\n|size|\\r\\n|---|\\r\\n|5|\\r\\n\\r\\n```\\r\\nprint size = string_size(\"\\u24a6\\u24b0\\u24ae\\u24af\\u24aa\")\\r\\n```\\r\\n\\r\\n|size|\\r\\n|---|\\r\\n|15|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/stringsizefunction\",\"stringsizefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"strlen\",\"Returns the length, in characters, of the input string.\",\"## Syntax\\r\\n\\r\\n`strlen(`*source*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *source*: The source string that will be measured for string length.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the length, in characters, of the input string.\\r\\n\\r\\n**Notes**\\r\\n\\r\\nThis function counts Unicode [code points](https://en.wikipedia.org/wiki/Code_point).\",'```\\r\\nprint length = strlen(\"hello\")\\r\\n```\\r\\n\\r\\n|length|\\r\\n|---|\\r\\n|5|\\r\\n\\r\\n```\\r\\nprint length = strlen(\"\\u24a6\\u24b0\\u24ae\\u24af\\u24aa\")\\r\\n```\\r\\n\\r\\n|length|\\r\\n|---|\\r\\n|5|\\r\\n\\r\\n```\\r\\nprint strlen(\\'C\\u0327edilla\\') // the first character is a grapheme cluster\\r\\n                        // that requires 2 code points to represent\\r\\n```\\r\\n\\r\\n|length|\\r\\n|---|\\r\\n|8|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/strlenfunction\",\"strlenfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"strrep\",\"Repeats given [string](./scalar-data-types/string.md) provided amount of times.\",\"* In case if first or third argument is not of a string type, it will be forcibly converted to string.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`strrep(`*value*,*multiplier*,[*delimiter*]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *value*: input expression\\r\\n* *multiplier*: positive integer value (from 1 to 1024)\\r\\n* *delimiter*: an optional string expression (default: empty string)\\r\\n\\r\\n## Returns\\r\\n\\r\\nValue repeated for a specified number of times, concatenated with *delimiter*.\\r\\n\\r\\nIn case if *multiplier* is more than maximal allowed value (1024), input string will be repeated 1024 times.\",\"```\\r\\nprint from_str = strrep('ABC', 2), from_int = strrep(123,3,'.'), from_time = strrep(3s,2,' ')\\r\\n```\\r\\n\\r\\n|from_str|from_int|from_time|\\r\\n|---|---|---|\\r\\n|ABCABC|123.123.123|00:00:03 00:00:03|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/strrepfunction\",\"strrepfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"substring\",\"Extracts a substring from a source string starting from some index to the end of the string.\",'Optionally, the length of the requested substring can be specified.\\r\\n\\r\\n```\\r\\nsubstring(\"abcdefg\", 1, 2) == \"bc\"\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`substring(`*source*`,` *startingIndex* [`,` *length*]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *source*: The source string that the substring will be taken from.\\r\\n* *startingIndex*: The zero-based starting character position of the requested substring.\\r\\n* *length*: An optional parameter that can be used to specify the requested number of characters in the substring. \\r\\n\\r\\n**Notes**\\r\\n\\r\\n*startingIndex* can be a negative number, in which case the substring will be retrieved from the end of the source string.\\r\\n\\r\\n## Returns\\r\\n\\r\\nA substring from the given string. The substring starts at startingIndex (zero-based) character position and continues to the end of the string or length characters if specified.','```\\r\\nsubstring(\"123456\", 1)        // 23456\\r\\nsubstring(\"123456\", 2, 2)     // 34\\r\\nsubstring(\"ABCD\", 0, 2)       // AB\\r\\nsubstring(\"123456\", -2, 2)    // 56\\r\\n```',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/substringfunction\",\"substringfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"sum\",\"Calculates the sum of *Expr* across the group.\",\"[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`sum` `(`*Expr*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *Expr*  string | &check; | Expression used for aggregation calculation. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the sum value of *Expr* across the group.\",\"This example returns the total number of deaths by state.\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSspVuCqUSguzc1NLMqsSlUAiznnl+aV2CaDSA1NHYWQ/JLEHJfUxJIM58Ti1GIFW5B6DbBAsUtmUWpyiaZCUqVCcEliSSrYtPyiEpAAmj4A7Xtp83QAAAA=)**\\\\]**\\r\\n\\r\\n```\\r\\nStormEvents \\r\\n| summarize EventCount=count(), TotalDeathCases = sum(DeathsDirect) by State \\r\\n| sort by TotalDeathCases\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\nThe results table shown includes only the first 10 rows.\\r\\n\\r\\n| State                | event_count | TotalDeathCases |\\r\\n| -------------------- | ----------- | --------------- |\\r\\n| TEXAS                | 4701        | 71              |\\r\\n| FLORIDA              | 1042        | 57              |\\r\\n| CALIFORNIA           | 898         | 48              |\\r\\n| ILLINOIS             | 2022        | 29              |\\r\\n| ALABAMA              | 1315        | 29              |\\r\\n| MISSOURI             | 2016        | 20              |\\r\\n| NEW YORK             | 1750        | 19              |\\r\\n| KANSAS               | 3166        | 17              |\\r\\n| GEORGIA              | 1983        | 17              |\\r\\n| TENNESSEE            | 1125        | 17              |\\r\\n| ...   | ... | ... |\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/sum-aggfunction\",\"sum-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"sumif\",\"Calculates the sum of *Expr* in records for which *Predicate* evaluates to `true`.\",'[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\nYou can also use the [sum()](sum-aggfunction.md) function, which sums rows without predicate expression.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`sumif` `(`*Expr*`,`*Predicate*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *Expr* | string | &check; | Expression that will be used for aggregation calculation. |\\r\\n| *Predicate* | string | &check; | Expression that will be used to filter rows. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the sum of *Expr* for which *Predicate* evaluates to `true`.\\r\\n\\r\\n## Example showing the sum of damages based on no casualty count\\r\\n\\r\\nThis example shows the sum total damage for storms without casualties.\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5qpRKC7NzU0syqxKVXBJzE1MT/XLd04sLk3MKclMLbYFSmamaWhAZJyL8guKtSHsACA7taikUlNHwyU1sSSj2CWzKDW5RBvC8cxLAXM1bW0NNBWSKhWCSxJLUgF0hdWZeAAAAA==)**\\\\]**\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize DamageNoCasualties=sumif((DamageCrops+DamageProperty),(DeathsDirect+DeathsIndirect)==0) by State\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\nThe results table shown includes only the first 10 rows.\\r\\n\\r\\n| State                | DamageNoCasualties |\\r\\n| -------------------- | ------------------ |\\r\\n| TEXAS                | 242638700          |\\r\\n| KANSAS               | 407360000          |\\r\\n| IOWA                 | 135353700          |\\r\\n| ILLINOIS             | 120394500          |\\r\\n| MISSOURI             | 1096077450         |\\r\\n| GEORGIA              | 1077448750         |\\r\\n| MINNESOTA            | 230407300          |\\r\\n| WISCONSIN            | 241550000          |\\r\\n| NEBRASKA             | 70356050           |\\r\\n| NEW YORK             | 58054000           |\\r\\n| ... | ... |\\r\\n\\r\\n## Example showing the sum of birth dates\\r\\n\\r\\nThis example shows the sum of the birth dates for all names that have more than 4 letters.\\r\\n\\r\\n```\\r\\nlet T = datatable(name:string, day_of_birth:long)\\r\\n[\\r\\n   \"John\", 9,\\r\\n   \"Paul\", 18,\\r\\n   \"George\", 25,\\r\\n   \"Ringo\", 7\\r\\n];\\r\\nT\\r\\n| summarize sumif(day_of_birth, strlen(name) > 4)\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|sumif_day_of_birth|\\r\\n|----|\\r\\n|32|',\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/sumif-aggfunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"summarize\",\"Produces a table that aggregates the content of the input table.\",\"```\\r\\nSales | summarize NumTransactions=count(), Total=sum(UnitPrice * NumUnits) by Fruit, StartOfMonth=startofmonth(SellDateTime)\\r\\n```\\r\\n\\r\\nReturns a table with how many sell transactions and the total amount per fruit and sell month.\\r\\nThe output columns show the count of transactions, transaction worth, fruit, and the datetime of the beginning of the month\\r\\nin which the transaction was recorded.\\r\\n\\r\\n```\\r\\nT | summarize count() by price_range=bin(price, 10.0)\\r\\n```\\r\\n\\r\\nA table that shows how many items have prices in each interval  [0,10.0], [10.0,20.0], and so on. This example has a column for the count and one for the price range. All other input columns are ignored.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `| summarize` [*SummarizeParameters*]\\r\\n      [[*Column* `=`] *Aggregation* [`,` ...]]\\r\\n    [`by`\\r\\n      [*Column* `=`] *GroupExpression* [`,` ...]]\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *Column:* Optional name for a result column. Defaults to a name derived from the expression.\\r\\n* *Aggregation:* A call to an [aggregation function](aggregation-functions.md) such as `count()` or `avg()`, with column names as arguments.\\r\\n* *GroupExpression:* A scalar expression that can reference the input data.\\r\\n  The output will have as many records as there are distinct values of all the\\r\\n  group expressions.\\r\\n* *SummarizeParameters*: Zero or more (space-separated) parameters in the form of *Name* `=` *Value* that control the behavior. The following parameters are supported:\\r\\n  \\r\\n  |Name  |Description  |\\r\\n  |---|---|\\r\\n  |`hint.num_partitions` |Specifies the number of partitions used to share the query load on cluster nodes. See [shuffle query](shufflequery.md)  |\\r\\n  |`hint.shufflekey=<key>` |The `shufflekey` query shares the query load on cluster nodes, using a key to partition data. See [shuffle query](shufflequery.md) |\\r\\n  |`hint.strategy=shuffle` |The `shuffle` strategy query shares the query load on cluster nodes, where each node will process one partition of the data. See [shuffle query](shufflequery.md)  |\\r\\n\\r\\n> [!NOTE]\\r\\n> When the input table is empty, the output depends on whether *GroupExpression*\\r\\n> is used:\\r\\n>\\r\\n> * If *GroupExpression* is not provided, the output will be a single (empty) row.\\r\\n> * If *GroupExpression* is provided, the output will have no rows.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe input rows are arranged into groups having the same values of the `by` expressions. Then the specified aggregation functions are computed over each group, producing a row for each group. The result contains the `by` columns and also at least one column for each computed aggregate. (Some aggregation functions return multiple columns.)\\r\\n\\r\\nThe result has as many rows as there are distinct combinations of `by` values\\r\\n(which may be zero). If there are no group keys provided, the result has a single\\r\\nrecord.\\r\\n\\r\\nTo summarize over ranges of numeric values, use `bin()` to reduce ranges to discrete values.\\r\\n\\r\\n> [!NOTE]\\r\\n> * Although you can provide arbitrary expressions for both the aggregation and grouping expressions, it's more efficient to use simple column names, or apply `bin()` to a numeric column.\\r\\n> * The automatic hourly bins for datetime columns is no longer supported. Use explicit binning instead. For example, `summarize by bin(timestamp, 1h)`.\\r\\n\\r\\n## Aggregates default values\\r\\n\\r\\nThe following table summarizes the default values of aggregations:\\r\\n\\r\\n| Operator | Default value |\\r\\n|--|--|\\r\\n| `count()`, `countif()`, `dcount()`, `dcountif()` | 0 |\\r\\n| `make_bag()`, `make_bag_if()`, `make_list()`, `make_list_if()`, `make_set()`, `make_set_if()` | empty dynamic array              ([]) |\\r\\n| All others | null |\\r\\n\\r\\nWhen using these aggregates over entities which includes null values, the null values will be ignored and won't participate in the calculation (see examples below).\",\"![Summarize price by fruit and supplier.](images/summarizeoperator/summarize-price-by-supplier.png)\\r\\n\\r\\n### Unique combination\\r\\n\\r\\nDetermine what unique combinations of\\r\\n`ActivityType` and `CompletionStatus` there are in a table. There are no aggregation functions, just group-by keys. The output will just show the columns for those results:\\r\\n\\r\\n```\\r\\nActivities | summarize by ActivityType, completionStatus\\r\\n```\\r\\n\\r\\n|`ActivityType`|`completionStatus`\\r\\n|---|---\\r\\n|`dancing`|`started`\\r\\n|`singing`|`started`\\r\\n|`dancing`|`abandoned`\\r\\n|`singing`|`completed`\\r\\n\\r\\n### Minimum and maximum timestamp\\r\\n\\r\\nFinds the minimum and maximum timestamp of all records in the Activities table. There is no group-by clause, so there is just one row in the output:\\r\\n\\r\\n```\\r\\nActivities | summarize Min = min(Timestamp), Max = max(Timestamp)\\r\\n```\\r\\n\\r\\n|`Min`|`Max`\\r\\n|---|---\\r\\n|`1975-06-09 09:21:45` | `2015-12-24 23:45:00`\\r\\n\\r\\n### Distinct count\\r\\n\\r\\nCreate a row for each continent, showing a count of the cities in which activities occur. Because there are few values for \\\"continent\\\", no grouping function is needed in the 'by' clause:\\r\\n\\r\\n```\\r\\nActivities | summarize cities=dcount(city) by continent\\r\\n```\\r\\n\\r\\n|`cities`|`continent`\\r\\n|---|---\\r\\n|`4290`|`Asia`|\\r\\n|`3267`|`Europe`|\\r\\n|`2673`|`North America`|\\r\\n\\r\\n### Histogram\\r\\n\\r\\nThe following example calculates a histogram for each activity\\r\\ntype. Because `Duration` has many values, use `bin` to group its values into 10-minute intervals:\\r\\n\\r\\n```\\r\\nActivities | summarize count() by ActivityType, length=bin(Duration, 10m)\\r\\n```\\r\\n\\r\\n|`count_`|`ActivityType`|`length`\\r\\n|---|---|---\\r\\n|`354`| `dancing` | `0:00:00.000`\\r\\n|`23`|`singing` | `0:00:00.000`\\r\\n|`2717`|`dancing`|`0:10:00.000`\\r\\n|`341`|`singing`|`0:10:00.000`\\r\\n|`725`|`dancing`|`0:20:00.000`\\r\\n|`2876`|`singing`|`0:20:00.000`\\r\\n|...\\r\\n\\r\\n### Aggregates default values\\r\\n\\r\\nWhen the input of `summarize` operator has at least one empty group-by key, it's result is empty, too.\\r\\n\\r\\nWhen the input of `summarize` operator doesn't have an empty group-by key, the result is the default values of the aggregates used in the `summarize`:\\r\\n\\r\\n```\\r\\ndatatable(x:long)[]\\r\\n| summarize any(x), arg_max(x, x), arg_min(x, x), avg(x), buildschema(todynamic(tostring(x))), max(x), min(x), percentile(x, 55), hll(x) ,stdev(x), sum(x), sumif(x, x > 0), tdigest(x), variance(x)\\r\\n```\\r\\n\\r\\n|any_x|max_x|max_x_x|min_x|min_x_x|avg_x|schema_x|max_x1|min_x1|percentile_x_55|hll_x|stdev_x|sum_x|sumif_x|tdigest_x|variance_x|\\r\\n|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|---|\\r\\n|||||||||||||||||\\r\\n\\r\\n```\\r\\ndatatable(x:long)[]\\r\\n| summarize  count(x), countif(x > 0) , dcount(x), dcountif(x, x > 0)\\r\\n```\\r\\n\\r\\n|count_x|countif_|dcount_x|dcountif_x|\\r\\n|---|---|---|---|\\r\\n|0|0|0|0|\\r\\n\\r\\n```\\r\\ndatatable(x:long)[]\\r\\n| summarize  make_set(x), make_list(x)\\r\\n```\\r\\n\\r\\n|set_x|list_x|\\r\\n|---|---|\\r\\n|[]|[]|\\r\\n\\r\\nThe aggregate avg sums all the non-nulls and counts only those which participated in the calculation (will not take nulls into account).\\r\\n\\r\\n```\\r\\nrange x from 1 to 2 step 1\\r\\n| extend y = iff(x == 1, real(null), real(5))\\r\\n| summarize sum(y), avg(y)\\r\\n```\\r\\n\\r\\n|sum_y|avg_y|\\r\\n|---|---|\\r\\n|5|5|\\r\\n\\r\\nThe regular count will count nulls:\\r\\n\\r\\n```\\r\\nrange x from 1 to 2 step 1\\r\\n| extend y = iff(x == 1, real(null), real(5))\\r\\n| summarize count(y)\\r\\n```\\r\\n\\r\\n|count_y|\\r\\n|---|\\r\\n|2|\\r\\n\\r\\n```\\r\\nrange x from 1 to 2 step 1\\r\\n| extend y = iff(x == 1, real(null), real(5))\\r\\n| summarize make_set(y), make_set(y)\\r\\n```\\r\\n\\r\\n|set_y|set_y1|\\r\\n|---|---|\\r\\n|[5.0]|[5.0]|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/summarizeoperator\",\"summarizeoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"table\",\"The table() function references a table by providing its name as an expression of type `string`.\",'```\\r\\ntable(\\'StormEvent\\')\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`table` `(` *TableName* [`,` *DataScope*] `)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *TableName*: An expression of type `string` that provides the name of the table\\r\\n  being referenced. The value of this expression must be constant at the point\\r\\n  of call to the function (i.e. it cannot vary by the data context).\\r\\n* *DataScope*: An optional parameter of type `string` that can be used to restrict\\r\\n  the table reference to data according to how this data falls under the table\\'s\\r\\n  effective [cache policy](../management/cachepolicy.md). If used, the actual argument\\r\\n  must be a constant `string` expression having one of the following possible values:\\r\\n    - `\"hotcache\"`: Only data that is categorized as hot cache will be referenced.\\r\\n    - `\"all\"`: All the data in the table will be referenced.\\r\\n    - `\"default\"`: This is the same as `\"all\"`, except if the cluster has been\\r\\n      set to use `\"hotcache\"` as the default by the cluster admin.',\"### Use table() to access table of the current database\\r\\n\\r\\n```\\r\\ntable('StormEvent') | count\\r\\n```\\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|59066|\\r\\n\\r\\n### Use table() inside let statements\\r\\n\\r\\nThe same query as above can be rewritten to use inline function (let statement) that receives a parameter `tableName` - which is passed into the table() function.\\r\\n\\r\\n```\\r\\nlet foo = (tableName:string)\\r\\n{\\r\\n    table(tableName) | count\\r\\n};\\r\\nfoo('help')\\r\\n```\\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|59066|\\r\\n\\r\\n### Use table() inside Functions\\r\\n\\r\\nThe same query as above can be rewritten to be used in a function that \\r\\nreceives a parameter `tableName` - which is passed into the table() function.\\r\\n\\r\\n```\\r\\n.create function foo(tableName:string)\\r\\n{\\r\\n    table(tableName) | count\\r\\n};\\r\\n```\\r\\n\\r\\n**Note:** such functions can be used only locally and not in the cross-cluster query.\\r\\n\\r\\n### Use table() with non-constant parameter\\r\\n\\r\\nA parameter, which is not scalar constant string can't be passed as parameter to `table()` function.\\r\\n\\r\\nBelow, given an example of workaround for such case.\\r\\n\\r\\n```\\r\\nlet T1 = print x=1;\\r\\nlet T2 = print x=2;\\r\\nlet _choose = (_selector:string)\\r\\n{\\r\\n    union\\r\\n    (T1 | where _selector == 'T1'),\\r\\n    (T2 | where _selector == 'T2')\\r\\n};\\r\\n_choose('T2')\\r\\n\\r\\n```\\r\\n\\r\\n|x|\\r\\n|---|\\r\\n|2|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/tablefunction\",\"tablefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"take\",\"Return up to the specified number of rows.\",\"```\\r\\nT | take 5\\r\\n```\\r\\n\\r\\nThere is no guarantee which records are returned, unless\\r\\nthe source data is sorted.\\r\\n\\r\\n> [!NOTE]\\r\\n> `take` is a simple, quick, and efficient way to view a small sample of records when browsing data interactively, but be aware that it doesn't guarantee any consistency in its results when executing multiple times, even if the data set hasn't changed.\\r\\n> Even if the number of rows returned by the query isn't explicitly limited by the query (no `take` operator is used), Kusto limits that number by default. For more details, see [Kusto query limits](../concepts/querylimits.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`take` *NumberOfRows*\\r\\n`limit` *NumberOfRows*\\r\\n\\r\\n(`take` and `limit` are synonyms.)\\r\\n\\r\\n## Paging of query results\\r\\n\\r\\nMethods for implementing paging include:\\r\\n\\r\\n* Export the result of a query to an external storage and paging through the\\r\\n   generated data.\\r\\n* Write a middle-tier application that provides a stateful paging API by caching\\r\\n   the results of a Kusto query.\\r\\n* Use pagination in [Stored query results](../management/stored-query-results.md#pagination) .\\r\\n\\r\\n\\r\\n## See also\\r\\n\\r\\n* [sort operator](sortoperator.md)\\r\\n* [top operator](topoperator.md)\\r\\n* [top-nested operator](topnestedoperator.md)\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/takeoperator\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"take_any\",\"Arbitrarily chooses one record for each group in a [summarize operator](summarizeoperator.md),\\r\\nand returns the value of one or more expressions over each such record.\",\"> [!NOTE]\\r\\n> `any()` has been deprecated in favor of `take_any()`. The legacy version adds `any_` prefix to the columns returned by the `any()` aggregation.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`take_any` `(` (*Expr* [`,` *Expr2* ...]) | *\\\\** `)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *Expr* | string | &check; | Expression used for selecting a record. |\\r\\n| *Expr2* | string |  | Additional expressions. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe `take_any` aggregation function returns the values of the expressions calculated\\r\\nfor each of the records selected Indeterministically from each group of the summarize operator.\\r\\n\\r\\nIf the `*` argument is provided, the function behaves as if the expressions are all columns\\r\\nof the input to the summarize operator barring the group-by columns, if any.\\r\\n\\r\\n## Remarks\\r\\n\\r\\nThis function is useful when you want to get a sample value of one or more columns\\r\\nper value of the compound group key.\\r\\n\\r\\nWhen the function is provided with a single column reference, it will attempt to\\r\\nreturn a non-null/non-empty value, if such value is present.\\r\\n\\r\\nAs a result of the indeterministic nature of this function, using this function multiple times in\\r\\na single application of the `summarize` operator isn't equivalent to using\\r\\nthis function a single time with multiple expressions. The former may have each application\\r\\nselect a different record, while the latter guarantees that all values are calculated\\r\\nover a single record (per distinct group).\",\"Show indeterministic State:\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/kvc6bc487453a064d3c9de.northeurope/databases/NewDatabase1?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5uWqUSguzc1NLMqsSlUoScxOjU/Mq9QILkksSdUEALgBS0YoAAAA)**\\\\]**\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize take_any(State)\\r\\n```\\r\\n\\r\\n|State|\\r\\n|---|\\r\\n|ATLANTIC SOUTH|\\r\\n\\r\\nShow all the details for a random record:\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/kvc6bc487453a064d3c9de.northeurope/databases/NewDatabase1?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5uWqUSgoys9KTS5RCC5JLCoJycxN1VFwLcgszk9J9UzRAYmWgERAykMqC1JBOopLc3MTizKrUhVKErNT4xPzKjW0NAGzMGIFVgAAAA==)**\\\\]**\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| project StartTime, EpisodeId, State, EventType\\r\\n| summarize take_any(*)\\r\\n```\\r\\n\\r\\n|StartTime|EpisodeId|State|EventType|\\r\\n|---|---|---|---|\\r\\n|2007-09-29 08:11:00.0000000|11091|ATLANTIC SOUTH|Waterspout|\\r\\n\\r\\nShow all the details of a random record for each State starting with 'A':\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/kvc6bc487453a064d3c9de.northeurope/databases/NewDatabase1?query=H4sIAAAAAAAAAyWMMQ7CMBAEeyT+cEoFKJ+gSEGd9OggK8Ugx9bdQmTE4xMr7c7O9EwWuy9m+vHwl2WCQXoqIU41+hI4SXNtKs2WXniycuMQIlrpcvA04ja2u7UtNTaUjGr4J0a18INQ37jrXE6XszzKfl4BiZpjAH0AAAA=)**\\\\]**\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| where State startswith \\\"A\\\"\\r\\n| project StartTime, EpisodeId, State, EventType\\r\\n| summarize take_any(*) by State\\r\\n```\\r\\n\\r\\n|State|StartTime|EpisodeId|EventType|\\r\\n|---|---|---|---|\\r\\n|ALASKA|2007-02-01 00:00:00.0000000|1733|Flood|\\r\\n|ATLANTIC SOUTH|2007-09-29 08:11:00.0000000|11091|Waterspout|\\r\\n|ATLANTIC NORTH|2007-11-27 00:00:00.0000000|11523|Marine Thunderstorm Wind|\\r\\n|ARIZONA|2007-12-01 10:40:00.0000000|11955|Flash Flood|\\r\\n|AMERICAN SAMOA|2007-12-07 14:00:00.0000000|13183|Flash Flood|\\r\\n|ARKANSAS|2007-12-09 16:00:00.0000000|11319|Lightning|\\r\\n|ALABAMA|2007-12-15 18:00:00.0000000|12580|Heavy Rain|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/take-any-aggfunction\",\"take-any-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"take_anyif\",'Arbitrarily selects one record for each group in a [summarize operator](summarizeoperator.md), for which the predicate\\r\\nis \"true\". The function returns the value of an expression over each such record.','This function is useful when you want to get a sample value of one column per value of the compound group key, subject to some predicate that is *true*. If such a value is present, the function attempts to return a non-null/non-empty value.\\r\\n\\r\\n> [!NOTE]\\r\\n> `anyif()` has been deprecated in favor of `take_anyif()`. The legacy version adds `any_` prefix to the columns returned by the `any()` aggregation.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`take_anyif` `(` *Expr*`,` *Predicate* `)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *Expr* | string | &check; | Expression used for selecting a record. |\\r\\n| *Predicate* | string | &check; | Indicates which records may be considered for evaluation. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe `take_anyif` aggregation function returns the value of the expression calculated\\r\\nfor each of the records randomly selected from each group of the summarize operator. Only records for which *Predicate* returns \"true\" may be selected. If the predicate doesn\\'t return \"true\", a null value is produced.',\"Pick a random EventType from Storm events, where event description has a key phrase.\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/kvc6bc487453a064d3c9de.northeurope/databases/NewDatabase1?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5uWqUSguzc1NLMqsSlUoScxOjU/Mq8xM0wBLh1QWpOoogJl+iUVFiSWZZakKGYnFCurFJUX5eekK5Zl5KeqaABMQsZRQAAAA)**\\\\]**\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize take_anyif(EventType, EventNarrative has 'strong wind')\\r\\n```\\r\\n\\r\\n|EventType|\\r\\n|---|\\r\\n|Strong Wind|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/take-anyif-aggfunction\",\"take-anyif-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"tan\",\"Returns the tangent function.\",\"## Syntax\\r\\n\\r\\n`tan(`*x*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *x*: A real number.\\r\\n\\r\\n## Returns\\r\\n\\r\\n* The result of `tan(x)`\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/tanfunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"tdigest\",\"Calculates the intermediate results of [`percentiles()`](percentiles-aggfunction.md) across the group.\",\"[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\nFor more information, see the [underlying algorithm (T-Digest) and the estimated error](percentiles-aggfunction.md#estimation-error-in-percentiles).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`tdigest` `(`*Expr* [`,` *WeightExpr*]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *Expr* | string | &check; | Expression used for the aggregation calculation. |\\r\\n| *WeightExpr* | string | &check; | Expression used as the weight of the values for the aggregation calculation. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe Intermediate results of weighted percentiles of `*Expr*` across the group.\\r\\n\\r\\n> [!TIP]\\r\\n>\\r\\n>- Use the aggregation function [tdigest_merge()](tdigest-merge-aggfunction.md) to merge the output of `tdigest` again across another group.\\r\\n>- Use the function [percentile_tdigest()](percentile-tdigestfunction.md) to calculate the percentile/percentilew of the `tdigest` results.\",\"This example shows the results of the tdigest percentiles sorted by state.\\r\\n\\r\\n**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/kvc6bc487453a064d3c9de.northeurope/databases/NewDatabase1?query=H4sIAAAAAAAAAwsuyS/KdS1LzSsp5uWqUSguzc1NLMqsSlUoSclMTy0u0XBJzE1MTw0oyi9ILSqp1FRIqlQILkksSQUAy2eq1DkAAAA=)**\\\\]**\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| summarize tdigest(DamageProperty) by State\\r\\n```\\r\\n\\r\\nThe results table shown includes only the first 10 rows.\\r\\n\\r\\n| State | tdigest_DamageProperty |\\r\\n|--|--|\\r\\n| NEBRASKA | [[7],[800,250,300000,5000,240000,1500000,20000,550000,0,75000,100000,1000,10000,30000,13000,2000000,1000000,650000,125000,35000,7000,2500000,4000000,450000,85000,460000,500000,6000,150000,350000,4000,72500,1200000,180000,400000,25000,50000,2000,45000,8000,120000,200000,40000,1200,15000,55000,3000,250000],[5,1,3,72,1,1,44,1,1351,12,24,17,46,13,6,1,2,1,2,6,8,1,1,1,2,1,4,2,6,1,2,2,1,1,2,26,18,12,2,2,1,7,6,4,28,4,6,6]] |\\r\\n| MINNESOTA | [[7],[700,500,2000000,2500,1200000,12000000,16000,7000000,0,300000,425000,750,6000,30000,10000,22000000,10000000,9600000,600000,50000,4000,27000000,35000000,4000000,400000,5000000,6000000,3000,750000,2500000,2000,250000,11000000,38000000,3000000,20000,120000,1000,100000,5000,500000,1000000,60000,800,15000,200000,1500,1500000,900000],[1,3,1,3,1,2,1,1,1793,1,1,2,2,2,3,1,1,1,2,2,1,1,1,1,2,1,2,1,1,1,6,1,1,1,3,5,1,5,2,5,2,2,1,2,2,2,2,1,1]] |\\r\\n| KANSAS | [[7],[667,200,6000000,3400,80000,300000,18875,210000,0,45857,750000,37500000,10000,81150000,15000000,6400000,2570000,225000,59400,25000,5000,400000,7000000,4500000,2500000,6500000,200000,4500,70000,122500,2785,12000000,1900000,18200000,150000,1150000,27000000,2000,30000,2000000,250000000,75000,26000,1500,1500000,1000000,2500,100000,21600000,50000,335000,600000,175000,500000,160000,51000,40000,20000,15000,252500,7520,350000,250000,3400000,1000,338000,16000000,106000,4840000,305000,540000,337500,9800000,45000,12500,700000,4000000,71000,30000000,35000,3700000,22000,56000],[12,2,2,5,2,3,8,1,2751,7,2,1,37,1,1,1,1,2,5,12,33,8,1,1,1,2,10,1,5,2,7,1,4,1,5,1,1,9,11,4,1,5,2,6,4,8,2,23,1,44,2,3,2,3,1,1,1,18,5,2,5,1,7,1,25,1,1,3,1,1,1,2,6,1,1,2,1,1,1,3,1,1,1]] |\\r\\n| NEW MEXICO | [[7],[600,500,2500000,7000,1500,28000,40000,10000,0,500000,20000,1000,21000,70000,25000,3500000,200000,16500000,50000,100000,15000,4000,5000,2000],[1,3,1,1,1,1,1,7,466,1,7,4,1,1,2,1,1,1,1,2,1,4,10,8]] |\\r\\n| KENTUCKY | [[7],[600,200,700000,5000,400000,12000,15000,100000,0,60000,80000,1000,9000,20000,10000,50000,30000,300000,120000,25000,7000,3000,500000,11500000,75000,35000,8000,6000,150000,1500000,4000,56000,1911,250000,2500000,18000,45000,2000],[6,2,1,42,1,3,9,8,999,2,1,52,1,21,37,25,7,2,3,14,11,35,1,1,6,10,9,10,4,1,13,1,9,3,1,2,1,37]] |\\r\\n| VIRGINIA | [[7],[536,500,125000,3000,100000,7250,8000,60000,0,40000,50000,956,6000,11500,7000,25000,15000,98000,70000,12000,4000,2000,120000,1000000,45000,16000,5000,3500,75000,175000,2500,30000,1000,80000,300000,10000,20000,1500],[7,11,1,48,2,2,2,1,1025,2,6,9,2,2,1,5,16,1,3,5,12,122,1,1,1,1,64,2,2,1,1,7,209,3,2,42,19,6]] |\\r\\n| OREGON | [[7],[5000,1000,60000,434000,20000,50000,100000,500000,0,1500000,20400000,6000,62600000],[8,2,1,1,1,1,3,1,401,1,1,1,1]] |\\r\\n| ALASKA | [[7],[5000,1000,25000,700000,12060,15000,100000,1600000,0,10000],[5,1,1,1,1,2,1,2,242,1]] |\\r\\n| CONNECTICUT | [[7],[5000,1000,2000000,0,50000,750000,6000],[1,1,1,142,1,1,1]] |\\r\\n| NEVADA | [[7],[5000,1000,200000,1000000,30000,40000,297000,5000000,0,10000],[4,2,1,1,1,1,1,1,148,3]] |\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/tdigest-aggfunction\",\"tdigest-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"tdigest_merge\",\"Merges `tdigest` results (scalar version of the aggregate version [`tdigest_merge()`](tdigest-merge-aggfunction.md)).\",\"Read more about the underlying algorithm (T-Digest) and the estimated error [here](percentiles-aggfunction.md#estimation-error-in-percentiles).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`tdigest_merge(` *Expr1*`,` *Expr2*`, ...)`\\r\\n\\r\\n`merge_tdigest(` *Expr1*`,` *Expr2*`, ...)`\\r\\n\\r\\n> [!NOTE]\\r\\n> `merge_tdigest` is an alias of `tdigest_merge`. \\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n| *Expr* | dynamic | &check; | Columns that have the `tdigest` values to be merged. |\\r\\n\\r\\n## Returns\\r\\n\\r\\nThe result for merging the columns `*Expr1*`, `*Expr2*`, ... `*ExprN*` to one `tdigest`.\",\"**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAA02OSwrDMBBD9z3FLG2aRXKA3qNdhZAoxiX+YE/BDj18h7Ym2Wmk0UNp8gZUaE3B0UAcaOgpM6IclzehMPxClW7yc5VMvPxybkp2B/FiDTLfJf1LVXTX9ONkVy3FmMITM5NDMliOdPwaqtEOwLkUkWZ4thvGBv1xOlnVS6dGhFVtwRutP5Qlo27WAAAA)**\\\\]**\\r\\n\\r\\n```\\r\\nrange x from 1 to 10 step 1 \\r\\n| extend y = x + 10\\r\\n| summarize tdigestX = tdigest(x), tdigestY = tdigest(y)\\r\\n| project merged = tdigest_merge(tdigestX, tdigestY)\\r\\n| project percentile_tdigest(merged, 100, typeof(long))\\r\\n```\\r\\n\\r\\n|percentile_tdigest_merged|\\r\\n|---|\\r\\n|20|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/tdigest-mergefunction\",\"tdigest-mergefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"to_utf8\",\"Returns a dynamic array of the unicode characters of an input string (the inverse operation of make_string).\",\"## Syntax\\r\\n\\r\\n`to_utf8(`*source*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *source*: The source string to convert.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns a dynamic array of the unicode characters that make up the string provided to this function.\\r\\nSee [`make_string()`](makestringfunction.md))\",'```\\r\\nprint arr = to_utf8(\"\\u24a6\\u24b0\\u24ae\\u24af\\u24aa\")\\r\\n```\\r\\n\\r\\n|arr|\\r\\n|---|\\r\\n|[9382, 9392, 9390, 9391, 9386]|\\r\\n\\r\\n```\\r\\nprint arr = to_utf8(\"\\u05e7\\u05d5\\u05e1\\u05d8\\u05d5 - Kusto\")\\r\\n```\\r\\n\\r\\n|arr|\\r\\n|---|\\r\\n|[1511, 1493, 1505, 1496, 1493, 32, 45, 32, 75, 117, 115, 116, 111]|\\r\\n\\r\\n```\\r\\nprint str = make_string(to_utf8(\"Kusto\"))\\r\\n```\\r\\n\\r\\n|str|\\r\\n|---|\\r\\n|Kusto|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/toutf8function\",\"toutf8function.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"tobool\",\"Converts input to boolean (signed 8-bit) representation.\",'```\\r\\ntobool(\"true\") == true\\r\\ntobool(\"false\") == false\\r\\ntobool(1) == true\\r\\ntobool(123) == true\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`tobool(`*Expr*`)`\\r\\n`toboolean(`*Expr*`)` (alias)\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *Expr*: Expression that will be converted to boolean. \\r\\n\\r\\n## Returns\\r\\n\\r\\nIf conversion is successful, result will be a boolean.\\r\\nIf conversion isn\\'t successful, result will be `null`.',\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/toboolfunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"todatetime\",\"Converts input to [datetime](./scalar-data-types/datetime.md) scalar.\",'```\\r\\ntodatetime(\"2015-12-24\") == datetime(2015-12-24)\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`todatetime(`*Expr*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *Expr*: Expression that will be converted to [datetime](./scalar-data-types/datetime.md).\\r\\n\\r\\n## Returns\\r\\n\\r\\nIf the conversion is successful, the result will be a [datetime](./scalar-data-types/datetime.md) value.\\r\\nElse, the result will be null.\\r\\n\\r\\n> [!NOTE]\\r\\n> Prefer using [datetime()](./scalar-data-types/datetime.md) when possible.',\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/todatetimefunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"todecimal\",\"Converts input to decimal number representation.\",'```\\r\\ntodecimal(\"123.45678\") == decimal(123.45678)\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`todecimal(`*Expr*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *Expr*: Expression that will be converted to decimal. \\r\\n\\r\\n## Returns\\r\\n\\r\\nIf conversion is successful, result will be a decimal number.\\r\\nIf conversion is not successful, result will be `null`.\\r\\n\\r\\n*Note*: Prefer using [real()](./scalar-data-types/real.md) when possible.',\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/todecimalfunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"todouble\",\"Converts the input to a value of type `real`. (`todouble()` and `toreal()` are synonyms.)\",'```\\r\\ntoreal(\"123.4\") == 123.4\\r\\n```\\r\\n\\r\\n> [!NOTE]\\r\\n> Prefer using [double() or real()](./scalar-data-types/real.md) when possible.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`toreal(`*Expr*`)`\\r\\n`todouble(`*Expr*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *Expr*: An expression whose value will be converted to a value of type `real`.\\r\\n\\r\\n## Returns\\r\\n\\r\\nIf conversion is successful, the result is a value of type `real`.\\r\\nIf conversion is not successful, the result is the value `real(null)`.',\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/todoublefunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"todynamic\",\"Interprets a `string` as a JSON value and returns the value as `dynamic`. If possible, the value is converted into relevant [data types](scalar-data-types/index.md).  For strict parsing with no data type conversion, use [extract()](extractfunction.md) or [extractjson()](extractjsonfunction.md) functions.\",\"> [!NOTE]\\r\\n> The `todynamic()` and `parse_json()` functions are interpreted equivalently.\\r\\n\\r\\nThis function is better than [extractjson() function](./extractjsonfunction.md) when you need to extract more than one element of a JSON compound object. Prefer using [dynamic()](./scalar-data-types/dynamic.md) when possible.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`parse_json(`*json*`)`\\r\\n`todynamic(`*json*`)`\\r\\n\\r\\n<!-- deprecated aliases: `toobject()` and parsejson() -->\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *json*: An expression of type `string`. It represents a [JSON-formatted value](https://json.org/), or an expression of type [dynamic](./scalar-data-types/dynamic.md), representing the actual `dynamic` value.\\r\\n\\r\\n## Returns\\r\\n\\r\\nAn object of type `dynamic` that is determined by the value of *json*:\\r\\n\\r\\n* If *json* is of type `dynamic`, its value is used as-is.\\r\\n* If *json* is of type `string`, and is a [properly formatted JSON string](https://json.org/), then the string is parsed, and the value produced is returned.\\r\\n* If *json* is of type `string`, but it isn't a [properly formatted JSON string](https://json.org/), then the returned value is an object of type `dynamic` that holds the original `string` value.\",'In the following example, when `context_custom_metrics` is a `string`\\r\\nthat looks like this:\\r\\n\\r\\n```json\\r\\n{\"duration\":{\"value\":118.0,\"count\":5.0,\"min\":100.0,\"max\":150.0,\"stdDev\":0.0,\"sampledValue\":118.0,\"sum\":118.0}}\\r\\n```\\r\\n\\r\\nthen the following CSL Fragment retrieves the value of the `duration` slot\\r\\nin the object, and from that it retrieves two slots, `duration.value` and\\r\\n `duration.min` (`118.0` and `110.0`, respectively).\\r\\n\\r\\n```\\r\\nT\\r\\n| extend d=parse_json(context_custom_metrics) \\r\\n| extend duration_value=d.duration.value, duration_min=d[\"duration\"][\"min\"]\\r\\n```\\r\\n\\r\\n**Notes**\\r\\n\\r\\nIt\\'s common to have a JSON string describing a property bag in which\\r\\none of the \"slots\" is another JSON string. \\r\\n\\r\\nFor example:\\r\\n\\r\\n```\\r\\nlet d=\\'{\"a\":123, \"b\":\"{\\\\\\\\\"c\\\\\\\\\":456}\"}\\';\\r\\nprint d\\r\\n```\\r\\n\\r\\nIn such cases, it isn\\'t only necessary to invoke `parse_json` twice, but also\\r\\nto make sure that in the second call, `tostring` is used. Otherwise, the\\r\\nsecond call to `parse_json` will just pass on the input to the output as-is,\\r\\nbecause its declared type is `dynamic`.\\r\\n\\r\\n```\\r\\nlet d=\\'{\"a\":123, \"b\":\"{\\\\\\\\\"c\\\\\\\\\":456}\"}\\';\\r\\nprint d_b_c=parse_json(tostring(parse_json(d).b)).c\\r\\n```',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/parsejsonfunction\",\"parsejsonfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"toguid\",\"Converts a string to a [`guid`](./scalar-data-types/guid.md) scalar.\",\"> [!NOTE]\\r\\n> If you have a hard-coded guid, we recommend using [guid()](./scalar-data-types/guid.md).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`toguid(`*Expr*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *Expr*: Expression that will be converted to [`guid`](./scalar-data-types/guid.md) scalar. \\r\\n\\r\\n## Returns\\r\\n\\r\\nThe conversion process takes the first 32 characters of the input, ignoring properly located hyphens, validates that the characters are between 0-9 or a-f, and then converts the string into a [`guid`](./scalar-data-types/guid.md) scalar. The rest of the string is ignored.\\r\\n\\r\\n* If the conversion is successful, the result will be a [`guid`](./scalar-data-types/guid.md) scalar.\\r\\n* Otherwise, the result will be `null`.\",'```\\r\\ndatatable(str: string)\\r\\n[\\r\\n    \"0123456789abcdef0123456789abcdef\",\\r\\n    \"0123456789ab-cdef-0123-456789abcdef\",\\r\\n    \"a string that is not a guid\"\\r\\n]\\r\\n| extend guid = toguid(str)\\r\\n```\\r\\n\\r\\n**Output**:\\r\\n\\r\\n|str|guid|\\r\\n|---|---|\\r\\n|0123456789abcdef0123456789abcdef|01234567-89ab-cdef-0123-456789abcdef|\\r\\n|0123456789ab-cdef-0123-456789abcdef|01234567-89ab-cdef-0123-456789abcdef|\\r\\n|a string that is not a guid||',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/toguidfunction\",\"toguidfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"tohex\",\"Converts input to a hexadecimal string.\",\"```\\r\\ntohex(256) == '100'\\r\\ntohex(-256) == 'ffffffffffffff00' // 64-bit 2's complement of -256\\r\\ntohex(toint(-256), 8) == 'ffffff00' // 32-bit 2's complement of -256\\r\\ntohex(256, 8) == '00000100'\\r\\ntohex(256, 2) == '100' // Exceeds min length of 2, so min length is ignored.\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`tohex(`*Expr*`, [`,` *MinLength*]`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *Expr*: int or long value that will be converted to a hex string.  Other types are not supported.\\r\\n* *MinLength*: numeric value representing the number of leading characters to include in the output.  Values between 1 and 16 are supported, values greater than 16 will be truncated to 16.  If the string is longer than minLength without leading characters, then minLength is effectively ignored.  Negative numbers may only be represented at minimum by their underlying data size, so for an int (32-bit) the minLength will be at minimum 8, for a long (64-bit) it will be at minimum 16.\\r\\n\\r\\n## Returns\\r\\n\\r\\nIf conversion is successful, result will be a string value.\\r\\nIf conversion is not successful, result will be null.\",\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/tohexfunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"toint\",\"Converts input to integer (signed 32-bit) number representation.\",'```\\r\\ntoint(\"123\") == int(123)\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`toint(`*Expr*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *Expr*: Expression that will be converted to integer. \\r\\n\\r\\n## Returns\\r\\n\\r\\nIf the conversion is successful, the result will be an integer.\\r\\nIf the conversion isn\\'t successful, the result will be `null`.\\r\\n\\r\\n*Note*: Prefer using [int()](./scalar-data-types/int.md) when possible.',\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/tointfunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"tolong\",\"Converts input to long (signed 64-bit) number representation.\",'```\\r\\ntolong(\"123\") == 123\\r\\n```\\r\\n\\r\\n> [!NOTE]\\r\\n> Prefer using [long()](./scalar-data-types/long.md) when possible.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`tolong(`*Expr*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *Expr*: Expression that will be converted to long. \\r\\n\\r\\n## Returns\\r\\n\\r\\nIf conversion is successful, result will be a long number.\\r\\nIf conversion is not successful, result will be `null`.',\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/tolongfunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"tolower\",\"Converts input string to lower case.\",'```\\r\\ntolower(\"Hello\") == \"hello\"\\r\\n```',\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/tolowerfunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"top\",\"Returns the first *N* records sorted by the specified columns.\",'```\\r\\nT | top 5 by Name desc nulls last\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `| top` *NumberOfRows* `by` *Expression* [`asc` | `desc`] [`nulls first` | `nulls last`]\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *NumberOfRows*: The number of rows of *T* to return. You can specify any numeric expression.\\r\\n* *Expression*: A scalar expression by which to sort. The type of the values must be numeric, date, time or string.\\r\\n* `asc` or `desc` (the default) may appear to control whether selection is actually from the \"bottom\" or \"top\" of the range.\\r\\n* `nulls first` (the default for `asc` order) or `nulls last` (the default for `desc` order) may appear to control whether null values will be at the beginning or the end of the range.\\r\\n\\r\\n> [!TIP]\\r\\n> `top 5 by name` is equivalent to the expression `sort by name | take 5` both from semantic and performance perspectives.\\r\\n\\r\\n## See also \\r\\n\\r\\n* Use [top-nested](topnestedoperator.md) operator to produce hierarchical (nested) top results.',\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/topoperator\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"top-hitters\",\"Returns an approximation for the most popular distinct values, or the values\\r\\nwith the largest sum, in the input.\",\"```\\r\\nEvents | top-hitters 5 of EventId\\r\\nPageViews | top-hitters 25 of Page by NumViews\\r\\n```\\r\\n\\r\\n> [!NOTE]\\r\\n> `top-hitters` uses an approximation algorithm optimized for performance\\r\\n> when the input data is large.\\r\\n> The approximation is based on the [Count-Min-Sketch](https://en.wikipedia.org/wiki/Count%E2%80%93min_sketch) algorithm.  \\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `top-hitters` *NumberOfValues* `of` *ValueExpression*\\r\\n\\r\\n*T* `|` `top-hitters` *NumberOfValues* `of` *ValueExpression* `by` *SummingExpression*\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *NumberOfValues*: The number of distinct values of *ValueExpression*.\\r\\n  Expressions of type `int`, `long`, and `real` are valid (rounded down).\\r\\n* *ValueExpression*: An expression over the input table *T* whose distinct\\r\\n  values are returned.\\r\\n* *SummingExpression*: If specified, a numeric expression over the input table *T*\\r\\n  whose sum per distinct value of *ValueExpression* establishes which values\\r\\n  to emit. If not specified, the count of each distinct value of *ValueExpression*\\r\\n  will be used instead.\\r\\n\\r\\n## Remarks\\r\\n\\r\\nThe first syntax (no *SummingExpression*) is conceptually equivalent to:\\r\\n\\r\\n*T*\\r\\n`|` `summarize` `C``=``count()` `by` *ValueExpression*\\r\\n`|` `top` *NumberOfValues* by `C` `desc`\\r\\n\\r\\nThe second syntax (with *SummingExpression*) is conceptually equivalent to:\\r\\n\\r\\n*T*\\r\\n`|` `summarize` `S``=``sum(*SummingExpression*)` `by` *ValueExpression*\\r\\n`|` `top` *NumberOfValues* by `S` `desc`\",\"### Get most frequent items\\r\\n\\r\\nThe next example shows how to find top-5 languages with most pages in Wikipedia (accessed after during April 2016).\\r\\n\\r\\n```\\r\\nPageViews\\r\\n| where Timestamp > datetime(2016-04-01) and Timestamp < datetime(2016-05-01) \\r\\n| top-hitters 5 of Language \\r\\n```\\r\\n\\r\\n|Language|approximate_count_Language|\\r\\n|---|---|\\r\\n|en|1539954127|\\r\\n|zh|339827659|\\r\\n|de|262197491|\\r\\n|ru|227003107|\\r\\n|fr|207943448|\\r\\n\\r\\n### Get top hitters based on column value\\r\\n\\r\\nThe next example shows how to find most viewed English pages of Wikipedia of the year 2016.\\r\\nThe query uses 'Views' (integer number) to calculate page popularity (number of views).\\r\\n\\r\\n```\\r\\nPageViews\\r\\n| where Timestamp > datetime(2016-01-01)\\r\\n| where Language == \\\"en\\\"\\r\\n| where Page !has 'Special'\\r\\n| top-hitters 10 of Page by Views\\r\\n```\\r\\n\\r\\n|Page|approximate_sum_Views|\\r\\n|---|---|\\r\\n|Main_Page|1325856754|\\r\\n|Web_scraping|43979153|\\r\\n|Java_(programming_language)|16489491|\\r\\n|United_States|13928841|\\r\\n|Wikipedia|13584915|\\r\\n|Donald_Trump|12376448|\\r\\n|YouTube|11917252|\\r\\n|The_Revenant_(2015_film)|10714263|\\r\\n|Star_Wars:_The_Force_Awakens|9770653|\\r\\n|Portal:Current_events|9578000|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/tophittersoperator\",\"tophittersoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"top-nested\",\"Produces a hierarchical aggregation and top values selection, where each level is a refinement of the previous one.\",'```\\r\\nT | top-nested 3 of Location with others=\"Others\" by sum(MachinesNumber), top-nested 4 of bin(Timestamp,5m) by sum(MachinesNumber)\\r\\n```\\r\\n\\r\\nThe `top-nested` operator accepts tabular data as input, and one or more aggregation clauses.\\r\\nThe first aggregation clause (left-most) subdivides the input records into partitions, according\\r\\nto the unique values of some expression over those records. The clause then keeps a certain number of records\\r\\nthat maximize or minimize this expression over the records. The next aggregation clause then\\r\\napplies a similar function, in a nested fashion. Each following clause is applied to the partition produced\\r\\nby the previous clause. This process continues for all aggregation clauses.\\r\\n\\r\\nFor example, the `top-nested` operator can be used to answer the following question: \"For a table containing sales\\r\\nfigures, such as country, salesperson, and amount sold: what are the top five countries by sales? What are the top three salespeople in each of these countries?\"\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `|` `top-nested` *TopNestedClause* [`,` `top-nested` *TopNestedClause2*]...\\r\\n\\r\\nWhere *TopNestedClause* has the following syntax:\\r\\n\\r\\n[*N*] `of` [*`ExprName`* `=`] *`Expr`* [`with` `others` `=` *`ConstExpr`*] `by` [*`AggName`* `=`] *`Aggregation`* [`asc` | `desc`]\\r\\n\\r\\n## Arguments\\r\\n\\r\\nFor each *TopNestedClause*:\\r\\n\\r\\n* *`N`*: A literal of type `long` indicating how many top values to return\\r\\n  for this hierarchy level.\\r\\n  If omitted, all distinct values will be returned.\\r\\n* *`ExprName`*: If specified, sets the name of the output column corresponding\\r\\n  to the values of *`Expr`*.\\r\\n* *`Expr`*: An expression over the input record indicating which value to return\\r\\n  for this hierarchy level.\\r\\n  Typically it\\'s a column reference for the tabular input (*T*), or some\\r\\n  calculation (such as `bin()`) over such a column.\\r\\n* *`ConstExpr`*: If specified, for each hierarchy level, 1 record will be added\\r\\n  with the value that is the aggregation over all records that didn\\'t\\r\\n  \"make it to the top\".\\r\\n* *`AggName`*: If specified, this identifier sets the column name\\r\\n  in the output for the value of *Aggregation*.\\r\\n* *`Aggregation`*: A numeric expression indicating the aggregation to apply\\r\\n  to all records sharing the same value of *`Expr`*. The value of this aggregation\\r\\n  determines which of the resulting records are \"top\".\\r\\n  \\r\\n  The following aggregation functions are supported:\\r\\n   * [sum()](sum-aggfunction.md),\\r\\n   * [count()](count-aggfunction.md),\\r\\n   * [max()](max-aggfunction.md),\\r\\n   * [min()](min-aggfunction.md),\\r\\n   * [dcount()](dcountif-aggfunction.md),\\r\\n   * [avg()](avg-aggfunction.md),\\r\\n   * [percentile()](percentiles-aggfunction.md), and\\r\\n   * [percentilew()](percentiles-aggfunction.md). Any algebraic combination of the aggregations is also supported.\\r\\n* `asc` or `desc` (the default) may appear to control whether selection is actually from the \"bottom\" or \"top\" of the range of aggregated values.\\r\\n\\r\\n## Returns\\r\\n\\r\\nThis operator returns a table that has two columns for each aggregation clause:\\r\\n\\r\\n* One column holds the distinct values of the clause\\'s *`Expr`* calculation (having the\\r\\n  column name *ExprName* if specified)\\r\\n* One column holds the result of the *Aggregation*\\r\\n  calculation (having the column name *AggregationName* if specified)\\r\\n\\r\\n## Notes\\r\\n\\r\\nInput columns that aren\\'t specified as *`Expr`* values aren\\'t outputted.\\r\\nTo get all values at a certain level, add an aggregation count that:\\r\\n\\r\\n* Omits the value of *N*\\r\\n* Uses the column name as the value of *`Expr`*\\r\\n* Uses `Ignore=max(1)` as the aggregation, and then ignore (or project-away)\\r\\n   the column `Ignore`.\\r\\n\\r\\nThe number of records may grow exponentially with the number of aggregation clauses\\r\\n((N1+1) \\\\* (N2+1) \\\\* ...). Record growth is even faster if no *N* limit is specified. Take into account that this operator may consume a considerable amount of resources.\\r\\n\\r\\nIf the distribution of the aggregation is considerably non-uniform,\\r\\nlimit the number of distinct values to return (by using *N*) and use the\\r\\n`with others=` *ConstExpr* option to get an indication for the \"weight\" of all other\\r\\ncases.',\"```\\r\\nStormEvents\\r\\n| top-nested 2 of State       by sum(BeginLat),\\r\\n  top-nested 3 of Source      by sum(BeginLat),\\r\\n  top-nested 1 of EndLocation by sum(BeginLat)\\r\\n```\\r\\n\\r\\n|State|aggregated_State|Source|aggregated_Source|EndLocation|aggregated_EndLocation|\\r\\n|---|---|---|---|---|---|\\r\\n|KANSAS|87771.2355000001|Law Enforcement|18744.823|FT SCOTT|264.858|\\r\\n|KANSAS|87771.2355000001|Public|22855.6206|BUCKLIN|488.2457|\\r\\n|KANSAS|87771.2355000001|Trained Spotter|21279.7083|SHARON SPGS|388.7404|\\r\\n|TEXAS|123400.5101|Public|13650.9079|AMARILLO|246.2598|\\r\\n|TEXAS|123400.5101|Law Enforcement|37228.5966|PERRYTON|289.3178|\\r\\n|TEXAS|123400.5101|Trained Spotter|13997.7124|CLAUDE|421.44|\\r\\n\\r\\nUse the option 'with others':\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| top-nested 2 of State with others = \\\"All Other States\\\" by sum(BeginLat),\\r\\n  top-nested 3 of Source by sum(BeginLat),\\r\\n  top-nested 1 of EndLocation with others = \\\"All Other End Locations\\\" by sum(BeginLat)\\r\\n```\\r\\n\\r\\n|State|aggregated_State|Source|aggregated_Source|EndLocation|aggregated_EndLocation|\\r\\n|---|---|---|---|---|---|\\r\\n|KANSAS|87771.2355000001|Law Enforcement|18744.823|FT SCOTT|264.858|\\r\\n|KANSAS|87771.2355000001|Public|22855.6206|BUCKLIN|488.2457|\\r\\n|KANSAS|87771.2355000001|Trained Spotter|21279.7083|SHARON SPGS|388.7404|\\r\\n|TEXAS|123400.5101|Public|13650.9079|AMARILLO|246.2598|\\r\\n|TEXAS|123400.5101|Law Enforcement|37228.5966|PERRYTON|289.3178|\\r\\n|TEXAS|123400.5101|Trained Spotter|13997.7124|CLAUDE|421.44|\\r\\n|KANSAS|87771.2355000001|Law Enforcement|18744.823|All Other End Locations|18479.965|\\r\\n|KANSAS|87771.2355000001|Public|22855.6206|All Other End Locations|22367.3749|\\r\\n|KANSAS|87771.2355000001|Trained Spotter|21279.7083|All Other End Locations|20890.9679|\\r\\n|TEXAS|123400.5101|Public|13650.9079|All Other End Locations|13404.6481|\\r\\n|TEXAS|123400.5101|Law Enforcement|37228.5966|All Other End Locations|36939.2788|\\r\\n|TEXAS|123400.5101|Trained Spotter|13997.7124|All Other End Locations|13576.2724|\\r\\n|KANSAS|87771.2355000001|||All Other End Locations|24891.0836|\\r\\n|TEXAS|123400.5101|||All Other End Locations|58523.2932000001|\\r\\n|All Other States|1149279.5923|||All Other End Locations|1149279.5923|\\r\\n\\r\\nThe following query shows the same results for the first level used in the example above.\\r\\n\\r\\n```\\r\\n StormEvents\\r\\n | where State !in ('TEXAS', 'KANSAS')\\r\\n | summarize sum(BeginLat)\\r\\n```\\r\\n\\r\\n|sum_BeginLat|\\r\\n|---|\\r\\n|1149279.5923|\\r\\n\\r\\nRequest another column (EventType) to the top-nested result.\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| top-nested 2 of State       by sum(BeginLat),\\r\\n  top-nested 2 of Source      by sum(BeginLat),\\r\\n  top-nested 1 of EndLocation by sum(BeginLat),\\r\\n  top-nested   of EventType   by tmp = max(1)\\r\\n| project-away tmp\\r\\n```\\r\\n\\r\\n|State|aggregated_State|Source|aggregated_Source|EndLocation|aggregated_EndLocation|EventType|\\r\\n|---|---|---|---|---|---|---|\\r\\n|KANSAS|87771.2355000001|Trained Spotter|21279.7083|SHARON SPGS|388.7404|Thunderstorm Wind|\\r\\n|KANSAS|87771.2355000001|Trained Spotter|21279.7083|SHARON SPGS|388.7404|Hail|\\r\\n|KANSAS|87771.2355000001|Trained Spotter|21279.7083|SHARON SPGS|388.7404|Tornado|\\r\\n|KANSAS|87771.2355000001|Public|22855.6206|BUCKLIN|488.2457|Hail|\\r\\n|KANSAS|87771.2355000001|Public|22855.6206|BUCKLIN|488.2457|Thunderstorm Wind|\\r\\n|KANSAS|87771.2355000001|Public|22855.6206|BUCKLIN|488.2457|Flood|\\r\\n|TEXAS|123400.5101|Trained Spotter|13997.7124|CLAUDE|421.44|Hail|\\r\\n|TEXAS|123400.5101|Law Enforcement|37228.5966|PERRYTON|289.3178|Hail|\\r\\n|TEXAS|123400.5101|Law Enforcement|37228.5966|PERRYTON|289.3178|Flood|\\r\\n|TEXAS|123400.5101|Law Enforcement|37228.5966|PERRYTON|289.3178|Flash Flood|\\r\\n\\r\\nGive an index sort order for each value in this level (per group) to sort the result by the last nested level (in this example by EndLocation):\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| top-nested 2 of State  by sum(BeginLat),    top-nested 2 of Source by sum(BeginLat),    top-nested 4 of EndLocation by  sum(BeginLat)\\r\\n| order by State , Source, aggregated_EndLocation\\r\\n| summarize EndLocations = make_list(EndLocation, 10000) , endLocationSums = make_list(aggregated_EndLocation, 10000) by State, Source\\r\\n| extend indicies = range(0, array_length(EndLocations) - 1, 1)\\r\\n| mv-expand EndLocations, endLocationSums, indicies\\r\\n```\\r\\n\\r\\n|State|Source|EndLocations|endLocationSums|indices|\\r\\n|---|---|---|---|---|\\r\\n|TEXAS|Trained Spotter|CLAUDE|421.44|0|\\r\\n|TEXAS|Trained Spotter|AMARILLO|316.8892|1|\\r\\n|TEXAS|Trained Spotter|DALHART|252.6186|2|\\r\\n|TEXAS|Trained Spotter|PERRYTON|216.7826|3|\\r\\n|TEXAS|Law Enforcement|PERRYTON|289.3178|0|\\r\\n|TEXAS|Law Enforcement|LEAKEY|267.9825|1|\\r\\n|TEXAS|Law Enforcement|BRACKETTVILLE|264.3483|2|\\r\\n|TEXAS|Law Enforcement|GILMER|261.9068|3|\\r\\n|KANSAS|Trained Spotter|SHARON SPGS|388.7404|0|\\r\\n|KANSAS|Trained Spotter|ATWOOD|358.6136|1|\\r\\n|KANSAS|Trained Spotter|LENORA|317.0718|2|\\r\\n|KANSAS|Trained Spotter|SCOTT CITY|307.84|3|\\r\\n|KANSAS|Public|BUCKLIN|488.2457|0|\\r\\n|KANSAS|Public|ASHLAND|446.4218|1|\\r\\n|KANSAS|Public|PROTECTION|446.11|2|\\r\\n|KANSAS|Public|MEADE STATE PARK|371.1|3|\\r\\n\\r\\nThe following example returns the two most-recent events\\r\\nfor each US state, with some information per event.\\r\\nNote the use of the `max(1)` (which is then projected away)\\r\\nfor columns which just require propagation through the operator\\r\\nwithout any selection logic.\\r\\n\\r\\n```\\r\\nStormEvents\\r\\n| top-nested of State by Ignore0=max(1),\\r\\n  top-nested 2 of StartTime by Ignore1=max(StartTime),\\r\\n  top-nested of EndTime by Ignore2=max(1),\\r\\n  top-nested of EpisodeId by Ignore3=max(1)\\r\\n| project-away Ignore*\\r\\n| order by State asc, StartTime desc\\r\\n```\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/topnestedoperator\",\"topnestedoperator.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"toscalar\",\"Returns a scalar constant value of the evaluated expression.\",\"This function is useful for queries that require staged calculations. For example,\\r\\ncalculate a total count of events, and then use the result to filter groups\\r\\nthat exceed a certain percent of all events. \\r\\n\\r\\nAny two statements must be separated by a semicolon.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`toscalar(`*Expression*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *Expression*: Expression that will be evaluated for scalar conversion.\\r\\n\\r\\n## Returns\\r\\n\\r\\nA scalar constant value of the evaluated expression.\\r\\nIf the result is a tabular, then the first column and first row will be taken for conversion.\\r\\n\\r\\n> [!TIP]\\r\\n> You can use a [let statement](letstatement.md) for readability of the query when using `toscalar()`.\\r\\n\\r\\n**Notes**\\r\\n\\r\\n`toscalar()` can be calculated a constant number of times during the query execution.\\r\\nThe `toscalar()` function can't be applied on row-level (for-each-row scenario).\",'Evaluate `Start`, `End`, and `Step` as scalar constants, and use the result for `range` evaluation.\\r\\n\\r\\n```\\r\\nlet Start = toscalar(print x=1);\\r\\nlet End = toscalar(range x from 1 to 9 step 1 | count);\\r\\nlet Step = toscalar(2);\\r\\nrange z from Start to End step Step | extend start=Start, end=End, step=Step\\r\\n```\\r\\n\\r\\n|z|start|end|step|\\r\\n|---|---|---|---|\\r\\n|1|1|9|2|\\r\\n|3|1|9|2|\\r\\n|5|1|9|2|\\r\\n|7|1|9|2|\\r\\n|9|1|9|2|\\r\\n\\r\\nThe following example shows how `toscalar` can be used to \"fix\" an expression\\r\\nso that it\\'ll be calculated precisely once. In this case, the expression being\\r\\ncalculated returns a different value per evaluation. \\r\\n\\r\\n```\\r\\nlet g1 = toscalar(new_guid());\\r\\nlet g2 = new_guid();\\r\\nrange x from 1 to 2 step 1\\r\\n| extend x=g1, y=g2\\r\\n```\\r\\n\\r\\n|x|y|\\r\\n|---|---|\\r\\n|e6a15e72-756d-4c93-93d3-fe85c18d19a3|c2937642-0d30-4b98-a157-a6706e217620|\\r\\n|e6a15e72-756d-4c93-93d3-fe85c18d19a3|c6a48cb3-9f98-4670-bf5b-589d0e0dcaf5|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/toscalarfunction\",\"toscalarfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"tostring\",\"Converts input to a string representation.\",'```\\r\\ntostring(123) == \"123\"\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`tostring(`*`Expr`*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *`Expr`*: Expression that will be converted to string. \\r\\n\\r\\n## Returns\\r\\n\\r\\nIf the *`Expr`* value is non-null, the result will be a string representation of *`Expr`*.\\r\\nIf the *`Expr`* value is null, the result will be an empty string.',\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/tostringfunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"totimespan\",\"Converts input to [timespan](./scalar-data-types/timespan.md) scalar.\",'```\\r\\ntotimespan(\"0.00:01:00\") == time(1min)\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`totimespan(Expr)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *`Expr`*: Expression that will be converted to [timespan](./scalar-data-types/timespan.md).\\r\\n\\r\\n## Returns\\r\\n\\r\\nIf conversion is successful, result will be a [timespan](./scalar-data-types/timespan.md) value.\\r\\nElse, result will be null.',\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/totimespanfunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"toupper\",\"Converts a string to upper case.\",'```\\r\\ntoupper(\"hello\") == \"HELLO\"\\r\\n```',\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/toupperfunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"translate\",\"Replaces a set of characters ('searchList') with another set of characters ('replacementList') in a given a string.\\r\\nThe function searches for characters in the 'searchList' and replaces them with the corresponding characters in 'replacementList'\",\"## Syntax\\r\\n\\r\\n`translate(`*searchList*`,` *replacementList*`,` *source*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *searchList*: The list of characters that should be replaced\\r\\n* *replacementList*: The list of characters that should replace the characters in 'searchList'\\r\\n* *source*: A string to search\\r\\n\\r\\n## Returns\\r\\n\\r\\n*source* after replacing all ocurrences of characters in 'replacementList' with the corresponding characters in 'searchList'\",'|Input                                 |Output   |\\r\\n|--------------------------------------|---------|\\r\\n|`translate(\"abc\", \"x\", \"abc\")`        |`\"xxx\"`  |\\r\\n|`translate(\"abc\", \"\", \"ab\")`          |`\"\"`     |\\r\\n|`translate(\"krasp\", \"otsku\", \"spark\")`|`\"kusto\"`|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/translatefunction\",\"translatefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"treepath\",\"Enumerates all the path expressions that identify leaves in a dynamic object.\",\"`treepath(`*dynamic object*`)`\\r\\n\\r\\n## Returns\\r\\n\\r\\nAn array of path expressions.\",'|Expression|Evaluates to|\\r\\n|---|---|\\r\\n|`treepath(parse_json(\\'{\"a\":\"b\", \"c\":123}\\'))` | `[\"[\\'a\\']\",\"[\\'c\\']\"]`|\\r\\n|`treepath(parse_json(\\'{\"prop1\":[1,2,3,4], \"prop2\":\"value2\"}\\'))`|`[\"[\\'prop1\\']\",\"[\\'prop1\\'][0]\",\"[\\'prop2\\']\"]`|\\r\\n|`treepath(parse_json(\\'{\"listProperty\":[100,200,300,\"abcde\",{\"x\":\"y\"}]}\\'))`|`[\"[\\'listProperty\\']\",\"[\\'listProperty\\'][0]\",\"[\\'listProperty\\'][0][\\'x\\']\"]`|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/treepathfunction\",\"treepathfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"trim\",\"Removes all leading and trailing matches of the specified regular expression.\",\"## Syntax\\r\\n\\r\\n`trim(`*regex*`,` *source*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *regex*: String or [regular expression](re2.md) to be trimmed from the beginning and/or the end of *source*.  \\r\\n* *source*: A string.\\r\\n\\r\\n## Returns\\r\\n\\r\\n*source* after trimming matches of *regex* found in the beginning and/or the end of *source*.\",'Statement bellow trims *substring*  from the start and the end of the *string_to_trim*:\\r\\n\\r\\n```\\r\\nlet string_to_trim = @\"--https://bing.com--\";\\r\\nlet substring = \"--\";\\r\\nprint string_to_trim = string_to_trim, trimmed_string = trim(substring,string_to_trim)\\r\\n```\\r\\n\\r\\n|string_to_trim|trimmed_string|\\r\\n|---|---|\\r\\n|--https://bing.com--|https://bing.com|\\r\\n\\r\\nNext statement trims all non-word characters from start and end of the string:\\r\\n\\r\\n```\\r\\nrange x from 1 to 5 step 1\\r\\n| project str = strcat(\"-  \",\"Te st\",x,@\"// $\")\\r\\n| extend trimmed_str = trim(@\"[^\\\\w]+\",str)\\r\\n```\\r\\n\\r\\n|str|trimmed_str|\\r\\n|---|---|\\r\\n|-  Te st1// $|Te st1|\\r\\n|-  Te st2// $|Te st2|\\r\\n|-  Te st3// $|Te st3|\\r\\n|-  Te st4// $|Te st4|\\r\\n|-  Te st5// $|Te st5|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/trimfunction\",\"trimfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"trim_end\",\"Removes trailing match of the specified regular expression.\",\"## Syntax\\r\\n\\r\\n`trim_end(`*regex*`,` *source*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *regex*: String or [regular expression](re2.md) to be trimmed from the end of *source*.  \\r\\n* *source*: A string.\\r\\n\\r\\n## Returns\\r\\n\\r\\n*source* after trimming matches of *regex* found in the end of *source*.\",'Statement bellow trims *substring*  from the end of *string_to_trim*:\\r\\n\\r\\n```\\r\\nlet string_to_trim = @\"bing.com\";\\r\\nlet substring = \".com\";\\r\\nprint string_to_trim = string_to_trim,trimmed_string = trim_end(substring,string_to_trim)\\r\\n```\\r\\n\\r\\n|string_to_trim|trimmed_string|\\r\\n|--------------|--------------|\\r\\n|bing.com      |bing          |\\r\\n\\r\\nNext statement trims all non-word characters from the end of the string:\\r\\n\\r\\n```\\r\\nprint str = strcat(\"-  \",\"Te st\",x,@\"// $\")\\r\\n| extend trimmed_str = trim_end(@\"[^\\\\w]+\",str)\\r\\n```\\r\\n\\r\\n|str          |trimmed_str|\\r\\n|-------------|-----------|\\r\\n|-  Te st1// $|-  Te st1  |\\r\\n|-  Te st2// $|-  Te st2  |\\r\\n|-  Te st3// $|-  Te st3  |\\r\\n|-  Te st4// $|-  Te st4  |\\r\\n|-  Te st5// $|-  Te st5  |',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/trimendfunction\",\"trimendfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"trim_start\",\"Removes leading match of the specified regular expression.\",\"## Syntax\\r\\n\\r\\n`trim_start(`*regex*`,` *source*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *regex*: String or [regular expression](re2.md) to be trimmed from the beginning of *source*.  \\r\\n* *source*: A string.\\r\\n\\r\\n## Returns\\r\\n\\r\\n*source* after trimming match of *regex* found in the beginning of *source*.\",'Statement bellow trims *substring*  from the start of *string_to_trim*:\\r\\n\\r\\n```\\r\\nlet string_to_trim = @\"https://bing.com\";\\r\\nlet substring = \"https://\";\\r\\nprint string_to_trim = string_to_trim,trimmed_string = trim_start(substring,string_to_trim)\\r\\n```\\r\\n\\r\\n|string_to_trim|trimmed_string|\\r\\n|---|---|\\r\\n|https://bing.com|bing.com|\\r\\n\\r\\nNext statement trims all non-word characters from the beginning of the string:\\r\\n\\r\\n```\\r\\nrange x from 1 to 5 step 1\\r\\n| project str = strcat(\"-  \",\"Te st\",x,@\"// $\")\\r\\n| extend trimmed_str = trim_start(@\"[^\\\\w]+\",str)\\r\\n```\\r\\n\\r\\n|str|trimmed_str|\\r\\n|---|---|\\r\\n|-  Te st1// $|Te st1// $|\\r\\n|-  Te st2// $|Te st2// $|\\r\\n|-  Te st3// $|Te st3// $|\\r\\n|-  Te st4// $|Te st4// $|\\r\\n|-  Te st5// $|Te st5// $|',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/trimstartfunction\",\"trimstartfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"union\",\"Takes two or more tables and returns the rows of all of them.\",'```\\r\\nTable1 | union Table2, Table3\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `| union` [*UnionParameters*] [`kind=` `inner`|`outer`] [`withsource=`*ColumnName*] [`isfuzzy=` `true`|`false`] *Table* [`,` *Table*]...  \\r\\n\\r\\nAlternative form with no piped input:\\r\\n\\r\\n`union` [*UnionParameters*] [`kind=` `inner`|`outer`] [`withsource=`*ColumnName*] [`isfuzzy=` `true`|`false`] *Table* [`,` *Table*]...  \\r\\n\\r\\n## Arguments\\r\\n\\r\\n* `Table`:\\r\\n    *  The name of a table, such as `Events`; or\\r\\n    *  A query expression that must be enclosed with parenthesis, such as `(Events | where id==42)` or `(cluster(\"https://help.kusto.windows.net\").database(\"Samples\").table(\"*\"))`; or\\r\\n    *  A set of tables specified with a wildcard. For example, `E*` would form the union of all the tables in the database whose names begin `E`.\\r\\n* `kind`: \\r\\n    * `inner` - The result has the subset of columns that are common to all of the input tables.\\r\\n    * `outer` - (default). The result has all the columns that occur in any of the inputs. Cells that weren\\'t defined by an input row are set to `null`.\\r\\n* `withsource`=*ColumnName*: If specified, the output will include a column\\r\\ncalled *ColumnName* whose value indicates which source table has contributed each row.\\r\\nIf the query effectively (after wildcard matching) references tables from more than one database (default database always counts) the value of this column will have a table name qualified with the database.\\r\\nSimilarly __cluster and database__ qualifications will be present in the value if more than one cluster is referenced. \\r\\n* `isfuzzy=` `true` | `false`: If `isfuzzy` is set to `true` - allows fuzzy resolution of union legs. `Fuzzy` applies to the set of `union` sources. It means that while analyzing the query and preparing for execution, the set of union sources is reduced to the set of table references that exist and are accessible at the time. If at least one such table was found, any resolution failure will yield a warning in the query status results (one for each missing reference), but will not prevent the query execution; if no resolutions were successful - the query will return an error.\\r\\nThe default is `isfuzzy=` `false`.\\r\\n* *UnionParameters*: Zero or more (space-separated) parameters in the form of\\r\\n  *Name* `=` *Value* that control the behavior\\r\\n  of the row-match operation and execution plan. The following parameters are supported: \\r\\n  |Name           |Values                                        |Description                                  |\\r\\n  |---------------|----------------------------------------------|---------------------------------------------|\\r\\n  |`hint.concurrency`|*Number*|Hints the system how many concurrent subqueries of the `union` operator should be executed in parallel. *Default*: Amount of CPU cores on the single node of the cluster (2 to 16).|\\r\\n  |`hint.spread`|*Number*|Hints the system how many nodes should be used by the concurrent `union` subqueries execution. *Default*: 1.|\\r\\n\\r\\n\\r\\n## Returns\\r\\n\\r\\nA table with as many rows as there are in all the input tables.\\r\\n\\r\\n**Notes**\\r\\n\\r\\n1. `union` scope can include [let statements](./letstatement.md) if those are \\r\\nattributed with [view keyword](./letstatement.md)\\r\\n2. `union` scope will not include [functions](../management/functions.md). To include a function in the union scope, define a [let statement](./letstatement.md) with [view keyword](./letstatement.md)\\r\\n3. If the `union` input is [tables](../management/tables.md) (as opposed to [tabular expressions](./tabularexpressionstatements.md)), and the `union` is followed by a [where operator](./whereoperator.md), for better performance, consider replacing both with [find](./findoperator.md). Note the different [output schema](./findoperator.md#output-schema) produced by the `find` operator. \\r\\n4. `isfuzzy=true` only applies to the `union` sources resolution phase. Once the set of source tables is determined, possible additional query failures will not be suppressed.\\r\\n5. When using `outer union`, the result has all the columns that occur in any of the inputs, one column for each name and type occurrences. This means that if a column appears in multiple tables and has multiple types, it will have a corresponding column for each type in the `union`\\'s result. This column name will be suffixed with a \\'_\\' followed by the origin column [type](./scalar-data-types/index.md).\\r\\n6. There is no guarantee of the order in which the union legs will appear (but if each leg has an `order by` operator, then each leg will be sorted).\\r\\n7. Any two statements must be separated by a semicolon.\\r\\n\\r\\n\\r\\n## Example: Tables with string in name or column\\r\\n\\r\\n```\\r\\nunion K* | where * has \"Kusto\"\\r\\n```\\r\\n\\r\\nRows from all tables in the database whose name starts with `K`, and in which any column includes the word `Kusto`.\\r\\n\\r\\n## Example: Distinct count\\r\\n\\r\\n```\\r\\nunion withsource=SourceTable kind=outer Query, Command\\r\\n| where Timestamp > ago(1d)\\r\\n| summarize dcount(UserId)\\r\\n```\\r\\n\\r\\nThe number of distinct users that have produced\\r\\neither a `Query` event or a `Command` event over the past day. In the result, the \\'SourceTable\\' column will indicate either \"Query\" or \"Command\".\\r\\n\\r\\n```\\r\\nQuery\\r\\n| where Timestamp > ago(1d)\\r\\n| union withsource=SourceTable kind=outer \\r\\n   (Command | where Timestamp > ago(1d))\\r\\n| summarize dcount(UserId)\\r\\n```\\r\\n\\r\\nThis more efficient version produces the same result. It filters each table before creating the union.\\r\\n\\r\\n**Example: Using `isfuzzy=true`**\\r\\n\\r\\n```\\r\\n// Using union isfuzzy=true to access non-existing view:                                     \\r\\nlet View_1 = view () { print x=1 };\\r\\nlet View_2 = view () { print x=1 };\\r\\nlet OtherView_1 = view () { print x=1 };\\r\\nunion isfuzzy=true\\r\\n(View_1 | where x > 0), \\r\\n(View_2 | where x > 0),\\r\\n(View_3 | where x > 0)\\r\\n| count \\r\\n```\\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|2|\\r\\n\\r\\nObserving Query Status - the following warning returned:\\r\\n`Failed to resolve entity \\'View_3\\'`\\r\\n\\r\\n```\\r\\n// Using union isfuzzy=true and wildcard access:\\r\\nlet View_1 = view () { print x=1 };\\r\\nlet View_2 = view () { print x=1 };\\r\\nlet OtherView_1 = view () { print x=1 };\\r\\nunion isfuzzy=true View*, SomeView*, OtherView*\\r\\n| count \\r\\n```\\r\\n\\r\\n|Count|\\r\\n|---|\\r\\n|3|\\r\\n\\r\\nObserving Query Status - the following warning returned:\\r\\n`Failed to resolve entity \\'SomeView*\\'`\\r\\n\\r\\n**Example: source columns types mismatch**\\r\\n\\r\\n```\\r\\nlet View_1 = view () { print x=1 };\\r\\nlet View_2 = view () { print x=toint(2) };\\r\\nunion withsource=TableName View_1, View_2\\r\\n```\\r\\n\\r\\n|TableName|x_long|x_int|\\r\\n|---------|------|-----|\\r\\n|View_1   |1     |     |\\r\\n|View_2   |      |2    |\\r\\n\\r\\n```\\r\\nlet View_1 = view () { print x=1 };\\r\\nlet View_2 = view () { print x=toint(2) };\\r\\nlet View_3 = view () { print x_long=3 };\\r\\nunion withsource=TableName View_1, View_2, View_3 \\r\\n```\\r\\n\\r\\n|TableName|x_long1|x_int |x_long|\\r\\n|---------|-------|------|------|\\r\\n|View_1   |1      |      |      |\\r\\n|View_2   |       |2     |      |\\r\\n|View_3   |       |      |3     |\\r\\n\\r\\nColumn `x` from `View_1` received the suffix `_long`, and as a column named `x_long` already exists in the result schema, the column names were de-duplicated, producing a new column- `x_long1`',\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/unionoperator\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"unixtime_microseconds_todatetime\",\"Converts unix-epoch microseconds to UTC datetime.\",\"## Syntax\\r\\n\\r\\n`unixtime_microseconds_todatetime(*microseconds*)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *microseconds*: A real number represents epoch timestamp in microseconds. `Datetime` that occurs before the epoch time (1970-01-01 00:00:00) has a negative timestamp value.\\r\\n\\r\\n## Returns\\r\\n\\r\\nIf the conversion is successful, the result will be a [datetime](./scalar-data-types/datetime.md) value. If conversion is not successful, result will be null.\\r\\n\\r\\n## See also\\r\\n\\r\\n* Convert unix-epoch seconds to UTC datetime using [unixtime_seconds_todatetime()](unixtime-seconds-todatetimefunction.md).\\r\\n* Convert unix-epoch milliseconds to UTC datetime using [unixtime_milliseconds_todatetime()](unixtime-milliseconds-todatetimefunction.md).\\r\\n* Convert unix-epoch nanoseconds to UTC datetime using [unixtime_nanoseconds_todatetime()](unixtime-nanoseconds-todatetimefunction.md).\",\"```\\r\\nprint date_time = unixtime_microseconds_todatetime(1546300800000000)\\r\\n```\\r\\n\\r\\n|date_time|\\r\\n|---|\\r\\n|2019-01-01 00:00:00.0000000|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/unixtime-microseconds-todatetimefunction\",\"unixtime-microseconds-todatetimefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"unixtime_milliseconds_todatetime\",\"Converts unix-epoch milliseconds to UTC datetime.\",\"## Syntax\\r\\n\\r\\n`unixtime_milliseconds_todatetime(*milliseconds*)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *milliseconds*: A real number represents epoch timestamp in milliseconds. `Datetime` that occurs before the epoch time (1970-01-01 00:00:00) has a negative timestamp value.\\r\\n\\r\\n## Returns\\r\\n\\r\\nIf the conversion is successful, the result will be a [datetime](./scalar-data-types/datetime.md) value. If conversion is not successful, result will be null.\\r\\n\\r\\n## See also\\r\\n\\r\\n* Convert unix-epoch seconds to UTC datetime using [unixtime_seconds_todatetime()](unixtime-seconds-todatetimefunction.md).\\r\\n* Convert unix-epoch microseconds to UTC datetime using [unixtime_microseconds_todatetime()](unixtime-microseconds-todatetimefunction.md).\\r\\n* Convert unix-epoch nanoseconds to UTC datetime using [unixtime_nanoseconds_todatetime()](unixtime-nanoseconds-todatetimefunction.md).\",\"```\\r\\nprint date_time = unixtime_milliseconds_todatetime(1546300800000)\\r\\n```\\r\\n\\r\\n|date_time|\\r\\n|---|\\r\\n|2019-01-01 00:00:00.0000000|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/unixtime-milliseconds-todatetimefunction\",\"unixtime-milliseconds-todatetimefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"unixtime_nanoseconds_todatetime\",\"Converts unix-epoch nanoseconds to UTC datetime.\",\"## Syntax\\r\\n\\r\\n`unixtime_nanoseconds_todatetime(*nanoseconds*)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *nanoseconds*: A real number represents epoch timestamp in nanoseconds. `Datetime` that occurs before the epoch time (1970-01-01 00:00:00) has a negative timestamp value.\\r\\n\\r\\n## Returns\\r\\n\\r\\nIf the conversion is successful, the result will be a [datetime](./scalar-data-types/datetime.md) value. If conversion is not successful, result will be null.\\r\\n\\r\\n## See also\\r\\n\\r\\n* Convert unix-epoch seconds to UTC datetime using [unixtime_seconds_todatetime()](unixtime-seconds-todatetimefunction.md).\\r\\n* Convert unix-epoch milliseconds to UTC datetime using [unixtime_milliseconds_todatetime()](unixtime-milliseconds-todatetimefunction.md).\\r\\n* Convert unix-epoch microseconds to UTC datetime using [unixtime_microseconds_todatetime()](unixtime-microseconds-todatetimefunction.md).\",\"```\\r\\nprint date_time = unixtime_nanoseconds_todatetime(1546300800000000000)\\r\\n```\\r\\n\\r\\n|date_time|\\r\\n|---|\\r\\n|2019-01-01 00:00:00.0000000|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/unixtime-nanoseconds-todatetimefunction\",\"unixtime-nanoseconds-todatetimefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"unixtime_seconds_todatetime\",\"Converts unix-epoch seconds to UTC datetime.\",\"## Syntax\\r\\n\\r\\n`unixtime_seconds_todatetime(*seconds*)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *seconds*: A real number represents epoch timestamp in seconds. `Datetime` that occurs before the epoch time (1970-01-01 00:00:00) has a negative timestamp value.\\r\\n\\r\\n## Returns\\r\\n\\r\\nIf the conversion is successful, the result will be a [datetime](./scalar-data-types/datetime.md) value. If conversion is not successful, result will be null.\\r\\n\\r\\n## See also\\r\\n\\r\\n* Convert unix-epoch milliseconds to UTC datetime using [unixtime_milliseconds_todatetime()](unixtime-milliseconds-todatetimefunction.md).\\r\\n* Convert unix-epoch microseconds to UTC datetime using [unixtime_microseconds_todatetime()](unixtime-microseconds-todatetimefunction.md).\\r\\n* Convert unix-epoch nanoseconds to UTC datetime using [unixtime_nanoseconds_todatetime()](unixtime-nanoseconds-todatetimefunction.md).\",\"```\\r\\nprint date_time = unixtime_seconds_todatetime(1546300800)\\r\\n```\\r\\n\\r\\n|date_time|\\r\\n|---|\\r\\n|2019-01-01 00:00:00.0000000|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/unixtime-seconds-todatetimefunction\",\"unixtime-seconds-todatetimefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"url_decode\",\"The function converts encoded URL into a to regular URL representation.\",\"Detailed information about URL decoding and encoding can be found [here](https://en.wikipedia.org/wiki/Percent-encoding).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`url_decode(`*encoded url*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *encoded url*: encoded URL (string).  \\r\\n\\r\\n## Returns\\r\\n\\r\\nURL (string) in a regular representation.\",\"```\\r\\nlet url = @'https%3a%2f%2fwww.bing.com%2f';\\r\\nprint original = url, decoded = url_decode(url)\\r\\n```\\r\\n\\r\\n|original|decoded|\\r\\n|---|---|\\r\\n|https%3a%2f%2fwww.bing.com%2f|https://www.bing.com/|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/urldecodefunction\",\"urldecodefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"url_encode\",\"The function converts characters of the input URL into a format that can be transmitted over the Internet.\",\"Detailed information about URL encoding and decoding can be found [here](https://en.wikipedia.org/wiki/Percent-encoding).\\r\\nDiffers from [url_encode_component](./urlencodecomponentfunction.md) by encoding spaces as '+' and not as '20%' (see application/x-www-form-urlencoded [here](https://en.wikipedia.org/wiki/Percent-encoding)).\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`url_encode(`*url*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *url*: input URL (string).  \\r\\n\\r\\n## Returns\\r\\n\\r\\nURL (string) converted into a format that can be transmitted over the Internet.\",\"```\\r\\nlet url = @'https://www.bing.com/hello word';\\r\\nprint original = url, encoded = url_encode(url)\\r\\n```\\r\\n\\r\\n|original|encoded|\\r\\n|---|---|\\r\\n|https://www.bing.com/hello word/|https%3a%2f%2fwww.bing.com%2fhello+word|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/urlencodefunction\",\"urlencodefunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"url_encode_component\",\"The function converts characters of the input URL into a format that can be transmitted over the Internet.\",\"Detailed information about URL encoding and decoding can be found [here](https://en.wikipedia.org/wiki/Percent-encoding).\\r\\nDiffers from [url_encode](./urlencodefunction.md) by encoding spaces as '20%' and not as '+'.\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`url_encode_component(`*url*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *url*: input URL (string).  \\r\\n\\r\\n## Returns\\r\\n\\r\\nURL (string) converted into a format that can be transmitted over the Internet.\",\"```\\r\\nlet url = @'https://www.bing.com/hello word/';\\r\\nprint original = url, encoded = url_encode_component(url)\\r\\n```\\r\\n\\r\\n|original|encoded|\\r\\n|---|---|\\r\\n|https://www.bing.com/hello word/|https%3a%2f%2fwww.bing.com%2fhello%20word|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/urlencodecomponentfunction\",\"urlencodecomponentfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"variance\",\"Calculates the variance of *Expr* across the group, considering the group as a [sample](https://en.wikipedia.org/wiki/Sample_%28statistics%29).\",\"The following formula is used:\\r\\n\\r\\n![Image showing a variance sample formula.](images/variance-aggfunction/variance-sample.png)\\r\\n[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`variance` `(`*Expr*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*Expr* | string | &check; | Expression that will be used for aggregation calculation.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the variance value of *Expr* across the group.\",\"**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAytKzEtPVahQSCvKz1UwVCjJVzBVKC5JLVAw5KpRKC7NzU0syqxKVchNzE6Nz8ksLtGo0NRRKAMKJuYlpwI5ADQ5+T5AAAAA)**\\\\]**\\r\\n\\r\\n```\\r\\nrange x from 1 to 5 step 1\\r\\n| summarize make_list(x), variance(x) \\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|list_x|variance_x|\\r\\n|---|---|\\r\\n|[ 1, 2, 3, 4, 5]|2.5|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/variance-aggfunction\",\"variance-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"varianceif\",\"Calculates the [variance](variance-aggfunction.md) of *Expr* across the group for which *Predicate* evaluates to `true`.\",\"[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`varianceif` `(`*Expr*`,` *Predicate*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*Expr* | string | &check; | Expression that will be used for aggregation calculation.|\\r\\n|*Predicate*| string | &check; | Predicate that if true, the *Expr* calculated value will be added to the variance.\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the variance value of *Expr* across the group where *Predicate* evaluates to `true`.\",\"**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAytKzEtPVahQSCvKz1UwVCjJVzA0MFAoLkktUDDkqlEoLs3NTSzKrEpVKANSiXnJqZlpGhU6ChWqRgq2tgoGmgA5lfgVQAAAAA==)**\\\\]**\\r\\n\\r\\n```\\r\\nrange x from 1 to 100 step 1\\r\\n| summarize varianceif(x, x%2 == 0)\\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|varianceif_x|\\r\\n|---|\\r\\n|850|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/varianceif-aggfunction\",\"varianceif-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"variancep\",\"Calculates the variance of *Expr* across the group, considering the group as a [population](https://en.wikipedia.org/wiki/Statistical_population).\",\"The following formula is used:\\r\\n\\r\\n![Image showing a variance sample formula.](images/variancep-aggfunction/variance-population.png)\\r\\n[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`variancep` `(`*Expr*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n| Name | Type | Required | Description |\\r\\n|--|--|--|--|\\r\\n|*Expr* | string | &check; | Expression that will be used for aggregation calculation.|\\r\\n\\r\\n## Returns\\r\\n\\r\\nReturns the variance value of *Expr* across the group.\",\"**\\\\[**[**Click to run query**](https://dataexplorer.azure.com/clusters/help/databases/Samples?query=H4sIAAAAAAAAAytKzEtPVahQSCvKz1UwVCjJVzBVKC5JLVAw5KpRKC7NzU0syqxKVchNzE6Nz8ksLtGo0NRRKAMKJuYlpxYAeQCFH59wQQAAAA==)**\\\\]**\\r\\n\\r\\n```\\r\\nrange x from 1 to 5 step 1\\r\\n| summarize make_list(x), variancep(x) \\r\\n```\\r\\n\\r\\n**Results**\\r\\n\\r\\n|list_x|variance_x|\\r\\n|---|---|\\r\\n|[ 1, 2, 3, 4, 5]|2|\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/variancep-aggfunction\",\"variancep-aggfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"week_of_year\",\"Returns an integer which represents the week number. The week number is calculated from the first week of a year, which is the one that includes the first Thursday, according to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Week_dates).\",'```\\r\\nweek_of_year(datetime(\"2015-12-14\"))\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`week_of_year(`*a_date*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* `a_date`: A `datetime`.\\r\\n\\r\\n## Returns\\r\\n\\r\\n`week number` - The week number that contains the given date.',\"|Input                                    |Output|\\r\\n|-----------------------------------------|------|\\r\\n|`week_of_year(datetime(2020-12-31))`     |`53`  |\\r\\n|`week_of_year(datetime(2020-06-15))`     |`25`  |\\r\\n|`week_of_year(datetime(1970-01-01))`     |`1`   |\\r\\n|`week_of_year(datetime(2000-01-01))`     |`52`  |\\r\\n\\r\\n> [!NOTE]\\r\\n> `weekofyear()` is an obsolete variant of this function. `weekofyear()` was not ISO 8601 compliant; the first week of a year was defined as the week with the year's first Wednesday in it.\\r\\nThe current version of this function, `week_of_year()`, is ISO 8601 compliant; the first week of a year is defined as the week with the year's first Thursday in it.\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/weekofyearfunction\",\"weekofyearfunction.md\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"welch_test\",\"Computes the p_value of the [Welch-test function](https://en.wikipedia.org/wiki/Welch%27s_t-test)\",'```\\r\\n// s1, s2 values are from https://en.wikipedia.org/wiki/Welch%27s_t-test\\r\\nprint\\r\\n    s1 = dynamic([27.5, 21.0, 19.0, 23.6, 17.0, 17.9, 16.9, 20.1, 21.9, 22.6, 23.1, 19.6, 19.0, 21.7, 21.4]),\\r\\n    s2 = dynamic([27.1, 22.0, 20.8, 23.4, 23.4, 23.5, 25.8, 22.0, 24.8, 20.2, 21.9, 22.1, 22.9, 20.5, 24.4])\\r\\n| mv-expand s1 to typeof(double), s2 to typeof(double)\\r\\n| summarize m1=avg(s1), v1=variance(s1), c1=count(), m2=avg(s2), v2=variance(s2), c2=count()\\r\\n| extend pValue=welch_test(m1,v1,c1,m2,v2,c2)\\r\\n// pValue = 0.021\\r\\n```\\r\\n\\r\\n## Syntax\\r\\n\\r\\n`welch_test(`*mean1*`, `*variance1*`, `*count1*`, `*mean2*`, `*variance2*`, `*count2*`)`\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *mean1*: Expression that represents the mean (average) value of the first series\\r\\n* *variance1*:  Expression that represents the variance value of the first series\\r\\n* *count1*:  Expression that represents the count of values in the first series\\r\\n* *mean2*: Expression that represents the mean (average) value of the second series\\r\\n* *variance2*:  Expression that represents the variance value of the second series\\r\\n* *count2*:  Expression that represents the count of values in the second series\\r\\n\\r\\n## Returns\\r\\n\\r\\nFrom [Wikipedia](https://en.wikipedia.org/wiki/Welch%27s_t-test):\\r\\n\\r\\nIn statistics, Welch\\'s t-test is a two-sample location test that\\'s used to test the hypothesis that two populations have equal means. \\r\\nWelch\\'s t-test is an adaptation of Student\\'s t-test, and is more reliable when the two samples have unequal variances and unequal sample sizes. These tests are often referred to as \"unpaired\" or \"independent samples\" t-tests. \\r\\nThe tests are typically applied when the statistical units underlying the two samples being compared are non-overlapping. \\r\\nWelch\\'s t-test is less popular than Student\\'s t-test, and may be less familiar to readers. The test is also called \"Welch\\'s unequal variances t-test\", or \"unequal variances t-test\".',\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/welch-testfunction\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.OperatorToken,\"where\",\"Filters a table to the subset of rows that satisfy a predicate.\",'```\\r\\nT | where fruit==\"apple\"\\r\\n```\\r\\n\\r\\n**Alias** `filter`\\r\\n\\r\\n## Syntax\\r\\n\\r\\n*T* `| where` *Predicate*\\r\\n\\r\\n## Arguments\\r\\n\\r\\n* *T*: The tabular input whose records are to be filtered.\\r\\n* *Predicate*: A `boolean` [expression](./scalar-data-types/bool.md) over the columns of *T*. It\\'s evaluated for each row in *T*.\\r\\n\\r\\n## Returns\\r\\n\\r\\nRows in *T* for which *Predicate* is `true`.\\r\\n\\r\\n**Notes**\\r\\nNull values: all filtering functions return false when compared with null values. \\r\\nYou can use special null-aware functions to write queries that handle null values.\\r\\n\\r\\n[isnull()](./isnullfunction.md),\\r\\n[isnotnull()](./isnotnullfunction.md),\\r\\n[isempty()](./isemptyfunction.md),\\r\\n[isnotempty()](./isnotemptyfunction.md). \\r\\n\\r\\n**Tips**\\r\\n\\r\\nTo get the fastest performance:\\r\\n\\r\\n* **Use simple comparisons** between column names and constants. (\\'Constant\\' means constant over the table - so `now()` and `ago()` are OK, and so are scalar values assigned using a [`let` statement](./letstatement.md).)\\r\\n    For example, prefer `where Timestamp >= ago(1d)` to `where floor(Timestamp, 1d) == ago(1d)`.\\r\\n* **Simplest terms first**: If you have multiple clauses conjoined with `and`, put first the clauses that involve just one column. So `Timestamp > ago(1d) and OpId == EventId` is better than the other way around.\\r\\n\\r\\nFor more information, see the summary of [available String operators](./datatypes-string-operators.md) and the summary of [available Numerical operators](./numoperators.md).\\r\\n\\r\\n## Example: Simple comparisons first\\r\\n\\r\\n```\\r\\nTraces\\r\\n| where Timestamp > ago(1h)\\r\\n    and Source == \"MyCluster\"\\r\\n    and ActivityId == SubActivityId \\r\\n```\\r\\n\\r\\nThis example retrieves records that are no older than 1 hour,\\r\\ncome from a source called `MyCluster`, and have two columns of the same value. \\r\\n\\r\\nNotice that we put the comparison between two columns last, as it can\\'t use the index and forces a scan.\\r\\n\\r\\n## Example: Columns contain string\\r\\n\\r\\n```\\r\\nTraces | where * has \"Kusto\"\\r\\n```\\r\\n\\r\\nAll the rows in which the word \"Kusto\" appears in any column.',\"\",\"https://docs.microsoft.com/azure/data-explorer/kusto/query/whereoperator\",\"\")),this.AddTopic(new Kusto.Data.IntelliSense.CslTopicDocumentation(Kusto.Data.IntelliSense.CslCommandToken.Kind.FunctionNameToken,\"zip\",\"The `zip` function accepts any number of `dynamic` arrays, and returns an\\r\\narray whose elements are each an array holding the elements of the input\\r\\narrays of the same index.\",\"## Syntax\\r\\n\\r\\n`zip(`*array1*`,` *array2*`, ... )`\\r\\n\\r\\n## Arguments\\r\\n\\r\\nBetween 2 and 16 dynamic arrays.\",'The following example returns `[[1,2],[3,4],[5,6]]`:\\r\\n\\r\\n```\\r\\nprint zip(dynamic([1,3,5]), dynamic([2,4,6]))\\r\\n```\\r\\n\\r\\nThe following example returns `[[\"A\",{}], [1,\"B\"], [1.5, null]]`:\\r\\n\\r\\n```\\r\\nprint zip(dynamic([\"A\", 1, 1.5]), dynamic([{}, \"B\"]))\\r\\n```\\r\\n\\r\\nThe following example returns `[[1,\"one\"],[2,\"two\"],[3,\"three\"]]`:\\r\\n\\r\\n```\\r\\ndatatable(a:int, b:string) [1,\"one\",2,\"two\",3,\"three\"]\\r\\n| summarize a = make_list(a), b = make_list(b)\\r\\n| project zip(a, b)\\r\\n```',\"https://docs.microsoft.com/azure/data-explorer/kusto/query/zipfunction\",\"zipfunction.md\")))}}});Bridge.ns(\"Kusto.Data.IntelliSense.CslDocumentation\",$asm.$);Bridge.apply($asm.$.Kusto.Data.IntelliSense.CslDocumentation,{f1:function(kvp){return kvp.value}});Bridge.define(\"Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult\",{$kind:\"nested enum\",statics:{fields:{None:0,AppendEntities:1,ReplaceEntities:2}}});Bridge.define(\"Kusto.Data.IntelliSense.CslTopicDocumentation\",{props:{TokenKind:0,Name:null,ShortDescription:null,LongDescription:null,Examples:null,Url:null,MarkdownSource:null},ctors:{ctor:function(tokenKind,name,shortDescription,longDescription,examples,url,markdownSource){url===void 0&&(url=null);markdownSource===void 0&&(markdownSource=null);this.$initialize();this.TokenKind=tokenKind;this.Name=name;this.ShortDescription=shortDescription;this.LongDescription=longDescription;this.Examples=examples;this.Url=url;this.MarkdownSource=markdownSource}},methods:{GetMarkDownText:function(){var $t,sb=new System.Text.StringBuilder,part;sb.appendFormat(System.String.format(\"## {0} [web]({1})\",this.Name,this.Url));sb.appendLine();sb.appendLine();$t=Bridge.getEnumerator(System.Array.init([this.ShortDescription,this.LongDescription,this.Examples],System.String));try{while($t.moveNext())part=$t.Current,System.String.isNullOrEmpty(part)||(sb.appendLine(part),sb.appendLine())}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return sb.toString()},equals:function(obj){if(obj==null)return!1;var other=Bridge.as(obj,Kusto.Data.IntelliSense.CslTopicDocumentation);return other==null?!1:this.TokenKind===other.TokenKind&&Bridge.referenceEquals(this.Name,other.Name)&&Bridge.referenceEquals(this.ShortDescription,other.ShortDescription)&&Bridge.referenceEquals(this.Examples,other.Examples)},getHashCode:function(){var $t,$t1,$t2,$t3;return Bridge.getHashCode(this.TokenKind)^Bridge.getHashCode(this.Name)^($t=($t1=this.ShortDescription)!=null?Bridge.getHashCode($t1):null,$t!=null?$t:0)^($t2=($t3=this.Examples)!=null?Bridge.getHashCode($t3):null,$t2!=null?$t2:0)}}});Bridge.define(\"Kusto.Data.IntelliSense.DMRuleKind\",{$kind:\"enum\",statics:{fields:{None:0,Start:0,YieldAdminCommandsOptions:0,YieldShowCommandOptions:1,YieldShowClustersKeywordOptions:2,YieldShowClustersSettingsKeywordOptions:3,YieldShowClustersSettingsVersionKeywordOptions:4,YieldShowClustersSettingsWithEncryptedSecretsKeywordOptions:5,YieldShowPrincipalRolesCommandOptions:6,YieldAlterCommandOptions:7,YieldAlterMergeCommandOptions:8,YieldAlterClustersSettingsKeywordOptions:9,YieldCreateCommandOptions:10,YieldDropCommandOptions:11,YieldAddCommandOptions:12,YieldAddOrAlterCommandOptions:13,YieldAddDataObtainerKeyworkOptions:14,YieldAddDataObtainerInitializeKeyworkOptions:15,YieldAddDataObtainerInitializeWithKeyworkOptions:16,YieldGetCommandOptions:17,YieldGetIngestionQueuesCommandOptions:18,YieldGetIngestionQueuesTypeCommandOptions:19,YieldFlushCommandOptions:20,YieldInitializeCommandOptions:21,YieldInitializeClusterConfigCommandOptions:22,YieldInitializeClusterConfigEncryptionCommandOptions:23,YieldResetCommandOptions:24,YieldSetCommandOptions:25,YieldAlterClustersSettingsFromKeywordOptions:26,YieldAlterObtainerQueuesOptions:27,YieldAddOrAlterEventHubIngestionSourceSettingsOptions:28,YieldPurgeShowCommandOptions:29,YieldPurgeShowCommandFromKeywordOptions:30,YieldPurgeShowCommandToKeywordOptions:31,YieldPurgeTableCommandOptions:32,YieldPurgeMaterializedViewTableCommandOptions:33,YieldPurgeTableInDatabaseCommandOptions:34,YieldPurgeTableRecordsInDatabaseCommandOptions:35,YieldPurgeRetryCommandOptions:36,YieldPurgeRetryCommandFromKeywordOptions:37,YieldPurgeRetryCommandToKeywordOptions:38,YieldPurgeCancelCommandOptions:39,YieldPurgeCancelAllCommandsOptions:40,YieldClearCommandOptions:41,YieldClearIngestionQueuesCommandOptions:42,RefreshPolicyCacheCommandOptions:43},ctors:{init:function(){this.None=Kusto.Data.IntelliSense.RuleKind.None;this.Start=Kusto.Data.IntelliSense.RuleKind.Last}}}});Bridge.define(\"Kusto.Data.IntelliSense.EntityDataType\",{$kind:\"enum\",statics:{fields:{Empty:0,Object:1,DBNull:2,Boolean:3,Char:4,SByte:5,Byte:6,Int16:7,UInt16:8,Int32:9,UInt32:10,Int64:11,UInt64:12,Single:13,Double:14,Decimal:15,DateTime:16,String:18,Dynamic:19,TimeSpan:20}}});Bridge.define(\"Kusto.Data.IntelliSense.EntityDataTypeConverter\",{statics:{methods:{FromType:function(typeName){var typeCode={v:Kusto.Data.IntelliSense.EntityDataType.String};return System.Enum.tryParse(Kusto.Data.IntelliSense.EntityDataType,typeName,typeCode)||Bridge.referenceEquals(typeName,\"Guid\")&&(typeCode.v=Kusto.Data.IntelliSense.EntityDataType.String),typeCode.v}}}});Bridge.define(\"Kusto.Data.IntelliSense.ExpressionEntity\",{fields:{Operator:null,Name:null,Arguments:null,IsGenerated:!1},ctors:{init:function(){this.IsGenerated=!1}},methods:{FirstArgument:function(){return Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(System.String,this.Arguments)?System.Linq.Enumerable.from(this.Arguments,System.String).first():\"\"}}});Bridge.define(\"Kusto.Data.IntelliSense.ExpressionEntityParser\",{statics:{methods:{ParseEntities:function(input){return Kusto.Data.IntelliSense.ExpressionEntityParser.ParseEntitiesList(Kusto.Data.IntelliSense.ExpressionEntity,input,Kusto.Data.IntelliSense.ExpressionEntityParser.ParseEntityExpression)},ParseEntities$1:function(input,generateImplicitEntities){return Kusto.Data.IntelliSense.ExpressionEntityParser.ParseEntitiesList(Kusto.Data.IntelliSense.ExpressionEntity,input,Kusto.Data.IntelliSense.ExpressionEntityParser.ParseEntityExpression,generateImplicitEntities)},ParseEntitiesList:function(T,entities,parse,generateImplicitEntities){var result,i,ch,closingBracket,closingBracket1;if(generateImplicitEntities===void 0&&(generateImplicitEntities=null),result=new(System.Collections.Generic.List$1(T).ctor),System.String.isNullOrWhiteSpace(entities))return result;var state=0,chars=System.String.toCharArray(entities,0,entities.length),startToken=0,multipleColumnsResultsCount={v:0},startFunctionName=-1;for(i=0;i<chars.length;i=i+1|0)if(ch=chars[System.Array.index(i,chars)],state===0){if(startToken=i,ch===61)state=2,startFunctionName=i+1|0;else if(System.Char.isDigit(ch)||System.Char.isLetter(ch)||ch===42)multipleColumnsResultsCount.v=0,state=1,startFunctionName=i;else if(ch===91)i=Kusto.Data.IntelliSense.ExpressionEntityParser.IndexOfClosingBracket(chars,93,i+1|0),multipleColumnsResultsCount.v=result.Count,Kusto.Data.IntelliSense.ExpressionEntityParser.AddEntity(T,entities,result,startToken,i,parse),multipleColumnsResultsCount.v=result.Count-multipleColumnsResultsCount.v|0;else if(ch===40)i=Kusto.Data.IntelliSense.ExpressionEntityParser.IndexOfClosingBracket(chars,41,i+1|0),multipleColumnsResultsCount.v=result.Count,Kusto.Data.IntelliSense.ExpressionEntityParser.AddEntity(T,entities,result,startToken,i,parse),multipleColumnsResultsCount.v=result.Count-multipleColumnsResultsCount.v|0;else if(ch===41){Kusto.Data.IntelliSense.ExpressionEntityParser.AddEntity(T,entities,result,startToken,i,parse);break}i===(chars.length-1|0)&&(i=i-1|0,state===0&&(state=1))}else if(state===1){if(multipleColumnsResultsCount.v=0,ch===61)Kusto.Data.IntelliSense.ExpressionEntityParser.AddEntity(T,entities,result,startToken,i-1|0,parse),state=2;else if(ch===44)Kusto.Data.IntelliSense.ExpressionEntityParser.AddEntity(T,entities,result,startToken,i-1|0,parse),state=0;else if(ch===40){if(closingBracket=Kusto.Data.IntelliSense.ExpressionEntityParser.IndexOfClosingBracket(chars,41,i+1|0),Kusto.Data.IntelliSense.ExpressionEntityParser.GenerateMultipleColumnOutput(T,entities,i,startFunctionName,closingBracket,multipleColumnsResultsCount,result,parse,generateImplicitEntities)){i=closingBracket+1|0;state=0;continue}i=closingBracket}i===(chars.length-1|0)&&Kusto.Data.IntelliSense.ExpressionEntityParser.AddEntity(T,entities,result,startToken,i,parse)}else if(state===2)if(ch===44)multipleColumnsResultsCount.v=0,state=0;else if(ch===40)closingBracket1=Kusto.Data.IntelliSense.ExpressionEntityParser.IndexOfClosingBracket(chars,41,i+1|0),Kusto.Data.IntelliSense.ExpressionEntityParser.GenerateMultipleColumnOutput(T,entities,i,startFunctionName,closingBracket1,multipleColumnsResultsCount,result,parse,generateImplicitEntities),i=closingBracket1;else if(ch===41)break;return result},GenerateMultipleColumnOutput:function(T,entities,currentChar,startFunctionName,closingBracket,multipleColumnsResultsCount,result,parse,generateImplicitEntities){var added=!1,args,funcName;return Bridge.staticEquals(generateImplicitEntities,null)||startFunctionName===-1||(args=new(System.Collections.Generic.List$1(T).ctor),Kusto.Data.IntelliSense.ExpressionEntityParser.AddEntity(T,entities,args,currentChar,closingBracket,parse),funcName=entities.substr(startFunctionName,currentChar-startFunctionName|0).trim(),added=generateImplicitEntities(funcName,args,multipleColumnsResultsCount.v,result),multipleColumnsResultsCount.v=0,startFunctionName=-1),added},AddEntity:function(T,entities,result,startIndex,endIndex,parse){var tokenLen=(endIndex-startIndex|0)+1|0,token,entity;tokenLen<=0||(token=(startIndex+tokenLen|0)>=entities.length?entities.substr(startIndex):entities.substr(startIndex,tokenLen),token=Kusto.Data.IntelliSense.ExpressionEntityParser.UnescapeEntityName(token),entity=parse(token),result.AddRange(entity))},UnescapeEntityName:function(token){return token=token.trim(),token=Kusto.Cloud.Platform.Utils.ExtendedString.TrimBalancedSquareBrackets(token),Kusto.Cloud.Platform.Utils.ExtendedString.TrimBalancedSingleAndDoubleQuotes(token)},NormalizeEntityName:function(entityName){var i,ch;if(System.String.isNullOrEmpty(entityName))return\"\";if(!System.Linq.Enumerable.from(entityName,System.Char).contains(46)&&!System.Linq.Enumerable.from(entityName,System.Char).contains(91))return entityName;var sb=new System.Text.StringBuilder,chars=System.String.toCharArray(entityName,0,entityName.length),state=0;for(i=0;i<chars.length;i=i+1|0){ch=chars[System.Array.index(i,chars)];switch(state){case 0:ch===46?(sb.append(\"_\"),state=1):ch===91?(sb.append(\"_\"),state=2):sb.append(String.fromCharCode(ch));break;case 1:ch!==91&&sb.append(String.fromCharCode(ch));state=2;break;case 2:if(ch===39||ch===34){var start=i+1|0,end=Kusto.Data.IntelliSense.ExpressionEntityParser.ConsumeTill(chars,start,ch),entity_part=entityName.substr(start,end-start|0);entity_part=System.String.replaceAll(entity_part,String.fromCharCode(32),String.fromCharCode(95));sb.append(entity_part);i=end}else ch===93?state=0:sb.append(String.fromCharCode(ch));break}}return sb.toString()},ConsumeTill:function(chars,start,ch){for(var i=start;i<chars.length;i=i+1|0)if(chars[System.Array.index(i,chars)]===ch)return i;return chars.length},ParseEntityExpression:function(token){var $t,indexOfAssignment=System.String.indexOf(token,String.fromCharCode(61)),indexOfStartingBracket=System.String.indexOf(token,String.fromCharCode(40)),entityName,indexOfEndingBracket,entityName1,entitiesList,entities;if(indexOfAssignment>0&&(indexOfStartingBracket<0||indexOfAssignment<indexOfStartingBracket))return entityName=Kusto.Data.IntelliSense.ExpressionEntityParser.NormalizeEntityName(token.substr(0,indexOfAssignment).trim()),System.Array.init([($t=new Kusto.Data.IntelliSense.ExpressionEntity,$t.Name=entityName,$t)],Kusto.Data.IntelliSense.ExpressionEntity);if(indexOfStartingBracket<0)return indexOfEndingBracket=System.String.indexOf(token,String.fromCharCode(41)),indexOfEndingBracket>=0&&(token=token.substr(0,indexOfEndingBracket)),entityName1=Kusto.Data.IntelliSense.ExpressionEntityParser.NormalizeEntityName(token.trim()),System.Array.init([($t=new Kusto.Data.IntelliSense.ExpressionEntity,$t.Name=entityName1,$t)],Kusto.Data.IntelliSense.ExpressionEntity);else if(indexOfStartingBracket===0)return entitiesList=Kusto.Cloud.Platform.Utils.ExtendedString.TrimBalancedRoundBrackets(token),entities=Kusto.Data.IntelliSense.ExpressionEntityParser.ParseEntitiesList(System.String,entitiesList,$asm.$.Kusto.Data.IntelliSense.ExpressionEntityParser.f1),System.Linq.Enumerable.from(entities,System.String).select($asm.$.Kusto.Data.IntelliSense.ExpressionEntityParser.f2);var op=token.substr(0,indexOfStartingBracket).trim(),argList=Kusto.Cloud.Platform.Utils.ExtendedString.TrimBalancedRoundBrackets(token.substr(indexOfStartingBracket)),$arguments=Kusto.Data.IntelliSense.ExpressionEntityParser.ParseEntitiesList(System.String,argList,$asm.$.Kusto.Data.IntelliSense.ExpressionEntityParser.f1),result=($t=new Kusto.Data.IntelliSense.ExpressionEntity,$t.Operator=op,$t);return System.Linq.Enumerable.from($arguments,System.String).any()&&(result.Name=Kusto.Cloud.Platform.Utils.ExtendedString.TrimBalancedRoundBrackets($arguments.getItem(0)),result.Arguments=System.Linq.Enumerable.from($arguments,System.String).skip(1).ToArray(System.String)),System.Array.init([result],Kusto.Data.IntelliSense.ExpressionEntity)},IndexOfClosingBracket:function(chars,closingBracket,startIndex){for(var ch,i=startIndex;i<chars.length;i=i+1|0)if(ch=chars[System.Array.index(i,chars)],ch===40)i=Kusto.Data.IntelliSense.ExpressionEntityParser.IndexOfClosingBracket(chars,41,i+1|0);else if(ch===91)i=Kusto.Data.IntelliSense.ExpressionEntityParser.IndexOfClosingBracket(chars,93,i+1|0);else if(ch===closingBracket)return i;return chars.length}}}});Bridge.ns(\"Kusto.Data.IntelliSense.ExpressionEntityParser\",$asm.$);Bridge.apply($asm.$.Kusto.Data.IntelliSense.ExpressionEntityParser,{f1:function(s){return System.Array.init([s.trim()],System.String)},f2:function(e){var $t1;return $t1=new Kusto.Data.IntelliSense.ExpressionEntity,$t1.Name=Kusto.Data.IntelliSense.ExpressionEntityParser.NormalizeEntityName(e),$t1}});Bridge.define(\"Kusto.Data.IntelliSense.IKustoIntelliSenseSchemaResolver\",{$kind:\"interface\"});Bridge.define(\"Kusto.Data.IntelliSense.IntelliSenseCommandTip\",{fields:{m_signature:null},props:{Name:null,Signature:{get:function(){if(System.String.isNullOrEmpty(this.m_signature))if(this.NameSuffix!=null)this.m_signature=(this.Name||\"\")+(this.NameSuffix||\"\");else if(this.Parameters!=null&&System.Linq.Enumerable.from(this.Parameters,Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).any()){var parameters=Bridge.toArray(System.Linq.Enumerable.from(this.Parameters,Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).select($asm.$.Kusto.Data.IntelliSense.IntelliSenseCommandTip.f1)).join(\", \");this.m_signature=System.String.format(\"<b>{0}(<\\/b>{1}<b>)<\\/b>\",this.Name,parameters)}else this.m_signature=(this.Name||\"\")+\"()\";return this.m_signature}},Summary:null,Usage:null,NameSuffix:null,Parameters:null},methods:{GetSignatureWithBoldParameter:function(i){var $t,$t1,signature,boldElement,parameters,parameters1;return this.Parameters!=null&&System.Linq.Enumerable.from(this.Parameters,Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).any()?System.Linq.Enumerable.from(this.Parameters,Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).count()>i?(boldElement=System.Array.init([System.String.format(\"<b>{0}<\\/b>\",[($t=($t1=Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,System.Linq.Enumerable.from(this.Parameters,$t1).ToArray($t1)))[System.Array.index(i,$t)].PlainSignature])],System.String),parameters=Bridge.toArray(System.Linq.Enumerable.from(this.Parameters,Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).take(i).select($asm.$.Kusto.Data.IntelliSense.IntelliSenseCommandTip.f2).concat(boldElement).concat(System.Linq.Enumerable.from(this.Parameters,Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).skip(i+1|0).select($asm.$.Kusto.Data.IntelliSense.IntelliSenseCommandTip.f2))).join(\", \"),signature=System.String.format('<font color=\"blue\"><b>{0}<\\/font>(<\\/b>{1}<b>)<\\/b>',this.Name,parameters)):(parameters1=Bridge.toArray(System.Linq.Enumerable.from(this.Parameters,Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).select($asm.$.Kusto.Data.IntelliSense.IntelliSenseCommandTip.f2)).join(\", \"),signature=System.String.format('<font color=\"blue\"><b>{0}<\\/font>(<\\/b>{1}<b>)<\\/b>',this.Name,parameters1)):signature=this.NameSuffix!=null?(this.Name||\"\")+(this.NameSuffix||\"\"):(this.Name||\"\")+\"()\",signature},Clone:function(){var $t,parameters=this.Parameters!=null&&System.Linq.Enumerable.from(this.Parameters,Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).any()?System.Linq.Enumerable.from(this.Parameters,Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).select($asm.$.Kusto.Data.IntelliSense.IntelliSenseCommandTip.f3).ToArray(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter):null;return $t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=this.Name,$t.NameSuffix=this.NameSuffix,$t.Parameters=parameters,$t.Summary=this.Summary,$t.Usage=this.Usage,$t}}});Bridge.ns(\"Kusto.Data.IntelliSense.IntelliSenseCommandTip\",$asm.$);Bridge.apply($asm.$.Kusto.Data.IntelliSense.IntelliSenseCommandTip,{f1:function(p){return p.Singature},f2:function(p){return p.PlainSignature},f3:function(p){return p.Clone()}});Bridge.define(\"Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter\",{props:{Name:null,Description:null,DataType:null,Optional:!1,IsArgsArray:!1,Singature:{get:function(){return this.IsArgsArray?\"...\":System.String.format(\"<b>{0}{1}<\\/b> <i>{2}<\\/i>\",this.Optional?\"[?] \":\"\",this.DataType,this.Name)}},PlainSignature:{get:function(){return this.IsArgsArray?\"...\":System.String.format('{0}<font color=\"blue\">{1}<\\/font> <i>{2}<\\/i>',this.Optional?\"[?] \":\"\",this.DataType,this.Name)}}},methods:{Clone:function(){var $t;return $t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=this.DataType,$t.Description=this.Description,$t.IsArgsArray=this.IsArgsArray,$t.Name=this.Name,$t.Optional=this.Optional,$t}}});Bridge.define(\"Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.PrivateTracer\",{$kind:\"nested class\",statics:{fields:{Tracer:null},ctors:{init:function(){this.Tracer=new Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.PrivateTracer}}},methods:{TraceVerbose:function(format,list){list===void 0&&(list=[])}}});Bridge.define(\"Kusto.Data.IntelliSense.KustoCommandContext\",{inherits:function(){return[System.IEquatable$1(Kusto.Data.IntelliSense.KustoCommandContext)]},statics:{fields:{Empty:null},ctors:{init:function(){this.Empty=new Kusto.Data.IntelliSense.KustoCommandContext(\"\")}}},props:{Context:null,Operation:0},alias:[\"equalsT\",\"System$IEquatable$1$Kusto$Data$IntelliSense$KustoCommandContext$equalsT\"],ctors:{ctor:function(context,operation){operation===void 0&&(operation=0);this.$initialize();this.Context=context;this.Operation=operation}},methods:{equalsT:function(other){return other!=null&&System.String.equals(other.Context,this.Context)&&other.Operation===this.Operation},getHashCode:function(){return Bridge.getHashCode(this.Context)^Bridge.getHashCode(this.Operation)},Flatten:function(){return System.Linq.Enumerable.from(System.String.split(this.Context,System.Array.init([44],System.Char).map(function(i){return String.fromCharCode(i)}),null,1),System.String).select(Bridge.fn.bind(this,$asm.$.Kusto.Data.IntelliSense.KustoCommandContext.f1)).ToArray(Kusto.Data.IntelliSense.KustoCommandContext)},IsEmpty:function(){return System.String.isNullOrEmpty(this.Context)}}});Bridge.ns(\"Kusto.Data.IntelliSense.KustoCommandContext\",$asm.$);Bridge.apply($asm.$.Kusto.Data.IntelliSense.KustoCommandContext,{f1:function(t){return new Kusto.Data.IntelliSense.KustoCommandContext(t.trim(),this.Operation)}});Bridge.define(\"Kusto.Data.IntelliSense.KustoIntelliSenseAccountEntity\",{props:{Name:null}});Bridge.define(\"Kusto.Data.IntelliSense.KustoIntelliSenseClusterEntity\",{props:{ConnectionString:null,Alias:null,Databases:null,Plugins:null},methods:{Clone:function(){var $t,$t1,$t2;return $t=new Kusto.Data.IntelliSense.KustoIntelliSenseClusterEntity,$t.ConnectionString=this.ConnectionString,$t.Alias=this.Alias,$t.Databases=($t1=this.Databases)!=null?System.Linq.Enumerable.from($t1,Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity).select($asm.$.Kusto.Data.IntelliSense.KustoIntelliSenseClusterEntity.f1).ToArray(Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity):null,$t.Plugins=($t2=this.Plugins)!=null?System.Linq.Enumerable.from($t2,Kusto.Data.IntelliSense.KustoIntelliSensePluginEntity).select($asm.$.Kusto.Data.IntelliSense.KustoIntelliSenseClusterEntity.f2).ToArray(Kusto.Data.IntelliSense.KustoIntelliSensePluginEntity):null,$t}}});Bridge.ns(\"Kusto.Data.IntelliSense.KustoIntelliSenseClusterEntity\",$asm.$);Bridge.apply($asm.$.Kusto.Data.IntelliSense.KustoIntelliSenseClusterEntity,{f1:function(db){return db.Clone()},f2:function(p){return p.Clone()}});Bridge.define(\"Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity\",{props:{Name:null,TypeCode:0},methods:{Clone:function(){var $t;return $t=new Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity,$t.Name=this.Name,$t.TypeCode=this.TypeCode,$t}}});Bridge.define(\"Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity\",{props:{Name:null,Alias:null,Tables:null,Functions:null,IsInitialized:!1},methods:{Clone:function(){var $t,$t1,$t2;return $t=new Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity,$t.Name=this.Name,$t.Alias=this.Alias,$t.Tables=($t1=this.Tables)!=null?System.Linq.Enumerable.from($t1,Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity).select($asm.$.Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity.f1).ToArray(Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity):null,$t.Functions=($t2=this.Functions)!=null?System.Linq.Enumerable.from($t2,Kusto.Data.IntelliSense.KustoIntelliSenseFunctionEntity).select($asm.$.Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity.f2).ToArray(Kusto.Data.IntelliSense.KustoIntelliSenseFunctionEntity):null,$t.IsInitialized=this.IsInitialized,$t}}});Bridge.ns(\"Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity\",$asm.$);Bridge.apply($asm.$.Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity,{f1:function(t){return t.Clone()},f2:function(f){return f.Clone()}});Bridge.define(\"Kusto.Data.IntelliSense.KustoIntelliSenseFunctionEntity\",{props:{Name:null,CallName:null,Expression:null},methods:{Clone:function(){var $t;return $t=new Kusto.Data.IntelliSense.KustoIntelliSenseFunctionEntity,$t.Name=this.Name,$t.CallName=this.CallName,$t.Expression=this.Expression,$t}}});Bridge.define(\"Kusto.Data.IntelliSense.KustoIntelliSensePluginEntity\",{props:{Name:null},methods:{Clone:function(){var $t;return $t=new Kusto.Data.IntelliSense.KustoIntelliSensePluginEntity,$t.Name=this.Name,$t}}});Bridge.define(\"Kusto.Data.IntelliSense.KustoIntelliSenseQuerySchema\",{props:{Cluster:null,Database:null},ctors:{ctor:function(cluster,database){this.$initialize();this.Cluster=cluster;this.Database=database}},methods:{Clone:function(){return new Kusto.Data.IntelliSense.KustoIntelliSenseQuerySchema(this.Cluster!=null?this.Cluster.Clone():null,this.Database!=null?this.Database.Clone():null)}}});Bridge.define(\"Kusto.Data.IntelliSense.KustoIntelliSenseServiceEntity\",{props:{Name:null}});Bridge.define(\"Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity\",{props:{Name:null,IsInvisible:!1,Columns:null},methods:{Clone:function(){var $t,$t1;return $t=new Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity,$t.Name=this.Name,$t.Columns=($t1=this.Columns)!=null?System.Linq.Enumerable.from($t1,Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity).select($asm.$.Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity.f1).ToArray(Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity):null,$t.IsInvisible=this.IsInvisible,$t}}});Bridge.ns(\"Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity\",$asm.$);Bridge.apply($asm.$.Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity,{f1:function(c){return c.Clone()}});Bridge.define(\"Kusto.Data.IntelliSense.OptionKind\",{$kind:\"enum\",statics:{fields:{None:0,Operator:1,Command:2,Service:3,Policy:4,Database:5,Table:6,DataType:7,Literal:8,Parameter:9,IngestionMapping:10,ExpressionFunction:11,Option:12,OptionKind:13,OptionRender:14,Column:15,ColumnString:16,ColumnNumeric:17,ColumnDateTime:18,ColumnTimespan:19,FunctionLocal:20,FunctionServerSide:21,FunctionAggregation:22,FunctionFilter:23,FunctionScalar:24,ClientDirective:25,MaterializedView:26,Graph:27}}});Bridge.define(\"Kusto.Data.IntelliSense.ParseMode\",{$kind:\"enum\",statics:{fields:{CommandTokensOnly:0,TokenizeAllText:1}}});Bridge.define(\"Kusto.Data.IntelliSense.RuleKind\",{$kind:\"enum\",statics:{fields:{None:0,YieldColumnNamesForFilter:1,YieldColumnNamesForProject:2,YieldColumnNamesForProjectAway:3,YieldColumnNamesForProjectRename:4,YieldColumnNamesForJoin:5,YieldKindFlavorsForJoin:6,YieldKindFlavorsForReduceBy:7,YieldColumnNamesForOrdering:8,YieldColumnNamesForTwoParamFunctions:9,YieldColumnNamesForThreeParamFunctions:10,YieldColumnNamesForManyParamFunctions:11,YieldColumnNamesAndFunctionsForExtend:12,YieldColumnNamesForMakeSeries:13,YieldTableNames:14,YieldTableNamesForFindIn:15,YieldRenderOptions:16,YieldRenderKindKeywordOption:17,YieldRenderKindOptions:18,YieldOperatorsAfterPipe:19,YieldStringComparisonOptions:20,YieldNumericComparisonOptions:21,YieldDateTimeOperatorsOptions:22,YieldSummarizeOperatorOptions:23,YieldAscendingDescendingOptions:24,YieldNumericScalarOptions:25,YieldByKeywordOptions:26,YieldWithKeywordOptions:27,YieldStarOption:28,YieldParseTypesKeywordOptions:29,YieldColumnNamesForParse:30,YieldColumnNamesForDiffPatternsPluginSplitParameter:31,YieldParseKeywordKindsOptions:32,YieldRangeFromOptions:33,YieldRangeFromToOptions:34,YieldRangeFromToStepOptions:35,YieldQueryParameters:36,YieldEvaluateOperatorOptions:37,YieldPostJoinOptions:38,YieldPostFindInOptions:39,YieldPostFindOptions:40,YieldTopNestedOfKeywordOption:41,YieldTopNestedOthersOption:42,YieldTopNestedKeywordOption:43,YieldTopHittersKeywordOption:44,YieldTimespanOptions:45,YieldDatabaseNamesOptions:46,YieldClusterNamesOptions:47,YieldDatabaseFunctionOption:48,YieldNullsFirstNullsLastOptions:49,YieldTableNamesForRemoteQueryOptions:50,YieldColumnNamesForRender:51,YieldColumnNamesForFilterInFind:52,YieldColumnNamesForProjectInFind:53,YieldEndOrContinueFindInOptions:54,YieldPostFindInListOptions:55,YieldFindProjectSmartOptions:56,YieldMakeSeriesOperatorOptions:57,YieldMakeSeriesOperatorForDefaultOrOn:58,YieldMakeSeriesOperatorForOn:59,YieldMakeSeriesOperatorForRange:60,YieldMakeSeriesOperatorForBy:61,YieldPostSearchOptions:62,YieldPostSearchKindOptions:63,YieldSearchKindOptions:64,YieldInsideSearchOptions:65,YieldClientDirectivesOptions:66,YieldClientDirective_ConnectOptions:67,Last:68}}});Bridge.define(\"Kusto.Data.Net.Common.ExtendedKustoDataStreamFormat\",{statics:{methods:{FastToString:function(that){switch(that){case Kusto.Data.Net.Common.KustoDataStreamFormat.KustoJsonDataStream:return\"KustoJsonDataStream\";case Kusto.Data.Net.Common.KustoDataStreamFormat.KustoDataStream:return\"KustoDataStream\";default:break}return System.String.format(\"[unknown: {0}]\",[Bridge.box(that,System.Int32)])},FastIsDefined$1:function(value){var dummy={v:new Kusto.Data.Net.Common.KustoDataStreamFormat};return Kusto.Data.Net.Common.ExtendedKustoDataStreamFormat.FastTryParse(value,dummy,!1,!0)},FastIsDefined:function(value){switch(value){case Kusto.Data.Net.Common.KustoDataStreamFormat.KustoJsonDataStream:return!0;case Kusto.Data.Net.Common.KustoDataStreamFormat.KustoDataStream:return!0;default:return!1}},FastHasFlag$1:function(that,flag){return(that&flag)===flag},FastHasFlag:function(that,flag){return(that&flag)===flag},FastParse:function(value,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);var ret={v:new Kusto.Data.Net.Common.KustoDataStreamFormat};if(Kusto.Data.Net.Common.ExtendedKustoDataStreamFormat.FastTryParse(value,ret,ignoreCase,ignoreInts))return ret.v;throw new System.Exception(\"Invalid enum value: \"+(value||\"\"));},FastTryParse:function(value,ret,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);switch(value){case\"0\":case\"KustoJsonDataStream\":return ret.v=Kusto.Data.Net.Common.KustoDataStreamFormat.KustoJsonDataStream,!0;case\"1\":case\"KustoDataStream\":return ret.v=Kusto.Data.Net.Common.KustoDataStreamFormat.KustoDataStream,!0;default:break}if(ignoreCase&&!System.String.isNullOrEmpty(value))switch(value.toLowerCase()){case\"kustojsondatastream\":return ret.v=Kusto.Data.Net.Common.KustoDataStreamFormat.KustoJsonDataStream,!0;case\"kustodatastream\":return ret.v=Kusto.Data.Net.Common.KustoDataStreamFormat.KustoDataStream,!0;default:break}if(!ignoreInts){var reti={v:0};if(System.Int32.tryParse(value,reti))return ret.v=reti.v,!0}return ret.v=0,!1},FastGetHashCode:function(that){return that},FastGetDescription:function(that){switch(that){case Kusto.Data.Net.Common.KustoDataStreamFormat.KustoJsonDataStream:return\"JSON representation of the Kusto Data Stream (stable).\";case Kusto.Data.Net.Common.KustoDataStreamFormat.KustoDataStream:return\"Binary data stream emitted by the Kusto engine. For internal use only (may change with no notice).\";default:return null}}}}});Bridge.define(\"Kusto.Data.Net.Common.ExtendedRemoteServiceType\",{statics:{methods:{FastToString:function(that){switch(that){case Kusto.Data.Net.Common.RemoteServiceType.Admin:return\"Admin\";case Kusto.Data.Net.Common.RemoteServiceType.Query:return\"Query\";case Kusto.Data.Net.Common.RemoteServiceType.UIRedirect:return\"UIRedirect\";case Kusto.Data.Net.Common.RemoteServiceType.DataManagement:return\"DataManagement\";case Kusto.Data.Net.Common.RemoteServiceType.ClusterManagement:return\"ClusterManagement\";case Kusto.Data.Net.Common.RemoteServiceType.Bridge:return\"Bridge\";case Kusto.Data.Net.Common.RemoteServiceType.Ping:return\"Ping\";case Kusto.Data.Net.Common.RemoteServiceType.CustomType:return\"CustomType\";case Kusto.Data.Net.Common.RemoteServiceType.StreamIngest:return\"StreamIngest\";case Kusto.Data.Net.Common.RemoteServiceType.PassiveLogin:return\"PassiveLogin\";case Kusto.Data.Net.Common.RemoteServiceType.ArmResourceProvider:return\"ArmResourceProvider\";case Kusto.Data.Net.Common.RemoteServiceType.AuthMetadata:return\"AuthMetadata\";case Kusto.Data.Net.Common.RemoteServiceType.Flighting:return\"Flighting\";case Kusto.Data.Net.Common.RemoteServiceType.HealthSuite:return\"HealthSuite\";case Kusto.Data.Net.Common.RemoteServiceType.Gaia:return\"Gaia\";case Kusto.Data.Net.Common.RemoteServiceType.Proxy:return\"Proxy\";case Kusto.Data.Net.Common.RemoteServiceType.SaasResourceProvider:return\"SaasResourceProvider\";case Kusto.Data.Net.Common.RemoteServiceType.Dashboard:return\"Dashboard\";case Kusto.Data.Net.Common.RemoteServiceType.AllControlCommands:return\"AllControlCommands\";default:break}var allFlags=Kusto.Data.Net.Common.ExtendedRemoteServiceType.FastGetFlags(that);return Bridge.toArray(allFlags).join(\"|\")},FastIsDefined$1:function(value){var dummy={v:new Kusto.Data.Net.Common.RemoteServiceType};return Kusto.Data.Net.Common.ExtendedRemoteServiceType.FastTryParse(value,dummy,!1,!0)},FastIsDefined:function(value){switch(value){case Kusto.Data.Net.Common.RemoteServiceType.Admin:return!0;case Kusto.Data.Net.Common.RemoteServiceType.Query:return!0;case Kusto.Data.Net.Common.RemoteServiceType.UIRedirect:return!0;case Kusto.Data.Net.Common.RemoteServiceType.DataManagement:return!0;case Kusto.Data.Net.Common.RemoteServiceType.ClusterManagement:return!0;case Kusto.Data.Net.Common.RemoteServiceType.Bridge:return!0;case Kusto.Data.Net.Common.RemoteServiceType.Ping:return!0;case Kusto.Data.Net.Common.RemoteServiceType.CustomType:return!0;case Kusto.Data.Net.Common.RemoteServiceType.StreamIngest:return!0;case Kusto.Data.Net.Common.RemoteServiceType.PassiveLogin:return!0;case Kusto.Data.Net.Common.RemoteServiceType.ArmResourceProvider:return!0;case Kusto.Data.Net.Common.RemoteServiceType.AuthMetadata:return!0;case Kusto.Data.Net.Common.RemoteServiceType.Flighting:return!0;case Kusto.Data.Net.Common.RemoteServiceType.HealthSuite:return!0;case Kusto.Data.Net.Common.RemoteServiceType.Gaia:return!0;case Kusto.Data.Net.Common.RemoteServiceType.Proxy:return!0;case Kusto.Data.Net.Common.RemoteServiceType.SaasResourceProvider:return!0;case Kusto.Data.Net.Common.RemoteServiceType.Dashboard:return!0;case Kusto.Data.Net.Common.RemoteServiceType.AllControlCommands:return!0;default:return!1}},FastHasFlag$1:function(that,flag){return(that&flag)===flag},FastHasFlag:function(that,flag){return(that&flag)===flag},FastHasAllFlags:function(that,flags){return(that&flags)===flags},FastHasAnyFlags:function(that,flags){return(that&flags)!=0},FastCountIntersectionsWith:function(that,flags){var intersections=that&flags;return Kusto.Cloud.Platform.Utils.BitTwiddling.CountBits(intersections)},FastParse:function(value,ignoreCase,ignoreInts){ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);var ret={v:new Kusto.Data.Net.Common.RemoteServiceType};if(Kusto.Data.Net.Common.ExtendedRemoteServiceType.FastTryParse(value,ret,ignoreCase,ignoreInts))return ret.v;throw new System.Exception(\"Invalid enum value: \"+(value||\"\"));},FastTryParse:function(value,ret,ignoreCase,ignoreInts){var $t,reti,parts,part,partResult;ignoreCase===void 0&&(ignoreCase=!1);ignoreInts===void 0&&(ignoreInts=!1);switch(value){case\"1\":case\"Admin\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.Admin,!0;case\"2\":case\"Query\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.Query,!0;case\"4\":case\"UIRedirect\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.UIRedirect,!0;case\"8\":case\"DataManagement\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.DataManagement,!0;case\"16\":case\"ClusterManagement\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.ClusterManagement,!0;case\"32\":case\"Bridge\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.Bridge,!0;case\"64\":case\"Ping\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.Ping,!0;case\"1024\":case\"CustomType\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.CustomType,!0;case\"2048\":case\"StreamIngest\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.StreamIngest,!0;case\"4096\":case\"PassiveLogin\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.PassiveLogin,!0;case\"8192\":case\"ArmResourceProvider\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.ArmResourceProvider,!0;case\"16384\":case\"AuthMetadata\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.AuthMetadata,!0;case\"32768\":case\"Flighting\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.Flighting,!0;case\"65536\":case\"HealthSuite\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.HealthSuite,!0;case\"131072\":case\"Gaia\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.Gaia,!0;case\"262144\":case\"Proxy\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.Proxy,!0;case\"524288\":case\"SaasResourceProvider\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.SaasResourceProvider,!0;case\"1048576\":case\"Dashboard\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.Dashboard,!0;case\"Admin | DataManagement | ClusterManagement | Bridge\":case\"AllControlCommands\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.AllControlCommands,!0;default:break}if(ignoreCase&&!System.String.isNullOrEmpty(value))switch(value.toLowerCase()){case\"admin\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.Admin,!0;case\"query\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.Query,!0;case\"uiredirect\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.UIRedirect,!0;case\"datamanagement\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.DataManagement,!0;case\"clustermanagement\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.ClusterManagement,!0;case\"bridge\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.Bridge,!0;case\"ping\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.Ping,!0;case\"customtype\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.CustomType,!0;case\"streamingest\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.StreamIngest,!0;case\"passivelogin\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.PassiveLogin,!0;case\"armresourceprovider\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.ArmResourceProvider,!0;case\"authmetadata\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.AuthMetadata,!0;case\"flighting\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.Flighting,!0;case\"healthsuite\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.HealthSuite,!0;case\"gaia\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.Gaia,!0;case\"proxy\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.Proxy,!0;case\"saasresourceprovider\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.SaasResourceProvider,!0;case\"dashboard\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.Dashboard,!0;case\"allcontrolcommands\":return ret.v=Kusto.Data.Net.Common.RemoteServiceType.AllControlCommands,!0;default:break}if(!ignoreInts&&(reti={v:0},System.Int32.tryParse(value,reti)))return ret.v=reti.v,!0;if(ret.v=0,!System.String.isNullOrEmpty(value)&&System.String.contains(value,\"|\")){parts=System.String.split(value,System.Array.init([124],System.Char).map(function(i){return String.fromCharCode(i)}),null,1);$t=Bridge.getEnumerator(parts);try{while($t.moveNext())if(part=$t.Current,partResult={v:new Kusto.Data.Net.Common.RemoteServiceType},Kusto.Data.Net.Common.ExtendedRemoteServiceType.FastTryParse(part,partResult,ignoreCase,ignoreInts))ret.v|=partResult.v;else return ret.v=0,!1}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return!0}return!1},FastGetHashCode:function(that){return that},FastGetDescription:function(that){switch(that){case Kusto.Data.Net.Common.RemoteServiceType.Admin:return\"Controls Kusto Engine.\";case Kusto.Data.Net.Common.RemoteServiceType.Query:return\"Queries Kusto Engine.\";case Kusto.Data.Net.Common.RemoteServiceType.UIRedirect:return\"Redirects to Kusto.Explorer or similar client.\";case Kusto.Data.Net.Common.RemoteServiceType.DataManagement:return\"Controls Kusto DM.\";case Kusto.Data.Net.Common.RemoteServiceType.ClusterManagement:return\"Controls Kusto CM.\";case Kusto.Data.Net.Common.RemoteServiceType.Bridge:return\"Controls Kusto Bridge to Geneva/Aria pipelines.\";case Kusto.Data.Net.Common.RemoteServiceType.Ping:return\"Load-balancer ping responder.\";case Kusto.Data.Net.Common.RemoteServiceType.CustomType:return\"Custom.\";case Kusto.Data.Net.Common.RemoteServiceType.StreamIngest:return\"Streaming ingestion into Kusto Engine.\";case Kusto.Data.Net.Common.RemoteServiceType.PassiveLogin:return\"Manages passive authentication flows.\";case Kusto.Data.Net.Common.RemoteServiceType.ArmResourceProvider:return\"Controls Kusto RP.\";case Kusto.Data.Net.Common.RemoteServiceType.AuthMetadata:return\"Authentication metadata information.\";case Kusto.Data.Net.Common.RemoteServiceType.Flighting:return\"Controls Kusto Flighting.\";case Kusto.Data.Net.Common.RemoteServiceType.HealthSuite:return\"Controls Kusto HealthSuite.\";case Kusto.Data.Net.Common.RemoteServiceType.Gaia:return\"Controls Kusto Gaia.\";case Kusto.Data.Net.Common.RemoteServiceType.Proxy:return\"Proxy to other services/endpoints.\";case Kusto.Data.Net.Common.RemoteServiceType.SaasResourceProvider:return\"Controls Kusto SaaS Resource Provider.\";case Kusto.Data.Net.Common.RemoteServiceType.Dashboard:return\"Controls Kusto Dashboard.\";case Kusto.Data.Net.Common.RemoteServiceType.AllControlCommands:return\"A bitwise OR of all service types that provide control commands.\";default:return null}},FastGetFlags:function(that){return new(Bridge.GeneratorEnumerable$1(Kusto.Data.Net.Common.RemoteServiceType))(Bridge.fn.bind(this,function(that){var $step=0,$jumpFromFinally,$returnValue,$async_e,$enumerator=new(Bridge.GeneratorEnumerator$1(Kusto.Data.Net.Common.RemoteServiceType))(Bridge.fn.bind(this,function(){try{for(;;)switch($step){case 0:if((that&Kusto.Data.Net.Common.RemoteServiceType.Admin)===Kusto.Data.Net.Common.RemoteServiceType.Admin){$step=1;continue}$step=3;continue;case 1:return $enumerator.current=Kusto.Data.Net.Common.RemoteServiceType.Admin,$step=2,!0;case 2:$step=3;continue;case 3:if((that&Kusto.Data.Net.Common.RemoteServiceType.Query)===Kusto.Data.Net.Common.RemoteServiceType.Query){$step=4;continue}$step=6;continue;case 4:return $enumerator.current=Kusto.Data.Net.Common.RemoteServiceType.Query,$step=5,!0;case 5:$step=6;continue;case 6:if((that&Kusto.Data.Net.Common.RemoteServiceType.UIRedirect)===Kusto.Data.Net.Common.RemoteServiceType.UIRedirect){$step=7;continue}$step=9;continue;case 7:return $enumerator.current=Kusto.Data.Net.Common.RemoteServiceType.UIRedirect,$step=8,!0;case 8:$step=9;continue;case 9:if((that&Kusto.Data.Net.Common.RemoteServiceType.DataManagement)===Kusto.Data.Net.Common.RemoteServiceType.DataManagement){$step=10;continue}$step=12;continue;case 10:return $enumerator.current=Kusto.Data.Net.Common.RemoteServiceType.DataManagement,$step=11,!0;case 11:$step=12;continue;case 12:if((that&Kusto.Data.Net.Common.RemoteServiceType.ClusterManagement)===Kusto.Data.Net.Common.RemoteServiceType.ClusterManagement){$step=13;continue}$step=15;continue;case 13:return $enumerator.current=Kusto.Data.Net.Common.RemoteServiceType.ClusterManagement,$step=14,!0;case 14:$step=15;continue;case 15:if((that&Kusto.Data.Net.Common.RemoteServiceType.Bridge)===Kusto.Data.Net.Common.RemoteServiceType.Bridge){$step=16;continue}$step=18;continue;case 16:return $enumerator.current=Kusto.Data.Net.Common.RemoteServiceType.Bridge,$step=17,!0;case 17:$step=18;continue;case 18:if((that&Kusto.Data.Net.Common.RemoteServiceType.Ping)===Kusto.Data.Net.Common.RemoteServiceType.Ping){$step=19;continue}$step=21;continue;case 19:return $enumerator.current=Kusto.Data.Net.Common.RemoteServiceType.Ping,$step=20,!0;case 20:$step=21;continue;case 21:if((that&Kusto.Data.Net.Common.RemoteServiceType.CustomType)===Kusto.Data.Net.Common.RemoteServiceType.CustomType){$step=22;continue}$step=24;continue;case 22:return $enumerator.current=Kusto.Data.Net.Common.RemoteServiceType.CustomType,$step=23,!0;case 23:$step=24;continue;case 24:if((that&Kusto.Data.Net.Common.RemoteServiceType.StreamIngest)===Kusto.Data.Net.Common.RemoteServiceType.StreamIngest){$step=25;continue}$step=27;continue;case 25:return $enumerator.current=Kusto.Data.Net.Common.RemoteServiceType.StreamIngest,$step=26,!0;case 26:$step=27;continue;case 27:if((that&Kusto.Data.Net.Common.RemoteServiceType.PassiveLogin)===Kusto.Data.Net.Common.RemoteServiceType.PassiveLogin){$step=28;continue}$step=30;continue;case 28:return $enumerator.current=Kusto.Data.Net.Common.RemoteServiceType.PassiveLogin,$step=29,!0;case 29:$step=30;continue;case 30:if((that&Kusto.Data.Net.Common.RemoteServiceType.ArmResourceProvider)===Kusto.Data.Net.Common.RemoteServiceType.ArmResourceProvider){$step=31;continue}$step=33;continue;case 31:return $enumerator.current=Kusto.Data.Net.Common.RemoteServiceType.ArmResourceProvider,$step=32,!0;case 32:$step=33;continue;case 33:if((that&Kusto.Data.Net.Common.RemoteServiceType.AuthMetadata)===Kusto.Data.Net.Common.RemoteServiceType.AuthMetadata){$step=34;continue}$step=36;continue;case 34:return $enumerator.current=Kusto.Data.Net.Common.RemoteServiceType.AuthMetadata,$step=35,!0;case 35:$step=36;continue;case 36:if((that&Kusto.Data.Net.Common.RemoteServiceType.Flighting)===Kusto.Data.Net.Common.RemoteServiceType.Flighting){$step=37;continue}$step=39;continue;case 37:return $enumerator.current=Kusto.Data.Net.Common.RemoteServiceType.Flighting,$step=38,!0;case 38:$step=39;continue;case 39:if((that&Kusto.Data.Net.Common.RemoteServiceType.HealthSuite)===Kusto.Data.Net.Common.RemoteServiceType.HealthSuite){$step=40;continue}$step=42;continue;case 40:return $enumerator.current=Kusto.Data.Net.Common.RemoteServiceType.HealthSuite,$step=41,!0;case 41:$step=42;continue;case 42:if((that&Kusto.Data.Net.Common.RemoteServiceType.Gaia)===Kusto.Data.Net.Common.RemoteServiceType.Gaia){$step=43;continue}$step=45;continue;case 43:return $enumerator.current=Kusto.Data.Net.Common.RemoteServiceType.Gaia,$step=44,!0;case 44:$step=45;continue;case 45:if((that&Kusto.Data.Net.Common.RemoteServiceType.Proxy)===Kusto.Data.Net.Common.RemoteServiceType.Proxy){$step=46;continue}$step=48;continue;case 46:return $enumerator.current=Kusto.Data.Net.Common.RemoteServiceType.Proxy,$step=47,!0;case 47:$step=48;continue;case 48:if((that&Kusto.Data.Net.Common.RemoteServiceType.SaasResourceProvider)===Kusto.Data.Net.Common.RemoteServiceType.SaasResourceProvider){$step=49;continue}$step=51;continue;case 49:return $enumerator.current=Kusto.Data.Net.Common.RemoteServiceType.SaasResourceProvider,$step=50,!0;case 50:$step=51;continue;case 51:if((that&Kusto.Data.Net.Common.RemoteServiceType.Dashboard)===Kusto.Data.Net.Common.RemoteServiceType.Dashboard){$step=52;continue}$step=54;continue;case 52:return $enumerator.current=Kusto.Data.Net.Common.RemoteServiceType.Dashboard,$step=53,!0;case 53:$step=54;continue;case 54:if((that&Kusto.Data.Net.Common.RemoteServiceType.AllControlCommands)===Kusto.Data.Net.Common.RemoteServiceType.AllControlCommands){$step=55;continue}$step=57;continue;case 55:return $enumerator.current=Kusto.Data.Net.Common.RemoteServiceType.AllControlCommands,$step=56,!0;case 56:$step=57;continue;case 57:default:return!1}}catch($async_e1){$async_e=System.Exception.create($async_e1);throw $async_e;}}));return $enumerator},arguments))}}}});Bridge.define(\"Kusto.Data.Net.Common.KustoDataStreamFormat\",{$kind:\"enum\",statics:{fields:{KustoJsonDataStream:0,KustoDataStream:1}}});Bridge.define(\"Kusto.Data.Net.Common.RemoteServiceType\",{$kind:\"enum\",statics:{fields:{Admin:1,Query:2,UIRedirect:4,DataManagement:8,ClusterManagement:16,Bridge:32,Ping:64,CustomType:1024,StreamIngest:2048,PassiveLogin:4096,ArmResourceProvider:8192,AuthMetadata:16384,Flighting:32768,HealthSuite:65536,Gaia:131072,Proxy:262144,SaasResourceProvider:524288,Dashboard:1048576,AllControlCommands:57}},$flags:!0});Bridge.define(\"Kusto.JavaScript.Client.App\",{statics:{methods:{Test:function(){var intellisenseTests,parserTests;Kusto.UT.IntelliSenseRulesTests.InitializeTestClass();intellisenseTests=new Kusto.UT.IntelliSenseRulesTests;intellisenseTests.IntelliSenseCommandEntitiesTest();intellisenseTests.IntelliSenseCommandEntitiesForTablesTest();intellisenseTests.IntelliSenseCommandEntitiesUsingFunctionsTest();intellisenseTests.IntelliSenseCommandEntities_FindTest();intellisenseTests.IntelliSenseCommandEntities_SearchTest();intellisenseTests.IntelliSenseExtendTest();intellisenseTests.IntelliSenseFilterTest();intellisenseTests.IntelliSenseGetCommandContextTest();intellisenseTests.IntelliSenseJoinTest();intellisenseTests.IntelliSenseLimitTest();intellisenseTests.IntelliSenseParseOperator();intellisenseTests.IntelliSenseProjectAwayTest();intellisenseTests.IntelliSenseProjectRenameTest();intellisenseTests.IntelliSenseProjectTest();intellisenseTests.IntelliSenseQueryParametersTest();intellisenseTests.IntelliSenseRangeTest();intellisenseTests.IntelliSenseReduceTest();intellisenseTests.IntelliSenseRenderTest();intellisenseTests.IntelliSenseSummarizeTest();intellisenseTests.IntelliSenseTopTest();intellisenseTests.IntelliSenseTopNestedTest();intellisenseTests.IntelliSenseToScalarTest();intellisenseTests.IntelliSenseTimeKeywordsTest();intellisenseTests.IntelliSenseEvaluateTest();intellisenseTests.IntelliSenseClusterTest();intellisenseTests.IntelliSenseDatabaseTest();intellisenseTests.IntelliSenseFindTest();intellisenseTests.IntelliSenseSearchTest();intellisenseTests.IntelliSenseSampleTest();intellisenseTests.IntelliSenseSampleDistinctTest();intellisenseTests.IntelliSenseMakeSeriesTest();parserTests=new Kusto.UT.IntelliSenseCslCommandParserTests;Kusto.UT.IntelliSenseCslCommandParserTests.InitializeTestClass();parserTests.TestCslCommandParserEntities();Bridge.global.alert(\"Success\")}}}});Bridge.define(\"Kusto.UT.AssertStub\",{methods:{AreEqual:function(expected,actual){var $t,$t1;if(!Bridge.referenceEquals(expected,actual))throw new System.Exception(System.String.format(\"Values do not match: expected='{0}', actual='{1}'\",($t=expected,$t!=null?$t:\"null\"),($t1=actual,$t1!=null?$t1:\"null\")));},AreEqual$1:function(expected,actual,errorMessage){var $t,$t1;if(!Bridge.referenceEquals(expected,actual))throw new System.Exception(System.String.format(\"Values do not match: expected='{0}', actual='{1}'\\n{2}\",($t=expected,$t!=null?$t:\"null\"),($t1=actual,$t1!=null?$t1:\"null\"),errorMessage));},Fail:function(message){throw new System.Exception(message);},IsTrue:function(condition,message){if(!condition)throw new System.Exception(message);}}});Bridge.define(\"Kusto.UT.IntelliSenseCslCommandParserTests\",{statics:{fields:{s_intelliSenseProvider:null},methods:{InitializeTestClass:function(){var queryParameters=new(System.Collections.Generic.List$1(System.String).ctor),availableClusters=new(System.Collections.Generic.List$1(System.String).ctor),clusterSchema=Kusto.UT.IntelliSenseRulesTests.GenerateKustoEntities(queryParameters,availableClusters),schema=new Kusto.Data.IntelliSense.KustoIntelliSenseQuerySchema(clusterSchema,System.Linq.Enumerable.from(clusterSchema.Databases,Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity).first());Kusto.UT.IntelliSenseCslCommandParserTests.s_intelliSenseProvider=new Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.$ctor1(clusterSchema,schema,queryParameters,availableClusters,void 0,!0,!0)}}},fields:{Assert:null},ctors:{init:function(){this.Assert=new Kusto.UT.AssertStub}},methods:{TestClsCommandsPerttifier:function(){var $t,queriesAndResults=System.Array.init([{Item1:'let ErrorCounts = (message:string) {\\r\\nErrorCountsByBin(message, 1d)\\r\\n};\\r\\nErrorCounts(\"Can not perform requested operation on nested resource. Parent resource\") | extend error = \"parent not found\"',Item2:'let ErrorCounts = (message:string)\\r\\n{\\r\\n    ErrorCountsByBin(message, 1d)\\r\\n};\\r\\nErrorCounts(\"Can not perform requested operation on nested resource. Parent resource\")\\r\\n| extend error = \"parent not found\"'},{Item1:\"Table\\r\\n//| project ProjectKind, UserId, ProjectType\\r\\n//| join (activeTable) on UserId\\r\\n//| summarize dcount(UserId) by ProjectType\\r\\n//| sort by dcount_UserId asc\\r\\n| count\",Item2:\"Table\\r\\n//| project ProjectKind, UserId, ProjectType\\r\\n//| join (activeTable) on UserId\\r\\n//| summarize dcount(UserId) by ProjectType\\r\\n//| sort by dcount_UserId asc\\r\\n| count\"},{Item1:\"Table\\r\\n| join (Table) on Key\",Item2:\"Table\\r\\n| join\\r\\n(\\r\\n    Table\\r\\n)\\r\\non Key\"},{Item1:'PerRequestTable | where MSODS contains \"}\" | take 1',Item2:'PerRequestTable\\r\\n| where MSODS contains \"}\"\\r\\n| take 1'},{Item1:\"let variable=1;Table | count\",Item2:\"let variable=1;\\r\\nTable\\r\\n| count\"},{Item1:\"// comment\\r\\nKustoLogs | where Timestamp > ago(1d) and EventText contains \\\"[0]Kusto.DataNode.Exceptions.SemanticErrorException: Semantic error: Query 'Temp_MonRgLoad | project TIMESTAMP | consume' has the following semantic error: \\\" | summarize cnt() by Source\",Item2:\"// comment\\r\\nKustoLogs\\r\\n| where Timestamp > ago(1d) and EventText contains \\\"[0]Kusto.DataNode.Exceptions.SemanticErrorException: Semantic error: Query 'Temp_MonRgLoad | project TIMESTAMP | consume' has the following semantic error: \\\"\\r\\n| summarize cnt() by Source\"},{Item1:\"Table |   join (Table | project x ) on x | count\",Item2:\"Table\\r\\n| join\\r\\n(\\r\\n    Table\\r\\n    | project x\\r\\n)\\r\\non x\\r\\n| count\"},{Item1:\"Table | join kind=inner (Table | project x ) on x | count\",Item2:\"Table\\r\\n| join kind=inner\\r\\n(\\r\\n    Table\\r\\n    | project x\\r\\n)\\r\\non x\\r\\n| count\"},{Item1:\"let foo = (i: long) { range x from 1 to 1 step 1 }; foo()\",Item2:\"let foo = (i: long)\\r\\n{\\r\\n    range x from 1 to 1 step 1\\r\\n};\\r\\nfoo()\"},{Item1:\"let foo = (i: long) {range x from 1 to 1 step 1 | count }; foo()\",Item2:\"let foo = (i: long)\\r\\n{\\r\\n    range x from 1 to 1 step 1\\r\\n    | count\\r\\n};\\r\\nfoo()\"},{Item1:'.alter function with (docstring = @\\'List of UserIds that are WebSites only\\', folder =@\\'Filters\\') UsersWithWebSiteAppsOnly() { DimAppUsage() | join kind=leftouter DimApplications() on ApplicationId | where RequestSource in (\"unknown\", \"ibiza\",\"ibizaaiextensionauto\") | summarize by UserId = UserId }',Item2:'.alter function with (docstring = @\\'List of UserIds that are WebSites only\\', folder =@\\'Filters\\') UsersWithWebSiteAppsOnly()\\r\\n{\\r\\n    DimAppUsage()\\r\\n    | join kind=leftouter\\r\\n        DimApplications()\\r\\n    on ApplicationId\\r\\n    | where RequestSource in (\"unknown\", \"ibiza\",\"ibizaaiextensionauto\")\\r\\n    | summarize by UserId = UserId\\r\\n}'},{Item1:'.alter function with (docstring = @\\'List of UserIds that are WebSites only\\', folder =@\\'Filters\\') UsersWithWebSiteAppsOnly()\\r\\n{\\r\\n    DimAppUsage()\\r\\n    | join kind=leftouter DimApplications() on ApplicationId\\r\\n    | where RequestSource in (\"unknown\", \"ibiza\",\"ibizaaiextensionauto\")\\r\\n    | summarize by UserId = UserId\\r\\n}',Item2:'.alter function with (docstring = @\\'List of UserIds that are WebSites only\\', folder =@\\'Filters\\') UsersWithWebSiteAppsOnly()\\r\\n{\\r\\n    DimAppUsage()\\r\\n    | join kind=leftouter\\r\\n        DimApplications()\\r\\n    on ApplicationId\\r\\n    | where RequestSource in (\"unknown\", \"ibiza\",\"ibizaaiextensionauto\")\\r\\n    | summarize by UserId = UserId\\r\\n}'},{Item1:\"KustoLogs | where Timestamp > ago(6d) | where ClientActivityId=='KE.RunQuery;e0944367-3fd6-4f83-b2e9-ff0724d55053'\",Item2:\"KustoLogs\\r\\n| where Timestamp > ago(6d)\\r\\n| where ClientActivityId=='KE.RunQuery;e0944367-3fd6-4f83-b2e9-ff0724d55053'\"},{Item1:\"KustoLogs | make-series dusers=dcount(RequestSource) default=0 on Timestamp in range(ago(6d), now(), 1d) by userid | where stat(dusers).max>1000\",Item2:\"KustoLogs\\r\\n| make-series dusers=dcount(RequestSource) default=0 on Timestamp in range(ago(6d), now(), 1d) by userid\\r\\n| where stat(dusers).max>1000\"},{Item1:\"let a = 1;//comment\\r\\nprint x = a * b * c//one more comment\",Item2:\"let a = 1;\\r\\n//comment\\r\\nprint x = a * b * c\\r\\n//one more comment\"},{Item1:\"let a = 1;\\r\\n//comment\\r\\nprint x = a * b * c\\r\\n//one more comment\",Item2:\"let a = 1;\\r\\n//comment\\r\\nprint x = a * b * c\\r\\n//one more comment\"},{Item1:\"Table | join kind = leftouter ( Table | join (Table //comment1\\r\\n)    on $left.i == $right.i//comment2\\r\\n) on i\",Item2:\"Table\\r\\n| join kind = leftouter\\r\\n(\\r\\n    Table\\r\\n    | join\\r\\n    (\\r\\n        Table\\r\\n        //comment1\\r\\n    )\\r\\n    on $left.i == $right.i\\r\\n    //comment2\\r\\n)\\r\\non i\"},{Item1:\"Table | join kind = leftouter ( Table | join Table //comment1\\r\\non $left.i == $right.i//comment2\\r\\n) on i\",Item2:\"Table\\r\\n| join kind = leftouter\\r\\n(\\r\\n    Table\\r\\n    | join\\r\\n        Table\\r\\n        //comment1\\r\\n    on $left.i == $right.i\\r\\n    //comment2\\r\\n)\\r\\non i\"},{Item1:\"Table| join\\r\\n(    Table\\r\\n    //cmt\\r\\n    | extend a\\r\\n)\\r\\non a\",Item2:\"Table\\r\\n| join\\r\\n(\\r\\n    Table\\r\\n    //cmt\\r\\n    | extend a\\r\\n)\\r\\non a\"}],System.Tuple$2(System.String,System.String)),testCase,input,actualResult,expectedResult;$t=Bridge.getEnumerator(queriesAndResults);try{while($t.moveNext())testCase=$t.Current,input=testCase.Item1,input=System.String.replaceAll(input,\"\\n\",\"\"),actualResult=Kusto.Data.Common.CslQueryParser.PrettifyQuery(input,\"\"),expectedResult=testCase.Item2,expectedResult=System.String.replaceAll(expectedResult,\"\\r\",\"\"),this.Assert.AreEqual(expectedResult,actualResult)}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}},TestCslCommandParserEntities:function(){var parser=new Kusto.Data.IntelliSense.CslCommandParser;this.ValidateTokens(parser,\"Table1 \\r\\n                | parse Field1 with * Column1:string * Column2:int\\r\\n                | project\",Kusto.Data.IntelliSense.CslCommandToken.Kind.CalculatedColumnToken,System.Array.init([\"Column1\",\"Column2\"],System.String));this.ValidateTokens(parser,\"let s = now();\\r\\n                Table1 \\r\\n                | extend x = Field1 \\r\\n                | project\",Kusto.Data.IntelliSense.CslCommandToken.Kind.TableColumnToken,System.Array.init([\"Field1\"],System.String));this.ValidateTokens(parser,\"Table1 \\r\\n                | extend x = Field1 \\r\\n                | project\",Kusto.Data.IntelliSense.CslCommandToken.Kind.TableColumnToken,System.Array.init([\"Field1\"],System.String))},ValidateTokens:function(parser,query,kind,expectedTokens){var $t,commands=($t=Kusto.Data.IntelliSense.CslCommand,System.Linq.Enumerable.from(parser.Parse(Kusto.UT.IntelliSenseCslCommandParserTests.s_intelliSenseProvider,query,Kusto.Data.IntelliSense.ParseMode.TokenizeAllText),$t).toList($t)),columns=System.Linq.Enumerable.from(commands,Kusto.Data.IntelliSense.CslCommand).selectMany($asm.$.Kusto.UT.IntelliSenseCslCommandParserTests.f1).where(function(t){return t.TokenKind===kind}).select($asm.$.Kusto.UT.IntelliSenseCslCommandParserTests.f2).toList(System.String);Kusto.UT.IntelliSenseRulesTests.ValidateEntities(query,expectedTokens,columns)},TestCslCommandParserReuse:function(){var $t,parser=new Kusto.Data.IntelliSense.CslCommandParser,query;$t=Bridge.getEnumerator(System.Array.init([\"let s = 1;\\r\\n                  let r = range x from s to 1 step 1;\\r\\n                  r | \",\"Table1 | where Field1 == 'rrr' \"],System.String));try{while($t.moveNext())query=$t.Current,this.ValidateParserReuse(parser,query)}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}},ValidateParserReuse:function(parser,query){var $t,tokens=System.Linq.Enumerable.from(parser.Parse(Kusto.UT.IntelliSenseCslCommandParserTests.s_intelliSenseProvider,query,Kusto.Data.IntelliSense.ParseMode.TokenizeAllText),Kusto.Data.IntelliSense.CslCommand).selectMany($asm.$.Kusto.UT.IntelliSenseCslCommandParserTests.f1).where($asm.$.Kusto.UT.IntelliSenseCslCommandParserTests.f3).ToArray(Kusto.Data.IntelliSense.CslCommandToken),tokens_2=System.Linq.Enumerable.from(parser.Parse(Kusto.UT.IntelliSenseCslCommandParserTests.s_intelliSenseProvider,(query||\"\")+\" \",Kusto.Data.IntelliSense.ParseMode.TokenizeAllText),Kusto.Data.IntelliSense.CslCommand).selectMany($asm.$.Kusto.UT.IntelliSenseCslCommandParserTests.f1).where($asm.$.Kusto.UT.IntelliSenseCslCommandParserTests.f3).ToArray(Kusto.Data.IntelliSense.CslCommandToken),tokens_21,i,tokens_3;for(this.ComapreParseResultTokens(tokens,($t=Kusto.Data.IntelliSense.CslCommandToken,System.Linq.Enumerable.from(tokens_2,$t).ToArray($t)),0,!1),tokens_21=System.Linq.Enumerable.from(parser.Parse(Kusto.UT.IntelliSenseCslCommandParserTests.s_intelliSenseProvider,\"// comment\\n\"+(query||\"\"),Kusto.Data.IntelliSense.ParseMode.TokenizeAllText),Kusto.Data.IntelliSense.CslCommand).selectMany($asm.$.Kusto.UT.IntelliSenseCslCommandParserTests.f1).where($asm.$.Kusto.UT.IntelliSenseCslCommandParserTests.f3).ToArray(Kusto.Data.IntelliSense.CslCommandToken),this.Assert.AreEqual(Bridge.box(tokens.length,System.Int32),Bridge.box(tokens_21.length-1|0,System.Int32)),i=0;i<tokens.length;i=i+1|0)i<(tokens.length-1|0)&&(this.Assert.AreEqual(tokens[System.Array.index(i,tokens)].Value,tokens_21[System.Array.index(i+1|0,tokens_21)].Value),this.Assert.AreEqual(Bridge.box(tokens[System.Array.index(i,tokens)].TokenKind,Kusto.Data.IntelliSense.CslCommandToken.Kind,System.Enum.toStringFn(Kusto.Data.IntelliSense.CslCommandToken.Kind)),Bridge.box(tokens_21[System.Array.index(i+1|0,tokens_21)].TokenKind,Kusto.Data.IntelliSense.CslCommandToken.Kind,System.Enum.toStringFn(Kusto.Data.IntelliSense.CslCommandToken.Kind))));tokens_3=System.Linq.Enumerable.from(parser.Parse(Kusto.UT.IntelliSenseCslCommandParserTests.s_intelliSenseProvider,\"// comment \\n\"+(query||\"\"),Kusto.Data.IntelliSense.ParseMode.TokenizeAllText),Kusto.Data.IntelliSense.CslCommand).selectMany($asm.$.Kusto.UT.IntelliSenseCslCommandParserTests.f1).where($asm.$.Kusto.UT.IntelliSenseCslCommandParserTests.f3).ToArray(Kusto.Data.IntelliSense.CslCommandToken);this.ComapreParseResultTokens(tokens_21,tokens_3,1,!1)},ComapreParseResultTokens:function(tokens,other,startIndex,fullValidation){for(var i=startIndex;i<tokens.length;i=i+1|0)i<(tokens.length-1|0)&&(fullValidation?this.Assert.AreEqual(tokens[System.Array.index(i,tokens)],other[System.Array.index(i,other)]):(this.Assert.AreEqual(tokens[System.Array.index(i,tokens)].Value,other[System.Array.index(i,other)].Value),this.Assert.AreEqual(Bridge.box(tokens[System.Array.index(i,tokens)].TokenKind,Kusto.Data.IntelliSense.CslCommandToken.Kind,System.Enum.toStringFn(Kusto.Data.IntelliSense.CslCommandToken.Kind)),Bridge.box(other[System.Array.index(i,other)].TokenKind,Kusto.Data.IntelliSense.CslCommandToken.Kind,System.Enum.toStringFn(Kusto.Data.IntelliSense.CslCommandToken.Kind)))));this.Assert.AreEqual(Bridge.box(tokens.length,System.Int32),Bridge.box(other.length,System.Int32))},TestCslCommandParserBrackets:function(){var parser=new Kusto.Data.IntelliSense.CslCommandParser;this.ValidateBracketTokens(parser,\"Table1 | extend x = floor(t, 1)\",System.Array.init([\"(t, 1)\"],System.String));this.ValidateBracketTokens(parser,\"Table1 | extend x = floor(t, bin(1, 1))\",System.Array.init([\"(t, bin(1, 1))\",\"(1, 1)\"],System.String));this.ValidateBracketTokens(parser,\"Table1 | extend x = floor(t[1], bin(1, 1))\",System.Array.init([\"(t[1], bin(1, 1))\",\"(1, 1)\",\"[1]\"],System.String));this.ValidateBracketTokens(parser,\"Table1 | extend x = floor(t[floor(100, 100)], bin(1, 1))\",System.Array.init([\"(t[floor(100, 100)], bin(1, 1))\",\"(1, 1)\",\"[floor(100, 100)]\",\"(100, 100)\"],System.String));this.ValidateBracketTokens(parser,\"Table1 | extend x = { floor(t[1], bin(1, 1)) }\",System.Array.init([\"(t[1], bin(1, 1))\",\"(1, 1)\",\"[1]\",\"{ floor(t[1], bin(1, 1)) }\"],System.String))},ValidateBracketTokens:function(parser,query,expectedTokens){var $t,commands=($t=Kusto.Data.IntelliSense.CslCommand,System.Linq.Enumerable.from(parser.Parse(Kusto.UT.IntelliSenseCslCommandParserTests.s_intelliSenseProvider,query,Kusto.Data.IntelliSense.ParseMode.TokenizeAllText),$t).toList($t)),columns=System.Linq.Enumerable.from(commands,Kusto.Data.IntelliSense.CslCommand).selectMany($asm.$.Kusto.UT.IntelliSenseCslCommandParserTests.f4).select($asm.$.Kusto.UT.IntelliSenseCslCommandParserTests.f2).toList(System.String);Kusto.UT.IntelliSenseRulesTests.ValidateEntities(query,expectedTokens,columns)},TestCslCommandParserApiKind:function(){var $t,requestsAndExpectedApiKinds=$asm.$.Kusto.UT.IntelliSenseCslCommandParserTests.f5(new(System.Collections.Generic.List$1(System.Tuple$2(System.String,Kusto.Data.IntelliSense.ApiKind)).ctor)),request;$t=Bridge.getEnumerator(requestsAndExpectedApiKinds);try{while($t.moveNext())request=$t.Current,this.Assert.AreEqual(Bridge.box(Kusto.Data.IntelliSense.CslCommandParser.ResolveRequestApiKind(request.Item1),Kusto.Data.IntelliSense.ApiKind,System.Enum.toStringFn(Kusto.Data.IntelliSense.ApiKind)),Bridge.box(request.Item2,Kusto.Data.IntelliSense.ApiKind,System.Enum.toStringFn(Kusto.Data.IntelliSense.ApiKind)))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}}}});Bridge.ns(\"Kusto.UT.IntelliSenseCslCommandParserTests\",$asm.$);Bridge.apply($asm.$.Kusto.UT.IntelliSenseCslCommandParserTests,{f1:function(c){return c.Tokens},f2:function(t){return t.Value},f3:function(t){return t.TokenKind!==Kusto.Data.IntelliSense.CslCommandToken.Kind.UnknownToken},f4:function(c){return c.BracketParts},f5:function(_o1){return _o1.add({Item1:\".show version\",Item2:Kusto.Data.IntelliSense.ApiKind.AdminSyncCommand}),_o1.add({Item1:\".ingest async into table\",Item2:Kusto.Data.IntelliSense.ApiKind.AdminAsyncCommand}),_o1.add({Item1:\"T\",Item2:Kusto.Data.IntelliSense.ApiKind.Query}),_o1.add({Item1:\"T async\",Item2:Kusto.Data.IntelliSense.ApiKind.Query}),_o1.add({Item1:\".long-name-command async\",Item2:Kusto.Data.IntelliSense.ApiKind.AdminAsyncCommand}),_o1.add({Item1:\".some command async\",Item2:Kusto.Data.IntelliSense.ApiKind.AdminSyncCommand}),_o1.add({Item1:\".ingest             async into table\",Item2:Kusto.Data.IntelliSense.ApiKind.AdminAsyncCommand}),_o1.add({Item1:\"//comment\\r\\n.ingest       \\r\\nasync into table\",Item2:Kusto.Data.IntelliSense.ApiKind.AdminAsyncCommand}),_o1.add({Item1:\"//comment\\r\\n.ingest       \\r\\n\\r\\n\\r\\nasync into table\",Item2:Kusto.Data.IntelliSense.ApiKind.AdminAsyncCommand}),_o1.add({Item1:\"//comment async\\r\\n.ingest into table\",Item2:Kusto.Data.IntelliSense.ApiKind.AdminSyncCommand}),_o1}});Bridge.define(\"Kusto.UT.IntelliSenseRulesTests\",{statics:{fields:{Assert:null,s_intelliSenseProvider:null,s_columnMappings:null},ctors:{init:function(){this.Assert=new Kusto.UT.AssertStub;this.s_columnMappings=new(System.Collections.Generic.Dictionary$2(System.String,System.Array.type(System.String)).ctor)}},methods:{ValidateEntities:function(command,expectedFields,entititesList){var $t,$t1,entity,entity1;Kusto.UT.IntelliSenseRulesTests.Assert.IsTrue(System.Linq.Enumerable.from(expectedFields,System.String).count()===entititesList.Count,System.String.format(\"Counts of expected entities ('{0}') and actual command entities ('{1}') do not match.\\nExpected entities: {2}\\nActual entities:   {3}\\nCommand: {4}\",Bridge.box(System.Linq.Enumerable.from(expectedFields,System.String).count(),System.Int32),Bridge.box(entititesList.Count,System.Int32),expectedFields.join(\",\"),Bridge.toArray(entititesList).join(\",\"),command));$t=Bridge.getEnumerator(entititesList);try{while($t.moveNext())entity=$t.Current,System.Linq.Enumerable.from(expectedFields,System.String).contains(entity)||Kusto.UT.IntelliSenseRulesTests.Assert.Fail(System.String.format(\"Entity '{0}' is not appearing on the expected list. Command: {1}\",entity,command))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}$t1=Bridge.getEnumerator(expectedFields);try{while($t1.moveNext())entity1=$t1.Current,entititesList.contains(entity1)||Kusto.UT.IntelliSenseRulesTests.Assert.Fail(System.String.format(\"Entity '{0}' is not appearing on the resolved list. Command: {1}\",entity1,command))}finally{Bridge.is($t1,System.IDisposable)&&$t1.System$IDisposable$Dispose()}},InitializeTestClass:function(){var queryParameters=new(System.Collections.Generic.List$1(System.String).ctor),availableClusters=new(System.Collections.Generic.List$1(System.String).ctor),clusterSchema=Kusto.UT.IntelliSenseRulesTests.GenerateKustoEntities(queryParameters,availableClusters),schema=new Kusto.Data.IntelliSense.KustoIntelliSenseQuerySchema(clusterSchema,System.Linq.Enumerable.from(clusterSchema.Databases,Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity).first());Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider=new Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.$ctor1(clusterSchema,schema,queryParameters,availableClusters,new Kusto.UT.IntelliSenseRulesTests.RemoteSchemaResolverMock,!0,!0)},TestIntelliSensePatterns:function(intelliSenseProvider,testPatterns){var $t,$t1,patternsWithLet=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor),testPattern,failMessage,expectedRule,failMessage1;$t=Bridge.getEnumerator(testPatterns);try{while($t.moveNext())testPattern=$t.Current,System.String.startsWith(System.String.trimStart(testPattern.Input),\".\")||patternsWithLet.add(($t1=new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.ctor(\"let variable = 1;\\n\"+(testPattern.Input||\"\")),$t1.ExpectedMatch=testPattern.ExpectedMatch,$t1.ExpectedRuleKind=testPattern.ExpectedRuleKind,$t1))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}testPatterns.AddRange(patternsWithLet);$t1=Bridge.getEnumerator(testPatterns);try{while($t1.moveNext()){var testPattern1=$t1.Current,rule={v:null},matchingSuccess=intelliSenseProvider.TryMatchAnyRule(testPattern1.Input,rule);matchingSuccess!==testPattern1.ExpectedMatch&&(failMessage=System.String.format(\"Input '{0}' was incorrectly intelli-sensed. Expected: {1} ({2}), actual: {3} ({4})\",testPattern1.Input,testPattern1.ExpectedMatch?\"MATCH\":\"NO-MATCH\",Bridge.box(testPattern1.ExpectedRuleKind,System.Int32),matchingSuccess?\"MATCH\":\"NO-MATCH\",Bridge.box(rule.v!=null?rule.v.Kind:0,System.Int32)),Kusto.UT.IntelliSenseRulesTests.Assert.Fail(failMessage));expectedRule=Bridge.toString(testPattern1.ExpectedRuleKind);testPattern1.ExpectedMatch&&testPattern1.ExpectedRuleKind!==rule.v.Kind&&(failMessage1=System.String.format(\"Input '{0}' was incorrectly intelli-sensed. Expected rule: {1}, actual rule: {2}\",testPattern1.Input,expectedRule,Bridge.box(rule.v.Kind,System.Int32)),Kusto.UT.IntelliSenseRulesTests.Assert.Fail(failMessage1))}}finally{Bridge.is($t1,System.IDisposable)&&$t1.System$IDisposable$Dispose()}},GetColumnsOfTable:function(tableName){return Kusto.UT.IntelliSenseRulesTests.s_columnMappings.containsKey(tableName)?Kusto.UT.IntelliSenseRulesTests.s_columnMappings.getItem(tableName):null},GenerateKustoEntities:function(queryParameters,availableClusters){var $t,$t1,result,databases,i,i1,i2,i3,table1,columns1,i4;availableClusters!=null&&availableClusters.add(\"other\");result=new Kusto.Data.IntelliSense.KustoIntelliSenseClusterEntity;result.Plugins=System.Array.init([($t=new Kusto.Data.IntelliSense.KustoIntelliSensePluginEntity,$t.Name=\"test_plugin\",$t)],Kusto.Data.IntelliSense.KustoIntelliSensePluginEntity);databases=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity).ctor);result.Databases=databases;var db=($t=new Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity,$t.Name=\"Database1\",$t),tables=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity).ctor),functions=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.KustoIntelliSenseFunctionEntity).ctor);db.Tables=tables;db.Functions=functions;databases.add(db);$t=Bridge.getEnumerator(System.Array.init([\"Table1\",\"['Table.2']\"],System.String));try{while($t.moveNext()){var tableName=$t.Current,table=($t1=new Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity,$t1.Name=tableName,$t1.Columns=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity).ctor),$t1),columns=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity).ctor);for(table.Columns=columns,tables.add(table),i=0;i<10;i=i+1|0)columns.add(($t1=new Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity,$t1.Name=\"Field\"+(Bridge.toString(i)||\"\"),$t1.TypeCode=Kusto.Data.IntelliSense.EntityDataType.String,$t1));for(i1=0;i1<10;i1=i1+1|0)columns.add(($t1=new Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity,$t1.Name=\"NumField\"+(Bridge.toString(i1)||\"\"),$t1.TypeCode=Kusto.Data.IntelliSense.EntityDataType.Int32,$t1));for(i2=0;i2<5;i2=i2+1|0)columns.add(($t1=new Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity,$t1.Name=\"DateTimeField\"+(Bridge.toString(i2)||\"\"),$t1.TypeCode=Kusto.Data.IntelliSense.EntityDataType.DateTime,$t1));for(i3=0;i3<5;i3=i3+1|0)columns.add(($t1=new Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity,$t1.Name=\"TimeSpanField\"+(Bridge.toString(i3)||\"\"),$t1.TypeCode=Kusto.Data.IntelliSense.EntityDataType.TimeSpan,$t1));Kusto.UT.IntelliSenseRulesTests.RegisterTableEntitiesForTest(table,columns)}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}for(table1=($t1=new Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity,$t1.Name=\"Table3\",$t1.Columns=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity).ctor),$t1),columns1=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity).ctor),table1.Columns=columns1,tables.add(table1),i4=0;i4<2;i4=i4+1|0)columns1.add(($t1=new Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity,$t1.Name=\"Field\"+(Bridge.toString(i4)||\"\"),$t1.TypeCode=Kusto.Data.IntelliSense.EntityDataType.String,$t1));return Kusto.UT.IntelliSenseRulesTests.RegisterTableEntitiesForTest(table1,columns1),queryParameters!=null&&(queryParameters.add(\"Parameter1\"),queryParameters.add(\"Parameter2\")),functions.add(($t1=new Kusto.Data.IntelliSense.KustoIntelliSenseFunctionEntity,$t1.Name=\"func\",$t1.Expression=\"let func = () { Table1 | project NumField1 };\",$t1.CallName=\"func\",$t1)),functions.add(($t1=new Kusto.Data.IntelliSense.KustoIntelliSenseFunctionEntity,$t1.Name=\"func1\",$t1.Expression=\"let func1 = () { Table1 | project NumField1 };\",$t1.CallName=\"func1\",$t1)),functions.add(($t1=new Kusto.Data.IntelliSense.KustoIntelliSenseFunctionEntity,$t1.Name=\"func2\",$t1.Expression=\"let func2 = () { func1 };\",$t1.CallName=\"func2\",$t1)),functions.add(($t1=new Kusto.Data.IntelliSense.KustoIntelliSenseFunctionEntity,$t1.Name=\"func3\",$t1.Expression=\"let func3 = () { func1 | summarize count() by NumField2};\",$t1.CallName=\"func3\",$t1)),functions.add(($t1=new Kusto.Data.IntelliSense.KustoIntelliSenseFunctionEntity,$t1.Name=\"func4\",$t1.Expression=\"let func4 = () { func | extend NumField3 = 1};\",$t1.CallName=\"func4\",$t1)),functions.add(($t1=new Kusto.Data.IntelliSense.KustoIntelliSenseFunctionEntity,$t1.Name=\"func5\",$t1.Expression=\"let func5 = (x:datetime) { func | extend NumField3 = 1};\",$t1.CallName=\"func5\",$t1)),functions.add(($t1=new Kusto.Data.IntelliSense.KustoIntelliSenseFunctionEntity,$t1.Name=\"func6\",$t1.Expression=\"let func6 = () { func5(1h) };\",$t1.CallName=\"func6\",$t1)),result},RegisterTableEntitiesForTest:function(table,columns){Kusto.UT.IntelliSenseRulesTests.s_columnMappings.setItem(table.Name,System.Linq.Enumerable.from(columns,Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity).select($asm.$.Kusto.UT.IntelliSenseRulesTests.f1).ToArray(System.String));Kusto.UT.IntelliSenseRulesTests.s_columnMappings.setItem(\"database('db1').\"+(table.Name||\"\"),System.Linq.Enumerable.from(columns,Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity).select($asm.$.Kusto.UT.IntelliSenseRulesTests.f1).ToArray(System.String));Kusto.UT.IntelliSenseRulesTests.s_columnMappings.setItem(\"cluster('other').database('db2').\"+(table.Name||\"\"),System.Linq.Enumerable.from(columns,Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity).select($asm.$.Kusto.UT.IntelliSenseRulesTests.f1).ToArray(System.String))}}},methods:{IntelliSenseCommandEntitiesTest:function(){this.CheckProjectedAndExtendedProperties(\"Table1 | project X, Y, Z | project-away X |\",System.Array.init([\"Y\",\"Z\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project X, Y, Z | project-rename A=X |\",System.Array.init([\"A\",\"Y\",\"Z\"],System.String));this.TestPrintOperatorEntities();this.TestParseOperatorEntities();this.CheckProjectedAndExtendedProperties(\"range x from 1 to 1 step 1 | \\r\\n            extend y = 1\\r\\n            | \",System.Array.init([\"x\",\"y\"],System.String));this.CheckProjectedAndExtendedProperties(\"\\r\\n\\r\\n            // comment\\r\\n            Table3\\r\\n            | where Field1 == 'value { value'\\r\\n            | \",System.Array.init([\"Field0\",\"Field1\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table3\\r\\n            | where Field1 == 'value { value'\\r\\n            | \",System.Array.init([\"Field0\",\"Field1\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table3\\r\\n            | \",System.Array.init([\"Field0\",\"Field1\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table3\\r\\n            | where Field1 == 'value{value'\\r\\n            | \",System.Array.init([\"Field0\",\"Field1\"],System.String));this.CheckProjectedAndExtendedProperties(\"T1 \\r\\n            | summarize by key1, key2\\r\\n            | \",System.Array.init([\"key1\",\"key2\"],System.String));this.TestSummarizeOperationsOverFunctions();this.CheckProjectedAndExtendedProperties(\"T1 \\r\\n            | project x1, x2, key\\r\\n            | join \\r\\n              (T2 | project y1, y2, key) on key \\r\\n            | extend e1 = 1\\r\\n            | \",System.Array.init([\"x1\",\"x2\",\"y1\",\"y2\",\"key\",\"e1\"],System.String));this.CheckProjectedAndExtendedProperties(\"KustoSources | project Source, Data | join (KustoLogs | summarize max(ActivityID) by Source, Timestamp ) on Source |\",System.Array.init([\"Source\",\"Data\",\"max_ActivityID\",\"Timestamp\"],System.String));this.CheckProjectedAndExtendedProperties(\"range x from 1 to 1 step 1\\r\\n            | extend y = x + 1, z = x + 2\\r\\n            | summarize val1 = sum(x)/sum(z), sumOfY=sum(y), sumOfZ =sum(z) |\",System.Array.init([\"val1\",\"sumOfY\",\"sumOfZ\"],System.String));this.CheckProjectedAndExtendedProperties(\"range x from 1 to 1 step 1 | \",System.Array.init([\"x\"],System.String));this.CheckProjectedAndExtendedProperties(\"| project Field1, Field2, Field3 \\r\\n            | extend Duration=Field2 - Field3, Field4=xxxx |\",System.Array.init([\"Field1\",\"Field2\",\"Field3\",\"Duration\",\"Field4\"],System.String));this.TestArgMinMaxEntities();this.TestProjectAssignmentEntities();this.TestProjectedAwayEntities();this.TestProjectedRenameEntities();this.CheckProjectedAndExtendedProperties(\"Table1 | project X, Y, Z | reduce by X |\",System.Array.init([\"Pattern\",\"Count\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project X, Y, Z | mvexpand myCount=range(1, 2, 3) |\",System.Array.init([\"myCount\",\"X\",\"Y\",\"Z\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project X, Y, Z | summarize myCount=count(X), mySum= sum(Y), myCount2 = count() by bin(Z, 10min), X |\",System.Array.init([\"myCount\",\"mySum\",\"myCount2\",\"Z\",\"X\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | summarize count(), makelist(ClusterName), makeset(SubscriptionId) by LogicalServerName | \",System.Array.init([\"count_\",\"list_ClusterName\",\"set_SubscriptionId\",\"LogicalServerName\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | summarize count(), any(ClusterName), any(SubscriptionId) by LogicalServerName, AppName, database_id, bin(TIMESTAMP, time(10m)) | \",System.Array.init([\"count_\",\"any_ClusterName\",\"any_SubscriptionId\",\"LogicalServerName\",\"AppName\",\"database_id\",\"TIMESTAMP\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project X, Y, Z | summarize count(X), sum(Y) by bin(Z, 10min), X |\",System.Array.init([\"count_X\",\"sum_Y\",\"Z\",\"X\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project X, Y, Z | summarize count(X), sum(Y) by bin (Z, 10min), X |\",System.Array.init([\"count_X\",\"sum_Y\",\"Z\",\"X\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project X, Y, Z | summarize A=countif(X), countif(Y) by bin (Z, 10min), X |\",System.Array.init([\"A\",\"countif_Y\",\"Z\",\"X\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project X, Y, Z | summarize A=sumif(X, pred1), sumif(Y, pred2) by bin (Z, 10min), X |\",System.Array.init([\"A\",\"sumif_Y\",\"Z\",\"X\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | summarize percentile(X, 10), percentiles(Y, 10, 20, 99.9, 1E-8) |\",System.Array.init([\"percentile_X_10\",\"percentile_Y_10\",\"percentile_Y_20\",\"percentile_Y_99_9\",\"percentile_Y_1E_8\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | summarize percentile(X / 99, 10), percentiles(Y * 1000, 10, 20, 99.9, 1E-8) |\",System.Array.init([\"percentile_X_10\",\"percentile_Y_10\",\"percentile_Y_20\",\"percentile_Y_99_9\",\"percentile_Y_1E_8\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project Field1, Field2, Field3 \\r\\n            | extend Duration=Field2 - Field3, Field4=xxxx \\r\\n            | join (Table2 | extend FieldA=1, FieldB=22 |\",System.Array.init([\"FieldA\",\"FieldB\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project Field1, Field2, Field3 \\r\\n            | extend Duration=Field2 - Field3, Field4=xxxx \\r\\n            | join (Table2 | extend FieldA=1, FieldB=22 | project FieldA | filter X\",System.Array.init([\"FieldA\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project Field1, Field2, Field3\\r\\n            | join (\\r\\n            Table2 | project Field1, Field2, Field3 ) on \",System.Array.init([\"Field1\",\"Field2\",\"Field3\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | extend Y=5 | project Field1, Field2, Field3, Y\\r\\n            | join (\\r\\n            Table2 | extend Y=4 | project Field1, Field2, Field3, Y  ) on \",System.Array.init([\"Field1\",\"Field2\",\"Field3\",\"Y\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | extend X=5 | project X, timestamp, Field1\\r\\n                        | join (\\r\\n                        Table2 | make-series X=sum(Y) on timestamp in range(datetime(3000-01-01),datetime(3000-01-02),1h) by Field1) on \",System.Array.init([\"X\",\"timestamp\",\"Field1\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | make-series X=sum(Y) on timestamp in range(datetime(3000-01-01),datetime(3000-01-02),1h) by Field1\\r\\n                        | join (\\r\\n                        Table2 | extend X=5 | project X, timestamp, Field1) on \",System.Array.init([\"X\",\"timestamp\",\"Field1\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project X, Y | summarize count(X), sum(Y)\",System.Array.init([\"X\",\"Y\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | summarize count(X), sum(Y) |\",System.Array.init([\"count_X\",\"sum_Y\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | summarize count(X), sum(Y) | project count_Z\",System.Array.init([\"count_X\",\"sum_Y\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | summarize count(X), sum(Y) | project count_Z |\",System.Array.init([\"count_Z\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | top-nested 5 of P by count(X) asc, top-nested 6 of Q by sum(Y) desc, top-nested 6 of W by avg(I)|\",System.Array.init([\"aggregated_P\",\"aggregated_Q\",\"aggregated_W\",\"P\",\"Q\",\"W\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | top-nested 5 of P by count(X) asc, top-nested 6 of Q by AggregatedSumY = sum(Y) desc, top-nested 6 of W by AggregatedAvgI = avg(I)|\",System.Array.init([\"aggregated_P\",\"AggregatedSumY\",\"AggregatedAvgI\",\"P\",\"Q\",\"W\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | top-nested 5 of P by count(X) asc, top-nested 6 of Q by AggregatedSumY = sum(Y) desc, top-nested 6 of W by AggregatedAvgI = avg(I) asc, top-nested 5 of M by count(C)|\",System.Array.init([\"aggregated_P\",\"AggregatedSumY\",\"AggregatedAvgI\",\"aggregated_M\",\"P\",\"Q\",\"W\",\"M\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | top-nested 5 of A by count() | \",System.Array.init([\"aggregated_A\",\"A\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project X, Y, Z | summarize count(X), sum(Y) | \",System.Array.init([\"count_X\",\"sum_Y\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project X, Y, Z | summarize count(X), sum(Y) by Z | \",System.Array.init([\"count_X\",\"sum_Y\",\"Z\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project X, Y, Z | summarize count(X), sum(Y) by Z, X | \",System.Array.init([\"count_X\",\"sum_Y\",\"Z\",\"X\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project X, Y, Z | summarize count(), sum(Y) by Z, X | \",System.Array.init([\"count_\",\"sum_Y\",\"Z\",\"X\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project X, Y, Z | summarize count(X), sum(Y) | extend FieldA = x | \",System.Array.init([\"count_X\",\"sum_Y\",\"FieldA\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | summarize count(X), dcount(Y) | project dcount_Y |\",System.Array.init([\"dcount_Y\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project X, Y | summarize countif(X), sum(Y)\",System.Array.init([\"X\",\"Y\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | summarize countif(X), sum(Y) |\",System.Array.init([\"countif_X\",\"sum_Y\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | summarize countif(X), sum(Y) | project count_Z\",System.Array.init([\"countif_X\",\"sum_Y\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | summarize sumif(X,Y), sum(Y) | project count_Z\",System.Array.init([\"sumif_X\",\"sum_Y\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | summarize countif(X), sum(Y) | project count_Z |\",System.Array.init([\"count_Z\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project X, Y, Z | summarize countif(X), sum(Y) | \",System.Array.init([\"countif_X\",\"sum_Y\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project X, Y, Z | summarize sumif(X,Y), sum(Y) | \",System.Array.init([\"sumif_X\",\"sum_Y\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project X, Y, Z | summarize countif(X), sum(Y) by Z | \",System.Array.init([\"countif_X\",\"sum_Y\",\"Z\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project X, Y, Z | summarize sumif(X, Y), sum(Y) by Z | \",System.Array.init([\"sumif_X\",\"sum_Y\",\"Z\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project X, Y, Z | summarize countif(X), sum(Y) by Z, X | \",System.Array.init([\"countif_X\",\"sum_Y\",\"Z\",\"X\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project X, Y, Z | summarize sumif(X, Y), sum(Y) by Z, X | \",System.Array.init([\"sumif_X\",\"sum_Y\",\"Z\",\"X\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project X, Y, Z | summarize countif(X), sum(Y) | extend FieldA = x | \",System.Array.init([\"countif_X\",\"sum_Y\",\"FieldA\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project X, Y, Z | summarize sumif(X, Y), sum(Y) | extend FieldA = x | \",System.Array.init([\"sumif_X\",\"sum_Y\",\"FieldA\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | summarize countif(X), dcount(Y) | project dcount_Y |\",System.Array.init([\"dcount_Y\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | summarize any(X), any(Y) | project any_Y |\",System.Array.init([\"any_Y\"],System.String));this.CheckProjectedAndExtendedProperties(\"| project Field1, Field2, Field3 \\r\\n            | extend Duration=Field2 - Field3, Field4=xxxx \",System.Array.init([\"Field1\",\"Field2\",\"Field3\"],System.String));this.CheckProjectedAndExtendedProperties(\"| project Field1, Field2, Field3 \\r\\n            | extend Duration=Field2 - Field3, Field4=xxxx \\r\\n            | project Duration, Field4  \",System.Array.init([\"Field1\",\"Field2\",\"Field3\",\"Duration\",\"Field4\"],System.String));this.CheckProjectedAndExtendedProperties(\"| project Field1, Field2, Field3 \\r\\n            | extend Duration=Field2 - Field3, Field4=xxxx \\r\\n            | project Duration, Field4 | \",System.Array.init([\"Duration\",\"Field4\"],System.String));this.CheckProjectedAndExtendedProperties(\"| project Field1, Field2, Field3 | extend Duration=Field2 - Field3, Field1=xxxx | \\r\\n            join ( xxxx | project X | extend Y=X, Z=X) on XXX \\r\\n            join ( yyyy | project Field1, Field2, Field3 | extend Duration=Field2 - Field3, FieldX=xxxx |\",System.Array.init([\"Field1\",\"Field2\",\"Field3\",\"Duration\",\"FieldX\"],System.String));this.CheckProjectedAndExtendedProperties(\"| project Field1, Field2, Field3 | extend Duration=Field2 - Field3, Field1=xxxx | \\r\\n            join ( xxxx | project X | extend Y=X, Z=X) on XXX \\r\\n            join ( yyyy | project Field1, Field2, Field3 | extend Duration=Field2 - Field3, FieldX=xxxx \",System.Array.init([\"Field1\",\"Field2\",\"Field3\"],System.String));this.CheckProjectedAndExtendedProperties(\"KustoLogs \\r\\n            | filter EventText like 'Gateway.ExecuteQuery'\\r\\n            | filter Source like 'KUSKUS' or Source like 'ONESI-PROD' or Source like 'IPEPROD'\\r\\n            | extend op=extract('Gateway.ExecuteQuery:.*(join|summarize|filter)', 1, EventText) , is_Join=extract('Gateway.ExecuteQuery:.*(join)', 1, EventText) \\r\\n            | extend is_Filter=extract('Gateway.ExecuteQuery:.*(filter)', 1, EventText) \\r\\n            | filter \",System.Array.init([\"op\",\"is_Join\",\"is_Filter\"],System.String));this.CheckProjectedAndExtendedProperties(\"KustoLogs \\r\\n            | project Field1, Field2, Field3\\r\\n            | extend op=\",System.Array.init([\"Field1\",\"Field2\",\"Field3\"],System.String));this.CheckProjectedAndExtendedProperties(\"KustoLogs \\r\\n            | project Field1, Field2, Field3\\r\\n            | extend op=Field1 - \",System.Array.init([\"Field1\",\"Field2\",\"Field3\"],System.String));this.CheckProjectedAndExtendedProperties(\"KustoLogs \\r\\n            | project Field1, Field2, Field3\\r\\n            | extend op=Field1 + \",System.Array.init([\"Field1\",\"Field2\",\"Field3\"],System.String));this.CheckProjectedAndExtendedProperties(\"KustoLogs \\r\\n            | project Field1, Field2, Field3\\r\\n            | extend op=Field1 / \",System.Array.init([\"Field1\",\"Field2\",\"Field3\"],System.String));this.CheckProjectedAndExtendedProperties(\"KustoLogs \\r\\n            | project Field1, Field2, Field3\\r\\n            | extend op=Field1 * \",System.Array.init([\"Field1\",\"Field2\",\"Field3\"],System.String));this.CheckProjectedAndExtendedProperties(\"KustoLogs \\r\\n            | project Field1, Field2, Field3\\r\\n            | extend op=Field1 + Field2, op2=\",System.Array.init([\"Field1\",\"Field2\",\"Field3\"],System.String));this.CheckProjectedAndExtendedProperties(\"KustoLogs \\r\\n            | filter EventText like 'Gateway.ExecuteQuery'\\r\\n\\r\\n            | extend op=extract('Gateway.ExecuteQuery:.*(join|summarize|filter)', 1, EventText) \\r\\n            | extend is_Join=extract('Gateway.ExecuteQuery:.*(join)', 1, EventText) \\r\\n            | extend is_Filter=extract('Gateway.ExecuteQuery:.*(filter)', 1, EventText) \\r\\n            | filter \",System.Array.init([\"op\",\"is_Join\",\"is_Filter\"],System.String));this.CheckProjectedAndExtendedProperties(\"KustoLogs \\r\\n            | filter EventText like 'Gateway.ExecuteQuery'\\r\\n\\r\\n            | extend op=extract('Gateway.ExecuteQuery:.*(join|summarize|filter)', 1, EventText) \\r\\n            | extend is_Join=extract('Gateway.ExecuteQuery:.*(join)', 1, EventText) \\r\\n            | extend is_Filter=extract('Gateway.ExecuteQuery:.*(filter)', 1, EventText) \\r\\n            | filter \",System.Array.init([\"op\",\"is_Join\",\"is_Filter\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | make-series sum(Y) default=0 on Z in range(datetime(3000-01-01),datetime(3000-01-02),1h) by X |\",System.Array.init([\"sum_Y\",\"Z\",\"X\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | make-series sum_of_y=sum(Y) default= 0 on Z in range(datetime(3000-01-01),datetime(3000-01-02),1h) by X |\",System.Array.init([\"sum_of_y\",\"Z\",\"X\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | make-series sum_of_y=sum(Y) on Z in range(datetime(3000-01-01),datetime(3000-01-02),1h) |\",System.Array.init([\"sum_of_y\",\"Z\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | make-series sum(Y) on Z in range(datetime(3000-01-01),datetime(3000-01-02),1h) by X |\",System.Array.init([\"sum_Y\",\"Z\",\"X\"],System.String));this.CheckProjectedAndExtendedProperties(\" Table1\\r\\n                | sample-distinct 10 of Field1 |\\r\\n                \",System.Array.init([\"Field1\"],System.String));this.CheckProjectedAndExtendedProperties(\" Table1\\r\\n                | sample-distinct 10 of log2(Field1) |\\r\\n                \",System.Array.init([\"Field1\"],System.String));this.CheckProjectedAndExtendedProperties(\"KustoLogs \\r\\n            | project Field1, series_stats(Field2), (rs, s)=series_fit_line(Field3) |\\r\\n                \",System.Array.init([\"Field1\",\"series_stats_Field2_min\",\"series_stats_Field2_min_idx\",\"series_stats_Field2_max\",\"series_stats_Field2_max_idx\",\"series_stats_Field2_avg\",\"series_stats_Field2_stdev\",\"series_stats_Field2_variance\",\"rs\",\"s\"],System.String));this.CheckProjectedAndExtendedProperties(\"KustoLogs \\r\\n            | project Field1, series_stats(Field2), (a,b,c)=series_fit_line(Field3) |\\r\\n                \",System.Array.init([\"Field1\",\"series_stats_Field2_min\",\"series_stats_Field2_min_idx\",\"series_stats_Field2_max\",\"series_stats_Field2_max_idx\",\"series_stats_Field2_avg\",\"series_stats_Field2_stdev\",\"series_stats_Field2_variance\",\"a\",\"b\",\"c\"],System.String));this.CheckProjectedAndExtendedProperties(\"KustoLogs \\r\\n            | extend Field1, (min, min_idx)=series_stats(Field2), (rs, s)=series_fit_line(Field3), mundane=sqrt(Field3) |\\r\\n                \",System.Array.init([\"Field1\",\"min\",\"min_idx\",\"rs\",\"s\",\"mundane\"],System.String));this.CheckProjectedAndExtendedProperties(\"KustoLogs \\r\\n            | extend Field1, series_stats(Field2), series_fit_line(Field3), mundane=sqrt(Field3) |\\r\\n            \",System.Array.init([\"Field1\",\"series_stats_Field2_min\",\"series_stats_Field2_min_idx\",\"series_stats_Field2_max\",\"series_stats_Field2_max_idx\",\"series_stats_Field2_avg\",\"series_stats_Field2_stdev\",\"series_stats_Field2_variance\",\"series_fit_line_Field3_rsquare\",\"series_fit_line_Field3_slope\",\"series_fit_line_Field3_variance\",\"series_fit_line_Field3_rvariance\",\"series_fit_line_Field3_interception\",\"series_fit_line_Field3_line_fit\",\"mundane\"],System.String));this.CheckProjectedAndExtendedProperties(\"KustoLogs \\r\\n            | project Field1, series_fit_2lines(Field2), mundane=sqrt(Field3) |\\r\\n                \",System.Array.init([\"Field1\",\"series_fit_2lines_Field2_rsquare\",\"series_fit_2lines_Field2_split_idx\",\"series_fit_2lines_Field2_variance\",\"series_fit_2lines_Field2_rvariance\",\"series_fit_2lines_Field2_line_fit\",\"series_fit_2lines_Field2_right_rsquare\",\"series_fit_2lines_Field2_right_slope\",\"series_fit_2lines_Field2_right_interception\",\"series_fit_2lines_Field2_right_variance\",\"series_fit_2lines_Field2_right_rvariance\",\"series_fit_2lines_Field2_left_rsquare\",\"series_fit_2lines_Field2_left_slope\",\"series_fit_2lines_Field2_left_interception\",\"series_fit_2lines_Field2_left_variance\",\"series_fit_2lines_Field2_left_rvariance\",\"mundane\"],System.String));this.CheckProjectedAndExtendedProperties(\"KustoLogs \\r\\n            | project Field1, series_stats(Field2), (min, min_idx)=series_stats(Field2) |\\r\\n                \",System.Array.init([\"Field1\",\"series_stats_Field2_min\",\"series_stats_Field2_min_idx\",\"series_stats_Field2_max\",\"series_stats_Field2_max_idx\",\"series_stats_Field2_avg\",\"series_stats_Field2_stdev\",\"series_stats_Field2_variance\",\"min\",\"min_idx\"],System.String))},IntelliSenseCommandEntities_EscapedNamesTest:function(){this.CheckProjectedAndExtendedProperties(\"range x from 1 to 1 step 1 \\r\\n| project a.b, a.[c], a.[c][d], a.[c].[e] |\",System.Array.init([\"a_b\",\"a_c\",\"a_c_d\",\"a_c_e\"],System.String));this.CheckProjectedAndExtendedProperties(\"range x from 1 to 1 step 1 \\r\\n| project a.['b'], a.['c'], a.[\\\"c\\\"][d], a.['c'].[\\\"e\\\"] |\",System.Array.init([\"a_b\",\"a_c\",\"a_c_d\",\"a_c_e\"],System.String));this.CheckProjectedAndExtendedProperties(\"range x from 1 to 1 step 1 \\r\\n| project a.['[b]'], a.['[c]'], a.[\\\"[c]\\\"][d], a.['[c]'].[\\\"[e]\\\"] |\",System.Array.init([\"['a_[b]']\",\"['a_[c]']\",\"['a_[c]_d']\",\"['a_[c]_[e]']\"],System.String));this.CheckProjectedAndExtendedProperties(\"range x from 1 to 1 step 1 \\r\\n| project a.['b c'] |\",System.Array.init([\"a_b_c\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | summarize percentile(X / 99, 10), percentiles(Y * 1000, 10, 20, 99.9, 1E-8) |\",System.Array.init([\"percentile_X_10\",\"percentile_Y_10\",\"percentile_Y_20\",\"percentile_Y_99_9\",\"percentile_Y_1E_8\"],System.String));this.CheckProjectedAndExtendedProperties(\"range x from 1 to 1 step 1 \\r\\n| extend ['abc def'] = 1\\r\\n| summarize min(['abc def']), max(['abc def']), avg(['abc def']) |\",System.Array.init([\"['min_abc def']\",\"['max_abc def']\",\"['avg_abc def']\"],System.String));this.CheckProjectedAndExtendedProperties(\"range x from 1 to 1 step 1 | extend ['abc def'] = 1 | \",System.Array.init([\"x\",\"['abc def']\"],System.String));this.CheckProjectedAndExtendedProperties(\"range x from 1 to 1 step 1 | project ['abc def'] = 1 | \",System.Array.init([\"['abc def']\"],System.String))},IntelliSenseCommandEntities_FindTest:function(){this.TestEntitiesForFindFilterAndProjection(\"find where \",System.Array.init([\"Field0\",\"Field1\",\"*\"],System.String));this.TestEntitiesForFindFilterAndProjection(\"find in (*) where \",System.Array.init([\"Field0\",\"Field1\",\"*\"],System.String));this.TestEntitiesForFindFilterAndProjection(\"find in (Table1) where \",System.Array.init([\"*\"],System.String),!0);this.TestEntitiesForFindFilterAndProjection(\"find in (['Table.2']) where \",System.Array.init([\"*\"],System.String),!0);this.TestEntitiesForFindFilterAndProjection(\"find in (Table1, ['Table.2']) where \",System.Linq.Enumerable.from(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(\"Table1\"),System.String).intersect(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(\"['Table.2']\")).concat(System.Array.init([\"*\"],System.String)).ToArray(System.String));this.TestEntitiesForFindFilterAndProjection(\"find in (database('*').Table1) where \",System.Linq.Enumerable.from(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(\"Table1\"),System.String).concat(System.Array.init([\"*\"],System.String)).ToArray(System.String));this.TestEntitiesForFindFilterAndProjection(\"find in (database('*').*1, *1) where \",System.Linq.Enumerable.from(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(\"Table1\"),System.String).concat(System.Array.init([\"*\"],System.String)).ToArray(System.String));this.TestEntitiesForFindFilterAndProjection(\"find in (Table1, Table2) where \",System.Array.init([\"*\"],System.String));this.TestEntitiesForFindFilterAndProjection(\"find where 'abc' project \",System.Array.init([\"Field0\",\"Field1\",\"pack(*)\"],System.String));this.TestEntitiesForFindFilterAndProjection('find in (*) where Field0 == \"abc\" project ',System.Array.init([\"Field0\",\"Field1\",\"pack(*)\"],System.String));this.TestEntitiesForFindFilterAndProjection('find in (Table1) where Field0 == \"abc\" project ',System.Array.init([\"pack(*)\"],System.String),!0);this.TestEntitiesForFindFilterAndProjection(\"find in (['Table.2']) where Field0 == \\\"abc\\\" project \",System.Array.init([\"pack(*)\"],System.String),!0);this.TestEntitiesForFindFilterAndProjection(\"find in (Table1, ['Table.2']) where Field0 == \\\"abc\\\" project \",System.Linq.Enumerable.from(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(\"Table1\"),System.String).intersect(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(\"['Table.2']\")).concat(System.Array.init([\"pack(*)\"],System.String)).ToArray(System.String));this.TestEntitiesForFindFilterAndProjection(\"find in (database('*').Table1) where Field0 == \\\"abc\\\" project \",System.Linq.Enumerable.from(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(\"Table1\"),System.String).concat(System.Array.init([\"pack(*)\"],System.String)).ToArray(System.String));this.TestEntitiesForFindFilterAndProjection('find in (Table1, Table2) where Field0 == \"abc\" project ',System.Array.init([\"pack(*)\"],System.String));this.TestEntitiesForFindFilterAndProjection(\"find 'abc' project Field0, Field1\\r\\n            | \",System.Array.init([\"source_\",\"Field0\",\"Field1\"],System.String));this.TestEntitiesForFindFilterAndProjection(\"find 'abc' project Field0, Field1, pack(*)\\r\\n            | \",System.Array.init([\"source_\",\"Field0\",\"Field1\",\"pack_\"],System.String));this.TestEntitiesForFindFilterAndProjection(\"find 'abc' project Field0, pack(*)\\r\\n            | \",System.Array.init([\"source_\",\"Field0\",\"pack_\"],System.String));this.TestEntitiesForFindFilterAndProjection(\"find 'abc' project pack(*)\\r\\n            | \",System.Array.init([\"source_\",\"pack_\"],System.String));this.TestEntitiesForFindFilterAndProjection(\"find where 'abc' project Field0, Field1\\r\\n            | \",System.Array.init([\"source_\",\"Field0\",\"Field1\"],System.String));this.TestEntitiesForFindFilterAndProjection(\"find where 'abc' project Field0, Field1, pack(*)\\r\\n            | \",System.Array.init([\"source_\",\"Field0\",\"Field1\",\"pack_\"],System.String));this.TestEntitiesForFindFilterAndProjection(\"find where 'abc' project pack(*)\\r\\n            | \",System.Array.init([\"source_\",\"pack_\"],System.String));this.TestEntitiesForFindFilterAndProjection(\"find withsource=Source where 'abc' project Field0, Field1\\r\\n            | \",System.Array.init([\"Source\",\"Field0\",\"Field1\"],System.String));this.TestEntitiesForFindFilterAndProjection(\"find withsource=SourceName in (*) where 'abc' \\r\\n| \",System.Array.init([\"SourceName\",\"Field0\",\"Field1\",\"pack_\"],System.String));this.TestEntitiesForFindFilterAndProjection(\"find withsource=SourceName in (database('db1').*, *) where 'abc'\\r\\n| \",System.Array.init([\"SourceName\",\"Field0\",\"Field1\",\"pack_\"],System.String));this.TestEntitiesForFindFilterAndProjection(\"find withsource=SourceName in (database('db1').*) where 'abc'\\r\\n| \",System.Array.init([\"SourceName\",\"Field0\",\"Field1\",\"pack_\"],System.String));this.TestEntitiesForFindFilterAndProjection(\"find withsource=SourceName in (Table1) where 'abc'\\r\\n| \",System.Linq.Enumerable.from(System.Array.init([\"SourceName\",\"pack_\"],System.String),System.String).union(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(\"Table1\")).ToArray(System.String));this.TestEntitiesForFindFilterAndProjection(\"find 'abc'\\r\\n| \",System.Array.init([\"source_\",\"Field0\",\"Field1\",\"pack_\"],System.String));this.TestEntitiesForFindFilterAndProjection(\"find in (Table1) where 'abc'\\r\\n| \",System.Linq.Enumerable.from(System.Array.init([\"source_\",\"pack_\"],System.String),System.String).union(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(\"Table1\")).ToArray(System.String));this.TestEntitiesForFindFilterAndProjection(\"find in (Table1, ['Table.2']) where 'abc'\\r\\n| \",System.Linq.Enumerable.from(System.Array.init([\"source_\",\"pack_\"],System.String),System.String).union(System.Linq.Enumerable.from(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(\"Table1\"),System.String).intersect(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(\"['Table.2']\"))).ToArray(System.String));this.TestEntitiesForFindFilterAndProjection(\"find withsource=SourceName where 'abc'\\r\\n| \",System.Array.init([\"SourceName\",\"Field0\",\"Field1\",\"pack_\"],System.String));this.TestEntitiesForFindFilterAndProjection(\"find in (Table1, database('db1').Table1) where 'abc'\\r\\n| \",System.Linq.Enumerable.from(System.Array.init([\"source_\",\"pack_\"],System.String),System.String).union(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(\"Table1\")).ToArray(System.String))},IntelliSenseCommandEntities_SearchTest:function(){var expectedOptions,unionOfAllColumns=System.Linq.Enumerable.from(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(\"Table1\"),System.String).union(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(\"['Table.2']\")).union(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(\"Table3\")),additionalOptions=System.Linq.Enumerable.from(System.Array.init(['\"\"',\"*\"],System.String),System.String).union(Kusto.Data.IntelliSense.CslCommandParser.SortedExtendFunctions),additionalOptionsIncludingIn=additionalOptions.concat(System.Array.init([\"in\"],System.String)),additionalOptionsIncludingKind=additionalOptionsIncludingIn.concat(System.Array.init([\"kind=\"],System.String));expectedOptions=unionOfAllColumns.union(additionalOptionsIncludingKind).ToArray(System.String);this.TestOptionsForSearch(\"search \",expectedOptions);expectedOptions=unionOfAllColumns.union(additionalOptionsIncludingIn).ToArray(System.String);this.TestOptionsForSearch(\"search kind=case_sensitive \",expectedOptions);expectedOptions=unionOfAllColumns.union(additionalOptions).ToArray(System.String);this.TestOptionsForSearch(\"search 'abc' and \",expectedOptions);expectedOptions=System.Linq.Enumerable.from(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(\"Table3\"),System.String).union(additionalOptions).ToArray(System.String);this.TestOptionsForSearch(\"Table3 | search 'abc' and \",expectedOptions);expectedOptions=System.Linq.Enumerable.from(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(\"Table3\"),System.String).union(additionalOptions).ToArray(System.String);this.TestOptionsForSearch(\"search in (Table3) 'abc' and \",expectedOptions);expectedOptions=System.Linq.Enumerable.from(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(\"Table3\"),System.String).union(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(\"['Table.2']\")).union(additionalOptions).ToArray(System.String);this.TestOptionsForSearch(\"search in (Table3,['Table.2']) 'abc' and \",expectedOptions);expectedOptions=System.Linq.Enumerable.from(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(\"Table3\"),System.String).union(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(\"Table1\")).union(additionalOptions).ToArray(System.String);this.TestOptionsForSearch(\"search in (T*) 'abc' and \",expectedOptions);expectedOptions=unionOfAllColumns.union(additionalOptions).ToArray(System.String);this.TestOptionsForSearch(\"search in (*) 'abc' and \",expectedOptions);expectedOptions=System.Linq.Enumerable.from(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(\"Table3\"),System.String).union(additionalOptions).ToArray(System.String);this.TestOptionsForSearch(\"search in (database('db1').Table3) 'abc' and \",expectedOptions);expectedOptions=System.Linq.Enumerable.from(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(\"Table3\"),System.String).union(additionalOptions).ToArray(System.String);this.TestOptionsForSearch(\"search in (database('db1').T*3) 'abc' and \",expectedOptions);expectedOptions=unionOfAllColumns.union(additionalOptions).ToArray(System.String);this.TestOptionsForSearch(\"search in (database('db1').T*) 'abc' and \",expectedOptions)},TestOptionsForSearch:function(command,expectedOptions){var context=this.GetQueryContext(command);this.ValidateSearchRules(command,context,expectedOptions)},ValidateSearchRules:function(command,tableContext,expectedOptions){var $t,rule={},actualOptions;Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider.TryMatchSpecificRule(command,tableContext,Kusto.Data.IntelliSense.RuleKind.YieldPostSearchOptions,rule)||Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider.TryMatchSpecificRule(command,tableContext,Kusto.Data.IntelliSense.RuleKind.YieldInsideSearchOptions,rule)||Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider.TryMatchSpecificRule(command,tableContext,Kusto.Data.IntelliSense.RuleKind.YieldPostSearchKindOptions,rule)||Kusto.UT.IntelliSenseRulesTests.Assert.Fail(System.String.format(\"No matching search rule for query '{0}'\",[command]));actualOptions=($t=System.String,System.Linq.Enumerable.from(rule.v.GetOptions(tableContext),$t).toList($t));Kusto.UT.IntelliSenseRulesTests.ValidateEntities(command,expectedOptions,actualOptions)},TestProjectAssignmentEntities:function(){this.CheckProjectedAndExtendedProperties(\"Table1\\r\\n                | project x=1 |\\r\\n                \",System.Array.init([\"x\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1\\r\\n                | project y=xxxx+1, z= 33, x=xxxx/2 |\\r\\n                \",System.Array.init([\"x\",\"y\",\"z\"],System.String))},TestProjectedAwayEntities:function(){this.CheckProjectedAndExtendedProperties(\"Table1 | project X, Y, Z | project-away X |\",System.Array.init([\"Y\",\"Z\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project X, Y, Z | mvexpand myCount=range(1, 2, 3) | project-away Y |\",System.Array.init([\"myCount\",\"X\",\"Z\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project X, Y, Z | summarize myCount=count(X), mySum= sum(Y), myCount2 = count() by bin(Z, 10min), X | project-away Z |\",System.Array.init([\"myCount\",\"mySum\",\"myCount2\",\"X\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project-away ClusterName |summarize count(), any(SubscriptionId) by LogicalServerName, AppName, database_id, bin(TIMESTAMP, time(10m)) | \",System.Array.init([\"count_\",\"any_SubscriptionId\",\"LogicalServerName\",\"AppName\",\"database_id\",\"TIMESTAMP\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project-away X | summarize sum(Y) by bin(Z, 10min)|\",System.Array.init([\"sum_Y\",\"Z\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | project Field1, Field2, Field3 \\r\\n            | extend Duration=Field2 - Field3, Field4=xxxx \\r\\n            | join (Table2 | extend FieldA=1, FieldB=22 | project-away FieldB | filter X\",System.Array.init([\"FieldA\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | summarize count(X), dcount(Y) | project-away count_X |\",System.Array.init([\"dcount_Y\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 | summarize any(X), any(Y) | project-away any_Y |\",System.Array.init([\"any_X\"],System.String));this.CheckProjectedAndExtendedProperties(\"| project Field1, Field2, Field3 \\r\\n            | extend Duration=Field2 - Field3, Field4=xxxx \\r\\n            | project-away Duration, Field4 | \",System.Array.init([\"Field1\",\"Field2\",\"Field3\"],System.String));this.CheckProjectedAndExtendedProperties(\"KustoLogs \\r\\n            | filter EventText like 'Gateway.ExecuteQuery'\\r\\n            | extend fake=1\\r\\n            | extend op=extract('Gateway.ExecuteQuery:.*(join|summarize|filter)', 1, EventText) \\r\\n            | extend is_Join=extract('Gateway.ExecuteQuery:.*(join)', 1, EventText) \\r\\n            | extend is_Filter=extract('Gateway.ExecuteQuery:.*(filter)', 1, EventText) \\r\\n            | project-away fake |\",System.Array.init([\"op\",\"is_Join\",\"is_Filter\"],System.String))},TestProjectedRenameEntities:function(){this.CheckProjectedAndExtendedProperties(\"Table1 \\r\\n| project X, Y, Z \\r\\n| project-rename A=X \\r\\n| \",System.Array.init([\"A\",\"Y\",\"Z\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 \\r\\n| project X, Y, Z \\r\\n| project-rename B=Z, A=X \\r\\n| \",System.Array.init([\"A\",\"Y\",\"B\"],System.String))},TestPrintOperatorEntities:function(){this.CheckProjectedAndExtendedProperties(\"print Message = 'xyz' |\",System.Array.init([\"Message\"],System.String))},TestParseOperatorEntities:function(){this.CheckProjectedAndExtendedProperties(\"range x from 1 to 1 step 1\\r\\n                | extend str = ''string''\\r\\n                | parse str with * \\\"s\\\" substr * |\",System.Array.init([\"x\",\"str\",\"substr\"],System.String));this.CheckProjectedAndExtendedProperties(\"range x from 1 to 1 step 1\\r\\n                | extend str = ''string''\\r\\n                | parse str with * \\\"s\\\" substr 'abdc' substr2:string * |\",System.Array.init([\"x\",\"str\",\"substr\",\"substr2\"],System.String));this.CheckProjectedAndExtendedProperties(\"range x from 1 to 1 step 1\\r\\n                | extend str = ''string''\\r\\n                | parse str with * \\\"s\\\" substr 'abdc' substr2:string * num1:int |\",System.Array.init([\"x\",\"str\",\"substr\",\"substr2\",\"num1\"],System.String))},TestArgMinMaxEntities:function(){this.CheckProjectedAndExtendedProperties(\"Table1\\r\\n                | summarize argmin(c0, c1, c2) |\\r\\n                \",System.Array.init([\"min_c0\",\"min_c0_c1\",\"min_c0_c2\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1\\r\\n                | summarize argmin(c0+1d, c1/c2, c2+c3) |\\r\\n                \",System.Array.init([\"min_\",\"min__arg1\",\"min__arg2\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1\\r\\n                | summarize argmax(c0, c1, c2) by group1, group2 |\\r\\n                \",System.Array.init([\"max_c0\",\"max_c0_c1\",\"max_c0_c2\",\"group1\",\"group2\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1\\r\\n                | summarize argmax(c0+1d, c1/c2, c2+c3) |\\r\\n                \",System.Array.init([\"max_\",\"max__arg1\",\"max__arg2\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1\\r\\n                | project column1, column2, column3, xyz\\r\\n                | summarize argmin(column1, *) by column3, column2 |\\r\\n                \",System.Array.init([\"min_column1\",\"min_column1_xyz\",\"column3\",\"column2\"],System.String),System.Array.init([\"column1\",\"column2\",\"column3\",\"xyz\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 \\r\\n                | project column1, column2, column3, xyz\\r\\n                | summarize argmin(column1, [*col*]) by column3 |\\r\\n                \",System.Array.init([\"min_column1\",\"min_column1_column2\",\"column3\"],System.String),System.Array.init([\"column1\",\"column2\",\"column3\",\"xyz\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1\\r\\n                | summarize arg_min(c0, c1, c2) |\\r\\n                \",System.Array.init([\"c0\",\"c1\",\"c2\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1\\r\\n                | summarize arg_min(c0+1d, c1/c2, c2+c3) |\\r\\n                \",System.Array.init([\"min_\",\"min__arg1\",\"min__arg2\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1\\r\\n                | summarize arg_min(c0+1d, c1/c2, c2) |\\r\\n                \",System.Array.init([\"min_\",\"min__arg1\",\"c2\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1\\r\\n                | summarize arg_max(c0, c1, c2) by group1, group2 |\\r\\n                \",System.Array.init([\"c0\",\"c1\",\"c2\",\"group1\",\"group2\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1\\r\\n                | summarize arg_max(c0+1d, c1/c2, c2+c3) |\\r\\n                \",System.Array.init([\"max_\",\"max__arg1\",\"max__arg2\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1\\r\\n                | summarize arg_max(c0, c1/c2, c2+c3, c2) |\\r\\n                \",System.Array.init([\"c0\",\"max_c0_arg1\",\"max_c0_arg2\",\"c2\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1\\r\\n                | project column1, column2, column3, xyz\\r\\n                | summarize arg_min(column1, *) by column3, column2 |\\r\\n                \",System.Array.init([\"column1\",\"xyz\",\"column3\",\"column2\"],System.String),System.Array.init([\"column1\",\"column2\",\"column3\",\"xyz\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1 \\r\\n                | project column1, column2, column3, xyz\\r\\n                | summarize arg_min(column1, [*col*]) by column3 |\\r\\n                \",System.Array.init([\"column1\",\"column2\",\"column3\"],System.String),System.Array.init([\"column1\",\"column2\",\"column3\",\"xyz\"],System.String))},TestSummarizeOperationsOverFunctions:function(){this.CheckProjectedAndExtendedProperties(\"range x from 1 to 1 step 1\\r\\n| extend y = x + 1, z = x + 2\\r\\n| summarize val1 = sum(x)/sum(z), sumOfY=sum(y), sumOfZ =sum(z) |\",System.Array.init([\"val1\",\"sumOfY\",\"sumOfZ\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1\\r\\n                | project column1, column2, column3, xyz\\r\\n                | summarize argmin(column1, *) by column3, column2 |\\r\\n                \",System.Array.init([\"min_column1\",\"min_column1_xyz\",\"column3\",\"column2\"],System.String),System.Array.init([\"column1\",\"column2\",\"column3\",\"xyz\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1\\r\\n                | summarize argmax(c0, c1, c2) by group1, group2 |\\r\\n                \",System.Array.init([\"max_c0\",\"max_c0_c1\",\"max_c0_c2\",\"group1\",\"group2\"],System.String));this.CheckProjectedAndExtendedProperties(\"KustoSources | project Source, Data | join (KustoLogs | summarize max(ActivityID) by Source, Timestamp ) on Source |\",System.Array.init([\"Source\",\"Data\",\"max_ActivityID\",\"Timestamp\"],System.String));this.CheckProjectedAndExtendedProperties(\"KustoSources | project Source, Data | join (KustoLogs | summarize max(strlen(ActivityID)) by Source, Timestamp ) on Source |\",System.Array.init([\"Source\",\"Data\",\"max_\",\"Timestamp\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1\\r\\n                | summarize argmin(c0, c1, c2) |\\r\\n                \",System.Array.init([\"min_c0\",\"min_c0_c1\",\"min_c0_c2\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1\\r\\n                | summarize argmin(strlen(c0), c1, c2) |\\r\\n                \",System.Array.init([\"min_\",\"min__c1\",\"min__c2\"],System.String));this.CheckProjectedAndExtendedProperties(\"Table1\\r\\n                | summarize argmax(strlen(c0), c1, c2) |\\r\\n                \",System.Array.init([\"max_\",\"max__c1\",\"max__c2\"],System.String))},IntelliSenseCommandEntitiesForTablesTest:function(){this.TestTableEntities(\"Table1\");this.TestTableEntities(\"['Table.2']\");this.TestTableEntities(\"database('db1').Table1\");this.TestTableEntities(\"database('db1').['Table.2']\");this.TestTableEntities(\"cluster('other').database('db2').Table1\");this.TestTableEntities(\"cluster('other').database('db2').['Table.2']\")},TestTableEntities:function(tableName){var tableContext=Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider.AnalyzeCommand$1(tableName,null).Context;this.CheckQueryProperties(tableName,tableContext,Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(tableName))},IntelliSenseCommandEntitiesForClusters:function(){this.CheckDatabases(\"cluster('other').database(\",System.Array.init([\"'db2'\"],System.String));this.CheckDatabases(\"find in (cluster('other').database(\",System.Array.init([\"'db2'\"],System.String));this.CheckDatabases(\"find in (cluster('other').database('db2').Table1, cluster('other').database(\",System.Array.init([\"'db2'\"],System.String));this.CheckDatabases(\"#connect cluster('other').database(\",System.Array.init([\"'db2'\"],System.String))},IntelliSenseCommandEntitiesForGetSchemaOperator:function(){var expected=System.Array.init([\"ColumnName\",\"ColumnOrdinal\",\"DataType\",\"ColumnType\"],System.String);this.CheckProjectedAndExtendedProperties(\"Table1 | summarize count() by Source | getschema | project \",expected);this.CheckProjectedAndExtendedProperties(\"Table1 | union (Table2) | getschema | sort by \",expected);this.CheckProjectedAndExtendedProperties(\"Table1 | join (Table2) on ActivityId | getschema | project \",expected)},CheckDatabases:function(command,expectedFields){var $t,tableContext=this.GetQueryContext(command),rule={},existingFields;Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider.TryMatchSpecificRule(command,tableContext,Kusto.Data.IntelliSense.RuleKind.YieldDatabaseNamesOptions,rule)||Kusto.UT.IntelliSenseRulesTests.Assert.Fail(System.String.format(\"Couldn't derive 'databases' rule for the query '{0}'\",[command]));existingFields=($t=System.String,System.Linq.Enumerable.from(rule.v.GetOptions(tableContext),$t).toList($t));Kusto.UT.IntelliSenseRulesTests.ValidateEntities(command,expectedFields,existingFields)},IntelliSenseCommandEntitiesUsingFunctionsTest:function(){this.CheckProjectedAndExtendedProperties(\"func6 | \",System.Array.init([\"NumField1\",\"NumField3\"],System.String));this.CheckProjectedAndExtendedProperties(\"func4 | \",System.Array.init([\"NumField1\",\"NumField3\"],System.String));this.CheckProjectedAndExtendedProperties(\"func2 | \",System.Array.init([\"NumField1\"],System.String));this.CheckProjectedAndExtendedProperties(\"func1 | \",System.Array.init([\"NumField1\"],System.String));this.CheckProjectedAndExtendedProperties(\"func3 | extend y = 111 | \",System.Array.init([\"count_\",\"NumField2\",\"y\"],System.String))},IntelliSenseEntityParserTest:function(){var command='argmax(PreciseTimeStamp, IsHealthy), max(iff(IsHealthy == 1, PreciseTimeStamp, datetime(\"2000-01\")))',entities=System.Array.init([\"argmax:PreciseTimeStamp\",'max:iff(IsHealthy == 1, PreciseTimeStamp, datetime(\"2000-01\"))'],System.String),resolvedEntities=Kusto.Data.IntelliSense.ExpressionEntityParser.ParseEntities(command),result=System.Linq.Enumerable.from(resolvedEntities,Kusto.Data.IntelliSense.ExpressionEntity).select($asm.$.Kusto.UT.IntelliSenseRulesTests.f2).toList(System.String);Kusto.UT.IntelliSenseRulesTests.ValidateEntities(command,entities,result);var command1=\"(Timestamp, EventText)= argmin(Timestamp, EventText), RootActivityId\",entities1=System.Array.init([\":Timestamp\",\":EventText\",\":RootActivityId\"],System.String),resolvedEntities1=Kusto.Data.IntelliSense.ExpressionEntityParser.ParseEntities(command1),result1=System.Linq.Enumerable.from(resolvedEntities1,Kusto.Data.IntelliSense.ExpressionEntity).select($asm.$.Kusto.UT.IntelliSenseRulesTests.f2).toList(System.String);Kusto.UT.IntelliSenseRulesTests.ValidateEntities(command1,entities1,result1);var command2=\"makeset(ReportIndex), makeset(AlertId), File_Sha256)\",entities2=System.Array.init([\"makeset:ReportIndex\",\"makeset:AlertId\",\":File_Sha256\"],System.String),resolvedEntities2=Kusto.Data.IntelliSense.ExpressionEntityParser.ParseEntities(command2),result2=System.Linq.Enumerable.from(resolvedEntities2,Kusto.Data.IntelliSense.ExpressionEntity).select($asm.$.Kusto.UT.IntelliSenseRulesTests.f2).toList(System.String);Kusto.UT.IntelliSenseRulesTests.ValidateEntities(command2,entities2,result2)},GetQueryContext:function(command){return Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider.AnalyzeCommand$1(command,null).Context},CheckQueryProperties:function(command,tableContext,expectedFields){var $t,rule={},existingFields;Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider.TryMatchSpecificRule(command,tableContext,Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForFilterInFind,rule)||Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider.TryMatchSpecificRule((command||\"\")+\" project \",tableContext,Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProjectInFind,rule)||Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider.TryMatchSpecificRule((command||\"\")+\" | project \",tableContext,Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProject,rule)||Kusto.UT.IntelliSenseRulesTests.Assert.Fail(System.String.format(\"Couldn't derive 'find .. where', 'find .. where .. project' and 'project' rules for the query '{0}'\",[command]));existingFields=($t=System.String,System.Linq.Enumerable.from(rule.v.GetOptions(tableContext),$t).toList($t));Kusto.UT.IntelliSenseRulesTests.ValidateEntities(command,expectedFields,existingFields)},CheckProjectedAndExtendedProperties:function(command,expectedFields,existingFields){var $t,flatten,analyzedCommand;existingFields===void 0&&(existingFields=null);$t=Bridge.getEnumerator(System.Array.init([!0,!1],System.Boolean));try{while($t.moveNext()){flatten=$t.Current;System.String.contains(command,\"//\")||(command=flatten?System.String.replaceAll(System.String.replaceAll(command,String.fromCharCode(13),String.fromCharCode(32)),String.fromCharCode(10),String.fromCharCode(32)):System.String.replaceAll(System.String.replaceAll(command,String.fromCharCode(13),String.fromCharCode(32)),String.fromCharCode(10),String.fromCharCode(32)));existingFields==null&&(analyzedCommand=Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider.AnalyzeCommand$1(command,null),existingFields=Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(analyzedCommand.Context.Context));var entititesList=new(System.Collections.Generic.List$1(System.String).ctor),finalEntitiesList=new(System.Collections.Generic.List$1(System.String).ctor),entitiesResolveResult=Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider.ResolveEntitiesFromCommand(command,entititesList,existingFields);switch(entitiesResolveResult){case Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.ReplaceEntities:finalEntitiesList.AddRange(entititesList);break;case Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.None:existingFields!=null&&finalEntitiesList.AddRange(existingFields);break;case Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.AppendEntities:existingFields!=null&&finalEntitiesList.AddRange(existingFields);finalEntitiesList.AddRange(entititesList);break}Kusto.UT.IntelliSenseRulesTests.ValidateEntities(command,expectedFields,finalEntitiesList)}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}},TestEntitiesForFindFilterAndProjection:function(command,columns,isAdditionalColumns){columns===void 0&&(columns=null);isAdditionalColumns===void 0&&(isAdditionalColumns=!1);var tableContext=this.GetQueryContext(command);this.CheckQueryProperties(command,tableContext,isAdditionalColumns?columns==null?Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(tableContext.Context):System.Linq.Enumerable.from(Kusto.UT.IntelliSenseRulesTests.GetColumnsOfTable(tableContext.Context),System.String).concat(columns).ToArray(System.String):columns)},IntelliSenseFilterTest:function(){this.TestFilter(\"filter\",\"like\");this.TestFilter(\"filter\",\"contains\");this.TestFilter(\"filter\",\"notcontains\");this.TestFilter(\"where\",\"like\");this.TestFilter(\"where\",\"contains\");this.TestFilter(\"where\",\"notcontains\");this.TestFilter(\"where\",\"==\");this.TestFilter(\"where\",\"!=\")},TestFilter:function(filterKeyword,containsKeyword){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture(\"Table1 | {0}\",[filterKeyword,containsKeyword]),Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture(\"Table1 | {0} \",[filterKeyword,containsKeyword]),Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForFilter));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture(\"Table1 | {0}    \",[filterKeyword,containsKeyword]),Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForFilter));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture(\"Table1 | {0} Field1\",[filterKeyword,containsKeyword]),Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture(\"Table1 | {0} Field1 \",[filterKeyword,containsKeyword]),Kusto.Data.IntelliSense.RuleKind.YieldStringComparisonOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture(\"Table1 | {0} FieldX \",[filterKeyword,containsKeyword]),Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture(\"Table1 | {0} Field1 {1}\",[filterKeyword,containsKeyword]),Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture(\"Table1 | {0} Field1 {1} \",[filterKeyword,containsKeyword]),Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture(\"Table1 | {0} Field1 {1} 'xxx' and \",[filterKeyword,containsKeyword]),Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForFilter));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture(\"Table1 | {0} Field1 {1} 'xxx' and Field2 \",[filterKeyword,containsKeyword]),Kusto.Data.IntelliSense.RuleKind.YieldStringComparisonOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture(\"Table1 | {0} Field1 {1} 'xxx' or \",[filterKeyword,containsKeyword]),Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForFilter));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture(\"Table1 | {0} Field1 {1} 'xxx' or Field2 \",[filterKeyword,containsKeyword]),Kusto.Data.IntelliSense.RuleKind.YieldStringComparisonOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture(\"Table1 | {0} Field1 {1} 'xxx' |\",[filterKeyword,containsKeyword]),Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture(\"Table1 | {0} Field1 {1} 'xxx' | \",[filterKeyword,containsKeyword]),Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture(\"Table1 | {0} NumField1\",[filterKeyword]),Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture(\"Table1 | {0} NumField1 \",[filterKeyword]),Kusto.Data.IntelliSense.RuleKind.YieldNumericComparisonOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture(\"Table1 | {0} NumField1 ==\",[filterKeyword]),Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture(\"Table1 | {0} NumField1 == 10 and \",[filterKeyword]),Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForFilter));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture(\"Table1 | {0} NumField1 == 10 and NumField1 \",[filterKeyword]),Kusto.Data.IntelliSense.RuleKind.YieldNumericComparisonOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture(\"Table1 | {0} NumField1 == 10 or \",[filterKeyword]),Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForFilter));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture(\"Table1 | {0} NumField1 == 10 or NumField1 \",[filterKeyword]),Kusto.Data.IntelliSense.RuleKind.YieldNumericComparisonOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture(\"Table1 | xxx Field1, Field2 | {0} \",[filterKeyword]),Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForFilter));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture(\"Table1 | xxx Field1, Field2 {0} \",[filterKeyword]),Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture(\"Table1 | {0} Field1\\r\\n    {1}               \\r\\n    'dddd'  \",[filterKeyword,containsKeyword]),Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture(\"Table1 | filter {0}\\r\\n    {1}               \\r\\n    'dddd'  \\r\\n    \",[filterKeyword,containsKeyword]),Kusto.Data.IntelliSense.RuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseRangeTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"range\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"range ziv\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"range ziv \",Kusto.Data.IntelliSense.RuleKind.YieldRangeFromOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"range ziv from\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"range ziv from \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"range ziv from datetime(\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"range ziv from datetime(2012-01-01)\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"range ziv from datetime(2012-01-01) \",Kusto.Data.IntelliSense.RuleKind.YieldRangeFromToOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"range ziv from datetime(2012-01-01) to\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"range ziv from datetime(2012-01-01) to \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"range ziv from datetime(2012-01-01) to datetime(2013-01-01)\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"range ziv from datetime(2012-01-01) to datetime(2013-01-01) \",Kusto.Data.IntelliSense.RuleKind.YieldRangeFromToStepOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"range ziv from datetime(2012-01-01) to datetime(2013-01-01) st\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"range ziv from datetime(2012-01-01) to datetime(2013-01-01) step 123\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"range ziv from datetime(2012-01-01) to datetime(2013-01-01) step 123 \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"range ziv from 123.4\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"range ziv from 123.4 \",Kusto.Data.IntelliSense.RuleKind.YieldRangeFromToOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"range ziv from 123.4 to\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"range ziv from 123.4 to \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"range ziv from 123.4 to 456\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"range ziv from 123.4 to 456 \",Kusto.Data.IntelliSense.RuleKind.YieldRangeFromToStepOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"range ziv from 123.4 to 456 st\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"range ziv from 123.4 to 456 step 123\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"range ziv from 123.4 to 456 step 123 \",Kusto.Data.IntelliSense.RuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseDatabaseTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"database\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"database(\",Kusto.Data.IntelliSense.RuleKind.YieldDatabaseNamesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\" database(\",Kusto.Data.IntelliSense.RuleKind.YieldDatabaseNamesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"database('xyz').\",Kusto.Data.IntelliSense.RuleKind.YieldTableNamesForRemoteQueryOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"cluster('foo').database\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"cluster('foo').database(\",Kusto.Data.IntelliSense.RuleKind.YieldDatabaseNamesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"cluster('foo').database('xyz').\",Kusto.Data.IntelliSense.RuleKind.YieldTableNamesForRemoteQueryOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"cluster('foo').database('xyz').xx\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (database(\",Kusto.Data.IntelliSense.RuleKind.YieldDatabaseNamesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (cluster('foo').database(\",Kusto.Data.IntelliSense.RuleKind.YieldDatabaseNamesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (cluster('foo').database('db1').Table1, database(\",Kusto.Data.IntelliSense.RuleKind.YieldDatabaseNamesOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseClusterTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"cluster\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"cluster(\",Kusto.Data.IntelliSense.RuleKind.YieldClusterNamesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\" cluster(\",Kusto.Data.IntelliSense.RuleKind.YieldClusterNamesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"cluster('foo').cluster\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"cluster('foo').cluster(\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"cluster('foo').database('some')\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"cluster('foo').\",Kusto.Data.IntelliSense.RuleKind.YieldDatabaseFunctionOption));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseSummarizeTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize \",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize res\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize res=\",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize res =\",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize res= \",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize res=count(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize count(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize countif(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize dcount(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize dcountif(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize max(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize min(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize avg(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize stdev(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize variance(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum( \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sumif(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForTwoParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1)\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1) \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1)+\",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1) +\",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1) + \",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1) / \",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1) - \",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1) * \",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1)+count(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1)+max(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1)+min(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1)+avg(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1)+any(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1)+sum(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1)+sum( \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1)+sum(Filed1)\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1)+sum(Filed1) \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1) \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), \",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(Filed2)\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(Filed2) \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1)+\",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1) +\",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1) + \",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1) / \",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1) - \",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1) * \",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1) - \",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1) \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), \",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(Filed2)\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(Filed2) \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(Filed2) by\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(Filed2) by \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(Filed2) by Field1\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(Filed2) by Field1 \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(Filed2) by Field1 ,\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(Filed2) by Field1 , \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(Filed2) by Field1, \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(Filed2) by Field1, Filed2\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(Filed2) by Field1, Filed2 \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(Filed2) by Field1, Filed2, \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(Filed2) by Field1, Filed2 | count by \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(Filed2) by Field1, Filed2 | summarize by \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(Filed2) by Field1, Filed2 | summarize by Feild1\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(Filed2) by Field1, Filed2 | summarize by Feild1,\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(Filed2) by Field1, Filed2 | summarize by Feild1, \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(Filed2) by Field1, Filed2 | summarize by iff(1==0, Feild1, Field2),\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(Filed2) by Field1, Filed2 | summarize by iff(1==0, Feild1, Field2), \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(Filed2) by Field1, Filed2 | summarize count() by bin(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForTwoParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(Filed2) by Field1, Filed2 | summarize count() by bin( \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForTwoParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(Filed2) by Field1, Filed2 | summarize count() by bin(Field1,\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(Filed2) by Field1, Filed2 | summarize count() by bin(Field1, \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize sum(Filed1), count(Filed2) by Field1, Filed2 | summarize count() by bin(Field1, 1), \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize percentile(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForTwoParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize percentile(Field1,\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize percentiles(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForManyParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize percentiles(Field1,\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize percentilew(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForThreeParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize percentilew(Field1,\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize percentilesw(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForManyParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize percentilesw(Field1,\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForManyParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize arg_min(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForManyParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize arg_max(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForManyParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize arg_min(Field1,\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForManyParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | summarize arg_max(Field1,\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForManyParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | xxx Field1, Field2 | summarize \",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | xxx Field1, Field2 summarize \",Kusto.Data.IntelliSense.RuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseMakeSeriesTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series \",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series res\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series res=\",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series res =\",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series res= \",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series 100*\",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series x= 100*\",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series res=count(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series count(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series countif(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series dcount(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series dcountif(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series max(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series min(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series avg(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series stdev(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series variance(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series sum(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series sum( \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series sumif(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForTwoParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series sum(Filed1)\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series sum(Filed1) \",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForDefaultOrOn));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series x=sum(Filed1) \",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForDefaultOrOn));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series x = sum(Filed1) \",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForDefaultOrOn));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series x=100*sum(Filed1) \",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForDefaultOrOn));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series x= sum(Filed1) \",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForDefaultOrOn));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series x=sum(Filed1), avg(field2) \",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForDefaultOrOn));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series sum(Filed1), x=avg(field2) \",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForDefaultOrOn));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series sum(Filed1), avg(field2) \",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForDefaultOrOn));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series x= sum(Filed1)\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series x=sum(Filed1), avg(field2)\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series sum(Filed1) default=10 \",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForOn));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series x=sum(Filed1) default=10 \",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForOn));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series x = sum(Filed1) default=10 \",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForOn));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series x = sum(Filed1) default=10,y=sum(field2) default=10 \",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForOn));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series x = sum(Filed1), y=sum(field2) default=10 \",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForOn));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series x = sum(Filed1) default=10,y=sum(field2) default=10\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series sum(Filed1) default=10\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series x=sum(Filed1) default=\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series x=sum(Filed1) default= \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series sum(Filed1) default=0 on \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForMakeSeries));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series sum(Filed1) on \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForMakeSeries));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series x=sum(Filed1) default=0, y=count() on \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForMakeSeries));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series x=sum(Filed1) default=0, y=count() default=0 on \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForMakeSeries));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series sum(Filed1) default=0 on\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series x=sum(Filed1) default= 0 on timestamp \",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForRange));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series x= sum(Filed1) default=0 on timestamp \",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForRange));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series x= sum(Filed1) on timestamp \",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForRange));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series x= sum(Filed1),y=avg(duration) default=0 on timestamp \",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForRange));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series sum(Filed1),y=avg(duration) default=0 on timestamp \",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForRange));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series sum(Filed1) default=0, y=count() on timestamp \",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForRange));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series sum(Filed1) default=0 on timestamp \",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForRange));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series x=sum(Filed1) default=0 on timestamp\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series sum(Filed1) default=0 on timestamp in range(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForThreeParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series sum(Filed1) on timestamp in range(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForThreeParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series x=sum(Filed1) on timestamp in range(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForThreeParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series sum(Filed1) default=0 on timestamp in range(ago(1d), now(),1h) \",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForBy));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series sum(Filed1) on timestamp in range(ago(1d), now(),1h) \",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForBy));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series x=sum(Filed1) on timestamp in range(ago(1d), now(),1h) \",Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForBy));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series x=sum(Filed1) on timestamp in range(ago(1d), now(),1h)\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series sum(Filed1) default=0 on timestamp in range(ago(1d), now(),1h) by \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForMakeSeries));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series sum(Filed1) default=0 on timestamp in range(ago(1d), now(),1h) by field1, \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForMakeSeries));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series sum(Filed1) default=0 on timestamp in range(ago(1d), now(),1h) by \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForMakeSeries));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series sum(Filed1) default=0, y=count() on timestamp in range(ago(1d), now(),1h) by \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForMakeSeries));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series sum(Filed1), y=count() default=0 on timestamp in range(ago(1d), now(),1h) by field1, \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForMakeSeries));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series sum(Filed1) default=0 on timestamp in range(ago(1d), now(),1h) by\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | make-series sum(Filed1) default=0 on timestamp in range(ago(1d), now(),1h) by field1,\",Kusto.Data.IntelliSense.RuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseDistinctTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | distinct\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | distinct \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | distinct Field1\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | distinct Field1 \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | distinct Field1 ,\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | distinct Field1, \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | distinct Field1 , \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | distinct Field1, Field2\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | distinct Field1, Field2 \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | distinct Field1, Field2, \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | distinct Field1, Field2 \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | distinct sum(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | distinct sum(Filed1), count(Field2)\",Kusto.Data.IntelliSense.RuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseTopNestedTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested \",Kusto.Data.IntelliSense.RuleKind.YieldNumericScalarOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 \",Kusto.Data.IntelliSense.RuleKind.YieldTopNestedOfKeywordOption));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForOrdering));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of A\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of A \",Kusto.Data.IntelliSense.RuleKind.YieldTopNestedOthersOption));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of A by\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of A by \",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of A by 1\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of A by 1 + \",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of A by 1+ \",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of A by 1+\",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of A by 1 * \",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of A by 1 - \",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of A by avg(A)\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of A by avg(A) \",Kusto.Data.IntelliSense.RuleKind.YieldAscendingDescendingOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of A by avg(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of A by avg(A), \",Kusto.Data.IntelliSense.RuleKind.YieldTopNestedKeywordOption));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of A by avg(A), top-nested\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of A by avg(A), top-nested \",Kusto.Data.IntelliSense.RuleKind.YieldNumericScalarOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of A by avg(A), top-nested 1\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of A by avg(A), top-nested 1 \",Kusto.Data.IntelliSense.RuleKind.YieldTopNestedOfKeywordOption));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of A by avg(A) asc, top-nested 1 of\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of A by avg(A), top-nested 1 of \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForOrdering));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of A by avg(A) desc, top-nested 1 of A\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of A by avg(A), top-nested 1 of A \",Kusto.Data.IntelliSense.RuleKind.YieldTopNestedOthersOption));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of A by avg(A), top-nested 1 of A by\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of A by avg(A), top-nested 1 of A by \",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of bin(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForTwoParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of bin(A,1m)\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of bin(A,1m) \",Kusto.Data.IntelliSense.RuleKind.YieldByKeywordOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of bin(A,1m) by\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of bin(A,1m) by \",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of bin(A,1m) with others = 12 by \",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of bin(A,1m) by avg(A) \",Kusto.Data.IntelliSense.RuleKind.YieldAscendingDescendingOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of bin(A,1m) with others = 15 by avg(A) \",Kusto.Data.IntelliSense.RuleKind.YieldAscendingDescendingOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of bin(A,1m) by avg(A) asc\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of bin(A,1m) by avg(A), \",Kusto.Data.IntelliSense.RuleKind.YieldTopNestedKeywordOption));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-nested 1 of bin(A,1m) with others = 12 \",Kusto.Data.IntelliSense.RuleKind.YieldByKeywordOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseTopHittersTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-hitters\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-hitters \",Kusto.Data.IntelliSense.RuleKind.YieldNumericScalarOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-hitters 1\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-hitters 1 \",Kusto.Data.IntelliSense.RuleKind.YieldTopNestedOfKeywordOption));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-hitters 1 of\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-hitters 1 of \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForOrdering));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-hitters 1 of A\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-hitters 1 of A \",Kusto.Data.IntelliSense.RuleKind.YieldByKeywordOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-hitters 1 of A by\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-hitters 1 of A by \",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-hitters 1 of A by 1\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-hitters 1 of A by 1 + \",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-hitters 1 of A by 1+ \",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-hitters 1 of A by 1+\",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-hitters 1 of A by 1 * \",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-hitters 1 of A by 1 - \",Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-hitters 1 of A by avg(A)\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top-hitters 1 of A by avg(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseProjectTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProject));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project Fiel\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project Field1\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project Field1,\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project Field1, \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProject));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project Field1, Field2\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project Field1, Field2 \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project Field1, Field2,\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project Field1, Field2, \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProject));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project Field1, Field2 | , \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | xxx Field1, Field2 | project \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProject));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | xxx Field1, Field2 project \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project x=\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project x= \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project x= Fiel\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project x= Field1,\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project x= Field1, \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProject));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project x= Field1, y\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project x= Field1, y=\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseProjectAwayTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project-away\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project-away \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProjectAway));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project-away Fiel\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project-away Field1\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project-away Field1,\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project-away Field1, \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProjectAway));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project-away Field1, Field2\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project-away Field1, Field2 \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project-away Field1, Field2,\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project-away Field1, Field2, \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProjectAway));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project-away Field1, Field2 | , \",Kusto.Data.IntelliSense.RuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseProjectRenameTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project-rename\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project-rename \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project-rename Fiel\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project-rename Field1\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project-rename Field1 =\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProjectRename));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project-rename Field1 = \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProjectRename));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project-rename Field1 = z,\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project-rename Field1 = z, \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project-rename Field1 = z, Feild2=\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProjectRename));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | project-rename Field1 = z, Feild2= \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProjectRename));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseLimitTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | limit\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | limit \",Kusto.Data.IntelliSense.RuleKind.YieldNumericScalarOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | limit 1\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | limit 2\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | limit 1 \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | take\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | take \",Kusto.Data.IntelliSense.RuleKind.YieldNumericScalarOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | take 1\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | take 2\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | take 1 \",Kusto.Data.IntelliSense.RuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseSampleTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | sample\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | sample \",Kusto.Data.IntelliSense.RuleKind.YieldNumericScalarOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | sample 1\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | sample 2\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | sample 1 \",Kusto.Data.IntelliSense.RuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseSampleDistinctTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | sample-distinct\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | sample-distinct \",Kusto.Data.IntelliSense.RuleKind.YieldNumericScalarOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | sample-distinct 1\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | sample-distinct 1 \",Kusto.Data.IntelliSense.RuleKind.YieldTopNestedOfKeywordOption));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | sample-distinct 1 of\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | sample-distinct 1 of \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | sample-distinct 1 of A\",Kusto.Data.IntelliSense.RuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseShowCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\"\\n.show \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\" .show \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show xxx | .show \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show principal \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowPrincipalCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter policies \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldMultiplePoliciesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".delete policies \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDeleteMultiplePoliciesOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseClientDirectivesTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"#\",Kusto.Data.IntelliSense.RuleKind.YieldClientDirectivesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"#connect\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"#connect \",Kusto.Data.IntelliSense.RuleKind.YieldClientDirective_ConnectOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseAppendCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".append\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".append \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set-or-append\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set-or-append \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseReplaceCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set-or-replace\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set-or-replace \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseExtendTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=xx\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=xx \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=xx ,\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=xx+\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=xx-\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=xx/\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=xx*\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=xx +\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=xx -\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=xx /\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=xx *\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=xx+ \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=xx- \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=xx/ \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=xx* \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=xx + \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=xx / \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=xx * \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=xx+yy\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=xx+yy,\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=xx+yy,newop1=\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=xx+yy,newop1=strlen(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=xx+yy,newop1=tostring(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=xx+yy,newop1=strcat(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForManyParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=xx+yy,newop1=toupper(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=xx+yy,newop1=iff(\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForThreeParamFunctions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend newop=xx+yy | summarize count(newop) by newop bin=\",Kusto.Data.IntelliSense.RuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseParseOperator:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | parse \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForParse));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | parse kind\",Kusto.Data.IntelliSense.RuleKind.YieldParseKeywordKindsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | parse kind = simple \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForParse));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | parse kind = regex \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForParse));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | parse kind = relaxed \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForParse));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | parse kind = relaxed flags = iU \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForParse));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | parse kind = simple column \",Kusto.Data.IntelliSense.RuleKind.YieldWithKeywordOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | parse kind = simple flags = iU column \",Kusto.Data.IntelliSense.RuleKind.YieldWithKeywordOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | parse kind = regex column \",Kusto.Data.IntelliSense.RuleKind.YieldWithKeywordOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | parse kind = relaxed column \",Kusto.Data.IntelliSense.RuleKind.YieldWithKeywordOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | parse kind = simple column with \",Kusto.Data.IntelliSense.RuleKind.YieldStarOption));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | parse kind = regex column with \",Kusto.Data.IntelliSense.RuleKind.YieldStarOption));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | parse kind = relaxed column with \",Kusto.Data.IntelliSense.RuleKind.YieldStarOption));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | parse kind = simple column with extendedCol1:\",Kusto.Data.IntelliSense.RuleKind.YieldParseTypesKeywordOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | parse kind = regex column with extendedCol1:\",Kusto.Data.IntelliSense.RuleKind.YieldParseTypesKeywordOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | parse kind = relaxed column with extendedCol1:\",Kusto.Data.IntelliSense.RuleKind.YieldParseTypesKeywordOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | parse  column with extendedCol1:long \",Kusto.Data.IntelliSense.RuleKind.YieldStarOption));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2('Table1 | parse kind = simple column with extendedCol1:long \"someDelemiter\" ',Kusto.Data.IntelliSense.RuleKind.YieldStarOption));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | parse kind = relaxed column with extendedCol1:long | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | parse kind = regex column with extendedCol1:long | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | parse column with extendedCol1:long | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | parse column with * 'someDelemiter' * 'someDelemiter2' * 'SomeDelemiter3' SomeStringColumn | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | parse column with \",Kusto.Data.IntelliSense.RuleKind.YieldStarOption));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | parse column with * s:\",Kusto.Data.IntelliSense.RuleKind.YieldParseTypesKeywordOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | parse column with * s:int \",Kusto.Data.IntelliSense.RuleKind.YieldStarOption));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | parse column with * s:int 'someDelimiter' \",Kusto.Data.IntelliSense.RuleKind.YieldStarOption));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseShowTableCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show table\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show table \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show table xxx\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show table xxx \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowTableEntitiesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show table xxx extents\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show table xxx extents \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowExtentsByEntityOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show table xxx extents where\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show table xxx extents where tags\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show table xxx extents where tags \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowExtentsByEntityWithTagsFiltersOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show table xxx extents hot\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show table xxx extents hot \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowExtentsByEntityOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show table xxx principals\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show table xxx policy\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show table xxx policy \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTablePoliciesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".show table xxx | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show tables (xxx,yyy) extents\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show tables (xxx,yyy) extents \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowExtentsByEntityOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show tables (xxx,yyy) extents where\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show tables (xxx,yyy) extents where tags\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show tables (xxx,yyy) extents where tags \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowExtentsByEntityWithTagsFiltersOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show tables (xxx,yyy) extents hot\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show tables (xxx,yyy) extents hot \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowExtentsByEntityOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseAlterTableCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter table\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter table \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter table xxx\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter table xxx \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterTableEntitiesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter-merge table\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter-merge table \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter-merge table xxx\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter-merge table xxx \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterTableEntitiesOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseDeleteTableCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".delete table\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".delete table \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".delete table xxx\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".delete table xxx \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDeleteTableEntitiesOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseDropTableCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop table\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop table \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop table xxx\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop table xxx \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDropTableEntitiesOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseAlterFunctionCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter function\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter function xxx\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter function \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldFunctionNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter function xxx \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterFunctionEntitiesOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseShowDatabaseCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show database\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show database \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDatabaseNames));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show database xxx\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show database xxx \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowDatabasePrincipalsPoliciesAndSchemaOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show database xxx extents\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show database xxx extents \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowExtentsByEntityOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show database xxx extents hot\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show database xxx extents hot \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowExtentsByEntityOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show database xxx principals\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show database xxx policy \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDatabasePoliciesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show database xxx policy\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".show database xxx principals | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show database xxx schema\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".show database xxx schema | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show database xxx extents where\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show database xxx extents where tags\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show database xxx extents where tags \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowExtentsByEntityWithTagsFiltersOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseShowDatabasesCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show databases\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show databases \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowDatabasesOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseShowClusterCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show cluster\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show cluster \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowClusterPrincipalsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show cluster extents\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show cluster extents \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowExtentsByEntityOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show cluster extents hot\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show cluster extents hot \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowExtentsByEntityOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show cluster principals\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show cluster policy \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldClusterPoliciesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show cluster policy\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".show cluster principals | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseShowBasicAuthUsersCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show basicauth\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show basicauth \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowBasicAuthOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".show basicauth users\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseIngestionDuplicateCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".dup-next-ingest\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".dup-next-ingest \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldIngestionDuplicationOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".dup-next-ingest into\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".dup-next-ingest into \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".dup-next-ingest into ttt\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".dup-next-ingest into ttt to h@'container'\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".dup-next-failed-ingest\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".dup-next-failed-ingest \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldIngestionDuplicationOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".dup-next-failed-ingest into\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".dup-next-failed-ingest into \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".dup-next-failed-ingest into ttt\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".dup-next-failed-ingest into ttt to h@'container'\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseColumnCommandTest:function(){var $t,policiesCommands=System.Array.init([\"show\",\"alter\",\"alter-merge\",\"delete\"],System.String),testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor),policyCommand;$t=Bridge.getEnumerator(policiesCommands);try{while($t.moveNext())policyCommand=$t.Current,testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} column\",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} column xxx\",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} column xxx \",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPoliciesOptions)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} column xxx policy\",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} column xxx policy \",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldColumnPoliciesOptions))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseDatabasePoliciesCommandTest:function(){var $t,policiesCommands=System.Array.init([\"alter\",\"alter-merge\",\"delete\"],System.String),testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor),policyCommand,expectedMatchingRule;$t=Bridge.getEnumerator(policiesCommands);try{while($t.moveNext())policyCommand=$t.Current,testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} database\",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} database xxx\",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)),expectedMatchingRule=System.String.equals(policyCommand,\"alter\")?Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterDatabaseCommandOptions:Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPoliciesOptions,testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} database xxx \",[policyCommand]),expectedMatchingRule)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} database xxx policy\",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} database xxx policy \",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDatabasePoliciesOptions)),System.String.equals(policyCommand,\"alter-merge\")&&(testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} database xxx policy retention \",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterMergePolicyRetentionOptions)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} database xxx policy retention softdelete = \",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterTimeSpanPolicyOptions)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} database xxx policy retention harddelete = \",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterTimeSpanPolicyOptions)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} database xxx policy retention softdelete = xxx\",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} database xxx policy retention softdelete = xxx \",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterMergePolicyRetentionSoftDeleteDefinedOptions)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} database xxx policy retention harddelete = xxx\",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} database xxx policy retention harddelete = xxx \",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} database xxx policy retention softdelete = xxx harddelete = xxx\",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} database xxx policy retention softdelete = xxx harddelete = xxx \",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseTablePoliciesCommandTest:function(){var $t,policiesCommands=System.Array.init([\"alter\",\"alter-merge\",\"delete\"],System.String),testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor),policyCommand;$t=Bridge.getEnumerator(policiesCommands);try{while($t.moveNext())policyCommand=$t.Current,testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} table xxx policy\",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} table xxx policy \",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTablePoliciesOptions)),System.String.equals(policyCommand,\"alter-merge\")&&(testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} table xxx policy retention \",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterMergePolicyRetentionOptions)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} table xxx policy retention softdelete = \",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterTimeSpanPolicyOptions)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} table xxx policy retention harddelete = \",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterTimeSpanPolicyOptions)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} table xxx policy retention softdelete = xxx\",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} table xxx policy retention softdelete = xxx \",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterMergePolicyRetentionSoftDeleteDefinedOptions)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} table xxx policy retention harddelete = xxx\",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} table xxx policy retention harddelete = xxx \",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} table xxx policy retention softdelete = xxx harddelete = xxx\",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} table xxx policy retention softdelete = xxx harddelete = xxx \",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseClusterPoliciesCommandTest:function(){var $t,policiesCommands=System.Array.init([\"alter\",\"alter-merge\",\"delete\"],System.String),testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor),policyCommand;$t=Bridge.getEnumerator(policiesCommands);try{while($t.moveNext())policyCommand=$t.Current,testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} cluster\",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} cluster \",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPoliciesOptions)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} cluster policy\",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.None)),testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(System.String.format(\".{0} cluster policy \",[policyCommand]),Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldClusterPoliciesOptions))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseSetDatabaseUsersAdminsViewersPrettyNameCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set database\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set database \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDatabaseNames));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set database xxx\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set database xxx \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetDatabaseAdminsUsersViewersPrettyNameOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set database xxx users\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set database xxx admins\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set database xxx viewers\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set database xxx ingestors\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set database xxx prettyname\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set database xxx users \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetDatabaseUsersNoneOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set database xxx admins \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetDatabaseAdminsNoneOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set database xxx viewers \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetDatabaseViewersNoneOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set database xxx ingestors \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetDatabaseIngestorsNoneOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set database xxx prettyname\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".set database xxx users | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".set database xxx admins | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".set database xxx viewers| \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".set database xxx ingestors | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".set database xxx prettyname | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseSetClusterUsersAdminsViewersCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set cluster\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set cluster \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetClusterAdminsUsersViewersDatabaseCreatorsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set cluster users\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set cluster admins\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set cluster viewers\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set cluster databasecreators\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set cluster users \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetClusterUsersNoneOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set cluster admins \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetClusterAdminsNoneOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set cluster viewers \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetClusterViewersNoneOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set cluster databasecreators \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetClusterDatabaseCreatorsNoneOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".set cluster users | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".set cluster admins | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".set cluster viewers| \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".set cluster databasecreators| \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseSetTableAdminsCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set table\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set table \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set table xxx\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set table xxx \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetTableAdminsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set table xxx admins\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set table xxx ingestors\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set table xxx admins \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetTableAdminsNoneOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".set table xxx ingestors \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetTableIngestorsNoneOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".set table xxx admins | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".set table xxx ingestors | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseAddDatabaseUsersAdminsViewersCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".add\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".add \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAddCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".add database\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".add database \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDatabaseNames));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".add database xxx\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".add database xxx \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAddDatabaseAdminsUsersViewersOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".add database xxx users\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".add database xxx admins\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".add database xxx viewers\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".add database xxx ingestors\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".add database xxx users | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".add database xxx admins | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".add database xxx viewers | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".add database xxx ingestors | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseAddClusterUsersAdminsViewersCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".add\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".add \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAddCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".add cluster\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".add cluster \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAddClusterAdminsUsersViewersDatabaseCreatorsBlockedPrincipalsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".add cluster users\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".add cluster admins\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".add cluster viewers\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".add cluster databasecreators\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".add cluster users | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".add cluster admins | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".add cluster viewers | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".add cluster databasecreators | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseAddTableAdminsCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".add\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".add \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAddCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".add table\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".add table \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".add table xxx\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".add table xxx \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAddTableAdminsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".add table xxx admins\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".add table xxx ingestors\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".add table xxx admins | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".add table xxx ingestors | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseDropDatabaseUsersAdminsViewersCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDropCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop database\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop database \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDatabaseNames));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop database xxx\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop database xxx \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDropDatabaseOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop database xxx users\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop database xxx admins\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop database xxx viewers\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop database xxx ingestors\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop database xxx prettyname\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".drop database xxx users | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".drop database xxx admins | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".drop database xxx viewers | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".drop database xxx ingestors | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseDropTableAdminsColumnsCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDropCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop table\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop table \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop table xxx\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop table xxx \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDropTableEntitiesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".drop table xxx admins\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".drop table xxx ingestors\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".drop table xxx admins | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".drop table xxx ingestors | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop table xxx columns \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDropTableColumnsSyntaxOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseDropExtentTagsCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDropCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop extent\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop extent \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop extent tags \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDropExtentTagsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop extent tags from \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop extent tags from table \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop extent tags from table ttt\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop extent tags from table ttt \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseAlterExtentTagsCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter extent\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter extent \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter extent tags \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterExtentTagsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter extent tags xxx \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseExtentsAttachCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".attach\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".attach \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAttachCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".attach extents\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".attach extents \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAttachExtentsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".attach extents into table\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".attach extents into table \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".attach extents into table ttt\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".attach extents into table ttt \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAttachExtentsIntoTableOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".attach extents into table ttt by\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".attach extents into table ttt by \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".attach extents into table ttt by metadata\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".attach extents into table ttt by metadata \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".attach extents into table ttt by metadata <|\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".attach async\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".attach async \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAttachCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".attach async extents\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".attach async extents \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAttachExtentsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".attach async extents into table\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".attach async extents into table \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".attach async extents into table ttt\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".attach async extents into table ttt \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAttachExtentsIntoTableOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".attach async extents into table ttt by\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".attach async extents into table ttt by \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".attach async extents into table ttt by metadata\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".attach async extents into table ttt by metadata \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".attach async extents into table ttt by metadata <|\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseExtentsMoveCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldMoveCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move extents\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move extents \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldMoveExtentsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move extents (00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000)\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move extents (00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000) \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldMoveSpecifiedExtentsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move extents to table\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move extents to table \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move extents to table ttt\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move extents to table ttt \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move extents all\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move extents all \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldMoveSpecifiedExtentsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move extents all from\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move extents all from \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move extents all from table\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move extents all from table \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move extents all from table ttt\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move extents all from table ttt \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldMoveExtentsToTableOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move extents all from table ttt to\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move extents all from table ttt to \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move extents all from table ttt to table\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move extents all from table ttt to table \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move extents all from table ttt to table abc\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move extents all from table ttt to table abc \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move async\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move async \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldMoveCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move async extents\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move async extents \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldMoveExtentsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move async extents (00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000)\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move async extents (00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000) \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldMoveSpecifiedExtentsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move async extents to table\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move async extents to table \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move async extents to table ttt\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move async extents to table ttt \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move async extents all\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move async extents all \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldMoveSpecifiedExtentsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move async extents all from\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move async extents all from \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move async extents all from table\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move async extents all from table \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move async extents all from table ttt\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move async extents all from table ttt \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldMoveExtentsToTableOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move async extents all from table ttt to\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move async extents all from table ttt to \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move async extents all from table ttt to table\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move async extents all from table ttt to table \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move async extents all from table ttt to table abc\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".move async extents all from table ttt to table abc \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseExtentsReplaceCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".replace\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".replace \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldReplaceCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".replace extents\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".replace extents \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldReplaceExtentsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".replace extents in table\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".replace extents in table \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".replace extents in table ttt\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".replace extents in table ttt \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".replace async\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".replace async \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldReplaceCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".replace async extents\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".replace async extents \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldReplaceExtentsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".replace async extents in table\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".replace async extents in table \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".replace async extents in table ttt\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".replace async extents in table ttt \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseCreateDatabaseAdminCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".create database\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".create database \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".create database SomeName\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".create database SomeName \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDatabaseCreatePersistencyOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".create database SomeName volatile\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".create database SomeName volatile \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldCreateIfNotExistsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".create database SomeName volatile  \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".create database SomeName persist\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".create database SomeName persist \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".create database SomeName persist (h@'', h@'')\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".create database SomeName persist (h@'', h@'') \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldCreateIfNotExistsOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseAlterDatabaseMetadataAdminCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter database\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter database \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDatabaseNames));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter database xxx\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter database xxx \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterDatabaseCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter database xxx persist\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter database xxx persist \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter database xxx persist metadata\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter database xxx persist metadata \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter database xxx persist metadata h@''\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseCreateAddAlterDropAdminsCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDropCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".create\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".create \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldCreateCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter-merge\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".alter-merge \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterMergeCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".add\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".add \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAddCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".delete\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".delete \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDeleteCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".create-or-alter \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldCreateOrAlterOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseDropClusterUsersAdminsViewersCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDropCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop cluster\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop cluster \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDropClusterAdminsUsersViewersDatabaseCreatorsBlockedPrincipalsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop cluster users\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop cluster admins\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop cluster viewers\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".drop cluster databasecreators\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".drop cluster users | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".drop cluster admins | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".drop cluster viewers| \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\".drop cluster databasecreators| \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseQueryParametersTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"[\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"{\",Kusto.Data.IntelliSense.RuleKind.YieldQueryParameters));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2('\"{',Kusto.Data.IntelliSense.RuleKind.YieldQueryParameters));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2('\"{q',Kusto.Data.IntelliSense.RuleKind.YieldQueryParameters));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2('\"{q}',Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2('\"{q}{',Kusto.Data.IntelliSense.RuleKind.YieldQueryParameters));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2('\"{q}{ ',Kusto.Data.IntelliSense.RuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseJoinTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1| join\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1| join \",Kusto.Data.IntelliSense.RuleKind.YieldPostJoinOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1| join Table2 \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1| join Table2 on \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1| join (\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1| join ( \",Kusto.Data.IntelliSense.RuleKind.YieldTableNames));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1| join (Table2) on\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1| join (Table2) on \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForJoin));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1| join (Table2 | limit 10 ) on \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForJoin));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1| join (Table2) on  \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForJoin));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1| join kind\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1| join kind=\",Kusto.Data.IntelliSense.RuleKind.YieldKindFlavorsForJoin));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1| join kind= \",Kusto.Data.IntelliSense.RuleKind.YieldKindFlavorsForJoin));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1| join kind=xxx\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1| join kind=xxx \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1| join kind=xxx kind=\",Kusto.Data.IntelliSense.RuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseRenderTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"render\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"|render\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"|render \",Kusto.Data.IntelliSense.RuleKind.YieldRenderOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"| render \",Kusto.Data.IntelliSense.RuleKind.YieldRenderOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"| render timechart\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"| render timechart \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"| render areachart\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"| render areachart \",Kusto.Data.IntelliSense.RuleKind.YieldRenderKindKeywordOption));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"| render barchart \",Kusto.Data.IntelliSense.RuleKind.YieldRenderKindKeywordOption));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"| render columnchart \",Kusto.Data.IntelliSense.RuleKind.YieldRenderKindKeywordOption));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"| render areachart kind\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"| render areachart kind=\",Kusto.Data.IntelliSense.RuleKind.YieldRenderKindOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"| render barchart kind=\",Kusto.Data.IntelliSense.RuleKind.YieldRenderKindOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"| render columnchart kind=\",Kusto.Data.IntelliSense.RuleKind.YieldRenderKindOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"| render timepivot\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"| render timepivot \",Kusto.Data.IntelliSense.RuleKind.YieldByKeywordOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"| render timepivot by\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"| render timepivot by \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForRender));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"| render timepivot by Column1\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"| render timepivot by Column1,\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"| render timepivot by Column1, \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForRender));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"| render timepivot by Column1, Column2\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"| render timepivot by Column1, Column2,\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"| render timepivot by Column1, Column2, \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForRender));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseTopTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top \",Kusto.Data.IntelliSense.RuleKind.YieldNumericScalarOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top by\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top by \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top x by \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top 10\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top 10 \",Kusto.Data.IntelliSense.RuleKind.YieldByKeywordOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top 10 by\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top 10 by \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForOrdering));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top 10 by Column1\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top 10 by Column1 \",Kusto.Data.IntelliSense.RuleKind.YieldAscendingDescendingOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top 10 by Column1 asc\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top 10 by Column1 asc \",Kusto.Data.IntelliSense.RuleKind.YieldNullsFirstNullsLastOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top 10 by Column1 asc\\r\\n\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top 10 by Column1 asc nulls first\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | top 10 by Column1 ,\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | sort\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | sort \",Kusto.Data.IntelliSense.RuleKind.YieldByKeywordOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | sort by\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | sort by \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForOrdering));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | sort by Column1\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | sort by Column1 \",Kusto.Data.IntelliSense.RuleKind.YieldAscendingDescendingOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | sort by Column1 asc\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | sort by Column1 asc \",Kusto.Data.IntelliSense.RuleKind.YieldNullsFirstNullsLastOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | sort by Column1 asc\\r\\n\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | sort by Column1 asc nulls first\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | sort by Column1 ,\",Kusto.Data.IntelliSense.RuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseReduceTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | reduce\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | reduce by \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForOrdering));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | reduce by (Table2)\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | reduce kind\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | reduce kind=\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | reduce by Column kind=\",Kusto.Data.IntelliSense.RuleKind.YieldKindFlavorsForReduceBy));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | reduce by Column kind =\",Kusto.Data.IntelliSense.RuleKind.YieldKindFlavorsForReduceBy));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | reduce by Column kind = \",Kusto.Data.IntelliSense.RuleKind.YieldKindFlavorsForReduceBy));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseToScalarTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"toscalar\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"toscalar(\",Kusto.Data.IntelliSense.RuleKind.YieldTableNames));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"toscalar( \",Kusto.Data.IntelliSense.RuleKind.YieldTableNames));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"toscalar(Table\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"toscalar(Table \",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"toscalar(Table | \",Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"toscalar(Table | count)\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"rand x from 1 to toscalar(\",Kusto.Data.IntelliSense.RuleKind.YieldTableNames));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"rand x from 1 to toscalar(1) step toscalar(\",Kusto.Data.IntelliSense.RuleKind.YieldTableNames));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseTimeKeywordsTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | where DateTimeField1 >\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | where DateTimeField1 > \",Kusto.Data.IntelliSense.RuleKind.YieldDateTimeOperatorsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | where DateTimeField1 < \",Kusto.Data.IntelliSense.RuleKind.YieldDateTimeOperatorsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | where DateTimeField1 == \",Kusto.Data.IntelliSense.RuleKind.YieldDateTimeOperatorsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | where DateTimeField1 != \",Kusto.Data.IntelliSense.RuleKind.YieldDateTimeOperatorsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | where DateTimeField1 >= \",Kusto.Data.IntelliSense.RuleKind.YieldDateTimeOperatorsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | where DateTimeField1 <= \",Kusto.Data.IntelliSense.RuleKind.YieldDateTimeOperatorsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | where Field1 == 'ff' and DateTimeField1 > \",Kusto.Data.IntelliSense.RuleKind.YieldDateTimeOperatorsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | where Field1 == 'ff' or DateTimeField1 > \",Kusto.Data.IntelliSense.RuleKind.YieldDateTimeOperatorsOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"aago(\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"ago(\",Kusto.Data.IntelliSense.RuleKind.YieldTimespanOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"ago( \",Kusto.Data.IntelliSense.RuleKind.YieldTimespanOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\" ago(\",Kusto.Data.IntelliSense.RuleKind.YieldTimespanOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"nnow(\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"now(\",Kusto.Data.IntelliSense.RuleKind.YieldTimespanOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"now( \",Kusto.Data.IntelliSense.RuleKind.YieldTimespanOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\" now( \",Kusto.Data.IntelliSense.RuleKind.YieldTimespanOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseEvaluateTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | evaluate \",Kusto.Data.IntelliSense.RuleKind.YieldEvaluateOperatorOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2('Table1 | evaluate diffpatterns(\"split= ',Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForDiffPatternsPluginSplitParameter));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2('Table1 | evaluate diffpatterns(\"bsplit= ',Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"Table1 | extend split=\",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseExportCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".export\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".export \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldExportCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".export  \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldExportCommandOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".export async\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".export compressed\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".export async compressed\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".export compressed async\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".export async \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".export compressed \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".export async compressed \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".export compressed async \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".export to \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldExportCommandNoModifiersAndOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".export async to \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldExportCommandWithModifiersAndOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".export compressed to \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldExportCommandWithModifiersAndOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".export async compressed to \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldExportCommandWithModifiersAndOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".export async to \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldExportCommandWithModifiersAndOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".export to\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".export async compressed to\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSensePurgeCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge whatif = \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeWhatIfOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge whatif = info\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge whatif = info \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeWithPropertiesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge whatif = info table\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge whatif = info table \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge whatif = info table TTT\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge whatif = info table TTT \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeTableOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge whatif = info table TTT records\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge whatif = info table TTT records \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge maxRecords = \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge maxRecords = 111\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge maxRecords = 111 \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeWithPropertiesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge maxRecords = 111 table\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge maxRecords = 111 table \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge maxRecords = 111 table TTT\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge maxRecords = 111 table TTT \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeTableOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge maxRecords = 111 table TTT records\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge maxRecords = 111 table TTT records \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge whatif = info maxRecords = 111\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge whatif = info maxRecords = 111 \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeWithPropertiesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge whatif = info maxRecords = 111 table \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge whatif = info maxRecords = 111 table TTT\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge whatif = info maxRecords = 111 table TTT \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeTableOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge whatif = info maxRecords = 111 table TTT records\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge whatif = info maxRecords = 111 table TTT records \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge async\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge async \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge async whatif = \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeWhatIfOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge async whatif = info\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge async whatif = info \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeWithPropertiesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge async whatif = info table\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge async whatif = info table \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge async whatif = info table TTT\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge async whatif = info table TTT \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeTableOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge async whatif = info table TTT records\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge async whatif = info table TTT records \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge async maxRecords = \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge async maxRecords = 111\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge async maxRecords = 111 \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeWithPropertiesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge async maxRecords = 111 table\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge async maxRecords = 111 table \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge async maxRecords = 111 table TTT\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge async maxRecords = 111 table TTT \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeTableOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge async maxRecords = 111 table TTT records\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge async maxRecords = 111 table TTT records \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge async whatif = info maxRecords = 111\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge async whatif = info maxRecords = 111 \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeWithPropertiesOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge async whatif = info maxRecords = 111 table \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge async whatif = info maxRecords = 111 table TTT\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge async whatif = info maxRecords = 111 table TTT \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeTableOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge async whatif = info maxRecords = 111 table TTT records\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge async whatif = info maxRecords = 111 table TTT records \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSensePurgeCleanupCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge-cleanup\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge-cleanup \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeCleanupOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge-cleanup async\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".purge-cleanup async \",Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeCleanupOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseCreateRowstoreAdminCommandTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".create rowstore\",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor1(\".create rowstore \",Kusto.Data.IntelliSense.AdminEngineRuleKind.None));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseSearchTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"search\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"search \",Kusto.Data.IntelliSense.RuleKind.YieldPostSearchOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"search kind\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"search kind=\",Kusto.Data.IntelliSense.RuleKind.YieldSearchKindOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"search kind= \",Kusto.Data.IntelliSense.RuleKind.YieldSearchKindOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"search kind = \",Kusto.Data.IntelliSense.RuleKind.YieldSearchKindOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"search kind=case_sensitive\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"search kind=case_sensitive \",Kusto.Data.IntelliSense.RuleKind.YieldPostSearchKindOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"search kind=case_insensitive \",Kusto.Data.IntelliSense.RuleKind.YieldPostSearchKindOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2('search \"ff\" or',Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2('search \"ff\" or ',Kusto.Data.IntelliSense.RuleKind.YieldInsideSearchOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2('search \"ff\" and ',Kusto.Data.IntelliSense.RuleKind.YieldInsideSearchOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2('search in (Table1) \"ff\" and ',Kusto.Data.IntelliSense.RuleKind.YieldInsideSearchOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"search in (Table1, ['Table.2']) \\\"ff\\\" or \",Kusto.Data.IntelliSense.RuleKind.YieldInsideSearchOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2('search kind=case_sensitive  \"ff\" and ',Kusto.Data.IntelliSense.RuleKind.YieldInsideSearchOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"search in (Table1)\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"search in (Table1) \",Kusto.Data.IntelliSense.RuleKind.YieldInsideSearchOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"search kind=case_sensitive in (Table1) \",Kusto.Data.IntelliSense.RuleKind.YieldInsideSearchOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"search in (Table1, ['Table.2'])\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"search in (Table1, ['Table.2']) \",Kusto.Data.IntelliSense.RuleKind.YieldInsideSearchOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"search in (Table1, database('*').*)\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"search in (Table1, database('*').*) \",Kusto.Data.IntelliSense.RuleKind.YieldInsideSearchOptions));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseFindTest:function(){var testPatterns=new(System.Collections.Generic.List$1(Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern).ctor);testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find \",Kusto.Data.IntelliSense.RuleKind.YieldPostFindOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find withsource=SourceTable\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find withsource=SourceTable \",Kusto.Data.IntelliSense.RuleKind.YieldPostFindOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find withsource = SourceTable \",Kusto.Data.IntelliSense.RuleKind.YieldPostFindOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in \",Kusto.Data.IntelliSense.RuleKind.YieldPostFindInOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find withsource=SourceTable in\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find withsource=SourceTable in \",Kusto.Data.IntelliSense.RuleKind.YieldPostFindInOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (\",Kusto.Data.IntelliSense.RuleKind.YieldTableNamesForFindIn));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find withsource=SourceTable in (\",Kusto.Data.IntelliSense.RuleKind.YieldTableNamesForFindIn));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (Table1, Table2,\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (Table1, Table2, \",Kusto.Data.IntelliSense.RuleKind.YieldTableNamesForFindIn));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find withsource=SourceTable in (Table1, Table2,\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find withsource=SourceTable in (Table1, Table2, \",Kusto.Data.IntelliSense.RuleKind.YieldTableNamesForFindIn));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (Table1, ['Table.2']\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (Table1, ['Table.2'] \",Kusto.Data.IntelliSense.RuleKind.YieldEndOrContinueFindInOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find withsource=SourceTable in (Table1, Table2\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find withsource=SourceTable in (Table1, Table2 \",Kusto.Data.IntelliSense.RuleKind.YieldEndOrContinueFindInOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (Table1, ['Table.2'])\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (Table1, ['Table.2']) \",Kusto.Data.IntelliSense.RuleKind.YieldPostFindInListOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find withsource=SourceTable in (Table1, Table2)\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find withsource=SourceTable in (Table1, Table2) \",Kusto.Data.IntelliSense.RuleKind.YieldPostFindInListOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (Table1, database('*').*)\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (Table1, database('*').*) \",Kusto.Data.IntelliSense.RuleKind.YieldPostFindInListOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find withsource=SourceTable in (Table1, database('*').*)\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find withsource=SourceTable in (Table1, database('*').*) \",Kusto.Data.IntelliSense.RuleKind.YieldPostFindInListOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (Table1, ['Table.2']) where\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (Table1, ['Table.2']) where \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForFilterInFind));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find withsource=SourceTable in (Table1, ['Table.2']) where\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find withsource=SourceTable in (Table1, ['Table.2']) where \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForFilterInFind));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (Table1, ['Table.2']) where Field1 == 'abc' and\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (Table1, ['Table.2']) where Field1 == 'abc' and \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForFilterInFind));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (*, database('*').*) where * has 'abc' and\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (*, database('*').*) where * has 'abc' and \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForFilterInFind));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (*, database('*').*) where 'abc' and\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (*, database('*').*) where 'abc' and \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForFilterInFind));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find withsource=SourceTable in (Table1, ['Table.2']) where Field1 == 'abc' and\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find withsource=SourceTable in (Table1, ['Table.2']) where Field1 == 'abc' and \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForFilterInFind));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (Table1, ['Table.2']) where Field3 == 'abc' project\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (Table1, ['Table.2']) where Field3 == 'abc' project \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProjectInFind));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find withsource=SourceTable in (Table1, ['Table.2']) where Field0 == 'abc' and DateTimeField1 > ago(1h) project\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find withsource=SourceTable in (Table1, ['Table.2']) where Field0 == 'abc' and DateTimeField1 > ago(1h) project \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProjectInFind));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (Table1, ['Table.2']) where Field0 == 'abc' project DateTimeField1\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find withsource=SourceTable in (Table1, ['Table.2']) where Field0 == 'abc' and DateTimeField1 > ago(1h) project NumField1\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (Table1, ['Table.2']) where Field8 == 'abc' project NumField2,\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (Table1, ['Table.2']) where Field8 == 'abc' project NumField2, \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProjectInFind));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find withsource=SourceTable in (Table1, ['Table.2']) where Field3 == 'abc' and DateTimeField0 > ago(1h) project Field0,\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find withsource=SourceTable in (Table1, ['Table.2']) where Field3 == 'abc' and DateTimeField0 > ago(1h) project Field0, \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProjectInFind));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (Table1, ['Table.2']) where Field8 == 'abc' project-smart\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (Table1, ['Table.2']) where Field8 == 'abc' project-smart \",Kusto.Data.IntelliSense.RuleKind.YieldFindProjectSmartOptions));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (Table1, ['Table.2']) where Field8 == 'abc' project NumField2 | where\",Kusto.Data.IntelliSense.RuleKind.None));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (Table1, ['Table.2']) where Field8 == 'abc' project NumField2 | where \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForFilter));testPatterns.add(new Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern.$ctor2(\"find in (Table1, ['Table.2']) where Field8 == 'abc' project NumField2 | project \",Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProject));Kusto.UT.IntelliSenseRulesTests.TestIntelliSensePatterns(Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider,testPatterns)},IntelliSenseGetCommandContextTest:function(){var $t,$t1,commands=$asm.$.Kusto.UT.IntelliSenseRulesTests.f3(new(System.Collections.Generic.Dictionary$2(System.String,System.String).ctor)),flatten,kvp,command,context;$t=Bridge.getEnumerator(System.Array.init([!1,!0],System.Boolean));try{while($t.moveNext()){flatten=$t.Current;$t1=Bridge.getEnumerator(commands);try{while($t1.moveNext())kvp=$t1.Current,command=kvp.key,command=flatten?System.String.replaceAll(System.String.replaceAll(command,String.fromCharCode(10),String.fromCharCode(32)),String.fromCharCode(13),String.fromCharCode(32)):System.String.replaceAll(System.String.replaceAll(command,String.fromCharCode(10),String.fromCharCode(32)),String.fromCharCode(13),String.fromCharCode(32)),context=Kusto.UT.IntelliSenseRulesTests.s_intelliSenseProvider.AnalyzeCommand$1(command,null).Context,Kusto.UT.IntelliSenseRulesTests.Assert.AreEqual$1(kvp.value,context.Context,Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture(\"Command context was not resolved correctly for command '{0}'\",[command]))}finally{Bridge.is($t1,System.IDisposable)&&$t1.System$IDisposable$Dispose()}}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}}}});Bridge.ns(\"Kusto.UT.IntelliSenseRulesTests\",$asm.$);Bridge.apply($asm.$.Kusto.UT.IntelliSenseRulesTests,{f1:function(c){return c.Name},f2:function(e){return(e.Operator||\"\")+\":\"+(e.Name||\"\")},f3:function(_o1){return _o1.add(\"database('\",\"database('\"),_o1.add(\"database('someDB')\",\"database('someDB')\"),_o1.add(\"database('someDB').\",\"database('someDB').\"),_o1.add(\"database('someDB').Table\",\"database('someDB').Table\"),_o1.add(\"database('someDB with space')\",\"database('someDB with space')\"),_o1.add(\"database('someDB with space').\",\"database('someDB with space').\"),_o1.add(\"database('someDB with space').Table\",\"database('someDB with space').Table\"),_o1.add('database(\"someDB with space\")','database(\"someDB with space\")'),_o1.add('database(\"someDB with space\").','database(\"someDB with space\").'),_o1.add('database(\"someDB with space\").Table','database(\"someDB with space\").Table'),_o1.add(\"cluster('abc').database('\",\"cluster('abc').database('\"),_o1.add(\"cluster('abc').database('someDB')\",\"cluster('abc').database('someDB')\"),_o1.add(\"cluster('abc').database('someDB').\",\"cluster('abc').database('someDB').\"),_o1.add(\"cluster('abc').database('someDB').Table\",\"cluster('abc').database('someDB').Table\"),_o1.add(\"cluster('https://abc.kusto.windows.net').database('\",\"cluster('https://abc.kusto.windows.net').database('\"),_o1.add(\"cluster('https://abc.kusto.windows.net').database('someDB')\",\"cluster('https://abc.kusto.windows.net').database('someDB')\"),_o1.add(\"cluster('https://abc.kusto.windows.net').database('someDB').\",\"cluster('https://abc.kusto.windows.net').database('someDB').\"),_o1.add(\"cluster('https://abc.kusto.windows.net').database('someDB').Table\",\"cluster('https://abc.kusto.windows.net').database('someDB').Table\"),_o1.add('cluster(\"https://abc.kusto.windows.net\").database(\\'','cluster(\"https://abc.kusto.windows.net\").database(\\''),_o1.add(\"cluster(\\\"https://abc.kusto.windows.net\\\").database('someDB')\",\"cluster(\\\"https://abc.kusto.windows.net\\\").database('someDB')\"),_o1.add(\"cluster(\\\"https://abc.kusto.windows.net\\\").database('someDB').\",\"cluster(\\\"https://abc.kusto.windows.net\\\").database('someDB').\"),_o1.add(\"cluster(\\\"https://abc.kusto.windows.net\\\").database('someDB').Table\",\"cluster(\\\"https://abc.kusto.windows.net\\\").database('someDB').Table\"),_o1.add(\"let x = toscalar(Table1 | \",\"Table1\"),_o1.add(\"range x from toscalar(Table1 | count) to toscalar(Table2 | \",\"Table2\"),_o1.add(\"set querytrace;\\r\\n Table2 | \",\"Table2\"),_o1.add('union\\r\\n(Table1 | where body has keyword and body has \"Google\" | summarize posts=dcount(link_id) | extend context = \"Google\"),\\r\\n(Table2 | where  ',\"Table2\"),_o1.add(\"union (Table1), (Table2  \",\"Table2\"),_o1.add(\"union\\n (Table \",\"Table\"),_o1.add(\"union (Table \",\"Table\"),_o1.add(\"let x = () {request};\\n let y = x;\\n y \",\"request\"),_o1.add(\"let x = request;\\n x \",\"request\"),_o1.add(\"let x = request | count;\\n x \",\"request\"),_o1.add(\"let x = request;\\n x | count \",\"request\"),_o1.add(\"let x = request;\\n let y = x;\\n y \",\"request\"),_o1.add(\"let x = () {request | limit 100};\\n let y = x;\\n y \",\"request\"),_o1.add(\".show database XYZ \",\".show database XYZ\"),_o1.add(\"Table1 | count\",\"Table1\"),_o1.add(\"Table1 | join (Table2 | \",\"Table2\"),_o1.add(\"let x = 1;\\n Table2 | \",\"Table2\"),_o1.add(\"range xyz from 1 to 1 step 1| \",\"range\"),_o1.add(\"let x = () { request | where \",\"request\"),_o1.add(\"let x = request | where \",\"request\"),_o1.add(\"cluster('lxprdscu02').database('Analytics Billing').ApplicationHourlyEntryCount\\r\\n| where StartTime >= ago(rangeInDaysForBililngData)\\r\\n| where DataSource == 'AI'\\r\\n| where Database in (longtailDatabases)\\r\\n| summarize totalGB=1.0*sum(SizeInBytes)/1024/1024/1024 by bin(StartTime, 1d), ApplicationName , InstrumentationKey , ClusterName, DatabasePrettyName, Database, ProfileId\\r\\n| top-nested  of ClusterName by count(), top-nested  of DatabasePrettyName by count(), top-nested  of Database by count(),top-nested topAppCountByData of ProfileId by avg_totalGB = avg(totalGB) desc, top-nested of ApplicationName by count(), top-nested of InstrumentationKey by count()\\r\\n| project ClusterName, DatabasePrettyName , Database, ProfileId , ApplicationName ,InstrumentationKey, avg_totalGB\\r\\n| order by ClusterName , avg_totalGB desc \",\"cluster('lxprdscu02').database('Analytics Billing').ApplicationHourlyEntryCount\"),_o1.add(\"database('Analytics Billing').ApplicationHourlyEntryCount\\r\\n| where StartTime >= ago(rangeInDaysForBililngData)\\r\\n| where DataSource == 'AI'\\r\\n| where Database in (longtailDatabases)\\r\\n| summarize totalGB=1.0*sum(SizeInBytes)/1024/1024/1024 by bin(StartTime, 1d), ApplicationName , InstrumentationKey , ClusterName, DatabasePrettyName, Database, ProfileId\\r\\n| top-nested  of ClusterName by count(), top-nested  of DatabasePrettyName by count(), top-nested  of Database by count(),top-nested topAppCountByData of ProfileId by avg_totalGB = avg(totalGB) desc, top-nested of ApplicationName by count(), top-nested of InstrumentationKey by count()\\r\\n| project ClusterName, DatabasePrettyName , Database, ProfileId , ApplicationName ,InstrumentationKey, avg_totalGB\\r\\n| order by ClusterName , avg_totalGB desc \",\"database('Analytics Billing').ApplicationHourlyEntryCount\"),_o1.add(\"find 'abc'\",\"*\"),_o1.add(\"find in (database('*').*) 'abc'\",\"database('*').*\"),_o1.add(\"find in (database(\\\"*\\\").*) 'abc'\",'database(\"*\").*'),_o1.add(\"find in (Table) where\",\"Table\"),_o1.add(\"find in (['Table']) where\",\"['Table']\"),_o1.add(\"find in (database('Office*').*, T*, cluster('somecluster').database('x').T*) 'abc'\",\"database('Office*').*, T*, cluster('somecluster').database('x').T*\"),_o1.add(\"find withsource=X 'abc'\",\"*\"),_o1.add(\"find withsource=X in (database('*').*) 'abc'\",\"database('*').*\"),_o1.add(\"find withsource=X in (database(\\\"*\\\").*) 'abc'\",'database(\"*\").*'),_o1.add(\"find withsource=X in (Table) where\",\"Table\"),_o1.add(\"find withsource=X in (['Table']) where\",\"['Table']\"),_o1.add(\"find withsource=X in (database('Office*').*, T*, cluster('somecluster').database('x').T*) 'abc'\",\"database('Office*').*, T*, cluster('somecluster').database('x').T*\"),_o1.add(\"search 'abc'\",\"*\"),_o1.add(\"Table1 | search 'abc'\",\"Table1\"),_o1.add(\"search in (database('*').*) 'abc'\",\"database('*').*\"),_o1.add(\"search in (database(\\\"*\\\").*) 'abc'\",'database(\"*\").*'),_o1.add(\"search in (Table) where\",\"Table\"),_o1.add(\"search in (Table1, Table2) where\",\"Table1, Table2\"),_o1.add(\"search in (['Table']) where\",\"['Table']\"),_o1.add(\"search in (database('Office*').*, T*, cluster('somecluster').database('x').T*) 'abc'\",\"database('Office*').*, T*, cluster('somecluster').database('x').T*\"),_o1}});Bridge.define(\"Kusto.UT.IntelliSenseRulesTests.IntelliSenseTestPattern\",{$kind:\"nested class\",props:{Input:null,ExpectedMatch:!1,ExpectedRuleKind:0},ctors:{ctor:function(input){this.$initialize();this.Input=input;this.ExpectedRuleKind=Kusto.Data.IntelliSense.RuleKind.None;this.ExpectedMatch=!1},$ctor2:function(input,matchingRule){this.$initialize();this.Input=input;this.ExpectedRuleKind=matchingRule;this.ExpectedMatch=matchingRule!==Kusto.Data.IntelliSense.RuleKind.None},$ctor1:function(input,matchingRule){this.$initialize();this.Input=input;this.ExpectedRuleKind=matchingRule;this.ExpectedMatch=matchingRule!==Kusto.Data.IntelliSense.AdminEngineRuleKind.None}}});Bridge.define(\"Kusto.Charting.DataChartsHelper.ChartMetaData\",{inherits:[Kusto.Charting.IChartMetaData],$kind:\"nested class\",props:{ArgumentColumnType:0,ArgumentDataColumnIndex:0,GeospatialColumnIndexes:{get:function(){return this.GeospatiaColumnlIndexesList}},SeriesIndexes:{get:function(){return this.SeriesIndexesList}},DataIndexes:{get:function(){return this.DataIndexesList}},IsDataFormedAsSeries:!1,SeriesIndexesList:null,DataIndexesList:null,GeospatiaColumnlIndexesList:null,UnusedIndexes:null},alias:[\"ArgumentColumnType\",\"Kusto$Charting$IChartMetaData$ArgumentColumnType\",\"ArgumentDataColumnIndex\",\"Kusto$Charting$IChartMetaData$ArgumentDataColumnIndex\",\"GeospatialColumnIndexes\",\"Kusto$Charting$IChartMetaData$GeospatialColumnIndexes\",\"SeriesIndexes\",\"Kusto$Charting$IChartMetaData$SeriesIndexes\",\"DataIndexes\",\"Kusto$Charting$IChartMetaData$DataIndexes\",\"IsDataFormedAsSeries\",\"Kusto$Charting$IChartMetaData$IsDataFormedAsSeries\",\"UnusedIndexes\",\"Kusto$Charting$IChartMetaData$UnusedIndexes\"],ctors:{init:function(){this.ArgumentDataColumnIndex=-1;this.IsDataFormedAsSeries=!1;this.SeriesIndexesList=new(System.Collections.Generic.List$1(System.Int32).ctor);this.DataIndexesList=new(System.Collections.Generic.List$1(System.Int32).ctor);this.GeospatiaColumnlIndexesList=new(System.Collections.Generic.List$1(System.Int32).ctor);this.UnusedIndexes=new(System.Collections.Generic.List$1(System.Int32).ctor)},ctor:function(argumentColumnType){this.$initialize();this.ArgumentColumnType=argumentColumnType}}});Bridge.define(\"Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider\",{inherits:[Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase],statics:{fields:{s_lineWithDotBeginningRegex:null,s_showCommandRegex:null,s_showFabricCommandRegex:null,s_rotateCommandRegex:null,s_generateCommandRegex:null,s_publishCommandRegex:null,s_unPublishCommandRegex:null,s_afterPipeRegex:null,s_alterCommandRegex:null,s_removeCommandRegex:null,s_setCommandRegex:null,s_createCommandRegex:null,s_deleteCommandRegex:null,s_detachCommandRegex:null,s_checkCommandRegex:null,s_addCommandRegex:null,s_dropCommandRegex:null,s_moveCommandRegex:null,s_migrateCommandRegex:null,s_uninstallCommandRegex:null,s_registerCommandRegex:null,s_putCommandRegex:null,s_listCommandRegex:null,s_listKustoPoolsServicesCommandPropertiesSuffixRegex:null,s_syncCommandRegex:null,s_exportCommandRegex:null,s_exportPackageForOptionsRegex:null,s_exportPackageForProductVersionOptionsRegex:null,s_executeCommandRegex:null,s_executeJobCommandRegex:null,s_activationCommandRegex:null,s_serviceCommandRegex:null,s_ingestLogsIntoCommandRegex:null,s_showClusterOptionsCommandRegex:null,s_operationsCommandRegex:null,s_resultsCommandRegex:null,s_orchestrationCommandRegex:null,s_orchestrationTaskHubCommandRegex:null,s_showAccountCommandRegex:null,s_moveAccountCommandRegex:null,s_fromServiceKeywordRegex:null,s_moveDatabaseFromServiceCommandRegex:null,s_moveAccountSubscriptionCommandRegex:null,s_moveServiceConfigurationCommandRegex:null,s_showTargetServiceCommandRegex:null,s_keysCommandRegex:null,s_alterServiceStorageAccountsCommandRegex:null,s_toKeywordCommandRegex:null,s_storageAccountsKeywordRegex:null,s_regenerateServiceKeywordRegex:null,s_keyTypesKeywordRegex:null,s_alterServicePackagesConfigurationCommandRegex:null,s_fromAccountKeywordRegex:null,s_showCmServiceCommandRegex:null,s_showClusterClientRegex:null,s_showClusterClientSubscriptionCommandRegex:null,s_showClusterClusterNamePrincipalCommandRegex:null,s_showAuditLogCommandRegex:null,s_showAuditLogFromCommandRegex:null,s_configurationKeywordRegex:null,s_showRegionsByHostersKeywordRegex:null,s_showTridentCmServicesKeywordRegex:null,s_showPrincipalRolesCommandRegex:null,s_showAccountsKeywordRegex:null,s_dmServiceAddKeywordRegex:null,s_dmServiceAlterKeywordRegex:null,s_dmServiceAlterSettingsRegex:null,s_dmServiceDropKeywordRegex:null,s_dmServiceShowKeywordRegex:null,s_configurationPropertySetKeywordRegex:null,s_toStringKeywordRegex:null,s_configurationPropertyWithConsentKeywordRegex:null,s_addKeywordRegex:null,s_configurationPropertyDropKeywordRegex:null,s_accountRenameOperationsKeywordRegex:null,s_accountAlterOperationsKeywordRegex:null,s_accountSubscriptionAlterKeywordRegex:null,s_accountAddOperationsKeywordRegex:null,s_accountRemoveOperationsKeywordRegex:null,s_accountSetOperationsKeywordRegex:null,s_serviceAlterOperationsKeywordRegex:null,s_serviceRotateOperationsKeywordRegex:null,s_servicePublishOperationsKeywordRegex:null,s_serviceUnPublishOperationsKeywordRegex:null,s_serviceUnPublishFromRegistryOperationsKeywordRegex:null,s_inServiceKeywordRegex:null,s_databaseKeywordRegex:null,s_createDatabaseCommandRegex:null,s_createServiceCommandRegex:null,s_createExternalCommandRegex:null,s_accountNamesCommandRegex:null,s_servicesNamesToAppendOptionsCommandRegex:null,s_rotateServicesNamesToAppendOptionsCommandRegex:null,s_moveServicesNamesToAppendOptionsCommandRegex:null,s_alterServicesNamesToAppendOptionsCommandRegex:null,s_publishServicesNamesToAppendOptionsCommandRegex:null,s_unPublishServicesNamesToAppendOptionsCommandRegex:null,s_removeServicesNamesToAppendOptionsCommandRegex:null,s_syncKustoPoolServicesNamesToAppendOptionsCommandRegex:null,s_servicesNamesCommandRegex:null,s_withPropertiesSuffixRegex:null,s_withEventHubPropertiesSuffixRegex:null,s_withCosmosDbDataConnectionPropertiesSuffixRegex:null,s_addServiceServiceNameRegex:null,s_databaseOrAccountNameMetadataKeywordRegex:null,s_metadataKeywordRegex:null,s_summaryOrMetadataKeywordRegex:null,s_summaryKeywordRegex:null,s_versionKeywordRegex:null,s_cloudCreateCommandRegex:null,s_regionCreateCommandRegex:null,s_serviceInstallCommandRegex:null,s_serviceDeployCommandRegex:null,s_serviceReinstallCommandRegex:null,s_serviceUninstallCommandRegex:null,s_updateCommandRegex:null,s_serviceMigrateCommandRegex:null,s_clusterMigrateCommandRegex:null,s_addClusterPrincipalsCommandRegex:null,s_addClusterJitPrincipalCommandRegex:null,s_dropClusterJitPrincipalCommandRegex:null,s_setClusterPrincipalsCommandRegex:null,s_dropClusterPrincipalsCommandRegex:null,s_setClusterPrincipalsNoneCommandRegex:null,s_dropAccountPrincipalsCommandRegex:null,s_alterServiceConfigurationDetailsKeywordRegex:null,s_alterServiceConfigurationPropertiesKeywordRegex:null,s_loadBalancerKeywordRegex:null,s_yieldPipeOptionRegex:null,s_cancelServiceOperationRegex:null,s_showSubscriptionCommandRegex:null,s_showServiceSecurityRulesOperationRegex:null,s_notifyCommandRegex:null,s_setSkuAvailabilityRegex:null,s_setSynapseMockedSettingsRegex:null,s_setSkuAvailabilityValuesRegex:null,s_setSkuAvailabilityWithOptionsRegex:null,s_sharedIdentityRegex:null,s_setRegionVisibilityWithOptionsRegex:null,s_registerFeatureRegex:null,s_createResourcesForBillingServiceRegex:null,s_putClientSubscriptionsNotificationRegex:null,s_setSynapseMockedRbacRegex:null,s_syncKustoPoolCommandRegex:null,s_tridentServiceShowByResourceIdCommandRegex:null,s_showServiceDiagnosticSettingsCommandRegex:null,s_showResourceCommandRegex:null,s_showResourceMetricsCommandPropertiesSuffixRegex:null,s_showResourceMetricsCommandRegex:null,s_publishAzureMonitorManifestCommandRegex:null,s_commandColumnNamesAfterPipeRegex:null,s_commandContext_Show:null,s_twoOrMoreSpacesRegex:null,s_removeStringLiteralsRegex:null,s_removeEntityNamesLiteralsRegex:null,s_removeServiceNameRegex:null,s_reservedServiceSuffixesRegex:null,s_removeAccountNameRegex:null,s_removeDatabaseNameRegex:null,s_moveServiceToMaintenanceModeRegex:null,s_cancelServiceMaintenanceModeRegex:null,s_syncKeyVaultPolicyRegex:null,s_KeyVaultRotateCertificateRegex:null,s_extendUnallocatedVirtuaClustersPoolRegex:null,s_adminOperationOptions:null,s_operatorOptions:null,s_showCommandOptions:null,s_updateCommandOptions:null,s_showFabricCommandOptions:null,s_rotateCommandOptions:null,s_registerCommandOptions:null,s_putCommandOptions:null,s_listCommandOptions:null,s_listKustoPoolsServicesPropertiesSuffixOptions:null,s_syncCommandOptions:null,s_showRegionsByHostersOptions:null,s_extendCommandOptions:null,s_showTridentCmServicesOptions:null,s_moveServiceToMaintenanceModeOptions:null,s_cancelServiceMaintenanceModeOptions:null,s_generateCommandOptions:null,s_publishCommandOptions:null,s_unPublishCommandOptions:null,s_uninstallCommandOptions:null,s_alterCommandOptions:null,s_addCommandOptions:null,s_removeCommandOptions:null,s_dropCommandOptions:null,s_setCommandOptions:null,s_createCommandOptions:null,s_createExternalCommandOptions:null,s_createDatabsaeScriptInServiceCommandOption:null,s_deleteCommandOptions:null,s_moveCommandOptions:null,s_migrateCommandOptions:null,s_exportCommandOptions:null,s_detachCommandOptions:null,s_pccodeKeywordOptions:null,s_checkCommandOptions:null,s_serviceKeywordOptions:null,s_activationKeywordOptions:null,s_ingestLogsIntoCommandOptions:null,s_showClusterKeywordOptions:null,s_operationsKeywordOptions:null,s_orchestrationKeywordOptions:null,s_showPrincipalRolesKeywordOptions:null,s_showServiceCommandOptions:null,s_alterServiceCommandOptions:null,s_removeServiceCommandOptions:null,s_showCmServiceCommandOptions:null,s_showClusterClusterNameOptions:null,s_showClusterClientSubscriptionOptions:null,s_showAccountCommandOptions:null,s_moveAccountCommandOptions:null,s_moveAccountSubscriptionCommandOptions:null,s_showTargetServiceCommandOptions:null,s_fromKeywordOptions:null,s_alterServiceConfigurationKeywordOptions:null,s_toKeywordOptions:null,s_moveServiceOptions:null,s_addSetDropPrincipalsKeywordOptions:null,s_addDropJitPrincipalsKeywordOptions:null,s_dropAccountPrincipalsKeywordOptions:null,s_setNoneKeywordOptions:null,s_showServicesCompletionKeywordsOptions:null,s_showAccountsKeywordOptions:null,s_dmServiceAddKeywordOptions:null,s_dmServiceShowKeywordOptions:null,s_dmServiceAlterKeywordOptions:null,s_dmServiceDropKeywordOptions:null,s_keysKeywordOptions:null,s_keyTypesKeywordOptions:null,s_notifyKeywordOptions:null,s_executeCommandOptions:null,s_executeJobCommandOptions:null,s_serviceConfigurationPropertyDropKeywordOptions:null,s_serviceConfigurationPropertySetKeywordOptions:null,s_withConsentKeywordOptions:null,s_storageAccountsKeywordOptions:null,s_serviceRegenerateKeywordOptions:null,s_accountAlterOperationsOptions:null,s_accountRenameOperationsOptions:null,s_accountAddOperationsOptions:null,s_accountRemoveOperationsOptions:null,s_accountSetOperationsOptions:null,s_serviceAlterOperationsOptions:null,s_serviceRotateOperationsOptions:null,s_servicePublishOperationsOptions:null,s_serviceUnPublishOperationsOptions:null,s_inServiceKeywordOptions:null,s_addServiceServiceNameOptions:null,s_metadataKeywordOptions:null,s_summaryKeywordOptions:null,s_summaryOrMetadataKeywordOptions:null,s_versionKeywordOptions:null,s_withPropertiesSuffixOptions:null,s_alterServiceStorageAccountsSuffixOptions:null,s_withEventHubProperties:null,s_withCosmosDbDataConnectionProperties:null,s_withSkuAvailabilityProperties:null,s_regionVisibilityProperties:null,s_installCommandOptions:null,s_uninstallRunnersSyntheticsCommandOptions:null,s_migrateServiceCommandOptions:null,s_migrateClusterCommandOptions:null,s_fromServiceKeywordOptions:null,s_byResourceIdKeywordOptions:null,s_toServiceKeywordOptions:null,s_createDatabaseCommandOptions:null,s_createServiceCommandOptions:null,s_addKeywordOptions:null,s_alterServiceConfigurationPropertiesOptions:null,s_alterServiceConfigurationCommandOptions:null,s_loadBalancerKeywordOptions:null,s_operationKeywordOptions:null,s_showSubscriptionCommandOptions:null,s_showServiceSecurityRulesCommandOptions:null,s_trueFalseKeywordOptions:null,s_skuAvailabilityKeywordOptions:null,s_exportPackageForOptions:null,s_exportPackageForServiceTypeOptions:null,s_sharedIdentityOptions:null,s_registerFeatureCommandOptions:null,s_putClientSubscriptionsNotficationCommandOptions:null,s_syncKustoPoolCommandOptions:null,s_showResourceSuffixOptions:null,s_showResourceMetricsCommandPropertiesSuffixOptions:null,s_showAzureMonitorManifestCommandPropertiesSuffixOptions:null,s_publishAzureMonitorManifestCommandPropertiesSuffixOptions:null,s_singleParamFunctions:null,s_twoParamFunctions:null,s_threeParamFunctions:null,s_manyParamFunctions:null},ctors:{init:function(){this.s_lineWithDotBeginningRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showFabricCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+fabric\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_rotateCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.rotate\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_generateCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.generate\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_publishCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.publish\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_unPublishCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.unpublish\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_afterPipeRegex=new System.Text.RegularExpressions.Regex.ctor(\"\\\\|\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.alter\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_removeCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.remove\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_createCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.create\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_deleteCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.delete\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_detachCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.detach\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_checkCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.check\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_addCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.add\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_dropCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.drop\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_moveCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.move\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_migrateCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.migrate\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_uninstallCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.uninstall\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_registerCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.register\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_putCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.put\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_listCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.list\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_listKustoPoolsServicesCommandPropertiesSuffixRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.list\\\\s+kustopools\\\\s+services\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_syncCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.sync\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_exportCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.export\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_exportPackageForOptionsRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.export\\\\s+package\\\\s+for\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_exportPackageForProductVersionOptionsRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.export\\\\s+package\\\\s+for\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_executeCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.execute\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_executeJobCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.execute\\\\s+job\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_activationCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.(resume|suspend)\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_serviceCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.(reallocate|restart|reimage|rebuild|stop|install|deploy|reinstall|recycle|ingest|migrate|cancel|regenerate)\\\\s+$|^\\\\s*\\\\.ingest\\\\s+service\\\\s+\\\\S+\\\\s+storage\\\\s+logs\\\\s+into\\\\s$|^\\\\s*\\\\.show\\\\s+cm\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_ingestLogsIntoCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.ingest\\\\s+service\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showClusterOptionsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+cluster\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_operationsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+(running|completed|failed)\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_resultsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+operations\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_orchestrationCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+orchestration\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_orchestrationTaskHubCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+orchestration\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showAccountCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+account\\\\s+\\\\[.*?\\\\]\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_moveAccountCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.move\\\\s+account\\\\s+\\\\[[^\\\\]]*?\\\\]\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_fromServiceKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.move\\\\s+database\\\\s+\\\\S+\\\\s+$|^\\\\s*\\\\.create\\\\s+follower\\\\s+database\\\\s+\\\\S+\\\\s+in\\\\s+service\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_moveDatabaseFromServiceCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.move\\\\s+database\\\\s+\\\\S+\\\\s+from\\\\s+service\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_moveAccountSubscriptionCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.move\\\\s+account\\\\s+(\\\\S+|\\\\[.*?\\\\])\\\\s+subscription\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_moveServiceConfigurationCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.move\\\\s+service\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showTargetServiceCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+service\\\\s(?!versions|model|(packages configuration)\\\\b)\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_keysCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+service\\\\s+\\\\S+\\\\s+storage\\\\s+accounts\\\\s+$|^\\\\s*\\\\.regenerate\\\\s+service\\\\s+\\\\S+\\\\s+storage\\\\s+accounts\\\\s+(primary|secondary)\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterServiceStorageAccountsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.alter\\\\s+service\\\\s+\\\\S+\\\\s+storage\\\\s+accounts\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_toKeywordCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.alter\\\\s+service\\\\s+\\\\S+\\\\s+storage\\\\s+accounts\\\\s+keys\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_storageAccountsKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.recycle\\\\s+service\\\\s+\\\\S+\\\\s+$|^\\\\s*\\\\.add\\\\s+service\\\\s+\\\\S+\\\\s+database\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_regenerateServiceKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.regenerate\\\\s+service\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_keyTypesKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.regenerate\\\\s+service\\\\s+\\\\S+\\\\s+storage\\\\s+accounts\\\\s+$|^\\\\s*\\\\.alter\\\\s+service\\\\s+\\\\S+\\\\s+storage\\\\s+accounts\\\\s+keys\\\\s+to\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterServicePackagesConfigurationCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.alter\\\\s+service\\\\s+((?!packages)\\\\S+|\\\\[.*?\\\\])\\\\s+configuration\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_fromAccountKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.alter\\\\s+account\\\\s+(\\\\S+|\\\\[.*?\\\\])\\\\s+configuration\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showCmServiceCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+cm\\\\s+service\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showClusterClientRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+cluster\\\\s+((?!monitoring\\\\b)(?!principals\\\\b)\\\\S+|\\\\[.*?\\\\])\\\\s$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showClusterClientSubscriptionCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+cluster\\\\s+(\\\\S+|\\\\[.*?\\\\])\\\\s+client\\\\s$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showClusterClusterNamePrincipalCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+cluster\\\\s+(\\\\S+|\\\\[.*?\\\\])\\\\s+principal\\\\s+(\\\\S+|\\\\[.*?\\\\])\\\\s$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showAuditLogCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+(service|account)\\\\s+\\\\S+\\\\s+audit\\\\s+log\\\\s+$|^\\\\s*\\\\.show\\\\s+audit\\\\s+log\\\\s+by\\\\s+clientactivityid\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showAuditLogFromCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+(service|account)\\\\s+\\\\S+\\\\s+audit\\\\s+log\\\\s+from\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_configurationKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+services\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showRegionsByHostersKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+regions\\\\s+by\\\\s+hosters\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showTridentCmServicesKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+trident\\\\s+cm\\\\s+services+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showPrincipalRolesCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+principal\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showAccountsKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+accounts\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_dmServiceAddKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.add\\\\s+((trident\\\\s+)?virtual\\\\s+)?dm\\\\s+service\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_dmServiceAlterKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.alter\\\\s+dm\\\\s+service\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_dmServiceAlterSettingsRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.alter\\\\s+dm\\\\s+service\\\\s+\\\\S+\\\\s+settings\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_dmServiceDropKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.drop\\\\s+(trident\\\\s+virtual\\\\s+)?dm\\\\s+service\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_dmServiceShowKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+(trident\\\\s+virtual\\\\s+|virtual\\\\s+)?dm\\\\s+service\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_configurationPropertySetKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+service\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_toStringKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+service\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+$|^\\\\s*\\\\.set\\\\s+account\\\\s+\\\\[.*?\\\\]\\\\s+(division|servicetree)\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_configurationPropertyWithConsentKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+service\\\\s+\\\\S+\\\\s+(?i)InstancesCount\\\\s+(auto|to\\\\s+\\\\S+)\\\\s+$|^\\\\s*\\\\.set\\\\s+service\\\\s+\\\\S+\\\\s+(?i)VmSize\\\\s+to\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_addKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+service\\\\s+\\\\S+\\\\s+NumberOfDatabaseStorageAccounts\\\\s+to\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_configurationPropertyDropKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.drop\\\\s+service\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_accountRenameOperationsKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.rename\\\\s+account\\\\s+(\\\\S+|\\\\[.*?\\\\])\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_accountAlterOperationsKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.alter\\\\s+account\\\\s+\\\\[.*?\\\\]\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_accountSubscriptionAlterKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.alter\\\\s+account\\\\s+\\\\[.*?\\\\]\\\\s+subscription\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_accountAddOperationsKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.add\\\\s+account\\\\s+\\\\[.*?\\\\]\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_accountRemoveOperationsKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.remove\\\\s+account\\\\s+\\\\[.*?\\\\]\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_accountSetOperationsKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+account\\\\s+\\\\[.*?\\\\]\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_serviceAlterOperationsKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.alter\\\\s+service\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_serviceRotateOperationsKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.rotate\\\\s+service\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_servicePublishOperationsKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.publish\\\\s+service\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_serviceUnPublishOperationsKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.unpublish\\\\s+service\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_serviceUnPublishFromRegistryOperationsKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.unpublish\\\\s+service\\\\s+\\\\S+\\\\s+from\\\\s+registry\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_inServiceKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.delete\\\\s+(trident\\\\s+)?database\\\\s+\\\\S+\\\\s+$|^\\\\s*\\\\.create\\\\s+(trident\\\\s+)?database\\\\s+\\\\S+\\\\s+ifNotExists\\\\s+$|^\\\\s*\\\\.detach\\\\s+follower\\\\s+database\\\\s+\\\\S+\\\\s+$|^\\\\s*\\\\.create\\\\s+follower\\\\s+database\\\\s+\\\\S+\\\\s+$|^\\\\s*\\\\.create\\\\s+database\\\\s+script\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_databaseKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.create\\\\s+database\\\\s+script\\\\s+\\\\S+\\\\s+in\\\\s+service\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_createDatabaseCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.create\\\\s+(trident\\\\s+)?database\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_createServiceCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.create\\\\s+service\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_createExternalCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.create\\\\s+external\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_accountNamesCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.(add|remove|alter|rename|show|detach|move|set|drop)\\\\s+account\\\\s+$|^\\\\s*\\\\.move\\\\s+account\\\\s+(\\\\S+|\\\\[.*?\\\\])\\\\s+subscription\\\\s+\\\\S+\\\\s+to\\\\s+account\\\\s+$|^\\\\s*\\\\.rename\\\\s+account\\\\s+(\\\\S+|\\\\[.*?\\\\])\\\\s+to\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_servicesNamesToAppendOptionsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+service\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_rotateServicesNamesToAppendOptionsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.rotate\\\\s+service\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_moveServicesNamesToAppendOptionsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.move\\\\s+service\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterServicesNamesToAppendOptionsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.alter\\\\s+service\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_publishServicesNamesToAppendOptionsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.publish\\\\s+service\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_unPublishServicesNamesToAppendOptionsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.unpublish\\\\s+service\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_removeServicesNamesToAppendOptionsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.remove\\\\s+service\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_syncKustoPoolServicesNamesToAppendOptionsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.sync\\\\s+kustopool\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_servicesNamesCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.delete\\\\s+(trident\\\\s+)?database\\\\s+\\\\S+\\\\s+in\\\\s+service\\\\s+$|^\\\\s*\\\\.create\\\\s+(trident\\\\s+)?database\\\\s+\\\\S+\\\\s+(ifNotExists\\\\s+)?in\\\\s+service\\\\s+$|^\\\\s*\\\\.drop\\\\s+trident\\\\s+database\\\\s+\\\\S+\\\\s+policy\\\\s+in\\\\s+service\\\\s+$|^\\\\s*\\\\.update\\\\s+trident\\\\s+database\\\\s+\\\\S+\\\\s+policy\\\\s+in\\\\s+service\\\\s+$|^\\\\s*\\\\.create\\\\s+follower\\\\s+database\\\\s+\\\\S+\\\\s+in\\\\s+service\\\\s+$|^\\\\s*\\\\.create\\\\s+follower\\\\s+database\\\\s+\\\\S+\\\\s+in\\\\s+service\\\\s+\\\\S+\\\\s+from\\\\s+service\\\\s+$|^\\\\s*\\\\.detach\\\\s+follower\\\\s+database\\\\s+\\\\S+\\\\s+in\\\\s+service\\\\s+$|^\\\\s*\\\\.(reallocate|restart|reimage|rebuild|stop|uninstall|install|deploy|reinstall|recycle|set|add|ingest|drop|migrate|cancel|regenerate)\\\\s+service\\\\s+$|^\\\\s*\\\\.(resume|suspend|migrate)\\\\s+cluster\\\\s+$|^\\\\s*\\\\.delete\\\\s+(service|cluster|virtual\\\\s+cluster|trident\\\\s+virtual\\\\s+cluster)\\\\s+$|^\\\\s*\\\\.(add|drop|alter|show)\\\\s+dm\\\\s+service\\\\s+$|^\\\\s*\\\\.ingest\\\\s+service\\\\s+\\\\S+\\\\s+storage\\\\s+logs\\\\s+into\\\\s+service\\\\s+$|^\\\\s*\\\\.move\\\\s+database\\\\s+\\\\S+\\\\s+from\\\\s+service\\\\s+$|^\\\\s*\\\\.move\\\\s+database\\\\s+\\\\S+\\\\s+from\\\\s+service\\\\s+\\\\S+\\\\s+to\\\\s+service\\\\s+$|^\\\\s*\\\\.create\\\\s+database\\\\s+script\\\\s+\\\\S+\\\\s+in\\\\s+service\\\\s+$|^\\\\s*\\\\.move\\\\s+service\\\\s+$|^\\\\s*\\\\.sync\\\\s+kustopool\\\\s+$|^\\\\s*\\\\.migrate\\\\s+cluster\\\\s+(to\\\\s+)?$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_withPropertiesSuffixRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.delete\\\\s+(trident\\\\s+)?database\\\\s+\\\\S+\\\\s+in\\\\s+service\\\\s+\\\\S+\\\\s+$|^\\\\s*\\\\.show\\\\s+trident\\\\s+cm\\\\s+services\\\\s+$|^\\\\s*\\\\.create\\\\s+(trident\\\\s+)?database\\\\s+\\\\S+\\\\s+(ifNotExists\\\\s+)?in\\\\s+service\\\\s+\\\\S+\\\\s+$|^\\\\s*\\\\.drop\\\\s+trident\\\\s+database\\\\s+\\\\S+\\\\s+policy\\\\s+in\\\\s+service\\\\s+\\\\S+\\\\s+$|^\\\\s*\\\\.update\\\\s+trident\\\\s+database\\\\s+\\\\S+\\\\s+policy\\\\s+in\\\\s+service\\\\s+\\\\S+\\\\s+$|^\\\\s*\\\\.detach\\\\s+follower\\\\s+database\\\\s+\\\\S+\\\\s+in\\\\s+service\\\\s+\\\\S+\\\\s+$|^\\\\s*\\\\.(delete|reallocate|restart|rebuild|reimage|reinstall)\\\\s+service\\\\s+\\\\S+\\\\s+$|^\\\\s*\\\\.create\\\\s+service\\\\s+\\\\S+\\\\s+ifNotExists\\\\s+$|^\\\\s*\\\\.create\\\\s+external\\\\s+cluster\\\\s+\\\\S+\\\\s+$|^\\\\s*\\\\.create\\\\s+synapse\\\\s+cluster\\\\s+\\\\S+\\\\s+$|^\\\\s*\\\\.delete\\\\s+cluster\\\\s+\\\\S+\\\\s+$|^\\\\s*\\\\.delete\\\\s+virtual\\\\s+cluster\\\\s+\\\\S+\\\\s+$|^\\\\s*\\\\.delete\\\\s+trident\\\\s+virtual\\\\s+cluster\\\\s+\\\\S+\\\\s+$|^\\\\s*\\\\.(add|drop)\\\\s+((trident\\\\s+)?virtual\\\\s+)?dm\\\\s+service\\\\s+\\\\S+\\\\s+(data obtainer|storage accounts)\\\\s+$|^\\\\s*\\\\.alter\\\\s+dm\\\\s+service\\\\s+\\\\S+\\\\s+storage\\\\s+account\\\\s+\\\\S+\\\\s+$|^\\\\s*\\\\.alter\\\\s+dm\\\\s+service\\\\s+\\\\S+\\\\s+eventhub\\\\s+ingestion\\\\s+source\\\\s+\\\\S+\\\\s+$|^\\\\s*\\\\.alter\\\\s+service\\\\s+packages\\\\s+configuration\\\\s+$|^\\\\s*\\\\.remove\\\\s+service\\\\s+package\\\\s+configuration\\\\s+$|^\\\\s*\\\\.alter\\\\s+sandbox\\\\s+packages\\\\s+configuration\\\\s+$|^\\\\s*\\\\.add\\\\s+account\\\\s\\\\[.*?\\\\]\\\\s+contact\\\\s+$|^\\\\s*\\\\.add\\\\s+service\\\\s+\\\\S+\\\\s+database\\\\s+\\\\S+\\\\s+storage\\\\s+accounts\\\\s+$|^\\\\s*\\\\.alter\\\\s+service\\\\s+\\\\S+\\\\s+storage\\\\s+accounts\\\\s+$|^\\\\s*\\\\.ingest\\\\s+service\\\\s+\\\\S+\\\\s+storage\\\\s+logs\\\\s+into\\\\s+service\\\\s+\\\\S+\\\\s+$|^\\\\s*\\\\.ingest\\\\s+service\\\\s+\\\\S+\\\\s+dsc\\\\s+logs\\\\s+$|^\\\\s*\\\\.install\\\\s+service\\\\s+\\\\S+\\\\s+runners\\\\s+$|^\\\\s*\\\\.install\\\\s+service\\\\s+\\\\S+\\\\s+synthetics\\\\s+$|^\\\\s*\\\\.uninstall\\\\s+service\\\\s+\\\\S+\\\\s+synthetics\\\\s+$|^\\\\s*\\\\.update\\\\s+synthetics\\\\s+packages\\\\s+$|^\\\\s*\\\\.show\\\\s+synthetics\\\\s+information\\\\s+$|^\\\\s*\\\\.alter\\\\s+synthetics\\\\s+information\\\\s+$|^\\\\s*\\\\.migrate\\\\s+service\\\\s+\\\\S+\\\\s+to\\\\s+(AzurePaas1|AzureVMSS)\\\\s+$|^\\\\s*\\\\.move\\\\s+database\\\\s+\\\\S+\\\\s+from\\\\s+service\\\\s+\\\\S+\\\\s+to\\\\s+service\\\\s+\\\\S+\\\\s+$|^\\\\s*\\\\.add\\\\s+cluster\\\\s+((?!admins\\\\b)(?!ops\\\\b)(?!users\\\\b)(?!viewers\\\\b)(?!jitmanagers\\\\b)\\\\S+|\\\\S)\\\\s+principal\\\\s+\\\\S+\\\\s$|^\\\\s*\\\\.drop\\\\s+cluster\\\\s+((?!admins\\\\b)(?!ops\\\\b)(?!users\\\\b)(?!viewers\\\\b)(?!jitmanagers\\\\b)\\\\S+|\\\\S)\\\\s+principal\\\\s+\\\\S+\\\\s$|^\\\\s*\\\\.execute\\\\s+job\\\\s+\\\\S+\\\\s+$|^\\\\s*\\\\.add\\\\s+region\\\\s+(\\\\S+|\\\\[.*?\\\\])\\\\s$|^\\\\s*\\\\.remove\\\\s+region\\\\s+(\\\\S+|\\\\[.*?\\\\])\\\\s$|^\\\\s*\\\\.add\\\\s+service\\\\s+\\\\S+\\\\s+storage\\\\s+accounts\\\\s+$|^\\\\s*\\\\.add\\\\s+subscriptions\\\\s+AutomaticOSUpgradePolicy\\\\s+$|^\\\\s*\\\\.create\\\\s+follower\\\\s+database\\\\s+\\\\S+\\\\s+in\\\\s+service\\\\s+\\\\S+\\\\s+from\\\\s+service\\\\s+\\\\S+\\\\s$|^\\\\s*\\\\.alter\\\\s+region\\\\s+(\\\\S+|\\\\[.*?\\\\])\\\\s$|^\\\\s*\\\\.alter\\\\s+keyvault\\\\s+(\\\\S+|\\\\[.*?\\\\])\\\\s$|^\\\\s*\\\\.add\\\\s+client\\\\s+subscriptions\\\\s+(\\\\S+|\\\\[.*?\\\\])\\\\s$|^\\\\s*\\\\.alter\\\\s+client\\\\s+subscriptions\\\\s+(\\\\S+|\\\\[.*?\\\\])\\\\s$|^\\\\s*\\\\.remove\\\\s+client\\\\s+subscriptions\\\\s+(\\\\S+|\\\\[.*?\\\\])\\\\s$|^\\\\s*\\\\.create\\\\s+database\\\\s+script\\\\s+\\\\S+\\\\s+in\\\\s+service\\\\s+\\\\S+\\\\s+database\\\\s+\\\\S+\\\\s+$|^\\\\s*\\\\.extend\\\\s+unallocated\\\\s+virtual\\\\s+clusters\\\\s+pool\\\\s+to\\\\s+\\\\S+\\\\s+$|^\\\\s*\\\\.migrate\\\\s+cluster\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_withEventHubPropertiesSuffixRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.add\\\\s+((trident\\\\s+)?virtual\\\\s+)?dm\\\\s+service\\\\s+\\\\S+\\\\s+eventhub\\\\s+(obtainer|ingestion source)\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_withCosmosDbDataConnectionPropertiesSuffixRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.add\\\\s+dm\\\\s+service\\\\s+\\\\S+\\\\s+cosmosdb\\\\s+data connection\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_addServiceServiceNameRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.add\\\\s+service\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_databaseOrAccountNameMetadataKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+service\\\\s+\\\\S+\\\\s+(database|account)\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_metadataKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+service\\\\s+\\\\S+\\\\s+account\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_summaryOrMetadataKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+service\\\\s+\\\\S+\\\\s+database\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_summaryKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+service\\\\s+\\\\S+\\\\s+databases\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_versionKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+service\\\\s+\\\\S+\\\\s+(database|account)\\\\s+\\\\S+\\\\s+metadata\\\\s+$|^\\\\s*\\\\.show\\\\s+service\\\\s+\\\\S+\\\\s+metadata\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_cloudCreateCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.create\\\\s+cloud\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_regionCreateCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.create\\\\s+region\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_serviceInstallCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.install\\\\s+service\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_serviceDeployCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.deploy\\\\s+service\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_serviceReinstallCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.reinstall\\\\s+service\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_serviceUninstallCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.uninstall\\\\s+service\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_updateCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.update\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_serviceMigrateCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.migrate\\\\s+service\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_clusterMigrateCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.migrate\\\\s+cluster\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_addClusterPrincipalsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.add\\\\s+cluster\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_addClusterJitPrincipalCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.add\\\\s+cluster\\\\s+((?!admins\\\\b)(?!ops\\\\b)(?!users\\\\b)(?!viewers\\\\b)(?!jitmanagers\\\\b)\\\\S+|\\\\S)\\\\s$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_dropClusterJitPrincipalCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.drop\\\\s+cluster\\\\s+((?!admins\\\\b)(?!ops\\\\b)(?!users\\\\b)(?!viewers\\\\b)(?!jitmanagers\\\\b)\\\\S+|\\\\S)\\\\s$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setClusterPrincipalsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+cluster\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_dropClusterPrincipalsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.drop\\\\s+cluster\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setClusterPrincipalsNoneCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+cluster\\\\s+(admins|ops|users|viewers)\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_dropAccountPrincipalsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.drop\\\\s+account\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterServiceConfigurationDetailsKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.alter\\\\s+service\\\\s+((?!packages)\\\\S+|\\\\[.*?\\\\])\\\\s+configuration\\\\s+(details\\\\s+)?$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterServiceConfigurationPropertiesKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.alter\\\\s+service\\\\s+(\\\\S+|\\\\[.*?\\\\])\\\\s+configuration\\\\s+(details\\\\s+)?\\\\((\\\\s*\\\\S+\\\\s*=\\\\s*['\\\"].*?['\\\"]\\\\s*)?\\\\s*(,(\\\\s*\\\\S+\\\\s*=\\\\s*['\\\"].*?['\\\"]\\\\s*))*\\\\)\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_loadBalancerKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.add\\\\s+service\\\\s+\\\\S+\\\\s+to\\\\s+$|^\\\\s*\\\\.drop\\\\s+service\\\\s+\\\\S+\\\\s+from\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_yieldPipeOptionRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+((ame|corp)\\\\s+)?resources\\\\s+$|^\\\\s*\\\\.show\\\\s+(account|subscription|service|tenant)\\\\s+\\\\S+\\\\s+((ame|corp)\\\\s+)?resources\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_cancelServiceOperationRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.cancel\\\\s+service\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showSubscriptionCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+subscription\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showServiceSecurityRulesOperationRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+service\\\\s+\\\\S+\\\\s+securityrules\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_notifyCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.notify\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setSkuAvailabilityRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+sku\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setSynapseMockedSettingsRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+synapse\\\\s+mock\\\\s+settings\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setSkuAvailabilityValuesRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+sku\\\\s+\\\\S+\\\\s+availability\\\\s+to\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setSkuAvailabilityWithOptionsRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+sku\\\\s+\\\\S+\\\\s+availability\\\\s+to\\\\s+'(true|false)'\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_sharedIdentityRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*(\\\\.assign|\\\\.remove)\\\\s+service\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setRegionVisibilityWithOptionsRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+region\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_registerFeatureRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.register\\\\s+feature\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_createResourcesForBillingServiceRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.create\\\\s+resources\\\\s+for\\\\s+billing\\\\s+service\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_putClientSubscriptionsNotificationRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.put\\\\s+client\\\\s+subscriptions\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setSynapseMockedRbacRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+synapse\\\\s+mock\\\\s+rbac\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_syncKustoPoolCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.sync\\\\s+kustopool\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_tridentServiceShowByResourceIdCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+trident\\\\s+services\\\\s+configuration\\\\s+by\\\\s+tenantId\\\\s+\\\\S+\\\\s+(by\\\\s+capacityId\\\\s+\\\\S+\\\\s+)?$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showServiceDiagnosticSettingsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+service\\\\s+\\\\S+\\\\s+diagnostic settings\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showResourceCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+resource\\\\s+(\\\\S+|\\\\[.*?\\\\])\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showResourceMetricsCommandPropertiesSuffixRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+resource\\\\s+\\\\S+\\\\s+metrics\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showResourceMetricsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+azure\\\\s+monitor\\\\s+manifest\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_publishAzureMonitorManifestCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.publish\\\\s+azure\\\\s+monitor\\\\s+manifest\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_commandColumnNamesAfterPipeRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)(where)\\\\s+$|(^|\\\\|\\\\s*?)(where)\\\\s+[^\\\\|]+(and|or)\\\\s+$|(^|\\\\|\\\\s*?)project\\\\s+$|(^|\\\\|\\\\s*?)project\\\\s+[^\\\\|]*,\\\\s+$|(^|\\\\|\\\\s*?)project-away\\\\s+$|(^|\\\\|\\\\s*?)project-away\\\\s+[^\\\\|]*,\\\\s+$|(^|\\\\|\\\\s*?)project-rename\\\\s+[^\\\\|]*?\\\\=\\\\s*$|(^|\\\\|\\\\s*?)project-rename\\\\s+[^\\\\|]*,\\\\s+[^\\\\|]*?\\\\=\\\\s*$|(^|\\\\|\\\\s*?)extend\\\\s+[^\\\\|]*?[\\\\=\\\\-\\\\+\\\\/\\\\*]\\\\s*$|(^|\\\\|\\\\s*?)project\\\\s+[^\\\\|]*?\\\\=\\\\s*$|\\\\b(\"+(Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_singleParamFunctions||\"\")+\"\\\\()\\\\s*$|(^|\\\\|\\\\s*?)summarize\\\\s+[^\\\\|]*?by\\\\s+$|(^|\\\\|\\\\s*?)summarize\\\\s+[^\\\\|]*\\\\)\\\\s*,\\\\s+$|(^|\\\\|\\\\s*?)summarize\\\\s+[^\\\\|]*?by\\\\s+(?!bin)[^\\\\|]+,\\\\s+$|(^|\\\\|\\\\s*?)distinct\\\\s+([^\\\\|]+,\\\\s+)?$|(\"+(Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_twoParamFunctions||\"\")+\"\\\\()\\\\s*$|(\"+(Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_threeParamFunctions||\"\")+\"\\\\()\\\\s*$|(\"+(Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_manyParamFunctions||\"\")+\"\\\\()\\\\s*$|(^|\\\\|\\\\s*?)(top\\\\s+\\\\d+|sort|order|reduce)\\\\s+by\\\\s+$|(^|\\\\|\\\\s*?)((top\\\\s+\\\\d+|sort|order).*?by.*?(asc|desc))[ ]+$|(^|\\\\|\\\\s*?)parse\\\\s+(kind\\\\s*=\\\\s*\\\\w+\\\\s*(flags\\\\s*=\\\\s*\\\\w+\\\\s*)?\\\\s*)?\\\\s*$|(^|\\\\|\\\\s*?)render\\\\s+timepivot\\\\s+by(.*,)?\\\\s+$|(^|\\\\|\\\\s*?).*top-hitters.*of\\\\s+$|(^|\\\\|\\\\s*?).*sample-distinct.*of\\\\s+$|(^|\\\\|\\\\s*?)(make-series\\\\s+[^\\\\|]*\\\\bon\\\\s+[^\\\\|]+\\\\s+in\\\\s+range\\\\b\\\\([^\\\\|]+,[^\\\\|]+\\\\,[^\\\\|]+\\\\))\\\\s+by\\\\s+$|(^|\\\\|\\\\s*?)(make-series\\\\s+[^\\\\|]*\\\\bon\\\\s+[^\\\\|]+\\\\s+in\\\\s+range\\\\b\\\\([^\\\\|]+,[^\\\\|]+\\\\,[^\\\\|]+\\\\))\\\\s+by\\\\s+[^\\\\|]+?,\\\\s+$|(^|\\\\|\\\\s*?)(make-series\\\\s+[^\\\\|]*\\\\bon\\\\b)\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_commandContext_Show=new System.Text.RegularExpressions.Regex.ctor(\"^(?<Context>\\\\.show\\\\s+(\\\\w|\\\\[|\\\\]|\\\\-)+(\\\\s+(\\\\w|\\\\[|\\\\]|\\\\-)+)*)\\\\b\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_twoOrMoreSpacesRegex=new System.Text.RegularExpressions.Regex.ctor(\"\\\\s\\\\s+\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_removeStringLiteralsRegex=new System.Text.RegularExpressions.Regex.ctor(\"('.*?'|\\\".*?\\\")\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_removeEntityNamesLiteralsRegex=new System.Text.RegularExpressions.Regex.ctor(\"(\\\\[.*?\\\\])\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_removeServiceNameRegex=new System.Text.RegularExpressions.Regex.ctor(\"service\\\\s+\\\\S+\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_reservedServiceSuffixesRegex=new System.Text.RegularExpressions.Regex.ctor(\"service\\\\s+(versions|model|(packages\\\\s+configuration))\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_removeAccountNameRegex=new System.Text.RegularExpressions.Regex.ctor(\"account\\\\s+\\\\S+\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_removeDatabaseNameRegex=new System.Text.RegularExpressions.Regex.ctor(\"database\\\\s+\\\\S+\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_moveServiceToMaintenanceModeRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.move\\\\s+service\\\\s+\\\\S+\\\\s+to\\\\s+maintenance\\\\s+$|^\\\\s*\\\\.move\\\\s+service\\\\s+\\\\S+\\\\s+database\\\\s+\\\\S+\\\\s+to\\\\s+maintenance\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_cancelServiceMaintenanceModeRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.cancel\\\\s+service\\\\s+\\\\S+\\\\s+maintenance\\\\s+$|^\\\\s*\\\\.cancel\\\\s+service\\\\s+\\\\S+\\\\s+database\\\\s+\\\\S+\\\\s+maintenance\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_syncKeyVaultPolicyRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.sync\\\\s+keyvault\\\\s+policy\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_KeyVaultRotateCertificateRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.rotate\\\\s+keyvault\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_extendUnallocatedVirtuaClustersPoolRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.extend\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_adminOperationOptions=System.Array.init([\"show\",\"set\",\"reallocate\",\"restart\",\"reimage\",\"rebuild\",\"create\",\"alter\",\"install\",\"reinstall\",\"add\",\"remove\",\"check\",\"recycle\",\"stop\",\"uninstall\",\"detach\",\"delete\",\"ingest\",\"drop\",\"move\",\"migrate\",\"suspend\",\"resume\",\"cancel\",\"regenerate\",\"notify\",\"execute\",\"generate\",\"publish\",\"unpublish\",\"export\",\"rotate\",\"register\",\"put\",\"list\",\"update\",\"sync\"],System.String);this.s_operatorOptions=System.Array.init([\"where\",\"count\",\"extend\",\"limit\",\"order\",\"project\",\"project-away\",\"project-rename\",\"sort\",\"summarize\",\"take\",\"top\",\"mv-expand\"],System.String);this.s_showCommandOptions=System.Array.init([\"service\",\"services\",\"account\",\"accounts\",\"operations\",\"results\",\"running\",\"completed\",\"failed\",\"version\",\"diagnostics\",\"cluster\",\"unallocated subscriptions\",\"subscription\",\"tenant\",\"principal\",\"resources\",\"ame resources\",\"corp resources\",\"sandbox packages configuration\",\"cm\",\"skus availability\",\"dm service\",\"audit log by clientactivityid\",\"regions\",\"client subscriptions\",\"sharedidentity\",\"arm manifest\",\"arm manifest publish\",\"ephemeral registry\",\"fabric\",\"feature flags\",\"clustermanagementsettings\",\"cloud settings\",\"synthetics information\",\"synthetics pods\",\"synthetics jobGroup\",\"disk encryption set\",\"orchestration\",\"resource\",\"leftover virtual services\",\"trident services configuration by tenantId\",\"azure monitor manifest\"],System.String);this.s_updateCommandOptions=System.Array.init([\"synthetics packages\"],System.String);this.s_showFabricCommandOptions=System.Array.init([\"locks\",\"clocks\",\"services\",\"nodes\"],System.String);this.s_rotateCommandOptions=System.Array.init([\"service\",\"keyvault\"],System.String);this.s_registerCommandOptions=System.Array.init([\"feature\"],System.String);this.s_putCommandOptions=System.Array.init([\"client subscriptions\"],System.String);this.s_listCommandOptions=System.Array.init([\"kustopools by workspace name\",\"kustopools by workspace id\",\"kustopools services\"],System.String);this.s_listKustoPoolsServicesPropertiesSuffixOptions=System.Array.init([\"with(AccountName='VALUE')\",\"with(ServiceName='VALUE')\",\"with(WorkspaceId='VALUE')\",\"with(AccountName='VALUE', ServiceName='VALUE', WorkspaceId='VALUE')\"],System.String);this.s_syncCommandOptions=System.Array.init([\"kustopool\",\"keyvault policy\"],System.String);this.s_showRegionsByHostersOptions=System.Array.init([\"regions\",\"by\",\"hosters\"],System.String);this.s_extendCommandOptions=System.Array.init([\"unallocated virtual clusters pool to\"],System.String);this.s_showTridentCmServicesOptions=System.Array.init([\"trident\",\"cm\",\"services\"],System.String);this.s_moveServiceToMaintenanceModeOptions=System.Array.init([\"database\"],System.String);this.s_cancelServiceMaintenanceModeOptions=System.Array.init([\"database\"],System.String);this.s_generateCommandOptions=System.Array.init([\"arm manifest\"],System.String);this.s_publishCommandOptions=System.Array.init([\"arm manifest\",\"service\",\"azure monitor manifest\"],System.String);this.s_unPublishCommandOptions=System.Array.init([\"service\"],System.String);this.s_uninstallCommandOptions=System.Array.init([\"service\",\"runners\"],System.String);this.s_alterCommandOptions=System.Array.init([\"service\",\"dm service\",\"account\",\"client subscriptions\",\"region\",\"synthetics information\",\"keyvault\"],System.String);this.s_addCommandOptions=System.Array.init([\"account\",\"service\",\"dm service\",\"unallocated subscription\",\"cluster\",\"region\",\"client subscriptions\",\"subscriptions AutomaticOSUpgradePolicy\"],System.String);this.s_removeCommandOptions=System.Array.init([\"account\",\"unallocated subscription\",\"region\",\"service\"],System.String);this.s_dropCommandOptions=System.Array.init([\"dm service\",\"service\",\"cluster\",\"account\"],System.String);this.s_setCommandOptions=System.Array.init([\"service\",\"account\",\"cluster\",\"sku\",\"region\",\"synapse mock settings\",\"synapse mock rbac\"],System.String);this.s_createCommandOptions=System.Array.init([\"database\",\"trident database\",\"service\",\"account\",\"external\",\"synapse cluster\",\"trident virtual cluster\",\"resources for billing service\",\"follower database\",\"database script\"],System.String);this.s_createExternalCommandOptions=System.Array.init([\"cluster\"],System.String);this.s_createDatabsaeScriptInServiceCommandOption=System.Array.init([\"database\"],System.String);this.s_deleteCommandOptions=System.Array.init([\"virtual cluster\",\"trident virtual cluster\",\"cluster\",\"database\",\"service\"],System.String);this.s_moveCommandOptions=System.Array.init([\"account\",\"database\",\"service\"],System.String);this.s_migrateCommandOptions=System.Array.init([\"cluster\",\"service\"],System.String);this.s_exportCommandOptions=System.Array.init([\"service\",\"package for\"],System.String);this.s_detachCommandOptions=System.Array.init([\"account\",\"follower database\"],System.String);this.s_pccodeKeywordOptions=System.Array.init([\"pccode\"],System.String);this.s_checkCommandOptions=System.Array.init([\"service name availability\",\"armaccess (KEY='VALUE')\"],System.String);this.s_serviceKeywordOptions=System.Array.init([\"service\"],System.String);this.s_activationKeywordOptions=System.Array.init([\"cluster\"],System.String);this.s_ingestLogsIntoCommandOptions=System.Array.init([\"storage logs into\",\"dsc logs\"],System.String);this.s_showClusterKeywordOptions=System.Array.init([\"principals\",\"monitoring\"],System.String);this.s_operationsKeywordOptions=System.Array.init([\"operations\"],System.String);this.s_orchestrationKeywordOptions=System.Array.init([\"settings\",\"armnotifications\",\"services\",\"storageaccounts\",\"synapse\"],System.String);this.s_showPrincipalRolesKeywordOptions=System.Array.init([\"roles\",\"@'principal' roles\"],System.String);this.s_showServiceCommandOptions=System.Array.init([\"versions\",\"model\",\"packages configuration\"],System.String);this.s_alterServiceCommandOptions=System.Array.init([\"packages configuration\"],System.String);this.s_removeServiceCommandOptions=System.Array.init([\"package configuration\"],System.String);this.s_showCmServiceCommandOptions=System.Array.init([\"in region\"],System.String);this.s_showClusterClusterNameOptions=System.Array.init([\"client\",\"principal\"],System.String);this.s_showClusterClientSubscriptionOptions=System.Array.init([\"subscription\"],System.String);this.s_showAccountCommandOptions=System.Array.init([\"configuration\",\"services\",\"service configurations\",\"subscriptions\",\"principals\",\"contacts\",\"audit log\",\"resources\",\"ame resources\",\"corp resources\"],System.String);this.s_moveAccountCommandOptions=System.Array.init([\"subscription\"],System.String);this.s_moveAccountSubscriptionCommandOptions=System.Array.init([\"to account\"],System.String);this.s_showTargetServiceCommandOptions=System.Array.init([\"configuration\",\"fabriclocks\",\"storage objects\",\"storage account\",\"storage accounts\",\"database\",\"databases\",\"account\",\"metadata\",\"audit log\",\"resources\",\"ame resources\",\"corp resources\",\"securityrules\",\"routetable\",\"virtualnetwork\",\"deployments\",\"deployment\",\"group ids\",\"group id\",\"diagnostic settings\"],System.String);this.s_fromKeywordOptions=System.Array.init([\"from\"],System.String);this.s_alterServiceConfigurationKeywordOptions=System.Array.init([\"details\",\"(KEY='VALUE')\"],System.String);this.s_toKeywordOptions=System.Array.init([\"to\"],System.String);this.s_moveServiceOptions=System.Array.init([\"to cm\",\"engine to v3\",\"to account\",\"to maintenance\"],System.String);this.s_addSetDropPrincipalsKeywordOptions=System.Array.init([\"admins\",\"ops\",\"users\",\"viewers\",\"jitmanagers\"],System.String);this.s_addDropJitPrincipalsKeywordOptions=System.Array.init([\"principal\"],System.String);this.s_dropAccountPrincipalsKeywordOptions=System.Array.init([\"admins\"],System.String);this.s_setNoneKeywordOptions=System.Array.init([\"none\"],System.String);this.s_showServicesCompletionKeywordsOptions=System.Array.init([\"configuration\",\"in nonregistered subscriptions\"],System.String);this.s_showAccountsKeywordOptions=System.Array.init([\"configuration\",\"subscriptions\"],System.String);this.s_dmServiceAddKeywordOptions=System.Array.init([\"data obtainer\",\"storage accounts\",\"eventhub ingestion source\",\"cosmosdb data connection\"],System.String);this.s_dmServiceShowKeywordOptions=System.Array.init([\"cosmosdb data connections\",\"data connections\",\"eventhub ingestion sources\",\"geneva ingestion sources\",\"eventgrid ingestion sources\"],System.String);this.s_dmServiceAlterKeywordOptions=System.Array.init([\"storage account\",\"eventhub ingestion source\"],System.String);this.s_dmServiceDropKeywordOptions=System.Array.init([\"data obtainer\"],System.String);this.s_keysKeywordOptions=System.Array.init([\"keys\"],System.String);this.s_keyTypesKeywordOptions=System.Array.init([\"primary\",\"secondary\"],System.String);this.s_notifyKeywordOptions=System.Array.init([\"cm\",\"synapse pubsub mock\"],System.String);this.s_executeCommandOptions=System.Array.init([\"job\"],System.String);this.s_executeJobCommandOptions=System.Array.init([\"runAll\",\"addMissingZonesInClientSubscriptions\",\"addResourceGroupToSAs\",\"certificateRotationForSuspendedClusters\",\"commitNames\",\"fixEngineUri\",\"forceSkuAvailabilityRefresh\",\"migrateSAsToArm\",\"populateAdditionalResourceSettings\",\"regenerateArmDetails\",\"resetRunCommand\",\"setServicePrincipals\",\"updateSAs\",\"updateStorageAccountsSettings\"],System.String);this.s_serviceConfigurationPropertyDropKeywordOptions=System.Array.init([\"AutoscaleSetting\",\"FeatureFlags\",\"from\",\"TableFreshnessTestSettings\",\"uncommitted changes\"],System.String);this.s_serviceConfigurationPropertySetKeywordOptions=System.Array.init([\"InstancesCount\",\"InstancesCount auto\",\"VmSize\",\"AutoscaleSetting\",\"DeploymentRing\",\"DeploymentFreezeEnabled\",\"DeploymentFreezeExpiresOn\",\"FeatureFlags\",\"MonitoringAccount\",\"TableFreshnessTestSettings\",\"Environment\",\"CustomerType\",\"Certificates\",\"DoNotCreateIcmIncidents\",\"DoNotDeploy\",\"DoNotDeployRunners\",\"AdditionalSubscriptions\",\"AriaBridgeConfiguration\",\"AutomaticallyDetachCorruptDatabases\",\"CmSettings\",\"DmSettings\",\"EnableTracePush\",\"SecuritySettings.EnableUnauthenticatedAccess\",\"SecuritySettings.RequireMfa\",\"JitStorageAccountName\",\"KustoExplorerDownloadUri\",\"KustoServiceSettings\",\"ManagementCertificate\",\"ScaleChangesRequireCustomerConsent\",\"EnableSSE\",\"NumberOfDatabaseStorageAccounts\"],System.String);this.s_withConsentKeywordOptions=System.Array.init([\"with consent\"],System.String);this.s_storageAccountsKeywordOptions=System.Array.init([\"storage accounts\"],System.String);this.s_serviceRegenerateKeywordOptions=System.Array.init([\"storage accounts\",\"clusteridmap\",\"arm details\"],System.String);this.s_accountAlterOperationsOptions=System.Array.init([\"configuration\",\"subscription\",\"tenantId\"],System.String);this.s_accountRenameOperationsOptions=System.Array.init([\"to\"],System.String);this.s_accountAddOperationsOptions=System.Array.init([\"contact\",\"admins\"],System.String);this.s_accountRemoveOperationsOptions=System.Array.init([\"contact\"],System.String);this.s_accountSetOperationsOptions=System.Array.init([\"division\",\"admins\",\"servicetree\"],System.String);this.s_serviceAlterOperationsOptions=System.Array.init([\"configuration\",\"storage account\",\"storage accounts\",\"configuration details\"],System.String);this.s_serviceRotateOperationsOptions=System.Array.init([\"certificate\"],System.String);this.s_servicePublishOperationsOptions=System.Array.init([\"to registry\"],System.String);this.s_serviceUnPublishOperationsOptions=System.Array.init([\"from registry\"],System.String);this.s_inServiceKeywordOptions=System.Array.init([\"in service\"],System.String);this.s_addServiceServiceNameOptions=System.Array.init([\"database\",\"to\",\"storage accounts\"],System.String);this.s_metadataKeywordOptions=System.Array.init([\"metadata\"],System.String);this.s_summaryKeywordOptions=System.Array.init([\"summary\"],System.String);this.s_summaryOrMetadataKeywordOptions=System.Array.init([\"summary\",\"metadata\"],System.String);this.s_versionKeywordOptions=System.Array.init([\"version\"],System.String);this.s_withPropertiesSuffixOptions=System.Array.init([\"with(KEY='VALUE')\"],System.String);this.s_alterServiceStorageAccountsSuffixOptions=System.Array.init([\"with(KEY='VALUE')\",\"keys\"],System.String);this.s_withEventHubProperties=System.Array.init([\"with(CreateEventHub='true', PartitionCount='VALUE', TargetDatabase='VALUE')\",\"with(EventHubName='VALUE', EventHubNamespaceConnectionString='VALUE', EventHubConsumerGroupName='VALUE', TargetDatabase='VALUE')\",\"with(IngestionSourceType='IotHub', EventHubName='VALUE', EventHubNamespaceConnectionString='VALUE', EventHubConsumerGroupName='VALUE', PartitionCount='VALUE', TargetDatabase='VALUE')\"],System.String);this.s_withCosmosDbDataConnectionProperties=System.Array.init([\"with(KustoTargetDatabase='VALUE', KustoTargetTable='VALUE', IngestionMappingReference='VALUE', ManagedIdentityResourceId='VALUE', CosmosDbAccountResourceId='VALUE', CosmosDbDatabase='VALUE', CosmosDbContainer='VALUE', RetrievalStartDate='VALUE')\"],System.String);this.s_withSkuAvailabilityProperties=System.Array.init([\"with(location='VALUE')\"],System.String);this.s_regionVisibilityProperties=System.Array.init([\"visibility true\",\"visibility false except subscription\"],System.String);this.s_installCommandOptions=System.Array.init([\"with(KEY='VALUE')\",\"runners\",\"synthetics\"],System.String);this.s_uninstallRunnersSyntheticsCommandOptions=System.Array.init([\"with(KEY='VALUE')\",\"runners\",\"synthetics\"],System.String);this.s_migrateServiceCommandOptions=System.Array.init([\"to AzurePaas1\",\"to AzureVMSS\"],System.String);this.s_migrateClusterCommandOptions=System.Array.init([\"to\",\"to zonal\"],System.String);this.s_fromServiceKeywordOptions=System.Array.init([\"from service\"],System.String);this.s_byResourceIdKeywordOptions=System.Array.init([\"by capacityId\"],System.String);this.s_toServiceKeywordOptions=System.Array.init([\"to service\"],System.String);this.s_createDatabaseCommandOptions=System.Array.init([\"in service\",\"ifNotExists\"],System.String);this.s_createServiceCommandOptions=System.Array.init([\"with(KEY='VALUE')\",\"ifNotExists\"],System.String);this.s_addKeywordOptions=System.Array.init([\"add\"],System.String);this.s_alterServiceConfigurationPropertiesOptions=System.Array.init([\"(PropertyPath='PropertyValue')\"],System.String);this.s_alterServiceConfigurationCommandOptions=System.Array.init([\"with(KEY='VALUE')\",\"applynow\"],System.String);this.s_loadBalancerKeywordOptions=System.Array.init([\"load balancer\"],System.String);this.s_operationKeywordOptions=System.Array.init([\"operation\",\"maintenance\"],System.String);this.s_showSubscriptionCommandOptions=System.Array.init([\"resources\",\"ame resources\",\"corp resources\"],System.String);this.s_showServiceSecurityRulesCommandOptions=System.Array.init([\"inbound\",\"outbound\"],System.String);this.s_trueFalseKeywordOptions=System.Array.init([\"'true'\",\"'false'\"],System.String);this.s_skuAvailabilityKeywordOptions=System.Array.init([\"availability to\"],System.String);this.s_exportPackageForOptions=System.Array.init([\"Engine\",\"DataManagement\",\"ClusterManagement\",\"Bridge\",\"ResourceProvider\",\"Billing\",\"Gaia\",\"HealthSuite\",\"Flighting\",\"SaasResourceProvider\",\"Dashboard\"],System.String);this.s_exportPackageForServiceTypeOptions=System.Array.init([\"ProductVersion=''\"],System.String);this.s_sharedIdentityOptions=System.Array.init([\"sharedidentity\"],System.String);this.s_registerFeatureCommandOptions=System.Array.init([\"subscriptions\"],System.String);this.s_putClientSubscriptionsNotficationCommandOptions=System.Array.init([\"notification\"],System.String);this.s_syncKustoPoolCommandOptions=System.Array.init([\"rbac\"],System.String);this.s_showResourceSuffixOptions=System.Array.init([\"metrics definitions\",\"metrics\"],System.String);this.s_showResourceMetricsCommandPropertiesSuffixOptions=System.Array.init([\"definitions\",\"with(aggregation='VALUE', metricnames='VALUE')\"],System.String);this.s_showAzureMonitorManifestCommandPropertiesSuffixOptions=System.Array.init([\"with(resourceTypeName='VALUE', environment='VALUE')\"],System.String);this.s_publishAzureMonitorManifestCommandPropertiesSuffixOptions=System.Array.init([\"with(resourceTypeName='VALUE', environment='VALUE', deploymentPhase='VALUE')\"],System.String);this.s_singleParamFunctions=Bridge.toArray(System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.SingleParameterFunctionsTokens,System.String).union(Kusto.Data.IntelliSense.CslCommandParser.SummarizeAggregationSingleParameterTokens)).join(\"\\\\(|\");this.s_twoParamFunctions=Bridge.toArray(System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.TwoParameterFunctionsTokens,System.String).union(Kusto.Data.IntelliSense.CslCommandParser.SummarizeAggregationTwoParametersTokens)).join(\"\\\\(|\");this.s_threeParamFunctions=Bridge.toArray(System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.ThreeParameterFunctionsTokens,System.String).union(Kusto.Data.IntelliSense.CslCommandParser.SummarizeAggregationThreeParametersTokens)).join(\"\\\\(|\");this.s_manyParamFunctions=Bridge.toArray(System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.ManyParametersFunctionsTokens,System.String).union(Kusto.Data.IntelliSense.CslCommandParser.SummarizeAggregationManyParametersTokens)).join(\"(\\\\(|[^\\\\)]+,)|\")}},methods:{ResolveContextUsingRegex:function(command){if(System.String.startsWith(System.String.trimStart(command),\"|\",4))return null;var context=null,contextMatch=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_commandContext_Show.match(command);return contextMatch.getSuccess()&&(context=contextMatch.getGroups().getByName(\"Context\").toString(),context=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_removeStringLiteralsRegex.replace(context,\"\"),context=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_removeEntityNamesLiteralsRegex.replace(context,\"\"),Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_reservedServiceSuffixesRegex.isMatch(context)||(context=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_removeServiceNameRegex.replace(context,\"service\")),context=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_removeAccountNameRegex.replace(context,\"account\"),context=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_removeDatabaseNameRegex.replace(context,\"database\"),context=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_twoOrMoreSpacesRegex.replace(context,\" \")),context}}},props:{ColumnMappingsToTables:null,OverridingColumnMapping:null},ctors:{$ctor1:function(accounts,services,connectionContext){connectionContext===void 0&&(connectionContext=null);var $t;this.$initialize();Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.ctor.call(this);this.Locker;(this.CommandRules==null||this.GeneralRules==null)&&this.LoadRulesUnderLock(accounts,services);this.CommandToolTips==null&&this.LoadCommandToolTips();this.ContextConnection=($t=connectionContext,$t!=null?$t:\"\")},ctor:function(other){var $t;this.$initialize();Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.ctor.call(this);this.ContextConnection=other.ContextConnection;this.Initialize();other.Locker;Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$4(Kusto.Data.IntelliSense.IntelliSenseRule,other.CommandRules)&&this.CommandRules.AddRange(other.CommandRules);Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$4(Kusto.Data.IntelliSense.IntelliSenseRule,other.GeneralRules)&&this.GeneralRules.AddRange(other.GeneralRules);Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(Kusto.Data.IntelliSense.IntelliSenseCommandTip,other.CommandToolTips)&&(this.CommandToolTips=($t=Kusto.Data.IntelliSense.IntelliSenseCommandTip,System.Linq.Enumerable.from(other.CommandToolTips,$t).toList($t)));Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$4(Kusto.Data.IntelliSense.IntelliSenseRule,other.QueryParametersRules)&&this.QueryParametersRules.AddRange(other.QueryParametersRules)}},methods:{Initialize:function(){Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.prototype.Initialize.call(this);this.OverridingColumnMapping=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).ctor)},ResetState:function(){Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$1(System.Collections.Generic.KeyValuePair$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)),this.OverridingColumnMapping)&&this.OverridingColumnMapping.clear()},AnalyzeCommand$1:function(statement,cachedReference){var result=new Kusto.Data.IntelliSense.AnalyzedCommand;return result.Command=statement,result.Context=this.ResolveContextFromCommand(statement),result},AnalyzeCommand:function(command,appendingPart){var $t;return $t=new Kusto.Data.IntelliSense.AnalyzedCommand,$t.Command=(command.Command||\"\")+(appendingPart||\"\"),$t.Context=Kusto.Data.IntelliSense.KustoCommandContext.Empty,$t},UpdateProviderAvailableEntities:function(command,commandContext){var entities=new(System.Collections.Generic.List$1(System.String).ctor),context=new Kusto.Data.IntelliSense.KustoCommandContext(commandContext.Context);this.ColumnMappingsToTables.containsKey(context)&&(entities=this.ColumnMappingsToTables.getItem(context));this.OverridingColumnMapping.setItem(context,entities)},Clone:function(){return new Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.ctor(this)},ResolveContextFromCommand:function(command){if(System.String.isNullOrWhiteSpace(command))return Kusto.Data.IntelliSense.KustoCommandContext.Empty;var context=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.ResolveContextUsingRegex(command);return System.String.isNullOrEmpty(context)?Kusto.Data.IntelliSense.KustoCommandContext.Empty:new Kusto.Data.IntelliSense.KustoCommandContext(context)},LoadRulesUnderLock:function(accounts,services){var $t,$t1,accountNames,servicesNames,servicesAndOptionsTokens,alterServicesAndOptionsTokens,removeServicesAndOptionsTokens;this.CommandRules=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseRule).ctor);this.GeneralRules=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseRule).ctor);this.QueryParametersRules=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseRule).ctor);this.OverridingColumnMapping=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).ctor);this.InitializeCommandColumnMappings();accountNames=System.Linq.Enumerable.from(accounts,Kusto.Data.IntelliSense.KustoIntelliSenseAccountEntity).select($asm.$.Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.f1).toList(System.String);accountNames.Sort();servicesNames=System.Linq.Enumerable.from(services,Kusto.Data.IntelliSense.KustoIntelliSenseServiceEntity).select($asm.$.Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.f2).toList(System.String);servicesNames.Sort();this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldServiceMoveToMaintenance,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_moveServiceToMaintenanceModeRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_moveServiceToMaintenanceModeOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldServiceCancelMaintenance,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_cancelServiceMaintenanceModeRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_cancelServiceMaintenanceModeOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldSyncKeyVaultPolicy,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_syncKeyVaultPolicyRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withPropertiesSuffixOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldRegionKeyVaultRotateCertificate,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_KeyVaultRotateCertificateRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withPropertiesSuffixOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldWithUnallocatedVirtualClustersPoolExtendSuffix,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_extendUnallocatedVirtuaClustersPoolRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_extendCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldShowRegionsByHosters,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showRegionsByHostersKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showRegionsByHostersOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldWithPropertiesSuffix,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showTridentCmServicesKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withPropertiesSuffixOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldAdminCommandsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_lineWithDotBeginningRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Command,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_adminOperationOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldOperatorsAfterPipe,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_afterPipeRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Operator,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_operatorOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldShowCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldShowFabricCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showFabricCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showFabricCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldRotateCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_rotateCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_rotateCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldServicesNames,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_rotateServicesNamesToAppendOptionsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,servicesNames),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldRotateServiceCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_serviceRotateOperationsKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_serviceRotateOperationsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldServicesNames,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_moveServicesNamesToAppendOptionsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,servicesNames),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldGenerateCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_generateCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_generateCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldPublishCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_publishCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_publishCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldServicesNames,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_publishServicesNamesToAppendOptionsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,servicesNames),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldPublishServiceCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_servicePublishOperationsKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_servicePublishOperationsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldUnPublishCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_unPublishCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_unPublishCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldServicesNames,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_unPublishServicesNamesToAppendOptionsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,servicesNames),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldUnPublishServiceCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_serviceUnPublishOperationsKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_serviceUnPublishOperationsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldWithPropertiesSuffix,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_serviceUnPublishFromRegistryOperationsKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withPropertiesSuffixOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldAlterCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_alterCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_alterCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldSetCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_setCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_setCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldRemoveCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_removeCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_removeCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldAddServiceServiceNameOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_addServiceServiceNameRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_addServiceServiceNameOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldMetadataKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_metadataKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_metadataKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldSummaryOrMetadataKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_summaryOrMetadataKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_summaryOrMetadataKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldSummaryKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_summaryKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_summaryKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldDatabaseOrAccountMetadataKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_databaseOrAccountNameMetadataKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_metadataKeywordOptions),$t.DefaultBeforeApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=\"[] \",$t1),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=\" \",$t1.OffsetPosition=-11,$t1),$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldVersionKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_versionKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_versionKeywordOptions),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=\" ''\",$t1.OffsetPosition=-1,$t1),$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldFromServiceKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_fromServiceKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_fromServiceKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldDatabaseMoveFromServiceCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_moveDatabaseFromServiceCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_toServiceKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldDatabaseCreateCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_createDatabaseCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_createDatabaseCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldServiceCreateCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_createServiceCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_createServiceCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldAddCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_addCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_addCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldDropCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_dropCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_dropCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldMoveCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_moveCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_moveCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldMigrateCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_migrateCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_migrateCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldExportCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_exportCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_exportCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldExportPackageForOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_exportPackageForOptionsRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_exportPackageForOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldExportPackageForServiceTypeOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_exportPackageForProductVersionOptionsRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_exportPackageForServiceTypeOptions),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=\"\",$t1.OffsetPosition=-1,$t1),$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldOperationKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_cancelServiceOperationRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_operationKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldIngestLogsIntoKeywordsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_ingestLogsIntoCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_ingestLogsIntoCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldCreateCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_createCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_createCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldCreateExternalCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_createExternalCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_createExternalCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldExecuteCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_executeCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_executeCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldExecuteJobCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_executeJobCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_executeJobCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldDeleteCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_deleteCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_deleteCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldDetachCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_detachCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_detachCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldRegisterCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_registerCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_registerCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldPutCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_putCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_putCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldListCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_listCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_listCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldListKustoPoolsServicesCommandPropertiesSuffix,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_listKustoPoolsServicesCommandPropertiesSuffixRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_listKustoPoolsServicesPropertiesSuffixOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldSyncCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_syncCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_syncCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldServicesNames,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_syncKustoPoolServicesNamesToAppendOptionsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,servicesNames),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldSyncKustoPoolRbacCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_syncKustoPoolCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_syncKustoPoolCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldTridentServiceShowByResourceId,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_tridentServiceShowByResourceIdCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_byResourceIdKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldCheckCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_checkCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_checkCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldServiceKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_serviceCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_serviceKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldServiceOrClusterKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_activationCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_activationKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldShowClusterKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showClusterOptionsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showClusterKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldOperationsKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_operationsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_operationsKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldResultsKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_resultsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_operationsKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldOrchestrationKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_orchestrationCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_orchestrationKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldOrchestrationTaskHubKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_orchestrationTaskHubCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withPropertiesSuffixOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldShowAccountCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showAccountCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showAccountCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldMoveAccountCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_moveAccountCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_moveAccountCommandOptions),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=\" @''\",$t1.OffsetPosition=-1,$t1),$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldMoveAccountSubscriptionCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_moveAccountSubscriptionCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_moveAccountSubscriptionCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldMoveServiceConfigurationCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_moveServiceConfigurationCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_moveServiceOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldsAlterServiceConfigurationKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_alterServicePackagesConfigurationCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_alterServiceConfigurationKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldAlterServiceConfigurationPropertiesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_alterServiceConfigurationDetailsKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_alterServiceConfigurationPropertiesOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldAlterServiceConfigurationCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_alterServiceConfigurationPropertiesKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_alterServiceConfigurationCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldFromAccountKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_fromAccountKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_fromKeywordOptions),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=\" @''\",$t1),$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldShowAuditLogCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showAuditLogCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_fromKeywordOptions),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=System.String.format(\" @'{0:yyyy-MM-dd}'\",[Bridge.box(System.DateTime.getUtcNow(),System.DateTime,System.DateTime.format)]),$t1),$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldShowAuditLogFromCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showAuditLogFromCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_toKeywordOptions),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=System.String.format(\" @'{0:yyyy-MM-dd}'\",[Bridge.box(System.DateTime.getUtcNow(),System.DateTime,System.DateTime.format)]),$t1),$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldShowServicesCompletionKeywordsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_configurationKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showServicesCompletionKeywordsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldShowAccountsKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showAccountsKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showAccountsKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldDmServiceAddKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_dmServiceAddKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_dmServiceAddKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldDmServiceShowKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_dmServiceShowKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_dmServiceShowKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldDmServiceDropKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_dmServiceDropKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_dmServiceDropKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldDmServiceAlterKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_dmServiceAlterKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_dmServiceAlterKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldDmServiceAlterSettingsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_dmServiceAlterSettingsRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_toKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldConfigurationPropertySetKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_configurationPropertySetKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_serviceConfigurationPropertySetKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldToStringKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_toStringKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_toKeywordOptions),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=\" @''\",$t1.OffsetPosition=-1,$t1),$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldConfigurationPropertyWithConsentKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_configurationPropertyWithConsentKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withConsentKeywordOptions),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=\" @''\",$t1.OffsetPosition=-1,$t1),$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldAddKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_addKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_addKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldConfigurationPropertyDropKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_configurationPropertyDropKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_serviceConfigurationPropertyDropKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldAccountAlterOperationsKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_accountAlterOperationsKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_accountAlterOperationsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldAccountRenameOperationsKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_accountRenameOperationsKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_accountRenameOperationsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldAccountAddOperationsKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_accountAddOperationsKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_accountAddOperationsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldAccountRemoveOperationsKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_accountRemoveOperationsKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_accountRemoveOperationsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldAccountSetOperationsKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_accountSetOperationsKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_accountSetOperationsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldPcCodeKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_accountSubscriptionAlterKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_pccodeKeywordOptions),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=\" @''\",$t1.OffsetPosition=-1,$t1),$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldServiceAlterOperationsKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_serviceAlterOperationsKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_serviceAlterOperationsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldInServiceKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_inServiceKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_inServiceKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldDatabaseKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_databaseKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_createDatabsaeScriptInServiceCommandOption),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldStorageAccountsKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_storageAccountsKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_storageAccountsKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldServiceRegenerateSuffix,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_regenerateServiceKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_serviceRegenerateKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldAccountNames,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_accountNamesCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,accountNames),$t.DefaultBeforeApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=\"[\",$t1),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=\"] \",$t1),$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldServicesNames,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_servicesNamesCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Service,servicesNames),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldWithPropertiesSuffix,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withPropertiesSuffixRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withPropertiesSuffixOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldWithEventHubPropertiesSuffix,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withEventHubPropertiesSuffixRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withEventHubProperties),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldWithCosmosDbDataConnectionPropertiesSuffix,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withCosmosDbDataConnectionPropertiesSuffixRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withCosmosDbDataConnectionProperties),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldShowPrincipalRolesCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showPrincipalRolesCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showPrincipalRolesKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));servicesAndOptionsTokens=System.Linq.Enumerable.from(Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showServiceCommandOptions,System.String).union(servicesNames);this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldServicesNamesCombinedWithOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_servicesNamesToAppendOptionsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,servicesAndOptionsTokens),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));alterServicesAndOptionsTokens=System.Linq.Enumerable.from(Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_alterServiceCommandOptions,System.String).union(servicesNames);this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldServicesNamesCombinedWithOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_alterServicesNamesToAppendOptionsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,alterServicesAndOptionsTokens),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));removeServicesAndOptionsTokens=System.Linq.Enumerable.from(Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_removeServiceCommandOptions,System.String).union(servicesNames);this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldServicesNamesCombinedWithOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_removeServicesNamesToAppendOptionsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,removeServicesAndOptionsTokens),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldSharedIdentity,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_sharedIdentityRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_sharedIdentityOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldTargetServiceOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showTargetServiceCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showTargetServiceCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldShowCmServiceCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showCmServiceCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showCmServiceCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldShowClusterClusterNamePrincipalCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showClusterClusterNamePrincipalCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withPropertiesSuffixOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldShowClusterClientOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showClusterClientRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showClusterClusterNameOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldShowClusterClientSubscriptionCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showClusterClientSubscriptionCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showClusterClientSubscriptionOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldWithPropertiesSuffix,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_cloudCreateCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withPropertiesSuffixOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldWithPropertiesSuffix,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_regionCreateCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withPropertiesSuffixOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldInstallCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_serviceInstallCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_installCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldWithPropertiesSuffix,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_serviceDeployCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withPropertiesSuffixOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldReinstallCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_serviceReinstallCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withPropertiesSuffixOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldUninstallServiceCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_serviceUninstallCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_uninstallRunnersSyntheticsCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldUninstallCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_uninstallCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_uninstallCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldUpdateCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_updateCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_updateCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldMigrateServiceCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_serviceMigrateCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_migrateServiceCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldMigrateClusterCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_clusterMigrateCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_migrateClusterCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldSetClusterPrincipalsNoneOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_setClusterPrincipalsNoneCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_setNoneKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldSetClusterPrincipalsCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_setClusterPrincipalsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_addSetDropPrincipalsKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldAddClusterPrincipalsCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_addClusterPrincipalsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_addSetDropPrincipalsKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldDropClusterPrincipalsCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_dropClusterPrincipalsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_addSetDropPrincipalsKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldDropAccountPrincipalsCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_dropAccountPrincipalsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_dropAccountPrincipalsKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldAddClusterJitPrincipalsCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_addClusterJitPrincipalCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_addDropJitPrincipalsKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldDropClusterJitPrincipalsCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_dropClusterJitPrincipalCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_addDropJitPrincipalsKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldAddServiceServiceNameOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_addServiceServiceNameRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_addServiceServiceNameOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldLoadBalancerKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_loadBalancerKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_loadBalancerKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldPipeOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_yieldPipeOptionRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,System.Array.init([\"|\"],System.String)),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldShowSubscriptionCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showSubscriptionCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showSubscriptionCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldShowServiceSecurityRulesCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showServiceSecurityRulesOperationRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showServiceSecurityRulesCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldKeysCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_keysCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_keysKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldKeyTypesCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_keyTypesKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_keyTypesKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldAlterServiceStorageAccountsCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_alterServiceStorageAccountsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_alterServiceStorageAccountsSuffixOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldToKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_toKeywordCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_toKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldCmNotifyCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_notifyCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_notifyKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldSkuAvailabilityPrefix,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_setSkuAvailabilityRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_skuAvailabilityKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldSetCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_setSynapseMockedSettingsRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withPropertiesSuffixOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldSetCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_setSynapseMockedRbacRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withPropertiesSuffixOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldSkuAvailabilityCommandValues,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_setSkuAvailabilityValuesRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_trueFalseKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldSkuAvailabilityPropertiesSuffix,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_setSkuAvailabilityWithOptionsRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withSkuAvailabilityProperties),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldSetRegionVisibility,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_setRegionVisibilityWithOptionsRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_regionVisibilityProperties),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldRegisterFeature,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_registerFeatureRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_registerFeatureCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldBillingServiceCreateResources,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_createResourcesForBillingServiceRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_withPropertiesSuffixOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldColumnNamesAfterPipeCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_commandColumnNamesAfterPipeRegex,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.OverrideOptions=this.OverridingColumnMapping,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldPutClientSubscriptionsNotification,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_putClientSubscriptionsNotificationRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_putClientSubscriptionsNotficationCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldShowServiceDiagnosticSettingsCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showServiceDiagnosticSettingsCommandRegex,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldShowResourceCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showResourceCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showResourceSuffixOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldShowResourceMetricsCommandPropertiesSuffix,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showResourceMetricsCommandPropertiesSuffixRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showResourceMetricsCommandPropertiesSuffixOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldShowAzureMonitorManifestCommandPropertiesSuffix,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showResourceMetricsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_showAzureMonitorManifestCommandPropertiesSuffixOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.CMRuleKind.YieldPublishAzureMonitorManifestCommandPropertiesSuffix,$t.MatchingRegex=Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_publishAzureMonitorManifestCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider.s_publishAzureMonitorManifestCommandPropertiesSuffixOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t))},InitializeCommandColumnMappings:function(){},LoadCommandToolTips:function(){var $t,toolTipCommands=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTip).ctor),command1,command2,command3,command4,command5,command6,command7,command8,command9,command10,command11,command12,command13,command14,command15,command16,command17,command18,command19,command20,command21,command22,command23,command24,command25;this.CommandToolTips=toolTipCommands;var internalCmDocumentationRoot=\"https://kusto.azurewebsites.net/internaldocs/controlCommands/controlcommands_CM_internal.html\",externalCmDocumentationRoot=\"https://kusto.azurewebsites.net/docs/controlCommands/cm.html\",command=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\".restart\",$t.NameSuffix=\" service\",$t.Summary=\"<a href=https://kusto.azurewebsites.net/docs/controlCommands/cm.html#restart-service>Click to see documentation<\\/a>\",$t.Usage=\"<i>.restart service<\\/i> Engine-KustoDev\\n<i>.restart service<\\/i> Engine-KustoDev with(instancename='Kusto.Azure.Svc_IN_11')\",$t);toolTipCommands.add(command);command1=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\".reimage\",$t.NameSuffix=\" service\",$t.Summary=\"<a href=https://kusto.azurewebsites.net/docs/controlCommands/cm.html#reimage-service>Click to see documentation<\\/a>\",$t.Usage=\"<i>.reimage service<\\/i> Engine-KustoDev\\n<i>.reimage service<\\/i> Engine-KustoDev with(instancename='Kusto.Azure.Svc_IN_11')\",$t);toolTipCommands.add(command1);command2=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\".rebuild\",$t.NameSuffix=\" service\",$t.Summary=\"<a href=https://kusto.azurewebsites.net/docs/controlCommands/cm.html#rebuild-service>Click to see documentation<\\/a>\",$t.Usage=\"<i>.rebuild service<\\/i> Engine-KustoDev\\n<i>.rebuild service<\\/i> Engine-KustoDev with(instancename='Kusto.Azure.Svc_IN_11')\",$t);toolTipCommands.add(command2);command3=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\".reallocate\",$t.NameSuffix=\" service\",$t.Summary=\"<a href=https://kusto.azurewebsites.net/docs/controlCommands/cm.html#reallocate-service>Click to see documentation<\\/a>\",$t.Usage=\"<i>.reallocate service<\\/i> Engine-KustoDev\\n<i>.reallocate service<\\/i> Engine-KustoDev with(instancename='Kusto.Azure.Svc_IN_11')\",$t);toolTipCommands.add(command3);command4=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\".uninstall\",$t.NameSuffix=\" service | service runners\",$t.Summary=\"Click to see documentation for:\\n<a href=\"+(externalCmDocumentationRoot||\"\")+\"#uninstall-service>.uninstall service<\\/a>\\n<a href=\"+(internalCmDocumentationRoot||\"\")+\"#uninstall-service-runners>.uninstall service runners<\\/a>\",$t);toolTipCommands.add(command4);command5=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\".stop\",$t.NameSuffix=\" service\",$t.Summary=\"<a href=https://kusto.azurewebsites.net/docs/controlCommands/cm.html#stop-service>Click to see documentation<\\/a>\",$t.Usage=\"<i>.stop service<\\/i> Engine-KustoDev\",$t);toolTipCommands.add(command5);command6=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\".install\",$t.NameSuffix=\" service | service runners\",$t.Summary=\"Click to see documentation for:\\n<a href=\"+(externalCmDocumentationRoot||\"\")+\"#install-service>.install service<\\/a>\\n<a href=\"+(internalCmDocumentationRoot||\"\")+\"#install-service-runners>.install service runners<\\/a>\",$t);toolTipCommands.add(command6);command7=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\".delete\",$t.NameSuffix=\" cluster | service | database\",$t.Summary=\"Click to see documentation for:\\n<a href=\"+(internalCmDocumentationRoot||\"\")+\"#delete-cluster>Click to see documentation<\\/a>\\n<a href=\"+(internalCmDocumentationRoot||\"\")+\"#delete-service>Click to see documentation<\\/a>\\n<a href=\"+(externalCmDocumentationRoot||\"\")+\"#delete-database>.delete database<\\/a>\",$t);toolTipCommands.add(command7);command8=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\".check\",$t.NameSuffix=\" service name availability\",$t.Summary=\"<a href=https://kusto.azurewebsites.net/docs/controlCommands/cm.html#check-service-name-availability>Click to see documentation<\\/a>\",$t.Usage=\"<i>.check service name availability<\\/i> MyCoolName\",$t);toolTipCommands.add(command8);command9=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\".create\",$t.NameSuffix=\" service | database | account\",$t.Summary=\"Click to see documentation for:\\n<a href=\"+(externalCmDocumentationRoot||\"\")+\"#create-database>.create database<\\/a>\\n<a href=\"+(externalCmDocumentationRoot||\"\")+\"#create-service>.create service<\\/a>\\n<a href=\"+(internalCmDocumentationRoot||\"\")+\"#create-account>.create account<\\/a>\",$t);toolTipCommands.add(command9);command10=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\".detach\",$t.NameSuffix=\" account\",$t.Summary=\"<a href=https://kusto.azurewebsites.net/internaldocs/controlCommands/controlcommands_CM_internal.html#detach-account>Click to see documentation<\\/a>\",$t.Usage=\"<i>.detach account<\\/i> [Kusto Test]\",$t);toolTipCommands.add(command10);command11=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\".alter\",$t.NameSuffix=\" service | account\",$t.Summary=\"Click to see documentation for:\\n<a href=\"+(externalCmDocumentationRoot||\"\")+\"#alter-service-configuration>.alter service configuration<\\/a>\\n<a href=\"+(internalCmDocumentationRoot||\"\")+\"#alter-account-configuration>.alter account configuration<\\/a>\\n<a href=\"+(internalCmDocumentationRoot||\"\")+\"#alter-account-admins>.alter account admins<\\/a>\\n<a href=\"+(internalCmDocumentationRoot||\"\")+\"#alter-account-subscription-pccode>.alter account subscription pccode<\\/a>\",$t);toolTipCommands.add(command11);command12=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\".add\",$t.NameSuffix=\" account | service | database storage accounts | unallocated subscription\",$t.Summary=\"Click to see documentation for:\\n<a href=\"+(internalCmDocumentationRoot||\"\")+\"#add-account-contact>.add account contact<\\/a>\\n<a href=\"+(internalCmDocumentationRoot||\"\")+\"#add-dm-service-storage-accounts>.add dm service storage accounts<\\/a>\\n<a href=\"+(externalCmDocumentationRoot||\"\")+\"#add-database-storage-accounts>.add database storage accounts<\\/a>\\n<a href=\"+(internalCmDocumentationRoot||\"\")+\"#add-unallocated-subscription>.add unallocated subscription<\\/a>\",$t);toolTipCommands.add(command12);command13=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\".remove\",$t.NameSuffix=\" account contact | unallocated subscription\",$t.Summary=\"Click to see documentation for:\\n<a href=\"+(internalCmDocumentationRoot||\"\")+\"#remove-account-contact>.remove account contact<\\/a>\\n<a href=\"+(internalCmDocumentationRoot||\"\")+\"#remove-unallocated-subscription>.remove unallocated subscription<\\/a>\",$t);toolTipCommands.add(command13);command14=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\".set service\",$t.NameSuffix=\" property to value\",$t.Summary=\"<a href=https://kusto.azurewebsites.net/docs/controlCommands/cm.html#set-service-configuration-property>Click to see documentation<\\/href>\",$t.Usage=\"<i>.set<\\/i> service Engine-KustoDev InstancesCount to '10'\",$t);toolTipCommands.add(command14);command15=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\".recycle\",$t.NameSuffix=\" service storage accounts\",$t.Summary=\"<a href=https://kusto.azurewebsites.net/internaldocs/controlCommands/controlcommands_CM_internal.html#recycle-service-storage-accounts>Click to see documentation<\\/href>\",$t.Usage=\"<i>.recycle<\\/i> service Engine-Aria storage accounts (kuariadb0,kuariadb1) with(storageaccountbasename='kuariadbnew')\\n\\n<i>.recycle<\\/i> service Engine-Aria storage accounts (kuariadb0,kuariadb1) with(storageaccountbasename='kuariadbnew',startindex='1')\",$t);toolTipCommands.add(command15);command16=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\".ingest\",$t.NameSuffix=\" service storage logs\",$t.Summary=\"<a href=https://kusto.azurewebsites.net/internaldocs/controlCommands/controlcommands_CM_internal.html#ingest-service-storage-logs>Click to see documentation<\\/href>\",$t.Usage=\"<i>.ingest service<\\/i> Engine-Aria storage logs into service Engine-KustoDev with(starttime='2016-02-02', storageservice='queue')\\n\\n<i>.ingest service<\\/i> Mgmt-Aria storage logs into service Engine-KustoDev with(starttime='2016-1-1 11:05:00.0', endtime='2016-1-1 23:59:59.9', storageservice='blob')\",$t);toolTipCommands.add(command16);command17=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\".show\",$t.NameSuffix=\" service [ServiceName] (configuration | fabriclocks | storage objects | database [DatabaseName] metadata | audit log)\",$t.Summary=\"Click to see documentation for:\\n<a href=\"+(externalCmDocumentationRoot||\"\")+\"#show-service>.show service [ServiceName] configuration<\\/a>\\n<a href=\"+(internalCmDocumentationRoot||\"\")+\"#show-service-fabricklocks>.show service [ServiceName] fabriclocks<\\/a>\\n<a href=\"+(externalCmDocumentationRoot||\"\")+\"#show-service-storage-objects>.show service [ServiceName] storage objects<\\/a>\\n<a href=\"+(externalCmDocumentationRoot||\"\")+\"#show-service-metadata>.show service [ServiceName] database [DatabaseName] metadata<\\/a>\\n<a href=\"+(externalCmDocumentationRoot||\"\")+\"#show-service-audit-log>.show service [ServiceName] audit log from '<StartDate>' to '<EndDate>'<\\/a>\\n<a href=\"+(internalCmDocumentationRoot||\"\")+\"#show-unallocated-subscriptions>.show unallocated subscriptions<\\/a>\",$t.Usage=\"<i>.show<\\/i> service Engine-Aria configuration\\n<i>.show<\\/i> service Engine-Aria fabriclocks\\n<i>.show<\\/i> service Engine-Aria storage objects\\n<i>.show<\\/i> service Engine-Aria database aria metadata\\n<i>.show<\\/i> service Engine-Aria audit log from '2017-01-15T12:00' to '2017-01-30T12:30'\",$t);toolTipCommands.add(command17);command18=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\".drop\",$t.NameSuffix=\" dm service [ServiceName] data obtainer [DataObtainerName]\",$t.Summary=\"<a href=https://kusto.azurewebsites.net/internaldocs/controlCommands/controlcommands_CM_internal.html#drop-dm-service-data-obtainer>Click to see documentation<\\/href>\",$t.Usage=\"<i>.drop<\\/i> dm service Ingest-Playground data obtainer SomeObtainerName\",$t);toolTipCommands.add(command18);command19=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\".register\",$t.NameSuffix=\" feature [FeatureName] subscriptions ([SubscriptionIDs])\",$t.Summary=\"Click to see documentation for:\\n<a href=\"+(internalCmDocumentationRoot||\"\")+\"#register-feature-subscriptions>.register feature<\\/a>\",$t);toolTipCommands.add(command19);command20=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\".alter\",$t.NameSuffix=\" dm service [ServiceName] settings [SettingsJsonPath] to [NewSettingsValue]\",$t.Summary=\"Click to see documentation for:\\n<a href=\"+(internalCmDocumentationRoot||\"\")+\"#alter-dm-service-settings>.alter dm service settings<\\/a>\",$t);toolTipCommands.add(command20);command21=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\".create\",$t.NameSuffix=\" resources for billing service [BillingServiceName]\",$t.Summary=\"Click to see documentation for:\\n<a href=\"+(internalCmDocumentationRoot||\"\")+\"#create-resources-for-billing-service>.create resources for billing service<\\/a>\",$t);toolTipCommands.add(command21);command22=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\".sync\",$t.NameSuffix=\" kustopool [KustoPoolName] rbac\",$t.Summary=\"Click to see documentation for:\\n<a href=\"+(internalCmDocumentationRoot||\"\")+\"#sync-kustopool-rbac>.sync kustopool rbac<\\/a>\",$t);toolTipCommands.add(command22);command23=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\".show\",$t.NameSuffix=\" regions by hosters\",$t.Summary=\"Click to see documentation for:\\n<a href=\"+(internalCmDocumentationRoot||\"\")+\"#show-regions-by-hosters>.show regions by hosters<\\/a>\",$t);toolTipCommands.add(command23);command24=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\".move\",$t.NameSuffix=\" service to maintenance mode\",$t.Summary=\"Click to see documentation for:\\n<a href=\"+(internalCmDocumentationRoot||\"\")+\"#move-service-to-maintenance>.move service to maintenance<\\/a>\",$t);toolTipCommands.add(command24);command25=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\".cancel\",$t.NameSuffix=\" cancel service maintenance mode\",$t.Summary=\"Click to see documentation for:\\n<a href=\"+(internalCmDocumentationRoot||\"\")+\"#cancel-service-maintenance>.cancel service maintenance<\\/a>\",$t);toolTipCommands.add(command25)}}});Bridge.ns(\"Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider\",$asm.$);Bridge.apply($asm.$.Kusto.Data.IntelliSense.ClusterManagerIntelliSenseRulesProvider,{f1:function(account){return account.Name},f2:function(service){return service.Name}});Bridge.define(\"Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule\",{inherits:[Kusto.Data.IntelliSense.IntelliSenseRule],props:{MatchingRegex:null,AdditionalOptions:null,ContextualOptions:null,OverrideOptions:null,OptionsKind:0,RequiresFullCommand:{get:function(){return!0}},IsContextual:{get:function(){return!0}}},methods:{IsMatch:function(context,input){return this.MatchingRegex.isMatch(input)},GetOptions:function(context){if(this.AdditionalOptions==null||Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(Kusto.Data.IntelliSense.CompletionOptionCollection,this.AdditionalOptions))return this.GetContextOptions(context);var result=new(System.Collections.Generic.List$1(System.String).$ctor1)(this.GetContextOptions(context));return System.Linq.Enumerable.from(result,System.String).union(System.Linq.Enumerable.from(this.AdditionalOptions,Kusto.Data.IntelliSense.CompletionOptionCollection).selectMany($asm.$.Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule.f1))},GetContextOptions:function(context){if(Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$1(System.Collections.Generic.KeyValuePair$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)),this.OverrideOptions)&&this.OverrideOptions.containsKey(context))return this.OverrideOptions.getItem(context);else{var contextWithoutOpertaion=new Kusto.Data.IntelliSense.KustoCommandContext(context.Context);if(Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$1(System.Collections.Generic.KeyValuePair$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)),this.ContextualOptions)&&this.ContextualOptions.containsKey(contextWithoutOpertaion))return this.ContextualOptions.getItem(contextWithoutOpertaion)}return System.Array.init([],System.String)},GetCompletionOptions:function(context){var contextualOptionsCollection,sortedCollections;return this.AdditionalOptions==null||Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(Kusto.Data.IntelliSense.CompletionOptionCollection,this.AdditionalOptions)?System.Linq.Enumerable.from(this.GetContextOptions(context),System.String).select(Bridge.fn.bind(this,$asm.$.Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule.f2)).ToArray(Kusto.Data.IntelliSense.CompletionOption):(contextualOptionsCollection=new Kusto.Data.IntelliSense.CompletionOptionCollection(this.OptionsKind,this.GetContextOptions(context)),sortedCollections=System.Linq.Enumerable.from(function(_o1){return _o1.add(contextualOptionsCollection),_o1}(new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CompletionOptionCollection).ctor)),Kusto.Data.IntelliSense.CompletionOptionCollection).concat(this.AdditionalOptions).orderByDescending($asm.$.Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule.f3),sortedCollections.selectMany($asm.$.Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule.f4))}}});Bridge.ns(\"Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule\",$asm.$);Bridge.apply($asm.$.Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,{f1:function(o){return o.Values},f2:function(o){return new Kusto.Data.IntelliSense.CompletionOption(this.OptionsKind,o)},f3:function(o){return o.Priority},f4:function(c){return c.GetCompletionOptions()}});Bridge.define(\"Kusto.Data.IntelliSense.ContextualTokensWithRegexIntelliSenseRule\",{inherits:[Kusto.Data.IntelliSense.IntelliSenseRule],statics:{methods:{GetHashStringForContextAndToken:function(context,token){return(context||\"\")+\";\"+(token||\"\")}}},props:{MatchingRegex:null,MatchingTokens:null,GroupNameToUseAfterMatch:null,Options:null,RequiresFullCommand:{get:function(){return!0}},IsContextual:{get:function(){return!0}}},methods:{IsMatch:function(context,input){var m,matchedString;return this.MatchingTokens==null||!System.Linq.Enumerable.from(this.MatchingTokens,System.String).any()||System.String.isNullOrEmpty(this.GroupNameToUseAfterMatch)?!1:(m=this.MatchingRegex.match(input),!m.getSuccess()||m.getGroups().getCount()<1)?!1:(matchedString=Kusto.Data.IntelliSense.ContextualTokensWithRegexIntelliSenseRule.GetHashStringForContextAndToken(context.Context,m.getGroups().getByName(this.GroupNameToUseAfterMatch).toString()),this.MatchingTokens.contains(matchedString))},GetOptions:function(context){return this.Options.Values},GetCompletionOptions:function(context){return this.Options.GetCompletionOptions()}}});Bridge.define(\"Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider\",{inherits:[Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase],statics:{fields:{s_afterPipeRegex:null,s_renderRegex:null,s_renderMultiChartsRegex:null,s_renderKindOptionsRegex:null,s_evaluateRegex:null,s_makeSeriesRequestingAggregatorsRegex:null,s_makeSeriesBeforeDefaultOrOnRegex:null,s_makeSeriesBeforeOnRegex:null,s_makeSeriesBeforeRangeRegex:null,s_makeSeriesBeforeByRegex:null,s_joinRegex:null,s_diffPatternsPluginSplitParameterRegex:null,s_startOfLineWithSpaceOrAfterJoinRegex:null,s_startOfCommandWithClusterRegex:null,s_tablesScopeRegex:null,s_startOfCommandWithDatabaseRegex:null,s_clusterFunctionRegex:null,s_databaseFunctionInFindRegex:null,s_databaseFunctionRegex:null,s_operatorContextForFilterColumnRegex:null,s_operatorContextForProject:null,s_operatorContextForProjectAway:null,s_operatorContextForProjectRename:null,s_operatorContextForFilterColumnInFindRegex:null,s_operatorContextForFindProject:null,s_singleParamFunctions:null,s_singleParamFunctionsColumnContextRegex:null,s_twoParamFunctions:null,s_twoParamFunctionsColumnContextRegex:null,s_threeParamFunctions:null,s_threeParamFunctionsColumnContextRegex:null,s_manyParamFunctions:null,s_manyParamFunctionsColumnContextRegex:null,s_operatorContextForExtend_ColumnAndFunctionRegex:null,s_entitiesForJoin_ColumnsRegex:null,s_joinFlavorsForJoin_Regex:null,s_parseKindChoose_Regex:null,s_parseWith_Regex:null,s_parseTypesSuggest_Regex:null,s_parseStarOption_Regex:null,m_commandsRequestingAggregators:null,s_lineWithDotBeginningRegex:null,s_topOrLimitOrTakeOrSampleRegex:null,s_agoContextRegex:null,s_nowContextRegex:null,s_operatorContextForTopNestedAndTopHitters:null,s_operatorContextForSampleDistinct:null,s_topNestedKeywordPrefixRegex:null,s_topNestedWithOthersOption:null,s_topHittersKeywordPrefixRegex:null,s_yieldByKeywordRegex:null,s_parseColumnContextRegex:null,s_renderTimePivotColumnContextRegex:null,s_topSortOrderReduceByRegex:null,s_topTopNestedSortOrderByAscDescRegex:null,s_findContextRegex:null,s_findInRegex:null,s_findInStartOrContinueListRegex:null,s_FindInEndOrContinueListRegex:null,s_findWhereRegex:null,s_findProjectSmartRegex:null,s_reduceByColumnContextRegex:null,s_topNestedSuggestingColumnsRegex:null,s_topHittersSuggestingColumnsRegex:null,s_sampleDistinctSuggestingColumnsRegex:null,s_topOrOrderAscendingDescendingRegex:null,s_topNestedAscendingDescendingRegex:null,s_rangeFromRegex:null,s_rangeFromToRegex:null,s_rangeFromToStepRegex:null,s_filteredColumnString:null,s_filteredColumnRegex:null,s_filterPredicateRightValueRegex:null,s_makeSeriesByRegex:null,s_searchPrefixRegex:null,s_searchContextRegex:null,s_searchKindRegex:null,s_searchAfterKindContextRegex:null,s_searchMoreContextRegex:null,s_searchKind_Regex:null,s_clientDirective_Regex:null,s_clientDirectiveConnect_Regex:null,s_operatorOptions:null,s_renderOptions:null,s_renderKindOptions:null,s_aggregateOperationOptions:null,s_makeSeriesAggregateOperationOptions:null,s_extendOperationOptions:null,s_databaseFunctionOptions:null,s_stringOperatorOptions:null,s_numericOperatorOptions:null,s_numericScalarsOptions:null,s_byKeywordOptions:null,s_kindChooseKeywordOptions:null,s_withOthersKeywordOptions:null,s_ofKeywordOptions:null,s_withKeywordOptions:null,s_parseSuggestedTypesKeywordOptions:null,s_parseStarOption:null,s_ascDescKeywordOptions:null,s_nullsLastFirstKeywordOptions:null,s_ascDescOrNullsLastNullsFirstKeywordOptions:null,s_rangeFromOptions:null,s_rangeFromToOptions:null,s_rangeFromToStepOptions:null,s_joinFlavorsOptions:null,s_postJoinOptions:null,s_kindKeywordOptions:null,s_searchInKeywordOptions:null,s_searchLiteralsOptions:null,s_reduceByFlavorsOptions:null,s_datetimeOptions:null,s_timespanOptions:null,s_negativeTimespanOptions:null,s_postFindInOptions:null,s_findInEndOrContinueOptions:null,s_findWhereInOptions:null,s_findInPostListOptions:null,s_makeSeriesDefaultOrOnOptions:null,s_makeSeriesOnOptions:null,s_makeSeriesInRangeOptions:null,s_searchKindOptions:null,s_clientDirectivesOptions:null,MultiColumnFunctionResultSuffixes:null,s_afterFunctionsApplyPolicies:null,s_filterKeywords:null,s_projectKeywords:null,s_projectAwayKeywords:null,s_projectRenameKeywords:null,s_projectExtendKeywords:null,s_joinKeywords:null,s_topSortOrderReduceKeywords:null,s_operatorsUsingByKeywordKeywords:null,s_topSortOrderKeywords:null,s_topTopNestedSortOrderKeywords:null,s_reduceKeywords:null,s_parseKeywords:null,s_renderKeywords:null,s_topLimitTakeSampleKeywords:null,s_evaluateKeywords:null,s_summarizeKeywords:null,s_distinctKeywords:null,s_topNestedKeywords:null,s_topHittersKeywords:null,s_sampleDistinctKeywords:null,s_operatorsRequestingAggregators:null,s_databaseKeywords:null,s_findKeywords:null,s_searchKeywords:null,s_makeSeriesKeywords:null,s_remoteContextRegex:null,s_queryParametersRegex:null,s_joinClosureRegex:null,s_joinWithMakeSeriesClosureRegex:null,s_makeSeriesStartRegex:null,s_findSubClausesRegex:null,s_searchSubClausesRegex:null,s_rangeEntitiesRegex:null,s_parsedEntitiesRegex:null,s_removeStringLiteralsRegex:null,s_removeStringLiteralsSurroundedBySpacesRegex:null,s_removeCommentsRegex:null,s_fieldInvalidCharacters:null,s_fieldQuotableCharacters:null,s_aggregateOperatorToColumnPrefixMapping:null,s_lastCommandSegmentRegex:null,s_incompleteJoinRegex:null,s_commandClausesRegex:null,s_operatorsReplacingEntities:null,s_withsourceExtractRegex:null,s_findProjectionRegex:null,s_packRgx:null,s_topNestedLevelExtractRegex:null,s_sampleDistinctEntityExtractRegex:null,s_aggregateOperatorsHash:null,s_byKeywordRegex:null,s_byAndOnKeywordRegex:null,s_makeSeriesDropNonFieldsRegex:null,s_fieldMatchingRegex:null,s_numericSuffixRegex:null,s_defaultContextPattern:null,s_commandContext_Join:null,s_commandContext_Union:null,s_commandContext_ToScalar:null,s_commandContext_Show:null,s_commandContext_Range:null,s_commandContext_Callable:null,s_commandContext_Let:null,s_commandContext_ConnectDirective:null,s_commandContext_Find:null,s_commandContext_Search:null,s_commandDefaultContext:null,s_twoOrMoreSpacesRegex:null,s_showCommandFixRegex:null,s_commandContextRegexes:null,s_nonDefaultContextKeywordsRegex:null,s_letVariableRegex:null,s_letStatementRegexList:null},props:{Operators:{get:function(){return Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_operatorOptions}}},ctors:{init:function(){this.s_afterPipeRegex=new System.Text.RegularExpressions.Regex.ctor(\"\\\\|\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_renderRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)render\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_renderMultiChartsRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)render\\\\s+(areachart|barchart|columnchart)\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_renderKindOptionsRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)render\\\\s+(areachart|barchart|columnchart)\\\\s+kind\\\\s*=\\\\s*$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_evaluateRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)evaluate\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_makeSeriesRequestingAggregatorsRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)make-series\\\\s+(\\\\w+\\\\s*?=\\\\s*?)?$|(^|\\\\|\\\\s*?)make-series\\\\s+(?!.*\\\\b(by|on|range|in)\\\\b).*?,\\\\s+(\\\\w+\\\\s*?=\\\\s*?)?$|(^|\\\\|\\\\s*?)make-series\\\\s+(?!.*\\\\b(by|on|range|in)\\\\b).*[+*/\\\\-]\\\\s*$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_makeSeriesBeforeDefaultOrOnRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)make-series(?!.*\\\\b(by|on|range|in).*)(.*\\\\))\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_makeSeriesBeforeOnRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)make-series\\\\s+(?!.*\\\\b(range|on).*)(.*\\\\bdefault\\\\b\\\\s*\\\\=\\\\s*\\\\w+)\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_makeSeriesBeforeRangeRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)make-series(?!.*\\\\b(range).*)(.*\\\\bon\\\\b\\\\s+.*)\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_makeSeriesBeforeByRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)make-series(?!.*\\\\b(by).*)(.*\\\\bin\\\\s+range\\\\b\\\\s*\\\\(.*,.*,.*\\\\))\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_joinRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)join\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_diffPatternsPluginSplitParameterRegex=new System.Text.RegularExpressions.Regex.ctor('diffpatterns\\\\(\"split=\\\\s*$',Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_startOfLineWithSpaceOrAfterJoinRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*$|join\\\\s+.*?\\\\(\\\\s+$|^\\\\s*let\\\\s+\\\\w+\\\\s*=\\\\s+$|toscalar\\\\(\\\\s*$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_startOfCommandWithClusterRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^\\\\s*|join\\\\s+.*?\\\\(\\\\s+|^\\\\s*let\\\\s+\\\\w+\\\\s*=\\\\s+|toscalar\\\\(\\\\s*|;\\\\s+)cluster\\\\($\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_tablesScopeRegex=\"(((cluster\\\\([^\\\\)]+\\\\)\\\\.)?(database\\\\([^\\\\)]+\\\\)\\\\.)?(\\\\[.+?\\\\]|[\\\\w\\\\d\\\\*]+),\\\\s*)*((cluster\\\\([^\\\\)]+\\\\)\\\\.)?(database\\\\([^\\\\)]+\\\\)\\\\.)?(\\\\[.+?\\\\]|[\\\\w\\\\d\\\\*]+)))\";this.s_startOfCommandWithDatabaseRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^\\\\s*|join\\\\s+.*?\\\\(\\\\s+|find\\\\s+in\\\\s*\\\\(|find\\\\s+in\\\\s*\\\\(\"+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_tablesScopeRegex||\"\")+\",\\\\s*|^\\\\s*let\\\\s+\\\\w+\\\\s*=\\\\s+|toscalar\\\\(\\\\s*|;\\\\s+|cluster\\\\([^\\\\)]+?\\\\)\\\\.)database\\\\($\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_clusterFunctionRegex=new System.Text.RegularExpressions.Regex.ctor(\"cluster\\\\([^\\\\)]+\\\\)\\\\.$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_databaseFunctionInFindRegex=new System.Text.RegularExpressions.Regex.ctor(\"find\\\\s+in\\\\s*\\\\([^\\\\|]*database\\\\([^\\\\)]+\\\\)\\\\.$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_databaseFunctionRegex=new System.Text.RegularExpressions.Regex.ctor(\"database\\\\([^\\\\)]+\\\\)\\\\.$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_operatorContextForFilterColumnRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)(filter|where)\\\\s+$|(^|\\\\|\\\\s*?)(filter|where)\\\\s+[^\\\\|]+(and|or)\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_operatorContextForProject=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)project\\\\s+$|(^|\\\\|\\\\s*?)project\\\\s+[^\\\\|]*,\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_operatorContextForProjectAway=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)project-away\\\\s+$|(^|\\\\|\\\\s*?)project-away\\\\s+[^\\\\|]*,\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_operatorContextForProjectRename=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)project-rename\\\\s+[^\\\\|]*?\\\\=\\\\s*$|(^|\\\\|\\\\s*?)project-rename\\\\s+[^\\\\|]*,\\\\s+[^\\\\|]*?\\\\=\\\\s*$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_operatorContextForFilterColumnInFindRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\s*)find\\\\s+[^\\\\|]*where\\\\s+$|(^|\\\\s*)find\\\\s+[^\\\\|]+(and|or)\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_operatorContextForFindProject=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\s*)find\\\\s+[^\\\\|]+project\\\\s+$|(^|\\\\s*)find\\\\s+[^\\\\|]+project\\\\s+[^\\\\|]*,\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_singleParamFunctions=Bridge.toArray(System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.SingleParameterFunctionsTokens,System.String).union(Kusto.Data.IntelliSense.CslCommandParser.SummarizeAggregationSingleParameterTokens)).join(\"\\\\(|\");this.s_singleParamFunctionsColumnContextRegex=new System.Text.RegularExpressions.Regex.ctor(\"\\\\b(\"+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_singleParamFunctions||\"\")+\"\\\\()\\\\s*$|(^|\\\\|\\\\s*?)summarize\\\\s+[^\\\\|]*?by\\\\s+$|(^|\\\\|\\\\s*?)summarize\\\\s+[^\\\\|]*\\\\)\\\\s*,\\\\s+$|(^|\\\\|\\\\s*?)summarize\\\\s+[^\\\\|]*?by\\\\s+(?!bin)[^\\\\|]+,\\\\s+$|(^|\\\\|\\\\s*?)distinct\\\\s+([^\\\\|]+,\\\\s+)?$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_twoParamFunctions=Bridge.toArray(System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.TwoParameterFunctionsTokens,System.String).union(Kusto.Data.IntelliSense.CslCommandParser.SummarizeAggregationTwoParametersTokens)).join(\"\\\\(|\");this.s_twoParamFunctionsColumnContextRegex=new System.Text.RegularExpressions.Regex.ctor(\"(\"+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_twoParamFunctions||\"\")+\"\\\\()\\\\s*$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_threeParamFunctions=Bridge.toArray(System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.ThreeParameterFunctionsTokens,System.String).union(Kusto.Data.IntelliSense.CslCommandParser.SummarizeAggregationThreeParametersTokens)).join(\"\\\\(|\");this.s_threeParamFunctionsColumnContextRegex=new System.Text.RegularExpressions.Regex.ctor(\"(\"+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_threeParamFunctions||\"\")+\"\\\\()\\\\s*$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_manyParamFunctions=Bridge.toArray(System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.ManyParametersFunctionsTokens,System.String).union(Kusto.Data.IntelliSense.CslCommandParser.SummarizeAggregationManyParametersTokens)).join(\"(\\\\(|[^\\\\)]+,)|\");this.s_manyParamFunctionsColumnContextRegex=new System.Text.RegularExpressions.Regex.ctor(\"(\"+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_manyParamFunctions||\"\")+\"\\\\()\\\\s*$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_operatorContextForExtend_ColumnAndFunctionRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)extend\\\\s+[^\\\\|]*?[\\\\=\\\\-\\\\+\\\\/\\\\*]\\\\s*$|(^|\\\\|\\\\s*?)project\\\\s+[^\\\\|]*?\\\\=\\\\s*$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_entitiesForJoin_ColumnsRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)join\\\\s+.*\\\\(.+\\\\)\\\\s+on\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_joinFlavorsForJoin_Regex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)join\\\\s+kind\\\\s*=\\\\s*$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_parseKindChoose_Regex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)parse\\\\s+kind\\\\s*$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_parseWith_Regex=new System.Text.RegularExpressions.Regex.ctor('(^|\\\\|\\\\s*?)parse\\\\s*(kind\\\\s*=\\\\s*\\\\w+(\\\\s*flags\\\\s*=\\\\s*\\\\w+)?\\\\s*)?\\\\s*(\\\\w+|\".*?\")\\\\s*$',Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_parseTypesSuggest_Regex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)parse\\\\s+.*\\\\swith\\\\s+.*\\\\s*:\\\\s*$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_parseStarOption_Regex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)parse(.+?)with(.+?[^\\\\*\\\\s])?\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.m_commandsRequestingAggregators=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)summarize\\\\s+(\\\\w+\\\\s*?=\\\\s*?)?$|(^|\\\\|\\\\s*?)summarize\\\\s+(?!.*\\\\bby\\\\b).*,\\\\s+(\\\\w+\\\\s*?=\\\\s*?)?$|(^|\\\\|\\\\s*?)summarize\\\\s+(?!.*\\\\bby\\\\b).*[+*/\\\\-]\\\\s*$|(^|\\\\|\\\\s*?).*top-(nested|hitters).*\\\\s+by\\\\s+(\\\\w+\\\\s*?=\\\\s*\\\\s*?)?$|(^|\\\\|\\\\s*?).*top-(nested|hitters).*\\\\s+by\\\\s+.*?[+*/\\\\-]\\\\s*$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_lineWithDotBeginningRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_topOrLimitOrTakeOrSampleRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)(top|.*top-hitters|limit|take|.*top-nested|sample|sample-distinct)\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_agoContextRegex=new System.Text.RegularExpressions.Regex.ctor(\"\\\\bago\\\\(\\\\s*$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_nowContextRegex=new System.Text.RegularExpressions.Regex.ctor(\"\\\\bnow\\\\(\\\\s*$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_operatorContextForTopNestedAndTopHitters=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?).*top-(nested|hitters)\\\\s+\\\\d+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_operatorContextForSampleDistinct=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?).*sample-distinct\\\\s+\\\\d+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_topNestedKeywordPrefixRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)top-nested.*by.*(\\\\d|\\\\)|asc|desc)\\\\s*,\\\\s*$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_topNestedWithOthersOption=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)top-nested.*?of\\\\s+\\\\w+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_topHittersKeywordPrefixRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)top-hitters.*by.*(\\\\d|\\\\))\\\\s*,\\\\s*$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_yieldByKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)(top\\\\s+\\\\d+|.*top-hitters.*of\\\\s+\\\\w+|.*top-nested.*of\\\\s+[\\\\w,\\\\(\\\\)]+\\\\s*(with others\\\\s*=\\\\s*\\\\w+\\\\s*)?|distinct|sort|order|reduce|render\\\\s+timepivot)\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_parseColumnContextRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)parse\\\\s+(kind\\\\s*=\\\\s*\\\\w+\\\\s*(flags\\\\s*=\\\\s*\\\\w+\\\\s*)?\\\\s*)?\\\\s*$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_renderTimePivotColumnContextRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)render\\\\s+timepivot\\\\s+by(.*,)?\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_topSortOrderReduceByRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)(top\\\\s+\\\\d+|sort|order|reduce)\\\\s+by\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_topTopNestedSortOrderByAscDescRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)((top\\\\s+\\\\d+|sort|order).*?by.*?(asc|desc))[ ]+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_findContextRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\s*)find\\\\s+(withsource\\\\s*\\\\=\\\\s*\\\\w+\\\\s+)?$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_findInRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\s*)find\\\\s+(withsource\\\\s*\\\\=\\\\s*[^\\\\|\\\\(\\\\)]*\\\\s+)?in\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_findInStartOrContinueListRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\s*)find\\\\s+[^\\\\|\\\\(\\\\)]*in\\\\s*\\\\(\\\\s*(\"+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_tablesScopeRegex||\"\")+\",\\\\s+)?\\\\s*$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_FindInEndOrContinueListRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\s*)find\\\\s+(withsource\\\\s*\\\\=\\\\s*\\\\w+\\\\s+)?in\\\\s*\\\\(\"+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_tablesScopeRegex||\"\")+\"\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_findWhereRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\s*)find\\\\s+[^\\\\|\\\\(\\\\)]*in\\\\s*\\\\(\"+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_tablesScopeRegex||\"\")+\"\\\\)\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_findProjectSmartRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\s*)find\\\\s+[^\\\\|]*\\\\s+project\\\\-smart\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_reduceByColumnContextRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)reduce\\\\s+by\\\\s+\\\\w+\\\\s+kind\\\\s*=\\\\s*$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_topNestedSuggestingColumnsRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?).*top-nested.*of\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_topHittersSuggestingColumnsRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?).*top-hitters.*of\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_sampleDistinctSuggestingColumnsRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?).*sample-distinct.*of\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_topOrOrderAscendingDescendingRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)(top\\\\s+\\\\d+|sort|order)\\\\s+by\\\\s+\\\\w+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_topNestedAscendingDescendingRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?).*top-nested.*by\\\\s+.*(\\\\)|\\\\d)\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_rangeFromRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^\\\\s*|join\\\\s+\\\\(\\\\s+|;\\\\s*)range\\\\s+\\\\w+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_rangeFromToRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^\\\\s*|join\\\\s+\\\\(\\\\s+|;\\\\s*)range\\\\s+\\\\w+\\\\s+from(?!.*\\\\bto)\\\\s+[^|]*[\\\\w\\\\)]+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_rangeFromToStepRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^\\\\s*|join\\\\s+\\\\(\\\\s+|;\\\\s*)range(?!.*step)\\\\s+\\\\w+\\\\s+from\\\\s+[^|]+to\\\\s+[^|]+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_filteredColumnString=\"((^|\\\\|\\\\s*?)(filter|where)|\\\\b(and|or))\\\\s+(?<MatchingString>\\\\S+?)\\\\s+\";this.s_filteredColumnRegex=new System.Text.RegularExpressions.Regex.ctor((Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_filteredColumnString||\"\")+\"$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_filterPredicateRightValueRegex=new System.Text.RegularExpressions.Regex.ctor((Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_filteredColumnString||\"\")+\"(\\\\=\\\\=|\\\\!\\\\=|\\\\>|\\\\<|\\\\<\\\\=|\\\\>\\\\=)\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_makeSeriesByRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\|\\\\s*?)(make-series\\\\s+[^\\\\|]*\\\\bon\\\\s+[^\\\\|]+\\\\s+in\\\\s+range\\\\b\\\\([^\\\\|]+,[^\\\\|]+\\\\,[^\\\\|]+\\\\))\\\\s+by\\\\s+$|(^|\\\\|\\\\s*?)(make-series\\\\s+[^\\\\|]*\\\\bon\\\\s+[^\\\\|]+\\\\s+in\\\\s+range\\\\b\\\\([^\\\\|]+,[^\\\\|]+\\\\,[^\\\\|]+\\\\))\\\\s+by\\\\s+[^\\\\|]+?,\\\\s+$|(^|\\\\|\\\\s*?)(make-series\\\\s+[^\\\\|]*\\\\bon\\\\b)\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_searchPrefixRegex=\"(^|;|\\\\|)\\\\s*search\\\\s+\";this.s_searchContextRegex=new System.Text.RegularExpressions.Regex.ctor((Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchPrefixRegex||\"\")+\"$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_searchKindRegex=\"(kind\\\\s*=\\\\s*(case_sensitive|case_insensitive)\\\\s+)\";this.s_searchAfterKindContextRegex=new System.Text.RegularExpressions.Regex.ctor((Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchPrefixRegex||\"\")+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchKindRegex||\"\")+\"$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_searchMoreContextRegex=new System.Text.RegularExpressions.Regex.ctor((Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchPrefixRegex||\"\")+\"[^\\\\|]+(and|or)\\\\s+$|\"+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchPrefixRegex||\"\")+\"[^\\\\|\\\\(\\\\)]*in\\\\s*\\\\(\"+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_tablesScopeRegex||\"\")+\"\\\\)\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_searchKind_Regex=new System.Text.RegularExpressions.Regex.ctor((Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchPrefixRegex||\"\")+\"kind\\\\s*=\\\\s*$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_clientDirective_Regex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*#$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_clientDirectiveConnect_Regex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*#connect\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_operatorOptions=Kusto.Data.IntelliSense.CslCommandParser.PromotedOperatorCommandTokens;this.s_renderOptions=Kusto.Data.IntelliSense.CslCommandParser.ChartRenderTypesTokens;this.s_renderKindOptions=Kusto.Data.IntelliSense.CslCommandParser.ChartRenderKindTokens;this.s_aggregateOperationOptions=Kusto.Data.IntelliSense.CslCommandParser.SortedSummarizeAggregators;this.s_makeSeriesAggregateOperationOptions=Kusto.Data.IntelliSense.CslCommandParser.SortedMakeSeriesAggregationTokens;this.s_extendOperationOptions=Kusto.Data.IntelliSense.CslCommandParser.SortedExtendFunctions;this.s_databaseFunctionOptions=System.Array.init([\"database()\"],System.String);this.s_stringOperatorOptions=System.Array.init([\"==\",\"!=\",\"has\",\"contains\",\"startswith\",\"matches regex\",\"endswith\",\"!has\",\"!contains\",\"=~\",\"!~\",\"in\",\"!in\",\"has_cs\",\"!has_cs\",\"contains_cs\",\"!contains_cs\",\"!startswith\",\"!endswith\",\"hasprefix\",\"!hasprefix\",\"hassuffix\",\"!hassuffix\"],System.String);this.s_numericOperatorOptions=System.Array.init([\"==\",\"!=\",\">\",\"<\",\"<=\",\">=\"],System.String);this.s_numericScalarsOptions=System.Array.init([\"1\",\"10\",\"100\",\"1000\"],System.String);this.s_byKeywordOptions=System.Array.init([\"by\"],System.String);this.s_kindChooseKeywordOptions=System.Array.init([\"= simple\",\"= regex\",\"= relaxed\"],System.String);this.s_withOthersKeywordOptions=System.Array.init([\"with others = \"],System.String);this.s_ofKeywordOptions=System.Array.init([\"of\"],System.String);this.s_withKeywordOptions=System.Array.init([\"with\"],System.String);this.s_parseSuggestedTypesKeywordOptions=System.Array.init([\"long\",\"int64\",\"real\",\"double\",\"string\",\"time\",\"timespan\",\"date\",\"datetime\",\"int\"],System.String);this.s_parseStarOption=System.Array.init([\"*\"],System.String);this.s_ascDescKeywordOptions=System.Array.init([\"asc\",\"desc\"],System.String);this.s_nullsLastFirstKeywordOptions=System.Array.init([\"nulls last\",\"nulls first\"],System.String);this.s_ascDescOrNullsLastNullsFirstKeywordOptions=System.Array.init([\"asc\",\"desc\",\"nulls last\",\"nulls first\"],System.String);this.s_rangeFromOptions=System.Array.init([\"from\"],System.String);this.s_rangeFromToOptions=System.Array.init([\"to\"],System.String);this.s_rangeFromToStepOptions=System.Array.init([\"step\"],System.String);this.s_joinFlavorsOptions=Kusto.Data.IntelliSense.CslCommandParser.JoinKindTokens;this.s_postJoinOptions=System.Array.init([\"(\",\"kind=\"],System.String);this.s_kindKeywordOptions=System.Array.init([\"kind=\"],System.String);this.s_searchInKeywordOptions=System.Array.init([\"in\"],System.String);this.s_searchLiteralsOptions=System.Array.init(['\"\"',\"*\"],System.String);this.s_reduceByFlavorsOptions=Kusto.Data.IntelliSense.CslCommandParser.ReduceByKindTokens;this.s_datetimeOptions=Kusto.Data.IntelliSense.CslCommandParser.SortedDatetimeFunctions;this.s_timespanOptions=System.Array.init([\"30m\",\"1h\",\"12h\",\"1d\",\"3d\",\"7d\"],System.String);this.s_negativeTimespanOptions=System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_timespanOptions,System.String).select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f1).ToArray(System.String);this.s_postFindInOptions=System.Array.init([\"(\"],System.String);this.s_findInEndOrContinueOptions=System.Array.init([\")\",\",\"],System.String);this.s_findWhereInOptions=System.Array.init([\"where\",\"in\"],System.String);this.s_findInPostListOptions=System.Array.init([\"where\"],System.String);this.s_makeSeriesDefaultOrOnOptions=System.Array.init([\"on\",\"default=\"],System.String);this.s_makeSeriesOnOptions=System.Array.init([\"on\"],System.String);this.s_makeSeriesInRangeOptions=System.Array.init([\"in range()\"],System.String);this.s_searchKindOptions=System.Array.init([\"case_sensitive\",\"case_insensitive\"],System.String);this.s_clientDirectivesOptions=System.Array.init([\"connect\"],System.String);this.MultiColumnFunctionResultSuffixes=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f2(new(System.Collections.Generic.Dictionary$2(System.String,System.Array.type(System.String)).ctor));this.s_afterFunctionsApplyPolicies=System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.SortedExtendFunctions,System.String).toDictionary($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f3,$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f4,System.String,Kusto.Data.IntelliSense.ApplyPolicy);this.s_filterKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f5(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_projectKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f6(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_projectAwayKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f7(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_projectRenameKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f8(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_projectExtendKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f9(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_joinKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f10(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_topSortOrderReduceKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f11(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_operatorsUsingByKeywordKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f12(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_topSortOrderKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f13(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_topTopNestedSortOrderKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f14(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_reduceKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f15(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_parseKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f16(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_renderKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f17(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_topLimitTakeSampleKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f18(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_evaluateKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f19(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_summarizeKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f20(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_distinctKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f21(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_topNestedKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f22(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_topHittersKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f23(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_sampleDistinctKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f24(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_operatorsRequestingAggregators=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f25(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_databaseKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f26(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_findKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f27(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_searchKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f28(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_makeSeriesKeywords=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f29(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_remoteContextRegex=new System.Text.RegularExpressions.Regex.ctor(\"^(?<HasClusterReference>cluster\\\\((?<Cluster>[^\\\\)]+?)\\\\)\\\\.?)?((?<HasDatabaseReference>database)\\\\((?<Database>[^\\\\)]*)\\\\))?(\\\\.(?<Context>(\\\\[.+?\\\\]|[\\\\w\\\\*]+))?)?\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.DefaultRegexOptions);this.s_queryParametersRegex=new System.Text.RegularExpressions.Regex.ctor(\"{\\\\w*$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_joinClosureRegex=new System.Text.RegularExpressions.Regex.ctor(\"\\\\)\\\\s*on\\\\b\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_joinWithMakeSeriesClosureRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*make-series\\\\s+.*?\\\\b(on)\\\\b.*?\\\\)\\\\s*on\\\\b\");this.s_makeSeriesStartRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*make-series\");this.s_findSubClausesRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\s*?|;)find\\\\s+[^\\\\|]*(where|project)\\\\s+[^\\\\|]*$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_searchSubClausesRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|\\\\s*?|;\\\\s*)search\\\\s+[^\\\\|]*$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_rangeEntitiesRegex=new System.Text.RegularExpressions.Regex.ctor(\"^(?<Field>[\\\\w_]+)\\\\s+\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_parsedEntitiesRegex=new System.Text.RegularExpressions.Regex.ctor(\".*?with\\\\s+(?<Entities>.+)\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_removeStringLiteralsRegex=new System.Text.RegularExpressions.Regex.ctor(\"('.*?'|\\\".*?\\\")\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_removeStringLiteralsSurroundedBySpacesRegex=new System.Text.RegularExpressions.Regex.ctor(\"\\\\s('.*?'|\\\".*?\\\")\\\\s\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_removeCommentsRegex=new System.Text.RegularExpressions.Regex.ctor(\"//.+[\\\\r\\\\n]+\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.DefaultRegexOptions);this.s_fieldInvalidCharacters=new System.Text.RegularExpressions.Regex.ctor(\"[^\\\\w \\\\-\\\\.]\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.DefaultRegexOptions);this.s_fieldQuotableCharacters=new System.Text.RegularExpressions.Regex.ctor(\"[ \\\\-\\\\.\\\\[\\\\]]\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.DefaultRegexOptions);this.s_aggregateOperatorToColumnPrefixMapping=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f30(new(System.Collections.Generic.Dictionary$2(System.String,System.String).ctor));this.s_lastCommandSegmentRegex=new System.Text.RegularExpressions.Regex.ctor(\"union(\\\\s*\\\\(.*?\\\\)\\\\s*,)+\\\\s*\\\\((?<LastSegment>.*$)\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_incompleteJoinRegex=new System.Text.RegularExpressions.Regex.ctor(\"join(?!.+\\\\bon\\\\b)\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_commandClausesRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^\\\\s*(?<Clause>.*?)join|\\\\s*\\\\((?<Clause>.+?)\\\\)\\\\s+on\\\\s+\\\\w+)\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_operatorsReplacingEntities=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f31(new(System.Collections.Generic.HashSet$1(System.String).ctor));this.s_withsourceExtractRegex=new System.Text.RegularExpressions.Regex.ctor(\"withsource\\\\s*=\\\\s*(?<tableNameColumn>\\\\w+)\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_findProjectionRegex=new System.Text.RegularExpressions.Regex.ctor(\"project\\\\s+(?<projectedList>[^\\\\|]+)\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_packRgx=new System.Text.RegularExpressions.Regex.ctor(\"(,)?\\\\s*pack\\\\s*\\\\(\\\\s*\\\\*\\\\s*\\\\)\\\\s*\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_topNestedLevelExtractRegex=new System.Text.RegularExpressions.Regex.ctor(\"(top-nested)?\\\\s*\\\\d+\\\\s+of\\\\s+(?<InputColumn>[\\\\w_]+)\\\\s+by\\\\s+((?<ReanmingColumn>[\\\\w_]+)\\\\s*=\\\\s*)?(?<Aggregator>.+?(,)?)\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_sampleDistinctEntityExtractRegex=new System.Text.RegularExpressions.Regex.ctor(\"(sample-distinct)?\\\\s*\\\\d+\\\\s+of\\\\s+(?<InputColumn>[\\\\w_\\\\(\\\\), ]+)\\\\s\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_aggregateOperatorsHash=new(System.Collections.Generic.HashSet$1(System.String).$ctor1)(System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslCommandParser.SummarizeAggregationTokens,System.String).union(Kusto.Data.IntelliSense.CslCommandParser.SummarizeAggregationAliasesTokens));this.s_byKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"\\\\bby\\\\b\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.DefaultRegexOptions);this.s_byAndOnKeywordRegex=new System.Text.RegularExpressions.Regex.ctor(\"\\\\b(by|on)\\\\b\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.DefaultRegexOptions);this.s_makeSeriesDropNonFieldsRegex=new System.Text.RegularExpressions.Regex.ctor(\"(\\\\b(default\\\\s*\\\\=\\\\s*\\\\S+)\\\\b)|(\\\\bin\\\\s+range\\\\s*\\\\(\\\\s*\\\\S+\\\\s*,\\\\s*\\\\S+\\\\s*,\\\\s*\\\\S+\\\\s*\\\\))\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.DefaultRegexOptions);this.s_fieldMatchingRegex=new System.Text.RegularExpressions.Regex.ctor(\"(?<Field>[\\\\w_]+)\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.DefaultRegexOptions);this.s_numericSuffixRegex=new System.Text.RegularExpressions.Regex.ctor(\"(?<suffix>\\\\d+)$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.DefaultRegexOptions);this.s_defaultContextPattern=\"(?<Context>(((cluster.+?)?database\\\\([^\\\\)]*\\\\)?\\\\.?(\\\\[.+?\\\\]|[\\\\w|\\\\d|*]+)?|\\\\[.+?\\\\])|[\\\\w\\\\d\\\\*]+))\";this.s_commandContext_Join=new System.Text.RegularExpressions.Regex.ctor(\".*join\\\\s.*?\\\\(\\\\s*\"+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_defaultContextPattern||\"\")+\"\\\\b\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_commandContext_Union=new System.Text.RegularExpressions.Regex.ctor(\"union\\\\s.*\\\\(\\\\s*\"+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_defaultContextPattern||\"\")+\"\\\\b\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_commandContext_ToScalar=new System.Text.RegularExpressions.Regex.ctor(\"toscalar\\\\s*\\\\(\\\\s*\"+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_defaultContextPattern||\"\")+\"\\\\b\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_commandContext_Show=new System.Text.RegularExpressions.Regex.ctor(\"^(?<Context>\\\\.show\\\\s+\\\\w+(\\\\s+\\\\w+)*)\\\\b\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_commandContext_Range=new System.Text.RegularExpressions.Regex.ctor(\"^(?<Context>range)\\\\b\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_commandContext_Callable=new System.Text.RegularExpressions.Regex.ctor(\"\\\\{\\\\s+\"+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_defaultContextPattern||\"\")+\"\\\\b\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_commandContext_Let=new System.Text.RegularExpressions.Regex.ctor(\"^let\\\\s.*?=\\\\s*(\\\\(.*?\\\\)\\\\s*\\\\{\\\\s*)?\"+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_defaultContextPattern||\"\")+\"\\\\b\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_commandContext_ConnectDirective=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*#connect\\\\s+(?<Context>cluster\\\\(.+?\\\\)(.database\\\\(.+\\\\))?)\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_commandContext_Find=new System.Text.RegularExpressions.Regex.ctor(\"(^|.*;)((find\\\\s+[^\\\\|]*in\\\\s*\\\\((?<Context>(\"+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_tablesScopeRegex||\"\")+\"))\\\\))|(find\\\\s+[^\\\\|]*in\\\\s*\\\\((\"+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_tablesScopeRegex||\"\")+\"\\\\s*,\\\\s*)?(((?<Context>((cluster.+\\\\.)?database\\\\([^\\\\)]*\\\\)))\\\\.)|(database\\\\((?<Context>))|((?<Context>(cluster.+\\\\.database\\\\())))))\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_commandContext_Search=new System.Text.RegularExpressions.Regex.ctor(\"(^|.*;)((search\\\\s+[^\\\\|]*in\\\\s*\\\\((?<Context>(\"+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_tablesScopeRegex||\"\")+\"))\\\\))|(search\\\\s+[^\\\\|]*in\\\\s*\\\\((\"+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_tablesScopeRegex||\"\")+\"\\\\s*,\\\\s*)?(((?<Context>((cluster.+\\\\.)?database\\\\([^\\\\)]*\\\\)))\\\\.)|(database\\\\((?<Context>))|((?<Context>(cluster.+\\\\.database\\\\())))))\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_commandDefaultContext=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\"+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_defaultContextPattern||\"\"),Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_twoOrMoreSpacesRegex=new System.Text.RegularExpressions.Regex.ctor(\"\\\\s\\\\s+\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showCommandFixRegex=new System.Text.RegularExpressions.Regex.ctor(\"(.show)(.*)(extents)\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_commandContextRegexes=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f32(new(System.Collections.Generic.Dictionary$2(System.String,System.Tuple$2(System.Text.RegularExpressions.Regex,System.Text.RegularExpressions.Regex)).ctor));this.s_nonDefaultContextKeywordsRegex=new System.Text.RegularExpressions.Regex.ctor(Bridge.toArray(System.Linq.Enumerable.from(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_commandContextRegexes.Keys,System.String).orderByDescending($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f33).select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f34)).join(\"|\"),Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.DefaultRegexOptions);this.s_letVariableRegex=new System.Text.RegularExpressions.Regex.ctor(\"(^|;)\\\\s*let\\\\s+(?<LetExpressionName>\\\\w+)\\\\s*=\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_letStatementRegexList=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f35(new(System.Collections.Generic.List$1(System.Text.RegularExpressions.Regex).ctor))}},methods:{MapColumnsToTables:function(tables){var $t,$t1,result=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).ctor),resultsUnordered,t,key,kvp;if(Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity,tables))return result;resultsUnordered=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.IEnumerable$1(System.String)).ctor);$t=Bridge.getEnumerator(tables,Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity);try{while($t.moveNext())t=$t.Current,key=new Kusto.Data.IntelliSense.KustoCommandContext(t.Name),resultsUnordered.containsKey(key)||resultsUnordered.add(key,System.Linq.Enumerable.from(t.Columns,Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity).select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f36))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}$t1=Bridge.getEnumerator(resultsUnordered);try{while($t1.moveNext())kvp=$t1.Current,result.setItem(kvp.key,System.Linq.Enumerable.from(kvp.value,System.String).orderBy($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f37).toList(System.String))}finally{Bridge.is($t1,System.IDisposable)&&$t1.System$IDisposable$Dispose()}return result},ParseCommandClauses:function(command){var $t,matches,clauses,m,clause;if(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_incompleteJoinRegex.isMatch(command))return System.Array.init([command],System.String);if(matches=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_commandClausesRegex.matches(command),matches.getCount()===0)return System.Array.init([command],System.String);clauses=new(System.Collections.Generic.List$1(System.String).ctor);$t=Bridge.getEnumerator(matches);try{while($t.moveNext())m=Bridge.cast($t.Current,System.Text.RegularExpressions.Match),clause=(m.getGroups().getByName(\"Clause\").toString()||\"\")+\" | \",System.String.isNullOrWhiteSpace(clause)||clauses.add(clause)}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return clauses.add(command),clauses},BuildOpEntitiesMap:function(command){var $t,operatorEntitiesMap=new(System.Collections.Generic.Dictionary$2(System.String,System.String).ctor),pipeParts=System.Linq.Enumerable.from(Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.ParseAsStatements(command,124,!1),System.String).reverse(),part,opAnRest,op,entities;$t=Bridge.getEnumerator(pipeParts);try{while($t.moveNext())if(part=$t.Current,!System.String.isNullOrWhiteSpace(part)){if(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_joinClosureRegex.isMatch(part))if(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_makeSeriesStartRegex.isMatch(part)){if(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_joinWithMakeSeriesClosureRegex.isMatch(part))continue}else continue;if(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchSubClausesRegex.isMatch(part)){operatorEntitiesMap.containsKey(\"search\")||operatorEntitiesMap.add(\"search\",\"\");continue}if((System.String.endsWith(part,\"|\")||Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findSubClausesRegex.isMatch(part))&&(opAnRest=System.String.split(part,System.Array.init([32,13,10],System.Char).map(function(i){return String.fromCharCode(i)}),2,1),opAnRest.length===2)&&(op=opAnRest[System.Array.index(0,opAnRest)],entities=Bridge.referenceEquals(op,\"find\")?opAnRest[System.Array.index(1,opAnRest)]:Kusto.Cloud.Platform.Utils.ExtendedString.TrimEnd(opAnRest[System.Array.index(1,opAnRest)],\"|\"),operatorEntitiesMap.containsKey(op)?operatorEntitiesMap.setItem(op,(operatorEntitiesMap.getItem(op)||\"\")+\",\"+(entities||\"\")):operatorEntitiesMap.add(op,entities),Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_operatorsReplacingEntities.contains(op)))break}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return operatorEntitiesMap},HandleParseEntities:function(entitiesList,result,opEntitiesMap,knownEntities){var $t,list={v:null},wasAdded,match,parsedColumnsString,parsedColumns,columnCandidate,col;if(!opEntitiesMap.tryGetValue(\"parse\",list))return result;if(wasAdded=!1,match=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_parsedEntitiesRegex.match(list.v),match.getSuccess()){parsedColumnsString=match.getGroups().getByName(\"Entities\").toString();parsedColumns=System.String.split(parsedColumnsString,System.Array.init([42,32],System.Char).map(function(i){return String.fromCharCode(i)}),null,1);$t=Bridge.getEnumerator(parsedColumns);try{while($t.moveNext())(columnCandidate=$t.Current,col=columnCandidate.trim(),!System.String.isNullOrEmpty(col)&&System.Char.isLetter(col.charCodeAt(0)))&&(col=Kusto.Cloud.Platform.Utils.ExtendedString.SplitFirst(col,58),wasAdded=!!(wasAdded|Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddEscapedEntityName(entitiesList,col)))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}}return wasAdded?Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.AppendEntities:result},HandleReduceByEntities:function(entitiesList,result,opEntitiesMap,knownEntities){var lastPipePart={v:null};return opEntitiesMap.tryGetValue(\"reduce\",lastPipePart)?(entitiesList.AddRange(System.Array.init([\"Pattern\",\"Count\"],System.String)),Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.ReplaceEntities):result},HandleGetSchemaEntities:function(entitiesList,result,opEntitiesMap,knownEntities){var lastPipePart={v:null};return opEntitiesMap.tryGetValue(\"getschema\",lastPipePart)?(entitiesList.AddRange(System.Array.init([\"ColumnName\",\"ColumnOrdinal\",\"DataType\",\"ColumnType\"],System.String)),Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.ReplaceEntities):result},HandleRangeEntities:function(entitiesList,result,opEntitiesMap,knownEntities){var entitites={v:null},match,field;return opEntitiesMap.tryGetValue(\"range\",entitites)?(match=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_rangeEntitiesRegex.match(entitites.v),match.getSuccess()&&(field=match.getGroups().getByName(\"Field\").toString(),entitiesList.contains(field)||(entitiesList.add(field),result=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.AppendEntities)),result):result},HandlePrintEntities:function(entitiesList,result,opEntitiesMap,knownEntities){var entitites={v:null},match,field;return opEntitiesMap.tryGetValue(\"print\",entitites)?(match=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_rangeEntitiesRegex.match(entitites.v),match.getSuccess()&&(field=match.getGroups().getByName(\"Field\").toString(),entitiesList.contains(field)||(entitiesList.add(field),result=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.AppendEntities)),result):result},HandleProjectEntities:function(entitiesList,result,opEntitiesMap,knownEntities){var list={v:null},wasAdded;return opEntitiesMap.tryGetValue(\"project\",list)?(wasAdded=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveEntitiesFromListWithImplicitColumns(entitiesList,list.v),wasAdded&&(result=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.ReplaceEntities),result):result},HandleProjectAwayEntities:function(entitiesList,result,opEntitiesMap,knownEntities){var $t,$t1,list={v:null},entities,fields,entity,field,safeKnownEntities,field1;if(!opEntitiesMap.tryGetValue(\"project-away\",list))return result;entities=Kusto.Data.IntelliSense.ExpressionEntityParser.ParseEntities(list.v);fields=new(System.Collections.Generic.List$1(System.String).ctor);$t=Bridge.getEnumerator(entities);try{while($t.moveNext())entity=$t.Current,field=entity.Name,entitiesList.contains(field)?entitiesList.remove(field):fields.add(field)}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}if(System.Linq.Enumerable.from(fields,System.String).any()&&Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$1(System.String,entitiesList)){safeKnownEntities=knownEntities!=null?knownEntities:new(System.Collections.Generic.List$1(System.String).ctor);$t1=Bridge.getEnumerator(System.Linq.Enumerable.from(safeKnownEntities,System.String).except(fields).ToArray(System.String));try{while($t1.moveNext())field1=$t1.Current,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddEscapedEntityName(entitiesList,field1)}finally{Bridge.is($t1,System.IDisposable)&&$t1.System$IDisposable$Dispose()}}return Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.ReplaceEntities},HandleMvexpandEntities:function(entitiesList,result,opEntitiesMap,knownEntities){var list={v:null},wasAdded;return!opEntitiesMap.tryGetValue(\"mvexpand\",list)&&!opEntitiesMap.tryGetValue(\"mv-expand\",list)?result:(wasAdded=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveEntitiesFromList(entitiesList,list.v),result===Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.None&&wasAdded&&(result=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.AppendEntities),result)},HandleTopNestedEntities:function(entitiesList,result,opEntitiesMap,knownEntities){var $t,list={v:null},changed=!1,matches,extendedColumnName;if(!opEntitiesMap.tryGetValue(\"top-nested\",list))return result;matches=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topNestedLevelExtractRegex.matches(list.v);matches.getCount()>0&&(changed=!0);$t=Bridge.getEnumerator(matches);try{while($t.moveNext()){var match=$t.Current,convertedMatch=Bridge.as(match,System.Text.RegularExpressions.Match),columnName=convertedMatch.getGroups().getByName(\"InputColumn\").toString();Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddEscapedEntityName(entitiesList,columnName);extendedColumnName=convertedMatch.getGroups().getByName(\"ReanmingColumn\").toString();System.String.isNullOrEmpty(extendedColumnName)&&(extendedColumnName=\"aggregated_\"+(columnName||\"\"));Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddEscapedEntityName(entitiesList,extendedColumnName)}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return changed&&(result=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.ReplaceEntities),result},HandleExtendEntities:function(entitiesList,result,opEntitiesMap,knownEntities){var list={v:null},wasAdded;return opEntitiesMap.tryGetValue(\"extend\",list)?(wasAdded=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveEntitiesFromListWithImplicitColumns(entitiesList,list.v),result===Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.None&&wasAdded&&(result=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.AppendEntities),result):result},HandleSampleDistinctEntities:function(entitiesList,result,opEntitiesMap,knownEntities){var list={v:null},match,inputColumn;return opEntitiesMap.tryGetValue(\"sample-distinct\",list)?(match=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_sampleDistinctEntityExtractRegex.match(list.v),!match.getSuccess())?Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.None:(inputColumn=match.getGroups().getByName(\"InputColumn\").toString(),Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.HandleAggregationEntities(entitiesList,inputColumn,knownEntities)):result},GenerateImplicitEntitiesForFunction:function(funcName,$arguments,explicitlySpecifiedResultColumnCount,resultEntities){var $t,$t1,resultSuffixes,argName,added,suffix,generatedName;if(explicitlySpecifiedResultColumnCount!==0||Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(Kusto.Data.IntelliSense.ExpressionEntity,$arguments)||!Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.MultiColumnFunctionResultSuffixes.containsKey(funcName)||(resultSuffixes=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.MultiColumnFunctionResultSuffixes.getItem(funcName),resultSuffixes.length<explicitlySpecifiedResultColumnCount))return!1;argName=System.Linq.Enumerable.from($arguments,Kusto.Data.IntelliSense.ExpressionEntity).first().Name;added=!1;$t=Bridge.getEnumerator(System.Linq.Enumerable.from(resultSuffixes,System.String).skip(explicitlySpecifiedResultColumnCount));try{while($t.moveNext())suffix=$t.Current,generatedName=Kusto.Cloud.Platform.Utils.ExtendedString.FormatWithInvariantCulture(\"{0}_{1}_{2}\",[funcName,argName,suffix]),resultEntities.add(($t1=new Kusto.Data.IntelliSense.ExpressionEntity,$t1.Name=generatedName,$t1.IsGenerated=!0,$t1)),added=!0}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return added},ResolveEntitiesFromListWithImplicitColumns:function(entitiesList,input){var $t,wasAdded=!1,entities=Kusto.Data.IntelliSense.ExpressionEntityParser.ParseEntities$1(input,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.GenerateImplicitEntitiesForFunction),entity;$t=Bridge.getEnumerator(entities);try{while($t.moveNext())entity=$t.Current,wasAdded=!!(wasAdded|entity.IsGenerated?Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddFieldRenameIfPresent(entitiesList,entity.Name):Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddFieldIfNotPresent(entitiesList,entity.Name))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return wasAdded},ResolveEntitiesFromList:function(entitiesList,input,generateImplicitColumnNames){var $t,wasAdded,entities,entity;generateImplicitColumnNames===void 0&&(generateImplicitColumnNames=!1);wasAdded=!1;entities=Kusto.Data.IntelliSense.ExpressionEntityParser.ParseEntities(input);$t=Bridge.getEnumerator(entities);try{while($t.moveNext())entity=$t.Current,wasAdded=!!(wasAdded|Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddFieldIfNotPresent(entitiesList,entity.Name))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return wasAdded},HandleSummarizeEntities:function(entitiesList,result,opEntitiesMap,knownEntities){var list={v:null},entities;return opEntitiesMap.tryGetValue(\"summarize\",list)?(entities=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_byKeywordRegex.replace(list.v,\", \"),Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.HandleAggregationEntities(entitiesList,entities,knownEntities)):result},HandleMakeSeriesEntities:function(entitiesList,result,opEntitiesMap,knownEntities){var list={v:null},entities;return opEntitiesMap.tryGetValue(\"make-series\",list)?(entities=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_byAndOnKeywordRegex.replace(list.v,\", \"),entities=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_makeSeriesDropNonFieldsRegex.replace(entities,\"\"),Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.HandleAggregationEntities(entitiesList,entities,knownEntities)):result},HandleAggregationEntities:function(entitiesList,entities,knownEntities){var $t,$t1,argMinMaxEntities=null,parsedEntities=Kusto.Data.IntelliSense.ExpressionEntityParser.ParseEntities(entities),entity,correctedOp,preserveNames;$t=Bridge.getEnumerator(parsedEntities);try{while($t.moveNext()){var parsedEntity=$t.Current,op=parsedEntity.Operator,field=($t1=parsedEntity.Name,$t1!=null?$t1:\"\"),arg0=field,wasAdded=!1;!System.String.isNullOrEmpty(op)&&Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_aggregateOperatorsHash.contains(op)&&(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_aggregateOperatorToColumnPrefixMapping.containsKey(op)&&(op=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_aggregateOperatorToColumnPrefixMapping.getItem(op)),entity=(op||\"\")+\"_\"+(field||\"\"),System.String.equals(op,\"percentile\",4)?wasAdded=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.HandlePercentileAggregateEntities(entitiesList,parsedEntity,entity,knownEntities):System.String.equals(op,\"argmin\",4)||System.String.equals(op,\"argmax\",4)||System.String.equals(op,\"arg_min\",4)||System.String.equals(op,\"arg_max\",4)?(argMinMaxEntities==null&&(argMinMaxEntities=new(System.Collections.Generic.List$1(System.String).ctor)),correctedOp=op.substr(op.length-3|0,3),preserveNames=System.String.equals(op,\"arg_max\",4)||System.String.equals(op,\"arg_min\",4),entity=preserveNames?field:(correctedOp||\"\")+\"_\"+(field||\"\"),wasAdded=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.HandleArgMinMaxAggregateEntities(argMinMaxEntities,parsedEntity,correctedOp,arg0,entity,preserveNames,knownEntities)):Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_fieldInvalidCharacters.isMatch(entity)&&(entity=(op||\"\")+\"_\"),field=entity);wasAdded||Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddEscapedEntityName(entitiesList,field)}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.FinalizeSummarizeEntitiesList(argMinMaxEntities,entitiesList),Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.ReplaceEntities},AddEscapedEntityName:function(entitiesList,entity){return(entity=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.EscapeEntityNameIfNeeded(entity),!entitiesList.contains(entity))?(entitiesList.add(entity),!0):!1},EscapeEntityNameIfNeeded:function(entity){return Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_fieldQuotableCharacters.isMatch(entity)&&(entity=\"['\"+(entity||\"\")+\"']\"),entity},FinalizeSummarizeEntitiesList:function(argMinMaxEntities,entitiesList){var regexExpression,regex;if(argMinMaxEntities!=null&&argMinMaxEntities.Count!==0){if(entitiesList.Count===0){entitiesList.AddRange(argMinMaxEntities);return}regexExpression=System.String.format(\"^(min|max)_.+?_({0})$\",[Bridge.toArray(entitiesList).join(\"|\")]);try{regex=new System.Text.RegularExpressions.Regex.ctor(regexExpression,Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.DefaultRegexOptions);System.Linq.Enumerable.from(argMinMaxEntities,System.String).where(function(en){return!regex.isMatch(en)}).forEach(function(field){return Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddFieldIfNotPresent(entitiesList,field)})}catch($e1){if($e1=System.Exception.create($e1),Bridge.is($e1,System.ArgumentException))return;else throw $e1;}}},HandlePercentileAggregateEntities:function(entitiesList,parsedEntity,field,knownEntities){var $t,wasAdded=!1,correctedField=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_fieldMatchingRegex.match(field).getGroups().getByName(\"Field\").toString(),$arguments=parsedEntity.Arguments,arg,fieldname;if(Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(System.String,$arguments))return wasAdded;$t=Bridge.getEnumerator($arguments,System.String);try{while($t.moveNext())arg=$t.Current,fieldname=(correctedField||\"\")+\"_\"+(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_fieldQuotableCharacters.replace(arg,\"_\")||\"\"),wasAdded=!!(wasAdded|Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddFieldIfNotPresent(entitiesList,fieldname))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return wasAdded},HandleArgMinMaxAggregateEntities:function(entitiesList,parsedEntity,op,arg0,field,preserveNames,knownEntities){var $t,$t1,wasAdded=!1,fieldReplaced=!1,$arguments,argCount,arg,fieldname,wildCardMatch,matchingEntities,en,fieldname1,fieldname2;if(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_fieldInvalidCharacters.isMatch(field)&&(field=(op||\"\")+\"_\",fieldReplaced=!0),wasAdded=!!(wasAdded|Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddFieldIfNotPresent(entitiesList,field)),$arguments=parsedEntity.Arguments,Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(System.String,$arguments))return wasAdded;argCount=1;$t=Bridge.getEnumerator(parsedEntity.Arguments,System.String);try{while($t.moveNext()){if(arg=$t.Current,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_fieldInvalidCharacters.isMatch(arg))if(Kusto.Cloud.Platform.Utils.ExtendedRegex.IsWildCardPattern(arg)){if(knownEntities!=null&&System.Linq.Enumerable.from(knownEntities,System.String).any()&&(wildCardMatch={v:Kusto.Cloud.Platform.Utils.ExtendedRegex.TryTransformWildCardPatternToRegex(arg)},wildCardMatch.v!=null&&(matchingEntities=System.Linq.Enumerable.from(knownEntities,System.String).where(function($me,wildCardMatch){return function(en){return!Bridge.referenceEquals(en,arg0)&&wildCardMatch.v.isMatch(en)}}(this,wildCardMatch)).toList(System.String),System.Linq.Enumerable.from(matchingEntities,System.String).any()))){$t1=Bridge.getEnumerator(matchingEntities);try{while($t1.moveNext())en=$t1.Current,fieldname1=preserveNames?en:(field||\"\")+\"_\"+(en||\"\"),wasAdded=!!(wasAdded|Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddFieldIfNotPresent(entitiesList,fieldname1))}finally{Bridge.is($t1,System.IDisposable)&&$t1.System$IDisposable$Dispose()}}}else fieldname2=System.String.format(\"{0}_{1}_arg{2}\",op,preserveNames&&!fieldReplaced&&!System.String.isNullOrWhiteSpace(field)?field:\"\",Bridge.box(argCount,System.Int32)),wasAdded=!!(wasAdded|Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddFieldIfNotPresent(entitiesList,fieldname2));else fieldname=preserveNames?arg:(field||\"\")+\"_\"+(arg||\"\"),wasAdded=!!(wasAdded|Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddFieldIfNotPresent(entitiesList,fieldname));argCount=argCount+1|0}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return wasAdded},AddFieldIfNotPresent:function(entitiesList,field){return System.String.isNullOrEmpty(field)?!1:Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddEscapedEntityName(entitiesList,field)},AddFieldRenameIfPresent:function(entitiesList,field){var escapedField,match,suffix;if(System.String.isNullOrEmpty(field))return!1;for(escapedField=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.EscapeEntityNameIfNeeded(field),entitiesList.contains(escapedField)&&(field=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_numericSuffixRegex.replace(field,\"\"),escapedField=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.EscapeEntityNameIfNeeded(field)),entitiesList.contains(escapedField)&&(field=(field||\"\")+\"1\",escapedField=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.EscapeEntityNameIfNeeded(field));entitiesList.contains(escapedField);)if(match=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_numericSuffixRegex.match(field),match.getSuccess())suffix=System.Int32.parse(match.getGroups().getByName(\"suffix\").getValue()),suffix=suffix+1|0,field=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_numericSuffixRegex.replace(field,Bridge.toString(suffix)),escapedField=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.EscapeEntityNameIfNeeded(field);else return!1;return entitiesList.add(escapedField),!0},GetLatestMatch:function(matchesKeywords){var $t,lastMatch=null,m;$t=Bridge.getEnumerator(matchesKeywords);try{while($t.moveNext())(m=Bridge.cast($t.Current,System.Text.RegularExpressions.Match),m.getSuccess())&&(lastMatch==null?lastMatch=m:lastMatch.getIndex()<m.getIndex()&&(lastMatch=m))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return lastMatch},ResolveContextUsingRegex:function(command,contextMatchRegex,startat){if(System.String.startsWith(System.String.trimStart(command.substr(startat)),\"|\",4))return null;var matchingRegex=contextMatchRegex.Item1,transformationRegex=contextMatchRegex.Item2,tableContext=null,contextMatch=matchingRegex.match(command,startat);return contextMatch.getSuccess()&&(tableContext=contextMatch.getGroups().getByName(\"Context\").toString(),transformationRegex!=null&&(tableContext=transformationRegex.replace(tableContext,$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f38)),tableContext=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_twoOrMoreSpacesRegex.replace(tableContext,\" \")),tableContext},ResolveLetVariable:function(letStatement){if(System.String.isNullOrEmpty(letStatement))return\"\";var letMatch=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_letVariableRegex.match(letStatement);return letMatch.getSuccess()?letMatch.getGroups().getByName(\"LetExpressionName\").toString():\"\"},ResolveLetExpressions:function(statements){var $t,$t1,result=new(System.Collections.Generic.Dictionary$2(System.String,System.String).ctor),regex,letMatches;$t=Bridge.getEnumerator(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_letStatementRegexList);try{while($t.moveNext()){regex=$t.Current;letMatches=regex.matches(statements);$t1=Bridge.getEnumerator(letMatches);try{while($t1.moveNext()){var m=Bridge.cast($t1.Current,System.Text.RegularExpressions.Match),variable=m.getGroups().getByName(\"LetExpressionName\").toString(),statement=m.getGroups().getByName(\"Expression\").toString();result.containsKey(variable)||result.add(variable,statement)}}finally{Bridge.is($t1,System.IDisposable)&&$t1.System$IDisposable$Dispose()}}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return result}}},fields:{s_afterjoinOperatorApplyPolicies:null,s_afterRenderApplyPolicies:null,s_afterEvaluatePluginPolicies:null,s_afterFindApplyPolicies:null,s_afterFindInApplyPolicies:null,s_afterFindInEndOrContinuePolicies:null,s_afterSearchApplyPolicies:null,m_queryParameters:null,m_remoteSchemaResolver:null,m_remoteColumnMappingsToTables:null,m_remoteDatabaseMappingToClusters:null,m_availableClusters:null,m_allowClientDirectives:!1,m_contextCache:null},props:{TableNames:null,FunctionMappings:null,ColumnMappingsToTables:null,ColumnMappingsToWildcardedTables:null,OverridingColumnMapping:null,OverridingDatabaseMapping:null,OverridingTablesMapping:null,RemoteTableNames:{get:function(){return this.OverridingTablesMapping!=null?System.Linq.Enumerable.from(this.OverridingTablesMapping,System.Collections.Generic.KeyValuePair$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String))).selectMany($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f46):null}},FunctionNames:{get:function(){return this.FunctionMappings!=null?System.Linq.Enumerable.from(this.FunctionMappings.Keys,System.String).orderBy($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f47):System.Linq.Enumerable.empty()}},AllowQueryParameters:!1,Cluster:null,DatabaseSchema:null,Database:{get:function(){return this.DatabaseSchema!=null?this.DatabaseSchema.Database:null}},Databases:{get:function(){return this.Cluster!=null?this.Cluster.Databases:null}},Tables:{get:function(){return this.DatabaseSchema!=null&&this.DatabaseSchema.Database!=null?this.DatabaseSchema.Database.Tables:null}},Functions:{get:function(){return this.DatabaseSchema!=null&&this.DatabaseSchema.Database!=null?this.DatabaseSchema.Database.Functions:null}},ContextCache:{get:function(){return this.m_contextCache},set:function(value){this.m_contextCache=value}}},ctors:{init:function(){this.s_afterjoinOperatorApplyPolicies=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f39(new(System.Collections.Generic.Dictionary$2(System.String,Kusto.Data.IntelliSense.ApplyPolicy).ctor));this.s_afterRenderApplyPolicies=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f40(new(System.Collections.Generic.Dictionary$2(System.String,Kusto.Data.IntelliSense.ApplyPolicy).ctor));this.s_afterEvaluatePluginPolicies=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f41(new(System.Collections.Generic.Dictionary$2(System.String,Kusto.Data.IntelliSense.ApplyPolicy).ctor));this.s_afterFindApplyPolicies=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f42(new(System.Collections.Generic.Dictionary$2(System.String,Kusto.Data.IntelliSense.ApplyPolicy).ctor));this.s_afterFindInApplyPolicies=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f43(new(System.Collections.Generic.Dictionary$2(System.String,Kusto.Data.IntelliSense.ApplyPolicy).ctor));this.s_afterFindInEndOrContinuePolicies=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f44(new(System.Collections.Generic.Dictionary$2(System.String,Kusto.Data.IntelliSense.ApplyPolicy).ctor));this.s_afterSearchApplyPolicies=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f45(new(System.Collections.Generic.Dictionary$2(System.String,Kusto.Data.IntelliSense.ApplyPolicy).$ctor1)(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_afterFunctionsApplyPolicies));this.m_remoteColumnMappingsToTables=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String))).ctor);this.m_remoteDatabaseMappingToClusters=new(System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.String)).ctor);this.m_contextCache=new(System.Collections.Generic.Dictionary$2(System.Int32,Kusto.Data.IntelliSense.KustoCommandContext).ctor)},$ctor1:function(cluster,databaseSchema,queryParameters,availableClusters,schemaResolver,allowQueryParameters,allowClientDirectives){this.$initialize();Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.ctor.call(this);this.Cluster=cluster;this.DatabaseSchema=databaseSchema;this.m_queryParameters=queryParameters;this.m_remoteSchemaResolver=schemaResolver;this.m_availableClusters=availableClusters;this.m_allowClientDirectives=allowClientDirectives;this.AllowQueryParameters=allowQueryParameters;this.Initialize();this.LoadRules()},ctor:function(other){var $t;this.$initialize();Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.ctor.call(this);this.Cluster=other.Cluster.Clone();this.DatabaseSchema=other.DatabaseSchema.Clone();this.m_queryParameters=Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(System.String,other.m_queryParameters)?($t=System.String,System.Linq.Enumerable.from(other.m_queryParameters,$t).ToArray($t)):null;this.m_remoteSchemaResolver=other.m_remoteSchemaResolver;this.m_availableClusters=other.m_availableClusters;this.m_allowClientDirectives=other.m_allowClientDirectives;this.AllowQueryParameters=other.AllowQueryParameters;this.Initialize();this.LoadRules()}},methods:{ResetState:function(){Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$1(System.Collections.Generic.KeyValuePair$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)),this.OverridingColumnMapping)&&this.OverridingColumnMapping.clear();Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$1(System.Collections.Generic.KeyValuePair$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)),this.OverridingDatabaseMapping)&&this.OverridingDatabaseMapping.clear();Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$1(System.Collections.Generic.KeyValuePair$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)),this.OverridingTablesMapping)&&this.OverridingTablesMapping.clear()},Clone:function(){return new Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ctor(this)},UpdateProviderAvailableEntities:function(command,commandContext){var knownEntities=this.ResolveKnownEntitiesFromContext(commandContext),commandEntities=new(System.Collections.Generic.List$1(System.String).ctor),entitiesResolveResult=this.ResolveEntitiesFromCommand(command,commandEntities,knownEntities);switch(entitiesResolveResult){case Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.ReplaceEntities:this.RegisterCommandEntities(commandContext,commandEntities,!0);break;case Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.None:case Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.AppendEntities:this.RegisterCommandEntities(commandContext,commandEntities,!1);break}},ResolveKnownEntitiesFromContext:function(commandContext){var $t,$t1,$t2,outputColumns={v:null},remoteColumnMappingsToTables=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).ctor),dbNames=new(System.Collections.Generic.List$1(System.String).ctor),localWildcardedTablesColumns={v:null},performUnion=commandContext.Operation===Kusto.Data.IntelliSense.ContextOperation.Union,contextParts=commandContext.Flatten(),columnMappingsToTables,mapping,columns,partDbs,wildCardMatch,intersection,contextWithNoOperation;$t=Bridge.getEnumerator(contextParts,Kusto.Data.IntelliSense.KustoCommandContext);try{while($t.moveNext()){var kustoCommandContextPart=$t.Current,clusterUriOrAlias={},databaseNameOrAlias={},remoteContext={},matchingEntities={v:null};if(this.ResolveRemoteContext(kustoCommandContextPart.Context,clusterUriOrAlias,databaseNameOrAlias,remoteContext)){if(columnMappingsToTables=this.UpdateColumnsList(kustoCommandContextPart,clusterUriOrAlias.v,databaseNameOrAlias.v,remoteContext.v),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$1(System.Collections.Generic.KeyValuePair$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)),columnMappingsToTables)){$t1=Bridge.getEnumerator(columnMappingsToTables);try{while($t1.moveNext())mapping=$t1.Current,columns={},remoteColumnMappingsToTables.tryGetValue(mapping.key,columns)||(columns.v=new(System.Collections.Generic.List$1(System.String).ctor)),remoteColumnMappingsToTables.setItem(mapping.key,System.Linq.Enumerable.from(columns.v,System.String).union(mapping.value).toList(System.String))}finally{Bridge.is($t1,System.IDisposable)&&$t1.System$IDisposable$Dispose()}matchingEntities.v=System.Linq.Enumerable.from(columnMappingsToTables.Values,System.Collections.Generic.List$1(System.String)).selectMany($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f48).toList(System.String)}this.UpdateDatabaseList(kustoCommandContextPart,clusterUriOrAlias.v,databaseNameOrAlias.v);partDbs={};this.OverridingDatabaseMapping.tryGetValue(kustoCommandContextPart,partDbs)&&(dbNames=System.Linq.Enumerable.from(dbNames,System.String).union(partDbs.v).toList(System.String))}else if(Kusto.Cloud.Platform.Utils.ExtendedRegex.IsWildCardPattern(kustoCommandContextPart.Context)){if(this.ColumnMappingsToWildcardedTables.tryGetValue(kustoCommandContextPart,matchingEntities),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$1(System.String,matchingEntities.v)&&(wildCardMatch={v:Kusto.Cloud.Platform.Utils.ExtendedRegex.TryTransformWildCardPatternToRegex(kustoCommandContextPart.Context)},wildCardMatch.v!=null)){if(Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity,this.Tables)){var matchedTables=System.Linq.Enumerable.from(this.Tables,Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity).where(function($me,wildCardMatch){return function(t){return!t.IsInvisible&&wildCardMatch.v.isMatch(t.Name)}}(this,wildCardMatch)),matchedTableNames={v:new(System.Collections.Generic.HashSet$1(System.String).$ctor1)(matchedTables.select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f49))},entitiesTables=System.Linq.Enumerable.from(this.ColumnMappingsToTables,System.Collections.Generic.KeyValuePair$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String))).where(function($me,matchedTableNames){return function(t){return matchedTableNames.v.contains(t.key.Context)}}(this,matchedTableNames));performUnion?matchingEntities.v=entitiesTables.selectMany($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f50).distinct().toList(System.String):(intersection=Kusto.Cloud.Platform.Utils.ExtendedEnumerable.Intersect(System.String,entitiesTables.select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f50)),matchingEntities.v=intersection!=null?($t2=System.String,System.Linq.Enumerable.from(intersection,$t2).toList($t2)):new(System.Collections.Generic.List$1(System.String).ctor))}else matchingEntities.v=new(System.Collections.Generic.List$1(System.String).ctor);this.ColumnMappingsToWildcardedTables.setItem(kustoCommandContextPart,System.Linq.Enumerable.from(matchingEntities.v,System.String).orderBy($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f37).toList(System.String));this.PerformGroupActionOrInit(localWildcardedTablesColumns,this.ColumnMappingsToWildcardedTables.getItem(kustoCommandContextPart),performUnion)}}else contextWithNoOperation=new Kusto.Data.IntelliSense.KustoCommandContext(kustoCommandContextPart.Context),this.ColumnMappingsToTables.tryGetValue(contextWithNoOperation,matchingEntities);this.PerformGroupActionOrInit(outputColumns,matchingEntities.v,performUnion)}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return!this.m_remoteColumnMappingsToTables.containsKey(commandContext)&&Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$1(System.Collections.Generic.KeyValuePair$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)),remoteColumnMappingsToTables)&&this.m_remoteColumnMappingsToTables.setItem(commandContext,remoteColumnMappingsToTables),!this.OverridingDatabaseMapping.containsKey(commandContext)&&Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$4(System.String,dbNames)&&this.OverridingDatabaseMapping.setItem(commandContext,dbNames),this.ColumnMappingsToWildcardedTables.containsKey(commandContext)||this.ColumnMappingsToWildcardedTables.setItem(commandContext,(localWildcardedTablesColumns.v!=null?System.Linq.Enumerable.from(localWildcardedTablesColumns.v,System.String).orderBy($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f37).toList(System.String):null)||new(System.Collections.Generic.List$1(System.String).ctor)),outputColumns.v!=null?System.Linq.Enumerable.from(outputColumns.v,System.String).orderBy($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f37).toList(System.String):null},PerformGroupActionOrInit:function(target,source,performUnion){if(Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$1(System.String,source)&&(source=new(System.Collections.Generic.List$1(System.String).ctor)),target.v==null){target.v=new(System.Collections.Generic.HashSet$1(System.String).$ctor1)(source);return}performUnion?target.v.unionWith(source):target.v.intersectWith(source)},UpdateColumnsList:function(commandContext,clusterUriOrAlias,databaseNameOrAlias,tableName){var dbSchemas,allTables,columnMappingsToTables;return System.String.isNullOrEmpty(databaseNameOrAlias)||this.m_remoteColumnMappingsToTables.containsKey(commandContext)||this.m_remoteSchemaResolver!=null&&(dbSchemas=this.m_remoteSchemaResolver.Kusto$Data$IntelliSense$IKustoIntelliSenseSchemaResolver$ResolveDatabaseSchema$1(clusterUriOrAlias,databaseNameOrAlias,tableName),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity,dbSchemas)?(allTables=System.Linq.Enumerable.from(dbSchemas,Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity).selectMany($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f51).toList(Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity),this.UpdateRemoteColumnMappingToTables(commandContext,tableName,allTables),this.OverridingTablesMapping.setItem(commandContext,System.Linq.Enumerable.from(allTables,Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity).select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f49).toList(System.String))):(this.OverridingTablesMapping.setItem(commandContext,new(System.Collections.Generic.List$1(System.String).ctor)),this.m_remoteColumnMappingsToTables.setItem(commandContext,new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).ctor)))),columnMappingsToTables={},this.m_remoteColumnMappingsToTables.tryGetValue(commandContext,columnMappingsToTables),columnMappingsToTables.v||new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).ctor)},UpdateRemoteColumnMappingToTables:function(commandContext,tableName,allTables){var columnsToTablesMapping,performUnion,outputColumns,orderedColumns;allTables.Count===1?columnsToTablesMapping=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.MapColumnsToTables(allTables):(performUnion=commandContext.Operation===Kusto.Data.IntelliSense.ContextOperation.Union,outputColumns=null,outputColumns=performUnion?System.Linq.Enumerable.from(allTables,Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity).selectMany($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f52).distinct().toList(System.String):Kusto.Cloud.Platform.Utils.ExtendedEnumerable.Intersect(System.String,System.Linq.Enumerable.from(allTables,Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity).select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f52)),orderedColumns=outputColumns!=null?System.Linq.Enumerable.from(outputColumns,System.String).orderBy($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f37).toList(System.String):new(System.Collections.Generic.List$1(System.String).ctor),columnsToTablesMapping=function(_o1){return _o1.add(new Kusto.Data.IntelliSense.KustoCommandContext(tableName,commandContext.Operation),orderedColumns),_o1}(new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).ctor)));this.m_remoteColumnMappingsToTables.setItem(commandContext,columnsToTablesMapping)},UpdateDatabaseList:function(commandContext,clusterUriOrAlias,databaseNameOrAlias){var targetCluster=clusterUriOrAlias,dbNames,wildCardMatch;System.String.isNullOrEmpty(targetCluster)&&(targetCluster=this.Cluster!=null?this.Cluster.Alias:null);System.String.isNullOrEmpty(targetCluster)||this.OverridingDatabaseMapping.containsKey(commandContext)||this.m_remoteSchemaResolver!=null&&(dbNames=this.m_remoteSchemaResolver.Kusto$Data$IntelliSense$IKustoIntelliSenseSchemaResolver$ResolveDatabaseNames(targetCluster),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(System.String,dbNames)&&!System.String.isNullOrEmpty(databaseNameOrAlias)&&Kusto.Cloud.Platform.Utils.ExtendedRegex.IsWildCardPattern(databaseNameOrAlias)&&(wildCardMatch=Kusto.Cloud.Platform.Utils.ExtendedRegex.TryTransformWildCardPatternToRegex(databaseNameOrAlias),wildCardMatch!=null&&(dbNames=System.Linq.Enumerable.from(dbNames,System.String).where(function(db){return wildCardMatch.isMatch(db)}))),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(System.String,dbNames)?this.OverridingDatabaseMapping.setItem(commandContext,System.Linq.Enumerable.from(dbNames,System.String).select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f53).toList(System.String)):this.OverridingDatabaseMapping.setItem(commandContext,new(System.Collections.Generic.List$1(System.String).ctor)))},ResolveRemoteContext:function(commandContext,clusterUriOrAlias,databaseNameOrAlias,remoteTableContext){var match,hasClusterReference,hasDatabaseReference;return(clusterUriOrAlias.v=\"\",databaseNameOrAlias.v=\"\",remoteTableContext.v=\"\",System.String.isNullOrEmpty(commandContext))?!1:(match=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_remoteContextRegex.match(commandContext),!match.getSuccess())?!1:(hasClusterReference=!System.String.isNullOrEmpty(match.getGroups().getByName(\"HasClusterReference\").toString()),hasClusterReference?Kusto.Cloud.Platform.Text.StringLiteral.TryParseStringLiteral(match.getGroups().getByName(\"Cluster\").toString(),clusterUriOrAlias):(clusterUriOrAlias.v=this.Cluster!=null?this.Cluster.Alias:\"\",clusterUriOrAlias.v==null&&(clusterUriOrAlias.v=\"\")),Kusto.Cloud.Platform.Text.StringLiteral.TryParseStringLiteral(match.getGroups().getByName(\"Database\").toString(),databaseNameOrAlias),hasDatabaseReference=!System.String.isNullOrEmpty(match.getGroups().getByName(\"HasDatabaseReference\").toString()),remoteTableContext.v=match.getGroups().getByName(\"Context\").toString(),!hasDatabaseReference&&System.String.isNullOrEmpty(databaseNameOrAlias.v)&&(!hasClusterReference||System.String.isNullOrEmpty(clusterUriOrAlias.v)))?!1:!0},Initialize:function(){Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.prototype.Initialize.call(this);this.ContextConnection=\"\";this.Cluster==null||System.String.isNullOrWhiteSpace(this.Cluster.Alias)||(this.ContextConnection=\"cluster('\"+(this.Cluster.Alias||\"\")+\"')\");this.Database==null||System.String.isNullOrWhiteSpace(this.Database.Name)||(this.ContextConnection=(this.ContextConnection||\"\")+\".database('\"+(this.DatabaseSchema.Database.Name||\"\")+\"')\");this.OverridingColumnMapping=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).ctor);this.ColumnMappingsToTables=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).ctor);this.ColumnMappingsToWildcardedTables=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).ctor);this.TableNames=new(System.Collections.Generic.List$1(System.String).ctor);this.FunctionMappings=new(System.Collections.Generic.Dictionary$2(System.String,System.Tuple$2(System.String,System.Text.RegularExpressions.Regex)).ctor);this.CommandRules=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseRule).ctor);this.GeneralRules=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseRule).ctor);this.QueryParametersRules=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseRule).ctor)},LoadRules:function(){var $t,localDatabases,rule,pluginOptions;this.ColumnMappingsToTables=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.MapColumnsToTables(this.Tables);this.OverridingColumnMapping=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).ctor);this.ColumnMappingsToWildcardedTables=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).ctor);this.OverridingDatabaseMapping=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).ctor);this.OverridingTablesMapping=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).ctor);this.AddClientDirectiveRules();this.AddFindOperator();this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldOperatorsAfterPipe,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_afterPipeRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Operator,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_operatorOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldSummarizeOperatorOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.m_commandsRequestingAggregators,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.FunctionAggregation,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_aggregateOperationOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_operatorsRequestingAggregators,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpaceAfterBracketPolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldDatabaseFunctionOption,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_clusterFunctionRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Database,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_databaseFunctionOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpaceStepBackPolicy,$t));Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(System.String,this.m_availableClusters)&&this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldClusterNamesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_startOfCommandWithClusterRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Service,System.Linq.Enumerable.from(this.m_availableClusters,System.String).select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f54).ToArray(System.String)),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.NullApplyPolicy,$t));localDatabases=new(System.Collections.Generic.Dictionary$2(Kusto.Data.IntelliSense.KustoCommandContext,System.Collections.Generic.List$1(System.String)).ctor);Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity,this.Databases)&&localDatabases.add(Kusto.Data.IntelliSense.KustoCommandContext.Empty,System.Linq.Enumerable.from(this.Databases,Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity).select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f55).toList(System.String));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldDatabaseNamesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_startOfCommandWithDatabaseRegex,$t.ContextualOptions=localDatabases,$t.OverrideOptions=this.OverridingDatabaseMapping,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.NullApplyPolicy,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Database,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldTableNamesForRemoteQueryOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_databaseFunctionInFindRegex,$t.ContextualOptions=null,$t.OverrideOptions=this.OverridingTablesMapping,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Table,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendCommaPolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldTableNamesForRemoteQueryOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_databaseFunctionRegex,$t.ContextualOptions=null,$t.OverrideOptions=this.OverridingTablesMapping,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Table,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendPipePolicy,$t));Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity,this.Tables)&&(this.TableNames=System.Linq.Enumerable.from(this.Tables,Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity).where($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f56).select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f49).orderBy($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f57).toList(System.String),rule=($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldTableNames,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_startOfLineWithSpaceOrAfterJoinRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Table,this.TableNames),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendPipePolicy,$t),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldTableNamesForFindIn,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findInStartOrContinueListRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Table,this.TableNames),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.NullApplyPolicy,$t)),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(Kusto.Data.IntelliSense.KustoIntelliSenseFunctionEntity,this.Functions)&&(rule.AdditionalOptions=System.Array.init([new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.FunctionServerSide,System.Linq.Enumerable.from(this.Functions,Kusto.Data.IntelliSense.KustoIntelliSenseFunctionEntity).select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f58).orderBy($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f33).ToArray(System.String))],Kusto.Data.IntelliSense.CompletionOptionCollection),rule.AfterApplyPolicies=System.Linq.Enumerable.from(this.Functions,Kusto.Data.IntelliSense.KustoIntelliSenseFunctionEntity).toDictionary($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f58,$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f59,System.String,Kusto.Data.IntelliSense.ApplyPolicy)),this.GeneralRules.add(rule),this.DefaultRule=rule);Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity,this.Tables)&&this.AddColumnRules();this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldTimespanOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_agoContextRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Literal,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_timespanOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.MoveAfterTheBracketPolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldTimespanOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_nowContextRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Literal,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_negativeTimespanOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.MoveAfterTheBracketPolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldKindFlavorsForJoin,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_joinFlavorsForJoin_Regex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.OptionKind,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_joinFlavorsOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_joinKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendJoinClauseWithOpenningBracketPolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldPostJoinOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_joinRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.None,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_postJoinOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_joinKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t.AfterApplyPolicies=this.s_afterjoinOperatorApplyPolicies,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldRenderOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_renderRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.OptionRender,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_renderOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_renderKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldRenderKindKeywordOption,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_renderMultiChartsRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.OptionRender,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_kindKeywordOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_renderKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.NullApplyPolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldRenderKindOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_renderKindOptionsRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.OptionRender,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_renderKindOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_renderKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldNumericScalarOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topOrLimitOrTakeOrSampleRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Literal,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_numericScalarsOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topLimitTakeSampleKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldParseKeywordKindsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_parseKindChoose_Regex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.OptionKind,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_kindChooseKeywordOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_parseKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldWithKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_parseWith_Regex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_withKeywordOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_parseKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldStarOption,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_parseStarOption_Regex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_parseStarOption),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_parseKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldParseTypesKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_parseTypesSuggest_Regex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.DataType,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_parseSuggestedTypesKeywordOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_parseKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldTopNestedOfKeywordOption,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_operatorContextForTopNestedAndTopHitters,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.None,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_ofKeywordOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topNestedKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldTopNestedOfKeywordOption,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_operatorContextForTopNestedAndTopHitters,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.None,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_ofKeywordOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topHittersKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldTopNestedOfKeywordOption,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_operatorContextForSampleDistinct,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.None,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_ofKeywordOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_sampleDistinctKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldTopNestedKeywordOption,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topNestedKeywordPrefixRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Operator,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topNestedKeywords),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topNestedKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldTopHittersKeywordOption,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topHittersKeywordPrefixRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Operator,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topHittersKeywords),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topHittersKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldTopNestedOthersOption,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topNestedWithOthersOption,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.OptionKind,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_withOthersKeywordOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topNestedKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldByKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_yieldByKeywordRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_byKeywordOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_operatorsUsingByKeywordKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldAscendingDescendingOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topNestedAscendingDescendingRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_ascDescKeywordOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topNestedKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldAscendingDescendingOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topOrOrderAscendingDescendingRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_ascDescOrNullsLastNullsFirstKeywordOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topSortOrderKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldNullsFirstNullsLastOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topTopNestedSortOrderByAscDescRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_nullsLastFirstKeywordOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topTopNestedSortOrderKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.Cluster!=null&&Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(Kusto.Data.IntelliSense.KustoIntelliSensePluginEntity,this.Cluster.Plugins)&&(pluginOptions=System.Linq.Enumerable.from(this.Cluster.Plugins,Kusto.Data.IntelliSense.KustoIntelliSensePluginEntity).select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f60).orderBy($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f61).ToArray(System.String),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldEvaluateOperatorOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_evaluateRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.FunctionScalar,pluginOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_evaluateKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpaceAfterBracketPolicy,$t.AfterApplyPolicies=this.s_afterEvaluatePluginPolicies,$t)));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_makeSeriesRequestingAggregatorsRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.FunctionAggregation,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_makeSeriesAggregateOperationOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_makeSeriesKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpaceAfterBracketPolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForDefaultOrOn,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_makeSeriesBeforeDefaultOrOnRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Literal,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_makeSeriesDefaultOrOnOptions),$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForOn,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_makeSeriesBeforeOnRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Literal,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_makeSeriesOnOptions),$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForRange,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_makeSeriesBeforeRangeRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Literal,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_makeSeriesInRangeOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpaceStepBackPolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldMakeSeriesOperatorForBy,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_makeSeriesBeforeByRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Literal,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_byKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldSearchKindOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchKind_Regex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.OptionKind,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchKindOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.AddRangeOperator();Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(Kusto.Data.IntelliSense.KustoIntelliSenseFunctionEntity,this.Functions)&&(this.FunctionMappings=System.Linq.Enumerable.from(this.Functions,Kusto.Data.IntelliSense.KustoIntelliSenseFunctionEntity).toDictionary($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f62,$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f63,System.String,System.Tuple$2(System.String,System.Text.RegularExpressions.Regex)));this.AddQueryParameterRule(this.m_queryParameters)},AddClientDirectiveRules:function(){var $t;this.m_allowClientDirectives&&(this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldClientDirectivesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_clientDirective_Regex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.ClientDirective,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_clientDirectivesOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t)),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(System.String,this.m_availableClusters)&&this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldClientDirective_ConnectOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_clientDirectiveConnect_Regex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Service,System.Linq.Enumerable.from(this.m_availableClusters,System.String).select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f64)),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.NullApplyPolicy,$t)))},AddColumnRules:function(){var $t,columns=System.Linq.Enumerable.from(this.Tables,Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity).selectMany($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f65).ToArray(System.Object),columnNamesWithStringTypes,matchingTokens,afterApplyPolicies,columnNamesWithNonStringTypes,columnNamesWithTypeDateTime;System.Linq.Enumerable.from(columns,System.Object).count()!==0&&(this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForFilterInFind,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_operatorContextForFilterColumnInFindRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findKeywords,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.AdditionalOptions=System.Array.init([new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Column,System.Array.init([\"*\"],System.String))],Kusto.Data.IntelliSense.CompletionOptionCollection),$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldPostSearchOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchContextRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchKeywords,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.AdditionalOptions=System.Array.init([new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Literal,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchLiteralsOptions,1),new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.None,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchInKeywordOptions,1),new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.FunctionScalar,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_extendOperationOptions),new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_kindKeywordOptions)],Kusto.Data.IntelliSense.CompletionOptionCollection),$t.AfterApplyPolicies=this.s_afterSearchApplyPolicies,$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldPostSearchKindOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchAfterKindContextRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchKeywords,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.AdditionalOptions=System.Array.init([new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Literal,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchLiteralsOptions,1),new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.None,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchInKeywordOptions,1),new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.FunctionScalar,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_extendOperationOptions)],Kusto.Data.IntelliSense.CompletionOptionCollection),$t.AfterApplyPolicies=this.s_afterSearchApplyPolicies,$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldInsideSearchOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchMoreContextRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchKeywords,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.AdditionalOptions=System.Array.init([new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Literal,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_searchLiteralsOptions,1),new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.FunctionScalar,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_extendOperationOptions)],Kusto.Data.IntelliSense.CompletionOptionCollection),$t.AfterApplyPolicies=this.s_afterSearchApplyPolicies,$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForFilter,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_operatorContextForFilterColumnRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_filterKeywords,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.AdditionalOptions=System.Array.init([new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Column,System.Array.init([\"*\"],System.String))],Kusto.Data.IntelliSense.CompletionOptionCollection),$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProjectInFind,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_operatorContextForFindProject,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.NullApplyPolicy,$t.AdditionalOptions=System.Array.init([new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Column,System.Array.init([\"pack(*)\"],System.String))],Kusto.Data.IntelliSense.CompletionOptionCollection),$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProject,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_operatorContextForProject,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_projectKeywords,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProjectAway,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_operatorContextForProjectAway,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_projectAwayKeywords,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProjectRename,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_operatorContextForProjectRename,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_projectRenameKeywords,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_singleParamFunctionsColumnContextRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.MoveAfterTheBracketPolicy,$t.AdditionalOptions=System.Array.init([new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.FunctionScalar,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_extendOperationOptions)],Kusto.Data.IntelliSense.CompletionOptionCollection),$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.AfterApplyPolicies=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_afterFunctionsApplyPolicies,$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForTwoParamFunctions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_twoParamFunctionsColumnContextRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendCommaPolicy,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.AdditionalOptions=System.Array.init([new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.FunctionScalar,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_extendOperationOptions)],Kusto.Data.IntelliSense.CompletionOptionCollection),$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForThreeParamFunctions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_threeParamFunctionsColumnContextRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendDoubleCommaPolicy,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.AdditionalOptions=System.Array.init([new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.FunctionScalar,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_extendOperationOptions)],Kusto.Data.IntelliSense.CompletionOptionCollection),$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForManyParamFunctions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_manyParamFunctionsColumnContextRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendCommaPolicy,$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_operatorContextForExtend_ColumnAndFunctionRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_projectExtendKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpaceAfterBracketPolicy,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.AdditionalOptions=System.Array.init([new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.FunctionScalar,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_extendOperationOptions)],Kusto.Data.IntelliSense.CompletionOptionCollection),$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForJoin,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_entitiesForJoin_ColumnsRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_joinKeywords,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForOrdering,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topSortOrderReduceByRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topSortOrderReduceKeywords,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForOrdering,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topNestedSuggestingColumnsRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topNestedKeywords,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForOrdering,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topHittersSuggestingColumnsRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_topHittersKeywords,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesAndFunctionsForExtend,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_sampleDistinctSuggestingColumnsRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.AdditionalOptions=System.Array.init([new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.FunctionScalar,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_extendOperationOptions)],Kusto.Data.IntelliSense.CompletionOptionCollection),$t.OverrideOptions=this.OverridingColumnMapping,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_sampleDistinctKeywords,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldKindFlavorsForReduceBy,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_reduceByColumnContextRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_reduceKeywords,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForParse,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_parseColumnContextRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_parseKeywords,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForRender,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_renderTimePivotColumnContextRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_renderKeywords,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForDiffPatternsPluginSplitParameter,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_diffPatternsPluginSplitParameterRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_evaluateKeywords,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.NullApplyPolicy,$t)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForMakeSeries,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_makeSeriesByRegex,$t.ContextualOptions=this.ColumnMappingsToTables,$t.OverrideOptions=this.OverridingColumnMapping,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_makeSeriesKeywords,$t.OptionsKind=Kusto.Data.IntelliSense.OptionKind.Column,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.NullApplyPolicy,$t)),columnNamesWithStringTypes=System.Linq.Enumerable.from(columns,System.Object).where($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f66).select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f67),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(System.String,columnNamesWithStringTypes)&&(columnNamesWithStringTypes=columnNamesWithStringTypes.union(System.Linq.Enumerable.from(this.Tables,Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity).select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f68)),matchingTokens=new(System.Collections.Generic.HashSet$1(System.String).$ctor1)(columnNamesWithStringTypes),afterApplyPolicies=$asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f69(new(System.Collections.Generic.Dictionary$2(System.String,Kusto.Data.IntelliSense.ApplyPolicy).ctor)),this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualTokensWithRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldStringComparisonOptions,$t.GroupNameToUseAfterMatch=\"MatchingString\",$t.MatchingTokens=matchingTokens,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_filteredColumnRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.FunctionFilter,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_stringOperatorOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.StringComparisonPolicy,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_filterKeywords,$t.AfterApplyPolicies=afterApplyPolicies,$t))),columnNamesWithNonStringTypes=System.Linq.Enumerable.from(columns,System.Object).where($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f70).select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f67),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(System.String,columnNamesWithNonStringTypes)&&this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualTokensWithRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldNumericComparisonOptions,$t.GroupNameToUseAfterMatch=\"MatchingString\",$t.MatchingTokens=new(System.Collections.Generic.HashSet$1(System.String).$ctor1)(columnNamesWithNonStringTypes),$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_filteredColumnRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.FunctionFilter,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_numericOperatorOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_filterKeywords,$t)),columnNamesWithTypeDateTime=System.Linq.Enumerable.from(columns,System.Object).where($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f71).select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f67),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(System.String,columnNamesWithTypeDateTime)&&this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.ContextualTokensWithRegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldDateTimeOperatorsOptions,$t.GroupNameToUseAfterMatch=\"MatchingString\",$t.MatchingTokens=new(System.Collections.Generic.HashSet$1(System.String).$ctor1)(columnNamesWithTypeDateTime),$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_filterPredicateRightValueRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.FunctionScalar,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_datetimeOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpaceAfterBracketPolicy,$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_filterKeywords,$t)))},SetQueryParametersRule:function(queryParameters){this.Locker;this.QueryParametersRules.clear();this.AddQueryParameterRule(queryParameters)},AddQueryParameterRule:function(queryParameters){var $t,$t1;queryParameters!=null&&System.Linq.Enumerable.from(queryParameters,System.String).any()&&this.QueryParametersRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldQueryParameters,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_queryParametersRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Parameter,queryParameters),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=\"}\",$t1),$t))},AddRangeOperator:function(){var $t;this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldRangeFromOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_rangeFromRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_rangeFromOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldRangeFromToOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_rangeFromToRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_rangeFromToOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldRangeFromToStepOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_rangeFromToStepRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_rangeFromToStepOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t))},AddFindOperator:function(){var $t;this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldPostFindOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findContextRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.None,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findWhereInOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t.AfterApplyPolicies=this.s_afterFindApplyPolicies,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldPostFindInOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findInRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.None,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_postFindInOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t.AfterApplyPolicies=this.s_afterFindInApplyPolicies,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldEndOrContinueFindInOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_FindInEndOrContinueListRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.None,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findInEndOrContinueOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t.AfterApplyPolicies=this.s_afterFindInEndOrContinuePolicies,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldPostFindInListOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findWhereRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.None,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findInPostListOptions),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.GeneralRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.RuleKind.YieldFindProjectSmartOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findProjectSmartRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.None,System.Array.init([\"|\"],System.String)),$t.RequiredKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findKeywords,$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t))},RegisterCommandEntities:function(commandContext,extendedEntities,replaceEntities){var context=new Kusto.Data.IntelliSense.KustoCommandContext(commandContext.Context),columnMappingsToTables=this.ColumnMappingsToTables;if(this.m_remoteColumnMappingsToTables.containsKey(commandContext)){var cluster={},database={},remoteTableContext={};this.ResolveRemoteContext(commandContext.Context,cluster,database,remoteTableContext)&&(context=new Kusto.Data.IntelliSense.KustoCommandContext(remoteTableContext.v));columnMappingsToTables=this.m_remoteColumnMappingsToTables.getItem(commandContext)}replaceEntities||columnMappingsToTables.containsKey(context)&&extendedEntities.AddRange(columnMappingsToTables.getItem(context));this.OverridingColumnMapping.setItem(commandContext,System.Linq.Enumerable.from(extendedEntities,System.String).orderBy($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f57).toList(System.String))},ResolveEntitiesFromCommand:function(input,entitiesList,knownEntities){var $t,result={v:Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.None},command=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_removeStringLiteralsSurroundedBySpacesRegex.replace(input,\" \"),unionCommandSegments,commandClauses,unifiedEntities,clause,clauseEntities;if(command=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_removeCommentsRegex.replace(command,\"\"),unionCommandSegments=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_lastCommandSegmentRegex.match(command),unionCommandSegments.getSuccess()&&(command=unionCommandSegments.getGroups().getByName(\"LastSegment\").toString()),commandClauses=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ParseCommandClauses(command),System.Linq.Enumerable.from(commandClauses,System.String).count()===1)return this.ResolveEntitiesFromClause(entitiesList,knownEntities,result,command);unifiedEntities=new(System.Collections.Generic.HashSet$1(System.String).ctor);$t=Bridge.getEnumerator(commandClauses,System.String);try{while($t.moveNext())clause=$t.Current,clauseEntities=new(System.Collections.Generic.List$1(System.String).ctor),result.v=this.ResolveEntitiesFromClause(clauseEntities,knownEntities,result,clause),unifiedEntities.unionWith(clauseEntities)}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}return entitiesList.AddRange(unifiedEntities),result.v},InjectFunctionsAsLetStatementsIfNeeded:function(input,usedFunctions){var $t,funcitonStatementsBuilder,funcitonAdditions,moreFunctions;if(Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$1(System.Collections.Generic.KeyValuePair$2(System.String,System.Tuple$2(System.String,System.Text.RegularExpressions.Regex)),this.FunctionMappings)){funcitonStatementsBuilder=new System.Text.StringBuilder;$t=Bridge.getEnumerator(this.FunctionMappings);try{while($t.moveNext()){var kvp=$t.Current,funcName=kvp.key,isFuncPresentRegex=kvp.value.Item2,funcExpression=kvp.value.Item1;!usedFunctions.contains(funcName)&&isFuncPresentRegex.isMatch(input)&&(funcitonStatementsBuilder.appendLine(funcExpression),usedFunctions.add(funcName))}}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}funcitonStatementsBuilder.getLength()>0&&(funcitonAdditions=funcitonStatementsBuilder.toString(),moreFunctions=this.InjectFunctionsAsLetStatementsIfNeeded(funcitonAdditions,usedFunctions),input=(moreFunctions||\"\")+(input||\"\"))}return input},ResolveEntitiesFromClause:function(entitiesList,knownEntities,result,input){var statements=this.InjectFunctionsAsLetStatementsIfNeeded(input,new(System.Collections.Generic.HashSet$1(System.String).ctor)),analyzeResult=this.AnalyzeStatementsImpl(statements,!1),command=analyzeResult.Command,opEntitiesMap;return System.String.isNullOrWhiteSpace(command)?result.v:(opEntitiesMap=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.BuildOpEntitiesMap(command),result.v=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.HandleRangeEntities(entitiesList,result.v,opEntitiesMap,knownEntities),result.v=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.HandlePrintEntities(entitiesList,result.v,opEntitiesMap,knownEntities),result.v=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.HandleProjectEntities(entitiesList,result.v,opEntitiesMap,knownEntities),result.v=this.HandleFindEntities(entitiesList,result.v,opEntitiesMap,knownEntities),result.v=this.HandleSearchEntities(entitiesList,result.v,opEntitiesMap,knownEntities),result.v=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.HandleExtendEntities(entitiesList,result.v,opEntitiesMap,knownEntities),result.v=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.HandleMvexpandEntities(entitiesList,result.v,opEntitiesMap,knownEntities),result.v=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.HandleSummarizeEntities(entitiesList,result.v,opEntitiesMap,knownEntities),result.v=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.HandleMakeSeriesEntities(entitiesList,result.v,opEntitiesMap,knownEntities),result.v=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.HandleTopNestedEntities(entitiesList,result.v,opEntitiesMap,knownEntities),result.v=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.HandleReduceByEntities(entitiesList,result.v,opEntitiesMap,knownEntities),result.v=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.HandleParseEntities(entitiesList,result.v,opEntitiesMap,knownEntities),result.v=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.HandleGetSchemaEntities(entitiesList,result.v,opEntitiesMap,knownEntities),result.v=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.HandleSampleDistinctEntities(entitiesList,result.v,opEntitiesMap,knownEntities),result.v===Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.ReplaceEntities?knownEntities=entitiesList:result.v===Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.AppendEntities&&(knownEntities=Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(System.String,knownEntities)?entitiesList:System.Linq.Enumerable.from(knownEntities,System.String).union(entitiesList).toList(System.String)),result.v=this.HandleProjectRenameEntities(entitiesList,result.v,opEntitiesMap,knownEntities),result.v=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.HandleProjectAwayEntities(entitiesList,result.v,opEntitiesMap,knownEntities),result.v)},HandleFindEntities:function(entitiesList,result,opEntitiesMap,knownEntities){var $t,$t1,$t2,list={v:null},wasAdded,hasPipe,projectionMatch,projectedList,projectedListCopy,entities,knownProjectedEntities,entity,entity1,withsourceMatch,tableNameColumn,entity2;if(!opEntitiesMap.tryGetValue(\"find\",list))return result;if(wasAdded=!1,hasPipe=System.String.endsWith(list.v,\"|\"),list.v=Kusto.Cloud.Platform.Utils.ExtendedString.TrimEnd(list.v,\"|\"),hasPipe){if(projectionMatch=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_findProjectionRegex.match(list.v),projectionMatch.getSuccess()){if(projectedList=projectionMatch.getGroups().getByName(\"projectedList\").getValue(),projectedListCopy=projectedList,projectedList=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_packRgx.replace(projectedList,\"\"),Bridge.referenceEquals(projectedList,projectedListCopy)||(wasAdded=!!(wasAdded|Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddFieldIfNotPresent(entitiesList,\"pack_\"))),entities=new(System.Collections.Generic.List$1(System.String).ctor),Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveEntitiesFromList(entities,projectedList)){knownProjectedEntities=Kusto.Cloud.Platform.Utils.ExtendedEnumerable.IntersectWith(System.String,entities,knownEntities);$t=Bridge.getEnumerator(knownProjectedEntities,System.String);try{while($t.moveNext())entity=$t.Current,wasAdded=!!(wasAdded|Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddFieldIfNotPresent(entitiesList,entity))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}}}else{if(knownEntities!=null){$t1=Bridge.getEnumerator(knownEntities,System.String);try{while($t1.moveNext())entity1=$t1.Current,wasAdded=!!(wasAdded|Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddFieldIfNotPresent(entitiesList,entity1))}finally{Bridge.is($t1,System.IDisposable)&&$t1.System$IDisposable$Dispose()}}wasAdded=!!(wasAdded|Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddFieldIfNotPresent(entitiesList,\"pack_\"))}withsourceMatch=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_withsourceExtractRegex.match(list.v);tableNameColumn=withsourceMatch.getSuccess()?withsourceMatch.getGroups().getByName(\"tableNameColumn\").getValue():\"source_\";wasAdded=!!(wasAdded|Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddFieldIfNotPresent(entitiesList,tableNameColumn));projectionMatch.getSuccess()||(wasAdded=!!(wasAdded|Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddFieldIfNotPresent(entitiesList,\"pack_\")))}else if(knownEntities!=null){$t2=Bridge.getEnumerator(knownEntities,System.String);try{while($t2.moveNext())entity2=$t2.Current,wasAdded=!!(wasAdded|Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddFieldIfNotPresent(entitiesList,entity2))}finally{Bridge.is($t2,System.IDisposable)&&$t2.System$IDisposable$Dispose()}}return wasAdded&&(result=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.ReplaceEntities),result},HandleSearchEntities:function(entitiesList,result,opEntitiesMap,knownEntities){var $t,list={v:null},wasAdded,entity;if(!opEntitiesMap.tryGetValue(\"search\",list))return result;if(wasAdded=!1,knownEntities!=null){$t=Bridge.getEnumerator(knownEntities,System.String);try{while($t.moveNext())entity=$t.Current,wasAdded=!!(wasAdded|Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddFieldIfNotPresent(entitiesList,entity))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}}return wasAdded&&(result=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.ReplaceEntities),result},HandleProjectRenameEntities:function(entitiesList,result,opEntitiesMap,knownEntities){var $t,$t1,list={v:null},isOriginalEntitiesListEmpty,pair,tuple,targetName,sourceName,field;if(!opEntitiesMap.tryGetValue(\"project-rename\",list))return result;var removedEntities=new(System.Collections.Generic.List$1(System.String).ctor),wasChanged=!1,entities=System.String.split(list.v,System.Array.init([44],System.Char).map(function(i){return String.fromCharCode(i)}),null,1);if(Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$1(System.String,entities))return result;isOriginalEntitiesListEmpty=Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$1(System.String,entitiesList);$t=Bridge.getEnumerator(entities);try{while($t.moveNext())(pair=$t.Current,tuple=System.String.split(pair,System.Array.init([61],System.Char).map(function(i){return String.fromCharCode(i)}),null,1),tuple.length===2)&&((targetName=Kusto.Data.IntelliSense.ExpressionEntityParser.UnescapeEntityName(tuple[System.Array.index(0,tuple)]),sourceName=Kusto.Data.IntelliSense.ExpressionEntityParser.UnescapeEntityName(tuple[System.Array.index(1,tuple)]),System.String.isNullOrEmpty(targetName)||System.String.isNullOrEmpty(sourceName)||System.String.equals(targetName,sourceName,4))||(removedEntities.add(sourceName),entitiesList.contains(sourceName)&&(entitiesList.remove(sourceName),wasChanged=!0),entitiesList.contains(targetName)||(Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddEscapedEntityName(entitiesList,targetName),wasChanged=!0)))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}if(System.Linq.Enumerable.from(removedEntities,System.String).any()&&isOriginalEntitiesListEmpty&&Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(System.String,knownEntities)){$t1=Bridge.getEnumerator(System.Linq.Enumerable.from(knownEntities,System.String).except(removedEntities).ToArray(System.String));try{while($t1.moveNext())field=$t1.Current,Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.AddEscapedEntityName(entitiesList,field)}finally{Bridge.is($t1,System.IDisposable)&&$t1.System$IDisposable$Dispose()}}return wasChanged&&(result=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveResult.ReplaceEntities),result},AnalyzeCommand$1:function(statement,cachedReference){var input=this.InjectFunctionsAsLetStatementsIfNeeded(statement,new(System.Collections.Generic.HashSet$1(System.String).ctor)),result;return(cachedReference!=null&&cachedReference.ContextCache!=null&&(this.ContextCache=new(System.Collections.Generic.Dictionary$2(System.Int32,Kusto.Data.IntelliSense.KustoCommandContext).$ctor1)(cachedReference.ContextCache)),System.String.indexOf(input,String.fromCharCode(59))<0)?(result=new Kusto.Data.IntelliSense.AnalyzedCommand,result.Command=statement,result.Context=this.ResolveContextFromCommand(input),result):this.AnalyzeStatementsImpl(input,!0)},AnalyzeCommand:function(analyzedCommand,appendingPart){var $t,appendedCommand;return System.String.isNullOrWhiteSpace(appendingPart)?analyzedCommand:analyzedCommand==null||System.String.isNullOrEmpty(analyzedCommand.Command)?this.AnalyzeCommand$1(appendingPart,null):(appendedCommand=(analyzedCommand.Command||\"\")+(appendingPart||\"\"),System.String.indexOf(appendingPart,String.fromCharCode(59))>=0||System.String.endsWith(analyzedCommand.Command.trim(),\";\")||Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_nonDefaultContextKeywordsRegex.isMatch(appendingPart))?this.AnalyzeCommand$1(appendedCommand,null):($t=new Kusto.Data.IntelliSense.AnalyzedCommand,$t.Command=appendedCommand,$t.Context=analyzedCommand.Context,$t)},ResolveContextFromCommand:function(command){var $t,commandWithoutStringLiterals,hashCode,keyword,contextMatchRegex,defaultContextMatcher,commandContext;if(System.String.isNullOrWhiteSpace(command))return Kusto.Data.IntelliSense.KustoCommandContext.Empty;if(commandWithoutStringLiterals=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_removeStringLiteralsSurroundedBySpacesRegex.replace(command,\" \"),commandWithoutStringLiterals=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_removeCommentsRegex.replace(commandWithoutStringLiterals,\"\"),commandWithoutStringLiterals=commandWithoutStringLiterals.trim(),hashCode=Bridge.getHashCode(commandWithoutStringLiterals),this.m_contextCache.containsKey(hashCode))return this.m_contextCache.getItem(hashCode);var tableContext=\"\",contextOperation=Kusto.Data.IntelliSense.ContextOperation.Intersect,matchesKeywords=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_nonDefaultContextKeywordsRegex.matches(commandWithoutStringLiterals),lastMatch=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.GetLatestMatch(matchesKeywords),isFind=!1,isSearch=!1;return lastMatch!=null&&(keyword=lastMatch.getGroups().get(0).toString(),contextMatchRegex={},Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_commandContextRegexes.tryGetValue(keyword,contextMatchRegex)&&(tableContext=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveContextUsingRegex(commandWithoutStringLiterals,contextMatchRegex.v,lastMatch.getIndex())),isFind=Bridge.referenceEquals(keyword,\"find\"),isSearch=Bridge.referenceEquals(keyword,\"search\"),isSearch&&!System.String.isNullOrEmpty(tableContext)&&(contextOperation=Kusto.Data.IntelliSense.ContextOperation.Union)),isFind&&Bridge.referenceEquals(tableContext,\"\")&&(tableContext=\"database('*')\"),System.String.isNullOrEmpty(tableContext)&&(isFind?tableContext=\"*\":(defaultContextMatcher={Item1:Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_commandDefaultContext,Item2:null},tableContext=($t=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveContextUsingRegex(commandWithoutStringLiterals,defaultContextMatcher,0),$t!=null?$t:\"\"),isSearch&&System.String.equals(tableContext,\"search\")&&(tableContext=\"*\",contextOperation=Kusto.Data.IntelliSense.ContextOperation.Union))),commandContext=System.String.isNullOrEmpty(tableContext)?Kusto.Data.IntelliSense.KustoCommandContext.Empty:new Kusto.Data.IntelliSense.KustoCommandContext(tableContext,contextOperation),this.m_contextCache.setItem(hashCode,commandContext),commandContext},AnalyzeStatementsImpl:function(statements,requireContext){var result=new Kusto.Data.IntelliSense.AnalyzedCommand,letStatements=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ResolveLetExpressions(statements),expression,replaceRegex;if(result.Command=Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.FindLastStatement(statements),(requireContext||letStatements.Count>0)&&(result.Context=this.ResolveContextFromCommand(result.Command)),letStatements.Count===0)return result;while(letStatements.containsKey(result.Context.Context))expression=letStatements.getItem(result.Context.Context),replaceRegex=new System.Text.RegularExpressions.Regex.ctor(\"\\\\b\"+(result.Context.Context||\"\")+\"\\\\b(\\\\(.*?\\\\))?\"),result.Command=replaceRegex.replace(result.Command,expression),letStatements.remove(result.Context.Context),result.Context=this.ResolveContextFromCommand(expression);return result},GetKnownEntities:function(command,context,mapOfOriginallyKnownEntities,knownEntities,originallyKnownEntities){var $t,$t1,$t2,rule={};return this.TryMatchSpecificRule(command,context,Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForFilterInFind,rule)?(knownEntities.v=($t=System.String,System.Linq.Enumerable.from(rule.v.GetOptions(context),$t).toList($t)),mapOfOriginallyKnownEntities.containsKey(context)||mapOfOriginallyKnownEntities.setItem(context,knownEntities.v),originallyKnownEntities.v=mapOfOriginallyKnownEntities.getItem(context),!0):this.TryMatchSpecificRule((command||\"\")+\" project \",context,Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProjectInFind,rule)?(knownEntities.v=($t1=System.String,System.Linq.Enumerable.from(rule.v.GetOptions(context),$t1).toList($t1)),mapOfOriginallyKnownEntities.containsKey(context)||mapOfOriginallyKnownEntities.setItem(context,knownEntities.v),originallyKnownEntities.v=mapOfOriginallyKnownEntities.getItem(context),!0):(command=(command||\"\")+\" | project \",this.TryMatchSpecificRule(command,context,Kusto.Data.IntelliSense.RuleKind.YieldColumnNamesForProject,rule))?(knownEntities.v=($t2=System.String,System.Linq.Enumerable.from(rule.v.GetOptions(context),$t2).toList($t2)),mapOfOriginallyKnownEntities.containsKey(context)||mapOfOriginallyKnownEntities.setItem(context,knownEntities.v),originallyKnownEntities.v=mapOfOriginallyKnownEntities.getItem(context),!0):!1},LoadCommandToolTips:function(){var $t,toolTipCommands=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTip).ctor),command,parameters,command1,parameters1,command2,parameters2,command3,parameters3,command4,parameters4,command5,parameters5,command6,parameters6,command7,parameters7,command8,parameters8,command9,parameters9,command10,parameters10,command11,parameters11,command12,parameters12,command13,parameters13,command14,parameters14,command15,parameters15,command16,parameters16,command17,parameters17,command18,command19,parameters18,command20,parameters19,command21,parameters20;this.CommandToolTips=toolTipCommands;command=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\"tostring\",$t.Summary=\"Converts the given value to string\",$t.Usage=\"... | extend str = <i>tostring<\\/i>(Column1)\",$t);parameters=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command.Parameters=parameters;parameters.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"T\",$t.Name=\"value\",$t.Description=\"The value to convert to string\",$t));toolTipCommands.add(command);command1=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\"strlen\",$t.Summary=\"Returns the length of the given string\",$t.Usage=\"... | extend length = <i>strlen<\\/i>(Column1)\",$t);parameters1=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command1.Parameters=parameters1;parameters1.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"string\",$t.Name=\"value\",$t.Description=\"The string being measured for length\",$t));toolTipCommands.add(command1);command2=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\"hash\",$t.Summary=\"Returns the xxhash value of a scalar value\",$t.Usage=\"... | extend hash = <i>hash<\\/i>(Column1, 100)\",$t);parameters2=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command2.Parameters=parameters2;parameters2.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"Every scalar type <\\/b><i>except<\\/i><b> Dynamic\",$t.Name=\"target\",$t.Description=\"The value the hash is calculated on\",$t));parameters2.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"long\",$t.Name=\"modulo\",$t.Description=\"The modulo value to be applied on the hash result\",$t));toolTipCommands.add(command2);command3=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\"iff\",$t.Summary=\"Returns one of two values, depending on whether the Boolean expression evaluates to true or false\",$t.Usage=\"... | extend val = <i>iff<\\/i>(strlen(Column1) > 10, 'long', 'short')\",$t);parameters3=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command3.Parameters=parameters3;parameters3.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"bool\",$t.Name=\"expression\",$t.Description=\"The Boolean expression you want to evaluate\",$t));parameters3.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"T\",$t.Name=\"trueValue\",$t.Description=\" Returned if 'expression' evaluates to True\",$t));parameters3.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"T\",$t.Name=\"falseValue\",$t.Description=\"Returned if 'expression' evaluates to False\",$t));toolTipCommands.add(command3);command4=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\"extract\",$t.Summary=\"Produces a scalar using a regular expression (<a href=https://re2.googlecode.com/hg/doc/syntax.html>RE2 reference<\\/a>)\",$t.Usage=\"... | extend number = <i>extract<\\/i>(@'(\\\\d+)', 1, Column1, typeof(int))\",$t);parameters4=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command4.Parameters=parameters4;parameters4.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"string\",$t.Name=\"regex\",$t.Description=\"The regular expression to be applied\",$t));parameters4.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"int\",$t.Name=\"groupIndex\",$t.Description=\"The index of the matching group (1 = 1st matching group in regex, 2 = 2nd matching group, etc.)\",$t));parameters4.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"column\",$t.Name=\"columnName\",$t.Description=\"Specify column to operate on (can be calculated column)\",$t));parameters4.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"typename typeof(T)\",$t.Name=\"type\",$t.Description=\"Optional type to convert the result to\",$t.Optional=!0,$t));toolTipCommands.add(command4);command5=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\"replace\",$t.Summary=\"Replace a string with another string using a regular expression (<a href=https://re2.googlecode.com/hg/doc/syntax.html>RE2 reference<\\/a>)\",$t.Usage=\"... | replace str = <i>replace<\\/i>(@'foo', @'bar', Column1)\",$t);parameters5=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command5.Parameters=parameters5;parameters5.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"string\",$t.Name=\"matchingPattern\",$t.Description=\"String or regular expression to be applied for matching\",$t));parameters5.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"string\",$t.Name=\"rewritePattern\",$t.Description=\"String or regular expression to be used for rewrite (\\\\1 = 1st matching group in regex, \\\\2 = 2nd matching group, etc.)\",$t));parameters5.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"column\",$t.Name=\"columnName\",$t.Description=\"Specify column to operate on (can be calculated column)\",$t));toolTipCommands.add(command5);command6=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\"extractjson\",$t.Summary=\"Produces a scalar using a JSONPath expression (<a href=http://goessner.net/articles/JsonPath/>JSONPath reference<\\/a>)\",$t.Usage=\"... | extend number = <I>extractjson<\\/I>(@'$.Object.Property', Column1, typeof(int))\",$t);parameters6=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command6.Parameters=parameters6;parameters6.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"string\",$t.Name=\"jsonPath\",$t.Description=\"The JSON Path expression to be used\",$t));parameters6.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"column\",$t.Name=\"columnName\",$t.Description=\"Specify column to operate on (can be calculated column)\",$t));parameters6.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"typename typeof(T)\",$t.Name=\"type\",$t.Description=\"Optional type to convert the result to\",$t.Optional=!0,$t));toolTipCommands.add(command6);command7=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\"parsejson\",$t.Summary=\"Converts a JSON string into a value of type 'dynamic' (an object), whose properties can be further accessed using dot or bracket notation\",$t.Usage=\"... | extend obj = <I>parsejson<\\/I>(Column1)\",$t);parameters7=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command7.Parameters=parameters7;parameters7.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"string\",$t.Name=\"columnName\",$t.Description=\"Any valid query expression that returns a string (e.g. a column name)\",$t));toolTipCommands.add(command7);command8=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\"toupper\",$t.Summary=\"Converts the given string to upper case\",$t.Usage=\"... | extend upper = <I>topupper<\\/I>(Column1)\",$t);parameters8=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command8.Parameters=parameters8;parameters8.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"string\",$t.Name=\"value\",$t.Description=\"The string to be converted to upper case\",$t));toolTipCommands.add(command8);command9=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\"tolower\",$t.Summary=\"Converts the given string to lower case\",$t.Usage=\"... | extend lower = <I>tolower<\\/I>(Column1)\",$t);parameters9=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command9.Parameters=parameters9;parameters9.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"string\",$t.Name=\"value\",$t.Description=\"The string to be converted to lower case\",$t));toolTipCommands.add(command9);command10=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\"substring\",$t.Summary=\"Retrieves a substring from the given string\",$t.Usage=\"... | extend substr = <I>substring<\\/I>(Column1,1,3)\",$t);parameters10=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command10.Parameters=parameters10;parameters10.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"string\",$t.Name=\"value\",$t.Description=\"The string to be substringed\",$t));parameters10.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"long\",$t.Name=\"startIndex\",$t.Description=\"The zero-based starting character position of a substring in this instance\",$t));parameters10.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"long\",$t.Name=\"count\",$t.Description=\"The number of characters in the substring\",$t.Optional=!0,$t));toolTipCommands.add(command10);command11=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\"split\",$t.Summary=\"Retrieves a string array that contains the substrings of the given source string that are delimited by the given delimiter\",$t.Usage='... | extend split = <I>split<\\/I>(Column1,\";\")',$t);parameters11=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command11.Parameters=parameters11;parameters11.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"string\",$t.Name=\"source\",$t.Description=\"The string to be splitted\",$t));parameters11.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"string\",$t.Name=\"delimiter\",$t.Description=\"The delimiter on which the split will be based on\",$t));parameters11.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"integer\",$t.Name=\"index\",$t.Description=\"The index of the requested substring\",$t.Optional=!0,$t));toolTipCommands.add(command11);command12=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\"strcat\",$t.Summary=\"Concatenates several strings together (up-to 16 parameters)\",$t.Usage=\"... | extend s = <I>strcat<\\/I>('KU', 'S', 'TO')\",$t);parameters12=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command12.Parameters=parameters12;parameters12.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"string\",$t.Name=\"value\",$t.Description=\"First part\",$t));parameters12.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"string\",$t.Name=\"values\",$t.Description=\"Other parts\",$t.IsArgsArray=!0,$t.Optional=!0,$t));toolTipCommands.add(command12);command13=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\"countof\",$t.Summary=\"Returns the number of pattern matches in the given string\",$t.Usage=\"... | extend matches = <i>countof<\\/i>(Expression, Pattern, Type)\",$t);parameters13=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command13.Parameters=parameters13;parameters13.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"string\",$t.Name=\"Expression\",$t.Description=\"The string to match the pattern to\",$t));parameters13.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"string\",$t.Name=\"Pattern\",$t.Description=\"The pattern to match the expression to. Can be a regular expression\",$t));parameters13.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"string\",$t.Name=\"Type\",$t.Description=\"For substring count leave empty or specifiy 'normal', for regular expression count specify 'regex'\",$t));toolTipCommands.add(command13);command14=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\"percentile\",$t.Summary=\"Returns the estimated value for the given percentile over source values\",$t.Usage=\"... | summarize <i>percentile<\\/i>(source, percent) ...\",$t);parameters14=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command14.Parameters=parameters14;parameters14.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"numeric <\\/b><i>or<\\/i><b> DateTime <\\/b><i>or<\\/i><b> TimeSpan\",$t.Name=\"Source\",$t.Description=\"Range of values over which to estimate percentile\",$t));parameters14.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"real\",$t.Name=\"percent\",$t.Description=\"Value in the range [0..100] giving the percentile to estimate\",$t));toolTipCommands.add(command14);command15=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\"percentiles\",$t.Summary=\"Returns the estimated value for each of the given percentiles over source values\",$t.Usage=\"... | summarize <i>percentiles<\\/i>(source, percent, ...) ...\",$t);parameters15=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command15.Parameters=parameters15;parameters15.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"numeric <\\/b><i>or<\\/i><b> DateTime <\\/b><i>or<\\/i><b> TimeSpan\",$t.Name=\"Source\",$t.Description=\"Range of values over which to estimate percentile\",$t));parameters15.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"real\",$t.Name=\"percent\",$t.Description=\"Value in the range [0..100] giving the percentile to estimate\",$t.IsArgsArray=!0,$t));toolTipCommands.add(command15);command16=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\"percentilew\",$t.Summary=\"Returns the estimated value for the given percentile over weighted source values\",$t.Usage=\"... | summarize <i>percentilew<\\/i>(source, weight, percent) ...\",$t);parameters16=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command16.Parameters=parameters16;parameters16.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"numeric <\\/b><i>or<\\/i><b> DateTime <\\/b><i>or<\\/i><b> TimeSpan\",$t.Name=\"Source\",$t.Description=\"Range of values over which to estimate percentile\",$t));parameters16.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"integer\",$t.Name=\"Weight\",$t.Description=\"Range of weights to give to each source value\",$t));parameters16.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"real\",$t.Name=\"percent\",$t.Description=\"Value in the range [0..100] giving the percentile to estimate\",$t));toolTipCommands.add(command16);command17=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\"percentilesw\",$t.Summary=\"Returns the estimated value for each of the given percentiles over weighted source values\",$t.Usage=\"... | summarize <i>percentilesw<\\/i>(source, weight, percent, ...) ...\",$t);parameters17=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command17.Parameters=parameters17;parameters17.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"numeric <\\/b><i>or<\\/i><b> DateTime <\\/b><i>or<\\/i><b> TimeSpan\",$t.Name=\"Source\",$t.Description=\"Range of values over which to estimate percentile\",$t));parameters17.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"integer\",$t.Name=\"Weight\",$t.Description=\"Range of weights to give to each source value\",$t));parameters17.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"real\",$t.Name=\"percent\",$t.Description=\"Value in the range [0..100] giving the percentile to estimate\",$t.IsArgsArray=!0,$t));toolTipCommands.add(command17);command18=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\"ingestion_time\",$t.Summary=\"returns a datetime value specifying when the record was first available for query\",$t.Usage=\"... | extend length = <i>ingestiontime<\\/i>()\",$t);command18.Parameters=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);toolTipCommands.add(command18);command19=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\"countif\",$t.Summary=\"Returns the number of rows that matches the predicate\",$t.Usage=\"... | summarize <i>countif<\\/i>(Predicate)\",$t);parameters18=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command19.Parameters=parameters18;parameters18.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"boolean\",$t.Name=\"Predicate\",$t.Description=\"Boolean expression used as predicate\",$t));toolTipCommands.add(command19);command20=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\"dcountif\",$t.Summary=\"Returns the number of unique values of Expression in rows that matches the predicate\",$t.Usage=\"... | summarize <i>dcountif<\\/i>(Expression, Predicate, Accuracy)\",$t);parameters19=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command20.Parameters=parameters19;parameters19.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"T\",$t.Name=\"Expression\",$t.Description=\"The unique values to count\",$t));parameters19.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"boolean\",$t.Name=\"Predicate\",$t.Description=\"Boolean expression used as predicate\",$t));parameters19.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"integer\",$t.Name=\"Accuracy\",$t.Description=\"Optional. Controls the balance between speed and accuracy\",$t));toolTipCommands.add(command20);command21=($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTip,$t.Name=\"sumif\",$t.Summary=\"Returns the sum of rows that matches the predicate\",$t.Usage=\"... | summarize <i>sumif<\\/i>(Predicate, Column)\",$t);parameters20=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter).ctor);command21.Parameters=parameters20;parameters20.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"boolean\",$t.Name=\"Predicate\",$t.Description=\"Boolean expression used as predicate\",$t));parameters20.add(($t=new Kusto.Data.IntelliSense.IntelliSenseCommandTipParameter,$t.DataType=\"numeric <\\/b><i>or<\\/i><b> DateTime <\\/b><i>or<\\/i><b> TimeSpan\",$t.Name=\"Column\",$t.Description=\"Column or other scalar funciton to calculate the sum of\",$t));toolTipCommands.add(command21)}}});Bridge.define(\"$AnonymousType$1\",$asm,{$kind:\"anonymous\",ctors:{ctor:function(name,parentTableName,typeCode){this.Name=name;this.ParentTableName=parentTableName;this.TypeCode=typeCode}},methods:{equals:function(o){return Bridge.is(o,$asm.$AnonymousType$1)?Bridge.equals(this.Name,o.Name)&&Bridge.equals(this.ParentTableName,o.ParentTableName)&&Bridge.equals(this.TypeCode,o.TypeCode):!1},getHashCode:function(){return Bridge.addHash([7550196186,this.Name,this.ParentTableName,this.TypeCode])},toJSON:function(){return{Name:this.Name,ParentTableName:this.ParentTableName,TypeCode:this.TypeCode}}},statics:{methods:{$metadata:function(){return{m:[{a:2,n:\"Name\",t:16,rt:System.String,g:{a:2,n:\"get_Name\",t:8,rt:System.String,fg:\"Name\"},fn:\"Name\"},{a:2,n:\"ParentTableName\",t:16,rt:System.String,g:{a:2,n:\"get_ParentTableName\",t:8,rt:System.String,fg:\"ParentTableName\"},fn:\"ParentTableName\"},{a:2,n:\"TypeCode\",t:16,rt:Kusto.Data.IntelliSense.EntityDataType,g:{a:2,n:\"get_TypeCode\",t:8,rt:Kusto.Data.IntelliSense.EntityDataType,fg:\"TypeCode\",box:function($v){return Bridge.box($v,Kusto.Data.IntelliSense.EntityDataType,System.Enum.toStringFn(Kusto.Data.IntelliSense.EntityDataType))}},fn:\"TypeCode\"}]}}}}});Bridge.ns(\"Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider\",$asm.$);Bridge.apply($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider,{f1:function(f){return\"-\"+(f||\"\")},f2:function(_o1){return _o1.add(\"series_stats\",System.Array.init([\"min\",\"min_idx\",\"max\",\"max_idx\",\"avg\",\"stdev\",\"variance\"],System.String)),_o1.add(\"series_fit_line\",System.Array.init([\"rsquare\",\"slope\",\"variance\",\"rvariance\",\"interception\",\"line_fit\"],System.String)),_o1.add(\"series_fit_2lines\",System.Array.init([\"rsquare\",\"split_idx\",\"variance\",\"rvariance\",\"line_fit\",\"right_rsquare\",\"right_slope\",\"right_interception\",\"right_variance\",\"right_rvariance\",\"left_rsquare\",\"left_slope\",\"left_interception\",\"left_variance\",\"left_rvariance\"],System.String)),_o1.add(\"series_periods_detect\",System.Array.init([\"periods\",\"scores\"],System.String)),_o1.add(\"series_periods_validate\",System.Array.init([\"periods\",\"scores\"],System.String)),_o1},f3:function(func){return func},f4:function(func){return Kusto.Data.IntelliSense.ApplyPolicy.AppendSpaceStepBackPolicy},f5:function(_o9){return _o9.add(\"filter\"),_o9.add(\"where\"),_o9},f6:function(_o10){return _o10.add(\"project\"),_o10},f7:function(_o11){return _o11.add(\"project-away\"),_o11},f8:function(_o12){return _o12.add(\"project-rename\"),_o12},f9:function(_o13){return _o13.add(\"project\"),_o13.add(\"extend\"),_o13},f10:function(_o14){return _o14.add(\"join\"),_o14},f11:function(_o15){return _o15.add(\"top\"),_o15.add(\"top-hitters\"),_o15.add(\"order\"),_o15.add(\"sort\"),_o15.add(\"reduce\"),_o15.add(\"top-nested\"),_o15},f12:function(_o16){return _o16.add(\"top\"),_o16.add(\"top-hitters\"),_o16.add(\"order\"),_o16.add(\"sort\"),_o16.add(\"reduce\"),_o16.add(\"top-nested\"),_o16.add(\"render\"),_o16},f13:function(_o17){return _o17.add(\"top\"),_o17.add(\"order\"),_o17.add(\"sort\"),_o17},f14:function(_o18){return _o18.add(\"top\"),_o18.add(\"top-hitters\"),_o18.add(\"order\"),_o18.add(\"sort\"),_o18.add(\"top-nested\"),_o18},f15:function(_o19){return _o19.add(\"reduce\"),_o19},f16:function(_o20){return _o20.add(\"parse\"),_o20},f17:function(_o21){return _o21.add(\"render\"),_o21},f18:function(_o22){return _o22.add(\"top\"),_o22.add(\"limit\"),_o22.add(\"take\"),_o22.add(\"top-nested\"),_o22.add(\"top-hitters\"),_o22.add(\"sample\"),_o22.add(\"sample-distinct\"),_o22},f19:function(_o23){return _o23.add(\"evaluate\"),_o23},f20:function(_o24){return _o24.add(\"summarize\"),_o24},f21:function(_o25){return _o25.add(\"distinct\"),_o25},f22:function(_o26){return _o26.add(\"top-nested\"),_o26},f23:function(_o27){return _o27.add(\"top-hitters\"),_o27},f24:function(_o28){return _o28.add(\"sample-distinct\"),_o28},f25:function(_o29){return _o29.add(\"top-nested\"),_o29.add(\"top-hitters\"),_o29.add(\"summarize\"),_o29.add(\"distinct\"),_o29},f26:function(_o30){return _o30.add(\"database\"),_o30},f27:function(_o31){return _o31.add(\"find\"),_o31},f28:function(_o32){return _o32.add(\"search\"),_o32},f29:function(_o33){return _o33.add(\"make-series\"),_o33},f30:function(_o34){return _o34.add(\"cnt\",\"count\"),_o34.add(\"percentiles\",\"percentile\"),_o34.add(\"percentilew\",\"percentile\"),_o34.add(\"percentilesw\",\"percentile\"),_o34.add(\"makelist\",\"list\"),_o34.add(\"makeset\",\"set\"),_o34.add(\"make_list\",\"list\"),_o34.add(\"make_set\",\"set\"),_o34.add(\"make_dictionary\",\"dictionary\"),_o34.add(\"make_bag\",\"bag\"),_o34},f31:function(_o35){return _o35.add(\"join\"),_o35.add(\"project\"),_o35.add(\"summarize\"),_o35.add(\"reduce\"),_o35.add(\"getschema\"),_o35.add(\"distinct\"),_o35},f32:function(_o36){return _o36.add(\"join\",{Item1:Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_commandContext_Join,Item2:null}),_o36.add(\".show\",{Item1:Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_commandContext_Show,Item2:Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_showCommandFixRegex}),_o36.add(\"range\",{Item1:Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_commandContext_Range,Item2:null}),_o36.add(\"toscalar\",{Item1:Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_commandContext_ToScalar,Item2:null}),_o36.add(\"{\",{Item1:Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_commandContext_Callable,Item2:null}),_o36.add(\"let\",{Item1:Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_commandContext_Let,Item2:null}),_o36.add(\"union\",{Item1:Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_commandContext_Union,Item2:null}),_o36.add(\"find\",{Item1:Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_commandContext_Find,Item2:null}),_o36.add(\"search\",{Item1:Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_commandContext_Search,Item2:null}),_o36.add(\"#connect\",{Item1:Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_commandContext_ConnectDirective,Item2:null}),_o36},f33:function(s){return s},f34:function(s){return System.Text.RegularExpressions.Regex.escape(s)},f35:function(_o37){return _o37.add(new System.Text.RegularExpressions.Regex.ctor(\"\\\\blet\\\\s+(?<LetExpressionName>\\\\w+)\\\\s*=.*?\\\\{(?<Expression>.+?)\\\\}\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions)),_o37.add(new System.Text.RegularExpressions.Regex.ctor(\"\\\\blet\\\\s+(?<LetExpressionName>\\\\w+)\\\\s*=\\\\s*(?<Expression>.+?);\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions)),_o37},f36:function(c){return c.Name},f37:function(c){return c},f38:function(m){return(m.getGroups().get(1).getValue()||\"\")+\" \"+(m.getGroups().get(3).getValue()||\"\")},f39:function(_o2){return _o2.add(\"kind=\",Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy),_o2.add(\"(\",Kusto.Data.IntelliSense.ApplyPolicy.AppendJoinClauseWithoutOpenningBracketPolicy),_o2},f40:function(_o3){var $t;return _o3.add(\"timechart\",($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=\" with 'cats' \",$t)),_o3.add(\"barchart\",($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=\" with 'dogs' \",$t)),_o3},f41:function(_o4){var $t;return _o4.add(\"autocluster\",($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=\"()\",$t.OffsetToken=\")\",$t.OffsetPosition=0,$t)),_o4.add(\"diffpatterns\",($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text='(\"split= \")',$t.OffsetToken=\"=\",$t.OffsetPosition=2,$t)),_o4.add(\"basket\",($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=\"()\",$t.OffsetToken=\")\",$t.OffsetPosition=0,$t)),_o4.add(\"extractcolumns\",($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=\"()\",$t.OffsetToken=\")\",$t.OffsetPosition=0,$t)),_o4},f42:function(_o5){return _o5.add(\"where\",Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy),_o5.add(\"in\",Kusto.Data.IntelliSense.ApplyPolicy.AppendFindInClausePolicy),_o5},f43:function(_o6){return _o6.add(\"(\",Kusto.Data.IntelliSense.ApplyPolicy.AppendFindInClauseWithoutOpenningBracketPolicy),_o6},f44:function(_o7){var $t;return _o7.add(\")\",($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=\" where \",$t)),_o7.add(\",\",Kusto.Data.IntelliSense.ApplyPolicy.AppendFindInClauseWithoutOpenningBracketPolicy),_o7},f45:function(_o8){return _o8.add('\"\"',Kusto.Data.IntelliSense.ApplyPolicy.AppendSpaceStepBackPolicy),_o8.add(\"kind=\",Kusto.Data.IntelliSense.ApplyPolicy.NullApplyPolicy),_o8.add(\"in\",Kusto.Data.IntelliSense.ApplyPolicy.AppendSearchInClausePolicy),_o8},f46:function(kvp){return kvp.value},f47:function(f){return f.toLowerCase()},f48:function(vals){return vals},f49:function(t){return t.Name},f50:function(t){return t.value},f51:function(db){return db.Tables},f52:function(t){return System.Linq.Enumerable.from(t.Columns,Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity).select($asm.$.Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.f36)},f53:function(n){return\"'\"+(n||\"\")+\"'\"},f54:function(c){return\"'\"+(c||\"\")+\"'\"},f55:function(db){return\"'\"+(db.Name||\"\")+\"'\"},f56:function(t){return!t.IsInvisible},f57:function(n){return n},f58:function(f){return f.CallName},f59:function(f){return Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy},f60:function(p){return(p.Name||\"\")+\"()\"},f61:function(p){return p},f62:function(f){return f.Name},f63:function(f){return{Item1:Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_removeCommentsRegex.replace(f.Expression,\"\"),Item2:new System.Text.RegularExpressions.Regex.ctor(\"\\\\b\"+(f.Name||\"\")+\"\\\\b\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.DefaultRegexOptions)}},f64:function(c){return\"cluster('\"+(c||\"\")+\"')\"},f65:function(t){return System.Linq.Enumerable.from(t.Columns,Kusto.Data.IntelliSense.KustoIntelliSenseColumnEntity).select(function(c){return new $asm.$AnonymousType$1(c.Name,t.Name,c.TypeCode)})},f66:function(c){return c.TypeCode===Kusto.Data.IntelliSense.EntityDataType.String},f67:function(e){return Kusto.Data.IntelliSense.ContextualTokensWithRegexIntelliSenseRule.GetHashStringForContextAndToken(e.ParentTableName,e.Name)},f68:function(t){return Kusto.Data.IntelliSense.ContextualTokensWithRegexIntelliSenseRule.GetHashStringForContextAndToken(t.Name,\"*\")},f69:function(_o1){return _o1.add(\"in\",Kusto.Data.IntelliSense.ApplyPolicy.AppendStringLiteralArrayPolicy),_o1.add(\"!in\",Kusto.Data.IntelliSense.ApplyPolicy.AppendStringLiteralArrayPolicy),_o1},f70:function(c){return c.TypeCode!==Kusto.Data.IntelliSense.EntityDataType.String},f71:function(c){return c.TypeCode===Kusto.Data.IntelliSense.EntityDataType.DateTime}});Bridge.define(\"Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider\",{inherits:[Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase],statics:{fields:{s_dmRuleKinds:null,s_ingestionQueueTypes:null,s_clearIngestionSupportedQueuesTypes:null,s_lineWithDotBeginningRegex:null,s_showCommandRegex:null,s_showClusterCommandRegex:null,s_showClusterSettingsCommandRegex:null,s_showClusterSettingsVersionsCommandRegex:null,s_showClusterSettingsWithEncryptedSecretsCommandRegex:null,s_showPrincipalRolesCommandRegex:null,s_alterCommandRegex:null,s_alterClusterSettingsCommandRegex:null,s_alterClusterSettingsFromCommandRegex:null,s_alterMergeCommandRegex:null,s_alterObtainerQueuesCommandRegex:null,s_addOrAlterlterEventHubIngestionSourceCommandRegex:null,s_createCommandRegex:null,s_dropCommandRegex:null,s_addCommandRegex:null,s_addOrAlterCommandRegex:null,s_addDataObtainerCommandRegex:null,s_addDataObtainerInitializeCommandRegex:null,s_addDataObtainerInitializeWithCommandRegex:null,s_getCommandRegex:null,s_getIngestionQueuesCommandRegex:null,s_getIngestionQueuesTypeCommandRegex:null,s_flushCommandRegex:null,s_initializeCommandRegex:null,s_initializeClusterConfigCommandRegex:null,s_initializeClusterConfigEncryptionCommandRegex:null,s_resetCommandRegex:null,s_setCommandRegex:null,s_showPurgesCommandRegex:null,s_showPurgesFromCommandRegex:null,s_showPurgesToCommandRegex:null,s_purgeTableCommandRegex:null,s_purgeMaterializedViewTableCommandRegex:null,s_purgeTableInDatabaseCommandRegex:null,s_purgeTableRecordsInDatabaseCommandRegex:null,s_purgeRetryCommandRegex:null,s_purgesFromRetryCommandRegex:null,s_purgesToRetryCommandRegex:null,s_cancelPurgeCommandRegex:null,s_cancelAllPurgeCommandRegex:null,s_refeshPolicyCacheRegex:null,s_clearCommandRegex:null,s_clearIngestionQueuesCommandRegex:null,s_adminOperationOptions:null,s_showCommandOptions:null,s_showClustersKeywordOptions:null,s_showClusterSettingsKeywordOptions:null,s_showClusterSettingsVersionsKeywordOptions:null,s_showClusterSettingsWithEncryptedSecretsOption:null,s_showPrincipalRolesKeywordOptions:null,s_alterClusterSettingsFromKeywordOptions:null,s_alterCommandOptions:null,s_createCommandOptions:null,s_dropCommandOptions:null,s_addCommandOptions:null,s_addOrAlterCommandOptions:null,s_addDataObtainerCommandOptions:null,s_addDataObtainerInitializeCommandOptions:null,s_addDataObtainerInitializeWithCommandOptions:null,s_getCommandOptions:null,s_getIngestionQueuesCommandOptions:null,s_getIngestionQueuesTypeCommandOptions:null,s_flushCommandOptions:null,s_initializeCommandOptions:null,s_initializeClusterConfigurationCommandOptions:null,s_initializeClusterConfigurationEncryptionCommandOptions:null,s_resetCommandOptions:null,s_setCommandOptions:null,s_alterObtainerQueuesOptions:null,s_addOrAlterEventHubIngestionSourceOptions:null,s_showPurgeCommandOptions:null,s_purgeFromCommandOptions:null,s_showPurgeToCommandOptions:null,s_purgeTableCommandOptions:null,s_purgeMaterializedViewTableCommandOptions:null,s_purgeTableInDatabaseCommandOptions:null,s_purgeTableRecordsInDatabaseCommandOptions:null,s_purgeRetryCommandOptions:null,s_purgeFromRetryCommandOptions:null,s_purgeToRetryCommandOptions:null,s_showPurgeCancelCommandOptions:null,s_showPurgeCancelAllCommandsOptions:null,s_refeshPolicyCacheOptions:null,s_clearCommandOptions:null},ctors:{init:function(){this.s_dmRuleKinds=System.Enum.getNames(Kusto.Data.DmSettingsType);this.s_ingestionQueueTypes=System.Linq.Enumerable.from(System.Enum.getNames(Kusto.Data.IngestionQueueType),System.String).select($asm.$.Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.f1).ToArray(System.String);this.s_clearIngestionSupportedQueuesTypes=System.Linq.Enumerable.from($asm.$.Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.f2(new(System.Collections.Generic.List$1(Kusto.Data.IngestionQueueType).ctor)),Kusto.Data.IngestionQueueType).select($asm.$.Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.f3).ToArray(System.String);this.s_lineWithDotBeginningRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showClusterCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+cluster\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showClusterSettingsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+cluster\\\\s+settings\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showClusterSettingsVersionsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+cluster\\\\s+settings\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showClusterSettingsWithEncryptedSecretsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+cluster\\\\s+settings\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showPrincipalRolesCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+principal\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.alter\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterClusterSettingsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.alter\\\\s+cluster\\\\s+settings\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterClusterSettingsFromCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.alter\\\\s+cluster\\\\s+settings\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterMergeCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.alter-merge\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterObtainerQueuesCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.(alter|alter-merge|drop)\\\\s+obtainer\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_addOrAlterlterEventHubIngestionSourceCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.add-or-alter\\\\s+eventhub\\\\s+ingestion\\\\s+source\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_createCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.create\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_dropCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.drop\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_addCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.add\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_addOrAlterCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.add-or-alter\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_addDataObtainerCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.add\\\\s+data\\\\s+obtainer\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_addDataObtainerInitializeCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.add\\\\s+data\\\\s+obtainer\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+initialize\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_addDataObtainerInitializeWithCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.add\\\\s+data\\\\s+obtainer\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+initialize\\\\s+with\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_getCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.get\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_getIngestionQueuesCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.(get|show)\\\\s+ingestion\\\\s+queues\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_getIngestionQueuesTypeCommandRegex=new System.Text.RegularExpressions.Regex.ctor('^\\\\s*\\\\.(get|show)\\\\s+ingestion\\\\s+queues\\\\s+\"(.*?)\"\\\\s+$',Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_flushCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.flush\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_initializeCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.initialize\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_initializeClusterConfigCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.initialize\\\\s+cluster\\\\s+configuration\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_initializeClusterConfigEncryptionCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.initialize\\\\s+cluster\\\\s+configuration\\\\s+\\\\S+\\\\s+encryption\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_resetCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.reset\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showPurgesCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+purges\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showPurgesFromCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+purges\\\\s+from\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showPurgesToCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+purges\\\\s+from\\\\s+\\\\S+\\\\s+to\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_purgeTableCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.purge\\\\s+table\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_purgeMaterializedViewTableCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.purge\\\\s+materialized-view\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_purgeTableInDatabaseCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.purge\\\\s+table\\\\s+\\\\S+\\\\s+in\\\\s+database\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_purgeTableRecordsInDatabaseCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.purge\\\\s+(table|materialized-view)\\\\s+\\\\S+\\\\s+records\\\\s+in\\\\s+database\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_purgeRetryCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.retry\\\\s+purges\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_purgesFromRetryCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.retry\\\\s+purges\\\\s+from\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_purgesToRetryCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.retry\\\\s+purges\\\\s+from\\\\s+\\\\S+\\\\s+to\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_cancelPurgeCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.cancel\\\\s+purge\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_cancelAllPurgeCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.cancel\\\\s+all\\\\s+purges\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_refeshPolicyCacheRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.refresh\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_clearCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.clear\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_clearIngestionQueuesCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.clear\\\\s+ingestion\\\\s+queues\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_adminOperationOptions=System.Array.init([\"show\",\"get\",\"alter\",\"alter-merge\",\"add\",\"add-or-alter\",\"create\",\"drop\",\"flush\",\"initialize\",\"reset\",\"set\",\"purge table\",\"purge materialized-view\",\"retry purge\",\"retry purges\",\"cancel purge\",\"cancel all purges\",\"refresh\",\"clear\"],System.String);this.s_showCommandOptions=System.Array.init([\"version\",\"diagnostics\",\"cluster\",\"query service uri\",\"lagging queues\",\"ingestion queues\",\"ingestion source types\",\"ingestion resources\",\"ingestions status tables\",\"Geneva ingestion sources settings\",\"EventHub ingestion sources settings\",\"EventGrid ingestion sources settings\",\"principal\",\"purges\"],System.String);this.s_showClustersKeywordOptions=System.Array.init([\"principals\",\"settings\",\"monitoring\"],System.String);this.s_showClusterSettingsKeywordOptions=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_dmRuleKinds;this.s_showClusterSettingsVersionsKeywordOptions=System.Array.init([\"version\",\"versions\"],System.String);this.s_showClusterSettingsWithEncryptedSecretsOption=System.Array.init([\"with encrypted secrets\"],System.String);this.s_showPrincipalRolesKeywordOptions=System.Array.init([\"roles\",\"@'principal' roles\"],System.String);this.s_alterClusterSettingsFromKeywordOptions=System.Array.init([\"from\"],System.String);this.s_alterCommandOptions=System.Array.init([\"cluster settings\",\"aggregator storage accounts\",\"obtainer\",\"obtainers\",\"Geneva ingestion source\"],System.String);this.s_createCommandOptions=System.Array.init([\"tempstorage\",\"ingestions status table\"],System.String);this.s_dropCommandOptions=System.Array.init([\"cluster admins\",\"cluster users\",\"cluster ingestors\",\"obtainer\",\"aggregator storage accounts\",\"obtainers\",\"Geneva ingestion source\"],System.String);this.s_addCommandOptions=System.Array.init([\"ingestion interval for\",\"data obtainer\",\"cluster admins\",\"cluster users\"],System.String);this.s_addOrAlterCommandOptions=System.Array.init([\"eventhub ingestion source\"],System.String);this.s_addDataObtainerCommandOptions=System.Array.init([\"initialize\"],System.String);this.s_addDataObtainerInitializeCommandOptions=System.Array.init([\"with\"],System.String);this.s_addDataObtainerInitializeWithCommandOptions=System.Array.init([\"encryption certificate\"],System.String);this.s_getCommandOptions=System.Array.init([\"lagging queues\",\"ingestion queues\",\"source containers\",\"ingestion resources\",\"ingestions status tables\"],System.String);this.s_getIngestionQueuesCommandOptions=System.Linq.Enumerable.from(System.Array.init([\"lengths\",\"withsas\"],System.String),System.String).concat(Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_ingestionQueueTypes).ToArray(System.String);this.s_getIngestionQueuesTypeCommandOptions=System.Array.init([\"withsas\",\"withencryptedkeys\"],System.String);this.s_flushCommandOptions=System.Array.init([\"configuration\"],System.String);this.s_initializeCommandOptions=System.Array.init([\"cluster configuration\"],System.String);this.s_initializeClusterConfigurationCommandOptions=System.Array.init([\"encryption\"],System.String);this.s_initializeClusterConfigurationEncryptionCommandOptions=System.Array.init([\"certificate\"],System.String);this.s_resetCommandOptions=System.Array.init([\"cluster configuration\"],System.String);this.s_setCommandOptions=System.Array.init([\"cluster as secondary\"],System.String);this.s_alterObtainerQueuesOptions=System.Array.init([System.Enum.toString(Kusto.Data.IngestionQueueType,Kusto.Data.IngestionQueueType.InternalQueue),System.Enum.toString(Kusto.Data.IngestionQueueType,Kusto.Data.IngestionQueueType.InputQueue)],System.String);this.s_addOrAlterEventHubIngestionSourceOptions=System.Array.init([\"settings with (Configuration='', EncryptionCertificateThumbprint='')\"],System.String);this.s_showPurgeCommandOptions=System.Array.init([\"from\",\"<OperationId>\",\"in database <DatabaseName>\"],System.String);this.s_purgeFromCommandOptions=System.Array.init([\"to\",\"in database <DatabaseName>\"],System.String);this.s_showPurgeToCommandOptions=System.Array.init([\"in database <DatabaseName>\"],System.String);this.s_purgeTableCommandOptions=System.Array.init([\"in database\",\"records in database\"],System.String);this.s_purgeMaterializedViewTableCommandOptions=System.Array.init([\"records in database\"],System.String);this.s_purgeTableInDatabaseCommandOptions=System.Array.init([\"allrecords\"],System.String);this.s_purgeTableRecordsInDatabaseCommandOptions=System.Array.init([\"<| where\"],System.String);this.s_purgeRetryCommandOptions=System.Array.init([\"from\",\"dryrun\"],System.String);this.s_purgeFromRetryCommandOptions=System.Array.init([\"to\",\"dryrun\"],System.String);this.s_purgeToRetryCommandOptions=System.Array.init([\"dryrun\"],System.String);this.s_showPurgeCancelCommandOptions=System.Array.init([\"<OperationId>\"],System.String);this.s_showPurgeCancelAllCommandsOptions=System.Array.init([\"in database\"],System.String);this.s_refeshPolicyCacheOptions=System.Array.init([\"policy cache\"],System.String);this.s_clearCommandOptions=System.Array.init([\"ingestion queues\"],System.String)}}},ctors:{ctor:function(connectionContext){connectionContext===void 0&&(connectionContext=null);var $t;this.$initialize();Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.ctor.call(this);this.Locker;(this.CommandRules==null||this.GeneralRules==null)&&this.LoadRulesUnderLock();this.CommandToolTips==null&&this.LoadCommandToolTips();this.ContextConnection=($t=connectionContext,$t!=null?$t:\"\")}},methods:{LoadRulesUnderLock:function(){var $t,$t1;this.CommandRules=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseRule).ctor);this.GeneralRules=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseRule).ctor);this.QueryParametersRules=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseRule).ctor);this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldAdminCommandsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_lineWithDotBeginningRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_adminOperationOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldShowCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldShowClustersKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showClusterCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showClustersKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldShowClustersSettingsKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showClusterSettingsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showClusterSettingsKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldShowClustersSettingsVersionKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showClusterSettingsVersionsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showClusterSettingsVersionsKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldShowClustersSettingsVersionKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showClusterSettingsWithEncryptedSecretsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showClusterSettingsWithEncryptedSecretsOption),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldShowPrincipalRolesCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showPrincipalRolesCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showPrincipalRolesKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldAlterCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_alterCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_alterCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldAlterMergeCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_alterMergeCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_alterCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldAlterObtainerQueuesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_alterObtainerQueuesCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_alterObtainerQueuesOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldAddOrAlterEventHubIngestionSourceSettingsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_addOrAlterlterEventHubIngestionSourceCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_addOrAlterEventHubIngestionSourceOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldAlterClustersSettingsKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_alterClusterSettingsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showClusterSettingsKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldAlterClustersSettingsFromKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_alterClusterSettingsFromCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_alterClusterSettingsFromKeywordOptions),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=\" @''\",$t1),$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldCreateCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_createCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_createCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldDropCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_dropCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_dropCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldAddCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_addCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_addCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldAddOrAlterCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_addOrAlterCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_addOrAlterCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldAddDataObtainerKeyworkOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_addDataObtainerCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_addDataObtainerCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldAddDataObtainerInitializeKeyworkOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_addDataObtainerInitializeCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_addDataObtainerInitializeCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldAddDataObtainerInitializeWithKeyworkOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_addDataObtainerInitializeWithCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_addDataObtainerInitializeWithCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldGetCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_getCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_getCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldGetIngestionQueuesCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_getIngestionQueuesCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_getIngestionQueuesCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldGetIngestionQueuesTypeCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_getIngestionQueuesTypeCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_getIngestionQueuesTypeCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldFlushCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_flushCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_flushCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldInitializeCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_initializeCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_initializeCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldInitializeClusterConfigCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_initializeClusterConfigCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_initializeClusterConfigurationCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldInitializeClusterConfigEncryptionCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_initializeClusterConfigEncryptionCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_initializeClusterConfigurationEncryptionCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldResetCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_resetCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_resetCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldSetCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_setCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_setCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldPurgeShowCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showPurgesCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showPurgeCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldPurgeShowCommandFromKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showPurgesFromCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_purgeFromCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldPurgeShowCommandToKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showPurgesToCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showPurgeToCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldPurgeTableCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_purgeTableCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_purgeTableCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldPurgeMaterializedViewTableCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_purgeMaterializedViewTableCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_purgeMaterializedViewTableCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldPurgeTableInDatabaseCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_purgeTableInDatabaseCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_purgeTableInDatabaseCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldPurgeTableRecordsInDatabaseCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_purgeTableRecordsInDatabaseCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_purgeTableRecordsInDatabaseCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldPurgeRetryCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_purgeRetryCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_purgeRetryCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldPurgeShowCommandFromKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_purgesFromRetryCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_purgeFromRetryCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldPurgeRetryCommandToKeywordOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_purgesToRetryCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_purgeToRetryCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldPurgeCancelCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_cancelPurgeCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showPurgeCancelCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldPurgeCancelAllCommandsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_cancelAllPurgeCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_showPurgeCancelAllCommandsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.RefreshPolicyCacheCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_refeshPolicyCacheRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_refeshPolicyCacheOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldClearCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_clearCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_clearCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.DMRuleKind.YieldClearIngestionQueuesCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_clearIngestionQueuesCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider.s_clearIngestionSupportedQueuesTypes),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t))},AnalyzeCommand$1:function(statement,cachedReference){var $t;return $t=new Kusto.Data.IntelliSense.AnalyzedCommand,$t.Command=statement,$t.Context=Kusto.Data.IntelliSense.KustoCommandContext.Empty,$t},AnalyzeCommand:function(command,appendingPart){var $t;return $t=new Kusto.Data.IntelliSense.AnalyzedCommand,$t.Command=(command.Command||\"\")+(appendingPart||\"\"),$t.Context=Kusto.Data.IntelliSense.KustoCommandContext.Empty,$t},ResetState:function(){},LoadCommandToolTips:function(){this.CommandToolTips=new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.IntelliSenseCommandTip).ctor)},UpdateProviderAvailableEntities:function(command,commandContext){}}});Bridge.ns(\"Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider\",$asm.$);Bridge.apply($asm.$.Kusto.Data.IntelliSense.DataManagerIntelliSenseRulesProvider,{f1:function(a){return'\"'+(a||\"\")+'\"'},f2:function(_o1){return _o1.add(Kusto.Data.IngestionQueueType.AggregatedReadyForImportQueue),_o1.add(Kusto.Data.IngestionQueueType.ReadyForAggregationQueue),_o1.add(Kusto.Data.IngestionQueueType.SecuredReadyForAggregationQueue),_o1.add(Kusto.Data.IngestionQueueType.All),_o1},f3:function(a){return'\"'+(System.Enum.toString(Kusto.Data.IngestionQueueType,a)||\"\")+'\"'}});Bridge.define(\"Kusto.Data.IntelliSense.RegexIntelliSenseRule\",{inherits:[Kusto.Data.IntelliSense.IntelliSenseRule],props:{MatchingRegex:null,Options:null,AdditionalOptions:null,RequiresFullCommand:{get:function(){return!1}},IsContextual:{get:function(){return!1}}},methods:{IsMatch:function(context,input){var isMatch=this.MatchingRegex.isMatch(input);return isMatch?!0:!1},GetOptions:function(context){var result=this.Options.Values;return Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(Kusto.Data.IntelliSense.CompletionOptionCollection,this.AdditionalOptions)?result:System.Linq.Enumerable.from(result,System.String).union(System.Linq.Enumerable.from(this.AdditionalOptions,Kusto.Data.IntelliSense.CompletionOptionCollection).selectMany($asm.$.Kusto.Data.IntelliSense.RegexIntelliSenseRule.f1))},GetCompletionOptions:function(context){var sortedCollections;return Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(Kusto.Data.IntelliSense.CompletionOptionCollection,this.AdditionalOptions)?this.Options.GetCompletionOptions():(sortedCollections=System.Linq.Enumerable.from(Bridge.fn.bind(this,$asm.$.Kusto.Data.IntelliSense.RegexIntelliSenseRule.f2)(new(System.Collections.Generic.List$1(Kusto.Data.IntelliSense.CompletionOptionCollection).ctor)),Kusto.Data.IntelliSense.CompletionOptionCollection).concat(this.AdditionalOptions).orderByDescending($asm.$.Kusto.Data.IntelliSense.RegexIntelliSenseRule.f3),sortedCollections.selectMany($asm.$.Kusto.Data.IntelliSense.RegexIntelliSenseRule.f4))}}});Bridge.ns(\"Kusto.Data.IntelliSense.RegexIntelliSenseRule\",$asm.$);Bridge.apply($asm.$.Kusto.Data.IntelliSense.RegexIntelliSenseRule,{f1:function(o){return o.Values},f2:function(_o1){return _o1.add(this.Options),_o1},f3:function(o){return o.Priority},f4:function(c){return c.GetCompletionOptions()}});Bridge.define(\"Kusto.UT.IntelliSenseRulesTests.RemoteSchemaResolverMock\",{inherits:[Kusto.Data.IntelliSense.IKustoIntelliSenseSchemaResolver],$kind:\"nested class\",fields:{s_dbMap:null,s_clusterDatabasesMap:null},alias:[\"ResolveDatabaseNames\",\"Kusto$Data$IntelliSense$IKustoIntelliSenseSchemaResolver$ResolveDatabaseNames\",\"ResolveDatabaseSchema\",\"Kusto$Data$IntelliSense$IKustoIntelliSenseSchemaResolver$ResolveDatabaseSchema\",\"ResolveDatabaseSchema$1\",\"Kusto$Data$IntelliSense$IKustoIntelliSenseSchemaResolver$ResolveDatabaseSchema$1\"],ctors:{ctor:function(){var $t,dbSchema,context,key;this.$initialize();this.s_dbMap=new(System.Collections.Generic.Dictionary$2(System.String,Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity).ctor);this.s_clusterDatabasesMap=new(System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.String)).ctor);dbSchema=Kusto.UT.IntelliSenseRulesTests.GenerateKustoEntities(null,null);$t=Bridge.getEnumerator(System.Array.init([{Item1:\"\",Item2:\"db1\"},{Item1:\"other\",Item2:\"db2\"}],System.Tuple$2(System.String,System.String)));try{while($t.moveNext())context=$t.Current,key=(context.Item1||\"\")+\":\"+(context.Item2||\"\"),this.s_dbMap.setItem(key,System.Linq.Enumerable.from(dbSchema.Databases,Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity).first()),this.s_clusterDatabasesMap.containsKey(context.Item1)||this.s_clusterDatabasesMap.setItem(context.Item1,new(System.Collections.Generic.List$1(System.String).ctor)),this.s_clusterDatabasesMap.getItem(context.Item1).add(context.Item2)}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$Dispose()}}},methods:{ResolveDatabaseNames:function(clusterUriOrAlias){var result={};return this.s_clusterDatabasesMap.tryGetValue(clusterUriOrAlias,result),result.v},ResolveDatabaseSchema:function(clusterUriOrAlias,databaseNameOrAlias){var key=(clusterUriOrAlias||\"\")+\":\"+(databaseNameOrAlias||\"\");return this.s_dbMap.containsKey(key)?this.s_dbMap.getItem(key):null},ResolveDatabaseSchema$1:function(clusterUriOrAlias,databaseNameOrAlias,tableName){var key=(clusterUriOrAlias||\"\")+\":\"+(databaseNameOrAlias||\"\"),databases=System.Linq.Enumerable.from(this.s_dbMap,System.Collections.Generic.KeyValuePair$2(System.String,Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity)).where(function(db){return System.String.startsWith(db.key,(clusterUriOrAlias||\"\")+\":\")}),keyMatcher,dbMatcher,tableMatcher,result;return(Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(System.Collections.Generic.KeyValuePair$2(System.String,Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity),databases)&&(Kusto.Cloud.Platform.Utils.ExtendedRegex.IsWildCardPattern(databaseNameOrAlias)?(keyMatcher=Kusto.Cloud.Platform.Utils.ExtendedRegex.TryTransformWildCardPatternToRegex(key),dbMatcher=Kusto.Cloud.Platform.Utils.ExtendedRegex.TryTransformWildCardPatternToRegex(databaseNameOrAlias),dbMatcher!=null&&(databases=databases.where(function(db){return keyMatcher.isMatch(db.key)||dbMatcher.isMatch(db.value.Name)||dbMatcher.isMatch(db.value.Alias)}))):databases=databases.where(function(db){return System.String.equals(key,db.key,5)||System.String.equals(databaseNameOrAlias,db.value.Name,5)||System.String.equals(databaseNameOrAlias,db.value.Alias,5)})),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(System.Collections.Generic.KeyValuePair$2(System.String,Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity),databases))?null:(tableMatcher=null,System.String.isNullOrEmpty(tableName)||Kusto.Cloud.Platform.Utils.ExtendedRegex.IsWildCardPattern(tableName)&&(tableMatcher=Kusto.Cloud.Platform.Utils.ExtendedRegex.TryTransformWildCardPatternToRegex(tableName)),result=databases.select(function(db){var filteredDb=new Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity;return filteredDb.Name=db.value.Name,filteredDb.Alias=db.value.Alias,filteredDb.Tables=System.Linq.Enumerable.from(db.value.Tables,Kusto.Data.IntelliSense.KustoIntelliSenseTableEntity).where(function(t){return System.String.isNullOrEmpty(tableName)||tableMatcher==null&&Bridge.referenceEquals(tableName,t.Name)||tableMatcher!=null&&tableMatcher.isMatch(t.Name)}),filteredDb.Functions=db.value.Functions,filteredDb.IsInitialized=db.value.IsInitialized,filteredDb}),Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastNone$2(Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity,result))?null:result}}});Bridge.define(\"Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider\",{inherits:[Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider],statics:{fields:{s_showCommandRegex:null,s_setCommandRegex:null,s_addCommandRegex:null,s_alterCommandRegex:null,s_alterMergeCommandRegex:null,s_deleteCommandRegex:null,s_createCommandRegex:null,s_dropCommandRegex:null,s_moveCommandRegex:null,s_attachCommandRegex:null,s_replaceCommandRegex:null,s_ingestionDuplicationCommandRegex:null,s_createOrAlterCommandRegex:null,s_purgeCommandRegex:null,s_purgeCleanupCommandRegex:null,s_runCommandRegex:null,s_suspendCommandRegex:null,s_createDatabaseCommandRegex:null,s_createDatabaseCommandEndingRegex:null,s_showDatabaseCommandRegex:null,s_showBasicAuthCommandRegex:null,s_showDatabasePrincipalsCommandRegex:null,s_showDatabasesCommandRegex:null,s_showClusterCommandRegex:null,s_showPrincipalCommandRegex:null,s_showFabricCommandRegex:null,s_suspendFabricNodeCommandRegex:null,s_suspendFabricNodeCommandWithDurationRegex:null,s_addClusterAdminsUsersViewersDatabaseCreatorsBlockedPrincipalsCommandRegex:null,s_setClusterAdminsUsersViewersDatabaseCreatorsBlockedPrincipalsCommandRegex:null,s_addClusterBlockedPrincipalsCommandRegex:null,s_setClusterAdminsNoneCommandRegex:null,s_setClusterUsersNoneCommandRegex:null,s_setClusterViewersNoneCommandRegex:null,s_setClusterDatabaseCreatorsNoneCommandRegex:null,s_dropClusterAdminsUsersViewersDatabaseCreatorsCommandRegex:null,s_showTableOptionsCommandRegex:null,s_setDatabaseCommandRegex:null,s_addDatabaseCommandRegex:null,s_dropDatabaseCommandRegex:null,s_anySimpleSyntaxActionTableCommandRegex:null,s_anySimpleSyntaxActionFunctionCommandRegex:null,s_dropExtentTagsCommandRegex:null,s_alterExtentTagsCommandRegex:null,s_attachExtentsCommandRegex:null,s_attachExtentsIntoTableCommandRegex:null,s_attachExtentsIntoSpecifiedTableCommandRegex:null,s_moveExtentsCommandRegex:null,s_moveSpecifiedExtentsCommandRegex:null,s_moveExtentsFromSpecifiedTableCommandRegex:null,s_moveExtentsFromTableCommandRegex:null,s_moveExtentsToTableCommandRegex:null,s_replaceExtentsCommandRegex:null,s_replaceExtentsInTableCommandRegex:null,s_showExtentsInSpecifiedEntityCommandRegex:null,s_showExtentsInSpecifiedEntityWithTagFiltersCommandRegex:null,s_dropExtentTagsFromTableCommandRegex:null,s_setDatabaseAdminsUsersViewersPrettyNameCommandRegex:null,s_addDatabaseAdminsUsersViewersCommandRegex:null,s_dropDatabasePropertyCommandRegex:null,s_setTableAdminsCommandRegex:null,s_addTableAdminsCommandRegex:null,s_createTableEntitiesCommandRegex:null,s_alterTableEntitiesCommandRegex:null,s_alterMergeTableEntitiesCommandRegex:null,s_dropTableEntitiesCommandRegex:null,s_deleteTableEntitiesCommandRegex:null,s_dropTableColumnsSyntaxCommandRegex:null,s_alterFunctionEntitiesCommandRegex:null,s_setDatabaseAdminsNoneCommandRegex:null,s_setDatabaseUsersNoneCommandRegex:null,s_setDatabaseViewersNoneCommandRegex:null,s_setDatabaseIngestorsNoneCommandRegex:null,s_setTableAdminsNoneCommandRegex:null,s_setTableIngestorsNoneCommandRegex:null,s_appendTableCommandRegex:null,s_setOrAppendReplaceTableCommandRegex:null,s_clusterPolicyRegex:null,s_alterDatabaseRegex:null,s_databasePolicyRegex:null,s_tablePolicyRegex:null,s_columnPolicyRegex:null,s_policyCommandOnDatabase:null,s_policyCommand:null,s_alterMultiplePoliciesRegex:null,s_deleteMultiplePoliciesRegex:null,s_exportCommandRegex:null,s_exportCommandWithModifiersToRegex:null,s_exportCommandNoModifiersToRegex:null,s_duplicateIngestionIntoRegex:null,s_purgeWhatIfRegex:null,s_purgeWithPropertiesRegex:null,s_purgeTableRegex:null,s_purgeSpecifiedTableRegex:null,s_alterMergePolicyRetentionRegex:null,s_alterMergePolicyRetentionSoftDeleteDefinedRegex:null,s_alterMergePolicyRetentionOptionsRegex:null,s_createRowstoreCommandRegex:null,s_createRowstoreCommandEndingRegex:null,s_adminOperationOptions:null,s_showCommandOptions:null,s_clusterShowKeywordOptions:null,s_tableShowKeywordOptions:null,s_setAddCommandsOptions:null,s_dropCommandsOptions:null,s_runCommandOptions:null,s_suspendCommandOptions:null,s_attachCommandsOptions:null,s_moveCommandsOptions:null,s_replaceCommandsOptions:null,s_dropExtentTagsCommandsOptions:null,s_attachExtentsCommandsOptions:null,s_attachExtentsIntoSpecifedTableCommandsOptions:null,s_moveExtentsCommandsOptions:null,s_moveSpecifiedExtentsCommandsOptions:null,s_moveExtentsFromTableCommandsOptions:null,s_showExtentsByEntityCommandsOptions:null,s_showExtentsByEntityWithTagFiltersCommandsOptions:null,s_replaceExtentsCommandsOptions:null,s_alterCommandOptions:null,s_alterMergeAndDeleteCommandOptions:null,s_createCommandOptions:null,s_setUsersAdminsPrettyNameKeywordOptions:null,s_addSetDropUsersAdminsKeywordOptions:null,s_dropDatabaseKeywordOptions:null,s_setUsersAdminsViewersDatabaseCreatorsKeywordOptions:null,s_addDropUsersAdminsViewersDbCreatorsBlockedKeywordOptions:null,s_addClusterBlockedPrincipalsApplicationKeywordOptions:null,s_showBasicAuthUsersKeywordOptions:null,s_AddSetAdminsKeywordOptions:null,s_createTableEntitiesKeywordOptions:null,s_alterTableEntitiesKeywordOptions:null,s_alterMergeTableEntitiesKeywordOptions:null,s_dropTableEntitiesKeywordOptions:null,s_deleteTableEntitiesKeywordOptions:null,s_alterFunctionEntitiesKeywordOptions:null,s_DropColumnsSyntaxKeywordOptions:null,s_setNoneKeywordOptions:null,s_clusterPoliciesOptions:null,s_databasePoliciesOptions:null,s_tablePoliciesOptions:null,s_columnPoliciesOptions:null,s_multiplePoliciesOptions:null,s_multipleDeletionPoliciesOptions:null,s_databasePersistencyOptions:null,s_rowstorePersistencyOptions:null,s_ifNotExistsOptions:null,s_policyKeywordOptions:null,s_principalsPolicySchemaAndExtentsKeywordOptions:null,s_databasesShowKeywordOptions:null,s_exportFileFormatOptions:null,s_exportCommandOptions:null,s_alterDatabaseCommandOptions:null,s_duplicateIngestionCommandsOptions:null,s_purgeWhatIfCommandOptions:null,s_purgeTableCommandsOptions:null,s_purgeCleanupCommandsOptions:null,s_purgeCommandsOptions:null,s_purgeWithPropertiesCommandsOptions:null,s_showPrincipalKeywordOptions:null,s_showFabricKeywordOptions:null,s_alterMergePolicyRetentionOptions:null,s_alterMergePolicyRetentionSoftDeleteDefinedOptions:null,s_timeSpanPolicyOptions:null,s_createOrAlterOptions:null,s_suspendFabricNodeOptions:null,s_suspendFabricNodeOptionalOptions:null},ctors:{init:function(){this.s_showCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_addCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.add\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.alter\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterMergeCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.alter-merge\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_deleteCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.delete\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_createCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.create\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_dropCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.drop\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_moveCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.move\\\\s+(async\\\\s+)?$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_attachCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.attach\\\\s+(async\\\\s+)?$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_replaceCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.replace\\\\s+(async\\\\s+)?$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_ingestionDuplicationCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.dup-next-(failed-)?ingest\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_createOrAlterCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.create-or-alter\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_purgeCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.purge\\\\s+(async\\\\s+)?$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_purgeCleanupCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.purge-cleanup\\\\s+(async\\\\s+)?$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_runCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.run\\\\s+(async\\\\s+)?$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_suspendCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.suspend\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_createDatabaseCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.create\\\\s+database\\\\s+\\\\w+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_createDatabaseCommandEndingRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.create\\\\s+database\\\\s+\\\\w+\\\\s+(persist\\\\s+\\\\(.+\\\\)|volatile)\\\\s$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showDatabaseCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+database\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showBasicAuthCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+basicauth\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showDatabasePrincipalsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+database\\\\s+(\\\\w+|(\\\\[.+?\\\\]))\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showDatabasesCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+databases\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showClusterCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+cluster\\\\s$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showPrincipalCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+principal\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showFabricCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+fabric\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_suspendFabricNodeCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.suspend\\\\s+fabric\\\\s+node\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_suspendFabricNodeCommandWithDurationRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.suspend\\\\s+fabric\\\\s+node\\\\s+\\\\S+\\\\s+for\\\\s+\\\\d+\\\\w+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_addClusterAdminsUsersViewersDatabaseCreatorsBlockedPrincipalsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.add\\\\s+cluster\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setClusterAdminsUsersViewersDatabaseCreatorsBlockedPrincipalsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+cluster\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_addClusterBlockedPrincipalsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.add\\\\s+cluster\\\\s+blockedprincipals\\\\s+('(.*?)'|\\\"(.*?)\\\")\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setClusterAdminsNoneCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+cluster\\\\s+admins\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setClusterUsersNoneCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+cluster\\\\s+users\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setClusterViewersNoneCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+cluster\\\\s+viewers\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setClusterDatabaseCreatorsNoneCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+cluster\\\\s+databasecreators\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_dropClusterAdminsUsersViewersDatabaseCreatorsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.drop\\\\s+cluster\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showTableOptionsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+table\\\\s+\\\\w+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setDatabaseCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+database\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_addDatabaseCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.add\\\\s+database\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_dropDatabaseCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.drop\\\\s+database\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_anySimpleSyntaxActionTableCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.(show|create|add|set|alter|alter-merge|drop|delete)\\\\s+table\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_anySimpleSyntaxActionFunctionCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.(show|alter|drop)\\\\s+function\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_dropExtentTagsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.drop\\\\s+extent\\\\s+tags\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterExtentTagsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.alter\\\\s+extent\\\\s+tags\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_attachExtentsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.attach\\\\s+(async\\\\s+)?extents\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_attachExtentsIntoTableCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.attach\\\\s+(async\\\\s+)?extents\\\\s+into\\\\s+table\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_attachExtentsIntoSpecifiedTableCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.attach\\\\s+(async\\\\s+)?extents\\\\s+into\\\\s+table\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_moveExtentsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.move\\\\s+(async\\\\s+)?extents\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_moveSpecifiedExtentsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.move\\\\s+(async\\\\s+)?extents\\\\s+([A-Za-z0-9(),.-]+)\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_moveExtentsFromSpecifiedTableCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.move\\\\s+(async\\\\s+)?extents\\\\s+([A-Za-z0-9(),.-]+)\\\\s+from\\\\s+table\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_moveExtentsFromTableCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.move\\\\s+(async\\\\s+)?extents\\\\s+([A-Za-z0-9(),.-]+)\\\\s+from\\\\s+table\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_moveExtentsToTableCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.move\\\\s+(async\\\\s+)?extents\\\\s+([A-Za-z0-9(),.-]+)\\\\s+from\\\\s+table\\\\s+\\\\S+\\\\s+to\\\\s+table\\\\s+$|^\\\\s*\\\\.move\\\\s+(async\\\\s+)?extents\\\\s+to\\\\s+table\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_replaceExtentsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.replace\\\\s+(async\\\\s+)?extents\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_replaceExtentsInTableCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.replace\\\\s+(async\\\\s+)?extents\\\\s+in\\\\s+table\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showExtentsInSpecifiedEntityCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+(database|table)\\\\s+\\\\S+\\\\s+extents\\\\s+(hot\\\\s+)?$|^\\\\s*\\\\.show\\\\s+cluster\\\\s+extents\\\\s+(hot\\\\s+)?$|^\\\\s*\\\\.show\\\\s+tables\\\\s+\\\\([^)]+\\\\)\\\\s+extents\\\\s+(hot\\\\s+)?$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_showExtentsInSpecifiedEntityWithTagFiltersCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.show\\\\s+((database\\\\s+\\\\S+)|(table\\\\s+\\\\S+)|(tables\\\\s+\\\\([^)]+\\\\))|(cluster))\\\\s+extents\\\\s+(hot\\\\s+)?where\\\\s+tags\\\\s+((has|!has|contains|!contains)\\\\s+\\\\S+\\\\s+and\\\\s+tags\\\\s+)*$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_dropExtentTagsFromTableCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.drop\\\\s+extent\\\\s+tags\\\\s+from\\\\s+table\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setDatabaseAdminsUsersViewersPrettyNameCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+database\\\\s+\\\\w+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_addDatabaseAdminsUsersViewersCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.add\\\\s+database\\\\s+\\\\w+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_dropDatabasePropertyCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.drop\\\\s+database\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setTableAdminsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+table\\\\s+\\\\w+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_addTableAdminsCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.add\\\\s+table\\\\s+\\\\w+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_createTableEntitiesCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.create\\\\s+table\\\\s+\\\\w+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterTableEntitiesCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.alter\\\\s+table\\\\s+\\\\w+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterMergeTableEntitiesCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.alter-merge\\\\s+table\\\\s+\\\\w+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_dropTableEntitiesCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.drop\\\\s+table\\\\s+\\\\w+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_deleteTableEntitiesCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.delete\\\\s+table\\\\s+\\\\w+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_dropTableColumnsSyntaxCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.drop\\\\s+table\\\\s+\\\\w+\\\\s+columns\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterFunctionEntitiesCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.alter\\\\s+function\\\\s+\\\\w+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setDatabaseAdminsNoneCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+database\\\\s+\\\\w+\\\\s+admins\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setDatabaseUsersNoneCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+database\\\\s+\\\\w+\\\\s+users\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setDatabaseViewersNoneCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+database\\\\s+\\\\w+\\\\s+viewers\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setDatabaseIngestorsNoneCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+database\\\\s+\\\\w+\\\\s+ingestors\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setTableAdminsNoneCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+table\\\\s+\\\\w+\\\\s+admins\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setTableIngestorsNoneCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.set\\\\s+table\\\\s+\\\\w+\\\\s+ingestors\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_appendTableCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.append\\\\s+(async\\\\s+)?$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_setOrAppendReplaceTableCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.(set-or-append|set-or-replace)\\\\s+(async\\\\s+)?$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_clusterPolicyRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.(show|alter|alter-merge|delete)\\\\s+cluster\\\\s+policy\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterDatabaseRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.alter\\\\s+database\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_databasePolicyRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.(show|alter|alter-merge|delete)\\\\s+database\\\\s+\\\\S+\\\\s+policy\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_tablePolicyRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.(show|alter|alter-merge|delete)\\\\s+table\\\\s+\\\\S+\\\\s+policy\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_columnPolicyRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.(show|alter|alter-merge|delete)\\\\s+column\\\\s+\\\\S+\\\\s+policy\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_policyCommandOnDatabase=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.(show|alter|alter-merge|delete)\\\\s+database\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_policyCommand=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.(alter|alter-merge|delete)\\\\s+column\\\\s+\\\\S+\\\\s+$|^\\\\s*\\\\.(alter|alter-merge|delete)\\\\s+cluster\\\\s+$|^\\\\s*\\\\.(alter-merge|delete)\\\\s+database\\\\s+\\\\S+\\\\s+$|^\\\\s*\\\\.show\\\\s+column\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterMultiplePoliciesRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.alter\\\\s+policies\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_deleteMultiplePoliciesRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.delete\\\\s+policies\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_exportCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.export\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_exportCommandWithModifiersToRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.export\\\\s+(async|async compressed|compressed)\\\\s+to\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_exportCommandNoModifiersToRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.export\\\\s+to\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_duplicateIngestionIntoRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.dup-next-(failed-)?ingest\\\\s+into\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_purgeWhatIfRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.purge\\\\s+(async\\\\s+)?whatif\\\\s*=\\\\s*$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_purgeWithPropertiesRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.purge\\\\s+(async\\\\s+)?whatif\\\\s*=\\\\s*\\\\S+\\\\s+(maxRecords\\\\s*=\\\\s*\\\\d+\\\\s+)?$|^\\\\s*\\\\.purge\\\\s+(async\\\\s+)?maxRecords\\\\s*=\\\\s*\\\\d+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_purgeTableRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.purge\\\\s+(async\\\\s+)?(whatif\\\\s*=\\\\s*\\\\S+\\\\s+)?(maxRecords\\\\s*=\\\\s*\\\\d+\\\\s+)?table\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_purgeSpecifiedTableRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.purge\\\\s+(async\\\\s+)?(whatif\\\\s*=\\\\s*\\\\S+\\\\s+)?(maxRecords\\\\s*=\\\\s*\\\\d+\\\\s+)?table\\\\s+\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterMergePolicyRetentionRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.(alter-merge)\\\\s+(database|table)\\\\s+\\\\S+\\\\s+policy\\\\s+retention\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterMergePolicyRetentionSoftDeleteDefinedRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.(alter-merge)\\\\s+(database|table)\\\\s+\\\\S+\\\\s+policy\\\\s+retention\\\\s+softdelete\\\\s*=\\\\s*\\\\S+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_alterMergePolicyRetentionOptionsRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.(alter-merge)\\\\s+(database|table)\\\\s+\\\\S+\\\\s+policy\\\\s+retention\\\\s+((softdelete\\\\s*=\\\\s*\\\\S+\\\\s+harddelete)|((soft|hard)delete))\\\\s*=\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_createRowstoreCommandRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.create\\\\s+rowstore\\\\s+\\\\w+\\\\s+$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_createRowstoreCommandEndingRegex=new System.Text.RegularExpressions.Regex.ctor(\"^\\\\s*\\\\.create\\\\s+rowstore\\\\s+\\\\w+\\\\s+(writeaheadlog\\\\s+\\\\(.+\\\\)|volatile)\\\\s$\",Kusto.Data.IntelliSense.IntelliSenseRulesProviderBase.CommonRegexOptions);this.s_adminOperationOptions=System.Array.init([\"show\",\"alter\",\"alter-merge\",\"append\",\"attach\",\"suspend\",\"create\",\"delete\",\"detach\",\"drop\",\"rename\",\"set-or-append\",\"set-or-replace\",\"set\",\"export\",\"move\",\"replace\",\"create-or-alter\",\"dup-next-ingest\",\"dup-next-failed-ingest\",\"seal table\",\"purge\",\"purge-cleanup\",\"run\"],System.String);this.s_showCommandOptions=System.Linq.Enumerable.from(System.Array.init([\"basicauth\",\"cache\",\"capacity\",\"cluster\",\"column\",\"database\",\"databases\",\"diagnostics\",\"extentcontainers\",\"fabric\",\"function\",\"functions\",\"ingestion failures\",\"journal\",\"memory\",\"operations\",\"schema\",\"table\",\"tables\",\"version\",\"queries\",\"commands\",\"commands-and-queries\",\"principal\",\"rowstores\",\"rowstore\",\"rowstore transactions\",\"rowstore seals\",\"external tables\",\"external table\",\"continuous-exports\",\"continuous-export\",\"stored_query_results\"],System.String),System.String).orderBy($asm.$.Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.f1).ToArray(System.String);this.s_clusterShowKeywordOptions=System.Array.init([\"principals\",\"policy\",\"extents\",\"monitoring\",\"journal\",\"blockedprincipals\",\"databases\",\" \"],System.String);this.s_tableShowKeywordOptions=System.Array.init([\"principals\",\"policy\",\"extents\",\"ingestion csv mappings\",\"ingestion json mappings\",\"ingestion avro mappings\",\"ingestion apacheavro mappings\",\"ingestion parquet mappings\",\"ingestion orc mappings\",\"ingestion w3clogfile mappings\",\"ingestion mappings\",\"rowstores\",\"rowstore_references\",\" \"],System.String);this.s_setAddCommandsOptions=System.Array.init([\"database\",\"cluster\",\"table\",\"async\"],System.String);this.s_dropCommandsOptions=System.Array.init([\"database\",\"cluster\",\"table\",\"tables\",\"function\",\"column\",\"extent tags\",\"extent\",\"extents\",\"rowstore\",\"external table\",\"continuous-export\"],System.String);this.s_runCommandOptions=System.Array.init([\"continuous-export\"],System.String);this.s_suspendCommandOptions=System.Array.init([\"fabric node\"],System.String);this.s_attachCommandsOptions=System.Array.init([\"extents\"],System.String);this.s_moveCommandsOptions=System.Array.init([\"extents\"],System.String);this.s_replaceCommandsOptions=System.Array.init([\"extents\"],System.String);this.s_dropExtentTagsCommandsOptions=System.Array.init([\"from table\"],System.String);this.s_attachExtentsCommandsOptions=System.Array.init([\"into table\",\"by metadata\"],System.String);this.s_attachExtentsIntoSpecifedTableCommandsOptions=System.Array.init([\"by metadata\"],System.String);this.s_moveExtentsCommandsOptions=System.Array.init([\"all\",\"(GUID,...,GUID)\",\"to table\"],System.String);this.s_moveSpecifiedExtentsCommandsOptions=System.Array.init([\"from table\"],System.String);this.s_moveExtentsFromTableCommandsOptions=System.Array.init([\"to table\"],System.String);this.s_showExtentsByEntityCommandsOptions=System.Array.init([\"hot\",\"where tags\"],System.String);this.s_showExtentsByEntityWithTagFiltersCommandsOptions=System.Array.init([\"has\",\"!has\",\"contains\",\"!contains\"],System.String);this.s_replaceExtentsCommandsOptions=System.Array.init([\"in table\"],System.String);this.s_alterCommandOptions=System.Array.init([\"cluster\",\"column\",\"database\",\"function\",\"table\",\"policies\",\"extent tags\",\"external table\"],System.String);this.s_alterMergeAndDeleteCommandOptions=System.Array.init([\"cluster\",\"column\",\"database\",\"table\"],System.String);this.s_createCommandOptions=System.Array.init([\"database\",\"function\",\"table\",\"rowstore\",\"external table\"],System.String);this.s_setUsersAdminsPrettyNameKeywordOptions=System.Array.init([\"users\",\"admins\",\"viewers\",\"ingestors\",\"monitors\",\"prettyname\"],System.String);this.s_addSetDropUsersAdminsKeywordOptions=System.Array.init([\"users\",\"admins\",\"viewers\",\"ingestors\",\"monitors\"],System.String);this.s_dropDatabaseKeywordOptions=System.Array.init([\"users\",\"admins\",\"viewers\",\"ingestors\",\"monitors\",\"prettyname\"],System.String);this.s_setUsersAdminsViewersDatabaseCreatorsKeywordOptions=System.Array.init([\"users\",\"admins\",\"viewers\",\"databasecreators\"],System.String);this.s_addDropUsersAdminsViewersDbCreatorsBlockedKeywordOptions=System.Array.init([\"users\",\"admins\",\"viewers\",\"databasecreators\",\"blockedprincipals\"],System.String);this.s_addClusterBlockedPrincipalsApplicationKeywordOptions=System.Array.init([\"application\",\"user\",\"period\",\"reason\"],System.String);this.s_showBasicAuthUsersKeywordOptions=System.Array.init([\"users\"],System.String);this.s_AddSetAdminsKeywordOptions=System.Array.init([\"admins\",\"ingestors\"],System.String);this.s_createTableEntitiesKeywordOptions=System.Array.init([\"ingestion csv mapping\",\"ingestion json mapping\",\"ingestion avro mapping\",\"ingestion apacheavro mapping\",\"ingestion parquet mapping\",\"ingestion orc mapping\",\"ingestion w3clogfile mapping\"],System.String);this.s_alterTableEntitiesKeywordOptions=System.Array.init([\"ingestion csv mapping\",\"ingestion json mapping\",\"ingestion avro mapping\",\"ingestion apacheavro mapping\",\"ingestion parquet mapping\",\"ingestion orc mapping\",\"ingestion w3clogfile mapping\",\"docstring\",\"folder\",\"column-docstrings\",\"policy\"],System.String);this.s_alterMergeTableEntitiesKeywordOptions=System.Array.init([\"column-docstrings\",\"policy\"],System.String);this.s_dropTableEntitiesKeywordOptions=System.Array.init([\"admins\",\"ingestors\",\"columns\",\"ingestion csv mapping\",\"ingestion json mapping\",\"ingestion avro mapping\",\"ingestion apacheavro mapping\",\"ingestion parquet mapping\",\"ingestion orc mapping\",\"ingestion w3clogfile mapping\"],System.String);this.s_deleteTableEntitiesKeywordOptions=System.Array.init([\"policy\"],System.String);this.s_alterFunctionEntitiesKeywordOptions=System.Array.init([\"docstring\",\"folder\"],System.String);this.s_DropColumnsSyntaxKeywordOptions=System.Array.init([\"(COLUMN1,COLUMN2)\"],System.String);this.s_setNoneKeywordOptions=System.Array.init([\"none\"],System.String);this.s_clusterPoliciesOptions=System.Array.init([\"caching\",\"capacity\",\"rowstore\",\"callout\",\"query_weak_consistency\",\"streamingingestion\"],System.String);this.s_databasePoliciesOptions=System.Array.init([\"caching\",\"encoding\",\"merge\",\"retention\",\"sharding\",\"streamingingestion\",\"ingestionbatching\"],System.String);this.s_tablePoliciesOptions=System.Array.init([\"caching\",\"encoding\",\"merge\",\"ingestiontime\",\"retention\",\"roworder\",\"update\",\"sharding\",\"streamingingestion\",\"restricted_view_access\",\"ingestionbatching\",\"partitioning\"],System.String);this.s_columnPoliciesOptions=System.Array.init([\"caching\",\"encoding\"],System.String);this.s_multiplePoliciesOptions=System.Array.init([\"of retention\",\"of encoding\"],System.String);this.s_multipleDeletionPoliciesOptions=System.Array.init([\"of retention\"],System.String);this.s_databasePersistencyOptions=System.Array.init([\"persist\",\"volatile\"],System.String);this.s_rowstorePersistencyOptions=System.Array.init([\"writeaheadlog\",\"volatile\"],System.String);this.s_ifNotExistsOptions=System.Array.init([\"ifnotexists\",\" \"],System.String);this.s_policyKeywordOptions=System.Array.init([\"policy\"],System.String);this.s_principalsPolicySchemaAndExtentsKeywordOptions=System.Array.init([\"principals\",\"policy\",\"schema\",\"extents\",\"journal\",\"purge operations\",\" \"],System.String);this.s_databasesShowKeywordOptions=System.Array.init([\"identity\",\"policies\",\"datastats\",\" \"],System.String);this.s_exportFileFormatOptions=System.Array.init([\"csv\",\"tsv\",\"json\",\"sql\",\"parquet\"],System.String);this.s_exportCommandOptions=System.Array.init([\"async compressed\",\"async\",\"compressed\",\" \"],System.String);this.s_alterDatabaseCommandOptions=System.Array.init([\"policy\",\"persist metadata\",\"prettyname\"],System.String);this.s_duplicateIngestionCommandsOptions=System.Array.init([\"into\"],System.String);this.s_purgeWhatIfCommandOptions=System.Array.init([\"info\",\"stats\",\"purge\",\"retain\"],System.String);this.s_purgeTableCommandsOptions=System.Array.init([\"records\"],System.String);this.s_purgeCleanupCommandsOptions=System.Array.init([\"until=\"],System.String);this.s_purgeCommandsOptions=System.Array.init([\"whatif =\",\"maxRecords =\",\"table\"],System.String);this.s_purgeWithPropertiesCommandsOptions=System.Array.init([\"table\"],System.String);this.s_showPrincipalKeywordOptions=System.Array.init([\"access\",\"roles\",\"@'principal' roles\"],System.String);this.s_showFabricKeywordOptions=System.Array.init([\"clocks\",\"locks\",\"cache\",\"nodes\",\"services\"],System.String);this.s_alterMergePolicyRetentionOptions=System.Array.init([\"softdelete\",\"harddelete\"],System.String);this.s_alterMergePolicyRetentionSoftDeleteDefinedOptions=System.Array.init([\"harddelete\"],System.String);this.s_timeSpanPolicyOptions=System.Array.init([\"1d\",\"7d\",\"30d\",\"90d\",\"365d\"],System.String);this.s_createOrAlterOptions=System.Array.init([\"function\",\"continuous-export\"],System.String);this.s_suspendFabricNodeOptions=System.Array.init([\"for\"],System.String);this.s_suspendFabricNodeOptionalOptions=System.Array.init([\"reason\"],System.String)}}},fields:{s_afterCreateDatabaseApplyPolicies:null,s_afterAlterDatabaseApplyPolicies:null,s_afterCreateRowStoreApplyPolicies:null,s_afterExportFile:null},ctors:{init:function(){this.s_afterCreateDatabaseApplyPolicies=$asm.$.Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.f2(new(System.Collections.Generic.Dictionary$2(System.String,Kusto.Data.IntelliSense.ApplyPolicy).ctor));this.s_afterAlterDatabaseApplyPolicies=$asm.$.Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.f3(new(System.Collections.Generic.Dictionary$2(System.String,Kusto.Data.IntelliSense.ApplyPolicy).ctor));this.s_afterCreateRowStoreApplyPolicies=$asm.$.Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.f4(new(System.Collections.Generic.Dictionary$2(System.String,Kusto.Data.IntelliSense.ApplyPolicy).ctor));this.s_afterExportFile=$asm.$.Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.f5(new(System.Collections.Generic.Dictionary$2(System.String,Kusto.Data.IntelliSense.ApplyPolicy).ctor))},$ctor1:function(cluster,schema,queryParameters,availableClusters,schemaResolver,allowQueryParameters,allowClientDirectives){queryParameters===void 0&&(queryParameters=null);availableClusters===void 0&&(availableClusters=null);schemaResolver===void 0&&(schemaResolver=null);allowQueryParameters===void 0&&(allowQueryParameters=!1);allowClientDirectives===void 0&&(allowClientDirectives=!1);this.$initialize();Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.$ctor1.call(this,cluster,schema,queryParameters,availableClusters,schemaResolver,allowQueryParameters,allowClientDirectives);this.LoadRules$1()},ctor:function(other){this.$initialize();Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.ctor.call(this,other);this.LoadRules$1()}},methods:{Clone$1:function(){return new Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.ctor(this)},LoadRules$1:function(){Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(System.String,this.TableNames)&&this.AddTableControlCommands();Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(System.String,this.FunctionNames)&&this.AddFunctionControlCommands();this.AddControlCommandKeywords();this.AddPolicyControlCommands();this.AddMultiplePoliciesControlCommands();this.DeleteMultiplePoliciesControlCommands();this.AddPermissionsControlCommands();this.AddDatabaseCreateCommands();this.AddExportControlCommand();this.AddSuspendNodeControlCommand();Kusto.Cloud.Platform.Utils.ExtendedEnumerable.SafeFastAny$2(Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity,this.Databases)&&this.AddDatabaseControlCommands(this.Databases);this.AddDatabasesShowControlCommands();this.AddAddDropControlCommandKeywords();this.AddRowStoreControlCommands()},AddDatabaseCreateCommands:function(){var $t;this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDatabaseCreatePersistencyOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_createDatabaseCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_databasePersistencyOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t.AfterApplyPolicies=this.s_afterCreateDatabaseApplyPolicies,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldCreateIfNotExistsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_createDatabaseCommandEndingRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_ifNotExistsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t))},AddControlCommandKeywords:function(){var $t;this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAdminCommandsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslQueryIntelliSenseRulesProvider.s_lineWithDotBeginningRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Command,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_adminOperationOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_showCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_showCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowPrincipalCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_showPrincipalCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_showPrincipalKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowFabricOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_showFabricCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_showFabricKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t))},AddExportControlCommand:function(){var $t,$t1;this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldExportCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_exportCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_exportCommandOptions),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=\" to \",$t1),$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldExportCommandWithModifiersAndOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_exportCommandWithModifiersToRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_exportFileFormatOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t.AfterApplyPolicies=this.s_afterExportFile,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldExportCommandNoModifiersAndOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_exportCommandNoModifiersToRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_exportFileFormatOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t.AfterApplyPolicies=this.s_afterExportFile,$t))},AddSuspendNodeControlCommand:function(){var $t;this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSuspendNodeControlCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_suspendFabricNodeCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_suspendFabricNodeOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSuspendNodeControlCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_suspendFabricNodeCommandWithDurationRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_suspendFabricNodeOptionalOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t))},AddPermissionsControlCommands:function(){var $t;this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowBasicAuthOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_showBasicAuthCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_showBasicAuthUsersKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowClusterPrincipalsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_showClusterCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_clusterShowKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetClusterAdminsUsersViewersDatabaseCreatorsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setClusterAdminsUsersViewersDatabaseCreatorsBlockedPrincipalsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setUsersAdminsViewersDatabaseCreatorsKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAddClusterAdminsUsersViewersDatabaseCreatorsBlockedPrincipalsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_addClusterAdminsUsersViewersDatabaseCreatorsBlockedPrincipalsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_addDropUsersAdminsViewersDbCreatorsBlockedKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDropClusterAdminsUsersViewersDatabaseCreatorsBlockedPrincipalsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_dropClusterAdminsUsersViewersDatabaseCreatorsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_addDropUsersAdminsViewersDbCreatorsBlockedKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAddClusterBlockedPrincipalsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_addClusterBlockedPrincipalsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_addClusterBlockedPrincipalsApplicationKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetClusterUsersNoneOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setClusterUsersNoneCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setNoneKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetClusterAdminsNoneOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setClusterAdminsNoneCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setNoneKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetClusterViewersNoneOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setClusterViewersNoneCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setNoneKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetClusterDatabaseCreatorsNoneOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setClusterDatabaseCreatorsNoneCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setNoneKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t))},AddPolicyControlCommands:function(){var $t;this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPoliciesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_policyCommand,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_policyKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldClusterPoliciesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_clusterPolicyRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Policy,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_clusterPoliciesOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDatabasePoliciesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_databasePolicyRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Policy,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_databasePoliciesOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTablePoliciesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_tablePolicyRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Policy,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_tablePoliciesOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldColumnPoliciesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_columnPolicyRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Policy,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_columnPoliciesOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t))},AddMultiplePoliciesControlCommands:function(){var $t;this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldMultiplePoliciesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterMultiplePoliciesRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Policy,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_multiplePoliciesOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t))},DeleteMultiplePoliciesControlCommands:function(){var $t;this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDeleteMultiplePoliciesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_deleteMultiplePoliciesRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Policy,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_multipleDeletionPoliciesOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t))},AddDatabasesShowControlCommands:function(){var $t;this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowDatabasesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_showDatabasesCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Policy,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_databasesShowKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t))},AddDatabaseControlCommands:function(databases){var $t,orderedDatabases;this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowDatabasePrincipalsPoliciesAndSchemaOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_showDatabasePrincipalsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_principalsPolicySchemaAndExtentsKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetDatabaseAdminsUsersViewersPrettyNameOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setDatabaseAdminsUsersViewersPrettyNameCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setUsersAdminsPrettyNameKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAddDatabaseAdminsUsersViewersOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_addDatabaseAdminsUsersViewersCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_addSetDropUsersAdminsKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDropDatabaseOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_dropDatabasePropertyCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_dropDatabaseKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetDatabaseUsersNoneOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setDatabaseUsersNoneCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setNoneKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetDatabaseAdminsNoneOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setDatabaseAdminsNoneCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setNoneKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetDatabaseViewersNoneOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setDatabaseViewersNoneCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setNoneKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetDatabaseIngestorsNoneOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setDatabaseIngestorsNoneCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setNoneKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));orderedDatabases=System.Linq.Enumerable.from(databases,Kusto.Data.IntelliSense.KustoIntelliSenseDatabaseEntity).select($asm.$.Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.f6).orderBy($asm.$.Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.f7).ToArray(System.String);this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDatabaseNames,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_showDatabaseCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Database,orderedDatabases),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDatabaseNames,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setDatabaseCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Database,orderedDatabases),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDatabaseNames,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_addDatabaseCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Database,orderedDatabases),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDatabaseNames,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_dropDatabaseCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Database,orderedDatabases),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDatabaseNames,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_policyCommandOnDatabase,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Database,orderedDatabases),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterDatabaseCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterDatabaseRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterDatabaseCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t.AfterApplyPolicies=this.s_afterAlterDatabaseApplyPolicies,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterMergePolicyRetentionOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterMergePolicyRetentionRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterMergePolicyRetentionOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendAssignmentPolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterMergePolicyRetentionSoftDeleteDefinedOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterMergePolicyRetentionSoftDeleteDefinedRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterMergePolicyRetentionSoftDeleteDefinedOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendAssignmentPolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterTimeSpanPolicyOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterMergePolicyRetentionOptionsRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_timeSpanPolicyOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t))},AddTableControlCommands:function(){var $t,$t1;this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_appendTableCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Table,this.TableNames),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setOrAppendReplaceTableCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Table,this.TableNames),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowTableEntitiesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_showTableOptionsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_tableShowKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_anySimpleSyntaxActionTableCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Table,this.TableNames),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDropExtentTagsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_dropExtentTagsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_dropExtentTagsCommandsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_dropExtentTagsFromTableCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Table,this.TableNames),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=\" (@'')\",$t1.OffsetPosition=-2,$t1),$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterExtentTagsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterExtentTagsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Command,System.Array.init([\"(@'') <| \"],System.String)),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=\"\",$t1.OffsetPosition=-6,$t1),$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAttachExtentsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_attachExtentsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_attachExtentsCommandsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_attachExtentsIntoTableCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Table,this.TableNames),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAttachExtentsIntoTableOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_attachExtentsIntoSpecifiedTableCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_attachExtentsIntoSpecifedTableCommandsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldMoveExtentsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_moveExtentsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_moveExtentsCommandsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldMoveSpecifiedExtentsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_moveSpecifiedExtentsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_moveSpecifiedExtentsCommandsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_moveExtentsFromTableCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Table,this.TableNames),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldMoveExtentsToTableOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_moveExtentsFromSpecifiedTableCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_moveExtentsFromTableCommandsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_moveExtentsToTableCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Table,this.TableNames),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowExtentsByEntityOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_showExtentsInSpecifiedEntityCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_showExtentsByEntityCommandsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldShowExtentsByEntityWithTagsFiltersOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_showExtentsInSpecifiedEntityWithTagFiltersCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_showExtentsByEntityWithTagFiltersCommandsOptions),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=\" @''\",$t1.OffsetPosition=-1,$t1),$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldReplaceExtentsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_replaceExtentsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_replaceExtentsCommandsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_replaceExtentsInTableCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Table,this.TableNames),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetTableAdminsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setTableAdminsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_AddSetAdminsKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAddTableAdminsOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_addTableAdminsCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_AddSetAdminsKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldCreateTableEntitiesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_createTableEntitiesCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_createTableEntitiesKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterTableEntitiesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterTableEntitiesCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterTableEntitiesKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterTableEntitiesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterMergeTableEntitiesCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterMergeTableEntitiesKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDropTableEntitiesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_dropTableEntitiesCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_dropTableEntitiesKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDeleteTableEntitiesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_deleteTableEntitiesCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_deleteTableEntitiesKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDropTableColumnsSyntaxOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_dropTableColumnsSyntaxCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_DropColumnsSyntaxKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetTableAdminsNoneOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setTableAdminsNoneCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setNoneKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetTableIngestorsNoneOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setTableIngestorsNoneCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setNoneKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_duplicateIngestionIntoRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Table,this.TableNames),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=\" to h@''\",$t1.OffsetPosition=-1,$t1),$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeWhatIfOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_purgeWhatIfRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_purgeWhatIfCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeWithPropertiesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_purgeWithPropertiesRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_purgeWithPropertiesCommandsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldTableNamesForAdminOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_purgeTableRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Table,this.TableNames),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeTableOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_purgeSpecifiedTableRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_purgeTableCommandsOptions),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=\" <|\",$t1),$t))},AddRowStoreControlCommands:function(){var $t;this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldRowStoreCreatePersistencyOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_createRowstoreCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_rowstorePersistencyOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t.AfterApplyPolicies=this.s_afterCreateRowStoreApplyPolicies,$t))},AddFunctionControlCommands:function(){var $t;this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldFunctionNamesForAdminOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_anySimpleSyntaxActionFunctionCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.ExpressionFunction,this.FunctionNames),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterFunctionEntitiesOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterFunctionEntitiesCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterFunctionEntitiesKeywordOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t))},AddAddDropControlCommandKeywords:function(){var $t,$t1;this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldSetCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setAddCommandsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAddCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_addCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_setAddCommandsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDropCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_dropCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_dropCommandsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldMoveCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_moveCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_moveCommandsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAttachCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_attachCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_attachCommandsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldReplaceCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_replaceCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_replaceCommandsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldAlterMergeCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterMergeCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterMergeAndDeleteCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldDeleteCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_deleteCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_alterMergeAndDeleteCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldCreateCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_createCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_createCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldCreateOrAlterOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_createOrAlterCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_createOrAlterOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldIngestionDuplicationOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_ingestionDuplicationCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_duplicateIngestionCommandsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_purgeCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_purgeCommandsOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldPurgeCleanupOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_purgeCleanupCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_purgeCleanupCommandsOptions),$t.DefaultAfterApplyPolicy=($t1=new Kusto.Data.IntelliSense.ApplyPolicy,$t1.Text=\" datetime()\",$t1.OffsetPosition=-1,$t1),$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldRunCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_runCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_runCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t));this.CommandRules.add(($t=new Kusto.Data.IntelliSense.RegexIntelliSenseRule,$t.Kind=Kusto.Data.IntelliSense.AdminEngineRuleKind.YieldRunCommandOptions,$t.MatchingRegex=Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_suspendCommandRegex,$t.Options=new Kusto.Data.IntelliSense.CompletionOptionCollection(Kusto.Data.IntelliSense.OptionKind.Option,Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider.s_suspendCommandOptions),$t.DefaultAfterApplyPolicy=Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy,$t))}}});Bridge.ns(\"Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider\",$asm.$);Bridge.apply($asm.$.Kusto.Data.IntelliSense.CslIntelliSenseRulesProvider,{f1:function(s){return s},f2:function(_o1){var $t;return _o1.add(\"volatile\",Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy),_o1.add(\"persist\",($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=\" (h@'', h@'') \",$t.OffsetPosition=-9,$t)),_o1},f3:function(_o2){var $t;return _o2.add(\"policy\",Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy),_o2.add(\"persist metadata\",($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=\" h'' \",$t.OffsetPosition=-2,$t)),_o2},f4:function(_o3){var $t;return _o3.add(\"volatile\",Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy),_o3.add(\"writeaheadlog\",($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=\" (h@'', h@'') \",$t.OffsetPosition=-9,$t)),_o3},f5:function(_o4){var $t;return _o4.add(\"csv\",($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=\" (h@'')\",$t.OffsetPosition=-2,$t)),_o4.add(\"tsv\",($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=\" (h@'')\",$t.OffsetPosition=-2,$t)),_o4.add(\"json\",($t=new Kusto.Data.IntelliSense.ApplyPolicy,$t.Text=\" (h@'')\",$t.OffsetPosition=-2,$t)),_o4.add(\"sql\",Kusto.Data.IntelliSense.ApplyPolicy.AppendSpacePolicy),_o4},f6:function(db){return Kusto.Data.Common.CslSyntaxGenerator.NormalizeDatabaseName(db.Name)},f7:function(n){return n}})});"],"mappings":"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","names":["$asm","globals","kustoContext","data","$step","$task1","$taskResult1","$jumpFromFinally","$tcs","$returnValue","res","dataAsCsl","query","results","$t","$async_e","$asyncBody","$async_e1","items","result","item","seriesName","anomalyColumns","anomalySeriesMap","$t1","valueData","anomalyColumn","anomalyData","anomalyPointsCount","i","valuePoint","anomalyPoint","a","a1","anomalyColumnsHashset","valueColumn","d","$me","r","maxPointsPerChartError","maxPointsPerChartWarning","maxSeriesPerChartError","maxSeriesPerChartWarning","maxDatetimePeriodError","table","argumentColumnType","argumentRestrictions","seriesColumns","accumulateResults","xColumn","yColumns","chartProps","metaData","baseSeriesName","emptySeries","tableSchema","allColumns","seriesList","col","dataColumns","unusedColumns","argumentData","lastValues","isTableValidForCharting","tempDataIndex","firstDataIndex","index","type","considerDateTimeAndTimeSpanAsNumeric","columnsToExclude","columnName","schema","n","columnsToExcludeDefined","amountToSkip","argType","dataGroups","dg","serieDataItems","argData","prevItem","currentDistance","gapLength","mod","j","newItem","distances","maxGroup","initialDistance","$e1","ts","limits","error","minValue","maxValue","seriesCount","dataPoints","value","arr","collection","isFirstElement","prev","idx","sequenceType","sorted","currentGroup","maxGroupCount","maxGroupValue","prevNum","num","diff","start","end","distance","dataIsSeries","columns","column","isY","isX","columnType","isSeries","propertyColumns","rowIdx","accumulate","argumentDataColumnIndex","$t2","argumentValue","argumentActualType","values","dataItem","cellValue","lastValue","argumentDateTime","argumentNumeric","argumentString","argumentProperties","p","properties","kvp","o","s","count","hasPrevValue","baseSeriesNameBuilder","columnValue","point","obj","resolvedColumnTypes","firstNumericColumnIndex","geoJSONPointCandidateColumns","geoColumnsPredefined","columnId","columnFirstValue","geojsonPoint","seriesOrArgumentDataIndex","geoColumnIndex","seriesDefaultIndex","startIndex","seriesIndices","yIndexes","isNotInSeries","isNotInYs","indexesToExclude","nonStringIndex","dt","resultAsTimeSpan","considerDateTimeAndTimeSpanAsDouble","valueAsArr","resolvedValueType","val","hasTimeSpanValues","hasDateTimeValues","hasNumericValues","_","colIndex","b","c","colName","colType","requestedType","geospatialColumnIndexes","rowIndex","longitudeValue","latitudeValue","includeColName","name","maxLen","other","literal","_discard1","isHidden","str","_discard2","multiLineLiteral","ret","ret1","str1","str2","input","T","hidden","quote","twiceQuoteLen","ch","ranges","range","orderedRanges","firstItem","begin","rangeGroupA","rangeGroupB","intersectedTimeRanges","rangeFromA","rangeFromB","intersectedStart","intersectedEnd","to","culture","inputTime","utcTime","t1","t2","firstStart","firstEnd","secondStart","secondEnd","datetime","highBound","lowBound","date","timeSpan","dateTime","sb","g","f","e","year","month","day","hour","minute","second","fraction","ticks","y400","y100","y4","y1","leapYear","days","m","seconds","secondsLong","additionTicks","milliseconds","millisecondsLong","microseconds","TicksPerMicrosecond","MicrosecondsPerMillisecond","nanoseconds","NanosecondsPerTick","NanosecondsPerMillisecond","_o1","TSource","source","maxCount","asICollectionT","asICollection","equalityComparer","basicComparison","sortedCollection1","sortedCollection2","predicate","enumerator1","enumerator2","that","length1","length2","sequence","asArrayT","asIReadOnlyCollectionT","delimiter","maxTake","nullString","estimatedStringSize","elementPrefix","elementPostfix","$t3","toStringRes","toStringRes1","displayStringBuilder","itemsPassed","enumerator","TCollection","first","collectionEnumerable","asIReadOnlyCollection","list","comparer","TKey","keySelector","collections","TR","isFirst","transform","typeOfT","list1","list2","t","itemToAdd","checkBaseTypes","genType","x","wildcardPattern","regexString","regex","otherAsRegex","replacement","replacesCount","match","format","args","args2","arg","arg2","argStr","formatProvider","lhs","rhs","position","before","after","allowWhitespace","offsetFirstEquality","cmd","slash","text","nextNewLine","hasPrecedingText","prefix","comparison","justOne","suffix","openning","closing","currentPos","chars","substring","what","me","length","comparisonType","delimiterIndex","delimiters","delimitersIndex","isNextChar_slashN","resultBuilder","c_space","c_quotes","replacements","shouldReplace","_o2","_o3","threadStaticStringBuilder","capacity","maxBuilderSize","appendText","parser","commands","queryFormatted","databaseName","forceNormalization","virtualClusterName","functionName","forceNormalizeFunctionName","tableName","forceNormalizeTableName","forceNormalizeColumnName","rowStoreName","workloadGroupName","token","dummy","flag","ignoreCase","ignoreInts","reti","rules","command","commandContext","lastPart","keywordFromCommand","hasKeywordMatch","keyword","statements","delimeter","trimDelimeter","currentStatementStart","eofString","len","balancedChar","recursionChars","firstWordAfterPipe","parts","last","rule","analyzedCommand","isCommand","r1","ruleKind","queryParameters","kind","priority","selectedOption","policy","firstCommand","partValue","level","part","rulesProvider","mapOfKnownEntities","mapOfOriginallyKnownEntities","commandBuilder","context","operatorContext","knownEntities","originallyKnownEntities","commandPart","opRegex","linqParts","separator","traits","wasHandled","isFirstTime","cp","processedStart","startRelativeIndex","startAbsoluteIndex","funcPrefix","endRelativeIndex","endAbsoluteIndex","boddy","funcSuffix","boddy1","assumeJoinStartedWithBracket","remainingText","joinStartMatch","relativePosition","joinOpPart","joinEndMatch","tabLength","bracketClosed","joinInnerPart","onJoinPart","hasBracket","shouldCloseBracket","openBrackets","closeBrackets","parseMode","previousCandidate","tokens","allowQueryParameters","indexer","recognizedTokens","commandParts","commentsParts","clientDirectivesPositions","tokenToRemove","invalidTokens","currentEnd","refernceCommand","prevPart","tableContext","calculatedColumns","availableTableColumns","newCalculatedColumns","prevCalculatedColumns","calculatedColumnTokens","letVariables","canUseReference","state","referencePart","offset","capturedTokens","clonedToken","wasFullyResolved","letVariable","target","recognizedTokenList","textTokens","tokenKind","tokensCount","newTokenLen","tokenText","tokenText1","unrecognizedTokens","tokenStart","prefixText","prefixToken","suffixText","suffixToken","startTextIndex","endTextIndex","y","ct","scanStart","endOfArray","terminators","escaping","foundTerminators","escapeSequence","regexList","tokenList","commentRegex","matches","indexQueryParameters","partText","bracketItem","bracketToken","isTokenEnd","skipRanges","tokenLookupState","tokenBuilder","tokenPosition","commandPartPosition","bracketsStack","isInsideTokenLookupSkipRange","isInsideCommentRange","isAfterWhiteSpace","canStartNewPart","size","rIndex","currentSkipRange","searchForTokens","rangeStart","rangeEnd","tokensInRange","tokenSuffix","ifVerbatim","slp","i1","slp1","i2","qpp","slp2","newSlp","comment","r2","queryWithoutLeadingComments","commandWithoutLeadingComments","requestContent","requestContentWithoutLeadingComments","isAdminCommand","lines","line","directiveWithoutLeadingComments","parsedCommands","newCommand","wasFound","previouslyParsedCommand","commandLength","mode","endOfStream","expectedNewLine","absolutePositionBias","signature","parenStart","topic","key","option","markdownSource","shortDescription","longDescription","examples","url","typeName","typeCode","generateImplicitEntities","entities","parse","closingBracket","closingBracket1","startToken","multipleColumnsResultsCount","startFunctionName","currentChar","added","funcName","endIndex","tokenLen","entity","entityName","entity_part","indexOfAssignment","indexOfStartingBracket","indexOfEndingBracket","entityName1","entitiesList","op","argList","$arguments","parameters","boldElement","parameters1","operation","db","cluster","database","allFlags","flags","intersections","partResult","$enumerator","intellisenseTests","parserTests","expected","actual","errorMessage","message","condition","availableClusters","clusterSchema","queriesAndResults","testCase","actualResult","expectedResult","expectedTokens","tokens_2","tokens_21","tokens_3","fullValidation","requestsAndExpectedApiKinds","request","expectedFields","entititesList","entity1","intelliSenseProvider","testPatterns","patternsWithLet","testPattern","failMessage","expectedRule","failMessage1","testPattern1","matchingSuccess","databases","i3","table1","columns1","i4","tables","functions","expectedOptions","unionOfAllColumns","additionalOptions","additionalOptionsIncludingIn","additionalOptionsIncludingKind","actualOptions","existingFields","resolvedEntities","command1","entities1","resolvedEntities1","result1","command2","entities2","resolvedEntities2","result2","flatten","finalEntitiesList","entitiesResolveResult","isAdditionalColumns","filterKeyword","containsKeyword","policiesCommands","policyCommand","expectedMatchingRule","matchingRule","contextMatch","accounts","services","connectionContext","statement","cachedReference","appendingPart","accountNames","servicesNames","servicesAndOptionsTokens","alterServicesAndOptionsTokens","removeServicesAndOptionsTokens","toolTipCommands","command3","command4","command5","command6","command7","command8","command9","command10","command11","command12","command13","command14","command15","command16","command17","command18","command19","command20","command21","command22","command23","command24","command25","internalCmDocumentationRoot","externalCmDocumentationRoot","account","service","contextWithoutOpertaion","contextualOptionsCollection","sortedCollections","matchedString","resultsUnordered","clauses","clause","operatorEntitiesMap","pipeParts","opAnRest","opEntitiesMap","wasAdded","parsedColumnsString","parsedColumns","columnCandidate","lastPipePart","entitites","field","fields","safeKnownEntities","field1","changed","extendedColumnName","convertedMatch","inputColumn","explicitlySpecifiedResultColumnCount","resultEntities","resultSuffixes","argName","generatedName","generateImplicitColumnNames","argMinMaxEntities","parsedEntities","correctedOp","preserveNames","parsedEntity","arg0","regexExpression","en","correctedField","fieldname","fieldReplaced","argCount","wildCardMatch","matchingEntities","fieldname1","fieldname2","escapedField","matchesKeywords","lastMatch","contextMatchRegex","startat","matchingRegex","transformationRegex","letStatement","letMatch","letMatches","variable","databaseSchema","schemaResolver","allowClientDirectives","commandEntities","outputColumns","remoteColumnMappingsToTables","dbNames","localWildcardedTablesColumns","performUnion","contextParts","columnMappingsToTables","mapping","partDbs","intersection","contextWithNoOperation","kustoCommandContextPart","clusterUriOrAlias","databaseNameOrAlias","remoteContext","matchedTables","matchedTableNames","entitiesTables","dbSchemas","allTables","columnsToTablesMapping","orderedColumns","targetCluster","remoteTableContext","hasClusterReference","hasDatabaseReference","localDatabases","pluginOptions","columnNamesWithStringTypes","matchingTokens","afterApplyPolicies","columnNamesWithNonStringTypes","columnNamesWithTypeDateTime","extendedEntities","replaceEntities","unionCommandSegments","commandClauses","unifiedEntities","clauseEntities","usedFunctions","funcitonStatementsBuilder","funcitonAdditions","moreFunctions","isFuncPresentRegex","funcExpression","analyzeResult","hasPipe","projectionMatch","projectedList","projectedListCopy","knownProjectedEntities","withsourceMatch","tableNameColumn","entity2","isOriginalEntitiesListEmpty","pair","tuple","targetName","sourceName","removedEntities","wasChanged","appendedCommand","commandWithoutStringLiterals","hashCode","defaultContextMatcher","contextOperation","isFind","isSearch","requireContext","letStatements","expression","replaceRegex","parameters2","parameters3","parameters4","parameters5","parameters6","parameters7","parameters8","parameters9","parameters10","parameters11","parameters12","parameters13","parameters14","parameters15","parameters16","parameters17","parameters18","parameters19","parameters20","parentTableName","$v","func","_o9","_o10","_o11","_o12","_o13","_o14","_o15","_o16","_o17","_o18","_o19","_o20","_o21","_o22","_o23","_o24","_o25","_o26","_o27","_o28","_o29","_o30","_o31","_o32","_o33","_o34","_o35","_o36","_o37","_o4","_o5","_o6","_o7","_o8","vals","isMatch","dbSchema","keyMatcher","dbMatcher","tableMatcher","filteredDb","orderedDatabases"],"sourceRoot":"","file":"../lib/monaco/min/vs/language/kusto/kusto.javascript.client.min.js"}