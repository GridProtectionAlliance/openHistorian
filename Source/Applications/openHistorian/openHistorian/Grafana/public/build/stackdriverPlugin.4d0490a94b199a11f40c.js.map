{"version":3,"sources":["webpack:///./public/app/plugins/datasource/stackdriver/types.ts","webpack:///./public/app/plugins/datasource/stackdriver/StackdriverMetricFindQuery.ts","webpack:///./public/app/plugins/datasource/stackdriver/datasource.ts","webpack:///./public/app/plugins/datasource/stackdriver/query_ctrl.ts","webpack:///./public/app/plugins/datasource/stackdriver/config_ctrl.ts","webpack:///./public/app/plugins/datasource/stackdriver/annotations_query_ctrl.ts","webpack:///./public/app/plugins/datasource/stackdriver/components/VariableQueryEditor.tsx","webpack:///./public/app/plugins/datasource/stackdriver/module.ts"],"names":["MetricFindQueryTypes","StackdriverMetricFindQuery","datasource","this","prototype","execute","query","selectedQueryType","Services","handleServiceQuery","MetricTypes","handleMetricTypesQuery","LabelKeys","handleLabelKeysQuery","LabelValues","handleLabelValuesQuery","ResourceTypes","handleResourceTypeQuery","Aligners","handleAlignersQuery","AlignmentPeriods","handleAlignmentPeriodQuery","Aggregations","handleAggregationQuery","error","console","getMetricTypes","projectName","metricDescriptors","_a","sent","Object","functions","map","s","text","serviceShortName","value","service","expandable","selectedService","_b","templateSrv","replace","displayName","type","selectedMetricType","toFindQueryResult","labelKey","getLabels","labels","interpolatedKey","hasOwnProperty","_c","find","m","_this","valueType","metricKind","constants","x","isString_default","tslib_es6","_super","StackdriverDatasource","instanceSettings","backendSrv","timeSrv","call","baseUrl","url","jsonData","defaultProject","authenticationType","$inject","variables","v","name","configurable","options","targets","filter","target","hide","metricType","t","refId","intervalMs","datasourceId","id","scopedVars","crossSeriesReducer","perSeriesAligner","alignmentPeriod","groupBys","interpolateGroupBys","view","filters","interpolateFilters","aliasBy","length","datasourceRequest","method","from","range","valueOf","toString","to","queries","data","lodash_default","a","chunk","key","operator","condition","reduce","res","flatten","completeFilter","f","getTimeSeries","timeRange","response","result","results","interpolatedGroupBys","forEach","gb","interpolated","split","Array","isArray","concat","push","resolvePanelUnitFromTargets","unit","every","queryRes","series","timeSerie","datapoints","points","meta","annotation","title","tags","tables","rows","time","Date","parse","stackdriver_StackdriverMetricFindQuery","trys","path","status","message","statusText","defaultErrorMessage","error_1","isString","code","formatStackdriverError","JSON","err","ensureDefaultProjectQuery","error_2","metricTypes","metricsApiPath","error_3","app_events","emit","types","dsRequestError","doRequest","maxRetries","catch","query_ctrl_StackdriverQueryCtrl","StackdriverQueryCtrl","$scope","$injector","onExecuteQuery","bind","onQueryChange","assign","ctrl","refresh","templateUrl","StackdriverConfigCtrl","datasourceSrv","validationErrors","defaultAuthenticationType","current","secureJsonData","secureJsonFields","authenticationTypes","save","jwt","privateKey","private_key","tokenUri","token_uri","clientEmail","client_email","project_id","validateJwt","resetValidationMessages","inputDataValid","onUpload","json","jsonText","onPasteJwt","e","originalEvent","clipboardData","getData","StackdriverAnnotationsQueryCtrl","StackdriverVariableQueryEditor","props","queryTypes","defaults","state","label","some","services","event","onLabelKeyChange","setState","componentDidUpdate","queryModel","q","onChange","l","insertTemplateVariables","templateVariables","renderQueryTypeSwitch","queryType","react_default","createElement","components","onValueChange","onServiceChange","Fragment","onMetricTypeChange","render","onQueryTypeChange","__webpack_require__","d","__webpack_exports__","VariableQueryEditor_StackdriverVariableQueryEditor"],"mappings":"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","file":"stackdriverPlugin.4d0490a94b199a11f40c.js","sourcesContent":["import { DataQuery, DataSourceJsonData } from '@grafana/data';\n\nexport enum MetricFindQueryTypes {\n  Services = 'services',\n  MetricTypes = 'metricTypes',\n  LabelKeys = 'labelKeys',\n  LabelValues = 'labelValues',\n  ResourceTypes = 'resourceTypes',\n  Aggregations = 'aggregations',\n  Aligners = 'aligners',\n  AlignmentPeriods = 'alignmentPeriods',\n}\n\nexport interface VariableQueryData {\n  selectedQueryType: string;\n  metricDescriptors: any[];\n  selectedService: string;\n  selectedMetricType: string;\n  labels: string[];\n  labelKey: string;\n  metricTypes: Array<{ value: string; name: string }>;\n  services: Array<{ value: string; name: string }>;\n}\n\nexport interface StackdriverQuery extends DataQuery {\n  defaultProject?: string;\n  unit?: string;\n  metricType: string;\n  service?: string;\n  refId: string;\n  crossSeriesReducer: string;\n  alignmentPeriod?: string;\n  perSeriesAligner: string;\n  groupBys?: string[];\n  filters?: string[];\n  aliasBy?: string;\n  metricKind: string;\n  valueType: string;\n  datasourceId?: number;\n  view?: string;\n}\n\nexport interface StackdriverOptions extends DataSourceJsonData {\n  defaultProject?: string;\n  authenticationType?: string;\n}\n\nexport interface AnnotationTarget {\n  defaultProject: string;\n  metricType: string;\n  refId: string;\n  filters: string[];\n  metricKind: string;\n  valueType: string;\n  title: string;\n  text: string;\n}\n\nexport interface QueryMeta {\n  alignmentPeriod: string;\n  rawQuery: string;\n  rawQueryString: string;\n  metricLabels: { [key: string]: string[] };\n  resourceLabels: { [key: string]: string[] };\n  resourceTypes: string[];\n}\n\nexport interface MetricDescriptor {\n  valueType: string;\n  metricKind: string;\n  type: string;\n  unit: string;\n  service: string;\n  serviceShortName: string;\n  displayName: string;\n  description: string;\n}\n\nexport interface Segment {\n  type: string;\n  value: string;\n}\n\nexport interface Filter {\n  key: string;\n  operator: string;\n  value: string;\n  condition: string;\n}\n","import isString from 'lodash/isString';\nimport { alignmentPeriods } from './constants';\nimport { MetricFindQueryTypes } from './types';\nimport {\n  getMetricTypesByService,\n  getAlignmentOptionsByMetric,\n  getAggregationOptionsByMetric,\n  extractServicesFromMetricDescriptors,\n  getLabelKeys,\n} from './functions';\n\nexport default class StackdriverMetricFindQuery {\n  constructor(private datasource: any) {}\n\n  async execute(query: any) {\n    try {\n      switch (query.selectedQueryType) {\n        case MetricFindQueryTypes.Services:\n          return this.handleServiceQuery();\n        case MetricFindQueryTypes.MetricTypes:\n          return this.handleMetricTypesQuery(query);\n        case MetricFindQueryTypes.LabelKeys:\n          return this.handleLabelKeysQuery(query);\n        case MetricFindQueryTypes.LabelValues:\n          return this.handleLabelValuesQuery(query);\n        case MetricFindQueryTypes.ResourceTypes:\n          return this.handleResourceTypeQuery(query);\n        case MetricFindQueryTypes.Aligners:\n          return this.handleAlignersQuery(query);\n        case MetricFindQueryTypes.AlignmentPeriods:\n          return this.handleAlignmentPeriodQuery();\n        case MetricFindQueryTypes.Aggregations:\n          return this.handleAggregationQuery(query);\n        default:\n          return [];\n      }\n    } catch (error) {\n      console.error(`Could not run StackdriverMetricFindQuery ${query}`, error);\n      return [];\n    }\n  }\n\n  async handleServiceQuery() {\n    const metricDescriptors = await this.datasource.getMetricTypes(this.datasource.projectName);\n    const services: any[] = extractServicesFromMetricDescriptors(metricDescriptors);\n    return services.map(s => ({\n      text: s.serviceShortName,\n      value: s.service,\n      expandable: true,\n    }));\n  }\n\n  async handleMetricTypesQuery({ selectedService }: any) {\n    if (!selectedService) {\n      return [];\n    }\n    const metricDescriptors = await this.datasource.getMetricTypes(this.datasource.projectName);\n    return getMetricTypesByService(metricDescriptors, this.datasource.templateSrv.replace(selectedService)).map(\n      (s: any) => ({\n        text: s.displayName,\n        value: s.type,\n        expandable: true,\n      })\n    );\n  }\n\n  async handleLabelKeysQuery({ selectedMetricType }: any) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const labelKeys = await getLabelKeys(this.datasource, selectedMetricType);\n    return labelKeys.map(this.toFindQueryResult);\n  }\n\n  async handleLabelValuesQuery({ selectedMetricType, labelKey }: any) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const refId = 'handleLabelValuesQuery';\n    const labels = await this.datasource.getLabels(selectedMetricType, refId, [labelKey]);\n    const interpolatedKey = this.datasource.templateSrv.replace(labelKey);\n    const values = labels.hasOwnProperty(interpolatedKey) ? labels[interpolatedKey] : [];\n    return values.map(this.toFindQueryResult);\n  }\n\n  async handleResourceTypeQuery({ selectedMetricType }: any) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const refId = 'handleResourceTypeQueryQueryType';\n    const labels = await this.datasource.getLabels(selectedMetricType, refId);\n    return labels['resource.type'].map(this.toFindQueryResult);\n  }\n\n  async handleAlignersQuery({ selectedMetricType }: any) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const metricDescriptors = await this.datasource.getMetricTypes(this.datasource.projectName);\n    const { valueType, metricKind } = metricDescriptors.find(\n      (m: any) => m.type === this.datasource.templateSrv.replace(selectedMetricType)\n    );\n    return getAlignmentOptionsByMetric(valueType, metricKind).map(this.toFindQueryResult);\n  }\n\n  async handleAggregationQuery({ selectedMetricType }: any) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const metricDescriptors = await this.datasource.getMetricTypes(this.datasource.projectName);\n    const { valueType, metricKind } = metricDescriptors.find(\n      (m: any) => m.type === this.datasource.templateSrv.replace(selectedMetricType)\n    );\n    return getAggregationOptionsByMetric(valueType, metricKind).map(this.toFindQueryResult);\n  }\n\n  handleAlignmentPeriodQuery() {\n    return alignmentPeriods.map(this.toFindQueryResult);\n  }\n\n  toFindQueryResult(x: any) {\n    return isString(x) ? { text: x, expandable: true } : { ...x, expandable: true };\n  }\n}\n","import { stackdriverUnitMappings } from './constants';\nimport appEvents from 'app/core/app_events';\nimport _ from 'lodash';\nimport StackdriverMetricFindQuery from './StackdriverMetricFindQuery';\nimport { StackdriverQuery, MetricDescriptor, StackdriverOptions, Filter } from './types';\nimport { DataSourceApi, DataQueryRequest, DataSourceInstanceSettings, ScopedVars } from '@grafana/data';\nimport { BackendSrv } from 'app/core/services/backend_srv';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport { TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { CoreEvents } from 'app/types';\n\nexport default class StackdriverDatasource extends DataSourceApi<StackdriverQuery, StackdriverOptions> {\n  url: string;\n  baseUrl: string;\n  projectName: string;\n  authenticationType: string;\n  queryPromise: Promise<any>;\n  metricTypes: any[];\n\n  /** @ngInject */\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<StackdriverOptions>,\n    private backendSrv: BackendSrv,\n    public templateSrv: TemplateSrv,\n    private timeSrv: TimeSrv\n  ) {\n    super(instanceSettings);\n    this.baseUrl = `/stackdriver/`;\n    this.url = instanceSettings.url;\n    this.projectName = instanceSettings.jsonData.defaultProject || '';\n    this.authenticationType = instanceSettings.jsonData.authenticationType || 'jwt';\n    this.metricTypes = [];\n  }\n\n  get variables() {\n    return this.templateSrv.variables.map(v => `$${v.name}`);\n  }\n\n  async getTimeSeries(options: any) {\n    const queries = options.targets\n      .filter((target: any) => {\n        return !target.hide && target.metricType;\n      })\n      .map((t: any) => {\n        return {\n          refId: t.refId,\n          intervalMs: options.intervalMs,\n          datasourceId: this.id,\n          metricType: this.templateSrv.replace(t.metricType, options.scopedVars || {}),\n          crossSeriesReducer: this.templateSrv.replace(t.crossSeriesReducer || 'REDUCE_MEAN', options.scopedVars || {}),\n          perSeriesAligner: this.templateSrv.replace(t.perSeriesAligner, options.scopedVars || {}),\n          alignmentPeriod: this.templateSrv.replace(t.alignmentPeriod, options.scopedVars || {}),\n          groupBys: this.interpolateGroupBys(t.groupBys, options.scopedVars),\n          view: t.view || 'FULL',\n          filters: this.interpolateFilters(t.filters, options.scopedVars),\n          aliasBy: this.templateSrv.replace(t.aliasBy, options.scopedVars || {}),\n          type: 'timeSeriesQuery',\n        };\n      });\n\n    if (queries.length > 0) {\n      const { data } = await this.backendSrv.datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: options.range.from.valueOf().toString(),\n          to: options.range.to.valueOf().toString(),\n          queries,\n        },\n      });\n      return data;\n    } else {\n      return { results: [] };\n    }\n  }\n\n  interpolateFilters(filters: string[], scopedVars: ScopedVars) {\n    const completeFilter = _.chunk(filters, 4)\n      .map(([key, operator, value, condition = 'AND']) => ({\n        key,\n        operator,\n        value,\n        condition,\n      }))\n      .reduce((res, filter) => (filter.value ? [...res, filter] : res), []);\n\n    const filterArray = _.flatten(\n      completeFilter.map(({ key, operator, value, condition }: Filter) => [key, operator, value, condition])\n    );\n\n    return (filterArray || []).map(f => {\n      return this.templateSrv.replace(f, scopedVars || {}, 'regex');\n    });\n  }\n\n  async getLabels(metricType: string, refId: string, groupBys?: string[]) {\n    const response = await this.getTimeSeries({\n      targets: [\n        {\n          refId: refId,\n          datasourceId: this.id,\n          metricType: this.templateSrv.replace(metricType),\n          groupBys: this.interpolateGroupBys(groupBys || [], {}),\n          crossSeriesReducer: 'REDUCE_NONE',\n          view: 'HEADERS',\n        },\n      ],\n      range: this.timeSrv.timeRange(),\n    });\n    const result = response.results[refId];\n    return result && result.meta ? result.meta.labels : {};\n  }\n\n  interpolateGroupBys(groupBys: string[], scopedVars: {}): string[] {\n    let interpolatedGroupBys: any[] = [];\n    (groupBys || []).forEach(gb => {\n      const interpolated = this.templateSrv.replace(gb, scopedVars || {}, 'csv').split(',');\n      if (Array.isArray(interpolated)) {\n        interpolatedGroupBys = interpolatedGroupBys.concat(interpolated);\n      } else {\n        interpolatedGroupBys.push(interpolated);\n      }\n    });\n    return interpolatedGroupBys;\n  }\n\n  resolvePanelUnitFromTargets(targets: any[]) {\n    let unit;\n    if (targets.length > 0 && targets.every(t => t.unit === targets[0].unit)) {\n      if (stackdriverUnitMappings.hasOwnProperty(targets[0].unit)) {\n        // @ts-ignore\n        unit = stackdriverUnitMappings[targets[0].unit];\n      }\n    }\n    return unit;\n  }\n\n  async query(options: DataQueryRequest<StackdriverQuery>) {\n    const result: any[] = [];\n    const data = await this.getTimeSeries(options);\n    if (data.results) {\n      Object['values'](data.results).forEach((queryRes: any) => {\n        if (!queryRes.series) {\n          return;\n        }\n        const unit = this.resolvePanelUnitFromTargets(options.targets);\n        queryRes.series.forEach((series: any) => {\n          let timeSerie: any = {\n            target: series.name,\n            datapoints: series.points,\n            refId: queryRes.refId,\n            meta: queryRes.meta,\n          };\n          if (unit) {\n            timeSerie = { ...timeSerie, unit };\n          }\n          result.push(timeSerie);\n        });\n      });\n      return { data: result };\n    } else {\n      return { data: [] };\n    }\n  }\n\n  async annotationQuery(options: any) {\n    const annotation = options.annotation;\n    const queries = [\n      {\n        refId: 'annotationQuery',\n        datasourceId: this.id,\n        metricType: this.templateSrv.replace(annotation.target.metricType, options.scopedVars || {}),\n        crossSeriesReducer: 'REDUCE_NONE',\n        perSeriesAligner: 'ALIGN_NONE',\n        title: this.templateSrv.replace(annotation.target.title, options.scopedVars || {}),\n        text: this.templateSrv.replace(annotation.target.text, options.scopedVars || {}),\n        tags: this.templateSrv.replace(annotation.target.tags, options.scopedVars || {}),\n        view: 'FULL',\n        filters: this.interpolateFilters(annotation.target.filters || [], options.scopedVars),\n        type: 'annotationQuery',\n      },\n    ];\n\n    const { data } = await this.backendSrv.datasourceRequest({\n      url: '/api/tsdb/query',\n      method: 'POST',\n      data: {\n        from: options.range.from.valueOf().toString(),\n        to: options.range.to.valueOf().toString(),\n        queries,\n      },\n    });\n\n    const results = data.results['annotationQuery'].tables[0].rows.map((v: any) => {\n      return {\n        annotation: annotation,\n        time: Date.parse(v[0]),\n        title: v[1],\n        tags: [],\n        text: v[3],\n      } as any;\n    });\n\n    return results;\n  }\n\n  async metricFindQuery(query: string) {\n    const stackdriverMetricFindQuery = new StackdriverMetricFindQuery(this);\n    return stackdriverMetricFindQuery.execute(query);\n  }\n\n  async testDatasource() {\n    let status, message;\n    const defaultErrorMessage = 'Cannot connect to Stackdriver API';\n    try {\n      const projectName = await this.getDefaultProject();\n      const path = `v3/projects/${projectName}/metricDescriptors`;\n      const response = await this.doRequest(`${this.baseUrl}${path}`);\n      if (response.status === 200) {\n        status = 'success';\n        message = 'Successfully queried the Stackdriver API.';\n      } else {\n        status = 'error';\n        message = response.statusText ? response.statusText : defaultErrorMessage;\n      }\n    } catch (error) {\n      status = 'error';\n      if (_.isString(error)) {\n        message = error;\n      } else {\n        message = 'Stackdriver: ';\n        message += error.statusText ? error.statusText : defaultErrorMessage;\n        if (error.data && error.data.error && error.data.error.code) {\n          message += ': ' + error.data.error.code + '. ' + error.data.error.message;\n        }\n      }\n    } finally {\n      return {\n        status,\n        message,\n      };\n    }\n  }\n\n  formatStackdriverError(error: any) {\n    let message = 'Stackdriver: ';\n    message += error.statusText ? error.statusText + ': ' : '';\n    if (error.data && error.data.error) {\n      try {\n        const res = JSON.parse(error.data.error);\n        message += res.error.code + '. ' + res.error.message;\n      } catch (err) {\n        message += error.data.error;\n      }\n    } else {\n      message += 'Cannot connect to Stackdriver API';\n    }\n    return message;\n  }\n\n  async getDefaultProject() {\n    try {\n      if (this.authenticationType === 'gce' || !this.projectName) {\n        const { data } = await this.backendSrv.datasourceRequest({\n          url: '/api/tsdb/query',\n          method: 'POST',\n          data: {\n            queries: [\n              {\n                refId: 'ensureDefaultProjectQuery',\n                type: 'ensureDefaultProjectQuery',\n                datasourceId: this.id,\n              },\n            ],\n          },\n        });\n        this.projectName = data.results.ensureDefaultProjectQuery.meta.defaultProject;\n        return this.projectName;\n      } else {\n        return this.projectName;\n      }\n    } catch (error) {\n      throw this.formatStackdriverError(error);\n    }\n  }\n\n  async getMetricTypes(projectName: string): Promise<MetricDescriptor[]> {\n    try {\n      if (this.metricTypes.length === 0) {\n        const metricsApiPath = `v3/projects/${projectName}/metricDescriptors`;\n        const { data } = await this.doRequest(`${this.baseUrl}${metricsApiPath}`);\n\n        this.metricTypes = data.metricDescriptors.map((m: any) => {\n          const [service] = m.type.split('/');\n          const [serviceShortName] = service.split('.');\n          m.service = service;\n          m.serviceShortName = serviceShortName;\n          m.displayName = m.displayName || m.type;\n\n          return m;\n        });\n      }\n\n      return this.metricTypes;\n    } catch (error) {\n      appEvents.emit(CoreEvents.dsRequestError, { error: { data: { error: this.formatStackdriverError(error) } } });\n      return [];\n    }\n  }\n\n  async doRequest(url: string, maxRetries = 1) {\n    return this.backendSrv\n      .datasourceRequest({\n        url: this.url + url,\n        method: 'GET',\n      })\n      .catch((error: any) => {\n        if (maxRetries > 0) {\n          return this.doRequest(url, maxRetries - 1);\n        }\n\n        throw error;\n      });\n  }\n}\n","import { QueryCtrl } from 'app/plugins/sdk';\nimport { StackdriverQuery } from './types';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport { auto } from 'angular';\n\nexport class StackdriverQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n  templateSrv: TemplateSrv;\n\n  /** @ngInject */\n  constructor($scope: any, $injector: auto.IInjectorService, templateSrv: TemplateSrv) {\n    super($scope, $injector);\n    this.templateSrv = templateSrv;\n    this.onQueryChange = this.onQueryChange.bind(this);\n    this.onExecuteQuery = this.onExecuteQuery.bind(this);\n  }\n\n  onQueryChange(target: StackdriverQuery) {\n    Object.assign(this.target, target);\n  }\n\n  onExecuteQuery() {\n    this.$scope.ctrl.refresh();\n  }\n}\n","import DatasourceSrv from 'app/features/plugins/datasource_srv';\n\nexport interface JWT {\n  private_key: any;\n  token_uri: any;\n  client_email: any;\n  project_id: any;\n}\n\nexport class StackdriverConfigCtrl {\n  static templateUrl = 'public/app/plugins/datasource/stackdriver/partials/config.html';\n  datasourceSrv: any;\n  current: any;\n  jsonText: string;\n  validationErrors: string[] = [];\n  inputDataValid: boolean;\n  authenticationTypes: any[];\n  defaultAuthenticationType: string;\n\n  /** @ngInject */\n  constructor(datasourceSrv: DatasourceSrv) {\n    this.defaultAuthenticationType = 'jwt';\n    this.datasourceSrv = datasourceSrv;\n    this.current.jsonData = this.current.jsonData || {};\n    this.current.jsonData.authenticationType = this.current.jsonData.authenticationType\n      ? this.current.jsonData.authenticationType\n      : this.defaultAuthenticationType;\n    this.current.secureJsonData = this.current.secureJsonData || {};\n    this.current.secureJsonFields = this.current.secureJsonFields || {};\n    this.authenticationTypes = [\n      { key: this.defaultAuthenticationType, value: 'Google JWT File' },\n      { key: 'gce', value: 'GCE Default Service Account' },\n    ];\n  }\n\n  save(jwt: JWT) {\n    this.current.secureJsonData.privateKey = jwt.private_key;\n    this.current.jsonData.tokenUri = jwt.token_uri;\n    this.current.jsonData.clientEmail = jwt.client_email;\n    this.current.jsonData.defaultProject = jwt.project_id;\n  }\n\n  validateJwt(jwt: JWT) {\n    this.resetValidationMessages();\n    if (!jwt.private_key || jwt.private_key.length === 0) {\n      this.validationErrors.push('Private key field missing in JWT file.');\n    }\n\n    if (!jwt.token_uri || jwt.token_uri.length === 0) {\n      this.validationErrors.push('Token URI field missing in JWT file.');\n    }\n\n    if (!jwt.client_email || jwt.client_email.length === 0) {\n      this.validationErrors.push('Client Email field missing in JWT file.');\n    }\n\n    if (!jwt.project_id || jwt.project_id.length === 0) {\n      this.validationErrors.push('Project Id field missing in JWT file.');\n    }\n\n    if (this.validationErrors.length === 0) {\n      this.inputDataValid = true;\n      return true;\n    }\n\n    return false;\n  }\n\n  onUpload(json: JWT) {\n    this.jsonText = '';\n    if (this.validateJwt(json)) {\n      this.save(json);\n    }\n  }\n\n  onPasteJwt(e: any) {\n    try {\n      const json = JSON.parse(e.originalEvent.clipboardData.getData('text/plain') || this.jsonText);\n      if (this.validateJwt(json)) {\n        this.save(json);\n      }\n    } catch (error) {\n      this.resetValidationMessages();\n      this.validationErrors.push(`Invalid json: ${error.message}`);\n    }\n  }\n\n  resetValidationMessages() {\n    this.validationErrors = [];\n    this.inputDataValid = false;\n    this.jsonText = '';\n\n    this.current.jsonData = Object.assign({}, { authenticationType: this.current.jsonData.authenticationType });\n    this.current.secureJsonData = {};\n    this.current.secureJsonFields = {};\n  }\n}\n","import { TemplateSrv } from 'app/features/templating/template_srv';\n\nexport class StackdriverAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n  annotation: any;\n  templateSrv: TemplateSrv;\n\n  /** @ngInject */\n  constructor() {\n    this.annotation.target = this.annotation.target || {};\n    this.onQueryChange = this.onQueryChange.bind(this);\n  }\n\n  onQueryChange(target: any) {\n    Object.assign(this.annotation.target, target);\n  }\n}\n","import React, { ChangeEvent, PureComponent } from 'react';\nimport { VariableQueryProps } from 'app/types/plugins';\nimport { SimpleSelect } from './';\nimport { getMetricTypes, getLabelKeys, extractServicesFromMetricDescriptors } from '../functions';\nimport { MetricFindQueryTypes, VariableQueryData } from '../types';\n\nexport class StackdriverVariableQueryEditor extends PureComponent<VariableQueryProps, VariableQueryData> {\n  queryTypes: Array<{ value: string; name: string }> = [\n    { value: MetricFindQueryTypes.Services, name: 'Services' },\n    { value: MetricFindQueryTypes.MetricTypes, name: 'Metric Types' },\n    { value: MetricFindQueryTypes.LabelKeys, name: 'Label Keys' },\n    { value: MetricFindQueryTypes.LabelValues, name: 'Label Values' },\n    { value: MetricFindQueryTypes.ResourceTypes, name: 'Resource Types' },\n    { value: MetricFindQueryTypes.Aggregations, name: 'Aggregations' },\n    { value: MetricFindQueryTypes.Aligners, name: 'Aligners' },\n    { value: MetricFindQueryTypes.AlignmentPeriods, name: 'Alignment Periods' },\n  ];\n\n  defaults: VariableQueryData = {\n    selectedQueryType: this.queryTypes[0].value,\n    metricDescriptors: [],\n    selectedService: '',\n    selectedMetricType: '',\n    labels: [],\n    labelKey: '',\n    metricTypes: [],\n    services: [],\n  };\n\n  constructor(props: VariableQueryProps) {\n    super(props);\n    this.state = Object.assign(this.defaults, this.props.query);\n  }\n\n  async componentDidMount() {\n    const metricDescriptors = await this.props.datasource.getMetricTypes(this.props.datasource.projectName);\n    const services = extractServicesFromMetricDescriptors(metricDescriptors).map((m: any) => ({\n      value: m.service,\n      name: m.serviceShortName,\n    }));\n\n    let selectedService = '';\n    if (services.some(s => s.value === this.props.templateSrv.replace(this.state.selectedService))) {\n      selectedService = this.state.selectedService;\n    } else if (services && services.length > 0) {\n      selectedService = services[0].value;\n    }\n\n    const { metricTypes, selectedMetricType } = getMetricTypes(\n      metricDescriptors,\n      this.state.selectedMetricType,\n      this.props.templateSrv.replace(this.state.selectedMetricType),\n      this.props.templateSrv.replace(selectedService)\n    );\n    const state: any = {\n      services,\n      selectedService,\n      metricTypes,\n      selectedMetricType,\n      metricDescriptors,\n      ...(await this.getLabels(selectedMetricType)),\n    };\n    this.setState(state);\n  }\n\n  async onQueryTypeChange(event: ChangeEvent<HTMLSelectElement>) {\n    const state: any = {\n      selectedQueryType: event.target.value,\n      ...(await this.getLabels(this.state.selectedMetricType, event.target.value)),\n    };\n    this.setState(state);\n  }\n\n  async onServiceChange(event: ChangeEvent<HTMLSelectElement>) {\n    const { metricTypes, selectedMetricType } = getMetricTypes(\n      this.state.metricDescriptors,\n      this.state.selectedMetricType,\n      this.props.templateSrv.replace(this.state.selectedMetricType),\n      this.props.templateSrv.replace(event.target.value)\n    );\n    const state: any = {\n      selectedService: event.target.value,\n      metricTypes,\n      selectedMetricType,\n      ...(await this.getLabels(selectedMetricType)),\n    };\n    this.setState(state);\n  }\n\n  async onMetricTypeChange(event: ChangeEvent<HTMLSelectElement>) {\n    const state: any = { selectedMetricType: event.target.value, ...(await this.getLabels(event.target.value)) };\n    this.setState(state);\n  }\n\n  onLabelKeyChange(event: ChangeEvent<HTMLSelectElement>) {\n    this.setState({ labelKey: event.target.value });\n  }\n\n  componentDidUpdate() {\n    const { metricDescriptors, labels, metricTypes, services, ...queryModel } = this.state;\n    const query = this.queryTypes.find(q => q.value === this.state.selectedQueryType);\n    this.props.onChange(queryModel, `Stackdriver - ${query.name}`);\n  }\n\n  async getLabels(selectedMetricType: string, selectedQueryType = this.state.selectedQueryType) {\n    let result = { labels: this.state.labels, labelKey: this.state.labelKey };\n    if (selectedMetricType && selectedQueryType === MetricFindQueryTypes.LabelValues) {\n      const labels = await getLabelKeys(this.props.datasource, selectedMetricType);\n      const labelKey = labels.some(l => l === this.props.templateSrv.replace(this.state.labelKey))\n        ? this.state.labelKey\n        : labels[0];\n      result = { labels, labelKey };\n    }\n    return result;\n  }\n\n  insertTemplateVariables(options: any) {\n    const templateVariables = this.props.templateSrv.variables.map((v: any) => ({\n      name: `$${v.name}`,\n      value: `$${v.name}`,\n    }));\n    return [...templateVariables, ...options];\n  }\n\n  renderQueryTypeSwitch(queryType: string) {\n    switch (queryType) {\n      case MetricFindQueryTypes.MetricTypes:\n        return (\n          <SimpleSelect\n            value={this.state.selectedService}\n            options={this.insertTemplateVariables(this.state.services)}\n            onValueChange={e => this.onServiceChange(e)}\n            label=\"Service\"\n          />\n        );\n      case MetricFindQueryTypes.LabelKeys:\n      case MetricFindQueryTypes.LabelValues:\n      case MetricFindQueryTypes.ResourceTypes:\n        return (\n          <>\n            <SimpleSelect\n              value={this.state.selectedService}\n              options={this.insertTemplateVariables(this.state.services)}\n              onValueChange={e => this.onServiceChange(e)}\n              label=\"Service\"\n            />\n            <SimpleSelect\n              value={this.state.selectedMetricType}\n              options={this.insertTemplateVariables(this.state.metricTypes)}\n              onValueChange={e => this.onMetricTypeChange(e)}\n              label=\"Metric Type\"\n            />\n            {queryType === MetricFindQueryTypes.LabelValues && (\n              <SimpleSelect\n                value={this.state.labelKey}\n                options={this.insertTemplateVariables(this.state.labels.map(l => ({ value: l, name: l })))}\n                onValueChange={e => this.onLabelKeyChange(e)}\n                label=\"Label Key\"\n              />\n            )}\n          </>\n        );\n      case MetricFindQueryTypes.Aligners:\n      case MetricFindQueryTypes.Aggregations:\n        return (\n          <>\n            <SimpleSelect\n              value={this.state.selectedService}\n              options={this.insertTemplateVariables(this.state.services)}\n              onValueChange={e => this.onServiceChange(e)}\n              label=\"Service\"\n            />\n            <SimpleSelect\n              value={this.state.selectedMetricType}\n              options={this.insertTemplateVariables(this.state.metricTypes)}\n              onValueChange={e => this.onMetricTypeChange(e)}\n              label=\"Metric Type\"\n            />\n          </>\n        );\n      default:\n        return '';\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <SimpleSelect\n          value={this.state.selectedQueryType}\n          options={this.queryTypes}\n          onValueChange={e => this.onQueryTypeChange(e)}\n          label=\"Query Type\"\n        />\n        {this.renderQueryTypeSwitch(this.state.selectedQueryType)}\n      </>\n    );\n  }\n}\n","import StackdriverDatasource from './datasource';\nimport { StackdriverQueryCtrl } from './query_ctrl';\nimport { StackdriverConfigCtrl } from './config_ctrl';\nimport { StackdriverAnnotationsQueryCtrl } from './annotations_query_ctrl';\nimport { StackdriverVariableQueryEditor } from './components/VariableQueryEditor';\n\nexport {\n  StackdriverDatasource as Datasource,\n  StackdriverQueryCtrl as QueryCtrl,\n  StackdriverConfigCtrl as ConfigCtrl,\n  StackdriverAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n  StackdriverVariableQueryEditor as VariableQueryEditor,\n};\n"],"sourceRoot":""}