{"version":3,"file":"CreateTeam.17a90506935d6cab1986.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/RolePicker/TeamRolePicker.tsx","webpack://grafana/./public/app/core/components/RolePicker/hooks.ts","webpack://grafana/./public/app/features/teams/CreateTeam.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useAsyncFn } from 'react-use';\n\nimport { contextSrv } from 'app/core/core';\nimport { Role, AccessControlAction } from 'app/types';\n\nimport { RolePicker } from './RolePicker';\nimport { fetchTeamRoles, updateTeamRoles } from './api';\n\nexport interface Props {\n  teamId: number;\n  orgId?: number;\n  roleOptions: Role[];\n  disabled?: boolean;\n  onApplyRoles?: (newRoles: Role[]) => void;\n  pendingRoles?: Role[];\n  /**\n   * Set whether the component should send a request with the new roles to the\n   * backend in TeamRolePicker.onRolesChange (apply=false), or call {@link onApplyRoles}\n   * with the updated list of roles (apply=true).\n   *\n   * Besides it sets the RolePickerMenu's Button title to\n   *   * `Update` in case apply equals false\n   *   * `Apply` in case apply equals true\n   *\n   * @default false\n   */\n  apply?: boolean;\n  maxWidth?: string | number;\n}\n\nexport const TeamRolePicker = ({\n  teamId,\n  roleOptions,\n  disabled,\n  onApplyRoles,\n  pendingRoles,\n  apply = false,\n  maxWidth,\n}: Props) => {\n  const [{ loading, value: appliedRoles = [] }, getTeamRoles] = useAsyncFn(async () => {\n    try {\n      if (apply && Boolean(pendingRoles?.length)) {\n        return pendingRoles;\n      }\n\n      if (contextSrv.hasPermission(AccessControlAction.ActionTeamsRolesList)) {\n        return await fetchTeamRoles(teamId);\n      }\n    } catch (e) {\n      console.error('Error loading options', e);\n    }\n    return [];\n  }, [teamId, pendingRoles]);\n\n  useEffect(() => {\n    getTeamRoles();\n  }, [teamId, getTeamRoles, pendingRoles]);\n\n  const onRolesChange = async (roles: Role[]) => {\n    if (!apply) {\n      await updateTeamRoles(roles, teamId);\n      await getTeamRoles();\n    } else if (onApplyRoles) {\n      onApplyRoles(roles);\n    }\n  };\n\n  const canUpdateRoles =\n    contextSrv.hasPermission(AccessControlAction.ActionTeamsRolesAdd) &&\n    contextSrv.hasPermission(AccessControlAction.ActionTeamsRolesRemove);\n\n  return (\n    <RolePicker\n      apply={apply}\n      onRolesChange={onRolesChange}\n      roleOptions={roleOptions}\n      appliedRoles={appliedRoles}\n      isLoading={loading}\n      disabled={disabled}\n      basicRoleDisabled={true}\n      canUpdateRoles={canUpdateRoles}\n      maxWidth={maxWidth}\n    />\n  );\n};\n","import { useState } from 'react';\nimport useAsync from 'react-use/lib/useAsync';\n\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction } from 'app/types';\n\nimport { fetchRoleOptions } from './api';\n\nexport const useRoleOptions = (organizationId: number) => {\n  const [orgId, setOrgId] = useState(organizationId);\n\n  const { value = [] } = useAsync(async () => {\n    if (contextSrv.licensedAccessControlEnabled() && contextSrv.hasPermission(AccessControlAction.ActionRolesList)) {\n      return fetchRoleOptions(orgId);\n    }\n    return Promise.resolve([]);\n  }, [orgId]);\n\n  return [{ roleOptions: value }, setOrgId] as const;\n};\n","import React, { useState } from 'react';\n\nimport { NavModelItem } from '@grafana/data';\nimport { getBackendSrv, locationService } from '@grafana/runtime';\nimport { Button, Form, Field, Input, FieldSet } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { TeamRolePicker } from 'app/core/components/RolePicker/TeamRolePicker';\nimport { updateTeamRoles } from 'app/core/components/RolePicker/api';\nimport { useRoleOptions } from 'app/core/components/RolePicker/hooks';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction, Role, TeamDTO } from 'app/types';\n\nconst pageNav: NavModelItem = {\n  icon: 'users-alt',\n  id: 'team-new',\n  text: 'New team',\n  subTitle: 'Create a new team. Teams let you grant permissions to a group of users.',\n  breadcrumbs: [{ title: 'Configuration', url: 'org/teams' }],\n};\n\nexport const CreateTeam = (): JSX.Element => {\n  const currentOrgId = contextSrv.user.orgId;\n  const [pendingRoles, setPendingRoles] = useState<Role[]>([]);\n  const [{ roleOptions }] = useRoleOptions(currentOrgId);\n\n  const canUpdateRoles =\n    contextSrv.hasPermission(AccessControlAction.ActionUserRolesAdd) &&\n    contextSrv.hasPermission(AccessControlAction.ActionUserRolesRemove);\n\n  const createTeam = async (formModel: TeamDTO) => {\n    const newTeam = await getBackendSrv().post('/api/teams', formModel);\n    if (newTeam.teamId) {\n      try {\n        await contextSrv.fetchUserPermissions();\n        if (contextSrv.licensedAccessControlEnabled() && canUpdateRoles) {\n          await updateTeamRoles(pendingRoles, newTeam.teamId, newTeam.orgId);\n        }\n      } catch (e) {\n        console.error(e);\n      }\n      locationService.push(`/org/teams/edit/${newTeam.teamId}`);\n    }\n  };\n\n  return (\n    <Page navId=\"teams\" pageNav={pageNav}>\n      <Page.Contents>\n        <Form onSubmit={createTeam}>\n          {({ register, errors }) => (\n            <FieldSet>\n              <Field label=\"Name\" required invalid={!!errors.name} error=\"Team name is required\">\n                <Input {...register('name', { required: true })} id=\"team-name\" />\n              </Field>\n              {contextSrv.licensedAccessControlEnabled() && (\n                <Field label=\"Role\">\n                  <TeamRolePicker\n                    teamId={0}\n                    roleOptions={roleOptions}\n                    disabled={false}\n                    apply={true}\n                    onApplyRoles={setPendingRoles}\n                    pendingRoles={pendingRoles}\n                    maxWidth=\"100%\"\n                  />\n                </Field>\n              )}\n              <Field\n                label={'Email'}\n                description={'This is optional and is primarily used for allowing custom team avatars.'}\n              >\n                <Input {...register('email')} type=\"email\" id=\"team-email\" placeholder=\"email@test.com\" />\n              </Field>\n              <div className=\"gf-form-button-row\">\n                <Button type=\"submit\" variant=\"primary\">\n                  Create\n                </Button>\n              </div>\n            </FieldSet>\n          )}\n        </Form>\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default CreateTeam;\n"],"names":["TeamRolePicker","teamId","roleOptions","disabled","onApplyRoles","pendingRoles","apply","maxWidth","loading","appliedRoles","getTeamRoles","e","onRolesChange","roles","canUpdateRoles","useRoleOptions","organizationId","orgId","setOrgId","value","pageNav","CreateTeam","currentOrgId","setPendingRoles","createTeam","formModel","newTeam","register","errors"],"sourceRoot":""}