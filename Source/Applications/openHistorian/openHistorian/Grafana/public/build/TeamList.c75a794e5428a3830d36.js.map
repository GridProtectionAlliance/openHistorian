{"version":3,"file":"TeamList.c75a794e5428a3830d36.js","mappings":"wLA+BO,MAAMA,EAAiB,CAAC,CAC7B,OAAAC,EACA,YAAAC,EACA,SAAAC,EACA,aAAAC,EACA,aAAAC,EACA,MAAAC,EAAQ,GACR,SAAAC,CACF,IAAa,CACX,KAAM,CAAC,CAAE,QAAAC,EAAS,MAAOC,EAAe,CAAC,CAAE,EAAGC,CAAY,KAAI,KAAW,SAAY,CACnF,GAAI,CACF,GAAIJ,GAAS,QAAQD,GAAc,MAAM,EACvC,OAAOA,EAGT,GAAI,mBAAyB,0CAAwC,EACnE,OAAO,QAAM,MAAeJ,CAAM,CAEtC,OAASU,EAAP,CACA,QAAQ,MAAM,wBAAyBA,CAAC,CAC1C,CACA,MAAO,CAAC,CACV,EAAG,CAACV,EAAQI,CAAY,CAAC,KAEzB,aAAU,IAAM,CACdK,EAAa,CACf,EAAG,CAACT,EAAQS,EAAcL,CAAY,CAAC,EAEvC,MAAMO,EAAgB,MAAOC,GAAkB,CACxCP,EAGMF,GACTA,EAAaS,CAAK,GAHlB,QAAM,MAAgBA,EAAOZ,CAAM,EACnC,MAAMS,EAAa,EAIvB,EAEMI,EACJ,mBAAyB,yCAAuC,GAChE,mBAAyB,4CAA0C,EAErE,OACE,gBAAC,KACC,MAAAR,EACA,cAAAM,EACA,YAAAV,EACA,aAAAO,EACA,UAAWD,EACX,SAAAL,EACA,kBAAmB,GACnB,eAAAW,EACA,SAAAP,CAAA,CACF,CAEJ,C,uGC7EO,MAAMQ,EACX,CACEC,EACAC,EACAC,IAEDC,GAAkC,CACjC,MAAMC,KAAqB,WACzBJ,EACAC,CAEF,EAAEE,CAAS,EAELE,EAAoDC,GAAU,CAClE,MAAMC,KAAW,eAAY,EAC7B,sBAAU,IACD,UAAmB,CACxBA,KAAS,KAAc,CAAE,cAAAL,CAA6B,CAAC,CAAC,CAC1D,EACC,CAACK,CAAQ,CAAC,EAEN,gBAACH,EAAA,CAAoB,GAAGE,CAAA,CAAO,CACxC,EAEA,OAAAD,EAA8B,YAAc,sBAAsBD,EAAmB,eACrF,IAAqBC,EAA+BF,CAAS,EAGtDE,CACT,C,4DClCK,MAAMG,EACX,wIAEK,SAASC,GAAU,CACxB,MAAMC,EAAS,iBAAoB,YACnC,MAAO,CAAC,EAAEA,GAAUA,EAAS,EAC/B,CAEO,MAAMC,EAAiB,IAAMF,EAAQ,GAAK,oC,6NCI1C,MAAMG,EAAc,CAAC,CAAE,KAAAC,EAAM,YAAA3B,EAAa,YAAA4B,EAAa,kBAAAC,EAAmB,SAAAC,CAAS,IAAa,CACrG,MAAMC,EAAU,kBAAkBJ,EAAK,KACjCK,EAAY,yBAA+B,wCAAuCL,EAAMC,CAAW,EACnGK,EAAc,yBAA+B,sCAAqCN,EAAMC,CAAW,EACnGM,EAAkB,yBAA+B,2CAA0CP,EAAM,EAAK,EAE5G,OACE,gBAAC,MAAG,IAAKA,EAAK,IACZ,gBAAC,MAAG,UAAU,+BACXM,EACC,gBAAC,KAAE,KAAMF,CAAA,EACP,gBAAC,OAAI,UAAU,uBAAuB,IAAKJ,EAAK,UAAW,IAAI,aAAc,EAC/E,EAEA,gBAAC,OAAI,UAAU,uBAAuB,IAAKA,EAAK,UAAW,IAAI,aAAc,EAEjF,EACA,gBAAC,MAAG,UAAU,WACXM,EAAc,gBAAC,KAAE,KAAMF,CAAA,EAAUJ,EAAK,IAAK,EAAO,gBAAC,OAAI,MAAO,CAAE,QAAS,SAAU,GAAIA,EAAK,IAAK,CACpG,EACA,gBAAC,MAAG,UAAU,WACXM,EACC,gBAAC,KAAE,KAAMF,EAAS,aAAYJ,EAAK,OAAS,oBACzCA,EAAK,KACR,EAEA,gBAAC,OAAI,MAAO,CAAE,QAAS,SAAU,EAAG,aAAYA,EAAK,OAAS,oBAC3DA,EAAK,KACR,CAEJ,EACA,gBAAC,MAAG,UAAU,WACXM,EACC,gBAAC,KAAE,KAAMF,CAAA,EAAUJ,EAAK,WAAY,EAEpC,gBAAC,OAAI,MAAO,CAAE,QAAS,SAAU,GAAIA,EAAK,WAAY,CAE1D,EACCE,GAAqB,gBAAC,UAAIK,GAAmB,gBAACpC,EAAA,EAAc,CAAC,OAAQ6B,EAAK,GAAI,YAAA3B,CAAA,CAA0B,CAAG,EAC5G,gBAAC,MAAG,UAAU,cACZ,gBAACmC,EAAA,GACC,aAAY,eAAeR,EAAK,OAChC,KAAK,KACL,SAAU,CAACK,EACX,UAAW,IAAMF,EAASH,EAAK,EAAE,EACnC,CACF,CACF,CAEJ,E,oCC5BO,MAAMS,EAAW,CAAC,CACvB,MAAAC,EACA,KAAAC,EACA,MAAAC,EACA,QAAAC,EACA,WAAAC,EACA,WAAAC,EACA,UAAAC,EACA,WAAAC,EACA,YAAAC,EACA,WAAAC,EACA,aAAAC,EACA,gBAAAC,CACF,IAAa,CACX,KAAM,CAAChD,EAAaiD,CAAc,KAAI,YAAiB,CAAC,CAAC,KAEzD,aAAU,IAAM,CACdN,EAAU,EAAI,CAChB,EAAG,CAACA,CAAS,CAAC,KAEd,aAAU,IAAM,CACV,kCAAwC,GAAK,mBAAyB,qCAAmC,MAC3G,MAAiB,EAAE,KAAMhC,GAAUsC,EAAetC,CAAK,CAAC,CAE5D,EAAG,CAAC,CAAC,EAEL,MAAMuC,EAAYC,EAAcH,CAAe,EACzCnB,EAAoBuB,EAAwB,EAElD,OACE,gBAACC,EAAA,EAAI,CAAC,MAAM,SACV,gBAACA,EAAA,YAAc,UAAW,CAACX,CAAA,EACxBF,EACC,gBAACc,EAAA,GACC,MAAM,qCACN,WAAW,YACX,WAAW,gBACX,YAAY,YACZ,eAAgB,CAAC,mBAAyB,uCAAqC,EAC/E,OAAO,4FACP,WAAW,GACX,gBAAgB,GAChB,aAAa,SACf,EAEA,gCACE,gBAAC,OAAI,UAAU,mBACb,gBAAC,OAAI,UAAU,yBACb,gBAACC,EAAA,EAAW,CAAC,YAAY,eAAe,MAAOhB,EAAO,SAAUM,CAAAA,CAAa,CAC/E,EAEA,gBAAC,KAAU,CAAC,KAAMK,EAAY,gBAAkB,IAAK,SAAU,CAACA,CAAA,EAAW,UAE3E,CACF,EAEA,gBAAC,OAAI,UAAU,oBACb,gBAAC,KAAa,CAAC,QAAQ,MACrB,gBAAC,SAAM,UAAU,gDACf,gBAAC,aACC,gBAAC,UACC,gBAAC,SAAG,EACJ,gBAAC,UAAG,MAAI,EACR,gBAAC,UAAG,OAAK,EACT,gBAAC,UAAG,SAAO,EACVrB,GAAqB,gBAAC,UAAG,OAAK,EAC/B,gBAAC,MAAG,MAAO,CAAE,MAAO,IAAK,EAAG,CAC9B,CACF,EACA,gBAAC,aACEQ,EAAM,IAAKV,GACV,gBAACD,EAAA,CACC,IAAKC,EAAK,GACV,KAAAA,EACA,YAAA3B,EACA,kBAAA6B,EACA,eAAa,MAAsB,CACjC,WAAYF,EAAK,WACjB,gBAAAqB,EACA,aAAAD,CACF,CAAC,EACD,SAAUH,CAAA,CACZ,CACD,CACH,CACF,EACA,gBAAC,KAAe,CAAC,QAAQ,YACvB,gBAACY,EAAA,GACC,mBAAkB,GAClB,YAAalB,EACb,cAAeG,EACf,WAAYK,CAAA,CACd,CACF,CACF,CACF,CACF,CAEJ,CACF,CAEJ,EAEA,SAASK,EAAcH,EAAmC,CACxD,MAAMS,EAAY,aAAmB,OAAO,GAAMT,GAAmB,aAAmB,QAAQ,EAChG,OAAO,eAAqB,wCAAuCS,CAAS,CAC9E,CAEA,SAASL,GAAmC,CAC1C,OACE,kCAAwC,GACxC,mBAAyB,0CAAwC,GACjE,mBAAyB,qCAAmC,CAEhE,CAEA,SAAStC,EAAgB4C,EAAmB,CAC1C,MAAO,CACL,MAAOA,EAAM,MAAM,MACnB,KAAMA,EAAM,MAAM,KAClB,MAAOA,EAAM,MAAM,MACnB,QAASA,EAAM,MAAM,QACrB,QAASA,EAAM,MAAM,QACrB,WAAYA,EAAM,MAAM,WACxB,WAAYA,EAAM,MAAM,WACxB,gBAAiBC,EAAA,mBACjB,aAAc,SAChB,CACF,CAEA,MAAM5C,EAAqB,CACzB,UAAS,KACT,WAAU,KACV,WAAU,KACV,YAAW,IACb,EAEA,KAAeF,EAAA,GACbC,EACAC,EACC2C,GAAWA,EAAM,MAAQ,IAC5B,EAAEtB,CAAQ,C,mPCtKH,SAASO,EAAUiB,EAAU,GAA0B,CAC5D,MAAO,OAAOvC,EAAUwC,IAAa,CACnC,KAAM,CAAE,MAAAtB,EAAO,KAAAD,EAAM,QAAAwB,CAAQ,EAAID,EAAS,EAAE,MAE5C,GAAI,CAAC,mBAAyB,qCAAmC,EAAG,CAClExC,KAAS,MAAY,CAAE,MAAO,CAAC,EAAG,WAAY,EAAG,KAAM,EAAG,QAAAyC,EAAS,QAAS,EAAK,CAAC,CAAC,EACnF,MACF,CAEA,MAAMC,EAAW,QAAM,KAAc,EAAE,IACrC,uBACA,KAAwB,CAAE,MAAAxB,EAAO,KAAAD,EAAM,QAASwB,CAAQ,CAAC,CAC3D,EAIA,IAAItB,EAAU,GACVoB,IACFpB,EAAUuB,EAAS,MAAM,SAAW,GAGtC1C,KAAS,MAAY,CAAE,QAAAmB,EAAS,GAAGuB,CAAS,CAAC,CAAC,CAChD,CACF,CAEA,MAAMC,KAAwB,YAAU3C,GAAaA,EAASsB,EAAU,CAAC,EAAG,GAAG,EAExE,SAASsB,EAASC,EAA+B,CACtD,MAAO,OAAO7C,GAAa,CACzB,MAAM0C,EAAW,QAAM,KAAc,EAAE,IAAI,cAAcG,OAAM,KAAwB,CAAC,EACxF7C,KAAS,MAAW0C,CAAQ,CAAC,EAC7B1C,KAAS,SAAe,KAAc0C,CAAQ,CAAC,CAAC,CAClD,CACF,CAEO,SAASnB,EAAWsB,EAA+B,CACxD,MAAO,OAAO7C,GAAa,CACzB,QAAM,KAAc,EAAE,OAAO,cAAc6C,GAAI,EAE/C,MAAM,0BAAgC,EACtC7C,EAASsB,EAAU,CAAC,CACtB,CACF,CAEO,SAASE,EAAYN,EAAkC,CAC5D,MAAO,OAAOlB,GAAa,CACzBA,KAAS,MAAakB,CAAK,CAAC,EAC5ByB,EAAsB3C,CAAQ,CAChC,CACF,CAEO,SAASyB,EAAWR,EAAiC,CAC1D,MAAO,OAAOjB,GAAa,CACzBA,KAAS,MAAYiB,CAAI,CAAC,EAC1BjB,EAASsB,EAAU,CAAC,CACtB,CACF,CAEO,SAASwB,GAAqC,CACnD,MAAO,OAAO9C,EAAU+C,IAAa,CACnC,MAAMzC,EAAOyC,EAAS,EAAE,KAAK,KACvBL,EAAW,QAAM,KAAc,EAAE,IAAI,cAAcpC,EAAK,YAAY,EAC1EN,KAAS,MAAkB0C,CAAQ,CAAC,CACtC,CACF,CAEO,SAASM,EAAcH,EAA+B,CAC3D,MAAO,OAAO7C,EAAU+C,IAAa,CACnC,MAAMzC,EAAOyC,EAAS,EAAE,KAAK,KAC7B,QAAM,KAAc,EAAE,KAAK,cAAczC,EAAK,aAAc,CAAE,OAAQuC,CAAG,CAAC,EAC1E7C,EAAS8C,EAAgB,CAAC,CAC5B,CACF,CAEO,SAASG,EAAiBJ,EAA+B,CAC9D,MAAO,OAAO7C,EAAU+C,IAAa,CACnC,MAAMzC,EAAOyC,EAAS,EAAE,KAAK,KAC7B,QAAM,KAAc,EAAE,OAAO,cAAczC,EAAK,cAAcuC,GAAI,EAClE7C,EAAS8C,EAAgB,CAAC,CAC5B,CACF,CAEO,SAASI,EAAWC,EAAcC,EAAkC,CACzE,MAAO,OAAOpD,EAAU+C,IAAa,CACnC,MAAMzC,EAAOyC,EAAS,EAAE,KAAK,KAC7B,QAAM,KAAc,EAAE,IAAI,cAAczC,EAAK,KAAM,CAAE,KAAA6C,EAAM,MAAAC,CAAM,CAAC,EAClEpD,EAAS4C,EAAStC,EAAK,EAAE,CAAC,CAC5B,CACF,CAEO,SAAS+C,GAAoC,CAClD,MAAO,OAAOrD,EAAU+C,IAAa,CACnC,MAAMzC,EAAOyC,EAAS,EAAE,KAAK,KACvBL,EAAW,QAAM,KAAc,EAAE,IAAI,cAAcpC,EAAK,WAAW,EACzEN,KAAS,MAAiB0C,CAAQ,CAAC,CACrC,CACF,CAEO,SAASY,EAAaC,EAAoC,CAC/D,MAAO,OAAOvD,EAAU+C,IAAa,CACnC,MAAMzC,EAAOyC,EAAS,EAAE,KAAK,KAC7B,QAAM,KAAc,EAAE,KAAK,cAAczC,EAAK,YAAa,CAAE,QAAAiD,CAAiB,CAAC,EAC/EvD,EAASqD,EAAe,CAAC,CAC3B,CACF,CAEO,SAASG,EAAgBD,EAAoC,CAClE,MAAO,OAAOvD,EAAU+C,IAAa,CACnC,MAAMzC,EAAOyC,EAAS,EAAE,KAAK,KAE7B,QAAM,KAAc,EAAE,OAAO,cAAczC,EAAK,qBAAqB,mBAAmBiD,CAAO,GAAG,EAClGvD,EAASqD,EAAe,CAAC,CAC3B,CACF,CAEO,SAASI,EAAiBC,EAAuC,CACtE,MAAO,OAAO1D,GAAa,CACzB,QAAM,KAAc,EAAE,IAAI,cAAc0D,EAAO,kBAAkBA,EAAO,SAAU,CAChF,WAAYA,EAAO,UACrB,CAAC,EACD1D,EAAS8C,EAAgB,CAAC,CAC5B,CACF,C,iHC7HA,MAAMa,EAAc,CAClB,UAAW,8BACX,GAAI,EACJ,KAAM,UACN,MAAO,UACP,YAAa,EACb,WAAY,6BACZ,cAAe,CAAE,SAAU,EAAM,EACjC,QAAS,GACT,MAAO,EACP,QAAS,EACX,EAEO,SAASC,EAActD,EAA0B,CACtD,MAAMuD,EAAyB,CAC7B,IAAKvD,EAAK,UACV,GAAI,QAAUA,EAAK,GACnB,SAAU,8BACV,IAAK,GACL,KAAMA,EAAK,KACX,YAAa,CAAC,CAAE,MAAO,QAAS,IAAK,WAAY,CAAC,EAClD,SAAU,CAGR,CACE,OAAQ,GACR,KAAM,gBACN,GAAI,iBAAiBA,EAAK,KAC1B,KAAM,WACN,IAAK,kBAAkBA,EAAK,aAC9B,CACF,CACF,GAMEA,IAASqD,GACT,6BAAmC,iDAAgDrD,CAAI,IAEvFuD,EAAS,SAAU,QAAQ,CACzB,OAAQ,GACR,KAAM,YACN,GAAI,gBAAgBvD,EAAK,KACzB,KAAM,UACN,IAAK,kBAAkBA,EAAK,YAC9B,CAAC,EAGH,MAAMwD,EAA8B,CAClC,OAAQ,GACR,KAAM,OACN,GAAI,kBAAkBxD,EAAK,KAC3B,KAAM,sBACN,IAAK,kBAAkBA,EAAK,cAC9B,EAEMyD,EAAgBzD,IAASqD,EAE/B,SAAI,MAAe,IACjBG,EAAc,UAAY,OACxB,KAAS,CAAE,aAAcC,EAAgB,GAAK,qCAAsC,aAAc,OAAQ,CAAC,MAM3G,KAAe,UAAU,GACvBA,GAAiB,6BAAmC,iDAAgDzD,CAAI,IAC1GuD,EAAS,SAAU,KAAKC,CAAa,EAE9B,uCACTD,EAAS,SAAU,KAAK,CACtB,GAAGC,EACH,UAAW,OAAM,KAAS,CAAE,aAAcC,EAAgB,GAAK,oCAAqC,CAAC,CACvG,CAAC,EAGIF,CACT,CAEO,SAASG,EAAkBC,EAA4B,CAC5D,MAAMC,EAAON,EAAcD,CAAW,EAEtC,IAAIQ,EAGJ,UAAWC,KAASF,EAAK,SACvB,GAAIE,EAAM,GAAI,QAAQH,CAAQ,EAAI,EAAG,CACnCG,EAAM,OAAS,GACfD,EAAOC,EACP,KACF,CAGF,MAAO,CACL,KAAAF,EACA,KAAAC,CACF,CACF,C,+FCzGO,MAAME,EAAwBhC,GAAqBA,EAAM,kBACnDiC,EAAiBjC,GAAqBA,EAAM,OAE5CkC,EAAU,CAAClC,EAAkBmC,IACpCnC,EAAM,KAAK,KAAO,SAASmC,EAAe,EAAE,EACvCnC,EAAM,KAGR,KAGIoC,EAAkBpC,GAAqB,CAClD,MAAMqC,EAAQ,OAAOrC,EAAM,kBAAmB,GAAG,EAEjD,OAAOA,EAAM,QAAQ,OAAQqB,GACpBgB,EAAM,KAAKhB,EAAO,KAAK,GAAKgB,EAAM,KAAKhB,EAAO,KAAK,GAAKgB,EAAM,KAAKhB,EAAO,IAAI,CACtF,CACH,EAQaiB,EAA2BrC,GAA4B,CAClE,KAAM,CAAE,QAAAsC,EAAS,aAAAlD,EAAc,gBAAAC,CAAgB,EAAIW,EAC7CuC,EAAgBD,EAAQ,KAAME,GAAMA,EAAE,SAAWpD,EAAa,EAAE,EAChEqD,EAAaF,EAAgBA,EAAc,WAAa,6BAE9D,OAAOG,EAAsB,CAAE,WAAAD,EAAY,aAAArD,EAAc,gBAAAC,CAAgB,CAAC,CAC5E,EAQaqD,EAAyB1C,GAAsC,CAC1E,KAAM,CAAE,WAAAyC,EAAY,aAAArD,EAAc,gBAAAC,CAAgB,EAAIW,EAChD2C,EAAUvD,EAAa,gBAAkBA,EAAa,UAAY,gBAClEwD,EAAkBH,IAAe,4BAGvC,OAFgCE,GAAWC,GAET,CAACvD,CACrC,C","sources":["webpack://grafana/./public/app/core/components/RolePicker/TeamRolePicker.tsx","webpack://grafana/./public/app/core/components/connectWithCleanUp.tsx","webpack://grafana/./public/app/features/admin/utils.ts","webpack://grafana/./public/app/features/teams/TeamListRow.tsx","webpack://grafana/./public/app/features/teams/TeamList.tsx","webpack://grafana/./public/app/features/teams/state/actions.ts","webpack://grafana/./public/app/features/teams/state/navModel.ts","webpack://grafana/./public/app/features/teams/state/selectors.ts"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useAsyncFn } from 'react-use';\n\nimport { contextSrv } from 'app/core/core';\nimport { Role, AccessControlAction } from 'app/types';\n\nimport { RolePicker } from './RolePicker';\nimport { fetchTeamRoles, updateTeamRoles } from './api';\n\nexport interface Props {\n  teamId: number;\n  orgId?: number;\n  roleOptions: Role[];\n  disabled?: boolean;\n  onApplyRoles?: (newRoles: Role[]) => void;\n  pendingRoles?: Role[];\n  /**\n   * Set whether the component should send a request with the new roles to the\n   * backend in TeamRolePicker.onRolesChange (apply=false), or call {@link onApplyRoles}\n   * with the updated list of roles (apply=true).\n   *\n   * Besides it sets the RolePickerMenu's Button title to\n   *   * `Update` in case apply equals false\n   *   * `Apply` in case apply equals true\n   *\n   * @default false\n   */\n  apply?: boolean;\n  maxWidth?: string | number;\n}\n\nexport const TeamRolePicker = ({\n  teamId,\n  roleOptions,\n  disabled,\n  onApplyRoles,\n  pendingRoles,\n  apply = false,\n  maxWidth,\n}: Props) => {\n  const [{ loading, value: appliedRoles = [] }, getTeamRoles] = useAsyncFn(async () => {\n    try {\n      if (apply && Boolean(pendingRoles?.length)) {\n        return pendingRoles;\n      }\n\n      if (contextSrv.hasPermission(AccessControlAction.ActionTeamsRolesList)) {\n        return await fetchTeamRoles(teamId);\n      }\n    } catch (e) {\n      console.error('Error loading options', e);\n    }\n    return [];\n  }, [teamId, pendingRoles]);\n\n  useEffect(() => {\n    getTeamRoles();\n  }, [teamId, getTeamRoles, pendingRoles]);\n\n  const onRolesChange = async (roles: Role[]) => {\n    if (!apply) {\n      await updateTeamRoles(roles, teamId);\n      await getTeamRoles();\n    } else if (onApplyRoles) {\n      onApplyRoles(roles);\n    }\n  };\n\n  const canUpdateRoles =\n    contextSrv.hasPermission(AccessControlAction.ActionTeamsRolesAdd) &&\n    contextSrv.hasPermission(AccessControlAction.ActionTeamsRolesRemove);\n\n  return (\n    <RolePicker\n      apply={apply}\n      onRolesChange={onRolesChange}\n      roleOptions={roleOptions}\n      appliedRoles={appliedRoles}\n      isLoading={loading}\n      disabled={disabled}\n      basicRoleDisabled={true}\n      canUpdateRoles={canUpdateRoles}\n      maxWidth={maxWidth}\n    />\n  );\n};\n","import hoistNonReactStatics from 'hoist-non-react-statics';\nimport React, { ComponentType, FunctionComponent, useEffect } from 'react';\nimport { connect, MapDispatchToPropsParam, MapStateToPropsParam } from 'react-redux';\n\nimport { useDispatch } from 'app/types';\n\nimport { cleanUpAction, CleanUpAction } from '../actions/cleanUp';\n\nexport const connectWithCleanUp =\n  <TStateProps extends {} = {}, TDispatchProps = {}, TOwnProps = {}, State = {}, Statics = {}>(\n    mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\n    mapDispatchToProps: MapDispatchToPropsParam<TDispatchProps, TOwnProps>,\n    cleanupAction: CleanUpAction\n  ) =>\n  (Component: ComponentType<any>) => {\n    const ConnectedComponent = connect(\n      mapStateToProps,\n      mapDispatchToProps\n      // @ts-ignore\n    )(Component);\n\n    const ConnectedComponentWithCleanUp: FunctionComponent = (props) => {\n      const dispatch = useDispatch();\n      useEffect(() => {\n        return function cleanUp() {\n          dispatch(cleanUpAction({ cleanupAction: cleanupAction }));\n        };\n      }, [dispatch]);\n      // @ts-ignore\n      return <ConnectedComponent {...props} />;\n    };\n\n    ConnectedComponentWithCleanUp.displayName = `ConnectWithCleanUp(${ConnectedComponent.displayName})`;\n    hoistNonReactStatics(ConnectedComponentWithCleanUp, Component);\n    type Hoisted = typeof ConnectedComponentWithCleanUp & Statics;\n\n    return ConnectedComponentWithCleanUp as Hoisted;\n  };\n","import { config } from '@grafana/runtime/src';\n\n// https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address\nexport const w3cStandardEmailValidator =\n  /^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n\nexport function isTrial() {\n  const expiry = config.licenseInfo?.trialExpiry;\n  return !!(expiry && expiry > 0);\n}\n\nexport const highlightTrial = () => isTrial() && config.featureToggles.featureHighlights;\n","import React from 'react';\n\nimport { DeleteButton } from '@grafana/ui';\nimport { TeamRolePicker } from 'app/core/components/RolePicker/TeamRolePicker';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AccessControlAction, Role, Team } from 'app/types';\n\ntype Props = {\n  team: Team;\n  roleOptions: Role[];\n  isTeamAdmin: boolean;\n  displayRolePicker: boolean;\n  onDelete: (id: number) => void;\n};\n\nexport const TeamListRow = ({ team, roleOptions, isTeamAdmin, displayRolePicker, onDelete }: Props) => {\n  const teamUrl = `org/teams/edit/${team.id}`;\n  const canDelete = contextSrv.hasAccessInMetadata(AccessControlAction.ActionTeamsDelete, team, isTeamAdmin);\n  const canReadTeam = contextSrv.hasAccessInMetadata(AccessControlAction.ActionTeamsRead, team, isTeamAdmin);\n  const canSeeTeamRoles = contextSrv.hasAccessInMetadata(AccessControlAction.ActionTeamsRolesList, team, false);\n\n  return (\n    <tr key={team.id}>\n      <td className=\"width-4 text-center link-td\">\n        {canReadTeam ? (\n          <a href={teamUrl}>\n            <img className=\"filter-table__avatar\" src={team.avatarUrl} alt=\"Team avatar\" />\n          </a>\n        ) : (\n          <img className=\"filter-table__avatar\" src={team.avatarUrl} alt=\"Team avatar\" />\n        )}\n      </td>\n      <td className=\"link-td\">\n        {canReadTeam ? <a href={teamUrl}>{team.name}</a> : <div style={{ padding: '0px 8px' }}>{team.name}</div>}\n      </td>\n      <td className=\"link-td\">\n        {canReadTeam ? (\n          <a href={teamUrl} aria-label={team.email || 'Empty email cell'}>\n            {team.email}\n          </a>\n        ) : (\n          <div style={{ padding: '0px 8px' }} aria-label={team.email || 'Empty email cell'}>\n            {team.email}\n          </div>\n        )}\n      </td>\n      <td className=\"link-td\">\n        {canReadTeam ? (\n          <a href={teamUrl}>{team.memberCount}</a>\n        ) : (\n          <div style={{ padding: '0px 8px' }}>{team.memberCount}</div>\n        )}\n      </td>\n      {displayRolePicker && <td>{canSeeTeamRoles && <TeamRolePicker teamId={team.id} roleOptions={roleOptions} />}</td>}\n      <td className=\"text-right\">\n        <DeleteButton\n          aria-label={`Delete team ${team.name}`}\n          size=\"sm\"\n          disabled={!canDelete}\n          onConfirm={() => onDelete(team.id)}\n        />\n      </td>\n    </tr>\n  );\n};\n","import React, { useEffect, useState } from 'react';\n\nimport { LinkButton, FilterInput, VerticalGroup, HorizontalGroup, Pagination } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { Page } from 'app/core/components/Page/Page';\nimport { fetchRoleOptions } from 'app/core/components/RolePicker/api';\nimport { config } from 'app/core/config';\nimport { contextSrv, User } from 'app/core/services/context_srv';\nimport { AccessControlAction, Role, StoreState, Team } from 'app/types';\n\nimport { connectWithCleanUp } from '../../core/components/connectWithCleanUp';\n\nimport { TeamListRow } from './TeamListRow';\nimport { deleteTeam, loadTeams, changePage, changeQuery } from './state/actions';\nimport { initialTeamsState } from './state/reducers';\nimport { isPermissionTeamAdmin } from './state/selectors';\n\nexport interface Props {\n  teams: Team[];\n  page: number;\n  query: string;\n  noTeams: boolean;\n  totalPages: number;\n  hasFetched: boolean;\n  loadTeams: typeof loadTeams;\n  deleteTeam: typeof deleteTeam;\n  changePage: typeof changePage;\n  changeQuery: typeof changeQuery;\n  editorsCanAdmin: boolean;\n  signedInUser: User;\n}\n\nexport interface State {\n  roleOptions: Role[];\n}\n\nexport const TeamList = ({\n  teams,\n  page,\n  query,\n  noTeams,\n  totalPages,\n  hasFetched,\n  loadTeams,\n  deleteTeam,\n  changeQuery,\n  changePage,\n  signedInUser,\n  editorsCanAdmin,\n}: Props) => {\n  const [roleOptions, setRoleOptions] = useState<Role[]>([]);\n\n  useEffect(() => {\n    loadTeams(true);\n  }, [loadTeams]);\n\n  useEffect(() => {\n    if (contextSrv.licensedAccessControlEnabled() && contextSrv.hasPermission(AccessControlAction.ActionRolesList)) {\n      fetchRoleOptions().then((roles) => setRoleOptions(roles));\n    }\n  }, []);\n\n  const canCreate = canCreateTeam(editorsCanAdmin);\n  const displayRolePicker = shouldDisplayRolePicker();\n\n  return (\n    <Page navId=\"teams\">\n      <Page.Contents isLoading={!hasFetched}>\n        {noTeams ? (\n          <EmptyListCTA\n            title=\"You haven't created any teams yet.\"\n            buttonIcon=\"users-alt\"\n            buttonLink=\"org/teams/new\"\n            buttonTitle=\" New team\"\n            buttonDisabled={!contextSrv.hasPermission(AccessControlAction.ActionTeamsCreate)}\n            proTip=\"Assign folder and dashboard permissions to teams instead of users to ease administration.\"\n            proTipLink=\"\"\n            proTipLinkTitle=\"\"\n            proTipTarget=\"_blank\"\n          />\n        ) : (\n          <>\n            <div className=\"page-action-bar\">\n              <div className=\"gf-form gf-form--grow\">\n                <FilterInput placeholder=\"Search teams\" value={query} onChange={changeQuery} />\n              </div>\n\n              <LinkButton href={canCreate ? 'org/teams/new' : '#'} disabled={!canCreate}>\n                New Team\n              </LinkButton>\n            </div>\n\n            <div className=\"admin-list-table\">\n              <VerticalGroup spacing=\"md\">\n                <table className=\"filter-table filter-table--hover form-inline\">\n                  <thead>\n                    <tr>\n                      <th />\n                      <th>Name</th>\n                      <th>Email</th>\n                      <th>Members</th>\n                      {displayRolePicker && <th>Roles</th>}\n                      <th style={{ width: '1%' }} />\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {teams.map((team) => (\n                      <TeamListRow\n                        key={team.id}\n                        team={team}\n                        roleOptions={roleOptions}\n                        displayRolePicker={displayRolePicker}\n                        isTeamAdmin={isPermissionTeamAdmin({\n                          permission: team.permission,\n                          editorsCanAdmin,\n                          signedInUser,\n                        })}\n                        onDelete={deleteTeam}\n                      />\n                    ))}\n                  </tbody>\n                </table>\n                <HorizontalGroup justify=\"flex-end\">\n                  <Pagination\n                    hideWhenSinglePage\n                    currentPage={page}\n                    numberOfPages={totalPages}\n                    onNavigate={changePage}\n                  />\n                </HorizontalGroup>\n              </VerticalGroup>\n            </div>\n          </>\n        )}\n      </Page.Contents>\n    </Page>\n  );\n};\n\nfunction canCreateTeam(editorsCanAdmin: boolean): boolean {\n  const teamAdmin = contextSrv.hasRole('Admin') || (editorsCanAdmin && contextSrv.hasRole('Editor'));\n  return contextSrv.hasAccess(AccessControlAction.ActionTeamsCreate, teamAdmin);\n}\n\nfunction shouldDisplayRolePicker(): boolean {\n  return (\n    contextSrv.licensedAccessControlEnabled() &&\n    contextSrv.hasPermission(AccessControlAction.ActionTeamsRolesList) &&\n    contextSrv.hasPermission(AccessControlAction.ActionRolesList)\n  );\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    teams: state.teams.teams,\n    page: state.teams.page,\n    query: state.teams.query,\n    perPage: state.teams.perPage,\n    noTeams: state.teams.noTeams,\n    totalPages: state.teams.totalPages,\n    hasFetched: state.teams.hasFetched,\n    editorsCanAdmin: config.editorsCanAdmin, // this makes the feature toggle mockable/controllable from tests,\n    signedInUser: contextSrv.user, // this makes the feature toggle mockable/controllable from tests,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadTeams,\n  deleteTeam,\n  changePage,\n  changeQuery,\n};\n\nexport default connectWithCleanUp(\n  mapStateToProps,\n  mapDispatchToProps,\n  (state) => (state.teams = initialTeamsState)\n)(TeamList);\n","import { debounce } from 'lodash';\n\nimport { getBackendSrv } from '@grafana/runtime';\nimport { updateNavIndex } from 'app/core/actions';\nimport { contextSrv } from 'app/core/core';\nimport { accessControlQueryParam } from 'app/core/utils/accessControl';\nimport { AccessControlAction, TeamMember, ThunkResult } from 'app/types';\n\nimport { buildNavModel } from './navModel';\nimport { teamGroupsLoaded, queryChanged, pageChanged, teamLoaded, teamMembersLoaded, teamsLoaded } from './reducers';\n\nexport function loadTeams(initial = false): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    const { query, page, perPage } = getState().teams;\n    // Early return if the user cannot list teams\n    if (!contextSrv.hasPermission(AccessControlAction.ActionTeamsRead)) {\n      dispatch(teamsLoaded({ teams: [], totalCount: 0, page: 1, perPage, noTeams: true }));\n      return;\n    }\n\n    const response = await getBackendSrv().get(\n      '/api/teams/search',\n      accessControlQueryParam({ query, page, perpage: perPage })\n    );\n\n    // We only want to check if there is no teams on the initial request.\n    // A query that returns no teams should not render the empty list banner.\n    let noTeams = false;\n    if (initial) {\n      noTeams = response.teams.length === 0;\n    }\n\n    dispatch(teamsLoaded({ noTeams, ...response }));\n  };\n}\n\nconst loadTeamsWithDebounce = debounce((dispatch) => dispatch(loadTeams()), 500);\n\nexport function loadTeam(id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    const response = await getBackendSrv().get(`/api/teams/${id}`, accessControlQueryParam());\n    dispatch(teamLoaded(response));\n    dispatch(updateNavIndex(buildNavModel(response)));\n  };\n}\n\nexport function deleteTeam(id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().delete(`/api/teams/${id}`);\n    // Update users permissions in case they lost teams.read with the deletion\n    await contextSrv.fetchUserPermissions();\n    dispatch(loadTeams());\n  };\n}\n\nexport function changeQuery(query: string): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(queryChanged(query));\n    loadTeamsWithDebounce(dispatch);\n  };\n}\n\nexport function changePage(page: number): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(pageChanged(page));\n    dispatch(loadTeams());\n  };\n}\n\nexport function loadTeamMembers(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    const response = await getBackendSrv().get(`/api/teams/${team.id}/members`);\n    dispatch(teamMembersLoaded(response));\n  };\n}\n\nexport function addTeamMember(id: number): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().post(`/api/teams/${team.id}/members`, { userId: id });\n    dispatch(loadTeamMembers());\n  };\n}\n\nexport function removeTeamMember(id: number): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().delete(`/api/teams/${team.id}/members/${id}`);\n    dispatch(loadTeamMembers());\n  };\n}\n\nexport function updateTeam(name: string, email: string): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().put(`/api/teams/${team.id}`, { name, email });\n    dispatch(loadTeam(team.id));\n  };\n}\n\nexport function loadTeamGroups(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    const response = await getBackendSrv().get(`/api/teams/${team.id}/groups`);\n    dispatch(teamGroupsLoaded(response));\n  };\n}\n\nexport function addTeamGroup(groupId: string): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().post(`/api/teams/${team.id}/groups`, { groupId: groupId });\n    dispatch(loadTeamGroups());\n  };\n}\n\nexport function removeTeamGroup(groupId: string): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    // need to use query parameter due to escaped characters in the request\n    await getBackendSrv().delete(`/api/teams/${team.id}/groups?groupId=${encodeURIComponent(groupId)}`);\n    dispatch(loadTeamGroups());\n  };\n}\n\nexport function updateTeamMember(member: TeamMember): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().put(`/api/teams/${member.teamId}/members/${member.userId}`, {\n      permission: member.permission,\n    });\n    dispatch(loadTeamMembers());\n  };\n}\n","import { NavModelItem, NavModel } from '@grafana/data';\nimport { featureEnabled } from '@grafana/runtime';\nimport { ProBadge } from 'app/core/components/Upgrade/ProBadge';\nimport config from 'app/core/config';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { highlightTrial } from 'app/features/admin/utils';\nimport { AccessControlAction, Team, TeamPermissionLevel } from 'app/types';\n\nconst loadingTeam = {\n  avatarUrl: 'public/img/user_profile.png',\n  id: 1,\n  name: 'Loading',\n  email: 'loading',\n  memberCount: 0,\n  permission: TeamPermissionLevel.Member,\n  accessControl: { isEditor: false },\n  created: '',\n  orgId: 0,\n  updated: '',\n};\n\nexport function buildNavModel(team: Team): NavModelItem {\n  const navModel: NavModelItem = {\n    img: team.avatarUrl,\n    id: 'team-' + team.id,\n    subTitle: 'Manage members and settings',\n    url: '',\n    text: team.name,\n    breadcrumbs: [{ title: 'Teams', url: 'org/teams' }],\n    children: [\n      // With RBAC this tab will always be available (but not always editable)\n      // With Legacy it will be hidden by hideTabsFromNonTeamAdmin should the user not be allowed to see it\n      {\n        active: false,\n        icon: 'sliders-v-alt',\n        id: `team-settings-${team.id}`,\n        text: 'Settings',\n        url: `org/teams/edit/${team.id}/settings`,\n      },\n    ],\n  };\n\n  // While team is loading we leave the members tab\n  // With RBAC the Members tab is available when user has ActionTeamsPermissionsRead for this team\n  // With Legacy it will always be present\n  if (\n    team === loadingTeam ||\n    contextSrv.hasPermissionInMetadata(AccessControlAction.ActionTeamsPermissionsRead, team)\n  ) {\n    navModel.children!.unshift({\n      active: false,\n      icon: 'users-alt',\n      id: `team-members-${team.id}`,\n      text: 'Members',\n      url: `org/teams/edit/${team.id}/members`,\n    });\n  }\n\n  const teamGroupSync: NavModelItem = {\n    active: false,\n    icon: 'sync',\n    id: `team-groupsync-${team.id}`,\n    text: 'External group sync',\n    url: `org/teams/edit/${team.id}/groupsync`,\n  };\n\n  const isLoadingTeam = team === loadingTeam;\n\n  if (highlightTrial()) {\n    teamGroupSync.tabSuffix = () =>\n      ProBadge({ experimentId: isLoadingTeam ? '' : 'feature-highlights-team-sync-badge', eventVariant: 'trial' });\n  }\n\n  // With both Legacy and RBAC the tab is protected being featureEnabled\n  // While team is loading we leave the teamsync tab\n  // With RBAC the External Group Sync tab is available when user has ActionTeamsPermissionsRead for this team\n  if (featureEnabled('teamsync')) {\n    if (isLoadingTeam || contextSrv.hasPermissionInMetadata(AccessControlAction.ActionTeamsPermissionsRead, team)) {\n      navModel.children!.push(teamGroupSync);\n    }\n  } else if (config.featureToggles.featureHighlights) {\n    navModel.children!.push({\n      ...teamGroupSync,\n      tabSuffix: () => ProBadge({ experimentId: isLoadingTeam ? '' : 'feature-highlights-team-sync-badge' }),\n    });\n  }\n\n  return navModel;\n}\n\nexport function getTeamLoadingNav(pageName: string): NavModel {\n  const main = buildNavModel(loadingTeam);\n\n  let node: NavModelItem;\n\n  // find active page\n  for (const child of main.children!) {\n    if (child.id!.indexOf(pageName) > 0) {\n      child.active = true;\n      node = child;\n      break;\n    }\n  }\n\n  return {\n    main: main,\n    node: node!,\n  };\n}\n","import { User } from 'app/core/services/context_srv';\nimport { Team, TeamState, TeamMember, OrgRole, TeamPermissionLevel } from 'app/types';\n\nexport const getSearchMemberQuery = (state: TeamState) => state.searchMemberQuery;\nexport const getTeamGroups = (state: TeamState) => state.groups;\n\nexport const getTeam = (state: TeamState, currentTeamId: any): Team | null => {\n  if (state.team.id === parseInt(currentTeamId, 10)) {\n    return state.team;\n  }\n\n  return null;\n};\n\nexport const getTeamMembers = (state: TeamState) => {\n  const regex = RegExp(state.searchMemberQuery, 'i');\n\n  return state.members.filter((member) => {\n    return regex.test(member.login) || regex.test(member.email) || regex.test(member.name);\n  });\n};\n\nexport interface Config {\n  members: TeamMember[];\n  editorsCanAdmin: boolean;\n  signedInUser: User;\n}\n\nexport const isSignedInUserTeamAdmin = (config: Config): boolean => {\n  const { members, signedInUser, editorsCanAdmin } = config;\n  const userInMembers = members.find((m) => m.userId === signedInUser.id);\n  const permission = userInMembers ? userInMembers.permission : TeamPermissionLevel.Member;\n\n  return isPermissionTeamAdmin({ permission, signedInUser, editorsCanAdmin });\n};\n\nexport interface PermissionConfig {\n  permission: TeamPermissionLevel;\n  editorsCanAdmin: boolean;\n  signedInUser: User;\n}\n\nexport const isPermissionTeamAdmin = (config: PermissionConfig): boolean => {\n  const { permission, signedInUser, editorsCanAdmin } = config;\n  const isAdmin = signedInUser.isGrafanaAdmin || signedInUser.orgRole === OrgRole.Admin;\n  const userIsTeamAdmin = permission === TeamPermissionLevel.Admin;\n  const isSignedInUserTeamAdmin = isAdmin || userIsTeamAdmin;\n\n  return isSignedInUserTeamAdmin || !editorsCanAdmin;\n};\n"],"names":["TeamRolePicker","teamId","roleOptions","disabled","onApplyRoles","pendingRoles","apply","maxWidth","loading","appliedRoles","getTeamRoles","e","onRolesChange","roles","canUpdateRoles","connectWithCleanUp","mapStateToProps","mapDispatchToProps","cleanupAction","Component","ConnectedComponent","ConnectedComponentWithCleanUp","props","dispatch","w3cStandardEmailValidator","isTrial","expiry","highlightTrial","TeamListRow","team","isTeamAdmin","displayRolePicker","onDelete","teamUrl","canDelete","canReadTeam","canSeeTeamRoles","DeleteButton","TeamList","teams","page","query","noTeams","totalPages","hasFetched","loadTeams","deleteTeam","changeQuery","changePage","signedInUser","editorsCanAdmin","setRoleOptions","canCreate","canCreateTeam","shouldDisplayRolePicker","Page","EmptyListCTA","FilterInput","Pagination","teamAdmin","state","config","initial","getState","perPage","response","loadTeamsWithDebounce","loadTeam","id","loadTeamMembers","getStore","addTeamMember","removeTeamMember","updateTeam","name","email","loadTeamGroups","addTeamGroup","groupId","removeTeamGroup","updateTeamMember","member","loadingTeam","buildNavModel","navModel","teamGroupSync","isLoadingTeam","getTeamLoadingNav","pageName","main","node","child","getSearchMemberQuery","getTeamGroups","getTeam","currentTeamId","getTeamMembers","regex","isSignedInUserTeamAdmin","members","userInMembers","m","permission","isPermissionTeamAdmin","isAdmin","userIsTeamAdmin"],"sourceRoot":""}