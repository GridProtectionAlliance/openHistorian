{"version":3,"sources":["webpack:///./public/app/features/plugins/PluginDashboards.tsx","webpack:///./public/app/features/plugins/wrappers/AppConfigWrapper.tsx","webpack:///./public/app/core/components/PluginHelp/PluginHelp.tsx","webpack:///./public/app/features/plugins/PluginPage.tsx","webpack:///./public/app/features/datasources/DashboardsTable.tsx"],"names":["PluginDashboards","_super","props","_this","call","this","importAll","importNext","index","dashboards","state","import","then","length","Promise","resolve","setTimeout","dash","overwrite","_a","plugin","datasource","installCmd","pluginId","id","path","inputs","push","name","type","meta","value","Object","app_core_services_backend_srv__WEBPACK_IMPORTED_MODULE_3__","post","res","app_core_core__WEBPACK_IMPORTED_MODULE_4__","emit","_grafana_data__WEBPACK_IMPORTED_MODULE_6__","alertSuccess","title","lodash_extend__WEBPACK_IMPORTED_MODULE_2___default","setState","tslib__WEBPACK_IMPORTED_MODULE_0__","remove","delete","importedUri","imported","loading","prototype","componentDidMount","get","render","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","className","app_features_datasources_DashboardsTable__WEBPACK_IMPORTED_MODULE_5__","onImport","onRemove","react__WEBPACK_IMPORTED_MODULE_1__","AppConfigCtrlWrapper","preUpdateHook","postUpdateHook","update","model","updateCmd","lodash_extend__WEBPACK_IMPORTED_MODULE_3___default","enabled","pinned","jsonData","secureJsonData","app_core_services_backend_srv__WEBPACK_IMPORTED_MODULE_7__","window","location","href","setPreUpdateHook","callback","setPostUpdateHook","importDashboards","_grafana_data__WEBPACK_IMPORTED_MODULE_5__","enable","disable","angularCtrl","refresh","componentDidUpdate","prevProps","element","lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_2___default","app","scopeProps","ctrl","_grafana_runtime__WEBPACK_IMPORTED_MODULE_6__","load","withRightMargin","emotion__WEBPACK_IMPORTED_MODULE_8__","marginRight","ref","_grafana_ui__WEBPACK_IMPORTED_MODULE_4__","variant","onClick","PluginHelp","apply","arguments","isError","isLoading","help","loadHelp","_grafana_runtime__WEBPACK_IMPORTED_MODULE_3__","response","helpHtml","_grafana_data__WEBPACK_IMPORTED_MODULE_2__","constructPlaceholderInfo","catch","dangerouslySetInnerHTML","__html","getLoadingNav","node","text","icon","main","loadPlugin","_PluginSettingsCache__WEBPACK_IMPORTED_MODULE_9__","info","_grafana_data__WEBPACK_IMPORTED_MODULE_7__","_plugin_loader__WEBPACK_IMPORTED_MODULE_10__","panel","renderer","reject","PAGE_ID_README","PAGE_ID_DASHBOARDS","PAGE_ID_CONFIG_CTRL","PluginPage","showUpdateInfo","app_core_core__WEBPACK_IMPORTED_MODULE_15__","app_types__WEBPACK_IMPORTED_MODULE_5__","showModal","src","nav","defaultPage","query","$contextSrv","appSubUrl","app_core_config__WEBPACK_IMPORTED_MODULE_16__","_c","sent","_b","isAdmin","pages","url","angularConfigCtrl","configPages","next","done","page","lodash_find__WEBPACK_IMPORTED_MODULE_4___default","includes","dashboard","img","logos","large","subTitle","author","breadcrumbs","children","setActivePage","getPluginTabsNav","hasRole","app_core_nav_model_srv__WEBPACK_IMPORTED_MODULE_11__","prevPage","renderBody","_grafana_ui__WEBPACK_IMPORTED_MODULE_6__","severity","Error","active","find","tab","_d","body","_PluginDashboards__WEBPACK_IMPORTED_MODULE_14__","_wrappers_AppConfigWrapper__WEBPACK_IMPORTED_MODULE_13__","app_core_components_PluginHelp_PluginHelp__WEBPACK_IMPORTED_MODULE_12__","renderVersionInfo","version","hasUpdate","content","latestVersion","theme","placement","renderSidebarIncludeBody","item","toLowerCase","replace","getPluginIcon","Fragment","renderSidebarIncludes","map","include","key","renderSidebarDependencies","dependencies","grafanaVersion","plugins","plug","renderSidebarLinks","links","link","target","rel","app_core_components_Page_Page__WEBPACK_IMPORTED_MODULE_8__","navModel","Contents","loadError","pageId","defaultPageId","found","selected","changed","p","__webpack_exports__","react_hot_loader__WEBPACK_IMPORTED_MODULE_2__","module","react_redux__WEBPACK_IMPORTED_MODULE_3__","routeParams","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","dashboardId","importedUrl","style","textAlign","revision","importedRevision","buttonText"],"mappings":"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","file":"PluginPage.4d0490a94b199a11f40c.js","sourcesContent":["import React, { PureComponent } from 'react';\n\nimport extend from 'lodash/extend';\n\nimport { PluginDashboard } from 'app/types';\nimport { getBackendSrv } from 'app/core/services/backend_srv';\nimport { appEvents } from 'app/core/core';\nimport DashboardsTable from 'app/features/datasources/DashboardsTable';\nimport { AppEvents, PluginMeta, DataSourceApi } from '@grafana/data';\n\ninterface Props {\n  plugin: PluginMeta;\n  datasource?: DataSourceApi;\n}\n\ninterface State {\n  dashboards: PluginDashboard[];\n  loading: boolean;\n}\n\nexport class PluginDashboards extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      loading: true,\n      dashboards: [],\n    };\n  }\n\n  async componentDidMount() {\n    const pluginId = this.props.plugin.id;\n    getBackendSrv()\n      .get(`/api/plugins/${pluginId}/dashboards`)\n      .then((dashboards: any) => {\n        this.setState({ dashboards, loading: false });\n      });\n  }\n\n  importAll = () => {\n    this.importNext(0);\n  };\n\n  private importNext = (index: number) => {\n    const { dashboards } = this.state;\n    return this.import(dashboards[index], true).then(() => {\n      if (index + 1 < dashboards.length) {\n        return new Promise(resolve => {\n          setTimeout(() => {\n            this.importNext(index + 1).then(() => {\n              resolve();\n            });\n          }, 500);\n        });\n      } else {\n        return Promise.resolve();\n      }\n    });\n  };\n\n  import = (dash: PluginDashboard, overwrite: boolean) => {\n    const { plugin, datasource } = this.props;\n\n    const installCmd: any = {\n      pluginId: plugin.id,\n      path: dash.path,\n      overwrite: overwrite,\n      inputs: [],\n    };\n\n    if (datasource) {\n      installCmd.inputs.push({\n        name: '*',\n        type: 'datasource',\n        pluginId: datasource.meta.id,\n        value: datasource.name,\n      });\n    }\n\n    return getBackendSrv()\n      .post(`/api/dashboards/import`, installCmd)\n      .then((res: PluginDashboard) => {\n        appEvents.emit(AppEvents.alertSuccess, ['Dashboard Imported', dash.title]);\n        extend(dash, res);\n        this.setState({ dashboards: [...this.state.dashboards] });\n      });\n  };\n\n  remove = (dash: PluginDashboard) => {\n    getBackendSrv()\n      .delete('/api/dashboards/' + dash.importedUri)\n      .then(() => {\n        dash.imported = false;\n        this.setState({ dashboards: [...this.state.dashboards] });\n      });\n  };\n\n  render() {\n    const { loading, dashboards } = this.state;\n    if (loading) {\n      return <div>loading...</div>;\n    }\n    if (!dashboards || !dashboards.length) {\n      return <div>No dashboards are included with this plugin</div>;\n    }\n\n    return (\n      <div className=\"gf-form-group\">\n        <DashboardsTable dashboards={dashboards} onImport={this.import} onRemove={this.remove} />\n      </div>\n    );\n  }\n}\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport cloneDeep from 'lodash/cloneDeep';\nimport extend from 'lodash/extend';\n\nimport { Button } from '@grafana/ui';\nimport { PluginMeta, AppPlugin, deprecationWarning } from '@grafana/data';\n\nimport { AngularComponent, getAngularLoader } from '@grafana/runtime';\nimport { getBackendSrv } from 'app/core/services/backend_srv';\nimport { css } from 'emotion';\n\ninterface Props {\n  app: AppPlugin;\n}\n\ninterface State {\n  angularCtrl: AngularComponent;\n  refresh: number;\n}\n\nexport class AppConfigCtrlWrapper extends PureComponent<Props, State> {\n  element: HTMLElement; // for angular ctrl\n\n  // Needed for angular scope\n  preUpdateHook = () => Promise.resolve();\n  postUpdateHook = () => Promise.resolve();\n  model: PluginMeta;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      angularCtrl: null,\n      refresh: 0,\n    };\n  }\n\n  componentDidMount() {\n    // Force a reload after the first mount -- is there a better way to do this?\n    setTimeout(() => {\n      this.setState({ refresh: this.state.refresh + 1 });\n    }, 5);\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (!this.element || this.state.angularCtrl) {\n      return;\n    }\n\n    // Set a copy of the meta\n    this.model = cloneDeep(this.props.app.meta);\n\n    const loader = getAngularLoader();\n    const template = '<plugin-component type=\"app-config-ctrl\"></plugin-component>';\n    const scopeProps = { ctrl: this };\n    const angularCtrl = loader.load(this.element, scopeProps, template);\n\n    this.setState({ angularCtrl });\n  }\n\n  render() {\n    const model = this.model;\n\n    const withRightMargin = css({ marginRight: '8px' });\n\n    return (\n      <div>\n        <div ref={element => (this.element = element)} />\n        <br />\n        <br />\n        {model && (\n          <div className=\"gf-form\">\n            {!model.enabled && (\n              <Button variant=\"primary\" onClick={this.enable} className={withRightMargin}>\n                Enable\n              </Button>\n            )}\n            {model.enabled && (\n              <Button variant=\"primary\" onClick={this.update} className={withRightMargin}>\n                Update\n              </Button>\n            )}\n            {model.enabled && (\n              <Button variant=\"danger\" onClick={this.disable} className={withRightMargin}>\n                Disable\n              </Button>\n            )}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  //-----------------------------------------------------------\n  // Copied from plugin_edit_ctrl\n  //-----------------------------------------------------------\n\n  update = () => {\n    const pluginId = this.model.id;\n\n    this.preUpdateHook()\n      .then(() => {\n        const updateCmd = extend(\n          {\n            enabled: this.model.enabled,\n            pinned: this.model.pinned,\n            jsonData: this.model.jsonData,\n            secureJsonData: this.model.secureJsonData,\n          },\n          {}\n        );\n        return getBackendSrv().post(`/api/plugins/${pluginId}/settings`, updateCmd);\n      })\n      .then(this.postUpdateHook)\n      .then(res => {\n        window.location.href = window.location.href;\n      });\n  };\n\n  setPreUpdateHook = (callback: () => any) => {\n    this.preUpdateHook = callback;\n  };\n\n  setPostUpdateHook = (callback: () => any) => {\n    this.postUpdateHook = callback;\n  };\n\n  // Stub to avoid unknown function in legacy code\n  importDashboards = (): Promise<void> => {\n    deprecationWarning('AppConfig', 'importDashboards()');\n    return Promise.resolve();\n  };\n\n  enable = () => {\n    this.model.enabled = true;\n    this.model.pinned = true;\n    this.update();\n  };\n\n  disable = () => {\n    this.model.enabled = false;\n    this.model.pinned = false;\n    this.update();\n  };\n}\n","import React, { PureComponent } from 'react';\nimport { renderMarkdown } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\n\ninterface Props {\n  plugin: {\n    name: string;\n    id: string;\n  };\n  type: string;\n}\n\ninterface State {\n  isError: boolean;\n  isLoading: boolean;\n  help: string;\n}\n\nexport class PluginHelp extends PureComponent<Props, State> {\n  state = {\n    isError: false,\n    isLoading: false,\n    help: '',\n  };\n\n  componentDidMount(): void {\n    this.loadHelp();\n  }\n\n  constructPlaceholderInfo() {\n    return 'No plugin help or readme markdown file was found';\n  }\n\n  loadHelp = () => {\n    const { plugin, type } = this.props;\n    this.setState({ isLoading: true });\n\n    getBackendSrv()\n      .get(`/api/plugins/${plugin.id}/markdown/${type}`)\n      .then((response: string) => {\n        const helpHtml = renderMarkdown(response);\n\n        if (response === '' && type === 'help') {\n          this.setState({\n            isError: false,\n            isLoading: false,\n            help: this.constructPlaceholderInfo(),\n          });\n        } else {\n          this.setState({\n            isError: false,\n            isLoading: false,\n            help: helpHtml,\n          });\n        }\n      })\n      .catch(() => {\n        this.setState({\n          isError: true,\n          isLoading: false,\n        });\n      });\n  };\n\n  render() {\n    const { type } = this.props;\n    const { isError, isLoading, help } = this.state;\n\n    if (isLoading) {\n      return <h2>Loading help...</h2>;\n    }\n\n    if (isError) {\n      return <h3>'Error occurred when loading help'</h3>;\n    }\n\n    if (type === 'panel_help' && help === '') {\n    }\n\n    return <div className=\"markdown-html\" dangerouslySetInnerHTML={{ __html: help }} />;\n  }\n}\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport find from 'lodash/find';\n// Types\nimport { UrlQueryMap } from '@grafana/runtime';\nimport { StoreState, AppNotificationSeverity, CoreEvents } from 'app/types';\nimport { Alert, Tooltip } from '@grafana/ui';\nimport {\n  AppPlugin,\n  GrafanaPlugin,\n  PluginDependencies,\n  PluginInclude,\n  PluginIncludeType,\n  PluginMeta,\n  PluginMetaInfo,\n  PluginType,\n  NavModel,\n  NavModelItem,\n} from '@grafana/data';\n\nimport Page from 'app/core/components/Page/Page';\nimport { getPluginSettings } from './PluginSettingsCache';\nimport { importAppPlugin, importDataSourcePlugin, importPanelPlugin } from './plugin_loader';\nimport { getNotFoundNav } from 'app/core/nav_model_srv';\nimport { PluginHelp } from 'app/core/components/PluginHelp/PluginHelp';\nimport { AppConfigCtrlWrapper } from './wrappers/AppConfigWrapper';\nimport { PluginDashboards } from './PluginDashboards';\nimport { appEvents } from 'app/core/core';\nimport { config } from 'app/core/config';\nimport { ContextSrv } from '../../core/services/context_srv';\n\nexport function getLoadingNav(): NavModel {\n  const node = {\n    text: 'Loading...',\n    icon: 'icon-gf icon-gf-panel',\n  };\n  return {\n    node: node,\n    main: node,\n  };\n}\n\nfunction loadPlugin(pluginId: string): Promise<GrafanaPlugin> {\n  return getPluginSettings(pluginId).then(info => {\n    if (info.type === PluginType.app) {\n      return importAppPlugin(info);\n    }\n    if (info.type === PluginType.datasource) {\n      return importDataSourcePlugin(info);\n    }\n    if (info.type === PluginType.panel) {\n      return importPanelPlugin(pluginId).then(plugin => {\n        // Panel Meta does not have the *full* settings meta\n        return getPluginSettings(pluginId).then(meta => {\n          plugin.meta = {\n            ...meta, // Set any fields that do not exist\n            ...plugin.meta,\n          };\n          return plugin;\n        });\n      });\n    }\n    if (info.type === PluginType.renderer) {\n      return Promise.resolve({ meta: info } as GrafanaPlugin);\n    }\n    return Promise.reject('Unknown Plugin type: ' + info.type);\n  });\n}\n\ninterface Props {\n  pluginId: string;\n  query: UrlQueryMap;\n  path: string; // the URL path\n  $contextSrv: ContextSrv;\n}\n\ninterface State {\n  loading: boolean;\n  plugin?: GrafanaPlugin;\n  nav: NavModel;\n  defaultPage: string; // The first configured one or readme\n}\n\nconst PAGE_ID_README = 'readme';\nconst PAGE_ID_DASHBOARDS = 'dashboards';\nconst PAGE_ID_CONFIG_CTRL = 'config';\n\nclass PluginPage extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      loading: true,\n      nav: getLoadingNav(),\n      defaultPage: PAGE_ID_README,\n    };\n  }\n\n  async componentDidMount() {\n    const { pluginId, path, query, $contextSrv } = this.props;\n    const { appSubUrl } = config;\n\n    const plugin = await loadPlugin(pluginId);\n    if (!plugin) {\n      this.setState({\n        loading: false,\n        nav: getNotFoundNav(),\n      });\n      return; // 404\n    }\n\n    const { defaultPage, nav } = getPluginTabsNav(plugin, appSubUrl, path, query, $contextSrv.hasRole('Admin'));\n\n    this.setState({\n      loading: false,\n      plugin,\n      defaultPage,\n      nav,\n    });\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const prevPage = prevProps.query.page as string;\n    const page = this.props.query.page as string;\n    if (prevPage !== page) {\n      const { nav, defaultPage } = this.state;\n      const node = {\n        ...nav.node,\n        children: setActivePage(page, nav.node.children, defaultPage),\n      };\n      this.setState({\n        nav: {\n          node: node,\n          main: node,\n        },\n      });\n    }\n  }\n\n  renderBody() {\n    const { query } = this.props;\n    const { plugin, nav } = this.state;\n\n    if (!plugin) {\n      return <Alert severity={AppNotificationSeverity.Error} title=\"Plugin Not Found\" />;\n    }\n\n    const active = nav.main.children.find(tab => tab.active);\n    if (active) {\n      // Find the current config tab\n      if (plugin.configPages) {\n        for (const tab of plugin.configPages) {\n          if (tab.id === active.id) {\n            return <tab.body plugin={plugin} query={query} />;\n          }\n        }\n      }\n\n      // Apps have some special behavior\n      if (plugin.meta.type === PluginType.app) {\n        if (active.id === PAGE_ID_DASHBOARDS) {\n          return <PluginDashboards plugin={plugin.meta} />;\n        }\n\n        if (active.id === PAGE_ID_CONFIG_CTRL && plugin.angularConfigCtrl) {\n          return <AppConfigCtrlWrapper app={plugin as AppPlugin} />;\n        }\n      }\n    }\n\n    return <PluginHelp plugin={plugin.meta} type=\"help\" />;\n  }\n\n  showUpdateInfo = () => {\n    appEvents.emit(CoreEvents.showModal, {\n      src: 'public/app/features/plugins/partials/update_instructions.html',\n      model: this.state.plugin.meta,\n    });\n  };\n\n  renderVersionInfo(meta: PluginMeta) {\n    if (!meta.info.version) {\n      return null;\n    }\n\n    return (\n      <section className=\"page-sidebar-section\">\n        <h4>Version</h4>\n        <span>{meta.info.version}</span>\n        {meta.hasUpdate && (\n          <div>\n            <Tooltip content={meta.latestVersion} theme=\"info\" placement=\"top\">\n              <a href=\"#\" onClick={this.showUpdateInfo}>\n                Update Available!\n              </a>\n            </Tooltip>\n          </div>\n        )}\n      </section>\n    );\n  }\n\n  renderSidebarIncludeBody(item: PluginInclude) {\n    if (item.type === PluginIncludeType.page) {\n      const pluginId = this.state.plugin.meta.id;\n      const page = item.name.toLowerCase().replace(' ', '-');\n      return (\n        <a href={`plugins/${pluginId}/page/${page}`}>\n          <i className={getPluginIcon(item.type)} />\n          {item.name}\n        </a>\n      );\n    }\n    return (\n      <>\n        <i className={getPluginIcon(item.type)} />\n        {item.name}\n      </>\n    );\n  }\n\n  renderSidebarIncludes(includes: PluginInclude[]) {\n    if (!includes || !includes.length) {\n      return null;\n    }\n\n    return (\n      <section className=\"page-sidebar-section\">\n        <h4>Includes</h4>\n        <ul className=\"ui-list plugin-info-list\">\n          {includes.map(include => {\n            return (\n              <li className=\"plugin-info-list-item\" key={include.name}>\n                {this.renderSidebarIncludeBody(include)}\n              </li>\n            );\n          })}\n        </ul>\n      </section>\n    );\n  }\n\n  renderSidebarDependencies(dependencies: PluginDependencies) {\n    if (!dependencies) {\n      return null;\n    }\n\n    return (\n      <section className=\"page-sidebar-section\">\n        <h4>Dependencies</h4>\n        <ul className=\"ui-list plugin-info-list\">\n          <li className=\"plugin-info-list-item\">\n            <img src=\"public/img/grafana_icon.svg\" />\n            Grafana {dependencies.grafanaVersion}\n          </li>\n          {dependencies.plugins &&\n            dependencies.plugins.map(plug => {\n              return (\n                <li className=\"plugin-info-list-item\" key={plug.name}>\n                  <i className={getPluginIcon(plug.type)} />\n                  {plug.name} {plug.version}\n                </li>\n              );\n            })}\n        </ul>\n      </section>\n    );\n  }\n\n  renderSidebarLinks(info: PluginMetaInfo) {\n    if (!info.links || !info.links.length) {\n      return null;\n    }\n\n    return (\n      <section className=\"page-sidebar-section\">\n        <h4>Links</h4>\n        <ul className=\"ui-list\">\n          {info.links.map(link => {\n            return (\n              <li key={link.url}>\n                <a href={link.url} className=\"external-link\" target=\"_blank\" rel=\"noopener\">\n                  {link.name}\n                </a>\n              </li>\n            );\n          })}\n        </ul>\n      </section>\n    );\n  }\n\n  render() {\n    const { loading, nav, plugin } = this.state;\n    const { $contextSrv } = this.props;\n    const isAdmin = $contextSrv.hasRole('Admin');\n    return (\n      <Page navModel={nav}>\n        <Page.Contents isLoading={loading}>\n          {!loading && (\n            <div className=\"sidebar-container\">\n              <div className=\"sidebar-content\">\n                {plugin.loadError && (\n                  <Alert\n                    severity={AppNotificationSeverity.Error}\n                    title=\"Error Loading Plugin\"\n                    children={\n                      <>\n                        Check the server startup logs for more information. <br />\n                        If this plugin was loaded from git, make sure it was compiled.\n                      </>\n                    }\n                  />\n                )}\n                {this.renderBody()}\n              </div>\n              <aside className=\"page-sidebar\">\n                {plugin && (\n                  <section className=\"page-sidebar-section\">\n                    {this.renderVersionInfo(plugin.meta)}\n                    {isAdmin && this.renderSidebarIncludes(plugin.meta.includes)}\n                    {this.renderSidebarDependencies(plugin.meta.dependencies)}\n                    {this.renderSidebarLinks(plugin.meta.info)}\n                  </section>\n                )}\n              </aside>\n            </div>\n          )}\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nfunction getPluginTabsNav(\n  plugin: GrafanaPlugin,\n  appSubUrl: string,\n  path: string,\n  query: UrlQueryMap,\n  isAdmin: boolean\n): { defaultPage: string; nav: NavModel } {\n  const { meta } = plugin;\n  let defaultPage: string;\n  const pages: NavModelItem[] = [];\n\n  if (true) {\n    pages.push({\n      text: 'Readme',\n      icon: 'fa fa-fw fa-file-text-o',\n      url: `${appSubUrl}${path}?page=${PAGE_ID_README}`,\n      id: PAGE_ID_README,\n    });\n  }\n\n  // We allow non admins to see plugins but only their readme. Config is hidden even though the API needs to be\n  // public for plugins to work properly.\n  if (isAdmin) {\n    // Only show Config/Pages for app\n    if (meta.type === PluginType.app) {\n      // Legacy App Config\n      if (plugin.angularConfigCtrl) {\n        pages.push({\n          text: 'Config',\n          icon: 'gicon gicon-cog',\n          url: `${appSubUrl}${path}?page=${PAGE_ID_CONFIG_CTRL}`,\n          id: PAGE_ID_CONFIG_CTRL,\n        });\n        defaultPage = PAGE_ID_CONFIG_CTRL;\n      }\n\n      if (plugin.configPages) {\n        for (const page of plugin.configPages) {\n          pages.push({\n            text: page.title,\n            icon: page.icon,\n            url: `${appSubUrl}${path}?page=${page.id}`,\n            id: page.id,\n          });\n          if (!defaultPage) {\n            defaultPage = page.id;\n          }\n        }\n      }\n\n      // Check for the dashboard pages\n      if (find(meta.includes, { type: PluginIncludeType.dashboard })) {\n        pages.push({\n          text: 'Dashboards',\n          icon: 'gicon gicon-dashboard',\n          url: `${appSubUrl}${path}?page=${PAGE_ID_DASHBOARDS}`,\n          id: PAGE_ID_DASHBOARDS,\n        });\n      }\n    }\n  }\n\n  if (!defaultPage) {\n    defaultPage = pages[0].id; // the first tab\n  }\n\n  const node = {\n    text: meta.name,\n    img: meta.info.logos.large,\n    subTitle: meta.info.author.name,\n    breadcrumbs: [{ title: 'Plugins', url: 'plugins' }],\n    url: `${appSubUrl}${path}`,\n    children: setActivePage(query.page as string, pages, defaultPage),\n  };\n\n  return {\n    defaultPage,\n    nav: {\n      node: node,\n      main: node,\n    },\n  };\n}\n\nfunction setActivePage(pageId: string, pages: NavModelItem[], defaultPageId: string): NavModelItem[] {\n  let found = false;\n  const selected = pageId || defaultPageId;\n  const changed = pages.map(p => {\n    const active = !found && selected === p.id;\n    if (active) {\n      found = true;\n    }\n    return { ...p, active };\n  });\n  if (!found) {\n    changed[0].active = true;\n  }\n  return changed;\n}\n\nfunction getPluginIcon(type: string) {\n  switch (type) {\n    case 'datasource':\n      return 'gicon gicon-datasources';\n    case 'panel':\n      return 'icon-gf icon-gf-panel';\n    case 'app':\n      return 'icon-gf icon-gf-apps';\n    case 'page':\n      return 'icon-gf icon-gf-endpoint-tiny';\n    case 'dashboard':\n      return 'gicon gicon-dashboard';\n    default:\n      return 'icon-gf icon-gf-apps';\n  }\n}\n\nconst mapStateToProps = (state: StoreState) => ({\n  pluginId: state.location.routeParams.pluginId,\n  query: state.location.query,\n  path: state.location.path,\n});\n\nexport default hot(module)(connect(mapStateToProps)(PluginPage));\n","import React, { FC } from 'react';\nimport { PluginDashboard } from '../../types';\n\nexport interface Props {\n  dashboards: PluginDashboard[];\n  onImport: (dashboard: PluginDashboard, overwrite: boolean) => void;\n  onRemove: (dashboard: PluginDashboard) => void;\n}\n\nconst DashboardsTable: FC<Props> = ({ dashboards, onImport, onRemove }) => {\n  function buttonText(dashboard: PluginDashboard) {\n    return dashboard.revision !== dashboard.importedRevision ? 'Update' : 'Re-import';\n  }\n\n  return (\n    <table className=\"filter-table\">\n      <tbody>\n        {dashboards.map((dashboard, index) => {\n          return (\n            <tr key={`${dashboard.dashboardId}-${index}`}>\n              <td className=\"width-1\">\n                <i className=\"gicon gicon-dashboard\" />\n              </td>\n              <td>\n                {dashboard.imported ? (\n                  <a href={dashboard.importedUrl}>{dashboard.title}</a>\n                ) : (\n                  <span>{dashboard.title}</span>\n                )}\n              </td>\n              <td style={{ textAlign: 'right' }}>\n                {!dashboard.imported ? (\n                  <button className=\"btn btn-secondary btn-small\" onClick={() => onImport(dashboard, false)}>\n                    Import\n                  </button>\n                ) : (\n                  <button className=\"btn btn-secondary btn-small\" onClick={() => onImport(dashboard, true)}>\n                    {buttonText(dashboard)}\n                  </button>\n                )}\n                {dashboard.imported && (\n                  <button className=\"btn btn-danger btn-small\" onClick={() => onRemove(dashboard)}>\n                    <i className=\"fa fa-trash\" />\n                  </button>\n                )}\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nexport default DashboardsTable;\n"],"sourceRoot":""}