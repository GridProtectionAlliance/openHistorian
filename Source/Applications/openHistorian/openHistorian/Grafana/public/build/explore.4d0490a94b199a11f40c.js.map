{"version":3,"sources":["webpack:///./public/app/features/explore/ErrorContainer.tsx","webpack:///./node_modules/lodash/omitBy.js","webpack:///./public/app/features/explore/ExploreGraphPanel.tsx","webpack:///./public/app/features/explore/QueryRow.tsx","webpack:///./public/app/features/explore/ElapsedTime.tsx","webpack:///./public/app/features/explore/LiveLogs.tsx","webpack:///./public/app/features/explore/ResponsiveButton.tsx","webpack:///./node_modules/lodash/has.js","webpack:///./public/app/features/explore/useLiveTailControls.ts","webpack:///./public/app/features/explore/NoDataSourceCallToAction.tsx","webpack:///./public/app/features/explore/LogsContainer.tsx","webpack:///./public/app/features/explore/ExploreToolbar.tsx","webpack:///./public/app/features/explore/QueryRows.tsx","webpack:///./node_modules/lodash/pickBy.js","webpack:///./public/app/features/explore/Wrapper.tsx","webpack:///./public/app/features/explore/Logs.tsx","webpack:///./public/app/features/explore/QueryRowActions.tsx","webpack:///./public/app/features/explore/TimeSyncButton.tsx","webpack:///./public/app/features/explore/ExploreTimeControls.tsx","webpack:///./public/app/features/explore/utils/LogsCrossFadeTransition.tsx","webpack:///./node_modules/lodash/_baseHas.js","webpack:///./public/app/features/explore/RunButton.tsx","webpack:///./node_modules/lodash/negate.js","webpack:///./public/app/features/explore/LiveTailButton.tsx","webpack:///./public/app/features/explore/Explore.tsx","webpack:///./public/app/features/explore/QueryEditor.tsx","webpack:///./public/app/features/explore/TableContainer.tsx"],"names":["__webpack_require__","d","__webpack_exports__","ErrorContainer","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","app_core_components_Animations_FadeIn__WEBPACK_IMPORTED_MODULE_1__","app_core_utils_explore__WEBPACK_IMPORTED_MODULE_2__","props","queryErrors","queryError","Object","showError","duration","message","a","createElement","in","className","baseIteratee","negate","pickBy","module","exports","object","predicate","MAX_NUMBER_OF_TIME_SERIES","UnThemedExploreGraphPanel","_super","_this","apply","this","arguments","state","hiddenSeries","showAllTimeSeries","onShowAllTimeSeries","setState","onClickGraphButton","_a","onToggleGraph","showingGraph","onChangeTime","from","to","onUpdateTimeRange","renderGraph","width","series","onHiddenSeriesChanged","timeZone","absoluteRange","showPanel","showingTable","showBars","showLines","isStacked","timeRange","_grafana_data__WEBPACK_IMPORTED_MODULE_3__","raw","height","lineWidth","seriesToShow","slice","react__WEBPACK_IMPORTED_MODULE_1___default","_grafana_ui__WEBPACK_IMPORTED_MODULE_4__","onSeriesToggle","toggledSeries","displayMode","List","isLegendVisible","placement","showPoints","onToggleSort","onHorizontalRegionSelected","Tooltip","mode","tslib__WEBPACK_IMPORTED_MODULE_0__","prototype","render","loading","theme","style","timeSeriesDisclaimer","emotion__WEBPACK_IMPORTED_MODULE_2__","templateObject_1","spacing","sm","border","radius","md","light","colors","white","dark","dark4","type","disclaimerIcon","templateObject_2","yellow","xs","templateObject_3","linkExternal","getStyles","Fragment","length","onClick","label","collapsible","isOpen","onToggle","react__WEBPACK_IMPORTED_MODULE_1__","ExploreGraphPanel","displayName","noopOnBlur","QueryRow","textEditModeEnabled","onRunQuery","exploreId","runQueries","onChange","query","override","datasourceInstance","index","changeQuery","getHighlighterExpression","updateLogsHighlights","onClickToggleDisabled","newQuery","hide","onClickRemoveButton","removeQueryRowAction","onClickToggleEditorMode","lodash_debounce__WEBPACK_IMPORTED_MODULE_2___default","value","expressions","highlightLogsExpressionAction","componentWillUnmount","console","log","QueryField","_d","history","exploreEvents","range","queryResponse","latency","canToggleEditorModes","app_types_explore__WEBPACK_IMPORTED_MODULE_10__","Metrics","lodash_has__WEBPACK_IMPORTED_MODULE_3___default","isNotStarted","_grafana_data__WEBPACK_IMPORTED_MODULE_9__","NotStarted","error","refId","components","ExploreMetricsQueryField","Logs","_b","ExploreLogsQueryField","_c","ExploreQueryField","datasource","onBlur","data","_QueryEditor__WEBPACK_IMPORTED_MODULE_6__","onQueryChange","onExecuteQuery","initialQuery","_QueryRowActions__WEBPACK_IMPORTED_MODULE_7__","isDisabled","mapDispatchToProps","_state_actions__WEBPACK_IMPORTED_MODULE_8__","_state_actionTypes__WEBPACK_IMPORTED_MODULE_11__","modifyQueries","react_hot_loader__WEBPACK_IMPORTED_MODULE_4__","react_redux__WEBPACK_IMPORTED_MODULE_5__","item","explore","queries","ElapsedTime","elapsed","tick","Date","now","offset","tslib_es6","start","timer","window","setInterval","UNSAFE_componentWillReceiveProps","nextProps","time","clearInterval","resetKey","componentDidMount","humanize","displayValue","toFixed","grafana_data_src","hours","minutes","seconds","react_default","react","LiveLogs_LiveLogs","LiveLogs","call","liveEndDiv","scrollContainerRef","createRef","lastScrollPos","onScroll","event","isPaused","onPause","currentTarget","scrollTop","clientHeight","distanceFromBottom","scrollHeight","rowsToRender","logRowsToRender","logRows","componentDidUpdate","prevProps","current","scrollTo","scrollIntoView","getDerivedStateFromProps","onResume","styles","logsRowsLive","index_esm","typography","fontFamily","monospace","size","logsRowFade","text","tinycolor_default","blueLight","setAlpha","toString","logsRowsIndicator","button","templateObject_4","fullWidth","templateObject_5","showUtc","src","logsRow","logsRowLocalTime","logsRowMessage","undefined","ref","map","row","key","uid","title","timeLocal","timeFromNow","timeUtc","entry","element","stopLive","explore_ElapsedTime","LiveLogsWithTheme","IconSide","ResponsiveButton","defaultProps","iconSide","left","buttonClassName","iconClassName","splitted","disabled","divElementProps","right","formatBtnTitle","baseHas","hasPath","path","LiveTailControls","react_redux__WEBPACK_IMPORTED_MODULE_1__","_state_actions__WEBPACK_IMPORTED_MODULE_2__","_state_actionTypes__WEBPACK_IMPORTED_MODULE_3__","dispatch","pause","resume","stop","controls","offOption","liveOption","children","NoDataSourceCallToAction","_grafana_ui__WEBPACK_IMPORTED_MODULE_3__","footer","href","target","rel","ctaElement","icon","cardClassName","breakpoints","lg","callToActionElement","LogsContainer","updateTimeRange","handleDedupStrategyChange","dedupStrategy","changeDedupStrategy","handleToggleLogLevel","hiddenLogLevels","toggleLogLevelAction","getLogRowContext","options","Promise","logsHighlighterExpressions","logsMeta","logsSeries","dedupedRows","onClickFilterLabel","onClickFilterOutLabel","onStartScanning","onStopScanning","scanning","isLive","_utils_LogsCrossFadeTransition__WEBPACK_IMPORTED_MODULE_12__","visible","_useLiveTailControls__WEBPACK_IMPORTED_MODULE_13__","_LiveLogs__WEBPACK_IMPORTED_MODULE_10__","_Logs__WEBPACK_IMPORTED_MODULE_11__","_grafana_data__WEBPACK_IMPORTED_MODULE_5__","none","highlighterExpressions","onDedupStrategyChange","onToggleLogLevel","scanRange","getRowContext","getFieldLinks","_panel_panellinks_linkSuppliers__WEBPACK_IMPORTED_MODULE_14__","_state_actions__WEBPACK_IMPORTED_MODULE_6__","app_features_explore_state_actionTypes__WEBPACK_IMPORTED_MODULE_7__","react_hot_loader__WEBPACK_IMPORTED_MODULE_2__","react_redux__WEBPACK_IMPORTED_MODULE_3__","logsResult","app_features_explore_state_selectors__WEBPACK_IMPORTED_MODULE_8__","_profile_state_selectors__WEBPACK_IMPORTED_MODULE_9__","user","rows","meta","memoize_one__WEBPACK_IMPORTED_MODULE_5__","liveTailButtons","emotion__WEBPACK_IMPORTED_MODULE_7__","UnConnectedExploreToolbar","onChangeDatasource","option","changeDatasource","onClearAll","clearAll","onChangeRefreshInterval","changeRefreshInterval","onModeChange","changeMode","onChangeTimeSync","syncTimes","returnToPanel","withChanges","originPanelId","dashboardSrv","_dashboard_services_DashboardSrv__WEBPACK_IMPORTED_MODULE_14__","dash","getCurrent","titleSlug","_core_utils_kbn__WEBPACK_IMPORTED_MODULE_15__","slugifyForUrl","setDashboardQueriesToUpdateOnLoad","cleanQueries","dashViewOptions","fullscreen","edit","isEditing","updateLocation","lodash_omitBy__WEBPACK_IMPORTED_MODULE_1___default","v","panelId","getSelectedDatasource","datasourceName","exploreDatasources","_state_selectors__WEBPACK_IMPORTED_MODULE_21__","find","name","context","datasourceMissing","closeSplit","syncedTimes","refreshInterval","split","supportedModes","selectedMode","hasLiveOption","datasourceLoading","containerWidth","originDashboardIsEditable","Number","isInteger","panelReturnClasses","classnames__WEBPACK_IMPORTED_MODULE_6___default","btn--radius-right-0","navbar-button navbar-button--border-right-0","showSmallDataSourcePicker","showSmallTimePicker","react__WEBPACK_IMPORTED_MODULE_2___default","app_core_components_Select_DataSourcePicker__WEBPACK_IMPORTED_MODULE_10__","datasources","showLoading","hideTextValue","_grafana_ui__WEBPACK_IMPORTED_MODULE_9__","transparent","app_types_explore__WEBPACK_IMPORTED_MODULE_8__","selected","content","maxMenuHeight","_ResponsiveButton__WEBPACK_IMPORTED_MODULE_18__","_ExploreTimeControls__WEBPACK_IMPORTED_MODULE_16__","hideText","_RunButton__WEBPACK_IMPORTED_MODULE_19__","onRun","showDropdown","func","interval","_useLiveTailControls__WEBPACK_IMPORTED_MODULE_20__","_LiveTailButton__WEBPACK_IMPORTED_MODULE_17__","react__WEBPACK_IMPORTED_MODULE_2__","_state_actions__WEBPACK_IMPORTED_MODULE_11__","app_core_actions__WEBPACK_IMPORTED_MODULE_12__","_dashboard_state_actions__WEBPACK_IMPORTED_MODULE_22__","ExploreToolbar","exploreItem","streaming","_profile_state_selectors__WEBPACK_IMPORTED_MODULE_13__","includes","QueryRows","queryKeys","_QueryRow__WEBPACK_IMPORTED_MODULE_2__","arrayMap","basePickBy","getAllKeysIn","prop","Wrapper","resetExploreAction","_grafana_ui__WEBPACK_IMPORTED_MODULE_6__","autoHeightMin","autoHeightMax","_Explore__WEBPACK_IMPORTED_MODULE_5__","app_types_explore__WEBPACK_IMPORTED_MODULE_4__","_state_actionTypes__WEBPACK_IMPORTED_MODULE_7__","SETTINGS_KEYS","showLabels","showTime","wrapLogMessage","app_core_store__WEBPACK_IMPORTED_MODULE_4__","getBool","onChangeDedup","dedup","_grafana_data__WEBPACK_IMPORTED_MODULE_2__","onChangeLabels","checked","set","onChangewrapLogMessage","hiddenRawLevels","level","onClickScan","preventDefault","onClickStopScan","hasData","dedupCount","reduce","sum","duplicates","push","kind","scanText","describeTimeRange","_ExploreGraphPanel__WEBPACK_IMPORTED_MODULE_5__","keys","dedupType","i","tooltip","LabelsMap","labels","deduplicatedRows","rowLimit","QueryRowActions","aria-label","grafana_ui_src","timePickerSynced","orangeDark","noRightBorderStyle","topPadding","TimeSyncButton","isSynced","classnames_default","ExploreTimeControls_ExploreTimeControls","ExploreTimeControls","onMoveTimePicker","direction","timePicker","onMoveForward","onMoveBack","onChangeTimePicker","onZoom","timeSyncButton","timePickerCommonProps","onMoveBackward","TimePickerWithHistory","transitionDuration","transitionDelay","memoize_one__WEBPACK_IMPORTED_MODULE_2__","logsEnter","emotion__WEBPACK_IMPORTED_MODULE_3__","logsEnterActive","logsExit","logsExitActive","LogsCrossFadeTransition","react_transition_group__WEBPACK_IMPORTED_MODULE_4__","mountOnEnter","unmountOnExit","timeout","classNames","enter","enterActive","exit","exitActive","hasOwnProperty","memoize_one__WEBPACK_IMPORTED_MODULE_3__","selectButtonOverride","emotion__WEBPACK_IMPORTED_MODULE_4__","RunButton","runButton","_ResponsiveButton__WEBPACK_IMPORTED_MODULE_6__","classnames__WEBPACK_IMPORTED_MODULE_5___default","_grafana_ui__WEBPACK_IMPORTED_MODULE_2__","onIntervalChanged","buttonSelectClassName","refreshButton","FUNC_ERROR_TEXT","TypeError","args","bgColor","gray5","dark1","orangeLighter","tinycolor2__WEBPACK_IMPORTED_MODULE_3___default","lighten","pulseTextColor","desaturate","liveButton","stopButtonEnter","stopButtonEnterActive","templateObject_6","stopButtonExit","templateObject_7","stopButtonExitActive","templateObject_8","defaultLiveTooltip","LiveTailButton","onClickMain","_ResponsiveButton__WEBPACK_IMPORTED_MODULE_7__","classnames__WEBPACK_IMPORTED_MODULE_2___default","react_transition_group__WEBPACK_IMPORTED_MODULE_5__","memoize_one__WEBPACK_IMPORTED_MODULE_6__","logsMain","exploreAddButton","Explore","getRef","el","rawRange","onClickExample","setQueries","onModifyQueries","onClickAddQueryRowButton","addQueryRow","action","modifyQuery","modification","onResize","changeSize","scanStart","scanStopAction","toggleGraph","refreshExplore","update","ui","renderEmptyState","_NoDataSourceCallToAction__WEBPACK_IMPORTED_MODULE_18__","app_core_utils_emitter__WEBPACK_IMPORTED_MODULE_16__","initialized","initialDatasource","initialQueries","initialRange","initialUI","offsetWidth","initializeExplore","removeAllListeners","graphResult","exploreClass","StartPage","ExploreStartPage","showStartPage","_grafana_data__WEBPACK_IMPORTED_MODULE_13__","_ExploreToolbar__WEBPACK_IMPORTED_MODULE_17__","_QueryRows__WEBPACK_IMPORTED_MODULE_10__","_ErrorContainer__WEBPACK_IMPORTED_MODULE_20__","react_virtualized_auto_sizer__WEBPACK_IMPORTED_MODULE_5__","disableHeight","_grafana_ui__WEBPACK_IMPORTED_MODULE_8__","exploreMode","app_types_explore__WEBPACK_IMPORTED_MODULE_14__","_ExploreGraphPanel__WEBPACK_IMPORTED_MODULE_22__","_TableContainer__WEBPACK_IMPORTED_MODULE_11__","onClickCell","_LogsContainer__WEBPACK_IMPORTED_MODULE_9__","PureComponent","ensureQueriesMemoized","app_core_utils_explore__WEBPACK_IMPORTED_MODULE_15__","getTimeRangeFromUrlMemoized","_state_actions__WEBPACK_IMPORTED_MODULE_12__","_state_actionTypes__WEBPACK_IMPORTED_MODULE_21__","react_redux__WEBPACK_IMPORTED_MODULE_4__","newMode","_profile_state_selectors__WEBPACK_IMPORTED_MODULE_19__","urlState","urlRange","urlMode","app_core_store__WEBPACK_IMPORTED_MODULE_7__","get","orgId","urlModeIsValid","QueryEditor","initTimeSrv","loader","_grafana_runtime__WEBPACK_IMPORTED_MODULE_2__","scopeProps","ctrl","refresh","setTimeout","events","panel","targets","dashboard","component","load","angularScope","hasToggledEditorMode","hasNewError","toggleEditorMode","digest","destroy","app_features_dashboard_services_TimeSrv__WEBPACK_IMPORTED_MODULE_3__","init","getTimezone","timeRangeUpdated","TableContainer","onClickTableButton","toggleTable","getTableHeight","tableResult","Math","max","min","tableWidth","app_core_config__WEBPACK_IMPORTED_MODULE_6__","panelPadding","app_core_constants__WEBPACK_IMPORTED_MODULE_7__","onCellClick","_state_actions__WEBPACK_IMPORTED_MODULE_5__","loadingInState"],"mappings":"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","file":"explore.4d0490a94b199a11f40c.js","sourcesContent":["import React, { FunctionComponent } from 'react';\nimport { DataQueryError } from '@grafana/data';\nimport { FadeIn } from 'app/core/components/Animations/FadeIn';\nimport { getFirstQueryErrorWithoutRefId, getValueWithRefId } from 'app/core/utils/explore';\n\ninterface Props {\n  queryErrors?: DataQueryError[];\n}\n\nexport const ErrorContainer: FunctionComponent<Props> = props => {\n  const { queryErrors } = props;\n  const refId = getValueWithRefId(queryErrors);\n  const queryError = refId ? null : getFirstQueryErrorWithoutRefId(queryErrors);\n  const showError = queryError ? true : false;\n  const duration = showError ? 100 : 10;\n  const message = queryError ? queryError.message : null;\n\n  return (\n    <FadeIn in={showError} duration={duration}>\n      <div className=\"alert-container\">\n        <div className=\"alert-error alert\">\n          <div className=\"alert-icon\">\n            <i className=\"fa fa-exclamation-triangle\" />\n          </div>\n          <div className=\"alert-body\">\n            <div className=\"alert-title\">{message}</div>\n          </div>\n        </div>\n      </div>\n    </FadeIn>\n  );\n};\n","var baseIteratee = require('./_baseIteratee'),\n    negate = require('./negate'),\n    pickBy = require('./pickBy');\n\n/**\n * The opposite of `_.pickBy`; this method creates an object composed of\n * the own and inherited enumerable string keyed properties of `object` that\n * `predicate` doesn't return truthy for. The predicate is invoked with two\n * arguments: (value, key).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The source object.\n * @param {Function} [predicate=_.identity] The function invoked per property.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.omitBy(object, _.isNumber);\n * // => { 'b': '2' }\n */\nfunction omitBy(object, predicate) {\n  return pickBy(object, negate(baseIteratee(predicate)));\n}\n\nmodule.exports = omitBy;\n","import React, { PureComponent } from 'react';\nimport { css, cx } from 'emotion';\nimport { GrafanaTheme, TimeZone, AbsoluteTimeRange, GraphSeriesXY, dateTimeForTimeZone } from '@grafana/data';\n\nimport {\n  selectThemeVariant,\n  Themeable,\n  GraphWithLegend,\n  LegendDisplayMode,\n  withTheme,\n  Collapse,\n  GraphSeriesToggler,\n  GraphSeriesTogglerAPI,\n  Chart,\n} from '@grafana/ui';\n\nconst MAX_NUMBER_OF_TIME_SERIES = 20;\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  timeSeriesDisclaimer: css`\n    label: time-series-disclaimer;\n    width: 300px;\n    margin: ${theme.spacing.sm} auto;\n    padding: 10px 0;\n    border-radius: ${theme.border.radius.md};\n    text-align: center;\n    background-color: ${selectThemeVariant({ light: theme.colors.white, dark: theme.colors.dark4 }, theme.type)};\n  `,\n  disclaimerIcon: css`\n    label: disclaimer-icon;\n    color: ${theme.colors.yellow};\n    margin-right: ${theme.spacing.xs};\n  `,\n  showAllTimeSeries: css`\n    label: show-all-time-series;\n    cursor: pointer;\n    color: ${theme.colors.linkExternal};\n  `,\n});\n\ninterface Props extends Themeable {\n  series?: GraphSeriesXY[];\n  width: number;\n  absoluteRange: AbsoluteTimeRange;\n  loading?: boolean;\n  showPanel: boolean;\n  showBars: boolean;\n  showLines: boolean;\n  isStacked: boolean;\n  showingGraph?: boolean;\n  showingTable?: boolean;\n  timeZone?: TimeZone;\n  onUpdateTimeRange: (absoluteRange: AbsoluteTimeRange) => void;\n  onToggleGraph?: (showingGraph: boolean) => void;\n  onHiddenSeriesChanged?: (hiddenSeries: string[]) => void;\n}\n\ninterface State {\n  hiddenSeries: string[];\n  showAllTimeSeries: boolean;\n}\n\nclass UnThemedExploreGraphPanel extends PureComponent<Props, State> {\n  state: State = {\n    hiddenSeries: [],\n    showAllTimeSeries: false,\n  };\n\n  onShowAllTimeSeries = () => {\n    this.setState({\n      showAllTimeSeries: true,\n    });\n  };\n\n  onClickGraphButton = () => {\n    const { onToggleGraph, showingGraph } = this.props;\n    if (onToggleGraph) {\n      onToggleGraph(showingGraph ?? false);\n    }\n  };\n\n  onChangeTime = (from: number, to: number) => {\n    const { onUpdateTimeRange } = this.props;\n    onUpdateTimeRange({ from, to });\n  };\n\n  renderGraph = () => {\n    const {\n      width,\n      series,\n      onHiddenSeriesChanged,\n      timeZone,\n      absoluteRange,\n      showPanel,\n      showingGraph,\n      showingTable,\n      showBars,\n      showLines,\n      isStacked,\n    } = this.props;\n    const { showAllTimeSeries } = this.state;\n\n    if (!series) {\n      return null;\n    }\n\n    const timeRange = {\n      from: dateTimeForTimeZone(timeZone, absoluteRange.from),\n      to: dateTimeForTimeZone(timeZone, absoluteRange.to),\n      raw: {\n        from: dateTimeForTimeZone(timeZone, absoluteRange.from),\n        to: dateTimeForTimeZone(timeZone, absoluteRange.to),\n      },\n    };\n    const height = showPanel === false ? 100 : showingGraph && showingTable ? 200 : 400;\n    const lineWidth = showLines ? 1 : 5;\n    const seriesToShow = showAllTimeSeries ? series : series.slice(0, MAX_NUMBER_OF_TIME_SERIES);\n\n    return (\n      <GraphSeriesToggler series={seriesToShow} onHiddenSeriesChanged={onHiddenSeriesChanged}>\n        {({ onSeriesToggle, toggledSeries }: GraphSeriesTogglerAPI) => {\n          return (\n            <GraphWithLegend\n              displayMode={LegendDisplayMode.List}\n              height={height}\n              isLegendVisible={true}\n              placement={'under'}\n              width={width}\n              timeRange={timeRange}\n              timeZone={timeZone}\n              showBars={showBars}\n              showLines={showLines}\n              showPoints={false}\n              onToggleSort={() => {}}\n              series={toggledSeries}\n              isStacked={isStacked}\n              lineWidth={lineWidth}\n              onSeriesToggle={onSeriesToggle}\n              onHorizontalRegionSelected={this.onChangeTime}\n            >\n              {/* For logs we are using mulit mode until we refactor logs histogram to use barWidth instead of lineWidth to render bars */}\n              <Chart.Tooltip mode={showBars ? 'multi' : 'single'} />\n            </GraphWithLegend>\n          );\n        }}\n      </GraphSeriesToggler>\n    );\n  };\n\n  render() {\n    const { series, showPanel, showingGraph, loading, theme } = this.props;\n    const { showAllTimeSeries } = this.state;\n    const style = getStyles(theme);\n\n    return (\n      <>\n        {series && series.length > MAX_NUMBER_OF_TIME_SERIES && !showAllTimeSeries && (\n          <div className={cx([style.timeSeriesDisclaimer])}>\n            <i className={cx(['fa fa-fw fa-warning', style.disclaimerIcon])} />\n            {`Showing only ${MAX_NUMBER_OF_TIME_SERIES} time series. `}\n            <span\n              className={cx([style.showAllTimeSeries])}\n              onClick={this.onShowAllTimeSeries}\n            >{`Show all ${series.length}`}</span>\n          </div>\n        )}\n\n        {showPanel && (\n          <Collapse\n            label=\"Graph\"\n            collapsible\n            isOpen={showingGraph}\n            loading={loading}\n            onToggle={this.onClickGraphButton}\n          >\n            {this.renderGraph()}\n          </Collapse>\n        )}\n\n        {!showPanel && this.renderGraph()}\n      </>\n    );\n  }\n}\n\nexport const ExploreGraphPanel = withTheme(UnThemedExploreGraphPanel);\nExploreGraphPanel.displayName = 'ExploreGraphPanel';\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport debounce from 'lodash/debounce';\nimport has from 'lodash/has';\nimport { hot } from 'react-hot-loader';\n// @ts-ignore\nimport { connect } from 'react-redux';\n// Components\nimport QueryEditor from './QueryEditor';\nimport { QueryRowActions } from './QueryRowActions';\n// Actions\nimport { changeQuery, modifyQueries, runQueries } from './state/actions';\n// Types\nimport { StoreState } from 'app/types';\nimport {\n  DataQuery,\n  DataSourceApi,\n  PanelData,\n  HistoryItem,\n  TimeRange,\n  AbsoluteTimeRange,\n  LoadingState,\n} from '@grafana/data';\n\nimport { ExploreItemState, ExploreId, ExploreMode } from 'app/types/explore';\nimport { Emitter } from 'app/core/utils/emitter';\nimport { highlightLogsExpressionAction, removeQueryRowAction } from './state/actionTypes';\n\ninterface PropsFromParent {\n  exploreId: ExploreId;\n  index: number;\n  exploreEvents: Emitter;\n}\n\ninterface QueryRowProps extends PropsFromParent {\n  changeQuery: typeof changeQuery;\n  className?: string;\n  exploreId: ExploreId;\n  datasourceInstance: DataSourceApi;\n  highlightLogsExpressionAction: typeof highlightLogsExpressionAction;\n  history: HistoryItem[];\n  query: DataQuery;\n  modifyQueries: typeof modifyQueries;\n  range: TimeRange;\n  absoluteRange: AbsoluteTimeRange;\n  removeQueryRowAction: typeof removeQueryRowAction;\n  runQueries: typeof runQueries;\n  queryResponse: PanelData;\n  mode: ExploreMode;\n  latency: number;\n}\n\ninterface QueryRowState {\n  textEditModeEnabled: boolean;\n}\n\n// Empty function to override blur execution on query field\nconst noopOnBlur = () => {};\n\nexport class QueryRow extends PureComponent<QueryRowProps, QueryRowState> {\n  state: QueryRowState = {\n    textEditModeEnabled: false,\n  };\n\n  onRunQuery = () => {\n    const { exploreId } = this.props;\n    this.props.runQueries(exploreId);\n  };\n\n  onChange = (query: DataQuery, override?: boolean) => {\n    const { datasourceInstance, exploreId, index } = this.props;\n    this.props.changeQuery(exploreId, query, index, override);\n    if (query && !override && datasourceInstance.getHighlighterExpression && index === 0) {\n      // Live preview of log search matches. Only use on first row for now\n      this.updateLogsHighlights(query);\n    }\n  };\n\n  componentWillUnmount() {\n    console.log('QueryRow will unmount');\n  }\n\n  onClickToggleDisabled = () => {\n    const { exploreId, index, query } = this.props;\n    const newQuery = {\n      ...query,\n      hide: !query.hide,\n    };\n    this.props.changeQuery(exploreId, newQuery, index, true);\n  };\n\n  onClickRemoveButton = () => {\n    const { exploreId, index } = this.props;\n    this.props.removeQueryRowAction({ exploreId, index });\n    this.props.runQueries(exploreId);\n  };\n\n  onClickToggleEditorMode = () => {\n    this.setState({ textEditModeEnabled: !this.state.textEditModeEnabled });\n  };\n\n  updateLogsHighlights = debounce((value: DataQuery) => {\n    const { datasourceInstance } = this.props;\n    if (datasourceInstance.getHighlighterExpression) {\n      const { exploreId } = this.props;\n      const expressions = datasourceInstance.getHighlighterExpression(value);\n      this.props.highlightLogsExpressionAction({ exploreId, expressions });\n    }\n  }, 500);\n\n  render() {\n    const {\n      datasourceInstance,\n      history,\n      query,\n      exploreEvents,\n      range,\n      absoluteRange,\n      queryResponse,\n      mode,\n      latency,\n    } = this.props;\n\n    const canToggleEditorModes =\n      mode === ExploreMode.Metrics && has(datasourceInstance, 'components.QueryCtrl.prototype.toggleEditorMode');\n    const isNotStarted = queryResponse.state === LoadingState.NotStarted;\n    const queryErrors = queryResponse.error && queryResponse.error.refId === query.refId ? [queryResponse.error] : [];\n    let QueryField;\n\n    if (mode === ExploreMode.Metrics && datasourceInstance.components?.ExploreMetricsQueryField) {\n      QueryField = datasourceInstance.components.ExploreMetricsQueryField;\n    } else if (mode === ExploreMode.Logs && datasourceInstance.components?.ExploreLogsQueryField) {\n      QueryField = datasourceInstance.components.ExploreLogsQueryField;\n    } else {\n      QueryField = datasourceInstance.components?.ExploreQueryField;\n    }\n\n    return (\n      <div className=\"query-row\">\n        <div className=\"query-row-field flex-shrink-1\">\n          {QueryField ? (\n            <QueryField\n              datasource={datasourceInstance}\n              query={query}\n              history={history}\n              onRunQuery={this.onRunQuery}\n              onBlur={noopOnBlur}\n              onChange={this.onChange}\n              data={queryResponse}\n              absoluteRange={absoluteRange}\n            />\n          ) : (\n            <QueryEditor\n              error={queryErrors}\n              datasource={datasourceInstance}\n              onQueryChange={this.onChange}\n              onExecuteQuery={this.onRunQuery}\n              initialQuery={query}\n              exploreEvents={exploreEvents}\n              range={range}\n              textEditModeEnabled={this.state.textEditModeEnabled}\n            />\n          )}\n        </div>\n        <QueryRowActions\n          canToggleEditorModes={canToggleEditorModes}\n          isDisabled={query.hide}\n          isNotStarted={isNotStarted}\n          latency={latency}\n          onClickToggleEditorMode={this.onClickToggleEditorMode}\n          onClickToggleDisabled={this.onClickToggleDisabled}\n          onClickRemoveButton={this.onClickRemoveButton}\n        />\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState, { exploreId, index }: QueryRowProps) {\n  const explore = state.explore;\n  const item: ExploreItemState = explore[exploreId];\n  const { datasourceInstance, history, queries, range, absoluteRange, mode, queryResponse, latency } = item;\n  const query = queries[index];\n\n  return {\n    datasourceInstance,\n    history,\n    query,\n    range,\n    absoluteRange,\n    queryResponse,\n    mode,\n    latency,\n  };\n}\n\nconst mapDispatchToProps = {\n  changeQuery,\n  highlightLogsExpressionAction,\n  modifyQueries,\n  removeQueryRowAction,\n  runQueries,\n};\n\nexport default hot(module)(\n  connect(mapStateToProps, mapDispatchToProps)(QueryRow) as React.ComponentType<PropsFromParent>\n);\n","import React, { PureComponent } from 'react';\nimport { toDuration } from '@grafana/data';\n\nconst INTERVAL = 150;\n\nexport interface Props {\n  time?: number;\n  // Use this to reset the timer. Any value is allowed just need to be !== from the previous.\n  // Keep in mind things like [] !== [] or {} !== {}.\n  resetKey?: any;\n  className?: string;\n  humanize?: boolean;\n}\n\nexport interface State {\n  elapsed: number;\n}\n\n/**\n * Shows an incremental time ticker of elapsed time from some event.\n */\nexport default class ElapsedTime extends PureComponent<Props, State> {\n  offset: number;\n  timer: number;\n\n  state = {\n    elapsed: 0,\n  };\n\n  start() {\n    this.offset = Date.now();\n    this.timer = window.setInterval(this.tick, INTERVAL);\n  }\n\n  tick = () => {\n    const jetzt = Date.now();\n    const elapsed = jetzt - this.offset;\n    this.setState({ elapsed });\n  };\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (nextProps.time) {\n      clearInterval(this.timer);\n    } else if (this.props.time) {\n      this.start();\n    }\n\n    if (nextProps.resetKey !== this.props.resetKey) {\n      clearInterval(this.timer);\n      this.start();\n    }\n  }\n\n  componentDidMount() {\n    this.start();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  render() {\n    const { elapsed } = this.state;\n    const { className, time, humanize } = this.props;\n    const value = (time || elapsed) / 1000;\n    let displayValue = `${value.toFixed(1)}s`;\n    if (humanize) {\n      const duration = toDuration(elapsed);\n      const hours = duration.hours();\n      const minutes = duration.minutes();\n      const seconds = duration.seconds();\n      displayValue = hours ? `${hours}h ${minutes}m ${seconds}s` : minutes ? ` ${minutes}m ${seconds}s` : `${seconds}s`;\n    }\n    return <span className={`elapsed-time ${className}`}>{displayValue}</span>;\n  }\n}\n","import React, { PureComponent } from 'react';\nimport { css, cx } from 'emotion';\nimport tinycolor from 'tinycolor2';\n\nimport { Themeable, withTheme, getLogRowStyles } from '@grafana/ui';\nimport { GrafanaTheme, LogRowModel, TimeZone } from '@grafana/data';\n\nimport ElapsedTime from './ElapsedTime';\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  logsRowsLive: css`\n    label: logs-rows-live;\n    font-family: ${theme.typography.fontFamily.monospace};\n    font-size: ${theme.typography.size.sm};\n    display: flex;\n    flex-flow: column nowrap;\n    height: 65vh;\n    overflow-y: auto;\n    :first-child {\n      margin-top: auto !important;\n    }\n  `,\n  logsRowFade: css`\n    label: logs-row-fresh;\n    color: ${theme.colors.text};\n    background-color: ${tinycolor(theme.colors.blueLight)\n      .setAlpha(0.25)\n      .toString()};\n    animation: fade 1s ease-out 1s 1 normal forwards;\n    @keyframes fade {\n      from {\n        background-color: ${tinycolor(theme.colors.blueLight)\n          .setAlpha(0.25)\n          .toString()};\n      }\n      to {\n        background-color: transparent;\n      }\n    }\n  `,\n  logsRowsIndicator: css`\n    font-size: ${theme.typography.size.md};\n    padding-top: ${theme.spacing.sm};\n    display: flex;\n    align-items: center;\n  `,\n  button: css`\n    margin-right: ${theme.spacing.sm};\n  `,\n  fullWidth: css`\n    width: 100%;\n  `,\n});\n\nexport interface Props extends Themeable {\n  logRows?: LogRowModel[];\n  timeZone: TimeZone;\n  stopLive: () => void;\n  onPause: () => void;\n  onResume: () => void;\n  isPaused: boolean;\n}\n\ninterface State {\n  logRowsToRender?: LogRowModel[];\n}\n\nclass LiveLogs extends PureComponent<Props, State> {\n  private liveEndDiv: HTMLDivElement | null = null;\n  private scrollContainerRef = React.createRef<HTMLTableSectionElement>();\n  private lastScrollPos: number | null = null;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      logRowsToRender: props.logRows,\n    };\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (!prevProps.isPaused && this.props.isPaused) {\n      // So we paused the view and we changed the content size, but we want to keep the relative offset from the bottom.\n      if (this.lastScrollPos && this.scrollContainerRef.current) {\n        // There is last scroll pos from when user scrolled up a bit so go to that position.\n        const { clientHeight, scrollHeight } = this.scrollContainerRef.current;\n        const scrollTop = scrollHeight - (this.lastScrollPos + clientHeight);\n        this.scrollContainerRef.current.scrollTo(0, scrollTop);\n        this.lastScrollPos = null;\n      } else {\n        // We do not have any position to jump to su the assumption is user just clicked pause. We can just scroll\n        // to the bottom.\n        if (this.liveEndDiv) {\n          this.liveEndDiv.scrollIntoView(false);\n        }\n      }\n    }\n  }\n\n  static getDerivedStateFromProps(nextProps: Props, state: State) {\n    if (!nextProps.isPaused) {\n      return {\n        // We update what we show only if not paused. We keep any background subscriptions running and keep updating\n        // our state, but we do not show the updates, this allows us start again showing correct result after resuming\n        // without creating a gap in the log results.\n        logRowsToRender: nextProps.logRows,\n      };\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Handle pausing when user scrolls up so that we stop resetting his position to the bottom when new row arrives.\n   * We do not need to throttle it here much, adding new rows should be throttled/buffered itself in the query epics\n   * and after you pause we remove the handler and add it after you manually resume, so this should not be fired often.\n   */\n  onScroll = (event: React.SyntheticEvent) => {\n    const { isPaused, onPause } = this.props;\n    const { scrollTop, clientHeight, scrollHeight } = event.currentTarget;\n    const distanceFromBottom = scrollHeight - (scrollTop + clientHeight);\n    if (distanceFromBottom >= 5 && !isPaused) {\n      onPause();\n      this.lastScrollPos = distanceFromBottom;\n    }\n  };\n\n  rowsToRender = () => {\n    const { isPaused } = this.props;\n    let { logRowsToRender: rowsToRender = [] } = this.state;\n    if (!isPaused) {\n      // A perf optimisation here. Show just 100 rows when streaming and full length when the streaming is paused.\n      rowsToRender = rowsToRender.slice(-100);\n    }\n    return rowsToRender;\n  };\n\n  render() {\n    const { theme, timeZone, onPause, onResume, isPaused } = this.props;\n    const styles = getStyles(theme);\n    const showUtc = timeZone === 'utc';\n    const { logsRow, logsRowLocalTime, logsRowMessage } = getLogRowStyles(theme);\n\n    return (\n      <div>\n        <table className={styles.fullWidth}>\n          <tbody\n            onScroll={isPaused ? undefined : this.onScroll}\n            className={cx(['logs-rows', styles.logsRowsLive])}\n            ref={this.scrollContainerRef}\n          >\n            {this.rowsToRender().map((row: LogRowModel) => {\n              return (\n                <tr className={cx(logsRow, styles.logsRowFade)} key={row.uid}>\n                  {showUtc && (\n                    <td className={cx(logsRowLocalTime)} title={`Local: ${row.timeLocal} (${row.timeFromNow})`}>\n                      {row.timeUtc}\n                    </td>\n                  )}\n                  {!showUtc && (\n                    <td className={cx(logsRowLocalTime)} title={`${row.timeUtc} (${row.timeFromNow})`}>\n                      {row.timeLocal}\n                    </td>\n                  )}\n                  <td className={cx(logsRowMessage)}>{row.entry}</td>\n                </tr>\n              );\n            })}\n            <tr\n              ref={element => {\n                this.liveEndDiv = element;\n                // This is triggered on every update so on every new row. It keeps the view scrolled at the bottom by\n                // default.\n                if (this.liveEndDiv && !isPaused) {\n                  this.liveEndDiv.scrollIntoView(false);\n                }\n              }}\n            />\n          </tbody>\n        </table>\n        <div className={cx([styles.logsRowsIndicator])}>\n          <button onClick={isPaused ? onResume : onPause} className={cx('btn btn-secondary', styles.button)}>\n            <i className={cx('fa', isPaused ? 'fa-play' : 'fa-pause')} />\n            &nbsp;\n            {isPaused ? 'Resume' : 'Pause'}\n          </button>\n          <button onClick={this.props.stopLive} className={cx('btn btn-inverse', styles.button)}>\n            <i className={'fa fa-stop'} />\n            &nbsp; Exit live mode\n          </button>\n          {isPaused || (\n            <span>\n              Last line received: <ElapsedTime resetKey={this.props.logRows} humanize={true} /> ago\n            </span>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport const LiveLogsWithTheme = withTheme(LiveLogs);\n","import React, { forwardRef } from 'react';\n\nexport enum IconSide {\n  left = 'left',\n  right = 'right',\n}\n\ninterface Props extends React.HTMLAttributes<HTMLDivElement> {\n  splitted: boolean;\n  title: string;\n  onClick: () => void;\n  buttonClassName?: string;\n  iconClassName?: string;\n  iconSide?: IconSide;\n  disabled?: boolean;\n}\n\nfunction formatBtnTitle(title: string, iconSide?: string): string {\n  return iconSide === IconSide.left ? '\\xA0' + title : iconSide === IconSide.right ? title + '\\xA0' : title;\n}\n\nexport const ResponsiveButton = forwardRef<HTMLDivElement, Props>((props, ref) => {\n  const defaultProps = {\n    iconSide: IconSide.left,\n  };\n\n  props = { ...defaultProps, ...props };\n  const { title, onClick, buttonClassName, iconClassName, splitted, iconSide, disabled, ...divElementProps } = props;\n\n  return (\n    <div ref={ref} {...divElementProps}>\n      <button\n        className={`btn navbar-button ${buttonClassName ? buttonClassName : ''}`}\n        onClick={onClick}\n        disabled={disabled || false}\n      >\n        {iconClassName && iconSide === IconSide.left ? <i className={`${iconClassName}`} /> : null}\n        <span className=\"btn-title\">{!splitted ? formatBtnTitle(title, iconSide) : ''}</span>\n        {iconClassName && iconSide === IconSide.right ? <i className={`${iconClassName}`} /> : null}\n      </button>\n    </div>\n  );\n});\n","var baseHas = require('./_baseHas'),\n    hasPath = require('./_hasPath');\n\n/**\n * Checks if `path` is a direct property of `object`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = { 'a': { 'b': 2 } };\n * var other = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.has(object, 'a');\n * // => true\n *\n * _.has(object, 'a.b');\n * // => true\n *\n * _.has(object, ['a', 'b']);\n * // => true\n *\n * _.has(other, 'a');\n * // => false\n */\nfunction has(object, path) {\n  return object != null && hasPath(object, path, baseHas);\n}\n\nmodule.exports = has;\n","import React, { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { changeRefreshInterval, runQueries } from './state/actions';\nimport { setPausedStateAction } from './state/actionTypes';\nimport { RefreshPicker } from '@grafana/ui';\nimport { ExploreId } from '../../types';\n\n/**\n * Hook that gives you all the functions needed to control the live tailing.\n */\nexport function useLiveTailControls(exploreId: ExploreId) {\n  const dispatch = useDispatch();\n\n  const pause = useCallback(() => {\n    dispatch(setPausedStateAction({ exploreId, isPaused: true }));\n  }, [exploreId, dispatch]);\n\n  const resume = useCallback(() => {\n    dispatch(setPausedStateAction({ exploreId, isPaused: false }));\n  }, [exploreId, dispatch]);\n\n  const stop = useCallback(() => {\n    // We need to pause here first because there is transition where we are not live but live logs are still shown\n    // to cross fade with the normal view. This will prevent reordering of the logs in the live view during the\n    // transition.\n    pause();\n\n    // TODO referencing this from perspective of refresh picker when there is designated button for it now is not\n    //  great. Needs a bit of refactoring.\n    dispatch(changeRefreshInterval(exploreId, RefreshPicker.offOption.value));\n    dispatch(runQueries(exploreId));\n  }, [exploreId, dispatch, pause]);\n\n  const start = useCallback(() => {\n    dispatch(changeRefreshInterval(exploreId, RefreshPicker.liveOption.value));\n  }, [exploreId, dispatch]);\n\n  return {\n    pause,\n    resume,\n    stop,\n    start,\n  };\n}\n\ntype Props = {\n  exploreId: ExploreId;\n  children: (controls: ReturnType<typeof useLiveTailControls>) => React.ReactElement;\n};\n\n/**\n * If you can't use the hook you can use this as a render prop pattern.\n */\nexport function LiveTailControls(props: Props) {\n  const controls = useLiveTailControls(props.exploreId);\n  return props.children(controls);\n}\n","import React, { useContext } from 'react';\nimport { css } from 'emotion';\nimport { ThemeContext, LinkButton, CallToActionCard } from '@grafana/ui';\n\nexport const NoDataSourceCallToAction = () => {\n  const theme = useContext(ThemeContext);\n\n  const message =\n    'Explore requires at least one data source. Once you have added a data source, you can query it here.';\n  const footer = (\n    <>\n      <i className=\"fa fa-rocket\" />\n      <> ProTip: You can also define data sources through configuration files. </>\n      <a\n        href=\"http://docs.grafana.org/administration/provisioning/#datasources?utm_source=explore\"\n        target=\"_blank\"\n        rel=\"noopener\"\n        className=\"text-link\"\n      >\n        Learn more\n      </a>\n    </>\n  );\n\n  const ctaElement = (\n    <LinkButton size=\"lg\" href=\"/datasources/new\" icon=\"gicon gicon-datasources\">\n      Add data source\n    </LinkButton>\n  );\n\n  const cardClassName = css`\n    max-width: ${theme.breakpoints.lg};\n    margin-top: ${theme.spacing.md};\n    align-self: center;\n  `;\n\n  return (\n    <CallToActionCard\n      callToActionElement={ctaElement}\n      className={cardClassName}\n      footer={footer}\n      message={message}\n      theme={theme}\n    />\n  );\n};\n","import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport { Collapse } from '@grafana/ui';\n\nimport {\n  DataSourceApi,\n  RawTimeRange,\n  LogLevel,\n  TimeZone,\n  AbsoluteTimeRange,\n  LogRowModel,\n  LogsDedupStrategy,\n  TimeRange,\n  LogsMetaItem,\n  GraphSeriesXY,\n} from '@grafana/data';\n\nimport { ExploreId, ExploreItemState } from 'app/types/explore';\nimport { StoreState } from 'app/types';\n\nimport { changeDedupStrategy, updateTimeRange } from './state/actions';\nimport { toggleLogLevelAction } from 'app/features/explore/state/actionTypes';\nimport { deduplicatedRowsSelector } from 'app/features/explore/state/selectors';\nimport { getTimeZone } from '../profile/state/selectors';\nimport { LiveLogsWithTheme } from './LiveLogs';\nimport { Logs } from './Logs';\nimport { LogsCrossFadeTransition } from './utils/LogsCrossFadeTransition';\nimport { LiveTailControls } from './useLiveTailControls';\nimport { getLinksFromLogsField } from '../panel/panellinks/linkSuppliers';\n\ninterface LogsContainerProps {\n  datasourceInstance?: DataSourceApi;\n  exploreId: ExploreId;\n  loading: boolean;\n\n  logsHighlighterExpressions?: string[];\n  logRows?: LogRowModel[];\n  logsMeta?: LogsMetaItem[];\n  logsSeries?: GraphSeriesXY[];\n  dedupedRows?: LogRowModel[];\n\n  onClickFilterLabel?: (key: string, value: string) => void;\n  onClickFilterOutLabel?: (key: string, value: string) => void;\n  onStartScanning: () => void;\n  onStopScanning: () => void;\n  timeZone: TimeZone;\n  scanning?: boolean;\n  scanRange?: RawTimeRange;\n  toggleLogLevelAction: typeof toggleLogLevelAction;\n  changeDedupStrategy: typeof changeDedupStrategy;\n  dedupStrategy: LogsDedupStrategy;\n  width: number;\n  isLive: boolean;\n  updateTimeRange: typeof updateTimeRange;\n  range: TimeRange;\n  syncedTimes: boolean;\n  absoluteRange: AbsoluteTimeRange;\n  isPaused: boolean;\n}\n\nexport class LogsContainer extends PureComponent<LogsContainerProps> {\n  onChangeTime = (absoluteRange: AbsoluteTimeRange) => {\n    const { exploreId, updateTimeRange } = this.props;\n    updateTimeRange({ exploreId, absoluteRange });\n  };\n\n  handleDedupStrategyChange = (dedupStrategy: LogsDedupStrategy) => {\n    this.props.changeDedupStrategy(this.props.exploreId, dedupStrategy);\n  };\n\n  handleToggleLogLevel = (hiddenLogLevels: LogLevel[]) => {\n    const { exploreId } = this.props;\n    this.props.toggleLogLevelAction({\n      exploreId,\n      hiddenLogLevels,\n    });\n  };\n\n  getLogRowContext = async (row: LogRowModel, options?: any): Promise<any> => {\n    const { datasourceInstance } = this.props;\n\n    if (datasourceInstance?.getLogRowContext) {\n      return datasourceInstance.getLogRowContext(row, options);\n    }\n\n    return [];\n  };\n\n  render() {\n    const {\n      loading,\n      logsHighlighterExpressions,\n      logRows,\n      logsMeta,\n      logsSeries,\n      dedupedRows,\n      onClickFilterLabel,\n      onClickFilterOutLabel,\n      onStartScanning,\n      onStopScanning,\n      absoluteRange,\n      timeZone,\n      scanning,\n      range,\n      width,\n      isLive,\n      exploreId,\n    } = this.props;\n\n    return (\n      <>\n        <LogsCrossFadeTransition visible={isLive}>\n          <Collapse label=\"Logs\" loading={false} isOpen>\n            <LiveTailControls exploreId={exploreId}>\n              {controls => (\n                <LiveLogsWithTheme\n                  logRows={logRows}\n                  timeZone={timeZone}\n                  stopLive={controls.stop}\n                  isPaused={this.props.isPaused}\n                  onPause={controls.pause}\n                  onResume={controls.resume}\n                />\n              )}\n            </LiveTailControls>\n          </Collapse>\n        </LogsCrossFadeTransition>\n        <LogsCrossFadeTransition visible={!isLive}>\n          <Collapse label=\"Logs\" loading={loading} isOpen>\n            <Logs\n              dedupStrategy={this.props.dedupStrategy || LogsDedupStrategy.none}\n              logRows={logRows}\n              logsMeta={logsMeta}\n              logsSeries={logsSeries}\n              dedupedRows={dedupedRows}\n              highlighterExpressions={logsHighlighterExpressions}\n              loading={loading}\n              onChangeTime={this.onChangeTime}\n              onClickFilterLabel={onClickFilterLabel}\n              onClickFilterOutLabel={onClickFilterOutLabel}\n              onStartScanning={onStartScanning}\n              onStopScanning={onStopScanning}\n              onDedupStrategyChange={this.handleDedupStrategyChange}\n              onToggleLogLevel={this.handleToggleLogLevel}\n              absoluteRange={absoluteRange}\n              timeZone={timeZone}\n              scanning={scanning}\n              scanRange={range.raw}\n              width={width}\n              getRowContext={this.getLogRowContext}\n              getFieldLinks={getLinksFromLogsField}\n            />\n          </Collapse>\n        </LogsCrossFadeTransition>\n      </>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState, { exploreId }: { exploreId: string }) {\n  const explore = state.explore;\n  // @ts-ignore\n  const item: ExploreItemState = explore[exploreId];\n  const {\n    logsHighlighterExpressions,\n    logsResult,\n    loading,\n    scanning,\n    datasourceInstance,\n    isLive,\n    isPaused,\n    range,\n    absoluteRange,\n    dedupStrategy,\n  } = item;\n  const dedupedRows = deduplicatedRowsSelector(item);\n  const timeZone = getTimeZone(state.user);\n\n  return {\n    loading,\n    logsHighlighterExpressions,\n    logRows: logsResult && logsResult.rows,\n    logsMeta: logsResult && logsResult.meta,\n    logsSeries: logsResult && logsResult.series,\n    scanning,\n    timeZone,\n    dedupStrategy,\n    dedupedRows,\n    datasourceInstance,\n    isLive,\n    isPaused,\n    range,\n    absoluteRange,\n  };\n}\n\nconst mapDispatchToProps = {\n  changeDedupStrategy,\n  toggleLogLevelAction,\n  updateTimeRange,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(LogsContainer));\n","import omitBy from 'lodash/omitBy';\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { hot } from 'react-hot-loader';\nimport memoizeOne from 'memoize-one';\nimport classNames from 'classnames';\nimport { css } from 'emotion';\n\nimport { ExploreId, ExploreItemState, ExploreMode } from 'app/types/explore';\nimport { ToggleButtonGroup, ToggleButton, Tooltip, ButtonSelect, SetInterval } from '@grafana/ui';\nimport { RawTimeRange, TimeZone, TimeRange, DataQuery } from '@grafana/data';\nimport { DataSourcePicker } from 'app/core/components/Select/DataSourcePicker';\nimport { StoreState } from 'app/types/store';\nimport {\n  changeDatasource,\n  clearQueries,\n  splitClose,\n  runQueries,\n  splitOpen,\n  syncTimes,\n  changeRefreshInterval,\n  changeMode,\n} from './state/actions';\nimport { updateLocation } from 'app/core/actions';\nimport { getTimeZone } from '../profile/state/selectors';\nimport { getDashboardSrv } from '../dashboard/services/DashboardSrv';\nimport kbn from '../../core/utils/kbn';\nimport { ExploreTimeControls } from './ExploreTimeControls';\nimport { LiveTailButton } from './LiveTailButton';\nimport { ResponsiveButton } from './ResponsiveButton';\nimport { RunButton } from './RunButton';\nimport { LiveTailControls } from './useLiveTailControls';\nimport { getExploreDatasources } from './state/selectors';\nimport { setDashboardQueriesToUpdateOnLoad } from '../dashboard/state/actions';\n\nconst getStyles = memoizeOne(() => {\n  return {\n    liveTailButtons: css`\n      margin-left: 10px;\n      @media (max-width: 1110px) {\n        margin-left: 4px;\n      }\n    `,\n  };\n});\n\ninterface OwnProps {\n  exploreId: ExploreId;\n  onChangeTime: (range: RawTimeRange, changedByScanner?: boolean) => void;\n}\n\ninterface StateProps {\n  datasourceMissing: boolean;\n  loading: boolean;\n  range: TimeRange;\n  timeZone: TimeZone;\n  splitted: boolean;\n  syncedTimes: boolean;\n  refreshInterval?: string;\n  supportedModes: ExploreMode[];\n  selectedMode: ExploreMode;\n  hasLiveOption: boolean;\n  isLive: boolean;\n  isPaused: boolean;\n  originPanelId?: number;\n  queries: DataQuery[];\n  datasourceLoading?: boolean;\n  containerWidth: number;\n  datasourceName?: string;\n}\n\ninterface DispatchProps {\n  changeDatasource: typeof changeDatasource;\n  clearAll: typeof clearQueries;\n  runQueries: typeof runQueries;\n  closeSplit: typeof splitClose;\n  split: typeof splitOpen;\n  syncTimes: typeof syncTimes;\n  changeRefreshInterval: typeof changeRefreshInterval;\n  changeMode: typeof changeMode;\n  updateLocation: typeof updateLocation;\n  setDashboardQueriesToUpdateOnLoad: typeof setDashboardQueriesToUpdateOnLoad;\n}\n\ntype Props = StateProps & DispatchProps & OwnProps;\n\nexport class UnConnectedExploreToolbar extends PureComponent<Props> {\n  onChangeDatasource = async (option: { value: any }) => {\n    this.props.changeDatasource(this.props.exploreId, option.value);\n  };\n\n  onClearAll = () => {\n    this.props.clearAll(this.props.exploreId);\n  };\n\n  onRunQuery = () => {\n    return this.props.runQueries(this.props.exploreId);\n  };\n\n  onChangeRefreshInterval = (item: string) => {\n    const { changeRefreshInterval, exploreId } = this.props;\n    changeRefreshInterval(exploreId, item);\n  };\n\n  onModeChange = (mode: ExploreMode) => {\n    const { changeMode, exploreId } = this.props;\n    changeMode(exploreId, mode);\n  };\n\n  onChangeTimeSync = () => {\n    const { syncTimes, exploreId } = this.props;\n    syncTimes(exploreId);\n  };\n\n  returnToPanel = async ({ withChanges = false } = {}) => {\n    const { originPanelId, queries } = this.props;\n\n    const dashboardSrv = getDashboardSrv();\n    const dash = dashboardSrv.getCurrent();\n    const titleSlug = kbn.slugifyForUrl(dash.title);\n\n    if (withChanges) {\n      this.props.setDashboardQueriesToUpdateOnLoad(originPanelId, this.cleanQueries(queries));\n    }\n\n    const dashViewOptions = {\n      fullscreen: withChanges || dash.meta.fullscreen,\n      edit: withChanges || dash.meta.isEditing,\n    };\n\n    this.props.updateLocation({\n      path: `/d/${dash.uid}/:${titleSlug}`,\n      query: {\n        ...omitBy(dashViewOptions, v => !v),\n        panelId: originPanelId,\n      },\n    });\n  };\n\n  // Remove explore specific parameters from queries\n  private cleanQueries(queries: DataQuery[]) {\n    return queries.map((query: DataQuery & { context?: string }) => {\n      delete query.context;\n      delete query.key;\n      return query;\n    });\n  }\n\n  getSelectedDatasource = () => {\n    const { datasourceName } = this.props;\n    const exploreDatasources = getExploreDatasources();\n    return datasourceName ? exploreDatasources.find(datasource => datasource.name === datasourceName) : undefined;\n  };\n\n  render() {\n    const {\n      datasourceMissing,\n      closeSplit,\n      exploreId,\n      loading,\n      range,\n      timeZone,\n      splitted,\n      syncedTimes,\n      refreshInterval,\n      onChangeTime,\n      split,\n      supportedModes,\n      selectedMode,\n      hasLiveOption,\n      isLive,\n      isPaused,\n      originPanelId,\n      datasourceLoading,\n      containerWidth,\n    } = this.props;\n\n    const styles = getStyles();\n    const originDashboardIsEditable = originPanelId && Number.isInteger(originPanelId);\n    const panelReturnClasses = classNames('btn', 'navbar-button', {\n      'btn--radius-right-0': originDashboardIsEditable,\n      'navbar-button navbar-button--border-right-0': originDashboardIsEditable,\n    });\n\n    const showSmallDataSourcePicker = (splitted ? containerWidth < 700 : containerWidth < 800) || false;\n    const showSmallTimePicker = splitted || containerWidth < 1210;\n\n    return (\n      <div className={splitted ? 'explore-toolbar splitted' : 'explore-toolbar'}>\n        <div className=\"explore-toolbar-item\">\n          <div className=\"explore-toolbar-header\">\n            <div className=\"explore-toolbar-header-title\">\n              {exploreId === 'left' && (\n                <span className=\"navbar-page-btn\">\n                  <i className=\"gicon gicon-explore\" />\n                  Explore\n                </span>\n              )}\n            </div>\n            {splitted && (\n              <a className=\"explore-toolbar-header-close\" onClick={() => closeSplit(exploreId)}>\n                <i className=\"fa fa-times fa-fw\" />\n              </a>\n            )}\n          </div>\n        </div>\n        <div className=\"explore-toolbar-item\">\n          <div className=\"explore-toolbar-content\">\n            {!datasourceMissing ? (\n              <div className=\"explore-toolbar-content-item\">\n                <div\n                  className={classNames(\n                    'explore-ds-picker',\n                    showSmallDataSourcePicker ? 'explore-ds-picker--small' : ''\n                  )}\n                >\n                  <DataSourcePicker\n                    onChange={this.onChangeDatasource}\n                    datasources={getExploreDatasources()}\n                    current={this.getSelectedDatasource()}\n                    showLoading={datasourceLoading}\n                    hideTextValue={showSmallDataSourcePicker}\n                  />\n                </div>\n                {supportedModes.length > 1 ? (\n                  <div className=\"query-type-toggle\">\n                    <ToggleButtonGroup label=\"\" transparent={true}>\n                      <ToggleButton\n                        key={ExploreMode.Metrics}\n                        value={ExploreMode.Metrics}\n                        onChange={this.onModeChange}\n                        selected={selectedMode === ExploreMode.Metrics}\n                      >\n                        {'Metrics'}\n                      </ToggleButton>\n                      <ToggleButton\n                        key={ExploreMode.Logs}\n                        value={ExploreMode.Logs}\n                        onChange={this.onModeChange}\n                        selected={selectedMode === ExploreMode.Logs}\n                      >\n                        {'Logs'}\n                      </ToggleButton>\n                    </ToggleButtonGroup>\n                  </div>\n                ) : null}\n              </div>\n            ) : null}\n\n            {originPanelId && Number.isInteger(originPanelId) && !splitted && (\n              <div className=\"explore-toolbar-content-item\">\n                <Tooltip content={'Return to panel'} placement=\"bottom\">\n                  <button className={panelReturnClasses} onClick={() => this.returnToPanel()}>\n                    <i className=\"fa fa-arrow-left\" />\n                  </button>\n                </Tooltip>\n                {originDashboardIsEditable && (\n                  <ButtonSelect\n                    className=\"navbar-button--attached btn--radius-left-0$\"\n                    options={[{ label: 'Return to panel with changes', value: '' }]}\n                    onChange={() => this.returnToPanel({ withChanges: true })}\n                    maxMenuHeight={380}\n                  />\n                )}\n              </div>\n            )}\n\n            {exploreId === 'left' && !splitted ? (\n              <div className=\"explore-toolbar-content-item explore-icon-align\">\n                <ResponsiveButton\n                  splitted={splitted}\n                  title=\"Split\"\n                  onClick={split}\n                  iconClassName=\"fa fa-fw fa-columns icon-margin-right\"\n                  disabled={isLive}\n                />\n              </div>\n            ) : null}\n            {!isLive && (\n              <div className=\"explore-toolbar-content-item\">\n                <ExploreTimeControls\n                  exploreId={exploreId}\n                  range={range}\n                  timeZone={timeZone}\n                  onChangeTime={onChangeTime}\n                  splitted={splitted}\n                  syncedTimes={syncedTimes}\n                  onChangeTimeSync={this.onChangeTimeSync}\n                  hideText={showSmallTimePicker}\n                />\n              </div>\n            )}\n\n            {!isLive && (\n              <div className=\"explore-toolbar-content-item explore-icon-align\">\n                <ResponsiveButton\n                  splitted={splitted}\n                  title=\"Clear All\"\n                  onClick={this.onClearAll}\n                  iconClassName=\"fa fa-fw fa-trash icon-margin-right\"\n                />\n              </div>\n            )}\n            <div className=\"explore-toolbar-content-item\">\n              <RunButton\n                refreshInterval={refreshInterval}\n                onChangeRefreshInterval={this.onChangeRefreshInterval}\n                splitted={splitted}\n                loading={loading || (isLive && !isPaused)}\n                onRun={this.onRunQuery}\n                showDropdown={!isLive}\n              />\n              {refreshInterval && <SetInterval func={this.onRunQuery} interval={refreshInterval} loading={loading} />}\n            </div>\n\n            {hasLiveOption && (\n              <div className={`explore-toolbar-content-item ${styles.liveTailButtons}`}>\n                <LiveTailControls exploreId={exploreId}>\n                  {controls => (\n                    <LiveTailButton\n                      splitted={splitted}\n                      isLive={isLive}\n                      isPaused={isPaused}\n                      start={controls.start}\n                      pause={controls.pause}\n                      resume={controls.resume}\n                      stop={controls.stop}\n                    />\n                  )}\n                </LiveTailControls>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: StoreState, { exploreId }: OwnProps): StateProps => {\n  const splitted = state.explore.split;\n  const syncedTimes = state.explore.syncedTimes;\n  const exploreItem: ExploreItemState = state.explore[exploreId];\n  const {\n    datasourceInstance,\n    datasourceMissing,\n    range,\n    refreshInterval,\n    loading,\n    supportedModes,\n    mode,\n    isLive,\n    isPaused,\n    originPanelId,\n    queries,\n    datasourceLoading,\n    containerWidth,\n  } = exploreItem;\n\n  const hasLiveOption = datasourceInstance?.meta?.streaming && mode === ExploreMode.Logs;\n\n  return {\n    datasourceMissing,\n    datasourceName: datasourceInstance?.name,\n    loading,\n    range,\n    timeZone: getTimeZone(state.user),\n    splitted,\n    refreshInterval,\n    supportedModes,\n    selectedMode: supportedModes.includes(mode) ? mode : supportedModes[0],\n    hasLiveOption,\n    isLive,\n    isPaused,\n    originPanelId,\n    queries,\n    syncedTimes,\n    datasourceLoading,\n    containerWidth,\n  };\n};\n\nconst mapDispatchToProps: DispatchProps = {\n  changeDatasource,\n  updateLocation,\n  changeRefreshInterval,\n  clearAll: clearQueries,\n  runQueries,\n  closeSplit: splitClose,\n  split: splitOpen,\n  syncTimes,\n  changeMode: changeMode,\n  setDashboardQueriesToUpdateOnLoad,\n};\n\nexport const ExploreToolbar = hot(module)(connect(mapStateToProps, mapDispatchToProps)(UnConnectedExploreToolbar));\n","// Libraries\nimport React, { PureComponent } from 'react';\n\n// Components\nimport QueryRow from './QueryRow';\n\n// Types\nimport { Emitter } from 'app/core/utils/emitter';\nimport { ExploreId } from 'app/types/explore';\n\ninterface QueryRowsProps {\n  className?: string;\n  exploreEvents: Emitter;\n  exploreId: ExploreId;\n  queryKeys: string[];\n}\n\nexport default class QueryRows extends PureComponent<QueryRowsProps> {\n  render() {\n    const { className = '', exploreEvents, exploreId, queryKeys } = this.props;\n    return (\n      <div className={className}>\n        {queryKeys.map((key, index) => {\n          return <QueryRow key={key} exploreEvents={exploreEvents} exploreId={exploreId} index={index} />;\n        })}\n      </div>\n    );\n  }\n}\n","var arrayMap = require('./_arrayMap'),\n    baseIteratee = require('./_baseIteratee'),\n    basePickBy = require('./_basePickBy'),\n    getAllKeysIn = require('./_getAllKeysIn');\n\n/**\n * Creates an object composed of the `object` properties `predicate` returns\n * truthy for. The predicate is invoked with two arguments: (value, key).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The source object.\n * @param {Function} [predicate=_.identity] The function invoked per property.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.pickBy(object, _.isNumber);\n * // => { 'a': 1, 'c': 3 }\n */\nfunction pickBy(object, predicate) {\n  if (object == null) {\n    return {};\n  }\n  var props = arrayMap(getAllKeysIn(object), function(prop) {\n    return [prop];\n  });\n  predicate = baseIteratee(predicate);\n  return basePickBy(object, props, function(value, path) {\n    return predicate(value, path[0]);\n  });\n}\n\nmodule.exports = pickBy;\n","import React, { Component } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\n\nimport { StoreState } from 'app/types';\nimport { ExploreId } from 'app/types/explore';\n\nimport Explore from './Explore';\nimport { CustomScrollbar, ErrorBoundaryAlert } from '@grafana/ui';\nimport { resetExploreAction } from './state/actionTypes';\n\ninterface WrapperProps {\n  split: boolean;\n  resetExploreAction: typeof resetExploreAction;\n}\n\nexport class Wrapper extends Component<WrapperProps> {\n  componentWillUnmount() {\n    this.props.resetExploreAction({});\n  }\n\n  render() {\n    const { split } = this.props;\n\n    return (\n      <div className=\"page-scrollbar-wrapper\">\n        <CustomScrollbar autoHeightMin={'100%'} autoHeightMax={''} className=\"custom-scrollbar--page\">\n          <div className=\"explore-wrapper\">\n            <ErrorBoundaryAlert style=\"page\">\n              <Explore exploreId={ExploreId.left} />\n            </ErrorBoundaryAlert>\n            {split && (\n              <ErrorBoundaryAlert style=\"page\">\n                <Explore exploreId={ExploreId.right} />\n              </ErrorBoundaryAlert>\n            )}\n          </div>\n        </CustomScrollbar>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: StoreState) => {\n  const { split } = state.explore;\n  return { split };\n};\n\nconst mapDispatchToProps = {\n  resetExploreAction,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(Wrapper));\n","import React, { PureComponent } from 'react';\n\nimport {\n  rangeUtil,\n  RawTimeRange,\n  LogLevel,\n  TimeZone,\n  AbsoluteTimeRange,\n  LogsMetaKind,\n  LogsDedupStrategy,\n  LogRowModel,\n  LogsDedupDescription,\n  LogsMetaItem,\n  GraphSeriesXY,\n  LinkModel,\n  Field,\n} from '@grafana/data';\nimport { Switch, LogLabels, ToggleButtonGroup, ToggleButton, LogRows } from '@grafana/ui';\nimport store from 'app/core/store';\n\nimport { ExploreGraphPanel } from './ExploreGraphPanel';\n\nconst SETTINGS_KEYS = {\n  showLabels: 'grafana.explore.logs.showLabels',\n  showTime: 'grafana.explore.logs.showTime',\n  wrapLogMessage: 'grafana.explore.logs.wrapLogMessage',\n};\n\nfunction renderMetaItem(value: any, kind: LogsMetaKind) {\n  if (kind === LogsMetaKind.LabelsMap) {\n    return (\n      <span className=\"logs-meta-item__labels\">\n        <LogLabels labels={value} />\n      </span>\n    );\n  }\n  return value;\n}\n\ninterface Props {\n  logRows?: LogRowModel[];\n  logsMeta?: LogsMetaItem[];\n  logsSeries?: GraphSeriesXY[];\n  dedupedRows?: LogRowModel[];\n\n  width: number;\n  highlighterExpressions?: string[];\n  loading: boolean;\n  absoluteRange: AbsoluteTimeRange;\n  timeZone: TimeZone;\n  scanning?: boolean;\n  scanRange?: RawTimeRange;\n  dedupStrategy: LogsDedupStrategy;\n  onChangeTime: (range: AbsoluteTimeRange) => void;\n  onClickFilterLabel?: (key: string, value: string) => void;\n  onClickFilterOutLabel?: (key: string, value: string) => void;\n  onStartScanning?: () => void;\n  onStopScanning?: () => void;\n  onDedupStrategyChange: (dedupStrategy: LogsDedupStrategy) => void;\n  onToggleLogLevel: (hiddenLogLevels: LogLevel[]) => void;\n  getRowContext?: (row: LogRowModel, options?: any) => Promise<any>;\n  getFieldLinks: (field: Field, rowIndex: number) => Array<LinkModel<Field>>;\n}\n\ninterface State {\n  showLabels: boolean;\n  showTime: boolean;\n  wrapLogMessage: boolean;\n}\n\nexport class Logs extends PureComponent<Props, State> {\n  state = {\n    showLabels: store.getBool(SETTINGS_KEYS.showLabels, false),\n    showTime: store.getBool(SETTINGS_KEYS.showTime, true),\n    wrapLogMessage: store.getBool(SETTINGS_KEYS.wrapLogMessage, true),\n  };\n\n  onChangeDedup = (dedup: LogsDedupStrategy) => {\n    const { onDedupStrategyChange } = this.props;\n    if (this.props.dedupStrategy === dedup) {\n      return onDedupStrategyChange(LogsDedupStrategy.none);\n    }\n    return onDedupStrategyChange(dedup);\n  };\n\n  onChangeLabels = (event?: React.SyntheticEvent) => {\n    const target = event && (event.target as HTMLInputElement);\n    if (target) {\n      const showLabels = target.checked;\n      this.setState({\n        showLabels,\n      });\n      store.set(SETTINGS_KEYS.showLabels, showLabels);\n    }\n  };\n\n  onChangeTime = (event?: React.SyntheticEvent) => {\n    const target = event && (event.target as HTMLInputElement);\n    if (target) {\n      const showTime = target.checked;\n      this.setState({\n        showTime,\n      });\n      store.set(SETTINGS_KEYS.showTime, showTime);\n    }\n  };\n\n  onChangewrapLogMessage = (event?: React.SyntheticEvent) => {\n    const target = event && (event.target as HTMLInputElement);\n    if (target) {\n      const wrapLogMessage = target.checked;\n      this.setState({\n        wrapLogMessage,\n      });\n      store.set(SETTINGS_KEYS.wrapLogMessage, wrapLogMessage);\n    }\n  };\n\n  onToggleLogLevel = (hiddenRawLevels: string[]) => {\n    const hiddenLogLevels: LogLevel[] = hiddenRawLevels.map(level => LogLevel[level as LogLevel]);\n    this.props.onToggleLogLevel(hiddenLogLevels);\n  };\n\n  onClickScan = (event: React.SyntheticEvent) => {\n    event.preventDefault();\n    if (this.props.onStartScanning) {\n      this.props.onStartScanning();\n    }\n  };\n\n  onClickStopScan = (event: React.SyntheticEvent) => {\n    event.preventDefault();\n    if (this.props.onStopScanning) {\n      this.props.onStopScanning();\n    }\n  };\n\n  render() {\n    const {\n      logRows,\n      logsMeta,\n      logsSeries,\n      highlighterExpressions,\n      loading = false,\n      onClickFilterLabel,\n      onClickFilterOutLabel,\n      timeZone,\n      scanning,\n      scanRange,\n      width,\n      dedupedRows,\n      absoluteRange,\n      onChangeTime,\n      getFieldLinks,\n    } = this.props;\n\n    if (!logRows) {\n      return null;\n    }\n\n    const { showLabels, showTime, wrapLogMessage } = this.state;\n    const { dedupStrategy } = this.props;\n    const hasData = logRows && logRows.length > 0;\n    const dedupCount = dedupedRows\n      ? dedupedRows.reduce((sum, row) => (row.duplicates ? sum + row.duplicates : sum), 0)\n      : 0;\n    const meta = logsMeta ? [...logsMeta] : [];\n\n    if (dedupStrategy !== LogsDedupStrategy.none) {\n      meta.push({\n        label: 'Dedup count',\n        value: dedupCount,\n        kind: LogsMetaKind.Number,\n      });\n    }\n\n    const scanText = scanRange ? `Scanning ${rangeUtil.describeTimeRange(scanRange)}` : 'Scanning...';\n    const series = logsSeries ? logsSeries : [];\n\n    return (\n      <div className=\"logs-panel\">\n        <div className=\"logs-panel-graph\">\n          <ExploreGraphPanel\n            series={series}\n            width={width}\n            onHiddenSeriesChanged={this.onToggleLogLevel}\n            loading={loading}\n            absoluteRange={absoluteRange}\n            isStacked={true}\n            showPanel={false}\n            showingGraph={true}\n            showingTable={true}\n            timeZone={timeZone}\n            showBars={true}\n            showLines={false}\n            onUpdateTimeRange={onChangeTime}\n          />\n        </div>\n        <div className=\"logs-panel-options\">\n          <div className=\"logs-panel-controls\">\n            <Switch label=\"Time\" checked={showTime} onChange={this.onChangeTime} transparent />\n            <Switch label=\"Unique labels\" checked={showLabels} onChange={this.onChangeLabels} transparent />\n            <Switch label=\"Wrap lines\" checked={wrapLogMessage} onChange={this.onChangewrapLogMessage} transparent />\n            <ToggleButtonGroup label=\"Dedup\" transparent={true}>\n              {Object.keys(LogsDedupStrategy).map((dedupType: string, i) => (\n                <ToggleButton\n                  key={i}\n                  value={dedupType}\n                  onChange={this.onChangeDedup}\n                  selected={dedupStrategy === dedupType}\n                  // @ts-ignore\n                  tooltip={LogsDedupDescription[dedupType]}\n                >\n                  {dedupType}\n                </ToggleButton>\n              ))}\n            </ToggleButtonGroup>\n          </div>\n        </div>\n\n        {hasData && meta && (\n          <div className=\"logs-panel-meta\">\n            {meta.map(item => (\n              <div className=\"logs-panel-meta__item\" key={item.label}>\n                <span className=\"logs-panel-meta__label\">{item.label}:</span>\n                <span className=\"logs-panel-meta__value\">{renderMetaItem(item.value, item.kind)}</span>\n              </div>\n            ))}\n          </div>\n        )}\n\n        <LogRows\n          logRows={logRows}\n          deduplicatedRows={dedupedRows}\n          dedupStrategy={dedupStrategy}\n          getRowContext={this.props.getRowContext}\n          highlighterExpressions={highlighterExpressions}\n          rowLimit={logRows ? logRows.length : undefined}\n          onClickFilterLabel={onClickFilterLabel}\n          onClickFilterOutLabel={onClickFilterOutLabel}\n          showLabels={showLabels}\n          showTime={showTime}\n          wrapLogMessage={wrapLogMessage}\n          timeZone={timeZone}\n          getFieldLinks={getFieldLinks}\n        />\n\n        {!loading && !hasData && !scanning && (\n          <div className=\"logs-panel-nodata\">\n            No logs found.\n            <a className=\"link\" onClick={this.onClickScan}>\n              Scan for older logs\n            </a>\n          </div>\n        )}\n\n        {scanning && (\n          <div className=\"logs-panel-nodata\">\n            <span>{scanText}</span>\n            <a className=\"link\" onClick={this.onClickStopScan}>\n              Stop scan\n            </a>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nfunction formatLatency(value: number) {\n  return `${(value / 1000).toFixed(1)}s`;\n}\n\nexport type Props = {\n  canToggleEditorModes: boolean;\n  isDisabled?: boolean;\n  isNotStarted: boolean;\n  latency: number;\n  onClickToggleEditorMode: () => void;\n  onClickToggleDisabled: () => void;\n  onClickRemoveButton: () => void;\n};\n\nexport function QueryRowActions(props: Props) {\n  const {\n    canToggleEditorModes,\n    onClickToggleEditorMode,\n    onClickToggleDisabled,\n    onClickRemoveButton,\n    isDisabled,\n    isNotStarted,\n    latency,\n  } = props;\n\n  return (\n    <div className=\"gf-form-inline flex-shrink-0\">\n      {canToggleEditorModes && (\n        <div className=\"gf-form\">\n          <button\n            aria-label=\"Edit mode button\"\n            className=\"gf-form-label gf-form-label--btn\"\n            onClick={onClickToggleEditorMode}\n          >\n            <i className=\"fa fa-pencil\" />\n          </button>\n        </div>\n      )}\n      <div className=\"gf-form\">\n        <button disabled className=\"gf-form-label\" title=\"Query row latency\">\n          {formatLatency(latency)}\n        </button>\n      </div>\n      <div className=\"gf-form\">\n        <button\n          disabled={isNotStarted}\n          className=\"gf-form-label gf-form-label--btn\"\n          onClick={onClickToggleDisabled}\n          title=\"Disable/enable query\"\n        >\n          <i className={isDisabled ? 'fa fa-eye-slash' : 'fa fa-eye'} />\n        </button>\n      </div>\n      <div className=\"gf-form\">\n        <button className=\"gf-form-label gf-form-label--btn\" onClick={onClickRemoveButton} title=\"Remove query\">\n          <i className=\"fa fa-minus\" />\n        </button>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { css } from 'emotion';\n\nimport { Tooltip, useTheme, stylesFactory } from '@grafana/ui';\nimport { GrafanaTheme } from '@grafana/data';\n\nconst getStyles = stylesFactory((theme: GrafanaTheme) => {\n  return {\n    timePickerSynced: css`\n      label: timePickerSynced;\n      border-color: ${theme.colors.orangeDark};\n      background-image: none;\n      background-color: transparent;\n      color: ${theme.colors.orangeDark};\n      &:focus,\n      :hover {\n        color: ${theme.colors.orangeDark};\n        background-image: none;\n        background-color: transparent;\n      }\n    `,\n    noRightBorderStyle: css`\n      label: noRightBorderStyle;\n      border-right: 0;\n    `,\n    /*\n     * Required top-padding, otherwise is fa-link icon in active state\n     * cut off on top due to fontAwesome icon position\n     */\n    topPadding: css`\n      label: topPadding;\n      padding-top: 1px;\n    `,\n  };\n});\n\ninterface TimeSyncButtonProps {\n  isSynced: boolean;\n  onClick: () => void;\n}\n\nexport function TimeSyncButton(props: TimeSyncButtonProps) {\n  const { onClick, isSynced } = props;\n  const theme = useTheme();\n  const styles = getStyles(theme);\n\n  const syncTimesTooltip = () => {\n    const { isSynced } = props;\n    const tooltip = isSynced ? 'Unsync all views' : 'Sync all views to this time range';\n    return <>{tooltip}</>;\n  };\n\n  return (\n    <Tooltip content={syncTimesTooltip} placement=\"bottom\">\n      <button\n        className={classNames('btn navbar-button navbar-button--attached', {\n          [`explore-active-button-glow ${styles.timePickerSynced}`]: isSynced,\n        })}\n        aria-label={isSynced ? 'Synced times' : 'Unsynced times'}\n        onClick={() => onClick()}\n      >\n        <i className={classNames('fa fa-link', styles.topPadding, isSynced && 'icon-brand-gradient')} />\n      </button>\n    </Tooltip>\n  );\n}\n","// Libaries\nimport React, { Component } from 'react';\n\n// Types\nimport { ExploreId } from 'app/types';\nimport { TimeRange, TimeZone, RawTimeRange, dateTimeForTimeZone } from '@grafana/data';\n\n// State\n\n// Components\nimport { TimeSyncButton } from './TimeSyncButton';\nimport { TimePickerWithHistory } from 'app/core/components/TimePicker/TimePickerWithHistory';\n\n// Utils & Services\nimport { getShiftedTimeRange, getZoomedTimeRange } from 'app/core/utils/timePicker';\n\nexport interface Props {\n  exploreId: ExploreId;\n  hideText?: boolean;\n  range: TimeRange;\n  timeZone: TimeZone;\n  splitted: boolean;\n  syncedTimes: boolean;\n  onChangeTimeSync: () => void;\n  onChangeTime: (range: RawTimeRange) => void;\n}\n\nexport class ExploreTimeControls extends Component<Props> {\n  onMoveTimePicker = (direction: number) => {\n    const { range, onChangeTime, timeZone } = this.props;\n    const { from, to } = getShiftedTimeRange(direction, range);\n    const nextTimeRange = {\n      from: dateTimeForTimeZone(timeZone, from),\n      to: dateTimeForTimeZone(timeZone, to),\n    };\n\n    onChangeTime(nextTimeRange);\n  };\n\n  onMoveForward = () => this.onMoveTimePicker(1);\n  onMoveBack = () => this.onMoveTimePicker(-1);\n\n  onChangeTimePicker = (timeRange: TimeRange) => {\n    this.props.onChangeTime(timeRange.raw);\n  };\n\n  onZoom = () => {\n    const { range, onChangeTime, timeZone } = this.props;\n    const { from, to } = getZoomedTimeRange(range, 2);\n    const nextTimeRange = {\n      from: dateTimeForTimeZone(timeZone, from),\n      to: dateTimeForTimeZone(timeZone, to),\n    };\n\n    onChangeTime(nextTimeRange);\n  };\n\n  render() {\n    const { range, timeZone, splitted, syncedTimes, onChangeTimeSync, hideText } = this.props;\n    const timeSyncButton = splitted ? <TimeSyncButton onClick={onChangeTimeSync} isSynced={syncedTimes} /> : undefined;\n    const timePickerCommonProps = {\n      value: range,\n      timeZone,\n      onMoveBackward: this.onMoveBack,\n      onMoveForward: this.onMoveForward,\n      onZoom: this.onZoom,\n      hideText,\n    };\n\n    return (\n      <TimePickerWithHistory\n        {...timePickerCommonProps}\n        timeSyncButton={timeSyncButton}\n        isSynced={syncedTimes}\n        onChange={this.onChangeTimePicker}\n      />\n    );\n  }\n}\n","import React from 'react';\nimport memoizeOne from 'memoize-one';\nimport { css } from 'emotion';\nimport { CSSTransition } from 'react-transition-group';\n\nconst transitionDuration = 500;\n// We add a bit of delay to the transition as another perf optimisation. As at the start we need to render\n// quite a bit of new rows, if we start transition at the same time there can be frame rate drop. This gives time\n// for react to first render them and then do the animation.\nconst transitionDelay = 100;\n\nconst getStyles = memoizeOne(() => {\n  return {\n    logsEnter: css`\n      label: logsEnter;\n      position: absolute;\n      opacity: 0;\n      height: auto;\n      width: 100%;\n    `,\n    logsEnterActive: css`\n      label: logsEnterActive;\n      opacity: 1;\n      transition: opacity ${transitionDuration}ms ease-out ${transitionDelay}ms;\n    `,\n    logsExit: css`\n      label: logsExit;\n      position: absolute;\n      opacity: 1;\n      height: auto;\n      width: 100%;\n    `,\n    logsExitActive: css`\n      label: logsExitActive;\n      opacity: 0;\n      transition: opacity ${transitionDuration}ms ease-out ${transitionDelay}ms;\n    `,\n  };\n});\n\ntype Props = {\n  children: React.ReactNode;\n  visible: boolean;\n};\n\n/**\n * Cross fade transition component that is tied a bit too much to the logs containers so not very useful elsewhere\n * right now.\n */\nexport function LogsCrossFadeTransition(props: Props) {\n  const { visible, children } = props;\n  const styles = getStyles();\n  return (\n    <CSSTransition\n      in={visible}\n      mountOnEnter={true}\n      unmountOnExit={true}\n      timeout={transitionDuration + transitionDelay}\n      classNames={{\n        enter: styles.logsEnter,\n        enterActive: styles.logsEnterActive,\n        exit: styles.logsExit,\n        exitActive: styles.logsExitActive,\n      }}\n    >\n      {children}\n    </CSSTransition>\n  );\n}\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.has` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\nfunction baseHas(object, key) {\n  return object != null && hasOwnProperty.call(object, key);\n}\n\nmodule.exports = baseHas;\n","import React from 'react';\nimport { RefreshPicker } from '@grafana/ui';\nimport memoizeOne from 'memoize-one';\nimport { css } from 'emotion';\nimport classNames from 'classnames';\n\nimport { ResponsiveButton } from './ResponsiveButton';\n\nconst getStyles = memoizeOne(() => {\n  return {\n    selectButtonOverride: css`\n      label: selectButtonOverride;\n      .select-button-value {\n        color: white !important;\n      }\n    `,\n  };\n});\n\ntype Props = {\n  splitted: boolean;\n  loading: boolean;\n  onRun: () => void;\n  refreshInterval?: string;\n  onChangeRefreshInterval: (interval: string) => void;\n  showDropdown: boolean;\n};\n\nexport function RunButton(props: Props) {\n  const { splitted, loading, onRun, onChangeRefreshInterval, refreshInterval, showDropdown } = props;\n  const styles = getStyles();\n  const runButton = (\n    <ResponsiveButton\n      splitted={splitted}\n      title=\"Run Query\"\n      onClick={onRun}\n      buttonClassName={classNames('navbar-button--secondary', { 'btn--radius-right-0': showDropdown })}\n      iconClassName={loading ? 'fa fa-spinner fa-fw fa-spin run-icon' : 'fa fa-refresh fa-fw'}\n    />\n  );\n\n  if (showDropdown) {\n    return (\n      <RefreshPicker\n        onIntervalChanged={onChangeRefreshInterval}\n        value={refreshInterval}\n        buttonSelectClassName={`navbar-button--secondary ${styles.selectButtonOverride}`}\n        refreshButton={runButton}\n      />\n    );\n  }\n  return runButton;\n}\n","/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that negates the result of the predicate `func`. The\n * `func` predicate is invoked with the `this` binding and arguments of the\n * created function.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Function\n * @param {Function} predicate The predicate to negate.\n * @returns {Function} Returns the new negated function.\n * @example\n *\n * function isEven(n) {\n *   return n % 2 == 0;\n * }\n *\n * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n * // => [1, 3, 5]\n */\nfunction negate(predicate) {\n  if (typeof predicate != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  return function() {\n    var args = arguments;\n    switch (args.length) {\n      case 0: return !predicate.call(this);\n      case 1: return !predicate.call(this, args[0]);\n      case 2: return !predicate.call(this, args[0], args[1]);\n      case 3: return !predicate.call(this, args[0], args[1], args[2]);\n    }\n    return !predicate.apply(this, args);\n  };\n}\n\nmodule.exports = negate;\n","import React from 'react';\nimport classNames from 'classnames';\nimport tinycolor from 'tinycolor2';\nimport { css } from 'emotion';\nimport { CSSTransition } from 'react-transition-group';\nimport { useTheme, Tooltip, stylesFactory, selectThemeVariant } from '@grafana/ui';\nimport { GrafanaTheme } from '@grafana/data';\n\n//Components\nimport { ResponsiveButton } from './ResponsiveButton';\n\nconst getStyles = stylesFactory((theme: GrafanaTheme) => {\n  const bgColor = selectThemeVariant({ light: theme.colors.gray5, dark: theme.colors.dark1 }, theme.type);\n  const orangeLighter = tinycolor(theme.colors.orangeDark)\n    .lighten(10)\n    .toString();\n  const pulseTextColor = tinycolor(theme.colors.orangeDark)\n    .desaturate(90)\n    .toString();\n  return {\n    noRightBorderStyle: css`\n      label: noRightBorderStyle;\n      border-right: 0;\n    `,\n    liveButton: css`\n      label: liveButton;\n      margin: 0;\n    `,\n    isLive: css`\n      label: isLive;\n      border-color: ${theme.colors.orangeDark};\n      color: ${theme.colors.orangeDark};\n      background: transparent;\n      &:focus {\n        background: transparent;\n        border-color: ${theme.colors.orangeDark};\n        color: ${theme.colors.orangeDark};\n      }\n      &:hover {\n        background-color: ${bgColor};\n      }\n      &:active,\n      &:hover {\n        border-color: ${orangeLighter};\n        color: ${orangeLighter};\n      }\n    `,\n    isPaused: css`\n      label: isPaused;\n      border-color: ${theme.colors.orangeDark};\n      background: transparent;\n      animation: pulse 3s ease-out 0s infinite normal forwards;\n      &:focus {\n        background: transparent;\n        border-color: ${theme.colors.orangeDark};\n      }\n      &:hover {\n        background-color: ${bgColor};\n      }\n      &:active,\n      &:hover {\n        border-color: ${orangeLighter};\n      }\n      @keyframes pulse {\n        0% {\n          color: ${pulseTextColor};\n        }\n        50% {\n          color: ${theme.colors.orangeDark};\n        }\n        100% {\n          color: ${pulseTextColor};\n        }\n      }\n    `,\n    stopButtonEnter: css`\n      label: stopButtonEnter;\n      width: 0;\n      opacity: 0;\n      overflow: hidden;\n    `,\n    stopButtonEnterActive: css`\n      label: stopButtonEnterActive;\n      opacity: 1;\n      width: 32px;\n    `,\n    stopButtonExit: css`\n      label: stopButtonExit;\n      width: 32px;\n      opacity: 1;\n      overflow: hidden;\n    `,\n    stopButtonExitActive: css`\n      label: stopButtonExitActive;\n      opacity: 0;\n      width: 0;\n    `,\n  };\n});\n\nconst defaultLiveTooltip = () => {\n  return <>Live</>;\n};\n\ntype LiveTailButtonProps = {\n  splitted: boolean;\n  start: () => void;\n  stop: () => void;\n  pause: () => void;\n  resume: () => void;\n  isLive: boolean;\n  isPaused: boolean;\n};\nexport function LiveTailButton(props: LiveTailButtonProps) {\n  const { start, pause, resume, isLive, isPaused, stop, splitted } = props;\n  const theme = useTheme();\n  const styles = getStyles(theme);\n\n  const onClickMain = isLive ? (isPaused ? resume : pause) : start;\n\n  return (\n    <>\n      <Tooltip content={defaultLiveTooltip} placement=\"bottom\">\n        <ResponsiveButton\n          splitted={splitted}\n          buttonClassName={classNames('btn navbar-button', styles.liveButton, {\n            [`btn--radius-right-0 explore-active-button-glow ${styles.noRightBorderStyle}`]: isLive,\n            [styles.isLive]: isLive && !isPaused,\n            [styles.isPaused]: isLive && isPaused,\n          })}\n          iconClassName={classNames(\n            'fa',\n            isPaused || !isLive ? 'fa-play' : 'fa-pause',\n            isLive && 'icon-brand-gradient'\n          )}\n          onClick={onClickMain}\n          title={'\\xa0Live'}\n        />\n      </Tooltip>\n      <CSSTransition\n        mountOnEnter={true}\n        unmountOnExit={true}\n        timeout={500}\n        in={isLive}\n        classNames={{\n          enter: styles.stopButtonEnter,\n          enterActive: styles.stopButtonEnterActive,\n          exit: styles.stopButtonExit,\n          exitActive: styles.stopButtonExitActive,\n        }}\n      >\n        <div>\n          <button\n            className={`btn navbar-button navbar-button--attached explore-active-button-glow ${styles.isLive}`}\n            onClick={stop}\n          >\n            <i className={classNames('fa fa-stop icon-brand-gradient')} />\n          </button>\n        </div>\n      </CSSTransition>\n    </>\n  );\n}\n","// Libraries\nimport React from 'react';\nimport { hot } from 'react-hot-loader';\nimport { css } from 'emotion';\nimport { connect } from 'react-redux';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport memoizeOne from 'memoize-one';\n\n// Services & Utils\nimport store from 'app/core/store';\n// Components\nimport { ErrorBoundaryAlert } from '@grafana/ui';\nimport LogsContainer from './LogsContainer';\nimport QueryRows from './QueryRows';\nimport TableContainer from './TableContainer';\n// Actions\nimport {\n  changeSize,\n  initializeExplore,\n  modifyQueries,\n  scanStart,\n  setQueries,\n  refreshExplore,\n  updateTimeRange,\n  toggleGraph,\n  addQueryRow,\n} from './state/actions';\n// Types\nimport {\n  DataQuery,\n  DataSourceApi,\n  PanelData,\n  RawTimeRange,\n  TimeRange,\n  GraphSeriesXY,\n  TimeZone,\n  AbsoluteTimeRange,\n  LoadingState,\n} from '@grafana/data';\n\nimport {\n  ExploreItemState,\n  ExploreUrlState,\n  ExploreId,\n  ExploreUpdateState,\n  ExploreUIState,\n  ExploreMode,\n} from 'app/types/explore';\nimport { StoreState } from 'app/types';\nimport {\n  ensureQueries,\n  DEFAULT_RANGE,\n  DEFAULT_UI_STATE,\n  getTimeRangeFromUrl,\n  getTimeRange,\n  lastUsedDatasourceKeyForOrgId,\n} from 'app/core/utils/explore';\nimport { Emitter } from 'app/core/utils/emitter';\nimport { ExploreToolbar } from './ExploreToolbar';\nimport { NoDataSourceCallToAction } from './NoDataSourceCallToAction';\nimport { getTimeZone } from '../profile/state/selectors';\nimport { ErrorContainer } from './ErrorContainer';\nimport { scanStopAction } from './state/actionTypes';\nimport { ExploreGraphPanel } from './ExploreGraphPanel';\n\nconst getStyles = memoizeOne(() => {\n  return {\n    logsMain: css`\n      label: logsMain;\n      // Is needed for some transition animations to work.\n      position: relative;\n    `,\n    exploreAddButton: css`\n      margin-top: 1em;\n    `,\n  };\n});\n\ninterface ExploreProps {\n  changeSize: typeof changeSize;\n  datasourceInstance: DataSourceApi;\n  datasourceMissing: boolean;\n  exploreId: ExploreId;\n  initializeExplore: typeof initializeExplore;\n  initialized: boolean;\n  modifyQueries: typeof modifyQueries;\n  update: ExploreUpdateState;\n  refreshExplore: typeof refreshExplore;\n  scanning?: boolean;\n  scanRange?: RawTimeRange;\n  scanStart: typeof scanStart;\n  scanStopAction: typeof scanStopAction;\n  setQueries: typeof setQueries;\n  split: boolean;\n  queryKeys: string[];\n  initialDatasource: string;\n  initialQueries: DataQuery[];\n  initialRange: TimeRange;\n  mode: ExploreMode;\n  initialUI: ExploreUIState;\n  isLive: boolean;\n  syncedTimes: boolean;\n  updateTimeRange: typeof updateTimeRange;\n  graphResult?: GraphSeriesXY[];\n  loading?: boolean;\n  absoluteRange: AbsoluteTimeRange;\n  showingGraph?: boolean;\n  showingTable?: boolean;\n  timeZone?: TimeZone;\n  onHiddenSeriesChanged?: (hiddenSeries: string[]) => void;\n  toggleGraph: typeof toggleGraph;\n  queryResponse: PanelData;\n  originPanelId: number;\n  addQueryRow: typeof addQueryRow;\n}\n\n/**\n * Explore provides an area for quick query iteration for a given datasource.\n * Once a datasource is selected it populates the query section at the top.\n * When queries are run, their results are being displayed in the main section.\n * The datasource determines what kind of query editor it brings, and what kind\n * of results viewers it supports. The state is managed entirely in Redux.\n *\n * SPLIT VIEW\n *\n * Explore can have two Explore areas side-by-side. This is handled in `Wrapper.tsx`.\n * Since there can be multiple Explores (e.g., left and right) each action needs\n * the `exploreId` as first parameter so that the reducer knows which Explore state\n * is affected.\n *\n * DATASOURCE REQUESTS\n *\n * A click on Run Query creates transactions for all DataQueries for all expanded\n * result viewers. New runs are discarding previous runs. Upon completion a transaction\n * saves the result. The result viewers construct their data from the currently existing\n * transactions.\n *\n * The result viewers determine some of the query options sent to the datasource, e.g.,\n * `format`, to indicate eventual transformations by the datasources' result transformers.\n */\nexport class Explore extends React.PureComponent<ExploreProps> {\n  el: any;\n  exploreEvents: Emitter;\n\n  constructor(props: ExploreProps) {\n    super(props);\n    this.exploreEvents = new Emitter();\n  }\n\n  componentDidMount() {\n    const {\n      initialized,\n      exploreId,\n      initialDatasource,\n      initialQueries,\n      initialRange,\n      mode,\n      initialUI,\n      originPanelId,\n    } = this.props;\n    const width = this.el ? this.el.offsetWidth : 0;\n\n    // initialize the whole explore first time we mount and if browser history contains a change in datasource\n    if (!initialized) {\n      this.props.initializeExplore(\n        exploreId,\n        initialDatasource,\n        initialQueries,\n        initialRange,\n        mode,\n        width,\n        this.exploreEvents,\n        initialUI,\n        originPanelId\n      );\n    }\n  }\n\n  componentWillUnmount() {\n    this.exploreEvents.removeAllListeners();\n  }\n\n  componentDidUpdate(prevProps: ExploreProps) {\n    this.refreshExplore();\n  }\n\n  getRef = (el: any) => {\n    this.el = el;\n  };\n\n  onChangeTime = (rawRange: RawTimeRange) => {\n    const { updateTimeRange, exploreId } = this.props;\n    updateTimeRange({ exploreId, rawRange });\n  };\n\n  // Use this in help pages to set page to a single query\n  onClickExample = (query: DataQuery) => {\n    this.props.setQueries(this.props.exploreId, [query]);\n  };\n\n  onClickFilterLabel = (key: string, value: string) => {\n    this.onModifyQueries({ type: 'ADD_FILTER', key, value });\n  };\n\n  onClickFilterOutLabel = (key: string, value: string) => {\n    this.onModifyQueries({ type: 'ADD_FILTER_OUT', key, value });\n  };\n\n  onClickAddQueryRowButton = () => {\n    const { exploreId, queryKeys } = this.props;\n    this.props.addQueryRow(exploreId, queryKeys.length);\n  };\n\n  onModifyQueries = (action: any, index?: number) => {\n    const { datasourceInstance } = this.props;\n    if (datasourceInstance?.modifyQuery) {\n      const modifier = (queries: DataQuery, modification: any) =>\n        datasourceInstance.modifyQuery!(queries, modification);\n      this.props.modifyQueries(this.props.exploreId, action, modifier, index);\n    }\n  };\n\n  onResize = (size: { height: number; width: number }) => {\n    this.props.changeSize(this.props.exploreId, size);\n  };\n\n  onStartScanning = () => {\n    // Scanner will trigger a query\n    this.props.scanStart(this.props.exploreId);\n  };\n\n  onStopScanning = () => {\n    this.props.scanStopAction({ exploreId: this.props.exploreId });\n  };\n\n  onToggleGraph = (showingGraph: boolean) => {\n    const { toggleGraph, exploreId } = this.props;\n    toggleGraph(exploreId, showingGraph);\n  };\n\n  onUpdateTimeRange = (absoluteRange: AbsoluteTimeRange) => {\n    const { exploreId, updateTimeRange } = this.props;\n    updateTimeRange({ exploreId, absoluteRange });\n  };\n\n  refreshExplore = () => {\n    const { exploreId, update } = this.props;\n\n    if (update.queries || update.ui || update.range || update.datasource || update.mode) {\n      this.props.refreshExplore(exploreId);\n    }\n  };\n\n  renderEmptyState = () => {\n    return (\n      <div className=\"explore-container\">\n        <NoDataSourceCallToAction />\n      </div>\n    );\n  };\n\n  render() {\n    const {\n      datasourceInstance,\n      datasourceMissing,\n      exploreId,\n      split,\n      queryKeys,\n      mode,\n      graphResult,\n      loading,\n      absoluteRange,\n      showingGraph,\n      showingTable,\n      timeZone,\n      queryResponse,\n      syncedTimes,\n      isLive,\n    } = this.props;\n    const exploreClass = split ? 'explore explore-split' : 'explore';\n    const styles = getStyles();\n    const StartPage = datasourceInstance?.components?.ExploreStartPage;\n    const showStartPage = !queryResponse || queryResponse.state === LoadingState.NotStarted;\n\n    return (\n      <div className={exploreClass} ref={this.getRef}>\n        <ExploreToolbar exploreId={exploreId} onChangeTime={this.onChangeTime} />\n        {datasourceMissing ? this.renderEmptyState() : null}\n        {datasourceInstance && (\n          <div className=\"explore-container\">\n            <QueryRows exploreEvents={this.exploreEvents} exploreId={exploreId} queryKeys={queryKeys} />\n            <div className=\"gf-form\">\n              <button\n                aria-label=\"Add row button\"\n                className={`gf-form-label gf-form-label--btn ${styles.exploreAddButton}`}\n                onClick={this.onClickAddQueryRowButton}\n                disabled={isLive}\n              >\n                <i className={'fa fa-fw fa-plus icon-margin-right'} />\n                <span className=\"btn-title\">{'\\xA0' + 'Add query'}</span>\n              </button>\n            </div>\n            <ErrorContainer queryErrors={queryResponse.error ? [queryResponse.error] : undefined} />\n            <AutoSizer onResize={this.onResize} disableHeight>\n              {({ width }) => {\n                if (width === 0) {\n                  return null;\n                }\n\n                return (\n                  <main className={`m-t-2 ${styles.logsMain}`} style={{ width }}>\n                    <ErrorBoundaryAlert>\n                      {showStartPage && StartPage && (\n                        <div className=\"grafana-info-box grafana-info-box--max-lg\">\n                          <StartPage\n                            onClickExample={this.onClickExample}\n                            datasource={datasourceInstance}\n                            exploreMode={mode}\n                          />\n                        </div>\n                      )}\n                      {!showStartPage && (\n                        <>\n                          {mode === ExploreMode.Metrics && (\n                            <ExploreGraphPanel\n                              series={graphResult}\n                              width={width}\n                              loading={loading}\n                              absoluteRange={absoluteRange}\n                              isStacked={false}\n                              showPanel={true}\n                              showingGraph={showingGraph}\n                              showingTable={showingTable}\n                              timeZone={timeZone}\n                              onToggleGraph={this.onToggleGraph}\n                              onUpdateTimeRange={this.onUpdateTimeRange}\n                              showBars={false}\n                              showLines={true}\n                            />\n                          )}\n                          {mode === ExploreMode.Metrics && (\n                            <TableContainer width={width} exploreId={exploreId} onClickCell={this.onClickFilterLabel} />\n                          )}\n                          {mode === ExploreMode.Logs && (\n                            <LogsContainer\n                              width={width}\n                              exploreId={exploreId}\n                              syncedTimes={syncedTimes}\n                              onClickFilterLabel={this.onClickFilterLabel}\n                              onClickFilterOutLabel={this.onClickFilterOutLabel}\n                              onStartScanning={this.onStartScanning}\n                              onStopScanning={this.onStopScanning}\n                            />\n                          )}\n                        </>\n                      )}\n                    </ErrorBoundaryAlert>\n                  </main>\n                );\n              }}\n            </AutoSizer>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nconst ensureQueriesMemoized = memoizeOne(ensureQueries);\nconst getTimeRangeFromUrlMemoized = memoizeOne(getTimeRangeFromUrl);\n\nfunction mapStateToProps(state: StoreState, { exploreId }: ExploreProps): Partial<ExploreProps> {\n  const explore = state.explore;\n  const { split, syncedTimes } = explore;\n  const item: ExploreItemState = explore[exploreId];\n  const timeZone = getTimeZone(state.user);\n  const {\n    datasourceInstance,\n    datasourceMissing,\n    initialized,\n    queryKeys,\n    urlState,\n    update,\n    isLive,\n    supportedModes,\n    mode,\n    graphResult,\n    loading,\n    showingGraph,\n    showingTable,\n    absoluteRange,\n    queryResponse,\n  } = item;\n\n  const { datasource, queries, range: urlRange, mode: urlMode, ui, originPanelId } = (urlState ||\n    {}) as ExploreUrlState;\n  const initialDatasource = datasource || store.get(lastUsedDatasourceKeyForOrgId(state.user.orgId));\n  const initialQueries: DataQuery[] = ensureQueriesMemoized(queries);\n  const initialRange = urlRange\n    ? getTimeRangeFromUrlMemoized(urlRange, timeZone)\n    : getTimeRange(timeZone, DEFAULT_RANGE);\n\n  let newMode: ExploreMode | undefined;\n\n  if (supportedModes.length) {\n    const urlModeIsValid = supportedModes.includes(urlMode);\n    const modeStateIsValid = supportedModes.includes(mode);\n\n    if (modeStateIsValid) {\n      newMode = mode;\n    } else if (urlModeIsValid) {\n      newMode = urlMode;\n    } else {\n      newMode = supportedModes[0];\n    }\n  } else {\n    newMode = [ExploreMode.Metrics, ExploreMode.Logs].includes(urlMode) ? urlMode : undefined;\n  }\n\n  const initialUI = ui || DEFAULT_UI_STATE;\n\n  return {\n    datasourceInstance,\n    datasourceMissing,\n    initialized,\n    split,\n    queryKeys,\n    update,\n    initialDatasource,\n    initialQueries,\n    initialRange,\n    mode: newMode,\n    initialUI,\n    isLive,\n    graphResult,\n    loading,\n    showingGraph,\n    showingTable,\n    absoluteRange,\n    queryResponse,\n    originPanelId,\n    syncedTimes,\n    timeZone,\n  };\n}\n\nconst mapDispatchToProps: Partial<ExploreProps> = {\n  changeSize,\n  initializeExplore,\n  modifyQueries,\n  refreshExplore,\n  scanStart,\n  scanStopAction,\n  setQueries,\n  updateTimeRange,\n  toggleGraph,\n  addQueryRow,\n};\n\nexport default hot(module)(\n  // @ts-ignore\n  connect(mapStateToProps, mapDispatchToProps)(Explore)\n) as React.ComponentType<{ exploreId: ExploreId }>;\n","// Libraries\nimport React, { PureComponent } from 'react';\n\n// Services\nimport { getAngularLoader, AngularComponent } from '@grafana/runtime';\nimport { getTimeSrv } from 'app/features/dashboard/services/TimeSrv';\n\n// Types\nimport { Emitter } from 'app/core/utils/emitter';\nimport { DataQuery } from '@grafana/data';\nimport { TimeRange } from '@grafana/data';\nimport 'app/features/plugins/plugin_loader';\nimport { dateTime } from '@grafana/data';\n\ninterface QueryEditorProps {\n  error?: any;\n  datasource: any;\n  onExecuteQuery?: () => void;\n  onQueryChange?: (value: DataQuery) => void;\n  initialQuery: DataQuery;\n  exploreEvents: Emitter;\n  range: TimeRange;\n  textEditModeEnabled?: boolean;\n}\n\nexport default class QueryEditor extends PureComponent<QueryEditorProps, any> {\n  element: any;\n  component: AngularComponent;\n  angularScope: any;\n\n  async componentDidMount() {\n    if (!this.element) {\n      return;\n    }\n\n    const { datasource, initialQuery, exploreEvents, range } = this.props;\n    this.initTimeSrv(range);\n\n    const loader = getAngularLoader();\n    const template = '<plugin-component type=\"query-ctrl\"> </plugin-component>';\n    const target = { datasource: datasource.name, ...initialQuery };\n    const scopeProps = {\n      ctrl: {\n        datasource,\n        target,\n        refresh: () => {\n          setTimeout(() => {\n            this.props.onQueryChange?.(target);\n            this.props.onExecuteQuery?.();\n          }, 1);\n        },\n        onQueryChange: () => {\n          setTimeout(() => {\n            this.props.onQueryChange?.(target);\n          }, 1);\n        },\n        events: exploreEvents,\n        panel: { datasource, targets: [target] },\n        dashboard: {},\n      },\n    };\n\n    this.component = loader.load(this.element, scopeProps, template);\n    this.angularScope = scopeProps.ctrl;\n\n    setTimeout(() => {\n      this.props.onQueryChange?.(target);\n      this.props.onExecuteQuery?.();\n    }, 1);\n  }\n\n  componentDidUpdate(prevProps: QueryEditorProps) {\n    const hasToggledEditorMode = prevProps.textEditModeEnabled !== this.props.textEditModeEnabled;\n    const hasNewError = prevProps.error !== this.props.error;\n\n    if (this.component) {\n      if (hasToggledEditorMode && this.angularScope && this.angularScope.toggleEditorMode) {\n        this.angularScope.toggleEditorMode();\n      }\n\n      if (hasNewError || hasToggledEditorMode) {\n        // Some query controllers listen to data error events and need a digest\n        // for some reason this needs to be done in next tick\n        setTimeout(this.component.digest);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.component) {\n      this.component.destroy();\n    }\n  }\n\n  initTimeSrv(range: TimeRange) {\n    const timeSrv = getTimeSrv();\n    timeSrv.init({\n      time: {\n        from: dateTime(range.from),\n        to: dateTime(range.to),\n      },\n      refresh: false,\n      getTimezone: () => 'utc',\n      timeRangeUpdated: () => console.log('refreshDashboard!'),\n    });\n  }\n\n  render() {\n    return <div className=\"gf-form-query\" ref={element => (this.element = element)} style={{ width: '100%' }} />;\n  }\n}\n","import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport { DataFrame } from '@grafana/data';\nimport { Table, Collapse } from '@grafana/ui';\nimport { ExploreId, ExploreItemState } from 'app/types/explore';\nimport { StoreState } from 'app/types';\nimport { toggleTable } from './state/actions';\nimport { config } from 'app/core/config';\nimport { PANEL_BORDER } from 'app/core/constants';\n\ninterface TableContainerProps {\n  exploreId: ExploreId;\n  loading: boolean;\n  width: number;\n  onClickCell: (key: string, value: string) => void;\n  showingTable: boolean;\n  tableResult?: DataFrame;\n  toggleTable: typeof toggleTable;\n}\n\nexport class TableContainer extends PureComponent<TableContainerProps> {\n  onClickTableButton = () => {\n    this.props.toggleTable(this.props.exploreId, this.props.showingTable);\n  };\n\n  getTableHeight() {\n    const { tableResult } = this.props;\n\n    if (!tableResult || tableResult.length === 0) {\n      return 200;\n    }\n\n    // tries to estimate table height\n    return Math.max(Math.min(600, tableResult.length * 35) + 35);\n  }\n\n  render() {\n    const { loading, onClickCell, showingTable, tableResult, width } = this.props;\n\n    const height = this.getTableHeight();\n    const tableWidth = width - config.theme.panelPadding * 2 - PANEL_BORDER;\n\n    return (\n      <Collapse label=\"Table\" loading={loading} collapsible isOpen={showingTable} onToggle={this.onClickTableButton}>\n        {tableResult && <Table data={tableResult} width={tableWidth} height={height} onCellClick={onClickCell} />}\n      </Collapse>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState, { exploreId }: { exploreId: string }) {\n  const explore = state.explore;\n  // @ts-ignore\n  const item: ExploreItemState = explore[exploreId];\n  const { loading: loadingInState, showingTable, tableResult } = item;\n  const loading = tableResult && tableResult.length > 0 ? false : loadingInState;\n  return { loading, showingTable, tableResult };\n}\n\nconst mapDispatchToProps = {\n  toggleTable,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(TableContainer));\n"],"sourceRoot":""}