{"version":3,"file":"testDataDSPlugin.0d4e39d4a098bf42bd02.js","mappings":"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A,UACA,MACA,aACA,cACA,aACA,WACA,QACA,WACA,OACA,UACA,KACA,OACA,YACA,YACA,OACA,YACA,aACA,MACA,YACA,YACA,OACA,KACA,QACA,MACA,UACA,WACA,WACA,QACA,KACA,MACA,UACA,KACA,UACA,OACA,KACA,QACA,SACA,QACA,UACA,MACA,KACA,WACA,aACA,MACA,SACA,UACA,MACA,SACA,QACA,MACA,WACA,QACA,SACA,QACA,UACA,MACA,QACA,KACA,OACA,SACA,UACA,SACA,WACA,QACA,WACA,YACA,MACA,QACA,QACA,cACA,aACA,QACA,YACA,KACA,MACA,WACA,UACA,MACA,QACA,iBACA,QACA,UACA,KACA,KACA,aACA,cACA,OACA,KACA,YACA,MACA,aACA,SACA,QACA,QACA,MACA,UACA,IACA,WACA,WACA,KACA,MACA,aACA,eACA,UACA,QACA,cACA,MACA,cACA,YACA,aACA,UACF,EC7IaI,GAAqC,CAChD,KAAM,SACN,MAAO,IACP,OAAQ,IACR,MAAO,IACP,MAAO,CACT,EAEO,SAASC,GAAUC,EAAkBC,EAAgE,CAC1G,MAAM5H,KAAQ,YAAS2H,EAAO,OAAQF,EAAkB,EACxD,GAAiBzH,EAAM,OAAnB,SACF,OAAO6H,GAAgBF,EAAQ3H,EAAO4H,CAAG,EAE3C,GAAe5H,EAAM,OAAjB,OACF,OAAO8H,GAAcH,EAAQ3H,EAAO4H,CAAG,EAEzC,GAAgB5H,EAAM,OAAlB,QACF,OAAO+H,GAAeJ,EAAQ3H,EAAO4H,CAAG,EAE1C,MAAM,IAAI,MAAM,wBAAwB5H,EAAM,MAAM,CACtD,CAEO,SAAS6H,GACdF,EACA3H,EACA4H,EAC+B,CAC/B,OAAO,IAAII,GAAA,EAA+BC,GAAe,CACvD,MAAMC,EAAW,UAAUN,EAAI,WAAWD,EAAO,QAC3CQ,EAAgBP,EAAI,eAAiB,IAErC7C,EAA0B,CAC9B,MAAO4C,EAAO,MACd,OAAQ,CACN,CAAE,KAAM,OAAQ,KAAM,SAAe,EACrC,CAAE,KAAMA,EAAO,OAAS,QAAS,KAAM,WAAiB,CAC1D,CACF,EAEM,CA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ClB,CACF,EACA,CACE,MAAO,gBACP,IAAK,GACL,SAAU,CACR,MAAO,CACL,UAAW,oBACX,MAAO,qFACT,EACA,cAAe,YACf,eAAgB,mBAClB,CACF,EACA,CACE,MAAO,gBACP,IAAK,GACL,SAAU,CACR,MAAO,CACL,UAAW,oBACX,MAAO,qFACT,EACA,cAAe,YACf,eAAgB,mBAClB,CACF,CACF,CACF,EACA,OAAQ,CACN,OACA,OACA,OACA,OACA,OACA,OACA,QACA,OACA,OACA,QACA,QACA,QACA,QACA,SACA,QACA,QACA,QACF,CACF,EACA,CACE,KAAM,WACN,KAAM,YACN,OAAQ,CAAC,EACT,OAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAE,CACpE,EACA,CACE,KAAM,aACN,KAAM,YACN,OAAQ,CAAC,EACT,OAAQ,CACN,OACA,SACA,MACA,MACA,MACA,MACA,MACA,MACA,SACA,WACA,MACA,MACA,MACA,MACA,WACA,WACA,UACF,CACF,EACA,CACE,KAAM,WACN,KAAM,YACN,OAAQ,CAAC,EACT,OAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAE,CAC/D,EACA,CACE,KAAM,aACN,KAAM,YACN,OAAQ,CAAC,EACT,OAAQ,CACN,YACA,SACA,OACA,SACA,cACA,YACA,WACA,WACA,SACA,WACA,OACA,MACA,MACA,MACA,WACA,YACA,UACF,CACF,EACA,CACE,KAAM,aACN,KAAM,YACN,OAAQ,CAAE,YAAa,qBAAsB,EAC7C,OAAQ,CACN,kBACA,kBACA,kBACA,kBACA,iBACA,kBACA,eACA,gBACA,kBACA,eACA,eACA,eACA,iBACA,eACA,kBACA,kBACA,cACF,CACF,EACA,CACE,KAAM,kBACN,KAAM,YACN,OAAQ,CAAE,KAAM,QAAS,YAAa,yBAA0B,EAChE,OAAQ,CACN,kBAAmB,mBAAoB,mBAAqB,mBAAoB,oBAChF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GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC5G,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC5G,EAAG,EAAG,EAAG,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I,GAAI,KAAM,KAAM,IAAK,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,IAC1G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,IAAK,GAAI,GACzG,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACvG,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAK,IAAK,IAAK,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC7G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC1G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC1G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,GAAI,IAAK,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC7G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAM,KAAM,KAAM,KACtG,KAAM,KAAM,KAAM,KAAM,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC7G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAC7G,KAAM,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC7G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,GAAI,IAAK,GAAI,GAAI,GAAI,IAAK,GAAI,IAAK,IAAK,GAAI,GAAI,IAC1G,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAC1G,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAC7G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC3G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,IAAK,GAAI,GAAI,IAAK,IAAK,GAC7G,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IACzG,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC1G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC7G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAC5G,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC7G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAM,KAAM,KAAM,KAC1G,KAAM,GAAI,GAAI,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,IAAK,GAAI,GAAI,GAAI,IAAK,GAAI,IAAK,GAAI,GAAI,GAC1G,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC7G,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC3G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5G,GAAI,GAAI,GAAI,EACd,EACA,OAAQ,CACN,KAAM,OACR,CACF,EACA,CACE,KAAM,QACN,OAAQ,CACN,QACA,uCACA,kCACA,2CACA,gCACA,qCACA,uCACA,0CACA,gDACA,iDACA,4CACA,6CACA,kBACA,yDACA,YACA,iBACA,iBACA,iBACA,qBACA,gCACA,YACA,iBACA,eACA,iDACA,+CACA,4BACA,iDACA,yCACA,0BACA,uBACA,2BACA,oBACA,mBACA,+BACA,wBACA,sBACA,8BACA,yBACA,mBACA,qBACA,0BACA,gCACA,oBACA,2CACA,oBACA,mBACA,wBACA,sBACA,8BACA,yBACA,mBACA,qBACA,sBACA,yBACA,gDACA,+CACA,oBACA,mBACA,+BACA,6BACA,2BACA,kCACA,0BACA,gCACA,2BACA,yBACA,oBACA,uBACA,oBACA,uBACA,mBACA,oBACA,iDACA,oBACA,mBACA,0BACA,6BACA,2BACA,gCACA,2BACA,yBACA,sBACA,+BACA,6BACA,oCACA,4BACA,0BACA,uBACA,oBACA,oBACA,mBACA,oBACA,mBACA,0BACA,+BACA,kBACA,oBACA,mBACA,0BACA,+BACA,6BACA,2BACA,kCACA,0BACA,mCACA,gCACA,qCACA,uCACA,0CACA,gDACA,4BACA,iDACA,4CACA,6CACA,iDACA,+CACA,yCACA,sCACA,YACA,iBACA,eACA,sCACA,sCACA,iBACA,iBACA,iBACA,iBACA,iBACA,qBACA,sCACA,eACA,qBACA,sCACA,eACA,sCACA,sCACA,2BACA,yBACA,qBACA,sBACA,2BACA,sBACA,qBACA,eACA,sCACA,kDACA,qCACA,wDACA,oBACA,kBACA,kBACA,0CACA,qCACA,+CACA,+CACA,mCACA,iCACA,4BACA,oBACA,qBACA,qCACA,4CACA,qCACA,8CACA,gDACA,2DACA,0DACA,2CACA,0CACA,sCACA,2CACA,4CACA,0CACA,oBACA,aACA,+BACA,sCACA,kBACA,6CACA,kBACA,8CACA,0CACA,kBACA,yCACA,2BACA,0CACA,2CACA,8CACA,0CACA,yBACA,mCACA,iCACA,8BACA,kDACA,iCACA,+CACA,iCACA,wEACA,iCACA,yDACA,iCACA,gEACA,yDACA,kEACA,6CACA,sDACA,4DACA,8DACA,qCACA,aACA,oDACA,2DACA,kEACA,+DACA,yEACA,+DACA,kBACA,gEACA,yEACA,oBACA,kBACA,mBACA,+BACA,yBACA,sBACA,+BACA,6BACA,6BACA,kCACA,8BACA,kCACA,iCACA,yCACA,oDACA,+CACA,kDACA,4BACA,oBACA,cACA,2CACA,+CACA,kBACA,qCACA,4BACA,2BACA,mBACA,0BACA,mBACA,mBACA,uBACA,uBACA,kBACA,sBACA,wBACA,uBACA,mBACA,8BACA,oBACA,mBACA,0BACA,0BACA,yCACA,oBACA,mBACA,mBACA,0BACA,8CACA,4BACA,oDACA,6BACA,cACA,YACA,2BACA,8BACA,oBACA,uBACA,0BACA,0BACA,qBACA,YACA,yBACA,cACA,oBACA,yCACA,+CACA,+CACA,sBACA,iDACA,yCACA,cACA,6CACA,kDACA,4BACA,+EACA,uFACA,8EACA,yDACA,gDACA,+BACA,2BACA,0BACA,0BACA,uBACA,8BACA,mBACA,0BACA,mBACA,mBACA,0BACA,4BACA,iCACA,mBACA,6BACA,2BACA,gCACA,2BACA,yBACA,sBACA,+BACA,6BACA,oCACA,4BACA,gDACA,oBACA,uBACA,mBACA,eACA,0BACA,0BACA,iDACA,oBACA,mBACA,0BACA,uBACA,oBACA,oBACA,mBACA,sBACA,+CACA,oBACA,mBACA,+BACA,6BACA,2BACA,gCACA,mBACA,oBACA,mBACA,uBACA,uBACA,kBACA,sBACA,wBACA,uBACA,sBACA,kBACA,eACA,+BACA,uCACA,mCACA,qCACA,iBACA,yBACA,oBACA,kBACA,qBACA,mDACA,4CACA,gEACA,mEACA,kEACA,6DACA,kEACA,gCACA,gCACA,2BACA,oBACA,mBACA,wBACA,sBACA,8BACA,yBACA,mBACA,qBACA,iBACA,gCACA,+BACA,iCACA,qCACA,+BACA,kEACA,gCACA,+BACA,iCACA,qCACA,+BACA,0DACA,qEACA,wEACA,0EACA,2BACA,0DACA,wBACA,8BACA,0CACA,uBACA,8BACA,mBACA,oBACA,eACA,eACA,kBACA,iCACA,iCACA,uBACA,mCACA,mCACA,2BACA,kCACA,+BACA,2CACA,wCACA,gCACA,qCACA,wCACA,uDACA,iDACA,+CACA,2CACA,iEACA,4EACA,8EACA,6BACA,6BACA,wBACA,wBACA,gCACA,wBACA,wBACA,sCACA,oBACA,qBACA,4BACA,gBACA,kBACA,8BACA,uCACA,2BACA,oCACA,oBACA,mBACA,wBACA,sBACA,8BACA,yBACA,mBACA,qBACA,oBACA,mBACA,+BACA,qCACA,0CACA,6BACA,qCACA,uCACA,kBACA,yCACA,oCACA,kBACA,mCACA,qDACA,+CACA,wCACA,gCACA,2BACA,oBACA,mBACA,+BACA,0BACA,gCACA,oBACA,oCACA,oBACA,mBACA,sCACA,+BACA,wBACA,sBACA,8BACA,yBACA,mBACA,qBACA,sBACA,qCACA,wCACA,uDACA,iDACA,iDACA,oBACA,mBACA,mBACA,4BACA,mBACA,0BACA,mBACA,mBACA,uBACA,uBACA,kBACA,sBACA,wBACA,uBACA,sBACA,kBACA,eACA,6BACA,cACA,2BACA,0BACA,0BACA,4BACA,8BACA,qBACA,sBACA,2BACA,sBACA,iBACA,oBACA,yCACA,qCACA,uCACA,kBACA,mBACA,uCACA,kBACA,mBACA,qCACA,wBACA,oBACA,uBACA,mBACA,0BACA,+BACA,0BACA,0BACA,mBACA,yBACA,oBACA,yBACA,iCACA,kBACA,qBACA,eACA,mBACA,mBACA,gBACA,mBACA,mBACA,gBACA,mBACA,mBACA,wBACA,uBACA,kBACA,eACA,yBACA,iCACA,oBACA,uBACA,mBACA,4BACA,oBACA,+CACA,mBACA,uBACA,yBACA,iCACA,8CACA,oBACA,mBACA,0BACA,kBACA,4BACA,2BACA,2BACA,cACA,gCACA,mBACA,0BACA,mBACA,mBACA,+BACA,0BACA,6BACA,cACA,sCACA,mBACA,wCACA,gCACA,qCACA,wCACA,uCACA,yCACA,uDACA,iDACA,+CACA,2CACA,iEACA,4EACA,8EACA,6BACA,6BACA,wBACA,wBACA,gCACA,wBACA,wBACA,sCACA,oBACA,qBACA,4BACA,gBACA,kBACA,+CACA,iDACA,4CACA,6CACA,wDACA,+CACA,2CACA,iEACA,4EACA,8EACA,6BACA,6BACA,wBACA,wBACA,gCACA,wBACA,wBACA,sCACA,oBACA,qBACA,4BACA,gBACA,kBACA,sBACA,gCACA,qCACA,wCACA,uDACA,iDACA,iDACA,+CACA,2CACA,iEACA,4EACA,8EACA,6BACA,6BACA,wBACA,wBACA,gCACA,cACA,qBACA,qBACA,uBACA,wBACA,+CACA,8BACA,sBACA,uCACA,wBACA,oBACA,oBACA,mBACA,0BACA,mBACA,uBACA,yBACA,iCACA,kBACA,qBACA,eACA,oBACA,kBACA,qBACA,eACA,yBACA,iCACA,kCACA,8CACA,cACA,oBACA,mBACA,wBACA,sBACA,8BACA,yBACA,mBACA,mBACA,uBACA,mBACA,mBACA,gBACA,gCACA,eACA,oCACA,mBACA,+BACA,oCACA,mDACA,qCACA,uBACA,2CACA,sBACA,6CACA,gBACA,uBACA,sBACA,yBACA,kBACA,eACA,qBACA,sBACA,kBACA,qBACA,eACA,mBACA,2CACA,4BACA,mBACA,mBACA,2CACA,2CACA,4BACA,wBACA,sBACA,8BACA,gCACA,gBACA,iBACA,qBACA,sBACA,gBACA,sBACA,2CACA,gBACA,uBACA,kCACA,wCACA,cACA,qBACA,qBACA,uBACA,wBACA,wBACA,kBACA,4BACA,uBACA,4BACA,mBACA,0BACA,mBACA,uBACA,cACA,qDACA,8CACA,yBACA,+CACA,yCACA,wCACA,gCACA,2BACA,oCACA,oBACA,mBACA,wBACA,sBACA,8BACA,yBACA,mBACA,wBACA,qBACA,qBACA,oBACA,mBACA,+BACA,0BACA,oBACA,uBACA,yBACA,oBACA,kBACA,kCACA,8CACA,kCACA,2BACA,cACA,eACA,iBACA,mBACA,wCACA,YACA,4BACA,uBACA,6CACA,oBACA,UACA,cACA,eACA,iBACA,mBACA,mBACA,aACA,uBACA,sBACA,6BACA,uBACA,qBACA,cACA,oBACA,mBACA,6BACA,2BACA,gCACA,2BACA,yBACA,sBACA,+BACA,6BACA,oCACA,kBACA,4BACA,gBACA,kBACA,kBACA,eACA,eACA,kBACA,oBACA,YACA,iBACA,eACA,oCACA,UACA,iBACA,qBACA,oCACA,6BACA,2CACA,oCACA,oBACA,6EACA,oBACA,kBACA,gCACA,kEACA,uDACA,yDACA,eACA,yCACA,wCACA,8CACA,6BACA,6BACA,gCACA,oDACA,uCACA,mCACA,qCACA,iBACA,kBACA,qDACA,gEACA,qBACA,kBACA,gCACA,oBACA,uBACA,4DACA,uDACA,yCACA,wCACA,8CACA,6BACA,qCACA,wBACA,gCACA,sCACA,8BACA,kCACA,mBACA,sCACA,oBACA,qBACA,4BACA,gBACA,kBACA,+BACA,sBACA,yBACA,sBACA,+BACA,kBACA,qBACA,0BACA,4BACA,sBACA,qBACA,wBACA,mBACA,kBACA,0BACA,qBACA,iBACA,oCACA,iBACA,4BACA,qBACA,0BACA,2BACA,qBACA,0BACA,wBACA,0BACA,wBACA,4BACA,kBACA,mBACA,+BACA,qBACA,4BACA,sBACA,4BACA,uBACA,sBACA,kCACA,mBACA,oCACA,oCACA,+BACA,mCACA,mBACA,eACA,kBACA,sBACA,wBACA,gBACA,kBACA,uBACA,uBACA,+BACA,mBACA,oBACA,eACA,eACA,kBACA,uCACA,kFACA,oBACA,mBACA,+BACA,kBACA,mBACA,oCACA,+BACA,kCACA,8BACA,mDACA,gBACA,iBACA,mBACA,uBACA,kBACA,oBACA,gBACA,oBACA,qBACA,gBACA,+BACA,sBACA,mBACA,sBACA,kBACA,gBACA,oBACA,yBACA,oBACA,eACA,gBACA,sBACA,mBACA,kBACA,qBACA,sBACA,uBACA,sBACA,qBACA,oCACA,4BACA,6BACA,kBACA,kBACA,gCACA,oBACA,mBACA,eACA,kBACA,sBACA,wBACA,gBACA,gBACA,iBACA,qBACA,sBACA,gBACA,wBACA,mCACA,oBACA,qBACA,4BACA,gBACA,kBACA,sBACA,0BACA,qCACA,iDACA,mDACA,sDACA,2EACA,0DACA,sDACA,sDACA,2DACA,qEACA,uEACA,0EACA,+DACA,oEACA,gCACA,qCACA,qCACA,oBACA,mBACA,6BACA,2BACA,gCACA,2BACA,4BACA,uCACA,mBACA,oBACA,uBACA,2BACA,yCACA,mBACA,oBACA,uBACA,sBACA,kBACA,eACA,gEACA,6DACA,kEACA,gEACA,yDACA,mBACA,oBACA,mBACA,eACA,2BACA,yBACA,qBACA,sBACA,2BACA,sBACA,qBACA,mEACA,qEACA,6DACA,sEACA,oBACA,mBACA,0BACA,8BACA,6CACA,kCACA,oBACA,mBACA,wBACA,sBACA,8BACA,yBACA,mBACA,qBACA,sBACA,wCACA,mBACA,oBACA,0BACF,CACF,CACF,CACF,E,gBCjyCO,MAAMC,WAAgC,KAA4C,CACvF,YAAYhO,EAAwC,CAClD,MAAO,CACL,MAAO,mCACP,YAAaA,EAAM,MACnB,WAAY,oBACZ,QAAS,MACX,CACF,CACF,CCcO,MAAMiO,WAA2BC,GAAA,EAAgC,CAGtE,YACEC,EACiBC,KAA2B,MAAe,EAC3D,CACA,MAAMD,CAAgB,EAFL,iBAAAC,EAGjB,KAAK,UAAY,IAAIJ,EACvB,CAEA,MAAMvK,EAAoE,CACxE,MAAM4K,EAA6B,CAAC,EAC9BC,EAAgD,CAAC,EAGvD,UAAW3G,KAAUlE,EAAQ,QAC3B,GAAI,CAAAkE,EAAO,KAMX,OAFA,KAAK,yBAAyBA,EAAQlE,EAAQ,UAAU,EAEhDkE,EAAO,WAAY,CACzB,IAAK,OACH2G,EAAQ,KAAKC,GAAoB5G,EAAQlE,CAAO,CAAC,EACjD,MACF,IAAK,mBACH6K,EAAQ,KAAK5G,GAAUC,EAAQlE,CAAO,CAAC,EACvC,MACF,IAAK,cACH6K,EAAQ,K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","sources":["webpack://grafana/./public/app/features/dashboard/dashgrid/liveTimer.ts","webpack://grafana/./public/app/plugins/datasource/testdata/dataquery.gen.ts","webpack://grafana/./public/app/plugins/datasource/testdata/ConfigEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/StreamingClientEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/RandomWalkEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/CSVContentEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/CSVFileEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/constants.ts","webpack://grafana/./public/app/plugins/datasource/testdata/components/CSVWaveEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/ErrorEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/GrafanaLiveEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/NodeGraphEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/PredictablePulseEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/RawFrameEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/SimulationSchemaForm.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/SimulationQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/USAQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/LogIpsum.ts","webpack://grafana/./public/app/plugins/datasource/testdata/runStreams.ts","webpack://grafana/./public/app/plugins/datasource/testdata/QueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/TestInfoTab.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/metricTree.ts","webpack://grafana/./public/app/plugins/datasource/testdata/testData/serviceMapResponse.ts","webpack://grafana/./public/app/plugins/datasource/testdata/nodeGraphUtils.ts","webpack://grafana/./public/app/plugins/datasource/testdata/testData/flameGraphResponse.ts","webpack://grafana/./public/app/plugins/datasource/testdata/variables.ts","webpack://grafana/./public/app/plugins/datasource/testdata/datasource.ts","webpack://grafana/./public/app/plugins/datasource/testdata/module.tsx"],"sourcesContent":["import { BehaviorSubject } from 'rxjs';\n\nimport { dateMath, dateTime, TimeRange } from '@grafana/data';\n\nimport { PanelStateWrapper } from './PanelStateWrapper';\n\n// target is 20hz (50ms), but we poll at 100ms to smooth out jitter\nconst interval = 100;\n\ninterface LiveListener {\n  last: number;\n  intervalMs: number;\n  panel: PanelStateWrapper;\n}\n\nclass LiveTimer {\n  listeners: LiveListener[] = [];\n\n  budget = 1;\n  threshold = 1.5; // trial and error appears about right\n  ok = new BehaviorSubject(true);\n  lastUpdate = Date.now();\n\n  isLive = false; // the dashboard time range ends in \"now\"\n  timeRange?: TimeRange;\n  liveTimeOffset = 0;\n\n  /** Called when the dashboard time range changes */\n  setLiveTimeRange(v?: TimeRange) {\n    this.timeRange = v;\n    this.isLive = v?.raw?.to === 'now';\n\n    if (this.isLive) {\n      const from = dateMath.parse(v!.raw.from, false)?.valueOf()!;\n      const to = dateMath.parse(v!.raw.to, true)?.valueOf()!;\n      this.liveTimeOffset = to - from;\n\n      for (const listener of this.listeners) {\n        listener.intervalMs = getLiveTimerInterval(this.liveTimeOffset, listener.panel.props.width);\n      }\n    }\n  }\n\n  listen(panel: PanelStateWrapper) {\n    this.listeners.push({\n      last: this.lastUpdate,\n      panel: panel,\n      intervalMs: getLiveTimerInterval(\n        60000, // 1min\n        panel.props.width\n      ),\n    });\n  }\n\n  remove(panel: PanelStateWrapper) {\n    this.listeners = this.listeners.filter((v) => v.panel !== panel);\n  }\n\n  updateInterval(panel: PanelStateWrapper) {\n    if (!this.timeRange || !this.isLive) {\n      return;\n    }\n    for (const listener of this.listeners) {\n      if (listener.panel === panel) {\n        listener.intervalMs = getLiveTimerInterval(this.liveTimeOffset, listener.panel.props.width);\n        return;\n      }\n    }\n  }\n\n  // Called at the consistent dashboard interval\n  measure = () => {\n    const now = Date.now();\n    this.budget = (now - this.lastUpdate) / interval;\n\n    const oldOk = this.ok.getValue();\n    const newOk = this.budget <= this.threshold;\n    if (oldOk !== newOk) {\n      this.ok.next(newOk);\n    }\n    this.lastUpdate = now;\n\n    // For live dashboards, listen to changes\n    if (this.isLive && this.ok.getValue() && this.timeRange) {\n      // when the time-range is relative fire events\n      let tr: TimeRange | undefined = undefined;\n      for (const listener of this.listeners) {\n        if (!listener.panel.props.isInView) {\n          continue;\n        }\n\n        const elapsed = now - listener.last;\n        if (elapsed >= listener.intervalMs) {\n          if (!tr) {\n            const { raw } = this.timeRange;\n            tr = {\n              raw,\n              from: dateTime(now - this.liveTimeOffset),\n              to: dateTime(now),\n            };\n          }\n          listener.panel.liveTimeChanged(tr);\n          listener.last = now;\n        }\n      }\n    }\n  };\n}\n\nconst FIVE_MINS = 5 * 60 * 1000;\n\nexport function getLiveTimerInterval(delta: number, width: number): number {\n  const millisPerPixel = Math.ceil(delta / width / 100) * 100;\n  if (millisPerPixel > FIVE_MINS) {\n    return FIVE_MINS;\n  }\n  return millisPerPixel;\n}\n\nexport const liveTimer = new LiveTimer();\nsetInterval(liveTimer.measure, interval);\n","// Code generated - EDITING IS FUTILE. DO NOT EDIT.\n//\n// Generated by:\n//     public/app/plugins/gen.go\n// Using jennies:\n//     TSTypesJenny\n//     PluginTSTypesJenny\n//\n// Run 'make gen-cue' from repository root to regenerate.\n\nimport * as common from '@grafana/schema';\n\nexport const DataQueryModelVersion = Object.freeze([0, 0]);\n\nexport enum TestDataQueryType {\n  Annotations = 'annotations',\n  Arrow = 'arrow',\n  CSVContent = 'csv_content',\n  CSVFile = 'csv_file',\n  CSVMetricValues = 'csv_metric_values',\n  DataPointsOutsideRange = 'datapoints_outside_range',\n  ExponentialHeatmapBucketData = 'exponential_heatmap_bucket_data',\n  FlameGraph = 'flame_graph',\n  GrafanaAPI = 'grafana_api',\n  LinearHeatmapBucketData = 'linear_heatmap_bucket_data',\n  Live = 'live',\n  Logs = 'logs',\n  ManualEntry = 'manual_entry',\n  NoDataPoints = 'no_data_points',\n  NodeGraph = 'node_graph',\n  PredictableCSVWave = 'predictable_csv_wave',\n  PredictablePulse = 'predictable_pulse',\n  RandomWalk = 'random_walk',\n  RandomWalkTable = 'random_walk_table',\n  RandomWalkWithError = 'random_walk_with_error',\n  RawFrame = 'raw_frame',\n  ServerError500 = 'server_error_500',\n  Simulation = 'simulation',\n  SlowQuery = 'slow_query',\n  StreamingClient = 'streaming_client',\n  TableStatic = 'table_static',\n  Trace = 'trace',\n  USA = 'usa',\n  VariablesQuery = 'variables-query',\n}\n\nexport interface StreamingQuery {\n  bands?: number;\n  noise: number;\n  speed: number;\n  spread: number;\n  type: ('signal' | 'logs' | 'fetch');\n  url?: string;\n}\n\nexport interface PulseWaveQuery {\n  offCount?: number;\n  offValue?: number;\n  onCount?: number;\n  onValue?: number;\n  timeStep?: number;\n}\n\nexport interface SimulationQuery {\n  config?: Record<string, unknown>;\n  key: {\n    type: string;\n    tick: number;\n    uid?: string;\n  };\n  last?: boolean;\n  stream?: boolean;\n}\n\nexport interface NodesQuery {\n  count?: number;\n  type?: ('random' | 'response' | 'random edges');\n}\n\nexport interface USAQuery {\n  fields?: Array<string>;\n  mode?: string;\n  period?: string;\n  states?: Array<string>;\n}\n\nexport const defaultUSAQuery: Partial<USAQuery> = {\n  fields: [],\n  states: [],\n};\n\nexport interface CSVWave {\n  labels?: string;\n  name?: string;\n  timeStep?: number;\n  valuesCSV?: string;\n}\n\n/**\n * TODO: Should this live here given it's not used in the dataquery?\n */\nexport interface Scenario {\n  description?: string;\n  hideAliasField?: boolean;\n  id: string;\n  name: string;\n  stringInput: string;\n}\n\nexport interface TestData extends common.DataQuery {\n  alias?: string;\n  channel?: string;\n  csvContent?: string;\n  csvFileName?: string;\n  csvWave?: Array<CSVWave>;\n  errorType?: ('server_panic' | 'frontend_exception' | 'frontend_observable');\n  labels?: string;\n  levelColumn?: boolean;\n  lines?: number;\n  nodes?: NodesQuery;\n  points?: Array<Array<(string | number)>>;\n  pulseWave?: PulseWaveQuery;\n  rawFrameContent?: string;\n  scenarioId?: TestDataQueryType;\n  seriesCount?: number;\n  sim?: SimulationQuery;\n  spanCount?: number;\n  stream?: StreamingQuery;\n  stringInput?: string;\n  usa?: USAQuery;\n}\n\nexport const defaultTestData: Partial<TestData> = {\n  csvWave: [],\n  points: [],\n  scenarioId: TestDataQueryType.RandomWalk,\n};\n","// Libraries\nimport React, { PureComponent } from 'react';\n\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\n\ntype Props = DataSourcePluginOptionsEditorProps<any>;\n\n/**\n * Empty Config Editor -- settings to save\n */\nexport class ConfigEditor extends PureComponent<Props> {\n  render() {\n    return <div />;\n  }\n}\n","import React, { ChangeEvent } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { InlineField, InlineFieldRow, Input, Select } from '@grafana/ui';\n\nimport { EditorProps } from '../QueryEditor';\nimport { StreamingQuery } from '../dataquery.gen';\n\nconst streamingClientFields = [\n  { label: 'Speed (ms)', id: 'speed', placeholder: 'value', min: 10, step: 10 },\n  { label: 'Spread', id: 'spread', placeholder: 'value', min: 0.5, step: 0.1 },\n  { label: 'Noise', id: 'noise', placeholder: 'value', min: 0, step: 0.1 },\n  { label: 'Bands', id: 'bands', placeholder: 'bands', min: 0, step: 1 },\n];\n\nconst types = [\n  { value: 'signal', label: 'Signal' },\n  { value: 'logs', label: 'Logs' },\n  { value: 'fetch', label: 'Fetch' },\n];\n\nexport const StreamingClientEditor = ({ onChange, query }: EditorProps) => {\n  const onSelectChange = ({ value }: SelectableValue) => {\n    onChange({ target: { name: 'type', value } });\n  };\n\n  // Convert values to numbers before saving\n  const onInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    onChange({ target: { name, value: Number(value) } });\n  };\n\n  return (\n    <InlineFieldRow>\n      <InlineField label=\"Type\" labelWidth={14}>\n        <Select width={32} onChange={onSelectChange} defaultValue={types[0]} options={types} />\n      </InlineField>\n      {query?.stream?.type === 'signal' &&\n        streamingClientFields.map(({ label, id, min, step, placeholder }) => {\n          return (\n            <InlineField label={label} labelWidth={14} key={id}>\n              <Input\n                width={32}\n                type=\"number\"\n                id={`stream.${id}-${query.refId}`}\n                name={id}\n                min={min}\n                step={step}\n                value={query.stream?.[id as keyof StreamingQuery]}\n                placeholder={placeholder}\n                onChange={onInputChange}\n              />\n            </InlineField>\n          );\n        })}\n\n      {query?.stream?.type === 'fetch' && (\n        <InlineField label=\"URL\" labelWidth={14} grow>\n          <Input\n            type=\"text\"\n            name=\"url\"\n            id={`stream.url-${query.refId}`}\n            value={query?.stream?.url}\n            placeholder=\"Fetch URL\"\n            onChange={onChange}\n          />\n        </InlineField>\n      )}\n    </InlineFieldRow>\n  );\n};\n","import React from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { InlineField, InlineFieldRow, Input } from '@grafana/ui';\n\nimport { EditorProps } from '../QueryEditor';\nimport { TestData } from '../dataquery.gen';\n\nconst randomWalkFields = [\n  { label: 'Series count', id: 'seriesCount', placeholder: '1', min: 1, step: 1 },\n  { label: 'Start value', id: 'startValue', placeholder: 'auto', step: 1 },\n  { label: 'Min', id: 'min', placeholder: 'none', step: 0.1 },\n  { label: 'Max', id: 'max', placeholder: 'none', step: 0.1 },\n  { label: 'Spread', id: 'spread', placeholder: '1', min: 0.5, step: 0.1 },\n  { label: 'Noise', id: 'noise', placeholder: '0', min: 0, step: 0.1 },\n  {\n    label: 'Drop (%)',\n    id: 'drop',\n    placeholder: '0',\n    min: 0,\n    max: 100,\n    step: 1,\n    tooltip: 'Exclude some percent (chance) points',\n  },\n];\n\nconst testSelectors = selectors.components.DataSource.TestData.QueryTab;\ntype Selector = 'max' | 'min' | 'noise' | 'seriesCount' | 'spread' | 'startValue' | 'drop';\n\nexport const RandomWalkEditor = ({ onChange, query }: EditorProps) => {\n  return (\n    <InlineFieldRow>\n      {randomWalkFields.map(({ label, id, min, step, placeholder, tooltip }) => {\n        const selector = testSelectors?.[id as Selector];\n        return (\n          <InlineField label={label} labelWidth={14} key={id} aria-label={selector} tooltip={tooltip}>\n            <Input\n              width={32}\n              name={id}\n              type=\"number\"\n              id={`randomWalk-${id}-${query.refId}`}\n              min={min}\n              step={step}\n              value={(query as any)[id as keyof TestData] || placeholder}\n              placeholder={placeholder}\n              onChange={onChange}\n            />\n          </InlineField>\n        );\n      })}\n    </InlineFieldRow>\n  );\n};\n","import React from 'react';\n\nimport { CodeEditor } from '@grafana/ui';\n\nimport { EditorProps } from '../QueryEditor';\n\nexport const CSVContentEditor = ({ onChange, query }: EditorProps) => {\n  const onSaveCSV = (csvContent: string) => {\n    onChange({ ...query, csvContent });\n  };\n\n  return (\n    <CodeEditor\n      height={300}\n      language=\"csv\"\n      value={query.csvContent ?? ''}\n      onBlur={onSaveCSV}\n      onSave={onSaveCSV}\n      showMiniMap={false}\n      showLineNumbers={true}\n    />\n  );\n};\n","import React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { InlineField, InlineFieldRow, Select } from '@grafana/ui';\n\nimport { EditorProps } from '../QueryEditor';\n\nexport const CSVFileEditor = ({ onChange, query }: EditorProps) => {\n  const onChangeFileName = ({ value }: SelectableValue<string>) => {\n    onChange({ ...query, csvFileName: value });\n  };\n\n  const files = [\n    'flight_info_by_state.csv',\n    'population_by_state.csv',\n    'gdp_per_capita.csv',\n    'js_libraries.csv',\n    'ohlc_dogecoin.csv',\n    'weight_height.csv',\n    'browser_marketshare.csv',\n  ].map((name) => ({ label: name, value: name }));\n\n  return (\n    <InlineFieldRow>\n      <InlineField label=\"File\" labelWidth={14}>\n        <Select\n          width={32}\n          onChange={onChangeFileName}\n          placeholder=\"Select csv file\"\n          options={files}\n          value={files.find((f) => f.value === query.csvFileName)}\n        />\n      </InlineField>\n    </InlineFieldRow>\n  );\n};\n","import { CSVWave, PulseWaveQuery, TestData, TestDataQueryType } from './dataquery.gen';\n\nexport const defaultPulseQuery: PulseWaveQuery = {\n  timeStep: 60,\n  onCount: 3,\n  onValue: 2,\n  offCount: 3,\n  offValue: 1,\n};\n\nexport const defaultCSVWaveQuery: CSVWave[] = [\n  {\n    timeStep: 60,\n    valuesCSV: '0,0,2,2,1,1',\n  },\n];\n\nexport const defaultQuery: TestData = {\n  scenarioId: TestDataQueryType.RandomWalk,\n  refId: '',\n};\n","import React, { PureComponent, useState } from 'react';\n\nimport { Button, InlineField, InlineFieldRow, Input } from '@grafana/ui';\n\nimport { defaultCSVWaveQuery } from '../constants';\nimport type { CSVWave } from '../dataquery.gen';\n\ninterface WavesProps {\n  waves?: CSVWave[];\n  onChange: (waves: CSVWave[]) => void;\n}\n\ninterface WaveProps {\n  wave: CSVWave;\n  index: number;\n  last: boolean;\n  onChange: (index: number, wave?: CSVWave) => void;\n  onAdd: () => void;\n}\n\nconst CSVWaveEditor = (props: WaveProps) => {\n  const { wave, last, index, onAdd, onChange } = props;\n  const [valuesCSV, setValuesCSV] = useState(wave.valuesCSV || '');\n  const [labels, setLabels] = useState(wave.labels || '');\n  const [name, setName] = useState(wave.name || '');\n  const onAction = () => {\n    if (last) {\n      onAdd();\n    } else {\n      onChange(index, undefined);\n    }\n  };\n  const onValueChange = <K extends keyof CSVWave, V extends CSVWave[K]>(key: K, value: V) => {\n    onChange(index, { ...wave, [key]: value });\n  };\n  const onKeyDown = (evt: React.KeyboardEvent<HTMLInputElement>) => {\n    if (evt.key === 'Enter') {\n      onValueChange('valuesCSV', valuesCSV);\n    }\n  };\n\n  return (\n    <InlineFieldRow>\n      <InlineField\n        label={'Values'}\n        grow\n        tooltip=\"Comma separated values. Each value may be an int, float, or null and must not be empty. Whitespace and trailing commas are removed\"\n      >\n        <Input\n          value={valuesCSV}\n          placeholder={'CSV values'}\n          onChange={(e) => setValuesCSV(e.currentTarget.value)}\n          autoFocus={true}\n          onBlur={() => onValueChange('valuesCSV', valuesCSV)}\n          onKeyDown={onKeyDown}\n        />\n      </InlineField>\n      <InlineField label={'Step'} tooltip=\"The number of seconds between datapoints.\">\n        <Input\n          value={wave.timeStep}\n          type=\"number\"\n          placeholder={'60'}\n          width={10}\n          onChange={(e) => onValueChange('timeStep', e.currentTarget.valueAsNumber)}\n        />\n      </InlineField>\n      <InlineField label={'Name'}>\n        <Input\n          value={name}\n          placeholder={'name'}\n          width={10}\n          onChange={(e) => setName(e.currentTarget.value)}\n          onBlur={() => onValueChange('name', name)}\n        />\n      </InlineField>\n      <InlineField label={'Labels'}>\n        <Input\n          value={labels}\n          placeholder={'labels'}\n          width={12}\n          onChange={(e) => setLabels(e.currentTarget.value)}\n          onBlur={() => onValueChange('labels', labels)}\n        />\n      </InlineField>\n      <Button icon={last ? 'plus' : 'minus'} variant=\"secondary\" onClick={onAction} />\n    </InlineFieldRow>\n  );\n};\n\nexport class CSVWavesEditor extends PureComponent<WavesProps> {\n  onChange = (index: number, wave?: CSVWave) => {\n    let waves = [...(this.props.waves ?? defaultCSVWaveQuery)];\n    if (wave) {\n      waves[index] = { ...wave };\n    } else {\n      // remove the element\n      waves.splice(index, 1);\n    }\n    this.props.onChange(waves);\n  };\n\n  onAdd = () => {\n    const waves = [...(this.props.waves ?? defaultCSVWaveQuery)];\n    waves.push({ ...defaultCSVWaveQuery[0] });\n    this.props.onChange(waves);\n  };\n\n  render() {\n    let waves = this.props.waves ?? defaultCSVWaveQuery;\n    if (!waves.length) {\n      waves = defaultCSVWaveQuery;\n    }\n\n    return (\n      <>\n        {waves.map((wave, index) => (\n          <CSVWaveEditor\n            key={`${index}/${wave.valuesCSV}`}\n            wave={wave}\n            index={index}\n            onAdd={this.onAdd}\n            onChange={this.onChange}\n            last={index === waves.length - 1}\n          />\n        ))}\n      </>\n    );\n  }\n}\n","import React from 'react';\n\nimport { InlineField, InlineFieldRow, Select } from '@grafana/ui';\n\nimport { EditorProps } from '../QueryEditor';\n\nconst ERROR_OPTIONS = [\n  {\n    label: 'Server panic',\n    value: 'server_panic',\n  },\n  {\n    label: 'Frontend exception',\n    value: 'frontend_exception',\n  },\n  {\n    label: 'Frontend observable',\n    value: 'frontend_observable',\n  },\n];\n\nconst FrontendErrorQueryEditor = ({ query, onChange }: EditorProps) => {\n  return (\n    <InlineFieldRow>\n      <InlineField labelWidth={14} label=\"Error type\">\n        <Select\n          options={ERROR_OPTIONS}\n          value={query.errorType}\n          onChange={(v) => {\n            onChange({ ...query, errorType: v.value });\n          }}\n        />\n      </InlineField>\n    </InlineFieldRow>\n  );\n};\n\nexport default FrontendErrorQueryEditor;\n","import React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { InlineField, InlineFieldRow, Select } from '@grafana/ui';\n\nimport { EditorProps } from '../QueryEditor';\n\nconst liveTestDataChannels = [\n  {\n    label: 'random-2s-stream',\n    value: 'random-2s-stream',\n    description: 'Random stream with points every 2s',\n  },\n  {\n    label: 'random-flakey-stream',\n    value: 'random-flakey-stream',\n    description: 'Stream that returns data in random intervals',\n  },\n  {\n    label: 'random-labeled-stream',\n    value: 'random-labeled-stream',\n    description: 'Value with moving labels',\n  },\n  {\n    label: 'random-20Hz-stream',\n    value: 'random-20Hz-stream',\n    description: 'Random stream with points in 20Hz',\n  },\n];\n\nexport const GrafanaLiveEditor = ({ onChange, query }: EditorProps) => {\n  const onChannelChange = ({ value }: SelectableValue<string>) => {\n    onChange({ ...query, channel: value });\n  };\n\n  return (\n    <InlineFieldRow>\n      <InlineField label=\"Channel\" labelWidth={14}>\n        <Select\n          width={32}\n          onChange={onChannelChange}\n          placeholder=\"Select channel\"\n          options={liveTestDataChannels}\n          value={liveTestDataChannels.find((f) => f.value === query.channel)}\n        />\n      </InlineField>\n    </InlineFieldRow>\n  );\n};\n","import React from 'react';\n\nimport { Input, InlineFieldRow, InlineField, Select } from '@grafana/ui';\n\nimport { NodesQuery, TestData } from '../dataquery.gen';\n\nexport interface Props {\n  onChange: (value: NodesQuery) => void;\n  query: TestData;\n}\nexport function NodeGraphEditor({ query, onChange }: Props) {\n  const type = query.nodes?.type || 'random';\n  return (\n    <InlineFieldRow>\n      <InlineField label=\"Data type\" labelWidth={14}>\n        <Select<NodesQuery['type']>\n          options={options.map((o) => ({\n            label: o,\n            value: o,\n          }))}\n          value={options.find((item) => item === type)}\n          onChange={(value) => onChange({ ...query.nodes, type: value.value! })}\n          width={32}\n        />\n      </InlineField>\n      {(type === 'random' || type === 'random edges') && (\n        <InlineField label=\"Count\" labelWidth={14}>\n          <Input\n            type=\"number\"\n            name=\"count\"\n            value={query.nodes?.count}\n            width={32}\n            onChange={(e) =>\n              onChange({ ...query.nodes, count: e.currentTarget.value ? parseInt(e.currentTarget.value, 10) : 0 })\n            }\n            placeholder=\"10\"\n          />\n        </InlineField>\n      )}\n    </InlineFieldRow>\n  );\n}\n\nconst options: Array<NodesQuery['type']> = ['random', 'response', 'random edges'];\n","import React, { ChangeEvent } from 'react';\n\nimport { InlineField, InlineFieldRow, Input } from '@grafana/ui';\n\nimport { EditorProps } from '../QueryEditor';\nimport { PulseWaveQuery } from '../dataquery.gen';\n\nconst fields: Array<{\n  label: string;\n  id: keyof PulseWaveQuery;\n  placeholder: string;\n  tooltip: string;\n}> = [\n  { label: 'Step', id: 'timeStep', placeholder: '60', tooltip: 'The number of seconds between datapoints.' },\n  {\n    label: 'On Count',\n    id: 'onCount',\n    placeholder: '3',\n    tooltip: 'The number of values within a cycle, at the start of the cycle, that should have the onValue.',\n  },\n  { label: 'Off Count', id: 'offCount', placeholder: '6', tooltip: 'The number of offValues within the cycle.' },\n  {\n    label: 'On Value',\n    id: 'onValue',\n    placeholder: '1',\n    tooltip: 'The value for \"on values\", may be an int, float, or null.',\n  },\n  {\n    label: 'Off Value',\n    id: 'offValue',\n    placeholder: '1',\n    tooltip: 'The value for \"off values\", may be a int, float, or null.',\n  },\n];\n\nexport const PredictablePulseEditor = ({ onChange, query }: EditorProps) => {\n  // Convert values to numbers before saving\n  const onInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n\n    onChange({ target: { name, value: Number(value) } });\n  };\n\n  return (\n    <InlineFieldRow>\n      {fields.map(({ label, id, placeholder, tooltip }) => {\n        return (\n          <InlineField label={label} labelWidth={14} key={id} tooltip={tooltip}>\n            <Input\n              width={32}\n              type=\"number\"\n              name={id}\n              id={`pulseWave.${id}-${query.refId}`}\n              value={query.pulseWave?.[id]}\n              placeholder={placeholder}\n              onChange={onInputChange}\n            />\n          </InlineField>\n        );\n      })}\n    </InlineFieldRow>\n  );\n};\n","import { isArray } from 'lodash';\nimport React, { useState } from 'react';\n\nimport { dataFrameToJSON, toDataFrame, toDataFrameDTO } from '@grafana/data';\nimport { toDataQueryResponse } from '@grafana/runtime';\nimport { Alert, CodeEditor } from '@grafana/ui';\n\nimport { EditorProps } from '../QueryEditor';\n\nexport const RawFrameEditor = ({ onChange, query }: EditorProps) => {\n  const [error, setError] = useState<string>();\n  const [warning, setWarning] = useState<string>();\n\n  const onSaveFrames = (rawFrameContent: string) => {\n    try {\n      const json = JSON.parse(rawFrameContent);\n      if (isArray(json)) {\n        setError(undefined);\n        setWarning(undefined);\n        onChange({ ...query, rawFrameContent });\n        return;\n      }\n\n      let data = undefined;\n\n      // Copy paste from panel json\n      if (isArray(json.series) && json.state) {\n        data = json.series.map((v: any) => toDataFrameDTO(toDataFrame(v)));\n      } else {\n        // Chek if it is a copy of the raw resuls\n        const v = toDataQueryResponse({ data: json });\n        if (v.data?.length && !v.error) {\n          data = v.data.map((f) => dataFrameToJSON(f));\n        }\n      }\n\n      if (data) {\n        console.log('Original', json);\n        console.log('Save', data);\n        setError(undefined);\n        setWarning('Converted to direct frame result');\n        onChange({ ...query, rawFrameContent: JSON.stringify(data, null, 2) });\n        return;\n      }\n\n      setError('Unable to read dataframes in text');\n    } catch (e) {\n      console.log('Error parsing json', e);\n      setError('Enter JSON array of data frames (or raw query results body)');\n      setWarning(undefined);\n    }\n  };\n\n  return (\n    <>\n      {error && <Alert title={error} severity=\"error\" />}\n      {warning && <Alert title={warning} severity=\"warning\" />}\n      <CodeEditor\n        height={300}\n        language=\"json\"\n        value={query.rawFrameContent ?? '[]'}\n        onBlur={onSaveFrames}\n        onSave={onSaveFrames}\n        showMiniMap={true}\n        showLineNumbers={true}\n      />\n    </>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { FormEvent, useState, ChangeEvent } from 'react';\n\nimport { DataFrameSchema, FieldSchema, GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2, TextArea, InlineField, Input, FieldSet, InlineSwitch } from '@grafana/ui';\n\ninterface SchemaFormProps {\n  config: Record<string, any>;\n  schema: DataFrameSchema;\n  onChange: (config: Record<string, any>) => void;\n}\n\nconst renderInput = (field: FieldSchema, onChange: SchemaFormProps['onChange'], config: SchemaFormProps['config']) => {\n  switch (field.type) {\n    case 'number':\n      return (\n        <Input\n          type=\"number\"\n          defaultValue={config?.[field.name]}\n          onChange={(e: FormEvent<HTMLInputElement>) => {\n            const newValue = e.currentTarget.valueAsNumber;\n            onChange({ ...config, [field.name]: newValue });\n          }}\n        />\n      );\n    case 'boolean':\n      return (\n        <InlineSwitch\n          value={config?.[field.name] ?? true}\n          onChange={() => {\n            onChange({ ...config, [field.name]: !config[field.name] });\n          }}\n        />\n      );\n    default:\n      return (\n        <Input\n          type=\"string\"\n          value={config?.[field.name]}\n          onChange={(e: ChangeEvent<HTMLInputElement>) => {\n            const newValue = e.target.value;\n            onChange({ ...config, [field.name]: newValue });\n          }}\n        />\n      );\n  }\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    jsonView: css`\n      margin-bottom: ${theme.spacing(1)};\n    `,\n  };\n};\n\nexport const SimulationSchemaForm = ({ config, schema, onChange }: SchemaFormProps) => {\n  const [jsonView, setJsonView] = useState<boolean>(false);\n\n  const styles = useStyles2(getStyles);\n\n  const onUpdateTextArea = (event: FormEvent<HTMLTextAreaElement>) => {\n    const element = event.currentTarget;\n    onChange(JSON.parse(element.value));\n  };\n\n  return (\n    <FieldSet label=\"Config\">\n      <InlineSwitch\n        className={styles.jsonView}\n        label=\"JSON View\"\n        showLabel\n        value={jsonView}\n        onChange={() => setJsonView(!jsonView)}\n      />\n      {jsonView ? (\n        <TextArea defaultValue={JSON.stringify(config, null, 2)} rows={7} onChange={onUpdateTextArea} />\n      ) : (\n        <>\n          {schema.fields.map((field) => (\n            <InlineField label={field.name} key={field.name} labelWidth={14}>\n              {renderInput(field, onChange, config)}\n            </InlineField>\n          ))}\n        </>\n      )}\n    </FieldSet>\n  );\n};\n","import React, { FormEvent, useMemo, useState } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { DataFrameJSON, SelectableValue } from '@grafana/data';\nimport { InlineField, InlineFieldRow, InlineSwitch, Input, Label, Select } from '@grafana/ui';\n\nimport { EditorProps } from '../QueryEditor';\nimport { SimulationQuery } from '../dataquery.gen';\n\nimport { SimulationSchemaForm } from './SimulationSchemaForm';\n\n// Type         string      `json:\"type\"`\n// Name         string      `json:\"name\"`\n// Description  string      `json:\"description\"`\n// OnlyForward  bool        `json:\"forward\"`\n// ConfigFields *data.Frame `json:\"config\"`\n\ninterface SimInfo {\n  type: string;\n  name: string;\n  description: string;\n  forward: boolean;\n  config: DataFrameJSON;\n}\n\nexport const SimulationQueryEditor = ({ onChange, query, ds }: EditorProps) => {\n  const simQuery = query.sim ?? ({} as SimulationQuery);\n  const simKey = simQuery.key ?? ({} as typeof simQuery.key);\n  // keep track of updated config state to pass down to form\n  const [cfgValue, setCfgValue] = useState<Record<string, any>>({});\n\n  // This only changes once\n  const info = useAsync(async () => {\n    const v = await ds.getResource<SimInfo[]>('sims');\n    return {\n      sims: v,\n      options: v.map((s) => ({ label: s.name, value: s.type, description: s.description })),\n    };\n  }, [ds]);\n\n  const current = useMemo(() => {\n    const type = simKey.type;\n    if (!type || !info.value) {\n      return {};\n    }\n    return {\n      details: info.value.sims.find((v) => v.type === type),\n      option: info.value.options.find((v) => v.value === type),\n    };\n  }, [info.value, simKey?.type]);\n\n  let config = useAsync(async () => {\n    let path = simKey.type + '/' + simKey.tick + 'hz';\n    if (simKey.uid) {\n      path += '/' + simKey.uid;\n    }\n    let config = (await ds.getResource('sim/' + path))?.config;\n    setCfgValue(config.value);\n    return config;\n  }, [simKey.type, simKey.tick, simKey.uid]);\n\n  const onUpdateKey = (key: typeof simQuery.key) => {\n    onChange({ ...query, sim: { ...simQuery, key } });\n  };\n\n  const onUIDChanged = (e: FormEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onUpdateKey({ ...simKey, uid: value ?? undefined });\n  };\n\n  const onTickChanged = (e: FormEvent<HTMLInputElement>) => {\n    const tick = e.currentTarget.valueAsNumber;\n    onUpdateKey({ ...simKey, tick });\n  };\n\n  const onTypeChange = (v: SelectableValue<string>) => {\n    onUpdateKey({ ...simKey, type: v.value! });\n  };\n\n  const onToggleStream = () => {\n    onChange({ ...query, sim: { ...simQuery, stream: !simQuery.stream } });\n  };\n\n  const onToggleLast = () => {\n    onChange({ ...query, sim: { ...simQuery, last: !simQuery.last } });\n  };\n\n  const onSchemaFormChange = (config: Record<string, any>) => {\n    let path = simKey.type + '/' + simKey.tick + 'hz';\n    if (simKey.uid) {\n      path += '/' + simKey.uid;\n    }\n    ds.postResource('sim/' + path, config).then((res) => {\n      setCfgValue(res.config);\n    });\n  };\n  return (\n    <>\n      <InlineFieldRow>\n        <InlineField labelWidth={14} label=\"Simulation\" tooltip=\"\">\n          <Select\n            isLoading={info.loading}\n            options={info.value?.options ?? []}\n            value={current.option}\n            onChange={onTypeChange}\n            width={32}\n          />\n        </InlineField>\n      </InlineFieldRow>\n      <InlineFieldRow>\n        <InlineField labelWidth={14} label=\"Stream\" tooltip=\"connect to the live channel\">\n          <InlineSwitch value={Boolean(simQuery.stream)} onChange={onToggleStream} />\n        </InlineField>\n\n        <InlineField label=\"Interval\" tooltip=\"the rate a simulation will spit out events\">\n          <Input\n            width={10}\n            type=\"number\"\n            value={simKey.tick}\n            onChange={onTickChanged}\n            min={1 / 10}\n            max={50}\n            suffix=\"hz\"\n          />\n        </InlineField>\n\n        <InlineField label=\"Last\" tooltip=\"Only return the last value\">\n          <Label>\n            <InlineSwitch value={Boolean(simQuery.last)} onChange={onToggleLast} />\n          </Label>\n        </InlineField>\n        <InlineField label=\"UID\" tooltip=\"A UID will allow multiple simulations to run at the same time\">\n          <Input type=\"text\" placeholder=\"optional\" value={simQuery.key.uid} onChange={onUIDChanged} />\n        </InlineField>\n      </InlineFieldRow>\n      <SimulationSchemaForm\n        onChange={onSchemaFormChange}\n        config={cfgValue ?? config.value}\n        schema={current.details?.config.schema ?? { fields: [] }}\n      />\n    </>\n  );\n};\n","import React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { InlineFieldRow, InlineField, Select, MultiSelect, Input } from '@grafana/ui';\n\nimport { USAQuery } from '../dataquery.gen';\n\nexport interface Props {\n  onChange: (value: USAQuery) => void;\n  query: USAQuery;\n}\n\nexport function USAQueryEditor({ query, onChange }: Props) {\n  return (\n    <>\n      <InlineFieldRow>\n        <InlineField labelWidth={14} label=\"Mode\">\n          <Select\n            options={usaQueryModes}\n            onChange={(v) => {\n              onChange({ ...query, mode: v.value });\n            }}\n            width={32}\n            value={usaQueryModes.find((ep) => ep.value === query.mode)}\n          />\n        </InlineField>\n        <InlineField label=\"Period\">\n          <Input\n            value={query.period}\n            placeholder={'30m'}\n            onChange={(v) => {\n              onChange({ ...query, period: v.currentTarget.value });\n            }}\n          />\n        </InlineField>\n      </InlineFieldRow>\n      <InlineFieldRow>\n        <InlineField labelWidth={14} label=\"Fields\">\n          <MultiSelect\n            options={fieldNames}\n            onChange={(vals: SelectableValue[]) => {\n              onChange({ ...query, fields: vals.map((v) => v.value) });\n            }}\n            width={32}\n            placeholder=\"all\"\n            value={query.fields}\n          />\n        </InlineField>\n        <InlineField label=\"States\" grow>\n          <MultiSelect\n            options={stateNames}\n            onChange={(vals: SelectableValue[]) => {\n              onChange({ ...query, states: vals.map((v) => v.value) });\n            }}\n            placeholder=\"all\"\n            value={query.states}\n          />\n        </InlineField>\n      </InlineFieldRow>\n    </>\n  );\n}\n\nexport const usaQueryModes = [\n  'values-as-rows',\n  'values-as-fields',\n  'values-as-labeled-fields',\n  'timeseries',\n  'timeseries-wide',\n].map((f) => ({ label: f, value: f }));\n\nexport const fieldNames = [\n  'foo',\n  'bar',\n  'baz', // all short\n].map((f) => ({ label: f, value: f }));\n\nexport const stateNames = [\n  'AL',\n  'AK',\n  'AZ',\n  'AR',\n  'CA',\n  'CO',\n  'CT',\n  'DE',\n  'DC',\n  'FL',\n  'GA',\n  'HI',\n  'ID',\n  'IL',\n  'IN',\n  'IA',\n  'KS',\n  'KY',\n  'LA',\n  'ME',\n  'MT',\n  'NE',\n  'NV',\n  'NH',\n  'NJ',\n  'NM',\n  'NY',\n  'NC',\n  'ND',\n  'OH',\n  'OK',\n  'OR',\n  'MD',\n  'MA',\n  'MI',\n  'MN',\n  'MS',\n  'MO',\n  'PA',\n  'RI',\n  'SC',\n  'SD',\n  'TN',\n  'TX',\n  'UT',\n  'VT',\n  'VA',\n  'WA',\n  'WV',\n  'WI',\n  'WY',\n].map((f) => ({ label: f, value: f }));\n","import { LogLevel } from '@grafana/data';\n\nlet index = 0;\n\nexport function getRandomLogLevel(): LogLevel {\n  const v = Math.random();\n  if (v > 0.9) {\n    return LogLevel.critical;\n  }\n  if (v > 0.8) {\n    return LogLevel.error;\n  }\n  if (v > 0.7) {\n    return LogLevel.warning;\n  }\n  if (v > 0.4) {\n    return LogLevel.info;\n  }\n  if (v > 0.3) {\n    return LogLevel.debug;\n  }\n  if (v > 0.1) {\n    return LogLevel.trace;\n  }\n  return LogLevel.unknown;\n}\n\nexport function getNextWord() {\n  index = (index + Math.floor(Math.random() * 5)) % words.length;\n  return words[index];\n}\n\nexport function getRandomLine(length = 60) {\n  let line = getNextWord();\n  while (line.length < length) {\n    line += ' ' + getNextWord();\n  }\n  return line;\n}\n\nconst words = [\n  'At',\n  'vero',\n  'eos',\n  'et',\n  'accusamus',\n  'et',\n  'iusto',\n  'odio',\n  'dignissimos',\n  'ducimus',\n  'qui',\n  'blanditiis',\n  'praesentium',\n  'voluptatum',\n  'deleniti',\n  'atque',\n  'corrupti',\n  'quos',\n  'dolores',\n  'et',\n  'quas',\n  'molestias',\n  'excepturi',\n  'sint',\n  'occaecati',\n  'cupiditate',\n  'non',\n  'provident',\n  'similique',\n  'sunt',\n  'in',\n  'culpa',\n  'qui',\n  'officia',\n  'deserunt',\n  'mollitia',\n  'animi',\n  'id',\n  'est',\n  'laborum',\n  'et',\n  'dolorum',\n  'fuga',\n  'Et',\n  'harum',\n  'quidem',\n  'rerum',\n  'facilis',\n  'est',\n  'et',\n  'expedita',\n  'distinctio',\n  'Nam',\n  'libero',\n  'tempore',\n  'cum',\n  'soluta',\n  'nobis',\n  'est',\n  'eligendi',\n  'optio',\n  'cumque',\n  'nihil',\n  'impedit',\n  'quo',\n  'minus',\n  'id',\n  'quod',\n  'maxime',\n  'placeat',\n  'facere',\n  'possimus',\n  'omnis',\n  'voluptas',\n  'assumenda',\n  'est',\n  'omnis',\n  'dolor',\n  'repellendus',\n  'Temporibus',\n  'autem',\n  'quibusdam',\n  'et',\n  'aut',\n  'officiis',\n  'debitis',\n  'aut',\n  'rerum',\n  'necessitatibus',\n  'saepe',\n  'eveniet',\n  'ut',\n  'et',\n  'voluptates',\n  'repudiandae',\n  'sint',\n  'et',\n  'molestiae',\n  'non',\n  'recusandae',\n  'Itaque',\n  'earum',\n  'rerum',\n  'hic',\n  'tenetur',\n  'a',\n  'sapiente',\n  'delectus',\n  'ut',\n  'aut',\n  'reiciendis',\n  'voluptatibus',\n  'maiores',\n  'alias',\n  'consequatur',\n  'aut',\n  'perferendis',\n  'doloribus',\n  'asperiores',\n  'repellat',\n];\n","import { defaults } from 'lodash';\nimport { Observable } from 'rxjs';\n\nimport {\n  DataQueryRequest,\n  DataQueryResponse,\n  FieldType,\n  CircularDataFrame,\n  CSVReader,\n  Field,\n  LoadingState,\n  DataFrameSchema,\n  DataFrameData,\n} from '@grafana/data';\nimport { liveTimer } from 'app/features/dashboard/dashgrid/liveTimer';\nimport { StreamingDataFrame } from 'app/features/live/data/StreamingDataFrame';\n\nimport { getRandomLine } from './LogIpsum';\nimport { TestData, StreamingQuery } from './dataquery.gen';\n\nexport const defaultStreamQuery: StreamingQuery = {\n  type: 'signal',\n  speed: 250, // ms\n  spread: 3.5,\n  noise: 2.2,\n  bands: 1,\n};\n\nexport function runStream(target: TestData, req: DataQueryRequest<TestData>): Observable<DataQueryResponse> {\n  const query = defaults(target.stream, defaultStreamQuery);\n  if ('signal' === query.type) {\n    return runSignalStream(target, query, req);\n  }\n  if ('logs' === query.type) {\n    return runLogsStream(target, query, req);\n  }\n  if ('fetch' === query.type) {\n    return runFetchStream(target, query, req);\n  }\n  throw new Error(`Unknown Stream Type: ${query.type}`);\n}\n\nexport function runSignalStream(\n  target: TestData,\n  query: StreamingQuery,\n  req: DataQueryRequest<TestData>\n): Observable<DataQueryResponse> {\n  return new Observable<DataQueryResponse>((subscriber) => {\n    const streamId = `signal-${req.panelId}-${target.refId}`;\n    const maxDataPoints = req.maxDataPoints || 1000;\n\n    const schema: DataFrameSchema = {\n      refId: target.refId,\n      fields: [\n        { name: 'time', type: FieldType.time },\n        { name: target.alias ?? 'value', type: FieldType.number },\n      ],\n    };\n\n    const { spread, speed, bands = 0, noise } = query;\n    for (let i = 0; i < bands; i++) {\n      const suffix = bands > 1 ? ` ${i + 1}` : '';\n      schema.fields.push({ name: 'Min' + suffix, type: FieldType.number });\n      schema.fields.push({ name: 'Max' + suffix, type: FieldType.number });\n    }\n\n    const frame = StreamingDataFrame.fromDataFrameJSON({ schema }, { maxLength: maxDataPoints });\n\n    let value = Math.random() * 100;\n    let timeoutId: ReturnType<typeof setTimeout>;\n    let lastSent = -1;\n\n    const addNextRow = (time: number) => {\n      value += (Math.random() - 0.5) * spread;\n\n      const data: DataFrameData = {\n        values: [[time], [value]],\n      };\n\n      let min = value;\n      let max = value;\n\n      for (let i = 0; i < bands; i++) {\n        min = min - Math.random() * noise;\n        max = max + Math.random() * noise;\n\n        data.values.push([min]);\n        data.values.push([max]);\n      }\n\n      const event = { data };\n      return frame.push(event);\n    };\n\n    // Fill the buffer on init\n    if (true) {\n      let time = Date.now() - maxDataPoints * speed;\n      for (let i = 0; i < maxDataPoints; i++) {\n        addNextRow(time);\n        time += speed;\n      }\n    }\n\n    const pushNextEvent = () => {\n      addNextRow(Date.now());\n\n      const elapsed = liveTimer.lastUpdate - lastSent;\n      if (elapsed > 1000 || liveTimer.ok) {\n        subscriber.next({\n          data: [frame],\n          key: streamId,\n          state: LoadingState.Streaming,\n        });\n        lastSent = liveTimer.lastUpdate;\n      }\n\n      timeoutId = setTimeout(pushNextEvent, speed);\n    };\n\n    // Send first event in 5ms\n    setTimeout(pushNextEvent, 5);\n\n    return () => {\n      console.log('unsubscribing to stream ' + streamId);\n      clearTimeout(timeoutId);\n    };\n  });\n}\n\nexport function runLogsStream(\n  target: TestData,\n  query: StreamingQuery,\n  req: DataQueryRequest<TestData>\n): Observable<DataQueryResponse> {\n  return new Observable<DataQueryResponse>((subscriber) => {\n    const streamId = `logs-${req.panelId}-${target.refId}`;\n    const maxDataPoints = req.maxDataPoints || 1000;\n\n    const data = new CircularDataFrame({\n      append: 'tail',\n      capacity: maxDataPoints,\n    });\n    data.refId = target.refId;\n    data.name = target.alias || 'Logs ' + target.refId;\n    data.addField({ name: 'line', type: FieldType.string });\n    data.addField({ name: 'time', type: FieldType.time });\n    data.meta = { preferredVisualisationType: 'logs' };\n\n    const { speed } = query;\n\n    let timeoutId: ReturnType<typeof setTimeout>;\n\n    const pushNextEvent = () => {\n      data.fields[0].values.add(getRandomLine());\n      data.fields[1].values.add(Date.now());\n\n      subscriber.next({\n        data: [data],\n        key: streamId,\n      });\n\n      timeoutId = setTimeout(pushNextEvent, speed);\n    };\n\n    // Send first event in 5ms\n    setTimeout(pushNextEvent, 5);\n\n    return () => {\n      console.log('unsubscribing to stream ' + streamId);\n      clearTimeout(timeoutId);\n    };\n  });\n}\n\nexport function runFetchStream(\n  target: TestData,\n  query: StreamingQuery,\n  req: DataQueryRequest<TestData>\n): Observable<DataQueryResponse> {\n  return new Observable<DataQueryResponse>((subscriber) => {\n    const streamId = `fetch-${req.panelId}-${target.refId}`;\n    const maxDataPoints = req.maxDataPoints || 1000;\n\n    let data = new CircularDataFrame({\n      append: 'tail',\n      capacity: maxDataPoints,\n    });\n    data.refId = target.refId;\n    data.name = target.alias || 'Fetch ' + target.refId;\n\n    let reader: ReadableStreamReader<Uint8Array>;\n    const csv = new CSVReader({\n      callback: {\n        onHeader: (fields: Field[]) => {\n          // Clear any existing fields\n          if (data.fields.length) {\n            data = new CircularDataFrame({\n              append: 'tail',\n              capacity: maxDataPoints,\n            });\n            data.refId = target.refId;\n            data.name = 'Fetch ' + target.refId;\n          }\n          for (const field of fields) {\n            data.addField(field);\n          }\n        },\n        onRow: (row) => {\n          data.add(row);\n        },\n      },\n    });\n\n    const processChunk = (value: ReadableStreamReadResult<Uint8Array>): any => {\n      if (value.value) {\n        const text = new TextDecoder().decode(value.value);\n        csv.readCSV(text);\n      }\n\n      subscriber.next({\n        data: [data],\n        key: streamId,\n        state: value.done ? LoadingState.Done : LoadingState.Streaming,\n      });\n\n      if (value.done) {\n        console.log('Finished stream');\n        subscriber.complete(); // necessary?\n        return;\n      }\n\n      return reader.read().then(processChunk);\n    };\n\n    if (!query.url) {\n      throw new Error('query.url is not defined');\n    }\n\n    fetch(new Request(query.url)).then((response) => {\n      if (response.body) {\n        reader = response.body.getReader();\n        reader.read().then(processChunk);\n      }\n    });\n\n    return () => {\n      // Cancel fetch?\n      console.log('unsubscribing to stream ' + streamId);\n    };\n  });\n}\n","import React, { FormEvent, useMemo } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { QueryEditorProps, SelectableValue } from '@grafana/data';\nimport { selectors as editorSelectors } from '@grafana/e2e-selectors';\nimport { InlineField, InlineFieldRow, InlineSwitch, Input, Select, TextArea } from '@grafana/ui';\n\nimport { RandomWalkEditor, StreamingClientEditor } from './components';\nimport { CSVContentEditor } from './components/CSVContentEditor';\nimport { CSVFileEditor } from './components/CSVFileEditor';\nimport { CSVWavesEditor } from './components/CSVWaveEditor';\nimport ErrorEditor from './components/ErrorEditor';\nimport { GrafanaLiveEditor } from './components/GrafanaLiveEditor';\nimport { NodeGraphEditor } from './components/NodeGraphEditor';\nimport { PredictablePulseEditor } from './components/PredictablePulseEditor';\nimport { RawFrameEditor } from './components/RawFrameEditor';\nimport { SimulationQueryEditor } from './components/SimulationQueryEditor';\nimport { USAQueryEditor, usaQueryModes } from './components/USAQueryEditor';\nimport { defaultCSVWaveQuery, defaultPulseQuery, defaultQuery } from './constants';\nimport { CSVWave, NodesQuery, TestData, TestDataQueryType, USAQuery } from './dataquery.gen';\nimport { TestDataDataSource } from './datasource';\nimport { defaultStreamQuery } from './runStreams';\n\nconst showLabelsFor = ['random_walk', 'predictable_pulse'];\nconst endpoints = [\n  { value: 'datasources', label: 'Data Sources' },\n  { value: 'search', label: 'Search' },\n  { value: 'annotations', label: 'Annotations' },\n];\n\nconst selectors = editorSelectors.components.DataSource.TestData.QueryTab;\n\nexport interface EditorProps {\n  onChange: (value: any) => void;\n  query: TestData;\n  ds: TestDataDataSource;\n}\n\nexport type Props = QueryEditorProps<TestDataDataSource, TestData>;\n\nexport const QueryEditor = ({ query, datasource, onChange, onRunQuery }: Props) => {\n  query = { ...defaultQuery, ...query };\n\n  const { loading, value: scenarioList } = useAsync(async () => {\n    // migrate manual_entry (unusable since 7, removed in 8)\n    if (query.scenarioId === TestDataQueryType.ManualEntry && query.points) {\n      let csvContent = 'Time,Value\\n';\n      for (const point of query.points) {\n        csvContent += `${point[1]},${point[0]}\\n`;\n      }\n      onChange({\n        refId: query.refId,\n        datasource: query.datasource,\n        scenarioId: TestDataQueryType.CSVContent,\n        csvContent,\n      });\n    }\n\n    const vals = await datasource.getScenarios();\n    const hideAlias = ['simulation'];\n    return vals.map((v) => ({\n      ...v,\n      hideAliasField: hideAlias.includes(v.id),\n    }));\n  }, []);\n\n  const onUpdate = (query: TestData) => {\n    onChange(query);\n    onRunQuery();\n  };\n\n  const currentScenario = useMemo(\n    () => scenarioList?.find((scenario) => scenario.id === query.scenarioId),\n    [scenarioList, query]\n  );\n  const scenarioId = currentScenario?.id;\n  const description = currentScenario?.description;\n\n  const onScenarioChange = (item: SelectableValue<string>) => {\n    const scenario = scenarioList?.find((sc) => sc.id === item.value);\n\n    if (!scenario) {\n      return;\n    }\n\n    // Clear model from existing props that belong to other scenarios\n    const update: TestData = {\n      scenarioId: item.value! as TestDataQueryType,\n      refId: query.refId,\n      alias: query.alias,\n      datasource: query.datasource,\n    };\n\n    if (scenario.stringInput) {\n      update.stringInput = scenario.stringInput;\n    }\n\n    switch (scenario.id) {\n      case TestDataQueryType.GrafanaAPI:\n        update.stringInput = 'datasources';\n        break;\n      case TestDataQueryType.StreamingClient:\n        update.stream = defaultStreamQuery;\n        break;\n      case TestDataQueryType.Live:\n        update.channel = 'random-2s-stream'; // default stream\n        break;\n      case TestDataQueryType.Simulation:\n        update.sim = { key: { type: 'flight', tick: 10 } }; // default stream\n        break;\n      case TestDataQueryType.PredictablePulse:\n        update.pulseWave = defaultPulseQuery;\n        break;\n      case TestDataQueryType.PredictableCSVWave:\n        update.csvWave = defaultCSVWaveQuery;\n        break;\n      case TestDataQueryType.USA:\n        update.usa = {\n          mode: usaQueryModes[0].value,\n        };\n    }\n\n    onUpdate(update);\n  };\n\n  const onInputChange = (e: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value, type } = e.currentTarget;\n    let newValue: any = value;\n\n    if (type === 'number') {\n      newValue = Number(value);\n    }\n\n    if (name === 'levelColumn' && e.currentTarget instanceof HTMLInputElement) {\n      newValue = e.currentTarget.checked;\n    }\n\n    onUpdate({ ...query, [name]: newValue });\n  };\n\n  const onFieldChange = (field: string) => (e: { target: { name: string; value: string; type: string } }) => {\n    const { name, value, type } = e.target;\n    let newValue: any = value;\n\n    if (type === 'number') {\n      newValue = Number(value);\n    }\n\n    onUpdate({ ...query, [field]: { ...(query as any)[field], [name]: newValue } });\n  };\n\n  const onEndPointChange = ({ value }: SelectableValue) => {\n    onUpdate({ ...query, stringInput: value });\n  };\n\n  const onStreamClientChange = onFieldChange('stream');\n  const onPulseWaveChange = onFieldChange('pulseWave');\n  const onUSAStatsChange = (usa?: USAQuery) => {\n    onUpdate({ ...query, usa });\n  };\n\n  const onCSVWaveChange = (csvWave?: CSVWave[]) => {\n    onUpdate({ ...query, csvWave });\n  };\n\n  const options = useMemo(\n    () =>\n      (scenarioList || [])\n        .map((item) => ({ label: item.name, value: item.id }))\n        .sort((a, b) => a.label.localeCompare(b.label)),\n    [scenarioList]\n  );\n  const showLabels = useMemo(() => showLabelsFor.includes(query.scenarioId ?? ''), [query]);\n\n  if (loading) {\n    return null;\n  }\n\n  return (\n    <>\n      <InlineFieldRow aria-label={selectors.scenarioSelectContainer}>\n        <InlineField labelWidth={14} label=\"Scenario\">\n          <Select\n            inputId={`test-data-scenario-select-${query.refId}`}\n            options={options}\n            value={options.find((item) => item.value === query.scenarioId)}\n            onChange={onScenarioChange}\n            width={32}\n          />\n        </InlineField>\n        {currentScenario?.stringInput && (\n          <InlineField label=\"String Input\">\n            <Input\n              width={32}\n              id={`stringInput-${query.refId}`}\n              name=\"stringInput\"\n              placeholder={query.stringInput}\n              value={query.stringInput}\n              onChange={onInputChange}\n            />\n          </InlineField>\n        )}\n        {Boolean(!currentScenario?.hideAliasField) && (\n          <InlineField label=\"Alias\" labelWidth={14}>\n            <Input\n              width={32}\n              id={`alias-${query.refId}`}\n              type=\"text\"\n              placeholder=\"optional\"\n              pattern='[^<>&\\\\\"]+'\n              name=\"alias\"\n              value={query.alias}\n              onChange={onInputChange}\n            />\n          </InlineField>\n        )}\n        {showLabels && (\n          <InlineField\n            label=\"Labels\"\n            labelWidth={14}\n            tooltip={\n              <>\n                Set labels using a key=value syntax:\n                <br />\n                {`{ key = \"value\", key2 = \"value\" }`}\n                <br />\n                key=&quot;value&quot;, key2=&quot;value&quot;\n                <br />\n                key=value, key2=value\n                <br />\n              </>\n            }\n          >\n            <Input\n              width={32}\n              id={`labels-${query.refId}`}\n              name=\"labels\"\n              onChange={onInputChange}\n              value={query?.labels}\n              placeholder=\"key=value, key2=value2\"\n            />\n          </InlineField>\n        )}\n      </InlineFieldRow>\n\n      {scenarioId === TestDataQueryType.RandomWalk && (\n        <RandomWalkEditor onChange={onInputChange} query={query} ds={datasource} />\n      )}\n      {scenarioId === TestDataQueryType.StreamingClient && (\n        <StreamingClientEditor onChange={onStreamClientChange} query={query} ds={datasource} />\n      )}\n      {scenarioId === TestDataQueryType.Live && <GrafanaLiveEditor onChange={onUpdate} query={query} ds={datasource} />}\n      {scenarioId === TestDataQueryType.Simulation && (\n        <SimulationQueryEditor onChange={onUpdate} query={query} ds={datasource} />\n      )}\n      {scenarioId === TestDataQueryType.RawFrame && (\n        <RawFrameEditor onChange={onUpdate} query={query} ds={datasource} />\n      )}\n      {scenarioId === TestDataQueryType.CSVFile && <CSVFileEditor onChange={onUpdate} query={query} ds={datasource} />}\n      {scenarioId === TestDataQueryType.CSVContent && (\n        <CSVContentEditor onChange={onUpdate} query={query} ds={datasource} />\n      )}\n      {scenarioId === TestDataQueryType.Logs && (\n        <InlineFieldRow>\n          <InlineField label=\"Lines\" labelWidth={14}>\n            <Input\n              type=\"number\"\n              name=\"lines\"\n              value={query.lines}\n              width={32}\n              onChange={onInputChange}\n              placeholder=\"10\"\n            />\n          </InlineField>\n          <InlineField label=\"Level\" labelWidth={14}>\n            <InlineSwitch onChange={onInputChange} name=\"levelColumn\" value={!!query.levelColumn} />\n          </InlineField>\n        </InlineFieldRow>\n      )}\n\n      {scenarioId === TestDataQueryType.USA && <USAQueryEditor onChange={onUSAStatsChange} query={query.usa ?? {}} />}\n      {scenarioId === TestDataQueryType.GrafanaAPI && (\n        <InlineField labelWidth={14} label=\"Endpoint\">\n          <Select\n            options={endpoints}\n            onChange={onEndPointChange}\n            width={32}\n            value={endpoints.find((ep) => ep.value === query.stringInput)}\n          />\n        </InlineField>\n      )}\n\n      {scenarioId === TestDataQueryType.Arrow && (\n        <InlineField grow>\n          <TextArea\n            name=\"stringInput\"\n            value={query.stringInput}\n            rows={10}\n            placeholder=\"Copy base64 text data from query result\"\n            onChange={onInputChange}\n          />\n        </InlineField>\n      )}\n\n      {scenarioId === TestDataQueryType.PredictablePulse && (\n        <PredictablePulseEditor onChange={onPulseWaveChange} query={query} ds={datasource} />\n      )}\n      {scenarioId === TestDataQueryType.PredictableCSVWave && (\n        <CSVWavesEditor onChange={onCSVWaveChange} waves={query.csvWave} />\n      )}\n      {scenarioId === TestDataQueryType.NodeGraph && (\n        <NodeGraphEditor onChange={(val: NodesQuery) => onChange({ ...query, nodes: val })} query={query} />\n      )}\n      {scenarioId === TestDataQueryType.ServerError500 && (\n        <ErrorEditor onChange={onUpdate} query={query} ds={datasource} />\n      )}\n      {scenarioId === TestDataQueryType.Trace && (\n        <InlineField labelWidth={14} label=\"Span count\">\n          <Input\n            type=\"number\"\n            name=\"spanCount\"\n            value={query.spanCount}\n            width={32}\n            onChange={onInputChange}\n            placeholder=\"10\"\n          />\n        </InlineField>\n      )}\n\n      {description && <p>{description}</p>}\n    </>\n  );\n};\n","// Libraries\nimport React, { PureComponent } from 'react';\n\nimport { PluginConfigPageProps, DataSourcePluginMeta, DataSourceJsonData } from '@grafana/data';\nimport { LinkButton } from '@grafana/ui';\n\n// Types\n\ninterface Props extends PluginConfigPageProps<DataSourcePluginMeta<DataSourceJsonData>> {}\n\nexport class TestInfoTab extends PureComponent<Props> {\n  constructor(props: Props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div>\n        See github for more information about setting up a reproducible test environment.\n        <br />\n        <br />\n        <LinkButton\n          variant=\"secondary\"\n          href=\"https://github.com/grafana/grafana/tree/main/devenv\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          GitHub\n        </LinkButton>\n        <br />\n      </div>\n    );\n  }\n}\n","export interface TreeNode {\n  name: string;\n  children: TreeNode[];\n}\n\n/*\n *  Builds a nested tree like\n *  [\n *    {\n *      name: 'A',\n *      children: [\n *        { name: 'AA', children: [] },\n *        { name: 'AB', children: [] },\n *      ]\n *    }\n *  ]\n */\nfunction buildMetricTree(parent: string, depth: number): TreeNode[] {\n  const chars = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];\n  const children: TreeNode[] = [];\n\n  if (depth > 5) {\n    return [];\n  }\n\n  for (const letter of chars) {\n    const nodeName = `${parent}${letter}`;\n    children.push({\n      name: nodeName,\n      children: buildMetricTree(nodeName, depth + 1),\n    });\n  }\n\n  return children;\n}\n\nfunction queryTree(children: TreeNode[], query: string[], queryIndex: number): TreeNode[] {\n  if (queryIndex >= query.length) {\n    return children;\n  }\n\n  if (query[queryIndex] === '*') {\n    return children;\n  }\n\n  const nodeQuery = query[queryIndex];\n  let result: TreeNode[] = [];\n  let namesToMatch = [nodeQuery];\n\n  // handle glob queries\n  if (nodeQuery.startsWith('{')) {\n    namesToMatch = nodeQuery.replace(/\\{|\\}/g, '').split(',');\n  }\n\n  for (const node of children) {\n    for (const nameToMatch of namesToMatch) {\n      if (nameToMatch.indexOf('*') !== -1) {\n        const pattern = nameToMatch.replace('*', '');\n        const regex = new RegExp(`^${pattern}.*`, 'gi');\n        if (regex.test(node.name)) {\n          result = result.concat(queryTree([node], query, queryIndex + 1));\n        }\n      } else if (node.name === nameToMatch) {\n        result = result.concat(queryTree(node.children, query, queryIndex + 1));\n      }\n    }\n  }\n\n  return result;\n}\n\nexport function queryMetricTree(query: string): TreeNode[] {\n  if (query.indexOf('value') === 0) {\n    return [{ name: query, children: [] }];\n  }\n\n  const children = buildMetricTree('', 0);\n  return queryTree(children, query.split('.'), 0);\n}\n","import { FieldColorModeId, FieldType, PreferredVisualisationType, NodeGraphDataFrameFieldNames } from '@grafana/data';\n\nexport const nodes = {\n  fields: [\n    {\n      name: NodeGraphDataFrameFieldNames.id,\n      type: FieldType.string,\n      config: {\n        links: [\n          {\n            title: 'Traces/All',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'service(id(name: \"${__data.fields.name}\", type: \"${__data.fields.type}\"))',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n          {\n            title: 'Traces/OK',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'service(id(name: \"${__data.fields.name}\", type: \"${__data.fields.type}\")) { ok = true }',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n          {\n            title: 'Traces/Errors',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'service(id(name: \"${__data.fields.name}\", type: \"${__data.fields.type}\")) { error = true }',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n          {\n            title: 'Traces/Faults',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'service(id(name: \"${__data.fields.name}\", type: \"${__data.fields.type}\")) { fault = true }',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n        ],\n      },\n      values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.title,\n      type: FieldType.string,\n      config: { displayName: 'Name' },\n      values: [\n        'auth',\n        'products',\n        'customers',\n        'orders',\n        'products',\n        'orders',\n        'api',\n        'shipping',\n        'orders',\n        'execute-api',\n        'shipping',\n        'www',\n        'api',\n        'www',\n        'products',\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.subTitle,\n      type: FieldType.string,\n      config: { displayName: 'Type' },\n      values: [\n        'Compute',\n        'SQL',\n        'SQL',\n        'SQL',\n        'remote',\n        'Function',\n        'Compute',\n        'Function',\n        'Function',\n        'remote',\n        'Function',\n        'Compute',\n        'client',\n        'client',\n        'Compute',\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.mainStat,\n      type: FieldType.number,\n      config: { unit: 'ms/t', displayName: 'Average response time' },\n      values: [\n        3.5394042646735553, 15.906441318223264, 4.913011921591567, 7.4163203042094095, 1092, 22.85961441405067,\n        56.135855729084696, 4.45946191601527, 12.818300278280843, 4.25, 12.565442646791492, 77.63447512700567,\n        40.387096774193544, 77.63447512700567, 27.648950187374872,\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.secondaryStat,\n      type: FieldType.number,\n      config: { unit: 't/min', displayName: 'Transactions per minute' },\n      values: [\n        50.56317154501667, 682.4, 512.8416666666667, 125.64444444444445, 0.005585812037424941, 137.59722222222223,\n        300.0527777777778, 30.582348853370394, 125.77222222222223, 0.028706417080318163, 30.582348853370394, 165.675,\n        0.100021510002151, 165.675, 162.33055555555555,\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.arc + 'success',\n      type: FieldType.number,\n      config: { color: { mode: FieldColorModeId.Fixed, fixedColor: 'green' }, displayName: 'Sucesss' },\n      values: [\n        0.9338865684765882, 1, 1, 1, 0.5, 1, 0.9901128505170387, 0.9069260134520997, 1, 0, 0.9069260134520997,\n        0.9624432037288534, 0, 0.9624432037288534, 0.9824945669843769,\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.arc + 'faults',\n      type: FieldType.number,\n      config: { color: { mode: FieldColorModeId.Fixed, fixedColor: 'red' }, displayName: 'Faults' },\n      values: [\n        0, 0, 0, 0, 0.5, 0, 0.009479813736472288, 0, 0, 0, 0, 0.017168821152524185, 0, 0.017168821152524185,\n        0.01750543301562313,\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.arc + 'errors',\n      type: FieldType.number,\n      config: { color: { mode: FieldColorModeId.Fixed, fixedColor: 'semi-dark-yellow' }, displayName: 'Errors' },\n      values: [\n        0.06611343152341174, 0, 0, 0, 0, 0, 0.0004073357464890436, 0.09307398654790038, 0, 1, 0.09307398654790038,\n        0.02038797511862247, 1, 0.02038797511862247, 0,\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.arc + 'throttled',\n      type: FieldType.number,\n      config: { color: { mode: FieldColorModeId.Fixed, fixedColor: 'purple' }, displayName: 'Throttled' },\n      values: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    },\n  ],\n  meta: { preferredVisualisationType: 'nodeGraph' as PreferredVisualisationType },\n  name: 'nodes',\n};\n\nexport const edges = {\n  fields: [\n    {\n      name: NodeGraphDataFrameFieldNames.id,\n      type: FieldType.string,\n      config: {\n        links: [\n          {\n            title: 'Traces/All',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'edge(\"${__data.fields.sourceName}\", \"${__data.fields.targetName}\")',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n          {\n            title: 'Traces/OK',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'edge(\"${__data.fields.sourceName}\", \"${__data.fields.targetName}\") { ok = true }',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n          {\n            title: 'Traces/Errors',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'edge(\"${__data.fields.sourceName}\", \"${__data.fields.targetName}\") { error = true }',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n          {\n            title: 'Traces/Faults',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'edge(\"${__data.fields.sourceName}\", \"${__data.fields.targetName}\") { fault = true }',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n        ],\n      },\n      values: [\n        '0__2',\n        '5__8',\n        '6__0',\n        '6__5',\n        '6__9',\n        '6__2',\n        '6__14',\n        '6__4',\n        '8__3',\n        '10__7',\n        '11__0',\n        '11__6',\n        '12__6',\n        '13__11',\n        '14__1',\n        '14__2',\n        '14__10',\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.source,\n      type: FieldType.string,\n      config: {},\n      values: [0, 5, 6, 6, 6, 6, 6, 6, 8, 10, 11, 11, 12, 13, 14, 14, 14],\n    },\n    {\n      name: 'sourceName',\n      type: FieldType.string,\n      config: {},\n      values: [\n        'auth',\n        'orders',\n        'api',\n        'api',\n        'api',\n        'api',\n        'api',\n        'api',\n        'orders',\n        'shipping',\n        'www',\n        'www',\n        'api',\n        'www',\n        'products',\n        'products',\n        'products',\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.target,\n      type: FieldType.string,\n      config: {},\n      values: [2, 8, 0, 5, 9, 2, 14, 4, 3, 7, 0, 6, 6, 11, 1, 2, 10],\n    },\n    {\n      name: 'targetName',\n      type: FieldType.string,\n      config: {},\n      values: [\n        'customers',\n        'orders',\n        'auth',\n        'orders',\n        'execute-api',\n        'customers',\n        'products',\n        'products',\n        'orders',\n        'shipping',\n        'auth',\n        'api',\n        'api',\n        'www',\n        'products',\n        'customers',\n        'shipping',\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.mainStat,\n      type: FieldType.string,\n      config: { displayName: 'Response percentage' },\n      values: [\n        'Success 100.00%',\n        'Success 100.00%',\n        'Success 100.00%',\n        'Success 100.00%',\n        'Errors 100.00%',\n        'Success 100.00%',\n        'Faults 1.75%',\n        'Faults 50.00%',\n        'Success 100.00%',\n        'Errors 9.31%',\n        'Errors 6.62%',\n        'Faults 1.13%',\n        'Errors 100.00%',\n        'Faults 1.72%',\n        'Success 100.00%',\n        'Success 100.00%',\n        'Faults 9.30%',\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.secondaryStat,\n      type: FieldType.number,\n      config: { unit: 't/min', displayName: 'Transactions per minute' },\n      values: [\n        50.56317154501667, 125.77222222222223, 0.03333333333333333, 137.59722222222223, 0.022222222222222223,\n        299.96666666666664, 162.33055555555555, 0.005555555555555556, 125.64444444444445, 30.582348853370394,\n        50.51111111111111, 299.9166666666667, 0.100021510002151, 165.675, 682.4, 162.33055555555555, 30.558333333333334,\n      ],\n    },\n  ],\n  meta: { preferredVisualisationType: 'nodeGraph' as PreferredVisualisationType },\n  name: 'edges',\n};\n","import {\n  ArrayVector,\n  FieldColorModeId,\n  FieldDTO,\n  FieldType,\n  MutableDataFrame,\n  NodeGraphDataFrameFieldNames,\n} from '@grafana/data';\n\nimport { nodes, edges } from './testData/serviceMapResponse';\n\nexport function generateRandomNodes(count = 10) {\n  const nodes = [];\n\n  const root = {\n    id: 'root',\n    title: 'root',\n    subTitle: 'client',\n    success: 1,\n    error: 0,\n    stat1: Math.random(),\n    stat2: Math.random(),\n    edges: [] as any[],\n  };\n  nodes.push(root);\n  const nodesWithoutMaxEdges = [root];\n\n  const maxEdges = 3;\n\n  for (let i = 1; i < count; i++) {\n    const node = makeRandomNode(i);\n    nodes.push(node);\n    const sourceIndex = Math.floor(Math.random() * Math.floor(nodesWithoutMaxEdges.length - 1));\n    const source = nodesWithoutMaxEdges[sourceIndex];\n    source.edges.push(node.id);\n    if (source.edges.length >= maxEdges) {\n      nodesWithoutMaxEdges.splice(sourceIndex, 1);\n    }\n    nodesWithoutMaxEdges.push(node);\n  }\n\n  // Add some random edges to create possible cycle\n  const additionalEdges = Math.floor(count / 2);\n  for (let i = 0; i <= additionalEdges; i++) {\n    const sourceIndex = Math.floor(Math.random() * Math.floor(nodes.length - 1));\n    const targetIndex = Math.floor(Math.random() * Math.floor(nodes.length - 1));\n    if (sourceIndex === targetIndex || nodes[sourceIndex].id === '0' || nodes[targetIndex].id === '0') {\n      continue;\n    }\n\n    nodes[sourceIndex].edges.push(nodes[targetIndex].id);\n  }\n\n  const nodeFields: Record<string, Omit<FieldDTO, 'name'> & { values: ArrayVector }> = {\n    [NodeGraphDataFrameFieldNames.id]: {\n      values: new ArrayVector(),\n      type: FieldType.string,\n      config: {\n        links: [\n          {\n            title: 'test data link',\n            url: '',\n            internal: {\n              query: { scenarioId: 'logs', alias: 'from service graph', stringInput: 'tes' },\n              datasourceUid: 'gdev-testdata',\n              datasourceName: 'gdev-testdata',\n            },\n          },\n        ],\n      },\n    },\n    [NodeGraphDataFrameFieldNames.title]: {\n      values: new ArrayVector(),\n      type: FieldType.string,\n    },\n    [NodeGraphDataFrameFieldNames.subTitle]: {\n      values: new ArrayVector(),\n      type: FieldType.string,\n    },\n    [NodeGraphDataFrameFieldNames.mainStat]: {\n      values: new ArrayVector(),\n      type: FieldType.number,\n      config: { displayName: 'Transactions per second' },\n    },\n    [NodeGraphDataFrameFieldNames.secondaryStat]: {\n      values: new ArrayVector(),\n      type: FieldType.number,\n      config: { displayName: 'Average duration' },\n    },\n    [NodeGraphDataFrameFieldNames.arc + 'success']: {\n      values: new ArrayVector(),\n      type: FieldType.number,\n      config: { color: { fixedColor: 'green', mode: FieldColorModeId.Fixed }, displayName: 'Success' },\n    },\n    [NodeGraphDataFrameFieldNames.arc + 'errors']: {\n      values: new ArrayVector(),\n      type: FieldType.number,\n      config: { color: { fixedColor: 'red', mode: FieldColorModeId.Fixed }, displayName: 'Errors' },\n    },\n    [NodeGraphDataFrameFieldNames.icon]: {\n      values: new ArrayVector(),\n      type: FieldType.string,\n    },\n  };\n\n  const nodeFrame = new MutableDataFrame({\n    name: 'nodes',\n    fields: Object.keys(nodeFields).map((key) => ({\n      ...nodeFields[key],\n      name: key,\n    })),\n    meta: { preferredVisualisationType: 'nodeGraph' },\n  });\n\n  const edgesFrame = new MutableDataFrame({\n    name: 'edges',\n    fields: [\n      { name: NodeGraphDataFrameFieldNames.id, values: new ArrayVector(), type: FieldType.string },\n      { name: NodeGraphDataFrameFieldNames.source, values: new ArrayVector(), type: FieldType.string },\n      { name: NodeGraphDataFrameFieldNames.target, values: new ArrayVector(), type: FieldType.string },\n      { name: NodeGraphDataFrameFieldNames.mainStat, values: new ArrayVector(), type: FieldType.number },\n    ],\n    meta: { preferredVisualisationType: 'nodeGraph' },\n  });\n\n  const edgesSet = new Set();\n  for (const node of nodes) {\n    nodeFields.id.values.add(node.id);\n    nodeFields.title.values.add(node.title);\n    nodeFields[NodeGraphDataFrameFieldNames.subTitle].values.add(node.subTitle);\n    nodeFields[NodeGraphDataFrameFieldNames.mainStat].values.add(node.stat1);\n    nodeFields[NodeGraphDataFrameFieldNames.secondaryStat].values.add(node.stat2);\n    nodeFields.arc__success.values.add(node.success);\n    nodeFields.arc__errors.values.add(node.error);\n    const rnd = Math.random();\n    nodeFields[NodeGraphDataFrameFieldNames.icon].values.add(rnd > 0.9 ? 'database' : rnd < 0.1 ? 'cloud' : '');\n    for (const edge of node.edges) {\n      const id = `${node.id}--${edge}`;\n      // We can have duplicate edges when we added some more by random\n      if (edgesSet.has(id)) {\n        continue;\n      }\n      edgesSet.add(id);\n      edgesFrame.fields[0].values.add(`${node.id}--${edge}`);\n      edgesFrame.fields[1].values.add(node.id);\n      edgesFrame.fields[2].values.add(edge);\n      edgesFrame.fields[3].values.add(Math.random() * 100);\n    }\n  }\n\n  return [nodeFrame, edgesFrame];\n}\n\nfunction makeRandomNode(index: number) {\n  const success = Math.random();\n  const error = 1 - success;\n  return {\n    id: `service:${index}`,\n    title: `service:${index}`,\n    subTitle: 'service',\n    success,\n    error,\n    stat1: Math.random(),\n    stat2: Math.random(),\n    edges: [],\n  };\n}\n\nexport function savedNodesResponse() {\n  return [new MutableDataFrame(nodes), new MutableDataFrame(edges)];\n}\n\n// Generates node graph data but only returns the edges\nexport function generateRandomEdges(count = 10) {\n  return generateRandomNodes(count)[1];\n}\n","import { DataFrameDTO } from '@grafana/data';\n\nexport const flameGraphData: DataFrameDTO = {\n  name: 'response',\n  refId: 'A',\n  // @ts-ignore\n  meta: { preferredVisualisationType: 'flamegraph' },\n  fields: [\n    {\n      name: 'level',\n      values: [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 11, 12, 13, 14, 15, 16, 10, 11, 12, 13, 9, 10, 9, 9, 7, 7, 6, 5, 6, 7,\n        8, 8, 9, 10, 11, 12, 13, 8, 9, 10, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 4, 5, 6, 7, 8, 9, 9, 10, 11, 12, 11, 12,\n        13, 8, 8, 7, 8, 8, 7, 6, 7, 8, 9, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 9, 8, 8, 7, 8, 6, 7, 8, 8, 7, 6, 7, 8,\n        8, 8, 9, 10, 11, 12, 4, 5, 6, 7, 8, 9, 9, 10, 11, 9, 10, 7, 4, 5, 6, 7, 8, 8, 7, 8, 9, 10, 11, 12, 13, 10, 10,\n        11, 9, 10, 10, 11, 12, 13, 14, 15, 16, 17, 8, 9, 5, 6, 7, 6, 7, 6, 5, 6, 6, 6, 6, 5, 6, 7, 6, 5, 6, 7, 8, 4, 5,\n        6, 5, 6, 5, 4, 5, 5, 3, 4, 5, 6, 7, 7, 8, 7, 8, 9, 8, 9, 8, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\n        14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 24, 24, 25, 26, 24, 25, 22, 23, 23, 24, 25, 26, 27, 28, 29, 30, 31,\n        32, 21, 22, 23, 24, 25, 26, 27, 26, 24, 25, 26, 25, 24, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 25, 26,\n        27, 25, 26, 24, 23, 24, 24, 25, 23, 23, 22, 23, 24, 24, 23, 24, 25, 26, 24, 25, 23, 24, 24, 25, 23, 23, 24, 24,\n        23, 23, 23, 23, 23, 24, 25, 22, 23, 24, 25, 22, 23, 24, 25, 26, 27, 28, 25, 26, 27, 28, 29, 24, 22, 23, 24, 25,\n        26, 27, 28, 29, 30, 31, 32, 33, 21, 22, 23, 23, 24, 24, 24, 22, 23, 24, 25, 24, 23, 24, 24, 23, 22, 23, 24, 25,\n        25, 26, 27, 24, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 24, 21, 22, 23, 24, 25, 26, 27, 28, 21, 22, 19, 20,\n        21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 24, 25, 26, 27, 28, 23, 24, 25, 26, 27, 28, 19, 20,\n        21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,\n        31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 31, 30, 28, 29, 30, 31, 32, 33, 34,\n        35, 36, 37, 29, 30, 31, 26, 27, 28, 28, 28, 29, 27, 26, 27, 26, 25, 26, 27, 28, 29, 30, 31, 32, 32, 33, 34, 30,\n        31, 32, 33, 34, 33, 34, 35, 36, 37, 38, 39, 29, 30, 31, 32, 32, 27, 28, 28, 27, 28, 29, 30, 31, 32, 33, 34, 35,\n        36, 37, 38, 39, 40, 27, 28, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 28, 27, 28, 28, 29, 27, 27, 28, 27, 27, 26,\n        27, 28, 28, 29, 29, 29, 26, 27, 27, 28, 29, 30, 29, 30, 30, 29, 30, 31, 28, 29, 30, 28, 28, 28, 28, 29, 30, 29,\n        30, 27, 28, 28, 26, 27, 26, 27, 27, 28, 29, 26, 27, 28, 29, 28, 27, 28, 29, 30, 30, 28, 29, 30, 31, 32, 32, 27,\n        28, 26, 25, 25, 26, 27, 28, 29, 30, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 31, 30, 31, 32, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 29, 26, 27, 28,\n        29, 30, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 31, 30, 29, 29, 29, 25, 26, 27, 28, 26,\n        26, 27, 28, 27, 28, 28, 26, 27, 28, 28, 27, 28, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 25, 25, 26, 27, 28, 25,\n        26, 24, 25, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 33, 34, 34, 32, 33, 34, 34, 32, 28, 29, 30, 31, 27,\n        28, 29, 26, 27, 28, 29, 30, 31, 32, 33, 34, 26, 27, 28, 29, 24, 25, 26, 27, 28, 29, 30, 27, 28, 26, 27, 25, 26,\n        27, 28, 29, 26, 25, 26, 27, 26, 27, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 38, 39, 30, 31, 32, 26, 27,\n        28, 27, 28, 29, 25, 26, 27, 28, 29, 30, 31, 32, 28, 29, 28, 29, 28, 29, 27, 28, 29, 30, 31, 29, 30, 31, 32, 33,\n        34, 35, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 28, 29, 30, 31, 28, 29, 30, 31, 26, 25, 26, 27, 28, 29,\n        27, 28, 29, 30, 25, 26, 15, 14, 15, 16, 17, 13, 14, 15, 16, 15, 16, 17, 18, 19, 20, 12, 13, 14, 15, 16, 17, 10,\n        11, 12, 13, 14, 12, 13, 10, 11, 12, 13, 14, 15, 2, 3, 4, 5, 6, 7, 8, 4, 5, 6, 7, 8, 9, 2, 3, 1, 2, 3, 4, 5, 6,\n        6, 6, 6, 7, 8, 8, 9, 6, 7, 6, 6, 6, 6, 5, 5, 6, 5, 5, 5, 5, 5, 6, 7, 4, 2, 3, 4, 5, 6, 4, 5, 6, 7, 8, 9, 1, 2,\n        3, 4, 5, 6, 7, 8, 2, 3, 4, 5, 6, 7, 8, 9, 2, 3, 4, 5, 6, 1, 2, 3, 3, 4, 3, 2, 1, 2, 3, 4, 5, 6, 5, 6, 7, 8, 5,\n        5, 6, 7, 4, 5, 6, 4, 2, 3, 4, 3, 4, 5, 6, 5, 5, 6, 4, 1, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\n        2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\n        23, 16, 17, 18, 19, 16, 17, 18, 19, 20, 21, 22, 23, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\n        23, 8, 9, 10, 11, 12, 13, 14, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4,\n      ],\n    },\n    {\n      name: 'value',\n      values: [\n        16460000000, 4100000000, 4100000000, 3670000000, 1130000000, 1060000000, 1020000000, 150000000, 150000000,\n        50000000, 30000000, 20000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 80000000, 40000000, 10000000, 10000000, 530000000, 80000000, 40000000, 70000000,\n        50000000, 50000000, 30000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,\n        10000000, 20000000, 20000000, 20000000, 20000000, 20000000, 20000000, 20000000, 20000000, 20000000, 10000000,\n        390000000, 390000000, 180000000, 70000000, 50000000, 10000000, 20000000, 20000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 20000000, 10000000, 10000000, 10000000, 110000000, 80000000, 60000000,\n        10000000, 20000000, 20000000, 20000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,\n        20000000, 10000000, 10000000, 30000000, 20000000, 40000000, 30000000, 20000000, 10000000, 10000000, 40000000,\n        40000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 210000000, 210000000, 210000000,\n        130000000, 130000000, 10000000, 50000000, 40000000, 40000000, 70000000, 10000000, 40000000, 1840000000,\n        240000000, 240000000, 50000000, 10000000, 10000000, 190000000, 130000000, 50000000, 20000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 10000000, 80000000, 20000000, 10000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 60000000, 10000000, 1330000000, 1290000000, 320000000, 10000000,\n        10000000, 10000000, 130000000, 10000000, 10000000, 60000000, 30000000, 100000000, 40000000, 10000000, 10000000,\n        40000000, 30000000, 10000000, 10000000, 70000000, 10000000, 10000000, 50000000, 40000000, 10000000, 30000000,\n        20000000, 10000000, 430000000, 430000000, 430000000, 430000000, 10000000, 40000000, 20000000, 370000000,\n        20000000, 10000000, 180000000, 10000000, 30000000, 10000000, 10000000, 10000000, 5630000000, 5580000000,\n        5580000000, 5580000000, 5580000000, 5580000000, 5580000000, 5580000000, 5580000000, 5540000000, 5540000000,\n        5530000000, 5510000000, 5500000000, 5490000000, 5490000000, 1610000000, 1610000000, 1540000000, 1540000000,\n        190000000, 170000000, 170000000, 10000000, 20000000, 120000000, 10000000, 10000000, 20000000, 20000000,\n        20000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,\n        10000000, 850000000, 350000000, 300000000, 120000000, 110000000, 80000000, 20000000, 10000000, 80000000,\n        40000000, 20000000, 10000000, 10000000, 50000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 20000000, 20000000, 20000000,\n        20000000, 10000000, 10000000, 10000000, 10000000, 10000000, 370000000, 40000000, 20000000, 10000000, 100000000,\n        10000000, 10000000, 10000000, 30000000, 30000000, 80000000, 20000000, 10000000, 10000000, 10000000, 40000000,\n        10000000, 10000000, 10000000, 20000000, 10000000, 20000000, 10000000, 10000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 110000000, 110000000, 60000000, 20000000, 20000000, 10000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 10000000, 480000000, 150000000, 10000000, 130000000, 10000000, 10000000,\n        50000000, 140000000, 80000000, 40000000, 10000000, 10000000, 20000000, 10000000, 10000000, 20000000, 120000000,\n        60000000, 40000000, 10000000, 10000000, 10000000, 10000000, 20000000, 30000000, 30000000, 20000000, 20000000,\n        20000000, 20000000, 20000000, 20000000, 20000000, 20000000, 20000000, 10000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 60000000, 60000000, 60000000, 60000000,\n        30000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 20000000, 20000000, 20000000, 20000000, 20000000, 30000000, 30000000, 30000000, 30000000,\n        30000000, 30000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 3880000000, 3880000000, 3880000000,\n        3880000000, 3870000000, 3230000000, 3230000000, 3210000000, 320000000, 70000000, 70000000, 40000000, 40000000,\n        20000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 20000000,\n        30000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 20000000,\n        20000000, 20000000, 70000000, 60000000, 20000000, 30000000, 10000000, 10000000, 10000000, 100000000, 20000000,\n        50000000, 1850000000, 410000000, 110000000, 110000000, 90000000, 60000000, 60000000, 40000000, 20000000,\n        20000000, 20000000, 30000000, 30000000, 30000000, 10000000, 10000000, 20000000, 20000000, 20000000, 20000000,\n        20000000, 20000000, 10000000, 20000000, 20000000, 20000000, 10000000, 10000000, 30000000, 20000000, 10000000,\n        40000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 40000000, 10000000, 80000000, 30000000, 30000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 20000000, 60000000, 30000000, 30000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 160000000, 120000000, 20000000, 100000000, 50000000, 10000000, 10000000,\n        640000000, 10000000, 550000000, 410000000, 80000000, 60000000, 260000000, 20000000, 170000000, 60000000,\n        30000000, 20000000, 20000000, 20000000, 10000000, 10000000, 10000000, 20000000, 50000000, 40000000, 10000000,\n        10000000, 10000000, 70000000, 30000000, 40000000, 290000000, 90000000, 30000000, 10000000, 10000000, 10000000,\n        10000000, 210000000, 20000000, 10000000, 10000000, 10000000, 120000000, 90000000, 90000000, 60000000, 10000000,\n        30000000, 30000000, 30000000, 30000000, 10000000, 20000000, 50000000, 10000000, 10000000, 10000000, 280000000,\n        150000000, 150000000, 150000000, 60000000, 30000000, 80000000, 50000000, 20000000, 20000000, 20000000, 20000000,\n        20000000, 20000000, 20000000, 20000000, 20000000, 20000000, 20000000, 20000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 20000000, 20000000, 20000000, 10000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 10000000, 130000000, 130000000, 130000000, 70000000, 30000000, 30000000,\n        10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 40000000, 10000000, 590000000, 20000000,\n        20000000, 10000000, 40000000, 150000000, 30000000, 30000000, 120000000, 10000000, 80000000, 370000000,\n        260000000, 40000000, 150000000, 110000000, 90000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 20000000, 20000000, 20000000, 20000000, 20000000, 70000000, 60000000,\n        20000000, 20000000, 640000000, 640000000, 250000000, 250000000, 230000000, 180000000, 170000000, 170000000,\n        170000000, 170000000, 50000000, 10000000, 40000000, 10000000, 10000000, 60000000, 60000000, 10000000, 30000000,\n        10000000, 10000000, 10000000, 10000000, 10000000, 50000000, 50000000, 20000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 390000000,\n        60000000, 40000000, 30000000, 20000000, 20000000, 10000000, 10000000, 10000000, 10000000, 10000000, 30000000,\n        10000000, 10000000, 10000000, 10000000, 10000000, 90000000, 10000000, 10000000, 60000000, 10000000, 40000000,\n        40000000, 40000000, 30000000, 30000000, 30000000, 30000000, 30000000, 30000000, 30000000, 30000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 10000000, 20000000, 10000000, 10000000, 10000000, 10000000, 10000000,\n        180000000, 170000000, 50000000, 20000000, 20000000, 20000000, 20000000, 10000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 30000000, 30000000, 20000000, 20000000, 20000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 90000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 70000000, 70000000,\n        70000000, 70000000, 10000000, 20000000, 20000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 20000000, 20000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 20000000, 20000000, 10000000, 10000000, 10000000, 10000000, 10000000, 20000000, 20000000,\n        20000000, 20000000, 20000000, 10000000, 40000000, 40000000, 10000000, 10000000, 10000000, 10000000, 10000000,\n        30000000, 30000000, 30000000, 30000000, 30000000, 30000000, 10000000, 10000000, 6190000000, 6170000000,\n        6170000000, 6070000000, 4460000000, 10000000, 50000000, 440000000, 540000000, 20000000, 10000000, 10000000,\n        10000000, 980000000, 10000000, 50000000, 480000000, 540000000, 50000000, 210000000, 30000000, 30000000,\n        60000000, 180000000, 10000000, 210000000, 20000000, 20000000, 20000000, 100000000, 20000000, 20000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 40000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 10000000, 20000000, 20000000, 20000000, 20000000, 20000000, 20000000,\n        20000000, 20000000, 10000000, 10000000, 10000000, 10000000, 10000000, 170000000, 160000000, 70000000, 30000000,\n        10000000, 40000000, 10000000, 170000000, 90000000, 90000000, 70000000, 20000000, 10000000, 30000000, 30000000,\n        30000000, 30000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 80000000,\n        10000000, 10000000, 70000000, 60000000, 10000000, 10000000, 20000000, 20000000, 20000000, 10000000, 80000000,\n        10000000, 10000000, 10000000, 10000000, 10000000, 20000000, 20000000, 20000000, 20000000, 20000000, 20000000,\n        20000000, 20000000, 20000000, 20000000, 20000000, 20000000, 50000000, 50000000, 50000000, 50000000, 50000000,\n        50000000, 50000000, 10000000, 10000000, 10000000, 60000000, 60000000, 60000000, 60000000, 60000000, 60000000,\n        60000000, 40000000, 40000000, 30000000, 30000000, 30000000, 30000000, 30000000, 30000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,\n        10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000, 10000000,\n        10000000, 10000000,\n      ],\n      config: {\n        unit: 'short',\n      },\n    },\n    {\n      name: 'self',\n      values: [\n        16460, 4100, 4100, 3670, 1130, 1060, 1020, 150, 150, 50, 30, 20, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 80,\n        40, 10, 10, 530, 80, 40, 70, 50, 50, 30, 10, 10, 10, 10, 10, 10, 10, 10, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n        10, 390, 390, 180, 70, 50, 10, 20, 20, 10, 10, 10, 10, 10, 10, 10, 20, 10, 10, 10, 110, 80, 60, 10, 20, 20, 20,\n        10, 10, 10, 10, 10, 10, 10, 20, 10, 10, 30, 20, 40, 30, 20, 10, 10, 40, 40, 10, 10, 10, 10, 10, 10, 10, 210,\n        210, 210, 130, 130, 10, 50, 40, 40, 70, 10, 40, 1840, 240, 240, 50, 10, 10, 190, 130, 50, 20, 10, 10, 10, 10,\n        10, 10, 80, 20, 10, 10, 10, 10, 10, 10, 10, 10, 60, 10, 1330, 1290, 320, 10, 10, 10, 130, 10, 10, 60, 30, 100,\n        40, 10, 10, 40, 30, 10, 10, 70, 10, 10, 50, 40, 10, 30, 20, 10, 430, 430, 430, 430, 10, 40, 20, 370, 20, 10,\n        180, 10, 30, 10, 10, 10, 5630, 5580, 5580, 5580, 5580, 5580, 5580, 5580, 5580, 5540, 5540, 5530, 5510, 5500,\n        5490, 5490, 1610, 1610, 1540, 1540, 190, 170, 170, 10, 20, 120, 10, 10, 20, 20, 20, 10, 10, 10, 10, 10, 10, 10,\n        10, 10, 10, 10, 850, 350, 300, 120, 110, 80, 20, 10, 80, 40, 20, 10, 10, 50, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n        10, 10, 10, 10, 10, 20, 20, 20, 20, 10, 10, 10, 10, 10, 370, 40, 20, 10, 100, 10, 10, 10, 30, 30, 80, 20, 10,\n        10, 10, 40, 10, 10, 10, 20, 10, 20, 10, 10, 10, 10, 10, 10, 10, 110, 110, 60, 20, 20, 10, 10, 10, 10, 10, 10,\n        10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 480, 150, 10, 130, 10, 10, 50, 140, 80, 40, 10, 10, 20,\n        10, 10, 20, 120, 60, 40, 10, 10, 10, 10, 20, 30, 30, 20, 20, 20, 20, 20, 20, 20, 20, 20, 10, 10, 10, 10, 10, 10,\n        10, 10, 10, 10, 10, 60, 60, 60, 60, 30, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 20, 20, 20, 20, 20, 30,\n        30, 30, 30, 30, 30, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 3880, 3880, 3880, 3880,\n        3870, 3230, 3230, 3210, 320, 70, 70, 40, 40, 20, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n        10, 10, 10, 10, 20, 30, 10, 10, 10, 10, 10, 10, 10, 10, 10, 20, 20, 20, 70, 60, 20, 30, 10, 10, 10, 100, 20, 50,\n        1850, 410, 110, 110, 90, 60, 60, 40, 20, 20, 20, 30, 30, 30, 10, 10, 20, 20, 20, 20, 20, 20, 10, 20, 20, 20, 10,\n        10, 30, 20, 10, 40, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 40, 10, 80, 30, 30, 10, 10, 10, 10, 10,\n        10, 10, 20, 60, 30, 30, 10, 10, 10, 10, 10, 10, 160, 120, 20, 100, 50, 10, 10, 640, 10, 550, 410, 80, 60, 260,\n        20, 170, 60, 30, 20, 20, 20, 10, 10, 10, 20, 50, 40, 10, 10, 10, 70, 30, 40, 290, 90, 30, 10, 10, 10, 10, 210,\n        20, 10, 10, 10, 120, 90, 90, 60, 10, 30, 30, 30, 30, 10, 20, 50, 10, 10, 10, 280, 150, 150, 150, 60, 30, 80, 50,\n        20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 10, 10, 10, 10, 10, 10, 10, 20, 20, 20, 10, 10, 10, 10, 10, 10,\n        10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 130, 130, 130, 70, 30, 30, 10, 10, 10, 10, 10, 10, 10,\n        10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 40, 10, 590, 20, 20, 10, 40, 150, 30, 30, 120, 10, 80, 370, 260, 40,\n        150, 110, 90, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 20, 20, 20, 20, 20, 70, 60, 20, 20, 640, 640, 250, 250,\n        230, 180, 170, 170, 170, 170, 50, 10, 40, 10, 10, 60, 60, 10, 30, 10, 10, 10, 10, 10, 50, 50, 20, 10, 10, 10,\n        10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 390, 60, 40, 30, 20, 20, 10, 10, 10, 10, 10, 30, 10, 10, 10, 10, 10, 90,\n        10, 10, 60, 10, 40, 40, 40, 30, 30, 30, 30, 30, 30, 30, 30, 10, 10, 10, 10, 10, 10, 20, 10, 10, 10, 10, 10, 180,\n        170, 50, 20, 20, 20, 20, 10, 10, 10, 10, 10, 10, 10, 30, 30, 20, 20, 20, 10, 10, 10, 10, 10, 10, 10, 90, 10, 10,\n        10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 70, 70, 70, 70, 10, 20, 20, 10, 10, 10, 10, 10, 10, 10, 10,\n        10, 10, 10, 10, 10, 10, 20, 20, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 20, 20, 10, 10, 10, 10,\n        10, 20, 20, 20, 20, 20, 10, 40, 40, 10, 10, 10, 10, 10, 30, 30, 30, 30, 30, 30, 10, 10, 6190, 6170, 6170, 6070,\n        4460, 10, 50, 440, 540, 20, 10, 10, 10, 980, 10, 50, 480, 540, 50, 210, 30, 30, 60, 180, 10, 210, 20, 20, 20,\n        100, 20, 20, 10, 10, 10, 10, 10, 10, 10, 10, 10, 40, 10, 10, 10, 10, 10, 10, 10, 20, 20, 20, 20, 20, 20, 20, 20,\n        10, 10, 10, 10, 10, 170, 160, 70, 30, 10, 40, 10, 170, 90, 90, 70, 20, 10, 30, 30, 30, 30, 10, 10, 10, 10, 10,\n        10, 10, 10, 80, 10, 10, 70, 60, 10, 10, 20, 20, 20, 10, 80, 10, 10, 10, 10, 10, 20, 20, 20, 20, 20, 20, 20, 20,\n        20, 20, 20, 20, 50, 50, 50, 50, 50, 50, 50, 10, 10, 10, 60, 60, 60, 60, 60, 60, 60, 40, 40, 30, 30, 30, 30, 30,\n        30, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n        10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n        10, 10, 10, 10,\n      ],\n      config: {\n        unit: 'short',\n      },\n    },\n    {\n      name: 'label',\n      values: [\n        'total',\n        'test/pkg/agent.(*Target).start.func1',\n        'test/pkg/agent.(*Target).scrape',\n        'test/pkg/distributor.(*Distributor).Push',\n        'compress/gzip.(*Writer).Write',\n        'compress/flate.(*compressor).write',\n        'compress/flate.(*compressor).deflate',\n        'compress/flate.(*compressor).writeBlock',\n        'compress/flate.(*huffmanBitWriter).writeBlock',\n        'compress/flate.(*huffmanBitWriter).indexTokens',\n        'compress/flate.(*huffmanEncoder).generate',\n        'compress/flate.(*huffmanEncoder).bitCounts',\n        'runtime.memmove',\n        'compress/flate.(*huffmanEncoder).assignEncodingAndSize',\n        'sort.Sort',\n        'sort.quickSort',\n        'sort.quickSort',\n        'sort.quickSort',\n        'sort.insertionSort',\n        'compress/flate.(*byFreq).sort',\n        'sort.Sort',\n        'sort.quickSort',\n        'sort.doPivot',\n        'compress/flate.(*huffmanBitWriter).writeTokens',\n        'compress/flate.(*huffmanBitWriter).writeCode',\n        'compress/flate.offsetCode',\n        'compress/flate.(*huffmanBitWriter).dynamicSize',\n        'compress/flate.(*compressor).findMatch',\n        'compress/flate.matchLen',\n        'compress/flate.hash4',\n        'compress/flate.NewWriter',\n        'runtime.newobject',\n        'runtime.mallocgc',\n        'runtime.memclrNoHeapPointers',\n        'runtime.gcAssistAlloc',\n        'runtime.systemstack',\n        'runtime.gcAssistAlloc.func1',\n        'runtime.gcAssistAlloc1',\n        'runtime.gcDrainN',\n        'runtime.scanobject',\n        'runtime.heapBitsSetType',\n        'runtime.heapBitsSetTypeGCProg',\n        'runtime.runGCProg',\n        'compress/flate.(*compressor).initDeflate',\n        'runtime.makeslice',\n        'runtime.mallocgc',\n        'runtime.gcAssistAlloc',\n        'runtime.systemstack',\n        'runtime.gcAssistAlloc.func1',\n        'runtime.gcAssistAlloc1',\n        'runtime.gcDrainN',\n        'runtime.scanobject',\n        'runtime.pageIndexOf',\n        'test/pkg/pprof.OpenRaw',\n        'test/pkg/gen/google/v1.(*Profile).UnmarshalVT',\n        'test/pkg/gen/google/v1.(*Sample).UnmarshalVT',\n        'runtime.makeslice',\n        'runtime.mallocgc',\n        'runtime.memclrNoHeapPointers',\n        'runtime.(*mcache).nextFree',\n        'runtime.(*mcache).refill',\n        'runtime.(*mcentral).uncacheSpan',\n        'runtime.(*spanSet).push',\n        'runtime.(*mcentral).cacheSpan',\n        'runtime.(*mcentral).grow',\n        'runtime.(*mheap).alloc',\n        'runtime.getMCache',\n        'runtime.nextFreeFast',\n        'runtime.newobject',\n        'runtime.nextFreeFast',\n        'runtime.mallocgc',\n        'runtime.growslice',\n        'test/pkg/gen/google/v1.(*Location).UnmarshalVT',\n        'runtime.newobject',\n        'runtime.mallocgc',\n        'runtime.heapBitsForAddr',\n        'runtime.(*mcache).nextFree',\n        'runtime.(*mcache).refill',\n        'runtime.(*mcentral).cacheSpan',\n        'runtime.(*mcentral).grow',\n        'runtime.(*mheap).alloc',\n        'runtime.systemstack',\n        'runtime.(*mheap).alloc.func1',\n        'runtime.(*mheap).allocSpan',\n        'runtime.(*mheap).allocMSpanLocked',\n        'runtime.(*fixalloc).alloc',\n        'runtime.heapBitsSetType',\n        'runtime.nextFreeFast',\n        'runtime.getMCache',\n        'runtime.growslice',\n        'runtime.mallocgc',\n        'runtime.growslice',\n        'runtime.mallocgc',\n        'runtime.heapBitsSetType',\n        'runtime.memclrNoHeapPointers',\n        'runtime.memmove',\n        'runtime.newobject',\n        'runtime.mallocgc',\n        'runtime.heapBitsSetType',\n        'runtime.memclrNoHeapPointers',\n        'runtime.(*mcache).nextFree',\n        'runtime.(*mcache).refill',\n        'runtime.(*mcentral).uncacheSpan',\n        'runtime.(*spanSet).push',\n        'runtime.(*headTailIndex).incTail',\n        'compress/gzip.(*Writer).Close',\n        'compress/flate.(*compressor).close',\n        'compress/flate.(*compressor).deflate',\n        'compress/flate.(*compressor).writeBlock',\n        'compress/flate.(*huffmanBitWriter).writeBlock',\n        'compress/flate.offsetCode',\n        'compress/flate.(*huffmanBitWriter).indexTokens',\n        'compress/flate.(*huffmanEncoder).generate',\n        'compress/flate.(*huffmanEncoder).bitCounts',\n        'compress/flate.(*huffmanBitWriter).writeTokens',\n        'compress/flate.(*huffmanBitWriter).writeCode',\n        'compress/flate.(*compressor).findMatch',\n        'test/pkg/pprof.(*Profile).Normalize',\n        'sort.Sort',\n        'sort.quickSort',\n        'sort.doPivot',\n        'test/pkg/pprof.(*sortedSample).Less',\n        'test/pkg/pprof.(*sortedSample).Swap',\n        'sort.quickSort',\n        'sort.quickSort',\n        'sort.quickSort',\n        'sort.quickSort',\n        'sort.quickSort',\n        'sort.insertionSort',\n        'test/pkg/pprof.(*sortedSample).Less',\n        'sort.doPivot',\n        'sort.insertionSort',\n        'test/pkg/pprof.(*sortedSample).Swap',\n        'sort.doPivot',\n        'test/pkg/pprof.(*sortedSample).Less',\n        'test/pkg/pprof.(*sortedSample).Swap',\n        'runtime.gcWriteBarrierR8',\n        'runtime.gcWriteBarrier',\n        'runtime.wbBufFlush',\n        'runtime.systemstack',\n        'runtime.wbBufFlush.func1',\n        'runtime.wbBufFlush1',\n        'runtime.findObject',\n        'sort.doPivot',\n        'test/pkg/pprof.(*sortedSample).Less',\n        'test/pkg/pprof.(*Profile).clearSampleReferences',\n        'test/pkg/slices.RemoveInPlace[...]',\n        'test/pkg/pprof.(*Profile).clearSampleReferences.func1',\n        'runtime.growslice',\n        'runtime.memmove',\n        'runtime.memmove',\n        'test/pkg/pprof.StacktracesHasher.Hashes',\n        'github.com/cespare/xxhash/v2.round',\n        'github.com/cespare/xxhash/v2.(*Digest).Sum64',\n        'github.com/cespare/xxhash/v2.(*Digest).Write',\n        'github.com/cespare/xxhash/v2.u64',\n        'github.com/samber/lo.Uniq[...]',\n        'runtime.mapaccess2_fast64',\n        'runtime.memhash64',\n        'runtime.bucketMask',\n        'test/pkg/slices.RemoveInPlace[...]',\n        'test/pkg/pprof.(*Profile).Normalize.func1',\n        'test/pkg/slices.RemoveInPlace[...]',\n        'test/pkg/pprof.(*Profile).Normalize.func1.1',\n        'test/pkg/gen/google/v1.(*Profile).MarshalToVT',\n        'test/pkg/gen/google/v1.(*Profile).MarshalToSizedBufferVT',\n        'test/pkg/gen/google/v1.(*Sample).MarshalToSizedBufferVT',\n        'test/pkg/gen/google/v1.(*Profile).SizeVT',\n        'test/pkg/gen/google/v1.(*Sample).SizeVT',\n        'test/pkg/gen/google/v1.encodeVarint',\n        'test/pkg/gen/google/v1.(*Profile).SizeVT',\n        'test/pkg/gen/google/v1.(*Location).SizeVT',\n        'test/pkg/gen/google/v1.(*Sample).SizeVT',\n        'io/ioutil.ReadAll',\n        'io.ReadAll',\n        'compress/gzip.(*Reader).Read',\n        'compress/flate.(*decompressor).Read',\n        'runtime.memmove',\n        'compress/flate.(*dictDecoder).tryWriteCopy',\n        'runtime.memmove',\n        'compress/flate.(*decompressor).huffmanBlock',\n        'compress/flate.(*dictDecoder).writeCopy',\n        'runtime.memmove',\n        'compress/flate.(*decompressor).huffSym',\n        'bytes.(*Reader).ReadByte',\n        'compress/flate.(*decompressor).moreBits',\n        'compress/flate.(*decompressor).nextBlock',\n        'compress/flate.(*decompressor).huffmanBlock',\n        'compress/flate.(*decompressor).moreBits',\n        'net/http.(*conn).serve',\n        'net/http.serverHandler.ServeHTTP',\n        'net/http.HandlerFunc.ServeHTTP',\n        'test/pkg/util.glob..func1.1',\n        'golang.org/x/net/http2/h2c.h2cHandler.ServeHTTP',\n        'net/http.HandlerFunc.ServeHTTP',\n        'test/pkg/create.(*create).initServer.func2.1',\n        'net/http.HandlerFunc.ServeHTTP',\n        'github.com/opentracing-contrib/go-stdlib/nethttp.MiddlewareFunc.func5',\n        'net/http.HandlerFunc.ServeHTTP',\n        'github.com/weaveworks/common/middleware.Log.Wrap.func1',\n        'net/http.HandlerFunc.ServeHTTP',\n        'github.com/weaveworks/common/middleware.Instrument.Wrap.func1',\n        'github.com/felixge/httpsnoop.(*Metrics).CaptureMetrics',\n        'github.com/weaveworks/common/middleware.Instrument.Wrap.func1.2',\n        'github.com/gorilla/mux.(*Router).ServeHTTP',\n        'github.com/bufbuild/connect-go.(*Handler).ServeHTTP',\n        'github.com/bufbuild/connect-go.NewUnaryHandler[...].func1',\n        'github.com/bufbuild/connect-go.NewUnaryHandler[...].func1.1',\n        'test/pkg/ingester.(*Ingester).Push',\n        'io.ReadAll',\n        'github.com/klauspost/compress/gzip.(*Reader).Read',\n        'github.com/klauspost/compress/flate.(*decompressor).Read',\n        'github.com/klauspost/compress/flate.(*dictDecoder).tryWriteCopy',\n        'github.com/klauspost/compress/flate.(*dictDecoder).writeByte',\n        'github.com/klauspost/compress/flate.(*decompressor).huffmanBytesReader',\n        'github.com/klauspost/compress/flate.(*dictDecoder).writeCopy',\n        'runtime.memmove',\n        'github.com/klauspost/compress/flate.(*decompressor).nextBlock',\n        'github.com/klauspost/compress/flate.(*decompressor).huffmanBytesReader',\n        'runtime.growslice',\n        'runtime.memmove',\n        'runtime.mallocgc',\n        'runtime.(*mcache).allocLarge',\n        'runtime.(*mheap).alloc',\n        'runtime.systemstack',\n        'runtime.(*mheap).alloc.func1',\n        'runtime.(*mheap).allocSpan',\n        'runtime.(*pageAlloc).alloc',\n        'runtime.(*pageAlloc).allocRange',\n        'runtime.(*pageAlloc).update',\n        'runtime.(*pallocBits).summarize',\n        'test/pkg/create.(*Head).Ingest',\n        'test/pkg/create.(*Head).convertSamples',\n        'test/pkg/create.(*deduplicatingSlice[...]).ingest',\n        'test/pkg/create.(*stacktracesHelper).rewrite',\n        'test/pkg/create.idConversionTable.rewriteUint64',\n        'runtime.mapaccess2_fast64',\n        'runtime.memhash64',\n        'runtime.add',\n        'test/pkg/create.(*stacktracesHelper).key',\n        'github.com/cespare/xxhash/v2.(*Digest).Write',\n        'runtime.memmove',\n        'github.com/cespare/xxhash/v2.round',\n        'runtime.mapaccess2_fast64',\n        'runtime.mapassign_fast64',\n        'runtime.hashGrow',\n        'runtime.makeBucketArray',\n        'runtime.newarray',\n        'runtime.mallocgc',\n        'runtime.profilealloc',\n        'runtime.mProf_Malloc',\n        'runtime.callers',\n        'runtime.systemstack',\n        'runtime.callers.func1',\n        'runtime.gentraceback',\n        'runtime.findfunc',\n        'runtime.(*hmap).newoverflow',\n        'runtime.growslice',\n        'runtime.releasem',\n        'runtime.growWork_fast64',\n        'runtime.evacuate_fast64',\n        'encoding/binary.littleEndian.PutUint64',\n        'runtime.newobject',\n        'runtime.acquirem',\n        'runtime.mallocgc',\n        'runtime.heapBitsSetType',\n        'test/pkg/create.(*labelCache).rewriteLabels',\n        'runtime.mapaccess1_fast64',\n        'test/pkg/create.(*deduplicatingSlice[...]).ingest',\n        'runtime.mapaccess2_faststr',\n        'aeshashbody',\n        'memeqbody',\n        'runtime.mapassign_fast64',\n        'runtime.(*hmap).newoverflow',\n        'runtime.growslice',\n        'runtime.nextFreeFast',\n        'runtime.growWork_fast64',\n        'runtime.evacuate_fast64',\n        'runtime.mapaccess2',\n        'memeqbody',\n        'runtime.memhash_varlen',\n        'aeshashbody',\n        'runtime.evacuated',\n        'test/pkg/create.(*locationsHelper).key',\n        'github.com/cespare/xxhash/v2.(*Digest).Sum64',\n        'github.com/cespare/xxhash/v2.(*Digest).Write',\n        'runtime.bucketShift',\n        'test/pkg/create.(*stringsHelper).addToRewriter',\n        'encoding/binary.littleEndian.PutUint64',\n        'runtime.add',\n        'test/pkg/create.(*locationsHelper).rewrite',\n        'test/pkg/create.idConversionTable.rewriteUint64',\n        'runtime.mapaccess2_fast64',\n        'github.com/prometheus/client_golang/prometheus.(*CounterVec).WithLabelValues',\n        'github.com/prometheus/client_golang/prometheus.(*MetricVec).GetMetricWithLabelValues',\n        'github.com/prometheus/client_golang/prometheus.(*MetricVec).hashLabelValues',\n        'github.com/prometheus/client_golang/prometheus.hashAdd',\n        'test/pkg/create.(*deltaProfiles).computeDelta',\n        'test/pkg/create.deltaSamples',\n        'runtime.mapassign_fast64',\n        'runtime.growWork_fast64',\n        'runtime.evacuate_fast64',\n        'runtime.typedmemmove',\n        'runtime.bulkBarrierPreWrite',\n        'runtime.hashGrow',\n        'runtime.makeBucketArray',\n        'runtime.newarray',\n        'runtime.mallocgc',\n        'runtime.heapBitsSetType',\n        'runtime.mapaccess2_fast64',\n        'test/pkg/create.copySlice[...]',\n        'runtime.mallocgc',\n        'runtime.(*mcache).nextFree',\n        'runtime.(*mcache).refill',\n        'runtime.(*mcentral).cacheSpan',\n        'runtime.(*mcentral).grow',\n        'runtime.(*mheap).alloc',\n        'runtime.systemstack',\n        'runtime.(*mheap).alloc.func1',\n        'runtime.(*mheap).allocSpan',\n        'runtime.(*mheap).allocMSpanLocked',\n        'runtime.(*fixalloc).alloc',\n        'test/pkg/gen/google/v1.(*Profile).UnmarshalVT',\n        'runtime.newobject',\n        'runtime.nextFreeFast',\n        'runtime.mallocgc',\n        'runtime.add1',\n        'runtime.heapBitsForAddr',\n        'runtime.heapBitsSetType',\n        'test/pkg/gen/google/v1.(*Location).UnmarshalVT',\n        'runtime.growslice',\n        'runtime.mallocgc',\n        'runtime.heapBitsSetType',\n        'runtime.nextFreeFast',\n        'runtime.newobject',\n        'runtime.getMCache',\n        'runtime.mallocgc',\n        'runtime.roundupsize',\n        'test/pkg/gen/google/v1.(*Sample).UnmarshalVT',\n        'runtime.makeslice',\n        'runtime.mallocgc',\n        'runtime.memclrNoHeapPointers',\n        'runtime.(*mcache).nextFree',\n        'runtime.(*mcache).refill',\n        'runtime.(*mcentral).cacheSpan',\n        'runtime.acquirem',\n        'runtime.growslice',\n        'runtime.mallocgc',\n        'runtime.profilealloc',\n        'runtime.mProf_Malloc',\n        'runtime.callers',\n        'runtime.systemstack',\n        'runtime.callers.func1',\n        'runtime.gentraceback',\n        'runtime.pcdatavalue',\n        'runtime.pcvalue',\n        'runtime.step',\n        'runtime.memclrNoHeapPointers',\n        'github.com/go-kit/log.(*context).Log',\n        'github.com/go-kit/log.bindValues',\n        'github.com/go-kit/log.Caller.func1',\n        'runtime.Caller',\n        'runtime.(*Frames).Next',\n        'runtime.funcline1',\n        'runtime.pcvalue',\n        'runtime.readvarint',\n        'test/pkg/gen/google/v1.(*Profile).ReturnToVTPool',\n        'test/pkg/gen/google/v1.(*Profile).ResetVT',\n        'github.com/bufbuild/connect-go.(*errorTranslatingSender).Send',\n        'github.com/bufbuild/connect-go.(*connectUnaryHandlerSender).Send',\n        'github.com/bufbuild/connect-go.(*connectUnaryMarshaler).Marshal',\n        'github.com/bufbuild/connect-go.(*compressionPool).Compress',\n        'github.com/bufbuild/connect-go.(*compressionPool).putCompressor',\n        'compress/gzip.(*Writer).Close',\n        'compress/gzip.(*Writer).Write',\n        'compress/flate.NewWriter',\n        'runtime.newobject',\n        'runtime.mallocgc',\n        'runtime.gcAssistAlloc',\n        'runtime.systemstack',\n        'runtime.gcAssistAlloc.func1',\n        'runtime.gcAssistAlloc1',\n        'runtime.gcDrainN',\n        'runtime.scanobject',\n        'runtime.spanOf',\n        'compress/gzip.(*Writer).Reset',\n        'compress/gzip.(*Writer).init',\n        'compress/flate.(*Writer).Reset',\n        'compress/flate.(*compressor).reset',\n        'runtime.memclrNoHeapPointers',\n        'github.com/bufbuild/connect-go.(*compressionPool).getCompressor',\n        'compress/gzip.(*Writer).Reset',\n        'compress/gzip.(*Writer).init',\n        'compress/flate.(*Writer).Reset',\n        'compress/flate.(*compressor).reset',\n        'runtime.memclrNoHeapPointers',\n        'github.com/bufbuild/connect-go.receiveUnaryRequest[...]',\n        'github.com/bufbuild/connect-go.(*errorTranslatingReceiver).Receive',\n        'github.com/bufbuild/connect-go.(*connectUnaryHandlerReceiver).Receive',\n        'github.com/bufbuild/connect-go.(*connectUnaryUnmarshaler).UnmarshalFunc',\n        'bytes.(*Buffer).ReadFrom',\n        'github.com/weaveworks/common/middleware.(*reqBody).Read',\n        'net/http.(*body).Read',\n        'net/http.(*body).readLocked',\n        'net/http/internal.(*chunkedReader).Read',\n        'bufio.(*Reader).Read',\n        'net/http.(*connReader).Read',\n        'net.(*conn).Read',\n        'net.(*netFD).Read',\n        'syscall.Read',\n        'syscall.read',\n        'syscall.Syscall',\n        'net/http.(*ServeMux).ServeHTTP',\n        'net/http.HandlerFunc.ServeHTTP',\n        'net/http/pprof.Index',\n        'net/http/pprof.handler.ServeHTTP',\n        'runtime/pprof.(*Profile).WriteTo',\n        'runtime/pprof.writeAlloc',\n        'runtime/pprof.writeHeapInternal',\n        'runtime/pprof.writeHeapProto',\n        'runtime/pprof.(*profileBuilder).pbSample',\n        'runtime/pprof.(*profileBuilder).flush',\n        'compress/gzip.(*Writer).Write',\n        'compress/flate.(*compressor).write',\n        'compress/flate.(*compressor).encSpeed',\n        'compress/flate.(*huffmanBitWriter).writeBlockDynamic',\n        'compress/flate.(*huffmanBitWriter).writeTokens',\n        'compress/flate.(*huffmanBitWriter).writeCode',\n        'github.com/felixge/httpsnoop.(*rw).Write',\n        'github.com/felixge/httpsnoop.(*Metrics).CaptureMetrics.func2.1',\n        'github.com/weaveworks/common/middleware.(*badResponseLoggingWriter).Write',\n        'github.com/opentracing-contrib/go-stdlib/nethttp.(*statusCodeTracker).Write',\n        'net/http.(*response).Write',\n        'net/http.(*response).write',\n        'bufio.(*Writer).Write',\n        'bufio.(*Writer).Flush',\n        'net/http.(*chunkWriter).Write',\n        'bufio.(*Writer).Write',\n        'bufio.(*Writer).Flush',\n        'net/http.checkConnErrorWriter.Write',\n        'net.(*conn).Write',\n        'net.(*netFD).Write',\n        'internal/poll.(*FD).Write',\n        'syscall.write',\n        'syscall.Syscall',\n        'compress/flate.token.length',\n        'compress/flate.(*deflateFast).encode',\n        'compress/flate.NewWriter',\n        'compress/flate.(*compressor).init',\n        'runtime.makeslice',\n        'runtime.mallocgc',\n        'runtime.gcAssistAlloc',\n        'runtime.systemstack',\n        'runtime.gcAssistAlloc.func1',\n        'runtime.gcAssistAlloc1',\n        'runtime.gcDrainN',\n        'runtime.scanobject',\n        'runtime.newobject',\n        'runtime.mallocgc',\n        'runtime.memclrNoHeapPointers',\n        'runtime/pprof.writeHeapProto.func1',\n        'runtime/pprof.(*profileBuilder).pbLabel',\n        'runtime.mapaccess2_faststr',\n        'runtime/pprof.(*protobuf).int64Opt',\n        'runtime/pprof.(*protobuf).endMessage',\n        'runtime.memmove',\n        'runtime/pprof.(*protobuf).startMessage',\n        'runtime/pprof.(*protobuf).uint64s',\n        'runtime.memmove',\n        'runtime/pprof.(*protobuf).int64s',\n        'runtime/pprof.(*profileBuilder).appendLocsForStack',\n        'runtime/pprof.(*profileBuilder).emitLocation',\n        'runtime/pprof.(*profileBuilder).flush',\n        'compress/gzip.(*Writer).Write',\n        'compress/flate.NewWriter',\n        'runtime.newobject',\n        'runtime.mallocgc',\n        'runtime.memclrNoHeapPointers',\n        'runtime.heapBitsSetType',\n        'runtime.heapBitsSetTypeGCProg',\n        'runtime.runGCProg',\n        'compress/flate.(*compressor).init',\n        'runtime.makeslice',\n        'runtime.mallocgc',\n        'runtime.memclrNoHeapPointersChunked',\n        'runtime.memclrNoHeapPointers',\n        'runtime.gcAssistAlloc',\n        'runtime.systemstack',\n        'runtime.gcAssistAlloc.func1',\n        'runtime.gcAssistAlloc1',\n        'runtime.gcDrainN',\n        'runtime.scanobject',\n        'runtime.pageIndexOf',\n        'compress/flate.(*compressor).write',\n        'compress/flate.(*compressor).encSpeed',\n        'compress/flate.(*huffmanBitWriter).writeBlockDynamic',\n        'compress/flate.(*huffmanBitWriter).writeTokens',\n        'compress/flate.(*huffmanBitWriter).indexTokens',\n        'runtime.growslice',\n        'runtime.mallocgc',\n        'runtime.acquirem',\n        'runtime.mapassign_faststr',\n        'runtime.hashGrow',\n        'runtime.makeBucketArray',\n        'runtime.newarray',\n        'runtime.mallocgc',\n        'runtime.profilealloc',\n        'runtime.mProf_Malloc',\n        'runtime.callers',\n        'runtime.systemstack',\n        'runtime.callers.func1',\n        'runtime.gentraceback',\n        'runtime.pcdatavalue',\n        'runtime.pcvalue',\n        'runtime.step',\n        'runtime.mapaccess1_faststr',\n        'aeshashbody',\n        'runtime.mapassign_fast64',\n        'runtime.growWork_fast64',\n        'runtime.evacuate_fast64',\n        'runtime.memclrHasPointers',\n        'runtime.bulkBarrierPreWrite',\n        'runtime.wbBufFlush',\n        'runtime.systemstack',\n        'runtime.wbBufFlush.func1',\n        'runtime.wbBufFlush1',\n        'runtime.spanOf',\n        'runtime.memhash64',\n        'runtime/pprof.(*profileBuilder).pbLine',\n        'runtime/pprof.(*protobuf).int64Opt',\n        'runtime/pprof.(*protobuf).endMessage',\n        'runtime.memmove',\n        'runtime.duffcopy',\n        'runtime/pprof.(*protobuf).endMessage',\n        'runtime.memmove',\n        'runtime.duffzero',\n        'runtime/pprof.(*protobuf).int64Opt',\n        'runtime.CallersFrames',\n        'runtime.newobject',\n        'runtime.nextFreeFast',\n        'runtime.mallocgc',\n        'runtime.heapBitsSetType',\n        'runtime.memclrNoHeapPointers',\n        'runtime.heapBitsForAddr',\n        'runtime/pprof.allFrames',\n        'runtime.duffcopy',\n        'runtime.(*Frames).Next',\n        'runtime.funcline1',\n        'runtime.funcInfo.entry',\n        'runtime.(*moduledata).textAddr',\n        'runtime.pcvalue',\n        'runtime.readvarint',\n        'runtime.step',\n        'runtime.funcfile',\n        'runtime.findnull',\n        'indexbytebody',\n        'runtime.funcname',\n        'runtime.findnull',\n        'indexbytebody',\n        'runtime.findfunc',\n        'runtime.duffzero',\n        'runtime.(*Func).Entry',\n        'runtime.pcdatavalue1',\n        'runtime.pcvalue',\n        'runtime.step',\n        'runtime.funcInfo.entry',\n        'runtime.(*moduledata).textAddr',\n        'runtime.newobject',\n        'runtime.nextFreeFast',\n        'runtime.mallocgc',\n        'runtime.mapaccess2_fast64',\n        'runtime.memhash64',\n        'runtime/pprof.runtime_expandFinalInlineFrame',\n        'runtime.findfunc',\n        'runtime.pcdatavalue1',\n        'runtime.funcInfo.entry',\n        'runtime.(*moduledata).textAddr',\n        'runtime/pprof.(*profileBuilder).stringIndex',\n        'runtime.growslice',\n        'runtime.mallocgc',\n        'runtime.heapBitsSetType',\n        'runtime.memmove',\n        'runtime.mapassign_faststr',\n        'runtime.growWork_faststr',\n        'runtime.evacuate_faststr',\n        'aeshashbody',\n        'runtime.advanceEvacuationMark',\n        'runtime.hashGrow',\n        'runtime.makeBucketArray',\n        'runtime.newarray',\n        'runtime.mallocgc',\n        'runtime.memclrNoHeapPointers',\n        'runtime.heapBitsSetType',\n        'runtime.mapaccess2_faststr',\n        'aeshashbody',\n        'runtime/pprof.(*protobuf).uint64Opt',\n        'runtime.funcdata',\n        'runtime/pprof.(*profileBuilder).build',\n        'compress/gzip.(*Writer).Write',\n        'compress/flate.(*compressor).write',\n        'compress/flate.(*compressor).encSpeed',\n        'compress/flate.(*deflateFast).encode',\n        'compress/flate.(*deflateFast).matchLen',\n        'compress/flate.(*huffmanBitWriter).writeBlockDynamic',\n        'compress/flate.(*huffmanBitWriter).writeTokens',\n        'compress/flate.(*huffmanBitWriter).writeCode',\n        'github.com/felixge/httpsnoop.(*rw).Write',\n        'github.com/felixge/httpsnoop.(*Metrics).CaptureMetrics.func2.1',\n        'github.com/weaveworks/common/middleware.(*badResponseLoggingWriter).Write',\n        'github.com/opentracing-contrib/go-stdlib/nethttp.(*statusCodeTracker).Write',\n        'net/http.(*response).Write',\n        'net/http.(*response).write',\n        'bufio.(*Writer).Write',\n        'bufio.(*Writer).Flush',\n        'net/http.(*chunkWriter).Write',\n        'bufio.(*Writer).Write',\n        'bufio.(*Writer).Flush',\n        'net/http.checkConnErrorWriter.Write',\n        'net.(*conn).Write',\n        'net.(*netFD).Write',\n        'internal/poll.(*FD).Write',\n        'syscall.write',\n        'syscall.Syscall',\n        'compress/flate.(*huffmanBitWriter).writeBits',\n        'compress/flate.(*huffmanBitWriter).indexTokens',\n        'compress/flate.(*huffmanEncoder).generate',\n        'compress/flate.(*huffmanEncoder).bitCounts',\n        'compress/flate.(*huffmanBitWriter).writeDynamicHeader',\n        'compress/flate.(*huffmanBitWriter).writeCode',\n        'github.com/felixge/httpsnoop.(*rw).Write',\n        'github.com/felixge/httpsnoop.(*Metrics).CaptureMetrics.func2.1',\n        'github.com/weaveworks/common/middleware.(*badResponseLoggingWriter).Write',\n        'github.com/opentracing-contrib/go-stdlib/nethttp.(*statusCodeTracker).Write',\n        'net/http.(*response).Write',\n        'net/http.(*response).write',\n        'bufio.(*Writer).Write',\n        'bufio.(*Writer).Flush',\n        'net/http.(*chunkWriter).Write',\n        'bufio.(*Writer).Write',\n        'bufio.(*Writer).Flush',\n        'net/http.checkConnErrorWriter.Write',\n        'net.(*conn).Write',\n        'net.(*netFD).Write',\n        'internal/poll.(*FD).Write',\n        'syscall.write',\n        'syscall.Syscall',\n        'compress/flate.hash',\n        'compress/gzip.(*Writer).Close',\n        'compress/flate.(*compressor).close',\n        'compress/flate.(*compressor).encSpeed',\n        'compress/flate.(*huffmanBitWriter).writeBlockDynamic',\n        'compress/flate.(*huffmanBitWriter).indexTokens',\n        'compress/flate.(*huffmanBitWriter).writeTokens',\n        'compress/flate.(*huffmanBitWriter).writeBits',\n        'github.com/felixge/httpsnoop.(*rw).Write',\n        'github.com/felixge/httpsnoop.(*Metrics).CaptureMetrics.func2.1',\n        'github.com/weaveworks/common/middleware.(*badResponseLoggingWriter).Write',\n        'github.com/opentracing-contrib/go-stdlib/nethttp.(*statusCodeTracker).Write',\n        'net/http.(*response).Write',\n        'net/http.(*response).write',\n        'bufio.(*Writer).Write',\n        'bufio.(*Writer).Flush',\n        'net/http.(*chunkWriter).Write',\n        'fmt.Fprintf',\n        'fmt.(*pp).doPrintf',\n        'fmt.(*pp).printArg',\n        'fmt.(*pp).fmtInteger',\n        'fmt.(*fmt).fmtInteger',\n        'compress/flate.(*huffmanBitWriter).writeCode',\n        'compress/flate.token.offset',\n        'compress/flate.hash',\n        'compress/flate.(*deflateFast).encode',\n        'compress/flate.load64',\n        'runtime.FuncForPC',\n        'runtime.newobject',\n        'runtime.mallocgc',\n        'runtime.heapBitsSetType',\n        'runtime.findfunc',\n        'runtime.pcdatavalue1',\n        'runtime.funcInfo.entry',\n        'runtime.(*moduledata).textAddr',\n        'runtime.pcvalue',\n        'runtime.readvarint',\n        'runtime.step',\n        'runtime.funcline1',\n        'runtime.pcvalue',\n        'runtime.readvarint',\n        'runtime.step',\n        'runtime.funcInfo.entry',\n        'runtime.(*moduledata).textAddr',\n        'runtime/pprof.newProfileBuilder',\n        'runtime/pprof.(*profileBuilder).readMapping',\n        'os.ReadFile',\n        'runtime.growslice',\n        'runtime.mallocgc',\n        'runtime.gcAssistAlloc',\n        'runtime.systemstack',\n        'runtime.gcAssistAlloc.func1',\n        'runtime.gcAssistAlloc1',\n        'runtime.gcDrainN',\n        'runtime.duffcopy',\n        'runtime.(*Func).Name',\n        'runtime.funcname',\n        'runtime.findnull',\n        'indexbytebody',\n        'runtime/pprof.scaleHeapSample',\n        'math.archExp',\n        'runtime.(*MemProfileRecord).Stack',\n        'runtime.duffcopy',\n        'runtime/pprof.writeGoroutine',\n        'runtime/pprof.writeRuntimeProfile',\n        'runtime/pprof.runtime_goroutineProfileWithLabels',\n        'runtime.goroutineProfileWithLabels',\n        'runtime.forEachGRace',\n        'runtime.goroutineProfileWithLabels.func4',\n        'runtime.systemstack',\n        'runtime.goroutineProfileWithLabels.func4.1',\n        'runtime.saveg',\n        'runtime.gentraceback',\n        'runtime.pcdatavalue',\n        'runtime.funcInfo.entry',\n        'runtime.pcvalue',\n        'runtime.step',\n        'runtime.readvarint',\n        'runtime.funcspdelta',\n        'runtime.pcvalue',\n        'runtime.readvarint',\n        'runtime.step',\n        'runtime.findfunc',\n        'runtime.goroutineProfileWithLabels.func1',\n        'runtime.isSystemGoroutine',\n        'runtime.funcname',\n        'runtime.findnull',\n        'runtime.goroutineProfileWithLabels.func2',\n        'runtime.goroutineProfileWithLabels.func1',\n        'runtime.isSystemGoroutine',\n        'runtime.startTheWorld',\n        'runtime.systemstack',\n        'runtime.startTheWorld.func1',\n        'runtime.startTheWorldWithSema',\n        'runtime.wakep',\n        'runtime.startm',\n        'runtime.notewakeup',\n        'runtime.futexwakeup',\n        'runtime.futex',\n        'runtime.systemstack',\n        'runtime.goroutineProfileWithLabels.func3',\n        'runtime.saveg',\n        'runtime.gentraceback',\n        'runtime/pprof.printCountProfile',\n        'runtime/pprof.printCountProfile.func1',\n        'fmt.Fprintf',\n        'fmt.(*pp).doPrintf',\n        'fmt.(*pp).printArg',\n        'fmt.(*pp).fmtInteger',\n        'fmt.(*fmt).fmtInteger',\n        'bytes.(*Buffer).Write',\n        'runtime.memmove',\n        'runtime.slicebytetostring',\n        'runtime.nextFreeFast',\n        'runtime.mapassign_faststr',\n        'runtime.hashGrow',\n        'runtime.makeBucketArray',\n        'runtime.newarray',\n        'runtime.nextFreeFast',\n        'aeshashbody',\n        'runtime/pprof.(*profileBuilder).appendLocsForStack',\n        'runtime/pprof.(*profileBuilder).stringIndex',\n        'runtime.overLoadFactor',\n        'runtime/pprof.(*profileBuilder).emitLocation',\n        'runtime/pprof.(*profileBuilder).pbLine',\n        'runtime/pprof.(*profileBuilder).flush',\n        'compress/gzip.(*Writer).Write',\n        'compress/flate.NewWriter',\n        'compress/flate.(*compressor).init',\n        'runtime.makeslice',\n        'runtime.mallocgc',\n        'runtime.gcAssistAlloc',\n        'runtime.systemstack',\n        'runtime.gcAssistAlloc.func1',\n        'runtime.gcAssistAlloc1',\n        'runtime.gcDrainN',\n        'runtime.heapBits.bits',\n        'runtime.scanobject',\n        'runtime.greyobject',\n        'runtime.newobject',\n        'runtime.mallocgc',\n        'runtime.memclrNoHeapPointers',\n        'runtime/pprof.allFrames',\n        'runtime.newobject',\n        'runtime.nextFreeFast',\n        'runtime.(*Frames).Next',\n        'runtime.funcline1',\n        'runtime.pcvalue',\n        'runtime/pprof.newProfileBuilder',\n        'runtime/pprof.(*profileBuilder).readMapping',\n        'runtime/pprof.parseProcSelfMaps',\n        'runtime/pprof.elfBuildID',\n        'os.OpenFile',\n        'syscall.Open',\n        'syscall.openat',\n        'syscall.Syscall6',\n        'runtime/pprof.parseProcSelfMaps.func1',\n        'bytes.Cut',\n        'runtime.slicebytetostring',\n        'runtime.nextFreeFast',\n        'runtime/pprof.(*profileBuilder).addMapping',\n        'runtime.growslice',\n        'os.Open',\n        'os.OpenFile',\n        'syscall.Open',\n        'syscall.openat',\n        'syscall.Syscall6',\n        'os.openFileNolog',\n        'os.newFile',\n        'runtime.SetFinalizer',\n        'runtime.systemstack',\n        'runtime.SetFinalizer.func2',\n        'runtime.addfinalizer',\n        'runtime.addspecial',\n        'os.ReadFile',\n        'runtime.growslice',\n        'runtime.mallocgc',\n        'runtime.(*mcache).nextFree',\n        'runtime.(*mcache).refill',\n        'runtime.(*mcentral).cacheSpan',\n        'runtime.(*mcentral).grow',\n        'runtime.(*mheap).alloc',\n        'runtime.systemstack',\n        'runtime.(*mheap).alloc.func1',\n        'runtime.(*mheap).allocSpan',\n        'runtime.(*pageAlloc).allocToCache',\n        'os.(*File).Stat',\n        'internal/poll.(*FD).Fstat',\n        'syscall.Fstat',\n        'syscall.Syscall',\n        'os.(*File).Read',\n        'syscall.Read',\n        'syscall.read',\n        'syscall.Syscall',\n        'runtime.newobject',\n        'sort.Sort',\n        'sort.quickSort',\n        'sort.doPivot',\n        'runtime/pprof.(*keysByCount).Less',\n        'cmpbody',\n        'sort.quickSort',\n        'sort.insertionSort',\n        'runtime/pprof.(*keysByCount).Less',\n        'runtime.mapaccess1_faststr',\n        'runtime/pprof.(*profileBuilder).pbSample',\n        'runtime/pprof.(*protobuf).uint64s',\n        'runtime.newobject',\n        'github.com/prometheus/client_golang/prometheus.(*GaugeVec).WithLabelValues',\n        'runtime.assertI2I',\n        'runtime.getitab',\n        'runtime.(*itabTableType).find',\n        'github.com/weaveworks/common/middleware.Instrument.getRouteName',\n        'github.com/weaveworks/common/middleware.getRouteName',\n        'github.com/weaveworks/common/middleware.MakeLabelValue',\n        'strings.Trim',\n        'github.com/gorilla/mux.(*Router).Match',\n        'github.com/gorilla/mux.(*Route).Match',\n        'github.com/gorilla/mux.(*routeRegexp).Match',\n        'regexp.(*Regexp).doExecute',\n        'regexp.(*Regexp).backtrack',\n        'regexp.(*Regexp).tryBacktrack',\n        'github.com/weaveworks/common/logging.gokit.Debugf',\n        'github.com/go-kit/log.(*context).Log',\n        'github.com/go-kit/log.bindValues',\n        'github.com/go-kit/log.Caller.func1',\n        'runtime.Caller',\n        'runtime.callers',\n        'github.com/uber/jaeger-client-go.(*Tracer).Extract',\n        'github.com/uber/jaeger-client-go.(*TextMapPropagator).Extract',\n        'runtime.assertE2I2',\n        'runtime.getitab',\n        'runtime.(*itabTableType).find',\n        'runtime.newobject',\n        'runtime.nextFreeFast',\n        'github.com/weaveworks/common/middleware.Tracer.Wrap.func1',\n        'github.com/weaveworks/common/middleware.getRouteName',\n        'github.com/gorilla/mux.(*Router).Match',\n        'github.com/gorilla/mux.(*Route).Match',\n        'github.com/gorilla/mux.(*routeRegexp).Match',\n        'regexp.(*Regexp).doExecute',\n        'net/http.(*response).finishRequest',\n        'bufio.(*Writer).Flush',\n        'net/http.(*chunkWriter).Write',\n        'net/http.(*chunkWriter).writeHeader',\n        'net/http.Header.writeSubset',\n        'net/http.Header.sortedKeyValues',\n        'sync.(*Pool).Get',\n        'net/http.checkConnErrorWriter.Write',\n        'net.(*conn).Write',\n        'net.(*netFD).Write',\n        'internal/poll.(*FD).Write',\n        'syscall.write',\n        'syscall.Syscall',\n        'net/http.(*conn).readRequest',\n        'runtime.mapiterinit',\n        'runtime.gcBgMarkWorker',\n        'runtime.systemstack',\n        'runtime.gcBgMarkWorker.func2',\n        'runtime.gcDrain',\n        'runtime.scanobject',\n        'runtime.(*gcBits).bytep',\n        'runtime.(*mspan).objIndex',\n        'runtime.pageIndexOf',\n        'runtime.greyobject',\n        'runtime.(*gcWork).put',\n        'runtime.getempty',\n        'runtime.putfull',\n        'runtime.(*lfstack).push',\n        'runtime.findObject',\n        'runtime.spanOf',\n        'runtime.(*mspan).markBitsForIndex',\n        'runtime.spanOf',\n        'runtime.markBits.isMarked',\n        'runtime.arenaIndex',\n        'runtime.heapBitsForAddr',\n        'runtime.(*gcWork).tryGet',\n        'runtime.trygetfull',\n        'runtime.spanOfUnchecked',\n        'runtime.heapBits.next',\n        'runtime.gcFlushBgCredit',\n        'runtime.heapBits.bits',\n        'runtime.(*gcWork).balance',\n        'runtime.handoff',\n        'runtime.getempty',\n        'runtime.(*gcWork).tryGetFast',\n        'runtime.gcMarkDone',\n        'runtime.gcMarkTermination',\n        'runtime.mProf_Flush',\n        'runtime.mProf_FlushLocked',\n        'runtime.(*bucket).mp',\n        'runtime.systemstack',\n        'runtime.gcMarkTermination.func4',\n        'runtime.forEachP',\n        'runtime.gcMarkTermination.func4.1',\n        'runtime.(*mcache).prepareForSweep',\n        'runtime.(*mcache).releaseAll',\n        'net/http.(*persistConn).readLoop',\n        'runtime.selectgo',\n        'runtime.send',\n        'runtime.goready',\n        'runtime.systemstack',\n        'runtime.goready.func1',\n        'runtime.ready',\n        'runtime.runqput',\n        'bufio.(*Reader).Peek',\n        'bufio.(*Reader).fill',\n        'net/http.(*persistConn).Read',\n        'net.(*conn).Read',\n        'net.(*netFD).Read',\n        'syscall.Read',\n        'syscall.read',\n        'syscall.Syscall',\n        'net/http.(*persistConn).readResponse',\n        'github.com/opentracing-contrib/go-stdlib/nethttp.(*Tracer).gotFirstResponseByte',\n        'runtime.newobject',\n        'runtime.mallocgc',\n        'runtime.memclrNoHeapPointers',\n        'runtime.bgsweep',\n        'runtime.sweepone',\n        'runtime.(*sweepLocker).tryAcquire',\n        'runtime.(*sweepLocked).sweep',\n        'runtime.(*gcBitsArena).tryAlloc',\n        'runtime.spanClass.sizeclass',\n        'runtime/internal/atomic.(*Uint32).CompareAndSwap',\n        'runtime.mcall',\n        'runtime.park_m',\n        'runtime.schedule',\n        'runtime.findrunnable',\n        'runtime.netpoll',\n        'runtime.epollwait',\n        'runtime.stopm',\n        'runtime.notesleep',\n        'runtime.futexsleep',\n        'runtime.futex',\n        'runtime.(*randomOrder).start',\n        'runtime.checkTimers',\n        'runtime.runtimer',\n        'runtime.dodeltimer0',\n        'runtime.gcstopm',\n        'runtime.lock2',\n        'runtime.procyield',\n        'runtime.(*lfstack).pop',\n        'runtime.gosched_m',\n        'runtime.lock',\n        'runtime.lock2',\n        'runtime.goschedImpl',\n        'runtime.schedule',\n        'runtime.execute',\n        'runtime.casgstatus',\n        'runtime.checkTimers',\n        'runtime.findrunnable',\n        'runtime.checkTimers',\n        'runtime.casgstatus',\n        'net/http.(*persistConn).writeLoop',\n        'net/http.(*Request).write',\n        'net/http.newTransferWriter',\n        'runtime.convI2I',\n        'runtime.getitab',\n        'runtime.(*itabTableType).find',\n        'runtime.chansend1',\n        'runtime.chansend',\n        'runtime.send',\n        'runtime.goready',\n        'runtime.systemstack',\n        'runtime.goready.func1',\n        'runtime.ready',\n        'runtime.wakep',\n        'runtime.startm',\n        'runtime.notewakeup',\n        'runtime.futexwakeup',\n        'runtime.futex',\n        'bufio.(*Writer).Flush',\n        'net/http.persistConnWriter.Write',\n        'net.(*conn).Write',\n        'net.(*netFD).Write',\n        'internal/poll.(*FD).Write',\n        'syscall.write',\n        'syscall.Syscall',\n        'runtime.exitsyscall',\n        'runtime.exitsyscallfast',\n        'runtime.exitsyscallfast_reacquired',\n        'test/pkg/distributor.(*Distributor).Push.func1',\n        'test/pkg/distributor.(*Distributor).sendProfiles',\n        'test/pkg/distributor.(*Distributor).sendProfilesErr',\n        'test/pkg/gen/ingester/v1/ingesterv1connect.(*ingesterServiceClient).Push',\n        'github.com/bufbuild/connect-go.(*Client[...]).CallUnary',\n        'github.com/bufbuild/connect-go.NewClient[...].func2',\n        'github.com/bufbuild/connect-go.NewClient[...].func1',\n        'github.com/bufbuild/connect-go.receiveUnaryResponse[...]',\n        'github.com/bufbuild/connect-go.(*errorTranslatingReceiver).Receive',\n        'github.com/bufbuild/connect-go.(*connectUnaryClientReceiver).Receive',\n        'github.com/bufbuild/connect-go.(*connectUnaryUnmarshaler).UnmarshalFunc',\n        'github.com/bufbuild/connect-go.(*compressionPool).Decompress',\n        'github.com/bufbuild/connect-go.(*compressionPool).getDecompressor',\n        'compress/gzip.(*Reader).Reset',\n        'compress/gzip.(*Reader).readHeader',\n        'compress/flate.(*dictDecoder).init',\n        'runtime.makeslice',\n        'runtime.mallocgc',\n        'runtime.(*mcache).nextFree',\n        'runtime.(*mcache).refill',\n        'runtime.(*mcentral).cacheSpan',\n        'runtime.(*mcentral).grow',\n        'runtime.heapBits.initSpan',\n        'compress/flate.(*decompressor).Reset',\n        'runtime.newstack',\n        'runtime.copystack',\n        'runtime.gentraceback',\n        'compress/flate.NewReader',\n        'compress/flate.fixedHuffmanDecoderInit',\n        'runtime.newstack',\n        'runtime.copystack',\n        'runtime.gentraceback',\n        'runtime.funcspdelta',\n        'runtime.pcvalue',\n        'runtime.step',\n        'github.com/bufbuild/connect-go.(*errorTranslatingSender).Send',\n        'github.com/bufbuild/connect-go.(*connectClientSender).Send',\n        'github.com/bufbuild/connect-go.(*connectUnaryMarshaler).Marshal',\n        'github.com/bufbuild/connect-go.(*connectUnaryMarshaler).write',\n        'github.com/bufbuild/connect-go.(*duplexHTTPCall).Write',\n        'io.(*pipe).write',\n        'runtime.chanrecv1',\n        'runtime.chanrecv',\n        'runtime.recv',\n        'runtime.gcWriteBarrierR8',\n        'runtime.gcWriteBarrier',\n        'runtime.wbBufFlush',\n        'runtime.systemstack',\n        'runtime.wbBufFlush.func1',\n        'runtime.wbBufFlush1',\n        'runtime.findObject',\n        'github.com/bufbuild/connect-go.(*errorTranslatingReceiver).Close',\n        'github.com/bufbuild/connect-go.(*connectUnaryClientReceiver).Close',\n        'github.com/bufbuild/connect-go.(*duplexHTTPCall).CloseRead',\n        'github.com/opentracing-contrib/go-stdlib/nethttp.closeTracker.Close',\n        'runtime.newobject',\n        'runtime.mallocgc',\n        'runtime.heapBitsSetType',\n        'runtime/pprof.profileWriter',\n        'runtime/pprof.(*profileBuilder).addCPUData',\n        'runtime/pprof.(*profMap).lookup',\n        'runtime.makeslice',\n        'runtime.mallocgc',\n        'runtime.gcAssistAlloc',\n        'runtime.systemstack',\n        'runtime.gcAssistAlloc.func1',\n        'runtime.gcAssistAlloc1',\n        'runtime.gcDrainN',\n        'runtime.scanobject',\n        'runtime.pageIndexOf',\n        'net/http.(*connReader).backgroundRead',\n        'net.(*conn).Read',\n        'net.(*netFD).Read',\n        'internal/poll.(*FD).Read',\n      ],\n    },\n  ],\n};\n","import { StandardVariableQuery, StandardVariableSupport } from '@grafana/data';\n\nimport { TestData, TestDataQueryType } from './dataquery.gen';\nimport { TestDataDataSource } from './datasource';\n\nexport class TestDataVariableSupport extends StandardVariableSupport<TestDataDataSource> {\n  toDataQuery(query: StandardVariableQuery): TestData {\n    return {\n      refId: 'TestDataDataSource-QueryVariable',\n      stringInput: query.query,\n      scenarioId: TestDataQueryType.VariablesQuery,\n      csvWave: undefined,\n    };\n  }\n}\n","import { from, merge, Observable, of, throwError } from 'rxjs';\nimport { delay } from 'rxjs/operators';\n\nimport {\n  AnnotationEvent,\n  ArrayDataFrame,\n  DataFrame,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  DataTopic,\n  LiveChannelScope,\n  LoadingState,\n  TimeRange,\n  ScopedVars,\n  toDataFrame,\n  MutableDataFrame,\n} from '@grafana/data';\nimport { DataSourceWithBackend, getBackendSrv, getGrafanaLiveSrv, getTemplateSrv, TemplateSrv } from '@grafana/runtime';\nimport { getSearchFilterScopedVar } from 'app/features/variables/utils';\n\nimport { Scenario, TestData, TestDataQueryType } from './dataquery.gen';\nimport { queryMetricTree } from './metricTree';\nimport { generateRandomEdges, generateRandomNodes, savedNodesResponse } from './nodeGraphUtils';\nimport { runStream } from './runStreams';\nimport { flameGraphData } from './testData/flameGraphResponse';\nimport { TestDataVariableSupport } from './variables';\n\nexport class TestDataDataSource extends DataSourceWithBackend<TestData> {\n  scenariosCache?: Promise<Scenario[]>;\n\n  constructor(\n    instanceSettings: DataSourceInstanceSettings,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv()\n  ) {\n    super(instanceSettings);\n    this.variables = new TestDataVariableSupport();\n  }\n\n  query(options: DataQueryRequest<TestData>): Observable<DataQueryResponse> {\n    const backendQueries: TestData[] = [];\n    const streams: Array<Observable<DataQueryResponse>> = [];\n\n    // Start streams and prepare queries\n    for (const target of options.targets) {\n      if (target.hide) {\n        continue;\n      }\n\n      this.resolveTemplateVariables(target, options.scopedVars);\n\n      switch (target.scenarioId) {\n        case 'live':\n          streams.push(runGrafanaLiveQuery(target, options));\n          break;\n        case 'streaming_client':\n          streams.push(runStream(target, options));\n          break;\n        case 'grafana_api':\n          streams.push(runGrafanaAPI(target, options));\n          break;\n        case 'annotations':\n          streams.push(this.annotationDataTopicTest(target, options));\n          break;\n        case 'variables-query':\n          streams.push(this.variablesQuery(target, options));\n          break;\n        case 'node_graph':\n          streams.push(this.nodesQuery(target, options));\n          break;\n        case 'flame_graph':\n          streams.push(this.flameGraphQuery());\n          break;\n        case 'trace':\n          streams.push(this.trace(target, options));\n          break;\n        case 'raw_frame':\n          streams.push(this.rawFrameQuery(target, options));\n          break;\n        case 'server_error_500':\n          // this now has an option where it can return/throw an error from the frontend.\n          // if it doesn't, send it to the backend where it might panic there :)\n          const query = this.serverErrorQuery(target, options);\n          query ? streams.push(query) : backendQueries.push(target);\n          break;\n        // Unusable since 7, removed in 8\n        case 'manual_entry': {\n          let csvContent = 'Time,Value\\n';\n          if (target.points) {\n            for (const point of target.points) {\n              csvContent += `${point[1]},${point[0]}\\n`;\n            }\n          }\n          target.scenarioId = TestDataQueryType.CSVContent;\n          target.csvContent = csvContent;\n        }\n\n        default:\n          backendQueries.push(target);\n      }\n    }\n\n    if (backendQueries.length) {\n      const backendOpts = {\n        ...options,\n        targets: backendQueries,\n      };\n      streams.push(super.query(backendOpts));\n    }\n\n    if (streams.length === 0) {\n      return of({ data: [] });\n    }\n\n    return merge(...streams);\n  }\n\n  resolveTemplateVariables(query: TestData, scopedVars: ScopedVars) {\n    if (query.labels) {\n      query.labels = this.templateSrv.replace(query.labels, scopedVars);\n    }\n    if (query.alias) {\n      query.alias = this.templateSrv.replace(query.alias, scopedVars);\n    }\n    if (query.scenarioId) {\n      query.scenarioId = this.templateSrv.replace(query.scenarioId, scopedVars) as TestDataQueryType;\n    }\n    if (query.stringInput) {\n      query.stringInput = this.templateSrv.replace(query.stringInput, scopedVars);\n    }\n    if (query.csvContent) {\n      query.csvContent = this.templateSrv.replace(query.csvContent, scopedVars);\n    }\n    if (query.rawFrameContent) {\n      query.rawFrameContent = this.templateSrv.replace(query.rawFrameContent, scopedVars);\n    }\n  }\n\n  annotationDataTopicTest(target: TestData, req: DataQueryRequest<TestData>): Observable<DataQueryResponse> {\n    const events = this.buildFakeAnnotationEvents(req.range, 50);\n    const dataFrame = new ArrayDataFrame(events);\n    dataFrame.meta = { dataTopic: DataTopic.Annotations };\n\n    return of({ key: target.refId, data: [dataFrame] }).pipe(delay(100));\n  }\n\n  buildFakeAnnotationEvents(range: TimeRange, count: number): AnnotationEvent[] {\n    let timeWalker = range.from.valueOf();\n    const to = range.to.valueOf();\n    const events = [];\n    const step = (to - timeWalker) / count;\n\n    for (let i = 0; i < count; i++) {\n      events.push({\n        time: timeWalker,\n        text: 'This is the text, <a href=\"https://grafana.com\">Grafana.com</a>',\n        tags: ['text', 'server'],\n      });\n      timeWalker += step;\n    }\n\n    return events;\n  }\n\n  annotationQuery(options: any) {\n    return Promise.resolve(this.buildFakeAnnotationEvents(options.range, 10));\n  }\n\n  getQueryDisplayText(query: TestData) {\n    const scenario = query.scenarioId ?? 'Default scenario';\n\n    if (query.alias) {\n      return scenario + ' as ' + query.alias;\n    }\n\n    return scenario;\n  }\n\n  testDatasource() {\n    return Promise.resolve({\n      status: 'success',\n      message: 'Data source is working',\n    });\n  }\n\n  getScenarios(): Promise<Scenario[]> {\n    if (!this.scenariosCache) {\n      this.scenariosCache = this.getResource('scenarios');\n    }\n\n    return this.scenariosCache;\n  }\n\n  variablesQuery(target: TestData, options: DataQueryRequest<TestData>): Observable<DataQueryResponse> {\n    const query = target.stringInput ?? '';\n    const interpolatedQuery = this.templateSrv.replace(query, getSearchFilterScopedVar({ query, wildcardChar: '*' }));\n    const children = queryMetricTree(interpolatedQuery);\n    const items = children.map((item) => ({ value: item.name, text: item.name }));\n    const dataFrame = new ArrayDataFrame(items);\n\n    return of({ data: [dataFrame] }).pipe(delay(100));\n  }\n\n  nodesQuery(target: TestData, options: DataQueryRequest<TestData>): Observable<DataQueryResponse> {\n    const type = target.nodes?.type || 'random';\n    let frames: DataFrame[];\n    switch (type) {\n      case 'random':\n        frames = generateRandomNodes(target.nodes?.count);\n        break;\n      case 'response':\n        frames = savedNodesResponse();\n        break;\n      case 'random edges':\n        frames = [generateRandomEdges(target.nodes?.count)];\n        break;\n      default:\n        throw new Error(`Unknown node_graph sub type ${type}`);\n    }\n\n    return of({ data: frames }).pipe(delay(100));\n  }\n\n  flameGraphQuery(): Observable<DataQueryResponse> {\n    return of({ data: [flameGraphData] }).pipe(delay(100));\n  }\n\n  trace(target: TestData, options: DataQueryRequest<TestData>): Observable<DataQueryResponse> {\n    const frame = new MutableDataFrame({\n      meta: {\n        preferredVisualisationType: 'trace',\n      },\n      fields: [\n        { name: 'traceID' },\n        { name: 'spanID' },\n        { name: 'parentSpanID' },\n        { name: 'operationName' },\n        { name: 'serviceName' },\n        { name: 'serviceTags' },\n        { name: 'startTime' },\n        { name: 'duration' },\n        { name: 'logs' },\n        { name: 'references' },\n        { name: 'tags' },\n      ],\n    });\n    const numberOfSpans = options.targets[0].spanCount || 10;\n    const spanIdPrefix = '75c665dfb68';\n    const start = Date.now() - 1000 * 60 * 30;\n\n    for (let i = 0; i < numberOfSpans; i++) {\n      frame.add({\n        traceID: spanIdPrefix + '10000',\n        spanID: spanIdPrefix + (10000 + i),\n        parentSpanID: i === 0 ? '' : spanIdPrefix + 10000,\n        operationName: `Operation ${i}`,\n        serviceName: `Service ${i}`,\n        startTime: start + i * 100,\n        duration: 300,\n      });\n    }\n\n    return of({ data: [frame] }).pipe(delay(100));\n  }\n\n  rawFrameQuery(target: TestData, options: DataQueryRequest<TestData>): Observable<DataQueryResponse> {\n    try {\n      const data = JSON.parse(target.rawFrameContent ?? '[]').map((v: any) => {\n        const f = toDataFrame(v);\n        f.refId = target.refId;\n        return f;\n      });\n      return of({ data, state: LoadingState.Done }).pipe(delay(100));\n    } catch (ex) {\n      return of({\n        data: [],\n        error: ex instanceof Error ? ex : new Error('Unkown error'),\n      }).pipe(delay(100));\n    }\n  }\n\n  serverErrorQuery(target: TestData, options: DataQueryRequest<TestData>): Observable<DataQueryResponse> | null {\n    const { errorType } = target;\n\n    if (errorType === 'server_panic') {\n      return null;\n    }\n\n    const stringInput = target.stringInput ?? '';\n    if (stringInput === '') {\n      if (errorType === 'frontend_exception') {\n        throw new Error('Scenario threw an exception in the frontend because the input was empty.');\n      } else {\n        return throwError(() => new Error('Scenario returned an error because the input was empty.'));\n      }\n    }\n\n    return null;\n  }\n}\n\nfunction runGrafanaAPI(target: TestData, req: DataQueryRequest<TestData>): Observable<DataQueryResponse> {\n  const url = `/api/${target.stringInput}`;\n  return from(\n    getBackendSrv()\n      .get(url)\n      .then((res) => {\n        const frame = new ArrayDataFrame(res);\n        return {\n          state: LoadingState.Done,\n          data: [frame],\n        };\n      })\n  );\n}\n\nlet liveQueryCounter = 1000;\n\nfunction runGrafanaLiveQuery(target: TestData, req: DataQueryRequest<TestData>): Observable<DataQueryResponse> {\n  if (!target.channel) {\n    throw new Error(`Missing channel config`);\n  }\n  return getGrafanaLiveSrv().getDataStream({\n    addr: {\n      scope: LiveChannelScope.Plugin,\n      namespace: 'testdata',\n      path: target.channel,\n    },\n    key: `testStream.${liveQueryCounter++}`,\n  });\n}\n","import { DataSourcePlugin } from '@grafana/data';\n\nimport { ConfigEditor } from './ConfigEditor';\nimport { QueryEditor } from './QueryEditor';\nimport { TestInfoTab } from './TestInfoTab';\nimport { TestDataDataSource } from './datasource';\n\nclass TestDataAnnotationsQueryCtrl {\n  annotation: any;\n  constructor() {}\n  static template = '<h2>Annotation scenario</h2>';\n}\n\nexport const plugin = new DataSourcePlugin(TestDataDataSource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor)\n  .setAnnotationQueryCtrl(TestDataAnnotationsQueryCtrl)\n  .addConfigPage({\n    title: 'Setup',\n    icon: 'list-ul',\n    body: TestInfoTab,\n    id: 'setup',\n  });\n"],"names":["interval","LiveTimer","now","oldOk","newOk","tr","listener","raw","v","from","to","getLiveTimerInterval","panel","FIVE_MINS","delta","width","millisPerPixel","liveTimer","DataQueryModelVersion","TestDataQueryType","defaultUSAQuery","defaultTestData","ConfigEditor","streamingClientFields","types","StreamingClientEditor","onChange","query","onSelectChange","value","onInputChange","e","name","InlineFieldRow","InlineField","Select","label","id","min","step","placeholder","Input","randomWalkFields","testSelectors","selectors","RandomWalkEditor","tooltip","selector","CSVContentEditor","onSaveCSV","csvContent","CodeEditor","CSVFileEditor","onChangeFileName","files","f","defaultPulseQuery","defaultCSVWaveQuery","defaultQuery","CSVWaveEditor","props","wave","last","index","onAdd","valuesCSV","setValuesCSV","labels","setLabels","setName","onAction","onValueChange","key","onKeyDown","evt","Button","CSVWavesEditor","waves","ERROR_OPTIONS","liveTestDataChannels","GrafanaLiveEditor","onChannelChange","NodeGraphEditor","type","options","o","item","fields","PredictablePulseEditor","RawFrameEditor","error","setError","warning","setWarning","onSaveFrames","rawFrameContent","json","data","Alert","renderInput","field","config","newValue","getStyles","theme","SimulationSchemaForm","schema","jsonView","setJsonView","styles","onUpdateTextArea","event","element","FieldSet","TextArea","SimulationQueryEditor","ds","simQuery","simKey","cfgValue","setCfgValue","info","useAsync","s","current","path","onUpdateKey","onUIDChanged","onTickChanged","tick","onTypeChange","onToggleStream","onToggleLast","onSchemaFormChange","res","Label","USAQueryEditor","usaQueryModes","ep","fieldNames","vals","stateNames","getRandomLogLevel","getNextWord","words","getRandomLine","length","line","defaultStreamQuery","runStream","target","req","runSignalStream","runLogsStream","runFetchStream","Observable","subscriber","streamId","maxDataPoints","spread","speed","bands","noise","i","suffix","frame","StreamingDataFrame","timeoutId","lastSent","addNextRow","time","max","pushNextEvent","CircularDataFrame","reader","csv","row","processChunk","text","response","showLabelsFor","endpoints","QueryEditor","datasource","onRunQuery","loading","scenarioList","point","hideAlias","onUpdate","currentScenario","scenario","scenarioId","description","onScenarioChange","sc","update","onFieldChange","onEndPointChange","onStreamClientChange","onPulseWaveChange","onUSAStatsChange","usa","onCSVWaveChange","csvWave","a","b","showLabels","val","ErrorEditor","TestInfoTab","buildMetricTree","parent","depth","chars","children","letter","nodeName","queryTree","queryIndex","nodeQuery","result","namesToMatch","node","nameToMatch","pattern","queryMetricTree","nodes","edges","generateRandomNodes","count","root","nodesWithoutMaxEdges","maxEdges","makeRandomNode","sourceIndex","source","additionalEdges","targetIndex","nodeFields","ArrayVector","nodeFrame","MutableDataFrame","edgesFrame","edgesSet","rnd","edge","success","savedNodesResponse","generateRandomEdges","flameGraphData","TestDataVariableSupport","TestDataDataSource","DataSourceWithBackend","instanceSettings","templateSrv","backendQueries","streams","runGrafanaLiveQuery","runGrafanaAPI","backendOpts","of","merge","scopedVars","events","dataFrame","ArrayDataFrame","delay","range","timeWalker","interpolatedQuery","items","frames","numberOfSpans","spanIdPrefix","start","ex","errorType","throwError","url","liveQueryCounter","TestDataAnnotationsQueryCtrl"],"sourceRoot":""}