{"version":3,"file":"timeseriesPanel.ac61c60b21097a7e8bf0.js","mappings":"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","sources":["webpack://grafana/./public/app/plugins/panel/timeseries/suggestions.ts","webpack://grafana/./public/app/plugins/panel/timeseries/TimeSeriesPanel.tsx","webpack://grafana/./public/app/plugins/panel/timeseries/TimezonesEditor.tsx","webpack://grafana/./public/app/plugins/panel/timeseries/migrations.ts","webpack://grafana/./public/app/plugins/panel/timeseries/module.tsx"],"sourcesContent":["import {\n  FieldColorModeId,\n  VisualizationSuggestionsBuilder,\n  VisualizationSuggestion,\n  DataTransformerID,\n} from '@grafana/data';\nimport {\n  GraphDrawStyle,\n  GraphFieldConfig,\n  GraphGradientMode,\n  LegendDisplayMode,\n  LineInterpolation,\n  StackingMode,\n} from '@grafana/schema';\nimport { getDashboardSrv } from 'app/features/dashboard/services/DashboardSrv';\nimport { SuggestionName } from 'app/types/suggestions';\n\nimport { Options } from './panelcfg.gen';\n\nexport class TimeSeriesSuggestionsSupplier {\n  getSuggestionsForData(builder: VisualizationSuggestionsBuilder) {\n    const { dataSummary } = builder;\n\n    if (!dataSummary.hasTimeField || !dataSummary.hasNumberField || dataSummary.rowCountTotal < 2) {\n      return;\n    }\n\n    const list = builder.getListAppender<Options, GraphFieldConfig>({\n      name: SuggestionName.LineChart,\n      pluginId: 'timeseries',\n      options: {\n        legend: {\n          calcs: [],\n          displayMode: LegendDisplayMode.Hidden,\n          placement: 'right',\n          showLegend: false,\n        },\n      },\n      fieldConfig: {\n        defaults: {\n          custom: {},\n        },\n        overrides: [],\n      },\n      cardOptions: {\n        previewModifier: (s) => {\n          if (s.fieldConfig?.defaults.custom?.drawStyle !== GraphDrawStyle.Bars) {\n            s.fieldConfig!.defaults.custom!.lineWidth = Math.max(s.fieldConfig!.defaults.custom!.lineWidth ?? 1, 2);\n          }\n        },\n      },\n    });\n\n    const maxBarsCount = 100;\n\n    list.append({\n      name: SuggestionName.LineChart,\n    });\n\n    if (dataSummary.rowCountMax < 200) {\n      list.append({\n        name: SuggestionName.LineChartSmooth,\n        fieldConfig: {\n          defaults: {\n            custom: {\n              lineInterpolation: LineInterpolation.Smooth,\n            },\n          },\n          overrides: [],\n        },\n      });\n    }\n\n    // Single series suggestions\n    if (dataSummary.numberFieldCount === 1) {\n      list.append({\n        name: SuggestionName.AreaChart,\n        fieldConfig: {\n          defaults: {\n            custom: {\n              fillOpacity: 25,\n            },\n          },\n          overrides: [],\n        },\n      });\n\n      list.append({\n        name: SuggestionName.LineChartGradientColorScheme,\n        fieldConfig: {\n          defaults: {\n            color: {\n              mode: FieldColorModeId.ContinuousGrYlRd,\n            },\n            custom: {\n              gradientMode: GraphGradientMode.Scheme,\n              lineInterpolation: LineInterpolation.Smooth,\n              lineWidth: 3,\n              fillOpacity: 20,\n            },\n          },\n          overrides: [],\n        },\n      });\n\n      if (dataSummary.rowCountMax < maxBarsCount) {\n        list.append({\n          name: SuggestionName.BarChart,\n          fieldConfig: {\n            defaults: {\n              custom: {\n                drawStyle: GraphDrawStyle.Bars,\n                fillOpacity: 100,\n                lineWidth: 1,\n                gradientMode: GraphGradientMode.Hue,\n              },\n            },\n            overrides: [],\n          },\n        });\n\n        list.append({\n          name: SuggestionName.BarChartGradientColorScheme,\n          fieldConfig: {\n            defaults: {\n              color: {\n                mode: FieldColorModeId.ContinuousGrYlRd,\n              },\n              custom: {\n                drawStyle: GraphDrawStyle.Bars,\n                fillOpacity: 90,\n                lineWidth: 1,\n                gradientMode: GraphGradientMode.Scheme,\n              },\n            },\n            overrides: [],\n          },\n        });\n      }\n\n      return;\n    }\n\n    // Multiple series suggestions\n\n    list.append({\n      name: SuggestionName.AreaChartStacked,\n      fieldConfig: {\n        defaults: {\n          custom: {\n            fillOpacity: 25,\n            stacking: {\n              mode: StackingMode.Normal,\n              group: 'A',\n            },\n          },\n        },\n        overrides: [],\n      },\n    });\n\n    list.append({\n      name: SuggestionName.AreaChartStackedPercent,\n      fieldConfig: {\n        defaults: {\n          custom: {\n            fillOpacity: 25,\n            stacking: {\n              mode: StackingMode.Percent,\n              group: 'A',\n            },\n          },\n        },\n        overrides: [],\n      },\n    });\n\n    if (dataSummary.rowCountTotal / dataSummary.numberFieldCount < maxBarsCount) {\n      list.append({\n        name: SuggestionName.BarChartStacked,\n        fieldConfig: {\n          defaults: {\n            custom: {\n              drawStyle: GraphDrawStyle.Bars,\n              fillOpacity: 100,\n              lineWidth: 1,\n              gradientMode: GraphGradientMode.Hue,\n              stacking: {\n                mode: StackingMode.Normal,\n                group: 'A',\n              },\n            },\n          },\n          overrides: [],\n        },\n      });\n\n      list.append({\n        name: SuggestionName.BarChartStackedPercent,\n        fieldConfig: {\n          defaults: {\n            custom: {\n              drawStyle: GraphDrawStyle.Bars,\n              fillOpacity: 100,\n              lineWidth: 1,\n              gradientMode: GraphGradientMode.Hue,\n              stacking: {\n                mode: StackingMode.Percent,\n                group: 'A',\n              },\n            },\n          },\n          overrides: [],\n        },\n      });\n    }\n  }\n}\n\n// This will try to get a suggestion that will add a long to wide conversion\nexport function getPrepareTimeseriesSuggestion(panelId: number): VisualizationSuggestion | undefined {\n  const panel = getDashboardSrv().getCurrent()?.getPanelById(panelId);\n  if (panel) {\n    const transformations = panel.transformations ? [...panel.transformations] : [];\n    transformations.push({\n      id: DataTransformerID.prepareTimeSeries,\n      options: {\n        format: 'wide',\n      },\n    });\n\n    return {\n      name: 'Transform to wide time series format',\n      pluginId: 'timeseries',\n      transformations,\n    };\n  }\n  return undefined;\n}\n","import { useMemo, useState } from 'react';\n\nimport { PanelProps, DataFrameType, DashboardCursorSync } from '@grafana/data';\nimport { PanelDataErrorView } from '@grafana/runtime';\nimport { TooltipDisplayMode, VizOrientation } from '@grafana/schema';\nimport { EventBusPlugin, KeyboardPlugin, TooltipPlugin2, usePanelContext } from '@grafana/ui';\nimport { TimeRange2, TooltipHoverMode } from '@grafana/ui/src/components/uPlot/plugins/TooltipPlugin2';\nimport { TimeSeries } from 'app/core/components/TimeSeries/TimeSeries';\nimport { config } from 'app/core/config';\n\nimport { TimeSeriesTooltip } from './TimeSeriesTooltip';\nimport { Options } from './panelcfg.gen';\nimport { AnnotationsPlugin2 } from './plugins/AnnotationsPlugin2';\nimport { ExemplarsPlugin, getVisibleLabels } from './plugins/ExemplarsPlugin';\nimport { OutsideRangePlugin } from './plugins/OutsideRangePlugin';\nimport { ThresholdControlsPlugin } from './plugins/ThresholdControlsPlugin';\nimport { getPrepareTimeseriesSuggestion } from './suggestions';\nimport { getTimezones, prepareGraphableFields } from './utils';\n\ninterface TimeSeriesPanelProps extends PanelProps<Options> {}\n\nexport const TimeSeriesPanel = ({\n  data,\n  timeRange,\n  timeZone,\n  width,\n  height,\n  options,\n  fieldConfig,\n  onChangeTimeRange,\n  replaceVariables,\n  id,\n}: TimeSeriesPanelProps) => {\n  const {\n    sync,\n    eventsScope,\n    canAddAnnotations,\n    onThresholdsChange,\n    canEditThresholds,\n    showThresholds,\n    dataLinkPostProcessor,\n    eventBus,\n  } = usePanelContext();\n  // Vertical orientation is not available for users through config.\n  // It is simplified version of horizontal time series panel and it does not support all plugins.\n  const isVerticallyOriented = options.orientation === VizOrientation.Vertical;\n  const frames = useMemo(() => prepareGraphableFields(data.series, config.theme2, timeRange), [data.series, timeRange]);\n  const timezones = useMemo(() => getTimezones(options.timezone, timeZone), [options.timezone, timeZone]);\n  const suggestions = useMemo(() => {\n    if (frames?.length && frames.every((df) => df.meta?.type === DataFrameType.TimeSeriesLong)) {\n      const s = getPrepareTimeseriesSuggestion(id);\n      return {\n        message: 'Long data must be converted to wide',\n        suggestions: s ? [s] : undefined,\n      };\n    }\n    return undefined;\n  }, [frames, id]);\n\n  const enableAnnotationCreation = Boolean(canAddAnnotations && canAddAnnotations());\n  const [newAnnotationRange, setNewAnnotationRange] = useState<TimeRange2 | null>(null);\n  const cursorSync = sync?.() ?? DashboardCursorSync.Off;\n\n  if (!frames || suggestions) {\n    return (\n      <PanelDataErrorView\n        panelId={id}\n        message={suggestions?.message}\n        fieldConfig={fieldConfig}\n        data={data}\n        needsTimeField={true}\n        needsNumberField={true}\n        suggestions={suggestions?.suggestions}\n      />\n    );\n  }\n\n  return (\n    <TimeSeries\n      frames={frames}\n      structureRev={data.structureRev}\n      timeRange={timeRange}\n      timeZone={timezones}\n      width={width}\n      height={height}\n      legend={options.legend}\n      options={options}\n      replaceVariables={replaceVariables}\n      dataLinkPostProcessor={dataLinkPostProcessor}\n      cursorSync={cursorSync}\n    >\n      {(uplotConfig, alignedFrame) => {\n        return (\n          <>\n            <KeyboardPlugin config={uplotConfig} />\n            {cursorSync !== DashboardCursorSync.Off && (\n              <EventBusPlugin config={uplotConfig} eventBus={eventBus} frame={alignedFrame} />\n            )}\n            {options.tooltip.mode !== TooltipDisplayMode.None && (\n              <TooltipPlugin2\n                config={uplotConfig}\n                hoverMode={\n                  options.tooltip.mode === TooltipDisplayMode.Single ? TooltipHoverMode.xOne : TooltipHoverMode.xAll\n                }\n                queryZoom={onChangeTimeRange}\n                clientZoom={true}\n                syncMode={cursorSync}\n                syncScope={eventsScope}\n                render={(u, dataIdxs, seriesIdx, isPinned = false, dismiss, timeRange2, viaSync) => {\n                  if (enableAnnotationCreation && timeRange2 != null) {\n                    setNewAnnotationRange(timeRange2);\n                    dismiss();\n                    return;\n                  }\n\n                  const annotate = () => {\n                    let xVal = u.posToVal(u.cursor.left!, 'x');\n\n                    setNewAnnotationRange({ from: xVal, to: xVal });\n                    dismiss();\n                  };\n\n                  return (\n                    // not sure it header time here works for annotations, since it's taken from nearest datapoint index\n                    <TimeSeriesTooltip\n                      series={alignedFrame}\n                      dataIdxs={dataIdxs}\n                      seriesIdx={seriesIdx}\n                      mode={viaSync ? TooltipDisplayMode.Multi : options.tooltip.mode}\n                      sortOrder={options.tooltip.sort}\n                      isPinned={isPinned}\n                      annotate={enableAnnotationCreation ? annotate : undefined}\n                      maxHeight={options.tooltip.maxHeight}\n                      replaceVariables={replaceVariables}\n                    />\n                  );\n                }}\n                maxWidth={options.tooltip.maxWidth}\n              />\n            )}\n            {!isVerticallyOriented && (\n              <>\n                <AnnotationsPlugin2\n                  annotations={data.annotations ?? []}\n                  config={uplotConfig}\n                  timeZone={timeZone}\n                  newRange={newAnnotationRange}\n                  setNewRange={setNewAnnotationRange}\n                />\n                <OutsideRangePlugin config={uplotConfig} onChangeTimeRange={onChangeTimeRange} />\n                {data.annotations && (\n                  <ExemplarsPlugin\n                    visibleSeries={getVisibleLabels(uplotConfig, frames)}\n                    config={uplotConfig}\n                    exemplars={data.annotations}\n                    timeZone={timeZone}\n                  />\n                )}\n                {((canEditThresholds && onThresholdsChange) || showThresholds) && (\n                  <ThresholdControlsPlugin\n                    config={uplotConfig}\n                    fieldConfig={fieldConfig}\n                    onThresholdsChange={canEditThresholds ? onThresholdsChange : undefined}\n                  />\n                )}\n              </>\n            )}\n          </>\n        );\n      }}\n    </TimeSeries>\n  );\n};\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2, InternalTimeZones, StandardEditorProps } from '@grafana/data';\nimport { OptionsWithTimezones } from '@grafana/schema';\nimport { IconButton, TimeZonePicker, useStyles2 } from '@grafana/ui';\n\ntype Props = StandardEditorProps<string[], unknown, OptionsWithTimezones>;\n\nexport const TimezonesEditor = ({ value, onChange }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  if (!value || value.length < 1) {\n    value = [''];\n  }\n\n  const addTimezone = () => {\n    onChange([...value, InternalTimeZones.default]);\n  };\n\n  const removeTimezone = (idx: number) => {\n    const copy = value.slice();\n    copy.splice(idx, 1);\n    onChange(copy);\n  };\n\n  const setTimezone = (idx: number, tz?: string) => {\n    const copy = value.slice();\n    copy[idx] = tz ?? InternalTimeZones.default;\n    if (copy.length === 0 || (copy.length === 1 && copy[0] === '')) {\n      onChange(undefined);\n    } else {\n      onChange(copy);\n    }\n  };\n\n  return (\n    <div>\n      {value.map((tz, idx) => (\n        <div className={styles.wrapper} key={`${idx}.${tz}`}>\n          <span className={styles.first}>\n            <TimeZonePicker\n              onChange={(v) => setTimezone(idx, v)}\n              includeInternal={true}\n              value={tz ?? InternalTimeZones.default}\n            />\n          </span>\n          {idx === value.length - 1 ? (\n            <IconButton name=\"plus\" onClick={addTimezone} tooltip=\"Add timezone\" />\n          ) : (\n            <IconButton name=\"times\" onClick={() => removeTimezone(idx)} tooltip=\"Remove timezone\" />\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    width: 100%;\n    display: flex;\n    flex-direction: rows;\n    align-items: center;\n  `,\n  first: css`\n    margin-right: 8px;\n    flex-grow: 2;\n  `,\n});\n","import { omitBy, pickBy, isNil, isNumber, isString } from 'lodash';\n\nimport {\n  ConfigOverrideRule,\n  DynamicConfigValue,\n  FieldColorModeId,\n  FieldConfig,\n  FieldConfigProperty,\n  FieldConfigSource,\n  FieldMatcherID,\n  fieldReducers,\n  FieldType,\n  NullValueMode,\n  PanelTypeChangedHandler,\n  ReducerID,\n  Threshold,\n  ThresholdsMode,\n} from '@grafana/data';\nimport {\n  LegendDisplayMode,\n  TooltipDisplayMode,\n  AxisPlacement,\n  GraphDrawStyle,\n  GraphFieldConfig,\n  GraphGradientMode,\n  GraphThresholdsStyleMode,\n  LineInterpolation,\n  LineStyle,\n  VisibilityMode,\n  ScaleDistribution,\n  StackingMode,\n  SortOrder,\n  GraphTransform,\n  AnnotationQuery,\n  ComparisonOperation,\n} from '@grafana/schema';\nimport { TimeRegionConfig } from 'app/core/utils/timeRegions';\nimport { getDashboardSrv } from 'app/features/dashboard/services/DashboardSrv';\nimport { getTimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { DashboardAnnotationsDataLayer } from 'app/features/dashboard-scene/scene/DashboardAnnotationsDataLayer';\nimport { DashboardScene } from 'app/features/dashboard-scene/scene/DashboardScene';\nimport { dashboardSceneGraph } from 'app/features/dashboard-scene/utils/dashboardSceneGraph';\nimport { GrafanaQuery, GrafanaQueryType } from 'app/plugins/datasource/grafana/types';\n\nimport { defaultGraphConfig } from './config';\nimport { Options } from './panelcfg.gen';\n\nlet dashboardRefreshDebouncer: ReturnType<typeof setTimeout> | null = null;\n\n/**\n * This is called when the panel changes from another panel\n */\nexport const graphPanelChangedHandler: PanelTypeChangedHandler = (\n  panel,\n  prevPluginId,\n  prevOptions,\n  prevFieldConfig\n) => {\n  // Changing from angular/flot panel to react/uPlot\n  if (prevPluginId === 'graph' && prevOptions.angular) {\n    const { fieldConfig, options, annotations } = graphToTimeseriesOptions({\n      ...prevOptions.angular,\n      fieldConfig: prevFieldConfig,\n      panel: panel,\n    });\n\n    if (annotations?.length > 0) {\n      addAnnotationsToDashboard(annotations);\n    }\n\n    panel.fieldConfig = fieldConfig; // Mutates the incoming panel\n    panel.alert = prevOptions.angular.alert;\n    return options;\n  }\n\n  //fixes graph -> viz renaming in custom.hideFrom field config by mutation.\n  migrateHideFrom(panel);\n\n  return {};\n};\n\nexport function graphToTimeseriesOptions(angular: any): {\n  fieldConfig: FieldConfigSource;\n  options: Options;\n  annotations: AnnotationQuery[];\n} {\n  let annotations: AnnotationQuery[] = [];\n\n  const overrides: ConfigOverrideRule[] = angular.fieldConfig?.overrides ?? [];\n  const yaxes = angular.yaxes ?? [];\n  let y1 = getFieldConfigFromOldAxis(yaxes[0]);\n  if (angular.fieldConfig?.defaults) {\n    y1 = {\n      ...angular.fieldConfig?.defaults,\n      ...y1, // Keep the y-axis unit and custom\n    };\n  }\n\n  // Dashes\n  const dash: LineStyle = {\n    fill: angular.dashes ? 'dash' : 'solid',\n    dash: [angular.dashLength ?? 10, angular.spaceLength ?? 10],\n  };\n\n  // \"seriesOverrides\": [\n  //   {\n  //     \"$$hashKey\": \"object:183\",\n  //     \"alias\": \"B-series\",\n  //     \"fill\": 3,\n  //     \"nullPointMode\": \"null as zero\",\n  //     \"lines\": true,\n  //     \"linewidth\": 2\n  //   }\n  // ],\n\n  if (angular.aliasColors) {\n    for (const alias of Object.keys(angular.aliasColors)) {\n      const color = angular.aliasColors[alias];\n      if (color) {\n        overrides.push({\n          matcher: {\n            id: FieldMatcherID.byName,\n            options: alias,\n          },\n          properties: [\n            {\n              id: FieldConfigProperty.Color,\n              value: {\n                mode: FieldColorModeId.Fixed,\n                fixedColor: color,\n              },\n            },\n          ],\n        });\n      }\n    }\n  }\n\n  let hasFillBelowTo = false;\n\n  if (angular.seriesOverrides?.length) {\n    for (const seriesOverride of angular.seriesOverrides) {\n      if (!seriesOverride.alias) {\n        continue; // the matcher config\n      }\n      const aliasIsRegex = /^([/~@;%#'])(.*?)\\1([gimsuy]*)$/.test(seriesOverride.alias);\n      const rule: ConfigOverrideRule = {\n        matcher: {\n          id: aliasIsRegex ? FieldMatcherID.byRegexp : FieldMatcherID.byName,\n          options: seriesOverride.alias,\n        },\n        properties: [],\n      };\n      let dashOverride: LineStyle | undefined = undefined;\n\n      for (const p of Object.keys(seriesOverride)) {\n        const v = seriesOverride[p];\n        switch (p) {\n          // Ignore\n          case 'alias':\n          case '$$hashKey':\n            break;\n          // Link to y axis settings\n          case 'yaxis':\n            if (2 === v) {\n              const y2 = getFieldConfigFromOldAxis(yaxes[1]);\n              fillY2DynamicValues(y1, y2, rule.properties);\n            }\n            break;\n          case 'fill':\n            rule.properties.push({\n              id: 'custom.fillOpacity',\n              value: v * 10, // was 0-10, new graph is 0 - 100\n            });\n            break;\n          case 'fillBelowTo':\n            hasFillBelowTo = true;\n            rule.properties.push({\n              id: 'custom.fillBelowTo',\n              value: v,\n            });\n            break;\n          case 'fillGradient':\n            if (v) {\n              rule.properties.push({\n                id: 'custom.fillGradient',\n                value: 'opacity', // was 0-10\n              });\n              rule.properties.push({\n                id: 'custom.fillOpacity',\n                value: v * 10, // was 0-10, new graph is 0 - 100\n              });\n            }\n            break;\n          case 'points':\n            rule.properties.push({\n              id: 'custom.showPoints',\n              value: v ? VisibilityMode.Always : VisibilityMode.Never,\n            });\n            break;\n          case 'bars':\n            if (v) {\n              rule.properties.push({\n                id: 'custom.drawStyle',\n                value: GraphDrawStyle.Bars,\n              });\n              rule.properties.push({\n                id: 'custom.fillOpacity',\n                value: 100, // solid bars\n              });\n            } else {\n              rule.properties.push({\n                id: 'custom.drawStyle',\n                value: GraphDrawStyle.Line, // Change from bars\n              });\n            }\n            break;\n          case 'lines':\n            if (v) {\n              rule.properties.push({\n                id: 'custom.drawStyle',\n                value: 'line',\n              });\n            } else {\n              rule.properties.push({\n                id: 'custom.lineWidth',\n                value: 0,\n              });\n            }\n            break;\n          case 'linewidth':\n            rule.properties.push({\n              id: 'custom.lineWidth',\n              value: v,\n            });\n            break;\n          case 'pointradius':\n            rule.properties.push({\n              id: 'custom.pointSize',\n              value: 2 + v * 2,\n            });\n            break;\n          case 'dashLength':\n          case 'spaceLength':\n          case 'dashes':\n            if (!dashOverride) {\n              dashOverride = {\n                fill: dash.fill,\n                dash: [...dash.dash!],\n              };\n            }\n            switch (p) {\n              case 'dashLength':\n                dashOverride.dash![0] = v;\n                break;\n              case 'spaceLength':\n                dashOverride.dash![1] = v;\n                break;\n              case 'dashes':\n                dashOverride.fill = v ? 'dash' : 'solid';\n                break;\n            }\n            break;\n          case 'stack':\n            rule.properties.push({\n              id: 'custom.stacking',\n              value: getStackingFromOverrides(v),\n            });\n            break;\n          case 'color':\n            rule.properties.push({\n              id: 'color',\n              value: {\n                fixedColor: v,\n                mode: FieldColorModeId.Fixed,\n              },\n            });\n            break;\n          case 'transform':\n            rule.properties.push({\n              id: 'custom.transform',\n              value: v === 'negative-Y' ? GraphTransform.NegativeY : GraphTransform.Constant,\n            });\n            break;\n          default:\n            console.log('Ignore override migration:', seriesOverride.alias, p, v);\n        }\n      }\n      if (dashOverride) {\n        rule.properties.push({\n          id: 'custom.lineStyle',\n          value: dashOverride,\n        });\n      }\n      if (rule.properties.length) {\n        overrides.push(rule);\n      }\n    }\n  }\n\n  const graph: GraphFieldConfig = y1.custom ?? {};\n  graph.drawStyle = angular.bars ? GraphDrawStyle.Bars : angular.lines ? GraphDrawStyle.Line : GraphDrawStyle.Points;\n\n  if (angular.points) {\n    graph.showPoints = VisibilityMode.Always;\n\n    if (isNumber(angular.pointradius)) {\n      graph.pointSize = 2 + angular.pointradius * 2;\n    }\n  } else if (graph.drawStyle !== GraphDrawStyle.Points) {\n    graph.showPoints = VisibilityMode.Never;\n  }\n\n  graph.lineWidth = angular.linewidth;\n  if (dash.fill !== 'solid') {\n    graph.lineStyle = dash;\n  }\n\n  if (hasFillBelowTo) {\n    graph.fillOpacity = 35; // bands are hardcoded in flot\n  } else if (isNumber(angular.fill)) {\n    graph.fillOpacity = angular.fill * 10; // fill was 0 - 10, new is 0 to 100\n  }\n\n  if (isNumber(angular.fillGradient) && angular.fillGradient > 0) {\n    graph.gradientMode = GraphGradientMode.Opacity;\n    graph.fillOpacity = angular.fillGradient * 10; // fill is 0-10\n  }\n\n  graph.spanNulls = angular.nullPointMode === NullValueMode.Ignore;\n\n  if (angular.steppedLine) {\n    graph.lineInterpolation = LineInterpolation.StepAfter;\n  }\n\n  if (graph.drawStyle === GraphDrawStyle.Bars) {\n    graph.fillOpacity = 100; // bars were always\n  }\n\n  if (angular.stack) {\n    graph.stacking = {\n      mode: angular.percentage ? StackingMode.Percent : StackingMode.Normal,\n      group: defaultGraphConfig.stacking!.group,\n    };\n\n    if (angular.percentage) {\n      if (angular.yaxis) {\n        delete y1.min;\n        delete y1.max;\n\n        // TimeSeries currently uses 0-1 for percent, so allowing zero leaves only top and bottom ticks.\n        // removing it feels better. probably should fix in TimeSeries, but let's kick it down the road\n        if (y1.decimals === 0) {\n          delete y1.decimals;\n        }\n      }\n    }\n  }\n\n  y1.custom = omitBy(graph, isNil);\n  y1.nullValueMode = angular.nullPointMode;\n\n  const options: Options = {\n    legend: {\n      displayMode: LegendDisplayMode.List,\n      showLegend: true,\n      placement: 'bottom',\n      calcs: [],\n    },\n    tooltip: {\n      mode: TooltipDisplayMode.Single,\n      sort: SortOrder.None,\n    },\n  };\n\n  // Legend config migration\n  const legendConfig = angular.legend;\n  if (legendConfig) {\n    if (legendConfig.show) {\n      options.legend.displayMode = legendConfig.alignAsTable ? LegendDisplayMode.Table : LegendDisplayMode.List;\n    } else {\n      options.legend.showLegend = false;\n    }\n\n    if (legendConfig.rightSide) {\n      options.legend.placement = 'right';\n    }\n\n    if (angular.legend.values) {\n      const enabledLegendValues = pickBy(angular.legend);\n      options.legend.calcs = getReducersFromLegend(enabledLegendValues);\n    }\n\n    if (angular.legend.sideWidth) {\n      options.legend.width = angular.legend.sideWidth;\n    }\n\n    if (legendConfig.hideZero) {\n      overrides.push(getLegendHideFromOverride(ReducerID.allIsZero));\n    }\n\n    if (legendConfig.hideEmpty) {\n      overrides.push(getLegendHideFromOverride(ReducerID.allIsNull));\n    }\n  }\n\n  // timeRegions migration\n  if (angular.timeRegions?.length) {\n    let regions = angular.timeRegions.map((old: GraphTimeRegionConfig, idx: number) => ({\n      name: `T${idx}`,\n      color: old.colorMode !== 'custom' ? old.colorMode : old.fillColor,\n      line: old.line,\n      fill: old.fill,\n      fromDayOfWeek: old.fromDayOfWeek,\n      toDayOfWeek: old.toDayOfWeek,\n      from: old.from,\n      to: old.to,\n    }));\n\n    regions.forEach((region: GraphTimeRegionConfig, idx: number) => {\n      const anno: AnnotationQuery<GrafanaQuery> = {\n        datasource: {\n          type: 'datasource',\n          uid: 'grafana',\n        },\n        enable: true,\n        hide: true, // don't show the toggle at the top of the dashboard\n        filter: {\n          exclude: false,\n          ids: [angular.panel.id],\n        },\n        iconColor: region.fillColor ?? (region as any).color,\n        name: `Time region for panel ${angular.panel.title}${idx > 0 ? ` ${idx}` : ''}`,\n        target: {\n          queryType: GrafanaQueryType.TimeRegions,\n          refId: 'Anno',\n          timeRegion: {\n            fromDayOfWeek: region.fromDayOfWeek,\n            toDayOfWeek: region.toDayOfWeek,\n            from: region.from,\n            to: region.to,\n            timezone: 'utc', // graph panel was always UTC\n          },\n        },\n      };\n\n      if (region.fill) {\n        annotations.push(anno);\n      } else if (region.line) {\n        anno.iconColor = region.lineColor ?? 'white';\n        annotations.push(anno);\n      }\n    });\n  }\n\n  const tooltipConfig = angular.tooltip;\n  if (tooltipConfig) {\n    if (tooltipConfig.shared !== undefined) {\n      options.tooltip.mode = tooltipConfig.shared ? TooltipDisplayMode.Multi : TooltipDisplayMode.Single;\n    }\n\n    if (tooltipConfig.sort !== undefined && tooltipConfig.shared) {\n      switch (tooltipConfig.sort) {\n        case 1:\n          options.tooltip.sort = SortOrder.Ascending;\n          break;\n        case 2:\n          options.tooltip.sort = SortOrder.Descending;\n          break;\n        default:\n          options.tooltip.sort = SortOrder.None;\n      }\n    }\n  }\n\n  if (angular.thresholds && angular.thresholds.length > 0) {\n    let steps: Threshold[] = [];\n    let area = false;\n    let line = false;\n\n    const sorted = (angular.thresholds as AngularThreshold[]).sort((a, b) => (a.value > b.value ? 1 : -1));\n\n    for (let idx = 0; idx < sorted.length; idx++) {\n      const threshold = sorted[idx];\n      const next = sorted.length > idx + 1 ? sorted[idx + 1] : null;\n\n      if (threshold.fill) {\n        area = true;\n      }\n\n      if (threshold.line) {\n        line = true;\n      }\n\n      if (threshold.op === 'gt') {\n        steps.push({\n          value: threshold.value,\n          color: getThresholdColor(threshold),\n        });\n      }\n\n      if (threshold.op === 'lt') {\n        if (steps.length === 0) {\n          steps.push({\n            value: -Infinity,\n            color: getThresholdColor(threshold),\n          });\n        }\n\n        // next op is gt and there is a gap set color to transparent\n        if (next && next.op === 'gt' && next.value > threshold.value) {\n          steps.push({\n            value: threshold.value,\n            color: 'transparent',\n          });\n          // if next is a lt we need to use its color\n        } else if (next && next.op === 'lt') {\n          steps.push({\n            value: threshold.value,\n            color: getThresholdColor(next),\n          });\n        } else {\n          steps.push({\n            value: threshold.value,\n            color: 'transparent',\n          });\n        }\n      }\n    }\n\n    // if now less then threshold add an -Infinity base that is transparent\n    if (steps.length > 0 && steps[0].value !== -Infinity) {\n      steps.unshift({\n        color: 'transparent',\n        value: -Infinity,\n      });\n    }\n\n    let displayMode = area ? GraphThresholdsStyleMode.Area : GraphThresholdsStyleMode.Line;\n    if (line && area) {\n      displayMode = GraphThresholdsStyleMode.LineAndArea;\n    }\n\n    // TODO move into standard ThresholdConfig ?\n    y1.custom.thresholdsStyle = { mode: displayMode };\n\n    y1.thresholds = {\n      mode: ThresholdsMode.Absolute,\n      steps,\n    };\n  }\n\n  if (angular.xaxis && angular.xaxis.show === false && angular.xaxis.mode === 'time') {\n    overrides.push({\n      matcher: {\n        id: FieldMatcherID.byType,\n        options: FieldType.time,\n      },\n      properties: [\n        {\n          id: 'custom.axisPlacement',\n          value: AxisPlacement.Hidden,\n        },\n      ],\n    });\n  }\n  return {\n    fieldConfig: {\n      defaults: omitBy(y1, isNil),\n      overrides,\n    },\n    options,\n    annotations,\n  };\n}\n\ninterface GraphTimeRegionConfig extends TimeRegionConfig {\n  colorMode: string;\n  fill: boolean;\n  fillColor: string;\n  line: boolean;\n  lineColor: string;\n}\n\nfunction getThresholdColor(threshold: AngularThreshold): string {\n  if (threshold.colorMode === 'critical') {\n    return 'red';\n  }\n\n  if (threshold.colorMode === 'warning') {\n    return 'orange';\n  }\n\n  if (threshold.colorMode === 'custom') {\n    return threshold.fillColor || threshold.lineColor;\n  }\n\n  return 'red';\n}\n\ninterface AngularThreshold {\n  op: string;\n  fill: boolean;\n  line: boolean;\n  value: number;\n  colorMode: 'critical' | 'warning' | 'custom';\n  yaxis?: 'left' | 'right';\n  fillColor: string;\n  lineColor: string;\n}\n\n// {\n//   \"label\": \"Y111\",\n//   \"show\": true,\n//   \"logBase\": 10,\n//   \"min\": \"0\",\n//   \"max\": \"1000\",\n//   \"format\": \"areaMI2\",\n//   \"$$hashKey\": \"object:19\",\n//   \"decimals\": 3\n// },\nfunction getFieldConfigFromOldAxis(obj: any): FieldConfig<GraphFieldConfig> {\n  if (!obj) {\n    return {};\n  }\n  const graph: GraphFieldConfig = {\n    axisPlacement: obj.show ? AxisPlacement.Auto : AxisPlacement.Hidden,\n  };\n  if (obj.label) {\n    graph.axisLabel = obj.label;\n  }\n  if (obj.logBase) {\n    const log: number = obj.logBase;\n    if (log === 2 || log === 10) {\n      graph.scaleDistribution = {\n        type: ScaleDistribution.Log,\n        log,\n      };\n    }\n  }\n  return omitBy(\n    {\n      unit: obj.format,\n      decimals: validNumber(obj.decimals),\n      min: validNumber(obj.min),\n      max: validNumber(obj.max),\n      custom: graph,\n    },\n    isNil\n  );\n}\n\nfunction fillY2DynamicValues(\n  y1: FieldConfig<GraphFieldConfig>,\n  y2: FieldConfig<GraphFieldConfig>,\n  props: DynamicConfigValue[]\n) {\n  // The standard properties\n  for (const [key, value] of Object.entries(y2)) {\n    if (key !== 'custom' && value !== (y1 as any)[key]) {\n      props.push({\n        id: key,\n        value,\n      });\n    }\n  }\n\n  props.push({\n    id: `custom.axisPlacement`,\n    value: AxisPlacement.Right,\n  });\n\n  // Add any custom property\n  const y1G = y1.custom ?? {};\n  const y2G = y2.custom ?? {};\n  for (const [key, value] of Object.entries(y2G)) {\n    if (value !== (y1G as any)[key]) {\n      props.push({\n        id: `custom.${key}`,\n        value,\n      });\n    }\n  }\n}\n\nfunction validNumber(val: unknown): number | undefined {\n  if (isNumber(val)) {\n    return val;\n  }\n  if (isString(val)) {\n    const num = Number(val);\n    if (!isNaN(num)) {\n      return num;\n    }\n  }\n  return undefined;\n}\n\nfunction getReducersFromLegend(obj: Record<string, unknown>): string[] {\n  const ids: string[] = [];\n  for (const key in obj) {\n    const r = fieldReducers.getIfExists(key);\n    if (r) {\n      ids.push(r.id);\n    }\n  }\n  return ids;\n}\n\nfunction migrateHideFrom(panel: {\n  fieldConfig?: { defaults?: { custom?: { hideFrom?: any } }; overrides: ConfigOverrideRule[] };\n}) {\n  if (panel.fieldConfig?.defaults?.custom?.hideFrom?.graph !== undefined) {\n    panel.fieldConfig.defaults.custom.hideFrom.viz = panel.fieldConfig.defaults.custom.hideFrom.graph;\n    delete panel.fieldConfig.defaults.custom.hideFrom.graph;\n  }\n  if (panel.fieldConfig?.overrides) {\n    panel.fieldConfig.overrides = panel.fieldConfig.overrides.map((fr) => {\n      fr.properties = fr.properties.map((p) => {\n        if (p.id === 'custom.hideFrom' && p.value.graph) {\n          p.value.viz = p.value.graph;\n          delete p.value.graph;\n        }\n        return p;\n      });\n      return fr;\n    });\n  }\n}\n\nfunction getLegendHideFromOverride(reducer: ReducerID.allIsZero | ReducerID.allIsNull) {\n  return {\n    matcher: {\n      id: FieldMatcherID.byValue,\n      options: {\n        reducer: reducer,\n        op: ComparisonOperation.GTE,\n        value: 0,\n      },\n    },\n    properties: [\n      {\n        id: 'custom.hideFrom',\n        value: {\n          tooltip: true,\n          viz: false,\n          legend: true,\n        },\n      },\n    ],\n  };\n}\n\nfunction getStackingFromOverrides(value: Boolean | string) {\n  const defaultGroupName = defaultGraphConfig.stacking?.group;\n  return {\n    mode: value ? StackingMode.Normal : StackingMode.None,\n    group: isString(value) ? value : defaultGroupName,\n  };\n}\n\nfunction addAnnotationsToDashboard(annotations: AnnotationQuery[]) {\n  const scene = window.__grafanaSceneContext;\n\n  if (scene instanceof DashboardScene) {\n    const dataLayers = dashboardSceneGraph.getDataLayers(scene);\n    const annotationLayers = [...dataLayers.state.annotationLayers];\n\n    for (let annotation of annotations) {\n      const newAnnotation = new DashboardAnnotationsDataLayer({\n        key: `annotations-${annotation.name}`,\n        query: annotation,\n        name: annotation.name,\n        isEnabled: annotation.enable,\n        isHidden: annotation.hide,\n      });\n\n      annotationLayers.push(newAnnotation);\n    }\n\n    dataLayers.setState({ annotationLayers });\n    return;\n  }\n\n  const dashboard = getDashboardSrv().getCurrent();\n  if (dashboard) {\n    dashboard.annotations.list = [...dashboard.annotations.list, ...annotations];\n\n    // Trigger a full dashboard refresh when annotations change\n    if (dashboardRefreshDebouncer == null) {\n      dashboardRefreshDebouncer = setTimeout(() => {\n        dashboardRefreshDebouncer = null;\n        getTimeSrv().refreshTimeModel();\n      });\n    }\n  }\n}\n","import { PanelPlugin } from '@grafana/data';\nimport { commonOptionsBuilder } from '@grafana/ui';\n\nimport { TimeSeriesPanel } from './TimeSeriesPanel';\nimport { TimezonesEditor } from './TimezonesEditor';\nimport { defaultGraphConfig, getGraphFieldConfig } from './config';\nimport { graphPanelChangedHandler } from './migrations';\nimport { FieldConfig, Options } from './panelcfg.gen';\nimport { TimeSeriesSuggestionsSupplier } from './suggestions';\n\nexport const plugin = new PanelPlugin<Options, FieldConfig>(TimeSeriesPanel)\n  .setPanelChangeHandler(graphPanelChangedHandler)\n  .useFieldConfig(getGraphFieldConfig(defaultGraphConfig))\n  .setPanelOptions((builder) => {\n    commonOptionsBuilder.addTooltipOptions(builder, false, true);\n    commonOptionsBuilder.addLegendOptions(builder);\n\n    builder.addCustomEditor({\n      id: 'timezone',\n      name: 'Time zone',\n      path: 'timezone',\n      category: ['Axis'],\n      editor: TimezonesEditor,\n      defaultValue: undefined,\n    });\n  })\n  .setSuggestionsSupplier(new TimeSeriesSuggestionsSupplier())\n  .setDataSupport({ annotations: true, alertStates: true });\n"],"names":["TimeSeriesSuggestionsSupplier","builder","dataSummary","list","s","maxBarsCount","getPrepareTimeseriesSuggestion","panelId","panel","transformations","TimeSeriesPanel","data","timeRange","timeZone","width","height","options","fieldConfig","onChangeTimeRange","replaceVariables","id","sync","eventsScope","canAddAnnotations","onThresholdsChange","canEditThresholds","showThresholds","dataLinkPostProcessor","eventBus","isVerticallyOriented","frames","config","timezones","suggestions","df","enableAnnotationCreation","newAnnotationRange","setNewAnnotationRange","cursorSync","PanelDataErrorView","TimeSeries","uplotConfig","alignedFrame","KeyboardPlugin","EventBusPlugin","TooltipPlugin2","u","dataIdxs","seriesIdx","isPinned","dismiss","timeRange2","viaSync","annotate","xVal","TimeSeriesTooltip","AnnotationsPlugin2","OutsideRangePlugin","ExemplarsPlugin","ThresholdControlsPlugin","TimezonesEditor","value","onChange","styles","getStyles","addTimezone","removeTimezone","idx","copy","setTimezone","tz","TimeZonePicker","v","IconButton","theme","dashboardRefreshDebouncer","graphPanelChangedHandler","prevPluginId","prevOptions","prevFieldConfig","annotations","graphToTimeseriesOptions","addAnnotationsToDashboard","migrateHideFrom","angular","overrides","yaxes","y1","getFieldConfigFromOldAxis","dash","alias","color","hasFillBelowTo","seriesOverride","rule","dashOverride","p","y2","fillY2DynamicValues","getStackingFromOverrides","graph","legendConfig","enabledLegendValues","getReducersFromLegend","getLegendHideFromOverride","old","region","anno","tooltipConfig","steps","area","line","sorted","a","b","threshold","next","getThresholdColor","displayMode","obj","log","validNumber","props","key","y1G","y2G","val","num","ids","r","fieldReducer","fr","reducer","defaultGroupName","scene","DashboardScene","dataLayers","dashboardSceneGraph","annotationLayers","annotation","newAnnotation","DashboardAnnotationsDataLayer","dashboard","PanelPlugin"],"sourceRoot":""}