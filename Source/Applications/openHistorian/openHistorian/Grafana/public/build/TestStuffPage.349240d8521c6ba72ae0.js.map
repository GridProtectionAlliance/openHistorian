{"version":3,"file":"TestStuffPage.349240d8521c6ba72ae0.js","mappings":"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","sources":["webpack://grafana/./public/app/features/query/components/QueryEditorRows.tsx","webpack://grafana/./public/app/features/sandbox/TestStuffPage.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport { DragDropContext, DragStart, Droppable, DropResult } from 'react-beautiful-dnd';\n\nimport {\n  CoreApp,\n  DataQuery,\n  DataSourceInstanceSettings,\n  DataSourceRef,\n  EventBusExtended,\n  HistoryItem,\n  PanelData,\n} from '@grafana/data';\nimport { getDataSourceSrv, reportInteraction } from '@grafana/runtime';\n\nimport { QueryEditorRow } from './QueryEditorRow';\n\nexport interface Props {\n  // The query configuration\n  queries: DataQuery[];\n  dsSettings: DataSourceInstanceSettings;\n\n  // Query editing\n  onQueriesChange: (queries: DataQuery[]) => void;\n  onAddQuery: (query: DataQuery) => void;\n  onRunQueries: () => void;\n\n  // Query Response Data\n  data: PanelData;\n\n  // Misc\n  app?: CoreApp;\n  history?: Array<HistoryItem<DataQuery>>;\n  eventBus?: EventBusExtended;\n  onQueryCopied?: () => void;\n  onQueryRemoved?: () => void;\n  onQueryToggled?: (queryStatus?: boolean | undefined) => void;\n}\n\nexport class QueryEditorRows extends PureComponent<Props> {\n  onRemoveQuery = (query: DataQuery) => {\n    this.props.onQueriesChange(this.props.queries.filter((item) => item !== query));\n  };\n\n  onChangeQuery(query: DataQuery, index: number) {\n    const { queries, onQueriesChange } = this.props;\n\n    // update query in array\n    onQueriesChange(\n      queries.map((item, itemIndex) => {\n        if (itemIndex === index) {\n          return query;\n        }\n        return item;\n      })\n    );\n  }\n\n  onDataSourceChange(dataSource: DataSourceInstanceSettings, index: number) {\n    const { queries, onQueriesChange } = this.props;\n\n    onQueriesChange(\n      queries.map((item, itemIndex) => {\n        if (itemIndex !== index) {\n          return item;\n        }\n\n        const dataSourceRef: DataSourceRef = {\n          type: dataSource.type,\n          uid: dataSource.uid,\n        };\n\n        if (item.datasource) {\n          const previous = getDataSourceSrv().getInstanceSettings(item.datasource);\n\n          if (previous?.type === dataSource.type) {\n            return {\n              ...item,\n              datasource: dataSourceRef,\n            };\n          }\n        }\n\n        return {\n          refId: item.refId,\n          hide: item.hide,\n          datasource: dataSourceRef,\n        };\n      })\n    );\n  }\n\n  onDragStart = (result: DragStart) => {\n    const { queries, dsSettings } = this.props;\n\n    reportInteraction('query_row_reorder_started', {\n      startIndex: result.source.index,\n      numberOfQueries: queries.length,\n      datasourceType: dsSettings.type,\n    });\n  };\n\n  onDragEnd = (result: DropResult) => {\n    const { queries, onQueriesChange, dsSettings } = this.props;\n\n    if (!result || !result.destination) {\n      return;\n    }\n\n    const startIndex = result.source.index;\n    const endIndex = result.destination.index;\n    if (startIndex === endIndex) {\n      reportInteraction('query_row_reorder_canceled', {\n        startIndex,\n        endIndex,\n        numberOfQueries: queries.length,\n        datasourceType: dsSettings.type,\n      });\n      return;\n    }\n\n    const update = Array.from(queries);\n    const [removed] = update.splice(startIndex, 1);\n    update.splice(endIndex, 0, removed);\n    onQueriesChange(update);\n\n    reportInteraction('query_row_reorder_ended', {\n      startIndex,\n      endIndex,\n      numberOfQueries: queries.length,\n      datasourceType: dsSettings.type,\n    });\n  };\n\n  render() {\n    const {\n      dsSettings,\n      data,\n      queries,\n      app,\n      history,\n      eventBus,\n      onAddQuery,\n      onRunQueries,\n      onQueryCopied,\n      onQueryRemoved,\n      onQueryToggled,\n    } = this.props;\n\n    return (\n      <DragDropContext onDragStart={this.onDragStart} onDragEnd={this.onDragEnd}>\n        <Droppable droppableId=\"transformations-list\" direction=\"vertical\">\n          {(provided) => {\n            return (\n              <div data-testid=\"query-editor-rows\" ref={provided.innerRef} {...provided.droppableProps}>\n                {queries.map((query, index) => {\n                  const dataSourceSettings = getDataSourceSettings(query, dsSettings);\n                  const onChangeDataSourceSettings = dsSettings.meta.mixed\n                    ? (settings: DataSourceInstanceSettings) => this.onDataSourceChange(settings, index)\n                    : undefined;\n\n                  return (\n                    <QueryEditorRow\n                      id={query.refId}\n                      index={index}\n                      key={query.refId}\n                      data={data}\n                      query={query}\n                      dataSource={dataSourceSettings}\n                      onChangeDataSource={onChangeDataSourceSettings}\n                      onChange={(query) => this.onChangeQuery(query, index)}\n                      onRemoveQuery={this.onRemoveQuery}\n                      onAddQuery={onAddQuery}\n                      onRunQuery={onRunQueries}\n                      onQueryCopied={onQueryCopied}\n                      onQueryRemoved={onQueryRemoved}\n                      onQueryToggled={onQueryToggled}\n                      queries={queries}\n                      app={app}\n                      history={history}\n                      eventBus={eventBus}\n                    />\n                  );\n                })}\n                {provided.placeholder}\n              </div>\n            );\n          }}\n        </Droppable>\n      </DragDropContext>\n    );\n  }\n}\n\nconst getDataSourceSettings = (\n  query: DataQuery,\n  groupSettings: DataSourceInstanceSettings\n): DataSourceInstanceSettings => {\n  if (!query.datasource) {\n    return groupSettings;\n  }\n  const querySettings = getDataSourceSrv().getInstanceSettings(query.datasource);\n  return querySettings || groupSettings;\n};\n","import React, { useMemo, useState } from 'react';\nimport { useObservable } from 'react-use';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { ApplyFieldOverrideOptions, dateMath, FieldColorModeId, NavModelItem, PanelData } from '@grafana/data';\nimport { getPluginExtensions, isPluginExtensionLink } from '@grafana/runtime';\nimport { DataTransformerConfig } from '@grafana/schema';\nimport { Button, HorizontalGroup, LinkButton, Table } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { config } from 'app/core/config';\nimport { useAppNotification } from 'app/core/copy/appNotification';\nimport { QueryGroupOptions } from 'app/types';\n\nimport { PanelRenderer } from '../panel/components/PanelRenderer';\nimport { QueryGroup } from '../query/components/QueryGroup';\nimport { PanelQueryRunner } from '../query/state/PanelQueryRunner';\n\ninterface State {\n  queryRunner: PanelQueryRunner;\n  queryOptions: QueryGroupOptions;\n  data?: PanelData;\n}\n\nexport const TestStuffPage = () => {\n  const [state, setState] = useState<State>(getDefaultState());\n  const { queryOptions, queryRunner } = state;\n\n  const onRunQueries = () => {\n    const timeRange = { from: 'now-1h', to: 'now' };\n\n    queryRunner.run({\n      queries: queryOptions.queries,\n      datasource: queryOptions.dataSource,\n      timezone: 'browser',\n      timeRange: { from: dateMath.parse(timeRange.from)!, to: dateMath.parse(timeRange.to)!, raw: timeRange },\n      maxDataPoints: queryOptions.maxDataPoints ?? 100,\n      minInterval: queryOptions.minInterval,\n    });\n  };\n\n  const onOptionsChange = (queryOptions: QueryGroupOptions) => {\n    setState({ ...state, queryOptions });\n  };\n\n  /**\n   * Subscribe to data\n   */\n  const observable = useMemo(() => queryRunner.getData({ withFieldConfig: true, withTransforms: true }), [queryRunner]);\n  const data = useObservable(observable);\n\n  const node: NavModelItem = {\n    id: 'test-page',\n    text: 'Test page',\n    icon: 'dashboard',\n    subTitle: 'FOR TESTING!',\n    url: 'sandbox/test',\n  };\n\n  const notifyApp = useAppNotification();\n\n  return (\n    <Page navModel={{ node: node, main: node }}>\n      <Page.Contents>\n        <HorizontalGroup>\n          <LinkToBasicApp extensionPointId=\"grafana/sandbox/testing\" />\n        </HorizontalGroup>\n        {data && (\n          <AutoSizer style={{ width: '100%', height: '600px' }}>\n            {({ width }) => {\n              return (\n                <div>\n                  <PanelRenderer\n                    title=\"Hello\"\n                    pluginId=\"timeseries\"\n                    width={width}\n                    height={300}\n                    data={data}\n                    options={{}}\n                    fieldConfig={{ defaults: {}, overrides: [] }}\n                    timeZone=\"browser\"\n                  />\n                  <Table data={data.series[0]} width={width} height={300} />\n                </div>\n              );\n            }}\n          </AutoSizer>\n        )}\n        <div style={{ marginTop: '16px', height: '45%' }}>\n          <QueryGroup\n            options={queryOptions}\n            queryRunner={queryRunner}\n            onRunQueries={onRunQueries}\n            onOptionsChange={onOptionsChange}\n          />\n        </div>\n        <div style={{ display: 'flex', gap: '1em' }}>\n          <Button onClick={() => notifyApp.success('Success toast', 'some more text goes here')} variant=\"primary\">\n            Success\n          </Button>\n          <Button\n            onClick={() => notifyApp.warning('Warning toast', 'some more text goes here', 'bogus-trace-99999')}\n            variant=\"secondary\"\n          >\n            Warning\n          </Button>\n          <Button\n            onClick={() => notifyApp.error('Error toast', 'some more text goes here', 'bogus-trace-fdsfdfsfds')}\n            variant=\"destructive\"\n          >\n            Error\n          </Button>\n        </div>\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport function getDefaultState(): State {\n  const options: ApplyFieldOverrideOptions = {\n    fieldConfig: {\n      defaults: {\n        color: {\n          mode: FieldColorModeId.PaletteClassic,\n        },\n      },\n      overrides: [],\n    },\n    replaceVariables: (v: string) => v,\n    theme: config.theme2,\n  };\n\n  const dataConfig = {\n    getTransformations: () => [] as DataTransformerConfig[],\n    getFieldOverrideOptions: () => options,\n    getDataSupport: () => ({ annotations: false, alertStates: false }),\n  };\n\n  return {\n    queryRunner: new PanelQueryRunner(dataConfig),\n    queryOptions: {\n      queries: [],\n      dataSource: {\n        name: 'gdev-testdata',\n      },\n      maxDataPoints: 100,\n      savedQueryUid: null,\n    },\n  };\n}\n\nfunction LinkToBasicApp({ extensionPointId }: { extensionPointId: string }) {\n  const { extensions } = getPluginExtensions({ extensionPointId });\n\n  if (extensions.length === 0) {\n    return null;\n  }\n\n  return (\n    <div>\n      {extensions.map((extension, i) => {\n        if (!isPluginExtensionLink(extension)) {\n          return null;\n        }\n        return (\n          <LinkButton href={extension.path} title={extension.description} key={extension.id}>\n            {extension.title}\n          </LinkButton>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default TestStuffPage;\n"],"names":["QueryEditorRows","query","item","result","queries","dsSettings","onQueriesChange","startIndex","endIndex","update","removed","index","itemIndex","dataSource","dataSourceRef","data","app","history","eventBus","onAddQuery","onRunQueries","onQueryCopied","onQueryRemoved","onQueryToggled","provided","dataSourceSettings","getDataSourceSettings","onChangeDataSourceSettings","settings","groupSettings","TestStuffPage","state","setState","getDefaultState","queryOptions","queryRunner","timeRange","onOptionsChange","observable","node","notifyApp","LinkToBasicApp","width","options","v","dataConfig","extensionPointId","extensions","extension","i"],"sourceRoot":""}