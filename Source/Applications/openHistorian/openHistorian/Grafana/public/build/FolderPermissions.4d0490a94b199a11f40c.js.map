{"version":3,"sources":["webpack:///./public/app/features/folders/state/actions.ts","webpack:///./public/app/features/folders/FolderPermissions.tsx","webpack:///./public/app/features/folders/state/navModel.ts"],"names":["getFolderByUid","uid","_this","this","dispatch","Object","tslib__WEBPACK_IMPORTED_MODULE_0__","app_core_services_backend_srv__WEBPACK_IMPORTED_MODULE_2__","folder","_a","sent","_reducers__WEBPACK_IMPORTED_MODULE_6__","app_core_actions__WEBPACK_IMPORTED_MODULE_3__","_navModel__WEBPACK_IMPORTED_MODULE_4__","saveFolder","put","title","version","res","app_core_app_events__WEBPACK_IMPORTED_MODULE_5__","emit","_grafana_data__WEBPACK_IMPORTED_MODULE_1__","alertSuccess","path","url","deleteFolder","getFolderPermissions","get","permissions","toUpdateItem","item","userId","teamId","role","permission","updateFolderPermission","itemToUpdate","level","getStore","itemsToUpdate","_b","next","done","value","inherited","updated","push","post","items","_d","removeFolderPermission","itemToDelete","addFolderPermission","newItem","FolderPermissions","_super","props","call","onOpenAddPermissions","setState","isAdding","onRemoveItem","onPermissionChanged","onAddPermission","onCancelAddPermission","state","prototype","componentDidMount","folderUid","render","navModel","id","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","app_core_components_Page_Page__WEBPACK_IMPORTED_MODULE_4__","Contents","isLoading","folderInfo","className","_grafana_ui__WEBPACK_IMPORTED_MODULE_5__","placement","content","app_core_components_PermissionList_PermissionsInfo__WEBPACK_IMPORTED_MODULE_12__","onClick","disabled","app_core_components_Animations_SlideDown__WEBPACK_IMPORTED_MODULE_6__","in","app_core_components_PermissionList_AddPermission__WEBPACK_IMPORTED_MODULE_11__","onCancel","app_core_components_PermissionList_PermissionList__WEBPACK_IMPORTED_MODULE_10__","isFetching","react__WEBPACK_IMPORTED_MODULE_1__","mapDispatchToProps","_state_actions__WEBPACK_IMPORTED_MODULE_8__","__webpack_exports__","react_hot_loader__WEBPACK_IMPORTED_MODULE_2__","module","react_redux__WEBPACK_IMPORTED_MODULE_3__","location","routeParams","app_core_selectors_navModel__WEBPACK_IMPORTED_MODULE_7__","navIndex","_state_navModel__WEBPACK_IMPORTED_MODULE_9__","buildNavModel","icon","subTitle","text","breadcrumbs","children","active","getLoadingNav","tabIndex","main","canSave","node","__webpack_require__","d"],"mappings":"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","file":"FolderPermissions.4d0490a94b199a11f40c.js","sourcesContent":["import { AppEvents } from '@grafana/data';\n\nimport { getBackendSrv } from 'app/core/services/backend_srv';\nimport { FolderState, ThunkResult } from 'app/types';\nimport { DashboardAcl, DashboardAclUpdateDTO, NewDashboardAclItem, PermissionLevel } from 'app/types/acl';\n\nimport { updateLocation, updateNavIndex } from 'app/core/actions';\nimport { buildNavModel } from './navModel';\nimport appEvents from 'app/core/app_events';\nimport { loadFolder, loadFolderPermissions } from './reducers';\n\nexport function getFolderByUid(uid: string): ThunkResult<void> {\n  return async dispatch => {\n    const folder = await getBackendSrv().getFolderByUid(uid);\n    dispatch(loadFolder(folder));\n    dispatch(updateNavIndex(buildNavModel(folder)));\n  };\n}\n\nexport function saveFolder(folder: FolderState): ThunkResult<void> {\n  return async dispatch => {\n    const res = await getBackendSrv().put(`/api/folders/${folder.uid}`, {\n      title: folder.title,\n      version: folder.version,\n    });\n\n    // this should be redux action at some point\n    appEvents.emit(AppEvents.alertSuccess, ['Folder saved']);\n\n    dispatch(updateLocation({ path: `${res.url}/settings` }));\n  };\n}\n\nexport function deleteFolder(uid: string): ThunkResult<void> {\n  return async dispatch => {\n    await getBackendSrv().deleteFolder(uid, true);\n    dispatch(updateLocation({ path: `dashboards` }));\n  };\n}\n\nexport function getFolderPermissions(uid: string): ThunkResult<void> {\n  return async dispatch => {\n    const permissions = await getBackendSrv().get(`/api/folders/${uid}/permissions`);\n    dispatch(loadFolderPermissions(permissions));\n  };\n}\n\nfunction toUpdateItem(item: DashboardAcl): DashboardAclUpdateDTO {\n  return {\n    userId: item.userId,\n    teamId: item.teamId,\n    role: item.role,\n    permission: item.permission,\n  };\n}\n\nexport function updateFolderPermission(itemToUpdate: DashboardAcl, level: PermissionLevel): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const folder = getStore().folder;\n    const itemsToUpdate = [];\n\n    for (const item of folder.permissions) {\n      if (item.inherited) {\n        continue;\n      }\n\n      const updated = toUpdateItem(item);\n\n      // if this is the item we want to update, update it's permission\n      if (itemToUpdate === item) {\n        updated.permission = level;\n      }\n\n      itemsToUpdate.push(updated);\n    }\n\n    await getBackendSrv().post(`/api/folders/${folder.uid}/permissions`, { items: itemsToUpdate });\n    await dispatch(getFolderPermissions(folder.uid));\n  };\n}\n\nexport function removeFolderPermission(itemToDelete: DashboardAcl): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const folder = getStore().folder;\n    const itemsToUpdate = [];\n\n    for (const item of folder.permissions) {\n      if (item.inherited || item === itemToDelete) {\n        continue;\n      }\n      itemsToUpdate.push(toUpdateItem(item));\n    }\n\n    await getBackendSrv().post(`/api/folders/${folder.uid}/permissions`, { items: itemsToUpdate });\n    await dispatch(getFolderPermissions(folder.uid));\n  };\n}\n\nexport function addFolderPermission(newItem: NewDashboardAclItem): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const folder = getStore().folder;\n    const itemsToUpdate = [];\n\n    for (const item of folder.permissions) {\n      if (item.inherited) {\n        continue;\n      }\n      itemsToUpdate.push(toUpdateItem(item));\n    }\n\n    itemsToUpdate.push({\n      userId: newItem.userId,\n      teamId: newItem.teamId,\n      role: newItem.role,\n      permission: newItem.permission,\n    });\n\n    await getBackendSrv().post(`/api/folders/${folder.uid}/permissions`, { items: itemsToUpdate });\n    await dispatch(getFolderPermissions(folder.uid));\n  };\n}\n","import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport Page from 'app/core/components/Page/Page';\nimport { Tooltip } from '@grafana/ui';\nimport { NavModel } from '@grafana/data';\nimport { SlideDown } from 'app/core/components/Animations/SlideDown';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { StoreState, FolderState } from 'app/types';\nimport { DashboardAcl, PermissionLevel, NewDashboardAclItem } from 'app/types/acl';\nimport {\n  getFolderByUid,\n  getFolderPermissions,\n  updateFolderPermission,\n  removeFolderPermission,\n  addFolderPermission,\n} from './state/actions';\nimport { getLoadingNav } from './state/navModel';\nimport PermissionList from 'app/core/components/PermissionList/PermissionList';\nimport AddPermission from 'app/core/components/PermissionList/AddPermission';\nimport PermissionsInfo from 'app/core/components/PermissionList/PermissionsInfo';\n\nexport interface Props {\n  navModel: NavModel;\n  folderUid: string;\n  folder: FolderState;\n  getFolderByUid: typeof getFolderByUid;\n  getFolderPermissions: typeof getFolderPermissions;\n  updateFolderPermission: typeof updateFolderPermission;\n  removeFolderPermission: typeof removeFolderPermission;\n  addFolderPermission: typeof addFolderPermission;\n}\n\nexport interface State {\n  isAdding: boolean;\n}\n\nexport class FolderPermissions extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      isAdding: false,\n    };\n  }\n\n  componentDidMount() {\n    this.props.getFolderByUid(this.props.folderUid);\n    this.props.getFolderPermissions(this.props.folderUid);\n  }\n\n  onOpenAddPermissions = () => {\n    this.setState({ isAdding: true });\n  };\n\n  onRemoveItem = (item: DashboardAcl) => {\n    this.props.removeFolderPermission(item);\n  };\n\n  onPermissionChanged = (item: DashboardAcl, level: PermissionLevel) => {\n    this.props.updateFolderPermission(item, level);\n  };\n\n  onAddPermission = (newItem: NewDashboardAclItem) => {\n    return this.props.addFolderPermission(newItem);\n  };\n\n  onCancelAddPermission = () => {\n    this.setState({ isAdding: false });\n  };\n\n  render() {\n    const { navModel, folder } = this.props;\n    const { isAdding } = this.state;\n\n    if (folder.id === 0) {\n      return (\n        <Page navModel={navModel}>\n          <Page.Contents isLoading={true}>\n            <span />\n          </Page.Contents>\n        </Page>\n      );\n    }\n\n    const folderInfo = { title: folder.title, url: folder.url, id: folder.id };\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents>\n          <div className=\"page-action-bar\">\n            <h3 className=\"page-sub-heading\">Folder Permissions</h3>\n            <Tooltip placement=\"auto\" content={<PermissionsInfo />}>\n              <div className=\"page-sub-heading-icon\">\n                <i className=\"gicon gicon-question gicon--has-hover\" />\n              </div>\n            </Tooltip>\n            <div className=\"page-action-bar__spacer\" />\n            <button className=\"btn btn-primary pull-right\" onClick={this.onOpenAddPermissions} disabled={isAdding}>\n              Add Permission\n            </button>\n          </div>\n          <SlideDown in={isAdding}>\n            <AddPermission onAddPermission={this.onAddPermission} onCancel={this.onCancelAddPermission} />\n          </SlideDown>\n          <PermissionList\n            items={folder.permissions}\n            onRemoveItem={this.onRemoveItem}\n            onPermissionChanged={this.onPermissionChanged}\n            isFetching={false}\n            folderInfo={folderInfo}\n          />\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nconst mapStateToProps = (state: StoreState) => {\n  const uid = state.location.routeParams.uid;\n  return {\n    navModel: getNavModel(state.navIndex, `folder-permissions-${uid}`, getLoadingNav(1)),\n    folderUid: uid,\n    folder: state.folder,\n  };\n};\n\nconst mapDispatchToProps = {\n  getFolderByUid,\n  getFolderPermissions,\n  updateFolderPermission,\n  removeFolderPermission,\n  addFolderPermission,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(FolderPermissions));\n","import { FolderDTO } from 'app/types';\nimport { NavModelItem, NavModel } from '@grafana/data';\n\nexport function buildNavModel(folder: FolderDTO): NavModelItem {\n  return {\n    icon: 'fa fa-folder-open',\n    id: 'manage-folder',\n    subTitle: 'Manage folder dashboards & permissions',\n    url: '',\n    text: folder.title,\n    breadcrumbs: [{ title: 'Dashboards', url: 'dashboards' }],\n    children: [\n      {\n        active: false,\n        icon: 'fa fa-fw fa-th-large',\n        id: `folder-dashboards-${folder.uid}`,\n        text: 'Dashboards',\n        url: folder.url,\n      },\n      {\n        active: false,\n        icon: 'fa fa-fw fa-lock',\n        id: `folder-permissions-${folder.uid}`,\n        text: 'Permissions',\n        url: `${folder.url}/permissions`,\n      },\n      {\n        active: false,\n        icon: 'gicon gicon-cog',\n        id: `folder-settings-${folder.uid}`,\n        text: 'Settings',\n        url: `${folder.url}/settings`,\n      },\n    ],\n  };\n}\n\nexport function getLoadingNav(tabIndex: number): NavModel {\n  const main = buildNavModel({\n    id: 1,\n    uid: 'loading',\n    title: 'Loading',\n    url: 'url',\n    canSave: false,\n    version: 0,\n  });\n\n  main.children[tabIndex].active = true;\n\n  return {\n    main: main,\n    node: main.children[tabIndex],\n  };\n}\n"],"sourceRoot":""}