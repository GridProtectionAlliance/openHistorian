{"version":3,"sources":["webpack:///./public/app/features/datasources/utils/passwordHandlers.ts","webpack:///./public/app/core/components/sql_part/sql_part.ts","webpack:///./public/app/plugins/datasource/mysql/response_parser.ts","webpack:///./public/app/plugins/datasource/mysql/mysql_query.ts","webpack:///./public/app/plugins/datasource/mysql/datasource.ts","webpack:///./public/app/plugins/datasource/mysql/meta_query.ts","webpack:///./public/app/plugins/datasource/mysql/sql_part.ts","webpack:///./public/app/plugins/datasource/mysql/query_ctrl.ts","webpack:///./public/app/plugins/datasource/mysql/module.ts"],"names":["PasswordFieldEnum","__webpack_require__","d","__webpack_exports__","createResetHandler","createChangeHandler","ctrl","field","event","preventDefault","current","secureJsonFields","secureJsonData","currentTarget","value","SqlPartDef","SqlPart","lodash__WEBPACK_IMPORTED_MODULE_0__","lodash__WEBPACK_IMPORTED_MODULE_0___default","n","options","this","type","label","toUpperCase","substring","style","wrapOpen","wrapClose","separator","params","defaultParams","part","def","message","datatype","name","a","clone","prototype","updateParam","strValue","index","optional","splice","ResponseParser","processQueryResult","res","data","results","key","queryRes","series","_c","e_1","Object","tslib_es6","_d","next","done","push","target","datapoints","points","refId","meta","tables","_e","e_2","_f","table","parseMetricFindQueryResult","length","rowCount","columns","rows","textColIndex","findColIndex","valueColIndex","transformToKeyValueList","transformToSimpleList","i","containsKey","text","j","indexOf","lodash_default","map","colName","transformAnnotationResponse","annotation","timeColumnIndex","timeEndColumnIndex","textColumnIndex","tagsColumnIndex","Promise","reject","list","row","timeEnd","Math","floor","undefined","time","toString","tags","trim","split","MysqlQuery","templateSrv","scopedVars","format","timeColumn","metricColumn","group","where","select","rawQuery","interpolateQueryStr","bind","$inject","unquoteIdentifier","replace","quoteIdentifier","quoteLiteral","escapeLiteral","String","hasTimeGroup","find","g","hasMetricColumn","variable","defaultFormatFn","multi","includeAll","join","render","interpolate","rawSql","buildQuery","hasUnixEpochTimecolumn","timeColumnType","buildTimeColumn","alias","query","timeGroup","macro","args","buildMetricColumn","_a","_b","column","buildValueColumn","aggregate","buildWhereClause","_this","conditions","tag","buildGroupClause","groupSection","buildValueColumns","datasource_MysqlDatasource","MysqlDatasource","instanceSettings","backendSrv","timeSrv","queryModel","v","id","responseParser","response_parser","mysql_query","interval","jsonData","timeInterval","interpolateVariablesInQueries","queries","expandedQueries","datasource","interpolateVariable","filter","targets","hide","intervalMs","maxDataPoints","datasourceId","resolve","datasourceRequest","url","from","range","valueOf","to","then","annotationQuery","metricFindQuery","optionalOptions","templating_variable","wildcardChar","interpolatedQuery","timeRange","method","testDatasource","status","catch","err","log","targetContainsTemplate","variableExists","MysqlMetaQuery","getOperators","quoteIdentAsLiteral","findMetricTable","buildTableConstraint","includes","parts","buildTableQuery","buildColumnQuery","buildValueQuery","buildDatatypeQuery","sql_part_index","register","sql_part","dynamicLookup","quote","mysql_sql_part","defaultQuery","query_ctrl_MysqlQueryCtrl","_super","MysqlQueryCtrl","$scope","$injector","uiSegmentSrv","call","panel","metaBuilder","updateProjection","formats","panelCtrl","result","segment","newSegment","tableSegment","html","timeColumnSegment","updateRawSqlAndRefresh","fake","metricColumnSegment","buildSelectMenu","whereAdd","newPlusButton","events","on","src","dataReceived","onDataReceived","dataError","onDataError","refresh","selectParts","create","whereParts","groupParts","updatePersistedParts","selectMenu","toggleEditorMode","emit","types","showConfirmModal","title","text2","yesText","onConfirm","resetPlusButton","button","plusButton","getTableSegments","transformToSegments","handleQueryError","tableChanged","r","segment_1","timeColumnChanged","all","task1","task2","getTimeColumnSegments","partModel","getMetricColumnSegments","addNone","metricColumnChanged","dataList","lastQueryMeta","lastQueryError","anySeriesFromQuery","error","expandable","variables","config","templateQuoter","unshift","segments","findAggregateIndex","findIndex","p","findWindowIndex","addSelectPart","item","subItem","partType","addGroup","aggIndex","addAlias","windowIndex","aggIndex_1","removeSelectPart","modelsIndex","partIndex","handleSelectPartEvent","evt","handleGroupPartEvent","removeGroup","some","s","handleWherePartEvent","addTemplateVars","newOperators","getWhereOptions","addWhereAction","getGroupOptions","e_3","tags_1","tags_1_1","addGroupAction","groupAdd","templateUrl","passwordHandlers","module_MysqlConfigCtrl","MysqlAnnotationsQueryCtrl","MysqlConfigCtrl","onPasswordReset","Password","onPasswordChange","module_defaultQuery"],"mappings":"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","file":"mysqlPlugin.4d0490a94b199a11f40c.js","sourcesContent":["/**\n * Set of handlers for secure password field in Angular components. They handle backward compatibility with\n * passwords stored in plain text fields.\n */\n\nimport { SyntheticEvent } from 'react';\n\nexport enum PasswordFieldEnum {\n  Password = 'password',\n  BasicAuthPassword = 'basicAuthPassword',\n}\n\n/**\n * Basic shape for settings controllers in at the moment mostly angular datasource plugins.\n */\nexport type Ctrl = {\n  current: {\n    secureJsonFields: {\n      [key: string]: boolean;\n    };\n    secureJsonData?: {\n      [key: string]: string;\n    };\n    password?: string;\n    basicAuthPassword?: string;\n  };\n};\n\nexport const createResetHandler = (ctrl: Ctrl, field: PasswordFieldEnum) => (\n  event: SyntheticEvent<HTMLInputElement>\n) => {\n  event.preventDefault();\n  // Reset also normal plain text password to remove it and only save it in secureJsonData.\n  ctrl.current[field] = null;\n  ctrl.current.secureJsonFields[field] = false;\n  ctrl.current.secureJsonData = ctrl.current.secureJsonData || {};\n  ctrl.current.secureJsonData[field] = '';\n};\n\nexport const createChangeHandler = (ctrl: any, field: PasswordFieldEnum) => (\n  event: SyntheticEvent<HTMLInputElement>\n) => {\n  ctrl.current.secureJsonData = ctrl.current.secureJsonData || {};\n  ctrl.current.secureJsonData[field] = event.currentTarget.value;\n};\n","import _ from 'lodash';\n\nexport class SqlPartDef {\n  type: string;\n  style: string;\n  label: string;\n  params: any[];\n  defaultParams: any[];\n  wrapOpen: string;\n  wrapClose: string;\n  separator: string;\n\n  constructor(options: any) {\n    this.type = options.type;\n    if (options.label) {\n      this.label = options.label;\n    } else {\n      this.label = this.type[0].toUpperCase() + this.type.substring(1) + ':';\n    }\n    this.style = options.style;\n    if (this.style === 'function') {\n      this.wrapOpen = '(';\n      this.wrapClose = ')';\n      this.separator = ', ';\n    } else {\n      this.wrapOpen = ' ';\n      this.wrapClose = ' ';\n      this.separator = ' ';\n    }\n    this.params = options.params;\n    this.defaultParams = options.defaultParams;\n  }\n}\n\nexport class SqlPart {\n  part: any;\n  def: SqlPartDef;\n  params: any[];\n  label: string;\n  name: string;\n  datatype: string;\n\n  constructor(part: any, def: any) {\n    this.part = part;\n    this.def = def;\n    if (!this.def) {\n      throw { message: 'Could not find sql part ' + part.type };\n    }\n\n    this.datatype = part.datatype;\n\n    if (part.name) {\n      this.name = part.name;\n      this.label = def.label + ' ' + part.name;\n    } else {\n      this.name = '';\n      this.label = def.label;\n    }\n\n    part.params = part.params || _.clone(this.def.defaultParams);\n    this.params = part.params;\n  }\n\n  updateParam(strValue: string, index: number) {\n    // handle optional parameters\n    if (strValue === '' && this.def.params[index].optional) {\n      this.params.splice(index, 1);\n    } else {\n      this.params[index] = strValue;\n    }\n\n    this.part.params = this.params;\n  }\n}\n","import _ from 'lodash';\n\nexport default class ResponseParser {\n  processQueryResult(res: any) {\n    const data: any[] = [];\n\n    if (!res.data.results) {\n      return { data: data };\n    }\n\n    for (const key in res.data.results) {\n      const queryRes = res.data.results[key];\n\n      if (queryRes.series) {\n        for (const series of queryRes.series) {\n          data.push({\n            target: series.name,\n            datapoints: series.points,\n            refId: queryRes.refId,\n            meta: queryRes.meta,\n          });\n        }\n      }\n\n      if (queryRes.tables) {\n        for (const table of queryRes.tables) {\n          table.type = 'table';\n          table.refId = queryRes.refId;\n          table.meta = queryRes.meta;\n          data.push(table);\n        }\n      }\n    }\n\n    return { data: data };\n  }\n\n  parseMetricFindQueryResult(refId: string, results: any) {\n    if (!results || results.data.length === 0 || results.data.results[refId].meta.rowCount === 0) {\n      return [];\n    }\n\n    const columns = results.data.results[refId].tables[0].columns;\n    const rows = results.data.results[refId].tables[0].rows;\n    const textColIndex = this.findColIndex(columns, '__text');\n    const valueColIndex = this.findColIndex(columns, '__value');\n\n    if (columns.length === 2 && textColIndex !== -1 && valueColIndex !== -1) {\n      return this.transformToKeyValueList(rows, textColIndex, valueColIndex);\n    }\n\n    return this.transformToSimpleList(rows);\n  }\n\n  transformToKeyValueList(rows: any, textColIndex: number, valueColIndex: number) {\n    const res = [];\n\n    for (let i = 0; i < rows.length; i++) {\n      if (!this.containsKey(res, rows[i][textColIndex])) {\n        res.push({\n          text: rows[i][textColIndex],\n          value: rows[i][valueColIndex],\n        });\n      }\n    }\n\n    return res;\n  }\n\n  transformToSimpleList(rows: any) {\n    const res = [];\n\n    for (let i = 0; i < rows.length; i++) {\n      for (let j = 0; j < rows[i].length; j++) {\n        const value = rows[i][j];\n        if (res.indexOf(value) === -1) {\n          res.push(value);\n        }\n      }\n    }\n\n    return _.map(res, value => {\n      return { text: value };\n    });\n  }\n\n  findColIndex(columns: any[], colName: string) {\n    for (let i = 0; i < columns.length; i++) {\n      if (columns[i].text === colName) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  containsKey(res: any[], key: any) {\n    for (let i = 0; i < res.length; i++) {\n      if (res[i].text === key) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  transformAnnotationResponse(options: any, data: any) {\n    const table = data.data.results[options.annotation.name].tables[0];\n\n    let timeColumnIndex = -1;\n    let timeEndColumnIndex = -1;\n    let textColumnIndex = -1;\n    let tagsColumnIndex = -1;\n\n    for (let i = 0; i < table.columns.length; i++) {\n      if (table.columns[i].text === 'time_sec' || table.columns[i].text === 'time') {\n        timeColumnIndex = i;\n      } else if (table.columns[i].text === 'timeend') {\n        timeEndColumnIndex = i;\n      } else if (table.columns[i].text === 'title') {\n        return Promise.reject({\n          message: 'The title column for annotations is deprecated, now only a column named text is returned',\n        });\n      } else if (table.columns[i].text === 'text') {\n        textColumnIndex = i;\n      } else if (table.columns[i].text === 'tags') {\n        tagsColumnIndex = i;\n      }\n    }\n\n    if (timeColumnIndex === -1) {\n      return Promise.reject({\n        message: 'Missing mandatory time column (with time_sec column alias) in annotation query.',\n      });\n    }\n\n    const list = [];\n    for (let i = 0; i < table.rows.length; i++) {\n      const row = table.rows[i];\n      const timeEnd =\n        timeEndColumnIndex !== -1 && row[timeEndColumnIndex] ? Math.floor(row[timeEndColumnIndex]) : undefined;\n      list.push({\n        annotation: options.annotation,\n        time: Math.floor(row[timeColumnIndex]),\n        timeEnd,\n        text: row[textColumnIndex] ? row[textColumnIndex].toString() : '',\n        tags: row[tagsColumnIndex] ? row[tagsColumnIndex].trim().split(/\\s*,\\s*/) : [],\n      });\n    }\n\n    return list;\n  }\n}\n","import _ from 'lodash';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport { ScopedVars } from '@grafana/data';\n\nexport default class MysqlQuery {\n  target: any;\n  templateSrv: any;\n  scopedVars: any;\n\n  /** @ngInject */\n  constructor(target: any, templateSrv?: TemplateSrv, scopedVars?: ScopedVars) {\n    this.target = target;\n    this.templateSrv = templateSrv;\n    this.scopedVars = scopedVars;\n\n    target.format = target.format || 'time_series';\n    target.timeColumn = target.timeColumn || 'time';\n    target.metricColumn = target.metricColumn || 'none';\n\n    target.group = target.group || [];\n    target.where = target.where || [{ type: 'macro', name: '$__timeFilter', params: [] }];\n    target.select = target.select || [[{ type: 'column', params: ['value'] }]];\n\n    // handle pre query gui panels gracefully\n    if (!('rawQuery' in this.target)) {\n      if ('rawSql' in target) {\n        // pre query gui panel\n        target.rawQuery = true;\n      } else {\n        // new panel\n        target.rawQuery = false;\n      }\n    }\n\n    // give interpolateQueryStr access to this\n    this.interpolateQueryStr = this.interpolateQueryStr.bind(this);\n  }\n\n  // remove identifier quoting from identifier to use in metadata queries\n  unquoteIdentifier(value: string) {\n    if (value[0] === '\"' && value[value.length - 1] === '\"') {\n      return value.substring(1, value.length - 1).replace(/\"\"/g, '\"');\n    } else {\n      return value;\n    }\n  }\n\n  quoteIdentifier(value: string) {\n    return '\"' + value.replace(/\"/g, '\"\"') + '\"';\n  }\n\n  quoteLiteral(value: string) {\n    return \"'\" + value.replace(/'/g, \"''\") + \"'\";\n  }\n\n  escapeLiteral(value: any) {\n    return String(value).replace(/'/g, \"''\");\n  }\n\n  hasTimeGroup() {\n    return _.find(this.target.group, (g: any) => g.type === 'time');\n  }\n\n  hasMetricColumn() {\n    return this.target.metricColumn !== 'none';\n  }\n\n  interpolateQueryStr(value: string, variable: { multi: any; includeAll: any }, defaultFormatFn: any) {\n    // if no multi or include all do not regexEscape\n    if (!variable.multi && !variable.includeAll) {\n      return this.escapeLiteral(value);\n    }\n\n    if (typeof value === 'string') {\n      return this.quoteLiteral(value);\n    }\n\n    const escapedValues = _.map(value, this.quoteLiteral);\n    return escapedValues.join(',');\n  }\n\n  render(interpolate?: boolean) {\n    const target = this.target;\n\n    // new query with no table set yet\n    if (!this.target.rawQuery && !('table' in this.target)) {\n      return '';\n    }\n\n    if (!target.rawQuery) {\n      target.rawSql = this.buildQuery();\n    }\n\n    if (interpolate) {\n      return this.templateSrv.replace(target.rawSql, this.scopedVars, this.interpolateQueryStr);\n    } else {\n      return target.rawSql;\n    }\n  }\n\n  hasUnixEpochTimecolumn() {\n    return ['int', 'bigint', 'double'].indexOf(this.target.timeColumnType) > -1;\n  }\n\n  buildTimeColumn(alias = true) {\n    const timeGroup = this.hasTimeGroup();\n    let query;\n    let macro = '$__timeGroup';\n\n    if (timeGroup) {\n      let args;\n      if (timeGroup.params.length > 1 && timeGroup.params[1] !== 'none') {\n        args = timeGroup.params.join(',');\n      } else {\n        args = timeGroup.params[0];\n      }\n      if (this.hasUnixEpochTimecolumn()) {\n        macro = '$__unixEpochGroup';\n      }\n      if (alias) {\n        macro += 'Alias';\n      }\n      query = macro + '(' + this.target.timeColumn + ',' + args + ')';\n    } else {\n      query = this.target.timeColumn;\n      if (alias) {\n        query += ' AS \"time\"';\n      }\n    }\n\n    return query;\n  }\n\n  buildMetricColumn() {\n    if (this.hasMetricColumn()) {\n      return this.target.metricColumn + ' AS metric';\n    }\n\n    return '';\n  }\n\n  buildValueColumns() {\n    let query = '';\n    for (const column of this.target.select) {\n      query += ',\\n  ' + this.buildValueColumn(column);\n    }\n\n    return query;\n  }\n\n  buildValueColumn(column: any) {\n    let query = '';\n\n    const columnName: any = _.find(column, (g: any) => g.type === 'column');\n    query = columnName.params[0];\n\n    const aggregate: any = _.find(column, (g: any) => g.type === 'aggregate');\n\n    if (aggregate) {\n      const func = aggregate.params[0];\n      query = func + '(' + query + ')';\n    }\n\n    const alias: any = _.find(column, (g: any) => g.type === 'alias');\n    if (alias) {\n      query += ' AS ' + this.quoteIdentifier(alias.params[0]);\n    }\n\n    return query;\n  }\n\n  buildWhereClause() {\n    let query = '';\n    const conditions = _.map(this.target.where, (tag, index) => {\n      switch (tag.type) {\n        case 'macro':\n          return tag.name + '(' + this.target.timeColumn + ')';\n          break;\n        case 'expression':\n          return tag.params.join(' ');\n          break;\n      }\n    });\n\n    if (conditions.length > 0) {\n      query = '\\nWHERE\\n  ' + conditions.join(' AND\\n  ');\n    }\n\n    return query;\n  }\n\n  buildGroupClause() {\n    let query = '';\n    let groupSection = '';\n\n    for (let i = 0; i < this.target.group.length; i++) {\n      const part = this.target.group[i];\n      if (i > 0) {\n        groupSection += ', ';\n      }\n      if (part.type === 'time') {\n        groupSection += '1';\n      } else {\n        groupSection += part.params[0];\n      }\n    }\n\n    if (groupSection.length) {\n      query = '\\nGROUP BY ' + groupSection;\n      if (this.hasMetricColumn()) {\n        query += ',2';\n      }\n    }\n    return query;\n  }\n\n  buildQuery() {\n    let query = 'SELECT';\n\n    query += '\\n  ' + this.buildTimeColumn();\n    if (this.hasMetricColumn()) {\n      query += ',\\n  ' + this.buildMetricColumn();\n    }\n    query += this.buildValueColumns();\n\n    query += '\\nFROM ' + this.target.table;\n\n    query += this.buildWhereClause();\n    query += this.buildGroupClause();\n\n    query += '\\nORDER BY ' + this.buildTimeColumn(false);\n\n    return query;\n  }\n}\n","import _ from 'lodash';\nimport ResponseParser from './response_parser';\nimport MysqlQuery from 'app/plugins/datasource/mysql/mysql_query';\nimport { BackendSrv } from 'app/core/services/backend_srv';\nimport { ScopedVars } from '@grafana/data';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport { TimeSrv } from 'app/features/dashboard/services/TimeSrv';\n//Types\nimport { MysqlQueryForInterpolation } from './types';\nimport { getSearchFilterScopedVar } from '../../../features/templating/variable';\n\nexport class MysqlDatasource {\n  id: any;\n  name: any;\n  responseParser: ResponseParser;\n  queryModel: MysqlQuery;\n  interval: string;\n\n  /** @ngInject */\n  constructor(\n    instanceSettings: any,\n    private backendSrv: BackendSrv,\n    private templateSrv: TemplateSrv,\n    private timeSrv: TimeSrv\n  ) {\n    this.name = instanceSettings.name;\n    this.id = instanceSettings.id;\n    this.responseParser = new ResponseParser();\n    this.queryModel = new MysqlQuery({});\n    this.interval = (instanceSettings.jsonData || {}).timeInterval || '1m';\n  }\n\n  interpolateVariable = (value: string, variable: any) => {\n    if (typeof value === 'string') {\n      if (variable.multi || variable.includeAll) {\n        const result = this.queryModel.quoteLiteral(value);\n        return result;\n      } else {\n        return value;\n      }\n    }\n\n    if (typeof value === 'number') {\n      return value;\n    }\n\n    const quotedValues = _.map(value, (v: any) => {\n      return this.queryModel.quoteLiteral(v);\n    });\n    return quotedValues.join(',');\n  };\n\n  interpolateVariablesInQueries(\n    queries: MysqlQueryForInterpolation[],\n    scopedVars: ScopedVars\n  ): MysqlQueryForInterpolation[] {\n    let expandedQueries = queries;\n    if (queries && queries.length > 0) {\n      expandedQueries = queries.map(query => {\n        const expandedQuery = {\n          ...query,\n          datasource: this.name,\n          rawSql: this.templateSrv.replace(query.rawSql, scopedVars, this.interpolateVariable),\n        };\n        return expandedQuery;\n      });\n    }\n    return expandedQueries;\n  }\n\n  query(options: any) {\n    const queries = _.filter(options.targets, target => {\n      return target.hide !== true;\n    }).map(target => {\n      const queryModel = new MysqlQuery(target, this.templateSrv, options.scopedVars);\n\n      return {\n        refId: target.refId,\n        intervalMs: options.intervalMs,\n        maxDataPoints: options.maxDataPoints,\n        datasourceId: this.id,\n        rawSql: queryModel.render(this.interpolateVariable as any),\n        format: target.format,\n      };\n    });\n\n    if (queries.length === 0) {\n      return Promise.resolve({ data: [] });\n    }\n\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: options.range.from.valueOf().toString(),\n          to: options.range.to.valueOf().toString(),\n          queries: queries,\n        },\n      })\n      .then(this.responseParser.processQueryResult);\n  }\n\n  annotationQuery(options: any) {\n    if (!options.annotation.rawQuery) {\n      return Promise.reject({\n        message: 'Query missing in annotation definition',\n      });\n    }\n\n    const query = {\n      refId: options.annotation.name,\n      datasourceId: this.id,\n      rawSql: this.templateSrv.replace(options.annotation.rawQuery, options.scopedVars, this.interpolateVariable),\n      format: 'table',\n    };\n\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: options.range.from.valueOf().toString(),\n          to: options.range.to.valueOf().toString(),\n          queries: [query],\n        },\n      })\n      .then((data: any) => this.responseParser.transformAnnotationResponse(options, data));\n  }\n\n  metricFindQuery(query: string, optionalOptions: any) {\n    let refId = 'tempvar';\n    if (optionalOptions && optionalOptions.variable && optionalOptions.variable.name) {\n      refId = optionalOptions.variable.name;\n    }\n\n    const rawSql = this.templateSrv.replace(\n      query,\n      getSearchFilterScopedVar({ query, wildcardChar: '%', options: optionalOptions }),\n      this.interpolateVariable\n    );\n\n    const interpolatedQuery = {\n      refId: refId,\n      datasourceId: this.id,\n      rawSql,\n      format: 'table',\n    };\n\n    const range = this.timeSrv.timeRange();\n    const data = {\n      queries: [interpolatedQuery],\n      from: range.from.valueOf().toString(),\n      to: range.to.valueOf().toString(),\n    };\n\n    if (optionalOptions && optionalOptions.range && optionalOptions.range.from) {\n      data['from'] = optionalOptions.range.from.valueOf().toString();\n    }\n    if (optionalOptions && optionalOptions.range && optionalOptions.range.to) {\n      data['to'] = optionalOptions.range.to.valueOf().toString();\n    }\n\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: data,\n      })\n      .then((data: any) => this.responseParser.parseMetricFindQueryResult(refId, data));\n  }\n\n  testDatasource() {\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: '5m',\n          to: 'now',\n          queries: [\n            {\n              refId: 'A',\n              intervalMs: 1,\n              maxDataPoints: 1,\n              datasourceId: this.id,\n              rawSql: 'SELECT 1',\n              format: 'table',\n            },\n          ],\n        },\n      })\n      .then((res: any) => {\n        return { status: 'success', message: 'Database Connection OK' };\n      })\n      .catch((err: any) => {\n        console.log(err);\n        if (err.data && err.data.message) {\n          return { status: 'error', message: err.data.message };\n        } else {\n          return { status: 'error', message: err.status };\n        }\n      });\n  }\n\n  targetContainsTemplate(target: any) {\n    let rawSql = '';\n\n    if (target.rawQuery) {\n      rawSql = target.rawSql;\n    } else {\n      const query = new MysqlQuery(target);\n      rawSql = query.buildQuery();\n    }\n\n    rawSql = rawSql.replace('$__', '');\n\n    return this.templateSrv.variableExists(rawSql);\n  }\n}\n","export class MysqlMetaQuery {\n  constructor(private target: any, private queryModel: any) {}\n\n  getOperators(datatype: string) {\n    switch (datatype) {\n      case 'double':\n      case 'float': {\n        return ['=', '!=', '<', '<=', '>', '>='];\n      }\n      case 'text':\n      case 'tinytext':\n      case 'mediumtext':\n      case 'longtext':\n      case 'varchar':\n      case 'char': {\n        return ['=', '!=', '<', '<=', '>', '>=', 'IN', 'NOT IN', 'LIKE', 'NOT LIKE'];\n      }\n      default: {\n        return ['=', '!=', '<', '<=', '>', '>=', 'IN', 'NOT IN'];\n      }\n    }\n  }\n\n  // quote identifier as literal to use in metadata queries\n  quoteIdentAsLiteral(value: string) {\n    return this.queryModel.quoteLiteral(this.queryModel.unquoteIdentifier(value));\n  }\n\n  findMetricTable() {\n    // query that returns first table found that has a timestamp(tz) column and a float column\n    const query = `\n  SELECT\n    table_name as table_name,\n    ( SELECT\n        column_name as column_name\n      FROM information_schema.columns c\n      WHERE\n        c.table_schema = t.table_schema AND\n        c.table_name = t.table_name AND\n        c.data_type IN ('timestamp', 'datetime')\n      ORDER BY ordinal_position LIMIT 1\n    ) AS time_column,\n    ( SELECT\n        column_name AS column_name\n      FROM information_schema.columns c\n      WHERE\n        c.table_schema = t.table_schema AND\n        c.table_name = t.table_name AND\n        c.data_type IN('float', 'int', 'bigint')\n      ORDER BY ordinal_position LIMIT 1\n    ) AS value_column\n  FROM information_schema.tables t\n  WHERE\n    t.table_schema = database() AND\n    EXISTS\n    ( SELECT 1\n      FROM information_schema.columns c\n      WHERE\n        c.table_schema = t.table_schema AND\n        c.table_name = t.table_name AND\n        c.data_type IN ('timestamp', 'datetime')\n    ) AND\n    EXISTS\n    ( SELECT 1\n      FROM information_schema.columns c\n      WHERE\n        c.table_schema = t.table_schema AND\n        c.table_name = t.table_name AND\n        c.data_type IN('float', 'int', 'bigint')\n    )\n  LIMIT 1\n;`;\n    return query;\n  }\n\n  buildTableConstraint(table: string) {\n    let query = '';\n\n    // check for schema qualified table\n    if (table.includes('.')) {\n      const parts = table.split('.');\n      query = 'table_schema = ' + this.quoteIdentAsLiteral(parts[0]);\n      query += ' AND table_name = ' + this.quoteIdentAsLiteral(parts[1]);\n      return query;\n    } else {\n      query = 'table_schema = database() AND table_name = ' + this.quoteIdentAsLiteral(table);\n\n      return query;\n    }\n  }\n\n  buildTableQuery() {\n    return 'SELECT table_name FROM information_schema.tables WHERE table_schema = database() ORDER BY table_name';\n  }\n\n  buildColumnQuery(type?: string) {\n    let query = 'SELECT column_name FROM information_schema.columns WHERE ';\n    query += this.buildTableConstraint(this.target.table);\n\n    switch (type) {\n      case 'time': {\n        query += \" AND data_type IN ('timestamp','datetime','bigint','int','double','float')\";\n        break;\n      }\n      case 'metric': {\n        query += \" AND data_type IN ('text','tinytext','mediumtext','longtext','varchar','char')\";\n        break;\n      }\n      case 'value': {\n        query += \" AND data_type IN ('bigint','int','smallint','mediumint','tinyint','double','decimal','float')\";\n        query += ' AND column_name <> ' + this.quoteIdentAsLiteral(this.target.timeColumn);\n        break;\n      }\n      case 'group': {\n        query += \" AND data_type IN ('text','tinytext','mediumtext','longtext','varchar','char')\";\n        break;\n      }\n    }\n\n    query += ' ORDER BY column_name';\n\n    return query;\n  }\n\n  buildValueQuery(column: string) {\n    let query = 'SELECT DISTINCT QUOTE(' + column + ')';\n    query += ' FROM ' + this.target.table;\n    query += ' WHERE $__timeFilter(' + this.target.timeColumn + ')';\n    query += ' ORDER BY 1 LIMIT 100';\n    return query;\n  }\n\n  buildDatatypeQuery(column: string) {\n    let query = `\nSELECT data_type\nFROM information_schema.columns\nWHERE `;\n    query += ' table_name = ' + this.quoteIdentAsLiteral(this.target.table);\n    query += ' AND column_name = ' + this.quoteIdentAsLiteral(column);\n    return query;\n  }\n}\n","import { SqlPartDef, SqlPart } from 'app/core/components/sql_part/sql_part';\n\nconst index: any[] = [];\n\nfunction createPart(part: any): any {\n  const def = index[part.type];\n  if (!def) {\n    return null;\n  }\n\n  return new SqlPart(part, def);\n}\n\nfunction register(options: any) {\n  index[options.type] = new SqlPartDef(options);\n}\n\nregister({\n  type: 'column',\n  style: 'label',\n  params: [{ type: 'column', dynamicLookup: true }],\n  defaultParams: ['value'],\n});\n\nregister({\n  type: 'expression',\n  style: 'expression',\n  label: 'Expr:',\n  params: [\n    { name: 'left', type: 'string', dynamicLookup: true },\n    { name: 'op', type: 'string', dynamicLookup: true },\n    { name: 'right', type: 'string', dynamicLookup: true },\n  ],\n  defaultParams: ['value', '=', 'value'],\n});\n\nregister({\n  type: 'macro',\n  style: 'label',\n  label: 'Macro:',\n  params: [],\n  defaultParams: [],\n});\n\nregister({\n  type: 'aggregate',\n  style: 'label',\n  params: [\n    {\n      name: 'name',\n      type: 'string',\n      options: ['avg', 'count', 'min', 'max', 'sum', 'stddev', 'variance'],\n    },\n  ],\n  defaultParams: ['avg'],\n});\n\nregister({\n  type: 'alias',\n  style: 'label',\n  params: [{ name: 'name', type: 'string', quote: 'double' }],\n  defaultParams: ['alias'],\n});\n\nregister({\n  type: 'time',\n  style: 'function',\n  label: 'time',\n  params: [\n    {\n      name: 'interval',\n      type: 'interval',\n      options: ['$__interval', '1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n    {\n      name: 'fill',\n      type: 'string',\n      options: ['none', 'NULL', 'previous', '0'],\n    },\n  ],\n  defaultParams: ['$__interval', 'none'],\n});\n\nexport default {\n  create: createPart,\n};\n","import _ from 'lodash';\nimport appEvents from 'app/core/app_events';\nimport { MysqlMetaQuery } from './meta_query';\nimport { QueryCtrl } from 'app/plugins/sdk';\nimport { SqlPart } from 'app/core/components/sql_part/sql_part';\nimport MysqlQuery from './mysql_query';\nimport sqlPart from './sql_part';\nimport { auto } from 'angular';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport { CoreEvents } from 'app/types';\nimport { PanelEvents } from '@grafana/data';\n\nexport interface QueryMeta {\n  sql: string;\n}\n\nconst defaultQuery = `SELECT\n  UNIX_TIMESTAMP(<time_column>) as time_sec,\n  <value column> as value,\n  <series name column> as metric\nFROM <table name>\nWHERE $__timeFilter(time_column)\nORDER BY <time_column> ASC\n`;\n\nexport class MysqlQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  showLastQuerySQL: boolean;\n  formats: any[];\n  lastQueryMeta: QueryMeta;\n  lastQueryError: string;\n  showHelp: boolean;\n\n  queryModel: MysqlQuery;\n  metaBuilder: MysqlMetaQuery;\n  tableSegment: any;\n  whereAdd: any;\n  timeColumnSegment: any;\n  metricColumnSegment: any;\n  selectMenu: any[];\n  selectParts: SqlPart[][];\n  groupParts: SqlPart[];\n  whereParts: SqlPart[];\n  groupAdd: any;\n\n  /** @ngInject */\n  constructor(\n    $scope: any,\n    $injector: auto.IInjectorService,\n    private templateSrv: TemplateSrv,\n    private uiSegmentSrv: any\n  ) {\n    super($scope, $injector);\n\n    this.target = this.target;\n    this.queryModel = new MysqlQuery(this.target, templateSrv, this.panel.scopedVars);\n    this.metaBuilder = new MysqlMetaQuery(this.target, this.queryModel);\n    this.updateProjection();\n\n    this.formats = [\n      { text: 'Time series', value: 'time_series' },\n      { text: 'Table', value: 'table' },\n    ];\n\n    if (!this.target.rawSql) {\n      // special handling when in table panel\n      if (this.panelCtrl.panel.type === 'table') {\n        this.target.format = 'table';\n        this.target.rawSql = 'SELECT 1';\n        this.target.rawQuery = true;\n      } else {\n        this.target.rawSql = defaultQuery;\n        this.datasource.metricFindQuery(this.metaBuilder.findMetricTable()).then((result: any) => {\n          if (result.length > 0) {\n            this.target.table = result[0].text;\n            let segment = this.uiSegmentSrv.newSegment(this.target.table);\n            this.tableSegment.html = segment.html;\n            this.tableSegment.value = segment.value;\n\n            this.target.timeColumn = result[1].text;\n            segment = this.uiSegmentSrv.newSegment(this.target.timeColumn);\n            this.timeColumnSegment.html = segment.html;\n            this.timeColumnSegment.value = segment.value;\n\n            this.target.timeColumnType = 'timestamp';\n            this.target.select = [[{ type: 'column', params: [result[2].text] }]];\n            this.updateProjection();\n            this.updateRawSqlAndRefresh();\n          }\n        });\n      }\n    }\n\n    if (!this.target.table) {\n      this.tableSegment = uiSegmentSrv.newSegment({ value: 'select table', fake: true });\n    } else {\n      this.tableSegment = uiSegmentSrv.newSegment(this.target.table);\n    }\n\n    this.timeColumnSegment = uiSegmentSrv.newSegment(this.target.timeColumn);\n    this.metricColumnSegment = uiSegmentSrv.newSegment(this.target.metricColumn);\n\n    this.buildSelectMenu();\n    this.whereAdd = this.uiSegmentSrv.newPlusButton();\n    this.groupAdd = this.uiSegmentSrv.newPlusButton();\n\n    this.panelCtrl.events.on(PanelEvents.dataReceived, this.onDataReceived.bind(this), $scope);\n    this.panelCtrl.events.on(PanelEvents.dataError, this.onDataError.bind(this), $scope);\n  }\n\n  updateRawSqlAndRefresh() {\n    if (!this.target.rawQuery) {\n      this.target.rawSql = this.queryModel.buildQuery();\n    }\n\n    this.panelCtrl.refresh();\n  }\n\n  updateProjection() {\n    this.selectParts = _.map(this.target.select, (parts: any) => {\n      return _.map(parts, sqlPart.create).filter(n => n);\n    });\n    this.whereParts = _.map(this.target.where, sqlPart.create).filter(n => n);\n    this.groupParts = _.map(this.target.group, sqlPart.create).filter(n => n);\n  }\n\n  updatePersistedParts() {\n    this.target.select = _.map(this.selectParts, selectParts => {\n      return _.map(selectParts, (part: any) => {\n        return { type: part.def.type, datatype: part.datatype, params: part.params };\n      });\n    });\n    this.target.where = _.map(this.whereParts, (part: any) => {\n      return { type: part.def.type, datatype: part.datatype, name: part.name, params: part.params };\n    });\n    this.target.group = _.map(this.groupParts, (part: any) => {\n      return { type: part.def.type, datatype: part.datatype, params: part.params };\n    });\n  }\n\n  buildSelectMenu() {\n    this.selectMenu = [];\n    const aggregates = {\n      text: 'Aggregate Functions',\n      value: 'aggregate',\n      submenu: [\n        { text: 'Average', value: 'avg' },\n        { text: 'Count', value: 'count' },\n        { text: 'Maximum', value: 'max' },\n        { text: 'Minimum', value: 'min' },\n        { text: 'Sum', value: 'sum' },\n        { text: 'Standard deviation', value: 'stddev' },\n        { text: 'Variance', value: 'variance' },\n      ],\n    };\n\n    this.selectMenu.push(aggregates);\n    this.selectMenu.push({ text: 'Alias', value: 'alias' });\n    this.selectMenu.push({ text: 'Column', value: 'column' });\n  }\n\n  toggleEditorMode() {\n    if (this.target.rawQuery) {\n      appEvents.emit(CoreEvents.showConfirmModal, {\n        title: 'Warning',\n        text2: 'Switching to query builder may overwrite your raw SQL.',\n        icon: 'fa-exclamation',\n        yesText: 'Switch',\n        onConfirm: () => {\n          this.target.rawQuery = !this.target.rawQuery;\n        },\n      });\n    } else {\n      this.target.rawQuery = !this.target.rawQuery;\n    }\n  }\n\n  resetPlusButton(button: { html: any; value: any }) {\n    const plusButton = this.uiSegmentSrv.newPlusButton();\n    button.html = plusButton.html;\n    button.value = plusButton.value;\n  }\n\n  getTableSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildTableQuery())\n      .then(this.transformToSegments({}))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  tableChanged() {\n    this.target.table = this.tableSegment.value;\n    this.target.where = [];\n    this.target.group = [];\n    this.updateProjection();\n\n    const segment = this.uiSegmentSrv.newSegment('none');\n    this.metricColumnSegment.html = segment.html;\n    this.metricColumnSegment.value = segment.value;\n    this.target.metricColumn = 'none';\n\n    const task1 = this.datasource.metricFindQuery(this.metaBuilder.buildColumnQuery('time')).then((result: any) => {\n      // check if time column is still valid\n      if (result.length > 0 && !_.find(result, (r: any) => r.text === this.target.timeColumn)) {\n        const segment = this.uiSegmentSrv.newSegment(result[0].text);\n        this.timeColumnSegment.html = segment.html;\n        this.timeColumnSegment.value = segment.value;\n      }\n      return this.timeColumnChanged(false);\n    });\n    const task2 = this.datasource.metricFindQuery(this.metaBuilder.buildColumnQuery('value')).then((result: any) => {\n      if (result.length > 0) {\n        this.target.select = [[{ type: 'column', params: [result[0].text] }]];\n        this.updateProjection();\n      }\n    });\n\n    Promise.all([task1, task2]).then(() => {\n      this.updateRawSqlAndRefresh();\n    });\n  }\n\n  getTimeColumnSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('time'))\n      .then(this.transformToSegments({}))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  timeColumnChanged(refresh?: boolean) {\n    this.target.timeColumn = this.timeColumnSegment.value;\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildDatatypeQuery(this.target.timeColumn))\n      .then((result: any) => {\n        if (result.length === 1) {\n          if (this.target.timeColumnType !== result[0].text) {\n            this.target.timeColumnType = result[0].text;\n          }\n          let partModel;\n          if (this.queryModel.hasUnixEpochTimecolumn()) {\n            partModel = sqlPart.create({ type: 'macro', name: '$__unixEpochFilter', params: [] });\n          } else {\n            partModel = sqlPart.create({ type: 'macro', name: '$__timeFilter', params: [] });\n          }\n\n          if (this.whereParts.length >= 1 && this.whereParts[0].def.type === 'macro') {\n            // replace current macro\n            this.whereParts[0] = partModel;\n          } else {\n            this.whereParts.splice(0, 0, partModel);\n          }\n        }\n\n        this.updatePersistedParts();\n        if (refresh !== false) {\n          this.updateRawSqlAndRefresh();\n        }\n      });\n  }\n\n  getMetricColumnSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('metric'))\n      .then(this.transformToSegments({ addNone: true }))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  metricColumnChanged() {\n    this.target.metricColumn = this.metricColumnSegment.value;\n    this.updateRawSqlAndRefresh();\n  }\n\n  onDataReceived(dataList: any) {\n    this.lastQueryMeta = null;\n    this.lastQueryError = null;\n\n    const anySeriesFromQuery: any = _.find(dataList, { refId: this.target.refId });\n    if (anySeriesFromQuery) {\n      this.lastQueryMeta = anySeriesFromQuery.meta;\n    }\n  }\n\n  onDataError(err: any) {\n    if (err.data && err.data.results) {\n      const queryRes = err.data.results[this.target.refId];\n      if (queryRes) {\n        this.lastQueryMeta = queryRes.meta;\n        this.lastQueryError = queryRes.error;\n      }\n    }\n  }\n\n  transformToSegments(config: any) {\n    return (results: any) => {\n      const segments = _.map(results, segment => {\n        return this.uiSegmentSrv.newSegment({\n          value: segment.text,\n          expandable: segment.expandable,\n        });\n      });\n\n      if (config.addTemplateVars) {\n        for (const variable of this.templateSrv.variables) {\n          let value;\n          value = '$' + variable.name;\n          if (config.templateQuoter && variable.multi === false) {\n            value = config.templateQuoter(value);\n          }\n\n          segments.unshift(\n            this.uiSegmentSrv.newSegment({\n              type: 'template',\n              value: value,\n              expandable: true,\n            })\n          );\n        }\n      }\n\n      if (config.addNone) {\n        segments.unshift(this.uiSegmentSrv.newSegment({ type: 'template', value: 'none', expandable: true }));\n      }\n\n      return segments;\n    };\n  }\n\n  findAggregateIndex(selectParts: any) {\n    return _.findIndex(selectParts, (p: any) => p.def.type === 'aggregate' || p.def.type === 'percentile');\n  }\n\n  findWindowIndex(selectParts: any) {\n    return _.findIndex(selectParts, (p: any) => p.def.type === 'window' || p.def.type === 'moving_window');\n  }\n\n  addSelectPart(selectParts: any[], item: { value: any }, subItem: { type: any; value: any }) {\n    let partType = item.value;\n    if (subItem && subItem.type) {\n      partType = subItem.type;\n    }\n    let partModel = sqlPart.create({ type: partType });\n    if (subItem) {\n      partModel.params[0] = subItem.value;\n    }\n    let addAlias = false;\n\n    switch (partType) {\n      case 'column':\n        const parts = _.map(selectParts, (part: any) => {\n          return sqlPart.create({ type: part.def.type, params: _.clone(part.params) });\n        });\n        this.selectParts.push(parts);\n        break;\n      case 'percentile':\n      case 'aggregate':\n        // add group by if no group by yet\n        if (this.target.group.length === 0) {\n          this.addGroup('time', '$__interval');\n        }\n        const aggIndex = this.findAggregateIndex(selectParts);\n        if (aggIndex !== -1) {\n          // replace current aggregation\n          selectParts[aggIndex] = partModel;\n        } else {\n          selectParts.splice(1, 0, partModel);\n        }\n        if (!_.find(selectParts, (p: any) => p.def.type === 'alias')) {\n          addAlias = true;\n        }\n        break;\n      case 'moving_window':\n      case 'window':\n        const windowIndex = this.findWindowIndex(selectParts);\n        if (windowIndex !== -1) {\n          // replace current window function\n          selectParts[windowIndex] = partModel;\n        } else {\n          const aggIndex = this.findAggregateIndex(selectParts);\n          if (aggIndex !== -1) {\n            selectParts.splice(aggIndex + 1, 0, partModel);\n          } else {\n            selectParts.splice(1, 0, partModel);\n          }\n        }\n        if (!_.find(selectParts, (p: any) => p.def.type === 'alias')) {\n          addAlias = true;\n        }\n        break;\n      case 'alias':\n        addAlias = true;\n        break;\n    }\n\n    if (addAlias) {\n      // set initial alias name to column name\n      partModel = sqlPart.create({ type: 'alias', params: [selectParts[0].params[0].replace(/\"/g, '')] });\n      if (selectParts[selectParts.length - 1].def.type === 'alias') {\n        selectParts[selectParts.length - 1] = partModel;\n      } else {\n        selectParts.push(partModel);\n      }\n    }\n\n    this.updatePersistedParts();\n    this.updateRawSqlAndRefresh();\n  }\n\n  removeSelectPart(selectParts: any, part: { def: { type: string } }) {\n    if (part.def.type === 'column') {\n      // remove all parts of column unless its last column\n      if (this.selectParts.length > 1) {\n        const modelsIndex = _.indexOf(this.selectParts, selectParts);\n        this.selectParts.splice(modelsIndex, 1);\n      }\n    } else {\n      const partIndex = _.indexOf(selectParts, part);\n      selectParts.splice(partIndex, 1);\n    }\n\n    this.updatePersistedParts();\n  }\n\n  handleSelectPartEvent(selectParts: any, part: { def: any }, evt: { name: any }) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        switch (part.def.type) {\n          // case 'aggregate':\n          //   return this.datasource\n          //     .metricFindQuery(this.metaBuilder.buildAggregateQuery())\n          //     .then(this.transformToSegments({}))\n          //     .catch(this.handleQueryError.bind(this));\n          case 'column':\n            return this.datasource\n              .metricFindQuery(this.metaBuilder.buildColumnQuery('value'))\n              .then(this.transformToSegments({}))\n              .catch(this.handleQueryError.bind(this));\n        }\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'action': {\n        this.removeSelectPart(selectParts, part);\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return Promise.resolve([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  handleGroupPartEvent(part: any, index: any, evt: { name: any }) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        return this.datasource\n          .metricFindQuery(this.metaBuilder.buildColumnQuery())\n          .then(this.transformToSegments({}))\n          .catch(this.handleQueryError.bind(this));\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'action': {\n        this.removeGroup(part, index);\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return Promise.resolve([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  addGroup(partType: string, value: string) {\n    let params = [value];\n    if (partType === 'time') {\n      params = ['$__interval', 'none'];\n    }\n    const partModel = sqlPart.create({ type: partType, params: params });\n\n    if (partType === 'time') {\n      // put timeGroup at start\n      this.groupParts.splice(0, 0, partModel);\n    } else {\n      this.groupParts.push(partModel);\n    }\n\n    // add aggregates when adding group by\n    for (const selectParts of this.selectParts) {\n      if (!selectParts.some(part => part.def.type === 'aggregate')) {\n        const aggregate = sqlPart.create({ type: 'aggregate', params: ['avg'] });\n        selectParts.splice(1, 0, aggregate);\n        if (!selectParts.some(part => part.def.type === 'alias')) {\n          const alias = sqlPart.create({ type: 'alias', params: [selectParts[0].part.params[0]] });\n          selectParts.push(alias);\n        }\n      }\n    }\n\n    this.updatePersistedParts();\n  }\n\n  removeGroup(part: { def: { type: string } }, index: number) {\n    if (part.def.type === 'time') {\n      // remove aggregations\n      this.selectParts = _.map(this.selectParts, (s: any) => {\n        return _.filter(s, (part: any) => {\n          if (part.def.type === 'aggregate' || part.def.type === 'percentile') {\n            return false;\n          }\n          return true;\n        });\n      });\n    }\n\n    this.groupParts.splice(index, 1);\n    this.updatePersistedParts();\n  }\n\n  handleWherePartEvent(whereParts: any, part: any, evt: any, index: any) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        switch (evt.param.name) {\n          case 'left':\n            return this.datasource\n              .metricFindQuery(this.metaBuilder.buildColumnQuery())\n              .then(this.transformToSegments({}))\n              .catch(this.handleQueryError.bind(this));\n          case 'right':\n            if (['int', 'bigint', 'double', 'datetime'].indexOf(part.datatype) > -1) {\n              // don't do value lookups for numerical fields\n              return Promise.resolve([]);\n            } else {\n              return this.datasource\n                .metricFindQuery(this.metaBuilder.buildValueQuery(part.params[0]))\n                .then(\n                  this.transformToSegments({\n                    addTemplateVars: true,\n                    templateQuoter: (v: string) => {\n                      return this.queryModel.quoteLiteral(v);\n                    },\n                  })\n                )\n                .catch(this.handleQueryError.bind(this));\n            }\n          case 'op':\n            return Promise.resolve(this.uiSegmentSrv.newOperators(this.metaBuilder.getOperators(part.datatype)));\n          default:\n            return Promise.resolve([]);\n        }\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.datasource.metricFindQuery(this.metaBuilder.buildDatatypeQuery(part.params[0])).then((d: any) => {\n          if (d.length === 1) {\n            part.datatype = d[0].text;\n          }\n        });\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'action': {\n        // remove element\n        whereParts.splice(index, 1);\n        this.updatePersistedParts();\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return Promise.resolve([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  getWhereOptions() {\n    const options = [];\n    if (this.queryModel.hasUnixEpochTimecolumn()) {\n      options.push(this.uiSegmentSrv.newSegment({ type: 'macro', value: '$__unixEpochFilter' }));\n    } else {\n      options.push(this.uiSegmentSrv.newSegment({ type: 'macro', value: '$__timeFilter' }));\n    }\n    options.push(this.uiSegmentSrv.newSegment({ type: 'expression', value: 'Expression' }));\n    return Promise.resolve(options);\n  }\n\n  addWhereAction(part: any, index: number) {\n    switch (this.whereAdd.type) {\n      case 'macro': {\n        const partModel = sqlPart.create({ type: 'macro', name: this.whereAdd.value, params: [] });\n        if (this.whereParts.length >= 1 && this.whereParts[0].def.type === 'macro') {\n          // replace current macro\n          this.whereParts[0] = partModel;\n        } else {\n          this.whereParts.splice(0, 0, partModel);\n        }\n        break;\n      }\n      default: {\n        this.whereParts.push(sqlPart.create({ type: 'expression', params: ['value', '=', 'value'] }));\n      }\n    }\n\n    this.updatePersistedParts();\n    this.resetPlusButton(this.whereAdd);\n    this.updateRawSqlAndRefresh();\n  }\n\n  getGroupOptions() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('group'))\n      .then((tags: any) => {\n        const options = [];\n        if (!this.queryModel.hasTimeGroup()) {\n          options.push(this.uiSegmentSrv.newSegment({ type: 'time', value: 'time($__interval,none)' }));\n        }\n        for (const tag of tags) {\n          options.push(this.uiSegmentSrv.newSegment({ type: 'column', value: tag.text }));\n        }\n        return options;\n      })\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  addGroupAction() {\n    switch (this.groupAdd.value) {\n      default: {\n        this.addGroup(this.groupAdd.type, this.groupAdd.value);\n      }\n    }\n\n    this.resetPlusButton(this.groupAdd);\n    this.updateRawSqlAndRefresh();\n  }\n\n  handleQueryError(err: any): any[] {\n    this.error = err.message || 'Failed to issue metric query';\n    return [];\n  }\n}\n","import { MysqlDatasource } from './datasource';\nimport { MysqlQueryCtrl } from './query_ctrl';\nimport {\n  createChangeHandler,\n  createResetHandler,\n  PasswordFieldEnum,\n} from '../../../features/datasources/utils/passwordHandlers';\n\nclass MysqlConfigCtrl {\n  static templateUrl = 'partials/config.html';\n  current: any;\n  onPasswordReset: ReturnType<typeof createResetHandler>;\n  onPasswordChange: ReturnType<typeof createChangeHandler>;\n\n  constructor() {\n    this.onPasswordReset = createResetHandler(this, PasswordFieldEnum.Password);\n    this.onPasswordChange = createChangeHandler(this, PasswordFieldEnum.Password);\n  }\n}\n\nconst defaultQuery = `SELECT\n    UNIX_TIMESTAMP(<time_column>) as time_sec,\n    <text_column> as text,\n    <tags_column> as tags\n  FROM <table name>\n  WHERE $__timeFilter(time_column)\n  ORDER BY <time_column> ASC\n  LIMIT 100\n  `;\n\nclass MysqlAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n\n  annotation: any;\n\n  /** @ngInject */\n  constructor() {\n    this.annotation.rawQuery = this.annotation.rawQuery || defaultQuery;\n  }\n}\n\nexport {\n  MysqlDatasource,\n  MysqlDatasource as Datasource,\n  MysqlQueryCtrl as QueryCtrl,\n  MysqlConfigCtrl as ConfigCtrl,\n  MysqlAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n"],"sourceRoot":""}