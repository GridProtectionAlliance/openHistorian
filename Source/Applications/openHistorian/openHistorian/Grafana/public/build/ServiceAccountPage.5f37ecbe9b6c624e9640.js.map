{"version":3,"file":"ServiceAccountPage.5f37ecbe9b6c624e9640.js","mappings":"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","sources":["webpack://grafana/./public/app/features/serviceaccounts/ServiceAccountPermissions.tsx","webpack://grafana/./public/app/features/serviceaccounts/components/ServiceAccountProfileRow.tsx","webpack://grafana/./public/app/features/serviceaccounts/components/ServiceAccountRoleRow.tsx","webpack://grafana/./public/app/features/serviceaccounts/components/ServiceAccountProfile.tsx","webpack://grafana/./public/app/features/serviceaccounts/components/ServiceAccountTokensTable.tsx","webpack://grafana/./public/app/features/serviceaccounts/state/actionsServiceAccountPage.ts","webpack://grafana/./public/app/features/serviceaccounts/ServiceAccountPage.tsx","webpack://grafana/./public/app/features/serviceaccounts/components/CreateTokenModal.tsx","webpack://grafana/./public/app/features/serviceaccounts/state/actions.ts"],"sourcesContent":["import React from 'react';\n\nimport { Permissions } from 'app/core/components/AccessControl';\nimport { contextSrv } from 'app/core/services/context_srv';\n\nimport { AccessControlAction, ServiceAccountDTO } from '../../types';\n\ntype ServiceAccountPermissionsProps = {\n  serviceAccount: ServiceAccountDTO;\n};\n\nexport const ServiceAccountPermissions = (props: ServiceAccountPermissionsProps) => {\n  const canSetPermissions = contextSrv.hasPermissionInMetadata(\n    AccessControlAction.ServiceAccountsPermissionsWrite,\n    props.serviceAccount\n  );\n\n  return (\n    <Permissions\n      title=\"Permissions\"\n      addPermissionTitle=\"Add permission\"\n      buttonLabel=\"Add permission\"\n      resource=\"serviceaccounts\"\n      resourceId={props.serviceAccount.id}\n      canSetPermissions={canSetPermissions}\n    />\n  );\n};\n","import { css, cx } from '@emotion/css';\nimport React, { useEffect, useRef, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { ConfirmButton, Input, Label, LegacyInputStatus, useStyles2 } from '@grafana/ui';\n\ninterface Props {\n  label: string;\n  value?: string;\n  inputType?: string;\n  disabled?: boolean;\n  onChange?: (value: string) => void;\n}\n\nexport const ServiceAccountProfileRow = ({ label, value, inputType, disabled, onChange }: Props): JSX.Element => {\n  const inputElem = useRef<HTMLInputElement>(null);\n  const [inputValue, setInputValue] = useState(value);\n  const [isEditing, setIsEditing] = useState(false);\n  const styles = useStyles2(getStyles);\n  const inputId = `${label}-input`;\n\n  useEffect(() => {\n    if (isEditing) {\n      focusInput();\n    }\n  }, [isEditing]);\n\n  const onEditClick = () => {\n    setIsEditing(true);\n  };\n\n  const onCancelClick = () => {\n    setIsEditing(false);\n    setInputValue(value || '');\n  };\n\n  const onInputChange = (event: React.ChangeEvent<HTMLInputElement>, status?: LegacyInputStatus) => {\n    if (status === LegacyInputStatus.Invalid) {\n      return;\n    }\n    setInputValue(event.target.value);\n  };\n\n  const onInputBlur = (event: React.FocusEvent<HTMLInputElement>, status?: LegacyInputStatus) => {\n    if (status === LegacyInputStatus.Invalid) {\n      return;\n    }\n    setInputValue(event.target.value);\n  };\n\n  const focusInput = () => {\n    inputElem?.current?.focus();\n  };\n\n  const onSave = () => {\n    setIsEditing(false);\n    if (onChange) {\n      onChange(inputValue!);\n    }\n  };\n\n  return (\n    <tr>\n      <td>\n        <Label htmlFor={inputId}>{label}</Label>\n      </td>\n      <td className=\"width-25\" colSpan={2}>\n        {!disabled && isEditing ? (\n          <Input\n            id={inputId}\n            type={inputType}\n            defaultValue={value}\n            onBlur={onInputBlur}\n            onChange={onInputChange}\n            ref={inputElem}\n            width={30}\n          />\n        ) : (\n          <span className={cx({ [styles.disabled]: disabled })}>{value}</span>\n        )}\n      </td>\n      <td>\n        {onChange && (\n          <ConfirmButton\n            closeOnConfirm\n            confirmText=\"Save\"\n            onConfirm={onSave}\n            onClick={onEditClick}\n            onCancel={onCancelClick}\n            disabled={disabled}\n          >\n            Edit\n          </ConfirmButton>\n        )}\n      </td>\n    </tr>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    disabled: css`\n      color: ${theme.colors.text.secondary};\n    `,\n  };\n};\n","import React from 'react';\n\nimport { Label } from '@grafana/ui';\nimport { UserRolePicker } from 'app/core/components/RolePicker/UserRolePicker';\nimport { contextSrv } from 'app/core/core';\nimport { OrgRolePicker } from 'app/features/admin/OrgRolePicker';\nimport { AccessControlAction, OrgRole, Role, ServiceAccountDTO } from 'app/types';\n\ninterface Props {\n  label: string;\n  serviceAccount: ServiceAccountDTO;\n  onRoleChange: (role: OrgRole) => void;\n  roleOptions: Role[];\n}\n\nexport const ServiceAccountRoleRow = ({ label, serviceAccount, roleOptions, onRoleChange }: Props): JSX.Element => {\n  const inputId = `${label}-input`;\n  const canUpdateRole = contextSrv.hasPermissionInMetadata(AccessControlAction.ServiceAccountsWrite, serviceAccount);\n\n  return (\n    <tr>\n      <td>\n        <Label htmlFor={inputId}>{label}</Label>\n      </td>\n      {contextSrv.licensedAccessControlEnabled() ? (\n        <td colSpan={3}>\n          <UserRolePicker\n            userId={serviceAccount.id}\n            orgId={serviceAccount.orgId}\n            basicRole={serviceAccount.role}\n            onBasicRoleChange={onRoleChange}\n            roleOptions={roleOptions}\n            basicRoleDisabled={!canUpdateRole}\n            disabled={serviceAccount.isDisabled}\n          />\n        </td>\n      ) : (\n        <>\n          <td>\n            <OrgRolePicker\n              width={24}\n              inputId={inputId}\n              aria-label=\"Role\"\n              value={serviceAccount.role}\n              disabled={serviceAccount.isDisabled}\n              onChange={onRoleChange}\n            />\n          </td>\n          <td colSpan={2}></td>\n        </>\n      )}\n    </tr>\n  );\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { dateTimeFormat, GrafanaTheme2, OrgRole, TimeZone } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction, Role, ServiceAccountDTO } from 'app/types';\n\nimport { ServiceAccountProfileRow } from './ServiceAccountProfileRow';\nimport { ServiceAccountRoleRow } from './ServiceAccountRoleRow';\n\ninterface Props {\n  serviceAccount: ServiceAccountDTO;\n  timeZone: TimeZone;\n  roleOptions: Role[];\n  onChange: (serviceAccount: ServiceAccountDTO) => void;\n}\n\nexport function ServiceAccountProfile({ serviceAccount, timeZone, roleOptions, onChange }: Props): JSX.Element {\n  const styles = useStyles2(getStyles);\n  const ableToWrite = contextSrv.hasPermission(AccessControlAction.ServiceAccountsWrite);\n\n  const onRoleChange = (role: OrgRole) => {\n    onChange({ ...serviceAccount, role: role });\n  };\n\n  const onNameChange = (newValue: string) => {\n    onChange({ ...serviceAccount, name: newValue });\n  };\n\n  return (\n    <div className={styles.section}>\n      <h3>Information</h3>\n      <table className=\"filter-table\">\n        <tbody>\n          <ServiceAccountProfileRow\n            label=\"Name\"\n            value={serviceAccount.name}\n            onChange={onNameChange}\n            disabled={!ableToWrite || serviceAccount.isDisabled}\n          />\n          <ServiceAccountProfileRow label=\"ID\" value={serviceAccount.login} disabled={serviceAccount.isDisabled} />\n          <ServiceAccountRoleRow\n            label=\"Roles\"\n            serviceAccount={serviceAccount}\n            onRoleChange={onRoleChange}\n            roleOptions={roleOptions}\n          />\n          <ServiceAccountProfileRow\n            label=\"Creation date\"\n            value={dateTimeFormat(serviceAccount.createdAt, { timeZone })}\n            disabled={serviceAccount.isDisabled}\n          />\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  section: css`\n    margin-bottom: ${theme.spacing(4)};\n  `,\n});\n","import { css, cx } from '@emotion/css';\nimport React from 'react';\n\nimport { dateTimeFormat, GrafanaTheme2, TimeZone } from '@grafana/data';\nimport { DeleteButton, Icon, Tooltip, useStyles2, useTheme2 } from '@grafana/ui';\nimport { ApiKey } from 'app/types';\n\ninterface Props {\n  tokens: ApiKey[];\n  timeZone: TimeZone;\n  tokenActionsDisabled?: boolean;\n  onDelete: (token: ApiKey) => void;\n}\n\nexport const ServiceAccountTokensTable = ({ tokens, timeZone, tokenActionsDisabled, onDelete }: Props): JSX.Element => {\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n\n  return (\n    <table className={cx(styles.section, 'filter-table')}>\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Expires</th>\n          <th>Created</th>\n          <th>Last used at</th>\n          <th />\n          <th />\n        </tr>\n      </thead>\n      <tbody>\n        {tokens.map((key) => {\n          return (\n            <tr key={key.id} className={styles.tableRow(key.hasExpired || key.isRevoked)}>\n              <td>{key.name}</td>\n              <td>\n                <TokenExpiration timeZone={timeZone} token={key} />\n              </td>\n              <td>{formatDate(timeZone, key.created)}</td>\n              <td>{formatLastUsedAtDate(timeZone, key.lastUsedAt)}</td>\n              <td className=\"width-1 text-center\">{key.isRevoked && <TokenRevoked />}</td>\n              <td>\n                <DeleteButton\n                  aria-label={`Delete service account token ${key.name}`}\n                  size=\"sm\"\n                  onConfirm={() => onDelete(key)}\n                  disabled={tokenActionsDisabled}\n                />\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nfunction formatLastUsedAtDate(timeZone: TimeZone, lastUsedAt?: string): string {\n  if (!lastUsedAt) {\n    return 'Never';\n  }\n  return dateTimeFormat(lastUsedAt, { timeZone });\n}\n\nfunction formatDate(timeZone: TimeZone, expiration?: string): string {\n  if (!expiration) {\n    return 'No expiration date';\n  }\n  return dateTimeFormat(expiration, { timeZone });\n}\n\nfunction formatSecondsLeftUntilExpiration(secondsUntilExpiration: number): string {\n  const days = Math.ceil(secondsUntilExpiration / (3600 * 24));\n  const daysFormat = days > 1 ? `${days} days` : `${days} day`;\n  return `Expires in ${daysFormat}`;\n}\n\nconst TokenRevoked = () => {\n  const styles = useStyles2(getStyles);\n  return (\n    <span className={styles.hasExpired}>\n      Revoked\n      <span className={styles.tooltipContainer}>\n        <Tooltip content=\"This token has been publicly exposed. Please rotate this token\">\n          <Icon name=\"exclamation-triangle\" className={styles.toolTipIcon} />\n        </Tooltip>\n      </span>\n    </span>\n  );\n};\n\ninterface TokenExpirationProps {\n  timeZone: TimeZone;\n  token: ApiKey;\n}\n\nconst TokenExpiration = ({ timeZone, token }: TokenExpirationProps) => {\n  const styles = useStyles2(getStyles);\n  if (!token.expiration) {\n    return <span className={styles.neverExpire}>Never</span>;\n  }\n  if (token.secondsUntilExpiration) {\n    return (\n      <span className={styles.secondsUntilExpiration}>\n        {formatSecondsLeftUntilExpiration(token.secondsUntilExpiration)}\n      </span>\n    );\n  }\n  if (token.hasExpired) {\n    return (\n      <span className={styles.hasExpired}>\n        Expired\n        <span className={styles.tooltipContainer}>\n          <Tooltip content=\"This token has expired\">\n            <Icon name=\"exclamation-triangle\" className={styles.toolTipIcon} />\n          </Tooltip>\n        </span>\n      </span>\n    );\n  }\n  return <span>{formatDate(timeZone, token.expiration)}</span>;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  tableRow: (hasExpired: boolean | undefined) => css`\n    color: ${hasExpired ? theme.colors.text.secondary : theme.colors.text.primary};\n  `,\n  tooltipContainer: css`\n    margin-left: ${theme.spacing(1)};\n  `,\n  toolTipIcon: css`\n    color: ${theme.colors.error.text};\n  `,\n  secondsUntilExpiration: css`\n    color: ${theme.colors.warning.text};\n  `,\n  hasExpired: css`\n    color: ${theme.colors.error.text};\n  `,\n  neverExpire: css`\n    color: ${theme.colors.text.secondary};\n  `,\n  section: css`\n    margin-bottom: ${theme.spacing(4)};\n  `,\n});\n","import { getBackendSrv, locationService } from '@grafana/runtime';\nimport { accessControlQueryParam } from 'app/core/utils/accessControl';\nimport { ServiceAccountDTO, ThunkResult } from 'app/types';\n\nimport { ServiceAccountToken } from '../components/CreateTokenModal';\n\nimport {\n  serviceAccountFetchBegin,\n  serviceAccountFetchEnd,\n  serviceAccountLoaded,\n  serviceAccountTokensLoaded,\n} from './reducers';\n\nconst BASE_URL = `/api/serviceaccounts`;\n\nexport function loadServiceAccount(saID: number): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(serviceAccountFetchBegin());\n    try {\n      const response = await getBackendSrv().get(`${BASE_URL}/${saID}`, accessControlQueryParam());\n      dispatch(serviceAccountLoaded(response));\n    } catch (error) {\n      console.error(error);\n    } finally {\n      dispatch(serviceAccountFetchEnd());\n    }\n  };\n}\n\nexport function updateServiceAccount(serviceAccount: ServiceAccountDTO): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().patch(`${BASE_URL}/${serviceAccount.id}?accesscontrol=true`, {\n      ...serviceAccount,\n    });\n    dispatch(loadServiceAccount(serviceAccount.id));\n  };\n}\n\nexport function deleteServiceAccount(serviceAccountId: number): ThunkResult<void> {\n  return async () => {\n    await getBackendSrv().delete(`${BASE_URL}/${serviceAccountId}`);\n    locationService.push('/org/serviceaccounts');\n  };\n}\n\nexport function createServiceAccountToken(\n  saID: number,\n  token: ServiceAccountToken,\n  onTokenCreated: (key: string) => void\n): ThunkResult<void> {\n  return async (dispatch) => {\n    const result = await getBackendSrv().post(`${BASE_URL}/${saID}/tokens`, token);\n    onTokenCreated(result.key);\n    dispatch(loadServiceAccountTokens(saID));\n  };\n}\n\nexport function deleteServiceAccountToken(saID: number, id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().delete(`${BASE_URL}/${saID}/tokens/${id}`);\n    dispatch(loadServiceAccountTokens(saID));\n  };\n}\n\nexport function loadServiceAccountTokens(saID: number): ThunkResult<void> {\n  return async (dispatch) => {\n    try {\n      const response = await getBackendSrv().get(`${BASE_URL}/${saID}/tokens`);\n      dispatch(serviceAccountTokensLoaded(response));\n    } catch (error) {\n      console.error(error);\n    }\n  };\n}\n","import React, { useEffect, useState } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { getTimeZone, NavModelItem } from '@grafana/data';\nimport { Button, ConfirmModal, HorizontalGroup } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { contextSrv } from 'app/core/core';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { AccessControlAction, ApiKey, Role, ServiceAccountDTO, StoreState } from 'app/types';\n\nimport { ServiceAccountPermissions } from './ServiceAccountPermissions';\nimport { CreateTokenModal, ServiceAccountToken } from './components/CreateTokenModal';\nimport { ServiceAccountProfile } from './components/ServiceAccountProfile';\nimport { ServiceAccountTokensTable } from './components/ServiceAccountTokensTable';\nimport { fetchACOptions } from './state/actions';\nimport {\n  createServiceAccountToken,\n  deleteServiceAccount,\n  deleteServiceAccountToken,\n  loadServiceAccount,\n  loadServiceAccountTokens,\n  updateServiceAccount,\n} from './state/actionsServiceAccountPage';\n\ninterface OwnProps extends GrafanaRouteComponentProps<{ id: string }> {\n  serviceAccount?: ServiceAccountDTO;\n  tokens: ApiKey[];\n  isLoading: boolean;\n  roleOptions: Role[];\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    serviceAccount: state.serviceAccountProfile.serviceAccount,\n    tokens: state.serviceAccountProfile.tokens,\n    isLoading: state.serviceAccountProfile.isLoading,\n    roleOptions: state.serviceAccounts.roleOptions,\n    timezone: getTimeZone(state.user),\n  };\n}\n\nconst mapDispatchToProps = {\n  createServiceAccountToken,\n  deleteServiceAccount,\n  deleteServiceAccountToken,\n  loadServiceAccount,\n  loadServiceAccountTokens,\n  updateServiceAccount,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport const ServiceAccountPageUnconnected = ({\n  match,\n  serviceAccount,\n  tokens,\n  timezone,\n  isLoading,\n  roleOptions,\n  createServiceAccountToken,\n  deleteServiceAccount,\n  deleteServiceAccountToken,\n  loadServiceAccount,\n  loadServiceAccountTokens,\n  updateServiceAccount,\n}: Props): JSX.Element => {\n  const [newToken, setNewToken] = useState('');\n  const [isTokenModalOpen, setIsTokenModalOpen] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isDisableModalOpen, setIsDisableModalOpen] = useState(false);\n\n  const serviceAccountId = parseInt(match.params.id, 10);\n  const tokenActionsDisabled =\n    !contextSrv.hasPermission(AccessControlAction.ServiceAccountsWrite) || serviceAccount.isDisabled;\n\n  const ableToWrite = contextSrv.hasPermission(AccessControlAction.ServiceAccountsWrite);\n  const canReadPermissions = contextSrv.hasAccessInMetadata(\n    AccessControlAction.ServiceAccountsPermissionsRead,\n    serviceAccount!,\n    false\n  );\n\n  const pageNav: NavModelItem = {\n    text: serviceAccount.name,\n    img: serviceAccount.avatarUrl,\n    breadcrumbs: [{ title: 'Service accounts', url: 'org/serviceaccounts' }],\n    subTitle: 'Manage settings for an individual service account.',\n  };\n\n  useEffect(() => {\n    loadServiceAccount(serviceAccountId);\n    loadServiceAccountTokens(serviceAccountId);\n    if (contextSrv.licensedAccessControlEnabled()) {\n      fetchACOptions();\n    }\n  }, [loadServiceAccount, loadServiceAccountTokens, serviceAccountId]);\n\n  const onProfileChange = (serviceAccount: ServiceAccountDTO) => {\n    updateServiceAccount(serviceAccount);\n  };\n\n  const showDeleteServiceAccountModal = (show: boolean) => () => {\n    setIsDeleteModalOpen(show);\n  };\n\n  const showDisableServiceAccountModal = (show: boolean) => () => {\n    setIsDisableModalOpen(show);\n  };\n\n  const handleServiceAccountDelete = () => {\n    deleteServiceAccount(serviceAccount.id);\n  };\n\n  const handleServiceAccountDisable = () => {\n    updateServiceAccount({ ...serviceAccount, isDisabled: true });\n    setIsDisableModalOpen(false);\n  };\n\n  const handleServiceAccountEnable = () => {\n    updateServiceAccount({ ...serviceAccount, isDisabled: false });\n  };\n\n  const onDeleteServiceAccountToken = (key: ApiKey) => {\n    deleteServiceAccountToken(serviceAccount?.id, key.id!);\n  };\n\n  const onCreateToken = (token: ServiceAccountToken) => {\n    createServiceAccountToken(serviceAccount?.id, token, setNewToken);\n  };\n\n  const onTokenModalClose = () => {\n    setIsTokenModalOpen(false);\n    setNewToken('');\n  };\n\n  return (\n    <Page navId=\"serviceaccounts\" pageNav={pageNav}>\n      <Page.Contents isLoading={isLoading}>\n        <div>\n          {serviceAccount && (\n            <HorizontalGroup spacing=\"md\" height=\"auto\" justify=\"flex-end\">\n              <Button\n                type={'button'}\n                variant=\"destructive\"\n                onClick={showDeleteServiceAccountModal(true)}\n                disabled={!contextSrv.hasPermission(AccessControlAction.ServiceAccountsDelete)}\n              >\n                Delete service account\n              </Button>\n              {serviceAccount.isDisabled ? (\n                <Button\n                  type={'button'}\n                  variant=\"secondary\"\n                  onClick={handleServiceAccountEnable}\n                  disabled={!ableToWrite}\n                >\n                  Enable service account\n                </Button>\n              ) : (\n                <Button\n                  type={'button'}\n                  variant=\"secondary\"\n                  onClick={showDisableServiceAccountModal(true)}\n                  disabled={!ableToWrite}\n                >\n                  Disable service account\n                </Button>\n              )}\n            </HorizontalGroup>\n          )}\n          {serviceAccount && (\n            <ServiceAccountProfile\n              serviceAccount={serviceAccount}\n              timeZone={timezone}\n              roleOptions={roleOptions}\n              onChange={onProfileChange}\n            />\n          )}\n          <HorizontalGroup justify=\"space-between\" height=\"auto\">\n            <h3>Tokens</h3>\n            <Button onClick={() => setIsTokenModalOpen(true)} disabled={tokenActionsDisabled}>\n              Add service account token\n            </Button>\n          </HorizontalGroup>\n          {tokens && (\n            <ServiceAccountTokensTable\n              tokens={tokens}\n              timeZone={timezone}\n              onDelete={onDeleteServiceAccountToken}\n              tokenActionsDisabled={tokenActionsDisabled}\n            />\n          )}\n          {canReadPermissions && <ServiceAccountPermissions serviceAccount={serviceAccount} />}\n        </div>\n\n        <ConfirmModal\n          isOpen={isDeleteModalOpen}\n          title=\"Delete service account\"\n          body=\"Are you sure you want to delete this service account?\"\n          confirmText=\"Delete service account\"\n          onConfirm={handleServiceAccountDelete}\n          onDismiss={showDeleteServiceAccountModal(false)}\n        />\n        <ConfirmModal\n          isOpen={isDisableModalOpen}\n          title=\"Disable service account\"\n          body=\"Are you sure you want to disable this service account?\"\n          confirmText=\"Disable service account\"\n          onConfirm={handleServiceAccountDisable}\n          onDismiss={showDisableServiceAccountModal(false)}\n        />\n        <CreateTokenModal\n          isOpen={isTokenModalOpen}\n          token={newToken}\n          serviceAccountLogin={serviceAccount.login}\n          onCreateToken={onCreateToken}\n          onClose={onTokenModalClose}\n        />\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default connector(ServiceAccountPageUnconnected);\n","import { css } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport {\n  Button,\n  ClipboardButton,\n  DatePickerWithInput,\n  Field,\n  Input,\n  Modal,\n  RadioButtonGroup,\n  useStyles2,\n} from '@grafana/ui';\n\nconst EXPIRATION_OPTIONS = [\n  { label: 'No expiration', value: false },\n  { label: 'Set expiration date', value: true },\n];\n\nexport type ServiceAccountToken = {\n  name: string;\n  secondsToLive?: number;\n};\n\ninterface Props {\n  isOpen: boolean;\n  token: string;\n  serviceAccountLogin: string;\n  onCreateToken: (token: ServiceAccountToken) => void;\n  onClose: () => void;\n}\n\nexport const CreateTokenModal = ({ isOpen, token, serviceAccountLogin, onCreateToken, onClose }: Props) => {\n  const tomorrow = new Date();\n  tomorrow.setDate(tomorrow.getDate() + 1);\n\n  const maxExpirationDate = new Date();\n  if (config.tokenExpirationDayLimit !== undefined && config.tokenExpirationDayLimit > -1) {\n    maxExpirationDate.setDate(maxExpirationDate.getDate() + config.tokenExpirationDayLimit + 1);\n  } else {\n    maxExpirationDate.setDate(8640000000000000);\n  }\n  const defaultExpirationDate = config.tokenExpirationDayLimit !== undefined && config.tokenExpirationDayLimit > 0;\n\n  const [defaultTokenName, setDefaultTokenName] = useState('');\n  const [newTokenName, setNewTokenName] = useState('');\n  const [isWithExpirationDate, setIsWithExpirationDate] = useState(defaultExpirationDate);\n  const [newTokenExpirationDate, setNewTokenExpirationDate] = useState<Date | string>(tomorrow);\n  const [isExpirationDateValid, setIsExpirationDateValid] = useState(newTokenExpirationDate !== '');\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    // Generate new token name every time we open modal\n    if (isOpen) {\n      setDefaultTokenName(`${serviceAccountLogin}-${uuidv4()}`);\n    }\n  }, [serviceAccountLogin, isOpen]);\n\n  const onExpirationDateChange = (value: Date | string) => {\n    const isValid = value !== '';\n    setIsExpirationDateValid(isValid);\n    setNewTokenExpirationDate(value);\n  };\n\n  const onGenerateToken = () => {\n    onCreateToken({\n      name: newTokenName || defaultTokenName,\n      secondsToLive: isWithExpirationDate ? getSecondsToLive(newTokenExpirationDate) : undefined,\n    });\n  };\n\n  const onCloseInternal = () => {\n    setNewTokenName('');\n    setDefaultTokenName('');\n    setIsWithExpirationDate(defaultExpirationDate);\n    setNewTokenExpirationDate(tomorrow);\n    setIsExpirationDateValid(newTokenExpirationDate !== '');\n    onClose();\n  };\n\n  const modalTitle = !token ? 'Add service account token' : 'Service account token created';\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={modalTitle}\n      onDismiss={onCloseInternal}\n      className={styles.modal}\n      contentClassName={styles.modalContent}\n    >\n      {!token ? (\n        <div>\n          <Field\n            label=\"Display name\"\n            description=\"Name to easily identify the token\"\n            // for now this is required\n            // need to make this optional in backend as well\n            required={true}\n          >\n            <Input\n              name=\"tokenName\"\n              value={newTokenName}\n              placeholder={defaultTokenName}\n              onChange={(e) => {\n                setNewTokenName(e.currentTarget.value);\n              }}\n            />\n          </Field>\n          {!isWithExpirationDate && (\n            <Field label=\"Expiration\">\n              <RadioButtonGroup\n                options={EXPIRATION_OPTIONS}\n                value={isWithExpirationDate}\n                onChange={setIsWithExpirationDate}\n                size=\"md\"\n              />\n            </Field>\n          )}\n          {isWithExpirationDate && (\n            <Field label=\"Expiration date\">\n              <DatePickerWithInput\n                onChange={onExpirationDateChange}\n                value={newTokenExpirationDate}\n                placeholder=\"\"\n                minDate={tomorrow}\n                maxDate={maxExpirationDate}\n              />\n            </Field>\n          )}\n          <Modal.ButtonRow>\n            <Button onClick={onGenerateToken} disabled={isWithExpirationDate && !isExpirationDateValid}>\n              Generate token\n            </Button>\n          </Modal.ButtonRow>\n        </div>\n      ) : (\n        <>\n          <Field\n            label=\"Token\"\n            description=\"Copy the token now as you will not be able to see it again. Losing a token requires creating a new one.\"\n          >\n            <div className={styles.modalTokenRow}>\n              <Input name=\"tokenValue\" value={token} readOnly />\n              <ClipboardButton\n                className={styles.modalCopyToClipboardButton}\n                variant=\"primary\"\n                size=\"md\"\n                icon=\"copy\"\n                getText={() => token}\n              >\n                Copy clipboard\n              </ClipboardButton>\n            </div>\n          </Field>\n          <Modal.ButtonRow>\n            <ClipboardButton variant=\"primary\" getText={() => token} onClipboardCopy={onCloseInternal}>\n              Copy to clipboard and close\n            </ClipboardButton>\n            <Button variant=\"secondary\" onClick={onCloseInternal}>\n              Close\n            </Button>\n          </Modal.ButtonRow>\n        </>\n      )}\n    </Modal>\n  );\n};\n\nconst getSecondsToLive = (date: Date | string) => {\n  const dateAsDate = new Date(date);\n  const now = new Date();\n\n  return Math.ceil((dateAsDate.getTime() - now.getTime()) / 1000);\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    modal: css`\n      width: 550px;\n    `,\n    modalContent: css`\n      overflow: visible;\n    `,\n    modalTokenRow: css`\n      display: flex;\n    `,\n    modalCopyToClipboardButton: css`\n      margin-left: ${theme.spacing(0.5)};\n    `,\n  };\n};\n","import { debounce } from 'lodash';\n\nimport { getBackendSrv } from '@grafana/runtime';\nimport { fetchRoleOptions } from 'app/core/components/RolePicker/api';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AccessControlAction, ServiceAccountDTO, ServiceAccountStateFilter, ThunkResult } from 'app/types';\n\nimport { ServiceAccountToken } from '../components/CreateTokenModal';\n\nimport {\n  acOptionsLoaded,\n  pageChanged,\n  queryChanged,\n  serviceAccountsFetchBegin,\n  serviceAccountsFetched,\n  serviceAccountsFetchEnd,\n  stateFilterChanged,\n} from './reducers';\n\nconst BASE_URL = `/api/serviceaccounts`;\n\nexport function fetchACOptions(): ThunkResult<void> {\n  return async (dispatch) => {\n    try {\n      if (contextSrv.licensedAccessControlEnabled() && contextSrv.hasPermission(AccessControlAction.ActionRolesList)) {\n        const options = await fetchRoleOptions();\n        dispatch(acOptionsLoaded(options));\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n}\n\ninterface FetchServiceAccountsParams {\n  withLoadingIndicator: boolean;\n}\n\nexport function fetchServiceAccounts(\n  { withLoadingIndicator }: FetchServiceAccountsParams = { withLoadingIndicator: false }\n): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    try {\n      if (contextSrv.hasPermission(AccessControlAction.ServiceAccountsRead)) {\n        if (withLoadingIndicator) {\n          dispatch(serviceAccountsFetchBegin());\n        }\n        const { perPage, page, query, serviceAccountStateFilter } = getState().serviceAccounts;\n        const result = await getBackendSrv().get(\n          `/api/serviceaccounts/search?perpage=${perPage}&page=${page}&query=${query}${getStateFilter(\n            serviceAccountStateFilter\n          )}&accesscontrol=true`\n        );\n        dispatch(serviceAccountsFetched(result));\n      }\n    } catch (error) {\n      console.error(error);\n    } finally {\n      dispatch(serviceAccountsFetchEnd());\n    }\n  };\n}\n\nconst fetchServiceAccountsWithDebounce = debounce((dispatch) => dispatch(fetchServiceAccounts()), 500, {\n  leading: true,\n});\n\nexport function updateServiceAccount(serviceAccount: ServiceAccountDTO): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().patch(`${BASE_URL}/${serviceAccount.id}?accesscontrol=true`, {\n      ...serviceAccount,\n    });\n    dispatch(fetchServiceAccounts());\n  };\n}\n\nexport function deleteServiceAccount(serviceAccountId: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().delete(`${BASE_URL}/${serviceAccountId}`);\n    dispatch(fetchServiceAccounts());\n  };\n}\n\nexport function createServiceAccountToken(\n  saID: number,\n  token: ServiceAccountToken,\n  onTokenCreated: (key: string) => void\n): ThunkResult<void> {\n  return async (dispatch) => {\n    const result = await getBackendSrv().post(`${BASE_URL}/${saID}/tokens`, token);\n    onTokenCreated(result.key);\n    dispatch(fetchServiceAccounts());\n  };\n}\n\n// search / filtering of serviceAccounts\nconst getStateFilter = (value: ServiceAccountStateFilter) => {\n  switch (value) {\n    case ServiceAccountStateFilter.WithExpiredTokens:\n      return '&expiredTokens=true';\n    case ServiceAccountStateFilter.Disabled:\n      return '&disabled=true';\n    default:\n      return '';\n  }\n};\n\nexport function changeQuery(query: string): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(queryChanged(query));\n    fetchServiceAccountsWithDebounce(dispatch);\n  };\n}\n\nexport function changeStateFilter(filter: ServiceAccountStateFilter): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(stateFilterChanged(filter));\n    dispatch(fetchServiceAccounts());\n  };\n}\n\nexport function changePage(page: number): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(pageChanged(page));\n    dispatch(fetchServiceAccounts());\n  };\n}\n"],"names":["ServiceAccountPermissions","props","canSetPermissions","ServiceAccountProfileRow","label","value","inputType","disabled","onChange","inputElem","inputValue","setInputValue","isEditing","setIsEditing","styles","getStyles","inputId","focusInput","onEditClick","onCancelClick","onInputChange","event","status","onInputBlur","onSave","Label","ConfirmButton","theme","ServiceAccountRoleRow","serviceAccount","roleOptions","onRoleChange","canUpdateRole","UserRolePicker","OrgRolePicker","ServiceAccountProfile","timeZone","ableToWrite","role","onNameChange","newValue","ServiceAccountTokensTable","tokens","tokenActionsDisabled","onDelete","key","TokenExpiration","formatDate","formatLastUsedAtDate","TokenRevoked","DeleteButton","lastUsedAt","expiration","formatSecondsLeftUntilExpiration","secondsUntilExpiration","days","Tooltip","Icon","token","hasExpired","BASE_URL","loadServiceAccount","saID","dispatch","response","accessControl","error","updateServiceAccount","deleteServiceAccount","serviceAccountId","createServiceAccountToken","onTokenCreated","result","loadServiceAccountTokens","deleteServiceAccountToken","id","mapStateToProps","state","mapDispatchToProps","connector","ServiceAccountPageUnconnected","match","timezone","isLoading","newToken","setNewToken","isTokenModalOpen","setIsTokenModalOpen","isDeleteModalOpen","setIsDeleteModalOpen","isDisableModalOpen","setIsDisableModalOpen","canReadPermissions","pageNav","onProfileChange","showDeleteServiceAccountModal","show","showDisableServiceAccountModal","handleServiceAccountDelete","handleServiceAccountDisable","handleServiceAccountEnable","onDeleteServiceAccountToken","onCreateToken","onTokenModalClose","Page","Button","ConfirmModal","CreateTokenModal","EXPIRATION_OPTIONS","isOpen","serviceAccountLogin","onClose","tomorrow","maxExpirationDate","defaultExpirationDate","defaultTokenName","setDefaultTokenName","newTokenName","setNewTokenName","isWithExpirationDate","setIsWithExpirationDate","newTokenExpirationDate","setNewTokenExpirationDate","isExpirationDateValid","setIsExpirationDateValid","onExpirationDateChange","onGenerateToken","getSecondsToLive","onCloseInternal","modalTitle","e","date","dateAsDate","now","fetchACOptions","options","fetchServiceAccounts","withLoadingIndicator","getState","perPage","page","query","serviceAccountStateFilter","getStateFilter","fetchServiceAccountsWithDebounce","changeQuery","changeStateFilter","filter","changePage"],"sourceRoot":""}