{"version":3,"file":"6196.4c777004ed5665a4f501.js","mappings":"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","sources":["webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/OperationInfoButton.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/OperationHeader.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/OperationParamEditor.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/OperationEditor.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/OperationList.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/OperationsEditorRow.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/QueryBuilderHints.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/QueryEditorModeToggle.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/QueryHeaderSwitch.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/QueryOptionGroup.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/hooks/useFlag.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useState } from 'react';\nimport { usePopperTooltip } from 'react-popper-tooltip';\n\nimport { GrafanaTheme2, renderMarkdown } from '@grafana/data';\nimport { FlexItem } from '@grafana/experimental';\nimport { Button, Portal, useStyles2 } from '@grafana/ui';\n\nimport { QueryBuilderOperation, QueryBuilderOperationDef } from './types';\n\nexport interface Props {\n  operation: QueryBuilderOperation;\n  def: QueryBuilderOperationDef;\n}\n\nexport const OperationInfoButton = React.memo<Props>(({ def, operation }) => {\n  const styles = useStyles2(getStyles);\n  const [show, setShow] = useState(false);\n  const { getTooltipProps, setTooltipRef, setTriggerRef, visible } = usePopperTooltip({\n    placement: 'top',\n    visible: show,\n    offset: [0, 16],\n    onVisibleChange: setShow,\n    interactive: true,\n    trigger: ['click'],\n  });\n\n  return (\n    <>\n      <Button\n        title=\"Click to show description\"\n        ref={setTriggerRef}\n        icon=\"info-circle\"\n        size=\"sm\"\n        variant=\"secondary\"\n        fill=\"text\"\n      />\n      {visible && (\n        <Portal>\n          <div ref={setTooltipRef} {...getTooltipProps()} className={styles.docBox}>\n            <div className={styles.docBoxHeader}>\n              <span>{def.renderer(operation, def, '<expr>')}</span>\n              <FlexItem grow={1} />\n              <Button\n                icon=\"times\"\n                onClick={() => setShow(false)}\n                fill=\"text\"\n                variant=\"secondary\"\n                title=\"Remove operation\"\n              />\n            </div>\n            <div\n              className={styles.docBoxBody}\n              dangerouslySetInnerHTML={{ __html: getOperationDocs(def, operation) }}\n            ></div>\n          </div>\n        </Portal>\n      )}\n    </>\n  );\n});\n\nOperationInfoButton.displayName = 'OperationDocs';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    docBox: css({\n      overflow: 'hidden',\n      background: theme.colors.background.primary,\n      border: `1px solid ${theme.colors.border.strong}`,\n      boxShadow: theme.shadows.z3,\n      maxWidth: '600px',\n      padding: theme.spacing(1),\n      borderRadius: theme.shape.borderRadius(),\n      zIndex: theme.zIndex.tooltip,\n    }),\n    docBoxHeader: css({\n      fontSize: theme.typography.h5.fontSize,\n      fontFamily: theme.typography.fontFamilyMonospace,\n      paddingBottom: theme.spacing(1),\n      display: 'flex',\n      alignItems: 'center',\n    }),\n    docBoxBody: css({\n      // The markdown paragraph has a marginBottom this removes it\n      marginBottom: theme.spacing(-1),\n      color: theme.colors.text.secondary,\n    }),\n    signature: css({\n      fontSize: theme.typography.bodySmall.fontSize,\n      fontFamily: theme.typography.fontFamilyMonospace,\n    }),\n    dropdown: css({\n      opacity: 0,\n      color: theme.colors.text.secondary,\n    }),\n  };\n};\nfunction getOperationDocs(def: QueryBuilderOperationDef, op: QueryBuilderOperation): string {\n  return renderMarkdown(def.explainHandler ? def.explainHandler(op, def) : def.documentation ?? 'no docs');\n}\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\nimport { DraggableProvided } from 'react-beautiful-dnd';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { FlexItem } from '@grafana/experimental';\nimport { Button, Select, useStyles2 } from '@grafana/ui';\n\nimport { OperationInfoButton } from './OperationInfoButton';\nimport { VisualQueryModeller, QueryBuilderOperation, QueryBuilderOperationDef } from './types';\n\nexport interface Props {\n  operation: QueryBuilderOperation;\n  def: QueryBuilderOperationDef;\n  index: number;\n  queryModeller: VisualQueryModeller;\n  dragHandleProps?: DraggableProvided['dragHandleProps'];\n  onChange: (index: number, update: QueryBuilderOperation) => void;\n  onRemove: (index: number) => void;\n}\n\ninterface State {\n  isOpen?: boolean;\n  alternatives?: Array<SelectableValue<QueryBuilderOperationDef>>;\n}\n\nexport const OperationHeader = React.memo<Props>(\n  ({ operation, def, index, onChange, onRemove, queryModeller, dragHandleProps }) => {\n    const styles = useStyles2(getStyles);\n    const [state, setState] = useState<State>({});\n\n    const onToggleSwitcher = () => {\n      if (state.isOpen) {\n        setState({ ...state, isOpen: false });\n      } else {\n        const alternatives = queryModeller\n          .getAlternativeOperations(def.alternativesKey!)\n          .map((alt) => ({ label: alt.name, value: alt }));\n        setState({ isOpen: true, alternatives });\n      }\n    };\n\n    return (\n      <div className={styles.header}>\n        {!state.isOpen && (\n          <>\n            <div {...dragHandleProps}>{def.name ?? def.id}</div>\n            <FlexItem grow={1} />\n            <div className={`${styles.operationHeaderButtons} operation-header-show-on-hover`}>\n              <Button\n                icon=\"angle-down\"\n                size=\"sm\"\n                onClick={onToggleSwitcher}\n                fill=\"text\"\n                variant=\"secondary\"\n                title=\"Click to view alternative operations\"\n              />\n              <OperationInfoButton def={def} operation={operation} />\n              <Button\n                icon=\"times\"\n                size=\"sm\"\n                onClick={() => onRemove(index)}\n                fill=\"text\"\n                variant=\"secondary\"\n                title=\"Remove operation\"\n              />\n            </div>\n          </>\n        )}\n        {state.isOpen && (\n          <div className={styles.selectWrapper}>\n            <Select\n              autoFocus\n              openMenuOnFocus\n              placeholder=\"Replace with\"\n              options={state.alternatives}\n              isOpen={true}\n              onCloseMenu={onToggleSwitcher}\n              onChange={(value) => {\n                if (value.value) {\n                  // Operation should exist if it is selectable\n                  const newDef = queryModeller.getOperationDef(value.value.id)!;\n\n                  // copy default params, and override with all current params\n                  const newParams = [...newDef.defaultParams];\n                  for (let i = 0; i < Math.min(operation.params.length, newParams.length); i++) {\n                    if (newDef.params[i].type === def.params[i].type) {\n                      newParams[i] = operation.params[i];\n                    }\n                  }\n\n                  const changedOp = { ...operation, params: newParams, id: value.value.id };\n                  onChange(index, def.changeTypeHandler ? def.changeTypeHandler(changedOp, newDef) : changedOp);\n                }\n              }}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n);\n\nOperationHeader.displayName = 'OperationHeader';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    header: css({\n      borderBottom: `1px solid ${theme.colors.border.medium}`,\n      padding: theme.spacing(0.5, 0.5, 0.5, 1),\n      display: 'flex',\n      alignItems: 'center',\n      '&:hover .operation-header-show-on-hover': css({\n        opacity: 1,\n      }),\n    }),\n    operationHeaderButtons: css({\n      opacity: 0,\n      transition: theme.transitions.create(['opacity'], {\n        duration: theme.transitions.duration.short,\n      }),\n    }),\n    selectWrapper: css({\n      paddingRight: theme.spacing(2),\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport React, { ComponentType } from 'react';\n\nimport { GrafanaTheme2, SelectableValue, toOption } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { AutoSizeInput, Button, Checkbox, Select, useStyles2 } from '@grafana/ui';\n\nimport { QueryBuilderOperationParamDef, QueryBuilderOperationParamEditorProps } from '../shared/types';\n\nimport { getOperationParamId } from './operationUtils';\n\nexport function getOperationParamEditor(\n  paramDef: QueryBuilderOperationParamDef\n): ComponentType<QueryBuilderOperationParamEditorProps> {\n  if (paramDef.editor) {\n    return paramDef.editor;\n  }\n\n  if (paramDef.options) {\n    return SelectInputParamEditor;\n  }\n\n  switch (paramDef.type) {\n    case 'boolean':\n      return BoolInputParamEditor;\n    case 'number':\n    case 'string':\n    default:\n      return SimpleInputParamEditor;\n  }\n}\n\nfunction SimpleInputParamEditor(props: QueryBuilderOperationParamEditorProps) {\n  return (\n    <AutoSizeInput\n      id={getOperationParamId(props.operationIndex, props.index)}\n      defaultValue={props.value?.toString()}\n      minWidth={props.paramDef.minWidth}\n      placeholder={props.paramDef.placeholder}\n      title={props.paramDef.description}\n      maxWidth={(props.paramDef.minWidth || 20) * 3}\n      onCommitChange={(evt) => {\n        props.onChange(props.index, evt.currentTarget.value);\n        if (props.paramDef.runQueryOnEnter && evt.type === 'keydown') {\n          props.onRunQuery();\n        }\n      }}\n    />\n  );\n}\n\nfunction BoolInputParamEditor(props: QueryBuilderOperationParamEditorProps) {\n  return (\n    <Checkbox\n      id={getOperationParamId(props.operationIndex, props.index)}\n      value={props.value as boolean}\n      onChange={(evt) => props.onChange(props.index, evt.currentTarget.checked)}\n    />\n  );\n}\n\nfunction SelectInputParamEditor({\n  paramDef,\n  value,\n  index,\n  operationIndex,\n  onChange,\n}: QueryBuilderOperationParamEditorProps) {\n  const styles = useStyles2(getStyles);\n  let selectOptions = paramDef.options as Array<SelectableValue<any>>;\n\n  if (!selectOptions[0]?.label) {\n    selectOptions = paramDef.options!.map((option) => ({\n      label: option.toString(),\n      value: option as string,\n    }));\n  }\n\n  let valueOption = selectOptions.find((x) => x.value === value) ?? toOption(value as string);\n\n  // If we have optional options param and don't have value, we want to render button with which we add optional options.\n  // This makes it easier to understand what needs to be selected and what is optional.\n  if (!value && paramDef.optional) {\n    return (\n      <div className={styles.optionalParam}>\n        <Button\n          size=\"sm\"\n          variant=\"secondary\"\n          title={`Add ${paramDef.name}`}\n          icon=\"plus\"\n          onClick={() => onChange(index, selectOptions[0].value)}\n        >\n          {paramDef.name}\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <Stack gap={0.5} direction=\"row\" alignItems=\"center\" wrap={false}>\n      <Select\n        id={getOperationParamId(operationIndex, index)}\n        value={valueOption}\n        options={selectOptions}\n        placeholder={paramDef.placeholder}\n        allowCustomValue={true}\n        onChange={(value) => onChange(index, value.value!)}\n        width={paramDef.minWidth || 'auto'}\n      />\n      {paramDef.optional && (\n        <Button\n          data-testid={`operations.${index}.remove-param`}\n          size=\"sm\"\n          fill=\"text\"\n          icon=\"times\"\n          variant=\"secondary\"\n          title={`Remove ${paramDef.name}`}\n          onClick={() => onChange(index, '')}\n        />\n      )}\n    </Stack>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    optionalParam: css({\n      marginTop: theme.spacing(1),\n    }),\n  };\n};\n","import { css, cx } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\nimport { Draggable } from 'react-beautiful-dnd';\n\nimport { DataSourceApi, GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { Button, Icon, InlineField, Tooltip, useTheme2 } from '@grafana/ui';\nimport { isConflictingFilter } from 'app/plugins/datasource/loki/querybuilder/operationUtils';\nimport { LokiOperationId } from 'app/plugins/datasource/loki/querybuilder/types';\n\nimport { OperationHeader } from './OperationHeader';\nimport { getOperationParamEditor } from './OperationParamEditor';\nimport { getOperationParamId } from './operationUtils';\nimport {\n  QueryBuilderOperation,\n  QueryBuilderOperationDef,\n  QueryBuilderOperationParamDef,\n  QueryBuilderOperationParamValue,\n  VisualQueryModeller,\n} from './types';\n\nexport interface Props {\n  operation: QueryBuilderOperation;\n  index: number;\n  query: any;\n  datasource: DataSourceApi;\n  queryModeller: VisualQueryModeller;\n  onChange: (index: number, update: QueryBuilderOperation) => void;\n  onRemove: (index: number) => void;\n  onRunQuery: () => void;\n  flash?: boolean;\n  highlight?: boolean;\n}\n\nexport function OperationEditor({\n  operation,\n  index,\n  onRemove,\n  onChange,\n  onRunQuery,\n  queryModeller,\n  query,\n  datasource,\n  flash,\n  highlight,\n}: Props) {\n  const def = queryModeller.getOperationDef(operation.id);\n  const shouldFlash = useFlash(flash);\n\n  const isConflicting =\n    operation.id === LokiOperationId.LabelFilter && isConflictingFilter(operation, query.operations);\n\n  const theme = useTheme2();\n  const styles = getStyles(theme, isConflicting);\n\n  if (!def) {\n    return <span>Operation {operation.id} not found</span>;\n  }\n\n  const onParamValueChanged = (paramIdx: number, value: QueryBuilderOperationParamValue) => {\n    const update: QueryBuilderOperation = { ...operation, params: [...operation.params] };\n    update.params[paramIdx] = value;\n    callParamChangedThenOnChange(def, update, index, paramIdx, onChange);\n  };\n\n  const onAddRestParam = () => {\n    const update: QueryBuilderOperation = { ...operation, params: [...operation.params, ''] };\n    callParamChangedThenOnChange(def, update, index, operation.params.length, onChange);\n  };\n\n  const onRemoveRestParam = (paramIdx: number) => {\n    const update: QueryBuilderOperation = {\n      ...operation,\n      params: [...operation.params.slice(0, paramIdx), ...operation.params.slice(paramIdx + 1)],\n    };\n    callParamChangedThenOnChange(def, update, index, paramIdx, onChange);\n  };\n\n  const operationElements: React.ReactNode[] = [];\n\n  for (let paramIndex = 0; paramIndex < operation.params.length; paramIndex++) {\n    const paramDef = def.params[Math.min(def.params.length - 1, paramIndex)];\n    const Editor = getOperationParamEditor(paramDef);\n\n    operationElements.push(\n      <div className={styles.paramRow} key={`${paramIndex}-1`}>\n        {!paramDef.hideName && (\n          <div className={styles.paramName}>\n            <label htmlFor={getOperationParamId(index, paramIndex)}>{paramDef.name}</label>\n            {paramDef.description && (\n              <Tooltip placement=\"top\" content={paramDef.description} theme=\"info\">\n                <Icon name=\"info-circle\" size=\"sm\" className={styles.infoIcon} />\n              </Tooltip>\n            )}\n          </div>\n        )}\n        <div className={styles.paramValue}>\n          <Stack gap={0.5} direction=\"row\" alignItems=\"center\" wrap={false}>\n            <Editor\n              index={paramIndex}\n              paramDef={paramDef}\n              value={operation.params[paramIndex]}\n              operation={operation}\n              operationIndex={index}\n              onChange={onParamValueChanged}\n              onRunQuery={onRunQuery}\n              query={query}\n              datasource={datasource}\n            />\n            {paramDef.restParam && (operation.params.length > def.params.length || paramDef.optional) && (\n              <Button\n                data-testid={`operations.${index}.remove-rest-param`}\n                size=\"sm\"\n                fill=\"text\"\n                icon=\"times\"\n                variant=\"secondary\"\n                title={`Remove ${paramDef.name}`}\n                onClick={() => onRemoveRestParam(paramIndex)}\n              />\n            )}\n          </Stack>\n        </div>\n      </div>\n    );\n  }\n\n  // Handle adding button for rest params\n  let restParam: React.ReactNode | undefined;\n  if (def.params.length > 0) {\n    const lastParamDef = def.params[def.params.length - 1];\n    if (lastParamDef.restParam) {\n      restParam = renderAddRestParamButton(lastParamDef, onAddRestParam, index, operation.params.length, styles);\n    }\n  }\n\n  const isInvalid = (isDragging: boolean) => {\n    if (isDragging) {\n      return undefined;\n    }\n\n    return isConflicting ? true : undefined;\n  };\n\n  return (\n    <Draggable draggableId={`operation-${index}`} index={index}>\n      {(provided, snapshot) => (\n        <InlineField\n          error={'You have conflicting label filters'}\n          invalid={isInvalid(snapshot.isDragging)}\n          className={cx(styles.error, styles.cardWrapper)}\n        >\n          <div\n            className={cx(\n              styles.card,\n              (shouldFlash || highlight) && styles.cardHighlight,\n              isConflicting && styles.cardError\n            )}\n            ref={provided.innerRef}\n            {...provided.draggableProps}\n            data-testid={`operations.${index}.wrapper`}\n          >\n            <OperationHeader\n              operation={operation}\n              dragHandleProps={provided.dragHandleProps}\n              def={def}\n              index={index}\n              onChange={onChange}\n              onRemove={onRemove}\n              queryModeller={queryModeller}\n            />\n            <div className={styles.body}>{operationElements}</div>\n            {restParam}\n            {index < query.operations.length - 1 && (\n              <div className={styles.arrow}>\n                <div className={styles.arrowLine} />\n                <div className={styles.arrowArrow} />\n              </div>\n            )}\n          </div>\n        </InlineField>\n      )}\n    </Draggable>\n  );\n}\n\n/**\n * When flash is switched on makes sure it is switched of right away, so we just flash the highlight and then fade\n * out.\n * @param flash\n */\nfunction useFlash(flash?: boolean) {\n  const [keepFlash, setKeepFlash] = useState(true);\n  useEffect(() => {\n    let t: ReturnType<typeof setTimeout>;\n    if (flash) {\n      t = setTimeout(() => {\n        setKeepFlash(false);\n      }, 1000);\n    } else {\n      setKeepFlash(true);\n    }\n\n    return () => clearTimeout(t);\n  }, [flash]);\n\n  return keepFlash && flash;\n}\n\nfunction renderAddRestParamButton(\n  paramDef: QueryBuilderOperationParamDef,\n  onAddRestParam: () => void,\n  operationIndex: number,\n  paramIndex: number,\n  styles: OperationEditorStyles\n) {\n  return (\n    <div className={styles.restParam} key={`${paramIndex}-2`}>\n      <Button\n        size=\"sm\"\n        icon=\"plus\"\n        title={`Add ${paramDef.name}`}\n        variant=\"secondary\"\n        onClick={onAddRestParam}\n        data-testid={`operations.${operationIndex}.add-rest-param`}\n      >\n        {paramDef.name}\n      </Button>\n    </div>\n  );\n}\n\nfunction callParamChangedThenOnChange(\n  def: QueryBuilderOperationDef,\n  operation: QueryBuilderOperation,\n  operationIndex: number,\n  paramIndex: number,\n  onChange: (index: number, update: QueryBuilderOperation) => void\n) {\n  if (def.paramChangedHandler) {\n    onChange(operationIndex, def.paramChangedHandler(paramIndex, operation, def));\n  } else {\n    onChange(operationIndex, operation);\n  }\n}\n\nconst getStyles = (theme: GrafanaTheme2, isConflicting: boolean) => {\n  return {\n    cardWrapper: css({\n      alignItems: 'stretch',\n    }),\n    error: css({\n      marginBottom: theme.spacing(1),\n    }),\n    card: css({\n      background: theme.colors.background.primary,\n      border: `1px solid ${theme.colors.border.medium}`,\n      display: 'flex',\n      flexDirection: 'column',\n      cursor: 'grab',\n      borderRadius: theme.shape.borderRadius(1),\n      position: 'relative',\n      transition: 'all 0.5s ease-in 0s',\n      height: isConflicting ? 'auto' : '100%',\n    }),\n    cardError: css({\n      boxShadow: `0px 0px 4px 0px ${theme.colors.warning.main}`,\n      border: `1px solid ${theme.colors.warning.main}`,\n    }),\n    cardHighlight: css({\n      boxShadow: `0px 0px 4px 0px ${theme.colors.primary.border}`,\n      border: `1px solid ${theme.colors.primary.border}`,\n    }),\n    infoIcon: css({\n      marginLeft: theme.spacing(0.5),\n      color: theme.colors.text.secondary,\n      ':hover': {\n        color: theme.colors.text.primary,\n      },\n    }),\n    body: css({\n      margin: theme.spacing(1, 1, 0.5, 1),\n      display: 'table',\n    }),\n    paramRow: css({\n      label: 'paramRow',\n      display: 'table-row',\n      verticalAlign: 'middle',\n    }),\n    paramName: css({\n      display: 'table-cell',\n      padding: theme.spacing(0, 1, 0, 0),\n      fontSize: theme.typography.bodySmall.fontSize,\n      fontWeight: theme.typography.fontWeightMedium,\n      verticalAlign: 'middle',\n      height: '32px',\n    }),\n    paramValue: css({\n      label: 'paramValue',\n      display: 'table-cell',\n      verticalAlign: 'middle',\n    }),\n    restParam: css({\n      padding: theme.spacing(0, 1, 1, 1),\n    }),\n    arrow: css({\n      position: 'absolute',\n      top: '0',\n      right: '-18px',\n      display: 'flex',\n    }),\n    arrowLine: css({\n      height: '2px',\n      width: '8px',\n      backgroundColor: theme.colors.border.strong,\n      position: 'relative',\n      top: '14px',\n    }),\n    arrowArrow: css({\n      width: 0,\n      height: 0,\n      borderTop: `5px solid transparent`,\n      borderBottom: `5px solid transparent`,\n      borderLeft: `7px solid ${theme.colors.border.strong}`,\n      position: 'relative',\n      top: '10px',\n    }),\n  };\n};\n\ntype OperationEditorStyles = ReturnType<typeof getStyles>;\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\nimport { DragDropContext, Droppable, DropResult } from 'react-beautiful-dnd';\nimport { useMountedState, usePrevious } from 'react-use';\n\nimport { DataSourceApi, GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { Button, Cascader, CascaderOption, useStyles2 } from '@grafana/ui';\n\nimport { OperationEditor } from './OperationEditor';\nimport { QueryBuilderOperation, QueryWithOperations, VisualQueryModeller } from './types';\n\nexport interface Props<T extends QueryWithOperations> {\n  query: T;\n  datasource: DataSourceApi;\n  onChange: (query: T) => void;\n  onRunQuery: () => void;\n  queryModeller: VisualQueryModeller;\n  explainMode?: boolean;\n  highlightedOp?: QueryBuilderOperation;\n}\n\nexport function OperationList<T extends QueryWithOperations>({\n  query,\n  datasource,\n  queryModeller,\n  onChange,\n  onRunQuery,\n  highlightedOp,\n}: Props<T>) {\n  const styles = useStyles2(getStyles);\n  const { operations } = query;\n\n  const opsToHighlight = useOperationsHighlight(operations);\n\n  const [cascaderOpen, setCascaderOpen] = useState(false);\n\n  const onOperationChange = (index: number, update: QueryBuilderOperation) => {\n    const updatedList = [...operations];\n    updatedList.splice(index, 1, update);\n    onChange({ ...query, operations: updatedList });\n  };\n\n  const onRemove = (index: number) => {\n    const updatedList = [...operations.slice(0, index), ...operations.slice(index + 1)];\n    onChange({ ...query, operations: updatedList });\n  };\n\n  const addOptions: CascaderOption[] = queryModeller.getCategories().map((category) => {\n    return {\n      value: category,\n      label: category,\n      items: queryModeller.getOperationsForCategory(category).map((operation) => ({\n        value: operation.id,\n        label: operation.name,\n        isLeaf: true,\n      })),\n    };\n  });\n\n  const onAddOperation = (value: string) => {\n    const operationDef = queryModeller.getOperationDef(value);\n    if (!operationDef) {\n      return;\n    }\n    onChange(operationDef.addOperationHandler(operationDef, query, queryModeller));\n    setCascaderOpen(false);\n  };\n\n  const onDragEnd = (result: DropResult) => {\n    if (!result.destination) {\n      return;\n    }\n\n    const updatedList = [...operations];\n    const element = updatedList[result.source.index];\n    updatedList.splice(result.source.index, 1);\n    updatedList.splice(result.destination.index, 0, element);\n    onChange({ ...query, operations: updatedList });\n  };\n\n  const onCascaderBlur = () => {\n    setCascaderOpen(false);\n  };\n\n  return (\n    <Stack gap={1} direction=\"column\">\n      <Stack gap={1}>\n        {operations.length > 0 && (\n          <DragDropContext onDragEnd={onDragEnd}>\n            <Droppable droppableId=\"sortable-field-mappings\" direction=\"horizontal\">\n              {(provided) => (\n                <div className={styles.operationList} ref={provided.innerRef} {...provided.droppableProps}>\n                  {operations.map((op, index) => {\n                    return (\n                      <OperationEditor\n                        key={op.id + JSON.stringify(op.params) + index}\n                        queryModeller={queryModeller}\n                        index={index}\n                        operation={op}\n                        query={query}\n                        datasource={datasource}\n                        onChange={onOperationChange}\n                        onRemove={onRemove}\n                        onRunQuery={onRunQuery}\n                        flash={opsToHighlight[index]}\n                        highlight={highlightedOp === op}\n                      />\n                    );\n                  })}\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          </DragDropContext>\n        )}\n        <div className={styles.addButton}>\n          {cascaderOpen ? (\n            <Cascader\n              options={addOptions}\n              onSelect={onAddOperation}\n              onBlur={onCascaderBlur}\n              autoFocus={true}\n              alwaysOpen={true}\n              hideActiveLevelLabel={true}\n              placeholder={'Search'}\n            />\n          ) : (\n            <Button icon={'plus'} variant={'secondary'} onClick={() => setCascaderOpen(true)} title={'Add operation'}>\n              Operations\n            </Button>\n          )}\n        </div>\n      </Stack>\n    </Stack>\n  );\n}\n\n/**\n * Returns indexes of operations that should be highlighted. We check the diff of operations added but at the same time\n * we want to highlight operations only after the initial render, so we check for mounted state and calculate the diff\n * only after.\n * @param operations\n */\nfunction useOperationsHighlight(operations: QueryBuilderOperation[]) {\n  const isMounted = useMountedState();\n  const prevOperations = usePrevious(operations);\n\n  if (!isMounted()) {\n    return operations.map(() => false);\n  }\n\n  if (!prevOperations) {\n    return operations.map(() => true);\n  }\n\n  let newOps: boolean[] = [];\n\n  if (prevOperations.length - 1 === operations.length && operations.every((op) => prevOperations.includes(op))) {\n    // In case we remove one op and does not change any ops then don't highlight anything.\n    return operations.map(() => false);\n  }\n  if (prevOperations.length + 1 === operations.length && prevOperations.every((op) => operations.includes(op))) {\n    // If we add a single op just find it and highlight just that.\n    const newOp = operations.find((op) => !prevOperations.includes(op));\n    newOps = operations.map((op) => {\n      return op === newOp;\n    });\n  } else {\n    // Default diff of all ops.\n    newOps = operations.map((op, index) => {\n      return !isSameOp(op.id, prevOperations[index]?.id);\n    });\n  }\n  return newOps;\n}\n\nfunction isSameOp(op1?: string, op2?: string) {\n  return op1 === op2 || `__${op1}_by` === op2 || op1 === `__${op2}_by`;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    heading: css({\n      label: 'heading',\n      fontSize: 12,\n      fontWeight: theme.typography.fontWeightMedium,\n      marginBottom: 0,\n    }),\n    operationList: css({\n      label: 'operationList',\n      display: 'flex',\n      flexWrap: 'wrap',\n      gap: theme.spacing(2),\n    }),\n    addButton: css({\n      label: 'addButton',\n      width: 126,\n      paddingBottom: theme.spacing(1),\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { useStyles2 } from '@grafana/ui';\n\ninterface Props {\n  children: React.ReactNode;\n}\n\nexport function OperationsEditorRow({ children }: Props) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.root}>\n      <Stack gap={1}>{children}</Stack>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    root: css({\n      padding: theme.spacing(1, 1, 0, 1),\n      backgroundColor: theme.colors.background.secondary,\n      borderRadius: theme.shape.borderRadius(1),\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport React, { useState, useEffect } from 'react';\n\nimport { GrafanaTheme2, PanelData, QueryHint } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Button, Tooltip, useStyles2 } from '@grafana/ui';\nimport { LokiDatasource } from 'app/plugins/datasource/loki/datasource';\n\nimport { PrometheusDatasource } from '../../datasource';\n\nimport { LokiAndPromQueryModellerBase, PromLokiVisualQuery } from './LokiAndPromQueryModellerBase';\n\nexport interface Props<T extends PromLokiVisualQuery> {\n  query: T;\n  datasource: PrometheusDatasource | LokiDatasource;\n  queryModeller: LokiAndPromQueryModellerBase;\n  buildVisualQueryFromString: (expr: string) => { query: T };\n  onChange: (update: T) => void;\n  data?: PanelData;\n}\n\nexport const QueryBuilderHints = <T extends PromLokiVisualQuery>({\n  datasource,\n  query: visualQuery,\n  onChange,\n  data,\n  queryModeller,\n  buildVisualQueryFromString,\n}: Props<T>) => {\n  const [hints, setHints] = useState<QueryHint[]>([]);\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    const query = { expr: queryModeller.renderQuery(visualQuery), refId: '' };\n    // For now show only actionable hints\n    const hints = datasource.getQueryHints(query, data?.series || []).filter((hint) => hint.fix?.action);\n    setHints(hints);\n  }, [datasource, visualQuery, data, queryModeller]);\n\n  return (\n    <>\n      {hints.length > 0 && (\n        <div className={styles.container}>\n          {hints.map((hint) => {\n            return (\n              <Tooltip content={`${hint.label} ${hint.fix?.label}`} key={hint.type}>\n                <Button\n                  onClick={() => {\n                    reportInteraction('grafana_query_builder_hints_clicked', {\n                      hint: hint.type,\n                      datasourceType: datasource.type,\n                    });\n\n                    if (hint?.fix?.action) {\n                      const query = { expr: queryModeller.renderQuery(visualQuery), refId: '' };\n                      const newQuery = datasource.modifyQuery(query, hint.fix.action);\n                      const newVisualQuery = buildVisualQueryFromString(newQuery.expr);\n                      return onChange(newVisualQuery.query);\n                    }\n                  }}\n                  fill=\"outline\"\n                  size=\"sm\"\n                  className={styles.hint}\n                >\n                  hint: {hint.fix?.title || hint.fix?.action?.type.toLowerCase().replace('_', ' ')}\n                </Button>\n              </Tooltip>\n            );\n          })}\n        </div>\n      )}\n    </>\n  );\n};\n\nQueryBuilderHints.displayName = 'QueryBuilderHints';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      display: flex;\n      align-items: start;\n    `,\n    hint: css`\n      margin-right: ${theme.spacing(1)};\n    `,\n  };\n};\n","import React from 'react';\n\nimport { RadioButtonGroup } from '@grafana/ui';\n\nimport { QueryEditorMode } from './types';\n\nexport interface Props {\n  mode: QueryEditorMode;\n  onChange: (mode: QueryEditorMode) => void;\n}\n\nconst editorModes = [\n  { label: 'Builder', value: QueryEditorMode.Builder },\n  { label: 'Code', value: QueryEditorMode.Code },\n];\n\nexport function QueryEditorModeToggle({ mode, onChange }: Props) {\n  return (\n    <div data-testid={'QueryEditorModeToggle'}>\n      <RadioButtonGroup options={editorModes} size=\"sm\" value={mode} onChange={onChange} />\n    </div>\n  );\n}\n","import { css } from '@emotion/css';\nimport { uniqueId } from 'lodash';\nimport React, { HTMLProps, useRef } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { Switch, useStyles2 } from '@grafana/ui';\n\nexport interface Props extends Omit<HTMLProps<HTMLInputElement>, 'value' | 'ref'> {\n  value?: boolean;\n  label: string;\n}\n\nexport function QueryHeaderSwitch({ label, ...inputProps }: Props) {\n  const dashedLabel = label.replace(' ', '-');\n  const switchIdRef = useRef(uniqueId(`switch-${dashedLabel}`));\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Stack gap={1}>\n      <label htmlFor={switchIdRef.current} className={styles.switchLabel}>\n        {label}\n      </label>\n      <Switch {...inputProps} id={switchIdRef.current} />\n    </Stack>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    switchLabel: css({\n      color: theme.colors.text.secondary,\n      cursor: 'pointer',\n      fontSize: theme.typography.bodySmall.fontSize,\n      '&:hover': {\n        color: theme.colors.text.primary,\n      },\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\nimport { useToggle } from 'react-use';\n\nimport { getValueFormat, GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { Icon, useStyles2 } from '@grafana/ui';\nimport { QueryStats } from 'app/plugins/datasource/loki/types';\n\nexport interface Props {\n  title: string;\n  collapsedInfo: string[];\n  queryStats?: QueryStats;\n  children: React.ReactNode;\n}\n\nexport function QueryOptionGroup({ title, children, collapsedInfo, queryStats }: Props) {\n  const [isOpen, toggleOpen] = useToggle(false);\n  const styles = useStyles2(getStyles);\n\n  const convertUnits = (): string => {\n    const { text, suffix } = getValueFormat('bytes')(queryStats!.bytes, 1);\n    return text + suffix;\n  };\n\n  return (\n    <div className={styles.wrapper}>\n      <Stack gap={0} direction=\"column\">\n        <div className={styles.header} onClick={toggleOpen} title=\"Click to edit options\">\n          <div className={styles.toggle}>\n            <Icon name={isOpen ? 'angle-down' : 'angle-right'} />\n          </div>\n          <h6 className={styles.title}>{title}</h6>\n          {!isOpen && (\n            <div className={styles.description}>\n              {collapsedInfo.map((x, i) => (\n                <span key={i}>{x}</span>\n              ))}\n            </div>\n          )}\n        </div>\n        {isOpen && <div className={styles.body}>{children}</div>}\n      </Stack>\n      {queryStats && <p className={styles.stats}>This query will process approximately {convertUnits()}.</p>}\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrapper: css({\n      width: '100%',\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'baseline',\n    }),\n    switchLabel: css({\n      color: theme.colors.text.secondary,\n      cursor: 'pointer',\n      fontSize: theme.typography.bodySmall.fontSize,\n      '&:hover': {\n        color: theme.colors.text.primary,\n      },\n    }),\n    header: css({\n      display: 'flex',\n      cursor: 'pointer',\n      alignItems: 'baseline',\n      color: theme.colors.text.primary,\n      '&:hover': {\n        background: theme.colors.emphasize(theme.colors.background.primary, 0.03),\n      },\n    }),\n    title: css({\n      flexGrow: 1,\n      overflow: 'hidden',\n      fontSize: theme.typography.bodySmall.fontSize,\n      fontWeight: theme.typography.fontWeightMedium,\n      margin: 0,\n    }),\n    description: css({\n      color: theme.colors.text.secondary,\n      fontSize: theme.typography.bodySmall.fontSize,\n      paddingLeft: theme.spacing(2),\n      gap: theme.spacing(2),\n      display: 'flex',\n    }),\n    body: css({\n      display: 'flex',\n      paddingTop: theme.spacing(2),\n      gap: theme.spacing(2),\n      flexWrap: 'wrap',\n    }),\n    toggle: css({\n      color: theme.colors.text.secondary,\n      marginRight: `${theme.spacing(1)}`,\n    }),\n    stats: css({\n      margin: '0px',\n      color: theme.colors.text.secondary,\n      fontSize: theme.typography.bodySmall.fontSize,\n    }),\n  };\n};\n","import { useCallback, useState } from 'react';\n\nimport store from '../../../../../../core/store';\n\nexport const promQueryEditorExplainKey = 'PrometheusQueryEditorExplainDefault';\nexport const promQueryEditorRawQueryKey = 'PrometheusQueryEditorRawQueryDefault';\nexport const lokiQueryEditorExplainKey = 'LokiQueryEditorExplainDefault';\nexport const lokiQueryEditorRawQueryKey = 'LokiQueryEditorRawQueryDefault';\n\nexport type QueryEditorFlags =\n  | typeof promQueryEditorExplainKey\n  | typeof promQueryEditorRawQueryKey\n  | typeof lokiQueryEditorExplainKey\n  | typeof lokiQueryEditorRawQueryKey;\n\nfunction getFlagValue(key: QueryEditorFlags, defaultValue = false): boolean {\n  const val = store.get(key);\n  return val === undefined ? defaultValue : Boolean(parseInt(val, 10));\n}\n\nfunction setFlagValue(key: QueryEditorFlags, value: boolean) {\n  store.set(key, value ? '1' : '0');\n}\n\ntype UseFlagHookReturnType = { flag: boolean; setFlag: (val: boolean) => void };\n\n/**\n *\n * Use and store value of explain/rawquery switch in local storage.\n * Needs to be a hook with local state to trigger re-renders.\n */\nexport function useFlag(key: QueryEditorFlags, defaultValue = false): UseFlagHookReturnType {\n  const [flag, updateFlag] = useState(getFlagValue(key, defaultValue));\n  const setter = useCallback(\n    (value: boolean) => {\n      setFlagValue(key, value);\n      updateFlag(value);\n    },\n    [key]\n  );\n\n  return { flag, setFlag: setter };\n}\n"],"names":["OperationInfoButton","def","operation","styles","getStyles","show","setShow","getTooltipProps","setTooltipRef","setTriggerRef","visible","Button","Portal","getOperationDocs","theme","op","OperationHeader","index","onChange","onRemove","queryModeller","dragHandleProps","state","setState","onToggleSwitcher","alternatives","alt","Select","value","newDef","newParams","i","changedOp","getOperationParamEditor","paramDef","SelectInputParamEditor","BoolInputParamEditor","SimpleInputParamEditor","props","AutoSizeInput","evt","Checkbox","operationIndex","selectOptions","option","valueOption","x","OperationEditor","onRunQuery","query","datasource","flash","highlight","shouldFlash","useFlash","isConflicting","onParamValueChanged","paramIdx","update","callParamChangedThenOnChange","onAddRestParam","onRemoveRestParam","operationElements","paramIndex","Editor","Tooltip","Icon","restParam","lastParamDef","renderAddRestParamButton","isInvalid","isDragging","provided","snapshot","InlineField","keepFlash","setKeepFlash","t","OperationList","highlightedOp","operations","opsToHighlight","useOperationsHighlight","cascaderOpen","setCascaderOpen","onOperationChange","updatedList","addOptions","category","onAddOperation","operationDef","onDragEnd","result","element","onCascaderBlur","Cascader","isMounted","useMountedState","prevOperations","usePrevious","newOps","newOp","isSameOp","op1","op2","OperationsEditorRow","children","QueryBuilderHints","visualQuery","data","buildVisualQueryFromString","hints","setHints","hint","newQuery","newVisualQuery","editorModes","QueryEditorModeToggle","mode","QueryHeaderSwitch","label","inputProps","dashedLabel","switchIdRef","QueryOptionGroup","title","collapsedInfo","queryStats","isOpen","toggleOpen","convertUnits","text","suffix","promQueryEditorExplainKey","promQueryEditorRawQueryKey","lokiQueryEditorExplainKey","lokiQueryEditorRawQueryKey","getFlagValue","key","defaultValue","val","setFlagValue","useFlag","flag","updateFlag","setter"],"sourceRoot":""}