{"version":3,"file":"PluginListPage.3082f37964d5d9c67277.js","mappings":"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","sources":["webpack://grafana/./public/app/features/plugins/admin/components/Badges/PluginDisabledBadge.tsx","webpack://grafana/./public/app/features/plugins/admin/components/Badges/sharedStyles.ts","webpack://grafana/./public/app/features/plugins/admin/components/Badges/PluginInstallBadge.tsx","webpack://grafana/./public/app/features/plugins/admin/components/Badges/PluginEnterpriseBadge.tsx","webpack://grafana/./public/app/features/plugins/admin/components/Badges/PluginUpdateAvailableBadge.tsx","webpack://grafana/./public/app/features/plugins/admin/components/Badges/PluginAngularBadge.tsx","webpack://grafana/./public/app/features/plugins/admin/components/Badges/PluginDeprecatedBadge.tsx","webpack://grafana/./public/app/features/plugins/admin/components/RoadmapLinks.tsx","webpack://grafana/./public/app/features/plugins/admin/components/PluginListItemBadges.tsx","webpack://grafana/./public/app/features/plugins/admin/components/PluginLogo.tsx","webpack://grafana/./public/app/features/plugins/admin/components/PluginListItem.tsx","webpack://grafana/./public/app/features/plugins/admin/components/PluginList.tsx","webpack://grafana/./public/app/features/plugins/admin/components/SearchField.tsx","webpack://grafana/./public/app/features/plugins/admin/components/UpdateAllModalBody.tsx","webpack://grafana/./public/app/features/plugins/admin/components/UpdateAllModal.tsx","webpack://grafana/./public/app/features/plugins/admin/hooks/useHistory.tsx","webpack://grafana/./public/app/features/plugins/admin/pages/Browse.tsx","webpack://grafana/./public/app/features/plugins/admin/state/selectors.ts","webpack://grafana/./public/app/features/plugins/admin/state/hooks.ts"],"sourcesContent":["import * as React from 'react';\n\nimport { PluginErrorCode } from '@grafana/data';\nimport { Badge } from '@grafana/ui';\n\ntype Props = { error?: PluginErrorCode };\n\nexport function PluginDisabledBadge({ error }: Props): React.ReactElement {\n  const tooltip = errorCodeToTooltip(error);\n  return <Badge icon=\"exclamation-triangle\" text=\"Disabled\" color=\"red\" tooltip={tooltip} />;\n}\n\nfunction errorCodeToTooltip(error?: PluginErrorCode): string | undefined {\n  switch (error) {\n    case PluginErrorCode.modifiedSignature:\n      return 'Plugin disabled due to modified content';\n    case PluginErrorCode.invalidSignature:\n      return 'Plugin disabled due to invalid plugin signature';\n    case PluginErrorCode.missingSignature:\n      return 'Plugin disabled due to missing plugin signature';\n    case null:\n    case undefined:\n      return 'Plugin disabled';\n    default:\n      return `Plugin disabled due to unknown error${error ? `: ${error}` : ''}`;\n  }\n}\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nexport const getBadgeColor = (theme: GrafanaTheme2) => css`\n  background: ${theme.colors.background.primary};\n  border-color: ${theme.colors.border.strong};\n  color: ${theme.colors.text.secondary};\n`;\n","import * as React from 'react';\n\nimport { Badge, useStyles2 } from '@grafana/ui';\n\nimport { getBadgeColor } from './sharedStyles';\n\nexport function PluginInstalledBadge(): React.ReactElement {\n  const customBadgeStyles = useStyles2(getBadgeColor);\n  return <Badge text=\"Installed\" color=\"orange\" className={customBadgeStyles} />;\n}\n","import * as React from 'react';\n\nimport { featureEnabled } from '@grafana/runtime';\nimport { Badge, PluginSignatureBadge, Stack, useStyles2 } from '@grafana/ui';\n\nimport { CatalogPlugin } from '../../types';\n\nimport { getBadgeColor } from './sharedStyles';\n\ntype Props = { plugin: CatalogPlugin };\n\nexport function PluginEnterpriseBadge({ plugin }: Props): React.ReactElement {\n  const customBadgeStyles = useStyles2(getBadgeColor);\n\n  if (featureEnabled('enterprise.plugins')) {\n    return <Badge text=\"Enterprise\" color=\"blue\" />;\n  }\n\n  return (\n    <Stack wrap={'wrap'}>\n      <PluginSignatureBadge status={plugin.signature} />\n      <Badge\n        icon=\"lock\"\n        role=\"img\"\n        aria-label=\"lock icon\"\n        text=\"Enterprise\"\n        color=\"blue\"\n        className={customBadgeStyles}\n        title=\"Requires a Grafana Enterprise license\"\n      />\n    </Stack>\n  );\n}\n","import { css } from '@emotion/css';\nimport * as React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { CatalogPlugin } from '../../types';\n\ntype Props = {\n  plugin: CatalogPlugin;\n};\n\nexport function PluginUpdateAvailableBadge({ plugin }: Props): React.ReactElement | null {\n  const styles = useStyles2(getStyles);\n  return <p className={styles.hasUpdate}>Update available!</p>;\n}\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    hasUpdate: css`\n      color: ${theme.colors.text.secondary};\n      font-size: ${theme.typography.bodySmall.fontSize};\n      margin-bottom: 0;\n    `,\n  };\n};\n","import * as React from 'react';\n\nimport { Badge } from '@grafana/ui';\n\nexport function PluginAngularBadge(): React.ReactElement {\n  return (\n    <Badge\n      icon=\"exclamation-triangle\"\n      text=\"Angular\"\n      color=\"orange\"\n      tooltip=\"This plugin uses deprecated functionality, support for which is being removed.\"\n    />\n  );\n}\n","import * as React from 'react';\n\nimport { Badge } from '@grafana/ui';\n\nexport function PluginDeprecatedBadge(): React.ReactElement {\n  return (\n    <Badge\n      icon=\"exclamation-triangle\"\n      text=\"Deprecated\"\n      color=\"orange\"\n      tooltip=\"This plugin is deprecated and no longer receives updates.\"\n    />\n  );\n}\n","import { reportInteraction } from '@grafana/runtime';\nimport { Space, TextLink } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\nexport const RoadmapLinks = () => {\n  return (\n    <div>\n      <Space v={2} />\n      <TextLink\n        href=\"https://github.com/grafana/grafana/issues/new?assignees=&labels=area%2Fdatasource%2Ctype%2Fnew-plugin-request&projects=&template=3-data_source_request.yaml&title=%5BNew+Data+Source%5D%3A+%3Cname-of-service%3E\"\n        onClick={() => reportInteraction('connections_data_source_request_clicked')}\n        external\n      >\n        <Trans i18nKey=\"connections.connect-data.request-data-source\">Request a new data source</Trans>\n      </TextLink>\n      <br />\n      <TextLink\n        href=\"https://github.com/orgs/grafana/projects/619/views/1?pane=info\"\n        onClick={() => reportInteraction('connections_data_source_roadmap_clicked')}\n        external\n      >\n        <Trans i18nKey=\"connections.connect-data.roadmap\">View roadmap</Trans>\n      </TextLink>\n    </div>\n  );\n};\n","import { PluginSignatureBadge, Stack } from '@grafana/ui';\n\nimport { isPluginUpdateable } from '../helpers';\nimport { CatalogPlugin } from '../types';\n\nimport {\n  PluginEnterpriseBadge,\n  PluginDisabledBadge,\n  PluginInstalledBadge,\n  PluginUpdateAvailableBadge,\n  PluginAngularBadge,\n  PluginDeprecatedBadge,\n} from './Badges';\n\ntype PluginBadgeType = {\n  plugin: CatalogPlugin;\n};\n\nexport function PluginListItemBadges({ plugin }: PluginBadgeType) {\n  // Currently renderer plugins are not supported by the catalog due to complications related to installation / update / uninstall.\n  const canUpdate = isPluginUpdateable(plugin);\n  if (plugin.isEnterprise) {\n    return (\n      <Stack height=\"auto\" wrap=\"wrap\">\n        <PluginEnterpriseBadge plugin={plugin} />\n        {plugin.isDisabled && <PluginDisabledBadge error={plugin.error} />}\n        {canUpdate && <PluginUpdateAvailableBadge plugin={plugin} />}\n        {plugin.angularDetected && <PluginAngularBadge />}\n      </Stack>\n    );\n  }\n\n  return (\n    <Stack height=\"auto\" wrap=\"wrap\">\n      <PluginSignatureBadge status={plugin.signature} />\n      {plugin.isDisabled && <PluginDisabledBadge error={plugin.error} />}\n      {plugin.isDeprecated && <PluginDeprecatedBadge />}\n      {plugin.isInstalled && <PluginInstalledBadge />}\n      {canUpdate && <PluginUpdateAvailableBadge plugin={plugin} />}\n      {plugin.angularDetected && <PluginAngularBadge />}\n    </Stack>\n  );\n}\n","import * as React from 'react';\n\ntype PluginLogoProps = {\n  alt: string;\n  className?: string;\n  src: string;\n  height?: string | number;\n};\n\nexport function PluginLogo({ alt, className, src, height }: PluginLogoProps): React.ReactElement {\n  return <img src={src} className={className} alt={alt} loading=\"lazy\" height={height} />;\n}\n","import { css, cx } from '@emotion/css';\nimport Skeleton from 'react-loading-skeleton';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { locationService, reportInteraction } from '@grafana/runtime';\nimport { Badge, Icon, Stack, useStyles2 } from '@grafana/ui';\nimport { SkeletonComponent, attachSkeleton } from '@grafana/ui/src/unstable';\n\nimport { CatalogPlugin, PluginIconName } from '../types';\n\nimport { PluginListItemBadges } from './PluginListItemBadges';\nimport { PluginLogo } from './PluginLogo';\n\nexport const LOGO_SIZE = '48px';\n\ntype Props = {\n  plugin: CatalogPlugin;\n  pathName: string;\n};\n\nfunction PluginListItemComponent({ plugin, pathName }: Props) {\n  const styles = useStyles2(getStyles);\n\n  const reportUserClickInteraction = () => {\n    if (locationService.getSearchObject()?.q) {\n      reportInteraction('plugins_search_user_click', {});\n    }\n  };\n  return (\n    <a href={`${pathName}/${plugin.id}`} className={cx(styles.container)} onClick={reportUserClickInteraction}>\n      <PluginLogo src={plugin.info.logos.small} className={styles.pluginLogo} height={LOGO_SIZE} alt=\"\" />\n      <h2 className={cx(styles.name, 'plugin-name')}>{plugin.name}</h2>\n      <div className={cx(styles.content, 'plugin-content')}>\n        <p>By {plugin.orgName}</p>\n        <PluginListItemBadges plugin={plugin} />\n      </div>\n      <div className={styles.pluginType}>\n        {plugin.type && <Icon name={PluginIconName[plugin.type]} title={`${plugin.type} plugin`} />}\n      </div>\n    </a>\n  );\n}\n\nconst PluginListItemSkeleton: SkeletonComponent = ({ rootProps }) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={cx(styles.container)} {...rootProps}>\n      <Skeleton\n        containerClassName={cx(\n          styles.pluginLogo,\n          css({\n            lineHeight: 1,\n          })\n        )}\n        width={LOGO_SIZE}\n        height={LOGO_SIZE}\n      />\n      <h2 className={styles.name}>\n        <Skeleton width={100} />\n      </h2>\n      <div className={styles.content}>\n        <p>\n          <Skeleton width={120} />\n        </p>\n        <Stack direction=\"row\">\n          <Badge.Skeleton />\n          <Badge.Skeleton />\n        </Stack>\n      </div>\n      <div className={styles.pluginType}>\n        <Skeleton width={16} height={16} />\n      </div>\n    </div>\n  );\n};\n\nexport const PluginListItem = attachSkeleton(PluginListItemComponent, PluginListItemSkeleton);\n\n// Styles shared between the different type of list items\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css({\n      display: 'grid',\n      gridTemplateColumns: `${LOGO_SIZE} 1fr ${theme.spacing(3)}`,\n      gridTemplateRows: 'auto',\n      gap: theme.spacing(2),\n      gridAutoFlow: 'row',\n      background: theme.colors.background.secondary,\n      borderRadius: theme.shape.radius.default,\n      padding: theme.spacing(3),\n      [theme.transitions.handleMotion('no-preference', 'reduce')]: {\n        transition: theme.transitions.create(['background-color', 'box-shadow', 'border-color', 'color'], {\n          duration: theme.transitions.duration.short,\n        }),\n      },\n\n      '&:hover': {\n        background: theme.colors.emphasize(theme.colors.background.secondary, 0.03),\n      },\n    }),\n    pluginType: css({\n      gridArea: '1 / 3 / 2 / 4',\n      color: theme.colors.text.secondary,\n    }),\n    pluginLogo: css({\n      gridArea: '1 / 1 / 3 / 2',\n      maxWidth: '100%',\n      alignSelf: 'center',\n      objectFit: 'contain',\n    }),\n    content: css({\n      gridArea: '3 / 1 / 4 / 3',\n      color: theme.colors.text.secondary,\n    }),\n    name: css({\n      gridArea: '1 / 2 / 3 / 3',\n      alignSelf: 'center',\n      fontSize: theme.typography.h4.fontSize,\n      color: theme.colors.text.primary,\n      margin: 0,\n      wordBreak: 'normal',\n      overflowWrap: 'anywhere',\n    }),\n  };\n};\n","import { useLocation } from 'react-router-dom-v5-compat';\n\nimport { config } from '@grafana/runtime';\nimport { EmptyState, Grid } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { CatalogPlugin } from '../types';\n\nimport { PluginListItem } from './PluginListItem';\n\ninterface Props {\n  plugins: CatalogPlugin[];\n  isLoading?: boolean;\n}\n\nexport const PluginList = ({ plugins, isLoading }: Props) => {\n  const { pathname } = useLocation();\n  const pathName = config.appSubUrl + (pathname.endsWith('/') ? pathname.slice(0, -1) : pathname);\n\n  if (!isLoading && plugins.length === 0) {\n    return <EmptyState variant=\"not-found\" message={t('plugins.empty-state.message', 'No plugins found')} />;\n  }\n\n  return (\n    <Grid gap={3} {...{ minColumnWidth: 34 }} data-testid=\"plugin-list\">\n      {isLoading\n        ? new Array(50).fill(null).map((_, index) => <PluginListItem.Skeleton key={index} />)\n        : plugins.map((plugin) => <PluginListItem key={plugin.id} plugin={plugin} pathName={pathName} />)}\n    </Grid>\n  );\n};\n","import { useState, useRef } from 'react';\nimport * as React from 'react';\nimport { useDebounce } from 'react-use';\n\nimport { FilterInput } from '@grafana/ui';\n\ninterface Props {\n  value?: string;\n  onSearch: (value: string) => void;\n}\n\n// useDebounce has a bug which causes it to fire on first render. This wrapper prevents that.\n// https://github.com/streamich/react-use/issues/759\nconst useDebounceWithoutFirstRender = (callBack: () => void, delay = 0, deps: React.DependencyList = []) => {\n  const isFirstRender = useRef(true);\n  const debounceDeps = [...deps, isFirstRender];\n\n  return useDebounce(\n    () => {\n      if (isFirstRender.current) {\n        isFirstRender.current = false;\n        return;\n      }\n      return callBack();\n    },\n    delay,\n    debounceDeps\n  );\n};\n\nexport const SearchField = ({ value, onSearch }: Props) => {\n  const [query, setQuery] = useState(value);\n\n  useDebounceWithoutFirstRender(() => onSearch(query ?? ''), 500, [query]);\n\n  return (\n    <FilterInput\n      value={query}\n      onKeyDown={(e) => {\n        if (e.key === 'Enter' || e.keyCode === 13) {\n          onSearch(e.currentTarget.value);\n        }\n      }}\n      placeholder=\"Search Grafana plugins\"\n      onChange={(value) => {\n        setQuery(value);\n      }}\n      width={46}\n    />\n  );\n};\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Checkbox, EmptyState, Icon, Spinner, Tooltip, useStyles2 } from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { CatalogPlugin } from '../types';\n\ntype UpdateError = {\n  id: string;\n  message: string;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  table: css({\n    marginTop: theme.spacing(2),\n    width: '100%',\n    borderCollapse: 'collapse',\n  }),\n  tableRow: css({\n    borderBottom: `1px solid ${theme.colors.border.weak}`,\n    td: {\n      paddingRight: theme.spacing(1),\n    },\n  }),\n  icon: css({\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  }),\n  header: css({\n    textAlign: 'left',\n    padding: theme.spacing(1),\n    borderBottom: `2px solid ${theme.colors.border.strong}`,\n    th: {\n      paddingRight: theme.spacing(1),\n    },\n  }),\n  data: css({\n    padding: '10px',\n  }),\n  footer: css({\n    fontSize: theme.typography.bodySmall.fontSize,\n    marginTop: theme.spacing(3),\n  }),\n  noPluginsMessage: css({\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: '100%',\n  }),\n  tableContainer: css({\n    overflowY: 'auto',\n    overflowX: 'hidden',\n    maxHeight: theme.spacing(41),\n    marginBottom: theme.spacing(2),\n  }),\n  errorIcon: css({\n    color: theme.colors.error.main,\n  }),\n  successIcon: css({\n    color: theme.colors.success.main,\n  }),\n  pluginsInstalled: css({\n    svg: {\n      marginRight: theme.spacing(1),\n    },\n  }),\n});\n\nconst StatusIcon = ({\n  id,\n  inProgress,\n  isSelected,\n  isInstalled,\n  errorMap,\n}: {\n  id: string;\n  inProgress: boolean;\n  isSelected: boolean;\n  isInstalled: boolean;\n  errorMap: Map<string, UpdateError>;\n}) => {\n  const styles = useStyles2(getStyles);\n\n  if (errorMap && errorMap.has(id)) {\n    return (\n      <Tooltip\n        content={`${t('plugins.catalog.update-all.error', 'Error updating plugin:')} ${errorMap.get(id)?.message}`}\n      >\n        <Icon className={styles.errorIcon} size=\"xl\" name=\"exclamation-triangle\" />\n      </Tooltip>\n    );\n  }\n  if (isInstalled) {\n    return <Icon className={styles.successIcon} size=\"xl\" name=\"check\" />;\n  }\n  if (inProgress && isSelected) {\n    return <Spinner />;\n  }\n  return '';\n};\n\ntype Props = {\n  plugins: CatalogPlugin[];\n  pluginsNotInstalled: Set<string>;\n  inProgress: boolean;\n  selectedPlugins?: Set<string>;\n  onCheckboxChange: (id: string) => void;\n  errorMap: Map<string, UpdateError>;\n};\n\nexport const UpdateModalBody = ({\n  plugins,\n  pluginsNotInstalled,\n  inProgress,\n  selectedPlugins,\n  onCheckboxChange,\n  errorMap,\n}: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const numberInstalled = plugins.length - pluginsNotInstalled.size;\n  const installationFinished = plugins.length !== pluginsNotInstalled.size && !inProgress;\n\n  return (\n    <div>\n      {plugins.length === 0 ? (\n        <EmptyState\n          variant=\"completed\"\n          message={t('plugins.catalog.update-all.all-plugins-updated', 'All plugins updated!')}\n        />\n      ) : (\n        <>\n          <div>\n            <Trans i18nKey=\"plugins.catalog.update-all.header\">The following plugins have update available</Trans>\n          </div>\n          <div className={styles.tableContainer}>\n            <table className={styles.table}>\n              <thead className={styles.header}>\n                <tr>\n                  <th>\n                    <Trans i18nKey=\"plugins.catalog.update-all.update-header\">Update</Trans>\n                  </th>\n                  <th>\n                    <Trans i18nKey=\"plugins.catalog.update-all.name-header\">Name</Trans>\n                  </th>\n                  <th>\n                    <Trans i18nKey=\"plugins.catalog.update-all.installed-header\">Installed</Trans>\n                  </th>\n                  <th>\n                    <Trans i18nKey=\"plugins.catalog.update-all.available-header\">Available</Trans>\n                  </th>\n                  <th></th>\n                </tr>\n              </thead>\n              <tbody>\n                {plugins.map(({ id, name, installedVersion, latestVersion }: CatalogPlugin) => (\n                  <tr key={id} className={styles.tableRow}>\n                    <td>\n                      <Checkbox\n                        onChange={() => onCheckboxChange(id)}\n                        value={selectedPlugins?.has(id)}\n                        disabled={!pluginsNotInstalled.has(id)}\n                      />\n                    </td>\n                    <td>{name}</td>\n                    <td>{installedVersion}</td>\n                    <td>{latestVersion}</td>\n                    <td className={styles.icon}>\n                      <StatusIcon\n                        id={id}\n                        inProgress={inProgress}\n                        isSelected={selectedPlugins?.has(id) ?? false}\n                        isInstalled={!pluginsNotInstalled.has(id)}\n                        errorMap={errorMap}\n                      />\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n          {numberInstalled > 0 && installationFinished && (\n            <div className={styles.pluginsInstalled}>\n              <Icon className={styles.successIcon} size=\"lg\" name=\"check\" />\n              {`${numberInstalled} ${t('plugins.catalog.update-all.update-status-text', 'plugins updated')}`}\n            </div>\n          )}\n          {errorMap.size > 0 && installationFinished && (\n            <div className={styles.pluginsInstalled}>\n              <Icon className={styles.errorIcon} size=\"lg\" name=\"exclamation-triangle\" />\n              {`${errorMap.size} ${t('plugins.catalog.update-all.error-status-text', 'failed - see error messages')}`}\n            </div>\n          )}\n          {config.pluginAdminExternalManageEnabled && config.featureToggles.managedPluginsInstall && (\n            <footer className={styles.footer}>\n              <Trans i18nKey=\"plugins.catalog.update-all.cloud-update-message\">\n                * It may take a few minutes for the plugins to be available for usage.\n              </Trans>\n            </footer>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n","import { useEffect, useMemo, useRef, useState } from 'react';\n\nimport { config, reportInteraction } from '@grafana/runtime';\nimport { ConfirmModal } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { useInstall, useInstallStatus } from '../state/hooks';\nimport { CatalogPlugin } from '../types';\n\nimport { UpdateModalBody } from './UpdateAllModalBody';\nconst PLUGINS_UPDATE_ALL_INTERACTION_EVENT_NAME = 'plugins_update_all_clicked';\n\ntype UpdateError = {\n  id: string;\n  message: string;\n};\n\ntype Props = {\n  isOpen: boolean;\n  isLoading: boolean;\n  onDismiss: () => void;\n  plugins: CatalogPlugin[];\n};\n\nexport const UpdateAllModal = ({ isOpen, onDismiss, isLoading, plugins }: Props) => {\n  const install = useInstall();\n  const { error } = useInstallStatus();\n  const [errorMap, setErrorMap] = useState(new Map<string, UpdateError>());\n  const [inProgress, setInProgress] = useState(false);\n  const [selectedPlugins, setSelectedPlugins] = useState<Set<string>>();\n  const initialPluginsRef = useRef(plugins);\n\n  const pluginsSet = useMemo(() => new Set(plugins.map((plugin) => plugin.id)), [plugins]);\n  const installsRemaining = plugins.length;\n\n  // Since the plugins comes from the store and changes every time we update a plugin,\n  // we need to keep track of the initial plugins.\n  useEffect(() => {\n    if (initialPluginsRef.current.length === 0) {\n      initialPluginsRef.current = [...plugins];\n    }\n  }, [plugins]);\n\n  // Updates the component state on every plugins change, since the installation will change the store content\n  useEffect(() => {\n    if (inProgress) {\n      selectedPlugins?.forEach((id) => {\n        if (!pluginsSet.has(id)) {\n          setSelectedPlugins((prevSelectedPlugins) => {\n            const newSelectedPlugins = new Set(prevSelectedPlugins);\n            newSelectedPlugins.delete(id);\n            return newSelectedPlugins;\n          });\n        }\n      });\n\n      if (selectedPlugins?.size === 0) {\n        setInProgress(false);\n      }\n    }\n  }, [inProgress, pluginsSet, selectedPlugins]);\n\n  // Initialize the component with all the plugins selected\n  useEffect(() => {\n    if (selectedPlugins === undefined && plugins.length > 0 && !isLoading) {\n      const initialSelectedPlugins = new Set(plugins.map((plugin) => plugin.id));\n      setSelectedPlugins(initialSelectedPlugins);\n    }\n  }, [isLoading, plugins, selectedPlugins]);\n\n  // Updates the component state on every error that comes from the store\n  useEffect(() => {\n    if (inProgress && error && !errorMap.has(error.id) && selectedPlugins?.has(error.id)) {\n      setErrorMap((prevErrorMap) => {\n        const newErrorMap = new Map(prevErrorMap);\n        newErrorMap.set(error.id, error);\n        return newErrorMap;\n      });\n\n      setSelectedPlugins((prevSelectedPlugins) => {\n        const newSelectedPlugins = new Set(prevSelectedPlugins);\n        newSelectedPlugins.delete(error.id);\n        return newSelectedPlugins;\n      });\n    }\n  }, [error, errorMap, inProgress, selectedPlugins]);\n\n  const onConfirm = async () => {\n    if (!inProgress) {\n      reportInteraction(PLUGINS_UPDATE_ALL_INTERACTION_EVENT_NAME);\n\n      setInProgress(true);\n\n      // in cloud the requests need to be sync\n      if (config.pluginAdminExternalManageEnabled && config.featureToggles.managedPluginsInstall) {\n        for (let plugin of plugins) {\n          if (selectedPlugins?.has(plugin.id)) {\n            await install(plugin.id, plugin.latestVersion, true);\n          }\n        }\n      } else {\n        plugins.forEach((plugin) => {\n          if (selectedPlugins?.has(plugin.id)) {\n            install(plugin.id, plugin.latestVersion, true);\n          }\n        });\n      }\n    }\n  };\n\n  const onDismissClick = () => {\n    initialPluginsRef.current = [];\n    setErrorMap(new Map());\n    setInProgress(false);\n    setSelectedPlugins(undefined);\n    onDismiss();\n  };\n\n  const onCheckboxChange = (id: string) => {\n    setSelectedPlugins((prevSelectedPlugins) => {\n      const newSelectedPlugins = new Set(prevSelectedPlugins);\n      if (newSelectedPlugins.has(id)) {\n        newSelectedPlugins.delete(id);\n      } else {\n        newSelectedPlugins.add(id);\n      }\n      return newSelectedPlugins;\n    });\n    if (errorMap.has(id)) {\n      setErrorMap((prevErrorMap) => {\n        const newErrorMap = new Map(prevErrorMap);\n        newErrorMap.delete(id);\n        return newErrorMap;\n      });\n    }\n  };\n\n  const pluginsSelected = selectedPlugins?.size || 0;\n\n  return (\n    <ConfirmModal\n      isOpen={isOpen}\n      title={t('plugins.catalog.update-all.modal-title', 'Update Plugins')}\n      body={\n        <UpdateModalBody\n          plugins={initialPluginsRef.current}\n          pluginsNotInstalled={pluginsSet}\n          inProgress={inProgress}\n          errorMap={errorMap}\n          onCheckboxChange={onCheckboxChange}\n          selectedPlugins={selectedPlugins}\n        />\n      }\n      onConfirm={installsRemaining > 0 ? onConfirm : onDismissClick}\n      onDismiss={onDismissClick}\n      disabled={shouldDisableConfirm(inProgress, installsRemaining, pluginsSelected)}\n      confirmText={getConfirmationText(installsRemaining, inProgress, pluginsSelected)}\n      confirmButtonVariant=\"primary\"\n    />\n  );\n};\n\nfunction getConfirmationText(installsRemaining: number, inProgress: boolean, pluginsSelected: number) {\n  if (inProgress) {\n    return t('plugins.catalog.update-all.modal-in-progress', 'Updating...');\n  }\n\n  if (installsRemaining > 0) {\n    return t('plugins.catalog.update-all.modal-confirmation', 'Update') + ` (${pluginsSelected})`;\n  }\n  return t('plugins.catalog.update-all.modal-dismiss', 'Close');\n}\n\nfunction shouldDisableConfirm(inProgress: boolean, installsRemaining: number, pluginsSelected: number) {\n  if (inProgress) {\n    return true;\n  }\n\n  if (installsRemaining > 0 && pluginsSelected === 0) {\n    return true;\n  }\n\n  return false;\n}\n\nexport default UpdateAllModal;\n","import { locationService } from '@grafana/runtime';\n\nexport const useHistory = () => {\n  return {\n    push: ({ query }: { query: Parameters<typeof locationService.partial>[0] }) => {\n      locationService.partial(query);\n    },\n  };\n};\n","import { css } from '@emotion/css';\nimport { useState } from 'react';\nimport { useLocation } from 'react-router-dom-v5-compat';\n\nimport { SelectableValue, GrafanaTheme2, PluginType } from '@grafana/data';\nimport { locationSearchToObject } from '@grafana/runtime';\nimport { Select, RadioButtonGroup, useStyles2, Tooltip, Field, Button } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { Trans } from 'app/core/internationalization';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { ROUTES as CONNECTIONS_ROUTES } from 'app/features/connections/constants';\nimport { useSelector } from 'app/types';\n\nimport { HorizontalGroup } from '../components/HorizontalGroup';\nimport { PluginList } from '../components/PluginList';\nimport { RoadmapLinks } from '../components/RoadmapLinks';\nimport { SearchField } from '../components/SearchField';\nimport { UpdateAllModal } from '../components/UpdateAllModal';\nimport { Sorters } from '../helpers';\nimport { useHistory } from '../hooks/useHistory';\nimport { useGetAll, useGetUpdatable, useIsRemotePluginsAvailable } from '../state/hooks';\n\nexport default function Browse() {\n  const location = useLocation();\n  const locationSearch = locationSearchToObject(location.search);\n  const navModel = useSelector((state) => getNavModel(state.navIndex, 'plugins'));\n  const styles = useStyles2(getStyles);\n  const history = useHistory();\n  const remotePluginsAvailable = useIsRemotePluginsAvailable();\n  const keyword = locationSearch.q?.toString() || '';\n  const filterBy = locationSearch.filterBy?.toString() || 'all';\n  const filterByType = (locationSearch.filterByType as PluginType | 'all') || 'all';\n  const sortBy = (locationSearch.sortBy as Sorters) || Sorters.nameAsc;\n  const { isLoading, error, plugins } = useGetAll(\n    {\n      keyword,\n      type: filterByType !== 'all' ? filterByType : undefined,\n      isInstalled: filterBy === 'installed' ? true : undefined,\n      hasUpdate: filterBy === 'has-update' ? true : undefined,\n    },\n    sortBy\n  );\n\n  const filterByOptions = [\n    { value: 'all', label: 'All' },\n    { value: 'installed', label: 'Installed' },\n    { value: 'has-update', label: 'New Updates' },\n  ];\n\n  const { isLoading: areUpdatesLoading, updatablePlugins } = useGetUpdatable();\n  const [showUpdateModal, setShowUpdateModal] = useState(false);\n  const disableUpdateAllButton = updatablePlugins.length <= 0 || areUpdatesLoading;\n\n  const onSortByChange = (value: SelectableValue<string>) => {\n    history.push({ query: { sortBy: value.value } });\n  };\n\n  const onFilterByChange = (value: string) => {\n    history.push({ query: { filterBy: value } });\n  };\n\n  const onFilterByTypeChange = (value: SelectableValue<string>) => {\n    history.push({ query: { filterByType: value.value } });\n  };\n\n  const onSearch = (q: string) => {\n    history.push({ query: { filterBy, filterByType, q } });\n  };\n\n  const onUpdateAll = () => {\n    setShowUpdateModal(true);\n  };\n\n  // How should we handle errors?\n  if (error) {\n    console.error(error.message);\n    return null;\n  }\n\n  const subTitle = (\n    <div>\n      Extend the Grafana experience with panel plugins and apps. To find more data sources go to{' '}\n      <a className=\"external-link\" href={`${CONNECTIONS_ROUTES.AddNewConnection}?cat=data-source`}>\n        Connections\n      </a>\n      .\n    </div>\n  );\n  const updateAll = (\n    <Button disabled={disableUpdateAllButton} onClick={onUpdateAll}>\n      <Trans i18nKey=\"plugins.catalog.update-all.button\">Update all</Trans>\n      {disableUpdateAllButton ? '' : ` (${updatablePlugins.length})`}\n    </Button>\n  );\n\n  return (\n    <Page navModel={navModel} actions={updateAll} subTitle={subTitle}>\n      <Page.Contents>\n        <HorizontalGroup wrap>\n          <Field label=\"Search\">\n            <SearchField value={keyword} onSearch={onSearch} />\n          </Field>\n          <HorizontalGroup wrap className={styles.actionBar}>\n            {/* Filter by type */}\n            <Field label=\"Type\">\n              <Select\n                aria-label=\"Plugin type filter\"\n                value={filterByType}\n                onChange={onFilterByTypeChange}\n                width={18}\n                options={[\n                  { value: 'all', label: 'All' },\n                  { value: 'datasource', label: 'Data sources' },\n                  { value: 'panel', label: 'Panels' },\n                  { value: 'app', label: 'Applications' },\n                ]}\n              />\n            </Field>\n\n            {/* Filter by installed / all */}\n            {remotePluginsAvailable ? (\n              <Field label=\"State\">\n                <RadioButtonGroup value={filterBy} onChange={onFilterByChange} options={filterByOptions} />\n              </Field>\n            ) : (\n              <Tooltip\n                content=\"This filter has been disabled because the Grafana server cannot access grafana.com\"\n                placement=\"top\"\n              >\n                <div>\n                  <Field label=\"State\">\n                    <RadioButtonGroup\n                      disabled={true}\n                      value={filterBy}\n                      onChange={onFilterByChange}\n                      options={filterByOptions}\n                    />\n                  </Field>\n                </div>\n              </Tooltip>\n            )}\n\n            {/* Sorting */}\n            <Field label=\"Sort\">\n              <Select\n                aria-label=\"Sort Plugins List\"\n                width={24}\n                value={sortBy}\n                onChange={onSortByChange}\n                options={[\n                  { value: 'nameAsc', label: 'By name (A-Z)' },\n                  { value: 'nameDesc', label: 'By name (Z-A)' },\n                  { value: 'updated', label: 'By updated date' },\n                  { value: 'published', label: 'By published date' },\n                  { value: 'downloads', label: 'By downloads' },\n                ]}\n              />\n            </Field>\n          </HorizontalGroup>\n        </HorizontalGroup>\n        <div className={styles.listWrap}>\n          <PluginList plugins={plugins} isLoading={isLoading} />\n        </div>\n        <RoadmapLinks />\n        <UpdateAllModal\n          isOpen={showUpdateModal}\n          isLoading={areUpdatesLoading}\n          onDismiss={() => setShowUpdateModal(false)}\n          plugins={updatablePlugins}\n        />\n      </Page.Contents>\n    </Page>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  actionBar: css({\n    [theme.breakpoints.up('xl')]: {\n      marginLeft: 'auto',\n    },\n  }),\n  listWrap: css({\n    marginTop: theme.spacing(2),\n  }),\n  displayAs: css({\n    svg: {\n      marginRight: 0,\n    },\n  }),\n});\n","import { createSelector } from '@reduxjs/toolkit';\n\nimport { PluginError, PluginType, unEscapeStringFromRegex } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\n\nimport { filterByKeyword, isPluginUpdateable } from '../helpers';\nimport { RequestStatus, PluginCatalogStoreState } from '../types';\n\nimport { pluginsAdapter } from './reducer';\n\nexport const selectRoot = (state: PluginCatalogStoreState) => state.plugins;\n\nexport const selectItems = createSelector(selectRoot, ({ items }) => items);\n\nexport const { selectAll, selectById } = pluginsAdapter.getSelectors(selectItems);\n\nexport type PluginFilters = {\n  // Searches for a string in certain fields (e.g. \"name\" or \"orgName\")\n  // (Note: this will be an escaped regex string as it comes from `FilterInput`)\n  keyword?: string;\n\n  // (Optional, only applied if set)\n  type?: PluginType;\n\n  // (Optional, only applied if set)\n  isInstalled?: boolean;\n\n  // (Optional, only applied if set)\n  isEnterprise?: boolean;\n\n  // (Optional, only applied if set)\n  hasUpdate?: boolean;\n};\n\nexport const selectPlugins = (filters: PluginFilters) =>\n  createSelector(selectAll, (plugins) => {\n    const keyword = filters.keyword ? unEscapeStringFromRegex(filters.keyword.toLowerCase()) : '';\n    const filteredPluginIds = keyword !== '' ? filterByKeyword(plugins, keyword) : null;\n\n    if (keyword) {\n      reportInteraction('plugins_search', { resultsCount: filteredPluginIds?.length });\n    }\n    return plugins.filter((plugin) => {\n      if (keyword && filteredPluginIds == null) {\n        return false;\n      }\n\n      if (keyword && !filteredPluginIds?.includes(plugin.id)) {\n        return false;\n      }\n\n      if (filters.type && plugin.type !== filters.type) {\n        return false;\n      }\n\n      if (filters.isInstalled !== undefined && plugin.isInstalled !== filters.isInstalled) {\n        return false;\n      }\n\n      if (filters.isEnterprise !== undefined && plugin.isEnterprise !== filters.isEnterprise) {\n        return false;\n      }\n\n      if (filters.hasUpdate !== undefined && (plugin.hasUpdate !== filters.hasUpdate || !isPluginUpdateable(plugin))) {\n        return false;\n      }\n\n      return true;\n    });\n  });\n\nexport const selectPluginErrors = (filterByPluginType?: PluginType) =>\n  createSelector(selectAll, (plugins) => {\n    const pluginErrors: PluginError[] = [];\n    for (const plugin of plugins) {\n      if (plugin.error && (!filterByPluginType || plugin.type === filterByPluginType)) {\n        pluginErrors.push({\n          pluginId: plugin.id,\n          errorCode: plugin.error,\n          pluginType: plugin.type,\n        });\n      }\n    }\n    return pluginErrors;\n  });\n\n// The following selectors are used to get information about the outstanding or completed plugins-related network requests.\nexport const selectRequest = (actionType: string) =>\n  createSelector(selectRoot, ({ requests = {} }) => requests[actionType]);\n\nexport const selectIsRequestPending = (actionType: string) =>\n  createSelector(selectRequest(actionType), (request) => request?.status === RequestStatus.Pending);\n\nexport const selectRequestError = (actionType: string) =>\n  createSelector(selectRequest(actionType), (request) =>\n    request?.status === RequestStatus.Rejected ? request?.error : null\n  );\n\nexport const selectIsRequestNotFetched = (actionType: string) =>\n  createSelector(selectRequest(actionType), (request) => request === undefined);\n","import { useEffect, useMemo } from 'react';\n\nimport { PluginError, PluginType } from '@grafana/data';\nimport { useDispatch, useSelector } from 'app/types';\n\nimport { sortPlugins, Sorters, isPluginUpdateable } from '../helpers';\nimport { CatalogPlugin } from '../types';\n\nimport { fetchAll, fetchDetails, fetchRemotePlugins, install, uninstall, fetchAllLocal, unsetInstall } from './actions';\nimport {\n  selectPlugins,\n  selectById,\n  selectIsRequestPending,\n  selectRequestError,\n  selectIsRequestNotFetched,\n  selectPluginErrors,\n  type PluginFilters,\n} from './selectors';\n\nexport const useGetAll = (filters: PluginFilters, sortBy: Sorters = Sorters.nameAsc) => {\n  useFetchAll();\n\n  const selector = useMemo(() => selectPlugins(filters), [filters]);\n  const plugins = useSelector(selector);\n  // As the locally installed plugins load quicker than the remote ones, we only show a loading state until these are being loaded\n  // (In case the remote ones are not loaded within a reasonable timeout, we will merge those with the locally installed plugins once they are loaded)\n  const { isLoading, error } = useLocalFetchStatus();\n  const sortedPlugins = sortPlugins(plugins, sortBy);\n\n  return {\n    isLoading,\n    error,\n    plugins: sortedPlugins,\n  };\n};\n\nexport const useGetUpdatable = () => {\n  const { isLoading } = useFetchStatus();\n  const { plugins: installed } = useGetAll({ isInstalled: true });\n  const updatablePlugins = installed.filter(isPluginUpdateable);\n  return {\n    isLoading,\n    updatablePlugins,\n  };\n};\n\nexport const useGetSingle = (id: string): CatalogPlugin | undefined => {\n  useFetchAll();\n  useFetchDetails(id);\n\n  return useSelector((state) => selectById(state, id));\n};\n\nexport const useGetSingleLocalWithoutDetails = (id: string): CatalogPlugin | undefined => {\n  useFetchAllLocal();\n  return useSelector((state) => selectById(state, id));\n};\n\nexport const useGetErrors = (filterByPluginType?: PluginType): PluginError[] => {\n  useFetchAll();\n\n  return useSelector(selectPluginErrors(filterByPluginType));\n};\n\nexport const useInstall = () => {\n  const dispatch = useDispatch();\n  return (id: string, version?: string, isUpdating?: boolean) => dispatch(install({ id, version, isUpdating }));\n};\n\nexport const useUnsetInstall = () => {\n  const dispatch = useDispatch();\n\n  return () => dispatch(unsetInstall());\n};\n\nexport const useUninstall = () => {\n  const dispatch = useDispatch();\n\n  return (id: string) => dispatch(uninstall(id));\n};\n\nexport const useIsRemotePluginsAvailable = () => {\n  const error = useSelector(selectRequestError(fetchRemotePlugins.typePrefix));\n  return error === null;\n};\n\nexport const useLocalFetchStatus = () => {\n  const isLoading = useSelector(selectIsRequestPending('plugins/fetchLocal'));\n  const error = useSelector(selectRequestError('plugins/fetchLocal'));\n\n  return { isLoading, error };\n};\n\nexport const useFetchStatus = () => {\n  const isAllLoading = useSelector(selectIsRequestPending(fetchAll.typePrefix));\n  const isLocalLoading = useSelector(selectIsRequestPending('plugins/fetchLocal'));\n  const isRemoteLoading = useSelector(selectIsRequestPending('plugins/fetchRemote'));\n  const isLoading = isAllLoading || isLocalLoading || isRemoteLoading;\n  const error = useSelector(selectRequestError(fetchAll.typePrefix));\n\n  return { isLoading, error };\n};\n\nexport const useFetchDetailsStatus = () => {\n  const isLoading = useSelector(selectIsRequestPending(fetchDetails.typePrefix));\n  const error = useSelector(selectRequestError(fetchDetails.typePrefix));\n\n  return { isLoading, error };\n};\n\nexport const useInstallStatus = () => {\n  const isInstalling = useSelector(selectIsRequestPending(install.typePrefix));\n  const error = useSelector(selectRequestError(install.typePrefix));\n\n  return { isInstalling, error };\n};\n\nexport const useUninstallStatus = () => {\n  const isUninstalling = useSelector(selectIsRequestPending(uninstall.typePrefix));\n  const error = useSelector(selectRequestError(uninstall.typePrefix));\n\n  return { isUninstalling, error };\n};\n\n// Only fetches in case they were not fetched yet\nexport const useFetchAll = () => {\n  const dispatch = useDispatch();\n  const isNotFetched = useSelector(selectIsRequestNotFetched(fetchAll.typePrefix));\n\n  useEffect(() => {\n    isNotFetched && dispatch(fetchAll());\n  }, []); // eslint-disable-line\n};\n\n// Only fetches in case they were not fetched yet\nexport const useFetchAllLocal = () => {\n  const dispatch = useDispatch();\n  const isNotFetched = useSelector(selectIsRequestNotFetched(fetchAllLocal.typePrefix));\n\n  useEffect(() => {\n    isNotFetched && dispatch(fetchAllLocal());\n  }, []); // eslint-disable-line\n};\n\nexport const useFetchDetails = (id: string) => {\n  const dispatch = useDispatch();\n  const plugin = useSelector((state) => selectById(state, id));\n  const isNotFetching = !useSelector(selectIsRequestPending(fetchDetails.typePrefix));\n  const shouldFetch = isNotFetching && plugin && !plugin.details;\n\n  useEffect(() => {\n    shouldFetch && dispatch(fetchDetails(id));\n  }, [plugin]); // eslint-disable-line\n};\n\nexport const useFetchDetailsLazy = () => {\n  const dispatch = useDispatch();\n\n  return (id: string) => dispatch(fetchDetails(id));\n};\n"],"names":["PluginDisabledBadge","error","tooltip","errorCodeToTooltip","Badge","getBadgeColor","theme","PluginInstalledBadge","customBadgeStyles","PluginEnterpriseBadge","plugin","Stack","PluginSignatureBadge","PluginUpdateAvailableBadge","styles","getStyles","PluginAngularBadge","PluginDeprecatedBadge","RoadmapLinks","PluginListItemBadges","canUpdate","PluginLogo","alt","className","src","height","LOGO_SIZE","PluginListItemComponent","pathName","reportUserClickInteraction","Icon","PluginListItemSkeleton","rootProps","PluginListItem","PluginList","plugins","isLoading","pathname","config","EmptyState","Grid","_","index","useDebounceWithoutFirstRender","callBack","delay","deps","isFirstRender","debounceDeps","useDebounce","SearchField","value","onSearch","query","setQuery","FilterInput","e","StatusIcon","id","inProgress","isSelected","isInstalled","errorMap","Tooltip","Spinner","UpdateModalBody","pluginsNotInstalled","selectedPlugins","onCheckboxChange","numberInstalled","installationFinished","name","installedVersion","latestVersion","Checkbox","PLUGINS_UPDATE_ALL_INTERACTION_EVENT_NAME","UpdateAllModal","isOpen","onDismiss","install","setErrorMap","setInProgress","setSelectedPlugins","initialPluginsRef","pluginsSet","installsRemaining","prevSelectedPlugins","newSelectedPlugins","initialSelectedPlugins","prevErrorMap","newErrorMap","onConfirm","onDismissClick","pluginsSelected","ConfirmModal","shouldDisableConfirm","getConfirmationText","useHistory","Browse","location","locationSearch","navModel","state","history","remotePluginsAvailable","keyword","filterBy","filterByType","sortBy","filterByOptions","areUpdatesLoading","updatablePlugins","showUpdateModal","setShowUpdateModal","disableUpdateAllButton","onSortByChange","onFilterByChange","onFilterByTypeChange","q","onUpdateAll","subTitle","updateAll","Button","Page","HorizontalGroup","Field","Select","RadioButtonGroup","selectRoot","selectItems","items","selectAll","selectPlugins","filters","filteredPluginIds","selectPluginErrors","filterByPluginType","pluginErrors","selectRequest","actionType","requests","selectIsRequestPending","request","selectRequestError","useGetAll","useFetchAll","selector","useLocalFetchStatus","sortedPlugins","useGetUpdatable","useFetchStatus","installed","useGetSingle","useFetchDetails","useGetSingleLocalWithoutDetails","useFetchAllLocal","useGetErrors","useInstall","dispatch","version","isUpdating","useUnsetInstall","useUninstall","useIsRemotePluginsAvailable","isAllLoading","isLocalLoading","isRemoteLoading","useFetchDetailsStatus","useInstallStatus","isInstalling","useUninstallStatus","isUninstalling","isNotFetched","shouldFetch","useFetchDetailsLazy"],"sourceRoot":""}