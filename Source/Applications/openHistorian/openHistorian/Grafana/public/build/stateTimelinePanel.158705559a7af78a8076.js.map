{"version":3,"file":"stateTimelinePanel.158705559a7af78a8076.js","mappings":"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","sources":["webpack://grafana/./public/app/plugins/panel/state-timeline/panelcfg.gen.ts","webpack://grafana/./public/app/plugins/panel/state-timeline/StateTimelinePanel.tsx","webpack://grafana/./public/app/plugins/panel/state-timeline/migrations.ts","webpack://grafana/./public/app/plugins/panel/state-timeline/suggestions.ts","webpack://grafana/./public/app/plugins/panel/state-timeline/module.tsx"],"sourcesContent":["// Code generated - EDITING IS FUTILE. DO NOT EDIT.\n//\n// Generated by:\n//     public/app/plugins/gen.go\n// Using jennies:\n//     TSTypesJenny\n//     PluginTsTypesJenny\n//\n// Run 'make gen-cue' from repository root to regenerate.\n\nimport * as ui from '@grafana/schema';\n\nexport interface Options extends ui.OptionsWithLegend, ui.OptionsWithTooltip, ui.OptionsWithTimezones {\n  /**\n   * Controls value alignment on the timelines\n   */\n  alignValue?: ui.TimelineValueAlignment;\n  /**\n   * Merge equal consecutive values\n   */\n  mergeValues?: boolean;\n  /**\n   * Enables pagination when > 0\n   */\n  perPage?: number;\n  /**\n   * Controls the row height\n   */\n  rowHeight: number;\n  /**\n   * Show timeline values on chart\n   */\n  showValue: ui.VisibilityMode;\n}\n\nexport const defaultOptions: Partial<Options> = {\n  alignValue: 'left',\n  mergeValues: true,\n  perPage: 20,\n  rowHeight: 0.9,\n  showValue: ui.VisibilityMode.Auto,\n};\n\nexport interface FieldConfig extends ui.HideableFieldConfig {\n  fillOpacity?: number;\n  lineWidth?: number;\n}\n\nexport const defaultFieldConfig: Partial<FieldConfig> = {\n  fillOpacity: 70,\n  lineWidth: 0,\n};\n","import { css } from '@emotion/css';\nimport { useMemo, useState } from 'react';\nimport { useMeasure } from 'react-use';\n\nimport { DashboardCursorSync, DataFrame, PanelProps } from '@grafana/data';\nimport {\n  EventBusPlugin,\n  Pagination,\n  TooltipDisplayMode,\n  TooltipPlugin2,\n  usePanelContext,\n  useTheme2,\n} from '@grafana/ui';\nimport { TimeRange2, TooltipHoverMode } from '@grafana/ui/src/components/uPlot/plugins/TooltipPlugin2';\nimport { TimelineChart } from 'app/core/components/TimelineChart/TimelineChart';\nimport {\n  makeFramePerSeries,\n  prepareTimelineFields,\n  prepareTimelineLegendItems,\n  TimelineMode,\n} from 'app/core/components/TimelineChart/utils';\n\nimport { AnnotationsPlugin2 } from '../timeseries/plugins/AnnotationsPlugin2';\nimport { OutsideRangePlugin } from '../timeseries/plugins/OutsideRangePlugin';\nimport { getTimezones } from '../timeseries/utils';\n\nimport { StateTimelineTooltip2 } from './StateTimelineTooltip2';\nimport { Options, defaultOptions } from './panelcfg.gen';\n\ninterface TimelinePanelProps extends PanelProps<Options> {}\n\nconst styles = {\n  container: css({\n    display: 'flex',\n    flexDirection: 'column',\n  }),\n  paginationContainer: css({\n    display: 'flex',\n    justifyContent: 'center',\n    width: '100%',\n  }),\n  paginationElement: css({\n    marginTop: '8px',\n  }),\n};\n\nfunction usePagination(frames?: DataFrame[], perPage?: number) {\n  const [currentPage, setCurrentPage] = useState(1);\n\n  const [paginationWrapperRef, { height: paginationHeight, width: paginationWidth }] = useMeasure<HTMLDivElement>();\n\n  const pagedFrames = useMemo(\n    () => (!perPage || frames == null ? frames : makeFramePerSeries(frames)),\n    [frames, perPage]\n  );\n\n  if (!perPage || pagedFrames == null) {\n    return {\n      paginatedFrames: pagedFrames,\n      paginationRev: 'disabled',\n      paginationElement: undefined,\n      paginationHeight: 0,\n    };\n  }\n\n  perPage ||= defaultOptions.perPage!;\n\n  const numberOfPages = Math.ceil(pagedFrames.length / perPage);\n  // `perPage` changing might lead to temporarily too large values of `currentPage`.\n  const currentPageCapped = Math.min(currentPage, numberOfPages);\n  const pageOffset = (currentPageCapped - 1) * perPage;\n  const currentPageFrames = pagedFrames.slice(pageOffset, pageOffset + perPage);\n\n  // `paginationRev` needs to change value whenever any of the pagination settings changes.\n  // It's used in to trigger a reconfiguration of the underlying graphs (which is cached,\n  // hence an explicit nudge is required).\n  const paginationRev = `${currentPageCapped}/${perPage}`;\n\n  const showSmallVersion = paginationWidth < 550;\n  const paginationElement = (\n    <div className={styles.paginationContainer} ref={paginationWrapperRef}>\n      <Pagination\n        className={styles.paginationElement}\n        currentPage={currentPageCapped}\n        numberOfPages={numberOfPages}\n        showSmallVersion={showSmallVersion}\n        onNavigate={setCurrentPage}\n      />\n    </div>\n  );\n\n  return { paginatedFrames: currentPageFrames, paginationRev, paginationElement, paginationHeight };\n}\n\n/**\n * @alpha\n */\nexport const StateTimelinePanel = ({\n  data,\n  timeRange,\n  timeZone,\n  options,\n  width,\n  height,\n  replaceVariables,\n  onChangeTimeRange,\n}: TimelinePanelProps) => {\n  const theme = useTheme2();\n\n  // temp range set for adding new annotation set by TooltipPlugin2, consumed by AnnotationPlugin2\n  const [newAnnotationRange, setNewAnnotationRange] = useState<TimeRange2 | null>(null);\n  const { sync, eventsScope, canAddAnnotations, dataLinkPostProcessor, eventBus } = usePanelContext();\n  const cursorSync = sync?.() ?? DashboardCursorSync.Off;\n\n  const { frames, warn } = useMemo(\n    () => prepareTimelineFields(data.series, options.mergeValues ?? true, timeRange, theme),\n    [data.series, options.mergeValues, timeRange, theme]\n  );\n\n  const { paginatedFrames, paginationRev, paginationElement, paginationHeight } = usePagination(\n    frames,\n    options.perPage\n  );\n\n  const legendItems = useMemo(\n    () => prepareTimelineLegendItems(paginatedFrames, options.legend, theme),\n    [paginatedFrames, options.legend, theme]\n  );\n\n  const timezones = useMemo(() => getTimezones(options.timezone, timeZone), [options.timezone, timeZone]);\n\n  if (!paginatedFrames || warn) {\n    return (\n      <div className=\"panel-empty\">\n        <p>{warn ?? 'No data found in response'}</p>\n      </div>\n    );\n  }\n\n  const enableAnnotationCreation = Boolean(canAddAnnotations && canAddAnnotations());\n\n  return (\n    <div className={styles.container}>\n      <TimelineChart\n        theme={theme}\n        frames={paginatedFrames}\n        structureRev={data.structureRev}\n        paginationRev={paginationRev}\n        timeRange={timeRange}\n        timeZone={timezones}\n        width={width}\n        height={height - paginationHeight}\n        legendItems={legendItems}\n        {...options}\n        mode={TimelineMode.Changes}\n        replaceVariables={replaceVariables}\n        dataLinkPostProcessor={dataLinkPostProcessor}\n        cursorSync={cursorSync}\n      >\n        {(builder, alignedFrame) => {\n          return (\n            <>\n              {cursorSync !== DashboardCursorSync.Off && (\n                <EventBusPlugin config={builder} eventBus={eventBus} frame={alignedFrame} />\n              )}\n              {options.tooltip.mode !== TooltipDisplayMode.None && (\n                <TooltipPlugin2\n                  config={builder}\n                  hoverMode={\n                    options.tooltip.mode === TooltipDisplayMode.Multi ? TooltipHoverMode.xAll : TooltipHoverMode.xOne\n                  }\n                  queryZoom={onChangeTimeRange}\n                  syncMode={cursorSync}\n                  syncScope={eventsScope}\n                  render={(u, dataIdxs, seriesIdx, isPinned, dismiss, timeRange2, viaSync) => {\n                    if (enableAnnotationCreation && timeRange2 != null) {\n                      setNewAnnotationRange(timeRange2);\n                      dismiss();\n                      return;\n                    }\n\n                    const annotate = () => {\n                      let xVal = u.posToVal(u.cursor.left!, 'x');\n\n                      setNewAnnotationRange({ from: xVal, to: xVal });\n                      dismiss();\n                    };\n\n                    return (\n                      <StateTimelineTooltip2\n                        series={alignedFrame}\n                        dataIdxs={dataIdxs}\n                        seriesIdx={seriesIdx}\n                        mode={viaSync ? TooltipDisplayMode.Multi : options.tooltip.mode}\n                        sortOrder={options.tooltip.sort}\n                        isPinned={isPinned}\n                        timeRange={timeRange}\n                        annotate={enableAnnotationCreation ? annotate : undefined}\n                        withDuration={true}\n                        maxHeight={options.tooltip.maxHeight}\n                        replaceVariables={replaceVariables}\n                      />\n                    );\n                  }}\n                  maxWidth={options.tooltip.maxWidth}\n                />\n              )}\n              {/* Renders annotations */}\n              <AnnotationsPlugin2\n                annotations={data.annotations ?? []}\n                config={builder}\n                timeZone={timeZone}\n                newRange={newAnnotationRange}\n                setNewRange={setNewAnnotationRange}\n                canvasRegionRendering={false}\n              />\n              <OutsideRangePlugin config={builder} onChangeTimeRange={onChangeTimeRange} />\n            </>\n          );\n        }}\n      </TimelineChart>\n      {paginationElement}\n    </div>\n  );\n};\n","import { isArray } from 'lodash';\n\nimport { FieldConfigSource, MappingType, PanelModel, ValueMap } from '@grafana/data';\n\nimport { FieldConfig, Options } from './panelcfg.gen';\n\n// This is called when the panel changes from another panel\nexport const timelinePanelChangedHandler = (\n  panel: PanelModel<Partial<Options>> | any,\n  prevPluginId: string,\n  prevOptions: any\n) => {\n  let options: Options = panel.options ?? {};\n\n  // Changing from angular singlestat\n  if (prevPluginId === 'natel-discrete-panel' && prevOptions.angular) {\n    const oldOptions = prevOptions.angular;\n    const fieldConfig: FieldConfigSource = panel.fieldConfig ?? { defaults: {}, overrides: [] };\n\n    if (oldOptions.units) {\n      fieldConfig.defaults.unit = oldOptions.units;\n    }\n\n    const custom: FieldConfig = {\n      fillOpacity: 100,\n      lineWidth: 0,\n    };\n    fieldConfig.defaults.custom = custom;\n    options.mergeValues = true;\n\n    // Convert mappings\n    const valuemap: ValueMap = { type: MappingType.ValueToText, options: {} };\n    fieldConfig.defaults.mappings = [valuemap];\n\n    if (isArray(oldOptions.colorMaps)) {\n      for (const p of oldOptions.colorMaps) {\n        const color: string = p.color;\n        if (color) {\n          valuemap.options[p.text] = { color };\n        }\n      }\n    }\n\n    if (isArray(oldOptions.valueMaps)) {\n      for (const p of oldOptions.valueMaps) {\n        const text: string = p.text;\n        const value: string = p.value;\n        if (text && value) {\n          let old = valuemap.options[value];\n          if (old) {\n            old.text = text;\n          } else {\n            valuemap.options[value] = { text };\n          }\n        }\n      }\n    }\n\n    if (isArray(oldOptions.rangeMaps)) {\n      for (const p of oldOptions.rangeMaps) {\n        let from = +p.from;\n        let to = +p.to;\n        const text: string = p.text;\n        if (text) {\n          fieldConfig.defaults.mappings.push({\n            type: MappingType.RangeToText,\n            options: {\n              from,\n              to,\n              result: { text },\n            },\n          });\n        }\n      }\n    }\n\n    // mutates the input\n    panel.fieldConfig = fieldConfig;\n  }\n\n  return options;\n};\n","import { VisualizationSuggestionsBuilder } from '@grafana/data';\nimport { SuggestionName } from 'app/types/suggestions';\n\nimport { FieldConfig, Options } from './panelcfg.gen';\n\nexport class StatTimelineSuggestionsSupplier {\n  getSuggestionsForData(builder: VisualizationSuggestionsBuilder) {\n    const { dataSummary: ds } = builder;\n\n    if (!ds.hasData) {\n      return;\n    }\n\n    // This panel needs a time field and a string or number field\n    if (!ds.hasTimeField || (!ds.hasStringField && !ds.hasNumberField)) {\n      return;\n    }\n\n    // If there are many series then they won't fit on y-axis so this panel is not good fit\n    if (ds.numberFieldCount >= 30) {\n      return;\n    }\n\n    // Probably better ways to filter out this by inspecting the types of string values so view this as temporary\n    if (ds.preferredVisualisationType === 'logs') {\n      return;\n    }\n\n    const list = builder.getListAppender<Options, FieldConfig>({\n      name: '',\n      pluginId: 'state-timeline',\n      options: {},\n      fieldConfig: {\n        defaults: {\n          custom: {},\n        },\n        overrides: [],\n      },\n    });\n\n    list.append({ name: SuggestionName.StateTimeline });\n  }\n}\n","import {\n  FieldColorModeId,\n  FieldConfigProperty,\n  FieldType,\n  identityOverrideProcessor,\n  PanelPlugin,\n} from '@grafana/data';\nimport { VisibilityMode } from '@grafana/schema';\nimport { commonOptionsBuilder } from '@grafana/ui';\n\nimport { InsertNullsEditor } from '../timeseries/InsertNullsEditor';\nimport { SpanNullsEditor } from '../timeseries/SpanNullsEditor';\nimport { NullEditorSettings } from '../timeseries/config';\n\nimport { StateTimelinePanel } from './StateTimelinePanel';\nimport { timelinePanelChangedHandler } from './migrations';\nimport { defaultFieldConfig, defaultOptions, FieldConfig, Options } from './panelcfg.gen';\nimport { StatTimelineSuggestionsSupplier } from './suggestions';\n\nexport const plugin = new PanelPlugin<Options, FieldConfig>(StateTimelinePanel)\n  .setPanelChangeHandler(timelinePanelChangedHandler)\n  .useFieldConfig({\n    standardOptions: {\n      [FieldConfigProperty.Color]: {\n        settings: {\n          byValueSupport: true,\n        },\n        defaultValue: {\n          mode: FieldColorModeId.ContinuousGrYlRd,\n        },\n      },\n    },\n    useCustomConfig: (builder) => {\n      builder\n        .addSliderInput({\n          path: 'lineWidth',\n          name: 'Line width',\n          defaultValue: defaultFieldConfig.lineWidth,\n          settings: {\n            min: 0,\n            max: 10,\n            step: 1,\n          },\n        })\n        .addSliderInput({\n          path: 'fillOpacity',\n          name: 'Fill opacity',\n          defaultValue: defaultFieldConfig.fillOpacity,\n          settings: {\n            min: 0,\n            max: 100,\n            step: 1,\n          },\n        })\n        .addCustomEditor<NullEditorSettings, boolean>({\n          id: 'spanNulls',\n          path: 'spanNulls',\n          name: 'Connect null values',\n          defaultValue: false,\n          editor: SpanNullsEditor,\n          override: SpanNullsEditor,\n          shouldApply: (field) => field.type !== FieldType.time,\n          process: identityOverrideProcessor,\n          settings: { isTime: true },\n        })\n        .addCustomEditor<NullEditorSettings, boolean>({\n          id: 'insertNulls',\n          path: 'insertNulls',\n          name: 'Disconnect values',\n          defaultValue: false,\n          editor: InsertNullsEditor,\n          override: InsertNullsEditor,\n          shouldApply: (field) => field.type !== FieldType.time,\n          process: identityOverrideProcessor,\n          settings: { isTime: true },\n        });\n\n      commonOptionsBuilder.addHideFrom(builder);\n    },\n  })\n  .setPanelOptions((builder) => {\n    builder\n      .addBooleanSwitch({\n        path: 'mergeValues',\n        name: 'Merge equal consecutive values',\n        defaultValue: defaultOptions.mergeValues,\n      })\n      .addRadio({\n        path: 'showValue',\n        name: 'Show values',\n        settings: {\n          options: [\n            { value: VisibilityMode.Auto, label: 'Auto' },\n            { value: VisibilityMode.Always, label: 'Always' },\n            { value: VisibilityMode.Never, label: 'Never' },\n          ],\n        },\n        defaultValue: defaultOptions.showValue,\n      })\n      .addRadio({\n        path: 'alignValue',\n        name: 'Align values',\n        settings: {\n          options: [\n            { value: 'left', label: 'Left' },\n            { value: 'center', label: 'Center' },\n            { value: 'right', label: 'Right' },\n          ],\n        },\n        defaultValue: defaultOptions.alignValue,\n      })\n      .addSliderInput({\n        path: 'rowHeight',\n        name: 'Row height',\n        settings: {\n          min: 0,\n          max: 1,\n          step: 0.01,\n        },\n        defaultValue: defaultOptions.rowHeight,\n      })\n      .addNumberInput({\n        path: 'perPage',\n        name: 'Page size (enable pagination)',\n        settings: {\n          min: 1,\n          step: 1,\n          integer: true,\n        },\n      });\n\n    commonOptionsBuilder.addLegendOptions(builder, false);\n    commonOptionsBuilder.addTooltipOptions(builder);\n  })\n  .setSuggestionsSupplier(new StatTimelineSuggestionsSupplier())\n  .setDataSupport({ annotations: true });\n"],"names":["defaultOptions","defaultFieldConfig","styles","usePagination","frames","perPage","currentPage","setCurrentPage","paginationWrapperRef","paginationHeight","paginationWidth","useMeasure","pagedFrames","numberOfPages","currentPageCapped","pageOffset","currentPageFrames","paginationRev","showSmallVersion","paginationElement","Pagination","StateTimelinePanel","data","timeRange","timeZone","options","width","height","replaceVariables","onChangeTimeRange","theme","newAnnotationRange","setNewAnnotationRange","sync","eventsScope","canAddAnnotations","dataLinkPostProcessor","eventBus","cursorSync","warn","paginatedFrames","legendItems","timezones","enableAnnotationCreation","TimelineChart","builder","alignedFrame","EventBusPlugin","TooltipPlugin2","u","dataIdxs","seriesIdx","isPinned","dismiss","timeRange2","viaSync","annotate","xVal","StateTimelineTooltip2","AnnotationsPlugin2","OutsideRangePlugin","timelinePanelChangedHandler","panel","prevPluginId","prevOptions","oldOptions","fieldConfig","custom","valuemap","p","color","text","value","old","from","to","StatTimelineSuggestionsSupplier","ds","PanelPlugin","SpanNullsEditor","field","InsertNullsEditor"],"sourceRoot":""}