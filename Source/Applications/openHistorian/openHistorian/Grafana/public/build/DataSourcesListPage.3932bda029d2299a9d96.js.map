{"version":3,"sources":["webpack:///./public/app/features/datasources/DataSourcesListItem.tsx","webpack:///./public/app/features/datasources/DataSourcesList.tsx","webpack:///./public/app/core/components/OrgActionBar/OrgActionBar.tsx","webpack:///./public/app/features/datasources/state/selectors.ts","webpack:///./public/app/features/datasources/DataSourcesListPage.tsx"],"names":["datasources_DataSourcesListItem","_super","DataSourcesListItem","tslib_es6","prototype","render","dataSource","this","props","react_default","a","createElement","className","href","id","type","src","typeLogoUrl","alt","name","isDefault","url","react","DataSourcesList_DataSourcesList","DataSourcesList","_a","dataSources","layoutMode","listStyle","classnames_default","card-section","card-list-layout-grid","LayoutSelector","Grid","card-list-layout-list","List","map","index","key","__webpack_exports__","OrgActionBar","tslib__WEBPACK_IMPORTED_MODULE_0__","searchQuery","onSetLayoutMode","linkButton","setSearchQuery","target","linkProps","react__WEBPACK_IMPORTED_MODULE_1___default","_FilterInput_FilterInput__WEBPACK_IMPORTED_MODULE_3__","labelClassName","inputClassName","value","onChange","placeholder","_LayoutSelector_LayoutSelector__WEBPACK_IMPORTED_MODULE_2__","mode","onLayoutModeChanged","title","react__WEBPACK_IMPORTED_MODULE_1__","__webpack_require__","d","getDataSources","getDataSourceTypes","getDataSource","getDataSourceMeta","getDataSourcesSearchQuery","getDataSourcesLayoutMode","getDataSourcesCount","state","regex","RegExp","filter","test","database","dataSourceTypeSearchQuery","dataSourceTypes","dataSourceId","parseInt","dataSourceMeta","dataSourcesCount","emptyListModel","buttonIcon","buttonLink","buttonTitle","proTip","proTipLink","proTipLinkTitle","proTipTarget","DataSourcesListPage","componentDidMount","fetchDataSources","loadDataSources","sent","navModel","setDataSourcesSearchQuery","setDataSourcesLayoutMode","hasFetched","app_core_components_Page_Page__WEBPACK_IMPORTED_MODULE_4__","Contents","isLoading","Fragment","app_core_components_EmptyListCTA_EmptyListCTA__WEBPACK_IMPORTED_MODULE_6__","app_core_components_OrgActionBar_OrgActionBar__WEBPACK_IMPORTED_MODULE_5__","query","_DataSourcesList__WEBPACK_IMPORTED_MODULE_7__","mapDispatchToProps","_state_actions__WEBPACK_IMPORTED_MODULE_8__","Object","react_hot_loader__WEBPACK_IMPORTED_MODULE_3__","module","react_redux__WEBPACK_IMPORTED_MODULE_2__","app_core_selectors_navModel__WEBPACK_IMPORTED_MODULE_9__","navIndex","_state_selectors__WEBPACK_IMPORTED_MODULE_10__"],"mappings":"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","file":"DataSourcesListPage.3932bda029d2299a9d96.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport { DataSourceSettings } from '@grafana/ui';\n\nexport interface Props {\n  dataSource: DataSourceSettings;\n}\n\nexport class DataSourcesListItem extends PureComponent<Props> {\n  render() {\n    const { dataSource } = this.props;\n    return (\n      <li className=\"card-item-wrapper\">\n        <a className=\"card-item\" href={`datasources/edit/${dataSource.id}`}>\n          <div className=\"card-item-header\">\n            <div className=\"card-item-type\">{dataSource.type}</div>\n          </div>\n          <div className=\"card-item-body\">\n            <figure className=\"card-item-figure\">\n              <img src={dataSource.typeLogoUrl} alt={dataSource.name} />\n            </figure>\n            <div className=\"card-item-details\">\n              <div className=\"card-item-name\">\n                {dataSource.name}\n                {dataSource.isDefault && <span className=\"btn btn-secondary btn-small card-item-label\">default</span>}\n              </div>\n              <div className=\"card-item-sub-name\">{dataSource.url}</div>\n            </div>\n          </div>\n        </a>\n      </li>\n    );\n  }\n}\n\nexport default DataSourcesListItem;\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport classNames from 'classnames';\n\n// Components\nimport DataSourcesListItem from './DataSourcesListItem';\n\n// Types\nimport { DataSourceSettings } from '@grafana/ui';\nimport { LayoutMode, LayoutModes } from '../../core/components/LayoutSelector/LayoutSelector';\n\nexport interface Props {\n  dataSources: DataSourceSettings[];\n  layoutMode: LayoutMode;\n}\n\nexport class DataSourcesList extends PureComponent<Props> {\n  render() {\n    const { dataSources, layoutMode } = this.props;\n\n    const listStyle = classNames({\n      'card-section': true,\n      'card-list-layout-grid': layoutMode === LayoutModes.Grid,\n      'card-list-layout-list': layoutMode === LayoutModes.List,\n    });\n\n    return (\n      <section className={listStyle}>\n        <ol className=\"card-list\">\n          {dataSources.map((dataSource, index) => {\n            return <DataSourcesListItem dataSource={dataSource} key={`${dataSource.id}-${index}`} />;\n          })}\n        </ol>\n      </section>\n    );\n  }\n}\n\nexport default DataSourcesList;\n","import React, { PureComponent } from 'react';\nimport LayoutSelector, { LayoutMode } from '../LayoutSelector/LayoutSelector';\nimport { FilterInput } from '../FilterInput/FilterInput';\n\nexport interface Props {\n  searchQuery: string;\n  layoutMode?: LayoutMode;\n  onSetLayoutMode?: (mode: LayoutMode) => {};\n  setSearchQuery: (value: string) => {};\n  linkButton: { href: string; title: string };\n  target?: string;\n}\n\nexport default class OrgActionBar extends PureComponent<Props> {\n  render() {\n    const { searchQuery, layoutMode, onSetLayoutMode, linkButton, setSearchQuery, target } = this.props;\n    const linkProps = { href: linkButton.href };\n\n    if (target) {\n      (linkProps as any).target = target;\n    }\n\n    return (\n      <div className=\"page-action-bar\">\n        <div className=\"gf-form gf-form--grow\">\n          <FilterInput\n            labelClassName=\"gf-form--has-input-icon\"\n            inputClassName=\"gf-form-input width-20\"\n            value={searchQuery}\n            onChange={setSearchQuery}\n            placeholder={'Filter by name or type'}\n          />\n          <LayoutSelector mode={layoutMode} onLayoutModeChanged={(mode: LayoutMode) => onSetLayoutMode(mode)} />\n        </div>\n        <div className=\"page-action-bar__spacer\" />\n        <a className=\"btn btn-primary\" {...linkProps}>\n          {linkButton.title}\n        </a>\n      </div>\n    );\n  }\n}\n","import { DataSourceSettings, DataSourcePluginMeta } from '@grafana/ui';\nimport { DataSourcesState } from '../../../types/datasources';\nimport { UrlQueryValue } from '@grafana/runtime';\n\nexport const getDataSources = (state: DataSourcesState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  return state.dataSources.filter((dataSource: DataSourceSettings) => {\n    return regex.test(dataSource.name) || regex.test(dataSource.database);\n  });\n};\n\nexport const getDataSourceTypes = (state: DataSourcesState) => {\n  const regex = new RegExp(state.dataSourceTypeSearchQuery, 'i');\n\n  return state.dataSourceTypes.filter((type: DataSourcePluginMeta) => {\n    return regex.test(type.name);\n  });\n};\n\nexport const getDataSource = (state: DataSourcesState, dataSourceId: UrlQueryValue): DataSourceSettings | null => {\n  if (state.dataSource.id === parseInt(dataSourceId as string, 10)) {\n    return state.dataSource;\n  }\n  return {} as DataSourceSettings;\n};\n\nexport const getDataSourceMeta = (state: DataSourcesState, type: string): DataSourcePluginMeta => {\n  if (state.dataSourceMeta.id === type) {\n    return state.dataSourceMeta;\n  }\n\n  return {} as DataSourcePluginMeta;\n};\n\nexport const getDataSourcesSearchQuery = (state: DataSourcesState) => state.searchQuery;\nexport const getDataSourcesLayoutMode = (state: DataSourcesState) => state.layoutMode;\nexport const getDataSourcesCount = (state: DataSourcesState) => state.dataSourcesCount;\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { hot } from 'react-hot-loader';\n\n// Components\nimport Page from 'app/core/components/Page/Page';\nimport OrgActionBar from 'app/core/components/OrgActionBar/OrgActionBar';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport DataSourcesList from './DataSourcesList';\n\n// Types\nimport { DataSourceSettings } from '@grafana/ui';\nimport { NavModel } from '@grafana/data';\nimport { StoreState } from 'app/types';\nimport { LayoutMode } from 'app/core/components/LayoutSelector/LayoutSelector';\n\n// Actions\nimport { loadDataSources, setDataSourcesLayoutMode, setDataSourcesSearchQuery } from './state/actions';\nimport { getNavModel } from 'app/core/selectors/navModel';\n\nimport {\n  getDataSources,\n  getDataSourcesCount,\n  getDataSourcesLayoutMode,\n  getDataSourcesSearchQuery,\n} from './state/selectors';\n\nexport interface Props {\n  navModel: NavModel;\n  dataSources: DataSourceSettings[];\n  dataSourcesCount: number;\n  layoutMode: LayoutMode;\n  searchQuery: string;\n  hasFetched: boolean;\n  loadDataSources: typeof loadDataSources;\n  setDataSourcesLayoutMode: typeof setDataSourcesLayoutMode;\n  setDataSourcesSearchQuery: typeof setDataSourcesSearchQuery;\n}\n\nconst emptyListModel = {\n  title: 'There are no data sources defined yet',\n  buttonIcon: 'gicon gicon-datasources',\n  buttonLink: 'datasources/new',\n  buttonTitle: 'Add data source',\n  proTip: 'You can also define data sources through configuration files.',\n  proTipLink: 'http://docs.grafana.org/administration/provisioning/#datasources?utm_source=grafana_ds_list',\n  proTipLinkTitle: 'Learn more',\n  proTipTarget: '_blank',\n};\n\nexport class DataSourcesListPage extends PureComponent<Props> {\n  componentDidMount() {\n    this.fetchDataSources();\n  }\n\n  async fetchDataSources() {\n    return await this.props.loadDataSources();\n  }\n\n  render() {\n    const {\n      dataSources,\n      dataSourcesCount,\n      navModel,\n      layoutMode,\n      searchQuery,\n      setDataSourcesSearchQuery,\n      setDataSourcesLayoutMode,\n      hasFetched,\n    } = this.props;\n\n    const linkButton = {\n      href: 'datasources/new',\n      title: 'Add data source',\n    };\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={!hasFetched}>\n          <>\n            {hasFetched && dataSourcesCount === 0 && <EmptyListCTA {...emptyListModel} />}\n            {hasFetched &&\n              dataSourcesCount > 0 && [\n                <OrgActionBar\n                  layoutMode={layoutMode}\n                  searchQuery={searchQuery}\n                  onSetLayoutMode={mode => setDataSourcesLayoutMode(mode)}\n                  setSearchQuery={query => setDataSourcesSearchQuery(query)}\n                  linkButton={linkButton}\n                  key=\"action-bar\"\n                />,\n                <DataSourcesList dataSources={dataSources} layoutMode={layoutMode} key=\"list\" />,\n              ]}\n          </>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, 'datasources'),\n    dataSources: getDataSources(state.dataSources),\n    layoutMode: getDataSourcesLayoutMode(state.dataSources),\n    dataSourcesCount: getDataSourcesCount(state.dataSources),\n    searchQuery: getDataSourcesSearchQuery(state.dataSources),\n    hasFetched: state.dataSources.hasFetched,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadDataSources,\n  setDataSourcesSearchQuery,\n  setDataSourcesLayoutMode,\n};\n\nexport default hot(module)(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(DataSourcesListPage)\n);\n"],"sourceRoot":""}