{"version":3,"file":"6173.bcfd23ec2eaef56b8c90.js","mappings":"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","sources":["webpack://grafana/./public/app/features/dashboard/dashgrid/LazyLoader.tsx","webpack://grafana/./public/app/routes/utils.ts","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderLoadingIndicator.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderMenuTrigger.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderMenu.tsx","webpack://grafana/./public/app/features/dashboard/utils/getPanelMenu.ts","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderMenuProvider.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderMenuWrapper.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderNotice.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderNotices.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeader.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelChromeAngular.tsx","webpack://grafana/./public/app/plugins/panel/timeseries/overrides/colorSeriesConfigFactory.ts","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelLinks.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderTitleItems.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelStateWrapper.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/DashboardPanel.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderCorner.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/SeriesVisibilityConfigFactory.ts","webpack://grafana/./public/app/features/dashboard/dashgrid/liveTimer.ts","webpack://grafana/./public/app/features/dashboard/state/analyticsProcessor.ts","webpack://grafana/./public/app/features/dashboard/state/initDashboard.ts","webpack://grafana/./public/app/features/dashboard/utils/loadSnapshotData.ts","webpack://grafana/./public/app/features/inspector/types.ts","webpack://grafana/./public/app/features/panel/panellinks/linkSuppliers.ts","webpack://grafana/./public/app/features/panel/state/selectors.ts"],"sourcesContent":["import React, { useRef, useState } from 'react';\nimport { useEffectOnce } from 'react-use';\n\nimport { useUniqueId } from 'app/plugins/datasource/influxdb/components/useUniqueId';\n\nexport interface Props {\n  children: React.ReactNode | (({ isInView }: { isInView: boolean }) => React.ReactNode);\n  width?: number;\n  height?: number;\n  onLoad?: () => void;\n  onChange?: (isInView: boolean) => void;\n}\n\nexport function LazyLoader({ children, width, height, onLoad, onChange }: Props) {\n  const id = useUniqueId();\n  const [loaded, setLoaded] = useState(false);\n  const [isInView, setIsInView] = useState(false);\n  const wrapperRef = useRef<HTMLDivElement>(null);\n\n  useEffectOnce(() => {\n    LazyLoader.addCallback(id, (entry) => {\n      if (!loaded && entry.isIntersecting) {\n        setLoaded(true);\n        onLoad?.();\n      }\n\n      setIsInView(entry.isIntersecting);\n      onChange?.(entry.isIntersecting);\n    });\n\n    const wrapperEl = wrapperRef.current;\n\n    if (wrapperEl) {\n      LazyLoader.observer.observe(wrapperEl);\n    }\n\n    return () => {\n      delete LazyLoader.callbacks[id];\n      wrapperEl && LazyLoader.observer.unobserve(wrapperEl);\n      if (Object.keys(LazyLoader.callbacks).length === 0) {\n        LazyLoader.observer.disconnect();\n      }\n    };\n  });\n\n  return (\n    <div id={id} ref={wrapperRef} style={{ width, height }}>\n      {loaded && (typeof children === 'function' ? children({ isInView }) : children)}\n    </div>\n  );\n}\n\nLazyLoader.callbacks = {} as Record<string, (e: IntersectionObserverEntry) => void>;\nLazyLoader.addCallback = (id: string, c: (e: IntersectionObserverEntry) => void) => (LazyLoader.callbacks[id] = c);\nLazyLoader.observer = new IntersectionObserver(\n  (entries) => {\n    for (const entry of entries) {\n      LazyLoader.callbacks[entry.target.id](entry);\n    }\n  },\n  { rootMargin: '100px' }\n);\n","import { NavLinkDTO } from '@grafana/data';\n\nexport function isSoloRoute(path: string): boolean {\n  return /(d-solo|dashboard-solo)/.test(path?.toLowerCase());\n}\n\nexport function pluginHasRootPage(pluginId: string, navTree: NavLinkDTO[]): boolean {\n  return Boolean(\n    navTree\n      .find((navLink) => navLink.id === 'apps')\n      ?.children?.find((app) => app.id === `plugin-page-${pluginId}`)\n      ?.children?.some((page) => page.url?.endsWith(`/a/${pluginId}`))\n  );\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2, LoadingState } from '@grafana/data';\nimport { Icon, Tooltip, useStyles2 } from '@grafana/ui';\n\ninterface Props {\n  state: LoadingState;\n  onClick: () => void;\n}\n\nexport const PanelHeaderLoadingIndicator = ({ state, onClick }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  if (state === LoadingState.Loading) {\n    return (\n      <div className=\"panel-loading\" onClick={onClick}>\n        <Tooltip content=\"Cancel query\">\n          <Icon className=\"panel-loading__spinner spin-clockwise\" name=\"sync\" />\n        </Tooltip>\n      </div>\n    );\n  }\n\n  if (state === LoadingState.Streaming) {\n    return (\n      <div className=\"panel-loading\" onClick={onClick}>\n        <div title=\"Streaming (click to stop)\" className={styles.streamIndicator} />\n      </div>\n    );\n  }\n\n  return null;\n};\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    streamIndicator: css`\n      width: 10px;\n      height: 10px;\n      background: ${theme.colors.text.disabled};\n      box-shadow: 0 0 2px ${theme.colors.text.disabled};\n      border-radius: 50%;\n      position: relative;\n      top: 6px;\n      right: 1px;\n    `,\n  };\n}\n","import React, { HTMLAttributes, MouseEvent, ReactElement, useCallback, useState } from 'react';\n\nimport { CartesianCoords2D } from '@grafana/data';\n\ninterface PanelHeaderMenuTriggerApi {\n  panelMenuOpen: boolean;\n  closeMenu: () => void;\n}\n\ninterface Props extends Omit<HTMLAttributes<HTMLDivElement>, 'children'> {\n  children: (props: PanelHeaderMenuTriggerApi) => ReactElement;\n}\n\nexport function PanelHeaderMenuTrigger({ children, ...divProps }: Props) {\n  const [clickCoordinates, setClickCoordinates] = useState<CartesianCoords2D>({ x: 0, y: 0 });\n  const [panelMenuOpen, setPanelMenuOpen] = useState<boolean>(false);\n\n  const onMenuToggle = useCallback(\n    (event: MouseEvent<HTMLDivElement>) => {\n      if (!isClick(clickCoordinates, eventToClickCoordinates(event))) {\n        return;\n      }\n\n      setPanelMenuOpen(!panelMenuOpen);\n    },\n    [clickCoordinates, panelMenuOpen, setPanelMenuOpen]\n  );\n\n  const onMouseDown = useCallback(\n    (event: MouseEvent<HTMLDivElement>) => {\n      setClickCoordinates(eventToClickCoordinates(event));\n    },\n    [setClickCoordinates]\n  );\n\n  return (\n    <header {...divProps} className=\"panel-title-container\" onClick={onMenuToggle} onMouseDown={onMouseDown}>\n      {children({ panelMenuOpen, closeMenu: () => setPanelMenuOpen(false) })}\n    </header>\n  );\n}\n\nfunction isClick(current: CartesianCoords2D, clicked: CartesianCoords2D, deadZone = 3.5): boolean {\n  // A \"deadzone\" radius is added so that if the cursor is moved within this radius\n  // between mousedown and mouseup, it's still considered a click and not a drag.\n  const clickDistance = Math.sqrt((current.x - clicked.x) ** 2 + (current.y - clicked.y) ** 2);\n  return clickDistance <= deadZone;\n}\n\nfunction eventToClickCoordinates(event: MouseEvent<HTMLDivElement>): CartesianCoords2D {\n  return {\n    x: event.clientX,\n    y: event.clientY,\n  };\n}\n","import classnames from 'classnames';\nimport React, { PureComponent } from 'react';\n\nimport { PanelMenuItem } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Menu } from '@grafana/ui';\n\nimport { PanelHeaderMenuItem } from './PanelHeaderMenuItem';\n\nexport interface Props {\n  items: PanelMenuItem[];\n  style?: React.CSSProperties;\n  itemsClassName?: string;\n  className?: string;\n}\n\nexport class PanelHeaderMenu extends PureComponent<Props> {\n  renderItems = (menu: PanelMenuItem[], isSubMenu = false) => {\n    return (\n      <ul\n        className={classnames('dropdown-menu', 'dropdown-menu--menu', 'panel-menu', this.props.itemsClassName)}\n        style={this.props.style}\n        role={isSubMenu ? '' : 'menu'}\n      >\n        {menu.map((menuItem, idx: number) => {\n          return (\n            <PanelHeaderMenuItem\n              key={`${menuItem.text}${idx}`}\n              type={menuItem.type}\n              text={menuItem.text}\n              iconClassName={menuItem.iconClassName}\n              onClick={menuItem.onClick}\n              shortcut={menuItem.shortcut}\n              href={menuItem.href}\n            >\n              {menuItem.subMenu && this.renderItems(menuItem.subMenu, true)}\n            </PanelHeaderMenuItem>\n          );\n        })}\n      </ul>\n    );\n  };\n\n  render() {\n    return (\n      <div className={classnames('panel-menu-container', 'dropdown', 'open', this.props.className)}>\n        {this.renderItems(this.props.items)}\n      </div>\n    );\n  }\n}\n\nexport function PanelHeaderMenuNew({ items }: Props) {\n  const renderItems = (items: PanelMenuItem[]) => {\n    return items.map((item) =>\n      item.type === 'divider' ? (\n        <Menu.Divider key={item.text} />\n      ) : (\n        <Menu.Item\n          key={item.text}\n          label={item.text}\n          icon={item.iconClassName}\n          childItems={item.subMenu ? renderItems(item.subMenu) : undefined}\n          url={item.href}\n          onClick={item.onClick}\n          shortcut={item.shortcut}\n          testId={selectors.components.Panels.Panel.menuItems(item.text)}\n        />\n      )\n    );\n  };\n\n  return <Menu>{renderItems(items)}</Menu>;\n}\n","import { PanelMenuItem, PluginExtensionPoints, type PluginExtensionPanelContext } from '@grafana/data';\nimport {\n  isPluginExtensionLink,\n  AngularComponent,\n  getDataSourceSrv,\n  getPluginExtensions,\n  locationService,\n  reportInteraction,\n} from '@grafana/runtime';\nimport { PanelCtrl } from 'app/angular/panel/panel_ctrl';\nimport config from 'app/core/config';\nimport { t } from 'app/core/internationalization';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { getExploreUrl } from 'app/core/utils/explore';\nimport { DashboardModel } from 'app/features/dashboard/state/DashboardModel';\nimport { PanelModel } from 'app/features/dashboard/state/PanelModel';\nimport {\n  addLibraryPanel,\n  copyPanel,\n  duplicatePanel,\n  removePanel,\n  sharePanel,\n  toggleLegend,\n  unlinkLibraryPanel,\n} from 'app/features/dashboard/utils/panel';\nimport { InspectTab } from 'app/features/inspector/types';\nimport { isPanelModelLibraryPanel } from 'app/features/library-panels/guard';\nimport { store } from 'app/store/store';\n\nimport { navigateToExplore } from '../../explore/state/main';\nimport { getTimeSrv } from '../services/TimeSrv';\n\nexport function getPanelMenu(\n  dashboard: DashboardModel,\n  panel: PanelModel,\n  angularComponent?: AngularComponent | null\n): PanelMenuItem[] {\n  const onViewPanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    locationService.partial({\n      viewPanel: panel.id,\n    });\n    reportInteraction('dashboards_panelheader_view_clicked');\n  };\n\n  const onEditPanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    locationService.partial({\n      editPanel: panel.id,\n    });\n    reportInteraction('dashboards_panelheader_edit_clicked');\n  };\n\n  const onSharePanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    sharePanel(dashboard, panel);\n    reportInteraction('dashboards_panelheader_share_clicked');\n  };\n\n  const onAddLibraryPanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    addLibraryPanel(dashboard, panel);\n    reportInteraction('dashboards_panelheader_createlibrarypanel_clicked');\n  };\n\n  const onUnlinkLibraryPanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    unlinkLibraryPanel(panel);\n    reportInteraction('dashboards_panelheader_unlinklibrarypanel_clicked');\n  };\n\n  const onInspectPanel = (tab?: InspectTab) => {\n    locationService.partial({\n      inspect: panel.id,\n      inspectTab: tab,\n    });\n    reportInteraction('dashboards_panelheader_inspect_clicked', { tab: tab ?? InspectTab.Data });\n  };\n\n  const onMore = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n  };\n\n  const onDuplicatePanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    duplicatePanel(dashboard, panel);\n    reportInteraction('dashboards_panelheader_duplicate_clicked');\n  };\n\n  const onCopyPanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    copyPanel(panel);\n    reportInteraction('dashboards_panelheader_copy_clicked');\n  };\n\n  const onRemovePanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    removePanel(dashboard, panel, true);\n    reportInteraction('dashboards_panelheader_remove_clicked');\n  };\n\n  const onNavigateToExplore = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    const openInNewWindow =\n      event.ctrlKey || event.metaKey ? (url: string) => window.open(`${config.appSubUrl}${url}`) : undefined;\n    store.dispatch(navigateToExplore(panel, { getDataSourceSrv, getTimeSrv, getExploreUrl, openInNewWindow }) as any);\n    reportInteraction('dashboards_panelheader_explore_clicked');\n  };\n\n  const onToggleLegend = (event: React.MouseEvent) => {\n    event.preventDefault();\n    toggleLegend(panel);\n    reportInteraction('dashboards_panelheader_togglelegend_clicked');\n  };\n\n  const menu: PanelMenuItem[] = [];\n\n  if (!panel.isEditing) {\n    menu.push({\n      text: t('panel.header-menu.view', `View`),\n      iconClassName: 'eye',\n      onClick: onViewPanel,\n      shortcut: 'v',\n    });\n  }\n\n  if (dashboard.canEditPanel(panel) && !panel.isEditing) {\n    menu.push({\n      text: t('panel.header-menu.edit', `Edit`),\n      iconClassName: 'edit',\n      onClick: onEditPanel,\n      shortcut: 'e',\n    });\n  }\n\n  menu.push({\n    text: t('panel.header-menu.share', `Share`),\n    iconClassName: 'share-alt',\n    onClick: onSharePanel,\n    shortcut: 'p s',\n  });\n\n  if (contextSrv.hasAccessToExplore() && !(panel.plugin && panel.plugin.meta.skipDataQuery)) {\n    menu.push({\n      text: t('panel.header-menu.explore', `Explore`),\n      iconClassName: 'compass',\n      onClick: onNavigateToExplore,\n      shortcut: 'x',\n    });\n  }\n\n  const inspectMenu: PanelMenuItem[] = [];\n\n  // Only show these inspect actions for data plugins\n  if (panel.plugin && !panel.plugin.meta.skipDataQuery) {\n    inspectMenu.push({\n      text: t('panel.header-menu.inspect-data', `Data`),\n      onClick: (e: React.MouseEvent<any>) => onInspectPanel(InspectTab.Data),\n    });\n\n    if (dashboard.meta.canEdit) {\n      inspectMenu.push({\n        text: t('panel.header-menu.query', `Query`),\n        onClick: (e: React.MouseEvent<any>) => onInspectPanel(InspectTab.Query),\n      });\n    }\n  }\n\n  inspectMenu.push({\n    text: t('panel.header-menu.inspect-json', `Panel JSON`),\n    onClick: (e: React.MouseEvent<any>) => onInspectPanel(InspectTab.JSON),\n  });\n\n  menu.push({\n    type: 'submenu',\n    text: t('panel.header-menu.inspect', `Inspect`),\n    iconClassName: 'info-circle',\n    onClick: (e: React.MouseEvent<HTMLElement>) => {\n      const currentTarget = e.currentTarget;\n      const target = e.target as HTMLElement;\n      const closestMenuItem = target.closest('[role=\"menuitem\"]');\n\n      if (target === currentTarget || closestMenuItem === currentTarget) {\n        onInspectPanel();\n      }\n    },\n    shortcut: 'i',\n    subMenu: inspectMenu,\n  });\n\n  const subMenu: PanelMenuItem[] = [];\n  const canEdit = dashboard.canEditPanel(panel);\n  if (!(panel.isViewing || panel.isEditing)) {\n    if (canEdit) {\n      subMenu.push({\n        text: t('panel.header-menu.duplicate', `Duplicate`),\n        onClick: onDuplicatePanel,\n        shortcut: 'p d',\n      });\n\n      subMenu.push({\n        text: t('panel.header-menu.copy', `Copy`),\n        onClick: onCopyPanel,\n      });\n\n      if (isPanelModelLibraryPanel(panel)) {\n        subMenu.push({\n          text: t('panel.header-menu.unlink-library-panel', `Unlink library panel`),\n          onClick: onUnlinkLibraryPanel,\n        });\n      } else {\n        subMenu.push({\n          text: t('panel.header-menu.create-library-panel', `Create library panel`),\n          onClick: onAddLibraryPanel,\n        });\n      }\n    } else if (contextSrv.isEditor) {\n      // An editor but the dashboard is not editable\n      subMenu.push({\n        text: t('panel.header-menu.copy', `Copy`),\n        onClick: onCopyPanel,\n      });\n    }\n  }\n\n  // add old angular panel options\n  if (angularComponent) {\n    const scope = angularComponent.getScope();\n    const panelCtrl: PanelCtrl = scope.$$childHead.ctrl;\n    const angularMenuItems = panelCtrl.getExtendedMenu();\n\n    for (const item of angularMenuItems) {\n      const reactItem: PanelMenuItem = {\n        text: item.text,\n        href: item.href,\n        shortcut: item.shortcut,\n      };\n\n      if (item.click) {\n        reactItem.onClick = () => {\n          scope.$eval(item.click, { ctrl: panelCtrl });\n        };\n      }\n\n      subMenu.push(reactItem);\n    }\n  }\n\n  if (panel.options.legend) {\n    subMenu.push({\n      text: panel.options.legend.showLegend\n        ? t('panel.header-menu.hide-legend', 'Hide legend')\n        : t('panel.header-menu.show-legend', 'Show legend'),\n      onClick: onToggleLegend,\n      shortcut: 'p l',\n    });\n  }\n\n  // When editing hide most actions\n  if (panel.isEditing) {\n    subMenu.length = 0;\n  }\n\n  if (canEdit && panel.plugin && !panel.plugin.meta.skipDataQuery) {\n    subMenu.push({\n      text: t('panel.header-menu.get-help', 'Get help'),\n      onClick: (e: React.MouseEvent) => onInspectPanel(InspectTab.Help),\n    });\n  }\n\n  if (subMenu.length) {\n    menu.push({\n      type: 'submenu',\n      text: t('panel.header-menu.more', `More...`),\n      iconClassName: 'cube',\n      subMenu,\n      onClick: onMore,\n    });\n  }\n\n  const { extensions } = getPluginExtensions({\n    extensionPointId: PluginExtensionPoints.DashboardPanelMenu,\n    context: createExtensionContext(panel, dashboard),\n  });\n\n  if (extensions.length > 0 && !panel.isEditing) {\n    const extensionsMenu: PanelMenuItem[] = [];\n\n    for (const extension of extensions) {\n      if (isPluginExtensionLink(extension)) {\n        extensionsMenu.push({\n          text: truncateTitle(extension.title, 25),\n          href: extension.path,\n          onClick: extension.onClick,\n        });\n        continue;\n      }\n    }\n\n    menu.push({\n      text: 'Extensions',\n      iconClassName: 'plug',\n      type: 'submenu',\n      subMenu: extensionsMenu,\n    });\n  }\n\n  if (dashboard.canEditPanel(panel) && !panel.isEditing && !panel.isViewing) {\n    menu.push({ type: 'divider', text: '' });\n\n    menu.push({\n      text: t('panel.header-menu.remove', `Remove`),\n      iconClassName: 'trash-alt',\n      onClick: onRemovePanel,\n      shortcut: 'p r',\n    });\n  }\n\n  return menu;\n}\n\nfunction truncateTitle(title: string, length: number): string {\n  if (title.length < length) {\n    return title;\n  }\n  const part = title.slice(0, length - 3);\n  return `${part.trimEnd()}...`;\n}\n\nfunction createExtensionContext(panel: PanelModel, dashboard: DashboardModel): PluginExtensionPanelContext {\n  return {\n    id: panel.id,\n    pluginId: panel.type,\n    title: panel.title,\n    timeRange: dashboard.time,\n    timeZone: dashboard.timezone,\n    dashboard: {\n      uid: dashboard.uid,\n      title: dashboard.title,\n      tags: Array.from<string>(dashboard.tags),\n    },\n    targets: panel.targets,\n  };\n}\n","import { ReactElement, useEffect, useState } from 'react';\n\nimport { LoadingState, PanelMenuItem } from '@grafana/data';\nimport { getPanelStateForModel } from 'app/features/panel/state/selectors';\nimport { useSelector } from 'app/types';\n\nimport { DashboardModel, PanelModel } from '../../state';\nimport { getPanelMenu } from '../../utils/getPanelMenu';\n\ninterface PanelHeaderMenuProviderApi {\n  items: PanelMenuItem[];\n}\n\ninterface Props {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  loadingState?: LoadingState;\n  children: (props: PanelHeaderMenuProviderApi) => ReactElement;\n}\n\nexport function PanelHeaderMenuProvider({ panel, dashboard, loadingState, children }: Props) {\n  const [items, setItems] = useState<PanelMenuItem[]>([]);\n  const angularComponent = useSelector((state) => getPanelStateForModel(state, panel)?.angularComponent);\n\n  useEffect(() => {\n    setItems(getPanelMenu(dashboard, panel, angularComponent));\n  }, [dashboard, panel, angularComponent, loadingState, setItems]);\n\n  return children({ items });\n}\n","import React from 'react';\n\nimport { LoadingState } from '@grafana/data';\n\nimport { DashboardModel, PanelModel } from '../../state';\n\nimport { PanelHeaderMenu, PanelHeaderMenuNew } from './PanelHeaderMenu';\nimport { PanelHeaderMenuProvider } from './PanelHeaderMenuProvider';\n\ninterface Props {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  loadingState?: LoadingState;\n  style?: React.CSSProperties;\n  menuItemsClassName?: string;\n  menuWrapperClassName?: string;\n}\n\nexport function PanelHeaderMenuWrapper({\n  panel,\n  dashboard,\n  loadingState,\n  style,\n  menuItemsClassName,\n  menuWrapperClassName,\n}: Props) {\n  return (\n    <PanelHeaderMenuProvider panel={panel} dashboard={dashboard} loadingState={loadingState}>\n      {({ items }) => (\n        <PanelHeaderMenu\n          className={menuWrapperClassName}\n          itemsClassName={menuItemsClassName}\n          style={style}\n          items={items}\n        />\n      )}\n    </PanelHeaderMenuProvider>\n  );\n}\n\nexport function PanelHeaderMenuWrapperNew({ style, panel, dashboard, loadingState }: Props) {\n  return (\n    <PanelHeaderMenuProvider panel={panel} dashboard={dashboard} loadingState={loadingState}>\n      {({ items }) => <PanelHeaderMenuNew style={style} items={items} />}\n    </PanelHeaderMenuProvider>\n  );\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2, QueryResultMetaNotice } from '@grafana/data';\nimport { Icon, ToolbarButton, Tooltip, useStyles2 } from '@grafana/ui';\nimport { getFocusStyles, getMouseFocusStyles } from '@grafana/ui/src/themes/mixins';\n\ninterface Props {\n  notice: QueryResultMetaNotice;\n  onClick: (e: React.SyntheticEvent, tab: string) => void;\n}\n\nexport const PanelHeaderNotice = ({ notice, onClick }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const iconName =\n    notice.severity === 'error' || notice.severity === 'warning' ? 'exclamation-triangle' : 'info-circle';\n\n  if (notice.inspect && onClick) {\n    return (\n      <ToolbarButton\n        className={styles.notice}\n        icon={iconName}\n        iconSize=\"md\"\n        key={notice.severity}\n        tooltip={notice.text}\n        onClick={(e) => onClick(e, notice.inspect!)}\n      />\n    );\n  }\n\n  if (notice.link) {\n    return (\n      <a className={styles.notice} aria-label={notice.text} href={notice.link} target=\"_blank\" rel=\"noreferrer\">\n        <Icon name={iconName} style={{ marginRight: '8px' }} size=\"md\" />\n      </a>\n    );\n  }\n\n  return (\n    <Tooltip key={notice.severity} content={notice.text}>\n      <span className={styles.iconTooltip}>\n        <Icon name={iconName} size=\"md\" />\n      </span>\n    </Tooltip>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  notice: css({\n    background: 'inherit',\n    border: 'none',\n    borderRadius: theme.shape.borderRadius(),\n  }),\n  iconTooltip: css({\n    color: `${theme.colors.text.secondary}`,\n    backgroundColor: 'inherit',\n    cursor: 'auto',\n    border: 'none',\n    borderRadius: `${theme.shape.borderRadius()}`,\n    padding: `${theme.spacing(0, 1)}`,\n    height: ` ${theme.spacing(theme.components.height.md)}`,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n\n    '&:focus, &:focus-visible': {\n      ...getFocusStyles(theme),\n      zIndex: 1,\n    },\n    '&: focus:not(:focus-visible)': getMouseFocusStyles(theme),\n\n    '&:hover ': {\n      boxShadow: `${theme.shadows.z1}`,\n      color: `${theme.colors.text.primary}`,\n      background: `${theme.colors.background.secondary}`,\n    },\n  }),\n});\n","import React, { useCallback } from 'react';\n\nimport { DataFrame, QueryResultMetaNotice } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\n\nimport { PanelHeaderNotice } from './PanelHeaderNotice';\n\ninterface Props {\n  panelId: number;\n  frames: DataFrame[];\n}\n\nexport const PanelHeaderNotices = ({ frames, panelId }: Props) => {\n  const openInspect = useCallback(\n    (e: React.SyntheticEvent, tab: string) => {\n      e.stopPropagation();\n      locationService.partial({ inspect: panelId, inspectTab: tab });\n    },\n    [panelId]\n  );\n\n  // dedupe on severity\n  const notices: Record<string, QueryResultMetaNotice> = {};\n  for (const frame of frames) {\n    if (!frame.meta || !frame.meta.notices) {\n      continue;\n    }\n\n    for (const notice of frame.meta.notices) {\n      notices[notice.severity] = notice;\n    }\n  }\n\n  return (\n    <>\n      {Object.values(notices).map((notice) => (\n        <PanelHeaderNotice notice={notice} onClick={openInspect} key={notice.severity} />\n      ))}\n    </>\n  );\n};\n","import { css, cx } from '@emotion/css';\nimport React from 'react';\n\nimport { DataLink, GrafanaTheme2, PanelData } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Icon, useStyles2, ClickOutsideWrapper } from '@grafana/ui';\nimport { DashboardModel } from 'app/features/dashboard/state/DashboardModel';\nimport { PanelModel } from 'app/features/dashboard/state/PanelModel';\nimport { getPanelLinksSupplier } from 'app/features/panel/panellinks/linkSuppliers';\n\nimport PanelHeaderCorner from './PanelHeaderCorner';\nimport { PanelHeaderLoadingIndicator } from './PanelHeaderLoadingIndicator';\nimport { PanelHeaderMenuTrigger } from './PanelHeaderMenuTrigger';\nimport { PanelHeaderMenuWrapper } from './PanelHeaderMenuWrapper';\nimport { PanelHeaderNotices } from './PanelHeaderNotices';\n\nexport interface Props {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  title?: string;\n  description?: string;\n  links?: DataLink[];\n  error?: string;\n  alertState?: string;\n  isViewing: boolean;\n  isEditing: boolean;\n  data: PanelData;\n}\n\nexport function PanelHeader({ panel, error, isViewing, isEditing, data, alertState, dashboard }: Props) {\n  const onCancelQuery = () => panel.getQueryRunner().cancelQuery();\n  const title = panel.getDisplayTitle();\n  const className = cx('panel-header', !(isViewing || isEditing) ? 'grid-drag-handle' : '');\n  const styles = useStyles2(panelStyles);\n\n  return (\n    <>\n      <PanelHeaderLoadingIndicator state={data.state} onClick={onCancelQuery} />\n      <PanelHeaderCorner\n        panel={panel}\n        title={panel.title}\n        description={panel.description}\n        scopedVars={panel.scopedVars}\n        links={getPanelLinksSupplier(panel)}\n        error={error}\n      />\n      <div className={className}>\n        <PanelHeaderMenuTrigger data-testid={selectors.components.Panels.Panel.title(title)}>\n          {({ closeMenu, panelMenuOpen }) => {\n            return (\n              <ClickOutsideWrapper onClick={closeMenu} parent={document}>\n                <div className=\"panel-title\">\n                  <PanelHeaderNotices frames={data.series} panelId={panel.id} />\n                  {alertState ? (\n                    <Icon\n                      name={alertState === 'alerting' ? 'heart-break' : 'heart'}\n                      className=\"icon-gf panel-alert-icon\"\n                      style={{ marginRight: '4px' }}\n                      size=\"sm\"\n                    />\n                  ) : null}\n                  <h2 className={styles.titleText}>{title}</h2>\n                  {!dashboard.meta.publicDashboardAccessToken && (\n                    <div data-testid=\"panel-dropdown\">\n                      <Icon name=\"angle-down\" className=\"panel-menu-toggle\" />\n                      {panelMenuOpen ? <PanelHeaderMenuWrapper panel={panel} dashboard={dashboard} /> : null}\n                    </div>\n                  )}\n                  {data.request && data.request.timeInfo && (\n                    <span className=\"panel-time-info\">\n                      <Icon name=\"clock-nine\" size=\"sm\" /> {data.request.timeInfo}\n                    </span>\n                  )}\n                </div>\n              </ClickOutsideWrapper>\n            );\n          }}\n        </PanelHeaderMenuTrigger>\n      </div>\n    </>\n  );\n}\n\nconst panelStyles = (theme: GrafanaTheme2) => {\n  return {\n    titleText: css`\n      text-overflow: ellipsis;\n      overflow: hidden;\n      white-space: nowrap;\n      max-width: calc(100% - 38px);\n      cursor: pointer;\n      font-weight: ${theme.typography.fontWeightMedium};\n      font-size: ${theme.typography.body.fontSize};\n      margin: 0;\n\n      &:hover {\n        color: ${theme.colors.text.primary};\n      }\n      .panel-has-alert & {\n        max-width: calc(100% - 54px);\n      }\n    `,\n  };\n};\n","import classNames from 'classnames';\nimport React, { PureComponent } from 'react';\nimport { connect, MapDispatchToProps, MapStateToProps } from 'react-redux';\nimport { Subscription } from 'rxjs';\n\nimport { getDefaultTimeRange, LoadingState, PanelData, PanelPlugin } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { AngularComponent, getAngularLoader, locationService } from '@grafana/runtime';\nimport config from 'app/core/config';\nimport { PANEL_BORDER } from 'app/core/constants';\nimport { setPanelAngularComponent } from 'app/features/panel/state/reducers';\nimport { getPanelStateForModel } from 'app/features/panel/state/selectors';\nimport { StoreState } from 'app/types';\n\nimport { isSoloRoute } from '../../../routes/utils';\nimport { getTimeSrv, TimeSrv } from '../services/TimeSrv';\nimport { DashboardModel, PanelModel } from '../state';\n\nimport { PanelHeader } from './PanelHeader/PanelHeader';\n\ninterface OwnProps {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  plugin: PanelPlugin;\n  isViewing: boolean;\n  isEditing: boolean;\n  isInView: boolean;\n  width: number;\n  height: number;\n}\n\ninterface ConnectedProps {\n  angularComponent?: AngularComponent;\n}\n\ninterface DispatchProps {\n  setPanelAngularComponent: typeof setPanelAngularComponent;\n}\n\nexport type Props = OwnProps & ConnectedProps & DispatchProps;\n\nexport interface State {\n  data: PanelData;\n  errorMessage?: string;\n}\n\ninterface AngularScopeProps {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  size: {\n    height: number;\n    width: number;\n  };\n}\n\nexport class PanelChromeAngularUnconnected extends PureComponent<Props, State> {\n  element: HTMLElement | null = null;\n  timeSrv: TimeSrv = getTimeSrv();\n  scopeProps?: AngularScopeProps;\n  subs = new Subscription();\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      data: {\n        state: LoadingState.NotStarted,\n        series: [],\n        timeRange: getDefaultTimeRange(),\n      },\n    };\n  }\n\n  componentDidMount() {\n    const { panel } = this.props;\n    this.loadAngularPanel();\n\n    // subscribe to data events\n    const queryRunner = panel.getQueryRunner();\n\n    // we are not displaying any of this data so no need for transforms or field config\n    this.subs.add(\n      queryRunner.getData({ withTransforms: false, withFieldConfig: false }).subscribe({\n        next: (data: PanelData) => this.onPanelDataUpdate(data),\n      })\n    );\n  }\n\n  onPanelDataUpdate(data: PanelData) {\n    let errorMessage: string | undefined;\n\n    if (data.state === LoadingState.Error) {\n      const { error } = data;\n      if (error) {\n        if (errorMessage !== error.message) {\n          errorMessage = error.message;\n        }\n      }\n    }\n\n    this.setState({ data, errorMessage });\n  }\n\n  componentWillUnmount() {\n    this.subs.unsubscribe();\n    if (this.props.angularComponent) {\n      this.props.angularComponent?.destroy();\n    }\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    const { plugin, height, width, panel } = this.props;\n\n    if (prevProps.plugin !== plugin) {\n      this.loadAngularPanel();\n    }\n\n    if (prevProps.width !== width || prevProps.height !== height) {\n      if (this.scopeProps) {\n        this.scopeProps.size.height = this.getInnerPanelHeight();\n        this.scopeProps.size.width = this.getInnerPanelWidth();\n        panel.render();\n      }\n    }\n  }\n\n  getInnerPanelHeight() {\n    const { plugin, height } = this.props;\n    const { theme } = config;\n\n    const headerHeight = this.hasOverlayHeader() ? 0 : theme.panelHeaderHeight;\n    const chromePadding = plugin.noPadding ? 0 : theme.panelPadding;\n    return height - headerHeight - chromePadding * 2 - PANEL_BORDER;\n  }\n\n  getInnerPanelWidth() {\n    const { plugin, width } = this.props;\n    const { theme } = config;\n\n    const chromePadding = plugin.noPadding ? 0 : theme.panelPadding;\n    return width - chromePadding * 2 - PANEL_BORDER;\n  }\n\n  loadAngularPanel() {\n    const { panel, dashboard, setPanelAngularComponent } = this.props;\n\n    // if we have no element or already have loaded the panel return\n    if (!this.element) {\n      return;\n    }\n\n    const loader = getAngularLoader();\n    const template = '<plugin-component type=\"panel\" class=\"panel-height-helper\"></plugin-component>';\n\n    this.scopeProps = {\n      panel: panel,\n      dashboard: dashboard,\n      size: { width: this.getInnerPanelWidth(), height: this.getInnerPanelHeight() },\n    };\n\n    setPanelAngularComponent({\n      key: panel.key,\n      angularComponent: loader.load(this.element, this.scopeProps, template),\n    });\n  }\n\n  hasOverlayHeader() {\n    const { panel } = this.props;\n    const { data } = this.state;\n\n    // always show normal header if we have time override\n    if (data.request && data.request.timeInfo) {\n      return false;\n    }\n\n    return !panel.hasTitle();\n  }\n\n  render() {\n    const { dashboard, panel, isViewing, isEditing, plugin } = this.props;\n    const { errorMessage, data } = this.state;\n    const { transparent } = panel;\n\n    const alertState = data.alertState?.state;\n\n    const containerClassNames = classNames({\n      'panel-container': true,\n      'panel-container--absolute': isSoloRoute(locationService.getLocation().pathname),\n      'panel-container--transparent': transparent,\n      'panel-container--no-title': this.hasOverlayHeader(),\n      'panel-has-alert': panel.alert !== undefined,\n      [`panel-alert-state--${alertState}`]: alertState !== undefined,\n    });\n\n    const panelContentClassNames = classNames({\n      'panel-content': true,\n      'panel-content--no-padding': plugin.noPadding,\n    });\n\n    return (\n      <div\n        className={containerClassNames}\n        data-testid={selectors.components.Panels.Panel.title(panel.title)}\n        aria-label={selectors.components.Panels.Panel.containerByTitle(panel.title)}\n      >\n        <PanelHeader\n          panel={panel}\n          dashboard={dashboard}\n          title={panel.title}\n          description={panel.description}\n          links={panel.links}\n          error={errorMessage}\n          isViewing={isViewing}\n          isEditing={isEditing}\n          data={data}\n          alertState={alertState}\n        />\n        <div className={panelContentClassNames}>\n          <div ref={(element) => (this.element = element)} className=\"panel-height-helper\" />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, OwnProps, StoreState> = (state, props) => {\n  return {\n    angularComponent: getPanelStateForModel(state, props.panel)?.angularComponent,\n  };\n};\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, OwnProps> = { setPanelAngularComponent };\n\nexport const PanelChromeAngular = connect(mapStateToProps, mapDispatchToProps)(PanelChromeAngularUnconnected);\n","import {\n  ConfigOverrideRule,\n  DynamicConfigValue,\n  FieldColorModeId,\n  FieldConfigSource,\n  FieldMatcherID,\n} from '@grafana/data';\n\nexport const changeSeriesColorConfigFactory = (\n  label: string,\n  color: string,\n  fieldConfig: FieldConfigSource\n): FieldConfigSource => {\n  const { overrides } = fieldConfig;\n  const currentIndex = fieldConfig.overrides.findIndex((override) => {\n    return override.matcher.id === FieldMatcherID.byName && override.matcher.options === label;\n  });\n\n  if (currentIndex < 0) {\n    return {\n      ...fieldConfig,\n      overrides: [...fieldConfig.overrides, createOverride(label, color)],\n    };\n  }\n\n  const overridesCopy = Array.from(overrides);\n  const existing = overridesCopy[currentIndex];\n  const propertyIndex = existing.properties.findIndex((p) => p.id === 'color');\n\n  if (propertyIndex < 0) {\n    overridesCopy[currentIndex] = {\n      ...existing,\n      properties: [...existing.properties, createProperty(color)],\n    };\n\n    return {\n      ...fieldConfig,\n      overrides: overridesCopy,\n    };\n  }\n\n  const propertiesCopy = Array.from(existing.properties);\n  propertiesCopy[propertyIndex] = createProperty(color);\n\n  overridesCopy[currentIndex] = {\n    ...existing,\n    properties: propertiesCopy,\n  };\n\n  return {\n    ...fieldConfig,\n    overrides: overridesCopy,\n  };\n};\n\nconst createOverride = (label: string, color: string): ConfigOverrideRule => {\n  return {\n    matcher: {\n      id: FieldMatcherID.byName,\n      options: label,\n    },\n    properties: [createProperty(color)],\n  };\n};\n\nconst createProperty = (color: string): DynamicConfigValue => {\n  return {\n    id: 'color',\n    value: {\n      mode: FieldColorModeId.Fixed,\n      fixedColor: color,\n    },\n  };\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { DataLink, GrafanaTheme2, LinkModel } from '@grafana/data';\nimport { Dropdown, Icon, Menu, ToolbarButton, useStyles2, PanelChrome } from '@grafana/ui';\n\ninterface Props {\n  panelLinks: DataLink[];\n  onShowPanelLinks: () => LinkModel[];\n}\n\nexport function PanelLinks({ panelLinks, onShowPanelLinks }: Props) {\n  const styles = useStyles2(getStyles);\n\n  const getLinksContent = (): JSX.Element => {\n    const interpolatedLinks = onShowPanelLinks();\n    return (\n      <Menu>\n        {interpolatedLinks?.map((link, idx) => {\n          return <Menu.Item key={idx} label={link.title} url={link.href} target={link.target} onClick={link.onClick} />;\n        })}\n      </Menu>\n    );\n  };\n\n  if (panelLinks.length === 1) {\n    const linkModel = onShowPanelLinks()[0];\n    return (\n      <PanelChrome.TitleItem\n        href={linkModel.href}\n        onClick={linkModel.onClick}\n        target={linkModel.target}\n        title={linkModel.title}\n      >\n        <Icon name=\"external-link-alt\" size=\"md\" />\n      </PanelChrome.TitleItem>\n    );\n  } else {\n    return (\n      <Dropdown overlay={getLinksContent}>\n        <ToolbarButton icon=\"external-link-alt\" iconSize=\"md\" aria-label=\"panel links\" className={styles.menuTrigger} />\n      </Dropdown>\n    );\n  }\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    menuTrigger: css({\n      height: '100%',\n      background: 'inherit',\n      border: 'none',\n      borderRadius: `${theme.shape.borderRadius()}`,\n      cursor: 'context-menu',\n    }),\n  };\n};\n","import { css, cx } from '@emotion/css';\nimport React from 'react';\n\nimport { PanelData, GrafanaTheme2, PanelModel, LinkModel, AlertState, DataLink } from '@grafana/data';\nimport { Icon, PanelChrome, Tooltip, useStyles2, TimePickerTooltip } from '@grafana/ui';\n\nimport { PanelLinks } from '../PanelLinks';\n\nimport { PanelHeaderNotices } from './PanelHeaderNotices';\n\nexport interface Props {\n  alertState?: string;\n  data: PanelData;\n  panelId: number;\n  onShowPanelLinks?: () => Array<LinkModel<PanelModel>>;\n  panelLinks?: DataLink[];\n}\n\nexport function PanelHeaderTitleItems(props: Props) {\n  const { alertState, data, panelId, onShowPanelLinks, panelLinks } = props;\n  const styles = useStyles2(getStyles);\n\n  // panel health\n  const alertStateItem = (\n    <Tooltip content={`alerting is ${alertState}`}>\n      <PanelChrome.TitleItem\n        className={cx({\n          [styles.ok]: alertState === AlertState.OK,\n          [styles.pending]: alertState === AlertState.Pending,\n          [styles.alerting]: alertState === AlertState.Alerting,\n        })}\n      >\n        <Icon name={alertState === 'alerting' ? 'heart-break' : 'heart'} className=\"panel-alert-icon\" size=\"md\" />\n      </PanelChrome.TitleItem>\n    </Tooltip>\n  );\n\n  const timeshift = (\n    <>\n      {data.request && data.request.timeInfo && (\n        <Tooltip content={<TimePickerTooltip timeRange={data.request?.range} timeZone={data.request?.timezone} />}>\n          <PanelChrome.TitleItem className={styles.timeshift}>\n            <Icon name=\"clock-nine\" size=\"md\" /> {data.request?.timeInfo}\n          </PanelChrome.TitleItem>\n        </Tooltip>\n      )}\n    </>\n  );\n\n  return (\n    <>\n      {panelLinks && panelLinks.length > 0 && onShowPanelLinks && (\n        <PanelLinks onShowPanelLinks={onShowPanelLinks} panelLinks={panelLinks} />\n      )}\n\n      {<PanelHeaderNotices panelId={panelId} frames={data.series} />}\n      {timeshift}\n      {alertState && alertStateItem}\n    </>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    ok: css({\n      color: theme.colors.success.text,\n    }),\n    pending: css({\n      color: theme.colors.warning.text,\n    }),\n    alerting: css({\n      color: theme.colors.error.text,\n    }),\n    timeshift: css({\n      color: theme.colors.text.link,\n      gap: theme.spacing(0.5),\n      whiteSpace: 'nowrap',\n\n      '&:hover': {\n        color: theme.colors.emphasize(theme.colors.text.link, 0.03),\n      },\n    }),\n  };\n};\n","import classNames from 'classnames';\nimport React, { PureComponent } from 'react';\nimport { Subscription } from 'rxjs';\n\nimport {\n  AbsoluteTimeRange,\n  AnnotationChangeEvent,\n  AnnotationEventUIModel,\n  CoreApp,\n  DashboardCursorSync,\n  EventFilterOptions,\n  FieldConfigSource,\n  getDataSourceRef,\n  getDefaultTimeRange,\n  LinkModel,\n  LoadingState,\n  PanelData,\n  PanelPlugin,\n  PanelPluginMeta,\n  PluginContextProvider,\n  renderMarkdown,\n  TimeRange,\n  toDataFrameDTO,\n  toUtc,\n} from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { getTemplateSrv, config, locationService, RefreshEvent, reportInteraction } from '@grafana/runtime';\nimport { VizLegendOptions } from '@grafana/schema';\nimport {\n  ErrorBoundary,\n  PanelChrome,\n  PanelContext,\n  PanelContextProvider,\n  PanelPadding,\n  SeriesVisibilityChangeMode,\n  AdHocFilterItem,\n} from '@grafana/ui';\nimport { PANEL_BORDER } from 'app/core/constants';\nimport { profiler } from 'app/core/profiler';\nimport { applyPanelTimeOverrides } from 'app/features/dashboard/utils/panel';\nimport { InspectTab } from 'app/features/inspector/types';\nimport { getPanelLinksSupplier } from 'app/features/panel/panellinks/linkSuppliers';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { applyFilterFromTable } from 'app/features/variables/adhoc/actions';\nimport { changeSeriesColorConfigFactory } from 'app/plugins/panel/timeseries/overrides/colorSeriesConfigFactory';\nimport { dispatch } from 'app/store/store';\nimport { RenderEvent } from 'app/types/events';\n\nimport { isSoloRoute } from '../../../routes/utils';\nimport { deleteAnnotation, saveAnnotation, updateAnnotation } from '../../annotations/api';\nimport { getDashboardQueryRunner } from '../../query/state/DashboardQueryRunner/DashboardQueryRunner';\nimport { getTimeSrv, TimeSrv } from '../services/TimeSrv';\nimport { DashboardModel, PanelModel } from '../state';\nimport { loadSnapshotData } from '../utils/loadSnapshotData';\n\nimport { PanelHeader } from './PanelHeader/PanelHeader';\nimport { PanelHeaderMenuWrapperNew } from './PanelHeader/PanelHeaderMenuWrapper';\nimport { PanelHeaderTitleItems } from './PanelHeader/PanelHeaderTitleItems';\nimport { seriesVisibilityConfigFactory } from './SeriesVisibilityConfigFactory';\nimport { liveTimer } from './liveTimer';\n\nconst DEFAULT_PLUGIN_ERROR = 'Error in plugin';\n\nexport interface Props {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  plugin: PanelPlugin;\n  isViewing: boolean;\n  isEditing: boolean;\n  isInView: boolean;\n  width: number;\n  height: number;\n  onInstanceStateChange: (value: any) => void;\n  timezone?: string;\n  hideMenu?: boolean;\n}\n\nexport interface State {\n  isFirstLoad: boolean;\n  renderCounter: number;\n  errorMessage?: string;\n  refreshWhenInView: boolean;\n  context: PanelContext;\n  data: PanelData;\n  liveTime?: TimeRange;\n}\n\nexport class PanelStateWrapper extends PureComponent<Props, State> {\n  private readonly timeSrv: TimeSrv = getTimeSrv();\n  private subs = new Subscription();\n  private eventFilter: EventFilterOptions = { onlyLocal: true };\n  private descriptionInteractionReported = false;\n\n  constructor(props: Props) {\n    super(props);\n\n    // Can this eventBus be on PanelModel?  when we have more complex event filtering, that may be a better option\n    const eventBus = props.dashboard.events.newScopedBus(`panel:${props.panel.id}`, this.eventFilter);\n\n    this.state = {\n      isFirstLoad: true,\n      renderCounter: 0,\n      refreshWhenInView: false,\n      context: {\n        eventBus,\n        app: this.getPanelContextApp(),\n        sync: this.getSync,\n        onSeriesColorChange: this.onSeriesColorChange,\n        onToggleSeriesVisibility: this.onSeriesVisibilityChange,\n        onAnnotationCreate: this.onAnnotationCreate,\n        onAnnotationUpdate: this.onAnnotationUpdate,\n        onAnnotationDelete: this.onAnnotationDelete,\n        onInstanceStateChange: this.onInstanceStateChange,\n        onToggleLegendSort: this.onToggleLegendSort,\n        canAddAnnotations: props.dashboard.canAddAnnotations.bind(props.dashboard),\n        canEditAnnotations: props.dashboard.canEditAnnotations.bind(props.dashboard),\n        canDeleteAnnotations: props.dashboard.canDeleteAnnotations.bind(props.dashboard),\n        onAddAdHocFilter: this.onAddAdHocFilter,\n      },\n      data: this.getInitialPanelDataState(),\n    };\n  }\n\n  // Due to a mutable panel model we get the sync settings via function that proactively reads from the model\n  getSync = () => (this.props.isEditing ? DashboardCursorSync.Off : this.props.dashboard.graphTooltip);\n\n  onInstanceStateChange = (value: any) => {\n    this.props.onInstanceStateChange(value);\n\n    this.setState({\n      context: {\n        ...this.state.context,\n        instanceState: value,\n      },\n    });\n  };\n\n  getPanelContextApp() {\n    if (this.props.isEditing) {\n      return CoreApp.PanelEditor;\n    }\n    if (this.props.isViewing) {\n      return CoreApp.PanelViewer;\n    }\n\n    return CoreApp.Dashboard;\n  }\n\n  onSeriesColorChange = (label: string, color: string) => {\n    this.onFieldConfigChange(changeSeriesColorConfigFactory(label, color, this.props.panel.fieldConfig));\n  };\n\n  onSeriesVisibilityChange = (label: string, mode: SeriesVisibilityChangeMode) => {\n    this.onFieldConfigChange(\n      seriesVisibilityConfigFactory(label, mode, this.props.panel.fieldConfig, this.state.data.series)\n    );\n  };\n\n  onToggleLegendSort = (sortKey: string) => {\n    const legendOptions: VizLegendOptions = this.props.panel.options.legend;\n\n    // We don't want to do anything when legend options are not available\n    if (!legendOptions) {\n      return;\n    }\n\n    let sortDesc = legendOptions.sortDesc;\n    let sortBy = legendOptions.sortBy;\n    if (sortKey !== sortBy) {\n      sortDesc = undefined;\n    }\n\n    // if already sort ascending, disable sorting\n    if (sortDesc === false) {\n      sortBy = undefined;\n      sortDesc = undefined;\n    } else {\n      sortDesc = !sortDesc;\n      sortBy = sortKey;\n    }\n\n    this.onOptionsChange({\n      ...this.props.panel.options,\n      legend: { ...legendOptions, sortBy, sortDesc },\n    });\n  };\n\n  getInitialPanelDataState(): PanelData {\n    return {\n      state: LoadingState.NotStarted,\n      series: [],\n      timeRange: getDefaultTimeRange(),\n    };\n  }\n\n  componentDidMount() {\n    const { panel, dashboard } = this.props;\n\n    // Subscribe to panel events\n    this.subs.add(panel.events.subscribe(RefreshEvent, this.onRefresh));\n    this.subs.add(panel.events.subscribe(RenderEvent, this.onRender));\n\n    dashboard.panelInitialized(this.props.panel);\n\n    // Move snapshot data into the query response\n    if (this.hasPanelSnapshot) {\n      this.setState({\n        data: loadSnapshotData(panel, dashboard),\n        isFirstLoad: false,\n      });\n      return;\n    }\n\n    if (!this.wantsQueryExecution) {\n      this.setState({ isFirstLoad: false });\n    }\n\n    this.subs.add(\n      panel\n        .getQueryRunner()\n        .getData({ withTransforms: true, withFieldConfig: true })\n        .subscribe({\n          next: (data) => this.onDataUpdate(data),\n        })\n    );\n\n    // Listen for live timer events\n    liveTimer.listen(this);\n  }\n\n  componentWillUnmount() {\n    this.subs.unsubscribe();\n    liveTimer.remove(this);\n  }\n\n  liveTimeChanged(liveTime: TimeRange) {\n    const { data } = this.state;\n    if (data.timeRange) {\n      const delta = liveTime.to.valueOf() - data.timeRange.to.valueOf();\n      if (delta < 100) {\n        // 10hz\n        console.log('Skip tick render', this.props.panel.title, delta);\n        return;\n      }\n    }\n    this.setState({ liveTime });\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { isInView, width } = this.props;\n    const { context } = this.state;\n\n    const app = this.getPanelContextApp();\n\n    if (context.app !== app) {\n      this.setState({\n        context: {\n          ...context,\n          app,\n        },\n      });\n    }\n\n    // View state has changed\n    if (isInView !== prevProps.isInView) {\n      if (isInView) {\n        // Check if we need a delayed refresh\n        if (this.state.refreshWhenInView) {\n          this.onRefresh();\n        }\n      }\n    }\n\n    // The timer depends on panel width\n    if (width !== prevProps.width) {\n      liveTimer.updateInterval(this);\n    }\n  }\n\n  // Updates the response with information from the stream\n  // The next is outside a react synthetic event so setState is not batched\n  // So in this context we can only do a single call to setState\n  onDataUpdate(data: PanelData) {\n    const { dashboard, panel, plugin } = this.props;\n\n    // Ignore this data update if we are now a non data panel\n    if (plugin.meta.skipDataQuery) {\n      this.setState({ data: this.getInitialPanelDataState() });\n      return;\n    }\n\n    let { isFirstLoad } = this.state;\n    let errorMessage: string | undefined;\n\n    switch (data.state) {\n      case LoadingState.Loading:\n        // Skip updating state data if it is already in loading state\n        // This is to avoid rendering partial loading responses\n        if (this.state.data.state === LoadingState.Loading) {\n          return;\n        }\n        break;\n      case LoadingState.Error:\n        const { error, errors } = data;\n        if (errors?.length) {\n          if (errors.length === 1) {\n            errorMessage = errors[0].message;\n          } else {\n            errorMessage = 'Multiple errors found. Click for more details';\n          }\n        } else if (error) {\n          if (errorMessage !== error.message) {\n            errorMessage = error.message;\n          }\n        }\n        break;\n      case LoadingState.Done:\n        // If we are doing a snapshot save data in panel model\n        if (dashboard.snapshot) {\n          panel.snapshotData = data.series.map((frame) => toDataFrameDTO(frame));\n        }\n        if (isFirstLoad) {\n          isFirstLoad = false;\n        }\n        break;\n    }\n\n    this.setState({ isFirstLoad, errorMessage, data, liveTime: undefined });\n  }\n\n  onRefresh = () => {\n    const { dashboard, panel, isInView, width } = this.props;\n\n    if (!isInView) {\n      this.setState({ refreshWhenInView: true });\n      return;\n    }\n\n    const timeData = applyPanelTimeOverrides(panel, this.timeSrv.timeRange());\n\n    // Issue Query\n    if (this.wantsQueryExecution) {\n      if (width < 0) {\n        return;\n      }\n\n      if (this.state.refreshWhenInView) {\n        this.setState({ refreshWhenInView: false });\n      }\n      panel.runAllPanelQueries({\n        dashboardId: dashboard.id,\n        dashboardUID: dashboard.uid,\n        dashboardTimezone: dashboard.getTimezone(),\n        publicDashboardAccessToken: dashboard.meta.publicDashboardAccessToken,\n        timeData,\n        width,\n      });\n    } else {\n      // The panel should render on refresh as well if it doesn't have a query, like clock panel\n      this.setState({\n        data: { ...this.state.data, timeRange: this.timeSrv.timeRange() },\n        renderCounter: this.state.renderCounter + 1,\n        liveTime: undefined,\n      });\n    }\n  };\n\n  onRender = () => {\n    const stateUpdate = { renderCounter: this.state.renderCounter + 1 };\n    this.setState(stateUpdate);\n  };\n\n  onOptionsChange = (options: any) => {\n    this.props.panel.updateOptions(options);\n  };\n\n  onFieldConfigChange = (config: FieldConfigSource) => {\n    this.props.panel.updateFieldConfig(config);\n  };\n\n  onPanelError = (error: Error) => {\n    const errorMessage = error.message || DEFAULT_PLUGIN_ERROR;\n    if (this.state.errorMessage !== errorMessage) {\n      this.setState({ errorMessage });\n    }\n  };\n\n  onPanelErrorRecover = () => {\n    this.setState({ errorMessage: undefined });\n  };\n\n  onAnnotationCreate = async (event: AnnotationEventUIModel) => {\n    const isRegion = event.from !== event.to;\n    const anno = {\n      dashboardUID: this.props.dashboard.uid,\n      panelId: this.props.panel.id,\n      isRegion,\n      time: event.from,\n      timeEnd: isRegion ? event.to : 0,\n      tags: event.tags,\n      text: event.description,\n    };\n    await saveAnnotation(anno);\n    getDashboardQueryRunner().run({ dashboard: this.props.dashboard, range: this.timeSrv.timeRange() });\n    this.state.context.eventBus.publish(new AnnotationChangeEvent(anno));\n  };\n\n  onAnnotationDelete = async (id: string) => {\n    await deleteAnnotation({ id });\n    getDashboardQueryRunner().run({ dashboard: this.props.dashboard, range: this.timeSrv.timeRange() });\n    this.state.context.eventBus.publish(new AnnotationChangeEvent({ id }));\n  };\n\n  onAnnotationUpdate = async (event: AnnotationEventUIModel) => {\n    const isRegion = event.from !== event.to;\n    const anno = {\n      id: event.id,\n      dashboardUID: this.props.dashboard.uid,\n      panelId: this.props.panel.id,\n      isRegion,\n      time: event.from,\n      timeEnd: isRegion ? event.to : 0,\n      tags: event.tags,\n      text: event.description,\n    };\n    await updateAnnotation(anno);\n\n    getDashboardQueryRunner().run({ dashboard: this.props.dashboard, range: this.timeSrv.timeRange() });\n    this.state.context.eventBus.publish(new AnnotationChangeEvent(anno));\n  };\n\n  get hasPanelSnapshot() {\n    const { panel } = this.props;\n    return panel.snapshotData && panel.snapshotData.length;\n  }\n\n  get wantsQueryExecution() {\n    return !(this.props.plugin.meta.skipDataQuery || this.hasPanelSnapshot);\n  }\n\n  onChangeTimeRange = (timeRange: AbsoluteTimeRange) => {\n    this.timeSrv.setTime({\n      from: toUtc(timeRange.from),\n      to: toUtc(timeRange.to),\n    });\n  };\n\n  shouldSignalRenderingCompleted(loadingState: LoadingState, pluginMeta: PanelPluginMeta) {\n    return loadingState === LoadingState.Done || loadingState === LoadingState.Error || pluginMeta.skipDataQuery;\n  }\n\n  skipFirstRender(loadingState: LoadingState) {\n    const { isFirstLoad } = this.state;\n    return (\n      this.wantsQueryExecution &&\n      isFirstLoad &&\n      (loadingState === LoadingState.Loading || loadingState === LoadingState.NotStarted)\n    );\n  }\n\n  onAddAdHocFilter = (filter: AdHocFilterItem) => {\n    const { key, value, operator } = filter;\n\n    // When the datasource is null/undefined (for a default datasource), we use getInstanceSettings\n    // to find the real datasource ref for the default datasource.\n    const datasourceInstance = getDatasourceSrv().getInstanceSettings(this.props.panel.datasource);\n    const datasourceRef = datasourceInstance && getDataSourceRef(datasourceInstance);\n    if (!datasourceRef) {\n      return;\n    }\n\n    dispatch(applyFilterFromTable({ datasource: datasourceRef, key, operator, value }));\n  };\n\n  renderPanelContent(innerWidth: number, innerHeight: number) {\n    const { panel, plugin, dashboard } = this.props;\n    const { renderCounter, data } = this.state;\n    const { state: loadingState } = data;\n\n    // do not render component until we have first data\n    if (this.skipFirstRender(loadingState)) {\n      return null;\n    }\n\n    // This is only done to increase a counter that is used by backend\n    // image rendering to know when to capture image\n    if (this.shouldSignalRenderingCompleted(loadingState, plugin.meta)) {\n      profiler.renderingCompleted();\n    }\n\n    const PanelComponent = plugin.panel!;\n    const timeRange = this.state.liveTime ?? data.timeRange ?? this.timeSrv.timeRange();\n    const panelOptions = panel.getOptions();\n\n    // Update the event filter (dashboard settings may have changed)\n    // Yes this is called ever render for a function that is triggered on every mouse move\n    this.eventFilter.onlyLocal = dashboard.graphTooltip === 0;\n\n    return (\n      <>\n        <PanelContextProvider value={this.state.context}>\n          <PanelComponent\n            id={panel.id}\n            data={data}\n            title={panel.title}\n            timeRange={timeRange}\n            timeZone={this.props.dashboard.getTimezone()}\n            options={panelOptions}\n            fieldConfig={panel.fieldConfig}\n            transparent={panel.transparent}\n            width={innerWidth}\n            height={innerHeight}\n            renderCounter={renderCounter}\n            replaceVariables={panel.replaceVariables}\n            onOptionsChange={this.onOptionsChange}\n            onFieldConfigChange={this.onFieldConfigChange}\n            onChangeTimeRange={this.onChangeTimeRange}\n            eventBus={dashboard.events}\n          />\n        </PanelContextProvider>\n      </>\n    );\n  }\n\n  renderPanel(width: number, height: number) {\n    const { panel, plugin, dashboard } = this.props;\n    const { renderCounter, data } = this.state;\n    const { theme } = config;\n    const { state: loadingState } = data;\n\n    // do not render component until we have first data\n    if (this.skipFirstRender(loadingState)) {\n      return null;\n    }\n\n    // This is only done to increase a counter that is used by backend\n    // image rendering to know when to capture image\n    if (this.shouldSignalRenderingCompleted(loadingState, plugin.meta)) {\n      profiler.renderingCompleted();\n    }\n\n    const PanelComponent = plugin.panel!;\n    const timeRange = this.state.liveTime ?? data.timeRange ?? this.timeSrv.timeRange();\n    const headerHeight = this.hasOverlayHeader() ? 0 : theme.panelHeaderHeight;\n    const chromePadding = plugin.noPadding ? 0 : theme.panelPadding;\n    const panelWidth = width - chromePadding * 2 - PANEL_BORDER;\n    const innerPanelHeight = height - headerHeight - chromePadding * 2 - PANEL_BORDER;\n    const panelContentClassNames = classNames({\n      'panel-content': true,\n      'panel-content--no-padding': plugin.noPadding,\n    });\n    const panelOptions = panel.getOptions();\n\n    // Update the event filter (dashboard settings may have changed)\n    // Yes this is called ever render for a function that is triggered on every mouse move\n    this.eventFilter.onlyLocal = dashboard.graphTooltip === 0;\n\n    const timeZone = this.props.timezone || this.props.dashboard.getTimezone();\n\n    return (\n      <>\n        <div className={panelContentClassNames}>\n          <PluginContextProvider meta={plugin.meta}>\n            <PanelContextProvider value={this.state.context}>\n              <PanelComponent\n                id={panel.id}\n                data={data}\n                title={panel.title}\n                timeRange={timeRange}\n                timeZone={timeZone}\n                options={panelOptions}\n                fieldConfig={panel.fieldConfig}\n                transparent={panel.transparent}\n                width={panelWidth}\n                height={innerPanelHeight}\n                renderCounter={renderCounter}\n                replaceVariables={panel.replaceVariables}\n                onOptionsChange={this.onOptionsChange}\n                onFieldConfigChange={this.onFieldConfigChange}\n                onChangeTimeRange={this.onChangeTimeRange}\n                eventBus={dashboard.events}\n              />\n            </PanelContextProvider>\n          </PluginContextProvider>\n        </div>\n      </>\n    );\n  }\n\n  hasOverlayHeader() {\n    const { panel } = this.props;\n    const { data } = this.state;\n\n    // always show normal header if we have time override\n    if (data.request && data.request.timeInfo) {\n      return false;\n    }\n\n    return !panel.hasTitle();\n  }\n\n  onShowPanelDescription = () => {\n    const { panel } = this.props;\n    const descriptionMarkdown = getTemplateSrv().replace(panel.description, panel.scopedVars);\n    const interpolatedDescription = renderMarkdown(descriptionMarkdown);\n\n    if (!this.descriptionInteractionReported) {\n      // Description rendering function can be called multiple times due to re-renders but we want to report the interaction once.\n      reportInteraction('dashboards_panelheader_description_displayed');\n      this.descriptionInteractionReported = true;\n    }\n\n    return interpolatedDescription;\n  };\n\n  onShowPanelLinks = (): LinkModel[] => {\n    const { panel } = this.props;\n    const linkSupplier = getPanelLinksSupplier(panel);\n    if (linkSupplier) {\n      const panelLinks = linkSupplier && linkSupplier.getLinks(panel.replaceVariables);\n\n      return panelLinks.map((panelLink) => ({\n        ...panelLink,\n        onClick: (...args) => {\n          reportInteraction('dashboards_panelheader_datalink_clicked', { has_multiple_links: panelLinks.length > 1 });\n          panelLink.onClick?.(...args);\n        },\n      }));\n    }\n    return [];\n  };\n\n  onOpenInspector = (e: React.SyntheticEvent, tab: string) => {\n    e.stopPropagation();\n    locationService.partial({ inspect: this.props.panel.id, inspectTab: tab });\n  };\n\n  onOpenErrorInspect = (e: React.SyntheticEvent) => {\n    e.stopPropagation();\n    locationService.partial({ inspect: this.props.panel.id, inspectTab: InspectTab.Error });\n    reportInteraction('dashboards_panelheader_statusmessage_clicked');\n  };\n\n  onCancelQuery = () => {\n    this.props.panel.getQueryRunner().cancelQuery();\n    reportInteraction('dashboards_panelheader_cancelquery_clicked', { data_state: this.state.data.state });\n  };\n\n  render() {\n    const { dashboard, panel, isViewing, isEditing, width, height, plugin } = this.props;\n    const { errorMessage, data } = this.state;\n    const { transparent } = panel;\n\n    const alertState = data.alertState?.state;\n    const hasHoverHeader = this.hasOverlayHeader();\n\n    const containerClassNames = classNames({\n      'panel-container': true,\n      'panel-container--absolute': isSoloRoute(locationService.getLocation().pathname),\n      'panel-container--transparent': transparent,\n      'panel-container--no-title': hasHoverHeader,\n      [`panel-alert-state--${alertState}`]: alertState !== undefined,\n    });\n\n    const title = panel.getDisplayTitle();\n    const padding: PanelPadding = plugin.noPadding ? 'none' : 'md';\n\n    const showTitleItems =\n      (panel.links && panel.links.length > 0 && this.onShowPanelLinks) ||\n      (data.series.length > 0 && data.series.some((v) => (v.meta?.notices?.length ?? 0) > 0)) ||\n      (data.request && data.request.timeInfo) ||\n      alertState;\n\n    const titleItems = showTitleItems && (\n      <PanelHeaderTitleItems\n        key=\"title-items\"\n        alertState={alertState}\n        data={data}\n        panelId={panel.id}\n        panelLinks={panel.links}\n        onShowPanelLinks={this.onShowPanelLinks}\n      />\n    );\n\n    const dragClass = !(isViewing || isEditing) ? 'grid-drag-handle' : '';\n    if (config.featureToggles.newPanelChromeUI) {\n      // Shift the hover menu down if it's on the top row so it doesn't get clipped by topnav\n      const hoverHeaderOffset = (panel.gridPos?.y ?? 0) === 0 ? -16 : undefined;\n\n      const menu = (\n        <div data-testid=\"panel-dropdown\">\n          <PanelHeaderMenuWrapperNew panel={panel} dashboard={dashboard} loadingState={data.state} />\n        </div>\n      );\n\n      return (\n        <PanelChrome\n          width={width}\n          height={height}\n          title={title}\n          loadingState={data.state}\n          statusMessage={errorMessage}\n          statusMessageOnClick={this.onOpenErrorInspect}\n          description={!!panel.description ? this.onShowPanelDescription : undefined}\n          titleItems={titleItems}\n          menu={this.props.hideMenu ? undefined : menu}\n          dragClass={dragClass}\n          dragClassCancel=\"grid-drag-cancel\"\n          padding={padding}\n          hoverHeaderOffset={hoverHeaderOffset}\n          hoverHeader={this.hasOverlayHeader()}\n          displayMode={transparent ? 'transparent' : 'default'}\n          onCancelQuery={this.onCancelQuery}\n        >\n          {(innerWidth, innerHeight) => (\n            <>\n              <ErrorBoundary\n                dependencies={[data, plugin, panel.getOptions()]}\n                onError={this.onPanelError}\n                onRecover={this.onPanelErrorRecover}\n              >\n                {({ error }) => {\n                  if (error) {\n                    return null;\n                  }\n                  return this.renderPanelContent(innerWidth, innerHeight);\n                }}\n              </ErrorBoundary>\n            </>\n          )}\n        </PanelChrome>\n      );\n    } else {\n      return (\n        <section\n          className={containerClassNames}\n          aria-label={selectors.components.Panels.Panel.containerByTitle(panel.title)}\n        >\n          <PanelHeader\n            panel={panel}\n            dashboard={dashboard}\n            title={panel.title}\n            description={panel.description}\n            links={panel.links}\n            error={errorMessage}\n            isEditing={isEditing}\n            isViewing={isViewing}\n            alertState={alertState}\n            data={data}\n          />\n          <ErrorBoundary\n            dependencies={[data, plugin, panel.getOptions()]}\n            onError={this.onPanelError}\n            onRecover={this.onPanelErrorRecover}\n          >\n            {({ error }) => {\n              if (error) {\n                return null;\n              }\n              return this.renderPanel(width, height);\n            }}\n          </ErrorBoundary>\n        </section>\n      );\n    }\n  }\n}\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { StoreState } from 'app/types';\n\nimport { initPanelState } from '../../panel/state/actions';\nimport { setPanelInstanceState } from '../../panel/state/reducers';\nimport { DashboardModel, PanelModel } from '../state';\n\nimport { LazyLoader } from './LazyLoader';\nimport { PanelChromeAngular } from './PanelChromeAngular';\nimport { PanelStateWrapper } from './PanelStateWrapper';\n\nexport interface OwnProps {\n  panel: PanelModel;\n  stateKey: string;\n  dashboard: DashboardModel;\n  isEditing: boolean;\n  isViewing: boolean;\n  width: number;\n  height: number;\n  lazy?: boolean;\n  timezone?: string;\n  hideMenu?: boolean;\n}\n\nconst mapStateToProps = (state: StoreState, props: OwnProps) => {\n  const panelState = state.panels[props.stateKey];\n  if (!panelState) {\n    return { plugin: null };\n  }\n\n  return {\n    plugin: panelState.plugin,\n    instanceState: panelState.instanceState,\n  };\n};\n\nconst mapDispatchToProps = {\n  initPanelState,\n  setPanelInstanceState,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport class DashboardPanelUnconnected extends PureComponent<Props> {\n  static defaultProps: Partial<Props> = {\n    lazy: true,\n  };\n\n  componentDidMount() {\n    this.props.panel.isInView = !this.props.lazy;\n    if (!this.props.lazy) {\n      this.onPanelLoad();\n    }\n  }\n\n  onInstanceStateChange = (value: any) => {\n    this.props.setPanelInstanceState({ key: this.props.stateKey, value });\n  };\n\n  onVisibilityChange = (v: boolean) => {\n    this.props.panel.isInView = v;\n  };\n\n  onPanelLoad = () => {\n    if (!this.props.plugin) {\n      this.props.initPanelState(this.props.panel);\n    }\n  };\n\n  renderPanel = (isInView: boolean) => {\n    const { dashboard, panel, isViewing, isEditing, width, height, plugin, timezone, hideMenu } = this.props;\n\n    if (!plugin) {\n      return null;\n    }\n\n    if (plugin && plugin.angularPanelCtrl) {\n      return (\n        <PanelChromeAngular\n          plugin={plugin}\n          panel={panel}\n          dashboard={dashboard}\n          isViewing={isViewing}\n          isEditing={isEditing}\n          isInView={isInView}\n          width={width}\n          height={height}\n        />\n      );\n    }\n\n    return (\n      <PanelStateWrapper\n        plugin={plugin}\n        panel={panel}\n        dashboard={dashboard}\n        isViewing={isViewing}\n        isEditing={isEditing}\n        isInView={isInView}\n        width={width}\n        height={height}\n        onInstanceStateChange={this.onInstanceStateChange}\n        timezone={timezone}\n        hideMenu={hideMenu}\n      />\n    );\n  };\n\n  render() {\n    const { width, height, lazy } = this.props;\n\n    return lazy ? (\n      <LazyLoader width={width} height={height} onChange={this.onVisibilityChange} onLoad={this.onPanelLoad}>\n        {this.renderPanel}\n      </LazyLoader>\n    ) : (\n      this.renderPanel(true)\n    );\n  }\n}\n\nexport const DashboardPanel = connector(DashboardPanelUnconnected);\n","import React, { Component } from 'react';\n\nimport { renderMarkdown, LinkModelSupplier, ScopedVars } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { locationService, getTemplateSrv } from '@grafana/runtime';\nimport { Tooltip, PopoverContent } from '@grafana/ui';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { PanelModel } from 'app/features/dashboard/state/PanelModel';\nimport { InspectTab } from 'app/features/inspector/types';\n\nenum InfoMode {\n  Error = 'Error',\n  Info = 'Info',\n  Links = 'Links',\n}\n\nexport interface Props {\n  panel: PanelModel;\n  title?: string;\n  description?: string;\n  scopedVars?: ScopedVars;\n  links?: LinkModelSupplier<PanelModel>;\n  error?: string;\n}\n\nexport class PanelHeaderCorner extends Component<Props> {\n  timeSrv: TimeSrv = getTimeSrv();\n\n  getInfoMode = () => {\n    const { panel, error } = this.props;\n    if (error) {\n      return InfoMode.Error;\n    }\n    if (!!panel.description) {\n      return InfoMode.Info;\n    }\n    if (panel.links && panel.links.length) {\n      return InfoMode.Links;\n    }\n\n    return undefined;\n  };\n\n  getInfoContent = (): JSX.Element => {\n    const { panel } = this.props;\n    const markdown = panel.description || '';\n    const interpolatedMarkdown = getTemplateSrv().replace(markdown, panel.scopedVars);\n    const markedInterpolatedMarkdown = renderMarkdown(interpolatedMarkdown);\n    const links = this.props.links && this.props.links.getLinks(panel.replaceVariables);\n\n    return (\n      <div className=\"panel-info-content markdown-html\">\n        <div dangerouslySetInnerHTML={{ __html: markedInterpolatedMarkdown }} />\n\n        {links && links.length > 0 && (\n          <ul className=\"panel-info-corner-links\">\n            {links.map((link, idx) => {\n              return (\n                <li key={idx}>\n                  <a className=\"panel-info-corner-links__item\" href={link.href} target={link.target}>\n                    {link.title}\n                  </a>\n                </li>\n              );\n            })}\n          </ul>\n        )}\n      </div>\n    );\n  };\n\n  /**\n   * Open the Panel Inspector when we click on an error\n   */\n  onClickError = () => {\n    locationService.partial({\n      inspect: this.props.panel.id,\n      inspectTab: InspectTab.Error,\n    });\n  };\n\n  renderCornerType(infoMode: InfoMode, content: PopoverContent, onClick?: () => void) {\n    const theme = infoMode === InfoMode.Error ? 'error' : 'info';\n    const className = `panel-info-corner panel-info-corner--${infoMode.toLowerCase()}`;\n    const ariaLabel = selectors.components.Panels.Panel.headerCornerInfo(infoMode.toLowerCase());\n\n    return (\n      <Tooltip content={content} placement=\"top-start\" theme={theme} interactive>\n        <button type=\"button\" className={className} onClick={onClick} aria-label={ariaLabel}>\n          <i aria-hidden className=\"fa\" />\n          <span className=\"panel-info-corner-inner\" />\n        </button>\n      </Tooltip>\n    );\n  }\n\n  render() {\n    const { error } = this.props;\n    const infoMode: InfoMode | undefined = this.getInfoMode();\n\n    if (!infoMode) {\n      return null;\n    }\n\n    if (infoMode === InfoMode.Error && error) {\n      return this.renderCornerType(infoMode, error, this.onClickError);\n    }\n\n    if (infoMode === InfoMode.Info || infoMode === InfoMode.Links) {\n      return this.renderCornerType(infoMode, this.getInfoContent);\n    }\n\n    return null;\n  }\n}\n\nexport default PanelHeaderCorner;\n","import {\n  ByNamesMatcherMode,\n  ConfigOverrideRule,\n  DataFrame,\n  DynamicConfigValue,\n  FieldConfigSource,\n  FieldMatcherID,\n  fieldMatchers,\n  FieldType,\n  getFieldDisplayName,\n  isSystemOverrideWithRef,\n  SystemConfigOverrideRule,\n} from '@grafana/data';\nimport { SeriesVisibilityChangeMode } from '@grafana/ui';\n\nconst displayOverrideRef = 'hideSeriesFrom';\nconst isHideSeriesOverride = isSystemOverrideWithRef(displayOverrideRef);\n\nexport function seriesVisibilityConfigFactory(\n  label: string,\n  mode: SeriesVisibilityChangeMode,\n  fieldConfig: FieldConfigSource,\n  data: DataFrame[]\n) {\n  const { overrides } = fieldConfig;\n\n  const displayName = label;\n  const currentIndex = overrides.findIndex(isHideSeriesOverride);\n\n  if (currentIndex < 0) {\n    if (mode === SeriesVisibilityChangeMode.ToggleSelection) {\n      const override = createOverride([displayName, ...getNamesOfHiddenFields(overrides, data)]);\n\n      return {\n        ...fieldConfig,\n        overrides: [...fieldConfig.overrides, override],\n      };\n    }\n\n    const displayNames = getDisplayNames(data, displayName);\n    const override = createOverride(displayNames);\n\n    return {\n      ...fieldConfig,\n      overrides: [...fieldConfig.overrides, override],\n    };\n  }\n\n  const overridesCopy = Array.from(overrides);\n  const [current] = overridesCopy.splice(currentIndex, 1) as SystemConfigOverrideRule[];\n\n  if (mode === SeriesVisibilityChangeMode.ToggleSelection) {\n    let existing = getExistingDisplayNames(current);\n    const nameOfHiddenFields = getNamesOfHiddenFields(overridesCopy, data);\n\n    if (nameOfHiddenFields.length > 0) {\n      existing = existing.filter((el) => nameOfHiddenFields.indexOf(el) < 0);\n    }\n\n    if (existing[0] === displayName && existing.length === 1) {\n      return {\n        ...fieldConfig,\n        overrides: overridesCopy,\n      };\n    }\n\n    const override = createOverride([displayName, ...nameOfHiddenFields]);\n\n    return {\n      ...fieldConfig,\n      overrides: [...overridesCopy, override],\n    };\n  }\n\n  const override = createExtendedOverride(current, displayName);\n\n  if (allFieldsAreExcluded(override, data)) {\n    return {\n      ...fieldConfig,\n      overrides: overridesCopy,\n    };\n  }\n\n  return {\n    ...fieldConfig,\n    overrides: [...overridesCopy, override],\n  };\n}\n\nfunction createOverride(\n  names: string[],\n  mode = ByNamesMatcherMode.exclude,\n  property?: DynamicConfigValue\n): SystemConfigOverrideRule {\n  property = property ?? {\n    id: 'custom.hideFrom',\n    value: {\n      viz: true,\n      legend: false,\n      tooltip: false,\n    },\n  };\n\n  return {\n    __systemRef: displayOverrideRef,\n    matcher: {\n      id: FieldMatcherID.byNames,\n      options: {\n        mode: mode,\n        names: names,\n        prefix: mode === ByNamesMatcherMode.exclude ? 'All except:' : undefined,\n        readOnly: true,\n      },\n    },\n    properties: [\n      {\n        ...property,\n        value: {\n          viz: true,\n          legend: false,\n          tooltip: false,\n        },\n      },\n    ],\n  };\n}\n\nconst createExtendedOverride = (\n  current: SystemConfigOverrideRule,\n  displayName: string,\n  mode = ByNamesMatcherMode.exclude\n): SystemConfigOverrideRule => {\n  const property = current.properties.find((p) => p.id === 'custom.hideFrom');\n  const existing = getExistingDisplayNames(current);\n  const index = existing.findIndex((name) => name === displayName);\n\n  if (index < 0) {\n    existing.push(displayName);\n  } else {\n    existing.splice(index, 1);\n  }\n\n  return createOverride(existing, mode, property);\n};\n\nconst getExistingDisplayNames = (rule: SystemConfigOverrideRule): string[] => {\n  const names = rule.matcher.options?.names;\n  if (!Array.isArray(names)) {\n    return [];\n  }\n  return [...names];\n};\n\nconst allFieldsAreExcluded = (override: SystemConfigOverrideRule, data: DataFrame[]): boolean => {\n  return getExistingDisplayNames(override).length === getDisplayNames(data).length;\n};\n\nconst getDisplayNames = (data: DataFrame[], excludeName?: string): string[] => {\n  const unique = new Set<string>();\n\n  for (const frame of data) {\n    for (const field of frame.fields) {\n      if (field.type !== FieldType.number) {\n        continue;\n      }\n\n      const name = getFieldDisplayName(field, frame, data);\n\n      if (name === excludeName) {\n        continue;\n      }\n\n      unique.add(name);\n    }\n  }\n\n  return Array.from(unique);\n};\n\nconst getNamesOfHiddenFields = (overrides: ConfigOverrideRule[], data: DataFrame[]): string[] => {\n  let names: string[] = [];\n\n  for (const override of overrides) {\n    const property = override.properties.find((p) => p.id === 'custom.hideFrom');\n\n    if (property !== undefined && property.value?.legend === true) {\n      const info = fieldMatchers.get(override.matcher.id);\n      const matcher = info.get(override.matcher.options);\n\n      for (const frame of data) {\n        for (const field of frame.fields) {\n          if (field.type !== FieldType.number) {\n            continue;\n          }\n\n          const name = getFieldDisplayName(field, frame, data);\n\n          if (matcher(field, frame, data)) {\n            names.push(name);\n          }\n        }\n      }\n    }\n  }\n\n  return names;\n};\n","import { BehaviorSubject } from 'rxjs';\n\nimport { dateMath, dateTime, TimeRange } from '@grafana/data';\n\nimport { PanelStateWrapper } from './PanelStateWrapper';\n\n// target is 20hz (50ms), but we poll at 100ms to smooth out jitter\nconst interval = 100;\n\ninterface LiveListener {\n  last: number;\n  intervalMs: number;\n  panel: PanelStateWrapper;\n}\n\nclass LiveTimer {\n  listeners: LiveListener[] = [];\n\n  budget = 1;\n  threshold = 1.5; // trial and error appears about right\n  ok = new BehaviorSubject(true);\n  lastUpdate = Date.now();\n\n  isLive = false; // the dashboard time range ends in \"now\"\n  timeRange?: TimeRange;\n  liveTimeOffset = 0;\n\n  /** Called when the dashboard time range changes */\n  setLiveTimeRange(v?: TimeRange) {\n    this.timeRange = v;\n    this.isLive = v?.raw?.to === 'now';\n\n    if (this.isLive) {\n      const from = dateMath.parse(v!.raw.from, false)?.valueOf()!;\n      const to = dateMath.parse(v!.raw.to, true)?.valueOf()!;\n      this.liveTimeOffset = to - from;\n\n      for (const listener of this.listeners) {\n        listener.intervalMs = getLiveTimerInterval(this.liveTimeOffset, listener.panel.props.width);\n      }\n    }\n  }\n\n  listen(panel: PanelStateWrapper) {\n    this.listeners.push({\n      last: this.lastUpdate,\n      panel: panel,\n      intervalMs: getLiveTimerInterval(\n        60000, // 1min\n        panel.props.width\n      ),\n    });\n  }\n\n  remove(panel: PanelStateWrapper) {\n    this.listeners = this.listeners.filter((v) => v.panel !== panel);\n  }\n\n  updateInterval(panel: PanelStateWrapper) {\n    if (!this.timeRange || !this.isLive) {\n      return;\n    }\n    for (const listener of this.listeners) {\n      if (listener.panel === panel) {\n        listener.intervalMs = getLiveTimerInterval(this.liveTimeOffset, listener.panel.props.width);\n        return;\n      }\n    }\n  }\n\n  // Called at the consistent dashboard interval\n  measure = () => {\n    const now = Date.now();\n    this.budget = (now - this.lastUpdate) / interval;\n\n    const oldOk = this.ok.getValue();\n    const newOk = this.budget <= this.threshold;\n    if (oldOk !== newOk) {\n      this.ok.next(newOk);\n    }\n    this.lastUpdate = now;\n\n    // For live dashboards, listen to changes\n    if (this.isLive && this.ok.getValue() && this.timeRange) {\n      // when the time-range is relative fire events\n      let tr: TimeRange | undefined = undefined;\n      for (const listener of this.listeners) {\n        if (!listener.panel.props.isInView) {\n          continue;\n        }\n\n        const elapsed = now - listener.last;\n        if (elapsed >= listener.intervalMs) {\n          if (!tr) {\n            const { raw } = this.timeRange;\n            tr = {\n              raw,\n              from: dateTime(now - this.liveTimeOffset),\n              to: dateTime(now),\n            };\n          }\n          listener.panel.liveTimeChanged(tr);\n          listener.last = now;\n        }\n      }\n    }\n  };\n}\n\nconst FIVE_MINS = 5 * 60 * 1000;\n\nexport function getLiveTimerInterval(delta: number, width: number): number {\n  const millisPerPixel = Math.ceil(delta / width / 100) * 100;\n  if (millisPerPixel > FIVE_MINS) {\n    return FIVE_MINS;\n  }\n  return millisPerPixel;\n}\n\nexport const liveTimer = new LiveTimer();\nsetInterval(liveTimer.measure, interval);\n","import { reportMetaAnalytics, MetaAnalyticsEventName, DashboardViewEventPayload } from '@grafana/runtime';\n\nimport { DashboardModel } from './DashboardModel';\n\nexport function emitDashboardViewEvent(dashboard: DashboardModel) {\n  const eventData: DashboardViewEventPayload = {\n    dashboardId: dashboard.id,\n    dashboardName: dashboard.title,\n    dashboardUid: dashboard.uid,\n    folderName: dashboard.meta.folderTitle,\n    eventName: MetaAnalyticsEventName.DashboardView,\n  };\n\n  reportMetaAnalytics(eventData);\n}\n","import { DataQuery, locationUtil, setWeekStart, DashboardLoadedEvent } from '@grafana/data';\nimport { config, isFetchError, locationService } from '@grafana/runtime';\nimport { notifyApp } from 'app/core/actions';\nimport appEvents from 'app/core/app_events';\nimport { createErrorNotification } from 'app/core/copy/appNotification';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport { KeybindingSrv } from 'app/core/services/keybindingSrv';\nimport store from 'app/core/store';\nimport { dashboardLoaderSrv } from 'app/features/dashboard/services/DashboardLoaderSrv';\nimport { DashboardSrv, getDashboardSrv } from 'app/features/dashboard/services/DashboardSrv';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { dashboardWatcher } from 'app/features/live/dashboard/dashboardWatcher';\nimport { playlistSrv } from 'app/features/playlist/PlaylistSrv';\nimport { toStateKey } from 'app/features/variables/utils';\nimport {\n  DashboardDTO,\n  DashboardInitPhase,\n  DashboardMeta,\n  DashboardRoutes,\n  StoreState,\n  ThunkDispatch,\n  ThunkResult,\n} from 'app/types';\n\nimport { createDashboardQueryRunner } from '../../query/state/DashboardQueryRunner/DashboardQueryRunner';\nimport { initVariablesTransaction } from '../../variables/state/actions';\nimport { getIfExistsLastKey } from '../../variables/state/selectors';\n\nimport { DashboardModel } from './DashboardModel';\nimport { PanelModel } from './PanelModel';\nimport { emitDashboardViewEvent } from './analyticsProcessor';\nimport { dashboardInitCompleted, dashboardInitFailed, dashboardInitFetching, dashboardInitServices } from './reducers';\n\nexport interface InitDashboardArgs {\n  urlUid?: string;\n  urlSlug?: string;\n  urlType?: string;\n  urlFolderUid?: string;\n  panelType?: string;\n  accessToken?: string;\n  routeName?: string;\n  fixUrl: boolean;\n  keybindingSrv: KeybindingSrv;\n}\n\nasync function fetchDashboard(\n  args: InitDashboardArgs,\n  dispatch: ThunkDispatch,\n  getState: () => StoreState\n): Promise<DashboardDTO | null> {\n  // When creating new or adding panels to a dashboard from explore we load it from local storage\n  const model = store.getObject<DashboardDTO>(DASHBOARD_FROM_LS_KEY);\n  if (model) {\n    removeDashboardToFetchFromLocalStorage();\n    return model;\n  }\n\n  try {\n    switch (args.routeName) {\n      case DashboardRoutes.Home: {\n        // load home dash\n        const dashDTO: DashboardDTO = await backendSrv.get('/api/dashboards/home');\n\n        // if user specified a custom home dashboard redirect to that\n        if (dashDTO.redirectUri) {\n          const newUrl = locationUtil.stripBaseFromUrl(dashDTO.redirectUri);\n          locationService.replace(newUrl);\n          return null;\n        }\n\n        // disable some actions on the default home dashboard\n        dashDTO.meta.canSave = false;\n        dashDTO.meta.canShare = false;\n        dashDTO.meta.canStar = false;\n        return dashDTO;\n      }\n      case DashboardRoutes.Public: {\n        return await dashboardLoaderSrv.loadDashboard('public', args.urlSlug, args.accessToken);\n      }\n      case DashboardRoutes.Normal: {\n        const dashDTO: DashboardDTO = await dashboardLoaderSrv.loadDashboard(args.urlType, args.urlSlug, args.urlUid);\n\n        if (args.fixUrl && dashDTO.meta.url && !playlistSrv.isPlaying) {\n          // check if the current url is correct (might be old slug)\n          const dashboardUrl = locationUtil.stripBaseFromUrl(dashDTO.meta.url);\n          const currentPath = locationService.getLocation().pathname;\n\n          if (dashboardUrl !== currentPath) {\n            // Spread current location to persist search params used for navigation\n            locationService.replace({\n              ...locationService.getLocation(),\n              pathname: dashboardUrl,\n            });\n            console.log('not correct url correcting', dashboardUrl, currentPath);\n          }\n        }\n        return dashDTO;\n      }\n      case DashboardRoutes.New: {\n        return getNewDashboardModelData(args.urlFolderUid, args.panelType);\n      }\n      case DashboardRoutes.Path: {\n        const path = args.urlSlug ?? '';\n        return await dashboardLoaderSrv.loadDashboard(DashboardRoutes.Path, path, path);\n      }\n      default:\n        throw { message: 'Unknown route ' + args.routeName };\n    }\n  } catch (err) {\n    // Ignore cancelled errors\n    if (isFetchError(err) && err.cancelled) {\n      return null;\n    }\n\n    dispatch(dashboardInitFailed({ message: 'Failed to fetch dashboard', error: err }));\n    console.error(err);\n    return null;\n  }\n}\n\nconst getQueriesByDatasource = (\n  panels: PanelModel[],\n  queries: { [datasourceId: string]: DataQuery[] } = {}\n): { [datasourceId: string]: DataQuery[] } => {\n  panels.forEach((panel) => {\n    if (panel.panels) {\n      getQueriesByDatasource(panel.panels, queries);\n    } else if (panel.targets) {\n      panel.targets.forEach((target) => {\n        if (target.datasource?.type) {\n          if (queries[target.datasource.type]) {\n            queries[target.datasource.type].push(target);\n          } else {\n            queries[target.datasource.type] = [target];\n          }\n        }\n      });\n    }\n  });\n  return queries;\n};\n\n/**\n * This action (or saga) does everything needed to bootstrap a dashboard & dashboard model.\n * First it handles the process of fetching the dashboard, correcting the url if required (causing redirects/url updates)\n *\n * This is used both for single dashboard & solo panel routes, home & new dashboard routes.\n *\n * Then it handles the initializing of the old angular services that the dashboard components & panels still depend on\n *\n */\nexport function initDashboard(args: InitDashboardArgs): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    // set fetching state\n    dispatch(dashboardInitFetching());\n\n    // fetch dashboard data\n    const dashDTO = await fetchDashboard(args, dispatch, getState);\n\n    // returns null if there was a redirect or error\n    if (!dashDTO) {\n      return;\n    }\n\n    // set initializing state\n    dispatch(dashboardInitServices());\n\n    // create model\n    let dashboard: DashboardModel;\n    try {\n      dashboard = new DashboardModel(dashDTO.dashboard, dashDTO.meta);\n    } catch (err) {\n      dispatch(dashboardInitFailed({ message: 'Failed create dashboard model', error: err }));\n      console.error(err);\n      return;\n    }\n\n    // add missing orgId query param\n    const storeState = getState();\n    const queryParams = locationService.getSearchObject();\n\n    if (!queryParams.orgId) {\n      // TODO this is currently not possible with the LocationService API\n      locationService.partial({ orgId: storeState.user.orgId }, true);\n    }\n\n    // init services\n    const timeSrv: TimeSrv = getTimeSrv();\n    const dashboardSrv: DashboardSrv = getDashboardSrv();\n\n    // legacy srv state, we need this value updated for built-in annotations\n    dashboardSrv.setCurrent(dashboard);\n\n    timeSrv.init(dashboard);\n\n    const dashboardUid = toStateKey(args.urlUid ?? dashboard.uid);\n    // template values service needs to initialize completely before the rest of the dashboard can load\n    await dispatch(initVariablesTransaction(dashboardUid, dashboard));\n\n    // DashboardQueryRunner needs to run after all variables have been resolved so that any annotation query including a variable\n    // will be correctly resolved\n    const runner = createDashboardQueryRunner({ dashboard, timeSrv });\n    runner.run({ dashboard, range: timeSrv.timeRange() });\n\n    if (getIfExistsLastKey(getState()) !== dashboardUid) {\n      // if a previous dashboard has slow running variable queries the batch uid will be the new one\n      // but the args.urlUid will be the same as before initVariablesTransaction was called so then we can't continue initializing\n      // the previous dashboard.\n      return;\n    }\n\n    // If dashboard is in a different init phase it means it cancelled during service init\n    if (getState().dashboard.initPhase !== DashboardInitPhase.Services) {\n      return;\n    }\n\n    try {\n      dashboard.processRepeats();\n\n      // handle auto fix experimental feature\n      if (queryParams.autofitpanels) {\n        dashboard.autoFitPanels(window.innerHeight, queryParams.kiosk);\n      }\n\n      args.keybindingSrv.setupDashboardBindings(dashboard);\n    } catch (err) {\n      if (err instanceof Error) {\n        dispatch(notifyApp(createErrorNotification('Dashboard init failed', err)));\n      }\n      console.error(err);\n    }\n\n    // send open dashboard event\n    if (args.routeName !== DashboardRoutes.New) {\n      emitDashboardViewEvent(dashboard);\n\n      // Listen for changes on the current dashboard\n      dashboardWatcher.watch(dashboard.uid);\n    } else {\n      dashboardWatcher.leave();\n    }\n\n    // set week start\n    if (dashboard.weekStart !== '') {\n      setWeekStart(dashboard.weekStart);\n    } else {\n      setWeekStart(config.bootData.user.weekStart);\n    }\n\n    // Propagate an app-wide event about the dashboard being loaded\n    appEvents.publish(\n      new DashboardLoadedEvent({\n        dashboardId: dashboard.uid,\n        orgId: storeState.user.orgId,\n        userId: storeState.user.user?.id,\n        grafanaVersion: config.buildInfo.version,\n        queries: getQueriesByDatasource(dashboard.panels),\n      })\n    );\n\n    // yay we are done\n    dispatch(dashboardInitCompleted(dashboard));\n  };\n}\n\nexport function getNewDashboardModelData(\n  urlFolderUid?: string,\n  panelType?: string\n): { dashboard: any; meta: DashboardMeta } {\n  const panels = config.featureToggles.emptyDashboardPage\n    ? []\n    : [\n        {\n          type: panelType ?? 'add-panel',\n          gridPos: { x: 0, y: 0, w: 12, h: 9 },\n          title: 'Panel Title',\n        },\n      ];\n\n  const data = {\n    meta: {\n      canStar: false,\n      canShare: false,\n      canDelete: false,\n      isNew: true,\n      folderUid: '',\n    },\n    dashboard: {\n      title: 'New dashboard',\n      panels,\n    },\n  };\n\n  if (urlFolderUid) {\n    data.meta.folderUid = urlFolderUid;\n  }\n\n  return data;\n}\n\nconst DASHBOARD_FROM_LS_KEY = 'DASHBOARD_FROM_LS_KEY';\n\nexport function setDashboardToFetchFromLocalStorage(model: DashboardDTO) {\n  store.setObject(DASHBOARD_FROM_LS_KEY, model);\n}\n\nexport function removeDashboardToFetchFromLocalStorage() {\n  store.delete(DASHBOARD_FROM_LS_KEY);\n}\n","import {\n  applyFieldOverrides,\n  ArrayDataFrame,\n  getDefaultTimeRange,\n  getProcessedDataFrames,\n  LoadingState,\n  PanelData,\n} from '@grafana/data';\nimport { config } from 'app/core/config';\n\nimport { SnapshotWorker } from '../../query/state/DashboardQueryRunner/SnapshotWorker';\nimport { getTimeSrv } from '../services/TimeSrv';\nimport { DashboardModel, PanelModel } from '../state';\n\nimport { applyPanelTimeOverrides } from './panel';\n\nexport function loadSnapshotData(panel: PanelModel, dashboard: DashboardModel): PanelData {\n  const data = getProcessedDataFrames(panel.snapshotData);\n  const worker = new SnapshotWorker();\n  const options = { dashboard, range: getDefaultTimeRange() };\n  const annotationEvents = worker.canWork(options) ? worker.getAnnotationsInSnapshot(dashboard, panel.id) : [];\n  const annotations = [new ArrayDataFrame(annotationEvents)];\n  const timeData = applyPanelTimeOverrides(panel, getTimeSrv().timeRange());\n\n  return {\n    timeRange: timeData.timeRange,\n    state: LoadingState.Done,\n    series: applyFieldOverrides({\n      data,\n      fieldConfig: {\n        defaults: {},\n        overrides: [],\n      },\n      replaceVariables: panel.replaceVariables,\n      fieldConfigRegistry: panel.plugin!.fieldConfigRegistry,\n      theme: config.theme2,\n      timeZone: dashboard.getTimezone(),\n    }),\n    annotations,\n  };\n}\n","export enum InspectTab {\n  Data = 'data',\n  Meta = 'meta', // When result metadata exists\n  Error = 'error',\n  Stats = 'stats',\n  JSON = 'json',\n  Query = 'query',\n  Help = 'help', // get info required for support+debugging\n}\n","import {\n  DataLink,\n  DisplayValue,\n  FieldDisplay,\n  formattedValueToString,\n  getFieldDisplayValuesProxy,\n  getTimeField,\n  InterpolateFunction,\n  Labels,\n  LinkModelSupplier,\n  ScopedVar,\n  ScopedVars,\n} from '@grafana/data';\nimport { PanelModel } from 'app/features/dashboard/state/PanelModel';\n\nimport { getLinkSrv } from './link_srv';\n\ninterface SeriesVars {\n  name?: string;\n  refId?: string;\n}\n\ninterface FieldVars {\n  name: string;\n  labels?: Labels;\n}\n\ninterface ValueVars {\n  raw: any;\n  numeric: number;\n  text: string;\n  time?: number;\n  calc?: string;\n}\n\ninterface DataViewVars {\n  name?: string;\n  refId?: string;\n  fields?: Record<string, DisplayValue>;\n}\n\ninterface DataLinkScopedVars extends ScopedVars {\n  __series: ScopedVar<SeriesVars>;\n  __field: ScopedVar<FieldVars>;\n  __value: ScopedVar<ValueVars>;\n  __data: ScopedVar<DataViewVars>;\n}\n\n/**\n * Link suppliers creates link models based on a link origin\n */\nexport const getFieldLinksSupplier = (value: FieldDisplay): LinkModelSupplier<FieldDisplay> | undefined => {\n  const links = value.field.links;\n  if (!links || links.length === 0) {\n    return undefined;\n  }\n\n  return {\n    getLinks: (replaceVariables: InterpolateFunction) => {\n      const scopedVars: Partial<DataLinkScopedVars> = {};\n\n      if (value.view) {\n        const { dataFrame } = value.view;\n\n        scopedVars['__series'] = {\n          value: {\n            name: dataFrame.name,\n            refId: dataFrame.refId,\n          },\n          text: 'Series',\n        };\n\n        const field = value.colIndex !== undefined ? dataFrame.fields[value.colIndex] : undefined;\n\n        if (field) {\n          scopedVars['__field'] = {\n            value: {\n              name: field.name,\n              labels: field.labels,\n            },\n            text: 'Field',\n          };\n\n          if (value.rowIndex !== undefined && value.rowIndex >= 0) {\n            const { timeField } = getTimeField(dataFrame);\n            scopedVars['__value'] = {\n              value: {\n                raw: field.values.get(value.rowIndex),\n                numeric: value.display.numeric,\n                text: formattedValueToString(value.display),\n                time: timeField ? timeField.values.get(value.rowIndex) : undefined,\n              },\n              text: 'Value',\n            };\n          }\n\n          // Expose other values on the row\n          if (value.view) {\n            scopedVars['__data'] = {\n              value: {\n                name: dataFrame.name,\n                refId: dataFrame.refId,\n                fields: getFieldDisplayValuesProxy({\n                  frame: dataFrame,\n                  rowIndex: value.rowIndex!,\n                }),\n              },\n              text: 'Data',\n            };\n          }\n        } else {\n          // calculation\n          scopedVars['__value'] = {\n            value: {\n              raw: value.display.numeric,\n              numeric: value.display.numeric,\n              text: formattedValueToString(value.display),\n              calc: value.name,\n            },\n            text: 'Value',\n          };\n        }\n      } else {\n        console.log('VALUE', value);\n      }\n\n      const replace: InterpolateFunction = (value: string, vars: ScopedVars | undefined, fmt?: string | Function) => {\n        const finalVars: ScopedVars = {\n          ...(scopedVars as ScopedVars),\n          ...vars,\n        };\n        return replaceVariables(value, finalVars, fmt);\n      };\n\n      return links.map((link: DataLink) => {\n        return getLinkSrv().getDataLinkUIModel(link, replace, value);\n      });\n    },\n  };\n};\n\nexport const getPanelLinksSupplier = (panel: PanelModel): LinkModelSupplier<PanelModel> | undefined => {\n  const links = panel.links;\n\n  if (!links || links.length === 0) {\n    return undefined;\n  }\n\n  return {\n    getLinks: () => {\n      return links.map((link) => {\n        return getLinkSrv().getDataLinkUIModel(link, panel.replaceVariables, panel);\n      });\n    },\n  };\n};\n","import { PanelModel } from 'app/features/dashboard/state';\nimport { StoreState } from 'app/types';\n\nimport { PanelState } from './reducers';\n\nexport function getPanelStateForModel(state: StoreState, model: PanelModel): PanelState | undefined {\n  return state.panels[model.key];\n}\n"],"names":["LazyLoader","children","width","height","onLoad","onChange","id","useUniqueId","loaded","setLoaded","isInView","setIsInView","wrapperRef","useEffectOnce","entry","wrapperEl","c","entries","isSoloRoute","path","pluginHasRootPage","pluginId","navTree","navLink","app","page","PanelHeaderLoadingIndicator","state","onClick","styles","getStyles","Tooltip","Icon","theme","PanelHeaderMenuTrigger","divProps","clickCoordinates","setClickCoordinates","panelMenuOpen","setPanelMenuOpen","onMenuToggle","event","isClick","eventToClickCoordinates","onMouseDown","current","clicked","deadZone","PanelHeaderMenu","menu","isSubMenu","menuItem","idx","PanelHeaderMenuItem","PanelHeaderMenuNew","items","renderItems","item","Menu","selectors","getPanelMenu","dashboard","panel","angularComponent","onViewPanel","onEditPanel","onSharePanel","onAddLibraryPanel","onUnlinkLibraryPanel","onInspectPanel","tab","onMore","onDuplicatePanel","onCopyPanel","onRemovePanel","onNavigateToExplore","openInNewWindow","url","config","store","onToggleLegend","inspectMenu","e","currentTarget","target","closestMenuItem","subMenu","canEdit","scope","panelCtrl","angularMenuItems","reactItem","extensions","getPluginExtensions","createExtensionContext","extensionsMenu","extension","truncateTitle","title","length","PanelHeaderMenuProvider","loadingState","setItems","PanelHeaderMenuWrapper","style","menuItemsClassName","menuWrapperClassName","PanelHeaderMenuWrapperNew","PanelHeaderNotice","notice","iconName","ToolbarButton","PanelHeaderNotices","frames","panelId","openInspect","notices","frame","PanelHeader","error","isViewing","isEditing","data","alertState","onCancelQuery","className","panelStyles","PanelHeaderCorner","closeMenu","ClickOutsideWrapper","PanelChromeAngularUnconnected","props","Subscription","queryRunner","errorMessage","prevProps","prevState","plugin","headerHeight","chromePadding","setPanelAngularComponent","loader","template","transparent","containerClassNames","panelContentClassNames","element","mapStateToProps","mapDispatchToProps","PanelChromeAngular","changeSeriesColorConfigFactory","label","color","fieldConfig","overrides","currentIndex","override","createOverride","overridesCopy","existing","propertyIndex","p","createProperty","propertiesCopy","PanelLinks","panelLinks","onShowPanelLinks","getLinksContent","interpolatedLinks","link","linkModel","PanelChrome","Dropdown","PanelHeaderTitleItems","alertStateItem","timeshift","DEFAULT_PLUGIN_ERROR","PanelStateWrapper","value","mode","sortKey","legendOptions","sortDesc","sortBy","timeData","stateUpdate","options","isRegion","anno","timeRange","filter","key","operator","datasourceInstance","datasourceRef","descriptionMarkdown","interpolatedDescription","linkSupplier","panelLink","args","eventBus","loadSnapshotData","liveTimer","liveTime","delta","context","isFirstLoad","errors","pluginMeta","innerWidth","innerHeight","renderCounter","profiler","PanelComponent","panelOptions","PanelContext","panelWidth","innerPanelHeight","timeZone","PluginContextProvider","hasHoverHeader","padding","titleItems","v","dragClass","hoverHeaderOffset","ErrorBoundary","panelState","connector","DashboardPanelUnconnected","timezone","hideMenu","lazy","DashboardPanel","InfoMode","markdown","interpolatedMarkdown","markedInterpolatedMarkdown","links","infoMode","content","ariaLabel","displayOverrideRef","isHideSeriesOverride","seriesVisibilityConfigFactory","displayName","getNamesOfHiddenFields","displayNames","getDisplayNames","getExistingDisplayNames","nameOfHiddenFields","el","createExtendedOverride","allFieldsAreExcluded","names","property","index","name","rule","excludeName","unique","field","matcher","interval","LiveTimer","now","oldOk","newOk","tr","listener","raw","from","to","getLiveTimerInterval","FIVE_MINS","millisPerPixel","emitDashboardViewEvent","eventData","fetchDashboard","dispatch","getState","model","DASHBOARD_FROM_LS_KEY","removeDashboardToFetchFromLocalStorage","dashDTO","newUrl","dashboardUrl","currentPath","getNewDashboardModelData","err","getQueriesByDatasource","panels","queries","initDashboard","DashboardModel","storeState","queryParams","timeSrv","dashboardUid","dashboardWatcher","urlFolderUid","panelType","setDashboardToFetchFromLocalStorage","worker","annotationEvents","annotations","InspectTab","getFieldLinksSupplier","replaceVariables","scopedVars","dataFrame","timeField","replace","vars","fmt","finalVars","getPanelLinksSupplier","getPanelStateForModel"],"sourceRoot":""}