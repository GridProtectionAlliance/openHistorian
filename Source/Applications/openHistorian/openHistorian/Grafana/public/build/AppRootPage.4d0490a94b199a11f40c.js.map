{"version":3,"sources":["webpack:///./public/app/features/plugins/PluginDashboards.tsx","webpack:///./public/app/features/plugins/wrappers/AppConfigWrapper.tsx","webpack:///./public/app/core/components/PluginHelp/PluginHelp.tsx","webpack:///./public/app/features/plugins/AppRootPage.tsx","webpack:///./public/app/features/plugins/PluginPage.tsx","webpack:///./public/app/features/datasources/DashboardsTable.tsx"],"names":["PluginDashboards","_super","props","_this","call","this","importAll","importNext","index","dashboards","state","import","then","length","Promise","resolve","setTimeout","dash","overwrite","_a","plugin","datasource","installCmd","pluginId","id","path","inputs","push","name","type","meta","value","Object","app_core_services_backend_srv__WEBPACK_IMPORTED_MODULE_3__","post","res","app_core_core__WEBPACK_IMPORTED_MODULE_4__","emit","_grafana_data__WEBPACK_IMPORTED_MODULE_6__","alertSuccess","title","lodash_extend__WEBPACK_IMPORTED_MODULE_2___default","setState","tslib__WEBPACK_IMPORTED_MODULE_0__","remove","delete","importedUri","imported","loading","prototype","componentDidMount","get","render","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","className","app_features_datasources_DashboardsTable__WEBPACK_IMPORTED_MODULE_5__","onImport","onRemove","react__WEBPACK_IMPORTED_MODULE_1__","AppConfigCtrlWrapper","preUpdateHook","postUpdateHook","update","model","updateCmd","lodash_extend__WEBPACK_IMPORTED_MODULE_3___default","enabled","pinned","jsonData","secureJsonData","app_core_services_backend_srv__WEBPACK_IMPORTED_MODULE_7__","window","location","href","setPreUpdateHook","callback","setPostUpdateHook","importDashboards","_grafana_data__WEBPACK_IMPORTED_MODULE_5__","enable","disable","angularCtrl","refresh","componentDidUpdate","prevProps","element","lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_2___default","app","scopeProps","ctrl","_grafana_runtime__WEBPACK_IMPORTED_MODULE_6__","load","withRightMargin","emotion__WEBPACK_IMPORTED_MODULE_8__","marginRight","ref","_grafana_ui__WEBPACK_IMPORTED_MODULE_4__","variant","onClick","PluginHelp","apply","arguments","isError","isLoading","help","loadHelp","_grafana_runtime__WEBPACK_IMPORTED_MODULE_3__","response","helpHtml","_grafana_data__WEBPACK_IMPORTED_MODULE_2__","constructPlaceholderInfo","catch","dangerouslySetInnerHTML","__html","getAppPluginPageError","_grafana_data__WEBPACK_IMPORTED_MODULE_7__","AppRootPage","onNavChanged","nav","_PluginPage__WEBPACK_IMPORTED_MODULE_8__","_PluginSettingsCache__WEBPACK_IMPORTED_MODULE_5__","info","error","app_core_core__WEBPACK_IMPORTED_MODULE_10__","alertError","app_core_nav_model_srv__WEBPACK_IMPORTED_MODULE_9__","_plugin_loader__WEBPACK_IMPORTED_MODULE_6__","sent","query","_b","root","app_core_components_Page_Page__WEBPACK_IMPORTED_MODULE_4__","navModel","Contents","__webpack_exports__","react_hot_loader__WEBPACK_IMPORTED_MODULE_2__","module","react_redux__WEBPACK_IMPORTED_MODULE_3__","routeParams","slug","getLoadingNav","node","text","icon","main","loadPlugin","_PluginSettingsCache__WEBPACK_IMPORTED_MODULE_9__","_plugin_loader__WEBPACK_IMPORTED_MODULE_10__","panel","renderer","reject","PAGE_ID_README","PAGE_ID_DASHBOARDS","PAGE_ID_CONFIG_CTRL","PluginPage","showUpdateInfo","app_core_core__WEBPACK_IMPORTED_MODULE_15__","app_types__WEBPACK_IMPORTED_MODULE_5__","showModal","src","defaultPage","$contextSrv","appSubUrl","app_core_config__WEBPACK_IMPORTED_MODULE_16__","_c","isAdmin","pages","url","angularConfigCtrl","configPages","next","done","page","lodash_find__WEBPACK_IMPORTED_MODULE_4___default","includes","dashboard","img","logos","large","subTitle","author","breadcrumbs","children","setActivePage","getPluginTabsNav","hasRole","app_core_nav_model_srv__WEBPACK_IMPORTED_MODULE_11__","prevPage","renderBody","_grafana_ui__WEBPACK_IMPORTED_MODULE_6__","severity","Error","active","find","tab","_d","body","_PluginDashboards__WEBPACK_IMPORTED_MODULE_14__","_wrappers_AppConfigWrapper__WEBPACK_IMPORTED_MODULE_13__","app_core_components_PluginHelp_PluginHelp__WEBPACK_IMPORTED_MODULE_12__","renderVersionInfo","version","hasUpdate","content","latestVersion","theme","placement","renderSidebarIncludeBody","item","toLowerCase","replace","getPluginIcon","Fragment","renderSidebarIncludes","map","include","key","renderSidebarDependencies","dependencies","grafanaVersion","plugins","plug","renderSidebarLinks","links","link","target","rel","app_core_components_Page_Page__WEBPACK_IMPORTED_MODULE_8__","loadError","pageId","defaultPageId","found","selected","changed","p","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","dashboardId","importedUrl","style","textAlign","revision","importedRevision","buttonText"],"mappings":"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","file":"AppRootPage.4d0490a94b199a11f40c.js","sourcesContent":["import React, { PureComponent } from 'react';\n\nimport extend from 'lodash/extend';\n\nimport { PluginDashboard } from 'app/types';\nimport { getBackendSrv } from 'app/core/services/backend_srv';\nimport { appEvents } from 'app/core/core';\nimport DashboardsTable from 'app/features/datasources/DashboardsTable';\nimport { AppEvents, PluginMeta, DataSourceApi } from '@grafana/data';\n\ninterface Props {\n  plugin: PluginMeta;\n  datasource?: DataSourceApi;\n}\n\ninterface State {\n  dashboards: PluginDashboard[];\n  loading: boolean;\n}\n\nexport class PluginDashboards extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      loading: true,\n      dashboards: [],\n    };\n  }\n\n  async componentDidMount() {\n    const pluginId = this.props.plugin.id;\n    getBackendSrv()\n      .get(`/api/plugins/${pluginId}/dashboards`)\n      .then((dashboards: any) => {\n        this.setState({ dashboards, loading: false });\n      });\n  }\n\n  importAll = () => {\n    this.importNext(0);\n  };\n\n  private importNext = (index: number) => {\n    const { dashboards } = this.state;\n    return this.import(dashboards[index], true).then(() => {\n      if (index + 1 < dashboards.length) {\n        return new Promise(resolve => {\n          setTimeout(() => {\n            this.importNext(index + 1).then(() => {\n              resolve();\n            });\n          }, 500);\n        });\n      } else {\n        return Promise.resolve();\n      }\n    });\n  };\n\n  import = (dash: PluginDashboard, overwrite: boolean) => {\n    const { plugin, datasource } = this.props;\n\n    const installCmd: any = {\n      pluginId: plugin.id,\n      path: dash.path,\n      overwrite: overwrite,\n      inputs: [],\n    };\n\n    if (datasource) {\n      installCmd.inputs.push({\n        name: '*',\n        type: 'datasource',\n        pluginId: datasource.meta.id,\n        value: datasource.name,\n      });\n    }\n\n    return getBackendSrv()\n      .post(`/api/dashboards/import`, installCmd)\n      .then((res: PluginDashboard) => {\n        appEvents.emit(AppEvents.alertSuccess, ['Dashboard Imported', dash.title]);\n        extend(dash, res);\n        this.setState({ dashboards: [...this.state.dashboards] });\n      });\n  };\n\n  remove = (dash: PluginDashboard) => {\n    getBackendSrv()\n      .delete('/api/dashboards/' + dash.importedUri)\n      .then(() => {\n        dash.imported = false;\n        this.setState({ dashboards: [...this.state.dashboards] });\n      });\n  };\n\n  render() {\n    const { loading, dashboards } = this.state;\n    if (loading) {\n      return <div>loading...</div>;\n    }\n    if (!dashboards || !dashboards.length) {\n      return <div>No dashboards are included with this plugin</div>;\n    }\n\n    return (\n      <div className=\"gf-form-group\">\n        <DashboardsTable dashboards={dashboards} onImport={this.import} onRemove={this.remove} />\n      </div>\n    );\n  }\n}\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport cloneDeep from 'lodash/cloneDeep';\nimport extend from 'lodash/extend';\n\nimport { Button } from '@grafana/ui';\nimport { PluginMeta, AppPlugin, deprecationWarning } from '@grafana/data';\n\nimport { AngularComponent, getAngularLoader } from '@grafana/runtime';\nimport { getBackendSrv } from 'app/core/services/backend_srv';\nimport { css } from 'emotion';\n\ninterface Props {\n  app: AppPlugin;\n}\n\ninterface State {\n  angularCtrl: AngularComponent;\n  refresh: number;\n}\n\nexport class AppConfigCtrlWrapper extends PureComponent<Props, State> {\n  element: HTMLElement; // for angular ctrl\n\n  // Needed for angular scope\n  preUpdateHook = () => Promise.resolve();\n  postUpdateHook = () => Promise.resolve();\n  model: PluginMeta;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      angularCtrl: null,\n      refresh: 0,\n    };\n  }\n\n  componentDidMount() {\n    // Force a reload after the first mount -- is there a better way to do this?\n    setTimeout(() => {\n      this.setState({ refresh: this.state.refresh + 1 });\n    }, 5);\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (!this.element || this.state.angularCtrl) {\n      return;\n    }\n\n    // Set a copy of the meta\n    this.model = cloneDeep(this.props.app.meta);\n\n    const loader = getAngularLoader();\n    const template = '<plugin-component type=\"app-config-ctrl\"></plugin-component>';\n    const scopeProps = { ctrl: this };\n    const angularCtrl = loader.load(this.element, scopeProps, template);\n\n    this.setState({ angularCtrl });\n  }\n\n  render() {\n    const model = this.model;\n\n    const withRightMargin = css({ marginRight: '8px' });\n\n    return (\n      <div>\n        <div ref={element => (this.element = element)} />\n        <br />\n        <br />\n        {model && (\n          <div className=\"gf-form\">\n            {!model.enabled && (\n              <Button variant=\"primary\" onClick={this.enable} className={withRightMargin}>\n                Enable\n              </Button>\n            )}\n            {model.enabled && (\n              <Button variant=\"primary\" onClick={this.update} className={withRightMargin}>\n                Update\n              </Button>\n            )}\n            {model.enabled && (\n              <Button variant=\"danger\" onClick={this.disable} className={withRightMargin}>\n                Disable\n              </Button>\n            )}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  //-----------------------------------------------------------\n  // Copied from plugin_edit_ctrl\n  //-----------------------------------------------------------\n\n  update = () => {\n    const pluginId = this.model.id;\n\n    this.preUpdateHook()\n      .then(() => {\n        const updateCmd = extend(\n          {\n            enabled: this.model.enabled,\n            pinned: this.model.pinned,\n            jsonData: this.model.jsonData,\n            secureJsonData: this.model.secureJsonData,\n          },\n          {}\n        );\n        return getBackendSrv().post(`/api/plugins/${pluginId}/settings`, updateCmd);\n      })\n      .then(this.postUpdateHook)\n      .then(res => {\n        window.location.href = window.location.href;\n      });\n  };\n\n  setPreUpdateHook = (callback: () => any) => {\n    this.preUpdateHook = callback;\n  };\n\n  setPostUpdateHook = (callback: () => any) => {\n    this.postUpdateHook = callback;\n  };\n\n  // Stub to avoid unknown function in legacy code\n  importDashboards = (): Promise<void> => {\n    deprecationWarning('AppConfig', 'importDashboards()');\n    return Promise.resolve();\n  };\n\n  enable = () => {\n    this.model.enabled = true;\n    this.model.pinned = true;\n    this.update();\n  };\n\n  disable = () => {\n    this.model.enabled = false;\n    this.model.pinned = false;\n    this.update();\n  };\n}\n","import React, { PureComponent } from 'react';\nimport { renderMarkdown } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\n\ninterface Props {\n  plugin: {\n    name: string;\n    id: string;\n  };\n  type: string;\n}\n\ninterface State {\n  isError: boolean;\n  isLoading: boolean;\n  help: string;\n}\n\nexport class PluginHelp extends PureComponent<Props, State> {\n  state = {\n    isError: false,\n    isLoading: false,\n    help: '',\n  };\n\n  componentDidMount(): void {\n    this.loadHelp();\n  }\n\n  constructPlaceholderInfo() {\n    return 'No plugin help or readme markdown file was found';\n  }\n\n  loadHelp = () => {\n    const { plugin, type } = this.props;\n    this.setState({ isLoading: true });\n\n    getBackendSrv()\n      .get(`/api/plugins/${plugin.id}/markdown/${type}`)\n      .then((response: string) => {\n        const helpHtml = renderMarkdown(response);\n\n        if (response === '' && type === 'help') {\n          this.setState({\n            isError: false,\n            isLoading: false,\n            help: this.constructPlaceholderInfo(),\n          });\n        } else {\n          this.setState({\n            isError: false,\n            isLoading: false,\n            help: helpHtml,\n          });\n        }\n      })\n      .catch(() => {\n        this.setState({\n          isError: true,\n          isLoading: false,\n        });\n      });\n  };\n\n  render() {\n    const { type } = this.props;\n    const { isError, isLoading, help } = this.state;\n\n    if (isLoading) {\n      return <h2>Loading help...</h2>;\n    }\n\n    if (isError) {\n      return <h3>'Error occurred when loading help'</h3>;\n    }\n\n    if (type === 'panel_help' && help === '') {\n    }\n\n    return <div className=\"markdown-html\" dangerouslySetInnerHTML={{ __html: help }} />;\n  }\n}\n","// Libraries\nimport React, { Component } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\n\n// Types\nimport { StoreState } from 'app/types';\nimport { UrlQueryMap } from '@grafana/runtime';\n\nimport Page from 'app/core/components/Page/Page';\nimport { getPluginSettings } from './PluginSettingsCache';\nimport { importAppPlugin } from './plugin_loader';\nimport { AppPlugin, AppPluginMeta, PluginType, NavModel, AppEvents } from '@grafana/data';\nimport { getLoadingNav } from './PluginPage';\nimport { getNotFoundNav, getWarningNav } from 'app/core/nav_model_srv';\nimport { appEvents } from 'app/core/core';\n\ninterface Props {\n  pluginId: string; // From the angular router\n  query: UrlQueryMap;\n  path: string;\n  slug?: string;\n}\n\ninterface State {\n  loading: boolean;\n  plugin?: AppPlugin;\n  nav: NavModel;\n}\n\nexport function getAppPluginPageError(meta: AppPluginMeta) {\n  if (!meta) {\n    return 'Unknown Plugin';\n  }\n  if (meta.type !== PluginType.app) {\n    return 'Plugin must be an app';\n  }\n  if (!meta.enabled) {\n    return 'Application Not Enabled';\n  }\n  return null;\n}\n\nclass AppRootPage extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      loading: true,\n      nav: getLoadingNav(),\n    };\n  }\n\n  async componentDidMount() {\n    const { pluginId } = this.props;\n\n    try {\n      const app = await getPluginSettings(pluginId).then(info => {\n        const error = getAppPluginPageError(info);\n        if (error) {\n          appEvents.emit(AppEvents.alertError, [error]);\n          this.setState({ nav: getWarningNav(error) });\n          return null;\n        }\n        return importAppPlugin(info);\n      });\n      this.setState({ plugin: app, loading: false });\n    } catch (err) {\n      this.setState({ plugin: null, loading: false, nav: getNotFoundNav() });\n    }\n  }\n\n  onNavChanged = (nav: NavModel) => {\n    this.setState({ nav });\n  };\n\n  render() {\n    const { path, query } = this.props;\n    const { loading, plugin, nav } = this.state;\n\n    if (plugin && !plugin.root) {\n      // TODO? redirect to plugin page?\n      return <div>No Root App</div>;\n    }\n\n    return (\n      <Page navModel={nav}>\n        <Page.Contents isLoading={loading}>\n          {!loading && plugin && (\n            <plugin.root meta={plugin.meta} query={query} path={path} onNavChanged={this.onNavChanged} />\n          )}\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nconst mapStateToProps = (state: StoreState) => ({\n  pluginId: state.location.routeParams.pluginId,\n  slug: state.location.routeParams.slug,\n  query: state.location.query,\n  path: state.location.path,\n});\n\nexport default hot(module)(connect(mapStateToProps)(AppRootPage));\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport find from 'lodash/find';\n// Types\nimport { UrlQueryMap } from '@grafana/runtime';\nimport { StoreState, AppNotificationSeverity, CoreEvents } from 'app/types';\nimport { Alert, Tooltip } from '@grafana/ui';\nimport {\n  AppPlugin,\n  GrafanaPlugin,\n  PluginDependencies,\n  PluginInclude,\n  PluginIncludeType,\n  PluginMeta,\n  PluginMetaInfo,\n  PluginType,\n  NavModel,\n  NavModelItem,\n} from '@grafana/data';\n\nimport Page from 'app/core/components/Page/Page';\nimport { getPluginSettings } from './PluginSettingsCache';\nimport { importAppPlugin, importDataSourcePlugin, importPanelPlugin } from './plugin_loader';\nimport { getNotFoundNav } from 'app/core/nav_model_srv';\nimport { PluginHelp } from 'app/core/components/PluginHelp/PluginHelp';\nimport { AppConfigCtrlWrapper } from './wrappers/AppConfigWrapper';\nimport { PluginDashboards } from './PluginDashboards';\nimport { appEvents } from 'app/core/core';\nimport { config } from 'app/core/config';\nimport { ContextSrv } from '../../core/services/context_srv';\n\nexport function getLoadingNav(): NavModel {\n  const node = {\n    text: 'Loading...',\n    icon: 'icon-gf icon-gf-panel',\n  };\n  return {\n    node: node,\n    main: node,\n  };\n}\n\nfunction loadPlugin(pluginId: string): Promise<GrafanaPlugin> {\n  return getPluginSettings(pluginId).then(info => {\n    if (info.type === PluginType.app) {\n      return importAppPlugin(info);\n    }\n    if (info.type === PluginType.datasource) {\n      return importDataSourcePlugin(info);\n    }\n    if (info.type === PluginType.panel) {\n      return importPanelPlugin(pluginId).then(plugin => {\n        // Panel Meta does not have the *full* settings meta\n        return getPluginSettings(pluginId).then(meta => {\n          plugin.meta = {\n            ...meta, // Set any fields that do not exist\n            ...plugin.meta,\n          };\n          return plugin;\n        });\n      });\n    }\n    if (info.type === PluginType.renderer) {\n      return Promise.resolve({ meta: info } as GrafanaPlugin);\n    }\n    return Promise.reject('Unknown Plugin type: ' + info.type);\n  });\n}\n\ninterface Props {\n  pluginId: string;\n  query: UrlQueryMap;\n  path: string; // the URL path\n  $contextSrv: ContextSrv;\n}\n\ninterface State {\n  loading: boolean;\n  plugin?: GrafanaPlugin;\n  nav: NavModel;\n  defaultPage: string; // The first configured one or readme\n}\n\nconst PAGE_ID_README = 'readme';\nconst PAGE_ID_DASHBOARDS = 'dashboards';\nconst PAGE_ID_CONFIG_CTRL = 'config';\n\nclass PluginPage extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      loading: true,\n      nav: getLoadingNav(),\n      defaultPage: PAGE_ID_README,\n    };\n  }\n\n  async componentDidMount() {\n    const { pluginId, path, query, $contextSrv } = this.props;\n    const { appSubUrl } = config;\n\n    const plugin = await loadPlugin(pluginId);\n    if (!plugin) {\n      this.setState({\n        loading: false,\n        nav: getNotFoundNav(),\n      });\n      return; // 404\n    }\n\n    const { defaultPage, nav } = getPluginTabsNav(plugin, appSubUrl, path, query, $contextSrv.hasRole('Admin'));\n\n    this.setState({\n      loading: false,\n      plugin,\n      defaultPage,\n      nav,\n    });\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const prevPage = prevProps.query.page as string;\n    const page = this.props.query.page as string;\n    if (prevPage !== page) {\n      const { nav, defaultPage } = this.state;\n      const node = {\n        ...nav.node,\n        children: setActivePage(page, nav.node.children, defaultPage),\n      };\n      this.setState({\n        nav: {\n          node: node,\n          main: node,\n        },\n      });\n    }\n  }\n\n  renderBody() {\n    const { query } = this.props;\n    const { plugin, nav } = this.state;\n\n    if (!plugin) {\n      return <Alert severity={AppNotificationSeverity.Error} title=\"Plugin Not Found\" />;\n    }\n\n    const active = nav.main.children.find(tab => tab.active);\n    if (active) {\n      // Find the current config tab\n      if (plugin.configPages) {\n        for (const tab of plugin.configPages) {\n          if (tab.id === active.id) {\n            return <tab.body plugin={plugin} query={query} />;\n          }\n        }\n      }\n\n      // Apps have some special behavior\n      if (plugin.meta.type === PluginType.app) {\n        if (active.id === PAGE_ID_DASHBOARDS) {\n          return <PluginDashboards plugin={plugin.meta} />;\n        }\n\n        if (active.id === PAGE_ID_CONFIG_CTRL && plugin.angularConfigCtrl) {\n          return <AppConfigCtrlWrapper app={plugin as AppPlugin} />;\n        }\n      }\n    }\n\n    return <PluginHelp plugin={plugin.meta} type=\"help\" />;\n  }\n\n  showUpdateInfo = () => {\n    appEvents.emit(CoreEvents.showModal, {\n      src: 'public/app/features/plugins/partials/update_instructions.html',\n      model: this.state.plugin.meta,\n    });\n  };\n\n  renderVersionInfo(meta: PluginMeta) {\n    if (!meta.info.version) {\n      return null;\n    }\n\n    return (\n      <section className=\"page-sidebar-section\">\n        <h4>Version</h4>\n        <span>{meta.info.version}</span>\n        {meta.hasUpdate && (\n          <div>\n            <Tooltip content={meta.latestVersion} theme=\"info\" placement=\"top\">\n              <a href=\"#\" onClick={this.showUpdateInfo}>\n                Update Available!\n              </a>\n            </Tooltip>\n          </div>\n        )}\n      </section>\n    );\n  }\n\n  renderSidebarIncludeBody(item: PluginInclude) {\n    if (item.type === PluginIncludeType.page) {\n      const pluginId = this.state.plugin.meta.id;\n      const page = item.name.toLowerCase().replace(' ', '-');\n      return (\n        <a href={`plugins/${pluginId}/page/${page}`}>\n          <i className={getPluginIcon(item.type)} />\n          {item.name}\n        </a>\n      );\n    }\n    return (\n      <>\n        <i className={getPluginIcon(item.type)} />\n        {item.name}\n      </>\n    );\n  }\n\n  renderSidebarIncludes(includes: PluginInclude[]) {\n    if (!includes || !includes.length) {\n      return null;\n    }\n\n    return (\n      <section className=\"page-sidebar-section\">\n        <h4>Includes</h4>\n        <ul className=\"ui-list plugin-info-list\">\n          {includes.map(include => {\n            return (\n              <li className=\"plugin-info-list-item\" key={include.name}>\n                {this.renderSidebarIncludeBody(include)}\n              </li>\n            );\n          })}\n        </ul>\n      </section>\n    );\n  }\n\n  renderSidebarDependencies(dependencies: PluginDependencies) {\n    if (!dependencies) {\n      return null;\n    }\n\n    return (\n      <section className=\"page-sidebar-section\">\n        <h4>Dependencies</h4>\n        <ul className=\"ui-list plugin-info-list\">\n          <li className=\"plugin-info-list-item\">\n            <img src=\"public/img/grafana_icon.svg\" />\n            Grafana {dependencies.grafanaVersion}\n          </li>\n          {dependencies.plugins &&\n            dependencies.plugins.map(plug => {\n              return (\n                <li className=\"plugin-info-list-item\" key={plug.name}>\n                  <i className={getPluginIcon(plug.type)} />\n                  {plug.name} {plug.version}\n                </li>\n              );\n            })}\n        </ul>\n      </section>\n    );\n  }\n\n  renderSidebarLinks(info: PluginMetaInfo) {\n    if (!info.links || !info.links.length) {\n      return null;\n    }\n\n    return (\n      <section className=\"page-sidebar-section\">\n        <h4>Links</h4>\n        <ul className=\"ui-list\">\n          {info.links.map(link => {\n            return (\n              <li key={link.url}>\n                <a href={link.url} className=\"external-link\" target=\"_blank\" rel=\"noopener\">\n                  {link.name}\n                </a>\n              </li>\n            );\n          })}\n        </ul>\n      </section>\n    );\n  }\n\n  render() {\n    const { loading, nav, plugin } = this.state;\n    const { $contextSrv } = this.props;\n    const isAdmin = $contextSrv.hasRole('Admin');\n    return (\n      <Page navModel={nav}>\n        <Page.Contents isLoading={loading}>\n          {!loading && (\n            <div className=\"sidebar-container\">\n              <div className=\"sidebar-content\">\n                {plugin.loadError && (\n                  <Alert\n                    severity={AppNotificationSeverity.Error}\n                    title=\"Error Loading Plugin\"\n                    children={\n                      <>\n                        Check the server startup logs for more information. <br />\n                        If this plugin was loaded from git, make sure it was compiled.\n                      </>\n                    }\n                  />\n                )}\n                {this.renderBody()}\n              </div>\n              <aside className=\"page-sidebar\">\n                {plugin && (\n                  <section className=\"page-sidebar-section\">\n                    {this.renderVersionInfo(plugin.meta)}\n                    {isAdmin && this.renderSidebarIncludes(plugin.meta.includes)}\n                    {this.renderSidebarDependencies(plugin.meta.dependencies)}\n                    {this.renderSidebarLinks(plugin.meta.info)}\n                  </section>\n                )}\n              </aside>\n            </div>\n          )}\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nfunction getPluginTabsNav(\n  plugin: GrafanaPlugin,\n  appSubUrl: string,\n  path: string,\n  query: UrlQueryMap,\n  isAdmin: boolean\n): { defaultPage: string; nav: NavModel } {\n  const { meta } = plugin;\n  let defaultPage: string;\n  const pages: NavModelItem[] = [];\n\n  if (true) {\n    pages.push({\n      text: 'Readme',\n      icon: 'fa fa-fw fa-file-text-o',\n      url: `${appSubUrl}${path}?page=${PAGE_ID_README}`,\n      id: PAGE_ID_README,\n    });\n  }\n\n  // We allow non admins to see plugins but only their readme. Config is hidden even though the API needs to be\n  // public for plugins to work properly.\n  if (isAdmin) {\n    // Only show Config/Pages for app\n    if (meta.type === PluginType.app) {\n      // Legacy App Config\n      if (plugin.angularConfigCtrl) {\n        pages.push({\n          text: 'Config',\n          icon: 'gicon gicon-cog',\n          url: `${appSubUrl}${path}?page=${PAGE_ID_CONFIG_CTRL}`,\n          id: PAGE_ID_CONFIG_CTRL,\n        });\n        defaultPage = PAGE_ID_CONFIG_CTRL;\n      }\n\n      if (plugin.configPages) {\n        for (const page of plugin.configPages) {\n          pages.push({\n            text: page.title,\n            icon: page.icon,\n            url: `${appSubUrl}${path}?page=${page.id}`,\n            id: page.id,\n          });\n          if (!defaultPage) {\n            defaultPage = page.id;\n          }\n        }\n      }\n\n      // Check for the dashboard pages\n      if (find(meta.includes, { type: PluginIncludeType.dashboard })) {\n        pages.push({\n          text: 'Dashboards',\n          icon: 'gicon gicon-dashboard',\n          url: `${appSubUrl}${path}?page=${PAGE_ID_DASHBOARDS}`,\n          id: PAGE_ID_DASHBOARDS,\n        });\n      }\n    }\n  }\n\n  if (!defaultPage) {\n    defaultPage = pages[0].id; // the first tab\n  }\n\n  const node = {\n    text: meta.name,\n    img: meta.info.logos.large,\n    subTitle: meta.info.author.name,\n    breadcrumbs: [{ title: 'Plugins', url: 'plugins' }],\n    url: `${appSubUrl}${path}`,\n    children: setActivePage(query.page as string, pages, defaultPage),\n  };\n\n  return {\n    defaultPage,\n    nav: {\n      node: node,\n      main: node,\n    },\n  };\n}\n\nfunction setActivePage(pageId: string, pages: NavModelItem[], defaultPageId: string): NavModelItem[] {\n  let found = false;\n  const selected = pageId || defaultPageId;\n  const changed = pages.map(p => {\n    const active = !found && selected === p.id;\n    if (active) {\n      found = true;\n    }\n    return { ...p, active };\n  });\n  if (!found) {\n    changed[0].active = true;\n  }\n  return changed;\n}\n\nfunction getPluginIcon(type: string) {\n  switch (type) {\n    case 'datasource':\n      return 'gicon gicon-datasources';\n    case 'panel':\n      return 'icon-gf icon-gf-panel';\n    case 'app':\n      return 'icon-gf icon-gf-apps';\n    case 'page':\n      return 'icon-gf icon-gf-endpoint-tiny';\n    case 'dashboard':\n      return 'gicon gicon-dashboard';\n    default:\n      return 'icon-gf icon-gf-apps';\n  }\n}\n\nconst mapStateToProps = (state: StoreState) => ({\n  pluginId: state.location.routeParams.pluginId,\n  query: state.location.query,\n  path: state.location.path,\n});\n\nexport default hot(module)(connect(mapStateToProps)(PluginPage));\n","import React, { FC } from 'react';\nimport { PluginDashboard } from '../../types';\n\nexport interface Props {\n  dashboards: PluginDashboard[];\n  onImport: (dashboard: PluginDashboard, overwrite: boolean) => void;\n  onRemove: (dashboard: PluginDashboard) => void;\n}\n\nconst DashboardsTable: FC<Props> = ({ dashboards, onImport, onRemove }) => {\n  function buttonText(dashboard: PluginDashboard) {\n    return dashboard.revision !== dashboard.importedRevision ? 'Update' : 'Re-import';\n  }\n\n  return (\n    <table className=\"filter-table\">\n      <tbody>\n        {dashboards.map((dashboard, index) => {\n          return (\n            <tr key={`${dashboard.dashboardId}-${index}`}>\n              <td className=\"width-1\">\n                <i className=\"gicon gicon-dashboard\" />\n              </td>\n              <td>\n                {dashboard.imported ? (\n                  <a href={dashboard.importedUrl}>{dashboard.title}</a>\n                ) : (\n                  <span>{dashboard.title}</span>\n                )}\n              </td>\n              <td style={{ textAlign: 'right' }}>\n                {!dashboard.imported ? (\n                  <button className=\"btn btn-secondary btn-small\" onClick={() => onImport(dashboard, false)}>\n                    Import\n                  </button>\n                ) : (\n                  <button className=\"btn btn-secondary btn-small\" onClick={() => onImport(dashboard, true)}>\n                    {buttonText(dashboard)}\n                  </button>\n                )}\n                {dashboard.imported && (\n                  <button className=\"btn btn-danger btn-small\" onClick={() => onRemove(dashboard)}>\n                    <i className=\"fa fa-trash\" />\n                  </button>\n                )}\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nexport default DashboardsTable;\n"],"sourceRoot":""}