{"version":3,"sources":["webpack:///./public/app/features/datasources/DataSourcesListItem.tsx","webpack:///./public/app/features/datasources/DataSourcesList.tsx","webpack:///./public/app/features/datasources/state/buildCategories.ts","webpack:///./public/app/features/datasources/state/actions.ts","webpack:///./public/app/core/components/OrgActionBar/OrgActionBar.tsx","webpack:///./public/app/core/components/FilterInput/FilterInput.tsx","webpack:///./public/app/features/datasources/state/navModel.ts","webpack:///./public/app/features/datasources/state/selectors.ts","webpack:///./public/app/features/datasources/DataSourcesListPage.tsx"],"names":["datasources_DataSourcesListItem","_super","DataSourcesListItem","Object","tslib_es6","prototype","render","dataSource","this","props","react_default","a","createElement","className","href","id","type","src","typeLogoUrl","alt","name","aria-label","pages","DataSources","selectors","dataSources","isDefault","url","react","DataSourcesList_DataSourcesList","DataSourcesList","_a","layoutMode","listStyle","classnames_default","card-section","card-list-layout-grid","LayoutSelector","Grid","card-list-layout-list","List","map","index","key","__webpack_exports__","buildCategories","plugins","categories","title","categoryIndex","pluginIndex","enterprisePlugins","getPhantomPlugin","description","imgUrl","categories_1","categories_1_1","next","done","category","value","plugin","find","item","info","links","_b","e_5","_c","push","plugins_1","plugins_1_1","categories_2","categories_2_1","datasource","module","baseUrl","logos","small","large","author","screenshots","updated","version","enterprisePlugins_1","e_4","enterprisePlugins_1_1","sortPlugins","sortingRules","prometheus","graphite","loki","mysql","postgres","gcloud","sort","b","aSort","bSort","options","initDataSourceSettings","pageId","dependencies","loadDataSource","getDataSource","getDataSourceMeta","importDataSourcePlugin","plugin_loader","dispatch","getState","isNaN","reducers","Error","sent","dataSourceSettings","dataSourceMeta","importedPlugin","console","log","err_1","testDataSource","dataSourceName","getDatasourceSrv","datasource_srv","getBackendSrv","backend_srv","get","dsApi","testDatasource","withNoBackendCache","result","message","err_2","statusText","loadDataSources","_this","response","PluginSettingsCache","pluginInfo","actions","navModel","addDataSource","getStore","newInstance","access","length","nameExits","nameHasSuffix","getNewName","digit","getLastDigit","findNewName","post","path","loadDataSourcePlugins","enabled","updateDataSource","put","updateFrontendSettings","deleteDataSource","delete","filter","toLowerCase","then","settings","config","datasources","defaultDatasource","init","endsWith","parseInt","slice","OrgActionBar","tslib__WEBPACK_IMPORTED_MODULE_0__","searchQuery","onSetLayoutMode","linkButton","setSearchQuery","target","linkProps","react__WEBPACK_IMPORTED_MODULE_1___default","_FilterInput_FilterInput__WEBPACK_IMPORTED_MODULE_3__","labelClassName","inputClassName","onChange","placeholder","_LayoutSelector_LayoutSelector__WEBPACK_IMPORTED_MODULE_2__","mode","onLayoutModeChanged","react__WEBPACK_IMPORTED_MODULE_1__","__webpack_require__","d","FilterInput","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_grafana_data__WEBPACK_IMPORTED_MODULE_1__","ref","event","buildNavModel","pluginMeta","meta","img","subTitle","text","breadcrumbs","children","active","icon","configPages","page","includes","undefined","include","app_core_config__WEBPACK_IMPORTED_MODULE_2__","licenseInfo","hasLicense","getDataSourceLoadingNav","pageName","node","main","basicAuth","basicAuthUser","basicAuthPassword","withCredentials","database","jsonData","authType","defaultRegion","orgId","password","readOnly","user","child","indexOf","getDataSources","getDataSourcePlugins","getDataSourcesSearchQuery","getDataSourcesLayoutMode","getDataSourcesCount","state","regex","RegExp","test","dataSourceTypeSearchQuery","dataSourceId","dataSourcesCount","emptyListModel","buttonIcon","buttonLink","buttonTitle","proTip","proTipLink","proTipLinkTitle","proTipTarget","DataSourcesListPage","componentDidMount","fetchDataSources","setDataSourcesSearchQuery","setDataSourcesLayoutMode","hasFetched","app_core_components_Page_Page__WEBPACK_IMPORTED_MODULE_4__","Contents","isLoading","Fragment","app_core_components_EmptyListCTA_EmptyListCTA__WEBPACK_IMPORTED_MODULE_6__","app_core_components_OrgActionBar_OrgActionBar__WEBPACK_IMPORTED_MODULE_5__","query","_DataSourcesList__WEBPACK_IMPORTED_MODULE_7__","mapDispatchToProps","_state_actions__WEBPACK_IMPORTED_MODULE_8__","_state_reducers__WEBPACK_IMPORTED_MODULE_11__","react_hot_loader__WEBPACK_IMPORTED_MODULE_3__","react_redux__WEBPACK_IMPORTED_MODULE_2__","app_core_selectors_navModel__WEBPACK_IMPORTED_MODULE_9__","navIndex","_state_selectors__WEBPACK_IMPORTED_MODULE_10__"],"mappings":"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","file":"DataSourcesListPage.4d0490a94b199a11f40c.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport { DataSourceSettings } from '@grafana/data';\nimport { e2e } from '@grafana/e2e';\n\nexport interface Props {\n  dataSource: DataSourceSettings;\n}\n\nexport class DataSourcesListItem extends PureComponent<Props> {\n  render() {\n    const { dataSource } = this.props;\n    return (\n      <li className=\"card-item-wrapper\">\n        <a className=\"card-item\" href={`datasources/edit/${dataSource.id}`}>\n          <div className=\"card-item-header\">\n            <div className=\"card-item-type\">{dataSource.type}</div>\n          </div>\n          <div className=\"card-item-body\">\n            <figure className=\"card-item-figure\">\n              <img src={dataSource.typeLogoUrl} alt={dataSource.name} />\n            </figure>\n            <div className=\"card-item-details\">\n              <div className=\"card-item-name\" aria-label={e2e.pages.DataSources.selectors.dataSources(dataSource.name)}>\n                {dataSource.name}\n                {dataSource.isDefault && <span className=\"btn btn-secondary btn-small card-item-label\">default</span>}\n              </div>\n              <div className=\"card-item-sub-name\">{dataSource.url}</div>\n            </div>\n          </div>\n        </a>\n      </li>\n    );\n  }\n}\n\nexport default DataSourcesListItem;\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport classNames from 'classnames';\n\n// Components\nimport DataSourcesListItem from './DataSourcesListItem';\n\n// Types\nimport { DataSourceSettings } from '@grafana/data';\nimport { LayoutMode, LayoutModes } from '../../core/components/LayoutSelector/LayoutSelector';\n\nexport interface Props {\n  dataSources: DataSourceSettings[];\n  layoutMode: LayoutMode;\n}\n\nexport class DataSourcesList extends PureComponent<Props> {\n  render() {\n    const { dataSources, layoutMode } = this.props;\n\n    const listStyle = classNames({\n      'card-section': true,\n      'card-list-layout-grid': layoutMode === LayoutModes.Grid,\n      'card-list-layout-list': layoutMode === LayoutModes.List,\n    });\n\n    return (\n      <section className={listStyle}>\n        <ol className=\"card-list\">\n          {dataSources.map((dataSource, index) => {\n            return <DataSourcesListItem dataSource={dataSource} key={`${dataSource.id}-${index}`} />;\n          })}\n        </ol>\n      </section>\n    );\n  }\n}\n\nexport default DataSourcesList;\n","import { DataSourcePluginMeta, PluginType } from '@grafana/data';\nimport { DataSourcePluginCategory } from 'app/types';\n\nexport function buildCategories(plugins: DataSourcePluginMeta[]): DataSourcePluginCategory[] {\n  const categories: DataSourcePluginCategory[] = [\n    { id: 'tsdb', title: 'Time series databases', plugins: [] },\n    { id: 'logging', title: 'Logging & document databases', plugins: [] },\n    { id: 'sql', title: 'SQL', plugins: [] },\n    { id: 'cloud', title: 'Cloud', plugins: [] },\n    { id: 'enterprise', title: 'Enterprise plugins', plugins: [] },\n    { id: 'other', title: 'Others', plugins: [] },\n  ];\n\n  const categoryIndex: Record<string, DataSourcePluginCategory> = {};\n  const pluginIndex: Record<string, DataSourcePluginMeta> = {};\n  const enterprisePlugins = getEnterprisePhantomPlugins();\n\n  // build indices\n  for (const category of categories) {\n    categoryIndex[category.id] = category;\n  }\n\n  for (const plugin of plugins) {\n    // Force category for enterprise plugins\n    if (enterprisePlugins.find(item => item.id === plugin.id)) {\n      plugin.category = 'enterprise';\n    }\n\n    // Fix link name\n    if (plugin.info.links) {\n      for (const link of plugin.info.links) {\n        link.name = 'Learn more';\n      }\n    }\n\n    const category = categories.find(item => item.id === plugin.category) || categoryIndex['other'];\n    category.plugins.push(plugin);\n    // add to plugin index\n    pluginIndex[plugin.id] = plugin;\n  }\n\n  for (const category of categories) {\n    // add phantom plugin\n    if (category.id === 'cloud') {\n      category.plugins.push(getGrafanaCloudPhantomPlugin());\n    }\n\n    // add phantom plugins\n    if (category.id === 'enterprise') {\n      for (const plugin of enterprisePlugins) {\n        if (!pluginIndex[plugin.id]) {\n          category.plugins.push(plugin);\n        }\n      }\n    }\n\n    sortPlugins(category.plugins);\n  }\n\n  return categories;\n}\n\nfunction sortPlugins(plugins: DataSourcePluginMeta[]) {\n  const sortingRules: { [id: string]: number } = {\n    prometheus: 100,\n    graphite: 95,\n    loki: 90,\n    mysql: 80,\n    postgres: 79,\n    gcloud: -1,\n  };\n\n  plugins.sort((a, b) => {\n    const aSort = sortingRules[a.id] || 0;\n    const bSort = sortingRules[b.id] || 0;\n    if (aSort > bSort) {\n      return -1;\n    }\n    if (aSort < bSort) {\n      return 1;\n    }\n\n    return a.name > b.name ? -1 : 1;\n  });\n}\n\nfunction getEnterprisePhantomPlugins(): DataSourcePluginMeta[] {\n  return [\n    getPhantomPlugin({\n      id: 'grafana-splunk-datasource',\n      name: 'Splunk',\n      description: 'Visualize & explore Splunk logs',\n      imgUrl: 'public/img/plugins/splunk_logo_128.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-oracle-datasource',\n      name: 'Oracle',\n      description: 'Visualize & explore Oracle SQL',\n      imgUrl: 'public/img/plugins/oracle.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-dynatrace-datasource',\n      name: 'Dynatrace',\n      description: 'Visualize & explore Dynatrace data',\n      imgUrl: 'public/img/plugins/dynatrace.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-servicenow-datasource',\n      description: 'ServiceNow integration & data source',\n      name: 'ServiceNow',\n      imgUrl: 'public/img/plugins/servicenow.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-datadog-datasource',\n      description: 'DataDog integration & data source',\n      name: 'DataDog',\n      imgUrl: 'public/img/plugins/datadog.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-newrelic-datasource',\n      description: 'New Relic integration & data source',\n      name: 'New Relic',\n      imgUrl: 'public/img/plugins/newrelic.svg',\n    }),\n  ];\n}\n\nfunction getGrafanaCloudPhantomPlugin(): DataSourcePluginMeta {\n  return {\n    id: 'gcloud',\n    name: 'Grafana Cloud',\n    type: PluginType.datasource,\n    module: 'phantom',\n    baseUrl: '',\n    info: {\n      description: 'Hosted Graphite, Prometheus and Loki',\n      logos: { small: 'public/img/grafana_icon.svg', large: 'asd' },\n      author: { name: 'Grafana Labs' },\n      links: [\n        {\n          url: 'https://grafana.com/products/cloud/',\n          name: 'Learn more',\n        },\n      ],\n      screenshots: [],\n      updated: '2019-05-10',\n      version: '1.0.0',\n    },\n  };\n}\n\ninterface GetPhantomPluginOptions {\n  id: string;\n  name: string;\n  description: string;\n  imgUrl: string;\n}\n\nfunction getPhantomPlugin(options: GetPhantomPluginOptions): DataSourcePluginMeta {\n  return {\n    id: options.id,\n    name: options.name,\n    type: PluginType.datasource,\n    module: 'phantom',\n    baseUrl: '',\n    info: {\n      description: options.description,\n      logos: { small: options.imgUrl, large: options.imgUrl },\n      author: { name: 'Grafana Labs' },\n      links: [\n        {\n          url: 'https://grafana.com/grafana/plugins/' + options.id,\n          name: 'Install now',\n        },\n      ],\n      screenshots: [],\n      updated: '2019-05-10',\n      version: '1.0.0',\n    },\n  };\n}\n","import config from '../../../core/config';\nimport { getBackendSrv } from 'app/core/services/backend_srv';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { updateLocation, updateNavIndex } from 'app/core/actions';\nimport { buildNavModel } from './navModel';\nimport { DataSourcePluginMeta, DataSourceSettings } from '@grafana/data';\nimport { DataSourcePluginCategory, ThunkResult, ThunkDispatch } from 'app/types';\nimport { getPluginSettings } from 'app/features/plugins/PluginSettingsCache';\nimport { importDataSourcePlugin } from 'app/features/plugins/plugin_loader';\nimport {\n  dataSourceLoaded,\n  dataSourceMetaLoaded,\n  dataSourcePluginsLoad,\n  dataSourcePluginsLoaded,\n  dataSourcesLoaded,\n  initDataSourceSettingsFailed,\n  initDataSourceSettingsSucceeded,\n  testDataSourceStarting,\n  testDataSourceSucceeded,\n  testDataSourceFailed,\n} from './reducers';\nimport { buildCategories } from './buildCategories';\nimport { getDataSource, getDataSourceMeta } from './selectors';\nimport { getDataSourceSrv } from '@grafana/runtime';\n\nexport interface DataSourceTypesLoadedPayload {\n  plugins: DataSourcePluginMeta[];\n  categories: DataSourcePluginCategory[];\n}\n\nexport interface InitDataSourceSettingDependencies {\n  loadDataSource: typeof loadDataSource;\n  getDataSource: typeof getDataSource;\n  getDataSourceMeta: typeof getDataSourceMeta;\n  importDataSourcePlugin: typeof importDataSourcePlugin;\n}\n\nexport interface TestDataSourceDependencies {\n  getDatasourceSrv: typeof getDataSourceSrv;\n  getBackendSrv: typeof getBackendSrv;\n}\n\nexport const initDataSourceSettings = (\n  pageId: number,\n  dependencies: InitDataSourceSettingDependencies = {\n    loadDataSource,\n    getDataSource,\n    getDataSourceMeta,\n    importDataSourcePlugin,\n  }\n): ThunkResult<void> => {\n  return async (dispatch: ThunkDispatch, getState) => {\n    if (isNaN(pageId)) {\n      dispatch(initDataSourceSettingsFailed(new Error('Invalid ID')));\n      return;\n    }\n\n    try {\n      await dispatch(dependencies.loadDataSource(pageId));\n      if (getState().dataSourceSettings.plugin) {\n        return;\n      }\n\n      const dataSource = dependencies.getDataSource(getState().dataSources, pageId);\n      const dataSourceMeta = dependencies.getDataSourceMeta(getState().dataSources, dataSource.type);\n      const importedPlugin = await dependencies.importDataSourcePlugin(dataSourceMeta);\n\n      dispatch(initDataSourceSettingsSucceeded(importedPlugin));\n    } catch (err) {\n      console.log('Failed to import plugin module', err);\n      dispatch(initDataSourceSettingsFailed(err));\n    }\n  };\n};\n\nexport const testDataSource = (\n  dataSourceName: string,\n  dependencies: TestDataSourceDependencies = {\n    getDatasourceSrv,\n    getBackendSrv,\n  }\n): ThunkResult<void> => {\n  return async (dispatch: ThunkDispatch, getState) => {\n    const dsApi = await dependencies.getDatasourceSrv().get(dataSourceName);\n\n    if (!dsApi.testDatasource) {\n      return;\n    }\n\n    dispatch(testDataSourceStarting());\n\n    dependencies.getBackendSrv().withNoBackendCache(async () => {\n      try {\n        const result = await dsApi.testDatasource();\n\n        dispatch(testDataSourceSucceeded(result));\n      } catch (err) {\n        let message = '';\n\n        if (err.statusText) {\n          message = 'HTTP Error ' + err.statusText;\n        } else {\n          message = err.message;\n        }\n\n        dispatch(testDataSourceFailed({ message }));\n      }\n    });\n  };\n};\n\nexport function loadDataSources(): ThunkResult<void> {\n  return async dispatch => {\n    const response = await getBackendSrv().get('/api/datasources');\n    dispatch(dataSourcesLoaded(response));\n  };\n}\n\nexport function loadDataSource(id: number): ThunkResult<void> {\n  return async dispatch => {\n    const dataSource = await getBackendSrv().get(`/api/datasources/${id}`);\n    const pluginInfo = (await getPluginSettings(dataSource.type)) as DataSourcePluginMeta;\n    const plugin = await importDataSourcePlugin(pluginInfo);\n\n    dispatch(dataSourceLoaded(dataSource));\n    dispatch(dataSourceMetaLoaded(pluginInfo));\n    dispatch(updateNavIndex(buildNavModel(dataSource, plugin)));\n  };\n}\n\nexport function addDataSource(plugin: DataSourcePluginMeta): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    await dispatch(loadDataSources());\n\n    const dataSources = getStore().dataSources.dataSources;\n\n    const newInstance = {\n      name: plugin.name,\n      type: plugin.id,\n      access: 'proxy',\n      isDefault: dataSources.length === 0,\n    };\n\n    if (nameExits(dataSources, newInstance.name)) {\n      newInstance.name = findNewName(dataSources, newInstance.name);\n    }\n\n    const result = await getBackendSrv().post('/api/datasources', newInstance);\n    dispatch(updateLocation({ path: `/datasources/edit/${result.id}` }));\n  };\n}\n\nexport function loadDataSourcePlugins(): ThunkResult<void> {\n  return async dispatch => {\n    dispatch(dataSourcePluginsLoad());\n    const plugins = await getBackendSrv().get('/api/plugins', { enabled: 1, type: 'datasource' });\n    const categories = buildCategories(plugins);\n    dispatch(dataSourcePluginsLoaded({ plugins, categories }));\n  };\n}\n\nexport function updateDataSource(dataSource: DataSourceSettings): ThunkResult<void> {\n  return async dispatch => {\n    await getBackendSrv().put(`/api/datasources/${dataSource.id}`, dataSource);\n    await updateFrontendSettings();\n    return dispatch(loadDataSource(dataSource.id));\n  };\n}\n\nexport function deleteDataSource(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const dataSource = getStore().dataSources.dataSource;\n    await getBackendSrv().delete(`/api/datasources/${dataSource.id}`);\n    await updateFrontendSettings();\n    dispatch(updateLocation({ path: '/datasources' }));\n  };\n}\n\ninterface ItemWithName {\n  name: string;\n}\n\nexport function nameExits(dataSources: ItemWithName[], name: string) {\n  return (\n    dataSources.filter(dataSource => {\n      return dataSource.name.toLowerCase() === name.toLowerCase();\n    }).length > 0\n  );\n}\n\nexport function findNewName(dataSources: ItemWithName[], name: string) {\n  // Need to loop through current data sources to make sure\n  // the name doesn't exist\n  while (nameExits(dataSources, name)) {\n    // If there's a duplicate name that doesn't end with '-x'\n    // we can add -1 to the name and be done.\n    if (!nameHasSuffix(name)) {\n      name = `${name}-1`;\n    } else {\n      // if there's a duplicate name that ends with '-x'\n      // we can try to increment the last digit until the name is unique\n\n      // remove the 'x' part and replace it with the new number\n      name = `${getNewName(name)}${incrementLastDigit(getLastDigit(name))}`;\n    }\n  }\n\n  return name;\n}\n\nfunction updateFrontendSettings() {\n  return getBackendSrv()\n    .get('/api/frontend/settings')\n    .then((settings: any) => {\n      config.datasources = settings.datasources;\n      config.defaultDatasource = settings.defaultDatasource;\n      getDatasourceSrv().init();\n    });\n}\n\nfunction nameHasSuffix(name: string) {\n  return name.endsWith('-', name.length - 1);\n}\n\nfunction getLastDigit(name: string) {\n  return parseInt(name.slice(-1), 10);\n}\n\nfunction incrementLastDigit(digit: number) {\n  return isNaN(digit) ? 1 : digit + 1;\n}\n\nfunction getNewName(name: string) {\n  return name.slice(0, name.length - 1);\n}\n","import React, { PureComponent } from 'react';\nimport LayoutSelector, { LayoutMode } from '../LayoutSelector/LayoutSelector';\nimport { FilterInput } from '../FilterInput/FilterInput';\n\nexport interface Props {\n  searchQuery: string;\n  layoutMode?: LayoutMode;\n  onSetLayoutMode?: (mode: LayoutMode) => {};\n  setSearchQuery: (value: string) => {};\n  linkButton: { href: string; title: string };\n  target?: string;\n}\n\nexport default class OrgActionBar extends PureComponent<Props> {\n  render() {\n    const { searchQuery, layoutMode, onSetLayoutMode, linkButton, setSearchQuery, target } = this.props;\n    const linkProps = { href: linkButton.href };\n\n    if (target) {\n      (linkProps as any).target = target;\n    }\n\n    return (\n      <div className=\"page-action-bar\">\n        <div className=\"gf-form gf-form--grow\">\n          <FilterInput\n            labelClassName=\"gf-form--has-input-icon\"\n            inputClassName=\"gf-form-input width-20\"\n            value={searchQuery}\n            onChange={setSearchQuery}\n            placeholder={'Filter by name or type'}\n          />\n          <LayoutSelector mode={layoutMode} onLayoutModeChanged={(mode: LayoutMode) => onSetLayoutMode(mode)} />\n        </div>\n        <div className=\"page-action-bar__spacer\" />\n        <a className=\"btn btn-primary\" {...linkProps}>\n          {linkButton.title}\n        </a>\n      </div>\n    );\n  }\n}\n","import React, { forwardRef } from 'react';\nimport { escapeStringForRegex, unEscapeStringFromRegex } from '@grafana/data';\n\nexport interface Props {\n  value: string | undefined;\n  placeholder?: string;\n  labelClassName?: string;\n  inputClassName?: string;\n  onChange: (value: string) => void;\n}\n\nexport const FilterInput = forwardRef<HTMLInputElement, Props>((props, ref) => (\n  <label className={props.labelClassName}>\n    <input\n      ref={ref}\n      type=\"text\"\n      className={props.inputClassName}\n      value={unEscapeStringFromRegex(props.value)}\n      onChange={event => props.onChange(escapeStringForRegex(event.target.value))}\n      placeholder={props.placeholder ? props.placeholder : null}\n    />\n    <i className=\"gf-form-input-icon fa fa-search\" />\n  </label>\n));\n","import { DataSourceSettings, PluginType, PluginInclude, NavModel, NavModelItem } from '@grafana/data';\nimport config from 'app/core/config';\nimport { GenericDataSourcePlugin } from '../settings/PluginSettings';\n\nexport function buildNavModel(dataSource: DataSourceSettings, plugin: GenericDataSourcePlugin): NavModelItem {\n  const pluginMeta = plugin.meta;\n\n  const navModel = {\n    img: pluginMeta.info.logos.large,\n    id: 'datasource-' + dataSource.id,\n    subTitle: `Type: ${pluginMeta.name}`,\n    url: '',\n    text: dataSource.name,\n    breadcrumbs: [{ title: 'Data Sources', url: 'datasources' }],\n    children: [\n      {\n        active: false,\n        icon: 'fa fa-fw fa-sliders',\n        id: `datasource-settings-${dataSource.id}`,\n        text: 'Settings',\n        url: `datasources/edit/${dataSource.id}/`,\n      },\n    ],\n  };\n\n  if (plugin.configPages) {\n    for (const page of plugin.configPages) {\n      navModel.children.push({\n        active: false,\n        text: page.title,\n        icon: page.icon,\n        url: `datasources/edit/${dataSource.id}/?page=${page.id}`,\n        id: `datasource-page-${page.id}`,\n      });\n    }\n  }\n\n  if (pluginMeta.includes && hasDashboards(pluginMeta.includes)) {\n    navModel.children.push({\n      active: false,\n      icon: 'fa fa-fw fa-th-large',\n      id: `datasource-dashboards-${dataSource.id}`,\n      text: 'Dashboards',\n      url: `datasources/edit/${dataSource.id}/dashboards`,\n    });\n  }\n\n  if (config.licenseInfo.hasLicense) {\n    navModel.children.push({\n      active: false,\n      icon: 'fa fa-fw fa-lock',\n      id: `datasource-permissions-${dataSource.id}`,\n      text: 'Permissions',\n      url: `datasources/edit/${dataSource.id}/permissions`,\n    });\n  }\n\n  return navModel;\n}\n\nexport function getDataSourceLoadingNav(pageName: string): NavModel {\n  const main = buildNavModel(\n    {\n      access: '',\n      basicAuth: false,\n      basicAuthUser: '',\n      basicAuthPassword: '',\n      withCredentials: false,\n      database: '',\n      id: 1,\n      isDefault: false,\n      jsonData: { authType: 'credentials', defaultRegion: 'eu-west-2' },\n      name: 'Loading',\n      orgId: 1,\n      password: '',\n      readOnly: false,\n      type: 'Loading',\n      typeLogoUrl: 'public/img/icn-datasource.svg',\n      url: '',\n      user: '',\n    },\n    {\n      meta: {\n        id: '1',\n        type: PluginType.datasource,\n        name: '',\n        info: {\n          author: {\n            name: '',\n            url: '',\n          },\n          description: '',\n          links: [{ name: '', url: '' }],\n          logos: {\n            large: '',\n            small: '',\n          },\n          screenshots: [],\n          updated: '',\n          version: '',\n        },\n        includes: [],\n        module: '',\n        baseUrl: '',\n      },\n    } as GenericDataSourcePlugin\n  );\n\n  let node: NavModelItem;\n\n  // find active page\n  for (const child of main.children) {\n    if (child.id.indexOf(pageName) > 0) {\n      child.active = true;\n      node = child;\n      break;\n    }\n  }\n\n  return {\n    main: main,\n    node: node,\n  };\n}\n\nfunction hasDashboards(includes: PluginInclude[]): boolean {\n  return (\n    includes.find(include => {\n      return include.type === 'dashboard';\n    }) !== undefined\n  );\n}\n","import { DataSourceSettings, DataSourcePluginMeta } from '@grafana/data';\nimport { DataSourcesState } from '../../../types/datasources';\nimport { UrlQueryValue } from '@grafana/runtime';\n\nexport const getDataSources = (state: DataSourcesState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  return state.dataSources.filter((dataSource: DataSourceSettings) => {\n    return regex.test(dataSource.name) || regex.test(dataSource.database);\n  });\n};\n\nexport const getDataSourcePlugins = (state: DataSourcesState) => {\n  const regex = new RegExp(state.dataSourceTypeSearchQuery, 'i');\n\n  return state.plugins.filter((type: DataSourcePluginMeta) => {\n    return regex.test(type.name);\n  });\n};\n\nexport const getDataSource = (state: DataSourcesState, dataSourceId: UrlQueryValue): DataSourceSettings | null => {\n  if (state.dataSource.id === parseInt(dataSourceId as string, 10)) {\n    return state.dataSource;\n  }\n  return {} as DataSourceSettings;\n};\n\nexport const getDataSourceMeta = (state: DataSourcesState, type: string): DataSourcePluginMeta => {\n  if (state.dataSourceMeta.id === type) {\n    return state.dataSourceMeta;\n  }\n\n  return {} as DataSourcePluginMeta;\n};\n\nexport const getDataSourcesSearchQuery = (state: DataSourcesState) => state.searchQuery;\nexport const getDataSourcesLayoutMode = (state: DataSourcesState) => state.layoutMode;\nexport const getDataSourcesCount = (state: DataSourcesState) => state.dataSourcesCount;\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { hot } from 'react-hot-loader';\n// Components\nimport Page from 'app/core/components/Page/Page';\nimport OrgActionBar from 'app/core/components/OrgActionBar/OrgActionBar';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport DataSourcesList from './DataSourcesList';\n// Types\nimport { DataSourceSettings, NavModel } from '@grafana/data';\nimport { StoreState } from 'app/types';\nimport { LayoutMode } from 'app/core/components/LayoutSelector/LayoutSelector';\n// Actions\nimport { loadDataSources } from './state/actions';\nimport { getNavModel } from 'app/core/selectors/navModel';\n\nimport {\n  getDataSources,\n  getDataSourcesCount,\n  getDataSourcesLayoutMode,\n  getDataSourcesSearchQuery,\n} from './state/selectors';\nimport { setDataSourcesLayoutMode, setDataSourcesSearchQuery } from './state/reducers';\n\nexport interface Props {\n  navModel: NavModel;\n  dataSources: DataSourceSettings[];\n  dataSourcesCount: number;\n  layoutMode: LayoutMode;\n  searchQuery: string;\n  hasFetched: boolean;\n  loadDataSources: typeof loadDataSources;\n  setDataSourcesLayoutMode: typeof setDataSourcesLayoutMode;\n  setDataSourcesSearchQuery: typeof setDataSourcesSearchQuery;\n}\n\nconst emptyListModel = {\n  title: 'There are no data sources defined yet',\n  buttonIcon: 'gicon gicon-datasources',\n  buttonLink: 'datasources/new',\n  buttonTitle: 'Add data source',\n  proTip: 'You can also define data sources through configuration files.',\n  proTipLink: 'http://docs.grafana.org/administration/provisioning/#datasources?utm_source=grafana_ds_list',\n  proTipLinkTitle: 'Learn more',\n  proTipTarget: '_blank',\n};\n\nexport class DataSourcesListPage extends PureComponent<Props> {\n  componentDidMount() {\n    this.fetchDataSources();\n  }\n\n  async fetchDataSources() {\n    return await this.props.loadDataSources();\n  }\n\n  render() {\n    const {\n      dataSources,\n      dataSourcesCount,\n      navModel,\n      layoutMode,\n      searchQuery,\n      setDataSourcesSearchQuery,\n      setDataSourcesLayoutMode,\n      hasFetched,\n    } = this.props;\n\n    const linkButton = {\n      href: 'datasources/new',\n      title: 'Add data source',\n    };\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={!hasFetched}>\n          <>\n            {hasFetched && dataSourcesCount === 0 && <EmptyListCTA {...emptyListModel} />}\n            {hasFetched &&\n              dataSourcesCount > 0 && [\n                <OrgActionBar\n                  layoutMode={layoutMode}\n                  searchQuery={searchQuery}\n                  onSetLayoutMode={mode => setDataSourcesLayoutMode(mode)}\n                  setSearchQuery={query => setDataSourcesSearchQuery(query)}\n                  linkButton={linkButton}\n                  key=\"action-bar\"\n                />,\n                <DataSourcesList dataSources={dataSources} layoutMode={layoutMode} key=\"list\" />,\n              ]}\n          </>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, 'datasources'),\n    dataSources: getDataSources(state.dataSources),\n    layoutMode: getDataSourcesLayoutMode(state.dataSources),\n    dataSourcesCount: getDataSourcesCount(state.dataSources),\n    searchQuery: getDataSourcesSearchQuery(state.dataSources),\n    hasFetched: state.dataSources.hasFetched,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadDataSources,\n  setDataSourcesSearchQuery,\n  setDataSourcesLayoutMode,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(DataSourcesListPage));\n"],"sourceRoot":""}