{"version":3,"sources":["webpack:///./public/app/features/datasources/state/buildCategories.ts","webpack:///./public/app/features/datasources/state/actions.ts","webpack:///./public/app/features/datasources/state/navModel.ts","webpack:///./public/app/features/datasources/state/selectors.ts"],"names":["buildCategories","plugins","categories","id","title","filter","item","categoryIndex","pluginIndex","enterprisePlugins","getPhantomPlugin","name","description","imgUrl","category","config","licenseInfo","edition","hasValidLicense","plugin","enterprisePlugin","find","enterprise","unlicensed","info","links","push","type","PluginType","datasource","module","baseUrl","logos","small","large","author","url","screenshots","updated","version","sortPlugins","c","length","sortingRules","prometheus","graphite","loki","mysql","jaeger","postgres","gcloud","sort","a","b","aSort","bSort","options","marketplaceUrl","initDataSourceSettings","pageId","dependencies","loadDataSource","getDataSource","getDataSourceMeta","importDataSourcePlugin","dispatch","getState","isNaN","initDataSourceSettingsFailed","Error","dataSourceSettings","dataSource","dataSources","dataSourceMeta","importedPlugin","initDataSourceSettingsSucceeded","console","error","testDataSource","dataSourceName","getDatasourceSrv","getBackendSrv","get","dsApi","testDatasource","testDataSourceStarting","withNoBackendCache","result","testDataSourceSucceeded","message","statusText","testDataSourceFailed","loadDataSources","response","dataSourcesLoaded","getPluginSettings","pluginInfo","dataSourceLoaded","dataSourceMetaLoaded","updateNavIndex","buildNavModel","addDataSource","getStore","newInstance","access","isDefault","nameExits","findNewName","post","updateLocation","path","loadDataSourcePlugins","dataSourcePluginsLoad","enabled","dataSourcePluginsLoaded","updateDataSource","put","updateFrontendSettings","deleteDataSource","delete","toLowerCase","nameHasSuffix","getNewName","digit","getLastDigit","then","settings","datasources","defaultDatasource","init","endsWith","parseInt","slice","pluginMeta","meta","navModel","img","subTitle","text","breadcrumbs","children","active","icon","configPages","page","includes","undefined","include","hasLicense","getDataSourceLoadingNav","pageName","node","main","basicAuth","basicAuthUser","basicAuthPassword","withCredentials","database","jsonData","authType","defaultRegion","orgId","password","readOnly","typeLogoUrl","user","secureJsonFields","child","indexOf","getDataSources","state","regex","RegExp","searchQuery","test","getDataSourcePlugins","dataSourceTypeSearchQuery","dataSourceId","getDataSourcesSearchQuery","getDataSourcesLayoutMode","layoutMode","getDataSourcesCount","dataSourcesCount"],"mappings":"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","file":"default~DataSourceDashboards~DataSourceSettingsPage~DataSourcesListPage~NewDataSourcePage.591ee81e63053ad31983.js","sourcesContent":["import { DataSourcePluginMeta, PluginType } from '@grafana/data';\nimport { DataSourcePluginCategory } from 'app/types';\nimport { config } from '../../../core/config';\n\nexport function buildCategories(plugins: DataSourcePluginMeta[]): DataSourcePluginCategory[] {\n  const categories: DataSourcePluginCategory[] = [\n    { id: 'tsdb', title: 'Time series databases', plugins: [] },\n    { id: 'logging', title: 'Logging & document databases', plugins: [] },\n    { id: 'tracing', title: 'Distributed tracing', plugins: [] },\n    { id: 'sql', title: 'SQL', plugins: [] },\n    { id: 'cloud', title: 'Cloud', plugins: [] },\n    { id: 'enterprise', title: 'Enterprise plugins', plugins: [] },\n    { id: 'iot', title: 'Industrial & IoT', plugins: [] },\n    { id: 'other', title: 'Others', plugins: [] },\n  ].filter(item => item);\n\n  const categoryIndex: Record<string, DataSourcePluginCategory> = {};\n  const pluginIndex: Record<string, DataSourcePluginMeta> = {};\n  const enterprisePlugins = getEnterprisePhantomPlugins();\n\n  // build indices\n  for (const category of categories) {\n    categoryIndex[category.id] = category;\n  }\n\n  const { edition, hasValidLicense } = config.licenseInfo;\n\n  for (const plugin of plugins) {\n    const enterprisePlugin = enterprisePlugins.find(item => item.id === plugin.id);\n    // Force category for enterprise plugins\n    if (plugin.enterprise || enterprisePlugin) {\n      plugin.category = 'enterprise';\n      plugin.unlicensed = edition !== 'Open Source' && !hasValidLicense;\n      plugin.info.links = enterprisePlugin?.info?.links || plugin.info.links;\n    }\n\n    // Fix link name\n    if (plugin.info.links) {\n      for (const link of plugin.info.links) {\n        link.name = 'Learn more';\n      }\n    }\n\n    const category = categories.find(item => item.id === plugin.category) || categoryIndex['other'];\n    category.plugins.push(plugin);\n    // add to plugin index\n    pluginIndex[plugin.id] = plugin;\n  }\n\n  for (const category of categories) {\n    // add phantom plugin\n    if (category.id === 'cloud') {\n      category.plugins.push(getGrafanaCloudPhantomPlugin());\n    }\n\n    // add phantom plugins\n    if (category.id === 'enterprise') {\n      for (const plugin of enterprisePlugins) {\n        if (!pluginIndex[plugin.id]) {\n          category.plugins.push(plugin);\n        }\n      }\n    }\n\n    sortPlugins(category.plugins);\n  }\n\n  // Only show categories with plugins\n  return categories.filter(c => c.plugins.length > 0);\n}\n\nfunction sortPlugins(plugins: DataSourcePluginMeta[]) {\n  const sortingRules: { [id: string]: number } = {\n    prometheus: 100,\n    graphite: 95,\n    loki: 90,\n    mysql: 80,\n    jaeger: 100,\n    postgres: 79,\n    gcloud: -1,\n  };\n\n  plugins.sort((a, b) => {\n    const aSort = sortingRules[a.id] || 0;\n    const bSort = sortingRules[b.id] || 0;\n    if (aSort > bSort) {\n      return -1;\n    }\n    if (aSort < bSort) {\n      return 1;\n    }\n\n    return a.name > b.name ? -1 : 1;\n  });\n}\n\nfunction getEnterprisePhantomPlugins(): DataSourcePluginMeta[] {\n  return [\n    getPhantomPlugin({\n      id: 'grafana-splunk-datasource',\n      name: 'Splunk',\n      description: 'Visualize & explore Splunk logs',\n      imgUrl: 'public/img/plugins/splunk_logo_128.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-oracle-datasource',\n      name: 'Oracle',\n      description: 'Visualize & explore Oracle SQL',\n      imgUrl: 'public/img/plugins/oracle.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-dynatrace-datasource',\n      name: 'Dynatrace',\n      description: 'Visualize & explore Dynatrace data',\n      imgUrl: 'public/img/plugins/dynatrace.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-servicenow-datasource',\n      description: 'ServiceNow integration & data source',\n      name: 'ServiceNow',\n      imgUrl: 'public/img/plugins/servicenow.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-datadog-datasource',\n      description: 'DataDog integration & data source',\n      name: 'DataDog',\n      imgUrl: 'public/img/plugins/datadog.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-newrelic-datasource',\n      description: 'New Relic integration & data source',\n      name: 'New Relic',\n      imgUrl: 'public/img/plugins/newrelic.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-mongodb-datasource',\n      description: 'MongoDB integration & data source',\n      name: 'MongoDB',\n      imgUrl: 'public/img/plugins/mongodb.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-snowflake-datasource',\n      description: 'Snowflake integration & data source',\n      name: 'Snowflake',\n      imgUrl: 'public/img/plugins/snowflake.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-wavefront-datasource',\n      description: 'Wavefront integration & data source',\n      name: 'Wavefront',\n      imgUrl: 'public/img/plugins/wavefront.svg',\n    }),\n    getPhantomPlugin({\n      id: 'dlopes7-appdynamics-datasource',\n      description: 'AppDynamics integration & data source',\n      name: 'AppDynamics',\n      imgUrl: 'public/img/plugins/appdynamics.svg',\n    }),\n  ];\n}\n\nfunction getGrafanaCloudPhantomPlugin(): DataSourcePluginMeta {\n  return {\n    id: 'gcloud',\n    name: 'Grafana Cloud',\n    type: PluginType.datasource,\n    module: 'phantom',\n    baseUrl: '',\n    info: {\n      description: 'Hosted Graphite, Prometheus and Loki',\n      logos: { small: 'public/img/grafana_icon.svg', large: 'asd' },\n      author: { name: 'Grafana Labs' },\n      links: [\n        {\n          url: 'https://grafana.com/products/cloud/',\n          name: 'Learn more',\n        },\n      ],\n      screenshots: [],\n      updated: '2019-05-10',\n      version: '1.0.0',\n    },\n  };\n}\n\ninterface GetPhantomPluginOptions {\n  id: string;\n  name: string;\n  description: string;\n  imgUrl: string;\n}\n\nfunction getPhantomPlugin(options: GetPhantomPluginOptions): DataSourcePluginMeta {\n  return {\n    id: options.id,\n    name: options.name,\n    type: PluginType.datasource,\n    module: 'phantom',\n    baseUrl: '',\n    info: {\n      description: options.description,\n      logos: { small: options.imgUrl, large: options.imgUrl },\n      author: { name: 'Grafana Labs' },\n      links: [\n        {\n          url: config.marketplaceUrl + options.id,\n          name: 'Install now',\n        },\n      ],\n      screenshots: [],\n      updated: '2019-05-10',\n      version: '1.0.0',\n    },\n  };\n}\n","import config from '../../../core/config';\nimport { getBackendSrv } from 'app/core/services/backend_srv';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { updateLocation, updateNavIndex } from 'app/core/actions';\nimport { buildNavModel } from './navModel';\nimport { DataSourcePluginMeta, DataSourceSettings } from '@grafana/data';\nimport { DataSourcePluginCategory, ThunkResult, ThunkDispatch } from 'app/types';\nimport { getPluginSettings } from 'app/features/plugins/PluginSettingsCache';\nimport { importDataSourcePlugin } from 'app/features/plugins/plugin_loader';\nimport {\n  dataSourceLoaded,\n  dataSourceMetaLoaded,\n  dataSourcePluginsLoad,\n  dataSourcePluginsLoaded,\n  dataSourcesLoaded,\n  initDataSourceSettingsFailed,\n  initDataSourceSettingsSucceeded,\n  testDataSourceStarting,\n  testDataSourceSucceeded,\n  testDataSourceFailed,\n} from './reducers';\nimport { buildCategories } from './buildCategories';\nimport { getDataSource, getDataSourceMeta } from './selectors';\nimport { getDataSourceSrv } from '@grafana/runtime';\n\nexport interface DataSourceTypesLoadedPayload {\n  plugins: DataSourcePluginMeta[];\n  categories: DataSourcePluginCategory[];\n}\n\nexport interface InitDataSourceSettingDependencies {\n  loadDataSource: typeof loadDataSource;\n  getDataSource: typeof getDataSource;\n  getDataSourceMeta: typeof getDataSourceMeta;\n  importDataSourcePlugin: typeof importDataSourcePlugin;\n}\n\nexport interface TestDataSourceDependencies {\n  getDatasourceSrv: typeof getDataSourceSrv;\n  getBackendSrv: typeof getBackendSrv;\n}\n\nexport const initDataSourceSettings = (\n  pageId: number,\n  dependencies: InitDataSourceSettingDependencies = {\n    loadDataSource,\n    getDataSource,\n    getDataSourceMeta,\n    importDataSourcePlugin,\n  }\n): ThunkResult<void> => {\n  return async (dispatch: ThunkDispatch, getState) => {\n    if (isNaN(pageId)) {\n      dispatch(initDataSourceSettingsFailed(new Error('Invalid ID')));\n      return;\n    }\n\n    try {\n      await dispatch(dependencies.loadDataSource(pageId));\n      if (getState().dataSourceSettings.plugin) {\n        return;\n      }\n\n      const dataSource = dependencies.getDataSource(getState().dataSources, pageId);\n      const dataSourceMeta = dependencies.getDataSourceMeta(getState().dataSources, dataSource!.type);\n      const importedPlugin = await dependencies.importDataSourcePlugin(dataSourceMeta);\n\n      dispatch(initDataSourceSettingsSucceeded(importedPlugin));\n    } catch (err) {\n      console.error('Failed to import plugin module', err);\n      dispatch(initDataSourceSettingsFailed(err));\n    }\n  };\n};\n\nexport const testDataSource = (\n  dataSourceName: string,\n  dependencies: TestDataSourceDependencies = {\n    getDatasourceSrv,\n    getBackendSrv,\n  }\n): ThunkResult<void> => {\n  return async (dispatch: ThunkDispatch, getState) => {\n    const dsApi = await dependencies.getDatasourceSrv().get(dataSourceName);\n\n    if (!dsApi.testDatasource) {\n      return;\n    }\n\n    dispatch(testDataSourceStarting());\n\n    dependencies.getBackendSrv().withNoBackendCache(async () => {\n      try {\n        const result = await dsApi.testDatasource();\n\n        dispatch(testDataSourceSucceeded(result));\n      } catch (err) {\n        let message = '';\n\n        if (err.statusText) {\n          message = 'HTTP Error ' + err.statusText;\n        } else {\n          message = err.message;\n        }\n\n        dispatch(testDataSourceFailed({ message }));\n      }\n    });\n  };\n};\n\nexport function loadDataSources(): ThunkResult<void> {\n  return async dispatch => {\n    const response = await getBackendSrv().get('/api/datasources');\n    dispatch(dataSourcesLoaded(response));\n  };\n}\n\nexport function loadDataSource(id: number): ThunkResult<void> {\n  return async dispatch => {\n    const dataSource = (await getBackendSrv().get(`/api/datasources/${id}`)) as DataSourceSettings;\n    const pluginInfo = (await getPluginSettings(dataSource.type)) as DataSourcePluginMeta;\n    const plugin = await importDataSourcePlugin(pluginInfo);\n\n    dispatch(dataSourceLoaded(dataSource));\n    dispatch(dataSourceMetaLoaded(pluginInfo));\n    dispatch(updateNavIndex(buildNavModel(dataSource, plugin)));\n  };\n}\n\nexport function addDataSource(plugin: DataSourcePluginMeta): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    await dispatch(loadDataSources());\n\n    const dataSources = getStore().dataSources.dataSources;\n\n    const newInstance = {\n      name: plugin.name,\n      type: plugin.id,\n      access: 'proxy',\n      isDefault: dataSources.length === 0,\n    };\n\n    if (nameExits(dataSources, newInstance.name)) {\n      newInstance.name = findNewName(dataSources, newInstance.name);\n    }\n\n    const result = await getBackendSrv().post('/api/datasources', newInstance);\n    dispatch(updateLocation({ path: `/datasources/edit/${result.id}` }));\n  };\n}\n\nexport function loadDataSourcePlugins(): ThunkResult<void> {\n  return async dispatch => {\n    dispatch(dataSourcePluginsLoad());\n    const plugins = await getBackendSrv().get('/api/plugins', { enabled: 1, type: 'datasource' });\n    const categories = buildCategories(plugins);\n    dispatch(dataSourcePluginsLoaded({ plugins, categories }));\n  };\n}\n\nexport function updateDataSource(dataSource: DataSourceSettings): ThunkResult<void> {\n  return async dispatch => {\n    await getBackendSrv().put(`/api/datasources/${dataSource.id}`, dataSource);\n    await updateFrontendSettings();\n    return dispatch(loadDataSource(dataSource.id));\n  };\n}\n\nexport function deleteDataSource(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const dataSource = getStore().dataSources.dataSource;\n    await getBackendSrv().delete(`/api/datasources/${dataSource.id}`);\n    await updateFrontendSettings();\n    dispatch(updateLocation({ path: '/datasources' }));\n  };\n}\n\ninterface ItemWithName {\n  name: string;\n}\n\nexport function nameExits(dataSources: ItemWithName[], name: string) {\n  return (\n    dataSources.filter(dataSource => {\n      return dataSource.name.toLowerCase() === name.toLowerCase();\n    }).length > 0\n  );\n}\n\nexport function findNewName(dataSources: ItemWithName[], name: string) {\n  // Need to loop through current data sources to make sure\n  // the name doesn't exist\n  while (nameExits(dataSources, name)) {\n    // If there's a duplicate name that doesn't end with '-x'\n    // we can add -1 to the name and be done.\n    if (!nameHasSuffix(name)) {\n      name = `${name}-1`;\n    } else {\n      // if there's a duplicate name that ends with '-x'\n      // we can try to increment the last digit until the name is unique\n\n      // remove the 'x' part and replace it with the new number\n      name = `${getNewName(name)}${incrementLastDigit(getLastDigit(name))}`;\n    }\n  }\n\n  return name;\n}\n\nfunction updateFrontendSettings() {\n  return getBackendSrv()\n    .get('/api/frontend/settings')\n    .then((settings: any) => {\n      config.datasources = settings.datasources;\n      config.defaultDatasource = settings.defaultDatasource;\n      getDatasourceSrv().init();\n    });\n}\n\nfunction nameHasSuffix(name: string) {\n  return name.endsWith('-', name.length - 1);\n}\n\nfunction getLastDigit(name: string) {\n  return parseInt(name.slice(-1), 10);\n}\n\nfunction incrementLastDigit(digit: number) {\n  return isNaN(digit) ? 1 : digit + 1;\n}\n\nfunction getNewName(name: string) {\n  return name.slice(0, name.length - 1);\n}\n","import { DataSourceSettings, PluginType, PluginInclude, NavModel, NavModelItem } from '@grafana/data';\nimport config from 'app/core/config';\nimport { GenericDataSourcePlugin } from '../settings/PluginSettings';\n\nexport function buildNavModel(dataSource: DataSourceSettings, plugin: GenericDataSourcePlugin): NavModelItem {\n  const pluginMeta = plugin.meta;\n\n  const navModel: NavModelItem = {\n    img: pluginMeta.info.logos.large,\n    id: 'datasource-' + dataSource.id,\n    subTitle: `Type: ${pluginMeta.name}`,\n    url: '',\n    text: dataSource.name,\n    breadcrumbs: [{ title: 'Data Sources', url: 'datasources' }],\n    children: [\n      {\n        active: false,\n        icon: 'sliders-v-alt',\n        id: `datasource-settings-${dataSource.id}`,\n        text: 'Settings',\n        url: `datasources/edit/${dataSource.id}/`,\n      },\n    ],\n  };\n\n  if (plugin.configPages) {\n    for (const page of plugin.configPages) {\n      navModel.children!.push({\n        active: false,\n        text: page.title,\n        icon: page.icon,\n        url: `datasources/edit/${dataSource.id}/?page=${page.id}`,\n        id: `datasource-page-${page.id}`,\n      });\n    }\n  }\n\n  if (pluginMeta.includes && hasDashboards(pluginMeta.includes)) {\n    navModel.children!.push({\n      active: false,\n      icon: 'apps',\n      id: `datasource-dashboards-${dataSource.id}`,\n      text: 'Dashboards',\n      url: `datasources/edit/${dataSource.id}/dashboards`,\n    });\n  }\n\n  if (config.licenseInfo.hasLicense) {\n    navModel.children!.push({\n      active: false,\n      icon: 'lock',\n      id: `datasource-permissions-${dataSource.id}`,\n      text: 'Permissions',\n      url: `datasources/edit/${dataSource.id}/permissions`,\n    });\n\n    navModel.children!.push({\n      active: false,\n      icon: 'info-circle',\n      id: `datasource-insights-${dataSource.id}`,\n      text: 'Insights',\n      url: `datasources/edit/${dataSource.id}/insights`,\n    });\n  }\n\n  return navModel;\n}\n\nexport function getDataSourceLoadingNav(pageName: string): NavModel {\n  const main = buildNavModel(\n    {\n      access: '',\n      basicAuth: false,\n      basicAuthUser: '',\n      basicAuthPassword: '',\n      withCredentials: false,\n      database: '',\n      id: 1,\n      isDefault: false,\n      jsonData: { authType: 'credentials', defaultRegion: 'eu-west-2' },\n      name: 'Loading',\n      orgId: 1,\n      password: '',\n      readOnly: false,\n      type: 'Loading',\n      typeLogoUrl: 'public/img/icn-datasource.svg',\n      url: '',\n      user: '',\n      secureJsonFields: {},\n    },\n    {\n      meta: {\n        id: '1',\n        type: PluginType.datasource,\n        name: '',\n        info: {\n          author: {\n            name: '',\n            url: '',\n          },\n          description: '',\n          links: [{ name: '', url: '' }],\n          logos: {\n            large: '',\n            small: '',\n          },\n          screenshots: [],\n          updated: '',\n          version: '',\n        },\n        includes: [],\n        module: '',\n        baseUrl: '',\n      },\n    } as any\n  );\n\n  let node: NavModelItem;\n\n  // find active page\n  for (const child of main.children!) {\n    if (child.id!.indexOf(pageName) > 0) {\n      child.active = true;\n      node = child;\n      break;\n    }\n  }\n\n  return {\n    main: main,\n    node: node!,\n  };\n}\n\nfunction hasDashboards(includes: PluginInclude[]): boolean {\n  return (\n    includes.find(include => {\n      return include.type === 'dashboard';\n    }) !== undefined\n  );\n}\n","import { DataSourcePluginMeta, DataSourceSettings, UrlQueryValue } from '@grafana/data';\nimport { DataSourcesState } from '../../../types/datasources';\n\nexport const getDataSources = (state: DataSourcesState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  return state.dataSources.filter((dataSource: DataSourceSettings) => {\n    return regex.test(dataSource.name) || regex.test(dataSource.database) || regex.test(dataSource.type);\n  });\n};\n\nexport const getDataSourcePlugins = (state: DataSourcesState) => {\n  const regex = new RegExp(state.dataSourceTypeSearchQuery, 'i');\n\n  return state.plugins.filter((type: DataSourcePluginMeta) => {\n    return regex.test(type.name);\n  });\n};\n\nexport const getDataSource = (state: DataSourcesState, dataSourceId: UrlQueryValue): DataSourceSettings => {\n  if (state.dataSource.id === parseInt(dataSourceId as string, 10)) {\n    return state.dataSource;\n  }\n  return {} as DataSourceSettings;\n};\n\nexport const getDataSourceMeta = (state: DataSourcesState, type: string): DataSourcePluginMeta => {\n  if (state.dataSourceMeta.id === type) {\n    return state.dataSourceMeta;\n  }\n\n  return {} as DataSourcePluginMeta;\n};\n\nexport const getDataSourcesSearchQuery = (state: DataSourcesState) => state.searchQuery;\nexport const getDataSourcesLayoutMode = (state: DataSourcesState) => state.layoutMode;\nexport const getDataSourcesCount = (state: DataSourcesState) => state.dataSourcesCount;\n"],"sourceRoot":""}