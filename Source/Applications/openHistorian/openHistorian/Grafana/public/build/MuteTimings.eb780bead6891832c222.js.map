{"version":3,"file":"MuteTimings.eb780bead6891832c222.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/utils/mute-timings.ts","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/MuteTimingTimeRange.tsx","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/MuteTimingTimeInterval.tsx","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/MuteTimingForm.tsx","webpack://grafana/./public/app/features/alerting/unified/MuteTimings.tsx","webpack://grafana/./public/app/features/alerting/unified/components/AlertingPageWrapper.tsx","webpack://grafana/./public/app/features/alerting/unified/components/Provisioning.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertManagerSourceName.ts","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertManagerSources.ts"],"sourcesContent":["import { omitBy, isUndefined } from 'lodash';\n\nimport { MuteTimeInterval, TimeInterval } from 'app/plugins/datasource/alertmanager/types';\n\nimport { MuteTimingFields, MuteTimingIntervalFields } from '../types/mute-timing-form';\n\nexport const DAYS_OF_THE_WEEK = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];\n\nexport const MONTHS = [\n  'january',\n  'february',\n  'march',\n  'april',\n  'may',\n  'june',\n  'july',\n  'august',\n  'september',\n  'october',\n  'november',\n  'december',\n];\n\nexport const defaultTimeInterval: MuteTimingIntervalFields = {\n  times: [{ start_time: '', end_time: '' }],\n  weekdays: '',\n  days_of_month: '',\n  months: '',\n  years: '',\n};\n\nexport const validateArrayField = (value: string, validateValue: (input: string) => boolean, invalidText: string) => {\n  if (value) {\n    return (\n      value\n        .split(',')\n        .map((x) => x.trim())\n        .every((entry) => entry.split(':').every(validateValue)) || invalidText\n    );\n  } else {\n    return true;\n  }\n};\n\nconst convertStringToArray = (str: string) => {\n  return str ? str.split(',').map((s) => s.trim()) : undefined;\n};\n\nexport const createMuteTiming = (fields: MuteTimingFields): MuteTimeInterval => {\n  const timeIntervals: TimeInterval[] = fields.time_intervals.map(\n    ({ times, weekdays, days_of_month, months, years }) => {\n      const interval = {\n        times: times.filter(({ start_time, end_time }) => !!start_time && !!end_time),\n        weekdays: convertStringToArray(weekdays)?.map((v) => v.toLowerCase()),\n        days_of_month: convertStringToArray(days_of_month),\n        months: convertStringToArray(months),\n        years: convertStringToArray(years),\n      };\n\n      return omitBy(interval, isUndefined);\n    }\n  );\n\n  return {\n    name: fields.name,\n    time_intervals: timeIntervals,\n  };\n};\n","import { css } from '@emotion/css';\nimport React, { FC } from 'react';\nimport { useFieldArray, useFormContext } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Field, InlineFieldRow, InlineField, Input, Button, IconButton, useStyles2 } from '@grafana/ui';\n\nimport { MuteTimingFields } from '../../types/mute-timing-form';\n\ninterface Props {\n  intervalIndex: number;\n}\n\nexport const MuteTimingTimeRange: FC<Props> = ({ intervalIndex }) => {\n  const styles = useStyles2(getStyles);\n  const { register, formState } = useFormContext<MuteTimingFields>();\n\n  const {\n    fields: timeRanges,\n    append: addTimeRange,\n    remove: removeTimeRange,\n  } = useFieldArray<MuteTimingFields>({\n    name: `time_intervals.${intervalIndex}.times`,\n  });\n\n  const validateTime = (timeString: string) => {\n    if (!timeString) {\n      return true;\n    }\n    const [hour, minutes] = timeString.split(':').map((x) => parseInt(x, 10));\n    const isHourValid = hour >= 0 && hour < 25;\n    const isMinuteValid = minutes > -1 && minutes < 60;\n    const isTimeValid = hour === 24 ? minutes === 0 : isHourValid && isMinuteValid;\n\n    return isTimeValid || 'Time is invalid';\n  };\n\n  const formErrors = formState.errors.time_intervals?.[intervalIndex];\n  const timeRangeInvalid = formErrors?.times?.some((value) => value?.start_time || value?.end_time) ?? false;\n\n  return (\n    <div>\n      <Field\n        className={styles.field}\n        label=\"Time range\"\n        description=\"The time inclusive of the starting time and exclusive of the end time in UTC\"\n        invalid={timeRangeInvalid}\n        error={timeRangeInvalid ? 'Times must be between 00:00 and 24:00 UTC' : ''}\n      >\n        <>\n          {timeRanges.map((timeRange, index) => {\n            return (\n              <div className={styles.timeRange} key={timeRange.id}>\n                <InlineFieldRow>\n                  <InlineField label=\"Start time\" invalid={!!formErrors?.times?.[index]?.start_time}>\n                    <Input\n                      {...register(`time_intervals.${intervalIndex}.times.${index}.start_time`, {\n                        validate: validateTime,\n                      })}\n                      className={styles.timeRangeInput}\n                      // @ts-ignore react-hook-form doesn't handle nested field arrays well\n                      defaultValue={timeRange.start_time}\n                      placeholder=\"HH:MM\"\n                      data-testid=\"mute-timing-starts-at\"\n                    />\n                  </InlineField>\n                  <InlineField label=\"End time\" invalid={!!formErrors?.times?.[index]?.end_time}>\n                    <Input\n                      {...register(`time_intervals.${intervalIndex}.times.${index}.end_time`, {\n                        validate: validateTime,\n                      })}\n                      className={styles.timeRangeInput}\n                      // @ts-ignore react-hook-form doesn't handle nested field arrays well\n                      defaultValue={timeRange.end_time}\n                      placeholder=\"HH:MM\"\n                      data-testid=\"mute-timing-ends-at\"\n                    />\n                  </InlineField>\n                  <IconButton\n                    className={styles.deleteTimeRange}\n                    title={'Remove'}\n                    name={'trash-alt'}\n                    type=\"button\"\n                    onClick={(e) => {\n                      e.preventDefault();\n                      removeTimeRange(index);\n                    }}\n                  />\n                </InlineFieldRow>\n              </div>\n            );\n          })}\n        </>\n      </Field>\n      <Button\n        className={styles.addTimeRange}\n        variant=\"secondary\"\n        type=\"button\"\n        icon={'plus'}\n        onClick={() => addTimeRange({ start_time: '', end_time: '' })}\n      >\n        Add another time range\n      </Button>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  field: css`\n    margin-bottom: 0;\n  `,\n  timeRange: css`\n    margin-bottom: ${theme.spacing(1)};\n  `,\n  timeRangeInput: css`\n    width: 120px;\n  `,\n  deleteTimeRange: css`\n    margin: ${theme.spacing(1)} 0 0 ${theme.spacing(0.5)};\n  `,\n  addTimeRange: css`\n    margin-bottom: ${theme.spacing(2)};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\nimport { useFormContext, useFieldArray } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Input, Field, FieldSet, useStyles2 } from '@grafana/ui';\n\nimport { MuteTimingFields } from '../../types/mute-timing-form';\nimport { DAYS_OF_THE_WEEK, MONTHS, validateArrayField, defaultTimeInterval } from '../../utils/mute-timings';\n\nimport { MuteTimingTimeRange } from './MuteTimingTimeRange';\n\nexport const MuteTimingTimeInterval = () => {\n  const styles = useStyles2(getStyles);\n  const { formState, register } = useFormContext();\n  const {\n    fields: timeIntervals,\n    append: addTimeInterval,\n    remove: removeTimeInterval,\n  } = useFieldArray<MuteTimingFields>({\n    name: 'time_intervals',\n  });\n\n  return (\n    <FieldSet className={styles.timeIntervalLegend} label=\"Time intervals\">\n      <>\n        <p>\n          A time interval is a definition for a moment in time. All fields are lists, and at least one list element must\n          be satisfied to match the field. If a field is left blank, any moment of time will match the field. For an\n          instant of time to match a complete time interval, all fields must match. A mute timing can contain multiple\n          time intervals.\n        </p>\n        {timeIntervals.map((timeInterval, timeIntervalIndex) => {\n          const errors = formState.errors;\n          return (\n            <div key={timeInterval.id} className={styles.timeIntervalSection}>\n              <MuteTimingTimeRange intervalIndex={timeIntervalIndex} />\n              <Field\n                label=\"Days of the week\"\n                error={errors.time_intervals?.[timeIntervalIndex]?.weekdays?.message ?? ''}\n                invalid={!!errors.time_intervals?.[timeIntervalIndex]?.weekdays}\n              >\n                <Input\n                  {...register(`time_intervals.${timeIntervalIndex}.weekdays`, {\n                    validate: (value) =>\n                      validateArrayField(\n                        value,\n                        (day) => DAYS_OF_THE_WEEK.includes(day.toLowerCase()),\n                        'Invalid day of the week'\n                      ),\n                  })}\n                  className={styles.input}\n                  data-testid=\"mute-timing-weekdays\"\n                  // @ts-ignore react-hook-form doesn't handle nested field arrays well\n                  defaultValue={timeInterval.weekdays}\n                  placeholder=\"Example: monday, tuesday:thursday\"\n                />\n              </Field>\n              <Field\n                label=\"Days of the month\"\n                description=\"The days of the month, 1-31, of a month. Negative values can be used to represent days which begin at the end of the month\"\n                invalid={!!errors.time_intervals?.[timeIntervalIndex]?.days_of_month}\n                error={errors.time_intervals?.[timeIntervalIndex]?.days_of_month?.message}\n              >\n                <Input\n                  {...register(`time_intervals.${timeIntervalIndex}.days_of_month`, {\n                    validate: (value) =>\n                      validateArrayField(\n                        value,\n                        (day) => {\n                          const parsedDay = parseInt(day, 10);\n                          return (parsedDay > -31 && parsedDay < 0) || (parsedDay > 0 && parsedDay < 32);\n                        },\n                        'Invalid day'\n                      ),\n                  })}\n                  className={styles.input}\n                  // @ts-ignore react-hook-form doesn't handle nested field arrays well\n                  defaultValue={timeInterval.days_of_month}\n                  placeholder=\"Example: 1, 14:16, -1\"\n                  data-testid=\"mute-timing-days\"\n                />\n              </Field>\n              <Field\n                label=\"Months\"\n                description=\"The months of the year in either numerical or the full calendar month\"\n                invalid={!!errors.time_intervals?.[timeIntervalIndex]?.months}\n                error={errors.time_intervals?.[timeIntervalIndex]?.months?.message}\n              >\n                <Input\n                  {...register(`time_intervals.${timeIntervalIndex}.months`, {\n                    validate: (value) =>\n                      validateArrayField(\n                        value,\n                        (month) => MONTHS.includes(month) || (parseInt(month, 10) < 13 && parseInt(month, 10) > 0),\n                        'Invalid month'\n                      ),\n                  })}\n                  className={styles.input}\n                  placeholder=\"Example: 1:3, may:august, december\"\n                  // @ts-ignore react-hook-form doesn't handle nested field arrays well\n                  defaultValue={timeInterval.months}\n                  data-testid=\"mute-timing-months\"\n                />\n              </Field>\n              <Field\n                label=\"Years\"\n                invalid={!!errors.time_intervals?.[timeIntervalIndex]?.years}\n                error={errors.time_intervals?.[timeIntervalIndex]?.years?.message ?? ''}\n              >\n                <Input\n                  {...register(`time_intervals.${timeIntervalIndex}.years`, {\n                    validate: (value) => validateArrayField(value, (year) => /^\\d{4}$/.test(year), 'Invalid year'),\n                  })}\n                  className={styles.input}\n                  placeholder=\"Example: 2021:2022, 2030\"\n                  // @ts-ignore react-hook-form doesn't handle nested field arrays well\n                  defaultValue={timeInterval.years}\n                  data-testid=\"mute-timing-years\"\n                />\n              </Field>\n              <Button\n                type=\"button\"\n                variant=\"destructive\"\n                icon=\"trash-alt\"\n                onClick={() => removeTimeInterval(timeIntervalIndex)}\n              >\n                Remove time interval\n              </Button>\n            </div>\n          );\n        })}\n        <Button\n          type=\"button\"\n          variant=\"secondary\"\n          className={styles.removeTimeIntervalButton}\n          onClick={() => {\n            addTimeInterval(defaultTimeInterval);\n          }}\n          icon=\"plus\"\n        >\n          Add another time interval\n        </Button>\n      </>\n    </FieldSet>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  input: css`\n    width: 400px;\n  `,\n  timeIntervalLegend: css`\n    legend {\n      font-size: 1.25rem;\n    }\n  `,\n  timeIntervalSection: css`\n    background-color: ${theme.colors.background.secondary};\n    padding: ${theme.spacing(1)};\n    margin-bottom: ${theme.spacing(1)};\n  `,\n  removeTimeIntervalButton: css`\n    margin-top: ${theme.spacing(1)};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { useMemo } from 'react';\nimport { FormProvider, useForm } from 'react-hook-form';\nimport { useDispatch } from 'react-redux';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Field, FieldSet, Input, Button, LinkButton, useStyles2 } from '@grafana/ui';\nimport {\n  AlertmanagerConfig,\n  AlertManagerCortexConfig,\n  MuteTimeInterval,\n} from 'app/plugins/datasource/alertmanager/types';\n\nimport { useAlertManagerSourceName } from '../../hooks/useAlertManagerSourceName';\nimport { useAlertManagersByPermission } from '../../hooks/useAlertManagerSources';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { updateAlertManagerConfigAction } from '../../state/actions';\nimport { MuteTimingFields } from '../../types/mute-timing-form';\nimport { renameMuteTimings } from '../../utils/alertmanager';\nimport { makeAMLink } from '../../utils/misc';\nimport { createMuteTiming, defaultTimeInterval } from '../../utils/mute-timings';\nimport { initialAsyncRequestState } from '../../utils/redux';\nimport { AlertManagerPicker } from '../AlertManagerPicker';\nimport { AlertingPageWrapper } from '../AlertingPageWrapper';\nimport { ProvisionedResource, ProvisioningAlert } from '../Provisioning';\n\nimport { MuteTimingTimeInterval } from './MuteTimingTimeInterval';\n\ninterface Props {\n  muteTiming?: MuteTimeInterval;\n  showError?: boolean;\n  provenance?: string;\n}\n\nconst useDefaultValues = (muteTiming?: MuteTimeInterval): MuteTimingFields => {\n  return useMemo(() => {\n    const defaultValues = {\n      name: '',\n      time_intervals: [defaultTimeInterval],\n    };\n\n    if (!muteTiming) {\n      return defaultValues;\n    }\n\n    const intervals = muteTiming.time_intervals.map((interval) => ({\n      times: interval.times ?? defaultTimeInterval.times,\n      weekdays: interval?.weekdays?.join(', ') ?? defaultTimeInterval.weekdays,\n      days_of_month: interval?.days_of_month?.join(', ') ?? defaultTimeInterval.days_of_month,\n      months: interval?.months?.join(', ') ?? defaultTimeInterval.months,\n      years: interval?.years?.join(', ') ?? defaultTimeInterval.years,\n    }));\n\n    return {\n      name: muteTiming.name,\n      time_intervals: intervals,\n    };\n  }, [muteTiming]);\n};\n\nconst MuteTimingForm = ({ muteTiming, showError, provenance }: Props) => {\n  const dispatch = useDispatch();\n  const alertManagers = useAlertManagersByPermission('notification');\n  const [alertManagerSourceName, setAlertManagerSourceName] = useAlertManagerSourceName(alertManagers);\n  const styles = useStyles2(getStyles);\n\n  const defaultAmCortexConfig = { alertmanager_config: {}, template_files: {} };\n  const amConfigs = useUnifiedAlertingSelector((state) => state.amConfigs);\n  const { result = defaultAmCortexConfig, loading } =\n    (alertManagerSourceName && amConfigs[alertManagerSourceName]) || initialAsyncRequestState;\n\n  const config: AlertmanagerConfig = result?.alertmanager_config ?? {};\n  const defaultValues = useDefaultValues(muteTiming);\n  const formApi = useForm({ defaultValues });\n\n  const onSubmit = (values: MuteTimingFields) => {\n    const newMuteTiming = createMuteTiming(values);\n\n    const muteTimings = muteTiming\n      ? config?.mute_time_intervals?.filter(({ name }) => name !== muteTiming.name)\n      : config.mute_time_intervals;\n\n    const newConfig: AlertManagerCortexConfig = {\n      ...result,\n      alertmanager_config: {\n        ...config,\n        route:\n          muteTiming && newMuteTiming.name !== muteTiming.name\n            ? renameMuteTimings(newMuteTiming.name, muteTiming.name, config.route ?? {})\n            : config.route,\n        mute_time_intervals: [...(muteTimings || []), newMuteTiming],\n      },\n    };\n\n    dispatch(\n      updateAlertManagerConfigAction({\n        newConfig,\n        oldConfig: result,\n        alertManagerSourceName: alertManagerSourceName!,\n        successMessage: 'Mute timing saved',\n        redirectPath: '/alerting/routes/',\n      })\n    );\n  };\n\n  return (\n    <AlertingPageWrapper pageId=\"am-routes\">\n      <AlertManagerPicker\n        current={alertManagerSourceName}\n        onChange={setAlertManagerSourceName}\n        disabled\n        dataSources={alertManagers}\n      />\n      {provenance && <ProvisioningAlert resource={ProvisionedResource.MuteTiming} />}\n      {result && !loading && (\n        <FormProvider {...formApi}>\n          <form onSubmit={formApi.handleSubmit(onSubmit)} data-testid=\"mute-timing-form\">\n            {showError && <Alert title=\"No matching mute timing found\" />}\n            <FieldSet label={'Create mute timing'} disabled={Boolean(provenance)}>\n              <Field\n                required\n                label=\"Name\"\n                description=\"A unique name for the mute timing\"\n                invalid={!!formApi.formState.errors?.name}\n                error={formApi.formState.errors.name?.message}\n              >\n                <Input\n                  {...formApi.register('name', {\n                    required: true,\n                    validate: (value) => {\n                      if (!muteTiming) {\n                        const existingMuteTiming = config?.mute_time_intervals?.find(({ name }) => value === name);\n                        return existingMuteTiming ? `Mute timing already exists for \"${value}\"` : true;\n                      }\n                      return value.length > 0 || 'Name is required';\n                    },\n                  })}\n                  className={styles.input}\n                  data-testid={'mute-timing-name'}\n                />\n              </Field>\n              <MuteTimingTimeInterval />\n              <LinkButton\n                type=\"button\"\n                variant=\"secondary\"\n                href={makeAMLink('/alerting/routes/', alertManagerSourceName)}\n              >\n                Cancel\n              </LinkButton>\n              <Button type=\"submit\" className={styles.submitButton}>\n                {muteTiming ? 'Save' : 'Submit'}\n              </Button>\n            </FieldSet>\n          </form>\n        </FormProvider>\n      )}\n    </AlertingPageWrapper>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  input: css`\n    width: 400px;\n  `,\n  submitButton: css`\n    margin-left: ${theme.spacing(1)};\n  `,\n});\n\nexport default MuteTimingForm;\n","import React, { useCallback, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Route, Redirect, Switch } from 'react-router-dom';\n\nimport { Alert, LoadingPlaceholder } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { MuteTimeInterval } from 'app/plugins/datasource/alertmanager/types';\n\nimport MuteTimingForm from './components/amroutes/MuteTimingForm';\nimport { useAlertManagerSourceName } from './hooks/useAlertManagerSourceName';\nimport { useAlertManagersByPermission } from './hooks/useAlertManagerSources';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { fetchAlertManagerConfigAction } from './state/actions';\nimport { initialAsyncRequestState } from './utils/redux';\n\nconst MuteTimings = () => {\n  const [queryParams] = useQueryParams();\n  const dispatch = useDispatch();\n  const alertManagers = useAlertManagersByPermission('notification');\n  const [alertManagerSourceName] = useAlertManagerSourceName(alertManagers);\n\n  const amConfigs = useUnifiedAlertingSelector((state) => state.amConfigs);\n\n  const fetchConfig = useCallback(() => {\n    if (alertManagerSourceName) {\n      dispatch(fetchAlertManagerConfigAction(alertManagerSourceName));\n    }\n  }, [alertManagerSourceName, dispatch]);\n\n  useEffect(() => {\n    fetchConfig();\n  }, [fetchConfig]);\n\n  const { result, error, loading } =\n    (alertManagerSourceName && amConfigs[alertManagerSourceName]) || initialAsyncRequestState;\n\n  const config = result?.alertmanager_config;\n\n  const getMuteTimingByName = useCallback(\n    (id: string): MuteTimeInterval | undefined => {\n      const timing = config?.mute_time_intervals?.find(({ name }: MuteTimeInterval) => name === id);\n\n      if (timing) {\n        const provenance = (config?.muteTimeProvenances ?? {})[timing.name];\n\n        return {\n          ...timing,\n          provenance,\n        };\n      }\n\n      return timing;\n    },\n    [config]\n  );\n\n  return (\n    <>\n      {loading && <LoadingPlaceholder text=\"Loading mute timing\" />}\n      {error && !loading && (\n        <Alert severity=\"error\" title={`Error loading Alertmanager config for ${alertManagerSourceName}`}>\n          {error.message || 'Unknown error.'}\n        </Alert>\n      )}\n      {result && !error && (\n        <Switch>\n          <Route exact path=\"/alerting/routes/mute-timing/new\">\n            <MuteTimingForm />\n          </Route>\n          <Route exact path=\"/alerting/routes/mute-timing/edit\">\n            {() => {\n              if (queryParams['muteName']) {\n                const muteTiming = getMuteTimingByName(String(queryParams['muteName']));\n                const provenance = muteTiming?.provenance;\n\n                return <MuteTimingForm muteTiming={muteTiming} showError={!muteTiming} provenance={provenance} />;\n              }\n              return <Redirect to=\"/alerting/routes\" />;\n            }}\n          </Route>\n        </Switch>\n      )}\n    </>\n  );\n};\n\nexport default MuteTimings;\n","import React, { FC } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { Page } from 'app/core/components/Page/Page';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { StoreState } from 'app/types/store';\n\ninterface Props {\n  pageId: string;\n  isLoading?: boolean;\n}\n\nexport const AlertingPageWrapper: FC<Props> = ({ children, pageId, isLoading }) => {\n  const navModel = getNavModel(\n    useSelector((state: StoreState) => state.navIndex),\n    pageId\n  );\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents isLoading={isLoading}>{children}</Page.Contents>\n    </Page>\n  );\n};\n","import React from 'react';\n\nimport { Alert, Badge } from '@grafana/ui';\n\nexport enum ProvisionedResource {\n  ContactPoint = 'contact point',\n  Template = 'template',\n  MuteTiming = 'mute timing',\n  AlertRule = 'alert rule',\n  RootNotificationPolicy = 'root notification policy',\n}\n\ninterface ProvisioningAlertProps {\n  resource: ProvisionedResource;\n}\n\nexport const ProvisioningAlert = ({ resource }: ProvisioningAlertProps) => {\n  return (\n    <Alert title={`This ${resource} cannot be edited through the UI`} severity=\"info\">\n      This {resource} has been provisioned, that means it was created by config. Please contact your server admin to\n      update this {resource}.\n    </Alert>\n  );\n};\n\nexport const ProvisioningBadge = () => {\n  return <Badge text={'Provisioned'} color={'purple'} />;\n};\n","import { useCallback } from 'react';\n\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport store from 'app/core/store';\n\nimport { ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, ALERTMANAGER_NAME_QUERY_KEY } from '../utils/constants';\nimport { AlertManagerDataSource, GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\nfunction useIsAlertManagerAvailable(availableAlertManagers: AlertManagerDataSource[]) {\n  return useCallback(\n    (alertManagerName: string) => {\n      const availableAlertManagersNames = availableAlertManagers.map((am) => am.name);\n      return availableAlertManagersNames.includes(alertManagerName);\n    },\n    [availableAlertManagers]\n  );\n}\n\n/* This will return am name either from query params or from local storage or a default (grafana).\n * Due to RBAC permissions Grafana Managed Alert manager or external alert managers may not be available\n * In the worst case neihter GMA nor external alert manager is available\n */\nexport function useAlertManagerSourceName(\n  availableAlertManagers: AlertManagerDataSource[]\n): [string | undefined, (alertManagerSourceName: string) => void] {\n  const [queryParams, updateQueryParams] = useQueryParams();\n  const isAlertManagerAvailable = useIsAlertManagerAvailable(availableAlertManagers);\n\n  const update = useCallback(\n    (alertManagerSourceName: string) => {\n      if (!isAlertManagerAvailable(alertManagerSourceName)) {\n        return;\n      }\n      if (alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME) {\n        store.delete(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: null });\n      } else {\n        store.set(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, alertManagerSourceName);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: alertManagerSourceName });\n      }\n    },\n    [updateQueryParams, isAlertManagerAvailable]\n  );\n\n  const querySource = queryParams[ALERTMANAGER_NAME_QUERY_KEY];\n\n  if (querySource && typeof querySource === 'string') {\n    if (isAlertManagerAvailable(querySource)) {\n      return [querySource, update];\n    } else {\n      // non existing alertmanager\n      return [undefined, update];\n    }\n  }\n\n  const storeSource = store.get(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n  if (storeSource && typeof storeSource === 'string' && isAlertManagerAvailable(storeSource)) {\n    update(storeSource);\n    return [storeSource, update];\n  }\n\n  if (isAlertManagerAvailable(GRAFANA_RULES_SOURCE_NAME)) {\n    return [GRAFANA_RULES_SOURCE_NAME, update];\n  }\n\n  return [undefined, update];\n}\n","import { useMemo } from 'react';\n\nimport { getAlertManagerDataSourcesByPermission } from '../utils/datasource';\n\nexport function useAlertManagersByPermission(accessType: 'instance' | 'notification') {\n  return useMemo(() => getAlertManagerDataSourcesByPermission(accessType), [accessType]);\n}\n"],"names":["DAYS_OF_THE_WEEK","MONTHS","defaultTimeInterval","times","start_time","end_time","weekdays","days_of_month","months","years","validateArrayField","value","validateValue","invalidText","split","map","x","trim","every","entry","convertStringToArray","str","s","undefined","MuteTimingTimeRange","intervalIndex","styles","useStyles2","getStyles","register","formState","useFormContext","fields","timeRanges","append","addTimeRange","remove","removeTimeRange","useFieldArray","name","validateTime","timeString","hour","minutes","parseInt","formErrors","errors","time_intervals","timeRangeInvalid","some","Field","className","field","label","description","invalid","error","timeRange","index","InlineFieldRow","InlineField","Input","validate","timeRangeInput","defaultValue","placeholder","IconButton","deleteTimeRange","title","type","onClick","e","preventDefault","id","Button","variant","icon","theme","css","spacing","MuteTimingTimeInterval","timeIntervals","addTimeInterval","removeTimeInterval","FieldSet","timeIntervalLegend","timeInterval","timeIntervalIndex","timeIntervalSection","message","day","includes","toLowerCase","input","parsedDay","month","year","test","removeTimeIntervalButton","colors","background","secondary","submitButton","muteTiming","showError","provenance","dispatch","useDispatch","alertManagers","useAlertManagersByPermission","alertManagerSourceName","setAlertManagerSourceName","useAlertManagerSourceName","defaultAmCortexConfig","alertmanager_config","template_files","amConfigs","useUnifiedAlertingSelector","state","result","loading","initialAsyncRequestState","config","defaultValues","useMemo","intervals","interval","join","useDefaultValues","formApi","useForm","AlertingPageWrapper","pageId","AlertManagerPicker","current","onChange","disabled","dataSources","Provisioning","resource","ProvisionedResource","onSubmit","handleSubmit","values","newMuteTiming","filter","v","omitBy","isUndefined","createMuteTiming","muteTimings","mute_time_intervals","newConfig","route","renameMuteTimings","updateAlertManagerConfigAction","oldConfig","successMessage","redirectPath","Alert","Boolean","required","find","length","LinkButton","href","makeAMLink","queryParams","useQueryParams","fetchConfig","useCallback","fetchAlertManagerConfigAction","useEffect","getMuteTimingByName","timing","muteTimeProvenances","LoadingPlaceholder","text","severity","exact","path","String","to","children","isLoading","navModel","getNavModel","useSelector","navIndex","ProvisioningAlert","ProvisioningBadge","Badge","color","availableAlertManagers","updateQueryParams","isAlertManagerAvailable","alertManagerName","am","useIsAlertManagerAvailable","update","GRAFANA_RULES_SOURCE_NAME","store","ALERTMANAGER_NAME_LOCAL_STORAGE_KEY","ALERTMANAGER_NAME_QUERY_KEY","querySource","storeSource","accessType","getAlertManagerDataSourcesByPermission"],"sourceRoot":""}