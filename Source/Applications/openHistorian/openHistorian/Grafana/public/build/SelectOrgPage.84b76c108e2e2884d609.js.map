{"version":3,"file":"SelectOrgPage.84b76c108e2e2884d609.js","mappings":"iPAUA,MAAMA,EAAW,CACf,KAAM,CACJ,KAAM,UACN,SAAU,cACV,KAAM,4BACR,EACA,KAAM,CACJ,KAAM,4BACR,CACF,EAEMC,EAAmBC,IAChB,CACL,SAAUA,EAAM,aAAa,QAC/B,GAGIC,EAAqB,CACzB,oBAAmB,KACnB,qBAAoB,IACtB,EAEMC,KAAY,WAAQH,EAAiBE,CAAkB,EAIhDE,EAAgB,CAAC,CAAE,oBAAAC,EAAqB,qBAAAC,EAAsB,SAAAC,CAAS,IAAa,CAC/F,MAAMC,EAAa,MAAOC,GAAiB,CACzC,MAAMJ,EAAoBI,EAAI,KAAK,EACnC,OAAO,SAAS,KAAO,IAAO,UAAY,GAC5C,EAEA,cAAc,IAAM,CAClBH,EAAqB,CACvB,CAAC,KAGC,OAAC,KAAI,CAAC,SAAAP,EACJ,mBAAC,KAAK,SAAL,CACC,oBAAC,OACC,oBAAC,KAAE,kKAGH,KACA,OAAC,IAAK,CAAC,KAAK,OACT,SAAAQ,GACCA,EAAS,IAAKE,MACZ,OAAC,KAAM,CAAiB,KAAK,SAAS,QAAS,IAAMD,EAAWC,CAAG,EAChE,SAAAA,EAAI,MADMA,EAAI,KAEjB,CACD,EACL,GACF,EACF,EACF,CAEJ,EAEA,EAAeN,EAAUC,CAAa,C","sources":["webpack://grafana/./public/app/features/org/SelectOrgPage.tsx"],"sourcesContent":["import { connect, ConnectedProps } from 'react-redux';\nimport { useEffectOnce } from 'react-use';\n\nimport { config } from '@grafana/runtime';\nimport { Button, Stack } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { StoreState, UserOrg } from 'app/types';\n\nimport { getUserOrganizations, setUserOrganization } from './state/actions';\n\nconst navModel = {\n  main: {\n    icon: 'grafana' as const,\n    subTitle: 'Preferences',\n    text: 'Select active organization',\n  },\n  node: {\n    text: 'Select active organization',\n  },\n};\n\nconst mapStateToProps = (state: StoreState) => {\n  return {\n    userOrgs: state.organization.userOrgs,\n  };\n};\n\nconst mapDispatchToProps = {\n  setUserOrganization,\n  getUserOrganizations,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype Props = ConnectedProps<typeof connector>;\n\nexport const SelectOrgPage = ({ setUserOrganization, getUserOrganizations, userOrgs }: Props) => {\n  const setUserOrg = async (org: UserOrg) => {\n    await setUserOrganization(org.orgId);\n    window.location.href = config.appSubUrl + '/';\n  };\n\n  useEffectOnce(() => {\n    getUserOrganizations();\n  });\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        <div>\n          <p>\n            You have been invited to another organization! Please select which organization that you want to use right\n            now. You can change this later at any time.\n          </p>\n          <Stack wrap=\"wrap\">\n            {userOrgs &&\n              userOrgs.map((org) => (\n                <Button key={org.orgId} icon=\"signin\" onClick={() => setUserOrg(org)}>\n                  {org.name}\n                </Button>\n              ))}\n          </Stack>\n        </div>\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default connector(SelectOrgPage);\n"],"names":["navModel","mapStateToProps","state","mapDispatchToProps","connector","SelectOrgPage","setUserOrganization","getUserOrganizations","userOrgs","setUserOrg","org"],"sourceRoot":""}