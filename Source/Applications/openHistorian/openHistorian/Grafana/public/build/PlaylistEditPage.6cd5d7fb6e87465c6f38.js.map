{"version":3,"file":"PlaylistEditPage.6cd5d7fb6e87465c6f38.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/Form/Form.tsx","webpack://grafana/./public/app/features/playlist/PlaylistEditPage.tsx","webpack://grafana/./public/app/features/playlist/PlaylistTableRows.tsx","webpack://grafana/./public/app/features/playlist/PlaylistTable.tsx","webpack://grafana/./public/app/features/playlist/usePlaylistItems.tsx","webpack://grafana/./public/app/features/playlist/PlaylistForm.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport { HTMLProps, useEffect } from 'react';\nimport * as React from 'react';\nimport {\n  useForm,\n  Mode,\n  DefaultValues,\n  SubmitHandler,\n  FieldValues,\n  UseFormReturn,\n  FieldErrors,\n  FieldPath,\n} from 'react-hook-form';\n\nexport type FormAPI<T extends FieldValues> = Omit<UseFormReturn<T>, 'handleSubmit'> & {\n  errors: FieldErrors<T>;\n};\n\ninterface FormProps<T extends FieldValues> extends Omit<HTMLProps<HTMLFormElement>, 'onSubmit' | 'children'> {\n  validateOn?: Mode;\n  validateOnMount?: boolean;\n  validateFieldsOnMount?: FieldPath<T> | Array<FieldPath<T>>;\n  defaultValues?: DefaultValues<T>;\n  onSubmit: SubmitHandler<T>;\n  children: (api: FormAPI<T>) => React.ReactNode;\n  /** Sets max-width for container. Use it instead of setting individual widths on inputs.*/\n  maxWidth?: number | 'none';\n}\n\nexport function Form<T extends FieldValues>({\n  defaultValues,\n  onSubmit,\n  validateOnMount = false,\n  validateFieldsOnMount,\n  children,\n  validateOn = 'onSubmit',\n  maxWidth = 600,\n  ...htmlProps\n}: FormProps<T>) {\n  const { handleSubmit, trigger, formState, ...rest } = useForm<T>({\n    mode: validateOn,\n    defaultValues,\n  });\n\n  useEffect(() => {\n    if (validateOnMount) {\n      trigger(validateFieldsOnMount);\n    }\n  }, [trigger, validateFieldsOnMount, validateOnMount]);\n\n  return (\n    <form\n      className={css({\n        maxWidth: maxWidth !== 'none' ? maxWidth + 'px' : maxWidth,\n        width: '100%',\n      })}\n      onSubmit={handleSubmit(onSubmit)}\n      {...htmlProps}\n    >\n      {children({ errors: formState.errors, formState, trigger, ...rest })}\n    </form>\n  );\n}\n","import { useParams } from 'react-router-dom-v5-compat';\nimport { useAsync } from 'react-use';\n\nimport { NavModelItem } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { Page } from 'app/core/components/Page/Page';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { PlaylistForm } from './PlaylistForm';\nimport { getPlaylistAPI } from './api';\nimport { Playlist } from './types';\n\nexport interface RouteParams {\n  uid: string;\n}\n\nexport const PlaylistEditPage = () => {\n  const { uid = '' } = useParams();\n  const api = getPlaylistAPI();\n  const playlist = useAsync(() => api.getPlaylist(uid), [uid]);\n\n  const onSubmit = async (playlist: Playlist) => {\n    await api.updatePlaylist(playlist);\n    locationService.push('/playlists');\n  };\n\n  const pageNav: NavModelItem = {\n    text: t('playlist-edit.title', 'Edit playlist'),\n    subTitle: t(\n      'playlist-edit.sub-title',\n      'A playlist rotates through a pre-selected list of dashboards. A playlist can be a great way to build situational awareness, or just show off your metrics to your team or visitors.'\n    ),\n  };\n\n  return (\n    <Page navId=\"dashboards/playlists\" pageNav={pageNav}>\n      <Page.Contents isLoading={playlist.loading}>\n        {playlist.error && (\n          <div>\n            <Trans i18nKey=\"playlist-edit.error-prefix\">Error loading playlist:</Trans>\n            {JSON.stringify(playlist.error)}\n          </div>\n        )}\n        {playlist.value && <PlaylistForm onSubmit={onSubmit} playlist={playlist.value} />}\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default PlaylistEditPage;\n","import { css } from '@emotion/css';\nimport { Draggable } from '@hello-pangea/dnd';\nimport pluralize from 'pluralize';\nimport { ReactNode } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Icon, IconButton, useStyles2, Spinner, IconName } from '@grafana/ui';\nimport { TagBadge } from 'app/core/components/TagFilter/TagBadge';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { PlaylistItem } from './types';\n\ninterface Props {\n  items: PlaylistItem[];\n  onDelete: (idx: number) => void;\n}\n\nexport const PlaylistTableRows = ({ items, onDelete }: Props) => {\n  const styles = useStyles2(getStyles);\n  if (!items?.length) {\n    return (\n      <div>\n        <em>\n          <Trans i18nKey=\"playlist-edit.form.table-empty\">Playlist is empty. Add dashboards below.</Trans>\n        </em>\n      </div>\n    );\n  }\n\n  const renderItem = (item: PlaylistItem) => {\n    let icon: IconName = item.type === 'dashboard_by_tag' ? 'apps' : 'tag-alt';\n    const info: ReactNode[] = [];\n\n    const first = item.dashboards?.[0];\n    if (!item.dashboards) {\n      info.push(<Spinner key=\"spinner\" />);\n    } else if (item.type === 'dashboard_by_tag') {\n      info.push(<TagBadge key={item.value} label={item.value} removeIcon={false} count={0} />);\n      if (!first) {\n        icon = 'exclamation-triangle';\n        info.push(<span key=\"info\">&nbsp; No dashboards found</span>);\n      } else {\n        info.push(<span key=\"info\">&nbsp; {pluralize('dashboard', item.dashboards.length, true)}</span>);\n      }\n    } else if (first) {\n      info.push(\n        item.dashboards.length > 1 ? (\n          <span key=\"info\">Multiple items found: ${item.value}</span>\n        ) : (\n          <span key=\"info\">{first.name ?? item.value}</span>\n        )\n      );\n    } else {\n      icon = 'exclamation-triangle';\n      info.push(<span key=\"info\">&nbsp; Not found: {item.value}</span>);\n    }\n    return (\n      <>\n        <Icon name={icon} className={styles.rightMargin} key=\"icon\" />\n        {info}\n      </>\n    );\n  };\n\n  return (\n    <>\n      {items.map((item, index) => (\n        <Draggable key={`${index}/${item.value}`} draggableId={`${index}`} index={index}>\n          {(provided) => (\n            <div\n              className={styles.row}\n              ref={provided.innerRef}\n              {...provided.draggableProps}\n              {...provided.dragHandleProps}\n              role=\"row\"\n            >\n              <div className={styles.actions} role=\"cell\" aria-label={`Playlist item, ${item.type}, ${item.value}`}>\n                {renderItem(item)}\n              </div>\n              <div className={styles.actions}>\n                <IconButton\n                  name=\"times\"\n                  size=\"md\"\n                  onClick={() => onDelete(index)}\n                  data-testid={selectors.pages.PlaylistForm.itemDelete}\n                  tooltip={t('playlist-edit.form.table-delete', 'Delete playlist item')}\n                />\n                <Icon\n                  title={t('playlist-edit.form.table-drag', 'Drag and drop to reorder')}\n                  name=\"draggabledots\"\n                  size=\"md\"\n                />\n              </div>\n            </div>\n          )}\n        </Draggable>\n      ))}\n    </>\n  );\n};\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    row: css({\n      padding: theme.spacing(0.75),\n      background: theme.colors.background.secondary,\n      borderRadius: theme.shape.radius.default,\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'space-between',\n      marginBottom: '3px',\n\n      border: `1px solid ${theme.colors.border.medium}`,\n      '&:hover': {\n        border: `1px solid ${theme.colors.border.strong}`,\n      },\n    }),\n    rightMargin: css({\n      marginRight: '5px',\n    }),\n    actions: css({\n      alignItems: 'center',\n      justifyContent: 'center',\n      display: 'flex',\n    }),\n    settings: css({\n      label: 'settings',\n      textAlign: 'right',\n    }),\n  };\n}\n","import { DragDropContext, Droppable, DropResult } from '@hello-pangea/dnd';\n\nimport { FieldSet } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { PlaylistTableRows } from './PlaylistTableRows';\nimport { PlaylistItem } from './types';\n\ninterface Props {\n  items: PlaylistItem[];\n  deleteItem: (idx: number) => void;\n  moveItem: (src: number, dst: number) => void;\n}\n\nexport const PlaylistTable = ({ items, deleteItem, moveItem }: Props) => {\n  const onDragEnd = (d: DropResult) => {\n    if (d.destination) {\n      moveItem(d.source.index, d.destination?.index);\n    }\n  };\n\n  return (\n    <FieldSet label={t('playlist-edit.form.table-heading', 'Dashboards')}>\n      <DragDropContext onDragEnd={onDragEnd}>\n        <Droppable droppableId=\"playlist-list\" direction=\"vertical\">\n          {(provided) => {\n            return (\n              <div ref={provided.innerRef} {...provided.droppableProps}>\n                <PlaylistTableRows items={items} onDelete={deleteItem} />\n                {provided.placeholder}\n              </div>\n            );\n          }}\n        </Droppable>\n      </DragDropContext>\n    </FieldSet>\n  );\n};\n","import { useCallback, useState } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { DashboardPickerDTO } from 'app/core/components/Select/DashboardPicker';\n\nimport { loadDashboards } from './api';\nimport { PlaylistItem } from './types';\n\nexport function usePlaylistItems(playlistItems?: PlaylistItem[]) {\n  const [items, setItems] = useState<PlaylistItem[]>(playlistItems ?? []);\n\n  // Attach dashboards if any were missing\n  useAsync(async () => {\n    for (const item of items) {\n      if (!item.dashboards) {\n        setItems(await loadDashboards(items));\n        return;\n      }\n    }\n  }, [items]);\n\n  const addByUID = useCallback(\n    (dashboard?: DashboardPickerDTO) => {\n      if (!dashboard) {\n        return;\n      }\n\n      setItems([\n        ...items,\n        {\n          type: 'dashboard_by_uid',\n          value: dashboard.uid,\n        },\n      ]);\n    },\n    [items]\n  );\n\n  const addByTag = useCallback(\n    (tags: string[]) => {\n      const tag = tags[0];\n      if (!tag || items.find((item) => item.value === tag)) {\n        return;\n      }\n\n      const newItem: PlaylistItem = {\n        type: 'dashboard_by_tag',\n        value: tag,\n      };\n      setItems([...items, newItem]);\n    },\n    [items]\n  );\n\n  const moveItem = useCallback(\n    (src: number, dst: number) => {\n      if (src === dst || !items[src]) {\n        return; // nothing to do\n      }\n      const update = Array.from(items);\n      const [removed] = update.splice(src, 1);\n      update.splice(dst, 0, removed);\n      setItems(update);\n    },\n    [items]\n  );\n\n  const deleteItem = useCallback(\n    (index: number) => {\n      const copy = items.slice();\n      copy.splice(index, 1);\n      setItems(copy);\n    },\n    [items]\n  );\n\n  return { items, addByUID, addByTag, deleteItem, moveItem };\n}\n","import { useMemo, useState } from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { config } from '@grafana/runtime';\nimport { Button, Field, FieldSet, Input, LinkButton, Stack } from '@grafana/ui';\nimport { Form } from 'app/core/components/Form/Form';\nimport { DashboardPicker } from 'app/core/components/Select/DashboardPicker';\nimport { TagFilter } from 'app/core/components/TagFilter/TagFilter';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport { getGrafanaSearcher } from '../search/service';\n\nimport { PlaylistTable } from './PlaylistTable';\nimport { Playlist } from './types';\nimport { usePlaylistItems } from './usePlaylistItems';\n\ninterface Props {\n  onSubmit: (playlist: Playlist) => void;\n  playlist: Playlist;\n}\n\nexport const PlaylistForm = ({ onSubmit, playlist }: Props) => {\n  const [saving, setSaving] = useState(false);\n  const { name, interval, items: propItems } = playlist;\n  const tagOptions = useMemo(() => {\n    return () => getGrafanaSearcher().tags({ kind: ['dashboard'] });\n  }, []);\n\n  const { items, addByUID, addByTag, deleteItem, moveItem } = usePlaylistItems(propItems);\n\n  const doSubmit = (list: Playlist) => {\n    setSaving(true);\n    onSubmit({ ...list, items, uid: playlist.uid });\n  };\n\n  return (\n    <Form onSubmit={doSubmit} validateOn={'onBlur'}>\n      {({ register, errors }) => {\n        const isDisabled = items.length === 0 || Object.keys(errors).length > 0;\n        return (\n          <>\n            <Field\n              label={t('playlist-edit.form.name-label', 'Name')}\n              invalid={!!errors.name}\n              error={errors?.name?.message}\n            >\n              <Input\n                type=\"text\"\n                {...register('name', { required: t('playlist-edit.form.name-required', 'Name is required') })}\n                placeholder={t('playlist-edit.form.name-placeholder', 'Name')}\n                defaultValue={name}\n                aria-label={selectors.pages.PlaylistForm.name}\n              />\n            </Field>\n            <Field\n              label={t('playlist-edit.form.interval-label', 'Interval')}\n              invalid={!!errors.interval}\n              error={errors?.interval?.message}\n            >\n              <Input\n                type=\"text\"\n                {...register('interval', {\n                  required: t('playlist-edit.form.interval-required', 'Interval is required'),\n                })}\n                placeholder={t('playlist-edit.form.interval-placeholder', '5m')}\n                defaultValue={interval ?? '5m'}\n                aria-label={selectors.pages.PlaylistForm.interval}\n              />\n            </Field>\n\n            <PlaylistTable items={items} deleteItem={deleteItem} moveItem={moveItem} />\n\n            <FieldSet label={t('playlist-edit.form.heading', 'Add dashboards')}>\n              <Field label={t('playlist-edit.form.add-title-label', 'Add by title')}>\n                <DashboardPicker id=\"dashboard-picker\" onChange={addByUID} key={items.length} />\n              </Field>\n\n              <Field label={t('playlist-edit.form.add-tag-label', 'Add by tag')}>\n                <TagFilter\n                  isClearable\n                  tags={[]}\n                  hideValues\n                  tagOptions={tagOptions}\n                  onChange={addByTag}\n                  placeholder={t('playlist-edit.form.add-tag-placeholder', 'Select a tag')}\n                />\n              </Field>\n            </FieldSet>\n\n            <Stack>\n              <Button type=\"submit\" variant=\"primary\" disabled={isDisabled} icon={saving ? 'spinner' : undefined}>\n                <Trans i18nKey=\"playlist-edit.form.save\">Save</Trans>\n              </Button>\n              <LinkButton variant=\"secondary\" href={`${config.appSubUrl}/playlists`}>\n                <Trans i18nKey=\"playlist-edit.form.cancel\">Cancel</Trans>\n              </LinkButton>\n            </Stack>\n          </>\n        );\n      }}\n    </Form>\n  );\n};\n"],"names":["Form","defaultValues","onSubmit","validateOnMount","validateFieldsOnMount","children","validateOn","maxWidth","htmlProps","handleSubmit","trigger","formState","rest","PlaylistEditPage","uid","api","playlist","pageNav","PlaylistTableRows","items","onDelete","styles","getStyles","renderItem","item","icon","info","first","TagBadge","Spinner","Icon","index","provided","IconButton","selectors","theme","PlaylistTable","deleteItem","moveItem","onDragEnd","d","FieldSet","usePlaylistItems","playlistItems","setItems","useAsync","addByUID","dashboard","addByTag","tags","tag","newItem","src","dst","update","removed","copy","PlaylistForm","saving","setSaving","name","interval","propItems","tagOptions","doSubmit","list","register","errors","isDisabled","Field","Input","DashboardPicker","TagFilter","Stack","Button","config"],"sourceRoot":""}