{"version":3,"file":"5331.6fa47f2f5492205834c7.js","mappings":"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","sources":["webpack://grafana/./public/app/core/utils/tracing.ts","webpack://grafana/./public/app/plugins/datasource/tempo/graphTransform.ts","webpack://grafana/../../opt/drone/yarncache/@opentelemetry-api-npm-1.4.0-e9d8b795cb-8dc522194e.zip/node_modules/@opentelemetry/api/build/esm/trace/status.js","webpack://grafana/../../opt/drone/yarncache/@opentelemetry-semantic-conventions-npm-1.9.1-12ecb89b3b-6217ba14b8.zip/node_modules/@opentelemetry/semantic-conventions/build/esm/resource/SemanticResourceAttributes.js","webpack://grafana/./public/app/plugins/datasource/tempo/resultTransformer.ts"],"sourcesContent":["/**\n * Get non overlapping duration of the ranges as they can overlap or have gaps.\n */\nimport { FieldType, MutableDataFrame, NodeGraphDataFrameFieldNames as Fields } from '@grafana/data';\n\nexport function getNonOverlappingDuration(ranges: Array<[number, number]>): number {\n  ranges.sort((a, b) => a[0] - b[0]);\n  const mergedRanges = ranges.reduce<Array<[number, number]>>((acc, range) => {\n    if (!acc.length) {\n      return [range];\n    }\n    const tail = acc.slice(-1)[0];\n    const [prevStart, prevEnd] = tail;\n    const [start, end] = range;\n    if (end < prevEnd) {\n      // In this case the range is completely inside the prev range so we can just ignore it.\n      return acc;\n    }\n\n    if (start > prevEnd) {\n      // There is no overlap so we can just add it to stack\n      return [...acc, range];\n    }\n\n    // We know there is overlap and current range ends later than previous so we can just extend the range\n    return [...acc.slice(0, -1), [prevStart, end]];\n  }, []);\n\n  return mergedRanges.reduce((acc, range) => {\n    return acc + (range[1] - range[0]);\n  }, 0);\n}\n\n/**\n * Returns a map of the spans with children array for easier processing. It will also contain empty spans in case\n * span is missing but other spans are its children. This is more generic because it needs to allow iterating over\n * both arrays and dataframe views.\n */\nexport function makeSpanMap<T>(getSpan: (index: number) => { span: T; id: string; parentIds: string[] } | undefined): {\n  [id: string]: { span: T; children: string[] };\n} {\n  const spanMap: { [id: string]: { span?: T; children: string[] } } = {};\n\n  let span;\n  for (let index = 0; (span = getSpan(index)), !!span; index++) {\n    if (!spanMap[span.id]) {\n      spanMap[span.id] = {\n        span: span.span,\n        children: [],\n      };\n    } else {\n      spanMap[span.id].span = span.span;\n    }\n\n    for (const parentId of span.parentIds) {\n      if (parentId) {\n        if (!spanMap[parentId]) {\n          spanMap[parentId] = {\n            span: undefined,\n            children: [span.id],\n          };\n        } else {\n          spanMap[parentId].children.push(span.id);\n        }\n      }\n    }\n  }\n  return spanMap as { [id: string]: { span: T; children: string[] } };\n}\n\nexport function getStats(duration: number, traceDuration: number, selfDuration: number) {\n  return {\n    main: `${toFixedNoTrailingZeros(duration)}ms (${toFixedNoTrailingZeros((duration / traceDuration) * 100)}%)`,\n    secondary: `${toFixedNoTrailingZeros(selfDuration)}ms (${toFixedNoTrailingZeros(\n      (selfDuration / duration) * 100\n    )}%)`,\n  };\n}\n\nfunction toFixedNoTrailingZeros(n: number) {\n  return parseFloat(n.toFixed(2));\n}\n\n/**\n * Create default frames used when returning data for node graph.\n */\nexport function makeFrames() {\n  const nodesFrame = new MutableDataFrame({\n    fields: [\n      { name: Fields.id, type: FieldType.string },\n      { name: Fields.title, type: FieldType.string },\n      { name: Fields.subTitle, type: FieldType.string },\n      { name: Fields.mainStat, type: FieldType.string, config: { displayName: 'Total time (% of trace)' } },\n      { name: Fields.secondaryStat, type: FieldType.string, config: { displayName: 'Self time (% of total)' } },\n      {\n        name: Fields.color,\n        type: FieldType.number,\n        config: { color: { mode: 'continuous-GrYlRd' }, displayName: 'Self time / Trace duration' },\n      },\n    ],\n    meta: {\n      preferredVisualisationType: 'nodeGraph',\n    },\n  });\n\n  const edgesFrame = new MutableDataFrame({\n    fields: [\n      { name: Fields.id, type: FieldType.string },\n      { name: Fields.target, type: FieldType.string },\n      { name: Fields.source, type: FieldType.string },\n    ],\n    meta: {\n      preferredVisualisationType: 'nodeGraph',\n    },\n  });\n\n  return [nodesFrame, edgesFrame];\n}\n","import {\n  DataFrame,\n  DataFrameView,\n  DataQueryResponse,\n  FieldColorModeId,\n  FieldDTO,\n  MutableDataFrame,\n  NodeGraphDataFrameFieldNames as Fields,\n  TimeRange,\n} from '@grafana/data';\n\nimport { getNonOverlappingDuration, getStats, makeFrames, makeSpanMap } from '../../../core/utils/tracing';\n\n/**\n * Row in a trace dataFrame\n */\ninterface Row {\n  traceID: string;\n  spanID: string;\n  parentSpanID: string;\n  operationName: string;\n  serviceName: string;\n  serviceTags: string;\n  startTime: number;\n  duration: number;\n  logs: string;\n  tags: string;\n}\n\ninterface Node {\n  [Fields.id]: string;\n  [Fields.title]: string;\n  [Fields.subTitle]: string;\n  [Fields.mainStat]: string;\n  [Fields.secondaryStat]: string;\n  [Fields.color]: number;\n}\n\ninterface Edge {\n  [Fields.id]: string;\n  [Fields.target]: string;\n  [Fields.source]: string;\n}\n\nexport function createGraphFrames(data: DataFrame): DataFrame[] {\n  const { nodes, edges } = convertTraceToGraph(data);\n  const [nodesFrame, edgesFrame] = makeFrames();\n\n  for (const node of nodes) {\n    nodesFrame.add(node);\n  }\n  for (const edge of edges) {\n    edgesFrame.add(edge);\n  }\n\n  return [nodesFrame, edgesFrame];\n}\n\nfunction convertTraceToGraph(data: DataFrame): { nodes: Node[]; edges: Edge[] } {\n  const nodes: Node[] = [];\n  const edges: Edge[] = [];\n\n  const view = new DataFrameView<Row>(data);\n\n  const traceDuration = findTraceDuration(view);\n  const spanMap = makeSpanMap((index) => {\n    if (index >= data.length) {\n      return undefined;\n    }\n    const span = view.get(index);\n    return {\n      span: { ...span },\n      id: span.spanID,\n      parentIds: span.parentSpanID ? [span.parentSpanID] : [],\n    };\n  });\n\n  for (let i = 0; i < view.length; i++) {\n    const row = view.get(i);\n\n    const ranges: Array<[number, number]> = spanMap[row.spanID].children.map((c) => {\n      const span = spanMap[c].span;\n      return [span.startTime, span.startTime + span.duration];\n    });\n    const childrenDuration = getNonOverlappingDuration(ranges);\n    const selfDuration = row.duration - childrenDuration;\n    const stats = getStats(row.duration, traceDuration, selfDuration);\n\n    nodes.push({\n      [Fields.id]: row.spanID,\n      [Fields.title]: row.serviceName ?? '',\n      [Fields.subTitle]: row.operationName,\n      [Fields.mainStat]: stats.main,\n      [Fields.secondaryStat]: stats.secondary,\n      [Fields.color]: selfDuration / traceDuration,\n    });\n\n    // Sometimes some span can be missing. Don't add edges for those.\n    if (row.parentSpanID && spanMap[row.parentSpanID].span) {\n      edges.push({\n        [Fields.id]: row.parentSpanID + '--' + row.spanID,\n        [Fields.target]: row.spanID,\n        [Fields.source]: row.parentSpanID,\n      });\n    }\n  }\n\n  return { nodes, edges };\n}\n\n/**\n * Get the duration of the whole trace as it isn't a part of the response data.\n * Note: Seems like this should be the same as just longest span, but this is probably safer.\n */\nfunction findTraceDuration(view: DataFrameView<Row>): number {\n  let traceEndTime = 0;\n  let traceStartTime = Infinity;\n\n  for (let i = 0; i < view.length; i++) {\n    const row = view.get(i);\n\n    if (row.startTime < traceStartTime) {\n      traceStartTime = row.startTime;\n    }\n\n    if (row.startTime + row.duration > traceEndTime) {\n      traceEndTime = row.startTime + row.duration;\n    }\n  }\n\n  return traceEndTime - traceStartTime;\n}\n\nexport const secondsMetric = 'traces_service_graph_request_server_seconds_sum';\nexport const totalsMetric = 'traces_service_graph_request_total';\nexport const failedMetric = 'traces_service_graph_request_failed_total';\nexport const histogramMetric = 'traces_service_graph_request_server_seconds_bucket';\n\nexport const rateMetric = {\n  expr: 'topk(5, sum(rate(traces_spanmetrics_calls_total{}[$__range])) by (span_name))',\n  params: [],\n};\nexport const errorRateMetric = {\n  expr: 'topk(5, sum(rate(traces_spanmetrics_calls_total{}[$__range])) by (span_name))',\n  params: ['status_code=\"STATUS_CODE_ERROR\"'],\n};\nexport const durationMetric = {\n  expr: 'histogram_quantile(.9, sum(rate(traces_spanmetrics_latency_bucket{}[$__range])) by (le))',\n  params: [],\n};\nexport const defaultTableFilter = 'span_kind=\"SPAN_KIND_SERVER\"';\n\nexport const serviceMapMetrics = [\n  secondsMetric,\n  totalsMetric,\n  failedMetric,\n  histogramMetric,\n  // These are used for debugging the tempo collection so probably not useful for service map right now.\n  // 'traces_service_graph_unpaired_spans_total',\n  // 'traces_service_graph_untagged_spans_total',\n];\n\n/**\n * Map response from multiple prometheus metrics into a node graph data frames with nodes and edges.\n * @param responses\n * @param range\n */\nexport function mapPromMetricsToServiceMap(\n  responses: DataQueryResponse[],\n  range: TimeRange\n): { nodes: DataFrame; edges: DataFrame } {\n  const frames = getMetricFrames(responses);\n\n  // First just collect data from the metrics into a map with nodes and edges as keys\n  const nodesMap: Record<string, ServiceMapStatistics> = {};\n  const edgesMap: Record<string, EdgeObject> = {};\n  // At this moment we don't have any error/success or other counts so we just use these 2\n  collectMetricData(frames[totalsMetric], 'total', totalsMetric, nodesMap, edgesMap);\n  collectMetricData(frames[secondsMetric], 'seconds', secondsMetric, nodesMap, edgesMap);\n  collectMetricData(frames[failedMetric], 'failed', failedMetric, nodesMap, edgesMap);\n\n  return convertToDataFrames(nodesMap, edgesMap, range);\n}\n\nfunction createServiceMapDataFrames() {\n  function createDF(name: string, fields: FieldDTO[]) {\n    return new MutableDataFrame({ name, fields, meta: { preferredVisualisationType: 'nodeGraph' } });\n  }\n\n  const nodes = createDF('Nodes', [\n    { name: Fields.id },\n    { name: Fields.title, config: { displayName: 'Service name' } },\n    { name: Fields.mainStat, config: { unit: 'ms/r', displayName: 'Average response time' } },\n    {\n      name: Fields.secondaryStat,\n      config: { unit: 'r/sec', displayName: 'Requests per second' },\n    },\n    {\n      name: Fields.arc + 'success',\n      config: { displayName: 'Success', color: { fixedColor: 'green', mode: FieldColorModeId.Fixed } },\n    },\n    {\n      name: Fields.arc + 'failed',\n      config: { displayName: 'Failed', color: { fixedColor: 'red', mode: FieldColorModeId.Fixed } },\n    },\n  ]);\n  const edges = createDF('Edges', [\n    { name: Fields.id },\n    { name: Fields.source },\n    { name: Fields.target },\n    { name: Fields.mainStat, config: { unit: 'ms/r', displayName: 'Average response time' } },\n    { name: Fields.secondaryStat, config: { unit: 'r/sec', displayName: 'Requests per second' } },\n  ]);\n\n  return [nodes, edges];\n}\n\n/**\n * Group frames from response based on ref id which is set the same as the metric name so we know which metric is where\n * and also put it into DataFrameView so it's easier to work with.\n * @param responses\n */\nfunction getMetricFrames(responses: DataQueryResponse[]): Record<string, DataFrameView> {\n  return responses[0].data.reduce<Record<string, DataFrameView>>((acc, frame) => {\n    acc[frame.refId] = new DataFrameView(frame);\n    return acc;\n  }, {});\n}\n\ntype ServiceMapStatistics = {\n  total?: number;\n  seconds?: number;\n  failed?: number;\n};\n\ntype EdgeObject = ServiceMapStatistics & {\n  source: string;\n  target: string;\n};\n\n/**\n * Collect data from a metric into a map of nodes and edges. The metric data is modeled as counts of metric per edge\n * which is a pair of client-server nodes. This means we convert each row of the metric 1-1 to edges and than we assign\n * the metric also to server. We count the stats for server only as we show requests/transactions that particular node\n * processed not those which it generated and other stats like average transaction time then stem from that.\n * @param frame\n * @param stat\n * @param metric\n * @param nodesMap\n * @param edgesMap\n */\nfunction collectMetricData(\n  frame: DataFrameView | undefined,\n  stat: keyof ServiceMapStatistics,\n  metric: string,\n  nodesMap: Record<string, ServiceMapStatistics>,\n  edgesMap: Record<string, EdgeObject>\n) {\n  if (!frame) {\n    return;\n  }\n\n  // The name of the value column is in this format\n  // TODO figure out if it can be changed\n  const valueName = `Value #${metric}`;\n\n  for (let i = 0; i < frame.length; i++) {\n    const row = frame.get(i);\n    const edgeId = `${row.client}_${row.server}`;\n\n    if (!edgesMap[edgeId]) {\n      // Create edge as it does not exist yet\n      edgesMap[edgeId] = {\n        target: row.server,\n        source: row.client,\n        [stat]: row[valueName],\n      };\n    } else {\n      // Add stat to edge\n      // We are adding the values if exists but that should not happen in general as there should be single row for\n      // an edge.\n      edgesMap[edgeId][stat] = (edgesMap[edgeId][stat] || 0) + row[valueName];\n    }\n\n    if (!nodesMap[row.server]) {\n      // Create node for server\n      nodesMap[row.server] = {\n        [stat]: row[valueName],\n      };\n    } else {\n      // Add stat to server node. Sum up values if there are multiple edges targeting this server node.\n      nodesMap[row.server][stat] = (nodesMap[row.server][stat] || 0) + row[valueName];\n    }\n\n    if (!nodesMap[row.client]) {\n      // Create the client node but don't add the stat as edge stats are attributed to the server node. This means for\n      // example that the number of requests in a node show how many requests it handled not how many it generated.\n      nodesMap[row.client] = {\n        [stat]: 0,\n      };\n    }\n  }\n}\n\nfunction convertToDataFrames(\n  nodesMap: Record<string, ServiceMapStatistics>,\n  edgesMap: Record<string, EdgeObject>,\n  range: TimeRange\n): { nodes: DataFrame; edges: DataFrame } {\n  const rangeMs = range.to.valueOf() - range.from.valueOf();\n  const [nodes, edges] = createServiceMapDataFrames();\n  for (const nodeId of Object.keys(nodesMap)) {\n    const node = nodesMap[nodeId];\n    nodes.add({\n      [Fields.id]: nodeId,\n      [Fields.title]: nodeId,\n      // NaN will not be shown in the node graph. This happens for a root client node which did not process\n      // any requests itself.\n      [Fields.mainStat]: node.total ? (node.seconds! / node.total) * 1000 : Number.NaN, // Average response time\n      [Fields.secondaryStat]: node.total ? Math.round((node.total / (rangeMs / 1000)) * 100) / 100 : Number.NaN, // Request per second (to 2 decimals)\n      [Fields.arc + 'success']: node.total ? (node.total - Math.min(node.failed || 0, node.total)) / node.total : 1,\n      [Fields.arc + 'failed']: node.total ? Math.min(node.failed || 0, node.total) / node.total : 0,\n    });\n  }\n  for (const edgeId of Object.keys(edgesMap)) {\n    const edge = edgesMap[edgeId];\n    edges.add({\n      [Fields.id]: edgeId,\n      [Fields.source]: edge.source,\n      [Fields.target]: edge.target,\n      [Fields.mainStat]: edge.total ? (edge.seconds! / edge.total) * 1000 : Number.NaN, // Average response time\n      [Fields.secondaryStat]: edge.total ? Math.round((edge.total / (rangeMs / 1000)) * 100) / 100 : Number.NaN, // Request per second (to 2 decimals)\n    });\n  }\n\n  return { nodes, edges };\n}\n","/**\n * An enumeration of status codes.\n */\nexport var SpanStatusCode;\n(function (SpanStatusCode) {\n    /**\n     * The default status.\n     */\n    SpanStatusCode[SpanStatusCode[\"UNSET\"] = 0] = \"UNSET\";\n    /**\n     * The operation has been validated by an Application developer or\n     * Operator to have completed successfully.\n     */\n    SpanStatusCode[SpanStatusCode[\"OK\"] = 1] = \"OK\";\n    /**\n     * The operation contains an error.\n     */\n    SpanStatusCode[SpanStatusCode[\"ERROR\"] = 2] = \"ERROR\";\n})(SpanStatusCode || (SpanStatusCode = {}));\n//# sourceMappingURL=status.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2\nexport var SemanticResourceAttributes = {\n    /**\n     * Name of the cloud provider.\n     */\n    CLOUD_PROVIDER: 'cloud.provider',\n    /**\n     * The cloud account ID the resource is assigned to.\n     */\n    CLOUD_ACCOUNT_ID: 'cloud.account.id',\n    /**\n     * The geographical region the resource is running. Refer to your provider&#39;s docs to see the available regions, for example [Alibaba Cloud regions](https://www.alibabacloud.com/help/doc-detail/40654.htm), [AWS regions](https://aws.amazon.com/about-aws/global-infrastructure/regions_az/), [Azure regions](https://azure.microsoft.com/en-us/global-infrastructure/geographies/), or [Google Cloud regions](https://cloud.google.com/about/locations).\n     */\n    CLOUD_REGION: 'cloud.region',\n    /**\n     * Cloud regions often have multiple, isolated locations known as zones to increase availability. Availability zone represents the zone where the resource is running.\n     *\n     * Note: Availability zones are called &#34;zones&#34; on Alibaba Cloud and Google Cloud.\n     */\n    CLOUD_AVAILABILITY_ZONE: 'cloud.availability_zone',\n    /**\n     * The cloud platform in use.\n     *\n     * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n     */\n    CLOUD_PLATFORM: 'cloud.platform',\n    /**\n     * The Amazon Resource Name (ARN) of an [ECS container instance](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_instances.html).\n     */\n    AWS_ECS_CONTAINER_ARN: 'aws.ecs.container.arn',\n    /**\n     * The ARN of an [ECS cluster](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/clusters.html).\n     */\n    AWS_ECS_CLUSTER_ARN: 'aws.ecs.cluster.arn',\n    /**\n     * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n     */\n    AWS_ECS_LAUNCHTYPE: 'aws.ecs.launchtype',\n    /**\n     * The ARN of an [ECS task definition](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definitions.html).\n     */\n    AWS_ECS_TASK_ARN: 'aws.ecs.task.arn',\n    /**\n     * The task definition family this task definition is a member of.\n     */\n    AWS_ECS_TASK_FAMILY: 'aws.ecs.task.family',\n    /**\n     * The revision for this task definition.\n     */\n    AWS_ECS_TASK_REVISION: 'aws.ecs.task.revision',\n    /**\n     * The ARN of an EKS cluster.\n     */\n    AWS_EKS_CLUSTER_ARN: 'aws.eks.cluster.arn',\n    /**\n     * The name(s) of the AWS log group(s) an application is writing to.\n     *\n     * Note: Multiple log groups must be supported for cases like multi-container applications, where a single application has sidecar containers, and each write to their own log group.\n     */\n    AWS_LOG_GROUP_NAMES: 'aws.log.group.names',\n    /**\n     * The Amazon Resource Name(s) (ARN) of the AWS log group(s).\n     *\n     * Note: See the [log group ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format).\n     */\n    AWS_LOG_GROUP_ARNS: 'aws.log.group.arns',\n    /**\n     * The name(s) of the AWS log stream(s) an application is writing to.\n     */\n    AWS_LOG_STREAM_NAMES: 'aws.log.stream.names',\n    /**\n     * The ARN(s) of the AWS log stream(s).\n     *\n     * Note: See the [log stream ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format). One log group can contain several log streams, so these ARNs necessarily identify both a log group and a log stream.\n     */\n    AWS_LOG_STREAM_ARNS: 'aws.log.stream.arns',\n    /**\n     * Container name.\n     */\n    CONTAINER_NAME: 'container.name',\n    /**\n     * Container ID. Usually a UUID, as for example used to [identify Docker containers](https://docs.docker.com/engine/reference/run/#container-identification). The UUID might be abbreviated.\n     */\n    CONTAINER_ID: 'container.id',\n    /**\n     * The container runtime managing this container.\n     */\n    CONTAINER_RUNTIME: 'container.runtime',\n    /**\n     * Name of the image the container was built on.\n     */\n    CONTAINER_IMAGE_NAME: 'container.image.name',\n    /**\n     * Container image tag.\n     */\n    CONTAINER_IMAGE_TAG: 'container.image.tag',\n    /**\n     * Name of the [deployment environment](https://en.wikipedia.org/wiki/Deployment_environment) (aka deployment tier).\n     */\n    DEPLOYMENT_ENVIRONMENT: 'deployment.environment',\n    /**\n     * A unique identifier representing the device.\n     *\n     * Note: The device identifier MUST only be defined using the values outlined below. This value is not an advertising identifier and MUST NOT be used as such. On iOS (Swift or Objective-C), this value MUST be equal to the [vendor identifier](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor). On Android (Java or Kotlin), this value MUST be equal to the Firebase Installation ID or a globally unique UUID which is persisted across sessions in your application. More information can be found [here](https://developer.android.com/training/articles/user-data-ids) on best practices and exact implementation details. Caution should be taken when storing personal data or anything which can identify a user. GDPR and data protection laws may apply, ensure you do your own due diligence.\n     */\n    DEVICE_ID: 'device.id',\n    /**\n     * The model identifier for the device.\n     *\n     * Note: It&#39;s recommended this value represents a machine readable version of the model identifier rather than the market or consumer-friendly name of the device.\n     */\n    DEVICE_MODEL_IDENTIFIER: 'device.model.identifier',\n    /**\n     * The marketing name for the device model.\n     *\n     * Note: It&#39;s recommended this value represents a human readable version of the device model rather than a machine readable alternative.\n     */\n    DEVICE_MODEL_NAME: 'device.model.name',\n    /**\n     * The name of the single function that this runtime instance executes.\n     *\n     * Note: This is the name of the function as configured/deployed on the FaaS platform and is usually different from the name of the callback function (which may be stored in the [`code.namespace`/`code.function`](../../trace/semantic_conventions/span-general.md#source-code-attributes) span attributes).\n     */\n    FAAS_NAME: 'faas.name',\n    /**\n    * The unique ID of the single function that this runtime instance executes.\n    *\n    * Note: Depending on the cloud provider, use:\n  \n  * **AWS Lambda:** The function [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).\n  Take care not to use the &#34;invoked ARN&#34; directly but replace any\n  [alias suffix](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html) with the resolved function version, as the same runtime instance may be invokable with multiple\n  different aliases.\n  * **GCP:** The [URI of the resource](https://cloud.google.com/iam/docs/full-resource-names)\n  * **Azure:** The [Fully Qualified Resource ID](https://docs.microsoft.com/en-us/rest/api/resources/resources/get-by-id).\n  \n  On some providers, it may not be possible to determine the full ID at startup,\n  which is why this field cannot be made required. For example, on AWS the account ID\n  part of the ARN is not available without calling another AWS API\n  which may be deemed too slow for a short-running lambda function.\n  As an alternative, consider setting `faas.id` as a span attribute instead.\n    */\n    FAAS_ID: 'faas.id',\n    /**\n    * The immutable version of the function being executed.\n    *\n    * Note: Depending on the cloud provider and platform, use:\n  \n  * **AWS Lambda:** The [function version](https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html)\n    (an integer represented as a decimal string).\n  * **Google Cloud Run:** The [revision](https://cloud.google.com/run/docs/managing/revisions)\n    (i.e., the function name plus the revision suffix).\n  * **Google Cloud Functions:** The value of the\n    [`K_REVISION` environment variable](https://cloud.google.com/functions/docs/env-var#runtime_environment_variables_set_automatically).\n  * **Azure Functions:** Not applicable. Do not set this attribute.\n    */\n    FAAS_VERSION: 'faas.version',\n    /**\n     * The execution environment ID as a string, that will be potentially reused for other invocations to the same function/function version.\n     *\n     * Note: * **AWS Lambda:** Use the (full) log stream name.\n     */\n    FAAS_INSTANCE: 'faas.instance',\n    /**\n     * The amount of memory available to the serverless function in MiB.\n     *\n     * Note: It&#39;s recommended to set this attribute since e.g. too little memory can easily stop a Java AWS Lambda function from working correctly. On AWS Lambda, the environment variable `AWS_LAMBDA_FUNCTION_MEMORY_SIZE` provides this information.\n     */\n    FAAS_MAX_MEMORY: 'faas.max_memory',\n    /**\n     * Unique host ID. For Cloud, this must be the instance_id assigned by the cloud provider.\n     */\n    HOST_ID: 'host.id',\n    /**\n     * Name of the host. On Unix systems, it may contain what the hostname command returns, or the fully qualified hostname, or another name specified by the user.\n     */\n    HOST_NAME: 'host.name',\n    /**\n     * Type of host. For Cloud, this must be the machine type.\n     */\n    HOST_TYPE: 'host.type',\n    /**\n     * The CPU architecture the host system is running on.\n     */\n    HOST_ARCH: 'host.arch',\n    /**\n     * Name of the VM image or OS install the host was instantiated from.\n     */\n    HOST_IMAGE_NAME: 'host.image.name',\n    /**\n     * VM image ID. For Cloud, this value is from the provider.\n     */\n    HOST_IMAGE_ID: 'host.image.id',\n    /**\n     * The version string of the VM image as defined in [Version SpanAttributes](README.md#version-attributes).\n     */\n    HOST_IMAGE_VERSION: 'host.image.version',\n    /**\n     * The name of the cluster.\n     */\n    K8S_CLUSTER_NAME: 'k8s.cluster.name',\n    /**\n     * The name of the Node.\n     */\n    K8S_NODE_NAME: 'k8s.node.name',\n    /**\n     * The UID of the Node.\n     */\n    K8S_NODE_UID: 'k8s.node.uid',\n    /**\n     * The name of the namespace that the pod is running in.\n     */\n    K8S_NAMESPACE_NAME: 'k8s.namespace.name',\n    /**\n     * The UID of the Pod.\n     */\n    K8S_POD_UID: 'k8s.pod.uid',\n    /**\n     * The name of the Pod.\n     */\n    K8S_POD_NAME: 'k8s.pod.name',\n    /**\n     * The name of the Container in a Pod template.\n     */\n    K8S_CONTAINER_NAME: 'k8s.container.name',\n    /**\n     * The UID of the ReplicaSet.\n     */\n    K8S_REPLICASET_UID: 'k8s.replicaset.uid',\n    /**\n     * The name of the ReplicaSet.\n     */\n    K8S_REPLICASET_NAME: 'k8s.replicaset.name',\n    /**\n     * The UID of the Deployment.\n     */\n    K8S_DEPLOYMENT_UID: 'k8s.deployment.uid',\n    /**\n     * The name of the Deployment.\n     */\n    K8S_DEPLOYMENT_NAME: 'k8s.deployment.name',\n    /**\n     * The UID of the StatefulSet.\n     */\n    K8S_STATEFULSET_UID: 'k8s.statefulset.uid',\n    /**\n     * The name of the StatefulSet.\n     */\n    K8S_STATEFULSET_NAME: 'k8s.statefulset.name',\n    /**\n     * The UID of the DaemonSet.\n     */\n    K8S_DAEMONSET_UID: 'k8s.daemonset.uid',\n    /**\n     * The name of the DaemonSet.\n     */\n    K8S_DAEMONSET_NAME: 'k8s.daemonset.name',\n    /**\n     * The UID of the Job.\n     */\n    K8S_JOB_UID: 'k8s.job.uid',\n    /**\n     * The name of the Job.\n     */\n    K8S_JOB_NAME: 'k8s.job.name',\n    /**\n     * The UID of the CronJob.\n     */\n    K8S_CRONJOB_UID: 'k8s.cronjob.uid',\n    /**\n     * The name of the CronJob.\n     */\n    K8S_CRONJOB_NAME: 'k8s.cronjob.name',\n    /**\n     * The operating system type.\n     */\n    OS_TYPE: 'os.type',\n    /**\n     * Human readable (not intended to be parsed) OS version information, like e.g. reported by `ver` or `lsb_release -a` commands.\n     */\n    OS_DESCRIPTION: 'os.description',\n    /**\n     * Human readable operating system name.\n     */\n    OS_NAME: 'os.name',\n    /**\n     * The version string of the operating system as defined in [Version SpanAttributes](../../resource/semantic_conventions/README.md#version-attributes).\n     */\n    OS_VERSION: 'os.version',\n    /**\n     * Process identifier (PID).\n     */\n    PROCESS_PID: 'process.pid',\n    /**\n     * The name of the process executable. On Linux based systems, can be set to the `Name` in `proc/[pid]/status`. On Windows, can be set to the base name of `GetProcessImageFileNameW`.\n     */\n    PROCESS_EXECUTABLE_NAME: 'process.executable.name',\n    /**\n     * The full path to the process executable. On Linux based systems, can be set to the target of `proc/[pid]/exe`. On Windows, can be set to the result of `GetProcessImageFileNameW`.\n     */\n    PROCESS_EXECUTABLE_PATH: 'process.executable.path',\n    /**\n     * The command used to launch the process (i.e. the command name). On Linux based systems, can be set to the zeroth string in `proc/[pid]/cmdline`. On Windows, can be set to the first parameter extracted from `GetCommandLineW`.\n     */\n    PROCESS_COMMAND: 'process.command',\n    /**\n     * The full command used to launch the process as a single string representing the full command. On Windows, can be set to the result of `GetCommandLineW`. Do not set this if you have to assemble it just for monitoring; use `process.command_args` instead.\n     */\n    PROCESS_COMMAND_LINE: 'process.command_line',\n    /**\n     * All the command arguments (including the command/executable itself) as received by the process. On Linux-based systems (and some other Unixoid systems supporting procfs), can be set according to the list of null-delimited strings extracted from `proc/[pid]/cmdline`. For libc-based executables, this would be the full argv vector passed to `main`.\n     */\n    PROCESS_COMMAND_ARGS: 'process.command_args',\n    /**\n     * The username of the user that owns the process.\n     */\n    PROCESS_OWNER: 'process.owner',\n    /**\n     * The name of the runtime of this process. For compiled native binaries, this SHOULD be the name of the compiler.\n     */\n    PROCESS_RUNTIME_NAME: 'process.runtime.name',\n    /**\n     * The version of the runtime of this process, as returned by the runtime without modification.\n     */\n    PROCESS_RUNTIME_VERSION: 'process.runtime.version',\n    /**\n     * An additional description about the runtime of the process, for example a specific vendor customization of the runtime environment.\n     */\n    PROCESS_RUNTIME_DESCRIPTION: 'process.runtime.description',\n    /**\n     * Logical name of the service.\n     *\n     * Note: MUST be the same for all instances of horizontally scaled services. If the value was not specified, SDKs MUST fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md#process), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value MUST be set to `unknown_service`.\n     */\n    SERVICE_NAME: 'service.name',\n    /**\n     * A namespace for `service.name`.\n     *\n     * Note: A string value having a meaning that helps to distinguish a group of services, for example the team name that owns a group of services. `service.name` is expected to be unique within the same namespace. If `service.namespace` is not specified in the Resource then `service.name` is expected to be unique for all services that have no explicit namespace defined (so the empty/unspecified namespace is simply one more valid namespace). Zero-length namespace string is assumed equal to unspecified namespace.\n     */\n    SERVICE_NAMESPACE: 'service.namespace',\n    /**\n     * The string ID of the service instance.\n     *\n     * Note: MUST be unique for each instance of the same `service.namespace,service.name` pair (in other words `service.namespace,service.name,service.instance.id` triplet MUST be globally unique). The ID helps to distinguish instances of the same service that exist at the same time (e.g. instances of a horizontally scaled service). It is preferable for the ID to be persistent and stay the same for the lifetime of the service instance, however it is acceptable that the ID is ephemeral and changes during important lifetime events for the service (e.g. service restarts). If the service has no inherent unique ID that can be used as the value of this attribute it is recommended to generate a random Version 1 or Version 4 RFC 4122 UUID (services aiming for reproducible UUIDs may also use Version 5, see RFC 4122 for more recommendations).\n     */\n    SERVICE_INSTANCE_ID: 'service.instance.id',\n    /**\n     * The version string of the service API or implementation.\n     */\n    SERVICE_VERSION: 'service.version',\n    /**\n     * The name of the telemetry SDK as defined above.\n     */\n    TELEMETRY_SDK_NAME: 'telemetry.sdk.name',\n    /**\n     * The language of the telemetry SDK.\n     */\n    TELEMETRY_SDK_LANGUAGE: 'telemetry.sdk.language',\n    /**\n     * The version string of the telemetry SDK.\n     */\n    TELEMETRY_SDK_VERSION: 'telemetry.sdk.version',\n    /**\n     * The version string of the auto instrumentation agent, if used.\n     */\n    TELEMETRY_AUTO_VERSION: 'telemetry.auto.version',\n    /**\n     * The name of the web engine.\n     */\n    WEBENGINE_NAME: 'webengine.name',\n    /**\n     * The version of the web engine.\n     */\n    WEBENGINE_VERSION: 'webengine.version',\n    /**\n     * Additional description of the web engine (e.g. detailed version and edition information).\n     */\n    WEBENGINE_DESCRIPTION: 'webengine.description',\n};\nexport var CloudProviderValues = {\n    /** Alibaba Cloud. */\n    ALIBABA_CLOUD: 'alibaba_cloud',\n    /** Amazon Web Services. */\n    AWS: 'aws',\n    /** Microsoft Azure. */\n    AZURE: 'azure',\n    /** Google Cloud Platform. */\n    GCP: 'gcp',\n};\nexport var CloudPlatformValues = {\n    /** Alibaba Cloud Elastic Compute Service. */\n    ALIBABA_CLOUD_ECS: 'alibaba_cloud_ecs',\n    /** Alibaba Cloud Function Compute. */\n    ALIBABA_CLOUD_FC: 'alibaba_cloud_fc',\n    /** AWS Elastic Compute Cloud. */\n    AWS_EC2: 'aws_ec2',\n    /** AWS Elastic Container Service. */\n    AWS_ECS: 'aws_ecs',\n    /** AWS Elastic Kubernetes Service. */\n    AWS_EKS: 'aws_eks',\n    /** AWS Lambda. */\n    AWS_LAMBDA: 'aws_lambda',\n    /** AWS Elastic Beanstalk. */\n    AWS_ELASTIC_BEANSTALK: 'aws_elastic_beanstalk',\n    /** Azure Virtual Machines. */\n    AZURE_VM: 'azure_vm',\n    /** Azure Container Instances. */\n    AZURE_CONTAINER_INSTANCES: 'azure_container_instances',\n    /** Azure Kubernetes Service. */\n    AZURE_AKS: 'azure_aks',\n    /** Azure Functions. */\n    AZURE_FUNCTIONS: 'azure_functions',\n    /** Azure App Service. */\n    AZURE_APP_SERVICE: 'azure_app_service',\n    /** Google Cloud Compute Engine (GCE). */\n    GCP_COMPUTE_ENGINE: 'gcp_compute_engine',\n    /** Google Cloud Run. */\n    GCP_CLOUD_RUN: 'gcp_cloud_run',\n    /** Google Cloud Kubernetes Engine (GKE). */\n    GCP_KUBERNETES_ENGINE: 'gcp_kubernetes_engine',\n    /** Google Cloud Functions (GCF). */\n    GCP_CLOUD_FUNCTIONS: 'gcp_cloud_functions',\n    /** Google Cloud App Engine (GAE). */\n    GCP_APP_ENGINE: 'gcp_app_engine',\n};\nexport var AwsEcsLaunchtypeValues = {\n    /** ec2. */\n    EC2: 'ec2',\n    /** fargate. */\n    FARGATE: 'fargate',\n};\nexport var HostArchValues = {\n    /** AMD64. */\n    AMD64: 'amd64',\n    /** ARM32. */\n    ARM32: 'arm32',\n    /** ARM64. */\n    ARM64: 'arm64',\n    /** Itanium. */\n    IA64: 'ia64',\n    /** 32-bit PowerPC. */\n    PPC32: 'ppc32',\n    /** 64-bit PowerPC. */\n    PPC64: 'ppc64',\n    /** 32-bit x86. */\n    X86: 'x86',\n};\nexport var OsTypeValues = {\n    /** Microsoft Windows. */\n    WINDOWS: 'windows',\n    /** Linux. */\n    LINUX: 'linux',\n    /** Apple Darwin. */\n    DARWIN: 'darwin',\n    /** FreeBSD. */\n    FREEBSD: 'freebsd',\n    /** NetBSD. */\n    NETBSD: 'netbsd',\n    /** OpenBSD. */\n    OPENBSD: 'openbsd',\n    /** DragonFly BSD. */\n    DRAGONFLYBSD: 'dragonflybsd',\n    /** HP-UX (Hewlett Packard Unix). */\n    HPUX: 'hpux',\n    /** AIX (Advanced Interactive eXecutive). */\n    AIX: 'aix',\n    /** Oracle Solaris. */\n    SOLARIS: 'solaris',\n    /** IBM z/OS. */\n    Z_OS: 'z_os',\n};\nexport var TelemetrySdkLanguageValues = {\n    /** cpp. */\n    CPP: 'cpp',\n    /** dotnet. */\n    DOTNET: 'dotnet',\n    /** erlang. */\n    ERLANG: 'erlang',\n    /** go. */\n    GO: 'go',\n    /** java. */\n    JAVA: 'java',\n    /** nodejs. */\n    NODEJS: 'nodejs',\n    /** php. */\n    PHP: 'php',\n    /** python. */\n    PYTHON: 'python',\n    /** ruby. */\n    RUBY: 'ruby',\n    /** webjs. */\n    WEBJS: 'webjs',\n};\n//# sourceMappingURL=SemanticResourceAttributes.js.map","import { SpanStatus, SpanStatusCode } from '@opentelemetry/api';\nimport { collectorTypes } from '@opentelemetry/exporter-collector';\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\n\nimport {\n  DataFrame,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  FieldType,\n  MutableDataFrame,\n  TraceKeyValuePair,\n  TraceLog,\n  TraceSpanReference,\n  TraceSpanRow,\n  dateTimeFormat,\n  FieldDTO,\n} from '@grafana/data';\n\nimport { createGraphFrames } from './graphTransform';\nimport { Span, TraceSearchMetadata } from './types';\n\nexport function createTableFrame(\n  logsFrame: DataFrame,\n  datasourceUid: string,\n  datasourceName: string,\n  traceRegexs: string[]\n): DataFrame {\n  const tableFrame = new MutableDataFrame({\n    fields: [\n      {\n        name: 'Time',\n        type: FieldType.time,\n        config: {\n          custom: {\n            width: 200,\n          },\n        },\n      },\n      {\n        name: 'traceID',\n        type: FieldType.string,\n        config: {\n          displayNameFromDS: 'Trace ID',\n          custom: { width: 180 },\n          links: [\n            {\n              title: 'Click to open trace ${__value.raw}',\n              url: '',\n              internal: {\n                datasourceUid,\n                datasourceName,\n                query: {\n                  query: '${__value.raw}',\n                },\n              },\n            },\n          ],\n        },\n      },\n      {\n        name: 'Message',\n        type: FieldType.string,\n      },\n    ],\n    meta: {\n      preferredVisualisationType: 'table',\n    },\n  });\n\n  if (!logsFrame || traceRegexs.length === 0) {\n    return tableFrame;\n  }\n\n  const timeField = logsFrame.fields.find((f) => f.type === FieldType.time);\n\n  // Going through all string fields to look for trace IDs\n  for (let field of logsFrame.fields) {\n    let hasMatch = false;\n    if (field.type === FieldType.string) {\n      const values = field.values.toArray();\n      for (let i = 0; i < values.length; i++) {\n        const line = values[i];\n        if (line) {\n          for (let traceRegex of traceRegexs) {\n            const match = (line as string).match(traceRegex);\n            if (match) {\n              const traceId = match[1];\n              const time = timeField ? timeField.values.get(i) : null;\n              tableFrame.fields[0].values.add(time);\n              tableFrame.fields[1].values.add(traceId);\n              tableFrame.fields[2].values.add(line);\n              hasMatch = true;\n            }\n          }\n        }\n      }\n    }\n    if (hasMatch) {\n      break;\n    }\n  }\n\n  return tableFrame;\n}\n\nexport function transformTraceList(\n  response: DataQueryResponse,\n  datasourceId: string,\n  datasourceName: string,\n  traceRegexs: string[]\n): DataQueryResponse {\n  response.data.forEach((data, index) => {\n    const frame = createTableFrame(data, datasourceId, datasourceName, traceRegexs);\n    response.data[index] = frame;\n  });\n  return response;\n}\n\n// Don't forget to change the backend code when the id representation changed\nfunction transformBase64IDToHexString(base64: string) {\n  const raw = atob(base64);\n  let result = '';\n  for (let i = 0; i < raw.length; i++) {\n    const hex = raw.charCodeAt(i).toString(16);\n    result += hex.length === 2 ? hex : '0' + hex;\n  }\n\n  return result.length > 16 ? result.slice(16) : result;\n}\n\nfunction transformHexStringToBase64ID(hex: string) {\n  const hexArray = hex.match(/\\w{2}/g) || [];\n  return btoa(\n    hexArray\n      .map(function (a) {\n        return String.fromCharCode(parseInt(a, 16));\n      })\n      .join('')\n  );\n}\n\nfunction getAttributeValue(value: collectorTypes.opentelemetryProto.common.v1.AnyValue): any {\n  if (value.stringValue) {\n    return value.stringValue;\n  }\n\n  if (value.boolValue !== undefined) {\n    return Boolean(value.boolValue);\n  }\n\n  if (value.intValue !== undefined) {\n    return Number.parseInt(value.intValue as any, 10);\n  }\n\n  if (value.doubleValue) {\n    return Number.parseFloat(value.doubleValue as any);\n  }\n\n  if (value.arrayValue) {\n    const arrayValue = [];\n    for (const arValue of value.arrayValue.values) {\n      arrayValue.push(getAttributeValue(arValue));\n    }\n    return arrayValue;\n  }\n\n  return '';\n}\n\nfunction resourceToProcess(resource: collectorTypes.opentelemetryProto.resource.v1.Resource | undefined) {\n  const serviceTags: TraceKeyValuePair[] = [];\n  let serviceName = 'OTLPResourceNoServiceName';\n  if (!resource) {\n    return { serviceName, serviceTags };\n  }\n\n  for (const attribute of resource.attributes) {\n    if (attribute.key === SemanticResourceAttributes.SERVICE_NAME) {\n      serviceName = attribute.value.stringValue || serviceName;\n    }\n    serviceTags.push({ key: attribute.key, value: getAttributeValue(attribute.value) });\n  }\n\n  return { serviceName, serviceTags };\n}\n\nfunction getSpanTags(\n  span: collectorTypes.opentelemetryProto.trace.v1.Span,\n  instrumentationLibrary?: collectorTypes.opentelemetryProto.common.v1.InstrumentationLibrary\n): TraceKeyValuePair[] {\n  const spanTags: TraceKeyValuePair[] = [];\n\n  if (instrumentationLibrary) {\n    if (instrumentationLibrary.name) {\n      spanTags.push({ key: 'otel.library.name', value: instrumentationLibrary.name });\n    }\n    if (instrumentationLibrary.version) {\n      spanTags.push({ key: 'otel.library.version', value: instrumentationLibrary.version });\n    }\n  }\n\n  if (span.attributes) {\n    for (const attribute of span.attributes) {\n      spanTags.push({ key: attribute.key, value: getAttributeValue(attribute.value) });\n    }\n  }\n\n  if (span.status) {\n    if (span.status.code && (span.status.code as any) !== SpanStatusCode.UNSET) {\n      spanTags.push({\n        key: 'otel.status_code',\n        value: SpanStatusCode[span.status.code],\n      });\n      if (span.status.message) {\n        spanTags.push({ key: 'otel.status_description', value: span.status.message });\n      }\n    }\n    if (span.status.code === SpanStatusCode.ERROR) {\n      spanTags.push({ key: 'error', value: true });\n    }\n  }\n\n  if (span.kind !== undefined) {\n    const split = span.kind.toString().toLowerCase().split('_');\n    spanTags.push({\n      key: 'span.kind',\n      value: split.length ? split[split.length - 1] : span.kind.toString(),\n    });\n  }\n\n  return spanTags;\n}\n\nfunction getReferences(span: collectorTypes.opentelemetryProto.trace.v1.Span) {\n  const references: TraceSpanReference[] = [];\n  if (span.links) {\n    for (const link of span.links) {\n      const { traceId, spanId } = link;\n      const tags: TraceKeyValuePair[] = [];\n      if (link.attributes) {\n        for (const attribute of link.attributes) {\n          tags.push({ key: attribute.key, value: getAttributeValue(attribute.value) });\n        }\n      }\n      references.push({ traceID: traceId, spanID: spanId, tags });\n    }\n  }\n\n  return references;\n}\n\nfunction getLogs(span: collectorTypes.opentelemetryProto.trace.v1.Span) {\n  const logs: TraceLog[] = [];\n  if (span.events) {\n    for (const event of span.events) {\n      const fields: TraceKeyValuePair[] = [];\n      if (event.attributes) {\n        for (const attribute of event.attributes) {\n          fields.push({ key: attribute.key, value: getAttributeValue(attribute.value) });\n        }\n      }\n      logs.push({ fields, timestamp: event.timeUnixNano / 1000000 });\n    }\n  }\n\n  return logs;\n}\n\nexport function transformFromOTLP(\n  traceData: collectorTypes.opentelemetryProto.trace.v1.ResourceSpans[],\n  nodeGraph = false\n): DataQueryResponse {\n  const frame = new MutableDataFrame({\n    fields: [\n      { name: 'traceID', type: FieldType.string },\n      { name: 'spanID', type: FieldType.string },\n      { name: 'parentSpanID', type: FieldType.string },\n      { name: 'operationName', type: FieldType.string },\n      { name: 'serviceName', type: FieldType.string },\n      { name: 'serviceTags', type: FieldType.other },\n      { name: 'startTime', type: FieldType.number },\n      { name: 'duration', type: FieldType.number },\n      { name: 'logs', type: FieldType.other },\n      { name: 'references', type: FieldType.other },\n      { name: 'tags', type: FieldType.other },\n    ],\n    meta: {\n      preferredVisualisationType: 'trace',\n      custom: {\n        traceFormat: 'otlp',\n      },\n    },\n  });\n  try {\n    for (const data of traceData) {\n      const { serviceName, serviceTags } = resourceToProcess(data.resource);\n      for (const librarySpan of data.instrumentationLibrarySpans) {\n        for (const span of librarySpan.spans) {\n          frame.add({\n            traceID: transformBase64IDToHexString(span.traceId),\n            spanID: transformBase64IDToHexString(span.spanId),\n            parentSpanID: transformBase64IDToHexString(span.parentSpanId || ''),\n            operationName: span.name || '',\n            serviceName,\n            serviceTags,\n            startTime: span.startTimeUnixNano! / 1000000,\n            duration: (span.endTimeUnixNano! - span.startTimeUnixNano!) / 1000000,\n            tags: getSpanTags(span, librarySpan.instrumentationLibrary),\n            logs: getLogs(span),\n            references: getReferences(span),\n          } as TraceSpanRow);\n        }\n      }\n    }\n  } catch (error) {\n    console.error(error);\n    return { error: { message: 'JSON is not valid OpenTelemetry format: ' + error }, data: [] };\n  }\n\n  let data = [frame];\n  if (nodeGraph) {\n    data.push(...(createGraphFrames(frame) as MutableDataFrame[]));\n  }\n\n  return { data };\n}\n\n/**\n * Transforms trace dataframes to the OpenTelemetry format\n */\nexport function transformToOTLP(data: MutableDataFrame): {\n  batches: collectorTypes.opentelemetryProto.trace.v1.ResourceSpans[];\n} {\n  let result: { batches: collectorTypes.opentelemetryProto.trace.v1.ResourceSpans[] } = {\n    batches: [],\n  };\n\n  // Lookup object to see which batch contains spans for which services\n  let services: { [key: string]: number } = {};\n\n  for (let i = 0; i < data.length; i++) {\n    const span = data.get(i);\n\n    // Group spans based on service\n    if (!services[span.serviceName]) {\n      services[span.serviceName] = result.batches.length;\n      result.batches.push({\n        resource: {\n          attributes: [],\n          droppedAttributesCount: 0,\n        },\n        instrumentationLibrarySpans: [\n          {\n            spans: [],\n          },\n        ],\n      });\n    }\n\n    let batchIndex = services[span.serviceName];\n\n    // Populate resource attributes from service tags\n    if (result.batches[batchIndex].resource!.attributes.length === 0) {\n      result.batches[batchIndex].resource!.attributes = tagsToAttributes(span.serviceTags);\n    }\n\n    // Populate instrumentation library if it exists\n    if (!result.batches[batchIndex].instrumentationLibrarySpans[0].instrumentationLibrary) {\n      let libraryName = span.tags.find((t: TraceKeyValuePair) => t.key === 'otel.library.name')?.value;\n      if (libraryName) {\n        result.batches[batchIndex].instrumentationLibrarySpans[0].instrumentationLibrary = {\n          name: libraryName,\n          version: span.tags.find((t: TraceKeyValuePair) => t.key === 'otel.library.version')?.value,\n        };\n      }\n    }\n\n    result.batches[batchIndex].instrumentationLibrarySpans[0].spans.push({\n      traceId: transformHexStringToBase64ID(span.traceID.padStart(32, '0')),\n      spanId: transformHexStringToBase64ID(span.spanID),\n      traceState: '',\n      parentSpanId: transformHexStringToBase64ID(span.parentSpanID || ''),\n      name: span.operationName,\n      kind: getOTLPSpanKind(span.tags) as any,\n      startTimeUnixNano: span.startTime * 1000000,\n      endTimeUnixNano: (span.startTime + span.duration) * 1000000,\n      attributes: tagsToAttributes(span.tags),\n      droppedAttributesCount: 0,\n      droppedEventsCount: 0,\n      droppedLinksCount: 0,\n      status: getOTLPStatus(span.tags),\n      events: getOTLPEvents(span.logs),\n      links: getOTLPReferences(span.references),\n    });\n  }\n\n  return result;\n}\n\nfunction getOTLPSpanKind(tags: TraceKeyValuePair[]): string | undefined {\n  let spanKind = undefined;\n  const spanKindTagValue = tags.find((t) => t.key === 'span.kind')?.value;\n  switch (spanKindTagValue) {\n    case 'server':\n      spanKind = 'SPAN_KIND_SERVER';\n      break;\n    case 'client':\n      spanKind = 'SPAN_KIND_CLIENT';\n      break;\n    case 'producer':\n      spanKind = 'SPAN_KIND_PRODUCER';\n      break;\n    case 'consumer':\n      spanKind = 'SPAN_KIND_CONSUMER';\n      break;\n  }\n\n  return spanKind;\n}\n\n/**\n * Converts key-value tags to OTLP attributes and removes tags added by Grafana\n */\nfunction tagsToAttributes(tags: TraceKeyValuePair[]): collectorTypes.opentelemetryProto.common.v1.KeyValue[] {\n  return tags\n    .filter(\n      (t) =>\n        ![\n          'span.kind',\n          'otel.library.name',\n          'otel.libary.version',\n          'otel.status_description',\n          'otel.status_code',\n        ].includes(t.key)\n    )\n    .reduce<collectorTypes.opentelemetryProto.common.v1.KeyValue[]>(\n      (attributes, tag) => [...attributes, { key: tag.key, value: toAttributeValue(tag) }],\n      []\n    );\n}\n\n/**\n * Returns the correct OTLP AnyValue based on the value of the tag value\n */\nfunction toAttributeValue(tag: TraceKeyValuePair): collectorTypes.opentelemetryProto.common.v1.AnyValue {\n  if (typeof tag.value === 'string') {\n    return { stringValue: tag.value };\n  } else if (typeof tag.value === 'boolean') {\n    return { boolValue: tag.value };\n  } else if (typeof tag.value === 'number') {\n    if (tag.value % 1 === 0) {\n      return { intValue: tag.value };\n    } else {\n      return { doubleValue: tag.value };\n    }\n  } else if (typeof tag.value === 'object') {\n    if (Array.isArray(tag.value)) {\n      const values: collectorTypes.opentelemetryProto.common.v1.AnyValue[] = [];\n      for (const val of tag.value) {\n        values.push(toAttributeValue(val));\n      }\n\n      return { arrayValue: { values } };\n    }\n  }\n  return { stringValue: tag.value };\n}\n\nfunction getOTLPStatus(tags: TraceKeyValuePair[]): SpanStatus | undefined {\n  let status = undefined;\n  const statusCodeTag = tags.find((t) => t.key === 'otel.status_code');\n  if (statusCodeTag) {\n    status = {\n      code: statusCodeTag.value,\n      message: tags.find((t) => t.key === 'otel_status_description')?.value,\n    };\n  }\n\n  return status;\n}\n\nfunction getOTLPEvents(logs: TraceLog[]): collectorTypes.opentelemetryProto.trace.v1.Span.Event[] | undefined {\n  if (!logs || !logs.length) {\n    return undefined;\n  }\n\n  let events: collectorTypes.opentelemetryProto.trace.v1.Span.Event[] = [];\n  for (const log of logs) {\n    let event: collectorTypes.opentelemetryProto.trace.v1.Span.Event = {\n      timeUnixNano: log.timestamp * 1000000,\n      attributes: [],\n      droppedAttributesCount: 0,\n      name: '',\n    };\n    for (const field of log.fields) {\n      event.attributes!.push({\n        key: field.key,\n        value: toAttributeValue(field),\n      });\n    }\n    events.push(event);\n  }\n  return events;\n}\n\nfunction getOTLPReferences(\n  references: TraceSpanReference[]\n): collectorTypes.opentelemetryProto.trace.v1.Span.Link[] | undefined {\n  if (!references || !references.length) {\n    return undefined;\n  }\n\n  let links: collectorTypes.opentelemetryProto.trace.v1.Span.Link[] = [];\n  for (const ref of references) {\n    let link: collectorTypes.opentelemetryProto.trace.v1.Span.Link = {\n      traceId: ref.traceID,\n      spanId: ref.spanID,\n      attributes: [],\n      droppedAttributesCount: 0,\n    };\n    if (ref.tags?.length) {\n      for (const tag of ref.tags) {\n        link.attributes?.push({\n          key: tag.key,\n          value: toAttributeValue(tag),\n        });\n      }\n    }\n    links.push(link);\n  }\n  return links;\n}\n\nexport function transformTrace(response: DataQueryResponse, nodeGraph = false): DataQueryResponse {\n  const frame: DataFrame = response.data[0];\n\n  if (!frame) {\n    return emptyDataQueryResponse;\n  }\n\n  let data = [...response.data];\n  if (nodeGraph) {\n    data.push(...createGraphFrames(frame));\n  }\n\n  return {\n    ...response,\n    data,\n  };\n}\n\nexport function createTableFrameFromSearch(data: TraceSearchMetadata[], instanceSettings: DataSourceInstanceSettings) {\n  const frame = new MutableDataFrame({\n    fields: [\n      {\n        name: 'traceID',\n        type: FieldType.string,\n        config: {\n          unit: 'string',\n          displayNameFromDS: 'Trace ID',\n          links: [\n            {\n              title: 'Trace: ${__value.raw}',\n              url: '',\n              internal: {\n                datasourceUid: instanceSettings.uid,\n                datasourceName: instanceSettings.name,\n                query: {\n                  query: '${__value.raw}',\n                  queryType: 'traceql',\n                },\n              },\n            },\n          ],\n        },\n      },\n      { name: 'traceName', type: FieldType.string, config: { displayNameFromDS: 'Trace name' } },\n      { name: 'startTime', type: FieldType.string, config: { displayNameFromDS: 'Start time' } },\n      { name: 'traceDuration', type: FieldType.number, config: { displayNameFromDS: 'Duration', unit: 'ms' } },\n    ],\n    meta: {\n      preferredVisualisationType: 'table',\n    },\n  });\n  if (!data?.length) {\n    return frame;\n  }\n  // Show the most recent traces\n  const traceData = data\n    .sort((a, b) => parseInt(b?.startTimeUnixNano!, 10) / 1000000 - parseInt(a?.startTimeUnixNano!, 10) / 1000000)\n    .map(transformToTraceData);\n\n  for (const trace of traceData) {\n    frame.add(trace);\n  }\n\n  return frame;\n}\n\nfunction transformToTraceData(data: TraceSearchMetadata) {\n  let traceName = '';\n  if (data.rootServiceName) {\n    traceName += data.rootServiceName + ' ';\n  }\n  if (data.rootTraceName) {\n    traceName += data.rootTraceName;\n  }\n\n  const traceStartTime = parseInt(data.startTimeUnixNano!, 10) / 1000000;\n\n  let startTime = !isNaN(traceStartTime) ? dateTimeFormat(traceStartTime) : '';\n\n  return {\n    traceID: data.traceID,\n    startTime,\n    traceDuration: data.durationMs?.toString(),\n    traceName,\n  };\n}\n\nexport function createTableFrameFromTraceQlQuery(\n  data: TraceSearchMetadata[],\n  instanceSettings: DataSourceInstanceSettings\n): DataFrame[] {\n  const frame = new MutableDataFrame({\n    fields: [\n      {\n        name: 'traceID',\n        type: FieldType.string,\n        config: {\n          unit: 'string',\n          displayNameFromDS: 'Trace ID',\n          custom: {\n            width: 200,\n          },\n          links: [\n            {\n              title: 'Trace: ${__value.raw}',\n              url: '',\n              internal: {\n                datasourceUid: instanceSettings.uid,\n                datasourceName: instanceSettings.name,\n                query: {\n                  query: '${__value.raw}',\n                  queryType: 'traceql',\n                },\n              },\n            },\n          ],\n        },\n      },\n      {\n        name: 'startTime',\n        type: FieldType.string,\n        config: {\n          displayNameFromDS: 'Start time',\n          custom: {\n            width: 200,\n          },\n        },\n      },\n      { name: 'traceName', type: FieldType.string, config: { displayNameFromDS: 'Name' } },\n      {\n        name: 'traceDuration',\n        type: FieldType.number,\n        config: {\n          displayNameFromDS: 'Duration',\n          unit: 'ms',\n          custom: {\n            width: 120,\n          },\n        },\n      },\n    ],\n    meta: {\n      preferredVisualisationType: 'table',\n    },\n  });\n\n  if (!data?.length) {\n    return [frame];\n  }\n\n  const subDataFrames: DataFrame[] = [];\n  const tableRows = data\n    // Show the most recent traces\n    .sort((a, b) => parseInt(b?.startTimeUnixNano!, 10) / 1000000 - parseInt(a?.startTimeUnixNano!, 10) / 1000000)\n    .reduce((rows: TraceTableData[], trace, currentIndex) => {\n      const traceData: TraceTableData = transformToTraceData(trace);\n      rows.push(traceData);\n      subDataFrames.push(traceSubFrame(trace, instanceSettings, currentIndex));\n      return rows;\n    }, []);\n\n  for (const row of tableRows) {\n    frame.add(row);\n  }\n\n  return [frame, ...subDataFrames];\n}\n\nconst traceSubFrame = (\n  trace: TraceSearchMetadata,\n  instanceSettings: DataSourceInstanceSettings,\n  currentIndex: number\n): DataFrame => {\n  const spanDynamicAttrs: Record<string, FieldDTO> = {};\n  let hasNameAttribute = false;\n  trace.spanSet?.spans.forEach((span) => {\n    if (span.name) {\n      hasNameAttribute = true;\n    }\n    span.attributes?.forEach((attr) => {\n      spanDynamicAttrs[attr.key] = {\n        name: attr.key,\n        type: FieldType.string,\n        config: { displayNameFromDS: attr.key },\n      };\n    });\n  });\n  const subFrame = new MutableDataFrame({\n    fields: [\n      {\n        name: 'traceIdHidden',\n        config: {\n          custom: { hidden: true },\n        },\n      },\n      {\n        name: 'spanID',\n        type: FieldType.string,\n        config: {\n          unit: 'string',\n          displayNameFromDS: 'Span ID',\n          custom: {\n            width: 200,\n          },\n          links: [\n            {\n              title: 'Span: ${__value.raw}',\n              url: '',\n              internal: {\n                datasourceUid: instanceSettings.uid,\n                datasourceName: instanceSettings.name,\n                query: {\n                  query: '${__data.fields.traceIdHidden}',\n                  queryType: 'traceql',\n                },\n                panelsState: {\n                  trace: {\n                    spanId: '${__value.raw}',\n                  },\n                },\n              },\n            },\n          ],\n        },\n      },\n      {\n        name: 'spanStartTime',\n        type: FieldType.string,\n        config: {\n          displayNameFromDS: 'Start time',\n          custom: {\n            width: 200,\n          },\n        },\n      },\n      {\n        name: 'name',\n        type: FieldType.string,\n        config: { displayNameFromDS: 'Name', custom: { hidden: !hasNameAttribute } },\n      },\n      ...Object.values(spanDynamicAttrs),\n      {\n        name: 'duration',\n        type: FieldType.number,\n        config: {\n          displayNameFromDS: 'Duration',\n          unit: 'ns',\n          custom: {\n            width: 120,\n          },\n        },\n      },\n    ],\n    meta: {\n      preferredVisualisationType: 'table',\n      custom: {\n        parentRowIndex: currentIndex,\n      },\n    },\n  });\n\n  trace.spanSet?.spans.forEach((span) => {\n    subFrame.add(transformSpanToTraceData(span, trace.traceID));\n  });\n\n  return subFrame;\n};\n\ninterface TraceTableData {\n  [key: string]: string | number | boolean | undefined; // dynamic attribute name\n  traceID?: string;\n  spanID?: string;\n  startTime?: string;\n  name?: string;\n  traceDuration?: string;\n}\n\nfunction transformSpanToTraceData(span: Span, traceID: string): TraceTableData {\n  const spanStartTimeUnixMs = parseInt(span.startTimeUnixNano, 10) / 1000000;\n  let spanStartTime = dateTimeFormat(spanStartTimeUnixMs);\n\n  const data: TraceTableData = {\n    traceIdHidden: traceID,\n    spanID: span.spanID,\n    spanStartTime,\n    duration: parseInt(span.durationNanos, 10),\n    name: span.name,\n  };\n\n  span.attributes?.forEach((attr) => {\n    if (attr.value.boolValue) {\n      data[attr.key] = attr.value.boolValue;\n    }\n    if (attr.value.doubleValue) {\n      data[attr.key] = attr.value.doubleValue;\n    }\n    if (attr.value.intValue) {\n      data[attr.key] = attr.value.intValue;\n    }\n    if (attr.value.stringValue) {\n      data[attr.key] = attr.value.stringValue;\n    }\n  });\n\n  return data;\n}\n\nconst emptyDataQueryResponse = {\n  data: [\n    new MutableDataFrame({\n      fields: [\n        {\n          name: 'trace',\n          type: FieldType.trace,\n          values: [],\n        },\n      ],\n      meta: {\n        preferredVisualisationType: 'trace',\n        custom: {\n          traceFormat: 'otlp',\n        },\n      },\n    }),\n  ],\n};\n"],"names":["getNonOverlappingDuration","ranges","a","b","acc","range","tail","prevStart","prevEnd","start","end","makeSpanMap","getSpan","spanMap","span","index","parentId","getStats","duration","traceDuration","selfDuration","toFixedNoTrailingZeros","n","makeFrames","nodesFrame","edgesFrame","createGraphFrames","data","nodes","edges","convertTraceToGraph","node","edge","view","findTraceDuration","i","row","c","childrenDuration","stats","traceEndTime","traceStartTime","secondsMetric","totalsMetric","failedMetric","histogramMetric","rateMetric","errorRateMetric","durationMetric","defaultTableFilter","serviceMapMetrics","mapPromMetricsToServiceMap","responses","frames","getMetricFrames","nodesMap","edgesMap","collectMetricData","convertToDataFrames","createServiceMapDataFrames","createDF","name","fields","frame","stat","metric","valueName","edgeId","rangeMs","nodeId","SpanStatusCode","SemanticResourceAttributes","CloudProviderValues","CloudPlatformValues","AwsEcsLaunchtypeValues","HostArchValues","OsTypeValues","TelemetrySdkLanguageValues","createTableFrame","logsFrame","datasourceUid","datasourceName","traceRegexs","tableFrame","MutableDataFrame","timeField","f","field","hasMatch","values","line","traceRegex","match","traceId","time","transformTraceList","response","datasourceId","transformBase64IDToHexString","base64","raw","result","hex","transformHexStringToBase64ID","hexArray","getAttributeValue","value","arrayValue","arValue","resourceToProcess","resource","serviceTags","serviceName","attribute","getSpanTags","instrumentationLibrary","spanTags","split","getReferences","references","link","spanId","tags","getLogs","logs","event","transformFromOTLP","traceData","nodeGraph","librarySpan","error","transformToOTLP","services","batchIndex","tagsToAttributes","libraryName","t","getOTLPSpanKind","getOTLPStatus","getOTLPEvents","getOTLPReferences","spanKind","attributes","tag","toAttributeValue","val","status","statusCodeTag","events","log","links","ref","transformTrace","emptyDataQueryResponse","createTableFrameFromSearch","instanceSettings","transformToTraceData","trace","traceName","startTime","createTableFrameFromTraceQlQuery","subDataFrames","tableRows","rows","currentIndex","traceSubFrame","spanDynamicAttrs","hasNameAttribute","attr","subFrame","transformSpanToTraceData","traceID","spanStartTimeUnixMs","spanStartTime"],"sourceRoot":""}