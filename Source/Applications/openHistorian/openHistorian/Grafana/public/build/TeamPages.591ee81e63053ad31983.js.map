{"version":3,"sources":["webpack:///./public/app/features/teams/state/selectors.ts","webpack:///./public/app/features/teams/TeamSettings.tsx","webpack:///./public/app/features/teams/TeamGroupSync.tsx","webpack:///./public/app/core/components/WithFeatureToggle.tsx","webpack:///./public/app/features/teams/TeamMemberRow.tsx","webpack:///./public/app/features/teams/TeamMembers.tsx","webpack:///./public/app/features/teams/state/actions.ts","webpack:///./public/app/core/components/SharedPreferences/SharedPreferences.tsx","webpack:///./public/app/features/teams/TeamPages.tsx","webpack:///./public/app/features/teams/state/navModel.ts"],"names":["getSearchQuery","state","searchQuery","getSearchMemberQuery","searchMemberQuery","getTeamGroups","groups","getTeamsCount","teams","length","getTeam","currentTeamId","team","id","parseInt","getTeams","regex","RegExp","filter","test","name","getTeamMembers","members","member","login","email","isSignedInUserTeamAdmin","config","signedInUser","editorsCanAdmin","userInMembers","find","m","userId","permission","TeamPermissionLevel","Member","isPermissionTeamAdmin","isAdmin","isGrafanaAdmin","orgRole","OrgRole","Admin","userIsTeamAdmin","mapDispatchToProps","updateTeam","connect","teamId","getRouteParamsId","location","label","defaultValues","onSubmit","formTeam","register","ref","required","description","placeholder","type","resourceUri","Input","LegacyForms","headerTooltip","TeamGroupSync","props","onToggleAdding","setState","isAdding","onNewGroupIdChanged","event","newGroupId","target","value","onAddGroup","preventDefault","addTeamGroup","onRemoveGroup","group","removeTeamGroup","groupId","this","fetchTeamGroups","loadTeamGroups","key","style","width","className","onClick","marginBottom","placement","content","in","onChange","disabled","isNewGroupValid","buttonIcon","title","buttonTitle","proTip","proTipLinkTitle","proTipLink","proTipTarget","map","renderGroup","PureComponent","WithFeatureToggle","featureToggle","children","Select","TeamMemberRow","onPermissionChange","item","updatedTeamMember","updateTeamMember","renderLabels","bind","renderPermissions","removeTeamMember","signedInUserIsTeamAdmin","teamsPermissionLevels","dp","isSearchable","options","labels","TagBadge","removeIcon","count","syncEnabled","src","avatarUrl","size","onConfirm","onRemoveMember","TeamMembers","onSearchQueryChange","setSearchMemberQuery","onUserSelected","user","newTeamMember","onAddUserToTeam","addTeamMember","isTeamAdmin","FilterInput","labelClassName","inputClassName","SlideDown","UserPicker","onSelected","contextSrv","loadTeams","dispatch","getBackendSrv","get","perpage","page","response","teamsLoaded","loadTeam","teamLoaded","updateNavIndex","buildNavModel","loadTeamMembers","getStore","teamMembersLoaded","post","delete","put","teamGroupsLoaded","encodeURIComponent","deleteTeam","themes","SharedPreferences","backendSrv","onSubmitForm","homeDashboardId","theme","timezone","window","reload","onThemeChanged","onTimeZoneChanged","onHomeDashboardChanged","dashboardId","getFullDashName","dashboard","folderTitle","dashboards","prefs","search","starred","defaultDashboardHit","tags","uid","uri","url","folderId","folderUid","folderUrl","isStarred","slug","items","d","dashboardIds","missing","push","styles","getStyles","labelText","getOptionValue","i","getOptionLabel","aria-label","selectors","components","TimeZonePicker","container","includeInternal","variant","stylesFactory","css","PageTypes","TeamPages","textsAreEqual","text1","text2","toLocaleLowerCase","hideTabsFromNonTeamAdmin","navModel","main","navItem","text","Members","hideFromTabs","isLoading","isSyncEnabled","licenseInfo","hasLicense","fetchTeam","pages","currentPage","pageName","_","includes","getCurrentPage","Settings","GroupSync","Contents","Object","keys","renderPage","hot","module","getRouteParamsPage","teamLoadingNav","getTeamLoadingNav","getNavModel","navIndex","img","subTitle","breadcrumbs","active","icon","node","memberCount","child","indexOf"],"mappings":"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","file":"TeamPages.591ee81e63053ad31983.js","sourcesContent":["import { Team, TeamsState, TeamState, TeamMember, OrgRole, TeamPermissionLevel } from 'app/types';\nimport { User } from 'app/core/services/context_srv';\n\nexport const getSearchQuery = (state: TeamsState) => state.searchQuery;\nexport const getSearchMemberQuery = (state: TeamState) => state.searchMemberQuery;\nexport const getTeamGroups = (state: TeamState) => state.groups;\nexport const getTeamsCount = (state: TeamsState) => state.teams.length;\n\nexport const getTeam = (state: TeamState, currentTeamId: any): Team | null => {\n  if (state.team.id === parseInt(currentTeamId, 10)) {\n    return state.team;\n  }\n\n  return null;\n};\n\nexport const getTeams = (state: TeamsState) => {\n  const regex = RegExp(state.searchQuery, 'i');\n\n  return state.teams.filter(team => {\n    return regex.test(team.name);\n  });\n};\n\nexport const getTeamMembers = (state: TeamState) => {\n  const regex = RegExp(state.searchMemberQuery, 'i');\n\n  return state.members.filter(member => {\n    return regex.test(member.login) || regex.test(member.email) || regex.test(member.name);\n  });\n};\n\nexport interface Config {\n  members: TeamMember[];\n  editorsCanAdmin: boolean;\n  signedInUser: User;\n}\n\nexport const isSignedInUserTeamAdmin = (config: Config): boolean => {\n  const { members, signedInUser, editorsCanAdmin } = config;\n  const userInMembers = members.find(m => m.userId === signedInUser.id);\n  const permission = userInMembers ? userInMembers.permission : TeamPermissionLevel.Member;\n\n  return isPermissionTeamAdmin({ permission, signedInUser, editorsCanAdmin });\n};\n\nexport interface PermissionConfig {\n  permission: TeamPermissionLevel;\n  editorsCanAdmin: boolean;\n  signedInUser: User;\n}\n\nexport const isPermissionTeamAdmin = (config: PermissionConfig): boolean => {\n  const { permission, signedInUser, editorsCanAdmin } = config;\n  const isAdmin = signedInUser.isGrafanaAdmin || signedInUser.orgRole === OrgRole.Admin;\n  const userIsTeamAdmin = permission === TeamPermissionLevel.Admin;\n  const isSignedInUserTeamAdmin = isAdmin || userIsTeamAdmin;\n\n  return isSignedInUserTeamAdmin || !editorsCanAdmin;\n};\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { Input, Field, Form, Button, FieldSet, VerticalGroup } from '@grafana/ui';\n\nimport { SharedPreferences } from 'app/core/components/SharedPreferences/SharedPreferences';\nimport { updateTeam } from './state/actions';\nimport { getRouteParamsId } from 'app/core/selectors/location';\nimport { getTeam } from './state/selectors';\nimport { Team } from 'app/types';\n\nexport interface Props {\n  team: Team;\n  updateTeam: typeof updateTeam;\n}\n\nexport const TeamSettings: FC<Props> = ({ team, updateTeam }) => {\n  return (\n    <VerticalGroup>\n      <FieldSet label=\"Team Settings\">\n        <Form\n          defaultValues={{ ...team }}\n          onSubmit={(formTeam: Team) => {\n            updateTeam(formTeam.name, formTeam.email);\n          }}\n        >\n          {({ register }) => (\n            <>\n              <Field label=\"Name\">\n                <Input name=\"name\" ref={register({ required: true })} />\n              </Field>\n\n              <Field\n                label=\"Email\"\n                description=\"This is optional and is primarily used to set the team profile avatar (via gravatar service)\"\n              >\n                <Input placeholder=\"team@email.com\" type=\"email\" name=\"email\" ref={register} />\n              </Field>\n              <Button type=\"submit\">Update</Button>\n            </>\n          )}\n        </Form>\n      </FieldSet>\n      <SharedPreferences resourceUri={`teams/${team.id}`} />\n    </VerticalGroup>\n  );\n};\n\nfunction mapStateToProps(state: any) {\n  const teamId = getRouteParamsId(state.location);\n\n  return {\n    team: getTeam(state.team, teamId),\n  };\n}\n\nconst mapDispatchToProps = {\n  updateTeam,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamSettings);\n","import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\n\nimport { SlideDown } from 'app/core/components/Animations/SlideDown';\nimport { LegacyForms, Tooltip, Icon } from '@grafana/ui';\nconst { Input } = LegacyForms;\n\nimport { TeamGroup } from '../../types';\nimport { addTeamGroup, loadTeamGroups, removeTeamGroup } from './state/actions';\nimport { getTeamGroups } from './state/selectors';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\n\nexport interface Props {\n  groups: TeamGroup[];\n  loadTeamGroups: typeof loadTeamGroups;\n  addTeamGroup: typeof addTeamGroup;\n  removeTeamGroup: typeof removeTeamGroup;\n}\n\ninterface State {\n  isAdding: boolean;\n  newGroupId: string;\n}\n\nconst headerTooltip = `Sync LDAP or OAuth groups with your Grafana teams.`;\n\nexport class TeamGroupSync extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { isAdding: false, newGroupId: '' };\n  }\n\n  componentDidMount() {\n    this.fetchTeamGroups();\n  }\n\n  async fetchTeamGroups() {\n    await this.props.loadTeamGroups();\n  }\n\n  onToggleAdding = () => {\n    this.setState({ isAdding: !this.state.isAdding });\n  };\n\n  onNewGroupIdChanged = (event: any) => {\n    this.setState({ newGroupId: event.target.value });\n  };\n\n  onAddGroup = (event: any) => {\n    event.preventDefault();\n    this.props.addTeamGroup(this.state.newGroupId);\n    this.setState({ isAdding: false, newGroupId: '' });\n  };\n\n  onRemoveGroup = (group: TeamGroup) => {\n    this.props.removeTeamGroup(group.groupId);\n  };\n\n  isNewGroupValid() {\n    return this.state.newGroupId.length > 1;\n  }\n\n  renderGroup(group: TeamGroup) {\n    return (\n      <tr key={group.groupId}>\n        <td>{group.groupId}</td>\n        <td style={{ width: '1%' }}>\n          <a className=\"btn btn-danger btn-small\" onClick={() => this.onRemoveGroup(group)}>\n            <Icon name=\"times\" style={{ marginBottom: 0 }} />\n          </a>\n        </td>\n      </tr>\n    );\n  }\n\n  render() {\n    const { isAdding, newGroupId } = this.state;\n    const groups = this.props.groups;\n\n    return (\n      <div>\n        <div className=\"page-action-bar\">\n          <h3 className=\"page-sub-heading\">External group sync</h3>\n          <Tooltip placement=\"auto\" content={headerTooltip}>\n            <Icon className=\"icon--has-hover page-sub-heading-icon\" name=\"question-circle\" />\n          </Tooltip>\n          <div className=\"page-action-bar__spacer\" />\n          {groups.length > 0 && (\n            <button className=\"btn btn-primary pull-right\" onClick={this.onToggleAdding}>\n              <Icon name=\"plus\" /> Add group\n            </button>\n          )}\n        </div>\n\n        <SlideDown in={isAdding}>\n          <div className=\"cta-form\">\n            <button className=\"cta-form__close btn btn-transparent\" onClick={this.onToggleAdding}>\n              <Icon name=\"times\" />\n            </button>\n            <h5>Add External Group</h5>\n            <form className=\"gf-form-inline\" onSubmit={this.onAddGroup}>\n              <div className=\"gf-form\">\n                <Input\n                  type=\"text\"\n                  className=\"gf-form-input width-30\"\n                  value={newGroupId}\n                  onChange={this.onNewGroupIdChanged}\n                  placeholder=\"cn=ops,ou=groups,dc=grafana,dc=org\"\n                />\n              </div>\n\n              <div className=\"gf-form\">\n                <button className=\"btn btn-primary gf-form-btn\" type=\"submit\" disabled={!this.isNewGroupValid()}>\n                  Add group\n                </button>\n              </div>\n            </form>\n          </div>\n        </SlideDown>\n\n        {groups.length === 0 && !isAdding && (\n          <EmptyListCTA\n            onClick={this.onToggleAdding}\n            buttonIcon=\"users-alt\"\n            title=\"There are no external groups to sync with\"\n            buttonTitle=\"Add Group\"\n            proTip={headerTooltip}\n            proTipLinkTitle=\"Learn more\"\n            proTipLink=\"http://docs.grafana.org/auth/enhanced_ldap/\"\n            proTipTarget=\"_blank\"\n          />\n        )}\n\n        {groups.length > 0 && (\n          <div className=\"admin-list-table\">\n            <table className=\"filter-table filter-table--hover form-inline\">\n              <thead>\n                <tr>\n                  <th>External Group ID</th>\n                  <th style={{ width: '1%' }} />\n                </tr>\n              </thead>\n              <tbody>{groups.map(group => this.renderGroup(group))}</tbody>\n            </table>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state: any) {\n  return {\n    groups: getTeamGroups(state.team),\n  };\n}\n\nconst mapDispatchToProps = {\n  loadTeamGroups,\n  addTeamGroup,\n  removeTeamGroup,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamGroupSync);\n","import React, { FunctionComponent } from 'react';\n\nexport interface Props {\n  featureToggle: boolean;\n}\n\nexport const WithFeatureToggle: FunctionComponent<Props> = ({ featureToggle, children }) => {\n  if (featureToggle === true) {\n    return <>{children}</>;\n  }\n\n  return null;\n};\n","import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { LegacyForms, DeleteButton } from '@grafana/ui';\nconst { Select } = LegacyForms;\nimport { SelectableValue } from '@grafana/data';\n\nimport { TeamMember, teamsPermissionLevels, TeamPermissionLevel } from 'app/types';\nimport { WithFeatureToggle } from 'app/core/components/WithFeatureToggle';\nimport { updateTeamMember, removeTeamMember } from './state/actions';\nimport { TagBadge } from 'app/core/components/TagFilter/TagBadge';\n\nexport interface Props {\n  member: TeamMember;\n  syncEnabled: boolean;\n  editorsCanAdmin: boolean;\n  signedInUserIsTeamAdmin: boolean;\n  removeTeamMember: typeof removeTeamMember;\n  updateTeamMember: typeof updateTeamMember;\n}\n\nexport class TeamMemberRow extends PureComponent<Props> {\n  constructor(props: Props) {\n    super(props);\n    this.renderLabels = this.renderLabels.bind(this);\n    this.renderPermissions = this.renderPermissions.bind(this);\n  }\n\n  onRemoveMember(member: TeamMember) {\n    this.props.removeTeamMember(member.userId);\n  }\n\n  onPermissionChange = (item: SelectableValue<TeamPermissionLevel>, member: TeamMember) => {\n    const permission = item.value;\n    const updatedTeamMember: TeamMember = {\n      ...member,\n      permission: permission as number,\n    };\n\n    this.props.updateTeamMember(updatedTeamMember);\n  };\n\n  renderPermissions(member: TeamMember) {\n    const { editorsCanAdmin, signedInUserIsTeamAdmin } = this.props;\n    const value = teamsPermissionLevels.find(dp => dp.value === member.permission)!;\n\n    return (\n      <WithFeatureToggle featureToggle={editorsCanAdmin}>\n        <td className=\"width-5 team-permissions\">\n          <div className=\"gf-form\">\n            {signedInUserIsTeamAdmin && (\n              <Select\n                isSearchable={false}\n                options={teamsPermissionLevels}\n                onChange={item => this.onPermissionChange(item, member)}\n                className=\"gf-form-select-box__control--menu-right\"\n                value={value}\n              />\n            )}\n            {!signedInUserIsTeamAdmin && <span>{value.label}</span>}\n          </div>\n        </td>\n      </WithFeatureToggle>\n    );\n  }\n\n  renderLabels(labels: string[]) {\n    if (!labels) {\n      return <td />;\n    }\n\n    return (\n      <td>\n        {labels.map(label => (\n          <TagBadge key={label} label={label} removeIcon={false} count={0} onClick={() => {}} />\n        ))}\n      </td>\n    );\n  }\n\n  render() {\n    const { member, syncEnabled, signedInUserIsTeamAdmin } = this.props;\n    return (\n      <tr key={member.userId}>\n        <td className=\"width-4 text-center\">\n          <img className=\"filter-table__avatar\" src={member.avatarUrl} />\n        </td>\n        <td>{member.login}</td>\n        <td>{member.email}</td>\n        <td>{member.name}</td>\n        {this.renderPermissions(member)}\n        {syncEnabled && this.renderLabels(member.labels)}\n        <td className=\"text-right\">\n          <DeleteButton size=\"sm\" disabled={!signedInUserIsTeamAdmin} onConfirm={() => this.onRemoveMember(member)} />\n        </td>\n      </tr>\n    );\n  }\n}\n\nfunction mapStateToProps(state: any) {\n  return {};\n}\n\nconst mapDispatchToProps = {\n  removeTeamMember,\n  updateTeamMember,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamMemberRow);\n","import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { Icon } from '@grafana/ui';\nimport { SlideDown } from 'app/core/components/Animations/SlideDown';\nimport { UserPicker } from 'app/core/components/Select/UserPicker';\nimport { TagBadge } from 'app/core/components/TagFilter/TagBadge';\nimport { TeamMember, User } from 'app/types';\nimport { addTeamMember } from './state/actions';\nimport { getSearchMemberQuery, isSignedInUserTeamAdmin } from './state/selectors';\nimport { FilterInput } from 'app/core/components/FilterInput/FilterInput';\nimport { WithFeatureToggle } from 'app/core/components/WithFeatureToggle';\nimport { config } from 'app/core/config';\nimport { contextSrv, User as SignedInUser } from 'app/core/services/context_srv';\nimport TeamMemberRow from './TeamMemberRow';\nimport { setSearchMemberQuery } from './state/reducers';\n\nexport interface Props {\n  members: TeamMember[];\n  searchMemberQuery: string;\n  addTeamMember: typeof addTeamMember;\n  setSearchMemberQuery: typeof setSearchMemberQuery;\n  syncEnabled: boolean;\n  editorsCanAdmin: boolean;\n  signedInUser: SignedInUser;\n}\n\nexport interface State {\n  isAdding: boolean;\n  newTeamMember?: User | null;\n}\n\nexport class TeamMembers extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { isAdding: false, newTeamMember: null };\n  }\n\n  onSearchQueryChange = (value: string) => {\n    this.props.setSearchMemberQuery(value);\n  };\n\n  onToggleAdding = () => {\n    this.setState({ isAdding: !this.state.isAdding });\n  };\n\n  onUserSelected = (user: User) => {\n    this.setState({ newTeamMember: user });\n  };\n\n  onAddUserToTeam = async () => {\n    this.props.addTeamMember(this.state.newTeamMember!.id);\n    this.setState({ newTeamMember: null });\n  };\n\n  renderLabels(labels: string[]) {\n    if (!labels) {\n      return <td />;\n    }\n\n    return (\n      <td>\n        {labels.map(label => (\n          <TagBadge key={label} label={label} removeIcon={false} count={0} onClick={() => {}} />\n        ))}\n      </td>\n    );\n  }\n\n  render() {\n    const { isAdding } = this.state;\n    const { searchMemberQuery, members, syncEnabled, editorsCanAdmin, signedInUser } = this.props;\n    const isTeamAdmin = isSignedInUserTeamAdmin({ members, editorsCanAdmin, signedInUser });\n\n    return (\n      <div>\n        <div className=\"page-action-bar\">\n          <div className=\"gf-form gf-form--grow\">\n            <FilterInput\n              labelClassName=\"gf-form--has-input-icon gf-form--grow\"\n              inputClassName=\"gf-form-input\"\n              placeholder=\"Search members\"\n              value={searchMemberQuery}\n              onChange={this.onSearchQueryChange}\n            />\n          </div>\n\n          <div className=\"page-action-bar__spacer\" />\n\n          <button\n            className=\"btn btn-primary pull-right\"\n            onClick={this.onToggleAdding}\n            disabled={isAdding || !isTeamAdmin}\n          >\n            Add member\n          </button>\n        </div>\n\n        <SlideDown in={isAdding}>\n          <div className=\"cta-form\">\n            <button className=\"cta-form__close btn btn-transparent\" onClick={this.onToggleAdding}>\n              <Icon name=\"times\" />\n            </button>\n            <h5>Add team member</h5>\n            <div className=\"gf-form-inline\">\n              <UserPicker onSelected={this.onUserSelected} className=\"min-width-30\" />\n              {this.state.newTeamMember && (\n                <button className=\"btn btn-primary gf-form-btn\" type=\"submit\" onClick={this.onAddUserToTeam}>\n                  Add to team\n                </button>\n              )}\n            </div>\n          </div>\n        </SlideDown>\n\n        <div className=\"admin-list-table\">\n          <table className=\"filter-table filter-table--hover form-inline\">\n            <thead>\n              <tr>\n                <th />\n                <th>Login</th>\n                <th>Email</th>\n                <th>Name</th>\n                <WithFeatureToggle featureToggle={editorsCanAdmin}>\n                  <th>Permission</th>\n                </WithFeatureToggle>\n                {syncEnabled && <th />}\n                <th style={{ width: '1%' }} />\n              </tr>\n            </thead>\n            <tbody>\n              {members &&\n                members.map(member => (\n                  <TeamMemberRow\n                    key={member.userId}\n                    member={member}\n                    syncEnabled={syncEnabled}\n                    editorsCanAdmin={editorsCanAdmin}\n                    signedInUserIsTeamAdmin={isTeamAdmin}\n                  />\n                ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state: any) {\n  return {\n    searchMemberQuery: getSearchMemberQuery(state.team),\n    editorsCanAdmin: config.editorsCanAdmin, // this makes the feature toggle mockable/controllable from tests,\n    signedInUser: contextSrv.user, // this makes the feature toggle mockable/controllable from tests,\n  };\n}\n\nconst mapDispatchToProps = {\n  addTeamMember,\n  setSearchMemberQuery,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamMembers);\n","import { getBackendSrv } from '@grafana/runtime';\n\nimport { TeamMember, ThunkResult } from 'app/types';\nimport { updateNavIndex } from 'app/core/actions';\nimport { buildNavModel } from './navModel';\nimport { teamGroupsLoaded, teamLoaded, teamMembersLoaded, teamsLoaded } from './reducers';\n\nexport function loadTeams(): ThunkResult<void> {\n  return async dispatch => {\n    const response = await getBackendSrv().get('/api/teams/search', { perpage: 1000, page: 1 });\n    dispatch(teamsLoaded(response.teams));\n  };\n}\n\nexport function loadTeam(id: number): ThunkResult<void> {\n  return async dispatch => {\n    const response = await getBackendSrv().get(`/api/teams/${id}`);\n    dispatch(teamLoaded(response));\n    dispatch(updateNavIndex(buildNavModel(response)));\n  };\n}\n\nexport function loadTeamMembers(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    const response = await getBackendSrv().get(`/api/teams/${team.id}/members`);\n    dispatch(teamMembersLoaded(response));\n  };\n}\n\nexport function addTeamMember(id: number): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().post(`/api/teams/${team.id}/members`, { userId: id });\n    dispatch(loadTeamMembers());\n  };\n}\n\nexport function removeTeamMember(id: number): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().delete(`/api/teams/${team.id}/members/${id}`);\n    dispatch(loadTeamMembers());\n  };\n}\n\nexport function updateTeam(name: string, email: string): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().put(`/api/teams/${team.id}`, { name, email });\n    dispatch(loadTeam(team.id));\n  };\n}\n\nexport function loadTeamGroups(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    const response = await getBackendSrv().get(`/api/teams/${team.id}/groups`);\n    dispatch(teamGroupsLoaded(response));\n  };\n}\n\nexport function addTeamGroup(groupId: string): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().post(`/api/teams/${team.id}/groups`, { groupId: groupId });\n    dispatch(loadTeamGroups());\n  };\n}\n\nexport function removeTeamGroup(groupId: string): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().delete(`/api/teams/${team.id}/groups/${encodeURIComponent(groupId)}`);\n    dispatch(loadTeamGroups());\n  };\n}\n\nexport function deleteTeam(id: number): ThunkResult<void> {\n  return async dispatch => {\n    await getBackendSrv().delete(`/api/teams/${id}`);\n    dispatch(loadTeams());\n  };\n}\n\nexport function updateTeamMember(member: TeamMember): ThunkResult<void> {\n  return async dispatch => {\n    await getBackendSrv().put(`/api/teams/${member.teamId}/members/${member.userId}`, {\n      permission: member.permission,\n    });\n    dispatch(loadTeamMembers());\n  };\n}\n","import React, { PureComponent } from 'react';\nimport { css } from 'emotion';\n\nimport {\n  Select,\n  Field,\n  Form,\n  Tooltip,\n  Icon,\n  stylesFactory,\n  Label,\n  Button,\n  RadioButtonGroup,\n  FieldSet,\n  TimeZonePicker,\n} from '@grafana/ui';\nimport { SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport { DashboardSearchHit, DashboardSearchItemType } from 'app/features/search/types';\nimport { backendSrv } from 'app/core/services/backend_srv';\n\nexport interface Props {\n  resourceUri: string;\n}\n\nexport interface State {\n  homeDashboardId: number;\n  theme: string;\n  timezone: string;\n  dashboards: DashboardSearchHit[];\n}\n\nconst themes: SelectableValue[] = [\n  { value: '', label: 'Default' },\n  { value: 'dark', label: 'Dark' },\n  { value: 'light', label: 'Light' },\n];\n\nexport class SharedPreferences extends PureComponent<Props, State> {\n  backendSrv = backendSrv;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      homeDashboardId: 0,\n      theme: '',\n      timezone: '',\n      dashboards: [],\n    };\n  }\n\n  async componentDidMount() {\n    const prefs = await backendSrv.get(`/api/${this.props.resourceUri}/preferences`);\n    const dashboards = await backendSrv.search({ starred: true });\n    const defaultDashboardHit: DashboardSearchHit = {\n      id: 0,\n      title: 'Default',\n      tags: [],\n      type: '' as DashboardSearchItemType,\n      uid: '',\n      uri: '',\n      url: '',\n      folderId: 0,\n      folderTitle: '',\n      folderUid: '',\n      folderUrl: '',\n      isStarred: false,\n      slug: '',\n      items: [],\n    };\n\n    if (prefs.homeDashboardId > 0 && !dashboards.find(d => d.id === prefs.homeDashboardId)) {\n      const missing = await backendSrv.search({ dashboardIds: [prefs.homeDashboardId] });\n      if (missing && missing.length > 0) {\n        dashboards.push(missing[0]);\n      }\n    }\n\n    this.setState({\n      homeDashboardId: prefs.homeDashboardId,\n      theme: prefs.theme,\n      timezone: prefs.timezone,\n      dashboards: [defaultDashboardHit, ...dashboards],\n    });\n  }\n\n  onSubmitForm = async () => {\n    const { homeDashboardId, theme, timezone } = this.state;\n\n    await backendSrv.put(`/api/${this.props.resourceUri}/preferences`, {\n      homeDashboardId,\n      theme,\n      timezone,\n    });\n    window.location.reload();\n  };\n\n  onThemeChanged = (value: string) => {\n    this.setState({ theme: value });\n  };\n\n  onTimeZoneChanged = (timezone: string) => {\n    if (!timezone) {\n      return;\n    }\n    this.setState({ timezone: timezone });\n  };\n\n  onHomeDashboardChanged = (dashboardId: number) => {\n    this.setState({ homeDashboardId: dashboardId });\n  };\n\n  getFullDashName = (dashboard: DashboardSearchHit) => {\n    if (typeof dashboard.folderTitle === 'undefined' || dashboard.folderTitle === '') {\n      return dashboard.title;\n    }\n    return dashboard.folderTitle + ' / ' + dashboard.title;\n  };\n\n  render() {\n    const { theme, timezone, homeDashboardId, dashboards } = this.state;\n    const styles = getStyles();\n\n    return (\n      <Form onSubmit={this.onSubmitForm}>\n        {() => {\n          return (\n            <FieldSet label=\"Preferences\">\n              <Field label=\"UI Theme\">\n                <RadioButtonGroup\n                  options={themes}\n                  value={themes.find(item => item.value === theme)?.value}\n                  onChange={this.onThemeChanged}\n                />\n              </Field>\n\n              <Field\n                label={\n                  <Label>\n                    <span className={styles.labelText}>Home Dashboard</span>\n                    <Tooltip content=\"Not finding dashboard you want? Star it first, then it should appear in this select box.\">\n                      <Icon name=\"info-circle\" />\n                    </Tooltip>\n                  </Label>\n                }\n              >\n                <Select\n                  value={dashboards.find(dashboard => dashboard.id === homeDashboardId)}\n                  getOptionValue={i => i.id}\n                  getOptionLabel={this.getFullDashName}\n                  onChange={(dashboard: DashboardSearchHit) => this.onHomeDashboardChanged(dashboard.id)}\n                  options={dashboards}\n                  placeholder=\"Choose default dashboard\"\n                />\n              </Field>\n\n              <Field label=\"Timezone\" aria-label={selectors.components.TimeZonePicker.container}>\n                <TimeZonePicker includeInternal={true} value={timezone} onChange={this.onTimeZoneChanged} />\n              </Field>\n              <div className=\"gf-form-button-row\">\n                <Button variant=\"primary\">Save</Button>\n              </div>\n            </FieldSet>\n          );\n        }}\n      </Form>\n    );\n  }\n}\n\nexport default SharedPreferences;\n\nconst getStyles = stylesFactory(() => {\n  return {\n    labelText: css`\n      margin-right: 6px;\n    `,\n  };\n});\n","import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\nimport { hot } from 'react-hot-loader';\nimport config from 'app/core/config';\nimport Page from 'app/core/components/Page/Page';\nimport TeamMembers from './TeamMembers';\nimport TeamSettings from './TeamSettings';\nimport TeamGroupSync from './TeamGroupSync';\nimport { Team, TeamMember } from 'app/types';\nimport { loadTeam, loadTeamMembers } from './state/actions';\nimport { getTeam, getTeamMembers, isSignedInUserTeamAdmin } from './state/selectors';\nimport { getTeamLoadingNav } from './state/navModel';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { getRouteParamsId, getRouteParamsPage } from '../../core/selectors/location';\nimport { contextSrv, User } from 'app/core/services/context_srv';\nimport { NavModel } from '@grafana/data';\n\nexport interface Props {\n  team: Team;\n  loadTeam: typeof loadTeam;\n  loadTeamMembers: typeof loadTeamMembers;\n  teamId: number;\n  pageName: string;\n  navModel: NavModel;\n  members: TeamMember[];\n  editorsCanAdmin: boolean;\n  signedInUser: User;\n}\n\ninterface State {\n  isSyncEnabled: boolean;\n  isLoading: boolean;\n}\n\nenum PageTypes {\n  Members = 'members',\n  Settings = 'settings',\n  GroupSync = 'groupsync',\n}\n\nexport class TeamPages extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      isLoading: false,\n      isSyncEnabled: config.licenseInfo.hasLicense,\n    };\n  }\n\n  async componentDidMount() {\n    await this.fetchTeam();\n  }\n\n  async fetchTeam() {\n    const { loadTeam, teamId } = this.props;\n    this.setState({ isLoading: true });\n    const team = await loadTeam(teamId);\n    await this.props.loadTeamMembers();\n    this.setState({ isLoading: false });\n    return team;\n  }\n\n  getCurrentPage() {\n    const pages = ['members', 'settings', 'groupsync'];\n    const currentPage = this.props.pageName;\n    return _.includes(pages, currentPage) ? currentPage : pages[0];\n  }\n\n  textsAreEqual = (text1: string, text2: string) => {\n    if (!text1 && !text2) {\n      return true;\n    }\n\n    if (!text1 || !text2) {\n      return false;\n    }\n\n    return text1.toLocaleLowerCase() === text2.toLocaleLowerCase();\n  };\n\n  hideTabsFromNonTeamAdmin = (navModel: NavModel, isSignedInUserTeamAdmin: boolean) => {\n    if (!isSignedInUserTeamAdmin && navModel.main && navModel.main.children) {\n      navModel.main.children\n        .filter(navItem => !this.textsAreEqual(navItem.text, PageTypes.Members))\n        .map(navItem => {\n          navItem.hideFromTabs = true;\n        });\n    }\n\n    return navModel;\n  };\n\n  renderPage(isSignedInUserTeamAdmin: boolean): React.ReactNode {\n    const { isSyncEnabled } = this.state;\n    const { members } = this.props;\n    const currentPage = this.getCurrentPage();\n\n    switch (currentPage) {\n      case PageTypes.Members:\n        return <TeamMembers syncEnabled={isSyncEnabled} members={members} />;\n\n      case PageTypes.Settings:\n        return isSignedInUserTeamAdmin && <TeamSettings />;\n      case PageTypes.GroupSync:\n        return isSignedInUserTeamAdmin && isSyncEnabled && <TeamGroupSync />;\n    }\n\n    return null;\n  }\n\n  render() {\n    const { team, navModel, members, editorsCanAdmin, signedInUser } = this.props;\n    const isTeamAdmin = isSignedInUserTeamAdmin({ members, editorsCanAdmin, signedInUser });\n\n    return (\n      <Page navModel={this.hideTabsFromNonTeamAdmin(navModel, isTeamAdmin)}>\n        <Page.Contents isLoading={this.state.isLoading}>\n          {team && Object.keys(team).length !== 0 && this.renderPage(isTeamAdmin)}\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nfunction mapStateToProps(state: any) {\n  const teamId = getRouteParamsId(state.location);\n  const pageName = getRouteParamsPage(state.location) || 'members';\n  const teamLoadingNav = getTeamLoadingNav(pageName as string);\n  const navModel = getNavModel(state.navIndex, `team-${pageName}-${teamId}`, teamLoadingNav);\n  const team = getTeam(state.team, teamId);\n  const members = getTeamMembers(state.team);\n\n  return {\n    navModel,\n    teamId: teamId,\n    pageName: pageName,\n    team,\n    members,\n    editorsCanAdmin: config.editorsCanAdmin, // this makes the feature toggle mockable/controllable from tests,\n    signedInUser: contextSrv.user, // this makes the feature toggle mockable/controllable from tests,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadTeam,\n  loadTeamMembers,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(TeamPages));\n","import { Team, TeamPermissionLevel } from 'app/types';\nimport config from 'app/core/config';\nimport { NavModelItem, NavModel } from '@grafana/data';\n\nexport function buildNavModel(team: Team): NavModelItem {\n  const navModel = {\n    img: team.avatarUrl,\n    id: 'team-' + team.id,\n    subTitle: 'Manage members & settings',\n    url: '',\n    text: team.name,\n    breadcrumbs: [{ title: 'Teams', url: 'org/teams' }],\n    children: [\n      {\n        active: false,\n        icon: 'users-alt',\n        id: `team-members-${team.id}`,\n        text: 'Members',\n        url: `org/teams/edit/${team.id}/members`,\n      },\n      {\n        active: false,\n        icon: 'sliders-v-alt',\n        id: `team-settings-${team.id}`,\n        text: 'Settings',\n        url: `org/teams/edit/${team.id}/settings`,\n      },\n    ],\n  };\n\n  if (config.licenseInfo.hasLicense) {\n    navModel.children.push({\n      active: false,\n      icon: 'sync',\n      id: `team-groupsync-${team.id}`,\n      text: 'External group sync',\n      url: `org/teams/edit/${team.id}/groupsync`,\n    });\n  }\n\n  return navModel;\n}\n\nexport function getTeamLoadingNav(pageName: string): NavModel {\n  const main = buildNavModel({\n    avatarUrl: 'public/img/user_profile.png',\n    id: 1,\n    name: 'Loading',\n    email: 'loading',\n    memberCount: 0,\n    permission: TeamPermissionLevel.Member,\n  });\n\n  let node: NavModelItem;\n\n  // find active page\n  for (const child of main.children!) {\n    if (child.id!.indexOf(pageName) > 0) {\n      child.active = true;\n      node = child;\n      break;\n    }\n  }\n\n  return {\n    main: main,\n    node: node!,\n  };\n}\n"],"sourceRoot":""}