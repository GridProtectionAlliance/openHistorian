{"version":3,"file":"PlaylistNewPage.1f0843b915e9c7301ed5.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/OptionsUI/DashboardPickerByID.tsx","webpack://grafana/./public/app/features/playlist/PlaylistTableRow.tsx","webpack://grafana/./public/app/features/playlist/PlaylistTableRows.tsx","webpack://grafana/./public/app/features/playlist/PlaylistTable.tsx","webpack://grafana/./public/app/features/playlist/PlaylistForm.tsx","webpack://grafana/./public/app/features/playlist/usePlaylistItems.tsx","webpack://grafana/./public/app/features/playlist/PlaylistNewPage.tsx","webpack://grafana/./public/app/features/playlist/api.ts","webpack://grafana/./public/app/features/playlist/styles.ts","webpack://grafana/./public/app/features/playlist/usePlaylist.tsx"],"sourcesContent":["import debounce from 'debounce-promise';\nimport React, { FC } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { AsyncSelect } from '@grafana/ui';\nimport { backendSrv } from 'app/core/services/backend_srv';\n\n/**\n * @deprecated prefer using dashboard uid rather than id\n */\nexport interface DashboardPickerItem {\n  id: number;\n  uid: string;\n  [key: string]: string | number;\n}\n\ninterface Props {\n  onChange: (dashboard?: DashboardPickerItem) => void;\n  value?: DashboardPickerItem;\n  width?: number;\n  isClearable?: boolean;\n  invalid?: boolean;\n  disabled?: boolean;\n  id?: string;\n  optionLabel?: string;\n  /** List of dashboard UIDs to be excluded from the select options */\n  excludedDashboards?: string[];\n}\n\n/**\n * @deprecated prefer using dashboard uid rather than id\n */\nexport const DashboardPickerByID: FC<Props> = ({\n  onChange: propsOnChange,\n  value,\n  width,\n  isClearable = false,\n  invalid,\n  disabled,\n  id,\n  optionLabel = 'label',\n  excludedDashboards,\n}) => {\n  const debouncedSearch = debounce((query: string) => getDashboards(query || '', optionLabel, excludedDashboards), 300);\n  const option = value ? { value, [optionLabel]: value[optionLabel] } : undefined;\n  const onChange = (item: SelectableValue<DashboardPickerItem>) => {\n    propsOnChange(item?.value);\n  };\n\n  return (\n    <AsyncSelect\n      inputId={id}\n      width={width}\n      isClearable={isClearable}\n      defaultOptions={true}\n      loadOptions={debouncedSearch}\n      onChange={onChange}\n      placeholder=\"Select dashboard\"\n      noOptionsMessage=\"No dashboards found\"\n      value={option}\n      invalid={invalid}\n      disabled={disabled}\n      getOptionLabel={(option) => option[optionLabel]}\n    />\n  );\n};\n\nasync function getDashboards(\n  query: string,\n  label: string,\n  excludedDashboards?: string[]\n): Promise<Array<SelectableValue<DashboardPickerItem>>> {\n  const result = await backendSrv.search({ type: 'dash-db', query, limit: 100 });\n  const dashboards = result.map(({ id, uid = '', title, folderTitle }) => {\n    const value: DashboardPickerItem = {\n      id,\n      uid,\n      [label]: `${folderTitle ?? 'General'}/${title}`,\n    };\n\n    return { value, [label]: value[label] };\n  });\n\n  if (excludedDashboards) {\n    return dashboards.filter(({ value }) => !excludedDashboards.includes(value.uid as string));\n  }\n\n  return dashboards;\n}\n","import { css, cx } from '@emotion/css';\nimport React, { FC, MouseEvent } from 'react';\n\nimport { GrafanaTheme } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Icon, IconButton, useStyles } from '@grafana/ui';\n\nimport { TagBadge } from '../../core/components/TagFilter/TagBadge';\n\nimport { PlaylistItem } from './types';\n\ninterface PlaylistTableRowProps {\n  first: boolean;\n  last: boolean;\n  item: PlaylistItem;\n  onMoveUp: (item: PlaylistItem) => void;\n  onMoveDown: (item: PlaylistItem) => void;\n  onDelete: (item: PlaylistItem) => void;\n}\n\nexport const PlaylistTableRow: FC<PlaylistTableRowProps> = ({ item, onDelete, onMoveDown, onMoveUp, first, last }) => {\n  const styles = useStyles(getStyles);\n  const onDeleteClick = (event: MouseEvent) => {\n    event.preventDefault();\n    onDelete(item);\n  };\n  const onMoveDownClick = (event: MouseEvent) => {\n    event.preventDefault();\n    onMoveDown(item);\n  };\n  const onMoveUpClick = (event: MouseEvent) => {\n    event.preventDefault();\n    onMoveUp(item);\n  };\n\n  return (\n    <tr aria-label={selectors.pages.PlaylistForm.itemRow} key={item.title}>\n      {item.type === 'dashboard_by_id' ? (\n        <td className={cx(styles.td, styles.item)}>\n          <Icon name=\"apps\" aria-label={selectors.pages.PlaylistForm.itemIdType} />\n          <span>{item.title}</span>\n        </td>\n      ) : null}\n      {item.type === 'dashboard_by_tag' ? (\n        <td className={cx(styles.td, styles.item)}>\n          <Icon name=\"tag-alt\" aria-label={selectors.pages.PlaylistForm.itemTagType} />\n          <TagBadge key={item.id} label={item.title} removeIcon={false} count={0} />\n        </td>\n      ) : null}\n      <td className={cx(styles.td, styles.settings)}>\n        {!first ? (\n          <IconButton\n            name=\"arrow-up\"\n            size=\"md\"\n            onClick={onMoveUpClick}\n            aria-label={selectors.pages.PlaylistForm.itemMoveUp}\n            type=\"button\"\n          />\n        ) : null}\n        {!last ? (\n          <IconButton\n            name=\"arrow-down\"\n            size=\"md\"\n            onClick={onMoveDownClick}\n            aria-label={selectors.pages.PlaylistForm.itemMoveDown}\n            type=\"button\"\n          />\n        ) : null}\n        <IconButton\n          name=\"times\"\n          size=\"md\"\n          onClick={onDeleteClick}\n          aria-label={selectors.pages.PlaylistForm.itemDelete}\n          type=\"button\"\n        />\n      </td>\n    </tr>\n  );\n};\n\nfunction getStyles(theme: GrafanaTheme) {\n  return {\n    td: css`\n      label: td;\n      line-height: 28px;\n      max-width: 335px;\n      white-space: nowrap;\n      text-overflow: ellipsis;\n      overflow: hidden;\n    `,\n    item: css`\n      label: item;\n      span {\n        margin-left: ${theme.spacing.xs};\n      }\n    `,\n    settings: css`\n      label: settings;\n      text-align: right;\n    `,\n  };\n}\n","import React, { FC } from 'react';\n\nimport { PlaylistTableRow } from './PlaylistTableRow';\nimport { PlaylistItem } from './types';\n\ninterface PlaylistTableRowsProps {\n  items: PlaylistItem[];\n  onMoveUp: (item: PlaylistItem) => void;\n  onMoveDown: (item: PlaylistItem) => void;\n  onDelete: (item: PlaylistItem) => void;\n}\n\nexport const PlaylistTableRows: FC<PlaylistTableRowsProps> = ({ items, onMoveUp, onMoveDown, onDelete }) => {\n  if (items.length === 0) {\n    return (\n      <tr>\n        <td>\n          <em>Playlist is empty. Add dashboards below.</em>\n        </td>\n      </tr>\n    );\n  }\n\n  return (\n    <>\n      {items.map((item, index) => {\n        const first = index === 0;\n        const last = index === items.length - 1;\n        return (\n          <PlaylistTableRow\n            first={first}\n            last={last}\n            item={item}\n            onDelete={onDelete}\n            onMoveDown={onMoveDown}\n            onMoveUp={onMoveUp}\n            key={item.title}\n          />\n        );\n      })}\n    </>\n  );\n};\n","import React, { FC } from 'react';\n\nimport { PlaylistTableRows } from './PlaylistTableRows';\nimport { PlaylistItem } from './types';\n\ninterface PlaylistTableProps {\n  items: PlaylistItem[];\n  onMoveUp: (item: PlaylistItem) => void;\n  onMoveDown: (item: PlaylistItem) => void;\n  onDelete: (item: PlaylistItem) => void;\n}\n\nexport const PlaylistTable: FC<PlaylistTableProps> = ({ items, onMoveUp, onMoveDown, onDelete }) => {\n  return (\n    <div className=\"gf-form-group\">\n      <h3 className=\"page-headering\">Dashboards</h3>\n\n      <table className=\"filter-table\">\n        <tbody>\n          <PlaylistTableRows items={items} onMoveUp={onMoveUp} onMoveDown={onMoveDown} onDelete={onDelete} />\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { config } from '@grafana/runtime';\nimport { Button, Field, Form, HorizontalGroup, Input, LinkButton } from '@grafana/ui';\nimport { DashboardPickerByID } from 'app/core/components/OptionsUI/DashboardPickerByID';\n\nimport { TagFilter } from '../../core/components/TagFilter/TagFilter';\nimport { SearchSrv } from '../../core/services/search_srv';\n\nimport { PlaylistTable } from './PlaylistTable';\nimport { Playlist } from './types';\nimport { usePlaylistItems } from './usePlaylistItems';\n\ninterface PlaylistFormProps {\n  onSubmit: (playlist: Playlist) => void;\n  playlist: Playlist;\n}\n\nconst searchSrv = new SearchSrv();\n\nexport const PlaylistForm: FC<PlaylistFormProps> = ({ onSubmit, playlist }) => {\n  const { name, interval, items: propItems } = playlist;\n  const { items, addById, addByTag, deleteItem, moveDown, moveUp } = usePlaylistItems(propItems);\n  return (\n    <div>\n      <Form onSubmit={(list: Playlist) => onSubmit({ ...list, items })} validateOn={'onBlur'}>\n        {({ register, errors }) => {\n          const isDisabled = items.length === 0 || Object.keys(errors).length > 0;\n          return (\n            <>\n              <Field label=\"Name\" invalid={!!errors.name} error={errors?.name?.message}>\n                <Input\n                  type=\"text\"\n                  {...register('name', { required: 'Name is required' })}\n                  placeholder=\"Name\"\n                  defaultValue={name}\n                  aria-label={selectors.pages.PlaylistForm.name}\n                />\n              </Field>\n              <Field label=\"Interval\" invalid={!!errors.interval} error={errors?.interval?.message}>\n                <Input\n                  type=\"text\"\n                  {...register('interval', { required: 'Interval is required' })}\n                  placeholder=\"5m\"\n                  defaultValue={interval ?? '5m'}\n                  aria-label={selectors.pages.PlaylistForm.interval}\n                />\n              </Field>\n\n              <PlaylistTable items={items} onMoveUp={moveUp} onMoveDown={moveDown} onDelete={deleteItem} />\n\n              <div className=\"gf-form-group\">\n                <h3 className=\"page-headering\">Add dashboards</h3>\n\n                <Field label=\"Add by title\">\n                  <DashboardPickerByID onChange={addById} id=\"dashboard-picker\" isClearable />\n                </Field>\n\n                <Field label=\"Add by tag\">\n                  <TagFilter\n                    isClearable\n                    tags={[]}\n                    hideValues\n                    tagOptions={searchSrv.getDashboardTags}\n                    onChange={addByTag}\n                    placeholder={''}\n                  />\n                </Field>\n              </div>\n\n              <HorizontalGroup>\n                <Button type=\"submit\" variant=\"primary\" disabled={isDisabled}>\n                  Save\n                </Button>\n                <LinkButton variant=\"secondary\" href={`${config.appSubUrl}/playlists`}>\n                  Cancel\n                </LinkButton>\n              </HorizontalGroup>\n            </>\n          );\n        }}\n      </Form>\n    </div>\n  );\n};\n","import { useCallback, useState } from 'react';\n\nimport { DashboardPickerItem } from 'app/core/components/OptionsUI/DashboardPickerByID';\n\nimport { PlaylistItem } from './types';\n\nexport function usePlaylistItems(playlistItems?: PlaylistItem[]) {\n  const [items, setItems] = useState<PlaylistItem[]>(playlistItems ?? []);\n\n  const addById = useCallback(\n    (dashboard?: DashboardPickerItem) => {\n      if (!dashboard || items.find((item) => item.id === dashboard.id)) {\n        return;\n      }\n\n      const newItem: PlaylistItem = {\n        id: dashboard.id,\n        title: dashboard.label as string,\n        type: 'dashboard_by_id',\n        value: dashboard.id.toString(10),\n        order: items.length + 1,\n      };\n      setItems([...items, newItem]);\n    },\n    [items]\n  );\n\n  const addByTag = useCallback(\n    (tags: string[]) => {\n      const tag = tags[0];\n      if (!tag || items.find((item) => item.value === tag)) {\n        return;\n      }\n\n      const newItem: PlaylistItem = {\n        title: tag,\n        type: 'dashboard_by_tag',\n        value: tag,\n        order: items.length + 1,\n      };\n      setItems([...items, newItem]);\n    },\n    [items]\n  );\n\n  const movePlaylistItem = useCallback(\n    (item: PlaylistItem, offset: number) => {\n      const newItems = [...items];\n      const currentPosition = newItems.indexOf(item);\n      const newPosition = currentPosition + offset;\n\n      if (newPosition >= 0 && newPosition < newItems.length) {\n        newItems.splice(currentPosition, 1);\n        newItems.splice(newPosition, 0, item);\n      }\n      setItems(newItems);\n    },\n    [items]\n  );\n\n  const moveUp = useCallback(\n    (item: PlaylistItem) => {\n      movePlaylistItem(item, -1);\n    },\n    [movePlaylistItem]\n  );\n\n  const moveDown = useCallback(\n    (item: PlaylistItem) => {\n      movePlaylistItem(item, 1);\n    },\n    [movePlaylistItem]\n  );\n\n  const deleteItem = useCallback(\n    (item: PlaylistItem) => {\n      setItems(items.filter((i) => i !== item));\n    },\n    [items]\n  );\n\n  return { items, addById, addByTag, deleteItem, moveDown, moveUp };\n}\n","import React from 'react';\n\nimport { locationService } from '@grafana/runtime';\nimport { useStyles2 } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\n\nimport { PlaylistForm } from './PlaylistForm';\nimport { createPlaylist } from './api';\nimport { getPlaylistStyles } from './styles';\nimport { Playlist } from './types';\nimport { usePlaylist } from './usePlaylist';\n\nexport const PlaylistNewPage = () => {\n  const styles = useStyles2(getPlaylistStyles);\n  const { playlist, loading } = usePlaylist();\n  const onSubmit = async (playlist: Playlist) => {\n    await createPlaylist(playlist);\n    locationService.push('/playlists');\n  };\n\n  return (\n    <Page navId=\"dashboards/playlists\">\n      <Page.Contents isLoading={loading}>\n        <h3 className={styles.subHeading}>New Playlist</h3>\n\n        <p className={styles.description}>\n          A playlist rotates through a pre-selected list of dashboards. A playlist can be a great way to build\n          situational awareness, or just show off your metrics to your team or visitors.\n        </p>\n\n        <PlaylistForm onSubmit={onSubmit} playlist={playlist} />\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default PlaylistNewPage;\n","import { getBackendSrv } from '@grafana/runtime';\n\nimport { notifyApp } from '../../core/actions';\nimport { createErrorNotification, createSuccessNotification } from '../../core/copy/appNotification';\nimport { dispatch } from '../../store/store';\n\nimport { Playlist, PlaylistDTO } from './types';\n\nexport async function createPlaylist(playlist: Playlist) {\n  await withErrorHandling(() => getBackendSrv().post('/api/playlists', playlist));\n}\n\nexport async function updatePlaylist(uid: string, playlist: Playlist) {\n  await withErrorHandling(() => getBackendSrv().put(`/api/playlists/${uid}`, playlist));\n}\n\nexport async function deletePlaylist(uid: string) {\n  await withErrorHandling(() => getBackendSrv().delete(`/api/playlists/${uid}`), 'Playlist deleted');\n}\n\nexport async function getPlaylist(uid: string): Promise<Playlist> {\n  const result: Playlist = await getBackendSrv().get(`/api/playlists/${uid}`);\n  return result;\n}\n\nexport async function getAllPlaylist(query: string): Promise<PlaylistDTO[]> {\n  const result: PlaylistDTO[] = await getBackendSrv().get('/api/playlists/', { query });\n  return result;\n}\n\nasync function withErrorHandling(apiCall: () => Promise<void>, message = 'Playlist saved') {\n  try {\n    await apiCall();\n    dispatch(notifyApp(createSuccessNotification(message)));\n  } catch (e) {\n    if (e instanceof Error) {\n      dispatch(notifyApp(createErrorNotification('Unable to save playlist', e)));\n    }\n  }\n}\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nexport function getPlaylistStyles(theme: GrafanaTheme2) {\n  return {\n    description: css`\n      label: description;\n      width: 555px;\n      margin-bottom: 20px;\n    `,\n    subHeading: css`\n      label: sub-heading;\n      margin-bottom: ${theme.spacing(2)};\n    `,\n  };\n}\n","import { useEffect, useState } from 'react';\n\nimport { getPlaylist } from './api';\nimport { Playlist } from './types';\n\nexport function usePlaylist(playlistUid?: string) {\n  const [playlist, setPlaylist] = useState<Playlist>({ items: [], interval: '5m', name: '', uid: '' });\n  const [loading, setLoading] = useState<boolean>(true);\n\n  useEffect(() => {\n    const initPlaylist = async () => {\n      if (!playlistUid) {\n        setLoading(false);\n        return;\n      }\n      const list = await getPlaylist(playlistUid);\n      setPlaylist(list);\n      setLoading(false);\n    };\n    initPlaylist();\n  }, [playlistUid]);\n\n  return { playlist, loading };\n}\n"],"names":["DashboardPickerByID","onChange","propsOnChange","value","width","isClearable","invalid","disabled","id","optionLabel","excludedDashboards","debouncedSearch","debounce","query","async","label","dashboards","backendSrv","type","limit","map","uid","title","folderTitle","filter","includes","getDashboards","option","undefined","AsyncSelect","inputId","defaultOptions","loadOptions","item","placeholder","noOptionsMessage","getOptionLabel","PlaylistTableRow","onDelete","onMoveDown","onMoveUp","first","last","styles","useStyles","getStyles","selectors","className","cx","td","Icon","name","TagBadge","removeIcon","count","settings","IconButton","size","onClick","event","preventDefault","theme","css","spacing","xs","PlaylistTableRows","items","length","index","PlaylistTable","searchSrv","SearchSrv","PlaylistForm","onSubmit","playlist","interval","propItems","addById","addByTag","deleteItem","moveDown","moveUp","playlistItems","setItems","useState","useCallback","dashboard","find","newItem","toString","order","tags","tag","movePlaylistItem","offset","newItems","currentPosition","indexOf","newPosition","splice","i","usePlaylistItems","Form","list","validateOn","register","errors","isDisabled","Object","keys","Field","error","message","Input","required","defaultValue","TagFilter","hideValues","tagOptions","getDashboardTags","HorizontalGroup","Button","variant","LinkButton","href","config","PlaylistNewPage","useStyles2","getPlaylistStyles","loading","usePlaylist","navId","isLoading","subHeading","description","createPlaylist","locationService","withErrorHandling","getBackendSrv","post","updatePlaylist","put","deletePlaylist","delete","getPlaylist","get","getAllPlaylist","apiCall","dispatch","notifyApp","createSuccessNotification","e","Error","createErrorNotification","playlistUid","setPlaylist","setLoading","useEffect","initPlaylist"],"sourceRoot":""}