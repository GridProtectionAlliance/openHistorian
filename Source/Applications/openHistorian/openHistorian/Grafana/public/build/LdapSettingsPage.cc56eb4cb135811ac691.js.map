{"version":3,"file":"LdapSettingsPage.cc56eb4cb135811ac691.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/FormPrompt/FormPrompt.tsx","webpack://grafana/./public/app/features/admin/ldap/LdapGroupMapping.tsx","webpack://grafana/./public/app/features/admin/ldap/LdapDrawer.tsx","webpack://grafana/./public/app/features/admin/ldap/LdapSettingsPage.tsx","webpack://grafana/./public/app/features/plugins/admin/components/Loader.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport history from 'history';\nimport { useEffect, useState } from 'react';\nimport { Prompt } from 'react-router-dom';\nimport { Navigate } from 'react-router-dom-v5-compat';\n\nimport { Button, Modal } from '@grafana/ui';\n\nexport interface Props {\n  confirmRedirect?: boolean;\n  onDiscard: () => void;\n  /** Extra check to invoke when location changes.\n   * Could be useful in multistep forms where each step has a separate URL\n   */\n  onLocationChange?: (location: history.Location) => void;\n}\n\n/**\n * Component handling redirects when a form has unsaved changes.\n * Page reloads are handled in useEffect via beforeunload event.\n * URL navigation is handled by react-router's components since it does not trigger beforeunload event.\n */\nexport const FormPrompt = ({ confirmRedirect, onDiscard, onLocationChange }: Props) => {\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const [blockedLocation, setBlockedLocation] = useState<history.Location | null>(null);\n  const [changesDiscarded, setChangesDiscarded] = useState(false);\n\n  useEffect(() => {\n    const onBeforeUnload = (e: BeforeUnloadEvent) => {\n      if (confirmRedirect) {\n        e.preventDefault();\n        e.returnValue = '';\n      }\n    };\n    window.addEventListener('beforeunload', onBeforeUnload);\n    return () => {\n      window.removeEventListener('beforeunload', onBeforeUnload);\n    };\n  }, [confirmRedirect]);\n\n  // Returning 'false' from this function will prevent navigation to the next URL\n  const handleRedirect = (location: history.Location) => {\n    // Do not show the unsaved changes modal if only the URL params have changed\n    const currentPath = window.location.pathname;\n    const nextPath = location.pathname;\n    if (currentPath === nextPath) {\n      return true;\n    }\n\n    const locationChangeCheck = onLocationChange?.(location);\n\n    let blockRedirect = confirmRedirect && !changesDiscarded;\n    if (locationChangeCheck !== undefined) {\n      blockRedirect = blockRedirect && locationChangeCheck;\n    }\n\n    if (blockRedirect) {\n      setModalIsOpen(true);\n      setBlockedLocation(location);\n      return false;\n    }\n\n    if (locationChangeCheck) {\n      onDiscard();\n    }\n\n    return true;\n  };\n\n  const onBackToForm = () => {\n    setModalIsOpen(false);\n    setBlockedLocation(null);\n  };\n\n  const onDiscardChanges = () => {\n    setModalIsOpen(false);\n    setChangesDiscarded(true);\n    onDiscard();\n  };\n\n  return (\n    <>\n      <Prompt when={true} message={handleRedirect} />\n      {blockedLocation && changesDiscarded && <Navigate replace to={blockedLocation} />}\n      <UnsavedChangesModal isOpen={modalIsOpen} onDiscard={onDiscardChanges} onBackToForm={onBackToForm} />\n    </>\n  );\n};\n\ninterface UnsavedChangesModalProps {\n  onDiscard: () => void;\n  onBackToForm: () => void;\n  isOpen: boolean;\n}\n\nconst UnsavedChangesModal = ({ onDiscard, onBackToForm, isOpen }: UnsavedChangesModalProps) => {\n  return (\n    <Modal\n      isOpen={isOpen}\n      title=\"Leave page?\"\n      onDismiss={onBackToForm}\n      icon=\"exclamation-triangle\"\n      className={css({ width: '500px' })}\n    >\n      <h5>Changes that you made may not be saved.</h5>\n      <Modal.ButtonRow>\n        <Button variant=\"secondary\" onClick={onBackToForm} fill=\"outline\">\n          Continue editing\n        </Button>\n        <Button variant=\"destructive\" onClick={onDiscard}>\n          Discard unsaved changes\n        </Button>\n      </Modal.ButtonRow>\n    </Modal>\n  );\n};\n","import { useFormContext } from 'react-hook-form';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Box, Button, Field, Input, RadioButtonGroup, Switch } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\nimport { t, Trans } from 'app/core/internationalization';\nimport { LdapPayload, OrgRole } from 'app/types';\n\nconst roleOptions: Array<SelectableValue<string>> = Object.keys(OrgRole).map((key) => {\n  return { label: key, value: key };\n});\n\ninterface GroupMappingProps {\n  onRemove: () => void;\n  groupMappingIndex: number;\n}\n\nexport const GroupMappingComponent = ({ groupMappingIndex, onRemove }: GroupMappingProps) => {\n  const { getValues, register, setValue } = useFormContext<LdapPayload>();\n  return (\n    <Box borderColor=\"strong\" borderStyle=\"solid\" padding={2} marginBottom={2}>\n      <Field\n        htmlFor=\"group-dn\"\n        label={t('ldap-drawer.group-mapping.group-dn.label', 'Group DN')}\n        description={t(\n          'ldap-drawer.group-mapping.group-dn.description',\n          'The name of the key used to extract the ID token from the returned OAuth2 token.'\n        )}\n      >\n        <Input id=\"group-dn\" {...register(`settings.config.servers.0.group_mappings.${groupMappingIndex}.group_dn`)} />\n      </Field>\n      <Field label={t('ldap-drawer.group-mapping.org-role.label', 'Org role *')}>\n        <RadioButtonGroup\n          id={`org-role-${groupMappingIndex}`}\n          options={roleOptions}\n          value={getValues(`settings.config.servers.0.group_mappings.${groupMappingIndex}.org_role`)}\n          onChange={(v) => setValue(`settings.config.servers.0.group_mappings.${groupMappingIndex}.org_role`, v)}\n        />\n      </Field>\n      <Field\n        htmlFor=\"org-id\"\n        label={t('ldap-drawer.group-mapping.org-id.label', 'Org ID')}\n        description={t(\n          'ldap-drawer.group-mapping.org-id.description',\n          'The Grafana organization database id. Default org (ID 1) will be used if left out'\n        )}\n      >\n        <Input\n          id=\"org-id\"\n          type=\"number\"\n          {...register(`settings.config.servers.0.group_mappings.${groupMappingIndex}.org_id`, { valueAsNumber: true })}\n        />\n      </Field>\n      {contextSrv.isGrafanaAdmin && (\n        <Field\n          htmlFor=\"grafana-admin\"\n          label={t('ldap-drawer.group-mapping.grafana-admin.label', 'Grafana Admin')}\n          description={t(\n            'ldap-drawer.group-mapping.grafana-admin.description',\n            'If enabled, all users from this group will be Grafana Admins'\n          )}\n        >\n          <Switch\n            id=\"grafana-admin\"\n            {...register(`settings.config.servers.0.group_mappings.${groupMappingIndex}.grafana_admin`)}\n          />\n        </Field>\n      )}\n      <Button variant=\"secondary\" fill=\"outline\" icon=\"trash-alt\" onClick={onRemove}>\n        <Trans i18nKey=\"ldap-drawer.group-mapping.remove.button\">Remove group mapping</Trans>\n      </Button>\n    </Box>\n  );\n};\n","import { css } from '@emotion/css';\nimport { Dispatch, SetStateAction, useEffect, useId, useState } from 'react';\nimport { Controller, useFormContext } from 'react-hook-form';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport {\n  useStyles2,\n  Button,\n  CollapsableSection,\n  Divider,\n  Drawer,\n  Field,\n  Icon,\n  Input,\n  Label,\n  MultiSelect,\n  Select,\n  Stack,\n  Switch,\n  TextLink,\n  Tooltip,\n  RadioButtonGroup,\n  SecretInput,\n} from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\nimport { LdapPayload, MapKeyCertConfigured } from 'app/types';\n\nimport { GroupMappingComponent } from './LdapGroupMapping';\n\ninterface Props {\n  onClose: () => void;\n  mapKeyCertConfigured: MapKeyCertConfigured;\n  setMapKeyCertConfigured: Dispatch<SetStateAction<MapKeyCertConfigured>>;\n}\n\nconst serverConfig = 'settings.config.servers.0';\nconst tlsOptions: Array<SelectableValue<string>> = ['TLS1.2', 'TLS1.3'].map((v) => ({ label: v, value: v }));\nenum EncryptionProvider {\n  Base64 = 'base64',\n  FilePath = 'path',\n}\n\nexport const LdapDrawerComponent = ({\n  onClose,\n  mapKeyCertConfigured: mapCertConfigured,\n  setMapKeyCertConfigured: setMapCertConfigured,\n}: Props) => {\n  const [encryptionProvider, setEncryptionProvider] = useState(EncryptionProvider.Base64);\n\n  const styles = useStyles2(getStyles);\n  const { control, getValues, register, setValue, watch } = useFormContext<LdapPayload>();\n\n  const nameId = useId();\n  const surnameId = useId();\n  const usernameId = useId();\n  const memberOfId = useId();\n  const emailId = useId();\n\n  useEffect(() => {\n    const { client_cert, client_key, root_ca_cert } = getValues(serverConfig);\n    setEncryptionProvider(\n      !client_cert?.length && !client_key?.length && !root_ca_cert?.length\n        ? EncryptionProvider.Base64\n        : EncryptionProvider.FilePath\n    );\n  }, [getValues]);\n\n  const renderMultiSelectLabel = (value: string) => {\n    if (value.length >= 5) {\n      return `${value.slice(0, 2)}...${value.slice(-2)}`;\n    }\n    return value;\n  };\n\n  const attributesLabel = (\n    <Label\n      className={styles.sectionLabel}\n      description={t(\n        'ldap-drawer.attributes-section.description',\n        \"Specify the LDAP attributes that map to the user's given name, surname, and email address, ensuring the application correctly retrieves and displays user information.\"\n      )}\n    >\n      <Trans i18nKey=\"ldap-drawer.attributes-section.label\">Attributes</Trans>\n    </Label>\n  );\n\n  const groupMappingsLabel = (\n    <Label\n      className={styles.sectionLabel}\n      description={t('ldap-drawer.group-mapping-section.description', 'Map LDAP groups to Grafana org roles')}\n    >\n      <Trans i18nKey=\"ldap-drawer.group-mapping-section.label\">Group mapping</Trans>\n    </Label>\n  );\n\n  const useTlsDescription = (\n    <>\n      <Trans i18nKey=\"ldap-drawer.extra-security-section.use-ssl-tooltip\">\n        For a complete list of supported ciphers and TLS versions, refer to:\n      </Trans>{' '}\n      {/* eslint-disable-next-line @grafana/no-untranslated-strings */}\n      <TextLink style={{ fontSize: 'inherit' }} href=\"https://go.dev/src/crypto/tls/cipher_suites.go\" external>\n        https://go.dev/src/crypto/tls/cipher_suites.go\n      </TextLink>\n    </>\n  );\n\n  const onAddGroupMapping = () => {\n    const groupMappings = getValues(`${serverConfig}.group_mappings`) || [];\n    setValue(`${serverConfig}.group_mappings`, [\n      ...groupMappings,\n      {\n        group_dn: '',\n        org_id: 1,\n        org_role: 'Viewer',\n        grafana_admin: false,\n      },\n    ]);\n  };\n\n  const onRemoveGroupMapping = (index: number) => {\n    const groupMappings = getValues(`${serverConfig}.group_mappings`);\n    setValue(`${serverConfig}.group_mappings`, [...groupMappings.slice(0, index), ...groupMappings.slice(index + 1)]);\n  };\n\n  return (\n    <Drawer title={t('ldap-drawer.title', 'Advanced settings')} onClose={onClose}>\n      <CollapsableSection label={t('ldap-drawer.misc-section.label', 'Misc')} isOpen={true}>\n        <Field\n          label={t('ldap-drawer.misc-section.allow-sign-up-label', 'Allow sign-up')}\n          description={t(\n            'ldap-drawer.misc-section.allow-sign-up-descrition',\n            'If not enabled, only existing Grafana users can log in using LDAP'\n          )}\n        >\n          <Switch id=\"allow-sign-up\" {...register('settings.allowSignUp')} />\n        </Field>\n        <Field\n          label={t('ldap-drawer.misc-section.port-label', 'Port')}\n          description={t(\n            'ldap-drawer.misc-section.port-description',\n            'Default port is 389 without SSL or 636 with SSL'\n          )}\n        >\n          <Input\n            id=\"port\"\n            placeholder=\"389\"\n            type=\"number\"\n            {...register(`${serverConfig}.port`, { valueAsNumber: true })}\n          />\n        </Field>\n        <Field\n          label={t('ldap-drawer.misc-section.timeout-label', 'Timeout')}\n          description={t(\n            'ldap-drawer.misc-section.timeout-description',\n            'Timeout in seconds for the connection to the LDAP server'\n          )}\n        >\n          <Input\n            id=\"timeout\"\n            placeholder=\"10\"\n            type=\"number\"\n            {...register(`${serverConfig}.timeout`, { valueAsNumber: true })}\n          />\n        </Field>\n      </CollapsableSection>\n      <CollapsableSection label={attributesLabel} isOpen={true}>\n        <Field label={t('ldap-drawer.attributes-section.name-label', 'Name')}>\n          <Input id={nameId} {...register(`${serverConfig}.attributes.name`)} />\n        </Field>\n        <Field label={t('ldap-drawer.attributes-section.surname-label', 'Surname')}>\n          <Input id={surnameId} {...register(`${serverConfig}.attributes.surname`)} />\n        </Field>\n        <Field label={t('ldap-drawer.attributes-section.username-label', 'Username')}>\n          <Input id={usernameId} {...register(`${serverConfig}.attributes.username`)} />\n        </Field>\n        <Field label={t('ldap-drawer.attributes-section.member-of-label', 'Member Of')}>\n          <Input id={memberOfId} {...register(`${serverConfig}.attributes.member_of`)} />\n        </Field>\n        <Field label={t('ldap-drawer.attributes-section.email-label', 'Email')}>\n          <Input id={emailId} {...register(`${serverConfig}.attributes.email`)} />\n        </Field>\n      </CollapsableSection>\n      <CollapsableSection label={groupMappingsLabel} isOpen={true}>\n        <Field\n          htmlFor=\"skip-org-role-sync\"\n          label={t('ldap-drawer.group-mapping-section.skip-org-role-sync-label', 'Skip organization role sync')}\n          description={t(\n            'ldap-drawer.group-mapping-section.skip-org-role-sync-description',\n            'Prevent synchronizing users’ organization roles from your IdP'\n          )}\n        >\n          <Switch id=\"skip-org-role-sync\" {...register(`${serverConfig}.skip_org_role_sync`)} />\n        </Field>\n        <Field\n          htmlFor=\"group-search-filter\"\n          label={t('ldap-drawer.group-mapping-section.group-search-filter-label', 'Group search filter')}\n          description={t(\n            'ldap-drawer.group-mapping-section.group-search-filter-description',\n            'Used to filter and identify group entries within the directory'\n          )}\n        >\n          <Input id=\"group-search-filter\" {...register(`${serverConfig}.group_search_filter`)} />\n        </Field>\n        <Field label={t('ldap-drawer.group-mapping-section.group-search-base-dns-label', 'Group search base DNS')}>\n          <Controller\n            name={`${serverConfig}.group_search_base_dns`}\n            control={control}\n            render={({ field: { onChange, ref, value, ...field } }) => (\n              <MultiSelect\n                {...field}\n                allowCustomValue\n                className={styles.multiSelect}\n                noOptionsMessage=\"\"\n                placeholder={t(\n                  'ldap-drawer.group-mapping-section.group-search-base-dns-placeholder',\n                  'example: ou=groups,dc=example,dc=com'\n                )}\n                onChange={(v) => onChange(v.map(({ value }) => String(value)))}\n                value={value?.map((v) => ({ label: v, value: v }))}\n              />\n            )}\n          />\n        </Field>\n        <Field\n          htmlFor=\"group-search-filter-user-attribute\"\n          label={t(\n            'ldap-drawer.group-mapping-section.group-search-filter-user-attribute-label',\n            'Group name attribute'\n          )}\n          description={t(\n            'ldap-drawer.group-mapping-section.group-search-filter-user-attribute-description',\n            'Identifies users within group entries for filtering purposes'\n          )}\n        >\n          <Input\n            id=\"group-search-filter-user-attribute\"\n            {...register(`${serverConfig}.group_search_filter_user_attribute`)}\n          />\n        </Field>\n        {watch('settings.config.servers.0.group_mappings')?.map((_, i) => {\n          return <GroupMappingComponent key={i} groupMappingIndex={i} onRemove={() => onRemoveGroupMapping(i)} />;\n        })}\n        <Divider />\n        <Button className={styles.button} variant=\"secondary\" icon=\"plus\" onClick={() => onAddGroupMapping()}>\n          <Trans i18nKey=\"ldap-drawer.group-mapping-section.add.button\">Add group mapping</Trans>\n        </Button>\n      </CollapsableSection>\n      <CollapsableSection\n        label={t('ldap-drawer.extra-security-section.label', 'Extra security measures')}\n        isOpen={true}\n      >\n        <Field\n          label={t('ldap-drawer.extra-security-section.use-ssl-label', 'Use SSL')}\n          description={t(\n            'ldap-drawer.extra-security-section.use-ssl-description',\n            'Set to true if LDAP server should use TLS connection (either with STARTTLS or LDAPS)'\n          )}\n        >\n          <Stack>\n            <Switch id=\"use-ssl\" {...register(`${serverConfig}.use_ssl`)} />\n            <Tooltip content={useTlsDescription} interactive>\n              <Icon name=\"info-circle\" />\n            </Tooltip>\n          </Stack>\n        </Field>\n        {watch(`${serverConfig}.use_ssl`) && (\n          <>\n            <Field\n              label={t('ldap-drawer.extra-security-section.start-tls-label', 'Start TLS')}\n              description={t(\n                'ldap-drawer.extra-security-section.start-tls-description',\n                'If set to true, use LDAP with STARTTLS instead of LDAPS'\n              )}\n            >\n              <Switch id=\"start-tls\" {...register(`${serverConfig}.start_tls`)} />\n            </Field>\n            <Field\n              htmlFor=\"min-tls-version\"\n              label={t('ldap-drawer.extra-security-section.min-tls-version-label', 'Min TLS version')}\n              description={t(\n                'ldap-drawer.extra-security-section.min-tls-version-description',\n                'This is the minimum TLS version allowed. Accepted values are: TLS1.2, TLS1.3.'\n              )}\n            >\n              <Select\n                id=\"min-tls-version\"\n                options={tlsOptions}\n                value={watch(`${serverConfig}.min_tls_version`)}\n                onChange={({ value }) => setValue(`${serverConfig}.min_tls_version`, value)}\n              />\n            </Field>\n            <Field label={t('ldap-drawer.extra-security-section.tls-ciphers-label', 'TLS ciphers')}>\n              <Controller\n                name={`${serverConfig}.tls_ciphers`}\n                control={control}\n                render={({ field: { onChange, ref, value, ...field } }) => (\n                  <MultiSelect\n                    {...field}\n                    allowCustomValue\n                    className={styles.multiSelect}\n                    noOptionsMessage=\"\"\n                    placeholder={t(\n                      'ldap-drawer.extra-security-section.tls-ciphers-placeholder',\n                      'example: TLS_AES_256_GCM_SHA384'\n                    )}\n                    onChange={(v) => onChange(v.map(({ value }) => String(value)))}\n                    value={value?.map((v) => ({ label: v, value: v }))}\n                  />\n                )}\n              />\n            </Field>\n            <Field\n              label={t(\n                'ldap-drawer.extra-security-section.encryption-provider-label',\n                'Encryption key and certificate provision specification.'\n              )}\n              description={t(\n                'ldap-drawer.extra-security-section.encryption-provider-description',\n                'X.509 certificate provides the public part, while the private key issued in a PKCS#8 format provides the private part of the asymmetric encryption.'\n              )}\n            >\n              <RadioButtonGroup\n                id=\"encryption-provider\"\n                options={[\n                  {\n                    label: t(\n                      'ldap-drawer.extra-security-section.encryption-provider-base-64',\n                      'Base64-encoded content'\n                    ),\n                    value: EncryptionProvider.Base64,\n                  },\n                  {\n                    label: t('ldap-drawer.extra-security-section.encryption-provider-file-path', 'Path to files'),\n                    value: EncryptionProvider.FilePath,\n                  },\n                ]}\n                value={encryptionProvider}\n                onChange={setEncryptionProvider}\n              />\n            </Field>\n            {encryptionProvider === EncryptionProvider.Base64 && (\n              <>\n                <Field\n                  label={t(\n                    'ldap-drawer.extra-security-section.root-ca-cert-value-label',\n                    'Root CA certificate content'\n                  )}\n                >\n                  <Controller\n                    name={`${serverConfig}.root_ca_cert_value`}\n                    control={control}\n                    render={({ field: { onChange, ref, value, ...field } }) => (\n                      <MultiSelect\n                        {...field}\n                        allowCustomValue\n                        className={styles.multiSelect}\n                        noOptionsMessage=\"\"\n                        placeholder={t(\n                          'ldap-drawer.extra-security-section.root-ca-cert-value-placeholder',\n                          'example: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t'\n                        )}\n                        onChange={(v) => onChange(v.map(({ value }) => String(value)))}\n                        value={value?.map((v) => ({ label: renderMultiSelectLabel(v), value: v }))}\n                      />\n                    )}\n                  />\n                </Field>\n                <Field\n                  label={t('ldap-drawer.extra-security-section.client-cert-value-label', 'Client certificate content')}\n                >\n                  <Input\n                    id=\"client-cert\"\n                    placeholder={t(\n                      'ldap-drawer.extra-security-section.client-cert-value-placeholder',\n                      'Client certificate content in base64'\n                    )}\n                    type=\"text\"\n                    {...register(`${serverConfig}.client_cert_value`)}\n                  />\n                </Field>\n                <Field label={t('ldap-drawer.extra-security-section.client-key-value-label', 'Client key content')}>\n                  <SecretInput\n                    id=\"client-key\"\n                    placeholder={t(\n                      'ldap-drawer.extra-security-section.client-key-value-placeholder',\n                      'Client key content in base64'\n                    )}\n                    isConfigured={mapCertConfigured.clientKeyCertValue}\n                    onReset={() => {\n                      setValue(`${serverConfig}.client_key_value`, '');\n                      setMapCertConfigured({ ...mapCertConfigured, clientKeyCertValue: false });\n                    }}\n                  />\n                </Field>\n              </>\n            )}\n            {encryptionProvider === EncryptionProvider.FilePath && (\n              <>\n                <Field label={t('ldap-drawer.extra-security-section.root-ca-cert-label', 'Root CA certificate path')}>\n                  <Input\n                    id=\"root-ca-cert\"\n                    placeholder={t(\n                      'ldap-drawer.extra-security-section.root-ca-cert-placeholder',\n                      '/path/to/root_ca_cert.pem'\n                    )}\n                    type=\"text\"\n                    {...register(`${serverConfig}.root_ca_cert`)}\n                  />\n                </Field>\n                <Field label={t('ldap-drawer.extra-security-section.client-cert-label', 'Client certificate path')}>\n                  <Input\n                    id=\"client-cert\"\n                    placeholder={t(\n                      'ldap-drawer.extra-security-section.client-cert-placeholder',\n                      '/path/to/client_cert.pem'\n                    )}\n                    type=\"text\"\n                    {...register(`${serverConfig}.client_cert`)}\n                  />\n                </Field>\n                <Field label={t('ldap-drawer.extra-security-section.client-key-label', 'Client key path')}>\n                  <SecretInput\n                    id=\"client-key\"\n                    placeholder={t(\n                      'ldap-drawer.extra-security-section.client-key-placeholder',\n                      '/path/to/client_key.pem'\n                    )}\n                    isConfigured={mapCertConfigured.clientKeyCertPath}\n                    onReset={() => {\n                      setValue(`${serverConfig}.client_key`, '');\n                      setMapCertConfigured({ ...mapCertConfigured, clientKeyCertPath: false });\n                    }}\n                    value={watch(`${serverConfig}.client_key`)}\n                    onChange={({ currentTarget: { value } }) => setValue(`${serverConfig}.client_key`, value)}\n                  />\n                </Field>\n              </>\n            )}\n          </>\n        )}\n      </CollapsableSection>\n    </Drawer>\n  );\n};\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    sectionLabel: css({\n      fontSize: theme.typography.size.lg,\n    }),\n    button: css({\n      marginBottom: theme.spacing(4),\n    }),\n    multiSelect: css({\n      'div:last-of-type > svg': {\n        display: 'none',\n      },\n    }),\n  };\n}\n","import { css } from '@emotion/css';\nimport { useEffect, useState } from 'react';\nimport { Controller, FormProvider, useForm } from 'react-hook-form';\nimport { connect } from 'react-redux';\n\nimport { AppEvents, GrafanaTheme2, NavModelItem } from '@grafana/data';\nimport { getBackendSrv, getAppEvents, locationService, reportInteraction } from '@grafana/runtime';\nimport {\n  useStyles2,\n  Alert,\n  Box,\n  Button,\n  Field,\n  IconButton,\n  Input,\n  LinkButton,\n  Menu,\n  Stack,\n  Text,\n  TextLink,\n  Dropdown,\n  MultiSelect,\n  SecretInput,\n} from '@grafana/ui';\nimport { FormPrompt } from 'app/core/components/FormPrompt/FormPrompt';\nimport { Page } from 'app/core/components/Page/Page';\nimport config from 'app/core/config';\nimport { t, Trans } from 'app/core/internationalization';\nimport { Loader } from 'app/features/plugins/admin/components/Loader';\nimport { LdapPayload, MapKeyCertConfigured, StoreState } from 'app/types';\n\nimport { LdapDrawerComponent } from './LdapDrawer';\n\nconst appEvents = getAppEvents();\n\nconst mapStateToProps = (state: StoreState) => ({\n  ldapSsoSettings: state.ldap.ldapSsoSettings,\n});\n\nconst mapDispatchToProps = {};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nconst pageNav: NavModelItem = {\n  text: 'LDAP',\n  icon: 'shield',\n  id: 'LDAP',\n};\n\nconst serverConfig = 'settings.config.servers.0';\n\nconst isOptionDefined = (option: string | undefined) => option !== undefined && option !== '';\n\nconst emptySettings: LdapPayload = {\n  id: '',\n  provider: '',\n  source: '',\n  settings: {\n    activeSyncEnabled: false,\n    allowSignUp: false,\n    config: {\n      servers: [\n        {\n          attributes: {},\n          bind_dn: '',\n          bind_password: '',\n          client_cert: '',\n          client_cert_value: '',\n          client_key: '',\n          client_key_value: '',\n          group_mappings: [],\n          group_search_base_dns: [],\n          group_search_filter: '',\n          group_search_filter_user_attribute: '',\n          host: '',\n          min_tls_version: '',\n          port: 389,\n          root_ca_cert: '',\n          root_ca_cert_value: [],\n          search_base_dns: [],\n          search_filter: '',\n          skip_org_role_sync: false,\n          ssl_skip_verify: false,\n          start_tls: false,\n          timeout: 10,\n          tls_ciphers: [],\n          tls_skip_verify: false,\n          use_ssl: false,\n        },\n      ],\n    },\n    enabled: false,\n    skipOrgRoleSync: false,\n    syncCron: '',\n  },\n};\n\nexport const LdapSettingsPage = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n\n  const [isBindPasswordConfigured, setBindPasswordConfigured] = useState(false);\n  const [mapKeyCertConfigured, setMapKeyCertConfigured] = useState<MapKeyCertConfigured>({\n    clientKeyCertValue: false,\n    clientKeyCertPath: false,\n  });\n\n  const methods = useForm<LdapPayload>({ defaultValues: emptySettings });\n  const {\n    control,\n    formState: { isDirty, errors },\n    getValues,\n    setValue,\n    handleSubmit,\n    register,\n    reset,\n    watch,\n  } = methods;\n\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    async function init() {\n      const payload = await getSettings();\n      let serverConfig = emptySettings.settings.config.servers[0];\n      if (payload.settings.config.servers?.length > 0) {\n        serverConfig = payload.settings.config.servers[0];\n      }\n      setMapKeyCertConfigured({\n        clientKeyCertValue: isOptionDefined(serverConfig.client_key_value),\n        clientKeyCertPath: isOptionDefined(serverConfig.client_key),\n      });\n      setBindPasswordConfigured(isOptionDefined(serverConfig.bind_password));\n\n      reset(payload);\n      setIsLoading(false);\n    }\n    init();\n  }, [reset]);\n\n  /**\n   * Display warning if the feature flag is disabled\n   */\n  if (!config.featureToggles.ssoSettingsLDAP) {\n    return (\n      <Alert title=\"invalid configuration\">\n        <Trans i18nKey=\"ldap-settings-page.alert.feature-flag-disabled\">\n          This page is only accessible by enabling the <strong>ssoSettingsLDAP</strong> feature flag.\n        </Trans>\n      </Alert>\n    );\n  }\n\n  /**\n   * Fetches the settings from the backend\n   * @returns Promise<LdapPayload>\n   */\n  const getSettings = async () => {\n    try {\n      const payload = await getBackendSrv().get<LdapPayload>('/api/v1/sso-settings/ldap');\n      if (!payload || !payload.settings || !payload.settings.config) {\n        appEvents.publish({\n          type: AppEvents.alertError.name,\n          payload: [t('ldap-settings-page.alert.error-fetching', 'Error fetching LDAP settings')],\n        });\n        return emptySettings;\n      }\n      return payload;\n    } catch (error) {\n      appEvents.publish({\n        type: AppEvents.alertError.name,\n        payload: [t('ldap-settings-page.alert.error-fetching', 'Error fetching LDAP settings')],\n      });\n      return emptySettings;\n    }\n  };\n\n  /**\n   * Save payload to the backend\n   * @param payload LdapPayload\n   */\n  const putPayload = async (payload: LdapPayload) => {\n    try {\n      const result = await getBackendSrv().put('/api/v1/sso-settings/ldap', payload);\n      if (result) {\n        appEvents.publish({\n          type: AppEvents.alertError.name,\n          payload: [t('ldap-settings-page.alert.error-saving', 'Error saving LDAP settings')],\n        });\n      }\n      appEvents.publish({\n        type: AppEvents.alertSuccess.name,\n        payload: [t('ldap-settings-page.alert.saved', 'LDAP settings saved')],\n      });\n      reset(await getSettings());\n\n      // Delay redirect so the form state can update\n      setTimeout(() => {\n        locationService.push(`/admin/authentication`);\n      }, 300);\n    } catch (error) {\n      appEvents.publish({\n        type: AppEvents.alertError.name,\n        payload: [t('ldap-settings-page.alert.error-saving', 'Error saving LDAP settings')],\n      });\n    }\n  };\n\n  const onErrors = () => {\n    appEvents.publish({\n      type: AppEvents.alertError.name,\n      payload: [t('ldap-settings-page.alert.error-validate-form', 'Error validating LDAP settings')],\n    });\n  };\n\n  /**\n   * Button's Actions\n   */\n  const submitFormAndToggleSettings = async (payload: LdapPayload) => {\n    payload.settings.enabled = !payload.settings.enabled;\n    await putPayload(payload);\n    reportInteraction('authentication_ldap_enabled');\n  };\n  const saveForm = async () => {\n    await putPayload(getValues());\n    reportInteraction('authentication_ldap_saved');\n  };\n  const deleteLDAPConfig = async () => {\n    try {\n      setIsLoading(true);\n      await getBackendSrv().delete('/api/v1/sso-settings/ldap');\n      const payload = await getSettings();\n      appEvents.publish({\n        type: AppEvents.alertSuccess.name,\n        payload: [t('ldap-settings-page.alert.discard-success', 'LDAP settings discarded')],\n      });\n      reset(payload);\n      reportInteraction('authentication_ldap_deleted');\n\n      setTimeout(() => {\n        locationService.push(`/admin/authentication`);\n      }, 300);\n    } catch (error) {\n      appEvents.publish({\n        type: AppEvents.alertError.name,\n        payload: [t('ldap-settings-page.alert.error-saving', 'Error saving LDAP settings')],\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const onDiscard = () => {\n    reportInteraction('authentication_ldap_abandoned');\n  };\n\n  const isInvalidField = (field: string) => {\n    const err = errors?.settings?.config?.servers?.[0];\n    return typeof err === 'object' && field in err;\n  };\n\n  const subTitle = (\n    <Trans i18nKey=\"ldap-settings-page.subtitle\">\n      The LDAP integration in Grafana allows your Grafana users to log in with their LDAP credentials. Find out more in\n      our{' '}\n      <TextLink\n        href=\"https://grafana.com/docs/grafana/latest/setup-grafana/configure-security/configure-authentication/ldap/\"\n        external\n      >\n        <Trans i18nKey=\"ldap-settings-page.documentation\">documentation</Trans>\n      </TextLink>\n      .\n    </Trans>\n  );\n\n  const disabledFormAlert = (\n    <Alert title={t('ldap-settings-page.login-form-alert.title', 'Basic login disabled')}>\n      <Trans i18nKey=\"ldap-settings-page.login-form-alert.description\">\n        Your LDAP configuration is not working because the basic login form is currently disabled. Please enable the\n        login form to use LDAP authentication. You can enable it on the Authentication page under “Auth settings”.\n      </Trans>\n    </Alert>\n  );\n\n  return (\n    <Page navId=\"authentication\" pageNav={pageNav} subTitle={subTitle}>\n      <Page.Contents>\n        {config.disableLoginForm && disabledFormAlert}\n        <FormProvider {...methods}>\n          <form onSubmit={handleSubmit(submitFormAndToggleSettings, onErrors)}>\n            <FormPrompt confirmRedirect={isDirty} onDiscard={onDiscard} />\n            {isLoading && <Loader />}\n            {!isLoading && (\n              <section className={styles.form}>\n                <h3>\n                  <Trans i18nKey=\"ldap-settings-page.title\">Basic Settings</Trans>\n                </h3>\n                <Field\n                  label={t('ldap-settings-page.host.label', 'Server host')}\n                  required={true}\n                  error={t('ldap-settings-page.host.error', 'Server host is a required field')}\n                  invalid={isInvalidField('host')}\n                  description={t(\n                    'ldap-settings-page.host.description',\n                    'Hostname or IP address of the LDAP server you wish to connect to.'\n                  )}\n                >\n                  <Input\n                    id=\"host\"\n                    placeholder={t('ldap-settings-page.host.placeholder', 'example: 127.0.0.1')}\n                    type=\"text\"\n                    {...register(`${serverConfig}.host`, { required: true })}\n                  />\n                </Field>\n                <Field\n                  label={t('ldap-settings-page.bind-dn.label', 'Bind DN')}\n                  description={t(\n                    'ldap-settings-page.bind-dn.description',\n                    'Distinguished name of the account used to bind and authenticate to the LDAP server.'\n                  )}\n                >\n                  <Input\n                    id=\"bind-dn\"\n                    placeholder={t('ldap-settings-page.bind-dn.placeholder', 'example: cn=admin,dc=grafana,dc=org')}\n                    type=\"text\"\n                    {...register(`${serverConfig}.bind_dn`)}\n                  />\n                </Field>\n                <Field label={t('ldap-settings-page.bind-password.label', 'Bind password')}>\n                  <SecretInput\n                    id=\"bind-password\"\n                    isConfigured={isBindPasswordConfigured}\n                    onReset={() => {\n                      setValue(`${serverConfig}.bind_password`, '');\n                      setBindPasswordConfigured(false);\n                    }}\n                    value={watch(`${serverConfig}.bind_password`)}\n                    onChange={({ currentTarget: { value } }) => setValue(`${serverConfig}.bind_password`, value)}\n                  />\n                </Field>\n                <Field\n                  label={t('ldap-settings-page.search_filter.label', 'Search filter')}\n                  required={true}\n                  invalid={isInvalidField('search_filter')}\n                  error={t('ldap-settings-page.search_filter.error', 'Search filter is a required field')}\n                  description={t(\n                    'ldap-settings-page.search_filter.description',\n                    'LDAP search filter used to locate specific entries within the directory.'\n                  )}\n                >\n                  <Input\n                    id=\"search_filter\"\n                    placeholder={t('ldap-settings-page.search_filter.placeholder', 'example: cn=%s')}\n                    type=\"text\"\n                    {...register(`${serverConfig}.search_filter`, { required: true })}\n                  />\n                </Field>\n                <Field\n                  label={t('ldap-settings-page.search-base-dns.label', 'Search base DNS')}\n                  required={true}\n                  invalid={isInvalidField('search_base_dns')}\n                  error={t('ldap-settings-page.search-base-dns.error', 'Search base DNS is a required field')}\n                  description={t(\n                    'ldap-settings-page.search-base-dns.description',\n                    'An array of base dns to search through.'\n                  )}\n                >\n                  <Controller\n                    rules={{ required: true, validate: (value) => !!value?.length }}\n                    name={`${serverConfig}.search_base_dns`}\n                    control={control}\n                    render={({ field: { onChange, ref, ...field } }) => (\n                      <MultiSelect\n                        {...field}\n                        allowCustomValue\n                        className={styles.multiSelect}\n                        noOptionsMessage=\"\"\n                        placeholder={t('ldap-settings-page.search-base-dns.placeholder', 'example: dc=grafana,dc=org')}\n                        onChange={(v) => onChange(v.map(({ value }) => String(value)))}\n                      />\n                    )}\n                  />\n                </Field>\n                <Box borderColor=\"strong\" borderStyle=\"solid\" padding={2} width={68}>\n                  <Stack alignItems={'center'} direction={'row'} gap={2} justifyContent={'space-between'}>\n                    <Stack alignItems={'start'} direction={'column'}>\n                      <Text element=\"h2\">\n                        <Trans i18nKey=\"ldap-settings-page.advanced-settings-section.title\">Advanced Settings</Trans>\n                      </Text>\n                      <Text>\n                        <Trans i18nKey=\"ldap-settings-page.advanced-settings-section.subtitle\">\n                          Mappings, extra security measures, and more.\n                        </Trans>\n                      </Text>\n                    </Stack>\n                    <Button variant=\"secondary\" onClick={() => setIsDrawerOpen(true)}>\n                      <Trans i18nKey=\"ldap-settings-page.advanced-settings-section.edit-button\">Edit</Trans>\n                    </Button>\n                  </Stack>\n                </Box>\n                <Box display=\"flex\" gap={2} marginTop={5}>\n                  <Stack alignItems=\"center\" gap={2}>\n                    {!watch('settings.enabled') && (\n                      <Button type=\"submit\">\n                        <Trans i18nKey=\"ldap-settings-page.buttons-section.save-and-enable-button\">\n                          Save and enable\n                        </Trans>\n                      </Button>\n                    )}\n                    {watch('settings.enabled') && (\n                      <Button variant=\"secondary\" type=\"submit\">\n                        <Trans i18nKey=\"ldap-settings-page.buttons-section.disable-button\">Disable</Trans>\n                      </Button>\n                    )}\n                    <Button variant=\"secondary\" onClick={handleSubmit(saveForm)}>\n                      <Trans i18nKey=\"ldap-settings-page.buttons-section.save-button\">Save</Trans>\n                    </Button>\n                    <LinkButton href=\"/admin/authentication\" variant=\"secondary\">\n                      <Trans i18nKey=\"ldap-settings-page.buttons-section.discard-button\">Discard</Trans>\n                    </LinkButton>\n                    <Dropdown\n                      overlay={\n                        <Menu>\n                          <Menu.Item label=\"Reset to default values\" icon=\"history-alt\" onClick={deleteLDAPConfig} />\n                        </Menu>\n                      }\n                      placement=\"bottom-start\"\n                    >\n                      <IconButton\n                        tooltip=\"More actions\"\n                        title=\"More actions\"\n                        size=\"md\"\n                        variant=\"secondary\"\n                        name=\"ellipsis-v\"\n                        hidden={watch('source') === 'system'}\n                      />\n                    </Dropdown>\n                  </Stack>\n                </Box>\n              </section>\n            )}\n            {isDrawerOpen && (\n              <LdapDrawerComponent\n                onClose={() => setIsDrawerOpen(false)}\n                mapKeyCertConfigured={mapKeyCertConfigured}\n                setMapKeyCertConfigured={setMapKeyCertConfigured}\n              />\n            )}\n          </form>\n        </FormProvider>\n      </Page.Contents>\n    </Page>\n  );\n};\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    form: css({\n      width: theme.spacing(68),\n    }),\n    multiSelect: css({\n      'div:last-of-type > svg': {\n        display: 'none',\n      },\n    }),\n  };\n}\n\nexport default connector(LdapSettingsPage);\n","import { Box, LoadingPlaceholder } from '@grafana/ui';\n\nexport interface Props {\n  text?: string;\n}\n\nexport const Loader = ({ text = 'Loading...' }: Props) => {\n  return (\n    <Box display=\"flex\" alignItems=\"center\" direction=\"column\" justifyContent=\"center\" paddingTop={10}>\n      <LoadingPlaceholder text={text} />\n    </Box>\n  );\n};\n"],"names":["FormPrompt","confirmRedirect","onDiscard","onLocationChange","modalIsOpen","setModalIsOpen","blockedLocation","setBlockedLocation","changesDiscarded","setChangesDiscarded","onBeforeUnload","e","handleRedirect","location","currentPath","nextPath","locationChangeCheck","blockRedirect","onBackToForm","onDiscardChanges","UnsavedChangesModal","isOpen","roleOptions","key","GroupMappingComponent","groupMappingIndex","onRemove","getValues","register","setValue","Box","Field","Input","RadioButtonGroup","v","Switch","Button","serverConfig","tlsOptions","EncryptionProvider","LdapDrawerComponent","onClose","mapCertConfigured","setMapCertConfigured","encryptionProvider","setEncryptionProvider","styles","getStyles","control","watch","nameId","surnameId","usernameId","memberOfId","emailId","client_cert","client_key","root_ca_cert","renderMultiSelectLabel","value","attributesLabel","Label","groupMappingsLabel","useTlsDescription","TextLink","onAddGroupMapping","groupMappings","onRemoveGroupMapping","index","Drawer","CollapsableSection","onChange","ref","field","_","i","Divider","Stack","Tooltip","Icon","Select","SecretInput","theme","mapStateToProps","state","mapDispatchToProps","connector","pageNav","isOptionDefined","option","emptySettings","LdapSettingsPage","isLoading","setIsLoading","isDrawerOpen","setIsDrawerOpen","isBindPasswordConfigured","setBindPasswordConfigured","mapKeyCertConfigured","setMapKeyCertConfigured","methods","isDirty","errors","handleSubmit","reset","init","payload","getSettings","config","Alert","putPayload","onErrors","submitFormAndToggleSettings","saveForm","deleteLDAPConfig","isInvalidField","err","subTitle","disabledFormAlert","Page","Loader","Text","Dropdown","Menu","IconButton","text"],"sourceRoot":""}