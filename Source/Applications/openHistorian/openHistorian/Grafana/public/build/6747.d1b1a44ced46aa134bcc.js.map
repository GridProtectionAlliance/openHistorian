{"version":3,"file":"6747.d1b1a44ced46aa134bcc.js","mappings":"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","sources":["webpack://grafana/./public/app/features/datasources/components/DashboardsTable.tsx","webpack://grafana/./public/app/features/datasources/state/contexts.ts","webpack://grafana/./public/app/features/datasources/state/hooks.ts","webpack://grafana/./public/app/features/plugins/admin/components/Badges/PluginDisabledBadge.tsx","webpack://grafana/./public/app/features/plugins/admin/components/Badges/sharedStyles.ts","webpack://grafana/./public/app/features/plugins/admin/components/Badges/PluginInstallBadge.tsx","webpack://grafana/./public/app/features/plugins/admin/components/Badges/PluginEnterpriseBadge.tsx","webpack://grafana/./public/app/features/plugins/admin/components/Badges/PluginUpdateAvailableBadge.tsx","webpack://grafana/./public/app/features/plugins/admin/components/Loader.tsx","webpack://grafana/./public/app/features/plugins/admin/components/VersionList.tsx","webpack://grafana/./public/app/features/plugins/admin/hooks/usePluginConfig.tsx","webpack://grafana/./public/app/features/plugins/admin/components/AppConfigWrapper.tsx","webpack://grafana/./public/app/features/plugins/admin/components/PluginDashboards.tsx","webpack://grafana/./public/app/features/plugins/admin/components/PluginUsage.tsx","webpack://grafana/./public/app/features/plugins/admin/components/PluginDetailsBody.tsx","webpack://grafana/./public/app/features/plugins/admin/components/PluginDetailsDisabledError.tsx","webpack://grafana/./public/app/features/plugins/admin/components/PluginDetailsSignature.tsx","webpack://grafana/./public/app/features/plugins/admin/hooks/usePluginDetailsTabs.tsx","webpack://grafana/./public/app/features/plugins/admin/components/GetStartedWithPlugin/GetStartedWithApp.tsx","webpack://grafana/./public/app/features/plugins/admin/components/GetStartedWithPlugin/GetStartedWithDataSource.tsx","webpack://grafana/./public/app/features/plugins/admin/components/GetStartedWithPlugin/GetStartedWithPlugin.tsx","webpack://grafana/./public/app/features/plugins/admin/components/InstallControls/InstallControlsWarning.tsx","webpack://grafana/./public/app/features/plugins/admin/tracking.ts","webpack://grafana/./public/app/features/plugins/admin/components/InstallControls/InstallControlsButton.tsx","webpack://grafana/./public/app/features/plugins/admin/components/InstallControls/ExternallyManagedButton.tsx","webpack://grafana/./public/app/features/plugins/admin/components/PluginActions.tsx","webpack://grafana/./public/app/features/plugins/admin/components/PluginSubtitle.tsx","webpack://grafana/./public/app/features/plugins/admin/components/PluginDetailsHeaderDependencies.tsx","webpack://grafana/./public/app/features/plugins/admin/components/PluginSignatureDetailsBadge.tsx","webpack://grafana/./public/app/features/plugins/admin/components/PluginDetailsHeaderSignature.tsx","webpack://grafana/./public/app/features/plugins/admin/hooks/usePluginInfo.tsx","webpack://grafana/./public/app/features/plugins/admin/hooks/usePluginPageExtensions.tsx","webpack://grafana/./public/app/features/plugins/admin/components/PluginDetailsPage.tsx","webpack://grafana/./public/app/features/plugins/admin/state/selectors.ts","webpack://grafana/./public/app/features/plugins/admin/state/hooks.ts"],"sourcesContent":["import React from 'react';\n\nimport { Button, Icon } from '@grafana/ui';\nimport { PluginDashboard } from 'app/types';\n\nexport interface Props {\n  // List of plugin dashboards to show in the table\n  dashboards: PluginDashboard[];\n  // Callback used when the user clicks on importing a dashboard\n  onImport: (dashboard: PluginDashboard, overwrite: boolean) => void;\n  // Callback used when the user clicks on removing a dashboard\n  onRemove: (dashboard: PluginDashboard) => void;\n}\n\nexport function DashboardsTable({ dashboards, onImport, onRemove }: Props) {\n  function buttonText(dashboard: PluginDashboard) {\n    return dashboard.revision !== dashboard.importedRevision ? 'Update' : 'Re-import';\n  }\n\n  return (\n    <table className=\"filter-table\">\n      <tbody>\n        {dashboards.map((dashboard, index) => {\n          return (\n            <tr key={`${dashboard.dashboardId}-${index}`}>\n              <td className=\"width-1\">\n                <Icon name=\"apps\" />\n              </td>\n              <td>\n                {dashboard.imported ? (\n                  <a href={dashboard.importedUrl}>{dashboard.title}</a>\n                ) : (\n                  <span>{dashboard.title}</span>\n                )}\n              </td>\n              <td style={{ textAlign: 'right' }}>\n                {!dashboard.imported ? (\n                  <Button variant=\"secondary\" size=\"sm\" onClick={() => onImport(dashboard, false)}>\n                    Import\n                  </Button>\n                ) : (\n                  <Button variant=\"secondary\" size=\"sm\" onClick={() => onImport(dashboard, true)}>\n                    {buttonText(dashboard)}\n                  </Button>\n                )}\n                {dashboard.imported && (\n                  <Button\n                    aria-label=\"Delete dashboard\"\n                    icon=\"trash-alt\"\n                    variant=\"destructive\"\n                    size=\"sm\"\n                    onClick={() => onRemove(dashboard)}\n                  />\n                )}\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n\nexport default DashboardsTable;\n","import { createContext } from 'react';\n\nimport { DATASOURCES_ROUTES } from '../constants';\nimport { DataSourcesRoutes } from '../types';\n\n// The purpose of this context is to be able to override the data-sources routes (used for links for example) used under\n// the app/features/datasources modules, so we can reuse them more easily in different parts of the application (e.g. under Connections)\nexport const DataSourcesRoutesContext = createContext<DataSourcesRoutes>(DATASOURCES_ROUTES);\n","import { useContext, useEffect } from 'react';\n\nimport { DataSourcePluginMeta, DataSourceSettings, NavModelItem } from '@grafana/data';\nimport { cleanUpAction } from 'app/core/actions/cleanUp';\nimport appEvents from 'app/core/app_events';\nimport { contextSrv } from 'app/core/core';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { AccessControlAction, useDispatch, useSelector } from 'app/types';\nimport { ShowConfirmModalEvent } from 'app/types/events';\n\nimport { DataSourceRights } from '../types';\nimport { constructDataSourceExploreUrl } from '../utils';\n\nimport {\n  initDataSourceSettings,\n  testDataSource,\n  loadDataSource,\n  loadDataSources,\n  loadDataSourcePlugins,\n  addDataSource,\n  updateDataSource,\n  deleteLoadedDataSource,\n} from './actions';\nimport { DataSourcesRoutesContext } from './contexts';\nimport { getDataSourceLoadingNav, buildNavModel, getDataSourceNav } from './navModel';\nimport { initialDataSourceSettingsState } from './reducers';\nimport { getDataSource, getDataSourceMeta } from './selectors';\n\nexport const useInitDataSourceSettings = (uid: string) => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(initDataSourceSettings(uid));\n\n    return function cleanUp() {\n      dispatch(\n        cleanUpAction({\n          cleanupAction: (state) => (state.dataSourceSettings = initialDataSourceSettingsState),\n        })\n      );\n    };\n  }, [uid, dispatch]);\n};\n\nexport const useTestDataSource = (uid: string) => {\n  const dispatch = useDispatch();\n  const dataSourcesRoutes = useDataSourcesRoutes();\n\n  return () => dispatch(testDataSource(uid, dataSourcesRoutes.Edit));\n};\n\nexport const useLoadDataSources = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector((state) => state.dataSources.isLoadingDataSources);\n  const dataSources = useSelector((state) => state.dataSources.dataSources);\n\n  useEffect(() => {\n    dispatch(loadDataSources());\n  }, [dispatch]);\n\n  return { isLoading, dataSources };\n};\n\nexport const useLoadDataSource = (uid: string) => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(loadDataSource(uid));\n  }, [dispatch, uid]);\n};\n\nexport const useLoadDataSourcePlugins = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(loadDataSourcePlugins());\n  }, [dispatch]);\n};\n\nexport const useAddDatasource = () => {\n  const dispatch = useDispatch();\n  const dataSourcesRoutes = useDataSourcesRoutes();\n\n  return (plugin: DataSourcePluginMeta) => {\n    dispatch(addDataSource(plugin, dataSourcesRoutes.Edit));\n  };\n};\n\nexport const useUpdateDatasource = () => {\n  const dispatch = useDispatch();\n\n  return async (dataSource: DataSourceSettings) => dispatch(updateDataSource(dataSource));\n};\n\nexport const useDeleteLoadedDataSource = () => {\n  const dispatch = useDispatch();\n  const { name } = useSelector((state) => state.dataSources.dataSource);\n\n  return () => {\n    appEvents.publish(\n      new ShowConfirmModalEvent({\n        title: 'Delete',\n        text: `Are you sure you want to delete the \"${name}\" data source?`,\n        yesText: 'Delete',\n        icon: 'trash-alt',\n        onConfirm: () => dispatch(deleteLoadedDataSource()),\n      })\n    );\n  };\n};\n\nexport const useDataSource = (uid: string) => {\n  return useSelector((state) => getDataSource(state.dataSources, uid));\n};\n\nexport const useDataSourceExploreUrl = (uid: string) => {\n  const dataSource = useDataSource(uid);\n  return constructDataSourceExploreUrl(dataSource);\n};\n\nexport const useDataSourceMeta = (pluginType: string): DataSourcePluginMeta => {\n  return useSelector((state) => getDataSourceMeta(state.dataSources, pluginType));\n};\n\nexport const useDataSourceSettings = () => {\n  return useSelector((state) => state.dataSourceSettings);\n};\n\nexport const useDataSourceSettingsNav = (dataSourceId: string, pageId: string | null) => {\n  const dataSource = useDataSource(dataSourceId);\n  const { plugin, loadError, loading } = useDataSourceSettings();\n  const navIndex = useSelector((state) => state.navIndex);\n  const navIndexId = pageId ? `datasource-${pageId}-${dataSourceId}` : `datasource-settings-${dataSourceId}`;\n\n  if (loadError) {\n    const node: NavModelItem = {\n      text: loadError,\n      subTitle: 'Data Source Error',\n      icon: 'exclamation-triangle',\n    };\n\n    return {\n      node: node,\n      main: node,\n    };\n  }\n\n  if (loading || !plugin) {\n    return getNavModel(navIndex, navIndexId, getDataSourceLoadingNav('settings'));\n  }\n\n  return getNavModel(navIndex, navIndexId, getDataSourceNav(buildNavModel(dataSource, plugin), pageId || 'settings'));\n};\n\nexport const useDataSourceRights = (uid: string): DataSourceRights => {\n  const dataSource = useDataSource(uid);\n  const readOnly = dataSource.readOnly === true;\n  const hasWriteRights = contextSrv.hasPermissionInMetadata(AccessControlAction.DataSourcesWrite, dataSource);\n  const hasDeleteRights = contextSrv.hasPermissionInMetadata(AccessControlAction.DataSourcesDelete, dataSource);\n\n  return {\n    readOnly,\n    hasWriteRights,\n    hasDeleteRights,\n  };\n};\n\nexport const useDataSourcesRoutes = () => {\n  return useContext(DataSourcesRoutesContext);\n};\n","import React from 'react';\n\nimport { PluginErrorCode } from '@grafana/data';\nimport { Badge } from '@grafana/ui';\n\ntype Props = { error?: PluginErrorCode };\n\nexport function PluginDisabledBadge({ error }: Props): React.ReactElement {\n  const tooltip = errorCodeToTooltip(error);\n  return <Badge icon=\"exclamation-triangle\" text=\"Disabled\" color=\"red\" tooltip={tooltip} />;\n}\n\nfunction errorCodeToTooltip(error?: PluginErrorCode): string | undefined {\n  switch (error) {\n    case PluginErrorCode.modifiedSignature:\n      return 'Plugin disabled due to modified content';\n    case PluginErrorCode.invalidSignature:\n      return 'Plugin disabled due to invalid plugin signature';\n    case PluginErrorCode.missingSignature:\n      return 'Plugin disabled due to missing plugin signature';\n    case null:\n    case undefined:\n      return 'Plugin disabled';\n    default:\n      return `Plugin disabled due to unknown error${error ? `: ${error}` : ''}`;\n  }\n}\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nexport const getBadgeColor = (theme: GrafanaTheme2) => css`\n  background: ${theme.colors.background.primary};\n  border-color: ${theme.colors.border.strong};\n  color: ${theme.colors.text.secondary};\n`;\n","import React from 'react';\n\nimport { Badge, useStyles2 } from '@grafana/ui';\n\nimport { getBadgeColor } from './sharedStyles';\n\nexport function PluginInstalledBadge(): React.ReactElement {\n  const customBadgeStyles = useStyles2(getBadgeColor);\n  return <Badge text=\"Installed\" color=\"orange\" className={customBadgeStyles} />;\n}\n","import React from 'react';\n\nimport { featureEnabled } from '@grafana/runtime';\nimport { Badge, Button, HorizontalGroup, PluginSignatureBadge, useStyles2 } from '@grafana/ui';\n\nimport { CatalogPlugin } from '../../types';\n\nimport { getBadgeColor } from './sharedStyles';\n\ntype Props = { plugin: CatalogPlugin };\n\nexport function PluginEnterpriseBadge({ plugin }: Props): React.ReactElement {\n  const customBadgeStyles = useStyles2(getBadgeColor);\n  const onClick = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    ev.preventDefault();\n    window.open(\n      `https://grafana.com/grafana/plugins/${plugin.id}?utm_source=grafana_catalog_learn_more`,\n      '_blank',\n      'noopener,noreferrer'\n    );\n  };\n\n  if (featureEnabled('enterprise.plugins')) {\n    return <Badge text=\"Enterprise\" color=\"blue\" />;\n  }\n\n  return (\n    <HorizontalGroup>\n      <PluginSignatureBadge status={plugin.signature} />\n      <Badge icon=\"lock\" aria-label=\"lock icon\" text=\"Enterprise\" color=\"blue\" className={customBadgeStyles} />\n      <Button size=\"sm\" fill=\"text\" icon=\"external-link-alt\" onClick={onClick}>\n        Learn more\n      </Button>\n    </HorizontalGroup>\n  );\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2, PluginType } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { CatalogPlugin } from '../../types';\n\ntype Props = {\n  plugin: CatalogPlugin;\n};\n\nexport function PluginUpdateAvailableBadge({ plugin }: Props): React.ReactElement | null {\n  const styles = useStyles2(getStyles);\n\n  // Currently renderer plugins are not supported by the catalog due to complications related to installation / update / uninstall.\n  if (plugin.hasUpdate && !plugin.isCore && plugin.type !== PluginType.renderer) {\n    return <p className={styles.hasUpdate}>Update available!</p>;\n  }\n\n  return null;\n}\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    hasUpdate: css`\n      color: ${theme.colors.text.secondary};\n      font-size: ${theme.typography.bodySmall.fontSize};\n      margin-bottom: 0;\n    `,\n  };\n};\n","import React from 'react';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\n\nexport interface Props {\n  text?: string;\n}\n\nexport const Loader = ({ text = 'Loading...' }: Props) => {\n  return (\n    <div className=\"page-loader-wrapper\">\n      <LoadingPlaceholder text={text} />\n    </div>\n  );\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { dateTimeFormatTimeAgo, GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { getLatestCompatibleVersion } from '../helpers';\nimport { Version } from '../types';\n\ninterface Props {\n  versions?: Version[];\n  installedVersion?: string;\n}\n\nexport const VersionList = ({ versions = [], installedVersion }: Props) => {\n  const styles = useStyles2(getStyles);\n  const latestCompatibleVersion = getLatestCompatibleVersion(versions);\n\n  if (versions.length === 0) {\n    return <p>No version history was found.</p>;\n  }\n\n  return (\n    <table className={styles.table}>\n      <thead>\n        <tr>\n          <th>Version</th>\n          <th>Last updated</th>\n        </tr>\n      </thead>\n      <tbody>\n        {versions.map((version) => {\n          const isInstalledVersion = installedVersion === version.version;\n          return (\n            <tr key={version.version}>\n              {/* Version number */}\n              {isInstalledVersion ? (\n                <td className={styles.currentVersion}>{version.version} (installed version)</td>\n              ) : version.version === latestCompatibleVersion?.version ? (\n                <td>{version.version} (latest compatible version)</td>\n              ) : (\n                <td>{version.version}</td>\n              )}\n\n              {/* Last updated */}\n              <td className={isInstalledVersion ? styles.currentVersion : ''}>\n                {dateTimeFormatTimeAgo(version.createdAt)}\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    padding: ${theme.spacing(2, 4, 3)};\n  `,\n  table: css`\n    table-layout: fixed;\n    width: 100%;\n    td,\n    th {\n      padding: ${theme.spacing()} 0;\n    }\n    th {\n      font-size: ${theme.typography.h5.fontSize};\n    }\n  `,\n  currentVersion: css`\n    font-weight: ${theme.typography.fontWeightBold};\n  `,\n});\n","import { useAsync } from 'react-use';\n\nimport { loadPlugin } from '../../utils';\nimport { CatalogPlugin } from '../types';\n\nexport const usePluginConfig = (plugin?: CatalogPlugin) => {\n  return useAsync(async () => {\n    if (!plugin) {\n      return null;\n    }\n\n    if (plugin.isInstalled && !plugin.isDisabled) {\n      return loadPlugin(plugin.id);\n    }\n    return null;\n  }, [plugin?.id, plugin?.isInstalled, plugin?.isDisabled]);\n};\n","// Libraries\nimport { css } from '@emotion/css';\nimport { cloneDeep, extend } from 'lodash';\nimport React, { PureComponent } from 'react';\n\nimport { PluginMeta, AppPlugin, deprecationWarning } from '@grafana/data';\nimport { AngularComponent, getAngularLoader, getBackendSrv } from '@grafana/runtime';\nimport { Button } from '@grafana/ui';\n\ninterface Props {\n  app: AppPlugin;\n}\n\ninterface State {\n  angularCtrl: AngularComponent | null;\n  refresh: number;\n}\n\nexport class AppConfigCtrlWrapper extends PureComponent<Props, State> {\n  element: HTMLElement | null = null;\n  //@ts-ignore\n  model: PluginMeta;\n\n  // Needed for angular scope\n  preUpdateHook = () => Promise.resolve();\n  postUpdateHook = () => Promise.resolve();\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      angularCtrl: null,\n      refresh: 0,\n    };\n  }\n\n  componentDidMount() {\n    // Force a reload after the first mount -- is there a better way to do this?\n    setTimeout(() => {\n      this.setState({ refresh: this.state.refresh + 1 });\n    }, 5);\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (!this.element || this.state.angularCtrl) {\n      return;\n    }\n\n    // Set a copy of the meta\n    this.model = cloneDeep(this.props.app.meta);\n\n    const loader = getAngularLoader();\n    const template = '<plugin-component type=\"app-config-ctrl\"></plugin-component>';\n    const scopeProps = {\n      ctrl: this,\n      // used by angular injectorMonkeyPatch to detect this scenario\n      isAppConfigCtrl: true,\n    };\n    const angularCtrl = loader.load(this.element, scopeProps, template);\n\n    this.setState({ angularCtrl });\n  }\n\n  render() {\n    const model = this.model;\n\n    const withRightMargin = css({ marginRight: '8px' });\n\n    return (\n      <div>\n        <div ref={(element) => (this.element = element)} />\n        <br />\n        <br />\n        {model && (\n          <div className=\"gf-form\">\n            {!model.enabled && (\n              <Button variant=\"primary\" onClick={this.enable} className={withRightMargin}>\n                Enable\n              </Button>\n            )}\n            {model.enabled && (\n              <Button variant=\"primary\" onClick={this.update} className={withRightMargin}>\n                Update\n              </Button>\n            )}\n            {model.enabled && (\n              <Button variant=\"destructive\" onClick={this.disable} className={withRightMargin}>\n                Disable\n              </Button>\n            )}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  //-----------------------------------------------------------\n  // Copied from plugin_edit_ctrl\n  //-----------------------------------------------------------\n\n  update = () => {\n    const pluginId = this.model.id;\n\n    this.preUpdateHook()\n      .then(() => {\n        const updateCmd = extend(\n          {\n            enabled: this.model.enabled,\n            pinned: this.model.pinned,\n            jsonData: this.model.jsonData,\n            secureJsonData: this.model.secureJsonData,\n          },\n          {}\n        );\n        return getBackendSrv().post(`/api/plugins/${pluginId}/settings`, updateCmd);\n      })\n      .then(this.postUpdateHook)\n      .then((res) => {\n        window.location.href = window.location.href;\n      });\n  };\n\n  setPreUpdateHook = (callback: () => any) => {\n    this.preUpdateHook = callback;\n  };\n\n  setPostUpdateHook = (callback: () => any) => {\n    this.postUpdateHook = callback;\n  };\n\n  // Stub to avoid unknown function in legacy code\n  importDashboards = (): Promise<void> => {\n    deprecationWarning('AppConfig', 'importDashboards()');\n    return Promise.resolve();\n  };\n\n  enable = () => {\n    this.model.enabled = true;\n    this.model.pinned = true;\n    this.update();\n  };\n\n  disable = () => {\n    this.model.enabled = false;\n    this.model.pinned = false;\n    this.update();\n  };\n}\n","import { extend } from 'lodash';\nimport React, { PureComponent } from 'react';\n\nimport { AppEvents, PluginMeta, DataSourceApi } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { appEvents } from 'app/core/core';\nimport DashboardsTable from 'app/features/datasources/components/DashboardsTable';\nimport { PluginDashboard } from 'app/types';\n\ninterface Props {\n  plugin: PluginMeta;\n  datasource?: DataSourceApi;\n}\n\ninterface State {\n  dashboards: PluginDashboard[];\n  loading: boolean;\n}\n\nexport class PluginDashboards extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      loading: true,\n      dashboards: [],\n    };\n  }\n\n  async componentDidMount() {\n    const pluginId = this.props.plugin.id;\n    getBackendSrv()\n      .get(`/api/plugins/${pluginId}/dashboards`)\n      .then((dashboards: any) => {\n        this.setState({ dashboards, loading: false });\n      });\n  }\n\n  importAll = () => {\n    this.importNext(0);\n  };\n\n  private importNext = (index: number) => {\n    const { dashboards } = this.state;\n    return this.import(dashboards[index], true).then(() => {\n      if (index + 1 < dashboards.length) {\n        return new Promise<void>((resolve) => {\n          setTimeout(() => {\n            this.importNext(index + 1).then(() => {\n              resolve();\n            });\n          }, 500);\n        });\n      } else {\n        return Promise.resolve();\n      }\n    });\n  };\n\n  import = (dash: PluginDashboard, overwrite: boolean) => {\n    const { plugin, datasource } = this.props;\n\n    const installCmd: any = {\n      pluginId: plugin.id,\n      path: dash.path,\n      overwrite: overwrite,\n      inputs: [],\n    };\n\n    if (datasource) {\n      installCmd.inputs.push({\n        name: '*',\n        type: 'datasource',\n        pluginId: datasource.meta.id,\n        value: datasource.name,\n      });\n    }\n\n    return getBackendSrv()\n      .post(`/api/dashboards/import`, installCmd)\n      .then((res: PluginDashboard) => {\n        appEvents.emit(AppEvents.alertSuccess, ['Dashboard Imported', dash.title]);\n        extend(dash, res);\n        this.setState({ dashboards: [...this.state.dashboards] });\n      });\n  };\n\n  remove = (dash: PluginDashboard) => {\n    getBackendSrv()\n      .delete('/api/dashboards/uid/' + dash.uid)\n      .then(() => {\n        dash.imported = false;\n        this.setState({ dashboards: [...this.state.dashboards] });\n      });\n  };\n\n  render() {\n    const { loading, dashboards } = this.state;\n    if (loading) {\n      return <div>loading...</div>;\n    }\n    if (!dashboards || !dashboards.length) {\n      return <div>No dashboards are included with this plugin</div>;\n    }\n\n    return (\n      <div className=\"gf-form-group\">\n        <DashboardsTable dashboards={dashboards} onImport={this.import} onRemove={this.remove} />\n      </div>\n    );\n  }\n}\n","import { css } from '@emotion/css';\nimport React, { useMemo } from 'react';\nimport { useAsync } from 'react-use';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { of } from 'rxjs';\n\nimport { GrafanaTheme2, PluginMeta } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Alert, Spinner, useStyles2 } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { SearchResultsTable } from 'app/features/search/page/components/SearchResultsTable';\nimport { getGrafanaSearcher, SearchQuery } from 'app/features/search/service';\n\ntype Props = {\n  plugin: PluginMeta;\n};\n\nexport function PluginUsage({ plugin }: Props) {\n  const styles = useStyles2(getStyles);\n\n  const searchQuery = useMemo<SearchQuery>(() => {\n    return {\n      query: '*',\n      panel_type: plugin.id,\n      kind: ['panel'],\n    };\n  }, [plugin]);\n\n  const results = useAsync(() => {\n    return getGrafanaSearcher().search(searchQuery);\n  }, [searchQuery]);\n\n  const found = results.value;\n  if (found?.totalRows) {\n    return (\n      <div className={styles.wrap}>\n        <div className={styles.info}>\n          {plugin.name} is used <b>{found.totalRows}</b> times.\n        </div>\n        <AutoSizer>\n          {({ width, height }) => {\n            return (\n              <SearchResultsTable\n                response={found}\n                width={width}\n                height={height}\n                clearSelection={() => {}}\n                keyboardEvents={of()}\n                onTagSelected={() => {}}\n              />\n            );\n          }}\n        </AutoSizer>\n      </div>\n    );\n  }\n\n  if (results.loading) {\n    return <Spinner />;\n  }\n\n  if (!config.featureToggles.panelTitleSearch) {\n    return (\n      <Alert title=\"Missing feature toggle: panelTitleSearch\">\n        Plugin usage requires the new search index to find usage across dashboards\n      </Alert>\n    );\n  }\n\n  return (\n    <EmptyListCTA\n      title={`${plugin.name} is not used in any dashboards yet`}\n      buttonIcon=\"plus\"\n      buttonTitle=\"Create Dashboard\"\n      buttonLink={`dashboard/new?panelType=${plugin.id}&editPanel=1`}\n    />\n  );\n}\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrap: css`\n      width: 100%;\n      height: 100%;\n    `,\n    info: css`\n      padding-bottom: 30px;\n    `,\n  };\n};\n","import { css, cx } from '@emotion/css';\nimport React from 'react';\n\nimport { AppPlugin, GrafanaTheme2, PluginContextProvider, UrlQueryMap } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { VersionList } from '../components/VersionList';\nimport { usePluginConfig } from '../hooks/usePluginConfig';\nimport { CatalogPlugin, PluginTabIds } from '../types';\n\nimport { AppConfigCtrlWrapper } from './AppConfigWrapper';\nimport { PluginDashboards } from './PluginDashboards';\nimport { PluginUsage } from './PluginUsage';\n\ntype Props = {\n  plugin: CatalogPlugin;\n  queryParams: UrlQueryMap;\n  pageId: string;\n};\n\nexport function PluginDetailsBody({ plugin, queryParams, pageId }: Props): JSX.Element {\n  const styles = useStyles2(getStyles);\n  const { value: pluginConfig } = usePluginConfig(plugin);\n\n  if (pageId === PluginTabIds.OVERVIEW) {\n    return (\n      <div\n        className={cx(styles.readme, styles.container)}\n        dangerouslySetInnerHTML={{\n          __html: plugin.details?.readme ?? 'No plugin help or readme markdown file was found',\n        }}\n      />\n    );\n  }\n\n  if (pageId === PluginTabIds.VERSIONS) {\n    return (\n      <div className={styles.container}>\n        <VersionList versions={plugin.details?.versions} installedVersion={plugin.installedVersion} />\n      </div>\n    );\n  }\n\n  if (pageId === PluginTabIds.CONFIG && pluginConfig?.angularConfigCtrl) {\n    return (\n      <div className={styles.container}>\n        <AppConfigCtrlWrapper app={pluginConfig as AppPlugin} />\n      </div>\n    );\n  }\n\n  if (pluginConfig?.configPages) {\n    for (const configPage of pluginConfig.configPages) {\n      if (pageId === configPage.id) {\n        return (\n          <div className={styles.container}>\n            <PluginContextProvider meta={pluginConfig.meta}>\n              <configPage.body plugin={pluginConfig} query={queryParams} />\n            </PluginContextProvider>\n          </div>\n        );\n      }\n    }\n  }\n\n  if (pageId === PluginTabIds.USAGE && pluginConfig) {\n    return (\n      <div className={styles.container}>\n        <PluginUsage plugin={pluginConfig?.meta} />\n      </div>\n    );\n  }\n\n  if (pageId === PluginTabIds.DASHBOARDS && pluginConfig) {\n    return (\n      <div className={styles.container}>\n        <PluginDashboards plugin={pluginConfig?.meta} />\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <p>Page not found.</p>\n    </div>\n  );\n}\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  container: css``,\n  readme: css`\n    & img {\n      max-width: 100%;\n    }\n\n    h1,\n    h2,\n    h3 {\n      margin-top: ${theme.spacing(3)};\n      margin-bottom: ${theme.spacing(2)};\n    }\n\n    *:first-child {\n      margin-top: 0;\n    }\n\n    li {\n      margin-left: ${theme.spacing(2)};\n      & > p {\n        margin: ${theme.spacing()} 0;\n      }\n    }\n\n    a {\n      color: ${theme.colors.text.link};\n\n      &:hover {\n        color: ${theme.colors.text.link};\n        text-decoration: underline;\n      }\n    }\n\n    table {\n      table-layout: fixed;\n      width: 100%;\n\n      td,\n      th {\n        overflow-x: auto;\n        padding: ${theme.spacing(0.5)} ${theme.spacing(1)};\n      }\n\n      table,\n      th,\n      td {\n        border: 1px solid ${theme.colors.border.medium};\n        border-collapse: collapse;\n      }\n    }\n  `,\n});\n","import React, { ReactElement } from 'react';\n\nimport { PluginErrorCode } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Alert } from '@grafana/ui';\n\nimport { CatalogPlugin } from '../types';\n\ntype Props = {\n  className?: string;\n  plugin: CatalogPlugin;\n};\n\nexport function PluginDetailsDisabledError({ className, plugin }: Props): ReactElement | null {\n  if (!plugin.isDisabled) {\n    return null;\n  }\n\n  return (\n    <Alert\n      severity=\"error\"\n      title=\"Plugin disabled\"\n      className={className}\n      aria-label={selectors.pages.PluginPage.disabledInfo}\n    >\n      {renderDescriptionFromError(plugin.error)}\n      <p>Please contact your server administrator to get this resolved.</p>\n      <a\n        href=\"https://grafana.com/docs/grafana/latest/administration/cli/#plugins-commands\"\n        className=\"external-link\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        Read more about managing plugins\n      </a>\n    </Alert>\n  );\n}\n\nfunction renderDescriptionFromError(error?: PluginErrorCode): ReactElement {\n  switch (error) {\n    case PluginErrorCode.modifiedSignature:\n      return (\n        <p>\n          Grafana Labs checks each plugin to verify that it has a valid digital signature. While doing this, we\n          discovered that the content of this plugin does not match its signature. We can not guarantee the trustworthy\n          of this plugin and have therefore disabled it. We recommend you to reinstall the plugin to make sure you are\n          running a verified version of this plugin.\n        </p>\n      );\n    case PluginErrorCode.invalidSignature:\n      return (\n        <p>\n          Grafana Labs checks each plugin to verify that it has a valid digital signature. While doing this, we\n          discovered that it was invalid. We can not guarantee the trustworthy of this plugin and have therefore\n          disabled it. We recommend you to reinstall the plugin to make sure you are running a verified version of this\n          plugin.\n        </p>\n      );\n    case PluginErrorCode.missingSignature:\n      return (\n        <p>\n          Grafana Labs checks each plugin to verify that it has a valid digital signature. While doing this, we\n          discovered that there is no signature for this plugin. We can not guarantee the trustworthy of this plugin and\n          have therefore disabled it. We recommend you to reinstall the plugin to make sure you are running a verified\n          version of this plugin.\n        </p>\n      );\n    default:\n      return (\n        <p>\n          We failed to run this plugin due to an unkown reason and have therefore disabled it. We recommend you to\n          reinstall the plugin to make sure you are running a working version of this plugin.\n        </p>\n      );\n  }\n}\n","import React from 'react';\n\nimport { PluginErrorCode, PluginSignatureStatus } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Alert } from '@grafana/ui';\n\nimport { CatalogPlugin } from '../types';\n\ntype Props = {\n  className?: string;\n  plugin: CatalogPlugin;\n};\n\n// Designed to show signature information inside the active tab on the plugin's details page\nexport function PluginDetailsSignature({ className, plugin }: Props): React.ReactElement | null {\n  const isSignatureValid = plugin.signature === PluginSignatureStatus.valid;\n  const isCore = plugin.signature === PluginSignatureStatus.internal;\n  const isDisabled = plugin.isDisabled && isDisabledDueTooSignatureError(plugin.error);\n\n  // The basic information is already available in the header\n  if (isSignatureValid || isCore || isDisabled) {\n    return null;\n  }\n\n  return (\n    <Alert\n      severity=\"warning\"\n      title=\"Invalid plugin signature\"\n      aria-label={selectors.pages.PluginPage.signatureInfo}\n      className={className}\n    >\n      <p>\n        Grafana Labs checks each plugin to verify that it has a valid digital signature. Plugin signature verification\n        is part of our security measures to ensure plugins are safe and trustworthy. Grafana Labs can’t guarantee the\n        integrity of this unsigned plugin. Ask the plugin author to request it to be signed.\n      </p>\n\n      <a\n        href=\"https://grafana.com/docs/grafana/latest/plugins/plugin-signatures/\"\n        className=\"external-link\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        Read more about plugins signing.\n      </a>\n    </Alert>\n  );\n}\n\nfunction isDisabledDueTooSignatureError(error: PluginErrorCode | undefined) {\n  // If the plugin is disabled due to signature error we rely on the disabled\n  // error message instad of the warning about the signature.\n\n  switch (error) {\n    case PluginErrorCode.invalidSignature:\n    case PluginErrorCode.missingSignature:\n    case PluginErrorCode.modifiedSignature:\n      return true;\n\n    default:\n      return false;\n  }\n}\n","import { useMemo } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport { GrafanaPlugin, NavModelItem, PluginIncludeType, PluginType } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction } from 'app/types';\n\nimport { usePluginConfig } from '../hooks/usePluginConfig';\nimport { isOrgAdmin } from '../permissions';\nimport { CatalogPlugin, PluginTabIds, PluginTabLabels } from '../types';\n\ntype ReturnType = {\n  error: Error | undefined;\n  loading: boolean;\n  navModel: NavModelItem;\n  activePageId: PluginTabIds | string;\n};\n\nexport const usePluginDetailsTabs = (plugin?: CatalogPlugin, pageId?: PluginTabIds): ReturnType => {\n  const { loading, error, value: pluginConfig } = usePluginConfig(plugin);\n  const { pathname } = useLocation();\n  const defaultTab = useDefaultPage(plugin, pluginConfig);\n  const parentUrl = pathname.substring(0, pathname.lastIndexOf('/'));\n  const isPublished = Boolean(plugin?.isPublished);\n\n  const currentPageId = pageId || defaultTab;\n  const navModelChildren = useMemo(() => {\n    const canConfigurePlugins =\n      plugin && contextSrv.hasAccessInMetadata(AccessControlAction.PluginsWrite, plugin, isOrgAdmin());\n    const navModelChildren: NavModelItem[] = [];\n    if (isPublished) {\n      navModelChildren.push({\n        text: PluginTabLabels.VERSIONS,\n        id: PluginTabIds.VERSIONS,\n        icon: 'history',\n        url: `${pathname}?page=${PluginTabIds.VERSIONS}`,\n        active: PluginTabIds.VERSIONS === currentPageId,\n      });\n    }\n\n    // Not extending the tabs with the config pages if the plugin is not installed\n    if (!pluginConfig) {\n      return navModelChildren;\n    }\n\n    if (config.featureToggles.panelTitleSearch && pluginConfig.meta.type === PluginType.panel) {\n      navModelChildren.push({\n        text: PluginTabLabels.USAGE,\n        icon: 'list-ul',\n        id: PluginTabIds.USAGE,\n        url: `${pathname}?page=${PluginTabIds.USAGE}`,\n        active: PluginTabIds.USAGE === currentPageId,\n      });\n    }\n\n    if (!canConfigurePlugins) {\n      return navModelChildren;\n    }\n\n    if (pluginConfig.meta.type === PluginType.app) {\n      if (pluginConfig.angularConfigCtrl) {\n        navModelChildren.push({\n          text: 'Config',\n          icon: 'cog',\n          id: PluginTabIds.CONFIG,\n          url: `${pathname}?page=${PluginTabIds.CONFIG}`,\n          active: PluginTabIds.CONFIG === currentPageId,\n        });\n      }\n\n      if (pluginConfig.configPages) {\n        for (const configPage of pluginConfig.configPages) {\n          navModelChildren.push({\n            text: configPage.title,\n            icon: configPage.icon,\n            id: configPage.id,\n            url: `${pathname}?page=${configPage.id}`,\n            active: configPage.id === currentPageId,\n          });\n        }\n      }\n\n      if (pluginConfig.meta.includes?.find((include) => include.type === PluginIncludeType.dashboard)) {\n        navModelChildren.push({\n          text: 'Dashboards',\n          icon: 'apps',\n          id: PluginTabIds.DASHBOARDS,\n          url: `${pathname}?page=${PluginTabIds.DASHBOARDS}`,\n          active: PluginTabIds.DASHBOARDS === currentPageId,\n        });\n      }\n    }\n\n    return navModelChildren;\n  }, [plugin, pluginConfig, pathname, isPublished, currentPageId]);\n\n  const navModel: NavModelItem = {\n    text: plugin?.name ?? '',\n    img: plugin?.info.logos.small,\n    breadcrumbs: [{ title: 'Plugins', url: parentUrl }],\n    children: [\n      {\n        text: PluginTabLabels.OVERVIEW,\n        icon: 'file-alt',\n        id: PluginTabIds.OVERVIEW,\n        url: `${pathname}?page=${PluginTabIds.OVERVIEW}`,\n        active: PluginTabIds.OVERVIEW === currentPageId,\n      },\n      ...navModelChildren,\n    ],\n  };\n\n  return {\n    error,\n    loading,\n    navModel,\n    activePageId: currentPageId,\n  };\n};\n\nfunction useDefaultPage(plugin: CatalogPlugin | undefined, pluginConfig: GrafanaPlugin | undefined | null) {\n  if (!plugin || !pluginConfig) {\n    return PluginTabIds.OVERVIEW;\n  }\n\n  const hasAccess = contextSrv.hasAccessInMetadata(AccessControlAction.PluginsWrite, plugin, isOrgAdmin());\n\n  if (!hasAccess || pluginConfig.meta.type !== PluginType.app) {\n    return PluginTabIds.OVERVIEW;\n  }\n\n  if (pluginConfig.angularConfigCtrl) {\n    return PluginTabIds.CONFIG;\n  }\n\n  if (pluginConfig.configPages?.length) {\n    return pluginConfig.configPages[0].id;\n  }\n\n  return PluginTabIds.OVERVIEW;\n}\n","import React from 'react';\n\nimport { PluginMeta } from '@grafana/data';\nimport { Button } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction } from 'app/types';\n\nimport { updatePluginSettings } from '../../api';\nimport { usePluginConfig } from '../../hooks/usePluginConfig';\nimport { isOrgAdmin } from '../../permissions';\nimport { CatalogPlugin } from '../../types';\n\ntype Props = {\n  plugin: CatalogPlugin;\n};\n\nexport function GetStartedWithApp({ plugin }: Props): React.ReactElement | null {\n  const { value: pluginConfig } = usePluginConfig(plugin);\n\n  if (!pluginConfig) {\n    return null;\n  }\n\n  // Enforce RBAC\n  if (!contextSrv.hasAccessInMetadata(AccessControlAction.PluginsWrite, plugin, isOrgAdmin())) {\n    return null;\n  }\n\n  const { enabled, jsonData } = pluginConfig?.meta;\n\n  const enable = () =>\n    updatePluginSettingsAndReload(plugin.id, {\n      enabled: true,\n      pinned: true,\n      jsonData,\n    });\n\n  const disable = () => {\n    updatePluginSettingsAndReload(plugin.id, {\n      enabled: false,\n      pinned: false,\n      jsonData,\n    });\n  };\n\n  return (\n    <>\n      {!enabled && (\n        <Button variant=\"primary\" onClick={enable}>\n          Enable\n        </Button>\n      )}\n\n      {enabled && (\n        <Button variant=\"destructive\" onClick={disable}>\n          Disable\n        </Button>\n      )}\n    </>\n  );\n}\n\nconst updatePluginSettingsAndReload = async (id: string, data: Partial<PluginMeta>) => {\n  try {\n    await updatePluginSettings(id, data);\n\n    // Reloading the page as the plugin meta changes made here wouldn't be propagated throughout the app.\n    window.location.reload();\n  } catch (e) {\n    console.error('Error while updating the plugin', e);\n  }\n};\n","import React, { useCallback } from 'react';\n\nimport { DataSourcePluginMeta } from '@grafana/data';\nimport { Button } from '@grafana/ui';\nimport { useDataSourcesRoutes, addDataSource } from 'app/features/datasources/state';\nimport { useDispatch } from 'app/types';\n\nimport { isDataSourceEditor } from '../../permissions';\nimport { CatalogPlugin } from '../../types';\n\ntype Props = {\n  plugin: CatalogPlugin;\n};\n\nexport function GetStartedWithDataSource({ plugin }: Props): React.ReactElement | null {\n  const dispatch = useDispatch();\n  const dataSourcesRoutes = useDataSourcesRoutes();\n  const onAddDataSource = useCallback(() => {\n    const meta = {\n      name: plugin.name,\n      id: plugin.id,\n    } as DataSourcePluginMeta;\n\n    dispatch(addDataSource(meta, dataSourcesRoutes.Edit));\n  }, [dispatch, plugin, dataSourcesRoutes]);\n\n  if (!isDataSourceEditor()) {\n    return null;\n  }\n\n  return (\n    <Button variant=\"primary\" onClick={onAddDataSource}>\n      Create a {plugin.name} data source\n    </Button>\n  );\n}\n","import React, { ReactElement } from 'react';\n\nimport { PluginType } from '@grafana/data';\n\nimport { CatalogPlugin } from '../../types';\n\nimport { GetStartedWithApp } from './GetStartedWithApp';\nimport { GetStartedWithDataSource } from './GetStartedWithDataSource';\n\ntype Props = {\n  plugin: CatalogPlugin;\n};\n\nexport function GetStartedWithPlugin({ plugin }: Props): ReactElement | null {\n  if (!plugin.isInstalled || plugin.isDisabled) {\n    return null;\n  }\n\n  switch (plugin.type) {\n    case PluginType.datasource:\n      return <GetStartedWithDataSource plugin={plugin} />;\n    case PluginType.app:\n      return <GetStartedWithApp plugin={plugin} />;\n    default:\n      return null;\n  }\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2, PluginType } from '@grafana/data';\nimport { config, featureEnabled } from '@grafana/runtime';\nimport { HorizontalGroup, Icon, LinkButton, useStyles2 } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction } from 'app/types';\n\nimport { getExternalManageLink } from '../../helpers';\nimport { isGrafanaAdmin } from '../../permissions';\nimport { useIsRemotePluginsAvailable } from '../../state/hooks';\nimport { CatalogPlugin, PluginStatus, Version } from '../../types';\n\ninterface Props {\n  plugin: CatalogPlugin;\n  pluginStatus: PluginStatus;\n  latestCompatibleVersion?: Version;\n}\n\nexport const InstallControlsWarning = ({ plugin, pluginStatus, latestCompatibleVersion }: Props) => {\n  const styles = useStyles2(getStyles);\n  const isExternallyManaged = config.pluginAdminExternalManageEnabled;\n  const hasPermission = contextSrv.hasAccess(AccessControlAction.PluginsInstall, isGrafanaAdmin());\n  const isRemotePluginsAvailable = useIsRemotePluginsAvailable();\n  const isCompatible = Boolean(latestCompatibleVersion);\n\n  if (plugin.type === PluginType.renderer) {\n    return <div className={styles.message}>Renderer plugins cannot be managed by the Plugin Catalog.</div>;\n  }\n\n  if (plugin.type === PluginType.secretsmanager) {\n    return <div className={styles.message}>Secrets manager plugins cannot be managed by the Plugin Catalog.</div>;\n  }\n\n  if (plugin.isEnterprise && !featureEnabled('enterprise.plugins')) {\n    return (\n      <HorizontalGroup height=\"auto\" align=\"center\">\n        <span className={styles.message}>No valid Grafana Enterprise license detected.</span>\n        <LinkButton\n          href={`${getExternalManageLink(plugin.id)}?utm_source=grafana_catalog_learn_more`}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          size=\"sm\"\n          fill=\"text\"\n          icon=\"external-link-alt\"\n        >\n          Learn more\n        </LinkButton>\n      </HorizontalGroup>\n    );\n  }\n\n  if (plugin.isDev) {\n    return (\n      <div className={styles.message}>This is a development build of the plugin and can&#39;t be uninstalled.</div>\n    );\n  }\n\n  if (!hasPermission && !isExternallyManaged) {\n    const message = `You do not have permission to ${pluginStatus} this plugin.`;\n    return <div className={styles.message}>{message}</div>;\n  }\n\n  if (!plugin.isPublished) {\n    return (\n      <div className={styles.message}>\n        <Icon name=\"exclamation-triangle\" /> This plugin is not published to{' '}\n        <a href=\"https://www.grafana.com/plugins\" target=\"__blank\" rel=\"noreferrer\">\n          grafana.com/plugins\n        </a>{' '}\n        and can&#39;t be managed via the catalog.\n      </div>\n    );\n  }\n\n  if (!isCompatible) {\n    return (\n      <div className={styles.message}>\n        <Icon name=\"exclamation-triangle\" />\n        &nbsp;This plugin doesn&#39;t support your version of Grafana.\n      </div>\n    );\n  }\n\n  if (!isRemotePluginsAvailable) {\n    return (\n      <div className={styles.message}>\n        The install controls have been disabled because the Grafana server cannot access grafana.com.\n      </div>\n    );\n  }\n\n  return null;\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    message: css`\n      color: ${theme.colors.text.secondary};\n    `,\n  };\n};\n","import { reportInteraction } from '@grafana/runtime';\n\ntype PluginTrackingProps = {\n  // The ID of the plugin (e.g. grafana-azure-monitor-datasource)\n  plugin_id: string;\n  // The type of the plugin (e.g. 'app' or 'datasource')\n  plugin_type?: string;\n  // The path where the plugin details page was rendered (e.g. /plugins/grafana-azure-monitor-datasource )\n  path: string;\n};\n\nexport const trackPluginInstalled = (props: PluginTrackingProps) => {\n  reportInteraction('grafana_plugin_install_clicked', props);\n};\n\nexport const trackPluginUninstalled = (props: PluginTrackingProps) => {\n  reportInteraction('grafana_plugin_uninstall_clicked', props);\n};\n","import React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport { AppEvents } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { Button, HorizontalGroup, ConfirmModal } from '@grafana/ui';\nimport appEvents from 'app/core/app_events';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { removePluginFromNavTree } from 'app/core/reducers/navBarTree';\nimport { useDispatch } from 'app/types';\n\nimport { useInstallStatus, useUninstallStatus, useInstall, useUninstall, useUnsetInstall } from '../../state/hooks';\nimport { trackPluginInstalled, trackPluginUninstalled } from '../../tracking';\nimport { CatalogPlugin, PluginStatus, PluginTabIds, Version } from '../../types';\n\ntype InstallControlsButtonProps = {\n  plugin: CatalogPlugin;\n  pluginStatus: PluginStatus;\n  latestCompatibleVersion?: Version;\n  setNeedReload: (needReload: boolean) => void;\n};\n\nexport function InstallControlsButton({\n  plugin,\n  pluginStatus,\n  latestCompatibleVersion,\n  setNeedReload,\n}: InstallControlsButtonProps) {\n  const dispatch = useDispatch();\n  const [queryParams] = useQueryParams();\n  const location = useLocation();\n  const { isInstalling, error: errorInstalling } = useInstallStatus();\n  const { isUninstalling, error: errorUninstalling } = useUninstallStatus();\n  const install = useInstall();\n  const uninstall = useUninstall();\n  const unsetInstall = useUnsetInstall();\n  const [isConfirmModalVisible, setIsConfirmModalVisible] = useState(false);\n  const showConfirmModal = () => setIsConfirmModalVisible(true);\n  const hideConfirmModal = () => setIsConfirmModalVisible(false);\n  const uninstallBtnText = isUninstalling ? 'Uninstalling' : 'Uninstall';\n  const trackingProps = {\n    plugin_id: plugin.id,\n    plugin_type: plugin.type,\n    path: location.pathname,\n  };\n\n  useEffect(() => {\n    return () => {\n      // Remove possible installation errors\n      unsetInstall();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const onInstall = async () => {\n    trackPluginInstalled(trackingProps);\n    const result = await install(plugin.id, latestCompatibleVersion?.version);\n    if (!errorInstalling && !('error' in result)) {\n      appEvents.emit(AppEvents.alertSuccess, [`Installed ${plugin.name}`]);\n      if (plugin.type === 'app') {\n        setNeedReload(true);\n      }\n    }\n  };\n\n  const onUninstall = async () => {\n    hideConfirmModal();\n    trackPluginUninstalled(trackingProps);\n    await uninstall(plugin.id);\n    if (!errorUninstalling) {\n      // If an app plugin is uninstalled we need to reset the active tab when the config / dashboards tabs are removed.\n      const activePageId = queryParams.page;\n      const isViewingAppConfigPage = activePageId !== PluginTabIds.OVERVIEW && activePageId !== PluginTabIds.VERSIONS;\n      if (isViewingAppConfigPage) {\n        locationService.replace(`${location.pathname}?page=${PluginTabIds.OVERVIEW}`);\n      }\n      appEvents.emit(AppEvents.alertSuccess, [`Uninstalled ${plugin.name}`]);\n      if (plugin.type === 'app') {\n        dispatch(removePluginFromNavTree({ pluginID: plugin.id }));\n        setNeedReload(false);\n      }\n    }\n  };\n\n  const onUpdate = async () => {\n    await install(plugin.id, latestCompatibleVersion?.version, true);\n    if (!errorInstalling) {\n      appEvents.emit(AppEvents.alertSuccess, [`Updated ${plugin.name}`]);\n    }\n  };\n\n  if (pluginStatus === PluginStatus.UNINSTALL) {\n    return (\n      <>\n        <ConfirmModal\n          isOpen={isConfirmModalVisible}\n          title={`Uninstall ${plugin.name}`}\n          body=\"Are you sure you want to uninstall this plugin?\"\n          confirmText=\"Confirm\"\n          icon=\"exclamation-triangle\"\n          onConfirm={onUninstall}\n          onDismiss={hideConfirmModal}\n        />\n        <HorizontalGroup align=\"flex-start\" width=\"auto\" height=\"auto\">\n          <Button variant=\"destructive\" disabled={isUninstalling} onClick={showConfirmModal}>\n            {uninstallBtnText}\n          </Button>\n        </HorizontalGroup>\n      </>\n    );\n  }\n\n  if (pluginStatus === PluginStatus.UPDATE) {\n    return (\n      <HorizontalGroup align=\"flex-start\" width=\"auto\" height=\"auto\">\n        <Button disabled={isInstalling} onClick={onUpdate}>\n          {isInstalling ? 'Updating' : 'Update'}\n        </Button>\n        <Button variant=\"destructive\" disabled={isUninstalling} onClick={onUninstall}>\n          {uninstallBtnText}\n        </Button>\n      </HorizontalGroup>\n    );\n  }\n\n  return (\n    <Button disabled={isInstalling || errorInstalling} onClick={onInstall}>\n      {isInstalling ? 'Installing' : 'Install'}\n    </Button>\n  );\n}\n","import React from 'react';\n\nimport { HorizontalGroup, LinkButton } from '@grafana/ui';\n\nimport { getExternalManageLink } from '../../helpers';\nimport { PluginStatus } from '../../types';\n\ntype ExternallyManagedButtonProps = {\n  pluginId: string;\n  pluginStatus: PluginStatus;\n};\n\nexport function ExternallyManagedButton({ pluginId, pluginStatus }: ExternallyManagedButtonProps) {\n  const externalManageLink = `${getExternalManageLink(pluginId)}/?tab=installation`;\n\n  if (pluginStatus === PluginStatus.UPDATE) {\n    return (\n      <HorizontalGroup height=\"auto\">\n        <LinkButton href={externalManageLink} target=\"_blank\" rel=\"noopener noreferrer\">\n          Update via grafana.com\n        </LinkButton>\n        <LinkButton variant=\"destructive\" href={externalManageLink} target=\"_blank\" rel=\"noopener noreferrer\">\n          Uninstall via grafana.com\n        </LinkButton>\n      </HorizontalGroup>\n    );\n  }\n\n  if (pluginStatus === PluginStatus.UNINSTALL) {\n    return (\n      <LinkButton variant=\"destructive\" href={externalManageLink} target=\"_blank\" rel=\"noopener noreferrer\">\n        Uninstall via grafana.com\n      </LinkButton>\n    );\n  }\n\n  return (\n    <LinkButton href={externalManageLink} target=\"_blank\" rel=\"noopener noreferrer\">\n      Install via grafana.com\n    </LinkButton>\n  );\n}\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { HorizontalGroup, Icon, useStyles2, VerticalGroup } from '@grafana/ui';\n\nimport { GetStartedWithPlugin } from '../components/GetStartedWithPlugin';\nimport { InstallControlsButton } from '../components/InstallControls';\nimport { ExternallyManagedButton } from '../components/InstallControls/ExternallyManagedButton';\nimport { getLatestCompatibleVersion, hasInstallControlWarning, isInstallControlsEnabled } from '../helpers';\nimport { useIsRemotePluginsAvailable } from '../state/hooks';\nimport { CatalogPlugin, PluginStatus } from '../types';\n\ninterface Props {\n  plugin?: CatalogPlugin;\n}\n\nexport const PluginActions = ({ plugin }: Props) => {\n  const styles = useStyles2(getStyles);\n  const isRemotePluginsAvailable = useIsRemotePluginsAvailable();\n  const latestCompatibleVersion = getLatestCompatibleVersion(plugin?.details?.versions);\n  const [needReload, setNeedReload] = useState(false);\n\n  if (!plugin) {\n    return null;\n  }\n\n  const hasInstallWarning = hasInstallControlWarning(plugin, isRemotePluginsAvailable, latestCompatibleVersion);\n  const isExternallyManaged = config.pluginAdminExternalManageEnabled;\n  const pluginStatus = plugin.isInstalled\n    ? plugin.hasUpdate\n      ? PluginStatus.UPDATE\n      : PluginStatus.UNINSTALL\n    : PluginStatus.INSTALL;\n  const isInstallControlsDisabled =\n    plugin.isCore || plugin.isDisabled || !isInstallControlsEnabled() || hasInstallWarning;\n\n  return (\n    <VerticalGroup>\n      <HorizontalGroup>\n        {!isInstallControlsDisabled && (\n          <>\n            {isExternallyManaged ? (\n              <ExternallyManagedButton pluginId={plugin.id} pluginStatus={pluginStatus} />\n            ) : (\n              <InstallControlsButton\n                plugin={plugin}\n                latestCompatibleVersion={latestCompatibleVersion}\n                pluginStatus={pluginStatus}\n                setNeedReload={setNeedReload}\n              />\n            )}\n          </>\n        )}\n        <GetStartedWithPlugin plugin={plugin} />\n      </HorizontalGroup>\n      {needReload && (\n        <HorizontalGroup>\n          <Icon name=\"exclamation-triangle\" />\n          <span className={styles.message}>Refresh the page to see the changes</span>\n        </HorizontalGroup>\n      )}\n    </VerticalGroup>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    message: css`\n      color: ${theme.colors.text.secondary};\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, useStyles2 } from '@grafana/ui';\n\nimport { InstallControlsWarning } from '../components/InstallControls';\nimport { getLatestCompatibleVersion, hasInstallControlWarning } from '../helpers';\nimport { useInstallStatus, useIsRemotePluginsAvailable } from '../state/hooks';\nimport { CatalogPlugin, PluginStatus } from '../types';\n\ninterface Props {\n  plugin?: CatalogPlugin;\n}\n\nexport const PluginSubtitle = ({ plugin }: Props) => {\n  const isRemotePluginsAvailable = useIsRemotePluginsAvailable();\n  const styles = useStyles2(getStyles);\n  const { error: errorInstalling } = useInstallStatus();\n  if (!plugin) {\n    return null;\n  }\n  const latestCompatibleVersion = getLatestCompatibleVersion(plugin.details?.versions);\n  const pluginStatus = plugin.isInstalled\n    ? plugin.hasUpdate\n      ? PluginStatus.UPDATE\n      : PluginStatus.UNINSTALL\n    : PluginStatus.INSTALL;\n\n  return (\n    <div className={styles.subtitle}>\n      {errorInstalling && (\n        <Alert title={'message' in errorInstalling ? errorInstalling.message : ''}>\n          {typeof errorInstalling === 'string' ? errorInstalling : errorInstalling.error}\n        </Alert>\n      )}\n      {plugin?.description && <div>{plugin?.description}</div>}\n      {plugin?.details?.links && plugin.details.links.length > 0 && (\n        <span>\n          {plugin.details.links.map((link, index) => (\n            <React.Fragment key={index}>\n              {index > 0 && ' | '}\n              <a href={link.url} className=\"external-link\">\n                {link.name}\n              </a>\n            </React.Fragment>\n          ))}\n        </span>\n      )}\n      {hasInstallControlWarning(plugin, isRemotePluginsAvailable, latestCompatibleVersion) && (\n        <InstallControlsWarning\n          plugin={plugin}\n          pluginStatus={pluginStatus}\n          latestCompatibleVersion={latestCompatibleVersion}\n        />\n      )}\n    </div>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    subtitle: css`\n      display: flex;\n      flex-direction: column;\n      gap: ${theme.spacing(1)};\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { useStyles2, Icon } from '@grafana/ui';\n\nimport { Version, CatalogPlugin, PluginIconName } from '../types';\n\ntype Props = {\n  plugin: CatalogPlugin;\n  latestCompatibleVersion?: Version;\n  className?: string;\n};\n\nexport function PluginDetailsHeaderDependencies({\n  plugin,\n  latestCompatibleVersion,\n  className,\n}: Props): React.ReactElement | null {\n  const styles = useStyles2(getStyles);\n  const pluginDependencies = plugin.details?.pluginDependencies;\n  const grafanaDependency = plugin.isInstalled\n    ? plugin.details?.grafanaDependency\n    : latestCompatibleVersion?.grafanaDependency || plugin.details?.grafanaDependency;\n  const hasNoDependencyInfo = !grafanaDependency && (!pluginDependencies || !pluginDependencies.length);\n\n  if (hasNoDependencyInfo) {\n    return null;\n  }\n\n  return (\n    <Stack gap={1}>\n      {/* Grafana dependency */}\n      {Boolean(grafanaDependency) && (\n        <div className={styles.depBadge}>\n          <Icon name=\"grafana\" className={styles.icon} />\n          Grafana {grafanaDependency}\n        </div>\n      )}\n\n      {/* Plugin dependencies */}\n      {pluginDependencies && pluginDependencies.length > 0 && (\n        <div>\n          {pluginDependencies.map((p) => {\n            return (\n              <span className={styles.depBadge} key={p.name}>\n                <Icon name={PluginIconName[p.type]} className={styles.icon} />\n                {p.name} {p.version}\n              </span>\n            );\n          })}\n        </div>\n      )}\n    </Stack>\n  );\n}\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    dependencyTitle: css`\n      margin-right: ${theme.spacing(0.5)};\n\n      &::after {\n        content: '';\n        padding: 0;\n      }\n    `,\n    depBadge: css({\n      display: 'flex',\n      alignItems: 'flex-start',\n    }),\n    icon: css`\n      color: ${theme.colors.text.secondary};\n      margin-right: ${theme.spacing(0.5)};\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport { capitalize } from 'lodash';\nimport React from 'react';\n\nimport { GrafanaTheme2, PluginSignatureType } from '@grafana/data';\nimport { useStyles2, Icon, Badge, IconName } from '@grafana/ui';\n\nconst SIGNATURE_ICONS: Record<string, IconName> = {\n  [PluginSignatureType.grafana]: 'grafana',\n  [PluginSignatureType.commercial]: 'shield',\n  [PluginSignatureType.community]: 'shield',\n  DEFAULT: 'shield-exclamation',\n};\n\ntype Props = {\n  signatureType?: PluginSignatureType;\n  signatureOrg?: string;\n};\n\n// Shows more information about a valid signature\nexport function PluginSignatureDetailsBadge({ signatureType, signatureOrg = '' }: Props): React.ReactElement | null {\n  const styles = useStyles2(getStyles);\n\n  if (!signatureType && !signatureOrg) {\n    return null;\n  }\n\n  const signatureTypeText = signatureType === PluginSignatureType.grafana ? 'Grafana Labs' : capitalize(signatureType);\n  const signatureIcon = SIGNATURE_ICONS[signatureType || ''] || SIGNATURE_ICONS.DEFAULT;\n\n  return (\n    <>\n      <DetailsBadge>\n        <div className={styles.detailsWrapper}>\n          <strong className={styles.strong}>Level:&nbsp;</strong>\n          <Icon size=\"xs\" name={signatureIcon} />\n          &nbsp;\n          {signatureTypeText}\n        </div>\n      </DetailsBadge>\n\n      <DetailsBadge>\n        <strong className={styles.strong}>Signed by:</strong> {signatureOrg}\n      </DetailsBadge>\n    </>\n  );\n}\n\nexport const DetailsBadge = ({ children }: React.PropsWithChildren<{}>) => {\n  const styles = useStyles2(getStyles);\n\n  return <Badge color=\"green\" className={styles.badge} text={children} />;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  badge: css`\n    background-color: ${theme.colors.background.canvas};\n    border-color: ${theme.colors.border.strong};\n    color: ${theme.colors.text.secondary};\n    white-space: nowrap;\n  `,\n  detailsWrapper: css`\n    align-items: center;\n    display: flex;\n  `,\n  strong: css`\n    color: ${theme.colors.text.primary};\n  `,\n  icon: css`\n    margin-right: ${theme.spacing(0.5)};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2, PluginSignatureStatus } from '@grafana/data';\nimport { PluginSignatureBadge, useStyles2 } from '@grafana/ui';\n\nimport { CatalogPlugin } from '../types';\n\nimport { PluginSignatureDetailsBadge } from './PluginSignatureDetailsBadge';\n\ntype Props = {\n  plugin: CatalogPlugin;\n};\n\n// Designed to show plugin signature information in the header on the plugin's details page\nexport function PluginDetailsHeaderSignature({ plugin }: Props): React.ReactElement {\n  const styles = useStyles2(getStyles);\n  const isSignatureValid = plugin.signature === PluginSignatureStatus.valid;\n\n  return (\n    <div className={styles.container}>\n      <a\n        href=\"https://grafana.com/docs/grafana/latest/plugins/plugin-signatures/\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n        className={styles.link}\n      >\n        <PluginSignatureBadge status={plugin.signature} />\n      </a>\n\n      {isSignatureValid && (\n        <PluginSignatureDetailsBadge signatureType={plugin.signatureType} signatureOrg={plugin.signatureOrg} />\n      )}\n    </div>\n  );\n}\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      display: flex;\n      flex-wrap: wrap;\n      gap: ${theme.spacing(0.5)};\n    `,\n    link: css`\n      display: inline-flex;\n      align-items: center;\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2, PluginSignatureType } from '@grafana/data';\n\nimport { PageInfoItem } from '../../../../core/components/Page/types';\nimport { PluginDisabledBadge } from '../components/Badges';\nimport { PluginDetailsHeaderDependencies } from '../components/PluginDetailsHeaderDependencies';\nimport { PluginDetailsHeaderSignature } from '../components/PluginDetailsHeaderSignature';\nimport { getLatestCompatibleVersion } from '../helpers';\nimport { CatalogPlugin } from '../types';\n\nexport const usePluginInfo = (plugin?: CatalogPlugin): PageInfoItem[] => {\n  const info: PageInfoItem[] = [];\n\n  if (!plugin) {\n    return info;\n  }\n\n  // Populate info\n  const latestCompatibleVersion = getLatestCompatibleVersion(plugin.details?.versions);\n  const version = plugin.installedVersion || latestCompatibleVersion?.version;\n\n  if (Boolean(version)) {\n    info.push({\n      label: 'Version',\n      value: version,\n    });\n  }\n\n  if (Boolean(plugin.orgName)) {\n    info.push({\n      label: 'From',\n      value: plugin.orgName,\n    });\n  }\n\n  const showDownloads =\n    !plugin.signatureType ||\n    plugin.signatureType === PluginSignatureType.community ||\n    plugin.signatureType === PluginSignatureType.commercial;\n  if (showDownloads && Boolean(plugin.downloads > 0)) {\n    info.push({\n      label: 'Downloads',\n      value: new Intl.NumberFormat().format(plugin.downloads),\n    });\n  }\n\n  const pluginDependencies = plugin.details?.pluginDependencies;\n  const grafanaDependency = plugin.isInstalled\n    ? plugin.details?.grafanaDependency\n    : latestCompatibleVersion?.grafanaDependency || plugin.details?.grafanaDependency;\n  const hasNoDependencyInfo = !grafanaDependency && (!pluginDependencies || !pluginDependencies.length);\n\n  if (!hasNoDependencyInfo) {\n    info.push({\n      label: 'Dependencies',\n      value: <PluginDetailsHeaderDependencies plugin={plugin} latestCompatibleVersion={latestCompatibleVersion} />,\n    });\n  }\n\n  if (plugin.isDisabled) {\n    info.push({\n      label: 'Status',\n      value: <PluginDisabledBadge error={plugin.error!} />,\n    });\n  }\n\n  info.push({\n    label: 'Signature',\n    value: <PluginDetailsHeaderSignature plugin={plugin} />,\n  });\n\n  return info;\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    subtitle: css`\n      display: flex;\n      flex-direction: column;\n      gap: ${theme.spacing(1)};\n    `,\n  };\n};\n","import React from 'react';\n\nimport { PageInfoItem } from '../../../../core/components/Page/types';\nimport { PluginActions } from '../components/PluginActions';\nimport { PluginSubtitle } from '../components/PluginSubtitle';\nimport { CatalogPlugin } from '../types';\n\nimport { usePluginInfo } from './usePluginInfo';\n\ntype ReturnType = {\n  actions: React.ReactNode;\n  info: PageInfoItem[];\n  subtitle: React.ReactNode;\n};\n\nexport const usePluginPageExtensions = (plugin?: CatalogPlugin): ReturnType => {\n  const info = usePluginInfo(plugin);\n\n  return {\n    actions: <PluginActions plugin={plugin} />,\n    info,\n    subtitle: <PluginSubtitle plugin={plugin} />,\n  };\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport { GrafanaTheme2, NavModelItem } from '@grafana/data';\nimport { useStyles2, TabContent, Alert } from '@grafana/ui';\nimport { Layout } from '@grafana/ui/src/components/Layout/Layout';\nimport { Page } from 'app/core/components/Page/Page';\nimport { AppNotificationSeverity } from 'app/types';\n\nimport { Loader } from '../components/Loader';\nimport { PluginDetailsBody } from '../components/PluginDetailsBody';\nimport { PluginDetailsDisabledError } from '../components/PluginDetailsDisabledError';\nimport { PluginDetailsSignature } from '../components/PluginDetailsSignature';\nimport { usePluginDetailsTabs } from '../hooks/usePluginDetailsTabs';\nimport { usePluginPageExtensions } from '../hooks/usePluginPageExtensions';\nimport { useGetSingle, useFetchStatus, useFetchDetailsStatus } from '../state/hooks';\nimport { PluginTabIds } from '../types';\n\nexport type Props = {\n  // The ID of the plugin\n  pluginId: string;\n  // The navigation ID used for displaying the sidebar navigation\n  navId?: string;\n  // Can be used to customise the title & subtitle for the not found page\n  notFoundNavModel?: NavModelItem;\n  // Can be used to customise the content shown when a plugin with the given ID cannot be found\n  notFoundComponent?: React.ReactElement;\n};\n\nexport function PluginDetailsPage({\n  pluginId,\n  navId = 'plugins',\n  notFoundComponent = <NotFoundPlugin />,\n  notFoundNavModel = {\n    text: 'Unknown plugin',\n    subTitle: 'The requested ID does not belong to any plugin',\n    active: true,\n  },\n}: Props) {\n  const location = useLocation();\n  const queryParams = new URLSearchParams(location.search);\n  const plugin = useGetSingle(pluginId); // fetches the plugin settings for this Grafana instance\n  const { navModel, activePageId } = usePluginDetailsTabs(plugin, queryParams.get('page') as PluginTabIds);\n  const { actions, info, subtitle } = usePluginPageExtensions(plugin);\n  const { isLoading: isFetchLoading } = useFetchStatus();\n  const { isLoading: isFetchDetailsLoading } = useFetchDetailsStatus();\n  const styles = useStyles2(getStyles);\n\n  if (isFetchLoading || isFetchDetailsLoading) {\n    return (\n      <Page\n        navId={navId}\n        pageNav={{\n          text: '',\n          active: true,\n        }}\n      >\n        <Loader />\n      </Page>\n    );\n  }\n\n  if (!plugin) {\n    return (\n      <Page navId={navId} pageNav={notFoundNavModel}>\n        {notFoundComponent}\n      </Page>\n    );\n  }\n\n  return (\n    <Page navId={navId} pageNav={navModel} actions={actions} subTitle={subtitle} info={info}>\n      <Page.Contents>\n        <TabContent className={styles.tabContent}>\n          <PluginDetailsSignature plugin={plugin} className={styles.alert} />\n          <PluginDetailsDisabledError plugin={plugin} className={styles.alert} />\n          <PluginDetailsBody queryParams={Object.fromEntries(queryParams)} plugin={plugin} pageId={activePageId} />\n        </TabContent>\n      </Page.Contents>\n    </Page>\n  );\n}\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    alert: css`\n      margin-bottom: ${theme.spacing(2)};\n    `,\n    subtitle: css`\n      display: flex;\n      flex-direction: column;\n      gap: ${theme.spacing(1)};\n    `,\n    // Needed due to block formatting context\n    tabContent: css`\n      overflow: auto;\n      height: 100%;\n    `,\n  };\n};\n\nfunction NotFoundPlugin() {\n  return (\n    <Layout justify=\"center\" align=\"center\">\n      <Alert severity={AppNotificationSeverity.Warning} title=\"Plugin not found\">\n        That plugin cannot be found. Please check the url is correct or <br />\n        go to the <a href=\"/plugins\">plugin catalog</a>.\n      </Alert>\n    </Layout>\n  );\n}\n","import { createSelector } from '@reduxjs/toolkit';\n\nimport { PluginError, PluginErrorCode, unEscapeStringFromRegex } from '@grafana/data';\n\nimport { RequestStatus, PluginCatalogStoreState } from '../types';\n\nimport { pluginsAdapter } from './reducer';\n\nexport const selectRoot = (state: PluginCatalogStoreState) => state.plugins;\n\nexport const selectItems = createSelector(selectRoot, ({ items }) => items);\n\nexport const selectDisplayMode = createSelector(selectRoot, ({ settings }) => settings.displayMode);\n\nexport const { selectAll, selectById } = pluginsAdapter.getSelectors(selectItems);\n\nconst selectInstalled = (filterBy: string) =>\n  createSelector(selectAll, (plugins) =>\n    plugins.filter((plugin) => (filterBy === 'installed' ? plugin.isInstalled : !plugin.isCore))\n  );\n\nconst findByInstallAndType = (filterBy: string, filterByType: string) =>\n  createSelector(selectInstalled(filterBy), (plugins) =>\n    plugins.filter((plugin) => filterByType === 'all' || plugin.type === filterByType)\n  );\n\nconst findByKeyword = (searchBy: string) =>\n  createSelector(selectAll, (plugins) => {\n    if (searchBy === '') {\n      return [];\n    }\n\n    return plugins.filter((plugin) => {\n      const fields: String[] = [];\n      if (plugin.name) {\n        fields.push(plugin.name.toLowerCase());\n      }\n\n      if (plugin.orgName) {\n        fields.push(plugin.orgName.toLowerCase());\n      }\n\n      return fields.some((f) => f.includes(unEscapeStringFromRegex(searchBy).toLowerCase()));\n    });\n  });\n\nexport const find = (searchBy: string, filterBy: string, filterByType: string) =>\n  createSelector(\n    findByInstallAndType(filterBy, filterByType),\n    findByKeyword(searchBy),\n    (filteredPlugins, searchedPlugins) => {\n      return searchBy === '' ? filteredPlugins : searchedPlugins;\n    }\n  );\n\nexport const selectPluginErrors = createSelector(selectAll, (plugins) =>\n  plugins\n    ? plugins\n        .filter((p) => Boolean(p.error))\n        .map(\n          (p): PluginError => ({\n            pluginId: p.id,\n            errorCode: p!.error as PluginErrorCode,\n          })\n        )\n    : []\n);\n\n// The following selectors are used to get information about the outstanding or completed plugins-related network requests.\nexport const selectRequest = (actionType: string) =>\n  createSelector(selectRoot, ({ requests = {} }) => requests[actionType]);\n\nexport const selectIsRequestPending = (actionType: string) =>\n  createSelector(selectRequest(actionType), (request) => request?.status === RequestStatus.Pending);\n\nexport const selectRequestError = (actionType: string) =>\n  createSelector(selectRequest(actionType), (request) =>\n    request?.status === RequestStatus.Rejected ? request?.error : null\n  );\n\nexport const selectIsRequestNotFetched = (actionType: string) =>\n  createSelector(selectRequest(actionType), (request) => request === undefined);\n","import { useEffect } from 'react';\n\nimport { PluginError } from '@grafana/data';\nimport { useDispatch, useSelector } from 'app/types';\n\nimport { sortPlugins, Sorters } from '../helpers';\nimport { CatalogPlugin, PluginListDisplayMode } from '../types';\n\nimport { fetchAll, fetchDetails, fetchRemotePlugins, install, uninstall, fetchAllLocal, unsetInstall } from './actions';\nimport { setDisplayMode } from './reducer';\nimport {\n  find,\n  selectAll,\n  selectById,\n  selectIsRequestPending,\n  selectRequestError,\n  selectIsRequestNotFetched,\n  selectDisplayMode,\n  selectPluginErrors,\n} from './selectors';\n\ntype Filters = {\n  query?: string; // Note: this will be an escaped regex string as it comes from `FilterInput`\n  filterBy?: string;\n  filterByType?: string;\n  sortBy?: Sorters;\n};\n\nexport const useGetAllWithFilters = ({\n  query = '',\n  filterBy = 'installed',\n  filterByType = 'all',\n  sortBy = Sorters.nameAsc,\n}: Filters) => {\n  useFetchAll();\n\n  const filtered = useSelector(find(query, filterBy, filterByType));\n  const { isLoading, error } = useFetchStatus();\n  const sortedAndFiltered = sortPlugins(filtered, sortBy);\n\n  return {\n    isLoading,\n    error,\n    plugins: sortedAndFiltered,\n  };\n};\n\nexport const useGetAll = (): CatalogPlugin[] => {\n  useFetchAll();\n\n  return useSelector(selectAll);\n};\n\nexport const useGetSingle = (id: string): CatalogPlugin | undefined => {\n  useFetchAll();\n  useFetchDetails(id);\n\n  return useSelector((state) => selectById(state, id));\n};\n\nexport const useGetSingleLocalWithoutDetails = (id: string): CatalogPlugin | undefined => {\n  useFetchAllLocal();\n  return useSelector((state) => selectById(state, id));\n};\n\nexport const useGetErrors = (): PluginError[] => {\n  useFetchAll();\n\n  return useSelector(selectPluginErrors);\n};\n\nexport const useInstall = () => {\n  const dispatch = useDispatch();\n  return (id: string, version?: string, isUpdating?: boolean) => dispatch(install({ id, version, isUpdating }));\n};\n\nexport const useUnsetInstall = () => {\n  const dispatch = useDispatch();\n\n  return () => dispatch(unsetInstall());\n};\n\nexport const useUninstall = () => {\n  const dispatch = useDispatch();\n\n  return (id: string) => dispatch(uninstall(id));\n};\n\nexport const useIsRemotePluginsAvailable = () => {\n  const error = useSelector(selectRequestError(fetchRemotePlugins.typePrefix));\n  return error === null;\n};\n\nexport const useFetchStatus = () => {\n  const isLoading = useSelector(selectIsRequestPending(fetchAll.typePrefix));\n  const error = useSelector(selectRequestError(fetchAll.typePrefix));\n\n  return { isLoading, error };\n};\n\nexport const useFetchDetailsStatus = () => {\n  const isLoading = useSelector(selectIsRequestPending(fetchDetails.typePrefix));\n  const error = useSelector(selectRequestError(fetchDetails.typePrefix));\n\n  return { isLoading, error };\n};\n\nexport const useInstallStatus = () => {\n  const isInstalling = useSelector(selectIsRequestPending(install.typePrefix));\n  const error = useSelector(selectRequestError(install.typePrefix));\n\n  return { isInstalling, error };\n};\n\nexport const useUninstallStatus = () => {\n  const isUninstalling = useSelector(selectIsRequestPending(uninstall.typePrefix));\n  const error = useSelector(selectRequestError(uninstall.typePrefix));\n\n  return { isUninstalling, error };\n};\n\n// Only fetches in case they were not fetched yet\nexport const useFetchAll = () => {\n  const dispatch = useDispatch();\n  const isNotFetched = useSelector(selectIsRequestNotFetched(fetchAll.typePrefix));\n\n  useEffect(() => {\n    isNotFetched && dispatch(fetchAll());\n  }, []); // eslint-disable-line\n};\n\n// Only fetches in case they were not fetched yet\nexport const useFetchAllLocal = () => {\n  const dispatch = useDispatch();\n  const isNotFetched = useSelector(selectIsRequestNotFetched(fetchAllLocal.typePrefix));\n\n  useEffect(() => {\n    isNotFetched && dispatch(fetchAllLocal());\n  }, []); // eslint-disable-line\n};\n\nexport const useFetchDetails = (id: string) => {\n  const dispatch = useDispatch();\n  const plugin = useSelector((state) => selectById(state, id));\n  const isNotFetching = !useSelector(selectIsRequestPending(fetchDetails.typePrefix));\n  const shouldFetch = isNotFetching && plugin && !plugin.details;\n\n  useEffect(() => {\n    shouldFetch && dispatch(fetchDetails(id));\n  }, [plugin]); // eslint-disable-line\n};\n\nexport const useDisplayMode = () => {\n  const dispatch = useDispatch();\n  const displayMode = useSelector(selectDisplayMode);\n\n  return {\n    displayMode,\n    setDisplayMode: (v: PluginListDisplayMode) => dispatch(setDisplayMode(v)),\n  };\n};\n"],"names":["DashboardsTable","dashboards","onImport","onRemove","buttonText","dashboard","index","DataSourcesRoutesContext","useInitDataSourceSettings","uid","dispatch","state","useTestDataSource","dataSourcesRoutes","useDataSourcesRoutes","useLoadDataSources","isLoading","dataSources","useLoadDataSource","useLoadDataSourcePlugins","useAddDatasource","plugin","useUpdateDatasource","dataSource","useDeleteLoadedDataSource","name","useDataSource","useDataSourceExploreUrl","useDataSourceMeta","pluginType","useDataSourceSettings","useDataSourceSettingsNav","dataSourceId","pageId","loadError","loading","navIndex","navIndexId","node","useDataSourceRights","readOnly","hasWriteRights","hasDeleteRights","PluginDisabledBadge","error","tooltip","errorCodeToTooltip","Badge","getBadgeColor","theme","PluginInstalledBadge","customBadgeStyles","PluginEnterpriseBadge","onClick","ev","PluginSignatureBadge","Button","PluginUpdateAvailableBadge","styles","getStyles","Loader","text","VersionList","versions","installedVersion","latestCompatibleVersion","version","isInstalledVersion","usePluginConfig","useAsync","AppConfigCtrlWrapper","props","pluginId","updateCmd","res","callback","deprecationWarning","prevProps","loader","template","scopeProps","angularCtrl","model","withRightMargin","element","PluginDashboards","resolve","dash","overwrite","datasource","installCmd","PluginUsage","searchQuery","results","found","width","height","SearchResultsTable","of","Spinner","config","EmptyListCTA","Alert","PluginDetailsBody","queryParams","pluginConfig","configPage","PluginContextProvider","PluginDetailsDisabledError","className","selectors","renderDescriptionFromError","PluginDetailsSignature","isSignatureValid","isCore","isDisabled","isDisabledDueTooSignatureError","usePluginDetailsTabs","pathname","defaultTab","useDefaultPage","parentUrl","isPublished","currentPageId","navModelChildren","canConfigurePlugins","include","navModel","GetStartedWithApp","enabled","jsonData","enable","updatePluginSettingsAndReload","disable","id","data","e","GetStartedWithDataSource","onAddDataSource","meta","GetStartedWithPlugin","InstallControlsWarning","pluginStatus","isExternallyManaged","hasPermission","isRemotePluginsAvailable","isCompatible","message","Icon","trackPluginInstalled","trackPluginUninstalled","InstallControlsButton","setNeedReload","useQueryParams","location","isInstalling","errorInstalling","isUninstalling","errorUninstalling","install","uninstall","unsetInstall","isConfirmModalVisible","setIsConfirmModalVisible","showConfirmModal","hideConfirmModal","uninstallBtnText","trackingProps","onInstall","result","onUninstall","activePageId","onUpdate","ConfirmModal","ExternallyManagedButton","externalManageLink","PluginActions","needReload","hasInstallWarning","isInstallControlsDisabled","PluginSubtitle","link","PluginDetailsHeaderDependencies","pluginDependencies","grafanaDependency","p","SIGNATURE_ICONS","PluginSignatureDetailsBadge","signatureType","signatureOrg","signatureTypeText","signatureIcon","DetailsBadge","children","PluginDetailsHeaderSignature","usePluginInfo","info","usePluginPageExtensions","PluginDetailsPage","navId","notFoundComponent","NotFoundPlugin","notFoundNavModel","actions","subtitle","isFetchLoading","isFetchDetailsLoading","Page","TabContent","Layout","selectRoot","selectItems","items","selectDisplayMode","settings","selectInstalled","filterBy","plugins","findByInstallAndType","filterByType","findByKeyword","searchBy","fields","f","find","filteredPlugins","searchedPlugins","selectPluginErrors","selectRequest","actionType","requests","selectIsRequestPending","request","selectRequestError","useGetAllWithFilters","query","sortBy","useFetchAll","filtered","useFetchStatus","sortedAndFiltered","useGetAll","useGetSingle","useFetchDetails","useGetSingleLocalWithoutDetails","useFetchAllLocal","useGetErrors","useInstall","isUpdating","useUnsetInstall","useUninstall","useIsRemotePluginsAvailable","useFetchDetailsStatus","useInstallStatus","useUninstallStatus","isNotFetched","shouldFetch","useDisplayMode","v"],"sourceRoot":""}