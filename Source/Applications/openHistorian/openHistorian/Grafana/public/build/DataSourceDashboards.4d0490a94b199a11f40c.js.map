{"version":3,"sources":["webpack:///./public/app/features/datasources/state/buildCategories.ts","webpack:///./public/app/features/datasources/state/actions.ts","webpack:///./public/app/features/datasources/DataSourceDashboards.tsx","webpack:///./public/app/features/datasources/state/navModel.ts","webpack:///./public/app/features/datasources/state/selectors.ts","webpack:///./public/app/features/datasources/DashboardsTable.tsx"],"names":["buildCategories","plugins","categories","id","title","categoryIndex","pluginIndex","enterprisePlugins","getPhantomPlugin","name","description","imgUrl","categories_1","Object","tslib_es6","categories_1_1","next","done","category","value","plugin","find","item","info","links","_b","e_5","_c","push","plugins_1","plugins_1_1","categories_2","categories_2_1","type","src","datasource","module","baseUrl","logos","small","large","author","url","screenshots","updated","version","enterprisePlugins_1","e_4","enterprisePlugins_1_1","sortPlugins","sortingRules","prometheus","graphite","loki","mysql","postgres","gcloud","sort","a","b","aSort","bSort","options","initDataSourceSettings","pageId","dependencies","loadDataSource","getDataSource","selectors","getDataSourceMeta","importDataSourcePlugin","plugin_loader","dispatch","getState","isNaN","reducers","Error","_a","sent","dataSourceSettings","dataSource","dataSources","dataSourceMeta","importedPlugin","console","log","err_1","testDataSource","dataSourceName","getDatasourceSrv","datasource_srv","getBackendSrv","backend_srv","get","dsApi","testDatasource","withNoBackendCache","result","message","err_2","statusText","loadDataSources","_this","this","response","PluginSettingsCache","pluginInfo","actions","navModel","addDataSource","getStore","newInstance","access","isDefault","length","nameExits","nameHasSuffix","getNewName","digit","getLastDigit","findNewName","post","path","loadDataSourcePlugins","enabled","updateDataSource","put","updateFrontendSettings","deleteDataSource","delete","filter","toLowerCase","then","settings","config","datasources","defaultDatasource","init","endsWith","parseInt","slice","DataSourceDashboards","_super","apply","arguments","onImport","dashboard","overwrite","props","importDashboard","data","pluginId","inputs","onRemove","removeDashboard","importedUri","tslib__WEBPACK_IMPORTED_MODULE_0__","prototype","componentDidMount","loadPluginDashboards","render","dashboards","isLoading","react__WEBPACK_IMPORTED_MODULE_1___default","createElement","app_core_components_Page_Page__WEBPACK_IMPORTED_MODULE_4__","Contents","_DashboardsTable__WEBPACK_IMPORTED_MODULE_5__","react__WEBPACK_IMPORTED_MODULE_1__","mapDispatchToProps","_dashboard_state_actions__WEBPACK_IMPORTED_MODULE_10__","_state_actions__WEBPACK_IMPORTED_MODULE_8__","_plugins_state_actions__WEBPACK_IMPORTED_MODULE_9__","__webpack_exports__","react_hot_loader__WEBPACK_IMPORTED_MODULE_2__","react_redux__WEBPACK_IMPORTED_MODULE_3__","state","app_core_selectors_location__WEBPACK_IMPORTED_MODULE_7__","location","app_core_selectors_navModel__WEBPACK_IMPORTED_MODULE_6__","navIndex","_state_selectors__WEBPACK_IMPORTED_MODULE_11__","isLoadingPluginDashboards","buildNavModel","pluginMeta","meta","img","subTitle","text","breadcrumbs","children","active","icon","configPages","page","includes","undefined","include","app_core_config__WEBPACK_IMPORTED_MODULE_2__","licenseInfo","hasLicense","getDataSourceLoadingNav","pageName","node","main","basicAuth","basicAuthUser","basicAuthPassword","withCredentials","database","jsonData","authType","defaultRegion","orgId","password","readOnly","typeLogoUrl","user","_grafana_data__WEBPACK_IMPORTED_MODULE_1__","child","indexOf","__webpack_require__","d","getDataSources","getDataSourcePlugins","getDataSourcesSearchQuery","getDataSourcesLayoutMode","getDataSourcesCount","regex","RegExp","searchQuery","test","dataSourceTypeSearchQuery","dataSourceId","layoutMode","dataSourcesCount","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","className","map","index","key","dashboardId","imported","href","importedUrl","style","textAlign","onClick","revision","importedRevision","buttonText"],"mappings":"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","file":"DataSourceDashboards.4d0490a94b199a11f40c.js","sourcesContent":["import { DataSourcePluginMeta, PluginType } from '@grafana/data';\nimport { DataSourcePluginCategory } from 'app/types';\n\nexport function buildCategories(plugins: DataSourcePluginMeta[]): DataSourcePluginCategory[] {\n  const categories: DataSourcePluginCategory[] = [\n    { id: 'tsdb', title: 'Time series databases', plugins: [] },\n    { id: 'logging', title: 'Logging & document databases', plugins: [] },\n    { id: 'sql', title: 'SQL', plugins: [] },\n    { id: 'cloud', title: 'Cloud', plugins: [] },\n    { id: 'enterprise', title: 'Enterprise plugins', plugins: [] },\n    { id: 'other', title: 'Others', plugins: [] },\n  ];\n\n  const categoryIndex: Record<string, DataSourcePluginCategory> = {};\n  const pluginIndex: Record<string, DataSourcePluginMeta> = {};\n  const enterprisePlugins = getEnterprisePhantomPlugins();\n\n  // build indices\n  for (const category of categories) {\n    categoryIndex[category.id] = category;\n  }\n\n  for (const plugin of plugins) {\n    // Force category for enterprise plugins\n    if (enterprisePlugins.find(item => item.id === plugin.id)) {\n      plugin.category = 'enterprise';\n    }\n\n    // Fix link name\n    if (plugin.info.links) {\n      for (const link of plugin.info.links) {\n        link.name = 'Learn more';\n      }\n    }\n\n    const category = categories.find(item => item.id === plugin.category) || categoryIndex['other'];\n    category.plugins.push(plugin);\n    // add to plugin index\n    pluginIndex[plugin.id] = plugin;\n  }\n\n  for (const category of categories) {\n    // add phantom plugin\n    if (category.id === 'cloud') {\n      category.plugins.push(getGrafanaCloudPhantomPlugin());\n    }\n\n    // add phantom plugins\n    if (category.id === 'enterprise') {\n      for (const plugin of enterprisePlugins) {\n        if (!pluginIndex[plugin.id]) {\n          category.plugins.push(plugin);\n        }\n      }\n    }\n\n    sortPlugins(category.plugins);\n  }\n\n  return categories;\n}\n\nfunction sortPlugins(plugins: DataSourcePluginMeta[]) {\n  const sortingRules: { [id: string]: number } = {\n    prometheus: 100,\n    graphite: 95,\n    loki: 90,\n    mysql: 80,\n    postgres: 79,\n    gcloud: -1,\n  };\n\n  plugins.sort((a, b) => {\n    const aSort = sortingRules[a.id] || 0;\n    const bSort = sortingRules[b.id] || 0;\n    if (aSort > bSort) {\n      return -1;\n    }\n    if (aSort < bSort) {\n      return 1;\n    }\n\n    return a.name > b.name ? -1 : 1;\n  });\n}\n\nfunction getEnterprisePhantomPlugins(): DataSourcePluginMeta[] {\n  return [\n    getPhantomPlugin({\n      id: 'grafana-splunk-datasource',\n      name: 'Splunk',\n      description: 'Visualize & explore Splunk logs',\n      imgUrl: 'public/img/plugins/splunk_logo_128.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-oracle-datasource',\n      name: 'Oracle',\n      description: 'Visualize & explore Oracle SQL',\n      imgUrl: 'public/img/plugins/oracle.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-dynatrace-datasource',\n      name: 'Dynatrace',\n      description: 'Visualize & explore Dynatrace data',\n      imgUrl: 'public/img/plugins/dynatrace.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-servicenow-datasource',\n      description: 'ServiceNow integration & data source',\n      name: 'ServiceNow',\n      imgUrl: 'public/img/plugins/servicenow.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-datadog-datasource',\n      description: 'DataDog integration & data source',\n      name: 'DataDog',\n      imgUrl: 'public/img/plugins/datadog.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-newrelic-datasource',\n      description: 'New Relic integration & data source',\n      name: 'New Relic',\n      imgUrl: 'public/img/plugins/newrelic.svg',\n    }),\n  ];\n}\n\nfunction getGrafanaCloudPhantomPlugin(): DataSourcePluginMeta {\n  return {\n    id: 'gcloud',\n    name: 'Grafana Cloud',\n    type: PluginType.datasource,\n    module: 'phantom',\n    baseUrl: '',\n    info: {\n      description: 'Hosted Graphite, Prometheus and Loki',\n      logos: { small: 'public/img/grafana_icon.svg', large: 'asd' },\n      author: { name: 'Grafana Labs' },\n      links: [\n        {\n          url: 'https://grafana.com/products/cloud/',\n          name: 'Learn more',\n        },\n      ],\n      screenshots: [],\n      updated: '2019-05-10',\n      version: '1.0.0',\n    },\n  };\n}\n\ninterface GetPhantomPluginOptions {\n  id: string;\n  name: string;\n  description: string;\n  imgUrl: string;\n}\n\nfunction getPhantomPlugin(options: GetPhantomPluginOptions): DataSourcePluginMeta {\n  return {\n    id: options.id,\n    name: options.name,\n    type: PluginType.datasource,\n    module: 'phantom',\n    baseUrl: '',\n    info: {\n      description: options.description,\n      logos: { small: options.imgUrl, large: options.imgUrl },\n      author: { name: 'Grafana Labs' },\n      links: [\n        {\n          url: 'https://grafana.com/grafana/plugins/' + options.id,\n          name: 'Install now',\n        },\n      ],\n      screenshots: [],\n      updated: '2019-05-10',\n      version: '1.0.0',\n    },\n  };\n}\n","import config from '../../../core/config';\nimport { getBackendSrv } from 'app/core/services/backend_srv';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { updateLocation, updateNavIndex } from 'app/core/actions';\nimport { buildNavModel } from './navModel';\nimport { DataSourcePluginMeta, DataSourceSettings } from '@grafana/data';\nimport { DataSourcePluginCategory, ThunkResult, ThunkDispatch } from 'app/types';\nimport { getPluginSettings } from 'app/features/plugins/PluginSettingsCache';\nimport { importDataSourcePlugin } from 'app/features/plugins/plugin_loader';\nimport {\n  dataSourceLoaded,\n  dataSourceMetaLoaded,\n  dataSourcePluginsLoad,\n  dataSourcePluginsLoaded,\n  dataSourcesLoaded,\n  initDataSourceSettingsFailed,\n  initDataSourceSettingsSucceeded,\n  testDataSourceStarting,\n  testDataSourceSucceeded,\n  testDataSourceFailed,\n} from './reducers';\nimport { buildCategories } from './buildCategories';\nimport { getDataSource, getDataSourceMeta } from './selectors';\nimport { getDataSourceSrv } from '@grafana/runtime';\n\nexport interface DataSourceTypesLoadedPayload {\n  plugins: DataSourcePluginMeta[];\n  categories: DataSourcePluginCategory[];\n}\n\nexport interface InitDataSourceSettingDependencies {\n  loadDataSource: typeof loadDataSource;\n  getDataSource: typeof getDataSource;\n  getDataSourceMeta: typeof getDataSourceMeta;\n  importDataSourcePlugin: typeof importDataSourcePlugin;\n}\n\nexport interface TestDataSourceDependencies {\n  getDatasourceSrv: typeof getDataSourceSrv;\n  getBackendSrv: typeof getBackendSrv;\n}\n\nexport const initDataSourceSettings = (\n  pageId: number,\n  dependencies: InitDataSourceSettingDependencies = {\n    loadDataSource,\n    getDataSource,\n    getDataSourceMeta,\n    importDataSourcePlugin,\n  }\n): ThunkResult<void> => {\n  return async (dispatch: ThunkDispatch, getState) => {\n    if (isNaN(pageId)) {\n      dispatch(initDataSourceSettingsFailed(new Error('Invalid ID')));\n      return;\n    }\n\n    try {\n      await dispatch(dependencies.loadDataSource(pageId));\n      if (getState().dataSourceSettings.plugin) {\n        return;\n      }\n\n      const dataSource = dependencies.getDataSource(getState().dataSources, pageId);\n      const dataSourceMeta = dependencies.getDataSourceMeta(getState().dataSources, dataSource.type);\n      const importedPlugin = await dependencies.importDataSourcePlugin(dataSourceMeta);\n\n      dispatch(initDataSourceSettingsSucceeded(importedPlugin));\n    } catch (err) {\n      console.log('Failed to import plugin module', err);\n      dispatch(initDataSourceSettingsFailed(err));\n    }\n  };\n};\n\nexport const testDataSource = (\n  dataSourceName: string,\n  dependencies: TestDataSourceDependencies = {\n    getDatasourceSrv,\n    getBackendSrv,\n  }\n): ThunkResult<void> => {\n  return async (dispatch: ThunkDispatch, getState) => {\n    const dsApi = await dependencies.getDatasourceSrv().get(dataSourceName);\n\n    if (!dsApi.testDatasource) {\n      return;\n    }\n\n    dispatch(testDataSourceStarting());\n\n    dependencies.getBackendSrv().withNoBackendCache(async () => {\n      try {\n        const result = await dsApi.testDatasource();\n\n        dispatch(testDataSourceSucceeded(result));\n      } catch (err) {\n        let message = '';\n\n        if (err.statusText) {\n          message = 'HTTP Error ' + err.statusText;\n        } else {\n          message = err.message;\n        }\n\n        dispatch(testDataSourceFailed({ message }));\n      }\n    });\n  };\n};\n\nexport function loadDataSources(): ThunkResult<void> {\n  return async dispatch => {\n    const response = await getBackendSrv().get('/api/datasources');\n    dispatch(dataSourcesLoaded(response));\n  };\n}\n\nexport function loadDataSource(id: number): ThunkResult<void> {\n  return async dispatch => {\n    const dataSource = await getBackendSrv().get(`/api/datasources/${id}`);\n    const pluginInfo = (await getPluginSettings(dataSource.type)) as DataSourcePluginMeta;\n    const plugin = await importDataSourcePlugin(pluginInfo);\n\n    dispatch(dataSourceLoaded(dataSource));\n    dispatch(dataSourceMetaLoaded(pluginInfo));\n    dispatch(updateNavIndex(buildNavModel(dataSource, plugin)));\n  };\n}\n\nexport function addDataSource(plugin: DataSourcePluginMeta): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    await dispatch(loadDataSources());\n\n    const dataSources = getStore().dataSources.dataSources;\n\n    const newInstance = {\n      name: plugin.name,\n      type: plugin.id,\n      access: 'proxy',\n      isDefault: dataSources.length === 0,\n    };\n\n    if (nameExits(dataSources, newInstance.name)) {\n      newInstance.name = findNewName(dataSources, newInstance.name);\n    }\n\n    const result = await getBackendSrv().post('/api/datasources', newInstance);\n    dispatch(updateLocation({ path: `/datasources/edit/${result.id}` }));\n  };\n}\n\nexport function loadDataSourcePlugins(): ThunkResult<void> {\n  return async dispatch => {\n    dispatch(dataSourcePluginsLoad());\n    const plugins = await getBackendSrv().get('/api/plugins', { enabled: 1, type: 'datasource' });\n    const categories = buildCategories(plugins);\n    dispatch(dataSourcePluginsLoaded({ plugins, categories }));\n  };\n}\n\nexport function updateDataSource(dataSource: DataSourceSettings): ThunkResult<void> {\n  return async dispatch => {\n    await getBackendSrv().put(`/api/datasources/${dataSource.id}`, dataSource);\n    await updateFrontendSettings();\n    return dispatch(loadDataSource(dataSource.id));\n  };\n}\n\nexport function deleteDataSource(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const dataSource = getStore().dataSources.dataSource;\n    await getBackendSrv().delete(`/api/datasources/${dataSource.id}`);\n    await updateFrontendSettings();\n    dispatch(updateLocation({ path: '/datasources' }));\n  };\n}\n\ninterface ItemWithName {\n  name: string;\n}\n\nexport function nameExits(dataSources: ItemWithName[], name: string) {\n  return (\n    dataSources.filter(dataSource => {\n      return dataSource.name.toLowerCase() === name.toLowerCase();\n    }).length > 0\n  );\n}\n\nexport function findNewName(dataSources: ItemWithName[], name: string) {\n  // Need to loop through current data sources to make sure\n  // the name doesn't exist\n  while (nameExits(dataSources, name)) {\n    // If there's a duplicate name that doesn't end with '-x'\n    // we can add -1 to the name and be done.\n    if (!nameHasSuffix(name)) {\n      name = `${name}-1`;\n    } else {\n      // if there's a duplicate name that ends with '-x'\n      // we can try to increment the last digit until the name is unique\n\n      // remove the 'x' part and replace it with the new number\n      name = `${getNewName(name)}${incrementLastDigit(getLastDigit(name))}`;\n    }\n  }\n\n  return name;\n}\n\nfunction updateFrontendSettings() {\n  return getBackendSrv()\n    .get('/api/frontend/settings')\n    .then((settings: any) => {\n      config.datasources = settings.datasources;\n      config.defaultDatasource = settings.defaultDatasource;\n      getDatasourceSrv().init();\n    });\n}\n\nfunction nameHasSuffix(name: string) {\n  return name.endsWith('-', name.length - 1);\n}\n\nfunction getLastDigit(name: string) {\n  return parseInt(name.slice(-1), 10);\n}\n\nfunction incrementLastDigit(digit: number) {\n  return isNaN(digit) ? 1 : digit + 1;\n}\n\nfunction getNewName(name: string) {\n  return name.slice(0, name.length - 1);\n}\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\n\n// Components\nimport Page from 'app/core/components/Page/Page';\nimport DashboardTable from './DashboardsTable';\n\n// Actions & Selectors\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { getRouteParamsId } from 'app/core/selectors/location';\nimport { loadDataSource } from './state/actions';\nimport { loadPluginDashboards } from '../plugins/state/actions';\nimport { importDashboard, removeDashboard } from '../dashboard/state/actions';\nimport { getDataSource } from './state/selectors';\n\n// Types\nimport { PluginDashboard, StoreState } from 'app/types';\nimport { DataSourceSettings } from '@grafana/data';\nimport { NavModel } from '@grafana/data';\n\nexport interface Props {\n  navModel: NavModel;\n  dashboards: PluginDashboard[];\n  dataSource: DataSourceSettings;\n  pageId: number;\n  importDashboard: typeof importDashboard;\n  loadDataSource: typeof loadDataSource;\n  loadPluginDashboards: typeof loadPluginDashboards;\n  removeDashboard: typeof removeDashboard;\n  isLoading: boolean;\n}\n\nexport class DataSourceDashboards extends PureComponent<Props> {\n  async componentDidMount() {\n    const { loadDataSource, pageId } = this.props;\n\n    await loadDataSource(pageId);\n    this.props.loadPluginDashboards();\n  }\n\n  onImport = (dashboard: PluginDashboard, overwrite: boolean) => {\n    const { dataSource, importDashboard } = this.props;\n    const data: any = {\n      pluginId: dashboard.pluginId,\n      path: dashboard.path,\n      overwrite,\n      inputs: [],\n    };\n\n    if (dataSource) {\n      data.inputs.push({\n        name: '*',\n        type: 'datasource',\n        pluginId: dataSource.type,\n        value: dataSource.name,\n      });\n    }\n\n    importDashboard(data, dashboard.title);\n  };\n\n  onRemove = (dashboard: PluginDashboard) => {\n    this.props.removeDashboard(dashboard.importedUri);\n  };\n\n  render() {\n    const { dashboards, navModel, isLoading } = this.props;\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={isLoading}>\n          <DashboardTable\n            dashboards={dashboards}\n            onImport={(dashboard, overwrite) => this.onImport(dashboard, overwrite)}\n            onRemove={dashboard => this.onRemove(dashboard)}\n          />\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState) {\n  const pageId = getRouteParamsId(state.location);\n  return {\n    navModel: getNavModel(state.navIndex, `datasource-dashboards-${pageId}`),\n    pageId: pageId,\n    dashboards: state.plugins.dashboards,\n    dataSource: getDataSource(state.dataSources, pageId),\n    isLoading: state.plugins.isLoadingPluginDashboards,\n  };\n}\n\nconst mapDispatchToProps = {\n  importDashboard,\n  loadDataSource,\n  loadPluginDashboards,\n  removeDashboard,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(DataSourceDashboards));\n","import { DataSourceSettings, PluginType, PluginInclude, NavModel, NavModelItem } from '@grafana/data';\nimport config from 'app/core/config';\nimport { GenericDataSourcePlugin } from '../settings/PluginSettings';\n\nexport function buildNavModel(dataSource: DataSourceSettings, plugin: GenericDataSourcePlugin): NavModelItem {\n  const pluginMeta = plugin.meta;\n\n  const navModel = {\n    img: pluginMeta.info.logos.large,\n    id: 'datasource-' + dataSource.id,\n    subTitle: `Type: ${pluginMeta.name}`,\n    url: '',\n    text: dataSource.name,\n    breadcrumbs: [{ title: 'Data Sources', url: 'datasources' }],\n    children: [\n      {\n        active: false,\n        icon: 'fa fa-fw fa-sliders',\n        id: `datasource-settings-${dataSource.id}`,\n        text: 'Settings',\n        url: `datasources/edit/${dataSource.id}/`,\n      },\n    ],\n  };\n\n  if (plugin.configPages) {\n    for (const page of plugin.configPages) {\n      navModel.children.push({\n        active: false,\n        text: page.title,\n        icon: page.icon,\n        url: `datasources/edit/${dataSource.id}/?page=${page.id}`,\n        id: `datasource-page-${page.id}`,\n      });\n    }\n  }\n\n  if (pluginMeta.includes && hasDashboards(pluginMeta.includes)) {\n    navModel.children.push({\n      active: false,\n      icon: 'fa fa-fw fa-th-large',\n      id: `datasource-dashboards-${dataSource.id}`,\n      text: 'Dashboards',\n      url: `datasources/edit/${dataSource.id}/dashboards`,\n    });\n  }\n\n  if (config.licenseInfo.hasLicense) {\n    navModel.children.push({\n      active: false,\n      icon: 'fa fa-fw fa-lock',\n      id: `datasource-permissions-${dataSource.id}`,\n      text: 'Permissions',\n      url: `datasources/edit/${dataSource.id}/permissions`,\n    });\n  }\n\n  return navModel;\n}\n\nexport function getDataSourceLoadingNav(pageName: string): NavModel {\n  const main = buildNavModel(\n    {\n      access: '',\n      basicAuth: false,\n      basicAuthUser: '',\n      basicAuthPassword: '',\n      withCredentials: false,\n      database: '',\n      id: 1,\n      isDefault: false,\n      jsonData: { authType: 'credentials', defaultRegion: 'eu-west-2' },\n      name: 'Loading',\n      orgId: 1,\n      password: '',\n      readOnly: false,\n      type: 'Loading',\n      typeLogoUrl: 'public/img/icn-datasource.svg',\n      url: '',\n      user: '',\n    },\n    {\n      meta: {\n        id: '1',\n        type: PluginType.datasource,\n        name: '',\n        info: {\n          author: {\n            name: '',\n            url: '',\n          },\n          description: '',\n          links: [{ name: '', url: '' }],\n          logos: {\n            large: '',\n            small: '',\n          },\n          screenshots: [],\n          updated: '',\n          version: '',\n        },\n        includes: [],\n        module: '',\n        baseUrl: '',\n      },\n    } as GenericDataSourcePlugin\n  );\n\n  let node: NavModelItem;\n\n  // find active page\n  for (const child of main.children) {\n    if (child.id.indexOf(pageName) > 0) {\n      child.active = true;\n      node = child;\n      break;\n    }\n  }\n\n  return {\n    main: main,\n    node: node,\n  };\n}\n\nfunction hasDashboards(includes: PluginInclude[]): boolean {\n  return (\n    includes.find(include => {\n      return include.type === 'dashboard';\n    }) !== undefined\n  );\n}\n","import { DataSourceSettings, DataSourcePluginMeta } from '@grafana/data';\nimport { DataSourcesState } from '../../../types/datasources';\nimport { UrlQueryValue } from '@grafana/runtime';\n\nexport const getDataSources = (state: DataSourcesState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  return state.dataSources.filter((dataSource: DataSourceSettings) => {\n    return regex.test(dataSource.name) || regex.test(dataSource.database);\n  });\n};\n\nexport const getDataSourcePlugins = (state: DataSourcesState) => {\n  const regex = new RegExp(state.dataSourceTypeSearchQuery, 'i');\n\n  return state.plugins.filter((type: DataSourcePluginMeta) => {\n    return regex.test(type.name);\n  });\n};\n\nexport const getDataSource = (state: DataSourcesState, dataSourceId: UrlQueryValue): DataSourceSettings | null => {\n  if (state.dataSource.id === parseInt(dataSourceId as string, 10)) {\n    return state.dataSource;\n  }\n  return {} as DataSourceSettings;\n};\n\nexport const getDataSourceMeta = (state: DataSourcesState, type: string): DataSourcePluginMeta => {\n  if (state.dataSourceMeta.id === type) {\n    return state.dataSourceMeta;\n  }\n\n  return {} as DataSourcePluginMeta;\n};\n\nexport const getDataSourcesSearchQuery = (state: DataSourcesState) => state.searchQuery;\nexport const getDataSourcesLayoutMode = (state: DataSourcesState) => state.layoutMode;\nexport const getDataSourcesCount = (state: DataSourcesState) => state.dataSourcesCount;\n","import React, { FC } from 'react';\nimport { PluginDashboard } from '../../types';\n\nexport interface Props {\n  dashboards: PluginDashboard[];\n  onImport: (dashboard: PluginDashboard, overwrite: boolean) => void;\n  onRemove: (dashboard: PluginDashboard) => void;\n}\n\nconst DashboardsTable: FC<Props> = ({ dashboards, onImport, onRemove }) => {\n  function buttonText(dashboard: PluginDashboard) {\n    return dashboard.revision !== dashboard.importedRevision ? 'Update' : 'Re-import';\n  }\n\n  return (\n    <table className=\"filter-table\">\n      <tbody>\n        {dashboards.map((dashboard, index) => {\n          return (\n            <tr key={`${dashboard.dashboardId}-${index}`}>\n              <td className=\"width-1\">\n                <i className=\"gicon gicon-dashboard\" />\n              </td>\n              <td>\n                {dashboard.imported ? (\n                  <a href={dashboard.importedUrl}>{dashboard.title}</a>\n                ) : (\n                  <span>{dashboard.title}</span>\n                )}\n              </td>\n              <td style={{ textAlign: 'right' }}>\n                {!dashboard.imported ? (\n                  <button className=\"btn btn-secondary btn-small\" onClick={() => onImport(dashboard, false)}>\n                    Import\n                  </button>\n                ) : (\n                  <button className=\"btn btn-secondary btn-small\" onClick={() => onImport(dashboard, true)}>\n                    {buttonText(dashboard)}\n                  </button>\n                )}\n                {dashboard.imported && (\n                  <button className=\"btn btn-danger btn-small\" onClick={() => onRemove(dashboard)}>\n                    <i className=\"fa fa-trash\" />\n                  </button>\n                )}\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nexport default DashboardsTable;\n"],"sourceRoot":""}