{"version":3,"file":"candlestickPanel.4350b704dc0f577f1aed.js","mappings":"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","sources":["webpack://grafana/./public/app/plugins/panel/candlestick/panelcfg.gen.ts","webpack://grafana/./public/app/plugins/panel/candlestick/types.ts","webpack://grafana/./public/app/plugins/panel/candlestick/fields.ts","webpack://grafana/./public/app/plugins/panel/candlestick/utils.ts","webpack://grafana/./public/app/plugins/panel/candlestick/CandlestickPanel.tsx","webpack://grafana/./public/app/plugins/panel/candlestick/suggestions.ts","webpack://grafana/./public/app/plugins/panel/candlestick/module.tsx"],"sourcesContent":["// Code generated - EDITING IS FUTILE. DO NOT EDIT.\n//\n// Generated by:\n//     public/app/plugins/gen.go\n// Using jennies:\n//     TSTypesJenny\n//     PluginTsTypesJenny\n//\n// Run 'make gen-cue' from repository root to regenerate.\n\nimport * as common from '@grafana/schema';\n\nexport enum VizDisplayMode {\n  Candles = 'candles',\n  CandlesVolume = 'candles+volume',\n  Volume = 'volume',\n}\n\nexport enum CandleStyle {\n  Candles = 'candles',\n  OHLCBars = 'ohlcbars',\n}\n\nexport enum ColorStrategy {\n  CloseClose = 'close-close',\n  OpenClose = 'open-close',\n}\n\nexport interface CandlestickFieldMap {\n  /**\n   * Corresponds to the final (end) value of the given period\n   */\n  close?: string;\n  /**\n   * Corresponds to the highest value of the given period\n   */\n  high?: string;\n  /**\n   * Corresponds to the lowest value of the given period\n   */\n  low?: string;\n  /**\n   * Corresponds to the starting value of the given period\n   */\n  open?: string;\n  /**\n   * Corresponds to the sample count in the given period. (e.g. number of trades)\n   */\n  volume?: string;\n}\n\nexport interface CandlestickColors {\n  down: string;\n  flat: string;\n  up: string;\n}\n\nexport const defaultCandlestickColors: Partial<CandlestickColors> = {\n  down: 'red',\n  flat: 'gray',\n  up: 'green',\n};\n\nexport interface Options extends common.OptionsWithLegend, common.OptionsWithTooltip {\n  /**\n   * Sets the style of the candlesticks\n   */\n  candleStyle: CandleStyle;\n  /**\n   * Sets the color strategy for the candlesticks\n   */\n  colorStrategy: ColorStrategy;\n  /**\n   * Set which colors are used when the price movement is up or down\n   */\n  colors: CandlestickColors;\n  /**\n   * Map fields to appropriate dimension\n   */\n  fields: CandlestickFieldMap;\n  /**\n   * When enabled, all fields will be sent to the graph\n   */\n  includeAllFields?: boolean;\n  /**\n   * Sets which dimensions are used for the visualization\n   */\n  mode: VizDisplayMode;\n}\n\nexport const defaultOptions: Partial<Options> = {\n  candleStyle: CandleStyle.Candles,\n  colorStrategy: ColorStrategy.OpenClose,\n  colors: {\n    down: 'red',\n    up: 'green',\n    flat: 'gray',\n  },\n  fields: {},\n  includeAllFields: false,\n  mode: VizDisplayMode.CandlesVolume,\n};\n\nexport interface FieldConfig extends common.GraphFieldConfig {}\n","import { LegendDisplayMode, SortOrder, TooltipDisplayMode } from '@grafana/schema';\n\nimport {\n  defaultOptions as defaultOptionsBase,\n  defaultCandlestickColors,\n  Options,\n  CandlestickColors,\n  CandleStyle,\n  ColorStrategy,\n  VizDisplayMode,\n  CandlestickFieldMap,\n  FieldConfig,\n} from './panelcfg.gen';\n\nexport const defaultOptions: Partial<Options> = {\n  ...defaultOptionsBase,\n  // TODO: This should be included in the cue schema in the future.\n  legend: {\n    displayMode: LegendDisplayMode.List,\n    showLegend: true,\n    placement: 'bottom',\n    calcs: [],\n  },\n  tooltip: {\n    mode: TooltipDisplayMode.Multi,\n    sort: SortOrder.None,\n  },\n};\n\nexport {\n  Options,\n  CandlestickColors,\n  defaultCandlestickColors,\n  CandleStyle,\n  ColorStrategy,\n  VizDisplayMode,\n  CandlestickFieldMap,\n  FieldConfig,\n};\n","import {\n  DataFrame,\n  Field,\n  FieldType,\n  getFieldDisplayName,\n  GrafanaTheme2,\n  outerJoinDataFrames,\n  TimeRange,\n} from '@grafana/data';\nimport { maybeSortFrame } from '@grafana/data/src/transformations/transformers/joinDataFrames';\nimport { findField } from 'app/features/dimensions';\n\nimport { prepareGraphableFields } from '../timeseries/utils';\n\nimport { Options, CandlestickFieldMap, VizDisplayMode } from './types';\n\nexport interface FieldPickerInfo {\n  /** property name */\n  key: keyof CandlestickFieldMap;\n\n  /** The display name */\n  name: string;\n\n  /** by default pick these fields */\n  defaults: string[];\n\n  /** How is the field used */\n  description: string;\n}\n\nexport const candlestickFieldsInfo: Record<keyof CandlestickFieldMap, FieldPickerInfo> = {\n  open: {\n    key: 'open',\n    name: 'Open',\n    defaults: ['open', 'o'],\n    description: 'Value at the start of the period',\n  },\n  high: {\n    key: 'high',\n    name: 'High',\n    defaults: ['high', 'h', 'max'],\n    description: 'Maximum value within the period',\n  },\n  low: {\n    key: 'low',\n    name: 'Low',\n    defaults: ['low', 'l', 'min'],\n    description: 'Minimum value within the period',\n  },\n  close: {\n    key: 'close',\n    name: 'Close',\n    defaults: ['close', 'c'],\n    description: 'Value at the end of the period',\n  },\n  volume: {\n    key: 'volume',\n    name: 'Volume',\n    defaults: ['volume', 'v'],\n    description: 'Sample count within the period',\n  },\n};\n\nexport interface CandlestickData {\n  autoOpenClose?: boolean;\n\n  // Special fields\n  open?: Field;\n  high?: Field;\n  low?: Field;\n  close?: Field;\n  volume?: Field;\n\n  // All incoming values\n  aligned: DataFrame;\n\n  // The stuff passed to GraphNG\n  frame: DataFrame;\n\n  // The real names used\n  names: CandlestickFieldMap;\n}\n\nfunction findFieldOrAuto(frame: DataFrame, info: FieldPickerInfo, options: CandlestickFieldMap): Field | undefined {\n  const field = findField(frame, options[info.key]);\n  if (!field) {\n    for (const field of frame.fields) {\n      const name = getFieldDisplayName(field, frame).toLowerCase();\n      if (info.defaults.includes(name) || info.defaults.includes(field.name)) {\n        return field;\n      }\n    }\n  }\n  return field;\n}\n\nexport function prepareCandlestickFields(\n  series: DataFrame[] | undefined,\n  options: Partial<Options>,\n  theme: GrafanaTheme2,\n  timeRange?: TimeRange\n): CandlestickData | null {\n  if (!series?.length) {\n    return null;\n  }\n\n  // All fields\n  const fieldMap = options.fields ?? {};\n  const aligned =\n    series.length === 1\n      ? maybeSortFrame(\n          series[0],\n          series[0].fields.findIndex((f) => f.type === FieldType.time)\n        )\n      : outerJoinDataFrames({ frames: series });\n  if (!aligned?.length) {\n    return null;\n  }\n\n  const data: CandlestickData = { aligned, frame: aligned, names: {} };\n\n  // Apply same filter as everything else in timeseries\n  const timeSeriesFrames = prepareGraphableFields([aligned], theme, timeRange);\n  if (!timeSeriesFrames) {\n    return null;\n  }\n\n  const frame = (data.frame = timeSeriesFrames[0]);\n  const timeIndex = frame.fields.findIndex((f) => f.type === FieldType.time);\n\n  if (timeIndex < 0) {\n    return null;\n  }\n\n  // Find the known fields\n  const used = new Set<Field>();\n  for (const info of Object.values(candlestickFieldsInfo)) {\n    const field = findFieldOrAuto(frame, info, fieldMap);\n    if (field) {\n      data[info.key] = field;\n      used.add(field);\n    }\n  }\n\n  // Use first numeric value as open\n  if (!data.open && !data.close) {\n    data.open = frame.fields.find((f) => f.type === FieldType.number);\n    if (data.open) {\n      used.add(data.open);\n    }\n  }\n\n  // Use next open as 'close' value\n  if (data.open && !data.close && !fieldMap.close) {\n    const values = data.open.values.slice(1);\n    values.push(values[values.length - 1]); // duplicate last value\n    data.close = {\n      ...data.open,\n      values: values,\n      name: 'Next open',\n      state: undefined,\n    };\n    used.add(data.close);\n    frame.fields.push(data.close);\n    data.autoOpenClose = true;\n  }\n\n  // Use previous close as 'open' value\n  if (data.close && !data.open && !fieldMap.open) {\n    const values = data.close.values.slice();\n    values.unshift(values[0]); // duplicate first value\n    values.length = frame.length;\n    data.open = {\n      ...data.close,\n      values: values,\n      name: 'Previous close',\n      state: undefined,\n    };\n    used.add(data.open);\n    frame.fields.push(data.open);\n    data.autoOpenClose = true;\n  }\n\n  // Use the open field for min/max if nothing is set\n  if (!data.high && !fieldMap.high) {\n    data.high = data.open;\n  }\n  if (!data.low && !fieldMap.low) {\n    data.low = data.open;\n  }\n\n  // unmap low and high fields in volume-only mode, and volume field in candles-only mode\n  // so they fall through to unmapped fields and get appropriate includeAllFields treatment\n  if (options.mode === VizDisplayMode.Volume) {\n    if (data.high) {\n      if (data.high !== data.open) {\n        used.delete(data.high);\n      }\n      data.high = undefined;\n    }\n    if (data.low) {\n      if (data.low !== data.open) {\n        used.delete(data.low);\n      }\n      data.low = undefined;\n    }\n  } else if (options.mode === VizDisplayMode.Candles) {\n    if (data.volume) {\n      used.delete(data.volume);\n      data.volume = undefined;\n    }\n  }\n\n  // Register the name of each mapped field\n  for (const info of Object.values(candlestickFieldsInfo)) {\n    const f = data[info.key];\n    if (f) {\n      data.names[info.key] = getFieldDisplayName(f, data.frame);\n    }\n  }\n\n  const timeField = frame.fields[timeIndex];\n\n  // Make sure first field is time!\n  const fields: Field[] = [timeField];\n\n  if (!options.includeAllFields) {\n    fields.push(...used);\n  } else {\n    fields.push(...frame.fields.filter((f) => f !== timeField));\n  }\n\n  data.frame = {\n    ...data.frame,\n    fields,\n  };\n\n  // Force update all the indicies\n  for (let i = 0; i < data.frame.fields.length; i++) {\n    const field = data.frame.fields[i];\n\n    field.state = {\n      ...field.state,\n\n      // time is unused (-1), y series enumerate from 0\n      seriesIndex: i - 1,\n\n      origin: {\n        fieldIndex: i,\n        frameIndex: 0,\n      },\n    };\n  }\n\n  return data;\n}\n","import uPlot from 'uplot';\n\nimport { colorManipulator } from '@grafana/data';\n\nimport { VizDisplayMode, ColorStrategy, CandleStyle } from './types';\n\nconst { alpha } = colorManipulator;\n\nexport type FieldIndices = Record<string, number>;\n\ninterface RendererOpts {\n  mode: VizDisplayMode;\n  candleStyle: CandleStyle;\n  fields: FieldIndices;\n  colorStrategy: ColorStrategy;\n  upColor: string;\n  downColor: string;\n  flatColor: string;\n  volumeAlpha: number;\n  flatAsUp: boolean;\n}\n\nexport function drawMarkers(opts: RendererOpts) {\n  let { mode, candleStyle, fields, colorStrategy, upColor, downColor, flatColor, volumeAlpha, flatAsUp = true } = opts;\n\n  const drawPrice = mode !== VizDisplayMode.Volume && fields.high != null && fields.low != null;\n  const asCandles = drawPrice && candleStyle === CandleStyle.Candles;\n  const drawVolume = mode !== VizDisplayMode.Candles && fields.volume != null;\n\n  function selectPath(priceDir: number, flatPath: Path2D, upPath: Path2D, downPath: Path2D, flatAsUp: boolean) {\n    return priceDir > 0 ? upPath : priceDir < 0 ? downPath : flatAsUp ? upPath : flatPath;\n  }\n\n  let tIdx = 0,\n    oIdx = fields.open,\n    hIdx = fields.high,\n    lIdx = fields.low,\n    cIdx = fields.close,\n    vIdx = fields.volume;\n\n  return (u: uPlot) => {\n    // split by discrete color to reduce draw calls\n    let downPath, upPath, flatPath;\n    // with adjusted reduced\n    let downPathVol, upPathVol, flatPathVol;\n\n    if (drawPrice) {\n      flatPath = new Path2D();\n      upPath = new Path2D();\n      downPath = new Path2D();\n    }\n\n    if (drawVolume) {\n      downPathVol = new Path2D();\n      upPathVol = new Path2D();\n      flatPathVol = new Path2D();\n    }\n\n    let hollowPath = new Path2D();\n\n    let ctx = u.ctx;\n\n    let tData = u.data[tIdx!];\n\n    let oData = u.data[oIdx!];\n    let cData = u.data[cIdx!];\n\n    let hData = drawPrice ? u.data[hIdx!] : null;\n    let lData = drawPrice ? u.data[lIdx!] : null;\n    let vData = drawVolume ? u.data[vIdx!] : null;\n\n    let zeroPx = vIdx != null ? Math.round(u.valToPos(0, u.series[vIdx!].scale!, true)) : null;\n\n    let [idx0, idx1] = u.series[0].idxs!;\n\n    let dataX = u.data[0];\n    let dataY = oData;\n\n    let colWidth = u.bbox.width;\n\n    if (dataX.length > 1) {\n      // prior index with non-undefined y data\n      let prevIdx = null;\n\n      // scan full dataset for smallest adjacent delta\n      // will not work properly for non-linear x scales, since does not do expensive valToPosX calcs till end\n      for (let i = 0, minDelta = Infinity; i < dataX.length; i++) {\n        if (dataY[i] !== undefined) {\n          if (prevIdx != null) {\n            let delta = Math.abs(dataX[i] - dataX[prevIdx]);\n\n            if (delta < minDelta) {\n              minDelta = delta;\n              colWidth = Math.abs(u.valToPos(dataX[i], 'x', true) - u.valToPos(dataX[prevIdx], 'x', true));\n            }\n          }\n\n          prevIdx = i;\n        }\n      }\n    }\n\n    let barWidth = Math.round(0.6 * colWidth);\n\n    let stickWidth = 2;\n    let outlineWidth = 2;\n\n    if (barWidth <= 12) {\n      stickWidth = outlineWidth = 1;\n    }\n\n    let halfWidth = Math.floor(barWidth / 2);\n\n    for (let i = idx0; i <= idx1; i++) {\n      let tPx = Math.round(u.valToPos(tData[i]!, 'x', true));\n\n      // current close vs prior close\n      let interDir = i === idx0 ? 0 : Math.sign(cData[i]! - cData[i - 1]!);\n      // current close vs current open\n      let intraDir = Math.sign(cData[i]! - oData[i]!);\n\n      // volume\n      if (drawVolume && flatPathVol && upPathVol && downPathVol) {\n        let outerPath = selectPath(\n          colorStrategy === ColorStrategy.CloseClose ? interDir : intraDir,\n          flatPathVol,\n          upPathVol,\n          downPathVol,\n          i === idx0 && ColorStrategy.CloseClose ? false : flatAsUp\n        );\n\n        let vPx = Math.round(u.valToPos(vData![i]!, u.series[vIdx!].scale!, true));\n        outerPath.rect(tPx - halfWidth, vPx, barWidth, zeroPx! - vPx);\n      }\n\n      if (drawPrice && flatPath && upPath && downPath) {\n        let outerPath = selectPath(\n          colorStrategy === ColorStrategy.CloseClose ? interDir : intraDir,\n          flatPath,\n          upPath,\n          downPath,\n          i === idx0 && ColorStrategy.CloseClose ? false : flatAsUp\n        );\n\n        // stick\n        let hPx = Math.round(u.valToPos(hData![i]!, u.series[hIdx!].scale!, true));\n        let lPx = Math.round(u.valToPos(lData![i]!, u.series[lIdx!].scale!, true));\n        outerPath.rect(tPx - Math.floor(stickWidth / 2), hPx, stickWidth, lPx - hPx);\n\n        let oPx = Math.round(u.valToPos(oData[i]!, u.series[oIdx!].scale!, true));\n        let cPx = Math.round(u.valToPos(cData[i]!, u.series[cIdx!].scale!, true));\n\n        if (asCandles) {\n          // rect\n          let top = Math.min(oPx, cPx);\n          let btm = Math.max(oPx, cPx);\n          let hgt = Math.max(1, btm - top);\n          outerPath.rect(tPx - halfWidth, top, barWidth, hgt);\n\n          if (colorStrategy === ColorStrategy.CloseClose) {\n            if (intraDir >= 0 && hgt > outlineWidth * 2) {\n              hollowPath.rect(\n                tPx - halfWidth + outlineWidth,\n                top + outlineWidth,\n                barWidth - outlineWidth * 2,\n                hgt - outlineWidth * 2\n              );\n            }\n          }\n        } else {\n          outerPath.rect(tPx - halfWidth, oPx, halfWidth, stickWidth);\n          outerPath.rect(tPx, cPx, halfWidth, stickWidth);\n        }\n      }\n    }\n\n    ctx.save();\n\n    ctx.rect(u.bbox.left, u.bbox.top, u.bbox.width, u.bbox.height);\n    ctx.clip();\n\n    if (drawVolume && flatPathVol && upPathVol && downPathVol) {\n      ctx.fillStyle = alpha(upColor, volumeAlpha);\n      ctx.fill(upPathVol);\n\n      ctx.fillStyle = alpha(downColor, volumeAlpha);\n      ctx.fill(downPathVol);\n\n      ctx.fillStyle = alpha(flatColor, volumeAlpha);\n      ctx.fill(flatPathVol);\n    }\n\n    if (drawPrice && flatPath && upPath && downPath) {\n      ctx.fillStyle = upColor;\n      ctx.fill(upPath);\n\n      ctx.fillStyle = downColor;\n      ctx.fill(downPath);\n\n      ctx.fillStyle = flatColor;\n      ctx.fill(flatPath);\n\n      ctx.globalCompositeOperation = 'destination-out';\n      ctx.fill(hollowPath);\n    }\n\n    ctx.restore();\n  };\n}\n","// this file is pretty much a copy-paste of TimeSeriesPanel.tsx :(\n// with some extra renderers passed to the <TimeSeries> component\n\nimport { useMemo, useState } from 'react';\nimport uPlot from 'uplot';\n\nimport { Field, getDisplayProcessor, PanelProps } from '@grafana/data';\nimport { PanelDataErrorView } from '@grafana/runtime';\nimport { DashboardCursorSync, TooltipDisplayMode } from '@grafana/schema';\nimport {\n  EventBusPlugin,\n  KeyboardPlugin,\n  TooltipPlugin2,\n  UPlotConfigBuilder,\n  usePanelContext,\n  useTheme2,\n} from '@grafana/ui';\nimport { AxisProps } from '@grafana/ui/src/components/uPlot/config/UPlotAxisBuilder';\nimport { ScaleProps } from '@grafana/ui/src/components/uPlot/config/UPlotScaleBuilder';\nimport { TimeRange2, TooltipHoverMode } from '@grafana/ui/src/components/uPlot/plugins/TooltipPlugin2';\nimport { TimeSeries } from 'app/core/components/TimeSeries/TimeSeries';\nimport { config } from 'app/core/config';\n\nimport { TimeSeriesTooltip } from '../timeseries/TimeSeriesTooltip';\nimport { AnnotationsPlugin2 } from '../timeseries/plugins/AnnotationsPlugin2';\nimport { ExemplarsPlugin } from '../timeseries/plugins/ExemplarsPlugin';\nimport { OutsideRangePlugin } from '../timeseries/plugins/OutsideRangePlugin';\nimport { ThresholdControlsPlugin } from '../timeseries/plugins/ThresholdControlsPlugin';\n\nimport { prepareCandlestickFields } from './fields';\nimport { Options, defaultCandlestickColors, VizDisplayMode } from './types';\nimport { drawMarkers, FieldIndices } from './utils';\n\ninterface CandlestickPanelProps extends PanelProps<Options> {}\n\nexport const CandlestickPanel = ({\n  data,\n  id,\n  timeRange,\n  timeZone,\n  width,\n  height,\n  options,\n  fieldConfig,\n  onChangeTimeRange,\n  replaceVariables,\n}: CandlestickPanelProps) => {\n  const {\n    sync,\n    eventsScope,\n    canAddAnnotations,\n    onThresholdsChange,\n    canEditThresholds,\n    showThresholds,\n    dataLinkPostProcessor,\n    eventBus,\n  } = usePanelContext();\n\n  const theme = useTheme2();\n\n  const info = useMemo(() => {\n    return prepareCandlestickFields(data.series, options, theme, timeRange);\n  }, [data.series, options, theme, timeRange]);\n\n  // temp range set for adding new annotation set by TooltipPlugin2, consumed by AnnotationPlugin2\n  const [newAnnotationRange, setNewAnnotationRange] = useState<TimeRange2 | null>(null);\n  const cursorSync = sync?.() ?? DashboardCursorSync.Off;\n\n  const { renderers, tweakScale, tweakAxis, shouldRenderPrice } = useMemo(() => {\n    let tweakScale = (opts: ScaleProps, forField: Field) => opts;\n    let tweakAxis = (opts: AxisProps, forField: Field) => opts;\n\n    let doNothing = {\n      renderers: [],\n      tweakScale,\n      tweakAxis,\n      shouldRenderPrice: false,\n    };\n\n    if (!info) {\n      return doNothing;\n    }\n\n    // Un-encoding the already parsed special fields\n    // This takes currently matched fields and saves the name so they can be looked up by name later\n    // ¯\\_(ツ)_/¯  someday this can make more sense!\n    const fieldMap = info.names;\n\n    if (!Object.keys(fieldMap).length) {\n      return doNothing;\n    }\n\n    const { mode, candleStyle, colorStrategy } = options;\n    const colors = { ...defaultCandlestickColors, ...options.colors };\n    let { open, high, low, close, volume } = fieldMap; // names from matched fields\n\n    if (open == null || close == null) {\n      return doNothing;\n    }\n\n    let volumeAlpha = 0.5;\n\n    let volumeIdx = -1;\n\n    let shouldRenderVolume = false;\n\n    // find volume field and set overrides\n    if (volume != null && mode !== VizDisplayMode.Candles) {\n      let volumeField = info.volume!;\n\n      if (volumeField != null) {\n        shouldRenderVolume = true;\n\n        let { fillOpacity } = volumeField.config.custom;\n\n        if (fillOpacity) {\n          volumeAlpha = fillOpacity / 100;\n        }\n\n        // we only want to put volume on own shorter axis when rendered with price\n        if (mode !== VizDisplayMode.Volume) {\n          volumeField.config = { ...volumeField.config };\n          volumeField.config.unit = 'short';\n          volumeField.display = getDisplayProcessor({\n            field: volumeField,\n            theme: config.theme2,\n          });\n\n          tweakAxis = (opts: AxisProps, forField: Field) => {\n            // we can't do forField === info.volume because of copies :(\n            if (forField.name === info.volume?.name) {\n              let filter = (u: uPlot, splits: number[]) => {\n                let _splits = [];\n                let max = u.series[volumeIdx].max;\n\n                for (let i = 0; i < splits.length; i++) {\n                  _splits.push(splits[i]);\n\n                  if (max && splits[i] > max) {\n                    break;\n                  }\n                }\n\n                return _splits;\n              };\n\n              opts.space = 20; // reduce tick spacing\n              opts.filter = filter; // hide tick labels\n              opts.ticks = { ...opts.ticks, filter }; // hide tick marks\n            }\n\n            return opts;\n          };\n\n          tweakScale = (opts: ScaleProps, forField: Field) => {\n            // we can't do forField === info.volume because of copies :(\n            if (forField.name === info.volume?.name) {\n              opts.range = (u: uPlot, min: number, max: number) => [0, max * 7];\n            }\n\n            return opts;\n          };\n        }\n      }\n    }\n\n    let shouldRenderPrice = mode !== VizDisplayMode.Volume && high != null && low != null;\n\n    if (!shouldRenderPrice && !shouldRenderVolume) {\n      return doNothing;\n    }\n\n    let fields: Record<string, string> = {};\n    let indicesOnly = [];\n\n    if (shouldRenderPrice) {\n      fields = { open, high: high!, low: low!, close };\n    } else {\n      // these fields should not be omitted from normal rendering if they arent rendered\n      // as part of price markers. they're only here so we can get back their indicies in the\n      // init callback below. TODO: remove this when field mapping happens in the panel instead of deep\n      indicesOnly.push(open, close);\n    }\n\n    if (shouldRenderVolume) {\n      fields.volume = volume!;\n      fields.open = open;\n      fields.close = close;\n    }\n\n    return {\n      shouldRenderPrice,\n      renderers: [\n        {\n          fieldMap: fields,\n          indicesOnly,\n          init: (builder: UPlotConfigBuilder, fieldIndices: FieldIndices) => {\n            volumeIdx = fieldIndices.volume!;\n\n            builder.addHook(\n              'drawAxes',\n              drawMarkers({\n                mode,\n                fields: fieldIndices,\n                upColor: config.theme2.visualization.getColorByName(colors.up),\n                downColor: config.theme2.visualization.getColorByName(colors.down),\n                flatColor: config.theme2.visualization.getColorByName(colors.flat),\n                volumeAlpha,\n                colorStrategy,\n                candleStyle,\n                flatAsUp: true,\n              })\n            );\n          },\n        },\n      ],\n      tweakScale,\n      tweakAxis,\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [options, data.structureRev, data.series.length]);\n\n  if (!info) {\n    return (\n      <PanelDataErrorView\n        panelId={id}\n        fieldConfig={fieldConfig}\n        data={data}\n        needsTimeField={true}\n        needsNumberField={true}\n      />\n    );\n  }\n\n  if (shouldRenderPrice) {\n    // hide series from legend that are rendered as composite markers\n    for (let key in renderers[0].fieldMap) {\n      let field: Field = (info as any)[key];\n      field.config = {\n        ...field.config,\n        custom: {\n          ...field.config.custom,\n          hideFrom: { legend: true, tooltip: false, viz: false },\n        },\n      };\n    }\n  }\n\n  const enableAnnotationCreation = Boolean(canAddAnnotations?.());\n\n  return (\n    <TimeSeries\n      frames={[info.frame]}\n      structureRev={data.structureRev}\n      timeRange={timeRange}\n      timeZone={timeZone}\n      width={width}\n      height={height}\n      legend={options.legend}\n      renderers={renderers}\n      tweakAxis={tweakAxis}\n      tweakScale={tweakScale}\n      options={options}\n      replaceVariables={replaceVariables}\n      dataLinkPostProcessor={dataLinkPostProcessor}\n      cursorSync={cursorSync}\n    >\n      {(uplotConfig, alignedFrame) => {\n        return (\n          <>\n            <KeyboardPlugin config={uplotConfig} />\n            {cursorSync !== DashboardCursorSync.Off && (\n              <EventBusPlugin config={uplotConfig} eventBus={eventBus} frame={alignedFrame} />\n            )}\n            {options.tooltip.mode !== TooltipDisplayMode.None && (\n              <TooltipPlugin2\n                config={uplotConfig}\n                hoverMode={\n                  options.tooltip.mode === TooltipDisplayMode.Single ? TooltipHoverMode.xOne : TooltipHoverMode.xAll\n                }\n                queryZoom={onChangeTimeRange}\n                clientZoom={true}\n                syncMode={cursorSync}\n                syncScope={eventsScope}\n                render={(u, dataIdxs, seriesIdx, isPinned = false, dismiss, timeRange2, viaSync) => {\n                  if (enableAnnotationCreation && timeRange2 != null) {\n                    setNewAnnotationRange(timeRange2);\n                    dismiss();\n                    return;\n                  }\n\n                  const annotate = () => {\n                    let xVal = u.posToVal(u.cursor.left!, 'x');\n\n                    setNewAnnotationRange({ from: xVal, to: xVal });\n                    dismiss();\n                  };\n\n                  return (\n                    <TimeSeriesTooltip\n                      series={alignedFrame}\n                      dataIdxs={dataIdxs}\n                      seriesIdx={seriesIdx}\n                      mode={viaSync ? TooltipDisplayMode.Multi : options.tooltip.mode}\n                      sortOrder={options.tooltip.sort}\n                      isPinned={isPinned}\n                      annotate={enableAnnotationCreation ? annotate : undefined}\n                      maxHeight={options.tooltip.maxHeight}\n                      replaceVariables={replaceVariables}\n                    />\n                  );\n                }}\n                maxWidth={options.tooltip.maxWidth}\n              />\n            )}\n            <AnnotationsPlugin2\n              annotations={data.annotations ?? []}\n              config={uplotConfig}\n              timeZone={timeZone}\n              newRange={newAnnotationRange}\n              setNewRange={setNewAnnotationRange}\n            />\n            <OutsideRangePlugin config={uplotConfig} onChangeTimeRange={onChangeTimeRange} />\n            {data.annotations && (\n              <ExemplarsPlugin config={uplotConfig} exemplars={data.annotations} timeZone={timeZone} />\n            )}\n            {((canEditThresholds && onThresholdsChange) || showThresholds) && (\n              <ThresholdControlsPlugin\n                config={uplotConfig}\n                fieldConfig={fieldConfig}\n                onThresholdsChange={canEditThresholds ? onThresholdsChange : undefined}\n              />\n            )}\n          </>\n        );\n      }}\n    </TimeSeries>\n  );\n};\n","import { VisualizationSuggestionsBuilder, VisualizationSuggestionScore } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { SuggestionName } from 'app/types/suggestions';\n\nimport { prepareCandlestickFields } from './fields';\nimport { defaultOptions, Options } from './types';\n\nexport class CandlestickSuggestionsSupplier {\n  getSuggestionsForData(builder: VisualizationSuggestionsBuilder) {\n    const { dataSummary } = builder;\n\n    if (\n      !builder.data?.series ||\n      !dataSummary.hasData ||\n      dataSummary.timeFieldCount < 1 ||\n      dataSummary.numberFieldCount < 2 ||\n      dataSummary.numberFieldCount > 10\n    ) {\n      return;\n    }\n\n    const info = prepareCandlestickFields(builder.data.series, defaultOptions, config.theme2);\n    if (!info) {\n      return;\n    }\n\n    // Regular timeseries\n    if (info.open === info.high && info.open === info.low) {\n      return;\n    }\n\n    const list = builder.getListAppender<Options, {}>({\n      name: '',\n      pluginId: 'candlestick',\n      options: {},\n      fieldConfig: {\n        defaults: {\n          custom: {},\n        },\n        overrides: [],\n      },\n    });\n\n    list.append({\n      name: SuggestionName.Candlestick,\n      options: defaultOptions,\n      fieldConfig: {\n        defaults: {},\n        overrides: [],\n      },\n      score: info.autoOpenClose ? VisualizationSuggestionScore.Good : VisualizationSuggestionScore.Best,\n    });\n  }\n}\n","import {\n  Field,\n  FieldType,\n  getFieldDisplayName,\n  PanelOptionsEditorBuilder,\n  PanelPlugin,\n  SelectableValue,\n} from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { GraphFieldConfig } from '@grafana/schema';\nimport { commonOptionsBuilder } from '@grafana/ui';\n\nimport { defaultGraphConfig, getGraphFieldConfig } from '../timeseries/config';\n\nimport { CandlestickPanel } from './CandlestickPanel';\nimport { CandlestickData, candlestickFieldsInfo, FieldPickerInfo, prepareCandlestickFields } from './fields';\nimport { CandlestickSuggestionsSupplier } from './suggestions';\nimport { defaultCandlestickColors, defaultOptions, Options, VizDisplayMode, ColorStrategy, CandleStyle } from './types';\n\nconst modeOptions: Array<SelectableValue<VizDisplayMode>> = [\n  { label: 'Candles', value: VizDisplayMode.Candles },\n  { label: 'Volume', value: VizDisplayMode.Volume },\n  { label: 'Both', value: VizDisplayMode.CandlesVolume },\n];\n\nconst candleStyles: Array<SelectableValue<CandleStyle>> = [\n  { label: 'Candles', value: CandleStyle.Candles },\n  { label: 'OHLC Bars', value: CandleStyle.OHLCBars },\n];\n\nconst colorStrategies: Array<SelectableValue<ColorStrategy>> = [\n  { label: 'Since Open', value: ColorStrategy.OpenClose },\n  { label: 'Since Prior Close', value: ColorStrategy.CloseClose },\n];\n\nconst numericFieldFilter = (f: Field) => f.type === FieldType.number;\n\nfunction addFieldPicker(\n  builder: PanelOptionsEditorBuilder<Options>,\n  info: FieldPickerInfo,\n  data: CandlestickData | null\n) {\n  let placeholderText = 'Auto ';\n\n  if (data) {\n    const current = data[info.key];\n\n    if (current?.config) {\n      placeholderText += '= ' + getFieldDisplayName(current);\n\n      if (current === data?.open && info.key !== 'open') {\n        placeholderText += ` (${info.defaults.join(',')})`;\n      }\n    } else {\n      placeholderText += `(${info.defaults.join(',')})`;\n    }\n  }\n\n  builder.addFieldNamePicker({\n    path: `fields.${info.key}`,\n    name: info.name,\n    description: info.description,\n    settings: {\n      filter: numericFieldFilter,\n      placeholderText,\n    },\n  });\n}\n\nexport const plugin = new PanelPlugin<Options, GraphFieldConfig>(CandlestickPanel)\n  .useFieldConfig(getGraphFieldConfig(defaultGraphConfig))\n  .setPanelOptions((builder, context) => {\n    const opts = context.options ?? defaultOptions;\n    const info = prepareCandlestickFields(context.data, opts, config.theme2);\n\n    builder\n      .addRadio({\n        path: 'mode',\n        name: 'Mode',\n        description: '',\n        defaultValue: defaultOptions.mode,\n        settings: {\n          options: modeOptions,\n        },\n      })\n      .addRadio({\n        path: 'candleStyle',\n        name: 'Candle style',\n        description: '',\n        defaultValue: defaultOptions.candleStyle,\n        settings: {\n          options: candleStyles,\n        },\n        showIf: (opts) => opts.mode !== VizDisplayMode.Volume,\n      })\n      .addRadio({\n        path: 'colorStrategy',\n        name: 'Color strategy',\n        description: '',\n        defaultValue: defaultOptions.colorStrategy,\n        settings: {\n          options: colorStrategies,\n        },\n      })\n      .addColorPicker({\n        path: 'colors.up',\n        name: 'Up color',\n        defaultValue: defaultCandlestickColors.up,\n      })\n      .addColorPicker({\n        path: 'colors.down',\n        name: 'Down color',\n        defaultValue: defaultCandlestickColors.down,\n      });\n\n    addFieldPicker(builder, candlestickFieldsInfo.open, info);\n    if (opts.mode !== VizDisplayMode.Volume) {\n      addFieldPicker(builder, candlestickFieldsInfo.high, info);\n      addFieldPicker(builder, candlestickFieldsInfo.low, info);\n    }\n    addFieldPicker(builder, candlestickFieldsInfo.close, info);\n\n    if (opts.mode !== VizDisplayMode.Candles) {\n      addFieldPicker(builder, candlestickFieldsInfo.volume, info);\n    }\n\n    builder.addRadio({\n      path: 'includeAllFields',\n      name: 'Additional fields',\n      description: 'Use standard timeseries options to configure any fields not mapped above',\n      defaultValue: defaultOptions.includeAllFields,\n      settings: {\n        options: [\n          { label: 'Ignore', value: false },\n          { label: 'Include', value: true },\n        ],\n      },\n    });\n\n    commonOptionsBuilder.addTooltipOptions(builder, false, true, opts);\n    commonOptionsBuilder.addLegendOptions(builder);\n  })\n  .setDataSupport({ annotations: true, alertStates: true })\n  .setSuggestionsSupplier(new CandlestickSuggestionsSupplier());\n"],"names":["VizDisplayMode","CandleStyle","ColorStrategy","defaultCandlestickColors","candlestickFieldsInfo","findFieldOrAuto","frame","info","options","field","name","prepareCandlestickFields","series","theme","timeRange","fieldMap","aligned","f","data","timeSeriesFrames","timeIndex","used","values","timeField","fields","i","alpha","colorManipulator","drawMarkers","opts","mode","candleStyle","colorStrategy","upColor","downColor","flatColor","volumeAlpha","flatAsUp","drawPrice","asCandles","drawVolume","selectPath","priceDir","flatPath","upPath","downPath","tIdx","oIdx","hIdx","lIdx","cIdx","vIdx","u","downPathVol","upPathVol","flatPathVol","hollowPath","ctx","tData","oData","cData","hData","lData","vData","zeroPx","idx0","idx1","dataX","dataY","colWidth","prevIdx","minDelta","delta","barWidth","stickWidth","outlineWidth","halfWidth","tPx","interDir","intraDir","outerPath","vPx","hPx","lPx","oPx","cPx","top","btm","hgt","CandlestickPanel","id","timeZone","width","height","fieldConfig","onChangeTimeRange","replaceVariables","sync","eventsScope","canAddAnnotations","onThresholdsChange","canEditThresholds","showThresholds","dataLinkPostProcessor","eventBus","newAnnotationRange","setNewAnnotationRange","cursorSync","renderers","tweakScale","tweakAxis","shouldRenderPrice","forField","doNothing","colors","open","high","low","close","volume","volumeIdx","shouldRenderVolume","volumeField","fillOpacity","filter","splits","_splits","max","min","indicesOnly","builder","fieldIndices","PanelDataErrorView","key","enableAnnotationCreation","TimeSeries","uplotConfig","alignedFrame","KeyboardPlugin","EventBusPlugin","TooltipPlugin2","dataIdxs","seriesIdx","isPinned","dismiss","timeRange2","viaSync","annotate","xVal","TimeSeriesTooltip","AnnotationsPlugin2","OutsideRangePlugin","ExemplarsPlugin","ThresholdControlsPlugin","CandlestickSuggestionsSupplier","dataSummary","config","modeOptions","candleStyles","colorStrategies","numericFieldFilter","addFieldPicker","placeholderText","current","PanelPlugin","context"],"sourceRoot":""}