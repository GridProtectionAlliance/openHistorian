{"version":3,"file":"graphPlugin.96dc70448c0f8bd45ae7.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/state/ThresholdMapper.ts","webpack://grafana/./public/app/features/dashboard/utils/loadSnapshotData.ts","webpack://grafana/./public/app/features/panel/panellinks/linkSuppliers.ts","webpack://grafana/./public/app/plugins/panel/graph/jquery.flot.events.ts","webpack://grafana/./public/app/plugins/panel/graph/Legend/LegendSeriesItem.tsx","webpack://grafana/./public/app/plugins/panel/graph/Legend/Legend.tsx","webpack://grafana/./public/app/plugins/panel/graph/align_yaxes.ts","webpack://grafana/./public/app/plugins/panel/graph/event_manager.ts","webpack://grafana/./public/app/plugins/panel/graph/graph_tooltip.ts","webpack://grafana/./public/app/plugins/panel/graph/histogram.ts","webpack://grafana/./public/app/plugins/panel/graph/threshold_manager.ts","webpack://grafana/./public/app/core/utils/timeRegions.ts","webpack://grafana/./public/app/plugins/panel/graph/time_region_manager.ts","webpack://grafana/./public/app/plugins/panel/graph/graph.ts","webpack://grafana/./public/app/plugins/panel/graph/utils.ts","webpack://grafana/./public/app/plugins/panel/graph/series_overrides_ctrl.ts","webpack://grafana/./public/app/plugins/panel/graph/thresholds_form.ts","webpack://grafana/./public/app/plugins/panel/graph/time_regions_form.ts","webpack://grafana/./public/app/plugins/panel/graph/annotation_tooltip.ts","webpack://grafana/./public/app/plugins/panel/graph/event_editor.ts","webpack://grafana/./public/app/plugins/panel/graph/GraphContextMenuCtrl.ts","webpack://grafana/./public/app/plugins/panel/graph/axes_editor.ts","webpack://grafana/./public/app/plugins/panel/graph/module.ts","webpack://grafana/./public/app/plugins/panel/graph/template.ts","webpack://grafana/./public/app/plugins/panel/graph/GraphMigrations.ts"],"sourcesContent":["import { config } from 'app/core/config';\nimport { PanelModel } from 'app/features/dashboard/state';\n\nexport const hiddenReducerTypes = ['percent_diff', 'percent_diff_abs'];\nexport class ThresholdMapper {\n  static alertToGraphThresholds(panel: PanelModel) {\n    if (!panel.alert || config.unifiedAlertingEnabled) {\n      return false; // no update when no alerts\n    }\n\n    for (let i = 0; i < panel.alert.conditions.length; i++) {\n      const condition = panel.alert.conditions[i];\n      if (condition.type !== 'query') {\n        continue;\n      }\n\n      const evaluator = condition.evaluator;\n      const thresholds: any[] = (panel.thresholds = []);\n      const visible = hiddenReducerTypes.indexOf(condition.reducer?.type) === -1;\n\n      switch (evaluator.type) {\n        case 'gt': {\n          const value = evaluator.params[0];\n          thresholds.push({ value: value, op: 'gt', visible });\n          break;\n        }\n        case 'lt': {\n          const value = evaluator.params[0];\n          thresholds.push({ value: value, op: 'lt', visible });\n          break;\n        }\n        case 'outside_range': {\n          const value1 = evaluator.params[0];\n          const value2 = evaluator.params[1];\n\n          if (value1 > value2) {\n            thresholds.push({ value: value1, op: 'gt', visible });\n            thresholds.push({ value: value2, op: 'lt', visible });\n          } else {\n            thresholds.push({ value: value1, op: 'lt', visible });\n            thresholds.push({ value: value2, op: 'gt', visible });\n          }\n\n          break;\n        }\n        case 'within_range': {\n          const value1 = evaluator.params[0];\n          const value2 = evaluator.params[1];\n\n          if (value1 > value2) {\n            thresholds.push({ value: value1, op: 'lt', visible });\n            thresholds.push({ value: value2, op: 'gt', visible });\n          } else {\n            thresholds.push({ value: value1, op: 'gt', visible });\n            thresholds.push({ value: value2, op: 'lt', visible });\n          }\n          break;\n        }\n      }\n      break;\n    }\n\n    for (const t of panel.thresholds) {\n      t.fill = panel.options.alertThreshold;\n      t.line = panel.options.alertThreshold;\n      t.colorMode = 'critical';\n    }\n\n    const updated = true;\n    return updated;\n  }\n}\n","import { applyFieldOverrides, ArrayDataFrame, getDefaultTimeRange, LoadingState, PanelData } from '@grafana/data';\nimport { config } from 'app/core/config';\n\nimport { SnapshotWorker } from '../../query/state/DashboardQueryRunner/SnapshotWorker';\nimport { getProcessedDataFrames } from '../../query/state/runRequest';\nimport { getTimeSrv } from '../services/TimeSrv';\nimport { DashboardModel, PanelModel } from '../state';\n\nimport { applyPanelTimeOverrides } from './panel';\n\nexport function loadSnapshotData(panel: PanelModel, dashboard: DashboardModel): PanelData {\n  const data = getProcessedDataFrames(panel.snapshotData);\n  const worker = new SnapshotWorker();\n  const options = { dashboard, range: getDefaultTimeRange() };\n  const annotationEvents = worker.canWork(options) ? worker.getAnnotationsInSnapshot(dashboard, panel.id) : [];\n  const annotations = [new ArrayDataFrame(annotationEvents)];\n  const timeData = applyPanelTimeOverrides(panel, getTimeSrv().timeRange());\n\n  return {\n    timeRange: timeData.timeRange,\n    state: LoadingState.Done,\n    series: applyFieldOverrides({\n      data,\n      fieldConfig: {\n        defaults: {},\n        overrides: [],\n      },\n      replaceVariables: panel.replaceVariables,\n      fieldConfigRegistry: panel.plugin!.fieldConfigRegistry,\n      theme: config.theme2,\n      timeZone: dashboard.getTimezone(),\n    }),\n    annotations,\n  };\n}\n","import {\n  DataLink,\n  DisplayValue,\n  FieldDisplay,\n  formattedValueToString,\n  getFieldDisplayValuesProxy,\n  getTimeField,\n  InterpolateFunction,\n  Labels,\n  LinkModelSupplier,\n  ScopedVar,\n  ScopedVars,\n} from '@grafana/data';\nimport { PanelModel } from 'app/features/dashboard/state/PanelModel';\n\nimport { getLinkSrv } from './link_srv';\n\ninterface SeriesVars {\n  name?: string;\n  refId?: string;\n}\n\ninterface FieldVars {\n  name: string;\n  labels?: Labels;\n}\n\ninterface ValueVars {\n  raw: any;\n  numeric: number;\n  text: string;\n  time?: number;\n  calc?: string;\n}\n\ninterface DataViewVars {\n  name?: string;\n  refId?: string;\n  fields?: Record<string, DisplayValue>;\n}\n\ninterface DataLinkScopedVars extends ScopedVars {\n  __series: ScopedVar<SeriesVars>;\n  __field: ScopedVar<FieldVars>;\n  __value: ScopedVar<ValueVars>;\n  __data: ScopedVar<DataViewVars>;\n}\n\n/**\n * Link suppliers creates link models based on a link origin\n */\nexport const getFieldLinksSupplier = (value: FieldDisplay): LinkModelSupplier<FieldDisplay> | undefined => {\n  const links = value.field.links;\n  if (!links || links.length === 0) {\n    return undefined;\n  }\n\n  return {\n    getLinks: (replaceVariables: InterpolateFunction) => {\n      const scopedVars: Partial<DataLinkScopedVars> = {};\n\n      if (value.view) {\n        const { dataFrame } = value.view;\n\n        scopedVars['__series'] = {\n          value: {\n            name: dataFrame.name,\n            refId: dataFrame.refId,\n          },\n          text: 'Series',\n        };\n\n        const field = value.colIndex !== undefined ? dataFrame.fields[value.colIndex] : undefined;\n\n        if (field) {\n          scopedVars['__field'] = {\n            value: {\n              name: field.name,\n              labels: field.labels,\n            },\n            text: 'Field',\n          };\n\n          if (value.rowIndex !== undefined && value.rowIndex >= 0) {\n            const { timeField } = getTimeField(dataFrame);\n            scopedVars['__value'] = {\n              value: {\n                raw: field.values.get(value.rowIndex),\n                numeric: value.display.numeric,\n                text: formattedValueToString(value.display),\n                time: timeField ? timeField.values.get(value.rowIndex) : undefined,\n              },\n              text: 'Value',\n            };\n          }\n\n          // Expose other values on the row\n          if (value.view) {\n            scopedVars['__data'] = {\n              value: {\n                name: dataFrame.name,\n                refId: dataFrame.refId,\n                fields: getFieldDisplayValuesProxy({\n                  frame: dataFrame,\n                  rowIndex: value.rowIndex!,\n                }),\n              },\n              text: 'Data',\n            };\n          }\n        } else {\n          // calculation\n          scopedVars['__value'] = {\n            value: {\n              raw: value.display.numeric,\n              numeric: value.display.numeric,\n              text: formattedValueToString(value.display),\n              calc: value.name,\n            },\n            text: 'Value',\n          };\n        }\n      } else {\n        console.log('VALUE', value);\n      }\n\n      const replace: InterpolateFunction = (value: string, vars: ScopedVars | undefined, fmt?: string | Function) => {\n        const finalVars: ScopedVars = {\n          ...(scopedVars as ScopedVars),\n          ...vars,\n        };\n        return replaceVariables(value, finalVars, fmt);\n      };\n\n      return links.map((link: DataLink) => {\n        return getLinkSrv().getDataLinkUIModel(link, replace, value);\n      });\n    },\n  };\n};\n\nexport const getPanelLinksSupplier = (panel: PanelModel): LinkModelSupplier<PanelModel> | undefined => {\n  const links = panel.links;\n\n  if (!links || links.length === 0) {\n    return undefined;\n  }\n\n  return {\n    getLinks: () => {\n      return links.map((link) => {\n        return getLinkSrv().getDataLinkUIModel(link, panel.replaceVariables, panel);\n      });\n    },\n  };\n};\n","import $ from 'jquery';\nimport { partition, each } from 'lodash';\n//@ts-ignore\nimport Drop from 'tether-drop';\n\nimport { CreatePlotOverlay } from '@grafana/data';\nimport { getLegacyAngularInjector } from '@grafana/runtime';\n\n/** @ngInject */\nconst createAnnotationToolip: CreatePlotOverlay = (element, event, plot) => {\n  const injector = getLegacyAngularInjector();\n  const content = document.createElement('div');\n  content.innerHTML = '<annotation-tooltip event=\"event\" on-edit=\"onEdit()\"></annotation-tooltip>';\n\n  injector.invoke([\n    '$compile',\n    '$rootScope',\n    ($compile, $rootScope) => {\n      const eventManager = plot.getOptions().events.manager;\n      const tmpScope = $rootScope.$new(true);\n      tmpScope.event = event;\n      tmpScope.onEdit = () => {\n        eventManager.editEvent(event);\n      };\n\n      $compile(content)(tmpScope);\n      tmpScope.$digest();\n      tmpScope.$destroy();\n\n      const drop = new Drop({\n        target: element[0],\n        content: content,\n        position: 'bottom center',\n        classes: 'drop-popover drop-popover--annotation',\n        openOn: 'hover',\n        hoverCloseDelay: 200,\n        tetherOptions: {\n          constraints: [{ to: 'window', pin: true, attachment: 'both' }],\n        },\n      });\n\n      drop.open();\n\n      drop.on('close', () => {\n        setTimeout(() => {\n          drop.destroy();\n        });\n      });\n    },\n  ]);\n};\n\nlet markerElementToAttachTo: any = null;\n\n/** @ngInject */\nconst createEditPopover: CreatePlotOverlay = (element, event, plot) => {\n  const eventManager = plot.getOptions().events.manager;\n  if (eventManager.editorOpen) {\n    // update marker element to attach to (needed in case of legend on the right\n    // when there is a double render pass and the initial marker element is removed)\n    markerElementToAttachTo = element;\n    return;\n  }\n\n  // mark as openend\n  eventManager.editorOpened();\n  // set marker elment to attache to\n  markerElementToAttachTo = element;\n\n  // wait for element to be attached and positioned\n  setTimeout(() => {\n    const injector = getLegacyAngularInjector();\n    const content = document.createElement('div');\n    content.innerHTML = '<event-editor panel-ctrl=\"panelCtrl\" event=\"event\" close=\"close()\"></event-editor>';\n\n    injector.invoke([\n      '$compile',\n      '$rootScope',\n      ($compile, $rootScope) => {\n        const scope = $rootScope.$new(true);\n        let drop: any;\n\n        scope.event = event;\n        scope.panelCtrl = eventManager.panelCtrl;\n        scope.close = () => {\n          drop.close();\n        };\n\n        $compile(content)(scope);\n        scope.$digest();\n\n        drop = new Drop({\n          target: markerElementToAttachTo[0],\n          content: content,\n          position: 'bottom center',\n          classes: 'drop-popover drop-popover--form',\n          openOn: 'click',\n          tetherOptions: {\n            constraints: [{ to: 'window', pin: true, attachment: 'both' }],\n          },\n        });\n\n        drop.open();\n        eventManager.editorOpened();\n\n        drop.on('close', () => {\n          // need timeout here in order call drop.destroy\n          setTimeout(() => {\n            eventManager.editorClosed();\n            scope.$destroy();\n            drop.destroy();\n          });\n        });\n      },\n    ]);\n  }, 100);\n};\n\nexport { createEditPopover, createAnnotationToolip };\n\n/*\n * jquery.flot.events\n *\n * description: Flot plugin for adding events/markers to the plot\n * version: 0.2.5\n * authors:\n *    Alexander Wunschik <alex@wunschik.net>\n *    Joel Oughton <joeloughton@gmail.com>\n *    Nicolas Joseph <www.nicolasjoseph.com>\n *\n * website: https://github.com/mojoaxel/flot-events\n *\n * released under MIT License and GPLv2+\n */\n\n/**\n * A class that allows for the drawing an remove of some object\n */\nexport class DrawableEvent {\n  _object: any;\n  _drawFunc: any;\n  _clearFunc: any;\n  _moveFunc: any;\n  _position: any;\n  _width: any;\n  _height: any;\n\n  /** @ngInject */\n  constructor(\n    object: JQuery,\n    drawFunc: any,\n    clearFunc: any,\n    moveFunc: any,\n    left: number,\n    top: number,\n    width: number,\n    height: number\n  ) {\n    this._object = object;\n    this._drawFunc = drawFunc;\n    this._clearFunc = clearFunc;\n    this._moveFunc = moveFunc;\n    this._position = { left, top };\n    this._width = width;\n    this._height = height;\n  }\n\n  width() {\n    return this._width;\n  }\n  height() {\n    return this._height;\n  }\n  position() {\n    return this._position;\n  }\n  draw() {\n    this._drawFunc(this._object);\n  }\n  clear() {\n    this._clearFunc(this._object);\n  }\n  getObject() {\n    return this._object;\n  }\n  moveTo(position: { left: number; top: number }) {\n    this._position = position;\n    this._moveFunc(this._object, this._position);\n  }\n}\n\n/**\n * Event class that stores options (eventType, min, max, title, description) and the object to draw.\n */\nexport class VisualEvent {\n  _parent: any;\n  _options: any;\n  _drawableEvent: any;\n  _hidden: any;\n\n  /** @ngInject */\n  constructor(options: any, drawableEvent: DrawableEvent) {\n    this._options = options;\n    this._drawableEvent = drawableEvent;\n    this._hidden = false;\n  }\n\n  visual() {\n    return this._drawableEvent;\n  }\n  getOptions() {\n    return this._options;\n  }\n  getParent() {\n    return this._parent;\n  }\n  isHidden() {\n    return this._hidden;\n  }\n  hide() {\n    this._hidden = true;\n  }\n  unhide() {\n    this._hidden = false;\n  }\n}\n\n/**\n * A Class that handles the event-markers inside the given plot\n */\nexport class EventMarkers {\n  _events: any;\n  _types: any;\n  _plot: any;\n  eventsEnabled: any;\n\n  /** @ngInject */\n  constructor(plot: any) {\n    this._events = [];\n    this._types = [];\n    this._plot = plot;\n    this.eventsEnabled = false;\n  }\n\n  getEvents() {\n    return this._events;\n  }\n\n  setTypes(types: any) {\n    return (this._types = types);\n  }\n\n  /**\n   * create internal objects for the given events\n   */\n  setupEvents(events: any[]) {\n    const parts = partition(events, 'isRegion');\n    const regions = parts[0];\n    events = parts[1];\n\n    $.each(events, (index, event) => {\n      const ve = new VisualEvent(event, this._buildDiv(event));\n      this._events.push(ve);\n    });\n\n    $.each(regions, (index, event) => {\n      const vre = new VisualEvent(event, this._buildRegDiv(event));\n      this._events.push(vre);\n    });\n\n    this._events.sort((a: any, b: any) => {\n      const ao = a.getOptions(),\n        bo = b.getOptions();\n      if (ao.min > bo.min) {\n        return 1;\n      }\n      if (ao.min < bo.min) {\n        return -1;\n      }\n      return 0;\n    });\n  }\n\n  /**\n   * draw the events to the plot\n   */\n  drawEvents() {\n    // var o = this._plot.getPlotOffset();\n\n    $.each(this._events, (index, event) => {\n      const options = event.getOptions();\n      const insidePlot = this._insidePlot(options.min) || this._insidePlot(options.timeEnd);\n      const overlapPlot = this._overlapPlot(options.min, options.timeEnd);\n      // check event is inside the graph range\n      if ((insidePlot || overlapPlot) && !event.isHidden()) {\n        event.visual().draw();\n      } else {\n        event.visual().getObject().hide();\n      }\n    });\n  }\n\n  /**\n   * update the position of the event-markers (e.g. after scrolling or zooming)\n   */\n  updateEvents() {\n    const o = this._plot.getPlotOffset();\n    let left;\n    let top;\n    const xaxis = this._plot.getXAxes()[this._plot.getOptions().events.xaxis - 1];\n\n    $.each(this._events, (index, event) => {\n      top = o.top + this._plot.height() - event.visual().height();\n      left = xaxis.p2c(event.getOptions().min) + o.left - event.visual().width() / 2;\n      event.visual().moveTo({ top: top, left: left });\n    });\n  }\n\n  /**\n   * remove all events from the plot\n   */\n  _clearEvents() {\n    $.each(this._events, (index, val) => {\n      val.visual().clear();\n    });\n    this._events = [];\n  }\n\n  /**\n   * create a DOM element for the given event\n   */\n  _buildDiv(event: { eventType: any; min: any; editModel: any }) {\n    const that = this;\n\n    const container = this._plot.getPlaceholder();\n    const o = this._plot.getPlotOffset();\n    const xaxis = this._plot.getXAxes()[this._plot.getOptions().events.xaxis - 1];\n    let top, left, color, markerSize, markerShow, lineStyle, lineWidth;\n    let markerTooltip;\n\n    // map the eventType to a types object\n    const eventTypeId = event.eventType;\n\n    if (this._types === null || !this._types[eventTypeId] || !this._types[eventTypeId].color) {\n      color = '#666';\n    } else {\n      color = this._types[eventTypeId].color;\n    }\n\n    if (this._types === null || !this._types[eventTypeId] || !this._types[eventTypeId].markerSize) {\n      markerSize = 8; //default marker size\n    } else {\n      markerSize = this._types[eventTypeId].markerSize;\n    }\n\n    if (this._types === null || !this._types[eventTypeId] || this._types[eventTypeId].markerShow === undefined) {\n      markerShow = true;\n    } else {\n      markerShow = this._types[eventTypeId].markerShow;\n    }\n\n    if (this._types === null || !this._types[eventTypeId] || this._types[eventTypeId].markerTooltip === undefined) {\n      markerTooltip = true;\n    } else {\n      markerTooltip = this._types[eventTypeId].markerTooltip;\n    }\n\n    if (this._types == null || !this._types[eventTypeId] || !this._types[eventTypeId].lineStyle) {\n      lineStyle = 'dashed'; //default line style\n    } else {\n      lineStyle = this._types[eventTypeId].lineStyle.toLowerCase();\n    }\n\n    if (this._types == null || !this._types[eventTypeId] || this._types[eventTypeId].lineWidth === undefined) {\n      lineWidth = 1; //default line width\n    } else {\n      lineWidth = this._types[eventTypeId].lineWidth;\n    }\n\n    let topOffset = xaxis.options.eventSectionHeight || 0;\n    topOffset = topOffset / 3;\n\n    top = o.top + this._plot.height() + topOffset;\n    left = xaxis.p2c(event.min) + o.left;\n\n    const line = $('<div class=\"events_line flot-temp-elem\"></div>')\n      .css({\n        position: 'absolute',\n        opacity: 0.8,\n        left: left + 'px',\n        top: 8,\n        width: lineWidth + 'px',\n        height: this._plot.height() + topOffset * 0.8,\n        'border-left-width': lineWidth + 'px',\n        'border-left-style': lineStyle,\n        'border-left-color': color,\n        color: color,\n      })\n      .appendTo(container);\n\n    if (markerShow) {\n      const marker = $('<div class=\"events_marker\"></div>').css({\n        position: 'absolute',\n        left: -markerSize - Math.round(lineWidth / 2) + 'px',\n        'font-size': 0,\n        'line-height': 0,\n        width: 0,\n        height: 0,\n        'border-left': markerSize + 'px solid transparent',\n        'border-right': markerSize + 'px solid transparent',\n      });\n\n      marker.appendTo(line);\n\n      if (\n        this._types[eventTypeId] &&\n        this._types[eventTypeId].position &&\n        this._types[eventTypeId].position.toUpperCase() === 'BOTTOM'\n      ) {\n        marker.css({\n          top: top - markerSize - 8 + 'px',\n          'border-top': 'none',\n          'border-bottom': markerSize + 'px solid ' + color,\n        });\n      } else {\n        marker.css({\n          top: '0px',\n          'border-top': markerSize + 'px solid ' + color,\n          'border-bottom': 'none',\n        });\n      }\n\n      marker.data({\n        event: event,\n      });\n\n      const mouseenter = function (this: any) {\n        createAnnotationToolip(marker, $(this).data('event'), that._plot);\n      };\n\n      if (event.editModel) {\n        createEditPopover(marker, event.editModel, that._plot);\n      }\n\n      const mouseleave = () => {\n        that._plot.clearSelection();\n      };\n\n      if (markerTooltip) {\n        marker.css({ cursor: 'help' });\n        marker.hover(mouseenter, mouseleave);\n      }\n    }\n\n    const drawableEvent = new DrawableEvent(\n      line,\n      function drawFunc(obj: { show: () => void }) {\n        obj.show();\n      },\n      (obj: { remove: () => void }) => {\n        obj.remove();\n      },\n      (obj: any, position: { top: any; left: any }) => {\n        obj.css({\n          top: position.top,\n          left: position.left,\n        });\n      },\n      left,\n      top,\n      line.width() ?? 1,\n      line.height() ?? 1\n    );\n\n    return drawableEvent;\n  }\n\n  /**\n   * create a DOM element for the given region\n   */\n  _buildRegDiv(event: { eventType: any; min: number; timeEnd: number; editModel: any }) {\n    const that = this;\n\n    const container = this._plot.getPlaceholder();\n    const o = this._plot.getPlotOffset();\n    const xaxis = this._plot.getXAxes()[this._plot.getOptions().events.xaxis - 1];\n    let top,\n      left,\n      lineWidth: number,\n      regionWidth,\n      lineStyle: string | number | cssPropertySetter,\n      color: string,\n      markerTooltip;\n\n    // map the eventType to a types object\n    const eventTypeId = event.eventType;\n\n    if (this._types === null || !this._types[eventTypeId] || !this._types[eventTypeId].color) {\n      color = '#666';\n    } else {\n      color = this._types[eventTypeId].color;\n    }\n\n    if (this._types === null || !this._types[eventTypeId] || this._types[eventTypeId].markerTooltip === undefined) {\n      markerTooltip = true;\n    } else {\n      markerTooltip = this._types[eventTypeId].markerTooltip;\n    }\n\n    if (this._types == null || !this._types[eventTypeId] || this._types[eventTypeId].lineWidth === undefined) {\n      lineWidth = 1; //default line width\n    } else {\n      lineWidth = this._types[eventTypeId].lineWidth;\n    }\n\n    if (this._types == null || !this._types[eventTypeId] || !this._types[eventTypeId].lineStyle) {\n      lineStyle = 'dashed'; //default line style\n    } else {\n      lineStyle = this._types[eventTypeId].lineStyle.toLowerCase();\n    }\n\n    const topOffset = 2;\n    top = o.top + this._plot.height() + topOffset;\n\n    const timeFrom = Math.min(event.min, event.timeEnd);\n    const timeTo = Math.max(event.min, event.timeEnd);\n    left = xaxis.p2c(timeFrom) + o.left;\n    const right = xaxis.p2c(timeTo) + o.left;\n\n    const [xmin, xmax] = [o.left, o.left + this._plot.width()];\n    const regionStart = Math.max(left, xmin);\n    const regionEnd = Math.min(right, xmax);\n    const regionOffset = right > xmax ? 0 : lineWidth; // only include lineWidth when right line is visible\n    regionWidth = regionEnd - regionStart + regionOffset;\n\n    each([left, right], (position) => {\n      // only draw visible region lines\n      if (xmin <= position && position < xmax) {\n        const line = $('<div class=\"events_line flot-temp-elem\"></div>').css({\n          position: 'absolute',\n          opacity: 0.8,\n          left: position + 'px',\n          top: 8,\n          width: lineWidth + 'px',\n          height: this._plot.height() + topOffset,\n          'border-left-width': lineWidth + 'px',\n          'border-left-style': lineStyle,\n          'border-left-color': color,\n          color: color,\n        });\n        line.appendTo(container);\n      }\n    });\n\n    const region = $('<div class=\"events_marker region_marker flot-temp-elem\"></div>').css({\n      position: 'absolute',\n      opacity: 0.5,\n      left: regionStart + 'px',\n      top: top,\n      width: regionWidth + 'px',\n      height: '0.5rem',\n      'border-left-color': color,\n      color: color,\n      'background-color': color,\n    });\n    region.appendTo(container);\n\n    region.data({\n      event: event,\n    });\n\n    const mouseenter = function (this: any) {\n      createAnnotationToolip(region, $(this).data('event'), that._plot);\n    };\n\n    if (event.editModel) {\n      createEditPopover(region, event.editModel, that._plot);\n    }\n\n    const mouseleave = () => {\n      that._plot.clearSelection();\n    };\n\n    if (markerTooltip) {\n      region.css({ cursor: 'help' });\n      region.hover(mouseenter, mouseleave);\n    }\n\n    const drawableEvent = new DrawableEvent(\n      region,\n      function drawFunc(obj: { show: () => void }) {\n        obj.show();\n      },\n      (obj: { remove: () => void }) => {\n        obj.remove();\n      },\n      (obj: { css: (arg0: { top: any; left: any }) => void }, position: { top: any; left: any }) => {\n        obj.css({\n          top: position.top,\n          left: position.left,\n        });\n      },\n      left,\n      top,\n      region.width() ?? 1,\n      region.height() ?? 1\n    );\n\n    return drawableEvent;\n  }\n\n  /**\n   * check if the event is inside visible range\n   */\n  _insidePlot(x: any) {\n    const xaxis = this._plot.getXAxes()[this._plot.getOptions().events.xaxis - 1];\n    const xc = xaxis.p2c(x);\n    return xc > 0 && xc < xaxis.p2c(xaxis.max);\n  }\n\n  /**\n   * check if the event overlaps the visible range\n   */\n  _overlapPlot(point0: number, point1: number) {\n    const xaxis = this._plot.getXAxes()[this._plot.getOptions().events.xaxis - 1];\n    const [coord0, coord1] = [xaxis.p2c(point0), xaxis.p2c(point1)];\n    const [coordMin, coordMax] = [0, xaxis.p2c(xaxis.max)];\n    return coordMin < coord0 && coord1 < coordMax;\n  }\n}\n\n/**\n * initialize the plugin for the given plot\n */\n\n/** @ngInject */\nexport function init(this: any, plot: any) {\n  const that = this;\n  const eventMarkers = new EventMarkers(plot);\n\n  plot.getEvents = () => {\n    return eventMarkers._events;\n  };\n\n  plot.hideEvents = () => {\n    $.each(eventMarkers._events, (index, event) => {\n      event.visual().getObject().hide();\n    });\n  };\n\n  plot.showEvents = () => {\n    plot.hideEvents();\n    $.each(eventMarkers._events, (index, event) => {\n      event.hide();\n    });\n\n    that.eventMarkers.drawEvents();\n  };\n\n  // change events on an existing plot\n  plot.setEvents = (events: any[]) => {\n    if (eventMarkers.eventsEnabled) {\n      eventMarkers.setupEvents(events);\n    }\n  };\n\n  plot.hooks.processOptions.push((plot: any, options: any) => {\n    // enable the plugin\n    if (options.events.data != null) {\n      eventMarkers.eventsEnabled = true;\n    }\n  });\n\n  plot.hooks.draw.push((plot: any) => {\n    const options = plot.getOptions();\n\n    if (eventMarkers.eventsEnabled) {\n      // check for first run\n      if (eventMarkers.getEvents().length < 1) {\n        eventMarkers.setTypes(options.events.types);\n        eventMarkers.setupEvents(options.events.data);\n      } else {\n        eventMarkers.updateEvents();\n      }\n    }\n\n    eventMarkers.drawEvents();\n  });\n}\n\nconst defaultOptions: any = {\n  events: {\n    data: null,\n    types: null,\n    xaxis: 1,\n    position: 'BOTTOM',\n  },\n};\n\n$.plot.plugins.push({\n  init: init,\n  options: defaultOptions,\n  name: 'events',\n  version: '0.2.5',\n});\n","import classNames from 'classnames';\nimport React, { PureComponent } from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { SeriesColorPicker, SeriesIcon } from '@grafana/ui';\nimport { TimeSeries } from 'app/core/core';\n\nexport const LEGEND_STATS = ['min', 'max', 'avg', 'current', 'total'] as const;\nexport type LegendStat = typeof LEGEND_STATS[number];\n\nexport interface LegendLabelProps {\n  series: TimeSeries;\n  asTable?: boolean;\n  hidden?: boolean;\n  onLabelClick: (series: any, event: any) => void;\n  onColorChange: (series: any, color: string) => void;\n  onToggleAxis: (series: any) => void;\n}\n\nexport interface LegendValuesProps {\n  values?: boolean;\n  min?: boolean;\n  max?: boolean;\n  avg?: boolean;\n  current?: boolean;\n  total?: boolean;\n}\n\ntype LegendItemProps = LegendLabelProps & LegendValuesProps;\n\ninterface LegendItemState {\n  yaxis: number;\n}\n\nexport class LegendItem extends PureComponent<LegendItemProps, LegendItemState> {\n  static defaultProps = {\n    asTable: false,\n    hidden: false,\n    onLabelClick: () => {},\n    onColorChange: () => {},\n    onToggleAxis: () => {},\n  };\n\n  constructor(props: LegendItemProps) {\n    super(props);\n    this.state = {\n      yaxis: this.props.series.yaxis,\n    };\n  }\n\n  onLabelClick = (e: any) => this.props.onLabelClick(this.props.series, e);\n\n  onToggleAxis = () => {\n    const yaxis = this.state.yaxis === 2 ? 1 : 2;\n    const info = { alias: this.props.series.alias, yaxis: yaxis };\n    this.setState({ yaxis: yaxis });\n    this.props.onToggleAxis(info);\n  };\n\n  onColorChange = (color: string) => {\n    this.props.onColorChange(this.props.series, color);\n    // Because of PureComponent nature it makes only shallow props comparison and changing of series.color doesn't run\n    // component re-render. In this case we can't rely on color, selected by user, because it may be overwritten\n    // by series overrides. So we need to use forceUpdate() to make sure we have proper series color.\n    this.forceUpdate();\n  };\n\n  renderLegendValues() {\n    const { series, asTable } = this.props;\n    const legendValueItems = [];\n    for (const valueName of LEGEND_STATS) {\n      // @ts-ignore\n      if (this.props[valueName]) {\n        const valueFormatted = series.formatValue(series.stats[valueName]);\n        legendValueItems.push(\n          <LegendValue\n            key={valueName}\n            valueName={valueName}\n            value={valueFormatted}\n            asTable={asTable}\n            onValueClick={this.onLabelClick}\n          />\n        );\n      }\n    }\n    return legendValueItems;\n  }\n\n  render() {\n    const { series, values, asTable, hidden } = this.props;\n    const seriesOptionClasses = classNames({\n      'graph-legend-series-hidden': hidden,\n      'graph-legend-series--right-y': series.yaxis === 2,\n    });\n    const valueItems = values ? this.renderLegendValues() : [];\n    const seriesLabel = (\n      <LegendSeriesLabel\n        label={series.alias}\n        color={series.color}\n        yaxis={this.state.yaxis}\n        onLabelClick={this.onLabelClick}\n        onColorChange={this.onColorChange}\n        onToggleAxis={this.onToggleAxis}\n      />\n    );\n\n    if (asTable) {\n      return (\n        <tr className={`graph-legend-series ${seriesOptionClasses}`}>\n          <td>\n            <div className=\"graph-legend-series__table-name\">{seriesLabel}</div>\n          </td>\n          {valueItems}\n        </tr>\n      );\n    } else {\n      return (\n        <div className={`graph-legend-series ${seriesOptionClasses}`}>\n          {seriesLabel}\n          {valueItems}\n        </div>\n      );\n    }\n  }\n}\n\ninterface LegendSeriesLabelProps {\n  label: string;\n  color: string;\n  yaxis?: number;\n  onLabelClick: (event: any) => void;\n}\n\nclass LegendSeriesLabel extends PureComponent<LegendSeriesLabelProps & LegendSeriesIconProps> {\n  static defaultProps: Partial<LegendSeriesLabelProps> = {\n    yaxis: undefined,\n    onLabelClick: () => {},\n  };\n\n  render() {\n    const { label, color, yaxis } = this.props;\n    const { onColorChange, onToggleAxis } = this.props;\n    const onLabelClick = this.props.onLabelClick ? this.props.onLabelClick : () => {};\n\n    return [\n      <LegendSeriesIcon\n        key=\"icon\"\n        color={color}\n        yaxis={yaxis}\n        onColorChange={onColorChange}\n        onToggleAxis={onToggleAxis}\n      />,\n      <a\n        className=\"graph-legend-alias pointer\"\n        title={label}\n        key=\"label\"\n        onClick={onLabelClick}\n        aria-label={selectors.components.Panels.Visualization.Graph.Legend.legendItemAlias(label)}\n      >\n        {label}\n      </a>,\n    ];\n  }\n}\n\ninterface LegendSeriesIconProps {\n  color: string;\n  yaxis?: number;\n  onColorChange?: (color: string) => void;\n  onToggleAxis?: () => void;\n}\n\ninterface LegendSeriesIconState {\n  color: string;\n}\n\nclass LegendSeriesIcon extends PureComponent<LegendSeriesIconProps, LegendSeriesIconState> {\n  static defaultProps: Partial<LegendSeriesIconProps> = {\n    yaxis: undefined,\n    onColorChange: () => {},\n    onToggleAxis: () => {},\n  };\n\n  onColorChange = (color: string) => {\n    const { onColorChange } = this.props;\n    if (onColorChange) {\n      onColorChange(color);\n    }\n  };\n  render() {\n    return (\n      <SeriesColorPicker\n        yaxis={this.props.yaxis}\n        color={this.props.color}\n        onChange={this.onColorChange}\n        onToggleAxis={this.props.onToggleAxis}\n        enableNamedColors\n      >\n        {({ ref, showColorPicker, hideColorPicker }) => (\n          <SeriesIcon\n            color={this.props.color}\n            ref={ref}\n            onClick={showColorPicker}\n            onMouseLeave={hideColorPicker}\n            className=\"graph-legend-icon\"\n          />\n        )}\n      </SeriesColorPicker>\n    );\n  }\n}\n\ninterface LegendValueProps {\n  value: string;\n  valueName: string;\n  asTable?: boolean;\n  onValueClick?: (event: any) => void;\n}\n\nfunction LegendValue({ value, valueName, asTable, onValueClick }: LegendValueProps) {\n  if (asTable) {\n    return (\n      <td className={`graph-legend-value ${valueName}`} onClick={onValueClick}>\n        {value}\n      </td>\n    );\n  }\n  return (\n    <div className={`graph-legend-value ${valueName}`} onClick={onValueClick}>\n      {value}\n    </div>\n  );\n}\n","import { sortBy as _sortBy } from 'lodash';\nimport React, { PureComponent } from 'react';\n\nimport { CustomScrollbar, Icon } from '@grafana/ui';\nimport { TimeSeries } from 'app/core/core';\n\nimport { LegendStat, LegendItem, LEGEND_STATS } from './LegendSeriesItem';\n\ninterface LegendProps {\n  seriesList: TimeSeries[];\n  optionalClass?: string;\n}\n\ninterface LegendEventHandlers {\n  onToggleSeries?: (hiddenSeries: any) => void;\n  onToggleSort?: (sortBy: any, sortDesc: any) => void;\n  onToggleAxis?: (series: TimeSeries) => void;\n  onColorChange?: (series: TimeSeries, color: string) => void;\n}\n\ninterface LegendComponentEventHandlers {\n  onToggleSeries?: (series: TimeSeries, event: any) => void;\n  onToggleSort?: (sortBy: LegendStat | undefined, sortDesc: any) => void;\n  onToggleAxis?: (series: TimeSeries) => void;\n  onColorChange?: (series: TimeSeries, color: string) => void;\n}\n\ninterface LegendDisplayProps {\n  hiddenSeries: any;\n  hideEmpty?: boolean;\n  hideZero?: boolean;\n  alignAsTable?: boolean;\n  rightSide?: boolean;\n  sideWidth?: number;\n}\n\ninterface LegendValuesProps {\n  values?: boolean;\n  min?: boolean;\n  max?: boolean;\n  avg?: boolean;\n  current?: boolean;\n  total?: boolean;\n}\n\ninterface LegendSortProps {\n  sort?: LegendStat;\n  sortDesc?: boolean;\n}\n\nexport type GraphLegendProps = LegendProps &\n  LegendDisplayProps &\n  LegendValuesProps &\n  LegendSortProps &\n  LegendEventHandlers;\nexport type LegendComponentProps = LegendProps &\n  LegendDisplayProps &\n  LegendValuesProps &\n  LegendSortProps &\n  LegendComponentEventHandlers;\n\ninterface LegendState {\n  hiddenSeries: { [seriesAlias: string]: boolean };\n}\n\nexport class GraphLegend extends PureComponent<GraphLegendProps, LegendState> {\n  static defaultProps: Partial<GraphLegendProps> = {\n    values: false,\n    min: false,\n    max: false,\n    avg: false,\n    current: false,\n    total: false,\n    alignAsTable: false,\n    rightSide: false,\n    sort: undefined,\n    sortDesc: false,\n    optionalClass: '',\n    onToggleSeries: () => {},\n    onToggleSort: () => {},\n    onToggleAxis: () => {},\n    onColorChange: () => {},\n  };\n\n  constructor(props: GraphLegendProps) {\n    super(props);\n    this.state = {\n      hiddenSeries: this.props.hiddenSeries,\n    };\n  }\n\n  sortLegend() {\n    let seriesList: TimeSeries[] = [...this.props.seriesList] || [];\n    const sortBy = this.props.sort;\n    if (sortBy && this.props[sortBy] && this.props.alignAsTable) {\n      seriesList = _sortBy(seriesList, (series) => {\n        let sort = series.stats[sortBy];\n        if (sort === null) {\n          sort = -Infinity;\n        }\n        return sort;\n      }) as TimeSeries[];\n      if (this.props.sortDesc) {\n        seriesList = seriesList.reverse();\n      }\n    }\n    return seriesList;\n  }\n\n  onToggleSeries = (series: TimeSeries, event: any) => {\n    if (!this.props.onToggleSeries) {\n      return;\n    }\n\n    let hiddenSeries = { ...this.state.hiddenSeries };\n    if (event.ctrlKey || event.metaKey || event.shiftKey) {\n      if (hiddenSeries[series.alias]) {\n        delete hiddenSeries[series.alias];\n      } else {\n        hiddenSeries[series.alias] = true;\n      }\n    } else {\n      hiddenSeries = this.toggleSeriesExclusiveMode(series);\n    }\n    this.setState({ hiddenSeries: hiddenSeries });\n    this.props.onToggleSeries(hiddenSeries);\n  };\n\n  toggleSeriesExclusiveMode(series: TimeSeries) {\n    const hiddenSeries = { ...this.state.hiddenSeries };\n\n    if (hiddenSeries[series.alias]) {\n      delete hiddenSeries[series.alias];\n    }\n\n    // check if every other series is hidden\n    const alreadyExclusive = this.props.seriesList.every((value) => {\n      if (value.alias === series.alias) {\n        return true;\n      }\n\n      return hiddenSeries[value.alias];\n    });\n\n    if (alreadyExclusive) {\n      // remove all hidden series\n      this.props.seriesList.forEach((value) => {\n        delete hiddenSeries[value.alias];\n      });\n    } else {\n      // hide all but this serie\n      this.props.seriesList.forEach((value) => {\n        if (value.alias === series.alias) {\n          return;\n        }\n\n        hiddenSeries[value.alias] = true;\n      });\n    }\n\n    return hiddenSeries;\n  }\n\n  render() {\n    const {\n      optionalClass,\n      rightSide,\n      sideWidth,\n      sort,\n      sortDesc,\n      hideEmpty,\n      hideZero,\n      values,\n      min,\n      max,\n      avg,\n      current,\n      total,\n    } = this.props;\n    const seriesValuesProps = { values, min, max, avg, current, total };\n    const hiddenSeries = this.state.hiddenSeries;\n    const seriesHideProps = { hideEmpty, hideZero };\n    const sortProps = { sort, sortDesc };\n    const seriesList = this.sortLegend().filter((series) => !series.hideFromLegend(seriesHideProps));\n    const legendClass = `${this.props.alignAsTable ? 'graph-legend-table' : ''} ${optionalClass}`;\n\n    // Set min-width if side style and there is a value, otherwise remove the CSS property\n    // Set width so it works with IE11\n    const width: any = rightSide && sideWidth ? sideWidth : undefined;\n    const ieWidth: any = rightSide && sideWidth ? sideWidth - 1 : undefined;\n    const legendStyle: React.CSSProperties = {\n      minWidth: width,\n      width: ieWidth,\n    };\n\n    const legendProps: LegendComponentProps = {\n      seriesList: seriesList,\n      hiddenSeries: hiddenSeries,\n      onToggleSeries: this.onToggleSeries,\n      onToggleAxis: this.props.onToggleAxis,\n      onToggleSort: this.props.onToggleSort,\n      onColorChange: this.props.onColorChange,\n      ...seriesValuesProps,\n      ...sortProps,\n    };\n\n    return (\n      <div className={`graph-legend-content ${legendClass}`} style={legendStyle}>\n        {this.props.alignAsTable ? <LegendTable {...legendProps} /> : <LegendSeriesList {...legendProps} />}\n      </div>\n    );\n  }\n}\n\nclass LegendSeriesList extends PureComponent<LegendComponentProps> {\n  render() {\n    const { seriesList, hiddenSeries, values, min, max, avg, current, total } = this.props;\n    const seriesValuesProps = { values, min, max, avg, current, total };\n    return seriesList.map((series, i) => (\n      <LegendItem\n        // This trick required because TimeSeries.id is not unique (it's just TimeSeries.alias).\n        // In future would be good to make id unique across the series list.\n        key={`${series.id}-${i}`}\n        series={series}\n        hidden={hiddenSeries[series.alias]}\n        {...seriesValuesProps}\n        onLabelClick={this.props.onToggleSeries}\n        onColorChange={this.props.onColorChange}\n        onToggleAxis={this.props.onToggleAxis}\n      />\n    ));\n  }\n}\n\nclass LegendTable extends PureComponent<Partial<LegendComponentProps>> {\n  onToggleSort = (stat: LegendStat) => {\n    if (!this.props.onToggleSort) {\n      return;\n    }\n\n    let sortDesc = this.props.sortDesc;\n    let sortBy = this.props.sort;\n    if (stat !== sortBy) {\n      sortDesc = undefined;\n    }\n\n    // if already sort ascending, disable sorting\n    if (sortDesc === false) {\n      sortBy = undefined;\n      sortDesc = undefined;\n    } else {\n      sortDesc = !sortDesc;\n      sortBy = stat;\n    }\n    this.props.onToggleSort(sortBy, sortDesc);\n  };\n\n  render() {\n    const seriesList = this.props.seriesList;\n    const { values, min, max, avg, current, total, sort, sortDesc, hiddenSeries } = this.props;\n    const seriesValuesProps: any = { values, min, max, avg, current, total };\n\n    if (!seriesList) {\n      return null;\n    }\n\n    return (\n      <table>\n        <colgroup>\n          <col style={{ width: '100%' }} />\n        </colgroup>\n        <thead>\n          <tr>\n            <th style={{ textAlign: 'left' }} />\n            {LEGEND_STATS.map(\n              (statName) =>\n                seriesValuesProps[statName] && (\n                  <LegendTableHeaderItem\n                    key={statName}\n                    statName={statName}\n                    sort={sort}\n                    sortDesc={sortDesc}\n                    onClick={this.onToggleSort}\n                  />\n                )\n            )}\n          </tr>\n        </thead>\n        <tbody>\n          {seriesList &&\n            seriesList.map((series, i) => (\n              <LegendItem\n                key={`${series.id}-${i}`}\n                asTable={true}\n                series={series}\n                hidden={hiddenSeries[series.alias]}\n                onLabelClick={this.props.onToggleSeries}\n                onColorChange={this.props.onColorChange}\n                onToggleAxis={this.props.onToggleAxis}\n                {...seriesValuesProps}\n              />\n            ))}\n        </tbody>\n      </table>\n    );\n  }\n}\n\ninterface LegendTableHeaderProps {\n  statName: LegendStat;\n  onClick?: (statName: LegendStat) => void;\n}\n\nclass LegendTableHeaderItem extends PureComponent<LegendTableHeaderProps & LegendSortProps> {\n  onClick = () => {\n    if (this.props.onClick) {\n      this.props.onClick(this.props.statName);\n    }\n  };\n\n  render() {\n    const { statName, sort, sortDesc } = this.props;\n    return (\n      <th className=\"pointer\" onClick={this.onClick}>\n        {statName}\n        {sort === statName && <Icon name={sortDesc ? 'angle-down' : 'angle-up'} />}\n      </th>\n    );\n  }\n}\n\nexport class Legend extends PureComponent<GraphLegendProps> {\n  render() {\n    return (\n      <CustomScrollbar hideHorizontalTrack>\n        <GraphLegend {...this.props} />\n      </CustomScrollbar>\n    );\n  }\n}\n\nexport default Legend;\n","/**\n * To align two Y axes by Y level\n * @param yAxes data [{min: min_y1, min: max_y1}, {min: min_y2, max: max_y2}]\n * @param level Y level\n */\nexport function alignYLevel(yAxes: any, level: any) {\n  if (isNaN(level) || !checkCorrectAxis(yAxes)) {\n    return;\n  }\n\n  const [yLeft, yRight] = yAxes;\n  moveLevelToZero(yLeft, yRight, level);\n\n  expandStuckValues(yLeft, yRight);\n\n  // one of graphs on zero\n  const zero = yLeft.min === 0 || yRight.min === 0 || yLeft.max === 0 || yRight.max === 0;\n\n  const oneSide = checkOneSide(yLeft, yRight);\n\n  if (zero && oneSide) {\n    yLeft.min = yLeft.max > 0 ? 0 : yLeft.min;\n    yLeft.max = yLeft.max > 0 ? yLeft.max : 0;\n    yRight.min = yRight.max > 0 ? 0 : yRight.min;\n    yRight.max = yRight.max > 0 ? yRight.max : 0;\n  } else {\n    if (checkOppositeSides(yLeft, yRight)) {\n      if (yLeft.min >= 0) {\n        yLeft.min = -yLeft.max;\n        yRight.max = -yRight.min;\n      } else {\n        yLeft.max = -yLeft.min;\n        yRight.min = -yRight.max;\n      }\n    } else {\n      const rate = getRate(yLeft, yRight);\n\n      if (oneSide) {\n        // all graphs above the Y level\n        if (yLeft.min > 0) {\n          yLeft.min = yLeft.max / rate;\n          yRight.min = yRight.max / rate;\n        } else {\n          yLeft.max = yLeft.min / rate;\n          yRight.max = yRight.min / rate;\n        }\n      } else {\n        if (checkTwoCross(yLeft, yRight)) {\n          yLeft.min = yRight.min ? yRight.min * rate : yLeft.min;\n          yRight.min = yLeft.min ? yLeft.min / rate : yRight.min;\n          yLeft.max = yRight.max ? yRight.max * rate : yLeft.max;\n          yRight.max = yLeft.max ? yLeft.max / rate : yRight.max;\n        } else {\n          yLeft.min = yLeft.min > 0 ? yRight.min * rate : yLeft.min;\n          yRight.min = yRight.min > 0 ? yLeft.min / rate : yRight.min;\n          yLeft.max = yLeft.max < 0 ? yRight.max * rate : yLeft.max;\n          yRight.max = yRight.max < 0 ? yLeft.max / rate : yRight.max;\n        }\n      }\n    }\n  }\n\n  restoreLevelFromZero(yLeft, yRight, level);\n}\n\nfunction expandStuckValues(yLeft: { max: number; min: number }, yRight: { max: number; min: number }) {\n  // wide Y min and max using increased wideFactor\n  const wideFactor = 0.25;\n  if (yLeft.max === yLeft.min) {\n    yLeft.min -= wideFactor;\n    yLeft.max += wideFactor;\n  }\n  if (yRight.max === yRight.min) {\n    yRight.min -= wideFactor;\n    yRight.max += wideFactor;\n  }\n}\n\nfunction moveLevelToZero(yLeft: { min: number; max: number }, yRight: { min: number; max: number }, level: number) {\n  if (level !== 0) {\n    yLeft.min -= level;\n    yLeft.max -= level;\n    yRight.min -= level;\n    yRight.max -= level;\n  }\n}\n\nfunction restoreLevelFromZero(\n  yLeft: { min: number; max: number },\n  yRight: { min: number; max: number },\n  level: number\n) {\n  if (level !== 0) {\n    yLeft.min += level;\n    yLeft.max += level;\n    yRight.min += level;\n    yRight.max += level;\n  }\n}\n\ninterface AxisSide {\n  max: number;\n  min: number;\n}\n\nfunction checkCorrectAxis(axis: any[]): boolean {\n  return axis.length === 2 && checkCorrectAxes(axis[0]) && checkCorrectAxes(axis[1]);\n}\n\nfunction checkCorrectAxes(axes: any): boolean {\n  return 'min' in axes && 'max' in axes;\n}\n\nfunction checkOneSide(yLeft: AxisSide, yRight: AxisSide): boolean {\n  // on the one hand with respect to zero\n  return (yLeft.min >= 0 && yRight.min >= 0) || (yLeft.max <= 0 && yRight.max <= 0);\n}\n\nfunction checkTwoCross(yLeft: AxisSide, yRight: AxisSide): boolean {\n  // both across zero\n  return yLeft.min <= 0 && yLeft.max >= 0 && yRight.min <= 0 && yRight.max >= 0;\n}\n\nfunction checkOppositeSides(yLeft: AxisSide, yRight: AxisSide): boolean {\n  // on the opposite sides with respect to zero\n  return (yLeft.min >= 0 && yRight.max <= 0) || (yLeft.max <= 0 && yRight.min >= 0);\n}\n\nfunction getRate(yLeft: AxisSide, yRight: AxisSide): number {\n  if (checkTwoCross(yLeft, yRight)) {\n    const rateLeft = yRight.min ? yLeft.min / yRight.min : 0;\n    const rateRight = yRight.max ? yLeft.max / yRight.max : 0;\n\n    return rateLeft > rateRight ? rateLeft : rateRight;\n  }\n\n  if (checkOneSide(yLeft, yRight)) {\n    const absLeftMin = Math.abs(yLeft.min);\n    const absLeftMax = Math.abs(yLeft.max);\n    const absRightMin = Math.abs(yRight.min);\n    const absRightMax = Math.abs(yRight.max);\n    const upLeft = Math.max(absLeftMin, absLeftMax);\n    const downLeft = Math.min(absLeftMin, absLeftMax);\n    const upRight = Math.max(absRightMin, absRightMax);\n    const downRight = Math.min(absRightMin, absRightMax);\n\n    const rateLeft = downLeft !== 0 ? upLeft / downLeft : upLeft;\n    const rateRight = downRight !== 0 ? upRight / downRight : upRight;\n\n    return rateLeft > rateRight ? rateLeft : rateRight;\n  }\n\n  if (yLeft.min > 0 || yRight.min > 0) {\n    return yLeft.max / yRight.max;\n  } else {\n    return yLeft.min / yRight.min;\n  }\n}\n","import { each, filter, keys } from 'lodash';\nimport tinycolor from 'tinycolor2';\n\nimport { AnnotationEvent } from '@grafana/data';\nimport {\n  ALERTING_COLOR,\n  DEFAULT_ANNOTATION_COLOR,\n  NO_DATA_COLOR,\n  OK_COLOR,\n  PENDING_COLOR,\n  REGION_FILL_ALPHA,\n} from '@grafana/ui';\nimport { MetricsPanelCtrl } from 'app/angular/panel/metrics_panel_ctrl';\n\nexport class EventManager {\n  event: AnnotationEvent | null = null;\n  editorOpen = false;\n\n  constructor(private panelCtrl: MetricsPanelCtrl) {}\n\n  editorClosed() {\n    this.event = null;\n    this.editorOpen = false;\n    this.panelCtrl.render();\n  }\n\n  editorOpened() {\n    this.editorOpen = true;\n  }\n\n  updateTime(range: { from: any; to: any }) {\n    if (!this.event) {\n      this.event = {};\n      this.event.dashboardUID = this.panelCtrl.dashboard.uid;\n      this.event.panelId = this.panelCtrl.panel.id;\n    }\n\n    // update time\n    this.event.time = range.from;\n    this.event.isRegion = false;\n\n    if (range.to) {\n      this.event.timeEnd = range.to;\n      this.event.isRegion = true;\n    }\n\n    this.panelCtrl.render();\n  }\n\n  editEvent(event: AnnotationEvent, elem?: any) {\n    this.event = event;\n    this.panelCtrl.render();\n  }\n\n  addFlotEvents(annotations: any, flotOptions: any) {\n    if (!this.event && annotations.length === 0) {\n      return;\n    }\n\n    const types: any = {\n      $__alerting: {\n        color: ALERTING_COLOR,\n        position: 'BOTTOM',\n        markerSize: 5,\n      },\n      $__ok: {\n        color: OK_COLOR,\n        position: 'BOTTOM',\n        markerSize: 5,\n      },\n      $__no_data: {\n        color: NO_DATA_COLOR,\n        position: 'BOTTOM',\n        markerSize: 5,\n      },\n      $__pending: {\n        color: PENDING_COLOR,\n        position: 'BOTTOM',\n        markerSize: 5,\n      },\n      $__editing: {\n        color: DEFAULT_ANNOTATION_COLOR,\n        position: 'BOTTOM',\n        markerSize: 5,\n      },\n    };\n\n    if (this.event) {\n      if (this.event.isRegion) {\n        annotations = [\n          {\n            isRegion: true,\n            min: this.event.time,\n            timeEnd: this.event.timeEnd,\n            text: this.event.text,\n            eventType: '$__editing',\n            editModel: this.event,\n          },\n        ];\n      } else {\n        annotations = [\n          {\n            min: this.event.time,\n            text: this.event.text,\n            editModel: this.event,\n            eventType: '$__editing',\n          },\n        ];\n      }\n    } else {\n      // annotations from query\n      for (let i = 0; i < annotations.length; i++) {\n        const item = annotations[i];\n\n        // add properties used by jquery flot events\n        item.min = item.time;\n        item.max = item.time;\n        item.eventType = item.type;\n\n        if (item.newState) {\n          item.eventType = '$__' + item.newState;\n          continue;\n        }\n\n        if (!types[item.type]) {\n          types[item.type] = {\n            color: item.color,\n            position: 'BOTTOM',\n            markerSize: 5,\n          };\n        }\n      }\n    }\n\n    const regions = getRegions(annotations);\n    addRegionMarking(regions, flotOptions);\n\n    const eventSectionHeight = 20;\n    const eventSectionMargin = 7;\n    flotOptions.grid.eventSectionHeight = eventSectionMargin;\n    flotOptions.xaxis.eventSectionHeight = eventSectionHeight;\n\n    flotOptions.events = {\n      levels: keys(types).length + 1,\n      data: annotations,\n      types: types,\n      manager: this,\n    };\n  }\n}\n\nfunction getRegions(events: AnnotationEvent[]) {\n  return filter(events, 'isRegion');\n}\n\nfunction addRegionMarking(regions: any[], flotOptions: { grid: { markings: any } }) {\n  const markings = flotOptions.grid.markings;\n  const defaultColor = DEFAULT_ANNOTATION_COLOR;\n  let fillColor;\n\n  each(regions, (region) => {\n    if (region.source) {\n      fillColor = region.color || defaultColor;\n    } else {\n      fillColor = defaultColor;\n    }\n\n    fillColor = addAlphaToRGB(fillColor, REGION_FILL_ALPHA);\n    markings.push({\n      xaxis: { from: region.min, to: region.timeEnd },\n      color: fillColor,\n    });\n  });\n}\n\nfunction addAlphaToRGB(colorString: string, alpha: number): string {\n  const color = tinycolor(colorString);\n  if (color.isValid()) {\n    color.setAlpha(alpha);\n    return color.toRgbString();\n  } else {\n    return colorString;\n  }\n}\n","import $ from 'jquery';\n\nimport {\n  textUtil,\n  systemDateFormats,\n  LegacyGraphHoverClearEvent,\n  LegacyGraphHoverEvent,\n  DataHoverClearEvent,\n} from '@grafana/data';\nimport { appEvents } from 'app/core/core';\nimport { CoreEvents } from 'app/types';\n\nexport default function GraphTooltip(this: any, elem: any, dashboard: any, scope: any, getSeriesFn: any) {\n  const self = this;\n  const ctrl = scope.ctrl;\n  const panel = ctrl.panel;\n  const hoverEvent = new LegacyGraphHoverEvent({ pos: {}, point: {}, panel: this.panel });\n\n  const $tooltip = $('<div class=\"graph-tooltip\">');\n\n  this.destroy = () => {\n    $tooltip.remove();\n  };\n\n  this.findHoverIndexFromDataPoints = (posX: number, series: any, last: number) => {\n    const ps = series.datapoints.pointsize;\n    const initial = last * ps;\n    const len = series.datapoints.points.length;\n    let j;\n    for (j = initial; j < len; j += ps) {\n      // Special case of a non stepped line, highlight the very last point just before a null point\n      if (\n        (!series.lines.steps && series.datapoints.points[initial] != null && series.datapoints.points[j] == null) ||\n        //normal case\n        series.datapoints.points[j] > posX\n      ) {\n        return Math.max(j - ps, 0) / ps;\n      }\n    }\n    return j / ps - 1;\n  };\n\n  this.findHoverIndexFromData = (posX: any, series: any) => {\n    let lower = 0;\n    let upper = series.data.length - 1;\n    let middle;\n    while (true) {\n      if (lower > upper) {\n        return Math.max(upper, 0);\n      }\n      middle = Math.floor((lower + upper) / 2);\n      if (series.data[middle][0] === posX) {\n        return middle;\n      } else if (series.data[middle][0] < posX) {\n        lower = middle + 1;\n      } else {\n        upper = middle - 1;\n      }\n    }\n  };\n\n  this.renderAndShow = (absoluteTime: string, innerHtml: string, pos: { pageX: number; pageY: any }, xMode: string) => {\n    if (xMode === 'time') {\n      innerHtml = '<div class=\"graph-tooltip-time\">' + absoluteTime + '</div>' + innerHtml;\n    }\n    $tooltip.html(innerHtml).place_tt(pos.pageX, pos.pageY, { offset: 10 });\n  };\n\n  this.getMultiSeriesPlotHoverInfo = function (seriesList: any[], pos: { x: number }) {\n    let value, i, series, hoverIndex, hoverDistance, pointTime, yaxis;\n    // 3 sub-arrays, 1st for hidden series, 2nd for left yaxis, 3rd for right yaxis.\n    let results: any = [[], [], []];\n\n    //now we know the current X (j) position for X and Y values\n    let lastValue = 0; //needed for stacked values\n\n    let minDistance, minTime;\n\n    for (i = 0; i < seriesList.length; i++) {\n      series = seriesList[i];\n\n      if (!series.data.length || (panel.legend.hideEmpty && series.allIsNull)) {\n        // Init value so that it does not brake series sorting\n        results[0].push({ hidden: true, value: 0 });\n        continue;\n      }\n\n      if (!series.data.length || (panel.legend.hideZero && series.allIsZero)) {\n        // Init value so that it does not brake series sorting\n        results[0].push({ hidden: true, value: 0 });\n        continue;\n      }\n\n      if (series.hideTooltip) {\n        results[0].push({ hidden: true, value: 0 });\n        continue;\n      }\n\n      hoverIndex = this.findHoverIndexFromData(pos.x, series);\n      hoverDistance = pos.x - series.data[hoverIndex][0];\n      pointTime = series.data[hoverIndex][0];\n\n      // Take the closest point before the cursor, or if it does not exist, the closest after\n      if (\n        !minDistance ||\n        (hoverDistance >= 0 && (hoverDistance < minDistance || minDistance < 0)) ||\n        (hoverDistance < 0 && hoverDistance > minDistance)\n      ) {\n        minDistance = hoverDistance;\n        minTime = pointTime;\n      }\n\n      value = series.data[hoverIndex][1];\n\n      if (series.stack && value !== null && panel.tooltip.value_type !== 'individual') {\n        lastValue += value;\n        value = lastValue;\n      }\n\n      // Highlighting multiple Points depending on the plot type\n      if (series.lines.steps || series.stack) {\n        // stacked and steppedLine plots can have series with different length.\n        // Stacked series can increase its length on each new stacked serie if null points found,\n        // to speed the index search we begin always on the last found hoverIndex.\n        hoverIndex = this.findHoverIndexFromDataPoints(pos.x, series, hoverIndex);\n      }\n\n      // Be sure we have a yaxis so that it does not brake series sorting\n      yaxis = 0;\n      if (series.yaxis) {\n        yaxis = series.yaxis.n;\n      }\n\n      results[yaxis].push({\n        value: value,\n        hoverIndex: hoverIndex,\n        color: series.color,\n        label: series.aliasEscaped,\n        time: pointTime,\n        distance: hoverDistance,\n        index: i,\n      });\n    }\n\n    // Contat the 3 sub-arrays\n    results = results[0].concat(results[1], results[2]);\n\n    // Time of the point closer to pointer\n    results.time = minTime;\n\n    return results;\n  };\n\n  elem.mouseleave(() => {\n    if (panel.tooltip?.shared) {\n      const plot = elem.data().plot;\n      if (plot) {\n        $tooltip.detach();\n        plot.unhighlight();\n      }\n    }\n    dashboard.events.publish(new LegacyGraphHoverClearEvent());\n    dashboard.events.publish(new DataHoverClearEvent());\n  });\n\n  elem.bind('plothover', (event: any, pos: { panelRelY: number; pageY: number }, item: any) => {\n    self.show(pos, item);\n\n    // broadcast to other graph panels that we are hovering!\n    if (!dashboard.panelInEdit) {\n      pos.panelRelY = (pos.pageY - elem.offset().top) / elem.height();\n      hoverEvent.payload.pos = pos;\n      hoverEvent.payload.panel = panel;\n      hoverEvent.payload.point['time'] = (pos as any).x;\n      dashboard.events.publish(hoverEvent);\n    }\n  });\n\n  elem.bind('plotclick', (event: any, pos: any, item: any) => {\n    appEvents.emit(CoreEvents.graphClicked, { pos: pos, panel: panel, item: item });\n  });\n\n  elem.bind('plotleave', () => {\n    if (!panel.tooltip.shared) {\n      return;\n    }\n\n    const plot = elem.data().plot;\n    if (plot) {\n      $tooltip.detach();\n      plot.unhighlight();\n    }\n  });\n\n  this.clear = (plot: { clearCrosshair: () => void; unhighlight: () => void }) => {\n    $tooltip.detach();\n    plot.clearCrosshair();\n    plot.unhighlight();\n  };\n\n  this.show = (pos: any, item: any) => {\n    const plot = elem.data().plot;\n    const plotData = plot.getData();\n    const xAxes = plot.getXAxes();\n    const xMode = xAxes[0].options.mode;\n    const seriesList = getSeriesFn();\n    let allSeriesMode = panel.tooltip.shared;\n    let group, value, absoluteTime, hoverInfo, i, series, seriesHtml, tooltipFormat;\n\n    // if panelRelY is defined another panel wants us to show a tooltip\n    // get pageX from position on x axis and pageY from relative position in original panel\n    if (pos.panelRelY) {\n      const pointOffset = plot.pointOffset({ x: pos.x });\n      if (Number.isNaN(pointOffset.left) || pointOffset.left < 0 || pointOffset.left > elem.width()) {\n        self.clear(plot);\n        return;\n      }\n\n      pos.pageX = elem.offset().left + pointOffset.left;\n      pos.pageY = elem.offset().top + elem.height() * pos.panelRelY;\n\n      const scrollTop = $(window).scrollTop() ?? 0;\n      const isVisible = pos.pageY >= scrollTop && pos.pageY <= $(window).innerHeight()! + scrollTop;\n\n      if (!isVisible) {\n        self.clear(plot);\n        return;\n      }\n\n      plot.setCrosshair(pos);\n      allSeriesMode = true;\n\n      if (dashboard.sharedCrosshairModeOnly()) {\n        // if only crosshair mode we are done\n        return;\n      }\n    }\n\n    if (seriesList.length === 0) {\n      return;\n    }\n\n    if (seriesList[0].hasMsResolution) {\n      tooltipFormat = systemDateFormats.fullDateMS;\n    } else {\n      tooltipFormat = systemDateFormats.fullDate;\n    }\n\n    if (allSeriesMode) {\n      plot.unhighlight();\n\n      const seriesHoverInfo = self.getMultiSeriesPlotHoverInfo(plotData, pos);\n\n      seriesHtml = '';\n\n      absoluteTime = dashboard.formatDate(seriesHoverInfo.time, tooltipFormat);\n\n      // Dynamically reorder the hovercard for the current time point if the\n      // option is enabled.\n      if (panel.tooltip.sort === 2) {\n        seriesHoverInfo.sort((a: { value: number }, b: { value: number }) => {\n          return b.value - a.value;\n        });\n      } else if (panel.tooltip.sort === 1) {\n        seriesHoverInfo.sort((a: { value: number }, b: { value: number }) => {\n          return a.value - b.value;\n        });\n      }\n\n      for (i = 0; i < seriesHoverInfo.length; i++) {\n        hoverInfo = seriesHoverInfo[i];\n\n        if (hoverInfo.hidden) {\n          continue;\n        }\n\n        let highlightClass = '';\n        if (item && hoverInfo.index === item.seriesIndex) {\n          highlightClass = 'graph-tooltip-list-item--highlight';\n        }\n\n        series = seriesList[hoverInfo.index];\n        value = textUtil.sanitize(series.formatValue(hoverInfo.value));\n\n        const color = textUtil.sanitize(hoverInfo.color);\n        const label = textUtil.sanitize(hoverInfo.label);\n\n        seriesHtml +=\n          '<div class=\"graph-tooltip-list-item ' + highlightClass + '\"><div class=\"graph-tooltip-series-name\">';\n        seriesHtml += '<i class=\"fa fa-minus\" style=\"color:' + color + ';\"></i> ' + label + ':</div>';\n        seriesHtml += '<div class=\"graph-tooltip-value\">' + value + '</div></div>';\n        plot.highlight(hoverInfo.index, hoverInfo.hoverIndex);\n      }\n\n      self.renderAndShow(absoluteTime, seriesHtml, pos, xMode);\n    } else if (item) {\n      // single series tooltip\n      const color = textUtil.sanitize(item.series.color);\n      series = seriesList[item.seriesIndex];\n      group = '<div class=\"graph-tooltip-list-item\"><div class=\"graph-tooltip-series-name\">';\n      group += '<i class=\"fa fa-minus\" style=\"color:' + color + ';\"></i> ' + series.aliasEscaped + ':</div>';\n\n      if (panel.stack && panel.tooltip.value_type === 'individual') {\n        value = item.datapoint[1] - item.datapoint[2];\n      } else {\n        value = item.datapoint[1];\n      }\n\n      value = textUtil.sanitize(series.formatValue(value));\n      absoluteTime = dashboard.formatDate(item.datapoint[0], tooltipFormat);\n\n      group += '<div class=\"graph-tooltip-value\">' + value + '</div>';\n\n      self.renderAndShow(absoluteTime, group, pos, xMode);\n    } else {\n      // no hit\n      $tooltip.detach();\n    }\n  };\n}\n","import { histogram } from 'd3';\n\nimport TimeSeries from 'app/core/time_series2';\n\n/**\n * Convert series into array of series values.\n * @param data Array of series\n */\nexport function getSeriesValues(dataList: TimeSeries[]): number[] {\n  const VALUE_INDEX = 0;\n  const values = [];\n\n  // Count histogam stats\n  for (let i = 0; i < dataList.length; i++) {\n    const series = dataList[i];\n    const datapoints = series.datapoints;\n    for (let j = 0; j < datapoints.length; j++) {\n      if (datapoints[j][VALUE_INDEX] !== null) {\n        values.push(datapoints[j][VALUE_INDEX]);\n      }\n    }\n  }\n\n  return values;\n}\n\n/**\n * Convert array of values into timeseries-like histogram:\n * [[val_1, count_1], [val_2, count_2], ..., [val_n, count_n]]\n * @param values\n * @param bucketSize\n */\nexport function convertValuesToHistogram(values: number[], bucketSize: number, min: number, max: number): any[] {\n  const minBound = getBucketBound(min, bucketSize);\n  const maxBound = getBucketBound(max, bucketSize);\n\n  const histGenerator = histogram()\n    .domain([minBound, maxBound])\n    .thresholds(Math.round(max - min) / bucketSize);\n\n  return histGenerator(values).map((bin) => {\n    return [bin.x0, bin.length];\n  });\n}\n\n/**\n * Convert series into array of histogram data.\n * @param data Array of series\n * @param bucketSize\n */\nexport function convertToHistogramData(\n  data: any,\n  bucketSize: number,\n  hiddenSeries: any,\n  min: number,\n  max: number\n): any[] {\n  return data.map((series: any) => {\n    const values = getSeriesValues([series]);\n    series.histogram = true;\n    if (!hiddenSeries[series.alias]) {\n      const histogram = convertValuesToHistogram(values, bucketSize, min, max);\n      series.data = histogram;\n    } else {\n      series.data = [];\n    }\n    return series;\n  });\n}\n\nfunction getBucketBound(value: number, bucketSize: number): number {\n  return Math.floor(value / bucketSize) * bucketSize;\n}\n","import 'vendor/flot/jquery.flot';\nimport $ from 'jquery';\nimport { isNumber } from 'lodash';\n\nimport { PanelCtrl } from 'app/angular/panel/panel_ctrl';\nimport { config } from 'app/core/config';\nimport { CoreEvents } from 'app/types';\n\nexport class ThresholdManager {\n  plot: any;\n  placeholder: any;\n  height: any;\n  thresholds: any;\n  needsCleanup = false;\n  hasSecondYAxis: any;\n\n  constructor(private panelCtrl: PanelCtrl) {}\n\n  getHandleHtml(handleIndex: any, model: { colorMode: string }, valueStr: any) {\n    let stateClass = model.colorMode;\n    if (model.colorMode === 'custom') {\n      stateClass = 'critical';\n    }\n\n    return `\n    <div class=\"alert-handle-wrapper alert-handle-wrapper--T${handleIndex}\">\n      <div class=\"alert-handle-line alert-handle-line--${stateClass}\">\n      </div>\n      <div class=\"alert-handle\" data-handle-index=\"${handleIndex}\">\n        <i class=\"icon-gf icon-gf-${stateClass} alert-state-${stateClass}\"></i>\n        <span class=\"alert-handle-value\">${valueStr}<i class=\"alert-handle-grip\"></i></span>\n      </div>\n    </div>`;\n  }\n\n  initDragging(evt: any) {\n    const handleElem = $(evt.currentTarget).parents('.alert-handle-wrapper');\n    const handleIndex = $(evt.currentTarget).data('handleIndex');\n\n    let lastY: number | null = null;\n    let posTop: number;\n    const plot = this.plot;\n    const panelCtrl = this.panelCtrl;\n    const model = this.thresholds[handleIndex];\n\n    function dragging(evt: any) {\n      if (lastY === null) {\n        lastY = evt.clientY;\n      } else {\n        const diff = evt.clientY - lastY;\n        posTop = posTop + diff;\n        lastY = evt.clientY;\n        handleElem.css({ top: posTop + diff });\n      }\n    }\n\n    function stopped() {\n      // calculate graph level\n      let graphValue = plot.c2p({ left: 0, top: posTop }).y;\n      graphValue = parseInt(graphValue.toFixed(0), 10);\n      model.value = graphValue;\n\n      handleElem.off('mousemove', dragging);\n      document.removeEventListener('mouseup', stopped);\n\n      // trigger digest and render\n      panelCtrl.$scope.$apply(() => {\n        panelCtrl.render();\n        panelCtrl.events.emit(CoreEvents.thresholdChanged, {\n          threshold: model,\n          handleIndex: handleIndex,\n        });\n      });\n    }\n\n    lastY = null;\n    posTop = handleElem.position().top;\n\n    handleElem.on('mousemove', dragging);\n    document.addEventListener('mouseup', stopped);\n  }\n\n  cleanUp() {\n    this.placeholder.find('.alert-handle-wrapper').remove();\n    this.needsCleanup = false;\n  }\n\n  renderHandle(handleIndex: number, defaultHandleTopPos: number) {\n    const model = this.thresholds[handleIndex];\n    // alerting defines\n    if (!model.visible && (this.panelCtrl as any).alert) {\n      return;\n    }\n\n    const value = model.value;\n    let valueStr = value;\n    let handleTopPos = 0;\n\n    // handle no value\n    if (!isNumber(value)) {\n      valueStr = '';\n      handleTopPos = defaultHandleTopPos;\n    } else {\n      const valueCanvasPos = this.plot.p2c({ x: 0, y: value });\n      handleTopPos = Math.round(Math.min(Math.max(valueCanvasPos.top, 0), this.height) - 6);\n    }\n\n    const handleElem = $(this.getHandleHtml(handleIndex, model, valueStr));\n    this.placeholder.append(handleElem);\n\n    handleElem.toggleClass('alert-handle-wrapper--no-value', valueStr === '');\n    handleElem.css({ top: handleTopPos });\n  }\n\n  shouldDrawHandles() {\n    // @ts-ignore\n    return !this.hasSecondYAxis && this.panelCtrl.editingThresholds && this.panelCtrl.panel.thresholds.length > 0;\n  }\n\n  prepare(elem: JQuery, data: any[]) {\n    this.hasSecondYAxis = false;\n    for (let i = 0; i < data.length; i++) {\n      if (data[i].yaxis > 1) {\n        this.hasSecondYAxis = true;\n        break;\n      }\n    }\n\n    if (this.shouldDrawHandles()) {\n      const thresholdMargin = this.panelCtrl.panel.thresholds.length > 1 ? '220px' : '110px';\n      elem.css('margin-right', thresholdMargin);\n    } else if (this.needsCleanup) {\n      elem.css('margin-right', '0');\n    }\n  }\n\n  draw(plot: any) {\n    this.thresholds = this.panelCtrl.panel.thresholds;\n    this.plot = plot;\n    this.placeholder = plot.getPlaceholder();\n\n    if (this.needsCleanup) {\n      this.cleanUp();\n    }\n\n    if (!this.shouldDrawHandles()) {\n      return;\n    }\n\n    this.height = plot.height();\n\n    if (this.thresholds.length > 0) {\n      this.renderHandle(0, 10);\n    }\n    if (this.thresholds.length > 1) {\n      this.renderHandle(1, this.height - 30);\n    }\n\n    this.placeholder.off('mousedown', '.alert-handle');\n    this.placeholder.on('mousedown', '.alert-handle', this.initDragging.bind(this));\n    this.needsCleanup = true;\n  }\n\n  addFlotOptions(options: any, panel: any) {\n    if (!panel.thresholds || panel.thresholds.length === 0) {\n      return;\n    }\n\n    let gtLimit = Infinity;\n    let ltLimit = -Infinity;\n    let i, threshold, other;\n\n    for (i = 0; i < panel.thresholds.length; i++) {\n      threshold = panel.thresholds[i];\n      if (!isNumber(threshold.value)) {\n        continue;\n      }\n\n      let limit;\n      switch (threshold.op) {\n        case 'gt': {\n          limit = gtLimit;\n          // if next threshold is less then op and greater value, then use that as limit\n          if (panel.thresholds.length > i + 1) {\n            other = panel.thresholds[i + 1];\n            if (other.value > threshold.value) {\n              limit = other.value;\n              ltLimit = limit;\n            }\n          }\n          break;\n        }\n        case 'lt': {\n          limit = ltLimit;\n          // if next threshold is less then op and greater value, then use that as limit\n          if (panel.thresholds.length > i + 1) {\n            other = panel.thresholds[i + 1];\n            if (other.value < threshold.value) {\n              limit = other.value;\n              gtLimit = limit;\n            }\n          }\n          break;\n        }\n      }\n\n      let fillColor, lineColor;\n\n      switch (threshold.colorMode) {\n        case 'critical': {\n          fillColor = 'rgba(234, 112, 112, 0.12)';\n          lineColor = 'rgba(237, 46, 24, 0.60)';\n          break;\n        }\n        case 'warning': {\n          fillColor = 'rgba(235, 138, 14, 0.12)';\n          lineColor = 'rgba(247, 149, 32, 0.60)';\n          break;\n        }\n        case 'ok': {\n          fillColor = 'rgba(11, 237, 50, 0.090)';\n          lineColor = 'rgba(6,163,69, 0.60)';\n          break;\n        }\n        case 'custom': {\n          fillColor = threshold.fillColor;\n          lineColor = threshold.lineColor;\n          break;\n        }\n      }\n\n      // fill\n      if (threshold.fill) {\n        if (threshold.yaxis === 'right' && this.hasSecondYAxis) {\n          options.grid.markings.push({\n            y2axis: { from: threshold.value, to: limit },\n            color: config.theme.visualization.getColorByName(fillColor),\n          });\n        } else {\n          options.grid.markings.push({\n            yaxis: { from: threshold.value, to: limit },\n            color: config.theme.visualization.getColorByName(fillColor),\n          });\n        }\n      }\n      if (threshold.line) {\n        if (threshold.yaxis === 'right' && this.hasSecondYAxis) {\n          options.grid.markings.push({\n            y2axis: { from: threshold.value, to: threshold.value },\n            color: config.theme.visualization.getColorByName(lineColor),\n          });\n        } else {\n          options.grid.markings.push({\n            yaxis: { from: threshold.value, to: threshold.value },\n            color: config.theme.visualization.getColorByName(lineColor),\n          });\n        }\n      }\n    }\n  }\n}\n","import { AbsoluteTimeRange, dateTime, TimeRange } from '@grafana/data';\n\nexport interface TimeRegionConfig {\n  from?: string;\n  fromDayOfWeek?: number; // 1-7\n\n  to?: string;\n  toDayOfWeek?: number; // 1-7\n}\n\ninterface ParsedTime {\n  dayOfWeek?: number; // 1-7\n  h?: number; // 0-23\n  m?: number; // 0-59\n  s?: number; // 0-59\n}\n\nexport function calculateTimesWithin(cfg: TimeRegionConfig, tRange: TimeRange): AbsoluteTimeRange[] {\n  if (!(cfg.fromDayOfWeek || cfg.from) && !(cfg.toDayOfWeek || cfg.to)) {\n    return [];\n  }\n\n  // So we can mutate\n  const timeRegion = { ...cfg };\n\n  if (timeRegion.from && !timeRegion.to) {\n    timeRegion.to = timeRegion.from;\n  }\n\n  if (!timeRegion.from && timeRegion.to) {\n    timeRegion.from = timeRegion.to;\n  }\n\n  const hRange = {\n    from: parseTimeRange(timeRegion.from),\n    to: parseTimeRange(timeRegion.to),\n  };\n\n  if (!timeRegion.fromDayOfWeek && timeRegion.toDayOfWeek) {\n    timeRegion.fromDayOfWeek = timeRegion.toDayOfWeek;\n  }\n\n  if (!timeRegion.toDayOfWeek && timeRegion.fromDayOfWeek) {\n    timeRegion.toDayOfWeek = timeRegion.fromDayOfWeek;\n  }\n\n  if (timeRegion.fromDayOfWeek) {\n    hRange.from.dayOfWeek = Number(timeRegion.fromDayOfWeek);\n  }\n\n  if (timeRegion.toDayOfWeek) {\n    hRange.to.dayOfWeek = Number(timeRegion.toDayOfWeek);\n  }\n\n  if (hRange.from.dayOfWeek && hRange.from.h == null && hRange.from.m == null) {\n    hRange.from.h = 0;\n    hRange.from.m = 0;\n    hRange.from.s = 0;\n  }\n\n  if (hRange.to.dayOfWeek && hRange.to.h == null && hRange.to.m == null) {\n    hRange.to.h = 23;\n    hRange.to.m = 59;\n    hRange.to.s = 59;\n  }\n\n  if (!hRange.from || !hRange.to) {\n    return [];\n  }\n\n  if (hRange.from.h == null) {\n    hRange.from.h = 0;\n  }\n\n  if (hRange.to.h == null) {\n    hRange.to.h = 23;\n  }\n\n  const regions: AbsoluteTimeRange[] = [];\n\n  const fromStart = dateTime(tRange.from);\n  fromStart.set('hour', 0);\n  fromStart.set('minute', 0);\n  fromStart.set('second', 0);\n  fromStart.add(hRange.from.h, 'hours');\n  fromStart.add(hRange.from.m, 'minutes');\n  fromStart.add(hRange.from.s, 'seconds');\n\n  while (fromStart.unix() <= tRange.to.unix()) {\n    while (hRange.from.dayOfWeek && hRange.from.dayOfWeek !== fromStart.isoWeekday()) {\n      fromStart.add(24, 'hours');\n    }\n\n    if (fromStart.unix() > tRange.to.unix()) {\n      break;\n    }\n\n    const fromEnd = dateTime(fromStart);\n\n    if (fromEnd.hour) {\n      if (hRange.from.h <= hRange.to.h) {\n        fromEnd.add(hRange.to.h - hRange.from.h, 'hours');\n      } else if (hRange.from.h > hRange.to.h) {\n        while (fromEnd.hour() !== hRange.to.h) {\n          fromEnd.add(1, 'hours');\n        }\n      } else {\n        fromEnd.add(24 - hRange.from.h, 'hours');\n\n        while (fromEnd.hour() !== hRange.to.h) {\n          fromEnd.add(1, 'hours');\n        }\n      }\n    }\n\n    fromEnd.set('minute', hRange.to.m ?? 0);\n    fromEnd.set('second', hRange.to.s ?? 0);\n\n    while (hRange.to.dayOfWeek && hRange.to.dayOfWeek !== fromEnd.isoWeekday()) {\n      fromEnd.add(24, 'hours');\n    }\n\n    const outsideRange =\n      (fromStart.unix() < tRange.from.unix() && fromEnd.unix() < tRange.from.unix()) ||\n      (fromStart.unix() > tRange.to.unix() && fromEnd.unix() > tRange.to.unix());\n\n    if (!outsideRange) {\n      regions.push({ from: fromStart.valueOf(), to: fromEnd.valueOf() });\n    }\n\n    fromStart.add(24, 'hours');\n  }\n\n  return regions;\n}\n\nfunction parseTimeRange(str?: string): ParsedTime {\n  const result: ParsedTime = {};\n  if (!str?.length) {\n    return result;\n  }\n\n  const timeRegex = /^([\\d]+):?(\\d{2})?/;\n  const match = timeRegex.exec(str);\n\n  if (!match) {\n    return result;\n  }\n\n  if (match.length > 1) {\n    result.h = Number(match[1]);\n    result.m = 0;\n\n    if (match.length > 2 && match[2] !== undefined) {\n      result.m = Number(match[2]);\n    }\n\n    if (result.h > 23) {\n      result.h = 23;\n    }\n\n    if (result.m > 59) {\n      result.m = 59;\n    }\n  }\n\n  return result;\n}\n","import 'vendor/flot/jquery.flot';\nimport { map } from 'lodash';\n\nimport { dateTime, GrafanaTheme, TimeRange } from '@grafana/data';\nimport { config } from 'app/core/config';\nimport { calculateTimesWithin, TimeRegionConfig } from 'app/core/utils/timeRegions';\n\ntype TimeRegionColorDefinition = {\n  fill: string | null;\n  line: string | null;\n};\n\nexport const colorModes: any = {\n  gray: {\n    themeDependent: true,\n    title: 'Gray',\n    darkColor: { fill: 'rgba(255, 255, 255, 0.09)', line: 'rgba(255, 255, 255, 0.2)' },\n    lightColor: { fill: 'rgba(0, 0, 0, 0.09)', line: 'rgba(0, 0, 0, 0.2)' },\n  },\n  red: {\n    title: 'Red',\n    color: { fill: 'rgba(234, 112, 112, 0.12)', line: 'rgba(237, 46, 24, 0.60)' },\n  },\n  green: {\n    title: 'Green',\n    color: { fill: 'rgba(11, 237, 50, 0.090)', line: 'rgba(6,163,69, 0.60)' },\n  },\n  blue: {\n    title: 'Blue',\n    color: { fill: 'rgba(11, 125, 238, 0.12)', line: 'rgba(11, 125, 238, 0.60)' },\n  },\n  yellow: {\n    title: 'Yellow',\n    color: { fill: 'rgba(235, 138, 14, 0.12)', line: 'rgba(247, 149, 32, 0.60)' },\n  },\n  custom: { title: 'Custom' },\n};\n\nexport function getColorModes() {\n  return map(Object.keys(colorModes), (key) => {\n    return {\n      key,\n      value: colorModes[key].title,\n    };\n  });\n}\n\nfunction getColor(timeRegion: any, theme: GrafanaTheme): TimeRegionColorDefinition {\n  if (Object.keys(colorModes).indexOf(timeRegion.colorMode) === -1) {\n    timeRegion.colorMode = 'red';\n  }\n\n  if (timeRegion.colorMode === 'custom') {\n    return {\n      fill: timeRegion.fill && timeRegion.fillColor ? theme.visualization.getColorByName(timeRegion.fillColor) : null,\n      line: timeRegion.line && timeRegion.lineColor ? theme.visualization.getColorByName(timeRegion.lineColor) : null,\n    };\n  }\n\n  const colorMode = colorModes[timeRegion.colorMode];\n\n  if (colorMode.themeDependent === true) {\n    return theme.isLight ? colorMode.lightColor : colorMode.darkColor;\n  }\n\n  return {\n    fill: timeRegion.fill ? theme.visualization.getColorByName(colorMode.color.fill) : null,\n    line: timeRegion.fill ? theme.visualization.getColorByName(colorMode.color.line) : null,\n  };\n}\n\ninterface GraphTimeRegionConfig extends TimeRegionConfig {\n  colorMode: string;\n\n  fill: boolean;\n  fillColor: string;\n\n  line: boolean;\n  lineColor: string;\n}\n\nexport class TimeRegionManager {\n  plot: any;\n  timeRegions?: TimeRegionConfig[];\n\n  constructor(private panelCtrl: any) {}\n\n  draw(plot: any) {\n    this.timeRegions = this.panelCtrl.panel.timeRegions;\n    this.plot = plot;\n  }\n\n  addFlotOptions(options: any, panel: any) {\n    if (!panel.timeRegions?.length) {\n      return;\n    }\n\n    // The panel range\n    const tRange: TimeRange = {\n      from: dateTime(this.panelCtrl.range.from).utc(),\n      to: dateTime(this.panelCtrl.range.to).utc(),\n      raw: {\n        from: '',\n        to: '',\n      },\n    };\n\n    for (const tr of panel.timeRegions) {\n      const timeRegion: GraphTimeRegionConfig = tr;\n      const regions = calculateTimesWithin(tr, tRange);\n      if (regions.length) {\n        const timeRegionColor = getColor(timeRegion, config.theme);\n\n        for (let j = 0; j < regions.length; j++) {\n          const r = regions[j];\n          if (timeRegion.fill) {\n            options.grid.markings.push({\n              xaxis: { from: r.from, to: r.to },\n              color: timeRegionColor.fill,\n            });\n          }\n\n          if (timeRegion.line) {\n            options.grid.markings.push({\n              xaxis: { from: r.from, to: r.from },\n              color: timeRegionColor.line,\n            });\n            options.grid.markings.push({\n              xaxis: { from: r.to, to: r.to },\n              color: timeRegionColor.line,\n            });\n          }\n        }\n      }\n    }\n  }\n}\n","import 'vendor/flot/jquery.flot';\nimport 'vendor/flot/jquery.flot.selection';\nimport 'vendor/flot/jquery.flot.time';\nimport 'vendor/flot/jquery.flot.stack';\nimport 'vendor/flot/jquery.flot.stackpercent';\nimport 'vendor/flot/jquery.flot.fillbelow';\nimport 'vendor/flot/jquery.flot.crosshair';\nimport 'vendor/flot/jquery.flot.dashes';\nimport './jquery.flot.events';\n\nimport $ from 'jquery';\nimport { clone, find, flatten, isUndefined, map, max as _max, min as _min, sortBy as _sortBy, toNumber } from 'lodash';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {\n  DataFrame,\n  DataFrameView,\n  DataHoverClearEvent,\n  DataHoverEvent,\n  DataHoverPayload,\n  DecimalCount,\n  FieldDisplay,\n  FieldType,\n  formattedValueToString,\n  getDisplayProcessor,\n  getFlotPairsConstant,\n  getTimeField,\n  getValueFormat,\n  hasLinks,\n  LegacyEventHandler,\n  LegacyGraphHoverClearEvent,\n  LegacyGraphHoverEvent,\n  LegacyGraphHoverEventPayload,\n  LinkModelSupplier,\n  PanelEvents,\n  toUtc,\n} from '@grafana/data';\nimport { graphTickFormatter, graphTimeFormat, IconName, MenuItemProps, MenuItemsGroup } from '@grafana/ui';\nimport { coreModule } from 'app/angular/core_module';\nimport config from 'app/core/config';\nimport { updateLegendValues } from 'app/core/core';\nimport { ContextSrv } from 'app/core/services/context_srv';\nimport { provideTheme } from 'app/core/utils/ConfigProvider';\nimport { tickStep } from 'app/core/utils/ticks';\nimport { TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { getFieldLinksSupplier } from 'app/features/panel/panellinks/linkSuppliers';\n\nimport { DashboardModel } from '../../../features/dashboard/state';\n\nimport { GraphContextMenuCtrl } from './GraphContextMenuCtrl';\nimport { GraphLegendProps, Legend } from './Legend/Legend';\nimport { alignYLevel } from './align_yaxes';\nimport { EventManager } from './event_manager';\nimport GraphTooltip from './graph_tooltip';\nimport { convertToHistogramData } from './histogram';\nimport { GraphCtrl } from './module';\nimport { ThresholdManager } from './threshold_manager';\nimport { TimeRegionManager } from './time_region_manager';\nimport { isLegacyGraphHoverEvent } from './utils';\n\nconst LegendWithThemeProvider = provideTheme(Legend, config.theme2);\n\nclass GraphElement {\n  ctrl: GraphCtrl;\n  contextMenu: GraphContextMenuCtrl;\n  tooltip: any;\n  dashboard: DashboardModel;\n  annotations: object[];\n  panel: any;\n  plot: any;\n  sortedSeries?: any[];\n  data: any[] = [];\n  panelWidth: number;\n  eventManager: EventManager;\n  thresholdManager: ThresholdManager;\n  timeRegionManager: TimeRegionManager;\n  declare legendElem: HTMLElement;\n\n  constructor(\n    private scope: any,\n    private elem: JQuery & {\n      bind(eventType: string, handler: (eventObject: JQueryEventObject, ...args: any[]) => any): JQuery; // need to extend with Plot\n    },\n    private timeSrv: TimeSrv\n  ) {\n    this.ctrl = scope.ctrl;\n    this.contextMenu = scope.ctrl.contextMenuCtrl;\n    this.dashboard = this.ctrl.dashboard;\n    this.panel = this.ctrl.panel;\n    this.annotations = [];\n\n    this.panelWidth = 0;\n    this.eventManager = new EventManager(this.ctrl);\n    this.thresholdManager = new ThresholdManager(this.ctrl);\n    this.timeRegionManager = new TimeRegionManager(this.ctrl);\n    // @ts-ignore\n    this.tooltip = new GraphTooltip(this.elem, this.ctrl.dashboard, this.scope, () => {\n      return this.sortedSeries;\n    });\n\n    // panel events\n    this.ctrl.events.on(PanelEvents.panelTeardown, this.onPanelTeardown.bind(this));\n    this.ctrl.events.on(PanelEvents.render, this.onRender.bind(this));\n\n    // global events\n    // Using old way here to use the scope unsubscribe model as the new $on function does not take scope\n    this.ctrl.dashboard.events.on(LegacyGraphHoverEvent.type, this.onGraphHover.bind(this), this.scope);\n    this.ctrl.dashboard.events.on(LegacyGraphHoverClearEvent.type, this.onGraphHoverClear.bind(this), this.scope);\n\n    this.ctrl.dashboard.events.on(DataHoverEvent.type, this.onGraphHover.bind(this), this.scope);\n    this.ctrl.dashboard.events.on(DataHoverClearEvent.type, this.onGraphHoverClear.bind(this), this.scope);\n\n    // plot events\n    this.elem.bind('plotselected', this.onPlotSelected.bind(this));\n    this.elem.bind('plotclick', this.onPlotClick.bind(this));\n\n    // get graph legend element\n    if (this.elem && this.elem.parent) {\n      this.legendElem = this.elem.parent().find('.graph-legend')[0];\n    }\n  }\n\n  onRender(renderData: any[]) {\n    this.data = renderData || this.data;\n    if (!this.data) {\n      return;\n    }\n\n    this.annotations = this.ctrl.annotations || [];\n    this.buildFlotPairs(this.data);\n    const graphHeight = this.ctrl.height;\n    updateLegendValues(this.data, this.panel, graphHeight);\n\n    if (!this.panel.legend.show) {\n      if (this.legendElem.hasChildNodes()) {\n        ReactDOM.unmountComponentAtNode(this.legendElem);\n      }\n      this.renderPanel();\n      return;\n    }\n\n    const { values, min, max, avg, current, total } = this.panel.legend;\n    const { alignAsTable, rightSide, sideWidth, sort, sortDesc, hideEmpty, hideZero } = this.panel.legend;\n    const legendOptions = { alignAsTable, rightSide, sideWidth, sort, sortDesc, hideEmpty, hideZero };\n    const valueOptions = { values, min, max, avg, current, total };\n    const legendProps: GraphLegendProps = {\n      seriesList: this.data,\n      hiddenSeries: this.ctrl.hiddenSeries,\n      ...legendOptions,\n      ...valueOptions,\n      onToggleSeries: this.ctrl.onToggleSeries,\n      onToggleSort: this.ctrl.onToggleSort,\n      onColorChange: this.ctrl.onColorChange,\n      onToggleAxis: this.ctrl.onToggleAxis,\n    };\n\n    const legendReactElem = React.createElement(LegendWithThemeProvider, legendProps);\n    ReactDOM.render(legendReactElem, this.legendElem, () => this.renderPanel());\n  }\n\n  onGraphHover(evt: LegacyGraphHoverEventPayload | DataHoverPayload) {\n    // ignore other graph hover events if shared tooltip is disabled\n    if (!this.dashboard.sharedTooltipModeEnabled()) {\n      return;\n    }\n\n    if (isLegacyGraphHoverEvent(evt)) {\n      // ignore if we are the emitter\n      if (!this.plot || evt.panel?.id === this.panel.id || this.ctrl.otherPanelInFullscreenMode()) {\n        return;\n      }\n\n      this.tooltip.show(evt.pos);\n    }\n\n    // DataHoverEvent can come from multiple panels that doesn't include x position\n    if (!evt.point?.time) {\n      return;\n    }\n\n    this.tooltip.show({ x: evt.point.time, panelRelY: evt.point.panelRelY ?? 1 });\n  }\n\n  onPanelTeardown() {\n    if (this.plot) {\n      this.plot.destroy();\n      this.plot = null;\n    }\n\n    this.tooltip.destroy();\n    this.elem.off();\n    this.elem.remove();\n\n    ReactDOM.unmountComponentAtNode(this.legendElem);\n  }\n\n  onGraphHoverClear(handler: LegacyEventHandler<any>) {\n    if (this.plot) {\n      this.tooltip.clear(this.plot);\n    }\n  }\n\n  onPlotSelected(event: JQueryEventObject, ranges: any) {\n    if (this.panel.xaxis.mode !== 'time') {\n      // Skip if panel in histogram or series mode\n      this.plot.clearSelection();\n      return;\n    }\n\n    if ((ranges.ctrlKey || ranges.metaKey) && this.dashboard.canAddAnnotations()) {\n      // Add annotation\n      setTimeout(() => {\n        this.eventManager.updateTime(ranges.xaxis);\n      }, 100);\n    } else {\n      this.scope.$apply(() => {\n        this.timeSrv.setTime({\n          from: toUtc(ranges.xaxis.from),\n          to: toUtc(ranges.xaxis.to),\n        });\n      });\n    }\n  }\n\n  getContextMenuItemsSupplier = (\n    flotPosition: { x: number; y: number },\n    linksSupplier?: LinkModelSupplier<FieldDisplay>\n  ): (() => MenuItemsGroup[]) => {\n    return () => {\n      // Fixed context menu items\n      const items: MenuItemsGroup[] = this.dashboard.canAddAnnotations()\n        ? [\n            {\n              items: [\n                {\n                  label: 'Add annotation',\n                  ariaLabel: 'Add annotation',\n                  icon: 'comment-alt',\n                  onClick: () => this.eventManager.updateTime({ from: flotPosition.x, to: null }),\n                },\n              ],\n            },\n          ]\n        : [];\n\n      if (!linksSupplier) {\n        return items;\n      }\n\n      const dataLinks = [\n        {\n          items: linksSupplier.getLinks(this.panel.replaceVariables).map<MenuItemProps>((link) => {\n            return {\n              label: link.title,\n              ariaLabel: link.title,\n              url: link.href,\n              target: link.target,\n              icon: `${link.target === '_self' ? 'link' : 'external-link-alt'}` as IconName,\n              onClick: link.onClick,\n            };\n          }),\n        },\n      ];\n\n      return [...items, ...dataLinks];\n    };\n  };\n\n  onPlotClick(event: JQueryEventObject, pos: any, item: any) {\n    const scrollContextElement = this.elem.closest('.view') ? this.elem.closest('.view').get()[0] : null;\n    const contextMenuSourceItem = item;\n\n    if (this.panel.xaxis.mode !== 'time') {\n      // Skip if panel in histogram or series mode\n      return;\n    }\n\n    if (pos.ctrlKey || pos.metaKey) {\n      // Skip if range selected (added in \"plotselected\" event handler)\n      if (pos.x !== pos.x1) {\n        return;\n      }\n\n      // skip if dashboard is not saved yet (exists in db) or user cannot edit\n      if (!this.dashboard.id || !this.dashboard.canAddAnnotations()) {\n        return;\n      }\n\n      setTimeout(() => {\n        this.eventManager.updateTime({ from: pos.x, to: null });\n      }, 100);\n      return;\n    } else {\n      this.tooltip.clear(this.plot);\n      let linksSupplier: LinkModelSupplier<FieldDisplay> | undefined;\n\n      if (item) {\n        // pickup y-axis index to know which field's config to apply\n        const yAxisConfig = this.panel.yaxes[item.series.yaxis.n === 2 ? 1 : 0];\n        const dataFrame = this.ctrl.dataList[item.series.dataFrameIndex];\n        const field = dataFrame.fields[item.series.fieldIndex];\n        const dataIndex = this.getDataIndexWithNullValuesCorrection(item, dataFrame);\n\n        let links: any[] = this.panel.options.dataLinks || [];\n        const hasLinksValue = hasLinks(field);\n        if (hasLinksValue) {\n          // Append the configured links to the panel datalinks\n          links = [...links, ...field.config.links!];\n        }\n        const fieldConfig = {\n          decimals: yAxisConfig.decimals,\n          links,\n        };\n        const fieldDisplay = getDisplayProcessor({\n          field: { config: fieldConfig, type: FieldType.number },\n          theme: config.theme2,\n          timeZone: this.dashboard.getTimezone(),\n        })(field.values.get(dataIndex));\n        linksSupplier = links.length\n          ? getFieldLinksSupplier({\n              display: fieldDisplay,\n              name: field.name,\n              view: new DataFrameView(dataFrame),\n              rowIndex: dataIndex,\n              colIndex: item.series.fieldIndex,\n              field: fieldConfig,\n              hasLinks: hasLinksValue,\n            })\n          : undefined;\n      }\n\n      this.scope.$apply(() => {\n        // Setting nearest CustomScrollbar element as a scroll context for graph context menu\n        this.contextMenu.setScrollContextElement(scrollContextElement);\n        this.contextMenu.setSource(contextMenuSourceItem);\n        this.contextMenu.setMenuItemsSupplier(this.getContextMenuItemsSupplier(pos, linksSupplier) as any);\n        this.contextMenu.toggleMenu(pos);\n      });\n    }\n  }\n\n  getDataIndexWithNullValuesCorrection(item: any, dataFrame: DataFrame): number {\n    /** This is one added to handle the scenario where we have null values in\n     *  the time series data and the: \"visualization options -> null value\"\n     *  set to \"connected\". In this scenario we will get the wrong dataIndex.\n     *\n     *  https://github.com/grafana/grafana/issues/22651\n     */\n    const { datapoint, dataIndex } = item;\n\n    if (!Array.isArray(datapoint) || datapoint.length === 0) {\n      return dataIndex;\n    }\n\n    const ts = datapoint[0];\n    const { timeField } = getTimeField(dataFrame);\n\n    if (!timeField || !timeField.values) {\n      return dataIndex;\n    }\n\n    const field = timeField.values.get(dataIndex);\n\n    if (field === ts) {\n      return dataIndex;\n    }\n\n    const correctIndex = timeField.values.toArray().findIndex((value) => value === ts);\n    return correctIndex > -1 ? correctIndex : dataIndex;\n  }\n\n  shouldAbortRender() {\n    if (!this.data) {\n      return true;\n    }\n\n    if (this.panelWidth === 0) {\n      return true;\n    }\n\n    return false;\n  }\n\n  drawHook(plot: any) {\n    // add left axis labels\n    if (this.panel.yaxes[0].label && this.panel.yaxes[0].show) {\n      $(\"<div class='axisLabel left-yaxis-label flot-temp-elem'></div>\")\n        .text(this.panel.yaxes[0].label)\n        .appendTo(this.elem);\n    }\n\n    // add right axis labels\n    if (this.panel.yaxes[1].label && this.panel.yaxes[1].show) {\n      $(\"<div class='axisLabel right-yaxis-label flot-temp-elem'></div>\")\n        .text(this.panel.yaxes[1].label)\n        .appendTo(this.elem);\n    }\n\n    const { dataWarning } = this.ctrl;\n    if (dataWarning) {\n      const msg = $(`<div class=\"datapoints-warning flot-temp-elem\">${dataWarning.title}</div>`);\n      if (dataWarning.action) {\n        $(`<button class=\"btn btn-secondary\">${dataWarning.actionText}</button>`)\n          .click(dataWarning.action)\n          .appendTo(msg);\n      }\n      msg.appendTo(this.elem);\n    }\n    this.thresholdManager.draw(plot);\n    this.timeRegionManager.draw(plot);\n  }\n\n  processOffsetHook(plot: any, gridMargin: { left: number; right: number }) {\n    const left = this.panel.yaxes[0];\n    const right = this.panel.yaxes[1];\n    if (left.show && left.label) {\n      gridMargin.left = 20;\n    }\n    if (right.show && right.label) {\n      gridMargin.right = 20;\n    }\n\n    // apply y-axis min/max options\n    const yaxis = plot.getYAxes();\n    for (let i = 0; i < yaxis.length; i++) {\n      const axis: any = yaxis[i];\n      const panelOptions = this.panel.yaxes[i];\n      axis.options.max = axis.options.max !== null ? axis.options.max : panelOptions.max;\n      axis.options.min = axis.options.min !== null ? axis.options.min : panelOptions.min;\n    }\n  }\n\n  processRangeHook(plot: any) {\n    const yAxes = plot.getYAxes();\n    const align = this.panel.yaxis.align || false;\n\n    if (yAxes.length > 1 && align === true) {\n      const level = this.panel.yaxis.alignLevel || 0;\n      alignYLevel(yAxes, parseFloat(level));\n    }\n  }\n\n  // Series could have different timeSteps,\n  // let's find the smallest one so that bars are correctly rendered.\n  // In addition, only take series which are rendered as bars for this.\n  getMinTimeStepOfSeries(data: any[]) {\n    let min = Number.MAX_VALUE;\n\n    for (let i = 0; i < data.length; i++) {\n      if (!data[i].stats.timeStep) {\n        continue;\n      }\n      if (this.panel.bars) {\n        if (data[i].bars && data[i].bars.show === false) {\n          continue;\n        }\n      } else {\n        if (typeof data[i].bars === 'undefined' || typeof data[i].bars.show === 'undefined' || !data[i].bars.show) {\n          continue;\n        }\n      }\n\n      if (data[i].stats.timeStep < min) {\n        min = data[i].stats.timeStep;\n      }\n    }\n\n    return min;\n  }\n\n  // Function for rendering panel\n  renderPanel() {\n    this.panelWidth = this.elem.width() ?? 0;\n\n    if (this.shouldAbortRender()) {\n      return;\n    }\n\n    // give space to alert editing\n    this.thresholdManager.prepare(this.elem, this.data);\n\n    // un-check dashes if lines are unchecked\n    this.panel.dashes = this.panel.lines ? this.panel.dashes : false;\n\n    // Populate element\n    const options: any = this.buildFlotOptions(this.panel);\n    this.prepareXAxis(options, this.panel);\n    this.configureYAxisOptions(this.data, options);\n    this.thresholdManager.addFlotOptions(options, this.panel);\n    this.timeRegionManager.addFlotOptions(options, this.panel);\n    this.eventManager.addFlotEvents(this.annotations, options);\n    this.sortedSeries = this.sortSeries(this.data, this.panel);\n    this.callPlot(options, true);\n  }\n\n  buildFlotPairs(data: any) {\n    for (let i = 0; i < data.length; i++) {\n      const series = data[i];\n      series.data = series.getFlotPairs(series.nullPointMode || this.panel.nullPointMode);\n\n      if (series.transform === 'constant') {\n        series.data = getFlotPairsConstant(series.data, this.ctrl.range!);\n      }\n\n      // if hidden remove points and disable stack\n      if (this.ctrl.hiddenSeries[series.alias]) {\n        series.data = [];\n        series.stack = false;\n      }\n    }\n  }\n\n  prepareXAxis(options: any, panel: any) {\n    switch (panel.xaxis.mode) {\n      case 'series': {\n        options.series.bars.barWidth = 0.7;\n        options.series.bars.align = 'center';\n\n        for (let i = 0; i < this.data.length; i++) {\n          const series = this.data[i];\n          series.data = [[i + 1, series.stats[panel.xaxis.values[0]]]];\n        }\n\n        this.addXSeriesAxis(options);\n        break;\n      }\n      case 'histogram': {\n        let bucketSize: number;\n\n        if (this.data.length) {\n          let histMin = _min(map(this.data, (s) => s.stats.min));\n          let histMax = _max(map(this.data, (s) => s.stats.max));\n          const ticks = panel.xaxis.buckets || this.panelWidth / 50;\n          if (panel.xaxis.min != null) {\n            const isInvalidXaxisMin = tickStep(panel.xaxis.min, histMax, ticks) <= 0;\n            histMin = isInvalidXaxisMin ? histMin : panel.xaxis.min;\n          }\n          if (panel.xaxis.max != null) {\n            const isInvalidXaxisMax = tickStep(histMin, panel.xaxis.max, ticks) <= 0;\n            histMax = isInvalidXaxisMax ? histMax : panel.xaxis.max;\n          }\n          bucketSize = tickStep(histMin, histMax, ticks);\n          options.series.bars.barWidth = bucketSize * 0.8;\n          this.data = convertToHistogramData(this.data, bucketSize, this.ctrl.hiddenSeries, histMin, histMax);\n        } else {\n          bucketSize = 0;\n        }\n\n        this.addXHistogramAxis(options, bucketSize);\n        break;\n      }\n      case 'table': {\n        options.series.bars.barWidth = 0.7;\n        options.series.bars.align = 'center';\n        this.addXTableAxis(options);\n        break;\n      }\n      default: {\n        options.series.bars.barWidth = this.getMinTimeStepOfSeries(this.data) / 1.5;\n        this.addTimeAxis(options);\n        break;\n      }\n    }\n  }\n\n  callPlot(options: any, incrementRenderCounter: boolean) {\n    try {\n      this.plot = $.plot(this.elem, this.sortedSeries, options);\n      if (this.ctrl.renderError) {\n        delete this.ctrl.error;\n      }\n    } catch (e) {\n      console.error('flotcharts error', e);\n      this.ctrl.error = e instanceof Error ? e.message : 'Render Error';\n      this.ctrl.renderError = true;\n    }\n\n    if (incrementRenderCounter) {\n      this.ctrl.renderingCompleted();\n    }\n  }\n\n  buildFlotOptions(panel: any) {\n    let gridColor = '#c8c8c8';\n    if (config.bootData.user.lightTheme === true) {\n      gridColor = '#a1a1a1';\n    }\n    const stack = panel.stack ? true : null;\n    const options: any = {\n      hooks: {\n        draw: [this.drawHook.bind(this)],\n        processOffset: [this.processOffsetHook.bind(this)],\n        processRange: [this.processRangeHook.bind(this)],\n      },\n      legend: { show: false },\n      series: {\n        stackpercent: panel.stack ? panel.percentage : false,\n        stack: panel.percentage ? null : stack,\n        lines: {\n          show: panel.lines,\n          zero: false,\n          fill: this.translateFillOption(panel.fill),\n          fillColor: this.getFillGradient(panel.fillGradient),\n          lineWidth: panel.dashes ? 0 : panel.linewidth,\n          steps: panel.steppedLine,\n        },\n        dashes: {\n          show: panel.dashes,\n          lineWidth: panel.linewidth,\n          dashLength: [panel.dashLength, panel.spaceLength],\n        },\n        bars: {\n          show: panel.bars,\n          fill: 1,\n          barWidth: 1,\n          zero: false,\n          lineWidth: 0,\n        },\n        points: {\n          show: panel.points,\n          fill: 1,\n          fillColor: false,\n          radius: panel.points ? panel.pointradius : 2,\n        },\n        shadowSize: 0,\n      },\n      yaxes: [],\n      xaxis: {},\n      grid: {\n        minBorderMargin: 0,\n        markings: [],\n        backgroundColor: null,\n        borderWidth: 0,\n        hoverable: true,\n        clickable: true,\n        color: gridColor,\n        margin: { left: 0, right: 0 },\n        labelMarginX: 0,\n        mouseActiveRadius: 30,\n      },\n      selection: {\n        mode: 'x',\n        color: '#666',\n      },\n      crosshair: {\n        mode: 'x',\n      },\n    };\n    return options;\n  }\n\n  sortSeries(series: any, panel: any) {\n    const sortBy = panel.legend.sort;\n    const sortOrder = panel.legend.sortDesc;\n    const haveSortBy = sortBy !== null && sortBy !== undefined && panel.legend[sortBy];\n    const haveSortOrder = sortOrder !== null && sortOrder !== undefined;\n    const shouldSortBy = panel.stack && haveSortBy && haveSortOrder && panel.legend.alignAsTable;\n    const sortDesc = panel.legend.sortDesc === true ? -1 : 1;\n\n    if (shouldSortBy) {\n      return _sortBy(series, (s) => s.stats[sortBy] * sortDesc);\n    } else {\n      return _sortBy(series, (s) => s.zindex);\n    }\n  }\n\n  getFillGradient(amount: number) {\n    if (!amount) {\n      return null;\n    }\n\n    return {\n      colors: [{ opacity: 0.0 }, { opacity: amount / 10 }],\n    };\n  }\n\n  translateFillOption(fill: number) {\n    if (this.panel.percentage && this.panel.stack) {\n      return fill === 0 ? 0.001 : fill / 10;\n    } else {\n      return fill / 10;\n    }\n  }\n\n  addTimeAxis(options: any) {\n    const ticks = this.panelWidth / 100;\n    const min = isUndefined(this.ctrl.range!.from) ? null : this.ctrl.range!.from.valueOf();\n    const max = isUndefined(this.ctrl.range!.to) ? null : this.ctrl.range!.to.valueOf();\n\n    options.xaxis = {\n      timezone: this.dashboard.getTimezone(),\n      show: this.panel.xaxis.show,\n      mode: 'time',\n      min: min,\n      max: max,\n      label: 'Datetime',\n      ticks: ticks,\n      timeformat: graphTimeFormat(ticks, min, max),\n      tickFormatter: graphTickFormatter,\n    };\n  }\n\n  addXSeriesAxis(options: any) {\n    const ticks = map(this.data, (series, index) => {\n      return [index + 1, series.alias];\n    });\n\n    options.xaxis = {\n      timezone: this.dashboard.getTimezone(),\n      show: this.panel.xaxis.show,\n      mode: null,\n      min: 0,\n      max: ticks.length + 1,\n      label: 'Datetime',\n      ticks: ticks,\n    };\n  }\n\n  addXHistogramAxis(options: any, bucketSize: number) {\n    let ticks: number | number[];\n    let min: number | undefined;\n    let max: number | undefined;\n\n    const defaultTicks = this.panelWidth / 50;\n\n    if (this.data.length && bucketSize) {\n      const tickValues = [];\n\n      for (const d of this.data) {\n        for (const point of d.data) {\n          tickValues[point[0]] = true;\n        }\n      }\n\n      ticks = Object.keys(tickValues).map((v) => Number(v));\n      min = _min(ticks)!;\n      max = _max(ticks)!;\n\n      // Adjust tick step\n      let tickStep = bucketSize;\n      let ticksNum = Math.floor((max - min) / tickStep);\n      while (ticksNum > defaultTicks) {\n        tickStep = tickStep * 2;\n        ticksNum = Math.ceil((max - min) / tickStep);\n      }\n\n      // Expand ticks for pretty view\n      min = Math.floor(min / tickStep) * tickStep;\n      // 1.01 is 101% - ensure we have enough space for last bar\n      max = Math.ceil((max * 1.01) / tickStep) * tickStep;\n\n      ticks = [];\n      for (let i = min; i <= max; i += tickStep) {\n        ticks.push(i);\n      }\n    } else {\n      // Set defaults if no data\n      ticks = defaultTicks / 2;\n      min = 0;\n      max = 1;\n    }\n\n    options.xaxis = {\n      timezone: this.dashboard.getTimezone(),\n      show: this.panel.xaxis.show,\n      mode: null,\n      min: min,\n      max: max,\n      label: 'Histogram',\n      ticks: ticks,\n    };\n\n    // Use 'short' format for histogram values\n    this.configureAxisMode(options.xaxis, 'short', null);\n  }\n\n  addXTableAxis(options: any) {\n    let ticks = map(this.data, (series, seriesIndex) => {\n      return map(series.datapoints, (point, pointIndex) => {\n        const tickIndex = seriesIndex * series.datapoints.length + pointIndex;\n        return [tickIndex + 1, point[1]];\n      });\n    });\n    // @ts-ignore, potential bug? is this flattenDeep?\n    ticks = flatten(ticks, true);\n\n    options.xaxis = {\n      timezone: this.dashboard.getTimezone(),\n      show: this.panel.xaxis.show,\n      mode: null,\n      min: 0,\n      max: ticks.length + 1,\n      label: 'Datetime',\n      ticks: ticks,\n    };\n  }\n\n  configureYAxisOptions(data: any, options: any) {\n    const defaults = {\n      position: 'left',\n      show: this.panel.yaxes[0].show,\n      index: 1,\n      logBase: this.panel.yaxes[0].logBase || 1,\n      min: this.parseNumber(this.panel.yaxes[0].min),\n      max: this.parseNumber(this.panel.yaxes[0].max),\n      tickDecimals: this.panel.yaxes[0].decimals,\n    };\n\n    options.yaxes.push(defaults);\n\n    if (find(data, { yaxis: 2 })) {\n      const secondY = clone(defaults);\n      secondY.index = 2;\n      secondY.show = this.panel.yaxes[1].show;\n      secondY.logBase = this.panel.yaxes[1].logBase || 1;\n      secondY.position = 'right';\n      secondY.min = this.parseNumber(this.panel.yaxes[1].min);\n      secondY.max = this.parseNumber(this.panel.yaxes[1].max);\n      secondY.tickDecimals = this.panel.yaxes[1].decimals;\n      options.yaxes.push(secondY);\n\n      this.applyLogScale(options.yaxes[1], data);\n      this.configureAxisMode(\n        options.yaxes[1],\n        this.panel.percentage && this.panel.stack ? 'percent' : this.panel.yaxes[1].format,\n        this.panel.yaxes[1].decimals\n      );\n    }\n    this.applyLogScale(options.yaxes[0], data);\n    this.configureAxisMode(\n      options.yaxes[0],\n      this.panel.percentage && this.panel.stack ? 'percent' : this.panel.yaxes[0].format,\n      this.panel.yaxes[0].decimals\n    );\n  }\n\n  parseNumber(value: any) {\n    if (value === null || typeof value === 'undefined') {\n      return null;\n    }\n\n    return toNumber(value);\n  }\n\n  applyLogScale(axis: any, data: any) {\n    if (axis.logBase === 1) {\n      return;\n    }\n\n    const minSetToZero = axis.min === 0;\n\n    if (axis.min < Number.MIN_VALUE) {\n      axis.min = null;\n    }\n    if (axis.max < Number.MIN_VALUE) {\n      axis.max = null;\n    }\n\n    let series, i;\n    let max = axis.max,\n      min = axis.min;\n\n    for (i = 0; i < data.length; i++) {\n      series = data[i];\n      if (series.yaxis === axis.index) {\n        if (!max || max < series.stats.max) {\n          max = series.stats.max;\n        }\n        if (!min || min > series.stats.logmin) {\n          min = series.stats.logmin;\n        }\n      }\n    }\n\n    axis.transform = (v: number) => {\n      return v < Number.MIN_VALUE ? null : Math.log(v) / Math.log(axis.logBase);\n    };\n    axis.inverseTransform = (v: any) => {\n      return Math.pow(axis.logBase, v);\n    };\n\n    if (!max && !min) {\n      max = axis.inverseTransform(+2);\n      min = axis.inverseTransform(-2);\n    } else if (!max) {\n      max = min * axis.inverseTransform(+4);\n    } else if (!min) {\n      min = max * axis.inverseTransform(-4);\n    }\n\n    if (axis.min) {\n      min = axis.inverseTransform(Math.ceil(axis.transform(axis.min)));\n    } else {\n      min = axis.min = axis.inverseTransform(Math.floor(axis.transform(min)));\n    }\n    if (axis.max) {\n      max = axis.inverseTransform(Math.floor(axis.transform(axis.max)));\n    } else {\n      max = axis.max = axis.inverseTransform(Math.ceil(axis.transform(max)));\n    }\n\n    if (!min || min < Number.MIN_VALUE || !max || max < Number.MIN_VALUE) {\n      return;\n    }\n\n    if (Number.isFinite(min) && Number.isFinite(max)) {\n      if (minSetToZero) {\n        axis.min = 0.1;\n        min = 1;\n      }\n\n      axis.ticks = this.generateTicksForLogScaleYAxis(min, max, axis.logBase);\n      if (minSetToZero) {\n        axis.ticks.unshift(0.1);\n      }\n      if (axis.ticks[axis.ticks.length - 1] > axis.max) {\n        axis.max = axis.ticks[axis.ticks.length - 1];\n      }\n    } else {\n      axis.ticks = [1, 2];\n      delete axis.min;\n      delete axis.max;\n    }\n  }\n\n  generateTicksForLogScaleYAxis(min: any, max: number, logBase: number) {\n    let ticks = [];\n\n    let nextTick;\n    for (nextTick = min; nextTick <= max; nextTick *= logBase) {\n      ticks.push(nextTick);\n    }\n\n    const maxNumTicks = Math.ceil(this.ctrl.height / 25);\n    const numTicks = ticks.length;\n    if (numTicks > maxNumTicks) {\n      const factor = Math.ceil(numTicks / maxNumTicks) * logBase;\n      ticks = [];\n\n      for (nextTick = min; nextTick <= max * factor; nextTick *= factor) {\n        ticks.push(nextTick);\n      }\n    }\n\n    return ticks;\n  }\n\n  configureAxisMode(axis: { tickFormatter: (val: any, axis: any) => string }, format: string, decimals?: DecimalCount) {\n    axis.tickFormatter = (val, axis) => {\n      const formatter = getValueFormat(format);\n\n      if (!formatter) {\n        throw new Error(`Unit '${format}' is not supported`);\n      }\n\n      return formattedValueToString(formatter(val, decimals));\n    };\n  }\n}\n\n/** @ngInject */\nfunction graphDirective(timeSrv: TimeSrv, popoverSrv: any, contextSrv: ContextSrv) {\n  return {\n    restrict: 'A',\n    template: '',\n    link: (scope: any, elem: JQuery) => {\n      return new GraphElement(scope, elem, timeSrv);\n    },\n  };\n}\n\ncoreModule.directive('grafanaGraph', graphDirective);\nexport { GraphElement, graphDirective };\n","import {\n  AbsoluteTimeRange,\n  DataFrame,\n  FieldType,\n  LegacyGraphHoverEventPayload,\n  reduceField,\n  ReducerID,\n} from '@grafana/data';\n\n/**\n * Find the min and max time that covers all data\n */\nexport function getDataTimeRange(frames: DataFrame[]): AbsoluteTimeRange | undefined {\n  const range: AbsoluteTimeRange = {\n    from: Number.MAX_SAFE_INTEGER,\n    to: Number.MIN_SAFE_INTEGER,\n  };\n  let found = false;\n  const reducers = [ReducerID.min, ReducerID.max];\n  for (const frame of frames) {\n    for (const field of frame.fields) {\n      if (field.type === FieldType.time) {\n        const calcs = reduceField({ field, reducers });\n        range.from = Math.min(range.from, calcs[ReducerID.min]);\n        range.to = Math.max(range.to, calcs[ReducerID.max]);\n        found = true;\n      }\n    }\n  }\n  return found ? range : undefined;\n}\n\n// Check wether event is LegacyGraphHoverEvent\nexport function isLegacyGraphHoverEvent(event: any): event is LegacyGraphHoverEventPayload {\n  return event.hasOwnProperty('pos');\n}\n","import { map, each, isUndefined } from 'lodash';\n\nimport { textUtil } from '@grafana/data';\nimport coreModule from 'app/angular/core_module';\n\n/** @ngInject */\nexport function SeriesOverridesCtrl($scope: any, $element: JQuery, popoverSrv: any) {\n  $scope.overrideMenu = [];\n  $scope.currentOverrides = [];\n  $scope.override = $scope.override || {};\n  $scope.colorPickerModel = {};\n\n  $scope.addOverrideOption = (name: string, propertyName: string, values: any) => {\n    const option = {\n      text: name,\n      propertyName: propertyName,\n      index: $scope.overrideMenu.length,\n      values,\n      submenu: map(values, (value) => {\n        return { text: String(value), value: value };\n      }),\n    };\n\n    $scope.overrideMenu.push(option);\n  };\n\n  $scope.setOverride = (item: { propertyName: string }, subItem: { value: any }) => {\n    // handle color overrides\n    if (item.propertyName === 'color') {\n      $scope.openColorSelector($scope.override['color']);\n      return;\n    }\n\n    $scope.override[item.propertyName] = subItem.value;\n\n    // automatically disable lines for this series and the fill below to series\n    // can be removed by the user if they still want lines\n    if (item.propertyName === 'fillBelowTo') {\n      $scope.override['lines'] = false;\n      $scope.ctrl.addSeriesOverride({ alias: subItem.value, lines: false });\n    }\n\n    $scope.updateCurrentOverrides();\n    $scope.ctrl.render();\n  };\n\n  $scope.colorSelected = (color: any) => {\n    $scope.override['color'] = color;\n    $scope.updateCurrentOverrides();\n    $scope.ctrl.render();\n\n    // update picker model so that the picker UI will also update\n    $scope.colorPickerModel.series.color = color;\n  };\n\n  $scope.openColorSelector = (color: any) => {\n    $scope.colorPickerModel = {\n      autoClose: true,\n      colorSelected: $scope.colorSelected,\n      series: { color },\n    };\n\n    popoverSrv.show({\n      element: $element.find('.dropdown')[0],\n      position: 'top center',\n      openOn: 'click',\n      template: '<series-color-picker-popover color=\"series.color\" onColorChange=\"colorSelected\" />',\n      classNames: 'drop-popover drop-popover--transparent',\n      model: $scope.colorPickerModel,\n      onClose: () => {\n        $scope.ctrl.render();\n      },\n    });\n  };\n\n  $scope.removeOverride = (option: { propertyName: string | number }) => {\n    delete $scope.override[option.propertyName];\n    $scope.updateCurrentOverrides();\n    $scope.ctrl.refresh();\n  };\n\n  $scope.getSeriesNames = () => {\n    return map($scope.ctrl.seriesList, (series) => {\n      return textUtil.escapeHtml(series.alias);\n    });\n  };\n\n  $scope.updateCurrentOverrides = () => {\n    $scope.currentOverrides = [];\n    each($scope.overrideMenu, (option) => {\n      const value = $scope.override[option.propertyName];\n      if (isUndefined(value)) {\n        return;\n      }\n      $scope.currentOverrides.push({\n        name: option.text,\n        propertyName: option.propertyName,\n        value: String(value),\n      });\n    });\n  };\n\n  $scope.addOverrideOption('Bars', 'bars', [true, false]);\n  $scope.addOverrideOption('Lines', 'lines', [true, false]);\n  $scope.addOverrideOption('Line fill', 'fill', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n  $scope.addOverrideOption('Fill gradient', 'fillGradient', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n  $scope.addOverrideOption('Line width', 'linewidth', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n  $scope.addOverrideOption('Null point mode', 'nullPointMode', ['connected', 'null', 'null as zero']);\n  $scope.addOverrideOption('Fill below to', 'fillBelowTo', $scope.getSeriesNames());\n  $scope.addOverrideOption('Staircase line', 'steppedLine', [true, false]);\n  $scope.addOverrideOption('Dashes', 'dashes', [true, false]);\n  $scope.addOverrideOption('Hidden Series', 'hiddenSeries', [true, false]);\n  $scope.addOverrideOption(\n    'Dash Length',\n    'dashLength',\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  );\n  $scope.addOverrideOption(\n    'Dash Space',\n    'spaceLength',\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  );\n  $scope.addOverrideOption('Points', 'points', [true, false]);\n  $scope.addOverrideOption('Points Radius', 'pointradius', [1, 2, 3, 4, 5]);\n  $scope.addOverrideOption('Stack', 'stack', [true, false, 'A', 'B', 'C', 'D']);\n  $scope.addOverrideOption('Color', 'color', ['change']);\n  $scope.addOverrideOption('Y-axis', 'yaxis', [1, 2]);\n  $scope.addOverrideOption('Z-index', 'zindex', [-3, -2, -1, 0, 1, 2, 3]);\n  $scope.addOverrideOption('Transform', 'transform', ['constant', 'negative-Y']);\n  $scope.addOverrideOption('Legend', 'legend', [true, false]);\n  $scope.addOverrideOption('Hide in tooltip', 'hideTooltip', [true, false]);\n  $scope.updateCurrentOverrides();\n}\n\ncoreModule.controller('SeriesOverridesCtrl', SeriesOverridesCtrl);\n","import tinycolor from 'tinycolor2';\n\nimport coreModule from 'app/angular/core_module';\nimport config from 'app/core/config';\nexport class ThresholdFormCtrl {\n  panelCtrl: any;\n  panel: any;\n  disabled = false;\n\n  /** @ngInject */\n  constructor(private $scope: any) {}\n\n  $onInit() {\n    this.panel = this.panelCtrl.panel;\n\n    if (this.panel.alert && !config.unifiedAlertingEnabled) {\n      this.disabled = true;\n    }\n\n    const unbindDestroy = this.$scope.$on('$destroy', () => {\n      this.panelCtrl.editingThresholds = false;\n      this.panelCtrl.render();\n      unbindDestroy();\n    });\n\n    this.panelCtrl.editingThresholds = true;\n  }\n\n  addThreshold() {\n    this.panel.thresholds.push({\n      value: undefined,\n      colorMode: 'critical',\n      op: 'gt',\n      fill: true,\n      line: true,\n      yaxis: 'left',\n    });\n    this.panelCtrl.render();\n  }\n\n  removeThreshold(index: number) {\n    this.panel.thresholds.splice(index, 1);\n    this.panelCtrl.render();\n  }\n\n  render() {\n    this.panelCtrl.render();\n  }\n\n  onFillColorChange(index: number) {\n    return (newColor: string) => {\n      this.panel.thresholds[index].fillColor = newColor;\n      this.render();\n    };\n  }\n\n  onLineColorChange(index: number) {\n    return (newColor: string) => {\n      this.panel.thresholds[index].lineColor = newColor;\n      this.render();\n    };\n  }\n\n  onThresholdTypeChange(index: number) {\n    // Because of the ng-model binding, threshold's color mode is already set here\n    if (this.panel.thresholds[index].colorMode === 'custom') {\n      this.panel.thresholds[index].fillColor = tinycolor(config.theme.palette.blue85).setAlpha(0.2).toRgbString();\n      this.panel.thresholds[index].lineColor = tinycolor(config.theme.palette.blue77).setAlpha(0.6).toRgbString();\n    }\n    this.panelCtrl.render();\n  }\n}\n\ncoreModule.directive('graphThresholdForm', () => {\n  return {\n    restrict: 'E',\n    templateUrl: 'public/app/plugins/panel/graph/thresholds_form.html',\n    controller: ThresholdFormCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: {\n      panelCtrl: '=',\n    },\n  };\n});\n","import coreModule from 'app/angular/core_module';\n\nimport { getColorModes } from './time_region_manager';\n\nexport class TimeRegionFormCtrl {\n  panelCtrl: any;\n  panel: any;\n  disabled = false;\n  colorModes: any;\n\n  /** @ngInject */\n  constructor(private $scope: any) {}\n\n  $onInit() {\n    this.panel = this.panelCtrl.panel;\n\n    const unbindDestroy = this.$scope.$on('$destroy', () => {\n      this.panelCtrl.editingTimeRegions = false;\n      this.panelCtrl.render();\n      unbindDestroy();\n    });\n\n    this.colorModes = getColorModes();\n    this.panelCtrl.editingTimeRegions = true;\n  }\n\n  render() {\n    this.panelCtrl.render();\n  }\n\n  addTimeRegion() {\n    this.panel.timeRegions.push({\n      op: 'time',\n      fromDayOfWeek: undefined,\n      from: undefined,\n      toDayOfWeek: undefined,\n      to: undefined,\n      colorMode: 'background6',\n      fill: true,\n      line: false,\n      // Default colors for new\n      fillColor: 'rgba(234, 112, 112, 0.12)',\n      lineColor: 'rgba(237, 46, 24, 0.60)',\n    });\n    this.panelCtrl.render();\n  }\n\n  removeTimeRegion(index: number) {\n    this.panel.timeRegions.splice(index, 1);\n    this.panelCtrl.render();\n  }\n\n  onFillColorChange(index: number) {\n    return (newColor: string) => {\n      this.panel.timeRegions[index].fillColor = newColor;\n      this.render();\n    };\n  }\n\n  onLineColorChange(index: number) {\n    return (newColor: string) => {\n      this.panel.timeRegions[index].lineColor = newColor;\n      this.render();\n    };\n  }\n}\n\ncoreModule.directive('graphTimeRegionForm', () => {\n  return {\n    restrict: 'E',\n    templateUrl: 'public/app/plugins/panel/graph/time_regions_form.html',\n    controller: TimeRegionFormCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: {\n      panelCtrl: '=',\n    },\n  };\n});\n","import $ from 'jquery';\nimport { isString, escape } from 'lodash';\n\nimport coreModule from 'app/angular/core_module';\nimport { ContextSrv } from 'app/core/services/context_srv';\nimport alertDef from 'app/features/alerting/state/alertDef';\nimport { DashboardSrv } from 'app/features/dashboard/services/DashboardSrv';\n\n/** @ngInject */\nexport function annotationTooltipDirective(\n  $sanitize: any,\n  dashboardSrv: DashboardSrv,\n  contextSrv: ContextSrv,\n  $compile: any\n) {\n  function sanitizeString(str: string) {\n    try {\n      return $sanitize(str);\n    } catch (err) {\n      console.log('Could not sanitize annotation string, html escaping instead');\n      return escape(str);\n    }\n  }\n\n  return {\n    restrict: 'E',\n    scope: {\n      event: '=',\n      onEdit: '&',\n    },\n    link: (scope: any, element: JQuery) => {\n      const event = scope.event;\n      let title = event.title;\n      let text = event.text;\n      const dashboard = dashboardSrv.getCurrent();\n\n      let tooltip = '<div class=\"graph-annotation\">';\n      let titleStateClass = '';\n\n      if (event.alertId !== undefined && event.newState) {\n        const stateModel = alertDef.getStateDisplayModel(event.newState);\n        titleStateClass = stateModel.stateClass;\n        title = `<i class=\"${stateModel.iconClass}\"></i> ${stateModel.text}`;\n        text = alertDef.getAlertAnnotationInfo(event);\n        if (event.text) {\n          text = text + '<br />' + event.text;\n        }\n      } else if (title) {\n        text = title + '<br />' + (isString(text) ? text : '');\n        title = '';\n      }\n\n      let header = `<div class=\"graph-annotation__header\">`;\n      if (event.login && event.avatarUrl) {\n        header += `<div class=\"graph-annotation__user\" bs-tooltip=\"'Created by ${event.login}'\"><img src=\"${event.avatarUrl}\" /></div>`;\n      }\n      header += `\n          <span class=\"graph-annotation__title ${titleStateClass}\">${sanitizeString(title)}</span>\n          <span class=\"graph-annotation__time\">${dashboard?.formatDate(event.min)}</span>\n      `;\n\n      // Show edit icon only for users with at least Editor role\n      if (event.id && dashboard?.canEditAnnotations(event.dashboardId)) {\n        header += `\n          <span class=\"pointer graph-annotation__edit-icon\" ng-click=\"onEdit()\">\n            <i class=\"fa fa-pencil-square\"></i>\n          </span>\n        `;\n      }\n\n      header += `</div>`;\n      tooltip += header;\n      tooltip += '<div class=\"graph-annotation__body\">';\n\n      if (text) {\n        tooltip += '<div ng-non-bindable>' + sanitizeString(text.replace(/\\n/g, '<br>')) + '</div>';\n      }\n\n      const tags = event.tags;\n\n      if (tags && tags.length) {\n        scope.tags = tags;\n        tooltip +=\n          '<span class=\"label label-tag small\" ng-repeat=\"tag in tags\" tag-color-from-name=\"tag\">{{tag}}</span><br/>';\n      }\n\n      tooltip += '</div>';\n      tooltip += '</div>';\n\n      const $tooltip = $(tooltip);\n      $tooltip.appendTo(element);\n\n      $compile(element.contents())(scope);\n    },\n  };\n}\n\ncoreModule.directive('annotationTooltip', annotationTooltipDirective);\n","import { cloneDeep, isNumber } from 'lodash';\n\nimport { AnnotationEvent, dateTime } from '@grafana/data';\nimport { coreModule } from 'app/angular/core_module';\nimport { MetricsPanelCtrl } from 'app/angular/panel/metrics_panel_ctrl';\n\nimport { contextSrv } from '../../../core/services/context_srv';\nimport { deleteAnnotation, saveAnnotation, updateAnnotation } from '../../../features/annotations/api';\nimport { getDashboardQueryRunner } from '../../../features/query/state/DashboardQueryRunner/DashboardQueryRunner';\n\nexport class EventEditorCtrl {\n  // @ts-ignore initialized through Angular not constructor\n  panelCtrl: MetricsPanelCtrl;\n  // @ts-ignore initialized through Angular not constructor\n  event: AnnotationEvent;\n  timeRange?: { from: number; to: number };\n  form: any;\n  close: any;\n  timeFormated?: string;\n\n  /** @ngInject */\n  constructor() {}\n\n  $onInit() {\n    this.event.panelId = this.panelCtrl.panel.id; // set correct id if in panel edit\n    this.event.dashboardUID = this.panelCtrl.dashboard.uid;\n\n    // Annotations query returns time as Unix timestamp in milliseconds\n    this.event.time = tryEpochToMoment(this.event.time);\n    if (this.event.isRegion) {\n      this.event.timeEnd = tryEpochToMoment(this.event.timeEnd);\n    }\n\n    this.timeFormated = this.panelCtrl.dashboard.formatDate(this.event.time!);\n  }\n\n  canDelete(): boolean {\n    if (contextSrv.accessControlEnabled()) {\n      if (this.event.source.type === 'dashboard') {\n        return !!this.panelCtrl.dashboard.meta.annotationsPermissions?.dashboard.canDelete;\n      }\n      return !!this.panelCtrl.dashboard.meta.annotationsPermissions?.organization.canDelete;\n    }\n    return true;\n  }\n\n  async save(): Promise<void> {\n    if (!this.form.$valid) {\n      return;\n    }\n\n    const saveModel = cloneDeep(this.event);\n    saveModel.time = saveModel.time!.valueOf();\n    saveModel.timeEnd = 0;\n\n    if (saveModel.isRegion) {\n      saveModel.timeEnd = this.event.timeEnd!.valueOf();\n\n      if (saveModel.timeEnd < saveModel.time) {\n        console.log('invalid time');\n        return;\n      }\n    }\n\n    let crudFunction = saveAnnotation;\n    if (saveModel.id) {\n      crudFunction = updateAnnotation;\n    }\n\n    try {\n      await crudFunction(saveModel);\n    } catch (err) {\n      console.log(err);\n    } finally {\n      this.close();\n      getDashboardQueryRunner().run({ dashboard: this.panelCtrl.dashboard, range: this.panelCtrl.range });\n    }\n  }\n\n  async delete(): Promise<void> {\n    try {\n      await deleteAnnotation(this.event);\n    } catch (err) {\n      console.log(err);\n    } finally {\n      this.close();\n      getDashboardQueryRunner().run({ dashboard: this.panelCtrl.dashboard, range: this.panelCtrl.range });\n    }\n  }\n}\n\nfunction tryEpochToMoment(timestamp: any) {\n  if (timestamp && isNumber(timestamp)) {\n    const epoch = Number(timestamp);\n    return dateTime(epoch);\n  } else {\n    return timestamp;\n  }\n}\n\nexport function eventEditor() {\n  return {\n    restrict: 'E',\n    controller: EventEditorCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    templateUrl: 'public/app/features/annotations/partials/event_editor.html',\n    scope: {\n      panelCtrl: '=',\n      event: '=',\n      close: '&',\n    },\n  };\n}\n\ncoreModule.directive('eventEditor', eventEditor);\n","import { FlotDataPoint } from '@grafana/data';\nimport { MenuItemProps } from '@grafana/ui';\n\nexport class GraphContextMenuCtrl {\n  private source?: FlotDataPoint | null;\n  private scope?: any;\n  menuItemsSupplier?: () => MenuItemProps[];\n  scrollContextElement: HTMLElement | null = null;\n  position: {\n    x: number;\n    y: number;\n  } = { x: 0, y: 0 };\n\n  isVisible: boolean;\n\n  constructor($scope: any) {\n    this.isVisible = false;\n    this.scope = $scope;\n  }\n\n  onClose = () => {\n    if (this.scrollContextElement) {\n      this.scrollContextElement.removeEventListener('scroll', this.onClose);\n    }\n\n    this.scope.$apply(() => {\n      this.isVisible = false;\n    });\n  };\n\n  toggleMenu = (event?: { pageX: number; pageY: number }) => {\n    this.isVisible = !this.isVisible;\n    if (this.isVisible && this.scrollContextElement) {\n      this.scrollContextElement.addEventListener('scroll', this.onClose);\n    }\n\n    if (this.source) {\n      this.position = {\n        x: this.source.pageX,\n        y: this.source.pageY,\n      };\n    } else {\n      this.position = {\n        x: event ? event.pageX : 0,\n        y: event ? event.pageY : 0,\n      };\n    }\n  };\n\n  // Sets element which is considered as a scroll context of given context menu.\n  // Having access to this element allows scroll event attachement for menu to be closed when user scrolls\n  setScrollContextElement = (el: HTMLElement | null) => {\n    this.scrollContextElement = el;\n  };\n\n  setSource = (source: FlotDataPoint | null) => {\n    this.source = source;\n  };\n\n  getSource = () => {\n    return this.source;\n  };\n\n  setMenuItemsSupplier = (menuItemsSupplier: () => MenuItemProps[]) => {\n    this.menuItemsSupplier = menuItemsSupplier;\n  };\n}\n","import { selectors } from '@grafana/e2e-selectors';\n\nimport { GraphCtrl } from './module';\n\nexport class AxesEditorCtrl {\n  panel: any;\n  panelCtrl: GraphCtrl;\n  logScales: any;\n  xAxisModes: any;\n  xAxisStatOptions: any;\n  xNameSegment: any;\n  selectors: typeof selectors.components.Panels.Visualization.Graph.VisualizationTab;\n\n  /** @ngInject */\n  constructor(private $scope: any) {\n    this.panelCtrl = $scope.ctrl as GraphCtrl;\n    this.panel = this.panelCtrl.panel;\n    this.$scope.ctrl = this;\n\n    this.logScales = {\n      linear: 1,\n      'log (base 2)': 2,\n      'log (base 10)': 10,\n      'log (base 32)': 32,\n      'log (base 1024)': 1024,\n    };\n\n    this.xAxisModes = {\n      Time: 'time',\n      Series: 'series',\n      Histogram: 'histogram',\n      // 'Data field': 'field',\n    };\n\n    this.xAxisStatOptions = [\n      { text: 'Avg', value: 'avg' },\n      { text: 'Min', value: 'min' },\n      { text: 'Max', value: 'max' },\n      { text: 'Total', value: 'total' },\n      { text: 'Count', value: 'count' },\n      { text: 'Current', value: 'current' },\n    ];\n\n    if (this.panel.xaxis.mode === 'custom') {\n      if (!this.panel.xaxis.name) {\n        this.panel.xaxis.name = 'specify field';\n      }\n    }\n    this.selectors = selectors.components.Panels.Visualization.Graph.VisualizationTab;\n  }\n\n  setUnitFormat(axis: { format: any }) {\n    return (unit: string) => {\n      axis.format = unit;\n      // if already set via field config we clear that\n      if (this.panel.fieldConfig.defaults.unit) {\n        this.panel.fieldConfig.defaults.unit = undefined;\n        this.panelCtrl.refresh();\n      } else {\n        this.panelCtrl.render();\n      }\n    };\n  }\n\n  render() {\n    this.panelCtrl.render();\n  }\n\n  xAxisModeChanged() {\n    this.panelCtrl.processor.setPanelDefaultsForNewXAxisMode();\n    this.panelCtrl.onDataFramesReceived(this.panelCtrl.dataList);\n  }\n\n  xAxisValueChanged() {\n    this.panelCtrl.onDataFramesReceived(this.panelCtrl.dataList);\n  }\n}\n\n/** @ngInject */\nexport function axesEditorComponent() {\n  'use strict';\n  return {\n    restrict: 'E',\n    scope: true,\n    templateUrl: 'public/app/plugins/panel/graph/axes_editor.html',\n    controller: AxesEditorCtrl,\n  };\n}\n","import './graph';\nimport './series_overrides_ctrl';\nimport './thresholds_form';\nimport './time_regions_form';\nimport './annotation_tooltip';\nimport './event_editor';\n\nimport { t } from '@lingui/macro';\nimport { auto } from 'angular';\nimport { defaults, find, without } from 'lodash';\n\nimport { DataFrame, FieldConfigProperty, PanelEvents, PanelPlugin } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { MetricsPanelCtrl } from 'app/angular/panel/metrics_panel_ctrl';\nimport config from 'app/core/config';\nimport TimeSeries from 'app/core/time_series2';\nimport { ThresholdMapper } from 'app/features/alerting/state/ThresholdMapper';\nimport { changePanelPlugin } from 'app/features/panel/state/actions';\nimport { dispatch } from 'app/store/store';\n\nimport { appEvents } from '../../../core/core';\nimport { loadSnapshotData } from '../../../features/dashboard/utils/loadSnapshotData';\nimport { annotationsFromDataFrames } from '../../../features/query/state/DashboardQueryRunner/utils';\nimport { ZoomOutEvent } from '../../../types/events';\n\nimport { GraphContextMenuCtrl } from './GraphContextMenuCtrl';\nimport { graphPanelMigrationHandler } from './GraphMigrations';\nimport { axesEditorComponent } from './axes_editor';\nimport { DataProcessor } from './data_processor';\nimport template from './template';\nimport { DataWarning, GraphFieldConfig, GraphPanelOptions } from './types';\nimport { getDataTimeRange } from './utils';\n\nexport class GraphCtrl extends MetricsPanelCtrl {\n  static template = template;\n\n  renderError = false;\n  hiddenSeries: any = {};\n  hiddenSeriesTainted = false;\n  seriesList: TimeSeries[] = [];\n  dataList: DataFrame[] = [];\n  annotations: any = [];\n  alertState: any;\n\n  dataWarning?: DataWarning;\n  colors: any = [];\n  subTabIndex = 0;\n  processor: DataProcessor;\n  contextMenuCtrl: GraphContextMenuCtrl;\n\n  panelDefaults: any = {\n    // datasource name, null = default datasource\n    datasource: null,\n    // sets client side (flot) or native graphite png renderer (png)\n    renderer: 'flot',\n    yaxes: [\n      {\n        label: null,\n        show: true,\n        logBase: 1,\n        min: null,\n        max: null,\n        format: 'short',\n      },\n      {\n        label: null,\n        show: true,\n        logBase: 1,\n        min: null,\n        max: null,\n        format: 'short',\n      },\n    ],\n    xaxis: {\n      show: true,\n      mode: 'time',\n      name: null,\n      values: [],\n      buckets: null,\n    },\n    yaxis: {\n      align: false,\n      alignLevel: null,\n    },\n    // show/hide lines\n    lines: true,\n    // fill factor\n    fill: 1,\n    // fill gradient\n    fillGradient: 0,\n    // line width in pixels\n    linewidth: 1,\n    // show/hide dashed line\n    dashes: false,\n    // show/hide line\n    hiddenSeries: false,\n    // length of a dash\n    dashLength: 10,\n    // length of space between two dashes\n    spaceLength: 10,\n    // show hide points\n    points: false,\n    // point radius in pixels\n    pointradius: 2,\n    // show hide bars\n    bars: false,\n    // enable/disable stacking\n    stack: false,\n    // stack percentage mode\n    percentage: false,\n    // legend options\n    legend: {\n      show: true, // disable/enable legend\n      values: false, // disable/enable legend values\n      min: false,\n      max: false,\n      current: false,\n      total: false,\n      avg: false,\n    },\n    // how null points should be handled\n    nullPointMode: 'null',\n    // staircase line mode\n    steppedLine: false,\n    // tooltip options\n    tooltip: {\n      value_type: 'individual',\n      shared: true,\n      sort: 0,\n    },\n    // time overrides\n    timeFrom: null,\n    timeShift: null,\n    // metric queries\n    targets: [{}],\n    // series color overrides\n    aliasColors: {},\n    // other style overrides\n    seriesOverrides: [],\n    thresholds: [],\n    timeRegions: [],\n    options: {\n      // show/hide alert threshold lines and fill\n      alertThreshold: true,\n    },\n  };\n\n  /** @ngInject */\n  constructor($scope: any, $injector: auto.IInjectorService) {\n    super($scope, $injector);\n\n    defaults(this.panel, this.panelDefaults);\n    defaults(this.panel.tooltip, this.panelDefaults.tooltip);\n    defaults(this.panel.legend, this.panelDefaults.legend);\n    defaults(this.panel.xaxis, this.panelDefaults.xaxis);\n    defaults(this.panel.options, this.panelDefaults.options);\n\n    this.useDataFrames = true;\n    this.processor = new DataProcessor(this.panel);\n    this.contextMenuCtrl = new GraphContextMenuCtrl($scope);\n\n    this.events.on(PanelEvents.render, this.onRender.bind(this));\n    this.events.on(PanelEvents.dataFramesReceived, this.onDataFramesReceived.bind(this));\n    this.events.on(PanelEvents.dataSnapshotLoad, this.onDataSnapshotLoad.bind(this));\n    this.events.on(PanelEvents.editModeInitialized, this.onInitEditMode.bind(this));\n    this.events.on(PanelEvents.initPanelActions, this.onInitPanelActions.bind(this));\n\n    // set axes format from field config\n    const fieldConfigUnit = this.panel.fieldConfig.defaults.unit;\n    if (fieldConfigUnit) {\n      this.panel.yaxes[0].format = fieldConfigUnit;\n    }\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('Display', 'public/app/plugins/panel/graph/tab_display.html');\n    this.addEditorTab('Series overrides', 'public/app/plugins/panel/graph/tab_series_overrides.html');\n    this.addEditorTab('Axes', axesEditorComponent);\n    this.addEditorTab('Legend', 'public/app/plugins/panel/graph/tab_legend.html');\n    this.addEditorTab('Thresholds', 'public/app/plugins/panel/graph/tab_thresholds.html');\n    this.addEditorTab('Time regions', 'public/app/plugins/panel/graph/tab_time_regions.html');\n    this.subTabIndex = 0;\n    this.hiddenSeriesTainted = false;\n  }\n\n  onInitPanelActions(actions: any[]) {\n    const toggleTextTranslation = t({\n      id: 'panel.header-menu.more-toggle',\n      message: `Toggle legend`,\n    });\n    actions.push({ text: toggleTextTranslation, click: 'ctrl.toggleLegend()', shortcut: 'p l' });\n  }\n\n  zoomOut(evt: any) {\n    appEvents.publish(new ZoomOutEvent({ scale: 2 }));\n  }\n\n  onDataSnapshotLoad(snapshotData: any) {\n    const { series, annotations } = loadSnapshotData(this.panel, this.dashboard);\n    this.panelData!.annotations = annotations;\n    this.onDataFramesReceived(series);\n  }\n\n  onDataFramesReceived(data: DataFrame[]) {\n    this.dataList = data;\n    this.seriesList = this.processor.getSeriesList({\n      dataList: this.dataList,\n      range: this.range,\n    });\n\n    this.dataWarning = this.getDataWarning();\n\n    this.alertState = undefined;\n    (this.seriesList as any).alertState = undefined;\n    if (this.panelData!.alertState) {\n      this.alertState = this.panelData!.alertState;\n      (this.seriesList as any).alertState = this.alertState.state;\n    }\n\n    this.annotations = [];\n    if (this.panelData!.annotations?.length) {\n      this.annotations = annotationsFromDataFrames(this.panelData!.annotations);\n    }\n\n    this.loading = false;\n    this.render(this.seriesList);\n  }\n\n  getDataWarning(): DataWarning | undefined {\n    const datapointsCount = this.seriesList.reduce((prev, series) => {\n      return prev + series.datapoints.length;\n    }, 0);\n\n    if (datapointsCount === 0) {\n      if (this.dataList) {\n        for (const frame of this.dataList) {\n          if (frame.length && frame.fields?.length) {\n            return {\n              title: 'Unable to graph data',\n              tip: 'Data exists, but is not timeseries',\n              actionText: 'Switch to table view',\n              action: () => {\n                dispatch(changePanelPlugin({ panel: this.panel, pluginId: 'table' }));\n              },\n            };\n          }\n        }\n      }\n\n      return {\n        title: 'No data',\n        tip: 'No data returned from query',\n      };\n    }\n\n    // If any data is in range, do not return an error\n    for (const series of this.seriesList) {\n      if (!series.isOutsideRange) {\n        return undefined;\n      }\n    }\n\n    // All data is outside the time range\n    const dataWarning: DataWarning = {\n      title: 'Data outside time range',\n      tip: 'Can be caused by timezone mismatch or missing time filter in query',\n    };\n\n    const range = getDataTimeRange(this.dataList);\n\n    if (range) {\n      dataWarning.actionText = 'Zoom to data';\n      dataWarning.action = () => {\n        locationService.partial({\n          from: range.from,\n          to: range.to,\n        });\n      };\n    }\n\n    return dataWarning;\n  }\n\n  onRender() {\n    if (!this.seriesList) {\n      return;\n    }\n\n    ThresholdMapper.alertToGraphThresholds(this.panel);\n\n    for (const series of this.seriesList) {\n      series.applySeriesOverrides(this.panel.seriesOverrides);\n\n      // Always use the configured field unit\n      if (series.unit) {\n        this.panel.yaxes[series.yaxis - 1].format = series.unit;\n      }\n      if (this.hiddenSeriesTainted === false && series.hiddenSeries === true) {\n        this.hiddenSeries[series.alias] = true;\n      }\n    }\n  }\n\n  onColorChange = (series: any, color: string) => {\n    series.setColor(config.theme.visualization.getColorByName(color));\n    this.panel.aliasColors[series.alias] = color;\n    this.render();\n  };\n\n  onToggleSeries = (hiddenSeries: any) => {\n    this.hiddenSeriesTainted = true;\n    this.hiddenSeries = hiddenSeries;\n    this.render();\n  };\n\n  onToggleSort = (sortBy: any, sortDesc: any) => {\n    this.panel.legend.sort = sortBy;\n    this.panel.legend.sortDesc = sortDesc;\n    this.render();\n  };\n\n  onToggleAxis = (info: { alias: any; yaxis: any }) => {\n    let override: any = find(this.panel.seriesOverrides, { alias: info.alias });\n    if (!override) {\n      override = { alias: info.alias };\n      this.panel.seriesOverrides.push(override);\n    }\n    override.yaxis = info.yaxis;\n    this.render();\n  };\n\n  addSeriesOverride(override: any) {\n    this.panel.seriesOverrides.push(override || {});\n  }\n\n  removeSeriesOverride(override: any) {\n    this.panel.seriesOverrides = without(this.panel.seriesOverrides, override);\n    this.render();\n  }\n\n  toggleLegend() {\n    this.panel.legend.show = !this.panel.legend.show;\n    this.render();\n  }\n\n  legendValuesOptionChanged() {\n    const legend = this.panel.legend;\n    legend.values = legend.min || legend.max || legend.avg || legend.current || legend.total;\n    this.render();\n  }\n\n  onContextMenuClose = () => {\n    this.contextMenuCtrl.toggleMenu();\n  };\n\n  getTimeZone = () => this.dashboard.getTimezone();\n\n  getDataFrameByRefId = (refId: string) => {\n    return this.dataList.filter((dataFrame) => dataFrame.refId === refId)[0];\n  };\n\n  migrateToReact() {\n    this.onPluginTypeChange(config.panels['timeseries']);\n  }\n}\n\n// Use new react style configuration\nexport const plugin = new PanelPlugin<GraphPanelOptions, GraphFieldConfig>(null)\n  .useFieldConfig({\n    disableStandardOptions: [\n      FieldConfigProperty.NoValue,\n      FieldConfigProperty.Thresholds,\n      FieldConfigProperty.Max,\n      FieldConfigProperty.Min,\n      FieldConfigProperty.Decimals,\n      FieldConfigProperty.Color,\n      FieldConfigProperty.Mappings,\n    ],\n  })\n  .setDataSupport({ annotations: true, alertStates: true })\n  .setMigrationHandler(graphPanelMigrationHandler);\n\n// Use the angular ctrt rather than a react one\nplugin.angularPanelCtrl = GraphCtrl;\n","const template = `\n<div class=\"graph-panel\" ng-class=\"{'graph-panel--legend-right': ctrl.panel.legend.rightSide}\">\n  <div class=\"graph-panel__chart\" grafana-graph ng-dblclick=\"ctrl.zoomOut()\">\n  </div>\n\n  <div class=\"graph-legend\">\n    <div class=\"graph-legend-content\" graph-legend></div>\n  </div>\n  <div ng-if=\"ctrl.contextMenuCtrl.isVisible\">\n    <graph-context-menu\n      itemsGroup=\"ctrl.contextMenuCtrl.menuItemsSupplier()\"\n      on-close=\"ctrl.onContextMenuClose\"\n      getContextMenuSource=\"ctrl.contextMenuCtrl.getSource\"\n      timeZone=\"ctrl.getTimeZone()\"\n      x=\"ctrl.contextMenuCtrl.position.x\"\n      y=\"ctrl.contextMenuCtrl.position.y\"\n    ></graph-context-menu>\n  </div>\n</div>\n`;\n\nexport default template;\n","import { PanelModel, FieldConfigSource, DataLink } from '@grafana/data';\n\n/**\n * Called when upgrading from a previously saved versoin\n */\nexport const graphPanelMigrationHandler = (panel: PanelModel<any>): Partial<any> => {\n  const fieldConfig: FieldConfigSource = panel.fieldConfig ?? {\n    defaults: {},\n    overrides: [],\n  };\n\n  const options = panel.options || {};\n\n  // Move <7.1 dataLinks to the field section\n  if (options.dataLinks) {\n    fieldConfig.defaults.links = options.dataLinks as DataLink[];\n    delete options.dataLinks;\n  }\n\n  // Mutate the original panel state (only necessary because it is angular)\n  panel.options = options;\n  panel.fieldConfig = fieldConfig;\n  return options;\n};\n"],"names":["hiddenReducerTypes","ThresholdMapper","panel","alert","config","i","conditions","length","condition","type","evaluator","thresholds","visible","indexOf","reducer","value","params","push","op","value1","value2","t","fill","options","alertThreshold","line","colorMode","loadSnapshotData","dashboard","data","getProcessedDataFrames","snapshotData","worker","SnapshotWorker","range","getDefaultTimeRange","annotationEvents","canWork","getAnnotationsInSnapshot","id","annotations","ArrayDataFrame","timeRange","applyPanelTimeOverrides","getTimeSrv","state","LoadingState","series","applyFieldOverrides","fieldConfig","defaults","overrides","replaceVariables","fieldConfigRegistry","plugin","theme","timeZone","getTimezone","getFieldLinksSupplier","links","field","getLinks","scopedVars","view","dataFrame","name","refId","text","undefined","colIndex","fields","labels","rowIndex","timeField","getTimeField","raw","values","get","numeric","display","formattedValueToString","time","getFieldDisplayValuesProxy","frame","calc","console","log","replace","vars","fmt","finalVars","map","link","getLinkSrv","getDataLinkUIModel","getPanelLinksSupplier","createAnnotationToolip","element","event","plot","injector","getLegacyAngularInjector","content","document","createElement","innerHTML","invoke","$compile","$rootScope","eventManager","getOptions","events","manager","tmpScope","$new","onEdit","editEvent","$digest","$destroy","drop","Drop","target","position","classes","openOn","hoverCloseDelay","tetherOptions","constraints","to","pin","attachment","open","on","setTimeout","destroy","markerElementToAttachTo","createEditPopover","editorOpen","editorOpened","scope","panelCtrl","close","editorClosed","DrawableEvent","constructor","object","drawFunc","clearFunc","moveFunc","left","top","width","height","this","_object","_drawFunc","_clearFunc","_moveFunc","_position","_width","_height","draw","clear","getObject","moveTo","VisualEvent","drawableEvent","_options","_drawableEvent","_hidden","visual","getParent","_parent","isHidden","hide","unhide","EventMarkers","_events","_types","_plot","eventsEnabled","getEvents","setTypes","types","setupEvents","parts","partition","regions","$","index","ve","_buildDiv","vre","_buildRegDiv","sort","a","b","ao","bo","min","drawEvents","insidePlot","_insidePlot","timeEnd","overlapPlot","_overlapPlot","updateEvents","o","getPlotOffset","xaxis","getXAxes","p2c","_clearEvents","val","that","container","getPlaceholder","color","markerSize","markerShow","lineStyle","lineWidth","markerTooltip","eventTypeId","eventType","toLowerCase","topOffset","eventSectionHeight","css","opacity","appendTo","marker","Math","round","toUpperCase","mouseenter","editModel","mouseleave","clearSelection","cursor","hover","obj","show","remove","regionWidth","timeFrom","timeTo","max","right","xmin","xmax","regionStart","each","region","x","xc","point0","point1","coord0","coord1","coordMin","coordMax","init","eventMarkers","hideEvents","showEvents","setEvents","hooks","processOptions","version","LEGEND_STATS","LegendItem","PureComponent","props","super","e","onLabelClick","yaxis","info","alias","setState","onToggleAxis","onColorChange","forceUpdate","renderLegendValues","asTable","legendValueItems","valueName","valueFormatted","formatValue","stats","LegendValue","onValueClick","render","hidden","seriesOptionClasses","classNames","valueItems","seriesLabel","LegendSeriesLabel","label","className","LegendSeriesIcon","title","onClick","selectors","SeriesColorPicker","onChange","enableNamedColors","ref","showColorPicker","hideColorPicker","SeriesIcon","onMouseLeave","GraphLegend","onToggleSeries","hiddenSeries","ctrlKey","metaKey","shiftKey","toggleSeriesExclusiveMode","sortLegend","seriesList","sortBy","alignAsTable","_sortBy","Infinity","sortDesc","reverse","every","forEach","optionalClass","rightSide","sideWidth","hideEmpty","hideZero","avg","current","total","seriesValuesProps","seriesHideProps","sortProps","filter","hideFromLegend","legendClass","legendStyle","minWidth","legendProps","onToggleSort","style","LegendTable","LegendSeriesList","stat","textAlign","statName","LegendTableHeaderItem","Icon","Legend","CustomScrollbar","hideHorizontalTrack","alignYLevel","yAxes","level","isNaN","axis","checkCorrectAxes","yLeft","yRight","moveLevelToZero","wideFactor","expandStuckValues","zero","oneSide","checkOneSide","checkOppositeSides","rate","checkTwoCross","rateLeft","rateRight","absLeftMin","abs","absLeftMax","absRightMin","absRightMax","upLeft","downLeft","upRight","downRight","getRate","restoreLevelFromZero","axes","EventManager","updateTime","dashboardUID","uid","panelId","from","isRegion","elem","addFlotEvents","flotOptions","$__alerting","ALERTING_COLOR","$__ok","OK_COLOR","$__no_data","NO_DATA_COLOR","$__pending","PENDING_COLOR","$__editing","DEFAULT_ANNOTATION_COLOR","item","newState","getRegions","markings","grid","defaultColor","fillColor","source","colorString","alpha","tinycolor","isValid","setAlpha","toRgbString","addAlphaToRGB","REGION_FILL_ALPHA","addRegionMarking","levels","keys","GraphTooltip","getSeriesFn","self","ctrl","hoverEvent","LegacyGraphHoverEvent","pos","point","$tooltip","findHoverIndexFromDataPoints","posX","last","ps","datapoints","pointsize","initial","len","points","j","lines","steps","findHoverIndexFromData","middle","lower","upper","floor","renderAndShow","absoluteTime","innerHtml","xMode","html","place_tt","pageX","pageY","offset","getMultiSeriesPlotHoverInfo","hoverIndex","hoverDistance","pointTime","minDistance","minTime","results","lastValue","legend","allIsNull","allIsZero","hideTooltip","stack","tooltip","value_type","n","aliasEscaped","distance","concat","shared","detach","unhighlight","publish","LegacyGraphHoverClearEvent","DataHoverClearEvent","bind","panelInEdit","panelRelY","payload","appEvents","CoreEvents","clearCrosshair","plotData","getData","mode","group","hoverInfo","seriesHtml","tooltipFormat","allSeriesMode","pointOffset","Number","scrollTop","window","innerHeight","setCrosshair","sharedCrosshairModeOnly","hasMsResolution","systemDateFormats","seriesHoverInfo","formatDate","highlightClass","seriesIndex","textUtil","highlight","datapoint","convertToHistogramData","bucketSize","dataList","getSeriesValues","histogram","minBound","getBucketBound","maxBound","domain","histGenerator","bin","x0","convertValuesToHistogram","ThresholdManager","getHandleHtml","handleIndex","model","valueStr","stateClass","initDragging","evt","handleElem","currentTarget","parents","posTop","lastY","dragging","clientY","diff","addEventListener","stopped","graphValue","c2p","y","parseInt","toFixed","off","removeEventListener","$scope","$apply","emit","threshold","cleanUp","placeholder","find","needsCleanup","renderHandle","defaultHandleTopPos","handleTopPos","isNumber","valueCanvasPos","append","toggleClass","shouldDrawHandles","hasSecondYAxis","editingThresholds","prepare","thresholdMargin","addFlotOptions","other","gtLimit","ltLimit","limit","lineColor","y2axis","calculateTimesWithin","cfg","tRange","fromDayOfWeek","toDayOfWeek","timeRegion","hRange","parseTimeRange","dayOfWeek","h","m","s","fromStart","dateTime","set","add","unix","isoWeekday","fromEnd","hour","valueOf","str","result","match","exec","colorModes","gray","themeDependent","darkColor","lightColor","red","green","blue","yellow","custom","getColor","Object","visualization","getColorByName","isLight","TimeRegionManager","timeRegions","utc","tr","timeRegionColor","r","LegendWithThemeProvider","provideTheme","GraphElement","timeSrv","flotPosition","linksSupplier","items","canAddAnnotations","ariaLabel","icon","dataLinks","url","href","contextMenu","contextMenuCtrl","panelWidth","thresholdManager","timeRegionManager","sortedSeries","PanelEvents","onPanelTeardown","onRender","onGraphHover","onGraphHoverClear","DataHoverEvent","onPlotSelected","onPlotClick","parent","legendElem","renderData","buildFlotPairs","graphHeight","updateLegendValues","hasChildNodes","ReactDOM","renderPanel","legendOptions","valueOptions","legendReactElem","React","sharedTooltipModeEnabled","hasOwnProperty","otherPanelInFullscreenMode","handler","ranges","setTime","toUtc","scrollContextElement","closest","contextMenuSourceItem","x1","yAxisConfig","yaxes","dataFrameIndex","fieldIndex","dataIndex","getDataIndexWithNullValuesCorrection","hasLinksValue","hasLinks","decimals","fieldDisplay","getDisplayProcessor","FieldType","DataFrameView","setScrollContextElement","setSource","setMenuItemsSupplier","getContextMenuItemsSupplier","toggleMenu","Array","isArray","ts","correctIndex","toArray","findIndex","shouldAbortRender","drawHook","dataWarning","msg","action","actionText","click","processOffsetHook","gridMargin","getYAxes","panelOptions","processRangeHook","align","alignLevel","parseFloat","getMinTimeStepOfSeries","MAX_VALUE","timeStep","bars","dashes","buildFlotOptions","prepareXAxis","configureYAxisOptions","sortSeries","callPlot","getFlotPairs","nullPointMode","transform","getFlotPairsConstant","barWidth","addXSeriesAxis","histMin","_min","histMax","_max","ticks","buckets","tickStep","addXHistogramAxis","addXTableAxis","addTimeAxis","incrementRenderCounter","renderError","error","Error","message","renderingCompleted","gridColor","processOffset","processRange","stackpercent","percentage","translateFillOption","getFillGradient","fillGradient","linewidth","steppedLine","dashLength","spaceLength","radius","pointradius","shadowSize","minBorderMargin","backgroundColor","borderWidth","hoverable","clickable","margin","labelMarginX","mouseActiveRadius","selection","crosshair","sortOrder","haveSortBy","haveSortOrder","shouldSortBy","zindex","amount","colors","isUndefined","timezone","timeformat","graphTimeFormat","tickFormatter","graphTickFormatter","defaultTicks","tickValues","d","v","ticksNum","ceil","configureAxisMode","pointIndex","flatten","logBase","parseNumber","tickDecimals","secondY","clone","applyLogScale","format","toNumber","minSetToZero","MIN_VALUE","logmin","inverseTransform","pow","isFinite","generateTicksForLogScaleYAxis","unshift","nextTick","maxNumTicks","numTicks","factor","formatter","getValueFormat","graphDirective","popoverSrv","contextSrv","restrict","template","SeriesOverridesCtrl","$element","overrideMenu","currentOverrides","override","colorPickerModel","addOverrideOption","propertyName","option","submenu","String","setOverride","subItem","addSeriesOverride","updateCurrentOverrides","openColorSelector","colorSelected","autoClose","onClose","removeOverride","refresh","getSeriesNames","coreModule","ThresholdFormCtrl","$onInit","disabled","unbindDestroy","$on","addThreshold","removeThreshold","splice","onFillColorChange","newColor","onLineColorChange","onThresholdTypeChange","templateUrl","controller","bindToController","controllerAs","TimeRegionFormCtrl","editingTimeRegions","key","addTimeRegion","removeTimeRegion","annotationTooltipDirective","$sanitize","dashboardSrv","sanitizeString","err","escape","getCurrent","titleStateClass","alertId","stateModel","alertDef","iconClass","isString","header","login","avatarUrl","canEditAnnotations","dashboardId","tags","contents","EventEditorCtrl","tryEpochToMoment","timeFormated","canDelete","meta","annotationsPermissions","organization","form","$valid","saveModel","cloneDeep","crudFunction","saveAnnotation","updateAnnotation","getDashboardQueryRunner","run","deleteAnnotation","timestamp","epoch","GraphContextMenuCtrl","isVisible","el","menuItemsSupplier","AxesEditorCtrl","logScales","linear","xAxisModes","Time","Series","Histogram","xAxisStatOptions","setUnitFormat","unit","xAxisModeChanged","processor","setPanelDefaultsForNewXAxisMode","onDataFramesReceived","xAxisValueChanged","axesEditorComponent","GraphCtrl","MetricsPanelCtrl","$injector","datasource","renderer","timeShift","targets","aliasColors","seriesOverrides","setColor","hiddenSeriesTainted","panelDefaults","useDataFrames","DataProcessor","onDataSnapshotLoad","onInitEditMode","onInitPanelActions","fieldConfigUnit","addEditorTab","subTabIndex","actions","toggleTextTranslation","shortcut","zoomOut","ZoomOutEvent","scale","panelData","getSeriesList","getDataWarning","alertState","annotationsFromDataFrames","loading","reduce","prev","tip","dispatch","changePanelPlugin","pluginId","isOutsideRange","frames","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","found","reducers","ReducerID","calcs","reduceField","getDataTimeRange","locationService","applySeriesOverrides","removeSeriesOverride","without","toggleLegend","legendValuesOptionChanged","migrateToReact","onPluginTypeChange","PanelPlugin","useFieldConfig","disableStandardOptions","FieldConfigProperty","setDataSupport","alertStates","setMigrationHandler","angularPanelCtrl"],"sourceRoot":""}