{"version":3,"file":"SignupInvited.2db1a55ece18726c71ec.js","mappings":"6IAGO,MAAMA,EACX,wIAEK,SAASC,GAAU,CACxB,MAAMC,EAAS,iBAAoB,YACnC,MAAO,CAAC,EAAEA,GAAUA,EAAS,EAC/B,CAEO,MAAMC,EAAiB,IAAMF,EAAQ,GAAK,oC,qMCQjD,MAAMG,EAAW,CACf,KAAM,CACJ,KAAM,UACN,KAAM,SACN,SAAU,gCACV,YAAa,CAAC,CAAE,MAAO,QAAS,IAAK,OAAQ,CAAC,CAChD,EACA,KAAM,CACJ,KAAM,EACR,CACF,EAIaC,EAAoB,CAAC,CAAE,MAAAC,CAAM,IAAa,CACrD,MAAMC,EAAOD,EAAM,OAAO,KACpB,CAACE,EAAeC,CAAgB,KAAI,YAAoB,EACxD,CAACC,EAAUC,CAAW,KAAI,YAAiB,EAC3C,CAACC,EAAWC,CAAY,KAAI,YAAiB,KAEnD,KAAS,SAAY,CACnB,MAAMC,EAAS,QAAM,KAAc,EAAE,IAAI,oBAAoBP,GAAM,EAEnEE,EAAiB,CACf,MAAOK,EAAO,MACd,KAAMA,EAAO,KACb,SAAUA,EAAO,KACnB,CAAC,EAEDH,EAAYG,EAAO,MAAQA,EAAO,OAASA,EAAO,QAAQ,EAC1DD,EAAaC,EAAO,SAAS,CAC/B,EAAG,CAACP,CAAI,CAAC,EAET,MAAMQ,EAAW,MAAOC,GAAwB,CAC9C,QAAM,KAAc,EAAE,KAAK,4BAA6B,CAAE,GAAGA,EAAU,WAAYT,CAAK,CAAC,EACzF,OAAO,SAAS,QAAO,MAAU,EAAE,UAAY,GACjD,EAEA,OAAKC,EAKH,gBAAC,IAAI,CAAC,SAAAJ,CAAA,EACJ,gBAAC,kBACC,gBAAC,MAAG,UAAU,oBAAmB,SAAOM,GAAY,QAAQ,GAAC,EAE7D,gBAAC,OAAI,UAAU,uBACb,gBAAC,UAAIE,GAAa,SAAU,EAAK,wDAAsD,IACvF,gBAAC,QAAK,UAAU,kBAAkB,iBAAwB,EAC1D,gBAAC,SAAG,EAAE,6FAER,EACA,gBAAC,IAAI,CAAC,cAAeJ,EAAe,SAAAO,CAAA,EACjC,CAAC,CAAE,SAAAE,EAAU,OAAAC,CAAO,IACnB,gCACE,gBAAC,IAAK,CAAC,QAAS,CAAC,CAACA,EAAO,MAAO,MAAOA,EAAO,OAASA,EAAO,MAAM,QAAS,MAAM,SACjF,gBAAC,KACC,YAAY,oBACX,GAAGD,EAAS,QAAS,CACpB,SAAU,oBACV,QAAS,CACP,MAAO,KACP,QAAS,kBACX,CACF,CAAC,EACH,CACF,EACA,gBAAC,IAAK,CAAC,QAAS,CAAC,CAACC,EAAO,KAAM,MAAOA,EAAO,MAAQA,EAAO,KAAK,QAAS,MAAM,QAC9E,gBAAC,IAAK,CAAC,YAAY,kBAAmB,GAAGD,EAAS,MAAM,EAAG,CAC7D,EACA,gBAAC,IAAK,CAAC,QAAS,CAAC,CAACC,EAAO,SAAU,MAAOA,EAAO,UAAYA,EAAO,SAAS,QAAS,MAAM,YAC1F,gBAAC,IAAK,CAAE,GAAGD,EAAS,WAAY,CAAE,SAAU,sBAAuB,CAAC,EAAG,YAAY,UAAW,EAChG,EACA,gBAAC,IAAK,CAAC,QAAS,CAAC,CAACC,EAAO,SAAU,MAAOA,EAAO,UAAYA,EAAO,SAAS,QAAS,MAAM,YAC1F,gBAAC,KACE,GAAGD,EAAS,WAAY,CAAE,SAAU,sBAAuB,CAAC,EAC7D,KAAK,WACL,YAAY,WACd,CACF,EAEA,gBAAC,KAAM,CAAC,KAAK,UAAS,SAAO,CAC/B,CAEJ,CACF,CACF,EAhDO,IAkDX,EAEA,EAAeZ,C","sources":["webpack://grafana/./public/app/features/admin/utils.ts","webpack://grafana/./public/app/features/invites/SignupInvited.tsx"],"sourcesContent":["import { config } from '@grafana/runtime/src';\n\n// https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address\nexport const w3cStandardEmailValidator =\n  /^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n\nexport function isTrial() {\n  const expiry = config.licenseInfo?.trialExpiry;\n  return !!(expiry && expiry > 0);\n}\n\nexport const highlightTrial = () => isTrial() && config.featureToggles.featureHighlights;\n","import React, { useState } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { getBackendSrv } from '@grafana/runtime';\nimport { Button, Field, Form, Input } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { getConfig } from 'app/core/config';\nimport { contextSrv } from 'app/core/core';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\n\nimport { w3cStandardEmailValidator } from '../admin/utils';\n\ninterface FormModel {\n  email: string;\n  name?: string;\n  username: string;\n  password?: string;\n}\n\nconst navModel = {\n  main: {\n    icon: 'grafana' as const,\n    text: 'Invite',\n    subTitle: 'Register your Grafana account',\n    breadcrumbs: [{ title: 'Login', url: 'login' }],\n  },\n  node: {\n    text: '',\n  },\n};\n\nexport interface Props extends GrafanaRouteComponentProps<{ code: string }> {}\n\nexport const SignupInvitedPage = ({ match }: Props) => {\n  const code = match.params.code;\n  const [initFormModel, setInitFormModel] = useState<FormModel>();\n  const [greeting, setGreeting] = useState<string>();\n  const [invitedBy, setInvitedBy] = useState<string>();\n\n  useAsync(async () => {\n    const invite = await getBackendSrv().get(`/api/user/invite/${code}`);\n\n    setInitFormModel({\n      email: invite.email,\n      name: invite.name,\n      username: invite.email,\n    });\n\n    setGreeting(invite.name || invite.email || invite.username);\n    setInvitedBy(invite.invitedBy);\n  }, [code]);\n\n  const onSubmit = async (formData: FormModel) => {\n    await getBackendSrv().post('/api/user/invite/complete', { ...formData, inviteCode: code });\n    window.location.href = getConfig().appSubUrl + '/';\n  };\n\n  if (!initFormModel) {\n    return null;\n  }\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        <h3 className=\"page-sub-heading\">Hello {greeting || 'there'}.</h3>\n\n        <div className=\"modal-tagline p-b-2\">\n          <em>{invitedBy || 'Someone'}</em> has invited you to join Grafana and the organization{' '}\n          <span className=\"highlight-word\">{contextSrv.user.orgName}</span>\n          <br />\n          Please complete the following and choose a password to accept your invitation and continue:\n        </div>\n        <Form defaultValues={initFormModel} onSubmit={onSubmit}>\n          {({ register, errors }) => (\n            <>\n              <Field invalid={!!errors.email} error={errors.email && errors.email.message} label=\"Email\">\n                <Input\n                  placeholder=\"email@example.com\"\n                  {...register('email', {\n                    required: 'Email is required',\n                    pattern: {\n                      value: w3cStandardEmailValidator,\n                      message: 'Email is invalid',\n                    },\n                  })}\n                />\n              </Field>\n              <Field invalid={!!errors.name} error={errors.name && errors.name.message} label=\"Name\">\n                <Input placeholder=\"Name (optional)\" {...register('name')} />\n              </Field>\n              <Field invalid={!!errors.username} error={errors.username && errors.username.message} label=\"Username\">\n                <Input {...register('username', { required: 'Username is required' })} placeholder=\"Username\" />\n              </Field>\n              <Field invalid={!!errors.password} error={errors.password && errors.password.message} label=\"Password\">\n                <Input\n                  {...register('password', { required: 'Password is required' })}\n                  type=\"password\"\n                  placeholder=\"Password\"\n                />\n              </Field>\n\n              <Button type=\"submit\">Sign up</Button>\n            </>\n          )}\n        </Form>\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default SignupInvitedPage;\n"],"names":["w3cStandardEmailValidator","isTrial","expiry","highlightTrial","navModel","SignupInvitedPage","match","code","initFormModel","setInitFormModel","greeting","setGreeting","invitedBy","setInvitedBy","invite","onSubmit","formData","register","errors"],"sourceRoot":""}