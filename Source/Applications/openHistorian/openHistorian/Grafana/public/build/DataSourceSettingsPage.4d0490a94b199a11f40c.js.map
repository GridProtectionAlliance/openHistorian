{"version":3,"sources":["webpack:///./public/app/features/datasources/settings/ButtonRow.tsx","webpack:///./public/app/features/datasources/state/buildCategories.ts","webpack:///./public/app/features/datasources/state/actions.ts","webpack:///./public/app/features/plugins/PluginStateInfo.tsx","webpack:///./public/app/features/datasources/settings/PluginSettings.tsx","webpack:///./public/app/features/datasources/state/navModel.ts","webpack:///./public/app/features/datasources/settings/BasicSettings.tsx","webpack:///./public/app/features/datasources/settings/DataSourceSettingsPage.tsx","webpack:///./public/app/features/datasources/state/selectors.ts","webpack:///./public/app/core/components/connectWithCleanUp.tsx"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_grafana_e2e__WEBPACK_IMPORTED_MODULE_1__","app_core_config__WEBPACK_IMPORTED_MODULE_2__","__webpack_exports__","_a","isReadOnly","onDelete","onSubmit","onTest","a","createElement","className","type","disabled","onClick","event","aria-label","pages","DataSource","selectors","saveAndTest","delete","href","appSubUrl","buildCategories","plugins","categories","id","title","categoryIndex","pluginIndex","enterprisePlugins","getPhantomPlugin","name","description","imgUrl","categories_1","Object","tslib_es6","categories_1_1","next","done","category","value","plugin","find","item","info","links","_b","e_5","_c","push","plugins_1","plugins_1_1","categories_2","categories_2_1","src","datasource","module","baseUrl","logos","small","large","author","url","screenshots","updated","version","enterprisePlugins_1","e_4","enterprisePlugins_1_1","sortPlugins","sortingRules","prometheus","graphite","loki","mysql","postgres","gcloud","sort","b","aSort","bSort","options","initDataSourceSettings","pageId","dependencies","loadDataSource","getDataSource","getDataSourceMeta","importDataSourcePlugin","plugin_loader","dispatch","getState","isNaN","reducers","Error","sent","dataSourceSettings","dataSource","dataSources","dataSourceMeta","importedPlugin","console","log","err_1","testDataSource","dataSourceName","getDatasourceSrv","datasource_srv","getBackendSrv","backend_srv","get","dsApi","testDatasource","withNoBackendCache","result","message","err_2","statusText","loadDataSources","_this","this","response","PluginSettingsCache","pluginInfo","actions","navModel","addDataSource","getStore","newInstance","access","isDefault","length","nameExits","nameHasSuffix","getNewName","digit","getLastDigit","findNewName","post","path","loadDataSourcePlugins","enabled","updateDataSource","put","updateFrontendSettings","deleteDataSource","filter","toLowerCase","then","settings","config","datasources","defaultDatasource","init","endsWith","parseInt","slice","props","text","state","_grafana_data__WEBPACK_IMPORTED_MODULE_3__","alpha","beta","getPluginStateInfoText","react__WEBPACK_IMPORTED_MODULE_1___default","_grafana_ui__WEBPACK_IMPORTED_MODULE_2__","emotion__WEBPACK_IMPORTED_MODULE_4__","templateObject_1","tslib__WEBPACK_IMPORTED_MODULE_0__","PluginSettings","_super","call","onModelChanged","onModelChange","scopeProps","ctrl","datasourceMeta","current","lodash__WEBPACK_IMPORTED_MODULE_2___default","cloneDeep","bind","prototype","componentDidMount","element","components","ConfigEditor","loader","_grafana_runtime__WEBPACK_IMPORTED_MODULE_3__","component","load","componentDidUpdate","prevProps","digest","componentWillUnmount","destroy","render","ref","onOptionsChange","react__WEBPACK_IMPORTED_MODULE_1__","buildNavModel","pluginMeta","meta","img","subTitle","breadcrumbs","children","active","icon","configPages","page","includes","undefined","include","licenseInfo","hasLicense","getDataSourceLoadingNav","pageName","node","main","basicAuth","basicAuthUser","basicAuthPassword","withCredentials","database","jsonData","authType","defaultRegion","orgId","password","readOnly","typeLogoUrl","user","_grafana_data__WEBPACK_IMPORTED_MODULE_1__","child","indexOf","_grafana_ui__WEBPACK_IMPORTED_MODULE_1__","_grafana_e2e__WEBPACK_IMPORTED_MODULE_2__","onDefaultChange","onNameChange","style","marginRight","tooltip","placeholder","onChange","target","required","label","checked","DataSourceSettingsPage","apply","arguments","evt","preventDefault","app_core_app_events__WEBPACK_IMPORTED_MODULE_9__","emit","app_types___WEBPACK_IMPORTED_MODULE_14__","showConfirmModal","yesText","onConfirm","confirmDelete","dataSourceLoaded","renderIsReadOnlyMessage","defineProperty","renderLoadError","loadError","showDelete","msg","toString","data","lodash_isString__WEBPACK_IMPORTED_MODULE_3___default","nav","app_core_components_Page_Page__WEBPACK_IMPORTED_MODULE_5__","Contents","renderConfigPageBody","p","body","query","renderSettings","setDataSourceName","setIsDefault","testingStatus","app_features_plugins_PluginStateInfo__WEBPACK_IMPORTED_MODULE_16__","_BasicSettings__WEBPACK_IMPORTED_MODULE_7__","_PluginSettings__WEBPACK_IMPORTED_MODULE_6__","status","_grafana_e2e__WEBPACK_IMPORTED_MODULE_4__","alert","alertMessage","_ButtonRow__WEBPACK_IMPORTED_MODULE_8__","isLoading","hasDataSource","mapDispatchToProps","_state_actions__WEBPACK_IMPORTED_MODULE_11__","_state_reducers__WEBPACK_IMPORTED_MODULE_17__","react_hot_loader__WEBPACK_IMPORTED_MODULE_2__","app_core_components_connectWithCleanUp__WEBPACK_IMPORTED_MODULE_18__","app_core_selectors_location__WEBPACK_IMPORTED_MODULE_13__","location","_state_selectors__WEBPACK_IMPORTED_MODULE_10__","app_core_selectors_navModel__WEBPACK_IMPORTED_MODULE_12__","navIndex","_state_navModel__WEBPACK_IMPORTED_MODULE_15__","d","getDataSources","getDataSourcePlugins","getDataSourcesSearchQuery","getDataSourcesLayoutMode","getDataSourcesCount","regex","RegExp","searchQuery","test","dataSourceTypeSearchQuery","dataSourceId","layoutMode","dataSourcesCount","connectWithCleanUp","mapStateToProps","stateSelector","Component","ConnectedComponent","react_redux__WEBPACK_IMPORTED_MODULE_1__","ConnectedComponentWithCleanUp","react__WEBPACK_IMPORTED_MODULE_3__","_actions_cleanUp__WEBPACK_IMPORTED_MODULE_2__","react__WEBPACK_IMPORTED_MODULE_3___default","displayName","hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_4___default"],"mappings":"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","file":"DataSourceSettingsPage.4d0490a94b199a11f40c.js","sourcesContent":["import React, { FC } from 'react';\nimport { e2e } from '@grafana/e2e';\n\nimport config from 'app/core/config';\n\nexport interface Props {\n  isReadOnly: boolean;\n  onDelete: () => void;\n  onSubmit: (event: any) => void;\n  onTest: (event: any) => void;\n}\n\nconst ButtonRow: FC<Props> = ({ isReadOnly, onDelete, onSubmit, onTest }) => {\n  return (\n    <div className=\"gf-form-button-row\">\n      {!isReadOnly && (\n        <button\n          type=\"submit\"\n          className=\"btn btn-primary\"\n          disabled={isReadOnly}\n          onClick={event => onSubmit(event)}\n          aria-label={e2e.pages.DataSource.selectors.saveAndTest}\n        >\n          Save &amp; Test\n        </button>\n      )}\n      {isReadOnly && (\n        <button type=\"submit\" className=\"btn btn-success\" onClick={onTest}>\n          Test\n        </button>\n      )}\n      <button\n        type=\"button\"\n        className=\"btn btn-danger\"\n        disabled={isReadOnly}\n        onClick={onDelete}\n        aria-label={e2e.pages.DataSource.selectors.delete}\n      >\n        Delete\n      </button>\n      <a className=\"btn btn-inverse\" href={`${config.appSubUrl}/datasources`}>\n        Back\n      </a>\n    </div>\n  );\n};\n\nexport default ButtonRow;\n","import { DataSourcePluginMeta, PluginType } from '@grafana/data';\nimport { DataSourcePluginCategory } from 'app/types';\n\nexport function buildCategories(plugins: DataSourcePluginMeta[]): DataSourcePluginCategory[] {\n  const categories: DataSourcePluginCategory[] = [\n    { id: 'tsdb', title: 'Time series databases', plugins: [] },\n    { id: 'logging', title: 'Logging & document databases', plugins: [] },\n    { id: 'sql', title: 'SQL', plugins: [] },\n    { id: 'cloud', title: 'Cloud', plugins: [] },\n    { id: 'enterprise', title: 'Enterprise plugins', plugins: [] },\n    { id: 'other', title: 'Others', plugins: [] },\n  ];\n\n  const categoryIndex: Record<string, DataSourcePluginCategory> = {};\n  const pluginIndex: Record<string, DataSourcePluginMeta> = {};\n  const enterprisePlugins = getEnterprisePhantomPlugins();\n\n  // build indices\n  for (const category of categories) {\n    categoryIndex[category.id] = category;\n  }\n\n  for (const plugin of plugins) {\n    // Force category for enterprise plugins\n    if (enterprisePlugins.find(item => item.id === plugin.id)) {\n      plugin.category = 'enterprise';\n    }\n\n    // Fix link name\n    if (plugin.info.links) {\n      for (const link of plugin.info.links) {\n        link.name = 'Learn more';\n      }\n    }\n\n    const category = categories.find(item => item.id === plugin.category) || categoryIndex['other'];\n    category.plugins.push(plugin);\n    // add to plugin index\n    pluginIndex[plugin.id] = plugin;\n  }\n\n  for (const category of categories) {\n    // add phantom plugin\n    if (category.id === 'cloud') {\n      category.plugins.push(getGrafanaCloudPhantomPlugin());\n    }\n\n    // add phantom plugins\n    if (category.id === 'enterprise') {\n      for (const plugin of enterprisePlugins) {\n        if (!pluginIndex[plugin.id]) {\n          category.plugins.push(plugin);\n        }\n      }\n    }\n\n    sortPlugins(category.plugins);\n  }\n\n  return categories;\n}\n\nfunction sortPlugins(plugins: DataSourcePluginMeta[]) {\n  const sortingRules: { [id: string]: number } = {\n    prometheus: 100,\n    graphite: 95,\n    loki: 90,\n    mysql: 80,\n    postgres: 79,\n    gcloud: -1,\n  };\n\n  plugins.sort((a, b) => {\n    const aSort = sortingRules[a.id] || 0;\n    const bSort = sortingRules[b.id] || 0;\n    if (aSort > bSort) {\n      return -1;\n    }\n    if (aSort < bSort) {\n      return 1;\n    }\n\n    return a.name > b.name ? -1 : 1;\n  });\n}\n\nfunction getEnterprisePhantomPlugins(): DataSourcePluginMeta[] {\n  return [\n    getPhantomPlugin({\n      id: 'grafana-splunk-datasource',\n      name: 'Splunk',\n      description: 'Visualize & explore Splunk logs',\n      imgUrl: 'public/img/plugins/splunk_logo_128.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-oracle-datasource',\n      name: 'Oracle',\n      description: 'Visualize & explore Oracle SQL',\n      imgUrl: 'public/img/plugins/oracle.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-dynatrace-datasource',\n      name: 'Dynatrace',\n      description: 'Visualize & explore Dynatrace data',\n      imgUrl: 'public/img/plugins/dynatrace.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-servicenow-datasource',\n      description: 'ServiceNow integration & data source',\n      name: 'ServiceNow',\n      imgUrl: 'public/img/plugins/servicenow.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-datadog-datasource',\n      description: 'DataDog integration & data source',\n      name: 'DataDog',\n      imgUrl: 'public/img/plugins/datadog.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-newrelic-datasource',\n      description: 'New Relic integration & data source',\n      name: 'New Relic',\n      imgUrl: 'public/img/plugins/newrelic.svg',\n    }),\n  ];\n}\n\nfunction getGrafanaCloudPhantomPlugin(): DataSourcePluginMeta {\n  return {\n    id: 'gcloud',\n    name: 'Grafana Cloud',\n    type: PluginType.datasource,\n    module: 'phantom',\n    baseUrl: '',\n    info: {\n      description: 'Hosted Graphite, Prometheus and Loki',\n      logos: { small: 'public/img/grafana_icon.svg', large: 'asd' },\n      author: { name: 'Grafana Labs' },\n      links: [\n        {\n          url: 'https://grafana.com/products/cloud/',\n          name: 'Learn more',\n        },\n      ],\n      screenshots: [],\n      updated: '2019-05-10',\n      version: '1.0.0',\n    },\n  };\n}\n\ninterface GetPhantomPluginOptions {\n  id: string;\n  name: string;\n  description: string;\n  imgUrl: string;\n}\n\nfunction getPhantomPlugin(options: GetPhantomPluginOptions): DataSourcePluginMeta {\n  return {\n    id: options.id,\n    name: options.name,\n    type: PluginType.datasource,\n    module: 'phantom',\n    baseUrl: '',\n    info: {\n      description: options.description,\n      logos: { small: options.imgUrl, large: options.imgUrl },\n      author: { name: 'Grafana Labs' },\n      links: [\n        {\n          url: 'https://grafana.com/grafana/plugins/' + options.id,\n          name: 'Install now',\n        },\n      ],\n      screenshots: [],\n      updated: '2019-05-10',\n      version: '1.0.0',\n    },\n  };\n}\n","import config from '../../../core/config';\nimport { getBackendSrv } from 'app/core/services/backend_srv';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { updateLocation, updateNavIndex } from 'app/core/actions';\nimport { buildNavModel } from './navModel';\nimport { DataSourcePluginMeta, DataSourceSettings } from '@grafana/data';\nimport { DataSourcePluginCategory, ThunkResult, ThunkDispatch } from 'app/types';\nimport { getPluginSettings } from 'app/features/plugins/PluginSettingsCache';\nimport { importDataSourcePlugin } from 'app/features/plugins/plugin_loader';\nimport {\n  dataSourceLoaded,\n  dataSourceMetaLoaded,\n  dataSourcePluginsLoad,\n  dataSourcePluginsLoaded,\n  dataSourcesLoaded,\n  initDataSourceSettingsFailed,\n  initDataSourceSettingsSucceeded,\n  testDataSourceStarting,\n  testDataSourceSucceeded,\n  testDataSourceFailed,\n} from './reducers';\nimport { buildCategories } from './buildCategories';\nimport { getDataSource, getDataSourceMeta } from './selectors';\nimport { getDataSourceSrv } from '@grafana/runtime';\n\nexport interface DataSourceTypesLoadedPayload {\n  plugins: DataSourcePluginMeta[];\n  categories: DataSourcePluginCategory[];\n}\n\nexport interface InitDataSourceSettingDependencies {\n  loadDataSource: typeof loadDataSource;\n  getDataSource: typeof getDataSource;\n  getDataSourceMeta: typeof getDataSourceMeta;\n  importDataSourcePlugin: typeof importDataSourcePlugin;\n}\n\nexport interface TestDataSourceDependencies {\n  getDatasourceSrv: typeof getDataSourceSrv;\n  getBackendSrv: typeof getBackendSrv;\n}\n\nexport const initDataSourceSettings = (\n  pageId: number,\n  dependencies: InitDataSourceSettingDependencies = {\n    loadDataSource,\n    getDataSource,\n    getDataSourceMeta,\n    importDataSourcePlugin,\n  }\n): ThunkResult<void> => {\n  return async (dispatch: ThunkDispatch, getState) => {\n    if (isNaN(pageId)) {\n      dispatch(initDataSourceSettingsFailed(new Error('Invalid ID')));\n      return;\n    }\n\n    try {\n      await dispatch(dependencies.loadDataSource(pageId));\n      if (getState().dataSourceSettings.plugin) {\n        return;\n      }\n\n      const dataSource = dependencies.getDataSource(getState().dataSources, pageId);\n      const dataSourceMeta = dependencies.getDataSourceMeta(getState().dataSources, dataSource.type);\n      const importedPlugin = await dependencies.importDataSourcePlugin(dataSourceMeta);\n\n      dispatch(initDataSourceSettingsSucceeded(importedPlugin));\n    } catch (err) {\n      console.log('Failed to import plugin module', err);\n      dispatch(initDataSourceSettingsFailed(err));\n    }\n  };\n};\n\nexport const testDataSource = (\n  dataSourceName: string,\n  dependencies: TestDataSourceDependencies = {\n    getDatasourceSrv,\n    getBackendSrv,\n  }\n): ThunkResult<void> => {\n  return async (dispatch: ThunkDispatch, getState) => {\n    const dsApi = await dependencies.getDatasourceSrv().get(dataSourceName);\n\n    if (!dsApi.testDatasource) {\n      return;\n    }\n\n    dispatch(testDataSourceStarting());\n\n    dependencies.getBackendSrv().withNoBackendCache(async () => {\n      try {\n        const result = await dsApi.testDatasource();\n\n        dispatch(testDataSourceSucceeded(result));\n      } catch (err) {\n        let message = '';\n\n        if (err.statusText) {\n          message = 'HTTP Error ' + err.statusText;\n        } else {\n          message = err.message;\n        }\n\n        dispatch(testDataSourceFailed({ message }));\n      }\n    });\n  };\n};\n\nexport function loadDataSources(): ThunkResult<void> {\n  return async dispatch => {\n    const response = await getBackendSrv().get('/api/datasources');\n    dispatch(dataSourcesLoaded(response));\n  };\n}\n\nexport function loadDataSource(id: number): ThunkResult<void> {\n  return async dispatch => {\n    const dataSource = await getBackendSrv().get(`/api/datasources/${id}`);\n    const pluginInfo = (await getPluginSettings(dataSource.type)) as DataSourcePluginMeta;\n    const plugin = await importDataSourcePlugin(pluginInfo);\n\n    dispatch(dataSourceLoaded(dataSource));\n    dispatch(dataSourceMetaLoaded(pluginInfo));\n    dispatch(updateNavIndex(buildNavModel(dataSource, plugin)));\n  };\n}\n\nexport function addDataSource(plugin: DataSourcePluginMeta): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    await dispatch(loadDataSources());\n\n    const dataSources = getStore().dataSources.dataSources;\n\n    const newInstance = {\n      name: plugin.name,\n      type: plugin.id,\n      access: 'proxy',\n      isDefault: dataSources.length === 0,\n    };\n\n    if (nameExits(dataSources, newInstance.name)) {\n      newInstance.name = findNewName(dataSources, newInstance.name);\n    }\n\n    const result = await getBackendSrv().post('/api/datasources', newInstance);\n    dispatch(updateLocation({ path: `/datasources/edit/${result.id}` }));\n  };\n}\n\nexport function loadDataSourcePlugins(): ThunkResult<void> {\n  return async dispatch => {\n    dispatch(dataSourcePluginsLoad());\n    const plugins = await getBackendSrv().get('/api/plugins', { enabled: 1, type: 'datasource' });\n    const categories = buildCategories(plugins);\n    dispatch(dataSourcePluginsLoaded({ plugins, categories }));\n  };\n}\n\nexport function updateDataSource(dataSource: DataSourceSettings): ThunkResult<void> {\n  return async dispatch => {\n    await getBackendSrv().put(`/api/datasources/${dataSource.id}`, dataSource);\n    await updateFrontendSettings();\n    return dispatch(loadDataSource(dataSource.id));\n  };\n}\n\nexport function deleteDataSource(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const dataSource = getStore().dataSources.dataSource;\n    await getBackendSrv().delete(`/api/datasources/${dataSource.id}`);\n    await updateFrontendSettings();\n    dispatch(updateLocation({ path: '/datasources' }));\n  };\n}\n\ninterface ItemWithName {\n  name: string;\n}\n\nexport function nameExits(dataSources: ItemWithName[], name: string) {\n  return (\n    dataSources.filter(dataSource => {\n      return dataSource.name.toLowerCase() === name.toLowerCase();\n    }).length > 0\n  );\n}\n\nexport function findNewName(dataSources: ItemWithName[], name: string) {\n  // Need to loop through current data sources to make sure\n  // the name doesn't exist\n  while (nameExits(dataSources, name)) {\n    // If there's a duplicate name that doesn't end with '-x'\n    // we can add -1 to the name and be done.\n    if (!nameHasSuffix(name)) {\n      name = `${name}-1`;\n    } else {\n      // if there's a duplicate name that ends with '-x'\n      // we can try to increment the last digit until the name is unique\n\n      // remove the 'x' part and replace it with the new number\n      name = `${getNewName(name)}${incrementLastDigit(getLastDigit(name))}`;\n    }\n  }\n\n  return name;\n}\n\nfunction updateFrontendSettings() {\n  return getBackendSrv()\n    .get('/api/frontend/settings')\n    .then((settings: any) => {\n      config.datasources = settings.datasources;\n      config.defaultDatasource = settings.defaultDatasource;\n      getDatasourceSrv().init();\n    });\n}\n\nfunction nameHasSuffix(name: string) {\n  return name.endsWith('-', name.length - 1);\n}\n\nfunction getLastDigit(name: string) {\n  return parseInt(name.slice(-1), 10);\n}\n\nfunction incrementLastDigit(digit: number) {\n  return isNaN(digit) ? 1 : digit + 1;\n}\n\nfunction getNewName(name: string) {\n  return name.slice(0, name.length - 1);\n}\n","import React, { FC } from 'react';\nimport { AlphaNotice } from '@grafana/ui';\nimport { PluginState } from '@grafana/data';\nimport { css } from 'emotion';\n\ninterface Props {\n  state?: PluginState;\n}\n\nfunction getPluginStateInfoText(state?: PluginState): string | null {\n  switch (state) {\n    case PluginState.alpha:\n      return 'Alpha Plugin: This plugin is a work in progress and updates may include breaking changes';\n    case PluginState.beta:\n      return 'Beta Plugin: There could be bugs and minor breaking changes to this plugin';\n  }\n  return null;\n}\n\nconst PluginStateinfo: FC<Props> = props => {\n  const text = getPluginStateInfoText(props.state);\n\n  if (!text) {\n    return null;\n  }\n\n  return (\n    <AlphaNotice\n      state={props.state}\n      text={text}\n      className={css`\n        margin-left: 16px;\n      `}\n    />\n  );\n};\n\nexport default PluginStateinfo;\n","import React, { PureComponent } from 'react';\nimport _ from 'lodash';\nimport {\n  DataSourceSettings,\n  DataSourcePlugin,\n  DataSourcePluginMeta,\n  DataSourceApi,\n  DataQuery,\n  DataSourceJsonData,\n} from '@grafana/data';\nimport { getAngularLoader, AngularComponent } from '@grafana/runtime';\n\nexport type GenericDataSourcePlugin = DataSourcePlugin<DataSourceApi<DataQuery, DataSourceJsonData>>;\n\nexport interface Props {\n  plugin: GenericDataSourcePlugin;\n  dataSource: DataSourceSettings;\n  dataSourceMeta: DataSourcePluginMeta;\n  onModelChange: (dataSource: DataSourceSettings) => void;\n}\n\nexport class PluginSettings extends PureComponent<Props> {\n  element: any;\n  component: AngularComponent;\n  scopeProps: {\n    ctrl: { datasourceMeta: DataSourcePluginMeta; current: DataSourceSettings };\n    onModelChanged: (dataSource: DataSourceSettings) => void;\n  };\n\n  constructor(props: Props) {\n    super(props);\n\n    this.scopeProps = {\n      ctrl: { datasourceMeta: props.dataSourceMeta, current: _.cloneDeep(props.dataSource) },\n      onModelChanged: this.onModelChanged,\n    };\n    this.onModelChanged = this.onModelChanged.bind(this);\n  }\n\n  componentDidMount() {\n    const { plugin } = this.props;\n\n    if (!this.element) {\n      return;\n    }\n\n    if (!plugin.components.ConfigEditor) {\n      // React editor is not specified, let's render angular editor\n      // How to apprach this better? Introduce ReactDataSourcePlugin interface and typeguard it here?\n      const loader = getAngularLoader();\n      const template = '<plugin-component type=\"datasource-config-ctrl\" />';\n\n      this.component = loader.load(this.element, this.scopeProps, template);\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { plugin } = this.props;\n    if (!plugin.components.ConfigEditor && this.props.dataSource !== prevProps.dataSource) {\n      this.scopeProps.ctrl.current = _.cloneDeep(this.props.dataSource);\n\n      this.component.digest();\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.component) {\n      this.component.destroy();\n    }\n  }\n\n  onModelChanged = (dataSource: DataSourceSettings) => {\n    this.props.onModelChange(dataSource);\n  };\n\n  render() {\n    const { plugin, dataSource } = this.props;\n\n    if (!plugin) {\n      return null;\n    }\n\n    return (\n      <div ref={element => (this.element = element)}>\n        {plugin.components.ConfigEditor &&\n          React.createElement(plugin.components.ConfigEditor, {\n            options: dataSource,\n            onOptionsChange: this.onModelChanged,\n          })}\n      </div>\n    );\n  }\n}\n\nexport default PluginSettings;\n","import { DataSourceSettings, PluginType, PluginInclude, NavModel, NavModelItem } from '@grafana/data';\nimport config from 'app/core/config';\nimport { GenericDataSourcePlugin } from '../settings/PluginSettings';\n\nexport function buildNavModel(dataSource: DataSourceSettings, plugin: GenericDataSourcePlugin): NavModelItem {\n  const pluginMeta = plugin.meta;\n\n  const navModel = {\n    img: pluginMeta.info.logos.large,\n    id: 'datasource-' + dataSource.id,\n    subTitle: `Type: ${pluginMeta.name}`,\n    url: '',\n    text: dataSource.name,\n    breadcrumbs: [{ title: 'Data Sources', url: 'datasources' }],\n    children: [\n      {\n        active: false,\n        icon: 'fa fa-fw fa-sliders',\n        id: `datasource-settings-${dataSource.id}`,\n        text: 'Settings',\n        url: `datasources/edit/${dataSource.id}/`,\n      },\n    ],\n  };\n\n  if (plugin.configPages) {\n    for (const page of plugin.configPages) {\n      navModel.children.push({\n        active: false,\n        text: page.title,\n        icon: page.icon,\n        url: `datasources/edit/${dataSource.id}/?page=${page.id}`,\n        id: `datasource-page-${page.id}`,\n      });\n    }\n  }\n\n  if (pluginMeta.includes && hasDashboards(pluginMeta.includes)) {\n    navModel.children.push({\n      active: false,\n      icon: 'fa fa-fw fa-th-large',\n      id: `datasource-dashboards-${dataSource.id}`,\n      text: 'Dashboards',\n      url: `datasources/edit/${dataSource.id}/dashboards`,\n    });\n  }\n\n  if (config.licenseInfo.hasLicense) {\n    navModel.children.push({\n      active: false,\n      icon: 'fa fa-fw fa-lock',\n      id: `datasource-permissions-${dataSource.id}`,\n      text: 'Permissions',\n      url: `datasources/edit/${dataSource.id}/permissions`,\n    });\n  }\n\n  return navModel;\n}\n\nexport function getDataSourceLoadingNav(pageName: string): NavModel {\n  const main = buildNavModel(\n    {\n      access: '',\n      basicAuth: false,\n      basicAuthUser: '',\n      basicAuthPassword: '',\n      withCredentials: false,\n      database: '',\n      id: 1,\n      isDefault: false,\n      jsonData: { authType: 'credentials', defaultRegion: 'eu-west-2' },\n      name: 'Loading',\n      orgId: 1,\n      password: '',\n      readOnly: false,\n      type: 'Loading',\n      typeLogoUrl: 'public/img/icn-datasource.svg',\n      url: '',\n      user: '',\n    },\n    {\n      meta: {\n        id: '1',\n        type: PluginType.datasource,\n        name: '',\n        info: {\n          author: {\n            name: '',\n            url: '',\n          },\n          description: '',\n          links: [{ name: '', url: '' }],\n          logos: {\n            large: '',\n            small: '',\n          },\n          screenshots: [],\n          updated: '',\n          version: '',\n        },\n        includes: [],\n        module: '',\n        baseUrl: '',\n      },\n    } as GenericDataSourcePlugin\n  );\n\n  let node: NavModelItem;\n\n  // find active page\n  for (const child of main.children) {\n    if (child.id.indexOf(pageName) > 0) {\n      child.active = true;\n      node = child;\n      break;\n    }\n  }\n\n  return {\n    main: main,\n    node: node,\n  };\n}\n\nfunction hasDashboards(includes: PluginInclude[]): boolean {\n  return (\n    includes.find(include => {\n      return include.type === 'dashboard';\n    }) !== undefined\n  );\n}\n","import React, { FC } from 'react';\nimport { FormLabel, Input, Switch } from '@grafana/ui';\nimport { e2e } from '@grafana/e2e';\n\nexport interface Props {\n  dataSourceName: string;\n  isDefault: boolean;\n  onNameChange: (name: string) => void;\n  onDefaultChange: (value: boolean) => void;\n}\n\nconst BasicSettings: FC<Props> = ({ dataSourceName, isDefault, onDefaultChange, onNameChange }) => {\n  return (\n    <div className=\"gf-form-group\" aria-label=\"Datasource settings page basic settings\">\n      <div className=\"gf-form-inline\">\n        <div className=\"gf-form max-width-30\" style={{ marginRight: '3px' }}>\n          <FormLabel\n            tooltip={\n              'The name is used when you select the data source in panels. The Default data source is ' +\n              'preselected in new panels.'\n            }\n          >\n            Name\n          </FormLabel>\n          <Input\n            className=\"gf-form-input max-width-23\"\n            type=\"text\"\n            value={dataSourceName}\n            placeholder=\"Name\"\n            onChange={event => onNameChange(event.target.value)}\n            required\n            aria-label={e2e.pages.DataSource.selectors.name}\n          />\n        </div>\n        <Switch\n          label=\"Default\"\n          checked={isDefault}\n          onChange={event => {\n            // @ts-ignore\n            onDefaultChange(event.target.checked);\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default BasicSettings;\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport isString from 'lodash/isString';\nimport { e2e } from '@grafana/e2e';\n// Components\nimport Page from 'app/core/components/Page/Page';\nimport { GenericDataSourcePlugin, PluginSettings } from './PluginSettings';\nimport BasicSettings from './BasicSettings';\nimport ButtonRow from './ButtonRow';\n// Services & Utils\nimport appEvents from 'app/core/app_events';\n// Actions & selectors\nimport { getDataSource, getDataSourceMeta } from '../state/selectors';\nimport {\n  deleteDataSource,\n  loadDataSource,\n  updateDataSource,\n  initDataSourceSettings,\n  testDataSource,\n} from '../state/actions';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { getRouteParamsId } from 'app/core/selectors/location';\n// Types\nimport { CoreEvents, StoreState } from 'app/types/';\nimport { UrlQueryMap } from '@grafana/runtime';\nimport { DataSourcePluginMeta, DataSourceSettings, NavModel } from '@grafana/data';\nimport { getDataSourceLoadingNav } from '../state/navModel';\nimport PluginStateinfo from 'app/features/plugins/PluginStateInfo';\nimport { dataSourceLoaded, setDataSourceName, setIsDefault } from '../state/reducers';\nimport { connectWithCleanUp } from 'app/core/components/connectWithCleanUp';\n\nexport interface Props {\n  navModel: NavModel;\n  dataSource: DataSourceSettings;\n  dataSourceMeta: DataSourcePluginMeta;\n  pageId: number;\n  deleteDataSource: typeof deleteDataSource;\n  loadDataSource: typeof loadDataSource;\n  setDataSourceName: typeof setDataSourceName;\n  updateDataSource: typeof updateDataSource;\n  setIsDefault: typeof setIsDefault;\n  dataSourceLoaded: typeof dataSourceLoaded;\n  initDataSourceSettings: typeof initDataSourceSettings;\n  testDataSource: typeof testDataSource;\n  plugin?: GenericDataSourcePlugin;\n  query: UrlQueryMap;\n  page?: string;\n  testingStatus?: {\n    message?: string;\n    status?: string;\n  };\n  loadError?: Error | string;\n}\n\nexport class DataSourceSettingsPage extends PureComponent<Props> {\n  componentDidMount() {\n    const { initDataSourceSettings, pageId } = this.props;\n    initDataSourceSettings(pageId);\n  }\n\n  onSubmit = async (evt: React.FormEvent<HTMLFormElement>) => {\n    evt.preventDefault();\n\n    await this.props.updateDataSource({ ...this.props.dataSource });\n\n    this.testDataSource();\n  };\n\n  onTest = async (evt: React.FormEvent<HTMLFormElement>) => {\n    evt.preventDefault();\n\n    this.testDataSource();\n  };\n\n  onDelete = () => {\n    appEvents.emit(CoreEvents.showConfirmModal, {\n      title: 'Delete',\n      text: 'Are you sure you want to delete this data source?',\n      yesText: 'Delete',\n      icon: 'fa-trash',\n      onConfirm: () => {\n        this.confirmDelete();\n      },\n    });\n  };\n\n  confirmDelete = () => {\n    this.props.deleteDataSource();\n  };\n\n  onModelChange = (dataSource: DataSourceSettings) => {\n    this.props.dataSourceLoaded(dataSource);\n  };\n\n  isReadOnly() {\n    return this.props.dataSource.readOnly === true;\n  }\n\n  renderIsReadOnlyMessage() {\n    return (\n      <div className=\"grafana-info-box span8\">\n        This datasource was added by config and cannot be modified using the UI. Please contact your server admin to\n        update this datasource.\n      </div>\n    );\n  }\n\n  testDataSource() {\n    const { dataSource, testDataSource } = this.props;\n    testDataSource(dataSource.name);\n  }\n\n  get hasDataSource() {\n    return this.props.dataSource.id > 0;\n  }\n\n  renderLoadError(loadError: any) {\n    let showDelete = false;\n    let msg = loadError.toString();\n    if (loadError.data) {\n      if (loadError.data.message) {\n        msg = loadError.data.message;\n      }\n    } else if (isString(loadError)) {\n      showDelete = true;\n    }\n\n    const node = {\n      text: msg,\n      subTitle: 'Data Source Error',\n      icon: 'fa fa-fw fa-warning',\n    };\n    const nav = {\n      node: node,\n      main: node,\n    };\n\n    return (\n      <Page navModel={nav}>\n        <Page.Contents>\n          <div>\n            <div className=\"gf-form-button-row\">\n              {showDelete && (\n                <button type=\"submit\" className=\"btn btn-danger\" onClick={this.onDelete}>\n                  Delete\n                </button>\n              )}\n              <a className=\"btn btn-inverse\" href=\"datasources\">\n                Back\n              </a>\n            </div>\n          </div>\n        </Page.Contents>\n      </Page>\n    );\n  }\n\n  renderConfigPageBody(page: string) {\n    const { plugin } = this.props;\n    if (!plugin || !plugin.configPages) {\n      return null; // still loading\n    }\n\n    for (const p of plugin.configPages) {\n      if (p.id === page) {\n        return <p.body plugin={plugin} query={this.props.query} />;\n      }\n    }\n\n    return <div>Page Not Found: {page}</div>;\n  }\n\n  renderSettings() {\n    const { dataSourceMeta, setDataSourceName, setIsDefault, dataSource, testingStatus, plugin } = this.props;\n\n    return (\n      <form onSubmit={this.onSubmit}>\n        {this.isReadOnly() && this.renderIsReadOnlyMessage()}\n        {dataSourceMeta.state && (\n          <div className=\"gf-form\">\n            <label className=\"gf-form-label width-10\">Plugin state</label>\n            <label className=\"gf-form-label gf-form-label--transparent\">\n              <PluginStateinfo state={dataSourceMeta.state} />\n            </label>\n          </div>\n        )}\n\n        <BasicSettings\n          dataSourceName={dataSource.name}\n          isDefault={dataSource.isDefault}\n          onDefaultChange={state => setIsDefault(state)}\n          onNameChange={name => setDataSourceName(name)}\n        />\n\n        {plugin && (\n          <PluginSettings\n            plugin={plugin}\n            dataSource={dataSource}\n            dataSourceMeta={dataSourceMeta}\n            onModelChange={this.onModelChange}\n          />\n        )}\n\n        <div className=\"gf-form-group\">\n          {testingStatus && testingStatus.message && (\n            <div className={`alert-${testingStatus.status} alert`} aria-label={e2e.pages.DataSource.selectors.alert}>\n              <div className=\"alert-icon\">\n                {testingStatus.status === 'error' ? (\n                  <i className=\"fa fa-exclamation-triangle\" />\n                ) : (\n                  <i className=\"fa fa-check\" />\n                )}\n              </div>\n              <div className=\"alert-body\">\n                <div className=\"alert-title\" aria-label={e2e.pages.DataSource.selectors.alertMessage}>\n                  {testingStatus.message}\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n\n        <ButtonRow\n          onSubmit={event => this.onSubmit(event)}\n          isReadOnly={this.isReadOnly()}\n          onDelete={this.onDelete}\n          onTest={event => this.onTest(event)}\n        />\n      </form>\n    );\n  }\n\n  render() {\n    const { navModel, page, loadError } = this.props;\n\n    if (loadError) {\n      return this.renderLoadError(loadError);\n    }\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={!this.hasDataSource}>\n          {this.hasDataSource && <div>{page ? this.renderConfigPageBody(page) : this.renderSettings()}</div>}\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState) {\n  const pageId = getRouteParamsId(state.location);\n  const dataSource = getDataSource(state.dataSources, pageId);\n  const page = state.location.query.page as string;\n  const { plugin, loadError, testingStatus } = state.dataSourceSettings;\n\n  return {\n    navModel: getNavModel(\n      state.navIndex,\n      page ? `datasource-page-${page}` : `datasource-settings-${pageId}`,\n      getDataSourceLoadingNav('settings')\n    ),\n    dataSource: getDataSource(state.dataSources, pageId),\n    dataSourceMeta: getDataSourceMeta(state.dataSources, dataSource.type),\n    pageId: pageId,\n    query: state.location.query,\n    page,\n    plugin,\n    loadError,\n    testingStatus,\n  };\n}\n\nconst mapDispatchToProps = {\n  deleteDataSource,\n  loadDataSource,\n  setDataSourceName,\n  updateDataSource,\n  setIsDefault,\n  dataSourceLoaded,\n  initDataSourceSettings,\n  testDataSource,\n};\n\nexport default hot(module)(\n  connectWithCleanUp(mapStateToProps, mapDispatchToProps, state => state.dataSourceSettings)(DataSourceSettingsPage)\n);\n","import { DataSourceSettings, DataSourcePluginMeta } from '@grafana/data';\nimport { DataSourcesState } from '../../../types/datasources';\nimport { UrlQueryValue } from '@grafana/runtime';\n\nexport const getDataSources = (state: DataSourcesState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  return state.dataSources.filter((dataSource: DataSourceSettings) => {\n    return regex.test(dataSource.name) || regex.test(dataSource.database);\n  });\n};\n\nexport const getDataSourcePlugins = (state: DataSourcesState) => {\n  const regex = new RegExp(state.dataSourceTypeSearchQuery, 'i');\n\n  return state.plugins.filter((type: DataSourcePluginMeta) => {\n    return regex.test(type.name);\n  });\n};\n\nexport const getDataSource = (state: DataSourcesState, dataSourceId: UrlQueryValue): DataSourceSettings | null => {\n  if (state.dataSource.id === parseInt(dataSourceId as string, 10)) {\n    return state.dataSource;\n  }\n  return {} as DataSourceSettings;\n};\n\nexport const getDataSourceMeta = (state: DataSourcesState, type: string): DataSourcePluginMeta => {\n  if (state.dataSourceMeta.id === type) {\n    return state.dataSourceMeta;\n  }\n\n  return {} as DataSourcePluginMeta;\n};\n\nexport const getDataSourcesSearchQuery = (state: DataSourcesState) => state.searchQuery;\nexport const getDataSourcesLayoutMode = (state: DataSourcesState) => state.layoutMode;\nexport const getDataSourcesCount = (state: DataSourcesState) => state.dataSourcesCount;\n","import { connect, MapDispatchToPropsParam, MapStateToPropsParam, useDispatch } from 'react-redux';\nimport { cleanUpAction, StateSelector } from '../actions/cleanUp';\nimport React, { ComponentType, FunctionComponent, useEffect } from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\n\nexport const connectWithCleanUp = <\n  TStateProps extends {} = {},\n  TDispatchProps = {},\n  TOwnProps = {},\n  State = {},\n  TSelector extends object = {},\n  Statics = {}\n>(\n  mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\n  mapDispatchToProps: MapDispatchToPropsParam<TDispatchProps, TOwnProps>,\n  stateSelector: StateSelector<TSelector>\n) => (Component: ComponentType<any>) => {\n  const ConnectedComponent = connect(\n    mapStateToProps,\n    mapDispatchToProps\n    // @ts-ignore\n  )(Component);\n\n  const ConnectedComponentWithCleanUp: FunctionComponent = props => {\n    const dispatch = useDispatch();\n    useEffect(() => {\n      return function cleanUp() {\n        dispatch(cleanUpAction({ stateSelector }));\n      };\n    }, []);\n    // @ts-ignore\n    return <ConnectedComponent {...props} />;\n  };\n\n  ConnectedComponentWithCleanUp.displayName = `ConnectWithCleanUp(${ConnectedComponent.displayName})`;\n  hoistNonReactStatics(ConnectedComponentWithCleanUp, Component);\n  type Hoisted = typeof ConnectedComponentWithCleanUp & Statics;\n\n  return ConnectedComponentWithCleanUp as Hoisted;\n};\n"],"sourceRoot":""}