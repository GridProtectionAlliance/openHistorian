{"version":3,"sources":["webpack:///./public/app/plugins/datasource/grafana/datasource.ts","webpack:///./public/app/plugins/datasource/grafana/module.ts"],"names":["datasource_GrafanaDatasource","GrafanaDatasource","backendSrv","templateSrv","this","$inject","prototype","query","options","get","from","range","valueOf","to","intervalMs","maxDataPoints","then","res","data","results","_b","Object","tslib_es6","queryRes","series","_c","next","done","value","push","target","name","datapoints","points","metricFindQuery","Promise","resolve","e_2","_a","e_3","params","limit","annotation","tags","matchAny","type","dashboard","id","dashboardId","lodash_default","a","isArray","length","_d","t","renderedValues","replace","join","_e","split","_f","tt","module_GrafanaQueryCtrl","_super","apply","arguments","GrafanaQueryCtrl","templateUrl","sdk","GrafanaAnnotationsQueryCtrl","types","text"],"mappings":"wIAIAA,EAAA,oBAEsBC,EAAAC,EAAsBC,GAAUC,KAAAF,WAAWA,EAAiBE,KAAAD,cA0EjF,OA1ECF,EAAAI,QAAoB,cAAgC,iBAGtCC,UAAUC,MAAA,SAAAC,UACnBJ,KAAIF,WACHO,IAAI,iCAA8B,CAClCC,KAAIF,EAAQG,MAAQD,KAACE,UACrBC,GAAAL,EAAYG,MAAAE,GAAQD,UACpBE,WAAAN,EAAeM,WACfC,cAAAP,EAAAO,gBAEAC,KAAM,SAAiBC,GAEvB,IAAIC,EAAI,GAYP,OAXCD,EAAAE,2DACO,IAAMC,EAAMC,OAAAC,EAAA,SAAAD,CAAAE,EAAAC,QAAAC,EAAAL,EAAAM,QAAAD,EAAAE,KAAAF,EAAAL,EAAAM,OAAA,CACf,IAAIF,EAAMC,EAAAG,QACRC,KAAM,CACNC,OAAAN,EAAYO,KACXC,WAAAR,EAAAS,8GAMR,CAAAf,aAISZ,UAAS4B,gBAAc,SAAA1B,GACtC,OAAA2B,QAAAC,QAAA,CAAAlB,KAAA,8CAGC,IAAMmB,EAAAC,EAAcC,EAAAnB,EAClBoB,EAAM,CACN9B,KAAIF,EAAQG,MAAQD,KAACE,UACrBC,GAAAL,EAAOG,MAAQE,GAAAD,UACf6B,MAAMjC,EAAQkC,WAAWD,MACzBE,KAAAnC,EAAUkC,WAAQC,KAClBC,SAAApC,EAAAkC,WAAAE,aAGA,cAAApC,EAAAkC,WAAAG,KAAgC,KAE9BrC,EAAOsC,UAAQC,GAChB,OAAAZ,QAAAC,QAAA,IAGDI,EAAAQ,YAAAxC,EAA4BsC,UAAAC,UAE7BP,EAAAG,SACC,KAEEM,EAAeC,EAAAC,QAAW3C,EAACkC,WAAAC,OAAA,IAAAnC,EAAAkC,WAAAC,KAAAS,OAC5B,OAAAjB,QAAAC,QAAA,IAED,iBACK,IAAOX,EAAAJ,OAAAC,EAAA,SAAAD,CAAAmB,EAAAG,MAAAU,EAAA5B,EAAAC,QAAA2B,EAAA1B,KAAA0B,EAAA5B,EAAAC,OAAA,CACV,IAAM4B,EAAAD,EAAAzB,MACJ2B,EAAgBnD,KAAKD,YAAUqD,QAAAF,EAAA,YAAA1B,SAChB,iBAANA,EACRA,EAGAA,EAAA6B,KARW,2BAST,IAAMC,GAAEnB,OAAA,EAAAlB,OAAAC,EAAA,SAAAD,CAAAkC,EAAAI,MATC,mBASDC,EAAAF,EAAAhC,QAAAkC,EAAAjC,KAAAiC,EAAAF,EAAAhC,OAAA,CACX,IAAImC,EAAKD,EAAGhC,MACbe,EAAAd,KAAAgC,wMAGJrB,EAAAG,OAGF,OAAAvC,KAAAF,WAAAO,IAAA,mBAAA+B,IACFvC,EA5ED,uMCD+B6D,EAAA,SAAAC,gBAE9B,cAAAA,KAAAC,MAAA5D,KAAA6D,YAAA7D,KAF8B,OAA/BiB,OAAAC,EAAA,UAAAD,CAAA6C,EAAAH,GAEAG,EAAAC,YAAC,6BAF8BD,EAAA,CAI/BE,EAAA,WAQEC,EAAA,oBALAA,SACEC,MAAQ,CACR,CAAEC,KAAM,YAAa3C,MAAE,aACvB,CAAA2C,KAAA,OAAA3C,MAAA,SAIAxB,KAAKsC,WAAWG,KAAKzC,KAAOsC,WAAWG,MAAM,OAC9CzC,KAAAsC,WAAAD,MAAArC,KAAAsC,WAAAD,OAAA,IAGF,OAAD4B,EAAAF,YAAC,mCAAAE,EANC","file":"grafanaPlugin.4d0490a94b199a11f40c.js","sourcesContent":["import _ from 'lodash';\nimport { BackendSrv } from 'app/core/services/backend_srv';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\n\nclass GrafanaDatasource {\n  /** @ngInject */\n  constructor(private backendSrv: BackendSrv, private templateSrv: TemplateSrv) {}\n\n  query(options: any) {\n    return this.backendSrv\n      .get('/api/tsdb/testdata/random-walk', {\n        from: options.range.from.valueOf(),\n        to: options.range.to.valueOf(),\n        intervalMs: options.intervalMs,\n        maxDataPoints: options.maxDataPoints,\n      })\n      .then((res: any) => {\n        const data: any[] = [];\n\n        if (res.results) {\n          _.forEach(res.results, queryRes => {\n            for (const series of queryRes.series) {\n              data.push({\n                target: series.name,\n                datapoints: series.points,\n              });\n            }\n          });\n        }\n\n        return { data: data };\n      });\n  }\n\n  metricFindQuery(options: any) {\n    return Promise.resolve({ data: [] });\n  }\n\n  annotationQuery(options: any) {\n    const params: any = {\n      from: options.range.from.valueOf(),\n      to: options.range.to.valueOf(),\n      limit: options.annotation.limit,\n      tags: options.annotation.tags,\n      matchAny: options.annotation.matchAny,\n    };\n\n    if (options.annotation.type === 'dashboard') {\n      // if no dashboard id yet return\n      if (!options.dashboard.id) {\n        return Promise.resolve([]);\n      }\n      // filter by dashboard id\n      params.dashboardId = options.dashboard.id;\n      // remove tags filter if any\n      delete params.tags;\n    } else {\n      // require at least one tag\n      if (!_.isArray(options.annotation.tags) || options.annotation.tags.length === 0) {\n        return Promise.resolve([]);\n      }\n      const delimiter = '__delimiter__';\n      const tags = [];\n      for (const t of params.tags) {\n        const renderedValues = this.templateSrv.replace(t, {}, (value: any) => {\n          if (typeof value === 'string') {\n            return value;\n          }\n\n          return value.join(delimiter);\n        });\n        for (const tt of renderedValues.split(delimiter)) {\n          tags.push(tt);\n        }\n      }\n      params.tags = tags;\n    }\n\n    return this.backendSrv.get('/api/annotations', params);\n  }\n}\n\nexport { GrafanaDatasource };\n","import { GrafanaDatasource } from './datasource';\nimport { QueryCtrl } from 'app/plugins/sdk';\n\nclass GrafanaQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n}\n\nclass GrafanaAnnotationsQueryCtrl {\n  annotation: any;\n\n  types = [\n    { text: 'Dashboard', value: 'dashboard' },\n    { text: 'Tags', value: 'tags' },\n  ];\n\n  constructor() {\n    this.annotation.type = this.annotation.type || 'tags';\n    this.annotation.limit = this.annotation.limit || 100;\n  }\n\n  static templateUrl = 'partials/annotations.editor.html';\n}\n\nexport {\n  GrafanaDatasource,\n  GrafanaDatasource as Datasource,\n  GrafanaQueryCtrl as QueryCtrl,\n  GrafanaAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n"],"sourceRoot":""}