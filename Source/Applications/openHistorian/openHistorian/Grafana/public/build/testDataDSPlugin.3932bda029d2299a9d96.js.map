{"version":3,"sources":["webpack:///./public/app/plugins/datasource/testdata/metricTree.ts","webpack:///./public/app/plugins/datasource/testdata/LogIpsum.ts","webpack:///./public/app/plugins/datasource/testdata/runStreams.ts","webpack:///./public/app/plugins/datasource/testdata/datasource.ts","webpack:///./public/app/plugins/datasource/testdata/query_ctrl.ts","webpack:///./public/app/plugins/datasource/testdata/TestInfoTab.tsx","webpack:///./public/app/plugins/datasource/testdata/ConfigEditor.tsx","webpack:///./public/app/plugins/datasource/testdata/module.tsx"],"names":["queryMetricTree","query","queryTree","children","queryIndex","nodeQuery","result","namesToMatch","startsWith","replace","split","children_1","tslib_es6","children_1_1","next","done","node","value","namesToMatch_1","e_3","namesToMatch_1_1","nameToMatch","name","concat","buildMetricTree","parent","depth","chars_1","chars_1_1","nodeName","push","LogIpsum_index","getNextWord","Math","floor","random","words","length","defaultQuery","type","speed","spread","noise","bands","runStream","target","req","Object","lodash","stream","Observable","subscriber","streamId","panelId","refId","maxDataPoints","data","grafana_data_src","append","capacity","alias","addField","time","number","i","suffix","timeoutId","addNextRow","idx","fields","values","add","min","max","Date","now","pushNextEvent","key","setTimeout","console","log","clearTimeout","runSignalStream","string","line","getRandomLine","runLogsStream","reader","csv","callback","onHeader","fields_1","fields_1_1","field","onRow","row","processChunk","text","TextDecoder","decode","readCSV","state","Done","Streaming","complete","read","then","fetch","Request","url","response","body","getReader","runFetchStream","Error","datasource_TestDataDataSource","_super","TestDataDataSource","instanceSettings","call","this","prototype","options","_this","queries","streams","_b","targets","_c","scenarioId","intervalMs","datasourceId","id","template_srv","backend_srv","datasourceRequest","method","from","range","valueOf","toString","to","requestId","res","processQueryResult","merge","apply","queries_1","queries_1_1","results","_d","tables","_e","table","_f","e_4","series","_g","datapoints","points","tags","annotationQuery","timeWalker","events","step","annotation","Promise","resolve","getQueryDisplayText","testDatasource","status","message","getScenarios","get","metricFindQuery","reject","items","map","item","src","defaultPulse","timeStep","onCount","onValue","offCount","offValue","defaultCSVWave","valuesCSV","showLabelsFor","query_ctrl_TestDataQueryCtrl","TestDataQueryCtrl","$scope","$injector","showLabels","scenarioList","newPointTime","selectedPoint","$inject","getPoints","lodash_default","a","point","index","format","pointSelected","option","deletePoint","splice","refresh","addPoint","newPointValue","sortBy","p","$onInit","scenario","find","scenarioChanged","stringInput","includes","defaults","pulseWave","csvWave","streamChanged","templateUrl","sdk","TestInfoTab_TestInfoTab","props","TestInfoTab","render","react_default","createElement","className","href","rel","ConfigEditor_ConfigEditor","arguments","ConfigEditor","__webpack_require__","d","__webpack_exports__","module_plugin","TestDataAnnotationsQueryCtrl","template","setConfigEditor","setQueryCtrl","setAnnotationQueryCtrl","addConfigPage","title","icon"],"mappings":"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","file":"testDataDSPlugin.3932bda029d2299a9d96.js","sourcesContent":["export interface TreeNode {\n  name: string;\n  children: TreeNode[];\n}\n\n/*\n *  Builds a nested tree like\n *  [\n *    {\n *      name: 'A',\n *      children: [\n *        { name: 'AA', children: [] },\n *        { name: 'AB', children: [] },\n *      ]\n *    }\n *  ]\n */\nfunction buildMetricTree(parent: string, depth: number): TreeNode[] {\n  const chars = ['A', 'B', 'C'];\n  const children: TreeNode[] = [];\n\n  if (depth > 3) {\n    return [];\n  }\n\n  for (const letter of chars) {\n    const nodeName = `${parent}${letter}`;\n    children.push({\n      name: nodeName,\n      children: buildMetricTree(nodeName, depth + 1),\n    });\n  }\n\n  return children;\n}\n\nfunction queryTree(children: TreeNode[], query: string[], queryIndex: number): TreeNode[] {\n  if (query[queryIndex] === '*') {\n    return children;\n  }\n\n  const nodeQuery = query[queryIndex];\n  let result: TreeNode[] = [];\n  let namesToMatch = [nodeQuery];\n\n  // handle glob queries\n  if (nodeQuery.startsWith('{')) {\n    namesToMatch = nodeQuery.replace(/\\{|\\}/g, '').split(',');\n  }\n\n  for (const node of children) {\n    for (const nameToMatch of namesToMatch) {\n      if (node.name === nameToMatch) {\n        result = result.concat(queryTree(node.children, query, queryIndex + 1));\n      }\n    }\n  }\n\n  return result;\n}\n\nexport function queryMetricTree(query: string): TreeNode[] {\n  const children = buildMetricTree('', 0);\n  return queryTree(children, query.split('.'), 0);\n}\n","import { LogLevel } from '@grafana/data';\n\nlet index = 0;\n\nexport function getRandomLogLevel(): LogLevel {\n  const v = Math.random();\n  if (v > 0.9) {\n    return LogLevel.critical;\n  }\n  if (v > 0.8) {\n    return LogLevel.error;\n  }\n  if (v > 0.7) {\n    return LogLevel.warning;\n  }\n  if (v > 0.4) {\n    return LogLevel.info;\n  }\n  if (v > 0.3) {\n    return LogLevel.debug;\n  }\n  if (v > 0.1) {\n    return LogLevel.trace;\n  }\n  return LogLevel.unknown;\n}\n\nexport function getNextWord() {\n  index = (index + Math.floor(Math.random() * 5)) % words.length;\n  return words[index];\n}\n\nexport function getRandomLine(length = 60) {\n  let line = getNextWord();\n  while (line.length < length) {\n    line += ' ' + getNextWord();\n  }\n  return line;\n}\n\nconst words = [\n  'At',\n  'vero',\n  'eos',\n  'et',\n  'accusamus',\n  'et',\n  'iusto',\n  'odio',\n  'dignissimos',\n  'ducimus',\n  'qui',\n  'blanditiis',\n  'praesentium',\n  'voluptatum',\n  'deleniti',\n  'atque',\n  'corrupti',\n  'quos',\n  'dolores',\n  'et',\n  'quas',\n  'molestias',\n  'excepturi',\n  'sint',\n  'occaecati',\n  'cupiditate',\n  'non',\n  'provident',\n  'similique',\n  'sunt',\n  'in',\n  'culpa',\n  'qui',\n  'officia',\n  'deserunt',\n  'mollitia',\n  'animi',\n  'id',\n  'est',\n  'laborum',\n  'et',\n  'dolorum',\n  'fuga',\n  'Et',\n  'harum',\n  'quidem',\n  'rerum',\n  'facilis',\n  'est',\n  'et',\n  'expedita',\n  'distinctio',\n  'Nam',\n  'libero',\n  'tempore',\n  'cum',\n  'soluta',\n  'nobis',\n  'est',\n  'eligendi',\n  'optio',\n  'cumque',\n  'nihil',\n  'impedit',\n  'quo',\n  'minus',\n  'id',\n  'quod',\n  'maxime',\n  'placeat',\n  'facere',\n  'possimus',\n  'omnis',\n  'voluptas',\n  'assumenda',\n  'est',\n  'omnis',\n  'dolor',\n  'repellendus',\n  'Temporibus',\n  'autem',\n  'quibusdam',\n  'et',\n  'aut',\n  'officiis',\n  'debitis',\n  'aut',\n  'rerum',\n  'necessitatibus',\n  'saepe',\n  'eveniet',\n  'ut',\n  'et',\n  'voluptates',\n  'repudiandae',\n  'sint',\n  'et',\n  'molestiae',\n  'non',\n  'recusandae',\n  'Itaque',\n  'earum',\n  'rerum',\n  'hic',\n  'tenetur',\n  'a',\n  'sapiente',\n  'delectus',\n  'ut',\n  'aut',\n  'reiciendis',\n  'voluptatibus',\n  'maiores',\n  'alias',\n  'consequatur',\n  'aut',\n  'perferendis',\n  'doloribus',\n  'asperiores',\n  'repellat',\n];\n","import { defaults } from 'lodash';\nimport { Observable } from 'rxjs';\n\nimport { DataQueryRequest, DataQueryResponse } from '@grafana/ui';\n\nimport { FieldType, CircularDataFrame, CSVReader, Field, LoadingState } from '@grafana/data';\n\nimport { TestDataQuery, StreamingQuery } from './types';\nimport { getRandomLine } from './LogIpsum';\n\nexport const defaultQuery: StreamingQuery = {\n  type: 'signal',\n  speed: 250, // ms\n  spread: 3.5,\n  noise: 2.2,\n  bands: 1,\n};\n\nexport function runStream(target: TestDataQuery, req: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n  const query = defaults(target.stream, defaultQuery);\n  if ('signal' === query.type) {\n    return runSignalStream(target, query, req);\n  }\n  if ('logs' === query.type) {\n    return runLogsStream(target, query, req);\n  }\n  if ('fetch' === query.type) {\n    return runFetchStream(target, query, req);\n  }\n  throw new Error(`Unknown Stream Type: ${query.type}`);\n}\n\nexport function runSignalStream(\n  target: TestDataQuery,\n  query: StreamingQuery,\n  req: DataQueryRequest<TestDataQuery>\n): Observable<DataQueryResponse> {\n  return new Observable<DataQueryResponse>(subscriber => {\n    const streamId = `signal-${req.panelId}-${target.refId}`;\n    const maxDataPoints = req.maxDataPoints || 1000;\n\n    const data = new CircularDataFrame({\n      append: 'tail',\n      capacity: maxDataPoints,\n    });\n    data.refId = target.refId;\n    data.name = target.alias || 'Signal ' + target.refId;\n    data.addField({ name: 'time', type: FieldType.time });\n    data.addField({ name: 'value', type: FieldType.number });\n\n    const { spread, speed, bands, noise } = query;\n\n    for (let i = 0; i < bands; i++) {\n      const suffix = bands > 1 ? ` ${i + 1}` : '';\n      data.addField({ name: 'Min' + suffix, type: FieldType.number });\n      data.addField({ name: 'Max' + suffix, type: FieldType.number });\n    }\n\n    let value = Math.random() * 100;\n    let timeoutId: any = null;\n\n    const addNextRow = (time: number) => {\n      value += (Math.random() - 0.5) * spread;\n\n      let idx = 0;\n      data.fields[idx++].values.add(time);\n      data.fields[idx++].values.add(value);\n\n      let min = value;\n      let max = value;\n\n      for (let i = 0; i < bands; i++) {\n        min = min - Math.random() * noise;\n        max = max + Math.random() * noise;\n\n        data.fields[idx++].values.add(min);\n        data.fields[idx++].values.add(max);\n      }\n    };\n\n    // Fill the buffer on init\n    if (true) {\n      let time = Date.now() - maxDataPoints * speed;\n      for (let i = 0; i < maxDataPoints; i++) {\n        addNextRow(time);\n        time += speed;\n      }\n    }\n\n    const pushNextEvent = () => {\n      addNextRow(Date.now());\n      subscriber.next({\n        data: [data],\n        key: streamId,\n      });\n\n      timeoutId = setTimeout(pushNextEvent, speed);\n    };\n\n    // Send first event in 5ms\n    setTimeout(pushNextEvent, 5);\n\n    return () => {\n      console.log('unsubscribing to stream ' + streamId);\n      clearTimeout(timeoutId);\n    };\n  });\n}\n\nexport function runLogsStream(\n  target: TestDataQuery,\n  query: StreamingQuery,\n  req: DataQueryRequest<TestDataQuery>\n): Observable<DataQueryResponse> {\n  return new Observable<DataQueryResponse>(subscriber => {\n    const streamId = `logs-${req.panelId}-${target.refId}`;\n    const maxDataPoints = req.maxDataPoints || 1000;\n\n    const data = new CircularDataFrame({\n      append: 'tail',\n      capacity: maxDataPoints,\n    });\n    data.refId = target.refId;\n    data.name = target.alias || 'Logs ' + target.refId;\n    data.addField({ name: 'time', type: FieldType.time });\n    data.addField({ name: 'line', type: FieldType.string });\n\n    const { speed } = query;\n\n    let timeoutId: any = null;\n\n    const pushNextEvent = () => {\n      data.values.time.add(Date.now());\n      data.values.line.add(getRandomLine());\n\n      subscriber.next({\n        data: [data],\n        key: streamId,\n      });\n\n      timeoutId = setTimeout(pushNextEvent, speed);\n    };\n\n    // Send first event in 5ms\n    setTimeout(pushNextEvent, 5);\n\n    return () => {\n      console.log('unsubscribing to stream ' + streamId);\n      clearTimeout(timeoutId);\n    };\n  });\n}\n\nexport function runFetchStream(\n  target: TestDataQuery,\n  query: StreamingQuery,\n  req: DataQueryRequest<TestDataQuery>\n): Observable<DataQueryResponse> {\n  return new Observable<DataQueryResponse>(subscriber => {\n    const streamId = `fetch-${req.panelId}-${target.refId}`;\n    const maxDataPoints = req.maxDataPoints || 1000;\n\n    let data = new CircularDataFrame({\n      append: 'tail',\n      capacity: maxDataPoints,\n    });\n    data.refId = target.refId;\n    data.name = target.alias || 'Fetch ' + target.refId;\n\n    let reader: ReadableStreamReader<Uint8Array>;\n    const csv = new CSVReader({\n      callback: {\n        onHeader: (fields: Field[]) => {\n          // Clear any existing fields\n          if (data.fields.length) {\n            data = new CircularDataFrame({\n              append: 'tail',\n              capacity: maxDataPoints,\n            });\n            data.refId = target.refId;\n            data.name = 'Fetch ' + target.refId;\n          }\n          for (const field of fields) {\n            data.addField(field);\n          }\n        },\n        onRow: (row: any[]) => {\n          data.add(row);\n        },\n      },\n    });\n\n    const processChunk = (value: ReadableStreamReadResult<Uint8Array>): any => {\n      if (value.value) {\n        const text = new TextDecoder().decode(value.value);\n        csv.readCSV(text);\n      }\n\n      subscriber.next({\n        data: [data],\n        key: streamId,\n        state: value.done ? LoadingState.Done : LoadingState.Streaming,\n      });\n\n      if (value.done) {\n        console.log('Finished stream');\n        subscriber.complete(); // necessary?\n        return;\n      }\n\n      return reader.read().then(processChunk);\n    };\n\n    fetch(new Request(query.url)).then(response => {\n      reader = response.body.getReader();\n      reader.read().then(processChunk);\n    });\n\n    return () => {\n      // Cancel fetch?\n      console.log('unsubscribing to stream ' + streamId);\n    };\n  });\n}\n","import _ from 'lodash';\nimport {\n  DataSourceApi,\n  DataQueryRequest,\n  DataSourceInstanceSettings,\n  DataQueryResponse,\n  MetricFindValue,\n} from '@grafana/ui';\nimport { TableData, TimeSeries } from '@grafana/data';\nimport { TestDataQuery, Scenario } from './types';\nimport { getBackendSrv } from 'app/core/services/backend_srv';\nimport { queryMetricTree } from './metricTree';\nimport { Observable, from, merge } from 'rxjs';\nimport { runStream } from './runStreams';\nimport templateSrv from 'app/features/templating/template_srv';\n\ntype TestData = TimeSeries | TableData;\n\nexport class TestDataDataSource extends DataSourceApi<TestDataQuery> {\n  constructor(instanceSettings: DataSourceInstanceSettings) {\n    super(instanceSettings);\n  }\n\n  query(options: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n    const queries: any[] = [];\n    const streams: Array<Observable<DataQueryResponse>> = [];\n\n    // Start streams and prepare queries\n    for (const target of options.targets) {\n      if (target.scenarioId === 'streaming_client') {\n        streams.push(runStream(target, options));\n      } else {\n        queries.push({\n          ...target,\n          intervalMs: options.intervalMs,\n          maxDataPoints: options.maxDataPoints,\n          datasourceId: this.id,\n          alias: templateSrv.replace(target.alias || ''),\n        });\n      }\n    }\n\n    if (queries.length) {\n      const req: Promise<DataQueryResponse> = getBackendSrv()\n        .datasourceRequest({\n          method: 'POST',\n          url: '/api/tsdb/query',\n          data: {\n            from: options.range.from.valueOf().toString(),\n            to: options.range.to.valueOf().toString(),\n            queries: queries,\n          },\n          // This sets up a cancel token\n          requestId: options.requestId,\n        })\n        .then((res: any) => this.processQueryResult(queries, res));\n\n      streams.push(from(req));\n    }\n\n    return merge(...streams);\n  }\n\n  processQueryResult(queries: any, res: any): DataQueryResponse {\n    const data: TestData[] = [];\n\n    for (const query of queries) {\n      const results = res.data.results[query.refId];\n\n      for (const t of results.tables || []) {\n        const table = t as TableData;\n        table.refId = query.refId;\n        table.name = query.alias;\n        data.push(table);\n      }\n\n      for (const series of results.series || []) {\n        data.push({ target: series.name, datapoints: series.points, refId: query.refId, tags: series.tags });\n      }\n    }\n\n    return { data };\n  }\n\n  annotationQuery(options: any) {\n    let timeWalker = options.range.from.valueOf();\n    const to = options.range.to.valueOf();\n    const events = [];\n    const eventCount = 10;\n    const step = (to - timeWalker) / eventCount;\n\n    for (let i = 0; i < eventCount; i++) {\n      events.push({\n        annotation: options.annotation,\n        time: timeWalker,\n        text: 'This is the text, <a href=\"https://grafana.com\">Grafana.com</a>',\n        tags: ['text', 'server'],\n      });\n      timeWalker += step;\n    }\n    return Promise.resolve(events);\n  }\n\n  getQueryDisplayText(query: TestDataQuery) {\n    if (query.alias) {\n      return query.scenarioId + ' as ' + query.alias;\n    }\n    return query.scenarioId;\n  }\n\n  testDatasource() {\n    return Promise.resolve({\n      status: 'success',\n      message: 'Data source is working',\n    });\n  }\n\n  getScenarios(): Promise<Scenario[]> {\n    return getBackendSrv().get('/api/tsdb/testdata/scenarios');\n  }\n\n  metricFindQuery(query: string) {\n    return new Promise<MetricFindValue[]>((resolve, reject) => {\n      setTimeout(() => {\n        const children = queryMetricTree(templateSrv.replace(query));\n        const items = children.map(item => ({ value: item.name, text: item.name }));\n        resolve(items);\n      }, 100);\n    });\n  }\n}\n","import _ from 'lodash';\n\nimport { QueryCtrl } from 'app/plugins/sdk';\nimport { defaultQuery } from './runStreams';\nimport { getBackendSrv } from 'app/core/services/backend_srv';\nimport { dateTime } from '@grafana/data';\n\nexport const defaultPulse: any = {\n  timeStep: 60,\n  onCount: 3,\n  onValue: 2,\n  offCount: 3,\n  offValue: 1,\n};\n\nexport const defaultCSVWave: any = {\n  timeStep: 60,\n  valuesCSV: '0,0,2,2,1,1',\n};\n\nconst showLabelsFor = ['random_walk', 'predictable_pulse', 'predictable_csv_wave'];\n\nexport class TestDataQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  scenarioList: any;\n  scenario: any;\n  newPointValue: number;\n  newPointTime: any;\n  selectedPoint: any;\n\n  showLabels = false;\n\n  /** @ngInject */\n  constructor($scope: any, $injector: any) {\n    super($scope, $injector);\n\n    this.target.scenarioId = this.target.scenarioId || 'random_walk';\n    this.scenarioList = [];\n    this.newPointTime = dateTime();\n    this.selectedPoint = { text: 'Select point', value: null };\n    this.showLabels = showLabelsFor.includes(this.target.scenarioId);\n  }\n\n  getPoints() {\n    return _.map(this.target.points, (point, index) => {\n      return {\n        text: dateTime(point[1]).format('MMMM Do YYYY, H:mm:ss') + ' : ' + point[0],\n        value: index,\n      };\n    });\n  }\n\n  pointSelected(option: any) {\n    this.selectedPoint = option;\n  }\n\n  deletePoint() {\n    this.target.points.splice(this.selectedPoint.value, 1);\n    this.selectedPoint = { text: 'Select point', value: null };\n    this.refresh();\n  }\n\n  addPoint() {\n    this.target.points = this.target.points || [];\n    this.target.points.push([this.newPointValue, this.newPointTime.valueOf()]);\n    this.target.points = _.sortBy(this.target.points, p => p[1]);\n    this.refresh();\n  }\n\n  $onInit() {\n    return getBackendSrv()\n      .get('/api/tsdb/testdata/scenarios')\n      .then((res: any) => {\n        this.scenarioList = res;\n        this.scenario = _.find(this.scenarioList, { id: this.target.scenarioId });\n      });\n  }\n\n  scenarioChanged() {\n    this.scenario = _.find(this.scenarioList, { id: this.target.scenarioId });\n    this.target.stringInput = this.scenario.stringInput;\n    this.showLabels = showLabelsFor.includes(this.target.scenarioId);\n\n    if (this.target.scenarioId === 'manual_entry') {\n      this.target.points = this.target.points || [];\n    } else {\n      delete this.target.points;\n    }\n\n    if (this.target.scenarioId === 'streaming_client') {\n      this.target.stream = _.defaults(this.target.stream || {}, defaultQuery);\n    } else {\n      delete this.target.stream;\n    }\n\n    if (this.target.scenarioId === 'predictable_pulse') {\n      this.target.pulseWave = _.defaults(this.target.pulseWave || {}, defaultPulse);\n    } else {\n      delete this.target.pulseWave;\n    }\n\n    if (this.target.scenarioId === 'predictable_csv_wave') {\n      this.target.csvWave = _.defaults(this.target.csvWave || {}, defaultCSVWave);\n    } else {\n      delete this.target.csvWave;\n    }\n\n    this.refresh();\n  }\n\n  streamChanged() {\n    this.refresh();\n  }\n}\n","// Libraries\nimport React, { PureComponent } from 'react';\n\n// Types\nimport { PluginConfigPageProps, DataSourcePlugin } from '@grafana/ui';\nimport { TestDataDataSource } from './datasource';\n\ninterface Props extends PluginConfigPageProps<DataSourcePlugin<TestDataDataSource>> {}\n\nexport class TestInfoTab extends PureComponent<Props> {\n  constructor(props: Props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div>\n        See github for more information about setting up a reproducable test environment.\n        <br />\n        <br />\n        <a\n          className=\"btn btn-inverse\"\n          href=\"https://github.com/grafana/grafana/tree/master/devenv\"\n          target=\"_blank\"\n          rel=\"noopener\"\n        >\n          Github\n        </a>\n        <br />\n      </div>\n    );\n  }\n}\n","// Libraries\nimport React, { PureComponent } from 'react';\n\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/ui';\n\ntype Props = DataSourcePluginOptionsEditorProps<any>;\n\n/**\n * Empty Config Editor -- settings to save\n */\nexport class ConfigEditor extends PureComponent<Props> {\n  render() {\n    return <div />;\n  }\n}\n","import { DataSourcePlugin } from '@grafana/ui';\nimport { TestDataDataSource } from './datasource';\nimport { TestDataQueryCtrl } from './query_ctrl';\nimport { TestInfoTab } from './TestInfoTab';\nimport { ConfigEditor } from './ConfigEditor';\n\nclass TestDataAnnotationsQueryCtrl {\n  annotation: any;\n  constructor() {}\n  static template = '<h2>Annotation scenario</h2>';\n}\n\nexport const plugin = new DataSourcePlugin(TestDataDataSource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryCtrl(TestDataQueryCtrl)\n  .setAnnotationQueryCtrl(TestDataAnnotationsQueryCtrl)\n  .addConfigPage({\n    title: 'Setup',\n    icon: 'fa fa-list-alt',\n    body: TestInfoTab,\n    id: 'setup',\n  });\n"],"sourceRoot":""}