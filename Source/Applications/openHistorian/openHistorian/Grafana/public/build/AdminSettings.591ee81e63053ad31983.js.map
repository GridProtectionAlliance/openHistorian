{"version":3,"sources":["webpack:///./public/app/features/admin/AdminSettings.tsx"],"names":["AdminSettings","state","settings","isLoading","getBackendSrv","get","this","setState","navModel","props","Contents","className","style","margin","Object","entries","map","i","sectionName","sectionSettings","Fragment","key","j","settingName","settingValue","paddingLeft","whiteSpace","React","PureComponent","hot","module","connect","getNavModel","navIndex"],"mappings":"quDAsBO,IAAMA,EAAb,6KACEC,MAAe,CACbC,SAAU,GACVC,WAAW,GAHf,E,YAAA,S,kOAAA,M,EAAA,G,EAAA,iC,EAAA,4IAOqCC,0BAAgBC,IAAI,uBAPzD,OAOUH,EAPV,OAQII,KAAKC,SAAS,CACZL,WACAC,WAAW,IAVjB,iD,8KAAA,4EAcW,MACyBG,KAAKL,MAA7BC,EADD,EACCA,SAAUC,EADX,EACWA,UACVK,EAAaF,KAAKG,MAAlBD,SAER,OACE,kBAAC,IAAD,CAAMA,SAAUA,GACd,kBAAC,IAAKE,SAAN,CAAeP,UAAWA,GACxB,yBAAKQ,UAAU,yBAAyBC,MAAO,CAAEC,OAAQ,kBAAzD,2JAKA,2BAAOF,UAAU,gBACf,+BACGG,OAAOC,QAAQb,GAAUc,KAAI,WAAiCC,GAAjC,aAAEC,EAAF,KAAeC,EAAf,YAC5B,kBAAC,IAAMC,SAAP,CAAgBC,IAAG,kBAAaJ,IAC9B,4BACE,wBAAIN,UAAU,0BAA0BO,GACxC,8BAEDJ,OAAOC,QAAQI,GAAiBH,KAAI,WAA8BM,GAA9B,aAAEC,EAAF,KAAeC,EAAf,YACnC,wBAAIH,IAAG,mBAAcC,IACnB,wBAAIV,MAAO,CAAEa,YAAa,SAAWF,GACrC,wBAAIX,MAAO,CAAEc,WAAY,iBAAmBF,oB,2BArClE,GAAmCG,IAAMC,eAsD1BC,wBAAIC,EAAJD,CAAYE,mBAJH,SAAC9B,GAAD,MAAwB,CAC9CO,SAAUwB,YAAY/B,EAAMgC,SAAU,sBAGbF,CAAyB/B,K","file":"AdminSettings.591ee81e63053ad31983.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { hot } from 'react-hot-loader';\n\nimport { getBackendSrv } from '@grafana/runtime';\nimport { NavModel } from '@grafana/data';\n\nimport { StoreState } from 'app/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport Page from 'app/core/components/Page/Page';\n\ntype Settings = { [key: string]: { [key: string]: string } };\n\ninterface Props {\n  navModel: NavModel;\n}\n\ninterface State {\n  settings: Settings;\n  isLoading: boolean;\n}\n\nexport class AdminSettings extends React.PureComponent<Props, State> {\n  state: State = {\n    settings: {},\n    isLoading: true,\n  };\n\n  async componentDidMount() {\n    const settings: Settings = await getBackendSrv().get('/api/admin/settings');\n    this.setState({\n      settings,\n      isLoading: false,\n    });\n  }\n\n  render() {\n    const { settings, isLoading } = this.state;\n    const { navModel } = this.props;\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={isLoading}>\n          <div className=\"grafana-info-box span8\" style={{ margin: '20px 0 25px 0' }}>\n            These system settings are defined in grafana.ini or custom.ini (or overridden in ENV variables). To change\n            these you currently need to restart grafana.\n          </div>\n\n          <table className=\"filter-table\">\n            <tbody>\n              {Object.entries(settings).map(([sectionName, sectionSettings], i) => (\n                <React.Fragment key={`section-${i}`}>\n                  <tr>\n                    <td className=\"admin-settings-section\">{sectionName}</td>\n                    <td />\n                  </tr>\n                  {Object.entries(sectionSettings).map(([settingName, settingValue], j) => (\n                    <tr key={`property-${j}`}>\n                      <td style={{ paddingLeft: '25px' }}>{settingName}</td>\n                      <td style={{ whiteSpace: 'break-spaces' }}>{settingValue}</td>\n                    </tr>\n                  ))}\n                </React.Fragment>\n              ))}\n            </tbody>\n          </table>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nconst mapStateToProps = (state: StoreState) => ({\n  navModel: getNavModel(state.navIndex, 'server-settings'),\n});\n\nexport default hot(module)(connect(mapStateToProps)(AdminSettings));\n"],"sourceRoot":""}