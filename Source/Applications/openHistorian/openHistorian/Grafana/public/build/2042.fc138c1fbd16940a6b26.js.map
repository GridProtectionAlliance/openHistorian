{"version":3,"file":"2042.fc138c1fbd16940a6b26.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/components/rule-list/RuleListIcon.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-list/AlertRuleListItem.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-list/EvaluationGroup.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-list/EvaluationGroupWithRules.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-list/Namespace.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-list/RuleList.v2.tsx"],"sourcesContent":["import type { RequireAtLeastOne } from 'type-fest';\n\nimport { Tooltip, type IconName, Text, Icon } from '@grafana/ui';\nimport type { TextProps } from '@grafana/ui/src/components/Text/Text';\nimport type { RuleHealth } from 'app/types/unified-alerting';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\n\nimport { isErrorHealth } from '../rule-viewer/RuleViewer';\n\ninterface RuleListIconProps {\n  recording?: boolean;\n  state?: PromAlertingRuleState;\n  health?: RuleHealth;\n  isPaused?: boolean;\n}\n\n/**\n * Make sure that the order of importance here matches the one we use in the StateBadge component for the detail view\n */\nexport function RuleListIcon({\n  state,\n  health,\n  recording = false,\n  isPaused = false,\n}: RequireAtLeastOne<RuleListIconProps>) {\n  const icons: Record<PromAlertingRuleState, IconName> = {\n    [PromAlertingRuleState.Inactive]: 'check-circle',\n    [PromAlertingRuleState.Pending]: 'circle',\n    [PromAlertingRuleState.Firing]: 'exclamation-circle',\n  };\n\n  const color: Record<PromAlertingRuleState, 'success' | 'error' | 'warning'> = {\n    [PromAlertingRuleState.Inactive]: 'success',\n    [PromAlertingRuleState.Pending]: 'warning',\n    [PromAlertingRuleState.Firing]: 'error',\n  };\n\n  const stateNames: Record<PromAlertingRuleState, string> = {\n    [PromAlertingRuleState.Inactive]: 'Normal',\n    [PromAlertingRuleState.Pending]: 'Pending',\n    [PromAlertingRuleState.Firing]: 'Firing',\n  };\n\n  let iconName: IconName = state ? icons[state] : 'circle';\n  let iconColor: TextProps['color'] = state ? color[state] : 'secondary';\n  let stateName: string = state ? stateNames[state] : 'unknown';\n\n  if (recording) {\n    iconName = 'record-audio';\n    iconColor = 'success';\n    stateName = 'Recording';\n  }\n\n  if (health === 'nodata') {\n    iconName = 'exclamation-triangle';\n    iconColor = 'warning';\n    stateName = 'Insufficient data';\n  }\n\n  if (isErrorHealth(health)) {\n    iconName = 'times-circle';\n    iconColor = 'error';\n    stateName = 'Failed to evaluate rule';\n  }\n\n  if (isPaused) {\n    iconName = 'pause-circle';\n    iconColor = 'warning';\n    stateName = 'Paused';\n  }\n\n  return (\n    <Tooltip content={stateName} placement=\"right\">\n      <div>\n        <Text color={iconColor}>\n          <Icon name={iconName} size=\"lg\" />\n        </Text>\n      </div>\n    </Tooltip>\n  );\n}\n","import { css } from '@emotion/css';\nimport { isEmpty } from 'lodash';\nimport pluralize from 'pluralize';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2, Stack, Text, TextLink, Dropdown, Button, Menu, Alert } from '@grafana/ui';\nimport { CombinedRule, RuleHealth } from 'app/types/unified-alerting';\nimport { Labels, PromAlertingRuleState } from 'app/types/unified-alerting-dto';\n\nimport { logError } from '../../Analytics';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { labelsSize } from '../../utils/labels';\nimport { createContactPointLink } from '../../utils/misc';\nimport { MetaText } from '../MetaText';\nimport MoreButton from '../MoreButton';\nimport { Spacer } from '../Spacer';\n\nimport { RuleListIcon } from './RuleListIcon';\nimport { calculateNextEvaluationEstimate } from './util';\n\ninterface AlertRuleListItemProps {\n  name: string;\n  href: string;\n  summary?: string;\n  error?: string;\n  state?: PromAlertingRuleState;\n  isPaused?: boolean;\n  health?: RuleHealth;\n  isProvisioned?: boolean;\n  lastEvaluation?: string;\n  evaluationInterval?: string;\n  labels?: Labels;\n  instancesCount?: number;\n  // used for alert rules that use simplified routing\n  contactPoint?: string;\n}\n\nexport const AlertRuleListItem = (props: AlertRuleListItemProps) => {\n  const {\n    name,\n    summary,\n    state,\n    health,\n    error,\n    href,\n    isProvisioned,\n    lastEvaluation,\n    evaluationInterval,\n    isPaused = false,\n    instancesCount = 0,\n    contactPoint,\n    labels,\n  } = props;\n  const styles = useStyles2(getStyles);\n\n  return (\n    <li className={styles.alertListItemContainer} role=\"treeitem\" aria-selected=\"false\">\n      <Stack direction=\"row\" alignItems=\"start\" gap={1} wrap=\"nowrap\">\n        <RuleListIcon state={state} health={health} isPaused={isPaused} />\n        <Stack direction=\"column\" gap={0.5} flex=\"1\">\n          <div>\n            <Stack direction=\"column\" gap={0}>\n              <Stack direction=\"row\" alignItems=\"start\">\n                <TextLink href={href} inline={false}>\n                  {name}\n                </TextLink>\n                {/* let's not show labels for now, but maybe users would be interested later? Or maybe show them only in the list view? */}\n                {/* {labels && <AlertLabels labels={labels} size=\"xs\" />} */}\n              </Stack>\n              <Summary content={summary} error={error} />\n            </Stack>\n          </div>\n          <div>\n            <Stack direction=\"row\" gap={1}>\n              {/* show evaluation-related metadata if the rule isn't paused – paused rules don't have instances and shouldn't show evaluation timestamps */}\n              {!isPaused && (\n                <>\n                  <EvaluationMetadata\n                    lastEvaluation={lastEvaluation}\n                    evaluationInterval={evaluationInterval}\n                    state={state}\n                  />\n                  <MetaText icon=\"layers-alt\">\n                    <TextLink href={href + '?tab=instances'} variant=\"bodySmall\" color=\"primary\" inline={false}>\n                      {pluralize('instance', instancesCount, true)}\n                    </TextLink>\n                  </MetaText>\n                </>\n              )}\n\n              {/* show label count */}\n              {!isEmpty(labels) && (\n                <MetaText icon=\"tag-alt\">\n                  <TextLink href={href} variant=\"bodySmall\" color=\"primary\" inline={false}>\n                    {pluralize('label', labelsSize(labels), true)}\n                  </TextLink>\n                </MetaText>\n              )}\n\n              {/* show if the alert rule is using direct contact point or notification policy routing, not for paused rules or recording rules */}\n              {contactPoint && !isPaused && (\n                <MetaText icon=\"at\">\n                  Delivered to{' '}\n                  <TextLink\n                    href={createContactPointLink(contactPoint, GRAFANA_RULES_SOURCE_NAME)}\n                    variant=\"bodySmall\"\n                    color=\"primary\"\n                    inline={false}\n                  >\n                    {contactPoint}\n                  </TextLink>\n                </MetaText>\n              )}\n            </Stack>\n          </div>\n        </Stack>\n\n        <Stack direction=\"row\" alignItems=\"center\" gap={1} wrap=\"nowrap\">\n          <Button variant=\"secondary\" size=\"sm\" icon=\"pen\" type=\"button\" disabled={isProvisioned}>\n            Edit\n          </Button>\n          <Dropdown\n            overlay={\n              <Menu>\n                <Menu.Item label=\"Silence\" icon=\"bell-slash\" />\n                <Menu.Divider />\n                <Menu.Item label=\"Export\" disabled={isProvisioned} icon=\"download-alt\" />\n                <Menu.Item label=\"Delete\" disabled={isProvisioned} icon=\"trash-alt\" destructive />\n              </Menu>\n            }\n          >\n            <MoreButton />\n          </Dropdown>\n        </Stack>\n      </Stack>\n    </li>\n  );\n};\n\ninterface SummaryProps {\n  content?: string;\n  error?: string;\n}\n\nfunction Summary({ content, error }: SummaryProps) {\n  if (error) {\n    return (\n      <Text variant=\"bodySmall\" color=\"error\" weight=\"light\" truncate>\n        {error}\n      </Text>\n    );\n  }\n  if (content) {\n    return (\n      <Text variant=\"bodySmall\" color=\"secondary\">\n        {content}\n      </Text>\n    );\n  }\n\n  return null;\n}\n\n// @TODO use Pick<> or Omit<> here\ninterface RecordingRuleListItemProps {\n  name: string;\n  href: string;\n  error?: string;\n  health?: RuleHealth;\n  state?: PromAlertingRuleState;\n  labels?: Labels;\n  isProvisioned?: boolean;\n  lastEvaluation?: string;\n  evaluationInterval?: string;\n}\n\n// @TODO split in to smaller re-usable bits\nexport const RecordingRuleListItem = ({\n  name,\n  error,\n  state,\n  health,\n  isProvisioned,\n  href,\n  labels,\n  lastEvaluation,\n  evaluationInterval,\n}: RecordingRuleListItemProps) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <li className={styles.alertListItemContainer} role=\"treeitem\" aria-selected=\"false\">\n      <Stack direction=\"row\" alignItems=\"center\" gap={1}>\n        <Stack direction=\"row\" alignItems=\"start\" gap={1} flex=\"1\">\n          <RuleListIcon health={health} recording />\n          <Stack direction=\"column\" gap={0.5}>\n            <Stack direction=\"column\" gap={0}>\n              <Stack direction=\"row\" alignItems=\"start\">\n                <TextLink href={href} variant=\"body\" weight=\"bold\" inline={false}>\n                  {name}\n                </TextLink>\n                {/* {labels && <AlertLabels labels={labels} size=\"xs\" />} */}\n              </Stack>\n              <Summary error={error} />\n            </Stack>\n            <div>\n              <Stack direction=\"row\" gap={1}>\n                <EvaluationMetadata\n                  lastEvaluation={lastEvaluation}\n                  evaluationInterval={evaluationInterval}\n                  state={state}\n                />\n                {!isEmpty(labels) && (\n                  <MetaText icon=\"tag-alt\">\n                    <TextLink variant=\"bodySmall\" color=\"primary\" href={href} inline={false}>\n                      {pluralize('label', labelsSize(labels), true)}\n                    </TextLink>\n                  </MetaText>\n                )}\n              </Stack>\n            </div>\n          </Stack>\n          <Spacer />\n          <Button\n            variant=\"secondary\"\n            size=\"sm\"\n            icon=\"pen\"\n            type=\"button\"\n            disabled={isProvisioned}\n            data-testid=\"edit-rule-action\"\n          >\n            Edit\n          </Button>\n          <Dropdown\n            overlay={\n              <Menu>\n                <Menu.Item label=\"Export\" disabled={isProvisioned} icon=\"download-alt\" />\n                <Menu.Item label=\"Delete\" disabled={isProvisioned} icon=\"trash-alt\" destructive />\n              </Menu>\n            }\n          >\n            <MoreButton />\n          </Dropdown>\n        </Stack>\n      </Stack>\n    </li>\n  );\n};\n\ninterface EvaluationMetadataProps {\n  lastEvaluation?: string;\n  evaluationInterval?: string;\n  state?: PromAlertingRuleState;\n}\n\nfunction EvaluationMetadata({ lastEvaluation, evaluationInterval, state }: EvaluationMetadataProps) {\n  const nextEvaluation = calculateNextEvaluationEstimate(lastEvaluation, evaluationInterval);\n\n  // @TODO support firing for calculation\n  if (state === PromAlertingRuleState.Firing && nextEvaluation) {\n    const firingFor = '2m 34s';\n\n    return (\n      <MetaText icon=\"clock-nine\">\n        Firing for <Text color=\"primary\">{firingFor}</Text>\n        {nextEvaluation && <>· next evaluation in {nextEvaluation.humanized}</>}\n      </MetaText>\n    );\n  }\n\n  // for recording rules and normal or pending state alert rules we just show when we evaluated last and how long that took\n  if (nextEvaluation) {\n    return <MetaText icon=\"clock-nine\">Next evaluation {nextEvaluation.humanized}</MetaText>;\n  }\n\n  return null;\n}\n\ninterface UnknownRuleListItemProps {\n  rule: CombinedRule;\n}\n\nexport const UnknownRuleListItem = ({ rule }: UnknownRuleListItemProps) => {\n  const styles = useStyles2(getStyles);\n\n  const ruleContext = { namespace: rule.namespace.name, group: rule.group.name, name: rule.name };\n  logError(new Error('unknown rule type'), ruleContext);\n\n  return (\n    <Alert title={'Unknown rule type'} className={styles.resetMargin}>\n      <details>\n        <summary>Rule definition</summary>\n        <pre>\n          <code>{JSON.stringify(rule.rulerRule, null, 2)}</code>\n        </pre>\n      </details>\n    </Alert>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  alertListItemContainer: css({\n    position: 'relative',\n    listStyle: 'none',\n    background: theme.colors.background.primary,\n\n    borderBottom: `solid 1px ${theme.colors.border.weak}`,\n    padding: theme.spacing(1, 1, 1, 1.5),\n  }),\n  resetMargin: css({\n    margin: 0,\n  }),\n});\n","import { css, cx } from '@emotion/css';\nimport { PropsWithChildren } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2, Badge, Button, Dropdown, Menu, Stack, Text, Icon } from '@grafana/ui';\n\nimport { MetaText } from '../MetaText';\nimport MoreButton from '../MoreButton';\nimport { Spacer } from '../Spacer';\n\ninterface EvaluationGroupProps extends PropsWithChildren {\n  name: string;\n  interval?: string;\n  provenance?: string;\n  isOpen?: boolean;\n  onToggle: () => void;\n}\n\nconst EvaluationGroup = ({ name, provenance, interval, onToggle, isOpen = false, children }: EvaluationGroupProps) => {\n  const styles = useStyles2(getStyles);\n  const isProvisioned = Boolean(provenance);\n\n  return (\n    <Stack direction=\"column\" role=\"treeitem\" aria-expanded={isOpen} aria-selected=\"false\" gap={0}>\n      <div className={styles.headerWrapper}>\n        <Stack direction=\"row\" alignItems=\"center\" gap={1}>\n          <button className={cx(styles.hiddenButton, styles.largerClickTarget)} type=\"button\" onClick={onToggle}>\n            <Stack alignItems=\"center\" gap={0.5}>\n              <Icon name={isOpen ? 'angle-down' : 'angle-right'} />\n              <Text truncate variant=\"body\">\n                {name}\n              </Text>\n            </Stack>\n          </button>\n          {isProvisioned && <Badge color=\"purple\" text=\"Provisioned\" />}\n          <Spacer />\n          {interval && <MetaText icon=\"history\">{interval}</MetaText>}\n          <Button size=\"sm\" icon=\"pen\" variant=\"secondary\" disabled={isProvisioned} data-testid=\"edit-group-action\">\n            Edit\n          </Button>\n          <Dropdown\n            overlay={\n              <Menu>\n                <Menu.Item label=\"Re-order rules\" icon=\"flip\" disabled={isProvisioned} />\n                <Menu.Divider />\n                <Menu.Item label=\"Export\" icon=\"download-alt\" />\n                <Menu.Item label=\"Delete\" icon=\"trash-alt\" destructive disabled={isProvisioned} />\n              </Menu>\n            }\n          >\n            <MoreButton size=\"sm\" />\n          </Dropdown>\n        </Stack>\n      </div>\n      {isOpen && <div role=\"group\">{children}</div>}\n    </Stack>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  headerWrapper: css({\n    padding: `${theme.spacing(1)} ${theme.spacing(1)}`,\n\n    background: theme.colors.background.secondary,\n\n    border: 'none',\n    borderBottom: `solid 1px ${theme.colors.border.weak}`,\n    borderTopLeftRadius: theme.shape.radius.default,\n    borderTopRightRadius: theme.shape.radius.default,\n  }),\n  hiddenButton: css({\n    border: 'none',\n    background: 'transparent',\n  }),\n  largerClickTarget: css({\n    padding: theme.spacing(0.5),\n    margin: `-${theme.spacing(0.5)}`,\n  }),\n});\n\nexport default EvaluationGroup;\n","import { size } from 'lodash';\nimport { useToggle } from 'react-use';\n\nimport { CombinedRuleGroup, RulesSource } from 'app/types/unified-alerting';\n\nimport { createViewLink } from '../../utils/misc';\nimport { hashRulerRule } from '../../utils/rule-id';\nimport { isAlertingRule, isAlertingRulerRule, isGrafanaRulerRule, isRecordingRulerRule } from '../../utils/rules';\n\nimport { AlertRuleListItem, RecordingRuleListItem, UnknownRuleListItem } from './AlertRuleListItem';\nimport EvaluationGroup from './EvaluationGroup';\n\nexport interface EvaluationGroupWithRulesProps {\n  group: CombinedRuleGroup;\n  rulesSource: RulesSource;\n}\n\nexport const EvaluationGroupWithRules = ({ group, rulesSource }: EvaluationGroupWithRulesProps) => {\n  const [open, toggleOpen] = useToggle(false);\n\n  return (\n    <EvaluationGroup name={group.name} interval={group.interval} isOpen={open} onToggle={toggleOpen}>\n      {group.rules.map((rule, index) => {\n        const { rulerRule, promRule, annotations } = rule;\n\n        // don't render anything if we don't have the rule definition yet\n        if (!rulerRule) {\n          return null;\n        }\n\n        // keep in mind that we may not have a promRule for the ruler rule – this happens when the target\n        // rule source is eventually consistent - it may know about the rule definition but not its state\n        const isAlertingPromRule = isAlertingRule(promRule);\n\n        if (isAlertingRulerRule(rulerRule)) {\n          return (\n            <AlertRuleListItem\n              key={hashRulerRule(rulerRule)}\n              state={isAlertingPromRule ? promRule?.state : undefined}\n              health={promRule?.health}\n              error={promRule?.lastError}\n              name={rulerRule.alert}\n              labels={rulerRule.labels}\n              lastEvaluation={promRule?.lastEvaluation}\n              evaluationInterval={group.interval}\n              instancesCount={isAlertingPromRule ? size(promRule.alerts) : undefined}\n              href={createViewLink(rulesSource, rule)}\n              summary={annotations?.summary}\n            />\n          );\n        }\n\n        if (isRecordingRulerRule(rulerRule)) {\n          return (\n            <RecordingRuleListItem\n              key={hashRulerRule(rulerRule)}\n              name={rulerRule.record}\n              health={promRule?.health}\n              error={promRule?.lastError}\n              lastEvaluation={promRule?.lastEvaluation}\n              evaluationInterval={group.interval}\n              labels={rulerRule.labels}\n              href={createViewLink(rulesSource, rule)}\n            />\n          );\n        }\n\n        if (isGrafanaRulerRule(rulerRule)) {\n          const contactPoint = rulerRule.grafana_alert.notification_settings?.receiver;\n\n          return (\n            <AlertRuleListItem\n              key={rulerRule.grafana_alert.uid}\n              name={rulerRule.grafana_alert.title}\n              state={isAlertingPromRule ? promRule?.state : undefined}\n              health={promRule?.health}\n              error={promRule?.lastError}\n              labels={rulerRule.labels}\n              isPaused={rulerRule.grafana_alert.is_paused}\n              lastEvaluation={promRule?.lastEvaluation}\n              evaluationInterval={group.interval}\n              instancesCount={isAlertingPromRule ? size(promRule.alerts) : undefined}\n              href={createViewLink(rulesSource, rule)}\n              summary={rule.annotations?.summary}\n              isProvisioned={Boolean(rulerRule.grafana_alert.provenance)}\n              contactPoint={contactPoint}\n            />\n          );\n        }\n\n        // if we get here it means we don't really know how to render this rule\n        return <UnknownRuleListItem key={hashRulerRule(rulerRule)} rule={rule} />;\n      })}\n    </EvaluationGroup>\n  );\n};\n","import { css } from '@emotion/css';\nimport { PropsWithChildren } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2, Stack, TextLink, Icon } from '@grafana/ui';\nimport { PromApplication, RulesSourceApplication } from 'app/types/unified-alerting-dto';\n\nimport { WithReturnButton } from '../WithReturnButton';\n\ninterface NamespaceProps extends PropsWithChildren {\n  name: string;\n  href?: string;\n  application?: RulesSourceApplication;\n}\n\n// @TODO add export rules for namespace back in\nconst Namespace = ({ children, name, href, application }: NamespaceProps) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <li className={styles.namespaceWrapper} role=\"treeitem\" aria-selected=\"false\">\n      <div className={styles.namespaceTitle}>\n        <Stack alignItems={'center'} gap={1}>\n          <NamespaceIcon application={application} />\n          {href ? (\n            <WithReturnButton\n              title=\"Alert rules\"\n              component={\n                <TextLink href={href} inline={false}>\n                  {name}\n                </TextLink>\n              }\n            />\n          ) : (\n            name\n          )}\n        </Stack>\n      </div>\n      {children && (\n        <ul role=\"group\" className={styles.groupItemsWrapper}>\n          {children}\n        </ul>\n      )}\n    </li>\n  );\n};\n\ninterface NamespaceIconProps {\n  application?: RulesSourceApplication;\n}\n\nconst NamespaceIcon = ({ application }: NamespaceIconProps) => {\n  switch (application) {\n    case PromApplication.Prometheus:\n      return (\n        <img\n          width={16}\n          height={16}\n          src=\"public/app/plugins/datasource/prometheus/img/prometheus_logo.svg\"\n          alt=\"Prometheus\"\n        />\n      );\n    case PromApplication.Mimir:\n      return (\n        <img width={16} height={16} src=\"public/app/plugins/datasource/prometheus/img/mimir_logo.svg\" alt=\"Mimir\" />\n      );\n    case 'loki':\n      return <img width={16} height={16} src=\"public/app/plugins/datasource/loki/img/loki_icon.svg\" alt=\"Loki\" />;\n    case 'grafana':\n    default:\n      return <Icon name=\"folder\" />;\n  }\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  groupItemsWrapper: css({\n    position: 'relative',\n    borderRadius: theme.shape.radius.default,\n    border: `solid 1px ${theme.colors.border.weak}`,\n    borderBottom: 'none',\n\n    marginLeft: theme.spacing(3),\n\n    '&:before': {\n      content: \"''\",\n      position: 'absolute',\n      height: '100%',\n\n      borderLeft: `solid 1px ${theme.colors.border.weak}`,\n\n      marginTop: 0,\n      marginLeft: `-${theme.spacing(2.5)}`,\n    },\n  }),\n  namespaceWrapper: css({\n    display: 'flex',\n    flexDirection: 'column',\n\n    gap: theme.spacing(1),\n  }),\n  namespaceTitle: css({\n    padding: `${theme.spacing(1)} ${theme.spacing(1.5)}`,\n\n    background: theme.colors.background.secondary,\n\n    border: `solid 1px ${theme.colors.border.weak}`,\n    borderRadius: theme.shape.radius.default,\n  }),\n});\n\nexport default Namespace;\n","import { css } from '@emotion/css';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useLocation } from 'react-router-dom-v5-compat';\nimport { useAsyncFn, useInterval, useMeasure } from 'react-use';\n\nimport { GrafanaTheme2, urlUtil } from '@grafana/data';\nimport { Button, LinkButton, LoadingBar, useStyles2, withErrorBoundary } from '@grafana/ui';\nimport { useDispatch } from 'app/types';\n\nimport { CombinedRuleNamespace } from '../../../../../types/unified-alerting';\nimport { LogMessages, logInfo, trackRuleListNavigation } from '../../Analytics';\nimport { AlertingAction, useAlertingAbility } from '../../hooks/useAbilities';\nimport { useCombinedRuleNamespaces } from '../../hooks/useCombinedRuleNamespaces';\nimport { useFilteredRules, useRulesFilter } from '../../hooks/useFilteredRules';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { fetchAllPromAndRulerRulesAction } from '../../state/actions';\nimport { RULE_LIST_POLL_INTERVAL_MS } from '../../utils/constants';\nimport { getAllRulesSourceNames, getRulesSourceUniqueKey, getApplicationFromRulesSource } from '../../utils/datasource';\nimport { makeFolderAlertsLink } from '../../utils/misc';\nimport { AlertingPageWrapper } from '../AlertingPageWrapper';\nimport RulesFilter from '../rules/Filter/RulesFilter';\nimport { NoRulesSplash } from '../rules/NoRulesCTA';\nimport { INSTANCES_DISPLAY_LIMIT } from '../rules/RuleDetails';\nimport { RuleListErrors } from '../rules/RuleListErrors';\nimport { RuleStats } from '../rules/RuleStats';\n\nimport { EvaluationGroupWithRules } from './EvaluationGroupWithRules';\nimport Namespace from './Namespace';\n\n// make sure we ask for 1 more so we show the \"show x more\" button\nconst LIMIT_ALERTS = INSTANCES_DISPLAY_LIMIT + 1;\n\nconst RuleList = withErrorBoundary(\n  () => {\n    const dispatch = useDispatch();\n    const styles = useStyles2(getStyles);\n    const rulesDataSourceNames = useMemo(getAllRulesSourceNames, []);\n    const [expandAll, setExpandAll] = useState(false);\n\n    const onFilterCleared = useCallback(() => setExpandAll(false), []);\n\n    const { filterState, hasActiveFilters } = useRulesFilter();\n\n    const promRuleRequests = useUnifiedAlertingSelector((state) => state.promRules);\n    const rulerRuleRequests = useUnifiedAlertingSelector((state) => state.rulerRules);\n\n    const loading = rulesDataSourceNames.some(\n      (name) => promRuleRequests[name]?.loading || rulerRuleRequests[name]?.loading\n    );\n\n    const promRequests = Object.entries(promRuleRequests);\n    const rulerRequests = Object.entries(rulerRuleRequests);\n\n    const allPromLoaded = promRequests.every(\n      ([_, state]) => state.dispatched && (state?.result !== undefined || state?.error !== undefined)\n    );\n    const allRulerLoaded = rulerRequests.every(\n      ([_, state]) => state.dispatched && (state?.result !== undefined || state?.error !== undefined)\n    );\n\n    const allPromEmpty = promRequests.every(([_, state]) => state.dispatched && state?.result?.length === 0);\n\n    const allRulerEmpty = rulerRequests.every(([_, state]) => {\n      const rulerRules = Object.entries(state?.result ?? {});\n      const noRules = rulerRules.every(([_, result]) => result?.length === 0);\n      return noRules && state.dispatched;\n    });\n\n    const limitAlerts = hasActiveFilters ? undefined : LIMIT_ALERTS;\n    // Trigger data refresh only when the RULE_LIST_POLL_INTERVAL_MS elapsed since the previous load FINISHED\n    const [_, fetchRules] = useAsyncFn(async () => {\n      if (!loading) {\n        await dispatch(fetchAllPromAndRulerRulesAction(false, { limitAlerts }));\n      }\n    }, [loading, limitAlerts, dispatch]);\n\n    useEffect(() => {\n      trackRuleListNavigation().catch(() => {});\n    }, []);\n\n    // fetch rules, then poll every RULE_LIST_POLL_INTERVAL_MS\n    useEffect(() => {\n      dispatch(fetchAllPromAndRulerRulesAction(false, { limitAlerts }));\n    }, [dispatch, limitAlerts]);\n    useInterval(fetchRules, RULE_LIST_POLL_INTERVAL_MS);\n\n    // Show splash only when we loaded all of the data sources and none of them has alerts\n    const hasNoAlertRulesCreatedYet =\n      allPromLoaded && allPromEmpty && promRequests.length > 0 && allRulerEmpty && allRulerLoaded;\n    const hasAlertRulesCreated = !hasNoAlertRulesCreatedYet;\n\n    const combinedNamespaces: CombinedRuleNamespace[] = useCombinedRuleNamespaces();\n    const filteredNamespaces = useFilteredRules(combinedNamespaces, filterState);\n\n    const sortedNamespaces = filteredNamespaces.sort((a: CombinedRuleNamespace, b: CombinedRuleNamespace) =>\n      a.name.localeCompare(b.name)\n    );\n\n    return (\n      // We don't want to show the Loading... indicator for the whole page.\n      // We show separate indicators for Grafana-managed and Cloud rules\n      <AlertingPageWrapper navId=\"alert-list\" isLoading={false} actions={hasAlertRulesCreated && <CreateAlertButton />}>\n        <RuleListErrors />\n        <RulesFilter onClear={onFilterCleared} />\n        {hasAlertRulesCreated && (\n          <>\n            <div className={styles.break} />\n            <div className={styles.buttonsContainer}>\n              <div className={styles.statsContainer}>\n                {hasActiveFilters && (\n                  <Button\n                    className={styles.expandAllButton}\n                    icon={expandAll ? 'angle-double-up' : 'angle-double-down'}\n                    variant=\"secondary\"\n                    onClick={() => setExpandAll(!expandAll)}\n                  >\n                    {expandAll ? 'Collapse all' : 'Expand all'}\n                  </Button>\n                )}\n                <RuleStats namespaces={filteredNamespaces} />\n              </div>\n            </div>\n          </>\n        )}\n        {hasNoAlertRulesCreatedYet && <NoRulesSplash />}\n        {hasAlertRulesCreated && (\n          <>\n            <LoadingIndicator visible={loading} />\n            <ul className={styles.rulesTree} role=\"tree\" aria-label=\"List of alert rules\">\n              {sortedNamespaces.map((namespace) => {\n                const { rulesSource, uid } = namespace;\n\n                const application = getApplicationFromRulesSource(rulesSource);\n                const href = application === 'grafana' && uid ? makeFolderAlertsLink(uid, namespace.name) : undefined;\n\n                return (\n                  <Namespace\n                    key={getRulesSourceUniqueKey(rulesSource) + namespace.name}\n                    href={href}\n                    name={namespace.name}\n                    application={application}\n                  >\n                    {namespace.groups\n                      .sort((a, b) => a.name.localeCompare(b.name))\n                      .map((group) => (\n                        <EvaluationGroupWithRules key={group.name} group={group} rulesSource={rulesSource} />\n                      ))}\n                  </Namespace>\n                );\n              })}\n            </ul>\n          </>\n        )}\n      </AlertingPageWrapper>\n    );\n  },\n  { style: 'page' }\n);\n\nconst LoadingIndicator = ({ visible = false }) => {\n  const [measureRef, { width }] = useMeasure<HTMLDivElement>();\n  return <div ref={measureRef}>{visible && <LoadingBar width={width} />}</div>;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  rulesTree: css({\n    display: 'flex',\n    flexDirection: 'column',\n    gap: theme.spacing(1),\n  }),\n  break: css({\n    width: '100%',\n    height: 0,\n    marginBottom: theme.spacing(2),\n    borderBottom: `solid 1px ${theme.colors.border.medium}`,\n  }),\n  buttonsContainer: css({\n    marginBottom: theme.spacing(2),\n    display: 'flex',\n    justifyContent: 'space-between',\n  }),\n  statsContainer: css({\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n  }),\n  expandAllButton: css({\n    marginRight: theme.spacing(1),\n  }),\n});\n\nexport default RuleList;\n\nexport function CreateAlertButton() {\n  const [createRuleSupported, createRuleAllowed] = useAlertingAbility(AlertingAction.CreateAlertRule);\n  const [createCloudRuleSupported, createCloudRuleAllowed] = useAlertingAbility(AlertingAction.CreateExternalAlertRule);\n\n  const location = useLocation();\n\n  const canCreateCloudRules = createCloudRuleSupported && createCloudRuleAllowed;\n\n  const canCreateGrafanaRules = createRuleSupported && createRuleAllowed;\n\n  if (canCreateGrafanaRules || canCreateCloudRules) {\n    return (\n      <LinkButton\n        href={urlUtil.renderUrl('alerting/new/alerting', { returnTo: location.pathname + location.search })}\n        icon=\"plus\"\n        onClick={() => logInfo(LogMessages.alertRuleFromScratch)}\n      >\n        New alert rule\n      </LinkButton>\n    );\n  }\n  return null;\n}\n"],"names":["RuleListIcon","state","health","recording","isPaused","icons","color","stateNames","iconName","iconColor","stateName","Tooltip","Text","Icon","AlertRuleListItem","props","name","summary","error","href","isProvisioned","lastEvaluation","evaluationInterval","instancesCount","contactPoint","labels","styles","getStyles","Stack","TextLink","Summary","EvaluationMetadata","MetaText","Button","Dropdown","Menu","MoreButton","content","RecordingRuleListItem","Spacer","nextEvaluation","UnknownRuleListItem","rule","ruleContext","Alert","theme","EvaluationGroup","provenance","interval","onToggle","isOpen","children","Badge","EvaluationGroupWithRules","group","rulesSource","open","toggleOpen","useToggle","index","rulerRule","promRule","annotations","isAlertingPromRule","Namespace","application","NamespaceIcon","WithReturnButton","LIMIT_ALERTS","RuleList","dispatch","rulesDataSourceNames","expandAll","setExpandAll","onFilterCleared","filterState","hasActiveFilters","promRuleRequests","useUnifiedAlertingSelector","rulerRuleRequests","loading","promRequests","rulerRequests","allPromLoaded","_","allRulerLoaded","allPromEmpty","allRulerEmpty","result","limitAlerts","fetchRules","useAsyncFn","useInterval","hasNoAlertRulesCreatedYet","hasAlertRulesCreated","combinedNamespaces","useCombinedRuleNamespaces","filteredNamespaces","useFilteredRules","sortedNamespaces","a","b","AlertingPageWrapper","CreateAlertButton","RuleListErrors","RulesFilter","RuleStats","LoadingIndicator","namespace","uid","visible","measureRef","width","useMeasure","LoadingBar","createRuleSupported","createRuleAllowed","createCloudRuleSupported","createCloudRuleAllowed","location","url"],"sourceRoot":""}