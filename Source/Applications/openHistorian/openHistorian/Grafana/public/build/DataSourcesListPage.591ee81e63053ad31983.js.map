{"version":3,"sources":["webpack:///./public/app/features/datasources/DataSourcesListItem.tsx","webpack:///./public/app/features/datasources/DataSourcesList.tsx","webpack:///./public/app/core/components/OrgActionBar/OrgActionBar.tsx","webpack:///./public/app/features/datasources/DataSourcesListPage.tsx"],"names":["DataSourcesListItem","dataSource","this","props","className","href","id","type","src","typeLogoUrl","alt","name","aria-label","selectors","pages","DataSources","dataSources","isDefault","url","PureComponent","DataSourcesList","layoutMode","listStyle","classNames","LayoutModes","Grid","List","map","index","key","OrgActionBar","searchQuery","linkButton","setSearchQuery","target","linkProps","labelClassName","inputClassName","value","onChange","placeholder","title","emptyListModel","buttonIcon","buttonLink","buttonTitle","proTip","proTipLink","proTipLinkTitle","proTipTarget","DataSourcesListPage","fetchDataSources","loadDataSources","dataSourcesCount","navModel","setDataSourcesSearchQuery","hasFetched","Contents","isLoading","query","mapDispatchToProps","setDataSourcesLayoutMode","hot","module","connect","state","getNavModel","navIndex","getDataSources","getDataSourcesLayoutMode","getDataSourcesCount","getDataSourcesSearchQuery"],"mappings":"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","file":"DataSourcesListPage.591ee81e63053ad31983.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport { DataSourceSettings } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\n\nexport interface Props {\n  dataSource: DataSourceSettings;\n}\n\nexport class DataSourcesListItem extends PureComponent<Props> {\n  render() {\n    const { dataSource } = this.props;\n    return (\n      <li className=\"card-item-wrapper\">\n        <a className=\"card-item\" href={`datasources/edit/${dataSource.id}`}>\n          <div className=\"card-item-header\">\n            <div className=\"card-item-type\">{dataSource.type}</div>\n          </div>\n          <div className=\"card-item-body\">\n            <figure className=\"card-item-figure\">\n              <img src={dataSource.typeLogoUrl} alt={dataSource.name} />\n            </figure>\n            <div className=\"card-item-details\">\n              <div className=\"card-item-name\" aria-label={selectors.pages.DataSources.dataSources(dataSource.name)}>\n                {dataSource.name}\n                {dataSource.isDefault && <span className=\"btn btn-secondary btn-small card-item-label\">default</span>}\n              </div>\n              <div className=\"card-item-sub-name\">{dataSource.url}</div>\n            </div>\n          </div>\n        </a>\n      </li>\n    );\n  }\n}\n\nexport default DataSourcesListItem;\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport classNames from 'classnames';\n\n// Components\nimport DataSourcesListItem from './DataSourcesListItem';\n\n// Types\nimport { DataSourceSettings } from '@grafana/data';\nimport { LayoutMode, LayoutModes } from '../../core/components/LayoutSelector/LayoutSelector';\n\nexport interface Props {\n  dataSources: DataSourceSettings[];\n  layoutMode: LayoutMode;\n}\n\nexport class DataSourcesList extends PureComponent<Props> {\n  render() {\n    const { dataSources, layoutMode } = this.props;\n\n    const listStyle = classNames({\n      'card-section': true,\n      'card-list-layout-grid': layoutMode === LayoutModes.Grid,\n      'card-list-layout-list': layoutMode === LayoutModes.List,\n    });\n\n    return (\n      <section className={listStyle}>\n        <ol className=\"card-list\">\n          {dataSources.map((dataSource, index) => {\n            return <DataSourcesListItem dataSource={dataSource} key={`${dataSource.id}-${index}`} />;\n          })}\n        </ol>\n      </section>\n    );\n  }\n}\n\nexport default DataSourcesList;\n","import React, { PureComponent } from 'react';\nimport { FilterInput } from '../FilterInput/FilterInput';\nimport { LinkButton } from '@grafana/ui';\n\nexport interface Props {\n  searchQuery: string;\n  setSearchQuery: (value: string) => {};\n  linkButton: { href: string; title: string };\n  target?: string;\n}\n\nexport default class OrgActionBar extends PureComponent<Props> {\n  render() {\n    const { searchQuery, linkButton, setSearchQuery, target } = this.props;\n    const linkProps = { href: linkButton.href };\n\n    if (target) {\n      (linkProps as any).target = target;\n    }\n\n    return (\n      <div className=\"page-action-bar\">\n        <div className=\"gf-form gf-form--grow\">\n          <FilterInput\n            labelClassName=\"gf-form--has-input-icon\"\n            inputClassName=\"gf-form-input width-20\"\n            value={searchQuery}\n            onChange={setSearchQuery}\n            placeholder={'Search by name or type'}\n          />\n        </div>\n        <div className=\"page-action-bar__spacer\" />\n        <LinkButton {...linkProps}>{linkButton.title}</LinkButton>\n      </div>\n    );\n  }\n}\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { hot } from 'react-hot-loader';\n// Components\nimport Page from 'app/core/components/Page/Page';\nimport OrgActionBar from 'app/core/components/OrgActionBar/OrgActionBar';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport DataSourcesList from './DataSourcesList';\n// Types\nimport { DataSourceSettings, NavModel } from '@grafana/data';\nimport { IconName } from '@grafana/ui';\nimport { StoreState } from 'app/types';\nimport { LayoutMode } from 'app/core/components/LayoutSelector/LayoutSelector';\n// Actions\nimport { loadDataSources } from './state/actions';\nimport { getNavModel } from 'app/core/selectors/navModel';\n\nimport {\n  getDataSources,\n  getDataSourcesCount,\n  getDataSourcesLayoutMode,\n  getDataSourcesSearchQuery,\n} from './state/selectors';\nimport { setDataSourcesLayoutMode, setDataSourcesSearchQuery } from './state/reducers';\n\nexport interface Props {\n  navModel: NavModel;\n  dataSources: DataSourceSettings[];\n  dataSourcesCount: number;\n  layoutMode: LayoutMode;\n  searchQuery: string;\n  hasFetched: boolean;\n  loadDataSources: typeof loadDataSources;\n  setDataSourcesLayoutMode: typeof setDataSourcesLayoutMode;\n  setDataSourcesSearchQuery: typeof setDataSourcesSearchQuery;\n}\n\nconst emptyListModel = {\n  title: 'There are no data sources defined yet',\n  buttonIcon: 'database' as IconName,\n  buttonLink: 'datasources/new',\n  buttonTitle: 'Add data source',\n  proTip: 'You can also define data sources through configuration files.',\n  proTipLink: 'http://docs.grafana.org/administration/provisioning/#datasources?utm_source=grafana_ds_list',\n  proTipLinkTitle: 'Learn more',\n  proTipTarget: '_blank',\n};\n\nexport class DataSourcesListPage extends PureComponent<Props> {\n  componentDidMount() {\n    this.fetchDataSources();\n  }\n\n  async fetchDataSources() {\n    return await this.props.loadDataSources();\n  }\n\n  render() {\n    const {\n      dataSources,\n      dataSourcesCount,\n      navModel,\n      layoutMode,\n      searchQuery,\n      setDataSourcesSearchQuery,\n      hasFetched,\n    } = this.props;\n\n    const linkButton = {\n      href: 'datasources/new',\n      title: 'Add data source',\n    };\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={!hasFetched}>\n          <>\n            {hasFetched && dataSourcesCount === 0 && <EmptyListCTA {...emptyListModel} />}\n            {hasFetched &&\n              dataSourcesCount > 0 && [\n                <OrgActionBar\n                  searchQuery={searchQuery}\n                  setSearchQuery={query => setDataSourcesSearchQuery(query)}\n                  linkButton={linkButton}\n                  key=\"action-bar\"\n                />,\n                <DataSourcesList dataSources={dataSources} layoutMode={layoutMode} key=\"list\" />,\n              ]}\n          </>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, 'datasources'),\n    dataSources: getDataSources(state.dataSources),\n    layoutMode: getDataSourcesLayoutMode(state.dataSources),\n    dataSourcesCount: getDataSourcesCount(state.dataSources),\n    searchQuery: getDataSourcesSearchQuery(state.dataSources),\n    hasFetched: state.dataSources.hasFetched,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadDataSources,\n  setDataSourcesSearchQuery,\n  setDataSourcesLayoutMode,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(DataSourcesListPage));\n"],"sourceRoot":""}