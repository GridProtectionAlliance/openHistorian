{"version":3,"sources":["webpack:///./public/app/features/datasources/utils/passwordHandlers.ts","webpack:///./public/app/core/components/sql_part/sql_part.ts","webpack:///./public/app/plugins/datasource/mysql/mysql_query.ts","webpack:///./public/app/plugins/datasource/mysql/response_parser.ts","webpack:///./public/app/plugins/datasource/mysql/datasource.ts","webpack:///./public/app/plugins/datasource/mysql/meta_query.ts","webpack:///./public/app/plugins/datasource/mysql/sql_part.ts","webpack:///./public/app/plugins/datasource/mysql/query_ctrl.ts","webpack:///./public/app/plugins/datasource/mysql/module.ts"],"names":["PasswordFieldEnum","createResetHandler","ctrl","field","event","preventDefault","current","undefined","secureJsonFields","secureJsonData","createChangeHandler","currentTarget","value","SqlPartDef","options","this","type","label","toUpperCase","substring","style","wrapOpen","wrapClose","separator","params","defaultParams","SqlPart","part","def","message","datatype","name","_","clone","strValue","index","optional","splice","MysqlQuery","target","templateSrv","scopedVars","format","timeColumn","metricColumn","group","where","select","rawQuery","interpolateQueryStr","bind","length","replace","String","find","g","variable","defaultFormatFn","multi","includeAll","quoteLiteral","map","join","escapeLiteral","interpolate","rawSql","buildQuery","indexOf","timeColumnType","query","args","alias","timeGroup","hasTimeGroup","macro","hasUnixEpochTimecolumn","hasMetricColumn","column","buildValueColumn","aggregate","quoteIdentifier","conditions","tag","groupSection","i","buildTimeColumn","buildMetricColumn","buildValueColumns","table","buildWhereClause","buildGroupClause","ResponseParser","res","data","results","key","queryRes","series","push","datapoints","points","refId","meta","tables","rowCount","columns","rows","textColIndex","findColIndex","valueColIndex","transformToKeyValueList","transformToSimpleList","containsKey","text","j","unique","Array","from","Set","colName","annotation","timeColumnIndex","timeEndColumnIndex","textColumnIndex","tagsColumnIndex","list","row","timeEnd","Math","floor","time","toString","tags","trim","split","MysqlDatasource","instanceSettings","getTemplateSrv","timeSrv","getTimeSrv","interpolateVariable","queryModel","v","id","responseParser","interval","jsonData","timeInterval","queries","expandedQueries","datasource","filter","targets","hide","intervalMs","maxDataPoints","datasourceId","render","of","getBackendSrv","fetch","url","method","range","valueOf","to","pipe","processQueryResult","Promise","reject","transformAnnotationResponse","toPromise","optionalOptions","getSearchFilterScopedVar","wildcardChar","interpolatedQuery","timeRange","parseMetricFindQueryResult","mapTo","status","catchError","err","console","error","variableExists","MysqlMetaQuery","unquoteIdentifier","includes","parts","quoteIdentAsLiteral","buildTableConstraint","register","dynamicLookup","quote","create","MysqlQueryCtrl","$scope","$injector","uiSegmentSrv","panel","metaBuilder","updateProjection","formats","panelCtrl","metricFindQuery","findMetricTable","then","result","segment","newSegment","tableSegment","html","timeColumnSegment","updateRawSqlAndRefresh","fake","metricColumnSegment","buildSelectMenu","whereAdd","newPlusButton","groupAdd","events","on","PanelEvents","dataReceived","onDataReceived","dataError","onDataError","getLocationSrv","update","inspect","inspectTab","partial","refresh","selectParts","sqlPart","n","whereParts","groupParts","selectMenu","submenu","appEvents","emit","CoreEvents","showConfirmModal","title","text2","icon","yesText","onConfirm","button","plusButton","buildTableQuery","transformToSegments","catch","handleQueryError","task1","buildColumnQuery","r","timeColumnChanged","task2","all","buildDatatypeQuery","partModel","updatePersistedParts","addNone","dataList","lastQueryError","config","segments","expandable","addTemplateVars","getVariables","templateQuoter","unshift","findIndex","p","item","subItem","partType","addAlias","addGroup","aggIndex","findAggregateIndex","windowIndex","findWindowIndex","modelsIndex","partIndex","evt","removeSelectPart","resolve","removeGroup","some","s","param","buildValueQuery","newOperators","getOperators","d","resetPlusButton","QueryCtrl","templateUrl","MysqlConfigCtrl","onPasswordReset","Password","onPasswordChange","MysqlAnnotationsQueryCtrl"],"mappings":"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","file":"mysqlPlugin.591ee81e63053ad31983.js","sourcesContent":["/**\n * Set of handlers for secure password field in Angular components. They handle backward compatibility with\n * passwords stored in plain text fields.\n */\n\nimport { SyntheticEvent } from 'react';\n\nexport enum PasswordFieldEnum {\n  Password = 'password',\n  BasicAuthPassword = 'basicAuthPassword',\n}\n\n/**\n * Basic shape for settings controllers in at the moment mostly angular datasource plugins.\n */\nexport type Ctrl = {\n  current: {\n    secureJsonFields: {\n      [key: string]: boolean;\n    };\n    secureJsonData?: {\n      [key: string]: string;\n    };\n    password?: string;\n    basicAuthPassword?: string;\n  };\n};\n\nexport const createResetHandler = (ctrl: Ctrl, field: PasswordFieldEnum) => (\n  event: SyntheticEvent<HTMLInputElement>\n) => {\n  event.preventDefault();\n  // Reset also normal plain text password to remove it and only save it in secureJsonData.\n  ctrl.current[field] = undefined;\n  ctrl.current.secureJsonFields[field] = false;\n  ctrl.current.secureJsonData = ctrl.current.secureJsonData || {};\n  ctrl.current.secureJsonData[field] = '';\n};\n\nexport const createChangeHandler = (ctrl: any, field: PasswordFieldEnum) => (\n  event: SyntheticEvent<HTMLInputElement>\n) => {\n  ctrl.current.secureJsonData = ctrl.current.secureJsonData || {};\n  ctrl.current.secureJsonData[field] = event.currentTarget.value;\n};\n","import _ from 'lodash';\n\nexport class SqlPartDef {\n  type: string;\n  style: string;\n  label: string;\n  params: any[];\n  defaultParams: any[];\n  wrapOpen: string;\n  wrapClose: string;\n  separator: string;\n\n  constructor(options: any) {\n    this.type = options.type;\n    if (options.label) {\n      this.label = options.label;\n    } else {\n      this.label = this.type[0].toUpperCase() + this.type.substring(1) + ':';\n    }\n    this.style = options.style;\n    if (this.style === 'function') {\n      this.wrapOpen = '(';\n      this.wrapClose = ')';\n      this.separator = ', ';\n    } else {\n      this.wrapOpen = ' ';\n      this.wrapClose = ' ';\n      this.separator = ' ';\n    }\n    this.params = options.params;\n    this.defaultParams = options.defaultParams;\n  }\n}\n\nexport class SqlPart {\n  part: any;\n  def: SqlPartDef;\n  params: any[];\n  label: string;\n  name: string;\n  datatype: string;\n\n  constructor(part: any, def: any) {\n    this.part = part;\n    this.def = def;\n    if (!this.def) {\n      throw { message: 'Could not find sql part ' + part.type };\n    }\n\n    this.datatype = part.datatype;\n\n    if (part.name) {\n      this.name = part.name;\n      this.label = def.label + ' ' + part.name;\n    } else {\n      this.name = '';\n      this.label = def.label;\n    }\n\n    part.params = part.params || _.clone(this.def.defaultParams);\n    this.params = part.params;\n  }\n\n  updateParam(strValue: string, index: number) {\n    // handle optional parameters\n    if (strValue === '' && this.def.params[index].optional) {\n      this.params.splice(index, 1);\n    } else {\n      this.params[index] = strValue;\n    }\n\n    this.part.params = this.params;\n  }\n}\n","import _ from 'lodash';\nimport { TemplateSrv } from '@grafana/runtime';\nimport { ScopedVars } from '@grafana/data';\n\nexport default class MysqlQuery {\n  target: any;\n  templateSrv: any;\n  scopedVars: any;\n\n  /** @ngInject */\n  constructor(target: any, templateSrv?: TemplateSrv, scopedVars?: ScopedVars) {\n    this.target = target;\n    this.templateSrv = templateSrv;\n    this.scopedVars = scopedVars;\n\n    target.format = target.format || 'time_series';\n    target.timeColumn = target.timeColumn || 'time';\n    target.metricColumn = target.metricColumn || 'none';\n\n    target.group = target.group || [];\n    target.where = target.where || [{ type: 'macro', name: '$__timeFilter', params: [] }];\n    target.select = target.select || [[{ type: 'column', params: ['value'] }]];\n\n    // handle pre query gui panels gracefully\n    if (!('rawQuery' in this.target)) {\n      if ('rawSql' in target) {\n        // pre query gui panel\n        target.rawQuery = true;\n      } else {\n        // new panel\n        target.rawQuery = false;\n      }\n    }\n\n    // give interpolateQueryStr access to this\n    this.interpolateQueryStr = this.interpolateQueryStr.bind(this);\n  }\n\n  // remove identifier quoting from identifier to use in metadata queries\n  unquoteIdentifier(value: string) {\n    if (value[0] === '\"' && value[value.length - 1] === '\"') {\n      return value.substring(1, value.length - 1).replace(/\"\"/g, '\"');\n    } else {\n      return value;\n    }\n  }\n\n  quoteIdentifier(value: string) {\n    return '\"' + value.replace(/\"/g, '\"\"') + '\"';\n  }\n\n  quoteLiteral(value: string) {\n    return \"'\" + value.replace(/'/g, \"''\") + \"'\";\n  }\n\n  escapeLiteral(value: any) {\n    return String(value).replace(/'/g, \"''\");\n  }\n\n  hasTimeGroup() {\n    return _.find(this.target.group, (g: any) => g.type === 'time');\n  }\n\n  hasMetricColumn() {\n    return this.target.metricColumn !== 'none';\n  }\n\n  interpolateQueryStr(value: string, variable: { multi: any; includeAll: any }, defaultFormatFn: any) {\n    // if no multi or include all do not regexEscape\n    if (!variable.multi && !variable.includeAll) {\n      return this.escapeLiteral(value);\n    }\n\n    if (typeof value === 'string') {\n      return this.quoteLiteral(value);\n    }\n\n    const escapedValues = _.map(value, this.quoteLiteral);\n    return escapedValues.join(',');\n  }\n\n  render(interpolate?: boolean) {\n    const target = this.target;\n\n    // new query with no table set yet\n    if (!this.target.rawQuery && !('table' in this.target)) {\n      return '';\n    }\n\n    if (!target.rawQuery) {\n      target.rawSql = this.buildQuery();\n    }\n\n    if (interpolate) {\n      return this.templateSrv.replace(target.rawSql, this.scopedVars, this.interpolateQueryStr);\n    } else {\n      return target.rawSql;\n    }\n  }\n\n  hasUnixEpochTimecolumn() {\n    return ['int', 'bigint', 'double'].indexOf(this.target.timeColumnType) > -1;\n  }\n\n  buildTimeColumn(alias = true) {\n    const timeGroup = this.hasTimeGroup();\n    let query;\n    let macro = '$__timeGroup';\n\n    if (timeGroup) {\n      let args;\n      if (timeGroup.params.length > 1 && timeGroup.params[1] !== 'none') {\n        args = timeGroup.params.join(',');\n      } else {\n        args = timeGroup.params[0];\n      }\n      if (this.hasUnixEpochTimecolumn()) {\n        macro = '$__unixEpochGroup';\n      }\n      if (alias) {\n        macro += 'Alias';\n      }\n      query = macro + '(' + this.target.timeColumn + ',' + args + ')';\n    } else {\n      query = this.target.timeColumn;\n      if (alias) {\n        query += ' AS \"time\"';\n      }\n    }\n\n    return query;\n  }\n\n  buildMetricColumn() {\n    if (this.hasMetricColumn()) {\n      return this.target.metricColumn + ' AS metric';\n    }\n\n    return '';\n  }\n\n  buildValueColumns() {\n    let query = '';\n    for (const column of this.target.select) {\n      query += ',\\n  ' + this.buildValueColumn(column);\n    }\n\n    return query;\n  }\n\n  buildValueColumn(column: any) {\n    let query = '';\n\n    const columnName: any = _.find(column, (g: any) => g.type === 'column');\n    query = columnName.params[0];\n\n    const aggregate: any = _.find(column, (g: any) => g.type === 'aggregate');\n\n    if (aggregate) {\n      const func = aggregate.params[0];\n      query = func + '(' + query + ')';\n    }\n\n    const alias: any = _.find(column, (g: any) => g.type === 'alias');\n    if (alias) {\n      query += ' AS ' + this.quoteIdentifier(alias.params[0]);\n    }\n\n    return query;\n  }\n\n  buildWhereClause() {\n    let query = '';\n    const conditions = _.map(this.target.where, (tag, index) => {\n      switch (tag.type) {\n        case 'macro':\n          return tag.name + '(' + this.target.timeColumn + ')';\n          break;\n        case 'expression':\n          return tag.params.join(' ');\n          break;\n      }\n    });\n\n    if (conditions.length > 0) {\n      query = '\\nWHERE\\n  ' + conditions.join(' AND\\n  ');\n    }\n\n    return query;\n  }\n\n  buildGroupClause() {\n    let query = '';\n    let groupSection = '';\n\n    for (let i = 0; i < this.target.group.length; i++) {\n      const part = this.target.group[i];\n      if (i > 0) {\n        groupSection += ', ';\n      }\n      if (part.type === 'time') {\n        groupSection += '1';\n      } else {\n        groupSection += part.params[0];\n      }\n    }\n\n    if (groupSection.length) {\n      query = '\\nGROUP BY ' + groupSection;\n      if (this.hasMetricColumn()) {\n        query += ',2';\n      }\n    }\n    return query;\n  }\n\n  buildQuery() {\n    let query = 'SELECT';\n\n    query += '\\n  ' + this.buildTimeColumn();\n    if (this.hasMetricColumn()) {\n      query += ',\\n  ' + this.buildMetricColumn();\n    }\n    query += this.buildValueColumns();\n\n    query += '\\nFROM ' + this.target.table;\n\n    query += this.buildWhereClause();\n    query += this.buildGroupClause();\n\n    query += '\\nORDER BY ' + this.buildTimeColumn(false);\n\n    return query;\n  }\n}\n","import _ from 'lodash';\nimport { MysqlMetricFindValue } from './types';\n\ninterface TableResponse extends Record<string, any> {\n  type: string;\n  refId: string;\n  meta: any;\n}\n\ninterface SeriesResponse extends Record<string, any> {\n  target: string;\n  refId: string;\n  meta: any;\n  datapoints: [any[]];\n}\n\nexport interface MysqlResponse {\n  data: Array<TableResponse | SeriesResponse>;\n}\n\nexport default class ResponseParser {\n  processQueryResult(res: any): MysqlResponse {\n    const data: any[] = [];\n\n    if (!res.data.results) {\n      return { data: data };\n    }\n\n    for (const key in res.data.results) {\n      const queryRes = res.data.results[key];\n\n      if (queryRes.series) {\n        for (const series of queryRes.series) {\n          data.push({\n            target: series.name,\n            datapoints: series.points,\n            refId: queryRes.refId,\n            meta: queryRes.meta,\n          });\n        }\n      }\n\n      if (queryRes.tables) {\n        for (const table of queryRes.tables) {\n          table.type = 'table';\n          table.refId = queryRes.refId;\n          table.meta = queryRes.meta;\n          data.push(table);\n        }\n      }\n    }\n\n    return { data: data };\n  }\n\n  parseMetricFindQueryResult(refId: string, results: any): MysqlMetricFindValue[] {\n    if (!results || results.data.length === 0 || results.data.results[refId].meta.rowCount === 0) {\n      return [];\n    }\n\n    const columns = results.data.results[refId].tables[0].columns;\n    const rows = results.data.results[refId].tables[0].rows;\n    const textColIndex = this.findColIndex(columns, '__text');\n    const valueColIndex = this.findColIndex(columns, '__value');\n\n    if (columns.length === 2 && textColIndex !== -1 && valueColIndex !== -1) {\n      return this.transformToKeyValueList(rows, textColIndex, valueColIndex);\n    }\n\n    return this.transformToSimpleList(rows);\n  }\n\n  transformToKeyValueList(rows: any, textColIndex: number, valueColIndex: number) {\n    const res = [];\n\n    for (let i = 0; i < rows.length; i++) {\n      if (!this.containsKey(res, rows[i][textColIndex])) {\n        res.push({\n          text: rows[i][textColIndex],\n          value: rows[i][valueColIndex],\n        });\n      }\n    }\n\n    return res;\n  }\n\n  transformToSimpleList(rows: any) {\n    const res = [];\n\n    for (let i = 0; i < rows.length; i++) {\n      for (let j = 0; j < rows[i].length; j++) {\n        res.push(rows[i][j]);\n      }\n    }\n\n    const unique = Array.from(new Set(res));\n\n    return _.map(unique, value => {\n      return { text: value };\n    });\n  }\n\n  findColIndex(columns: any[], colName: string) {\n    for (let i = 0; i < columns.length; i++) {\n      if (columns[i].text === colName) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  containsKey(res: any[], key: any) {\n    for (let i = 0; i < res.length; i++) {\n      if (res[i].text === key) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  transformAnnotationResponse(options: any, data: any) {\n    const table = data.data.results[options.annotation.name].tables[0];\n\n    let timeColumnIndex = -1;\n    let timeEndColumnIndex = -1;\n    let textColumnIndex = -1;\n    let tagsColumnIndex = -1;\n\n    for (let i = 0; i < table.columns.length; i++) {\n      if (table.columns[i].text === 'time_sec' || table.columns[i].text === 'time') {\n        timeColumnIndex = i;\n      } else if (table.columns[i].text === 'timeend') {\n        timeEndColumnIndex = i;\n      } else if (table.columns[i].text === 'title') {\n        throw {\n          message: 'The title column for annotations is deprecated, now only a column named text is returned',\n        };\n      } else if (table.columns[i].text === 'text') {\n        textColumnIndex = i;\n      } else if (table.columns[i].text === 'tags') {\n        tagsColumnIndex = i;\n      }\n    }\n\n    if (timeColumnIndex === -1) {\n      throw {\n        message: 'Missing mandatory time column (with time_sec column alias) in annotation query.',\n      };\n    }\n\n    const list = [];\n    for (let i = 0; i < table.rows.length; i++) {\n      const row = table.rows[i];\n      const timeEnd =\n        timeEndColumnIndex !== -1 && row[timeEndColumnIndex] ? Math.floor(row[timeEndColumnIndex]) : undefined;\n      list.push({\n        annotation: options.annotation,\n        time: Math.floor(row[timeColumnIndex]),\n        timeEnd,\n        text: row[textColumnIndex] ? row[textColumnIndex].toString() : '',\n        tags: row[tagsColumnIndex] ? row[tagsColumnIndex].trim().split(/\\s*,\\s*/) : [],\n      });\n    }\n\n    return list;\n  }\n}\n","import _ from 'lodash';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mapTo } from 'rxjs/operators';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { ScopedVars } from '@grafana/data';\nimport MysqlQuery from 'app/plugins/datasource/mysql/mysql_query';\nimport ResponseParser, { MysqlResponse } from './response_parser';\nimport { MysqlMetricFindValue, MysqlQueryForInterpolation } from './types';\nimport { getTemplateSrv, TemplateSrv } from 'app/features/templating/template_srv';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { getSearchFilterScopedVar } from '../../../features/variables/utils';\n\nexport class MysqlDatasource {\n  id: any;\n  name: any;\n  responseParser: ResponseParser;\n  queryModel: MysqlQuery;\n  interval: string;\n\n  constructor(\n    instanceSettings: any,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv(),\n    private readonly timeSrv: TimeSrv = getTimeSrv()\n  ) {\n    this.name = instanceSettings.name;\n    this.id = instanceSettings.id;\n    this.responseParser = new ResponseParser();\n    this.queryModel = new MysqlQuery({});\n    this.interval = (instanceSettings.jsonData || {}).timeInterval || '1m';\n  }\n\n  interpolateVariable = (value: string | string[] | number, variable: any) => {\n    if (typeof value === 'string') {\n      if (variable.multi || variable.includeAll) {\n        const result = this.queryModel.quoteLiteral(value);\n        return result;\n      } else {\n        return value;\n      }\n    }\n\n    if (typeof value === 'number') {\n      return value;\n    }\n\n    const quotedValues = _.map(value, (v: any) => {\n      return this.queryModel.quoteLiteral(v);\n    });\n    return quotedValues.join(',');\n  };\n\n  interpolateVariablesInQueries(\n    queries: MysqlQueryForInterpolation[],\n    scopedVars: ScopedVars\n  ): MysqlQueryForInterpolation[] {\n    let expandedQueries = queries;\n    if (queries && queries.length > 0) {\n      expandedQueries = queries.map(query => {\n        const expandedQuery = {\n          ...query,\n          datasource: this.name,\n          rawSql: this.templateSrv.replace(query.rawSql, scopedVars, this.interpolateVariable),\n          rawQuery: true,\n        };\n        return expandedQuery;\n      });\n    }\n    return expandedQueries;\n  }\n\n  query(options: any): Observable<MysqlResponse> {\n    const queries = _.filter(options.targets, target => {\n      return target.hide !== true;\n    }).map(target => {\n      const queryModel = new MysqlQuery(target, this.templateSrv, options.scopedVars);\n\n      return {\n        refId: target.refId,\n        intervalMs: options.intervalMs,\n        maxDataPoints: options.maxDataPoints,\n        datasourceId: this.id,\n        rawSql: queryModel.render(this.interpolateVariable as any),\n        format: target.format,\n      };\n    });\n\n    if (queries.length === 0) {\n      return of({ data: [] });\n    }\n\n    return getBackendSrv()\n      .fetch({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: options.range.from.valueOf().toString(),\n          to: options.range.to.valueOf().toString(),\n          queries: queries,\n        },\n      })\n      .pipe(map(this.responseParser.processQueryResult));\n  }\n\n  annotationQuery(options: any) {\n    if (!options.annotation.rawQuery) {\n      return Promise.reject({\n        message: 'Query missing in annotation definition',\n      });\n    }\n\n    const query = {\n      refId: options.annotation.name,\n      datasourceId: this.id,\n      rawSql: this.templateSrv.replace(options.annotation.rawQuery, options.scopedVars, this.interpolateVariable),\n      format: 'table',\n    };\n\n    return getBackendSrv()\n      .fetch({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: options.range.from.valueOf().toString(),\n          to: options.range.to.valueOf().toString(),\n          queries: [query],\n        },\n      })\n      .pipe(map((data: any) => this.responseParser.transformAnnotationResponse(options, data)))\n      .toPromise();\n  }\n\n  metricFindQuery(query: string, optionalOptions: any): Promise<MysqlMetricFindValue[]> {\n    let refId = 'tempvar';\n    if (optionalOptions && optionalOptions.variable && optionalOptions.variable.name) {\n      refId = optionalOptions.variable.name;\n    }\n\n    const rawSql = this.templateSrv.replace(\n      query,\n      getSearchFilterScopedVar({ query, wildcardChar: '%', options: optionalOptions }),\n      this.interpolateVariable\n    );\n\n    const interpolatedQuery = {\n      refId: refId,\n      datasourceId: this.id,\n      rawSql,\n      format: 'table',\n    };\n\n    const range = this.timeSrv.timeRange();\n    const data = {\n      queries: [interpolatedQuery],\n      from: range.from.valueOf().toString(),\n      to: range.to.valueOf().toString(),\n    };\n\n    if (optionalOptions && optionalOptions.range && optionalOptions.range.from) {\n      data['from'] = optionalOptions.range.from.valueOf().toString();\n    }\n    if (optionalOptions && optionalOptions.range && optionalOptions.range.to) {\n      data['to'] = optionalOptions.range.to.valueOf().toString();\n    }\n\n    return getBackendSrv()\n      .fetch({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: data,\n      })\n      .pipe(map((data: any) => this.responseParser.parseMetricFindQueryResult(refId, data)))\n      .toPromise();\n  }\n\n  testDatasource() {\n    return getBackendSrv()\n      .fetch({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: '5m',\n          to: 'now',\n          queries: [\n            {\n              refId: 'A',\n              intervalMs: 1,\n              maxDataPoints: 1,\n              datasourceId: this.id,\n              rawSql: 'SELECT 1',\n              format: 'table',\n            },\n          ],\n        },\n      })\n      .pipe(\n        mapTo({ status: 'success', message: 'Database Connection OK' }),\n        catchError(err => {\n          console.error(err);\n          if (err.data && err.data.message) {\n            return of({ status: 'error', message: err.data.message });\n          } else {\n            return of({ status: 'error', message: err.status });\n          }\n        })\n      )\n      .toPromise();\n  }\n\n  targetContainsTemplate(target: any) {\n    let rawSql = '';\n\n    if (target.rawQuery) {\n      rawSql = target.rawSql;\n    } else {\n      const query = new MysqlQuery(target);\n      rawSql = query.buildQuery();\n    }\n\n    rawSql = rawSql.replace('$__', '');\n\n    return this.templateSrv.variableExists(rawSql);\n  }\n}\n","export class MysqlMetaQuery {\n  constructor(private target: any, private queryModel: any) {}\n\n  getOperators(datatype: string) {\n    switch (datatype) {\n      case 'double':\n      case 'float': {\n        return ['=', '!=', '<', '<=', '>', '>='];\n      }\n      case 'text':\n      case 'tinytext':\n      case 'mediumtext':\n      case 'longtext':\n      case 'varchar':\n      case 'char': {\n        return ['=', '!=', '<', '<=', '>', '>=', 'IN', 'NOT IN', 'LIKE', 'NOT LIKE'];\n      }\n      default: {\n        return ['=', '!=', '<', '<=', '>', '>=', 'IN', 'NOT IN'];\n      }\n    }\n  }\n\n  // quote identifier as literal to use in metadata queries\n  quoteIdentAsLiteral(value: string) {\n    return this.queryModel.quoteLiteral(this.queryModel.unquoteIdentifier(value));\n  }\n\n  findMetricTable() {\n    // query that returns first table found that has a timestamp(tz) column and a float column\n    const query = `\n  SELECT\n    table_name as table_name,\n    ( SELECT\n        column_name as column_name\n      FROM information_schema.columns c\n      WHERE\n        c.table_schema = t.table_schema AND\n        c.table_name = t.table_name AND\n        c.data_type IN ('timestamp', 'datetime')\n      ORDER BY ordinal_position LIMIT 1\n    ) AS time_column,\n    ( SELECT\n        column_name AS column_name\n      FROM information_schema.columns c\n      WHERE\n        c.table_schema = t.table_schema AND\n        c.table_name = t.table_name AND\n        c.data_type IN('float', 'int', 'bigint')\n      ORDER BY ordinal_position LIMIT 1\n    ) AS value_column\n  FROM information_schema.tables t\n  WHERE\n    t.table_schema = database() AND\n    EXISTS\n    ( SELECT 1\n      FROM information_schema.columns c\n      WHERE\n        c.table_schema = t.table_schema AND\n        c.table_name = t.table_name AND\n        c.data_type IN ('timestamp', 'datetime')\n    ) AND\n    EXISTS\n    ( SELECT 1\n      FROM information_schema.columns c\n      WHERE\n        c.table_schema = t.table_schema AND\n        c.table_name = t.table_name AND\n        c.data_type IN('float', 'int', 'bigint')\n    )\n  LIMIT 1\n;`;\n    return query;\n  }\n\n  buildTableConstraint(table: string) {\n    let query = '';\n\n    // check for schema qualified table\n    if (table.includes('.')) {\n      const parts = table.split('.');\n      query = 'table_schema = ' + this.quoteIdentAsLiteral(parts[0]);\n      query += ' AND table_name = ' + this.quoteIdentAsLiteral(parts[1]);\n      return query;\n    } else {\n      query = 'table_schema = database() AND table_name = ' + this.quoteIdentAsLiteral(table);\n\n      return query;\n    }\n  }\n\n  buildTableQuery() {\n    return 'SELECT table_name FROM information_schema.tables WHERE table_schema = database() ORDER BY table_name';\n  }\n\n  buildColumnQuery(type?: string) {\n    let query = 'SELECT column_name FROM information_schema.columns WHERE ';\n    query += this.buildTableConstraint(this.target.table);\n\n    switch (type) {\n      case 'time': {\n        query += \" AND data_type IN ('timestamp','datetime','bigint','int','double','float')\";\n        break;\n      }\n      case 'metric': {\n        query += \" AND data_type IN ('text','tinytext','mediumtext','longtext','varchar','char')\";\n        break;\n      }\n      case 'value': {\n        query += \" AND data_type IN ('bigint','int','smallint','mediumint','tinyint','double','decimal','float')\";\n        query += ' AND column_name <> ' + this.quoteIdentAsLiteral(this.target.timeColumn);\n        break;\n      }\n      case 'group': {\n        query += \" AND data_type IN ('text','tinytext','mediumtext','longtext','varchar','char')\";\n        break;\n      }\n    }\n\n    query += ' ORDER BY column_name';\n\n    return query;\n  }\n\n  buildValueQuery(column: string) {\n    let query = 'SELECT DISTINCT QUOTE(' + column + ')';\n    query += ' FROM ' + this.target.table;\n    query += ' WHERE $__timeFilter(' + this.target.timeColumn + ')';\n    query += ' ORDER BY 1 LIMIT 100';\n    return query;\n  }\n\n  buildDatatypeQuery(column: string) {\n    let query = `\nSELECT data_type\nFROM information_schema.columns\nWHERE `;\n    query += ' table_name = ' + this.quoteIdentAsLiteral(this.target.table);\n    query += ' AND column_name = ' + this.quoteIdentAsLiteral(column);\n    return query;\n  }\n}\n","import { SqlPartDef, SqlPart } from 'app/core/components/sql_part/sql_part';\n\nconst index: any[] = [];\n\nfunction createPart(part: any): any {\n  const def = index[part.type];\n  if (!def) {\n    return null;\n  }\n\n  return new SqlPart(part, def);\n}\n\nfunction register(options: any) {\n  index[options.type] = new SqlPartDef(options);\n}\n\nregister({\n  type: 'column',\n  style: 'label',\n  params: [{ type: 'column', dynamicLookup: true }],\n  defaultParams: ['value'],\n});\n\nregister({\n  type: 'expression',\n  style: 'expression',\n  label: 'Expr:',\n  params: [\n    { name: 'left', type: 'string', dynamicLookup: true },\n    { name: 'op', type: 'string', dynamicLookup: true },\n    { name: 'right', type: 'string', dynamicLookup: true },\n  ],\n  defaultParams: ['value', '=', 'value'],\n});\n\nregister({\n  type: 'macro',\n  style: 'label',\n  label: 'Macro:',\n  params: [],\n  defaultParams: [],\n});\n\nregister({\n  type: 'aggregate',\n  style: 'label',\n  params: [\n    {\n      name: 'name',\n      type: 'string',\n      options: ['avg', 'count', 'min', 'max', 'sum', 'stddev', 'variance'],\n    },\n  ],\n  defaultParams: ['avg'],\n});\n\nregister({\n  type: 'alias',\n  style: 'label',\n  params: [{ name: 'name', type: 'string', quote: 'double' }],\n  defaultParams: ['alias'],\n});\n\nregister({\n  type: 'time',\n  style: 'function',\n  label: 'time',\n  params: [\n    {\n      name: 'interval',\n      type: 'interval',\n      options: ['$__interval', '1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n    {\n      name: 'fill',\n      type: 'string',\n      options: ['none', 'NULL', 'previous', '0'],\n    },\n  ],\n  defaultParams: ['$__interval', 'none'],\n});\n\nexport default {\n  create: createPart,\n};\n","import _ from 'lodash';\nimport appEvents from 'app/core/app_events';\nimport { MysqlMetaQuery } from './meta_query';\nimport { QueryCtrl } from 'app/plugins/sdk';\nimport { SqlPart } from 'app/core/components/sql_part/sql_part';\nimport MysqlQuery from './mysql_query';\nimport sqlPart from './sql_part';\nimport { auto } from 'angular';\nimport { CoreEvents } from 'app/types';\nimport { PanelEvents } from '@grafana/data';\nimport { VariableWithMultiSupport } from 'app/features/variables/types';\nimport { getLocationSrv, TemplateSrv } from '@grafana/runtime';\n\nexport interface QueryMeta {\n  sql: string;\n}\n\nconst defaultQuery = `SELECT\n  UNIX_TIMESTAMP(<time_column>) as time_sec,\n  <value column> as value,\n  <series name column> as metric\nFROM <table name>\nWHERE $__timeFilter(time_column)\nORDER BY <time_column> ASC\n`;\n\nexport class MysqlQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  formats: any[];\n  lastQueryError: string | null;\n  showHelp: boolean;\n\n  queryModel: MysqlQuery;\n  metaBuilder: MysqlMetaQuery;\n  tableSegment: any;\n  whereAdd: any;\n  timeColumnSegment: any;\n  metricColumnSegment: any;\n  selectMenu: any[];\n  selectParts: SqlPart[][];\n  groupParts: SqlPart[];\n  whereParts: SqlPart[];\n  groupAdd: any;\n\n  /** @ngInject */\n  constructor(\n    $scope: any,\n    $injector: auto.IInjectorService,\n    private templateSrv: TemplateSrv,\n    private uiSegmentSrv: any\n  ) {\n    super($scope, $injector);\n\n    this.target = this.target;\n    this.queryModel = new MysqlQuery(this.target, templateSrv, this.panel.scopedVars);\n    this.metaBuilder = new MysqlMetaQuery(this.target, this.queryModel);\n    this.updateProjection();\n\n    this.formats = [\n      { text: 'Time series', value: 'time_series' },\n      { text: 'Table', value: 'table' },\n    ];\n\n    if (!this.target.rawSql) {\n      // special handling when in table panel\n      if (this.panelCtrl.panel.type === 'table') {\n        this.target.format = 'table';\n        this.target.rawSql = 'SELECT 1';\n        this.target.rawQuery = true;\n      } else {\n        this.target.rawSql = defaultQuery;\n        this.datasource.metricFindQuery(this.metaBuilder.findMetricTable()).then((result: any) => {\n          if (result.length > 0) {\n            this.target.table = result[0].text;\n            let segment = this.uiSegmentSrv.newSegment(this.target.table);\n            this.tableSegment.html = segment.html;\n            this.tableSegment.value = segment.value;\n\n            this.target.timeColumn = result[1].text;\n            segment = this.uiSegmentSrv.newSegment(this.target.timeColumn);\n            this.timeColumnSegment.html = segment.html;\n            this.timeColumnSegment.value = segment.value;\n\n            this.target.timeColumnType = 'timestamp';\n            this.target.select = [[{ type: 'column', params: [result[2].text] }]];\n            this.updateProjection();\n            this.updateRawSqlAndRefresh();\n          }\n        });\n      }\n    }\n\n    if (!this.target.table) {\n      this.tableSegment = uiSegmentSrv.newSegment({ value: 'select table', fake: true });\n    } else {\n      this.tableSegment = uiSegmentSrv.newSegment(this.target.table);\n    }\n\n    this.timeColumnSegment = uiSegmentSrv.newSegment(this.target.timeColumn);\n    this.metricColumnSegment = uiSegmentSrv.newSegment(this.target.metricColumn);\n\n    this.buildSelectMenu();\n    this.whereAdd = this.uiSegmentSrv.newPlusButton();\n    this.groupAdd = this.uiSegmentSrv.newPlusButton();\n\n    this.panelCtrl.events.on(PanelEvents.dataReceived, this.onDataReceived.bind(this), $scope);\n    this.panelCtrl.events.on(PanelEvents.dataError, this.onDataError.bind(this), $scope);\n  }\n\n  showQueryInspector() {\n    getLocationSrv().update({\n      query: { inspect: this.panel.id, inspectTab: 'query' },\n      partial: true,\n    });\n  }\n\n  updateRawSqlAndRefresh() {\n    if (!this.target.rawQuery) {\n      this.target.rawSql = this.queryModel.buildQuery();\n    }\n\n    this.panelCtrl.refresh();\n  }\n\n  updateProjection() {\n    this.selectParts = _.map(this.target.select, (parts: any) => {\n      return _.map(parts, sqlPart.create).filter(n => n);\n    });\n    this.whereParts = _.map(this.target.where, sqlPart.create).filter(n => n);\n    this.groupParts = _.map(this.target.group, sqlPart.create).filter(n => n);\n  }\n\n  updatePersistedParts() {\n    this.target.select = _.map(this.selectParts, selectParts => {\n      return _.map(selectParts, (part: any) => {\n        return { type: part.def.type, datatype: part.datatype, params: part.params };\n      });\n    });\n    this.target.where = _.map(this.whereParts, (part: any) => {\n      return { type: part.def.type, datatype: part.datatype, name: part.name, params: part.params };\n    });\n    this.target.group = _.map(this.groupParts, (part: any) => {\n      return { type: part.def.type, datatype: part.datatype, params: part.params };\n    });\n  }\n\n  buildSelectMenu() {\n    this.selectMenu = [];\n    const aggregates = {\n      text: 'Aggregate Functions',\n      value: 'aggregate',\n      submenu: [\n        { text: 'Average', value: 'avg' },\n        { text: 'Count', value: 'count' },\n        { text: 'Maximum', value: 'max' },\n        { text: 'Minimum', value: 'min' },\n        { text: 'Sum', value: 'sum' },\n        { text: 'Standard deviation', value: 'stddev' },\n        { text: 'Variance', value: 'variance' },\n      ],\n    };\n\n    this.selectMenu.push(aggregates);\n    this.selectMenu.push({ text: 'Alias', value: 'alias' });\n    this.selectMenu.push({ text: 'Column', value: 'column' });\n  }\n\n  toggleEditorMode() {\n    if (this.target.rawQuery) {\n      appEvents.emit(CoreEvents.showConfirmModal, {\n        title: 'Warning',\n        text2: 'Switching to query builder may overwrite your raw SQL.',\n        icon: 'exclamation-triangle',\n        yesText: 'Switch',\n        onConfirm: () => {\n          this.target.rawQuery = !this.target.rawQuery;\n        },\n      });\n    } else {\n      this.target.rawQuery = !this.target.rawQuery;\n    }\n  }\n\n  resetPlusButton(button: { html: any; value: any }) {\n    const plusButton = this.uiSegmentSrv.newPlusButton();\n    button.html = plusButton.html;\n    button.value = plusButton.value;\n  }\n\n  getTableSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildTableQuery())\n      .then(this.transformToSegments({}))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  tableChanged() {\n    this.target.table = this.tableSegment.value;\n    this.target.where = [];\n    this.target.group = [];\n    this.updateProjection();\n\n    const segment = this.uiSegmentSrv.newSegment('none');\n    this.metricColumnSegment.html = segment.html;\n    this.metricColumnSegment.value = segment.value;\n    this.target.metricColumn = 'none';\n\n    const task1 = this.datasource.metricFindQuery(this.metaBuilder.buildColumnQuery('time')).then((result: any) => {\n      // check if time column is still valid\n      if (result.length > 0 && !_.find(result, (r: any) => r.text === this.target.timeColumn)) {\n        const segment = this.uiSegmentSrv.newSegment(result[0].text);\n        this.timeColumnSegment.html = segment.html;\n        this.timeColumnSegment.value = segment.value;\n      }\n      return this.timeColumnChanged(false);\n    });\n    const task2 = this.datasource.metricFindQuery(this.metaBuilder.buildColumnQuery('value')).then((result: any) => {\n      if (result.length > 0) {\n        this.target.select = [[{ type: 'column', params: [result[0].text] }]];\n        this.updateProjection();\n      }\n    });\n\n    Promise.all([task1, task2]).then(() => {\n      this.updateRawSqlAndRefresh();\n    });\n  }\n\n  getTimeColumnSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('time'))\n      .then(this.transformToSegments({}))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  timeColumnChanged(refresh?: boolean) {\n    this.target.timeColumn = this.timeColumnSegment.value;\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildDatatypeQuery(this.target.timeColumn))\n      .then((result: any) => {\n        if (result.length === 1) {\n          if (this.target.timeColumnType !== result[0].text) {\n            this.target.timeColumnType = result[0].text;\n          }\n          let partModel;\n          if (this.queryModel.hasUnixEpochTimecolumn()) {\n            partModel = sqlPart.create({ type: 'macro', name: '$__unixEpochFilter', params: [] });\n          } else {\n            partModel = sqlPart.create({ type: 'macro', name: '$__timeFilter', params: [] });\n          }\n\n          if (this.whereParts.length >= 1 && this.whereParts[0].def.type === 'macro') {\n            // replace current macro\n            this.whereParts[0] = partModel;\n          } else {\n            this.whereParts.splice(0, 0, partModel);\n          }\n        }\n\n        this.updatePersistedParts();\n        if (refresh !== false) {\n          this.updateRawSqlAndRefresh();\n        }\n      });\n  }\n\n  getMetricColumnSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('metric'))\n      .then(this.transformToSegments({ addNone: true }))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  metricColumnChanged() {\n    this.target.metricColumn = this.metricColumnSegment.value;\n    this.updateRawSqlAndRefresh();\n  }\n\n  onDataReceived(dataList: any) {\n    this.lastQueryError = null;\n  }\n\n  onDataError(err: any) {\n    if (err.data && err.data.results) {\n      const queryRes = err.data.results[this.target.refId];\n      if (queryRes) {\n        this.lastQueryError = queryRes.error;\n      }\n    }\n  }\n\n  transformToSegments(config: any) {\n    return (results: any) => {\n      const segments = _.map(results, segment => {\n        return this.uiSegmentSrv.newSegment({\n          value: segment.text,\n          expandable: segment.expandable,\n        });\n      });\n\n      if (config.addTemplateVars) {\n        for (const variable of this.templateSrv.getVariables()) {\n          let value;\n          value = '$' + variable.name;\n          if (config.templateQuoter && ((variable as unknown) as VariableWithMultiSupport).multi === false) {\n            value = config.templateQuoter(value);\n          }\n\n          segments.unshift(\n            this.uiSegmentSrv.newSegment({\n              type: 'template',\n              value: value,\n              expandable: true,\n            })\n          );\n        }\n      }\n\n      if (config.addNone) {\n        segments.unshift(this.uiSegmentSrv.newSegment({ type: 'template', value: 'none', expandable: true }));\n      }\n\n      return segments;\n    };\n  }\n\n  findAggregateIndex(selectParts: any) {\n    return _.findIndex(selectParts, (p: any) => p.def.type === 'aggregate' || p.def.type === 'percentile');\n  }\n\n  findWindowIndex(selectParts: any) {\n    return _.findIndex(selectParts, (p: any) => p.def.type === 'window' || p.def.type === 'moving_window');\n  }\n\n  addSelectPart(selectParts: any[], item: { value: any }, subItem: { type: any; value: any }) {\n    let partType = item.value;\n    if (subItem && subItem.type) {\n      partType = subItem.type;\n    }\n    let partModel = sqlPart.create({ type: partType });\n    if (subItem) {\n      partModel.params[0] = subItem.value;\n    }\n    let addAlias = false;\n\n    switch (partType) {\n      case 'column':\n        const parts = _.map(selectParts, (part: any) => {\n          return sqlPart.create({ type: part.def.type, params: _.clone(part.params) });\n        });\n        this.selectParts.push(parts);\n        break;\n      case 'percentile':\n      case 'aggregate':\n        // add group by if no group by yet\n        if (this.target.group.length === 0) {\n          this.addGroup('time', '$__interval');\n        }\n        const aggIndex = this.findAggregateIndex(selectParts);\n        if (aggIndex !== -1) {\n          // replace current aggregation\n          selectParts[aggIndex] = partModel;\n        } else {\n          selectParts.splice(1, 0, partModel);\n        }\n        if (!_.find(selectParts, (p: any) => p.def.type === 'alias')) {\n          addAlias = true;\n        }\n        break;\n      case 'moving_window':\n      case 'window':\n        const windowIndex = this.findWindowIndex(selectParts);\n        if (windowIndex !== -1) {\n          // replace current window function\n          selectParts[windowIndex] = partModel;\n        } else {\n          const aggIndex = this.findAggregateIndex(selectParts);\n          if (aggIndex !== -1) {\n            selectParts.splice(aggIndex + 1, 0, partModel);\n          } else {\n            selectParts.splice(1, 0, partModel);\n          }\n        }\n        if (!_.find(selectParts, (p: any) => p.def.type === 'alias')) {\n          addAlias = true;\n        }\n        break;\n      case 'alias':\n        addAlias = true;\n        break;\n    }\n\n    if (addAlias) {\n      // set initial alias name to column name\n      partModel = sqlPart.create({ type: 'alias', params: [selectParts[0].params[0].replace(/\"/g, '')] });\n      if (selectParts[selectParts.length - 1].def.type === 'alias') {\n        selectParts[selectParts.length - 1] = partModel;\n      } else {\n        selectParts.push(partModel);\n      }\n    }\n\n    this.updatePersistedParts();\n    this.updateRawSqlAndRefresh();\n  }\n\n  removeSelectPart(selectParts: any, part: { def: { type: string } }) {\n    if (part.def.type === 'column') {\n      // remove all parts of column unless its last column\n      if (this.selectParts.length > 1) {\n        const modelsIndex = _.indexOf(this.selectParts, selectParts);\n        this.selectParts.splice(modelsIndex, 1);\n      }\n    } else {\n      const partIndex = _.indexOf(selectParts, part);\n      selectParts.splice(partIndex, 1);\n    }\n\n    this.updatePersistedParts();\n  }\n\n  handleSelectPartEvent(selectParts: any, part: { def: any }, evt: { name: any }) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        switch (part.def.type) {\n          // case 'aggregate':\n          //   return this.datasource\n          //     .metricFindQuery(this.metaBuilder.buildAggregateQuery())\n          //     .then(this.transformToSegments({}))\n          //     .catch(this.handleQueryError.bind(this));\n          case 'column':\n            return this.datasource\n              .metricFindQuery(this.metaBuilder.buildColumnQuery('value'))\n              .then(this.transformToSegments({}))\n              .catch(this.handleQueryError.bind(this));\n        }\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'action': {\n        this.removeSelectPart(selectParts, part);\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return Promise.resolve([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  handleGroupPartEvent(part: any, index: any, evt: { name: any }) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        return this.datasource\n          .metricFindQuery(this.metaBuilder.buildColumnQuery())\n          .then(this.transformToSegments({}))\n          .catch(this.handleQueryError.bind(this));\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'action': {\n        this.removeGroup(part, index);\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return Promise.resolve([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  addGroup(partType: string, value: string) {\n    let params = [value];\n    if (partType === 'time') {\n      params = ['$__interval', 'none'];\n    }\n    const partModel = sqlPart.create({ type: partType, params: params });\n\n    if (partType === 'time') {\n      // put timeGroup at start\n      this.groupParts.splice(0, 0, partModel);\n    } else {\n      this.groupParts.push(partModel);\n    }\n\n    // add aggregates when adding group by\n    for (const selectParts of this.selectParts) {\n      if (!selectParts.some(part => part.def.type === 'aggregate')) {\n        const aggregate = sqlPart.create({ type: 'aggregate', params: ['avg'] });\n        selectParts.splice(1, 0, aggregate);\n        if (!selectParts.some(part => part.def.type === 'alias')) {\n          const alias = sqlPart.create({ type: 'alias', params: [selectParts[0].part.params[0]] });\n          selectParts.push(alias);\n        }\n      }\n    }\n\n    this.updatePersistedParts();\n  }\n\n  removeGroup(part: { def: { type: string } }, index: number) {\n    if (part.def.type === 'time') {\n      // remove aggregations\n      this.selectParts = _.map(this.selectParts, (s: any) => {\n        return _.filter(s, (part: any) => {\n          if (part.def.type === 'aggregate' || part.def.type === 'percentile') {\n            return false;\n          }\n          return true;\n        });\n      });\n    }\n\n    this.groupParts.splice(index, 1);\n    this.updatePersistedParts();\n  }\n\n  handleWherePartEvent(whereParts: any, part: any, evt: any, index: any) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        switch (evt.param.name) {\n          case 'left':\n            return this.datasource\n              .metricFindQuery(this.metaBuilder.buildColumnQuery())\n              .then(this.transformToSegments({}))\n              .catch(this.handleQueryError.bind(this));\n          case 'right':\n            if (['int', 'bigint', 'double', 'datetime'].indexOf(part.datatype) > -1) {\n              // don't do value lookups for numerical fields\n              return Promise.resolve([]);\n            } else {\n              return this.datasource\n                .metricFindQuery(this.metaBuilder.buildValueQuery(part.params[0]))\n                .then(\n                  this.transformToSegments({\n                    addTemplateVars: true,\n                    templateQuoter: (v: string) => {\n                      return this.queryModel.quoteLiteral(v);\n                    },\n                  })\n                )\n                .catch(this.handleQueryError.bind(this));\n            }\n          case 'op':\n            return Promise.resolve(this.uiSegmentSrv.newOperators(this.metaBuilder.getOperators(part.datatype)));\n          default:\n            return Promise.resolve([]);\n        }\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.datasource.metricFindQuery(this.metaBuilder.buildDatatypeQuery(part.params[0])).then((d: any) => {\n          if (d.length === 1) {\n            part.datatype = d[0].text;\n          }\n        });\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'action': {\n        // remove element\n        whereParts.splice(index, 1);\n        this.updatePersistedParts();\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return Promise.resolve([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  getWhereOptions() {\n    const options = [];\n    if (this.queryModel.hasUnixEpochTimecolumn()) {\n      options.push(this.uiSegmentSrv.newSegment({ type: 'macro', value: '$__unixEpochFilter' }));\n    } else {\n      options.push(this.uiSegmentSrv.newSegment({ type: 'macro', value: '$__timeFilter' }));\n    }\n    options.push(this.uiSegmentSrv.newSegment({ type: 'expression', value: 'Expression' }));\n    return Promise.resolve(options);\n  }\n\n  addWhereAction(part: any, index: number) {\n    switch (this.whereAdd.type) {\n      case 'macro': {\n        const partModel = sqlPart.create({ type: 'macro', name: this.whereAdd.value, params: [] });\n        if (this.whereParts.length >= 1 && this.whereParts[0].def.type === 'macro') {\n          // replace current macro\n          this.whereParts[0] = partModel;\n        } else {\n          this.whereParts.splice(0, 0, partModel);\n        }\n        break;\n      }\n      default: {\n        this.whereParts.push(sqlPart.create({ type: 'expression', params: ['value', '=', 'value'] }));\n      }\n    }\n\n    this.updatePersistedParts();\n    this.resetPlusButton(this.whereAdd);\n    this.updateRawSqlAndRefresh();\n  }\n\n  getGroupOptions() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('group'))\n      .then((tags: any) => {\n        const options = [];\n        if (!this.queryModel.hasTimeGroup()) {\n          options.push(this.uiSegmentSrv.newSegment({ type: 'time', value: 'time($__interval,none)' }));\n        }\n        for (const tag of tags) {\n          options.push(this.uiSegmentSrv.newSegment({ type: 'column', value: tag.text }));\n        }\n        return options;\n      })\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  addGroupAction() {\n    switch (this.groupAdd.value) {\n      default: {\n        this.addGroup(this.groupAdd.type, this.groupAdd.value);\n      }\n    }\n\n    this.resetPlusButton(this.groupAdd);\n    this.updateRawSqlAndRefresh();\n  }\n\n  handleQueryError(err: any): any[] {\n    this.error = err.message || 'Failed to issue metric query';\n    return [];\n  }\n}\n","import { MysqlDatasource } from './datasource';\nimport { MysqlQueryCtrl } from './query_ctrl';\nimport {\n  createChangeHandler,\n  createResetHandler,\n  PasswordFieldEnum,\n} from '../../../features/datasources/utils/passwordHandlers';\n\nclass MysqlConfigCtrl {\n  static templateUrl = 'partials/config.html';\n  current: any;\n  onPasswordReset: ReturnType<typeof createResetHandler>;\n  onPasswordChange: ReturnType<typeof createChangeHandler>;\n\n  constructor() {\n    this.onPasswordReset = createResetHandler(this, PasswordFieldEnum.Password);\n    this.onPasswordChange = createChangeHandler(this, PasswordFieldEnum.Password);\n  }\n}\n\nconst defaultQuery = `SELECT\n    UNIX_TIMESTAMP(<time_column>) as time_sec,\n    <text_column> as text,\n    <tags_column> as tags\n  FROM <table name>\n  WHERE $__timeFilter(time_column)\n  ORDER BY <time_column> ASC\n  LIMIT 100\n  `;\n\nclass MysqlAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n\n  annotation: any;\n\n  /** @ngInject */\n  constructor() {\n    this.annotation.rawQuery = this.annotation.rawQuery || defaultQuery;\n  }\n}\n\nexport {\n  MysqlDatasource,\n  MysqlDatasource as Datasource,\n  MysqlQueryCtrl as QueryCtrl,\n  MysqlConfigCtrl as ConfigCtrl,\n  MysqlAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n"],"sourceRoot":""}