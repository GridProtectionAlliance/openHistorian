{"version":3,"file":"StoragePage.a1dc7657c9f9b88501d7.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/Form/Form.tsx","webpack://grafana/./public/app/features/storage/AddRootView.tsx","webpack://grafana/./public/app/features/storage/Breadcrumb.tsx","webpack://grafana/./public/app/features/storage/CreateNewFolderModal.tsx","webpack://grafana/./public/app/features/storage/types.ts","webpack://grafana/./public/app/features/storage/FileView.tsx","webpack://grafana/./public/app/features/storage/FolderView.tsx","webpack://grafana/./public/app/features/storage/RootView.tsx","webpack://grafana/./public/app/features/storage/UploadButton.tsx","webpack://grafana/./public/app/features/storage/StoragePage.tsx","webpack://grafana/./public/app/features/storage/storage.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport { HTMLProps, useEffect } from 'react';\nimport * as React from 'react';\nimport {\n  useForm,\n  Mode,\n  DefaultValues,\n  SubmitHandler,\n  FieldValues,\n  UseFormReturn,\n  FieldErrors,\n  FieldPath,\n} from 'react-hook-form';\n\nexport type FormAPI<T extends FieldValues> = Omit<UseFormReturn<T>, 'handleSubmit'> & {\n  errors: FieldErrors<T>;\n};\n\ninterface FormProps<T extends FieldValues> extends Omit<HTMLProps<HTMLFormElement>, 'onSubmit' | 'children'> {\n  validateOn?: Mode;\n  validateOnMount?: boolean;\n  validateFieldsOnMount?: FieldPath<T> | Array<FieldPath<T>>;\n  defaultValues?: DefaultValues<T>;\n  onSubmit: SubmitHandler<T>;\n  children: (api: FormAPI<T>) => React.ReactNode;\n  /** Sets max-width for container. Use it instead of setting individual widths on inputs.*/\n  maxWidth?: number | 'none';\n}\n\nexport function Form<T extends FieldValues>({\n  defaultValues,\n  onSubmit,\n  validateOnMount = false,\n  validateFieldsOnMount,\n  children,\n  validateOn = 'onSubmit',\n  maxWidth = 600,\n  ...htmlProps\n}: FormProps<T>) {\n  const { handleSubmit, trigger, formState, ...rest } = useForm<T>({\n    mode: validateOn,\n    defaultValues,\n  });\n\n  useEffect(() => {\n    if (validateOnMount) {\n      trigger(validateFieldsOnMount);\n    }\n  }, [trigger, validateFieldsOnMount, validateOnMount]);\n\n  return (\n    <form\n      className={css({\n        maxWidth: maxWidth !== 'none' ? maxWidth + 'px' : maxWidth,\n        width: '100%',\n      })}\n      onSubmit={handleSubmit(onSubmit)}\n      {...htmlProps}\n    >\n      {children({ errors: formState.errors, formState, trigger, ...rest })}\n    </form>\n  );\n}\n","import { Button } from '@grafana/ui';\n\nimport { StorageView } from './types';\n\ninterface Props {\n  onPathChange: (p: string, v?: StorageView) => void;\n}\n\nexport function AddRootView({ onPathChange }: Props) {\n  return (\n    <div>\n      <div>TODO... Add ROOT</div>\n      <Button variant=\"secondary\" onClick={() => onPathChange('/')}>\n        Cancel\n      </Button>\n    </div>\n  );\n}\n","import { css } from '@emotion/css';\nimport { uniqueId } from 'lodash';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, IconName, useStyles2 } from '@grafana/ui';\n\ninterface Props {\n  rootIcon?: IconName;\n  pathName: string;\n  onPathChange: (path: string) => void;\n}\n\nexport function Breadcrumb({ pathName, onPathChange, rootIcon }: Props) {\n  const styles = useStyles2(getStyles);\n  const paths = pathName.split('/').filter(Boolean);\n\n  return (\n    <ul className={styles.breadCrumb}>\n      {rootIcon && (\n        <li>\n          <Icon name={rootIcon} onClick={() => onPathChange('')} />\n        </li>\n      )}\n      {paths.map((path, index) => {\n        let url = '/' + paths.slice(0, index + 1).join('/');\n        const onClickBreadcrumb = () => onPathChange(url);\n        const isLastBreadcrumb = index === paths.length - 1;\n        return (\n          // TODO: fix keyboard a11y\n          // eslint-disable-next-line jsx-a11y/click-events-have-key-events\n          <li key={uniqueId(path)} onClick={isLastBreadcrumb ? undefined : onClickBreadcrumb}>\n            {path}\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    breadCrumb: css`\n      list-style: none;\n      padding: ${theme.spacing(2, 1)};\n\n      li {\n        display: inline;\n\n        :not(:last-child) {\n          color: ${theme.colors.text.link};\n          cursor: pointer;\n        }\n        + li:before {\n          content: '>';\n          padding: ${theme.spacing(1)};\n          color: ${theme.colors.text.secondary};\n        }\n      }\n    `,\n  };\n}\n","import { SubmitHandler, Validate } from 'react-hook-form';\n\nimport { Button, Field, Input, Modal } from '@grafana/ui';\nimport { Form } from 'app/core/components/Form/Form';\n\ntype FormModel = { folderName: string };\n\ninterface Props {\n  onSubmit: SubmitHandler<FormModel>;\n  onDismiss: () => void;\n  validate: Validate<string, FormModel>;\n}\n\nconst initialFormModel = { folderName: '' };\n\nexport function CreateNewFolderModal({ validate, onDismiss, onSubmit }: Props) {\n  return (\n    <Modal onDismiss={onDismiss} isOpen={true} title=\"New Folder\">\n      <Form defaultValues={initialFormModel} onSubmit={onSubmit} maxWidth={'none'}>\n        {({ register, errors }) => (\n          <>\n            <Field\n              label=\"Folder name\"\n              invalid={!!errors.folderName}\n              error={errors.folderName && errors.folderName.message}\n            >\n              <Input\n                id=\"folder-name-input\"\n                {...register('folderName', {\n                  required: 'Folder name is required.',\n                  validate: { validate },\n                })}\n              />\n            </Field>\n\n            <Modal.ButtonRow>\n              <Button type=\"submit\">Create</Button>\n            </Modal.ButtonRow>\n          </>\n        )}\n      </Form>\n    </Modal>\n  );\n}\n","import { QueryResultMetaNotice, SelectableValue } from '@grafana/data';\n\nexport enum StorageView {\n  Data = 'data',\n  Config = 'config',\n  Perms = 'perms',\n  History = 'history',\n  AddRoot = 'add',\n}\n\nexport interface UploadResponse {\n  status: number;\n  statusText: string;\n\n  err?: boolean;\n  message: string;\n  path: string;\n}\n\nexport interface StorageInfo {\n  editable?: boolean;\n  builtin?: boolean;\n  ready?: boolean;\n  notice?: QueryResultMetaNotice[];\n  config: StorageConfig;\n}\n\nexport interface StorageConfig {\n  type: string;\n  prefix: string;\n  name: string;\n  description: string;\n  underContentRoot: string;\n  disk?: {\n    path: string;\n  };\n  git?: {\n    remote: string;\n    branch: string;\n    root: string;\n    requirePullRequest: boolean;\n    accessToken: string;\n  };\n  sql?: {};\n}\n\nexport enum WorkflowID {\n  Save = 'save',\n  PR = 'pr',\n  Push = 'push',\n}\n\nexport interface WriteValueRequest {\n  kind: string;\n  body: {}; // json body\n  message?: string;\n  title?: string;\n  workflow: WorkflowID;\n}\n\nexport interface WriteValueResponse {\n  code: number;\n  message?: string;\n  url?: string;\n  hash?: string;\n  branch?: string;\n  pending?: boolean;\n  size?: number;\n}\n\nexport interface ItemOptions {\n  path: string;\n  workflows: Array<SelectableValue<WorkflowID>>;\n}\n","import { css } from '@emotion/css';\nimport { isString } from 'lodash';\nimport { useMemo } from 'react';\nimport { useAsync } from 'react-use';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { DataFrame, GrafanaTheme2 } from '@grafana/data';\nimport { CodeEditor, useStyles2 } from '@grafana/ui';\nimport { SanitizedSVG } from 'app/core/components/SVG/SanitizedSVG';\n\nimport { getGrafanaStorage } from './storage';\nimport { StorageView } from './types';\n\ninterface FileDisplayInfo {\n  category?: 'svg' | 'image' | 'text';\n  language?: string; // match code editor\n}\n\ninterface Props {\n  listing: DataFrame;\n  path: string;\n  onPathChange: (p: string, view?: StorageView) => void;\n  view: StorageView;\n}\n\nexport function FileView({ listing, path, onPathChange, view }: Props) {\n  const styles = useStyles2(getStyles);\n  const info = useMemo(() => getFileDisplayInfo(path), [path]);\n  const body = useAsync(async () => {\n    if (info.category === 'text') {\n      const rsp = await getGrafanaStorage().get(path);\n      if (isString(rsp)) {\n        return rsp;\n      }\n      return JSON.stringify(rsp, null, 2);\n    }\n    return null;\n  }, [info, path]);\n\n  switch (view) {\n    case StorageView.Config:\n      return <div>CONFIGURE?</div>;\n    case StorageView.Perms:\n      return <div>Permissions</div>;\n    case StorageView.History:\n      return <div>TODO... history</div>;\n  }\n\n  let src = `api/storage/read/${path}`;\n  if (src.endsWith('/')) {\n    src = src.substring(0, src.length - 1);\n  }\n\n  switch (info.category) {\n    case 'svg':\n      return (\n        <div>\n          <SanitizedSVG src={src} className={styles.icon} />\n        </div>\n      );\n    case 'image':\n      return (\n        <div>\n          <a target={'_self'} href={src}>\n            <img src={src} alt=\"File preview\" className={styles.img} />\n          </a>\n        </div>\n      );\n    case 'text':\n      return (\n        <div className={styles.tableWrapper}>\n          <AutoSizer>\n            {({ width, height }) => (\n              <CodeEditor\n                width={width}\n                height={height}\n                value={body.value ?? ''}\n                showLineNumbers={false}\n                readOnly={true}\n                language={info.language ?? 'text'}\n                showMiniMap={false}\n                onBlur={(text: string) => {\n                  console.log('CHANGED!', text);\n                }}\n              />\n            )}\n          </AutoSizer>\n        </div>\n      );\n  }\n\n  return (\n    <div>\n      FILE: <a href={src}>{path}</a>\n    </div>\n  );\n}\n\nfunction getFileDisplayInfo(path: string): FileDisplayInfo {\n  const idx = path.lastIndexOf('.');\n  if (idx < 0) {\n    return {};\n  }\n  const suffix = path.substring(idx + 1).toLowerCase();\n  switch (suffix) {\n    case 'svg':\n      return { category: 'svg' };\n    case 'jpg':\n    case 'jpeg':\n    case 'png':\n    case 'webp':\n    case 'gif':\n      return { category: 'image' };\n\n    case 'geojson':\n    case 'json':\n      return { category: 'text', language: 'json' };\n    case 'text':\n    case 'go':\n    case 'md':\n      return { category: 'text' };\n  }\n  return {};\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  // TODO: remove `height: 90%`\n  wrapper: css`\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n  `,\n  tableControlRowWrapper: css`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    margin-bottom: ${theme.spacing(2)};\n  `,\n  // TODO: remove `height: 100%`\n  tableWrapper: css`\n    border: 1px solid ${theme.colors.border.medium};\n    height: 100%;\n  `,\n  uploadSpot: css`\n    margin-left: ${theme.spacing(2)};\n  `,\n  border: css`\n    border: 1px solid ${theme.colors.border.medium};\n    padding: ${theme.spacing(2)};\n  `,\n  img: css`\n    max-width: 100%;\n    // max-height: 147px;\n    // fill: ${theme.colors.text.primary};\n  `,\n  icon: css`\n    // max-width: 100%;\n    // max-height: 147px;\n    // fill: ${theme.colors.text.primary};\n  `,\n});\n","import { css } from '@emotion/css';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { DataFrame, GrafanaTheme2 } from '@grafana/data';\nimport { Table, useStyles2 } from '@grafana/ui';\n\nimport { StorageView } from './types';\n\ninterface Props {\n  listing: DataFrame;\n  view: StorageView;\n}\n\nexport function FolderView({ listing, view }: Props) {\n  const styles = useStyles2(getStyles);\n\n  switch (view) {\n    case StorageView.Config:\n      return <div>CONFIGURE?</div>;\n    case StorageView.Perms:\n      return <div>Permissions</div>;\n  }\n\n  return (\n    <div className={styles.tableWrapper}>\n      <AutoSizer>\n        {({ width, height }) => (\n          <div style={{ width: `${width}px`, height: `${height}px` }}>\n            <Table\n              height={height}\n              width={width}\n              data={listing}\n              noHeader={false}\n              showTypeIcons={false}\n              resizable={false}\n            />\n          </div>\n        )}\n      </AutoSizer>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  // TODO: remove `height: 90%`\n  wrapper: css`\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n  `,\n  tableControlRowWrapper: css`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    margin-bottom: ${theme.spacing(2)};\n  `,\n  // TODO: remove `height: 100%`\n  tableWrapper: css`\n    border: 1px solid ${theme.colors.border.medium};\n    height: 100%;\n  `,\n  uploadSpot: css`\n    margin-left: ${theme.spacing(2)};\n  `,\n  border: css`\n    border: 1px solid ${theme.colors.border.medium};\n    padding: ${theme.spacing(2)};\n  `,\n});\n","import { css } from '@emotion/css';\nimport { useMemo, useState } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { DataFrame, GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Button, Card, FilterInput, Icon, IconName, TagList, useStyles2, Stack, InlineField } from '@grafana/ui';\n\nimport { getGrafanaStorage } from './storage';\nimport { StorageInfo, StorageView } from './types';\n\ninterface Props {\n  root: DataFrame;\n  onPathChange: (p: string, v?: StorageView) => void;\n}\n\nexport function RootView({ root, onPathChange }: Props) {\n  const styles = useStyles2(getStyles);\n  const storage = useAsync(getGrafanaStorage().getConfig);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  let base = location.pathname;\n  if (!base.endsWith('/')) {\n    base += '/';\n  }\n\n  const roots = useMemo(() => {\n    let show = storage.value ?? [];\n    if (searchQuery?.length) {\n      const lower = searchQuery.toLowerCase();\n      show = show.filter((r) => {\n        const v = r.config;\n        const isMatch = v.name.toLowerCase().indexOf(lower) >= 0 || v.description.toLowerCase().indexOf(lower) >= 0;\n        if (isMatch) {\n          return true;\n        }\n        return false;\n      });\n    }\n\n    const base: StorageInfo[] = [];\n    const content: StorageInfo[] = [];\n    for (const r of show ?? []) {\n      if (r.config.underContentRoot) {\n        content.push(r);\n      } else if (r.config.prefix !== 'content') {\n        base.push(r);\n      }\n    }\n    return { base, content };\n  }, [searchQuery, storage]);\n\n  const renderRoots = (pfix: string, roots: StorageInfo[]) => {\n    return (\n      <Stack direction=\"column\">\n        {roots.map((s) => {\n          const ok = s.ready;\n          return (\n            <Card key={s.config.prefix} href={ok ? `admin/storage/${pfix}${s.config.prefix}/` : undefined}>\n              <Card.Heading>{s.config.name}</Card.Heading>\n              <Card.Meta className={styles.clickable}>\n                {s.config.description}\n                {s.config.git?.remote && <a href={s.config.git?.remote}>{s.config.git?.remote}</a>}\n              </Card.Meta>\n              {s.notice?.map((notice) => <Alert key={notice.text} severity={notice.severity} title={notice.text} />)}\n\n              <Card.Tags className={styles.clickable}>\n                <Stack>\n                  <TagList tags={getTags(s)} />\n                </Stack>\n              </Card.Tags>\n              <Card.Figure className={styles.clickable}>\n                <Icon name={getIconName(s.config.type)} size=\"xxxl\" className={styles.secondaryTextColor} />\n              </Card.Figure>\n            </Card>\n          );\n        })}\n      </Stack>\n    );\n  };\n\n  return (\n    <div>\n      <div className=\"page-action-bar\">\n        <InlineField grow>\n          <FilterInput placeholder=\"Search Storage\" value={searchQuery} onChange={setSearchQuery} />\n        </InlineField>\n        <div className=\"page-action-bar__spacer\" />\n        <Button onClick={() => onPathChange('', StorageView.AddRoot)}>Add Root</Button>\n      </div>\n\n      <div>{renderRoots('', roots.base)}</div>\n\n      <div>\n        <h3>Content</h3>\n        {renderRoots('content/', roots.content)}\n      </div>\n    </div>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    secondaryTextColor: css({\n      color: theme.colors.text.secondary,\n    }),\n    clickable: css({\n      pointerEvents: 'none',\n    }),\n  };\n}\n\nfunction getTags(v: StorageInfo) {\n  const tags: string[] = [];\n  if (v.builtin) {\n    tags.push('Builtin');\n  }\n\n  // Error\n  if (!v.ready) {\n    tags.push('Not ready');\n  }\n  return tags;\n}\n\nexport function getIconName(type: string): IconName {\n  switch (type) {\n    case 'git':\n      return 'code-branch';\n    case 'disk':\n      return 'folder-open';\n    case 'sql':\n      return 'database';\n    default:\n      return 'folder-open';\n  }\n}\n","import { css } from '@emotion/css';\nimport { FormEvent, useEffect, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { ConfirmModal, FileUpload, useStyles2 } from '@grafana/ui';\n\nimport { filenameAlreadyExists, getGrafanaStorage } from './storage';\nimport { StorageView, UploadResponse } from './types';\n\ninterface Props {\n  setErrorMessages: (errors: string[]) => void;\n  setPath: (p: string, view?: StorageView) => void;\n  path: string;\n  fileNames: string[];\n}\n\nconst fileFormats = 'image/jpg, image/jpeg, image/png, image/gif, image/webp';\n\nexport function UploadButton({ setErrorMessages, setPath, path, fileNames }: Props) {\n  const styles = useStyles2(getStyles);\n\n  const [file, setFile] = useState<File | undefined>(undefined);\n  const [filenameExists, setFilenameExists] = useState(false);\n  const [fileUploadKey, setFileUploadKey] = useState(1);\n  const [isConfirmOpen, setIsConfirmOpen] = useState(true);\n\n  useEffect(() => {\n    setFileUploadKey((prev) => prev + 1);\n  }, [file]);\n\n  const onUpload = (rsp: UploadResponse) => {\n    console.log('Uploaded: ' + path);\n    if (rsp.path) {\n      setPath(rsp.path);\n    } else {\n      setPath(path); // back to data\n    }\n  };\n\n  const doUpload = async (fileToUpload: File, overwriteExistingFile: boolean) => {\n    if (!fileToUpload) {\n      setErrorMessages(['Please select a file.']);\n      return;\n    }\n\n    const rsp = await getGrafanaStorage().upload(path, fileToUpload, overwriteExistingFile);\n    if (rsp.status !== 200) {\n      setErrorMessages([rsp.message]);\n    } else {\n      onUpload(rsp);\n    }\n  };\n\n  const onFileUpload = (event: FormEvent<HTMLInputElement>) => {\n    setErrorMessages([]);\n\n    const fileToUpload =\n      event.currentTarget.files && event.currentTarget.files.length > 0 && event.currentTarget.files[0]\n        ? event.currentTarget.files[0]\n        : undefined;\n    if (fileToUpload) {\n      setFile(fileToUpload);\n\n      const fileExists = filenameAlreadyExists(fileToUpload.name, fileNames);\n      if (!fileExists) {\n        setFilenameExists(false);\n        doUpload(fileToUpload, false).then((r) => {});\n      } else {\n        setFilenameExists(true);\n        setIsConfirmOpen(true);\n      }\n    }\n  };\n\n  const onOverwriteConfirm = () => {\n    if (file) {\n      doUpload(file, true).then((r) => {});\n      setIsConfirmOpen(false);\n    }\n  };\n\n  const onOverwriteDismiss = () => {\n    setFile(undefined);\n    setFilenameExists(false);\n    setIsConfirmOpen(false);\n  };\n\n  return (\n    <>\n      <FileUpload accept={fileFormats} onFileUpload={onFileUpload} key={fileUploadKey} className={styles.uploadButton}>\n        Upload\n      </FileUpload>\n\n      {file && filenameExists && (\n        <ConfirmModal\n          isOpen={isConfirmOpen}\n          body={\n            <div>\n              <p>{file?.name}</p>\n              <p>A file with this name already exists.</p>\n              <p>What would you like to do?</p>\n            </div>\n          }\n          title={'This file already exists'}\n          confirmText={'Replace'}\n          onConfirm={onOverwriteConfirm}\n          onDismiss={onOverwriteDismiss}\n        />\n      )}\n    </>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  uploadButton: css`\n    margin-right: ${theme.spacing(2)};\n  `,\n});\n","import { css } from '@emotion/css';\nimport { useMemo, useState } from 'react';\nimport { useParams } from 'react-router-dom-v5-compat';\nimport { useAsync } from 'react-use';\n\nimport { DataFrame, GrafanaTheme2, isDataFrame, ValueLinkConfig } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { useStyles2, Spinner, TabsBar, Tab, Button, Stack, Box, Alert, toIconName } from '@grafana/ui';\nimport appEvents from 'app/core/app_events';\nimport { Page } from 'app/core/components/Page/Page';\nimport { useNavModel } from 'app/core/hooks/useNavModel';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { ShowConfirmModalEvent } from 'app/types/events';\n\nimport { AddRootView } from './AddRootView';\nimport { Breadcrumb } from './Breadcrumb';\nimport { CreateNewFolderModal } from './CreateNewFolderModal';\nimport { FileView } from './FileView';\nimport { FolderView } from './FolderView';\nimport { RootView } from './RootView';\nimport { UploadButton } from './UploadButton';\nimport { getGrafanaStorage, filenameAlreadyExists } from './storage';\nimport { StorageView } from './types';\n\ninterface RouteParams {\n  path: string;\n}\n\ninterface QueryParams {\n  view: StorageView;\n}\n\nconst folderNameRegex = /^[a-z\\d!\\-_.*'() ]+$/;\nconst folderNameMaxLength = 256;\n\ninterface Props extends GrafanaRouteComponentProps<RouteParams, QueryParams> {}\n\nconst getParentPath = (path: string) => {\n  const lastSlashIdx = path.lastIndexOf('/');\n  if (lastSlashIdx < 1) {\n    return '';\n  }\n\n  return path.substring(0, lastSlashIdx);\n};\n\nexport default function StoragePage(props: Props) {\n  const styles = useStyles2(getStyles);\n  const navModel = useNavModel('storage');\n  const { path = '' } = useParams();\n  const view = props.queryParams.view ?? StorageView.Data;\n  const setPath = (p: string, view?: StorageView) => {\n    let url = ('/admin/storage/' + p).replace('//', '/');\n    if (view && view !== StorageView.Data) {\n      url += '?view=' + view;\n    }\n    locationService.push(url);\n  };\n\n  const [isAddingNewFolder, setIsAddingNewFolder] = useState(false);\n  const [errorMessages, setErrorMessages] = useState<string[]>([]);\n\n  const listing = useAsync((): Promise<DataFrame | undefined> => {\n    return getGrafanaStorage()\n      .list(path)\n      .then((frame) => {\n        if (frame) {\n          const name = frame.fields[0];\n          frame.fields[0] = {\n            ...name,\n            getLinks: (cfg: ValueLinkConfig) => {\n              const n = name.values[cfg.valueRowIndex ?? 0];\n              const p = path + '/' + n;\n              return [\n                {\n                  title: `Open ${n}`,\n                  href: `/admin/storage/${p}`,\n                  target: '_self',\n                  origin: name,\n                  onClick: () => {\n                    setPath(p);\n                  },\n                },\n              ];\n            },\n          };\n        }\n        return frame;\n      });\n  }, [path]);\n\n  const isFolder = useMemo(() => {\n    let isFolder = path?.indexOf('/') < 0;\n    if (listing.value) {\n      const length = listing.value.length;\n      if (length === 1) {\n        const first: string = listing.value.fields[0].values[0];\n        isFolder = !path.endsWith(first);\n      } else {\n        // TODO: handle files/folders which do not exist\n        isFolder = true;\n      }\n    }\n    return isFolder;\n  }, [path, listing]);\n\n  const fileNames = useMemo(() => {\n    return listing.value?.fields?.find((f) => f.name === 'name')?.values.filter((v) => typeof v === 'string') ?? [];\n  }, [listing]);\n\n  const renderView = () => {\n    const isRoot = !path?.length || path === '/';\n    switch (view) {\n      case StorageView.AddRoot:\n        if (!isRoot) {\n          setPath('');\n          return <Spinner />;\n        }\n        return <AddRootView onPathChange={setPath} />;\n    }\n\n    const frame = listing.value;\n    if (!isDataFrame(frame)) {\n      return <></>;\n    }\n\n    if (isRoot) {\n      return <RootView root={frame} onPathChange={setPath} />;\n    }\n\n    const opts = [{ what: StorageView.Data, text: 'Data' }];\n\n    // Root folders have a config page\n    if (path.indexOf('/') < 0) {\n      opts.push({ what: StorageView.Config, text: 'Configure' });\n    }\n\n    // Lets only apply permissions to folders (for now)\n    if (isFolder) {\n      // opts.push({ what: StorageView.Perms, text: 'Permissions' });\n    } else {\n      // TODO: only if the file exists in a storage engine with\n      opts.push({ what: StorageView.History, text: 'History' });\n    }\n\n    const canAddFolder = isFolder && (path.startsWith('resources') || path.startsWith('content'));\n    const canDelete = path.startsWith('resources/') || path.startsWith('content/');\n\n    const getErrorMessages = () => {\n      return (\n        <div className={styles.errorAlert}>\n          <Alert title=\"Upload failed\" severity=\"error\" onRemove={clearAlert}>\n            {errorMessages.map((error) => {\n              return <div key={error}>{error}</div>;\n            })}\n          </Alert>\n        </div>\n      );\n    };\n\n    const clearAlert = () => {\n      setErrorMessages([]);\n    };\n\n    return (\n      <div className={styles.wrapper}>\n        <Box display=\"flex\" justifyContent=\"space-between\" width=\"100%\" height={3}>\n          <Breadcrumb pathName={path} onPathChange={setPath} rootIcon={toIconName(navModel.node.icon ?? '')} />\n          <Stack>\n            {canAddFolder && (\n              <>\n                <UploadButton path={path} setErrorMessages={setErrorMessages} fileNames={fileNames} setPath={setPath} />\n                <Button onClick={() => setIsAddingNewFolder(true)}>New Folder</Button>\n              </>\n            )}\n            {canDelete && (\n              <Button\n                variant=\"destructive\"\n                onClick={() => {\n                  const text = isFolder\n                    ? 'Are you sure you want to delete this folder and all its contents?'\n                    : 'Are you sure you want to delete this file?';\n\n                  const parentPath = getParentPath(path);\n                  appEvents.publish(\n                    new ShowConfirmModalEvent({\n                      title: `Delete ${isFolder ? 'folder' : 'file'}`,\n                      text,\n                      icon: 'trash-alt',\n                      yesText: 'Delete',\n                      onConfirm: () =>\n                        getGrafanaStorage()\n                          .delete({ path, isFolder })\n                          .then(() => {\n                            setPath(parentPath);\n                          }),\n                    })\n                  );\n                }}\n              >\n                Delete\n              </Button>\n            )}\n          </Stack>\n        </Box>\n\n        {errorMessages.length > 0 && getErrorMessages()}\n\n        <TabsBar>\n          {opts.map((opt) => (\n            <Tab\n              key={opt.what}\n              label={opt.text}\n              active={opt.what === view}\n              onChangeTab={() => setPath(path, opt.what)}\n            />\n          ))}\n        </TabsBar>\n        {isFolder ? (\n          <FolderView listing={frame} view={view} />\n        ) : (\n          <FileView path={path} listing={frame} onPathChange={setPath} view={view} />\n        )}\n\n        {isAddingNewFolder && (\n          <CreateNewFolderModal\n            onSubmit={async ({ folderName }) => {\n              const folderPath = `${path}/${folderName}`;\n              const res = await getGrafanaStorage().createFolder(folderPath);\n              if (typeof res?.error !== 'string') {\n                setPath(folderPath);\n                setIsAddingNewFolder(false);\n              }\n            }}\n            onDismiss={() => {\n              setIsAddingNewFolder(false);\n            }}\n            validate={(folderName) => {\n              const lowerCase = folderName.toLowerCase();\n\n              if (filenameAlreadyExists(folderName, fileNames)) {\n                return 'A file or a folder with the same name already exists';\n              }\n\n              if (!folderNameRegex.test(lowerCase)) {\n                return 'Name contains illegal characters';\n              }\n\n              if (folderName.length > folderNameMaxLength) {\n                return `Name is too long, maximum length: ${folderNameMaxLength} characters`;\n              }\n\n              return true;\n            }}\n          />\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents isLoading={listing.loading}>{renderView()}</Page.Contents>\n    </Page>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  // TODO: remove `height: 90%`\n  wrapper: css`\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n  `,\n  tableControlRowWrapper: css`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    margin-bottom: ${theme.spacing(2)};\n  `,\n  // TODO: remove `height: 100%`\n  tableWrapper: css`\n    border: 1px solid ${theme.colors.border.medium};\n    height: 100%;\n  `,\n  border: css`\n    border: 1px solid ${theme.colors.border.medium};\n    padding: ${theme.spacing(2)};\n  `,\n  errorAlert: css`\n    padding-top: 20px;\n  `,\n  uploadButton: css`\n    margin-right: ${theme.spacing(2)};\n  `,\n});\n","import { DataFrame, dataFrameFromJSON, DataFrameJSON, getDisplayProcessor } from '@grafana/data';\nimport { config, getBackendSrv } from '@grafana/runtime';\nimport { backendSrv } from 'app/core/services/backend_srv';\n\nimport { UploadResponse, StorageInfo, ItemOptions, WriteValueRequest, WriteValueResponse } from './types';\n\n// Likely should be built into the search interface!\nexport interface GrafanaStorage {\n  get: <T = any>(path: string) => Promise<T>;\n  list: (path: string) => Promise<DataFrame | undefined>;\n  upload: (folder: string, file: File, overwriteExistingFile: boolean) => Promise<UploadResponse>;\n  createFolder: (path: string) => Promise<{ error?: string }>;\n  delete: (path: { isFolder: boolean; path: string }) => Promise<{ error?: string }>;\n\n  /** Admin only */\n  getConfig: () => Promise<StorageInfo[]>;\n\n  /** Called before save */\n  getOptions: (path: string) => Promise<ItemOptions>;\n\n  /** Saves dashboards */\n  write: (path: string, options: WriteValueRequest) => Promise<WriteValueResponse>;\n}\n\nclass SimpleStorage implements GrafanaStorage {\n  constructor() {}\n\n  async get<T = any>(path: string): Promise<T> {\n    const storagePath = `api/storage/read/${path}`.replace('//', '/');\n    return getBackendSrv().get<T>(storagePath);\n  }\n\n  async list(path: string): Promise<DataFrame | undefined> {\n    let url = 'api/storage/list/';\n    if (path) {\n      url += path + '/';\n    }\n    const rsp = await getBackendSrv().get<DataFrameJSON>(url);\n    if (rsp?.data) {\n      const f = dataFrameFromJSON(rsp);\n      for (const field of f.fields) {\n        field.display = getDisplayProcessor({ field, theme: config.theme2 });\n      }\n      return f;\n    }\n    return undefined;\n  }\n\n  async createFolder(path: string): Promise<{ error?: string }> {\n    const res = await getBackendSrv().post<{ success: boolean; message: string }>(\n      '/api/storage/createFolder',\n      JSON.stringify({ path })\n    );\n\n    if (!res.success) {\n      return {\n        error: res.message ?? 'unknown error',\n      };\n    }\n\n    return {};\n  }\n\n  async deleteFolder(req: { path: string; force: boolean }): Promise<{ error?: string }> {\n    const res = await getBackendSrv().post<{ success: boolean; message: string }>(\n      `/api/storage/deleteFolder`,\n      JSON.stringify(req)\n    );\n\n    if (!res.success) {\n      return {\n        error: res.message ?? 'unknown error',\n      };\n    }\n\n    return {};\n  }\n\n  async deleteFile(req: { path: string }): Promise<{ error?: string }> {\n    const res = await getBackendSrv().post<{ success: boolean; message: string }>(`/api/storage/delete/${req.path}`);\n\n    if (!res.success) {\n      return {\n        error: res.message ?? 'unknown error',\n      };\n    }\n\n    return {};\n  }\n\n  async delete(req: { isFolder: boolean; path: string }): Promise<{ error?: string }> {\n    return req.isFolder ? this.deleteFolder({ path: req.path, force: true }) : this.deleteFile({ path: req.path });\n  }\n\n  async upload(folder: string, file: File, overwriteExistingFile: boolean): Promise<UploadResponse> {\n    const formData = new FormData();\n    formData.append('folder', folder);\n    formData.append('file', file);\n    formData.append('overwriteExistingFile', String(overwriteExistingFile));\n    const res = await fetch('/api/storage/upload', {\n      method: 'POST',\n      body: formData,\n    });\n\n    let body = await res.json();\n    if (!body) {\n      body = {};\n    }\n    body.status = res.status;\n    body.statusText = res.statusText;\n    if (res.status !== 200 && !body.err) {\n      body.err = true;\n    }\n    return body;\n  }\n\n  async write(path: string, options: WriteValueRequest): Promise<WriteValueResponse> {\n    return backendSrv.post<WriteValueResponse>(`/api/storage/write/${path}`, options);\n  }\n\n  async getConfig() {\n    return getBackendSrv().get<StorageInfo[]>('/api/storage/config');\n  }\n\n  async getOptions(path: string) {\n    return getBackendSrv().get<ItemOptions>(`/api/storage/options/${path}`);\n  }\n}\n\nexport function filenameAlreadyExists(folderName: string, fileNames: string[]) {\n  const lowerCase = folderName.toLowerCase();\n  const trimmedLowerCase = lowerCase.trim();\n  const existingTrimmedLowerCaseNames = fileNames.map((f) => f.trim().toLowerCase());\n\n  return existingTrimmedLowerCaseNames.includes(trimmedLowerCase);\n}\n\nlet storage: GrafanaStorage | undefined;\n\nexport function getGrafanaStorage() {\n  if (!storage) {\n    storage = new SimpleStorage();\n  }\n  return storage;\n}\n"],"names":["Form","defaultValues","onSubmit","validateOnMount","validateFieldsOnMount","children","validateOn","maxWidth","htmlProps","handleSubmit","trigger","formState","rest","AddRootView","onPathChange","Button","Breadcrumb","pathName","rootIcon","styles","getStyles","paths","Icon","path","index","url","onClickBreadcrumb","isLastBreadcrumb","theme","initialFormModel","CreateNewFolderModal","validate","onDismiss","Modal","register","errors","Field","Input","StorageView","WorkflowID","FileView","listing","view","info","getFileDisplayInfo","body","useAsync","rsp","src","SanitizedSVG","width","height","CodeEditor","text","idx","FolderView","Table","RootView","root","storage","searchQuery","setSearchQuery","base","roots","show","lower","r","v","content","renderRoots","pfix","Stack","s","ok","Card","notice","Alert","TagList","getTags","getIconName","InlineField","FilterInput","tags","type","fileFormats","UploadButton","setErrorMessages","setPath","fileNames","file","setFile","filenameExists","setFilenameExists","fileUploadKey","setFileUploadKey","isConfirmOpen","setIsConfirmOpen","prev","onUpload","doUpload","fileToUpload","overwriteExistingFile","onFileUpload","event","onOverwriteConfirm","onOverwriteDismiss","FileUpload","ConfirmModal","folderNameRegex","folderNameMaxLength","getParentPath","lastSlashIdx","StoragePage","props","navModel","useNavModel","p","isAddingNewFolder","setIsAddingNewFolder","errorMessages","frame","name","cfg","n","isFolder","first","f","renderView","isRoot","Spinner","opts","canAddFolder","canDelete","getErrorMessages","clearAlert","error","Box","parentPath","TabsBar","opt","Tab","folderName","folderPath","lowerCase","Page","SimpleStorage","storagePath","field","res","req","folder","formData","options","filenameAlreadyExists","trimmedLowerCase","getGrafanaStorage"],"sourceRoot":""}