{"version":3,"file":"nodeGraphPanel.f3cf4eaaa80ab54d2e6f.js","mappings":"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","sources":["webpack://grafana/./public/app/plugins/panel/nodeGraph/NodeGraphPanel.tsx","webpack://grafana/./public/app/plugins/panel/nodeGraph/editor/ArcOptionsEditor.tsx","webpack://grafana/./public/app/plugins/panel/nodeGraph/suggestions.ts","webpack://grafana/./public/app/plugins/panel/nodeGraph/module.tsx"],"sourcesContent":["import memoizeOne from 'memoize-one';\nimport { useId } from 'react';\n\nimport { PanelProps } from '@grafana/data';\n\nimport { useLinks } from '../../../features/explore/utils/links';\n\nimport { NodeGraph } from './NodeGraph';\nimport { NodeGraphOptions } from './types';\nimport { getNodeGraphDataFrames } from './utils';\n\nexport const NodeGraphPanel = ({ width, height, data, options }: PanelProps<NodeGraphOptions>) => {\n  const getLinks = useLinks(data.timeRange);\n  const panelId = useId();\n\n  if (!data || !data.series.length) {\n    return (\n      <div className=\"panel-empty\">\n        <p>No data found in response</p>\n      </div>\n    );\n  }\n\n  const memoizedGetNodeGraphDataFrames = memoizeOne(getNodeGraphDataFrames);\n  return (\n    <div style={{ width, height }}>\n      <NodeGraph\n        dataFrames={memoizedGetNodeGraphDataFrames(data.series, options)}\n        getLinks={getLinks}\n        panelId={panelId}\n      />\n    </div>\n  );\n};\n","import { css } from '@emotion/css';\n\nimport { Field, StandardEditorProps } from '@grafana/data';\nimport { Button, ColorPicker, useStyles2 } from '@grafana/ui';\nimport { FieldNamePicker } from '@grafana/ui/src/components/MatchersUI/FieldNamePicker';\n\nimport { ArcOption, NodeGraphOptions } from '../types';\n\ntype Settings = { filter: (field: Field) => boolean };\ntype ArcOptionsEditorProps = StandardEditorProps<ArcOption[], Settings, NodeGraphOptions, undefined>;\n\nexport const ArcOptionsEditor = ({ value, onChange, context }: ArcOptionsEditorProps) => {\n  const styles = useStyles2(getStyles);\n\n  const addArc = () => {\n    const newArc = { field: '', color: '' };\n    onChange(value ? [...value, newArc] : [newArc]);\n  };\n\n  const removeArc = (idx: number) => {\n    const copy = value?.slice();\n    copy.splice(idx, 1);\n    onChange(copy);\n  };\n\n  const updateField = <K extends keyof ArcOption>(idx: number, field: K, newValue: ArcOption[K]) => {\n    let arcs = value?.slice() ?? [];\n    arcs[idx][field] = newValue;\n    onChange(arcs);\n  };\n\n  return (\n    <>\n      {value?.map((arc, i) => {\n        return (\n          <div className={styles.section} key={i}>\n            <FieldNamePicker\n              context={context}\n              value={arc.field ?? ''}\n              onChange={(val) => {\n                updateField(i, 'field', val);\n              }}\n              item={{\n                settings: {\n                  filter: (field: Field) => field.name.includes('arc__'),\n                },\n                id: `arc-field-${i}`,\n                name: `arc-field-${i}`,\n              }}\n            />\n            <ColorPicker\n              color={arc.color || '#808080'}\n              onChange={(val) => {\n                updateField(i, 'color', val);\n              }}\n            />\n            <Button size=\"sm\" icon=\"minus\" variant=\"secondary\" onClick={() => removeArc(i)} title=\"Remove arc\" />\n          </div>\n        );\n      })}\n      <Button size={'sm'} icon=\"plus\" onClick={addArc} variant=\"secondary\">\n        Add arc\n      </Button>\n    </>\n  );\n};\n\nconst getStyles = () => {\n  return {\n    section: css`\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      gap: 0 8px;\n      margin-bottom: 8px;\n    `,\n  };\n};\n","import { DataFrame, FieldType, VisualizationSuggestionsBuilder, VisualizationSuggestionScore } from '@grafana/data';\nimport { SuggestionName } from 'app/types/suggestions';\n\nexport class NodeGraphSuggestionsSupplier {\n  getListWithDefaults(builder: VisualizationSuggestionsBuilder) {\n    return builder.getListAppender<{}, {}>({\n      name: SuggestionName.NodeGraph,\n      pluginId: 'nodeGraph',\n    });\n  }\n\n  hasCorrectFields(frames: DataFrame[]): boolean {\n    let hasNodesFrame = false;\n    let hasEdgesFrame = false;\n\n    const nodeFields: Array<[string, FieldType]> = [\n      ['id', FieldType.string],\n      ['title', FieldType.string],\n      ['mainstat', FieldType.number],\n    ];\n    const edgeFields: Array<[string, FieldType]> = [\n      ['id', FieldType.string],\n      ['source', FieldType.string],\n      ['target', FieldType.string],\n    ];\n\n    for (const frame of frames) {\n      if (this.checkFields(nodeFields, frame)) {\n        hasNodesFrame = true;\n      }\n      if (this.checkFields(edgeFields, frame)) {\n        hasEdgesFrame = true;\n      }\n    }\n\n    return hasNodesFrame && hasEdgesFrame;\n  }\n\n  checkFields(fields: Array<[string, FieldType]>, frame: DataFrame): boolean {\n    let hasCorrectFields = true;\n\n    for (const field of fields) {\n      const [name, type] = field;\n      const frameField = frame.fields.find((f) => f.name === name);\n      if (!frameField || type !== frameField.type) {\n        hasCorrectFields = false;\n        break;\n      }\n    }\n\n    return hasCorrectFields;\n  }\n\n  getSuggestionsForData(builder: VisualizationSuggestionsBuilder) {\n    if (!builder.data) {\n      return;\n    }\n\n    const hasCorrectFields = this.hasCorrectFields(builder.data.series);\n    const nodeGraphFrames = builder.data.series.filter(\n      (df) => df.meta && df.meta.preferredVisualisationType === 'nodeGraph'\n    );\n\n    if (hasCorrectFields || nodeGraphFrames.length === 2) {\n      this.getListWithDefaults(builder).append({\n        name: SuggestionName.NodeGraph,\n        score: VisualizationSuggestionScore.Best,\n      });\n    }\n  }\n}\n","import { FieldConfigProperty, PanelPlugin } from '@grafana/data';\n\nimport { NodeGraphPanel } from './NodeGraphPanel';\nimport { ArcOptionsEditor } from './editor/ArcOptionsEditor';\nimport { NodeGraphSuggestionsSupplier } from './suggestions';\nimport { NodeGraphOptions } from './types';\n\nexport const plugin = new PanelPlugin<NodeGraphOptions>(NodeGraphPanel)\n  .useFieldConfig({\n    disableStandardOptions: Object.values(FieldConfigProperty).filter((v) => v !== FieldConfigProperty.Links),\n  })\n  .setPanelOptions((builder, context) => {\n    builder.addNestedOptions({\n      category: ['Nodes'],\n      path: 'nodes',\n      build: (builder) => {\n        builder.addUnitPicker({\n          name: 'Main stat unit',\n          path: 'mainStatUnit',\n        });\n        builder.addUnitPicker({\n          name: 'Secondary stat unit',\n          path: 'secondaryStatUnit',\n        });\n        builder.addCustomEditor({\n          name: 'Arc sections',\n          path: 'arcs',\n          id: 'arcs',\n          editor: ArcOptionsEditor,\n        });\n      },\n    });\n    builder.addNestedOptions({\n      category: ['Edges'],\n      path: 'edges',\n      build: (builder) => {\n        builder.addUnitPicker({\n          name: 'Main stat unit',\n          path: 'mainStatUnit',\n        });\n        builder.addUnitPicker({\n          name: 'Secondary stat unit',\n          path: 'secondaryStatUnit',\n        });\n      },\n    });\n  })\n  .setSuggestionsSupplier(new NodeGraphSuggestionsSupplier());\n"],"names":["NodeGraphPanel","width","height","data","options","getLinks","panelId","memoizedGetNodeGraphDataFrames","NodeGraph","ArcOptionsEditor","value","onChange","context","styles","getStyles","addArc","newArc","removeArc","idx","copy","updateField","field","newValue","arcs","arc","i","FieldNamePicker","val","ColorPicker","Button","NodeGraphSuggestionsSupplier","builder","frames","hasNodesFrame","hasEdgesFrame","nodeFields","edgeFields","frame","fields","hasCorrectFields","name","type","frameField","f","nodeGraphFrames","df","PanelPlugin","v"],"sourceRoot":""}