{"version":3,"file":"UserListPage.f184594c8b7ac2f7f149.js","mappings":"sMAsCO,MAAMA,EAAiB,CAAC,CAC7B,UAAAC,EACA,MAAAC,EACA,OAAAC,EACA,MAAAC,EACA,kBAAAC,EACA,YAAAC,EACA,SAAAC,EACA,kBAAAC,EACA,yBAAAC,EACA,MAAAC,EAAQ,GACR,aAAAC,EACA,aAAAC,EACA,SAAAC,EACA,MAAAC,EACA,UAAAC,CACF,IAAa,CACX,KAAM,CAAC,CAAE,QAAAC,EAAS,MAAOC,EAAef,GAAS,CAAC,CAAE,EAAGgB,CAAY,KAAI,KAAW,SAAY,CAC5F,GAAI,CACF,GAAIhB,EACF,OAAOA,EAET,GAAIQ,GAAiBE,GAAc,OACjC,OAAOA,EAGT,GAAI,KAAW,cAAc,sBAAoB,mBAAmB,GAAKT,EAAS,EAChF,OAAO,QAAM,MAAeA,EAAQC,CAAK,CAE7C,MAAY,CAEV,QAAQ,MAAM,uBAAuB,CACvC,CACA,MAAO,CAAC,CACV,EAAG,CAACA,EAAOD,EAAQS,EAAcV,CAAK,CAAC,KAEvC,aAAU,IAAM,CAEVE,GACFc,EAAa,CAEjB,EAAG,CAACA,EAAcd,CAAK,CAAC,EAExB,MAAMe,EAAgB,MAAOjB,GAAkB,CACxCQ,EAGMC,GACTA,EAAaT,EAAOC,EAAQC,CAAK,GAHjC,QAAM,MAAgBF,EAAOC,EAAQC,CAAK,EAC1C,MAAMc,EAAa,EAIvB,EAEME,EACJ,KAAW,cAAc,sBAAoB,kBAAkB,GAC/D,KAAW,cAAc,sBAAoB,qBAAqB,EAEpE,SACE,OAAC,KACC,aAAAH,EACA,UAAAhB,EACA,cAAAkB,EACA,kBAAAd,EACA,YAAAC,EACA,UAAWU,GAAWD,EACtB,SAAAR,EACA,kBAAAC,EACA,yBAAAC,EACA,cAAa,GACb,MAAAC,EACA,eAAAU,EACA,SAAAP,EACA,MAAAC,CAAA,CACF,CAEJ,C,wEClGA,MAAMO,EADa,OAAO,OAAO,GAAO,EAAE,OAAQC,GAAMA,IAAM,IAAQ,IAAI,EAC/C,IAAKA,IAAO,CAAE,MAAOA,EAAG,MAAOA,CAAE,EAAE,EAEvD,SAASC,EAAc,CAAE,MAAAC,EAAO,SAAAC,EAAU,aAAcC,EAAW,QAAAC,EAAS,UAAAC,EAAW,GAAGC,CAAU,EAAU,CACnH,SACE,OAAC,MACC,QAAAF,EACA,MAAAH,EACA,QAAAH,EACA,SAAWS,GAAQL,EAASK,EAAI,OAAS,IAAQ,IAAI,EACrD,YAAY,iBACZ,aAAYJ,EACZ,UAAAE,EACC,GAAGC,CAAA,CACN,CAEJ,C,4RCrBA,MAAME,EAAqB,CACzB,aAAY,IACd,EAEMC,KAAY,WAAQ,KAAMD,CAAkB,EAQlD,MAAME,UAAmB,eAAqB,CAC5C,QAAS,CACP,KAAM,CAAE,QAAAC,EAAS,aAAAC,CAAa,EAAI,KAAK,MACvC,SACE,QAAC,MACC,oBAAC,MAAI,SAAAD,EAAQ,MAAM,KACnB,OAAC,MAAI,SAAAA,EAAQ,KAAK,KAClB,QAAC,MAAG,UAAU,aACZ,oBAACE,EAAA,EAAe,CAAC,KAAK,OAAO,QAAQ,YAAY,KAAK,KAAK,QAAS,IAAMF,EAAQ,IAAK,uBAEvF,EAAkB,QAEpB,KACA,OAAC,MACC,mBAACG,EAAA,IACC,QAAQ,cACR,KAAK,KACL,KAAK,QACL,QAAS,IAAMF,EAAaD,EAAQ,IAAI,EACxC,aAAW,gBACb,EACF,GACF,CAEJ,CACF,CAEA,QAAeF,EAAUC,CAAU,ECrCpB,MAAMK,UAAsB,eAAqB,CAC9D,QAAS,CACP,KAAM,CAAE,SAAAC,CAAS,EAAI,KAAK,MAE1B,SACE,QAAC,SAAM,UAAU,2BACf,oBAAC,SACC,oBAAC,MACC,oBAAC,MAAG,iBAAK,KACT,OAAC,MAAG,gBAAI,KACR,OAAC,OAAG,KACJ,OAAC,MAAG,MAAO,CAAE,MAAO,MAAO,EAAG,GAChC,EACF,KACA,OAAC,SAAM,cAAY,qBAChB,SAAAA,EAAS,IAAI,CAACL,EAASM,OACf,OAAC,EAAU,CAAgC,QAAAN,CAAA,EAA1B,GAAGA,EAAQ,EAAE,IAAIM,CAAK,EAAsB,CACrE,EACH,GACF,CAEJ,CACF,C,0BC1BO,KAAM,CAAE,UAAAC,EAAW,WAAAC,GAAY,YAAAC,EAAY,EAAI,KAEhDC,GAAc,CAACC,EAAsCC,IAAkBA,EAChEC,MAA6B,MAAe,CAACN,EAAWG,EAAW,EAAG,CAACI,EAASC,IAAgB,CAC3G,MAAMC,EAAQ,IAAI,OAAOD,EAAa,GAAG,EAEzC,OADgBD,EAAQ,OAAQG,GAAWD,EAAM,KAAKC,EAAO,IAAI,GAAKD,EAAM,KAAKC,EAAO,KAAK,CAAC,CAEhG,CAAC,E,4FCQM,SAASC,GAA+B,CAC7C,MAAO,OAAOC,EAAUC,IAAa,CACnC,GAAI,CACFD,KAAS,MAAgB,CAAC,EAC1B,KAAM,CAAE,QAAAE,EAAS,KAAAC,EAAM,YAAAP,EAAa,KAAAQ,CAAK,EAAIH,EAAS,EAAE,MAClDI,EAAQ,QAAM,MAAc,EAAE,IAClC,2BACAC,EAAA,GAAwB,CAAE,QAASJ,EAAS,KAAAC,EAAM,MAAOP,EAAa,KAAAQ,CAAK,CAAC,CAC9E,EAEA,GACE,KAAW,6BAA6B,GACxC,KAAW,cAAc,sBAAoB,mBAAmB,EAChE,CACAJ,KAAS,MAAgB,CAAC,EAC1B,MAAMjD,EAAQ,KAAW,KAAK,MACxBwD,EAAUF,GAAO,SAAS,IAAKG,GAAeA,EAAE,MAAM,EACtD3D,EAAQ,QAAM,MAAc,EAAE,KAAK,yCAA0C,CAAE,QAAA0D,EAAS,MAAAxD,CAAM,CAAC,EACrGsD,EAAM,SAAS,QAASG,GAAe,CACrCA,EAAE,MAAQ3D,EAAQA,EAAM2D,EAAE,MAAM,GAAK,CAAC,EAAI,CAAC,CAC7C,CAAC,EACDR,KAAS,MAAc,CAAC,CAC1B,CACAA,KAAS,MAAYK,CAAK,CAAC,CAC7B,MAAgB,IACd,MAAc,CAChB,CACF,CACF,CAEA,MAAMI,MAAyB,aAAUT,GAAaA,EAASD,EAAU,CAAC,EAAG,GAAG,EAEzE,SAASW,EAAWC,EAAkC,CAC3D,MAAO,OAAOX,GAAa,CACzB,QAAM,MAAc,EAAE,MAAM,kBAAkBW,EAAK,MAAM,GAAI,CAAE,KAAMA,EAAK,IAAK,CAAC,EAChFX,EAASD,EAAU,CAAC,CACtB,CACF,CAEO,SAASa,GAAW9D,EAAmC,CAC5D,MAAO,OAAOkD,GAAa,CACzB,QAAM,MAAc,EAAE,OAAO,kBAAkBlD,CAAM,EAAE,EACvDkD,EAASD,EAAU,CAAC,CACtB,CACF,CAEO,SAASc,GAAWV,EAAiC,CAC1D,MAAO,OAAOH,GAAa,CACzBA,KAAS,MAAYG,CAAI,CAAC,EAC1BH,EAASD,EAAU,CAAC,CACtB,CACF,CAEO,SAASe,GAAW,CAAE,OAAAC,CAAO,EAA8C,CAChF,MAAMX,EAAOW,EAAO,OAAS,GAAGA,EAAO,CAAC,EAAE,EAAE,IAAIA,EAAO,CAAC,EAAE,KAAO,OAAS,KAAK,GAAK,OACpF,MAAO,OAAOf,GAAa,CACzBA,KAAS,MAAYI,CAAI,CAAC,EAC1BJ,EAASD,EAAU,CAAC,CACtB,CACF,CAEO,SAASiB,GAAkBvB,EAAkC,CAClE,MAAO,OAAOO,GAAa,CACzBA,KAAS,MAAmBP,CAAK,CAAC,EAClCgB,GAAuBT,CAAQ,CACjC,CACF,CCrFO,MAAMiB,GAAYC,GAAsB,CAC7C,MAAMrB,EAAQ,IAAI,OAAOqB,EAAM,YAAa,GAAG,EAE/C,OAAOA,EAAM,MAAM,OAAQP,GAClBd,EAAM,KAAKc,EAAK,KAAK,GAAKd,EAAM,KAAKc,EAAK,KAAK,GAAKd,EAAM,KAAKc,EAAK,IAAI,CAChF,CACH,EAEaQ,GAAuBD,GAAsBA,EAAM,YCOhE,SAASE,GAAgBF,EAAmB,CAC1C,MAAO,CACL,YAAaC,GAAoBD,EAAM,KAAK,EAC5C,oBAAqB5B,GAAY4B,EAAM,OAAO,EAC9C,wBAAyBA,EAAM,MAAM,wBACrC,uBAAwBA,EAAM,MAAM,sBACtC,CACF,CAEA,MAAM,GAAqB,CACzB,kBAAiB,EACnB,EAiDaG,MA/CK,WAAQD,GAAiB,EAAkB,EAIpB,CAAC,CACxC,wBAAAE,EACA,uBAAAC,EACA,YAAA3B,EACA,oBAAA4B,EACA,kBAAAR,EACA,cAAAS,EACA,YAAAC,CACF,IAA0B,CACxB,MAAM1D,EAAU,CACd,CAAE,MAAO,QAAS,MAAO,OAAQ,EACjC,CAAE,MAAO,oBAAoBwD,CAAmB,IAAK,MAAO,SAAU,CACxE,EAKMG,EAJuB,KAAW,cAAc,sBAAoB,WAAW,GAIpC,EAAE,KAAO,kBAAoB,KAAO,qBAErF,SACE,QAAC,OAAI,UAAU,kBAAkB,cAAY,mBAC3C,oBAACC,GAAA,EAAW,CAAC,KAAI,GACf,mBAACC,EAAA,GACC,MAAOjC,EACP,SAAUoB,EACV,YAAY,sCACd,EACF,EACCQ,EAAsB,MACrB,OAAC,OAAI,MAAO,CAAE,WAAY,MAAO,EAC/B,mBAACM,EAAA,EAAgB,CAAC,MAAOJ,EAAc,UAAY,QAAS,QAAA1D,EAAkB,SAAUyD,CAAA,CAAe,EACzG,EAEDE,MAAoB,OAAC,KAAU,CAAC,KAAK,mBAAmB,kBAAM,EAC9DJ,MACC,OAAC,KAAU,CAAC,KAAMA,EAAwB,OAAO,SAAS,IAAI,WAC3D,SAAAD,CAAA,CACH,GAEJ,CAEJ,CAEiE,EC3DjE,SAAS,GAAgBJ,EAAmB,CAC1C,MAAMtB,EAAcuB,GAAoBD,EAAM,KAAK,EACnD,MAAO,CACL,MAAOD,GAASC,EAAM,KAAK,EAC3B,YAAaC,GAAoBD,EAAM,KAAK,EAC5C,KAAMA,EAAM,MAAM,KAClB,WAAYA,EAAM,MAAM,WACxB,QAASA,EAAM,MAAM,QACrB,SAAUxB,GAA2BwB,EAAM,QAAStB,CAAW,EAC/D,oBAAqBsB,EAAM,MAAM,oBACjC,UAAWA,EAAM,MAAM,UACvB,aAAcA,EAAM,MAAM,YAC5B,CACF,CAEA,MAAM,GAAqB,CACzB,UAAS,EACT,cAAa,KACb,WAAU,GACV,WAAU,GACV,WAAU,EACV,WAAU,EACZ,EAiFaa,MA/EK,WAAQ,GAAiB,EAAkB,EAQrB,CAAC,CACvC,MAAA1B,EACA,KAAAF,EACA,WAAA6B,EACA,SAAA9C,EACA,oBAAA+C,EACA,UAAAvE,EACA,aAAAwE,EACA,UAAAnC,EACA,cAAAoC,EACA,WAAAtB,EACA,WAAAH,EACA,WAAAE,GACA,WAAAE,CACF,IAAa,CACX,KAAM,CAACY,EAAaU,EAAc,KAAI,YAAS,EAAK,EAC9CC,GAA0BJ,KAAsB,KAAeA,CAAmB,EAAI,MAE5F,aAAU,IAAM,CACdlC,EAAU,EACVoC,EAAc,CAChB,EAAG,CAACA,EAAepC,CAAS,CAAC,EAE7B,MAAMuC,GAAe,CAACC,GAAe5B,KAAkB,CACrDD,EAAW,CAAE,GAAGC,GAAM,KAAA4B,EAAW,CAAC,CACpC,EAEMC,GAAgB7B,IAAkBC,GAAWD,GAAK,MAAM,EAExDc,GAAgB,IAAM,CAC1BW,GAAe,CAACV,CAAW,CAC7B,EAEMe,GAAoB,IAAM,CAC9B1C,EAAU,CACZ,EAEM2C,GAAc,IACdhB,KACK,OAACzC,EAAa,CAAC,SAAAC,CAAA,CAAoB,KAGxC,OAACyD,EAAA,GACC,MAAAtC,EACA,MAAO,KAAW,KAAK,MACvB,aAAA6B,EACA,aAAAI,GACA,aAAAE,GACA,kBAAAC,GACA,UAAW3B,EACX,WAAYD,EACZ,KAAAV,EACA,WAAA6B,CAAA,CACF,EAKN,SACE,QAAC,KAAK,SAAL,CAAc,UAAW,CAACtE,EACzB,oBAAC2D,GAAc,CAAC,cAAAI,GAA8B,YAAAC,CAAA,CAA0B,EACvEW,OACC,OAACO,EAAA,EAAK,CAAC,SAAS,OAAO,MAAM,GAC3B,mBAAC,OAAI,wBAAyB,CAAE,OAAQP,EAAwB,EAAG,EACrE,EAED3E,GAAagF,GAAY,GAC5B,CAEJ,CAEsE,EAEvD,SAASG,IAAgB,CACtC,OACE,IAAC,MAAK,MAAM,QACV,aAACd,GAAA,EAAqB,EACxB,CAEJ,C,mJCzHO,MAAMe,GAAW,CAAC,CAAE,MAAAC,EAAO,KAAAC,CAAK,IAChCD,GAAO,OAILA,EAAM,OAAS,KACpB,OAACE,GAAA,GACC,UAAW,MACX,WAAS,OAACC,EAAA,EAAK,CAAC,UAAW,SAAW,SAAAH,GAAO,IAAKI,MAAS,OAAC,QAAsB,SAAAA,EAAK,MAAjBA,EAAK,IAAiB,CAAO,EAAE,EAErG,mBAACC,GAAA,CAAQ,KAAAJ,EAAa,SAAAD,EAAM,OAAO,EACrC,KAEA,OAACK,GAAA,CAAQ,KAAAJ,EAAa,SAAAD,EAAM,CAAC,EAAE,KAAK,EAX7B,KAmBEK,MAAU,cAAsC,CAAC,CAAE,SAAAC,EAAU,KAAAL,CAAK,EAAGM,OAE9E,QAACC,GAAA,EAAG,CAAC,IAAAD,EAAU,QAAS,OAAQ,WAAY,SAAU,YAAa,EACjE,oBAACE,GAAA,EAAI,CAAC,KAAMR,CAAA,CAAM,EAAE,OAAC,OAACO,GAAA,EAAG,CAAC,WAAY,EAAI,SAAAF,CAAA,CAAS,GACrD,CAEH,EAEDD,GAAQ,YAAc,iBCJf,MAAMK,GAAa,CAAC,CACzB,MAAApD,EACA,WAAAqD,EACA,WAAA1B,EACA,aAAA2B,EACA,YAAAC,EACA,UAAAC,CACF,IAAuB,CACrB,MAAMC,KAAmB,WAAQ,IAAMzD,EAAM,KAAMM,GAASA,EAAK,YAAY,EAAG,CAACN,CAAK,CAAC,EACjF0D,KAAgB,WAAQ,IAAM1D,EAAM,KAAMM,GAASA,EAAK,IAAI,EAAG,CAACN,CAAK,CAAC,EAEtE2D,KAAkC,WACtC,IAAM,CACJ,CACE,GAAI,YACJ,OAAQ,GACR,KAAM,CAAC,CAAE,KAAM,CAAE,MAAA7F,CAAM,CAAE,IAAyBA,MAAS,OAAC8F,GAAA,EAAM,CAAC,IAAK9F,EAAO,IAAK,cAAe,CACrG,EACA,CACE,GAAI,QACJ,OAAQ,QACR,KAAM,CAAC,CAAE,IAAK,CAAE,SAAA+F,CAAS,CAAE,OAEvB,OAACC,GAAA,EAAQ,CAAC,MAAM,UAAU,OAAQ,GAAO,KAAM,qBAAqBD,EAAS,EAAE,GAAI,MAAM,YACtF,SAAAA,EAAS,MACZ,EAGJ,SAAU,QACZ,EACA,CACE,GAAI,QACJ,OAAQ,QACR,KAAM,CAAC,CAAE,KAAM,CAAE,MAAA/F,CAAM,CAAE,IAAqBA,EAC9C,SAAU,QACZ,EACA,CACE,GAAI,OACJ,OAAQ,OACR,KAAM,CAAC,CAAE,KAAM,CAAE,MAAAA,CAAM,CAAE,IAAoBA,EAC7C,SAAU,QACZ,EACA,GAAI4F,EACA,CACE,CACE,GAAI,OACJ,OAAQ,aACR,KAAM,CAAC,CAAE,KAAM,CAAE,MAAA5F,EAAO,IAAAiG,CAAI,CAAE,OAE1B,QAAClB,EAAA,EAAK,CAAC,WAAY,SACjB,oBAACJ,GAAQ,CAAC,MAAO3E,EAAO,KAAM,WAAY,EACzCiG,EAAI,SAAS,YACZ,OAACnB,GAAA,EAAO,CAAC,UAAU,MAAM,QAAQ,gBAC/B,mBAACO,GAAA,EAAI,CAAC,KAAK,QAAS,GACtB,GAEJ,CAGN,CACF,EACA,CAAC,EACL,GAAIM,EACA,CACE,CACE,GAAI,eACJ,OAAQ,gBACR,KAAM,CAAC,CAAE,KAAM,CAAE,MAAA3F,CAAM,CAAE,IAChBA,IAAU,UACf,QAACkG,GAAA,EAAI,CAAC,MAAO,WAAY,yBACV,OACb,OAACpB,GAAA,EAAO,CAAC,UAAU,MAAM,QAAQ,2DAC/B,mBAACO,GAAA,EAAI,CAAC,KAAK,iBAAkB,GAC/B,GACF,EAEArF,CAGN,CACF,EACA,CAAC,EACL,CACE,GAAI,gBACJ,OAAQ,cACR,cAAe,CACb,QAAS,yCACT,SAAU,iBACZ,EACA,KAAM,CAAC,CAAE,KAAM,CAAE,MAAAA,CAAM,CAAE,OAChB,mBAAG,SAAAA,MAAS,mBAAG,SAAAA,IAAU,cAAa,OAACkG,GAAA,EAAI,CAAC,MAAO,WAAY,iBAAK,EAAUlG,CAAA,CAAM,EAAI,EAEjG,SAAU,CAACmG,EAAGC,IAAM,IAAI,KAAKD,EAAE,SAAS,UAAW,EAAE,QAAQ,EAAI,IAAI,KAAKC,EAAE,SAAS,UAAW,EAAE,QAAQ,CAC5G,EACA,CACE,GAAI,aACJ,OAAQ,SACR,KAAM,CAAC,CAAE,KAAM,CAAE,MAAApG,CAAM,CAAE,OACvB,mBAAG,eAAM,QAAQA,CAAK,GAAKA,EAAM,OAAS,MAAK,OAACqG,GAAA,EAAQ,CAAC,MAAOrG,EAAM,CAAC,EAAG,WAAY,GAAO,MAAO,EAAG,EAAG,CAE9G,EACA,CACE,GAAI,aACJ,OAAQ,GACR,KAAM,CAAC,CAAE,KAAM,CAAE,MAAAA,CAAM,CAAE,OAA0B,mBAAG,SAAAA,MAAS,OAACsG,GAAA,EAAG,CAAC,WAAY,EAAG,KAAM,WAAY,EAAG,CAC1G,EACA,CACE,GAAI,OACJ,OAAQ,GACR,KAAM,CAAC,CAAE,IAAK,CAAE,SAAAP,CAAS,CAAE,OAEvB,OAAC,MACC,QAAQ,YACR,KAAK,KACL,KAAK,MACL,KAAM,oBAAoBA,EAAS,EAAE,GACrC,aAAY,aAAaA,EAAS,IAAI,GACtC,QAAS,YACX,CAGN,CACF,EACA,CAACJ,EAAkBC,CAAa,CAClC,EACA,SACE,QAACb,EAAA,EAAK,CAAC,UAAW,SAAU,IAAK,EAC/B,oBAACwB,GAAA,EAAgB,CAAC,QAAAV,EAAkB,KAAM3D,EAAO,SAAWM,GAAS,OAAOA,EAAK,EAAE,EAAG,UAAAkD,CAAA,CAAsB,EAC3GH,MACC,OAACR,EAAA,EAAK,CAAC,eAAgB,WACrB,mBAACyB,GAAA,EAAU,CAAC,cAAe3C,EAAY,YAAA4B,EAA0B,WAAYD,CAAA,CAAc,EAC7F,GAEJ,CAEJ,E,eCnJA,MAAMiB,GAAkD,CAAC,EAC5CC,GAAmBC,GAAuC,CACrEF,GAAa,KAAKE,CAAM,CAC1B,EAEM,GAAY,KAAa,MAAM,aAAa,kBAE5C,GAAqB,CACzB,WAAU,KACV,YAAW,KACX,WAAU,KACV,aAAY,KACZ,WAAU,IACZ,EAEM,GAAmB5D,IAAuB,CAC9C,MAAOA,EAAM,cAAc,MAC3B,MAAOA,EAAM,cAAc,MAC3B,WAAYA,EAAM,cAAc,WAChC,WAAYA,EAAM,cAAc,WAChC,KAAMA,EAAM,cAAc,KAC1B,QAASA,EAAM,cAAc,QAC7B,UAAWA,EAAM,cAAc,SACjC,GAyEa6D,MAvEK,WAAQ,GAAiB,EAAkB,EAMxB,CAAC,CACpC,WAAAC,EACA,MAAAvF,EACA,YAAAwF,EACA,MAAA5E,EACA,WAAAqD,EACA,aAAAwB,EACA,QAAAC,EACA,WAAAnD,EACA,KAAA7B,EACA,WAAAU,EACA,WAAAC,EACA,UAAApD,EACF,IAAa,CACX,MAAM0H,KAAS,MAAWC,EAAS,EAEnC,sBAAU,IAAM,CACdL,EAAW,CACb,EAAG,CAACA,CAAU,CAAC,KAGb,QAAC,KAAK,SAAL,CACC,oBAAC,OAAI,UAAWI,EAAO,UAAW,cAAa,GAAU,UACvD,oBAAC,OAAI,UAAWA,EAAO,IACrB,oBAACvD,EAAA,GACC,YAAY,wCACZ,UAAW,GACX,MAAOpC,EACP,SAAUwF,CAAA,CACZ,KACA,OAACnD,EAAA,GACC,QAAS,CACP,CAAE,MAAO,YAAa,MAAO,EAAM,EACnC,CAAE,MAAO,sBAAuB,MAAO,EAAK,CAC9C,EACA,SAAW3D,GAAU+G,EAAa,CAAE,KAAM,mBAAoB,MAAA/G,CAAM,CAAC,EACrE,MAAOgH,EAAQ,KAAMG,GAAMA,EAAE,OAAS,kBAAkB,GAAG,MAC3D,UAAWF,EAAO,OACpB,EACCR,GAAa,IAAI,CAACW,EAAiBpG,QAClC,OAACoG,EAAA,CAA4B,QAAAJ,EAAkB,SAAUD,EAAc,UAAWE,EAAO,QAAnEjG,EAA2E,CAClG,EACA,KAAW,cAAc,sBAAoB,WAAW,MACvD,OAAC,KAAU,CAAC,KAAK,qBAAqB,QAAQ,UAAU,oBAExD,GAEJ,EACF,EACC,CAACzB,IAAa2C,EAAM,SAAW,KAC9B,OAACmF,GAAA,EAAU,CAAC,WAAS,KAAE,4BAA6B,gBAAgB,EAAG,QAAQ,WAAY,MAE3F,OAAC/B,GAAA,CACC,MAAApD,EACA,WAAAqD,EACA,WAAA1B,EACA,aAAcnB,EACd,YAAaV,EACb,UAAWW,CAAA,CACb,GAEJ,CAEJ,CAE8E,EAEvE,SAAS2E,IAAoB,CAClC,OACE,IAAC,MAAK,MAAM,eACV,aAACV,GAAA,EAAyB,EAC5B,CAEJ,CAEA,MAAMM,GAAaK,IACV,CACL,UAAQ,OAAI,CACV,OAAQA,EAAM,QAAQ,EAAG,CAAC,EAC1B,CAACA,EAAM,YAAY,KAAK,IAAI,CAAC,EAAG,CAC9B,OAAQ,CACV,CACF,CAAC,EACD,aAAW,OAAI,CACb,aAAcA,EAAM,QAAQ,CAAC,EAC7B,QAAS,OACT,WAAY,aACZ,IAAKA,EAAM,QAAQ,CAAC,EACpB,CAACA,EAAM,YAAY,KAAK,IAAI,CAAC,EAAG,CAC9B,SAAU,MACZ,CACF,CAAC,EACD,OAAK,OAAI,CACP,QAAS,OACT,WAAY,aACZ,UAAW,OACX,aAAcA,EAAM,QAAQ,EAAG,EAC/B,SAAU,EAEV,CAACA,EAAM,YAAY,KAAK,IAAI,CAAC,EAAG,CAC9B,SAAU,OACV,IAAKA,EAAM,QAAQ,CAAC,EACpB,MAAO,MACT,CACF,CAAC,CACH,GAGF,GAAe,K,4BC1If,MAAMC,GAAkBC,GAAsB,CAG5C,GAAI,CAACA,EAAU,SAAS,GAAG,EACzB,MAAO,CACL,QAASA,EACT,SAAU,EACZ,EAEF,MAAMC,EAAQD,EAAU,MAAM,GAAG,EACjC,MAAO,CACL,QAASC,EAAM,CAAC,EAChB,SAAUA,EAAM,CAAC,CACnB,CACF,EAGMC,GAAe,CAACC,EAAcC,IAC3BD,EAAK,OAASC,EAAYD,EAAK,UAAU,EAAGC,CAAS,EAAI,MAAQD,EAOpEE,GAAgB,CAAC,CAAE,MAAA9H,CAAM,IAA0B,CACvD,MAAM0H,EAAQF,GAAexH,CAAK,EAClC,SACE,OAAC8E,GAAA,EAAO,CAAC,MAAM,WAAW,QAAS9E,EAAO,UAAU,UAAU,YAAa,GACzE,oBAAC,QACE,UAAA2H,GAAaD,EAAM,QAAS,EAAE,EAC9BC,GAAaD,EAAM,SAAU,EAAE,GAClC,EACF,CAEJ,EAYaK,GAAwB,CAAC,CACpC,QAAAC,EACA,WAAAzC,EACA,WAAA1B,EACA,aAAA2B,EACA,YAAAC,EACA,UAAAC,CACF,IAA2B,CACzB,MAAMG,KAAiD,WACrD,IAAM,CACJ,CACE,GAAI,YACJ,OAAQ,GACR,KAAM,CAAC,CAAE,KAAM,CAAE,MAAA7F,CAAM,CAAE,IAAyBA,MAAS,OAAC8F,GAAA,EAAM,CAAC,IAAK9F,EAAO,IAAK,cAAe,CACrG,EACA,CACE,GAAI,QACJ,OAAQ,QACR,KAAM,CAAC,CAAE,KAAM,CAAE,MAAAA,CAAM,CAAE,IAAqB,WAChD,EACA,CACE,GAAI,YACJ,OAAQ,aACR,KAAM,CAAC,CAAE,KAAM,CAAE,MAAAA,CAAM,CAAE,OAAyB,OAAC8H,GAAA,CAAc,MAAA9H,CAAA,CAAc,EAC/E,SAAU,QACZ,EACA,CACE,GAAI,YACJ,OAAQ,cACR,KAAM,CAAC,CAAE,KAAM,CAAE,MAAAA,CAAM,CAAE,IAAyBA,EAClD,SAAU,CAACmG,EAAGC,IAAM,IAAI,KAAKD,EAAE,SAAS,SAAS,EAAE,QAAQ,EAAI,IAAI,KAAKC,EAAE,SAAS,SAAS,EAAE,QAAQ,CACxG,EACA,CACE,GAAI,WACJ,OAAQ,sBACR,KAAM,CAAC,CAAE,KAAM,CAAE,MAAApG,CAAM,CAAE,IAAwBA,MAAS,OAACiI,GAAA,EAAK,CAAC,KAAMjI,EAAO,MAAM,QAAS,EAC/F,CACF,EACA,CAAC,CACH,EACA,SACE,QAAC+E,EAAA,EAAK,CAAC,UAAW,SAAU,IAAK,EAC/B,oBAACwB,GAAA,EAAgB,CAAC,QAAAV,EAAkB,KAAMmC,EAAS,SAAWxF,GAASA,EAAK,SAAU,UAAAkD,CAAA,CAAsB,EAC3GH,MACC,OAACR,EAAA,EAAK,CAAC,eAAgB,WACrB,mBAACyB,GAAA,EAAU,CAAC,cAAe3C,EAAY,YAAA4B,EAA0B,WAAYD,CAAA,CAAc,EAC7F,EAEDwC,EAAQ,SAAW,MAClB,OAACE,GAAA,EAAS,CACR,mBAAC,QAAK,qCAAyB,EACjC,GAEJ,CAEJ,EC9GM,GAAqB,CACzB,2BAA0B,KAC1B,mBAAkB,KAClB,eAAc,KACd,gBAAe,IACjB,EAEM,GAAmBnF,IAAuB,CAC9C,QAASA,EAAM,yBAAyB,QACxC,MAAOA,EAAM,yBAAyB,MACtC,WAAYA,EAAM,yBAAyB,WAC3C,WAAYA,EAAM,yBAAyB,WAC3C,KAAMA,EAAM,yBAAyB,KACrC,QAASA,EAAM,yBAAyB,OAC1C,GAEM,GAAY,KAAa,MAAM,aAAa,kBAwDrCoF,MAtDK,WAAQ,GAAiB,EAAkB,EAMb,CAAC,CAC/C,QAAAH,EACA,2BAAAI,EACA,MAAA9G,EACA,gBAAA+G,EACA,QAAArB,EACA,WAAAzB,EACA,WAAA1B,EACA,KAAA7B,EACA,eAAAsG,EACA,mBAAAC,CACF,IAAa,CACX,MAAMtB,KAAS,MAAW,EAAS,EAEnC,sBAAU,IAAM,CACdmB,EAA2B,CAC7B,EAAG,CAACA,CAA0B,CAAC,KAG7B,QAAC,KAAK,SAAL,CACC,oBAAC,OAAI,UAAWnB,EAAO,UAAW,cAAa,GAAU,UACvD,oBAAC,OAAI,UAAWA,EAAO,IACrB,oBAACvD,EAAA,GACC,YAAY,gCACZ,UAAW,GACX,MAAOpC,EACP,SAAU+G,CAAA,CACZ,KACA,OAAC1E,EAAA,GACC,QAAS,CAAC,CAAE,MAAO,sBAAuB,MAAO,EAAK,CAAC,EAEvD,MAAOqD,EAAQ,KAAMG,IAAMA,GAAE,OAAS,kBAAkB,GAAG,MAC3D,UAAWF,EAAO,OACpB,GACF,EACF,KACA,OAACc,GAAA,CACC,QAAAC,EACA,WAAAzC,EACA,WAAA1B,EACA,aAAcyE,EACd,YAAatG,EACb,UAAWuG,CAAA,CACb,GACF,CAEJ,CAEoG,EAE7F,SAASC,IAA+B,CAC7C,OACE,IAAC,MAAK,MAAM,kBACV,aAACL,GAAA,EAAoC,EACvC,CAEJ,CAEA,MAAM,GAAaZ,IACV,CACL,UAAQ,OAAI,CACV,OAAQA,EAAM,QAAQ,EAAG,CAAC,EAC1B,CAACA,EAAM,YAAY,KAAK,IAAI,CAAC,EAAG,CAC9B,OAAQ,CACV,CACF,CAAC,EACD,aAAW,OAAI,CACb,aAAcA,EAAM,QAAQ,CAAC,EAC7B,QAAS,OACT,WAAY,aACZ,IAAKA,EAAM,QAAQ,CAAC,EACpB,CAACA,EAAM,YAAY,KAAK,IAAI,CAAC,EAAG,CAC9B,SAAU,MACZ,CACF,CAAC,EACD,OAAK,OAAI,CACP,QAAS,OACT,WAAY,aACZ,UAAW,OACX,aAAcA,EAAM,QAAQ,EAAG,EAC/B,SAAU,EAEV,CAACA,EAAM,YAAY,KAAK,IAAI,CAAC,EAAG,CAC9B,SAAU,OACV,IAAKA,EAAM,QAAQ,CAAC,EACpB,MAAO,MACT,CACF,CAAC,CACH,GAGF,GAAe,K,oDCnHf,MAAM,GAAY,KAAa,MAAM,aAAa,8BAA8B,oBACnEkB,GAAsB,CAAC,CAAE,MAAAC,EAAO,UAAAC,CAAU,IAAgD,CACrG,MAAM1B,KAAS,MAAW,EAAS,EAE7B,CAAE,KAAM2B,EAAY,UAAArJ,CAAU,KAAI,OAAgCmJ,CAAK,EAE7E,SACE,OAACG,GAAA,GACC,UAAW5B,EAAO,MAClB,OAAM,GACN,MACE6B,EAAA,EAAO,eAAe,gCAClB,KAAE,wEAAyE,mBAAmB,KAC9F,KAAE,iEAAkE,mBAAmB,EAE7F,UAAAH,EAEC,SAAApJ,KACC,OAAC,OAAI,UAAW0H,EAAO,QACrB,mBAAC8B,GAAA,GACC,QAAM,KAAE,kEAAmE,YAAY,EACzF,EACF,EAEAH,GAAY,IAAKI,MACf,QAAC,OAA4B,UAAW/B,EAAO,SAAU,cAAa,GAAU,SAAS+B,EAAK,YAAY,EACxG,oBAAC,KAAE,UAAW/B,EAAO,eAAiB,SAAA+B,EAAK,eAAe,KAC1D,QAAC,OAAI,UAAW/B,EAAO,cACrB,oBAAC,KACC,IAAI,aACJ,OAAO,SACP,aAAW,MAAG,gBAAiBA,EAAO,GAAG,EACzC,QAAM,MAA2B+B,EAAK,0BAA0B,EAChE,QAASL,EAER,SAAAG,EAAA,EAAO,eAAe,gCACrB,OAAC,KAAK,CAAC,QAAQ,mEAAmE,yBAElF,KAEA,OAAC,KAAK,CAAC,QAAQ,2EAA2E,gCAE1F,EAEJ,KACA,OAAC,QAAK,UAAW7B,EAAO,YAAa,kBAAC,KACtC,OAAC,KACC,aAAW,MAAG,gBAAiBA,EAAO,GAAG,EACzC,QAAM,MAAiC+B,EAAK,aAAcA,EAAK,IAAI,EACnE,QAASL,EAER,SAAAG,EAAA,EAAO,eAAe,gCACrB,OAAC,KAAK,CAAC,QAAQ,qEAAqE,4BAEpF,KAEA,OAAC,KAAK,CAAC,QAAQ,8EAA8E,qCAE7F,EAEJ,GACF,KACA,OAAC,MAAG,UAAW7B,EAAO,QAAS,IArCvB+B,EAAK,YAsCf,CACD,EAEL,CAEJ,EAEaC,GAA4B,CAAC,CAAE,MAAAP,CAAM,IAAyB,CACzE,MAAMQ,KAAyC,KAC7C,8EACA,sBACF,EACA,SACE,OAAC,MAAgB,CACd,UAAC,CAAE,UAAAC,EAAW,UAAAC,CAAU,OACvB,OAACvI,EAAA,IACC,QAAQ,YACR,KAAK,KACL,KAAK,kBACL,MAAOqI,EACP,aAAYA,EACZ,QAAS,IAAMC,EAAUV,GAAqB,CAAE,MAAAC,EAAO,UAAWU,CAAU,CAAC,EAC/E,EAEJ,CAEJ,EAEM,GAAa7B,IAA0B,CAC3C,SAAO;AAAA;AAAA,IAGP,WAAS;AAAA;AAAA;AAAA,IAIT,YAAU;AAAA;AAAA;AAAA,WAGDA,EAAM,QAAQ,EAAG,CAAC;AAAA,IAE3B,WAAS;AAAA,cACGA,EAAM,QAAQ,IAAK,CAAC,CAAC;AAAA,aACtBA,EAAM,OAAO,KAAK,SAAS;AAAA,IAEtC,iBAAe;AAAA;AAAA,WAENA,EAAM,QAAQ,EAAG,CAAC;AAAA;AAAA,MAEvBA,EAAM,YAAY,KAAK,IAAI,CAAC;AAAA;AAAA;AAAA,IAIhC,eAAa;AAAA,aACFA,EAAM,OAAO,KAAK,SAAS;AAAA,MAClCA,EAAM,YAAY,KAAK,IAAI,CAAC;AAAA;AAAA;AAAA,IAIhC,kBAAgB;AAAA,iBACDA,EAAM,WAAW,KAAK,QAAQ;AAAA,mBAC5BA,EAAM,WAAW,cAAc;AAAA;AAAA,IAGhD,OAAK;AAAA,iBACUA,EAAM,WAAW,KAAK,QAAQ;AAAA,GAE/C,GCtIM8B,GAAkB,CAAC,CAAE,KAAA7G,EAAM,UAAA4G,CAAU,IAAoD,CAC7F,KAAM,CAACE,CAAe,KAAI,OAA2B,EAC/CrC,KAAS,MAAW,EAAS,EAE7BsC,EAAsB,IAAM,CAChCD,EAAgB,CAAE,MAAO9G,EAAK,KAAM,CAAC,EACrC4G,EAAU,CACZ,EAEA,SACE,QAACP,GAAA,GACC,UAAW5B,EAAO,MAClB,OAAM,GACN,SAAO,KAAE,2EAA4E,eAAe,EACpG,UAAWmC,EAEX,oBAAC,KAAE,UAAWnC,EAAO,YACnB,oBAAC,KAAK,CAAC,QAAQ,2FAA2F,wDAC5D,CAAE,MAAOzE,EAAK,KAAM,EAAE,KACpE,EACF,KACA,OAAC,KAAE,UAAWyE,EAAO,YAClB,SAAA6B,EAAA,EAAO,eAAe,gCACrB,QAAC,MACC,QAAQ,6GACR,eAAc,GACf,iDACsC,CAAE,MAAOtG,EAAK,KAAM,EAAE,uCAC7D,KAEA,QAAC,MACC,QAAQ,2FACR,eAAc,GACf,iDACsC,CAAE,MAAOA,EAAK,KAAM,EAAE,uCAC7D,EAEJ,KACA,QAACqG,GAAA,EAAM,UAAN,CACC,oBAAChI,EAAA,GAAM,CAAC,KAAK,SAAS,QAAQ,YAAY,QAASuI,EAAW,KAAK,UACjE,mBAAC,KAAK,CAAC,QAAQ,iFAAiF,kBAAM,EACxG,KACA,OAACvI,EAAA,GAAM,CAAC,KAAK,SAAS,QAAQ,cAAc,QAAS0I,EACnD,mBAAC,KAAK,CAAC,QAAQ,wFAAwF,yBAEvG,EACF,GACF,GACF,CAEJ,EAEaC,GAAwB,CAAC,CAAE,KAAAhH,CAAK,IAA6B,CACxE,MAAMiH,KAA2B,KAC/B,+EACA,aACF,EACA,SACE,OAAC,MAAgB,CACd,UAAC,CAAE,UAAAN,EAAW,UAAAC,CAAU,OACvB,OAACvI,EAAA,IACC,KAAK,KACL,QAAQ,cACR,QAAS,IAAMsI,EAAUE,GAAiB,CAAE,KAAA7G,EAAM,UAAA4G,CAAU,CAAC,EAC7D,KAAK,QACL,aAAYK,EACZ,MAAOA,CAAA,CACT,EAEJ,CAEJ,EAEM,GAAalC,IAA0B,CAC3C,SAAO,OAAI,CACT,MAAO,OACT,CAAC,EACD,eAAa,OAAI,CACf,SAAUA,EAAM,WAAW,KAAK,SAChC,OAAQ,CACV,CAAC,CACH,GCjFM,GAAY,KAAa,MAAM,aAAa,iBAErCmC,GAA8B,IAAM,CAC/C,KAAM,CAAE,KAAMxH,EAAO,UAAA3C,CAAU,KAAI,OAAuB,EAE1D,SACE,OAAC,KAAK,SAAL,CAAc,UAAAA,EACb,oBAAC,SAAM,UAAU,2BAA2B,cAAa,GAAU,UACjE,oBAAC,SACC,oBAAC,MACC,oBAAC,MACC,mBAAC,KAAK,CAAC,QAAQ,8DAA8D,iBAAK,EACpF,KACA,QAAC,MACC,oBAAC,QACC,mBAAC,KAAK,CAAC,QAAQ,kEAAkE,qBAAS,EAC5F,KACA,OAACuF,GAAA,GACC,UAAU,MACV,WAAS,KACP,oEACA,2DACF,EAEA,mBAACO,GAAA,EAAI,CAAC,KAAK,aAAc,GAC3B,GACF,KACA,OAAC,MACC,mBAAC,KAAK,CAAC,QAAQ,oEAAoE,uBAAW,EAChG,KACA,OAAC,MACC,mBAAC,KAAK,CAAC,QAAQ,+DAA+D,kBAAM,EACtF,KACA,OAAC,MACC,mBAAC,KAAK,CAAC,QAAQ,6DAA6D,gBAAI,EAClF,KACA,OAAC,OAAG,GACN,EACF,KACA,OAAC,SACE,SAAAnD,GAAO,IAAKM,MACX,QAAC,MACC,oBAAC,MAAG,UAAU,eACZ,mBAAC,QAAK,UAAU,WAAW,MAAOA,EAAK,MACpC,SAAAA,EAAK,MACR,EACF,KACA,OAAC,MAAG,UAAU,eAAgB,SAAAA,EAAK,eAAe,KAClD,OAAC,MAAG,UAAU,eAAgB,SAAAA,EAAK,cAAc,KACjD,OAAC,MAAG,UAAU,eACZ,oBAACuC,EAAA,EAAK,CAAC,IAAK,EACV,qBAAC,QAAM,UAAAvC,EAAK,gBAAgB,iBAAa,KACzC,OAACyG,GAAyB,CAAC,MAAOzG,EAAK,MAAO,GAChD,EACF,KACA,OAAC,MAAG,UAAU,eACZ,mBAAC8D,GAAA,EAAG,CAAC,KAAK,SAAS,WAAY,GAAI,EACrC,KACA,OAAC,MAAG,UAAU,aACZ,mBAACkD,GAAqB,CAAC,KAAAhH,CAAA,CAAY,EACrC,IAnBOA,EAAK,KAoBd,CACD,EACH,GACF,EACF,CAEJ,ECzDA,IAAKmH,IAAAA,IACHA,EAAA,MAAQ,QACRA,EAAA,IAAM,MACNA,EAAA,kBAAoB,oBACpBA,EAAA,KAAO,OAJJA,IAAAA,IAAA,IAOL,MAAM,GAAY,KAAa,MAAM,aAE/BC,GAAsB,CAAC,CAAE,KAAAC,EAAM,QAAAC,CAAQ,OAC3C,OAACC,EAAA,GACC,MACEjB,EAAA,EAAO,eAAe,gCAClB,KAAE,0DAA2D,wBAAwB,KACrF,KAAE,0DAA2D,wBAAwB,EAE3F,OAAQe,IAAS,oBACjB,YAAa,IAAMC,EAAQ,mBAAyB,EACpD,cAAa,GAAU,KAAK,sBAC9B,EAGIE,GAAoD,CACvD,SAAgB,OAACpD,GAAwB,EAAC,EAC1C,OAAc,OAAChD,GAAoB,EAAC,EACpC,uBAA4B,OAAC8F,GAA2B,EAAC,EACzD,QAAe,OAACvB,GAAmC,EAAC,CACvD,EAEe,SAAS8B,IAAe,CACrC,MAAMhD,KAAS,MAAW,EAAS,EAE7BiD,EAAwB,KAAW,cAAc,sBAAoB,SAAS,EAC9EC,EAAsB,KAAW,cAAc,sBAAoB,YAAY,EAE/E,CAACN,EAAMC,CAAO,KAAI,YAAS,IAC3BI,EACK,QACEC,EACF,MAEF,IACR,EAEKC,EAAsBD,GAAuBD,EAEnD,SACE,QAAC,KAAI,CAAC,MAAO,eACV,UAAAE,KACC,QAACC,EAAA,EAAO,CAAC,UAAWpD,EAAO,WACzB,oBAAC8C,EAAA,GACC,MAAM,YACN,OAAQF,IAAS,QACjB,YAAa,IAAMC,EAAQ,OAAa,EACxC,cAAa,GAAU,KAAK,SAC9B,KACA,OAACC,EAAA,GACC,MAAM,qBACN,OAAQF,IAAS,MACjB,YAAa,IAAMC,EAAQ,KAAW,EACtC,cAAa,GAAU,KAAK,SAC9B,EACChB,EAAA,EAAO,qBACN,OAACiB,EAAA,GACC,MAAM,oBACN,OAAQF,IAAS,OACjB,YAAa,IAAMC,EAAQ,MAAY,EACvC,cAAa,GAAU,KAAK,gBAC9B,KAED,MAAsB,MAAK,OAACF,GAAA,CAAoB,KAAAC,EAAY,QAAAC,CAAA,CAAkB,GACjF,KAEA,MAAsB,MACpB,QAACO,EAAA,EAAO,CAAC,UAAWpD,EAAO,WACzB,oBAAC8C,EAAA,GACC,MAAM,QACN,OAAQF,IAAS,MACjB,YAAa,IAAMC,EAAQ,KAAW,EACtC,cAAa,GAAU,KAAK,MAC9B,KACA,OAACF,GAAA,CAAoB,KAAAC,EAAY,QAAAC,CAAA,CAAkB,GACrD,EAGHD,EAAOG,GAAaH,CAAI,KAAI,OAACjG,GAAoB,EAAC,GACrD,CAEJ,CAEA,MAAM,GAAa2D,IAA0B,CAC3C,cAAY,OAAI,CACd,aAAcA,EAAM,QAAQ,CAAC,CAC/B,CAAC,CACH,E,mQCpFA,MAAM+C,EAAsB;AAAA,uDAGtBC,EAAwB/H,GAAkB,CAC9C,MAAMgI,EAAehI,GAAM,mBAC3B,MAAO,CAAC,KAAW,wBAAwB,sBAAoB,cAAeA,CAAI,GAAKgI,CACzF,EAEMC,EAAY,KAAa,MAAM,aAAa,cAerCjG,EAAgB,CAAC,CAC5B,MAAAtC,EACA,MAAAtD,EACA,aAAAuF,EACA,kBAAAG,EACA,aAAAD,EACA,UAAAqB,GACA,WAAAhD,GACA,KAAAV,GACA,WAAA6B,GACA,aAAAE,EACF,IAAa,CACX,KAAM,CAAC2G,EAAcC,CAAe,KAAI,YAAyB,IAAI,EAC/D,CAAC7L,EAAa8L,EAAc,KAAI,YAAiB,CAAC,CAAC,KAEzD,aAAU,IAAM,CACd,eAAeC,GAAe,CAC5B,GAAI,CACF,GAAI,KAAW,cAAc,sBAAoB,eAAe,EAAG,CACjE,IAAIhL,EAAU,QAAM,MAAiBjB,CAAK,EAC1CgM,GAAe/K,CAAO,CACxB,CACF,MAAY,CACV,QAAQ,MAAM,uBAAuB,CACvC,CACF,CACI,KAAW,6BAA6B,GAC1CgL,EAAa,CAEjB,EAAG,CAACjM,CAAK,CAAC,EAEV,MAAMiH,KAAkC,WACtC,IAAM,CACJ,CACE,GAAI,YACJ,OAAQ,GACR,KAAM,CAAC,CAAE,KAAM,CAAE,MAAA7F,CAAM,CAAE,IAAyBA,MAAS,OAAC,IAAM,CAAC,IAAKA,EAAO,IAAI,aAAc,EACnG,EACA,CACE,GAAI,QACJ,OAAQ,QACR,KAAM,CAAC,CAAE,KAAM,CAAE,MAAAA,CAAM,CAAE,OAAqB,OAAC,OAAK,SAAAA,CAAA,CAAM,EAC1D,SAAU,QACZ,EACA,CACE,GAAI,QACJ,OAAQ,QACR,KAAM,CAAC,CAAE,KAAM,CAAE,MAAAA,CAAM,CAAE,IAAqBA,EAC9C,SAAU,QACZ,EACA,CACE,GAAI,OACJ,OAAQ,OACR,KAAM,CAAC,CAAE,KAAM,CAAE,MAAAA,CAAM,CAAE,IAAoBA,EAC7C,SAAU,QACZ,EACA,CACE,GAAI,gBACJ,OAAQ,cACR,KAAM,CAAC,CAAE,KAAM,CAAE,MAAAA,CAAM,CAAE,OAChB,mBAAG,SAAAA,MAAS,mBAAG,SAAAA,IAAU,cAAa,OAAC,IAAI,CAAC,MAAO,WAAY,iBAAK,EAAUA,CAAA,CAAM,EAAI,EAEjG,SAAU,CAACmG,EAAGC,IAAM,IAAI,KAAKD,EAAE,SAAS,UAAU,EAAE,QAAQ,EAAI,IAAI,KAAKC,EAAE,SAAS,UAAU,EAAE,QAAQ,CAC1G,EACA,CACE,GAAI,OACJ,OAAQ,OACR,KAAM,CAAC,CAAE,KAAM,CAAE,MAAApG,CAAM,EAAG,IAAK,CAAE,SAAA+F,CAAS,CAAE,IAAoB,CAC9D,MAAM/G,EAAoBuL,EAAqBxE,CAAQ,EACjD+E,GAAoB,MAAOC,EAAkBpM,GAAgBC,KAA8B,CAC/F,QAAM,MAAgBmM,EAAUpM,GAAQC,EAAK,EACzC0F,GACFA,EAAkB,CAEtB,EAEA,OAAO,KAAW,6BAA6B,KAC7C,OAAC,KACC,OAAQyB,EAAS,OACjB,MAAOA,EAAS,MAChB,MAAO,GACP,aAAc+E,GACd,UAAW/G,GACX,MAAAnF,EACA,YAAAE,EACA,UAAWkB,EACX,kBAAoBgL,GAAY7G,EAAa6G,EAASjF,CAAQ,EAC9D,kBAAA/G,EACA,yBAA0BsL,EAC1B,MAAO,GACT,KAEA,OAAC,KACC,aAAW,OACX,MAAAtK,EACA,SAAUhB,EACV,SAAWgM,GAAY7G,EAAa6G,EAASjF,CAAQ,EACvD,CAEJ,CACF,EACA,CACE,GAAI,OACJ,OAAQ,GACR,KAAM,CAAC,CAAE,IAAK,CAAE,SAAAA,CAAS,CAAE,IACCwE,EAAqBxE,CAAQ,MAGnD,OAAC,IAAG,CAAC,QAAS,OAAQ,WAAY,SAAU,WAAY,EACtD,mBAAC,KACC,YAAa,GACb,WACE,QAAC,OAAI,qHAGH,OAAC,KACC,KACE,mIAEF,IAAI,aACJ,OAAO,SACR,uCAED,EAAI,oBAEN,EAGF,mBAAC,IAAI,CAAC,KAAK,iBAAkB,GAC/B,EACF,CAIR,EACA,CACE,GAAI,aACJ,OAAQ,SACR,KAAM,CAAC,CAAE,KAAM,CAAE,MAAA/F,CAAM,CAAE,OACvB,mBAAG,eAAM,QAAQA,CAAK,GAAKA,EAAM,OAAS,MAAK,OAAC,IAAQ,CAAC,MAAOA,EAAM,CAAC,EAAG,WAAY,GAAO,MAAO,EAAG,EAAG,CAE9G,EACA,CACE,GAAI,aACJ,OAAQ,GACR,KAAM,CAAC,CAAE,KAAM,CAAE,MAAAA,CAAM,CAAE,OAA0B,mBAAG,SAAAA,MAAS,OAAC,IAAG,CAAC,WAAY,EAAG,KAAM,WAAY,EAAG,CAC1G,EACA,CACE,GAAI,SACJ,OAAQ,GACR,KAAM,CAAC,CAAE,IAAK,CAAE,SAAA+F,CAAS,CAAE,IAEvB,KAAW,wBAAwB,sBAAoB,eAAgBA,CAAQ,MAC7E,OAAC,MACC,KAAK,KACL,QAAQ,cACR,QAAS,IAAM,CACb4E,EAAgB5E,CAAQ,CAC1B,EACA,KAAK,QACL,aAAY,eAAeA,EAAS,IAAI,GAC1C,CAIR,CACF,EACA,CAAChC,GAAcnF,EAAOE,EAAawF,EAAmBH,CAAY,CACpE,EAEA,SACE,QAAC,IAAK,CAAC,UAAW,SAAU,IAAK,EAAG,cAAasG,EAAU,UACzD,oBAAC,IAAgB,CAAC,QAAA5E,EAAkB,KAAM3D,EAAO,SAAWM,GAAS,OAAOA,EAAK,MAAM,EAAG,UAAAkD,EAAA,CAAsB,KAChH,OAAC,IAAK,CAAC,eAAe,WACpB,mBAAC,IAAU,CAAC,WAAYhD,GAAY,YAAaV,GAAM,cAAe6B,GAAY,mBAAoB,GAAM,EAC9G,EACC,EAAQ6G,MACP,OAAC,KACC,KAAM,wCAAwCA,GAAc,KAAK,IACjE,YAAY,SACZ,MAAM,SACN,UAAW,IAAM,CACfC,EAAgB,IAAI,CACtB,EACA,OAAQ,GACR,UAAW,IAAM,CACVD,IAGLrG,EAAaqG,CAAY,EACzBC,EAAgB,IAAI,EACtB,EACF,GAEJ,CAEJ,C,yECnPO,MAAMzC,EAAY,CAAC,CAAE,SAAAhD,CAAS,IAAmC,CACtE,MAAM+B,KAAS,MAAWC,CAAS,EAEnC,SAAO,OAAC,OAAI,UAAWD,EAAO,UAAY,SAAA/B,CAAA,CAAS,CACrD,EAEMgC,EAAaK,IACV,CACL,aAAW,OAAI,CACb,gBAAiBA,EAAM,OAAO,WAAW,UACzC,MAAOA,EAAM,OAAO,KAAK,UACzB,QAASA,EAAM,QAAQ,CAAC,EACxB,UAAW,QACb,CAAC,CACH,E","sources":["webpack://grafana/./public/app/core/components/RolePicker/UserRolePicker.tsx","webpack://grafana/./public/app/features/admin/OrgRolePicker.tsx","webpack://grafana/./public/app/features/invites/InviteeRow.tsx","webpack://grafana/./public/app/features/invites/InviteesTable.tsx","webpack://grafana/./public/app/features/invites/state/selectors.ts","webpack://grafana/./public/app/features/users/state/actions.ts","webpack://grafana/./public/app/features/users/state/selectors.ts","webpack://grafana/./public/app/features/users/UsersActionBar.tsx","webpack://grafana/./public/app/features/users/UsersListPage.tsx","webpack://grafana/./public/app/features/admin/Users/OrgUnits.tsx","webpack://grafana/./public/app/features/admin/Users/UsersTable.tsx","webpack://grafana/./public/app/features/admin/UserListAdminPage.tsx","webpack://grafana/./public/app/features/admin/Users/AnonUsersTable.tsx","webpack://grafana/./public/app/features/admin/UserListAnonymousPage.tsx","webpack://grafana/./public/app/features/admin/UserListPublicDashboardPage/DashboardsListModalButton.tsx","webpack://grafana/./public/app/features/admin/UserListPublicDashboardPage/DeleteUserModalButton.tsx","webpack://grafana/./public/app/features/admin/UserListPublicDashboardPage/UserListPublicDashboardPage.tsx","webpack://grafana/./public/app/features/admin/UserListPage.tsx","webpack://grafana/./public/app/features/admin/Users/OrgUsersTable.tsx","webpack://grafana/./public/app/features/alerting/unified/components/EmptyArea.tsx"],"sourcesContent":["import { useEffect } from 'react';\nimport { useAsyncFn } from 'react-use';\n\nimport { contextSrv } from 'app/core/core';\nimport { Role, OrgRole, AccessControlAction } from 'app/types';\n\nimport { RolePicker } from './RolePicker';\nimport { fetchUserRoles, updateUserRoles } from './api';\n\nexport interface Props {\n  basicRole: OrgRole;\n  roles?: Role[];\n  userId: number;\n  orgId?: number;\n  onBasicRoleChange: (newRole: OrgRole) => void;\n  roleOptions: Role[];\n  disabled?: boolean;\n  basicRoleDisabled?: boolean;\n  basicRoleDisabledMessage?: string;\n  /**\n   * Set whether the component should send a request with the new roles to the\n   * backend in UserRolePicker.onRolesChange (apply=false), or call {@link onApplyRoles}\n   * with the updated list of roles (apply=true).\n   *\n   * Besides it sets the RolePickerMenu's Button title to\n   *   * `Update` in case apply equals false\n   *   * `Apply` in case apply equals true\n   *\n   * @default false\n   */\n  apply?: boolean;\n  onApplyRoles?: (newRoles: Role[], userId: number, orgId: number | undefined) => void;\n  pendingRoles?: Role[];\n  maxWidth?: string | number;\n  width?: string | number;\n  isLoading?: boolean;\n}\n\nexport const UserRolePicker = ({\n  basicRole,\n  roles,\n  userId,\n  orgId,\n  onBasicRoleChange,\n  roleOptions,\n  disabled,\n  basicRoleDisabled,\n  basicRoleDisabledMessage,\n  apply = false,\n  onApplyRoles,\n  pendingRoles,\n  maxWidth,\n  width,\n  isLoading,\n}: Props) => {\n  const [{ loading, value: appliedRoles = roles || [] }, getUserRoles] = useAsyncFn(async () => {\n    try {\n      if (roles) {\n        return roles;\n      }\n      if (apply && Boolean(pendingRoles?.length)) {\n        return pendingRoles;\n      }\n\n      if (contextSrv.hasPermission(AccessControlAction.ActionUserRolesList) && userId > 0) {\n        return await fetchUserRoles(userId, orgId);\n      }\n    } catch (e) {\n      // TODO handle error\n      console.error('Error loading options');\n    }\n    return [];\n  }, [orgId, userId, pendingRoles, roles]);\n\n  useEffect(() => {\n    // only load roles when there is an Org selected\n    if (orgId) {\n      getUserRoles();\n    }\n  }, [getUserRoles, orgId]);\n\n  const onRolesChange = async (roles: Role[]) => {\n    if (!apply) {\n      await updateUserRoles(roles, userId, orgId);\n      await getUserRoles();\n    } else if (onApplyRoles) {\n      onApplyRoles(roles, userId, orgId);\n    }\n  };\n\n  const canUpdateRoles =\n    contextSrv.hasPermission(AccessControlAction.ActionUserRolesAdd) &&\n    contextSrv.hasPermission(AccessControlAction.ActionUserRolesRemove);\n\n  return (\n    <RolePicker\n      appliedRoles={appliedRoles}\n      basicRole={basicRole}\n      onRolesChange={onRolesChange}\n      onBasicRoleChange={onBasicRoleChange}\n      roleOptions={roleOptions}\n      isLoading={loading || isLoading}\n      disabled={disabled}\n      basicRoleDisabled={basicRoleDisabled}\n      basicRoleDisabledMessage={basicRoleDisabledMessage}\n      showBasicRole\n      apply={apply}\n      canUpdateRoles={canUpdateRoles}\n      maxWidth={maxWidth}\n      width={width}\n    />\n  );\n};\n","import { OrgRole } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\ninterface Props {\n  value: OrgRole;\n  disabled?: boolean;\n  'aria-label'?: string;\n  inputId?: string;\n  onChange: (role: OrgRole) => void;\n  autoFocus?: boolean;\n  width?: number | 'auto';\n}\n\nconst basicRoles = Object.values(OrgRole).filter((r) => r !== OrgRole.None);\nconst options = basicRoles.map((r) => ({ label: r, value: r }));\n\nexport function OrgRolePicker({ value, onChange, 'aria-label': ariaLabel, inputId, autoFocus, ...restProps }: Props) {\n  return (\n    <Select\n      inputId={inputId}\n      value={value}\n      options={options}\n      onChange={(val) => onChange(val.value ?? OrgRole.None)}\n      placeholder=\"Choose role...\"\n      aria-label={ariaLabel}\n      autoFocus={autoFocus}\n      {...restProps}\n    />\n  );\n}\n","import { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { Button, ClipboardButton } from '@grafana/ui';\nimport { Invitee } from 'app/types';\n\nimport { revokeInvite } from './state/actions';\n\nconst mapDispatchToProps = {\n  revokeInvite,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\ninterface OwnProps {\n  invitee: Invitee;\n}\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nclass InviteeRow extends PureComponent<Props> {\n  render() {\n    const { invitee, revokeInvite } = this.props;\n    return (\n      <tr>\n        <td>{invitee.email}</td>\n        <td>{invitee.name}</td>\n        <td className=\"text-right\">\n          <ClipboardButton icon=\"copy\" variant=\"secondary\" size=\"sm\" getText={() => invitee.url}>\n            Copy Invite\n          </ClipboardButton>\n          &nbsp;\n        </td>\n        <td>\n          <Button\n            variant=\"destructive\"\n            size=\"sm\"\n            icon=\"times\"\n            onClick={() => revokeInvite(invitee.code)}\n            aria-label=\"Revoke Invite\"\n          />\n        </td>\n      </tr>\n    );\n  }\n}\n\nexport default connector(InviteeRow);\n","import { PureComponent } from 'react';\n\nimport { Invitee } from 'app/types';\n\nimport InviteeRow from './InviteeRow';\n\nexport interface Props {\n  invitees: Invitee[];\n}\n\nexport default class InviteesTable extends PureComponent<Props> {\n  render() {\n    const { invitees } = this.props;\n\n    return (\n      <table className=\"filter-table form-inline\">\n        <thead>\n          <tr>\n            <th>Email</th>\n            <th>Name</th>\n            <th />\n            <th style={{ width: '34px' }} />\n          </tr>\n        </thead>\n        <tbody data-testid=\"InviteesTable-body\">\n          {invitees.map((invitee, index) => {\n            return <InviteeRow key={`${invitee.id}-${index}`} invitee={invitee} />;\n          })}\n        </tbody>\n      </table>\n    );\n  }\n}\n","import { EntityState, createSelector } from '@reduxjs/toolkit';\n\nimport { Invitee } from 'app/types';\n\nimport { selectors } from './reducers';\n\nexport const { selectAll, selectById, selectTotal } = selectors;\n\nconst selectQuery = (_state: EntityState<Invitee, string>, query: string) => query;\nexport const selectInvitesMatchingQuery = createSelector([selectAll, selectQuery], (invites, searchQuery) => {\n  const regex = new RegExp(searchQuery, 'i');\n  const matches = invites.filter((invite) => regex.test(invite.name) || regex.test(invite.email));\n  return matches;\n});\n","import { debounce } from 'lodash';\n\nimport { getBackendSrv } from '@grafana/runtime';\nimport { FetchDataArgs } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\nimport { accessControlQueryParam } from 'app/core/utils/accessControl';\nimport { OrgUser } from 'app/types';\n\nimport { AccessControlAction, ThunkResult } from '../../../types';\n\nimport {\n  usersLoaded,\n  pageChanged,\n  usersFetchBegin,\n  usersFetchEnd,\n  searchQueryChanged,\n  sortChanged,\n  rolesFetchBegin,\n  rolesFetchEnd,\n} from './reducers';\n\nexport function loadUsers(): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    try {\n      dispatch(usersFetchBegin());\n      const { perPage, page, searchQuery, sort } = getState().users;\n      const users = await getBackendSrv().get(\n        `/api/org/users/search`,\n        accessControlQueryParam({ perpage: perPage, page, query: searchQuery, sort })\n      );\n\n      if (\n        contextSrv.licensedAccessControlEnabled() &&\n        contextSrv.hasPermission(AccessControlAction.ActionUserRolesList)\n      ) {\n        dispatch(rolesFetchBegin());\n        const orgId = contextSrv.user.orgId;\n        const userIds = users?.orgUsers.map((u: OrgUser) => u.userId);\n        const roles = await getBackendSrv().post(`/api/access-control/users/roles/search`, { userIds, orgId });\n        users.orgUsers.forEach((u: OrgUser) => {\n          u.roles = roles ? roles[u.userId] || [] : [];\n        });\n        dispatch(rolesFetchEnd());\n      }\n      dispatch(usersLoaded(users));\n    } catch (error) {\n      usersFetchEnd();\n    }\n  };\n}\n\nconst fetchUsersWithDebounce = debounce((dispatch) => dispatch(loadUsers()), 300);\n\nexport function updateUser(user: OrgUser): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().patch(`/api/org/users/${user.userId}`, { role: user.role });\n    dispatch(loadUsers());\n  };\n}\n\nexport function removeUser(userId: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().delete(`/api/org/users/${userId}`);\n    dispatch(loadUsers());\n  };\n}\n\nexport function changePage(page: number): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(pageChanged(page));\n    dispatch(loadUsers());\n  };\n}\n\nexport function changeSort({ sortBy }: FetchDataArgs<OrgUser>): ThunkResult<void> {\n  const sort = sortBy.length ? `${sortBy[0].id}-${sortBy[0].desc ? 'desc' : 'asc'}` : undefined;\n  return async (dispatch) => {\n    dispatch(sortChanged(sort));\n    dispatch(loadUsers());\n  };\n}\n\nexport function changeSearchQuery(query: string): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(searchQueryChanged(query));\n    fetchUsersWithDebounce(dispatch);\n  };\n}\n","import { UsersState } from 'app/types';\n\nexport const getUsers = (state: UsersState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  return state.users.filter((user) => {\n    return regex.test(user.login) || regex.test(user.email) || regex.test(user.name);\n  });\n};\n\nexport const getUsersSearchQuery = (state: UsersState) => state.searchQuery;\n","import { connect, ConnectedProps } from 'react-redux';\n\nimport { RadioButtonGroup, LinkButton, FilterInput, InlineField } from '@grafana/ui';\nimport config from 'app/core/config';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction, StoreState } from 'app/types';\n\nimport { selectTotal } from '../invites/state/selectors';\n\nimport { changeSearchQuery } from './state/actions';\nimport { getUsersSearchQuery } from './state/selectors';\n\nexport interface OwnProps {\n  showInvites: boolean;\n  onShowInvites: () => void;\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    searchQuery: getUsersSearchQuery(state.users),\n    pendingInvitesCount: selectTotal(state.invites),\n    externalUserMngLinkName: state.users.externalUserMngLinkName,\n    externalUserMngLinkUrl: state.users.externalUserMngLinkUrl,\n  };\n}\n\nconst mapDispatchToProps = {\n  changeSearchQuery,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = ConnectedProps<typeof connector> & OwnProps;\n\nexport const UsersActionBarUnconnected = ({\n  externalUserMngLinkName,\n  externalUserMngLinkUrl,\n  searchQuery,\n  pendingInvitesCount,\n  changeSearchQuery,\n  onShowInvites,\n  showInvites,\n}: Props): JSX.Element => {\n  const options = [\n    { label: 'Users', value: 'users' },\n    { label: `Pending Invites (${pendingInvitesCount})`, value: 'invites' },\n  ];\n  const canAddToOrg: boolean = contextSrv.hasPermission(AccessControlAction.OrgUsersAdd);\n  // Show invite button in the following cases:\n  // 1) the instance is not a hosted Grafana instance (!config.externalUserMngInfo)\n  // 2) new basic auth users can be created for this instance (!config.disableLoginForm).\n  const showInviteButton: boolean = canAddToOrg && !(config.disableLoginForm && config.externalUserMngInfo);\n\n  return (\n    <div className=\"page-action-bar\" data-testid=\"users-action-bar\">\n      <InlineField grow>\n        <FilterInput\n          value={searchQuery}\n          onChange={changeSearchQuery}\n          placeholder=\"Search user by login, email or name\"\n        />\n      </InlineField>\n      {pendingInvitesCount > 0 && (\n        <div style={{ marginLeft: '1rem' }}>\n          <RadioButtonGroup value={showInvites ? 'invites' : 'users'} options={options} onChange={onShowInvites} />\n        </div>\n      )}\n      {showInviteButton && <LinkButton href=\"org/users/invite\">Invite</LinkButton>}\n      {externalUserMngLinkUrl && (\n        <LinkButton href={externalUserMngLinkUrl} target=\"_blank\" rel=\"noopener\">\n          {externalUserMngLinkName}\n        </LinkButton>\n      )}\n    </div>\n  );\n};\n\nexport const UsersActionBar = connector(UsersActionBarUnconnected);\n","import { useEffect, useState } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { renderMarkdown } from '@grafana/data';\nimport { Alert } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { contextSrv } from 'app/core/core';\nimport { OrgUser, OrgRole, StoreState } from 'app/types';\n\nimport { OrgUsersTable } from '../admin/Users/OrgUsersTable';\nimport InviteesTable from '../invites/InviteesTable';\nimport { fetchInvitees } from '../invites/state/actions';\nimport { selectInvitesMatchingQuery } from '../invites/state/selectors';\n\nimport { UsersActionBar } from './UsersActionBar';\nimport { loadUsers, removeUser, updateUser, changePage, changeSort } from './state/actions';\nimport { getUsers, getUsersSearchQuery } from './state/selectors';\n\nfunction mapStateToProps(state: StoreState) {\n  const searchQuery = getUsersSearchQuery(state.users);\n  return {\n    users: getUsers(state.users),\n    searchQuery: getUsersSearchQuery(state.users),\n    page: state.users.page,\n    totalPages: state.users.totalPages,\n    perPage: state.users.perPage,\n    invitees: selectInvitesMatchingQuery(state.invites, searchQuery),\n    externalUserMngInfo: state.users.externalUserMngInfo,\n    isLoading: state.users.isLoading,\n    rolesLoading: state.users.rolesLoading,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadUsers,\n  fetchInvitees,\n  changePage,\n  changeSort,\n  updateUser,\n  removeUser,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = ConnectedProps<typeof connector>;\n\nexport interface State {\n  showInvites: boolean;\n}\n\nexport const UsersListPageUnconnected = ({\n  users,\n  page,\n  totalPages,\n  invitees,\n  externalUserMngInfo,\n  isLoading,\n  rolesLoading,\n  loadUsers,\n  fetchInvitees,\n  changePage,\n  updateUser,\n  removeUser,\n  changeSort,\n}: Props) => {\n  const [showInvites, setShowInvites] = useState(false);\n  const externalUserMngInfoHtml = externalUserMngInfo ? renderMarkdown(externalUserMngInfo) : '';\n\n  useEffect(() => {\n    loadUsers();\n    fetchInvitees();\n  }, [fetchInvitees, loadUsers]);\n\n  const onRoleChange = (role: OrgRole, user: OrgUser) => {\n    updateUser({ ...user, role: role });\n  };\n\n  const onRemoveUser = (user: OrgUser) => removeUser(user.userId);\n\n  const onShowInvites = () => {\n    setShowInvites(!showInvites);\n  };\n\n  const onUserRolesChange = () => {\n    loadUsers();\n  };\n\n  const renderTable = () => {\n    if (showInvites) {\n      return <InviteesTable invitees={invitees} />;\n    } else {\n      return (\n        <OrgUsersTable\n          users={users}\n          orgId={contextSrv.user.orgId}\n          rolesLoading={rolesLoading}\n          onRoleChange={onRoleChange}\n          onRemoveUser={onRemoveUser}\n          onUserRolesChange={onUserRolesChange}\n          fetchData={changeSort}\n          changePage={changePage}\n          page={page}\n          totalPages={totalPages}\n        />\n      );\n    }\n  };\n\n  return (\n    <Page.Contents isLoading={!isLoading}>\n      <UsersActionBar onShowInvites={onShowInvites} showInvites={showInvites} />\n      {externalUserMngInfoHtml && (\n        <Alert severity=\"info\" title=\"\">\n          <div dangerouslySetInnerHTML={{ __html: externalUserMngInfoHtml }} />\n        </Alert>\n      )}\n      {isLoading && renderTable()}\n    </Page.Contents>\n  );\n};\n\nexport const UsersListPageContent = connector(UsersListPageUnconnected);\n\nexport default function UsersListPage() {\n  return (\n    <Page navId=\"users\">\n      <UsersListPageContent />\n    </Page>\n  );\n}\n","import { forwardRef, PropsWithChildren } from 'react';\n\nimport { IconName } from '@grafana/data';\nimport { Icon, Tooltip, Box, Stack } from '@grafana/ui';\nimport { Unit } from 'app/types';\n\ntype OrgUnitProps = { units?: Unit[]; icon: IconName };\n\nexport const OrgUnits = ({ units, icon }: OrgUnitProps) => {\n  if (!units?.length) {\n    return null;\n  }\n\n  return units.length > 1 ? (\n    <Tooltip\n      placement={'top'}\n      content={<Stack direction={'column'}>{units?.map((unit) => <span key={unit.name}>{unit.name}</span>)}</Stack>}\n    >\n      <Content icon={icon}>{units.length}</Content>\n    </Tooltip>\n  ) : (\n    <Content icon={icon}>{units[0].name}</Content>\n  );\n};\n\ninterface ContentProps extends PropsWithChildren {\n  icon: IconName;\n}\n\nexport const Content = forwardRef<HTMLElement, ContentProps>(({ children, icon }, ref) => {\n  return (\n    <Box ref={ref} display={'flex'} alignItems={'center'} marginRight={1}>\n      <Icon name={icon} /> <Box marginLeft={1}>{children}</Box>\n    </Box>\n  );\n});\n\nContent.displayName = 'TooltipContent';\n","import { useMemo } from 'react';\n\nimport {\n  Avatar,\n  CellProps,\n  Column,\n  FetchDataFunc,\n  Icon,\n  InteractiveTable,\n  LinkButton,\n  Pagination,\n  Stack,\n  Tag,\n  Text,\n  TextLink,\n  Tooltip,\n} from '@grafana/ui';\nimport { TagBadge } from 'app/core/components/TagFilter/TagBadge';\nimport { UserDTO } from 'app/types';\n\nimport { OrgUnits } from './OrgUnits';\n\ntype Cell<T extends keyof UserDTO = keyof UserDTO> = CellProps<UserDTO, UserDTO[T]>;\n\ninterface UsersTableProps {\n  users: UserDTO[];\n  showPaging?: boolean;\n  totalPages: number;\n  onChangePage: (page: number) => void;\n  currentPage: number;\n  fetchData?: FetchDataFunc<UserDTO>;\n}\n\nexport const UsersTable = ({\n  users,\n  showPaging,\n  totalPages,\n  onChangePage,\n  currentPage,\n  fetchData,\n}: UsersTableProps) => {\n  const showLicensedRole = useMemo(() => users.some((user) => user.licensedRole), [users]);\n  const showBelongsTo = useMemo(() => users.some((user) => user.orgs), [users]);\n\n  const columns: Array<Column<UserDTO>> = useMemo(\n    () => [\n      {\n        id: 'avatarUrl',\n        header: '',\n        cell: ({ cell: { value } }: Cell<'avatarUrl'>) => value && <Avatar src={value} alt={'User avatar'} />,\n      },\n      {\n        id: 'login',\n        header: 'Login',\n        cell: ({ row: { original } }: Cell<'login'>) => {\n          return (\n            <TextLink color=\"primary\" inline={false} href={`/admin/users/edit/${original.id}`} title=\"Edit user\">\n              {original.login}\n            </TextLink>\n          );\n        },\n        sortType: 'string',\n      },\n      {\n        id: 'email',\n        header: 'Email',\n        cell: ({ cell: { value } }: Cell<'email'>) => value,\n        sortType: 'string',\n      },\n      {\n        id: 'name',\n        header: 'Name',\n        cell: ({ cell: { value } }: Cell<'name'>) => value,\n        sortType: 'string',\n      },\n      ...(showBelongsTo\n        ? [\n            {\n              id: 'orgs',\n              header: 'Belongs to',\n              cell: ({ cell: { value, row } }: Cell<'orgs'>) => {\n                return (\n                  <Stack alignItems={'center'}>\n                    <OrgUnits units={value} icon={'building'} />\n                    {row.original.isAdmin && (\n                      <Tooltip placement=\"top\" content=\"Grafana Admin\">\n                        <Icon name=\"shield\" />\n                      </Tooltip>\n                    )}\n                  </Stack>\n                );\n              },\n            },\n          ]\n        : []),\n      ...(showLicensedRole\n        ? [\n            {\n              id: 'licensedRole',\n              header: 'Licensed role',\n              cell: ({ cell: { value } }: Cell<'licensedRole'>) => {\n                return value === 'None' ? (\n                  <Text color={'disabled'}>\n                    Not assigned{' '}\n                    <Tooltip placement=\"top\" content=\"A licensed role will be assigned when this user signs in\">\n                      <Icon name=\"question-circle\" />\n                    </Tooltip>\n                  </Text>\n                ) : (\n                  value\n                );\n              },\n            },\n          ]\n        : []),\n      {\n        id: 'lastSeenAtAge',\n        header: 'Last active',\n        headerTooltip: {\n          content: 'Time since user was seen using Grafana',\n          iconName: 'question-circle',\n        },\n        cell: ({ cell: { value } }: Cell<'lastSeenAtAge'>) => {\n          return <>{value && <>{value === '10 years' ? <Text color={'disabled'}>Never</Text> : value}</>}</>;\n        },\n        sortType: (a, b) => new Date(a.original.lastSeenAt!).getTime() - new Date(b.original.lastSeenAt!).getTime(),\n      },\n      {\n        id: 'authLabels',\n        header: 'Origin',\n        cell: ({ cell: { value } }: Cell<'authLabels'>) => (\n          <>{Array.isArray(value) && value.length > 0 && <TagBadge label={value[0]} removeIcon={false} count={0} />}</>\n        ),\n      },\n      {\n        id: 'isDisabled',\n        header: '',\n        cell: ({ cell: { value } }: Cell<'isDisabled'>) => <>{value && <Tag colorIndex={9} name={'Disabled'} />}</>,\n      },\n      {\n        id: 'edit',\n        header: '',\n        cell: ({ row: { original } }: Cell) => {\n          return (\n            <LinkButton\n              variant=\"secondary\"\n              size=\"sm\"\n              icon=\"pen\"\n              href={`admin/users/edit/${original.id}`}\n              aria-label={`Edit user ${original.name}`}\n              tooltip={'Edit user'}\n            />\n          );\n        },\n      },\n    ],\n    [showLicensedRole, showBelongsTo]\n  );\n  return (\n    <Stack direction={'column'} gap={2}>\n      <InteractiveTable columns={columns} data={users} getRowId={(user) => String(user.id)} fetchData={fetchData} />\n      {showPaging && (\n        <Stack justifyContent={'flex-end'}>\n          <Pagination numberOfPages={totalPages} currentPage={currentPage} onNavigate={onChangePage} />\n        </Stack>\n      )}\n    </Stack>\n  );\n};\n","import { css } from '@emotion/css';\nimport { ComponentType, useEffect } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors as e2eSelectors } from '@grafana/e2e-selectors/src';\nimport { LinkButton, RadioButtonGroup, useStyles2, FilterInput, EmptyState } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { contextSrv } from 'app/core/core';\nimport { t } from 'app/core/internationalization';\n\nimport { AccessControlAction, StoreState, UserFilter } from '../../types';\n\nimport { UsersTable } from './Users/UsersTable';\nimport { changeFilter, changePage, changeQuery, changeSort, fetchUsers } from './state/actions';\n\nexport interface FilterProps {\n  filters: UserFilter[];\n  onChange: (filter: UserFilter) => void;\n  className?: string;\n}\nconst extraFilters: Array<ComponentType<FilterProps>> = [];\nexport const addExtraFilters = (filter: ComponentType<FilterProps>) => {\n  extraFilters.push(filter);\n};\n\nconst selectors = e2eSelectors.pages.UserListPage.UserListAdminPage;\n\nconst mapDispatchToProps = {\n  fetchUsers,\n  changeQuery,\n  changePage,\n  changeFilter,\n  changeSort,\n};\n\nconst mapStateToProps = (state: StoreState) => ({\n  users: state.userListAdmin.users,\n  query: state.userListAdmin.query,\n  showPaging: state.userListAdmin.showPaging,\n  totalPages: state.userListAdmin.totalPages,\n  page: state.userListAdmin.page,\n  filters: state.userListAdmin.filters,\n  isLoading: state.userListAdmin.isLoading,\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ninterface OwnProps {}\n\ntype Props = OwnProps & ConnectedProps<typeof connector>;\n\nconst UserListAdminPageUnConnected = ({\n  fetchUsers,\n  query,\n  changeQuery,\n  users,\n  showPaging,\n  changeFilter,\n  filters,\n  totalPages,\n  page,\n  changePage,\n  changeSort,\n  isLoading,\n}: Props) => {\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    fetchUsers();\n  }, [fetchUsers]);\n\n  return (\n    <Page.Contents>\n      <div className={styles.actionBar} data-testid={selectors.container}>\n        <div className={styles.row}>\n          <FilterInput\n            placeholder=\"Search user by login, email, or name.\"\n            autoFocus={true}\n            value={query}\n            onChange={changeQuery}\n          />\n          <RadioButtonGroup\n            options={[\n              { label: 'All users', value: false },\n              { label: 'Active last 30 days', value: true },\n            ]}\n            onChange={(value) => changeFilter({ name: 'activeLast30Days', value })}\n            value={filters.find((f) => f.name === 'activeLast30Days')?.value}\n            className={styles.filter}\n          />\n          {extraFilters.map((FilterComponent, index) => (\n            <FilterComponent key={index} filters={filters} onChange={changeFilter} className={styles.filter} />\n          ))}\n          {contextSrv.hasPermission(AccessControlAction.UsersCreate) && (\n            <LinkButton href=\"admin/users/create\" variant=\"primary\">\n              New user\n            </LinkButton>\n          )}\n        </div>\n      </div>\n      {!isLoading && users.length === 0 ? (\n        <EmptyState message={t('users.empty-state.message', 'No users found')} variant=\"not-found\" />\n      ) : (\n        <UsersTable\n          users={users}\n          showPaging={showPaging}\n          totalPages={totalPages}\n          onChangePage={changePage}\n          currentPage={page}\n          fetchData={changeSort}\n        />\n      )}\n    </Page.Contents>\n  );\n};\n\nexport const UserListAdminPageContent = connector(UserListAdminPageUnConnected);\n\nexport function UserListAdminPage() {\n  return (\n    <Page navId=\"global-users\">\n      <UserListAdminPageContent />\n    </Page>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    filter: css({\n      margin: theme.spacing(0, 1),\n      [theme.breakpoints.down('sm')]: {\n        margin: 0,\n      },\n    }),\n    actionBar: css({\n      marginBottom: theme.spacing(2),\n      display: 'flex',\n      alignItems: 'flex-start',\n      gap: theme.spacing(2),\n      [theme.breakpoints.down('sm')]: {\n        flexWrap: 'wrap',\n      },\n    }),\n    row: css({\n      display: 'flex',\n      alignItems: 'flex-start',\n      textAlign: 'left',\n      marginBottom: theme.spacing(0.5),\n      flexGrow: 1,\n\n      [theme.breakpoints.down('sm')]: {\n        flexWrap: 'wrap',\n        gap: theme.spacing(2),\n        width: '100%',\n      },\n    }),\n  };\n};\n\nexport default UserListAdminPage;\n","import { useMemo } from 'react';\n\nimport {\n  Avatar,\n  CellProps,\n  Column,\n  InteractiveTable,\n  Stack,\n  Badge,\n  Tooltip,\n  Pagination,\n  FetchDataFunc,\n} from '@grafana/ui';\nimport { EmptyArea } from 'app/features/alerting/unified/components/EmptyArea';\nimport { UserAnonymousDeviceDTO } from 'app/types';\n\ntype Cell<T extends keyof UserAnonymousDeviceDTO = keyof UserAnonymousDeviceDTO> = CellProps<\n  UserAnonymousDeviceDTO,\n  UserAnonymousDeviceDTO[T]\n>;\n\n// A helper function to parse the user agent string and extract parts\nconst parseUserAgent = (userAgent: string) => {\n  // If the user agent string doesn't contain a space, it's probably just the browser name\n  // or some other entity that are accessing grafana\n  if (!userAgent.includes(' ')) {\n    return {\n      browser: userAgent,\n      computer: '',\n    };\n  }\n  const parts = userAgent.split(' ');\n  return {\n    browser: parts[0],\n    computer: parts[1],\n  };\n};\n\n// A helper function to truncate each part of the user agent\nconst truncatePart = (part: string, maxLength: number) => {\n  return part.length > maxLength ? part.substring(0, maxLength) + '...' : part;\n};\n\ninterface UserAgentCellProps {\n  value: string;\n}\n\nconst UserAgentCell = ({ value }: UserAgentCellProps) => {\n  const parts = parseUserAgent(value);\n  return (\n    <Tooltip theme=\"info-alt\" content={value} placement=\"top-end\" interactive={true}>\n      <span>\n        {truncatePart(parts.browser, 10)}\n        {truncatePart(parts.computer, 10)}\n      </span>\n    </Tooltip>\n  );\n};\n\ninterface AnonUsersTableProps {\n  devices: UserAnonymousDeviceDTO[];\n  // for pagination\n  showPaging?: boolean;\n  totalPages: number;\n  onChangePage: (page: number) => void;\n  currentPage: number;\n  fetchData?: FetchDataFunc<UserAnonymousDeviceDTO>;\n}\n\nexport const AnonUsersDevicesTable = ({\n  devices,\n  showPaging,\n  totalPages,\n  onChangePage,\n  currentPage,\n  fetchData,\n}: AnonUsersTableProps) => {\n  const columns: Array<Column<UserAnonymousDeviceDTO>> = useMemo(\n    () => [\n      {\n        id: 'avatarUrl',\n        header: '',\n        cell: ({ cell: { value } }: Cell<'avatarUrl'>) => value && <Avatar src={value} alt={'User avatar'} />,\n      },\n      {\n        id: 'login',\n        header: 'Login',\n        cell: ({ cell: { value } }: Cell<'login'>) => 'Anonymous',\n      },\n      {\n        id: 'userAgent',\n        header: 'User Agent',\n        cell: ({ cell: { value } }: Cell<'userAgent'>) => <UserAgentCell value={value} />,\n        sortType: 'string',\n      },\n      {\n        id: 'updatedAt',\n        header: 'Last active',\n        cell: ({ cell: { value } }: Cell<'updatedAt'>) => value,\n        sortType: (a, b) => new Date(a.original.updatedAt).getTime() - new Date(b.original.updatedAt).getTime(),\n      },\n      {\n        id: 'clientIp',\n        header: 'Origin IP (address)',\n        cell: ({ cell: { value } }: Cell<'clientIp'>) => value && <Badge text={value} color=\"orange\" />,\n      },\n    ],\n    []\n  );\n  return (\n    <Stack direction={'column'} gap={2}>\n      <InteractiveTable columns={columns} data={devices} getRowId={(user) => user.deviceId} fetchData={fetchData} />\n      {showPaging && (\n        <Stack justifyContent={'flex-end'}>\n          <Pagination numberOfPages={totalPages} currentPage={currentPage} onNavigate={onChangePage} />\n        </Stack>\n      )}\n      {devices.length === 0 && (\n        <EmptyArea>\n          <span>No anonymous users found.</span>\n        </EmptyArea>\n      )}\n    </Stack>\n  );\n};\n","import { css } from '@emotion/css';\nimport { useEffect } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors as e2eSelectors } from '@grafana/e2e-selectors/src';\nimport { RadioButtonGroup, useStyles2, FilterInput } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\n\nimport { StoreState } from '../../types';\n\nimport { AnonUsersDevicesTable } from './Users/AnonUsersTable';\nimport { fetchUsersAnonymousDevices, changeAnonUserSort, changeAnonPage, changeAnonQuery } from './state/actions';\n\nconst mapDispatchToProps = {\n  fetchUsersAnonymousDevices,\n  changeAnonUserSort,\n  changeAnonPage,\n  changeAnonQuery,\n};\n\nconst mapStateToProps = (state: StoreState) => ({\n  devices: state.userListAnonymousDevices.devices,\n  query: state.userListAnonymousDevices.query,\n  showPaging: state.userListAnonymousDevices.showPaging,\n  totalPages: state.userListAnonymousDevices.totalPages,\n  page: state.userListAnonymousDevices.page,\n  filters: state.userListAnonymousDevices.filters,\n});\n\nconst selectors = e2eSelectors.pages.UserListPage.UserListAdminPage;\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ninterface OwnProps {}\n\ntype Props = OwnProps & ConnectedProps<typeof connector>;\n\nconst UserListAnonymousDevicesPageUnConnected = ({\n  devices,\n  fetchUsersAnonymousDevices,\n  query,\n  changeAnonQuery,\n  filters,\n  showPaging,\n  totalPages,\n  page,\n  changeAnonPage,\n  changeAnonUserSort,\n}: Props) => {\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    fetchUsersAnonymousDevices();\n  }, [fetchUsersAnonymousDevices]);\n\n  return (\n    <Page.Contents>\n      <div className={styles.actionBar} data-testid={selectors.container}>\n        <div className={styles.row}>\n          <FilterInput\n            placeholder=\"Search devices by IP address.\"\n            autoFocus={true}\n            value={query}\n            onChange={changeAnonQuery}\n          />\n          <RadioButtonGroup\n            options={[{ label: 'Active last 30 days', value: true }]}\n            // onChange={(value) => changeFilter({ name: 'activeLast30Days', value })}\n            value={filters.find((f) => f.name === 'activeLast30Days')?.value}\n            className={styles.filter}\n          />\n        </div>\n      </div>\n      <AnonUsersDevicesTable\n        devices={devices}\n        showPaging={showPaging}\n        totalPages={totalPages}\n        onChangePage={changeAnonPage}\n        currentPage={page}\n        fetchData={changeAnonUserSort}\n      />\n    </Page.Contents>\n  );\n};\n\nexport const UserListAnonymousDevicesPageContent = connector(UserListAnonymousDevicesPageUnConnected);\n\nexport function UserListAnonymousDevicesPage() {\n  return (\n    <Page navId=\"anonymous-users\">\n      <UserListAnonymousDevicesPageContent />\n    </Page>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    filter: css({\n      margin: theme.spacing(0, 1),\n      [theme.breakpoints.down('sm')]: {\n        margin: 0,\n      },\n    }),\n    actionBar: css({\n      marginBottom: theme.spacing(2),\n      display: 'flex',\n      alignItems: 'flex-start',\n      gap: theme.spacing(2),\n      [theme.breakpoints.down('sm')]: {\n        flexWrap: 'wrap',\n      },\n    }),\n    row: css({\n      display: 'flex',\n      alignItems: 'flex-start',\n      textAlign: 'left',\n      marginBottom: theme.spacing(0.5),\n      flexGrow: 1,\n\n      [theme.breakpoints.down('sm')]: {\n        flexWrap: 'wrap',\n        gap: theme.spacing(2),\n        width: '100%',\n      },\n    }),\n  };\n};\n\nexport default UserListAnonymousDevicesPage;\n","import { css, cx } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data/src';\nimport { selectors as e2eSelectors } from '@grafana/e2e-selectors/src';\nimport { config } from '@grafana/runtime';\nimport { Button, LoadingPlaceholder, Modal, ModalsController, useStyles2 } from '@grafana/ui/src';\nimport { Trans, t } from 'app/core/internationalization';\nimport {\n  generatePublicDashboardConfigUrl,\n  generatePublicDashboardUrl,\n} from 'app/features/dashboard/components/ShareModal/SharePublicDashboard/SharePublicDashboardUtils';\n\nimport { useGetActiveUserDashboardsQuery } from '../../dashboard/api/publicDashboardApi';\n\nconst selectors = e2eSelectors.pages.UserListPage.UsersListPublicDashboardsPage.DashboardsListModal;\nexport const DashboardsListModal = ({ email, onDismiss }: { email: string; onDismiss: () => void }) => {\n  const styles = useStyles2(getStyles);\n\n  const { data: dashboards, isLoading } = useGetActiveUserDashboardsQuery(email);\n\n  return (\n    <Modal\n      className={styles.modal}\n      isOpen\n      title={\n        config.featureToggles.newDashboardSharingComponent\n          ? t('public-dashboard-users-access-list.modal.shared-dashboard-modal-title', 'Shared dashboards')\n          : t('public-dashboard-users-access-list.modal.dashboard-modal-title', 'Public dashboards')\n      }\n      onDismiss={onDismiss}\n    >\n      {isLoading ? (\n        <div className={styles.loading}>\n          <LoadingPlaceholder\n            text={t('public-dashboard-users-access-list.dashboard-modal.loading-text', 'Loading...')}\n          />\n        </div>\n      ) : (\n        dashboards?.map((dash) => (\n          <div key={dash.dashboardUid} className={styles.listItem} data-testid={selectors.listItem(dash.dashboardUid)}>\n            <p className={styles.dashboardTitle}>{dash.dashboardTitle}</p>\n            <div className={styles.urlsContainer}>\n              <a\n                rel=\"noreferrer\"\n                target=\"_blank\"\n                className={cx('external-link', styles.url)}\n                href={generatePublicDashboardUrl(dash.publicDashboardAccessToken)}\n                onClick={onDismiss}\n              >\n                {config.featureToggles.newDashboardSharingComponent ? (\n                  <Trans i18nKey=\"public-dashboard-users-access-list.dashboard-modal.external-link\">\n                    External link\n                  </Trans>\n                ) : (\n                  <Trans i18nKey=\"public-dashboard-users-access-list.dashboard-modal.public-dashboard-link\">\n                    Public dashboard URL\n                  </Trans>\n                )}\n              </a>\n              <span className={styles.urlsDivider}>•</span>\n              <a\n                className={cx('external-link', styles.url)}\n                href={generatePublicDashboardConfigUrl(dash.dashboardUid, dash.slug)}\n                onClick={onDismiss}\n              >\n                {config.featureToggles.newDashboardSharingComponent ? (\n                  <Trans i18nKey=\"public-dashboard-users-access-list.dashboard-modal.sharing-setting\">\n                    Sharing settings\n                  </Trans>\n                ) : (\n                  <Trans i18nKey=\"public-dashboard-users-access-list.dashboard-modal.public-dashboard-setting\">\n                    Public dashboard settings\n                  </Trans>\n                )}\n              </a>\n            </div>\n            <hr className={styles.divider} />\n          </div>\n        ))\n      )}\n    </Modal>\n  );\n};\n\nexport const DashboardsListModalButton = ({ email }: { email: string }) => {\n  const translatedDashboardListModalButtonText = t(\n    'public-dashboard-users-access-list.dashboard-modal.open-dashboard-list-text',\n    'Open dashboards list'\n  );\n  return (\n    <ModalsController>\n      {({ showModal, hideModal }) => (\n        <Button\n          variant=\"secondary\"\n          size=\"sm\"\n          icon=\"question-circle\"\n          title={translatedDashboardListModalButtonText}\n          aria-label={translatedDashboardListModalButtonText}\n          onClick={() => showModal(DashboardsListModal, { email, onDismiss: hideModal })}\n        />\n      )}\n    </ModalsController>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  modal: css`\n    width: 590px;\n  `,\n  loading: css`\n    display: flex;\n    justify-content: center;\n  `,\n  listItem: css`\n    display: flex;\n    flex-direction: column;\n    gap: ${theme.spacing(0.5)};\n  `,\n  divider: css`\n    margin: ${theme.spacing(1.5, 0)};\n    color: ${theme.colors.text.secondary};\n  `,\n  urlsContainer: css`\n    display: flex;\n    gap: ${theme.spacing(0.5)};\n\n    ${theme.breakpoints.down('sm')} {\n      flex-direction: column;\n    }\n  `,\n  urlsDivider: css`\n    color: ${theme.colors.text.secondary};\n    ${theme.breakpoints.down('sm')} {\n      display: none;\n    }\n  `,\n  dashboardTitle: css`\n    font-size: ${theme.typography.body.fontSize};\n    font-weight: ${theme.typography.fontWeightBold};\n    margin-bottom: 0;\n  `,\n  url: css`\n    font-size: ${theme.typography.body.fontSize};\n  `,\n});\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data/src';\nimport { config } from '@grafana/runtime';\nimport { Button, Modal, ModalsController, useStyles2 } from '@grafana/ui/src';\nimport { Trans, t } from 'app/core/internationalization';\nimport { SessionUser } from 'app/features/dashboard/components/ShareModal/SharePublicDashboard/SharePublicDashboardUtils';\n\nimport { useRevokeAllAccessMutation } from '../../dashboard/api/publicDashboardApi';\n\nconst DeleteUserModal = ({ user, hideModal }: { user: SessionUser; hideModal: () => void }) => {\n  const [revokeAllAccess] = useRevokeAllAccessMutation();\n  const styles = useStyles2(getStyles);\n\n  const onRevokeAccessClick = () => {\n    revokeAllAccess({ email: user.email });\n    hideModal();\n  };\n\n  return (\n    <Modal\n      className={styles.modal}\n      isOpen\n      title={t('public-dashboard-users-access-list.delete-user-modal.revoke-access-title', 'Revoke access')}\n      onDismiss={hideModal}\n    >\n      <p className={styles.description}>\n        <Trans i18nKey=\"public-dashboard-users-access-list.delete-user-modal.revoke-user-access-modal-desc-line1\">\n          Are you sure you want to revoke access for {{ email: user.email }}?\n        </Trans>\n      </p>\n      <p className={styles.description}>\n        {config.featureToggles.newDashboardSharingComponent ? (\n          <Trans\n            i18nKey=\"public-dashboard-users-access-list.delete-user-shared-dashboards-modal.revoke-user-access-modal-desc-line2\"\n            shouldUnescape\n          >\n            This action will immediately revoke {{ email: user.email }}&apos;s access to all shared dashboards.\n          </Trans>\n        ) : (\n          <Trans\n            i18nKey=\"public-dashboard-users-access-list.delete-user-modal.revoke-user-access-modal-desc-line2\"\n            shouldUnescape\n          >\n            This action will immediately revoke {{ email: user.email }}&apos;s access to all public dashboards.\n          </Trans>\n        )}\n      </p>\n      <Modal.ButtonRow>\n        <Button type=\"button\" variant=\"secondary\" onClick={hideModal} fill=\"outline\">\n          <Trans i18nKey=\"public-dashboard-users-access-list.delete-user-modal.delete-user-cancel-button\">Cancel</Trans>\n        </Button>\n        <Button type=\"button\" variant=\"destructive\" onClick={onRevokeAccessClick}>\n          <Trans i18nKey=\"public-dashboard-users-access-list.delete-user-modal.delete-user-revoke-access-button\">\n            Revoke access\n          </Trans>\n        </Button>\n      </Modal.ButtonRow>\n    </Modal>\n  );\n};\n\nexport const DeleteUserModalButton = ({ user }: { user: SessionUser }) => {\n  const translatedDeleteUserText = t(\n    'public-dashboard-users-access-list.delete-user-modal.delete-user-button-text',\n    'Delete user'\n  );\n  return (\n    <ModalsController>\n      {({ showModal, hideModal }) => (\n        <Button\n          size=\"sm\"\n          variant=\"destructive\"\n          onClick={() => showModal(DeleteUserModal, { user, hideModal })}\n          icon=\"times\"\n          aria-label={translatedDeleteUserText}\n          title={translatedDeleteUserText}\n        />\n      )}\n    </ModalsController>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  modal: css({\n    width: '500px',\n  }),\n  description: css({\n    fontSize: theme.typography.body.fontSize,\n    margin: 0,\n  }),\n});\n","import { selectors as e2eSelectors } from '@grafana/e2e-selectors/src';\nimport { Icon, Stack, Tag, Tooltip } from '@grafana/ui/src';\nimport { Page } from 'app/core/components/Page/Page';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport { useGetActiveUsersQuery } from '../../dashboard/api/publicDashboardApi';\n\nimport { DashboardsListModalButton } from './DashboardsListModalButton';\nimport { DeleteUserModalButton } from './DeleteUserModalButton';\n\nconst selectors = e2eSelectors.pages.UserListPage.publicDashboards;\n\nexport const UserListPublicDashboardPage = () => {\n  const { data: users, isLoading } = useGetActiveUsersQuery();\n\n  return (\n    <Page.Contents isLoading={isLoading}>\n      <table className=\"filter-table form-inline\" data-testid={selectors.container}>\n        <thead>\n          <tr>\n            <th>\n              <Trans i18nKey=\"public-dashboard-users-access-list.table-header.email-label\">Email</Trans>\n            </th>\n            <th>\n              <span>\n                <Trans i18nKey=\"public-dashboard-users-access-list.table-header.activated-label\">Activated</Trans>\n              </span>\n              <Tooltip\n                placement=\"top\"\n                content={t(\n                  'public-dashboard-users-access-list.table-header.activated-tooltip',\n                  'Earliest time user has been an active user to a dashboard'\n                )}\n              >\n                <Icon name=\"info-circle\" />\n              </Tooltip>\n            </th>\n            <th>\n              <Trans i18nKey=\"public-dashboard-users-access-list.table-header.last-active-label\">Last active</Trans>\n            </th>\n            <th>\n              <Trans i18nKey=\"public-dashboard-users-access-list.table-header.origin-label\">Origin</Trans>\n            </th>\n            <th>\n              <Trans i18nKey=\"public-dashboard-users-access-list.table-header.role-label\">Role</Trans>\n            </th>\n            <th></th>\n          </tr>\n        </thead>\n        <tbody>\n          {users?.map((user) => (\n            <tr key={user.email}>\n              <td className=\"max-width-10\">\n                <span className=\"ellipsis\" title={user.email}>\n                  {user.email}\n                </span>\n              </td>\n              <td className=\"max-width-10\">{user.firstSeenAtAge}</td>\n              <td className=\"max-width-10\">{user.lastSeenAtAge}</td>\n              <td className=\"max-width-10\">\n                <Stack gap={2}>\n                  <span>{user.totalDashboards} dashboard(s)</span>\n                  <DashboardsListModalButton email={user.email} />\n                </Stack>\n              </td>\n              <td className=\"max-width-10\">\n                <Tag name=\"Viewer\" colorIndex={19} />\n              </td>\n              <td className=\"text-right\">\n                <DeleteUserModalButton user={user} />\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </Page.Contents>\n  );\n};\n","import { css } from '@emotion/css';\nimport { useState } from 'react';\nimport * as React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors as e2eSelectors } from '@grafana/e2e-selectors';\nimport { config } from '@grafana/runtime';\nimport { useStyles2, TabsBar, Tab } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { isEmailSharingEnabled } from 'app/features/dashboard/components/ShareModal/SharePublicDashboard/SharePublicDashboardUtils';\n\nimport { Page } from '../../core/components/Page/Page';\nimport { AccessControlAction } from '../../types';\nimport { UsersListPageContent } from '../users/UsersListPage';\n\nimport { UserListAdminPageContent } from './UserListAdminPage';\nimport { UserListAnonymousDevicesPageContent } from './UserListAnonymousPage';\nimport { UserListPublicDashboardPage } from './UserListPublicDashboardPage/UserListPublicDashboardPage';\n\nenum TabView {\n  ADMIN = 'admin',\n  ORG = 'org',\n  PUBLIC_DASHBOARDS = 'public-dashboards',\n  ANON = 'anon',\n}\n\nconst selectors = e2eSelectors.pages.UserListPage;\n\nconst PublicDashboardsTab = ({ view, setView }: { view: TabView | null; setView: (v: TabView | null) => void }) => (\n  <Tab\n    label={\n      config.featureToggles.newDashboardSharingComponent\n        ? t('users-access-list.tabs.shared-dashboard-users-tab-title', 'Shared dashboard users')\n        : t('users-access-list.tabs.public-dashboard-users-tab-title', 'Public dashboard users')\n    }\n    active={view === TabView.PUBLIC_DASHBOARDS}\n    onChangeTab={() => setView(TabView.PUBLIC_DASHBOARDS)}\n    data-testid={selectors.tabs.publicDashboardsUsers}\n  />\n);\n\nconst TAB_PAGE_MAP: Record<TabView, React.ReactElement> = {\n  [TabView.ADMIN]: <UserListAdminPageContent />,\n  [TabView.ORG]: <UsersListPageContent />,\n  [TabView.PUBLIC_DASHBOARDS]: <UserListPublicDashboardPage />,\n  [TabView.ANON]: <UserListAnonymousDevicesPageContent />,\n};\n\nexport default function UserListPage() {\n  const styles = useStyles2(getStyles);\n\n  const hasAccessToAdminUsers = contextSrv.hasPermission(AccessControlAction.UsersRead);\n  const hasAccessToOrgUsers = contextSrv.hasPermission(AccessControlAction.OrgUsersRead);\n\n  const [view, setView] = useState(() => {\n    if (hasAccessToAdminUsers) {\n      return TabView.ADMIN;\n    } else if (hasAccessToOrgUsers) {\n      return TabView.ORG;\n    }\n    return null;\n  });\n\n  const showAdminAndOrgTabs = hasAccessToOrgUsers && hasAccessToAdminUsers;\n\n  return (\n    <Page navId={'global-users'}>\n      {showAdminAndOrgTabs ? (\n        <TabsBar className={styles.tabsMargin}>\n          <Tab\n            label=\"All users\"\n            active={view === TabView.ADMIN}\n            onChangeTab={() => setView(TabView.ADMIN)}\n            data-testid={selectors.tabs.allUsers}\n          />\n          <Tab\n            label=\"Organization users\"\n            active={view === TabView.ORG}\n            onChangeTab={() => setView(TabView.ORG)}\n            data-testid={selectors.tabs.orgUsers}\n          />\n          {config.anonymousEnabled && (\n            <Tab\n              label=\"Anonymous devices\"\n              active={view === TabView.ANON}\n              onChangeTab={() => setView(TabView.ANON)}\n              data-testid={selectors.tabs.anonUserDevices}\n            />\n          )}\n          {isEmailSharingEnabled() && <PublicDashboardsTab view={view} setView={setView} />}\n        </TabsBar>\n      ) : (\n        isEmailSharingEnabled() && (\n          <TabsBar className={styles.tabsMargin}>\n            <Tab\n              label=\"Users\"\n              active={view === TabView.ORG}\n              onChangeTab={() => setView(TabView.ORG)}\n              data-testid={selectors.tabs.users}\n            />\n            <PublicDashboardsTab view={view} setView={setView} />\n          </TabsBar>\n        )\n      )}\n      {view ? TAB_PAGE_MAP[view] : <UsersListPageContent />}\n    </Page>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  tabsMargin: css({\n    marginBottom: theme.spacing(3),\n  }),\n});\n","import { useEffect, useMemo, useState } from 'react';\n\nimport { OrgRole } from '@grafana/data';\nimport { selectors as e2eSelectors } from '@grafana/e2e-selectors';\nimport {\n  Avatar,\n  Box,\n  Button,\n  CellProps,\n  Column,\n  ConfirmModal,\n  FetchDataFunc,\n  Icon,\n  InteractiveTable,\n  Pagination,\n  Stack,\n  Tag,\n  Text,\n  Tooltip,\n} from '@grafana/ui';\nimport { UserRolePicker } from 'app/core/components/RolePicker/UserRolePicker';\nimport { fetchRoleOptions, updateUserRoles } from 'app/core/components/RolePicker/api';\nimport { TagBadge } from 'app/core/components/TagFilter/TagBadge';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction, OrgUser, Role } from 'app/types';\n\nimport { OrgRolePicker } from '../OrgRolePicker';\n\ntype Cell<T extends keyof OrgUser = keyof OrgUser> = CellProps<OrgUser, OrgUser[T]>;\n\nconst disabledRoleMessage = `This user's role is not editable because it is synchronized from your auth provider.\nRefer to the Grafana authentication docs for details.`;\n\nconst getBasicRoleDisabled = (user: OrgUser) => {\n  const isUserSynced = user?.isExternallySynced;\n  return !contextSrv.hasPermissionInMetadata(AccessControlAction.OrgUsersWrite, user) || isUserSynced;\n};\n\nconst selectors = e2eSelectors.pages.UserListPage.UsersListPage;\n\nexport interface Props {\n  users: OrgUser[];\n  orgId?: number;\n  onRoleChange: (role: OrgRole, user: OrgUser) => void;\n  onRemoveUser: (user: OrgUser) => void;\n  fetchData?: FetchDataFunc<OrgUser>;\n  changePage: (page: number) => void;\n  page: number;\n  totalPages: number;\n  rolesLoading?: boolean;\n  onUserRolesChange?: () => void;\n}\n\nexport const OrgUsersTable = ({\n  users,\n  orgId,\n  onRoleChange,\n  onUserRolesChange,\n  onRemoveUser,\n  fetchData,\n  changePage,\n  page,\n  totalPages,\n  rolesLoading,\n}: Props) => {\n  const [userToRemove, setUserToRemove] = useState<OrgUser | null>(null);\n  const [roleOptions, setRoleOptions] = useState<Role[]>([]);\n\n  useEffect(() => {\n    async function fetchOptions() {\n      try {\n        if (contextSrv.hasPermission(AccessControlAction.ActionRolesList)) {\n          let options = await fetchRoleOptions(orgId);\n          setRoleOptions(options);\n        }\n      } catch (e) {\n        console.error('Error loading options');\n      }\n    }\n    if (contextSrv.licensedAccessControlEnabled()) {\n      fetchOptions();\n    }\n  }, [orgId]);\n\n  const columns: Array<Column<OrgUser>> = useMemo(\n    () => [\n      {\n        id: 'avatarUrl',\n        header: '',\n        cell: ({ cell: { value } }: Cell<'avatarUrl'>) => value && <Avatar src={value} alt=\"User avatar\" />,\n      },\n      {\n        id: 'login',\n        header: 'Login',\n        cell: ({ cell: { value } }: Cell<'login'>) => <div>{value}</div>,\n        sortType: 'string',\n      },\n      {\n        id: 'email',\n        header: 'Email',\n        cell: ({ cell: { value } }: Cell<'email'>) => value,\n        sortType: 'string',\n      },\n      {\n        id: 'name',\n        header: 'Name',\n        cell: ({ cell: { value } }: Cell<'name'>) => value,\n        sortType: 'string',\n      },\n      {\n        id: 'lastSeenAtAge',\n        header: 'Last active',\n        cell: ({ cell: { value } }: Cell<'lastSeenAtAge'>) => {\n          return <>{value && <>{value === '10 years' ? <Text color={'disabled'}>Never</Text> : value}</>}</>;\n        },\n        sortType: (a, b) => new Date(a.original.lastSeenAt).getTime() - new Date(b.original.lastSeenAt).getTime(),\n      },\n      {\n        id: 'role',\n        header: 'Role',\n        cell: ({ cell: { value }, row: { original } }: Cell<'role'>) => {\n          const basicRoleDisabled = getBasicRoleDisabled(original);\n          const onUserRolesUpdate = async (newRoles: Role[], userId: number, orgId: number | undefined) => {\n            await updateUserRoles(newRoles, userId, orgId);\n            if (onUserRolesChange) {\n              onUserRolesChange();\n            }\n          };\n\n          return contextSrv.licensedAccessControlEnabled() ? (\n            <UserRolePicker\n              userId={original.userId}\n              roles={original.roles}\n              apply={true}\n              onApplyRoles={onUserRolesUpdate}\n              isLoading={rolesLoading}\n              orgId={orgId}\n              roleOptions={roleOptions}\n              basicRole={value}\n              onBasicRoleChange={(newRole) => onRoleChange(newRole, original)}\n              basicRoleDisabled={basicRoleDisabled}\n              basicRoleDisabledMessage={disabledRoleMessage}\n              width={40}\n            />\n          ) : (\n            <OrgRolePicker\n              aria-label=\"Role\"\n              value={value}\n              disabled={basicRoleDisabled}\n              onChange={(newRole) => onRoleChange(newRole, original)}\n            />\n          );\n        },\n      },\n      {\n        id: 'info',\n        header: '',\n        cell: ({ row: { original } }: Cell) => {\n          const basicRoleDisabled = getBasicRoleDisabled(original);\n          return (\n            basicRoleDisabled && (\n              <Box display={'flex'} alignItems={'center'} marginLeft={1}>\n                <Tooltip\n                  interactive={true}\n                  content={\n                    <div>\n                      This user&apos;s role is not editable because it is synchronized from your auth provider. Refer to\n                      the&nbsp;\n                      <a\n                        href={\n                          'https://grafana.com/docs/grafana/latest/administration/user-management/manage-org-users/#change-a-users-organization-permissions'\n                        }\n                        rel=\"noreferrer\"\n                        target=\"_blank\"\n                      >\n                        Grafana authentication docs\n                      </a>\n                      &nbsp;for details.\n                    </div>\n                  }\n                >\n                  <Icon name=\"question-circle\" />\n                </Tooltip>\n              </Box>\n            )\n          );\n        },\n      },\n      {\n        id: 'authLabels',\n        header: 'Origin',\n        cell: ({ cell: { value } }: Cell<'authLabels'>) => (\n          <>{Array.isArray(value) && value.length > 0 && <TagBadge label={value[0]} removeIcon={false} count={0} />}</>\n        ),\n      },\n      {\n        id: 'isDisabled',\n        header: '',\n        cell: ({ cell: { value } }: Cell<'isDisabled'>) => <>{value && <Tag colorIndex={9} name={'Disabled'} />}</>,\n      },\n      {\n        id: 'delete',\n        header: '',\n        cell: ({ row: { original } }: Cell) => {\n          return (\n            contextSrv.hasPermissionInMetadata(AccessControlAction.OrgUsersRemove, original) && (\n              <Button\n                size=\"sm\"\n                variant=\"destructive\"\n                onClick={() => {\n                  setUserToRemove(original);\n                }}\n                icon=\"times\"\n                aria-label={`Delete user ${original.name}`}\n              />\n            )\n          );\n        },\n      },\n    ],\n    [rolesLoading, orgId, roleOptions, onUserRolesChange, onRoleChange]\n  );\n\n  return (\n    <Stack direction={'column'} gap={2} data-testid={selectors.container}>\n      <InteractiveTable columns={columns} data={users} getRowId={(user) => String(user.userId)} fetchData={fetchData} />\n      <Stack justifyContent=\"flex-end\">\n        <Pagination onNavigate={changePage} currentPage={page} numberOfPages={totalPages} hideWhenSinglePage={true} />\n      </Stack>\n      {Boolean(userToRemove) && (\n        <ConfirmModal\n          body={`Are you sure you want to delete user ${userToRemove?.login}?`}\n          confirmText=\"Delete\"\n          title=\"Delete\"\n          onDismiss={() => {\n            setUserToRemove(null);\n          }}\n          isOpen={true}\n          onConfirm={() => {\n            if (!userToRemove) {\n              return;\n            }\n            onRemoveUser(userToRemove);\n            setUserToRemove(null);\n          }}\n        />\n      )}\n    </Stack>\n  );\n};\n","import { css } from '@emotion/css';\nimport * as React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nexport const EmptyArea = ({ children }: React.PropsWithChildren<{}>) => {\n  const styles = useStyles2(getStyles);\n\n  return <div className={styles.container}>{children}</div>;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css({\n      backgroundColor: theme.colors.background.secondary,\n      color: theme.colors.text.secondary,\n      padding: theme.spacing(4),\n      textAlign: 'center',\n    }),\n  };\n};\n"],"names":["UserRolePicker","basicRole","roles","userId","orgId","onBasicRoleChange","roleOptions","disabled","basicRoleDisabled","basicRoleDisabledMessage","apply","onApplyRoles","pendingRoles","maxWidth","width","isLoading","loading","appliedRoles","getUserRoles","onRolesChange","canUpdateRoles","options","r","OrgRolePicker","value","onChange","ariaLabel","inputId","autoFocus","restProps","val","mapDispatchToProps","connector","InviteeRow","invitee","revokeInvite","ClipboardButton","Button","InviteesTable","invitees","index","selectAll","selectById","selectTotal","selectQuery","_state","query","selectInvitesMatchingQuery","invites","searchQuery","regex","invite","loadUsers","dispatch","getState","perPage","page","sort","users","accessControl","userIds","u","fetchUsersWithDebounce","updateUser","user","removeUser","changePage","changeSort","sortBy","changeSearchQuery","getUsers","state","getUsersSearchQuery","mapStateToProps","UsersActionBar","externalUserMngLinkName","externalUserMngLinkUrl","pendingInvitesCount","onShowInvites","showInvites","showInviteButton","InlineField","FilterInput","RadioButtonGroup","UsersListPageContent","totalPages","externalUserMngInfo","rolesLoading","fetchInvitees","setShowInvites","externalUserMngInfoHtml","onRoleChange","role","onRemoveUser","onUserRolesChange","renderTable","OrgUsersTable","Alert","UsersListPage","OrgUnits","units","icon","Tooltip","Stack","unit","Content","children","ref","Box","Icon","UsersTable","showPaging","onChangePage","currentPage","fetchData","showLicensedRole","showBelongsTo","columns","Avatar","original","TextLink","row","Text","a","b","TagBadge","Tag","InteractiveTable","Pagination","extraFilters","addExtraFilters","filter","UserListAdminPageContent","fetchUsers","changeQuery","changeFilter","filters","styles","getStyles","f","FilterComponent","EmptyState","UserListAdminPage","theme","parseUserAgent","userAgent","parts","truncatePart","part","maxLength","UserAgentCell","AnonUsersDevicesTable","devices","Badge","EmptyArea","UserListAnonymousDevicesPageContent","fetchUsersAnonymousDevices","changeAnonQuery","changeAnonPage","changeAnonUserSort","UserListAnonymousDevicesPage","DashboardsListModal","email","onDismiss","dashboards","Modal","config","LoadingPlaceholder","dash","DashboardsListModalButton","translatedDashboardListModalButtonText","showModal","hideModal","DeleteUserModal","revokeAllAccess","onRevokeAccessClick","DeleteUserModalButton","translatedDeleteUserText","UserListPublicDashboardPage","TabView","PublicDashboardsTab","view","setView","Tab","TAB_PAGE_MAP","UserListPage","hasAccessToAdminUsers","hasAccessToOrgUsers","showAdminAndOrgTabs","TabsBar","disabledRoleMessage","getBasicRoleDisabled","isUserSynced","selectors","userToRemove","setUserToRemove","setRoleOptions","fetchOptions","onUserRolesUpdate","newRoles","newRole"],"sourceRoot":""}