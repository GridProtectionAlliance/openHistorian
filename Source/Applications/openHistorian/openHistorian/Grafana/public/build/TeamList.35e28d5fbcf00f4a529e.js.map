{"version":3,"file":"TeamList.35e28d5fbcf00f4a529e.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/RolePicker/TeamRolePicker.tsx","webpack://grafana/./public/app/core/components/Upgrade/ProBadge.tsx","webpack://grafana/./public/app/features/admin/utils.ts","webpack://grafana/./public/app/features/teams/TeamList.tsx","webpack://grafana/./public/app/features/teams/state/actions.ts","webpack://grafana/./public/app/features/teams/state/navModel.ts"],"sourcesContent":["import { useEffect } from 'react';\nimport { useAsyncFn } from 'react-use';\n\nimport { contextSrv } from 'app/core/core';\nimport { Role, AccessControlAction } from 'app/types';\n\nimport { RolePicker } from './RolePicker';\nimport { fetchTeamRoles, updateTeamRoles } from './api';\n\nexport interface Props {\n  teamId: number;\n  orgId?: number;\n  roleOptions: Role[];\n  disabled?: boolean;\n  roles?: Role[];\n  onApplyRoles?: (newRoles: Role[]) => void;\n  pendingRoles?: Role[];\n  /**\n   * Set whether the component should send a request with the new roles to the\n   * backend in TeamRolePicker.onRolesChange (apply=false), or call {@link onApplyRoles}\n   * with the updated list of roles (apply=true).\n   *\n   * Besides it sets the RolePickerMenu's Button title to\n   *   * `Update` in case apply equals false\n   *   * `Apply` in case apply equals true\n   *\n   * @default false\n   */\n  apply?: boolean;\n  maxWidth?: string | number;\n  width?: string | number;\n  isLoading?: boolean;\n}\n\nexport const TeamRolePicker = ({\n  teamId,\n  roleOptions,\n  disabled,\n  roles,\n  onApplyRoles,\n  pendingRoles,\n  apply = false,\n  maxWidth,\n  width,\n  isLoading,\n}: Props) => {\n  const [{ loading, value: appliedRoles = roles || [] }, getTeamRoles] = useAsyncFn(async () => {\n    try {\n      if (roles) {\n        return roles;\n      }\n      if (apply && Boolean(pendingRoles?.length)) {\n        return pendingRoles;\n      }\n\n      if (contextSrv.hasPermission(AccessControlAction.ActionTeamsRolesList) && teamId > 0) {\n        return await fetchTeamRoles(teamId);\n      }\n    } catch (e) {\n      console.error('Error loading options', e);\n    }\n    return [];\n  }, [teamId, pendingRoles, roles]);\n\n  useEffect(() => {\n    getTeamRoles();\n  }, [getTeamRoles]);\n\n  const onRolesChange = async (roles: Role[]) => {\n    if (!apply) {\n      await updateTeamRoles(roles, teamId);\n      await getTeamRoles();\n    } else if (onApplyRoles) {\n      onApplyRoles(roles);\n    }\n  };\n\n  const canUpdateRoles =\n    contextSrv.hasPermission(AccessControlAction.ActionTeamsRolesAdd) &&\n    contextSrv.hasPermission(AccessControlAction.ActionTeamsRolesRemove);\n\n  return (\n    <RolePicker\n      apply={apply}\n      onRolesChange={onRolesChange}\n      roleOptions={roleOptions}\n      appliedRoles={appliedRoles}\n      isLoading={loading || isLoading}\n      disabled={disabled}\n      basicRoleDisabled={true}\n      canUpdateRoles={canUpdateRoles}\n      maxWidth={maxWidth}\n      width={width}\n    />\n  );\n};\n","import { css, cx } from '@emotion/css';\nimport { HTMLAttributes, useEffect } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { reportExperimentView } from '@grafana/runtime';\nimport { useStyles2 } from '@grafana/ui';\n\nexport interface Props extends HTMLAttributes<HTMLSpanElement> {\n  text?: string;\n  experimentId?: string;\n  eventVariant?: string;\n}\n\nexport const ProBadge = ({ text = 'PRO', className, experimentId, eventVariant = '', ...htmlProps }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    if (experimentId) {\n      reportExperimentView(experimentId, 'test', eventVariant);\n    }\n  }, [experimentId, eventVariant]);\n\n  return (\n    <span className={cx(styles.badge, className)} {...htmlProps}>\n      {text}\n    </span>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    badge: css`\n      margin-left: ${theme.spacing(1.25)};\n      border-radius: ${theme.shape.borderRadius(5)};\n      background-color: ${theme.colors.success.main};\n      padding: ${theme.spacing(0.25, 0.75)};\n      color: white; // use the same color for both themes\n      font-weight: ${theme.typography.fontWeightMedium};\n      font-size: ${theme.typography.pxToRem(10)};\n    `,\n  };\n};\n","import { config } from '@grafana/runtime/src';\n\n// https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address\nexport const w3cStandardEmailValidator =\n  /^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n\nexport function isTrial() {\n  const expiry = config.licenseInfo?.trialExpiry;\n  return !!(expiry && expiry > 0);\n}\n\nexport const highlightTrial = () => isTrial() && config.featureToggles.featureHighlights;\n","import { css } from '@emotion/css';\nimport { useEffect, useMemo, useState } from 'react';\nimport Skeleton from 'react-loading-skeleton';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport {\n  Avatar,\n  CellProps,\n  Column,\n  DeleteButton,\n  EmptyState,\n  FilterInput,\n  InlineField,\n  InteractiveTable,\n  LinkButton,\n  Pagination,\n  Stack,\n  TextLink,\n  useStyles2,\n} from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { fetchRoleOptions } from 'app/core/components/RolePicker/api';\nimport { Trans, t } from 'app/core/internationalization';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AccessControlAction, Role, StoreState, Team } from 'app/types';\n\nimport { TeamRolePicker } from '../../core/components/RolePicker/TeamRolePicker';\n\nimport { deleteTeam, loadTeams, changePage, changeQuery, changeSort } from './state/actions';\n\ntype Cell<T extends keyof Team = keyof Team> = CellProps<Team, Team[T]>;\nexport interface OwnProps {}\n\nexport interface State {\n  roleOptions: Role[];\n}\n\n// this is dummy data to pass to the table while the real data is loading\nconst skeletonData: Team[] = new Array(3).fill(null).map((_, index) => ({\n  id: index,\n  uid: '',\n  memberCount: 0,\n  name: '',\n  orgId: 0,\n  permission: 0,\n}));\n\nexport const TeamList = ({\n  teams,\n  query,\n  noTeams,\n  hasFetched,\n  loadTeams,\n  deleteTeam,\n  changeQuery,\n  totalPages,\n  page,\n  rolesLoading,\n  changePage,\n  changeSort,\n}: Props) => {\n  const [roleOptions, setRoleOptions] = useState<Role[]>([]);\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    loadTeams(true);\n  }, [loadTeams]);\n\n  useEffect(() => {\n    if (contextSrv.licensedAccessControlEnabled() && contextSrv.hasPermission(AccessControlAction.ActionRolesList)) {\n      fetchRoleOptions().then((roles) => setRoleOptions(roles));\n    }\n  }, []);\n\n  const canCreate = contextSrv.hasPermission(AccessControlAction.ActionTeamsCreate);\n  const displayRolePicker = shouldDisplayRolePicker();\n\n  const columns: Array<Column<Team>> = useMemo(\n    () => [\n      {\n        id: 'avatarUrl',\n        header: '',\n        disableGrow: true,\n        cell: ({ cell: { value } }: Cell<'avatarUrl'>) => {\n          if (!hasFetched) {\n            return <Skeleton containerClassName={styles.blockSkeleton} width={24} height={24} circle />;\n          }\n\n          return value && <Avatar src={value} alt=\"User avatar\" />;\n        },\n      },\n      {\n        id: 'name',\n        header: 'Name',\n        cell: ({ cell: { value }, row: { original } }: Cell<'name'>) => {\n          if (!hasFetched) {\n            return <Skeleton width={100} />;\n          }\n\n          const canReadTeam = contextSrv.hasPermissionInMetadata(AccessControlAction.ActionTeamsRead, original);\n          if (!canReadTeam) {\n            return value;\n          }\n\n          return (\n            <TextLink color=\"primary\" inline={false} href={`/org/teams/edit/${original.uid}`} title=\"Edit team\">\n              {value}\n            </TextLink>\n          );\n        },\n        sortType: 'string',\n      },\n      {\n        id: 'email',\n        header: 'Email',\n        cell: ({ cell: { value } }: Cell<'email'>) => {\n          if (!hasFetched) {\n            return <Skeleton width={60} />;\n          }\n          return value;\n        },\n        sortType: 'string',\n      },\n      {\n        id: 'memberCount',\n        header: 'Members',\n        disableGrow: true,\n        cell: ({ cell: { value } }: Cell<'memberCount'>) => {\n          if (!hasFetched) {\n            return <Skeleton width={40} />;\n          }\n          return value;\n        },\n        sortType: 'number',\n      },\n      ...(displayRolePicker\n        ? [\n            {\n              id: 'role',\n              header: 'Role',\n              cell: ({ cell: { value }, row: { original } }: Cell<'memberCount'>) => {\n                if (!hasFetched) {\n                  return <Skeleton width={320} height={32} containerClassName={styles.blockSkeleton} />;\n                }\n                const canSeeTeamRoles = contextSrv.hasPermissionInMetadata(\n                  AccessControlAction.ActionTeamsRolesList,\n                  original\n                );\n                return (\n                  canSeeTeamRoles && (\n                    <TeamRolePicker\n                      teamId={original.id}\n                      roles={original.roles || []}\n                      isLoading={rolesLoading}\n                      roleOptions={roleOptions}\n                      width={40}\n                    />\n                  )\n                );\n              },\n            },\n          ]\n        : []),\n      {\n        id: 'actions',\n        header: '',\n        disableGrow: true,\n        cell: ({ row: { original } }: Cell) => {\n          if (!hasFetched) {\n            return (\n              <Stack direction=\"row\" justifyContent=\"flex-end\" alignItems=\"center\">\n                <Skeleton containerClassName={styles.blockSkeleton} width={16} height={16} />\n                <Skeleton containerClassName={styles.blockSkeleton} width={22} height={24} />\n              </Stack>\n            );\n          }\n\n          const canReadTeam = contextSrv.hasPermissionInMetadata(AccessControlAction.ActionTeamsRead, original);\n          const canDelete = contextSrv.hasPermissionInMetadata(AccessControlAction.ActionTeamsDelete, original);\n          return (\n            <Stack direction=\"row\" justifyContent=\"flex-end\" gap={2}>\n              {canReadTeam && (\n                <LinkButton\n                  href={`org/teams/edit/${original.uid}`}\n                  aria-label={`Edit team ${original.name}`}\n                  icon=\"pen\"\n                  size=\"sm\"\n                  variant=\"secondary\"\n                  tooltip={'Edit team'}\n                />\n              )}\n              <DeleteButton\n                aria-label={`Delete team ${original.name}`}\n                size=\"sm\"\n                disabled={!canDelete}\n                onConfirm={() => deleteTeam(original.uid)}\n              />\n            </Stack>\n          );\n        },\n      },\n    ],\n    [displayRolePicker, hasFetched, rolesLoading, roleOptions, deleteTeam, styles]\n  );\n\n  return (\n    <Page\n      navId=\"teams\"\n      actions={\n        !noTeams ? (\n          <LinkButton href={canCreate ? 'org/teams/new' : '#'} disabled={!canCreate}>\n            New Team\n          </LinkButton>\n        ) : undefined\n      }\n    >\n      <Page.Contents>\n        {noTeams ? (\n          <EmptyState\n            variant=\"call-to-action\"\n            button={\n              <LinkButton disabled={!canCreate} href=\"org/teams/new\" icon=\"users-alt\" size=\"lg\">\n                <Trans i18nKey=\"teams.empty-state.button-title\">New team</Trans>\n              </LinkButton>\n            }\n            message={t('teams.empty-state.title', \"You haven't created any teams yet\")}\n          >\n            <Trans i18nKey=\"teams.empty-state.pro-tip\">\n              Assign folder and dashboard permissions to teams instead of users to ease administration.{' '}\n              <TextLink external href=\"https://grafana.com/docs/grafana/latest/administration/team-management\">\n                Learn more\n              </TextLink>\n            </Trans>\n          </EmptyState>\n        ) : (\n          <>\n            <div className=\"page-action-bar\">\n              <InlineField grow>\n                <FilterInput placeholder=\"Search teams\" value={query} onChange={changeQuery} />\n              </InlineField>\n            </div>\n            {hasFetched && teams.length === 0 ? (\n              <EmptyState variant=\"not-found\" message={t('teams.empty-state.message', 'No teams found')} />\n            ) : (\n              <Stack direction={'column'} gap={2}>\n                <InteractiveTable\n                  columns={columns}\n                  data={hasFetched ? teams : skeletonData}\n                  getRowId={(team) => String(team.id)}\n                  fetchData={changeSort}\n                />\n                <Stack justifyContent=\"flex-end\">\n                  <Pagination\n                    hideWhenSinglePage\n                    currentPage={page}\n                    numberOfPages={totalPages}\n                    onNavigate={changePage}\n                  />\n                </Stack>\n              </Stack>\n            )}\n          </>\n        )}\n      </Page.Contents>\n    </Page>\n  );\n};\n\nfunction shouldDisplayRolePicker(): boolean {\n  return (\n    contextSrv.licensedAccessControlEnabled() &&\n    contextSrv.hasPermission(AccessControlAction.ActionTeamsRolesList) &&\n    contextSrv.hasPermission(AccessControlAction.ActionRolesList)\n  );\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    teams: state.teams.teams,\n    query: state.teams.query,\n    perPage: state.teams.perPage,\n    page: state.teams.page,\n    noTeams: state.teams.noTeams,\n    totalPages: state.teams.totalPages,\n    hasFetched: state.teams.hasFetched,\n    rolesLoading: state.teams.rolesLoading,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadTeams,\n  deleteTeam,\n  changePage,\n  changeQuery,\n  changeSort,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\nexport default connector(TeamList);\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  blockSkeleton: css({\n    lineHeight: 1,\n    // needed for things to align properly in the table\n    display: 'flex',\n  }),\n});\n","import { debounce } from 'lodash';\n\nimport { getBackendSrv } from '@grafana/runtime';\nimport { FetchDataArgs } from '@grafana/ui';\nimport { updateNavIndex } from 'app/core/actions';\nimport { contextSrv } from 'app/core/core';\nimport { accessControlQueryParam } from 'app/core/utils/accessControl';\nimport { AccessControlAction, Team, TeamMember, ThunkResult } from 'app/types';\n\nimport { buildNavModel } from './navModel';\nimport {\n  teamGroupsLoaded,\n  queryChanged,\n  pageChanged,\n  teamLoaded,\n  teamMembersLoaded,\n  teamsLoaded,\n  sortChanged,\n  rolesFetchBegin,\n  rolesFetchEnd,\n} from './reducers';\n\nexport function loadTeams(initial = false): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    const { query, page, perPage, sort } = getState().teams;\n    // Early return if the user cannot list teams\n    if (!contextSrv.hasPermission(AccessControlAction.ActionTeamsRead)) {\n      dispatch(teamsLoaded({ teams: [], totalCount: 0, page: 1, perPage, noTeams: true }));\n      return;\n    }\n\n    const response = await getBackendSrv().get(\n      '/api/teams/search',\n      accessControlQueryParam({ query, page, perpage: perPage, sort })\n    );\n\n    // We only want to check if there is no teams on the initial request.\n    // A query that returns no teams should not render the empty list banner.\n    let noTeams = false;\n    if (initial) {\n      noTeams = response.teams.length === 0;\n    }\n\n    if (\n      contextSrv.licensedAccessControlEnabled() &&\n      contextSrv.hasPermission(AccessControlAction.ActionTeamsRolesList)\n    ) {\n      dispatch(rolesFetchBegin());\n      const teamIds = response?.teams.map((t: Team) => t.id);\n      const roles = await getBackendSrv().post(`/api/access-control/teams/roles/search`, { teamIds });\n      response.teams.forEach((t: Team) => {\n        t.roles = roles ? roles[t.id] || [] : [];\n      });\n      dispatch(rolesFetchEnd());\n    }\n\n    dispatch(teamsLoaded({ noTeams, ...response }));\n  };\n}\n\nconst loadTeamsWithDebounce = debounce((dispatch) => dispatch(loadTeams()), 500);\n\nexport function loadTeam(uid: string): ThunkResult<Promise<void>> {\n  return async (dispatch) => {\n    const response = await getBackendSrv().get(`/api/teams/${uid}`, accessControlQueryParam());\n    dispatch(teamLoaded(response));\n    dispatch(updateNavIndex(buildNavModel(response)));\n  };\n}\n\nexport function deleteTeam(uid: string): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().delete(`/api/teams/${uid}`);\n    // Update users permissions in case they lost teams.read with the deletion\n    await contextSrv.fetchUserPermissions();\n    dispatch(loadTeams());\n  };\n}\n\nexport function changeQuery(query: string): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(queryChanged(query));\n    loadTeamsWithDebounce(dispatch);\n  };\n}\n\nexport function changePage(page: number): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(pageChanged(page));\n    dispatch(loadTeams());\n  };\n}\n\nexport function changeSort({ sortBy }: FetchDataArgs<Team>): ThunkResult<void> {\n  const sort = sortBy.length ? `${sortBy[0].id}-${sortBy[0].desc ? 'desc' : 'asc'}` : undefined;\n  return async (dispatch) => {\n    dispatch(sortChanged(sort));\n    dispatch(loadTeams());\n  };\n}\n\nexport function loadTeamMembers(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    const response = await getBackendSrv().get(`/api/teams/${team.uid}/members`);\n    dispatch(teamMembersLoaded(response));\n  };\n}\n\nexport function updateTeam(name: string, email: string): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().put(`/api/teams/${team.uid}`, { name, email });\n    dispatch(loadTeam(team.uid));\n  };\n}\n\nexport function loadTeamGroups(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    const response = await getBackendSrv().get(`/api/teams/${team.id}/groups`);\n    dispatch(teamGroupsLoaded(response));\n  };\n}\n\nexport function addTeamGroup(groupId: string): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().post(`/api/teams/${team.id}/groups`, { groupId: groupId });\n    dispatch(loadTeamGroups());\n  };\n}\n\nexport function removeTeamGroup(groupId: string): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    // need to use query parameter due to escaped characters in the request\n    await getBackendSrv().delete(`/api/teams/${team.id}/groups?groupId=${encodeURIComponent(groupId)}`);\n    dispatch(loadTeamGroups());\n  };\n}\n\nexport function updateTeamMember(member: TeamMember): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().put(`/api/teams/${member.teamId}/members/${member.userId}`, {\n      permission: member.permission,\n    });\n    dispatch(loadTeamMembers());\n  };\n}\n","import { NavModelItem, NavModel } from '@grafana/data';\nimport { featureEnabled } from '@grafana/runtime';\nimport { ProBadge } from 'app/core/components/Upgrade/ProBadge';\nimport config from 'app/core/config';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { highlightTrial } from 'app/features/admin/utils';\nimport { AccessControlAction, Team, TeamPermissionLevel } from 'app/types';\n\nconst loadingTeam = {\n  avatarUrl: 'public/img/user_profile.png',\n  id: 1,\n  uid: '',\n  name: 'Loading',\n  email: 'loading',\n  memberCount: 0,\n  permission: TeamPermissionLevel.Member,\n  accessControl: { isEditor: false },\n  orgId: 0,\n  updated: '',\n};\n\nexport function buildNavModel(team: Team): NavModelItem {\n  const navModel: NavModelItem = {\n    img: team.avatarUrl,\n    id: 'team-' + team.uid,\n    subTitle: 'Manage members and settings',\n    url: `org/teams/edit/${team.uid}`,\n    text: team.name,\n    children: [\n      // With RBAC this tab will always be available (but not always editable)\n      // With Legacy it will be hidden by hideTabsFromNonTeamAdmin should the user not be allowed to see it\n      {\n        active: false,\n        icon: 'sliders-v-alt',\n        id: `team-settings-${team.uid}`,\n        text: 'Settings',\n        url: `org/teams/edit/${team.uid}/settings`,\n      },\n    ],\n  };\n\n  // While team is loading we leave the members tab\n  // With RBAC the Members tab is available when user has ActionTeamsPermissionsRead for this team\n  // With Legacy it will always be present\n  if (\n    team === loadingTeam ||\n    contextSrv.hasPermissionInMetadata(AccessControlAction.ActionTeamsPermissionsRead, team)\n  ) {\n    navModel.children!.unshift({\n      active: false,\n      icon: 'users-alt',\n      id: `team-members-${team.uid}`,\n      text: 'Members',\n      url: `org/teams/edit/${team.uid}/members`,\n    });\n  }\n\n  const teamGroupSync: NavModelItem = {\n    active: false,\n    icon: 'sync',\n    id: `team-groupsync-${team.uid}`,\n    text: 'External group sync',\n    url: `org/teams/edit/${team.uid}/groupsync`,\n  };\n\n  const isLoadingTeam = team === loadingTeam;\n\n  if (highlightTrial()) {\n    teamGroupSync.tabSuffix = () =>\n      ProBadge({ experimentId: isLoadingTeam ? '' : 'feature-highlights-team-sync-badge', eventVariant: 'trial' });\n  }\n\n  // With both Legacy and RBAC the tab is protected being featureEnabled\n  // While team is loading we leave the teamsync tab\n  // With RBAC the External Group Sync tab is available when user has ActionTeamsPermissionsRead for this team\n  if (featureEnabled('teamsync')) {\n    if (isLoadingTeam || contextSrv.hasPermissionInMetadata(AccessControlAction.ActionTeamsPermissionsRead, team)) {\n      navModel.children!.push(teamGroupSync);\n    }\n  } else if (config.featureToggles.featureHighlights) {\n    navModel.children!.push({\n      ...teamGroupSync,\n      tabSuffix: () => ProBadge({ experimentId: isLoadingTeam ? '' : 'feature-highlights-team-sync-badge' }),\n    });\n  }\n\n  return navModel;\n}\n\nexport function getTeamLoadingNav(pageName: string): NavModel {\n  const main = buildNavModel(loadingTeam);\n\n  let node: NavModelItem;\n\n  // find active page\n  for (const child of main.children!) {\n    if (child.id!.indexOf(pageName) > 0) {\n      child.active = true;\n      node = child;\n      break;\n    }\n  }\n\n  return {\n    main: main,\n    node: node!,\n  };\n}\n"],"names":["TeamRolePicker","teamId","roleOptions","disabled","roles","onApplyRoles","pendingRoles","apply","maxWidth","width","isLoading","loading","appliedRoles","getTeamRoles","e","onRolesChange","canUpdateRoles","ProBadge","text","className","experimentId","eventVariant","htmlProps","styles","getStyles","theme","w3cStandardEmailValidator","isTrial","expiry","highlightTrial","skeletonData","_","index","TeamList","teams","query","noTeams","hasFetched","loadTeams","deleteTeam","changeQuery","totalPages","page","rolesLoading","changePage","changeSort","setRoleOptions","canCreate","displayRolePicker","shouldDisplayRolePicker","columns","value","original","canReadTeam","canDelete","team","mapStateToProps","state","mapDispatchToProps","initial","dispatch","getState","perPage","sort","response","teamIds","t","loadTeamsWithDebounce","loadTeam","uid","sortBy","loadTeamMembers","getStore","updateTeam","name","email","loadTeamGroups","addTeamGroup","groupId","removeTeamGroup","updateTeamMember","member","loadingTeam","buildNavModel","navModel","teamGroupSync","isLoadingTeam","getTeamLoadingNav","pageName","main","node","child"],"sourceRoot":""}