{"version":3,"file":"ServiceAccountsPage.0e301cb03b1496e30241.js","mappings":"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","sources":["webpack://grafana/./public/app/features/serviceaccounts/components/ServiceAccountsListItem.tsx","webpack://grafana/./public/app/features/serviceaccounts/ServiceAccountsListPage.tsx","webpack://grafana/./public/app/features/serviceaccounts/components/CreateTokenModal.tsx","webpack://grafana/./public/app/features/serviceaccounts/state/actions.ts"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React, { memo } from 'react';\n\nimport { GrafanaTheme2, OrgRole } from '@grafana/data';\nimport { Button, HorizontalGroup, Icon, IconButton, useStyles2 } from '@grafana/ui';\nimport { UserRolePicker } from 'app/core/components/RolePicker/UserRolePicker';\nimport { contextSrv } from 'app/core/core';\nimport { OrgRolePicker } from 'app/features/admin/OrgRolePicker';\nimport { AccessControlAction, Role, ServiceAccountDTO } from 'app/types';\n\ntype ServiceAccountListItemProps = {\n  serviceAccount: ServiceAccountDTO;\n  onRoleChange: (role: OrgRole, serviceAccount: ServiceAccountDTO) => void;\n  roleOptions: Role[];\n  onRemoveButtonClick: (serviceAccount: ServiceAccountDTO) => void;\n  onDisable: (serviceAccount: ServiceAccountDTO) => void;\n  onEnable: (serviceAccount: ServiceAccountDTO) => void;\n  onAddTokenClick: (serviceAccount: ServiceAccountDTO) => void;\n};\n\nconst getServiceAccountsAriaLabel = (name: string) => {\n  return `Edit service account's ${name} details`;\n};\n\nconst ServiceAccountListItem = memo(\n  ({\n    serviceAccount,\n    onRoleChange,\n    roleOptions,\n    onRemoveButtonClick,\n    onDisable,\n    onEnable,\n    onAddTokenClick,\n  }: ServiceAccountListItemProps) => {\n    const editUrl = `org/serviceaccounts/${serviceAccount.id}`;\n    const styles = useStyles2(getStyles);\n    const canUpdateRole = contextSrv.hasPermissionInMetadata(AccessControlAction.ServiceAccountsWrite, serviceAccount);\n    const displayRolePicker =\n      contextSrv.hasPermission(AccessControlAction.ActionRolesList) &&\n      contextSrv.hasPermission(AccessControlAction.ActionUserRolesList);\n\n    return (\n      <tr key={serviceAccount.id} className={cx({ [styles.disabled]: serviceAccount.isDisabled })}>\n        <td className=\"width-4 text-center link-td\">\n          <a href={editUrl} aria-label={getServiceAccountsAriaLabel(serviceAccount.name)}>\n            <img\n              className=\"filter-table__avatar\"\n              src={serviceAccount.avatarUrl}\n              alt={`Avatar for user ${serviceAccount.name}`}\n            />\n          </a>\n        </td>\n        <td className=\"link-td max-width-10\">\n          <a\n            className=\"ellipsis\"\n            href={editUrl}\n            title={serviceAccount.name}\n            aria-label={getServiceAccountsAriaLabel(serviceAccount.name)}\n          >\n            {serviceAccount.name}\n          </a>\n        </td>\n        <td className=\"link-td max-width-10\">\n          <a\n            className={styles.accountId}\n            href={editUrl}\n            title={serviceAccount.login}\n            aria-label={getServiceAccountsAriaLabel(serviceAccount.name)}\n          >\n            {serviceAccount.login}\n          </a>\n        </td>\n        {contextSrv.licensedAccessControlEnabled() ? (\n          <td>\n            {displayRolePicker && (\n              <UserRolePicker\n                userId={serviceAccount.id}\n                orgId={serviceAccount.orgId}\n                basicRole={serviceAccount.role}\n                onBasicRoleChange={(newRole) => onRoleChange(newRole, serviceAccount)}\n                roleOptions={roleOptions}\n                basicRoleDisabled={!canUpdateRole}\n                disabled={serviceAccount.isDisabled}\n              />\n            )}\n          </td>\n        ) : (\n          <td>\n            <OrgRolePicker\n              aria-label=\"Role\"\n              value={serviceAccount.role}\n              disabled={!canUpdateRole || serviceAccount.isDisabled}\n              onChange={(newRole) => onRoleChange(newRole, serviceAccount)}\n            />\n          </td>\n        )}\n        <td className=\"link-td max-width-10\">\n          <a\n            className=\"ellipsis\"\n            href={editUrl}\n            title=\"Tokens\"\n            aria-label={getServiceAccountsAriaLabel(serviceAccount.name)}\n          >\n            <div className={cx(styles.tokensInfo, { [styles.tokensInfoSecondary]: !serviceAccount.tokens })}>\n              <span>\n                <Icon name=\"key-skeleton-alt\"></Icon>\n              </span>\n              {serviceAccount.tokens || 'No tokens'}\n            </div>\n          </a>\n        </td>\n        <td>\n          <HorizontalGroup justify=\"flex-end\">\n            {contextSrv.hasPermission(AccessControlAction.ServiceAccountsWrite) && !serviceAccount.tokens && (\n              <Button onClick={() => onAddTokenClick(serviceAccount)} disabled={serviceAccount.isDisabled}>\n                Add token\n              </Button>\n            )}\n            {contextSrv.hasPermissionInMetadata(AccessControlAction.ServiceAccountsWrite, serviceAccount) &&\n              (serviceAccount.isDisabled ? (\n                <Button variant=\"primary\" onClick={() => onEnable(serviceAccount)}>\n                  Enable\n                </Button>\n              ) : (\n                <Button variant=\"secondary\" onClick={() => onDisable(serviceAccount)}>\n                  Disable\n                </Button>\n              ))}\n            {contextSrv.hasPermissionInMetadata(AccessControlAction.ServiceAccountsDelete, serviceAccount) && (\n              <IconButton\n                className={styles.deleteButton}\n                name=\"trash-alt\"\n                size=\"md\"\n                onClick={() => onRemoveButtonClick(serviceAccount)}\n                aria-label={`Delete service account ${serviceAccount.name}`}\n              />\n            )}\n          </HorizontalGroup>\n        </td>\n      </tr>\n    );\n  }\n);\nServiceAccountListItem.displayName = 'ServiceAccountListItem';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    iconRow: css`\n      svg {\n        margin-left: ${theme.spacing(0.5)};\n      }\n    `,\n    accountId: cx(\n      'ellipsis',\n      css`\n        color: ${theme.colors.text.secondary};\n      `\n    ),\n    deleteButton: css`\n      color: ${theme.colors.text.secondary};\n    `,\n    tokensInfo: css`\n      span {\n        margin-right: ${theme.spacing(1)};\n      }\n    `,\n    tokensInfoSecondary: css`\n      color: ${theme.colors.text.secondary};\n    `,\n    disabled: css`\n      td a {\n        color: ${theme.colors.text.secondary};\n      }\n    `,\n  };\n};\n\nexport default ServiceAccountListItem;\n","import { css, cx } from '@emotion/css';\nimport pluralize from 'pluralize';\nimport React, { useEffect, useState } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { GrafanaTheme2, OrgRole } from '@grafana/data';\nimport { ConfirmModal, FilterInput, Icon, LinkButton, RadioButtonGroup, Tooltip, useStyles2 } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { Page } from 'app/core/components/Page/Page';\nimport PageLoader from 'app/core/components/PageLoader/PageLoader';\nimport { contextSrv } from 'app/core/core';\nimport { StoreState, ServiceAccountDTO, AccessControlAction, ServiceAccountStateFilter } from 'app/types';\n\nimport { CreateTokenModal, ServiceAccountToken } from './components/CreateTokenModal';\nimport ServiceAccountListItem from './components/ServiceAccountsListItem';\nimport {\n  changeQuery,\n  fetchACOptions,\n  fetchServiceAccounts,\n  deleteServiceAccount,\n  updateServiceAccount,\n  changeStateFilter,\n  createServiceAccountToken,\n} from './state/actions';\n\ninterface OwnProps {}\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    ...state.serviceAccounts,\n  };\n}\n\nconst mapDispatchToProps = {\n  changeQuery,\n  fetchACOptions,\n  fetchServiceAccounts,\n  deleteServiceAccount,\n  updateServiceAccount,\n  changeStateFilter,\n  createServiceAccountToken,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport const ServiceAccountsListPageUnconnected = ({\n  serviceAccounts,\n  isLoading,\n  roleOptions,\n  query,\n  serviceAccountStateFilter,\n  changeQuery,\n  fetchACOptions,\n  fetchServiceAccounts,\n  deleteServiceAccount,\n  updateServiceAccount,\n  changeStateFilter,\n  createServiceAccountToken,\n}: Props): JSX.Element => {\n  const styles = useStyles2(getStyles);\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const [isRemoveModalOpen, setIsRemoveModalOpen] = useState(false);\n  const [isDisableModalOpen, setIsDisableModalOpen] = useState(false);\n  const [newToken, setNewToken] = useState('');\n  const [currentServiceAccount, setCurrentServiceAccount] = useState<ServiceAccountDTO | null>(null);\n\n  useEffect(() => {\n    fetchServiceAccounts({ withLoadingIndicator: true });\n    if (contextSrv.licensedAccessControlEnabled()) {\n      fetchACOptions();\n    }\n  }, [fetchACOptions, fetchServiceAccounts]);\n\n  const noServiceAccountsCreated =\n    serviceAccounts.length === 0 && serviceAccountStateFilter === ServiceAccountStateFilter.All && !query;\n\n  const onRoleChange = async (role: OrgRole, serviceAccount: ServiceAccountDTO) => {\n    const updatedServiceAccount = { ...serviceAccount, role: role };\n    updateServiceAccount(updatedServiceAccount);\n    if (contextSrv.licensedAccessControlEnabled()) {\n      fetchACOptions();\n    }\n  };\n\n  const onQueryChange = (value: string) => {\n    changeQuery(value);\n  };\n\n  const onStateFilterChange = (value: ServiceAccountStateFilter) => {\n    changeStateFilter(value);\n  };\n\n  const onRemoveButtonClick = (serviceAccount: ServiceAccountDTO) => {\n    setCurrentServiceAccount(serviceAccount);\n    setIsRemoveModalOpen(true);\n  };\n\n  const onServiceAccountRemove = async () => {\n    if (currentServiceAccount) {\n      deleteServiceAccount(currentServiceAccount.id);\n    }\n    onRemoveModalClose();\n  };\n\n  const onDisableButtonClick = (serviceAccount: ServiceAccountDTO) => {\n    setCurrentServiceAccount(serviceAccount);\n    setIsDisableModalOpen(true);\n  };\n\n  const onDisable = () => {\n    if (currentServiceAccount) {\n      updateServiceAccount({ ...currentServiceAccount, isDisabled: true });\n    }\n    onDisableModalClose();\n  };\n\n  const onEnable = (serviceAccount: ServiceAccountDTO) => {\n    updateServiceAccount({ ...serviceAccount, isDisabled: false });\n  };\n\n  const onTokenAdd = (serviceAccount: ServiceAccountDTO) => {\n    setCurrentServiceAccount(serviceAccount);\n    setIsAddModalOpen(true);\n  };\n\n  const onTokenCreate = async (token: ServiceAccountToken) => {\n    if (currentServiceAccount) {\n      createServiceAccountToken(currentServiceAccount.id, token, setNewToken);\n    }\n  };\n\n  const onAddModalClose = () => {\n    setIsAddModalOpen(false);\n    setCurrentServiceAccount(null);\n    setNewToken('');\n  };\n\n  const onRemoveModalClose = () => {\n    setIsRemoveModalOpen(false);\n    setCurrentServiceAccount(null);\n  };\n\n  const onDisableModalClose = () => {\n    setIsDisableModalOpen(false);\n    setCurrentServiceAccount(null);\n  };\n\n  const docsLink = (\n    <a\n      className=\"external-link\"\n      href=\"https://grafana.com/docs/grafana/latest/administration/service-accounts/\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      here.\n    </a>\n  );\n  const subTitle = (\n    <span>\n      Service accounts and their tokens can be used to authenticate against the Grafana API. Find out more {docsLink}\n    </span>\n  );\n\n  return (\n    <Page navId=\"serviceaccounts\" subTitle={subTitle}>\n      <Page.Contents>\n        <Page.OldNavOnly>\n          <div className={styles.pageHeader}>\n            <h2>Service accounts</h2>\n            <div className={styles.apiKeyInfoLabel}>\n              <Tooltip\n                placement=\"bottom\"\n                interactive\n                content={<>API keys are now service accounts with tokens. Find out more {docsLink}</>}\n              >\n                <Icon name=\"question-circle\" />\n              </Tooltip>\n              <span>Looking for API keys?</span>\n            </div>\n          </div>\n        </Page.OldNavOnly>\n        <div className=\"page-action-bar\">\n          <div className=\"gf-form gf-form--grow\">\n            <FilterInput\n              placeholder=\"Search service account by name\"\n              value={query}\n              onChange={onQueryChange}\n              width={50}\n            />\n          </div>\n          <RadioButtonGroup\n            options={[\n              { label: 'All', value: ServiceAccountStateFilter.All },\n              { label: 'With expired tokens', value: ServiceAccountStateFilter.WithExpiredTokens },\n              { label: 'Disabled', value: ServiceAccountStateFilter.Disabled },\n            ]}\n            onChange={onStateFilterChange}\n            value={serviceAccountStateFilter}\n            className={styles.filter}\n          />\n          {!noServiceAccountsCreated && contextSrv.hasPermission(AccessControlAction.ServiceAccountsCreate) && (\n            <LinkButton href=\"org/serviceaccounts/create\" variant=\"primary\">\n              Add service account\n            </LinkButton>\n          )}\n        </div>\n        {isLoading && <PageLoader />}\n        {!isLoading && noServiceAccountsCreated && (\n          <>\n            <EmptyListCTA\n              title=\"You haven't created any service accounts yet.\"\n              buttonIcon=\"key-skeleton-alt\"\n              buttonLink=\"org/serviceaccounts/create\"\n              buttonTitle=\"Add service account\"\n              buttonDisabled={!contextSrv.hasPermission(AccessControlAction.ServiceAccountsCreate)}\n              proTip=\"Remember, you can provide specific permissions for API access to other applications.\"\n              proTipLink=\"\"\n              proTipLinkTitle=\"\"\n              proTipTarget=\"_blank\"\n            />\n          </>\n        )}\n\n        {!isLoading && serviceAccounts.length !== 0 && (\n          <>\n            <div className={cx(styles.table, 'admin-list-table')}>\n              <table className=\"filter-table filter-table--hover\">\n                <thead>\n                  <tr>\n                    <th></th>\n                    <th>Account</th>\n                    <th>ID</th>\n                    <th>Roles</th>\n                    <th>Tokens</th>\n                    <th style={{ width: '34px' }} />\n                  </tr>\n                </thead>\n                <tbody>\n                  {serviceAccounts.map((serviceAccount: ServiceAccountDTO) => (\n                    <ServiceAccountListItem\n                      serviceAccount={serviceAccount}\n                      key={serviceAccount.id}\n                      roleOptions={roleOptions}\n                      onRoleChange={onRoleChange}\n                      onRemoveButtonClick={onRemoveButtonClick}\n                      onDisable={onDisableButtonClick}\n                      onEnable={onEnable}\n                      onAddTokenClick={onTokenAdd}\n                    />\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </>\n        )}\n        {currentServiceAccount && (\n          <>\n            <ConfirmModal\n              isOpen={isRemoveModalOpen}\n              body={`Are you sure you want to delete '${currentServiceAccount.name}'${\n                !!currentServiceAccount.tokens\n                  ? ` and ${currentServiceAccount.tokens} accompanying ${pluralize(\n                      'token',\n                      currentServiceAccount.tokens\n                    )}`\n                  : ''\n              }?`}\n              confirmText=\"Delete\"\n              title=\"Delete service account\"\n              onConfirm={onServiceAccountRemove}\n              onDismiss={onRemoveModalClose}\n            />\n            <ConfirmModal\n              isOpen={isDisableModalOpen}\n              title=\"Disable service account\"\n              body={`Are you sure you want to disable '${currentServiceAccount.name}'?`}\n              confirmText=\"Disable service account\"\n              onConfirm={onDisable}\n              onDismiss={onDisableModalClose}\n            />\n            <CreateTokenModal\n              isOpen={isAddModalOpen}\n              token={newToken}\n              serviceAccountLogin={currentServiceAccount.login}\n              onCreateToken={onTokenCreate}\n              onClose={onAddModalClose}\n            />\n          </>\n        )}\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    table: css`\n      margin-top: ${theme.spacing(3)};\n    `,\n    filter: css`\n      margin: 0 ${theme.spacing(1)};\n    `,\n    row: css`\n      display: flex;\n      align-items: center;\n      height: 100% !important;\n\n      a {\n        padding: ${theme.spacing(0.5)} 0 !important;\n      }\n    `,\n    unitTooltip: css`\n      display: flex;\n      flex-direction: column;\n    `,\n    unitItem: css`\n      cursor: pointer;\n      padding: ${theme.spacing(0.5)} 0;\n      margin-right: ${theme.spacing(1)};\n    `,\n    disabled: css`\n      color: ${theme.colors.text.disabled};\n    `,\n    link: css`\n      color: inherit;\n      cursor: pointer;\n      text-decoration: underline;\n    `,\n    pageHeader: css`\n      display: flex;\n      margin-bottom: ${theme.spacing(2)};\n    `,\n    apiKeyInfoLabel: css`\n      margin-left: ${theme.spacing(1)};\n      line-height: 2.2;\n      flex-grow: 1;\n      color: ${theme.colors.text.secondary};\n\n      span {\n        padding: ${theme.spacing(0.5)};\n      }\n    `,\n    filterDelimiter: css`\n      flex-grow: 1;\n    `,\n  };\n};\n\nconst ServiceAccountsListPage = connector(ServiceAccountsListPageUnconnected);\nexport default ServiceAccountsListPage;\n","import { css } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport {\n  Button,\n  ClipboardButton,\n  DatePickerWithInput,\n  Field,\n  Input,\n  Modal,\n  RadioButtonGroup,\n  useStyles2,\n} from '@grafana/ui';\n\nconst EXPIRATION_OPTIONS = [\n  { label: 'No expiration', value: false },\n  { label: 'Set expiration date', value: true },\n];\n\nexport type ServiceAccountToken = {\n  name: string;\n  secondsToLive?: number;\n};\n\ninterface Props {\n  isOpen: boolean;\n  token: string;\n  serviceAccountLogin: string;\n  onCreateToken: (token: ServiceAccountToken) => void;\n  onClose: () => void;\n}\n\nexport const CreateTokenModal = ({ isOpen, token, serviceAccountLogin, onCreateToken, onClose }: Props) => {\n  const tomorrow = new Date();\n  tomorrow.setDate(tomorrow.getDate() + 1);\n\n  const maxExpirationDate = new Date();\n  if (config.tokenExpirationDayLimit !== undefined && config.tokenExpirationDayLimit > -1) {\n    maxExpirationDate.setDate(maxExpirationDate.getDate() + config.tokenExpirationDayLimit + 1);\n  } else {\n    maxExpirationDate.setDate(8640000000000000);\n  }\n  const defaultExpirationDate = config.tokenExpirationDayLimit !== undefined && config.tokenExpirationDayLimit > 0;\n\n  const [defaultTokenName, setDefaultTokenName] = useState('');\n  const [newTokenName, setNewTokenName] = useState('');\n  const [isWithExpirationDate, setIsWithExpirationDate] = useState(defaultExpirationDate);\n  const [newTokenExpirationDate, setNewTokenExpirationDate] = useState<Date | string>(tomorrow);\n  const [isExpirationDateValid, setIsExpirationDateValid] = useState(newTokenExpirationDate !== '');\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    // Generate new token name every time we open modal\n    if (isOpen) {\n      setDefaultTokenName(`${serviceAccountLogin}-${uuidv4()}`);\n    }\n  }, [serviceAccountLogin, isOpen]);\n\n  const onExpirationDateChange = (value: Date | string) => {\n    const isValid = value !== '';\n    setIsExpirationDateValid(isValid);\n    setNewTokenExpirationDate(value);\n  };\n\n  const onGenerateToken = () => {\n    onCreateToken({\n      name: newTokenName || defaultTokenName,\n      secondsToLive: isWithExpirationDate ? getSecondsToLive(newTokenExpirationDate) : undefined,\n    });\n  };\n\n  const onCloseInternal = () => {\n    setNewTokenName('');\n    setDefaultTokenName('');\n    setIsWithExpirationDate(defaultExpirationDate);\n    setNewTokenExpirationDate(tomorrow);\n    setIsExpirationDateValid(newTokenExpirationDate !== '');\n    onClose();\n  };\n\n  const modalTitle = !token ? 'Add service account token' : 'Service account token created';\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={modalTitle}\n      onDismiss={onCloseInternal}\n      className={styles.modal}\n      contentClassName={styles.modalContent}\n    >\n      {!token ? (\n        <div>\n          <Field\n            label=\"Display name\"\n            description=\"Name to easily identify the token\"\n            // for now this is required\n            // need to make this optional in backend as well\n            required={true}\n          >\n            <Input\n              name=\"tokenName\"\n              value={newTokenName}\n              placeholder={defaultTokenName}\n              onChange={(e) => {\n                setNewTokenName(e.currentTarget.value);\n              }}\n            />\n          </Field>\n          {!isWithExpirationDate && (\n            <Field label=\"Expiration\">\n              <RadioButtonGroup\n                options={EXPIRATION_OPTIONS}\n                value={isWithExpirationDate}\n                onChange={setIsWithExpirationDate}\n                size=\"md\"\n              />\n            </Field>\n          )}\n          {isWithExpirationDate && (\n            <Field label=\"Expiration date\">\n              <DatePickerWithInput\n                onChange={onExpirationDateChange}\n                value={newTokenExpirationDate}\n                placeholder=\"\"\n                minDate={tomorrow}\n                maxDate={maxExpirationDate}\n              />\n            </Field>\n          )}\n          <Modal.ButtonRow>\n            <Button onClick={onGenerateToken} disabled={isWithExpirationDate && !isExpirationDateValid}>\n              Generate token\n            </Button>\n          </Modal.ButtonRow>\n        </div>\n      ) : (\n        <>\n          <Field\n            label=\"Token\"\n            description=\"Copy the token now as you will not be able to see it again. Losing a token requires creating a new one.\"\n          >\n            <div className={styles.modalTokenRow}>\n              <Input name=\"tokenValue\" value={token} readOnly />\n              <ClipboardButton\n                className={styles.modalCopyToClipboardButton}\n                variant=\"primary\"\n                size=\"md\"\n                icon=\"copy\"\n                getText={() => token}\n              >\n                Copy clipboard\n              </ClipboardButton>\n            </div>\n          </Field>\n          <Modal.ButtonRow>\n            <ClipboardButton variant=\"primary\" getText={() => token} onClipboardCopy={onCloseInternal}>\n              Copy to clipboard and close\n            </ClipboardButton>\n            <Button variant=\"secondary\" onClick={onCloseInternal}>\n              Close\n            </Button>\n          </Modal.ButtonRow>\n        </>\n      )}\n    </Modal>\n  );\n};\n\nconst getSecondsToLive = (date: Date | string) => {\n  const dateAsDate = new Date(date);\n  const now = new Date();\n\n  return Math.ceil((dateAsDate.getTime() - now.getTime()) / 1000);\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    modal: css`\n      width: 550px;\n    `,\n    modalContent: css`\n      overflow: visible;\n    `,\n    modalTokenRow: css`\n      display: flex;\n    `,\n    modalCopyToClipboardButton: css`\n      margin-left: ${theme.spacing(0.5)};\n    `,\n  };\n};\n","import { debounce } from 'lodash';\n\nimport { getBackendSrv } from '@grafana/runtime';\nimport { fetchRoleOptions } from 'app/core/components/RolePicker/api';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AccessControlAction, ServiceAccountDTO, ServiceAccountStateFilter, ThunkResult } from 'app/types';\n\nimport { ServiceAccountToken } from '../components/CreateTokenModal';\n\nimport {\n  acOptionsLoaded,\n  pageChanged,\n  queryChanged,\n  serviceAccountsFetchBegin,\n  serviceAccountsFetched,\n  serviceAccountsFetchEnd,\n  stateFilterChanged,\n} from './reducers';\n\nconst BASE_URL = `/api/serviceaccounts`;\n\nexport function fetchACOptions(): ThunkResult<void> {\n  return async (dispatch) => {\n    try {\n      if (contextSrv.licensedAccessControlEnabled() && contextSrv.hasPermission(AccessControlAction.ActionRolesList)) {\n        const options = await fetchRoleOptions();\n        dispatch(acOptionsLoaded(options));\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n}\n\ninterface FetchServiceAccountsParams {\n  withLoadingIndicator: boolean;\n}\n\nexport function fetchServiceAccounts(\n  { withLoadingIndicator }: FetchServiceAccountsParams = { withLoadingIndicator: false }\n): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    try {\n      if (contextSrv.hasPermission(AccessControlAction.ServiceAccountsRead)) {\n        if (withLoadingIndicator) {\n          dispatch(serviceAccountsFetchBegin());\n        }\n        const { perPage, page, query, serviceAccountStateFilter } = getState().serviceAccounts;\n        const result = await getBackendSrv().get(\n          `/api/serviceaccounts/search?perpage=${perPage}&page=${page}&query=${query}${getStateFilter(\n            serviceAccountStateFilter\n          )}&accesscontrol=true`\n        );\n        dispatch(serviceAccountsFetched(result));\n      }\n    } catch (error) {\n      console.error(error);\n    } finally {\n      dispatch(serviceAccountsFetchEnd());\n    }\n  };\n}\n\nconst fetchServiceAccountsWithDebounce = debounce((dispatch) => dispatch(fetchServiceAccounts()), 500, {\n  leading: true,\n});\n\nexport function updateServiceAccount(serviceAccount: ServiceAccountDTO): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().patch(`${BASE_URL}/${serviceAccount.id}?accesscontrol=true`, {\n      ...serviceAccount,\n    });\n    dispatch(fetchServiceAccounts());\n  };\n}\n\nexport function deleteServiceAccount(serviceAccountId: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().delete(`${BASE_URL}/${serviceAccountId}`);\n    dispatch(fetchServiceAccounts());\n  };\n}\n\nexport function createServiceAccountToken(\n  saID: number,\n  token: ServiceAccountToken,\n  onTokenCreated: (key: string) => void\n): ThunkResult<void> {\n  return async (dispatch) => {\n    const result = await getBackendSrv().post(`${BASE_URL}/${saID}/tokens`, token);\n    onTokenCreated(result.key);\n    dispatch(fetchServiceAccounts());\n  };\n}\n\n// search / filtering of serviceAccounts\nconst getStateFilter = (value: ServiceAccountStateFilter) => {\n  switch (value) {\n    case ServiceAccountStateFilter.WithExpiredTokens:\n      return '&expiredTokens=true';\n    case ServiceAccountStateFilter.Disabled:\n      return '&disabled=true';\n    default:\n      return '';\n  }\n};\n\nexport function changeQuery(query: string): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(queryChanged(query));\n    fetchServiceAccountsWithDebounce(dispatch);\n  };\n}\n\nexport function changeStateFilter(filter: ServiceAccountStateFilter): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(stateFilterChanged(filter));\n    dispatch(fetchServiceAccounts());\n  };\n}\n\nexport function changePage(page: number): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(pageChanged(page));\n    dispatch(fetchServiceAccounts());\n  };\n}\n"],"names":["getServiceAccountsAriaLabel","name","ServiceAccountListItem","serviceAccount","onRoleChange","roleOptions","onRemoveButtonClick","onDisable","onEnable","onAddTokenClick","editUrl","styles","getStyles","canUpdateRole","displayRolePicker","UserRolePicker","newRole","OrgRolePicker","Icon","Button","IconButton","theme","mapStateToProps","state","mapDispatchToProps","connector","ServiceAccountsListPageUnconnected","serviceAccounts","isLoading","query","serviceAccountStateFilter","changeQuery","fetchACOptions","fetchServiceAccounts","deleteServiceAccount","updateServiceAccount","changeStateFilter","createServiceAccountToken","isAddModalOpen","setIsAddModalOpen","isRemoveModalOpen","setIsRemoveModalOpen","isDisableModalOpen","setIsDisableModalOpen","newToken","setNewToken","currentServiceAccount","setCurrentServiceAccount","noServiceAccountsCreated","role","updatedServiceAccount","onQueryChange","value","onStateFilterChange","onServiceAccountRemove","onRemoveModalClose","onDisableButtonClick","onDisableModalClose","onTokenAdd","onTokenCreate","token","onAddModalClose","docsLink","subTitle","Page","Tooltip","FilterInput","RadioButtonGroup","PageLoader","EmptyListCTA","ConfirmModal","CreateTokenModal","EXPIRATION_OPTIONS","isOpen","serviceAccountLogin","onCreateToken","onClose","tomorrow","maxExpirationDate","defaultExpirationDate","defaultTokenName","setDefaultTokenName","newTokenName","setNewTokenName","isWithExpirationDate","setIsWithExpirationDate","newTokenExpirationDate","setNewTokenExpirationDate","isExpirationDateValid","setIsExpirationDateValid","onExpirationDateChange","onGenerateToken","getSecondsToLive","onCloseInternal","modalTitle","e","date","dateAsDate","now","BASE_URL","dispatch","options","error","withLoadingIndicator","getState","perPage","page","result","getStateFilter","fetchServiceAccountsWithDebounce","serviceAccountId","saID","onTokenCreated","filter","changePage"],"sourceRoot":""}