{"version":3,"file":"ApiKeysPage.617916b08ac4590b3b38.js","mappings":"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","sources":["webpack://grafana/./public/app/features/api-keys/APIKeysMigratedCard.tsx","webpack://grafana/./public/app/features/api-keys/ApiKeysActionBar.tsx","webpack://grafana/./public/app/features/api-keys/ApiKeysAddedModal.tsx","webpack://grafana/./public/app/features/api-keys/ApiKeysController.tsx","webpack://grafana/./public/app/features/api-keys/ApiKeysForm.tsx","webpack://grafana/./public/app/features/api-keys/ApiKeysTable.tsx","webpack://grafana/./public/app/features/api-keys/MigrateToServiceAccountsCard.tsx","webpack://grafana/./public/app/features/api-keys/state/actions.ts","webpack://grafana/./public/app/features/api-keys/state/selectors.ts","webpack://grafana/./public/app/features/api-keys/ApiKeysPage.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, ConfirmModal, useStyles2, Button } from '@grafana/ui';\n\ninterface Props {\n  onHideApiKeys: () => void;\n}\n\nexport const APIKeysMigratedCard = ({ onHideApiKeys }: Props): JSX.Element => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Alert title=\"API keys were migrated to Grafana service accounts. This tab is deprecated.\" severity=\"info\">\n      <div className={styles.text}>\n        We have migrated API keys into Grafana service accounts. All API keys are safe and continue working as they used\n        to, you can find them inside the respective service account.\n      </div>\n      <div className={styles.actionRow}>\n        <Button className={styles.actionButton} onClick={() => setIsModalOpen(true)}>\n          Hide API keys page forever\n        </Button>\n        <ConfirmModal\n          title={'Hide API Keys page forever'}\n          isOpen={isModalOpen}\n          body={'Are you sure you want to hide API keys page forever and use service accounts from now on?'}\n          confirmText={'Yes, hide API keys page.'}\n          onConfirm={onHideApiKeys}\n          onDismiss={() => setIsModalOpen(false)}\n        />\n        <a href=\"org/serviceaccounts\">View service accounts page</a>\n      </div>\n    </Alert>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  text: css`\n    margin-bottom: ${theme.spacing(2)};\n  `,\n  actionRow: css`\n    display: flex;\n    align-items: center;\n  `,\n  actionButton: css`\n    margin-right: ${theme.spacing(2)};\n  `,\n});\n","import React, { FC } from 'react';\n\nimport { Button, FilterInput } from '@grafana/ui';\n\ninterface Props {\n  searchQuery: string;\n  disabled: boolean;\n  onAddClick: () => void;\n  onSearchChange: (value: string) => void;\n}\n\nexport const ApiKeysActionBar: FC<Props> = ({ searchQuery, disabled, onAddClick, onSearchChange }) => {\n  return (\n    <div className=\"page-action-bar\">\n      <div className=\"gf-form gf-form--grow\">\n        <FilterInput placeholder=\"Search keys\" value={searchQuery} onChange={onSearchChange} />\n      </div>\n      <Button className=\"pull-right\" onClick={onAddClick} disabled={disabled}>\n        Add API key\n      </Button>\n    </div>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { useCallback } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Field, Modal, useStyles2, Input, ClipboardButton } from '@grafana/ui';\n\nexport interface Props {\n  onDismiss: () => void;\n  apiKey: string;\n  rootPath: string;\n}\n\nexport function ApiKeysAddedModal({ onDismiss, apiKey, rootPath }: Props): JSX.Element {\n  const styles = useStyles2(getStyles);\n  const getClipboardText = useCallback(() => apiKey, [apiKey]);\n\n  return (\n    <Modal title=\"API Key Created\" onDismiss={onDismiss} onClickBackdrop={onDismiss} isOpen>\n      <Field label=\"Key\">\n        <Input\n          id=\"Key\"\n          value={apiKey}\n          readOnly\n          addonAfter={\n            <ClipboardButton icon=\"copy\" variant=\"primary\" getText={getClipboardText}>\n              Copy\n            </ClipboardButton>\n          }\n        />\n      </Field>\n      <Alert severity=\"info\" title=\"You will only be able to view this key here once!\">\n        It is not stored in this form, so be sure to copy it now.\n      </Alert>\n\n      <p className=\"text-muted\">You can authenticate a request using the Authorization HTTP header, example:</p>\n      <pre className={styles.small}>\n        curl -H &quot;Authorization: Bearer {apiKey}&quot; {rootPath}/api/dashboards/home\n      </pre>\n    </Modal>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    label: css`\n      padding: ${theme.spacing(1)};\n      background-color: ${theme.colors.background.secondary};\n      border-radius: ${theme.shape.borderRadius()};\n    `,\n    small: css`\n      font-size: ${theme.typography.bodySmall.fontSize};\n      font-weight: ${theme.typography.bodySmall.fontWeight};\n    `,\n  };\n}\n","import { FC, useCallback, useState } from 'react';\n\ninterface Api {\n  isAdding: boolean;\n  toggleIsAdding: () => void;\n}\n\ninterface Props {\n  children: (props: Api) => JSX.Element;\n}\n\nexport const ApiKeysController: FC<Props> = ({ children }) => {\n  const [isAdding, setIsAdding] = useState<boolean>(false);\n  const toggleIsAdding = useCallback(() => {\n    setIsAdding(!isAdding);\n  }, [isAdding]);\n\n  return children({ isAdding, toggleIsAdding });\n};\n","import React, { ChangeEvent, FC, FormEvent, useEffect, useState } from 'react';\n\nimport { rangeUtil, SelectableValue } from '@grafana/data';\nimport { EventsWithValidation, LegacyForms, ValidationEvents, Button, Select, InlineField } from '@grafana/ui';\nimport { CloseButton } from 'app/core/components/CloseButton/CloseButton';\n\nimport { SlideDown } from '../../core/components/Animations/SlideDown';\nimport { NewApiKey, OrgRole } from '../../types';\n\nconst { Input } = LegacyForms;\nconst ROLE_OPTIONS: Array<SelectableValue<OrgRole>> = Object.keys(OrgRole).map((role) => ({\n  label: role,\n  value: role as OrgRole,\n}));\n\ninterface Props {\n  show: boolean;\n  onClose: () => void;\n  onKeyAdded: (apiKey: NewApiKey) => void;\n  disabled: boolean;\n}\n\nfunction isValidInterval(value: string): boolean {\n  if (!value) {\n    return true;\n  }\n  try {\n    rangeUtil.intervalToSeconds(value);\n    return true;\n  } catch {}\n  return false;\n}\n\nconst timeRangeValidationEvents: ValidationEvents = {\n  [EventsWithValidation.onBlur]: [\n    {\n      rule: isValidInterval,\n      errorMessage: 'Not a valid duration',\n    },\n  ],\n};\n\nconst tooltipText =\n  'The API key life duration. For example, 1d if your key is going to last for one day. Supported units are: s,m,h,d,w,M,y';\n\nexport const ApiKeysForm: FC<Props> = ({ show, onClose, onKeyAdded, disabled }) => {\n  const [name, setName] = useState<string>('');\n  const [role, setRole] = useState<OrgRole>(OrgRole.Viewer);\n  const [secondsToLive, setSecondsToLive] = useState<string>('');\n  useEffect(() => {\n    setName('');\n    setRole(OrgRole.Viewer);\n    setSecondsToLive('');\n  }, [show]);\n\n  const onSubmit = (event: FormEvent) => {\n    event.preventDefault();\n    if (isValidInterval(secondsToLive)) {\n      onKeyAdded({ name, role, secondsToLive });\n      onClose();\n    }\n  };\n  const onNameChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setName(event.currentTarget.value);\n  };\n  const onRoleChange = (role: SelectableValue<OrgRole>) => {\n    setRole(role.value!);\n  };\n  const onSecondsToLiveChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setSecondsToLive(event.currentTarget.value);\n  };\n\n  return (\n    <SlideDown in={show}>\n      <div className=\"gf-form-inline cta-form\">\n        <CloseButton onClick={onClose} />\n        <form className=\"gf-form-group\" onSubmit={onSubmit}>\n          <h5>Add API Key</h5>\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form max-width-21\">\n              <span className=\"gf-form-label\">Key name</span>\n              <Input type=\"text\" className=\"gf-form-input\" value={name} placeholder=\"Name\" onChange={onNameChange} />\n            </div>\n            <div className=\"gf-form\">\n              <InlineField label=\"Role\">\n                <Select inputId=\"role-select\" value={role} onChange={onRoleChange} options={ROLE_OPTIONS} />\n              </InlineField>\n            </div>\n            <div className=\"gf-form max-width-21\">\n              <InlineField tooltip={tooltipText} label=\"Time to live\">\n                <Input\n                  id=\"time-to-live-input\"\n                  type=\"text\"\n                  placeholder=\"1d\"\n                  validationEvents={timeRangeValidationEvents}\n                  value={secondsToLive}\n                  onChange={onSecondsToLiveChange}\n                />\n              </InlineField>\n            </div>\n            <div className=\"gf-form\">\n              <Button type=\"submit\" disabled={disabled}>\n                Add\n              </Button>\n            </div>\n          </div>\n        </form>\n      </div>\n    </SlideDown>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { FC } from 'react';\n\nimport { dateTimeFormat, GrafanaTheme2, TimeZone } from '@grafana/data';\nimport { Button, DeleteButton, HorizontalGroup, Icon, IconName, Tooltip, useTheme2 } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction } from 'app/types';\n\nimport { ApiKey } from '../../types';\n\ninterface Props {\n  apiKeys: ApiKey[];\n  timeZone: TimeZone;\n  onDelete: (apiKey: ApiKey) => void;\n  onMigrate: (apiKey: ApiKey) => void;\n}\n\nexport const ApiKeysTable: FC<Props> = ({ apiKeys, timeZone, onDelete, onMigrate }) => {\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n\n  return (\n    <table className=\"filter-table\">\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Role</th>\n          <th>Expires</th>\n          <th style={{ width: '34px' }} />\n        </tr>\n      </thead>\n      {apiKeys.length > 0 ? (\n        <tbody>\n          {apiKeys.map((key) => {\n            const isExpired = Boolean(key.expiration && Date.now() > new Date(key.expiration).getTime());\n            return (\n              <tr key={key.id} className={styles.tableRow(isExpired)}>\n                <td>{key.name}</td>\n                <td>{key.role}</td>\n                <td>\n                  {formatDate(key.expiration, timeZone)}\n                  {isExpired && (\n                    <span className={styles.tooltipContainer}>\n                      <Tooltip content=\"This API key has expired.\">\n                        <Icon name={'exclamation-triangle' as IconName} />\n                      </Tooltip>\n                    </span>\n                  )}\n                </td>\n                <td>\n                  <HorizontalGroup justify=\"flex-end\">\n                    <Button size=\"sm\" onClick={() => onMigrate(key)}>\n                      Migrate to service account\n                    </Button>\n                    <DeleteButton\n                      aria-label=\"Delete API key\"\n                      size=\"sm\"\n                      onConfirm={() => onDelete(key)}\n                      disabled={!contextSrv.hasPermissionInMetadata(AccessControlAction.ActionAPIKeysDelete, key)}\n                    />\n                  </HorizontalGroup>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      ) : null}\n    </table>\n  );\n};\n\nfunction formatDate(expiration: string | undefined, timeZone: TimeZone): string {\n  if (!expiration) {\n    return 'No expiration date';\n  }\n  return dateTimeFormat(expiration, { timeZone });\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  tableRow: (isExpired: boolean) => css`\n    color: ${isExpired ? theme.colors.text.secondary : theme.colors.text.primary};\n  `,\n  tooltipContainer: css`\n    margin-left: ${theme.spacing(1)};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Button, ConfirmModal, useStyles2 } from '@grafana/ui';\n\ninterface Props {\n  onMigrate: () => void;\n  disabled?: boolean;\n}\n\nexport const MigrateToServiceAccountsCard = ({ onMigrate, disabled }: Props): JSX.Element => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const styles = useStyles2(getStyles);\n\n  const docsLink = (\n    <a\n      className=\"external-link\"\n      href=\"https://grafana.com/docs/grafana/latest/administration/api-keys/#migrate-api-keys-to-grafana-service-accounts/\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      here.\n    </a>\n  );\n  const migrationBoxDesc = (\n    <span>Are you sure you want to migrate all API keys to service accounts? Find out more {docsLink}</span>\n  );\n\n  return (\n    <Alert title=\"Switch from API keys to service accounts\" severity=\"info\">\n      <div className={styles.text}>\n        Each API key will be automatically migrated into a service account with a token. The service account will be\n        created with the same permission as the API Key and current API Keys will continue to work as they were.\n      </div>\n      <div className={styles.actionRow}>\n        <Button className={styles.actionButton} onClick={() => setIsModalOpen(true)}>\n          Migrate to service accounts now\n        </Button>\n        <ConfirmModal\n          title={'Migrate API keys to service accounts'}\n          isOpen={isModalOpen}\n          body={migrationBoxDesc}\n          confirmText={'Yes, migrate now'}\n          onConfirm={onMigrate}\n          onDismiss={() => setIsModalOpen(false)}\n        />\n      </div>\n    </Alert>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  text: css`\n    margin-bottom: ${theme.spacing(2)};\n  `,\n  actionRow: css`\n    display: flex;\n    align-items: center;\n  `,\n  actionButton: css`\n    margin-right: ${theme.spacing(2)};\n  `,\n});\n","import { getBackendSrv } from 'app/core/services/backend_srv';\nimport store from 'app/core/store';\nimport { API_KEYS_MIGRATION_INFO_STORAGE_KEY } from 'app/features/serviceaccounts/constants';\nimport { ApiKey, ThunkResult } from 'app/types';\n\nimport {\n  apiKeysLoaded,\n  includeExpiredToggled,\n  isFetching,\n  apiKeysMigrationStatusLoaded,\n  setSearchQuery,\n} from './reducers';\n\nexport function addApiKey(apiKey: ApiKey, openModal: (key: string) => void): ThunkResult<void> {\n  return async (dispatch) => {\n    const result = await getBackendSrv().post('/api/auth/keys', apiKey);\n    dispatch(setSearchQuery(''));\n    dispatch(loadApiKeys());\n    openModal(result.key);\n  };\n}\n\nexport function loadApiKeys(): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(isFetching());\n    const [keys, keysIncludingExpired] = await Promise.all([\n      getBackendSrv().get('/api/auth/keys?includeExpired=false&accesscontrol=true'),\n      getBackendSrv().get('/api/auth/keys?includeExpired=true&accesscontrol=true'),\n    ]);\n    dispatch(apiKeysLoaded({ keys, keysIncludingExpired }));\n  };\n}\n\nexport function deleteApiKey(id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    getBackendSrv()\n      .delete(`/api/auth/keys/${id}`)\n      .then(() => dispatch(loadApiKeys()));\n  };\n}\n\nexport function migrateApiKey(id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    try {\n      await getBackendSrv().post(`/api/serviceaccounts/migrate/${id}`);\n    } finally {\n      dispatch(loadApiKeys());\n    }\n  };\n}\n\nexport function migrateAll(): ThunkResult<void> {\n  return async (dispatch) => {\n    try {\n      await getBackendSrv().post('/api/serviceaccounts/migrate');\n      store.set(API_KEYS_MIGRATION_INFO_STORAGE_KEY, true);\n    } finally {\n      dispatch(getApiKeysMigrationStatus());\n      dispatch(loadApiKeys());\n    }\n  };\n}\n\nexport function getApiKeysMigrationStatus(): ThunkResult<void> {\n  return async (dispatch) => {\n    const result = await getBackendSrv().get('/api/serviceaccounts/migrationstatus');\n    dispatch(apiKeysMigrationStatusLoaded(!!result?.migrated));\n  };\n}\n\nexport function hideApiKeys(): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().post('/api/serviceaccounts/hideApiKeys');\n  };\n}\n\nexport function toggleIncludeExpired(): ThunkResult<void> {\n  return (dispatch) => {\n    dispatch(includeExpiredToggled());\n  };\n}\n","import { ApiKeysState } from 'app/types';\n\nexport const getApiKeysCount = (state: ApiKeysState) =>\n  state.includeExpired ? state.keysIncludingExpired.length : state.keys.length;\n\nexport const getApiKeys = (state: ApiKeysState) => {\n  const regex = RegExp(state.searchQuery, 'i');\n  const keysToFilter = state.includeExpired ? state.keysIncludingExpired : state.keys;\n\n  return keysToFilter.filter((key) => {\n    return regex.test(key.name) || regex.test(key.role);\n  });\n};\n\nexport const getIncludeExpired = (state: ApiKeysState) => state.includeExpired;\n\nexport const getIncludeExpiredDisabled = (state: ApiKeysState) =>\n  state.keys.length === 0 && state.keysIncludingExpired.length > 0;\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\n// Utils\nimport { rangeUtil } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { InlineField, InlineSwitch, VerticalGroup } from '@grafana/ui';\nimport appEvents from 'app/core/app_events';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { Page } from 'app/core/components/Page/Page';\nimport config from 'app/core/config';\nimport { contextSrv } from 'app/core/core';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { getTimeZone } from 'app/features/profile/state/selectors';\nimport { AccessControlAction, ApiKey, NewApiKey, StoreState } from 'app/types';\nimport { ShowModalReactEvent } from 'app/types/events';\n\nimport { APIKeysMigratedCard } from './APIKeysMigratedCard';\nimport { ApiKeysActionBar } from './ApiKeysActionBar';\nimport { ApiKeysAddedModal } from './ApiKeysAddedModal';\nimport { ApiKeysController } from './ApiKeysController';\nimport { ApiKeysForm } from './ApiKeysForm';\nimport { ApiKeysTable } from './ApiKeysTable';\nimport { MigrateToServiceAccountsCard } from './MigrateToServiceAccountsCard';\nimport {\n  addApiKey,\n  deleteApiKey,\n  migrateApiKey,\n  migrateAll,\n  loadApiKeys,\n  toggleIncludeExpired,\n  getApiKeysMigrationStatus,\n  hideApiKeys,\n} from './state/actions';\nimport { setSearchQuery } from './state/reducers';\nimport { getApiKeys, getApiKeysCount, getIncludeExpired, getIncludeExpiredDisabled } from './state/selectors';\n\nfunction mapStateToProps(state: StoreState) {\n  const canCreate = contextSrv.hasAccess(AccessControlAction.ActionAPIKeysCreate, true);\n\n  return {\n    navModel: getNavModel(state.navIndex, 'apikeys'),\n    apiKeys: getApiKeys(state.apiKeys),\n    searchQuery: state.apiKeys.searchQuery,\n    apiKeysCount: getApiKeysCount(state.apiKeys),\n    hasFetched: state.apiKeys.hasFetched,\n    timeZone: getTimeZone(state.user),\n    includeExpired: getIncludeExpired(state.apiKeys),\n    includeExpiredDisabled: getIncludeExpiredDisabled(state.apiKeys),\n    canCreate: canCreate,\n    apiKeysMigrated: state.apiKeys.apiKeysMigrated,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadApiKeys,\n  deleteApiKey,\n  migrateApiKey,\n  migrateAll,\n  setSearchQuery,\n  toggleIncludeExpired,\n  addApiKey,\n  getApiKeysMigrationStatus,\n  hideApiKeys,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ninterface OwnProps {}\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\ninterface State {\n  isAdding: boolean;\n}\n\nexport class ApiKeysPageUnconnected extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    this.fetchApiKeys();\n    this.props.getApiKeysMigrationStatus();\n  }\n\n  async fetchApiKeys() {\n    await this.props.loadApiKeys();\n  }\n\n  onDeleteApiKey = (key: ApiKey) => {\n    this.props.deleteApiKey(key.id!);\n  };\n\n  onMigrateAll = () => {\n    this.props.migrateAll();\n  };\n\n  onMigrateApiKey = (key: ApiKey) => {\n    this.props.migrateApiKey(key.id!);\n  };\n\n  onSearchQueryChange = (value: string) => {\n    this.props.setSearchQuery(value);\n  };\n\n  onIncludeExpiredChange = (event: React.SyntheticEvent<HTMLInputElement>) => {\n    this.props.toggleIncludeExpired();\n  };\n\n  onAddApiKey = (newApiKey: NewApiKey) => {\n    const openModal = (apiKey: string) => {\n      const rootPath = window.location.origin + config.appSubUrl;\n\n      appEvents.publish(\n        new ShowModalReactEvent({\n          props: {\n            apiKey,\n            rootPath,\n          },\n          component: ApiKeysAddedModal,\n        })\n      );\n    };\n\n    const secondsToLive = newApiKey.secondsToLive;\n    try {\n      const secondsToLiveAsNumber = secondsToLive ? rangeUtil.intervalToSeconds(secondsToLive) : null;\n      const apiKey: ApiKey = {\n        ...newApiKey,\n        secondsToLive: secondsToLiveAsNumber,\n      };\n      this.props.addApiKey(apiKey, openModal);\n      this.setState((prevState: State) => {\n        return {\n          ...prevState,\n          isAdding: false,\n        };\n      });\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  onHideApiKeys = async () => {\n    try {\n      await this.props.hideApiKeys();\n      let serviceAccountsUrl = '/org/serviceaccounts';\n      locationService.push(serviceAccountsUrl);\n      window.location.reload();\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  render() {\n    const {\n      hasFetched,\n      navModel,\n      apiKeysCount,\n      apiKeys,\n      searchQuery,\n      timeZone,\n      includeExpired,\n      includeExpiredDisabled,\n      canCreate,\n      apiKeysMigrated,\n    } = this.props;\n\n    if (!hasFetched) {\n      return (\n        <Page navModel={navModel}>\n          <Page.Contents isLoading={true}>{}</Page.Contents>\n        </Page>\n      );\n    }\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={false}>\n          <ApiKeysController>\n            {({ isAdding, toggleIsAdding }) => {\n              const showCTA = !isAdding && apiKeysCount === 0 && !apiKeysMigrated;\n              const showTable = apiKeysCount > 0;\n              return (\n                <>\n                  {!apiKeysMigrated && <MigrateToServiceAccountsCard onMigrate={this.onMigrateAll} />}\n                  {apiKeysMigrated && <APIKeysMigratedCard onHideApiKeys={this.onHideApiKeys} />}\n                  {showCTA ? (\n                    <EmptyListCTA\n                      title=\"You haven't added any API keys yet.\"\n                      buttonIcon=\"key-skeleton-alt\"\n                      onClick={toggleIsAdding}\n                      buttonTitle=\"New API key\"\n                      proTip=\"Remember, you can provide view-only API access to other applications.\"\n                      buttonDisabled={!canCreate}\n                    />\n                  ) : null}\n                  {showTable ? (\n                    <ApiKeysActionBar\n                      searchQuery={searchQuery}\n                      disabled={isAdding || !canCreate}\n                      onAddClick={toggleIsAdding}\n                      onSearchChange={this.onSearchQueryChange}\n                    />\n                  ) : null}\n                  <ApiKeysForm\n                    show={isAdding}\n                    onClose={toggleIsAdding}\n                    onKeyAdded={this.onAddApiKey}\n                    disabled={!canCreate}\n                  />\n                  {showTable ? (\n                    <VerticalGroup>\n                      <InlineField disabled={includeExpiredDisabled} label=\"Include expired keys\">\n                        <InlineSwitch id=\"showExpired\" value={includeExpired} onChange={this.onIncludeExpiredChange} />\n                      </InlineField>\n                      <ApiKeysTable\n                        apiKeys={apiKeys}\n                        timeZone={timeZone}\n                        onMigrate={this.onMigrateApiKey}\n                        onDelete={this.onDeleteApiKey}\n                      />\n                    </VerticalGroup>\n                  ) : null}\n                </>\n              );\n            }}\n          </ApiKeysController>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nconst ApiKeysPage = connector(ApiKeysPageUnconnected);\nexport default ApiKeysPage;\n"],"names":["APIKeysMigratedCard","onHideApiKeys","isModalOpen","setIsModalOpen","useState","styles","useStyles2","getStyles","Alert","title","severity","className","text","actionRow","Button","actionButton","onClick","ConfirmModal","isOpen","body","confirmText","onConfirm","onDismiss","href","theme","css","spacing","ApiKeysActionBar","searchQuery","disabled","onAddClick","onSearchChange","FilterInput","placeholder","value","onChange","ApiKeysAddedModal","apiKey","rootPath","getClipboardText","useCallback","Modal","onClickBackdrop","Field","label","Input","id","readOnly","addonAfter","ClipboardButton","icon","variant","getText","small","colors","background","secondary","shape","borderRadius","typography","bodySmall","fontSize","fontWeight","ApiKeysController","children","isAdding","setIsAdding","toggleIsAdding","LegacyForms","ROLE_OPTIONS","Object","keys","OrgRole","map","role","isValidInterval","rangeUtil","timeRangeValidationEvents","EventsWithValidation","rule","errorMessage","ApiKeysForm","show","onClose","onKeyAdded","name","setName","setRole","secondsToLive","setSecondsToLive","useEffect","SlideDown","in","CloseButton","onSubmit","event","preventDefault","type","currentTarget","InlineField","Select","inputId","options","tooltip","validationEvents","ApiKeysTable","apiKeys","timeZone","onDelete","onMigrate","useTheme2","style","width","length","key","isExpired","Boolean","expiration","Date","now","getTime","tableRow","formatDate","tooltipContainer","Tooltip","content","Icon","HorizontalGroup","justify","size","DeleteButton","contextSrv","AccessControlAction","dateTimeFormat","primary","MigrateToServiceAccountsCard","docsLink","target","rel","migrationBoxDesc","loadApiKeys","async","dispatch","isFetching","keysIncludingExpired","Promise","all","getBackendSrv","get","apiKeysLoaded","getApiKeysMigrationStatus","result","apiKeysMigrationStatusLoaded","migrated","getApiKeysCount","state","includeExpired","getApiKeys","regex","RegExp","filter","test","getIncludeExpired","getIncludeExpiredDisabled","mapDispatchToProps","deleteApiKey","delete","then","migrateApiKey","post","migrateAll","store","API_KEYS_MIGRATION_INFO_STORAGE_KEY","setSearchQuery","toggleIncludeExpired","includeExpiredToggled","addApiKey","openModal","hideApiKeys","connector","connect","canCreate","navModel","getNavModel","navIndex","apiKeysCount","hasFetched","getTimeZone","user","includeExpiredDisabled","apiKeysMigrated","ApiKeysPageUnconnected","PureComponent","constructor","props","super","this","newApiKey","window","location","origin","config","appEvents","ShowModalReactEvent","component","secondsToLiveAsNumber","setState","prevState","err","console","error","serviceAccountsUrl","locationService","reload","componentDidMount","fetchApiKeys","render","Page","isLoading","showCTA","showTable","onMigrateAll","EmptyListCTA","buttonIcon","buttonTitle","proTip","buttonDisabled","onSearchQueryChange","onAddApiKey","VerticalGroup","InlineSwitch","onIncludeExpiredChange","onMigrateApiKey","onDeleteApiKey"],"sourceRoot":""}