{"version":3,"file":"UserListAdminPage.6107917083499a789562.js","mappings":"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","sources":["webpack://grafana/./public/app/features/admin/UserListAdminPage.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React, { ComponentType, useEffect, useMemo, memo } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport {\n  Icon,\n  IconName,\n  LinkButton,\n  Pagination,\n  RadioButtonGroup,\n  Tooltip,\n  useStyles2,\n  FilterInput,\n} from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { TagBadge } from 'app/core/components/TagFilter/TagBadge';\nimport { contextSrv } from 'app/core/core';\n\nimport PageLoader from '../../core/components/PageLoader/PageLoader';\nimport { getNavModel } from '../../core/selectors/navModel';\nimport { AccessControlAction, StoreState, Unit, UserDTO, UserFilter } from '../../types';\n\nimport { changeFilter, changePage, changeQuery, fetchUsers } from './state/actions';\n\nexport interface FilterProps {\n  filters: UserFilter[];\n  onChange: (filter: any) => void;\n  className?: string;\n}\nconst extraFilters: Array<ComponentType<FilterProps>> = [];\nexport const addExtraFilters = (filter: ComponentType<FilterProps>) => {\n  extraFilters.push(filter);\n};\n\nconst mapDispatchToProps = {\n  fetchUsers,\n  changeQuery,\n  changePage,\n  changeFilter,\n};\n\nconst mapStateToProps = (state: StoreState) => ({\n  navModel: getNavModel(state.navIndex, 'global-users'),\n  users: state.userListAdmin.users,\n  query: state.userListAdmin.query,\n  showPaging: state.userListAdmin.showPaging,\n  totalPages: state.userListAdmin.totalPages,\n  page: state.userListAdmin.page,\n  filters: state.userListAdmin.filters,\n  isLoading: state.userListAdmin.isLoading,\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ninterface OwnProps {}\n\ntype Props = OwnProps & ConnectedProps<typeof connector>;\n\nconst UserListAdminPageUnConnected: React.FC<Props> = ({\n  fetchUsers,\n  navModel,\n  query,\n  changeQuery,\n  users,\n  showPaging,\n  totalPages,\n  page,\n  changePage,\n  changeFilter,\n  filters,\n  isLoading,\n}) => {\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    fetchUsers();\n  }, [fetchUsers]);\n\n  const showLicensedRole = useMemo(() => users.some((user) => user.licensedRole), [users]);\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        <div className=\"page-action-bar\">\n          <div className=\"gf-form gf-form--grow\">\n            <FilterInput\n              placeholder=\"Search user by login, email, or name.\"\n              autoFocus={true}\n              value={query}\n              onChange={changeQuery}\n            />\n            <RadioButtonGroup\n              options={[\n                { label: 'All users', value: false },\n                { label: 'Active last 30 days', value: true },\n              ]}\n              onChange={(value) => changeFilter({ name: 'activeLast30Days', value })}\n              value={filters.find((f) => f.name === 'activeLast30Days')?.value}\n              className={styles.filter}\n            />\n            {extraFilters.map((FilterComponent, index) => (\n              <FilterComponent key={index} filters={filters} onChange={changeFilter} className={styles.filter} />\n            ))}\n          </div>\n          {contextSrv.hasPermission(AccessControlAction.UsersCreate) && (\n            <LinkButton href=\"admin/users/create\" variant=\"primary\">\n              New user\n            </LinkButton>\n          )}\n        </div>\n        {isLoading ? (\n          <PageLoader />\n        ) : (\n          <>\n            <div className={cx(styles.table, 'admin-list-table')}>\n              <table className=\"filter-table form-inline filter-table--hover\">\n                <thead>\n                  <tr>\n                    <th></th>\n                    <th>Login</th>\n                    <th>Email</th>\n                    <th>Name</th>\n                    <th>Belongs to</th>\n                    {showLicensedRole && (\n                      <th>\n                        Licensed role{' '}\n                        <Tooltip\n                          placement=\"top\"\n                          content={\n                            <>\n                              Licensed role is based on a user&apos;s Org role (i.e. Viewer, Editor, Admin) and their\n                              dashboard/folder permissions.{' '}\n                              <a\n                                className={styles.link}\n                                target=\"_blank\"\n                                rel=\"noreferrer noopener\"\n                                href={\n                                  'https://grafana.com/docs/grafana/next/enterprise/license/license-restrictions/#active-users-limit'\n                                }\n                              >\n                                Learn more\n                              </a>\n                            </>\n                          }\n                        >\n                          <Icon name=\"question-circle\" />\n                        </Tooltip>\n                      </th>\n                    )}\n                    <th>\n                      Last active&nbsp;\n                      <Tooltip placement=\"top\" content=\"Time since user was seen using Grafana\">\n                        <Icon name=\"question-circle\" />\n                      </Tooltip>\n                    </th>\n                    <th style={{ width: '1%' }}></th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {users.map((user) => (\n                    <UserListItem user={user} showLicensedRole={showLicensedRole} key={user.id} />\n                  ))}\n                </tbody>\n              </table>\n            </div>\n            {showPaging && <Pagination numberOfPages={totalPages} currentPage={page} onNavigate={changePage} />}\n          </>\n        )}\n      </Page.Contents>\n    </Page>\n  );\n};\n\nconst getUsersAriaLabel = (name: string) => {\n  return `Edit user's ${name} details`;\n};\n\ntype UserListItemProps = {\n  user: UserDTO;\n  showLicensedRole: boolean;\n};\n\nconst UserListItem = memo(({ user, showLicensedRole }: UserListItemProps) => {\n  const styles = useStyles2(getStyles);\n  const editUrl = `admin/users/edit/${user.id}`;\n\n  return (\n    <tr key={user.id}>\n      <td className=\"width-4 text-center link-td\">\n        <a href={editUrl} aria-label={`Edit user's ${user.name} details`}>\n          <img className=\"filter-table__avatar\" src={user.avatarUrl} alt={`Avatar for user ${user.name}`} />\n        </a>\n      </td>\n      <td className=\"link-td max-width-10\">\n        <a className=\"ellipsis\" href={editUrl} title={user.login} aria-label={getUsersAriaLabel(user.name)}>\n          {user.login}\n        </a>\n      </td>\n      <td className=\"link-td max-width-10\">\n        <a className=\"ellipsis\" href={editUrl} title={user.email} aria-label={getUsersAriaLabel(user.name)}>\n          {user.email}\n        </a>\n      </td>\n      <td className=\"link-td max-width-10\">\n        <a className=\"ellipsis\" href={editUrl} title={user.name} aria-label={getUsersAriaLabel(user.name)}>\n          {user.name}\n        </a>\n      </td>\n\n      <td\n        className={styles.row}\n        title={\n          user.orgs?.length\n            ? `The user is a member of the following organizations: ${user.orgs.map((org) => org.name).join(',')}`\n            : undefined\n        }\n      >\n        <OrgUnits units={user.orgs} icon={'building'} />\n        {user.isAdmin && (\n          <a href={editUrl} aria-label={getUsersAriaLabel(user.name)}>\n            <Tooltip placement=\"top\" content=\"Grafana Admin\">\n              <Icon name=\"shield\" />\n            </Tooltip>\n          </a>\n        )}\n      </td>\n      {showLicensedRole && (\n        <td className={cx('link-td', styles.iconRow)}>\n          <a className=\"ellipsis\" href={editUrl} title={user.name} aria-label={getUsersAriaLabel(user.name)}>\n            {user.licensedRole === 'None' ? (\n              <span className={styles.disabled}>\n                Not assigned{' '}\n                <Tooltip placement=\"top\" content=\"A licensed role will be assigned when this user signs in\">\n                  <Icon name=\"question-circle\" />\n                </Tooltip>\n              </span>\n            ) : (\n              user.licensedRole\n            )}\n          </a>\n        </td>\n      )}\n      <td className=\"link-td\">\n        {user.lastSeenAtAge && (\n          <a\n            href={editUrl}\n            aria-label={`Last seen at ${user.lastSeenAtAge}. Follow to edit user's ${user.name} details.`}\n          >\n            {user.lastSeenAtAge === '10 years' ? <span className={styles.disabled}>Never</span> : user.lastSeenAtAge}\n          </a>\n        )}\n      </td>\n      <td className=\"text-right\">\n        {Array.isArray(user.authLabels) && user.authLabels.length > 0 && (\n          <TagBadge label={user.authLabels[0]} removeIcon={false} count={0} />\n        )}\n      </td>\n      <td className=\"text-right\">\n        {user.isDisabled && <span className=\"label label-tag label-tag--gray\">Disabled</span>}\n      </td>\n    </tr>\n  );\n});\n\nUserListItem.displayName = 'UserListItem';\n\ntype OrgUnitProps = { units?: Unit[]; icon: IconName };\n\nconst OrgUnits = ({ units, icon }: OrgUnitProps) => {\n  const styles = useStyles2(getStyles);\n\n  if (!units?.length) {\n    return null;\n  }\n\n  return units.length > 1 ? (\n    <Tooltip\n      placement={'top'}\n      content={\n        <div className={styles.unitTooltip}>\n          {units?.map((unit) => (\n            <a\n              href={unit.url}\n              className={styles.link}\n              title={unit.name}\n              key={unit.name}\n              aria-label={`Edit ${unit.name}`}\n            >\n              {unit.name}\n            </a>\n          ))}\n        </div>\n      }\n    >\n      <div className={styles.unitItem}>\n        <Icon name={icon} /> <span>{units.length}</span>\n      </div>\n    </Tooltip>\n  ) : (\n    <a\n      href={units[0].url}\n      className={styles.unitItem}\n      title={units[0].name}\n      key={units[0].name}\n      aria-label={`Edit ${units[0].name}`}\n    >\n      <Icon name={icon} /> {units[0].name}\n    </a>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    table: css`\n      margin-top: ${theme.spacing(3)};\n    `,\n    filter: css`\n      margin: 0 ${theme.spacing(1)};\n    `,\n    iconRow: css`\n      svg {\n        margin-left: ${theme.spacing(0.5)};\n      }\n    `,\n    row: css`\n      display: flex;\n      align-items: center;\n      height: 100% !important;\n\n      a {\n        padding: ${theme.spacing(0.5)} 0 !important;\n      }\n    `,\n    unitTooltip: css`\n      display: flex;\n      flex-direction: column;\n    `,\n    unitItem: css`\n      cursor: pointer;\n      padding: ${theme.spacing(0.5)} 0;\n      margin-right: ${theme.spacing(1)};\n    `,\n    disabled: css`\n      color: ${theme.colors.text.disabled};\n    `,\n    link: css`\n      color: inherit;\n      cursor: pointer;\n      text-decoration: underline;\n    `,\n  };\n};\n\nexport default connector(UserListAdminPageUnConnected);\n"],"names":["extraFilters","addExtraFilters","filter","push","mapDispatchToProps","fetchUsers","changeQuery","changePage","changeFilter","connector","connect","state","navModel","getNavModel","navIndex","users","userListAdmin","query","showPaging","totalPages","page","filters","isLoading","getUsersAriaLabel","name","UserListItem","memo","user","showLicensedRole","styles","useStyles2","getStyles","editUrl","id","className","href","src","avatarUrl","alt","title","login","email","row","orgs","length","map","org","join","undefined","OrgUnits","units","icon","isAdmin","Tooltip","placement","content","Icon","cx","iconRow","licensedRole","disabled","lastSeenAtAge","Array","isArray","authLabels","label","removeIcon","count","isDisabled","displayName","unitTooltip","unit","url","link","unitItem","theme","table","css","spacing","colors","text","useEffect","useMemo","some","FilterInput","placeholder","autoFocus","value","onChange","RadioButtonGroup","options","find","f","FilterComponent","index","contextSrv","AccessControlAction","LinkButton","variant","target","rel","style","width","Pagination","numberOfPages","currentPage","onNavigate"],"sourceRoot":""}