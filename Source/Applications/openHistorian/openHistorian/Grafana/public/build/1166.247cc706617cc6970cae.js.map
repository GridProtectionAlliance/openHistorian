{"version":3,"file":"1166.247cc706617cc6970cae.js","mappings":"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","sources":["webpack://grafana/./public/app/features/explore/Logs/utils/logs.ts","webpack://grafana/./public/app/features/logs/components/LoadingIndicator.tsx","webpack://grafana/./public/app/features/logs/components/LogLabels.tsx","webpack://grafana/./public/app/features/logs/components/LogMessageAnsi.tsx","webpack://grafana/./public/app/features/logs/components/LogRowMenuCell.tsx","webpack://grafana/./public/app/features/logs/components/LogRowMessage.tsx","webpack://grafana/./public/app/features/explore/Logs/PopoverMenu.tsx","webpack://grafana/./public/app/features/logs/UniqueKeyMaker.ts","webpack://grafana/./public/app/features/logs/components/LogLabelStatsRow.tsx","webpack://grafana/./public/app/features/logs/components/LogLabelStats.tsx","webpack://grafana/./public/app/features/logs/components/LogDetailsRow.tsx","webpack://grafana/./public/app/features/logs/components/LogDetails.tsx","webpack://grafana/./public/app/features/logs/components/LogRowMessageDisplayedFields.tsx","webpack://grafana/./public/app/features/logs/components/LogRow.tsx","webpack://grafana/./public/app/features/logs/components/LogRows.tsx","webpack://grafana/./public/app/features/logs/components/getLogRowStyles.ts","webpack://grafana/./public/app/features/logs/components/log-context/LogContextButtons.tsx","webpack://grafana/./public/app/features/logs/components/log-context/LogRowContextModal.tsx"],"sourcesContent":["export const SETTINGS_KEYS = {\n  showLabels: 'grafana.explore.logs.showLabels',\n  showTime: 'grafana.explore.logs.showTime',\n  wrapLogMessage: 'grafana.explore.logs.wrapLogMessage',\n  prettifyLogMessage: 'grafana.explore.logs.prettifyLogMessage',\n  logsSortOrder: 'grafana.explore.logs.sortOrder',\n  logContextWrapLogMessage: 'grafana.explore.logs.logContext.wrapLogMessage',\n};\n\nexport const visualisationTypeKey = 'grafana.explore.logs.visualisationType';\n","import { css } from '@emotion/css';\n\nimport { Spinner } from '@grafana/ui';\n\n// ideally we'd use `@grafana/ui/LoadingPlaceholder`, but that\n// one has a large margin-bottom.\ntype Props = {\n  adjective?: string;\n};\n\nexport const LoadingIndicator = ({ adjective = 'newer' }: Props) => {\n  const text = `Loading ${adjective} logs...`;\n  return (\n    <div className={loadingIndicatorStyles}>\n      <div>\n        {text} <Spinner inline />\n      </div>\n    </div>\n  );\n};\n\nconst loadingIndicatorStyles = css`\n  display: flex;\n  justify-content: center;\n`;\n","import { css, cx } from '@emotion/css';\nimport { memo, forwardRef, useMemo } from 'react';\n\nimport { GrafanaTheme2, Labels } from '@grafana/data';\nimport { Tooltip, useStyles2 } from '@grafana/ui';\n\n// Levels are already encoded in color, filename is a Loki-ism\nconst HIDDEN_LABELS = ['detected_level', 'level', 'lvl', 'filename'];\n\ninterface Props {\n  labels: Labels;\n  emptyMessage?: string;\n}\n\nexport const LogLabels = memo(({ labels, emptyMessage }: Props) => {\n  const styles = useStyles2(getStyles);\n  const displayLabels = useMemo(\n    () =>\n      Object.keys(labels)\n        .filter((label) => !label.startsWith('_') && !HIDDEN_LABELS.includes(label))\n        .sort(),\n    [labels]\n  );\n\n  if (displayLabels.length === 0 && emptyMessage) {\n    return (\n      <span className={cx([styles.logsLabels])}>\n        <span className={cx([styles.logsLabel])}>{emptyMessage}</span>\n      </span>\n    );\n  }\n\n  return (\n    <span className={cx([styles.logsLabels])}>\n      {displayLabels.map((label) => {\n        const value = labels[label];\n        if (!value) {\n          return;\n        }\n        const labelValue = `${label}=${value}`;\n        return (\n          <Tooltip content={labelValue} key={label} placement=\"top\">\n            <LogLabel styles={styles}>{labelValue}</LogLabel>\n          </Tooltip>\n        );\n      })}\n    </span>\n  );\n});\nLogLabels.displayName = 'LogLabels';\n\ninterface LogLabelsArrayProps {\n  labels: string[];\n}\n\nexport const LogLabelsList = memo(({ labels }: LogLabelsArrayProps) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <span className={cx([styles.logsLabels])}>\n      {labels.map((label) => (\n        <LogLabel key={label} styles={styles} tooltip={label}>\n          {label}\n        </LogLabel>\n      ))}\n    </span>\n  );\n});\nLogLabelsList.displayName = 'LogLabelsList';\n\ninterface LogLabelProps {\n  styles: Record<string, string>;\n  tooltip?: string;\n  children: JSX.Element | string;\n}\n\nconst LogLabel = forwardRef<HTMLSpanElement, LogLabelProps>(({ styles, tooltip, children }: LogLabelProps, ref) => {\n  return (\n    <span className={cx([styles.logsLabel])} ref={ref}>\n      <span className={cx([styles.logsLabelValue])} title={tooltip}>\n        {children}\n      </span>\n    </span>\n  );\n});\nLogLabel.displayName = 'LogLabel';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    logsLabels: css`\n      display: flex;\n      flex-wrap: wrap;\n      font-size: ${theme.typography.size.xs};\n    `,\n    logsLabel: css`\n      label: logs-label;\n      display: flex;\n      padding: ${theme.spacing(0, 0.25)};\n      background-color: ${theme.colors.background.secondary};\n      border-radius: ${theme.shape.radius.default};\n      margin: ${theme.spacing(0.125, 0.5, 0, 0)};\n      text-overflow: ellipsis;\n      white-space: nowrap;\n      overflow: hidden;\n    `,\n    logsLabelValue: css`\n      label: logs-label__value;\n      display: inline-block;\n      max-width: ${theme.spacing(25)};\n      text-overflow: ellipsis;\n      overflow: hidden;\n    `,\n  };\n};\n","import ansicolor from 'ansicolor';\nimport { PureComponent } from 'react';\nimport Highlighter from 'react-highlight-words';\n\nimport { findHighlightChunksInText, GrafanaTheme2 } from '@grafana/data';\nimport { withTheme2, Themeable2 } from '@grafana/ui';\n\ninterface Style {\n  [key: string]: string;\n}\n\ninterface ParsedChunk {\n  style: Style;\n  text: string;\n}\n\nfunction convertCSSToStyle(theme: GrafanaTheme2, css: string): Style {\n  return css.split(/;\\s*/).reduce<Style>((accumulated, line) => {\n    // The ansicolor package returns this color if the chunk has the ANSI dim\n    // style (`\\e[2m`), but it is nearly unreadable in the dark theme, so we use\n    // GrafanaTheme2 instead to style it in a way that works across all themes.\n    if (line === 'color:rgba(0,0,0,0.5)') {\n      return { color: theme.colors.text.secondary };\n    }\n\n    const match = line.match(/([^:\\s]+)\\s*:\\s*(.+)/);\n\n    if (match && match[1] && match[2]) {\n      const key = match[1].replace(/-([a-z])/g, (_, character) => character.toUpperCase());\n      accumulated[key] = match[2];\n    }\n\n    return accumulated;\n  }, {});\n}\n\ninterface Props extends Themeable2 {\n  value: string;\n  highlight?: {\n    searchWords: string[];\n    highlightClassName: string;\n  };\n}\n\ninterface State {\n  chunks: ParsedChunk[];\n  prevValue: string;\n}\n\nexport class UnThemedLogMessageAnsi extends PureComponent<Props, State> {\n  state: State = {\n    chunks: [],\n    prevValue: '',\n  };\n\n  static getDerivedStateFromProps(props: Props, state: State) {\n    if (props.value === state.prevValue) {\n      return null;\n    }\n\n    const parsed = ansicolor.parse(props.value);\n\n    return {\n      chunks: parsed.spans.map((span) => {\n        return span.css\n          ? {\n              style: convertCSSToStyle(props.theme, span.css),\n              text: span.text,\n            }\n          : { text: span.text };\n      }),\n      prevValue: props.value,\n    };\n  }\n\n  render() {\n    const { chunks } = this.state;\n\n    return chunks.map((chunk, index) => {\n      const chunkText = this.props.highlight?.searchWords ? (\n        <Highlighter\n          key={index}\n          textToHighlight={chunk.text}\n          searchWords={this.props.highlight.searchWords}\n          findChunks={findHighlightChunksInText}\n          highlightClassName={this.props.highlight.highlightClassName}\n        />\n      ) : (\n        chunk.text\n      );\n      return chunk.style ? (\n        <span key={index} style={chunk.style} data-testid=\"ansiLogLine\">\n          {chunkText}\n        </span>\n      ) : (\n        chunkText\n      );\n    });\n  }\n}\n\nexport const LogMessageAnsi = withTheme2(UnThemedLogMessageAnsi);\nLogMessageAnsi.displayName = 'LogMessageAnsi';\n","import { memo, FocusEvent, SyntheticEvent, useCallback } from 'react';\n\nimport { LogRowContextOptions, LogRowModel, getDefaultTimeRange, locationUtil, urlUtil } from '@grafana/data';\nimport { DataQuery } from '@grafana/schema';\nimport { ClipboardButton, IconButton, PopoverContent } from '@grafana/ui';\nimport { getConfig } from 'app/core/config';\n\nimport { LogRowStyles } from './getLogRowStyles';\n\ninterface Props {\n  logText: string;\n  row: LogRowModel;\n  showContextToggle?: (row: LogRowModel) => boolean;\n  onOpenContext: (row: LogRowModel) => void;\n  getRowContextQuery?: (\n    row: LogRowModel,\n    options?: LogRowContextOptions,\n    cacheFilters?: boolean\n  ) => Promise<DataQuery | null>;\n  onPermalinkClick?: (row: LogRowModel) => Promise<void>;\n  onPinLine?: (row: LogRowModel) => void;\n  onUnpinLine?: (row: LogRowModel) => void;\n  pinLineButtonTooltipTitle?: PopoverContent;\n  pinned?: boolean;\n  styles: LogRowStyles;\n  mouseIsOver: boolean;\n  onBlur: () => void;\n  onPinToContentOutlineClick?: (row: LogRowModel, onOpenContext: (row: LogRowModel) => void) => void;\n}\n\nexport const LogRowMenuCell = memo(\n  ({\n    logText,\n    onOpenContext,\n    onPermalinkClick,\n    onPinLine,\n    onUnpinLine,\n    pinLineButtonTooltipTitle,\n    pinned,\n    row,\n    showContextToggle,\n    styles,\n    mouseIsOver,\n    onBlur,\n    getRowContextQuery,\n  }: Props) => {\n    const shouldShowContextToggle = showContextToggle ? showContextToggle(row) : false;\n    const onLogRowClick = useCallback((e: SyntheticEvent) => {\n      e.stopPropagation();\n    }, []);\n    const onShowContextClick = useCallback(\n      async (event: SyntheticEvent<HTMLButtonElement, MouseEvent>) => {\n        event.stopPropagation();\n        // if ctrl or meta key is pressed, open query in new Explore tab\n        if (\n          getRowContextQuery &&\n          (event.nativeEvent.ctrlKey || event.nativeEvent.metaKey || event.nativeEvent.shiftKey)\n        ) {\n          const win = window.open('about:blank');\n          // for this request we don't want to use the cached filters from a context provider, but always want to refetch and clear\n          const query = await getRowContextQuery(row, undefined, false);\n          if (query && win) {\n            const url = urlUtil.renderUrl(locationUtil.assureBaseUrl(`${getConfig().appSubUrl}explore`), {\n              left: JSON.stringify({\n                datasource: query.datasource,\n                queries: [query],\n                range: getDefaultTimeRange(),\n              }),\n            });\n            win.location = url;\n\n            return;\n          }\n          win?.close();\n        }\n        onOpenContext(row);\n      },\n      [onOpenContext, getRowContextQuery, row]\n    );\n    /**\n     * For better accessibility support, we listen to the onBlur event here (to hide this component), and\n     * to onFocus in LogRow (to show this component).\n     */\n    const handleBlur = useCallback(\n      (e: FocusEvent) => {\n        if (!e.currentTarget.contains(e.relatedTarget) && onBlur) {\n          onBlur();\n        }\n      },\n      [onBlur]\n    );\n    const getLogText = useCallback(() => logText, [logText]);\n    return (\n      // We keep this click listener here to prevent the row from being selected when clicking on the menu.\n      // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions\n      <span className={`log-row-menu ${styles.rowMenu}`} onClick={onLogRowClick} onBlur={handleBlur}>\n        {pinned && !mouseIsOver && (\n          <IconButton\n            className={styles.unPinButton}\n            size=\"md\"\n            name=\"gf-pin\"\n            onClick={() => onUnpinLine && onUnpinLine(row)}\n            tooltip=\"Unpin line\"\n            tooltipPlacement=\"top\"\n            aria-label=\"Unpin line\"\n            tabIndex={0}\n          />\n        )}\n        {mouseIsOver && (\n          <>\n            {shouldShowContextToggle && (\n              <IconButton\n                size=\"md\"\n                name=\"gf-show-context\"\n                onClick={onShowContextClick}\n                tooltip=\"Show context\"\n                tooltipPlacement=\"top\"\n                aria-label=\"Show context\"\n                tabIndex={0}\n              />\n            )}\n            <ClipboardButton\n              className={styles.copyLogButton}\n              icon=\"copy\"\n              variant=\"secondary\"\n              fill=\"text\"\n              size=\"md\"\n              getText={getLogText}\n              tooltip=\"Copy to clipboard\"\n              tooltipPlacement=\"top\"\n              tabIndex={0}\n            />\n            {pinned && onUnpinLine && (\n              <IconButton\n                className={styles.unPinButton}\n                size=\"md\"\n                name=\"gf-pin\"\n                onClick={() => onUnpinLine && onUnpinLine(row)}\n                tooltip=\"Unpin line\"\n                tooltipPlacement=\"top\"\n                aria-label=\"Unpin line\"\n                tabIndex={0}\n              />\n            )}\n            {!pinned && onPinLine && (\n              <IconButton\n                className={styles.unPinButton}\n                size=\"md\"\n                name=\"gf-pin\"\n                onClick={() => onPinLine && onPinLine(row)}\n                tooltip={pinLineButtonTooltipTitle ?? 'Pin line'}\n                tooltipPlacement=\"top\"\n                aria-label=\"Pin line\"\n                tabIndex={0}\n              />\n            )}\n            {onPermalinkClick && row.rowId !== undefined && row.uid && (\n              <IconButton\n                tooltip=\"Copy shortlink\"\n                aria-label=\"Copy shortlink\"\n                tooltipPlacement=\"top\"\n                size=\"md\"\n                name=\"share-alt\"\n                onClick={() => onPermalinkClick(row)}\n                tabIndex={0}\n              />\n            )}\n          </>\n        )}\n      </span>\n    );\n  }\n);\n\nLogRowMenuCell.displayName = 'LogRowMenuCell';\n","import { memo, useMemo } from 'react';\nimport Highlighter from 'react-highlight-words';\n\nimport { CoreApp, findHighlightChunksInText, LogRowContextOptions, LogRowModel } from '@grafana/data';\nimport { DataQuery } from '@grafana/schema';\nimport { PopoverContent } from '@grafana/ui';\n\nimport { LogMessageAnsi } from './LogMessageAnsi';\nimport { LogRowMenuCell } from './LogRowMenuCell';\nimport { LogRowStyles } from './getLogRowStyles';\n\nexport const MAX_CHARACTERS = 100000;\n\ninterface Props {\n  row: LogRowModel;\n  wrapLogMessage: boolean;\n  prettifyLogMessage: boolean;\n  app?: CoreApp;\n  showContextToggle?: (row: LogRowModel) => boolean;\n  onOpenContext: (row: LogRowModel) => void;\n  getRowContextQuery?: (\n    row: LogRowModel,\n    options?: LogRowContextOptions,\n    cacheFilters?: boolean\n  ) => Promise<DataQuery | null>;\n  onPermalinkClick?: (row: LogRowModel) => Promise<void>;\n  onPinLine?: (row: LogRowModel) => void;\n  onUnpinLine?: (row: LogRowModel) => void;\n  pinLineButtonTooltipTitle?: PopoverContent;\n  pinned?: boolean;\n  styles: LogRowStyles;\n  mouseIsOver: boolean;\n  onBlur: () => void;\n  expanded?: boolean;\n}\n\ninterface LogMessageProps {\n  hasAnsi: boolean;\n  entry: string;\n  highlights: string[] | undefined;\n  styles: LogRowStyles;\n}\n\nconst LogMessage = ({ hasAnsi, entry, highlights, styles }: LogMessageProps) => {\n  const needsHighlighter =\n    highlights && highlights.length > 0 && highlights[0] && highlights[0].length > 0 && entry.length < MAX_CHARACTERS;\n  const searchWords = highlights ?? [];\n  if (hasAnsi) {\n    const highlight = needsHighlighter ? { searchWords, highlightClassName: styles.logsRowMatchHighLight } : undefined;\n    return <LogMessageAnsi value={entry} highlight={highlight} />;\n  } else if (needsHighlighter) {\n    return (\n      <Highlighter\n        textToHighlight={entry}\n        searchWords={searchWords}\n        findChunks={findHighlightChunksInText}\n        highlightClassName={styles.logsRowMatchHighLight}\n      />\n    );\n  }\n  return <>{entry}</>;\n};\n\nconst restructureLog = (\n  line: string,\n  prettifyLogMessage: boolean,\n  wrapLogMessage: boolean,\n  expanded: boolean\n): string => {\n  if (prettifyLogMessage) {\n    try {\n      return JSON.stringify(JSON.parse(line), undefined, 2);\n    } catch (error) {}\n  }\n  // With wrapping disabled, we want to turn it into a single-line log entry unless the line is expanded\n  if (!wrapLogMessage && !expanded) {\n    line = line.replace(/(\\r\\n|\\n|\\r)/g, '');\n  }\n  return line;\n};\n\nexport const LogRowMessage = memo((props: Props) => {\n  const {\n    row,\n    wrapLogMessage,\n    prettifyLogMessage,\n    showContextToggle,\n    styles,\n    onOpenContext,\n    onPermalinkClick,\n    onUnpinLine,\n    onPinLine,\n    pinLineButtonTooltipTitle,\n    pinned,\n    mouseIsOver,\n    onBlur,\n    getRowContextQuery,\n    expanded,\n  } = props;\n  const { hasAnsi, raw } = row;\n  const restructuredEntry = useMemo(\n    () => restructureLog(raw, prettifyLogMessage, wrapLogMessage, Boolean(expanded)),\n    [raw, prettifyLogMessage, wrapLogMessage, expanded]\n  );\n  const shouldShowMenu = useMemo(() => mouseIsOver || pinned, [mouseIsOver, pinned]);\n  return (\n    <>\n      {\n        // When context is open, the position has to be NOT relative. // Setting the postion as inline-style to\n        // overwrite the more sepecific style definition from `styles.logsRowMessage`.\n      }\n      <td className={styles.logsRowMessage}>\n        <div className={wrapLogMessage ? styles.positionRelative : styles.horizontalScroll}>\n          <button className={`${styles.logLine} ${styles.positionRelative}`}>\n            <LogMessage hasAnsi={hasAnsi} entry={restructuredEntry} highlights={row.searchWords} styles={styles} />\n          </button>\n        </div>\n      </td>\n      <td className={`log-row-menu-cell ${styles.logRowMenuCell}`}>\n        {shouldShowMenu && (\n          <LogRowMenuCell\n            logText={restructuredEntry}\n            row={row}\n            showContextToggle={showContextToggle}\n            getRowContextQuery={getRowContextQuery}\n            onOpenContext={onOpenContext}\n            onPermalinkClick={onPermalinkClick}\n            onPinLine={onPinLine}\n            onUnpinLine={onUnpinLine}\n            pinLineButtonTooltipTitle={pinLineButtonTooltipTitle}\n            pinned={pinned}\n            styles={styles}\n            mouseIsOver={mouseIsOver}\n            onBlur={onBlur}\n          />\n        )}\n      </td>\n    </>\n  );\n});\n\nLogRowMessage.displayName = 'LogRowMessage';\n","import { css } from '@emotion/css';\nimport { useEffect, useRef } from 'react';\n\nimport { GrafanaTheme2, LogRowModel } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Menu, useStyles2 } from '@grafana/ui';\n\nimport { copyText } from '../../logs/utils';\n\ninterface PopoverMenuProps {\n  selection: string;\n  x: number;\n  y: number;\n  onClickFilterString?: (value: string, refId?: string) => void;\n  onClickFilterOutString?: (value: string, refId?: string) => void;\n  row: LogRowModel;\n  close: () => void;\n}\n\nexport const PopoverMenu = ({\n  x,\n  y,\n  onClickFilterString,\n  onClickFilterOutString,\n  selection,\n  row,\n  close,\n}: PopoverMenuProps) => {\n  const containerRef = useRef<HTMLDivElement | null>(null);\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    function handleEscape(e: KeyboardEvent) {\n      if (e.key === 'Escape') {\n        close();\n      }\n    }\n    document.addEventListener('keyup', handleEscape);\n\n    return () => {\n      document.removeEventListener('keyup', handleEscape);\n    };\n  }, [close]);\n\n  const supported = onClickFilterString || onClickFilterOutString;\n\n  if (!supported) {\n    return null;\n  }\n\n  return (\n    <div className={styles.menu} style={{ top: y, left: x }}>\n      <Menu ref={containerRef}>\n        <Menu.Item\n          label=\"Copy selection\"\n          onClick={() => {\n            copyText(selection, containerRef);\n            close();\n            track('copy', selection.length, row.datasourceType);\n          }}\n        />\n        {onClickFilterString && (\n          <Menu.Item\n            label=\"Add as line contains filter\"\n            onClick={() => {\n              onClickFilterString(selection, row.dataFrame.refId);\n              close();\n              track('line_contains', selection.length, row.datasourceType);\n            }}\n          />\n        )}\n        {onClickFilterOutString && (\n          <Menu.Item\n            label=\"Add as line does not contain filter\"\n            onClick={() => {\n              onClickFilterOutString(selection, row.dataFrame.refId);\n              close();\n              track('line_does_not_contain', selection.length, row.datasourceType);\n            }}\n          />\n        )}\n      </Menu>\n    </div>\n  );\n};\n\nfunction track(action: string, selectionLength: number, dataSourceType: string | undefined) {\n  reportInteraction(`grafana_explore_logs_popover_menu`, {\n    action,\n    selectionLength: selectionLength,\n    datasourceType: dataSourceType || 'unknown',\n  });\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  menu: css({\n    position: 'fixed',\n    zIndex: theme.zIndex.modal,\n  }),\n});\n","// this class generates react-keys that are guaranteed to be unique.\n// it will try to use the provided `maybeId`, but if that's a duplicate,\n// it will use an index-based key.\n// NOTE: it will always add a prefix to the string, this is necessary\n// to avoid the problem if your proposed key would conflict with\n// the index-based names\nexport class UniqueKeyMaker {\n  seen: Set<string>;\n  count: number;\n  constructor() {\n    this.seen = new Set();\n    this.count = 0;\n  }\n\n  getKey(proposedKey: string) {\n    this.count += 1;\n    const maybeKey = `k_${proposedKey}`;\n    if (this.seen.has(maybeKey)) {\n      return `i_${this.count}`;\n    } else {\n      this.seen.add(maybeKey);\n      return maybeKey;\n    }\n  }\n}\n","import { css, cx } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  logsStatsRow: css`\n    label: logs-stats-row;\n    margin: ${parseInt(theme.spacing(2), 10) / 1.75}px 0;\n  `,\n  logsStatsRowActive: css`\n    label: logs-stats-row--active;\n    color: ${theme.colors.primary.text};\n    position: relative;\n  `,\n  logsStatsRowLabel: css`\n    label: logs-stats-row__label;\n    display: flex;\n    margin-bottom: 1px;\n  `,\n  logsStatsRowValue: css`\n    label: logs-stats-row__value;\n    flex: 1;\n    text-overflow: ellipsis;\n    overflow: hidden;\n  `,\n  logsStatsRowCount: css`\n    label: logs-stats-row__count;\n    text-align: right;\n    margin-left: ${theme.spacing(0.75)};\n  `,\n  logsStatsRowPercent: css`\n    label: logs-stats-row__percent;\n    text-align: right;\n    margin-left: ${theme.spacing(0.75)};\n    width: ${theme.spacing(4.5)};\n  `,\n  logsStatsRowBar: css`\n    label: logs-stats-row__bar;\n    height: ${theme.spacing(0.5)};\n    overflow: hidden;\n    background: ${theme.colors.text.disabled};\n  `,\n  logsStatsRowInnerBar: css`\n    label: logs-stats-row__innerbar;\n    height: ${theme.spacing(0.5)};\n    overflow: hidden;\n    background: ${theme.colors.primary.main};\n  `,\n});\n\nexport interface Props {\n  active?: boolean;\n  count: number;\n  proportion: number;\n  value?: string;\n}\n\nexport const LogLabelStatsRow = ({ active, count, proportion, value }: Props) => {\n  const style = useStyles2(getStyles);\n  const percent = `${Math.round(proportion * 100)}%`;\n  const barStyle = { width: percent };\n  const className = active ? cx([style.logsStatsRow, style.logsStatsRowActive]) : cx([style.logsStatsRow]);\n\n  return (\n    <div className={className}>\n      <div className={cx([style.logsStatsRowLabel])}>\n        <div className={cx([style.logsStatsRowValue])} title={value}>\n          {value}\n        </div>\n        <div className={cx([style.logsStatsRowCount])}>{count}</div>\n        <div className={cx([style.logsStatsRowPercent])}>{percent}</div>\n      </div>\n      <div className={cx([style.logsStatsRowBar])}>\n        <div className={cx([style.logsStatsRowInnerBar])} style={barStyle} />\n      </div>\n    </div>\n  );\n};\n\nLogLabelStatsRow.displayName = 'LogLabelStatsRow';\n","import { css } from '@emotion/css';\nimport { PureComponent } from 'react';\n\nimport { LogLabelStatsModel, GrafanaTheme2 } from '@grafana/data';\nimport { stylesFactory, withTheme2, Themeable2 } from '@grafana/ui';\n\n//Components\nimport { LogLabelStatsRow } from './LogLabelStatsRow';\n\nconst STATS_ROW_LIMIT = 5;\n\nconst getStyles = stylesFactory((theme: GrafanaTheme2) => {\n  return {\n    logsStats: css`\n      label: logs-stats;\n      background: inherit;\n      color: ${theme.colors.text.primary};\n      word-break: break-all;\n      width: fit-content;\n      max-width: 100%;\n    `,\n    logsStatsHeader: css`\n      label: logs-stats__header;\n      border-bottom: 1px solid ${theme.colors.border.medium};\n      display: flex;\n    `,\n    logsStatsTitle: css`\n      label: logs-stats__title;\n      font-weight: ${theme.typography.fontWeightMedium};\n      padding-right: ${theme.spacing(2)};\n      display: inline-block;\n      white-space: nowrap;\n      text-overflow: ellipsis;\n      flex-grow: 1;\n    `,\n    logsStatsClose: css`\n      label: logs-stats__close;\n      cursor: pointer;\n    `,\n    logsStatsBody: css`\n      label: logs-stats__body;\n      padding: 5px 0px;\n    `,\n  };\n});\n\ninterface Props extends Themeable2 {\n  stats: LogLabelStatsModel[];\n  label: string;\n  value: string;\n  rowCount: number;\n  isLabel?: boolean;\n}\n\nclass UnThemedLogLabelStats extends PureComponent<Props> {\n  render() {\n    const { label, rowCount, stats, value, theme, isLabel } = this.props;\n    const style = getStyles(theme);\n    const topRows = stats.slice(0, STATS_ROW_LIMIT);\n    let activeRow = topRows.find((row) => row.value === value);\n    let otherRows = stats.slice(STATS_ROW_LIMIT);\n    const insertActiveRow = !activeRow;\n\n    // Remove active row from other to show extra\n    if (insertActiveRow) {\n      activeRow = otherRows.find((row) => row.value === value);\n      otherRows = otherRows.filter((row) => row.value !== value);\n    }\n\n    const otherCount = otherRows.reduce((sum, row) => sum + row.count, 0);\n    const topCount = topRows.reduce((sum, row) => sum + row.count, 0);\n    const total = topCount + otherCount;\n    const otherProportion = otherCount / total;\n\n    return (\n      <div className={style.logsStats} data-testid=\"logLabelStats\">\n        <div className={style.logsStatsHeader}>\n          <div className={style.logsStatsTitle}>\n            {label}: {total} of {rowCount} rows have that {isLabel ? 'label' : 'field'}\n          </div>\n        </div>\n        <div className={style.logsStatsBody}>\n          {topRows.map((stat) => (\n            <LogLabelStatsRow key={stat.value} {...stat} active={stat.value === value} />\n          ))}\n          {insertActiveRow && activeRow && <LogLabelStatsRow key={activeRow.value} {...activeRow} active />}\n          {otherCount > 0 && (\n            <LogLabelStatsRow key=\"__OTHERS__\" count={otherCount} value=\"Other\" proportion={otherProportion} />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport const LogLabelStats = withTheme2(UnThemedLogLabelStats);\nLogLabelStats.displayName = 'LogLabelStats';\n","import { css, cx } from '@emotion/css';\nimport { isEqual } from 'lodash';\nimport memoizeOne from 'memoize-one';\nimport { PureComponent, useEffect, useState } from 'react';\nimport * as React from 'react';\n\nimport {\n  CoreApp,\n  DataFrame,\n  Field,\n  GrafanaTheme2,\n  IconName,\n  LinkModel,\n  LogLabelStatsModel,\n  LogRowModel,\n} from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { ClipboardButton, DataLinkButton, IconButton, PopoverContent, Themeable2, withTheme2 } from '@grafana/ui';\n\nimport { logRowToSingleRowDataFrame } from '../logsModel';\n\nimport { LogLabelStats } from './LogLabelStats';\nimport { getLogRowStyles } from './getLogRowStyles';\n\nexport interface Props extends Themeable2 {\n  parsedValues: string[];\n  parsedKeys: string[];\n  disableActions: boolean;\n  wrapLogMessage?: boolean;\n  isLabel?: boolean;\n  onClickFilterLabel?: (key: string, value: string, frame?: DataFrame) => void;\n  onClickFilterOutLabel?: (key: string, value: string, frame?: DataFrame) => void;\n  links?: Array<LinkModel<Field>>;\n  getStats: () => LogLabelStatsModel[] | null;\n  displayedFields?: string[];\n  onClickShowField?: (key: string) => void;\n  onClickHideField?: (key: string) => void;\n  row: LogRowModel;\n  app?: CoreApp;\n  isFilterLabelActive?: (key: string, value: string, refId?: string) => Promise<boolean>;\n  onPinLine?: (row: LogRowModel, allowUnPin?: boolean) => void;\n  pinLineButtonTooltipTitle?: PopoverContent;\n}\n\ninterface State {\n  showFieldsStats: boolean;\n  fieldCount: number;\n  fieldStats: LogLabelStatsModel[] | null;\n}\n\nconst getStyles = memoizeOne((theme: GrafanaTheme2) => {\n  return {\n    wordBreakAll: css`\n      label: wordBreakAll;\n      word-break: break-all;\n    `,\n    copyButton: css`\n      & > button {\n        color: ${theme.colors.text.secondary};\n        padding: 0;\n        justify-content: center;\n        border-radius: ${theme.shape.radius.circle};\n        height: ${theme.spacing(theme.components.height.sm)};\n        width: ${theme.spacing(theme.components.height.sm)};\n        svg {\n          margin: 0;\n        }\n\n        span > div {\n          top: -5px;\n          & button {\n            color: ${theme.colors.success.main};\n          }\n        }\n      }\n    `,\n    adjoiningLinkButton: css`\n      margin-left: ${theme.spacing(1)};\n    `,\n    wrapLine: css`\n      label: wrapLine;\n      white-space: pre-wrap;\n    `,\n    logDetailsStats: css`\n      padding: 0 ${theme.spacing(1)};\n    `,\n    logDetailsValue: css`\n      display: flex;\n      align-items: center;\n      line-height: 22px;\n\n      .log-details-value-copy {\n        visibility: hidden;\n      }\n      &:hover {\n        .log-details-value-copy {\n          visibility: visible;\n        }\n      }\n    `,\n    buttonRow: css`\n      display: flex;\n      flex-direction: row;\n      gap: ${theme.spacing(0.5)};\n      margin-left: ${theme.spacing(0.5)};\n    `,\n  };\n});\n\nclass UnThemedLogDetailsRow extends PureComponent<Props, State> {\n  state: State = {\n    showFieldsStats: false,\n    fieldCount: 0,\n    fieldStats: null,\n  };\n\n  componentDidUpdate() {\n    if (this.state.showFieldsStats) {\n      this.updateStats();\n    }\n  }\n\n  showField = () => {\n    const { onClickShowField: onClickShowDetectedField, parsedKeys, row } = this.props;\n    if (onClickShowDetectedField) {\n      onClickShowDetectedField(parsedKeys[0]);\n    }\n\n    reportInteraction('grafana_explore_logs_log_details_replace_line_clicked', {\n      datasourceType: row.datasourceType,\n      logRowUid: row.uid,\n      type: 'enable',\n    });\n  };\n\n  hideField = () => {\n    const { onClickHideField: onClickHideDetectedField, parsedKeys, row } = this.props;\n    if (onClickHideDetectedField) {\n      onClickHideDetectedField(parsedKeys[0]);\n    }\n\n    reportInteraction('grafana_explore_logs_log_details_replace_line_clicked', {\n      datasourceType: row.datasourceType,\n      logRowUid: row.uid,\n      type: 'disable',\n    });\n  };\n\n  isFilterLabelActive = async () => {\n    const { isFilterLabelActive, parsedKeys, parsedValues, row } = this.props;\n    if (isFilterLabelActive) {\n      return await isFilterLabelActive(parsedKeys[0], parsedValues[0], row.dataFrame?.refId);\n    }\n    return false;\n  };\n\n  filterLabel = () => {\n    const { onClickFilterLabel, parsedKeys, parsedValues, row } = this.props;\n    if (onClickFilterLabel) {\n      onClickFilterLabel(parsedKeys[0], parsedValues[0], logRowToSingleRowDataFrame(row) || undefined);\n    }\n\n    reportInteraction('grafana_explore_logs_log_details_filter_clicked', {\n      datasourceType: row.datasourceType,\n      filterType: 'include',\n      logRowUid: row.uid,\n    });\n  };\n\n  filterOutLabel = () => {\n    const { onClickFilterOutLabel, parsedKeys, parsedValues, row } = this.props;\n    if (onClickFilterOutLabel) {\n      onClickFilterOutLabel(parsedKeys[0], parsedValues[0], logRowToSingleRowDataFrame(row) || undefined);\n    }\n\n    reportInteraction('grafana_explore_logs_log_details_filter_clicked', {\n      datasourceType: row.datasourceType,\n      filterType: 'exclude',\n      logRowUid: row.uid,\n    });\n  };\n\n  updateStats = () => {\n    const { getStats } = this.props;\n    const fieldStats = getStats();\n    const fieldCount = fieldStats ? fieldStats.reduce((sum, stat) => sum + stat.count, 0) : 0;\n    if (!isEqual(this.state.fieldStats, fieldStats) || fieldCount !== this.state.fieldCount) {\n      this.setState({ fieldStats, fieldCount });\n    }\n  };\n\n  showStats = () => {\n    const { isLabel, row, app } = this.props;\n    const { showFieldsStats } = this.state;\n    if (!showFieldsStats) {\n      this.updateStats();\n    }\n    this.toggleFieldsStats();\n\n    reportInteraction('grafana_explore_logs_log_details_stats_clicked', {\n      dataSourceType: row.datasourceType,\n      fieldType: isLabel ? 'label' : 'detectedField',\n      type: showFieldsStats ? 'close' : 'open',\n      logRowUid: row.uid,\n      app,\n    });\n  };\n\n  toggleFieldsStats() {\n    this.setState((state) => {\n      return {\n        showFieldsStats: !state.showFieldsStats,\n      };\n    });\n  }\n\n  generateClipboardButton(val: string) {\n    const { theme } = this.props;\n    const styles = getStyles(theme);\n\n    return (\n      <div className={`log-details-value-copy ${styles.copyButton}`}>\n        <ClipboardButton\n          getText={() => val}\n          title=\"Copy value to clipboard\"\n          fill=\"text\"\n          variant=\"secondary\"\n          icon=\"copy\"\n          size=\"md\"\n        />\n      </div>\n    );\n  }\n\n  generateMultiVal(value: string[], showCopy?: boolean) {\n    return (\n      <table>\n        <tbody>\n          {value?.map((val, i) => {\n            return (\n              <tr key={`${val}-${i}`}>\n                <td>\n                  {val}\n                  {showCopy && val !== '' && this.generateClipboardButton(val)}\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    );\n  }\n\n  render() {\n    const {\n      theme,\n      parsedKeys,\n      parsedValues,\n      isLabel,\n      links,\n      displayedFields,\n      wrapLogMessage,\n      onClickFilterLabel,\n      onClickFilterOutLabel,\n      disableActions,\n      row,\n      app,\n      onPinLine,\n      pinLineButtonTooltipTitle,\n    } = this.props;\n    const { showFieldsStats, fieldStats, fieldCount } = this.state;\n    const styles = getStyles(theme);\n    const rowStyles = getLogRowStyles(theme);\n    const singleKey = parsedKeys == null ? false : parsedKeys.length === 1;\n    const singleVal = parsedValues == null ? false : parsedValues.length === 1;\n    const hasFilteringFunctionality = !disableActions && onClickFilterLabel && onClickFilterOutLabel;\n    const refIdTooltip = app === CoreApp.Explore && row.dataFrame?.refId ? ` in query ${row.dataFrame?.refId}` : '';\n\n    const isMultiParsedValueWithNoContent =\n      !singleVal && parsedValues != null && !parsedValues.every((val) => val === '');\n\n    const toggleFieldButton =\n      displayedFields && parsedKeys != null && displayedFields.includes(parsedKeys[0]) ? (\n        <IconButton variant=\"primary\" tooltip=\"Hide this field\" name=\"eye\" onClick={this.hideField} />\n      ) : (\n        <IconButton tooltip=\"Show this field instead of the message\" name=\"eye\" onClick={this.showField} />\n      );\n\n    return (\n      <>\n        <tr className={rowStyles.logDetailsValue}>\n          <td className={rowStyles.logsDetailsIcon}>\n            <div className={styles.buttonRow}>\n              {hasFilteringFunctionality && (\n                <>\n                  <AsyncIconButton\n                    name=\"search-plus\"\n                    onClick={this.filterLabel}\n                    // We purposely want to pass a new function on every render to allow the active state to be updated when log details remains open between updates.\n                    isActive={() => this.isFilterLabelActive()}\n                    tooltipSuffix={refIdTooltip}\n                  />\n                  <IconButton\n                    name=\"search-minus\"\n                    tooltip={`Filter out value${refIdTooltip}`}\n                    onClick={this.filterOutLabel}\n                  />\n                </>\n              )}\n              {!disableActions && displayedFields && toggleFieldButton}\n              {!disableActions && (\n                <IconButton\n                  variant={showFieldsStats ? 'primary' : 'secondary'}\n                  name=\"signal\"\n                  tooltip=\"Ad-hoc statistics\"\n                  className=\"stats-button\"\n                  disabled={!singleKey}\n                  onClick={this.showStats}\n                />\n              )}\n            </div>\n          </td>\n\n          {/* Key - value columns */}\n          <td className={rowStyles.logDetailsLabel}>{singleKey ? parsedKeys[0] : this.generateMultiVal(parsedKeys)}</td>\n          <td className={cx(styles.wordBreakAll, wrapLogMessage && styles.wrapLine)}>\n            <div className={styles.logDetailsValue}>\n              {singleVal ? parsedValues[0] : this.generateMultiVal(parsedValues, true)}\n              {singleVal && this.generateClipboardButton(parsedValues[0])}\n              <div className={cx((singleVal || isMultiParsedValueWithNoContent) && styles.adjoiningLinkButton)}>\n                {links?.map((link, i) => {\n                  if (link.onClick && onPinLine) {\n                    const originalOnClick = link.onClick;\n                    link.onClick = (e, origin) => {\n                      // Pin the line\n                      onPinLine(row, false);\n\n                      // Execute the link onClick function\n                      originalOnClick(e, origin);\n                    };\n                  }\n                  return (\n                    <span key={`${link.title}-${i}`}>\n                      <DataLinkButton\n                        buttonProps={{\n                          // Show tooltip message if max number of pinned lines has been reached\n                          tooltip:\n                            typeof pinLineButtonTooltipTitle === 'object' && link.onClick\n                              ? pinLineButtonTooltipTitle\n                              : undefined,\n                        }}\n                        link={link}\n                      />\n                    </span>\n                  );\n                })}\n              </div>\n            </div>\n          </td>\n        </tr>\n        {showFieldsStats && singleKey && singleVal && (\n          <tr>\n            <td>\n              <IconButton\n                variant={showFieldsStats ? 'primary' : 'secondary'}\n                name=\"signal\"\n                tooltip=\"Hide ad-hoc statistics\"\n                onClick={this.showStats}\n              />\n            </td>\n            <td colSpan={2}>\n              <div className={styles.logDetailsStats}>\n                <LogLabelStats\n                  stats={fieldStats!}\n                  label={parsedKeys[0]}\n                  value={parsedValues[0]}\n                  rowCount={fieldCount}\n                  isLabel={isLabel}\n                />\n              </div>\n            </td>\n          </tr>\n        )}\n      </>\n    );\n  }\n}\n\ninterface AsyncIconButtonProps extends Pick<React.ButtonHTMLAttributes<HTMLButtonElement>, 'onClick'> {\n  name: IconName;\n  isActive(): Promise<boolean>;\n  tooltipSuffix: string;\n}\n\nconst AsyncIconButton = ({ isActive, tooltipSuffix, ...rest }: AsyncIconButtonProps) => {\n  const [active, setActive] = useState(false);\n  const tooltip = active ? 'Remove filter' : 'Filter for value';\n\n  useEffect(() => {\n    isActive().then(setActive);\n  }, [isActive]);\n\n  return <IconButton {...rest} variant={active ? 'primary' : undefined} tooltip={tooltip + tooltipSuffix} />;\n};\n\nexport const LogDetailsRow = withTheme2(UnThemedLogDetailsRow);\nLogDetailsRow.displayName = 'LogDetailsRow';\n","import { cx } from '@emotion/css';\nimport { PureComponent } from 'react';\n\nimport { CoreApp, DataFrame, DataFrameType, Field, LinkModel, LogRowModel } from '@grafana/data';\nimport { PopoverContent, Themeable2, withTheme2 } from '@grafana/ui';\n\nimport { calculateLogsLabelStats, calculateStats } from '../utils';\n\nimport { LogDetailsRow } from './LogDetailsRow';\nimport { getLogLevelStyles, LogRowStyles } from './getLogRowStyles';\nimport { getAllFields, createLogLineLinks } from './logParser';\n\nexport interface Props extends Themeable2 {\n  row: LogRowModel;\n  showDuplicates: boolean;\n  getRows: () => LogRowModel[];\n  wrapLogMessage: boolean;\n  className?: string;\n  hasError?: boolean;\n  app?: CoreApp;\n  styles: LogRowStyles;\n\n  onClickFilterLabel?: (key: string, value: string, frame?: DataFrame) => void;\n  onClickFilterOutLabel?: (key: string, value: string, frame?: DataFrame) => void;\n  getFieldLinks?: (field: Field, rowIndex: number, dataFrame: DataFrame) => Array<LinkModel<Field>>;\n  displayedFields?: string[];\n  onClickShowField?: (key: string) => void;\n  onClickHideField?: (key: string) => void;\n  isFilterLabelActive?: (key: string, value: string, refId?: string) => Promise<boolean>;\n\n  onPinLine?: (row: LogRowModel) => void;\n  pinLineButtonTooltipTitle?: PopoverContent;\n}\n\nclass UnThemedLogDetails extends PureComponent<Props> {\n  render() {\n    const {\n      app,\n      row,\n      theme,\n      hasError,\n      onClickFilterOutLabel,\n      onClickFilterLabel,\n      getRows,\n      showDuplicates,\n      className,\n      onClickShowField,\n      onClickHideField,\n      displayedFields,\n      getFieldLinks,\n      wrapLogMessage,\n      onPinLine,\n      styles,\n      pinLineButtonTooltipTitle,\n    } = this.props;\n    const levelStyles = getLogLevelStyles(theme, row.logLevel);\n    const labels = row.labels ? row.labels : {};\n    const labelsAvailable = Object.keys(labels).length > 0;\n    const fieldsAndLinks = getAllFields(row, getFieldLinks);\n    let fieldsWithLinks = fieldsAndLinks.filter((f) => f.links?.length);\n    const displayedFieldsWithLinks = fieldsWithLinks.filter((f) => f.fieldIndex !== row.entryFieldIndex).sort();\n    const hiddenFieldsWithLinks = fieldsWithLinks.filter((f) => f.fieldIndex === row.entryFieldIndex).sort();\n    const fieldsWithLinksFromVariableMap = createLogLineLinks(hiddenFieldsWithLinks);\n    const fieldsWithLinksAvailable =\n      (displayedFieldsWithLinks && displayedFieldsWithLinks.length > 0) ||\n      (fieldsWithLinksFromVariableMap && fieldsWithLinksFromVariableMap.length > 0);\n\n    const fields =\n      row.dataFrame.meta?.type === DataFrameType.LogLines\n        ? // for LogLines frames (dataplane) we don't want to show any additional fields besides already extracted labels and links\n          []\n        : // for other frames, do not show the log message unless there is a link attached\n          fieldsAndLinks.filter((f) => f.links?.length === 0 && f.fieldIndex !== row.entryFieldIndex).sort();\n    const fieldsAvailable = fields && fields.length > 0;\n\n    // If logs with error, we are not showing the level color\n    const levelClassName = hasError\n      ? ''\n      : `${levelStyles.logsRowLevelColor} ${styles.logsRowLevel} ${styles.logsRowLevelDetails}`;\n\n    return (\n      <tr className={cx(className, styles.logDetails)}>\n        {showDuplicates && <td />}\n        <td className={levelClassName} aria-label=\"Log level\" />\n        <td colSpan={4}>\n          <div className={styles.logDetailsContainer}>\n            <table className={styles.logDetailsTable}>\n              <tbody>\n                {(labelsAvailable || fieldsAvailable) && (\n                  <tr>\n                    <td colSpan={100} className={styles.logDetailsHeading} aria-label=\"Fields\">\n                      Fields\n                    </td>\n                  </tr>\n                )}\n                {Object.keys(labels)\n                  .sort()\n                  .map((key, i) => {\n                    const value = labels[key];\n                    return (\n                      <LogDetailsRow\n                        key={`${key}=${value}-${i}`}\n                        parsedKeys={[key]}\n                        parsedValues={[value]}\n                        isLabel={true}\n                        getStats={() => calculateLogsLabelStats(getRows(), key)}\n                        onClickFilterOutLabel={onClickFilterOutLabel}\n                        onClickFilterLabel={onClickFilterLabel}\n                        onClickShowField={onClickShowField}\n                        onClickHideField={onClickHideField}\n                        row={row}\n                        app={app}\n                        wrapLogMessage={wrapLogMessage}\n                        displayedFields={displayedFields}\n                        disableActions={false}\n                        isFilterLabelActive={this.props.isFilterLabelActive}\n                      />\n                    );\n                  })}\n                {fields.map((field, i) => {\n                  const { keys, values, fieldIndex } = field;\n                  return (\n                    <LogDetailsRow\n                      key={`${keys[0]}=${values[0]}-${i}`}\n                      parsedKeys={keys}\n                      parsedValues={values}\n                      onClickShowField={onClickShowField}\n                      onClickHideField={onClickHideField}\n                      onClickFilterOutLabel={onClickFilterOutLabel}\n                      onClickFilterLabel={onClickFilterLabel}\n                      getStats={() => calculateStats(row.dataFrame.fields[fieldIndex].values)}\n                      displayedFields={displayedFields}\n                      wrapLogMessage={wrapLogMessage}\n                      row={row}\n                      app={app}\n                      disableActions={false}\n                      isFilterLabelActive={this.props.isFilterLabelActive}\n                    />\n                  );\n                })}\n\n                {fieldsWithLinksAvailable && (\n                  <tr>\n                    <td colSpan={100} className={styles.logDetailsHeading} aria-label=\"Data Links\">\n                      Links\n                    </td>\n                  </tr>\n                )}\n                {displayedFieldsWithLinks.map((field, i) => {\n                  const { keys, values, links, fieldIndex } = field;\n                  return (\n                    <LogDetailsRow\n                      key={`${keys[0]}=${values[0]}-${i}`}\n                      parsedKeys={keys}\n                      parsedValues={values}\n                      links={links}\n                      onClickShowField={onClickShowField}\n                      onClickHideField={onClickHideField}\n                      onPinLine={onPinLine}\n                      pinLineButtonTooltipTitle={pinLineButtonTooltipTitle}\n                      getStats={() => calculateStats(row.dataFrame.fields[fieldIndex].values)}\n                      displayedFields={displayedFields}\n                      wrapLogMessage={wrapLogMessage}\n                      row={row}\n                      app={app}\n                      disableActions={false}\n                    />\n                  );\n                })}\n                {fieldsWithLinksFromVariableMap?.map((field, i) => {\n                  const { keys, values, links, fieldIndex } = field;\n                  return (\n                    <LogDetailsRow\n                      key={`${keys[0]}=${values[0]}-${i}`}\n                      parsedKeys={keys}\n                      parsedValues={values}\n                      links={links}\n                      onClickShowField={onClickShowField}\n                      onClickHideField={onClickHideField}\n                      onPinLine={onPinLine}\n                      pinLineButtonTooltipTitle={pinLineButtonTooltipTitle}\n                      getStats={() => calculateStats(row.dataFrame.fields[fieldIndex].values)}\n                      displayedFields={displayedFields}\n                      wrapLogMessage={wrapLogMessage}\n                      row={row}\n                      app={app}\n                      disableActions={true}\n                    />\n                  );\n                })}\n\n                {!fieldsAvailable && !labelsAvailable && !fieldsWithLinksAvailable && (\n                  <tr>\n                    <td colSpan={100} aria-label=\"No details\">\n                      No details available\n                    </td>\n                  </tr>\n                )}\n              </tbody>\n            </table>\n          </div>\n        </td>\n      </tr>\n    );\n  }\n}\n\nexport const LogDetails = withTheme2(UnThemedLogDetails);\nLogDetails.displayName = 'LogDetails';\n","import { css } from '@emotion/css';\nimport { memo, useMemo } from 'react';\n\nimport { LogRowModel, Field, LinkModel, DataFrame } from '@grafana/data';\n\nimport { LogRowMenuCell } from './LogRowMenuCell';\nimport { LogRowStyles } from './getLogRowStyles';\nimport { getAllFields } from './logParser';\n\nexport interface Props {\n  row: LogRowModel;\n  detectedFields: string[];\n  wrapLogMessage: boolean;\n  getFieldLinks?: (field: Field, rowIndex: number, dataFrame: DataFrame) => Array<LinkModel<Field>>;\n  styles: LogRowStyles;\n  showContextToggle?: (row: LogRowModel) => boolean;\n  onOpenContext: (row: LogRowModel) => void;\n  onPermalinkClick?: (row: LogRowModel) => Promise<void>;\n  onPinLine?: (row: LogRowModel) => void;\n  onUnpinLine?: (row: LogRowModel) => void;\n  pinned?: boolean;\n  mouseIsOver: boolean;\n  onBlur: () => void;\n}\n\nexport const LogRowMessageDisplayedFields = memo((props: Props) => {\n  const { row, detectedFields, getFieldLinks, wrapLogMessage, styles, mouseIsOver, pinned, ...rest } = props;\n  const wrapClassName = wrapLogMessage ? '' : displayedFieldsStyles.noWrap;\n  const fields = useMemo(() => getAllFields(row, getFieldLinks), [getFieldLinks, row]);\n  // only single key/value rows are filterable, so we only need the first field key for filtering\n  const line = useMemo(() => {\n    let line = '';\n    for (let i = 0; i < detectedFields.length; i++) {\n      const parsedKey = detectedFields[i];\n      const field = fields.find((field) => {\n        const { keys } = field;\n        return keys[0] === parsedKey;\n      });\n\n      if (field) {\n        line += ` ${parsedKey}=${field.values}`;\n      }\n\n      if (row.labels[parsedKey] !== undefined && row.labels[parsedKey] !== null) {\n        line += ` ${parsedKey}=${row.labels[parsedKey]}`;\n      }\n    }\n    return line.trimStart();\n  }, [detectedFields, fields, row.labels]);\n\n  const shouldShowMenu = useMemo(() => mouseIsOver || pinned, [mouseIsOver, pinned]);\n\n  return (\n    <>\n      <td className={styles.logsRowMessage}>\n        <div className={wrapClassName}>{line}</div>\n      </td>\n      <td className={`log-row-menu-cell ${styles.logRowMenuCell}`}>\n        {shouldShowMenu && (\n          <LogRowMenuCell\n            logText={line}\n            row={row}\n            styles={styles}\n            pinned={pinned}\n            mouseIsOver={mouseIsOver}\n            {...rest}\n          />\n        )}\n      </td>\n    </>\n  );\n});\n\nconst displayedFieldsStyles = {\n  noWrap: css`\n    white-space: nowrap;\n  `,\n};\n\nLogRowMessageDisplayedFields.displayName = 'LogRowMessageDisplayedFields';\n","import { cx } from '@emotion/css';\nimport { debounce } from 'lodash';\nimport memoizeOne from 'memoize-one';\nimport * as React from 'react';\nimport { MouseEvent, PureComponent } from 'react';\n\nimport {\n  CoreApp,\n  DataFrame,\n  dateTimeFormat,\n  Field,\n  LinkModel,\n  LogRowContextOptions,\n  LogRowModel,\n  LogsSortOrder,\n} from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { DataQuery, TimeZone } from '@grafana/schema';\nimport { Icon, PopoverContent, Themeable2, Tooltip, withTheme2 } from '@grafana/ui';\n\nimport { checkLogsError, checkLogsSampled, escapeUnescapedString } from '../utils';\n\nimport { LogDetails } from './LogDetails';\nimport { LogLabels } from './LogLabels';\nimport { LogRowMessage } from './LogRowMessage';\nimport { LogRowMessageDisplayedFields } from './LogRowMessageDisplayedFields';\nimport { getLogLevelStyles, LogRowStyles } from './getLogRowStyles';\n\ninterface Props extends Themeable2 {\n  row: LogRowModel;\n  showDuplicates: boolean;\n  showLabels: boolean;\n  showTime: boolean;\n  wrapLogMessage: boolean;\n  prettifyLogMessage: boolean;\n  timeZone: TimeZone;\n  enableLogDetails: boolean;\n  logsSortOrder?: LogsSortOrder | null;\n  forceEscape?: boolean;\n  app?: CoreApp;\n  displayedFields?: string[];\n  getRows: () => LogRowModel[];\n  onClickFilterLabel?: (key: string, value: string, frame?: DataFrame) => void;\n  onClickFilterOutLabel?: (key: string, value: string, frame?: DataFrame) => void;\n  onContextClick?: () => void;\n  getFieldLinks?: (field: Field, rowIndex: number, dataFrame: DataFrame) => Array<LinkModel<Field>>;\n  showContextToggle?: (row: LogRowModel) => boolean;\n  onClickShowField?: (key: string) => void;\n  onClickHideField?: (key: string) => void;\n  onLogRowHover?: (row?: LogRowModel) => void;\n  onOpenContext: (row: LogRowModel, onClose: () => void) => void;\n  getRowContextQuery?: (\n    row: LogRowModel,\n    options?: LogRowContextOptions,\n    cacheFilters?: boolean\n  ) => Promise<DataQuery | null>;\n  onPermalinkClick?: (row: LogRowModel) => Promise<void>;\n  styles: LogRowStyles;\n  permalinkedRowId?: string;\n  scrollIntoView?: (element: HTMLElement) => void;\n  isFilterLabelActive?: (key: string, value: string, refId?: string) => Promise<boolean>;\n  onPinLine?: (row: LogRowModel, allowUnPin?: boolean) => void;\n  onUnpinLine?: (row: LogRowModel) => void;\n  pinLineButtonTooltipTitle?: PopoverContent;\n  pinned?: boolean;\n  containerRendered?: boolean;\n  handleTextSelection?: (e: MouseEvent<HTMLTableRowElement>, row: LogRowModel) => boolean;\n}\n\ninterface State {\n  permalinked: boolean;\n  showingContext: boolean;\n  showDetails: boolean;\n  mouseIsOver: boolean;\n}\n\n/**\n * Renders a log line.\n *\n * When user hovers over it for a certain time, it lazily parses the log line.\n * Once a parser is found, it will determine fields, that will be highlighted.\n * When the user requests stats for a field, they will be calculated and rendered below the row.\n */\nclass UnThemedLogRow extends PureComponent<Props, State> {\n  state: State = {\n    permalinked: false,\n    showingContext: false,\n    showDetails: false,\n    mouseIsOver: false,\n  };\n  logLineRef: React.RefObject<HTMLTableRowElement>;\n\n  constructor(props: Props) {\n    super(props);\n    this.logLineRef = React.createRef();\n  }\n\n  // we are debouncing the state change by 3 seconds to highlight the logline after the context closed.\n  debouncedContextClose = debounce(() => {\n    this.setState({ showingContext: false });\n  }, 3000);\n\n  onOpenContext = (row: LogRowModel) => {\n    this.setState({ showingContext: true });\n    this.props.onOpenContext(row, this.debouncedContextClose);\n  };\n\n  onRowClick = (e: MouseEvent<HTMLTableRowElement>) => {\n    if (this.props.handleTextSelection?.(e, this.props.row)) {\n      // Event handled by the parent.\n      return;\n    }\n\n    if (!this.props.enableLogDetails) {\n      return;\n    }\n\n    this.setState((state) => {\n      return {\n        showDetails: !state.showDetails,\n      };\n    });\n  };\n\n  renderTimeStamp(epochMs: number) {\n    return dateTimeFormat(epochMs, {\n      timeZone: this.props.timeZone,\n      defaultWithMS: true,\n    });\n  }\n\n  onMouseEnter = () => {\n    this.setState({ mouseIsOver: true });\n    if (this.props.onLogRowHover) {\n      this.props.onLogRowHover(this.props.row);\n    }\n  };\n\n  onMouseMove = (e: MouseEvent) => {\n    // No need to worry about text selection.\n    if (!this.props.handleTextSelection) {\n      return;\n    }\n    // The user is selecting text, so hide the log row menu so it doesn't interfere.\n    if (document.getSelection()?.toString() && e.buttons > 0) {\n      this.setState({ mouseIsOver: false });\n    }\n  };\n\n  onMouseLeave = () => {\n    this.setState({ mouseIsOver: false });\n  };\n\n  componentDidMount() {\n    this.scrollToLogRow(this.state, true);\n  }\n\n  componentDidUpdate(_: Props, prevState: State) {\n    this.scrollToLogRow(prevState);\n  }\n\n  scrollToLogRow = (prevState: State, mounted = false) => {\n    const { row, permalinkedRowId, scrollIntoView, containerRendered } = this.props;\n\n    if (permalinkedRowId !== row.uid) {\n      // only set the new state if the row is not permalinked anymore or if the component was mounted.\n      if (prevState.permalinked || mounted) {\n        this.setState({ permalinked: false });\n      }\n      return;\n    }\n\n    if (!this.state.permalinked && containerRendered && this.logLineRef.current && scrollIntoView) {\n      // at this point this row is the permalinked row, so we need to scroll to it and highlight it if possible.\n      scrollIntoView(this.logLineRef.current);\n      reportInteraction('grafana_explore_logs_permalink_opened', {\n        datasourceType: row.datasourceType ?? 'unknown',\n        logRowUid: row.uid,\n      });\n      this.setState({ permalinked: true });\n    }\n  };\n\n  escapeRow = memoizeOne((row: LogRowModel, forceEscape: boolean | undefined) => {\n    return row.hasUnescapedContent && forceEscape\n      ? { ...row, entry: escapeUnescapedString(row.entry), raw: escapeUnescapedString(row.raw) }\n      : row;\n  });\n\n  render() {\n    const {\n      getRows,\n      onClickFilterLabel,\n      onClickFilterOutLabel,\n      onClickShowField,\n      onClickHideField,\n      enableLogDetails,\n      row,\n      showDuplicates,\n      showContextToggle,\n      showLabels,\n      showTime,\n      displayedFields,\n      wrapLogMessage,\n      prettifyLogMessage,\n      theme,\n      getFieldLinks,\n      forceEscape,\n      app,\n      styles,\n      getRowContextQuery,\n      pinned,\n    } = this.props;\n\n    const { showDetails, showingContext, permalinked } = this.state;\n    const levelStyles = getLogLevelStyles(theme, row.logLevel);\n    const { errorMessage, hasError } = checkLogsError(row);\n    const { sampleMessage, isSampled } = checkLogsSampled(row);\n    const logRowBackground = cx(styles.logsRow, {\n      [styles.errorLogRow]: hasError,\n      [styles.highlightBackground]: showingContext || permalinked || pinned,\n    });\n    const logRowDetailsBackground = cx(styles.logsRow, {\n      [styles.errorLogRow]: hasError,\n      [styles.highlightBackground]: permalinked && !this.state.showDetails,\n    });\n\n    const processedRow = this.escapeRow(row, forceEscape);\n\n    return (\n      <>\n        <tr\n          ref={this.logLineRef}\n          className={logRowBackground}\n          onClick={this.onRowClick}\n          onMouseEnter={this.onMouseEnter}\n          onMouseLeave={this.onMouseLeave}\n          onMouseMove={this.onMouseMove}\n          /**\n           * For better accessibility support, we listen to the onFocus event here (to display the LogRowMenuCell), and\n           * to onBlur event in the LogRowMenuCell (to hide it). This way, the LogRowMenuCell is displayed when the user navigates\n           * using the keyboard.\n           */\n          onFocus={this.onMouseEnter}\n        >\n          {showDuplicates && (\n            <td className={styles.logsRowDuplicates}>\n              {processedRow.duplicates && processedRow.duplicates > 0 ? `${processedRow.duplicates + 1}x` : null}\n            </td>\n          )}\n          <td\n            className={\n              hasError || isSampled\n                ? styles.logsRowWithError\n                : `${levelStyles.logsRowLevelColor} ${styles.logsRowLevel}`\n            }\n          >\n            {hasError && (\n              <Tooltip content={`Error: ${errorMessage}`} placement=\"right\" theme=\"error\">\n                <Icon className={styles.logIconError} name=\"exclamation-triangle\" size=\"xs\" />\n              </Tooltip>\n            )}\n            {isSampled && (\n              <Tooltip content={`${sampleMessage}`} placement=\"right\" theme=\"info\">\n                <Icon className={styles.logIconInfo} name=\"info-circle\" size=\"xs\" />\n              </Tooltip>\n            )}\n          </td>\n          <td\n            title={enableLogDetails ? (showDetails ? 'Hide log details' : 'See log details') : ''}\n            className={enableLogDetails ? styles.logsRowToggleDetails : ''}\n          >\n            {enableLogDetails && (\n              <Icon className={styles.topVerticalAlign} name={showDetails ? 'angle-down' : 'angle-right'} />\n            )}\n          </td>\n          {showTime && <td className={styles.logsRowLocalTime}>{this.renderTimeStamp(row.timeEpochMs)}</td>}\n          {showLabels && processedRow.uniqueLabels && (\n            <td className={styles.logsRowLabels}>\n              <LogLabels labels={processedRow.uniqueLabels} />\n            </td>\n          )}\n          {displayedFields && displayedFields.length > 0 ? (\n            <LogRowMessageDisplayedFields\n              row={processedRow}\n              showContextToggle={showContextToggle}\n              detectedFields={displayedFields}\n              getFieldLinks={getFieldLinks}\n              wrapLogMessage={wrapLogMessage}\n              onOpenContext={this.onOpenContext}\n              onPermalinkClick={this.props.onPermalinkClick}\n              styles={styles}\n              onPinLine={this.props.onPinLine}\n              onUnpinLine={this.props.onUnpinLine}\n              pinned={this.props.pinned}\n              mouseIsOver={this.state.mouseIsOver}\n              onBlur={this.onMouseLeave}\n            />\n          ) : (\n            <LogRowMessage\n              row={processedRow}\n              showContextToggle={showContextToggle}\n              getRowContextQuery={getRowContextQuery}\n              wrapLogMessage={wrapLogMessage}\n              prettifyLogMessage={prettifyLogMessage}\n              onOpenContext={this.onOpenContext}\n              onPermalinkClick={this.props.onPermalinkClick}\n              app={app}\n              styles={styles}\n              onPinLine={this.props.onPinLine}\n              onUnpinLine={this.props.onUnpinLine}\n              pinLineButtonTooltipTitle={this.props.pinLineButtonTooltipTitle}\n              pinned={this.props.pinned}\n              mouseIsOver={this.state.mouseIsOver}\n              onBlur={this.onMouseLeave}\n              expanded={this.state.showDetails}\n            />\n          )}\n        </tr>\n        {this.state.showDetails && (\n          <LogDetails\n            onPinLine={this.props.onPinLine}\n            className={logRowDetailsBackground}\n            showDuplicates={showDuplicates}\n            getFieldLinks={getFieldLinks}\n            onClickFilterLabel={onClickFilterLabel}\n            onClickFilterOutLabel={onClickFilterOutLabel}\n            onClickShowField={onClickShowField}\n            onClickHideField={onClickHideField}\n            getRows={getRows}\n            row={processedRow}\n            wrapLogMessage={wrapLogMessage}\n            hasError={hasError}\n            displayedFields={displayedFields}\n            app={app}\n            styles={styles}\n            isFilterLabelActive={this.props.isFilterLabelActive}\n            pinLineButtonTooltipTitle={this.props.pinLineButtonTooltipTitle}\n          />\n        )}\n      </>\n    );\n  }\n}\n\nexport const LogRow = withTheme2(UnThemedLogRow);\nLogRow.displayName = 'LogRow';\n","import { cx } from '@emotion/css';\nimport memoizeOne from 'memoize-one';\nimport { PureComponent, MouseEvent, createRef } from 'react';\n\nimport {\n  TimeZone,\n  LogsDedupStrategy,\n  LogRowModel,\n  Field,\n  LinkModel,\n  LogsSortOrder,\n  CoreApp,\n  DataFrame,\n  LogRowContextOptions,\n} from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { DataQuery } from '@grafana/schema';\nimport { withTheme2, Themeable2, PopoverContent } from '@grafana/ui';\n\nimport { PopoverMenu } from '../../explore/Logs/PopoverMenu';\nimport { UniqueKeyMaker } from '../UniqueKeyMaker';\nimport { sortLogRows, targetIsElement } from '../utils';\n\n//Components\nimport { LogRow } from './LogRow';\nimport { getLogRowStyles } from './getLogRowStyles';\n\nexport const PREVIEW_LIMIT = 100;\n\nexport interface Props extends Themeable2 {\n  logRows?: LogRowModel[];\n  deduplicatedRows?: LogRowModel[];\n  dedupStrategy: LogsDedupStrategy;\n  showLabels: boolean;\n  showTime: boolean;\n  wrapLogMessage: boolean;\n  prettifyLogMessage: boolean;\n  timeZone: TimeZone;\n  enableLogDetails: boolean;\n  logsSortOrder?: LogsSortOrder | null;\n  previewLimit?: number;\n  forceEscape?: boolean;\n  displayedFields?: string[];\n  app?: CoreApp;\n  showContextToggle?: (row: LogRowModel) => boolean;\n  onClickFilterLabel?: (key: string, value: string, frame?: DataFrame) => void;\n  onClickFilterOutLabel?: (key: string, value: string, frame?: DataFrame) => void;\n  getFieldLinks?: (field: Field, rowIndex: number, dataFrame: DataFrame) => Array<LinkModel<Field>>;\n  onClickShowField?: (key: string) => void;\n  onClickHideField?: (key: string) => void;\n  onPinLine?: (row: LogRowModel, allowUnPin?: boolean) => void;\n  onUnpinLine?: (row: LogRowModel) => void;\n  pinLineButtonTooltipTitle?: PopoverContent;\n  onLogRowHover?: (row?: LogRowModel) => void;\n  onOpenContext?: (row: LogRowModel, onClose: () => void) => void;\n  getRowContextQuery?: (\n    row: LogRowModel,\n    options?: LogRowContextOptions,\n    cacheFilters?: boolean\n  ) => Promise<DataQuery | null>;\n  onPermalinkClick?: (row: LogRowModel) => Promise<void>;\n  permalinkedRowId?: string;\n  scrollIntoView?: (element: HTMLElement) => void;\n  isFilterLabelActive?: (key: string, value: string, refId?: string) => Promise<boolean>;\n  pinnedRowId?: string;\n  pinnedLogs?: string[];\n  containerRendered?: boolean;\n  /**\n   * If false or undefined, the `contain:strict` css property will be added to the wrapping `<table>` for performance reasons.\n   * Any overflowing content will be clipped at the table boundary.\n   */\n  overflowingContent?: boolean;\n  onClickFilterString?: (value: string, refId?: string) => void;\n  onClickFilterOutString?: (value: string, refId?: string) => void;\n}\n\ninterface State {\n  renderAll: boolean;\n  selection: string;\n  selectedRow: LogRowModel | null;\n  popoverMenuCoordinates: { x: number; y: number };\n}\n\nclass UnThemedLogRows extends PureComponent<Props, State> {\n  renderAllTimer: number | null = null;\n  logRowsRef = createRef<HTMLDivElement>();\n\n  static defaultProps = {\n    previewLimit: PREVIEW_LIMIT,\n  };\n\n  state: State = {\n    renderAll: false,\n    selection: '',\n    selectedRow: null,\n    popoverMenuCoordinates: { x: 0, y: 0 },\n  };\n\n  /**\n   * Toggle the `contextIsOpen` state when a context of one LogRow is opened in order to not show the menu of the other log rows.\n   */\n  openContext = (row: LogRowModel, onClose: () => void): void => {\n    if (this.props.onOpenContext) {\n      this.props.onOpenContext(row, onClose);\n    }\n  };\n\n  popoverMenuSupported() {\n    if (!config.featureToggles.logRowsPopoverMenu) {\n      return false;\n    }\n    return Boolean(this.props.onClickFilterOutString || this.props.onClickFilterString);\n  }\n\n  handleSelection = (e: MouseEvent<HTMLTableRowElement>, row: LogRowModel): boolean => {\n    if (this.popoverMenuSupported() === false) {\n      return false;\n    }\n    const selection = document.getSelection()?.toString();\n    if (!selection) {\n      return false;\n    }\n    if (!this.logRowsRef.current) {\n      return false;\n    }\n\n    const MENU_WIDTH = 270;\n    const MENU_HEIGHT = 105;\n    const x = e.clientX + MENU_WIDTH > window.innerWidth ? window.innerWidth - MENU_WIDTH : e.clientX;\n    const y = e.clientY + MENU_HEIGHT > window.innerHeight ? window.innerHeight - MENU_HEIGHT : e.clientY;\n\n    this.setState({\n      selection,\n      popoverMenuCoordinates: { x, y },\n      selectedRow: row,\n    });\n    document.addEventListener('click', this.handleDeselection);\n    document.addEventListener('contextmenu', this.handleDeselection);\n    return true;\n  };\n\n  handleDeselection = (e: Event) => {\n    if (targetIsElement(e.target) && !this.logRowsRef.current?.contains(e.target)) {\n      // The mouseup event comes from outside the log rows, close the menu.\n      this.closePopoverMenu();\n      return;\n    }\n    if (document.getSelection()?.toString()) {\n      return;\n    }\n    this.closePopoverMenu();\n  };\n\n  closePopoverMenu = () => {\n    document.removeEventListener('click', this.handleDeselection);\n    document.removeEventListener('contextmenu', this.handleDeselection);\n    this.setState({\n      selection: '',\n      popoverMenuCoordinates: { x: 0, y: 0 },\n      selectedRow: null,\n    });\n  };\n\n  componentDidMount() {\n    // Staged rendering\n    const { logRows, previewLimit } = this.props;\n    const rowCount = logRows ? logRows.length : 0;\n    // Render all right away if not too far over the limit\n    const renderAll = rowCount <= previewLimit! * 2;\n    if (renderAll) {\n      this.setState({ renderAll });\n    } else {\n      this.renderAllTimer = window.setTimeout(() => this.setState({ renderAll: true }), 2000);\n    }\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('click', this.handleDeselection);\n    document.removeEventListener('contextmenu', this.handleDeselection);\n    document.removeEventListener('selectionchange', this.handleDeselection);\n    if (this.renderAllTimer) {\n      clearTimeout(this.renderAllTimer);\n    }\n  }\n\n  makeGetRows = memoizeOne((orderedRows: LogRowModel[]) => {\n    return () => orderedRows;\n  });\n\n  sortLogs = memoizeOne((logRows: LogRowModel[], logsSortOrder: LogsSortOrder): LogRowModel[] =>\n    sortLogRows(logRows, logsSortOrder)\n  );\n\n  render() {\n    const { deduplicatedRows, logRows, dedupStrategy, theme, logsSortOrder, previewLimit, pinnedLogs, ...rest } =\n      this.props;\n    const { renderAll } = this.state;\n    const styles = getLogRowStyles(theme);\n    const dedupedRows = deduplicatedRows ? deduplicatedRows : logRows;\n    const hasData = logRows && logRows.length > 0;\n    const dedupCount = dedupedRows\n      ? dedupedRows.reduce((sum, row) => (row.duplicates ? sum + row.duplicates : sum), 0)\n      : 0;\n    const showDuplicates = dedupStrategy !== LogsDedupStrategy.none && dedupCount > 0;\n    // Staged rendering\n    const processedRows = dedupedRows ? dedupedRows : [];\n    const orderedRows = logsSortOrder ? this.sortLogs(processedRows, logsSortOrder) : processedRows;\n    const firstRows = orderedRows.slice(0, previewLimit!);\n    const lastRows = orderedRows.slice(previewLimit!, orderedRows.length);\n\n    // React profiler becomes unusable if we pass all rows to all rows and their labels, using getter instead\n    const getRows = this.makeGetRows(orderedRows);\n\n    const keyMaker = new UniqueKeyMaker();\n\n    return (\n      <div className={styles.logRows} ref={this.logRowsRef}>\n        {this.state.selection && this.state.selectedRow && (\n          <PopoverMenu\n            close={this.closePopoverMenu}\n            row={this.state.selectedRow}\n            selection={this.state.selection}\n            {...this.state.popoverMenuCoordinates}\n            onClickFilterString={rest.onClickFilterString}\n            onClickFilterOutString={rest.onClickFilterOutString}\n          />\n        )}\n        <table className={cx(styles.logsRowsTable, this.props.overflowingContent ? '' : styles.logsRowsTableContain)}>\n          <tbody>\n            {hasData &&\n              firstRows.map((row) => (\n                <LogRow\n                  key={keyMaker.getKey(row.uid)}\n                  getRows={getRows}\n                  row={row}\n                  showDuplicates={showDuplicates}\n                  logsSortOrder={logsSortOrder}\n                  onOpenContext={this.openContext}\n                  styles={styles}\n                  onPermalinkClick={this.props.onPermalinkClick}\n                  scrollIntoView={this.props.scrollIntoView}\n                  permalinkedRowId={this.props.permalinkedRowId}\n                  onPinLine={this.props.onPinLine}\n                  onUnpinLine={this.props.onUnpinLine}\n                  pinLineButtonTooltipTitle={this.props.pinLineButtonTooltipTitle}\n                  pinned={this.props.pinnedRowId === row.uid || pinnedLogs?.some((logId) => logId === row.rowId)}\n                  isFilterLabelActive={this.props.isFilterLabelActive}\n                  handleTextSelection={this.popoverMenuSupported() ? this.handleSelection : undefined}\n                  {...rest}\n                />\n              ))}\n            {hasData &&\n              renderAll &&\n              lastRows.map((row) => (\n                <LogRow\n                  key={keyMaker.getKey(row.uid)}\n                  getRows={getRows}\n                  row={row}\n                  showDuplicates={showDuplicates}\n                  logsSortOrder={logsSortOrder}\n                  onOpenContext={this.openContext}\n                  styles={styles}\n                  onPermalinkClick={this.props.onPermalinkClick}\n                  scrollIntoView={this.props.scrollIntoView}\n                  permalinkedRowId={this.props.permalinkedRowId}\n                  onPinLine={this.props.onPinLine}\n                  onUnpinLine={this.props.onUnpinLine}\n                  pinLineButtonTooltipTitle={this.props.pinLineButtonTooltipTitle}\n                  pinned={this.props.pinnedRowId === row.uid || pinnedLogs?.some((logId) => logId === row.rowId)}\n                  isFilterLabelActive={this.props.isFilterLabelActive}\n                  handleTextSelection={this.popoverMenuSupported() ? this.handleSelection : undefined}\n                  {...rest}\n                />\n              ))}\n            {hasData && !renderAll && (\n              <tr>\n                <td colSpan={5}>Rendering {orderedRows.length - previewLimit!} rows...</td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport const LogRows = withTheme2(UnThemedLogRows);\nLogRows.displayName = 'LogsRows';\n","import { css } from '@emotion/css';\nimport memoizeOne from 'memoize-one';\nimport tinycolor from 'tinycolor2';\n\nimport { colorManipulator, GrafanaTheme2, LogLevel } from '@grafana/data';\nimport { styleMixins } from '@grafana/ui';\n\nexport const getLogLevelStyles = (theme: GrafanaTheme2, logLevel?: LogLevel) => {\n  let logColor = theme.isLight ? theme.v1.palette.gray5 : theme.v1.palette.gray2;\n  switch (logLevel) {\n    case LogLevel.crit:\n    case LogLevel.critical:\n      logColor = '#705da0';\n      break;\n    case LogLevel.error:\n    case LogLevel.err:\n      logColor = '#e24d42';\n      break;\n    case LogLevel.warning:\n    case LogLevel.warn:\n      logColor = theme.colors.warning.main;\n      break;\n    case LogLevel.info:\n      logColor = '#7eb26d';\n      break;\n    case LogLevel.debug:\n      logColor = '#1f78c1';\n      break;\n    case LogLevel.trace:\n      logColor = '#6ed0e0';\n      break;\n  }\n\n  return {\n    logsRowLevelColor: css`\n      &::after {\n        background-color: ${logColor};\n      }\n    `,\n  };\n};\n\nexport const getLogRowStyles = memoizeOne((theme: GrafanaTheme2) => {\n  const hoverBgColor = styleMixins.hoverColor(theme.colors.background.secondary, theme);\n  const contextOutlineColor = tinycolor(theme.components.dashboard.background).setAlpha(0.7).toRgbString();\n  return {\n    logsRowLevel: css`\n      label: logs-row__level;\n      max-width: ${theme.spacing(1.25)};\n      cursor: default;\n      &::after {\n        content: '';\n        display: block;\n        position: absolute;\n        top: 1px;\n        bottom: 1px;\n        width: 3px;\n        left: ${theme.spacing(0.5)};\n      }\n    `,\n    // Compared to logsRowLevel we need to make error logs wider to accommodate the icon\n    logsRowWithError: css({\n      maxWidth: `${theme.spacing(1.5)}`,\n    }),\n    logsRowMatchHighLight: css`\n      label: logs-row__match-highlight;\n      background: inherit;\n      padding: inherit;\n      color: ${theme.components.textHighlight.text}\n      background-color: ${theme.components.textHighlight};\n    `,\n    logRows: css({\n      position: 'relative',\n    }),\n    logsRowsTable: css`\n      label: logs-rows;\n      font-family: ${theme.typography.fontFamilyMonospace};\n      font-size: ${theme.typography.bodySmall.fontSize};\n      width: 100%;\n      position: relative;\n    `,\n    logsRowsTableContain: css`\n      contain: strict;\n    `,\n    highlightBackground: css`\n      background-color: ${tinycolor(theme.colors.info.transparent).setAlpha(0.25).toString()};\n    `,\n    logsRow: css`\n      label: logs-row;\n      width: 100%;\n      cursor: pointer;\n      vertical-align: top;\n\n      &:hover {\n        .log-row-menu {\n          z-index: 1;\n        }\n\n        background: ${hoverBgColor};\n      }\n\n      td:not(.log-row-menu-cell):last-child {\n        width: 100%;\n      }\n\n      > td:not(.log-row-menu-cell) {\n        position: relative;\n        padding-right: ${theme.spacing(1)};\n        border-top: 1px solid transparent;\n        border-bottom: 1px solid transparent;\n        height: 100%;\n      }\n    `,\n    logsRowDuplicates: css`\n      label: logs-row__duplicates;\n      text-align: right;\n      width: 4em;\n      cursor: default;\n    `,\n    logIconError: css({\n      color: theme.colors.warning.main,\n      position: 'relative',\n      top: '-2px',\n    }),\n    logIconInfo: css({\n      color: theme.colors.info.main,\n      position: 'relative',\n      top: '-2px',\n    }),\n    logsRowToggleDetails: css`\n      label: logs-row-toggle-details__level;\n      font-size: 9px;\n      padding-top: 5px;\n      max-width: 15px;\n    `,\n    logsRowLocalTime: css`\n      label: logs-row__localtime;\n      white-space: nowrap;\n    `,\n    logsRowLabels: css`\n      label: logs-row__labels;\n      white-space: nowrap;\n      max-width: 22em;\n\n      /* This is to make the labels vertical align */\n      > span {\n        margin-top: 0.75px;\n      }\n    `,\n    logsRowMessage: css`\n      label: logs-row__message;\n      white-space: pre-wrap;\n      word-break: break-all;\n      overflow-wrap: anywhere;\n      width: 100%;\n      text-align: left;\n    `,\n    copyLogButton: css`\n      padding: 0 0 0 ${theme.spacing(0.5)};\n      height: ${theme.spacing(3)};\n      width: ${theme.spacing(3.25)};\n      line-height: ${theme.spacing(2.5)};\n      overflow: hidden;\n      &:hover {\n          background-color: ${colorManipulator.alpha(theme.colors.text.primary, 0.12)};\n        }\n      }\n    `,\n    //Log details specific CSS\n    logDetailsContainer: css`\n      label: logs-row-details-table;\n      border: 1px solid ${theme.colors.border.medium};\n      padding: 0 ${theme.spacing(1)} ${theme.spacing(1)};\n      border-radius: ${theme.shape.radius.default};\n      margin: ${theme.spacing(2.5)} ${theme.spacing(1)} ${theme.spacing(2.5)} ${theme.spacing(2)};\n      cursor: default;\n    `,\n    logDetailsTable: css`\n      label: logs-row-details-table;\n      line-height: 18px;\n      width: 100%;\n      td:last-child {\n        width: 100%;\n      }\n    `,\n    logsDetailsIcon: css`\n      label: logs-row-details__icon;\n      position: relative;\n      color: ${theme.v1.palette.gray3};\n      padding-top: 1px;\n      padding-bottom: 1px;\n      padding-right: ${theme.spacing(0.75)};\n    `,\n    logDetailsLabel: css`\n      label: logs-row-details__label;\n      max-width: 30em;\n      min-width: 20em;\n      padding: 0 ${theme.spacing(1)};\n      overflow-wrap: break-word;\n    `,\n    logDetailsHeading: css`\n      label: logs-row-details__heading;\n      font-weight: ${theme.typography.fontWeightBold};\n      padding: ${theme.spacing(1)} 0 ${theme.spacing(0.5)};\n    `,\n    logDetailsValue: css`\n      label: logs-row-details__row;\n      position: relative;\n      vertical-align: middle;\n      cursor: default;\n\n      &:hover {\n        background-color: ${hoverBgColor};\n      }\n    `,\n    // Log row\n    topVerticalAlign: css`\n      label: topVerticalAlign;\n      margin-top: -${theme.spacing(0.9)};\n      margin-left: -${theme.spacing(0.25)};\n    `,\n    detailsOpen: css`\n      &:hover {\n        background-color: ${styleMixins.hoverColor(theme.colors.background.primary, theme)};\n      }\n    `,\n    errorLogRow: css`\n      label: erroredLogRow;\n      color: ${theme.colors.text.secondary};\n    `,\n    // Log Row Message\n    positionRelative: css`\n      label: positionRelative;\n      position: relative;\n    `,\n    rowWithContext: css`\n      label: rowWithContext;\n      z-index: 1;\n      outline: 9999px solid ${contextOutlineColor};\n      display: inherit;\n    `,\n    horizontalScroll: css`\n      label: horizontalScroll;\n      white-space: pre;\n    `,\n    contextNewline: css`\n      display: block;\n      margin-left: 0px;\n    `,\n    rowMenu: css`\n      label: rowMenu;\n      display: flex;\n      flex-wrap: nowrap;\n      flex-direction: row;\n      align-content: flex-end;\n      justify-content: space-evenly;\n      align-items: center;\n      position: absolute;\n      top: 0;\n      bottom: auto;\n      background: ${theme.colors.background.primary};\n      box-shadow: ${theme.shadows.z3};\n      padding: ${theme.spacing(0.5, 1, 0.5, 1)};\n      z-index: 100;\n      gap: ${theme.spacing(0.5)};\n\n      & > button {\n        margin: 0;\n      }\n    `,\n    logRowMenuCell: css`\n      position: sticky;\n      z-index: ${theme.zIndex.dropdown};\n      margin-top: -${theme.spacing(0.125)};\n      right: 0px;\n\n      & > span {\n        transform: translateX(-100%);\n      }\n    `,\n    logLine: css`\n      background-color: transparent;\n      border: none;\n      diplay: inline;\n      font-family: ${theme.typography.fontFamilyMonospace};\n      font-size: ${theme.typography.bodySmall.fontSize};\n      letter-spacing: ${theme.typography.bodySmall.letterSpacing};\n      text-align: left;\n      padding: 0;\n      user-select: text;\n    `,\n    // Log details\n    logsRowLevelDetails: css`\n      label: logs-row__level_details;\n      &::after {\n        top: -3px;\n      }\n    `,\n    logDetails: css`\n      label: logDetailsDefaultCursor;\n      cursor: default;\n\n      &:hover {\n        background-color: ${theme.colors.background.primary};\n      }\n    `,\n    visibleRowMenu: css`\n      label: visibleRowMenu;\n      aspect-ratio: 1/1;\n      z-index: 90;\n    `,\n    linkButton: css`\n      label: linkButton;\n      > button {\n        padding-top: ${theme.spacing(0.5)};\n      }\n    `,\n    hidden: css`\n      label: hidden;\n      visibility: hidden;\n    `,\n    unPinButton: css`\n      height: ${theme.spacing(3)};\n      line-height: ${theme.spacing(2.5)};\n    `,\n  };\n});\n\nexport type LogRowStyles = ReturnType<typeof getLogRowStyles>;\n","import { css } from '@emotion/css';\nimport { useCallback } from 'react';\nimport * as React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Button, InlineSwitch, useStyles2 } from '@grafana/ui';\n\nexport type Props = {\n  wrapLines?: boolean;\n  onChangeWrapLines: (wrapLines: boolean) => void;\n  onScrollCenterClick: () => void;\n};\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    buttons: css({\n      display: 'flex',\n      gap: theme.spacing(1),\n    }),\n  };\n}\n\nexport const LogContextButtons = (props: Props) => {\n  const styles = useStyles2(getStyles);\n  const { wrapLines, onChangeWrapLines, onScrollCenterClick } = props;\n  const internalOnChangeWrapLines = useCallback(\n    (event: React.FormEvent<HTMLInputElement>) => {\n      const state = event.currentTarget.checked;\n      reportInteraction('grafana_explore_logs_log_context_toggle_lines_clicked', {\n        state,\n      });\n      onChangeWrapLines(state);\n    },\n    [onChangeWrapLines]\n  );\n\n  return (\n    <div className={styles.buttons}>\n      <InlineSwitch showLabel value={wrapLines} onChange={internalOnChangeWrapLines} label=\"Wrap lines\" />\n      <Button variant=\"secondary\" onClick={onScrollCenterClick}>\n        Center matched line\n      </Button>\n    </div>\n  );\n};\n","import { css, cx } from '@emotion/css';\nimport { partition } from 'lodash';\nimport { useCallback, useEffect, useLayoutEffect, useRef, useState } from 'react';\nimport * as React from 'react';\nimport { useAsync } from 'react-use';\n\nimport {\n  DataQueryResponse,\n  DataSourceWithLogsContextSupport,\n  GrafanaTheme2,\n  LogRowContextOptions,\n  LogRowContextQueryDirection,\n  LogRowModel,\n  LogsDedupStrategy,\n  LogsSortOrder,\n  dateTime,\n  TimeRange,\n  LoadingState,\n} from '@grafana/data';\nimport { config, reportInteraction } from '@grafana/runtime';\nimport { DataQuery, TimeZone } from '@grafana/schema';\nimport { Button, Modal, useTheme2 } from '@grafana/ui';\nimport store from 'app/core/store';\nimport { SETTINGS_KEYS } from 'app/features/explore/Logs/utils/logs';\nimport { splitOpen } from 'app/features/explore/state/main';\nimport { useDispatch } from 'app/types';\n\nimport { dataFrameToLogsModel } from '../../logsModel';\nimport { sortLogRows } from '../../utils';\nimport { LoadingIndicator } from '../LoadingIndicator';\nimport { LogRows } from '../LogRows';\n\nimport { LogContextButtons } from './LogContextButtons';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    modal: css`\n      width: 85vw;\n      ${theme.breakpoints.down('md')} {\n        width: 100%;\n      }\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n    `,\n    sticky: css`\n      position: sticky;\n      z-index: 1;\n      top: -1px;\n      bottom: -1px;\n    `,\n    entry: css`\n      & > td {\n        padding: ${theme.spacing(1)} 0 ${theme.spacing(1)} 0;\n      }\n      background: ${theme.colors.emphasize(theme.colors.background.secondary)};\n\n      & > table {\n        margin-bottom: 0;\n      }\n\n      & .log-row-menu {\n        margin-top: -6px;\n      }\n    `,\n    datasourceUi: css`\n      padding-bottom: ${theme.spacing(1.25)};\n      display: flex;\n      align-items: center;\n    `,\n    logRowGroups: css`\n      overflow: auto;\n      max-height: 75%;\n      align-self: stretch;\n      display: inline-block;\n      border: 1px solid ${theme.colors.border.weak};\n      border-radius: ${theme.shape.radius.default};\n      & > table {\n        min-width: 100%;\n      }\n    `,\n    flexColumn: css`\n      display: flex;\n      flex-direction: column;\n      padding: 0 ${theme.spacing(3)} ${theme.spacing(3)} ${theme.spacing(3)};\n    `,\n    flexRow: css`\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n      & > div:last-child {\n        margin-left: auto;\n      }\n    `,\n    noMarginBottom: css`\n      & > table {\n        margin-bottom: 0;\n      }\n    `,\n    hidden: css`\n      display: none;\n    `,\n    paddingTop: css`\n      padding-top: ${theme.spacing(1)};\n    `,\n    paddingBottom: css`\n      padding-bottom: ${theme.spacing(1)};\n    `,\n    link: css`\n      color: ${theme.colors.text.secondary};\n      font-size: ${theme.typography.bodySmall.fontSize};\n      :hover {\n        color: ${theme.colors.text.link};\n      }\n    `,\n    loadingCell: css`\n      position: sticky;\n      left: 50%;\n      display: inline-block;\n      transform: translateX(-50%);\n    `,\n  };\n};\n\ninterface LogRowContextModalProps {\n  row: LogRowModel;\n  open: boolean;\n  timeZone: TimeZone;\n  onClose: () => void;\n  getRowContext: (row: LogRowModel, options: LogRowContextOptions) => Promise<DataQueryResponse>;\n\n  getRowContextQuery?: (\n    row: LogRowModel,\n    options?: LogRowContextOptions,\n    cacheFilters?: boolean\n  ) => Promise<DataQuery | null>;\n  logsSortOrder: LogsSortOrder;\n  runContextQuery?: () => void;\n  getLogRowContextUi?: DataSourceWithLogsContextSupport['getLogRowContextUi'];\n}\n\ntype Section = {\n  loadingState: LoadingState;\n  rows: LogRowModel[];\n};\ntype Place = 'above' | 'below';\ntype Context = Record<Place, Section>;\n\nconst makeEmptyContext = (): Context => ({\n  above: { loadingState: LoadingState.NotStarted, rows: [] },\n  below: { loadingState: LoadingState.NotStarted, rows: [] },\n});\n\nconst getLoadMoreDirection = (place: Place, sortOrder: LogsSortOrder): LogRowContextQueryDirection => {\n  if (place === 'above' && sortOrder === LogsSortOrder.Descending) {\n    return LogRowContextQueryDirection.Forward;\n  }\n  if (place === 'below' && sortOrder === LogsSortOrder.Ascending) {\n    return LogRowContextQueryDirection.Forward;\n  }\n\n  return LogRowContextQueryDirection.Backward;\n};\n\ntype LoadCounter = Record<Place, number>;\n\nconst normalizeLogRowRefId = (row: LogRowModel, counter: LoadCounter): LogRowModel => {\n  // the datasoure plugins often create the context-query based on the row's dataframe's refId,\n  // by appending something to it. for example:\n  // - let's say the row's dataframe's refId is \"query\"\n  // - the datasource plugin will take \"query\" and append \"-context\" to it, so it becomes \"query-context\".\n  // - later we want to load even more lines, so we make a context query\n  // - the datasource plugin does the same transform again, but now the source is \"query-context\",\n  //   so the new refId becomes \"query-context-context\"\n  // - next time it becomes \"query-context-context-context\", and so on.\n  // we do not want refIds to grow unbounded.\n  // to avoid this, we set the refId to a value that does not grow.\n  // on the other hand, the refId is also used in generating the row's UID, so it is useful\n  // when the refId is not always the exact same string, otherwise UID duplication can occur,\n  // which may cause problems.\n  // so we go with an approach where the refId always changes, but does not grow.\n  return {\n    ...row,\n    dataFrame: {\n      ...row.dataFrame,\n      refId: `context_${counter.above}_${counter.below}`,\n    },\n  };\n};\n\nconst containsRow = (rows: LogRowModel[], row: LogRowModel) => {\n  return rows.some((r) => r.entry === row.entry && r.timeEpochNs === row.timeEpochNs);\n};\n\nconst PAGE_SIZE = 100;\n\nexport const LogRowContextModal: React.FunctionComponent<LogRowContextModalProps> = ({\n  row,\n  open,\n  logsSortOrder,\n  timeZone,\n  getLogRowContextUi,\n  getRowContextQuery,\n  onClose,\n  getRowContext,\n}) => {\n  const scrollElement = useRef<HTMLDivElement | null>(null);\n  const entryElement = useRef<HTMLTableRowElement | null>(null);\n  // We can not use `entryElement` to scroll to the right element because it's\n  // sticky. That's why we add another row and use this ref to scroll to that\n  // first.\n  const preEntryElement = useRef<HTMLTableRowElement | null>(null);\n\n  const prevScrollHeightRef = useRef<number | null>(null);\n  const prevClientHeightRef = useRef<number | null>(null);\n\n  const aboveLoadingElement = useRef<HTMLDivElement | null>(null);\n  const belowLoadingElement = useRef<HTMLDivElement | null>(null);\n\n  const loadCountRef = useRef<LoadCounter>({ above: 0, below: 0 });\n\n  const dispatch = useDispatch();\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n\n  const [sticky, setSticky] = useState(true);\n\n  // we need to keep both the \"above\" and \"below\" rows\n  // in the same react-state, to be able to atomically change both\n  // at the same time.\n  // we create the `setSection` convenience function to adjust any\n  // part of it easily.\n  const [context, setContext] = useState<Context>(makeEmptyContext());\n  const setSection = (place: Place, fun: (s: Section) => Section) => {\n    setContext((c) => {\n      const newContext = { ...c };\n      newContext[place] = fun(c[place]);\n      return newContext;\n    });\n  };\n\n  // this is used to \"cancel\" the ongoing load-more requests.\n  // whenever we want to cancel them, we increment this number.\n  // and when those requests return, we check if the number\n  // is still the same as when we started. and if it is not the same,\n  // we ignore the results.\n  //\n  // best would be to literally cancel those requests,\n  // but right now there's no way with the current logs-context API.\n  const generationRef = useRef(1);\n\n  const [contextQuery, setContextQuery] = useState<DataQuery | null>(null);\n  const [wrapLines, setWrapLines] = useState(\n    store.getBool(SETTINGS_KEYS.logContextWrapLogMessage, store.getBool(SETTINGS_KEYS.wrapLogMessage, true))\n  );\n  const getFullTimeRange = useCallback(() => {\n    const { below, above } = context;\n    const allRows = sortLogRows([...below.rows, row, ...above.rows], LogsSortOrder.Ascending);\n    const fromMs = allRows[0].timeEpochMs;\n    let toMs = allRows[allRows.length - 1].timeEpochMs;\n    // In case we have a lot of logs and from and to have same millisecond\n    // we add 1 millisecond to toMs to make sure we have a range\n    if (fromMs === toMs) {\n      toMs += 1;\n    }\n    const from = dateTime(fromMs);\n    const to = dateTime(toMs);\n\n    const range: TimeRange = {\n      from,\n      to,\n      raw: {\n        from,\n        to,\n      },\n    };\n    return range;\n  }, [context, row]);\n\n  const updateContextQuery = useCallback(async () => {\n    const contextQuery = getRowContextQuery ? await getRowContextQuery(row) : null;\n    setContextQuery(contextQuery);\n  }, [row, getRowContextQuery]);\n\n  const updateResults = async () => {\n    await updateContextQuery();\n    setContext(makeEmptyContext());\n    loadCountRef.current = { above: 0, below: 0 };\n    generationRef.current += 1; // results from currently running loadMore calls will be ignored\n  };\n\n  const loadMore = async (place: Place, allRows: LogRowModel[]): Promise<LogRowModel[]> => {\n    loadCountRef.current[place] += 1;\n    const refRow = allRows.at(place === 'above' ? 0 : -1);\n    if (refRow == null) {\n      throw new Error('should never happen. the array always contains at least 1 item (the middle row)');\n    }\n\n    reportInteraction('grafana_explore_logs_log_context_load_more_called', {\n      datasourceType: refRow.datasourceType,\n      above: loadCountRef.current.above,\n      below: loadCountRef.current.below,\n    });\n\n    const direction = getLoadMoreDirection(place, logsSortOrder);\n\n    const result = await getRowContext(normalizeLogRowRefId(refRow, loadCountRef.current), {\n      limit: PAGE_SIZE,\n      direction,\n    });\n    const newRows = dataFrameToLogsModel(result.data).rows;\n\n    if (logsSortOrder === LogsSortOrder.Ascending) {\n      newRows.reverse();\n    }\n\n    const out = newRows.filter((r) => {\n      return !containsRow(allRows, r);\n    });\n\n    return out;\n  };\n\n  useEffect(() => {\n    if (open) {\n      updateContextQuery();\n    }\n  }, [updateContextQuery, open]);\n\n  const [displayedFields, setDisplayedFields] = useState<string[]>([]);\n\n  const showField = (key: string) => {\n    const index = displayedFields.indexOf(key);\n\n    if (index === -1) {\n      setDisplayedFields([...displayedFields, key]);\n    }\n  };\n\n  const hideField = (key: string) => {\n    const index = displayedFields.indexOf(key);\n\n    if (index > -1) {\n      displayedFields.splice(index, 1);\n      setDisplayedFields([...displayedFields]);\n    }\n  };\n\n  const maybeLoadMore = async (place: Place) => {\n    const { below, above } = context;\n    const section = context[place];\n    if (section.loadingState === LoadingState.Loading) {\n      return;\n    }\n\n    setSection(place, (section) => ({\n      ...section,\n      loadingState: LoadingState.Loading,\n    }));\n\n    const currentGen = generationRef.current;\n    try {\n      // we consider all the currently existing rows, even the original row,\n      // this way this array of rows will never be empty\n      const allRows = [...above.rows, row, ...below.rows];\n\n      const newRows = (await loadMore(place, allRows)).map((r) =>\n        // apply the original row's searchWords to all the rows for highlighting\n        !r.searchWords || !r.searchWords?.length ? { ...r, searchWords: row.searchWords } : r\n      );\n      const [older, newer] = partition(newRows, (newRow) => newRow.timeEpochNs > row.timeEpochNs);\n      const newAbove = logsSortOrder === LogsSortOrder.Ascending ? newer : older;\n      const newBelow = logsSortOrder === LogsSortOrder.Ascending ? older : newer;\n\n      if (currentGen === generationRef.current) {\n        setContext((c) => {\n          // we should only modify the row-arrays if necessary\n          const sortedNewAbove =\n            newAbove.length > 0 ? sortLogRows([...newAbove, ...c.above.rows], logsSortOrder) : c.above.rows;\n          const sortedNewBelow =\n            newBelow.length > 0 ? sortLogRows([...c.below.rows, ...newBelow], logsSortOrder) : c.below.rows;\n          return {\n            above: {\n              rows: sortedNewAbove,\n              loadingState:\n                place === 'above'\n                  ? newRows.length === 0\n                    ? LoadingState.Done\n                    : LoadingState.NotStarted\n                  : c.above.loadingState,\n            },\n            below: {\n              rows: sortedNewBelow,\n              loadingState:\n                place === 'below'\n                  ? newRows.length === 0\n                    ? LoadingState.Done\n                    : LoadingState.NotStarted\n                  : c.below.loadingState,\n            },\n          };\n        });\n      }\n    } catch {\n      setSection(place, (section) => ({\n        rows: section.rows,\n        loadingState: LoadingState.Error,\n      }));\n    }\n  };\n\n  const onScrollHit = async (entries: IntersectionObserverEntry[], observer: IntersectionObserver) => {\n    for (const entry of entries) {\n      // If the element is not intersecting, skip to the next one\n      if (!entry.isIntersecting) {\n        continue;\n      }\n\n      const targetElement = entry.target;\n\n      if (targetElement === aboveLoadingElement.current) {\n        maybeLoadMore('above');\n      } else if (targetElement === belowLoadingElement.current) {\n        maybeLoadMore('below');\n      }\n    }\n  };\n\n  useEffect(() => {\n    const scroll = scrollElement.current;\n    const aboveElem = aboveLoadingElement.current;\n    const belowElem = belowLoadingElement.current;\n\n    if (scroll == null) {\n      // should not happen, but need to make typescript happy\n      return;\n    }\n\n    const observer = new IntersectionObserver(onScrollHit, { root: scroll });\n\n    if (aboveElem != null) {\n      observer.observe(aboveElem);\n    }\n\n    if (belowElem != null) {\n      observer.observe(belowElem);\n    }\n\n    return () => {\n      observer.disconnect();\n    };\n  }); // on every render, why not\n\n  const scrollToCenter = useCallback(() => {\n    preEntryElement.current?.scrollIntoView({ block: 'center' });\n    entryElement.current?.scrollIntoView({ block: 'center' });\n  }, [preEntryElement, entryElement]);\n\n  useLayoutEffect(() => {\n    const scrollE = scrollElement.current;\n    if (scrollE == null) {\n      return;\n    }\n\n    const prevClientHeight = prevClientHeightRef.current;\n    const currentClientHeight = scrollE.clientHeight;\n    prevClientHeightRef.current = currentClientHeight;\n    if (prevClientHeight !== currentClientHeight) {\n      // height has changed, we scroll to the center\n      scrollToCenter();\n      return;\n    }\n\n    // if the newly loaded content is part of the initial load of `above` and `below`,\n    // we scroll to center, to keep the chosen log-row centered\n    if (loadCountRef.current.above <= 1 && loadCountRef.current.below <= 1) {\n      scrollToCenter();\n      return;\n    }\n\n    const prevScrollHeight = prevScrollHeightRef.current;\n    const currentHeight = scrollE.scrollHeight;\n    prevScrollHeightRef.current = currentHeight;\n    if (prevScrollHeight != null) {\n      const newScrollTop = scrollE.scrollTop + (currentHeight - prevScrollHeight);\n      scrollE.scrollTop = newScrollTop;\n    }\n  }, [context.above.rows, scrollToCenter]);\n\n  useAsync(updateContextQuery, [getRowContextQuery, row]);\n\n  const loadingStateAbove = context.above.loadingState;\n  const loadingStateBelow = context.below.loadingState;\n\n  return (\n    <Modal\n      isOpen={open}\n      title=\"Log context\"\n      contentClassName={styles.flexColumn}\n      className={styles.modal}\n      onDismiss={onClose}\n    >\n      {config.featureToggles.logsContextDatasourceUi && getLogRowContextUi && (\n        <div className={styles.datasourceUi}>{getLogRowContextUi(row, updateResults)}</div>\n      )}\n      <div className={cx(styles.flexRow, styles.paddingBottom)}>\n        <div>\n          <LogContextButtons\n            wrapLines={wrapLines}\n            onChangeWrapLines={setWrapLines}\n            onScrollCenterClick={scrollToCenter}\n          />\n        </div>\n      </div>\n      <div ref={scrollElement} className={styles.logRowGroups}>\n        <table>\n          <tbody>\n            <tr>\n              <td className={styles.loadingCell}>\n                {loadingStateAbove !== LoadingState.Done && loadingStateAbove !== LoadingState.Error && (\n                  <div ref={aboveLoadingElement}>\n                    <LoadingIndicator adjective=\"newer\" />\n                  </div>\n                )}\n                {loadingStateAbove === LoadingState.Error && <div>Error loading log more logs.</div>}\n                {loadingStateAbove === LoadingState.Done && <div>No more logs available.</div>}\n              </td>\n            </tr>\n            <tr>\n              <td className={styles.noMarginBottom}>\n                <LogRows\n                  logRows={context.above.rows}\n                  dedupStrategy={LogsDedupStrategy.none}\n                  showLabels={store.getBool(SETTINGS_KEYS.showLabels, false)}\n                  showTime={store.getBool(SETTINGS_KEYS.showTime, true)}\n                  wrapLogMessage={wrapLines}\n                  prettifyLogMessage={store.getBool(SETTINGS_KEYS.prettifyLogMessage, false)}\n                  enableLogDetails={true}\n                  timeZone={timeZone}\n                  displayedFields={displayedFields}\n                  onClickShowField={showField}\n                  onClickHideField={hideField}\n                />\n              </td>\n            </tr>\n            <tr ref={preEntryElement}></tr>\n            <tr ref={entryElement} className={cx(styles.entry, sticky ? styles.sticky : null)} data-testid=\"entry-row\">\n              <td className={styles.noMarginBottom}>\n                <LogRows\n                  logRows={[row]}\n                  dedupStrategy={LogsDedupStrategy.none}\n                  showLabels={store.getBool(SETTINGS_KEYS.showLabels, false)}\n                  showTime={store.getBool(SETTINGS_KEYS.showTime, true)}\n                  wrapLogMessage={wrapLines}\n                  prettifyLogMessage={store.getBool(SETTINGS_KEYS.prettifyLogMessage, false)}\n                  enableLogDetails={true}\n                  timeZone={timeZone}\n                  displayedFields={displayedFields}\n                  onClickShowField={showField}\n                  onClickHideField={hideField}\n                  onUnpinLine={() => setSticky(false)}\n                  onPinLine={() => setSticky(true)}\n                  pinnedRowId={sticky ? row.uid : undefined}\n                  overflowingContent={true}\n                />\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <>\n                  <LogRows\n                    logRows={context.below.rows}\n                    dedupStrategy={LogsDedupStrategy.none}\n                    showLabels={store.getBool(SETTINGS_KEYS.showLabels, false)}\n                    showTime={store.getBool(SETTINGS_KEYS.showTime, true)}\n                    wrapLogMessage={wrapLines}\n                    prettifyLogMessage={store.getBool(SETTINGS_KEYS.prettifyLogMessage, false)}\n                    enableLogDetails={true}\n                    timeZone={timeZone}\n                    displayedFields={displayedFields}\n                    onClickShowField={showField}\n                    onClickHideField={hideField}\n                  />\n                </>\n              </td>\n            </tr>\n            <tr>\n              <td className={styles.loadingCell}>\n                {loadingStateBelow !== LoadingState.Done && loadingStateBelow !== LoadingState.Error && (\n                  <div ref={belowLoadingElement}>\n                    <LoadingIndicator adjective=\"older\" />\n                  </div>\n                )}\n                {loadingStateBelow === LoadingState.Error && <div>Error loading log more logs.</div>}\n                {loadingStateBelow === LoadingState.Done && <div>No more logs available.</div>}\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n\n      <Modal.ButtonRow>\n        {contextQuery?.datasource?.uid && (\n          <Button\n            variant=\"secondary\"\n            onClick={async () => {\n              let rowId = row.uid;\n              if (row.dataFrame.refId) {\n                // the orignal row has the refid from the base query and not the refid from the context query, so we need to replace it.\n                rowId = row.uid.replace(row.dataFrame.refId, contextQuery.refId);\n              }\n\n              dispatch(\n                splitOpen({\n                  queries: [contextQuery],\n                  range: getFullTimeRange(),\n                  datasourceUid: contextQuery.datasource!.uid!,\n                  panelsState: {\n                    logs: {\n                      id: rowId,\n                    },\n                  },\n                })\n              );\n              onClose();\n              reportInteraction('grafana_explore_logs_log_context_open_split_view_clicked', {\n                datasourceType: row.datasourceType,\n                logRowUid: row.uid,\n              });\n            }}\n          >\n            Open in split view\n          </Button>\n        )}\n      </Modal.ButtonRow>\n    </Modal>\n  );\n};\n"],"names":["SETTINGS_KEYS","visualisationTypeKey","LoadingIndicator","adjective","text","loadingIndicatorStyles","HIDDEN_LABELS","LogLabels","labels","emptyMessage","styles","getStyles","displayLabels","label","value","labelValue","LogLabel","LogLabelsList","tooltip","children","ref","theme","convertCSSToStyle","css","accumulated","line","match","key","_","character","UnThemedLogMessageAnsi","props","state","span","chunks","chunk","index","chunkText","LogMessageAnsi","LogRowMenuCell","logText","onOpenContext","onPermalinkClick","onPinLine","onUnpinLine","pinLineButtonTooltipTitle","pinned","row","showContextToggle","mouseIsOver","onBlur","getRowContextQuery","shouldShowContextToggle","onLogRowClick","e","onShowContextClick","event","win","query","url","handleBlur","getLogText","MAX_CHARACTERS","LogMessage","hasAnsi","entry","highlights","needsHighlighter","searchWords","highlight","restructureLog","prettifyLogMessage","wrapLogMessage","expanded","LogRowMessage","raw","restructuredEntry","shouldShowMenu","PopoverMenu","x","y","onClickFilterString","onClickFilterOutString","selection","close","containerRef","handleEscape","Menu","track","action","selectionLength","dataSourceType","UniqueKeyMaker","proposedKey","maybeKey","LogLabelStatsRow","active","count","proportion","style","percent","barStyle","className","STATS_ROW_LIMIT","stylesFactory","UnThemedLogLabelStats","rowCount","stats","isLabel","topRows","activeRow","otherRows","insertActiveRow","otherCount","sum","total","otherProportion","stat","LogLabelStats","UnThemedLogDetailsRow","onClickShowDetectedField","parsedKeys","onClickHideDetectedField","isFilterLabelActive","parsedValues","onClickFilterLabel","onClickFilterOutLabel","getStats","fieldStats","fieldCount","app","showFieldsStats","val","ClipboardButton","showCopy","i","links","displayedFields","disableActions","rowStyles","getLogRowStyles","singleKey","singleVal","hasFilteringFunctionality","refIdTooltip","isMultiParsedValueWithNoContent","toggleFieldButton","IconButton","AsyncIconButton","link","originalOnClick","origin","DataLinkButton","isActive","tooltipSuffix","rest","setActive","LogDetailsRow","UnThemedLogDetails","hasError","getRows","showDuplicates","onClickShowField","onClickHideField","getFieldLinks","levelStyles","labelsAvailable","fieldsAndLinks","fieldsWithLinks","f","displayedFieldsWithLinks","hiddenFieldsWithLinks","fieldsWithLinksFromVariableMap","fieldsWithLinksAvailable","fields","fieldsAvailable","levelClassName","field","keys","values","fieldIndex","LogDetails","LogRowMessageDisplayedFields","detectedFields","wrapClassName","displayedFieldsStyles","parsedKey","UnThemedLogRow","prevState","mounted","permalinkedRowId","scrollIntoView","containerRendered","forceEscape","epochMs","enableLogDetails","showLabels","showTime","showDetails","showingContext","permalinked","errorMessage","sampleMessage","isSampled","logRowBackground","logRowDetailsBackground","processedRow","Tooltip","Icon","LogRow","PREVIEW_LIMIT","UnThemedLogRows","onClose","MENU_WIDTH","MENU_HEIGHT","orderedRows","logRows","logsSortOrder","config","previewLimit","renderAll","deduplicatedRows","dedupStrategy","pinnedLogs","dedupedRows","hasData","dedupCount","processedRows","firstRows","lastRows","keyMaker","logId","LogRows","getLogLevelStyles","logLevel","logColor","hoverBgColor","contextOutlineColor","LogContextButtons","wrapLines","onChangeWrapLines","onScrollCenterClick","internalOnChangeWrapLines","Button","makeEmptyContext","getLoadMoreDirection","place","sortOrder","normalizeLogRowRefId","counter","containsRow","rows","r","PAGE_SIZE","LogRowContextModal","open","timeZone","getLogRowContextUi","getRowContext","scrollElement","entryElement","preEntryElement","prevScrollHeightRef","prevClientHeightRef","aboveLoadingElement","belowLoadingElement","loadCountRef","dispatch","sticky","setSticky","context","setContext","setSection","fun","c","newContext","generationRef","contextQuery","setContextQuery","setWrapLines","store","getFullTimeRange","below","above","allRows","fromMs","toMs","from","to","updateContextQuery","updateResults","loadMore","refRow","direction","result","newRows","setDisplayedFields","showField","hideField","maybeLoadMore","section","currentGen","older","newer","newRow","newAbove","newBelow","sortedNewAbove","sortedNewBelow","onScrollHit","entries","observer","targetElement","scroll","aboveElem","belowElem","scrollToCenter","scrollE","prevClientHeight","currentClientHeight","prevScrollHeight","currentHeight","newScrollTop","useAsync","loadingStateAbove","loadingStateBelow","Modal","rowId"],"sourceRoot":""}