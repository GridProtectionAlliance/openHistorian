{"version":3,"file":"SignupInvited.2fae628305149021bc56.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/Form/Form.tsx","webpack://grafana/./public/app/features/admin/utils.ts","webpack://grafana/./public/app/features/invites/SignupInvited.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport { HTMLProps, useEffect } from 'react';\nimport * as React from 'react';\nimport {\n  useForm,\n  Mode,\n  DefaultValues,\n  SubmitHandler,\n  FieldValues,\n  UseFormReturn,\n  FieldErrors,\n  FieldPath,\n} from 'react-hook-form';\n\nexport type FormAPI<T extends FieldValues> = Omit<UseFormReturn<T>, 'handleSubmit'> & {\n  errors: FieldErrors<T>;\n};\n\ninterface FormProps<T extends FieldValues> extends Omit<HTMLProps<HTMLFormElement>, 'onSubmit' | 'children'> {\n  validateOn?: Mode;\n  validateOnMount?: boolean;\n  validateFieldsOnMount?: FieldPath<T> | Array<FieldPath<T>>;\n  defaultValues?: DefaultValues<T>;\n  onSubmit: SubmitHandler<T>;\n  children: (api: FormAPI<T>) => React.ReactNode;\n  /** Sets max-width for container. Use it instead of setting individual widths on inputs.*/\n  maxWidth?: number | 'none';\n}\n\nexport function Form<T extends FieldValues>({\n  defaultValues,\n  onSubmit,\n  validateOnMount = false,\n  validateFieldsOnMount,\n  children,\n  validateOn = 'onSubmit',\n  maxWidth = 600,\n  ...htmlProps\n}: FormProps<T>) {\n  const { handleSubmit, trigger, formState, ...rest } = useForm<T>({\n    mode: validateOn,\n    defaultValues,\n  });\n\n  useEffect(() => {\n    if (validateOnMount) {\n      trigger(validateFieldsOnMount);\n    }\n  }, [trigger, validateFieldsOnMount, validateOnMount]);\n\n  return (\n    <form\n      className={css({\n        maxWidth: maxWidth !== 'none' ? maxWidth + 'px' : maxWidth,\n        width: '100%',\n      })}\n      onSubmit={handleSubmit(onSubmit)}\n      {...htmlProps}\n    >\n      {children({ errors: formState.errors, formState, trigger, ...rest })}\n    </form>\n  );\n}\n","import { config } from '@grafana/runtime/src';\n\n// https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address\nexport const w3cStandardEmailValidator =\n  /^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n\nexport function isTrial() {\n  const expiry = config.licenseInfo?.trialExpiry;\n  return !!(expiry && expiry > 0);\n}\n\nexport const highlightTrial = () => isTrial() && config.featureToggles.featureHighlights;\n","import { css, cx } from '@emotion/css';\nimport { useState } from 'react';\nimport { useParams } from 'react-router-dom-v5-compat';\nimport { useAsync } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { Button, Field, Input, useStyles2 } from '@grafana/ui';\nimport { Form } from 'app/core/components/Form/Form';\nimport { Page } from 'app/core/components/Page/Page';\nimport { getConfig } from 'app/core/config';\nimport { contextSrv } from 'app/core/core';\n\nimport { w3cStandardEmailValidator } from '../admin/utils';\n\ninterface FormModel {\n  email: string;\n  name?: string;\n  username: string;\n  password?: string;\n}\n\nconst navModel = {\n  main: {\n    icon: 'grafana' as const,\n    text: 'Invite',\n    subTitle: 'Register your Grafana account',\n    breadcrumbs: [{ title: 'Login', url: 'login' }],\n  },\n  node: {\n    text: '',\n  },\n};\n\nexport const SignupInvitedPage = () => {\n  const { code } = useParams();\n  const [initFormModel, setInitFormModel] = useState<FormModel>();\n  const [greeting, setGreeting] = useState<string>();\n  const [invitedBy, setInvitedBy] = useState<string>();\n  const styles = useStyles2(getStyles);\n\n  useAsync(async () => {\n    const invite = await getBackendSrv().get(`/api/user/invite/${code}`);\n\n    setInitFormModel({\n      email: invite.email,\n      name: invite.name,\n      username: invite.email,\n    });\n\n    setGreeting(invite.name || invite.email || invite.username);\n    setInvitedBy(invite.invitedBy);\n  }, [code]);\n\n  const onSubmit = async (formData: FormModel) => {\n    await getBackendSrv().post('/api/user/invite/complete', { ...formData, inviteCode: code });\n    window.location.href = getConfig().appSubUrl + '/';\n  };\n\n  if (!initFormModel) {\n    return null;\n  }\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        <h3 className=\"page-sub-heading\">Hello {greeting || 'there'}.</h3>\n\n        <div className={cx('modal-tagline', styles.tagline)}>\n          <em>{invitedBy || 'Someone'}</em> has invited you to join Grafana and the organization{' '}\n          <span className=\"highlight-word\">{contextSrv.user.orgName}</span>\n          <br />\n          Please complete the following and choose a password to accept your invitation and continue:\n        </div>\n        <Form defaultValues={initFormModel} onSubmit={onSubmit}>\n          {({ register, errors }) => (\n            <>\n              <Field invalid={!!errors.email} error={errors.email && errors.email.message} label=\"Email\">\n                <Input\n                  placeholder=\"email@example.com\"\n                  {...register('email', {\n                    required: 'Email is required',\n                    pattern: {\n                      value: w3cStandardEmailValidator,\n                      message: 'Email is invalid',\n                    },\n                  })}\n                />\n              </Field>\n              <Field invalid={!!errors.name} error={errors.name && errors.name.message} label=\"Name\">\n                <Input placeholder=\"Name (optional)\" {...register('name')} />\n              </Field>\n              <Field invalid={!!errors.username} error={errors.username && errors.username.message} label=\"Username\">\n                <Input {...register('username', { required: 'Username is required' })} placeholder=\"Username\" />\n              </Field>\n              <Field invalid={!!errors.password} error={errors.password && errors.password.message} label=\"Password\">\n                <Input\n                  {...register('password', { required: 'Password is required' })}\n                  type=\"password\"\n                  placeholder=\"Password\"\n                />\n              </Field>\n\n              <Button type=\"submit\">Sign up</Button>\n            </>\n          )}\n        </Form>\n      </Page.Contents>\n    </Page>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  tagline: css({\n    paddingBottom: theme.spacing(3),\n  }),\n});\n\nexport default SignupInvitedPage;\n"],"names":["Form","defaultValues","onSubmit","validateOnMount","validateFieldsOnMount","children","validateOn","maxWidth","htmlProps","handleSubmit","trigger","formState","rest","w3cStandardEmailValidator","isTrial","expiry","highlightTrial","navModel","SignupInvitedPage","code","initFormModel","setInitFormModel","greeting","setGreeting","invitedBy","setInvitedBy","styles","getStyles","invite","formData","register","errors","theme"],"sourceRoot":""}