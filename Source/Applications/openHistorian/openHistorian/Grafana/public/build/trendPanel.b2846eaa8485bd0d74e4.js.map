{"version":3,"file":"trendPanel.b2846eaa8485bd0d74e4.js","mappings":"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","sources":["webpack://grafana/./packages/grafana-ui/src/components/VizTooltip/VizTooltipContent.tsx","webpack://grafana/./packages/grafana-ui/src/components/Actions/ActionButton.tsx","webpack://grafana/./packages/grafana-ui/src/components/VizTooltip/VizTooltipFooter.tsx","webpack://grafana/./packages/grafana-ui/src/components/VizTooltip/VizTooltipHeader.tsx","webpack://grafana/./packages/grafana-ui/src/components/VizTooltip/VizTooltipColorIndicator.tsx","webpack://grafana/./packages/grafana-ui/src/components/VizTooltip/VizTooltipRow.tsx","webpack://grafana/./packages/grafana-ui/src/components/VizTooltip/VizTooltipWrapper.tsx","webpack://grafana/./public/app/features/actions/utils.ts","webpack://grafana/./public/app/plugins/panel/canvas/panelcfg.gen.ts","webpack://grafana/./public/app/plugins/panel/status-history/utils.ts","webpack://grafana/./public/app/plugins/panel/timeseries/utils.ts","webpack://grafana/./public/app/plugins/panel/trend/TrendPanel.tsx","webpack://grafana/./public/app/plugins/panel/trend/suggestions.ts","webpack://grafana/./public/app/plugins/panel/trend/module.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport { CSSProperties, ReactNode } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport { useStyles2 } from '../../themes';\n\nimport { VizTooltipRow } from './VizTooltipRow';\nimport { VizTooltipItem } from './types';\n\ninterface VizTooltipContentProps {\n  items: VizTooltipItem[];\n  children?: ReactNode;\n  scrollable?: boolean;\n  isPinned: boolean;\n  maxHeight?: number;\n}\n\nexport const VizTooltipContent = ({\n  items,\n  children,\n  isPinned,\n  scrollable = false,\n  maxHeight,\n}: VizTooltipContentProps) => {\n  const styles = useStyles2(getStyles);\n\n  const scrollableStyle: CSSProperties = scrollable\n    ? {\n        maxHeight: maxHeight,\n        overflowY: 'auto',\n      }\n    : {};\n\n  return (\n    <div className={styles.wrapper} style={scrollableStyle}>\n      {items.map(({ label, value, color, colorIndicator, colorPlacement, isActive, lineStyle }, i) => (\n        <VizTooltipRow\n          key={i}\n          label={label}\n          value={value}\n          color={color}\n          colorIndicator={colorIndicator}\n          colorPlacement={colorPlacement}\n          isActive={isActive}\n          justify={'space-between'}\n          isPinned={isPinned}\n          lineStyle={lineStyle}\n          showValueScroll={!scrollable}\n        />\n      ))}\n      {children}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css({\n    display: 'flex',\n    flexDirection: 'column',\n    flex: 1,\n    gap: 2,\n    borderTop: `1px solid ${theme.colors.border.medium}`,\n    padding: theme.spacing(1),\n  }),\n});\n","import { ActionModel, Field } from '@grafana/data';\n\nimport { Button, ButtonProps } from '../Button';\n\ntype ActionButtonProps = ButtonProps & {\n  action: ActionModel<Field>;\n};\n\n/**\n * @internal\n */\nexport function ActionButton({ action, ...buttonProps }: ActionButtonProps) {\n  return (\n    <Button variant=\"primary\" size=\"sm\" onClick={action.onClick} {...buttonProps}>\n      {action.title}\n    </Button>\n  );\n}\n","import { css } from '@emotion/css';\n\nimport { ActionModel, Field, GrafanaTheme2, LinkModel } from '@grafana/data';\n\nimport { Button, DataLinkButton, Stack } from '..';\nimport { useStyles2 } from '../../themes';\nimport { ActionButton } from '../Actions/ActionButton';\n\ninterface VizTooltipFooterProps {\n  dataLinks: Array<LinkModel<Field>>;\n  actions?: Array<ActionModel<Field>>;\n  annotate?: () => void;\n}\n\nexport const ADD_ANNOTATION_ID = 'add-annotation-button';\n\nconst renderDataLinks = (dataLinks: LinkModel[], styles: ReturnType<typeof getStyles>) => {\n  return (\n    <Stack direction=\"column\" justifyContent=\"flex-start\" gap={0.5}>\n      {dataLinks.map((link, i) => (\n        <DataLinkButton link={link} key={i} buttonProps={{ className: styles.dataLinkButton, fill: 'text' }} />\n      ))}\n    </Stack>\n  );\n};\n\nconst renderActions = (actions: ActionModel[]) => {\n  return (\n    <Stack direction=\"column\" justifyContent=\"flex-start\">\n      {actions.map((action, i) => (\n        <ActionButton key={i} action={action} variant=\"secondary\" />\n      ))}\n    </Stack>\n  );\n};\n\nexport const VizTooltipFooter = ({ dataLinks, actions, annotate }: VizTooltipFooterProps) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.wrapper}>\n      {dataLinks.length > 0 && <div className={styles.dataLinks}>{renderDataLinks(dataLinks, styles)}</div>}\n      {actions && actions.length > 0 && <div className={styles.dataLinks}>{renderActions(actions)}</div>}\n      {annotate != null && (\n        <div className={styles.addAnnotations}>\n          <Button icon=\"comment-alt\" variant=\"secondary\" size=\"sm\" id={ADD_ANNOTATION_ID} onClick={annotate}>\n            Add annotation\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css({\n    display: 'flex',\n    flexDirection: 'column',\n    flex: 1,\n    padding: theme.spacing(0),\n  }),\n  dataLinks: css({\n    borderTop: `1px solid ${theme.colors.border.medium}`,\n    padding: theme.spacing(1),\n  }),\n  addAnnotations: css({\n    borderTop: `1px solid ${theme.colors.border.medium}`,\n    padding: theme.spacing(1),\n  }),\n  dataLinkButton: css({\n    cursor: 'pointer',\n    '&:hover': {\n      textDecoration: 'underline',\n      background: 'none',\n    },\n  }),\n});\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport { useStyles2 } from '../../themes';\n\nimport { VizTooltipRow } from './VizTooltipRow';\nimport { VizTooltipItem } from './types';\n\ninterface Props {\n  item: VizTooltipItem;\n  isPinned: boolean;\n}\nexport const VizTooltipHeader = ({ item, isPinned }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const { label, value, color, colorIndicator } = item;\n\n  return (\n    <div className={styles.wrapper}>\n      <VizTooltipRow\n        label={label}\n        value={value}\n        color={color}\n        colorIndicator={colorIndicator}\n        marginRight={'22px'}\n        isPinned={isPinned}\n      />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css({\n    display: 'flex',\n    flexDirection: 'column',\n    flex: 1,\n    padding: theme.spacing(1),\n    lineHeight: 1,\n  }),\n});\n","import { css, cx } from '@emotion/css';\n\nimport { FALLBACK_COLOR, GrafanaTheme2 } from '@grafana/data';\nimport { LineStyle } from '@grafana/schema';\n\nimport { useStyles2 } from '../../themes';\nimport { SeriesIcon } from '../VizLegend/SeriesIcon';\n\nimport { ColorIndicator, DEFAULT_COLOR_INDICATOR } from './types';\nimport { getColorIndicatorClass } from './utils';\n\nexport enum ColorIndicatorPosition {\n  Leading,\n  Trailing,\n}\n\ninterface Props {\n  color?: string;\n  colorIndicator?: ColorIndicator;\n  position?: ColorIndicatorPosition;\n  lineStyle?: LineStyle;\n}\n\nexport type ColorIndicatorStyles = ReturnType<typeof getStyles>;\n\nexport const VizTooltipColorIndicator = ({\n  color = FALLBACK_COLOR,\n  colorIndicator = DEFAULT_COLOR_INDICATOR,\n  position = ColorIndicatorPosition.Leading,\n  lineStyle,\n}: Props) => {\n  const styles = useStyles2(getStyles);\n\n  if (colorIndicator === ColorIndicator.series) {\n    return (\n      <SeriesIcon\n        color={color}\n        lineStyle={lineStyle}\n        className={position === ColorIndicatorPosition.Leading ? styles.leading : styles.trailing}\n      />\n    );\n  }\n\n  return (\n    <span\n      style={{ backgroundColor: color }}\n      className={cx(\n        position === ColorIndicatorPosition.Leading ? styles.leading : styles.trailing,\n        getColorIndicatorClass(colorIndicator, styles)\n      )}\n    />\n  );\n};\n\n// @TODO Update classes/add svgs\nconst getStyles = (theme: GrafanaTheme2) => ({\n  leading: css({\n    marginRight: theme.spacing(0.5),\n  }),\n  trailing: css({\n    marginLeft: theme.spacing(0.5),\n  }),\n  value: css({\n    width: '12px',\n    height: '12px',\n    borderRadius: theme.shape.radius.default,\n    fontWeight: 500,\n    minWidth: '12px',\n  }),\n  hexagon: css({}),\n  pie_1_4: css({}),\n  pie_2_4: css({}),\n  pie_3_4: css({}),\n  marker_sm: css({\n    width: '4px',\n    height: '4px',\n    borderRadius: theme.shape.radius.circle,\n    minWidth: '4px',\n  }),\n  marker_md: css({\n    width: '8px',\n    height: '8px',\n    borderRadius: theme.shape.radius.circle,\n    minWidth: '8px',\n  }),\n  marker_lg: css({\n    width: '12px',\n    height: '12px',\n    borderRadius: theme.shape.radius.circle,\n    minWidth: '12px',\n  }),\n});\n","import { css, cx } from '@emotion/css';\nimport { CSSProperties, ReactNode, useEffect, useRef, useState } from 'react';\nimport * as React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport { useStyles2 } from '../../themes';\nimport { InlineToast } from '../InlineToast/InlineToast';\nimport { Tooltip } from '../Tooltip';\n\nimport { ColorIndicatorPosition, VizTooltipColorIndicator } from './VizTooltipColorIndicator';\nimport { ColorPlacement, VizTooltipItem } from './types';\n\ninterface VizTooltipRowProps extends Omit<VizTooltipItem, 'value'> {\n  value: string | number | null | ReactNode;\n  justify?: string;\n  isActive?: boolean; // for series list\n  marginRight?: string;\n  isPinned: boolean;\n  showValueScroll?: boolean;\n}\n\nenum LabelValueTypes {\n  label = 'label',\n  value = 'value',\n}\n\nconst SUCCESSFULLY_COPIED_TEXT = 'Copied to clipboard';\nconst SHOW_SUCCESS_DURATION = 2 * 1000;\nconst HORIZONTAL_PX_PER_CHAR = 7;\n\nexport const VizTooltipRow = ({\n  label,\n  value,\n  color,\n  colorIndicator,\n  colorPlacement = ColorPlacement.first,\n  justify = 'flex-start',\n  isActive = false,\n  marginRight = '0px',\n  isPinned,\n  lineStyle,\n  showValueScroll,\n}: VizTooltipRowProps) => {\n  const styles = useStyles2(getStyles, justify, marginRight);\n\n  const innerValueScrollStyle: CSSProperties = showValueScroll\n    ? {\n        maxHeight: 55,\n        whiteSpace: 'wrap',\n        wordBreak: 'break-word',\n        overflowY: 'auto',\n      }\n    : {\n        whiteSpace: 'wrap',\n        wordBreak: 'break-word',\n      };\n\n  const [showLabelTooltip, setShowLabelTooltip] = useState(false);\n\n  const [copiedText, setCopiedText] = useState<Record<string, string> | null>(null);\n  const [showCopySuccess, setShowCopySuccess] = useState(false);\n\n  const labelRef = useRef<null | HTMLDivElement>(null);\n  const valueRef = useRef<null | HTMLDivElement>(null);\n\n  useEffect(() => {\n    let timeoutId: ReturnType<typeof setTimeout>;\n\n    if (showCopySuccess) {\n      timeoutId = setTimeout(() => {\n        setShowCopySuccess(false);\n      }, SHOW_SUCCESS_DURATION);\n    }\n\n    return () => {\n      window.clearTimeout(timeoutId);\n    };\n  }, [showCopySuccess]);\n\n  const copyToClipboard = async (text: string, type: LabelValueTypes) => {\n    if (!(navigator?.clipboard && window.isSecureContext)) {\n      fallbackCopyToClipboard(text, type);\n      return;\n    }\n\n    try {\n      await navigator.clipboard.writeText(text);\n      setCopiedText({ [`${type}`]: text });\n      setShowCopySuccess(true);\n    } catch (error) {\n      setCopiedText(null);\n    }\n  };\n\n  const fallbackCopyToClipboard = (text: string, type: LabelValueTypes) => {\n    // Use a fallback method for browsers/contexts that don't support the Clipboard API.\n    const textarea = document.createElement('textarea');\n    labelRef.current?.appendChild(textarea);\n    textarea.value = text;\n    textarea.focus();\n    textarea.select();\n    try {\n      const successful = document.execCommand('copy');\n      if (successful) {\n        setCopiedText({ [`${type}`]: text });\n        setShowCopySuccess(true);\n      }\n    } catch (err) {\n      console.error('Unable to copy to clipboard', err);\n    }\n\n    textarea.remove();\n  };\n\n  const onMouseEnterLabel = (event: React.MouseEvent<HTMLDivElement>) => {\n    if (event.currentTarget.offsetWidth < event.currentTarget.scrollWidth) {\n      setShowLabelTooltip(true);\n    }\n  };\n\n  const onMouseLeaveLabel = () => setShowLabelTooltip(false);\n\n  // if label is > 50% window width, try to put label/value pairs on new lines\n  if (label.length * HORIZONTAL_PX_PER_CHAR > window.innerWidth / 2) {\n    label = label.replaceAll('{', '{\\n  ').replaceAll('}', '\\n}').replaceAll(', ', ',\\n  ');\n  }\n\n  return (\n    <div className={styles.contentWrapper}>\n      {(color || label) && (\n        <div className={styles.valueWrapper}>\n          {color && colorPlacement === ColorPlacement.first && (\n            <VizTooltipColorIndicator color={color} colorIndicator={colorIndicator} lineStyle={lineStyle} />\n          )}\n          {!isPinned ? (\n            <div className={cx(styles.label, isActive && styles.activeSeries)}>{label}</div>\n          ) : (\n            <>\n              <Tooltip content={label} interactive={false} show={showLabelTooltip}>\n                <>\n                  {showCopySuccess && copiedText?.label && (\n                    <InlineToast placement=\"top\" referenceElement={labelRef.current}>\n                      {SUCCESSFULLY_COPIED_TEXT}\n                    </InlineToast>\n                  )}\n                  {/* eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions */}\n                  <div\n                    className={cx(styles.label, isActive && styles.activeSeries, navigator?.clipboard && styles.copy)}\n                    onMouseEnter={onMouseEnterLabel}\n                    onMouseLeave={onMouseLeaveLabel}\n                    onClick={() => copyToClipboard(label, LabelValueTypes.label)}\n                    ref={labelRef}\n                  >\n                    {label}\n                  </div>\n                </>\n              </Tooltip>\n            </>\n          )}\n        </div>\n      )}\n\n      <div className={styles.valueWrapper}>\n        {color && colorPlacement === ColorPlacement.leading && (\n          <VizTooltipColorIndicator\n            color={color}\n            colorIndicator={colorIndicator}\n            position={ColorIndicatorPosition.Leading}\n            lineStyle={lineStyle}\n          />\n        )}\n\n        {!isPinned ? (\n          <div className={cx(styles.value, isActive)} style={innerValueScrollStyle}>\n            {value}\n          </div>\n        ) : (\n          <>\n            {showCopySuccess && copiedText?.value && (\n              <InlineToast placement=\"top\" referenceElement={valueRef.current}>\n                {SUCCESSFULLY_COPIED_TEXT}\n              </InlineToast>\n            )}\n            {/* eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions */}\n            <div\n              className={cx(styles.value, isActive, navigator?.clipboard && styles.copy)}\n              style={innerValueScrollStyle}\n              onClick={() => copyToClipboard(value ? value.toString() : '', LabelValueTypes.value)}\n              ref={valueRef}\n            >\n              {value}\n            </div>\n          </>\n        )}\n\n        {color && colorPlacement === ColorPlacement.trailing && (\n          <VizTooltipColorIndicator\n            color={color}\n            colorIndicator={colorIndicator}\n            position={ColorIndicatorPosition.Trailing}\n            lineStyle={lineStyle}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2, justify: string, marginRight: string) => ({\n  contentWrapper: css({\n    display: 'flex',\n    alignItems: 'start',\n    justifyContent: justify,\n    marginRight: marginRight,\n  }),\n  label: css({\n    color: theme.colors.text.secondary,\n    fontWeight: 400,\n    textOverflow: 'ellipsis',\n    overflow: 'hidden',\n    marginRight: theme.spacing(2),\n  }),\n  value: css({\n    fontWeight: 500,\n    textOverflow: 'ellipsis',\n    overflow: 'hidden',\n  }),\n  valueWrapper: css({\n    display: 'flex',\n    alignItems: 'center',\n  }),\n  activeSeries: css({\n    fontWeight: theme.typography.fontWeightBold,\n    color: theme.colors.text.maxContrast,\n  }),\n  copy: css({\n    cursor: 'pointer',\n  }),\n});\n","import { css, cx } from '@emotion/css';\nimport React, { HTMLAttributes } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport { useStyles2 } from '../../themes';\n\nexport interface Props extends HTMLAttributes<HTMLDivElement> {\n  children?: React.ReactNode;\n}\n\nexport const VizTooltipWrapper = ({ children, className }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  return <div className={cx(styles.wrapper, className)}>{children}</div>;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css({\n    display: 'flex',\n    flexDirection: 'column',\n    fontSize: theme.typography.bodySmall.fontSize,\n  }),\n});\n","import {\n  Action,\n  ActionModel,\n  AppEvents,\n  DataContextScopedVar,\n  DataFrame,\n  DataLink,\n  Field,\n  FieldType,\n  getFieldDataContextClone,\n  InterpolateFunction,\n  ScopedVars,\n  textUtil,\n  ValueLinkConfig,\n} from '@grafana/data';\nimport { BackendSrvRequest, getBackendSrv } from '@grafana/runtime';\nimport { appEvents } from 'app/core/core';\n\nimport { HttpRequestMethod } from '../../plugins/panel/canvas/panelcfg.gen';\nimport { createAbsoluteUrl, RelativeUrl } from '../alerting/unified/utils/url';\n\n/** @internal */\nexport const getActions = (\n  frame: DataFrame,\n  field: Field,\n  fieldScopedVars: ScopedVars,\n  replaceVariables: InterpolateFunction,\n  actions: Action[],\n  config: ValueLinkConfig\n): Array<ActionModel<Field>> => {\n  if (!actions || actions.length === 0) {\n    return [];\n  }\n\n  const actionModels = actions.map((action: Action) => {\n    const dataContext: DataContextScopedVar = getFieldDataContextClone(frame, field, fieldScopedVars);\n    const actionScopedVars = {\n      ...fieldScopedVars,\n      __dataContext: dataContext,\n    };\n\n    const boundReplaceVariables: InterpolateFunction = (value, scopedVars, format) => {\n      return replaceVariables(value, { ...actionScopedVars, ...scopedVars }, format);\n    };\n\n    // We are not displaying reduction result\n    if (config.valueRowIndex !== undefined && !isNaN(config.valueRowIndex)) {\n      dataContext.value.rowIndex = config.valueRowIndex;\n    } else {\n      dataContext.value.calculatedValue = config.calculatedValue;\n    }\n\n    let actionModel: ActionModel<Field> = { title: '', onClick: (e) => {} };\n\n    actionModel = {\n      title: replaceVariables(action.title || '', actionScopedVars),\n      onClick: (evt: MouseEvent, origin: Field) => {\n        buildActionOnClick(action, boundReplaceVariables);\n      },\n    };\n\n    return actionModel;\n  });\n\n  return actionModels.filter((action): action is ActionModel => !!action);\n};\n\n/** @internal */\nconst buildActionOnClick = (action: Action, replaceVariables: InterpolateFunction) => {\n  try {\n    const url = new URL(getUrl(replaceVariables(action.fetch.url)));\n\n    const requestHeaders: Record<string, string> = {};\n\n    let request: BackendSrvRequest = {\n      url: url.toString(),\n      method: action.fetch.method,\n      data: getData(action, replaceVariables),\n      headers: requestHeaders,\n    };\n\n    if (action.fetch.headers) {\n      action.fetch.headers.forEach(([name, value]) => {\n        requestHeaders[replaceVariables(name)] = replaceVariables(value);\n      });\n    }\n\n    if (action.fetch.queryParams) {\n      action.fetch.queryParams?.forEach(([name, value]) => {\n        url.searchParams.append(replaceVariables(name), replaceVariables(value));\n      });\n\n      request.url = url.toString();\n    }\n\n    requestHeaders['X-Grafana-Action'] = '1';\n    request.headers = requestHeaders;\n\n    getBackendSrv()\n      .fetch(request)\n      .subscribe({\n        error: (error) => {\n          appEvents.emit(AppEvents.alertError, ['An error has occurred. Check console output for more details.']);\n          console.error(error);\n        },\n        complete: () => {\n          appEvents.emit(AppEvents.alertSuccess, ['API call was successful']);\n        },\n      });\n  } catch (error) {\n    appEvents.emit(AppEvents.alertError, ['An error has occurred. Check console output for more details.']);\n    console.error(error);\n    return;\n  }\n};\n\n/** @internal */\n// @TODO update return type\nexport const getActionsDefaultField = (dataLinks: DataLink[] = [], actions: Action[] = []) => {\n  return {\n    name: 'Default field',\n    type: FieldType.string,\n    config: { links: dataLinks, actions: actions },\n    values: [],\n  };\n};\n\n/** @internal */\nconst getUrl = (endpoint: string) => {\n  const isRelativeUrl = endpoint.startsWith('/');\n  if (isRelativeUrl) {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    const sanitizedRelativeURL = textUtil.sanitizeUrl(endpoint) as RelativeUrl;\n    endpoint = createAbsoluteUrl(sanitizedRelativeURL, []);\n  }\n\n  return endpoint;\n};\n\n/** @internal */\nconst getData = (action: Action, replaceVariables: InterpolateFunction) => {\n  let data: string | undefined = action.fetch.body ? replaceVariables(action.fetch.body) : '{}';\n  if (action.fetch.method === HttpRequestMethod.GET) {\n    data = undefined;\n  }\n\n  return data;\n};\n","// Code generated - EDITING IS FUTILE. DO NOT EDIT.\n//\n// Generated by:\n//     public/app/plugins/gen.go\n// Using jennies:\n//     TSTypesJenny\n//     PluginTsTypesJenny\n//\n// Run 'make gen-cue' from repository root to regenerate.\n\nimport * as ui from '@grafana/schema';\n\nexport enum HorizontalConstraint {\n  Center = 'center',\n  Left = 'left',\n  LeftRight = 'leftright',\n  Right = 'right',\n  Scale = 'scale',\n}\n\nexport enum VerticalConstraint {\n  Bottom = 'bottom',\n  Center = 'center',\n  Scale = 'scale',\n  Top = 'top',\n  TopBottom = 'topbottom',\n}\n\nexport interface Constraint {\n  horizontal?: HorizontalConstraint;\n  vertical?: VerticalConstraint;\n}\n\nexport interface Placement {\n  bottom?: number;\n  height?: number;\n  left?: number;\n  right?: number;\n  rotation?: number;\n  top?: number;\n  width?: number;\n}\n\nexport enum BackgroundImageSize {\n  Contain = 'contain',\n  Cover = 'cover',\n  Fill = 'fill',\n  Original = 'original',\n  Tile = 'tile',\n}\n\nexport interface BackgroundConfig {\n  color?: ui.ColorDimensionConfig;\n  image?: ui.ResourceDimensionConfig;\n  size?: BackgroundImageSize;\n}\n\nexport interface LineConfig {\n  color?: ui.ColorDimensionConfig;\n  radius?: number;\n  width?: number;\n}\n\nexport enum HttpRequestMethod {\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n}\n\nexport interface ConnectionCoordinates {\n  x: number;\n  y: number;\n}\n\nexport enum ConnectionPath {\n  Straight = 'straight',\n}\n\nexport interface CanvasConnection {\n  color?: ui.ColorDimensionConfig;\n  path: ConnectionPath;\n  size?: ui.ScaleDimensionConfig;\n  source: ConnectionCoordinates;\n  sourceOriginal?: ConnectionCoordinates;\n  target: ConnectionCoordinates;\n  targetName?: string;\n  targetOriginal?: ConnectionCoordinates;\n  vertices?: Array<ConnectionCoordinates>;\n}\n\nexport const defaultCanvasConnection: Partial<CanvasConnection> = {\n  vertices: [],\n};\n\nexport interface CanvasElementOptions {\n  background?: BackgroundConfig;\n  border?: LineConfig;\n  /**\n   * TODO: figure out how to define this (element config(s))\n   */\n  config?: unknown;\n  connections?: Array<CanvasConnection>;\n  constraint?: Constraint;\n  name: string;\n  placement?: Placement;\n  type: string;\n}\n\nexport const defaultCanvasElementOptions: Partial<CanvasElementOptions> = {\n  connections: [],\n};\n\nexport interface Options {\n  /**\n   * Enable infinite pan\n   */\n  infinitePan: boolean;\n  /**\n   * Enable inline editing\n   */\n  inlineEditing: boolean;\n  /**\n   * Enable pan and zoom\n   */\n  panZoom: boolean;\n  /**\n   * The root element of canvas (frame), where all canvas elements are nested\n   * TODO: Figure out how to define a default value for this\n   */\n  root: {\n    /**\n     * Name of the root element\n     */\n    name: string;\n    /**\n     * Type of root element (frame)\n     */\n    type: 'frame';\n    /**\n     * The list of canvas elements attached to the root element\n     */\n    elements: Array<CanvasElementOptions>;\n  };\n  /**\n   * Show all available element types\n   */\n  showAdvancedTypes: boolean;\n}\n\nexport const defaultOptions: Partial<Options> = {\n  infinitePan: true,\n  inlineEditing: true,\n  panZoom: true,\n  showAdvancedTypes: true,\n};\n","import { ActionModel, Field, InterpolateFunction, LinkModel } from '@grafana/data';\nimport { DataFrame } from '@grafana/data/';\nimport { config } from '@grafana/runtime';\nimport { getActions } from 'app/features/actions/utils';\n\nexport const getDataLinks = (field: Field, rowIdx: number) => {\n  const links: Array<LinkModel<Field>> = [];\n\n  if ((field.config.links?.length ?? 0) > 0 && field.getLinks != null) {\n    const v = field.values[rowIdx];\n    const disp = field.display ? field.display(v) : { text: `${v}`, numeric: +v };\n\n    const linkLookup = new Set<string>();\n\n    field.getLinks({ calculatedValue: disp, valueRowIndex: rowIdx }).forEach((link) => {\n      const key = `${link.title}/${link.href}`;\n      if (!linkLookup.has(key)) {\n        links.push(link);\n        linkLookup.add(key);\n      }\n    });\n  }\n\n  return links;\n};\n\nexport const getFieldActions = (\n  dataFrame: DataFrame,\n  field: Field,\n  replaceVars: InterpolateFunction,\n  rowIndex: number\n) => {\n  if (!config.featureToggles?.vizActions) {\n    return [];\n  }\n\n  const actions: Array<ActionModel<Field>> = [];\n  const actionLookup = new Set<string>();\n\n  const actionsModel = getActions(dataFrame, field, field.state!.scopedVars!, replaceVars, field.config.actions ?? [], {\n    valueRowIndex: rowIndex,\n  });\n\n  actionsModel.forEach((action) => {\n    const key = `${action.title}`;\n    if (!actionLookup.has(key)) {\n      actions.push(action);\n      actionLookup.add(key);\n    }\n  });\n\n  return actions;\n};\n","import {\n  DataFrame,\n  Field,\n  FieldType,\n  getDisplayProcessor,\n  GrafanaTheme2,\n  isBooleanUnit,\n  TimeRange,\n  cacheFieldDisplayNames,\n} from '@grafana/data';\nimport { convertFieldType } from '@grafana/data/src/transformations/transformers/convertFieldType';\nimport { applyNullInsertThreshold } from '@grafana/data/src/transformations/transformers/nulls/nullInsertThreshold';\nimport { nullToValue } from '@grafana/data/src/transformations/transformers/nulls/nullToValue';\nimport { GraphFieldConfig, LineInterpolation, TooltipDisplayMode, VizTooltipOptions } from '@grafana/schema';\nimport { buildScaleKey } from '@grafana/ui/src/components/uPlot/internal';\n\nimport { HeatmapTooltip } from '../heatmap/panelcfg.gen';\n\ntype ScaleKey = string;\n\n// this will re-enumerate all enum fields on the same scale to create one ordinal progression\n// e.g. ['a','b'][0,1,0] + ['c','d'][1,0,1] -> ['a','b'][0,1,0] + ['c','d'][3,2,3]\nfunction reEnumFields(frames: DataFrame[]): DataFrame[] {\n  let allTextsByKey: Map<ScaleKey, string[]> = new Map();\n\n  let frames2: DataFrame[] = frames.map((frame) => {\n    return {\n      ...frame,\n      fields: frame.fields.map((field) => {\n        if (field.type === FieldType.enum) {\n          let scaleKey = buildScaleKey(field.config, field.type);\n          let allTexts = allTextsByKey.get(scaleKey);\n\n          if (!allTexts) {\n            allTexts = [];\n            allTextsByKey.set(scaleKey, allTexts);\n          }\n\n          let idxs: number[] = field.values.toArray().slice();\n          let txts = field.config.type!.enum!.text!;\n\n          // by-reference incrementing\n          if (allTexts.length > 0) {\n            for (let i = 0; i < idxs.length; i++) {\n              idxs[i] += allTexts.length;\n            }\n          }\n\n          allTexts.push(...txts);\n\n          // shared among all enum fields on same scale\n          field.config.type!.enum!.text! = allTexts;\n\n          return {\n            ...field,\n            values: idxs,\n          };\n\n          // TODO: update displayProcessor?\n        }\n\n        return field;\n      }),\n    };\n  });\n\n  return frames2;\n}\n\n/**\n * Returns null if there are no graphable fields\n */\nexport function prepareGraphableFields(\n  series: DataFrame[],\n  theme: GrafanaTheme2,\n  timeRange?: TimeRange,\n  // numeric X requires a single frame where the first field is numeric\n  xNumFieldIdx?: number\n): DataFrame[] | null {\n  if (!series?.length) {\n    return null;\n  }\n\n  cacheFieldDisplayNames(series);\n\n  let useNumericX = xNumFieldIdx != null;\n\n  // Make sure the numeric x field is first in the frame\n  if (xNumFieldIdx != null && xNumFieldIdx > 0) {\n    series = [\n      {\n        ...series[0],\n        fields: [series[0].fields[xNumFieldIdx], ...series[0].fields.filter((f, i) => i !== xNumFieldIdx)],\n      },\n    ];\n  }\n\n  // some datasources simply tag the field as time, but don't convert to milli epochs\n  // so we're stuck with doing the parsing here to avoid Moment slowness everywhere later\n  // this mutates (once)\n  for (let frame of series) {\n    for (let field of frame.fields) {\n      if (field.type === FieldType.time && typeof field.values[0] !== 'number') {\n        field.values = convertFieldType(field, { destinationType: FieldType.time }).values;\n      }\n    }\n  }\n\n  let enumFieldsCount = 0;\n\n  loopy: for (let frame of series) {\n    for (let field of frame.fields) {\n      if (field.type === FieldType.enum && ++enumFieldsCount > 1) {\n        series = reEnumFields(series);\n        break loopy;\n      }\n    }\n  }\n\n  let copy: Field;\n\n  const frames: DataFrame[] = [];\n\n  for (let frame of series) {\n    const fields: Field[] = [];\n\n    let hasTimeField = false;\n    let hasValueField = false;\n\n    let nulledFrame = useNumericX\n      ? frame\n      : applyNullInsertThreshold({\n          frame,\n          refFieldPseudoMin: timeRange?.from.valueOf(),\n          refFieldPseudoMax: timeRange?.to.valueOf(),\n        });\n\n    const frameFields = nullToValue(nulledFrame).fields;\n\n    for (let fieldIdx = 0; fieldIdx < frameFields?.length ?? 0; fieldIdx++) {\n      const field = frameFields[fieldIdx];\n\n      switch (field.type) {\n        case FieldType.time:\n          hasTimeField = true;\n          fields.push(field);\n          break;\n        case FieldType.number:\n          hasValueField = useNumericX ? fieldIdx > 0 : true;\n          copy = {\n            ...field,\n            values: field.values.map((v) => {\n              if (!(Number.isFinite(v) || v == null)) {\n                return null;\n              }\n              return v;\n            }),\n          };\n\n          fields.push(copy);\n          break; // ok\n        case FieldType.enum:\n          hasValueField = true;\n        case FieldType.string:\n          copy = {\n            ...field,\n            values: field.values,\n          };\n\n          fields.push(copy);\n          break; // ok\n        case FieldType.boolean:\n          hasValueField = true;\n          const custom: GraphFieldConfig = field.config?.custom ?? {};\n          const config = {\n            ...field.config,\n            max: 1,\n            min: 0,\n            custom,\n          };\n\n          // smooth and linear do not make sense\n          if (custom.lineInterpolation !== LineInterpolation.StepBefore) {\n            custom.lineInterpolation = LineInterpolation.StepAfter;\n          }\n\n          copy = {\n            ...field,\n            config,\n            type: FieldType.number,\n            values: field.values.map((v) => {\n              if (v == null) {\n                return v;\n              }\n              return Boolean(v) ? 1 : 0;\n            }),\n          };\n\n          if (!isBooleanUnit(config.unit)) {\n            config.unit = 'bool';\n            copy.display = getDisplayProcessor({ field: copy, theme });\n          }\n\n          fields.push(copy);\n          break;\n      }\n    }\n\n    if ((useNumericX || hasTimeField) && hasValueField) {\n      frames.push({\n        ...frame,\n        length: nulledFrame.length,\n        fields,\n      });\n    }\n  }\n\n  if (frames.length) {\n    setClassicPaletteIdxs(frames, theme, 0);\n    matchEnumColorToSeriesColor(frames, theme);\n    return frames;\n  }\n\n  return null;\n}\n\nconst matchEnumColorToSeriesColor = (frames: DataFrame[], theme: GrafanaTheme2) => {\n  const { palette } = theme.visualization;\n  for (const frame of frames) {\n    for (const field of frame.fields) {\n      if (field.type === FieldType.enum) {\n        const namedColor = palette[field.state?.seriesIndex! % palette.length];\n        const hexColor = theme.visualization.getColorByName(namedColor);\n        const enumConfig = field.config.type!.enum!;\n\n        enumConfig.color = Array(enumConfig.text!.length).fill(hexColor);\n        field.display = getDisplayProcessor({ field, theme });\n      }\n    }\n  }\n};\n\nexport const setClassicPaletteIdxs = (frames: DataFrame[], theme: GrafanaTheme2, skipFieldIdx?: number) => {\n  let seriesIndex = 0;\n  frames.forEach((frame) => {\n    frame.fields.forEach((field, fieldIdx) => {\n      if (\n        fieldIdx !== skipFieldIdx &&\n        (field.type === FieldType.number || field.type === FieldType.boolean || field.type === FieldType.enum)\n      ) {\n        field.state = {\n          ...field.state,\n          seriesIndex: seriesIndex++, // TODO: skip this for fields with custom renderers (e.g. Candlestick)?\n        };\n        field.display = getDisplayProcessor({ field, theme });\n      }\n    });\n  });\n};\n\nexport function getTimezones(timezones: string[] | undefined, defaultTimezone: string): string[] {\n  if (!timezones || !timezones.length) {\n    return [defaultTimezone];\n  }\n  return timezones.map((v) => (v?.length ? v : defaultTimezone));\n}\n\nexport const isTooltipScrollable = (tooltipOptions: VizTooltipOptions | HeatmapTooltip) => {\n  return tooltipOptions.mode === TooltipDisplayMode.Multi && tooltipOptions.maxHeight != null;\n};\n","import { useMemo } from 'react';\n\nimport { DataFrame, FieldMatcherID, fieldMatchers, FieldType, PanelProps, TimeRange } from '@grafana/data';\nimport { isLikelyAscendingVector } from '@grafana/data/src/transformations/transformers/joinDataFrames';\nimport { config, PanelDataErrorView } from '@grafana/runtime';\nimport { KeyboardPlugin, TooltipDisplayMode, usePanelContext, TooltipPlugin2 } from '@grafana/ui';\nimport { TooltipHoverMode } from '@grafana/ui/src/components/uPlot/plugins/TooltipPlugin2';\nimport { XYFieldMatchers } from 'app/core/components/GraphNG/types';\nimport { preparePlotFrame } from 'app/core/components/GraphNG/utils';\nimport { TimeSeries } from 'app/core/components/TimeSeries/TimeSeries';\nimport { findFieldIndex } from 'app/features/dimensions';\n\nimport { TimeSeriesTooltip } from '../timeseries/TimeSeriesTooltip';\nimport { prepareGraphableFields } from '../timeseries/utils';\n\nimport { Options } from './panelcfg.gen';\n\nexport const TrendPanel = ({\n  data,\n  timeRange,\n  timeZone,\n  width,\n  height,\n  options,\n  fieldConfig,\n  replaceVariables,\n  id,\n}: PanelProps<Options>) => {\n  const { dataLinkPostProcessor } = usePanelContext();\n  // Need to fallback to first number field if no xField is set in options otherwise panel crashes 😬\n  const trendXFieldName =\n    options.xField ?? data.series[0].fields.find((field) => field.type === FieldType.number)?.name;\n\n  const preparePlotFrameTimeless = (frames: DataFrame[], dimFields: XYFieldMatchers, timeRange?: TimeRange | null) => {\n    dimFields = {\n      ...dimFields,\n      x: fieldMatchers.get(FieldMatcherID.byName).get(trendXFieldName),\n    };\n\n    return preparePlotFrame(frames, dimFields);\n  };\n\n  const info = useMemo(() => {\n    if (data.series.length > 1) {\n      return {\n        warning: 'Only one frame is supported, consider adding a join transformation',\n        frames: data.series,\n      };\n    }\n\n    let frames = data.series;\n    let xFieldIdx: number | undefined;\n    if (options.xField) {\n      xFieldIdx = findFieldIndex(options.xField, frames[0]);\n      if (xFieldIdx == null) {\n        return {\n          warning: 'Unable to find field: ' + options.xField,\n          frames: data.series,\n        };\n      }\n    } else {\n      // first number field\n      // Perhaps we can/should support any ordinal rather than an error here\n      xFieldIdx = frames[0].fields.findIndex((f) => f.type === FieldType.number);\n      if (xFieldIdx === -1) {\n        return {\n          warning: 'No numeric fields found for X axis',\n          frames,\n        };\n      }\n    }\n\n    // Make sure values are ascending\n    if (xFieldIdx != null) {\n      const field = frames[0].fields[xFieldIdx];\n      if (field.type === FieldType.number && !isLikelyAscendingVector(field.values)) {\n        return {\n          warning: `Values must be in ascending order`,\n          frames,\n        };\n      }\n    }\n\n    return { frames: prepareGraphableFields(frames, config.theme2, undefined, xFieldIdx) };\n  }, [data.series, options.xField]);\n\n  if (info.warning || !info.frames) {\n    return (\n      <PanelDataErrorView\n        panelId={id}\n        fieldConfig={fieldConfig}\n        data={data}\n        message={info.warning}\n        needsNumberField={true}\n      />\n    );\n  }\n\n  return (\n    <TimeSeries // Name change!\n      frames={info.frames}\n      structureRev={data.structureRev}\n      timeRange={timeRange}\n      timeZone={timeZone}\n      width={width}\n      height={height}\n      legend={options.legend}\n      options={options}\n      preparePlotFrame={preparePlotFrameTimeless}\n      replaceVariables={replaceVariables}\n      dataLinkPostProcessor={dataLinkPostProcessor}\n    >\n      {(uPlotConfig, alignedDataFrame) => {\n        return (\n          <>\n            <KeyboardPlugin config={uPlotConfig} />\n            {options.tooltip.mode !== TooltipDisplayMode.None && (\n              <TooltipPlugin2\n                config={uPlotConfig}\n                hoverMode={\n                  options.tooltip.mode === TooltipDisplayMode.Single ? TooltipHoverMode.xOne : TooltipHoverMode.xAll\n                }\n                render={(u, dataIdxs, seriesIdx, isPinned = false) => {\n                  return (\n                    <TimeSeriesTooltip\n                      series={alignedDataFrame}\n                      dataIdxs={dataIdxs}\n                      seriesIdx={seriesIdx}\n                      mode={options.tooltip.mode}\n                      sortOrder={options.tooltip.sort}\n                      isPinned={isPinned}\n                      maxHeight={options.tooltip.maxHeight}\n                      replaceVariables={replaceVariables}\n                    />\n                  );\n                }}\n                maxWidth={options.tooltip.maxWidth}\n              />\n            )}\n          </>\n        );\n      }}\n    </TimeSeries>\n  );\n};\n","import { VisualizationSuggestionsBuilder } from '@grafana/data';\nimport { GraphDrawStyle, GraphFieldConfig, LegendDisplayMode } from '@grafana/schema';\nimport { SuggestionName } from 'app/types/suggestions';\n\nimport { Options } from './panelcfg.gen';\n\nexport class TrendSuggestionsSupplier {\n  getSuggestionsForData(builder: VisualizationSuggestionsBuilder) {\n    const { dataSummary } = builder;\n\n    if (dataSummary.numberFieldCount < 2 || dataSummary.rowCountTotal < 2 || dataSummary.rowCountTotal < 2) {\n      return;\n    }\n\n    // Super basic\n    const list = builder.getListAppender<Options, GraphFieldConfig>({\n      name: SuggestionName.LineChart,\n      pluginId: 'trend',\n      options: {\n        legend: {\n          calcs: [],\n          displayMode: LegendDisplayMode.Hidden,\n          placement: 'right',\n          showLegend: false,\n        },\n      },\n      fieldConfig: {\n        defaults: {\n          custom: {},\n        },\n        overrides: [],\n      },\n      cardOptions: {\n        previewModifier: (s) => {\n          if (s.fieldConfig?.defaults.custom?.drawStyle !== GraphDrawStyle.Bars) {\n            s.fieldConfig!.defaults.custom!.lineWidth = Math.max(s.fieldConfig!.defaults.custom!.lineWidth ?? 1, 2);\n          }\n        },\n      },\n    });\n    return list;\n  }\n}\n","import { Field, FieldType, PanelPlugin } from '@grafana/data';\nimport { commonOptionsBuilder } from '@grafana/ui';\n\nimport { defaultGraphConfig, getGraphFieldConfig } from '../timeseries/config';\n\nimport { TrendPanel } from './TrendPanel';\nimport { FieldConfig, Options } from './panelcfg.gen';\nimport { TrendSuggestionsSupplier } from './suggestions';\n\nexport const plugin = new PanelPlugin<Options, FieldConfig>(TrendPanel)\n  .useFieldConfig(getGraphFieldConfig(defaultGraphConfig, false))\n  .setPanelOptions((builder) => {\n    const category = ['X axis'];\n    builder.addFieldNamePicker({\n      path: 'xField',\n      name: 'X field',\n      description: 'An increasing numeric value',\n      category,\n      defaultValue: undefined,\n      settings: {\n        isClearable: true,\n        placeholderText: 'First numeric value',\n        filter: (field: Field) => field.type === FieldType.number,\n      },\n    });\n\n    commonOptionsBuilder.addTooltipOptions(builder, false, true);\n    commonOptionsBuilder.addLegendOptions(builder);\n  })\n  .setSuggestionsSupplier(new TrendSuggestionsSupplier());\n//.setDataSupport({ annotations: true, alertStates: true });\n"],"names":["VizTooltipContent","items","children","isPinned","scrollable","maxHeight","styles","getStyles","scrollableStyle","label","value","color","colorIndicator","colorPlacement","isActive","lineStyle","i","theme","ActionButton","action","buttonProps","Button","ADD_ANNOTATION_ID","renderDataLinks","dataLinks","Stack","link","DataLinkButton","renderActions","actions","VizTooltipFooter","annotate","VizTooltipHeader","item","ColorIndicatorPosition","VizTooltipColorIndicator","position","SeriesIcon","LabelValueTypes","SUCCESSFULLY_COPIED_TEXT","SHOW_SUCCESS_DURATION","HORIZONTAL_PX_PER_CHAR","VizTooltipRow","justify","marginRight","showValueScroll","innerValueScrollStyle","showLabelTooltip","setShowLabelTooltip","copiedText","setCopiedText","showCopySuccess","setShowCopySuccess","labelRef","valueRef","timeoutId","copyToClipboard","text","type","fallbackCopyToClipboard","textarea","err","onMouseEnterLabel","event","onMouseLeaveLabel","Tooltip","InlineToast","VizTooltipWrapper","className","getActions","frame","field","fieldScopedVars","replaceVariables","config","dataContext","actionScopedVars","boundReplaceVariables","scopedVars","format","actionModel","e","evt","origin","buildActionOnClick","url","getUrl","requestHeaders","request","getData","name","error","getActionsDefaultField","endpoint","sanitizedRelativeURL","data","HorizontalConstraint","VerticalConstraint","BackgroundImageSize","HttpRequestMethod","ConnectionPath","defaultCanvasConnection","defaultCanvasElementOptions","defaultOptions","getDataLinks","rowIdx","links","v","disp","linkLookup","key","getFieldActions","dataFrame","replaceVars","rowIndex","actionLookup","reEnumFields","frames","allTextsByKey","scaleKey","allTexts","idxs","txts","prepareGraphableFields","series","timeRange","xNumFieldIdx","useNumericX","f","enumFieldsCount","loopy","copy","fields","hasTimeField","hasValueField","nulledFrame","frameFields","fieldIdx","custom","setClassicPaletteIdxs","matchEnumColorToSeriesColor","palette","namedColor","hexColor","enumConfig","skipFieldIdx","seriesIndex","getTimezones","timezones","defaultTimezone","isTooltipScrollable","tooltipOptions","TrendPanel","timeZone","width","height","options","fieldConfig","id","dataLinkPostProcessor","trendXFieldName","preparePlotFrameTimeless","dimFields","info","xFieldIdx","PanelDataErrorView","TimeSeries","uPlotConfig","alignedDataFrame","KeyboardPlugin","TooltipPlugin2","u","dataIdxs","seriesIdx","TimeSeriesTooltip","TrendSuggestionsSupplier","builder","dataSummary","s","PanelPlugin","category"],"sourceRoot":""}