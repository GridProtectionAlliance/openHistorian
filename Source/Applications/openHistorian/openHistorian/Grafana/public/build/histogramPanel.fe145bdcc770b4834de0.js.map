{"version":3,"file":"histogramPanel.fe145bdcc770b4834de0.js","mappings":"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","sources":["webpack://grafana/./packages/grafana-ui/src/components/VizTooltip/VizTooltipContent.tsx","webpack://grafana/./packages/grafana-ui/src/components/Actions/ActionButton.tsx","webpack://grafana/./packages/grafana-ui/src/components/VizTooltip/VizTooltipFooter.tsx","webpack://grafana/./packages/grafana-ui/src/components/VizTooltip/VizTooltipHeader.tsx","webpack://grafana/./packages/grafana-ui/src/components/VizTooltip/VizTooltipColorIndicator.tsx","webpack://grafana/./packages/grafana-ui/src/components/VizTooltip/VizTooltipRow.tsx","webpack://grafana/./packages/grafana-ui/src/components/VizTooltip/VizTooltipWrapper.tsx","webpack://grafana/./public/app/features/actions/utils.ts","webpack://grafana/./public/app/plugins/panel/canvas/panelcfg.gen.ts","webpack://grafana/./public/app/plugins/panel/histogram/panelcfg.gen.ts","webpack://grafana/./public/app/plugins/panel/histogram/Histogram.tsx","webpack://grafana/./public/app/plugins/panel/histogram/HistogramTooltip.tsx","webpack://grafana/./public/app/plugins/panel/histogram/HistogramPanel.tsx","webpack://grafana/./public/app/plugins/panel/histogram/config.ts","webpack://grafana/./public/app/plugins/panel/histogram/migrations.ts","webpack://grafana/./public/app/plugins/panel/histogram/utils.ts","webpack://grafana/./public/app/plugins/panel/histogram/module.tsx","webpack://grafana/./public/app/plugins/panel/status-history/utils.ts","webpack://grafana/./public/app/plugins/panel/timeseries/utils.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport { CSSProperties, ReactNode } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport { useStyles2 } from '../../themes';\n\nimport { VizTooltipRow } from './VizTooltipRow';\nimport { VizTooltipItem } from './types';\n\ninterface VizTooltipContentProps {\n  items: VizTooltipItem[];\n  children?: ReactNode;\n  scrollable?: boolean;\n  isPinned: boolean;\n  maxHeight?: number;\n}\n\nexport const VizTooltipContent = ({\n  items,\n  children,\n  isPinned,\n  scrollable = false,\n  maxHeight,\n}: VizTooltipContentProps) => {\n  const styles = useStyles2(getStyles);\n\n  const scrollableStyle: CSSProperties = scrollable\n    ? {\n        maxHeight: maxHeight,\n        overflowY: 'auto',\n      }\n    : {};\n\n  return (\n    <div className={styles.wrapper} style={scrollableStyle}>\n      {items.map(({ label, value, color, colorIndicator, colorPlacement, isActive, lineStyle }, i) => (\n        <VizTooltipRow\n          key={i}\n          label={label}\n          value={value}\n          color={color}\n          colorIndicator={colorIndicator}\n          colorPlacement={colorPlacement}\n          isActive={isActive}\n          justify={'space-between'}\n          isPinned={isPinned}\n          lineStyle={lineStyle}\n          showValueScroll={!scrollable}\n        />\n      ))}\n      {children}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css({\n    display: 'flex',\n    flexDirection: 'column',\n    flex: 1,\n    gap: 2,\n    borderTop: `1px solid ${theme.colors.border.medium}`,\n    padding: theme.spacing(1),\n  }),\n});\n","import { ActionModel, Field } from '@grafana/data';\n\nimport { Button, ButtonProps } from '../Button';\n\ntype ActionButtonProps = ButtonProps & {\n  action: ActionModel<Field>;\n};\n\n/**\n * @internal\n */\nexport function ActionButton({ action, ...buttonProps }: ActionButtonProps) {\n  return (\n    <Button variant=\"primary\" size=\"sm\" onClick={action.onClick} {...buttonProps}>\n      {action.title}\n    </Button>\n  );\n}\n","import { css } from '@emotion/css';\n\nimport { ActionModel, Field, GrafanaTheme2, LinkModel } from '@grafana/data';\n\nimport { Button, DataLinkButton, Stack } from '..';\nimport { useStyles2 } from '../../themes';\nimport { ActionButton } from '../Actions/ActionButton';\n\ninterface VizTooltipFooterProps {\n  dataLinks: Array<LinkModel<Field>>;\n  actions?: Array<ActionModel<Field>>;\n  annotate?: () => void;\n}\n\nexport const ADD_ANNOTATION_ID = 'add-annotation-button';\n\nconst renderDataLinks = (dataLinks: LinkModel[], styles: ReturnType<typeof getStyles>) => {\n  return (\n    <Stack direction=\"column\" justifyContent=\"flex-start\" gap={0.5}>\n      {dataLinks.map((link, i) => (\n        <DataLinkButton link={link} key={i} buttonProps={{ className: styles.dataLinkButton, fill: 'text' }} />\n      ))}\n    </Stack>\n  );\n};\n\nconst renderActions = (actions: ActionModel[]) => {\n  return (\n    <Stack direction=\"column\" justifyContent=\"flex-start\">\n      {actions.map((action, i) => (\n        <ActionButton key={i} action={action} variant=\"secondary\" />\n      ))}\n    </Stack>\n  );\n};\n\nexport const VizTooltipFooter = ({ dataLinks, actions, annotate }: VizTooltipFooterProps) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.wrapper}>\n      {dataLinks.length > 0 && <div className={styles.dataLinks}>{renderDataLinks(dataLinks, styles)}</div>}\n      {actions && actions.length > 0 && <div className={styles.dataLinks}>{renderActions(actions)}</div>}\n      {annotate != null && (\n        <div className={styles.addAnnotations}>\n          <Button icon=\"comment-alt\" variant=\"secondary\" size=\"sm\" id={ADD_ANNOTATION_ID} onClick={annotate}>\n            Add annotation\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css({\n    display: 'flex',\n    flexDirection: 'column',\n    flex: 1,\n    padding: theme.spacing(0),\n  }),\n  dataLinks: css({\n    borderTop: `1px solid ${theme.colors.border.medium}`,\n    padding: theme.spacing(1),\n  }),\n  addAnnotations: css({\n    borderTop: `1px solid ${theme.colors.border.medium}`,\n    padding: theme.spacing(1),\n  }),\n  dataLinkButton: css({\n    cursor: 'pointer',\n    '&:hover': {\n      textDecoration: 'underline',\n      background: 'none',\n    },\n  }),\n});\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport { useStyles2 } from '../../themes';\n\nimport { VizTooltipRow } from './VizTooltipRow';\nimport { VizTooltipItem } from './types';\n\ninterface Props {\n  item: VizTooltipItem;\n  isPinned: boolean;\n}\nexport const VizTooltipHeader = ({ item, isPinned }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const { label, value, color, colorIndicator } = item;\n\n  return (\n    <div className={styles.wrapper}>\n      <VizTooltipRow\n        label={label}\n        value={value}\n        color={color}\n        colorIndicator={colorIndicator}\n        marginRight={'22px'}\n        isPinned={isPinned}\n      />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css({\n    display: 'flex',\n    flexDirection: 'column',\n    flex: 1,\n    padding: theme.spacing(1),\n    lineHeight: 1,\n  }),\n});\n","import { css, cx } from '@emotion/css';\n\nimport { FALLBACK_COLOR, GrafanaTheme2 } from '@grafana/data';\nimport { LineStyle } from '@grafana/schema';\n\nimport { useStyles2 } from '../../themes';\nimport { SeriesIcon } from '../VizLegend/SeriesIcon';\n\nimport { ColorIndicator, DEFAULT_COLOR_INDICATOR } from './types';\nimport { getColorIndicatorClass } from './utils';\n\nexport enum ColorIndicatorPosition {\n  Leading,\n  Trailing,\n}\n\ninterface Props {\n  color?: string;\n  colorIndicator?: ColorIndicator;\n  position?: ColorIndicatorPosition;\n  lineStyle?: LineStyle;\n}\n\nexport type ColorIndicatorStyles = ReturnType<typeof getStyles>;\n\nexport const VizTooltipColorIndicator = ({\n  color = FALLBACK_COLOR,\n  colorIndicator = DEFAULT_COLOR_INDICATOR,\n  position = ColorIndicatorPosition.Leading,\n  lineStyle,\n}: Props) => {\n  const styles = useStyles2(getStyles);\n\n  if (colorIndicator === ColorIndicator.series) {\n    return (\n      <SeriesIcon\n        color={color}\n        lineStyle={lineStyle}\n        className={position === ColorIndicatorPosition.Leading ? styles.leading : styles.trailing}\n      />\n    );\n  }\n\n  return (\n    <span\n      style={{ backgroundColor: color }}\n      className={cx(\n        position === ColorIndicatorPosition.Leading ? styles.leading : styles.trailing,\n        getColorIndicatorClass(colorIndicator, styles)\n      )}\n    />\n  );\n};\n\n// @TODO Update classes/add svgs\nconst getStyles = (theme: GrafanaTheme2) => ({\n  leading: css({\n    marginRight: theme.spacing(0.5),\n  }),\n  trailing: css({\n    marginLeft: theme.spacing(0.5),\n  }),\n  value: css({\n    width: '12px',\n    height: '12px',\n    borderRadius: theme.shape.radius.default,\n    fontWeight: 500,\n    minWidth: '12px',\n  }),\n  hexagon: css({}),\n  pie_1_4: css({}),\n  pie_2_4: css({}),\n  pie_3_4: css({}),\n  marker_sm: css({\n    width: '4px',\n    height: '4px',\n    borderRadius: theme.shape.radius.circle,\n    minWidth: '4px',\n  }),\n  marker_md: css({\n    width: '8px',\n    height: '8px',\n    borderRadius: theme.shape.radius.circle,\n    minWidth: '8px',\n  }),\n  marker_lg: css({\n    width: '12px',\n    height: '12px',\n    borderRadius: theme.shape.radius.circle,\n    minWidth: '12px',\n  }),\n});\n","import { css, cx } from '@emotion/css';\nimport { CSSProperties, ReactNode, useEffect, useRef, useState } from 'react';\nimport * as React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport { useStyles2 } from '../../themes';\nimport { InlineToast } from '../InlineToast/InlineToast';\nimport { Tooltip } from '../Tooltip';\n\nimport { ColorIndicatorPosition, VizTooltipColorIndicator } from './VizTooltipColorIndicator';\nimport { ColorPlacement, VizTooltipItem } from './types';\n\ninterface VizTooltipRowProps extends Omit<VizTooltipItem, 'value'> {\n  value: string | number | null | ReactNode;\n  justify?: string;\n  isActive?: boolean; // for series list\n  marginRight?: string;\n  isPinned: boolean;\n  showValueScroll?: boolean;\n}\n\nenum LabelValueTypes {\n  label = 'label',\n  value = 'value',\n}\n\nconst SUCCESSFULLY_COPIED_TEXT = 'Copied to clipboard';\nconst SHOW_SUCCESS_DURATION = 2 * 1000;\nconst HORIZONTAL_PX_PER_CHAR = 7;\n\nexport const VizTooltipRow = ({\n  label,\n  value,\n  color,\n  colorIndicator,\n  colorPlacement = ColorPlacement.first,\n  justify = 'flex-start',\n  isActive = false,\n  marginRight = '0px',\n  isPinned,\n  lineStyle,\n  showValueScroll,\n}: VizTooltipRowProps) => {\n  const styles = useStyles2(getStyles, justify, marginRight);\n\n  const innerValueScrollStyle: CSSProperties = showValueScroll\n    ? {\n        maxHeight: 55,\n        whiteSpace: 'wrap',\n        wordBreak: 'break-word',\n        overflowY: 'auto',\n      }\n    : {\n        whiteSpace: 'wrap',\n        wordBreak: 'break-word',\n      };\n\n  const [showLabelTooltip, setShowLabelTooltip] = useState(false);\n\n  const [copiedText, setCopiedText] = useState<Record<string, string> | null>(null);\n  const [showCopySuccess, setShowCopySuccess] = useState(false);\n\n  const labelRef = useRef<null | HTMLDivElement>(null);\n  const valueRef = useRef<null | HTMLDivElement>(null);\n\n  useEffect(() => {\n    let timeoutId: ReturnType<typeof setTimeout>;\n\n    if (showCopySuccess) {\n      timeoutId = setTimeout(() => {\n        setShowCopySuccess(false);\n      }, SHOW_SUCCESS_DURATION);\n    }\n\n    return () => {\n      window.clearTimeout(timeoutId);\n    };\n  }, [showCopySuccess]);\n\n  const copyToClipboard = async (text: string, type: LabelValueTypes) => {\n    if (!(navigator?.clipboard && window.isSecureContext)) {\n      fallbackCopyToClipboard(text, type);\n      return;\n    }\n\n    try {\n      await navigator.clipboard.writeText(text);\n      setCopiedText({ [`${type}`]: text });\n      setShowCopySuccess(true);\n    } catch (error) {\n      setCopiedText(null);\n    }\n  };\n\n  const fallbackCopyToClipboard = (text: string, type: LabelValueTypes) => {\n    // Use a fallback method for browsers/contexts that don't support the Clipboard API.\n    const textarea = document.createElement('textarea');\n    labelRef.current?.appendChild(textarea);\n    textarea.value = text;\n    textarea.focus();\n    textarea.select();\n    try {\n      const successful = document.execCommand('copy');\n      if (successful) {\n        setCopiedText({ [`${type}`]: text });\n        setShowCopySuccess(true);\n      }\n    } catch (err) {\n      console.error('Unable to copy to clipboard', err);\n    }\n\n    textarea.remove();\n  };\n\n  const onMouseEnterLabel = (event: React.MouseEvent<HTMLDivElement>) => {\n    if (event.currentTarget.offsetWidth < event.currentTarget.scrollWidth) {\n      setShowLabelTooltip(true);\n    }\n  };\n\n  const onMouseLeaveLabel = () => setShowLabelTooltip(false);\n\n  // if label is > 50% window width, try to put label/value pairs on new lines\n  if (label.length * HORIZONTAL_PX_PER_CHAR > window.innerWidth / 2) {\n    label = label.replaceAll('{', '{\\n  ').replaceAll('}', '\\n}').replaceAll(', ', ',\\n  ');\n  }\n\n  return (\n    <div className={styles.contentWrapper}>\n      {(color || label) && (\n        <div className={styles.valueWrapper}>\n          {color && colorPlacement === ColorPlacement.first && (\n            <VizTooltipColorIndicator color={color} colorIndicator={colorIndicator} lineStyle={lineStyle} />\n          )}\n          {!isPinned ? (\n            <div className={cx(styles.label, isActive && styles.activeSeries)}>{label}</div>\n          ) : (\n            <>\n              <Tooltip content={label} interactive={false} show={showLabelTooltip}>\n                <>\n                  {showCopySuccess && copiedText?.label && (\n                    <InlineToast placement=\"top\" referenceElement={labelRef.current}>\n                      {SUCCESSFULLY_COPIED_TEXT}\n                    </InlineToast>\n                  )}\n                  {/* eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions */}\n                  <div\n                    className={cx(styles.label, isActive && styles.activeSeries, navigator?.clipboard && styles.copy)}\n                    onMouseEnter={onMouseEnterLabel}\n                    onMouseLeave={onMouseLeaveLabel}\n                    onClick={() => copyToClipboard(label, LabelValueTypes.label)}\n                    ref={labelRef}\n                  >\n                    {label}\n                  </div>\n                </>\n              </Tooltip>\n            </>\n          )}\n        </div>\n      )}\n\n      <div className={styles.valueWrapper}>\n        {color && colorPlacement === ColorPlacement.leading && (\n          <VizTooltipColorIndicator\n            color={color}\n            colorIndicator={colorIndicator}\n            position={ColorIndicatorPosition.Leading}\n            lineStyle={lineStyle}\n          />\n        )}\n\n        {!isPinned ? (\n          <div className={cx(styles.value, isActive)} style={innerValueScrollStyle}>\n            {value}\n          </div>\n        ) : (\n          <>\n            {showCopySuccess && copiedText?.value && (\n              <InlineToast placement=\"top\" referenceElement={valueRef.current}>\n                {SUCCESSFULLY_COPIED_TEXT}\n              </InlineToast>\n            )}\n            {/* eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions */}\n            <div\n              className={cx(styles.value, isActive, navigator?.clipboard && styles.copy)}\n              style={innerValueScrollStyle}\n              onClick={() => copyToClipboard(value ? value.toString() : '', LabelValueTypes.value)}\n              ref={valueRef}\n            >\n              {value}\n            </div>\n          </>\n        )}\n\n        {color && colorPlacement === ColorPlacement.trailing && (\n          <VizTooltipColorIndicator\n            color={color}\n            colorIndicator={colorIndicator}\n            position={ColorIndicatorPosition.Trailing}\n            lineStyle={lineStyle}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2, justify: string, marginRight: string) => ({\n  contentWrapper: css({\n    display: 'flex',\n    alignItems: 'start',\n    justifyContent: justify,\n    marginRight: marginRight,\n  }),\n  label: css({\n    color: theme.colors.text.secondary,\n    fontWeight: 400,\n    textOverflow: 'ellipsis',\n    overflow: 'hidden',\n    marginRight: theme.spacing(2),\n  }),\n  value: css({\n    fontWeight: 500,\n    textOverflow: 'ellipsis',\n    overflow: 'hidden',\n  }),\n  valueWrapper: css({\n    display: 'flex',\n    alignItems: 'center',\n  }),\n  activeSeries: css({\n    fontWeight: theme.typography.fontWeightBold,\n    color: theme.colors.text.maxContrast,\n  }),\n  copy: css({\n    cursor: 'pointer',\n  }),\n});\n","import { css, cx } from '@emotion/css';\nimport React, { HTMLAttributes } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport { useStyles2 } from '../../themes';\n\nexport interface Props extends HTMLAttributes<HTMLDivElement> {\n  children?: React.ReactNode;\n}\n\nexport const VizTooltipWrapper = ({ children, className }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  return <div className={cx(styles.wrapper, className)}>{children}</div>;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css({\n    display: 'flex',\n    flexDirection: 'column',\n    fontSize: theme.typography.bodySmall.fontSize,\n  }),\n});\n","import {\n  Action,\n  ActionModel,\n  AppEvents,\n  DataContextScopedVar,\n  DataFrame,\n  DataLink,\n  Field,\n  FieldType,\n  getFieldDataContextClone,\n  InterpolateFunction,\n  ScopedVars,\n  textUtil,\n  ValueLinkConfig,\n} from '@grafana/data';\nimport { BackendSrvRequest, getBackendSrv } from '@grafana/runtime';\nimport { appEvents } from 'app/core/core';\n\nimport { HttpRequestMethod } from '../../plugins/panel/canvas/panelcfg.gen';\nimport { createAbsoluteUrl, RelativeUrl } from '../alerting/unified/utils/url';\n\n/** @internal */\nexport const getActions = (\n  frame: DataFrame,\n  field: Field,\n  fieldScopedVars: ScopedVars,\n  replaceVariables: InterpolateFunction,\n  actions: Action[],\n  config: ValueLinkConfig\n): Array<ActionModel<Field>> => {\n  if (!actions || actions.length === 0) {\n    return [];\n  }\n\n  const actionModels = actions.map((action: Action) => {\n    const dataContext: DataContextScopedVar = getFieldDataContextClone(frame, field, fieldScopedVars);\n    const actionScopedVars = {\n      ...fieldScopedVars,\n      __dataContext: dataContext,\n    };\n\n    const boundReplaceVariables: InterpolateFunction = (value, scopedVars, format) => {\n      return replaceVariables(value, { ...actionScopedVars, ...scopedVars }, format);\n    };\n\n    // We are not displaying reduction result\n    if (config.valueRowIndex !== undefined && !isNaN(config.valueRowIndex)) {\n      dataContext.value.rowIndex = config.valueRowIndex;\n    } else {\n      dataContext.value.calculatedValue = config.calculatedValue;\n    }\n\n    let actionModel: ActionModel<Field> = { title: '', onClick: (e) => {} };\n\n    actionModel = {\n      title: replaceVariables(action.title || '', actionScopedVars),\n      onClick: (evt: MouseEvent, origin: Field) => {\n        buildActionOnClick(action, boundReplaceVariables);\n      },\n    };\n\n    return actionModel;\n  });\n\n  return actionModels.filter((action): action is ActionModel => !!action);\n};\n\n/** @internal */\nconst buildActionOnClick = (action: Action, replaceVariables: InterpolateFunction) => {\n  try {\n    const url = new URL(getUrl(replaceVariables(action.fetch.url)));\n\n    const requestHeaders: Record<string, string> = {};\n\n    let request: BackendSrvRequest = {\n      url: url.toString(),\n      method: action.fetch.method,\n      data: getData(action, replaceVariables),\n      headers: requestHeaders,\n    };\n\n    if (action.fetch.headers) {\n      action.fetch.headers.forEach(([name, value]) => {\n        requestHeaders[replaceVariables(name)] = replaceVariables(value);\n      });\n    }\n\n    if (action.fetch.queryParams) {\n      action.fetch.queryParams?.forEach(([name, value]) => {\n        url.searchParams.append(replaceVariables(name), replaceVariables(value));\n      });\n\n      request.url = url.toString();\n    }\n\n    requestHeaders['X-Grafana-Action'] = '1';\n    request.headers = requestHeaders;\n\n    getBackendSrv()\n      .fetch(request)\n      .subscribe({\n        error: (error) => {\n          appEvents.emit(AppEvents.alertError, ['An error has occurred. Check console output for more details.']);\n          console.error(error);\n        },\n        complete: () => {\n          appEvents.emit(AppEvents.alertSuccess, ['API call was successful']);\n        },\n      });\n  } catch (error) {\n    appEvents.emit(AppEvents.alertError, ['An error has occurred. Check console output for more details.']);\n    console.error(error);\n    return;\n  }\n};\n\n/** @internal */\n// @TODO update return type\nexport const getActionsDefaultField = (dataLinks: DataLink[] = [], actions: Action[] = []) => {\n  return {\n    name: 'Default field',\n    type: FieldType.string,\n    config: { links: dataLinks, actions: actions },\n    values: [],\n  };\n};\n\n/** @internal */\nconst getUrl = (endpoint: string) => {\n  const isRelativeUrl = endpoint.startsWith('/');\n  if (isRelativeUrl) {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    const sanitizedRelativeURL = textUtil.sanitizeUrl(endpoint) as RelativeUrl;\n    endpoint = createAbsoluteUrl(sanitizedRelativeURL, []);\n  }\n\n  return endpoint;\n};\n\n/** @internal */\nconst getData = (action: Action, replaceVariables: InterpolateFunction) => {\n  let data: string | undefined = action.fetch.body ? replaceVariables(action.fetch.body) : '{}';\n  if (action.fetch.method === HttpRequestMethod.GET) {\n    data = undefined;\n  }\n\n  return data;\n};\n","// Code generated - EDITING IS FUTILE. DO NOT EDIT.\n//\n// Generated by:\n//     public/app/plugins/gen.go\n// Using jennies:\n//     TSTypesJenny\n//     PluginTsTypesJenny\n//\n// Run 'make gen-cue' from repository root to regenerate.\n\nimport * as ui from '@grafana/schema';\n\nexport enum HorizontalConstraint {\n  Center = 'center',\n  Left = 'left',\n  LeftRight = 'leftright',\n  Right = 'right',\n  Scale = 'scale',\n}\n\nexport enum VerticalConstraint {\n  Bottom = 'bottom',\n  Center = 'center',\n  Scale = 'scale',\n  Top = 'top',\n  TopBottom = 'topbottom',\n}\n\nexport interface Constraint {\n  horizontal?: HorizontalConstraint;\n  vertical?: VerticalConstraint;\n}\n\nexport interface Placement {\n  bottom?: number;\n  height?: number;\n  left?: number;\n  right?: number;\n  rotation?: number;\n  top?: number;\n  width?: number;\n}\n\nexport enum BackgroundImageSize {\n  Contain = 'contain',\n  Cover = 'cover',\n  Fill = 'fill',\n  Original = 'original',\n  Tile = 'tile',\n}\n\nexport interface BackgroundConfig {\n  color?: ui.ColorDimensionConfig;\n  image?: ui.ResourceDimensionConfig;\n  size?: BackgroundImageSize;\n}\n\nexport interface LineConfig {\n  color?: ui.ColorDimensionConfig;\n  radius?: number;\n  width?: number;\n}\n\nexport enum HttpRequestMethod {\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n}\n\nexport interface ConnectionCoordinates {\n  x: number;\n  y: number;\n}\n\nexport enum ConnectionPath {\n  Straight = 'straight',\n}\n\nexport interface CanvasConnection {\n  color?: ui.ColorDimensionConfig;\n  path: ConnectionPath;\n  size?: ui.ScaleDimensionConfig;\n  source: ConnectionCoordinates;\n  sourceOriginal?: ConnectionCoordinates;\n  target: ConnectionCoordinates;\n  targetName?: string;\n  targetOriginal?: ConnectionCoordinates;\n  vertices?: Array<ConnectionCoordinates>;\n}\n\nexport const defaultCanvasConnection: Partial<CanvasConnection> = {\n  vertices: [],\n};\n\nexport interface CanvasElementOptions {\n  background?: BackgroundConfig;\n  border?: LineConfig;\n  /**\n   * TODO: figure out how to define this (element config(s))\n   */\n  config?: unknown;\n  connections?: Array<CanvasConnection>;\n  constraint?: Constraint;\n  name: string;\n  placement?: Placement;\n  type: string;\n}\n\nexport const defaultCanvasElementOptions: Partial<CanvasElementOptions> = {\n  connections: [],\n};\n\nexport interface Options {\n  /**\n   * Enable infinite pan\n   */\n  infinitePan: boolean;\n  /**\n   * Enable inline editing\n   */\n  inlineEditing: boolean;\n  /**\n   * Enable pan and zoom\n   */\n  panZoom: boolean;\n  /**\n   * The root element of canvas (frame), where all canvas elements are nested\n   * TODO: Figure out how to define a default value for this\n   */\n  root: {\n    /**\n     * Name of the root element\n     */\n    name: string;\n    /**\n     * Type of root element (frame)\n     */\n    type: 'frame';\n    /**\n     * The list of canvas elements attached to the root element\n     */\n    elements: Array<CanvasElementOptions>;\n  };\n  /**\n   * Show all available element types\n   */\n  showAdvancedTypes: boolean;\n}\n\nexport const defaultOptions: Partial<Options> = {\n  infinitePan: true,\n  inlineEditing: true,\n  panZoom: true,\n  showAdvancedTypes: true,\n};\n","// Code generated - EDITING IS FUTILE. DO NOT EDIT.\n//\n// Generated by:\n//     public/app/plugins/gen.go\n// Using jennies:\n//     TSTypesJenny\n//     PluginTsTypesJenny\n//\n// Run 'make gen-cue' from repository root to regenerate.\n\nimport * as common from '@grafana/schema';\n\nexport interface Options extends common.OptionsWithLegend, common.OptionsWithTooltip {\n  /**\n   * Bucket count (approx)\n   */\n  bucketCount?: number;\n  /**\n   * Offset buckets by this amount\n   */\n  bucketOffset?: number;\n  /**\n   * Size of each bucket\n   */\n  bucketSize?: number;\n  /**\n   * Combines multiple series into a single histogram\n   */\n  combine?: boolean;\n}\n\nexport const defaultOptions: Partial<Options> = {\n  bucketCount: 30,\n  bucketOffset: 0,\n};\n\nexport interface FieldConfig extends common.AxisConfig, common.HideableFieldConfig, common.StackableFieldConfig {\n  /**\n   * Controls the fill opacity of the bars.\n   */\n  fillOpacity?: number;\n  /**\n   * Set the mode of the gradient fill. Fill gradient is based on the line color. To change the color, use the standard color scheme field option.\n   * Gradient appearance is influenced by the Fill opacity setting.\n   */\n  gradientMode?: common.GraphGradientMode;\n  /**\n   * Controls line width of the bars.\n   */\n  lineWidth?: number;\n}\n\nexport const defaultFieldConfig: Partial<FieldConfig> = {\n  fillOpacity: 80,\n  gradientMode: common.GraphGradientMode.None,\n  lineWidth: 1,\n};\n","import * as React from 'react';\nimport uPlot, { AlignedData } from 'uplot';\n\nimport {\n  DataFrame,\n  FieldType,\n  formattedValueToString,\n  getFieldColorModeForField,\n  getFieldSeriesColor,\n  GrafanaTheme2,\n  roundDecimals,\n} from '@grafana/data';\nimport {\n  histogramBucketSizes,\n  histogramFrameBucketMaxFieldName,\n} from '@grafana/data/src/transformations/transformers/histogram';\nimport { VizLegendOptions, ScaleDistribution, AxisPlacement, ScaleDirection, ScaleOrientation } from '@grafana/schema';\nimport {\n  Themeable2,\n  UPlotConfigBuilder,\n  UPlotChart,\n  VizLayout,\n  PlotLegend,\n  measureText,\n  UPLOT_AXIS_FONT_SIZE,\n} from '@grafana/ui';\nimport { getStackingGroups, preparePlotData2 } from '@grafana/ui/src/components/uPlot/utils';\n\nimport { defaultFieldConfig, FieldConfig, Options } from './panelcfg.gen';\n\nfunction incrRoundDn(num: number, incr: number) {\n  return Math.floor(num / incr) * incr;\n}\n\nfunction incrRoundUp(num: number, incr: number) {\n  return Math.ceil(num / incr) * incr;\n}\n\nexport interface HistogramProps extends Themeable2 {\n  options: Options; // used for diff\n  alignedFrame: DataFrame; // This could take HistogramFields\n  bucketCount?: number;\n  bucketSize: number;\n  width: number;\n  height: number;\n  structureRev?: number; // a number that will change when the frames[] structure changes\n  legend: VizLegendOptions;\n  rawSeries?: DataFrame[];\n  children?: (builder: UPlotConfigBuilder, frame: DataFrame, xMinOnlyFrame: DataFrame) => React.ReactNode;\n}\n\nexport function getBucketSize(frame: DataFrame) {\n  // assumes BucketMin is fields[0] and BucktMax is fields[1]\n  return frame.fields[0].type === FieldType.string\n    ? 1\n    : roundDecimals(frame.fields[1].values[0] - frame.fields[0].values[0], 9);\n}\n\nexport function getBucketSize1(frame: DataFrame) {\n  // assumes BucketMin is fields[0] and BucktMax is fields[1]\n  return frame.fields[0].type === FieldType.string\n    ? 1\n    : roundDecimals(frame.fields[1].values[1] - frame.fields[0].values[1], 9);\n}\n\nconst prepConfig = (frame: DataFrame, theme: GrafanaTheme2) => {\n  // todo: scan all values in BucketMin and BucketMax fields to assert if uniform bucketSize\n\n  // since this is x axis range, this should ideally come from xMin or xMax fields, not a count field\n  // though both methods are probably hacks, and we should just accept explicit opts into this prepConfig\n  let { min: xScaleMin, max: xScaleMax } = frame.fields[2].config;\n\n  let builder = new UPlotConfigBuilder();\n\n  let isOrdinalX = frame.fields[0].type === FieldType.string;\n\n  // assumes BucketMin is fields[0] and BucktMax is fields[1]\n  let bucketSize = getBucketSize(frame);\n  let bucketSize1 = getBucketSize1(frame);\n\n  let bucketFactor = bucketSize1 / bucketSize;\n\n  let useLogScale = bucketSize1 !== bucketSize; // (imperfect floats)\n\n  // splits shifter, to ensure splits always start at first bucket\n  let xSplits: uPlot.Axis.Splits = (u, axisIdx, scaleMin, scaleMax, foundIncr, foundSpace) => {\n    /** @ts-ignore */\n    let minSpace = u.axes[axisIdx]._space;\n    let bucketWidth = u.valToPos(u.data[0][0] + bucketSize, 'x') - u.valToPos(u.data[0][0], 'x');\n\n    let firstSplit = incrRoundDn(xScaleMin ?? u.data[0][0], bucketSize);\n    let lastSplit = incrRoundUp(xScaleMax ?? u.data[0][u.data[0].length - 1] + bucketSize, bucketSize);\n\n    let splits = [];\n    let skip = Math.ceil(minSpace / bucketWidth);\n\n    for (let i = 0, s = firstSplit; s <= lastSplit; i++, s += bucketSize) {\n      !(i % skip) && splits.push(s);\n    }\n\n    return splits;\n  };\n\n  builder.addScale({\n    scaleKey: 'x', // bukkits\n    isTime: false,\n    distribution: isOrdinalX\n      ? ScaleDistribution.Ordinal\n      : useLogScale\n        ? ScaleDistribution.Log\n        : ScaleDistribution.Linear,\n    log: 2,\n    orientation: ScaleOrientation.Horizontal,\n    direction: ScaleDirection.Right,\n    range: useLogScale\n      ? (u, wantedMin, wantedMax) => {\n          return uPlot.rangeLog(wantedMin, wantedMax * bucketFactor, 2, true);\n        }\n      : (u, wantedMin, wantedMax) => {\n          // these settings will prevent zooming, probably okay?\n          if (xScaleMin != null) {\n            wantedMin = xScaleMin;\n          }\n          if (xScaleMax != null) {\n            wantedMax = xScaleMax;\n          }\n\n          let fullRangeMax = u.data[0][u.data[0].length - 1];\n\n          // isOrdinalX is when we have classic histograms, which are LE, ordinal X, and already have 0 dummy bucket prepended\n          // else we have calculated histograms which are GE and cardinal+linear X, and have no next dummy bucket appended\n          wantedMin = incrRoundUp(wantedMin, bucketSize);\n          wantedMax =\n            !isOrdinalX && wantedMax === fullRangeMax ? wantedMax + bucketSize : incrRoundDn(wantedMax, bucketSize);\n\n          return [wantedMin, wantedMax];\n        },\n  });\n\n  builder.addScale({\n    scaleKey: 'y', // counts\n    isTime: false,\n    distribution: ScaleDistribution.Linear,\n    orientation: ScaleOrientation.Vertical,\n    direction: ScaleDirection.Up,\n    softMin: 0,\n  });\n\n  const fmt = frame.fields[0].display!;\n  const xAxisFormatter = (v: number) => {\n    return formattedValueToString(fmt(v));\n  };\n\n  builder.addAxis({\n    scaleKey: 'x',\n    isTime: false,\n    placement: AxisPlacement.Bottom,\n    incrs: isOrdinalX ? [1] : useLogScale ? undefined : histogramBucketSizes,\n    splits: useLogScale || isOrdinalX ? undefined : xSplits,\n    values: isOrdinalX\n      ? (u, splits) => splits\n      : (u, splits) => {\n          const tickLabels = splits.map(xAxisFormatter);\n\n          const maxWidth = tickLabels.reduce(\n            (curMax, label) => Math.max(measureText(label, UPLOT_AXIS_FONT_SIZE).width, curMax),\n            0\n          );\n\n          const labelSpacing = 10;\n          const maxCount = u.bbox.width / ((maxWidth + labelSpacing) * devicePixelRatio);\n          const keepMod = Math.ceil(tickLabels.length / maxCount);\n\n          return tickLabels.map((label, i) => (i % keepMod === 0 ? label : null));\n        },\n    //incrs: () => [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map((mult) => mult * bucketSize),\n    //splits: config.xSplits,\n    //values: config.xValues,\n    //grid: false,\n    //ticks: false,\n    //gap: 15,\n    theme,\n  });\n\n  // assumes BucketMax is [1]\n  let countField = frame.fields[2];\n  let dispY = countField.display;\n\n  builder.addAxis({\n    scaleKey: 'y',\n    isTime: false,\n    placement: AxisPlacement.Left,\n    formatValue: (v, decimals) => formattedValueToString(dispY!(v, decimals)),\n    //splits: config.xSplits,\n    //values: config.xValues,\n    //grid: false,\n    //ticks: false,\n    //gap: 15,\n    theme,\n  });\n\n  builder.setCursor({\n    points: { show: false },\n    drag: {\n      x: true,\n      y: false,\n      setScale: true,\n    },\n  });\n\n  let stackingGroups = getStackingGroups(xMinOnlyFrame(frame));\n  builder.setStackingGroups(stackingGroups);\n\n  let pathBuilder = uPlot.paths.bars!({ align: 1, size: [1, Infinity] });\n\n  let seriesIndex = 0;\n\n  // assumes xMin is [0], xMax is [1]\n  for (let i = 2; i < frame.fields.length; i++) {\n    const field = frame.fields[i];\n\n    field.state = field.state ?? {};\n    field.state.seriesIndex = seriesIndex++;\n\n    const customConfig: FieldConfig = { ...defaultFieldConfig, ...field.config.custom };\n\n    const scaleKey = 'y';\n    const colorMode = getFieldColorModeForField(field);\n    const scaleColor = getFieldSeriesColor(field, theme);\n    const seriesColor = scaleColor.color;\n\n    builder.addSeries({\n      scaleKey,\n      lineWidth: customConfig.lineWidth,\n      lineColor: seriesColor,\n      //lineStyle: customConfig.lineStyle,\n      fillOpacity: customConfig.fillOpacity,\n      theme,\n      colorMode,\n      pathBuilder,\n      //pointsBuilder: config.drawPoints,\n      show: !customConfig.hideFrom?.viz,\n      gradientMode: customConfig.gradientMode,\n      thresholds: field.config.thresholds,\n\n      hardMin: field.config.min,\n      hardMax: field.config.max,\n      softMin: customConfig.axisSoftMin,\n      softMax: customConfig.axisSoftMax,\n\n      // The following properties are not used in the uPlot config, but are utilized as transport for legend config\n      dataFrameFieldIndex: field.state.origin,\n    });\n  }\n\n  return builder;\n};\n\n// since we're reusing timeseries prep for stacking, we need to make a tmp frame where fields match the uplot data\n// by removing the x bucket max field to make sure stacking group series idxs match up\nconst xMinOnlyFrame = (frame: DataFrame) => ({\n  ...frame,\n  fields: frame.fields.filter((f) => f.name !== histogramFrameBucketMaxFieldName),\n});\n\nconst preparePlotData = (builder: UPlotConfigBuilder, xMinOnlyFrame: DataFrame) => {\n  // uPlot's bars pathBuilder will draw rects even if 0 (to distinguish them from nulls)\n  // but for histograms we want to omit them, so remap 0s -> nulls\n  for (let i = 1; i < xMinOnlyFrame.fields.length; i++) {\n    let counts = xMinOnlyFrame.fields[i].values;\n\n    for (let j = 0; j < counts.length; j++) {\n      if (counts[j] === 0) {\n        counts[j] = null; // mutates!\n      }\n    }\n  }\n\n  return preparePlotData2(xMinOnlyFrame, builder.getStackingGroups());\n};\n\ninterface State {\n  alignedData: AlignedData;\n  alignedFrame: DataFrame;\n  config?: UPlotConfigBuilder;\n  xMinOnlyFrame: DataFrame;\n}\n\nexport class Histogram extends React.Component<HistogramProps, State> {\n  constructor(props: HistogramProps) {\n    super(props);\n    this.state = this.prepState(props);\n  }\n\n  prepState(props: HistogramProps, withConfig = true): State {\n    const { alignedFrame } = props;\n\n    const config = withConfig ? prepConfig(alignedFrame, this.props.theme) : this.state.config!;\n    const xMinOnly = xMinOnlyFrame(alignedFrame);\n    const alignedData = preparePlotData(config, xMinOnly);\n\n    return {\n      alignedFrame,\n      alignedData,\n      config,\n      xMinOnlyFrame: xMinOnly,\n    };\n  }\n\n  renderLegend(config: UPlotConfigBuilder) {\n    const { legend } = this.props;\n\n    if (!config || legend.showLegend === false) {\n      return null;\n    }\n\n    const frames = this.props.options.combine ? [this.props.alignedFrame] : this.props.rawSeries!;\n\n    return <PlotLegend data={frames} config={config} maxHeight=\"35%\" maxWidth=\"60%\" {...legend} />;\n  }\n\n  componentDidUpdate(prevProps: HistogramProps) {\n    const { structureRev, alignedFrame, bucketSize, bucketCount } = this.props;\n\n    if (alignedFrame !== prevProps.alignedFrame) {\n      const shouldReconfig =\n        this.state.config == null ||\n        bucketCount !== prevProps.bucketCount ||\n        bucketSize !== prevProps.bucketSize ||\n        this.props.options !== prevProps.options ||\n        this.state.config === undefined ||\n        structureRev !== prevProps.structureRev ||\n        !structureRev;\n\n      const newState = this.prepState(this.props, shouldReconfig);\n\n      this.setState(newState);\n    }\n  }\n\n  render() {\n    const { width, height, children, alignedFrame } = this.props;\n    const { config } = this.state;\n\n    if (!config) {\n      return null;\n    }\n\n    return (\n      <VizLayout width={width} height={height} legend={this.renderLegend(config)}>\n        {(vizWidth: number, vizHeight: number) => (\n          <UPlotChart config={this.state.config!} data={this.state.alignedData} width={vizWidth} height={vizHeight}>\n            {children ? children(config, alignedFrame, this.state.xMinOnlyFrame) : null}\n          </UPlotChart>\n        )}\n      </VizLayout>\n    );\n  }\n}\n","import { ReactNode, useMemo } from 'react';\n\nimport { DataFrame, formattedValueToString } from '@grafana/data';\nimport { SortOrder, TooltipDisplayMode } from '@grafana/schema/dist/esm/common/common.gen';\nimport { VizTooltipContent } from '@grafana/ui/src/components/VizTooltip/VizTooltipContent';\nimport { VizTooltipFooter } from '@grafana/ui/src/components/VizTooltip/VizTooltipFooter';\nimport { VizTooltipHeader } from '@grafana/ui/src/components/VizTooltip/VizTooltipHeader';\nimport { VizTooltipWrapper } from '@grafana/ui/src/components/VizTooltip/VizTooltipWrapper';\nimport { VizTooltipItem } from '@grafana/ui/src/components/VizTooltip/types';\nimport { getContentItems } from '@grafana/ui/src/components/VizTooltip/utils';\n\nimport { getDataLinks } from '../status-history/utils';\nimport { isTooltipScrollable } from '../timeseries/utils';\n\nexport interface HistogramTooltipProps {\n  // aligned series frame\n  series: DataFrame;\n  xMinOnlyFrame: DataFrame;\n\n  // hovered points\n  dataIdxs: Array<number | null>;\n  // closest/hovered series\n  seriesIdx?: number | null;\n  mode?: TooltipDisplayMode;\n  sortOrder?: SortOrder;\n\n  isPinned: boolean;\n  maxHeight?: number;\n}\n\nexport const HistogramTooltip = ({\n  series,\n  xMinOnlyFrame,\n  dataIdxs,\n  seriesIdx,\n  mode = TooltipDisplayMode.Single,\n  sortOrder = SortOrder.None,\n  isPinned,\n  maxHeight,\n}: HistogramTooltipProps) => {\n  const xMinField = series.fields[0];\n  const xMaxField = series.fields[1];\n\n  // use the formatter from other bucket bound if none is defined\n  const { display: xMinDisp } = xMinField.config.unit != null ? xMinField : xMaxField;\n  const { display: xMaxDisp } = xMaxField.config.unit != null ? xMaxField : xMinField;\n\n  const xMinVal = formattedValueToString(xMinDisp!(xMinField.values[dataIdxs[0]!]));\n  const xMaxVal = formattedValueToString(xMaxDisp!(xMaxField.values[dataIdxs[1]!]));\n\n  const headerItem: VizTooltipItem | null = xMinField.config.custom?.hideFrom?.tooltip\n    ? null\n    : {\n        label: 'Bucket',\n        value: `${xMinVal} - ${xMaxVal}`,\n      };\n\n  const contentItems = useMemo(\n    () => getContentItems(xMinOnlyFrame.fields, xMinField, dataIdxs, seriesIdx, mode, sortOrder),\n    [xMinOnlyFrame.fields, xMinField, dataIdxs, seriesIdx, mode, sortOrder]\n  );\n\n  let footer: ReactNode;\n\n  if (isPinned && seriesIdx != null) {\n    const field = series.fields[seriesIdx];\n    const dataIdx = dataIdxs[seriesIdx]!;\n    const links = getDataLinks(field, dataIdx);\n\n    footer = <VizTooltipFooter dataLinks={links} />;\n  }\n\n  return (\n    <VizTooltipWrapper>\n      {headerItem != null && <VizTooltipHeader item={headerItem} isPinned={isPinned} />}\n      <VizTooltipContent\n        items={contentItems}\n        isPinned={isPinned}\n        scrollable={isTooltipScrollable({ mode, maxHeight })}\n        maxHeight={maxHeight}\n      />\n      {footer}\n    </VizTooltipWrapper>\n  );\n};\n","import { useMemo } from 'react';\n\nimport { PanelProps, buildHistogram, getHistogramFields } from '@grafana/data';\nimport { histogramFieldsToFrame } from '@grafana/data/src/transformations/transformers/histogram';\nimport { TooltipDisplayMode, TooltipPlugin2, useTheme2 } from '@grafana/ui';\nimport { TooltipHoverMode } from '@grafana/ui/src/components/uPlot/plugins/TooltipPlugin2';\n\nimport { Histogram, getBucketSize } from './Histogram';\nimport { HistogramTooltip } from './HistogramTooltip';\nimport { Options } from './panelcfg.gen';\n\ntype Props = PanelProps<Options>;\n\nexport const HistogramPanel = ({ data, options, width, height }: Props) => {\n  const theme = useTheme2();\n\n  const histogram = useMemo(() => {\n    if (!data.series.length) {\n      return undefined;\n    }\n\n    // stamp origins for legend's calcs (from raw values)\n    data.series.forEach((frame, frameIndex) => {\n      frame.fields.forEach((field, fieldIndex) => {\n        field.state = {\n          ...field.state,\n          origin: {\n            frameIndex,\n            fieldIndex,\n          },\n        };\n      });\n    });\n\n    if (data.series.length === 1) {\n      const info = getHistogramFields(data.series[0]);\n      if (info) {\n        return histogramFieldsToFrame(info);\n      }\n    }\n    const hist = buildHistogram(data.series, options);\n    if (!hist) {\n      return undefined;\n    }\n\n    return histogramFieldsToFrame(hist, theme);\n  }, [data.series, options, theme]);\n\n  if (!histogram || !histogram.fields.length) {\n    return (\n      <div className=\"panel-empty\">\n        <p>No histogram found in response</p>\n      </div>\n    );\n  }\n\n  const bucketSize = getBucketSize(histogram);\n\n  return (\n    <Histogram\n      options={options}\n      theme={theme}\n      legend={options.legend}\n      rawSeries={data.series}\n      structureRev={data.structureRev}\n      width={width}\n      height={height}\n      alignedFrame={histogram}\n      bucketSize={bucketSize}\n      bucketCount={options.bucketCount}\n    >\n      {(builder, alignedFrame, xMinOnlyFrame) => {\n        return (\n          <>\n            {options.tooltip.mode !== TooltipDisplayMode.None && (\n              <TooltipPlugin2\n                config={builder}\n                hoverMode={\n                  options.tooltip.mode === TooltipDisplayMode.Single ? TooltipHoverMode.xOne : TooltipHoverMode.xAll\n                }\n                render={(u, dataIdxs, seriesIdx, isPinned = false) => {\n                  return (\n                    <HistogramTooltip\n                      series={histogram}\n                      xMinOnlyFrame={xMinOnlyFrame}\n                      dataIdxs={dataIdxs}\n                      seriesIdx={seriesIdx}\n                      mode={options.tooltip.mode}\n                      sortOrder={options.tooltip.sort}\n                      isPinned={isPinned}\n                      maxHeight={options.tooltip.maxHeight}\n                    />\n                  );\n                }}\n                maxWidth={options.tooltip.maxWidth}\n              />\n            )}\n          </>\n        );\n      }}\n    </Histogram>\n  );\n};\n","import { StackingMode } from '@grafana/schema';\n\nimport { FieldConfig } from './panelcfg.gen';\n\nexport const defaultHistogramConfig: FieldConfig = {\n  stacking: {\n    mode: StackingMode.None,\n    group: 'A',\n  },\n};\n","import { isNil, omitBy } from 'lodash';\n\nimport { FieldConfigSource, PanelTypeChangedHandler } from '@grafana/data';\nimport {\n  LegendDisplayMode,\n  SortOrder,\n  StackingMode,\n  TooltipDisplayMode,\n} from '@grafana/schema/dist/esm/common/common.gen';\n\nimport { defaultHistogramConfig } from './config';\nimport { FieldConfig as HistogramFieldConfig, Options } from './panelcfg.gen';\n\n/*\n * This is called when the panel changes from another panel\n */\nexport const changeToHistogramPanelMigrationHandler: PanelTypeChangedHandler = (\n  panel,\n  prevPluginId,\n  prevOptions,\n  prevFieldConfig\n) => {\n  if (prevPluginId === 'graph') {\n    const graphOptions: GraphOptions = prevOptions.angular;\n\n    if (graphOptions.xaxis?.mode === 'histogram') {\n      const { fieldConfig, options } = graphToHistogramOptions({\n        ...prevOptions.angular,\n        fieldConfig: prevFieldConfig,\n      });\n\n      panel.fieldConfig = fieldConfig; // Mutates the incoming panel\n\n      return options;\n    }\n  }\n\n  return {};\n};\n\nfunction graphToHistogramOptions(graphOptions: GraphOptions): {\n  fieldConfig: FieldConfigSource;\n  options: Options;\n} {\n  let histogramFieldConfig: HistogramFieldConfig = {};\n  const options: Options = {\n    legend: {\n      displayMode: LegendDisplayMode.List,\n      showLegend: true,\n      placement: 'bottom',\n      calcs: [],\n    },\n    tooltip: {\n      mode: TooltipDisplayMode.Single,\n      sort: SortOrder.None,\n    },\n    combine: false,\n  };\n\n  if (graphOptions.stack) {\n    histogramFieldConfig.stacking = {\n      mode: graphOptions.percentage ? StackingMode.Percent : StackingMode.Normal,\n      group: defaultHistogramConfig.stacking!.group,\n    };\n\n    options.combine = false;\n  }\n\n  return {\n    fieldConfig: {\n      defaults: omitBy(\n        {\n          custom: histogramFieldConfig,\n        },\n        isNil\n      ),\n      overrides: [],\n    },\n    options,\n  };\n}\n\ninterface GraphOptions {\n  stack?: boolean;\n  percentage?: boolean;\n  xaxis: {\n    mode: 'series' | 'time' | 'histogram';\n    values?: string[];\n  };\n}\n","import { DataFrame, FieldType } from '@grafana/data';\nimport {\n  isHistogramFrameBucketMinFieldName,\n  isHistogramFrameBucketMaxFieldName,\n} from '@grafana/data/src/transformations/transformers/histogram';\n\nexport function originalDataHasHistogram(frames?: DataFrame[]): boolean {\n  if (frames?.length !== 1) {\n    return false;\n  }\n  const frame = frames[0];\n  if (frame.fields.length < 3) {\n    return false;\n  }\n\n  if (\n    !isHistogramFrameBucketMinFieldName(frame.fields[0].name) ||\n    !isHistogramFrameBucketMaxFieldName(frame.fields[1].name)\n  ) {\n    return false;\n  }\n  for (const field of frame.fields) {\n    if (field.type !== FieldType.number) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","import {\n  FieldColorModeId,\n  FieldConfigProperty,\n  FieldType,\n  identityOverrideProcessor,\n  PanelPlugin,\n} from '@grafana/data';\nimport { histogramFieldInfo } from '@grafana/data/src/transformations/transformers/histogram';\nimport { commonOptionsBuilder, graphFieldOptions } from '@grafana/ui';\nimport { StackingEditor } from '@grafana/ui/src/options/builder';\n\nimport { HistogramPanel } from './HistogramPanel';\nimport { defaultHistogramConfig } from './config';\nimport { changeToHistogramPanelMigrationHandler } from './migrations';\nimport { FieldConfig, Options, defaultFieldConfig, defaultOptions } from './panelcfg.gen';\nimport { originalDataHasHistogram } from './utils';\n\nexport const plugin = new PanelPlugin<Options, FieldConfig>(HistogramPanel)\n  .setPanelChangeHandler(changeToHistogramPanelMigrationHandler)\n  .setPanelOptions((builder) => {\n    builder\n      .addCustomEditor({\n        id: '__calc__',\n        path: '__calc__',\n        name: 'Values',\n        description: 'Showing frequencies that are calculated in the query',\n        editor: () => null, // empty editor\n        showIf: (opts, data) => originalDataHasHistogram(data),\n      })\n      .addNumberInput({\n        path: 'bucketCount',\n        name: histogramFieldInfo.bucketCount.name,\n        description: histogramFieldInfo.bucketCount.description,\n        settings: {\n          placeholder: `Default: ${defaultOptions.bucketCount}`,\n          min: 0,\n        },\n        showIf: (opts, data) => !originalDataHasHistogram(data),\n      })\n      .addNumberInput({\n        path: 'bucketSize',\n        name: histogramFieldInfo.bucketSize.name,\n        description: histogramFieldInfo.bucketSize.description,\n        settings: {\n          placeholder: 'Auto',\n          min: 0,\n        },\n        defaultValue: defaultOptions.bucketSize,\n        showIf: (opts, data) => !originalDataHasHistogram(data),\n      })\n      .addNumberInput({\n        path: 'bucketOffset',\n        name: histogramFieldInfo.bucketOffset.name,\n        description: histogramFieldInfo.bucketOffset.description,\n        settings: {\n          placeholder: `Default: ${defaultOptions.bucketOffset}`,\n          min: 0,\n        },\n        showIf: (opts, data) => !originalDataHasHistogram(data),\n      })\n      .addBooleanSwitch({\n        path: 'combine',\n        name: histogramFieldInfo.combine.name,\n        description: histogramFieldInfo.combine.description,\n        defaultValue: defaultOptions.combine,\n        showIf: (opts, data) => !originalDataHasHistogram(data),\n      });\n\n    commonOptionsBuilder.addTooltipOptions(builder);\n    commonOptionsBuilder.addLegendOptions(builder);\n  })\n  .useFieldConfig({\n    standardOptions: {\n      [FieldConfigProperty.Color]: {\n        settings: {\n          byValueSupport: false,\n          bySeriesSupport: true,\n          preferThresholdsMode: false,\n        },\n        defaultValue: {\n          mode: FieldColorModeId.PaletteClassic,\n        },\n      },\n    },\n    useCustomConfig: (builder) => {\n      const cfg = defaultFieldConfig;\n\n      builder\n        .addCustomEditor({\n          id: 'stacking',\n          path: 'stacking',\n          name: 'Stacking',\n          category: ['Histogram'],\n          defaultValue: defaultHistogramConfig.stacking,\n          editor: StackingEditor,\n          override: StackingEditor,\n          settings: {\n            options: graphFieldOptions.stacking,\n          },\n          process: identityOverrideProcessor,\n          shouldApply: (f) => f.type === FieldType.number,\n          showIf: (opts, data) => !originalDataHasHistogram(data),\n        })\n        .addSliderInput({\n          path: 'lineWidth',\n          name: 'Line width',\n          defaultValue: cfg.lineWidth,\n          settings: {\n            min: 0,\n            max: 10,\n            step: 1,\n          },\n        })\n        .addSliderInput({\n          path: 'fillOpacity',\n          name: 'Fill opacity',\n          defaultValue: cfg.fillOpacity,\n          settings: {\n            min: 0,\n            max: 100,\n            step: 1,\n          },\n        })\n        .addRadio({\n          path: 'gradientMode',\n          name: 'Gradient mode',\n          defaultValue: graphFieldOptions.fillGradient[0].value,\n          settings: {\n            options: graphFieldOptions.fillGradient,\n          },\n        });\n\n      commonOptionsBuilder.addHideFrom(builder);\n    },\n  });\n","import { ActionModel, Field, InterpolateFunction, LinkModel } from '@grafana/data';\nimport { DataFrame } from '@grafana/data/';\nimport { config } from '@grafana/runtime';\nimport { getActions } from 'app/features/actions/utils';\n\nexport const getDataLinks = (field: Field, rowIdx: number) => {\n  const links: Array<LinkModel<Field>> = [];\n\n  if ((field.config.links?.length ?? 0) > 0 && field.getLinks != null) {\n    const v = field.values[rowIdx];\n    const disp = field.display ? field.display(v) : { text: `${v}`, numeric: +v };\n\n    const linkLookup = new Set<string>();\n\n    field.getLinks({ calculatedValue: disp, valueRowIndex: rowIdx }).forEach((link) => {\n      const key = `${link.title}/${link.href}`;\n      if (!linkLookup.has(key)) {\n        links.push(link);\n        linkLookup.add(key);\n      }\n    });\n  }\n\n  return links;\n};\n\nexport const getFieldActions = (\n  dataFrame: DataFrame,\n  field: Field,\n  replaceVars: InterpolateFunction,\n  rowIndex: number\n) => {\n  if (!config.featureToggles?.vizActions) {\n    return [];\n  }\n\n  const actions: Array<ActionModel<Field>> = [];\n  const actionLookup = new Set<string>();\n\n  const actionsModel = getActions(dataFrame, field, field.state!.scopedVars!, replaceVars, field.config.actions ?? [], {\n    valueRowIndex: rowIndex,\n  });\n\n  actionsModel.forEach((action) => {\n    const key = `${action.title}`;\n    if (!actionLookup.has(key)) {\n      actions.push(action);\n      actionLookup.add(key);\n    }\n  });\n\n  return actions;\n};\n","import {\n  DataFrame,\n  Field,\n  FieldType,\n  getDisplayProcessor,\n  GrafanaTheme2,\n  isBooleanUnit,\n  TimeRange,\n  cacheFieldDisplayNames,\n} from '@grafana/data';\nimport { convertFieldType } from '@grafana/data/src/transformations/transformers/convertFieldType';\nimport { applyNullInsertThreshold } from '@grafana/data/src/transformations/transformers/nulls/nullInsertThreshold';\nimport { nullToValue } from '@grafana/data/src/transformations/transformers/nulls/nullToValue';\nimport { GraphFieldConfig, LineInterpolation, TooltipDisplayMode, VizTooltipOptions } from '@grafana/schema';\nimport { buildScaleKey } from '@grafana/ui/src/components/uPlot/internal';\n\nimport { HeatmapTooltip } from '../heatmap/panelcfg.gen';\n\ntype ScaleKey = string;\n\n// this will re-enumerate all enum fields on the same scale to create one ordinal progression\n// e.g. ['a','b'][0,1,0] + ['c','d'][1,0,1] -> ['a','b'][0,1,0] + ['c','d'][3,2,3]\nfunction reEnumFields(frames: DataFrame[]): DataFrame[] {\n  let allTextsByKey: Map<ScaleKey, string[]> = new Map();\n\n  let frames2: DataFrame[] = frames.map((frame) => {\n    return {\n      ...frame,\n      fields: frame.fields.map((field) => {\n        if (field.type === FieldType.enum) {\n          let scaleKey = buildScaleKey(field.config, field.type);\n          let allTexts = allTextsByKey.get(scaleKey);\n\n          if (!allTexts) {\n            allTexts = [];\n            allTextsByKey.set(scaleKey, allTexts);\n          }\n\n          let idxs: number[] = field.values.toArray().slice();\n          let txts = field.config.type!.enum!.text!;\n\n          // by-reference incrementing\n          if (allTexts.length > 0) {\n            for (let i = 0; i < idxs.length; i++) {\n              idxs[i] += allTexts.length;\n            }\n          }\n\n          allTexts.push(...txts);\n\n          // shared among all enum fields on same scale\n          field.config.type!.enum!.text! = allTexts;\n\n          return {\n            ...field,\n            values: idxs,\n          };\n\n          // TODO: update displayProcessor?\n        }\n\n        return field;\n      }),\n    };\n  });\n\n  return frames2;\n}\n\n/**\n * Returns null if there are no graphable fields\n */\nexport function prepareGraphableFields(\n  series: DataFrame[],\n  theme: GrafanaTheme2,\n  timeRange?: TimeRange,\n  // numeric X requires a single frame where the first field is numeric\n  xNumFieldIdx?: number\n): DataFrame[] | null {\n  if (!series?.length) {\n    return null;\n  }\n\n  cacheFieldDisplayNames(series);\n\n  let useNumericX = xNumFieldIdx != null;\n\n  // Make sure the numeric x field is first in the frame\n  if (xNumFieldIdx != null && xNumFieldIdx > 0) {\n    series = [\n      {\n        ...series[0],\n        fields: [series[0].fields[xNumFieldIdx], ...series[0].fields.filter((f, i) => i !== xNumFieldIdx)],\n      },\n    ];\n  }\n\n  // some datasources simply tag the field as time, but don't convert to milli epochs\n  // so we're stuck with doing the parsing here to avoid Moment slowness everywhere later\n  // this mutates (once)\n  for (let frame of series) {\n    for (let field of frame.fields) {\n      if (field.type === FieldType.time && typeof field.values[0] !== 'number') {\n        field.values = convertFieldType(field, { destinationType: FieldType.time }).values;\n      }\n    }\n  }\n\n  let enumFieldsCount = 0;\n\n  loopy: for (let frame of series) {\n    for (let field of frame.fields) {\n      if (field.type === FieldType.enum && ++enumFieldsCount > 1) {\n        series = reEnumFields(series);\n        break loopy;\n      }\n    }\n  }\n\n  let copy: Field;\n\n  const frames: DataFrame[] = [];\n\n  for (let frame of series) {\n    const fields: Field[] = [];\n\n    let hasTimeField = false;\n    let hasValueField = false;\n\n    let nulledFrame = useNumericX\n      ? frame\n      : applyNullInsertThreshold({\n          frame,\n          refFieldPseudoMin: timeRange?.from.valueOf(),\n          refFieldPseudoMax: timeRange?.to.valueOf(),\n        });\n\n    const frameFields = nullToValue(nulledFrame).fields;\n\n    for (let fieldIdx = 0; fieldIdx < frameFields?.length ?? 0; fieldIdx++) {\n      const field = frameFields[fieldIdx];\n\n      switch (field.type) {\n        case FieldType.time:\n          hasTimeField = true;\n          fields.push(field);\n          break;\n        case FieldType.number:\n          hasValueField = useNumericX ? fieldIdx > 0 : true;\n          copy = {\n            ...field,\n            values: field.values.map((v) => {\n              if (!(Number.isFinite(v) || v == null)) {\n                return null;\n              }\n              return v;\n            }),\n          };\n\n          fields.push(copy);\n          break; // ok\n        case FieldType.enum:\n          hasValueField = true;\n        case FieldType.string:\n          copy = {\n            ...field,\n            values: field.values,\n          };\n\n          fields.push(copy);\n          break; // ok\n        case FieldType.boolean:\n          hasValueField = true;\n          const custom: GraphFieldConfig = field.config?.custom ?? {};\n          const config = {\n            ...field.config,\n            max: 1,\n            min: 0,\n            custom,\n          };\n\n          // smooth and linear do not make sense\n          if (custom.lineInterpolation !== LineInterpolation.StepBefore) {\n            custom.lineInterpolation = LineInterpolation.StepAfter;\n          }\n\n          copy = {\n            ...field,\n            config,\n            type: FieldType.number,\n            values: field.values.map((v) => {\n              if (v == null) {\n                return v;\n              }\n              return Boolean(v) ? 1 : 0;\n            }),\n          };\n\n          if (!isBooleanUnit(config.unit)) {\n            config.unit = 'bool';\n            copy.display = getDisplayProcessor({ field: copy, theme });\n          }\n\n          fields.push(copy);\n          break;\n      }\n    }\n\n    if ((useNumericX || hasTimeField) && hasValueField) {\n      frames.push({\n        ...frame,\n        length: nulledFrame.length,\n        fields,\n      });\n    }\n  }\n\n  if (frames.length) {\n    setClassicPaletteIdxs(frames, theme, 0);\n    matchEnumColorToSeriesColor(frames, theme);\n    return frames;\n  }\n\n  return null;\n}\n\nconst matchEnumColorToSeriesColor = (frames: DataFrame[], theme: GrafanaTheme2) => {\n  const { palette } = theme.visualization;\n  for (const frame of frames) {\n    for (const field of frame.fields) {\n      if (field.type === FieldType.enum) {\n        const namedColor = palette[field.state?.seriesIndex! % palette.length];\n        const hexColor = theme.visualization.getColorByName(namedColor);\n        const enumConfig = field.config.type!.enum!;\n\n        enumConfig.color = Array(enumConfig.text!.length).fill(hexColor);\n        field.display = getDisplayProcessor({ field, theme });\n      }\n    }\n  }\n};\n\nexport const setClassicPaletteIdxs = (frames: DataFrame[], theme: GrafanaTheme2, skipFieldIdx?: number) => {\n  let seriesIndex = 0;\n  frames.forEach((frame) => {\n    frame.fields.forEach((field, fieldIdx) => {\n      if (\n        fieldIdx !== skipFieldIdx &&\n        (field.type === FieldType.number || field.type === FieldType.boolean || field.type === FieldType.enum)\n      ) {\n        field.state = {\n          ...field.state,\n          seriesIndex: seriesIndex++, // TODO: skip this for fields with custom renderers (e.g. Candlestick)?\n        };\n        field.display = getDisplayProcessor({ field, theme });\n      }\n    });\n  });\n};\n\nexport function getTimezones(timezones: string[] | undefined, defaultTimezone: string): string[] {\n  if (!timezones || !timezones.length) {\n    return [defaultTimezone];\n  }\n  return timezones.map((v) => (v?.length ? v : defaultTimezone));\n}\n\nexport const isTooltipScrollable = (tooltipOptions: VizTooltipOptions | HeatmapTooltip) => {\n  return tooltipOptions.mode === TooltipDisplayMode.Multi && tooltipOptions.maxHeight != null;\n};\n"],"names":["VizTooltipContent","items","children","isPinned","scrollable","maxHeight","styles","getStyles","scrollableStyle","label","value","color","colorIndicator","colorPlacement","isActive","lineStyle","i","theme","ActionButton","action","buttonProps","Button","ADD_ANNOTATION_ID","renderDataLinks","dataLinks","Stack","link","DataLinkButton","renderActions","actions","VizTooltipFooter","annotate","VizTooltipHeader","item","ColorIndicatorPosition","VizTooltipColorIndicator","position","SeriesIcon","LabelValueTypes","SUCCESSFULLY_COPIED_TEXT","SHOW_SUCCESS_DURATION","HORIZONTAL_PX_PER_CHAR","VizTooltipRow","justify","marginRight","showValueScroll","innerValueScrollStyle","showLabelTooltip","setShowLabelTooltip","copiedText","setCopiedText","showCopySuccess","setShowCopySuccess","labelRef","valueRef","timeoutId","copyToClipboard","text","type","fallbackCopyToClipboard","textarea","err","onMouseEnterLabel","event","onMouseLeaveLabel","Tooltip","InlineToast","VizTooltipWrapper","className","getActions","frame","field","fieldScopedVars","replaceVariables","config","dataContext","actionScopedVars","boundReplaceVariables","scopedVars","format","actionModel","e","evt","origin","buildActionOnClick","url","getUrl","requestHeaders","request","getData","name","error","getActionsDefaultField","endpoint","sanitizedRelativeURL","data","HorizontalConstraint","VerticalConstraint","BackgroundImageSize","HttpRequestMethod","ConnectionPath","defaultCanvasConnection","defaultCanvasElementOptions","defaultOptions","defaultFieldConfig","incrRoundDn","num","incr","incrRoundUp","getBucketSize","getBucketSize1","prepConfig","xScaleMin","xScaleMax","builder","UPlotConfigBuilder","isOrdinalX","bucketSize","bucketSize1","bucketFactor","useLogScale","xSplits","u","axisIdx","scaleMin","scaleMax","foundIncr","foundSpace","minSpace","bucketWidth","firstSplit","lastSplit","splits","skip","s","wantedMin","wantedMax","fullRangeMax","fmt","xAxisFormatter","v","tickLabels","maxWidth","curMax","measureText","maxCount","keepMod","dispY","decimals","stackingGroups","xMinOnlyFrame","pathBuilder","seriesIndex","customConfig","scaleKey","colorMode","seriesColor","f","preparePlotData","counts","j","Histogram","props","withConfig","alignedFrame","xMinOnly","alignedData","legend","frames","PlotLegend","prevProps","structureRev","bucketCount","shouldReconfig","newState","width","height","VizLayout","vizWidth","vizHeight","HistogramTooltip","series","dataIdxs","seriesIdx","mode","sortOrder","xMinField","xMaxField","xMinDisp","xMaxDisp","xMinVal","xMaxVal","headerItem","contentItems","footer","dataIdx","links","HistogramPanel","options","histogram","frameIndex","fieldIndex","info","hist","TooltipPlugin2","defaultHistogramConfig","changeToHistogramPanelMigrationHandler","panel","prevPluginId","prevOptions","prevFieldConfig","fieldConfig","graphToHistogramOptions","graphOptions","histogramFieldConfig","originalDataHasHistogram","PanelPlugin","opts","cfg","getDataLinks","rowIdx","disp","linkLookup","key","getFieldActions","dataFrame","replaceVars","rowIndex","actionLookup","reEnumFields","allTextsByKey","allTexts","idxs","txts","prepareGraphableFields","timeRange","xNumFieldIdx","useNumericX","enumFieldsCount","loopy","copy","fields","hasTimeField","hasValueField","nulledFrame","frameFields","fieldIdx","custom","setClassicPaletteIdxs","matchEnumColorToSeriesColor","palette","namedColor","hexColor","enumConfig","skipFieldIdx","getTimezones","timezones","defaultTimezone","isTooltipScrollable","tooltipOptions"],"sourceRoot":""}