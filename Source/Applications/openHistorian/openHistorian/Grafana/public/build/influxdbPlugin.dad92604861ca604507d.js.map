{"version":3,"file":"influxdbPlugin.dad92604861ca604507d.js","mappings":"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","sources":["webpack://grafana/./public/app/plugins/datasource/influxdb/constants.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/types.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/ConfigEditor.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/InfluxCheatSheet.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/InfluxStartPage.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/query_part.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/influx_query_model.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/queryUtils.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/FluxQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/QueryEditorModeSwitcher.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/constants.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/useShadowedState.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/RawInfluxQLEditor.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/query_builder.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/influxQLMetadataQuery.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/styles.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/unwrap.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/FormatAsSection.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/Seg.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/toSelectableValue.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/FromSection.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/InputSection.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/OrderByTimeSection.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/AddButton.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/PartListSection.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/tagUtils.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/TagsSection.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/partListUtils.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/Editor.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/QueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/VariableQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/components/AnnotationEditor.tsx","webpack://grafana/./public/app/plugins/datasource/influxdb/influx_series.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/migrations.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/response_parser.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/datasource.ts","webpack://grafana/./public/app/plugins/datasource/influxdb/module.ts"],"sourcesContent":["export const BROWSER_MODE_DISABLED_MESSAGE =\n  'Direct browser access in the InfluxDB datasource is no longer available. Switch to server access mode.';\n","import { AdHocVariableFilter, DataQuery, DataSourceJsonData } from '@grafana/data';\n\nexport enum InfluxVersion {\n  InfluxQL = 'InfluxQL',\n  Flux = 'Flux',\n}\n\nexport interface InfluxOptions extends DataSourceJsonData {\n  version?: InfluxVersion;\n\n  timeInterval?: string;\n  httpMode?: string;\n\n  dbName?: string;\n\n  // With Flux\n  organization?: string;\n  defaultBucket?: string;\n  maxSeries?: number;\n}\n\nexport interface InfluxSecureJsonData {\n  // For Flux\n  token?: string;\n\n  // In 1x a different password can be sent than then HTTP auth\n  password?: string;\n}\n\nexport interface InfluxQueryPart {\n  type: string;\n  params?: Array<string | number>;\n  // FIXME: `interval` does not seem to be used.\n  // check all the influxdb parts (query-generation etc.),\n  // if it is really so, and if yes, remove it\n  interval?: string;\n}\n\nexport interface InfluxQueryTag {\n  key: string;\n  operator?: string;\n  condition?: string;\n  value: string;\n}\n\nexport type ResultFormat = 'time_series' | 'table' | 'logs';\n\nexport interface InfluxQuery extends DataQuery {\n  policy?: string;\n  measurement?: string;\n  resultFormat?: ResultFormat;\n  orderByTime?: string;\n  tags?: InfluxQueryTag[];\n  groupBy?: InfluxQueryPart[];\n  select?: InfluxQueryPart[][];\n  limit?: string | number;\n  slimit?: string | number;\n  tz?: string;\n  // NOTE: `fill` is not used in the query-editor anymore, and is removed\n  // if any change happens in the query-editor. the query-generation still\n  // supports it for now.\n  fill?: string;\n  rawQuery?: boolean;\n  query?: string;\n  alias?: string;\n  // for migrated InfluxQL annotations\n  queryType?: string;\n  fromAnnotations?: boolean;\n  tagsColumn?: string;\n  textColumn?: string;\n  timeEndColumn?: string;\n  titleColumn?: string;\n  name?: string;\n  textEditor?: boolean;\n  adhocFilters?: AdHocVariableFilter[];\n}\n","import { uniqueId } from 'lodash';\nimport React, { PureComponent } from 'react';\n\nimport {\n  DataSourcePluginOptionsEditorProps,\n  onUpdateDatasourceJsonDataOption,\n  onUpdateDatasourceJsonDataOptionSelect,\n  onUpdateDatasourceOption,\n  onUpdateDatasourceSecureJsonDataOption,\n  SelectableValue,\n  updateDatasourcePluginJsonDataOption,\n  updateDatasourcePluginResetOption,\n} from '@grafana/data';\nimport {\n  Alert,\n  DataSourceHttpSettings,\n  InfoBox,\n  InlineField,\n  InlineFormLabel,\n  LegacyForms,\n  SecureSocksProxySettings,\n  Select,\n} from '@grafana/ui';\nimport { config } from 'app/core/config';\n\nimport { BROWSER_MODE_DISABLED_MESSAGE } from '../constants';\nimport { InfluxOptions, InfluxSecureJsonData, InfluxVersion } from '../types';\n\nconst { Input, SecretFormField } = LegacyForms;\n\nconst httpModes: SelectableValue[] = [\n  { label: 'GET', value: 'GET' },\n  { label: 'POST', value: 'POST' },\n];\n\nconst versions: Array<SelectableValue<InfluxVersion>> = [\n  {\n    label: 'InfluxQL',\n    value: InfluxVersion.InfluxQL,\n    description: 'The InfluxDB SQL-like query language.',\n  },\n  {\n    label: 'Flux',\n    value: InfluxVersion.Flux,\n    description: 'Advanced data scripting and query language.  Supported in InfluxDB 2.x and 1.8+',\n  },\n];\n\nexport type Props = DataSourcePluginOptionsEditorProps<InfluxOptions>;\ntype State = {\n  maxSeries: string | undefined;\n};\n\nexport class ConfigEditor extends PureComponent<Props, State> {\n  state = {\n    maxSeries: '',\n  };\n\n  htmlPrefix: string;\n\n  constructor(props: Props) {\n    super(props);\n    this.state.maxSeries = props.options.jsonData.maxSeries?.toString() || '';\n    this.htmlPrefix = uniqueId('influxdb-config');\n  }\n\n  // 1x\n  onResetPassword = () => {\n    updateDatasourcePluginResetOption(this.props, 'password');\n  };\n\n  // 2x\n  onResetToken = () => {\n    updateDatasourcePluginResetOption(this.props, 'token');\n  };\n\n  onVersionChanged = (selected: SelectableValue<InfluxVersion>) => {\n    const { options, onOptionsChange } = this.props;\n\n    const copy: any = {\n      ...options,\n      jsonData: {\n        ...options.jsonData,\n        version: selected.value,\n      },\n    };\n    if (selected.value === InfluxVersion.Flux) {\n      copy.access = 'proxy';\n      copy.basicAuth = true;\n      copy.jsonData.httpMode = 'POST';\n\n      // Remove old 1x configs\n      delete copy.user;\n      delete copy.database;\n    }\n\n    onOptionsChange(copy);\n  };\n\n  renderInflux2x() {\n    const { options } = this.props;\n    const { secureJsonFields } = options;\n    const secureJsonData = (options.secureJsonData || {}) as InfluxSecureJsonData;\n    const { htmlPrefix } = this;\n\n    return (\n      <>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel htmlFor={`${htmlPrefix}-org`} className=\"width-10\">\n              Organization\n            </InlineFormLabel>\n            <div className=\"width-10\">\n              <Input\n                id={`${htmlPrefix}-org`}\n                className=\"width-20\"\n                value={options.jsonData.organization || ''}\n                onChange={onUpdateDatasourceJsonDataOption(this.props, 'organization')}\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <SecretFormField\n              isConfigured={Boolean(secureJsonFields && secureJsonFields.token)}\n              value={secureJsonData.token || ''}\n              label=\"Token\"\n              aria-label=\"Token\"\n              labelWidth={10}\n              inputWidth={20}\n              onReset={this.onResetToken}\n              onChange={onUpdateDatasourceSecureJsonDataOption(this.props, 'token')}\n            />\n          </div>\n        </div>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel className=\"width-10\">Default Bucket</InlineFormLabel>\n            <div className=\"width-10\">\n              <Input\n                className=\"width-20\"\n                placeholder=\"default bucket\"\n                value={options.jsonData.defaultBucket || ''}\n                onChange={onUpdateDatasourceJsonDataOption(this.props, 'defaultBucket')}\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel\n              className=\"width-10\"\n              tooltip=\"A lower limit for the auto group by time interval. Recommended to be set to write frequency,\n\t\t\t\tfor example 1m if your data is written every minute.\"\n            >\n              Min time interval\n            </InlineFormLabel>\n            <div className=\"width-10\">\n              <Input\n                className=\"width-10\"\n                placeholder=\"10s\"\n                value={options.jsonData.timeInterval || ''}\n                onChange={onUpdateDatasourceJsonDataOption(this.props, 'timeInterval')}\n              />\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  renderInflux1x() {\n    const { options } = this.props;\n    const { secureJsonFields } = options;\n    const secureJsonData = (options.secureJsonData || {}) as InfluxSecureJsonData;\n    const { htmlPrefix } = this;\n\n    return (\n      <>\n        <InfoBox>\n          <h5>Database Access</h5>\n          <p>\n            Setting the database for this datasource does not deny access to other databases. The InfluxDB query syntax\n            allows switching the database in the query. For example:\n            <code>SHOW MEASUREMENTS ON _internal</code> or\n            <code>SELECT * FROM &quot;_internal&quot;..&quot;database&quot; LIMIT 10</code>\n            <br />\n            <br />\n            To support data isolation and security, make sure appropriate permissions are configured in InfluxDB.\n          </p>\n        </InfoBox>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel htmlFor={`${htmlPrefix}-db`} className=\"width-10\">\n              Database\n            </InlineFormLabel>\n            <div className=\"width-20\">\n              <Input\n                id={`${htmlPrefix}-db`}\n                className=\"width-20\"\n                value={options.jsonData.dbName ?? options.database}\n                onChange={(event) => {\n                  this.props.onOptionsChange({\n                    ...options,\n                    database: '',\n                    jsonData: {\n                      ...options.jsonData,\n                      dbName: event.target.value,\n                    },\n                  });\n                }}\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel htmlFor={`${htmlPrefix}-user`} className=\"width-10\">\n              User\n            </InlineFormLabel>\n            <div className=\"width-10\">\n              <Input\n                id={`${htmlPrefix}-user`}\n                className=\"width-20\"\n                value={options.user || ''}\n                onChange={onUpdateDatasourceOption(this.props, 'user')}\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <SecretFormField\n              isConfigured={Boolean(secureJsonFields && secureJsonFields.password)}\n              value={secureJsonData.password || ''}\n              label=\"Password\"\n              aria-label=\"Password\"\n              labelWidth={10}\n              inputWidth={20}\n              onReset={this.onResetPassword}\n              onChange={onUpdateDatasourceSecureJsonDataOption(this.props, 'password')}\n            />\n          </div>\n        </div>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel\n              htmlFor={`${htmlPrefix}-http-method`}\n              className=\"width-10\"\n              tooltip=\"You can use either GET or POST HTTP method to query your InfluxDB database. The POST\n          method allows you to perform heavy requests (with a lots of WHERE clause) while the GET method\n          will restrict you and return an error if the query is too large.\"\n            >\n              HTTP Method\n            </InlineFormLabel>\n            <Select\n              inputId={`${htmlPrefix}-http-method`}\n              className=\"width-10\"\n              value={httpModes.find((httpMode) => httpMode.value === options.jsonData.httpMode)}\n              options={httpModes}\n              defaultValue={options.jsonData.httpMode}\n              onChange={onUpdateDatasourceJsonDataOptionSelect(this.props, 'httpMode')}\n            />\n          </div>\n        </div>\n\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel\n              className=\"width-10\"\n              tooltip=\"A lower limit for the auto group by time interval. Recommended to be set to write frequency,\n\t\t\t\tfor example 1m if your data is written every minute.\"\n            >\n              Min time interval\n            </InlineFormLabel>\n            <div className=\"width-10\">\n              <Input\n                className=\"width-10\"\n                placeholder=\"10s\"\n                value={options.jsonData.timeInterval || ''}\n                onChange={onUpdateDatasourceJsonDataOption(this.props, 'timeInterval')}\n              />\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  render() {\n    const { options, onOptionsChange } = this.props;\n    const isDirectAccess = options.access === 'direct';\n\n    return (\n      <>\n        <h3 className=\"page-heading\">Query Language</h3>\n        <div className=\"gf-form-group\">\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <Select\n                aria-label=\"Query language\"\n                className=\"width-30\"\n                value={options.jsonData.version === InfluxVersion.Flux ? versions[1] : versions[0]}\n                options={versions}\n                defaultValue={versions[0]}\n                onChange={this.onVersionChanged}\n              />\n            </div>\n          </div>\n        </div>\n\n        {options.jsonData.version === InfluxVersion.Flux && (\n          <InfoBox>\n            <h5>Support for Flux in Grafana is currently in beta</h5>\n            <p>\n              Please report any issues to: <br />\n              <a href=\"https://github.com/grafana/grafana/issues/new/choose\">\n                https://github.com/grafana/grafana/issues\n              </a>\n            </p>\n          </InfoBox>\n        )}\n\n        {isDirectAccess && (\n          <Alert title=\"Error\" severity=\"error\">\n            {BROWSER_MODE_DISABLED_MESSAGE}\n          </Alert>\n        )}\n\n        <DataSourceHttpSettings\n          showAccessOptions={isDirectAccess}\n          dataSourceConfig={options}\n          defaultUrl=\"http://localhost:8086\"\n          onChange={onOptionsChange}\n        />\n\n        {config.featureToggles.secureSocksDatasourceProxy && (\n          <SecureSocksProxySettings options={options} onOptionsChange={onOptionsChange} />\n        )}\n\n        <div className=\"gf-form-group\">\n          <div>\n            <h3 className=\"page-heading\">InfluxDB Details</h3>\n          </div>\n          {options.jsonData.version === InfluxVersion.Flux ? this.renderInflux2x() : this.renderInflux1x()}\n          <div className=\"gf-form-inline\">\n            <InlineField\n              labelWidth={20}\n              label=\"Max series\"\n              tooltip=\"Limit the number of series/tables that Grafana will process. Lower this number to prevent abuse, and increase it if you have lots of small time series and not all are shown. Defaults to 1000.\"\n            >\n              <Input\n                placeholder=\"1000\"\n                type=\"number\"\n                className=\"width-10\"\n                value={this.state.maxSeries}\n                onChange={(event) => {\n                  // We duplicate this state so that we allow to write freely inside the input. We don't have\n                  // any influence over saving so this seems to be only way to do this.\n                  this.setState({ maxSeries: event.currentTarget.value });\n                  const val = parseInt(event.currentTarget.value, 10);\n                  updateDatasourcePluginJsonDataOption(this.props, 'maxSeries', Number.isFinite(val) ? val : undefined);\n                }}\n              />\n            </InlineField>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default ConfigEditor;\n","import React from 'react';\n\nconst CHEAT_SHEET_ITEMS = [\n  {\n    title: 'Getting started',\n    label:\n      'Start by selecting a measurement and field from the dropdown above. You can then use the tag selector to further narrow your search.',\n  },\n];\n\nconst InfluxCheatSheet = (props: any) => (\n  <div>\n    <h2>InfluxDB Cheat Sheet</h2>\n    {CHEAT_SHEET_ITEMS.map((item) => (\n      <div className=\"cheat-sheet-item\" key={item.title}>\n        <div className=\"cheat-sheet-item__title\">{item.title}</div>\n        <div className=\"cheat-sheet-item__label\">{item.label}</div>\n      </div>\n    ))}\n  </div>\n);\n\nexport default InfluxCheatSheet;\n","import React, { PureComponent } from 'react';\n\nimport { QueryEditorHelpProps } from '@grafana/data';\n\nimport InfluxCheatSheet from './InfluxCheatSheet';\n\nexport default class InfluxStartPage extends PureComponent<QueryEditorHelpProps> {\n  render() {\n    return <InfluxCheatSheet onClickExample={this.props.onClickExample} />;\n  }\n}\n","import { map, clone } from 'lodash';\n\nimport { QueryPartDef, QueryPart, functionRenderer, suffixRenderer } from 'app/features/alerting/state/query_part';\n\nconst index: any[] = [];\nconst categories: any = {\n  Aggregations: [],\n  Selectors: [],\n  Transformations: [],\n  Predictors: [],\n  Math: [],\n  Aliasing: [],\n  Fields: [],\n};\n\nfunction createPart(part: any): any {\n  const def = index[part.type];\n  if (!def) {\n    throw { message: 'Could not find query part ' + part.type };\n  }\n\n  return new QueryPart(part, def);\n}\n\nfunction register(options: any) {\n  index[options.type] = new QueryPartDef(options);\n  options.category.push(index[options.type]);\n}\n\nconst groupByTimeFunctions: any[] = [];\n\nfunction aliasRenderer(part: { params: string[] }, innerExpr: string) {\n  return innerExpr + ' AS ' + '\"' + part.params[0] + '\"';\n}\n\nfunction fieldRenderer(part: { params: string[] }, innerExpr: any) {\n  const param = part.params[0];\n\n  if (param === '*') {\n    return '*';\n  }\n\n  let escapedParam = `\"${param}\"`;\n\n  if (param.endsWith('::tag')) {\n    escapedParam = `\"${param.slice(0, -5)}\"::tag`;\n  }\n\n  if (param.endsWith('::field')) {\n    escapedParam = `\"${param.slice(0, -7)}\"::field`;\n  }\n\n  return escapedParam;\n}\n\nfunction replaceAggregationAddStrategy(selectParts: any[], partModel: { def: { type: string } }) {\n  // look for existing aggregation\n  for (let i = 0; i < selectParts.length; i++) {\n    const part = selectParts[i];\n    if (part.def.category === categories.Aggregations) {\n      if (part.def.type === partModel.def.type) {\n        return;\n      }\n      // count distinct is allowed\n      if (part.def.type === 'count' && partModel.def.type === 'distinct') {\n        break;\n      }\n      // remove next aggregation if distinct was replaced\n      if (part.def.type === 'distinct') {\n        const morePartsAvailable = selectParts.length >= i + 2;\n        if (partModel.def.type !== 'count' && morePartsAvailable) {\n          const nextPart = selectParts[i + 1];\n          if (nextPart.def.category === categories.Aggregations) {\n            selectParts.splice(i + 1, 1);\n          }\n        } else if (partModel.def.type === 'count') {\n          if (!morePartsAvailable || selectParts[i + 1].def.type !== 'count') {\n            selectParts.splice(i + 1, 0, partModel);\n          }\n          return;\n        }\n      }\n      selectParts[i] = partModel;\n      return;\n    }\n    if (part.def.category === categories.Selectors) {\n      selectParts[i] = partModel;\n      return;\n    }\n  }\n\n  selectParts.splice(1, 0, partModel);\n}\n\nfunction addTransformationStrategy(selectParts: any[], partModel: any) {\n  let i;\n  // look for index to add transformation\n  for (i = 0; i < selectParts.length; i++) {\n    const part = selectParts[i];\n    if (part.def.category === categories.Math || part.def.category === categories.Aliasing) {\n      break;\n    }\n  }\n\n  selectParts.splice(i, 0, partModel);\n}\n\nfunction addMathStrategy(selectParts: any[], partModel: any) {\n  const partCount = selectParts.length;\n  if (partCount > 0) {\n    // if last is math, replace it\n    if (selectParts[partCount - 1].def.type === 'math') {\n      selectParts[partCount - 1] = partModel;\n      return;\n    }\n    // if next to last is math, replace it\n    if (partCount > 1 && selectParts[partCount - 2].def.type === 'math') {\n      selectParts[partCount - 2] = partModel;\n      return;\n    } else if (selectParts[partCount - 1].def.type === 'alias') {\n      // if last is alias add it before\n      selectParts.splice(partCount - 1, 0, partModel);\n      return;\n    }\n  }\n  selectParts.push(partModel);\n}\n\nfunction addAliasStrategy(selectParts: any[], partModel: any) {\n  const partCount = selectParts.length;\n  if (partCount > 0) {\n    // if last is alias, replace it\n    if (selectParts[partCount - 1].def.type === 'alias') {\n      selectParts[partCount - 1] = partModel;\n      return;\n    }\n  }\n  selectParts.push(partModel);\n}\n\nfunction addFieldStrategy(selectParts: any, partModel: any, query: { selectModels: any[][] }) {\n  // copy all parts\n  const parts = map(selectParts, (part: any) => {\n    return createPart({ type: part.def.type, params: clone(part.params) });\n  });\n\n  query.selectModels.push(parts);\n}\n\nregister({\n  type: 'field',\n  addStrategy: addFieldStrategy,\n  category: categories.Fields,\n  params: [{ type: 'field', dynamicLookup: true }],\n  defaultParams: ['value'],\n  renderer: fieldRenderer,\n});\n\n// Aggregations\nregister({\n  type: 'count',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'distinct',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'integral',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'mean',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'median',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'mode',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'sum',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\n// transformations\n\nregister({\n  type: 'derivative',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [\n    {\n      name: 'duration',\n      type: 'interval',\n      options: ['1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n  ],\n  defaultParams: ['10s'],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'spread',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'non_negative_derivative',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [\n    {\n      name: 'duration',\n      type: 'interval',\n      options: ['1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n  ],\n  defaultParams: ['10s'],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'difference',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'non_negative_difference',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'moving_average',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [{ name: 'window', type: 'int', options: [5, 10, 20, 30, 40] }],\n  defaultParams: [10],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'cumulative_sum',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'stddev',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'time',\n  category: groupByTimeFunctions,\n  params: [\n    {\n      name: 'interval',\n      type: 'time',\n      options: ['$__interval', '1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n  ],\n  defaultParams: ['$__interval'],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'fill',\n  category: groupByTimeFunctions,\n  params: [\n    {\n      name: 'fill',\n      type: 'string',\n      options: ['none', 'null', '0', 'previous', 'linear'],\n    },\n  ],\n  defaultParams: ['null'],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'elapsed',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [\n    {\n      name: 'duration',\n      type: 'interval',\n      options: ['1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n  ],\n  defaultParams: ['10s'],\n  renderer: functionRenderer,\n});\n\n// predictions\nregister({\n  type: 'holt_winters',\n  addStrategy: addTransformationStrategy,\n  category: categories.Predictors,\n  params: [\n    { name: 'number', type: 'int', options: [5, 10, 20, 30, 40] },\n    { name: 'season', type: 'int', options: [0, 1, 2, 5, 10] },\n  ],\n  defaultParams: [10, 2],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'holt_winters_with_fit',\n  addStrategy: addTransformationStrategy,\n  category: categories.Predictors,\n  params: [\n    { name: 'number', type: 'int', options: [5, 10, 20, 30, 40] },\n    { name: 'season', type: 'int', options: [0, 1, 2, 5, 10] },\n  ],\n  defaultParams: [10, 2],\n  renderer: functionRenderer,\n});\n\n// Selectors\nregister({\n  type: 'bottom',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [{ name: 'count', type: 'int' }],\n  defaultParams: [3],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'first',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'last',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'max',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'min',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'percentile',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [{ name: 'nth', type: 'int' }],\n  defaultParams: [95],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'top',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [{ name: 'count', type: 'int' }],\n  defaultParams: [3],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'tag',\n  category: groupByTimeFunctions,\n  params: [{ name: 'tag', type: 'string', dynamicLookup: true }],\n  defaultParams: ['tag'],\n  renderer: fieldRenderer,\n});\n\nregister({\n  type: 'math',\n  addStrategy: addMathStrategy,\n  category: categories.Math,\n  params: [{ name: 'expr', type: 'string' }],\n  defaultParams: [' / 100'],\n  renderer: suffixRenderer,\n});\n\nregister({\n  type: 'alias',\n  addStrategy: addAliasStrategy,\n  category: categories.Aliasing,\n  params: [{ name: 'name', type: 'string', quote: 'double' }],\n  defaultParams: ['alias'],\n  renderMode: 'suffix',\n  renderer: aliasRenderer,\n});\n\nexport default {\n  create: createPart,\n  getCategories: () => {\n    return categories;\n  },\n  replaceAggregationAdd: replaceAggregationAddStrategy,\n};\n","import { filter, find, indexOf, map } from 'lodash';\n\nimport { escapeRegex, ScopedVars } from '@grafana/data';\nimport { TemplateSrv } from '@grafana/runtime';\n\nimport queryPart from './query_part';\nimport { InfluxQuery, InfluxQueryTag } from './types';\n\nexport default class InfluxQueryModel {\n  target: InfluxQuery;\n  selectModels: any[] = [];\n  queryBuilder: any;\n  groupByParts: any;\n  templateSrv: any;\n  scopedVars: any;\n  refId?: string;\n\n  constructor(target: InfluxQuery, templateSrv?: TemplateSrv, scopedVars?: ScopedVars) {\n    this.target = target;\n    this.templateSrv = templateSrv;\n    this.scopedVars = scopedVars;\n\n    target.resultFormat = target.resultFormat || 'time_series';\n    target.orderByTime = target.orderByTime || 'ASC';\n    target.tags = target.tags || [];\n    target.groupBy = target.groupBy || [\n      { type: 'time', params: ['$__interval'] },\n      { type: 'fill', params: ['null'] },\n    ];\n    target.select = target.select || [\n      [\n        { type: 'field', params: ['value'] },\n        { type: 'mean', params: [] },\n      ],\n    ];\n\n    this.updateProjection();\n  }\n\n  updateProjection() {\n    this.selectModels = map(this.target.select, (parts: any) => {\n      return map(parts, queryPart.create);\n    });\n    this.groupByParts = map(this.target.groupBy, queryPart.create);\n  }\n\n  updatePersistedParts() {\n    this.target.select = map(this.selectModels, (selectParts) => {\n      return map(selectParts, (part: any) => {\n        return { type: part.def.type, params: part.params };\n      });\n    });\n  }\n\n  hasGroupByTime() {\n    return find(this.target.groupBy, (g: any) => g.type === 'time');\n  }\n\n  hasFill() {\n    return find(this.target.groupBy, (g: any) => g.type === 'fill');\n  }\n\n  addGroupBy(value: string) {\n    let stringParts = value.match(/^(\\w+)\\((.*)\\)$/);\n\n    if (!stringParts || !this.target.groupBy) {\n      return;\n    }\n\n    const typePart = stringParts[1];\n    const arg = stringParts[2];\n    const partModel = queryPart.create({ type: typePart, params: [arg] });\n    const partCount = this.target.groupBy.length;\n\n    if (partCount === 0) {\n      this.target.groupBy.push(partModel.part);\n    } else if (typePart === 'time') {\n      this.target.groupBy.splice(0, 0, partModel.part);\n    } else if (typePart === 'tag') {\n      if (this.target.groupBy[partCount - 1].type === 'fill') {\n        this.target.groupBy.splice(partCount - 1, 0, partModel.part);\n      } else {\n        this.target.groupBy.push(partModel.part);\n      }\n    } else {\n      this.target.groupBy.push(partModel.part);\n    }\n\n    this.updateProjection();\n  }\n\n  removeGroupByPart(part: { def: { type: string } }, index: number) {\n    const categories = queryPart.getCategories();\n\n    if (part.def.type === 'time') {\n      // remove fill\n      this.target.groupBy = filter(this.target.groupBy, (g: any) => g.type !== 'fill');\n      // remove aggregations\n      this.target.select = map(this.target.select, (s: any) => {\n        return filter(s, (part: any) => {\n          const partModel = queryPart.create(part);\n          if (partModel.def.category === categories.Aggregations) {\n            return false;\n          }\n          if (partModel.def.category === categories.Selectors) {\n            return false;\n          }\n          return true;\n        });\n      });\n    }\n\n    this.target.groupBy!.splice(index, 1);\n    this.updateProjection();\n  }\n\n  removeSelect(index: number) {\n    this.target.select!.splice(index, 1);\n    this.updateProjection();\n  }\n\n  removeSelectPart(selectParts: any[], part: any) {\n    // if we remove the field remove the whole statement\n    if (part.def.type === 'field') {\n      if (this.selectModels.length > 1) {\n        const modelsIndex = indexOf(this.selectModels, selectParts);\n        this.selectModels.splice(modelsIndex, 1);\n      }\n    } else {\n      const partIndex = indexOf(selectParts, part);\n      selectParts.splice(partIndex, 1);\n    }\n\n    this.updatePersistedParts();\n  }\n\n  addSelectPart(selectParts: any[], type: string) {\n    const partModel = queryPart.create({ type: type });\n    partModel.def.addStrategy(selectParts, partModel, this);\n    this.updatePersistedParts();\n  }\n\n  private renderTagCondition(tag: InfluxQueryTag, index: number, interpolate?: boolean) {\n    // FIXME: merge this function with query_builder/renderTagCondition\n    let str = '';\n    let operator = tag.operator;\n    let value = tag.value;\n    if (index > 0) {\n      str = (tag.condition || 'AND') + ' ';\n    }\n\n    if (!operator) {\n      if (/^\\/.*\\/$/.test(value)) {\n        operator = '=~';\n      } else {\n        operator = '=';\n      }\n    }\n\n    // quote value unless regex\n    if (operator !== '=~' && operator !== '!~') {\n      if (interpolate) {\n        value = this.templateSrv.replace(value, this.scopedVars);\n      }\n      if (operator !== '>' && operator !== '<') {\n        value = \"'\" + value.replace(/\\\\/g, '\\\\\\\\').replace(/\\'/g, \"\\\\'\") + \"'\";\n      }\n    } else if (interpolate) {\n      value = this.templateSrv.replace(value, this.scopedVars, 'regex');\n    }\n\n    let escapedKey = `\"${tag.key}\"`;\n\n    if (tag.key.endsWith('::tag')) {\n      escapedKey = `\"${tag.key.slice(0, -5)}\"::tag`;\n    }\n\n    if (tag.key.endsWith('::field')) {\n      escapedKey = `\"${tag.key.slice(0, -7)}\"::field`;\n    }\n\n    return str + escapedKey + ' ' + operator + ' ' + value;\n  }\n\n  getMeasurementAndPolicy(interpolate?: boolean) {\n    let policy = this.target.policy;\n    let measurement = this.target.measurement || 'measurement';\n\n    if (!measurement.match('^/.*/$')) {\n      measurement = '\"' + measurement + '\"';\n    } else if (interpolate) {\n      measurement = this.templateSrv.replace(measurement, this.scopedVars, 'regex');\n    }\n\n    return `\"${policy}\".${measurement}`;\n  }\n\n  interpolateQueryStr(value: any[], variable: { multi: any; includeAll: any }, defaultFormatFn: any) {\n    // if no multi or include all do not regexEscape\n    if (!variable.multi && !variable.includeAll) {\n      return value;\n    }\n\n    if (typeof value === 'string') {\n      return escapeRegex(value);\n    }\n\n    const escapedValues = map(value, escapeRegex);\n    return '(' + escapedValues.join('|') + ')';\n  }\n\n  render(interpolate?: boolean) {\n    const target = this.target;\n\n    if (target.rawQuery) {\n      if (interpolate) {\n        return this.templateSrv.replace(target.query, this.scopedVars, this.interpolateQueryStr);\n      } else {\n        return target.query;\n      }\n    }\n\n    let query = 'SELECT ';\n    let i, y;\n    for (i = 0; i < this.selectModels.length; i++) {\n      const parts = this.selectModels[i];\n      let selectText = '';\n      for (y = 0; y < parts.length; y++) {\n        const part = parts[y];\n        selectText = part.render(selectText);\n      }\n\n      if (i > 0) {\n        query += ', ';\n      }\n      query += selectText;\n    }\n\n    query += ' FROM ' + this.getMeasurementAndPolicy(interpolate) + ' WHERE ';\n    const conditions = map(target.tags, (tag, index) => {\n      return this.renderTagCondition(tag, index, interpolate);\n    });\n\n    if (conditions.length > 0) {\n      query += '(' + conditions.join(' ') + ') AND ';\n    }\n\n    query += '$timeFilter';\n\n    let groupBySection = '';\n    for (i = 0; i < this.groupByParts.length; i++) {\n      const part = this.groupByParts[i];\n      if (i > 0) {\n        // for some reason fill has no separator\n        groupBySection += part.def.type === 'fill' ? ' ' : ', ';\n      }\n      groupBySection += part.render('');\n    }\n\n    if (groupBySection.length) {\n      query += ' GROUP BY ' + groupBySection;\n    }\n\n    if (target.fill) {\n      query += ' fill(' + target.fill + ')';\n    }\n\n    if (target.orderByTime === 'DESC') {\n      query += ' ORDER BY time DESC';\n    }\n\n    if (target.limit) {\n      query += ' LIMIT ' + target.limit;\n    }\n\n    if (target.slimit) {\n      query += ' SLIMIT ' + target.slimit;\n    }\n\n    if (target.tz) {\n      query += \" tz('\" + target.tz + \"')\";\n    }\n\n    return query;\n  }\n\n  renderAdhocFilters(filters: any[]) {\n    const conditions = map(filters, (tag, index) => {\n      return this.renderTagCondition(tag, index, true);\n    });\n    return conditions.join(' ');\n  }\n}\n","import { cloneDeep } from 'lodash';\n\nimport InfluxQueryModel from './influx_query_model';\nimport { InfluxQuery } from './types';\n\n// FIXME: these functions are a beginning of a refactoring of influx_query_model.ts\n// into a simpler approach with full typescript types.\n// later we should be able to migrate the unit-tests\n// that relate to these functions here, and then perhaps even move the implementation\n// to this place\n\nexport function buildRawQuery(query: InfluxQuery): string {\n  const queryCopy = cloneDeep(query); // the query-model mutates the query\n  const model = new InfluxQueryModel(queryCopy);\n  return model.render(false);\n}\n\nexport function normalizeQuery(query: InfluxQuery): InfluxQuery {\n  // we return the original query if there is no need to update it\n  if (\n    query.policy !== undefined &&\n    query.resultFormat !== undefined &&\n    query.orderByTime !== undefined &&\n    query.tags !== undefined &&\n    query.groupBy !== undefined &&\n    query.select !== undefined\n  ) {\n    return query;\n  }\n\n  // FIXME: we should move the whole normalizeQuery logic here,\n  // and then have influxQueryModel call this function,\n  // to concentrate the whole logic here\n\n  const queryCopy = cloneDeep(query); // the query-model mutates the query\n  return new InfluxQueryModel(queryCopy).target;\n}\n\nexport function addNewSelectPart(query: InfluxQuery, type: string, index: number): InfluxQuery {\n  const queryCopy = cloneDeep(query); // the query-model mutates the query\n  const model = new InfluxQueryModel(queryCopy);\n  model.addSelectPart(model.selectModels[index], type);\n  return model.target;\n}\n\nexport function removeSelectPart(query: InfluxQuery, partIndex: number, index: number): InfluxQuery {\n  const queryCopy = cloneDeep(query); // the query-model mutates the query\n  const model = new InfluxQueryModel(queryCopy);\n  const selectModel = model.selectModels[index];\n  model.removeSelectPart(selectModel, selectModel[partIndex]);\n  return model.target;\n}\n\nexport function changeSelectPart(\n  query: InfluxQuery,\n  listIndex: number,\n  partIndex: number,\n  newParams: string[]\n): InfluxQuery {\n  // we need to make shallow copy of `query.select` down to `query.select[listIndex][partIndex]`\n  const newSel = [...(query.select ?? [])];\n  newSel[listIndex] = [...newSel[listIndex]];\n  newSel[listIndex][partIndex] = {\n    ...newSel[listIndex][partIndex],\n    params: newParams,\n  };\n  return { ...query, select: newSel };\n}\n\nexport function addNewGroupByPart(query: InfluxQuery, type: string): InfluxQuery {\n  const queryCopy = cloneDeep(query); // the query-model mutates the query\n  const model = new InfluxQueryModel(queryCopy);\n  model.addGroupBy(type);\n  return model.target;\n}\n\nexport function removeGroupByPart(query: InfluxQuery, partIndex: number): InfluxQuery {\n  const queryCopy = cloneDeep(query); // the query-model mutates the query\n  const model = new InfluxQueryModel(queryCopy);\n  model.removeGroupByPart(model.groupByParts[partIndex], partIndex);\n  return model.target;\n}\n\nexport function changeGroupByPart(query: InfluxQuery, partIndex: number, newParams: string[]): InfluxQuery {\n  // we need to make shallow copy of `query.groupBy` down to `query.groupBy[partIndex]`\n  const newGroupBy = [...(query.groupBy ?? [])];\n  newGroupBy[partIndex] = {\n    ...newGroupBy[partIndex],\n    params: newParams,\n  };\n  return { ...query, groupBy: newGroupBy };\n}\n\n// Retention policy was hardcoded as `default` in\n// public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/FromSection.tsx\n// We opted out hardcoded the policy in public/app/plugins/datasource/influxdb/influx_query_model.ts\n// Which means if a user has a default retention policy named `default` they cannot use it.\n// In https://github.com/grafana/grafana/pull/63820 we introduced a feature to use actual retention policies.\n// But this did not consider that some users have hardcoded `default` retention policy in their dashboards.\n// This function checks whether the given target has hardcoded retention policy not.\n// If it is hardcoded it returns the actual default policy.\nexport function replaceHardCodedRetentionPolicy(policy: string | undefined, retentionPolicies: string[]): string {\n  if (!policy || !retentionPolicies.includes(policy)) {\n    return retentionPolicies[0] ?? '';\n  }\n\n  return policy;\n}\n","import { cx, css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\n\nimport { SelectableValue, GrafanaTheme2 } from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\nimport {\n  InlineFormLabel,\n  LinkButton,\n  Segment,\n  CodeEditor,\n  MonacoEditor,\n  CodeEditorSuggestionItem,\n  CodeEditorSuggestionItemKind,\n  withTheme2,\n  Themeable2,\n} from '@grafana/ui';\n\nimport InfluxDatasource from '../datasource';\nimport { InfluxQuery } from '../types';\n\ninterface Props extends Themeable2 {\n  onChange: (query: InfluxQuery) => void;\n  onRunQuery: () => void;\n  query: InfluxQuery;\n  // `datasource` is not used internally, but this component is used at some places\n  // directly, where the `datasource` prop has to exist. later, when the whole\n  // query-editor gets converted to react we can stop using this component directly\n  // and then we can probably remove the datasource attribute.\n  datasource: InfluxDatasource;\n}\n\nconst samples: Array<SelectableValue<string>> = [\n  { label: 'Show buckets', description: 'List the available buckets (table)', value: 'buckets()' },\n  {\n    label: 'Simple query',\n    description: 'filter by measurement and field',\n    value: `from(bucket: \"db/rp\")\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\n  |> filter(fn: (r) =>\n    r._measurement == \"example-measurement\" and\n    r._field == \"example-field\"\n  )`,\n  },\n  {\n    label: 'Grouped Query',\n    description: 'Group by (min/max/sum/median)',\n    value: `// v.windowPeriod is a variable referring to the current optimized window period (currently: $interval)\nfrom(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"measurement1\" or r[\"_measurement\"] =~ /^.*?regex.*$/)\n  |> filter(fn: (r) => r[\"_field\"] == \"field2\" or r[\"_field\"] =~ /^.*?regex.*$/)\n  |> aggregateWindow(every: v.windowPeriod, fn: mean|median|max|count|derivative|sum)\n  |> yield(name: \"some-name\")`,\n  },\n  {\n    label: 'Filter by value',\n    description: 'Results between a min/max',\n    value: `// v.bucket, v.timeRangeStart, and v.timeRange stop are all variables supported by the flux plugin and influxdb\nfrom(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_value\"] >= 10 and r[\"_value\"] <= 20)`,\n  },\n  {\n    label: 'Schema Exploration: (measurements)',\n    description: 'Get a list of measurement using flux',\n    value: `import \"influxdata/influxdb/v1\"\nv1.measurements(bucket: v.bucket)`,\n  },\n  {\n    label: 'Schema Exploration: (fields)',\n    description: 'Return every possible key in a single table',\n    value: `from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\n  |> keys()\n  |> keep(columns: [\"_value\"])\n  |> group()\n  |> distinct()`,\n  },\n  {\n    label: 'Schema Exploration: (tag keys)',\n    description: 'Get a list of tag keys using flux',\n    value: `import \"influxdata/influxdb/v1\"\nv1.tagKeys(bucket: v.bucket)`,\n  },\n  {\n    label: 'Schema Exploration: (tag values)',\n    description: 'Get a list of tag values using flux',\n    value: `import \"influxdata/influxdb/v1\"\nv1.tagValues(\n    bucket: v.bucket,\n    tag: \"host\",\n    predicate: (r) => true,\n    start: -1d\n)`,\n  },\n];\n\nclass UnthemedFluxQueryEditor extends PureComponent<Props> {\n  onFluxQueryChange = (query: string) => {\n    this.props.onChange({ ...this.props.query, query });\n    this.props.onRunQuery();\n  };\n\n  onSampleChange = (val: SelectableValue<string>) => {\n    this.props.onChange({\n      ...this.props.query,\n      query: val.value!,\n    });\n\n    // Angular HACK: Since the target does not actually change!\n    this.forceUpdate();\n    this.props.onRunQuery();\n  };\n\n  getSuggestions = (): CodeEditorSuggestionItem[] => {\n    const sugs: CodeEditorSuggestionItem[] = [\n      {\n        label: 'v.timeRangeStart',\n        kind: CodeEditorSuggestionItemKind.Property,\n        detail: 'The start time',\n      },\n      {\n        label: 'v.timeRangeStop',\n        kind: CodeEditorSuggestionItemKind.Property,\n        detail: 'The stop time',\n      },\n      {\n        label: 'v.windowPeriod',\n        kind: CodeEditorSuggestionItemKind.Property,\n        detail: 'based on max data points',\n      },\n      {\n        label: 'v.defaultBucket',\n        kind: CodeEditorSuggestionItemKind.Property,\n        detail: 'bucket configured in the datsource',\n      },\n      {\n        label: 'v.organization',\n        kind: CodeEditorSuggestionItemKind.Property,\n        detail: 'org configured for the datsource',\n      },\n    ];\n\n    const templateSrv = getTemplateSrv();\n    templateSrv.getVariables().forEach((variable) => {\n      const label = '${' + variable.name + '}';\n      let val = templateSrv.replace(label);\n      if (val === label) {\n        val = '';\n      }\n      sugs.push({\n        label,\n        kind: CodeEditorSuggestionItemKind.Text,\n        detail: `(Template Variable) ${val}`,\n      });\n    });\n\n    return sugs;\n  };\n\n  // For some reason in angular, when this component gets re-mounted, the width\n  // is not set properly.  This forces the layout shortly after mount so that it\n  // displays OK.  Note: this is not an issue when used directly in react\n  editorDidMountCallbackHack = (editor: MonacoEditor) => {\n    setTimeout(() => editor.layout(), 100);\n  };\n\n  render() {\n    const { query, theme } = this.props;\n    const styles = getStyles(theme);\n\n    const helpTooltip = (\n      <div>\n        Type: <i>ctrl+space</i> to show template variable suggestions <br />\n        Many queries can be copied from Chronograf\n      </div>\n    );\n\n    return (\n      <>\n        <CodeEditor\n          height={'100%'}\n          containerStyles={styles.editorContainerStyles}\n          language=\"sql\"\n          value={query.query || ''}\n          onBlur={this.onFluxQueryChange}\n          onSave={this.onFluxQueryChange}\n          showMiniMap={false}\n          showLineNumbers={true}\n          getSuggestions={this.getSuggestions}\n          onEditorDidMount={this.editorDidMountCallbackHack}\n        />\n        <div className={cx('gf-form-inline', styles.editorActions)}>\n          <LinkButton\n            icon=\"external-link-alt\"\n            variant=\"secondary\"\n            target=\"blank\"\n            href=\"https://docs.influxdata.com/influxdb/latest/query-data/get-started/\"\n          >\n            Flux language syntax\n          </LinkButton>\n          <Segment options={samples} value=\"Sample Query\" onChange={this.onSampleChange} />\n          <div className=\"gf-form gf-form--grow\">\n            <div className=\"gf-form-label gf-form-label--grow\"></div>\n          </div>\n          <InlineFormLabel width={5} tooltip={helpTooltip}>\n            Help\n          </InlineFormLabel>\n        </div>\n      </>\n    );\n  }\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  editorContainerStyles: css`\n    height: 200px;\n    max-width: 100%;\n    resize: vertical;\n    overflow: auto;\n    background-color: ${theme.isDark ? theme.colors.background.canvas : theme.colors.background.primary};\n    padding-bottom: ${theme.spacing(1)};\n  `,\n  editorActions: css`\n    margin-top: 6px;\n  `,\n});\n\nexport const FluxQueryEditor = withTheme2(UnthemedFluxQueryEditor);\n","import React, { useEffect, useState } from 'react';\n\nimport { Button, ConfirmModal } from '@grafana/ui';\n\ntype Props = {\n  isRaw: boolean;\n  onChange: (newIsRaw: boolean) => void;\n};\n\nexport const QueryEditorModeSwitcher = ({ isRaw, onChange }: Props): JSX.Element => {\n  const [isModalOpen, setModalOpen] = useState(false);\n\n  useEffect(() => {\n    // if the isRaw changes, we hide the modal\n    setModalOpen(false);\n  }, [isRaw]);\n\n  if (isRaw) {\n    return (\n      <>\n        <Button\n          aria-label=\"Switch to visual editor\"\n          icon=\"pen\"\n          variant=\"secondary\"\n          type=\"button\"\n          onClick={() => {\n            // we show the are-you-sure modal\n            setModalOpen(true);\n          }}\n        ></Button>\n        <ConfirmModal\n          isOpen={isModalOpen}\n          title=\"Switch to visual editor mode\"\n          body=\"Are you sure to switch to visual editor mode? You will lose the changes done in raw query mode.\"\n          confirmText=\"Yes, switch to editor mode\"\n          dismissText=\"No, stay in raw query mode\"\n          onConfirm={() => {\n            onChange(false);\n          }}\n          onDismiss={() => {\n            setModalOpen(false);\n          }}\n        />\n      </>\n    );\n  } else {\n    return (\n      <Button\n        aria-label=\"Switch to text editor\"\n        icon=\"pen\"\n        variant=\"secondary\"\n        type=\"button\"\n        onClick={() => {\n          onChange(true);\n        }}\n      ></Button>\n    );\n  }\n};\n","import { SelectableValue } from '@grafana/data';\n\nimport { ResultFormat } from '../types';\n\nexport const RESULT_FORMATS: Array<SelectableValue<ResultFormat>> = [\n  { label: 'Time series', value: 'time_series' },\n  { label: 'Table', value: 'table' },\n  { label: 'Logs', value: 'logs' },\n];\n\nexport const DEFAULT_RESULT_FORMAT: ResultFormat = 'time_series';\n","import { useState, useEffect } from 'react';\nimport { usePrevious } from 'react-use';\n\nexport function useShadowedState<T>(outsideVal: T): [T, (newVal: T) => void] {\n  const [currentVal, setCurrentVal] = useState(outsideVal);\n  const prevOutsideVal = usePrevious(outsideVal);\n\n  useEffect(() => {\n    const isOutsideValChanged = prevOutsideVal !== outsideVal;\n    // if the value changes from the outside, we accept it into the state\n    // (we only set it if it is different from the current value)\n    if (isOutsideValChanged && currentVal !== outsideVal) {\n      setCurrentVal(outsideVal);\n    }\n  }, [outsideVal, currentVal, prevOutsideVal]);\n\n  return [currentVal, setCurrentVal];\n}\n","import React from 'react';\n\nimport { TextArea, InlineFormLabel, Input, Select, HorizontalGroup } from '@grafana/ui';\n\nimport { InfluxQuery } from '../types';\n\nimport { RESULT_FORMATS, DEFAULT_RESULT_FORMAT } from './constants';\nimport { useShadowedState } from './useShadowedState';\nimport { useUniqueId } from './useUniqueId';\n\ntype Props = {\n  query: InfluxQuery;\n  onChange: (query: InfluxQuery) => void;\n  onRunQuery: () => void;\n};\n\n// we handle 3 fields: \"query\", \"alias\", \"resultFormat\"\n// \"resultFormat\" changes are applied immediately\n// \"query\" and \"alias\" changes only happen on onblur\nexport const RawInfluxQLEditor = ({ query, onChange, onRunQuery }: Props): JSX.Element => {\n  const [currentQuery, setCurrentQuery] = useShadowedState(query.query);\n  const [currentAlias, setCurrentAlias] = useShadowedState(query.alias);\n  const aliasElementId = useUniqueId();\n  const selectElementId = useUniqueId();\n\n  const resultFormat = query.resultFormat ?? DEFAULT_RESULT_FORMAT;\n\n  const applyDelayedChangesAndRunQuery = () => {\n    onChange({\n      ...query,\n      query: currentQuery,\n      alias: currentAlias,\n      resultFormat,\n    });\n    onRunQuery();\n  };\n\n  return (\n    <div>\n      <TextArea\n        aria-label=\"query\"\n        rows={3}\n        spellCheck={false}\n        placeholder=\"InfluxDB Query\"\n        onBlur={applyDelayedChangesAndRunQuery}\n        onChange={(e) => {\n          setCurrentQuery(e.currentTarget.value);\n        }}\n        value={currentQuery ?? ''}\n      />\n      <HorizontalGroup>\n        <InlineFormLabel htmlFor={selectElementId}>Format as</InlineFormLabel>\n        <Select\n          inputId={selectElementId}\n          onChange={(v) => {\n            onChange({ ...query, resultFormat: v.value });\n            onRunQuery();\n          }}\n          value={resultFormat}\n          options={RESULT_FORMATS}\n        />\n        <InlineFormLabel htmlFor={aliasElementId}>Alias by</InlineFormLabel>\n        <Input\n          id={aliasElementId}\n          type=\"text\"\n          spellCheck={false}\n          placeholder=\"Naming pattern\"\n          onBlur={applyDelayedChangesAndRunQuery}\n          onChange={(e) => {\n            setCurrentAlias(e.currentTarget.value);\n          }}\n          value={currentAlias ?? ''}\n        />\n      </HorizontalGroup>\n    </div>\n  );\n};\n","import { reduce } from 'lodash';\n\nimport { escapeRegex } from '@grafana/data';\n\nfunction renderTagCondition(tag: { operator: any; value: string; condition: any; key: string }, index: number) {\n  // FIXME: merge this function with influx_query_model/renderTagCondition\n  let str = '';\n  let operator = tag.operator;\n  let value = tag.value;\n  if (index > 0) {\n    str = (tag.condition || 'AND') + ' ';\n  }\n\n  if (!operator) {\n    if (/^\\/.*\\/$/.test(tag.value)) {\n      operator = '=~';\n    } else {\n      operator = '=';\n    }\n  }\n\n  // quote value unless regex or empty-string\n  // Influx versions before 0.13 had inconsistent requirements on if (numeric) tags are quoted or not.\n  if (value === '' || (operator !== '=~' && operator !== '!~')) {\n    value = \"'\" + value.replace(/\\\\/g, '\\\\\\\\').replace(/\\'/g, \"\\\\'\") + \"'\";\n  }\n\n  let escapedKey = `\"${tag.key}\"`;\n\n  if (tag.key.endsWith('::tag')) {\n    escapedKey = `\"${tag.key.slice(0, -5)}\"::tag`;\n  }\n\n  if (tag.key.endsWith('::field')) {\n    escapedKey = `\"${tag.key.slice(0, -7)}\"::field`;\n  }\n\n  return str + escapedKey + ' ' + operator + ' ' + value;\n}\n\nexport class InfluxQueryBuilder {\n  constructor(private target: { measurement: any; tags: any; policy?: any }, private database?: string) {}\n\n  buildExploreQuery(type: string, withKey?: string, withMeasurementFilter?: string): string {\n    let query = '';\n    let measurement;\n    let policy;\n\n    if (type === 'TAG_KEYS') {\n      query = 'SHOW TAG KEYS';\n      measurement = this.target.measurement;\n      policy = this.target.policy;\n    } else if (type === 'TAG_VALUES') {\n      query = 'SHOW TAG VALUES';\n      measurement = this.target.measurement;\n      policy = this.target.policy;\n    } else if (type === 'MEASUREMENTS') {\n      query = 'SHOW MEASUREMENTS';\n      if (withMeasurementFilter) {\n        // we do a case-insensitive regex-based lookup\n        query += ' WITH MEASUREMENT =~ /(?i)' + escapeRegex(withMeasurementFilter) + '/';\n      }\n    } else if (type === 'FIELDS') {\n      measurement = this.target.measurement;\n      policy = this.target.policy;\n\n      if (!measurement.match('^/.*/')) {\n        measurement = '\"' + measurement + '\"';\n\n        if (policy && policy !== 'default') {\n          policy = '\"' + policy + '\"';\n          measurement = policy + '.' + measurement;\n        }\n      }\n\n      return 'SHOW FIELD KEYS FROM ' + measurement;\n    } else if (type === 'RETENTION POLICIES') {\n      query = 'SHOW RETENTION POLICIES on \"' + this.database + '\"';\n      return query;\n    }\n\n    if (measurement) {\n      if (!measurement.match('^/.*/') && !measurement.match(/^merge\\(.*\\)/)) {\n        measurement = '\"' + measurement + '\"';\n      }\n\n      if (policy && policy !== 'default') {\n        policy = '\"' + policy + '\"';\n        measurement = policy + '.' + measurement;\n      }\n\n      query += ' FROM ' + measurement;\n    }\n\n    if (withKey) {\n      let keyIdentifier = withKey;\n\n      if (keyIdentifier.endsWith('::tag')) {\n        keyIdentifier = keyIdentifier.slice(0, -5);\n      }\n\n      query += ' WITH KEY = \"' + keyIdentifier + '\"';\n    }\n\n    if (this.target.tags && this.target.tags.length > 0) {\n      const whereConditions = reduce(\n        this.target.tags,\n        (memo, tag) => {\n          // do not add a condition for the key we want to explore for\n          if (tag.key === withKey) {\n            return memo;\n          }\n\n          // value operators not supported in these types of queries\n          if (tag.operator === '>' || tag.operator === '<') {\n            return memo;\n          }\n\n          memo.push(renderTagCondition(tag, memo.length));\n          return memo;\n        },\n        [] as string[]\n      );\n\n      if (whereConditions.length > 0) {\n        query += ' WHERE ' + whereConditions.join(' ');\n      }\n    }\n\n    if (type === 'MEASUREMENTS') {\n      query += ' LIMIT 100';\n      //Solve issue #2524 by limiting the number of measurements returned\n      //LIMIT must be after WITH MEASUREMENT and WHERE clauses\n      //This also could be used for TAG KEYS and TAG VALUES, if desired\n    }\n\n    return query;\n  }\n}\n","import InfluxDatasource from './datasource';\nimport { replaceHardCodedRetentionPolicy } from './queryUtils';\nimport { InfluxQueryBuilder } from './query_builder';\nimport { InfluxQueryTag } from './types';\n\nconst runExploreQuery = (\n  type: string,\n  withKey: string | undefined,\n  withMeasurementFilter: string | undefined,\n  target: { measurement: string | undefined; tags: InfluxQueryTag[]; policy: string | undefined },\n  datasource: InfluxDatasource\n): Promise<Array<{ text: string }>> => {\n  const builder = new InfluxQueryBuilder(target, datasource.database);\n  const q = builder.buildExploreQuery(type, withKey, withMeasurementFilter);\n  const options = { policy: replaceHardCodedRetentionPolicy(target.policy, datasource.retentionPolicies) };\n  return datasource.metricFindQuery(q, options);\n};\n\nexport async function getAllPolicies(datasource: InfluxDatasource): Promise<string[]> {\n  const target = { tags: [], measurement: undefined, policy: undefined };\n  const data = await runExploreQuery('RETENTION POLICIES', undefined, undefined, target, datasource);\n  return data.map((item) => item.text);\n}\n\nexport async function getAllMeasurementsForTags(\n  measurementFilter: string | undefined,\n  tags: InfluxQueryTag[],\n  datasource: InfluxDatasource\n): Promise<string[]> {\n  const target = { tags, measurement: undefined, policy: undefined };\n  const data = await runExploreQuery('MEASUREMENTS', undefined, measurementFilter, target, datasource);\n  return data.map((item) => item.text);\n}\n\nexport async function getTagKeysForMeasurementAndTags(\n  measurement: string | undefined,\n  policy: string | undefined,\n  tags: InfluxQueryTag[],\n  datasource: InfluxDatasource\n): Promise<string[]> {\n  const target = { tags, measurement, policy };\n  const data = await runExploreQuery('TAG_KEYS', undefined, undefined, target, datasource);\n  return data.map((item) => item.text);\n}\n\nexport async function getTagValues(\n  tagKey: string,\n  measurement: string | undefined,\n  policy: string | undefined,\n  tags: InfluxQueryTag[],\n  datasource: InfluxDatasource\n): Promise<string[]> {\n  const target = { tags, measurement, policy };\n\n  if (tagKey.endsWith('::field')) {\n    return [];\n  }\n\n  const data = await runExploreQuery('TAG_VALUES', tagKey, undefined, target, datasource);\n  return data.map((item) => item.text);\n}\n\nexport async function getFieldKeysForMeasurement(\n  measurement: string,\n  policy: string | undefined,\n  datasource: InfluxDatasource\n): Promise<string[]> {\n  const target = { tags: [], measurement, policy };\n  const data = await runExploreQuery('FIELDS', undefined, undefined, target, datasource);\n  return data.map((item) => item.text);\n}\n","import { css } from '@emotion/css';\n\nexport const paddingRightClass = css({\n  paddingRight: '4px',\n});\n","export function unwrap<T>(value: T | null | undefined): T {\n  if (value == null) {\n    throw new Error('value must not be nullish');\n  }\n  return value;\n}\n","import { cx } from '@emotion/css';\nimport React from 'react';\n\nimport { Select } from '@grafana/ui';\n\nimport { ResultFormat } from '../../types';\nimport { RESULT_FORMATS } from '../constants';\n\nimport { paddingRightClass } from './styles';\nimport { unwrap } from './unwrap';\n\ntype Props = {\n  inputId?: string;\n  format: ResultFormat;\n  onChange: (newFormat: ResultFormat) => void;\n};\n\nconst className = cx('width-8', paddingRightClass);\n\nexport const FormatAsSection = ({ format, inputId, onChange }: Props): JSX.Element => {\n  return (\n    <Select<ResultFormat>\n      inputId={inputId}\n      className={className}\n      onChange={(v) => {\n        onChange(unwrap(v.value));\n      }}\n      value={format}\n      options={RESULT_FORMATS}\n    />\n  );\n};\n","import { css, cx } from '@emotion/css';\nimport debouncePromise from 'debounce-promise';\nimport React, { useEffect, useState } from 'react';\nimport { useAsyncFn } from 'react-use';\n\nimport { SelectableValue } from '@grafana/data';\nimport { AsyncSelect, InlineLabel, Input, Select } from '@grafana/ui';\n\nimport { useShadowedState } from '../useShadowedState';\n\n// this file is a simpler version of `grafana-ui / SegmentAsync.tsx`\n// with some changes:\n// 1. click-outside does not select the value. i think it's better to be explicit here.\n// 2. we set a min-width on the select-element to handle cases where the `value`\n//    is very short, like \"x\", and then you click on it and the select opens,\n//    and it tries to be as short as \"x\" and it does not work well.\n\n// NOTE: maybe these changes could be migrated into the SegmentAsync later\n\ntype SelVal = SelectableValue<string>;\n\n// when allowCustomValue is true, there is no way to enforce the selectableValue\n// enum-type, so i just go with `string`\n\ntype LoadOptions = (filter: string) => Promise<SelVal[]>;\n\ntype Props = {\n  value: string;\n  buttonClassName?: string;\n  loadOptions?: LoadOptions;\n  // if filterByLoadOptions is false,\n  // loadOptions is only executed once,\n  // when the select-box opens,\n  // and as you write, the list gets filtered\n  // by the select-box.\n  // if filterByLoadOptions is true,\n  // as you write the loadOptions is executed again and again,\n  // and it is relied on to filter the results.\n  filterByLoadOptions?: boolean;\n  onChange: (v: SelVal) => void;\n  allowCustomValue?: boolean;\n};\n\nconst selectClass = css({\n  minWidth: '160px',\n});\n\ntype SelProps = {\n  loadOptions: LoadOptions;\n  filterByLoadOptions?: boolean;\n  onClose: () => void;\n  onChange: (v: SelVal) => void;\n  allowCustomValue?: boolean;\n};\n\ntype SelReloadProps = {\n  loadOptions: (filter: string) => Promise<SelVal[]>;\n  onClose: () => void;\n  onChange: (v: SelVal) => void;\n  allowCustomValue?: boolean;\n};\n\n// when a custom value is written into a select-box,\n// by default the new value is prefixed with \"Create:\",\n// and that sounds confusing because here we do not create\n// anything. we change this to just be the entered string.\nconst formatCreateLabel = (v: string) => v;\n\nconst SelReload = ({ loadOptions, allowCustomValue, onChange, onClose }: SelReloadProps): JSX.Element => {\n  // here we rely on the fact that writing text into the <AsyncSelect/>\n  // does not cause a re-render of the current react component.\n  // this way there is only a single render-call,\n  // so there is only a single `debouncedLoadOptions`.\n  // if we want ot make this \"re-render safe,\n  // we will have to put the debounced call into an useRef,\n  // and probably have an useEffect\n  const debouncedLoadOptions = debouncePromise(loadOptions, 1000, { leading: true });\n  return (\n    <div className={selectClass}>\n      <AsyncSelect\n        formatCreateLabel={formatCreateLabel}\n        defaultOptions\n        autoFocus\n        isOpen\n        onCloseMenu={onClose}\n        allowCustomValue={allowCustomValue}\n        loadOptions={debouncedLoadOptions}\n        onChange={onChange}\n        createOptionPosition=\"first\"\n      />\n    </div>\n  );\n};\n\ntype SelSingleLoadProps = {\n  loadOptions: (filter: string) => Promise<SelVal[]>;\n  onClose: () => void;\n  onChange: (v: SelVal) => void;\n  allowCustomValue?: boolean;\n};\n\nconst SelSingleLoad = ({ loadOptions, allowCustomValue, onChange, onClose }: SelSingleLoadProps): JSX.Element => {\n  const [loadState, doLoad] = useAsyncFn(loadOptions, [loadOptions]);\n\n  useEffect(() => {\n    doLoad('');\n  }, [doLoad, loadOptions]);\n\n  return (\n    <div className={selectClass}>\n      <Select\n        isLoading={loadState.loading}\n        formatCreateLabel={formatCreateLabel}\n        autoFocus\n        isOpen={!loadState.loading}\n        onCloseMenu={onClose}\n        allowCustomValue={allowCustomValue}\n        options={loadState.value ?? []}\n        onChange={onChange}\n        createOptionPosition=\"first\"\n      />\n    </div>\n  );\n};\n\nconst Sel = ({ loadOptions, filterByLoadOptions, allowCustomValue, onChange, onClose }: SelProps): JSX.Element => {\n  // unfortunately <Segment/> and <SegmentAsync/> have somewhat different behavior,\n  // so the simplest approach was to just create two separate wrapper-components\n  return filterByLoadOptions ? (\n    <SelReload loadOptions={loadOptions} allowCustomValue={allowCustomValue} onChange={onChange} onClose={onClose} />\n  ) : (\n    <SelSingleLoad\n      loadOptions={loadOptions}\n      allowCustomValue={allowCustomValue}\n      onChange={onChange}\n      onClose={onClose}\n    />\n  );\n};\n\ntype InpProps = {\n  initialValue: string;\n  onChange: (newVal: string) => void;\n  onClose: () => void;\n};\n\nconst Inp = ({ initialValue, onChange, onClose }: InpProps): JSX.Element => {\n  const [currentValue, setCurrentValue] = useShadowedState(initialValue);\n\n  return (\n    <Input\n      autoFocus\n      type=\"text\"\n      spellCheck={false}\n      onBlur={onClose}\n      onKeyDown={(e) => {\n        if (e.key === 'Enter') {\n          onChange(currentValue);\n        }\n      }}\n      onChange={(e) => {\n        setCurrentValue(e.currentTarget.value);\n      }}\n      value={currentValue}\n    />\n  );\n};\n\nconst defaultButtonClass = css({\n  width: 'auto',\n  cursor: 'pointer',\n});\n\nexport const Seg = ({\n  value,\n  buttonClassName,\n  loadOptions,\n  filterByLoadOptions,\n  allowCustomValue,\n  onChange,\n}: Props): JSX.Element => {\n  const [isOpen, setOpen] = useState(false);\n  if (!isOpen) {\n    const className = cx(defaultButtonClass, buttonClassName);\n    return (\n      <InlineLabel\n        as=\"button\"\n        className={className}\n        onClick={() => {\n          setOpen(true);\n        }}\n      >\n        {value}\n      </InlineLabel>\n    );\n  } else {\n    if (loadOptions !== undefined) {\n      return (\n        <Sel\n          loadOptions={loadOptions}\n          filterByLoadOptions={filterByLoadOptions ?? false}\n          allowCustomValue={allowCustomValue}\n          onChange={(v) => {\n            setOpen(false);\n            onChange(v);\n          }}\n          onClose={() => {\n            setOpen(false);\n          }}\n        />\n      );\n    } else {\n      return (\n        <Inp\n          initialValue={value}\n          onClose={() => {\n            setOpen(false);\n          }}\n          onChange={(v) => {\n            setOpen(false);\n            onChange({ value: v, label: v });\n          }}\n        />\n      );\n    }\n  }\n};\n","import { SelectableValue } from '@grafana/data';\n\nexport function toSelectableValue<T extends string>(t: T): SelectableValue<T> {\n  return { label: t, value: t };\n}\n","import React from 'react';\n\nimport { Seg } from './Seg';\nimport { toSelectableValue } from './toSelectableValue';\n\n// we use the value \"default\" as a magic-value, it means\n// we use the default retention-policy.\n// unfortunately, IF the user has a retention-policy named \"default\",\n// and it is not the default-retention-policy in influxdb,\n// bad things will happen.\n// https://github.com/grafana/grafana/issues/4347 :-(\n// FIXME: we could maybe at least detect here that problem-is-happening,\n// and show an error message or something.\n// unfortunately, currently the ResponseParser does not return the\n// is-default info for the retention-policies, so that should change first.\n\ntype Props = {\n  onChange: (policy: string | undefined, measurement: string | undefined) => void;\n  policy: string | undefined;\n  measurement: string | undefined;\n  getPolicyOptions: () => Promise<string[]>;\n  getMeasurementOptions: (filter: string) => Promise<string[]>;\n};\n\nexport const FromSection = ({\n  policy,\n  measurement,\n  onChange,\n  getPolicyOptions,\n  getMeasurementOptions,\n}: Props): JSX.Element => {\n  const handlePolicyLoadOptions = async () => {\n    const allPolicies = await getPolicyOptions();\n    return allPolicies.map(toSelectableValue);\n  };\n\n  const handleMeasurementLoadOptions = async (filter: string) => {\n    const allMeasurements = await getMeasurementOptions(filter);\n    return allMeasurements.map(toSelectableValue);\n  };\n\n  return (\n    <>\n      <Seg\n        allowCustomValue\n        value={policy ?? ''}\n        loadOptions={handlePolicyLoadOptions}\n        onChange={(v) => {\n          onChange(v.value, measurement);\n        }}\n      />\n      <Seg\n        allowCustomValue\n        value={measurement ?? 'select measurement'}\n        loadOptions={handleMeasurementLoadOptions}\n        filterByLoadOptions\n        onChange={(v) => {\n          onChange(policy, v.value);\n        }}\n      />\n    </>\n  );\n};\n","import { cx } from '@emotion/css';\nimport React from 'react';\n\nimport { Input } from '@grafana/ui';\n\nimport { useShadowedState } from '../useShadowedState';\n\nimport { paddingRightClass } from './styles';\n\ntype Props = {\n  value: string | undefined;\n  onChange: (value: string | undefined) => void;\n  isWide?: boolean;\n  placeholder?: string;\n};\n\nexport const InputSection = ({ value, onChange, isWide, placeholder }: Props): JSX.Element => {\n  const [currentValue, setCurrentValue] = useShadowedState(value);\n\n  const onBlur = () => {\n    // we send empty-string as undefined\n    const newValue = currentValue === '' ? undefined : currentValue;\n    onChange(newValue);\n  };\n\n  return (\n    <>\n      <Input\n        placeholder={placeholder}\n        className={cx(isWide ?? false ? 'width-14' : 'width-8', paddingRightClass)}\n        type=\"text\"\n        spellCheck={false}\n        onBlur={onBlur}\n        onChange={(e) => {\n          setCurrentValue(e.currentTarget.value);\n        }}\n        value={currentValue ?? ''}\n      />\n    </>\n  );\n};\n","import { cx } from '@emotion/css';\nimport React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport { paddingRightClass } from './styles';\nimport { unwrap } from './unwrap';\n\ntype Mode = 'ASC' | 'DESC';\n\nconst OPTIONS: Array<SelectableValue<Mode>> = [\n  { label: 'ascending', value: 'ASC' },\n  { label: 'descending', value: 'DESC' },\n];\n\nconst className = cx('width-9', paddingRightClass);\n\ntype Props = {\n  value: Mode;\n  onChange: (value: Mode) => void;\n  inputId?: string;\n};\n\nexport const OrderByTimeSection = ({ value, onChange, inputId }: Props): JSX.Element => {\n  return (\n    <>\n      <Select<Mode>\n        inputId={inputId}\n        className={className}\n        onChange={(v) => {\n          onChange(unwrap(v.value));\n        }}\n        value={value}\n        options={OPTIONS}\n      />\n    </>\n  );\n};\n","import React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\n\nimport { Seg } from './Seg';\nimport { unwrap } from './unwrap';\n\ntype Props = {\n  loadOptions: () => Promise<SelectableValue[]>;\n  allowCustomValue?: boolean;\n  onAdd: (v: string) => void;\n};\n\nexport const AddButton = ({ loadOptions, allowCustomValue, onAdd }: Props): JSX.Element => {\n  return (\n    <Seg\n      value=\"+\"\n      loadOptions={loadOptions}\n      allowCustomValue={allowCustomValue}\n      onChange={(v) => {\n        onAdd(unwrap(v.value));\n      }}\n    />\n  );\n};\n","import { cx, css } from '@emotion/css';\nimport React, { useMemo } from 'react';\n\nimport { SelectableValue, GrafanaTheme2 } from '@grafana/data';\nimport { MenuItem, WithContextMenu, MenuGroup, useTheme2 } from '@grafana/ui';\n\nimport { AddButton } from './AddButton';\nimport { Seg } from './Seg';\nimport { toSelectableValue } from './toSelectableValue';\nimport { unwrap } from './unwrap';\n\nexport type PartParams = Array<{\n  value: string;\n  options: (() => Promise<string[]>) | null;\n}>;\n\ntype Props = {\n  parts: Array<{\n    name: string;\n    params: PartParams;\n  }>;\n  getNewPartOptions: () => Promise<SelectableValue[]>;\n  onChange: (partIndex: number, paramValues: string[]) => void;\n  onRemovePart: (index: number) => void;\n  onAddNewPart: (type: string) => void;\n};\n\nconst renderRemovableNameMenuItems = (onClick: () => void) => {\n  return (\n    <MenuGroup label=\"\">\n      <MenuItem label=\"remove\" onClick={onClick} />\n    </MenuGroup>\n  );\n};\n\nconst noRightMarginPaddingClass = css({\n  paddingRight: '0',\n  marginRight: '0',\n});\n\nconst RemovableName = ({ name, onRemove }: { name: string; onRemove: () => void }) => {\n  return (\n    <WithContextMenu renderMenuItems={() => renderRemovableNameMenuItems(onRemove)}>\n      {({ openMenu }) => (\n        <button className={cx('gf-form-label', noRightMarginPaddingClass)} onClick={openMenu}>\n          {name}\n        </button>\n      )}\n    </WithContextMenu>\n  );\n};\n\ntype PartProps = {\n  name: string;\n  params: PartParams;\n  onRemove: () => void;\n  onChange: (paramValues: string[]) => void;\n};\n\nconst noHorizMarginPaddingClass = css({\n  paddingLeft: '0',\n  paddingRight: '0',\n  marginLeft: '0',\n  marginRight: '0',\n});\n\nconst getPartClass = (theme: GrafanaTheme2) => {\n  return cx(\n    'gf-form-label',\n    css({\n      paddingLeft: '0',\n      // gf-form-label class makes certain css attributes incorrect\n      // for the selectbox-dropdown, so we have to \"reset\" them back\n      lineHeight: theme.typography.body.lineHeight,\n      fontSize: theme.typography.body.fontSize,\n    })\n  );\n};\n\nconst Part = ({ name, params, onChange, onRemove }: PartProps): JSX.Element => {\n  const theme = useTheme2();\n  const partClass = useMemo(() => getPartClass(theme), [theme]);\n\n  const onParamChange = (par: string, i: number) => {\n    const newParams = params.map((p) => p.value);\n    newParams[i] = par;\n    onChange(newParams);\n  };\n  return (\n    <div className={partClass}>\n      <RemovableName name={name} onRemove={onRemove} />(\n      {params.map((p, i) => {\n        const { value, options } = p;\n        const isLast = i === params.length - 1;\n        const loadOptions =\n          options !== null ? () => options().then((items) => items.map(toSelectableValue)) : undefined;\n        return (\n          <React.Fragment key={i}>\n            <Seg\n              allowCustomValue\n              value={value}\n              buttonClassName={noHorizMarginPaddingClass}\n              loadOptions={loadOptions}\n              onChange={(v) => {\n                onParamChange(unwrap(v.value), i);\n              }}\n            />\n            {!isLast && ','}\n          </React.Fragment>\n        );\n      })}\n      )\n    </div>\n  );\n};\n\nexport const PartListSection = ({\n  parts,\n  getNewPartOptions,\n  onAddNewPart,\n  onRemovePart,\n  onChange,\n}: Props): JSX.Element => {\n  return (\n    <>\n      {parts.map((part, index) => (\n        <Part\n          key={index}\n          name={part.name}\n          params={part.params}\n          onRemove={() => {\n            onRemovePart(index);\n          }}\n          onChange={(pars) => {\n            onChange(index, pars);\n          }}\n        />\n      ))}\n      <AddButton loadOptions={getNewPartOptions} onAdd={onAddNewPart} />\n    </>\n  );\n};\n","import { InfluxQueryTag } from '../../types';\n\nfunction isRegex(text: string): boolean {\n  return /^\\/.*\\/$/.test(text);\n}\n\n// FIXME: sync these to the query-string-generation-code\n// probably it's in influx_query_model.ts\nexport function getOperator(tag: InfluxQueryTag): string {\n  return tag.operator ?? (isRegex(tag.value) ? '=~' : '=');\n}\n\n// FIXME: sync these to the query-string-generation-code\n// probably it's in influx_query_model.ts\nexport function getCondition(tag: InfluxQueryTag, isFirst: boolean): string | undefined {\n  return isFirst ? undefined : tag.condition ?? 'AND';\n}\n\nexport function adjustOperatorIfNeeded(currentOperator: string, newTagValue: string): string {\n  const isCurrentOperatorRegex = currentOperator === '=~' || currentOperator === '!~';\n  const isNewTagValueRegex = isRegex(newTagValue);\n\n  if (isNewTagValueRegex) {\n    return isCurrentOperatorRegex ? currentOperator : '=~';\n  } else {\n    return isCurrentOperatorRegex ? '=' : currentOperator;\n  }\n}\n","import React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\n\nimport { InfluxQueryTag } from '../../types';\n\nimport { AddButton } from './AddButton';\nimport { Seg } from './Seg';\nimport { adjustOperatorIfNeeded, getCondition, getOperator } from './tagUtils';\nimport { toSelectableValue } from './toSelectableValue';\n\ntype KnownOperator = '=' | '!=' | '<>' | '<' | '>' | '=~' | '!~';\nconst knownOperators: KnownOperator[] = ['=', '!=', '<>', '<', '>', '=~', '!~'];\n\ntype KnownCondition = 'AND' | 'OR';\nconst knownConditions: KnownCondition[] = ['AND', 'OR'];\n\nconst operatorOptions: Array<SelectableValue<KnownOperator>> = knownOperators.map(toSelectableValue);\nconst condititonOptions: Array<SelectableValue<KnownCondition>> = knownConditions.map(toSelectableValue);\n\ntype Props = {\n  tags: InfluxQueryTag[];\n  onChange: (tags: InfluxQueryTag[]) => void;\n  getTagKeyOptions: () => Promise<string[]>;\n  getTagValueOptions: (key: string) => Promise<string[]>;\n};\n\ntype TagProps = {\n  tag: InfluxQueryTag;\n  isFirst: boolean;\n  onRemove: () => void;\n  onChange: (tag: InfluxQueryTag) => void;\n  getTagKeyOptions: () => Promise<string[]>;\n  getTagValueOptions: (key: string) => Promise<string[]>;\n};\n\nconst loadConditionOptions = () => Promise.resolve(condititonOptions);\n\nconst loadOperatorOptions = () => Promise.resolve(operatorOptions);\n\nconst Tag = ({ tag, isFirst, onRemove, onChange, getTagKeyOptions, getTagValueOptions }: TagProps): JSX.Element => {\n  const operator = getOperator(tag);\n  const condition = getCondition(tag, isFirst);\n\n  const getTagKeySegmentOptions = () => {\n    return getTagKeyOptions()\n      .catch((err) => {\n        // in this UI element we add a special item to the list of options,\n        // that is used to remove the element.\n        // this causes a problem: if `getTagKeyOptions` fails with an error,\n        // the remove-filter option is never added to the list,\n        // and the UI element can not be removed.\n        // to avoid it, we catch any potential errors coming from `getTagKeyOptions`,\n        // log the error, and pretend that the list of options is an empty list.\n        // this way the remove-item option can always be added to the list.\n        console.error(err);\n        return [];\n      })\n      .then((tags) => [{ label: '-- remove filter --', value: undefined }, ...tags.map(toSelectableValue)]);\n  };\n\n  const getTagValueSegmentOptions = () => {\n    return getTagValueOptions(tag.key).then((tags) => tags.map(toSelectableValue));\n  };\n\n  return (\n    <div className=\"gf-form\">\n      {condition != null && (\n        <Seg\n          value={condition}\n          loadOptions={loadConditionOptions}\n          onChange={(v) => {\n            onChange({ ...tag, condition: v.value });\n          }}\n        />\n      )}\n      <Seg\n        allowCustomValue\n        value={tag.key}\n        loadOptions={getTagKeySegmentOptions}\n        onChange={(v) => {\n          const { value } = v;\n          if (value === undefined) {\n            onRemove();\n          } else {\n            onChange({ ...tag, key: value ?? '' });\n          }\n        }}\n      />\n      <Seg\n        value={operator}\n        loadOptions={loadOperatorOptions}\n        onChange={(op) => {\n          onChange({ ...tag, operator: op.value });\n        }}\n      />\n      <Seg\n        allowCustomValue\n        value={tag.value}\n        loadOptions={getTagValueSegmentOptions}\n        onChange={(v) => {\n          const value = v.value ?? '';\n          onChange({ ...tag, value, operator: adjustOperatorIfNeeded(operator, value) });\n        }}\n      />\n    </div>\n  );\n};\n\nexport const TagsSection = ({ tags, onChange, getTagKeyOptions, getTagValueOptions }: Props): JSX.Element => {\n  const onTagChange = (newTag: InfluxQueryTag, index: number) => {\n    const newTags = tags.map((tag, i) => {\n      return index === i ? newTag : tag;\n    });\n    onChange(newTags);\n  };\n\n  const onTagRemove = (index: number) => {\n    const newTags = tags.filter((t, i) => i !== index);\n    onChange(newTags);\n  };\n\n  const getTagKeySegmentOptions = () => {\n    return getTagKeyOptions().then((tags) => tags.map(toSelectableValue));\n  };\n\n  const addNewTag = (tagKey: string, isFirst: boolean) => {\n    const minimalTag: InfluxQueryTag = {\n      key: tagKey,\n      value: 'select tag value',\n    };\n\n    const newTag: InfluxQueryTag = {\n      key: minimalTag.key,\n      value: minimalTag.value,\n      operator: getOperator(minimalTag),\n      condition: getCondition(minimalTag, isFirst),\n    };\n\n    onChange([...tags, newTag]);\n  };\n\n  return (\n    <>\n      {tags.map((t, i) => (\n        <Tag\n          tag={t}\n          isFirst={i === 0}\n          key={i}\n          onChange={(newT) => {\n            onTagChange(newT, i);\n          }}\n          onRemove={() => {\n            onTagRemove(i);\n          }}\n          getTagKeyOptions={getTagKeyOptions}\n          getTagValueOptions={getTagValueOptions}\n        />\n      ))}\n      <AddButton\n        allowCustomValue\n        loadOptions={getTagKeySegmentOptions}\n        onAdd={(v) => {\n          addNewTag(v, tags.length === 0);\n        }}\n      />\n    </>\n  );\n};\n","import { SelectableValue } from '@grafana/data';\nimport { QueryPartDef } from 'app/features/alerting/state/query_part';\n\nimport InfluxQueryModel from '../../influx_query_model';\nimport queryPart from '../../query_part';\nimport { InfluxQuery, InfluxQueryPart } from '../../types';\n\nimport { PartParams } from './PartListSection';\nimport { toSelectableValue } from './toSelectableValue';\nimport { unwrap } from './unwrap';\n\ntype Categories = Record<string, QueryPartDef[]>;\n\nexport function getNewSelectPartOptions(): SelectableValue[] {\n  const categories: Categories = queryPart.getCategories();\n  const options: SelectableValue[] = [];\n\n  const keys = Object.keys(categories);\n\n  keys.forEach((key) => {\n    const children: SelectableValue[] = categories[key].map((x) => toSelectableValue(x.type));\n\n    options.push({\n      label: key,\n      options: children,\n    });\n  });\n\n  return options;\n}\n\nexport async function getNewGroupByPartOptions(\n  query: InfluxQuery,\n  getTagKeys: () => Promise<string[]>\n): Promise<Array<SelectableValue<string>>> {\n  const tagKeys = await getTagKeys();\n  const queryCopy = { ...query }; // the query-model mutates the query\n  const model = new InfluxQueryModel(queryCopy);\n  const options: Array<SelectableValue<string>> = [];\n  if (!model.hasFill()) {\n    options.push(toSelectableValue('fill(null)'));\n  }\n  if (!model.hasGroupByTime()) {\n    options.push(toSelectableValue('time($interval)'));\n  }\n  tagKeys.forEach((key) => {\n    options.push(toSelectableValue(`tag(${key})`));\n  });\n  return options;\n}\n\ntype Part = {\n  name: string;\n  params: PartParams;\n};\n\nfunction getPartParams(part: InfluxQueryPart, dynamicParamOptions: Map<string, () => Promise<string[]>>): PartParams {\n  // NOTE: the way the system is constructed,\n  // there always can only be one possible dynamic-lookup\n  // field. in case of select it is the field,\n  // in case of group-by it is the tag\n  const def = queryPart.create(part).def;\n\n  // we switch the numbers to strings, it will work that way too,\n  // and it makes the code simpler\n  const paramValues = (part.params ?? []).map((p) => p.toString());\n\n  if (paramValues.length !== def.params.length) {\n    throw new Error('Invalid query-segment');\n  }\n\n  return paramValues.map((val, index) => {\n    const defParam = def.params[index];\n    if (defParam.dynamicLookup) {\n      return {\n        value: val,\n        options: unwrap(dynamicParamOptions.get(`${def.type}_${index}`)),\n      };\n    }\n\n    if (defParam.options != null) {\n      return {\n        value: val,\n        options: () => Promise.resolve(defParam.options),\n      };\n    }\n\n    return {\n      value: val,\n      options: null,\n    };\n  });\n}\n\nexport function makePartList(\n  queryParts: InfluxQueryPart[],\n  dynamicParamOptions: Map<string, () => Promise<string[]>>\n): Part[] {\n  return queryParts.map((qp) => {\n    return {\n      name: qp.type,\n      params: getPartParams(qp, dynamicParamOptions),\n    };\n  });\n}\n","import { css } from '@emotion/css';\nimport React, { useMemo } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\nimport { InlineLabel, SegmentSection, useStyles2 } from '@grafana/ui';\n\nimport InfluxDatasource from '../../datasource';\nimport {\n  getAllMeasurementsForTags,\n  getAllPolicies,\n  getFieldKeysForMeasurement,\n  getTagKeysForMeasurementAndTags,\n  getTagValues,\n} from '../../influxQLMetadataQuery';\nimport {\n  addNewGroupByPart,\n  addNewSelectPart,\n  changeGroupByPart,\n  changeSelectPart,\n  normalizeQuery,\n  removeGroupByPart,\n  removeSelectPart,\n} from '../../queryUtils';\nimport { InfluxQuery, InfluxQueryTag } from '../../types';\nimport { DEFAULT_RESULT_FORMAT } from '../constants';\nimport { useUniqueId } from '../useUniqueId';\n\nimport { FormatAsSection } from './FormatAsSection';\nimport { FromSection } from './FromSection';\nimport { InputSection } from './InputSection';\nimport { OrderByTimeSection } from './OrderByTimeSection';\nimport { PartListSection } from './PartListSection';\nimport { TagsSection } from './TagsSection';\nimport { getNewGroupByPartOptions, getNewSelectPartOptions, makePartList } from './partListUtils';\n\ntype Props = {\n  query: InfluxQuery;\n  onChange: (query: InfluxQuery) => void;\n  onRunQuery: () => void;\n  datasource: InfluxDatasource;\n};\n\nfunction getTemplateVariableOptions() {\n  return (\n    getTemplateSrv()\n      .getVariables()\n      // we make them regex-params, i'm not 100% sure why.\n      // probably because this way multi-value variables work ok too.\n      .map((v) => `/^$${v.name}$/`)\n  );\n}\n\n// helper function to make it easy to call this from the widget-render-code\nfunction withTemplateVariableOptions(optionsPromise: Promise<string[]>, filter?: string): Promise<string[]> {\n  let templateVariableOptions = getTemplateVariableOptions();\n  if (filter) {\n    templateVariableOptions = templateVariableOptions.filter((tvo) => tvo.indexOf(filter) > -1);\n  }\n  return optionsPromise.then((options) => [...templateVariableOptions, ...options]);\n}\n\n// it is possible to add fields into the `InfluxQueryTag` structures, and they do work,\n// but in some cases, when we do metadata queries, we have to remove them from the queries.\nfunction filterTags(parts: InfluxQueryTag[], allTagKeys: Set<string>): InfluxQueryTag[] {\n  return parts.filter((t) => t.key.endsWith('::tag') || allTagKeys.has(t.key + '::tag'));\n}\n\nexport const Editor = (props: Props): JSX.Element => {\n  const uniqueId = useUniqueId();\n  const formatAsId = `influxdb-qe-format-as-${uniqueId}`;\n  const orderByTimeId = `influxdb-qe-order-by${uniqueId}`;\n\n  const styles = useStyles2(getStyles);\n  const query = normalizeQuery(props.query);\n  const { datasource } = props;\n  const { measurement, policy } = query;\n\n  const policyData = useAsync(() => getAllPolicies(datasource), [datasource]);\n  const retentionPolicies = !!policyData.error ? [] : policyData.value ?? [];\n\n  const allTagKeys = useMemo(async () => {\n    const tagKeys = (await getTagKeysForMeasurementAndTags(measurement, policy, [], datasource)).map(\n      (tag) => `${tag}::tag`\n    );\n\n    const fieldKeys = (await getFieldKeysForMeasurement(measurement || '', policy, datasource)).map(\n      (field) => `${field}::field`\n    );\n\n    return new Set([...tagKeys, ...fieldKeys]);\n  }, [measurement, policy, datasource]);\n\n  const selectLists = useMemo(() => {\n    const dynamicSelectPartOptions = new Map([\n      [\n        'field_0',\n        () => {\n          return measurement !== undefined\n            ? getFieldKeysForMeasurement(measurement, policy, datasource)\n            : Promise.resolve([]);\n        },\n      ],\n    ]);\n    return (query.select ?? []).map((sel) => makePartList(sel, dynamicSelectPartOptions));\n  }, [measurement, policy, query.select, datasource]);\n\n  // the following function is not complicated enough to memoize, but it's result\n  // is used in both memoized and un-memoized parts, so we have no choice\n  const getTagKeys = useMemo(\n    () => async () => {\n      const selectedTagKeys = new Set(query.tags?.map((tag) => tag.key));\n\n      return [...(await allTagKeys)].filter((tagKey) => !selectedTagKeys.has(tagKey));\n    },\n    [query.tags, allTagKeys]\n  );\n\n  const groupByList = useMemo(() => {\n    const dynamicGroupByPartOptions = new Map([['tag_0', getTagKeys]]);\n\n    return makePartList(query.groupBy ?? [], dynamicGroupByPartOptions);\n  }, [getTagKeys, query.groupBy]);\n\n  const onAppliedChange = (newQuery: InfluxQuery) => {\n    props.onChange(newQuery);\n    props.onRunQuery();\n  };\n  const handleFromSectionChange = (p: string | undefined, m: string | undefined) => {\n    onAppliedChange({\n      ...query,\n      policy: p,\n      measurement: m,\n    });\n  };\n\n  const handleTagsSectionChange = (tags: InfluxQueryTag[]) => {\n    // we set empty-arrays to undefined\n    onAppliedChange({\n      ...query,\n      tags: tags.length === 0 ? undefined : tags,\n    });\n  };\n\n  return (\n    <div>\n      <SegmentSection label=\"FROM\" fill={true}>\n        <FromSection\n          policy={policy ?? retentionPolicies[0]}\n          measurement={measurement}\n          getPolicyOptions={() => getAllPolicies(datasource)}\n          getMeasurementOptions={(filter) =>\n            withTemplateVariableOptions(\n              allTagKeys.then((keys) =>\n                getAllMeasurementsForTags(\n                  filter === '' ? undefined : filter,\n                  filterTags(query.tags ?? [], keys),\n                  datasource\n                )\n              ),\n              filter\n            )\n          }\n          onChange={handleFromSectionChange}\n        />\n        <InlineLabel width=\"auto\" className={styles.inlineLabel}>\n          WHERE\n        </InlineLabel>\n        <TagsSection\n          tags={query.tags ?? []}\n          onChange={handleTagsSectionChange}\n          getTagKeyOptions={getTagKeys}\n          getTagValueOptions={(key: string) =>\n            withTemplateVariableOptions(\n              allTagKeys.then((keys) =>\n                getTagValues(key, measurement, policy, filterTags(query.tags ?? [], keys), datasource)\n              )\n            )\n          }\n        />\n      </SegmentSection>\n      {selectLists.map((sel, index) => (\n        <SegmentSection key={index} label={index === 0 ? 'SELECT' : ''} fill={true}>\n          <PartListSection\n            parts={sel}\n            getNewPartOptions={() => Promise.resolve(getNewSelectPartOptions())}\n            onChange={(partIndex, newParams) => {\n              const newQuery = changeSelectPart(query, index, partIndex, newParams);\n              onAppliedChange(newQuery);\n            }}\n            onAddNewPart={(type) => {\n              onAppliedChange(addNewSelectPart(query, type, index));\n            }}\n            onRemovePart={(partIndex) => {\n              onAppliedChange(removeSelectPart(query, partIndex, index));\n            }}\n          />\n        </SegmentSection>\n      ))}\n      <SegmentSection label=\"GROUP BY\" fill={true}>\n        <PartListSection\n          parts={groupByList}\n          getNewPartOptions={() => getNewGroupByPartOptions(query, getTagKeys)}\n          onChange={(partIndex, newParams) => {\n            const newQuery = changeGroupByPart(query, partIndex, newParams);\n            onAppliedChange(newQuery);\n          }}\n          onAddNewPart={(type) => {\n            onAppliedChange(addNewGroupByPart(query, type));\n          }}\n          onRemovePart={(partIndex) => {\n            onAppliedChange(removeGroupByPart(query, partIndex));\n          }}\n        />\n      </SegmentSection>\n      <SegmentSection label=\"TIMEZONE\" fill={true}>\n        <InputSection\n          placeholder=\"(optional)\"\n          value={query.tz}\n          onChange={(tz) => {\n            onAppliedChange({ ...query, tz });\n          }}\n        />\n        <InlineLabel htmlFor={orderByTimeId} width=\"auto\" className={styles.inlineLabel}>\n          ORDER BY TIME\n        </InlineLabel>\n        <OrderByTimeSection\n          inputId={orderByTimeId}\n          value={query.orderByTime === 'DESC' ? 'DESC' : 'ASC' /* FIXME: make this shared with influx_query_model */}\n          onChange={(v) => {\n            onAppliedChange({ ...query, orderByTime: v });\n          }}\n        />\n      </SegmentSection>\n      {/* query.fill is ignored in the query-editor, and it is deleted whenever\n          query-editor changes. the influx_query_model still handles it, but the new\n          approach seem to be to handle \"fill\" inside query.groupBy. so, if you\n          have a panel where in the json you have query.fill, it will be applied,\n          as long as you do not edit that query. */}\n      <SegmentSection label=\"LIMIT\" fill={true}>\n        <InputSection\n          placeholder=\"(optional)\"\n          value={query.limit?.toString()}\n          onChange={(limit) => {\n            onAppliedChange({ ...query, limit });\n          }}\n        />\n        <InlineLabel width=\"auto\" className={styles.inlineLabel}>\n          SLIMIT\n        </InlineLabel>\n        <InputSection\n          placeholder=\"(optional)\"\n          value={query.slimit?.toString()}\n          onChange={(slimit) => {\n            onAppliedChange({ ...query, slimit });\n          }}\n        />\n      </SegmentSection>\n      <SegmentSection htmlFor={formatAsId} label=\"FORMAT AS\" fill={true}>\n        <FormatAsSection\n          inputId={formatAsId}\n          format={query.resultFormat ?? DEFAULT_RESULT_FORMAT}\n          onChange={(format) => {\n            onAppliedChange({ ...query, resultFormat: format });\n          }}\n        />\n        {query.resultFormat !== 'table' && (\n          <>\n            <InlineLabel width=\"auto\" className={styles.inlineLabel}>\n              ALIAS\n            </InlineLabel>\n            <InputSection\n              isWide\n              placeholder=\"Naming pattern\"\n              value={query.alias}\n              onChange={(alias) => {\n                onAppliedChange({ ...query, alias });\n              }}\n            />\n          </>\n        )}\n      </SegmentSection>\n    </div>\n  );\n};\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    inlineLabel: css`\n      color: ${theme.colors.primary.text};\n    `,\n  };\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { QueryEditorProps } from '@grafana/data';\n\nimport InfluxDatasource from '../datasource';\nimport { buildRawQuery } from '../queryUtils';\nimport { InfluxOptions, InfluxQuery } from '../types';\n\nimport { FluxQueryEditor } from './FluxQueryEditor';\nimport { QueryEditorModeSwitcher } from './QueryEditorModeSwitcher';\nimport { RawInfluxQLEditor } from './RawInfluxQLEditor';\nimport { Editor as VisualInfluxQLEditor } from './VisualInfluxQLEditor/Editor';\n\ntype Props = QueryEditorProps<InfluxDatasource, InfluxQuery, InfluxOptions>;\n\nexport const QueryEditor = ({ query, onChange, onRunQuery, datasource, range, data }: Props): JSX.Element => {\n  if (datasource.isFlux) {\n    return (\n      <div className=\"gf-form-query-content\">\n        <FluxQueryEditor query={query} onChange={onChange} onRunQuery={onRunQuery} datasource={datasource} />\n      </div>\n    );\n  }\n\n  return (\n    <div className={css({ display: 'flex' })}>\n      <div className={css({ flexGrow: 1 })}>\n        {query.rawQuery ? (\n          <RawInfluxQLEditor query={query} onChange={onChange} onRunQuery={onRunQuery} />\n        ) : (\n          <VisualInfluxQLEditor query={query} onChange={onChange} onRunQuery={onRunQuery} datasource={datasource} />\n        )}\n      </div>\n      <QueryEditorModeSwitcher\n        isRaw={query.rawQuery ?? false}\n        onChange={(value) => {\n          onChange({ ...query, query: buildRawQuery(query), rawQuery: value });\n          onRunQuery();\n        }}\n      />\n    </div>\n  );\n};\n","import React, { PureComponent } from 'react';\n\nimport { InlineFormLabel, TextArea } from '@grafana/ui';\n\nimport InfluxDatasource from '../datasource';\n\nimport { FluxQueryEditor } from './FluxQueryEditor';\n\ninterface Props {\n  query: string; // before flux, it was always a string\n  onChange: (query?: string) => void;\n  datasource: InfluxDatasource;\n}\n\nexport default class VariableQueryEditor extends PureComponent<Props> {\n  onRefresh = () => {\n    // noop\n  };\n\n  render() {\n    let { query, datasource, onChange } = this.props;\n    if (datasource.isFlux) {\n      return (\n        <FluxQueryEditor\n          datasource={datasource}\n          query={{\n            refId: 'A',\n            query,\n          }}\n          onRunQuery={this.onRefresh}\n          onChange={(v) => onChange(v.query)}\n        />\n      );\n    }\n\n    return (\n      <div className=\"gf-form-inline\">\n        <InlineFormLabel width={10}>Query</InlineFormLabel>\n        <div className=\"gf-form-inline gf-form--grow\">\n          <TextArea\n            defaultValue={query || ''}\n            placeholder=\"metric name or tags query\"\n            rows={1}\n            className=\"gf-form-input\"\n            onBlur={(e) => onChange(e.currentTarget.value)}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { useState } from 'react';\n\nimport { QueryEditorProps } from '@grafana/data';\nimport { InlineFormLabel, Input } from '@grafana/ui';\n\nimport { InfluxQuery, InfluxOptions } from '../types';\n\nimport InfluxDatasource from './../datasource';\n\nexport const AnnotationEditor = (props: QueryEditorProps<InfluxDatasource, InfluxQuery, InfluxOptions>) => {\n  const { query, onChange } = props;\n  const [eventQuery, setEventQuery] = useState<string>(query.query ?? '');\n\n  const [textColumn, setTextColumn] = useState<string>(query.textColumn ?? '');\n  const [tagsColumn, setTagsColumn] = useState<string>(query.tagsColumn ?? '');\n  const [timeEndColumn, setTimeEndColumn] = useState<string>(query?.timeEndColumn ?? '');\n  const [titleColumn] = useState<string>(query?.titleColumn ?? '');\n  const updateValue = <K extends keyof InfluxQuery, V extends InfluxQuery[K]>(key: K, val: V) => {\n    onChange({\n      ...query,\n      [key]: val,\n      fromAnnotations: true,\n      textEditor: true,\n    });\n  };\n  return (\n    <div className=\"gf-form-group\">\n      <div className=\"gf-form\">\n        <InlineFormLabel width={12}>InfluxQL Query</InlineFormLabel>\n        <Input\n          value={eventQuery}\n          onChange={(e) => setEventQuery(e.currentTarget.value ?? '')}\n          onBlur={() => updateValue('query', eventQuery)}\n          placeholder=\"select text from events where $timeFilter limit 1000\"\n        />\n      </div>\n      <InlineFormLabel\n        width={12}\n        tooltip={\n          <div>\n            If your influxdb query returns more than one field you need to specify the column names below. An annotation\n            event is composed of a title, tags, and an additional text field. Optionally you can map the timeEnd column\n            for region annotation usage.\n          </div>\n        }\n      >\n        Field mappings\n      </InlineFormLabel>\n      <div className=\"gf-form-group\">\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel width={12}>Text</InlineFormLabel>\n            <Input\n              value={textColumn}\n              onChange={(e) => setTextColumn(e.currentTarget.value ?? '')}\n              onBlur={() => updateValue('textColumn', textColumn)}\n            />\n          </div>\n          <div className=\"gf-form\">\n            <InlineFormLabel width={12}>Tags</InlineFormLabel>\n            <Input\n              value={tagsColumn}\n              onChange={(e) => setTagsColumn(e.currentTarget.value ?? '')}\n              onBlur={() => updateValue('tagsColumn', tagsColumn)}\n            />\n          </div>\n          <div className=\"gf-form\">\n            <InlineFormLabel width={12}>TimeEnd</InlineFormLabel>\n            <Input\n              value={timeEndColumn}\n              onChange={(e) => setTimeEndColumn(e.currentTarget.value ?? '')}\n              onBlur={() => updateValue('timeEndColumn', timeEndColumn)}\n            />\n          </div>\n          <div className=\"gf-form ng-hide\">\n            <InlineFormLabel width={12}>Title</InlineFormLabel>\n            <Input defaultValue={titleColumn} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { each, map, includes, flatten, keys } from 'lodash';\n\nimport { FieldType, QueryResultMeta, TimeSeries, TableData } from '@grafana/data';\nimport TableModel from 'app/core/TableModel';\n\nexport default class InfluxSeries {\n  refId?: string;\n  series: any;\n  alias: any;\n  annotation: any;\n  meta?: QueryResultMeta;\n\n  constructor(options: { series: any; alias?: any; annotation?: any; meta?: QueryResultMeta; refId?: string }) {\n    this.series = options.series;\n    this.alias = options.alias;\n    this.annotation = options.annotation;\n    this.meta = options.meta;\n    this.refId = options.refId;\n  }\n\n  getTimeSeries(): TimeSeries[] {\n    const output: TimeSeries[] = [];\n    let i, j;\n\n    if (this.series.length === 0) {\n      return output;\n    }\n\n    each(this.series, (series) => {\n      const columns = series.columns.length;\n      const tags = map(series.tags, (value, key) => {\n        return key + ': ' + value;\n      });\n\n      for (j = 1; j < columns; j++) {\n        let seriesName = series.name;\n        const columnName = series.columns[j];\n        if (columnName !== 'value') {\n          seriesName = seriesName + '.' + columnName;\n        }\n\n        if (this.alias) {\n          seriesName = this._getSeriesName(series, j);\n        } else if (series.tags) {\n          seriesName = seriesName + ' {' + tags.join(', ') + '}';\n        }\n\n        const datapoints = [];\n        if (series.values) {\n          for (i = 0; i < series.values.length; i++) {\n            datapoints[i] = [series.values[i][j], series.values[i][0]];\n          }\n        }\n\n        output.push({\n          title: seriesName,\n          target: seriesName,\n          datapoints: datapoints,\n          tags: series.tags,\n          meta: this.meta,\n          refId: this.refId,\n        });\n      }\n    });\n\n    return output;\n  }\n\n  _getSeriesName(series: any, index: number) {\n    const regex = /\\$(\\w+)|\\[\\[([\\s\\S]+?)\\]\\]/g;\n    const segments = series.name.split('.');\n\n    return this.alias.replace(regex, (match: any, g1: any, g2: any) => {\n      const group = g1 || g2;\n      const segIndex = parseInt(group, 10);\n\n      if (group === 'm' || group === 'measurement') {\n        return series.name;\n      }\n      if (group === 'col') {\n        return series.columns[index];\n      }\n      if (!isNaN(segIndex)) {\n        return segments[segIndex] ?? match;\n      }\n      if (group.indexOf('tag_') !== 0) {\n        return match;\n      }\n\n      const tag = group.replace('tag_', '');\n      if (!series.tags) {\n        return match;\n      }\n      return series.tags[tag];\n    });\n  }\n\n  getAnnotations() {\n    const list: any[] = [];\n\n    each(this.series, (series) => {\n      let titleCol: any = null;\n      let timeCol: any = null;\n      let timeEndCol: any = null;\n      const tagsCol: any = [];\n      let textCol: any = null;\n\n      each(series.columns, (column, index) => {\n        if (column === 'time') {\n          timeCol = index;\n          return;\n        }\n        if (column === 'sequence_number') {\n          return;\n        }\n        if (column === this.annotation.titleColumn) {\n          titleCol = index;\n          return;\n        }\n        if (includes((this.annotation.tagsColumn || '').replace(' ', '').split(','), column)) {\n          tagsCol.push(index);\n          return;\n        }\n        if (column === this.annotation.textColumn) {\n          textCol = index;\n          return;\n        }\n        if (column === this.annotation.timeEndColumn) {\n          timeEndCol = index;\n          return;\n        }\n        // legacy case\n        if (!titleCol && textCol !== index) {\n          titleCol = index;\n        }\n      });\n\n      each(series.values, (value) => {\n        const data = {\n          annotation: this.annotation,\n          time: +new Date(value[timeCol]),\n          title: value[titleCol],\n          timeEnd: value[timeEndCol],\n          // Remove empty values, then split in different tags for comma separated values\n          tags: flatten(\n            tagsCol\n              .filter((t: any) => {\n                return value[t];\n              })\n              .map((t: any) => {\n                return value[t].split(',');\n              })\n          ),\n          text: value[textCol],\n        };\n\n        list.push(data);\n      });\n    });\n\n    return list;\n  }\n\n  getTable(): TableData {\n    const table = new TableModel();\n    let i, j;\n\n    table.refId = this.refId;\n    table.meta = this.meta;\n\n    if (this.series.length === 0) {\n      return table;\n    }\n\n    // the order is:\n    // - first the first item from the value-array (this is often (always?) the timestamp)\n    // - then all the tag-values\n    // - then the rest of the value-array\n    //\n    // we have to keep this order both in table.columns and table.rows\n\n    each(this.series, (series: any, seriesIndex: number) => {\n      if (seriesIndex === 0) {\n        const firstCol = series.columns[0];\n        // Check the first column's name, if it is `time`, we\n        // mark it as having the type time\n        const firstTableCol = firstCol === 'time' ? { text: 'Time', type: FieldType.time } : { text: firstCol };\n        table.columns.push(firstTableCol);\n        each(keys(series.tags), (key) => {\n          table.columns.push({ text: key });\n        });\n        for (j = 1; j < series.columns.length; j++) {\n          table.columns.push({ text: series.columns[j] });\n        }\n      }\n\n      if (series.values) {\n        for (i = 0; i < series.values.length; i++) {\n          const values = series.values[i];\n          const reordered = [values[0]];\n          if (series.tags) {\n            for (const key in series.tags) {\n              if (series.tags.hasOwnProperty(key)) {\n                reordered.push(series.tags[key]);\n              }\n            }\n          }\n          for (j = 1; j < values.length; j++) {\n            reordered.push(values[j]);\n          }\n          table.rows.push(reordered);\n        }\n      }\n    });\n\n    return table;\n  }\n}\n","type LegacyAnnotation = {\n  query?: string;\n  queryType?: string;\n  fromAnnotations?: boolean;\n  tagsColumn?: string;\n  textColumn?: string;\n  timeEndColumn?: string;\n  titleColumn?: string;\n  name?: string;\n};\n\n// this becomes the target in the migrated annotations\nconst migrateLegacyAnnotation = (json: LegacyAnnotation) => {\n  return {\n    query: json.query ?? '',\n    queryType: 'tags',\n    fromAnnotations: true,\n    tagsColumn: json.tagsColumn ?? '',\n    textColumn: json.textColumn ?? '',\n    timeEndColumn: json.timeEndColumn ?? '',\n    titleColumn: json.titleColumn ?? '',\n    name: json.name ?? '',\n  };\n};\n\n// eslint-ignore-next-line\nexport const prepareAnnotation = (json: any) => {\n  json.target = json.target ?? migrateLegacyAnnotation(json);\n\n  return json;\n};\n","import { each, flatten, groupBy, isArray } from 'lodash';\n\nimport { AnnotationEvent, DataFrame, DataQuery, FieldType, QueryResultMeta } from '@grafana/data';\nimport { toDataQueryResponse } from '@grafana/runtime';\nimport TableModel from 'app/core/TableModel';\n\nimport { InfluxQuery } from './types';\n\nexport default class ResponseParser {\n  parse(query: string, results: { results: any }) {\n    if (!results?.results || results.results.length === 0) {\n      return [];\n    }\n\n    const influxResults = results.results[0];\n    if (!influxResults.series) {\n      return [];\n    }\n\n    const normalizedQuery = query.toLowerCase();\n    const isRetentionPolicyQuery = normalizedQuery.indexOf('show retention policies') >= 0;\n    const isValueFirst = normalizedQuery.indexOf('show field keys') >= 0 || isRetentionPolicyQuery;\n\n    const res = new Set<string>();\n    each(influxResults.series, (serie) => {\n      each(serie.values, (value) => {\n        if (isArray(value)) {\n          // In general, there are 2 possible shapes for the returned value.\n          // The first one is a two-element array,\n          // where the first element is somewhat a metadata value:\n          // the tag name for SHOW TAG VALUES queries,\n          // the time field for SELECT queries, etc.\n          // The second shape is an one-element array,\n          // that is containing an immediate value.\n          // For example, SHOW FIELD KEYS queries return such shape.\n          // Note, pre-0.11 versions return\n          // the second shape for SHOW TAG VALUES queries\n          // (while the newer versions—first).\n\n          if (isValueFirst) {\n            // We want to know whether the given retention policy is the default one or not.\n            // If it is default policy then we should add it to the beginning.\n            // The index 4 gives us if that policy is default or not.\n            // https://docs.influxdata.com/influxdb/v1.8/query_language/explore-schema/#show-retention-policies\n            // Only difference is v0.9. In that version we don't receive shardGroupDuration value.\n            // https://archive.docs.influxdata.com/influxdb/v0.9/query_language/schema_exploration/#show-retention-policies\n            // Since it is always the last value we will check that last value always.\n            if (isRetentionPolicyQuery && value[value.length - 1] === true) {\n              const newSetValues = [value[0].toString(), ...Array.from(res)];\n              res.clear();\n              newSetValues.forEach((sv) => res.add(sv));\n            } else {\n              res.add(value[0].toString());\n            }\n          } else if (value[1] !== undefined) {\n            res.add(value[1].toString());\n          } else {\n            res.add(value[0].toString());\n          }\n        } else {\n          res.add(value.toString());\n        }\n      });\n    });\n\n    // NOTE: it is important to keep the order of items in the parsed output\n    // the same as it was in the influxdb-response.\n    // we use a `Set` to collect the unique-results, and `Set` iteration\n    // order is insertion-order, so this should be ok.\n    return Array.from(res).map((v) => ({ text: v }));\n  }\n\n  getTable(dfs: DataFrame[], target: InfluxQuery, meta: QueryResultMeta): TableModel {\n    let table = new TableModel();\n\n    if (dfs.length > 0) {\n      table.meta = {\n        ...meta,\n        executedQueryString: dfs[0].meta?.executedQueryString,\n      };\n\n      table.refId = target.refId;\n      table = getTableCols(dfs, table, target);\n\n      // if group by tag(s) added\n      if (dfs[0].fields[1] && dfs[0].fields[1].labels) {\n        let dfsByLabels: any = groupBy(dfs, (df: DataFrame) =>\n          df.fields[1].labels ? Object.values(df.fields[1].labels!) : null\n        );\n        const labels = Object.keys(dfsByLabels);\n        dfsByLabels = Object.values(dfsByLabels);\n\n        for (let i = 0; i < dfsByLabels.length; i++) {\n          table = getTableRows(dfsByLabels[i], table, [...labels[i].split(',')]);\n        }\n      } else {\n        table = getTableRows(dfs, table, []);\n      }\n    }\n\n    return table;\n  }\n\n  async transformAnnotationResponse(annotation: any, data: any, target: InfluxQuery): Promise<AnnotationEvent[]> {\n    const rsp = toDataQueryResponse(data, [target] as DataQuery[]);\n\n    if (rsp) {\n      const table = this.getTable(rsp.data, target, {});\n      const list: any[] = [];\n      let titleCol: any = null;\n      let timeCol: any = null;\n      let timeEndCol: any = null;\n      const tagsCol: any = [];\n      let textCol: any = null;\n\n      each(table.columns, (column, index) => {\n        if (column.text.toLowerCase() === 'time') {\n          timeCol = index;\n          return;\n        }\n        if (column.text === annotation.titleColumn) {\n          titleCol = index;\n          return;\n        }\n        if (colContainsTag(column.text, annotation.tagsColumn)) {\n          tagsCol.push(index);\n          return;\n        }\n        if (column.text.includes(annotation.textColumn)) {\n          textCol = index;\n          return;\n        }\n        if (column.text === annotation.timeEndColumn) {\n          timeEndCol = index;\n          return;\n        }\n        // legacy case\n        if (!titleCol && textCol !== index) {\n          titleCol = index;\n        }\n      });\n\n      each(table.rows, (value) => {\n        const data = {\n          annotation: annotation,\n          time: +new Date(value[timeCol]),\n          title: value[titleCol],\n          timeEnd: value[timeEndCol],\n          // Remove empty values, then split in different tags for comma separated values\n          tags: flatten(\n            tagsCol\n              .filter((t: any) => {\n                return value[t];\n              })\n              .map((t: any) => {\n                return value[t].split(',');\n              })\n          ),\n          text: value[textCol],\n        };\n\n        list.push(data);\n      });\n\n      return list;\n    }\n    return [];\n  }\n}\n\nfunction colContainsTag(colText: string, tagsColumn: string): boolean {\n  const tags = (tagsColumn || '').replace(' ', '').split(',');\n  for (const tag of tags) {\n    if (colText.includes(tag)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction getTableCols(dfs: DataFrame[], table: TableModel, target: InfluxQuery): TableModel {\n  const selectedParams = getSelectedParams(target);\n\n  dfs[0].fields.forEach((field) => {\n    // Time col\n    if (field.name === 'time') {\n      table.columns.push({ text: 'Time', type: FieldType.time });\n    }\n\n    // Group by (label) column(s)\n    else if (field.name === 'value') {\n      if (field.labels) {\n        Object.keys(field.labels).forEach((key) => {\n          table.columns.push({ text: key });\n        });\n      }\n    }\n  });\n\n  // Get cols for annotationQuery\n  if (dfs[0].refId === 'metricFindQuery') {\n    dfs.forEach((field) => {\n      if (field.name) {\n        table.columns.push({ text: field.name });\n      }\n    });\n  }\n\n  // Select (metric) column(s)\n  for (let i = 0; i < selectedParams.length; i++) {\n    table.columns.push({ text: selectedParams[i] });\n  }\n\n  // ISSUE: https://github.com/grafana/grafana/issues/63842\n  // if rawQuery and\n  // has other selected fields in the query and\n  // dfs field names are in the rawQuery but\n  // the selected params object doesn't exist in the query then\n  // add columns to the table\n  if (\n    target.rawQuery &&\n    selectedParams.length === 0 &&\n    rawQuerySelectedFieldsInDataframe(target.query, dfs) &&\n    dfs[0].refId !== 'metricFindQuery'\n  ) {\n    dfs.map((df) => {\n      if (df.name) {\n        table.columns.push({ text: df.name });\n      }\n    });\n  }\n\n  return table;\n}\n\nfunction getTableRows(dfs: DataFrame[], table: TableModel, labels: string[]): TableModel {\n  const values = dfs[0].fields[0].values.toArray();\n\n  for (let i = 0; i < values.length; i++) {\n    const time = values[i];\n    const metrics = dfs.map((df: DataFrame) => {\n      return df.fields[1] ? df.fields[1].values.toArray()[i] : null;\n    });\n    if (metrics.indexOf(null) < 0) {\n      table.rows.push([time, ...labels, ...metrics]);\n    }\n  }\n  return table;\n}\n\nexport function getSelectedParams(target: InfluxQuery): string[] {\n  let allParams: string[] = [];\n  target.select?.forEach((select) => {\n    const selector = select.filter((x) => x.type !== 'field');\n    if (selector.length > 0) {\n      allParams.push(selector[0].type);\n    } else {\n      if (select[0] && select[0].params && select[0].params[0]) {\n        allParams.push(select[0].params[0].toString());\n      }\n    }\n  });\n\n  let uniqueParams: string[] = [];\n  allParams.forEach((param) => {\n    uniqueParams.push(incrementName(param, param, uniqueParams, 0));\n  });\n\n  return uniqueParams;\n}\n\nfunction incrementName(name: string, nameIncremenet: string, params: string[], index: number): string {\n  if (params.indexOf(nameIncremenet) > -1) {\n    index++;\n    return incrementName(name, name + '_' + index, params, index);\n  }\n  return nameIncremenet;\n}\n\nfunction rawQuerySelectedFieldsInDataframe(query: string | undefined, dfs: DataFrame[]) {\n  const names: Array<string | undefined> = dfs.map((df: DataFrame) => df.name);\n\n  const colsInRawQuery = names.every((name: string | undefined) => {\n    if (name && query) {\n      // table name and field, i.e. cpu.usage_guest_nice becomes ['cpu', 'usage_guest_nice']\n      const nameParts = name.split('.');\n\n      return nameParts.every((np) => query.toLowerCase().includes(np.toLowerCase()));\n    }\n\n    return false;\n  });\n\n  const queryChecks = ['*', 'SHOW'];\n\n  const otherChecks: boolean = queryChecks.some((qc: string) => {\n    if (query) {\n      return query.toLowerCase().includes(qc.toLowerCase());\n    }\n\n    return false;\n  });\n\n  return colsInRawQuery || otherChecks;\n}\n","import { cloneDeep, extend, groupBy, has, isString, map as _map, omit, pick, reduce } from 'lodash';\nimport { defer, lastValueFrom, merge, mergeMap, Observable, of, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\nimport {\n  AnnotationEvent,\n  ArrayVector,\n  DataFrame,\n  DataQueryError,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  dateMath,\n  FieldType,\n  MetricFindValue,\n  QueryResultMeta,\n  ScopedVars,\n  TIME_SERIES_TIME_FIELD_NAME,\n  TIME_SERIES_VALUE_FIELD_NAME,\n  TimeSeries,\n  toDataFrame,\n} from '@grafana/data';\nimport {\n  BackendDataSourceResponse,\n  DataSourceWithBackend,\n  FetchResponse,\n  frameToMetricFindValue,\n  getBackendSrv,\n} from '@grafana/runtime';\nimport config from 'app/core/config';\nimport { getTemplateSrv, TemplateSrv } from 'app/features/templating/template_srv';\n\nimport { AnnotationEditor } from './components/AnnotationEditor';\nimport { FluxQueryEditor } from './components/FluxQueryEditor';\nimport { BROWSER_MODE_DISABLED_MESSAGE } from './constants';\nimport { getAllPolicies } from './influxQLMetadataQuery';\nimport InfluxQueryModel from './influx_query_model';\nimport InfluxSeries from './influx_series';\nimport { prepareAnnotation } from './migrations';\nimport { buildRawQuery, replaceHardCodedRetentionPolicy } from './queryUtils';\nimport { InfluxQueryBuilder } from './query_builder';\nimport ResponseParser from './response_parser';\nimport { InfluxOptions, InfluxQuery, InfluxVersion } from './types';\n\n// we detect the field type based on the value-array\nfunction getFieldType(values: unknown[]): FieldType {\n  // the values-array may contain a lot of nulls.\n  // we need the first not-null item\n  const firstNotNull = values.find((v) => v !== null);\n\n  if (firstNotNull === undefined) {\n    // we could not find any not-null values\n    return FieldType.number;\n  }\n\n  const valueType = typeof firstNotNull;\n\n  switch (valueType) {\n    case 'string':\n      return FieldType.string;\n    case 'boolean':\n      return FieldType.boolean;\n    case 'number':\n      return FieldType.number;\n    default:\n      // this should never happen, influxql values\n      // can only be numbers, strings and booleans.\n      throw new Error(`InfluxQL: invalid value type ${valueType}`);\n  }\n}\n\n// this conversion function is specialized to work with the timeseries\n// data returned by InfluxDatasource.getTimeSeries()\nfunction timeSeriesToDataFrame(timeSeries: TimeSeries): DataFrame {\n  const times: number[] = [];\n  const values: unknown[] = [];\n\n  // the data we process here is not correctly typed.\n  // the typescript types say every data-point is number|null,\n  // but in fact it can be string or boolean too.\n\n  const points = timeSeries.datapoints;\n  for (const point of points) {\n    values.push(point[0]);\n    times.push(point[1] as number);\n  }\n\n  const timeField = {\n    name: TIME_SERIES_TIME_FIELD_NAME,\n    type: FieldType.time,\n    config: {},\n    values: new ArrayVector<number>(times),\n  };\n\n  const valueField = {\n    name: TIME_SERIES_VALUE_FIELD_NAME,\n    type: getFieldType(values),\n    config: {\n      displayNameFromDS: timeSeries.title,\n    },\n    values: new ArrayVector<unknown>(values),\n    labels: timeSeries.tags,\n  };\n\n  const fields = [timeField, valueField];\n\n  return {\n    name: timeSeries.target,\n    refId: timeSeries.refId,\n    meta: timeSeries.meta,\n    fields,\n    length: values.length,\n  };\n}\n\nexport default class InfluxDatasource extends DataSourceWithBackend<InfluxQuery, InfluxOptions> {\n  type: string;\n  urls: string[];\n  username: string;\n  password: string;\n  name: string;\n  database: any;\n  basicAuth: any;\n  withCredentials: any;\n  access: 'direct' | 'proxy';\n  interval: any;\n  responseParser: ResponseParser;\n  httpMode: string;\n  isFlux: boolean;\n  isProxyAccess: boolean;\n  retentionPolicies: string[];\n\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<InfluxOptions>,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv()\n  ) {\n    super(instanceSettings);\n\n    this.type = 'influxdb';\n    this.urls = (instanceSettings.url ?? '').split(',').map((url) => {\n      return url.trim();\n    });\n\n    this.username = instanceSettings.username ?? '';\n    this.password = instanceSettings.password ?? '';\n    this.name = instanceSettings.name;\n    this.basicAuth = instanceSettings.basicAuth;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.access = instanceSettings.access;\n    const settingsData = instanceSettings.jsonData || ({} as InfluxOptions);\n    this.database = settingsData.dbName ?? instanceSettings.database;\n    this.interval = settingsData.timeInterval;\n    this.httpMode = settingsData.httpMode || 'GET';\n    this.responseParser = new ResponseParser();\n    this.isFlux = settingsData.version === InfluxVersion.Flux;\n    this.isProxyAccess = instanceSettings.access === 'proxy';\n    this.retentionPolicies = [];\n\n    if (this.isFlux) {\n      // When flux, use an annotation processor rather than the `annotationQuery` lifecycle\n      this.annotations = {\n        QueryEditor: FluxQueryEditor,\n      };\n    } else {\n      this.annotations = {\n        QueryEditor: AnnotationEditor,\n        prepareAnnotation,\n      };\n    }\n  }\n\n  async getRetentionPolicies(): Promise<string[]> {\n    if (this.retentionPolicies.length) {\n      return Promise.resolve(this.retentionPolicies);\n    } else {\n      return getAllPolicies(this).catch((err) => {\n        console.error(\n          'Unable to fetch retention policies. Queries will be run without specifying retention policy.',\n          err\n        );\n        return Promise.resolve(this.retentionPolicies);\n      });\n    }\n  }\n\n  query(request: DataQueryRequest<InfluxQuery>): Observable<DataQueryResponse> {\n    if (!this.isProxyAccess) {\n      const error = new Error(BROWSER_MODE_DISABLED_MESSAGE);\n      return throwError(() => error);\n    }\n\n    // When the dashboard first load or on dashboard panel edit mode\n    // PanelQueryRunner runs the queries to have a visualization on the panel.\n    // At that point datasource doesn't have the retention policies fetched.\n    // So hardcoded policy is being sent. Which causes problems.\n    // To overcome this we check/load policies first and then do the query.\n    return defer(() => this.getRetentionPolicies()).pipe(\n      mergeMap((allPolicies) => {\n        this.retentionPolicies = allPolicies;\n        const policyFixedRequests = {\n          ...request,\n          targets: request.targets.map((t) => ({\n            ...t,\n            policy: replaceHardCodedRetentionPolicy(t.policy, this.retentionPolicies),\n          })),\n        };\n        return this._query(policyFixedRequests);\n      })\n    );\n  }\n\n  _query(request: DataQueryRequest<InfluxQuery>): Observable<DataQueryResponse> {\n    // for not-flux queries we call `this.classicQuery`, and that\n    // handles the is-hidden situation.\n    // for the flux-case, we do the filtering here\n    const filteredRequest = {\n      ...request,\n      targets: request.targets.filter((t) => t.hide !== true),\n    };\n\n    if (this.isFlux) {\n      return super.query(filteredRequest);\n    }\n\n    if (this.isMigrationToggleOnAndIsAccessProxy()) {\n      return super.query(filteredRequest).pipe(\n        map((res) => {\n          if (res.error) {\n            throw {\n              message: 'InfluxDB Error: ' + res.error.message,\n              res,\n            };\n          }\n\n          const seriesList: any[] = [];\n\n          const groupedFrames = groupBy(res.data, (x) => x.refId);\n          if (Object.keys(groupedFrames).length > 0) {\n            filteredRequest.targets.forEach((target) => {\n              const filteredFrames = groupedFrames[target.refId] ?? [];\n              switch (target.resultFormat) {\n                case 'logs':\n                case 'table':\n                  seriesList.push(\n                    this.responseParser.getTable(filteredFrames, target, {\n                      preferredVisualisationType: target.resultFormat,\n                    })\n                  );\n                  break;\n                default: {\n                  for (let i = 0; i < filteredFrames.length; i++) {\n                    seriesList.push(filteredFrames[i]);\n                  }\n                  break;\n                }\n              }\n            });\n          }\n\n          return { data: seriesList };\n        })\n      );\n    }\n\n    // Fallback to classic query support\n    return this.classicQuery(request);\n  }\n\n  getQueryDisplayText(query: InfluxQuery) {\n    if (this.isFlux) {\n      return query.query;\n    }\n    return new InfluxQueryModel(query).render(false);\n  }\n\n  /**\n   * Returns false if the query should be skipped\n   */\n  filterQuery(query: InfluxQuery): boolean {\n    if (this.isFlux) {\n      return !!query.query;\n    }\n    return true;\n  }\n\n  applyTemplateVariables(query: InfluxQuery, scopedVars: ScopedVars): Record<string, any> {\n    // We want to interpolate these variables on backend\n    const { __interval, __interval_ms, ...rest } = scopedVars || {};\n\n    if (this.isFlux) {\n      return {\n        ...query,\n        query: this.templateSrv.replace(query.query ?? '', rest), // The raw query text\n      };\n    }\n\n    if (config.featureToggles.influxdbBackendMigration && this.access === 'proxy') {\n      query = this.applyVariables(query, scopedVars, rest);\n    }\n\n    return query;\n  }\n\n  /**\n   * The unchanged pre 7.1 query implementation\n   */\n  classicQuery(options: any): Observable<DataQueryResponse> {\n    // migrate annotations\n    if (options.targets.some((target: InfluxQuery) => target.fromAnnotations)) {\n      const streams: Array<Observable<DataQueryResponse>> = [];\n\n      for (const target of options.targets) {\n        if (target.query) {\n          streams.push(\n            new Observable((subscriber) => {\n              this.annotationEvents(options, target)\n                .then((events) => subscriber.next({ data: [toDataFrame(events)] }))\n                .catch((ex) => subscriber.error(new Error(ex)))\n                .finally(() => subscriber.complete());\n            })\n          );\n        }\n      }\n\n      return merge(...streams);\n    }\n\n    let timeFilter = this.getTimeFilter(options);\n    const scopedVars = options.scopedVars;\n    const targets = cloneDeep(options.targets);\n    const queryTargets: any[] = [];\n\n    let i, y;\n\n    let allQueries = _map(targets, (target) => {\n      if (target.hide) {\n        return '';\n      }\n\n      queryTargets.push(target);\n\n      // backward compatibility\n      scopedVars.interval = scopedVars.__interval;\n\n      return new InfluxQueryModel(target, this.templateSrv, scopedVars).render(true);\n    }).reduce((acc, current) => {\n      if (current !== '') {\n        acc += ';' + current;\n      }\n      return acc;\n    });\n\n    if (allQueries === '') {\n      return of({ data: [] });\n    }\n\n    // add global adhoc filters to timeFilter\n    const adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n    const adhocFiltersFromDashboard = options.targets.flatMap((target: InfluxQuery) => target.adhocFilters ?? []);\n    if (adhocFilters?.length || adhocFiltersFromDashboard?.length) {\n      const ahFilters = adhocFilters?.length ? adhocFilters : adhocFiltersFromDashboard;\n      const tmpQuery = new InfluxQueryModel({ refId: 'A' }, this.templateSrv, scopedVars);\n      timeFilter += ' AND ' + tmpQuery.renderAdhocFilters(ahFilters);\n    }\n    // replace grafana variables\n    scopedVars.timeFilter = { value: timeFilter };\n\n    // replace templated variables\n    allQueries = this.templateSrv.replace(allQueries, scopedVars);\n\n    return this._seriesQuery(allQueries, options).pipe(\n      map((data: any) => {\n        if (!data || !data.results) {\n          return { data: [] };\n        }\n\n        const seriesList = [];\n        for (i = 0; i < data.results.length; i++) {\n          const result = data.results[i];\n          if (!result || !result.series) {\n            continue;\n          }\n\n          const target = queryTargets[i];\n          let alias = target.alias;\n          if (alias) {\n            alias = this.templateSrv.replace(target.alias, options.scopedVars);\n          }\n\n          const meta: QueryResultMeta = {\n            executedQueryString: data.executedQueryString,\n          };\n\n          const influxSeries = new InfluxSeries({\n            refId: target.refId,\n            series: data.results[i].series,\n            alias: alias,\n            meta,\n          });\n\n          switch (target.resultFormat) {\n            case 'logs':\n              meta.preferredVisualisationType = 'logs';\n            case 'table': {\n              seriesList.push(influxSeries.getTable());\n              break;\n            }\n            default: {\n              const timeSeries = influxSeries.getTimeSeries();\n              for (y = 0; y < timeSeries.length; y++) {\n                seriesList.push(timeSeriesToDataFrame(timeSeries[y]));\n              }\n              break;\n            }\n          }\n        }\n\n        return { data: seriesList };\n      })\n    );\n  }\n\n  async annotationEvents(options: DataQueryRequest, annotation: InfluxQuery): Promise<AnnotationEvent[]> {\n    if (this.isFlux) {\n      return Promise.reject({\n        message: 'Flux requires the standard annotation query',\n      });\n    }\n\n    // InfluxQL puts a query string on the annotation\n    if (!annotation.query) {\n      return Promise.reject({\n        message: 'Query missing in annotation definition',\n      });\n    }\n\n    if (config.featureToggles.influxdbBackendMigration && this.access === 'proxy') {\n      // We want to send our query to the backend as a raw query\n      const target: InfluxQuery = {\n        refId: 'metricFindQuery',\n        datasource: this.getRef(),\n        query: this.templateSrv.replace(annotation.query, undefined, 'regex'),\n        rawQuery: true,\n      };\n\n      return lastValueFrom(\n        getBackendSrv()\n          .fetch<BackendDataSourceResponse>({\n            url: '/api/ds/query',\n            method: 'POST',\n            headers: this.getRequestHeaders(),\n            data: {\n              from: options.range.from.valueOf().toString(),\n              to: options.range.to.valueOf().toString(),\n              queries: [target],\n            },\n            requestId: annotation.name,\n          })\n          .pipe(\n            map(\n              async (res: FetchResponse<BackendDataSourceResponse>) =>\n                await this.responseParser.transformAnnotationResponse(annotation, res, target)\n            )\n          )\n      );\n    }\n\n    const timeFilter = this.getTimeFilter({ rangeRaw: options.range.raw, timezone: options.timezone });\n    let query = annotation.query.replace('$timeFilter', timeFilter);\n    query = this.templateSrv.replace(query, undefined, 'regex');\n\n    return lastValueFrom(this._seriesQuery(query, options)).then((data: any) => {\n      if (!data || !data.results || !data.results[0]) {\n        throw { message: 'No results in response from InfluxDB' };\n      }\n      return new InfluxSeries({\n        series: data.results[0].series,\n        annotation: annotation,\n      }).getAnnotations();\n    });\n  }\n\n  targetContainsTemplate(target: any) {\n    // for flux-mode we just take target.query,\n    // for influxql-mode we use InfluxQueryModel to create the text-representation\n    const queryText = this.isFlux ? target.query : buildRawQuery(target);\n\n    return this.templateSrv.containsTemplate(queryText);\n  }\n\n  interpolateVariablesInQueries(queries: InfluxQuery[], scopedVars: ScopedVars): InfluxQuery[] {\n    if (!queries || queries.length === 0) {\n      return [];\n    }\n\n    return queries.map((query) => {\n      if (this.isFlux) {\n        return {\n          ...query,\n          datasource: this.getRef(),\n          query: this.templateSrv.replace(query.query ?? '', scopedVars, 'regex'), // The raw query text\n        };\n      }\n\n      return {\n        ...query,\n        datasource: this.getRef(),\n        ...this.applyVariables(query, scopedVars, scopedVars),\n      };\n    });\n  }\n\n  applyVariables(query: InfluxQuery, scopedVars: ScopedVars, rest: ScopedVars) {\n    const expandedQuery = { ...query };\n    if (query.groupBy) {\n      expandedQuery.groupBy = query.groupBy.map((groupBy) => {\n        return {\n          ...groupBy,\n          params: groupBy.params?.map((param) => {\n            return this.templateSrv.replace(param.toString(), undefined, 'regex');\n          }),\n        };\n      });\n    }\n\n    if (query.select) {\n      expandedQuery.select = query.select.map((selects) => {\n        return selects.map((select: any) => {\n          return {\n            ...select,\n            params: select.params?.map((param: any) => {\n              return this.templateSrv.replace(param.toString(), undefined, 'regex');\n            }),\n          };\n        });\n      });\n    }\n\n    if (query.tags) {\n      expandedQuery.tags = query.tags.map((tag) => {\n        return {\n          ...tag,\n          value: this.templateSrv.replace(tag.value, scopedVars, 'regex'),\n        };\n      });\n    }\n\n    return {\n      ...expandedQuery,\n      adhocFilters: this.templateSrv.getAdhocFilters(this.name) ?? [],\n      query: this.templateSrv.replace(query.query ?? '', rest, 'regex'), // The raw query text\n      alias: this.templateSrv.replace(query.alias ?? '', scopedVars),\n      limit: this.templateSrv.replace(query.limit?.toString() ?? '', scopedVars, 'regex'),\n      measurement: this.templateSrv.replace(query.measurement ?? '', scopedVars, 'regex'),\n      policy: this.templateSrv.replace(query.policy ?? '', scopedVars, 'regex'),\n      slimit: this.templateSrv.replace(query.slimit?.toString() ?? '', scopedVars, 'regex'),\n      tz: this.templateSrv.replace(query.tz ?? '', scopedVars),\n    };\n  }\n\n  async metricFindQuery(query: string, options?: any): Promise<MetricFindValue[]> {\n    if (this.isFlux || this.isMigrationToggleOnAndIsAccessProxy()) {\n      const target: InfluxQuery = {\n        refId: 'metricFindQuery',\n        query,\n        rawQuery: true,\n      };\n      return lastValueFrom(\n        super.query({\n          ...options, // includes 'range'\n          targets: [target],\n        } as DataQueryRequest)\n      ).then((rsp) => {\n        if (rsp.data?.length) {\n          return frameToMetricFindValue(rsp.data[0]);\n        }\n        return [];\n      });\n    }\n\n    const interpolated = new InfluxQueryModel(\n      {\n        refId: 'metricFindQuery',\n        query,\n        rawQuery: true,\n      },\n      this.templateSrv,\n      options.scopedVars\n    ).render(true);\n\n    return lastValueFrom(this._seriesQuery(interpolated, options)).then((resp) => {\n      return this.responseParser.parse(query, resp);\n    });\n  }\n\n  // By implementing getTagKeys and getTagValues we add ad-hoc filters functionality\n  // Used in public/app/features/variables/adhoc/picker/AdHocFilterKey.tsx::fetchFilterKeys\n  getTagKeys(options: any = {}) {\n    const queryBuilder = new InfluxQueryBuilder({ measurement: options.measurement || '', tags: [] }, this.database);\n    const query = queryBuilder.buildExploreQuery('TAG_KEYS');\n    return this.metricFindQuery(query, options);\n  }\n\n  getTagValues(options: any = {}) {\n    const queryBuilder = new InfluxQueryBuilder({ measurement: options.measurement || '', tags: [] }, this.database);\n    const query = queryBuilder.buildExploreQuery('TAG_VALUES', options.key);\n    return this.metricFindQuery(query, options);\n  }\n\n  _seriesQuery(query: string, options?: any) {\n    if (!query) {\n      return of({ results: [] });\n    }\n\n    if (options && options.range) {\n      const timeFilter = this.getTimeFilter({ rangeRaw: options.range, timezone: options.timezone });\n      query = query.replace('$timeFilter', timeFilter);\n    }\n\n    return this._influxRequest(this.httpMode, '/query', { q: query, epoch: 'ms' }, options);\n  }\n\n  serializeParams(params: any) {\n    if (!params) {\n      return '';\n    }\n\n    return reduce(\n      params,\n      (memo, value, key) => {\n        if (value === null || value === undefined) {\n          return memo;\n        }\n        memo.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n        return memo;\n      },\n      [] as string[]\n    ).join('&');\n  }\n\n  _influxRequest(method: string, url: string, data: any, options?: any) {\n    const currentUrl = this.urls.shift()!;\n    this.urls.push(currentUrl);\n\n    const params: any = {};\n\n    if (this.username) {\n      params.u = this.username;\n      params.p = this.password;\n    }\n\n    if (options && options.database) {\n      params.db = options.database;\n    } else if (this.database) {\n      params.db = this.database;\n    }\n\n    if (options?.policy) {\n      params.rp = options.policy;\n    }\n\n    const { q } = data;\n\n    if (method === 'POST' && has(data, 'q')) {\n      // verb is POST and 'q' param is defined\n      extend(params, omit(data, ['q']));\n      data = this.serializeParams(pick(data, ['q']));\n    } else if (method === 'GET' || method === 'POST') {\n      // verb is GET, or POST without 'q' param\n      extend(params, data);\n      data = null;\n    }\n\n    const req: any = {\n      method: method,\n      url: currentUrl + url,\n      params: params,\n      data: data,\n      precision: 'ms',\n      inspect: { type: 'influxdb' },\n      paramSerializer: this.serializeParams,\n    };\n\n    req.headers = req.headers || {};\n    if (this.basicAuth || this.withCredentials) {\n      req.withCredentials = true;\n    }\n    if (this.basicAuth) {\n      req.headers.Authorization = this.basicAuth;\n    }\n\n    if (method === 'POST') {\n      req.headers['Content-type'] = 'application/x-www-form-urlencoded';\n    }\n\n    return getBackendSrv()\n      .fetch(req)\n      .pipe(\n        map((result: any) => {\n          const { data } = result;\n          if (data) {\n            data.executedQueryString = q;\n            if (data.results) {\n              const errors = result.data.results.filter((elem: any) => elem.error);\n\n              if (errors.length > 0) {\n                throw {\n                  message: 'InfluxDB Error: ' + errors[0].error,\n                  data,\n                };\n              }\n            }\n          }\n          return data;\n        }),\n        catchError((err) => {\n          if (err.cancelled) {\n            return of(err);\n          }\n\n          return throwError(this.handleErrors(err));\n        })\n      );\n  }\n\n  handleErrors(err: any) {\n    const error: DataQueryError = {\n      message:\n        (err && err.status) ||\n        (err && err.message) ||\n        'Unknown error during query transaction. Please check JS console logs.',\n    };\n\n    if ((Number.isInteger(err.status) && err.status !== 0) || err.status >= 300) {\n      if (err.data && err.data.error) {\n        error.message = 'InfluxDB Error: ' + err.data.error;\n        error.data = err.data;\n        // @ts-ignore\n        error.config = err.config;\n      } else {\n        error.message = 'Network Error: ' + err.statusText + '(' + err.status + ')';\n        error.data = err.data;\n        // @ts-ignore\n        error.config = err.config;\n      }\n    }\n\n    return error;\n  }\n\n  getTimeFilter(options: any) {\n    const from = this.getInfluxTime(options.rangeRaw.from, false, options.timezone);\n    const until = this.getInfluxTime(options.rangeRaw.to, true, options.timezone);\n\n    return 'time >= ' + from + ' and time <= ' + until;\n  }\n\n  getInfluxTime(date: any, roundUp: any, timezone: any) {\n    if (isString(date)) {\n      if (date === 'now') {\n        return 'now()';\n      }\n\n      const parts = /^now-(\\d+)([dhms])$/.exec(date);\n      if (parts) {\n        const amount = parseInt(parts[1], 10);\n        const unit = parts[2];\n        return 'now() - ' + amount + unit;\n      }\n      date = dateMath.parse(date, roundUp, timezone);\n    }\n\n    return date.valueOf() + 'ms';\n  }\n\n  isMigrationToggleOnAndIsAccessProxy() {\n    return config.featureToggles.influxdbBackendMigration && this.access === 'proxy';\n  }\n}\n","import { DataSourcePlugin } from '@grafana/data';\n\nimport ConfigEditor from './components/ConfigEditor';\nimport InfluxStartPage from './components/InfluxStartPage';\nimport { QueryEditor } from './components/QueryEditor';\nimport VariableQueryEditor from './components/VariableQueryEditor';\nimport InfluxDatasource from './datasource';\n\nexport const plugin = new DataSourcePlugin(InfluxDatasource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor)\n  .setVariableQueryEditor(VariableQueryEditor)\n  .setQueryEditorHelp(InfluxStartPage);\n"],"names":["BROWSER_MODE_DISABLED_MESSAGE","InfluxVersion","Input","SecretFormField","httpModes","versions","ConfigEditor","props","selected","options","onOptionsChange","copy","secureJsonFields","secureJsonData","htmlPrefix","InfoBox","event","Select","httpMode","isDirectAccess","Alert","DataSourceHttpSettings","config","SecureSocksProxySettings","InlineField","val","CHEAT_SHEET_ITEMS","item","InfluxStartPage","index","categories","createPart","part","def","register","groupByTimeFunctions","aliasRenderer","innerExpr","fieldRenderer","param","escapedParam","replaceAggregationAddStrategy","selectParts","partModel","i","morePartsAvailable","addTransformationStrategy","addMathStrategy","partCount","addAliasStrategy","addFieldStrategy","query","parts","InfluxQueryModel","target","templateSrv","scopedVars","g","value","stringParts","typePart","arg","s","modelsIndex","partIndex","type","tag","interpolate","str","operator","escapedKey","policy","measurement","variable","defaultFormatFn","y","selectText","conditions","groupBySection","filters","buildRawQuery","queryCopy","normalizeQuery","addNewSelectPart","model","removeSelectPart","selectModel","changeSelectPart","listIndex","newParams","newSel","addNewGroupByPart","removeGroupByPart","changeGroupByPart","newGroupBy","replaceHardCodedRetentionPolicy","retentionPolicies","samples","UnthemedFluxQueryEditor","sugs","label","editor","theme","styles","getStyles","helpTooltip","CodeEditor","Segment","FluxQueryEditor","QueryEditorModeSwitcher","isRaw","onChange","isModalOpen","setModalOpen","Button","ConfirmModal","RESULT_FORMATS","DEFAULT_RESULT_FORMAT","useShadowedState","outsideVal","currentVal","setCurrentVal","prevOutsideVal","usePrevious","RawInfluxQLEditor","onRunQuery","currentQuery","setCurrentQuery","currentAlias","setCurrentAlias","aliasElementId","useUniqueId","selectElementId","resultFormat","applyDelayedChangesAndRunQuery","TextArea","e","v","renderTagCondition","InfluxQueryBuilder","database","withKey","withMeasurementFilter","keyIdentifier","whereConditions","memo","runExploreQuery","datasource","q","getAllPolicies","getAllMeasurementsForTags","measurementFilter","tags","getTagKeysForMeasurementAndTags","getTagValues","tagKey","getFieldKeysForMeasurement","paddingRightClass","unwrap","className","FormatAsSection","format","inputId","selectClass","formatCreateLabel","SelReload","loadOptions","allowCustomValue","onClose","debouncedLoadOptions","SelSingleLoad","loadState","doLoad","useAsyncFn","Sel","filterByLoadOptions","Inp","initialValue","currentValue","setCurrentValue","defaultButtonClass","Seg","buttonClassName","isOpen","setOpen","InlineLabel","toSelectableValue","t","FromSection","getPolicyOptions","getMeasurementOptions","handlePolicyLoadOptions","handleMeasurementLoadOptions","filter","InputSection","isWide","placeholder","onBlur","OPTIONS","OrderByTimeSection","AddButton","onAdd","renderRemovableNameMenuItems","onClick","MenuGroup","MenuItem","noRightMarginPaddingClass","RemovableName","name","onRemove","WithContextMenu","openMenu","noHorizMarginPaddingClass","getPartClass","Part","params","partClass","onParamChange","par","p","isLast","items","PartListSection","getNewPartOptions","onAddNewPart","onRemovePart","pars","isRegex","text","getOperator","getCondition","isFirst","adjustOperatorIfNeeded","currentOperator","newTagValue","isCurrentOperatorRegex","knownOperators","knownConditions","operatorOptions","condititonOptions","loadConditionOptions","loadOperatorOptions","Tag","getTagKeyOptions","getTagValueOptions","condition","getTagKeySegmentOptions","err","getTagValueSegmentOptions","op","TagsSection","onTagChange","newTag","newTags","onTagRemove","addNewTag","minimalTag","newT","getNewSelectPartOptions","key","children","x","getNewGroupByPartOptions","getTagKeys","tagKeys","getPartParams","dynamicParamOptions","paramValues","defParam","makePartList","queryParts","qp","getTemplateVariableOptions","withTemplateVariableOptions","optionsPromise","templateVariableOptions","tvo","filterTags","allTagKeys","Editor","uniqueId","formatAsId","orderByTimeId","policyData","useAsync","fieldKeys","field","selectLists","dynamicSelectPartOptions","sel","selectedTagKeys","groupByList","dynamicGroupByPartOptions","onAppliedChange","newQuery","handleFromSectionChange","m","handleTagsSectionChange","SegmentSection","keys","tz","limit","slimit","alias","QueryEditor","range","data","VariableQueryEditor","AnnotationEditor","eventQuery","setEventQuery","textColumn","setTextColumn","tagsColumn","setTagsColumn","timeEndColumn","setTimeEndColumn","titleColumn","updateValue","InfluxSeries","output","j","series","columns","seriesName","columnName","datapoints","regex","segments","match","g1","g2","group","segIndex","list","titleCol","timeCol","timeEndCol","tagsCol","textCol","column","table","TableModel","seriesIndex","firstCol","firstTableCol","values","reordered","migrateLegacyAnnotation","json","prepareAnnotation","ResponseParser","results","influxResults","normalizedQuery","isRetentionPolicyQuery","isValueFirst","res","serie","newSetValues","sv","dfs","meta","getTableCols","dfsByLabels","df","labels","getTableRows","annotation","rsp","colContainsTag","colText","selectedParams","getSelectedParams","rawQuerySelectedFieldsInDataframe","time","metrics","allParams","select","selector","uniqueParams","incrementName","nameIncremenet","colsInRawQuery","np","otherChecks","qc","getFieldType","firstNotNull","valueType","timeSeriesToDataFrame","timeSeries","times","points","point","timeField","ArrayVector","valueField","fields","InfluxDatasource","DataSourceWithBackend","instanceSettings","url","settingsData","request","error","throwError","defer","mergeMap","allPolicies","policyFixedRequests","filteredRequest","map","seriesList","groupedFrames","filteredFrames","__interval","__interval_ms","rest","streams","Observable","subscriber","events","ex","merge","timeFilter","targets","queryTargets","allQueries","acc","current","of","adhocFilters","adhocFiltersFromDashboard","ahFilters","tmpQuery","result","influxSeries","lastValueFrom","queryText","queries","expandedQuery","groupBy","selects","interpolated","resp","method","currentUrl","req","errors","elem","catchError","from","until","date","roundUp","timezone","amount","unit"],"sourceRoot":""}