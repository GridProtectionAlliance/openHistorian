{"version":3,"file":"prometheusPlugin.1f506f69e35af58ff9bc.js","mappings":"gJAOO,MAAMA,KAA2B,iBAAiC,GAAkB,C,yUCqBpF,MAAMC,EAA6BC,GAAgB,CACxD,MAAMC,KAAW,eAAY,KAE7B,aAAU,KACRA,KAAS,MAAuBD,CAAG,CAAC,EAE7B,UAAmB,CACxBC,KACE,KAAc,CACZ,cAAgBC,GAAWA,EAAM,mBAAqB,KACxD,CAAC,CACH,CACF,GACC,CAACF,EAAKC,CAAQ,CAAC,CACpB,EAEaE,GAAqBH,GAAgB,CAChD,MAAMC,KAAW,eAAY,EACvBG,EAAoBC,GAAqB,EAE/C,MAAO,IAAMJ,KAAS,MAAeD,EAAKI,EAAkB,IAAI,CAAC,CACnE,EAEaE,GAAqB,IAAM,CACtC,MAAML,KAAW,eAAY,EACvBM,KAAY,eAAaL,GAAUA,EAAM,YAAY,oBAAoB,EACzEM,KAAc,eAAaN,GAAUA,EAAM,YAAY,WAAW,EAExE,sBAAU,IAAM,CACdD,KAAS,MAAgB,CAAC,CAC5B,EAAG,CAACA,CAAQ,CAAC,EAEN,CAAE,UAAAM,EAAW,YAAAC,CAAY,CAClC,EAEaC,GAAqBT,GAAgB,CAChD,MAAMC,KAAW,eAAY,KAE7B,aAAU,IAAM,CACdA,KAAS,MAAeD,CAAG,CAAC,CAC9B,EAAG,CAACC,EAAUD,CAAG,CAAC,CACpB,EAEaU,GAA2B,IAAM,CAC5C,MAAMT,KAAW,eAAY,KAE7B,aAAU,IAAM,CACdA,KAAS,MAAsB,CAAC,CAClC,EAAG,CAACA,CAAQ,CAAC,CACf,EAEaU,EAAmB,IAAM,CACpC,MAAMV,KAAW,eAAY,EACvBG,EAAoBC,GAAqB,EAE/C,OAAQO,GAAiC,CACvCX,KAAS,MAAcW,EAAQR,EAAkB,IAAI,CAAC,CACxD,CACF,EAEaS,GAAsB,IAAM,CACvC,MAAMZ,KAAW,eAAY,EAE7B,MAAO,OAAOa,GAAmCb,KAAS,MAAiBa,CAAU,CAAC,CACxF,EAEaC,GAA4B,IAAM,CAC7C,MAAMd,KAAW,eAAY,EACvB,CAAE,KAAAe,CAAK,KAAI,eAAad,GAAUA,EAAM,YAAY,UAAU,EAEpE,MAAO,IAAM,CACX,YACE,IAAI,MAAsB,CACxB,MAAO,SACP,KAAM,wCAAwCc,kBAC9C,QAAS,SACT,KAAM,YACN,UAAW,IAAMf,KAAS,MAAuB,CAAC,CACpD,CAAC,CACH,CACF,CACF,EAEagB,GAAiBjB,MACrB,eAAaE,MAAU,MAAcA,EAAM,YAAaF,CAAG,CAAC,EAGxDkB,GAA2BlB,GAAgB,CACtD,MAAMc,EAAaG,GAAcjB,CAAG,EACpC,SAAO,OAA8Bc,CAAU,CACjD,EAEaK,GAAqBC,MACzB,eAAalB,MAAU,MAAkBA,EAAM,YAAakB,CAAU,CAAC,EAGnEC,GAAwB,OAC5B,eAAanB,GAAUA,EAAM,kBAAkB,EAG3CoB,GAA2B,CAACC,EAAsBC,IAA0B,CACvF,MAAMV,EAAaG,GAAcM,CAAY,EACvC,CAAE,OAAAX,EAAQ,UAAAa,GAAW,QAAAC,CAAQ,EAAIL,GAAsB,EACvDM,MAAW,eAAazB,IAAUA,GAAM,QAAQ,EAChD0B,GAAaJ,EAAS,cAAcA,KAAUD,IAAiB,uBAAuBA,IAE5F,GAAIE,GAAW,CACb,MAAMI,GAAqB,CACzB,KAAMJ,GACN,SAAU,oBACV,KAAM,sBACR,EAEA,MAAO,CACL,KAAAI,GACA,KAAMA,EACR,CACF,CAEA,OAAIH,GAAW,CAACd,KACP,MAAYe,GAAUC,MAAY,OAAwB,UAAU,CAAC,KAGvE,MAAYD,GAAUC,MAAY,UAAiB,OAAcd,EAAYF,CAAM,EAAGY,GAAU,UAAU,CAAC,CACpH,EAEaM,GAAuB9B,GAAkC,CACpE,MAAMc,EAAaG,GAAcjB,CAAG,EAC9B+B,EAAWjB,EAAW,WAAa,GACnCkB,EAAiB,8BAAmC,uCAAsClB,CAAU,EACpGmB,GAAkB,8BAAmC,wCAAuCnB,CAAU,EAE5G,MAAO,CACL,SAAAiB,EACA,eAAAC,EACA,gBAAAC,EACF,CACF,EAEa5B,GAAuB,OAC3B,cAAW,GAAwB,C,6fClK5C,MAAM6B,EAAoB,CACxB,CACE,MAAO,eACP,WAAY,+BACZ,MACE,mHACJ,EACA,CACE,MAAO,uCACP,WAAY,mGACZ,MAAO,4EACT,EACA,CACE,MAAO,gBACP,WAAY,iFACZ,MAAO,kEACT,EACA,CACE,MAAO,OACP,MACE,4TACJ,CACF,EAuBA,EArBwBC,GACtB,gBAAC,WACC,gBAAC,UAAG,oBAAkB,EACrBD,EAAkB,IAAI,CAACE,EAAMC,IAC5B,gBAAC,OAAI,UAAU,mBAAmB,IAAKA,CAAA,EACrC,gBAAC,OAAI,UAAU,2BAA2BD,EAAK,KAAM,EACpDA,EAAK,WACJ,gBAAC,UACC,KAAK,SACL,UAAU,4BACV,QAAUE,GAAMH,EAAM,eAAe,CAAE,MAAO,IAAK,KAAMC,EAAK,UAAW,CAAC,GAE1E,gBAAC,YAAMA,EAAK,UAAW,CACzB,EACE,KACJ,gBAAC,OAAI,UAAU,2BAA2BA,EAAK,KAAM,CACvD,CACD,CACH,E,uMC3BK,MAAMG,GAAgBJ,GAAiB,CAC5C,KAAM,CAAE,QAAAK,EAAS,gBAAAC,EAAiB,kBAAAC,EAAmB,iBAAAC,EAAkB,oBAAAC,EAAqB,uBAAAC,CAAuB,EACjHV,EAEIW,KAAS,OAAWC,EAAS,EAC7BC,EAAO,CAAE,QAASC,GAAA,GAAe,KAAM,QAAS,EAEtD,OACE,gBAACC,GAAA,EAAI,CAAC,UAAWJ,EAAO,MACtB,gBAACI,GAAA,eAAcV,EAAQ,IAAK,EAC5B,gBAAC,OAAI,UAAWM,EAAO,mBACrB,gBAACK,GAAA,GACC,aAAY,GAAGX,EAAQ,iBACvB,MAAO,gBAA8B,CACnC,OAAQ,CAAC,EACT,WAAYA,EAAQ,WACpB,cAAeA,EAAQ,aACzB,CAAC,EACD,KAAAQ,EACA,UAAWF,EAAO,SACpB,CACF,EACA,gBAACI,GAAA,eACEN,IAAwBJ,EAAQ,KAC/B,gBAACY,EAAA,IACC,KAAK,KACL,aAAW,wBACX,QAAS,IAAM,CACTT,EAEFE,EAAuBL,EAAQ,IAAI,EAEnCC,EAAgBD,CAAO,CAE3B,GACD,gBAED,EAEA,gCACE,gBAAC,OAAI,UAAWM,EAAO,SACpB,wCACCJ,EACI,gEACA,6DAER,EACA,gBAACU,EAAA,GAAM,CAAC,KAAK,KAAK,aAAW,cAAc,KAAK,UAAU,QAAS,IAAMP,EAAuB,IAAI,GAAG,MAEvG,EACA,gBAACO,EAAA,IACC,KAAK,KACL,aAAW,6BACX,QAAS,IAAM,CACbX,EAAgBD,CAAO,CACzB,GACD,aAED,EACCE,GACC,gBAACU,EAAA,IACC,KAAK,KACL,aAAW,0BACX,QAAS,IAAM,CACbX,EAAgBD,EAAS,EAAI,CAC/B,GACD,kBAED,CAEJ,CAEJ,CACF,CAEJ,EAEMO,GAAaM,IACV,CACL,KAAM;AAAA;AAAA;AAAA;AAAA,MAKN,kBAAmB;AAAA;AAAA,MAGnB,SAAU;AAAA,0BACYA,EAAM,OAAO,WAAW;AAAA,iBACjCA,EAAM,QAAQ,CAAC;AAAA,oBACZA,EAAM,QAAQ,CAAC;AAAA,MAE/B,QAAS;AAAA,uBACUA,EAAM,QAAQ,CAAC;AAAA,KAEpC,G,4BC1FK,MAAMC,GAAsBnB,GAAiB,CAClD,KAAM,CAAE,OAAAoB,EAAQ,QAAAC,EAAS,SAAAC,EAAU,WAAAC,EAAY,MAAAC,EAAO,QAAAC,EAAS,IAAAC,CAAI,EAAI1B,EACjE,CAAC2B,EAAUC,CAAW,KAAI,YAAmB,CAAC,CAAC,EAC/C,CAACnB,EAAqBC,CAAsB,KAAI,YAAwB,IAAI,EAE5EC,KAAS,OAAW,EAAS,EAC7BJ,EAAoB,CAAC,CAACgB,EACtBf,KAAmB,WAAQ,IAAM,CACrC,MAAMqB,KAAc,MAA2BL,EAAM,IAAI,EAEnDM,EAAgBD,EAAY,MAAM,WAAW,OAAS,EAC1DE,EAAYF,EAAY,MAAM,OAC9BG,EAAYH,EAAY,MAAM,OAAO,OAAS,EAC9CI,EAAmBJ,EAAY,MAAM,cAAgBA,EAAY,MAAM,cAAc,OAAS,EAAI,GAEpG,OAAOC,GAAiBC,GAAaC,GAAaC,CACpD,EAAG,CAACT,EAAM,IAAI,CAAC,EAETlB,EAAkB,CAACD,EAA2B6B,EAAmB,KAAU,CAC/E,MAAML,KAAc,MAA2BK,EAAmB,GAAKV,EAAM,IAAI,KACjF,OAAkB,6CAA8C,CAC9D,IAAKE,GAAO,GACZ,WAAYF,EAAM,WAClB,gBAAiBnB,EAAQ,KACzB,2BAA4BwB,EAAY,MAAM,WAAW,OACzD,uBAAwBA,EAAY,MAAM,OAAO,OACjD,eAAgBtB,GAAqB2B,CACvC,CAAC,EAEDL,EAAY,MAAM,WAAaxB,EAAQ,WACvCwB,EAAY,MAAM,cAAgBxB,EAAQ,cACtCE,GAAqB2B,EACvBX,EAAW,CACT,GAAGC,EACH,SAAO,OAAiBC,GAAW,CAACD,CAAK,CAAC,EAC1C,KAAM,gBAA8BK,EAAY,KAAK,CACvD,CAAC,EAEDP,EAAS,CACP,GAAGE,EACH,KAAM,gBAA8BK,EAAY,KAAK,CACvD,CAAC,EAEHnB,EAAuB,IAAI,EAC3BW,EAAQ,CACV,EAEA,OACE,gBAACc,GAAA,EAAK,CAAC,aAAW,8BAA8B,OAAAf,EAAgB,MAAM,wBAAwB,UAAWC,CAAA,EACvG,gBAAC,OAAI,UAAWV,EAAO,SAAS,wGAEhC,EACC,OAAO,OAAO,KAAoB,EAAE,IAAKyB,GAEtC,gBAACC,GAAA,GACC,aAAY,kBAAkBD,uBAC9B,IAAKA,EACL,MAAO,MAAG,eAAWA,CAAW,mBAChC,OAAQT,EAAS,SAASS,CAAW,EACrC,YAAa,GACb,SAAU,IACRR,EAAaU,GAEXA,EAAK,SAASF,CAAW,EAAIE,EAAK,OAAQC,GAAMA,IAAMH,CAAW,EAAI,CAAC,GAAGE,EAAMF,CAAW,CAC5F,GAGF,gBAAC,OAAI,UAAWzB,EAAO,gBACpB,qBACmB,EACjB,OAAQN,GAAYA,EAAQ,OAAS+B,CAAW,EAChD,IAAK/B,GACJ,gBAACD,GAAA,CACC,IAAKC,EAAQ,KACb,QAAAA,EACA,kBAAAE,EACA,iBAAAC,EACA,gBAAAF,EACA,oBAAAG,EACA,uBAAAC,CAAA,CACF,CACD,CACL,CACF,CAEH,EACD,gBAACO,EAAA,GAAM,CAAC,aAAW,oCAAoC,QAAQ,YAAY,QAASI,CAAA,EAAS,OAE7F,CACF,CAEJ,EAEM,GAAaH,IACV,CACL,eAAgB;AAAA;AAAA;AAAA;AAAA;AAAA,MAMhB,QAAS;AAAA,uBACUA,EAAM,QAAQ,CAAC;AAAA,KAEpC,G,uEC3HF,MAAMsB,GAAwC,mCAEvC,SAASC,GAAiBjB,EAAkBkB,EAA6BpB,EAAsC,CAEhHE,EAAM,OAAS,IACjBmB,GAAA,MAAUH,GAAuCE,CAAU,EAG7DpB,EAAS,CAAE,GAAGE,EAAO,WAAAkB,CAAW,CAAC,CACnC,CAEA,SAASE,GAAqBC,EAAcC,EAAiC,YAA0C,CAErH,GAAID,GAAQ,MAAQA,IAAS,GAC3B,OAAO,SAGT,MAAME,EAAyBJ,GAAA,MAAUH,EAAqC,EAC9E,OAAQO,EAAO,CACb,KAAK,YACL,KAAK,SACH,OAAOA,EACT,QACE,OAAOD,CACX,CACF,CAKO,SAASE,GACdxB,EACAE,EACAoB,EACW,CACX,IAAIG,EAASzB,EAERA,EAAM,aACTyB,EAAS,CAAE,GAAGzB,EAAO,WAAYoB,GAAqBpB,EAAM,KAAMsB,CAAa,CAAE,GAG/EtB,EAAM,MAAQ,OAChByB,EAAS,CAAE,GAAGA,EAAQ,KAAM,GAAI,aAAc,SAAsB,GAGlEzB,EAAM,OAAS,MAAQA,EAAM,SAAW,OAE1CyB,EAAS,CAAE,GAAGA,EAAQ,MAAO,EAAK,EAG9BvB,IAAQ,eACVuB,EAAO,QAAU,KAKrB,MAAMC,EAAwB1B,EAAM,SAAWA,EAAM,MACrD,OAAIE,IAAQ,sBAA2BwB,IACrCD,EAAS,CAAE,GAAGA,EAAQ,QAAS,GAAO,MAAO,EAAK,GAG7CA,CACT,C,iMCtDA,MAAME,GAAiB,IAWVC,GAAuC,IAE7C,SAASC,GAAa,CAC3B,WAAAC,EACA,MAAA9B,EACA,SAAAF,EACA,aAAAiC,EACA,cAAAC,EACA,qBAAAC,CACF,EAAU,CACR,MAAM9C,KAAS,OAAW,EAAS,EAC7B,CAAC5C,EAAO2F,CAAQ,KAAI,YAGvB,CAAC,CAAC,EAECC,KAAqB,eAAY,CAACC,EAA8BC,IAAwB,CAC5F,MAAMC,EAAQF,EAAO,OAASA,EAAO,MACrC,OAAKE,EAKAA,EAAM,YAISD,EAAY,MAAMV,EAAc,EACjC,OAAO,CAACY,EAAKC,IAAQD,GAAOD,EAAM,YAAY,EAAE,SAASE,EAAI,YAAY,CAAC,EAAG,EAAI,EAJ3F,GALA,EAUX,EAAG,CAAC,CAAC,EAECC,KAAoB,eACxB,CAACL,EAA8BM,IAEzBN,EAAO,UACFA,EAAO,MAId,gBAAC,MACC,YAAaM,EAAK,WAAW,MAAMf,EAAc,EACjD,gBAAiBS,EAAO,OAAS,GACjC,mBAAoBjD,EAAO,UAC7B,EAGJ,CAACA,EAAO,SAAS,CACnB,EAEMwD,EAAsBX,GACnBA,EAAc,IAAKM,GACjB,IAAIA,EAAM,UAAUA,EAAM,QAClC,EAMGM,EAAoC,CACxCC,EACAb,IAEO,8BAA8Ba,KACnCb,EAAgBW,EAAmBX,CAAa,EAAE,KAAK,EAAI,gBAOzDc,EAA2C,CAC/C9C,EACAgC,IACW,CACX,MAAMa,KAAc,OAA+B7C,CAAK,EAExD,OAAO4C,EAAkCC,EAAab,CAAa,CACrE,EAKMe,EAAmB/C,GAEP8B,EAAW,gBAAgBgB,EAAyC9C,EAAOgC,CAAa,CAAC,EAC1F,KAAMgB,IACfA,EAAQ,OAASpB,IACnBoB,EAAQ,OAAO,EAAGA,EAAQ,OAASpB,EAAoC,EAElEoB,EAAQ,IAAKvB,IACX,CACL,MAAOA,EAAO,KACd,MAAOA,EAAO,IAChB,EACD,EACF,EAIGwB,EAA6B,IAAM,QAAQ,QAAQ,CAAC,CAAC,EAErDC,EAAkB,KACrBlD,GAAkB+C,EAAgB/C,CAAK,EACxC8B,EAAW,8BAA8B,CAC3C,EAEA,OACE,gBAAC,mBAAgB,KACf,gBAAC,cAAW,CAAC,MAAM,UACjB,gBAAC,MACC,QAAQ,2BACR,UAAW3C,EAAO,OAClB,MAAOa,EAAM,UAAS,MAASA,EAAM,MAAM,EAAI,OAC/C,YAAa,gBACb,iBAAgB,GAChB,kBAAAyC,EACA,aAAcN,EACd,WAAY,SAAY,CACtB,GAAIF,EACF,OAEFC,EAAS,CAAE,UAAW,EAAK,CAAC,EAC5B,MAAMiB,EAAU,MAAMpB,EAAa,EAC/BoB,EAAQ,OAASvB,IACnBuB,EAAQ,OAAO,EAAGA,EAAQ,OAASvB,EAAoC,EAEzEM,EAAS,CAAE,QAAAiB,EAAS,UAAW,MAAU,CAAC,CAC5C,EACA,YAAalB,EAAuBgB,EAA6BC,EACjE,UAAW3G,EAAM,UACjB,eAAgBA,EAAM,QACtB,SAAU,CAAC,CAAE,MAAAgF,CAAM,IAAM,CACnBA,GACFzB,EAAS,CAAE,GAAGE,EAAO,OAAQuB,CAAM,CAAC,CAExC,EACF,CACF,CACF,CAEJ,CAEA,MAAM,GAAa7B,IAA0B,CAC3C,OAAQ;AAAA;AAAA,IAGR,UAAW;AAAA;AAAA;AAAA;AAAA,aAIAA,EAAM,OAAO,QAAQ;AAAA,wBACVA,EAAM,OAAO,QAAQ;AAAA,GAE7C,GC1JO,SAAS0D,GAAgB,CAC9B,KAAA3E,EACA,UAAA4E,EACA,SAAAvD,EACA,SAAAwD,EACA,gBAAAC,EACA,iBAAAC,EACA,aAAAC,EACA,aAAAC,EACA,kCAAAC,EACA,iBAAAC,CACF,EAAU,CACR,KAAM,CAACrH,EAAO2F,CAAQ,KAAI,YAKvB,CAAC,CAAC,EAEC2B,EAAgB,CAACC,EAAWrF,EAAK,KAC9BsF,GAAU,KAAMC,GAAOA,EAAG,QAAUF,CAAQ,GAAG,aAGlDG,EAA8BxF,GAC9BA,EACEA,EAAK,QAAQ,GAAG,EAAI,EACfA,EAAK,MAAM,GAAG,EAEhB,CAACA,CAAI,EAEP,CAAC,EAGJyF,EAAmB,KACtBlE,GAAkB2D,EAAkC3D,EAAOvB,EAAK,KAAK,EACtEmF,CACF,EAEA,OACE,gBAAC,OAAI,cAAY,qCACf,gBAAC,aAAU,KAET,gBAACO,EAAA,IACC,YAAY,eACZ,aAAYC,EAAA,uCACZ,QAAQ,wCACR,MAAM,OACN,MAAO3F,EAAK,SAAQ,MAASA,EAAK,KAAK,EAAI,KAC3C,iBAAgB,GAChB,WAAY,SAAY,CACtByD,EAAS,CAAE,oBAAqB,EAAK,CAAC,EACtC,MAAMmC,EAAa,MAAMd,EAAgB9E,CAAI,EAC7CyD,EAAS,CAAE,WAAAmC,EAAY,oBAAqB,MAAU,CAAC,CACzD,EACA,UAAW9H,EAAM,qBAAuB,GACxC,QAASA,EAAM,WACf,SAAW+H,GAAW,CAChBA,EAAO,OACTxE,EAAS,CACP,GAAGrB,EACH,GAAIA,EAAK,IAAM4E,EACf,MAAOiB,EAAO,KAEhB,CAA4B,CAEhC,EACA,QAASb,CAAA,CACX,EAGA,gBAACU,EAAA,IACC,aAAYC,EAAA,+CACZ,UAAU,yBACV,SAAO,MAAS3F,EAAK,IAAM4E,CAAS,EACpC,QAASU,GACT,MAAM,OACN,SAAWO,GAAW,CAChBA,EAAO,OAAS,MAClBxE,EAAS,CACP,GAAGrB,EACH,GAAI6F,EAAO,MACX,MAAOT,EAAcS,EAAO,KAAK,EAAI7F,EAAK,MAAQwF,EAA2BxF,GAAM,KAAK,EAAE,CAAC,CAE7F,CAA4B,CAEhC,EACF,EAGA,gBAAC,MACC,YAAY,eACZ,aAAY2F,EAAA,uCACZ,QAAQ,0CACR,MAAM,OACN,MACEP,EAAc,EACVI,EAA2BxF,GAAM,KAAK,EAAE,IAAI,IAAQ,EACpDwF,EAA2BxF,GAAM,KAAK,EAAE,IAAI,IAAQ,EAAE,CAAC,EAE7D,iBAAgB,GAChB,WAAY,SAAY,CACtByD,EAAS,CAAE,qBAAsB,EAAK,CAAC,EACvC,MAAMqC,EAAc,MAAMf,EAAiB/E,CAAI,EAC3C8F,EAAY,OAAS3C,IACvB2C,EAAY,OAAO,EAAGA,EAAY,OAAS3C,EAAoC,EAEjFM,EAAS,CACP,GAAG3F,EACH,YAAAgI,EACA,qBAAsB,MACxB,CAAC,CACH,EACA,eAAgBhI,EAAM,YACtB,QAASsH,EAAc,EACvB,UAAWtH,EAAM,qBACjB,YAAa2H,EACb,SAAWI,GAAW,CACpB,GAAIA,EAAO,MACTxE,EAAS,CACP,GAAGrB,EACH,MAAO6F,EAAO,MACd,GAAI7F,EAAK,IAAM4E,CAEjB,CAA4B,MACvB,CACL,MAAMmB,EAAUF,EACb,IAAKA,GACGA,EAAO,KACf,EACA,KAAK,GAAG,EAEXxE,EAAS,CAAE,GAAGrB,EAAM,MAAO+F,EAAS,GAAI/F,EAAK,IAAM4E,CAAU,CAA4B,CAC3F,CACF,EACA,QAASK,CAAA,CACX,EACA,gBAAC,kBAAe,CAAC,aAAW,SAAS,KAAK,QAAQ,QAAQ,YAAY,QAASJ,CAAA,CAAU,CAC3F,CACF,CAEJ,CAEA,MAAMS,GAAY,CAChB,CAAE,MAAO,IAAK,MAAO,IAAK,aAAc,EAAM,EAC9C,CAAE,MAAO,KAAM,MAAO,KAAM,aAAc,EAAM,EAChD,CAAE,MAAO,IAAK,MAAO,IAAK,aAAc,EAAM,EAC9C,CAAE,MAAO,IAAK,MAAO,IAAK,aAAc,EAAM,EAC9C,CAAE,MAAO,KAAM,MAAO,KAAM,aAAc,EAAK,EAC/C,CAAE,MAAO,KAAM,MAAO,KAAM,aAAc,EAAK,CACjD,ECpKaU,GAAqC,mDAa3C,SAASC,GAAa,CAC3B,cAAA1C,EACA,SAAAlC,EACA,gBAAAyD,EACA,iBAAAC,EACA,oBAAAmB,EACA,kCAAAhB,EACA,iBAAAC,CACF,EAAU,CACR,MAAMP,EAAY,IACZ,CAACuB,EAAOC,CAAQ,KAAI,YAAkD,CAAC,CAAE,GAAIxB,CAAU,CAAC,CAAC,KAE/F,aAAU,IAAM,CACVrB,EAAc,OAAS,EACzB6C,EAAS7C,CAAa,EAEtB6C,EAAS,CAAC,CAAE,GAAIxB,CAAU,CAAC,CAAC,CAEhC,EAAG,CAACrB,CAAa,CAAC,EAElB,MAAM8C,EAAkBC,GAAsD,CAC5EF,EAASE,CAAQ,EAGjB,MAAMC,EAAYD,EAAS,OAAQE,GAAMA,EAAE,OAAS,MAAQA,EAAE,OAAS,IAAI,KACtE,YAAQD,EAAWhD,CAAa,GACnClC,EAASkF,CAAS,CAEtB,EAEME,EAAiBN,EAAM,KAAMnG,GAASA,EAAK,OAASA,EAAK,KAAK,EAEpE,OACE,gBAAC,mBAAgB,KACf,gBAAC,eACC,MAAM,gBACN,MAAOgG,GACP,QAASE,GAAuB,CAACO,CAAA,EAEjC,gBAAC,cACC,MAAAN,EACA,SAAUE,EACV,WAAY,CAACrG,EAAwC0G,EAAc7B,IACjE,gBAACF,GAAA,CACC,iBAAAQ,EACA,KAAAnF,EACA,UAAA4E,EACA,SAAU8B,EACV,SAAA7B,EACA,gBAAAC,EACA,iBAAAC,EACA,aAAcmB,GAAuB,CAAClG,EAAK,MAC3C,aAAckG,GAAuB,CAAClG,EAAK,MAC3C,kCAAAkF,CAAA,CACF,EAEJ,CACF,CACF,CAEJ,C,uFCxEO,SAASyB,GAAa,CAAE,YAAAC,CAAY,EAAU,CACnD,MAAMlG,KAAS,OAAW,EAAS,EAEnC,OACE,gBAAC,QAAK,CAAC,IAAK,GACV,gBAAC,KACC,KAAMkG,EACN,UAAWlG,EAAO,KAClB,MAAM,2EACN,OAAO,SACP,IAAI,uBAEJ,gBAACmG,GAAA,EAAI,CAAC,KAAK,qBAAsB,GAAE,gBACrC,CACF,CAEJ,CAEA,SAAS,GAAU5F,EAAsB,CACvC,MAAO,CACL,QAAM,OAAI,CACR,MAAOA,EAAM,OAAO,KAAK,UACzB,SAAUA,EAAM,WAAW,UAAU,SACrC,SAAU,CACR,MAAOA,EAAM,OAAO,KAAK,IAC3B,CACF,CAAC,CACH,CACF,CCcA,MAAM6F,GAAgC,CACpC,CACE,MAAO,UACP,YACE,6IACJ,EACA,CACE,MAAO,QACP,YAAa,wFACf,EACA,CACE,MAAO,YACP,YACE,qIACJ,EACA,CACE,MAAO,UACP,YACE,gKACJ,CACF,EAEaC,GAAe,CAC1B,OAAQ,yBACR,qBAAsB,8DACtB,KAAM,YACN,UAAW,YACX,kBAAmB,mCACnB,cAAe,mCACjB,EAEaC,GAA2B,GAElCC,GAAK,IAAI,KAAO,CACpB,UAAW,EACX,SAAU,EACV,SAAU,EACV,SAAU,EACV,SAAU,CACZ,CAAC,EAED,SAASC,GAAYC,EAAoB5F,EAAe6F,EAAwD,CAC9G,MAAMC,EAAOJ,GAAG,OAAOE,EAAU5F,CAAK,EACtC8F,GAAQD,EAAOC,CAAI,CACrB,CAEA,MAAMC,MAAuB,aAAeJ,GAAa,GAAG,EAE/CK,GAA2BxH,GAAiB,CACvD,KAAM,CAAE,WAAAsD,EAAY,OAAAlC,EAAQ,QAAAC,EAAS,SAAAC,EAAU,MAAAE,CAAM,EAAIxB,EAEnD,CAACyH,EAAWC,CAAY,KAAI,YAAyC,CAAC,CAAC,EAEvE,CAACtJ,EAAWuJ,CAAY,KAAI,YAAkB,EAAI,EAGlD,CAAChD,EAASiD,CAAU,KAAI,YAAsB,CAAC,CAAC,EAChD,CAACC,EAAaC,CAAc,KAAI,YAAkB,EAAI,EACtD,CAACC,EAAcC,CAAe,KAAI,YAAmB,CAAC,CAAC,EACvD,CAACC,EAAcC,CAAe,KAAI,YAAmB,CAAC,CAAC,EAGvD,CAACC,EAAgBC,CAAiB,KAAI,YAAiBnB,EAAwB,EAC/E,CAACoB,EAASC,CAAU,KAAI,YAAiB,CAAC,EAG1C,CAACC,EAAkBC,CAAmB,KAAI,YAAiB,EAAE,EAC7D,CAACC,EAAwBC,CAAyB,KAAI,YAAmB,CAAC,CAAC,EAC3E,CAACC,EAAwBC,CAAyB,KAAI,YAAmB,CAAC,CAAC,EAC3E,CAACC,EAAgBC,EAAiB,KAAI,YAAkB,EAAK,EAC7D,CAACC,EAAqBC,EAAsB,KAAI,YAAkB,EAAK,EACvE,CAACC,GAAeC,EAAgB,KAAI,YAAyC,CAAC,CAAC,EAC/E,CAACC,GAAcC,EAAe,KAAI,YAAwB,IAAI,EAE9D,CAACC,GAAkBC,EAAmB,KAAI,YAAiB,CAAC,EAC5D,CAACC,GAAqBC,EAAsB,KAAI,YAAiB,EAEjE,CAACC,GAAYC,EAAa,KAAI,YAAkB,EAAK,EACrD,CAACC,GAAiBC,EAAkB,KAAI,YAAkB,EAAK,EAE/DC,MAAwB,eAAY,SAAY,CAEpDlC,EAAa,EAAI,EAIZrE,EAAW,iBAAiB,iBAC/B,MAAMA,EAAW,iBAAiB,oBAAoB,EAMnDA,EAAW,iBAAiB,kBAC/BwE,EAAe,EAAK,EACpBxE,EAAW,iBAAiB,gBAAkB,CAAC,GAKjD,IAAIqB,EACJ,GAAInD,EAAM,OAAO,OAAS,EAAG,CAC3B,MAAMqB,EAAO,iBAA+BrB,EAAM,MAAM,EACxDmD,GAAW,MAAMrB,EAAW,iBAAiB,UAAUT,EAAM,EAAI,GAAG,UAAe,CAAC,CACtF,MACE8B,EAAW,MAAMrB,EAAW,iBAAiB,eAAe,UAAU,GAAM,CAAC,EAG/E,IAAIwG,EAA6B,CAAC,EAC9BC,EAA6B,CAAC,EAC9BC,EAA2BrF,EAAQ,IAAKsF,GAAM,CAChD,MAAMC,KAAO,OAAgBD,EAAG3G,EAAW,iBAAiB,eAAgB,EACtE6G,MAAc,OAAgBF,EAAG3G,EAAW,iBAAiB,eAAgB,EAGnF,OAAAwG,EAAiB,KAAK,GAAGG,KAAKC,KAAQC,IAAa,EACnDJ,EAAiB,KAAKE,CAAC,EAChB,CACL,MAAOA,EACP,KAAAC,EACA,YAAAC,EACF,CACF,CAAC,EAGDvC,EAAWoC,CAAW,EACtBhC,EAAgB8B,CAAgB,EAChC5B,EAAgB6B,CAAgB,EAEhCrC,EACEpE,EAAW,aAAa,EAAE,IAAK8G,IACtB,CACL,MAAOA,EACP,MAAOA,CACT,EACD,CACH,EAEAd,GAAoBU,EAAY,MAAM,EACtCR,GAAuBQ,EAAY,MAAM,EACzCrC,EAAa,EAAK,CACpB,EAAG,CAACnG,EAAO8B,CAAU,CAAC,KAEtB,aAAU,IAAM,CACduG,GAAsB,CACxB,EAAG,CAACA,EAAqB,CAAC,EAE1B,MAAM3I,MAAQ,OAAU,EAClBP,EAAS,GAAUO,GAAOyI,EAAe,EAEzCU,GAAiCtD,GAAU,IAAKxE,IAC7C,CACL,MAAOA,EAAE,MACT,MAAOA,EAAE,MACT,YAAaA,EAAE,WACjB,EACD,EAED,SAAS+H,GAAkB3F,EAAsBwD,EAAwB,CACvE,GAAI,CAACxD,EAAQ,OACX,MAAO,CAAC,EAGV,MAAM4F,EAA6BpC,IAAmB,EAAI,EAAIA,EAExDqC,EAAQ,KAAK,MAAMC,GAAc9F,CAAO,EAAE,OAAS4F,CAAkB,EAAI,EAE/E,MAAO,CAAC,GAAG,MAAMC,CAAK,EAAE,KAAK,CAAC,EAAE,IAAKE,GAAMA,EAAI,CAAC,CAClD,CAEA,SAASC,GAAahG,EAAsB0D,EAAiBF,EAAwB,CACnF,MAAMoC,EAA6BpC,IAAmB,EAAI,EAAIA,EACxDyC,EAAgBvC,IAAY,EAAI,GAAKA,EAAU,GAAKkC,EACpDM,EAAcD,EAAQL,EAC5B,OAAO5F,EAAQ,MAAMiG,EAAOC,CAAG,CACjC,CAEA,SAASC,IAAqB,CAC5B,OAAO7B,GAAc,OAAS,CAChC,CASA,SAASwB,GAAc9F,EAAsBoG,EAAyC,CACpF,IAAIC,EAA+BrG,EAEnC,OAAI4D,IACFyC,EAAkBA,EAAgB,OAAO,CAACf,EAAegB,IACnDxB,GAEK,GACEZ,EACFJ,EAAuB,SAASwC,CAAG,EAEnCtC,EAAuB,SAASsC,CAAG,CAE7C,GAGC9B,IAAgB,CAAC4B,IACnBC,EAAkBA,EAAgB,OAAO,CAACf,EAAegB,IAC7B,CAAC9B,GAAcA,GAAa,YAAY,CAAC,EACpD,SAASc,EAAE,MAAM,CAAC,CAAC,CACnC,GAGChB,GAAc,OAAS,GAAK,CAACQ,KAC/BuB,EAAkBA,EAAgB,OAAO,CAACf,EAAegB,IAAQ,CAE/D,MAAMC,EAAsBjC,GAAc,KAAM1G,IAAMA,GAAE,QAAU0H,EAAE,IAAI,EAGlEkB,GAAY,CAAClB,EAAE,KAErB,OAAOiB,GAAwBC,IAAa,CAACpC,CAC/C,CAAC,GAGCA,IACFiC,EAAkBA,EAAgB,OAAQf,GACjCA,EAAE,OAAS,QAAaA,EAAE,cAAgB,MAClD,GAGIe,CACT,CAKA,SAASI,GAAiBzG,EAAsB,CAC9C,MAAM0G,EAA8BZ,GAAc9F,CAAO,EAAE,KAAK2G,GAAe,GAAMR,GAAmB,CAAC,CAAC,EAE1G,OAAIvB,KAAwB8B,EAAe,QAAUA,EAAe,SAAW,GAC7E7B,GAAuB6B,EAAe,MAAM,EAGRV,GAAaU,EAAgBhD,EAASF,CAAc,CAG5F,CAIA,MAAMoD,MAAyB,WAC7B,IACE,KAAS,MAAOC,GAAuB,CACrC7D,EAAa,EAAI,EACjB,MAAMtD,KAAc,OAA+BmH,CAAU,EAEvDC,EAAejK,EAAM,OAAO,IAAKsC,IAC9B,IAAIA,GAAM,UAAUA,GAAM,QAClC,EAEK4H,EAAS,8BAA8BrH,KAC3C7C,EAAM,OAASiK,EAAa,KAAK,EAAI,gBAKjC9G,EAAU,MAFArB,EAAW,gBAAgBoI,CAAM,EAEnB,KAAMlH,IAC3BA,GAAQ,IAAKvB,KACX,CACL,MAAOA,GAAO,IAChB,EACD,CACF,EAED2E,EAAWjD,CAAO,EAClB6E,GAAuB7E,EAAQ,MAAM,EACrCgD,EAAa,EAAK,CACpB,EAAGrE,EAAW,8BAA8B,CAAC,EAC/C,CAACA,EAAY9B,EAAM,MAAM,CAC3B,EAEA,SAASmK,IAAwB,CAC/B,MAAMC,EAA4C,CAChD,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,CACL,EAEA,OAAAnB,GAAc9F,EAAS,EAAI,EAAE,QAAQ,CAACsF,EAAegB,IAAQ,CAC3D,MAAMY,EAAoB5B,EAAE,MAAM,CAAC,EAAE,YAAY,EAE7C6B,GAAS,SAASD,CAAiB,GAAK,CAACD,EAAcC,CAAiB,IAC1ED,EAAcC,CAAiB,GAAK,EAExC,CAAC,EAGM,OAAO,KAAKD,CAAa,EAAE,IAAKG,GAAmB,CAIxD,MAAMC,EAAkBJ,EAAcG,CAAM,EAAI,EAIhD,SAASE,GAAqB,CAE1B7C,GADED,KAAiB4C,EACH,KAEAA,CAFI,EAItBzD,EAAW,CAAC,CACd,CAEA,MAAM4D,EAAwB/C,KAAiB4C,EAASpL,EAAO,SAAW,GAEpEwL,EAAsBH,EAASrL,EAAO,OAASA,EAAO,KAE5D,OACE,gBAAC,QACC,QAASqL,EAASC,EAAqB,IAAM,CAAC,EAC9C,UAAW,GAAGC,KAAiBC,IAC/B,IAAKJ,EACL,cAAa,UAAYA,CAAA,EAExBA,EAAS,GAEZ,CAEJ,CAAC,CACH,CAEA,MAAMK,GAA2B,IAC3BC,GAA2B7H,GAC3BA,EAAU,EACL,EAGLA,EAAU4H,GACLA,GAGF5H,GAAW,GAGd8H,GAAa,CAAC,CAClB,IAAK,CACH,SAAU,CAAE,MAAAvJ,CAAM,CACpB,CACF,IAEI,gBAAC9B,EAAA,IACC,KAAK,KACL,QAAS,YACT,KAAM,QACN,aAAW,yBACX,cAAasL,GAAQ,UACrB,QAAS,IAAM,CACbjL,EAAS,CAAE,GAAGE,EAAO,OAAQuB,CAAM,CAAC,KACpC,OAAkB,2CAA4C,CAC5D,OAAQA,EACR,aAAc0E,EAAU,OAAS,EACjC,YAAAI,EACA,iBAAkBlD,EAAQ,OAC1B,iBAAA4D,EACA,eAAAM,EACA,cAAAI,GACA,aAAAE,EACF,CAAC,EACD9H,EAAQ,CACV,GACD,iBAED,EAIJ,SAASmL,GAAa7H,EAAsB,CAC1C,MAAM8H,EAAyB9H,EAEzB+H,EAAqC,CACzC,CAAE,GAAI,GAAI,OAAQ,SAAU,KAAMJ,EAAW,EAC7C,CAAE,GAAI,QAAS,OAAQ,MAAO,EAC9B,CAAE,GAAI,OAAQ,OAAQ,MAAO,EAC7B,CAAE,GAAI,cAAe,OAAQ,aAAc,CAC7C,EAEA,OAAO,gBAACK,GAAA,EAAgB,CAAC,UAAWhM,EAAO,MAAO,QAAA+L,EAAkB,KAAMD,EAAW,SAAWG,GAAMA,EAAE,MAAO,CACjH,CAEA,SAASC,GAAoBrL,EAAesL,EAA4B,CAClErD,IAAcjI,IAAU,GAE1BqI,GAAsB,EACbJ,GACT8B,GAAuB/J,CAAK,EAKxBsL,EACFvF,GAAqBQ,EAAcvG,EAAOkH,CAAyB,EAEnEnB,GAAqBU,EAAczG,EAAOoH,CAAyB,CAGzE,CAEA,OACE,gBAACzG,GAAA,GACC,cAAaoK,GAAQ,YACrB,OAAAnL,EACA,MAAM,iBACN,UAAWC,EACX,aAAW,sBACX,UAAWV,EAAO,OAElB,gBAAC,OAAI,UAAWA,EAAO,cACrB,gBAAC,OAAI,aAAW,MAAGA,EAAO,UAAWA,EAAO,cAAc,GACxD,gBAAC,cAAW,CAAC,MAAM,kBACjB,gBAACoM,GAAA,GACC,cAAaR,GAAQ,aACrB,YAAavF,GAAa,OAC1B,MAAOuB,EACP,QAAUpI,GAAM,CACd,MAAM4C,EAAQ5C,EAAE,cAAc,OAAS,GACvCqI,EAAoBzF,CAAK,EAEzB8J,GAAoB9J,EAAO8F,CAAc,EAEzCP,EAAW,CAAC,CACd,EACF,CACF,CACF,EACA,gBAAC,OAAI,UAAW3H,EAAO,WACrB,gBAAC,cAAW,CAAC,MAAM,kBACjB,gBAAC,MACC,cAAa4L,GAAQ,WACrB,QAAQ,YACR,QAASlC,GACT,MAAOpB,GACP,SAAU,CAACpB,GAAe4B,GAC1B,YAAazC,GAAa,KAC1B,SAAWoD,GAAM,CAIflB,GAAiBkB,CAAC,EAClB9B,EAAW,CAAC,CACd,EACF,CACF,CACF,EACA,gBAAC,OAAI,UAAW3H,EAAO,WACrB,gBAAC,cAAW,CAAC,MAAM,6BACjB,gBAACgF,EAAA,IACC,QAAQ,YACR,QAAS8B,EACT,MAAO,GACP,YAAaT,GAAa,UAC1B,SAAWoD,GAAM,CACf,MAAMrH,EAAgBqH,EAAE,OAAS,GACjC9I,EAAS,CAAE,GAAGE,EAAO,OAAQuB,CAAM,CAAC,EACpC1B,EAAQ,CACV,EACF,CACF,CACF,CACF,EAEA,gBAAC,OAAI,UAAWV,EAAO,eACrB,gBAAC,cAAW,CAAC,MAAM,mBACjB,gCACE,gBAAC,OAAI,UAAWA,EAAO,YACrB,gBAACqM,GAAA,GACC,cAAaT,GAAQ,mBACrB,MAAO1D,EACP,SAAUY,IAAc,CAAC5B,EACzB,SAAU,IAAM,CACd,MAAMoF,EAAS,CAACpE,EAChBC,GAAkBmE,CAAM,EAExBJ,GAAoBtE,EAAkB0E,CAAM,EAE5C3E,EAAW,CAAC,CACd,EACF,EACA,gBAAC,KAAE,UAAW3H,EAAO,iBAAkBqG,GAAa,oBAAqB,CAC3E,EACA,gBAAC,OAAI,UAAWrG,EAAO,YACrB,gBAACqM,GAAA,GACC,cAAaT,GAAQ,cACrB,MAAO9C,GACP,SAAU,IAAM,CACd,MAAMwD,EAAS,CAACxD,GAChBC,GAAcuD,CAAM,EAChBA,IAAW,GAEbpD,GAAsB,EAGlBtB,IAAqB,IACvBgD,GAAuBhD,CAAgB,EAK3CD,EAAW,CAAC,CACd,EACF,EACA,gBAAC,KAAE,UAAW3H,EAAO,iBAAkBqG,GAAa,aAAc,CACpE,CACF,CACF,CACF,EACA,gBAAC,MAAG,UAAWrG,EAAO,gBAAgB,SAAO,EAC7C,gBAAC,OAAI,UAAWA,EAAO,aACrB,gBAAC,OAAI,UAAWA,EAAO,kBAAkB,WAC9B4I,GAAoB,OAAKF,GAAiB,kBAAgB,IAClEjL,GAAa,gBAAC8O,GAAA,EAAO,CAAC,UAAWvM,EAAO,eAAgB,CAC3D,EACCa,EAAM,OAAO,OAAS,GACrB,gBAAC,KAAE,UAAWb,EAAO,qBAAqB,6EAE1C,CAEJ,EAEA,gBAAC,OAAI,UAAWA,EAAO,aACrB,gBAAC,WAAKgL,GAAsB,CAAE,EAC9B,gBAAC,OAAI,UAAWhL,EAAO,oBACrB,gBAAC,OAAI,UAAWA,EAAO,YACrB,gBAACqM,GAAA,EAAM,CAAC,MAAOrD,GAAiB,SAAU,IAAMC,GAAoBuD,GAAM,CAACA,CAAC,EAAG,EAC/E,gBAAC,KAAE,UAAWxM,EAAO,iBAAiB,mBAAiB,CACzD,EACA,gBAAC,OAAI,UAAWA,EAAO,YACrB,gBAACqM,GAAA,GACC,MAAOjE,EACP,SAAUU,IAAc,CAAC5B,EACzB,SAAU,IAAM,CACdmB,GAAuB,CAACD,CAAmB,EAC3CT,EAAW,CAAC,CACd,EACF,EACA,gBAAC,KAAE,UAAW3H,EAAO,iBAAkBqG,GAAa,iBAAkB,CACxE,CACF,CACF,EAEA,gBAAC,OAAI,UAAWrG,EAAO,SAAUgE,GAAW6H,GAAapB,GAAiBzG,CAAO,CAAC,CAAE,EAEpF,gBAAC,OAAI,UAAWhE,EAAO,qBACrB,gBAAC,OAAI,UAAWA,EAAO,cACrB,gBAACyM,GAAA,EAAW,CAAC,MAAM,cAAc,WAAY,GAAI,UAAU,iBACzD,gBAACzH,EAAA,IACC,cAAa4G,GAAQ,WACrB,QAASjC,GAAkB3F,EAASwD,CAAc,EAAE,IAAKgF,IAChD,CAAE,MAAOA,EAAG,MAAO,GAAKA,CAAE,EAClC,EACD,MAAO9E,GAAW,EAClB,YAAY,cACZ,MAAO,GACP,SAAWlI,GAAM,CACf,MAAM4C,EAAQ5C,EAAE,OAAS,EACzBmI,EAAWvF,CAAK,CAClB,EACF,CACF,EAEA,gBAACqK,GAAA,GACC,MAAM,qBACN,QAAS,mCAAqChB,GAC9C,WAAY,IAEZ,gBAACW,GAAA,GACC,cAAaR,GAAQ,eACrB,MAAOF,GAAwBlE,CAAc,EAC7C,YAAY,mBACZ,MAAO,GACP,QAAUhI,GAAM,CACd,MAAM4C,EAAQ,CAAC5C,EAAE,cAAc,MAE3B,MAAM4C,CAAK,GAIfqF,EAAkBrF,CAAK,CACzB,EACF,CACF,CACF,EAEA,gBAAC6D,GAAY,CAAC,YAAY,qCAAsC,EAClE,CACF,CAEJ,EAEA,SAAS0E,GAAe+B,EAAoBC,EAA0B,CACpE,OAAO,SAAUC,EAAeC,EAAe,CAE7C,GAAID,EAAE,QAAUC,EAAE,MAChB,MAAO,GAMT,GAAIF,EAAiB,CACnB,GAAIC,EAAE,OAAS,OACb,MAAO,GAET,GAAIC,EAAE,OAAS,OACb,MAAO,EAEX,CAGA,OAAIH,EACKE,EAAE,MAAQC,EAAE,MAAQ,GAAK,EAI3BD,EAAE,MAAQC,EAAE,MAAQ,EAAI,EACjC,CACF,CAEA,MAAM,GAAY,CAACtM,EAAsByI,KAChC,CACL,MAAO;AAAA;AAAA,QAEHzI,EAAM,YAAY,KAAK,IAAI;AAAA;AAAA;AAAA,MAI/B,aAAc;AAAA;AAAA;AAAA;AAAA,aAILA,EAAM,QAAQ,CAAC;AAAA,uBACLA,EAAM,QAAQ,CAAC;AAAA,MAElC,eAAgB;AAAA;AAAA,MAGhB,UAAW;AAAA;AAAA;AAAA,QAGPA,EAAM,YAAY,KAAK,IAAI;AAAA;AAAA;AAAA,MAI/B,cAAe;AAAA,uBACIA,EAAM,QAAQ,CAAC;AAAA,MAElC,WAAY;AAAA;AAAA;AAAA;AAAA,MAKZ,gBAAiB;AAAA,sBACCA,EAAM,QAAQ,CAAC;AAAA;AAAA,eAEtBA,EAAM,OAAO,KAAK;AAAA,MAE7B,eAAgB;AAAA;AAAA,MAGhB,YAAa;AAAA,oBACGA,EAAM,QAAQ,CAAC;AAAA,MAE/B,iBAAkB;AAAA;AAAA,MAGlB,oBAAqB;AAAA;AAAA,eAEVA,EAAM,OAAO,QAAQ;AAAA,MAEhC,YAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAMGA,EAAM,QAAQ,CAAC;AAAA,uBACZA,EAAM,QAAQ,CAAC;AAAA,MAElC,mBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA,oBAKJA,EAAM,QAAQ,CAAC;AAAA,MAE/B,QAAS;AAAA;AAAA;AAAA,MAIT,oBAAqB;AAAA,qBACJA,EAAM,QAAQ,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOlC,aAAc;AAAA;AAAA;AAAA;AAAA;AAAA,MAMd,SAAU;AAAA;AAAA;AAAA,MAIV,OAAQ;AAAA;AAAA,MAGR,KAAM;AAAA;AAAA,MAGN,eAAgB;AAAA;AAAA,MAGhB,MAAO;AAAA,qBACUyI,EAAkB,SAAW;AAAA;AAAA;AAAA;AAAA,KAKhD,GAGW4C,GAAU,CACrB,YAAa,eACb,aAAc,gBACd,mBAAoB,uBACpB,WAAY,cACZ,WAAY,cACZ,UAAW,aACX,WAAY,cACZ,eAAgB,mBAChB,cAAe,iBACjB,EAEMT,GAAW,CACf,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,GACF,E,uCC1zBO,MAAM2B,GAAc,OAAmBzN,GAAU,CACtD,KAAM,CAAE,YAAA0N,EAAa,MAAAxN,EAAO,WAAAoD,EAAY,SAAAhC,EAAU,SAAAqM,EAAU,WAAAC,EAAY,YAAAC,CAAY,EAAI7N,EAClFW,KAAS,OAAW,EAAS,EAEnC,OACE,gBAAC,OAAI,UAAWA,EAAO,MACrB,gBAAC,OAAI,UAAWA,EAAO,QACrB,gBAAC,OAAI,UAAWA,EAAO,MAAM,UAAQ,EACrC,gBAACgF,EAAA,IACC,MAAM,OACN,QAAS,GACT,SAAO,MAAS+H,EAAY,QAAQ,EACpC,SAAW3K,GAAU,CACnBzB,EAASpB,EAAO,CACd,GAAGwN,EACH,SAAU3K,EAAM,KAClB,CAAC,CACH,EACF,EACA,gBAAC,OAAI,UAAWpC,EAAO,MAAM,gBAAc,EAC3C,gBAAC,OAAI,UAAWA,EAAO,oBACrB,gBAACgF,EAAA,IACC,MAAM,OACN,MAAO+H,EAAY,mBAAqB,KACxC,iBAAgB,GAChB,QAAS,CACP,CAAE,MAAO,KAAM,MAAO,IAAK,EAC3B,CAAE,MAAO,WAAY,MAAO,UAAW,CACzC,EACA,SAAWI,GAAQ,CACjBxM,EAASpB,EAAO,CACd,GAAGwN,EACH,kBAAmBI,EAAI,KACzB,CAAC,CACH,EACF,EACA,gBAACC,GAAA,GACC,UAAWpN,EAAO,iBAClB,SAAU,GACV,aAAc+M,EAAY,cAC1B,eAAiBM,GAAQ,CACvB1M,EAASpB,EAAO,CACd,GAAGwN,EACH,cAAeM,EAAI,cAAc,MACjC,kBAAmBN,EAAY,mBAAqB,IACtD,CAAC,CACH,EACF,CACF,EACA,gBAAC,WAAQ,CAAC,KAAM,EAAG,EACnB,gBAACO,GAAA,EAAU,CAAC,KAAK,QAAQ,KAAK,KAAK,QAAS,IAAMN,EAASzN,CAAK,EAAG,CACrE,EACA,gBAAC,OAAI,UAAWS,EAAO,MACrB,gBAAC,aAAU,KACT,gBAACuN,GAAA,CACC,YAAAL,EACA,MAAOH,EAAY,MACnB,WAAApK,EACA,WAAAsK,EACA,SAAWO,GAAW,CACpB7M,EAASpB,EAAO,CAAE,GAAGwN,EAAa,MAAOS,CAAO,CAAC,CACnD,EACF,CACF,CACF,CACF,CAEJ,CAAC,EAEK,GAAY,UAAsBC,IAAS,CAAE,MAAOA,EAAI,KAAM,MAAOA,EAAI,IAAK,EAAE,EAEtFX,GAAY,YAAc,cAE1B,MAAM,GAAavM,IACV,CACL,QAAM,OAAI,CACR,MAAO,OACP,QAAS,OACT,cAAe,SACf,IAAKA,EAAM,QAAQ,EAAG,CACxB,CAAC,EACD,UAAQ,OAAI,CACV,MAAO,SACP,QAASA,EAAM,QAAQ,GAAK,GAAK,GAAK,CAAC,EACvC,IAAKA,EAAM,QAAQ,CAAC,EACpB,QAAS,OACT,WAAY,QACd,CAAC,EACD,QAAM,OAAI,CACR,MAAO,OACP,WAAY,QACd,CAAC,EACD,QAAM,OAAI,CACR,MAAO,OACP,YAAaA,EAAM,QAAQ,CAAC,CAC9B,CAAC,EACD,oBAAkB,OAAI,CACpB,MAAO,mBACP,WAAY,EACd,CAAC,EACD,sBAAoB,OAAI,CACtB,MAAO,qBACP,QAAS,MACX,CAAC,CACH,GC9GK,SAASmN,GAAgBrO,EAAc,CAC5C,KAAM,CAAE,MAAAwB,EAAO,WAAA8B,EAAY,SAAAhC,EAAU,WAAAsM,EAAY,YAAAC,CAAY,EAAI7N,EAC3DsO,EAAgB9M,EAAM,eAAiB,CAAC,EAExC+M,EAAsB,CAACrO,EAAeiO,IAAkC,CAC5E,MAAMK,EAAc,CAAC,GAAGF,CAAa,EACrCE,EAAY,OAAOtO,EAAO,EAAGiO,CAAM,EACnC7M,EAAS,CAAE,GAAGE,EAAO,cAAegN,CAAY,CAAC,CACnD,EAEMb,EAAYzN,GAAkB,CAClC,MAAMsO,EAAc,CAAC,GAAGF,EAAc,MAAM,EAAGpO,CAAK,EAAG,GAAGoO,EAAc,MAAMpO,EAAQ,CAAC,CAAC,EACxFoB,EAAS,CAAE,GAAGE,EAAO,cAAegN,CAAY,CAAC,CACnD,EAEA,OACE,gBAAC,QAAK,CAAC,UAAU,SAAS,IAAK,GAC5BF,EAAc,IAAI,CAACZ,EAAaxN,IAC/B,gBAACuN,GAAA,CACC,IAAKvN,EAAM,SAAS,EACpB,YAAAwN,EACA,MAAAxN,EACA,SAAUqO,EACV,WAAAjL,EACA,SAAAqK,EACA,WAAAC,EACA,YAAAC,CAAA,CACF,CACD,CACH,CAEJ,C,gBCVO,MAAMK,GAAmB,OAAmBlO,GAAU,CAC3D,KAAM,CAAE,WAAAsD,EAAY,MAAA9B,EAAO,SAAAF,EAAU,WAAAsM,EAAY,KAAAa,EAAM,YAAAZ,CAAY,EAAI7N,EACjE,CAAC0O,EAAeC,CAAgB,KAAI,YAA4C,EAChF,CAACC,EAA6BC,CAA8B,KAAI,YAAS,EAAK,EAC9EC,EAAkBC,GAAsC,CAC5DzN,EAAS,CAAE,GAAGE,EAAO,OAAAuN,CAAO,CAAC,CAC/B,EAEMpO,KAAS,OAAW,EAAS,EAI7BqO,KAA8B,eAClC,MAAOC,GAA2E,CAChF,MAAMxH,EAAYnE,EAAW,aAAa,EACpC4L,EAAU,MAAMD,EACtB,MAAO,CACL,GAAGxH,EAAU,IAAK1E,IAAW,CAAE,MAAOA,EAAO,MAAAA,CAAM,EAAE,EACrD,GAAGmM,EAAQ,IAAKtL,IAAY,CAAE,MAAOA,EAAO,MAAO,MAAOA,EAAO,MAAO,MAAOA,EAAO,WAAY,EAAE,CACtG,CACF,EACA,CAACN,CAAU,CACb,EAOMyB,EAAkB,MAAOoK,GAA2E,CAExG,GAAI,CAAC3N,EAAM,OAET,aAAM8B,EAAW,iBAAiB,YAAY,EACvCA,EAAW,iBAAiB,aAAa,EAAE,IAAK8L,IAAO,CAAE,MAAOA,CAAE,EAAE,EAG7E,MAAMC,EAAmB7N,EAAM,OAAO,OAAQiF,GAAMA,IAAM0I,CAAQ,EAClEE,EAAiB,KAAK,CAAE,MAAO,WAAY,GAAI,IAAK,MAAO7N,EAAM,MAAO,CAAC,EACzE,MAAMqB,EAAO,iBAA+BwM,CAAgB,EAE5D,IAAIC,EACJ,OAAIhM,EAAW,yBAAyB,EACtCgM,EAAc,MAAMhM,EAAW,iBAAiB,uBAAuBT,CAAI,EAE3EyM,EAAc,MAAMhM,EAAW,iBAAiB,kBAAkBT,CAAI,EAIjE,OAAO,KAAKyM,CAAW,EAC3B,OAAQC,GAAc,CAACF,EAAiB,KAAMG,GAAWA,EAAO,QAAUD,CAAS,CAAC,EACpF,IAAKH,IAAO,CAAE,MAAOA,CAAE,EAAE,CAC9B,EAEMK,EAAwC,CAC5CpL,EACAkL,IAC+B,CAC/B,MAAMJ,EAAW,CACf,MAAOI,GAAa,WACpB,GAAI,KACJ,SAAO,OAA+B,KAAKlL,GAAa,CAC1D,EACMgL,EAAmB7N,EAAM,OAAO,OAAQiF,GAAMA,EAAE,QAAU0I,EAAS,KAAK,EAC9EE,EAAiB,KAAKF,CAAQ,EAC1B3N,EAAM,QACR6N,EAAiB,KAAK,CAAE,MAAO,WAAY,GAAI,IAAK,MAAO7N,EAAM,MAAO,CAAC,EAE3E,MAAMkO,EAA+BL,EAAiB,IAAKM,IAAiB,CAC1E,GAAGA,EACH,MAAOrM,EAAW,kBAAkBqM,EAAY,KAAK,EACrD,MAAOrM,EAAW,kBAAkBqM,EAAY,KAAK,CACvD,EAAE,EACI9M,EAAO,iBAA+B6M,CAA4B,EACxE,IAAIE,GACJ,OAAItM,EAAW,yBAAyB,EACtCsM,GAAWC,EAAiCV,EAAUtM,CAAI,EAE1D+M,GAAWE,EAA4BX,EAAUtM,CAAI,EAGhD+M,GAAS,KAAMA,IAChBA,EAAS,OAASxM,IACpBwM,EAAS,OAAO,EAAGA,EAAS,OAASxM,EAAoC,EAEpEwM,EACR,CACH,EAOME,EAA8B,CAClCX,EACAY,IAC+B,CAC/B,GAAI,CAACZ,EAAS,MACZ,OAAO,QAAQ,QAAQ,CAAC,CAAC,EAE3B,MAAMlM,EAASK,EAAW,iBAAiB,YAAYyM,CAAgB,EACjEC,EAAuB1M,EAAW,kBAAkB6L,EAAS,KAAK,EACxE,OAAOlM,EAAO,KAAMA,GAAW,CAE7B,MAAMgN,EAAM,IAAI,IAChBhN,OAAAA,EAAO,QAASiN,IAAe,CAC7B,MAAMC,EAAkBD,GAAWF,CAAoB,EACvDC,EAAI,IAAIE,CAAe,CACzB,CAAC,EAEM,MAAM,KAAKF,CAAG,EAAE,IAAKlK,KAAyB,CAAE,MAAOA,GAAa,MAAOA,EAAY,EAAE,CAClG,CAAC,CACH,EAOM8J,EAAmC,CACvCV,EACAY,IAEKZ,EAAS,MAGP7L,EAAW,iBAAiB,2BAA2B6L,EAAS,MAAOY,CAAgB,EAAE,KAAMH,GAC7FA,EAAS,IAAKxF,IAAO,CAC1B,MAAOA,EACP,MAAOA,CACT,EAAE,CACH,EAPQ,QAAQ,QAAQ,CAAC,CAAC,EAevBpF,EAAmB,MAAOmK,GAA2E,CACzG,GAAI,CAACA,EAAS,MACZ,MAAO,CAAC,EAGV,GAAI,CAAC3N,EAAM,OACT,OAAQ,MAAM8B,EAAW,iBAAiB,eAAe6L,EAAS,KAAK,GAAG,IAAK/E,IAAO,CAAE,MAAOA,CAAE,EAAE,EAGrG,MAAMiF,EAAmB7N,EAAM,OAAO,OAAQiF,GAAMA,IAAM0I,CAAQ,EAClEE,EAAiB,KAAK,CAAE,MAAO,WAAY,GAAI,IAAK,MAAO7N,EAAM,MAAO,CAAC,EAEzE,MAAMkO,EAA+BL,EAAiB,IAAKM,IAAiB,CAC1E,GAAGA,EACH,MAAOrM,EAAW,kBAAkBqM,EAAY,KAAK,EACrD,MAAOrM,EAAW,kBAAkBqM,EAAY,KAAK,CACvD,EAAE,EAEI9M,EAAO,iBAA+B6M,CAA4B,EAExE,OAAIpM,EAAW,yBAAyB,EAC/BuM,EAAiCV,EAAUtM,CAAI,EAE/CiN,EAA4BX,EAAUtM,CAAI,CAErD,EAEMU,KAAe,eAAY,IACxByL,EAA4BoB,GAAW9M,EAAY9B,CAAK,CAAC,EAC/D,CAAC8B,EAAY9B,EAAOwN,CAA2B,CAAC,EAE7CnO,EAAO,CAAE,QAASC,GAAA,GAAe,KAAM,QAAS,EAChDuP,EAA8BC,GAAA,8CAE9BC,EAAYjN,EAAW,aAAa,EAE1C,OACE,gCACE,gBAAC,YAAS,KACP+M,GAA+B,CAAC/M,EAAW,gBAC1C,gCACE,gBAACrC,EAAA,IACC,UAAWN,EAAO,OAClB,QAAQ,YACR,KAAK,KACL,QAAS,IAAMkO,EAAgC2B,GAAc,CAACA,CAAS,GACxE,qBAED,EACChP,EAAM,QACL,gBAACiP,GAAA,GACC,KAAM,IAAMjP,EAAM,OAClB,MAAM,UACN,KAAK,QACL,QAAS,IAAM,CACbF,EAAS,CAAE,GAAGE,EAAO,OAAQ,EAAG,CAAC,CACnC,EACA,MAAM,yBACN,UAAWb,EAAO,UACpB,EAEDiO,GACC,gBAACpH,GAAA,CACC,WAAAlE,EACA,OAAQsL,EACR,QAAS,IAAMC,EAA+B,EAAK,EACnD,MAAArN,EACA,SAAAF,CAAA,CACF,CAEJ,EAEA,gBAAC+B,GAAA,CACC,MAAA7B,EACA,SAAAF,EACA,aAAAiC,EACA,WAAAD,EACA,cAAe9B,EAAM,OACrB,qBAAsB8B,EAAW,gBACnC,EAEF,gBAAC4C,GAAA,CACC,iBAAkB5C,EAAW,8BAA8B,EAC3D,kCAAmCmM,EACnC,cAAejO,EAAM,OAErB,SAAUsN,EACV,gBAAkBK,GAAaH,EAA4BjK,EAAgBoK,CAAQ,CAAC,EACpF,iBAAmBA,GAAaH,EAA4BhK,EAAiBmK,CAAQ,CAAC,EACxF,CACF,EACCoB,EAAU,OACT,gBAAC,OAAI,UAAU,mBACb,gBAAC,OAAI,UAAU,sCACZA,EAAU,CAAC,EAAE,MAAO,IACpBA,EAAU,CAAC,EAAE,IACZ,gBAAC,UAAO,KAAK,SAAS,UAAW,gBAC9BA,EAAU,CAAC,EAAE,IAAI,KACpB,EACE,IACN,CACF,EACE,KACH1C,GACC,gBAAC6C,GAAA,GACC,WAAY,EACZ,MAAO,gBAAC1P,GAAA,EAAQ,CAAC,MAAO,GAAGQ,EAAM,UAAU,iBAA+BA,EAAM,MAAM,IAAK,KAAAX,CAAA,CAAY,GAEtG,IACH,EAEF,gBAAC8P,GAAA,EAAmB,KAClB,gBAACC,GAAA,GACC,cAAe,IAEf,WAAAtN,EACA,MAAA9B,EACA,SAAAF,EACA,WAAAsM,EACA,cAAAc,CAAA,CACF,EACA,gBAACmC,GAAA,GACC,WAAAvN,EACA,MAAA9B,EACA,SAAAF,EACA,KAAAmN,EACA,cAAe,IACf,2BAA0B,IAA1B,CACF,CACF,EACCZ,GACC,gBAACiD,GAAA,GACC,KAAAjQ,EACA,MAAAW,EACA,WAAY,EACZ,cAAe,IACf,aAAegE,GAAOmJ,EAAiBnJ,CAAE,EACzC,aAAc,IAAMmJ,EAAiB,MAAS,EAChD,EAEDnN,EAAM,eAAiBA,EAAM,cAAc,OAAS,GACnD,gBAAC6M,GAAA,CACC,MAAA7M,EACA,WAAA8B,EACA,SAAAhC,EACA,WAAAsM,EACA,YAAAC,CAAA,CACF,CAEJ,CAEJ,CAAC,EAQD,eAAeuC,GACb9M,EACA9B,EACyD,CAGpD8B,EAAW,iBAAiB,iBAC/B,MAAMA,EAAW,iBAAiB,oBAAoB,EAInDA,EAAW,iBAAiB,kBAC/BA,EAAW,iBAAiB,gBAAkB,CAAC,GAGjD,IAAIqB,EACJ,GAAInD,EAAM,OAAO,OAAS,EAAG,CAC3B,MAAMqB,EAAO,iBAA+BrB,EAAM,MAAM,EACxDmD,GAAW,MAAMrB,EAAW,iBAAiB,UAAUT,EAAM,EAAI,GAAG,UAAe,CAAC,CACtF,MACE8B,EAAW,MAAMrB,EAAW,iBAAiB,eAAe,UAAU,GAAM,CAAC,EAG/E,OAAOqB,EAAQ,IAAKsF,IAAO,CACzB,MAAOA,EACP,eAAa,OAAkBA,EAAG3G,EAAW,iBAAiB,eAAgB,CAChF,EAAE,CACJ,CAEA4K,GAAiB,YAAc,mBAE/B,MAAM,GAAahN,IACV,CACL,OAAQ;AAAA;AAAA,MAGR,UAAW;AAAA;AAAA;AAAA,KAIb,GC9WK,SAAS6P,GAAa,CAAE,MAAAvP,CAAM,EAAU,CAC7C,OAAKA,EAKH,gBAAC,YAAS,KACR,gBAAC,mBAAgB,KACf,gBAACR,GAAA,EAAQ,CAAC,MAAAQ,EAAc,KAAM,CAAE,QAASV,GAAA,GAAe,KAAM,QAAS,EAAG,CAC5E,CACF,EARO,IAUX,CCQO,SAASkQ,GAA0BhR,EAAc,CACtD,KAAM,CAAE,MAAAwB,EAAO,SAAAF,EAAU,WAAAsM,EAAY,WAAAtK,EAAY,KAAAmL,EAAM,YAAAZ,CAAY,EAAI7N,EACjE,CAACjC,EAAOD,CAAQ,KAAI,cAAWmT,GAAW,QAAS,CAAE,KAAMzP,EAAM,IAAK,CAAC,KAG7E,aAAU,IAAM,CACd1D,EAASoT,GAAY1P,EAAM,IAAI,CAAC,CAClC,EAAG,CAACA,EAAM,IAAI,CAAC,EAEf,MAAM2P,EAAoBC,GAA8B,CACtD,MAAMvO,EAAO,gBAA8BuO,CAAQ,EACnDtT,EAASuT,GAAkB,CAAE,SAAAD,EAAU,KAAAvO,CAAK,CAAC,CAAC,EAC9CvB,EAAS,CAAE,GAAGtB,EAAM,MAAO,KAAA6C,CAAW,CAAC,CACzC,EAEA,OAAK9E,EAAM,SAKT,gCACE,gBAACmQ,GAAA,CACC,MAAOnQ,EAAM,SACb,WAAAuF,EACA,SAAU6N,EACV,WAAAvD,EACA,KAAAa,EACA,YAAAZ,CAAA,CACF,EACC,gBAACkD,GAAY,CAAC,MAAOvP,EAAM,KAAM,CACpC,EAdO,IAgBX,CAEA,MAAMyP,MAAa,OAAY,CAC7B,KAAM,yBACN,aAAc,CAAE,KAAM,EAAG,EACzB,SAAU,CACR,kBAAmB,CAAClT,EAAOuT,IAAuE,CAChGvT,EAAM,KAAOuT,EAAO,QAAQ,KAC5BvT,EAAM,SAAWuT,EAAO,QAAQ,QAClC,EACA,YAAa,CAACvT,EAAOuT,IAAkC,CACrD,GAAI,CAACvT,EAAM,UAAYA,EAAM,OAASuT,EAAO,QAAS,CACpDvT,EAAM,KAAOuT,EAAO,QACpB,MAAMC,KAAc,MAA2BD,EAAO,OAAO,EAC7DvT,EAAM,SAAWwT,EAAY,KAC/B,CACF,CACF,CACF,CAAC,EAEK,CAAE,kBAAAF,GAAmB,YAAAH,EAAY,EAAID,GAAW,Q,8DClE/C,SAASO,GAAkB,CAAE,WAAAlO,EAAY,SAAAhC,EAAU,MAAAE,EAAO,GAAGiQ,CAAK,EAAU,CACjF,KAAM,CAACC,EAAOC,CAAQ,KAAI,YAAwB,IAAI,EAChDhR,KAAS,OAAW,EAAS,EAC7BiR,KAAYC,GAAA,GAAYH,CAAK,KAEnC,aAAU,IAAM,CACTpO,EAAW,mBAGL9B,EAAM,SAAW,CAACA,EAAM,OACjCmQ,EAAS,iDAAiD,EAC1DrQ,EAAS,EAAK,IAEdqQ,EAAS,IAAI,EAETC,GAAa,CAACF,GAChBpQ,EAAS,EAAI,IATfqQ,EAAS,4CAA4C,EACrDrQ,EAAS,EAAK,EAWlB,EAAG,CAACgC,EAAW,mBAAoB9B,EAAM,QAASA,EAAM,MAAOF,EAAUsQ,EAAWF,CAAK,CAAC,EAE1F,MAAMI,KAAmB,MACvB,CACE,CAACnR,EAAO,UAAU,EAAG,CAAC,CAACa,EAAM,QAC/B,EACAb,EAAO,OACT,EAEA,OACE,gBAACoR,GAAA,EAAW,CAAC,MAAM,OAAO,cAAaN,EAAK,aAAa,GACvD,gBAACO,GAAA,EAAO,CAAC,QAASN,GAAS,IACzB,gBAAC,OAAI,UAAW/Q,EAAO,aAAa,YAElC,gBAACsN,GAAA,GACC,KAAK,MACL,QAAWzM,EAAM,SAAW,+BAAiC,8BAC7D,SAAU,CAAC,CAACkQ,EACZ,UAAWI,EACX,QAAS,IAAM,CACbxQ,EAAS,CAACE,EAAM,QAAQ,CAC1B,EACF,CACF,CACF,CACF,CAEJ,CAEA,SAAS,GAAUN,EAAsB,CACvC,MAAO,CACL,QAAS;AAAA,qBACQA,EAAM,QAAQ,CAAC;AAAA,MAEhC,WAAY;AAAA,eACDA,EAAM,OAAO,QAAQ;AAAA,MAEhC,YAAa;AAAA;AAAA;AAAA,KAIf,CACF,CC3DO,MAAM+Q,MAAwB,QAAK,CAAC,CAAE,MAAAzQ,EAAO,WAAA8B,EAAY,SAAAhC,EAAU,WAAAsM,CAAW,IAAkC,CACrH,MAAMsE,EAAeC,GAAoB,EAAI,EACvCC,KAAYP,GAAA,GAAYrQ,CAAK,EAE7B6Q,KAAmB,eACtBC,GAAsB,EACjB,IAAC,YAAQ9Q,EAAO4Q,CAAS,GAAKE,IAAa9Q,EAAM,WACnDF,EAAS,CAAE,GAAGE,EAAO,SAAA8Q,CAAS,CAAC,CAEnC,EACA,CAACF,EAAW5Q,EAAOF,CAAQ,CAC7B,EAEA,SAASiR,EAAkBC,EAAkB,CAC3ClR,EAAS,CAAE,GAAGE,EAAO,SAAAgR,CAAS,CAAC,CACjC,CAEA,SAASC,EAAatS,EAA2C,CAC3DA,EAAE,cAAc,QAAUqB,EAAM,UAClC+Q,EAAkBpS,EAAE,cAAc,KAAK,CAE3C,CAEA,SAASuS,EAAgBvS,EAA0C,CAC7DA,EAAE,MAAQ,SAAWA,EAAE,UACzByN,EAAW,CAEf,CAEA,MAAM+E,EAAoBC,GAA0BpR,EAAOF,CAAQ,EAEnE,OACE,gBAAC,OAAI,aAAW,yBAAyB,UAAU,iBAAiB,cAAa,GAAQ,kBAEvF,gBAAC,OACC,cAAa,GAAQ,eACrB,aAAW,MACT,+BACA;AAAA;AAAA,WAGF,EACA,aAAW,oBAEX,gBAAC,KAAe,CAAC,MAAM,QAAO,YAAU,EAExC,gBAACuR,GAAA,GACC,QAASX,EACT,MAAO1Q,EAAM,OAASA,EAAM,QAAU,OAASA,EAAM,QAAU,UAAY,QAC3E,SAAUmR,CAAA,CACZ,CACF,EAEA,gBAAC,OACC,cAAa,GAAQ,UACrB,aAAW,MACT,UACA;AAAA;AAAA,WAGF,EACA,aAAW,cAEX,gBAAC,MACC,MAAO,EACP,QACE,2JAEH,UAED,EACA,gBAAC,SACC,KAAM,OACN,UAAU,wBACV,YAAa,OACb,SAAUF,EACV,UAAWC,EACX,MAAOlR,EAAM,UAAY,GAC3B,CACF,EAEA,gBAACgQ,GAAiB,CAAC,SAAUa,EAAkB,WAAA/O,EAAwB,MAAA9B,CAAA,CAAc,CACvF,CAEJ,CAAC,EAEDyQ,GAAsB,YAAc,wBAE7B,SAASE,GAAoBW,EAAsB,CACxD,MAAMZ,EAAe,CACnB,CAAE,MAAO,QAAS,MAAO,QAAS,YAAa,gCAAiC,EAChF,CACE,MAAO,UACP,MAAO,UACP,YAAa,iFACf,CACF,EAEA,OAAIY,GACFZ,EAAa,KAAK,CAAE,MAAO,OAAQ,MAAO,OAAQ,YAAa,wCAAyC,CAAC,EAGpGA,CACT,CAEO,SAASU,GAA0BpR,EAAkBF,EAAuC,CACjG,OAAQyR,GAAsB,CAE1BzR,EADEyR,IAAc,UACP,CAAE,GAAGvR,EAAO,QAAS,GAAM,MAAO,GAAO,SAAU,EAAM,EACzDuR,IAAc,QACd,CAAE,GAAGvR,EAAO,QAAS,GAAO,MAAO,EAAK,EAExC,CAAE,GAAGA,EAAO,QAAS,GAAM,MAAO,EAAK,CAJmB,CAMvE,CACF,CAEO,MAAM,GAAU,CACrB,iBAAkB,0BAClB,UAAW,+BACX,eAAgB,oCAClB,E,gBC9HA,MAAMwR,GAAoB,CACxB,CACE,MAAO,OACP,MAAO,UACP,YAAa,6BACf,EACA,CAAE,MAAO,UAAW,MAAO,aAA0B,YAAa,4BAA6B,EAC/F,CAAE,MAAO,SAAU,MAAO,YAAyB,YAAa,2BAA4B,CAC9F,EAKaC,GAAwB,OAAkB,CAAC,CAAE,aAAAC,EAAc,SAAA5R,EAAU,WAAAsM,CAAW,IAAM,CACjG,MAAMuF,EAAOC,GAAcF,CAAY,EACjCG,KAAW,UAAgC,IAAI,EAE/CC,EAAyBtF,GAA2C,CACxE,IAAIuF,EAAYvF,EAAI,cAAc,MAC9BuF,EAAU,SAAW,IACvBA,EAAY,WAGVA,IAAcL,IAChB5R,EAASiS,CAAS,EAClB3F,EAAW,EAEf,EAEM4F,EAAuBzQ,GAA6C,CACxE,OAAQA,EAAM,MAAQ,CACpB,KAAK,UACHzB,EAAS,SAAqB,EAC9B,MACF,KAAK,YACHA,EAAS,gBAAgB,EACzB,WAAW,IAAM,CACf+R,EAAS,SAAS,MAAM,EACxBA,EAAS,SAAS,kBAAkB,EAAG,GAAI,SAAS,CACtD,EAAG,EAAE,EACL,MACF,KAAK,aACH/R,EAAS,EAAE,EACX,KACJ,CACAsM,EAAW,CACb,EAEA,OACE,gBAAC,eACC,MAAM,SACN,QAAQ,sGAER,gCACGuF,IAAS,aACR,gBAACpF,GAAA,GACC,GAAG,eACH,SAAU,GACV,YAAY,OACZ,aAAcmF,EACd,eAAgBI,EAChB,IAAKD,CAAA,CACP,EAEDF,IAAS,aACR,gBAACxN,EAAA,IACC,QAAQ,cACR,aAAc,GACd,YAAY,qBACZ,QAASqN,GACT,MAAO,GACP,SAAUQ,EACV,MAAOR,GAAkB,KAAMvM,GAAMA,EAAE,QAAU0M,CAAI,EACvD,CAEJ,CACF,CAEJ,CAAC,EAEDF,GAAsB,YAAc,wBAEpC,SAASG,GAAcF,EAAkC,CAEvD,OAAIA,IAAiB,UACZ,UAILA,GAAgB,MAAQA,IAAiB,GACpC,aAGF,WACT,CAEO,SAASO,GAAmBP,EAAkC,CACnE,MAAMC,EAAOC,GAAcF,CAAY,EACvC,OAAIC,IAAS,YACJH,GAAkB,KAAMvM,GAAMA,EAAE,QAAU0M,CAAI,GAAG,MAEnDD,CACT,CCtFO,MAAMQ,GAA0B,OAAkB,CAAC,CAAE,MAAAlS,EAAO,IAAAE,EAAK,SAAAJ,EAAU,WAAAsM,CAAW,IAAM,CACjG,MAAM+F,EAAkB5Q,GAA4C,CAClEzB,EAAS,CAAE,GAAGE,EAAO,OAAQuB,EAAM,KAAM,CAAC,EAC1C6K,EAAW,CACb,EAEMgG,EAAgB5F,GAA2C,CAC/D1M,EAAS,CAAE,GAAGE,EAAO,SAAUwM,EAAI,cAAc,KAAM,CAAC,EACxDJ,EAAW,CACb,EAEMiG,EAAmB1B,GAAoBzQ,IAAQ,cAAmBA,IAAQ,gBAAmB,EAC7FiR,EAAoBC,GAA0BpR,EAAOF,CAAQ,EAE7D+Q,EAAoByB,GAA4C,CACpE,MAAMC,EAAYD,EAAM,cAAc,QACtCxS,EAAS,CAAE,GAAGE,EAAO,SAAUuS,CAAU,CAAC,EAC1CnG,EAAW,CACb,EAEMoG,EAA0BjR,GAAmC,CACjEzB,EAAS,CAAE,GAAGE,EAAO,eAAgBuB,EAAM,KAAM,CAAC,EAClD6K,EAAW,CACb,EAEMqG,EAAeC,GAAe,KAAMtQ,GAAWA,EAAO,QAAUpC,EAAM,MAAM,GAAK0S,GAAe,CAAC,EACjGC,EAAiBC,GAAkB5S,CAAK,EACxC6S,EAAiBR,EAAiB,KAAMpN,GAAMA,EAAE,QAAU0N,CAAc,EAAG,MAEjF,OACE,gBAAC,YAAS,KACR,gBAACG,GAAA,GACC,MAAM,UACN,cAAeC,GAAiB/S,EAAOyS,EAAa,MAAQI,EAAgB3S,CAAG,GAE/E,gBAACuR,GAAA,CACC,aAAczR,EAAM,aACpB,SAAW0R,GAAiB5R,EAAS,CAAE,GAAGE,EAAO,aAAA0R,CAAa,CAAC,EAC/D,WAAAtF,CAAA,CACF,EACA,gBAAC,eACC,MAAM,WACN,QACE,gCAAE,uFACqF,IACrF,gBAAC,YAAK,aAAW,EAAO,QAAK,gBAAC,YAAK,kBAAgB,EAAO,aAC5D,GAGF,gBAACG,GAAA,GACC,KAAK,OACL,aAAW,yCACX,YAAa,OACb,SAAU,GACV,eAAgB6F,EAChB,aAAcpS,EAAM,SACtB,CACF,EACA,gBAAC,cAAW,CAAC,MAAM,UACjB,gBAACmE,EAAA,GAAM,CAAC,MAAOsO,EAAc,iBAAgB,GAAC,SAAUN,EAAgB,QAASO,EAAc,CAAE,CACnG,EACA,gBAAC,cAAW,CAAC,MAAM,QACjB,gBAACrB,GAAA,EAAgB,CAAC,QAASgB,EAAkB,MAAOM,EAAgB,SAAUxB,CAAA,CAAmB,CACnG,EACC6B,GAAyBhT,EAAOE,CAAG,GAClC,gBAAC,cAAW,CAAC,MAAM,aACjB,gBAAC,eAAY,CAAC,MAAOF,EAAM,UAAY,GAAO,SAAU6Q,CAAA,CAAkB,CAC5E,EAED7Q,EAAM,gBAAkBA,EAAM,eAAiB,GAC9C,gBAAC,cAAW,CAAC,MAAM,cACjB,gBAACmE,EAAA,IACC,aAAW,oBACX,aAAc,GACd,QAAS8O,GACT,SAAUT,EACV,MAAOS,GAAwB,KAAM7Q,GAAWA,EAAO,QAAUpC,EAAM,cAAc,EACvF,CACF,CAEJ,CACF,CAEJ,CAAC,EAED,SAASgT,GAAyBhT,EAAkBE,EAAe,CACjE,MAAI,EAAAA,IAAQ,sBAA2B,CAACF,EAAM,MAKhD,CAEA,SAAS4S,GAAkB5S,EAAkB,CAC3C,OAAOA,EAAM,OAASA,EAAM,QAAU,OAASA,EAAM,QAAU,UAAY,OAC7E,CAEA,SAAS+S,GAAiB/S,EAAkByS,EAAsBlB,EAAmBrR,EAAyB,CAC5G,MAAM0E,EAAkB,CAAC,EAEzB,OAAAA,EAAM,KAAK,WAAWqN,GAAmBjS,EAAM,YAAY,GAAG,EAC9D4E,EAAM,KAAK,WAAW6N,GAAc,EACpC7N,EAAM,KAAK,SAAS5E,EAAM,UAAY,QAAQ,EAC9C4E,EAAM,KAAK,SAAS2M,GAAW,EAE3ByB,GAAyBhT,EAAOE,CAAG,IACjCF,EAAM,SACR4E,EAAM,KAAK,iBAAiB,EAE5BA,EAAM,KAAK,kBAAkB,GAG1BA,CACT,CAEAsN,GAAwB,YAAc,0B,gBCzH/B,MAAMQ,GAA0D,CACrE,CAAE,MAAO,cAAe,MAAO,aAAc,EAC7C,CAAE,MAAO,QAAS,MAAO,OAAQ,EACjC,CAAE,MAAO,UAAW,MAAO,SAAU,CACvC,EAEaO,MAA0D,QAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAE,EAAI1R,IAAmB,CAClH,MAAAA,EACA,MAAO,KAAOA,CAChB,EAAE,EAIW2R,GAA0B,OAAmB1U,GAAU,CAClE,KAAM,CACJ,SAAAsB,EACA,WAAAsM,EACA,KAAAa,EACA,IAAA/M,EACA,WAAAH,EACA,WAAY,CAAE,cAAAuB,CAAc,EAC5B,QAAArB,CACF,EAAIzB,EAEE,CAAC2U,EAAgBC,CAAiB,KAAI,YAAS,EAAK,EACpD,CAACC,EAAwBC,CAAyB,KAAI,YAAS,EAAK,EACpE,CAACC,EAAaC,CAAc,KAAI,YAAS,EAAK,EAC9C,CAAE,KAAMC,EAAS,QAASC,CAAW,KAAIC,EAAA,IAAQ,IAAyB,EAE1E3T,EAAQwB,GAAqBhD,EAAM,MAAO0B,EAAKoB,CAAa,EAE5DJ,EAAalB,EAAM,WAEnB4T,KAAqB,eACxBC,GAAyC,CAQxC,MAPA,OAAkB,8CAA+C,CAC/D,UAAWA,EACX,eAAgB7T,EAAM,YAAc,GACpC,SAAU,CAACA,EAAM,KACjB,IAAKE,GAAO,EACd,CAAC,EAEG2T,IAAwB,gBACX,MAA2B7T,EAAM,MAAQ,EAAE,EAE/C,OAAO,OAAQ,CACxBoT,EAAkB,EAAI,EACtB,MACF,CAEFnS,GAAiBjB,EAAO6T,EAAqB/T,CAAQ,CACvD,EACA,CAACA,EAAUE,EAAOE,CAAG,CACvB,KAEA,aAAU,IAAM,CACdsT,EAAe,EAAK,CACtB,EAAG,CAACvG,CAAI,CAAC,EAET,MAAM6G,EAAoB9T,GAAqB,IACxC,YAAQA,EAAOxB,EAAM,KAAK,GAC7BgV,EAAe,EAAI,EAErB1T,EAASE,CAAK,CAChB,EAEM+T,EAAuBpV,GAAwC,CACnE+U,EAAW/U,EAAE,cAAc,OAAO,CACpC,EAEA,OACE,gCACE,gBAACqV,GAAA,GACC,OAAQb,EACR,MAAM,gBACN,KAAK,oHACL,YAAY,WACZ,UAAW,IAAM,CACflS,GAAiBjB,EAAO,YAAyBF,CAAQ,EACzDsT,EAAkB,EAAK,CACzB,EACA,UAAW,IAAMA,EAAkB,EAAK,EAC1C,EACA,gBAACzT,GAAA,CACC,OAAQ0T,EACR,QAAS,IAAMC,EAA0B,EAAK,EAC9C,MAAAtT,EACA,QAAAC,EACA,IAAAC,EACA,SAAAJ,EACA,WAAAC,CAAA,CACF,EACA,gBAAC,eAAY,KACX,gBAACN,EAAA,IACC,aAAY2E,EAAA,yCACZ,QAAQ,YACR,KAAK,KACL,QAAS,IAAMkP,EAA2BtE,GAAc,CAACA,CAAS,GACnE,uBAED,EACA,gBAACiF,EAAA,EAAiB,CAAC,MAAM,UAAU,MAAOR,EAAS,SAAUM,CAAA,CAAqB,EAClF,gBAAC,WAAQ,CAAC,KAAM,EAAG,EAClB7T,IAAQ,cAAmBA,IAAQ,mBAClC,gBAACT,EAAA,IACC,QAAS8T,EAAc,UAAY,YACnC,KAAK,KACL,QAASnH,EACT,KAAMa,GAAM,QAAU,cAAuB,gBAAkB,OAC/D,SAAUA,GAAM,QAAU,aAAa,EACxC,aAED,EAEF,gBAACiH,EAAA,EAAqB,CAAC,KAAMhT,EAAY,SAAU0S,CAAA,CAAoB,CACzE,EACA,gBAAC,QAAK,CAAC,EAAG,GAAK,EACf,gBAAC,aAAU,KACR1S,IAAe,UACd,gBAACiT,GAAA,EAAmB,CAAE,GAAG3V,EAAO,MAAAwB,EAAc,YAAayT,EAAS,SAAUK,CAAA,CAAkB,EAEjG5S,IAAe,aACd,gBAACsO,GAAA,CACC,MAAAxP,EACA,WAAYxB,EAAM,WAClB,SAAUsV,EACV,WAAYtV,EAAM,WAClB,KAAAyO,EACA,YAAawG,CAAA,CACf,EAEF,gBAACvB,GAAuB,CAAC,MAAAlS,EAAc,IAAKxB,EAAM,IAAK,SAAAsB,EAAoB,WAAAsM,CAAA,CAAwB,CACrG,CACF,CAEJ,CAAC,EAED8G,GAAwB,YAAc,0B,cC5J/B,SAASkB,GAA2B5V,EAA6B,CACtE,KAAM,CAAE,WAAAsD,EAAY,MAAA9B,EAAO,MAAAqU,EAAO,KAAApH,EAAM,SAAAnN,EAAU,WAAAsM,CAAW,EAAI5N,EAEjE,OACE,gBAAC8V,GAAA,IACC,WAAAxS,EACA,MAAA9B,EACA,WAAAoM,EACA,SAAAtM,EACA,QAAS,CAAC,EACV,MAAAuU,EACA,KAAApH,EACA,cAAa,GAAQ,OACvB,CAEJ,CAEO,MAAM,GAAU,CACrB,OAAQ,4BACV,ECfO,SAASsH,GAAqB/V,EAA6B,CAChE,KAAM,CAAE,IAAA0B,CAAI,EAAI1B,EAEhB,OAAQ0B,EAAK,CACX,KAAK,mBACH,OAAO,gBAACkU,GAA0B,CAAE,GAAG5V,CAAA,CAAO,EAChD,QACE,OAAO,gBAAC0U,GAAuB,CAAE,GAAG1U,CAAA,CAAO,CAC/C,CACF,CAEA,YAAe,QAAK+V,EAAoB,E,uFClB5BC,IAAAA,IACVA,EAAA,OAAS,aACTA,EAAA,MAAQ,kBACRA,EAAA,aAAe,oBACfA,EAAA,KAAO,GAJGA,IAAAA,IAAA,IAOL,MAAMC,GAAuD,CAClE,CAAE,MAAO,aAAmB,MAAO,OAAQ,EAC3C,CAAE,MAAO,kBAAkB,MAAO,aAAc,EAChD,CAAE,MAAO,oBAAyB,MAAO,qBAAsB,CACjE,EAyBO,SAASC,GAAsBC,EAAwC,CAC5E,OAAQA,EAAY,SAAU,CAC5B,IAAK,MACH,MAAO,GACT,IAAK,eACH,MAAO,CAAC,EAAEA,EAAY,YAAcA,EAAY,UAAYA,EAAY,UAAYA,EAAY,aACpG,CACF,CCxCA,MAAMC,GAA6B,OAAO,yBAAyB,EAEnE,SAASC,IAA+B,CACtC,OAAO/F,GAAA,eAAsB0F,GAAW,MAC1C,CAEA,SAASM,GAAUpH,EAA6E,CAC9F,GAAIA,EAAQ,iBAAiB,kBAE3B,OAAOkH,GACF,CACL,MAAMG,EAASrH,EAAQ,gBAAgB,kBACvC,OAAO,OAAOqH,GAAW,UAAYA,EAAO,OAAS,EAAIA,EAAS,MACpE,CACF,CAEO,SAASC,GAAetH,EAAgD,CAC7E,MAAO,CAAC,CAACA,EAAQ,SAAS,gBAC5B,CAEO,SAASuH,IAA0C,CACxD,OAAInG,GAAA,+BACK,CAAE,SAAU,KAAM,EAElB,CAAE,SAAU,eAAgB,WAAY+F,GAAqB,CAAE,CAE1E,CAEO,SAASK,GAAexH,EAAyD,CACtF,MAAMiH,EAAcjH,EAAQ,SAAS,iBAIrC,GAAI,CAACiH,EACH,OAAOM,GAAsB,EAG/B,OAAQN,EAAY,SAAU,CAC5B,IAAK,MACH,OAAI7F,GAAA,+BACK,CACL,SAAU,KACZ,EAIO,CACL,SAAU,eACV,WAAY+F,GAAqB,CACnC,EAEJ,IAAK,eACH,MAAO,CACL,SAAU,eACV,WAAYF,EAAY,YAAcE,GAAqB,EAC3D,SAAUF,EAAY,SACtB,SAAUA,EAAY,SACtB,aAAcG,GAAUpH,CAAO,CACjC,CACJ,CACF,CAEO,SAASyH,GACdzH,EACAiH,EAC8B,CAC9B,OAAQA,EAAY,SAAU,CAC5B,IAAK,MACH,GAAI,CAAC7F,GAAA,+BACH,MAAM,IAAI,MAAM,mEAAmE,EAGrF,OAAApB,EAAU,CACR,GAAGA,EACH,SAAU,CACR,GAAGA,EAAQ,SACX,iBAAkB,CAChB,SAAU,KACZ,CACF,CACF,EAEOA,EAET,IAAK,eACH,OAAAA,EAAU,CACR,GAAGA,EACH,SAAU,CACR,GAAGA,EAAQ,SACX,iBAAkB,CAChB,SAAU,eACV,WAAYiH,EAAY,YAAcE,GAAqB,EAC3D,SAAUF,EAAY,SACtB,SAAUA,EAAY,QACxB,CACF,EACA,eAAgB,CACd,GAAGjH,EAAQ,eACX,kBACE,OAAOiH,EAAY,cAAiB,UAAYA,EAAY,aAAa,OAAS,EAC9EA,EAAY,aACZ,MACR,EACA,iBAAkB,CAChB,GAAGjH,EAAQ,iBACX,kBAAmB,OAAOiH,EAAY,cAAiB,QACzD,CACF,EAEOjH,CACX,CACF,CAEO,SAAS0H,GAAsB1H,EAA8E,CAClH,MAAO,CACL,SAAU,CACR,GAAGA,EAAQ,SACX,iBAAkBuH,GAAsB,CAC1C,CACF,CACF,CAEO,SAASI,GAAiB3H,EAA8E,CAC7G,MAAO,CACL,SAAU,CACR,GAAGA,EAAQ,SACX,UAAW,OACX,iBAAkB,OAClB,wBAAyB,MAC3B,CACF,CACF,C,4BCtHA,MAAM4H,GAAyD,CAC7D,CACE,MAAO,MACP,MAAO,kBACT,EACA,CACE,MAAO,eACP,MAAO,kBACT,CACF,EAEaC,GAAwB/W,GAAiB,CACpD,KAAM,CAAE,YAAAmW,EAAa,kBAAAa,EAAmB,oBAAAC,EAAqB,iBAAAC,EAAkB,SAAAC,CAAS,EAAInX,EACtFoX,EAAoBlB,GAAsBC,CAAW,EAErD,CAACkB,EAAeC,CAAgB,KAAI,YAAyC,CAAC,CAAC,EAC/E,CAACC,EAA0BC,CAAmB,KAAI,cAAY1J,GAAQA,EAAM,EAAG,CAAC,KACtF,aAAU,IAAM,CACd,GAAI,CAACoJ,GAAoB,CAACE,EAAmB,CAC3CK,EAAoB,CAAC,CAAC,EACtB,MACF,CACA,IAAIC,EAAW,GACf,OAAAR,EAAiB,EAAE,KAAMjU,GAAW,CAC7ByU,GACHD,EAAoBxU,EAAQsU,CAAwB,CAExD,CAAC,EACM,IAAM,CACXG,EAAW,EACb,CAGF,EAAG,CAACH,CAAwB,CAAC,EAE7B,MAAME,EAAsB,CAACE,EAA0CC,EAAa,KAAU,CAC5FN,EAAiBK,CAAQ,EACrBT,IACEU,GAAc,CAACzB,EAAY,uBAAyBwB,EAAS,OAAS,EAExEE,EAAqBF,EAAS,CAAC,CAAC,EACvBxB,EAAY,wBACPwB,EAAS,KAAMG,GAAQA,EAAI,QAAU3B,EAAY,qBAAqB,GAGlF0B,EAAqB,MAAS,GAItC,EAEME,EAAoBC,GAA6C,CACrE,GAAIf,EAAqB,CACvBK,EAAiB,CAAC,CAAC,EACnB,MAAMW,EAA4B,CAChC,GAAG9B,EACH,SAAU6B,EAAS,OAAS,MAC5B,sBAAuB,MACzB,EACAf,EAAoBgB,CAAO,CAC7B,CACF,EAEMC,EAAsBF,GAAsC,CAChE,GAAIf,GAAuBd,EAAY,WAAa,eAAgB,CAClEmB,EAAiB,CAAC,CAAC,EACnB,MAAMW,EAA4B,CAChC,GAAG9B,EACH,WAAY6B,EAAS,MACrB,sBAAuB,MACzB,EACAf,EAAoBgB,CAAO,CAC7B,CACF,EAEME,EAAoBrE,GAAyC,CACjE,GAAImD,GAAuBd,EAAY,WAAa,eAAgB,CAClEmB,EAAiB,CAAC,CAAC,EACnB,MAAMW,EAA4B,CAChC,GAAG9B,EACH,SAAUrC,EAAM,OAAO,MACvB,sBAAuB,MACzB,EACAmD,EAAoBgB,CAAO,CAC7B,CACF,EAEMG,EAAoBtE,GAAyC,CACjE,GAAImD,GAAuBd,EAAY,WAAa,eAAgB,CAClEmB,EAAiB,CAAC,CAAC,EACnB,MAAMW,EAA4B,CAChC,GAAG9B,EACH,SAAUrC,EAAM,OAAO,MACvB,sBAAuB,MACzB,EACAmD,EAAoBgB,CAAO,CAC7B,CACF,EAEMI,EAAwBvE,GAAyC,CACrE,GAAImD,GAAuBd,EAAY,WAAa,eAAgB,CAClEmB,EAAiB,CAAC,CAAC,EACnB,MAAMW,EAA4B,CAChC,GAAG9B,EACH,aAAcrC,EAAM,OAAO,MAC3B,sBAAuB,MACzB,EACAmD,EAAoBgB,CAAO,CAC7B,CACF,EAEMK,EAAsB,IAAM,CAChC,GAAIrB,GAAuBd,EAAY,WAAa,eAAgB,CAClEmB,EAAiB,CAAC,CAAC,EACnB,MAAMW,EAA4B,CAChC,GAAG9B,EACH,aAAc,GACd,sBAAuB,MACzB,EACAc,EAAoBgB,CAAO,CAC7B,CACF,EAEMJ,EAAwBG,GAAkD,CAC9E,GAAIf,EAAqB,CACvB,MAAMgB,EAA4B,CAChC,GAAG9B,EACH,sBAAuB6B,GAAU,KACnC,EACAf,EAAoBgB,CAAO,CAC7B,CACF,EAEA,OACE,gBAAC,OAAI,UAAU,iBACZjY,EAAM,wBACL,gBAAC,OAAI,UAAU,kBACb,gBAAC,OAAI,UAAU,WACb,gBAAC,KAAe,CAAC,UAAU,WAAW,QAAQ,uDAAsD,gBAEpG,EACA,gBAAC,OACC,UAAU,WACV,MAAO8W,GAAgB,KAAMgB,GAAQA,EAAI,QAAU3B,EAAY,QAAQ,EACvE,QAASW,GACT,SAAUiB,EACV,WAAYZ,CAAA,CACd,CACF,CACF,EAEDhB,EAAY,WAAa,gBACxB,gCACGa,GACC,gBAAC,OAAI,UAAU,kBACb,gBAAC,OAAI,UAAU,WACb,gBAAC,KAAe,CAAC,UAAU,WAAW,QAAQ,yBAAwB,aAEtE,EACA,gBAAC,OACC,UAAU,WACV,MAAOA,EAAkB,KAAMc,GAAQA,EAAI,QAAU3B,EAAY,UAAU,EAC3E,QAASa,EACT,SAAUkB,EACV,WAAYf,CAAA,CACd,CACF,CACF,EAEF,gBAAC,OAAI,UAAU,kBACb,gBAAC,OAAI,UAAU,WACb,gBAAC,KAAe,CAAC,UAAU,YAAW,uBAAqB,EAC3D,gBAAC,OAAI,UAAU,YACb,gBAAC,MACC,UAAU,WACV,YAAY,uCACZ,MAAOhB,EAAY,UAAY,GAC/B,SAAUgC,EACV,SAAAhB,CAAA,CACF,CACF,CACF,CACF,EACA,gBAAC,OAAI,UAAU,kBACb,gBAAC,OAAI,UAAU,WACb,gBAAC,KAAe,CAAC,UAAU,YAAW,yBAAuB,EAC7D,gBAAC,OAAI,UAAU,YACb,gBAAC,MACC,UAAU,WACV,YAAY,uCACZ,MAAOhB,EAAY,UAAY,GAC/B,SAAUiC,EACV,SAAAjB,CAAA,CACF,CACF,CACF,CACF,EACC,OAAOhB,EAAY,cAAiB,SACnC,gBAAC,OAAI,UAAU,kBACb,gBAAC,OAAI,UAAU,WACb,gBAAC,KAAe,CAAC,QAAQ,sBAAsB,UAAU,YAAW,eAEpE,EACA,gBAAC,KAAK,CAAC,GAAG,sBAAsB,UAAU,WAAW,YAAY,aAAa,SAAQ,GAAC,CACzF,EACC,CAACgB,GACA,gBAAC,OAAI,UAAU,WACb,gBAAC,OAAI,UAAU,+BACb,gBAAClW,EAAA,GAAM,CAAC,QAAQ,YAAY,KAAK,SAAS,QAASqX,CAAA,EAAqB,OAExE,CACF,CACF,CAEJ,EAEA,gBAAC,OAAI,UAAU,kBACb,gBAAC,OAAI,UAAU,WACb,gBAAC,KAAe,CAAC,UAAU,YAAW,eAAa,EACnD,gBAAC,OAAI,UAAU,YACb,gBAAC,MACC,UAAU,WACV,YAAY,uCACZ,MAAOnC,EAAY,cAAgB,GACnC,SAAUkC,EACV,SAAAlB,CAAA,CACF,CACF,CACF,CACF,CAEJ,EAEDD,GACC,gCACE,gBAAC,OAAI,UAAU,kBACb,gBAAC,OAAI,UAAU,WACb,gBAAC,KAAe,CAAC,UAAU,YAAW,sBAAoB,EAC1D,gBAAC,OAAI,UAAU,YACb,gBAAC,OACC,MACEf,EAAY,sBACRkB,EAAc,KAAMS,GAAQA,EAAI,QAAU3B,EAAY,qBAAqB,EAC3E,OAEN,QAASkB,EACT,SAAUQ,EACV,WAAYV,CAAA,CACd,CACF,CACF,CACF,EACA,gBAAC,OAAI,UAAU,kBACb,gBAAC,OAAI,UAAU,WACb,gBAAC,OAAI,UAAU,+BACb,gBAAClW,EAAA,IACC,QAAQ,YACR,KAAK,KACL,KAAK,SACL,QAASuW,EACT,SAAU,CAACJ,CAAA,EACZ,oBAED,CACF,CACF,CACF,CACF,CAEJ,CAEJ,EAEA,GAAe,KCzRFmB,GAAqBvY,GAAiC,CACjE,KAAM,CAAE,iBAAAwY,EAAkB,SAAAlX,CAAS,EAAItB,EAEjC,CAACyY,CAAuB,KAAI,YAChCnI,GAAA,kDAAyD,CAAC,CAACkI,EAAiB,SAAS,uBACvF,EACM,CAACE,EAAyBC,CAA0B,KAAI,YAC5D,CAAC,CAACH,EAAiB,SAAS,uBAC9B,EAEMrC,KAAc,WAAQ,IAAMO,GAAe8B,CAAgB,EAAG,CAACA,CAAgB,CAAC,EAEhFvB,EAAuBd,GAAwC,CACnE7U,EAASqV,GAAkB6B,EAAkBrC,CAAW,CAAC,CAC3D,EAEMyC,EAA4BC,GAA0C,CAC1EF,EAA2BE,EAAG,cAAc,OAAO,EAC9CA,EAAG,cAAc,SACpBvX,EAAS,CACP,GAAGkX,EACH,SAAU,CAAE,GAAGA,EAAiB,SAAU,wBAAyB,MAAU,CAC/E,CAAC,CAEL,EAEMM,EAAsBD,GAA0C,CAChEH,GACFpX,EAAS,CACP,GAAGkX,EACH,SAAU,CAAE,GAAGA,EAAiB,SAAU,wBAAyBK,EAAG,cAAc,KAAM,CAC5F,CAAC,CAEL,EAEA,OACE,gCACE,gBAAC,UAAG,sBAAoB,EACxB,gBAAC9B,GAAA,CACC,uBAAwBzG,GAAA,+BACxB,YAAA6F,EACA,kBAAmBF,GACnB,oBAAAgB,EACA,SAAUuB,EAAiB,SAC7B,EACCC,GACC,gCACE,gBAAC,UAAG,qBAAmB,EACvB,gBAAC,OAAI,UAAU,iBACb,gBAACM,GAAA,EAAc,KACb,gBAAC3L,GAAA,EAAW,CAAC,WAAY,GAAI,MAAM,wBAAwB,SAAUoL,EAAiB,UACpF,gBAAC,KAAY,CAAC,MAAOE,EAAyB,SAAUE,CAAA,CAA0B,CACpF,CACF,EACCF,GACC,gBAACK,GAAA,EAAc,KACb,gBAAC3L,GAAA,EAAW,CAAC,WAAY,GAAI,MAAM,cAAc,SAAUoL,EAAiB,UAC1E,gBAACzL,GAAA,GACC,UAAU,WACV,MAAOyL,EAAiB,SAAS,yBAA2B,GAC5D,SAAUM,CAAA,CACZ,CACF,CACF,CAEJ,CACF,CAEJ,CAEJ,EAEA,GAAe,K,6GClEA,SAASE,GAAgB,CAAE,MAAAjW,EAAO,SAAAzB,EAAU,SAAAwD,EAAU,SAAAqS,CAAS,EAAU,CACtF,KAAM,CAAC8B,EAAgBC,CAAiB,KAAI,YAAS,QAAQnW,EAAM,aAAa,CAAC,EAEjF,OACE,gBAAC,OAAI,UAAU,iBACb,gBAACqK,GAAA,EAAW,CAAC,MAAM,gBAAgB,WAAY,GAAI,SAAA+J,CAAA,EACjD,gCACE,gBAAC,MACC,MAAO8B,EACP,aAAYrT,EAAA,kEACZ,SAAWiT,GAAOK,EAAkBL,EAAG,cAAc,OAAO,EAC9D,EACC,CAAC1B,GACA,gBAAClW,EAAA,IACC,QAAQ,cACR,MAAM,cACN,KAAK,QACL,QAAU6S,GAAU,CAClBA,EAAM,eAAe,EACrBhP,EAAS,CACX,EACA,UAAW;AAAA;AAAA,gBAGb,CAEJ,CACF,EAECmU,EACC,gBAAC7L,GAAA,GACC,MAAM,cACN,WAAY,GACZ,QAAQ,wDACR,SAAA+J,CAAA,EAEA,gBAACgC,GAAA,GACC,QAAS,GACT,QAASpW,EAAM,cACf,UAAW,GACX,MAAO,GACP,SAAWqW,GACT9X,EAAS,CACP,GAAGyB,EACH,cAAeqW,EAAG,IAClB,IAAK,MACP,CAAC,EAEL,CACF,EAEA,gBAAChM,GAAA,GACC,MAAM,MACN,WAAY,GACZ,QAAQ,mEACR,SAAA+J,CAAA,EAEA,gBAACpK,GAAA,GACC,YAAY,qCACZ,WAAY,GACZ,MAAO,GACP,MAAOhK,EAAM,IACb,SAAW+Q,GACTxS,EAAS,CACP,GAAGyB,EACH,cAAe,OACf,IAAK+Q,EAAM,cAAc,KAC3B,CAAC,EAEL,CACF,EAGF,gBAAC1G,GAAA,GACC,MAAM,YACN,WAAY,GACZ,QAAQ,kEACR,SAAA+J,CAAA,EAEA,gBAACpK,GAAA,GACC,YAAY,oBACZ,WAAY,GACZ,MAAO,GACP,MAAOhK,EAAM,gBACb,SAAW+Q,GACTxS,EAAS,CACP,GAAGyB,EACH,gBAAiB+Q,EAAM,cAAc,KACvC,CAAC,EAEL,CACF,EACA,gBAAC1G,GAAA,GACC,MAAM,aACN,WAAY,GACZ,QAAQ,qFACR,SAAA+J,CAAA,EAEA,gBAACpK,GAAA,GACC,YAAY,UACZ,WAAY,GACZ,MAAO,GACP,MAAOhK,EAAM,KACb,SAAW+Q,GACTxS,EAAS,CACP,GAAGyB,EACH,KAAM+Q,EAAM,cAAc,KAC5B,CAAC,EAEL,CACF,CACF,CAEJ,CCjHO,SAASuF,GAAkB,CAAE,QAAAnK,EAAS,SAAA5N,EAAU,SAAA6V,CAAS,EAAU,CACxE,OACE,gCACE,gBAAC,MAAG,UAAU,gBAAe,WAAS,EAErCjI,GACCA,EAAQ,IAAI,CAACtL,EAAQ1D,IAEjB,gBAAC8Y,GAAA,CACC,IAAK9Y,EACL,MAAO0D,EACP,SAAW0V,GAAa,CACtB,MAAMC,EAAa,CAAC,GAAGrK,CAAO,EAC9BqK,EAAW,OAAOrZ,EAAO,EAAGoZ,CAAQ,EACpChY,EAASiY,CAAU,CACrB,EACA,SAAU,IAAM,CACd,MAAMA,EAAa,CAAC,GAAGrK,CAAO,EAC9BqK,EAAW,OAAOrZ,EAAO,CAAC,EAC1BoB,EAASiY,CAAU,CACrB,EACA,SAAApC,CAAA,CACF,CAEH,EAEF,CAACA,GACA,gBAAClW,EAAA,IACC,QAAQ,YACR,aAAY2E,EAAA,kEACZ,UAAW;AAAA;AAAA,YAGX,KAAK,OACL,QAAUkO,GAAU,CAClBA,EAAM,eAAe,EACrB,MAAMyF,EAAa,CAAC,GAAIrK,GAAW,CAAC,EAAI,CAAE,KAAM,SAAU,CAAC,EAC3D5N,EAASiY,CAAU,CACrB,GACD,KAED,CAEJ,CAEJ,CC7DO,MAAMC,GAAoF,CAC/F,WAAY,CACV,CAAE,MAAO,OAAW,MAAO,eAAgB,EAC3C,CAAE,MAAO,QAAS,MAAO,UAAW,EACpC,CAAE,MAAO,SAAU,MAAO,QAAS,EACnC,CAAE,MAAO,SAAU,MAAO,QAAS,EACnC,CAAE,MAAO,SAAU,MAAO,QAAS,EACnC,CAAE,MAAO,SAAU,MAAO,QAAS,EACnC,CAAE,MAAO,SAAU,MAAO,QAAS,EACnC,CAAE,MAAO,SAAU,MAAO,QAAS,EACnC,CAAE,MAAO,SAAU,MAAO,QAAS,EACnC,CAAE,MAAO,SAAU,MAAO,QAAS,EACnC,CAAE,MAAO,SAAU,MAAO,QAAS,EACnC,CAAE,MAAO,SAAU,MAAO,QAAS,EACnC,CAAE,MAAO,SAAU,MAAO,QAAS,EACnC,CAAE,MAAO,SAAU,MAAO,QAAS,EACnC,CAAE,MAAO,SAAU,MAAO,QAAS,EACnC,CAAE,MAAO,SAAU,MAAO,QAAS,EACnC,CAAE,MAAO,SAAU,MAAO,QAAS,EACnC,CAAE,MAAO,SAAU,MAAO,QAAS,EACnC,CAAE,MAAO,SAAU,MAAO,QAAS,EACnC,CAAE,MAAO,SAAU,MAAO,QAAS,EACnC,CAAE,MAAO,SAAU,MAAO,QAAS,EACnC,CAAE,MAAO,SAAU,MAAO,QAAS,EACnC,CAAE,MAAO,SAAU,MAAO,QAAS,EACnC,CAAE,MAAO,SAAU,MAAO,QAAS,EACnC,CAAE,MAAO,SAAU,MAAO,QAAS,EACnC,CAAE,MAAO,SAAU,MAAO,QAAS,EACnC,CAAE,MAAO,SAAU,MAAO,QAAS,EACnC,CAAE,MAAO,SAAU,MAAO,QAAS,EACnC,CAAE,MAAO,SAAU,MAAO,QAAS,EAGnC,CAAE,MAAO,SAAU,MAAO,UAAW,CACvC,EACA,MAAO,CACL,CAAE,MAAO,OAAW,MAAO,eAAgB,EAC3C,CAAE,MAAO,QAAS,MAAO,OAAQ,EACjC,CAAE,MAAO,QAAS,MAAO,OAAQ,EACjC,CAAE,MAAO,QAAS,MAAO,OAAQ,EACjC,CAAE,MAAO,QAAS,MAAO,OAAQ,EACjC,CAAE,MAAO,QAAS,MAAO,SAAU,CACrC,EACA,OAAQ,CACN,CAAE,MAAO,OAAW,MAAO,eAAgB,EAC3C,CAAE,MAAO,QAAS,MAAO,UAAW,EACpC,CAAE,MAAO,SAAU,MAAO,QAAS,EACnC,CAAE,MAAO,SAAU,MAAO,QAAS,EACnC,CAAE,MAAO,SAAU,MAAO,QAAS,EACnC,CAAE,MAAO,SAAU,MAAO,QAAS,EACnC,CAAE,MAAO,SAAU,MAAO,QAAS,EACnC,CAAE,MAAO,SAAU,MAAO,QAAS,EACnC,CAAE,MAAO,SAAU,MAAO,QAAS,EACnC,CAAE,MAAO,SAAU,MAAO,QAAS,EACnC,CAAE,MAAO,SAAU,MAAO,QAAS,EACnC,CAAE,MAAO,SAAU,MAAO,QAAS,EACnC,CAAE,MAAO,SAAU,MAAO,QAAS,EACnC,CAAE,MAAO,SAAU,MAAO,QAAS,EACnC,CAAE,MAAO,SAAU,MAAO,QAAS,EACnC,CAAE,MAAO,SAAU,MAAO,UAAW,CACvC,EACA,OAAQ,CACN,CAAE,MAAO,OAAW,MAAO,eAAgB,EAC3C,CAAE,MAAO,QAAS,MAAO,SAAU,EACnC,CAAE,MAAO,QAAS,MAAO,OAAQ,EACjC,CAAE,MAAO,QAAS,MAAO,OAAQ,EACjC,CAAE,MAAO,QAAS,MAAO,OAAQ,EACjC,CAAE,MAAO,QAAS,MAAO,OAAQ,EACjC,CAAE,MAAO,QAAS,MAAO,OAAQ,EACjC,CAAE,MAAO,QAAS,MAAO,OAAQ,EACjC,CAAE,MAAO,QAAS,MAAO,OAAQ,EACjC,CAAE,MAAO,QAAS,MAAO,OAAQ,EACjC,CAAE,MAAO,QAAS,MAAO,OAAQ,EACjC,CAAE,MAAO,QAAS,MAAO,OAAQ,EACjC,CAAE,MAAO,SAAU,MAAO,QAAS,EACnC,CAAE,MAAO,SAAU,MAAO,QAAS,EACnC,CAAE,MAAO,SAAU,MAAO,QAAS,EACnC,CAAE,MAAO,SAAU,MAAO,UAAW,CACvC,CACF,ECjDM,CAAE,MAAK,GAAE,UAAAC,EAAU,EAAI,eAEvBC,GAAc,CAClB,CAAE,MAAO,OAAQ,MAAO,MAAO,EAC/B,CAAE,MAAO,MAAO,MAAO,KAAM,CAC/B,EAEMC,GAAgB,CACpB,CAAE,MAAO,YAAyB,MAAO,SAAU,EACnD,CAAE,MAAO,SAAsB,MAAO,MAAO,CAC/C,EAEMC,GAAoB,CACxB,CAAE,MAAO,SAA0B,MAAO,KAAM,EAChD,CAAE,MAAO,YAA6B,MAAO,QAAS,EACtD,CAAE,MAAO,UAA2B,MAAO,MAAO,EAClD,CAAE,MAAO,UAA2B,MAAO,MAAO,CACpD,EAIMC,GAAyD,CAC7D,CAAE,MAAO,iBAA4B,MAAO,gBAA2B,EACvE,CAAE,MAAO,aAAwB,MAAO,YAAuB,EAC/D,CAAE,MAAO,YAAuB,MAAO,WAAsB,EAC7D,CAAE,MAAO,aAAwB,MAAO,YAAuB,CACjE,EAYMC,GAAmB,CAACC,EAAiBC,IAAwC,CACjF,GAAI,CAACA,GAAU,CAACR,GAAmBQ,CAAM,EACvC,OAKF,MAAMC,EAHsBT,GAAmBQ,CAAM,GAIjD,OAAQE,GAAO,CAAC,CAACA,EAAG,OAAS,SAAWA,EAAG,MAAOH,CAAO,CAAC,EAC3D,IAAKG,GAAOA,EAAG,KAAK,EAEjBC,EAAiBF,EAAwBA,EAAwB,OAAS,CAAC,EAEjF,GAAIE,EAAgB,CAClB,MAAMC,EAAoC,UAAYD,EAAgBJ,CAAO,EAG7E,GAAI,CAAC,QAAS,WAAY,aAAc,IAAI,EAAE,SAASK,CAAiC,EACtF,OAAOD,CAEX,CAGF,EAEME,GAAsC3I,GAAwB,CAClE,QAAQ,KAAK,2EAA4EA,CAAK,CAChG,EAeM4I,GAAuB,CAC3BpL,EACAqL,EACAC,IACG,CAEHA,EAAStL,CAAO,EACb,KAAMuL,GAAmB,IACxB,MAAc,EACX,IAAI,wBAAwBA,EAAe,8BAA8B,EACzE,KAAMC,GAAuC,CAC5C,MAAMC,EAA0BD,EAAY,MAAM,SAAW,GAC7D,GAAIC,GAA2B,WAAaA,CAAuB,EAAG,CACpE,MAAMC,EAAgBd,GAAiBa,EAAyBF,EAAe,SAAS,cAAc,EAElGG,GACFJ,EAAS,CACP,GAAGC,EACH,SAAU,CACR,GAAGA,EAAe,SAClB,kBAAmBG,CACrB,CACF,CAAC,EAAE,KAAMC,GAA0B,CACjCN,EAAgBM,CAAqB,CACvC,CAAC,CAEL,MACER,GAAmC,CAEvC,CAAC,CACL,CAAC,EACA,MAAO3I,GAAU,CAChB2I,GAAmC3I,CAAK,CAC1C,CAAC,CACL,EAEaoJ,GAAgB9a,GAAiB,CAC5C,KAAM,CAAE,QAAAkP,EAAS,gBAAAqL,CAAgB,EAAIva,EAG/Bwa,KAAW,OAAoB,EAIrC,OAAKtL,EAAQ,SAAS,aACpBA,EAAQ,SAAS,WAAa,QAI9B,gCACE,gBAAC,OAAI,UAAU,iBAEb,gBAAC,OAAI,UAAU,kBACb,gBAAC,OAAI,UAAU,WACb,gBAACuK,GAAA,CACC,MAAM,kBACN,WAAY,GACZ,QACE,gBAAC,IACC,UAAU,UACV,MAAOvK,EAAQ,SAAS,aACxB,WAAY,GACZ,YAAY,MACZ,SAAU6L,GAAgB,eAAgB7L,EAASqL,CAAe,EAClE,iBAAkBS,GAClB,SAAU9L,EAAQ,SACpB,EAEF,QAAQ,oGACV,CACF,CACF,EAEA,gBAAC,OAAI,UAAU,kBACb,gBAAC,OAAI,UAAU,WACb,gBAACuK,GAAA,CACC,MAAM,gBACN,WAAY,GACZ,QACE,gBAAC,IACC,UAAU,UACV,MAAOvK,EAAQ,SAAS,aACxB,SAAU6L,GAAgB,eAAgB7L,EAASqL,CAAe,EAClE,WAAY,GACZ,YAAY,MACZ,iBAAkBS,GAClB,SAAU9L,EAAQ,SACpB,EAEF,QAAQ,oCACV,CACF,CACF,EAEA,gBAAC,OAAI,UAAU,WACb,gBAAC,MACC,MAAO,GACP,QAAQ,uQACT,aAED,EACA,gBAACvJ,EAAA,IACC,aAAW,qBACX,QAAS+T,GACT,MAAOA,GAAY,KAAMuB,GAAMA,EAAE,QAAU/L,EAAQ,SAAS,UAAU,EACtE,SAAU6L,GAAgB,aAAc7L,EAASqL,CAAe,EAChE,UAAU,UACV,SAAUrL,EAAQ,SACpB,CACF,CACF,EAEA,gBAAC,MAAG,UAAU,gBAAe,kBAAgB,EAC5C,CAACA,EAAQ,SAAS,gBAAkB,CAACA,EAAQ,SAAS,mBAAqBA,EAAQ,UAClF,gBAAC,OAAI,MAAO,CAAE,aAAc,MAAO,GAAG,2FACqD,IACzF,gBAAC,KACC,MAAO,CAAE,eAAgB,WAAY,EACrC,KAAK,wEACN,4BAED,EAAI,GAEN,EAEF,gBAAC,OAAI,UAAU,iBACb,gBAAC,OAAI,UAAU,WACb,gBAAC,OAAI,UAAU,WACb,gBAACuK,GAAA,CACC,MAAM,kBACN,WAAY,GACZ,QACE,gBAAC9T,EAAA,IACC,aAAW,kBACX,QAASkU,GACT,MAAOA,GAA4B,KAAMoB,GAAMA,EAAE,QAAU/L,EAAQ,SAAS,cAAc,EAC1F,SAAU6L,GACR,iBACA,CACE,GAAG7L,EACH,SAAU,CAAE,GAAGA,EAAQ,SAAU,kBAAmB,MAAU,CAChE,EACCA,IAECoL,GAAqBpL,EAASqL,EAAiBC,CAAQ,EAChDD,EAAgB,CACrB,GAAGrL,EACH,SAAU,CAAE,GAAGA,EAAQ,SAAU,kBAAmB,MAAU,CAChE,CAAC,EAEL,EACA,MAAO,GACP,SAAUA,EAAQ,SACpB,EAEF,QAAQ,sLACV,CACF,CACF,EACA,gBAAC,OAAI,UAAU,WACZA,EAAQ,SAAS,gBAChB,gBAAC,OAAI,UAAU,WACb,gBAACuK,GAAA,CACC,MAAO,GAAGvK,EAAQ,SAAS,yBAC3B,WAAY,GACZ,QACE,gBAACvJ,EAAA,IACC,aAAY,GAAGuJ,EAAQ,SAAS,sBAChC,QAASsK,GAAmBtK,EAAQ,SAAS,cAAc,EAC3D,MAAOsK,GAAmBtK,EAAQ,SAAS,cAAc,GAAG,KACzD+L,GAAMA,EAAE,QAAU/L,EAAQ,SAAS,iBACtC,EACA,SAAU6L,GAAgB,oBAAqB7L,EAASqL,CAAe,EACvE,MAAO,GACP,SAAUrL,EAAQ,SACpB,EAEF,QAAS,uCAAuCA,EAAQ,SAAS,iEACnE,CACF,CAEJ,CACF,EAEA,gBAAC,MAAG,UAAU,gBAAe,MAAI,EACjC,gBAAC,OAAI,UAAU,iBACb,gBAAC,OAAI,UAAU,WACb,gBAAC9B,GAAA,GACC,WAAY,GACZ,MAAM,yBACN,QAAQ,gMACR,SAAU8B,EAAQ,UAElB,gBAAC,MACC,MAAOA,EAAQ,SAAS,sBAAwB,GAChD,YAAU,OAAwClP,EAAO,sBAAsB,EACjF,CACF,CACF,EACA,gBAAC,OAAI,UAAU,WACb,gBAACyZ,GAAA,CACC,MAAM,iBACN,WAAY,GACZ,QACE,gBAAC9T,EAAA,IACC,aAAY,mCACZ,QAASgU,GACT,MAAOA,GAAc,KAAMsB,GAAMA,EAAE,QAAU/L,EAAQ,SAAS,aAAa,EAC3E,SAAU6L,GAAgB,gBAAiB7L,EAASqL,CAAe,EACnE,MAAO,GACP,SAAUrL,EAAQ,SACpB,EAEF,QAAS,4RACX,CACF,EACA,gBAAC,OAAI,UAAU,kBACb,gBAAC,OAAI,UAAU,wBACb,gBAACuK,GAAA,CACC,MAAM,0BACN,WAAY,GACZ,QAAQ,6DACR,QACE,gBAAC,IACC,UAAU,WACV,MAAOvK,EAAQ,SAAS,sBACxB,SAAU6L,GAAgB,wBAAyB7L,EAASqL,CAAe,EAC3E,WAAY,GACZ,YAAY,+CACZ,SAAUrL,EAAQ,SACpB,EAEJ,CACF,CACF,EACC,qDACC,gBAAC,OAAI,UAAU,kBACb,gBAAC,OAAI,UAAU,wBACb,gBAACuK,GAAA,CACC,MAAM,cACN,WAAY,GACZ,QAAQ,8HACR,QACE,gBAAC9T,EAAA,IACC,UAAW,WACX,SAAUoV,GAAgB,aAAc7L,EAASqL,CAAe,EAChE,QAASX,GACT,MAAOA,GAAkB,KAAMqB,GAAMA,EAAE,QAAU/L,EAAQ,SAAS,UAAU,EAC9E,EAEJ,CACF,CACF,CAEJ,EACA,gBAACmK,GAAA,CACC,QAASnK,EAAQ,SAAS,4BAC1B,SAAWgM,MACT,OACE,CAAE,gBAAAX,EAAiB,QAAArL,CAAQ,EAC3B,8BACAgM,CACF,EAEF,SAAUhM,EAAQ,SACpB,CACF,CAEJ,EAEa8L,GAA+B,CAC1C,CAAC,YAA2B,EAAG,IAC7B,OACE,yBACA,sFACF,CACF,CACF,EAEaG,GAAyBC,GAC/BA,EAIDA,EAAU,eAAe,eAAe,EACnCA,EAAU,cAAc,MAGzBA,EAAsC,MAPrC,GAULL,GACJ,CAACM,EAAwBnM,EAA2BqL,IACnDa,GAA0E,CACzEb,EAAgB,CACd,GAAGrL,EACH,SAAU,CACR,GAAGA,EAAQ,SACX,CAACmM,CAAG,EAAGF,GAAsBC,CAAS,CACxC,CACF,CAAC,CACH,EC7YWE,GAAgBtb,GAAiB,CAC5C,KAAM,CAAE,QAAAkP,EAAS,gBAAAqL,CAAgB,EAAIva,EAE/Bub,KAAoB,UAAOvb,EAAM,QAAQ,SAAW,QAAQ,EAE5Dwb,EAAoB,CACxB,mBAAoB,uBACpB,oBAAsBlL,GAAkDkG,GAAelG,CAAM,EAC7F,oBAAqB,CAACA,EAAsCmL,IAC1DA,EAAU7E,GAAsBtG,CAAM,EAAIuG,GAAiBvG,CAAM,EACnE,gBAAiBiI,EACnB,EAEA,OACE,gCACGrJ,EAAQ,SAAW,UAClB,gBAACwM,GAAA,EAAK,CAAC,MAAM,QAAQ,SAAS,SAAQ,wGAEtC,EAGF,gBAACC,GAAA,GACC,WAAW,wBACX,iBAAkBzM,EAClB,kBAAmBqM,EAAkB,QACrC,SAAUhB,EACV,uBAAwB,uBACxB,kBAAAiB,EACA,kBAAmB,gBAAC,MAAqB,CAAE,GAAGxb,CAAA,CAAO,EACvD,EAEC,iDACC,gBAAC4b,GAAA,EAAwB,CAAC,QAAA1M,EAAkB,gBAAAqL,CAAA,CAAkC,EAGhF,gBAACsB,GAAA,EAAgB,CAAc,QAAA3M,EAAkB,gBAAAqL,CAAA,CAAkC,EAEnF,gBAACO,GAAY,CAAC,QAAA5L,EAAkB,gBAAAqL,CAAA,CAAkC,CACpE,CAEJ,E,eC/CO,MAAM,GAAS,IAAI,KAAiB,KAAoB,EAC5D,eAAe,EAAoB,EACnC,gBAAgBe,EAAY,EAC5B,mBAAmB,CAAc,C","sources":["webpack://grafana/./public/app/features/datasources/state/contexts.ts","webpack://grafana/./public/app/features/datasources/state/hooks.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/components/PromCheatSheet.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/QueryPattern.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/QueryPatternsModal.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/state.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/MetricSelect.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/LabelFilterItem.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/LabelFilters.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/FeedbackLink.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/MetricEncyclopediaModal.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/NestedQuery.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/NestedQueryList.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryBuilder.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/QueryPreview.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryBuilderContainer.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/components/PromExemplarField.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/components/PromExploreExtraField.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryLegendEditor.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryBuilderOptions.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryEditorSelector.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/components/PromQueryEditorForAlerting.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/components/PromQueryEditorByApp.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/configuration/AzureCredentials.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/configuration/AzureCredentialsConfig.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/configuration/AzureCredentialsForm.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/configuration/AzureAuthSettings.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/configuration/ExemplarSetting.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/configuration/ExemplarsSettings.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/configuration/PromFlavorVersions.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/configuration/PromSettings.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/configuration/ConfigEditor.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/module.ts"],"sourcesContent":["import { createContext } from 'react';\n\nimport { DATASOURCES_ROUTES } from '../constants';\nimport { DataSourcesRoutes } from '../types';\n\n// The purpose of this context is to be able to override the data-sources routes (used for links for example) used under\n// the app/features/datasources modules, so we can reuse them more easily in different parts of the application (e.g. under Connections)\nexport const DataSourcesRoutesContext = createContext<DataSourcesRoutes>(DATASOURCES_ROUTES);\n","import { useContext, useEffect } from 'react';\n\nimport { DataSourcePluginMeta, DataSourceSettings, NavModelItem } from '@grafana/data';\nimport { cleanUpAction } from 'app/core/actions/cleanUp';\nimport appEvents from 'app/core/app_events';\nimport { contextSrv } from 'app/core/core';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { AccessControlAction, useDispatch, useSelector } from 'app/types';\nimport { ShowConfirmModalEvent } from 'app/types/events';\n\nimport { DataSourceRights } from '../types';\nimport { constructDataSourceExploreUrl } from '../utils';\n\nimport {\n  initDataSourceSettings,\n  testDataSource,\n  loadDataSource,\n  loadDataSources,\n  loadDataSourcePlugins,\n  addDataSource,\n  updateDataSource,\n  deleteLoadedDataSource,\n} from './actions';\nimport { DataSourcesRoutesContext } from './contexts';\nimport { getDataSourceLoadingNav, buildNavModel, getDataSourceNav } from './navModel';\nimport { initialDataSourceSettingsState } from './reducers';\nimport { getDataSource, getDataSourceMeta } from './selectors';\n\nexport const useInitDataSourceSettings = (uid: string) => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(initDataSourceSettings(uid));\n\n    return function cleanUp() {\n      dispatch(\n        cleanUpAction({\n          cleanupAction: (state) => (state.dataSourceSettings = initialDataSourceSettingsState),\n        })\n      );\n    };\n  }, [uid, dispatch]);\n};\n\nexport const useTestDataSource = (uid: string) => {\n  const dispatch = useDispatch();\n  const dataSourcesRoutes = useDataSourcesRoutes();\n\n  return () => dispatch(testDataSource(uid, dataSourcesRoutes.Edit));\n};\n\nexport const useLoadDataSources = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector((state) => state.dataSources.isLoadingDataSources);\n  const dataSources = useSelector((state) => state.dataSources.dataSources);\n\n  useEffect(() => {\n    dispatch(loadDataSources());\n  }, [dispatch]);\n\n  return { isLoading, dataSources };\n};\n\nexport const useLoadDataSource = (uid: string) => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(loadDataSource(uid));\n  }, [dispatch, uid]);\n};\n\nexport const useLoadDataSourcePlugins = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(loadDataSourcePlugins());\n  }, [dispatch]);\n};\n\nexport const useAddDatasource = () => {\n  const dispatch = useDispatch();\n  const dataSourcesRoutes = useDataSourcesRoutes();\n\n  return (plugin: DataSourcePluginMeta) => {\n    dispatch(addDataSource(plugin, dataSourcesRoutes.Edit));\n  };\n};\n\nexport const useUpdateDatasource = () => {\n  const dispatch = useDispatch();\n\n  return async (dataSource: DataSourceSettings) => dispatch(updateDataSource(dataSource));\n};\n\nexport const useDeleteLoadedDataSource = () => {\n  const dispatch = useDispatch();\n  const { name } = useSelector((state) => state.dataSources.dataSource);\n\n  return () => {\n    appEvents.publish(\n      new ShowConfirmModalEvent({\n        title: 'Delete',\n        text: `Are you sure you want to delete the \"${name}\" data source?`,\n        yesText: 'Delete',\n        icon: 'trash-alt',\n        onConfirm: () => dispatch(deleteLoadedDataSource()),\n      })\n    );\n  };\n};\n\nexport const useDataSource = (uid: string) => {\n  return useSelector((state) => getDataSource(state.dataSources, uid));\n};\n\nexport const useDataSourceExploreUrl = (uid: string) => {\n  const dataSource = useDataSource(uid);\n  return constructDataSourceExploreUrl(dataSource);\n};\n\nexport const useDataSourceMeta = (pluginType: string): DataSourcePluginMeta => {\n  return useSelector((state) => getDataSourceMeta(state.dataSources, pluginType));\n};\n\nexport const useDataSourceSettings = () => {\n  return useSelector((state) => state.dataSourceSettings);\n};\n\nexport const useDataSourceSettingsNav = (dataSourceId: string, pageId: string | null) => {\n  const dataSource = useDataSource(dataSourceId);\n  const { plugin, loadError, loading } = useDataSourceSettings();\n  const navIndex = useSelector((state) => state.navIndex);\n  const navIndexId = pageId ? `datasource-${pageId}-${dataSourceId}` : `datasource-settings-${dataSourceId}`;\n\n  if (loadError) {\n    const node: NavModelItem = {\n      text: loadError,\n      subTitle: 'Data Source Error',\n      icon: 'exclamation-triangle',\n    };\n\n    return {\n      node: node,\n      main: node,\n    };\n  }\n\n  if (loading || !plugin) {\n    return getNavModel(navIndex, navIndexId, getDataSourceLoadingNav('settings'));\n  }\n\n  return getNavModel(navIndex, navIndexId, getDataSourceNav(buildNavModel(dataSource, plugin), pageId || 'settings'));\n};\n\nexport const useDataSourceRights = (uid: string): DataSourceRights => {\n  const dataSource = useDataSource(uid);\n  const readOnly = dataSource.readOnly === true;\n  const hasWriteRights = contextSrv.hasPermissionInMetadata(AccessControlAction.DataSourcesWrite, dataSource);\n  const hasDeleteRights = contextSrv.hasPermissionInMetadata(AccessControlAction.DataSourcesDelete, dataSource);\n\n  return {\n    readOnly,\n    hasWriteRights,\n    hasDeleteRights,\n  };\n};\n\nexport const useDataSourcesRoutes = () => {\n  return useContext(DataSourcesRoutesContext);\n};\n","import React from 'react';\n\nimport { QueryEditorHelpProps } from '@grafana/data';\n\nimport { PromQuery } from '../types';\n\nconst CHEAT_SHEET_ITEMS = [\n  {\n    title: 'Request Rate',\n    expression: 'rate(http_request_total[5m])',\n    label:\n      'Given an HTTP request counter, this query calculates the per-second average request rate over the last 5 minutes.',\n  },\n  {\n    title: '95th Percentile of Request Latencies',\n    expression: 'histogram_quantile(0.95, sum(rate(prometheus_http_request_duration_seconds_bucket[5m])) by (le))',\n    label: 'Calculates the 95th percentile of HTTP request rate over 5 minute windows.',\n  },\n  {\n    title: 'Alerts Firing',\n    expression: 'sort_desc(sum(sum_over_time(ALERTS{alertstate=\"firing\"}[24h])) by (alertname))',\n    label: 'Sums up the alerts that have been firing over the last 24 hours.',\n  },\n  {\n    title: 'Step',\n    label:\n      'Defines the graph resolution using a duration format (15s, 1m, 3h, ...). Small steps create high-resolution graphs but can be slow over larger time ranges. Using a longer step lowers the resolution and smooths the graph by producing fewer datapoints. If no step is given the resolution is calculated automatically.',\n  },\n];\n\nconst PromCheatSheet = (props: QueryEditorHelpProps<PromQuery>) => (\n  <div>\n    <h2>PromQL Cheat Sheet</h2>\n    {CHEAT_SHEET_ITEMS.map((item, index) => (\n      <div className=\"cheat-sheet-item\" key={index}>\n        <div className=\"cheat-sheet-item__title\">{item.title}</div>\n        {item.expression ? (\n          <button\n            type=\"button\"\n            className=\"cheat-sheet-item__example\"\n            onClick={(e) => props.onClickExample({ refId: 'A', expr: item.expression })}\n          >\n            <code>{item.expression}</code>\n          </button>\n        ) : null}\n        <div className=\"cheat-sheet-item__label\">{item.label}</div>\n      </div>\n    ))}\n  </div>\n);\n\nexport default PromCheatSheet;\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Card, useStyles2 } from '@grafana/ui';\nimport { RawQuery } from 'app/plugins/datasource/prometheus/querybuilder/shared/RawQuery';\n\nimport promqlGrammar from '../promql';\n\nimport { promQueryModeller } from './PromQueryModeller';\nimport { PromQueryPattern } from './types';\n\ntype Props = {\n  pattern: PromQueryPattern;\n  hasNewQueryOption: boolean;\n  hasPreviousQuery: boolean | string;\n  selectedPatternName: string | null;\n  setSelectedPatternName: (name: string | null) => void;\n  onPatternSelect: (pattern: PromQueryPattern, selectAsNewQuery?: boolean) => void;\n};\n\nexport const QueryPattern = (props: Props) => {\n  const { pattern, onPatternSelect, hasNewQueryOption, hasPreviousQuery, selectedPatternName, setSelectedPatternName } =\n    props;\n\n  const styles = useStyles2(getStyles);\n  const lang = { grammar: promqlGrammar, name: 'promql' };\n\n  return (\n    <Card className={styles.card}>\n      <Card.Heading>{pattern.name}</Card.Heading>\n      <div className={styles.rawQueryContainer}>\n        <RawQuery\n          aria-label={`${pattern.name} raw query`}\n          query={promQueryModeller.renderQuery({\n            labels: [],\n            operations: pattern.operations,\n            binaryQueries: pattern.binaryQueries,\n          })}\n          lang={lang}\n          className={styles.rawQuery}\n        />\n      </div>\n      <Card.Actions>\n        {selectedPatternName !== pattern.name ? (\n          <Button\n            size=\"sm\"\n            aria-label=\"use this query button\"\n            onClick={() => {\n              if (hasPreviousQuery) {\n                // If user has previous query, we need to confirm that they want to apply this query pattern\n                setSelectedPatternName(pattern.name);\n              } else {\n                onPatternSelect(pattern);\n              }\n            }}\n          >\n            Use this query\n          </Button>\n        ) : (\n          <>\n            <div className={styles.spacing}>\n              {`If you would like to use this query, ${\n                hasNewQueryOption\n                  ? 'you can either apply this query pattern or create a new query'\n                  : 'this query pattern will be applied to your current query'\n              }.`}\n            </div>\n            <Button size=\"sm\" aria-label=\"back button\" fill=\"outline\" onClick={() => setSelectedPatternName(null)}>\n              Back\n            </Button>\n            <Button\n              size=\"sm\"\n              aria-label=\"apply query starter button\"\n              onClick={() => {\n                onPatternSelect(pattern);\n              }}\n            >\n              Apply query\n            </Button>\n            {hasNewQueryOption && (\n              <Button\n                size=\"sm\"\n                aria-label=\"create new query button\"\n                onClick={() => {\n                  onPatternSelect(pattern, true);\n                }}\n              >\n                Create new query\n              </Button>\n            )}\n          </>\n        )}\n      </Card.Actions>\n    </Card>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    card: css`\n      width: 49.5%;\n      display: flex;\n      flex-direction: column;\n    `,\n    rawQueryContainer: css`\n      flex-grow: 1;\n    `,\n    rawQuery: css`\n      background-color: ${theme.colors.background.primary};\n      padding: ${theme.spacing(1)};\n      margin-top: ${theme.spacing(1)};\n    `,\n    spacing: css`\n      margin-bottom: ${theme.spacing(1)};\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport { capitalize } from 'lodash';\nimport React, { useMemo, useState } from 'react';\n\nimport { CoreApp, DataQuery, GrafanaTheme2 } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Button, Collapse, Modal, useStyles2 } from '@grafana/ui';\nimport { getNextRefIdChar } from 'app/core/utils/query';\n\nimport { PromQuery } from '../types';\n\nimport { promQueryModeller } from './PromQueryModeller';\nimport { QueryPattern } from './QueryPattern';\nimport { buildVisualQueryFromString } from './parsing';\nimport { PromQueryPattern, PromQueryPatternType } from './types';\n\ntype Props = {\n  isOpen: boolean;\n  query: PromQuery;\n  queries: DataQuery[] | undefined;\n  app?: CoreApp;\n  onClose: () => void;\n  onChange: (query: PromQuery) => void;\n  onAddQuery?: (query: PromQuery) => void;\n};\n\nexport const QueryPatternsModal = (props: Props) => {\n  const { isOpen, onClose, onChange, onAddQuery, query, queries, app } = props;\n  const [openTabs, setOpenTabs] = useState<string[]>([]);\n  const [selectedPatternName, setSelectedPatternName] = useState<string | null>(null);\n\n  const styles = useStyles2(getStyles);\n  const hasNewQueryOption = !!onAddQuery;\n  const hasPreviousQuery = useMemo(() => {\n    const visualQuery = buildVisualQueryFromString(query.expr);\n    // has anything entered in the query, metric, labels, operations, or binary queries\n    const hasOperations = visualQuery.query.operations.length > 0,\n      hasMetric = visualQuery.query.metric,\n      hasLabels = visualQuery.query.labels.length > 0,\n      hasBinaryQueries = visualQuery.query.binaryQueries ? visualQuery.query.binaryQueries.length > 0 : false;\n\n    return hasOperations || hasMetric || hasLabels || hasBinaryQueries;\n  }, [query.expr]);\n\n  const onPatternSelect = (pattern: PromQueryPattern, selectAsNewQuery = false) => {\n    const visualQuery = buildVisualQueryFromString(selectAsNewQuery ? '' : query.expr);\n    reportInteraction('grafana_prom_kickstart_your_query_selected', {\n      app: app ?? '',\n      editorMode: query.editorMode,\n      selectedPattern: pattern.name,\n      preSelectedOperationsCount: visualQuery.query.operations.length,\n      preSelectedLabelsCount: visualQuery.query.labels.length,\n      createNewQuery: hasNewQueryOption && selectAsNewQuery,\n    });\n\n    visualQuery.query.operations = pattern.operations;\n    visualQuery.query.binaryQueries = pattern.binaryQueries;\n    if (hasNewQueryOption && selectAsNewQuery) {\n      onAddQuery({\n        ...query,\n        refId: getNextRefIdChar(queries ?? [query]),\n        expr: promQueryModeller.renderQuery(visualQuery.query),\n      });\n    } else {\n      onChange({\n        ...query,\n        expr: promQueryModeller.renderQuery(visualQuery.query),\n      });\n    }\n    setSelectedPatternName(null);\n    onClose();\n  };\n\n  return (\n    <Modal aria-label=\"Kick start your query modal\" isOpen={isOpen} title=\"Kick start your query\" onDismiss={onClose}>\n      <div className={styles.spacing}>\n        Kick start your query by selecting one of these queries. You can then continue to complete your query.\n      </div>\n      {Object.values(PromQueryPatternType).map((patternType) => {\n        return (\n          <Collapse\n            aria-label={`open and close ${patternType} query starter card`}\n            key={patternType}\n            label={`${capitalize(patternType)} query starters`}\n            isOpen={openTabs.includes(patternType)}\n            collapsible={true}\n            onToggle={() =>\n              setOpenTabs((tabs) =>\n                // close tab if it's already open, otherwise open it\n                tabs.includes(patternType) ? tabs.filter((t) => t !== patternType) : [...tabs, patternType]\n              )\n            }\n          >\n            <div className={styles.cardsContainer}>\n              {promQueryModeller\n                .getQueryPatterns()\n                .filter((pattern) => pattern.type === patternType)\n                .map((pattern) => (\n                  <QueryPattern\n                    key={pattern.name}\n                    pattern={pattern}\n                    hasNewQueryOption={hasNewQueryOption}\n                    hasPreviousQuery={hasPreviousQuery}\n                    onPatternSelect={onPatternSelect}\n                    selectedPatternName={selectedPatternName}\n                    setSelectedPatternName={setSelectedPatternName}\n                  />\n                ))}\n            </div>\n          </Collapse>\n        );\n      })}\n      <Button aria-label=\"close kick start your query modal\" variant=\"secondary\" onClick={onClose}>\n        Close\n      </Button>\n    </Modal>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    cardsContainer: css`\n      display: flex;\n      flex-direction: row;\n      flex-wrap: wrap;\n      justify-content: space-between;\n    `,\n    spacing: css`\n      margin-bottom: ${theme.spacing(1)};\n    `,\n  };\n};\n","import { CoreApp } from '@grafana/data';\nimport store from 'app/core/store';\n\nimport { LegendFormatMode, PromQuery } from '../types';\n\nimport { QueryEditorMode } from './shared/types';\n\nconst queryEditorModeDefaultLocalStorageKey = 'PrometheusQueryEditorModeDefault';\n\nexport function changeEditorMode(query: PromQuery, editorMode: QueryEditorMode, onChange: (query: PromQuery) => void) {\n  // If empty query store new mode as default\n  if (query.expr === '') {\n    store.set(queryEditorModeDefaultLocalStorageKey, editorMode);\n  }\n\n  onChange({ ...query, editorMode });\n}\n\nfunction getDefaultEditorMode(expr: string, defaultEditor: QueryEditorMode = QueryEditorMode.Builder): QueryEditorMode {\n  // If we already have an expression default to code view\n  if (expr != null && expr !== '') {\n    return QueryEditorMode.Code;\n  }\n\n  const value: QueryEditorMode = store.get(queryEditorModeDefaultLocalStorageKey);\n  switch (value) {\n    case QueryEditorMode.Builder:\n    case QueryEditorMode.Code:\n      return value;\n    default:\n      return defaultEditor;\n  }\n}\n\n/**\n * Returns query with defaults, and boolean true/false depending on change was required\n */\nexport function getQueryWithDefaults(\n  query: PromQuery,\n  app: CoreApp | undefined,\n  defaultEditor?: QueryEditorMode\n): PromQuery {\n  let result = query;\n\n  if (!query.editorMode) {\n    result = { ...query, editorMode: getDefaultEditorMode(query.expr, defaultEditor) };\n  }\n\n  if (query.expr == null) {\n    result = { ...result, expr: '', legendFormat: LegendFormatMode.Auto };\n  }\n\n  if (query.range == null && query.instant == null) {\n    // Default to range query\n    result = { ...result, range: true };\n\n    // In explore we default to both instant & range\n    if (app === CoreApp.Explore) {\n      result.instant = true;\n    }\n  }\n\n  // Unified Alerting does not support \"both\" for query type – fall back to \"range\".\n  const isBothInstantAndRange = query.instant && query.range;\n  if (app === CoreApp.UnifiedAlerting && isBothInstantAndRange) {\n    result = { ...result, instant: false, range: true };\n  }\n\n  return result;\n}\n","import { css } from '@emotion/css';\nimport debounce from 'debounce-promise';\nimport React, { useCallback, useState } from 'react';\nimport Highlighter from 'react-highlight-words';\n\nimport { GrafanaTheme2, SelectableValue, toOption } from '@grafana/data';\nimport { EditorField, EditorFieldGroup } from '@grafana/experimental';\nimport { AsyncSelect, FormatOptionLabelMeta, useStyles2 } from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../../datasource';\nimport { regexifyLabelValuesQueryString } from '../shared/parsingUtils';\nimport { QueryBuilderLabelFilter } from '../shared/types';\nimport { PromVisualQuery } from '../types';\n\n// We are matching words split with space\nconst splitSeparator = ' ';\n\nexport interface Props {\n  metricLookupDisabled: boolean;\n  query: PromVisualQuery;\n  onChange: (query: PromVisualQuery) => void;\n  onGetMetrics: () => Promise<SelectableValue[]>;\n  datasource: PrometheusDatasource;\n  labelsFilters: QueryBuilderLabelFilter[];\n}\n\nexport const PROMETHEUS_QUERY_BUILDER_MAX_RESULTS = 1000;\n\nexport function MetricSelect({\n  datasource,\n  query,\n  onChange,\n  onGetMetrics,\n  labelsFilters,\n  metricLookupDisabled,\n}: Props) {\n  const styles = useStyles2(getStyles);\n  const [state, setState] = useState<{\n    metrics?: Array<SelectableValue<any>>;\n    isLoading?: boolean;\n  }>({});\n\n  const customFilterOption = useCallback((option: SelectableValue<any>, searchQuery: string) => {\n    const label = option.label ?? option.value;\n    if (!label) {\n      return false;\n    }\n\n    // custom value is not a string label but a react node\n    if (!label.toLowerCase) {\n      return true;\n    }\n\n    const searchWords = searchQuery.split(splitSeparator);\n    return searchWords.reduce((acc, cur) => acc && label.toLowerCase().includes(cur.toLowerCase()), true);\n  }, []);\n\n  const formatOptionLabel = useCallback(\n    (option: SelectableValue<any>, meta: FormatOptionLabelMeta<any>) => {\n      // For newly created custom value we don't want to add highlight\n      if (option['__isNew__']) {\n        return option.label;\n      }\n\n      return (\n        <Highlighter\n          searchWords={meta.inputValue.split(splitSeparator)}\n          textToHighlight={option.label ?? ''}\n          highlightClassName={styles.highlight}\n        />\n      );\n    },\n    [styles.highlight]\n  );\n\n  const formatLabelFilters = (labelsFilters: QueryBuilderLabelFilter[]): string[] => {\n    return labelsFilters.map((label) => {\n      return `,${label.label}=\"${label.value}\"`;\n    });\n  };\n\n  /**\n   * Transform queryString and any currently set label filters into label_values() string\n   */\n  const queryAndFilterToLabelValuesString = (\n    queryString: string,\n    labelsFilters: QueryBuilderLabelFilter[] | undefined\n  ): string => {\n    return `label_values({__name__=~\".*${queryString}\"${\n      labelsFilters ? formatLabelFilters(labelsFilters).join() : ''\n    }},__name__)`;\n  };\n\n  /**\n   * Reformat the query string and label filters to return all valid results for current query editor state\n   */\n  const formatKeyValueStringsForLabelValuesQuery = (\n    query: string,\n    labelsFilters?: QueryBuilderLabelFilter[]\n  ): string => {\n    const queryString = regexifyLabelValuesQueryString(query);\n\n    return queryAndFilterToLabelValuesString(queryString, labelsFilters);\n  };\n\n  /**\n   * Gets label_values response from prometheus API for current autocomplete query string and any existing labels filters\n   */\n  const getMetricLabels = (query: string) => {\n    // Since some customers can have millions of metrics, whenever the user changes the autocomplete text we want to call the backend and request all metrics that match the current query string\n    const results = datasource.metricFindQuery(formatKeyValueStringsForLabelValuesQuery(query, labelsFilters));\n    return results.then((results) => {\n      if (results.length > PROMETHEUS_QUERY_BUILDER_MAX_RESULTS) {\n        results.splice(0, results.length - PROMETHEUS_QUERY_BUILDER_MAX_RESULTS);\n      }\n      return results.map((result) => {\n        return {\n          label: result.text,\n          value: result.text,\n        };\n      });\n    });\n  };\n\n  // When metric and label lookup is disabled we won't request labels\n  const metricLookupDisabledSearch = () => Promise.resolve([]);\n\n  const debouncedSearch = debounce(\n    (query: string) => getMetricLabels(query),\n    datasource.getDebounceTimeInMilliseconds()\n  );\n\n  return (\n    <EditorFieldGroup>\n      <EditorField label=\"Metric\">\n        <AsyncSelect\n          inputId=\"prometheus-metric-select\"\n          className={styles.select}\n          value={query.metric ? toOption(query.metric) : undefined}\n          placeholder={'Select metric'}\n          allowCustomValue\n          formatOptionLabel={formatOptionLabel}\n          filterOption={customFilterOption}\n          onOpenMenu={async () => {\n            if (metricLookupDisabled) {\n              return;\n            }\n            setState({ isLoading: true });\n            const metrics = await onGetMetrics();\n            if (metrics.length > PROMETHEUS_QUERY_BUILDER_MAX_RESULTS) {\n              metrics.splice(0, metrics.length - PROMETHEUS_QUERY_BUILDER_MAX_RESULTS);\n            }\n            setState({ metrics, isLoading: undefined });\n          }}\n          loadOptions={metricLookupDisabled ? metricLookupDisabledSearch : debouncedSearch}\n          isLoading={state.isLoading}\n          defaultOptions={state.metrics}\n          onChange={({ value }) => {\n            if (value) {\n              onChange({ ...query, metric: value });\n            }\n          }}\n        />\n      </EditorField>\n    </EditorFieldGroup>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  select: css`\n    min-width: 125px;\n  `,\n  highlight: css`\n    label: select__match-highlight;\n    background: inherit;\n    padding: inherit;\n    color: ${theme.colors.warning.contrastText};\n    background-color: ${theme.colors.warning.main};\n  `,\n});\n","import debounce from 'debounce-promise';\nimport React, { useState } from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { AccessoryButton, InputGroup } from '@grafana/experimental';\nimport { AsyncSelect, Select } from '@grafana/ui';\n\nimport { QueryBuilderLabelFilter } from '../shared/types';\n\nimport { PROMETHEUS_QUERY_BUILDER_MAX_RESULTS } from './MetricSelect';\n\nexport interface Props {\n  defaultOp: string;\n  item: Partial<QueryBuilderLabelFilter>;\n  onChange: (value: QueryBuilderLabelFilter) => void;\n  onGetLabelNames: (forLabel: Partial<QueryBuilderLabelFilter>) => Promise<SelectableValue[]>;\n  onGetLabelValues: (forLabel: Partial<QueryBuilderLabelFilter>) => Promise<SelectableValue[]>;\n  onDelete: () => void;\n  invalidLabel?: boolean;\n  invalidValue?: boolean;\n  getLabelValuesAutofillSuggestions: (query: string, labelName?: string) => Promise<SelectableValue[]>;\n  debounceDuration: number;\n}\n\nexport function LabelFilterItem({\n  item,\n  defaultOp,\n  onChange,\n  onDelete,\n  onGetLabelNames,\n  onGetLabelValues,\n  invalidLabel,\n  invalidValue,\n  getLabelValuesAutofillSuggestions,\n  debounceDuration,\n}: Props) {\n  const [state, setState] = useState<{\n    labelNames?: SelectableValue[];\n    labelValues?: SelectableValue[];\n    isLoadingLabelNames?: boolean;\n    isLoadingLabelValues?: boolean;\n  }>({});\n\n  const isMultiSelect = (operator = item.op) => {\n    return operators.find((op) => op.label === operator)?.isMultiValue;\n  };\n\n  const getSelectOptionsFromString = (item?: string): string[] => {\n    if (item) {\n      if (item.indexOf('|') > 0) {\n        return item.split('|');\n      }\n      return [item];\n    }\n    return [];\n  };\n\n  const labelValueSearch = debounce(\n    (query: string) => getLabelValuesAutofillSuggestions(query, item.label),\n    debounceDuration\n  );\n\n  return (\n    <div data-testid=\"prometheus-dimensions-filter-item\">\n      <InputGroup>\n        {/* Label name select, loads all values at once */}\n        <Select\n          placeholder=\"Select label\"\n          aria-label={selectors.components.QueryBuilder.labelSelect}\n          inputId=\"prometheus-dimensions-filter-item-key\"\n          width=\"auto\"\n          value={item.label ? toOption(item.label) : null}\n          allowCustomValue\n          onOpenMenu={async () => {\n            setState({ isLoadingLabelNames: true });\n            const labelNames = await onGetLabelNames(item);\n            setState({ labelNames, isLoadingLabelNames: undefined });\n          }}\n          isLoading={state.isLoadingLabelNames ?? false}\n          options={state.labelNames}\n          onChange={(change) => {\n            if (change.label) {\n              onChange({\n                ...item,\n                op: item.op ?? defaultOp,\n                label: change.label,\n                // eslint-ignore\n              } as QueryBuilderLabelFilter);\n            }\n          }}\n          invalid={invalidLabel}\n        />\n\n        {/* Operator select i.e.   = =~ != !~   */}\n        <Select\n          aria-label={selectors.components.QueryBuilder.matchOperatorSelect}\n          className=\"query-segment-operator\"\n          value={toOption(item.op ?? defaultOp)}\n          options={operators}\n          width=\"auto\"\n          onChange={(change) => {\n            if (change.value != null) {\n              onChange({\n                ...item,\n                op: change.value,\n                value: isMultiSelect(change.value) ? item.value : getSelectOptionsFromString(item?.value)[0],\n                // eslint-ignore\n              } as QueryBuilderLabelFilter);\n            }\n          }}\n        />\n\n        {/* Label value async select: autocomplete calls prometheus API */}\n        <AsyncSelect\n          placeholder=\"Select value\"\n          aria-label={selectors.components.QueryBuilder.valueSelect}\n          inputId=\"prometheus-dimensions-filter-item-value\"\n          width=\"auto\"\n          value={\n            isMultiSelect()\n              ? getSelectOptionsFromString(item?.value).map(toOption)\n              : getSelectOptionsFromString(item?.value).map(toOption)[0]\n          }\n          allowCustomValue\n          onOpenMenu={async () => {\n            setState({ isLoadingLabelValues: true });\n            const labelValues = await onGetLabelValues(item);\n            if (labelValues.length > PROMETHEUS_QUERY_BUILDER_MAX_RESULTS) {\n              labelValues.splice(0, labelValues.length - PROMETHEUS_QUERY_BUILDER_MAX_RESULTS);\n            }\n            setState({\n              ...state,\n              labelValues,\n              isLoadingLabelValues: undefined,\n            });\n          }}\n          defaultOptions={state.labelValues}\n          isMulti={isMultiSelect()}\n          isLoading={state.isLoadingLabelValues}\n          loadOptions={labelValueSearch}\n          onChange={(change) => {\n            if (change.value) {\n              onChange({\n                ...item,\n                value: change.value,\n                op: item.op ?? defaultOp,\n                // eslint-ignore\n              } as QueryBuilderLabelFilter);\n            } else {\n              const changes = change\n                .map((change: { label?: string }) => {\n                  return change.label;\n                })\n                .join('|');\n              // eslint-ignore\n              onChange({ ...item, value: changes, op: item.op ?? defaultOp } as QueryBuilderLabelFilter);\n            }\n          }}\n          invalid={invalidValue}\n        />\n        <AccessoryButton aria-label=\"remove\" icon=\"times\" variant=\"secondary\" onClick={onDelete} />\n      </InputGroup>\n    </div>\n  );\n}\n\nconst operators = [\n  { label: '=', value: '=', isMultiValue: false },\n  { label: '!=', value: '!=', isMultiValue: false },\n  { label: '<', value: '<', isMultiValue: false },\n  { label: '>', value: '>', isMultiValue: false },\n  { label: '=~', value: '=~', isMultiValue: true },\n  { label: '!~', value: '!~', isMultiValue: true },\n];\n","import { isEqual } from 'lodash';\nimport React, { useEffect, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorFieldGroup, EditorField, EditorList } from '@grafana/experimental';\n\nimport { QueryBuilderLabelFilter } from '../shared/types';\n\nimport { LabelFilterItem } from './LabelFilterItem';\n\nexport const MISSING_LABEL_FILTER_ERROR_MESSAGE = 'Select at least 1 label filter (label and value)';\n\nexport interface Props {\n  labelsFilters: QueryBuilderLabelFilter[];\n  onChange: (labelFilters: Array<Partial<QueryBuilderLabelFilter>>) => void;\n  onGetLabelNames: (forLabel: Partial<QueryBuilderLabelFilter>) => Promise<SelectableValue[]>;\n  onGetLabelValues: (forLabel: Partial<QueryBuilderLabelFilter>) => Promise<SelectableValue[]>;\n  /** If set to true, component will show error message until at least 1 filter is selected */\n  labelFilterRequired?: boolean;\n  getLabelValuesAutofillSuggestions: (query: string, labelName?: string) => Promise<SelectableValue[]>;\n  debounceDuration: number;\n}\n\nexport function LabelFilters({\n  labelsFilters,\n  onChange,\n  onGetLabelNames,\n  onGetLabelValues,\n  labelFilterRequired,\n  getLabelValuesAutofillSuggestions,\n  debounceDuration,\n}: Props) {\n  const defaultOp = '=';\n  const [items, setItems] = useState<Array<Partial<QueryBuilderLabelFilter>>>([{ op: defaultOp }]);\n\n  useEffect(() => {\n    if (labelsFilters.length > 0) {\n      setItems(labelsFilters);\n    } else {\n      setItems([{ op: defaultOp }]);\n    }\n  }, [labelsFilters]);\n\n  const onLabelsChange = (newItems: Array<Partial<QueryBuilderLabelFilter>>) => {\n    setItems(newItems);\n\n    // Extract full label filters with both label & value\n    const newLabels = newItems.filter((x) => x.label != null && x.value != null);\n    if (!isEqual(newLabels, labelsFilters)) {\n      onChange(newLabels);\n    }\n  };\n\n  const hasLabelFilter = items.some((item) => item.label && item.value);\n\n  return (\n    <EditorFieldGroup>\n      <EditorField\n        label=\"Label filters\"\n        error={MISSING_LABEL_FILTER_ERROR_MESSAGE}\n        invalid={labelFilterRequired && !hasLabelFilter}\n      >\n        <EditorList\n          items={items}\n          onChange={onLabelsChange}\n          renderItem={(item: Partial<QueryBuilderLabelFilter>, onChangeItem, onDelete) => (\n            <LabelFilterItem\n              debounceDuration={debounceDuration}\n              item={item}\n              defaultOp={defaultOp}\n              onChange={onChangeItem}\n              onDelete={onDelete}\n              onGetLabelNames={onGetLabelNames}\n              onGetLabelValues={onGetLabelValues}\n              invalidLabel={labelFilterRequired && !item.label}\n              invalidValue={labelFilterRequired && !item.value}\n              getLabelValuesAutofillSuggestions={getLabelValuesAutofillSuggestions}\n            />\n          )}\n        />\n      </EditorField>\n    </EditorFieldGroup>\n  );\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { Icon, useStyles2 } from '@grafana/ui';\n\nexport interface Props {\n  feedbackUrl?: string;\n}\n\nexport function FeedbackLink({ feedbackUrl }: Props) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Stack gap={1}>\n      <a\n        href={feedbackUrl}\n        className={styles.link}\n        title=\"The Metric Encyclopedia is new, please let us know how we can improve it\"\n        target=\"_blank\"\n        rel=\"noreferrer noopener\"\n      >\n        <Icon name=\"comment-alt-message\" /> Give feedback\n      </a>\n    </Stack>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    link: css({\n      color: theme.colors.text.secondary,\n      fontSize: theme.typography.bodySmall.fontSize,\n      ':hover': {\n        color: theme.colors.text.link,\n      },\n    }),\n  };\n}\n","import { css, cx } from '@emotion/css';\nimport uFuzzy from '@leeoniya/ufuzzy';\nimport debounce from 'debounce-promise';\nimport { debounce as debounceLodash } from 'lodash';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { EditorField } from '@grafana/experimental';\nimport { reportInteraction } from '@grafana/runtime';\nimport {\n  Button,\n  CellProps,\n  Column,\n  InlineField,\n  Switch,\n  Input,\n  InteractiveTable,\n  Modal,\n  MultiSelect,\n  Select,\n  Spinner,\n  useTheme2,\n} from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../../datasource';\nimport { getMetadataHelp, getMetadataType } from '../../language_provider';\nimport { promQueryModeller } from '../PromQueryModeller';\nimport { regexifyLabelValuesQueryString } from '../shared/parsingUtils';\nimport { PromVisualQuery } from '../types';\n\nimport { FeedbackLink } from './FeedbackLink';\n\ntype Props = {\n  datasource: PrometheusDatasource;\n  isOpen: boolean;\n  query: PromVisualQuery;\n  onClose: () => void;\n  onChange: (query: PromVisualQuery) => void;\n};\n\ntype MetricsData = MetricData[];\n\ntype MetricData = {\n  value: string;\n  type?: string;\n  description?: string;\n};\n\ntype PromFilterOption = {\n  value: string;\n  description: string;\n};\n\nconst promTypes: PromFilterOption[] = [\n  {\n    value: 'counter',\n    description:\n      'A cumulative metric that represents a single monotonically increasing counter whose value can only increase or be reset to zero on restart.',\n  },\n  {\n    value: 'gauge',\n    description: 'A metric that represents a single numerical value that can arbitrarily go up and down.',\n  },\n  {\n    value: 'histogram',\n    description:\n      'A histogram samples observations (usually things like request durations or response sizes) and counts them in configurable buckets.',\n  },\n  {\n    value: 'summary',\n    description:\n      'A summary samples observations (usually things like request durations and response sizes) and can calculate configurable quantiles over a sliding time window.',\n  },\n];\n\nexport const placeholders = {\n  browse: 'Search metrics by name',\n  metadataSearchSwitch: 'Search by metadata type and description in addition to name',\n  type: 'Select...',\n  variables: 'Select...',\n  excludeNoMetadata: 'Exclude results with no metadata',\n  setUseBackend: 'Use the backend to browse metrics',\n};\n\nexport const DEFAULT_RESULTS_PER_PAGE = 10;\n\nconst uf = new uFuzzy({\n  intraMode: 1,\n  intraIns: 1,\n  intraSub: 1,\n  intraTrn: 1,\n  intraDel: 1,\n});\n\nfunction fuzzySearch(haystack: string[], query: string, setter: React.Dispatch<React.SetStateAction<number[]>>) {\n  const idxs = uf.filter(haystack, query);\n  idxs && setter(idxs);\n}\n\nconst debouncedFuzzySearch = debounceLodash(fuzzySearch, 300);\n\nexport const MetricEncyclopediaModal = (props: Props) => {\n  const { datasource, isOpen, onClose, onChange, query } = props;\n\n  const [variables, setVariables] = useState<Array<SelectableValue<string>>>([]);\n\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n\n  // metric list\n  const [metrics, setMetrics] = useState<MetricsData>([]);\n  const [hasMetadata, setHasMetadata] = useState<boolean>(true);\n  const [metaHaystack, setMetaHaystack] = useState<string[]>([]);\n  const [nameHaystack, setNameHaystack] = useState<string[]>([]);\n\n  // pagination\n  const [resultsPerPage, setResultsPerPage] = useState<number>(DEFAULT_RESULTS_PER_PAGE);\n  const [pageNum, setPageNum] = useState<number>(1);\n\n  // filters\n  const [fuzzySearchQuery, setFuzzySearchQuery] = useState<string>('');\n  const [fuzzyMetaSearchResults, setFuzzyMetaSearchResults] = useState<number[]>([]);\n  const [fuzzyNameSearchResults, setFuzzyNameSearchResults] = useState<number[]>([]);\n  const [fullMetaSearch, setFullMetaSearch] = useState<boolean>(false);\n  const [excludeNullMetadata, setExcludeNullMetadata] = useState<boolean>(false);\n  const [selectedTypes, setSelectedTypes] = useState<Array<SelectableValue<string>>>([]);\n  const [letterSearch, setLetterSearch] = useState<string | null>(null);\n\n  const [totalMetricCount, setTotalMetricCount] = useState<number>(0);\n  const [filteredMetricCount, setFilteredMetricCount] = useState<number>();\n  // backend search metric names by text\n  const [useBackend, setUseBackend] = useState<boolean>(false);\n  const [disableTextWrap, setDisableTextWrap] = useState<boolean>(false);\n\n  const updateMetricsMetadata = useCallback(async () => {\n    // *** Loading Gif\n    setIsLoading(true);\n\n    // Makes sure we loaded the metadata for metrics. Usually this is done in the start() method of the provider but we\n    // don't use it with the visual builder and there is no need to run all the start() setup anyway.\n    if (!datasource.languageProvider.metricsMetadata) {\n      await datasource.languageProvider.loadMetricsMetadata();\n    }\n\n    // Error handling for when metrics metadata returns as undefined\n    // *** Will have to handle metadata filtering if this happens\n    // *** only display metrics fuzzy search, filter and pagination\n    if (!datasource.languageProvider.metricsMetadata) {\n      setHasMetadata(false);\n      datasource.languageProvider.metricsMetadata = {};\n    }\n\n    // filter by adding the query.labels to the search?\n    // *** do this in the filter???\n    let metrics;\n    if (query.labels.length > 0) {\n      const expr = promQueryModeller.renderLabels(query.labels);\n      metrics = (await datasource.languageProvider.getSeries(expr, true))['__name__'] ?? [];\n    } else {\n      metrics = (await datasource.languageProvider.getLabelValues('__name__')) ?? [];\n    }\n\n    let haystackMetaData: string[] = [];\n    let haystackNameData: string[] = [];\n    let metricsData: MetricsData = metrics.map((m) => {\n      const type = getMetadataType(m, datasource.languageProvider.metricsMetadata!);\n      const description = getMetadataHelp(m, datasource.languageProvider.metricsMetadata!);\n\n      // string[] = name + type + description\n      haystackMetaData.push(`${m} ${type} ${description}`);\n      haystackNameData.push(m);\n      return {\n        value: m,\n        type: type,\n        description: description,\n      };\n    });\n\n    // setting this by the backend if useBackend is true\n    setMetrics(metricsData);\n    setMetaHaystack(haystackMetaData);\n    setNameHaystack(haystackNameData);\n\n    setVariables(\n      datasource.getVariables().map((v) => {\n        return {\n          value: v,\n          label: v,\n        };\n      })\n    );\n\n    setTotalMetricCount(metricsData.length);\n    setFilteredMetricCount(metricsData.length);\n    setIsLoading(false);\n  }, [query, datasource]);\n\n  useEffect(() => {\n    updateMetricsMetadata();\n  }, [updateMetricsMetadata]);\n\n  const theme = useTheme2();\n  const styles = getStyles(theme, disableTextWrap);\n\n  const typeOptions: SelectableValue[] = promTypes.map((t: PromFilterOption) => {\n    return {\n      value: t.value,\n      label: t.value,\n      description: t.description,\n    };\n  });\n\n  function calculatePageList(metrics: MetricsData, resultsPerPage: number) {\n    if (!metrics.length) {\n      return [];\n    }\n\n    const calcResultsPerPage: number = resultsPerPage === 0 ? 1 : resultsPerPage;\n\n    const pages = Math.floor(filterMetrics(metrics).length / calcResultsPerPage) + 1;\n\n    return [...Array(pages).keys()].map((i) => i + 1);\n  }\n\n  function sliceMetrics(metrics: MetricsData, pageNum: number, resultsPerPage: number) {\n    const calcResultsPerPage: number = resultsPerPage === 0 ? 1 : resultsPerPage;\n    const start: number = pageNum === 1 ? 0 : (pageNum - 1) * calcResultsPerPage;\n    const end: number = start + calcResultsPerPage;\n    return metrics.slice(start, end);\n  }\n\n  function hasMetaDataFilters() {\n    return selectedTypes.length > 0;\n  }\n\n  /**\n   * Filter\n   *\n   * @param metrics\n   * @param skipLetterSearch used to show the alphabet letters as clickable before filtering out letters (needs to be refactored)\n   * @returns\n   */\n  function filterMetrics(metrics: MetricsData, skipLetterSearch?: boolean): MetricsData {\n    let filteredMetrics: MetricsData = metrics;\n\n    if (fuzzySearchQuery) {\n      filteredMetrics = filteredMetrics.filter((m: MetricData, idx) => {\n        if (useBackend) {\n          // skip for backend!\n          return true;\n        } else if (fullMetaSearch) {\n          return fuzzyMetaSearchResults.includes(idx);\n        } else {\n          return fuzzyNameSearchResults.includes(idx);\n        }\n      });\n    }\n\n    if (letterSearch && !skipLetterSearch) {\n      filteredMetrics = filteredMetrics.filter((m: MetricData, idx) => {\n        const letters: string[] = [letterSearch, letterSearch.toLowerCase()];\n        return letters.includes(m.value[0]);\n      });\n    }\n\n    if (selectedTypes.length > 0 && !useBackend) {\n      filteredMetrics = filteredMetrics.filter((m: MetricData, idx) => {\n        // Matches type\n        const matchesSelectedType = selectedTypes.some((t) => t.value === m.type);\n\n        // missing type\n        const hasNoType = !m.type;\n\n        return matchesSelectedType || (hasNoType && !excludeNullMetadata);\n      });\n    }\n\n    if (excludeNullMetadata) {\n      filteredMetrics = filteredMetrics.filter((m: MetricData) => {\n        return m.type !== undefined && m.description !== undefined;\n      });\n    }\n\n    return filteredMetrics;\n  }\n\n  /**\n   * The filtered and paginated metrics displayed in the modal\n   * */\n  function displayedMetrics(metrics: MetricsData) {\n    const filteredSorted: MetricsData = filterMetrics(metrics).sort(alphabetically(true, hasMetaDataFilters()));\n\n    if (filteredMetricCount !== filteredSorted.length && filteredSorted.length !== 0) {\n      setFilteredMetricCount(filteredSorted.length);\n    }\n\n    const displayedMetrics: MetricsData = sliceMetrics(filteredSorted, pageNum, resultsPerPage);\n\n    return displayedMetrics;\n  }\n  /**\n   * The backend debounced search\n   */\n  const debouncedBackendSearch = useMemo(\n    () =>\n      debounce(async (metricText: string) => {\n        setIsLoading(true);\n        const queryString = regexifyLabelValuesQueryString(metricText);\n\n        const labelsParams = query.labels.map((label) => {\n          return `,${label.label}=\"${label.value}\"`;\n        });\n\n        const params = `label_values({__name__=~\".*${queryString}\"${\n          query.labels ? labelsParams.join() : ''\n        }},__name__)`;\n\n        const results = datasource.metricFindQuery(params);\n\n        const metrics = await results.then((results) => {\n          return results.map((result) => {\n            return {\n              value: result.text,\n            };\n          });\n        });\n\n        setMetrics(metrics);\n        setFilteredMetricCount(metrics.length);\n        setIsLoading(false);\n      }, datasource.getDebounceTimeInMilliseconds()),\n    [datasource, query.labels]\n  );\n\n  function letterSearchComponent() {\n    const alphabetCheck: { [char: string]: number } = {\n      A: 0,\n      B: 0,\n      C: 0,\n      D: 0,\n      E: 0,\n      F: 0,\n      G: 0,\n      H: 0,\n      I: 0,\n      J: 0,\n      K: 0,\n      L: 0,\n      M: 0,\n      N: 0,\n      O: 0,\n      P: 0,\n      Q: 0,\n      R: 0,\n      S: 0,\n      T: 0,\n      U: 0,\n      V: 0,\n      W: 0,\n      X: 0,\n      Y: 0,\n      Z: 0,\n    };\n\n    filterMetrics(metrics, true).forEach((m: MetricData, idx) => {\n      const metricFirstLetter = m.value[0].toUpperCase();\n\n      if (alphabet.includes(metricFirstLetter) && !alphabetCheck[metricFirstLetter]) {\n        alphabetCheck[metricFirstLetter] += 1;\n      }\n    });\n\n    // return the alphabet components with the correct style and behavior\n    return Object.keys(alphabetCheck).map((letter: string) => {\n      // const active: boolean = .some((m: MetricData) => {\n      //   return m.value[0] === letter || m.value[0] === letter?.toLowerCase();\n      // });\n      const active: boolean = alphabetCheck[letter] > 0;\n      // starts with letter search\n      // filter by starts with letter\n      // if same letter searched null out remove letter search\n      function updateLetterSearch() {\n        if (letterSearch === letter) {\n          setLetterSearch(null);\n        } else {\n          setLetterSearch(letter);\n        }\n        setPageNum(1);\n      }\n      // selected letter to filter by\n      const selectedClass: string = letterSearch === letter ? styles.selAlpha : '';\n      // these letters are represented in the list of metrics\n      const activeClass: string = active ? styles.active : styles.gray;\n\n      return (\n        <span\n          onClick={active ? updateLetterSearch : () => {}}\n          className={`${selectedClass} ${activeClass}`}\n          key={letter}\n          data-testid={'letter-' + letter}\n        >\n          {letter + ' '}\n          {/* {idx !== coll.length - 1 ? '|': ''} */}\n        </span>\n      );\n    });\n  }\n\n  const MAXIMUM_RESULTS_PER_PAGE = 1000;\n  const calculateResultsPerPage = (results: number) => {\n    if (results < 1) {\n      return 1;\n    }\n\n    if (results > MAXIMUM_RESULTS_PER_PAGE) {\n      return MAXIMUM_RESULTS_PER_PAGE;\n    }\n\n    return results ?? 10;\n  };\n\n  const ButtonCell = ({\n    row: {\n      original: { value },\n    },\n  }: CellProps<MetricData, void>) => {\n    return (\n      <Button\n        size=\"sm\"\n        variant={'secondary'}\n        fill={'solid'}\n        aria-label=\"use this metric button\"\n        data-testid={testIds.useMetric}\n        onClick={() => {\n          onChange({ ...query, metric: value });\n          reportInteraction('grafana_prom_metric_encycopedia_tracking', {\n            metric: value,\n            hasVariables: variables.length > 0,\n            hasMetadata: hasMetadata,\n            totalMetricCount: metrics.length,\n            fuzzySearchQuery: fuzzySearchQuery,\n            fullMetaSearch: fullMetaSearch,\n            selectedTypes: selectedTypes,\n            letterSearch: letterSearch,\n          });\n          onClose();\n        }}\n      >\n        Use this metric\n      </Button>\n    );\n  };\n\n  function tableResults(metrics: MetricsData) {\n    const tableData: MetricsData = metrics;\n\n    const columns: Array<Column<MetricData>> = [\n      { id: '', header: 'Select', cell: ButtonCell },\n      { id: 'value', header: 'Name' },\n      { id: 'type', header: 'Type' },\n      { id: 'description', header: 'Description' },\n    ];\n\n    return <InteractiveTable className={styles.table} columns={columns} data={tableData} getRowId={(r) => r.value} />;\n  }\n\n  function fuzzySearchCallback(query: string, fullMetaSearchVal: boolean) {\n    if (useBackend && query === '') {\n      // get all metrics data if a user erases everything in the input\n      updateMetricsMetadata();\n    } else if (useBackend) {\n      debouncedBackendSearch(query);\n    } else {\n      // search either the names or all metadata\n      // fuzzy search go!\n\n      if (fullMetaSearchVal) {\n        debouncedFuzzySearch(metaHaystack, query, setFuzzyMetaSearchResults);\n      } else {\n        debouncedFuzzySearch(nameHaystack, query, setFuzzyNameSearchResults);\n      }\n    }\n  }\n\n  return (\n    <Modal\n      data-testid={testIds.metricModal}\n      isOpen={isOpen}\n      title=\"Browse metrics\"\n      onDismiss={onClose}\n      aria-label=\"Metric Encyclopedia\"\n      className={styles.modal}\n    >\n      <div className={styles.inputWrapper}>\n        <div className={cx(styles.inputItem, styles.inputItemFirst)}>\n          <EditorField label=\"Search metrics\">\n            <Input\n              data-testid={testIds.searchMetric}\n              placeholder={placeholders.browse}\n              value={fuzzySearchQuery}\n              onInput={(e) => {\n                const value = e.currentTarget.value ?? '';\n                setFuzzySearchQuery(value);\n\n                fuzzySearchCallback(value, fullMetaSearch);\n\n                setPageNum(1);\n              }}\n            />\n          </EditorField>\n        </div>\n        <div className={styles.inputItem}>\n          <EditorField label=\"Filter by type\">\n            <MultiSelect\n              data-testid={testIds.selectType}\n              inputId=\"my-select\"\n              options={typeOptions}\n              value={selectedTypes}\n              disabled={!hasMetadata || useBackend}\n              placeholder={placeholders.type}\n              onChange={(v) => {\n                // *** Filter by type\n                // *** always include metrics without metadata but label it as unknown type\n                // Consider tabs select instead of actual select or multi select\n                setSelectedTypes(v);\n                setPageNum(1);\n              }}\n            />\n          </EditorField>\n        </div>\n        <div className={styles.inputItem}>\n          <EditorField label=\"Select template variables\">\n            <Select\n              inputId=\"my-select\"\n              options={variables}\n              value={''}\n              placeholder={placeholders.variables}\n              onChange={(v) => {\n                const value: string = v.value ?? '';\n                onChange({ ...query, metric: value });\n                onClose();\n              }}\n            />\n          </EditorField>\n        </div>\n      </div>\n\n      <div className={styles.selectWrapper}>\n        <EditorField label=\"Search Settings\">\n          <>\n            <div className={styles.selectItem}>\n              <Switch\n                data-testid={testIds.searchWithMetadata}\n                value={fullMetaSearch}\n                disabled={useBackend || !hasMetadata}\n                onChange={() => {\n                  const newVal = !fullMetaSearch;\n                  setFullMetaSearch(newVal);\n\n                  fuzzySearchCallback(fuzzySearchQuery, newVal);\n\n                  setPageNum(1);\n                }}\n              />\n              <p className={styles.selectItemLabel}>{placeholders.metadataSearchSwitch}</p>\n            </div>\n            <div className={styles.selectItem}>\n              <Switch\n                data-testid={testIds.setUseBackend}\n                value={useBackend}\n                onChange={() => {\n                  const newVal = !useBackend;\n                  setUseBackend(newVal);\n                  if (newVal === false) {\n                    // rebuild the metrics metadata if we turn off useBackend\n                    updateMetricsMetadata();\n                  } else {\n                    // check if there is text in the browse search and update\n                    if (fuzzySearchQuery !== '') {\n                      debouncedBackendSearch(fuzzySearchQuery);\n                    }\n                    // otherwise wait for user typing\n                  }\n\n                  setPageNum(1);\n                }}\n              />\n              <p className={styles.selectItemLabel}>{placeholders.setUseBackend}</p>\n            </div>\n          </>\n        </EditorField>\n      </div>\n      <h4 className={styles.resultsHeading}>Results</h4>\n      <div className={styles.resultsData}>\n        <div className={styles.resultsDataCount}>\n          Showing {filteredMetricCount} of {totalMetricCount} total metrics.{' '}\n          {isLoading && <Spinner className={styles.loadingSpinner} />}\n        </div>\n        {query.labels.length > 0 && (\n          <p className={styles.resultsDataFiltered}>\n            These metrics have been pre-filtered by labels chosen in the label filters.\n          </p>\n        )}\n      </div>\n\n      <div className={styles.alphabetRow}>\n        <div>{letterSearchComponent()}</div>\n        <div className={styles.alphabetRowToggles}>\n          <div className={styles.selectItem}>\n            <Switch value={disableTextWrap} onChange={() => setDisableTextWrap((p) => !p)} />\n            <p className={styles.selectItemLabel}>Disable text wrap</p>\n          </div>\n          <div className={styles.selectItem}>\n            <Switch\n              value={excludeNullMetadata}\n              disabled={useBackend || !hasMetadata}\n              onChange={() => {\n                setExcludeNullMetadata(!excludeNullMetadata);\n                setPageNum(1);\n              }}\n            />\n            <p className={styles.selectItemLabel}>{placeholders.excludeNoMetadata}</p>\n          </div>\n        </div>\n      </div>\n\n      <div className={styles.results}>{metrics && tableResults(displayedMetrics(metrics))}</div>\n\n      <div className={styles.pageSettingsWrapper}>\n        <div className={styles.pageSettings}>\n          <InlineField label=\"Select page\" labelWidth={20} className=\"query-keyword\">\n            <Select\n              data-testid={testIds.searchPage}\n              options={calculatePageList(metrics, resultsPerPage).map((p) => {\n                return { value: p, label: '' + p };\n              })}\n              value={pageNum ?? 1}\n              placeholder=\"select page\"\n              width={20}\n              onChange={(e) => {\n                const value = e.value ?? 1;\n                setPageNum(value);\n              }}\n            />\n          </InlineField>\n\n          <InlineField\n            label=\"# results per page\"\n            tooltip={'The maximum results per page is ' + MAXIMUM_RESULTS_PER_PAGE}\n            labelWidth={20}\n          >\n            <Input\n              data-testid={testIds.resultsPerPage}\n              value={calculateResultsPerPage(resultsPerPage)}\n              placeholder=\"results per page\"\n              width={20}\n              onInput={(e) => {\n                const value = +e.currentTarget.value;\n\n                if (isNaN(value)) {\n                  return;\n                }\n\n                setResultsPerPage(value);\n              }}\n            />\n          </InlineField>\n        </div>\n\n        <FeedbackLink feedbackUrl=\"https://forms.gle/DEMAJHoAMpe3e54CA\" />\n      </div>\n    </Modal>\n  );\n};\n\nfunction alphabetically(ascending: boolean, metadataFilters: boolean) {\n  return function (a: MetricData, b: MetricData) {\n    // equal items sort equally\n    if (a.value === b.value) {\n      return 0;\n    }\n\n    // *** NO METADATA? SORT LAST\n    // undefined metadata sort after anything else\n    // if filters are on\n    if (metadataFilters) {\n      if (a.type === undefined) {\n        return 1;\n      }\n      if (b.type === undefined) {\n        return -1;\n      }\n    }\n\n    // otherwise, if we're ascending, lowest sorts first\n    if (ascending) {\n      return a.value < b.value ? -1 : 1;\n    }\n\n    // if descending, highest sorts first\n    return a.value < b.value ? 1 : -1;\n  };\n}\n\nconst getStyles = (theme: GrafanaTheme2, disableTextWrap: boolean) => {\n  return {\n    modal: css`\n      width: 85vw;\n      ${theme.breakpoints.down('md')} {\n        width: 100%;\n      }\n    `,\n    inputWrapper: css`\n      display: flex;\n      flex-direction: row;\n      flex-wrap: wrap;\n      gap: ${theme.spacing(2)};\n      margin-bottom: ${theme.spacing(2)};\n    `,\n    inputItemFirst: css`\n      flex-basis: 40%;\n    `,\n    inputItem: css`\n      flex-grow: 1;\n      flex-basis: 20%;\n      ${theme.breakpoints.down('md')} {\n        min-width: 100%;\n      }\n    `,\n    selectWrapper: css`\n      margin-bottom: ${theme.spacing(2)};\n    `,\n    selectItem: css`\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n    `,\n    selectItemLabel: css`\n      margin: 0 0 0 ${theme.spacing(1)};\n      align-self: center;\n      color: ${theme.colors.text.secondary};\n    `,\n    resultsHeading: css`\n      margin: 0 0 0 0;\n    `,\n    resultsData: css`\n      margin: 0 0 ${theme.spacing(1)} 0;\n    `,\n    resultsDataCount: css`\n      margin: 0;\n    `,\n    resultsDataFiltered: css`\n      margin: 0;\n      color: ${theme.colors.warning.main};\n    `,\n    alphabetRow: css`\n      display: flex;\n      flex-direction: row;\n      flex-wrap: wrap;\n      justify-content: space-between;\n      align-items: center;\n      column-gap: ${theme.spacing(1)};\n      margin-bottom: ${theme.spacing(1)};\n    `,\n    alphabetRowToggles: css`\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n      flex-wrap: wrap;\n      column-gap: ${theme.spacing(1)};\n    `,\n    results: css`\n      height: 300px;\n      overflow-y: scroll;\n    `,\n    pageSettingsWrapper: css`\n      padding-top: ${theme.spacing(1.5)};\n      display: flex;\n      flex-direction: row;\n      flex-wrap: wrap;\n      justify-content: space-between;\n      align-items: center;\n    `,\n    pageSettings: css`\n      display: flex;\n      flex-direction: row;\n      flex-wrap: wrap;\n      align-items: center;\n    `,\n    selAlpha: css`\n      cursor: pointer;\n      color: #6e9fff;\n    `,\n    active: css`\n      cursor: pointer;\n    `,\n    gray: css`\n      color: grey;\n    `,\n    loadingSpinner: css`\n      display: inline-block;\n    `,\n    table: css`\n      white-space: ${disableTextWrap ? 'nowrap' : 'normal'};\n      td {\n        vertical-align: baseline;\n      }\n    `,\n  };\n};\n\nexport const testIds = {\n  metricModal: 'metric-modal',\n  searchMetric: 'search-metric',\n  searchWithMetadata: 'search-with-metadata',\n  selectType: 'select-type',\n  metricCard: 'metric-card',\n  useMetric: 'use-metric',\n  searchPage: 'search-page',\n  resultsPerPage: 'results-per-page',\n  setUseBackend: 'set-use-backend',\n};\n\nconst alphabet = [\n  'A',\n  'B',\n  'C',\n  'D',\n  'E',\n  'F',\n  'G',\n  'H',\n  'I',\n  'J',\n  'K',\n  'L',\n  'M',\n  'N',\n  'O',\n  'P',\n  'Q',\n  'R',\n  'S',\n  'T',\n  'U',\n  'V',\n  'W',\n  'X',\n  'Y',\n  'Z',\n];\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2, toOption } from '@grafana/data';\nimport { EditorRows, FlexItem } from '@grafana/experimental';\nimport { AutoSizeInput, IconButton, Select, useStyles2 } from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../../datasource';\nimport { binaryScalarDefs } from '../binaryScalarOperations';\nimport { PromVisualQueryBinary } from '../types';\n\nimport { PromQueryBuilder } from './PromQueryBuilder';\n\nexport interface Props {\n  nestedQuery: PromVisualQueryBinary;\n  datasource: PrometheusDatasource;\n  index: number;\n  onChange: (index: number, update: PromVisualQueryBinary) => void;\n  onRemove: (index: number) => void;\n  onRunQuery: () => void;\n  showExplain: boolean;\n}\n\nexport const NestedQuery = React.memo<Props>((props) => {\n  const { nestedQuery, index, datasource, onChange, onRemove, onRunQuery, showExplain } = props;\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.card}>\n      <div className={styles.header}>\n        <div className={styles.name}>Operator</div>\n        <Select\n          width=\"auto\"\n          options={operators}\n          value={toOption(nestedQuery.operator)}\n          onChange={(value) => {\n            onChange(index, {\n              ...nestedQuery,\n              operator: value.value!,\n            });\n          }}\n        />\n        <div className={styles.name}>Vector matches</div>\n        <div className={styles.vectorMatchWrapper}>\n          <Select<PromVisualQueryBinary['vectorMatchesType']>\n            width=\"auto\"\n            value={nestedQuery.vectorMatchesType || 'on'}\n            allowCustomValue\n            options={[\n              { value: 'on', label: 'on' },\n              { value: 'ignoring', label: 'ignoring' },\n            ]}\n            onChange={(val) => {\n              onChange(index, {\n                ...nestedQuery,\n                vectorMatchesType: val.value,\n              });\n            }}\n          />\n          <AutoSizeInput\n            className={styles.vectorMatchInput}\n            minWidth={20}\n            defaultValue={nestedQuery.vectorMatches}\n            onCommitChange={(evt) => {\n              onChange(index, {\n                ...nestedQuery,\n                vectorMatches: evt.currentTarget.value,\n                vectorMatchesType: nestedQuery.vectorMatchesType || 'on',\n              });\n            }}\n          />\n        </div>\n        <FlexItem grow={1} />\n        <IconButton name=\"times\" size=\"sm\" onClick={() => onRemove(index)} />\n      </div>\n      <div className={styles.body}>\n        <EditorRows>\n          <PromQueryBuilder\n            showExplain={showExplain}\n            query={nestedQuery.query}\n            datasource={datasource}\n            onRunQuery={onRunQuery}\n            onChange={(update) => {\n              onChange(index, { ...nestedQuery, query: update });\n            }}\n          />\n        </EditorRows>\n      </div>\n    </div>\n  );\n});\n\nconst operators = binaryScalarDefs.map((def) => ({ label: def.sign, value: def.sign }));\n\nNestedQuery.displayName = 'NestedQuery';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    card: css({\n      label: 'card',\n      display: 'flex',\n      flexDirection: 'column',\n      gap: theme.spacing(0.5),\n    }),\n    header: css({\n      label: 'header',\n      padding: theme.spacing(0.5, 0.5, 0.5, 1),\n      gap: theme.spacing(1),\n      display: 'flex',\n      alignItems: 'center',\n    }),\n    name: css({\n      label: 'name',\n      whiteSpace: 'nowrap',\n    }),\n    body: css({\n      label: 'body',\n      paddingLeft: theme.spacing(2),\n    }),\n    vectorMatchInput: css({\n      label: 'vectorMatchInput',\n      marginLeft: -1,\n    }),\n    vectorMatchWrapper: css({\n      label: 'vectorMatchWrapper',\n      display: 'flex',\n    }),\n  };\n};\n","import React from 'react';\n\nimport { Stack } from '@grafana/experimental';\n\nimport { PrometheusDatasource } from '../../datasource';\nimport { PromVisualQuery, PromVisualQueryBinary } from '../types';\n\nimport { NestedQuery } from './NestedQuery';\n\nexport interface Props {\n  query: PromVisualQuery;\n  datasource: PrometheusDatasource;\n  onChange: (query: PromVisualQuery) => void;\n  onRunQuery: () => void;\n  showExplain: boolean;\n}\n\nexport function NestedQueryList(props: Props) {\n  const { query, datasource, onChange, onRunQuery, showExplain } = props;\n  const nestedQueries = query.binaryQueries ?? [];\n\n  const onNestedQueryUpdate = (index: number, update: PromVisualQueryBinary) => {\n    const updatedList = [...nestedQueries];\n    updatedList.splice(index, 1, update);\n    onChange({ ...query, binaryQueries: updatedList });\n  };\n\n  const onRemove = (index: number) => {\n    const updatedList = [...nestedQueries.slice(0, index), ...nestedQueries.slice(index + 1)];\n    onChange({ ...query, binaryQueries: updatedList });\n  };\n\n  return (\n    <Stack direction=\"column\" gap={1}>\n      {nestedQueries.map((nestedQuery, index) => (\n        <NestedQuery\n          key={index.toString()}\n          nestedQuery={nestedQuery}\n          index={index}\n          onChange={onNestedQueryUpdate}\n          datasource={datasource}\n          onRemove={onRemove}\n          onRunQuery={onRunQuery}\n          showExplain={showExplain}\n        />\n      ))}\n    </Stack>\n  );\n}\n","import { css } from '@emotion/css';\nimport React, { useCallback, useState } from 'react';\n\nimport { DataSourceApi, GrafanaTheme2, PanelData, SelectableValue } from '@grafana/data';\nimport { EditorRow } from '@grafana/experimental';\nimport { config } from '@grafana/runtime';\nimport { Button, Tag, useStyles2 } from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../../datasource';\nimport { getMetadataString } from '../../language_provider';\nimport promqlGrammar from '../../promql';\nimport { promQueryModeller } from '../PromQueryModeller';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { OperationExplainedBox } from '../shared/OperationExplainedBox';\nimport { OperationList } from '../shared/OperationList';\nimport { OperationListExplained } from '../shared/OperationListExplained';\nimport { OperationsEditorRow } from '../shared/OperationsEditorRow';\nimport { QueryBuilderHints } from '../shared/QueryBuilderHints';\nimport { RawQuery } from '../shared/RawQuery';\nimport { regexifyLabelValuesQueryString } from '../shared/parsingUtils';\nimport { QueryBuilderLabelFilter, QueryBuilderOperation } from '../shared/types';\nimport { PromVisualQuery } from '../types';\n\nimport { LabelFilters } from './LabelFilters';\nimport { MetricEncyclopediaModal } from './MetricEncyclopediaModal';\nimport { MetricSelect, PROMETHEUS_QUERY_BUILDER_MAX_RESULTS } from './MetricSelect';\nimport { NestedQueryList } from './NestedQueryList';\nimport { EXPLAIN_LABEL_FILTER_CONTENT } from './PromQueryBuilderExplained';\n\nexport interface Props {\n  query: PromVisualQuery;\n  datasource: PrometheusDatasource;\n  onChange: (update: PromVisualQuery) => void;\n  onRunQuery: () => void;\n  data?: PanelData;\n  showExplain: boolean;\n}\n\nexport const PromQueryBuilder = React.memo<Props>((props) => {\n  const { datasource, query, onChange, onRunQuery, data, showExplain } = props;\n  const [highlightedOp, setHighlightedOp] = useState<QueryBuilderOperation | undefined>();\n  const [metricEncyclopediaModalOpen, setMetricEncyclopediaModalOpen] = useState(false);\n  const onChangeLabels = (labels: QueryBuilderLabelFilter[]) => {\n    onChange({ ...query, labels });\n  };\n\n  const styles = useStyles2(getStyles);\n  /**\n   * Map metric metadata to SelectableValue for Select component and also adds defined template variables to the list.\n   */\n  const withTemplateVariableOptions = useCallback(\n    async (optionsPromise: Promise<SelectableValue[]>): Promise<SelectableValue[]> => {\n      const variables = datasource.getVariables();\n      const options = await optionsPromise;\n      return [\n        ...variables.map((value) => ({ label: value, value })),\n        ...options.map((option) => ({ label: option.value, value: option.value, title: option.description })),\n      ];\n    },\n    [datasource]\n  );\n\n  /**\n   * Function kicked off when user interacts with label in label filters.\n   * Formats a promQL expression and passes that off to helper functions depending on API support\n   * @param forLabel\n   */\n  const onGetLabelNames = async (forLabel: Partial<QueryBuilderLabelFilter>): Promise<SelectableValue[]> => {\n    // If no metric we need to use a different method\n    if (!query.metric) {\n      // Todo add caching but inside language provider!\n      await datasource.languageProvider.fetchLabels();\n      return datasource.languageProvider.getLabelKeys().map((k) => ({ value: k }));\n    }\n\n    const labelsToConsider = query.labels.filter((x) => x !== forLabel);\n    labelsToConsider.push({ label: '__name__', op: '=', value: query.metric });\n    const expr = promQueryModeller.renderLabels(labelsToConsider);\n\n    let labelsIndex;\n    if (datasource.hasLabelsMatchAPISupport()) {\n      labelsIndex = await datasource.languageProvider.fetchSeriesLabelsMatch(expr);\n    } else {\n      labelsIndex = await datasource.languageProvider.fetchSeriesLabels(expr);\n    }\n\n    // filter out already used labels\n    return Object.keys(labelsIndex)\n      .filter((labelName) => !labelsToConsider.find((filter) => filter.label === labelName))\n      .map((k) => ({ value: k }));\n  };\n\n  const getLabelValuesAutocompleteSuggestions = (\n    queryString?: string,\n    labelName?: string\n  ): Promise<SelectableValue[]> => {\n    const forLabel = {\n      label: labelName ?? '__name__',\n      op: '=~',\n      value: regexifyLabelValuesQueryString(`.*${queryString}`),\n    };\n    const labelsToConsider = query.labels.filter((x) => x.label !== forLabel.label);\n    labelsToConsider.push(forLabel);\n    if (query.metric) {\n      labelsToConsider.push({ label: '__name__', op: '=', value: query.metric });\n    }\n    const interpolatedLabelsToConsider = labelsToConsider.map((labelObject) => ({\n      ...labelObject,\n      label: datasource.interpolateString(labelObject.label),\n      value: datasource.interpolateString(labelObject.value),\n    }));\n    const expr = promQueryModeller.renderLabels(interpolatedLabelsToConsider);\n    let response;\n    if (datasource.hasLabelsMatchAPISupport()) {\n      response = getLabelValuesFromLabelValuesAPI(forLabel, expr);\n    } else {\n      response = getLabelValuesFromSeriesAPI(forLabel, expr);\n    }\n\n    return response.then((response: SelectableValue[]) => {\n      if (response.length > PROMETHEUS_QUERY_BUILDER_MAX_RESULTS) {\n        response.splice(0, response.length - PROMETHEUS_QUERY_BUILDER_MAX_RESULTS);\n      }\n      return response;\n    });\n  };\n\n  /**\n   * Helper function to fetch and format label value results from legacy API\n   * @param forLabel\n   * @param promQLExpression\n   */\n  const getLabelValuesFromSeriesAPI = (\n    forLabel: Partial<QueryBuilderLabelFilter>,\n    promQLExpression: string\n  ): Promise<SelectableValue[]> => {\n    if (!forLabel.label) {\n      return Promise.resolve([]);\n    }\n    const result = datasource.languageProvider.fetchSeries(promQLExpression);\n    const forLabelInterpolated = datasource.interpolateString(forLabel.label);\n    return result.then((result) => {\n      // This query returns duplicate values, scrub them out\n      const set = new Set<string>();\n      result.forEach((labelValue) => {\n        const labelNameString = labelValue[forLabelInterpolated];\n        set.add(labelNameString);\n      });\n\n      return Array.from(set).map((labelValues: string) => ({ label: labelValues, value: labelValues }));\n    });\n  };\n\n  /**\n   * Helper function to fetch label values from a promql string expression and a label\n   * @param forLabel\n   * @param promQLExpression\n   */\n  const getLabelValuesFromLabelValuesAPI = (\n    forLabel: Partial<QueryBuilderLabelFilter>,\n    promQLExpression: string\n  ): Promise<SelectableValue[]> => {\n    if (!forLabel.label) {\n      return Promise.resolve([]);\n    }\n    return datasource.languageProvider.fetchSeriesValuesWithMatch(forLabel.label, promQLExpression).then((response) => {\n      return response.map((v) => ({\n        value: v,\n        label: v,\n      }));\n    });\n  };\n\n  /**\n   * Function kicked off when users interact with the value of the label filters\n   * Formats a promQL expression and passes that into helper functions depending on API support\n   * @param forLabel\n   */\n  const onGetLabelValues = async (forLabel: Partial<QueryBuilderLabelFilter>): Promise<SelectableValue[]> => {\n    if (!forLabel.label) {\n      return [];\n    }\n    // If no metric is selected, we can get the raw list of labels\n    if (!query.metric) {\n      return (await datasource.languageProvider.getLabelValues(forLabel.label)).map((v) => ({ value: v }));\n    }\n\n    const labelsToConsider = query.labels.filter((x) => x !== forLabel);\n    labelsToConsider.push({ label: '__name__', op: '=', value: query.metric });\n\n    const interpolatedLabelsToConsider = labelsToConsider.map((labelObject) => ({\n      ...labelObject,\n      label: datasource.interpolateString(labelObject.label),\n      value: datasource.interpolateString(labelObject.value),\n    }));\n\n    const expr = promQueryModeller.renderLabels(interpolatedLabelsToConsider);\n\n    if (datasource.hasLabelsMatchAPISupport()) {\n      return getLabelValuesFromLabelValuesAPI(forLabel, expr);\n    } else {\n      return getLabelValuesFromSeriesAPI(forLabel, expr);\n    }\n  };\n\n  const onGetMetrics = useCallback(() => {\n    return withTemplateVariableOptions(getMetrics(datasource, query));\n  }, [datasource, query, withTemplateVariableOptions]);\n\n  const lang = { grammar: promqlGrammar, name: 'promql' };\n  const isMetricEncyclopediaEnabled = config.featureToggles.prometheusMetricEncyclopedia;\n\n  const initHints = datasource.getInitHints();\n\n  return (\n    <>\n      <EditorRow>\n        {isMetricEncyclopediaEnabled && !datasource.lookupsDisabled ? (\n          <>\n            <Button\n              className={styles.button}\n              variant=\"secondary\"\n              size=\"sm\"\n              onClick={() => setMetricEncyclopediaModalOpen((prevValue) => !prevValue)}\n            >\n              Metric encyclopedia\n            </Button>\n            {query.metric && (\n              <Tag\n                name={' ' + query.metric}\n                color=\"#3D71D9\"\n                icon=\"times\"\n                onClick={() => {\n                  onChange({ ...query, metric: '' });\n                }}\n                title=\"Click to remove metric\"\n                className={styles.metricTag}\n              />\n            )}\n            {metricEncyclopediaModalOpen && (\n              <MetricEncyclopediaModal\n                datasource={datasource}\n                isOpen={metricEncyclopediaModalOpen}\n                onClose={() => setMetricEncyclopediaModalOpen(false)}\n                query={query}\n                onChange={onChange}\n              />\n            )}\n          </>\n        ) : (\n          <MetricSelect\n            query={query}\n            onChange={onChange}\n            onGetMetrics={onGetMetrics}\n            datasource={datasource}\n            labelsFilters={query.labels}\n            metricLookupDisabled={datasource.lookupsDisabled}\n          />\n        )}\n        <LabelFilters\n          debounceDuration={datasource.getDebounceTimeInMilliseconds()}\n          getLabelValuesAutofillSuggestions={getLabelValuesAutocompleteSuggestions}\n          labelsFilters={query.labels}\n          // eslint-ignore\n          onChange={onChangeLabels as (labelFilters: Array<Partial<QueryBuilderLabelFilter>>) => void}\n          onGetLabelNames={(forLabel) => withTemplateVariableOptions(onGetLabelNames(forLabel))}\n          onGetLabelValues={(forLabel) => withTemplateVariableOptions(onGetLabelValues(forLabel))}\n        />\n      </EditorRow>\n      {initHints.length ? (\n        <div className=\"query-row-break\">\n          <div className=\"prom-query-field-info text-warning\">\n            {initHints[0].label}{' '}\n            {initHints[0].fix ? (\n              <button type=\"button\" className={'text-warning'}>\n                {initHints[0].fix.label}\n              </button>\n            ) : null}\n          </div>\n        </div>\n      ) : null}\n      {showExplain && (\n        <OperationExplainedBox\n          stepNumber={1}\n          title={<RawQuery query={`${query.metric} ${promQueryModeller.renderLabels(query.labels)}`} lang={lang} />}\n        >\n          {EXPLAIN_LABEL_FILTER_CONTENT}\n        </OperationExplainedBox>\n      )}\n      <OperationsEditorRow>\n        <OperationList<PromVisualQuery>\n          queryModeller={promQueryModeller}\n          // eslint-ignore\n          datasource={datasource as DataSourceApi}\n          query={query}\n          onChange={onChange}\n          onRunQuery={onRunQuery}\n          highlightedOp={highlightedOp}\n        />\n        <QueryBuilderHints<PromVisualQuery>\n          datasource={datasource}\n          query={query}\n          onChange={onChange}\n          data={data}\n          queryModeller={promQueryModeller}\n          buildVisualQueryFromString={buildVisualQueryFromString}\n        />\n      </OperationsEditorRow>\n      {showExplain && (\n        <OperationListExplained<PromVisualQuery>\n          lang={lang}\n          query={query}\n          stepNumber={2}\n          queryModeller={promQueryModeller}\n          onMouseEnter={(op) => setHighlightedOp(op)}\n          onMouseLeave={() => setHighlightedOp(undefined)}\n        />\n      )}\n      {query.binaryQueries && query.binaryQueries.length > 0 && (\n        <NestedQueryList\n          query={query}\n          datasource={datasource}\n          onChange={onChange}\n          onRunQuery={onRunQuery}\n          showExplain={showExplain}\n        />\n      )}\n    </>\n  );\n});\n\n/**\n * Returns list of metrics, either all or filtered by query param. It also adds description string to each metric if it\n * exists.\n * @param datasource\n * @param query\n */\nasync function getMetrics(\n  datasource: PrometheusDatasource,\n  query: PromVisualQuery\n): Promise<Array<{ value: string; description?: string }>> {\n  // Makes sure we loaded the metadata for metrics. Usually this is done in the start() method of the provider but we\n  // don't use it with the visual builder and there is no need to run all the start() setup anyway.\n  if (!datasource.languageProvider.metricsMetadata) {\n    await datasource.languageProvider.loadMetricsMetadata();\n  }\n\n  // Error handling for when metrics metadata returns as undefined\n  if (!datasource.languageProvider.metricsMetadata) {\n    datasource.languageProvider.metricsMetadata = {};\n  }\n\n  let metrics;\n  if (query.labels.length > 0) {\n    const expr = promQueryModeller.renderLabels(query.labels);\n    metrics = (await datasource.languageProvider.getSeries(expr, true))['__name__'] ?? [];\n  } else {\n    metrics = (await datasource.languageProvider.getLabelValues('__name__')) ?? [];\n  }\n\n  return metrics.map((m) => ({\n    value: m,\n    description: getMetadataString(m, datasource.languageProvider.metricsMetadata!),\n  }));\n}\n\nPromQueryBuilder.displayName = 'PromQueryBuilder';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    button: css`\n      height: auto;\n    `,\n    metricTag: css`\n      margin: '10px 0 10px 0',\n      backgroundColor: '#3D71D9',\n    `,\n  };\n};\n","import React from 'react';\n\nimport { EditorFieldGroup, EditorRow } from '@grafana/experimental';\n\nimport promqlGrammar from '../../promql';\nimport { RawQuery } from '../shared/RawQuery';\n\nexport interface Props {\n  query: string;\n}\n\nexport function QueryPreview({ query }: Props) {\n  if (!query) {\n    return null;\n  }\n\n  return (\n    <EditorRow>\n      <EditorFieldGroup>\n        <RawQuery query={query} lang={{ grammar: promqlGrammar, name: 'promql' }} />\n      </EditorFieldGroup>\n    </EditorRow>\n  );\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport React, { useEffect, useReducer } from 'react';\n\nimport { PanelData } from '@grafana/data';\n\nimport { PrometheusDatasource } from '../../datasource';\nimport { PromQuery } from '../../types';\nimport { promQueryModeller } from '../PromQueryModeller';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { PromVisualQuery } from '../types';\n\nimport { PromQueryBuilder } from './PromQueryBuilder';\nimport { QueryPreview } from './QueryPreview';\n\nexport interface Props {\n  query: PromQuery;\n  datasource: PrometheusDatasource;\n  onChange: (update: PromQuery) => void;\n  onRunQuery: () => void;\n  data?: PanelData;\n  showExplain: boolean;\n}\n\nexport interface State {\n  visQuery?: PromVisualQuery;\n  expr: string;\n}\n\n/**\n * This component is here just to contain the translation logic between string query and the visual query builder model.\n */\nexport function PromQueryBuilderContainer(props: Props) {\n  const { query, onChange, onRunQuery, datasource, data, showExplain } = props;\n  const [state, dispatch] = useReducer(stateSlice.reducer, { expr: query.expr });\n\n  // Only rebuild visual query if expr changes from outside\n  useEffect(() => {\n    dispatch(exprChanged(query.expr));\n  }, [query.expr]);\n\n  const onVisQueryChange = (visQuery: PromVisualQuery) => {\n    const expr = promQueryModeller.renderQuery(visQuery);\n    dispatch(visualQueryChange({ visQuery, expr }));\n    onChange({ ...props.query, expr: expr });\n  };\n\n  if (!state.visQuery) {\n    return null;\n  }\n\n  return (\n    <>\n      <PromQueryBuilder\n        query={state.visQuery}\n        datasource={datasource}\n        onChange={onVisQueryChange}\n        onRunQuery={onRunQuery}\n        data={data}\n        showExplain={showExplain}\n      />\n      {<QueryPreview query={query.expr} />}\n    </>\n  );\n}\n\nconst stateSlice = createSlice({\n  name: 'prom-builder-container',\n  initialState: { expr: '' } as State,\n  reducers: {\n    visualQueryChange: (state, action: PayloadAction<{ visQuery: PromVisualQuery; expr: string }>) => {\n      state.expr = action.payload.expr;\n      state.visQuery = action.payload.visQuery;\n    },\n    exprChanged: (state, action: PayloadAction<string>) => {\n      if (!state.visQuery || state.expr !== action.payload) {\n        state.expr = action.payload;\n        const parseResult = buildVisualQueryFromString(action.payload);\n        state.visQuery = parseResult.query;\n      }\n    },\n  },\n});\n\nconst { visualQueryChange, exprChanged } = stateSlice.actions;\n","import { css, cx } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\nimport { usePrevious } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { IconButton, InlineLabel, Tooltip, useStyles2 } from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../datasource';\nimport { PromQuery } from '../types';\n\ninterface Props {\n  onChange: (exemplar: boolean) => void;\n  datasource: PrometheusDatasource;\n  query: PromQuery;\n  'data-testid'?: string;\n}\n\nexport function PromExemplarField({ datasource, onChange, query, ...rest }: Props) {\n  const [error, setError] = useState<string | null>(null);\n  const styles = useStyles2(getStyles);\n  const prevError = usePrevious(error);\n\n  useEffect(() => {\n    if (!datasource.exemplarsAvailable) {\n      setError('Exemplars for this query are not available');\n      onChange(false);\n    } else if (query.instant && !query.range) {\n      setError('Exemplars are not available for instant queries');\n      onChange(false);\n    } else {\n      setError(null);\n      // If error is cleared, we want to change exemplar to true\n      if (prevError && !error) {\n        onChange(true);\n      }\n    }\n  }, [datasource.exemplarsAvailable, query.instant, query.range, onChange, prevError, error]);\n\n  const iconButtonStyles = cx(\n    {\n      [styles.activeIcon]: !!query.exemplar,\n    },\n    styles.eyeIcon\n  );\n\n  return (\n    <InlineLabel width=\"auto\" data-testid={rest['data-testid']}>\n      <Tooltip content={error ?? ''}>\n        <div className={styles.iconWrapper}>\n          Exemplars\n          <IconButton\n            name=\"eye\"\n            tooltip={!!query.exemplar ? 'Disable query with exemplars' : 'Enable query with exemplars'}\n            disabled={!!error}\n            className={iconButtonStyles}\n            onClick={() => {\n              onChange(!query.exemplar);\n            }}\n          />\n        </div>\n      </Tooltip>\n    </InlineLabel>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    eyeIcon: css`\n      margin-left: ${theme.spacing(2)};\n    `,\n    activeIcon: css`\n      color: ${theme.colors.primary.main};\n    `,\n    iconWrapper: css`\n      display: flex;\n      align-items: center;\n    `,\n  };\n}\n","import { css, cx } from '@emotion/css';\nimport { isEqual } from 'lodash';\nimport React, { memo, useCallback } from 'react';\nimport { usePrevious } from 'react-use';\n\nimport { InlineFormLabel, RadioButtonGroup } from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../datasource';\nimport { PromQuery } from '../types';\n\nimport { PromExemplarField } from './PromExemplarField';\n\nexport interface PromExploreExtraFieldProps {\n  query: PromQuery;\n  onChange: (value: PromQuery) => void;\n  onRunQuery: () => void;\n  datasource: PrometheusDatasource;\n}\n\nexport const PromExploreExtraField = memo(({ query, datasource, onChange, onRunQuery }: PromExploreExtraFieldProps) => {\n  const rangeOptions = getQueryTypeOptions(true);\n  const prevQuery = usePrevious(query);\n\n  const onExemplarChange = useCallback(\n    (exemplar: boolean) => {\n      if (!isEqual(query, prevQuery) || exemplar !== query.exemplar) {\n        onChange({ ...query, exemplar });\n      }\n    },\n    [prevQuery, query, onChange]\n  );\n\n  function onChangeQueryStep(interval: string) {\n    onChange({ ...query, interval });\n  }\n\n  function onStepChange(e: React.SyntheticEvent<HTMLInputElement>) {\n    if (e.currentTarget.value !== query.interval) {\n      onChangeQueryStep(e.currentTarget.value);\n    }\n  }\n\n  function onReturnKeyDown(e: React.KeyboardEvent<HTMLInputElement>) {\n    if (e.key === 'Enter' && e.shiftKey) {\n      onRunQuery();\n    }\n  }\n\n  const onQueryTypeChange = getQueryTypeChangeHandler(query, onChange);\n\n  return (\n    <div aria-label=\"Prometheus extra field\" className=\"gf-form-inline\" data-testid={testIds.extraFieldEditor}>\n      {/*Query type field*/}\n      <div\n        data-testid={testIds.queryTypeField}\n        className={cx(\n          'gf-form explore-input-margin',\n          css`\n            flex-wrap: nowrap;\n          `\n        )}\n        aria-label=\"Query type field\"\n      >\n        <InlineFormLabel width=\"auto\">Query type</InlineFormLabel>\n\n        <RadioButtonGroup\n          options={rangeOptions}\n          value={query.range && query.instant ? 'both' : query.instant ? 'instant' : 'range'}\n          onChange={onQueryTypeChange}\n        />\n      </div>\n      {/*Step field*/}\n      <div\n        data-testid={testIds.stepField}\n        className={cx(\n          'gf-form',\n          css`\n            flex-wrap: nowrap;\n          `\n        )}\n        aria-label=\"Step field\"\n      >\n        <InlineFormLabel\n          width={6}\n          tooltip={\n            'Time units and built-in variables can be used here, for example: $__interval, $__rate_interval, 5s, 1m, 3h, 1d, 1y (Default if no unit is specified: s)'\n          }\n        >\n          Min step\n        </InlineFormLabel>\n        <input\n          type={'text'}\n          className=\"gf-form-input width-4\"\n          placeholder={'auto'}\n          onChange={onStepChange}\n          onKeyDown={onReturnKeyDown}\n          value={query.interval ?? ''}\n        />\n      </div>\n\n      <PromExemplarField onChange={onExemplarChange} datasource={datasource} query={query} />\n    </div>\n  );\n});\n\nPromExploreExtraField.displayName = 'PromExploreExtraField';\n\nexport function getQueryTypeOptions(includeBoth: boolean) {\n  const rangeOptions = [\n    { value: 'range', label: 'Range', description: 'Run query over a range of time' },\n    {\n      value: 'instant',\n      label: 'Instant',\n      description: 'Run query against a single point in time. For this query, the \"To\" time is used',\n    },\n  ];\n\n  if (includeBoth) {\n    rangeOptions.push({ value: 'both', label: 'Both', description: 'Run an Instant query and a Range query' });\n  }\n\n  return rangeOptions;\n}\n\nexport function getQueryTypeChangeHandler(query: PromQuery, onChange: (update: PromQuery) => void) {\n  return (queryType: string) => {\n    if (queryType === 'instant') {\n      onChange({ ...query, instant: true, range: false, exemplar: false });\n    } else if (queryType === 'range') {\n      onChange({ ...query, instant: false, range: true });\n    } else {\n      onChange({ ...query, instant: true, range: true });\n    }\n  };\n}\n\nexport const testIds = {\n  extraFieldEditor: 'prom-editor-extra-field',\n  stepField: 'prom-editor-extra-field-step',\n  queryTypeField: 'prom-editor-extra-field-query-type',\n};\n","import React, { useRef } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField } from '@grafana/experimental';\nimport { Select, AutoSizeInput } from '@grafana/ui';\n\nimport { LegendFormatMode } from '../../types';\n\nexport interface Props {\n  legendFormat: string | undefined;\n  onChange: (legendFormat: string) => void;\n  onRunQuery: () => void;\n}\n\nconst legendModeOptions = [\n  {\n    label: 'Auto',\n    value: LegendFormatMode.Auto,\n    description: 'Only includes unique labels',\n  },\n  { label: 'Verbose', value: LegendFormatMode.Verbose, description: 'All label names and values' },\n  { label: 'Custom', value: LegendFormatMode.Custom, description: 'Provide a naming template' },\n];\n\n/**\n * Tests for this component are on the parent level (PromQueryBuilderOptions).\n */\nexport const PromQueryLegendEditor = React.memo<Props>(({ legendFormat, onChange, onRunQuery }) => {\n  const mode = getLegendMode(legendFormat);\n  const inputRef = useRef<HTMLInputElement | null>(null);\n\n  const onLegendFormatChanged = (evt: React.FormEvent<HTMLInputElement>) => {\n    let newFormat = evt.currentTarget.value;\n    if (newFormat.length === 0) {\n      newFormat = LegendFormatMode.Auto;\n    }\n\n    if (newFormat !== legendFormat) {\n      onChange(newFormat);\n      onRunQuery();\n    }\n  };\n\n  const onLegendModeChanged = (value: SelectableValue<LegendFormatMode>) => {\n    switch (value.value!) {\n      case LegendFormatMode.Auto:\n        onChange(LegendFormatMode.Auto);\n        break;\n      case LegendFormatMode.Custom:\n        onChange('{{label_name}}');\n        setTimeout(() => {\n          inputRef.current?.focus();\n          inputRef.current?.setSelectionRange(2, 12, 'forward');\n        }, 10);\n        break;\n      case LegendFormatMode.Verbose:\n        onChange('');\n        break;\n    }\n    onRunQuery();\n  };\n\n  return (\n    <EditorField\n      label=\"Legend\"\n      tooltip=\"Series name override or template. Ex. {{hostname}} will be replaced with label value for hostname.\"\n    >\n      <>\n        {mode === LegendFormatMode.Custom && (\n          <AutoSizeInput\n            id=\"legendFormat\"\n            minWidth={22}\n            placeholder=\"auto\"\n            defaultValue={legendFormat}\n            onCommitChange={onLegendFormatChanged}\n            ref={inputRef}\n          />\n        )}\n        {mode !== LegendFormatMode.Custom && (\n          <Select\n            inputId=\"legend.mode\"\n            isSearchable={false}\n            placeholder=\"Select legend mode\"\n            options={legendModeOptions}\n            width={22}\n            onChange={onLegendModeChanged}\n            value={legendModeOptions.find((x) => x.value === mode)}\n          />\n        )}\n      </>\n    </EditorField>\n  );\n});\n\nPromQueryLegendEditor.displayName = 'PromQueryLegendEditor';\n\nfunction getLegendMode(legendFormat: string | undefined) {\n  // This special value means the new smart minimal series naming\n  if (legendFormat === LegendFormatMode.Auto) {\n    return LegendFormatMode.Auto;\n  }\n\n  // Missing or empty legend format is the old verbose behavior\n  if (legendFormat == null || legendFormat === '') {\n    return LegendFormatMode.Verbose;\n  }\n\n  return LegendFormatMode.Custom;\n}\n\nexport function getLegendModeLabel(legendFormat: string | undefined) {\n  const mode = getLegendMode(legendFormat);\n  if (mode !== LegendFormatMode.Custom) {\n    return legendModeOptions.find((x) => x.value === mode)?.label;\n  }\n  return legendFormat;\n}\n","import React, { SyntheticEvent } from 'react';\n\nimport { CoreApp, SelectableValue } from '@grafana/data';\nimport { EditorField, EditorRow, EditorSwitch } from '@grafana/experimental';\nimport { AutoSizeInput, RadioButtonGroup, Select } from '@grafana/ui';\n\nimport { getQueryTypeChangeHandler, getQueryTypeOptions } from '../../components/PromExploreExtraField';\nimport { PromQueryFormat } from '../../dataquery.gen';\nimport { PromQuery } from '../../types';\nimport { QueryOptionGroup } from '../shared/QueryOptionGroup';\n\nimport { FORMAT_OPTIONS, INTERVAL_FACTOR_OPTIONS } from './PromQueryEditorSelector';\nimport { getLegendModeLabel, PromQueryLegendEditor } from './PromQueryLegendEditor';\n\nexport interface UIOptions {\n  exemplars: boolean;\n  type: boolean;\n  format: boolean;\n  minStep: boolean;\n  legend: boolean;\n  resolution: boolean;\n}\n\nexport interface Props {\n  query: PromQuery;\n  app?: CoreApp;\n  onChange: (update: PromQuery) => void;\n  onRunQuery: () => void;\n}\n\nexport const PromQueryBuilderOptions = React.memo<Props>(({ query, app, onChange, onRunQuery }) => {\n  const onChangeFormat = (value: SelectableValue<PromQueryFormat>) => {\n    onChange({ ...query, format: value.value });\n    onRunQuery();\n  };\n\n  const onChangeStep = (evt: React.FormEvent<HTMLInputElement>) => {\n    onChange({ ...query, interval: evt.currentTarget.value });\n    onRunQuery();\n  };\n\n  const queryTypeOptions = getQueryTypeOptions(app === CoreApp.Explore || app === CoreApp.PanelEditor);\n  const onQueryTypeChange = getQueryTypeChangeHandler(query, onChange);\n\n  const onExemplarChange = (event: SyntheticEvent<HTMLInputElement>) => {\n    const isEnabled = event.currentTarget.checked;\n    onChange({ ...query, exemplar: isEnabled });\n    onRunQuery();\n  };\n\n  const onIntervalFactorChange = (value: SelectableValue<number>) => {\n    onChange({ ...query, intervalFactor: value.value });\n    onRunQuery();\n  };\n\n  const formatOption = FORMAT_OPTIONS.find((option) => option.value === query.format) || FORMAT_OPTIONS[0];\n  const queryTypeValue = getQueryTypeValue(query);\n  const queryTypeLabel = queryTypeOptions.find((x) => x.value === queryTypeValue)!.label;\n\n  return (\n    <EditorRow>\n      <QueryOptionGroup\n        title=\"Options\"\n        collapsedInfo={getCollapsedInfo(query, formatOption.label!, queryTypeLabel, app)}\n      >\n        <PromQueryLegendEditor\n          legendFormat={query.legendFormat}\n          onChange={(legendFormat) => onChange({ ...query, legendFormat })}\n          onRunQuery={onRunQuery}\n        />\n        <EditorField\n          label=\"Min step\"\n          tooltip={\n            <>\n              An additional lower limit for the step parameter of the Prometheus query and for the{' '}\n              <code>$__interval</code> and <code>$__rate_interval</code> variables.\n            </>\n          }\n        >\n          <AutoSizeInput\n            type=\"text\"\n            aria-label=\"Set lower limit for the step parameter\"\n            placeholder={'auto'}\n            minWidth={10}\n            onCommitChange={onChangeStep}\n            defaultValue={query.interval}\n          />\n        </EditorField>\n        <EditorField label=\"Format\">\n          <Select value={formatOption} allowCustomValue onChange={onChangeFormat} options={FORMAT_OPTIONS} />\n        </EditorField>\n        <EditorField label=\"Type\">\n          <RadioButtonGroup options={queryTypeOptions} value={queryTypeValue} onChange={onQueryTypeChange} />\n        </EditorField>\n        {shouldShowExemplarSwitch(query, app) && (\n          <EditorField label=\"Exemplars\">\n            <EditorSwitch value={query.exemplar || false} onChange={onExemplarChange} />\n          </EditorField>\n        )}\n        {query.intervalFactor && query.intervalFactor > 1 && (\n          <EditorField label=\"Resolution\">\n            <Select\n              aria-label=\"Select resolution\"\n              isSearchable={false}\n              options={INTERVAL_FACTOR_OPTIONS}\n              onChange={onIntervalFactorChange}\n              value={INTERVAL_FACTOR_OPTIONS.find((option) => option.value === query.intervalFactor)}\n            />\n          </EditorField>\n        )}\n      </QueryOptionGroup>\n    </EditorRow>\n  );\n});\n\nfunction shouldShowExemplarSwitch(query: PromQuery, app?: CoreApp) {\n  if (app === CoreApp.UnifiedAlerting || !query.range) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction getQueryTypeValue(query: PromQuery) {\n  return query.range && query.instant ? 'both' : query.instant ? 'instant' : 'range';\n}\n\nfunction getCollapsedInfo(query: PromQuery, formatOption: string, queryType: string, app?: CoreApp): string[] {\n  const items: string[] = [];\n\n  items.push(`Legend: ${getLegendModeLabel(query.legendFormat)}`);\n  items.push(`Format: ${formatOption}`);\n  items.push(`Step: ${query.interval ?? 'auto'}`);\n  items.push(`Type: ${queryType}`);\n\n  if (shouldShowExemplarSwitch(query, app)) {\n    if (query.exemplar) {\n      items.push(`Exemplars: true`);\n    } else {\n      items.push(`Exemplars: false`);\n    }\n  }\n  return items;\n}\n\nPromQueryBuilderOptions.displayName = 'PromQueryBuilderOptions';\n","import { isEqual, map } from 'lodash';\nimport React, { SyntheticEvent, useCallback, useEffect, useState } from 'react';\n\nimport { CoreApp, LoadingState, SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { EditorHeader, EditorRows, FlexItem, Space } from '@grafana/experimental';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Button, ConfirmModal } from '@grafana/ui';\n\nimport { PromQueryEditorProps } from '../../components/types';\nimport { PromQueryFormat } from '../../dataquery.gen';\nimport { PromQuery } from '../../types';\nimport { QueryPatternsModal } from '../QueryPatternsModal';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { QueryEditorModeToggle } from '../shared/QueryEditorModeToggle';\nimport { QueryHeaderSwitch } from '../shared/QueryHeaderSwitch';\nimport { promQueryEditorExplainKey, useFlag } from '../shared/hooks/useFlag';\nimport { QueryEditorMode } from '../shared/types';\nimport { changeEditorMode, getQueryWithDefaults } from '../state';\n\nimport { PromQueryBuilderContainer } from './PromQueryBuilderContainer';\nimport { PromQueryBuilderOptions } from './PromQueryBuilderOptions';\nimport { PromQueryCodeEditor } from './PromQueryCodeEditor';\n\nexport const FORMAT_OPTIONS: Array<SelectableValue<PromQueryFormat>> = [\n  { label: 'Time series', value: 'time_series' },\n  { label: 'Table', value: 'table' },\n  { label: 'Heatmap', value: 'heatmap' },\n];\n\nexport const INTERVAL_FACTOR_OPTIONS: Array<SelectableValue<number>> = map([1, 2, 3, 4, 5, 10], (value: number) => ({\n  value,\n  label: '1/' + value,\n}));\n\ntype Props = PromQueryEditorProps;\n\nexport const PromQueryEditorSelector = React.memo<Props>((props) => {\n  const {\n    onChange,\n    onRunQuery,\n    data,\n    app,\n    onAddQuery,\n    datasource: { defaultEditor },\n    queries,\n  } = props;\n\n  const [parseModalOpen, setParseModalOpen] = useState(false);\n  const [queryPatternsModalOpen, setQueryPatternsModalOpen] = useState(false);\n  const [dataIsStale, setDataIsStale] = useState(false);\n  const { flag: explain, setFlag: setExplain } = useFlag(promQueryEditorExplainKey);\n\n  const query = getQueryWithDefaults(props.query, app, defaultEditor);\n  // This should be filled in from the defaults by now.\n  const editorMode = query.editorMode!;\n\n  const onEditorModeChange = useCallback(\n    (newMetricEditorMode: QueryEditorMode) => {\n      reportInteraction('user_grafana_prometheus_editor_mode_clicked', {\n        newEditor: newMetricEditorMode,\n        previousEditor: query.editorMode ?? '',\n        newQuery: !query.expr,\n        app: app ?? '',\n      });\n\n      if (newMetricEditorMode === QueryEditorMode.Builder) {\n        const result = buildVisualQueryFromString(query.expr || '');\n        // If there are errors, give user a chance to decide if they want to go to builder as that can lose some data.\n        if (result.errors.length) {\n          setParseModalOpen(true);\n          return;\n        }\n      }\n      changeEditorMode(query, newMetricEditorMode, onChange);\n    },\n    [onChange, query, app]\n  );\n\n  useEffect(() => {\n    setDataIsStale(false);\n  }, [data]);\n\n  const onChangeInternal = (query: PromQuery) => {\n    if (!isEqual(query, props.query)) {\n      setDataIsStale(true);\n    }\n    onChange(query);\n  };\n\n  const onShowExplainChange = (e: SyntheticEvent<HTMLInputElement>) => {\n    setExplain(e.currentTarget.checked);\n  };\n\n  return (\n    <>\n      <ConfirmModal\n        isOpen={parseModalOpen}\n        title=\"Query parsing\"\n        body=\"There were errors while trying to parse the query. Continuing to visual builder may lose some parts of the query.\"\n        confirmText=\"Continue\"\n        onConfirm={() => {\n          changeEditorMode(query, QueryEditorMode.Builder, onChange);\n          setParseModalOpen(false);\n        }}\n        onDismiss={() => setParseModalOpen(false)}\n      />\n      <QueryPatternsModal\n        isOpen={queryPatternsModalOpen}\n        onClose={() => setQueryPatternsModalOpen(false)}\n        query={query}\n        queries={queries}\n        app={app}\n        onChange={onChange}\n        onAddQuery={onAddQuery}\n      />\n      <EditorHeader>\n        <Button\n          aria-label={selectors.components.QueryBuilder.queryPatterns}\n          variant=\"secondary\"\n          size=\"sm\"\n          onClick={() => setQueryPatternsModalOpen((prevValue) => !prevValue)}\n        >\n          Kick start your query\n        </Button>\n        <QueryHeaderSwitch label=\"Explain\" value={explain} onChange={onShowExplainChange} />\n        <FlexItem grow={1} />\n        {app !== CoreApp.Explore && app !== CoreApp.Correlations && (\n          <Button\n            variant={dataIsStale ? 'primary' : 'secondary'}\n            size=\"sm\"\n            onClick={onRunQuery}\n            icon={data?.state === LoadingState.Loading ? 'fa fa-spinner' : undefined}\n            disabled={data?.state === LoadingState.Loading}\n          >\n            Run queries\n          </Button>\n        )}\n        <QueryEditorModeToggle mode={editorMode} onChange={onEditorModeChange} />\n      </EditorHeader>\n      <Space v={0.5} />\n      <EditorRows>\n        {editorMode === QueryEditorMode.Code && (\n          <PromQueryCodeEditor {...props} query={query} showExplain={explain} onChange={onChangeInternal} />\n        )}\n        {editorMode === QueryEditorMode.Builder && (\n          <PromQueryBuilderContainer\n            query={query}\n            datasource={props.datasource}\n            onChange={onChangeInternal}\n            onRunQuery={props.onRunQuery}\n            data={data}\n            showExplain={explain}\n          />\n        )}\n        <PromQueryBuilderOptions query={query} app={props.app} onChange={onChange} onRunQuery={onRunQuery} />\n      </EditorRows>\n    </>\n  );\n});\n\nPromQueryEditorSelector.displayName = 'PromQueryEditorSelector';\n","import React from 'react';\n\nimport PromQueryField from './PromQueryField';\nimport { PromQueryEditorProps } from './types';\n\nexport function PromQueryEditorForAlerting(props: PromQueryEditorProps) {\n  const { datasource, query, range, data, onChange, onRunQuery } = props;\n\n  return (\n    <PromQueryField\n      datasource={datasource}\n      query={query}\n      onRunQuery={onRunQuery}\n      onChange={onChange}\n      history={[]}\n      range={range}\n      data={data}\n      data-testid={testIds.editor}\n    />\n  );\n}\n\nexport const testIds = {\n  editor: 'prom-editor-cloud-alerting',\n};\n","import React, { memo } from 'react';\n\nimport { CoreApp } from '@grafana/data';\n\nimport { PromQueryEditorSelector } from '../querybuilder/components/PromQueryEditorSelector';\n\nimport { PromQueryEditorForAlerting } from './PromQueryEditorForAlerting';\nimport { PromQueryEditorProps } from './types';\n\nexport function PromQueryEditorByApp(props: PromQueryEditorProps) {\n  const { app } = props;\n\n  switch (app) {\n    case CoreApp.CloudAlerting:\n      return <PromQueryEditorForAlerting {...props} />;\n    default:\n      return <PromQueryEditorSelector {...props} />;\n  }\n}\n\nexport default memo(PromQueryEditorByApp);\n","import { SelectableValue } from '@grafana/data';\n\nexport enum AzureCloud {\n  Public = 'AzureCloud',\n  China = 'AzureChinaCloud',\n  USGovernment = 'AzureUSGovernment',\n  None = '',\n}\n\nexport const KnownAzureClouds: Array<SelectableValue<AzureCloud>> = [\n  { value: AzureCloud.Public, label: 'Azure' },\n  { value: AzureCloud.China, label: 'Azure China' },\n  { value: AzureCloud.USGovernment, label: 'Azure US Government' },\n];\n\nexport type AzureAuthType = 'msi' | 'clientsecret';\n\nexport type ConcealedSecret = symbol;\n\ninterface AzureCredentialsBase {\n  authType: AzureAuthType;\n  defaultSubscriptionId?: string;\n}\n\nexport interface AzureManagedIdentityCredentials extends AzureCredentialsBase {\n  authType: 'msi';\n}\n\nexport interface AzureClientSecretCredentials extends AzureCredentialsBase {\n  authType: 'clientsecret';\n  azureCloud?: string;\n  tenantId?: string;\n  clientId?: string;\n  clientSecret?: string | ConcealedSecret;\n}\n\nexport type AzureCredentials = AzureManagedIdentityCredentials | AzureClientSecretCredentials;\n\nexport function isCredentialsComplete(credentials: AzureCredentials): boolean {\n  switch (credentials.authType) {\n    case 'msi':\n      return true;\n    case 'clientsecret':\n      return !!(credentials.azureCloud && credentials.tenantId && credentials.clientId && credentials.clientSecret);\n  }\n}\n","import { DataSourceSettings } from '@grafana/data';\nimport { config } from '@grafana/runtime';\n\nimport { AzureCloud, AzureCredentials, ConcealedSecret } from './AzureCredentials';\n\nconst concealed: ConcealedSecret = Symbol('Concealed client secret');\n\nfunction getDefaultAzureCloud(): string {\n  return config.azure.cloud || AzureCloud.Public;\n}\n\nfunction getSecret(options: DataSourceSettings<any, any>): undefined | string | ConcealedSecret {\n  if (options.secureJsonFields.azureClientSecret) {\n    // The secret is concealed on server\n    return concealed;\n  } else {\n    const secret = options.secureJsonData?.azureClientSecret;\n    return typeof secret === 'string' && secret.length > 0 ? secret : undefined;\n  }\n}\n\nexport function hasCredentials(options: DataSourceSettings<any, any>): boolean {\n  return !!options.jsonData.azureCredentials;\n}\n\nexport function getDefaultCredentials(): AzureCredentials {\n  if (config.azure.managedIdentityEnabled) {\n    return { authType: 'msi' };\n  } else {\n    return { authType: 'clientsecret', azureCloud: getDefaultAzureCloud() };\n  }\n}\n\nexport function getCredentials(options: DataSourceSettings<any, any>): AzureCredentials {\n  const credentials = options.jsonData.azureCredentials as AzureCredentials | undefined;\n\n  // If no credentials saved, then return empty credentials\n  // of type based on whether the managed identity enabled\n  if (!credentials) {\n    return getDefaultCredentials();\n  }\n\n  switch (credentials.authType) {\n    case 'msi':\n      if (config.azure.managedIdentityEnabled) {\n        return {\n          authType: 'msi',\n        };\n      } else {\n        // If authentication type is managed identity but managed identities were disabled in Grafana config,\n        // then we should fallback to an empty app registration (client secret) configuration\n        return {\n          authType: 'clientsecret',\n          azureCloud: getDefaultAzureCloud(),\n        };\n      }\n    case 'clientsecret':\n      return {\n        authType: 'clientsecret',\n        azureCloud: credentials.azureCloud || getDefaultAzureCloud(),\n        tenantId: credentials.tenantId,\n        clientId: credentials.clientId,\n        clientSecret: getSecret(options),\n      };\n  }\n}\n\nexport function updateCredentials(\n  options: DataSourceSettings<any, any>,\n  credentials: AzureCredentials\n): DataSourceSettings<any, any> {\n  switch (credentials.authType) {\n    case 'msi':\n      if (!config.azure.managedIdentityEnabled) {\n        throw new Error('Managed Identity authentication is not enabled in Grafana config.');\n      }\n\n      options = {\n        ...options,\n        jsonData: {\n          ...options.jsonData,\n          azureCredentials: {\n            authType: 'msi',\n          },\n        },\n      };\n\n      return options;\n\n    case 'clientsecret':\n      options = {\n        ...options,\n        jsonData: {\n          ...options.jsonData,\n          azureCredentials: {\n            authType: 'clientsecret',\n            azureCloud: credentials.azureCloud || getDefaultAzureCloud(),\n            tenantId: credentials.tenantId,\n            clientId: credentials.clientId,\n          },\n        },\n        secureJsonData: {\n          ...options.secureJsonData,\n          azureClientSecret:\n            typeof credentials.clientSecret === 'string' && credentials.clientSecret.length > 0\n              ? credentials.clientSecret\n              : undefined,\n        },\n        secureJsonFields: {\n          ...options.secureJsonFields,\n          azureClientSecret: typeof credentials.clientSecret === 'symbol',\n        },\n      };\n\n      return options;\n  }\n}\n\nexport function setDefaultCredentials(options: DataSourceSettings<any, any>): Partial<DataSourceSettings<any, any>> {\n  return {\n    jsonData: {\n      ...options.jsonData,\n      azureCredentials: getDefaultCredentials(),\n    },\n  };\n}\n\nexport function resetCredentials(options: DataSourceSettings<any, any>): Partial<DataSourceSettings<any, any>> {\n  return {\n    jsonData: {\n      ...options.jsonData,\n      azureAuth: undefined,\n      azureCredentials: undefined,\n      azureEndpointResourceId: undefined,\n    },\n  };\n}\n","import React, { ChangeEvent, useEffect, useReducer, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { InlineFormLabel, Button } from '@grafana/ui/src/components';\nimport { Input } from '@grafana/ui/src/components/Forms/Legacy/Input/Input';\nimport { Select } from '@grafana/ui/src/components/Forms/Legacy/Select/Select';\n\nimport { AzureAuthType, AzureCredentials, isCredentialsComplete } from './AzureCredentials';\n\nexport interface Props {\n  managedIdentityEnabled: boolean;\n  credentials: AzureCredentials;\n  azureCloudOptions?: SelectableValue[];\n  onCredentialsChange: (updatedCredentials: AzureCredentials) => void;\n  getSubscriptions?: () => Promise<SelectableValue[]>;\n  disabled?: boolean;\n}\n\nconst authTypeOptions: Array<SelectableValue<AzureAuthType>> = [\n  {\n    value: 'msi',\n    label: 'Managed Identity',\n  },\n  {\n    value: 'clientsecret',\n    label: 'App Registration',\n  },\n];\n\nexport const AzureCredentialsForm = (props: Props) => {\n  const { credentials, azureCloudOptions, onCredentialsChange, getSubscriptions, disabled } = props;\n  const hasRequiredFields = isCredentialsComplete(credentials);\n\n  const [subscriptions, setSubscriptions] = useState<Array<SelectableValue<string>>>([]);\n  const [loadSubscriptionsClicked, onLoadSubscriptions] = useReducer((val) => val + 1, 0);\n  useEffect(() => {\n    if (!getSubscriptions || !hasRequiredFields) {\n      updateSubscriptions([]);\n      return;\n    }\n    let canceled = false;\n    getSubscriptions().then((result) => {\n      if (!canceled) {\n        updateSubscriptions(result, loadSubscriptionsClicked);\n      }\n    });\n    return () => {\n      canceled = true;\n    };\n    // This effect is intended to be called only once initially and on Load Subscriptions click\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadSubscriptionsClicked]);\n\n  const updateSubscriptions = (received: Array<SelectableValue<string>>, autoSelect = false) => {\n    setSubscriptions(received);\n    if (getSubscriptions) {\n      if (autoSelect && !credentials.defaultSubscriptionId && received.length > 0) {\n        // Selecting the default subscription if subscriptions received but no default subscription selected\n        onSubscriptionChange(received[0]);\n      } else if (credentials.defaultSubscriptionId) {\n        const found = received.find((opt) => opt.value === credentials.defaultSubscriptionId);\n        if (!found) {\n          // Unselecting the default subscription if it isn't found among the received subscriptions\n          onSubscriptionChange(undefined);\n        }\n      }\n    }\n  };\n\n  const onAuthTypeChange = (selected: SelectableValue<AzureAuthType>) => {\n    if (onCredentialsChange) {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        authType: selected.value || 'msi',\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onAzureCloudChange = (selected: SelectableValue<string>) => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        azureCloud: selected.value,\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onTenantIdChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        tenantId: event.target.value,\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onClientIdChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        clientId: event.target.value,\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onClientSecretChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        clientSecret: event.target.value,\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onClientSecretReset = () => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        clientSecret: '',\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onSubscriptionChange = (selected: SelectableValue<string> | undefined) => {\n    if (onCredentialsChange) {\n      const updated: AzureCredentials = {\n        ...credentials,\n        defaultSubscriptionId: selected?.value,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  return (\n    <div className=\"gf-form-group\">\n      {props.managedIdentityEnabled && (\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel className=\"width-12\" tooltip=\"Choose the type of authentication to Azure services\">\n              Authentication\n            </InlineFormLabel>\n            <Select\n              className=\"width-15\"\n              value={authTypeOptions.find((opt) => opt.value === credentials.authType)}\n              options={authTypeOptions}\n              onChange={onAuthTypeChange}\n              isDisabled={disabled}\n            />\n          </div>\n        </div>\n      )}\n      {credentials.authType === 'clientsecret' && (\n        <>\n          {azureCloudOptions && (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <InlineFormLabel className=\"width-12\" tooltip=\"Choose an Azure Cloud\">\n                  Azure Cloud\n                </InlineFormLabel>\n                <Select\n                  className=\"width-15\"\n                  value={azureCloudOptions.find((opt) => opt.value === credentials.azureCloud)}\n                  options={azureCloudOptions}\n                  onChange={onAzureCloudChange}\n                  isDisabled={disabled}\n                />\n              </div>\n            </div>\n          )}\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineFormLabel className=\"width-12\">Directory (tenant) ID</InlineFormLabel>\n              <div className=\"width-15\">\n                <Input\n                  className=\"width-30\"\n                  placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n                  value={credentials.tenantId || ''}\n                  onChange={onTenantIdChange}\n                  disabled={disabled}\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineFormLabel className=\"width-12\">Application (client) ID</InlineFormLabel>\n              <div className=\"width-15\">\n                <Input\n                  className=\"width-30\"\n                  placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n                  value={credentials.clientId || ''}\n                  onChange={onClientIdChange}\n                  disabled={disabled}\n                />\n              </div>\n            </div>\n          </div>\n          {typeof credentials.clientSecret === 'symbol' ? (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <InlineFormLabel htmlFor=\"azure-client-secret\" className=\"width-12\">\n                  Client Secret\n                </InlineFormLabel>\n                <Input id=\"azure-client-secret\" className=\"width-25\" placeholder=\"configured\" disabled />\n              </div>\n              {!disabled && (\n                <div className=\"gf-form\">\n                  <div className=\"max-width-30 gf-form-inline\">\n                    <Button variant=\"secondary\" type=\"button\" onClick={onClientSecretReset}>\n                      reset\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </div>\n          ) : (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <InlineFormLabel className=\"width-12\">Client Secret</InlineFormLabel>\n                <div className=\"width-15\">\n                  <Input\n                    className=\"width-30\"\n                    placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n                    value={credentials.clientSecret || ''}\n                    onChange={onClientSecretChange}\n                    disabled={disabled}\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n        </>\n      )}\n      {getSubscriptions && (\n        <>\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineFormLabel className=\"width-12\">Default Subscription</InlineFormLabel>\n              <div className=\"width-25\">\n                <Select\n                  value={\n                    credentials.defaultSubscriptionId\n                      ? subscriptions.find((opt) => opt.value === credentials.defaultSubscriptionId)\n                      : undefined\n                  }\n                  options={subscriptions}\n                  onChange={onSubscriptionChange}\n                  isDisabled={disabled}\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <div className=\"max-width-30 gf-form-inline\">\n                <Button\n                  variant=\"secondary\"\n                  size=\"sm\"\n                  type=\"button\"\n                  onClick={onLoadSubscriptions}\n                  disabled={!hasRequiredFields}\n                >\n                  Load Subscriptions\n                </Button>\n              </div>\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default AzureCredentialsForm;\n","import React, { FormEvent, useMemo, useState } from 'react';\n\nimport { config } from '@grafana/runtime';\nimport { InlineField, InlineFieldRow, InlineSwitch, Input } from '@grafana/ui';\nimport { HttpSettingsBaseProps } from '@grafana/ui/src/components/DataSourceSettings/types';\n\nimport { KnownAzureClouds, AzureCredentials } from './AzureCredentials';\nimport { getCredentials, updateCredentials } from './AzureCredentialsConfig';\nimport { AzureCredentialsForm } from './AzureCredentialsForm';\n\nexport const AzureAuthSettings = (props: HttpSettingsBaseProps) => {\n  const { dataSourceConfig, onChange } = props;\n\n  const [overrideAudienceAllowed] = useState<boolean>(\n    config.featureToggles.prometheusAzureOverrideAudience || !!dataSourceConfig.jsonData.azureEndpointResourceId\n  );\n  const [overrideAudienceChecked, setOverrideAudienceChecked] = useState<boolean>(\n    !!dataSourceConfig.jsonData.azureEndpointResourceId\n  );\n\n  const credentials = useMemo(() => getCredentials(dataSourceConfig), [dataSourceConfig]);\n\n  const onCredentialsChange = (credentials: AzureCredentials): void => {\n    onChange(updateCredentials(dataSourceConfig, credentials));\n  };\n\n  const onOverrideAudienceChange = (ev: FormEvent<HTMLInputElement>): void => {\n    setOverrideAudienceChecked(ev.currentTarget.checked);\n    if (!ev.currentTarget.checked) {\n      onChange({\n        ...dataSourceConfig,\n        jsonData: { ...dataSourceConfig.jsonData, azureEndpointResourceId: undefined },\n      });\n    }\n  };\n\n  const onResourceIdChange = (ev: FormEvent<HTMLInputElement>): void => {\n    if (overrideAudienceChecked) {\n      onChange({\n        ...dataSourceConfig,\n        jsonData: { ...dataSourceConfig.jsonData, azureEndpointResourceId: ev.currentTarget.value },\n      });\n    }\n  };\n\n  return (\n    <>\n      <h6>Azure Authentication</h6>\n      <AzureCredentialsForm\n        managedIdentityEnabled={config.azure.managedIdentityEnabled}\n        credentials={credentials}\n        azureCloudOptions={KnownAzureClouds}\n        onCredentialsChange={onCredentialsChange}\n        disabled={dataSourceConfig.readOnly}\n      />\n      {overrideAudienceAllowed && (\n        <>\n          <h6>Azure Configuration</h6>\n          <div className=\"gf-form-group\">\n            <InlineFieldRow>\n              <InlineField labelWidth={26} label=\"Override AAD audience\" disabled={dataSourceConfig.readOnly}>\n                <InlineSwitch value={overrideAudienceChecked} onChange={onOverrideAudienceChange} />\n              </InlineField>\n            </InlineFieldRow>\n            {overrideAudienceChecked && (\n              <InlineFieldRow>\n                <InlineField labelWidth={26} label=\"Resource ID\" disabled={dataSourceConfig.readOnly}>\n                  <Input\n                    className=\"width-30\"\n                    value={dataSourceConfig.jsonData.azureEndpointResourceId || ''}\n                    onChange={onResourceIdChange}\n                  />\n                </InlineField>\n              </InlineFieldRow>\n            )}\n          </div>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default AzureAuthSettings;\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { Button, InlineField, InlineSwitch, Input } from '@grafana/ui';\n\nimport { ExemplarTraceIdDestination } from '../types';\n\ntype Props = {\n  value: ExemplarTraceIdDestination;\n  onChange: (value: ExemplarTraceIdDestination) => void;\n  onDelete: () => void;\n  disabled?: boolean;\n};\n\nexport default function ExemplarSetting({ value, onChange, onDelete, disabled }: Props) {\n  const [isInternalLink, setIsInternalLink] = useState(Boolean(value.datasourceUid));\n\n  return (\n    <div className=\"gf-form-group\">\n      <InlineField label=\"Internal link\" labelWidth={24} disabled={disabled}>\n        <>\n          <InlineSwitch\n            value={isInternalLink}\n            aria-label={selectors.components.DataSource.Prometheus.configPage.internalLinkSwitch}\n            onChange={(ev) => setIsInternalLink(ev.currentTarget.checked)}\n          />\n          {!disabled && (\n            <Button\n              variant=\"destructive\"\n              title=\"Remove link\"\n              icon=\"times\"\n              onClick={(event) => {\n                event.preventDefault();\n                onDelete();\n              }}\n              className={css`\n                margin-left: 8px;\n              `}\n            />\n          )}\n        </>\n      </InlineField>\n\n      {isInternalLink ? (\n        <InlineField\n          label=\"Data source\"\n          labelWidth={24}\n          tooltip=\"The data source the exemplar is going to navigate to.\"\n          disabled={disabled}\n        >\n          <DataSourcePicker\n            tracing={true}\n            current={value.datasourceUid}\n            noDefault={true}\n            width={40}\n            onChange={(ds) =>\n              onChange({\n                ...value,\n                datasourceUid: ds.uid,\n                url: undefined,\n              })\n            }\n          />\n        </InlineField>\n      ) : (\n        <InlineField\n          label=\"URL\"\n          labelWidth={24}\n          tooltip=\"The URL of the trace backend the user would go to see its trace.\"\n          disabled={disabled}\n        >\n          <Input\n            placeholder=\"https://example.com/${__value.raw}\"\n            spellCheck={false}\n            width={40}\n            value={value.url}\n            onChange={(event) =>\n              onChange({\n                ...value,\n                datasourceUid: undefined,\n                url: event.currentTarget.value,\n              })\n            }\n          />\n        </InlineField>\n      )}\n\n      <InlineField\n        label=\"URL Label\"\n        labelWidth={24}\n        tooltip=\"Use to override the button label on the exemplar traceID field.\"\n        disabled={disabled}\n      >\n        <Input\n          placeholder=\"Go to example.com\"\n          spellCheck={false}\n          width={40}\n          value={value.urlDisplayLabel}\n          onChange={(event) =>\n            onChange({\n              ...value,\n              urlDisplayLabel: event.currentTarget.value,\n            })\n          }\n        />\n      </InlineField>\n      <InlineField\n        label=\"Label name\"\n        labelWidth={24}\n        tooltip=\"The name of the field in the labels object that should be used to get the traceID.\"\n        disabled={disabled}\n      >\n        <Input\n          placeholder=\"traceID\"\n          spellCheck={false}\n          width={40}\n          value={value.name}\n          onChange={(event) =>\n            onChange({\n              ...value,\n              name: event.currentTarget.value,\n            })\n          }\n        />\n      </InlineField>\n    </div>\n  );\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Button } from '@grafana/ui';\n\nimport { ExemplarTraceIdDestination } from '../types';\n\nimport ExemplarSetting from './ExemplarSetting';\n\ntype Props = {\n  options?: ExemplarTraceIdDestination[];\n  onChange: (value: ExemplarTraceIdDestination[]) => void;\n  disabled?: boolean;\n};\n\nexport function ExemplarsSettings({ options, onChange, disabled }: Props) {\n  return (\n    <>\n      <h3 className=\"page-heading\">Exemplars</h3>\n\n      {options &&\n        options.map((option, index) => {\n          return (\n            <ExemplarSetting\n              key={index}\n              value={option}\n              onChange={(newField) => {\n                const newOptions = [...options];\n                newOptions.splice(index, 1, newField);\n                onChange(newOptions);\n              }}\n              onDelete={() => {\n                const newOptions = [...options];\n                newOptions.splice(index, 1);\n                onChange(newOptions);\n              }}\n              disabled={disabled}\n            />\n          );\n        })}\n\n      {!disabled && (\n        <Button\n          variant=\"secondary\"\n          aria-label={selectors.components.DataSource.Prometheus.configPage.exemplarsAddButton}\n          className={css`\n            margin-bottom: 10px;\n          `}\n          icon=\"plus\"\n          onClick={(event) => {\n            event.preventDefault();\n            const newOptions = [...(options || []), { name: 'traceID' }];\n            onChange(newOptions);\n          }}\n        >\n          Add\n        </Button>\n      )}\n    </>\n  );\n}\n","export const PromFlavorVersions: { [index: string]: Array<{ value?: string; label: string }> } = {\n  Prometheus: [\n    { value: undefined, label: 'Please select' },\n    { value: '2.0.0', label: '< 2.14.x' },\n    { value: '2.14.0', label: '2.14.x' },\n    { value: '2.15.0', label: '2.15.x' },\n    { value: '2.16.0', label: '2.16.x' },\n    { value: '2.17.0', label: '2.17.x' },\n    { value: '2.18.0', label: '2.18.x' },\n    { value: '2.19.0', label: '2.19.x' },\n    { value: '2.20.0', label: '2.20.x' },\n    { value: '2.21.0', label: '2.21.x' },\n    { value: '2.22.0', label: '2.22.x' },\n    { value: '2.23.0', label: '2.23.x' },\n    { value: '2.24.0', label: '2.24.x' },\n    { value: '2.25.0', label: '2.25.x' },\n    { value: '2.26.0', label: '2.26.x' },\n    { value: '2.27.0', label: '2.27.x' },\n    { value: '2.28.0', label: '2.28.x' },\n    { value: '2.29.0', label: '2.29.x' },\n    { value: '2.30.0', label: '2.30.x' },\n    { value: '2.31.0', label: '2.31.x' },\n    { value: '2.32.0', label: '2.32.x' },\n    { value: '2.33.0', label: '2.33.x' },\n    { value: '2.34.0', label: '2.34.x' },\n    { value: '2.35.0', label: '2.35.x' },\n    { value: '2.36.0', label: '2.36.x' },\n    { value: '2.37.0', label: '2.37.x' },\n    { value: '2.38.0', label: '2.38.x' },\n    { value: '2.39.0', label: '2.39.x' },\n    { value: '2.40.0', label: '2.40.x' },\n\n    // This value will be returned for future versions of prometheus until we add new entries to this object\n    { value: '2.40.1', label: '> 2.40.x' },\n  ],\n  Mimir: [\n    { value: undefined, label: 'Please select' },\n    { value: '2.0.0', label: '2.0.x' },\n    { value: '2.1.0', label: '2.1.x' },\n    { value: '2.2.0', label: '2.2.x' },\n    { value: '2.3.0', label: '2.3.x' },\n    { value: '2.4.0', label: '> 2.3.x' },\n  ],\n  Thanos: [\n    { value: undefined, label: 'Please select' },\n    { value: '0.0.0', label: '< 0.16.x' },\n    { value: '0.16.0', label: '0.16.x' },\n    { value: '0.17.0', label: '0.17.x' },\n    { value: '0.18.0', label: '0.18.x' },\n    { value: '0.19.0', label: '0.19.x' },\n    { value: '0.20.0', label: '0.20.x' },\n    { value: '0.21.0', label: '0.21.x' },\n    { value: '0.22.0', label: '0.22.x' },\n    { value: '0.23.0', label: '0.23.x' },\n    { value: '0.24.0', label: '0.24.x' },\n    { value: '0.25.0', label: '0.25.x' },\n    { value: '0.26.0', label: '0.26.x' },\n    { value: '0.27.0', label: '0.27.x' },\n    { value: '0.28.0', label: '0.28.x' },\n    { value: '0.29.0', label: '> 0.28.x' },\n  ],\n  Cortex: [\n    { value: undefined, label: 'Please select' },\n    { value: '0.0.0', label: '< 1.0.0' },\n    { value: '1.0.0', label: '1.0.0' },\n    { value: '1.1.0', label: '1.1.x' },\n    { value: '1.2.0', label: '1.2.x' },\n    { value: '1.3.0', label: '1.3.x' },\n    { value: '1.4.0', label: '1.4.x' },\n    { value: '1.5.0', label: '1.5.x' },\n    { value: '1.6.0', label: '1.6.x' },\n    { value: '1.7.0', label: '1.7.x' },\n    { value: '1.8.0', label: '1.8.x' },\n    { value: '1.9.0', label: '1.9.x' },\n    { value: '1.10.0', label: '1.10.x' },\n    { value: '1.11.0', label: '1.11.x' },\n    { value: '1.13.0', label: '1.13.x' },\n    { value: '1.14.0', label: '> 1.13.x' },\n  ],\n};\n","import React, { SyntheticEvent } from 'react';\nimport semver from 'semver/preload';\n\nimport {\n  DataSourcePluginOptionsEditorProps,\n  DataSourceSettings as DataSourceSettingsType,\n  onUpdateDatasourceJsonDataOptionChecked,\n  SelectableValue,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime/src';\nimport {\n  EventsWithValidation,\n  InlineField,\n  InlineFormLabel,\n  InlineSwitch,\n  LegacyForms,\n  regexValidation,\n  Select,\n} from '@grafana/ui';\n\nimport config from '../../../../core/config';\nimport { useUpdateDatasource } from '../../../../features/datasources/state';\nimport { PromApplication, PromBuildInfoResponse } from '../../../../types/unified-alerting-dto';\nimport { QueryEditorMode } from '../querybuilder/shared/types';\nimport { PrometheusCacheLevel, PromOptions } from '../types';\n\nimport { ExemplarsSettings } from './ExemplarsSettings';\nimport { PromFlavorVersions } from './PromFlavorVersions';\n\nconst { Input, FormField } = LegacyForms;\n\nconst httpOptions = [\n  { value: 'POST', label: 'POST' },\n  { value: 'GET', label: 'GET' },\n];\n\nconst editorOptions = [\n  { value: QueryEditorMode.Builder, label: 'Builder' },\n  { value: QueryEditorMode.Code, label: 'Code' },\n];\n\nconst cacheValueOptions = [\n  { value: PrometheusCacheLevel.Low, label: 'Low' },\n  { value: PrometheusCacheLevel.Medium, label: 'Medium' },\n  { value: PrometheusCacheLevel.High, label: 'High' },\n  { value: PrometheusCacheLevel.None, label: 'None' },\n];\n\ntype PrometheusSelectItemsType = Array<{ value: PromApplication; label: PromApplication }>;\n\nconst prometheusFlavorSelectItems: PrometheusSelectItemsType = [\n  { value: PromApplication.Prometheus, label: PromApplication.Prometheus },\n  { value: PromApplication.Cortex, label: PromApplication.Cortex },\n  { value: PromApplication.Mimir, label: PromApplication.Mimir },\n  { value: PromApplication.Thanos, label: PromApplication.Thanos },\n];\n\ntype Props = Pick<DataSourcePluginOptionsEditorProps<PromOptions>, 'options' | 'onOptionsChange'>;\n\n/**\n * Returns the closest version to what the user provided that we have in our PromFlavorVersions for the currently selected flavor\n * Bugs: It will only reject versions that are a major release apart, so Mimir 2.x might get selected for Prometheus 2.8 if the user selects an incorrect flavor\n * Advantages: We don't need to maintain a list of every possible version for each release\n *\n * This function will return the closest version from PromFlavorVersions that is equal or lower to the version argument,\n * unless the versions are a major release apart.\n */\nconst getVersionString = (version: string, flavor?: string): string | undefined => {\n  if (!flavor || !PromFlavorVersions[flavor]) {\n    return;\n  }\n  const flavorVersionValues = PromFlavorVersions[flavor];\n\n  // As long as it's assured we're using versions which are sorted, we could just filter out the values greater than the target version, and then check the last element in the array\n  const versionsLessThanOrEqual = flavorVersionValues\n    ?.filter((el) => !!el.value && semver.lte(el.value, version))\n    .map((el) => el.value);\n\n  const closestVersion = versionsLessThanOrEqual[versionsLessThanOrEqual.length - 1];\n\n  if (closestVersion) {\n    const differenceBetweenActualAndClosest = semver.diff(closestVersion, version);\n\n    // Only return versions if the target is close to the actual.\n    if (['patch', 'prepatch', 'prerelease', null].includes(differenceBetweenActualAndClosest)) {\n      return closestVersion;\n    }\n  }\n\n  return;\n};\n\nconst unableToDeterminePrometheusVersion = (error?: Error): void => {\n  console.warn('Error fetching version from buildinfo API, must manually select version!', error);\n};\n\n/**\n * I don't like the daisy chain of network requests, and that we have to save on behalf of the user, but currently\n * the backend doesn't allow for the prometheus client url to be passed in from the frontend, so we currently need to save it\n * to the database before consumption.\n *\n * Since the prometheus version fields are below the url field, we can expect users to populate this field before\n * hitting save and test at the bottom of the page. For this case we need to save the current fields before calling the\n * resource to auto-detect the version.\n *\n * @param options\n * @param onOptionsChange\n * @param onUpdate\n */\nconst setPrometheusVersion = (\n  options: DataSourceSettingsType<PromOptions>,\n  onOptionsChange: (options: DataSourceSettingsType<PromOptions>) => void,\n  onUpdate: (dataSource: DataSourceSettingsType<PromOptions>) => Promise<DataSourceSettingsType<PromOptions>>\n) => {\n  // This will save the current state of the form, as the url is needed for this API call to function\n  onUpdate(options)\n    .then((updatedOptions) => {\n      getBackendSrv()\n        .get(`/api/datasources/uid/${updatedOptions.uid}/resources/version-detect`)\n        .then((rawResponse: PromBuildInfoResponse) => {\n          const rawVersionStringFromApi = rawResponse.data?.version ?? '';\n          if (rawVersionStringFromApi && semver.valid(rawVersionStringFromApi)) {\n            const parsedVersion = getVersionString(rawVersionStringFromApi, updatedOptions.jsonData.prometheusType);\n            // If we got a successful response, let's update the backend with the version right away if it's new\n            if (parsedVersion) {\n              onUpdate({\n                ...updatedOptions,\n                jsonData: {\n                  ...updatedOptions.jsonData,\n                  prometheusVersion: parsedVersion,\n                },\n              }).then((updatedUpdatedOptions) => {\n                onOptionsChange(updatedUpdatedOptions);\n              });\n            }\n          } else {\n            unableToDeterminePrometheusVersion();\n          }\n        });\n    })\n    .catch((error) => {\n      unableToDeterminePrometheusVersion(error);\n    });\n};\n\nexport const PromSettings = (props: Props) => {\n  const { options, onOptionsChange } = props;\n\n  // This update call is typed as void, but it returns a response which we need\n  const onUpdate = useUpdateDatasource();\n\n  // We are explicitly adding httpMethod so, it is correctly displayed in dropdown.\n  // This way, it is more predictable for users.\n  if (!options.jsonData.httpMethod) {\n    options.jsonData.httpMethod = 'POST';\n  }\n\n  return (\n    <>\n      <div className=\"gf-form-group\">\n        {/* Scrape interval */}\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <FormField\n              label=\"Scrape interval\"\n              labelWidth={13}\n              inputEl={\n                <Input\n                  className=\"width-6\"\n                  value={options.jsonData.timeInterval}\n                  spellCheck={false}\n                  placeholder=\"15s\"\n                  onChange={onChangeHandler('timeInterval', options, onOptionsChange)}\n                  validationEvents={promSettingsValidationEvents}\n                  disabled={options.readOnly}\n                />\n              }\n              tooltip=\"Set this to the typical scrape and evaluation interval configured in Prometheus. Defaults to 15s.\"\n            />\n          </div>\n        </div>\n        {/* Query Timeout */}\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <FormField\n              label=\"Query timeout\"\n              labelWidth={13}\n              inputEl={\n                <Input\n                  className=\"width-6\"\n                  value={options.jsonData.queryTimeout}\n                  onChange={onChangeHandler('queryTimeout', options, onOptionsChange)}\n                  spellCheck={false}\n                  placeholder=\"60s\"\n                  validationEvents={promSettingsValidationEvents}\n                  disabled={options.readOnly}\n                />\n              }\n              tooltip=\"Set the Prometheus query timeout.\"\n            />\n          </div>\n        </div>\n        {/* HTTP Method */}\n        <div className=\"gf-form\">\n          <InlineFormLabel\n            width={13}\n            tooltip=\"You can use either POST or GET HTTP method to query your Prometheus data source. POST is the recommended method as it allows bigger queries. Change this to GET if you have a Prometheus version older than 2.1 or if POST requests are restricted in your network.\"\n          >\n            HTTP method\n          </InlineFormLabel>\n          <Select\n            aria-label=\"Select HTTP method\"\n            options={httpOptions}\n            value={httpOptions.find((o) => o.value === options.jsonData.httpMethod)}\n            onChange={onChangeHandler('httpMethod', options, onOptionsChange)}\n            className=\"width-6\"\n            disabled={options.readOnly}\n          />\n        </div>\n      </div>\n\n      <h3 className=\"page-heading\">Type and version</h3>\n      {!options.jsonData.prometheusType && !options.jsonData.prometheusVersion && options.readOnly && (\n        <div style={{ marginBottom: '12px' }}>\n          For more information on configuring prometheus type and version in data sources, see the{' '}\n          <a\n            style={{ textDecoration: 'underline' }}\n            href=\"https://grafana.com/docs/grafana/latest/administration/provisioning/\"\n          >\n            provisioning documentation\n          </a>\n          .\n        </div>\n      )}\n      <div className=\"gf-form-group\">\n        <div className=\"gf-form\">\n          <div className=\"gf-form\">\n            <FormField\n              label=\"Prometheus type\"\n              labelWidth={13}\n              inputEl={\n                <Select\n                  aria-label=\"Prometheus type\"\n                  options={prometheusFlavorSelectItems}\n                  value={prometheusFlavorSelectItems.find((o) => o.value === options.jsonData.prometheusType)}\n                  onChange={onChangeHandler(\n                    'prometheusType',\n                    {\n                      ...options,\n                      jsonData: { ...options.jsonData, prometheusVersion: undefined },\n                    },\n                    (options) => {\n                      // Check buildinfo api and set default version if we can\n                      setPrometheusVersion(options, onOptionsChange, onUpdate);\n                      return onOptionsChange({\n                        ...options,\n                        jsonData: { ...options.jsonData, prometheusVersion: undefined },\n                      });\n                    }\n                  )}\n                  width={20}\n                  disabled={options.readOnly}\n                />\n              }\n              tooltip=\"Set this to the type of your prometheus database, e.g. Prometheus, Cortex, Mimir or Thanos. Changing this field will save your current settings, and attempt to detect the version.\"\n            />\n          </div>\n        </div>\n        <div className=\"gf-form\">\n          {options.jsonData.prometheusType && (\n            <div className=\"gf-form\">\n              <FormField\n                label={`${options.jsonData.prometheusType} version`}\n                labelWidth={13}\n                inputEl={\n                  <Select\n                    aria-label={`${options.jsonData.prometheusType} type`}\n                    options={PromFlavorVersions[options.jsonData.prometheusType]}\n                    value={PromFlavorVersions[options.jsonData.prometheusType]?.find(\n                      (o) => o.value === options.jsonData.prometheusVersion\n                    )}\n                    onChange={onChangeHandler('prometheusVersion', options, onOptionsChange)}\n                    width={20}\n                    disabled={options.readOnly}\n                  />\n                }\n                tooltip={`Use this to set the version of your ${options.jsonData.prometheusType} instance if it is not automatically configured.`}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n\n      <h3 className=\"page-heading\">Misc</h3>\n      <div className=\"gf-form-group\">\n        <div className=\"gf-form\">\n          <InlineField\n            labelWidth={28}\n            label=\"Disable metrics lookup\"\n            tooltip=\"Checking this option will disable the metrics chooser and metric/label support in the query field's autocomplete. This helps if you have performance issues with bigger Prometheus instances.\"\n            disabled={options.readOnly}\n          >\n            <InlineSwitch\n              value={options.jsonData.disableMetricsLookup ?? false}\n              onChange={onUpdateDatasourceJsonDataOptionChecked(props, 'disableMetricsLookup')}\n            />\n          </InlineField>\n        </div>\n        <div className=\"gf-form\">\n          <FormField\n            label=\"Default editor\"\n            labelWidth={14}\n            inputEl={\n              <Select\n                aria-label={`Default Editor (Code or Builder)`}\n                options={editorOptions}\n                value={editorOptions.find((o) => o.value === options.jsonData.defaultEditor)}\n                onChange={onChangeHandler('defaultEditor', options, onOptionsChange)}\n                width={20}\n                disabled={options.readOnly}\n              />\n            }\n            tooltip={`Set default editor option (builder/code) for all users of this datasource. If no option was selected, the default editor will be the \"builder\". If they switch to other option rather than the specified with this setting on the panel we always show the selected editor for that user.`}\n          />\n        </div>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form max-width-30\">\n            <FormField\n              label=\"Custom query parameters\"\n              labelWidth={14}\n              tooltip=\"Add custom parameters to all Prometheus or Thanos queries.\"\n              inputEl={\n                <Input\n                  className=\"width-25\"\n                  value={options.jsonData.customQueryParameters}\n                  onChange={onChangeHandler('customQueryParameters', options, onOptionsChange)}\n                  spellCheck={false}\n                  placeholder=\"Example: max_source_resolution=5m&timeout=10\"\n                  disabled={options.readOnly}\n                />\n              }\n            />\n          </div>\n        </div>\n        {config.featureToggles.prometheusResourceBrowserCache && (\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form max-width-30\">\n              <FormField\n                label=\"Cache level\"\n                labelWidth={14}\n                tooltip=\"Sets the browser caching level for editor queries. Higher cache settings are recommended for high cardinality data sources.\"\n                inputEl={\n                  <Select\n                    className={`width-25`}\n                    onChange={onChangeHandler('cacheLevel', options, onOptionsChange)}\n                    options={cacheValueOptions}\n                    value={cacheValueOptions.find((o) => o.value === options.jsonData.cacheLevel)}\n                  />\n                }\n              />\n            </div>\n          </div>\n        )}\n      </div>\n      <ExemplarsSettings\n        options={options.jsonData.exemplarTraceIdDestinations}\n        onChange={(exemplarOptions) =>\n          updateDatasourcePluginJsonDataOption(\n            { onOptionsChange, options },\n            'exemplarTraceIdDestinations',\n            exemplarOptions\n          )\n        }\n        disabled={options.readOnly}\n      />\n    </>\n  );\n};\n\nexport const promSettingsValidationEvents = {\n  [EventsWithValidation.onBlur]: [\n    regexValidation(\n      /^$|^\\d+(ms|[Mwdhmsy])$/,\n      'Value is not valid, you can use number with time unit specifier: y, M, w, d, h, m, s'\n    ),\n  ],\n};\n\nexport const getValueFromEventItem = (eventItem: SyntheticEvent<HTMLInputElement> | SelectableValue<string>) => {\n  if (!eventItem) {\n    return '';\n  }\n\n  if (eventItem.hasOwnProperty('currentTarget')) {\n    return eventItem.currentTarget.value;\n  }\n\n  return (eventItem as SelectableValue<string>).value;\n};\n\nconst onChangeHandler =\n  (key: keyof PromOptions, options: Props['options'], onOptionsChange: Props['onOptionsChange']) =>\n  (eventItem: SyntheticEvent<HTMLInputElement> | SelectableValue<string>) => {\n    onOptionsChange({\n      ...options,\n      jsonData: {\n        ...options.jsonData,\n        [key]: getValueFromEventItem(eventItem),\n      },\n    });\n  };\n","import React, { useRef } from 'react';\n\nimport { SIGV4ConnectionConfig } from '@grafana/aws-sdk';\nimport { DataSourcePluginOptionsEditorProps, DataSourceSettings } from '@grafana/data';\nimport { AlertingSettings, DataSourceHttpSettings, Alert, SecureSocksProxySettings } from '@grafana/ui';\nimport { config } from 'app/core/config';\n\nimport { PromOptions } from '../types';\n\nimport { AzureAuthSettings } from './AzureAuthSettings';\nimport { hasCredentials, setDefaultCredentials, resetCredentials } from './AzureCredentialsConfig';\nimport { PromSettings } from './PromSettings';\n\nexport type Props = DataSourcePluginOptionsEditorProps<PromOptions>;\nexport const ConfigEditor = (props: Props) => {\n  const { options, onOptionsChange } = props;\n  // use ref so this is evaluated only first time it renders and the select does not disappear suddenly.\n  const showAccessOptions = useRef(props.options.access === 'direct');\n\n  const azureAuthSettings = {\n    azureAuthSupported: config.azureAuthEnabled,\n    getAzureAuthEnabled: (config: DataSourceSettings<any, any>): boolean => hasCredentials(config),\n    setAzureAuthEnabled: (config: DataSourceSettings<any, any>, enabled: boolean) =>\n      enabled ? setDefaultCredentials(config) : resetCredentials(config),\n    azureSettingsUI: AzureAuthSettings,\n  };\n\n  return (\n    <>\n      {options.access === 'direct' && (\n        <Alert title=\"Error\" severity=\"error\">\n          Browser access mode in the Prometheus datasource is no longer available. Switch to server access mode.\n        </Alert>\n      )}\n\n      <DataSourceHttpSettings\n        defaultUrl=\"http://localhost:9090\"\n        dataSourceConfig={options}\n        showAccessOptions={showAccessOptions.current}\n        onChange={onOptionsChange}\n        sigV4AuthToggleEnabled={config.sigV4AuthEnabled}\n        azureAuthSettings={azureAuthSettings}\n        renderSigV4Editor={<SIGV4ConnectionConfig {...props}></SIGV4ConnectionConfig>}\n      />\n\n      {config.featureToggles.secureSocksDatasourceProxy && (\n        <SecureSocksProxySettings options={options} onOptionsChange={onOptionsChange} />\n      )}\n\n      <AlertingSettings<PromOptions> options={options} onOptionsChange={onOptionsChange} />\n\n      <PromSettings options={options} onOptionsChange={onOptionsChange} />\n    </>\n  );\n};\n","import { DataSourcePlugin } from '@grafana/data';\n\nimport PromCheatSheet from './components/PromCheatSheet';\nimport PromQueryEditorByApp from './components/PromQueryEditorByApp';\nimport { ConfigEditor } from './configuration/ConfigEditor';\nimport { PrometheusDatasource } from './datasource';\n\nexport const plugin = new DataSourcePlugin(PrometheusDatasource)\n  .setQueryEditor(PromQueryEditorByApp)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditorHelp(PromCheatSheet);\n"],"names":["DataSourcesRoutesContext","useInitDataSourceSettings","uid","dispatch","state","useTestDataSource","dataSourcesRoutes","useDataSourcesRoutes","useLoadDataSources","isLoading","dataSources","useLoadDataSource","useLoadDataSourcePlugins","useAddDatasource","plugin","useUpdateDatasource","dataSource","useDeleteLoadedDataSource","name","useDataSource","useDataSourceExploreUrl","useDataSourceMeta","pluginType","useDataSourceSettings","useDataSourceSettingsNav","dataSourceId","pageId","loadError","loading","navIndex","navIndexId","node","useDataSourceRights","readOnly","hasWriteRights","hasDeleteRights","CHEAT_SHEET_ITEMS","props","item","index","e","QueryPattern","pattern","onPatternSelect","hasNewQueryOption","hasPreviousQuery","selectedPatternName","setSelectedPatternName","styles","getStyles","lang","promql","Card","RawQuery","Button","theme","QueryPatternsModal","isOpen","onClose","onChange","onAddQuery","query","queries","app","openTabs","setOpenTabs","visualQuery","hasOperations","hasMetric","hasLabels","hasBinaryQueries","selectAsNewQuery","Modal","patternType","Collapse","tabs","t","queryEditorModeDefaultLocalStorageKey","changeEditorMode","editorMode","store","getDefaultEditorMode","expr","defaultEditor","value","getQueryWithDefaults","result","isBothInstantAndRange","splitSeparator","PROMETHEUS_QUERY_BUILDER_MAX_RESULTS","MetricSelect","datasource","onGetMetrics","labelsFilters","metricLookupDisabled","setState","customFilterOption","option","searchQuery","label","acc","cur","formatOptionLabel","meta","formatLabelFilters","queryAndFilterToLabelValuesString","queryString","formatKeyValueStringsForLabelValuesQuery","getMetricLabels","results","metricLookupDisabledSearch","debouncedSearch","metrics","LabelFilterItem","defaultOp","onDelete","onGetLabelNames","onGetLabelValues","invalidLabel","invalidValue","getLabelValuesAutofillSuggestions","debounceDuration","isMultiSelect","operator","operators","op","getSelectOptionsFromString","labelValueSearch","Select","selectors","labelNames","change","labelValues","changes","MISSING_LABEL_FILTER_ERROR_MESSAGE","LabelFilters","labelFilterRequired","items","setItems","onLabelsChange","newItems","newLabels","x","hasLabelFilter","onChangeItem","FeedbackLink","feedbackUrl","Icon","promTypes","placeholders","DEFAULT_RESULTS_PER_PAGE","uf","fuzzySearch","haystack","setter","idxs","debouncedFuzzySearch","MetricEncyclopediaModal","variables","setVariables","setIsLoading","setMetrics","hasMetadata","setHasMetadata","metaHaystack","setMetaHaystack","nameHaystack","setNameHaystack","resultsPerPage","setResultsPerPage","pageNum","setPageNum","fuzzySearchQuery","setFuzzySearchQuery","fuzzyMetaSearchResults","setFuzzyMetaSearchResults","fuzzyNameSearchResults","setFuzzyNameSearchResults","fullMetaSearch","setFullMetaSearch","excludeNullMetadata","setExcludeNullMetadata","selectedTypes","setSelectedTypes","letterSearch","setLetterSearch","totalMetricCount","setTotalMetricCount","filteredMetricCount","setFilteredMetricCount","useBackend","setUseBackend","disableTextWrap","setDisableTextWrap","updateMetricsMetadata","haystackMetaData","haystackNameData","metricsData","m","type","description","v","typeOptions","calculatePageList","calcResultsPerPage","pages","filterMetrics","i","sliceMetrics","start","end","hasMetaDataFilters","skipLetterSearch","filteredMetrics","idx","matchesSelectedType","hasNoType","displayedMetrics","filteredSorted","alphabetically","debouncedBackendSearch","metricText","labelsParams","params","letterSearchComponent","alphabetCheck","metricFirstLetter","alphabet","letter","active","updateLetterSearch","selectedClass","activeClass","MAXIMUM_RESULTS_PER_PAGE","calculateResultsPerPage","ButtonCell","testIds","tableResults","tableData","columns","InteractiveTable","r","fuzzySearchCallback","fullMetaSearchVal","Input","Switch","newVal","Spinner","p","InlineField","ascending","metadataFilters","a","b","NestedQuery","nestedQuery","onRemove","onRunQuery","showExplain","val","AutoSizeInput","evt","IconButton","PromQueryBuilder","update","def","NestedQueryList","nestedQueries","onNestedQueryUpdate","updatedList","data","highlightedOp","setHighlightedOp","metricEncyclopediaModalOpen","setMetricEncyclopediaModalOpen","onChangeLabels","labels","withTemplateVariableOptions","optionsPromise","options","forLabel","k","labelsToConsider","labelsIndex","labelName","filter","getLabelValuesAutocompleteSuggestions","interpolatedLabelsToConsider","labelObject","response","getLabelValuesFromLabelValuesAPI","getLabelValuesFromSeriesAPI","promQLExpression","forLabelInterpolated","set","labelValue","labelNameString","getMetrics","isMetricEncyclopediaEnabled","config","initHints","prevValue","Tag","OperationExplainedBox","OperationsEditorRow","OperationList","QueryBuilderHints","OperationListExplained","QueryPreview","PromQueryBuilderContainer","stateSlice","exprChanged","onVisQueryChange","visQuery","visualQueryChange","action","parseResult","PromExemplarField","rest","error","setError","prevError","usePrevious","iconButtonStyles","InlineLabel","Tooltip","PromExploreExtraField","rangeOptions","getQueryTypeOptions","prevQuery","onExemplarChange","exemplar","onChangeQueryStep","interval","onStepChange","onReturnKeyDown","onQueryTypeChange","getQueryTypeChangeHandler","RadioButtonGroup","includeBoth","queryType","legendModeOptions","PromQueryLegendEditor","legendFormat","mode","getLegendMode","inputRef","onLegendFormatChanged","newFormat","onLegendModeChanged","getLegendModeLabel","PromQueryBuilderOptions","onChangeFormat","onChangeStep","queryTypeOptions","event","isEnabled","onIntervalFactorChange","formatOption","FORMAT_OPTIONS","queryTypeValue","getQueryTypeValue","queryTypeLabel","QueryOptionGroup","getCollapsedInfo","shouldShowExemplarSwitch","INTERVAL_FACTOR_OPTIONS","PromQueryEditorSelector","parseModalOpen","setParseModalOpen","queryPatternsModalOpen","setQueryPatternsModalOpen","dataIsStale","setDataIsStale","explain","setExplain","useFlag","onEditorModeChange","newMetricEditorMode","onChangeInternal","onShowExplainChange","ConfirmModal","QueryHeaderSwitch","QueryEditorModeToggle","PromQueryCodeEditor","PromQueryEditorForAlerting","range","PromQueryField","PromQueryEditorByApp","AzureCloud","KnownAzureClouds","isCredentialsComplete","credentials","concealed","getDefaultAzureCloud","getSecret","secret","hasCredentials","getDefaultCredentials","getCredentials","updateCredentials","setDefaultCredentials","resetCredentials","authTypeOptions","AzureCredentialsForm","azureCloudOptions","onCredentialsChange","getSubscriptions","disabled","hasRequiredFields","subscriptions","setSubscriptions","loadSubscriptionsClicked","onLoadSubscriptions","updateSubscriptions","canceled","received","autoSelect","onSubscriptionChange","opt","onAuthTypeChange","selected","updated","onAzureCloudChange","onTenantIdChange","onClientIdChange","onClientSecretChange","onClientSecretReset","AzureAuthSettings","dataSourceConfig","overrideAudienceAllowed","overrideAudienceChecked","setOverrideAudienceChecked","onOverrideAudienceChange","ev","onResourceIdChange","InlineFieldRow","ExemplarSetting","isInternalLink","setIsInternalLink","DataSourcePicker","ds","ExemplarsSettings","newField","newOptions","PromFlavorVersions","FormField","httpOptions","editorOptions","cacheValueOptions","prometheusFlavorSelectItems","getVersionString","version","flavor","versionsLessThanOrEqual","el","closestVersion","differenceBetweenActualAndClosest","unableToDeterminePrometheusVersion","setPrometheusVersion","onOptionsChange","onUpdate","updatedOptions","rawResponse","rawVersionStringFromApi","parsedVersion","updatedUpdatedOptions","PromSettings","onChangeHandler","promSettingsValidationEvents","o","exemplarOptions","getValueFromEventItem","eventItem","key","ConfigEditor","showAccessOptions","azureAuthSettings","enabled","Alert","DataSourceHttpSettings","SecureSocksProxySettings","AlertingSettings"],"sourceRoot":""}