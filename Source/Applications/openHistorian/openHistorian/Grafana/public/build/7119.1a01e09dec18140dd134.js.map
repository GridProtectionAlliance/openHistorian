{"version":3,"file":"7119.1a01e09dec18140dd134.js","mappings":"6IAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iFAQA,IAAIA,EAAO,CACT,SAAU,CACR,YAAa,IACb,aAAc,CAAC,SAAU,MAAM,CACjC,EACA,SAAU,CACR,CAAC,IAAK,GAAG,EACT,CAAC,IAAK,GAAG,EACT,CAAC,IAAK,GAAG,CACX,EACA,iBAAkB,CAChB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,CAC1B,EACA,iBAAkB,CAChB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,CAC1B,EACA,iBAAkB,CAChB,sBAAuB,IAAI,OAAO,wMAAwM,EAC1O,sBAAuB,IAAI,OAAO,0FAA0F,CAC9H,CACF,EACIC,EAAW,CACb,aAAc,QACd,SAAU,CACR,WACA,eACA,WACA,QACA,MACA,QACA,MACA,QACA,QACA,OACA,QACA,MACA,WACA,KACA,OACA,QACA,MACA,SACA,MACA,QACA,KACA,KACA,SACA,OACA,MACA,MACA,KACA,OACA,SACA,QACA,SACA,OACA,QACA,OACA,OACA,QACA,SACA,QACA,OACA,QACA,OACF,EACA,WAAY,CAAC,KAAM,KAAM,MAAO,IAAK,IAAK,IAAI,EAC9C,SAAU,CACR,UACA,SACA,UACA,UACA,SACA,cACA,YACA,uBACA,yBACA,KACF,EACA,aAAc,CACZ,SACA,QACA,MACA,OACA,KACA,QACA,MACA,KACA,QACA,QACA,QACF,EACA,UAAW,CAAC,MAAO,OAAQ,KAAM,QAAS,MAAO,KAAM,QAAS,QAAS,QAAQ,EACjF,UAAW,CACT,IACA,IACA,IACA,MACA,KACA,MACA,KACA,KACA,IACA,KACA,IACA,KACA,KACA,KACA,IACA,IACA,IACA,IACA,IACA,KA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","sources":["webpack://grafana/../../opt/drone/yarncache/monaco-editor-npm-0.34.0-2a8aa5269e-10a28c1fe0.zip/node_modules/monaco-editor/esm/vs/basic-languages/ruby/ruby.js"],"sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.34.0(9d278685b078158491964f8fd7ac9628fffa0f30)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/ruby/ruby.ts\nvar conf = {\n  comments: {\n    lineComment: \"#\",\n    blockComment: [\"=begin\", \"=end\"]\n  },\n  brackets: [\n    [\"(\", \")\"],\n    [\"{\", \"}\"],\n    [\"[\", \"]\"]\n  ],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" }\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" }\n  ],\n  indentationRules: {\n    increaseIndentPattern: new RegExp(`^\\\\s*((begin|class|(private|protected)\\\\s+def|def|else|elsif|ensure|for|if|module|rescue|unless|until|when|while|case)|([^#]*\\\\sdo\\\\b)|([^#]*=\\\\s*(case|if|unless)))\\\\b([^#\\\\{;]|(\"|'|/).*\\\\4)*(#.*)?$`),\n    decreaseIndentPattern: new RegExp(\"^\\\\s*([}\\\\]]([,)]?\\\\s*(#|$)|\\\\.[a-zA-Z_]\\\\w*\\\\b)|(end|rescue|ensure|else|elsif|when)\\\\b)\")\n  }\n};\nvar language = {\n  tokenPostfix: \".ruby\",\n  keywords: [\n    \"__LINE__\",\n    \"__ENCODING__\",\n    \"__FILE__\",\n    \"BEGIN\",\n    \"END\",\n    \"alias\",\n    \"and\",\n    \"begin\",\n    \"break\",\n    \"case\",\n    \"class\",\n    \"def\",\n    \"defined?\",\n    \"do\",\n    \"else\",\n    \"elsif\",\n    \"end\",\n    \"ensure\",\n    \"for\",\n    \"false\",\n    \"if\",\n    \"in\",\n    \"module\",\n    \"next\",\n    \"nil\",\n    \"not\",\n    \"or\",\n    \"redo\",\n    \"rescue\",\n    \"retry\",\n    \"return\",\n    \"self\",\n    \"super\",\n    \"then\",\n    \"true\",\n    \"undef\",\n    \"unless\",\n    \"until\",\n    \"when\",\n    \"while\",\n    \"yield\"\n  ],\n  keywordops: [\"::\", \"..\", \"...\", \"?\", \":\", \"=>\"],\n  builtins: [\n    \"require\",\n    \"public\",\n    \"private\",\n    \"include\",\n    \"extend\",\n    \"attr_reader\",\n    \"protected\",\n    \"private_class_method\",\n    \"protected_class_method\",\n    \"new\"\n  ],\n  declarations: [\n    \"module\",\n    \"class\",\n    \"def\",\n    \"case\",\n    \"do\",\n    \"begin\",\n    \"for\",\n    \"if\",\n    \"while\",\n    \"until\",\n    \"unless\"\n  ],\n  linedecls: [\"def\", \"case\", \"do\", \"begin\", \"for\", \"if\", \"while\", \"until\", \"unless\"],\n  operators: [\n    \"^\",\n    \"&\",\n    \"|\",\n    \"<=>\",\n    \"==\",\n    \"===\",\n    \"!~\",\n    \"=~\",\n    \">\",\n    \">=\",\n    \"<\",\n    \"<=\",\n    \"<<\",\n    \">>\",\n    \"+\",\n    \"-\",\n    \"*\",\n    \"/\",\n    \"%\",\n    \"**\",\n    \"~\",\n    \"+@\",\n    \"-@\",\n    \"[]\",\n    \"[]=\",\n    \"`\",\n    \"+=\",\n    \"-=\",\n    \"*=\",\n    \"**=\",\n    \"/=\",\n    \"^=\",\n    \"%=\",\n    \"<<=\",\n    \">>=\",\n    \"&=\",\n    \"&&=\",\n    \"||=\",\n    \"|=\"\n  ],\n  brackets: [\n    { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\n    { open: \"[\", close: \"]\", token: \"delimiter.square\" }\n  ],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%\\.]+/,\n  escape: /(?:[abefnrstv\\\\\"'\\n\\r]|[0-7]{1,3}|x[0-9A-Fa-f]{1,2}|u[0-9A-Fa-f]{4})/,\n  escapes: /\\\\(?:C\\-(@escape|.)|c(@escape|.)|@escape)/,\n  decpart: /\\d(_?\\d)*/,\n  decimal: /0|@decpart/,\n  delim: /[^a-zA-Z0-9\\s\\n\\r]/,\n  heredelim: /(?:\\w+|'[^']*'|\"[^\"]*\"|`[^`]*`)/,\n  regexpctl: /[(){}\\[\\]\\$\\^|\\-*+?\\.]/,\n  regexpesc: /\\\\(?:[AzZbBdDfnrstvwWn0\\\\\\/]|@regexpctl|c[A-Z]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})?/,\n  tokenizer: {\n    root: [\n      [\n        /^(\\s*)([a-z_]\\w*[!?=]?)/,\n        [\n          \"white\",\n          {\n            cases: {\n              \"for|until|while\": {\n                token: \"keyword.$2\",\n                next: \"@dodecl.$2\"\n              },\n              \"@declarations\": {\n                token: \"keyword.$2\",\n                next: \"@root.$2\"\n              },\n              end: { token: \"keyword.$S2\", next: \"@pop\" },\n              \"@keywords\": \"keyword\",\n              \"@builtins\": \"predefined\",\n              \"@default\": \"identifier\"\n            }\n          }\n        ]\n      ],\n      [\n        /[a-z_]\\w*[!?=]?/,\n        {\n          cases: {\n            \"if|unless|while|until\": {\n              token: \"keyword.$0x\",\n              next: \"@modifier.$0x\"\n            },\n            for: { token: \"keyword.$2\", next: \"@dodecl.$2\" },\n            \"@linedecls\": { token: \"keyword.$0\", next: \"@root.$0\" },\n            end: { token: \"keyword.$S2\", next: \"@pop\" },\n            \"@keywords\": \"keyword\",\n            \"@builtins\": \"predefined\",\n            \"@default\": \"identifier\"\n          }\n        }\n      ],\n      [/[A-Z][\\w]*[!?=]?/, \"constructor.identifier\"],\n      [/\\$[\\w]*/, \"global.constant\"],\n      [/@[\\w]*/, \"namespace.instance.identifier\"],\n      [/@@@[\\w]*/, \"namespace.class.identifier\"],\n      [/<<[-~](@heredelim).*/, { token: \"string.heredoc.delimiter\", next: \"@heredoc.$1\" }],\n      [/[ \\t\\r\\n]+<<(@heredelim).*/, { token: \"string.heredoc.delimiter\", next: \"@heredoc.$1\" }],\n      [/^<<(@heredelim).*/, { token: \"string.heredoc.delimiter\", next: \"@heredoc.$1\" }],\n      { include: \"@whitespace\" },\n      [/\"/, { token: \"string.d.delim\", next: '@dstring.d.\"' }],\n      [/'/, { token: \"string.sq.delim\", next: \"@sstring.sq\" }],\n      [/%([rsqxwW]|Q?)/, { token: \"@rematch\", next: \"pstring\" }],\n      [/`/, { token: \"string.x.delim\", next: \"@dstring.x.`\" }],\n      [/:(\\w|[$@])\\w*[!?=]?/, \"string.s\"],\n      [/:\"/, { token: \"string.s.delim\", next: '@dstring.s.\"' }],\n      [/:'/, { token: \"string.s.delim\", next: \"@sstring.s\" }],\n      [/\\/(?=(\\\\\\/|[^\\/\\n])+\\/)/, { token: \"regexp.delim\", next: \"@regexp\" }],\n      [/[{}()\\[\\]]/, \"@brackets\"],\n      [\n        /@symbols/,\n        {\n          cases: {\n            \"@keywordops\": \"keyword\",\n            \"@operators\": \"operator\",\n            \"@default\": \"\"\n          }\n        }\n      ],\n      [/[;,]/, \"delimiter\"],\n      [/0[xX][0-9a-fA-F](_?[0-9a-fA-F])*/, \"number.hex\"],\n      [/0[_oO][0-7](_?[0-7])*/, \"number.octal\"],\n      [/0[bB][01](_?[01])*/, \"number.binary\"],\n      [/0[dD]@decpart/, \"number\"],\n      [\n        /@decimal((\\.@decpart)?([eE][\\-+]?@decpart)?)/,\n        {\n          cases: {\n            $1: \"number.float\",\n            \"@default\": \"number\"\n          }\n        }\n      ]\n    ],\n    dodecl: [\n      [/^/, { token: \"\", switchTo: \"@root.$S2\" }],\n      [\n        /[a-z_]\\w*[!?=]?/,\n        {\n          cases: {\n            end: { token: \"keyword.$S2\", next: \"@pop\" },\n            do: { token: \"keyword\", switchTo: \"@root.$S2\" },\n            \"@linedecls\": {\n              token: \"@rematch\",\n              switchTo: \"@root.$S2\"\n            },\n            \"@keywords\": \"keyword\",\n            \"@builtins\": \"predefined\",\n            \"@default\": \"identifier\"\n          }\n        }\n      ],\n      { include: \"@root\" }\n    ],\n    modifier: [\n      [/^/, \"\", \"@pop\"],\n      [\n        /[a-z_]\\w*[!?=]?/,\n        {\n          cases: {\n            end: { token: \"keyword.$S2\", next: \"@pop\" },\n            \"then|else|elsif|do\": {\n              token: \"keyword\",\n              switchTo: \"@root.$S2\"\n            },\n            \"@linedecls\": {\n              token: \"@rematch\",\n              switchTo: \"@root.$S2\"\n            },\n            \"@keywords\": \"keyword\",\n            \"@builtins\": \"predefined\",\n            \"@default\": \"identifier\"\n          }\n        }\n      ],\n      { include: \"@root\" }\n    ],\n    sstring: [\n      [/[^\\\\']+/, \"string.$S2\"],\n      [/\\\\\\\\|\\\\'|\\\\$/, \"string.$S2.escape\"],\n      [/\\\\./, \"string.$S2.invalid\"],\n      [/'/, { token: \"string.$S2.delim\", next: \"@pop\" }]\n    ],\n    dstring: [\n      [/[^\\\\`\"#]+/, \"string.$S2\"],\n      [/#/, \"string.$S2.escape\", \"@interpolated\"],\n      [/\\\\$/, \"string.$S2.escape\"],\n      [/@escapes/, \"string.$S2.escape\"],\n      [/\\\\./, \"string.$S2.escape.invalid\"],\n      [\n        /[`\"]/,\n        {\n          cases: {\n            \"$#==$S3\": { token: \"string.$S2.delim\", next: \"@pop\" },\n            \"@default\": \"string.$S2\"\n          }\n        }\n      ]\n    ],\n    heredoc: [\n      [\n        /^(\\s*)(@heredelim)$/,\n        {\n          cases: {\n            \"$2==$S2\": [\"string.heredoc\", { token: \"string.heredoc.delimiter\", next: \"@pop\" }],\n            \"@default\": [\"string.heredoc\", \"string.heredoc\"]\n          }\n        }\n      ],\n      [/.*/, \"string.heredoc\"]\n    ],\n    interpolated: [\n      [/\\$\\w*/, \"global.constant\", \"@pop\"],\n      [/@\\w*/, \"namespace.class.identifier\", \"@pop\"],\n      [/@@@\\w*/, \"namespace.instance.identifier\", \"@pop\"],\n      [\n        /[{]/,\n        {\n          token: \"string.escape.curly\",\n          switchTo: \"@interpolated_compound\"\n        }\n      ],\n      [\"\", \"\", \"@pop\"]\n    ],\n    interpolated_compound: [\n      [/[}]/, { token: \"string.escape.curly\", next: \"@pop\" }],\n      { include: \"@root\" }\n    ],\n    pregexp: [\n      { include: \"@whitespace\" },\n      [\n        /[^\\(\\{\\[\\\\]/,\n        {\n          cases: {\n            \"$#==$S3\": { token: \"regexp.delim\", next: \"@pop\" },\n            \"$#==$S2\": { token: \"regexp.delim\", next: \"@push\" },\n            \"~[)}\\\\]]\": \"@brackets.regexp.escape.control\",\n            \"~@regexpctl\": \"regexp.escape.control\",\n            \"@default\": \"regexp\"\n          }\n        }\n      ],\n      { include: \"@regexcontrol\" }\n    ],\n    regexp: [\n      { include: \"@regexcontrol\" },\n      [/[^\\\\\\/]/, \"regexp\"],\n      [\"/[ixmp]*\", { token: \"regexp.delim\" }, \"@pop\"]\n    ],\n    regexcontrol: [\n      [\n        /(\\{)(\\d+(?:,\\d*)?)(\\})/,\n        [\n          \"@brackets.regexp.escape.control\",\n          \"regexp.escape.control\",\n          \"@brackets.regexp.escape.control\"\n        ]\n      ],\n      [\n        /(\\[)(\\^?)/,\n        [\"@brackets.regexp.escape.control\", { token: \"regexp.escape.control\", next: \"@regexrange\" }]\n      ],\n      [/(\\()(\\?[:=!])/, [\"@brackets.regexp.escape.control\", \"regexp.escape.control\"]],\n      [/\\(\\?#/, { token: \"regexp.escape.control\", next: \"@regexpcomment\" }],\n      [/[()]/, \"@brackets.regexp.escape.control\"],\n      [/@regexpctl/, \"regexp.escape.control\"],\n      [/\\\\$/, \"regexp.escape\"],\n      [/@regexpesc/, \"regexp.escape\"],\n      [/\\\\\\./, \"regexp.invalid\"],\n      [/#/, \"regexp.escape\", \"@interpolated\"]\n    ],\n    regexrange: [\n      [/-/, \"regexp.escape.control\"],\n      [/\\^/, \"regexp.invalid\"],\n      [/\\\\$/, \"regexp.escape\"],\n      [/@regexpesc/, \"regexp.escape\"],\n      [/[^\\]]/, \"regexp\"],\n      [/\\]/, \"@brackets.regexp.escape.control\", \"@pop\"]\n    ],\n    regexpcomment: [\n      [/[^)]+/, \"comment\"],\n      [/\\)/, { token: \"regexp.escape.control\", next: \"@pop\" }]\n    ],\n    pstring: [\n      [/%([qws])\\(/, { token: \"string.$1.delim\", switchTo: \"@qstring.$1.(.)\" }],\n      [/%([qws])\\[/, { token: \"string.$1.delim\", switchTo: \"@qstring.$1.[.]\" }],\n      [/%([qws])\\{/, { token: \"string.$1.delim\", switchTo: \"@qstring.$1.{.}\" }],\n      [/%([qws])</, { token: \"string.$1.delim\", switchTo: \"@qstring.$1.<.>\" }],\n      [/%([qws])(@delim)/, { token: \"string.$1.delim\", switchTo: \"@qstring.$1.$2.$2\" }],\n      [/%r\\(/, { token: \"regexp.delim\", switchTo: \"@pregexp.(.)\" }],\n      [/%r\\[/, { token: \"regexp.delim\", switchTo: \"@pregexp.[.]\" }],\n      [/%r\\{/, { token: \"regexp.delim\", switchTo: \"@pregexp.{.}\" }],\n      [/%r</, { token: \"regexp.delim\", switchTo: \"@pregexp.<.>\" }],\n      [/%r(@delim)/, { token: \"regexp.delim\", switchTo: \"@pregexp.$1.$1\" }],\n      [/%(x|W|Q?)\\(/, { token: \"string.$1.delim\", switchTo: \"@qqstring.$1.(.)\" }],\n      [/%(x|W|Q?)\\[/, { token: \"string.$1.delim\", switchTo: \"@qqstring.$1.[.]\" }],\n      [/%(x|W|Q?)\\{/, { token: \"string.$1.delim\", switchTo: \"@qqstring.$1.{.}\" }],\n      [/%(x|W|Q?)</, { token: \"string.$1.delim\", switchTo: \"@qqstring.$1.<.>\" }],\n      [/%(x|W|Q?)(@delim)/, { token: \"string.$1.delim\", switchTo: \"@qqstring.$1.$2.$2\" }],\n      [/%([rqwsxW]|Q?)./, { token: \"invalid\", next: \"@pop\" }],\n      [/./, { token: \"invalid\", next: \"@pop\" }]\n    ],\n    qstring: [\n      [/\\\\$/, \"string.$S2.escape\"],\n      [/\\\\./, \"string.$S2.escape\"],\n      [\n        /./,\n        {\n          cases: {\n            \"$#==$S4\": { token: \"string.$S2.delim\", next: \"@pop\" },\n            \"$#==$S3\": { token: \"string.$S2.delim\", next: \"@push\" },\n            \"@default\": \"string.$S2\"\n          }\n        }\n      ]\n    ],\n    qqstring: [[/#/, \"string.$S2.escape\", \"@interpolated\"], { include: \"@qstring\" }],\n    whitespace: [\n      [/[ \\t\\r\\n]+/, \"\"],\n      [/^\\s*=begin\\b/, \"comment\", \"@comment\"],\n      [/#.*$/, \"comment\"]\n    ],\n    comment: [\n      [/[^=]+/, \"comment\"],\n      [/^\\s*=begin\\b/, \"comment.invalid\"],\n      [/^\\s*=end\\b.*/, \"comment\", \"@pop\"],\n      [/[=]/, \"comment\"]\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"],"names":["conf","language"],"sourceRoot":""}