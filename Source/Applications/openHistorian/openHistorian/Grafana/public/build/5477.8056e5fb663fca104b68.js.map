{"version":3,"file":"5477.8056e5fb663fca104b68.js","mappings":"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","sources":["webpack://grafana/./public/app/features/datasources/components/BasicSettings.tsx","webpack://grafana/./public/app/features/datasources/components/ButtonRow.tsx","webpack://grafana/./public/app/features/datasources/components/CloudInfoBox.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceReadOnlyMessage.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceLoadError.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceMissingRightsMessage.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourcePluginConfigPage.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourcePluginSettings.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourcePluginState.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceTestingStatus.tsx","webpack://grafana/./public/app/features/datasources/components/EditDataSource.tsx","webpack://grafana/./public/app/features/datasources/state/contexts.ts","webpack://grafana/./public/app/features/datasources/state/hooks.ts","webpack://grafana/./public/app/features/plugins/components/PluginStateInfo.tsx"],"sourcesContent":["import React from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { InlineField, InlineSwitch, Input } from '@grafana/ui';\n\nexport interface Props {\n  dataSourceName: string;\n  isDefault: boolean;\n  onNameChange: (name: string) => void;\n  onDefaultChange: (value: boolean) => void;\n}\n\nexport function BasicSettings({ dataSourceName, isDefault, onDefaultChange, onNameChange }: Props) {\n  return (\n    <div className=\"gf-form-group\" aria-label=\"Datasource settings page basic settings\">\n      <div className=\"gf-form-inline\">\n        {/* Name */}\n        <div className=\"gf-form max-width-30\">\n          <InlineField\n            label=\"Name\"\n            tooltip=\"The name is used when you select the data source in panels. The default data source is\n              'preselected in new panels.\"\n            grow\n          >\n            <Input\n              id=\"basic-settings-name\"\n              type=\"text\"\n              value={dataSourceName}\n              placeholder=\"Name\"\n              onChange={(event) => onNameChange(event.currentTarget.value)}\n              required\n              aria-label={selectors.pages.DataSource.name}\n            />\n          </InlineField>\n        </div>\n\n        {/* Is Default */}\n        <InlineField label=\"Default\" labelWidth={8}>\n          <InlineSwitch\n            id=\"basic-settings-default\"\n            value={isDefault}\n            onChange={(event: React.FormEvent<HTMLInputElement>) => {\n              onDefaultChange(event.currentTarget.checked);\n            }}\n          />\n        </InlineField>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Button, LinkButton } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction } from 'app/types';\n\nexport interface Props {\n  exploreUrl: string;\n  canSave: boolean;\n  canDelete: boolean;\n  onDelete: () => void;\n  onSubmit: (event: any) => void;\n  onTest: (event: any) => void;\n}\n\nexport function ButtonRow({ canSave, canDelete, onDelete, onSubmit, onTest, exploreUrl }: Props) {\n  const canExploreDataSources = contextSrv.hasPermission(AccessControlAction.DataSourcesExplore);\n\n  return (\n    <div className=\"gf-form-button-row\">\n      <Button variant=\"secondary\" fill=\"solid\" type=\"button\" onClick={() => history.back()}>\n        Back\n      </Button>\n      <LinkButton variant=\"secondary\" fill=\"solid\" href={exploreUrl} disabled={!canExploreDataSources}>\n        Explore\n      </LinkButton>\n      <Button\n        type=\"button\"\n        variant=\"destructive\"\n        disabled={!canDelete}\n        onClick={onDelete}\n        aria-label={selectors.pages.DataSource.delete}\n      >\n        Delete\n      </Button>\n      {canSave && (\n        <Button\n          type=\"submit\"\n          variant=\"primary\"\n          disabled={!canSave}\n          onClick={(event) => onSubmit(event)}\n          aria-label={selectors.pages.DataSource.saveAndTest}\n        >\n          Save &amp; test\n        </Button>\n      )}\n      {!canSave && (\n        <Button variant=\"primary\" onClick={onTest}>\n          Test\n        </Button>\n      )}\n    </div>\n  );\n}\n","import React from 'react';\n\nimport { DataSourceSettings } from '@grafana/data';\nimport { GrafanaEdition } from '@grafana/data/src/types/config';\nimport { Alert } from '@grafana/ui';\nimport { LocalStorageValueProvider } from 'app/core/components/LocalStorageValueProvider';\nimport { config } from 'app/core/config';\n\nconst LOCAL_STORAGE_KEY = 'datasources.settings.cloudInfoBox.isDismissed';\n\nexport interface Props {\n  dataSource: DataSourceSettings;\n}\n\nexport function CloudInfoBox({ dataSource }: Props) {\n  let mainDS = '';\n  let extraDS = '';\n\n  // don't show for already configured data sources or provisioned data sources\n  if (dataSource.readOnly || (dataSource.version ?? 0) > 2) {\n    return null;\n  }\n\n  // Skip showing this info box in some editions\n  if (config.buildInfo.edition !== GrafanaEdition.OpenSource) {\n    return null;\n  }\n\n  switch (dataSource.type) {\n    case 'prometheus':\n      mainDS = 'Prometheus';\n      extraDS = 'Loki';\n      break;\n    case 'loki':\n      mainDS = 'Loki';\n      extraDS = 'Prometheus';\n      break;\n    default:\n      return null;\n  }\n\n  return (\n    <LocalStorageValueProvider<boolean> storageKey={LOCAL_STORAGE_KEY} defaultValue={false}>\n      {(isDismissed, onDismiss) => {\n        if (isDismissed) {\n          return null;\n        }\n        return (\n          <Alert\n            title={`Configure your ${mainDS} data source below`}\n            severity=\"info\"\n            bottomSpacing={4}\n            onRemove={() => {\n              onDismiss(true);\n            }}\n          >\n            Or skip the effort and get {mainDS} (and {extraDS}) as fully-managed, scalable, and hosted data sources from\n            Grafana Labs with the{' '}\n            <a\n              className=\"external-link\"\n              href={`https://grafana.com/signup/cloud/connect-account?src=grafana-oss&cnt=${dataSource.type}-settings`}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              title=\"The free plan includes 10k active metrics and 50gb storage.\"\n            >\n              free-forever Grafana Cloud plan\n            </a>\n            .\n          </Alert>\n        );\n      }}\n    </LocalStorageValueProvider>\n  );\n}\n","import React from 'react';\n\nimport { selectors as e2eSelectors } from '@grafana/e2e-selectors';\nimport { Alert } from '@grafana/ui';\n\nexport const readOnlyMessage =\n  'This data source was added by config and cannot be modified using the UI. Please contact your server admin to update this data source.';\n\nexport function DataSourceReadOnlyMessage() {\n  return (\n    <Alert aria-label={e2eSelectors.pages.DataSource.readOnly} severity=\"info\" title=\"Provisioned data source\">\n      {readOnlyMessage}\n    </Alert>\n  );\n}\n","import React from 'react';\n\nimport { Button } from '@grafana/ui';\n\nimport { DataSourceRights } from '../types';\n\nimport { DataSourceReadOnlyMessage } from './DataSourceReadOnlyMessage';\n\nexport type Props = {\n  dataSourceRights: DataSourceRights;\n  onDelete: () => void;\n};\n\nexport function DataSourceLoadError({ dataSourceRights, onDelete }: Props) {\n  const { readOnly, hasDeleteRights } = dataSourceRights;\n  const canDelete = !readOnly && hasDeleteRights;\n  const navigateBack = () => history.back();\n\n  return (\n    <>\n      {readOnly && <DataSourceReadOnlyMessage />}\n\n      <div className=\"gf-form-button-row\">\n        {canDelete && (\n          <Button type=\"submit\" variant=\"destructive\" onClick={onDelete}>\n            Delete\n          </Button>\n        )}\n\n        <Button variant=\"secondary\" fill=\"outline\" type=\"button\" onClick={navigateBack}>\n          Back\n        </Button>\n      </div>\n    </>\n  );\n}\n","import React from 'react';\n\nimport { Alert } from '@grafana/ui';\n\nexport const missingRightsMessage =\n  'You are not allowed to modify this data source. Please contact your server admin to update this data source.';\n\nexport function DataSourceMissingRightsMessage() {\n  return (\n    <Alert severity=\"info\" title=\"Missing rights\">\n      {missingRightsMessage}\n    </Alert>\n  );\n}\n","import React from 'react';\n\nimport { GenericDataSourcePlugin } from '../types';\n\nexport type Props = {\n  plugin?: GenericDataSourcePlugin | null;\n  pageId: string;\n};\n\nexport function DataSourcePluginConfigPage({ plugin, pageId }: Props) {\n  if (!plugin || !plugin.configPages) {\n    return null;\n  }\n\n  const page = plugin.configPages.find(({ id }) => id === pageId);\n\n  if (page) {\n    // TODO: Investigate if any plugins are using this? We should change this interface\n    return <page.body plugin={plugin} query={{}} />;\n  }\n\n  return <div>Page not found: {page}</div>;\n}\n","import { cloneDeep } from 'lodash';\nimport React, { PureComponent } from 'react';\n\nimport { DataSourcePluginMeta, DataSourceSettings } from '@grafana/data';\nimport { AngularComponent, getAngularLoader } from '@grafana/runtime';\n\nimport { GenericDataSourcePlugin } from '../types';\n\nexport interface Props {\n  plugin: GenericDataSourcePlugin;\n  dataSource: DataSourceSettings;\n  dataSourceMeta: DataSourcePluginMeta;\n  onModelChange: (dataSource: DataSourceSettings) => void;\n}\n\nexport class DataSourcePluginSettings extends PureComponent<Props> {\n  element: HTMLDivElement | null = null;\n  component?: AngularComponent;\n  scopeProps: {\n    ctrl: { datasourceMeta: DataSourcePluginMeta; current: DataSourceSettings };\n    onModelChanged: (dataSource: DataSourceSettings) => void;\n  };\n\n  constructor(props: Props) {\n    super(props);\n\n    this.scopeProps = {\n      ctrl: { datasourceMeta: props.dataSourceMeta, current: cloneDeep(props.dataSource) },\n      onModelChanged: this.onModelChanged,\n    };\n    this.onModelChanged = this.onModelChanged.bind(this);\n  }\n\n  componentDidMount() {\n    const { plugin } = this.props;\n\n    if (!this.element) {\n      return;\n    }\n\n    if (!plugin.components.ConfigEditor) {\n      // React editor is not specified, let's render angular editor\n      // How to approach this better? Introduce ReactDataSourcePlugin interface and typeguard it here?\n      const loader = getAngularLoader();\n      const template = '<plugin-component type=\"datasource-config-ctrl\" />';\n\n      this.component = loader.load(this.element, this.scopeProps, template);\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { plugin } = this.props;\n    if (!plugin.components.ConfigEditor && this.props.dataSource !== prevProps.dataSource) {\n      this.scopeProps.ctrl.current = cloneDeep(this.props.dataSource);\n\n      this.component?.digest();\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.component) {\n      this.component.destroy();\n    }\n  }\n\n  onModelChanged = (dataSource: DataSourceSettings) => {\n    this.props.onModelChange(dataSource);\n  };\n\n  render() {\n    const { plugin, dataSource } = this.props;\n\n    if (!plugin) {\n      return null;\n    }\n\n    return (\n      <div ref={(element) => (this.element = element)}>\n        {plugin.components.ConfigEditor &&\n          React.createElement(plugin.components.ConfigEditor, {\n            options: dataSource,\n            onOptionsChange: this.onModelChanged,\n          })}\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport { PluginState } from '@grafana/data';\nimport { PluginStateInfo } from 'app/features/plugins/components/PluginStateInfo';\n\nexport type Props = {\n  state?: PluginState;\n};\n\nexport function DataSourcePluginState({ state }: Props) {\n  return (\n    <div className=\"gf-form\">\n      <label className=\"gf-form-label width-10\">Plugin state</label>\n      <label className=\"gf-form-label gf-form-label--transparent\">\n        <PluginStateInfo state={state} />\n      </label>\n    </div>\n  );\n}\n","import React from 'react';\n\nimport { selectors as e2eSelectors } from '@grafana/e2e-selectors';\nimport { Alert } from '@grafana/ui';\nimport { TestingStatus } from 'app/types';\n\nexport type Props = {\n  testingStatus?: TestingStatus;\n};\n\nexport function DataSourceTestingStatus({ testingStatus }: Props) {\n  const isError = testingStatus?.status === 'error';\n  const message = testingStatus?.message;\n  const detailsMessage = testingStatus?.details?.message;\n  const detailsVerboseMessage = testingStatus?.details?.verboseMessage;\n\n  if (message) {\n    return (\n      <div className=\"gf-form-group p-t-2\">\n        <Alert\n          severity={isError ? 'error' : 'success'}\n          title={message}\n          aria-label={e2eSelectors.pages.DataSource.alert}\n        >\n          {testingStatus?.details && (\n            <>\n              {detailsMessage}\n              {detailsVerboseMessage ? (\n                <details style={{ whiteSpace: 'pre-wrap' }}>{detailsVerboseMessage}</details>\n              ) : null}\n            </>\n          )}\n        </Alert>\n      </div>\n    );\n  }\n\n  return null;\n}\n","import { AnyAction } from '@reduxjs/toolkit';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { DataSourcePluginMeta, DataSourceSettings as DataSourceSettingsType } from '@grafana/data';\nimport PageLoader from 'app/core/components/PageLoader/PageLoader';\nimport { DataSourceSettingsState, ThunkResult } from 'app/types';\n\nimport {\n  dataSourceLoaded,\n  setDataSourceName,\n  setIsDefault,\n  useDataSource,\n  useDataSourceExploreUrl,\n  useDataSourceMeta,\n  useDataSourceRights,\n  useDataSourceSettings,\n  useDeleteLoadedDataSource,\n  useInitDataSourceSettings,\n  useTestDataSource,\n  useUpdateDatasource,\n} from '../state';\nimport { DataSourceRights } from '../types';\n\nimport { BasicSettings } from './BasicSettings';\nimport { ButtonRow } from './ButtonRow';\nimport { CloudInfoBox } from './CloudInfoBox';\nimport { DataSourceLoadError } from './DataSourceLoadError';\nimport { DataSourceMissingRightsMessage } from './DataSourceMissingRightsMessage';\nimport { DataSourcePluginConfigPage } from './DataSourcePluginConfigPage';\nimport { DataSourcePluginSettings } from './DataSourcePluginSettings';\nimport { DataSourcePluginState } from './DataSourcePluginState';\nimport { DataSourceReadOnlyMessage } from './DataSourceReadOnlyMessage';\nimport { DataSourceTestingStatus } from './DataSourceTestingStatus';\n\nexport type Props = {\n  // The ID of the data source\n  uid: string;\n  // The ID of the custom datasource setting page\n  pageId?: string | null;\n};\n\nexport function EditDataSource({ uid, pageId }: Props) {\n  useInitDataSourceSettings(uid);\n\n  const dispatch = useDispatch();\n  const dataSource = useDataSource(uid);\n  const dataSourceMeta = useDataSourceMeta(dataSource.type);\n  const dataSourceSettings = useDataSourceSettings();\n  const dataSourceRights = useDataSourceRights(uid);\n  const exploreUrl = useDataSourceExploreUrl(uid);\n  const onDelete = useDeleteLoadedDataSource();\n  const onTest = useTestDataSource(uid);\n  const onUpdate = useUpdateDatasource();\n  const onDefaultChange = (value: boolean) => dispatch(setIsDefault(value));\n  const onNameChange = (name: string) => dispatch(setDataSourceName(name));\n  const onOptionsChange = (ds: DataSourceSettingsType) => dispatch(dataSourceLoaded(ds));\n\n  return (\n    <EditDataSourceView\n      pageId={pageId}\n      dataSource={dataSource}\n      dataSourceMeta={dataSourceMeta}\n      dataSourceSettings={dataSourceSettings}\n      dataSourceRights={dataSourceRights}\n      exploreUrl={exploreUrl}\n      onDelete={onDelete}\n      onDefaultChange={onDefaultChange}\n      onNameChange={onNameChange}\n      onOptionsChange={onOptionsChange}\n      onTest={onTest}\n      onUpdate={onUpdate}\n    />\n  );\n}\n\nexport type ViewProps = {\n  pageId?: string | null;\n  dataSource: DataSourceSettingsType;\n  dataSourceMeta: DataSourcePluginMeta;\n  dataSourceSettings: DataSourceSettingsState;\n  dataSourceRights: DataSourceRights;\n  exploreUrl: string;\n  onDelete: () => void;\n  onDefaultChange: (isDefault: boolean) => AnyAction;\n  onNameChange: (name: string) => AnyAction;\n  onOptionsChange: (dataSource: DataSourceSettingsType) => AnyAction;\n  onTest: () => ThunkResult<void>;\n  onUpdate: (dataSource: DataSourceSettingsType) => ThunkResult<void>;\n};\n\nexport function EditDataSourceView({\n  pageId,\n  dataSource,\n  dataSourceMeta,\n  dataSourceSettings,\n  dataSourceRights,\n  exploreUrl,\n  onDelete,\n  onDefaultChange,\n  onNameChange,\n  onOptionsChange,\n  onTest,\n  onUpdate,\n}: ViewProps) {\n  const { plugin, loadError, testingStatus, loading } = dataSourceSettings;\n  const { readOnly, hasWriteRights, hasDeleteRights } = dataSourceRights;\n  const hasDataSource = dataSource.id > 0;\n\n  const onSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    await onUpdate({ ...dataSource });\n\n    onTest();\n  };\n\n  if (loadError) {\n    return <DataSourceLoadError dataSourceRights={dataSourceRights} onDelete={onDelete} />;\n  }\n\n  if (loading) {\n    return <PageLoader />;\n  }\n\n  // TODO - is this needed?\n  if (!hasDataSource) {\n    return null;\n  }\n\n  if (pageId) {\n    return <DataSourcePluginConfigPage pageId={pageId} plugin={plugin} />;\n  }\n\n  return (\n    <form onSubmit={onSubmit}>\n      {!hasWriteRights && <DataSourceMissingRightsMessage />}\n      {readOnly && <DataSourceReadOnlyMessage />}\n      {dataSourceMeta.state && <DataSourcePluginState state={dataSourceMeta.state} />}\n\n      <CloudInfoBox dataSource={dataSource} />\n\n      <BasicSettings\n        dataSourceName={dataSource.name}\n        isDefault={dataSource.isDefault}\n        onDefaultChange={onDefaultChange}\n        onNameChange={onNameChange}\n      />\n\n      {plugin && (\n        <DataSourcePluginSettings\n          plugin={plugin}\n          dataSource={dataSource}\n          dataSourceMeta={dataSourceMeta}\n          onModelChange={onOptionsChange}\n        />\n      )}\n\n      <DataSourceTestingStatus testingStatus={testingStatus} />\n\n      <ButtonRow\n        onSubmit={onSubmit}\n        onDelete={onDelete}\n        onTest={onTest}\n        exploreUrl={exploreUrl}\n        canSave={!readOnly && hasWriteRights}\n        canDelete={!readOnly && hasDeleteRights}\n      />\n    </form>\n  );\n}\n","import { createContext } from 'react';\n\nimport { DATASOURCES_ROUTES } from '../constants';\nimport { DataSourcesRoutes } from '../types';\n\n// The purpose of this context is to be able to override the data-sources routes (used for links for example) used under\n// the app/features/datasources modules, so we can reuse them more easily in different parts of the application (e.g. under Data Connections)\nexport const DataSourcesRoutesContext = createContext<DataSourcesRoutes>(DATASOURCES_ROUTES);\n","import { useContext, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { DataSourcePluginMeta, DataSourceSettings, urlUtil } from '@grafana/data';\nimport { cleanUpAction } from 'app/core/actions/cleanUp';\nimport appEvents from 'app/core/app_events';\nimport { contextSrv } from 'app/core/core';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { AccessControlAction, StoreState } from 'app/types';\nimport { ShowConfirmModalEvent } from 'app/types/events';\n\nimport { DataSourceRights } from '../types';\n\nimport {\n  initDataSourceSettings,\n  testDataSource,\n  loadDataSource,\n  loadDataSources,\n  loadDataSourcePlugins,\n  addDataSource,\n  updateDataSource,\n  deleteLoadedDataSource,\n} from './actions';\nimport { DataSourcesRoutesContext } from './contexts';\nimport { getDataSourceLoadingNav, buildNavModel, getDataSourceNav } from './navModel';\nimport { getDataSource, getDataSourceMeta } from './selectors';\n\nexport const useInitDataSourceSettings = (uid: string) => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(initDataSourceSettings(uid));\n\n    return function cleanUp() {\n      dispatch(\n        cleanUpAction({\n          stateSelector: (state) => state.dataSourceSettings,\n        })\n      );\n    };\n  }, [uid, dispatch]);\n};\n\nexport const useTestDataSource = (uid: string) => {\n  const dispatch = useDispatch();\n\n  return () => dispatch(testDataSource(uid));\n};\n\nexport const useLoadDataSources = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(loadDataSources());\n  }, [dispatch]);\n};\n\nexport const useLoadDataSource = (uid: string) => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(loadDataSource(uid));\n  }, [dispatch, uid]);\n};\n\nexport const useLoadDataSourcePlugins = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(loadDataSourcePlugins());\n  }, [dispatch]);\n};\n\nexport const useAddDatasource = () => {\n  const dispatch = useDispatch();\n  const dataSourcesRoutes = useDataSourcesRoutes();\n\n  return (plugin: DataSourcePluginMeta) => {\n    dispatch(addDataSource(plugin, dataSourcesRoutes.Edit));\n  };\n};\n\nexport const useUpdateDatasource = () => {\n  const dispatch = useDispatch();\n\n  return (dataSource: DataSourceSettings) => dispatch(updateDataSource(dataSource));\n};\n\nexport const useDeleteLoadedDataSource = () => {\n  const dispatch = useDispatch();\n  const { name } = useSelector((state: StoreState) => state.dataSources.dataSource);\n\n  return () => {\n    appEvents.publish(\n      new ShowConfirmModalEvent({\n        title: 'Delete',\n        text: `Are you sure you want to delete the \"${name}\" data source?`,\n        yesText: 'Delete',\n        icon: 'trash-alt',\n        onConfirm: () => dispatch(deleteLoadedDataSource()),\n      })\n    );\n  };\n};\n\nexport const useDataSource = (uid: string) => {\n  return useSelector((state: StoreState) => getDataSource(state.dataSources, uid));\n};\n\nexport const useDataSourceExploreUrl = (uid: string) => {\n  const dataSource = useDataSource(uid);\n  const exploreState = JSON.stringify({ datasource: dataSource.name, context: 'explore' });\n  const exploreUrl = urlUtil.renderUrl('/explore', { left: exploreState });\n\n  return exploreUrl;\n};\n\nexport const useDataSourceMeta = (pluginType: string): DataSourcePluginMeta => {\n  return useSelector((state: StoreState) => getDataSourceMeta(state.dataSources, pluginType));\n};\n\nexport const useDataSourceSettings = () => {\n  return useSelector((state: StoreState) => state.dataSourceSettings);\n};\n\nexport const useDataSourceSettingsNav = (dataSourceId: string, pageId: string | null) => {\n  const dataSource = useDataSource(dataSourceId);\n  const { plugin, loadError, loading } = useDataSourceSettings();\n  const navIndex = useSelector((state: StoreState) => state.navIndex);\n  const navIndexId = pageId ? `datasource-page-${pageId}` : `datasource-settings-${dataSourceId}`;\n\n  if (loadError) {\n    const node = {\n      text: loadError,\n      subTitle: 'Data Source Error',\n      icon: 'exclamation-triangle',\n    };\n\n    return {\n      node: node,\n      main: node,\n    };\n  }\n\n  if (loading || !plugin) {\n    return getNavModel(navIndex, navIndexId, getDataSourceLoadingNav('settings'));\n  }\n\n  return getNavModel(navIndex, navIndexId, getDataSourceNav(buildNavModel(dataSource, plugin), pageId || 'settings'));\n};\n\nexport const useDataSourceRights = (uid: string): DataSourceRights => {\n  const dataSource = useDataSource(uid);\n  const readOnly = dataSource.readOnly === true;\n  const hasWriteRights = contextSrv.hasPermissionInMetadata(AccessControlAction.DataSourcesWrite, dataSource);\n  const hasDeleteRights = contextSrv.hasPermissionInMetadata(AccessControlAction.DataSourcesDelete, dataSource);\n\n  return {\n    readOnly,\n    hasWriteRights,\n    hasDeleteRights,\n  };\n};\n\nexport const useDataSourcesRoutes = () => {\n  return useContext(DataSourcesRoutesContext);\n};\n","import React, { FC } from 'react';\n\nimport { PluginState } from '@grafana/data';\nimport { Badge, BadgeProps } from '@grafana/ui';\n\ninterface Props {\n  state?: PluginState;\n}\n\nexport const PluginStateInfo: FC<Props> = (props) => {\n  const display = getFeatureStateInfo(props.state);\n\n  if (!display) {\n    return null;\n  }\n\n  return <Badge color={display.color} title={display.tooltip} text={display.text} icon={display.icon} />;\n};\n\nfunction getFeatureStateInfo(state?: PluginState): BadgeProps | null {\n  switch (state) {\n    case PluginState.deprecated:\n      return {\n        text: 'Deprecated',\n        color: 'red',\n        tooltip: `This feature is deprecated and will be removed in a future release`,\n      };\n    case PluginState.alpha:\n      return {\n        text: 'Alpha',\n        color: 'blue',\n        tooltip: `This feature is experimental and future updates might not be backward compatible`,\n      };\n    case PluginState.beta:\n      return {\n        text: 'Beta',\n        color: 'blue',\n        tooltip: `This feature is close to complete but not fully tested`,\n      };\n    default:\n      return null;\n  }\n}\n"],"names":["BasicSettings","dataSourceName","isDefault","onDefaultChange","onNameChange","className","InlineField","label","tooltip","grow","Input","id","type","value","placeholder","onChange","event","currentTarget","required","selectors","labelWidth","InlineSwitch","checked","ButtonRow","canSave","canDelete","onDelete","onSubmit","onTest","exploreUrl","canExploreDataSources","contextSrv","AccessControlAction","Button","variant","fill","onClick","history","back","LinkButton","href","disabled","CloudInfoBox","dataSource","mainDS","extraDS","readOnly","version","config","GrafanaEdition","LocalStorageValueProvider","storageKey","defaultValue","isDismissed","onDismiss","Alert","title","severity","bottomSpacing","onRemove","target","rel","DataSourceReadOnlyMessage","e2eSelectors","DataSourceLoadError","dataSourceRights","hasDeleteRights","DataSourceMissingRightsMessage","DataSourcePluginConfigPage","plugin","pageId","configPages","page","find","body","query","DataSourcePluginSettings","PureComponent","constructor","props","super","this","onModelChange","scopeProps","ctrl","datasourceMeta","dataSourceMeta","current","cloneDeep","onModelChanged","bind","componentDidMount","element","components","ConfigEditor","loader","getAngularLoader","template","component","load","componentDidUpdate","prevProps","digest","componentWillUnmount","destroy","render","ref","React","options","onOptionsChange","DataSourcePluginState","state","PluginStateInfo","DataSourceTestingStatus","testingStatus","isError","status","message","detailsMessage","details","detailsVerboseMessage","verboseMessage","style","whiteSpace","EditDataSource","uid","useInitDataSourceSettings","dispatch","useDispatch","useDataSource","useDataSourceMeta","dataSourceSettings","useDataSourceSettings","useDataSourceRights","useDataSourceExploreUrl","useDeleteLoadedDataSource","useTestDataSource","onUpdate","useUpdateDatasource","EditDataSourceView","setIsDefault","name","setDataSourceName","ds","dataSourceLoaded","loadError","loading","hasWriteRights","hasDataSource","async","e","preventDefault","PageLoader","DataSourcesRoutesContext","createContext","DATASOURCES_ROUTES","useEffect","initDataSourceSettings","cleanUpAction","stateSelector","testDataSource","useLoadDataSources","loadDataSources","useLoadDataSource","loadDataSource","useLoadDataSourcePlugins","loadDataSourcePlugins","useAddDatasource","dataSourcesRoutes","useDataSourcesRoutes","addDataSource","Edit","updateDataSource","useSelector","dataSources","appEvents","ShowConfirmModalEvent","text","yesText","icon","onConfirm","deleteLoadedDataSource","getDataSource","exploreState","JSON","stringify","datasource","context","urlUtil","left","pluginType","getDataSourceMeta","useDataSourceSettingsNav","dataSourceId","navIndex","navIndexId","node","subTitle","main","getNavModel","getDataSourceLoadingNav","getDataSourceNav","buildNavModel","useContext","display","PluginState","color","getFeatureStateInfo","Badge"],"sourceRoot":""}