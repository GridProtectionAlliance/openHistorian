{"version":3,"sources":["webpack:///./public/app/features/folders/state/actions.ts","webpack:///./public/app/features/folders/FolderPermissions.tsx","webpack:///./public/app/features/folders/state/navModel.ts"],"names":["getFolderByUid","uid","dispatch","backendSrv","folder","loadFolder","updateNavIndex","buildNavModel","saveFolder","put","title","version","res","appEvents","emit","AppEvents","alertSuccess","updateLocation","path","url","deleteFolder","delete","getFolderPermissions","get","permissions","loadFolderPermissions","toUpdateItem","item","userId","teamId","role","permission","updateFolderPermission","itemToUpdate","level","getStore","itemsToUpdate","inherited","updated","push","post","items","removeFolderPermission","itemToDelete","addFolderPermission","newItem","createNewFolder","folderName","getBackendSrv","newFolder","locationUtil","stripBaseFromUrl","FolderPermissions","props","onOpenAddPermissions","setState","isAdding","onRemoveItem","onPermissionChanged","onAddPermission","onCancelAddPermission","state","this","folderUid","navModel","id","Contents","isLoading","folderInfo","className","placement","content","name","onClick","disabled","in","onCancel","isFetching","PureComponent","mapDispatchToProps","hot","module","connect","location","routeParams","getNavModel","navIndex","getLoadingNav","icon","subTitle","text","breadcrumbs","children","active","tabIndex","main","canSave","canEdit","canAdmin","node"],"mappings":"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","file":"FolderPermissions.591ee81e63053ad31983.js","sourcesContent":["import { AppEvents, locationUtil } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport { FolderState, ThunkResult } from 'app/types';\nimport { DashboardAcl, DashboardAclUpdateDTO, NewDashboardAclItem, PermissionLevel } from 'app/types/acl';\nimport { updateLocation, updateNavIndex } from 'app/core/actions';\nimport { buildNavModel } from './navModel';\nimport appEvents from 'app/core/app_events';\nimport { loadFolder, loadFolderPermissions } from './reducers';\n\nexport function getFolderByUid(uid: string): ThunkResult<void> {\n  return async dispatch => {\n    const folder = await backendSrv.getFolderByUid(uid);\n    dispatch(loadFolder(folder));\n    dispatch(updateNavIndex(buildNavModel(folder)));\n  };\n}\n\nexport function saveFolder(folder: FolderState): ThunkResult<void> {\n  return async dispatch => {\n    const res = await backendSrv.put(`/api/folders/${folder.uid}`, {\n      title: folder.title,\n      version: folder.version,\n    });\n\n    // this should be redux action at some point\n    appEvents.emit(AppEvents.alertSuccess, ['Folder saved']);\n\n    dispatch(updateLocation({ path: `${res.url}/settings` }));\n  };\n}\n\nexport function deleteFolder(uid: string): ThunkResult<void> {\n  return async dispatch => {\n    await backendSrv.delete(`/api/folders/${uid}`);\n    dispatch(updateLocation({ path: `dashboards` }));\n  };\n}\n\nexport function getFolderPermissions(uid: string): ThunkResult<void> {\n  return async dispatch => {\n    const permissions = await backendSrv.get(`/api/folders/${uid}/permissions`);\n    dispatch(loadFolderPermissions(permissions));\n  };\n}\n\nfunction toUpdateItem(item: DashboardAcl): DashboardAclUpdateDTO {\n  return {\n    userId: item.userId,\n    teamId: item.teamId,\n    role: item.role,\n    permission: item.permission,\n  };\n}\n\nexport function updateFolderPermission(itemToUpdate: DashboardAcl, level: PermissionLevel): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const folder = getStore().folder;\n    const itemsToUpdate = [];\n\n    for (const item of folder.permissions) {\n      if (item.inherited) {\n        continue;\n      }\n\n      const updated = toUpdateItem(item);\n\n      // if this is the item we want to update, update it's permission\n      if (itemToUpdate === item) {\n        updated.permission = level;\n      }\n\n      itemsToUpdate.push(updated);\n    }\n\n    await backendSrv.post(`/api/folders/${folder.uid}/permissions`, { items: itemsToUpdate });\n    await dispatch(getFolderPermissions(folder.uid));\n  };\n}\n\nexport function removeFolderPermission(itemToDelete: DashboardAcl): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const folder = getStore().folder;\n    const itemsToUpdate = [];\n\n    for (const item of folder.permissions) {\n      if (item.inherited || item === itemToDelete) {\n        continue;\n      }\n      itemsToUpdate.push(toUpdateItem(item));\n    }\n\n    await backendSrv.post(`/api/folders/${folder.uid}/permissions`, { items: itemsToUpdate });\n    await dispatch(getFolderPermissions(folder.uid));\n  };\n}\n\nexport function addFolderPermission(newItem: NewDashboardAclItem): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const folder = getStore().folder;\n    const itemsToUpdate = [];\n\n    for (const item of folder.permissions) {\n      if (item.inherited) {\n        continue;\n      }\n      itemsToUpdate.push(toUpdateItem(item));\n    }\n\n    itemsToUpdate.push({\n      userId: newItem.userId,\n      teamId: newItem.teamId,\n      role: newItem.role,\n      permission: newItem.permission,\n    });\n\n    await backendSrv.post(`/api/folders/${folder.uid}/permissions`, { items: itemsToUpdate });\n    await dispatch(getFolderPermissions(folder.uid));\n  };\n}\n\nexport function createNewFolder(folderName: string): ThunkResult<void> {\n  return async dispatch => {\n    const newFolder = await getBackendSrv().post('/api/folders', { title: folderName });\n    appEvents.emit(AppEvents.alertSuccess, ['Folder Created', 'OK']);\n    dispatch(updateLocation({ path: locationUtil.stripBaseFromUrl(newFolder.url) }));\n  };\n}\n","import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport Page from 'app/core/components/Page/Page';\nimport { Tooltip, Icon } from '@grafana/ui';\nimport { NavModel } from '@grafana/data';\nimport { SlideDown } from 'app/core/components/Animations/SlideDown';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { StoreState, FolderState } from 'app/types';\nimport { DashboardAcl, PermissionLevel, NewDashboardAclItem } from 'app/types/acl';\nimport {\n  getFolderByUid,\n  getFolderPermissions,\n  updateFolderPermission,\n  removeFolderPermission,\n  addFolderPermission,\n} from './state/actions';\nimport { getLoadingNav } from './state/navModel';\nimport PermissionList from 'app/core/components/PermissionList/PermissionList';\nimport AddPermission from 'app/core/components/PermissionList/AddPermission';\nimport PermissionsInfo from 'app/core/components/PermissionList/PermissionsInfo';\n\nexport interface Props {\n  navModel: NavModel;\n  folderUid: string;\n  folder: FolderState;\n  getFolderByUid: typeof getFolderByUid;\n  getFolderPermissions: typeof getFolderPermissions;\n  updateFolderPermission: typeof updateFolderPermission;\n  removeFolderPermission: typeof removeFolderPermission;\n  addFolderPermission: typeof addFolderPermission;\n}\n\nexport interface State {\n  isAdding: boolean;\n}\n\nexport class FolderPermissions extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      isAdding: false,\n    };\n  }\n\n  componentDidMount() {\n    this.props.getFolderByUid(this.props.folderUid);\n    this.props.getFolderPermissions(this.props.folderUid);\n  }\n\n  onOpenAddPermissions = () => {\n    this.setState({ isAdding: true });\n  };\n\n  onRemoveItem = (item: DashboardAcl) => {\n    this.props.removeFolderPermission(item);\n  };\n\n  onPermissionChanged = (item: DashboardAcl, level: PermissionLevel) => {\n    this.props.updateFolderPermission(item, level);\n  };\n\n  onAddPermission = (newItem: NewDashboardAclItem) => {\n    return this.props.addFolderPermission(newItem);\n  };\n\n  onCancelAddPermission = () => {\n    this.setState({ isAdding: false });\n  };\n\n  render() {\n    const { navModel, folder } = this.props;\n    const { isAdding } = this.state;\n\n    if (folder.id === 0) {\n      return (\n        <Page navModel={navModel}>\n          <Page.Contents isLoading={true}>\n            <span />\n          </Page.Contents>\n        </Page>\n      );\n    }\n\n    const folderInfo = { title: folder.title, url: folder.url, id: folder.id };\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents>\n          <div className=\"page-action-bar\">\n            <h3 className=\"page-sub-heading\">Folder Permissions</h3>\n            <Tooltip placement=\"auto\" content={<PermissionsInfo />}>\n              <Icon className=\"icon--has-hover page-sub-heading-icon\" name=\"question-circle\" />\n            </Tooltip>\n            <div className=\"page-action-bar__spacer\" />\n            <button className=\"btn btn-primary pull-right\" onClick={this.onOpenAddPermissions} disabled={isAdding}>\n              Add Permission\n            </button>\n          </div>\n          <SlideDown in={isAdding}>\n            <AddPermission onAddPermission={this.onAddPermission} onCancel={this.onCancelAddPermission} />\n          </SlideDown>\n          <PermissionList\n            items={folder.permissions}\n            onRemoveItem={this.onRemoveItem}\n            onPermissionChanged={this.onPermissionChanged}\n            isFetching={false}\n            folderInfo={folderInfo}\n          />\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nconst mapStateToProps = (state: StoreState) => {\n  const uid = state.location.routeParams.uid;\n  return {\n    navModel: getNavModel(state.navIndex, `folder-permissions-${uid}`, getLoadingNav(1)),\n    folderUid: uid,\n    folder: state.folder,\n  };\n};\n\nconst mapDispatchToProps = {\n  getFolderByUid,\n  getFolderPermissions,\n  updateFolderPermission,\n  removeFolderPermission,\n  addFolderPermission,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(FolderPermissions));\n","import { FolderDTO } from 'app/types';\nimport { NavModelItem, NavModel } from '@grafana/data';\n\nexport function buildNavModel(folder: FolderDTO): NavModelItem {\n  return {\n    icon: 'folder',\n    id: 'manage-folder',\n    subTitle: 'Manage folder dashboards & permissions',\n    url: '',\n    text: folder.title,\n    breadcrumbs: [{ title: 'Dashboards', url: 'dashboards' }],\n    children: [\n      {\n        active: false,\n        icon: 'apps',\n        id: `folder-dashboards-${folder.uid}`,\n        text: 'Dashboards',\n        url: folder.url,\n      },\n      {\n        active: false,\n        icon: 'lock',\n        id: `folder-permissions-${folder.uid}`,\n        text: 'Permissions',\n        url: `${folder.url}/permissions`,\n      },\n      {\n        active: false,\n        icon: 'cog',\n        id: `folder-settings-${folder.uid}`,\n        text: 'Settings',\n        url: `${folder.url}/settings`,\n      },\n    ],\n  };\n}\n\nexport function getLoadingNav(tabIndex: number): NavModel {\n  const main = buildNavModel({\n    id: 1,\n    uid: 'loading',\n    title: 'Loading',\n    url: 'url',\n    canSave: false,\n    canEdit: false,\n    canAdmin: false,\n    version: 0,\n  });\n\n  main.children![tabIndex].active = true;\n\n  return {\n    main: main,\n    node: main.children![tabIndex],\n  };\n}\n"],"sourceRoot":""}