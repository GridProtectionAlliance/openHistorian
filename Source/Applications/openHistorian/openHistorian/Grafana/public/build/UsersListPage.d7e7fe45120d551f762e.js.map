{"version":3,"file":"UsersListPage.d7e7fe45120d551f762e.js","mappings":"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","sources":["webpack://grafana/./public/app/features/invites/InviteeRow.tsx","webpack://grafana/./public/app/features/invites/InviteesTable.tsx","webpack://grafana/./public/app/features/invites/state/selectors.ts","webpack://grafana/./public/app/features/users/state/actions.ts","webpack://grafana/./public/app/features/users/state/selectors.ts","webpack://grafana/./public/app/features/users/UsersActionBar.tsx","webpack://grafana/./public/app/features/users/UsersListPage.tsx","webpack://grafana/./public/app/features/users/UsersTable.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { Button, ClipboardButton } from '@grafana/ui';\nimport { Invitee } from 'app/types';\n\nimport { revokeInvite } from './state/actions';\n\nconst mapDispatchToProps = {\n  revokeInvite,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\ninterface OwnProps {\n  invitee: Invitee;\n}\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nclass InviteeRow extends PureComponent<Props> {\n  render() {\n    const { invitee, revokeInvite } = this.props;\n    return (\n      <tr>\n        <td>{invitee.email}</td>\n        <td>{invitee.name}</td>\n        <td className=\"text-right\">\n          <ClipboardButton icon=\"copy\" variant=\"secondary\" size=\"sm\" getText={() => invitee.url}>\n            Copy Invite\n          </ClipboardButton>\n          &nbsp;\n        </td>\n        <td>\n          <Button\n            variant=\"destructive\"\n            size=\"sm\"\n            icon=\"times\"\n            onClick={() => revokeInvite(invitee.code)}\n            aria-label=\"Revoke Invite\"\n          />\n        </td>\n      </tr>\n    );\n  }\n}\n\nexport default connector(InviteeRow);\n","import React, { PureComponent } from 'react';\n\nimport { Invitee } from 'app/types';\n\nimport InviteeRow from './InviteeRow';\n\nexport interface Props {\n  invitees: Invitee[];\n}\n\nexport default class InviteesTable extends PureComponent<Props> {\n  render() {\n    const { invitees } = this.props;\n\n    return (\n      <table className=\"filter-table form-inline\">\n        <thead>\n          <tr>\n            <th>Email</th>\n            <th>Name</th>\n            <th />\n            <th style={{ width: '34px' }} />\n          </tr>\n        </thead>\n        <tbody data-testid=\"InviteesTable-body\">\n          {invitees.map((invitee, index) => {\n            return <InviteeRow key={`${invitee.id}-${index}`} invitee={invitee} />;\n          })}\n        </tbody>\n      </table>\n    );\n  }\n}\n","import { createSelector } from '@reduxjs/toolkit';\n\nimport { selectors } from './reducers';\n\nexport const { selectAll, selectById, selectTotal } = selectors;\n\nconst selectQuery = (_: any, query: string) => query;\nexport const selectInvitesMatchingQuery = createSelector([selectAll, selectQuery], (invites, searchQuery) => {\n  const regex = new RegExp(searchQuery, 'i');\n  const matches = invites.filter((invite) => regex.test(invite.name) || regex.test(invite.email));\n  return matches;\n});\n","import { debounce } from 'lodash';\n\nimport { getBackendSrv } from '@grafana/runtime';\nimport { accessControlQueryParam } from 'app/core/utils/accessControl';\nimport { OrgUser } from 'app/types';\n\nimport { ThunkResult } from '../../../types';\n\nimport { usersLoaded, pageChanged, usersFetchBegin, usersFetchEnd, searchQueryChanged } from './reducers';\n\nexport function loadUsers(): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    try {\n      const { perPage, page, searchQuery } = getState().users;\n      const users = await getBackendSrv().get(\n        `/api/org/users/search`,\n        accessControlQueryParam({ perpage: perPage, page, query: searchQuery })\n      );\n      dispatch(usersLoaded(users));\n    } catch (error) {\n      usersFetchEnd();\n    }\n  };\n}\n\nconst fetchUsersWithDebounce = debounce((dispatch) => dispatch(loadUsers()), 300);\n\nexport function updateUser(user: OrgUser): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().patch(`/api/org/users/${user.userId}`, { role: user.role });\n    dispatch(loadUsers());\n  };\n}\n\nexport function removeUser(userId: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().delete(`/api/org/users/${userId}`);\n    dispatch(loadUsers());\n  };\n}\n\nexport function changePage(page: number): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(usersFetchBegin());\n    dispatch(pageChanged(page));\n    dispatch(loadUsers());\n  };\n}\n\nexport function changeSearchQuery(query: string): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(usersFetchBegin());\n    dispatch(searchQueryChanged(query));\n    fetchUsersWithDebounce(dispatch);\n  };\n}\n","import { UsersState } from 'app/types';\n\nexport const getUsers = (state: UsersState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  return state.users.filter((user) => {\n    return regex.test(user.login) || regex.test(user.email) || regex.test(user.name);\n  });\n};\n\nexport const getUsersSearchQuery = (state: UsersState) => state.searchQuery;\n","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { RadioButtonGroup, LinkButton, FilterInput } from '@grafana/ui';\nimport config from 'app/core/config';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction, StoreState } from 'app/types';\n\nimport { selectTotal } from '../invites/state/selectors';\n\nimport { changeSearchQuery } from './state/actions';\nimport { getUsersSearchQuery } from './state/selectors';\n\nexport interface OwnProps {\n  showInvites: boolean;\n  onShowInvites: () => void;\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    searchQuery: getUsersSearchQuery(state.users),\n    pendingInvitesCount: selectTotal(state.invites),\n    externalUserMngLinkName: state.users.externalUserMngLinkName,\n    externalUserMngLinkUrl: state.users.externalUserMngLinkUrl,\n    canInvite: state.users.canInvite,\n  };\n}\n\nconst mapDispatchToProps = {\n  changeSearchQuery,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = ConnectedProps<typeof connector> & OwnProps;\n\nexport const UsersActionBarUnconnected = ({\n  canInvite,\n  externalUserMngLinkName,\n  externalUserMngLinkUrl,\n  searchQuery,\n  pendingInvitesCount,\n  changeSearchQuery,\n  onShowInvites,\n  showInvites,\n}: Props): JSX.Element => {\n  const options = [\n    { label: 'Users', value: 'users' },\n    { label: `Pending Invites (${pendingInvitesCount})`, value: 'invites' },\n  ];\n  const canAddToOrg: boolean = contextSrv.hasAccess(AccessControlAction.OrgUsersAdd, canInvite);\n  // backend rejects invitations if the login form is disabled\n  const showInviteButton: boolean = canAddToOrg && !config.disableLoginForm;\n\n  return (\n    <div className=\"page-action-bar\" data-testid=\"users-action-bar\">\n      <div className=\"gf-form gf-form--grow\">\n        <FilterInput\n          value={searchQuery}\n          onChange={changeSearchQuery}\n          placeholder=\"Search user by login, email or name\"\n        />\n      </div>\n      {pendingInvitesCount > 0 && (\n        <div style={{ marginLeft: '1rem' }}>\n          <RadioButtonGroup value={showInvites ? 'invites' : 'users'} options={options} onChange={onShowInvites} />\n        </div>\n      )}\n      {showInviteButton && <LinkButton href=\"org/users/invite\">Invite</LinkButton>}\n      {externalUserMngLinkUrl && (\n        <LinkButton href={externalUserMngLinkUrl} target=\"_blank\" rel=\"noopener\">\n          {externalUserMngLinkName}\n        </LinkButton>\n      )}\n    </div>\n  );\n};\n\nexport const UsersActionBar = connector(UsersActionBarUnconnected);\n","import React, { useEffect, useState } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { renderMarkdown } from '@grafana/data';\nimport { HorizontalGroup, Pagination, VerticalGroup } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { contextSrv } from 'app/core/core';\nimport { OrgUser, OrgRole, StoreState } from 'app/types';\n\nimport InviteesTable from '../invites/InviteesTable';\nimport { fetchInvitees } from '../invites/state/actions';\nimport { selectInvitesMatchingQuery } from '../invites/state/selectors';\n\nimport { UsersActionBar } from './UsersActionBar';\nimport { UsersTable } from './UsersTable';\nimport { loadUsers, removeUser, updateUser, changePage } from './state/actions';\nimport { getUsers, getUsersSearchQuery } from './state/selectors';\n\nfunction mapStateToProps(state: StoreState) {\n  const searchQuery = getUsersSearchQuery(state.users);\n  return {\n    users: getUsers(state.users),\n    searchQuery: getUsersSearchQuery(state.users),\n    page: state.users.page,\n    totalPages: state.users.totalPages,\n    perPage: state.users.perPage,\n    invitees: selectInvitesMatchingQuery(state.invites, searchQuery),\n    externalUserMngInfo: state.users.externalUserMngInfo,\n    isLoading: state.users.isLoading,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadUsers,\n  fetchInvitees,\n  changePage,\n  updateUser,\n  removeUser,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = ConnectedProps<typeof connector>;\n\nexport interface State {\n  showInvites: boolean;\n}\n\nexport const UsersListPageUnconnected = ({\n  users,\n  page,\n  totalPages,\n  invitees,\n  externalUserMngInfo,\n  isLoading,\n  loadUsers,\n  fetchInvitees,\n  changePage,\n  updateUser,\n  removeUser,\n}: Props): JSX.Element => {\n  const [showInvites, setShowInvites] = useState(false);\n  const externalUserMngInfoHtml = externalUserMngInfo ? renderMarkdown(externalUserMngInfo) : '';\n\n  useEffect(() => {\n    loadUsers();\n    fetchInvitees();\n  }, [fetchInvitees, loadUsers]);\n\n  const onRoleChange = (role: OrgRole, user: OrgUser) => {\n    updateUser({ ...user, role: role });\n  };\n\n  const onShowInvites = () => {\n    setShowInvites(!showInvites);\n  };\n\n  const renderTable = () => {\n    if (showInvites) {\n      return <InviteesTable invitees={invitees} />;\n    } else {\n      return (\n        <VerticalGroup spacing=\"md\">\n          <UsersTable\n            users={users}\n            orgId={contextSrv.user.orgId}\n            onRoleChange={(role, user) => onRoleChange(role, user)}\n            onRemoveUser={(user) => removeUser(user.userId)}\n          />\n          <HorizontalGroup justify=\"flex-end\">\n            <Pagination\n              onNavigate={changePage}\n              currentPage={page}\n              numberOfPages={totalPages}\n              hideWhenSinglePage={true}\n            />\n          </HorizontalGroup>\n        </VerticalGroup>\n      );\n    }\n  };\n\n  return (\n    <Page.Contents isLoading={!isLoading}>\n      <UsersActionBar onShowInvites={onShowInvites} showInvites={showInvites} />\n      {externalUserMngInfoHtml && (\n        <div className=\"grafana-info-box\" dangerouslySetInnerHTML={{ __html: externalUserMngInfoHtml }} />\n      )}\n      {isLoading && renderTable()}\n    </Page.Contents>\n  );\n};\n\nexport const UsersListPageContent = connector(UsersListPageUnconnected);\n\nexport default function UsersListPage() {\n  return (\n    <Page navId=\"users\">\n      <UsersListPageContent />\n    </Page>\n  );\n}\n","import React, { useEffect, useState } from 'react';\n\nimport { OrgRole } from '@grafana/data';\nimport { Button, ConfirmModal } from '@grafana/ui';\nimport { UserRolePicker } from 'app/core/components/RolePicker/UserRolePicker';\nimport { fetchRoleOptions } from 'app/core/components/RolePicker/api';\nimport { TagBadge } from 'app/core/components/TagFilter/TagBadge';\nimport config from 'app/core/config';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction, OrgUser, Role } from 'app/types';\n\nimport { OrgRolePicker } from '../admin/OrgRolePicker';\n\nexport interface Props {\n  users: OrgUser[];\n  orgId?: number;\n  onRoleChange: (role: OrgRole, user: OrgUser) => void;\n  onRemoveUser: (user: OrgUser) => void;\n}\n\nexport const UsersTable = ({ users, orgId, onRoleChange, onRemoveUser }: Props) => {\n  const [userToRemove, setUserToRemove] = useState<OrgUser | null>(null);\n  const [roleOptions, setRoleOptions] = useState<Role[]>([]);\n\n  useEffect(() => {\n    async function fetchOptions() {\n      try {\n        if (contextSrv.hasPermission(AccessControlAction.ActionRolesList)) {\n          let options = await fetchRoleOptions(orgId);\n          setRoleOptions(options);\n        }\n      } catch (e) {\n        console.error('Error loading options');\n      }\n    }\n    if (contextSrv.licensedAccessControlEnabled()) {\n      fetchOptions();\n    }\n  }, [orgId]);\n\n  return (\n    <>\n      <table className=\"filter-table form-inline\">\n        <thead>\n          <tr>\n            <th />\n            <th>Login</th>\n            <th>Email</th>\n            <th>Name</th>\n            <th>Seen</th>\n            <th>Role</th>\n            <th style={{ width: '34px' }} />\n            <th>Origin</th>\n            <th></th>\n          </tr>\n        </thead>\n        <tbody>\n          {users.map((user, index) => {\n            let basicRoleDisabled = !contextSrv.hasPermissionInMetadata(AccessControlAction.OrgUsersWrite, user);\n            if (config.featureToggles.onlyExternalOrgRoleSync) {\n              const isUserSynced = user?.isExternallySynced;\n              basicRoleDisabled = isUserSynced || basicRoleDisabled;\n            }\n            return (\n              <tr key={`${user.userId}-${index}`}>\n                <td className=\"width-2 text-center\">\n                  <img className=\"filter-table__avatar\" src={user.avatarUrl} alt=\"User avatar\" />\n                </td>\n                <td className=\"max-width-6\">\n                  <span className=\"ellipsis\" title={user.login}>\n                    {user.login}\n                  </span>\n                </td>\n\n                <td className=\"max-width-5\">\n                  <span className=\"ellipsis\" title={user.email}>\n                    {user.email}\n                  </span>\n                </td>\n                <td className=\"max-width-5\">\n                  <span className=\"ellipsis\" title={user.name}>\n                    {user.name}\n                  </span>\n                </td>\n                <td className=\"width-1\">{user.lastSeenAtAge}</td>\n\n                <td className=\"width-8\">\n                  {contextSrv.licensedAccessControlEnabled() ? (\n                    <UserRolePicker\n                      userId={user.userId}\n                      orgId={orgId}\n                      roleOptions={roleOptions}\n                      basicRole={user.role}\n                      onBasicRoleChange={(newRole) => onRoleChange(newRole, user)}\n                      basicRoleDisabled={basicRoleDisabled}\n                    />\n                  ) : (\n                    <OrgRolePicker\n                      aria-label=\"Role\"\n                      value={user.role}\n                      disabled={basicRoleDisabled}\n                      onChange={(newRole) => onRoleChange(newRole, user)}\n                    />\n                  )}\n                </td>\n\n                <td className=\"width-1 text-center\">\n                  {user.isDisabled && <span className=\"label label-tag label-tag--gray\">Disabled</span>}\n                </td>\n\n                <td className=\"width-1\">\n                  {Array.isArray(user.authLabels) && user.authLabels.length > 0 && (\n                    <TagBadge label={user.authLabels[0]} removeIcon={false} count={0} />\n                  )}\n                </td>\n\n                {contextSrv.hasPermissionInMetadata(AccessControlAction.OrgUsersRemove, user) && (\n                  <td className=\"text-right\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"destructive\"\n                      onClick={() => {\n                        setUserToRemove(user);\n                      }}\n                      icon=\"times\"\n                      aria-label=\"Delete user\"\n                    />\n                  </td>\n                )}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n      {Boolean(userToRemove) && (\n        <ConfirmModal\n          body={`Are you sure you want to delete user ${userToRemove?.login}?`}\n          confirmText=\"Delete\"\n          title=\"Delete\"\n          onDismiss={() => {\n            setUserToRemove(null);\n          }}\n          isOpen={true}\n          onConfirm={() => {\n            if (!userToRemove) {\n              return;\n            }\n            onRemoveUser(userToRemove);\n            setUserToRemove(null);\n          }}\n        />\n      )}\n    </>\n  );\n};\n"],"names":["mapDispatchToProps","connector","InviteeRow","invitee","revokeInvite","ClipboardButton","Button","InviteesTable","invitees","index","selectAll","selectById","selectTotal","selectQuery","_","query","selectInvitesMatchingQuery","invites","searchQuery","regex","invite","loadUsers","dispatch","getState","perPage","page","users","accessControl","fetchUsersWithDebounce","updateUser","user","removeUser","userId","changePage","changeSearchQuery","getUsers","state","getUsersSearchQuery","mapStateToProps","UsersActionBar","canInvite","externalUserMngLinkName","externalUserMngLinkUrl","pendingInvitesCount","onShowInvites","showInvites","options","showInviteButton","config","FilterInput","RadioButtonGroup","UsersListPageUnconnected","totalPages","externalUserMngInfo","isLoading","fetchInvitees","setShowInvites","externalUserMngInfoHtml","onRoleChange","role","renderTable","UsersTable","Pagination","Page","UsersListPageContent","UsersListPage","orgId","onRemoveUser","userToRemove","setUserToRemove","roleOptions","setRoleOptions","fetchOptions","basicRoleDisabled","newRole"],"sourceRoot":""}