{"version":3,"file":"9137.d7fb8ff029fa51328905.js","mappings":";wLAcO,MAAMA,EAAoC,IAAqC,IAApC,MAAEC,EAAF,MAASC,EAAQ,GAAjB,SAAqBC,GAAe,EACpF,MAAOC,EAAOC,IAAYC,EAAAA,EAAAA,UAASJ,MAAAA,EAAAA,EAAS,IAEtCK,GAAoBC,EAAAA,EAAAA,UAASL,EAAU,KAO7C,OALAA,EAAYM,IACVJ,EAASI,EAAEC,OAAOR,OAClBK,EAAkBE,EAAEC,OAAOR,SAI3B,SAAC,EAAAS,YAAD,CAAaC,MAAM,WAAnB,UACE,SAAC,EAAAC,MAAD,CAAOC,GAAK,GAAEb,aAAkBc,MAAOC,EAAAA,GAAcd,MAAOE,EAAOD,SAAUA,6JCV5E,MAAMc,EAAwC,IAA2D,IAA1D,MAAEhB,EAAF,SAASE,EAAT,YAAmBe,EAAnB,oBAAgCC,GAA0B,EAC9G,OACE,SAAC,EAAAC,UAAD,WACE,SAAC,EAAAT,YAAD,CACEC,MAAM,eACNS,QAAU,GAAEpB,iBACZqB,SACE,8CACM,4CADN,+GAJJ,UAUE,UAAC,EAAAC,gBAAD,YACE,SAAC,EAAAC,OAAD,CACE,cAAc,GAAEvB,wBAChBC,MAAuB,aAAhBgB,EACPf,SAAWM,GAAMN,EAASM,EAAEgB,cAAcC,QAAU,GAAK,eAE3D,SAAC,KAAD,CACEC,QAAU,GAAE1B,iBACZ2B,wBAAyBT,EAAoBU,QAC7CC,QAASZ,EACTf,SAAUA,EACV4B,YAAaf,EAAAA,GACbgB,SAA0B,aAAhBd,EACVe,gBAAiBC,EAAAA,4BC3BtB,MAAMC,EAA+B,IAA2D,IAA1D,QAAER,EAAF,MAAWS,EAAX,wBAAkBR,EAAlB,SAA2CzB,GAAe,EACrG,MAAM,UAAEkC,EAAF,WAAaC,EAAYC,iBAAkBC,EAA3C,aAAgDC,GAAiBL,GACjE,iBAAEG,EAAF,aAAoBG,IAAiBC,EAAAA,EAAAA,UACzC,KAAMC,EAAAA,EAAAA,IAAuBP,EAAWC,EAAYE,EAAKC,IACzD,CAACJ,EAAWC,EAAYE,EAAKC,IAG/B,OACE,SAAC,EAAAI,OAAD,CACE1C,SAAU,QAAC,MAAED,GAAH,SAAeC,EAAS,OAAD,UAAMiC,EAAN,CAAaG,iBAAkBrC,MAChEA,MAAO,IAAIwC,KAAiBd,GAAyBkB,MAAMC,GAAMA,EAAE7C,QAAUqC,IAC7EV,QAAS,CACP,CACEjB,MAAO,qBACPiB,QAASD,GAEX,CACEhB,MAAO,oBACPoC,UAAU,EACVnB,QAASa,IAGbO,YAAY,mBACZtB,QAASA,oBChBR,MAAMuB,EAAuB,IAO9B,IAP+B,MACnCjD,EADmC,wBAEnC2B,EAFmC,SAGnCzB,EAHmC,MAInCiC,EAJmC,eAKnCe,EALmC,WAMnCC,GACI,EACJ,MAAMC,GAAiBV,EAAAA,EAAAA,UAAQ,KAAMW,EAAAA,EAAAA,IAAqBH,EAAgBC,IAAa,CAACD,EAAgBC,IACxG,OACE,UAAC,EAAAG,iBAAD,YACE,SAAC,EAAA5C,YAAD,CACEC,MAAM,qBACNU,QAAQ,iMAFV,UAIE,SAACa,EAAD,CACER,QAAU,GAAE1B,uBACZ2B,wBAAyBA,EACzBQ,MAAOA,EACPjC,SAAUA,OAGd,SAAC,EAAAQ,YAAD,CAAaC,MAAM,mBAAmBU,QAAS+B,EAA/C,UACE,SAACG,EAAA,EAAD,CACE7B,QAAU,GAAE1B,qBACZ2B,wBAAyBA,EACzBE,QAASM,EAAMqB,gBACftD,SAAWuD,GAAWvD,EAAS,OAAD,UAAMiC,EAAN,CAAaqB,gBAAiBC,KAC5DzB,gBAAiB0B,EAAAA,WChCdC,EAA0BC,IACrC,MAAMC,EAAaC,EAA8BF,GAC3CG,EAAWC,EAAuBH,EAAYD,GAEpD,OACE,SAAC,EAAAlD,YAAD,CAAaC,MAAM,oBAAoB,cAAY,+BAAnD,UACE,SAAC,EAAAiC,OAAD,CACE9B,MAAM,OACNZ,SAAU,QAAC,MAAED,GAAH,SAAe2D,EAAM1D,SAASD,IACxCA,MAAO8D,EACPnC,QAAS,CACP,CACEjB,MAAO,qBACPiB,QAASgC,EAAMjC,yBAEjB,CACEhB,MAAO,eACPoC,UAAU,EACVnB,QAASiC,IAGbb,YAAY,iBACZtB,QAAU,GAAEkC,EAAM5D,+BAMpB8D,EAAgC,IAAiE,IAAhE,iBAAEG,GAA8D,EACrG,MAAM7B,EAAY6B,MAAAA,OAAH,EAAGA,EAAkB7B,UAC9BC,EAAa4B,MAAAA,OAAH,EAAGA,EAAkB5B,WAErC,OAAOK,EAAAA,EAAAA,UAAQ,IACRN,GAAcC,GAIZ6B,EAAAA,EAAAA,IAA8B9B,EAAyBC,GAA0B8B,KAAKC,GAAD,iBACvFA,EADuF,CAE1FzD,MAAOyD,EAAEC,SALF,IAOR,CAACjC,EAAWC,KAGX2B,EAAyB,CAACH,EAA4CD,KACnElB,EAAAA,EAAAA,UAAQ,IACM,IAAImB,KAAeD,EAAMjC,yBAC1BkB,MAAMC,GAAMA,EAAE7C,QAAU2D,EAAMU,sBAC/C,CAACT,EAAYD,EAAMU,mBAAoBV,EAAMjC,0BC7CrC4C,EAAoC,IAO3C,YAP4C,MAChDvE,EACAwE,OAAQC,EAAW,GAF6B,MAGhDtC,EAHgD,SAIhDjC,EAJgD,oBAKhDgB,EALgD,iBAMhD+C,GACI,EACJ,MAAMrC,GAAUc,EAAAA,EAAAA,UACd,IAAM,CAACxB,MAAwBwD,EAAAA,EAAAA,IAAuB,IAAID,KAAaE,EAAAA,OACvE,CAACF,EAAUvD,IAGb,OACE,UAAC,EAAAoC,iBAAD,YACE,SAAC,EAAA5C,YAAD,CACEC,MAAM,WACNU,QAAQ,oTAFV,UAIE,SAAC,EAAAuD,YAAD,CACElD,QAAU,GAAE1B,aACZc,MAAM,OACNkC,YAAY,eACZpB,QAASA,EACT3B,MAAK,UAAEkC,EAAMsC,gBAAR,QAAoB,GACzBvE,SAAW0B,IACT1B,EAAS,OAAD,UAAMiC,EAAN,CAAasC,SAAU7C,EAAQuC,KAAKU,GAAMA,EAAE5E,iBAI1D,SAAC0D,EAAD,CACEM,iBAAkBA,EAClBtC,wBAAyBT,EAAoBU,QAC7C0C,mBAAoBnC,EAAMmC,mBAC1BG,SAAQ,UAAEtC,EAAMsC,gBAAR,QAAoB,GAC5BvE,SAAWoE,GAAuBpE,EAAS,OAAD,UAAMiC,EAAN,CAAamC,mBAAAA,KACvDtE,MAAOA,uBCnCf,MAAM8E,EAAmB,IACnBC,EAAoB,MAKpBC,EAAY,CAAC,IAAK,KAAM,KAAM,OAAOb,IAAIc,EAAAA,UAElCC,EAAwC,IAK/C,IALgD,OACpDV,EAAS,GACTW,QAASC,EACTlF,SAAUmF,EAH0C,oBAIpDnE,GACI,EACJ,MAAMiE,GAAoBzC,EAAAA,EAAAA,UAAQ,KAAM4C,EAAAA,EAAAA,IAAqBF,IAAc,CAACA,IACtExD,GAAUc,EAAAA,EAAAA,UACd,IAAM,CAACxB,MAAwBwD,EAAAA,EAAAA,IAAuBa,OAAOC,KAAKhB,MAClE,CAACA,EAAQtD,IAGLuE,EAAa,IAA+C,IAA9C,IAAEC,EAAM,GAAR,MAAYzF,EAAQ,IAA0B,EAE7C2B,EAAQ+D,MAAMC,GAC3BA,EAAGhE,QACEA,EAAQ+D,MAAME,GAAQA,EAAIlF,QAAU+E,IAEtCE,EAAGjF,QAAU+E,KAGpB9D,EAAQkE,KAAK,CAAEnF,MAAO+E,EAAKzF,MAAOyF,IAGpC,MAAMK,EAAevB,EAAOwB,eAAeN,GACvC,CAACxE,KAAwBsD,EAAOkB,GAAKvB,IAAIc,EAAAA,WACzC,CAAC/D,GAML,OALqB6E,EAAaJ,MAAMC,GAAOA,EAAGjF,QAAUV,KAE1D8F,EAAaD,KAAK,CAAEnF,MAAOV,EAAOA,MAAAA,IAG7B,CAAE2B,QAAAA,EAASmE,aAAAA,IA8CpB,OACE,SAAC,EAAA5E,UAAD,WACE,SAAC,EAAAT,YAAD,CACEC,MAAM,SACNU,QAAQ,iMAFV,UAIE,SAAC,EAAA4E,WAAD,CAAYC,MAAOf,EAASgB,WAvCf,CAACC,EAAuBC,EAAsCC,KAC/E,MAAM,IAAEZ,EAAM,GAAR,SAAYa,EAAWzB,EAAvB,MAAyC7E,EAAQ,GAAjD,UAAqDuG,EAAYzB,GAAsBqB,GACvF,QAAExE,EAAF,aAAWmE,GAAiBN,EAAWW,GAE7C,OACE,UAAC,EAAA9E,gBAAD,CAAiBmF,QAAQ,KAAK3F,MAAM,OAApC,WACE,SAAC,EAAA8B,OAAD,CACE,aAAW,mBACX8D,kBAAoBC,GAAO,kBAAiBA,IAC5CC,kBAAgB,EAChB3G,MAAOyF,EACP9D,QAASA,EACT1B,SAAU,QAAGD,MAAOyF,EAAM,IAAhB,SAAyBW,EAAa,CAAEX,IAAAA,EAAKa,SAAAA,EAAUtG,MAAAA,EAAOuG,UAAAA,QAE1E,SAAC,EAAA5D,OAAD,CACE3C,MAAOsG,EACP3E,QAASoD,EACT9E,SAAU,QAAGD,MAAOsG,EAAWzB,GAArB,SAA4CuB,EAAa,CAAEX,IAAAA,EAAKa,SAAAA,EAAUtG,MAAAA,EAAOuG,UAAAA,QAE7F,SAAC,EAAA5D,OAAD,CACE,aAAW,qBACXI,YAAY,mBACZ0D,kBAAoBC,GAAO,oBAAmBA,IAC9CC,kBAAgB,EAChB3G,MAAOA,EACP2B,QAASmE,EACT7F,SAAU,QAAC,MAAED,EAAQ,IAAX,SAAoBoG,EAAa,CAAEX,IAAAA,EAAKa,SAAAA,EAAUtG,MAAAA,EAAOuG,UAAAA,QAErE,SAAC,EAAAK,gBAAD,CAAiB,aAAW,SAASC,KAAK,QAAQC,QAAQ,YAAYC,QAASV,EAAcW,KAAK,eAW9C/G,SAjDxCgG,IAChB,MAAMf,EAAUe,EAAM/B,KAAI,QAAC,IAAEuB,EAAF,SAAOa,EAAP,MAAiBtG,EAAjB,UAAwBuG,GAAzB,QAA0C,CAClEd,IAAKA,GAAO,GACZa,SAAUA,GAAYzB,EACtB7E,MAAOA,GAAS,GAChBuG,UAAWA,GAAazB,MAE1BM,EA/C0BF,CAAAA,GAC5BA,EAAQ+B,SAAQ,QAAC,IAAExB,EAAF,SAAOa,EAAP,MAAiBtG,EAAjB,UAAwBuG,GAAzB,QAAyC,CAACd,EAAKa,EAAUtG,EAAOuG,MAAYW,MAAM,GAAI,GA8C1FC,CAAqBjC,iDC/C5B,SAASkC,EAAQzD,GACtB,MAAO0D,EAAmBC,IAAwBlH,EAAAA,EAAAA,UAA6B,KACxE4D,EAAkBuD,IAAuBnH,EAAAA,EAAAA,aACzCoH,EAASC,IAAcrH,EAAAA,EAAAA,UAAyC,KAChEsH,EAAUC,IAAevH,EAAAA,EAAAA,UAAyC,KAClEwH,EAASC,IAAczH,EAAAA,EAAAA,UAAiB,IAEzC0H,GAAQC,EAAAA,EAAAA,aACRC,GAAeC,EAAAA,EAAAA,iBAAgBH,GAE/BI,GAAcC,EAAAA,EAAAA,YAAWC,IAEzB,gBACJC,EADI,MAEJnG,EAFI,MAGJnC,EAHI,WAIJuI,EAJI,wBAKJ5G,EALI,YAMJ6G,EANI,WAOJrF,EAPI,SAQJjD,EARI,SASJuI,GACE7E,GACE,YAAE8E,GAAgBvF,EAElBwF,GAA8BC,EAAAA,EAAAA,cAClC,CAACtB,EAAuCiB,IAC/BjB,EAAkBzE,MAAMgG,GAAOA,EAAG5B,OAASyB,EAAYI,QAAQP,MAExE,CAACG,KAGHK,EAAAA,EAAAA,YAAU,KAyBsBC,WAC5B,GAAIR,EAAa,CACf,MAAMlB,QAA0BnE,EAAW8F,eAAeT,GACpDb,EAAWuB,EAAgB5B,GAC3BG,EA5BcH,CAAAA,IACtB,MAAM6B,EAA2BR,EAA4BrB,EAAmBiB,GAChF,OAAKY,EAIoB7B,EACtB8B,QAAQC,GAAMA,EAAExB,UAAYsB,EAAyBtB,UACrD1D,KAAKkF,IAAD,CACHxB,QAASwB,EAAExB,QACX5H,MAAOoJ,EAAEpC,KACTtG,MAAO0I,EAAEC,YACTC,UAAW,WACT,OACE,4BACE,gBAAKC,UAAWrB,EAAhB,SAA8BkB,EAAEpC,QAChC,gBAAKuC,UAAWvB,EAAawB,kBAA7B,SAAiDJ,EAAEK,sBAbpD,IAyBSC,CAAerC,GACzBO,EAAUJ,EAAQmC,OAAS,EAAInC,EAAQ,GAAGI,QAAU,GACpD5D,EAAmB0E,EAA4BrB,EAAmBiB,GACxEhB,EAAqBD,GACrBM,EAAYD,GACZD,EAAWD,GACXK,EAAWD,GACXL,EAAoBvD,KAGxB4F,KACC,CAAC1G,EAAYwF,EAA6BJ,EAAYC,EAAaL,EAAaF,EAAawB,oBAEhG,MAoBMK,EAAqB,IAAwC,IAAvC,MAAE7J,GAAqC,EACjE,MAAMgE,EAAmB0E,EAA4BrB,EAAmBrH,GACxEuH,EAAoBvD,GACpB/D,EAAS,OAAD,UAAM+D,EAAN,CAAwBgD,KAAMhH,MAGlCiJ,EAAmB5B,IACvB,MAAMK,EAAWL,EAAkBnD,KAAKkF,IAAD,CACrCpJ,MAAOoJ,EAAExB,QACTlH,OAAOoJ,EAAAA,EAAAA,WAAUV,EAAEW,sBAGrB,OAAOrC,EAASiC,OAAS,GAAIK,EAAAA,EAAAA,QAAOtC,GAAW7E,GAAMA,EAAE7C,QAAS,IAGlE,OACE,iCACE,SAAC,EAAAkB,UAAD,WACE,UAAC,EAAAmC,iBAAD,YACE,SAAC4G,EAAA,EAAD,CACElK,MAAOA,EACP2B,wBAAyBA,EACzB6G,YAAaA,EACbrF,WAAYA,EACZjD,SAAWsI,IACTF,EAAgB,OAAD,UAAMnG,EAAN,CAAaqG,YAAAA,SAIhC,SAAC,EAAA9H,YAAD,CAAaC,MAAM,UAAUG,MAAM,OAAnC,UACE,SAAC,EAAA8B,OAAD,CACE9B,MAAM,OACNZ,SApDY,IAA6B,IAA1BD,MAAO4H,GAAmB,EACnD,MAAMJ,EAAUH,EACb8B,QAAQC,GAAwBA,EAAExB,UAAYa,EAAYI,QAAQjB,KAClE1D,KAAKkF,IAAD,CACHxB,QAASwB,EAAExB,QACX5H,MAAOoJ,EAAEpC,KACTtG,MAAO0I,EAAEC,YACTI,YAAaL,EAAEK,gBAGfjC,EAAQmC,OAAS,IAAMnC,EAAQ9B,MAAM0D,GAAMA,EAAEpJ,QAAUyI,EAAYI,QAAQP,MAC7EuB,EAAmBrC,EAAQ,IAC3BK,EAAWD,GACXH,EAAWD,KAEXK,EAAWD,GACXH,EAAWD,KAqCHxH,MAAO,IAAI0H,KAAahG,GAAyBkB,MAAMC,GAAMA,EAAE7C,QAAU4H,IACzEjG,QAAS,CACP,CACEjB,MAAO,qBACPiB,QAASD,MAERgG,GAEL3E,YAAY,kBACZtB,QAAU,GAAEkC,EAAM5D,qBAGtB,SAAC,EAAAU,YAAD,CAAaC,MAAM,cAAcG,MAAM,OAAvC,UACE,SAAC,EAAA8B,OAAD,CACE9B,MAAM,OACNZ,SAAU4J,EACV7J,MAAO,IAAIwH,KAAY9F,GAAyBkB,MAAMC,GAAMA,EAAE7C,QAAUsI,IACxE3G,QAAS,CACP,CACEjB,MAAO,qBACPiB,QAASD,MAER8F,GAELzE,YAAY,gBACZtB,QAAU,GAAEkC,EAAM5D,+BAMzByI,EAASxE,MAKhB,MAAMoE,EAAaN,GAAyBoC,EAAAA,GAAI;;;;WAIrCpC,EAAMqC,OAAO/F,KAAKgG;ECvLvBC,EAAc,CAAE3J,MAAO,OAAQV,MAAOsK,EAAAA,GAAAA,MAQ/BC,EAAyC,IAA2C,UAA1C,MAAErI,EAAF,iBAAS8B,EAAT,SAA2B/D,GAAe,EAC/F,MAAM0B,EAAU6I,EAAWxG,GAC3B,OACE,SAAC,EAAAvD,YAAD,CACEC,MAAM,iBACNU,QAAQ,oWAFV,UAIE,SAAC,EAAAqJ,iBAAD,CACExK,SAAWD,IACT,MAAM,UAAEmC,EAAF,WAAaC,EAAYC,iBAAkBC,GAAQJ,GACnD,iBAAEG,IAAqBK,EAAAA,EAAAA,IAAuBP,EAAWC,EAAYE,EAAKtC,GAChFC,EAAS,OAAD,UAAMiC,EAAN,CAAaK,aAAcvC,EAAOqC,iBAAAA,MAE5CrC,MAAK,UAAEkC,EAAMK,oBAAR,QAAwB+H,EAAAA,GAAAA,KAC7B3I,QAASA,OAMX6I,EAAcxG,IAClB,MAAM5B,EAAa4B,MAAAA,OAAH,EAAGA,EAAkB5B,WAC/BD,EAAY6B,MAAAA,OAAH,EAAGA,EAAkB7B,UAEpC,OAAOM,EAAAA,EAAAA,UAAQ,KACb,IAAKL,GAAcA,IAAesI,EAAAA,GAAAA,OAAoBvI,IAAcwI,EAAAA,GAAAA,aAClE,MAAO,CAACN,GAGV,MAAM1I,EAAU,CACd0I,EACA,CACE3J,MAAO,OACPV,MAAOsK,EAAAA,GAAAA,KACPb,YAAa,oEAIjB,OAAOrH,IAAesI,EAAAA,GAAAA,WAClB,IACK/I,EACH,CACEjB,MAAO,QACPV,MAAOsK,EAAAA,GAAAA,MACPb,YAAa,wEAGjB9H,IACH,CAACS,EAAYD,KCvClB,SAASyI,EAAT,GASmC,IATnB,MACd7K,EADc,MAEdmC,EAFc,OAGdqC,EAHc,WAIdrB,EAJc,SAKdjD,EALc,mBAMd4J,EANc,eAOd5G,EAPc,oBAQdhC,GACiC,EACjC,OACE,SAACmG,EAAD,CACErH,MAAOA,EACPwI,YAAarG,EAAMqG,YACnBD,WAAYpG,EAAMoG,WAClB5G,wBAAyBT,EAAoBU,QAC7CuB,WAAYA,EACZjD,SAAU4J,EACVxB,gBAAiBpI,EACjBiC,MAAOA,EART,SAUI2I,IACA,iCACE,SAAC5F,EAAD,CACEV,OAAQA,EACRW,QAAShD,EAAMgD,QACfjF,SAAWiF,GAAsBjF,EAAS,OAAD,UAAMiC,EAAN,CAAagD,QAAAA,KACtDjE,oBAAqBA,KAEvB,UAAC,EAAAC,UAAD,YACE,SAACqJ,EAAD,CAAcvG,iBAAkB6G,EAAQ3I,MAAOA,EAAOjC,SAAUA,KAChE,SAACqE,EAAD,CACEvE,MAAOA,EACPwE,OAAQe,OAAOC,KAAKhB,GACpBrC,MAAOA,EACPjC,SAAUA,EACVgB,oBAAqBA,EACrB+C,iBAAkB6G,KAEpB,SAAC7H,EAAD,CACEjD,MAAOA,EACPmD,WAAYA,EACZxB,wBAAyBT,EAAoBU,QAC7CO,MAAOA,EACPe,eAAgBA,EAChBhD,SAAUA,KAEZ,SAACH,EAAA,EAAD,CACEC,MAAOA,EACPC,MAAOkC,EAAM4I,QACb7K,SAAW6K,IACT7K,EAAS,OAAD,UAAMiC,EAAN,CAAa4I,QAAAA,gBAU9B,MAAMC,EAA0BC,EAAAA,KAAWJ,GCjDrCK,EAAsB,CACjC1G,OAAQ,IAmBV,SAASqG,EAAT,GAQmC,IARnB,MACd7K,EADc,MAEdmC,EAFc,WAGdgB,EACAjD,SAAUiL,EAJI,WAKdC,EALc,eAMdlI,EANc,oBAOdhC,GACiC,EACjC,MAAOmK,EAAOC,IAAYjL,EAAAA,EAAAA,UAAgB6K,IACpC,YAAE1C,EAAF,WAAeD,EAAf,SAA2B9D,EAA3B,WAAqC8G,EAArC,mBAAiDjH,GAAuBnC,GAE9E4G,EAAAA,EAAAA,YAAU,KACJP,GAAeD,GACjBpF,EACGqI,UAAUjD,EAAYvI,EAAOwI,GAC7BiD,MAAMjH,GAAW8G,GAAUI,GAAD,iBAAqBA,EAArB,CAAgClH,OAAAA,UAE9D,CAACrB,EAAYsB,EAAU8D,EAAYC,EAAaxI,EAAOsE,IAE1D,MAAMpE,GAAW0I,EAAAA,EAAAA,cACd+C,IACCR,EAAc,OAAD,UAAMhJ,EAAUwJ,IAC7BP,MAEF,CAACD,EAAeC,EAAYjJ,IAGxB2H,GAAqBlB,EAAAA,EAAAA,cACzB,IAAuD,IAAtD,UAAExG,EAAF,WAAaC,EAAb,KAAyB4E,GAA6B,EACrD,MAAMzE,EACJH,IAAesI,EAAAA,GAAAA,OAAoBvI,IAAcwI,EAAAA,GAAAA,aAC7CL,EAAAA,GAAAA,KACAA,EAAAA,GAAAA,MACA,iBAAEjI,IAAqBK,EAAAA,EAAAA,IAAuBP,EAAWC,EAAYgJ,EAAM/I,iBAAkBE,GACnGtC,EAAS,OAAD,UACHiC,EADG,CAENG,iBAAAA,EACAiG,WAAYtB,EACZ7E,UAAAA,EACAC,WAAAA,EACAG,aAAAA,OAGJ,CAACtC,EAAUiC,EAAOkJ,IAGpB,OACE,UAAC,EAAAO,WAAD,WACGL,IAAeM,EAAAA,GAAAA,SACd,SAACb,EAAD,CACEhL,MAAOA,EACPwE,OAAQ6G,EAAM7G,OACdtD,oBAAqBA,EACrBgC,eAAgBA,EAChB4G,mBAAoBA,EACpB5J,SAAUA,EACViD,WAAYA,EACZhB,MAAOA,IAIVoJ,IAAeM,EAAAA,GAAAA,MACd,iCACE,SAACC,EAAA,EAAD,CACE5L,SAAW6L,GAAcZ,EAAc,OAAD,UAAMhJ,EAAN,CAAaA,MAAO4J,KAC1DX,WAAYA,EACZjJ,MAAOA,EAAMA,SAEf,SAACnB,EAAD,CACEd,SAAWe,GAAwBkK,EAAc,OAAD,UAAMhJ,EAAN,CAAalB,YAAAA,KAC7DA,YAAakB,EAAMlB,YACnBjB,MAAOA,EACPkB,oBAAqBA,UAQ1B,MAAM8K,EAAoBf,EAAAA,KAAWJ,sFCzHrC,SAAStH,EAAT,GAOG,IAPmB,QAC3B7B,EAD2B,wBAE3BC,EAF2B,SAG3BzB,EAH2B,QAI3B2B,EAJ2B,SAK3BE,EAL2B,gBAM3BC,GACQ,EACR,MAAMJ,GAAUc,EAAAA,EAAAA,UACd,IACEV,EAAgBmC,KAAK8H,GAAD,iBACfA,EADe,CAElBtL,MAAOsL,EAAG5H,UAEd,CAACrC,IAEGkK,GAAiBxJ,EAAAA,EAAAA,UAAQ,IAAMd,EAAQwH,QAAQ6C,IAAQA,EAAGE,UAAS,CAACvK,IAE1E,OACE,SAAC,EAAAgB,OAAD,CACE9B,MAAM,OACNZ,SAAU,QAAC,MAAED,GAAH,SAAeC,EAASD,IAClCA,MAAO,IAAI2B,KAAYD,GAAyBkB,MAAMC,GAAMA,EAAE7C,QAAU4B,IACxED,QAAS,CACP,CACEjB,MAAO,qBACPiB,QAASD,GAEX,CACEhB,MAAO,eACPoC,UAAU,EACVnB,QAASsK,IAGblJ,YAAY,gBACZtB,QAASA,EACTK,SAAUA,EACV6E,kBAAgB,kGCvCf,SAASsD,EAAT,GAA+F,IAA9E,MAAElK,EAAF,YAASwI,EAAT,WAAsBrF,EAAtB,SAAkCjD,EAAlC,wBAA4CyB,GAAkC,EACpG,MAAOyK,EAAUC,IAAehM,EAAAA,EAAAA,UAAyC,KACzE0I,EAAAA,EAAAA,YAAU,KACR5F,EAAWmJ,cAAcb,MAAMW,GAAaC,EAAYD,OACvD,CAACjJ,IAEJ,MAAMoJ,GAAgC7J,EAAAA,EAAAA,UACpC,IAAM,CACJ0J,EACA,CACEzL,MAAO,qBACPiB,QAASD,MAERyK,IAEL,CAACA,EAAUzK,IAGb,OACE,SAAC,EAAAjB,YAAD,CAAaC,MAAM,UAAnB,UACE,SAAC,EAAAiC,OAAD,CACE9B,MAAM,OACN8F,kBAAgB,EAChBF,kBAAoBC,GAAO,gBAAeA,IAC1CzG,SAAU,QAAC,MAAED,GAAH,SAAeC,EAASD,IAClC2B,QAAS2K,EACTtM,MAAO,CAAEA,MAAOuI,EAAa7H,MAAO6H,GACpCxF,YAAY,iBACZtB,QAAU,GAAE1B,kGClCb,SAAS8L,EAAT,GAAyF,IAAjE,MAAE3J,EAAF,SAASjC,EAAT,WAAmBkL,GAA8C,EAQ9F,OACE,+BACE,SAAC,EAAAoB,SAAD,CACEC,KAAK,QACLjD,UAAU,oBACVvJ,MAAOkC,EACPuK,KAAM,GACN1J,YAAY,4DACZ2J,OAAQvB,EACRlL,SAAWM,GAAMN,EAASM,EAAEgB,cAAcvB,OAC1C2M,UAjBaC,IACC,UAAdA,EAAMnH,MAAoBmH,EAAMC,UAAYD,EAAME,WACpDF,EAAMG,iBACN5B,qJCEC,MAAMpK,EAAwC,IAA2D,IAA1D,MAAEhB,EAAF,SAASE,EAAT,YAAmBe,EAAnB,oBAAgCC,GAA0B,EAC9G,OACE,+BACE,UAAC,KAAD,CACEP,MAAM,eACNS,QAAU,GAAEpB,iBACZqB,SACE,8CACM,4CADN,+GAJJ,WAUE,SAAC,EAAAE,OAAD,CACE,cAAc,GAAEvB,wBAChBC,MAAuB,aAAhBgB,EACPf,SAAWM,GAAMN,EAASM,EAAEgB,cAAcC,QAAU,GAAK,eAE3D,SAAC,KAAD,CACEC,QAAU,GAAE1B,iBACZ2B,wBAAyBT,EAAoBU,QAC7CC,QAASZ,EACTf,SAAUA,EACV4B,YAAaf,EAAAA,GACbgB,SAA0B,aAAhBd,EACVe,gBAAiBC,EAAAA,0BCHpB,MAAMiJ,EAAsB,CACjC1G,OAAQ,IAGGyI,EAAwEC,IAAD,CAClF3B,WAAYM,EAAAA,GAAAA,OACZrD,YAAa0E,EAAWC,oBACxB5E,WAAY,GACZlG,WAAYsI,EAAAA,GAAAA,MACZvI,UAAW,GACXkC,mBAAoB,cACpBd,gBAAiB,wBACjBlB,iBAAkB8K,EAAAA,GAAAA,WAClB3I,SAAU,GACVU,QAAS,GACT4F,QAAS,GACT5I,MAAO,GACPK,aAAc+H,EAAAA,GAAAA,OAGhB,SAASM,EAAT,GAQmC,IARnB,MACd7K,EADc,MAEdmC,EAFc,WAGdgB,EACAjD,SAAUiL,EAJI,WAKdC,EALc,eAMdlI,EANc,oBAOdhC,GACiC,EACjC,MAAOmK,EAAOC,IAAYjL,EAAAA,EAAAA,UAAgB6K,IACpC,YAAE1C,EAAF,WAAeD,EAAf,SAA2B9D,EAA3B,WAAqC8G,EAArC,mBAAiDjH,GAAuBnC,GAE9E4G,EAAAA,EAAAA,YAAU,KACJP,GAAeD,GACjBpF,EACGqI,UAAUjD,EAAYvI,EAAOwI,GAC7BiD,MAAMjH,GAAW8G,GAAUI,GAAD,iBAAqBA,EAArB,CAAgClH,OAAAA,UAE9D,CAACrB,EAAYsB,EAAU8D,EAAYC,EAAaxI,EAAOsE,IAE1D,MAAMpE,GAAW0I,EAAAA,EAAAA,cACd+C,IACCR,EAAc,OAAD,UAAMhJ,EAAUwJ,IAC7BP,MAEF,CAACD,EAAeC,EAAYjJ,IAGxB2H,GAAqBlB,EAAAA,EAAAA,cACzB,IAAuD,IAAtD,UAAExG,EAAF,WAAaC,EAAb,KAAyB4E,GAA6B,EACrD,MAAMzE,EACJH,IAAesI,EAAAA,GAAAA,OAAoBvI,IAAcwI,EAAAA,GAAAA,aAC7CL,EAAAA,GAAAA,KACAA,EAAAA,GAAAA,MACA,iBAAEjI,IAAqBK,EAAAA,EAAAA,IAAuBP,EAAWC,EAAYgJ,EAAM/I,iBAAkBE,GACnGtC,EAAS,OAAD,UACHiC,EADG,CAENG,iBAAAA,EACAiG,WAAYtB,EACZ7E,UAAAA,EACAC,WAAAA,EACAG,aAAAA,OAGJ,CAACtC,EAAUiC,EAAOkJ,IAGpB,OACE,iCACE,SAAC,KAAD,CACErL,MAAOA,EACP2B,wBAAyBT,EAAoBU,QAC7C4G,YAAaA,EACbrF,WAAYA,EACZjD,SAAWsI,IACTtI,EAAS,OAAD,UAAMiC,EAAN,CAAaqG,YAAAA,QAIxB+C,IAAeM,EAAAA,GAAAA,SACd,SAAC,KAAD,CACE7L,MAAOA,EACPwE,OAAQ6G,EAAM7G,OACdtD,oBAAqBA,EACrBgC,eAAgBA,EAChB4G,mBAAoBA,EACpB5J,SAAUA,EACViD,WAAYA,EACZhB,MAAOA,IAIVoJ,IAAeM,EAAAA,GAAAA,MACd,iCACE,SAACC,EAAA,EAAD,CACE5L,SAAW6L,GAAcZ,EAAc,OAAD,UAAMhJ,EAAN,CAAaA,MAAO4J,KAC1DX,WAAYA,EACZjJ,MAAOA,EAAMA,SAEf,SAACnB,EAAD,CACEd,SAAWe,GAAwBkK,EAAc,OAAD,UAAMhJ,EAAN,CAAalB,YAAAA,KAC7DA,YAAakB,EAAMlB,YACnBjB,MAAOA,EACPkB,oBAAqBA,QAK3B,SAAC,KAAD,CACElB,MAAOA,EACPC,MAAOkC,EAAM4I,QACb7K,SAAW6K,IACT7K,EAAS,OAAD,UAAMiC,EAAN,CAAa4I,QAAAA,WAOxB,MAAMiB,EAAoBf,EAAAA,KAAWJ,oKC7I5C,MAAMwC,EAAe,CACnB,CAAE1M,MAAO,UAAWV,MAAO4L,EAAAA,GAAAA,QAC3B,CAAElL,MAAO,MAAOV,MAAO4L,EAAAA,GAAAA,MAGZyB,EAAe1J,IAC1B,MAAM,MAAEzB,EAAF,YAASwJ,EAAT,SAAsB4B,EAAtB,SAAgCrN,EAAhC,WAA0CkL,GAAexH,GACzD,UAAE4J,GAAcrL,GAChB,WAAEoJ,GAAeI,EAEvB,OACE,UAAC,EAAA8B,aAAD,YACE,SAAC,EAAAC,aAAD,CACE/M,MAAM,aACNiB,QAAS+L,EAAAA,GACT1N,MAAOuN,EACPtN,SAAU,IAAe,IAAd,MAAED,GAAY,EACvBC,EAAS,OAAD,UAAMiC,EAAN,CAAaoL,SAAAA,EAAUC,UAAWvN,KAC1CmL,OAPN,OAUE,SAAC,EAAAwC,SAAD,CAAUC,KAAM,KACfL,IAAcM,EAAAA,GAAAA,MACb,SAAC,EAAApD,iBAAD,CACEqD,KAAK,KACLnM,QAASyL,EACTpN,MAAOsL,GAAcM,EAAAA,GAAAA,OACrB3L,SAAWD,IACTC,EAAS,OAAD,UACHiC,EADG,CAENwJ,YAAa,OAAF,UACNA,EADM,CAETJ,WAAYtL,uCCjCrB,MAAM+N,EAAwC,IAA2D,IAA1D,MAAEhO,EAAF,QAAS6B,EAAT,wBAAkBF,EAAlB,SAA2CzB,GAAe,EAC9G,MAAM0B,EAAUqM,EAAAA,GAAAA,KAAsBC,GAAD,iBAChCA,EADgC,CAEnCvN,MAAOuN,EAAG7J,SAERxC,IAAYD,EAAQiB,MAAM+C,GAAOA,EAAG3F,QAAU4B,KAChDD,EAAQkE,KAAK,CAAEnF,MAAOkB,EAASwC,KAAMxC,EAAS5B,MAAO4B,EAASsK,QAAQ,IAExE,MAAMD,EAAiBtK,EAAQwH,QAAQ8E,IAAQA,EAAG/B,SAElD,OACE,SAAC,EAAAzL,YAAD,CAAaC,MAAM,kBAAkBS,QAAU,GAAEpB,oBAAjD,UACE,SAAC,EAAA4C,OAAD,CACElB,QAAU,GAAE1B,oBACZc,MAAM,OACN8F,kBAAgB,EAChB3G,MAAO,IAAI2B,KAAYD,GAAyBkB,MAAMC,GAAMA,EAAE7C,QAAU4B,IACxED,QAAS,CACP,CACEjB,MAAO,qBACPiB,QAASD,GAEX,CACEhB,MAAO,qBACPoC,UAAU,EACVnB,QAASsK,IAGbhM,SAAU,QAAC,MAAED,GAAH,SAAeC,EAASD,mCC1BnC,MAAMkO,EAAuB,IAAqE,IAApE,MAAEnO,EAAF,MAASmC,EAAT,wBAAgBR,EAAhB,SAAyCzB,EAAzC,WAAmDiD,GAAiB,EACvG,MAAOiL,EAAMC,IAAWhO,EAAAA,EAAAA,UAAyC,KAC3D,YAAEmI,EAAF,UAAe8F,GAAcnM,EAkBnC,OAhBA4G,EAAAA,EAAAA,YAAU,KACHP,GAAgB8F,GAIrBnL,EAAWoL,0BAA0B/F,EAAa8F,GAAW7C,MAAM+C,IACjEH,EAAQ,CACN,CACE1N,MAAO,qBACPiB,QAASD,MAER6M,SAGN,CAACrL,EAAYqF,EAAa8F,EAAW3M,KAGtC,SAAC,EAAAjB,YAAD,CAAaC,MAAM,MAAnB,UACE,SAAC,EAAAiC,OAAD,CACElB,QAAU,GAAE1B,QACZc,MAAM,OACN8F,kBAAgB,EAChB3G,OAAOkC,MAAAA,OAAA,EAAAA,EAAOsM,QAAS,CAAExO,MAAOkC,MAAAA,OAAF,EAAEA,EAAOsM,MAAO9N,OAAOwB,MAAAA,OAAA,EAAAA,EAAOuM,WAAWvM,MAAAA,OAAlB,EAAkBA,EAAOsM,QAC9EzL,YAAY,aACZpB,QAASwM,EACTlO,SAAU8I,MAAAA,IAAsD,IAA7C/I,MAAOwO,EAAQ,GAAI9N,MAAO+N,EAAU,IAAS,EAC9D,MACMC,SADaxL,EAAWoL,0BAA0B/F,EAAa8F,IACpDzL,MAAK,QAAC,MAAE5C,GAAH,SAAeA,IAAUkD,EAAWuF,YAAYI,QAAQ2F,MAC9EvO,EAAS,OAAD,UAAMiC,EAAN,CAAasM,MAAAA,EAAOC,QAAAA,EAASE,KAAMD,MAAAA,OAAF,EAAEA,EAAKC,cC/B7CC,EAA4B,IAAqE,IAApE,MAAE7O,EAAF,MAASmC,EAAT,wBAAgBR,EAAhB,SAAyCzB,EAAzC,WAAmDiD,GAAiB,EAC5G,OACE,SAAC,EAAAzC,YAAD,CAAaC,MAAM,WAAWS,QAAU,GAAEpB,iBAA1C,UACE,SAAC,EAAA4C,OAAD,CACElB,QAAU,GAAE1B,iBACZc,MAAM,OACN8F,kBAAgB,EAChB3G,MAAO,IAAI6O,EAAAA,MAAcnN,GAAyBkB,MAAMC,IAAD,uBAAOA,EAAE7C,SAAUkC,MAAAA,OAAZ,EAAYA,EAAO4M,qBAA1B,QAA0C,MACjGnN,QAAS,CACP,CACEjB,MAAO,qBACPiB,QAASD,MAERmN,EAAAA,IAEL5O,SAAU,QAAGD,MAAO8O,GAAV,SAA6B7O,EAAS,OAAD,UAAMiC,EAAN,CAAa4M,aAAcA,MAAAA,EAAAA,EAAgB,YChBrFC,EAA2B,IAAqE,IAApE,MAAEhP,EAAF,MAASmC,EAAT,wBAAgBR,EAAhB,SAAyCzB,EAAzC,WAAmDiD,GAAiB,EAC3G,MAAOwE,EAAUC,IAAevH,EAAAA,EAAAA,UAAyC,KACnE,YAAEmI,GAAgBrG,EAkBxB,OAhBA4G,EAAAA,EAAAA,YAAU,KACHP,GAILrF,EAAW8L,eAAezG,GAAaiD,MAAM9D,IAC3CC,EAAY,CACV,CACEjH,MAAO,qBACPiB,QAASD,MAERgG,SAGN,CAACxE,EAAYqF,EAAa7G,KAG3B,SAAC,EAAAjB,YAAD,CAAaC,MAAM,UAAnB,UACE,SAAC,EAAAiC,OAAD,CACElB,QAAU,GAAE1B,gBACZc,MAAM,OACN8F,kBAAgB,EAChB3G,OAAOkC,MAAAA,OAAA,EAAAA,EAAOmM,YAAa,CAAErO,MAAOkC,MAAAA,OAAF,EAAEA,EAAOmM,UAAW3N,OAAOwB,MAAAA,OAAA,EAAAA,EAAO+M,eAAe/M,MAAAA,OAAtB,EAAsBA,EAAOmM,YAC1FtL,YAAY,iBACZpB,QAAS+F,EACTzH,SAAU,QAAGD,MAAOqO,EAAY,GAAI3N,MAAOuO,EAAc,IAA/C,SACRhP,EAAS,OAAD,UAAMiC,EAAN,CAAamM,UAAAA,EAAWY,YAAAA,EAAaT,MAAO,YCNvD,SAASU,EAAT,GAO4B,IAPJ,MAC7BnP,EAD6B,MAE7BmC,EAF6B,WAG7BgB,EAH6B,SAI7BjD,EAJ6B,oBAK7BgB,EAL6B,eAM7BgC,GACiC,EACjC,MAAME,GAAiBV,EAAAA,EAAAA,UAAQ,KAAMW,EAAAA,EAAAA,IAAqBH,EAAgBC,IAAa,CAACD,EAAgBC,IACxG,OACE,+BACE,UAAC,EAAAhC,UAAD,YACE,SAAC+I,EAAA,EAAD,CACElK,MAAOA,EACP2B,wBAAyBT,EAAoBU,QAC7C4G,YAAarG,EAAMqG,YACnBrF,WAAYA,EACZjD,SAAWsI,GAAgBtI,EAAS,OAAD,UAAMiC,EAAN,CAAaqG,YAAAA,QAElD,SAACwG,EAAD,CACEhP,MAAOA,EACPmD,WAAYA,EACZxB,wBAAyBT,EAAoBU,QAC7CO,MAAOA,EACPjC,SAAUA,KAEZ,SAACiO,EAAD,CACEnO,MAAOA,EACPmD,WAAYA,EACZxB,wBAAyBT,EAAoBU,QAC7CO,MAAOA,EACPjC,SAAUA,KAEZ,SAAC2O,EAAD,CACE7O,MAAOA,EACPmD,WAAYA,EACZxB,wBAAyBT,EAAoBU,QAC7CO,MAAOA,EACPjC,SAAUA,IAEXiC,EAAM4M,eAAiBK,EAAAA,KACtB,SAACpB,EAAD,CACEhO,MAAOA,EACPE,SAAWmP,GAAmBnP,EAAS,OAAD,UAAMiC,EAAN,CAAakN,eAAgBA,KACnExN,QAASM,EAAMkN,eACf1N,wBAAyBT,EAAoBU,WAIjD,SAAC,EAAA0B,iBAAD,WACE,SAAC,EAAA5C,YAAD,CAAaC,MAAM,mBAAmBU,QAAS+B,EAA/C,UACE,SAACG,EAAA,EAAD,CACE7B,QAAU,GAAE1B,qBACZ2B,wBAAyBT,EAAoBU,QAC7CC,QAASM,EAAMqB,gBACftD,SAAWuD,GAAWvD,EAAS,OAAD,UAAMiC,EAAN,CAAaqB,gBAAiBC,KAC5DzB,gBAAiB0B,EAAAA,UAKvB,SAAC3D,EAAA,EAAD,CAASC,MAAOA,EAAOC,MAAOkC,EAAM4I,QAAS7K,SAAW6K,GAAY7K,EAAS,OAAD,UAAMiC,EAAN,CAAa4I,QAAAA,6HChF1F,MAAMuE,UAAoBC,EAAAA,cACA,kCAC7B,MAAM,WAAEpM,EAAF,MAAchB,GAAUqN,KAAK5L,MAInC,IAAK4L,KAAK5L,MAAMzB,MAAM6D,eAAe,eAAgB,CACnD,MAAsE2F,sIAAtE,CAAsF6D,KAAK5L,MAAMzB,MAAjG,GACAqN,KAAK5L,MAAMzB,MAAMwJ,YAAcA,EAG5B6D,KAAK5L,MAAMzB,MAAM6D,eAAe,eACnCwJ,KAAK5L,MAAMzB,MAAMqL,UAAYM,EAAAA,GAAAA,eAGzB3K,EAAWsM,0BACZtN,EAAMwJ,YAAYnD,cACrBgH,KAAK5L,MAAMzB,MAAMwJ,YAAYnD,YAAcrF,EAAWgK,qBAI1DhC,cAAcuE,EAAczP,GAC1BuP,KAAK5L,MAAM1D,SAAX,iBAAyBsP,KAAK5L,MAAMzB,MAApC,CAA2C,CAACuN,GAAOzP,KACnDuP,KAAK5L,MAAMwH,aAGbuE,SAAS,UACP,MAAM,WAAExM,EAAF,MAAchB,EAAd,WAAqBiJ,EAArB,SAAiClL,GAAasP,KAAK5L,MACnD+H,EAAc,OAAH,WAAQsB,EAAAA,EAAAA,IAAa9J,GAAgBhB,EAAMwJ,aACtD4B,EAAW,OAAH,WAAQqC,EAAAA,EAAAA,GAAgBzM,GAAgBhB,EAAMoL,UACtDC,EAAYrL,EAAMqL,WAAaM,EAAAA,GAAAA,QAC/B+B,EAAO,UAAAL,KAAK5L,MAAMkM,YAAX,SAAiBC,OAAOnG,OAAxB,UAAiC4F,KAAK5L,MAAMkM,YAA5C,aAAiC,EAAiBC,OAAO,GAAGF,KAAO,GAC1E3M,EAAc,UAAG2M,MAAAA,OAAH,EAAGA,EAAMG,cAAT,QAAmB,GACjC9O,EAAsB,CAC1BP,MAAO,qBACPoC,UAAU,EACVnB,QAASuB,EAAW8M,eAAe9L,IAAIc,EAAAA,WAGzC,OAAOiL,EAAAA,OAAAA,eAAAA,+BACL,UAAC,EAAAtE,WAAD,YACE,SAAC0B,EAAD,CACEnL,MAAOA,EACPwJ,YAAaA,EACb4B,SAAUA,EACVrN,SAAUA,EACVkL,WAAYA,IAEboC,IAAcM,EAAAA,GAAAA,UACb,SAAC,KAAD,CACE9N,MAAOmC,EAAMnC,MACbkB,oBAAqBA,EACrBgC,eAAgBA,EAChBhD,SAAWyL,IACT6D,KAAK5L,MAAM1D,SAAX,iBAAyBsP,KAAK5L,MAAMzB,MAApC,CAA2CwJ,YAAAA,MAE7CP,WAAYA,EACZjI,WAAYA,EACZhB,MAAOwJ,IAIV6B,IAAcM,EAAAA,GAAAA,MACb,SAAC,EAAD,CACE9N,MAAOmC,EAAMnC,MACbkB,oBAAqBA,EACrBgC,eAAgBA,EAChBhD,SAAWiC,GAAoBqN,KAAKrE,cAAc,WAAYhJ,GAC9DiJ,WAAYA,EACZjI,WAAYA,EACZhB,MAAOoL,QAKb,UAAC,EAAA3B,WAAD,YACE,SAAC,KAAD,CACEjL,MAAM,aACNwP,cACEhO,EAAMqL,YAAcM,EAAAA,GAAAA,MAClB,SAAC,EAAAsC,OAAD,CACErJ,QAAQ,YACRyC,UAAWW,EAAAA,GAAI;;kBAGfrD,KAAK,OACLE,QAAS,IACPwI,KAAKrE,cAAc,cAAnB,iBACKQ,EADL,CAEEJ,WAAYI,EAAYJ,aAAeM,EAAAA,GAAAA,IAAiBA,EAAAA,GAAAA,OAAoBA,EAAAA,GAAAA,OATlF,SAaGF,EAAYJ,aAAeM,EAAAA,GAAAA,IAAiB,oBAAsB,aAIzEzK,QAAU,GAAEe,EAAMnC,mBArBpB,UAuBE,SAAC,EAAA4C,OAAD,CACE9B,MAAOC,EAAAA,GACPd,MAAOuN,EACP5L,QAAS+L,EAAAA,GACTzN,SAAU,IAAe,IAAd,MAAED,GAAY,EACvBC,EAAS,OAAD,UAAMiC,EAAN,CAAaoL,SAAAA,EAAUC,UAAWvN,KAC1CmL,KAEF1J,QAAU,GAAES,EAAMnC,uBAIrBwN,IAAcM,EAAAA,GAAAA,UACb,SAAC,KAAD,CACE9N,MAAOmC,EAAMnC,MACbkB,oBAAqBA,EACrBgC,eAAgBA,EAChBhD,SAAWyL,IACT6D,KAAK5L,MAAM1D,SAAX,iBAAyBsP,KAAK5L,MAAMzB,MAApC,CAA2CwJ,YAAAA,MAE7CP,WAAYA,EACZjI,WAAYA,EACZhB,MAAOwJ,IAIV6B,IAAcM,EAAAA,GAAAA,MACb,SAAC,KAAD,CACE9N,MAAOmC,EAAMnC,MACbkB,oBAAqBA,EACrBgC,eAAgBA,EAChBhD,SAAWiC,GAAoBqN,KAAKrE,cAAc,WAAYhJ,GAC9DiJ,WAAYA,EACZjI,WAAYA,EACZhB,MAAOoL,qIC5IZ,MAAMS,EAAiD,IAKxD,IALyD,MAC7DhO,EAD6D,QAE7D6B,EAF6D,wBAG7DF,EAH6D,SAI7DzB,GACI,EACJ,MAAM0B,EAAUqM,EAAAA,GAAAA,KAAsBC,GAAD,iBAChCA,EADgC,CAEnCvN,MAAOuN,EAAG7J,SAERxC,IAAYD,EAAQiB,MAAM+C,GAAOA,EAAG3F,QAAU4B,KAChDD,EAAQkE,KAAK,CAAEnF,MAAOkB,EAASwC,KAAMxC,EAAS5B,MAAO4B,EAASsK,QAAQ,IAExE,MAAMD,EAAiBtK,EAAQwH,QAAQ8E,IAAQA,EAAG/B,SAElD,OACE,SAAC,KAAD,CAAgBxL,MAAM,kBAAkBS,QAAU,GAAEpB,oBAApD,UACE,SAAC,EAAA4C,OAAD,CACElB,QAAU,GAAE1B,oBACZc,MAAOC,EAAAA,GACP6F,kBAAgB,EAChB3G,MAAO,IAAI2B,KAAYD,GAAyBkB,MAAMC,GAAMA,EAAE7C,QAAU4B,IACxED,QAAS,CACP,CACEjB,MAAO,qBACPiB,QAASD,GAEX,CACEhB,MAAO,qBACPoC,UAAU,EACVnB,QAASsK,IAGbhM,SAAU,QAAC,MAAED,GAAH,SAAeC,EAASD,SC9B7B+O,EAA2B,IAAqE,IAApE,MAAEhP,EAAF,MAASmC,EAAT,wBAAgBR,EAAhB,SAAyCzB,EAAzC,WAAmDiD,GAAiB,EAC3G,MAAOwE,EAAUC,IAAevH,EAAAA,EAAAA,UAAyC,KACnE,YAAEmI,GAAgBrG,EAkBxB,OAhBA4G,EAAAA,EAAAA,YAAU,KACHP,GAILrF,EAAW8L,eAAezG,GAAaiD,MAAM9D,IAC3CC,EAAY,CACV,CACEjH,MAAO,qBACPiB,QAASD,MAERgG,SAGN,CAACxE,EAAYqF,EAAa7G,KAG3B,SAAC,KAAD,CAAgBhB,MAAM,UAAUS,QAAU,GAAEpB,gBAA5C,UACE,SAAC,EAAA4C,OAAD,CACElB,QAAU,GAAE1B,gBACZc,MAAOC,EAAAA,GACP6F,kBAAgB,EAChB3G,OAAOkC,MAAAA,OAAA,EAAAA,EAAOmM,YAAa,CAAErO,MAAOkC,MAAAA,OAAF,EAAEA,EAAOmM,UAAW3N,OAAOwB,MAAAA,OAAA,EAAAA,EAAO+M,eAAe/M,MAAAA,OAAtB,EAAsBA,EAAOmM,YAC1FtL,YAAY,iBACZpB,QAAS+F,EACTzH,SAAU,QAAGD,MAAOqO,EAAY,GAAI3N,MAAOuO,EAAc,IAA/C,SACRhP,EAAS,OAAD,UAAMiC,EAAN,CAAamM,UAAAA,EAAWY,YAAAA,EAAaT,MAAO,YC9BjDN,EAAuB,IAAqE,IAApE,MAAEnO,EAAF,MAASmC,EAAT,wBAAgBR,EAAhB,SAAyCzB,EAAzC,WAAmDiD,GAAiB,EACvG,MAAOiL,EAAMC,IAAWhO,EAAAA,EAAAA,UAAyC,KAC3D,YAAEmI,EAAF,UAAe8F,GAAcnM,EAkBnC,OAhBA4G,EAAAA,EAAAA,YAAU,KACHP,GAAgB8F,GAIrBnL,EAAWoL,0BAA0B/F,EAAa8F,GAAW7C,MAAM+C,IACjEH,EAAQ,CACN,CACE1N,MAAO,qBACPiB,QAASD,MAER6M,SAGN,CAACrL,EAAYqF,EAAa8F,EAAW3M,KAGtC,SAAC,KAAD,CAAgBhB,MAAM,MAAMS,QAAU,GAAEpB,QAAxC,UACE,SAAC,EAAA4C,OAAD,CACElB,QAAU,GAAE1B,QACZc,MAAOC,EAAAA,GACP6F,kBAAgB,EAChB3G,OAAOkC,MAAAA,OAAA,EAAAA,EAAOsM,QAAS,CAAExO,MAAOkC,MAAAA,OAAF,EAAEA,EAAOsM,MAAO9N,OAAOwB,MAAAA,OAAA,EAAAA,EAAOuM,WAAWvM,MAAAA,OAAlB,EAAkBA,EAAOsM,QAC9EzL,YAAY,aACZpB,QAASwM,EACTlO,SAAU8I,MAAAA,IAAsD,IAA7C/I,MAAOwO,EAAQ,GAAI9N,MAAO+N,EAAU,IAAS,EAC9D,MACMC,SADaxL,EAAWoL,0BAA0B/F,EAAa8F,IACpDzL,MAAK,QAAC,MAAE5C,GAAH,SAAeA,IAAUkD,EAAWuF,YAAYI,QAAQ2F,MAC9EvO,EAAS,OAAD,UAAMiC,EAAN,CAAasM,MAAAA,EAAOC,QAAAA,EAASE,KAAMD,MAAAA,OAAF,EAAEA,EAAKC,cChC7CC,EAA4B,IAAqE,IAApE,MAAE7O,EAAF,MAASmC,EAAT,wBAAgBR,EAAhB,SAAyCzB,EAAzC,WAAmDiD,GAAiB,EAC5G,OACE,SAAC,KAAD,CAAgBxC,MAAM,WAAWS,QAAU,GAAEpB,iBAA7C,UACE,SAAC,EAAA4C,OAAD,CACElB,QAAU,GAAE1B,iBACZc,MAAOC,EAAAA,GACP6F,kBAAgB,EAChB3G,MAAO,IAAI6O,EAAAA,MAAcnN,GAAyBkB,MAAMC,IAAD,uBAAOA,EAAE7C,SAAUkC,MAAAA,OAAZ,EAAYA,EAAO4M,qBAA1B,QAA0C,MACjGnN,QAAS,CACP,CACEjB,MAAO,qBACPiB,QAASD,MAERmN,EAAAA,IAEL5O,SAAU,QAAGD,MAAO8O,GAAV,SAA6B7O,EAAS,OAAD,UAAMiC,EAAN,CAAa4M,aAAcA,MAAAA,EAAAA,EAAgB,YCVrF9B,EAAqEC,IAAD,CAC/E1E,YAAa0E,EAAWC,oBACxB3J,gBAAiB,wBACjBlB,iBAAkB8K,EAAAA,GAAAA,WAClBrC,QAAS,GACTgE,aAAc,oBACdT,UAAW,GACXY,YAAa,GACbT,MAAO,GACPC,QAAS,GACTW,eAAgB,KAGX,SAASF,EAAT,GAO4B,IAPJ,MAC7BnP,EAD6B,MAE7BmC,EAF6B,WAG7BgB,EAH6B,SAI7BjD,EAJ6B,oBAK7BgB,EAL6B,eAM7BgC,GACiC,EACjC,OACE,iCACE,SAAC,KAAD,CACElD,MAAOA,EACP2B,wBAAyBT,EAAoBU,QAC7C4G,YAAarG,EAAMqG,YACnBrF,WAAYA,EACZjD,SAAWsI,GAAgBtI,EAAS,OAAD,UAAMiC,EAAN,CAAaqG,YAAAA,QAElD,SAACwG,EAAD,CACEhP,MAAOA,EACPmD,WAAYA,EACZxB,wBAAyBT,EAAoBU,QAC7CO,MAAOA,EACPjC,SAAUA,KAEZ,SAACiO,EAAD,CACEnO,MAAOA,EACPmD,WAAYA,EACZxB,wBAAyBT,EAAoBU,QAC7CO,MAAOA,EACPjC,SAAUA,KAEZ,SAAC2O,EAAD,CACE7O,MAAOA,EACPmD,WAAYA,EACZxB,wBAAyBT,EAAoBU,QAC7CO,MAAOA,EACPjC,SAAUA,IAGXiC,EAAM4M,eAAiBK,EAAAA,KACtB,SAACpB,EAAD,CACEhO,MAAOA,EACPE,SAAWmP,GAAmBnP,EAAS,OAAD,UAAMiC,EAAN,CAAakN,eAAgBA,KACnExN,QAASM,EAAMkN,eACf1N,wBAAyBT,EAAoBU,WAIjD,UAAC,KAAD,CAAgBjB,MAAM,mBAAmBS,QAAU,GAAEpB,qBAArD,WACE,SAAC,KAAD,CACE0B,QAAU,GAAE1B,qBACZ2B,wBAAyBT,EAAoBU,QAC7CE,YAAaf,EAAAA,GACbc,QAASM,EAAMqB,gBACftD,SAAWuD,GAAWvD,EAAS,OAAD,UAAMiC,EAAN,CAAaqB,gBAAiBC,KAC5DzB,gBAAiB0B,EAAAA,MAEnB,SAAC,KAAD,CAAsBP,WAAYA,EAAYD,eAAgBA,QAGhE,SAAC,KAAD,CAASlD,MAAOA,EAAOC,MAAOkC,EAAM4I,QAAS7K,SAAW6K,GAAY7K,EAAS,OAAD,UAAMiC,EAAN,CAAa4I,QAAAA,wQC9ExF,SAASb,EAAT,GAA+F,IAA9E,MAAElK,EAAF,YAASwI,EAAT,WAAsBrF,EAAtB,SAAkCjD,EAAlC,wBAA4CyB,GAAkC,EACpG,MAAOyK,EAAUC,IAAehM,EAAAA,EAAAA,UAAyC,KACzE0I,EAAAA,EAAAA,YAAU,KACR5F,EAAWmJ,cAAcb,MAAMW,GAAaC,EAAYD,OACvD,CAACjJ,IAEJ,MAAMoJ,GAAgC7J,EAAAA,EAAAA,UACpC,IAAM,CACJ0J,EACA,CACEzL,MAAO,qBACPiB,QAASD,MAERyK,IAEL,CAACA,EAAUzK,IAGb,OACE,SAAC0O,EAAD,CAAgB1P,MAAM,UAAUS,QAAU,GAAEpB,YAA5C,UACE,SAAC,EAAA4C,OAAD,CACE9B,MAAOC,EAAAA,GACP6F,kBAAgB,EAChBF,kBAAoBC,GAAO,gBAAeA,IAC1CzG,SAAU,QAAC,MAAED,GAAH,SAAeC,EAASD,IAClC2B,QAAS2K,EACTtM,MAAO,CAAEA,MAAOuI,EAAa7H,MAAO6H,GACpCxF,YAAY,iBACZtB,QAAU,GAAE1B,0CCXb,SAASqH,EAAQzD,GACtB,MAAOyH,EAAOC,IAAYjL,EAAAA,EAAAA,UAAgB,CACxCiH,kBAAmB,GACnBG,QAAS,GACTE,SAAU,GACVE,QAAS,GACTiD,OAAQ,GACRtC,YAAa,OAGTT,GAAQC,EAAAA,EAAAA,aACRC,GAAeC,EAAAA,EAAAA,iBAAgBH,GAE/BI,GAAcC,EAAAA,EAAAA,YAAWC,IAEzB,SAAEV,EAAF,QAAYE,EAAZ,QAAqBJ,EAArB,kBAA8BH,GAAsB+D,GACpD,WAAE9C,EAAF,wBAAc5G,EAAd,YAAuC6G,EAAvC,YAAoDE,EAApD,WAAiEvF,EAAjE,SAA6EjD,EAA7E,SAAuFuI,GAAa7E,EAEpG+E,GAA8BC,EAAAA,EAAAA,cAClC,CAACtB,EAAuCiB,IAC/BjB,EAAkBzE,MAAMgG,GAAOA,EAAG5B,OAASyB,EAAYI,QAAQP,MAExE,CAACG,KAGHK,EAAAA,EAAAA,YAAU,KACsBC,WAC5B,GAAIR,EAAa,CACf,MAAMlB,QAA0BnE,EAAW8F,eAAeT,GACpDb,EAAWuB,EAAgB5B,GACjCgE,GAAUI,GAAD,iBACJA,EADI,CAEPpE,kBAAAA,EACAK,SAAAA,QAINkC,KACC,CAAC1G,EAAYqF,EAAaL,EAAaF,EAAawB,qBAEvDV,EAAAA,EAAAA,YAAU,KACR,MAuBMtB,EAvBkBH,CAAAA,IACtB,MAAM6B,EAA2BR,EAA4BrB,EAAmBiB,GAChF,IAAKY,EACH,MAAO,GAkBT,OAfyB7B,EACtB8B,QAAQC,GAAMA,EAAExB,UAAYsB,EAAyBtB,UACrD1D,KAAKkF,IAAD,CACHxB,QAASwB,EAAExB,QACX5H,MAAOoJ,EAAEpC,KACTtG,MAAO0I,EAAEC,YACTC,UAAW,WACT,OACE,4BACE,gBAAKC,UAAWrB,EAAhB,SAA8BkB,EAAEpC,QAChC,gBAAKuC,UAAWvB,EAAawB,kBAA7B,SAAiDJ,EAAEK,uBAO/CC,CAAerC,GACzBO,EAAUJ,EAAQmC,OAAS,EAAInC,EAAQ,GAAGI,QAAU,GACpD5D,EAAmB0E,EAA4BrB,EAAmBiB,GACxE+C,GAAUI,GAAD,iBACJA,EADI,CAEPzH,iBAAAA,EACAwD,QAAAA,EACAI,QAASA,QAEV,CAACP,EAAmBqB,EAA6BJ,EAAYJ,EAAaF,EAAawB,oBAE1F,MAiBMK,EAAqB,YAAyD,IAAxD,MAAE7J,GAAsD,EAApBqQ,EAAoB,uDAAP,GAC3E,MAAMrM,EAAmB0E,EAA4B0C,EAAM/D,kBAAmBrH,GAC9EqL,EAAS,OAAD,UAAMD,EAAN,CAAapH,iBAAAA,GAAqBqM,IAC1CpQ,EAAS,OAAD,UAAM+D,EAAN,CAAwBgD,KAAMhH,MAGlCiJ,EAAmB5B,IACvB,MAAMK,EAAWL,EAAkBnD,KAAKkF,IAAD,CACrCpJ,MAAOoJ,EAAExB,QACTlH,OAAOoJ,EAAAA,EAAAA,WAAUV,EAAEW,sBAGrB,OAAOrC,EAASiC,OAAS,GAAIK,EAAAA,EAAAA,QAAOtC,GAAW7E,GAAMA,EAAE7C,QAAS,IAGlE,OACE,iCACE,UAACoQ,EAAD,YACE,SAACE,EAAD,CAAkBC,WAAYC,EAAAA,GAAa9P,MAAM,UAAUS,QAAU,GAAEwC,EAAM5D,gBAA7E,UACE,SAAC,EAAA4C,OAAD,CACE9B,MAAOC,EAAAA,GACPb,SAtCc,IAA6B,IAA1BD,MAAO4H,GAAmB,EACnD,MAAMJ,EAAUH,EACb8B,QAAQC,GAAwBA,EAAExB,UAAYa,EAAYI,QAAQjB,KAClE1D,KAAKkF,IAAD,CACHxB,QAASwB,EAAExB,QACX5H,MAAOoJ,EAAEpC,KACTtG,MAAO0I,EAAEC,YACTI,YAAaL,EAAEK,gBAGfjC,EAAQmC,OAAS,IAAMnC,EAAQ9B,MAAM0D,GAAMA,EAAEpJ,QAAUyI,EAAYI,QAAQP,KAC7EuB,EAAmBrC,EAAQ,GAAI,CAAEI,QAAAA,EAASJ,QAAAA,IAE1C6D,EAAS,OAAD,UAAMD,EAAN,CAAaxD,QAAAA,EAASJ,QAAAA,MA0BxBxH,MAAO,IAAI0H,KAAahG,GAAyBkB,MAAMC,GAAMA,EAAE7C,QAAU4H,IACzEjG,QAAS,CACP,CACEjB,MAAO,qBACPiB,QAASD,MAERgG,GAEL3E,YAAY,kBACZtB,QAAU,GAAEkC,EAAM5D,qBAGtB,SAACuQ,EAAD,CAAkB5P,MAAM,cAAc6P,WAAYE,EAAAA,GAAmBtP,QAAU,GAAEwC,EAAM5D,sBAAvF,UACE,SAAC,EAAA4C,OAAD,CACE9B,MAAOC,EAAAA,GACPb,SAAU4J,EACV7J,MAAO,IAAIwH,KAAY9F,GAAyBkB,MAAMC,GAAMA,EAAE7C,QAAUsI,IACxE3G,QAAS,CACP,CACEjB,MAAO,qBACPiB,QAASD,MAER8F,GAELzE,YAAY,gBACZtB,QAAU,GAAEkC,EAAM5D,6BAKvByI,EAAS4C,EAAMpH,qBAKtB,MAAMoE,EAAaN,GAAyBoC,EAAAA,GAAI;;;;WAIrCpC,EAAMqC,OAAO/F,KAAKgG;gBCxKtB,MAAM9F,EAAoC,IAO3C,YAP4C,MAChDvE,EACAwE,OAAQC,EAAW,GAF6B,MAGhDtC,EAHgD,SAIhDjC,EAJgD,oBAKhDgB,EALgD,iBAMhD+C,GACI,EACJ,MAAMrC,GAAUc,EAAAA,EAAAA,UACd,IAAM,CAACxB,MAAwBwD,EAAAA,EAAAA,IAAuB,IAAID,KAAaE,EAAAA,OACvE,CAACF,EAAUvD,IAGb,OACE,UAACmP,EAAD,CACE1P,MAAM,WACNU,QAAQ,oTACRD,QAAU,GAAEpB,aAHd,WAKE,SAAC,EAAA4E,YAAD,CACElD,QAAU,GAAE1B,aACZc,MAAO6P,EAAAA,GACP3N,YAAY,eACZpB,QAASA,EACT3B,MAAK,UAAEkC,EAAMsC,gBAAR,QAAoB,GACzBvE,SAAW0B,IACT1B,EAAS,OAAD,UAAMiC,EAAN,CAAasC,SAAU7C,EAAQuC,KAAKU,GAAMA,EAAE5E,eAGxD,SAAC0D,EAAD,CACEM,iBAAkBA,EAClBtC,wBAAyBT,EAAoBU,QAC7C0C,mBAAoBnC,EAAMmC,mBAC1BG,SAAQ,UAAEtC,EAAMsC,gBAAR,QAAoB,GAC5BvE,SAAWoE,GAAuBpE,EAAS,OAAD,UAAMiC,EAAN,CAAamC,mBAAAA,KACvDtE,MAAOA,QCpCFiD,EAAuB,IAO9B,IAP+B,MACnCjD,EADmC,wBAEnC2B,EAFmC,SAGnCzB,EAHmC,MAInCiC,EAJmC,eAKnCe,EALmC,WAMnCC,GACI,EACJ,OACE,UAACkN,EAAD,CACE1P,MAAM,qBACNU,QAAQ,iMACR8O,eAAe,SAACS,EAAD,CAAsBzN,WAAYA,EAAYD,eAAgBA,IAC7E9B,QAAU,GAAEpB,uBAJd,WAME,SAACkC,EAAD,CACER,QAAU,GAAE1B,uBACZ2B,wBAAyBA,EACzBQ,MAAOA,EACPjC,SAAUA,KAEZ,SAACqQ,EAAD,CAAkB5P,MAAM,mBAAmBS,QAAU,GAAEpB,qBAAvD,UACE,SAACuD,EAAD,CACE7B,QAAU,GAAE1B,qBACZ8B,YAAaf,EAAAA,GACbY,wBAAyBA,EACzBE,QAASM,EAAMqB,gBACftD,SAAWuD,GAAWvD,EAAS,OAAD,UAAMiC,EAAN,CAAaqB,gBAAiBC,KAC5DzB,gBAAiB0B,EAAAA,iNC3B3B,MAAMsB,EAAY,CAAC,IAAK,KAAM,KAAM,OAE9B6L,EAAe5F,EAAAA,YACnB,CAAC,EAAqC6F,KAAQ,IAAhBC,EAAgB,OAC5C,OAAO,SAAC,EAAAX,OAAD,iBAAYW,EAAZ,CAAkBD,IAAKA,EAAK/J,QAAQ,YAAYD,KAAK,OAAO,aAAW,mBAGlF+J,EAAavH,YAAc,eAE3B,MAAM0H,EAAiB/F,EAAAA,YAAgE,CAAC,EAAoB6F,KAAQ,IAA5B,MAAE7Q,GAA0B,EAAhB8Q,EAAgB,OAClH,OACE,SAAC,EAAAX,OAAD,iBAAYW,EAAZ,CAAkBD,IAAKA,EAAK/J,QAAQ,YAApC,UACE,iBAAMyC,UAAU,yBAAhB,SAA0CvJ,MAAAA,OAA1C,EAA0CA,EAAOU,cAIvDqQ,EAAe1H,YAAc,iBAEtB,MAAMpE,EAAwC,IAK/C,UALgD,OACpDV,EAAS,GACTW,QAASC,EAF2C,SAGpDlF,EAHoD,oBAIpDgB,GACI,EACJ,MAAMiE,GAAUzC,EAAAA,EAAAA,UAAQ,KAAM4C,EAAAA,EAAAA,IAAqBF,IAAc,CAACA,IAC5DxD,GAAUc,EAAAA,EAAAA,UACd,IAAM,CAACxB,MAAwBwD,EAAAA,EAAAA,IAAuBa,OAAOC,KAAKhB,MAClE,CAACA,EAAQtD,IAGLkG,GAAuBwB,EAAAA,EAAAA,cAAazD,IACxC,MAAM8L,GAASC,EAAAA,EAAAA,SAAQ/L,EAAQhB,KAAI,QAAC,IAAEuB,EAAF,SAAOa,EAAP,MAAiBtG,EAAjB,UAAwBuG,GAAzB,QAAyC,CAACd,EAAKa,EAAUtG,EAAOuG,OACnG,OAAOyK,EAAO9J,MAAM,EAAG8J,EAAOrH,OAAS,KACtC,IAEGuH,EAAY,KAEd,SAAC,EAAAvO,OAAD,CACEgE,kBAAgB,EAChBhF,QAAS,CAACV,MAAwBwD,EAAAA,EAAAA,IAAuBa,OAAOC,KAAKhB,KACrEtE,SAAU,QAAGD,MAAOyF,EAAM,IAAhB,SACRxF,EAASkH,EAAqB,IAAIjC,EAAS,CAAEO,IAAAA,EAAKa,SAAU,IAAKC,UAAW,MAAOvG,MAAO,QAE5FmR,cAAc,SACdC,cAAeR,IAKrB,OACE,SAACR,EAAD,CACE1P,MAAM,SACNU,QACE,iMAEFiQ,UAAWnM,EAAQyE,OAAS,EAL9B,UAOE,UAAC,EAAA2H,cAAD,CAAe9K,QAAQ,KAAK3F,MAAM,OAAlC,UACGqE,EAAQhB,KAAI,CAAC,EAAqCqN,KAAU,IAA/C,IAAE9L,EAAF,SAAOa,EAAP,MAAiBtG,EAAjB,UAAwBuG,GAAuB,EAExC5E,EAAQ+D,MAAMC,GAC3BA,EAAGhE,QACEA,EAAQ+D,MAAME,GAAQA,EAAIlF,QAAU+E,IAEtCE,EAAGjF,QAAU+E,KAGpB9D,EAAQkE,KAAK,CAAEnF,MAAO+E,EAAKzF,MAAOyF,IAGpC,MAAMK,EAAevB,EAAOwB,eAAeN,GACvC,CAACxE,KAAwBsD,EAAOkB,GAAKvB,IAAIc,EAAAA,WACzC,CAAC/D,GAQL,OAPqB6E,EAAaJ,MAAMC,GAC/BA,EAAGjF,QAAUV,KAGpB8F,EAAaD,KAAK,CAAEnF,MAAOV,EAAOA,MAAAA,KAIlC,UAAC,EAAAqB,gBAAD,CAA6BmF,QAAQ,KAAK3F,MAAM,OAAhD,WACE,SAAC,EAAA8B,OAAD,CACE,aAAW,mBACX9B,MAAOC,EAAAA,GACP6F,kBAAgB,EAChBF,kBAAoBC,GAAO,kBAAiBA,IAC5C1G,MAAOyF,EACP9D,QAASA,EACT1B,SAAU,IAAyB,IAAtBD,MAAOyF,EAAM,IAAS,EACjCxF,EACEkH,EACEjC,EAAQhB,KAAI,CAACsN,EAAGC,IAAOA,IAAMF,EAAQ,CAAE9L,IAAAA,EAAKa,SAAAA,EAAUC,UAAAA,EAAWvG,MAAO,IAAOwR,UAKvF,SAAC,EAAA7O,OAAD,CACE3C,MAAOsG,EACP3E,QAASoD,EAAUb,IAAIc,EAAAA,UACvB/E,SAAU,QAAGD,MAAOsG,EAAW,KAArB,SACRrG,EAASkH,EAAqBjC,EAAQhB,KAAI,CAACsN,EAAGC,IAAOA,IAAMF,EAAN,iBAAmBC,EAAnB,CAAsBlL,SAAAA,IAAakL,OAE1FL,cAAc,SACdC,cAAeL,KAEjB,SAAC,EAAApO,OAAD,CACE,aAAW,qBACX9B,MAAOC,EAAAA,GACP2F,kBAAoBC,GAAO,oBAAmBA,IAC9CC,kBAAgB,EAChB3G,MAAOA,EACP+C,YAAY,mBACZpB,QAASmE,EACT7F,SAAU,QAAC,MAAED,EAAQ,IAAX,SACRC,EAASkH,EAAqBjC,EAAQhB,KAAI,CAACsN,EAAGC,IAAOA,IAAMF,EAAN,iBAAmBC,EAAnB,CAAsBxR,MAAAA,IAAUwR,UAGzF,SAAC,EAAArB,OAAD,CACErJ,QAAQ,YACRgH,KAAK,KACLjH,KAAK,YACL,aAAW,SACXE,QAAS,IAAM9G,EAASkH,EAAqBjC,EAAQiE,QAAO,CAACuI,EAAGD,IAAMA,IAAMF,QAE7EA,EAAQ,IAAMrM,EAAQyE,QAAUrE,OAAOqM,OAAOzM,GAAS0M,OAAM,QAAC,MAAE5R,GAAH,SAAeA,OAA5E,OAAsF,SAACkR,EAAD,QA5CnEK,OAgDxBrM,EAAQyE,SAAU,SAACuH,EAAD,gBCnJrB,MAAMW,EAAsB,IAC1B,IAAP,GACE,gBAAKtI,UAAU,sCAAf,UACE,4BACE,qDACA,mLAEkD,QAElD,+KAIA,4BACI,kBADJ,eACwC,uBAExC,6CACkB,yGAElB,0CACA,0BACE,0BAAQ,qBADV,mCAGA,0BACE,0BAAQ,oBADV,yEAGA,0BACE,0BAAQ,oBADV,0DAGA,0BACE,0BAAQ,uBADV,6CAGA,0BACE,0BAAQ,gCADV,+DAGA,0BACE,0BAAQ,kCADV,+DCrBKtH,EAA+B,IAA2D,IAA1D,QAAER,EAAF,MAAWS,EAAX,wBAAkBR,EAAlB,SAA2CzB,GAAe,EACrG,MAAM,UAAEkC,EAAF,WAAaC,EAAYC,iBAAkBC,EAA3C,aAAgDC,GAAiBL,GACjE,iBAAEG,EAAF,aAAoBG,IAAiBC,EAAAA,EAAAA,UACzC,KAAMC,EAAAA,EAAAA,IAAuBP,EAAWC,EAAYE,EAAKC,IACzD,CAACJ,EAAWC,EAAYE,EAAKC,IAG/B,OACE,SAAC,EAAAI,OAAD,CACE9B,MAAOC,EAAAA,GACPb,SAAU,QAAC,MAAED,GAAH,SAAeC,EAAS,OAAD,UAAMiC,EAAN,CAAaG,iBAAkBrC,MAChEA,MAAO,IAAIwC,KAAiBd,GAAyBkB,MAAMC,GAAMA,EAAE7C,QAAUqC,IAC7EV,QAAS,CACP,CACEjB,MAAO,qBACPiB,QAASD,GAEX,CACEhB,MAAO,oBACPoC,UAAU,EACVnB,QAASa,IAGbO,YAAY,mBACZtB,QAASA,KC3BFkP,EAAkC,IAAoC,IAAnC,eAAE1N,EAAF,WAAkBC,GAAiB,EACjF,MAAM,iBAAEb,EAAF,gBAAoBkB,GAAoBN,EACxC6O,GAAsBrP,EAAAA,EAAAA,UAAQ,KAAM,MACxC,IAAKc,IAAoBlB,EACvB,MAAO,GAGT,MAAM0P,EAAYC,EAAAA,GAAAA,MAAiBhG,GAAOA,EAAGhM,QAAUkD,EAAWuF,YAAYI,QAAQxG,KAChF4P,EAAUC,SAAS3O,MAAAA,EAAAA,EAAmB,GAAGsF,QAAQ,UAAW,IAAK,IAEvE,MAAQ,GADIsJ,EAAAA,UAAAA,aAAuBF,gBAC5B,UAAoBF,MAAAA,OAApB,EAAoBA,EAAW3N,YAA/B,QAAuC,QAC7C,CAAClB,EAAYb,EAAkBkB,IAElC,OAAO,2BAAQuO,KCXJhS,EAAoC,IAAqC,IAApC,MAAEC,EAAF,MAASC,EAAQ,GAAjB,SAAqBC,GAAe,EACpF,MAAOC,EAAOC,IAAYC,EAAAA,EAAAA,UAASJ,MAAAA,EAAAA,EAAS,IAEtCK,GAAoBC,EAAAA,EAAAA,UAASL,EAAU,KAO7C,OALAA,EAAYM,IACVJ,EAASI,EAAEC,OAAOR,OAClBK,EAAkBE,EAAEC,OAAOR,SAI3B,SAACoQ,EAAD,CAAgB1P,MAAM,WAAWS,QAAU,GAAEpB,aAA7C,UACE,SAAC,EAAAY,MAAD,CAAOC,GAAK,GAAEb,aAAkBc,MAAO6P,EAAAA,GAAa1Q,MAAOE,EAAOD,SAAUA,OCRrEyD,EAA0BC,IACrC,MAAMC,EAAaC,EAA8BF,GAC3CG,EAAWC,EAAuBH,EAAYD,GAEpD,OACE,SAAC2M,EAAD,CACEC,WAAY,GACZ7P,MAAM,oBACN,cAAY,+BACZS,QAAU,GAAEwC,EAAM5D,0BAJpB,UAME,SAAC,EAAA4C,OAAD,CACE9B,MAAO,GACPZ,SAAU,QAAC,MAAED,GAAH,SAAe2D,EAAM1D,SAASD,IACxCA,MAAO8D,EACPnC,QAAS,CACP,CACEjB,MAAO,qBACPiB,QAASgC,EAAMjC,yBAEjB,CACEhB,MAAO,eACPoC,UAAU,EACVnB,QAASiC,IAGbb,YAAY,iBACZtB,QAAU,GAAEkC,EAAM5D,+BAMpB8D,EAAgC,IAAiE,IAAhE,iBAAEG,GAA8D,EACrG,MAAM7B,EAAY6B,MAAAA,OAAH,EAAGA,EAAkB7B,UAC9BC,EAAa4B,MAAAA,OAAH,EAAGA,EAAkB5B,WAErC,OAAOK,EAAAA,EAAAA,UAAQ,IACRN,GAAcC,GAIZ6B,EAAAA,EAAAA,IAA8B9B,EAAyBC,GAA0B8B,KAAKC,GAAD,iBACvFA,EADuF,CAE1FzD,MAAOyD,EAAEC,SALF,IAOR,CAACjC,EAAWC,KAGX2B,EAAyB,CAACH,EAA4CD,KACnElB,EAAAA,EAAAA,UAAQ,IACM,IAAImB,KAAeD,EAAMjC,yBAC1BkB,MAAMC,GAAMA,EAAE7C,QAAU2D,EAAMU,sBAC/C,CAACT,EAAYD,EAAMU,mBAAoBV,EAAMjC,2UCxD3C,MAAM0Q,EAAkD,IAMzD,IAN0D,MAC9D1R,EAD8D,SAE9DT,EAF8D,MAG9DD,EAH8D,QAI9D2B,EAJ8D,iBAK9DgF,GAAmB,GACf,EACJ,OACE,SAAC,EAAA0L,YAAD,CAAa3R,MAAOA,EAAO6P,WAAY,GAAvC,UACE,SAAC,EAAA5N,OAAD,CACE9B,MAAO,GACP8F,iBAAkBA,EAClB3G,MAAOA,EACPC,SAAU,QAAC,MAAED,GAAH,SAAeC,EAASD,IAClC2B,QAASA,OAiBJyO,EAA4B,IASnC,IAToC,SACxC5H,EADwC,MAExC9H,EAFwC,QAGxCU,EAHwC,cAIxC8O,EAJwC,UAKxCmB,GAAY,EAL4B,WAMxCd,EAAaC,EAAAA,GAN2B,QAOxCrP,GAEI,EADD2P,EACC,OACJ,OACE,+BAAKvH,UAAU,WAAcuH,EAA7B,WACGpQ,IACC,SAAC,EAAA4R,YAAD,CAAazR,MAAO0P,EAAYnP,QAASA,EAASD,QAASA,EAA3D,SACGT,KAGL,gBACE6I,UAAWW,EAAAA,GAAI;;UADjB,UAKE,SAAC,EAAA7I,gBAAD,CAAiBmF,QAAQ,KAAK3F,MAAM,OAApC,SACG2H,OAGL,gBAAKe,UAAW,gBAAhB,SACG8H,IAAa,gBAAK9H,UAAW,oCAAhB,SAAsD2G,WAM/DI,EAA8B,IAA2E,IAA1E,SAAE9H,EAAF,MAAY9H,EAAZ,QAAmBU,EAAnB,WAA4BmP,EAAaE,EAAAA,IAAiC,EAAXK,EAAW,OACpH,OACE,gCACGpQ,IACC,SAAC,EAAA4R,YAAD,eAAazR,MAAO0P,EAAYnP,QAASA,GAAa0P,EAAtD,UACGpQ,KAGJ8H,MCpEP,SAASoC,EAAT,GASmC,IATnB,MACd7K,EADc,MAEdmC,EAFc,OAGdqC,EAHc,WAIdrB,EAJc,SAKdjD,EALc,mBAMd4J,EANc,eAOd5G,EAPc,oBAQdhC,GACiC,EACjC,OACE,SAACmG,EAAD,CACErH,MAAOA,EACP0I,YAAavF,EAAWuF,YACxBF,YAAarG,EAAMqG,YACnBD,WAAYpG,EAAMoG,WAClB5G,wBAAyBT,EAAoBU,QAC7CuB,WAAYA,EACZjD,SAAU4J,EAPZ,SASIgB,IACA,iCACE,SAAC5F,EAAD,CACEV,OAAQA,EACRW,QAAShD,EAAMgD,QACfjF,SAAWiF,GAAsBjF,EAAS,OAAD,UAAMiC,EAAN,CAAagD,QAAAA,KACtDjE,oBAAqBA,KAEvB,SAACsJ,EAAD,CAAcvG,iBAAkB6G,EAAQ3I,MAAOA,EAAOjC,SAAUA,KAChE,SAACqE,EAAD,CACEvE,MAAOA,EACPwE,OAAQe,OAAOC,KAAKhB,GACpBrC,MAAOA,EACPjC,SAAUA,EACVgB,oBAAqBA,EACrB+C,iBAAkB6G,KAEpB,SAAC7H,EAAD,CACEjD,MAAOA,EACPmD,WAAYA,EACZxB,wBAAyBT,EAAoBU,QAC7CO,MAAOA,EACPe,eAAgBA,EAChBhD,SAAUA,SAQf,MAAM8K,EAA0BC,EAAAA,KAAWJ,GCrD3C,SAAStH,EAAT,GAQG,IARmB,QAC3B7B,EAD2B,wBAE3BC,EAF2B,SAG3BzB,EAH2B,QAI3B2B,EAJ2B,YAK3BC,EAL2B,SAM3BC,EAN2B,gBAO3BC,GACQ,EACR,MAAMJ,GAAUc,EAAAA,EAAAA,UACd,IACEV,EAAgBmC,KAAK8H,GAAD,iBACfA,EADe,CAElBtL,MAAOsL,EAAG5H,UAEd,CAACrC,IAEGkK,GAAiBxJ,EAAAA,EAAAA,UAAQ,IAAMd,EAAQwH,QAAQ6C,IAAQA,EAAGE,UAAS,CAACvK,IAE1E,OACE,SAAC,EAAAgB,OAAD,CACE9B,MAAOgB,EACP5B,SAAU,QAAC,MAAED,GAAH,SAAeC,EAASD,IAClCA,MAAO,IAAI2B,KAAYD,GAAyBkB,MAAMC,GAAMA,EAAE7C,QAAU4B,IACxED,QAAS,CACP,CACEjB,MAAO,qBACPiB,QAASD,GAEX,CACEhB,MAAO,eACPoC,UAAU,EACVnB,QAASsK,IAGblJ,YAAY,gBACZtB,QAASA,EACTK,SAAUA,EACV6E,kBAAgB,mBC9CtB,MAAM0D,EAAc,CAAE3J,MAAO,OAAQV,MAAOsK,EAAAA,GAAAA,MAQ/BC,EAAyC,IAA2C,UAA1C,MAAErI,EAAF,iBAAS8B,EAAT,SAA2B/D,GAAe,EAC/F,MAAM0B,EAAU6I,EAAWxG,GAC3B,OACE,SAACoM,EAAD,CACE1P,MAAM,iBACNU,QAAQ,oWAFV,UAIE,SAAC,EAAAqJ,iBAAD,CACExK,SAAWD,IACT,MAAM,UAAEmC,EAAF,WAAaC,EAAYC,iBAAkBC,GAAQJ,GACnD,iBAAEG,IAAqBK,EAAAA,EAAAA,IAAuBP,EAAWC,EAAYE,EAAKtC,GAChFC,EAAS,OAAD,UAAMiC,EAAN,CAAaK,aAAcvC,EAAOqC,iBAAAA,MAE5CrC,MAAK,UAAEkC,EAAMK,oBAAR,QAAwB+H,EAAAA,GAAAA,KAC7B3I,QAASA,OAMX6I,EAAcxG,IAClB,MAAM5B,EAAa4B,MAAAA,OAAH,EAAGA,EAAkB5B,WAC/BD,EAAY6B,MAAAA,OAAH,EAAGA,EAAkB7B,UAEpC,OAAOM,EAAAA,EAAAA,UAAQ,KACb,IAAKL,GAAcA,IAAesI,EAAAA,GAAAA,OAAoBvI,IAAcwI,EAAAA,GAAAA,aAClE,MAAO,CAACN,GAGV,MAAM1I,EAAU,CACd0I,EACA,CACE3J,MAAO,OACPV,MAAOsK,EAAAA,GAAAA,KACPb,YAAa,oEAIjB,OAAOrH,IAAesI,EAAAA,GAAAA,WAClB,IACK/I,EACH,CACEjB,MAAO,QACPV,MAAOsK,EAAAA,GAAAA,MACPb,YAAa,wEAGjB9H,IACH,CAACS,EAAYD,2LC7DX,MAAMuO,EAAc,GACdF,EAAc,GACdC,EAAoB,GACpB3P,EAAe,GAMfkR,GAJsBO,EAAAA,eAAAA,IACYA,EAAAA,eAAAA,IAGrB,CACxB,CACEnO,KAAM,OACNpE,MAAO,aACPwS,WAAY,CACV7H,EAAAA,GAAAA,MACAA,EAAAA,GAAAA,OACAA,EAAAA,GAAAA,MACAA,EAAAA,GAAAA,aACAA,EAAAA,GAAAA,OACAA,EAAAA,GAAAA,uBACAA,EAAAA,GAAAA,MAEF8H,YAAa,CAAC/H,EAAAA,GAAAA,QAEhB,CACEtG,KAAM,QACNpE,MAAO,cACPwS,WAAY,CAAC7H,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,OAAmBA,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,cACpE8H,YAAa,CAAC/H,EAAAA,GAAAA,WAAuBA,EAAAA,GAAAA,QAEvC,CACEtG,KAAM,OACNpE,MAAO,aACPwS,WAAY,CAAC7H,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,OAAmBA,EAAAA,GAAAA,OAClD8H,YAAa,CAAC/H,EAAAA,GAAAA,WAAuBA,EAAAA,GAAAA,QAEvC,CACEtG,KAAM,cACNpE,MAAO,oBACPwS,WAAY,CAAC7H,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,OAAmBA,EAAAA,GAAAA,OAClD8H,YAAa,CAAC/H,EAAAA,GAAAA,QAEhB,CACEtG,KAAM,aACNpE,MAAO,mBACPwS,WAAY,CACV7H,EAAAA,GAAAA,MACAA,EAAAA,GAAAA,OACAA,EAAAA,GAAAA,MACAA,EAAAA,GAAAA,aACAA,EAAAA,GAAAA,OACAA,EAAAA,GAAAA,uBACAA,EAAAA,GAAAA,MAEF8H,YAAa,CAAC/H,EAAAA,GAAAA,QAEhB,CACEtG,KAAM,MACNpE,MAAO,YACPwS,WAAY,CAAC7H,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,OAAmBA,EAAAA,GAAAA,OAClD8H,YAAa,CAAC/H,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,QAElC,CACEtG,KAAM,MACNpE,MAAO,YACPwS,WAAY,CAAC7H,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,OAAmBA,EAAAA,GAAAA,OAClD8H,YAAa,CAAC/H,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,QAElC,CACEtG,KAAM,OACNpE,MAAO,aACPwS,WAAY,CAAC7H,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,OAAmBA,EAAAA,GAAAA,OAClD8H,YAAa,CAAC/H,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,QAElC,CACEtG,KAAM,QACNpE,MAAO,cACPwS,WAAY,CAAC7H,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,OAAmBA,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,MACpE8H,YAAa,CAAC/H,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,QAElC,CACEtG,KAAM,MACNpE,MAAO,YACPwS,WAAY,CAAC7H,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,OAAmBA,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,cACpE8H,YAAa,CAAC/H,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,QAElC,CACEtG,KAAM,SACNpE,MAAO,eACPwS,WAAY,CAAC7H,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,OAAmBA,EAAAA,GAAAA,OAClD8H,YAAa,CAAC/H,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,QAElC,CACEtG,KAAM,aACNpE,MAAO,mBACPwS,WAAY,CAAC7H,EAAAA,GAAAA,MACb8H,YAAa,CAAC/H,EAAAA,GAAAA,QAEhB,CACEtG,KAAM,cACNpE,MAAO,oBACPwS,WAAY,CAAC7H,EAAAA,GAAAA,MACb8H,YAAa,CAAC/H,EAAAA,GAAAA,QAEhB,CACEtG,KAAM,gBACNpE,MAAO,sBACPwS,WAAY,CAAC7H,EAAAA,GAAAA,MACb8H,YAAa,CAAC/H,EAAAA,GAAAA,QAEhB,CACEtG,KAAM,gBACNpE,MAAO,sBACPwS,WAAY,CAAC7H,EAAAA,GAAAA,cACb8H,YAAa,CAAC/H,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,QAElC,CACEtG,KAAM,gBACNpE,MAAO,sBACPwS,WAAY,CAAC7H,EAAAA,GAAAA,cACb8H,YAAa,CAAC/H,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,QAElC,CACEtG,KAAM,gBACNpE,MAAO,sBACPwS,WAAY,CAAC7H,EAAAA,GAAAA,cACb8H,YAAa,CAAC/H,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,QAElC,CACEtG,KAAM,gBACNpE,MAAO,sBACPwS,WAAY,CAAC7H,EAAAA,GAAAA,cACb8H,YAAa,CAAC/H,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,QAElC,CACEtG,KAAM,iBACNpE,MAAO,uBACPwS,WAAY,CAAC7H,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,OAAmBA,EAAAA,GAAAA,OAClD8H,YAAa,CAAC/H,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,UAIvBgI,EAAe,CAC1B,CACEtO,KAAM,OACNpE,MAAO,cACPwS,WAAY,CACV7H,EAAAA,GAAAA,MACAA,EAAAA,GAAAA,OACAA,EAAAA,GAAAA,MACAA,EAAAA,GAAAA,aACAA,EAAAA,GAAAA,KACAA,EAAAA,GAAAA,QAEF8H,YAAa,CAAC/H,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,WAAuBA,EAAAA,GAAAA,0BAE3E,CACEtG,KAAM,OACNpE,MAAO,cACPwS,WAAY,CAAC7H,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,OAAmBA,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,cACpE8H,YAAa,CAAC/H,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,aAEpD,CACEtG,KAAM,MACNpE,MAAO,aACPwS,WAAY,CAAC7H,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,OAAmBA,EAAAA,GAAAA,OAClD8H,YAAa,CAAC/H,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,WAAuBA,EAAAA,GAAAA,0BAE3E,CACEtG,KAAM,MACNpE,MAAO,aACPwS,WAAY,CAAC7H,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,OAAmBA,EAAAA,GAAAA,OAClD8H,YAAa,CAAC/H,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,WAAuBA,EAAAA,GAAAA,0BAE3E,CACEtG,KAAM,MACNpE,MAAO,aACPwS,WAAY,CAAC7H,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,OAAmBA,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,cACpE8H,YAAa,CAAC/H,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,WAAuBA,EAAAA,GAAAA,0BAE3E,CACEtG,KAAM,YACNpE,MAAO,gBACPwS,WAAY,CAAC7H,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,OAAmBA,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,cACpE8H,YAAa,CAAC/H,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,WAAuBA,EAAAA,GAAAA,0BAE3E,CACEtG,KAAM,QACNpE,MAAO,eACPwS,WAAY,CACV7H,EAAAA,GAAAA,MACAA,EAAAA,GAAAA,OACAA,EAAAA,GAAAA,MACAA,EAAAA,GAAAA,aACAA,EAAAA,GAAAA,KACAA,EAAAA,GAAAA,QAEF8H,YAAa,CAAC/H,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,aAEpD,CACEtG,KAAM,aACNpE,MAAO,oBACPwS,WAAY,CAAC7H,EAAAA,GAAAA,MACb8H,YAAa,CAAC/H,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,QAElC,CACEtG,KAAM,cACNpE,MAAO,qBACPwS,WAAY,CAAC7H,EAAAA,GAAAA,MACb8H,YAAa,CAAC/H,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,QAElC,CACEtG,KAAM,kBACNpE,MAAO,uBACPwS,WAAY,CAAC7H,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,OAAmBA,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,cACpE8H,YAAa,CAAC/H,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,aAEpD,CACEtG,KAAM,kBACNpE,MAAO,uBACPwS,WAAY,CAAC7H,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,OAAmBA,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,cACpE8H,YAAa,CAAC/H,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,aAEpD,CACEtG,KAAM,kBACNpE,MAAO,uBACPwS,WAAY,CAAC7H,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,OAAmBA,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,cACpE8H,YAAa,CAAC/H,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,aAEpD,CACEtG,KAAM,iBACNpE,MAAO,uBACPwS,WAAY,CAAC7H,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,OAAmBA,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,cACpE8H,YAAa,CAAC/H,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,cAUzCjH,EAAoC,CAC/C,CAAEW,KAAM,eAAgBpE,MAAO,gBAC/B,CAAEoE,KAAM,mBAAoBpE,MAAO,mBAAoBkM,QAAQ,GAC/D,CAAE9H,KAAM,wBAAyBpE,MAAO,yBACxC,CAAEoE,KAAM,KAAMpE,MAAO,QACrB,CAAEoE,KAAM,KAAMpE,MAAO,SACrB,CAAEoE,KAAM,KAAMpE,MAAO,SACrB,CAAEoE,KAAM,MAAOpE,MAAO,SACtB,CAAEoE,KAAM,MAAOpE,MAAO,UACtB,CAAEoE,KAAM,KAAMpE,MAAO,UACrB,CAAEoE,KAAM,KAAMpE,MAAO,UACrB,CAAEoE,KAAM,KAAMpE,MAAO,WACrB,CAAEoE,KAAM,KAAMpE,MAAO,WACrB,CAAEoE,KAAM,KAAMpE,MAAO,YACrB,CAAEoE,KAAM,KAAMpE,MAAO,aAGVgC,EAAgC,CAC3C,CAAEoC,KAAM,OAAQpE,MAAO,QACvB,CAAEoE,KAAM,KAAMpE,MAAO,MACrB,CAAEoE,KAAM,KAAMpE,MAAO,MACrB,CAAEoE,KAAM,KAAMpE,MAAO,MACrB,CAAEoE,KAAM,MAAOpE,MAAO,OACtB,CAAEoE,KAAM,MAAOpE,MAAO,OACtB,CAAEoE,KAAM,KAAMpE,MAAO,MACrB,CAAEoE,KAAM,KAAMpE,MAAO,MACrB,CAAEoE,KAAM,KAAMpE,MAAO,MACrB,CAAEoE,KAAM,KAAMpE,MAAO,MACrB,CAAEoE,KAAM,KAAMpE,MAAO,MACrB,CAAEoE,KAAM,KAAMpE,MAAO,OAKVgO,EAAmC,CAC9C,CAAE5J,KAAM,KAAMpE,MAAO,MACrB,CAAEoE,KAAM,KAAMpE,MAAO,MACrB,CAAEoE,KAAM,KAAMpE,MAAO,MACrB,CAAEoE,KAAM,MAAOpE,MAAO,OACtB,CAAEoE,KAAM,MAAOpE,MAAO,OACtB,CAAEoE,KAAM,KAAMpE,MAAO,MACrB,CAAEoE,KAAM,KAAMpE,MAAO,MACrB,CAAEoE,KAAM,KAAMpE,MAAO,MACrB,CAAEoE,KAAM,MAAOpE,MAAO,OACtB,CAAEoE,KAAM,MAAOpE,MAAO,QAGX0E,EAAgB,CAC3B,uCACA,8BACA,gCACA,+BACA,wCACA,mCACA,sCACA,mDACA,mDACA,0CAGWyK,EAA8B,uBAE9BN,EAAY,CACvB,CAAEnO,MAAO,YAAaV,MAAO,qBAC7B,CAAEU,MAAO,iBAAkBV,MAAO,yBAClC,CAAEU,MAAO,6BAA8BV,MAAO,8BAC9C,CAAEU,MAAO,gBAAiBV,MAAOmP,IAGtBzB,EAAc,CACzB,CAAEhN,MAAO,UAAWV,MAAO6N,EAAAA,GAAAA,SAC3B,CAAEnN,MAAO,iCAAkCV,MAAO6N,EAAAA,GAAAA,iMCtT7C,MAAM8E,EAAwCtL,IACnD2C,EAAAA,EAAAA,QAAO3C,EAAmB,WAEfuL,EAA0B,CAACvL,EAAuCO,IAC7EP,EAAkB8B,QAAQC,GAAwBA,EAAExB,UAAYA,IAErDoB,EAAiB,CAC5B3B,EACAiB,EACAuK,EACAC,KAEA,MAAMC,EAAcH,EAAwBvL,EAAmByL,GAAiB5O,KAAKkF,IAAD,CAClFpJ,MAAOoJ,EAAEpC,KACTwF,KAAMpD,EAAEC,gBAEJ2J,EAAyBD,EAAYrN,MACxC0D,GAAuCA,EAAEpJ,QAAU6S,IAEhDI,EAAsBF,EAAYpJ,OAASoJ,EAAY,GAAG/S,MAAQ,GAExE,MAAO,CACL+S,YAAAA,EACAG,mBAHyBF,EAAyB1K,EAAa2K,IAOtDE,EAA8B,CACzCC,EACAhR,EACAG,KAEIA,GAAgBA,IAAiB+H,EAAAA,GAAAA,OACnClI,EAAasI,EAAAA,GAAAA,OAGP0I,EAEJpB,EAAAA,GAAAA,QAAmBP,IAE0C,IAAzDA,EAAEe,WAAWa,QAAQD,KACgC,IAArD3B,EAAEgB,YAAYY,QAAQjR,KAJ1B,IASO6B,EAAgC,CAAC9B,EAAuBC,IAC3DA,EAEJsQ,EAAAA,GAAAA,QAAqBjB,IACyB,IAArCA,EAAEe,WAAWa,QAAQlR,KAA4D,IAAvCsP,EAAEgB,YAAYY,QAAQjR,KAFzE,GAMOkR,EAAevK,MAC1B7F,EACAgQ,EACA3K,KAEA,MACMhE,QAAerB,EAAWqI,UAAU2H,EAD5B,uBACuD3K,GACrE,MAAO,IAAIjD,OAAOC,KAAKhB,MAAYG,EAAAA,KAGxBhC,EAAyB,WAKjC,IAJHP,EAIG,uDAJ6BwI,EAAAA,GAAAA,OAChCvI,EAGG,uDAH8BsI,EAAAA,GAAAA,MACjCrI,EAEG,uDAFoC8K,EAAAA,GAAAA,WACvC5K,EACG,uCACH,MAAMkG,GAA2B8K,EAAAA,EAAAA,kBAC3B/Q,EAAe2Q,EAA4BhR,EAAYC,EAAaG,GAAe2B,KAAKsP,GAAD,iBACxFA,EADwF,CAE3F9S,MAAO8S,EAAOpP,SAKhB,OAHK5B,EAAakD,MAAMd,GAAyBA,EAAE5E,QAAUyI,EAAYI,QAAQxG,OAC/EA,EAAmBG,EAAamH,OAAS,EAAInH,EAAa,GAAGxC,MAAQmN,EAAAA,GAAAA,YAEhE,CAAE3K,aAAAA,EAAcH,iBAAAA,IAGZoC,EAA0BD,IACrC,MAAMiP,EAASjP,EAASkP,QAAO,CAACC,EAAUC,KACxC,MAAMC,EAAMD,EAAKE,MAAM,KAAK5P,IAAI4F,EAAAA,WAC1BiK,GAAwB,IAAfF,EAAIlK,OAAekK,GAAMG,EAAAA,EAAAA,SAAQH,IAAMI,KAAK,KACrDT,EAAS,CACbxT,MAAO4T,EACPlT,MAAOkT,GAOT,OALID,EAAII,GACNJ,EAAII,GAAS,IAAIJ,EAAII,GAAQP,GAE7BG,EAAII,GAAS,CAACP,GAETG,IACN,IACH,OAAOrO,OAAO4O,QAAQT,GAAQvP,KAAI,QAAExD,EAAOiB,GAAT,QAAuB,CAAEjB,MAAAA,EAAOiB,QAAAA,EAASmB,UAAU,KAAS,KAGnFuC,EAAwBF,IACnCgP,EAAAA,EAAAA,OAAMhP,EAAa,GAAGjB,KAAI,QAAEuB,EAAKa,EAAUtG,EAAOuG,EAAY,OAApC,QAAgD,CACxEd,IAAAA,EACAa,SAAAA,EACAtG,MAAAA,EACAuG,UAAAA,MAGSnD,EAAuB,CAACH,EAAgCC,KAA0C,MAC7G,MAAM,iBAAEb,EAAF,gBAAoBkB,GAAoBN,EAC9C,IAAKM,IAAoBlB,EACvB,MAAO,GAGT,MAAM0P,EAAYC,EAAAA,GAAAA,MAAiBhG,GAAOA,EAAGhM,QAAUkD,EAAWuF,YAAYI,QAAQxG,KAChF4P,EAAUC,SAAS3O,EAAiB,IAE1C,MAAQ,GADI4O,EAAAA,UAAAA,aAAuBF,gBAC5B,UAAoBF,MAAAA,OAApB,EAAoBA,EAAW3N,YAA/B,QAAuC,4HCzHXmO,EAAAA,eAAAA,IACYA,EAAAA,eAAAA,IAG1C,IAAK6B,EAgDAvG,EAKAjC,EAKAtB,EAMAI,EAOAC,EAUAwC,YAjFAiH,GAAAA,EAAAA,SAAAA,WAAAA,EAAAA,SAAAA,WAAAA,EAAAA,eAAAA,iBAAAA,EAAAA,YAAAA,cAAAA,EAAAA,UAAAA,YAAAA,EAAAA,YAAAA,cAAAA,EAAAA,cAAAA,gBAAAA,EAAAA,aAAAA,eAAAA,EAAAA,SAAAA,WAAAA,EAAAA,iBAAAA,mBAAAA,EAAAA,UAAAA,YAAAA,EAAAA,YAAAA,cAAAA,EAAAA,IAAAA,OAAAA,IAAAA,EAAAA,cAgDAvG,GAAAA,EAAAA,QAAAA,UAAAA,EAAAA,IAAAA,OAAAA,IAAAA,EAAAA,cAKAjC,GAAAA,EAAAA,OAAAA,SAAAA,EAAAA,IAAAA,OAAAA,IAAAA,EAAAA,cAKAtB,GAAAA,EAAAA,KAAAA,OAAAA,EAAAA,KAAAA,OAAAA,EAAAA,MAAAA,SAAAA,IAAAA,EAAAA,cAMAI,GAAAA,EAAAA,wBAAAA,0BAAAA,EAAAA,MAAAA,QAAAA,EAAAA,MAAAA,QAAAA,EAAAA,WAAAA,cAAAA,IAAAA,EAAAA,cAOAC,GAAAA,EAAAA,uBAAAA,yBAAAA,EAAAA,KAAAA,OAAAA,EAAAA,MAAAA,QAAAA,EAAAA,OAAAA,SAAAA,EAAAA,OAAAA,SAAAA,EAAAA,aAAAA,eAAAA,EAAAA,MAAAA,SAAAA,IAAAA,EAAAA,cAUAwC,GAAAA,EAAAA,YAAAA,cAAAA,EAAAA,WAAAA,aAAAA,EAAAA,kBAAAA,oBAAAA,EAAAA,iBAAAA,mBAAAA,EAAAA,UAAAA,YAAAA,EAAAA,UAAAA,YAAAA,EAAAA,WAAAA,aAAAA,EAAAA,YAAAA,cAAAA,EAAAA,UAAAA,YAAAA,EAAAA,aAAAA,eAAAA,EAAAA,iBAAAA,mBAAAA,EAAAA,kBAAAA,oBAAAA,EAAAA,oBAAAA,sBAAAA,EAAAA,oBAAAA,sBAAAA,EAAAA,oBAAAA,sBAAAA,EAAAA,oBAAAA,sBAAAA,EAAAA,oBAAAA,sBAAAA,EAAAA,qBAAAA,uBAAAA,EAAAA,WAAAA,cAAAA,IAAAA,EAAAA,sBCzF2C,IAAI5M,EAAE,EAAQ,OAAiB8T,EAAE,EAAQ,MAAelQ,EAAE,EAAQ,OAASmQ,EAAE,EAAQ,OAAkF,IAAI1P,EAA5E,SAAWrE,GAAG,OAAOA,GAAG,iBAAiBA,GAAG,YAAYA,EAAEA,EAAE,CAACgU,QAAQhU,GAASiU,CAAErQ,GAAGsQ,EAAE,WAAW,OAAOA,EAAEnP,OAAOoP,QAAQ,SAASnU,GAAG,IAAI,IAAI8T,EAAElQ,EAAE,EAAEmQ,EAAEK,UAAUhL,OAAOxF,EAAEmQ,EAAEnQ,IAAI,IAAI,IAAIqQ,KAAKH,EAAEM,UAAUxQ,GAAGmB,OAAOsP,UAAU7O,eAAe8O,KAAKR,EAAEG,KAAKjU,EAAEiU,GAAGH,EAAEG,IAAI,OAAOjU,GAAGkU,EAAEK,MAAMvF,KAAKoF,YAc7V,SAASlD,EAAElR,EAAE8T,GAAG,IAAIlQ,EAAE,mBAAmB4Q,QAAQxU,EAAEwU,OAAOC,UAAU,IAAI7Q,EAAE,OAAO5D,EAAE,IAAI+T,EAAEE,EAAE5P,EAAET,EAAE0Q,KAAKtU,GAAGkU,EAAE,GAAG,IAAI,WAAM,IAASJ,GAAGA,KAAK,MAAMC,EAAE1P,EAAEqQ,QAAQC,MAAMT,EAAE5O,KAAKyO,EAAEtU,OAAO,MAAMO,GAAGiU,EAAE,CAACW,MAAM5U,GAAG,QAAQ,IAAI+T,IAAIA,EAAEY,OAAO/Q,EAAES,EAAEwQ,SAASjR,EAAE0Q,KAAKjQ,GAAG,QAAQ,GAAG4P,EAAE,MAAMA,EAAEW,OAAO,OAAOV,EAAE,IAAIY,EAA0K3O,EAAE,CAAC,cAAc,YAAY,eAAe,cAAc4O,EAAE,SAAS/U,GAAG,IAAI+T,EAAE/T,EAAEN,SAASuU,EAAE/C,EAAEtN,EAAE/D,WAAW,GAAGqU,EAAED,EAAE,GAAGa,EAAEb,EAAE,GAAGe,EAAE9D,EAAEtN,EAAE/D,SAAS,MAAM,GAAGoV,EAAED,EAAE,GAAGnM,EAAEmM,EAAE,GAAGE,EAAEpB,EAAEtM,YAAY2N,EAAEvR,EAAEwE,aAAY,SAAUpI,GAAG8U,EAAE,MAAMjM,GAAE,KAAM,CAACA,IAAI1C,EAAEvC,EAAEwE,aAAY,SAAUpI,GAAG6I,EAAE,MAAMiM,EAAE,QAAQ,CAACjM,IAAIkM,EAAEnR,EAAEwE,aAAY,SAAUpI,GAAG,GAAG,KAAKA,EAAEoV,OAAO,CAAC,IAAItB,OAAE,EAAO,IAAIA,EAAEuB,KAAKC,MAAMtV,GAAG,MAAMA,GAAG8U,EAAE,qBAAqB,IAAIlR,EAAE2R,EAAEzB,GAAGlQ,EAAE4R,QAAQzB,EAAE,CAAC0B,WAAW3B,EAAE4B,YAAYC,SAAS7B,EAAE8B,UAAUC,YAAY/B,EAAEgC,aAAaC,UAAUjC,EAAEkC,aAAalB,EAAElR,EAAEgR,UAAU,CAACE,EAAEf,IAAI,OAAO1P,EAAE2P,QAAQiC,cAAc5R,EAAE2P,QAAQkC,SAAS,KAAK7R,EAAE2P,QAAQiC,cAAcnC,EAAEqC,MAAM,CAAChW,MAAM,YAAYiW,QAAQC,QAAQnC,GAAGhL,YAAY+L,EAAE,wBAAwB,mCAAmCL,MAAMV,GAAG7P,EAAE2P,QAAQiC,cAAc5R,EAAE2P,QAAQkC,SAAS,MAAK,IAAKjB,GAAG5Q,EAAE2P,QAAQiC,cAAc,MAAM,CAAC,cAAv8B,2BAAw9B5R,EAAE2P,QAAQiC,cAAcnC,EAAEwC,aAAa,CAAClV,QAAQ,CAACmV,UAAS,EAAGC,OAAO,oBAAoBC,OAAO,aAAaC,OAAO,SAAS1W,GAAG+U,EAAE/U,GAAG6I,GAAE,KAAMxE,EAAE2P,QAAQiC,cAAc,IAAI,CAACU,MAAM,CAACC,OAAO,EAAEC,SAAS,GAAG3B,EAAE4B,WAAWC,GAAGF,SAASG,UAAU,WAAW,gCAAgC3S,EAAE2P,QAAQiC,cAAc,KAAK,MAAM5R,EAAE2P,QAAQiC,cAAc,KAAK,MAAM5R,EAAE2P,QAAQiC,cAAcnC,EAAEmD,WAAW,CAACC,KAAK,WAAW,4BAA4BjC,GAAG5Q,EAAE2P,QAAQiC,cAAcnC,EAAE9H,SAAS,CAAC,cAA94C,0BAA85CmL,WAAU,EAAGf,QAAQC,QAAQnC,GAAG1R,YAAY,8BAA8B2J,OAAO,SAASnM,GAAG,OAAO+U,EAAE/U,EAAEgB,cAAcvB,QAAQyM,KAAK,QAAQ+I,GAAG5Q,EAAE2P,QAAQiC,cAAcnC,EAAEqC,MAAM,KAAK9R,EAAE2P,QAAQiC,cAAcnC,EAAElE,OAAO,CAAC,cAAvlD,mBAAumDnJ,KAAK,SAASyQ,KAAK,UAAUP,MAAM,CAACS,MAAM,GAAGlC,EAAEtL,OAAOyN,QAAQxT,MAAM2C,QAAQ2O,GAAG,oBAAoBF,GAAGf,GAAG7P,EAAE2P,QAAQiC,cAAcnC,EAAEqC,MAAM,KAAK9R,EAAE2P,QAAQiC,cAAcnC,EAAElE,OAAO,CAACnJ,KAAK,SAASyQ,KAAK,UAAUP,MAAM,CAACS,MAAM,GAAGlC,EAAEtL,OAAOyN,QAAQxT,MAAM2C,QAAQL,GAAG,uBAAuBoP,EAAE,SAASvV,GAAG,IAAI+T,EAAEuD,SAAStX,GAAG,MAAM,CAACwV,SAAQ,EAAGZ,MAAM,qBAAqB,IAAId,EAAE3N,EAAEyC,QAAO,SAAUkL,GAAG,OAAO9T,EAAE8T,MAAM,OAAOA,EAAE1K,OAAO,EAAE,CAACoM,SAAQ,EAAGZ,MAAM,iBAAiBd,EAAEJ,KAAK,OAAO,CAAC8B,SAAQ,IAAK+B,EAAE,SAASvX,GAAG,IAAI4D,EAAE5D,EAAEoB,QAAQ2S,EAAE/T,EAAEwX,QAAQvD,EAAEjU,EAAEN,SAAS,OAAO2E,EAAE2P,QAAQiC,cAAc,MAAM,CAAC,cAAznE,YAA0oE5R,EAAE2P,QAAQiC,cAAcnC,EAAEqC,MAAM,CAAChW,MAAM,cAAckE,EAAE2P,QAAQiC,cAAcnC,EAAE1T,MAAM,CAACC,GAAG,iBAAiBC,MAAM,GAAGb,MAAMmE,EAAE6T,gBAAgB,GAAG/X,SAASuU,EAAE,qBAAqB5P,EAAE2P,QAAQiC,cAAcnC,EAAEqC,MAAM,CAAChW,MAAM,gBAAgBkE,EAAE2P,QAAQiC,cAAcnC,EAAE1T,MAAM,CAACE,MAAM,GAAGD,GAAG,cAAcZ,MAAMmE,EAAEiS,aAAa,GAAGnW,SAASuU,EAAE,kBAAkB5P,EAAE2P,QAAQiC,cAAcnC,EAAEqC,MAAM,CAAChW,MAAM,aAAakE,EAAE2P,QAAQiC,cAAcnC,EAAE1T,MAAM,CAACE,MAAM,GAAGD,GAAG,WAAWZ,MAAMmE,EAAE+R,UAAU,GAAGjW,SAASuU,EAAE,eAAe5P,EAAE2P,QAAQiC,cAAcnC,EAAEqC,MAAM,CAAChW,MAAM,cAAcoB,UAAS,GAAI8C,EAAE2P,QAAQiC,cAAcnC,EAAE1T,MAAM,CAACE,MAAM,GAAGD,GAAG,aAAaqX,UAAS,EAAGlV,YAAY,yBAAyBmV,WAAWtT,EAAE2P,QAAQiC,cAAcnC,EAAE8D,QAAQ,CAACC,QAAQ,8DAA8DxT,EAAE2P,QAAQiC,cAAcnC,EAAElE,OAAO,CAAC,cAAl9F,mBAAk+FtJ,KAAK,OAAOiH,KAAK,KAAK/G,QAAQ,WAAW,OAAOuN,EAAE,OAAOmD,KAAK,WAAW,qBAAqBY,EAAQ9F,oBAAe,GAAQ8C,EAAEgD,EAAQ9F,iBAAiB8F,EAAQ9F,eAAe,KAAK+F,IAAI,MAAMjD,EAAEkD,IAAI,MAAM,IAAIC,EAAE,CAAC,CAAC9X,MAAM,kBAAkBV,MAAMqY,EAAQ9F,eAAe+F,IAAIG,UAA3sG,cAAwtG,CAAC/X,MAAM,8BAA8BV,MAAMqY,EAAQ9F,eAAegG,IAAIE,UAA/wG,eAA6xGJ,EAAQK,iBAAiB,SAASvU,GAAG,IAAImQ,EAAEnQ,EAAExC,QAAQ6S,EAAErQ,EAAEwU,gBAAgBlH,EAAE6C,EAAEsE,SAASvD,EAAEf,EAAEuE,iBAAiBC,EAAExE,EAAEyE,eAAetH,EAAEuH,qBAAqBvH,EAAEuH,mBAAmBX,EAAQ9F,eAAe+F,KAAK,IAAI9G,EAAEC,EAAEuH,qBAAqBX,EAAQ9F,eAAe+F,UAAK,IAAS7G,EAAEuH,mBAAmBnW,EAAE+T,QAAQvB,GAAGA,EAAEW,YAAYvE,EAAE2E,aAAa3E,EAAEuG,gBAAgBvG,EAAEyE,UAAU,OAAOtR,EAAE2P,QAAQiC,cAAc5R,EAAE2P,QAAQkC,SAAS,KAAK7R,EAAE2P,QAAQiC,cAAcnC,EAAE4E,SAAS,CAACvY,MAAM,kBAAkBkE,EAAE2P,QAAQiC,cAAcnC,EAAEqC,MAAM,CAAChW,MAAM,uBAAuBkE,EAAE2P,QAAQiC,cAAcnC,EAAE5J,iBAAiB,CAAC9I,QAAQ6W,EAAExY,MAAMyR,EAAEuH,oBAAoBX,EAAQ9F,eAAe+F,IAAIrY,SAAS,SAASM,GAAGiU,EAAEC,EAAEA,EAAE,GAAGH,GAAG,CAACsE,SAASnE,EAAEA,EAAE,GAAGH,EAAEsE,UAAU,CAACI,mBAAmBzY,YAAYiR,GAAG5M,EAAE2P,QAAQiC,cAAcnC,EAAE4E,SAAS,CAACvY,MAAM,mBAAmBmC,EAAE+B,EAAE2P,QAAQiC,cAAcsB,EAAE,CAACnW,QAAQ2S,EAAEsE,SAASb,QAAQ,SAASxX,GAAG,IAAI8T,EAAEI,EAAE,GAAGqE,GAAG3U,EAAE5D,EAAEkU,EAAEA,EAAE,GAAGH,EAAEsE,UAAUrY,GAAGkU,EAAE,GAAGH,EAAEsE,iBAAiBzU,EAAEiS,mBAAmBjS,EAAE6T,sBAAsB7T,EAAE+R,gBAAgB7B,EAAE2B,WAAWxB,EAAEC,EAAEA,EAAE,GAAGH,GAAG,CAACyE,eAAe1E,EAAEuE,SAASzU,MAAMlE,SAAS,SAASoU,GAAG,OAAO9T,EAAE2Y,iCAAiC/U,EAAEkQ,MAAMzP,EAAE2P,QAAQiC,cAAclB,EAAE,CAACrV,SAAS,SAASM,GAAGiU,EAAEC,EAAEA,EAAE,GAAGH,GAAG,CAACuE,iBAAiBpE,EAAEA,EAAE,GAAGY,GAAG,CAACW,YAAW,IAAK+C,eAAetE,EAAEA,EAAE,GAAGqE,GAAG,CAAC9C,WAAWzV,EAAEyV,aAAa4C,SAASnE,EAAEA,EAAE,GAAGhD,GAAG,CAAC2E,YAAY7V,EAAE6V,YAAY4B,eAAezX,EAAE+V,UAAUJ,SAAS3V,EAAE2V,iBAAiB,KAAKtR,EAAE2P,QAAQiC,cAAc,MAAM,CAACjN,UAAU,mBAAmB2N,MAAM,CAACiC,UAAU,QAAQ,cAAv3J,0BAAw4JvU,EAAE2P,QAAQiC,cAAc,IAAI,KAAK,0FAA0F,IAAI5R,EAAE2P,QAAQiC,cAAc,IAAI,CAACjN,UAAU,gBAAgB/I,OAAO,SAAS4Y,IAAI,sBAAsBC,KAAK,sGAAsG,4BAA4B7H,GAAG5M,EAAE2P,QAAQiC,cAAcnC,EAAEiF,MAAM,CAACC,MAAM,GAAGC,SAAS,QAAQ,8FCX5pLC,EAAOpB,QAAU,EAAjB","sources":["webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/Experimental/AliasBy.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/Experimental/GraphPeriod.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/Experimental/AlignmentFunction.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/Experimental/Alignment.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/Experimental/Aggregation.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/Experimental/GroupBy.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/Experimental/LabelFilter.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/Experimental/Metrics.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/Experimental/Preprocessor.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/Experimental/VisualMetricQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/Experimental/MetricQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/Experimental/PeriodSelect.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/Experimental/Project.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/MQLQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/GraphPeriod.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/MetricQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/Experimental/QueryHeader.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/Experimental/LookbackPeriodSelect.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/Experimental/SLO.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/Experimental/Selector.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/Experimental/Service.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/Experimental/SLOQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/QueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/SLO/LookbackPeriodSelect.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/SLO/Service.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/SLO/SLO.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/SLO/Selector.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/SLO/SLOQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/Project.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/Metrics.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/GroupBy.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/Alignment.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/LabelFilter.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/AnnotationsHelp.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/AlignmentFunction.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/AlignmentPeriodLabel.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/AliasBy.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/Aggregation.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/Fields.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/VisualMetricQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/PeriodSelect.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/Preprocessor.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/constants.ts","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/functions.ts","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/types.ts","webpack://grafana/../../opt/drone/yarncache/@grafana-google-sdk-npm-0.0.3-c91663433f-9eb5e043e0.zip/node_modules/@grafana/google-sdk/dist/index.production.js","webpack://grafana/../../opt/drone/yarncache/@grafana-google-sdk-npm-0.0.3-c91663433f-9eb5e043e0.zip/node_modules/@grafana/google-sdk/index.js"],"sourcesContent":["import { debounce } from 'lodash';\nimport React, { FunctionComponent, useState } from 'react';\n\nimport { EditorField } from '@grafana/experimental';\nimport { Input } from '@grafana/ui';\n\nimport { SELECT_WIDTH } from '../../constants';\n\nexport interface Props {\n  refId: string;\n  onChange: (alias: any) => void;\n  value?: string;\n}\n\nexport const AliasBy: FunctionComponent<Props> = ({ refId, value = '', onChange }) => {\n  const [alias, setAlias] = useState(value ?? '');\n\n  const propagateOnChange = debounce(onChange, 1000);\n\n  onChange = (e: any) => {\n    setAlias(e.target.value);\n    propagateOnChange(e.target.value);\n  };\n\n  return (\n    <EditorField label=\"Alias by\">\n      <Input id={`${refId}-alias-by`} width={SELECT_WIDTH} value={alias} onChange={onChange} />\n    </EditorField>\n  );\n};\n","import React, { FunctionComponent } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField, EditorRow } from '@grafana/experimental';\nimport { HorizontalGroup, Switch } from '@grafana/ui';\n\nimport { GRAPH_PERIODS, SELECT_WIDTH } from '../../constants';\nimport { PeriodSelect } from '../index';\n\nexport interface Props {\n  refId: string;\n  onChange: (period: string) => void;\n  variableOptionGroup: SelectableValue<string>;\n  graphPeriod?: string;\n}\n\nexport const GraphPeriod: FunctionComponent<Props> = ({ refId, onChange, graphPeriod, variableOptionGroup }) => {\n  return (\n    <EditorRow>\n      <EditorField\n        label=\"Graph period\"\n        htmlFor={`${refId}-graph-period`}\n        tooltip={\n          <>\n            Set <code>graph_period</code> which forces a preferred period between points. Automatically set to the\n            current interval if left blank.\n          </>\n        }\n      >\n        <HorizontalGroup>\n          <Switch\n            data-testid={`${refId}-switch-graph-period`}\n            value={graphPeriod !== 'disabled'}\n            onChange={(e) => onChange(e.currentTarget.checked ? '' : 'disabled')}\n          />\n          <PeriodSelect\n            inputId={`${refId}-graph-period`}\n            templateVariableOptions={variableOptionGroup.options}\n            current={graphPeriod}\n            onChange={onChange}\n            selectWidth={SELECT_WIDTH}\n            disabled={graphPeriod === 'disabled'}\n            aligmentPeriods={GRAPH_PERIODS}\n          />\n        </HorizontalGroup>\n      </EditorField>\n    </EditorRow>\n  );\n};\n","import React, { FC, useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport { getAlignmentPickerData } from '../../functions';\nimport { MetricQuery } from '../../types';\n\nexport interface Props {\n  inputId: string;\n  onChange: (query: MetricQuery) => void;\n  query: MetricQuery;\n  templateVariableOptions: Array<SelectableValue<string>>;\n}\n\nexport const AlignmentFunction: FC<Props> = ({ inputId, query, templateVariableOptions, onChange }) => {\n  const { valueType, metricKind, perSeriesAligner: psa, preprocessor } = query;\n  const { perSeriesAligner, alignOptions } = useMemo(\n    () => getAlignmentPickerData(valueType, metricKind, psa, preprocessor),\n    [valueType, metricKind, psa, preprocessor]\n  );\n\n  return (\n    <Select\n      onChange={({ value }) => onChange({ ...query, perSeriesAligner: value! })}\n      value={[...alignOptions, ...templateVariableOptions].find((s) => s.value === perSeriesAligner)}\n      options={[\n        {\n          label: 'Template Variables',\n          options: templateVariableOptions,\n        },\n        {\n          label: 'Alignment options',\n          expanded: true,\n          options: alignOptions,\n        },\n      ]}\n      placeholder=\"Select Alignment\"\n      inputId={inputId}\n    />\n  );\n};\n","import React, { FC, useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField, EditorFieldGroup } from '@grafana/experimental';\n\nimport { ALIGNMENT_PERIODS } from '../../constants';\nimport CloudMonitoringDatasource from '../../datasource';\nimport { alignmentPeriodLabel } from '../../functions';\nimport { CustomMetaData, MetricQuery, SLOQuery } from '../../types';\n\nimport { AlignmentFunction } from './AlignmentFunction';\nimport { PeriodSelect } from './PeriodSelect';\n\nexport interface Props {\n  refId: string;\n  onChange: (query: MetricQuery | SLOQuery) => void;\n  query: MetricQuery;\n  templateVariableOptions: Array<SelectableValue<string>>;\n  customMetaData: CustomMetaData;\n  datasource: CloudMonitoringDatasource;\n}\n\nexport const Alignment: FC<Props> = ({\n  refId,\n  templateVariableOptions,\n  onChange,\n  query,\n  customMetaData,\n  datasource,\n}) => {\n  const alignmentLabel = useMemo(() => alignmentPeriodLabel(customMetaData, datasource), [customMetaData, datasource]);\n  return (\n    <EditorFieldGroup>\n      <EditorField\n        label=\"Alignment function\"\n        tooltip=\"The process of alignment consists of collecting all data points received in a fixed length of time, applying a function to combine those data points, and assigning a timestamp to the result.\"\n      >\n        <AlignmentFunction\n          inputId={`${refId}-alignment-function`}\n          templateVariableOptions={templateVariableOptions}\n          query={query}\n          onChange={onChange}\n        />\n      </EditorField>\n      <EditorField label=\"Alignment period\" tooltip={alignmentLabel}>\n        <PeriodSelect\n          inputId={`${refId}-alignment-period`}\n          templateVariableOptions={templateVariableOptions}\n          current={query.alignmentPeriod}\n          onChange={(period) => onChange({ ...query, alignmentPeriod: period })}\n          aligmentPeriods={ALIGNMENT_PERIODS}\n        />\n      </EditorField>\n    </EditorFieldGroup>\n  );\n};\n","import React, { FC, useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField } from '@grafana/experimental';\nimport { Select } from '@grafana/ui';\n\nimport { getAggregationOptionsByMetric } from '../../functions';\nimport { MetricDescriptor, MetricKind, ValueTypes } from '../../types';\n\nexport interface Props {\n  refId: string;\n  onChange: (metricDescriptor: string) => void;\n  metricDescriptor?: MetricDescriptor;\n  crossSeriesReducer: string;\n  groupBys: string[];\n  templateVariableOptions: Array<SelectableValue<string>>;\n}\n\nexport const Aggregation: FC<Props> = (props) => {\n  const aggOptions = useAggregationOptionsByMetric(props);\n  const selected = useSelectedFromOptions(aggOptions, props);\n\n  return (\n    <EditorField label=\"Group by function\" data-testid=\"cloud-monitoring-aggregation\">\n      <Select\n        width=\"auto\"\n        onChange={({ value }) => props.onChange(value!)}\n        value={selected}\n        options={[\n          {\n            label: 'Template Variables',\n            options: props.templateVariableOptions,\n          },\n          {\n            label: 'Aggregations',\n            expanded: true,\n            options: aggOptions,\n          },\n        ]}\n        placeholder=\"Select Reducer\"\n        inputId={`${props.refId}-group-by-function`}\n      />\n    </EditorField>\n  );\n};\n\nconst useAggregationOptionsByMetric = ({ metricDescriptor }: Props): Array<SelectableValue<string>> => {\n  const valueType = metricDescriptor?.valueType;\n  const metricKind = metricDescriptor?.metricKind;\n\n  return useMemo(() => {\n    if (!valueType || !metricKind) {\n      return [];\n    }\n\n    return getAggregationOptionsByMetric(valueType as ValueTypes, metricKind as MetricKind).map((a) => ({\n      ...a,\n      label: a.text,\n    }));\n  }, [valueType, metricKind]);\n};\n\nconst useSelectedFromOptions = (aggOptions: Array<SelectableValue<string>>, props: Props) => {\n  return useMemo(() => {\n    const allOptions = [...aggOptions, ...props.templateVariableOptions];\n    return allOptions.find((s) => s.value === props.crossSeriesReducer);\n  }, [aggOptions, props.crossSeriesReducer, props.templateVariableOptions]);\n};\n","import React, { FunctionComponent, useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField, EditorFieldGroup } from '@grafana/experimental';\nimport { MultiSelect } from '@grafana/ui';\n\nimport { SYSTEM_LABELS } from '../../constants';\nimport { labelsToGroupedOptions } from '../../functions';\nimport { MetricDescriptor, MetricQuery } from '../../types';\n\nimport { Aggregation } from './Aggregation';\n\nexport interface Props {\n  refId: string;\n  variableOptionGroup: SelectableValue<string>;\n  labels: string[];\n  metricDescriptor?: MetricDescriptor;\n  onChange: (query: MetricQuery) => void;\n  query: MetricQuery;\n}\n\nexport const GroupBy: FunctionComponent<Props> = ({\n  refId,\n  labels: groupBys = [],\n  query,\n  onChange,\n  variableOptionGroup,\n  metricDescriptor,\n}) => {\n  const options = useMemo(\n    () => [variableOptionGroup, ...labelsToGroupedOptions([...groupBys, ...SYSTEM_LABELS])],\n    [groupBys, variableOptionGroup]\n  );\n\n  return (\n    <EditorFieldGroup>\n      <EditorField\n        label=\"Group by\"\n        tooltip=\"You can reduce the amount of data returned for a metric by combining different time series. To combine multiple time series, you can specify a grouping and a function. Grouping is done on the basis of labels. The grouping function is used to combine the time series in the group into a single time series.\"\n      >\n        <MultiSelect\n          inputId={`${refId}-group-by`}\n          width=\"auto\"\n          placeholder=\"Choose label\"\n          options={options}\n          value={query.groupBys ?? []}\n          onChange={(options) => {\n            onChange({ ...query, groupBys: options.map((o) => o.value!) });\n          }}\n        />\n      </EditorField>\n      <Aggregation\n        metricDescriptor={metricDescriptor}\n        templateVariableOptions={variableOptionGroup.options}\n        crossSeriesReducer={query.crossSeriesReducer}\n        groupBys={query.groupBys ?? []}\n        onChange={(crossSeriesReducer) => onChange({ ...query, crossSeriesReducer })}\n        refId={refId}\n      />\n    </EditorFieldGroup>\n  );\n};\n","import React, { FunctionComponent, useMemo } from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { AccessoryButton, EditorRow, EditorField, EditorList } from '@grafana/experimental';\nimport { HorizontalGroup, Select } from '@grafana/ui';\n\nimport { labelsToGroupedOptions, stringArrayToFilters } from '../../functions';\n\nexport interface Props {\n  labels: { [key: string]: string[] };\n  filters: string[];\n  onChange: (filters: string[]) => void;\n  variableOptionGroup: SelectableValue<string>;\n}\n\ninterface Filter {\n  key: string;\n  operator: string;\n  value: string;\n  condition: string;\n}\n\nconst DEFAULT_OPERATOR = '=';\nconst DEFAULT_CONDITION = 'AND';\n\nconst filtersToStringArray = (filters: Filter[]) =>\n  filters.flatMap(({ key, operator, value, condition }) => [key, operator, value, condition]).slice(0, -1);\n\nconst operators = ['=', '!=', '=~', '!=~'].map(toOption);\n\nexport const LabelFilter: FunctionComponent<Props> = ({\n  labels = {},\n  filters: filterArray,\n  onChange: _onChange,\n  variableOptionGroup,\n}) => {\n  const filters: Filter[] = useMemo(() => stringArrayToFilters(filterArray), [filterArray]);\n  const options = useMemo(\n    () => [variableOptionGroup, ...labelsToGroupedOptions(Object.keys(labels))],\n    [labels, variableOptionGroup]\n  );\n\n  const getOptions = ({ key = '', value = '' }: Partial<Filter>) => {\n    // Add the current key and value as options if they are manually entered\n    const keyPresent = options.some((op) => {\n      if (op.options) {\n        return options.some((opp) => opp.label === key);\n      }\n      return op.label === key;\n    });\n    if (!keyPresent) {\n      options.push({ label: key, value: key });\n    }\n\n    const valueOptions = labels.hasOwnProperty(key)\n      ? [variableOptionGroup, ...labels[key].map(toOption)]\n      : [variableOptionGroup];\n    const valuePresent = valueOptions.some((op) => op.label === value);\n    if (!valuePresent) {\n      valueOptions.push({ label: value, value });\n    }\n\n    return { options, valueOptions };\n  };\n\n  const onChange = (items: Array<Partial<Filter>>) => {\n    const filters = items.map(({ key, operator, value, condition }) => ({\n      key: key || '',\n      operator: operator || DEFAULT_OPERATOR,\n      value: value || '',\n      condition: condition || DEFAULT_CONDITION,\n    }));\n    _onChange(filtersToStringArray(filters));\n  };\n\n  const renderItem = (item: Partial<Filter>, onChangeItem: (item: Filter) => void, onDeleteItem: () => void) => {\n    const { key = '', operator = DEFAULT_OPERATOR, value = '', condition = DEFAULT_CONDITION } = item;\n    const { options, valueOptions } = getOptions(item);\n\n    return (\n      <HorizontalGroup spacing=\"xs\" width=\"auto\">\n        <Select\n          aria-label=\"Filter label key\"\n          formatCreateLabel={(v) => `Use label key: ${v}`}\n          allowCustomValue\n          value={key}\n          options={options}\n          onChange={({ value: key = '' }) => onChangeItem({ key, operator, value, condition })}\n        />\n        <Select\n          value={operator}\n          options={operators}\n          onChange={({ value: operator = DEFAULT_OPERATOR }) => onChangeItem({ key, operator, value, condition })}\n        />\n        <Select\n          aria-label=\"Filter label value\"\n          placeholder=\"add filter value\"\n          formatCreateLabel={(v) => `Use label value: ${v}`}\n          allowCustomValue\n          value={value}\n          options={valueOptions}\n          onChange={({ value = '' }) => onChangeItem({ key, operator, value, condition })}\n        />\n        <AccessoryButton aria-label=\"Remove\" icon=\"times\" variant=\"secondary\" onClick={onDeleteItem} type=\"button\" />\n      </HorizontalGroup>\n    );\n  };\n\n  return (\n    <EditorRow>\n      <EditorField\n        label=\"Filter\"\n        tooltip=\"To reduce the amount of data charted, apply a filter. A filter has three components: a label, a comparison, and a value. The comparison can be an equality, inequality, or regular expression.\"\n      >\n        <EditorList items={filters} renderItem={renderItem} onChange={onChange} />\n      </EditorField>\n    </EditorRow>\n  );\n};\n","import { css } from '@emotion/css';\nimport { startCase, uniqBy } from 'lodash';\nimport React, { useCallback, useEffect, useState } from 'react';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { EditorRow, EditorField, EditorFieldGroup } from '@grafana/experimental';\nimport { getSelectStyles, Select, useStyles2, useTheme2 } from '@grafana/ui';\n\nimport CloudMonitoringDatasource from '../../datasource';\nimport { MetricDescriptor, MetricQuery } from '../../types';\n\nimport { Project } from './Project';\n\nexport interface Props {\n  refId: string;\n  onChange: (metricDescriptor: MetricDescriptor) => void;\n  templateVariableOptions: Array<SelectableValue<string>>;\n  datasource: CloudMonitoringDatasource;\n  projectName: string;\n  metricType: string;\n  query: MetricQuery;\n  children: (metricDescriptor?: MetricDescriptor) => JSX.Element;\n  onProjectChange: (query: MetricQuery) => void;\n}\n\nexport function Metrics(props: Props) {\n  const [metricDescriptors, setMetricDescriptors] = useState<MetricDescriptor[]>([]);\n  const [metricDescriptor, setMetricDescriptor] = useState<MetricDescriptor>();\n  const [metrics, setMetrics] = useState<Array<SelectableValue<string>>>([]);\n  const [services, setServices] = useState<Array<SelectableValue<string>>>([]);\n  const [service, setService] = useState<string>('');\n\n  const theme = useTheme2();\n  const selectStyles = getSelectStyles(theme);\n\n  const customStyle = useStyles2(getStyles);\n\n  const {\n    onProjectChange,\n    query,\n    refId,\n    metricType,\n    templateVariableOptions,\n    projectName,\n    datasource,\n    onChange,\n    children,\n  } = props;\n  const { templateSrv } = datasource;\n\n  const getSelectedMetricDescriptor = useCallback(\n    (metricDescriptors: MetricDescriptor[], metricType: string) => {\n      return metricDescriptors.find((md) => md.type === templateSrv.replace(metricType))!;\n    },\n    [templateSrv]\n  );\n\n  useEffect(() => {\n    const getMetricsList = (metricDescriptors: MetricDescriptor[]) => {\n      const selectedMetricDescriptor = getSelectedMetricDescriptor(metricDescriptors, metricType);\n      if (!selectedMetricDescriptor) {\n        return [];\n      }\n\n      const metricsByService = metricDescriptors\n        .filter((m) => m.service === selectedMetricDescriptor.service)\n        .map((m) => ({\n          service: m.service,\n          value: m.type,\n          label: m.displayName,\n          component: function optionComponent() {\n            return (\n              <div>\n                <div className={customStyle}>{m.type}</div>\n                <div className={selectStyles.optionDescription}>{m.description}</div>\n              </div>\n            );\n          },\n        }));\n      return metricsByService;\n    };\n\n    const loadMetricDescriptors = async () => {\n      if (projectName) {\n        const metricDescriptors = await datasource.getMetricTypes(projectName);\n        const services = getServicesList(metricDescriptors);\n        const metrics = getMetricsList(metricDescriptors);\n        const service = metrics.length > 0 ? metrics[0].service : '';\n        const metricDescriptor = getSelectedMetricDescriptor(metricDescriptors, metricType);\n        setMetricDescriptors(metricDescriptors);\n        setServices(services);\n        setMetrics(metrics);\n        setService(service);\n        setMetricDescriptor(metricDescriptor);\n      }\n    };\n    loadMetricDescriptors();\n  }, [datasource, getSelectedMetricDescriptor, metricType, projectName, customStyle, selectStyles.optionDescription]);\n\n  const onServiceChange = ({ value: service }: any) => {\n    const metrics = metricDescriptors\n      .filter((m: MetricDescriptor) => m.service === templateSrv.replace(service))\n      .map((m: MetricDescriptor) => ({\n        service: m.service,\n        value: m.type,\n        label: m.displayName,\n        description: m.description,\n      }));\n\n    if (metrics.length > 0 && !metrics.some((m) => m.value === templateSrv.replace(metricType))) {\n      onMetricTypeChange(metrics[0]);\n      setService(service);\n      setMetrics(metrics);\n    } else {\n      setService(service);\n      setMetrics(metrics);\n    }\n  };\n\n  const onMetricTypeChange = ({ value }: SelectableValue<string>) => {\n    const metricDescriptor = getSelectedMetricDescriptor(metricDescriptors, value!);\n    setMetricDescriptor(metricDescriptor);\n    onChange({ ...metricDescriptor, type: value! });\n  };\n\n  const getServicesList = (metricDescriptors: MetricDescriptor[]) => {\n    const services = metricDescriptors.map((m) => ({\n      value: m.service,\n      label: startCase(m.serviceShortName),\n    }));\n\n    return services.length > 0 ? uniqBy(services, (s) => s.value) : [];\n  };\n\n  return (\n    <>\n      <EditorRow>\n        <EditorFieldGroup>\n          <Project\n            refId={refId}\n            templateVariableOptions={templateVariableOptions}\n            projectName={projectName}\n            datasource={datasource}\n            onChange={(projectName) => {\n              onProjectChange({ ...query, projectName });\n            }}\n          />\n\n          <EditorField label=\"Service\" width=\"auto\">\n            <Select\n              width=\"auto\"\n              onChange={onServiceChange}\n              value={[...services, ...templateVariableOptions].find((s) => s.value === service)}\n              options={[\n                {\n                  label: 'Template Variables',\n                  options: templateVariableOptions,\n                },\n                ...services,\n              ]}\n              placeholder=\"Select Services\"\n              inputId={`${props.refId}-service`}\n            />\n          </EditorField>\n          <EditorField label=\"Metric name\" width=\"auto\">\n            <Select\n              width=\"auto\"\n              onChange={onMetricTypeChange}\n              value={[...metrics, ...templateVariableOptions].find((s) => s.value === metricType)}\n              options={[\n                {\n                  label: 'Template Variables',\n                  options: templateVariableOptions,\n                },\n                ...metrics,\n              ]}\n              placeholder=\"Select Metric\"\n              inputId={`${props.refId}-select-metric`}\n            />\n          </EditorField>\n        </EditorFieldGroup>\n      </EditorRow>\n\n      {children(metricDescriptor)}\n    </>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => css`\n  label: grafana-select-option-description;\n  font-weight: normal;\n  font-style: italic;\n  color: ${theme.colors.text.secondary};\n`;\n","import React, { FunctionComponent, useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField } from '@grafana/experimental';\nimport { RadioButtonGroup } from '@grafana/ui';\n\nimport { getAlignmentPickerData } from '../../functions';\nimport { MetricDescriptor, MetricKind, MetricQuery, PreprocessorType, ValueTypes } from '../../types';\n\nconst NONE_OPTION = { label: 'None', value: PreprocessorType.None };\n\nexport interface Props {\n  metricDescriptor?: MetricDescriptor;\n  onChange: (query: MetricQuery) => void;\n  query: MetricQuery;\n}\n\nexport const Preprocessor: FunctionComponent<Props> = ({ query, metricDescriptor, onChange }) => {\n  const options = useOptions(metricDescriptor);\n  return (\n    <EditorField\n      label=\"Pre-processing\"\n      tooltip=\"Preprocessing options are displayed when the selected metric has a metric kind of delta or cumulative. The specific options available are determined by the metic's value type. If you select 'Rate', data points are aligned and converted to a rate per time series. If you select 'Delta', data points are aligned by their delta (difference) per time series\"\n    >\n      <RadioButtonGroup\n        onChange={(value: PreprocessorType) => {\n          const { valueType, metricKind, perSeriesAligner: psa } = query;\n          const { perSeriesAligner } = getAlignmentPickerData(valueType, metricKind, psa, value);\n          onChange({ ...query, preprocessor: value, perSeriesAligner });\n        }}\n        value={query.preprocessor ?? PreprocessorType.None}\n        options={options}\n      />\n    </EditorField>\n  );\n};\n\nconst useOptions = (metricDescriptor?: MetricDescriptor): Array<SelectableValue<PreprocessorType>> => {\n  const metricKind = metricDescriptor?.metricKind;\n  const valueType = metricDescriptor?.valueType;\n\n  return useMemo(() => {\n    if (!metricKind || metricKind === MetricKind.GAUGE || valueType === ValueTypes.DISTRIBUTION) {\n      return [NONE_OPTION];\n    }\n\n    const options = [\n      NONE_OPTION,\n      {\n        label: 'Rate',\n        value: PreprocessorType.Rate,\n        description: 'Data points are aligned and converted to a rate per time series',\n      },\n    ];\n\n    return metricKind === MetricKind.CUMULATIVE\n      ? [\n          ...options,\n          {\n            label: 'Delta',\n            value: PreprocessorType.Delta,\n            description: 'Data points are aligned by their delta (difference) per time series',\n          },\n        ]\n      : options;\n  }, [metricKind, valueType]);\n};\n","import React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorRow } from '@grafana/experimental';\n\nimport CloudMonitoringDatasource from '../../datasource';\nimport { CustomMetaData, MetricDescriptor, MetricQuery, SLOQuery } from '../../types';\n\nimport { AliasBy } from './AliasBy';\nimport { Alignment } from './Alignment';\nimport { GroupBy } from './GroupBy';\nimport { LabelFilter } from './LabelFilter';\nimport { Metrics } from './Metrics';\nimport { Preprocessor } from './Preprocessor';\n\nexport interface Props {\n  refId: string;\n  customMetaData: CustomMetaData;\n  variableOptionGroup: SelectableValue<string>;\n  onMetricTypeChange: (query: MetricDescriptor) => void;\n  onChange: (query: MetricQuery | SLOQuery) => void;\n  query: MetricQuery;\n  datasource: CloudMonitoringDatasource;\n  labels: any;\n}\n\nfunction Editor({\n  refId,\n  query,\n  labels,\n  datasource,\n  onChange,\n  onMetricTypeChange,\n  customMetaData,\n  variableOptionGroup,\n}: React.PropsWithChildren<Props>) {\n  return (\n    <Metrics\n      refId={refId}\n      projectName={query.projectName}\n      metricType={query.metricType}\n      templateVariableOptions={variableOptionGroup.options}\n      datasource={datasource}\n      onChange={onMetricTypeChange}\n      onProjectChange={onChange}\n      query={query}\n    >\n      {(metric) => (\n        <>\n          <LabelFilter\n            labels={labels}\n            filters={query.filters!}\n            onChange={(filters: string[]) => onChange({ ...query, filters })}\n            variableOptionGroup={variableOptionGroup}\n          />\n          <EditorRow>\n            <Preprocessor metricDescriptor={metric} query={query} onChange={onChange} />\n            <GroupBy\n              refId={refId}\n              labels={Object.keys(labels)}\n              query={query}\n              onChange={onChange}\n              variableOptionGroup={variableOptionGroup}\n              metricDescriptor={metric}\n            />\n            <Alignment\n              refId={refId}\n              datasource={datasource}\n              templateVariableOptions={variableOptionGroup.options}\n              query={query}\n              customMetaData={customMetaData}\n              onChange={onChange}\n            />\n            <AliasBy\n              refId={refId}\n              value={query.aliasBy}\n              onChange={(aliasBy) => {\n                onChange({ ...query, aliasBy });\n              }}\n            />\n          </EditorRow>\n        </>\n      )}\n    </Metrics>\n  );\n}\n\nexport const VisualMetricQueryEditor = React.memo(Editor);\n","import React, { useCallback, useEffect, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorRows } from '@grafana/experimental';\n\nimport CloudMonitoringDatasource from '../../datasource';\nimport { getAlignmentPickerData } from '../../functions';\nimport {\n  AlignmentTypes,\n  CustomMetaData,\n  EditorMode,\n  MetricDescriptor,\n  MetricKind,\n  MetricQuery,\n  PreprocessorType,\n  SLOQuery,\n  ValueTypes,\n} from '../../types';\n\nimport { MQLQueryEditor } from './../MQLQueryEditor';\nimport { GraphPeriod } from './GraphPeriod';\nimport { VisualMetricQueryEditor } from './VisualMetricQueryEditor';\n\nexport interface Props {\n  refId: string;\n  customMetaData: CustomMetaData;\n  variableOptionGroup: SelectableValue<string>;\n  onChange: (query: MetricQuery) => void;\n  onRunQuery: () => void;\n  query: MetricQuery;\n  datasource: CloudMonitoringDatasource;\n}\n\ninterface State {\n  labels: any;\n  [key: string]: any;\n}\n\nexport const defaultState: State = {\n  labels: {},\n};\n\nexport const defaultQuery: (dataSource: CloudMonitoringDatasource) => MetricQuery = (dataSource) => ({\n  editorMode: EditorMode.Visual,\n  projectName: dataSource.getDefaultProject(),\n  metricType: '',\n  metricKind: MetricKind.GAUGE,\n  valueType: '',\n  crossSeriesReducer: 'REDUCE_MEAN',\n  alignmentPeriod: 'cloud-monitoring-auto',\n  perSeriesAligner: AlignmentTypes.ALIGN_MEAN,\n  groupBys: [],\n  filters: [],\n  aliasBy: '',\n  query: '',\n  preprocessor: PreprocessorType.None,\n});\n\nfunction Editor({\n  refId,\n  query,\n  datasource,\n  onChange: onQueryChange,\n  onRunQuery,\n  customMetaData,\n  variableOptionGroup,\n}: React.PropsWithChildren<Props>) {\n  const [state, setState] = useState<State>(defaultState);\n  const { projectName, metricType, groupBys, editorMode, crossSeriesReducer } = query;\n\n  useEffect(() => {\n    if (projectName && metricType) {\n      datasource\n        .getLabels(metricType, refId, projectName)\n        .then((labels) => setState((prevState) => ({ ...prevState, labels })));\n    }\n  }, [datasource, groupBys, metricType, projectName, refId, crossSeriesReducer]);\n\n  const onChange = useCallback(\n    (metricQuery: MetricQuery | SLOQuery) => {\n      onQueryChange({ ...query, ...metricQuery });\n      onRunQuery();\n    },\n    [onQueryChange, onRunQuery, query]\n  );\n\n  const onMetricTypeChange = useCallback(\n    ({ valueType, metricKind, type }: MetricDescriptor) => {\n      const preprocessor =\n        metricKind === MetricKind.GAUGE || valueType === ValueTypes.DISTRIBUTION\n          ? PreprocessorType.None\n          : PreprocessorType.Rate;\n      const { perSeriesAligner } = getAlignmentPickerData(valueType, metricKind, state.perSeriesAligner, preprocessor);\n      onChange({\n        ...query,\n        perSeriesAligner,\n        metricType: type,\n        valueType,\n        metricKind,\n        preprocessor,\n      });\n    },\n    [onChange, query, state]\n  );\n\n  return (\n    <EditorRows>\n      {editorMode === EditorMode.Visual && (\n        <VisualMetricQueryEditor\n          refId={refId}\n          labels={state.labels}\n          variableOptionGroup={variableOptionGroup}\n          customMetaData={customMetaData}\n          onMetricTypeChange={onMetricTypeChange}\n          onChange={onChange}\n          datasource={datasource}\n          query={query}\n        />\n      )}\n\n      {editorMode === EditorMode.MQL && (\n        <>\n          <MQLQueryEditor\n            onChange={(q: string) => onQueryChange({ ...query, query: q })}\n            onRunQuery={onRunQuery}\n            query={query.query}\n          ></MQLQueryEditor>\n          <GraphPeriod\n            onChange={(graphPeriod: string) => onQueryChange({ ...query, graphPeriod })}\n            graphPeriod={query.graphPeriod}\n            refId={refId}\n            variableOptionGroup={variableOptionGroup}\n          />\n        </>\n      )}\n    </EditorRows>\n  );\n}\n\nexport const MetricQueryEditor = React.memo(Editor);\n","import React, { useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport { periodOption } from '../../constants';\n\nexport interface Props {\n  inputId: string;\n  onChange: (period: string) => void;\n  templateVariableOptions: Array<SelectableValue<string>>;\n  aligmentPeriods: periodOption[];\n  selectWidth?: number;\n  category?: string;\n  disabled?: boolean;\n  current?: string;\n}\n\nexport function PeriodSelect({\n  inputId,\n  templateVariableOptions,\n  onChange,\n  current,\n  disabled,\n  aligmentPeriods,\n}: Props) {\n  const options = useMemo(\n    () =>\n      aligmentPeriods.map((ap) => ({\n        ...ap,\n        label: ap.text,\n      })),\n    [aligmentPeriods]\n  );\n  const visibleOptions = useMemo(() => options.filter((ap) => !ap.hidden), [options]);\n\n  return (\n    <Select\n      width=\"auto\"\n      onChange={({ value }) => onChange(value!)}\n      value={[...options, ...templateVariableOptions].find((s) => s.value === current)}\n      options={[\n        {\n          label: 'Template Variables',\n          options: templateVariableOptions,\n        },\n        {\n          label: 'Aggregations',\n          expanded: true,\n          options: visibleOptions,\n        },\n      ]}\n      placeholder=\"Select Period\"\n      inputId={inputId}\n      disabled={disabled}\n      allowCustomValue\n    />\n  );\n}\n","import React, { useEffect, useMemo, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField } from '@grafana/experimental';\nimport { Select } from '@grafana/ui';\n\nimport CloudMonitoringDatasource from '../../datasource';\n\nexport interface Props {\n  refId: string;\n  datasource: CloudMonitoringDatasource;\n  onChange: (projectName: string) => void;\n  templateVariableOptions: Array<SelectableValue<string>>;\n  projectName: string;\n}\n\nexport function Project({ refId, projectName, datasource, onChange, templateVariableOptions }: Props) {\n  const [projects, setProjects] = useState<Array<SelectableValue<string>>>([]);\n  useEffect(() => {\n    datasource.getProjects().then((projects) => setProjects(projects));\n  }, [datasource]);\n\n  const projectsWithTemplateVariables = useMemo(\n    () => [\n      projects,\n      {\n        label: 'Template Variables',\n        options: templateVariableOptions,\n      },\n      ...projects,\n    ],\n    [projects, templateVariableOptions]\n  );\n\n  return (\n    <EditorField label=\"Project\">\n      <Select\n        width=\"auto\"\n        allowCustomValue\n        formatCreateLabel={(v) => `Use project: ${v}`}\n        onChange={({ value }) => onChange(value!)}\n        options={projectsWithTemplateVariables}\n        value={{ value: projectName, label: projectName }}\n        placeholder=\"Select Project\"\n        inputId={`${refId}-project`}\n      />\n    </EditorField>\n  );\n}\n","import React from 'react';\n\nimport { TextArea } from '@grafana/ui';\n\nexport interface Props {\n  onChange: (query: string) => void;\n  onRunQuery: () => void;\n  query: string;\n}\n\nexport function MQLQueryEditor({ query, onChange, onRunQuery }: React.PropsWithChildren<Props>) {\n  const onKeyDown = (event: any) => {\n    if (event.key === 'Enter' && (event.shiftKey || event.ctrlKey)) {\n      event.preventDefault();\n      onRunQuery();\n    }\n  };\n\n  return (\n    <>\n      <TextArea\n        name=\"Query\"\n        className=\"slate-query-field\"\n        value={query}\n        rows={10}\n        placeholder=\"Enter a Cloud Monitoring MQL query (Run with Shift+Enter)\"\n        onBlur={onRunQuery}\n        onChange={(e) => onChange(e.currentTarget.value)}\n        onKeyDown={onKeyDown}\n      />\n    </>\n  );\n}\n","import React, { FunctionComponent } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Switch } from '@grafana/ui';\n\nimport { GRAPH_PERIODS, SELECT_WIDTH } from '../constants';\n\nimport { PeriodSelect, QueryEditorRow } from '.';\n\nexport interface Props {\n  refId: string;\n  onChange: (period: string) => void;\n  variableOptionGroup: SelectableValue<string>;\n  graphPeriod?: string;\n}\n\nexport const GraphPeriod: FunctionComponent<Props> = ({ refId, onChange, graphPeriod, variableOptionGroup }) => {\n  return (\n    <>\n      <QueryEditorRow\n        label=\"Graph period\"\n        htmlFor={`${refId}-graph-period`}\n        tooltip={\n          <>\n            Set <code>graph_period</code> which forces a preferred period between points. Automatically set to the\n            current interval if left blank.\n          </>\n        }\n      >\n        <Switch\n          data-testid={`${refId}-switch-graph-period`}\n          value={graphPeriod !== 'disabled'}\n          onChange={(e) => onChange(e.currentTarget.checked ? '' : 'disabled')}\n        />\n        <PeriodSelect\n          inputId={`${refId}-graph-period`}\n          templateVariableOptions={variableOptionGroup.options}\n          current={graphPeriod}\n          onChange={onChange}\n          selectWidth={SELECT_WIDTH}\n          disabled={graphPeriod === 'disabled'}\n          aligmentPeriods={GRAPH_PERIODS}\n        />\n      </QueryEditorRow>\n    </>\n  );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\n\nimport CloudMonitoringDatasource from '../datasource';\nimport { getAlignmentPickerData } from '../functions';\nimport {\n  AlignmentTypes,\n  CustomMetaData,\n  EditorMode,\n  MetricDescriptor,\n  MetricKind,\n  MetricQuery,\n  PreprocessorType,\n  SLOQuery,\n  ValueTypes,\n} from '../types';\n\nimport { GraphPeriod } from './GraphPeriod';\nimport { MQLQueryEditor } from './MQLQueryEditor';\n\nimport { AliasBy, Project, VisualMetricQueryEditor } from '.';\n\nexport interface Props {\n  refId: string;\n  customMetaData: CustomMetaData;\n  variableOptionGroup: SelectableValue<string>;\n  onChange: (query: MetricQuery) => void;\n  onRunQuery: () => void;\n  query: MetricQuery;\n  datasource: CloudMonitoringDatasource;\n}\n\ninterface State {\n  labels: any;\n  [key: string]: any;\n}\n\nexport const defaultState: State = {\n  labels: {},\n};\n\nexport const defaultQuery: (dataSource: CloudMonitoringDatasource) => MetricQuery = (dataSource) => ({\n  editorMode: EditorMode.Visual,\n  projectName: dataSource.getDefaultProject(),\n  metricType: '',\n  metricKind: MetricKind.GAUGE,\n  valueType: '',\n  crossSeriesReducer: 'REDUCE_MEAN',\n  alignmentPeriod: 'cloud-monitoring-auto',\n  perSeriesAligner: AlignmentTypes.ALIGN_MEAN,\n  groupBys: [],\n  filters: [],\n  aliasBy: '',\n  query: '',\n  preprocessor: PreprocessorType.None,\n});\n\nfunction Editor({\n  refId,\n  query,\n  datasource,\n  onChange: onQueryChange,\n  onRunQuery,\n  customMetaData,\n  variableOptionGroup,\n}: React.PropsWithChildren<Props>) {\n  const [state, setState] = useState<State>(defaultState);\n  const { projectName, metricType, groupBys, editorMode, crossSeriesReducer } = query;\n\n  useEffect(() => {\n    if (projectName && metricType) {\n      datasource\n        .getLabels(metricType, refId, projectName)\n        .then((labels) => setState((prevState) => ({ ...prevState, labels })));\n    }\n  }, [datasource, groupBys, metricType, projectName, refId, crossSeriesReducer]);\n\n  const onChange = useCallback(\n    (metricQuery: MetricQuery | SLOQuery) => {\n      onQueryChange({ ...query, ...metricQuery });\n      onRunQuery();\n    },\n    [onQueryChange, onRunQuery, query]\n  );\n\n  const onMetricTypeChange = useCallback(\n    ({ valueType, metricKind, type }: MetricDescriptor) => {\n      const preprocessor =\n        metricKind === MetricKind.GAUGE || valueType === ValueTypes.DISTRIBUTION\n          ? PreprocessorType.None\n          : PreprocessorType.Rate;\n      const { perSeriesAligner } = getAlignmentPickerData(valueType, metricKind, state.perSeriesAligner, preprocessor);\n      onChange({\n        ...query,\n        perSeriesAligner,\n        metricType: type,\n        valueType,\n        metricKind,\n        preprocessor,\n      });\n    },\n    [onChange, query, state]\n  );\n\n  return (\n    <>\n      <Project\n        refId={refId}\n        templateVariableOptions={variableOptionGroup.options}\n        projectName={projectName}\n        datasource={datasource}\n        onChange={(projectName) => {\n          onChange({ ...query, projectName });\n        }}\n      />\n\n      {editorMode === EditorMode.Visual && (\n        <VisualMetricQueryEditor\n          refId={refId}\n          labels={state.labels}\n          variableOptionGroup={variableOptionGroup}\n          customMetaData={customMetaData}\n          onMetricTypeChange={onMetricTypeChange}\n          onChange={onChange}\n          datasource={datasource}\n          query={query}\n        />\n      )}\n\n      {editorMode === EditorMode.MQL && (\n        <>\n          <MQLQueryEditor\n            onChange={(q: string) => onQueryChange({ ...query, query: q })}\n            onRunQuery={onRunQuery}\n            query={query.query}\n          ></MQLQueryEditor>\n          <GraphPeriod\n            onChange={(graphPeriod: string) => onQueryChange({ ...query, graphPeriod })}\n            graphPeriod={query.graphPeriod}\n            refId={refId}\n            variableOptionGroup={variableOptionGroup}\n          />\n        </>\n      )}\n\n      <AliasBy\n        refId={refId}\n        value={query.aliasBy}\n        onChange={(aliasBy) => {\n          onChange({ ...query, aliasBy });\n        }}\n      />\n    </>\n  );\n}\n\nexport const MetricQueryEditor = React.memo(Editor);\n","import React from 'react';\n\nimport { EditorHeader, FlexItem, InlineSelect } from '@grafana/experimental';\nimport { RadioButtonGroup } from '@grafana/ui';\n\nimport { QUERY_TYPES } from '../../constants';\nimport { EditorMode, CloudMonitoringQuery, QueryType, SLOQuery, MetricQuery } from '../../types';\n\nexport interface QueryEditorHeaderProps {\n  query: CloudMonitoringQuery;\n  metricQuery: MetricQuery;\n  sloQuery: SLOQuery;\n  onChange: (value: CloudMonitoringQuery) => void;\n  onRunQuery: () => void;\n}\n\nconst EDITOR_MODES = [\n  { label: 'Builder', value: EditorMode.Visual },\n  { label: 'MQL', value: EditorMode.MQL },\n];\n\nexport const QueryHeader = (props: QueryEditorHeaderProps) => {\n  const { query, metricQuery, sloQuery, onChange, onRunQuery } = props;\n  const { queryType } = query;\n  const { editorMode } = metricQuery;\n\n  return (\n    <EditorHeader>\n      <InlineSelect\n        label=\"Query type\"\n        options={QUERY_TYPES}\n        value={queryType}\n        onChange={({ value }) => {\n          onChange({ ...query, sloQuery, queryType: value! });\n          onRunQuery();\n        }}\n      />\n      <FlexItem grow={1} />\n      {queryType !== QueryType.SLO && (\n        <RadioButtonGroup\n          size=\"sm\"\n          options={EDITOR_MODES}\n          value={editorMode || EditorMode.Visual}\n          onChange={(value) => {\n            onChange({\n              ...query,\n              metricQuery: {\n                ...metricQuery,\n                editorMode: value,\n              },\n            });\n          }}\n        />\n      )}\n    </EditorHeader>\n  );\n};\n","import React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField } from '@grafana/experimental';\nimport { Select } from '@grafana/ui';\n\nimport { LOOKBACK_PERIODS } from '../../constants';\n\nexport interface Props {\n  refId: string;\n  onChange: (lookbackPeriod: string) => void;\n  templateVariableOptions: Array<SelectableValue<string>>;\n  current?: string;\n}\n\nexport const LookbackPeriodSelect: React.FC<Props> = ({ refId, current, templateVariableOptions, onChange }) => {\n  const options = LOOKBACK_PERIODS.map((lp) => ({\n    ...lp,\n    label: lp.text,\n  }));\n  if (current && !options.find((op) => op.value === current)) {\n    options.push({ label: current, text: current, value: current, hidden: false });\n  }\n  const visibleOptions = options.filter((lp) => !lp.hidden);\n\n  return (\n    <EditorField label=\"Lookback period\" htmlFor={`${refId}-lookback-period`}>\n      <Select\n        inputId={`${refId}-lookback-period`}\n        width=\"auto\"\n        allowCustomValue\n        value={[...options, ...templateVariableOptions].find((s) => s.value === current)}\n        options={[\n          {\n            label: 'Template Variables',\n            options: templateVariableOptions,\n          },\n          {\n            label: 'Predefined periods',\n            expanded: true,\n            options: visibleOptions,\n          },\n        ]}\n        onChange={({ value }) => onChange(value!)}\n      />\n    </EditorField>\n  );\n};\n","import React, { useEffect, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField } from '@grafana/experimental';\nimport { Select } from '@grafana/ui';\n\nimport CloudMonitoringDatasource from '../../datasource';\nimport { SLOQuery } from '../../types';\n\nexport interface Props {\n  refId: string;\n  onChange: (query: SLOQuery) => void;\n  query: SLOQuery;\n  templateVariableOptions: Array<SelectableValue<string>>;\n  datasource: CloudMonitoringDatasource;\n}\n\nexport const SLO: React.FC<Props> = ({ refId, query, templateVariableOptions, onChange, datasource }) => {\n  const [slos, setSLOs] = useState<Array<SelectableValue<string>>>([]);\n  const { projectName, serviceId } = query;\n\n  useEffect(() => {\n    if (!projectName || !serviceId) {\n      return;\n    }\n\n    datasource.getServiceLevelObjectives(projectName, serviceId).then((sloIds: Array<SelectableValue<string>>) => {\n      setSLOs([\n        {\n          label: 'Template Variables',\n          options: templateVariableOptions,\n        },\n        ...sloIds,\n      ]);\n    });\n  }, [datasource, projectName, serviceId, templateVariableOptions]);\n\n  return (\n    <EditorField label=\"SLO\">\n      <Select\n        inputId={`${refId}-slo`}\n        width=\"auto\"\n        allowCustomValue\n        value={query?.sloId && { value: query?.sloId, label: query?.sloName || query?.sloId }}\n        placeholder=\"Select SLO\"\n        options={slos}\n        onChange={async ({ value: sloId = '', label: sloName = '' }) => {\n          const slos = await datasource.getServiceLevelObjectives(projectName, serviceId);\n          const slo = slos.find(({ value }) => value === datasource.templateSrv.replace(sloId));\n          onChange({ ...query, sloId, sloName, goal: slo?.goal });\n        }}\n      />\n    </EditorField>\n  );\n};\n","import React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField } from '@grafana/experimental';\nimport { Select } from '@grafana/ui';\n\nimport { SELECTORS } from '../../constants';\nimport CloudMonitoringDatasource from '../../datasource';\nimport { SLOQuery } from '../../types';\n\nexport interface Props {\n  refId: string;\n  onChange: (query: SLOQuery) => void;\n  query: SLOQuery;\n  templateVariableOptions: Array<SelectableValue<string>>;\n  datasource: CloudMonitoringDatasource;\n}\n\nexport const Selector: React.FC<Props> = ({ refId, query, templateVariableOptions, onChange, datasource }) => {\n  return (\n    <EditorField label=\"Selector\" htmlFor={`${refId}-slo-selector`}>\n      <Select\n        inputId={`${refId}-slo-selector`}\n        width=\"auto\"\n        allowCustomValue\n        value={[...SELECTORS, ...templateVariableOptions].find((s) => s.value === query?.selectorName ?? '')}\n        options={[\n          {\n            label: 'Template Variables',\n            options: templateVariableOptions,\n          },\n          ...SELECTORS,\n        ]}\n        onChange={({ value: selectorName }) => onChange({ ...query, selectorName: selectorName ?? '' })}\n      />\n    </EditorField>\n  );\n};\n","import React, { useEffect, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField } from '@grafana/experimental';\nimport { Select } from '@grafana/ui';\n\nimport CloudMonitoringDatasource from '../../datasource';\nimport { SLOQuery } from '../../types';\n\nexport interface Props {\n  refId: string;\n  onChange: (query: SLOQuery) => void;\n  query: SLOQuery;\n  templateVariableOptions: Array<SelectableValue<string>>;\n  datasource: CloudMonitoringDatasource;\n}\n\nexport const Service: React.FC<Props> = ({ refId, query, templateVariableOptions, onChange, datasource }) => {\n  const [services, setServices] = useState<Array<SelectableValue<string>>>([]);\n  const { projectName } = query;\n\n  useEffect(() => {\n    if (!projectName) {\n      return;\n    }\n\n    datasource.getSLOServices(projectName).then((services: Array<SelectableValue<string>>) => {\n      setServices([\n        {\n          label: 'Template Variables',\n          options: templateVariableOptions,\n        },\n        ...services,\n      ]);\n    });\n  }, [datasource, projectName, templateVariableOptions]);\n\n  return (\n    <EditorField label=\"Service\">\n      <Select\n        inputId={`${refId}-slo-service`}\n        width=\"auto\"\n        allowCustomValue\n        value={query?.serviceId && { value: query?.serviceId, label: query?.serviceName || query?.serviceId }}\n        placeholder=\"Select service\"\n        options={services}\n        onChange={({ value: serviceId = '', label: serviceName = '' }) =>\n          onChange({ ...query, serviceId, serviceName, sloId: '' })\n        }\n      />\n    </EditorField>\n  );\n};\n","import React, { useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField, EditorFieldGroup, EditorRow } from '@grafana/experimental';\n\nimport { ALIGNMENT_PERIODS, SLO_BURN_RATE_SELECTOR_NAME } from '../../constants';\nimport CloudMonitoringDatasource from '../../datasource';\nimport { alignmentPeriodLabel } from '../../functions';\nimport { AlignmentTypes, CustomMetaData, SLOQuery } from '../../types';\n\nimport { AliasBy } from './AliasBy';\nimport { LookbackPeriodSelect } from './LookbackPeriodSelect';\nimport { PeriodSelect } from './PeriodSelect';\nimport { Project } from './Project';\nimport { SLO } from './SLO';\nimport { Selector } from './Selector';\nimport { Service } from './Service';\n\nexport interface Props {\n  refId: string;\n  customMetaData: CustomMetaData;\n  variableOptionGroup: SelectableValue<string>;\n  onChange: (query: SLOQuery) => void;\n  onRunQuery: () => void;\n  query: SLOQuery;\n  datasource: CloudMonitoringDatasource;\n}\n\nexport const defaultQuery: (dataSource: CloudMonitoringDatasource) => SLOQuery = (dataSource) => ({\n  projectName: dataSource.getDefaultProject(),\n  alignmentPeriod: 'cloud-monitoring-auto',\n  perSeriesAligner: AlignmentTypes.ALIGN_MEAN,\n  aliasBy: '',\n  selectorName: 'select_slo_health',\n  serviceId: '',\n  serviceName: '',\n  sloId: '',\n  sloName: '',\n  lookbackPeriod: '',\n});\n\nexport function SLOQueryEditor({\n  refId,\n  query,\n  datasource,\n  onChange,\n  variableOptionGroup,\n  customMetaData,\n}: React.PropsWithChildren<Props>) {\n  const alignmentLabel = useMemo(() => alignmentPeriodLabel(customMetaData, datasource), [customMetaData, datasource]);\n  return (\n    <>\n      <EditorRow>\n        <Project\n          refId={refId}\n          templateVariableOptions={variableOptionGroup.options}\n          projectName={query.projectName}\n          datasource={datasource}\n          onChange={(projectName) => onChange({ ...query, projectName })}\n        />\n        <Service\n          refId={refId}\n          datasource={datasource}\n          templateVariableOptions={variableOptionGroup.options}\n          query={query}\n          onChange={onChange}\n        />\n        <SLO\n          refId={refId}\n          datasource={datasource}\n          templateVariableOptions={variableOptionGroup.options}\n          query={query}\n          onChange={onChange}\n        />\n        <Selector\n          refId={refId}\n          datasource={datasource}\n          templateVariableOptions={variableOptionGroup.options}\n          query={query}\n          onChange={onChange}\n        />\n        {query.selectorName === SLO_BURN_RATE_SELECTOR_NAME && (\n          <LookbackPeriodSelect\n            refId={refId}\n            onChange={(lookbackPeriod) => onChange({ ...query, lookbackPeriod: lookbackPeriod })}\n            current={query.lookbackPeriod}\n            templateVariableOptions={variableOptionGroup.options}\n          />\n        )}\n\n        <EditorFieldGroup>\n          <EditorField label=\"Alignment period\" tooltip={alignmentLabel}>\n            <PeriodSelect\n              inputId={`${refId}-alignment-period`}\n              templateVariableOptions={variableOptionGroup.options}\n              current={query.alignmentPeriod}\n              onChange={(period) => onChange({ ...query, alignmentPeriod: period })}\n              aligmentPeriods={ALIGNMENT_PERIODS}\n            />\n          </EditorField>\n        </EditorFieldGroup>\n\n        <AliasBy refId={refId} value={query.aliasBy} onChange={(aliasBy) => onChange({ ...query, aliasBy })} />\n      </EditorRow>\n    </>\n  );\n}\n","import { css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\n\nimport { QueryEditorProps, toOption } from '@grafana/data';\nimport { EditorRows } from '@grafana/experimental';\nimport { config } from '@grafana/runtime';\nimport { Button, Select } from '@grafana/ui';\n\nimport { QUERY_TYPES, SELECT_WIDTH } from '../constants';\nimport CloudMonitoringDatasource from '../datasource';\nimport { CloudMonitoringQuery, EditorMode, MetricQuery, QueryType, SLOQuery, CloudMonitoringOptions } from '../types';\n\nimport { MetricQueryEditor as ExperimentalMetricQueryEditor } from './Experimental/MetricQueryEditor';\nimport { QueryHeader } from './Experimental/QueryHeader';\nimport { SLOQueryEditor as ExperimentalSLOQueryEditor } from './Experimental/SLOQueryEditor';\nimport { defaultQuery } from './MetricQueryEditor';\nimport { defaultQuery as defaultSLOQuery } from './SLO/SLOQueryEditor';\n\nimport { MetricQueryEditor, QueryEditorRow, SLOQueryEditor } from './';\n\nexport type Props = QueryEditorProps<CloudMonitoringDatasource, CloudMonitoringQuery, CloudMonitoringOptions>;\n\nexport class QueryEditor extends PureComponent<Props> {\n  async UNSAFE_componentWillMount() {\n    const { datasource, query } = this.props;\n\n    // Unfortunately, migrations like this need to go UNSAFE_componentWillMount. As soon as there's\n    // migration hook for this module.ts, we can do the migrations there instead.\n    if (!this.props.query.hasOwnProperty('metricQuery')) {\n      const { hide, refId, datasource, key, queryType, maxLines, metric, ...metricQuery } = this.props.query as any;\n      this.props.query.metricQuery = metricQuery;\n    }\n\n    if (!this.props.query.hasOwnProperty('queryType')) {\n      this.props.query.queryType = QueryType.METRICS;\n    }\n\n    await datasource.ensureGCEDefaultProject();\n    if (!query.metricQuery.projectName) {\n      this.props.query.metricQuery.projectName = datasource.getDefaultProject();\n    }\n  }\n\n  onQueryChange(prop: string, value: MetricQuery | SLOQuery) {\n    this.props.onChange({ ...this.props.query, [prop]: value });\n    this.props.onRunQuery();\n  }\n\n  render() {\n    const { datasource, query, onRunQuery, onChange } = this.props;\n    const metricQuery = { ...defaultQuery(datasource), ...query.metricQuery };\n    const sloQuery = { ...defaultSLOQuery(datasource), ...query.sloQuery };\n    const queryType = query.queryType || QueryType.METRICS;\n    const meta = this.props.data?.series.length ? this.props.data?.series[0].meta : {};\n    const customMetaData = meta?.custom ?? {};\n    const variableOptionGroup = {\n      label: 'Template Variables',\n      expanded: false,\n      options: datasource.getVariables().map(toOption),\n    };\n\n    return config.featureToggles.cloudMonitoringExperimentalUI ? (\n      <EditorRows>\n        <QueryHeader\n          query={query}\n          metricQuery={metricQuery}\n          sloQuery={sloQuery}\n          onChange={onChange}\n          onRunQuery={onRunQuery}\n        />\n        {queryType === QueryType.METRICS && (\n          <ExperimentalMetricQueryEditor\n            refId={query.refId}\n            variableOptionGroup={variableOptionGroup}\n            customMetaData={customMetaData}\n            onChange={(metricQuery: MetricQuery) => {\n              this.props.onChange({ ...this.props.query, metricQuery });\n            }}\n            onRunQuery={onRunQuery}\n            datasource={datasource}\n            query={metricQuery}\n          />\n        )}\n\n        {queryType === QueryType.SLO && (\n          <ExperimentalSLOQueryEditor\n            refId={query.refId}\n            variableOptionGroup={variableOptionGroup}\n            customMetaData={customMetaData}\n            onChange={(query: SLOQuery) => this.onQueryChange('sloQuery', query)}\n            onRunQuery={onRunQuery}\n            datasource={datasource}\n            query={sloQuery}\n          />\n        )}\n      </EditorRows>\n    ) : (\n      <EditorRows>\n        <QueryEditorRow\n          label=\"Query type\"\n          fillComponent={\n            query.queryType !== QueryType.SLO && (\n              <Button\n                variant=\"secondary\"\n                className={css`\n                  margin-left: auto;\n                `}\n                icon=\"edit\"\n                onClick={() =>\n                  this.onQueryChange('metricQuery', {\n                    ...metricQuery,\n                    editorMode: metricQuery.editorMode === EditorMode.MQL ? EditorMode.Visual : EditorMode.MQL,\n                  })\n                }\n              >\n                {metricQuery.editorMode === EditorMode.MQL ? 'Switch to builder' : 'Edit MQL'}\n              </Button>\n            )\n          }\n          htmlFor={`${query.refId}-query-type`}\n        >\n          <Select\n            width={SELECT_WIDTH}\n            value={queryType}\n            options={QUERY_TYPES}\n            onChange={({ value }) => {\n              onChange({ ...query, sloQuery, queryType: value! });\n              onRunQuery();\n            }}\n            inputId={`${query.refId}-query-type`}\n          />\n        </QueryEditorRow>\n\n        {queryType === QueryType.METRICS && (\n          <MetricQueryEditor\n            refId={query.refId}\n            variableOptionGroup={variableOptionGroup}\n            customMetaData={customMetaData}\n            onChange={(metricQuery: MetricQuery) => {\n              this.props.onChange({ ...this.props.query, metricQuery });\n            }}\n            onRunQuery={onRunQuery}\n            datasource={datasource}\n            query={metricQuery}\n          />\n        )}\n\n        {queryType === QueryType.SLO && (\n          <SLOQueryEditor\n            refId={query.refId}\n            variableOptionGroup={variableOptionGroup}\n            customMetaData={customMetaData}\n            onChange={(query: SLOQuery) => this.onQueryChange('sloQuery', query)}\n            onRunQuery={onRunQuery}\n            datasource={datasource}\n            query={sloQuery}\n          />\n        )}\n      </EditorRows>\n    );\n  }\n}\n","import React, { FunctionComponent } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport { QueryEditorRow } from '..';\nimport { SELECT_WIDTH, LOOKBACK_PERIODS } from '../../constants';\n\nexport interface Props {\n  refId: string;\n  onChange: (lookbackPeriod: string) => void;\n  templateVariableOptions: Array<SelectableValue<string>>;\n  current?: string;\n}\n\nexport const LookbackPeriodSelect: FunctionComponent<Props> = ({\n  refId,\n  current,\n  templateVariableOptions,\n  onChange,\n}) => {\n  const options = LOOKBACK_PERIODS.map((lp) => ({\n    ...lp,\n    label: lp.text,\n  }));\n  if (current && !options.find((op) => op.value === current)) {\n    options.push({ label: current, text: current, value: current, hidden: false });\n  }\n  const visibleOptions = options.filter((lp) => !lp.hidden);\n\n  return (\n    <QueryEditorRow label=\"Lookback period\" htmlFor={`${refId}-lookback-period`}>\n      <Select\n        inputId={`${refId}-lookback-period`}\n        width={SELECT_WIDTH}\n        allowCustomValue\n        value={[...options, ...templateVariableOptions].find((s) => s.value === current)}\n        options={[\n          {\n            label: 'Template Variables',\n            options: templateVariableOptions,\n          },\n          {\n            label: 'Predefined periods',\n            expanded: true,\n            options: visibleOptions,\n          },\n        ]}\n        onChange={({ value }) => onChange(value!)}\n      />\n    </QueryEditorRow>\n  );\n};\n","import React, { useEffect, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport { QueryEditorRow } from '..';\nimport { SELECT_WIDTH } from '../../constants';\nimport CloudMonitoringDatasource from '../../datasource';\nimport { SLOQuery } from '../../types';\n\nexport interface Props {\n  refId: string;\n  onChange: (query: SLOQuery) => void;\n  query: SLOQuery;\n  templateVariableOptions: Array<SelectableValue<string>>;\n  datasource: CloudMonitoringDatasource;\n}\n\nexport const Service: React.FC<Props> = ({ refId, query, templateVariableOptions, onChange, datasource }) => {\n  const [services, setServices] = useState<Array<SelectableValue<string>>>([]);\n  const { projectName } = query;\n\n  useEffect(() => {\n    if (!projectName) {\n      return;\n    }\n\n    datasource.getSLOServices(projectName).then((services: Array<SelectableValue<string>>) => {\n      setServices([\n        {\n          label: 'Template Variables',\n          options: templateVariableOptions,\n        },\n        ...services,\n      ]);\n    });\n  }, [datasource, projectName, templateVariableOptions]);\n\n  return (\n    <QueryEditorRow label=\"Service\" htmlFor={`${refId}-slo-service`}>\n      <Select\n        inputId={`${refId}-slo-service`}\n        width={SELECT_WIDTH}\n        allowCustomValue\n        value={query?.serviceId && { value: query?.serviceId, label: query?.serviceName || query?.serviceId }}\n        placeholder=\"Select service\"\n        options={services}\n        onChange={({ value: serviceId = '', label: serviceName = '' }) =>\n          onChange({ ...query, serviceId, serviceName, sloId: '' })\n        }\n      />\n    </QueryEditorRow>\n  );\n};\n","import React, { useEffect, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport { QueryEditorRow } from '..';\nimport { SELECT_WIDTH } from '../../constants';\nimport CloudMonitoringDatasource from '../../datasource';\nimport { SLOQuery } from '../../types';\n\nexport interface Props {\n  refId: string;\n  onChange: (query: SLOQuery) => void;\n  query: SLOQuery;\n  templateVariableOptions: Array<SelectableValue<string>>;\n  datasource: CloudMonitoringDatasource;\n}\n\nexport const SLO: React.FC<Props> = ({ refId, query, templateVariableOptions, onChange, datasource }) => {\n  const [slos, setSLOs] = useState<Array<SelectableValue<string>>>([]);\n  const { projectName, serviceId } = query;\n\n  useEffect(() => {\n    if (!projectName || !serviceId) {\n      return;\n    }\n\n    datasource.getServiceLevelObjectives(projectName, serviceId).then((sloIds: Array<SelectableValue<string>>) => {\n      setSLOs([\n        {\n          label: 'Template Variables',\n          options: templateVariableOptions,\n        },\n        ...sloIds,\n      ]);\n    });\n  }, [datasource, projectName, serviceId, templateVariableOptions]);\n\n  return (\n    <QueryEditorRow label=\"SLO\" htmlFor={`${refId}-slo`}>\n      <Select\n        inputId={`${refId}-slo`}\n        width={SELECT_WIDTH}\n        allowCustomValue\n        value={query?.sloId && { value: query?.sloId, label: query?.sloName || query?.sloId }}\n        placeholder=\"Select SLO\"\n        options={slos}\n        onChange={async ({ value: sloId = '', label: sloName = '' }) => {\n          const slos = await datasource.getServiceLevelObjectives(projectName, serviceId);\n          const slo = slos.find(({ value }) => value === datasource.templateSrv.replace(sloId));\n          onChange({ ...query, sloId, sloName, goal: slo?.goal });\n        }}\n      />\n    </QueryEditorRow>\n  );\n};\n","import React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport { QueryEditorRow } from '..';\nimport { SELECT_WIDTH, SELECTORS } from '../../constants';\nimport CloudMonitoringDatasource from '../../datasource';\nimport { SLOQuery } from '../../types';\n\nexport interface Props {\n  refId: string;\n  onChange: (query: SLOQuery) => void;\n  query: SLOQuery;\n  templateVariableOptions: Array<SelectableValue<string>>;\n  datasource: CloudMonitoringDatasource;\n}\n\nexport const Selector: React.FC<Props> = ({ refId, query, templateVariableOptions, onChange, datasource }) => {\n  return (\n    <QueryEditorRow label=\"Selector\" htmlFor={`${refId}-slo-selector`}>\n      <Select\n        inputId={`${refId}-slo-selector`}\n        width={SELECT_WIDTH}\n        allowCustomValue\n        value={[...SELECTORS, ...templateVariableOptions].find((s) => s.value === query?.selectorName ?? '')}\n        options={[\n          {\n            label: 'Template Variables',\n            options: templateVariableOptions,\n          },\n          ...SELECTORS,\n        ]}\n        onChange={({ value: selectorName }) => onChange({ ...query, selectorName: selectorName ?? '' })}\n      />\n    </QueryEditorRow>\n  );\n};\n","import React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\n\nimport { AliasBy, PeriodSelect, AlignmentPeriodLabel, Project, QueryEditorRow } from '..';\nimport { ALIGNMENT_PERIODS, SELECT_WIDTH, SLO_BURN_RATE_SELECTOR_NAME } from '../../constants';\nimport CloudMonitoringDatasource from '../../datasource';\nimport { AlignmentTypes, CustomMetaData, SLOQuery } from '../../types';\n\nimport { LookbackPeriodSelect } from './LookbackPeriodSelect';\n\nimport { Selector, Service, SLO } from '.';\n\nexport interface Props {\n  refId: string;\n  customMetaData: CustomMetaData;\n  variableOptionGroup: SelectableValue<string>;\n  onChange: (query: SLOQuery) => void;\n  onRunQuery: () => void;\n  query: SLOQuery;\n  datasource: CloudMonitoringDatasource;\n}\n\nexport const defaultQuery: (dataSource: CloudMonitoringDatasource) => SLOQuery = (dataSource) => ({\n  projectName: dataSource.getDefaultProject(),\n  alignmentPeriod: 'cloud-monitoring-auto',\n  perSeriesAligner: AlignmentTypes.ALIGN_MEAN,\n  aliasBy: '',\n  selectorName: 'select_slo_health',\n  serviceId: '',\n  serviceName: '',\n  sloId: '',\n  sloName: '',\n  lookbackPeriod: '',\n});\n\nexport function SLOQueryEditor({\n  refId,\n  query,\n  datasource,\n  onChange,\n  variableOptionGroup,\n  customMetaData,\n}: React.PropsWithChildren<Props>) {\n  return (\n    <>\n      <Project\n        refId={refId}\n        templateVariableOptions={variableOptionGroup.options}\n        projectName={query.projectName}\n        datasource={datasource}\n        onChange={(projectName) => onChange({ ...query, projectName })}\n      />\n      <Service\n        refId={refId}\n        datasource={datasource}\n        templateVariableOptions={variableOptionGroup.options}\n        query={query}\n        onChange={onChange}\n      ></Service>\n      <SLO\n        refId={refId}\n        datasource={datasource}\n        templateVariableOptions={variableOptionGroup.options}\n        query={query}\n        onChange={onChange}\n      ></SLO>\n      <Selector\n        refId={refId}\n        datasource={datasource}\n        templateVariableOptions={variableOptionGroup.options}\n        query={query}\n        onChange={onChange}\n      ></Selector>\n\n      {query.selectorName === SLO_BURN_RATE_SELECTOR_NAME && (\n        <LookbackPeriodSelect\n          refId={refId}\n          onChange={(lookbackPeriod) => onChange({ ...query, lookbackPeriod: lookbackPeriod })}\n          current={query.lookbackPeriod}\n          templateVariableOptions={variableOptionGroup.options}\n        />\n      )}\n\n      <QueryEditorRow label=\"Alignment period\" htmlFor={`${refId}-alignment-period`}>\n        <PeriodSelect\n          inputId={`${refId}-alignment-period`}\n          templateVariableOptions={variableOptionGroup.options}\n          selectWidth={SELECT_WIDTH}\n          current={query.alignmentPeriod}\n          onChange={(period) => onChange({ ...query, alignmentPeriod: period })}\n          aligmentPeriods={ALIGNMENT_PERIODS}\n        />\n        <AlignmentPeriodLabel datasource={datasource} customMetaData={customMetaData} />\n      </QueryEditorRow>\n\n      <AliasBy refId={refId} value={query.aliasBy} onChange={(aliasBy) => onChange({ ...query, aliasBy })} />\n    </>\n  );\n}\n","import React, { useEffect, useMemo, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport { SELECT_WIDTH } from '../constants';\nimport CloudMonitoringDatasource from '../datasource';\n\nimport { QueryEditorRow } from '.';\n\nexport interface Props {\n  refId: string;\n  datasource: CloudMonitoringDatasource;\n  onChange: (projectName: string) => void;\n  templateVariableOptions: Array<SelectableValue<string>>;\n  projectName: string;\n}\n\nexport function Project({ refId, projectName, datasource, onChange, templateVariableOptions }: Props) {\n  const [projects, setProjects] = useState<Array<SelectableValue<string>>>([]);\n  useEffect(() => {\n    datasource.getProjects().then((projects) => setProjects(projects));\n  }, [datasource]);\n\n  const projectsWithTemplateVariables = useMemo(\n    () => [\n      projects,\n      {\n        label: 'Template Variables',\n        options: templateVariableOptions,\n      },\n      ...projects,\n    ],\n    [projects, templateVariableOptions]\n  );\n\n  return (\n    <QueryEditorRow label=\"Project\" htmlFor={`${refId}-project`}>\n      <Select\n        width={SELECT_WIDTH}\n        allowCustomValue\n        formatCreateLabel={(v) => `Use project: ${v}`}\n        onChange={({ value }) => onChange(value!)}\n        options={projectsWithTemplateVariables}\n        value={{ value: projectName, label: projectName }}\n        placeholder=\"Select Project\"\n        inputId={`${refId}-project`}\n      />\n    </QueryEditorRow>\n  );\n}\n","import { css } from '@emotion/css';\nimport { startCase, uniqBy } from 'lodash';\nimport React, { useCallback, useEffect, useState } from 'react';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { TemplateSrv } from '@grafana/runtime';\nimport { getSelectStyles, Select, useStyles2, useTheme2 } from '@grafana/ui';\n\nimport { INNER_LABEL_WIDTH, LABEL_WIDTH, SELECT_WIDTH } from '../constants';\nimport CloudMonitoringDatasource from '../datasource';\nimport { MetricDescriptor } from '../types';\n\nimport { QueryEditorField, QueryEditorRow } from '.';\n\nexport interface Props {\n  refId: string;\n  onChange: (metricDescriptor: MetricDescriptor) => void;\n  templateSrv: TemplateSrv;\n  templateVariableOptions: Array<SelectableValue<string>>;\n  datasource: CloudMonitoringDatasource;\n  projectName: string;\n  metricType: string;\n  children: (metricDescriptor?: MetricDescriptor) => JSX.Element;\n}\n\ninterface State {\n  metricDescriptors: MetricDescriptor[];\n  metrics: any[];\n  services: any[];\n  service: string;\n  metric: string;\n  metricDescriptor?: MetricDescriptor;\n  projectName: string | null;\n}\n\nexport function Metrics(props: Props) {\n  const [state, setState] = useState<State>({\n    metricDescriptors: [],\n    metrics: [],\n    services: [],\n    service: '',\n    metric: '',\n    projectName: null,\n  });\n\n  const theme = useTheme2();\n  const selectStyles = getSelectStyles(theme);\n\n  const customStyle = useStyles2(getStyles);\n\n  const { services, service, metrics, metricDescriptors } = state;\n  const { metricType, templateVariableOptions, projectName, templateSrv, datasource, onChange, children } = props;\n\n  const getSelectedMetricDescriptor = useCallback(\n    (metricDescriptors: MetricDescriptor[], metricType: string) => {\n      return metricDescriptors.find((md) => md.type === templateSrv.replace(metricType))!;\n    },\n    [templateSrv]\n  );\n\n  useEffect(() => {\n    const loadMetricDescriptors = async () => {\n      if (projectName) {\n        const metricDescriptors = await datasource.getMetricTypes(projectName);\n        const services = getServicesList(metricDescriptors);\n        setState((prevState) => ({\n          ...prevState,\n          metricDescriptors,\n          services,\n        }));\n      }\n    };\n    loadMetricDescriptors();\n  }, [datasource, projectName, customStyle, selectStyles.optionDescription]);\n\n  useEffect(() => {\n    const getMetricsList = (metricDescriptors: MetricDescriptor[]) => {\n      const selectedMetricDescriptor = getSelectedMetricDescriptor(metricDescriptors, metricType);\n      if (!selectedMetricDescriptor) {\n        return [];\n      }\n\n      const metricsByService = metricDescriptors\n        .filter((m) => m.service === selectedMetricDescriptor.service)\n        .map((m) => ({\n          service: m.service,\n          value: m.type,\n          label: m.displayName,\n          component: function optionComponent() {\n            return (\n              <div>\n                <div className={customStyle}>{m.type}</div>\n                <div className={selectStyles.optionDescription}>{m.description}</div>\n              </div>\n            );\n          },\n        }));\n      return metricsByService;\n    };\n    const metrics = getMetricsList(metricDescriptors);\n    const service = metrics.length > 0 ? metrics[0].service : '';\n    const metricDescriptor = getSelectedMetricDescriptor(metricDescriptors, metricType);\n    setState((prevState) => ({\n      ...prevState,\n      metricDescriptor,\n      metrics,\n      service: service,\n    }));\n  }, [metricDescriptors, getSelectedMetricDescriptor, metricType, customStyle, selectStyles.optionDescription]);\n\n  const onServiceChange = ({ value: service }: any) => {\n    const metrics = metricDescriptors\n      .filter((m: MetricDescriptor) => m.service === templateSrv.replace(service))\n      .map((m: MetricDescriptor) => ({\n        service: m.service,\n        value: m.type,\n        label: m.displayName,\n        description: m.description,\n      }));\n\n    if (metrics.length > 0 && !metrics.some((m) => m.value === templateSrv.replace(metricType))) {\n      onMetricTypeChange(metrics[0], { service, metrics });\n    } else {\n      setState({ ...state, service, metrics });\n    }\n  };\n\n  const onMetricTypeChange = ({ value }: SelectableValue<string>, extra: any = {}) => {\n    const metricDescriptor = getSelectedMetricDescriptor(state.metricDescriptors, value!);\n    setState({ ...state, metricDescriptor, ...extra });\n    onChange({ ...metricDescriptor, type: value! });\n  };\n\n  const getServicesList = (metricDescriptors: MetricDescriptor[]) => {\n    const services = metricDescriptors.map((m) => ({\n      value: m.service,\n      label: startCase(m.serviceShortName),\n    }));\n\n    return services.length > 0 ? uniqBy(services, (s) => s.value) : [];\n  };\n\n  return (\n    <>\n      <QueryEditorRow>\n        <QueryEditorField labelWidth={LABEL_WIDTH} label=\"Service\" htmlFor={`${props.refId}-service`}>\n          <Select\n            width={SELECT_WIDTH}\n            onChange={onServiceChange}\n            value={[...services, ...templateVariableOptions].find((s) => s.value === service)}\n            options={[\n              {\n                label: 'Template Variables',\n                options: templateVariableOptions,\n              },\n              ...services,\n            ]}\n            placeholder=\"Select Services\"\n            inputId={`${props.refId}-service`}\n          ></Select>\n        </QueryEditorField>\n        <QueryEditorField label=\"Metric name\" labelWidth={INNER_LABEL_WIDTH} htmlFor={`${props.refId}-select-metric`}>\n          <Select\n            width={SELECT_WIDTH}\n            onChange={onMetricTypeChange}\n            value={[...metrics, ...templateVariableOptions].find((s) => s.value === metricType)}\n            options={[\n              {\n                label: 'Template Variables',\n                options: templateVariableOptions,\n              },\n              ...metrics,\n            ]}\n            placeholder=\"Select Metric\"\n            inputId={`${props.refId}-select-metric`}\n          ></Select>\n        </QueryEditorField>\n      </QueryEditorRow>\n\n      {children(state.metricDescriptor)}\n    </>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => css`\n  label: grafana-select-option-description;\n  font-weight: normal;\n  font-style: italic;\n  color: ${theme.colors.text.secondary};\n`;\n","import React, { FunctionComponent, useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { MultiSelect } from '@grafana/ui';\n\nimport { INPUT_WIDTH, SYSTEM_LABELS } from '../constants';\nimport { labelsToGroupedOptions } from '../functions';\nimport { MetricDescriptor, MetricQuery } from '../types';\n\nimport { Aggregation, QueryEditorRow } from '.';\n\nexport interface Props {\n  refId: string;\n  variableOptionGroup: SelectableValue<string>;\n  labels: string[];\n  metricDescriptor?: MetricDescriptor;\n  onChange: (query: MetricQuery) => void;\n  query: MetricQuery;\n}\n\nexport const GroupBy: FunctionComponent<Props> = ({\n  refId,\n  labels: groupBys = [],\n  query,\n  onChange,\n  variableOptionGroup,\n  metricDescriptor,\n}) => {\n  const options = useMemo(\n    () => [variableOptionGroup, ...labelsToGroupedOptions([...groupBys, ...SYSTEM_LABELS])],\n    [groupBys, variableOptionGroup]\n  );\n\n  return (\n    <QueryEditorRow\n      label=\"Group by\"\n      tooltip=\"You can reduce the amount of data returned for a metric by combining different time series. To combine multiple time series, you can specify a grouping and a function. Grouping is done on the basis of labels. The grouping function is used to combine the time series in the group into a single time series.\"\n      htmlFor={`${refId}-group-by`}\n    >\n      <MultiSelect\n        inputId={`${refId}-group-by`}\n        width={INPUT_WIDTH}\n        placeholder=\"Choose label\"\n        options={options}\n        value={query.groupBys ?? []}\n        onChange={(options) => {\n          onChange({ ...query, groupBys: options.map((o) => o.value!) });\n        }}\n      ></MultiSelect>\n      <Aggregation\n        metricDescriptor={metricDescriptor}\n        templateVariableOptions={variableOptionGroup.options}\n        crossSeriesReducer={query.crossSeriesReducer}\n        groupBys={query.groupBys ?? []}\n        onChange={(crossSeriesReducer) => onChange({ ...query, crossSeriesReducer })}\n        refId={refId}\n      ></Aggregation>\n    </QueryEditorRow>\n  );\n};\n","import React, { FC } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\n\nimport { ALIGNMENT_PERIODS, SELECT_WIDTH } from '../constants';\nimport CloudMonitoringDatasource from '../datasource';\nimport { CustomMetaData, MetricQuery, SLOQuery } from '../types';\n\nimport { AlignmentFunction, PeriodSelect, AlignmentPeriodLabel, QueryEditorField, QueryEditorRow } from '.';\n\nexport interface Props {\n  refId: string;\n  onChange: (query: MetricQuery | SLOQuery) => void;\n  query: MetricQuery;\n  templateVariableOptions: Array<SelectableValue<string>>;\n  customMetaData: CustomMetaData;\n  datasource: CloudMonitoringDatasource;\n}\n\nexport const Alignment: FC<Props> = ({\n  refId,\n  templateVariableOptions,\n  onChange,\n  query,\n  customMetaData,\n  datasource,\n}) => {\n  return (\n    <QueryEditorRow\n      label=\"Alignment function\"\n      tooltip=\"The process of alignment consists of collecting all data points received in a fixed length of time, applying a function to combine those data points, and assigning a timestamp to the result.\"\n      fillComponent={<AlignmentPeriodLabel datasource={datasource} customMetaData={customMetaData} />}\n      htmlFor={`${refId}-alignment-function`}\n    >\n      <AlignmentFunction\n        inputId={`${refId}-alignment-function`}\n        templateVariableOptions={templateVariableOptions}\n        query={query}\n        onChange={onChange}\n      />\n      <QueryEditorField label=\"Alignment period\" htmlFor={`${refId}-alignment-period`}>\n        <PeriodSelect\n          inputId={`${refId}-alignment-period`}\n          selectWidth={SELECT_WIDTH}\n          templateVariableOptions={templateVariableOptions}\n          current={query.alignmentPeriod}\n          onChange={(period) => onChange({ ...query, alignmentPeriod: period })}\n          aligmentPeriods={ALIGNMENT_PERIODS}\n        />\n      </QueryEditorField>\n    </QueryEditorRow>\n  );\n};\n","import { flatten } from 'lodash';\nimport React, { FunctionComponent, useCallback, useMemo } from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { Button, HorizontalGroup, Select, VerticalGroup } from '@grafana/ui';\nimport { CustomControlProps } from '@grafana/ui/src/components/Select/types';\n\nimport { SELECT_WIDTH } from '../constants';\nimport { labelsToGroupedOptions, stringArrayToFilters } from '../functions';\nimport { Filter } from '../types';\n\nimport { QueryEditorRow } from '.';\n\nexport interface Props {\n  labels: { [key: string]: string[] };\n  filters: string[];\n  onChange: (filters: string[]) => void;\n  variableOptionGroup: SelectableValue<string>;\n}\n\nconst operators = ['=', '!=', '=~', '!=~'];\n\nconst FilterButton = React.forwardRef<HTMLButtonElement, CustomControlProps<string>>(\n  ({ value, isOpen, invalid, ...rest }, ref) => {\n    return <Button {...rest} ref={ref} variant=\"secondary\" icon=\"plus\" aria-label=\"Add filter\"></Button>;\n  }\n);\nFilterButton.displayName = 'FilterButton';\n\nconst OperatorButton = React.forwardRef<HTMLButtonElement, CustomControlProps<string>>(({ value, ...rest }, ref) => {\n  return (\n    <Button {...rest} ref={ref} variant=\"secondary\">\n      <span className=\"query-segment-operator\">{value?.label}</span>\n    </Button>\n  );\n});\nOperatorButton.displayName = 'OperatorButton';\n\nexport const LabelFilter: FunctionComponent<Props> = ({\n  labels = {},\n  filters: filterArray,\n  onChange,\n  variableOptionGroup,\n}) => {\n  const filters = useMemo(() => stringArrayToFilters(filterArray), [filterArray]);\n  const options = useMemo(\n    () => [variableOptionGroup, ...labelsToGroupedOptions(Object.keys(labels))],\n    [labels, variableOptionGroup]\n  );\n\n  const filtersToStringArray = useCallback((filters: Filter[]) => {\n    const strArr = flatten(filters.map(({ key, operator, value, condition }) => [key, operator, value, condition!]));\n    return strArr.slice(0, strArr.length - 1);\n  }, []);\n\n  const AddFilter = () => {\n    return (\n      <Select\n        allowCustomValue\n        options={[variableOptionGroup, ...labelsToGroupedOptions(Object.keys(labels))]}\n        onChange={({ value: key = '' }) =>\n          onChange(filtersToStringArray([...filters, { key, operator: '=', condition: 'AND', value: '' }]))\n        }\n        menuPlacement=\"bottom\"\n        renderControl={FilterButton}\n      />\n    );\n  };\n\n  return (\n    <QueryEditorRow\n      label=\"Filter\"\n      tooltip={\n        'To reduce the amount of data charted, apply a filter. A filter has three components: a label, a comparison, and a value. The comparison can be an equality, inequality, or regular expression.'\n      }\n      noFillEnd={filters.length > 1}\n    >\n      <VerticalGroup spacing=\"xs\" width=\"auto\">\n        {filters.map(({ key, operator, value, condition }, index) => {\n          // Add the current key and value as options if they are manually entered\n          const keyPresent = options.some((op) => {\n            if (op.options) {\n              return options.some((opp) => opp.label === key);\n            }\n            return op.label === key;\n          });\n          if (!keyPresent) {\n            options.push({ label: key, value: key });\n          }\n\n          const valueOptions = labels.hasOwnProperty(key)\n            ? [variableOptionGroup, ...labels[key].map(toOption)]\n            : [variableOptionGroup];\n          const valuePresent = valueOptions.some((op) => {\n            return op.label === value;\n          });\n          if (!valuePresent) {\n            valueOptions.push({ label: value, value });\n          }\n\n          return (\n            <HorizontalGroup key={index} spacing=\"xs\" width=\"auto\">\n              <Select\n                aria-label=\"Filter label key\"\n                width={SELECT_WIDTH}\n                allowCustomValue\n                formatCreateLabel={(v) => `Use label key: ${v}`}\n                value={key}\n                options={options}\n                onChange={({ value: key = '' }) => {\n                  onChange(\n                    filtersToStringArray(\n                      filters.map((f, i) => (i === index ? { key, operator, condition, value: '' } : f))\n                    )\n                  );\n                }}\n              />\n              <Select\n                value={operator}\n                options={operators.map(toOption)}\n                onChange={({ value: operator = '=' }) =>\n                  onChange(filtersToStringArray(filters.map((f, i) => (i === index ? { ...f, operator } : f))))\n                }\n                menuPlacement=\"bottom\"\n                renderControl={OperatorButton}\n              />\n              <Select\n                aria-label=\"Filter label value\"\n                width={SELECT_WIDTH}\n                formatCreateLabel={(v) => `Use label value: ${v}`}\n                allowCustomValue\n                value={value}\n                placeholder=\"add filter value\"\n                options={valueOptions}\n                onChange={({ value = '' }) =>\n                  onChange(filtersToStringArray(filters.map((f, i) => (i === index ? { ...f, value } : f))))\n                }\n              />\n              <Button\n                variant=\"secondary\"\n                size=\"md\"\n                icon=\"trash-alt\"\n                aria-label=\"Remove\"\n                onClick={() => onChange(filtersToStringArray(filters.filter((_, i) => i !== index)))}\n              ></Button>\n              {index + 1 === filters.length && Object.values(filters).every(({ value }) => value) && <AddFilter />}\n            </HorizontalGroup>\n          );\n        })}\n        {!filters.length && <AddFilter />}\n      </VerticalGroup>\n    </QueryEditorRow>\n  );\n};\n","import React, { FC } from 'react';\n\nexport const AnnotationsHelp: FC = () => {\n  return (\n    <div className=\"gf-form grafana-info-box alert-info\">\n      <div>\n        <h5>Annotation Query Format</h5>\n        <p>\n          An annotation is an event that is overlaid on top of graphs. Annotation rendering is expensive so it is\n          important to limit the number of rows returned.{' '}\n        </p>\n        <p>\n          The Title and Text fields support templating and can use data returned from the query. For example, the Title\n          field could have the following text:\n        </p>\n        <code>\n          {`${'{{metric.type}}'}`} has value: {`${'{{metric.value}}'}`}\n        </code>\n        <p>\n          Example Result: <code>monitoring.googleapis.com/uptime_check/http_status has this value: 502</code>\n        </p>\n        <label>Patterns:</label>\n        <p>\n          <code>{`${'{{metric.value}}'}`}</code> = value of the metric/point\n        </p>\n        <p>\n          <code>{`${'{{metric.type}}'}`}</code> = metric type e.g. compute.googleapis.com/instance/cpu/usage_time\n        </p>\n        <p>\n          <code>{`${'{{metric.name}}'}`}</code> = name part of metric e.g. instance/cpu/usage_time\n        </p>\n        <p>\n          <code>{`${'{{metric.service}}'}`}</code> = service part of metric e.g. compute\n        </p>\n        <p>\n          <code>{`${'{{metric.label.label_name}}'}`}</code> = Metric label metadata e.g. metric.label.instance_name\n        </p>\n        <p>\n          <code>{`${'{{resource.label.label_name}}'}`}</code> = Resource label metadata e.g. resource.label.zone\n        </p>\n      </div>\n    </div>\n  );\n};\n","import React, { FC, useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport { SELECT_WIDTH } from '../constants';\nimport { getAlignmentPickerData } from '../functions';\nimport { MetricQuery } from '../types';\n\nexport interface Props {\n  inputId: string;\n  onChange: (query: MetricQuery) => void;\n  query: MetricQuery;\n  templateVariableOptions: Array<SelectableValue<string>>;\n}\n\nexport const AlignmentFunction: FC<Props> = ({ inputId, query, templateVariableOptions, onChange }) => {\n  const { valueType, metricKind, perSeriesAligner: psa, preprocessor } = query;\n  const { perSeriesAligner, alignOptions } = useMemo(\n    () => getAlignmentPickerData(valueType, metricKind, psa, preprocessor),\n    [valueType, metricKind, psa, preprocessor]\n  );\n\n  return (\n    <Select\n      width={SELECT_WIDTH}\n      onChange={({ value }) => onChange({ ...query, perSeriesAligner: value! })}\n      value={[...alignOptions, ...templateVariableOptions].find((s) => s.value === perSeriesAligner)}\n      options={[\n        {\n          label: 'Template Variables',\n          options: templateVariableOptions,\n        },\n        {\n          label: 'Alignment options',\n          expanded: true,\n          options: alignOptions,\n        },\n      ]}\n      placeholder=\"Select Alignment\"\n      inputId={inputId}\n    ></Select>\n  );\n};\n","import React, { FC, useMemo } from 'react';\n\nimport { rangeUtil } from '@grafana/data';\n\nimport { ALIGNMENTS } from '../constants';\nimport CloudMonitoringDatasource from '../datasource';\nimport { CustomMetaData } from '../types';\n\nexport interface Props {\n  customMetaData: CustomMetaData;\n  datasource: CloudMonitoringDatasource;\n}\n\nexport const AlignmentPeriodLabel: FC<Props> = ({ customMetaData, datasource }) => {\n  const { perSeriesAligner, alignmentPeriod } = customMetaData;\n  const formatAlignmentText = useMemo(() => {\n    if (!alignmentPeriod || !perSeriesAligner) {\n      return '';\n    }\n\n    const alignment = ALIGNMENTS.find((ap) => ap.value === datasource.templateSrv.replace(perSeriesAligner));\n    const seconds = parseInt(alignmentPeriod ?? ''.replace(/[^0-9]/g, ''), 10);\n    const hms = rangeUtil.secondsToHms(seconds);\n    return `${hms} interval (${alignment?.text ?? ''})`;\n  }, [datasource, perSeriesAligner, alignmentPeriod]);\n\n  return <label>{formatAlignmentText}</label>;\n};\n","import { debounce } from 'lodash';\nimport React, { FunctionComponent, useState } from 'react';\n\nimport { Input } from '@grafana/ui';\n\nimport { INPUT_WIDTH } from '../constants';\n\nimport { QueryEditorRow } from '.';\n\nexport interface Props {\n  refId: string;\n  onChange: (alias: any) => void;\n  value?: string;\n}\n\nexport const AliasBy: FunctionComponent<Props> = ({ refId, value = '', onChange }) => {\n  const [alias, setAlias] = useState(value ?? '');\n\n  const propagateOnChange = debounce(onChange, 1000);\n\n  onChange = (e: any) => {\n    setAlias(e.target.value);\n    propagateOnChange(e.target.value);\n  };\n\n  return (\n    <QueryEditorRow label=\"Alias by\" htmlFor={`${refId}-alias-by`}>\n      <Input id={`${refId}-alias-by`} width={INPUT_WIDTH} value={alias} onChange={onChange} />\n    </QueryEditorRow>\n  );\n};\n","import React, { FC, useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport { getAggregationOptionsByMetric } from '../functions';\nimport { MetricDescriptor, MetricKind, ValueTypes } from '../types';\n\nimport { QueryEditorField } from '.';\n\nexport interface Props {\n  refId: string;\n  onChange: (metricDescriptor: string) => void;\n  metricDescriptor?: MetricDescriptor;\n  crossSeriesReducer: string;\n  groupBys: string[];\n  templateVariableOptions: Array<SelectableValue<string>>;\n}\n\nexport const Aggregation: FC<Props> = (props) => {\n  const aggOptions = useAggregationOptionsByMetric(props);\n  const selected = useSelectedFromOptions(aggOptions, props);\n\n  return (\n    <QueryEditorField\n      labelWidth={18}\n      label=\"Group by function\"\n      data-testid=\"cloud-monitoring-aggregation\"\n      htmlFor={`${props.refId}-group-by-function`}\n    >\n      <Select\n        width={16}\n        onChange={({ value }) => props.onChange(value!)}\n        value={selected}\n        options={[\n          {\n            label: 'Template Variables',\n            options: props.templateVariableOptions,\n          },\n          {\n            label: 'Aggregations',\n            expanded: true,\n            options: aggOptions,\n          },\n        ]}\n        placeholder=\"Select Reducer\"\n        inputId={`${props.refId}-group-by-function`}\n      />\n    </QueryEditorField>\n  );\n};\n\nconst useAggregationOptionsByMetric = ({ metricDescriptor }: Props): Array<SelectableValue<string>> => {\n  const valueType = metricDescriptor?.valueType;\n  const metricKind = metricDescriptor?.metricKind;\n\n  return useMemo(() => {\n    if (!valueType || !metricKind) {\n      return [];\n    }\n\n    return getAggregationOptionsByMetric(valueType as ValueTypes, metricKind as MetricKind).map((a) => ({\n      ...a,\n      label: a.text,\n    }));\n  }, [valueType, metricKind]);\n};\n\nconst useSelectedFromOptions = (aggOptions: Array<SelectableValue<string>>, props: Props) => {\n  return useMemo(() => {\n    const allOptions = [...aggOptions, ...props.templateVariableOptions];\n    return allOptions.find((s) => s.value === props.crossSeriesReducer);\n  }, [aggOptions, props.crossSeriesReducer, props.templateVariableOptions]);\n};\n","import { css } from '@emotion/css';\nimport React, { FC } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { HorizontalGroup, InlineField, InlineLabel, PopoverContent, Select } from '@grafana/ui';\n\nimport { INNER_LABEL_WIDTH, LABEL_WIDTH } from '../constants';\n\ninterface VariableQueryFieldProps {\n  onChange: (value: string) => void;\n  options: SelectableValue[];\n  value: string;\n  label: string;\n  allowCustomValue?: boolean;\n}\n\nexport const VariableQueryField: FC<VariableQueryFieldProps> = ({\n  label,\n  onChange,\n  value,\n  options,\n  allowCustomValue = false,\n}) => {\n  return (\n    <InlineField label={label} labelWidth={20}>\n      <Select\n        width={25}\n        allowCustomValue={allowCustomValue}\n        value={value}\n        onChange={({ value }) => onChange(value!)}\n        options={options}\n      />\n    </InlineField>\n  );\n};\n\nexport interface Props {\n  children: React.ReactNode;\n  tooltip?: PopoverContent;\n  label?: React.ReactNode;\n  className?: string;\n  noFillEnd?: boolean;\n  labelWidth?: number;\n  fillComponent?: React.ReactNode;\n  htmlFor?: string;\n}\n\nexport const QueryEditorRow: FC<Props> = ({\n  children,\n  label,\n  tooltip,\n  fillComponent,\n  noFillEnd = false,\n  labelWidth = LABEL_WIDTH,\n  htmlFor,\n  ...rest\n}) => {\n  return (\n    <div className=\"gf-form\" {...rest}>\n      {label && (\n        <InlineLabel width={labelWidth} tooltip={tooltip} htmlFor={htmlFor}>\n          {label}\n        </InlineLabel>\n      )}\n      <div\n        className={css`\n          margin-right: 4px;\n        `}\n      >\n        <HorizontalGroup spacing=\"xs\" width=\"auto\">\n          {children}\n        </HorizontalGroup>\n      </div>\n      <div className={'gf-form--grow'}>\n        {noFillEnd || <div className={'gf-form-label gf-form-label--grow'}>{fillComponent}</div>}\n      </div>\n    </div>\n  );\n};\n\nexport const QueryEditorField: FC<Props> = ({ children, label, tooltip, labelWidth = INNER_LABEL_WIDTH, ...rest }) => {\n  return (\n    <>\n      {label && (\n        <InlineLabel width={labelWidth} tooltip={tooltip} {...rest}>\n          {label}\n        </InlineLabel>\n      )}\n      {children}\n    </>\n  );\n};\n","import React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\n\nimport CloudMonitoringDatasource from '../datasource';\nimport { CustomMetaData, MetricDescriptor, MetricQuery, SLOQuery } from '../types';\n\nimport { Alignment, GroupBy, LabelFilter, Metrics, Preprocessor } from '.';\n\nexport interface Props {\n  refId: string;\n  customMetaData: CustomMetaData;\n  variableOptionGroup: SelectableValue<string>;\n  onMetricTypeChange: (query: MetricDescriptor) => void;\n  onChange: (query: MetricQuery | SLOQuery) => void;\n  query: MetricQuery;\n  datasource: CloudMonitoringDatasource;\n  labels: any;\n}\n\nfunction Editor({\n  refId,\n  query,\n  labels,\n  datasource,\n  onChange,\n  onMetricTypeChange,\n  customMetaData,\n  variableOptionGroup,\n}: React.PropsWithChildren<Props>) {\n  return (\n    <Metrics\n      refId={refId}\n      templateSrv={datasource.templateSrv}\n      projectName={query.projectName}\n      metricType={query.metricType}\n      templateVariableOptions={variableOptionGroup.options}\n      datasource={datasource}\n      onChange={onMetricTypeChange}\n    >\n      {(metric) => (\n        <>\n          <LabelFilter\n            labels={labels}\n            filters={query.filters!}\n            onChange={(filters: string[]) => onChange({ ...query, filters })}\n            variableOptionGroup={variableOptionGroup}\n          />\n          <Preprocessor metricDescriptor={metric} query={query} onChange={onChange} />\n          <GroupBy\n            refId={refId}\n            labels={Object.keys(labels)}\n            query={query}\n            onChange={onChange}\n            variableOptionGroup={variableOptionGroup}\n            metricDescriptor={metric}\n          />\n          <Alignment\n            refId={refId}\n            datasource={datasource}\n            templateVariableOptions={variableOptionGroup.options}\n            query={query}\n            customMetaData={customMetaData}\n            onChange={onChange}\n          />\n        </>\n      )}\n    </Metrics>\n  );\n}\n\nexport const VisualMetricQueryEditor = React.memo(Editor);\n","import React, { useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport { periodOption } from '../constants';\n\nexport interface Props {\n  inputId: string;\n  onChange: (period: string) => void;\n  templateVariableOptions: Array<SelectableValue<string>>;\n  aligmentPeriods: periodOption[];\n  selectWidth?: number;\n  category?: string;\n  disabled?: boolean;\n  current?: string;\n}\n\nexport function PeriodSelect({\n  inputId,\n  templateVariableOptions,\n  onChange,\n  current,\n  selectWidth,\n  disabled,\n  aligmentPeriods,\n}: Props) {\n  const options = useMemo(\n    () =>\n      aligmentPeriods.map((ap) => ({\n        ...ap,\n        label: ap.text,\n      })),\n    [aligmentPeriods]\n  );\n  const visibleOptions = useMemo(() => options.filter((ap) => !ap.hidden), [options]);\n\n  return (\n    <Select\n      width={selectWidth}\n      onChange={({ value }) => onChange(value!)}\n      value={[...options, ...templateVariableOptions].find((s) => s.value === current)}\n      options={[\n        {\n          label: 'Template Variables',\n          options: templateVariableOptions,\n        },\n        {\n          label: 'Aggregations',\n          expanded: true,\n          options: visibleOptions,\n        },\n      ]}\n      placeholder=\"Select Period\"\n      inputId={inputId}\n      disabled={disabled}\n      allowCustomValue\n    ></Select>\n  );\n}\n","import React, { FunctionComponent, useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { RadioButtonGroup } from '@grafana/ui';\n\nimport { getAlignmentPickerData } from '../functions';\nimport { MetricDescriptor, MetricKind, MetricQuery, PreprocessorType, ValueTypes } from '../types';\n\nimport { QueryEditorRow } from '.';\n\nconst NONE_OPTION = { label: 'None', value: PreprocessorType.None };\n\nexport interface Props {\n  metricDescriptor?: MetricDescriptor;\n  onChange: (query: MetricQuery) => void;\n  query: MetricQuery;\n}\n\nexport const Preprocessor: FunctionComponent<Props> = ({ query, metricDescriptor, onChange }) => {\n  const options = useOptions(metricDescriptor);\n  return (\n    <QueryEditorRow\n      label=\"Pre-processing\"\n      tooltip=\"Preprocessing options are displayed when the selected metric has a metric kind of delta or cumulative. The specific options available are determined by the metic's value type. If you select 'Rate', data points are aligned and converted to a rate per time series. If you select 'Delta', data points are aligned by their delta (difference) per time series\"\n    >\n      <RadioButtonGroup\n        onChange={(value: PreprocessorType) => {\n          const { valueType, metricKind, perSeriesAligner: psa } = query;\n          const { perSeriesAligner } = getAlignmentPickerData(valueType, metricKind, psa, value);\n          onChange({ ...query, preprocessor: value, perSeriesAligner });\n        }}\n        value={query.preprocessor ?? PreprocessorType.None}\n        options={options}\n      ></RadioButtonGroup>\n    </QueryEditorRow>\n  );\n};\n\nconst useOptions = (metricDescriptor?: MetricDescriptor): Array<SelectableValue<PreprocessorType>> => {\n  const metricKind = metricDescriptor?.metricKind;\n  const valueType = metricDescriptor?.valueType;\n\n  return useMemo(() => {\n    if (!metricKind || metricKind === MetricKind.GAUGE || valueType === ValueTypes.DISTRIBUTION) {\n      return [NONE_OPTION];\n    }\n\n    const options = [\n      NONE_OPTION,\n      {\n        label: 'Rate',\n        value: PreprocessorType.Rate,\n        description: 'Data points are aligned and converted to a rate per time series',\n      },\n    ];\n\n    return metricKind === MetricKind.CUMULATIVE\n      ? [\n          ...options,\n          {\n            label: 'Delta',\n            value: PreprocessorType.Delta,\n            description: 'Data points are aligned by their delta (difference) per time series',\n          },\n        ]\n      : options;\n  }, [metricKind, valueType]);\n};\n","import { GoogleAuthType } from '@grafana/google-sdk';\n\nimport { MetricKind, QueryType, ValueTypes } from './types';\n\n// not super excited about using uneven numbers, but this makes it align perfectly with rows that has two fields\nexport const INPUT_WIDTH = 71;\nexport const LABEL_WIDTH = 19;\nexport const INNER_LABEL_WIDTH = 14;\nexport const SELECT_WIDTH = 28;\nexport const AUTH_TYPES = [\n  { value: 'Google JWT File', key: GoogleAuthType.JWT },\n  { value: 'GCE Default Service Account', key: GoogleAuthType.GCE },\n];\n\nexport const ALIGNMENTS = [\n  {\n    text: 'none',\n    value: 'ALIGN_NONE',\n    valueTypes: [\n      ValueTypes.INT64,\n      ValueTypes.DOUBLE,\n      ValueTypes.MONEY,\n      ValueTypes.DISTRIBUTION,\n      ValueTypes.STRING,\n      ValueTypes.VALUE_TYPE_UNSPECIFIED,\n      ValueTypes.BOOL,\n    ],\n    metricKinds: [MetricKind.GAUGE],\n  },\n  {\n    text: 'delta',\n    value: 'ALIGN_DELTA',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.CUMULATIVE, MetricKind.DELTA],\n  },\n  {\n    text: 'rate',\n    value: 'ALIGN_RATE',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],\n    metricKinds: [MetricKind.CUMULATIVE, MetricKind.DELTA],\n  },\n  {\n    text: 'interpolate',\n    value: 'ALIGN_INTERPOLATE',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],\n    metricKinds: [MetricKind.GAUGE],\n  },\n  {\n    text: 'next older',\n    value: 'ALIGN_NEXT_OLDER',\n    valueTypes: [\n      ValueTypes.INT64,\n      ValueTypes.DOUBLE,\n      ValueTypes.MONEY,\n      ValueTypes.DISTRIBUTION,\n      ValueTypes.STRING,\n      ValueTypes.VALUE_TYPE_UNSPECIFIED,\n      ValueTypes.BOOL,\n    ],\n    metricKinds: [MetricKind.GAUGE],\n  },\n  {\n    text: 'min',\n    value: 'ALIGN_MIN',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'max',\n    value: 'ALIGN_MAX',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'mean',\n    value: 'ALIGN_MEAN',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'count',\n    value: 'ALIGN_COUNT',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.BOOL],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'sum',\n    value: 'ALIGN_SUM',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'stddev',\n    value: 'ALIGN_STDDEV',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'count true',\n    value: 'ALIGN_COUNT_TRUE',\n    valueTypes: [ValueTypes.BOOL],\n    metricKinds: [MetricKind.GAUGE],\n  },\n  {\n    text: 'count false',\n    value: 'ALIGN_COUNT_FALSE',\n    valueTypes: [ValueTypes.BOOL],\n    metricKinds: [MetricKind.GAUGE],\n  },\n  {\n    text: 'fraction true',\n    value: 'ALIGN_FRACTION_TRUE',\n    valueTypes: [ValueTypes.BOOL],\n    metricKinds: [MetricKind.GAUGE],\n  },\n  {\n    text: 'percentile 99',\n    value: 'ALIGN_PERCENTILE_99',\n    valueTypes: [ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'percentile 95',\n    value: 'ALIGN_PERCENTILE_95',\n    valueTypes: [ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'percentile 50',\n    value: 'ALIGN_PERCENTILE_50',\n    valueTypes: [ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'percentile 05',\n    value: 'ALIGN_PERCENTILE_05',\n    valueTypes: [ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'percent change',\n    value: 'ALIGN_PERCENT_CHANGE',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n];\n\nexport const AGGREGATIONS = [\n  {\n    text: 'none',\n    value: 'REDUCE_NONE',\n    valueTypes: [\n      ValueTypes.INT64,\n      ValueTypes.DOUBLE,\n      ValueTypes.MONEY,\n      ValueTypes.DISTRIBUTION,\n      ValueTypes.BOOL,\n      ValueTypes.STRING,\n    ],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA, MetricKind.CUMULATIVE, MetricKind.METRIC_KIND_UNSPECIFIED],\n  },\n  {\n    text: 'mean',\n    value: 'REDUCE_MEAN',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA, MetricKind.CUMULATIVE],\n  },\n  {\n    text: 'min',\n    value: 'REDUCE_MIN',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA, MetricKind.CUMULATIVE, MetricKind.METRIC_KIND_UNSPECIFIED],\n  },\n  {\n    text: 'max',\n    value: 'REDUCE_MAX',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA, MetricKind.CUMULATIVE, MetricKind.METRIC_KIND_UNSPECIFIED],\n  },\n  {\n    text: 'sum',\n    value: 'REDUCE_SUM',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA, MetricKind.CUMULATIVE, MetricKind.METRIC_KIND_UNSPECIFIED],\n  },\n  {\n    text: 'std. dev.',\n    value: 'REDUCE_STDDEV',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA, MetricKind.CUMULATIVE, MetricKind.METRIC_KIND_UNSPECIFIED],\n  },\n  {\n    text: 'count',\n    value: 'REDUCE_COUNT',\n    valueTypes: [\n      ValueTypes.INT64,\n      ValueTypes.DOUBLE,\n      ValueTypes.MONEY,\n      ValueTypes.DISTRIBUTION,\n      ValueTypes.BOOL,\n      ValueTypes.STRING,\n    ],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA, MetricKind.CUMULATIVE],\n  },\n  {\n    text: 'count true',\n    value: 'REDUCE_COUNT_TRUE',\n    valueTypes: [ValueTypes.BOOL],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'count false',\n    value: 'REDUCE_COUNT_FALSE',\n    valueTypes: [ValueTypes.BOOL],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: '99th percentile',\n    value: 'REDUCE_PERCENTILE_99',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA, MetricKind.CUMULATIVE],\n  },\n  {\n    text: '95th percentile',\n    value: 'REDUCE_PERCENTILE_95',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA, MetricKind.CUMULATIVE],\n  },\n  {\n    text: '50th percentile',\n    value: 'REDUCE_PERCENTILE_50',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA, MetricKind.CUMULATIVE],\n  },\n  {\n    text: '5th percentile',\n    value: 'REDUCE_PERCENTILE_05',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA, MetricKind.CUMULATIVE],\n  },\n];\n\nexport type periodOption = {\n  text: string;\n  value: string;\n  hidden?: boolean;\n};\n\nexport const ALIGNMENT_PERIODS: periodOption[] = [\n  { text: 'grafana auto', value: 'grafana-auto' },\n  { text: 'stackdriver auto', value: 'stackdriver-auto', hidden: true },\n  { text: 'cloud monitoring auto', value: 'cloud-monitoring-auto' },\n  { text: '1m', value: '+60s' },\n  { text: '2m', value: '+120s' },\n  { text: '5m', value: '+300s' },\n  { text: '10m', value: '+600s' },\n  { text: '30m', value: '+1800s' },\n  { text: '1h', value: '+3600s' },\n  { text: '3h', value: '+7200s' },\n  { text: '6h', value: '+21600s' },\n  { text: '1d', value: '+86400s' },\n  { text: '3d', value: '+259200s' },\n  { text: '1w', value: '+604800s' },\n];\n\nexport const GRAPH_PERIODS: periodOption[] = [\n  { text: 'auto', value: 'auto' },\n  { text: '1m', value: '1m' },\n  { text: '2m', value: '2m' },\n  { text: '5m', value: '5m' },\n  { text: '10m', value: '10m' },\n  { text: '30m', value: '30m' },\n  { text: '1h', value: '1h' },\n  { text: '3h', value: '3h' },\n  { text: '6h', value: '6h' },\n  { text: '1d', value: '1d' },\n  { text: '3d', value: '3d' },\n  { text: '1w', value: '1w' },\n];\n\n// Usable units: ns, us, ms, s, m, h\n// ref. https://cloud.google.com/stackdriver/docs/solutions/slo-monitoring/api/timeseries-selectors#tss-names-args\nexport const LOOKBACK_PERIODS: periodOption[] = [\n  { text: '1m', value: '1m' },\n  { text: '2m', value: '2m' },\n  { text: '5m', value: '5m' },\n  { text: '10m', value: '10m' },\n  { text: '30m', value: '30m' },\n  { text: '1h', value: '1h' },\n  { text: '3h', value: '3h' },\n  { text: '6h', value: '6h' },\n  { text: '24h', value: '24h' },\n  { text: '72h', value: '72h' },\n];\n\nexport const SYSTEM_LABELS = [\n  'metadata.system_labels.cloud_account',\n  'metadata.system_labels.name',\n  'metadata.system_labels.region',\n  'metadata.system_labels.state',\n  'metadata.system_labels.instance_group',\n  'metadata.system_labels.node_name',\n  'metadata.system_labels.service_name',\n  'metadata.system_labels.top_level_controller_type',\n  'metadata.system_labels.top_level_controller_name',\n  'metadata.system_labels.container_image',\n];\n\nexport const SLO_BURN_RATE_SELECTOR_NAME = 'select_slo_burn_rate';\n\nexport const SELECTORS = [\n  { label: 'SLI Value', value: 'select_slo_health' },\n  { label: 'SLO Compliance', value: 'select_slo_compliance' },\n  { label: 'SLO Error Budget Remaining', value: 'select_slo_budget_fraction' },\n  { label: 'SLO Burn Rate', value: SLO_BURN_RATE_SELECTOR_NAME },\n];\n\nexport const QUERY_TYPES = [\n  { label: 'Metrics', value: QueryType.METRICS },\n  { label: 'Service Level Objectives (SLO)', value: QueryType.SLO },\n];\n","import { chunk, initial, startCase, uniqBy } from 'lodash';\n\nimport { rangeUtil } from '@grafana/data';\nimport { getTemplateSrv, TemplateSrv } from '@grafana/runtime';\n\nimport { AGGREGATIONS, ALIGNMENTS, SYSTEM_LABELS } from './constants';\nimport CloudMonitoringDatasource from './datasource';\nimport { AlignmentTypes, CustomMetaData, MetricDescriptor, MetricKind, PreprocessorType, ValueTypes } from './types';\n\nexport const extractServicesFromMetricDescriptors = (metricDescriptors: MetricDescriptor[]) =>\n  uniqBy(metricDescriptors, 'service');\n\nexport const getMetricTypesByService = (metricDescriptors: MetricDescriptor[], service: string) =>\n  metricDescriptors.filter((m: MetricDescriptor) => m.service === service);\n\nexport const getMetricTypes = (\n  metricDescriptors: MetricDescriptor[],\n  metricType: string,\n  interpolatedMetricType: string,\n  selectedService: string\n) => {\n  const metricTypes = getMetricTypesByService(metricDescriptors, selectedService).map((m) => ({\n    value: m.type,\n    name: m.displayName,\n  }));\n  const metricTypeExistInArray = metricTypes.some(\n    (m: { value: string; name: string }) => m.value === interpolatedMetricType\n  );\n  const metricTypeByService = metricTypes.length ? metricTypes[0].value : '';\n  const selectedMetricType = metricTypeExistInArray ? metricType : metricTypeByService;\n  return {\n    metricTypes,\n    selectedMetricType,\n  };\n};\n\nexport const getAlignmentOptionsByMetric = (\n  metricValueType: string,\n  metricKind: string,\n  preprocessor?: PreprocessorType\n) => {\n  if (preprocessor && preprocessor === PreprocessorType.Rate) {\n    metricKind = MetricKind.GAUGE;\n  }\n\n  return !metricValueType\n    ? []\n    : ALIGNMENTS.filter((i) => {\n        return (\n          i.valueTypes.indexOf(metricValueType as ValueTypes) !== -1 &&\n          i.metricKinds.indexOf(metricKind as MetricKind) !== -1\n        );\n      });\n};\n\nexport const getAggregationOptionsByMetric = (valueType: ValueTypes, metricKind: MetricKind) => {\n  return !metricKind\n    ? []\n    : AGGREGATIONS.filter((i) => {\n        return i.valueTypes.indexOf(valueType) !== -1 && i.metricKinds.indexOf(metricKind) !== -1;\n      });\n};\n\nexport const getLabelKeys = async (\n  datasource: CloudMonitoringDatasource,\n  selectedMetricType: string,\n  projectName: string\n) => {\n  const refId = 'handleLabelKeysQuery';\n  const labels = await datasource.getLabels(selectedMetricType, refId, projectName);\n  return [...Object.keys(labels), ...SYSTEM_LABELS];\n};\n\nexport const getAlignmentPickerData = (\n  valueType: string | undefined = ValueTypes.DOUBLE,\n  metricKind: string | undefined = MetricKind.GAUGE,\n  perSeriesAligner: string | undefined = AlignmentTypes.ALIGN_MEAN,\n  preprocessor?: PreprocessorType\n) => {\n  const templateSrv: TemplateSrv = getTemplateSrv();\n  const alignOptions = getAlignmentOptionsByMetric(valueType!, metricKind!, preprocessor!).map((option) => ({\n    ...option,\n    label: option.text,\n  }));\n  if (!alignOptions.some((o: { value: string }) => o.value === templateSrv.replace(perSeriesAligner))) {\n    perSeriesAligner = alignOptions.length > 0 ? alignOptions[0].value : AlignmentTypes.ALIGN_MEAN;\n  }\n  return { alignOptions, perSeriesAligner };\n};\n\nexport const labelsToGroupedOptions = (groupBys: string[]) => {\n  const groups = groupBys.reduce((acc: any, curr: string) => {\n    const arr = curr.split('.').map(startCase);\n    const group = (arr.length === 2 ? arr : initial(arr)).join(' ');\n    const option = {\n      value: curr,\n      label: curr,\n    };\n    if (acc[group]) {\n      acc[group] = [...acc[group], option];\n    } else {\n      acc[group] = [option];\n    }\n    return acc;\n  }, {});\n  return Object.entries(groups).map(([label, options]) => ({ label, options, expanded: true }), []);\n};\n\nexport const stringArrayToFilters = (filterArray: string[]) =>\n  chunk(filterArray, 4).map(([key, operator, value, condition = 'AND']) => ({\n    key,\n    operator,\n    value,\n    condition,\n  }));\n\nexport const alignmentPeriodLabel = (customMetaData: CustomMetaData, datasource: CloudMonitoringDatasource) => {\n  const { perSeriesAligner, alignmentPeriod } = customMetaData;\n  if (!alignmentPeriod || !perSeriesAligner) {\n    return '';\n  }\n\n  const alignment = ALIGNMENTS.find((ap) => ap.value === datasource.templateSrv.replace(perSeriesAligner));\n  const seconds = parseInt(alignmentPeriod, 10);\n  const hms = rangeUtil.secondsToHms(seconds);\n  return `${hms} interval (${alignment?.text ?? ''})`;\n};\n","import { DataQuery, DataSourceJsonData, SelectableValue } from '@grafana/data';\nimport { GoogleAuthType } from '@grafana/google-sdk';\n\nexport const authTypes: Array<SelectableValue<string>> = [\n  { label: 'Google JWT File', value: GoogleAuthType.JWT },\n  { label: 'GCE Default Service Account', value: GoogleAuthType.GCE },\n];\n\nexport enum MetricFindQueryTypes {\n  Projects = 'projects',\n  Services = 'services',\n  DefaultProject = 'defaultProject',\n  MetricTypes = 'metricTypes',\n  LabelKeys = 'labelKeys',\n  LabelValues = 'labelValues',\n  ResourceTypes = 'resourceTypes',\n  Aggregations = 'aggregations',\n  Aligners = 'aligners',\n  AlignmentPeriods = 'alignmentPeriods',\n  Selectors = 'selectors',\n  SLOServices = 'sloServices',\n  SLO = 'slo',\n}\n\nexport interface CloudMonitoringVariableQuery extends DataQuery {\n  selectedQueryType: string;\n  selectedService: string;\n  selectedMetricType: string;\n  selectedSLOService: string;\n  labelKey: string;\n  projects: SelectableValue[];\n  sloServices: SelectableValue[];\n  projectName: string;\n}\n\nexport interface VariableQueryData {\n  selectedQueryType: string;\n  metricDescriptors: MetricDescriptor[];\n  selectedService: string;\n  selectedMetricType: string;\n  selectedSLOService: string;\n  labels: string[];\n  labelKey: string;\n  metricTypes: Array<{ value: string; name: string }>;\n  services: SelectableValue[];\n  projects: SelectableValue[];\n  sloServices: SelectableValue[];\n  projectName: string;\n  loading: boolean;\n}\n\nexport interface Aggregation {\n  crossSeriesReducer?: string;\n  groupBys?: string[];\n}\n\nexport enum QueryType {\n  METRICS = 'metrics',\n  SLO = 'slo',\n}\n\nexport enum EditorMode {\n  Visual = 'visual',\n  MQL = 'mql',\n}\n\nexport enum PreprocessorType {\n  None = 'none',\n  Rate = 'rate',\n  Delta = 'delta',\n}\n\nexport enum MetricKind {\n  METRIC_KIND_UNSPECIFIED = 'METRIC_KIND_UNSPECIFIED',\n  GAUGE = 'GAUGE',\n  DELTA = 'DELTA',\n  CUMULATIVE = 'CUMULATIVE',\n}\n\nexport enum ValueTypes {\n  VALUE_TYPE_UNSPECIFIED = 'VALUE_TYPE_UNSPECIFIED',\n  BOOL = 'BOOL',\n  INT64 = 'INT64',\n  DOUBLE = 'DOUBLE',\n  STRING = 'STRING',\n  DISTRIBUTION = 'DISTRIBUTION',\n  MONEY = 'MONEY',\n}\n\nexport enum AlignmentTypes {\n  ALIGN_DELTA = 'ALIGN_DELTA',\n  ALIGN_RATE = 'ALIGN_RATE',\n  ALIGN_INTERPOLATE = 'ALIGN_INTERPOLATE',\n  ALIGN_NEXT_OLDER = 'ALIGN_NEXT_OLDER',\n  ALIGN_MIN = 'ALIGN_MIN',\n  ALIGN_MAX = 'ALIGN_MAX',\n  ALIGN_MEAN = 'ALIGN_MEAN',\n  ALIGN_COUNT = 'ALIGN_COUNT',\n  ALIGN_SUM = 'ALIGN_SUM',\n  ALIGN_STDDEV = 'ALIGN_STDDEV',\n  ALIGN_COUNT_TRUE = 'ALIGN_COUNT_TRUE',\n  ALIGN_COUNT_FALSE = 'ALIGN_COUNT_FALSE',\n  ALIGN_FRACTION_TRUE = 'ALIGN_FRACTION_TRUE',\n  ALIGN_PERCENTILE_99 = 'ALIGN_PERCENTILE_99',\n  ALIGN_PERCENTILE_95 = 'ALIGN_PERCENTILE_95',\n  ALIGN_PERCENTILE_50 = 'ALIGN_PERCENTILE_50',\n  ALIGN_PERCENTILE_05 = 'ALIGN_PERCENTILE_05',\n  ALIGN_PERCENT_CHANGE = 'ALIGN_PERCENT_CHANGE',\n  ALIGN_NONE = 'ALIGN_NONE',\n}\n\nexport interface BaseQuery {\n  projectName: string;\n  perSeriesAligner?: string;\n  alignmentPeriod?: string;\n  aliasBy?: string;\n}\n\nexport interface MetricQuery extends BaseQuery {\n  editorMode: EditorMode;\n  metricType: string;\n  crossSeriesReducer: string;\n  groupBys?: string[];\n  filters?: string[];\n  metricKind?: MetricKind;\n  valueType?: string;\n  view?: string;\n  query: string;\n  preprocessor?: PreprocessorType;\n  // To disable the graphPeriod, it should explictly be set to 'disabled'\n  graphPeriod?: 'disabled' | string;\n}\n\nexport interface AnnotationMetricQuery extends MetricQuery {\n  title?: string;\n  text?: string;\n}\n\nexport interface SLOQuery extends BaseQuery {\n  selectorName: string;\n  serviceId: string;\n  serviceName: string;\n  sloId: string;\n  sloName: string;\n  goal?: number;\n  lookbackPeriod?: string;\n}\n\nexport interface CloudMonitoringQuery extends DataQuery {\n  datasourceId?: number; // Should not be necessary anymore\n  queryType: QueryType;\n  metricQuery: MetricQuery | AnnotationMetricQuery;\n  sloQuery?: SLOQuery;\n  intervalMs: number;\n  type: string;\n}\n\nexport interface CloudMonitoringOptions extends DataSourceJsonData {\n  defaultProject?: string;\n  gceDefaultProject?: string;\n  authenticationType: GoogleAuthType;\n  clientEmail?: string;\n  tokenUri?: string;\n}\n\nexport interface CloudMonitoringSecureJsonData {\n  privateKey?: string;\n}\n\nexport interface LegacyCloudMonitoringAnnotationQuery {\n  projectName: string;\n  metricType: string;\n  refId: string;\n  filters: string[];\n  metricKind: MetricKind;\n  valueType: string;\n  title: string;\n  text: string;\n}\n\nexport interface QueryMeta {\n  alignmentPeriod: string;\n  rawQuery: string;\n  rawQueryString: string;\n  metricLabels: { [key: string]: string[] };\n  resourceLabels: { [key: string]: string[] };\n  resourceTypes: string[];\n}\n\nexport interface MetricDescriptor {\n  valueType: string;\n  metricKind: MetricKind;\n  type: string;\n  unit: string;\n  service: string;\n  serviceShortName: string;\n  displayName: string;\n  description: string;\n}\n\nexport interface Segment {\n  type: string;\n  value: string;\n}\n\nexport interface Filter {\n  key: string;\n  operator: string;\n  value: string;\n  condition?: string;\n}\n\nexport interface CustomMetaData {\n  perSeriesAligner?: string;\n  alignmentPeriod?: string;\n}\n\nexport interface PostResponse {\n  results: Record<string, any>;\n}\n","Object.defineProperty(exports,\"__esModule\",{value:!0});var e=require(\"@grafana/data\"),t=require(\"@grafana/ui\"),a=require(\"react\"),n=require(\"lodash\");function l(e){return e&&\"object\"==typeof e&&\"default\"in e?e:{default:e}}var o=l(a),r=function(){return r=Object.assign||function(e){for(var t,a=1,n=arguments.length;a<n;a++)for(var l in t=arguments[a])Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l]);return e},r.apply(this,arguments)};\n/*! *****************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */function i(e,t){var a=\"function\"==typeof Symbol&&e[Symbol.iterator];if(!a)return e;var n,l,o=a.call(e),r=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)r.push(n.value)}catch(e){l={error:e}}finally{try{n&&!n.done&&(a=o.return)&&a.call(o)}finally{if(l)throw l.error}}return r}var u,c=\"Configuration help box\",d=\"Configuration drop zone\",f=\"Configuration text area\",s=\"Paste JWT button\",p=\"Reset JWT button\",m=\"JWT form\",y=\"JWT button\",h=\"GCE button\",v=[\"private_key\",\"token_uri\",\"client_email\",\"project_id\"],g=function(e){var n=e.onChange,l=i(a.useState(),2),r=l[0],u=l[1],c=i(a.useState(null),2),p=c[0],m=c[1],y=t.useTheme2(),h=a.useCallback((function(e){u(null),m(!0)}),[m]),v=a.useCallback((function(e){m(null),u(null)}),[m]),g=a.useCallback((function(e){if(\"\"!==e.trim()){var t=void 0;try{t=JSON.parse(e)}catch(e){u(\"Invalid JWT token\")}var a=E(t);a.isValid?n({privateKey:t.private_key,tokenUri:t.token_uri,clientEmail:t.client_email,projectId:t.project_id}):u(a.error)}}),[u,n]);return o.default.createElement(o.default.Fragment,null,o.default.createElement(t.Field,{label:\"JWT token\",invalid:Boolean(r),description:p?\"Paste JWT token below\":\"Upload or paste Google JWT token\",error:r},o.default.createElement(o.default.Fragment,null,!0!==p&&o.default.createElement(\"div\",{\"data-testid\":d},o.default.createElement(t.FileDropzone,{options:{multiple:!1,accept:\"application/json\"},readAs:\"readAsText\",onLoad:function(e){g(e),m(!1)}},o.default.createElement(\"p\",{style:{margin:0,fontSize:\"\"+y.typography.h4.fontSize,textAlign:\"center\"}},\"Drop the Google JWT file here\",o.default.createElement(\"br\",null),o.default.createElement(\"br\",null),o.default.createElement(t.LinkButton,{fill:\"outline\"},\"Click to browse files\")))),p&&o.default.createElement(t.TextArea,{\"data-testid\":f,autoFocus:!0,invalid:Boolean(r),placeholder:\"Paste Google JWT token here\",onBlur:function(e){return g(e.currentTarget.value)},rows:12}))),!p&&o.default.createElement(t.Field,null,o.default.createElement(t.Button,{\"data-testid\":s,type:\"button\",fill:\"outline\",style:{color:\"\"+y.colors.primary.text},onClick:h},\"Paste JWT Token\")),p&&r&&o.default.createElement(t.Field,null,o.default.createElement(t.Button,{type:\"button\",fill:\"outline\",style:{color:\"\"+y.colors.primary.text},onClick:v},\"Upload JWT Token\")))},E=function(e){if(!n.isObject(e))return{isValid:!1,error:\"Invalid JWT token\"};var t=v.filter((function(t){return!e[t]}));return t.length>0?{isValid:!1,error:\"Missing keys: \"+t.join(\", \")}:{isValid:!0}},T=function(e){var a=e.options,n=e.onReset,l=e.onChange;return o.default.createElement(\"div\",{\"data-testid\":m},o.default.createElement(t.Field,{label:\"Project ID\"},o.default.createElement(t.Input,{id:\"defaultProject\",width:60,value:a.defaultProject||\"\",onChange:l(\"defaultProject\")})),o.default.createElement(t.Field,{label:\"Client email\"},o.default.createElement(t.Input,{width:60,id:\"clientEmail\",value:a.clientEmail||\"\",onChange:l(\"clientEmail\")})),o.default.createElement(t.Field,{label:\"Token URI\"},o.default.createElement(t.Input,{width:60,id:\"tokenUri\",value:a.tokenUri||\"\",onChange:l(\"tokenUri\")})),o.default.createElement(t.Field,{label:\"Private key\",disabled:!0},o.default.createElement(t.Input,{width:60,id:\"privateKey\",readOnly:!0,placeholder:\"Private key configured\",addonAfter:o.default.createElement(t.Tooltip,{content:\"Click to clear the uploaded JWT token and upload a new one\"},o.default.createElement(t.Button,{\"data-testid\":p,icon:\"sync\",size:\"xs\",onClick:function(){return n(null)},fill:\"outline\"},\"Reset token\"))})))};exports.GoogleAuthType=void 0,(u=exports.GoogleAuthType||(exports.GoogleAuthType={})).JWT=\"jwt\",u.GCE=\"gce\";var k=[{label:\"Google JWT File\",value:exports.GoogleAuthType.JWT,ariaLabel:y},{label:\"GCE Default Service Account\",value:exports.GoogleAuthType.GCE,ariaLabel:h}];exports.ConnectionConfig=function(a){var n=a.options,l=a.onOptionsChange,i=n.jsonData,u=n.secureJsonFields,d=n.secureJsonData;i.authenticationType||(i.authenticationType=exports.GoogleAuthType.JWT);var f=i.authenticationType===exports.GoogleAuthType.JWT||void 0===i.authenticationType,s=Boolean(u&&u.privateKey&&i.clientEmail&&i.defaultProject&&i.tokenUri);return o.default.createElement(o.default.Fragment,null,o.default.createElement(t.FieldSet,{label:\"Authentication\"},o.default.createElement(t.Field,{label:\"Authentication type\"},o.default.createElement(t.RadioButtonGroup,{options:k,value:i.authenticationType||exports.GoogleAuthType.JWT,onChange:function(e){l(r(r({},n),{jsonData:r(r({},n.jsonData),{authenticationType:e})}))}}))),f&&o.default.createElement(t.FieldSet,{label:\"JWT Key Details\"},s?o.default.createElement(T,{options:n.jsonData,onReset:function(e){var t=r({},d),a=e?r(r({},n.jsonData),e):r({},n.jsonData);delete a.clientEmail,delete a.defaultProject,delete a.tokenUri,delete t.privateKey,l(r(r({},n),{secureJsonData:t,jsonData:a}))},onChange:function(t){return e.onUpdateDatasourceJsonDataOption(a,t)}}):o.default.createElement(g,{onChange:function(e){l(r(r({},n),{secureJsonFields:r(r({},u),{privateKey:!0}),secureJsonData:r(r({},d),{privateKey:e.privateKey}),jsonData:r(r({},i),{clientEmail:e.clientEmail,defaultProject:e.projectId,tokenUri:e.tokenUri})}))}}),\" \"),o.default.createElement(\"div\",{className:\"grafana-info-box\",style:{marginTop:\"16px\"},\"data-testid\":c},o.default.createElement(\"p\",null,\"Don’t know how to get a service account key file or create a service account? Read more\",\" \",o.default.createElement(\"a\",{className:\"external-link\",target:\"_blank\",rel:\"noopener noreferrer\",href:\"https://grafana.com/docs/grafana/latest/datasources/google-cloud-monitoring/google-authentication/\"},\"in the documentation.\"))),!f&&o.default.createElement(t.Alert,{title:\"\",severity:\"info\"},\"Verify GCE default service account by clicking Save & Test\"))};\n//# sourceMappingURL=index.production.js.map\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./dist/index.production.js');\n} else {\n  module.exports = require('./dist/index.development.js');\n}\n"],"names":["AliasBy","refId","value","onChange","alias","setAlias","useState","propagateOnChange","debounce","e","target","EditorField","label","Input","id","width","SELECT_WIDTH","GraphPeriod","graphPeriod","variableOptionGroup","EditorRow","htmlFor","tooltip","HorizontalGroup","Switch","currentTarget","checked","inputId","templateVariableOptions","options","current","selectWidth","disabled","aligmentPeriods","GRAPH_PERIODS","AlignmentFunction","query","valueType","metricKind","perSeriesAligner","psa","preprocessor","alignOptions","useMemo","getAlignmentPickerData","Select","find","s","expanded","placeholder","Alignment","customMetaData","datasource","alignmentLabel","alignmentPeriodLabel","EditorFieldGroup","PeriodSelect","alignmentPeriod","period","ALIGNMENT_PERIODS","Aggregation","props","aggOptions","useAggregationOptionsByMetric","selected","useSelectedFromOptions","metricDescriptor","getAggregationOptionsByMetric","map","a","text","crossSeriesReducer","GroupBy","labels","groupBys","labelsToGroupedOptions","SYSTEM_LABELS","MultiSelect","o","DEFAULT_OPERATOR","DEFAULT_CONDITION","operators","toOption","LabelFilter","filters","filterArray","_onChange","stringArrayToFilters","Object","keys","getOptions","key","some","op","opp","push","valueOptions","hasOwnProperty","EditorList","items","renderItem","item","onChangeItem","onDeleteItem","operator","condition","spacing","formatCreateLabel","v","allowCustomValue","AccessoryButton","icon","variant","onClick","type","flatMap","slice","filtersToStringArray","Metrics","metricDescriptors","setMetricDescriptors","setMetricDescriptor","metrics","setMetrics","services","setServices","service","setService","theme","useTheme2","selectStyles","getSelectStyles","customStyle","useStyles2","getStyles","onProjectChange","metricType","projectName","children","templateSrv","getSelectedMetricDescriptor","useCallback","md","replace","useEffect","async","getMetricTypes","getServicesList","selectedMetricDescriptor","filter","m","displayName","component","className","optionDescription","description","getMetricsList","length","loadMetricDescriptors","onMetricTypeChange","startCase","serviceShortName","uniqBy","Project","css","colors","secondary","NONE_OPTION","PreprocessorType","Preprocessor","useOptions","RadioButtonGroup","MetricKind","ValueTypes","Editor","metric","aliasBy","VisualMetricQueryEditor","React","defaultState","onQueryChange","onRunQuery","state","setState","editorMode","getLabels","then","prevState","metricQuery","EditorRows","EditorMode","MQLQueryEditor","q","MetricQueryEditor","ap","visibleOptions","hidden","projects","setProjects","getProjects","projectsWithTemplateVariables","TextArea","name","rows","onBlur","onKeyDown","event","shiftKey","ctrlKey","preventDefault","defaultQuery","dataSource","getDefaultProject","AlignmentTypes","EDITOR_MODES","QueryHeader","sloQuery","queryType","EditorHeader","InlineSelect","QUERY_TYPES","FlexItem","grow","QueryType","size","LookbackPeriodSelect","LOOKBACK_PERIODS","lp","SLO","slos","setSLOs","serviceId","getServiceLevelObjectives","sloIds","sloId","sloName","slo","goal","Selector","SELECTORS","selectorName","Service","getSLOServices","serviceName","SLOQueryEditor","SLO_BURN_RATE_SELECTOR_NAME","lookbackPeriod","QueryEditor","PureComponent","this","ensureGCEDefaultProject","prop","render","defaultSLOQuery","meta","data","series","custom","getVariables","config","fillComponent","Button","QueryEditorRow","extra","QueryEditorField","labelWidth","LABEL_WIDTH","INNER_LABEL_WIDTH","INPUT_WIDTH","AlignmentPeriodLabel","FilterButton","ref","rest","OperatorButton","strArr","flatten","AddFilter","menuPlacement","renderControl","noFillEnd","VerticalGroup","index","f","i","_","values","every","AnnotationsHelp","formatAlignmentText","alignment","ALIGNMENTS","seconds","parseInt","rangeUtil","VariableQueryField","InlineField","InlineLabel","GoogleAuthType","valueTypes","metricKinds","AGGREGATIONS","extractServicesFromMetricDescriptors","getMetricTypesByService","interpolatedMetricType","selectedService","metricTypes","metricTypeExistInArray","metricTypeByService","selectedMetricType","getAlignmentOptionsByMetric","metricValueType","indexOf","getLabelKeys","getTemplateSrv","option","groups","reduce","acc","curr","arr","split","group","initial","join","entries","chunk","MetricFindQueryTypes","t","n","default","l","r","assign","arguments","prototype","call","apply","Symbol","iterator","next","done","error","return","u","g","c","p","y","h","trim","JSON","parse","E","isValid","privateKey","private_key","tokenUri","token_uri","clientEmail","client_email","projectId","project_id","createElement","Fragment","Field","invalid","Boolean","FileDropzone","multiple","accept","readAs","onLoad","style","margin","fontSize","typography","h4","textAlign","LinkButton","fill","autoFocus","color","primary","isObject","T","onReset","defaultProject","readOnly","addonAfter","Tooltip","content","exports","JWT","GCE","k","ariaLabel","ConnectionConfig","onOptionsChange","jsonData","secureJsonFields","d","secureJsonData","authenticationType","FieldSet","onUpdateDatasourceJsonDataOption","marginTop","rel","href","Alert","title","severity","module"],"sourceRoot":""}