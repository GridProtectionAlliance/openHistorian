{"version":3,"file":"tracesPanel.513bae1e8aac28c13a07.js","mappings":"4NAUA,MAAMA,EAAS,CACb,WAAS;AAAA;AAAA;AAAA,GAIX,EAQaC,EAAc,CAAC,CAAE,KAAAC,EAAM,QAAAC,CAAQ,IAAsC,CAChF,MAAMC,KAAe,aAA0B,EACzCC,KAAY,WAAQ,OAAMC,EAAA,GAAoBJ,EAAK,OAAO,CAAC,CAAC,EAAG,CAACA,EAAK,MAAM,CAAC,EAC5EK,KAAaC,EAAA,GAAS,SACnB,QAAM,KAAiB,EAAE,IAAIN,EAAK,SAAS,QAAQ,CAAC,EAAE,YAAY,GAAG,CAC7E,EAED,MAAI,CAACA,GAAQ,CAACA,EAAK,OAAO,QAAU,CAACG,KAEjC,OAAC,OAAI,UAAU,cACb,mBAAC,KAAE,qCAAyB,EAC9B,KAKF,QAAC,OAAI,UAAWL,EAAO,QACrB,oBAAC,OAAI,IAAKI,CAAA,CAAc,KACxB,OAACK,EAAA,GACC,WAAYP,EAAK,OACjB,mBAAoBF,EAAO,QAC3B,UAAAK,EACA,WAAYE,EAAW,MACvB,aAAAH,EACA,eAAgBD,EAAQ,eACxB,cAAeA,EAAQ,cACvB,oBAAqBA,EAAQ,oBAC/B,GACF,CAEJ,E,0BClDO,MAAMO,CAA0B,CACrC,oBAAoBC,EAA0C,CAC5D,OAAOA,EAAQ,gBAAwB,CACrC,KAAM,IAAe,MACrB,SAAU,QACZ,CAAC,CACH,CAEA,sBAAsBA,EAA0C,CAC1D,CAACA,EAAQ,MAKT,CADcA,EAAQ,KAAK,OAAO,CAAC,GAKnCA,EAAQ,KAAK,OAAO,CAAC,EAAE,MAAM,6BAA+B,SAC9D,KAAK,oBAAoBA,CAAO,EAAE,OAAO,CACvC,KAAM,IAAe,MACrB,MAAO,KAA6B,IACtC,CAAC,CAEL,CACF,CCvBO,MAAM,EAAS,IAAIC,EAAA,EAAYX,CAAW,EAAE,uBAAuB,IAAIS,CAA2B,C","sources":["webpack://grafana/./public/app/plugins/panel/traces/TracesPanel.tsx","webpack://grafana/./public/app/plugins/panel/traces/suggestions.ts","webpack://grafana/./public/app/plugins/panel/traces/module.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport { useMemo, createRef } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { Field, LinkModel, PanelProps } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { TraceView } from 'app/features/explore/TraceView/TraceView';\nimport { SpanLinkFunc } from 'app/features/explore/TraceView/components';\nimport { transformDataFrames } from 'app/features/explore/TraceView/utils/transform';\n\nconst styles = {\n  wrapper: css`\n    height: 100%;\n    overflow: scroll;\n  `,\n};\n\nexport interface TracesPanelOptions {\n  createSpanLink?: SpanLinkFunc;\n  focusedSpanId?: string;\n  createFocusSpanLink?: (traceId: string, spanId: string) => LinkModel<Field>;\n}\n\nexport const TracesPanel = ({ data, options }: PanelProps<TracesPanelOptions>) => {\n  const topOfViewRef = createRef<HTMLDivElement>();\n  const traceProp = useMemo(() => transformDataFrames(data.series[0]), [data.series]);\n  const dataSource = useAsync(async () => {\n    return await getDataSourceSrv().get(data.request?.targets[0].datasource?.uid);\n  });\n\n  if (!data || !data.series.length || !traceProp) {\n    return (\n      <div className=\"panel-empty\">\n        <p>No data found in response</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      <div ref={topOfViewRef}></div>\n      <TraceView\n        dataFrames={data.series}\n        scrollElementClass={styles.wrapper}\n        traceProp={traceProp}\n        datasource={dataSource.value}\n        topOfViewRef={topOfViewRef}\n        createSpanLink={options.createSpanLink}\n        focusedSpanId={options.focusedSpanId}\n        createFocusSpanLink={options.createFocusSpanLink}\n      />\n    </div>\n  );\n};\n","import { VisualizationSuggestionsBuilder, VisualizationSuggestionScore } from '@grafana/data';\nimport { SuggestionName } from 'app/types/suggestions';\n\nexport class TracesSuggestionsSupplier {\n  getListWithDefaults(builder: VisualizationSuggestionsBuilder) {\n    return builder.getListAppender<{}, {}>({\n      name: SuggestionName.Trace,\n      pluginId: 'traces',\n    });\n  }\n\n  getSuggestionsForData(builder: VisualizationSuggestionsBuilder) {\n    if (!builder.data) {\n      return;\n    }\n\n    const dataFrame = builder.data.series[0];\n    if (!dataFrame) {\n      return;\n    }\n\n    if (builder.data.series[0].meta?.preferredVisualisationType === 'trace') {\n      this.getListWithDefaults(builder).append({\n        name: SuggestionName.Trace,\n        score: VisualizationSuggestionScore.Best,\n      });\n    }\n  }\n}\n","import { PanelPlugin } from '@grafana/data';\n\nimport { TracesPanel } from './TracesPanel';\nimport { TracesSuggestionsSupplier } from './suggestions';\n\nexport const plugin = new PanelPlugin(TracesPanel).setSuggestionsSupplier(new TracesSuggestionsSupplier());\n"],"names":["styles","TracesPanel","data","options","topOfViewRef","traceProp","transform","dataSource","useAsync","TraceView","TracesSuggestionsSupplier","builder","PanelPlugin"],"sourceRoot":""}