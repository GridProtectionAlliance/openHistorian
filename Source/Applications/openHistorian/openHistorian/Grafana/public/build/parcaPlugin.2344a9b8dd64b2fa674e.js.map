{"version":3,"file":"parcaPlugin.2344a9b8dd64b2fa674e.js","mappings":"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","sources":["webpack://grafana/./public/app/plugins/datasource/parca/ConfigEditor.tsx","webpack://grafana/./public/app/plugins/datasource/parca/dataquery.gen.ts","webpack://grafana/./public/app/plugins/datasource/parca/QueryEditor/Stack.tsx","webpack://grafana/./public/app/plugins/datasource/parca/QueryEditor/EditorRow.tsx","webpack://grafana/./public/app/plugins/datasource/parca/QueryEditor/EditorRows.tsx","webpack://grafana/./public/app/plugins/datasource/parca/lang/index.ts","webpack://grafana/./public/app/plugins/datasource/parca/lang/lang.ts","webpack://grafana/./public/app/plugins/datasource/parca/QueryEditor/autocomplete.ts","webpack://grafana/./public/app/plugins/datasource/parca/QueryEditor/LabelsEditor.tsx","webpack://grafana/./public/app/plugins/datasource/parca/QueryEditor/QueryOptions.tsx","webpack://grafana/./public/app/plugins/datasource/parca/QueryEditor/QueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/parca/datasource.ts","webpack://grafana/./public/app/plugins/datasource/parca/module.ts","webpack://grafana/./.yarn/__virtual__/react-use-virtual-720cbd4f86/3/opt/drone/yarncache/react-use-npm-17.4.0-0ef4521544-0889da919b.zip/node_modules/react-use/esm/useLatest.js","webpack://grafana/./.yarn/__virtual__/react-use-virtual-720cbd4f86/3/opt/drone/yarncache/react-use-npm-17.4.0-0ef4521544-0889da919b.zip/node_modules/react-use/esm/useMount.js"],"sourcesContent":["import React from 'react';\n\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { DataSourceHttpSettings, SecureSocksProxySettings } from '@grafana/ui';\nimport { config } from 'app/core/config';\n\nimport { ParcaDataSourceOptions } from './types';\n\ninterface Props extends DataSourcePluginOptionsEditorProps<ParcaDataSourceOptions> {}\n\nexport const ConfigEditor = (props: Props) => {\n  const { options, onOptionsChange } = props;\n\n  return (\n    <>\n      <DataSourceHttpSettings\n        defaultUrl={'http://localhost:7070'}\n        dataSourceConfig={options}\n        showAccessOptions={false}\n        onChange={onOptionsChange}\n      />\n      {config.featureToggles.secureSocksDatasourceProxy && (\n        <SecureSocksProxySettings options={options} onOptionsChange={onOptionsChange} />\n      )}\n    </>\n  );\n};\n","// Code generated - EDITING IS FUTILE. DO NOT EDIT.\n//\n// Generated by:\n//     public/app/plugins/gen.go\n// Using jennies:\n//     TSTypesJenny\n//     PluginTSTypesJenny\n//\n// Run 'make gen-cue' from repository root to regenerate.\n\nimport * as common from '@grafana/schema';\n\nexport const DataQueryModelVersion = Object.freeze([0, 0]);\n\nexport type ParcaQueryType = ('metrics' | 'profile' | 'both');\n\nexport const defaultParcaQueryType: ParcaQueryType = 'both';\n\nexport interface Parca extends common.DataQuery {\n  /**\n   * Specifies the query label selectors.\n   */\n  labelSelector: string;\n  /**\n   * Specifies the type of profile to query.\n   */\n  profileTypeId: string;\n}\n\nexport const defaultParca: Partial<Parca> = {\n  labelSelector: '{}',\n};\n","import { css } from '@emotion/css';\nimport React, { CSSProperties, useCallback } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\ninterface StackProps {\n  direction?: CSSProperties['flexDirection'];\n  alignItems?: CSSProperties['alignItems'];\n  wrap?: boolean;\n  gap?: number;\n  flexGrow?: CSSProperties['flexGrow'];\n  children: React.ReactNode;\n}\n\nexport function Stack(props: StackProps) {\n  const styles = useStyles2(useCallback((theme) => getStyles(theme, props), [props]));\n  return <div className={styles.root}>{props.children}</div>;\n}\n\nconst getStyles = (theme: GrafanaTheme2, props: StackProps) => ({\n  root: css({\n    display: 'flex',\n    flexDirection: props.direction ?? 'row',\n    flexWrap: props.wrap ?? true ? 'wrap' : undefined,\n    alignItems: props.alignItems,\n    gap: theme.spacing(props.gap ?? 2),\n    flexGrow: props.flexGrow,\n  }),\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { Stack } from './Stack';\n\ninterface EditorRowProps {\n  children: React.ReactNode;\n  stackProps?: Partial<React.ComponentProps<typeof Stack>>;\n}\n\nexport const EditorRow = ({ children, stackProps }: EditorRowProps) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.root}>\n      <Stack gap={2} {...stackProps}>\n        {children}\n      </Stack>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    root: css({\n      padding: theme.spacing(1),\n      backgroundColor: theme.colors.background.secondary,\n      borderRadius: theme.shape.borderRadius(1),\n    }),\n  };\n};\n","import React from 'react';\n\nimport { Stack } from './Stack';\n\ninterface EditorRowsProps {\n  children: React.ReactNode;\n}\n\nexport const EditorRows = ({ children }: EditorRowsProps) => {\n  return (\n    <Stack gap={0.5} direction=\"column\">\n      {children}\n    </Stack>\n  );\n};\n","import { language, languageConfiguration } from './lang';\n\nexport const languageDefinition = {\n  id: 'parca',\n  extensions: ['.parca'],\n  aliases: ['parca'],\n  mimetypes: [],\n  def: {\n    language,\n    languageConfiguration,\n  },\n};\n","import type { languages } from 'monaco-editor';\n\nexport const languageConfiguration: languages.LanguageConfiguration = {\n  // the default separators except `@$`\n  wordPattern: /(-?\\d*\\.\\d\\w*)|([^`~!#%^&*()\\-=+\\[{\\]}\\\\|;:'\",.<>\\/?\\s]+)/g,\n  brackets: [['{', '}']],\n  autoClosingPairs: [\n    { open: '{', close: '}' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n  ],\n  surroundingPairs: [\n    { open: '{', close: '}' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n  ],\n  folding: {},\n};\n\nexport const language: languages.IMonarchLanguage = {\n  ignoreCase: false,\n  defaultToken: '',\n  tokenPostfix: '.fireql',\n\n  keywords: [],\n  operators: [],\n\n  // we include these common regular expressions\n  symbols: /[=><!~?:&|+\\-*\\/^%]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  digits: /\\d+(_+\\d+)*/,\n  octaldigits: /[0-7]+(_+[0-7]+)*/,\n  binarydigits: /[0-1]+(_+[0-1]+)*/,\n  hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,\n  integersuffix: /(ll|LL|u|U|l|L)?(ll|LL|u|U|l|L)?/,\n  floatsuffix: /[fFlL]?/,\n\n  tokenizer: {\n    root: [\n      // labels\n      [/[a-z_]\\w*(?=\\s*(=|!=|=~|!~))/, 'tag'],\n\n      // strings\n      [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], // non-teminated string\n      [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'], // non-teminated string\n      [/\"/, 'string', '@string_double'],\n      [/'/, 'string', '@string_single'],\n\n      // whitespace\n      { include: '@whitespace' },\n\n      // delimiters and operators\n      [/[{}()\\[\\]]/, '@brackets'],\n      [/[<>](?!@symbols)/, '@brackets'],\n      [\n        /@symbols/,\n        {\n          cases: {\n            '@operators': 'delimiter',\n            '@default': '',\n          },\n        },\n      ],\n\n      // numbers\n      [/\\d+/, 'number'],\n      [/\\d*\\d+[eE]([\\-+]?\\d+)?(@floatsuffix)/, 'number.float'],\n      [/\\d*\\.\\d+([eE][\\-+]?\\d+)?(@floatsuffix)/, 'number.float'],\n      [/0[xX][0-9a-fA-F']*[0-9a-fA-F](@integersuffix)/, 'number.hex'],\n      [/0[0-7']*[0-7](@integersuffix)/, 'number.octal'],\n      [/0[bB][0-1']*[0-1](@integersuffix)/, 'number.binary'],\n      [/\\d[\\d']*\\d(@integersuffix)/, 'number'],\n      [/\\d(@integersuffix)/, 'number'],\n    ],\n\n    string_double: [\n      [/[^\\\\\"]+/, 'string'],\n      [/@escapes/, 'string.escape'],\n      [/\\\\./, 'string.escape.invalid'],\n      [/\"/, 'string', '@pop'],\n    ],\n\n    string_single: [\n      [/[^\\\\']+/, 'string'],\n      [/@escapes/, 'string.escape'],\n      [/\\\\./, 'string.escape.invalid'],\n      [/'/, 'string', '@pop'],\n    ],\n\n    clauses: [\n      [/[^(,)]/, 'tag'],\n      [/\\)/, 'identifier', '@pop'],\n    ],\n\n    whitespace: [[/[ \\t\\r\\n]+/, 'white']],\n  },\n};\n","import { monacoTypes, Monaco } from '@grafana/ui';\n\n/**\n * Class that implements CompletionItemProvider interface and allows us to provide suggestion for the Monaco\n * autocomplete system.\n *\n * At this moment we just pass it all the labels/values we get from Fire backend later on we may do something a bit\n * smarter if there will be lots of labels.\n */\nexport class CompletionProvider implements monacoTypes.languages.CompletionItemProvider {\n  triggerCharacters = ['{', ',', '[', '(', '=', '~', ' ', '\"'];\n\n  private labels: { [label: string]: string[] } = {};\n\n  constructor(\n    private datasource: {\n      getLabelNames: () => Promise<string[]>;\n      getLabelValues: (label: string) => Promise<string[]>;\n    },\n    private monaco: Monaco,\n    private editor: monacoTypes.editor.IStandaloneCodeEditor\n  ) {}\n\n  async init() {\n    const names = await this.datasource.getLabelNames();\n    this.labels = names.reduce<{ [label: string]: string[] }>((acc, name) => {\n      acc[name] = [];\n      return acc;\n    }, {});\n  }\n\n  provideCompletionItems(\n    model: monacoTypes.editor.ITextModel,\n    position: monacoTypes.Position\n  ): monacoTypes.languages.ProviderResult<monacoTypes.languages.CompletionList> {\n    // if the model-id does not match, then this call is from a different editor-instance,\n    // not \"our instance\", so return nothing\n    if (this.editor.getModel()?.id !== model.id) {\n      return { suggestions: [] };\n    }\n\n    const { range, offset } = getRangeAndOffset(this.monaco, model, position);\n    const situation = getSituation(model.getValue(), offset);\n    // Cannot be async/await cause of the ProviderResult return type\n    return this.getCompletions(situation).then((completionItems) => {\n      // monaco by-default alphabetically orders the items.\n      // to stop it, we use a number-as-string sortkey,\n      // so that monaco keeps the order we use\n      const maxIndexDigits = completionItems.length.toString().length;\n      const suggestions: monacoTypes.languages.CompletionItem[] = completionItems.map((item, index) => ({\n        kind: getMonacoCompletionItemKind(item.type, this.monaco!),\n        label: item.label,\n        insertText: item.insertText,\n        sortText: index.toString().padStart(maxIndexDigits, '0'), // to force the order we have\n        range,\n      }));\n      return { suggestions };\n    });\n  }\n\n  /**\n   * Get suggestion based on the situation we are in like whether we should suggest label names or values.\n   * @param situation\n   * @private\n   */\n  private async getCompletions(situation: Situation): Promise<Completion[]> {\n    if (!Object.keys(this.labels).length) {\n      return [];\n    }\n    switch (situation.type) {\n      // Not really sure what would make sense to suggest in this case so just leave it\n      case 'UNKNOWN': {\n        return [];\n      }\n      case 'EMPTY': {\n        return Object.keys(this.labels).map((key) => {\n          return {\n            label: key,\n            insertText: `{${key}=\"`,\n            type: 'LABEL_NAME',\n          };\n        });\n      }\n      case 'IN_LABEL_NAME':\n        return Object.keys(this.labels).map((key) => {\n          return {\n            label: key,\n            insertText: key,\n            type: 'LABEL_NAME',\n          };\n        });\n      case 'IN_LABEL_VALUE':\n        let values = [];\n        if (this.labels[situation.labelName].length) {\n          values = this.labels[situation.labelName];\n        } else {\n          values = await this.datasource.getLabelValues(situation.labelName);\n          this.labels[situation.labelName] = values;\n        }\n\n        return values.map((val) => {\n          return {\n            label: val,\n            insertText: situation.betweenQuotes ? val : `\"${val}\"`,\n            type: 'LABEL_VALUE',\n          };\n        });\n      default:\n        throw new Error(`Unexpected situation ${situation}`);\n    }\n  }\n}\n\n/**\n * Get item kind which is used for icon next to the suggestion.\n * @param type\n * @param monaco\n */\nfunction getMonacoCompletionItemKind(type: CompletionType, monaco: Monaco): monacoTypes.languages.CompletionItemKind {\n  switch (type) {\n    case 'LABEL_NAME':\n      return monaco.languages.CompletionItemKind.Enum;\n    case 'LABEL_VALUE':\n      return monaco.languages.CompletionItemKind.EnumMember;\n    default:\n      throw new Error(`Unexpected CompletionType: ${type}`);\n  }\n}\n\nexport type CompletionType = 'LABEL_NAME' | 'LABEL_VALUE';\ntype Completion = {\n  type: CompletionType;\n  label: string;\n  insertText: string;\n};\n\nexport type Label = {\n  name: string;\n  value: string;\n};\n\nexport type Situation =\n  | {\n      type: 'UNKNOWN';\n    }\n  | {\n      type: 'EMPTY';\n    }\n  | {\n      type: 'IN_LABEL_NAME';\n      otherLabels: Label[];\n    }\n  | {\n      type: 'IN_LABEL_VALUE';\n      labelName: string;\n      betweenQuotes: boolean;\n      otherLabels: Label[];\n    };\n\nconst labelNameRegex = /[a-zA-Z_][a-zA-Z0-9_]*/;\nconst labelValueRegex = /[^\"]*/; // anything except a double quote\nconst labelPairsRegex = new RegExp(`(${labelNameRegex.source})=\"(${labelValueRegex.source})\"`, 'g');\nconst inLabelValueRegex = new RegExp(`(${labelNameRegex.source})=(\"?)${labelValueRegex.source}$`);\nconst inLabelNameRegex = new RegExp(/[{,]\\s*[a-zA-Z0-9_]*$/);\n\n/**\n * Figure out where is the cursor and what kind of suggestions are appropriate.\n * As currently Fire handles just a simple {foo=\"bar\", baz=\"zyx\"} kind of values we can do with simple regex to figure\n * out where we are with the cursor.\n * @param text\n * @param offset\n */\nfunction getSituation(text: string, offset: number): Situation {\n  if (text === '') {\n    return {\n      type: 'EMPTY',\n    };\n  }\n\n  // Get all the labels so far in the query, so we can do some more filtering.\n  const matches = text.matchAll(labelPairsRegex);\n  const existingLabels = Array.from(matches).reduce<Label[]>((acc, match) => {\n    const [_, name, value] = match[1];\n    acc.push({ name, value });\n    return acc;\n  }, []);\n\n  // Check if we are editing a label value right now. If so also get name of the label\n  const matchLabelValue = text.substring(0, offset).match(inLabelValueRegex);\n  if (matchLabelValue) {\n    return {\n      type: 'IN_LABEL_VALUE',\n      labelName: matchLabelValue[1],\n      betweenQuotes: !!matchLabelValue[2],\n      otherLabels: existingLabels,\n    };\n  }\n\n  // Check if we are editing a label name\n  const matchLabelName = text.substring(0, offset).match(inLabelNameRegex);\n  if (matchLabelName) {\n    return {\n      type: 'IN_LABEL_NAME',\n      otherLabels: existingLabels,\n    };\n  }\n\n  // Will happen only if user writes something that isn't really a label selector\n  return {\n    type: 'UNKNOWN',\n  };\n}\n\nfunction getRangeAndOffset(monaco: Monaco, model: monacoTypes.editor.ITextModel, position: monacoTypes.Position) {\n  const word = model.getWordAtPosition(position);\n  const range =\n    word != null\n      ? monaco.Range.lift({\n          startLineNumber: position.lineNumber,\n          endLineNumber: position.lineNumber,\n          startColumn: word.startColumn,\n          endColumn: word.endColumn,\n        })\n      : monaco.Range.fromPositions(position);\n\n  // documentation says `position` will be \"adjusted\" in `getOffsetAt` so we clone it here just for sure.\n  const positionClone = {\n    column: position.column,\n    lineNumber: position.lineNumber,\n  };\n\n  const offset = model.getOffsetAt(positionClone);\n  return { offset, range };\n}\n","import { css } from '@emotion/css';\nimport React, { useEffect, useRef } from 'react';\nimport { useLatest } from 'react-use';\n\nimport { CodeEditor, Monaco, useStyles2, monacoTypes } from '@grafana/ui';\n\nimport { ParcaDataSource } from '../datasource';\nimport { languageDefinition } from '../lang';\n\nimport { CompletionProvider } from './autocomplete';\n\ninterface Props {\n  value: string;\n  datasource: ParcaDataSource;\n  onChange: (val: string) => void;\n  onRunQuery: (value: string) => void;\n}\n\nexport function LabelsEditor(props: Props) {\n  const setupAutocompleteFn = useAutocomplete(props.datasource);\n  const styles = useStyles2(getStyles);\n\n  const onRunQueryRef = useLatest(props.onRunQuery);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  return (\n    <div\n      className={styles.wrapper}\n      // NOTE: we will be setting inline-style-width/height on this element\n      ref={containerRef}\n    >\n      <CodeEditor\n        value={props.value}\n        language={langId}\n        onBlur={props.onChange}\n        containerStyles={styles.queryField}\n        monacoOptions={{\n          folding: false,\n          fontSize: 14,\n          lineNumbers: 'off',\n          overviewRulerLanes: 0,\n          renderLineHighlight: 'none',\n          scrollbar: {\n            vertical: 'hidden',\n            verticalScrollbarSize: 8, // used as \"padding-right\"\n            horizontal: 'hidden',\n            horizontalScrollbarSize: 0,\n          },\n          scrollBeyondLastLine: false,\n          wordWrap: 'on',\n          padding: {\n            top: 5,\n            bottom: 6,\n          },\n        }}\n        onBeforeEditorMount={ensureParcaQL}\n        onEditorDidMount={(editor, monaco) => {\n          setupAutocompleteFn(editor, monaco);\n\n          const updateElementHeight = () => {\n            const containerDiv = containerRef.current;\n            if (containerDiv !== null) {\n              const pixelHeight = editor.getContentHeight();\n              containerDiv.style.height = `${pixelHeight + EDITOR_HEIGHT_OFFSET}px`;\n              containerDiv.style.width = '100%';\n              const pixelWidth = containerDiv.clientWidth;\n              editor.layout({ width: pixelWidth, height: pixelHeight });\n            }\n          };\n\n          editor.onDidContentSizeChange(updateElementHeight);\n          updateElementHeight();\n\n          editor.addCommand(monaco.KeyMod.Shift | monaco.KeyCode.Enter, () => {\n            onRunQueryRef.current(editor.getValue());\n          });\n        }}\n      />\n    </div>\n  );\n}\n\n// this number was chosen by testing various values. it might be necessary\n// because of the width of the border, not sure.\n//it needs to do 2 things:\n// 1. when the editor is single-line, it should make the editor height be visually correct\n// 2. when the editor is multi-line, the editor should not be \"scrollable\" (meaning,\n//    you do a scroll-movement in the editor, and it will scroll the content by a couple pixels\n//    up & down. this we want to avoid)\nconst EDITOR_HEIGHT_OFFSET = 2;\n\n/**\n * Hook that returns function that will set up monaco autocomplete for the label selector\n * @param datasource\n */\nfunction useAutocomplete(datasource: ParcaDataSource) {\n  const autocompleteDisposeFun = useRef<(() => void) | null>(null);\n  useEffect(() => {\n    // when we unmount, we unregister the autocomplete-function, if it was registered\n    return () => {\n      autocompleteDisposeFun.current?.();\n    };\n  }, []);\n\n  // This should be run in monaco onEditorDidMount\n  return async (editor: monacoTypes.editor.IStandaloneCodeEditor, monaco: Monaco) => {\n    const provider = new CompletionProvider(datasource, monaco, editor);\n    await provider.init();\n    const { dispose } = monaco.languages.registerCompletionItemProvider(langId, provider);\n    autocompleteDisposeFun.current = dispose;\n  };\n}\n\n// we must only run the setup code once\nlet parcaqlSetupDone = false;\nconst langId = 'parca';\n\nfunction ensureParcaQL(monaco: Monaco) {\n  if (parcaqlSetupDone === false) {\n    parcaqlSetupDone = true;\n    const { aliases, extensions, mimetypes, def } = languageDefinition;\n    monaco.languages.register({ id: langId, aliases, extensions, mimetypes });\n    monaco.languages.setMonarchTokensProvider(langId, def.language);\n    monaco.languages.setLanguageConfiguration(langId, def.languageConfiguration);\n  }\n}\n\nconst getStyles = () => {\n  return {\n    queryField: css`\n      flex: 1;\n      // Not exactly sure but without this the editor doe not shrink after resizing (so you can make it bigger but not\n      // smaller). At the same time this does not actually make the editor 100px because it has flex 1 so I assume\n      // this should sort of act as a flex-basis (but flex-basis does not work for this). So yeah CSS magic.\n      width: 100px;\n    `,\n    wrapper: css`\n      display: flex;\n      flex: 1;\n      border: 1px solid rgba(36, 41, 46, 0.3);\n      border-radius: 2px;\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\nimport { useToggle } from 'react-use';\n\nimport { CoreApp, GrafanaTheme2 } from '@grafana/data';\nimport { Icon, useStyles2, RadioButtonGroup, Field } from '@grafana/ui';\n\nimport { Query } from '../types';\n\nimport { Stack } from './Stack';\n\nexport interface Props {\n  query: Query;\n  onQueryTypeChange: (val: Query['queryType']) => void;\n  app?: CoreApp;\n}\n\nconst rangeOptions: Array<{ value: Query['queryType']; label: string; description: string }> = [\n  { value: 'metrics', label: 'Metric', description: 'Return aggregated metrics' },\n  { value: 'profile', label: 'Profile', description: 'Return profile' },\n  { value: 'both', label: 'Both', description: 'Return both metric and profile data' },\n];\n\nfunction getOptions(app?: CoreApp) {\n  if (app === CoreApp.Explore) {\n    return rangeOptions;\n  }\n  return rangeOptions.filter((option) => option.value !== 'both');\n}\n\n/**\n * Base on QueryOptionGroup component from grafana/ui but that is not available yet.\n */\nexport function QueryOptions({ query, onQueryTypeChange, app }: Props) {\n  const [isOpen, toggleOpen] = useToggle(false);\n  const styles = useStyles2(getStyles);\n  const options = getOptions(app);\n\n  return (\n    <Stack gap={0} direction=\"column\">\n      <div className={styles.header} onClick={toggleOpen} title=\"Click to edit options\">\n        <div className={styles.toggle}>\n          <Icon name={isOpen ? 'angle-down' : 'angle-right'} />\n        </div>\n        <h6 className={styles.title}>Options</h6>\n        {!isOpen && (\n          <div className={styles.description}>\n            <span>Type: {query.queryType}</span>\n          </div>\n        )}\n      </div>\n      {isOpen && (\n        <div className={styles.body}>\n          <Field label={'Query Type'}>\n            <RadioButtonGroup options={options} value={query.queryType} onChange={onQueryTypeChange} />\n          </Field>\n        </div>\n      )}\n    </Stack>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    switchLabel: css({\n      color: theme.colors.text.secondary,\n      cursor: 'pointer',\n      fontSize: theme.typography.bodySmall.fontSize,\n      '&:hover': {\n        color: theme.colors.text.primary,\n      },\n    }),\n    header: css({\n      display: 'flex',\n      cursor: 'pointer',\n      alignItems: 'baseline',\n      color: theme.colors.text.primary,\n      '&:hover': {\n        background: theme.colors.emphasize(theme.colors.background.primary, 0.03),\n      },\n    }),\n    title: css({\n      flexGrow: 1,\n      overflow: 'hidden',\n      fontSize: theme.typography.bodySmall.fontSize,\n      fontWeight: theme.typography.fontWeightMedium,\n      margin: 0,\n    }),\n    description: css({\n      color: theme.colors.text.secondary,\n      fontSize: theme.typography.bodySmall.fontSize,\n      paddingLeft: theme.spacing(2),\n      gap: theme.spacing(2),\n      display: 'flex',\n    }),\n    body: css({\n      display: 'flex',\n      paddingTop: theme.spacing(2),\n      gap: theme.spacing(2),\n      flexWrap: 'wrap',\n    }),\n    toggle: css({\n      color: theme.colors.text.secondary,\n      marginRight: `${theme.spacing(1)}`,\n    }),\n  };\n};\n","import { defaults } from 'lodash';\nimport React, { useMemo, useState } from 'react';\nimport { useMount } from 'react-use';\n\nimport { CoreApp, QueryEditorProps } from '@grafana/data';\nimport { ButtonCascader, CascaderOption } from '@grafana/ui';\n\nimport { defaultParca, defaultParcaQueryType, Parca } from '../dataquery.gen';\nimport { ParcaDataSource } from '../datasource';\nimport { ParcaDataSourceOptions, ProfileTypeMessage, Query } from '../types';\n\nimport { EditorRow } from './EditorRow';\nimport { EditorRows } from './EditorRows';\nimport { LabelsEditor } from './LabelsEditor';\nimport { QueryOptions } from './QueryOptions';\n\nexport type Props = QueryEditorProps<ParcaDataSource, Query, ParcaDataSourceOptions>;\n\nexport const defaultQuery: Partial<Parca> = {\n  ...defaultParca,\n  queryType: defaultParcaQueryType,\n};\n\nexport function QueryEditor(props: Props) {\n  const [profileTypes, setProfileTypes] = useState<ProfileTypeMessage[]>([]);\n\n  function onProfileTypeChange(value: string[], selectedOptions: CascaderOption[]) {\n    if (selectedOptions.length === 0) {\n      return;\n    }\n    const id = selectedOptions[selectedOptions.length - 1].value;\n    if (typeof id !== 'string') {\n      throw new Error('id is not string');\n    }\n    props.onChange({ ...props.query, profileTypeId: id });\n  }\n\n  function onLabelSelectorChange(value: string) {\n    props.onChange({ ...props.query, labelSelector: value });\n  }\n\n  function handleRunQuery(value: string) {\n    props.onChange({ ...props.query, labelSelector: value });\n    props.onRunQuery();\n  }\n\n  useMount(async () => {\n    const profileTypes = await props.datasource.getProfileTypes();\n    setProfileTypes(profileTypes);\n  });\n\n  // Turn profileTypes into cascader options\n  const cascaderOptions = useMemo(() => {\n    let mainTypes = new Map<string, CascaderOption>();\n    // Classify profile types by name then sample type.\n    for (let profileType of profileTypes) {\n      if (!mainTypes.has(profileType.name)) {\n        mainTypes.set(profileType.name, {\n          label: profileType.name,\n          value: profileType.ID,\n          children: [],\n        });\n      }\n      mainTypes.get(profileType.name)?.children?.push({\n        label: profileType.sample_type,\n        value: profileType.ID,\n      });\n    }\n    return Array.from(mainTypes.values());\n  }, [profileTypes]);\n\n  const selectedProfileName = useMemo(() => {\n    if (!profileTypes) {\n      return 'Loading';\n    }\n    const profile = profileTypes.find((type) => type.ID === props.query.profileTypeId);\n    if (!profile) {\n      return 'Select a profile type';\n    }\n\n    return profile.name + ' - ' + profile.sample_type;\n  }, [props.query.profileTypeId, profileTypes]);\n\n  let query = normalizeQuery(props.query, props.app);\n\n  return (\n    <EditorRows>\n      <EditorRow stackProps={{ wrap: false, gap: 1 }}>\n        <ButtonCascader onChange={onProfileTypeChange} options={cascaderOptions} buttonProps={{ variant: 'secondary' }}>\n          {selectedProfileName}\n        </ButtonCascader>\n        <LabelsEditor\n          value={query.labelSelector}\n          onChange={onLabelSelectorChange}\n          datasource={props.datasource}\n          onRunQuery={handleRunQuery}\n        />\n      </EditorRow>\n      <EditorRow>\n        <QueryOptions\n          query={query}\n          onQueryTypeChange={(val) => {\n            props.onChange({ ...query, queryType: val });\n          }}\n          app={props.app}\n        />\n      </EditorRow>\n    </EditorRows>\n  );\n}\n\nfunction normalizeQuery(query: Query, app?: CoreApp) {\n  let normalized = defaults(query, defaultQuery);\n  if (app !== CoreApp.Explore && normalized.queryType === 'both') {\n    // In dashboards and other places, we can't show both types of graphs at the same time.\n    // This will also be a default when having 'both' query and adding it from explore to dashboard\n    normalized.queryType = 'profile';\n  }\n  return normalized;\n}\n","import { Observable, of } from 'rxjs';\n\nimport { DataQueryRequest, DataQueryResponse, DataSourceInstanceSettings } from '@grafana/data';\nimport { DataSourceWithBackend } from '@grafana/runtime';\n\nimport { ParcaDataSourceOptions, Query, ProfileTypeMessage } from './types';\n\nexport class ParcaDataSource extends DataSourceWithBackend<Query, ParcaDataSourceOptions> {\n  constructor(instanceSettings: DataSourceInstanceSettings<ParcaDataSourceOptions>) {\n    super(instanceSettings);\n  }\n\n  query(request: DataQueryRequest<Query>): Observable<DataQueryResponse> {\n    if (!request.targets.every((q) => q.profileTypeId)) {\n      // When changing data source in explore, firs query can be sent without filled in profileTypeId\n      return of({ data: [] });\n    }\n\n    return super.query(request);\n  }\n\n  async getProfileTypes(): Promise<ProfileTypeMessage[]> {\n    return await super.getResource('profileTypes');\n  }\n\n  async getLabelNames(): Promise<string[]> {\n    return await super.getResource('labelNames');\n  }\n\n  async getLabelValues(labelName: string): Promise<string[]> {\n    return await super.getResource('labelValues', { label: labelName });\n  }\n}\n","import { DataSourcePlugin } from '@grafana/data';\n\nimport { ConfigEditor } from './ConfigEditor';\nimport { QueryEditor } from './QueryEditor/QueryEditor';\nimport { ParcaDataSource } from './datasource';\nimport { Query, ParcaDataSourceOptions } from './types';\n\nexport const plugin = new DataSourcePlugin<ParcaDataSource, Query, ParcaDataSourceOptions>(ParcaDataSource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor);\n","import { useRef } from 'react';\nvar useLatest = function (value) {\n    var ref = useRef(value);\n    ref.current = value;\n    return ref;\n};\nexport default useLatest;\n","import useEffectOnce from './useEffectOnce';\nvar useMount = function (fn) {\n    useEffectOnce(function () {\n        fn();\n    });\n};\nexport default useMount;\n"],"names":["ConfigEditor","props","options","onOptionsChange","DataSourceHttpSettings","config","SecureSocksProxySettings","DataQueryModelVersion","defaultParcaQueryType","defaultParca","Stack","styles","theme","getStyles","EditorRow","children","stackProps","EditorRows","languageDefinition","CompletionProvider","datasource","monaco","editor","names","acc","name","model","position","range","offset","getRangeAndOffset","situation","getSituation","completionItems","maxIndexDigits","item","index","getMonacoCompletionItemKind","key","values","val","type","labelNameRegex","labelValueRegex","labelPairsRegex","inLabelValueRegex","inLabelNameRegex","text","matches","existingLabels","match","_","value","matchLabelValue","word","positionClone","LabelsEditor","setupAutocompleteFn","useAutocomplete","onRunQueryRef","useLatest","containerRef","CodeEditor","langId","ensureParcaQL","updateElementHeight","containerDiv","pixelHeight","EDITOR_HEIGHT_OFFSET","pixelWidth","autocompleteDisposeFun","provider","dispose","parcaqlSetupDone","aliases","extensions","mimetypes","def","rangeOptions","getOptions","app","option","QueryOptions","query","onQueryTypeChange","isOpen","toggleOpen","useToggle","Icon","Field","RadioButtonGroup","defaultQuery","QueryEditor","profileTypes","setProfileTypes","onProfileTypeChange","selectedOptions","id","onLabelSelectorChange","handleRunQuery","useMount","cascaderOptions","mainTypes","profileType","selectedProfileName","profile","normalizeQuery","ButtonCascader","normalized","ParcaDataSource","DataSourceWithBackend","instanceSettings","request","q","of","labelName","ref","fn"],"sourceRoot":""}