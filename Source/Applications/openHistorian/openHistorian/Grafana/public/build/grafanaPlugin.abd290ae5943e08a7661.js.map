{"version":3,"file":"grafanaPlugin.abd290ae5943e08a7661.js","mappings":"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","sources":["webpack://grafana/./public/app/features/live/info.ts","webpack://grafana/./public/app/plugins/datasource/grafana/components/SearchEditor.tsx","webpack://grafana/./public/app/plugins/datasource/grafana/components/QueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/grafana/module.ts"],"sourcesContent":["import { SelectableValue, dataFrameFromJSON } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\n\ninterface ChannelInfo {\n  channel: string;\n  minute_rate: number; //\n  data: unknown; // the last payload\n}\n\ninterface ManagedChannels {\n  channels: ChannelInfo[];\n}\n\ninterface ChannelSelectionInfo {\n  channels: Array<SelectableValue<string>>;\n  channelFields: Record<string, Array<SelectableValue<string>>>;\n}\n\nexport async function getManagedChannelInfo(): Promise<ChannelSelectionInfo> {\n  return getBackendSrv()\n    .get<ManagedChannels>('api/live/list')\n    .then((v) => {\n      const channelInfo = v.channels ?? [];\n      const channelFields: Record<string, Array<SelectableValue<string>>> = {};\n      const channels: Array<SelectableValue<string>> = channelInfo.map((c) => {\n        if (c.data) {\n          const distinctFields = new Set<string>();\n          const frame = dataFrameFromJSON(c.data);\n          for (const f of frame.fields) {\n            distinctFields.add(f.name);\n          }\n          channelFields[c.channel] = Array.from(distinctFields).map((n) => ({\n            value: n,\n            label: n,\n          }));\n        }\n        return {\n          value: c.channel,\n          label: c.channel + ' [' + c.minute_rate + ' msg/min]',\n        };\n      });\n      return { channelFields, channels };\n    });\n}\n","import { useEffect, useState } from 'react';\nimport * as React from 'react';\n\nimport { InlineField, Input, InlineFieldRow, CodeEditor } from '@grafana/ui';\nimport { SearchQuery } from 'app/features/search/service';\n\ninterface Props {\n  value: SearchQuery;\n  onChange: (value: SearchQuery) => void;\n}\n\nexport default function SearchEditor({ value, onChange }: Props) {\n  const [json, setJSON] = useState('');\n  const [query, setQuery] = useState(value.query ?? '');\n\n  useEffect(() => {\n    const emptySearchQuery: SearchQuery = {\n      query: '*',\n      location: '', // general, etc\n      ds_uid: '',\n      sort: '',\n      tags: [],\n      kind: [],\n      explain: false,\n      facet: [{ field: 'kind' }, { field: 'tags' }],\n      from: 0,\n      limit: 20,\n    };\n\n    setJSON(JSON.stringify({ ...emptySearchQuery, ...value }, null, 2));\n  }, [value]);\n\n  const handleSearchBlur = () => {\n    if (query !== value.query) {\n      onChange({ ...value, query });\n    }\n  };\n\n  const handleSearchEnterKey = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key !== 'Enter') {\n      return;\n    }\n    handleSearchBlur();\n  };\n\n  const onSaveSearchJSON = (rawSearchJSON: string) => {\n    try {\n      const searchQuery: SearchQuery = JSON.parse(rawSearchJSON);\n      onChange(searchQuery);\n      setQuery(searchQuery.query ?? '');\n    } catch (ex) {\n      console.log('UNABLE TO parse search', rawSearchJSON, ex);\n    }\n  };\n\n  return (\n    <>\n      <InlineFieldRow>\n        <InlineField label=\"Query\" grow={true} labelWidth={12}>\n          <Input\n            placeholder=\"Everything\"\n            value={query}\n            onChange={(e) => setQuery(e.currentTarget.value)}\n            onKeyDown={handleSearchEnterKey}\n            onBlur={handleSearchBlur}\n            spellCheck={false}\n          />\n        </InlineField>\n      </InlineFieldRow>\n      <CodeEditor\n        height={300}\n        language=\"json\"\n        value={json}\n        onBlur={onSaveSearchJSON}\n        onSave={onSaveSearchJSON}\n        showMiniMap={false}\n        showLineNumbers={true}\n      />\n    </>\n  );\n}\n","import { css } from '@emotion/css';\nimport pluralize from 'pluralize';\nimport { PureComponent } from 'react';\nimport * as React from 'react';\nimport { DropEvent, FileRejection } from 'react-dropzone';\n\nimport {\n  QueryEditorProps,\n  SelectableValue,\n  rangeUtil,\n  DataQueryRequest,\n  DataFrameJSON,\n  dataFrameToJSON,\n  GrafanaTheme2,\n  getValueFormat,\n  formattedValueToString,\n  Field,\n} from '@grafana/data';\nimport { config, getDataSourceSrv, reportInteraction } from '@grafana/runtime';\nimport {\n  InlineField,\n  Select,\n  Alert,\n  Input,\n  InlineFieldRow,\n  InlineLabel,\n  FileDropzone,\n  FileDropzoneDefaultChildren,\n  DropzoneFile,\n  Themeable2,\n  withTheme2,\n  Stack,\n} from '@grafana/ui';\nimport { hasAlphaPanels } from 'app/core/config';\nimport * as DFImport from 'app/features/dataframe-import';\nimport { getManagedChannelInfo } from 'app/features/live/info';\nimport { SearchQuery } from 'app/features/search/service';\n\nimport { GrafanaDatasource } from '../datasource';\nimport { defaultQuery, GrafanaQuery, GrafanaQueryType } from '../types';\n\nimport SearchEditor from './SearchEditor';\n\ninterface Props extends QueryEditorProps<GrafanaDatasource, GrafanaQuery>, Themeable2 {}\n\nconst labelWidth = 12;\n\ninterface State {\n  channels: Array<SelectableValue<string>>;\n  channelFields: Record<string, Array<SelectableValue<string>>>;\n  folders?: Array<SelectableValue<string>>;\n}\n\nexport class UnthemedQueryEditor extends PureComponent<Props, State> {\n  state: State = { channels: [], channelFields: {} };\n\n  queryTypes: Array<SelectableValue<GrafanaQueryType>> = [\n    {\n      label: 'Random Walk',\n      value: GrafanaQueryType.RandomWalk,\n      description: 'Random signal within the selected time range',\n    },\n    {\n      label: 'Live Measurements',\n      value: GrafanaQueryType.LiveMeasurements,\n      description: 'Stream real-time measurements from Grafana',\n    },\n    {\n      label: 'List public files',\n      value: GrafanaQueryType.List,\n      description: 'Show directory listings for public resources',\n    },\n  ];\n\n  constructor(props: Props) {\n    super(props);\n\n    if (config.featureToggles.panelTitleSearch && hasAlphaPanels) {\n      this.queryTypes.push({\n        label: 'Search',\n        value: GrafanaQueryType.Search,\n        description: 'Search for grafana resources',\n      });\n    }\n    if (config.featureToggles.unifiedStorageSearch) {\n      this.queryTypes.push({\n        label: 'Search (experimental)',\n        value: GrafanaQueryType.SearchNext,\n        description: 'Search for grafana resources',\n      });\n    }\n    if (config.featureToggles.editPanelCSVDragAndDrop) {\n      this.queryTypes.push({\n        label: 'Spreadsheet or snapshot',\n        value: GrafanaQueryType.Snapshot,\n        description: 'Query an uploaded spreadsheet or a snapshot',\n      });\n    }\n  }\n\n  loadChannelInfo() {\n    getManagedChannelInfo().then((v) => {\n      this.setState(v);\n    });\n  }\n\n  loadFolderInfo() {\n    const query: DataQueryRequest<GrafanaQuery> = {\n      targets: [{ queryType: GrafanaQueryType.List, refId: 'A' }],\n    } as any;\n\n    getDataSourceSrv()\n      .get('-- Grafana --')\n      .then((ds) => {\n        const gds = ds as GrafanaDatasource;\n        gds.query(query).subscribe({\n          next: (rsp) => {\n            if (rsp.data.length) {\n              const names: Field = rsp.data[0].fields[0];\n              const folders = names.values.map((v) => ({\n                value: v,\n                label: v,\n              }));\n              this.setState({ folders });\n            }\n          },\n        });\n      });\n  }\n\n  componentDidMount() {\n    this.loadChannelInfo();\n  }\n\n  onQueryTypeChange = (sel: SelectableValue<GrafanaQueryType>) => {\n    const { onChange, query, onRunQuery } = this.props;\n    onChange({ ...query, queryType: sel.value! });\n    onRunQuery();\n\n    // Reload the channel list\n    this.loadChannelInfo();\n  };\n\n  onChannelChange = (sel: SelectableValue<string>) => {\n    const { onChange, query, onRunQuery } = this.props;\n    onChange({ ...query, channel: sel?.value });\n    onRunQuery();\n  };\n\n  onFieldNamesChange = (item: SelectableValue<string>) => {\n    const { onChange, query, onRunQuery } = this.props;\n    let fields: string[] = [];\n    if (Array.isArray(item)) {\n      fields = item.map((v) => v.value);\n    } else if (item.value) {\n      fields = [item.value];\n    }\n\n    // When adding the first field, also add time (if it exists)\n    if (fields.length === 1 && !query.filter?.fields?.length && query.channel) {\n      const names = this.state.channelFields[query.channel] ?? [];\n      const tf = names.find((f) => f.value === 'time' || f.value === 'Time');\n      if (tf && tf.value && tf.value !== fields[0]) {\n        fields = [tf.value, ...fields];\n      }\n    }\n\n    onChange({\n      ...query,\n      filter: {\n        ...query.filter,\n        fields,\n      },\n    });\n    onRunQuery();\n  };\n\n  checkAndUpdateValue = (key: keyof GrafanaQuery, txt: string) => {\n    const { onChange, query, onRunQuery } = this.props;\n    if (key === 'buffer') {\n      let buffer: number | undefined;\n      if (txt) {\n        try {\n          buffer = rangeUtil.intervalToSeconds(txt) * 1000;\n        } catch (err) {\n          console.warn('ERROR', err);\n        }\n      }\n      onChange({\n        ...query,\n        buffer,\n      });\n    } else {\n      onChange({\n        ...query,\n        [key]: txt,\n      });\n    }\n    onRunQuery();\n  };\n\n  handleEnterKey = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key !== 'Enter') {\n      return;\n    }\n    this.checkAndUpdateValue('buffer', e.currentTarget.value);\n  };\n\n  handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n    this.checkAndUpdateValue('buffer', e.currentTarget.value);\n  };\n\n  renderMeasurementsQuery() {\n    let { channel, filter, buffer } = this.props.query;\n    let { channels, channelFields } = this.state;\n    let currentChannel = channels.find((c) => c.value === channel);\n    if (channel && !currentChannel) {\n      currentChannel = {\n        value: channel,\n        label: channel,\n        description: `Connected to ${channel}`,\n      };\n      channels = [currentChannel, ...channels];\n    }\n\n    const distinctFields = new Set<string>();\n    const fields: Array<SelectableValue<string>> = channel ? (channelFields[channel] ?? []) : [];\n    // if (data && data.series?.length) {\n    //   for (const frame of data.series) {\n    //     for (const field of frame.fields) {\n    //       if (distinctFields.has(field.name) || !field.name) {\n    //         continue;\n    //       }\n    //       fields.push({\n    //         value: field.name,\n    //         label: field.name,\n    //         description: `(${getFrameDisplayName(frame)} / ${field.type})`,\n    //       });\n    //       distinctFields.add(field.name);\n    //     }\n    //   }\n    // }\n    if (filter?.fields) {\n      for (const f of filter.fields) {\n        if (!distinctFields.has(f)) {\n          fields.push({\n            value: f,\n            label: `${f} (not loaded)`,\n            description: `Configured, but not found in the query results`,\n          });\n          distinctFields.add(f);\n        }\n      }\n    }\n\n    let formattedTime = '';\n    if (buffer) {\n      formattedTime = rangeUtil.secondsToHms(buffer / 1000);\n    }\n\n    return (\n      <>\n        <InlineField label=\"Channel\" grow={true} labelWidth={labelWidth}>\n          <Select\n            options={channels}\n            value={currentChannel || ''}\n            onChange={this.onChannelChange}\n            allowCustomValue={true}\n            backspaceRemovesValue={true}\n            placeholder=\"Select measurements channel\"\n            isClearable={true}\n            noOptionsMessage=\"Enter channel name\"\n            formatCreateLabel={(input: string) => `Connect to: ${input}`}\n          />\n        </InlineField>\n\n        {channel && (\n          <Stack direction=\"row\" gap={0}>\n            <InlineField label=\"Fields\" grow={true} labelWidth={labelWidth}>\n              <Select\n                options={fields}\n                value={filter?.fields || []}\n                onChange={this.onFieldNamesChange}\n                allowCustomValue={true}\n                backspaceRemovesValue={true}\n                placeholder=\"All fields\"\n                isClearable={true}\n                noOptionsMessage=\"Unable to list all fields\"\n                formatCreateLabel={(input: string) => `Field: ${input}`}\n                isSearchable={true}\n                isMulti={true}\n              />\n            </InlineField>\n            <InlineField label=\"Buffer\">\n              <Input\n                placeholder=\"Auto\"\n                width={12}\n                defaultValue={formattedTime}\n                onKeyDown={this.handleEnterKey}\n                onBlur={this.handleBlur}\n                spellCheck={false}\n              />\n            </InlineField>\n          </Stack>\n        )}\n\n        <Alert title=\"Grafana Live - Measurements\" severity=\"info\">\n          This supports real-time event streams in Grafana core. This feature is under heavy development. Expect the\n          interfaces and structures to change as this becomes more production ready.\n        </Alert>\n      </>\n    );\n  }\n\n  onFolderChanged = (sel: SelectableValue<string>) => {\n    const { onChange, query, onRunQuery } = this.props;\n    onChange({ ...query, path: sel?.value });\n    onRunQuery();\n  };\n\n  renderListPublicFiles() {\n    let { path } = this.props.query;\n    let { folders } = this.state;\n    if (!folders) {\n      folders = [];\n      this.loadFolderInfo();\n    }\n    const currentFolder = folders.find((f) => f.value === path);\n    if (path && !currentFolder) {\n      folders = [\n        ...folders,\n        {\n          value: path,\n          label: path,\n        },\n      ];\n    }\n\n    return (\n      <InlineFieldRow>\n        <InlineField label=\"Path\" grow={true} labelWidth={labelWidth}>\n          <Select\n            options={folders}\n            value={currentFolder || ''}\n            onChange={this.onFolderChanged}\n            allowCustomValue={true}\n            backspaceRemovesValue={true}\n            placeholder=\"Select folder\"\n            isClearable={true}\n            formatCreateLabel={(input: string) => `Folder: ${input}`}\n          />\n        </InlineField>\n      </InlineFieldRow>\n    );\n  }\n\n  // Skip rendering the file list as we're handling that in this component instead.\n  fileListRenderer = (file: DropzoneFile, removeFile: (file: DropzoneFile) => void) => {\n    return null;\n  };\n\n  onFileDrop = (acceptedFiles: File[], fileRejections: FileRejection[], event: DropEvent) => {\n    DFImport.filesToDataframes(acceptedFiles).subscribe((next) => {\n      const snapshot: DataFrameJSON[] = [];\n      next.dataFrames.forEach((df) => {\n        const dataframeJson = dataFrameToJSON(df);\n        snapshot.push(dataframeJson);\n      });\n      this.props.onChange({\n        ...this.props.query,\n        file: { name: next.file.name, size: next.file.size },\n        queryType: GrafanaQueryType.Snapshot,\n        snapshot,\n      });\n      this.props.onRunQuery();\n\n      reportInteraction('grafana_datasource_drop_files', {\n        number_of_files: fileRejections.length + acceptedFiles.length,\n        accepted_files: acceptedFiles.map((a) => {\n          return { type: a.type, size: a.size };\n        }),\n        rejected_files: fileRejections.map((r) => {\n          return { type: r.file.type, size: r.file.size };\n        }),\n      });\n    });\n  };\n\n  renderSnapshotQuery() {\n    const { query, theme } = this.props;\n    const file = query.file;\n    const styles = getStyles(theme);\n    const fileSize = getValueFormat('decbytes')(file ? file.size : 0);\n\n    return (\n      <>\n        <InlineFieldRow>\n          <InlineField label=\"Snapshot\" grow={true} labelWidth={labelWidth}>\n            <InlineLabel>{pluralize('frame', query.snapshot?.length ?? 0, true)}</InlineLabel>\n          </InlineField>\n        </InlineFieldRow>\n        {config.featureToggles.editPanelCSVDragAndDrop && (\n          <>\n            <FileDropzone\n              readAs=\"readAsArrayBuffer\"\n              fileListRenderer={this.fileListRenderer}\n              options={{\n                onDrop: this.onFileDrop,\n                maxSize: DFImport.maxFileSize,\n                multiple: false,\n                accept: DFImport.acceptedFiles,\n              }}\n            >\n              <FileDropzoneDefaultChildren\n                primaryText={this.props?.query?.file ? 'Replace file' : 'Drop file here or click to upload'}\n              />\n            </FileDropzone>\n            {file && (\n              <div className={styles.file}>\n                <span>{file?.name}</span>\n                <span>\n                  <span>{formattedValueToString(fileSize)}</span>\n                </span>\n              </div>\n            )}\n          </>\n        )}\n      </>\n    );\n  }\n\n  onSearchChange = (search: SearchQuery) => {\n    const { query, onChange, onRunQuery } = this.props;\n\n    onChange({\n      ...query,\n      search,\n    });\n    onRunQuery();\n  };\n\n  onSearchNextChange = (search: SearchQuery) => {\n    const { query, onChange, onRunQuery } = this.props;\n\n    onChange({\n      ...query,\n      searchNext: search,\n    });\n    onRunQuery();\n  };\n\n  render() {\n    const query = {\n      ...defaultQuery,\n      ...this.props.query,\n    };\n\n    const { queryType } = query;\n\n    // Only show \"snapshot\" when it already exists\n    let queryTypes = this.queryTypes;\n    if (queryType === GrafanaQueryType.Snapshot && !config.featureToggles.editPanelCSVDragAndDrop) {\n      queryTypes = [\n        ...this.queryTypes,\n        {\n          label: 'Snapshot',\n          value: queryType,\n        },\n      ];\n    }\n\n    return (\n      <>\n        {queryType === GrafanaQueryType.Search && (\n          <Alert title=\"Grafana Search\" severity=\"info\">\n            Using this datasource to call the new search system is experimental, and subject to change at any time\n            without notice.\n          </Alert>\n        )}\n        <InlineFieldRow>\n          <InlineField label=\"Query type\" grow={true} labelWidth={labelWidth}>\n            <Select\n              options={queryTypes}\n              value={queryTypes.find((v) => v.value === queryType) || queryTypes[0]}\n              onChange={this.onQueryTypeChange}\n            />\n          </InlineField>\n        </InlineFieldRow>\n        {queryType === GrafanaQueryType.LiveMeasurements && this.renderMeasurementsQuery()}\n        {queryType === GrafanaQueryType.List && this.renderListPublicFiles()}\n        {queryType === GrafanaQueryType.Snapshot && this.renderSnapshotQuery()}\n        {queryType === GrafanaQueryType.Search && (\n          <SearchEditor value={query.search ?? {}} onChange={this.onSearchChange} />\n        )}\n        {queryType === GrafanaQueryType.SearchNext && (\n          <SearchEditor value={query.searchNext ?? {}} onChange={this.onSearchNextChange} />\n        )}\n      </>\n    );\n  }\n}\n\nexport const QueryEditor = withTheme2(UnthemedQueryEditor);\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    file: css`\n      width: 100%;\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n      justify-content: space-between;\n      padding: ${theme.spacing(2)};\n      border: 1px dashed ${theme.colors.border.medium};\n      background-color: ${theme.colors.background.secondary};\n      margin-top: ${theme.spacing(1)};\n    `,\n  };\n}\n","import { DataSourcePlugin } from '@grafana/data';\n\nimport { QueryEditor } from './components/QueryEditor';\nimport { GrafanaDatasource } from './datasource';\nimport { GrafanaQuery } from './types';\n\nexport const plugin = new DataSourcePlugin<GrafanaDatasource, GrafanaQuery>(GrafanaDatasource).setQueryEditor(\n  QueryEditor\n);\n"],"names":["getManagedChannelInfo","v","channelInfo","channelFields","channels","c","distinctFields","frame","f","n","SearchEditor","value","onChange","json","setJSON","query","setQuery","handleSearchBlur","handleSearchEnterKey","e","onSaveSearchJSON","rawSearchJSON","searchQuery","ex","InlineFieldRow","InlineField","Input","CodeEditor","labelWidth","UnthemedQueryEditor","props","sel","onRunQuery","item","fields","tf","key","txt","buffer","err","file","removeFile","acceptedFiles","fileRejections","event","next","snapshot","df","dataframeJson","a","r","search","config","ds","rsp","folders","channel","filter","currentChannel","formattedTime","Select","input","Stack","Alert","path","currentFolder","theme","styles","getStyles","fileSize","InlineLabel","FileDropzone","queryType","queryTypes","QueryEditor"],"sourceRoot":""}