{"version":3,"file":"3865.f9b0cdf4244f8a62805d.js","mappings":"4PAgBA,MAAMA,KAAoB,OAAC,IAAc,CAAC,OAAO,uBAAwB,GAkDzE,EAhDiC,CAAC,CAAE,MAAAC,CAAM,IAAa,CACrD,KAAM,CAAE,qBAAAC,CAAqB,KAAI,MAAgB,EAC3CC,EAAcF,GAAO,OAAO,KAAO,mBAAmBA,GAAO,OAAO,IAAI,EAAI,OAE5E,CACJ,YAAaG,EACb,UAAAC,EACA,MAAAC,CACF,KAAI,MAA2B,CAAE,aAAcJ,GAAwB,GAAI,IAAKC,GAAe,EAAG,CAAC,EAE7F,CACJ,YAAaI,EACb,UAAWC,EACX,MAAOC,CACT,KAAI,MAAyB,CAAE,aAAcP,GAAwB,EAAG,CAAC,EAEzE,GAAI,CAACA,EACH,SAAO,OAAC,IAAc,CAAC,OAAO,cAAe,GAG/C,GAAI,CAACC,EACH,SAAO,OAAC,IAAc,CAAC,OAAO,uBAAwB,GAGxD,GAAIE,GAAaG,EACf,SAAO,OAAC,IAAkB,CAAC,KAAK,+BAAgC,GAGlE,GAAIF,GAASG,GAAkB,CAACL,GAAY,CAACG,EAC3C,SAAO,KAAgBD,CAAK,EAC1BN,KAEA,OAAC,IAAK,CAAC,MAAM,sCAAsC,SAAS,QACzD,kBAAmBM,CAAK,EAC3B,EAIJ,MAAMI,KAAiB,KAAmBN,EAAS,MAAOG,GAAW,IAAKI,GAAMA,EAAE,KAAK,GAAK,CAAC,CAAC,EAE9F,SACE,OAAC,MACC,aAAcT,EACd,QAAS,CAAE,MAAOQ,EAAgB,WAAS,KAA6BN,EAAS,OAAO,CAAE,EAC5F,CAEJ,C,mCChEO,SAASQ,EAAmBC,EAAsBC,EAA0B,CACjF,MAAMC,EAAmBF,EAAa,QAAQ,sBAAuB,EAAE,EAAE,KAAK,EAE9E,IAAIG,EAAU,GAAGD,CAAgB,UAEjC,QAASE,EAAI,EAAGH,EAAe,SAASE,CAAO,EAAGC,IAChDD,EAAU,GAAGD,CAAgB,UAAUE,CAAC,IAG1C,OAAOD,CACT,C","sources":["webpack://grafana/./public/app/features/alerting/unified/components/contact-points/DuplicateMessageTemplate.tsx","webpack://grafana/./public/app/features/alerting/unified/utils/duplicate.ts"],"sourcesContent":["import { RouteChildrenProps } from 'react-router-dom';\n\nimport { Alert, LoadingPlaceholder } from '@grafana/ui';\nimport { EntityNotFound } from 'app/core/components/PageNotFound/EntityNotFound';\n\nimport { isNotFoundError } from '../../api/util';\nimport { useAlertmanager } from '../../state/AlertmanagerContext';\nimport { generateCopiedName } from '../../utils/duplicate';\nimport { stringifyErrorLike } from '../../utils/misc';\nimport { updateDefinesWithUniqueValue } from '../../utils/templates';\nimport { TemplateForm } from '../receivers/TemplateForm';\n\nimport { useGetNotificationTemplate, useNotificationTemplates } from './useNotificationTemplates';\n\ntype Props = RouteChildrenProps<{ name: string }>;\n\nconst notFoundComponent = <EntityNotFound entity=\"Notification template\" />;\n\nconst DuplicateMessageTemplate = ({ match }: Props) => {\n  const { selectedAlertmanager } = useAlertmanager();\n  const templateUid = match?.params.name ? decodeURIComponent(match?.params.name) : undefined;\n\n  const {\n    currentData: template,\n    isLoading,\n    error,\n  } = useGetNotificationTemplate({ alertmanager: selectedAlertmanager ?? '', uid: templateUid ?? '' });\n\n  const {\n    currentData: templates,\n    isLoading: templatesLoading,\n    error: templatesError,\n  } = useNotificationTemplates({ alertmanager: selectedAlertmanager ?? '' });\n\n  if (!selectedAlertmanager) {\n    return <EntityNotFound entity=\"Alertmanager\" />;\n  }\n\n  if (!templateUid) {\n    return <EntityNotFound entity=\"Notification template\" />;\n  }\n\n  if (isLoading || templatesLoading) {\n    return <LoadingPlaceholder text=\"Loading notification template\" />;\n  }\n\n  if (error || templatesError || !template || !templates) {\n    return isNotFoundError(error) ? (\n      notFoundComponent\n    ) : (\n      <Alert title=\"Error loading notification template\" severity=\"error\">\n        {stringifyErrorLike(error)}\n      </Alert>\n    );\n  }\n\n  const duplicatedName = generateCopiedName(template.title, templates?.map((t) => t.title) ?? []);\n\n  return (\n    <TemplateForm\n      alertmanager={selectedAlertmanager}\n      prefill={{ title: duplicatedName, content: updateDefinesWithUniqueValue(template.content) }}\n    />\n  );\n};\n\nexport default DuplicateMessageTemplate;\n","export function generateCopiedName(originalName: string, exisitingNames: string[]) {\n  const nonDuplicateName = originalName.replace(/\\(copy( [0-9]+)?\\)$/, '').trim();\n\n  let newName = `${nonDuplicateName} (copy)`;\n\n  for (let i = 2; exisitingNames.includes(newName); i++) {\n    newName = `${nonDuplicateName} (copy ${i})`;\n  }\n\n  return newName;\n}\n"],"names":["notFoundComponent","match","selectedAlertmanager","templateUid","template","isLoading","error","templates","templatesLoading","templatesError","duplicatedName","t","generateCopiedName","originalName","exisitingNames","nonDuplicateName","newName","i"],"sourceRoot":""}