{"version":3,"sources":["webpack:///./public/app/plugins/datasource/postgres/response_parser.ts","webpack:///./public/app/plugins/datasource/postgres/postgres_query.ts","webpack:///./public/app/plugins/datasource/postgres/datasource.ts","webpack:///./public/app/plugins/datasource/postgres/meta_query.ts","webpack:///./public/app/plugins/datasource/postgres/sql_part.ts","webpack:///./public/app/plugins/datasource/postgres/query_ctrl.ts","webpack:///./public/app/plugins/datasource/postgres/config_ctrl.ts","webpack:///./public/app/plugins/datasource/postgres/module.ts","webpack:///./public/app/core/components/sql_part/sql_part.ts"],"names":["ResponseParser","$q","this","prototype","processQueryResult","res","data","results","key","queryRes","series","_c","e_1","tslib_es6","_d","next","done","value","push","target","name","datapoints","points","refId","meta","tables","_e","e_2","_f","table","type","parseMetricFindQueryResult","length","rowCount","columns","rows","textColIndex","findColIndex","valueColIndex","transformToKeyValueList","transformToSimpleList","i","containsKey","text","j","indexOf","lodash_default","a","map","colName","transformAnnotationResponse","options","annotation","timeColumnIndex","textColumnIndex","tagsColumnIndex","reject","message","list","row","time","Math","floor","title","tags","trim","split","PostgresQuery","templateSrv","scopedVars","format","timeColumn","metricColumn","group","where","params","select","rawQuery","interpolateQueryStr","bind","$inject","unquoteIdentifier","substring","replace","quoteIdentifier","String","quoteLiteral","escapeLiteral","hasTimeGroup","find","g","hasMetricColumn","variable","defaultFormatFn","multi","includeAll","join","render","interpolate","rawSql","buildQuery","hasUnixEpochTimecolumn","timeColumnType","buildTimeColumn","alias","query","timeGroup","macro","args","buildMetricColumn","_a","_b","column","buildValueColumn","aggregate","windows","func","overParts","over","curr","prev","buildWhereClause","_this","conditions","tag","index","buildGroupClause","groupSection","part","buildValueColumns","datasource_PostgresDatasource","PostgresDatasource","instanceSettings","backendSrv","timeSrv","queryModel","v","id","jsonData","responseParser","response_parser","postgres_query","interval","timeInterval","queries","filter","targets","hide","intervalMs","maxDataPoints","datasourceId","interpolateVariable","when","datasourceRequest","url","from","range","valueOf","toString","to","then","annotationQuery","metricFindQuery","optionalOptions","interpolatedQuery","timeRange","method","getVersion","getTimescaleDBVersion","testDatasource","status","catch","err","log","targetContainsTemplate","variableExists","PostgresMetaQuery","getOperators","datatype","quoteIdentAsLiteral","findMetricTable","buildSchemaConstraint","buildTableConstraint","includes","parts","buildTableQuery","buildColumnQuery","buildValueQuery","buildDatatypeQuery","buildAggregateQuery","sql_part_index","register","sql_part","style","dynamicLookup","defaultParams","label","quote","postgres_sql_part","def","defaultQuery","query_ctrl_PostgresQueryCtrl","_super","PostgresQueryCtrl","$scope","$injector","uiSegmentSrv","call","panel","metaBuilder","updateProjection","formats","panelCtrl","result","segment","newSegment","tableSegment","html","timeColumnSegment","updateRawSqlAndRefresh","fake","metricColumnSegment","buildSelectMenu","whereAdd","newPlusButton","events","on","onDataReceived","onDataError","refresh","selectParts","create","n","whereParts","groupParts","updatePersistedParts","selectMenu","aggregates","datasource","timescaledb","submenu","postgresVersion","toggleEditorMode","emit","text2","yesText","onConfirm","resetPlusButton","button","plusButton","getTableSegments","transformToSegments","handleQueryError","tableChanged","r","segment_1","timeColumnChanged","all","task1","task2","getTimeColumnSegments","partModel","splice","getMetricColumnSegments","addNone","metricColumnChanged","dataList","lastQueryMeta","lastQueryError","anySeriesFromQuery","error","expandable","variables","config","templateQuoter","unshift","segments","findAggregateIndex","findIndex","p","findWindowIndex","addSelectPart","item","subItem","partType","clone","addGroup","aggIndex","addAlias","windowIndex","aggIndex_1","removeSelectPart","modelsIndex","partIndex","handleSelectPartEvent","evt","handleGroupPartEvent","removeGroup","some","s","handleWherePartEvent","addTemplateVars","newOperators","d","getWhereOptions","addWhereAction","getGroupOptions","e_3","tags_1","tags_1_1","addGroupAction","groupAdd","templateUrl","passwordHandlers","__webpack_require__","PostgresConfigCtrl","datasourceSrv","postgresVersions","current","sslmode","showTimescaleDBHelp","autoDetectFeatures","onPasswordReset","Object","Password","onPasswordChange","loadDatasource","ds","version","Number","major","trunc","minor","toggleTimescaleDBHelp","__webpack_exports__","PostgresAnnotationsQueryCtrl","config_ctrl_PostgresConfigCtrl","module_defaultQuery","XXK+","module","SqlPartDef","SqlPart","lodash__WEBPACK_IMPORTED_MODULE_0__","lodash__WEBPACK_IMPORTED_MODULE_0___default","toUpperCase","wrapOpen","wrapClose","separator","updateParam","strValue","optional"],"mappings":"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","file":"postgresPlugin.3932bda029d2299a9d96.js","sourcesContent":["import _ from 'lodash';\nimport { IQService } from 'angular';\n\nexport default class ResponseParser {\n  constructor(private $q: IQService) {}\n\n  processQueryResult(res: any) {\n    const data: any[] = [];\n\n    if (!res.data.results) {\n      return { data: data };\n    }\n\n    for (const key in res.data.results) {\n      const queryRes = res.data.results[key];\n\n      if (queryRes.series) {\n        for (const series of queryRes.series) {\n          data.push({\n            target: series.name,\n            datapoints: series.points,\n            refId: queryRes.refId,\n            meta: queryRes.meta,\n          });\n        }\n      }\n\n      if (queryRes.tables) {\n        for (const table of queryRes.tables) {\n          table.type = 'table';\n          table.refId = queryRes.refId;\n          table.meta = queryRes.meta;\n          data.push(table);\n        }\n      }\n    }\n\n    return { data: data };\n  }\n\n  parseMetricFindQueryResult(refId: string, results: any) {\n    if (!results || results.data.length === 0 || results.data.results[refId].meta.rowCount === 0) {\n      return [];\n    }\n\n    const columns = results.data.results[refId].tables[0].columns;\n    const rows = results.data.results[refId].tables[0].rows;\n    const textColIndex = this.findColIndex(columns, '__text');\n    const valueColIndex = this.findColIndex(columns, '__value');\n\n    if (columns.length === 2 && textColIndex !== -1 && valueColIndex !== -1) {\n      return this.transformToKeyValueList(rows, textColIndex, valueColIndex);\n    }\n\n    return this.transformToSimpleList(rows);\n  }\n\n  transformToKeyValueList(rows: any, textColIndex: number, valueColIndex: number) {\n    const res = [];\n\n    for (let i = 0; i < rows.length; i++) {\n      if (!this.containsKey(res, rows[i][textColIndex])) {\n        res.push({\n          text: rows[i][textColIndex],\n          value: rows[i][valueColIndex],\n        });\n      }\n    }\n\n    return res;\n  }\n\n  transformToSimpleList(rows: any[][]) {\n    const res = [];\n\n    for (let i = 0; i < rows.length; i++) {\n      for (let j = 0; j < rows[i].length; j++) {\n        const value = rows[i][j];\n        if (res.indexOf(value) === -1) {\n          res.push(value);\n        }\n      }\n    }\n\n    return _.map(res, value => {\n      return { text: value };\n    });\n  }\n\n  findColIndex(columns: any[], colName: string) {\n    for (let i = 0; i < columns.length; i++) {\n      if (columns[i].text === colName) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  containsKey(res: any, key: any) {\n    for (let i = 0; i < res.length; i++) {\n      if (res[i].text === key) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  transformAnnotationResponse(options: any, data: any) {\n    const table = data.data.results[options.annotation.name].tables[0];\n\n    let timeColumnIndex = -1;\n    const titleColumnIndex = -1;\n    let textColumnIndex = -1;\n    let tagsColumnIndex = -1;\n\n    for (let i = 0; i < table.columns.length; i++) {\n      if (table.columns[i].text === 'time') {\n        timeColumnIndex = i;\n      } else if (table.columns[i].text === 'text') {\n        textColumnIndex = i;\n      } else if (table.columns[i].text === 'tags') {\n        tagsColumnIndex = i;\n      }\n    }\n\n    if (timeColumnIndex === -1) {\n      return this.$q.reject({\n        message: 'Missing mandatory time column in annotation query.',\n      });\n    }\n\n    const list = [];\n    for (let i = 0; i < table.rows.length; i++) {\n      const row = table.rows[i];\n      list.push({\n        annotation: options.annotation,\n        time: Math.floor(row[timeColumnIndex]),\n        title: row[titleColumnIndex],\n        text: row[textColumnIndex],\n        tags: row[tagsColumnIndex] ? row[tagsColumnIndex].trim().split(/\\s*,\\s*/) : [],\n      });\n    }\n\n    return list;\n  }\n}\n","import _ from 'lodash';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport { ScopedVars } from '@grafana/data';\n\nexport default class PostgresQuery {\n  target: any;\n  templateSrv: any;\n  scopedVars: any;\n\n  /** @ngInject */\n  constructor(target: any, templateSrv?: TemplateSrv, scopedVars?: ScopedVars) {\n    this.target = target;\n    this.templateSrv = templateSrv;\n    this.scopedVars = scopedVars;\n\n    target.format = target.format || 'time_series';\n    target.timeColumn = target.timeColumn || 'time';\n    target.metricColumn = target.metricColumn || 'none';\n\n    target.group = target.group || [];\n    target.where = target.where || [{ type: 'macro', name: '$__timeFilter', params: [] }];\n    target.select = target.select || [[{ type: 'column', params: ['value'] }]];\n\n    // handle pre query gui panels gracefully\n    if (!('rawQuery' in this.target)) {\n      if ('rawSql' in target) {\n        // pre query gui panel\n        target.rawQuery = true;\n      } else {\n        // new panel\n        target.rawQuery = false;\n      }\n    }\n\n    // give interpolateQueryStr access to this\n    this.interpolateQueryStr = this.interpolateQueryStr.bind(this);\n  }\n\n  // remove identifier quoting from identifier to use in metadata queries\n  unquoteIdentifier(value: string) {\n    if (value[0] === '\"' && value[value.length - 1] === '\"') {\n      return value.substring(1, value.length - 1).replace(/\"\"/g, '\"');\n    } else {\n      return value;\n    }\n  }\n\n  quoteIdentifier(value: any) {\n    return '\"' + String(value).replace(/\"/g, '\"\"') + '\"';\n  }\n\n  quoteLiteral(value: any) {\n    return \"'\" + String(value).replace(/'/g, \"''\") + \"'\";\n  }\n\n  escapeLiteral(value: any) {\n    return String(value).replace(/'/g, \"''\");\n  }\n\n  hasTimeGroup() {\n    return _.find(this.target.group, (g: any) => g.type === 'time');\n  }\n\n  hasMetricColumn() {\n    return this.target.metricColumn !== 'none';\n  }\n\n  interpolateQueryStr(value: any, variable: { multi: any; includeAll: any }, defaultFormatFn: any) {\n    // if no multi or include all do not regexEscape\n    if (!variable.multi && !variable.includeAll) {\n      return this.escapeLiteral(value);\n    }\n\n    if (typeof value === 'string') {\n      return this.quoteLiteral(value);\n    }\n\n    const escapedValues = _.map(value, this.quoteLiteral);\n    return escapedValues.join(',');\n  }\n\n  render(interpolate?: any) {\n    const target = this.target;\n\n    // new query with no table set yet\n    if (!this.target.rawQuery && !('table' in this.target)) {\n      return '';\n    }\n\n    if (!target.rawQuery) {\n      target.rawSql = this.buildQuery();\n    }\n\n    if (interpolate) {\n      return this.templateSrv.replace(target.rawSql, this.scopedVars, this.interpolateQueryStr);\n    } else {\n      return target.rawSql;\n    }\n  }\n\n  hasUnixEpochTimecolumn() {\n    return ['int4', 'int8', 'float4', 'float8', 'numeric'].indexOf(this.target.timeColumnType) > -1;\n  }\n\n  buildTimeColumn(alias = true) {\n    const timeGroup = this.hasTimeGroup();\n    let query;\n    let macro = '$__timeGroup';\n\n    if (timeGroup) {\n      let args;\n      if (timeGroup.params.length > 1 && timeGroup.params[1] !== 'none') {\n        args = timeGroup.params.join(',');\n      } else {\n        args = timeGroup.params[0];\n      }\n      if (this.hasUnixEpochTimecolumn()) {\n        macro = '$__unixEpochGroup';\n      }\n      if (alias) {\n        macro += 'Alias';\n      }\n      query = macro + '(' + this.target.timeColumn + ',' + args + ')';\n    } else {\n      query = this.target.timeColumn;\n      if (alias) {\n        query += ' AS \"time\"';\n      }\n    }\n\n    return query;\n  }\n\n  buildMetricColumn() {\n    if (this.hasMetricColumn()) {\n      return this.target.metricColumn + ' AS metric';\n    }\n\n    return '';\n  }\n\n  buildValueColumns() {\n    let query = '';\n    for (const column of this.target.select) {\n      query += ',\\n  ' + this.buildValueColumn(column);\n    }\n\n    return query;\n  }\n\n  buildValueColumn(column: any) {\n    let query = '';\n\n    const columnName: any = _.find(column, (g: any) => g.type === 'column');\n    query = columnName.params[0];\n\n    const aggregate: any = _.find(column, (g: any) => g.type === 'aggregate' || g.type === 'percentile');\n    const windows: any = _.find(column, (g: any) => g.type === 'window' || g.type === 'moving_window');\n\n    if (aggregate) {\n      const func = aggregate.params[0];\n      switch (aggregate.type) {\n        case 'aggregate':\n          if (func === 'first' || func === 'last') {\n            query = func + '(' + query + ',' + this.target.timeColumn + ')';\n          } else {\n            query = func + '(' + query + ')';\n          }\n          break;\n        case 'percentile':\n          query = func + '(' + aggregate.params[1] + ') WITHIN GROUP (ORDER BY ' + query + ')';\n          break;\n      }\n    }\n\n    if (windows) {\n      const overParts = [];\n      if (this.hasMetricColumn()) {\n        overParts.push('PARTITION BY ' + this.target.metricColumn);\n      }\n      overParts.push('ORDER BY ' + this.buildTimeColumn(false));\n\n      const over = overParts.join(' ');\n      let curr: string;\n      let prev: string;\n      switch (windows.type) {\n        case 'window':\n          switch (windows.params[0]) {\n            case 'delta':\n              curr = query;\n              prev = 'lag(' + curr + ') OVER (' + over + ')';\n              query = curr + ' - ' + prev;\n              break;\n            case 'increase':\n              curr = query;\n              prev = 'lag(' + curr + ') OVER (' + over + ')';\n              query = '(CASE WHEN ' + curr + ' >= ' + prev + ' THEN ' + curr + ' - ' + prev;\n              query += ' WHEN ' + prev + ' IS NULL THEN NULL ELSE ' + curr + ' END)';\n              break;\n            case 'rate':\n              let timeColumn = this.target.timeColumn;\n              if (aggregate) {\n                timeColumn = 'min(' + timeColumn + ')';\n              }\n\n              curr = query;\n              prev = 'lag(' + curr + ') OVER (' + over + ')';\n              query = '(CASE WHEN ' + curr + ' >= ' + prev + ' THEN ' + curr + ' - ' + prev;\n              query += ' WHEN ' + prev + ' IS NULL THEN NULL ELSE ' + curr + ' END)';\n              query += '/extract(epoch from ' + timeColumn + ' - lag(' + timeColumn + ') OVER (' + over + '))';\n              break;\n            default:\n              query = windows.params[0] + '(' + query + ') OVER (' + over + ')';\n              break;\n          }\n          break;\n        case 'moving_window':\n          query = windows.params[0] + '(' + query + ') OVER (' + over + ' ROWS ' + windows.params[1] + ' PRECEDING)';\n          break;\n      }\n    }\n\n    const alias: any = _.find(column, (g: any) => g.type === 'alias');\n    if (alias) {\n      query += ' AS ' + this.quoteIdentifier(alias.params[0]);\n    }\n\n    return query;\n  }\n\n  buildWhereClause() {\n    let query = '';\n    const conditions = _.map(this.target.where, (tag, index) => {\n      switch (tag.type) {\n        case 'macro':\n          return tag.name + '(' + this.target.timeColumn + ')';\n          break;\n        case 'expression':\n          return tag.params.join(' ');\n          break;\n      }\n    });\n\n    if (conditions.length > 0) {\n      query = '\\nWHERE\\n  ' + conditions.join(' AND\\n  ');\n    }\n\n    return query;\n  }\n\n  buildGroupClause() {\n    let query = '';\n    let groupSection = '';\n\n    for (let i = 0; i < this.target.group.length; i++) {\n      const part = this.target.group[i];\n      if (i > 0) {\n        groupSection += ', ';\n      }\n      if (part.type === 'time') {\n        groupSection += '1';\n      } else {\n        groupSection += part.params[0];\n      }\n    }\n\n    if (groupSection.length) {\n      query = '\\nGROUP BY ' + groupSection;\n      if (this.hasMetricColumn()) {\n        query += ',2';\n      }\n    }\n    return query;\n  }\n\n  buildQuery() {\n    let query = 'SELECT';\n\n    query += '\\n  ' + this.buildTimeColumn();\n    if (this.hasMetricColumn()) {\n      query += ',\\n  ' + this.buildMetricColumn();\n    }\n    query += this.buildValueColumns();\n\n    query += '\\nFROM ' + this.target.table;\n\n    query += this.buildWhereClause();\n    query += this.buildGroupClause();\n\n    query += '\\nORDER BY 1';\n    if (this.hasMetricColumn()) {\n      query += ',2';\n    }\n\n    return query;\n  }\n}\n","import _ from 'lodash';\nimport ResponseParser from './response_parser';\nimport PostgresQuery from 'app/plugins/datasource/postgres/postgres_query';\nimport { IQService } from 'angular';\nimport { BackendSrv } from 'app/core/services/backend_srv';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport { TimeSrv } from 'app/features/dashboard/services/TimeSrv';\n\nexport class PostgresDatasource {\n  id: any;\n  name: any;\n  jsonData: any;\n  responseParser: ResponseParser;\n  queryModel: PostgresQuery;\n  interval: string;\n\n  /** @ngInject */\n  constructor(\n    instanceSettings: { name: any; id?: any; jsonData?: any },\n    private backendSrv: BackendSrv,\n    private $q: IQService,\n    private templateSrv: TemplateSrv,\n    private timeSrv: TimeSrv\n  ) {\n    this.name = instanceSettings.name;\n    this.id = instanceSettings.id;\n    this.jsonData = instanceSettings.jsonData;\n    this.responseParser = new ResponseParser(this.$q);\n    this.queryModel = new PostgresQuery({});\n    this.interval = (instanceSettings.jsonData || {}).timeInterval || '1m';\n  }\n\n  interpolateVariable = (value: string, variable: { multi: any; includeAll: any }) => {\n    if (typeof value === 'string') {\n      if (variable.multi || variable.includeAll) {\n        return this.queryModel.quoteLiteral(value);\n      } else {\n        return value;\n      }\n    }\n\n    if (typeof value === 'number') {\n      return value;\n    }\n\n    const quotedValues = _.map(value, v => {\n      return this.queryModel.quoteLiteral(v);\n    });\n    return quotedValues.join(',');\n  };\n\n  query(options: any) {\n    const queries = _.filter(options.targets, target => {\n      return target.hide !== true;\n    }).map(target => {\n      const queryModel = new PostgresQuery(target, this.templateSrv, options.scopedVars);\n\n      return {\n        refId: target.refId,\n        intervalMs: options.intervalMs,\n        maxDataPoints: options.maxDataPoints,\n        datasourceId: this.id,\n        rawSql: queryModel.render(this.interpolateVariable),\n        format: target.format,\n      };\n    });\n\n    if (queries.length === 0) {\n      return this.$q.when({ data: [] });\n    }\n\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: options.range.from.valueOf().toString(),\n          to: options.range.to.valueOf().toString(),\n          queries: queries,\n        },\n      })\n      .then(this.responseParser.processQueryResult);\n  }\n\n  annotationQuery(options: any) {\n    if (!options.annotation.rawQuery) {\n      return this.$q.reject({\n        message: 'Query missing in annotation definition',\n      });\n    }\n\n    const query = {\n      refId: options.annotation.name,\n      datasourceId: this.id,\n      rawSql: this.templateSrv.replace(options.annotation.rawQuery, options.scopedVars, this.interpolateVariable),\n      format: 'table',\n    };\n\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: options.range.from.valueOf().toString(),\n          to: options.range.to.valueOf().toString(),\n          queries: [query],\n        },\n      })\n      .then((data: any) => this.responseParser.transformAnnotationResponse(options, data));\n  }\n\n  metricFindQuery(query: string, optionalOptions: { variable?: any }) {\n    let refId = 'tempvar';\n    if (optionalOptions && optionalOptions.variable && optionalOptions.variable.name) {\n      refId = optionalOptions.variable.name;\n    }\n\n    const interpolatedQuery = {\n      refId: refId,\n      datasourceId: this.id,\n      rawSql: this.templateSrv.replace(query, {}, this.interpolateVariable),\n      format: 'table',\n    };\n\n    const range = this.timeSrv.timeRange();\n    const data = {\n      queries: [interpolatedQuery],\n      from: range.from.valueOf().toString(),\n      to: range.to.valueOf().toString(),\n    };\n\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: data,\n      })\n      .then((data: any) => this.responseParser.parseMetricFindQueryResult(refId, data));\n  }\n\n  getVersion() {\n    return this.metricFindQuery(\"SELECT current_setting('server_version_num')::int/100\", {});\n  }\n\n  getTimescaleDBVersion() {\n    return this.metricFindQuery(\"SELECT extversion FROM pg_extension WHERE extname = 'timescaledb'\", {});\n  }\n\n  testDatasource() {\n    return this.metricFindQuery('SELECT 1', {})\n      .then((res: any) => {\n        return { status: 'success', message: 'Database Connection OK' };\n      })\n      .catch((err: any) => {\n        console.log(err);\n        if (err.data && err.data.message) {\n          return { status: 'error', message: err.data.message };\n        } else {\n          return { status: 'error', message: err.status };\n        }\n      });\n  }\n\n  targetContainsTemplate(target: any) {\n    let rawSql = '';\n\n    if (target.rawQuery) {\n      rawSql = target.rawSql;\n    } else {\n      const query = new PostgresQuery(target);\n      rawSql = query.buildQuery();\n    }\n\n    rawSql = rawSql.replace('$__', '');\n\n    return this.templateSrv.variableExists(rawSql);\n  }\n}\n","import QueryModel from './postgres_query';\n\nexport class PostgresMetaQuery {\n  constructor(private target: { table: string; timeColumn: string }, private queryModel: QueryModel) {}\n\n  getOperators(datatype: string) {\n    switch (datatype) {\n      case 'float4':\n      case 'float8': {\n        return ['=', '!=', '<', '<=', '>', '>='];\n      }\n      case 'text':\n      case 'varchar':\n      case 'char': {\n        return ['=', '!=', '<', '<=', '>', '>=', 'IN', 'NOT IN', 'LIKE', 'NOT LIKE', '~', '~*', '!~', '!~*'];\n      }\n      default: {\n        return ['=', '!=', '<', '<=', '>', '>=', 'IN', 'NOT IN'];\n      }\n    }\n  }\n\n  // quote identifier as literal to use in metadata queries\n  quoteIdentAsLiteral(value: string) {\n    return this.queryModel.quoteLiteral(this.queryModel.unquoteIdentifier(value));\n  }\n\n  findMetricTable() {\n    // query that returns first table found that has a timestamp(tz) column and a float column\n    let query = `\nSELECT\n\tquote_ident(table_name) as table_name,\n\t( SELECT\n\t    quote_ident(column_name) as column_name\n\t  FROM information_schema.columns c\n    WHERE\n      c.table_schema = t.table_schema AND\n      c.table_name = t.table_name AND\n      udt_name IN ('timestamptz','timestamp')\n    ORDER BY ordinal_position LIMIT 1\n  ) AS time_column,\n  ( SELECT\n      quote_ident(column_name) AS column_name\n    FROM information_schema.columns c\n    WHERE\n      c.table_schema = t.table_schema AND\n      c.table_name = t.table_name AND\n      udt_name='float8'\n    ORDER BY ordinal_position LIMIT 1\n  ) AS value_column\nFROM information_schema.tables t\nWHERE `;\n    query += this.buildSchemaConstraint();\n    query += ` AND\n  EXISTS\n  ( SELECT 1\n    FROM information_schema.columns c\n    WHERE\n      c.table_schema = t.table_schema AND\n      c.table_name = t.table_name AND\n      udt_name IN ('timestamptz','timestamp')\n  ) AND\n  EXISTS\n  ( SELECT 1\n    FROM information_schema.columns c\n    WHERE\n      c.table_schema = t.table_schema AND\n      c.table_name = t.table_name AND\n      udt_name='float8'\n  )\nLIMIT 1\n;`;\n    return query;\n  }\n\n  buildSchemaConstraint() {\n    const query = `\ntable_schema IN (\n  SELECT\n    CASE WHEN trim(s[i]) = '\"$user\"' THEN user ELSE trim(s[i]) END\n  FROM\n    generate_series(\n      array_lower(string_to_array(current_setting('search_path'),','),1),\n      array_upper(string_to_array(current_setting('search_path'),','),1)\n    ) as i,\n    string_to_array(current_setting('search_path'),',') s\n)`;\n    return query;\n  }\n\n  buildTableConstraint(table: string) {\n    let query = '';\n\n    // check for schema qualified table\n    if (table.includes('.')) {\n      const parts = table.split('.');\n      query = 'table_schema = ' + this.quoteIdentAsLiteral(parts[0]);\n      query += ' AND table_name = ' + this.quoteIdentAsLiteral(parts[1]);\n      return query;\n    } else {\n      query = this.buildSchemaConstraint();\n      query += ' AND table_name = ' + this.quoteIdentAsLiteral(table);\n\n      return query;\n    }\n  }\n\n  buildTableQuery() {\n    let query = 'SELECT quote_ident(table_name) FROM information_schema.tables WHERE ';\n    query += this.buildSchemaConstraint();\n    query += ' ORDER BY table_name';\n    return query;\n  }\n\n  buildColumnQuery(type?: string) {\n    let query = 'SELECT quote_ident(column_name) FROM information_schema.columns WHERE ';\n    query += this.buildTableConstraint(this.target.table);\n\n    switch (type) {\n      case 'time': {\n        query +=\n          \" AND data_type IN ('timestamp without time zone','timestamp with time zone','bigint','integer','double precision','real')\";\n        break;\n      }\n      case 'metric': {\n        query += \" AND data_type IN ('text','character','character varying')\";\n        break;\n      }\n      case 'value': {\n        query += \" AND data_type IN ('bigint','integer','double precision','real')\";\n        query += ' AND column_name <> ' + this.quoteIdentAsLiteral(this.target.timeColumn);\n        break;\n      }\n      case 'group': {\n        query += \" AND data_type IN ('text','character','character varying')\";\n        break;\n      }\n    }\n\n    query += ' ORDER BY column_name';\n\n    return query;\n  }\n\n  buildValueQuery(column: string) {\n    let query = 'SELECT DISTINCT quote_literal(' + column + ')';\n    query += ' FROM ' + this.target.table;\n    query += ' WHERE $__timeFilter(' + this.target.timeColumn + ')';\n    query += ' AND ' + column + ' IS NOT NULL';\n    query += ' ORDER BY 1 LIMIT 100';\n    return query;\n  }\n\n  buildDatatypeQuery(column: string) {\n    let query = 'SELECT udt_name FROM information_schema.columns WHERE ';\n    query += this.buildTableConstraint(this.target.table);\n    query += ' AND column_name = ' + this.quoteIdentAsLiteral(column);\n    return query;\n  }\n\n  buildAggregateQuery() {\n    let query = 'SELECT DISTINCT proname FROM pg_aggregate ';\n    query += 'INNER JOIN pg_proc ON pg_aggregate.aggfnoid = pg_proc.oid ';\n    query += 'INNER JOIN pg_type ON pg_type.oid=pg_proc.prorettype ';\n    query += \"WHERE pronargs=1 AND typname IN ('float8') AND aggkind='n' ORDER BY 1\";\n    return query;\n  }\n}\n","import { SqlPartDef, SqlPart } from 'app/core/components/sql_part/sql_part';\n\nconst index: any[] = [];\n\nfunction createPart(part: any): any {\n  const def = index[part.type];\n  if (!def) {\n    return null;\n  }\n\n  return new SqlPart(part, def);\n}\n\nfunction register(options: any) {\n  index[options.type] = new SqlPartDef(options);\n}\n\nregister({\n  type: 'column',\n  style: 'label',\n  params: [{ type: 'column', dynamicLookup: true }],\n  defaultParams: ['value'],\n});\n\nregister({\n  type: 'expression',\n  style: 'expression',\n  label: 'Expr:',\n  params: [\n    { name: 'left', type: 'string', dynamicLookup: true },\n    { name: 'op', type: 'string', dynamicLookup: true },\n    { name: 'right', type: 'string', dynamicLookup: true },\n  ],\n  defaultParams: ['value', '=', 'value'],\n});\n\nregister({\n  type: 'macro',\n  style: 'label',\n  label: 'Macro:',\n  params: [],\n  defaultParams: [],\n});\n\nregister({\n  type: 'aggregate',\n  style: 'label',\n  params: [\n    {\n      name: 'name',\n      type: 'string',\n      options: ['avg', 'count', 'min', 'max', 'sum', 'stddev', 'variance'],\n    },\n  ],\n  defaultParams: ['avg'],\n});\n\nregister({\n  type: 'percentile',\n  label: 'Aggregate:',\n  style: 'label',\n  params: [\n    {\n      name: 'name',\n      type: 'string',\n      options: ['percentile_cont', 'percentile_disc'],\n    },\n    {\n      name: 'fraction',\n      type: 'number',\n      options: ['0.5', '0.75', '0.9', '0.95', '0.99'],\n    },\n  ],\n  defaultParams: ['percentile_cont', '0.95'],\n});\n\nregister({\n  type: 'alias',\n  style: 'label',\n  params: [{ name: 'name', type: 'string', quote: 'double' }],\n  defaultParams: ['alias'],\n});\n\nregister({\n  type: 'time',\n  style: 'function',\n  label: 'time',\n  params: [\n    {\n      name: 'interval',\n      type: 'interval',\n      options: ['$__interval', '1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n    {\n      name: 'fill',\n      type: 'string',\n      options: ['none', 'NULL', 'previous', '0'],\n    },\n  ],\n  defaultParams: ['$__interval', 'none'],\n});\n\nregister({\n  type: 'window',\n  style: 'label',\n  params: [\n    {\n      name: 'function',\n      type: 'string',\n      options: ['delta', 'increase', 'rate', 'sum'],\n    },\n  ],\n  defaultParams: ['increase'],\n});\n\nregister({\n  type: 'moving_window',\n  style: 'label',\n  label: 'Moving Window:',\n  params: [\n    {\n      name: 'function',\n      type: 'string',\n      options: ['avg'],\n    },\n    {\n      name: 'window_size',\n      type: 'number',\n      options: ['3', '5', '7', '10', '20'],\n    },\n  ],\n  defaultParams: ['avg', '5'],\n});\n\nexport default {\n  create: createPart,\n};\n","import _ from 'lodash';\nimport appEvents from 'app/core/app_events';\nimport { PostgresMetaQuery } from './meta_query';\nimport { QueryCtrl } from 'app/plugins/sdk';\nimport { SqlPart } from 'app/core/components/sql_part/sql_part';\nimport PostgresQuery from './postgres_query';\nimport sqlPart from './sql_part';\nimport { auto, IQService } from 'angular';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\n\nexport interface QueryMeta {\n  sql: string;\n}\n\nconst defaultQuery = `SELECT\n  $__time(time_column),\n  value1\nFROM\n  metric_table\nWHERE\n  $__timeFilter(time_column)\n`;\n\nexport class PostgresQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  showLastQuerySQL: boolean;\n  formats: any[];\n  queryModel: PostgresQuery;\n  metaBuilder: PostgresMetaQuery;\n  lastQueryMeta: QueryMeta;\n  lastQueryError: string;\n  showHelp: boolean;\n  tableSegment: any;\n  whereAdd: any;\n  timeColumnSegment: any;\n  metricColumnSegment: any;\n  selectMenu: any[];\n  selectParts: SqlPart[][];\n  groupParts: SqlPart[];\n  whereParts: SqlPart[];\n  groupAdd: any;\n\n  /** @ngInject */\n  constructor(\n    $scope: any,\n    $injector: auto.IInjectorService,\n    private templateSrv: TemplateSrv,\n    private $q: IQService,\n    private uiSegmentSrv: any\n  ) {\n    super($scope, $injector);\n    this.target = this.target;\n    this.queryModel = new PostgresQuery(this.target, templateSrv, this.panel.scopedVars);\n    this.metaBuilder = new PostgresMetaQuery(this.target, this.queryModel);\n    this.updateProjection();\n\n    this.formats = [{ text: 'Time series', value: 'time_series' }, { text: 'Table', value: 'table' }];\n\n    if (!this.target.rawSql) {\n      // special handling when in table panel\n      if (this.panelCtrl.panel.type === 'table') {\n        this.target.format = 'table';\n        this.target.rawSql = 'SELECT 1';\n        this.target.rawQuery = true;\n      } else {\n        this.target.rawSql = defaultQuery;\n        this.datasource.metricFindQuery(this.metaBuilder.findMetricTable()).then((result: any) => {\n          if (result.length > 0) {\n            this.target.table = result[0].text;\n            let segment = this.uiSegmentSrv.newSegment(this.target.table);\n            this.tableSegment.html = segment.html;\n            this.tableSegment.value = segment.value;\n\n            this.target.timeColumn = result[1].text;\n            segment = this.uiSegmentSrv.newSegment(this.target.timeColumn);\n            this.timeColumnSegment.html = segment.html;\n            this.timeColumnSegment.value = segment.value;\n\n            this.target.timeColumnType = 'timestamp';\n            this.target.select = [[{ type: 'column', params: [result[2].text] }]];\n            this.updateProjection();\n            this.updateRawSqlAndRefresh();\n          }\n        });\n      }\n    }\n\n    if (!this.target.table) {\n      this.tableSegment = uiSegmentSrv.newSegment({ value: 'select table', fake: true });\n    } else {\n      this.tableSegment = uiSegmentSrv.newSegment(this.target.table);\n    }\n\n    this.timeColumnSegment = uiSegmentSrv.newSegment(this.target.timeColumn);\n    this.metricColumnSegment = uiSegmentSrv.newSegment(this.target.metricColumn);\n\n    this.buildSelectMenu();\n    this.whereAdd = this.uiSegmentSrv.newPlusButton();\n    this.groupAdd = this.uiSegmentSrv.newPlusButton();\n\n    this.panelCtrl.events.on('data-received', this.onDataReceived.bind(this), $scope);\n    this.panelCtrl.events.on('data-error', this.onDataError.bind(this), $scope);\n  }\n\n  updateRawSqlAndRefresh() {\n    if (!this.target.rawQuery) {\n      this.target.rawSql = this.queryModel.buildQuery();\n    }\n\n    this.panelCtrl.refresh();\n  }\n\n  updateProjection() {\n    this.selectParts = _.map(this.target.select, (parts: any) => {\n      return _.map(parts, sqlPart.create).filter(n => n);\n    });\n    this.whereParts = _.map(this.target.where, sqlPart.create).filter(n => n);\n    this.groupParts = _.map(this.target.group, sqlPart.create).filter(n => n);\n  }\n\n  updatePersistedParts() {\n    this.target.select = _.map(this.selectParts, selectParts => {\n      return _.map(selectParts, (part: any) => {\n        return { type: part.def.type, datatype: part.datatype, params: part.params };\n      });\n    });\n    this.target.where = _.map(this.whereParts, (part: any) => {\n      return { type: part.def.type, datatype: part.datatype, name: part.name, params: part.params };\n    });\n    this.target.group = _.map(this.groupParts, (part: any) => {\n      return { type: part.def.type, datatype: part.datatype, params: part.params };\n    });\n  }\n\n  buildSelectMenu() {\n    this.selectMenu = [];\n    const aggregates = {\n      text: 'Aggregate Functions',\n      value: 'aggregate',\n      submenu: [\n        { text: 'Average', value: 'avg' },\n        { text: 'Count', value: 'count' },\n        { text: 'Maximum', value: 'max' },\n        { text: 'Minimum', value: 'min' },\n        { text: 'Sum', value: 'sum' },\n        { text: 'Standard deviation', value: 'stddev' },\n        { text: 'Variance', value: 'variance' },\n      ],\n    };\n\n    // first and last aggregate are timescaledb specific\n    if (this.datasource.jsonData.timescaledb === true) {\n      aggregates.submenu.push({ text: 'First', value: 'first' });\n      aggregates.submenu.push({ text: 'Last', value: 'last' });\n    }\n\n    this.selectMenu.push(aggregates);\n\n    // ordered set aggregates require postgres 9.4+\n    if (this.datasource.jsonData.postgresVersion >= 904) {\n      const aggregates2 = {\n        text: 'Ordered-Set Aggregate Functions',\n        value: 'percentile',\n        submenu: [\n          { text: 'Percentile (continuous)', value: 'percentile_cont' },\n          { text: 'Percentile (discrete)', value: 'percentile_disc' },\n        ],\n      };\n      this.selectMenu.push(aggregates2);\n    }\n\n    const windows = {\n      text: 'Window Functions',\n      value: 'window',\n      submenu: [\n        { text: 'Delta', value: 'delta' },\n        { text: 'Increase', value: 'increase' },\n        { text: 'Rate', value: 'rate' },\n        { text: 'Sum', value: 'sum' },\n        { text: 'Moving Average', value: 'avg', type: 'moving_window' },\n      ],\n    };\n    this.selectMenu.push(windows);\n\n    this.selectMenu.push({ text: 'Alias', value: 'alias' });\n    this.selectMenu.push({ text: 'Column', value: 'column' });\n  }\n\n  toggleEditorMode() {\n    if (this.target.rawQuery) {\n      appEvents.emit('confirm-modal', {\n        title: 'Warning',\n        text2: 'Switching to query builder may overwrite your raw SQL.',\n        icon: 'fa-exclamation',\n        yesText: 'Switch',\n        onConfirm: () => {\n          this.target.rawQuery = !this.target.rawQuery;\n        },\n      });\n    } else {\n      this.target.rawQuery = !this.target.rawQuery;\n    }\n  }\n\n  resetPlusButton(button: { html: any; value: any }) {\n    const plusButton = this.uiSegmentSrv.newPlusButton();\n    button.html = plusButton.html;\n    button.value = plusButton.value;\n  }\n\n  getTableSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildTableQuery())\n      .then(this.transformToSegments({}))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  tableChanged() {\n    this.target.table = this.tableSegment.value;\n    this.target.where = [];\n    this.target.group = [];\n    this.updateProjection();\n\n    const segment = this.uiSegmentSrv.newSegment('none');\n    this.metricColumnSegment.html = segment.html;\n    this.metricColumnSegment.value = segment.value;\n    this.target.metricColumn = 'none';\n\n    const task1 = this.datasource.metricFindQuery(this.metaBuilder.buildColumnQuery('time')).then((result: any) => {\n      // check if time column is still valid\n      if (result.length > 0 && !_.find(result, (r: any) => r.text === this.target.timeColumn)) {\n        const segment = this.uiSegmentSrv.newSegment(result[0].text);\n        this.timeColumnSegment.html = segment.html;\n        this.timeColumnSegment.value = segment.value;\n      }\n      return this.timeColumnChanged(false);\n    });\n    const task2 = this.datasource.metricFindQuery(this.metaBuilder.buildColumnQuery('value')).then((result: any) => {\n      if (result.length > 0) {\n        this.target.select = [[{ type: 'column', params: [result[0].text] }]];\n        this.updateProjection();\n      }\n    });\n\n    this.$q.all([task1, task2]).then(() => {\n      this.updateRawSqlAndRefresh();\n    });\n  }\n\n  getTimeColumnSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('time'))\n      .then(this.transformToSegments({}))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  timeColumnChanged(refresh?: boolean) {\n    this.target.timeColumn = this.timeColumnSegment.value;\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildDatatypeQuery(this.target.timeColumn))\n      .then((result: any) => {\n        if (result.length === 1) {\n          if (this.target.timeColumnType !== result[0].text) {\n            this.target.timeColumnType = result[0].text;\n          }\n          let partModel;\n          if (this.queryModel.hasUnixEpochTimecolumn()) {\n            partModel = sqlPart.create({ type: 'macro', name: '$__unixEpochFilter', params: [] });\n          } else {\n            partModel = sqlPart.create({ type: 'macro', name: '$__timeFilter', params: [] });\n          }\n\n          if (this.whereParts.length >= 1 && this.whereParts[0].def.type === 'macro') {\n            // replace current macro\n            this.whereParts[0] = partModel;\n          } else {\n            this.whereParts.splice(0, 0, partModel);\n          }\n        }\n\n        this.updatePersistedParts();\n        if (refresh !== false) {\n          this.updateRawSqlAndRefresh();\n        }\n      });\n  }\n\n  getMetricColumnSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('metric'))\n      .then(this.transformToSegments({ addNone: true }))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  metricColumnChanged() {\n    this.target.metricColumn = this.metricColumnSegment.value;\n    this.updateRawSqlAndRefresh();\n  }\n\n  onDataReceived(dataList: any) {\n    this.lastQueryMeta = null;\n    this.lastQueryError = null;\n    console.log('postgres query data received', dataList);\n\n    const anySeriesFromQuery: any = _.find(dataList, { refId: this.target.refId });\n    if (anySeriesFromQuery) {\n      this.lastQueryMeta = anySeriesFromQuery.meta;\n    }\n  }\n\n  onDataError(err: any) {\n    if (err.data && err.data.results) {\n      const queryRes = err.data.results[this.target.refId];\n      if (queryRes) {\n        this.lastQueryMeta = queryRes.meta;\n        this.lastQueryError = queryRes.error;\n      }\n    }\n  }\n\n  transformToSegments(config: { addNone?: any; addTemplateVars?: any; templateQuoter?: any }) {\n    return (results: any) => {\n      const segments = _.map(results, segment => {\n        return this.uiSegmentSrv.newSegment({\n          value: segment.text,\n          expandable: segment.expandable,\n        });\n      });\n\n      if (config.addTemplateVars) {\n        for (const variable of this.templateSrv.variables) {\n          let value;\n          value = '$' + variable.name;\n          if (config.templateQuoter && variable.multi === false) {\n            value = config.templateQuoter(value);\n          }\n\n          segments.unshift(\n            this.uiSegmentSrv.newSegment({\n              type: 'template',\n              value: value,\n              expandable: true,\n            })\n          );\n        }\n      }\n\n      if (config.addNone) {\n        segments.unshift(this.uiSegmentSrv.newSegment({ type: 'template', value: 'none', expandable: true }));\n      }\n\n      return segments;\n    };\n  }\n\n  findAggregateIndex(selectParts: any) {\n    return _.findIndex(selectParts, (p: any) => p.def.type === 'aggregate' || p.def.type === 'percentile');\n  }\n\n  findWindowIndex(selectParts: any) {\n    return _.findIndex(selectParts, (p: any) => p.def.type === 'window' || p.def.type === 'moving_window');\n  }\n\n  addSelectPart(selectParts: any[], item: { value: any }, subItem: { type: any; value: any }) {\n    let partType = item.value;\n    if (subItem && subItem.type) {\n      partType = subItem.type;\n    }\n    let partModel = sqlPart.create({ type: partType });\n    if (subItem) {\n      partModel.params[0] = subItem.value;\n    }\n    let addAlias = false;\n\n    switch (partType) {\n      case 'column':\n        const parts = _.map(selectParts, (part: any) => {\n          return sqlPart.create({ type: part.def.type, params: _.clone(part.params) });\n        });\n        this.selectParts.push(parts);\n        break;\n      case 'percentile':\n      case 'aggregate':\n        // add group by if no group by yet\n        if (this.target.group.length === 0) {\n          this.addGroup('time', '$__interval');\n        }\n        const aggIndex = this.findAggregateIndex(selectParts);\n        if (aggIndex !== -1) {\n          // replace current aggregation\n          selectParts[aggIndex] = partModel;\n        } else {\n          selectParts.splice(1, 0, partModel);\n        }\n        if (!_.find(selectParts, (p: any) => p.def.type === 'alias')) {\n          addAlias = true;\n        }\n        break;\n      case 'moving_window':\n      case 'window':\n        const windowIndex = this.findWindowIndex(selectParts);\n        if (windowIndex !== -1) {\n          // replace current window function\n          selectParts[windowIndex] = partModel;\n        } else {\n          const aggIndex = this.findAggregateIndex(selectParts);\n          if (aggIndex !== -1) {\n            selectParts.splice(aggIndex + 1, 0, partModel);\n          } else {\n            selectParts.splice(1, 0, partModel);\n          }\n        }\n        if (!_.find(selectParts, (p: any) => p.def.type === 'alias')) {\n          addAlias = true;\n        }\n        break;\n      case 'alias':\n        addAlias = true;\n        break;\n    }\n\n    if (addAlias) {\n      // set initial alias name to column name\n      partModel = sqlPart.create({ type: 'alias', params: [selectParts[0].params[0].replace(/\"/g, '')] });\n      if (selectParts[selectParts.length - 1].def.type === 'alias') {\n        selectParts[selectParts.length - 1] = partModel;\n      } else {\n        selectParts.push(partModel);\n      }\n    }\n\n    this.updatePersistedParts();\n    this.updateRawSqlAndRefresh();\n  }\n\n  removeSelectPart(selectParts: any, part: { def: { type: string } }) {\n    if (part.def.type === 'column') {\n      // remove all parts of column unless its last column\n      if (this.selectParts.length > 1) {\n        const modelsIndex = _.indexOf(this.selectParts, selectParts);\n        this.selectParts.splice(modelsIndex, 1);\n      }\n    } else {\n      const partIndex = _.indexOf(selectParts, part);\n      selectParts.splice(partIndex, 1);\n    }\n\n    this.updatePersistedParts();\n  }\n\n  handleSelectPartEvent(selectParts: any, part: { def: any }, evt: { name: any }) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        switch (part.def.type) {\n          case 'aggregate':\n            return this.datasource\n              .metricFindQuery(this.metaBuilder.buildAggregateQuery())\n              .then(this.transformToSegments({}))\n              .catch(this.handleQueryError.bind(this));\n          case 'column':\n            return this.datasource\n              .metricFindQuery(this.metaBuilder.buildColumnQuery('value'))\n              .then(this.transformToSegments({}))\n              .catch(this.handleQueryError.bind(this));\n        }\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'action': {\n        this.removeSelectPart(selectParts, part);\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return this.$q.when([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  handleGroupPartEvent(part: any, index: any, evt: { name: any }) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        return this.datasource\n          .metricFindQuery(this.metaBuilder.buildColumnQuery())\n          .then(this.transformToSegments({}))\n          .catch(this.handleQueryError.bind(this));\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'action': {\n        this.removeGroup(part, index);\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return this.$q.when([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  addGroup(partType: string, value: string) {\n    let params = [value];\n    if (partType === 'time') {\n      params = ['$__interval', 'none'];\n    }\n    const partModel = sqlPart.create({ type: partType, params: params });\n\n    if (partType === 'time') {\n      // put timeGroup at start\n      this.groupParts.splice(0, 0, partModel);\n    } else {\n      this.groupParts.push(partModel);\n    }\n\n    // add aggregates when adding group by\n    for (const selectParts of this.selectParts) {\n      if (!selectParts.some(part => part.def.type === 'aggregate')) {\n        const aggregate = sqlPart.create({ type: 'aggregate', params: ['avg'] });\n        selectParts.splice(1, 0, aggregate);\n        if (!selectParts.some(part => part.def.type === 'alias')) {\n          const alias = sqlPart.create({ type: 'alias', params: [selectParts[0].part.params[0]] });\n          selectParts.push(alias);\n        }\n      }\n    }\n\n    this.updatePersistedParts();\n  }\n\n  removeGroup(part: { def: { type: string } }, index: number) {\n    if (part.def.type === 'time') {\n      // remove aggregations\n      this.selectParts = _.map(this.selectParts, (s: any) => {\n        return _.filter(s, (part: any) => {\n          if (part.def.type === 'aggregate' || part.def.type === 'percentile') {\n            return false;\n          }\n          return true;\n        });\n      });\n    }\n\n    this.groupParts.splice(index, 1);\n    this.updatePersistedParts();\n  }\n\n  handleWherePartEvent(whereParts: any, part: any, evt: any, index: any) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        switch (evt.param.name) {\n          case 'left':\n            return this.datasource\n              .metricFindQuery(this.metaBuilder.buildColumnQuery())\n              .then(this.transformToSegments({}))\n              .catch(this.handleQueryError.bind(this));\n          case 'right':\n            if (['int4', 'int8', 'float4', 'float8', 'timestamp', 'timestamptz'].indexOf(part.datatype) > -1) {\n              // don't do value lookups for numerical fields\n              return this.$q.when([]);\n            } else {\n              return this.datasource\n                .metricFindQuery(this.metaBuilder.buildValueQuery(part.params[0]))\n                .then(\n                  this.transformToSegments({\n                    addTemplateVars: true,\n                    templateQuoter: (v: string) => {\n                      return this.queryModel.quoteLiteral(v);\n                    },\n                  })\n                )\n                .catch(this.handleQueryError.bind(this));\n            }\n          case 'op':\n            return this.$q.when(this.uiSegmentSrv.newOperators(this.metaBuilder.getOperators(part.datatype)));\n          default:\n            return this.$q.when([]);\n        }\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.datasource.metricFindQuery(this.metaBuilder.buildDatatypeQuery(part.params[0])).then((d: any) => {\n          if (d.length === 1) {\n            part.datatype = d[0].text;\n          }\n        });\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'action': {\n        // remove element\n        whereParts.splice(index, 1);\n        this.updatePersistedParts();\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return this.$q.when([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  getWhereOptions() {\n    const options = [];\n    if (this.queryModel.hasUnixEpochTimecolumn()) {\n      options.push(this.uiSegmentSrv.newSegment({ type: 'macro', value: '$__unixEpochFilter' }));\n    } else {\n      options.push(this.uiSegmentSrv.newSegment({ type: 'macro', value: '$__timeFilter' }));\n    }\n    options.push(this.uiSegmentSrv.newSegment({ type: 'expression', value: 'Expression' }));\n    return this.$q.when(options);\n  }\n\n  addWhereAction(part: any, index: any) {\n    switch (this.whereAdd.type) {\n      case 'macro': {\n        const partModel = sqlPart.create({ type: 'macro', name: this.whereAdd.value, params: [] });\n        if (this.whereParts.length >= 1 && this.whereParts[0].def.type === 'macro') {\n          // replace current macro\n          this.whereParts[0] = partModel;\n        } else {\n          this.whereParts.splice(0, 0, partModel);\n        }\n        break;\n      }\n      default: {\n        this.whereParts.push(sqlPart.create({ type: 'expression', params: ['value', '=', 'value'] }));\n      }\n    }\n\n    this.updatePersistedParts();\n    this.resetPlusButton(this.whereAdd);\n    this.updateRawSqlAndRefresh();\n  }\n\n  getGroupOptions() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('group'))\n      .then((tags: any) => {\n        const options = [];\n        if (!this.queryModel.hasTimeGroup()) {\n          options.push(this.uiSegmentSrv.newSegment({ type: 'time', value: 'time($__interval,none)' }));\n        }\n        for (const tag of tags) {\n          options.push(this.uiSegmentSrv.newSegment({ type: 'column', value: tag.text }));\n        }\n        return options;\n      })\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  addGroupAction() {\n    switch (this.groupAdd.value) {\n      default: {\n        this.addGroup(this.groupAdd.type, this.groupAdd.value);\n      }\n    }\n\n    this.resetPlusButton(this.groupAdd);\n    this.updateRawSqlAndRefresh();\n  }\n\n  handleQueryError(err: any): any[] {\n    this.error = err.message || 'Failed to issue metric query';\n    return [];\n  }\n}\n","import _ from 'lodash';\nimport {\n  createChangeHandler,\n  createResetHandler,\n  PasswordFieldEnum,\n} from '../../../features/datasources/utils/passwordHandlers';\nimport DatasourceSrv from 'app/features/plugins/datasource_srv';\n\nexport class PostgresConfigCtrl {\n  static templateUrl = 'partials/config.html';\n\n  current: any;\n  datasourceSrv: any;\n  showTimescaleDBHelp: boolean;\n  onPasswordReset: ReturnType<typeof createResetHandler>;\n  onPasswordChange: ReturnType<typeof createChangeHandler>;\n\n  /** @ngInject */\n  constructor($scope: any, datasourceSrv: DatasourceSrv) {\n    this.datasourceSrv = datasourceSrv;\n    this.current.jsonData.sslmode = this.current.jsonData.sslmode || 'verify-full';\n    this.current.jsonData.postgresVersion = this.current.jsonData.postgresVersion || 903;\n    this.showTimescaleDBHelp = false;\n    this.autoDetectFeatures();\n    this.onPasswordReset = createResetHandler(this, PasswordFieldEnum.Password);\n    this.onPasswordChange = createChangeHandler(this, PasswordFieldEnum.Password);\n  }\n\n  autoDetectFeatures() {\n    if (!this.current.id) {\n      return;\n    }\n\n    this.datasourceSrv.loadDatasource(this.current.name).then((ds: any) => {\n      return ds.getVersion().then((version: any) => {\n        version = Number(version[0].text);\n\n        // timescaledb is only available for 9.6+\n        if (version >= 906) {\n          ds.getTimescaleDBVersion().then((version: any) => {\n            if (version.length === 1) {\n              this.current.jsonData.timescaledb = true;\n            }\n          });\n        }\n\n        const major = Math.trunc(version / 100);\n        const minor = version % 100;\n        let name = String(major);\n        if (version < 1000) {\n          name = String(major) + '.' + String(minor);\n        }\n        if (!_.find(this.postgresVersions, (p: any) => p.value === version)) {\n          this.postgresVersions.push({ name: name, value: version });\n        }\n        this.current.jsonData.postgresVersion = version;\n      });\n    });\n  }\n\n  toggleTimescaleDBHelp() {\n    this.showTimescaleDBHelp = !this.showTimescaleDBHelp;\n  }\n\n  // the value portion is derived from postgres server_version_num/100\n  postgresVersions = [\n    { name: '9.3', value: 903 },\n    { name: '9.4', value: 904 },\n    { name: '9.5', value: 905 },\n    { name: '9.6', value: 906 },\n    { name: '10', value: 1000 },\n  ];\n}\n","import { PostgresDatasource } from './datasource';\nimport { PostgresQueryCtrl } from './query_ctrl';\nimport { PostgresConfigCtrl } from './config_ctrl';\n\nconst defaultQuery = `SELECT\n  extract(epoch from time_column) AS time,\n  text_column as text,\n  tags_column as tags\nFROM\n  metric_table\nWHERE\n  $__timeFilter(time_column)\n`;\n\nclass PostgresAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n\n  annotation: any;\n\n  /** @ngInject */\n  constructor() {\n    this.annotation.rawQuery = this.annotation.rawQuery || defaultQuery;\n  }\n}\n\nexport {\n  PostgresDatasource,\n  PostgresDatasource as Datasource,\n  PostgresQueryCtrl as QueryCtrl,\n  PostgresConfigCtrl as ConfigCtrl,\n  PostgresAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n","import _ from 'lodash';\n\nexport class SqlPartDef {\n  type: string;\n  style: string;\n  label: string;\n  params: any[];\n  defaultParams: any[];\n  wrapOpen: string;\n  wrapClose: string;\n  separator: string;\n\n  constructor(options: any) {\n    this.type = options.type;\n    if (options.label) {\n      this.label = options.label;\n    } else {\n      this.label = this.type[0].toUpperCase() + this.type.substring(1) + ':';\n    }\n    this.style = options.style;\n    if (this.style === 'function') {\n      this.wrapOpen = '(';\n      this.wrapClose = ')';\n      this.separator = ', ';\n    } else {\n      this.wrapOpen = ' ';\n      this.wrapClose = ' ';\n      this.separator = ' ';\n    }\n    this.params = options.params;\n    this.defaultParams = options.defaultParams;\n  }\n}\n\nexport class SqlPart {\n  part: any;\n  def: SqlPartDef;\n  params: any[];\n  label: string;\n  name: string;\n  datatype: string;\n\n  constructor(part: any, def: any) {\n    this.part = part;\n    this.def = def;\n    if (!this.def) {\n      throw { message: 'Could not find sql part ' + part.type };\n    }\n\n    this.datatype = part.datatype;\n\n    if (part.name) {\n      this.name = part.name;\n      this.label = def.label + ' ' + part.name;\n    } else {\n      this.name = '';\n      this.label = def.label;\n    }\n\n    part.params = part.params || _.clone(this.def.defaultParams);\n    this.params = part.params;\n  }\n\n  updateParam(strValue: string, index: number) {\n    // handle optional parameters\n    if (strValue === '' && this.def.params[index].optional) {\n      this.params.splice(index, 1);\n    } else {\n      this.params[index] = strValue;\n    }\n\n    this.part.params = this.params;\n  }\n}\n"],"sourceRoot":""}