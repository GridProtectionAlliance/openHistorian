{"version":3,"sources":["webpack:///./public/app/core/components/sql_part/sql_part.ts","webpack:///./public/app/plugins/datasource/mysql/response_parser.ts","webpack:///./public/app/plugins/datasource/mysql/mysql_query.ts","webpack:///./public/app/plugins/datasource/mysql/datasource.ts","webpack:///./public/app/plugins/datasource/mysql/meta_query.ts","webpack:///./public/app/plugins/datasource/mysql/sql_part.ts","webpack:///./public/app/plugins/datasource/mysql/query_ctrl.ts","webpack:///./public/app/plugins/datasource/mysql/module.ts"],"names":["__webpack_require__","d","__webpack_exports__","SqlPartDef","SqlPart","lodash__WEBPACK_IMPORTED_MODULE_0__","lodash__WEBPACK_IMPORTED_MODULE_0___default","n","options","this","type","label","toUpperCase","substring","style","wrapOpen","wrapClose","separator","params","defaultParams","part","def","message","datatype","name","a","clone","prototype","updateParam","strValue","index","optional","splice","ResponseParser","$q","processQueryResult","res","data","results","key","queryRes","series","_c","e_1","tslib_es6","_d","next","done","value","push","target","datapoints","points","refId","meta","tables","_e","e_2","_f","table","parseMetricFindQueryResult","length","rowCount","columns","rows","textColIndex","findColIndex","valueColIndex","transformToKeyValueList","transformToSimpleList","i","containsKey","text","j","indexOf","lodash_default","map","colName","transformAnnotationResponse","annotation","timeColumnIndex","textColumnIndex","tagsColumnIndex","reject","list","row","time","Math","floor","toString","tags","trim","split","MysqlQuery","templateSrv","scopedVars","format","timeColumn","metricColumn","group","where","select","rawQuery","interpolateQueryStr","bind","$inject","unquoteIdentifier","replace","quoteIdentifier","quoteLiteral","escapeLiteral","String","hasTimeGroup","find","g","hasMetricColumn","variable","defaultFormatFn","multi","includeAll","join","render","interpolate","rawSql","buildQuery","hasUnixEpochTimecolumn","timeColumnType","buildTimeColumn","alias","query","timeGroup","macro","args","buildMetricColumn","_a","_b","column","buildValueColumn","aggregate","buildWhereClause","_this","conditions","tag","buildGroupClause","groupSection","buildValueColumns","datasource_MysqlDatasource","MysqlDatasource","instanceSettings","backendSrv","timeSrv","queryModel","v","id","responseParser","response_parser","mysql_query","interval","jsonData","timeInterval","queries","filter","targets","hide","intervalMs","maxDataPoints","datasourceId","interpolateVariable","when","datasourceRequest","url","from","range","valueOf","to","then","annotationQuery","metricFindQuery","optionalOptions","interpolatedQuery","timeRange","method","testDatasource","status","catch","err","log","targetContainsTemplate","variableExists","MysqlMetaQuery","getOperators","quoteIdentAsLiteral","findMetricTable","buildTableConstraint","includes","parts","buildTableQuery","buildColumnQuery","buildValueQuery","buildDatatypeQuery","sql_part_index","register","sql_part","dynamicLookup","quote","mysql_sql_part","defaultQuery","query_ctrl_MysqlQueryCtrl","_super","MysqlQueryCtrl","$scope","$injector","uiSegmentSrv","call","panel","metaBuilder","updateProjection","formats","panelCtrl","result","segment","newSegment","tableSegment","html","timeColumnSegment","updateRawSqlAndRefresh","fake","metricColumnSegment","buildSelectMenu","whereAdd","newPlusButton","events","on","onDataReceived","onDataError","refresh","selectParts","create","whereParts","groupParts","updatePersistedParts","selectMenu","toggleEditorMode","emit","title","text2","yesText","onConfirm","resetPlusButton","button","plusButton","getTableSegments","datasource","transformToSegments","handleQueryError","tableChanged","r","segment_1","timeColumnChanged","all","task1","task2","getTimeColumnSegments","partModel","getMetricColumnSegments","addNone","metricColumnChanged","dataList","lastQueryMeta","lastQueryError","anySeriesFromQuery","error","expandable","variables","config","templateQuoter","unshift","segments","findAggregateIndex","findIndex","p","findWindowIndex","addSelectPart","item","subItem","partType","addGroup","aggIndex","addAlias","windowIndex","aggIndex_1","removeSelectPart","modelsIndex","partIndex","handleSelectPartEvent","evt","handleGroupPartEvent","removeGroup","some","s","handleWherePartEvent","addTemplateVars","newOperators","getWhereOptions","addWhereAction","getGroupOptions","e_3","tags_1","tags_1_1","addGroupAction","groupAdd","templateUrl","passwordHandlers","module_MysqlConfigCtrl","MysqlAnnotationsQueryCtrl","MysqlConfigCtrl","onPasswordReset","Object","Password","onPasswordChange","module_defaultQuery"],"mappings":"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","file":"mysqlPlugin.3932bda029d2299a9d96.js","sourcesContent":["import _ from 'lodash';\n\nexport class SqlPartDef {\n  type: string;\n  style: string;\n  label: string;\n  params: any[];\n  defaultParams: any[];\n  wrapOpen: string;\n  wrapClose: string;\n  separator: string;\n\n  constructor(options: any) {\n    this.type = options.type;\n    if (options.label) {\n      this.label = options.label;\n    } else {\n      this.label = this.type[0].toUpperCase() + this.type.substring(1) + ':';\n    }\n    this.style = options.style;\n    if (this.style === 'function') {\n      this.wrapOpen = '(';\n      this.wrapClose = ')';\n      this.separator = ', ';\n    } else {\n      this.wrapOpen = ' ';\n      this.wrapClose = ' ';\n      this.separator = ' ';\n    }\n    this.params = options.params;\n    this.defaultParams = options.defaultParams;\n  }\n}\n\nexport class SqlPart {\n  part: any;\n  def: SqlPartDef;\n  params: any[];\n  label: string;\n  name: string;\n  datatype: string;\n\n  constructor(part: any, def: any) {\n    this.part = part;\n    this.def = def;\n    if (!this.def) {\n      throw { message: 'Could not find sql part ' + part.type };\n    }\n\n    this.datatype = part.datatype;\n\n    if (part.name) {\n      this.name = part.name;\n      this.label = def.label + ' ' + part.name;\n    } else {\n      this.name = '';\n      this.label = def.label;\n    }\n\n    part.params = part.params || _.clone(this.def.defaultParams);\n    this.params = part.params;\n  }\n\n  updateParam(strValue: string, index: number) {\n    // handle optional parameters\n    if (strValue === '' && this.def.params[index].optional) {\n      this.params.splice(index, 1);\n    } else {\n      this.params[index] = strValue;\n    }\n\n    this.part.params = this.params;\n  }\n}\n","import _ from 'lodash';\nimport { IQService } from 'angular';\n\nexport default class ResponseParser {\n  constructor(private $q: IQService) {}\n\n  processQueryResult(res: any) {\n    const data: any[] = [];\n\n    if (!res.data.results) {\n      return { data: data };\n    }\n\n    for (const key in res.data.results) {\n      const queryRes = res.data.results[key];\n\n      if (queryRes.series) {\n        for (const series of queryRes.series) {\n          data.push({\n            target: series.name,\n            datapoints: series.points,\n            refId: queryRes.refId,\n            meta: queryRes.meta,\n          });\n        }\n      }\n\n      if (queryRes.tables) {\n        for (const table of queryRes.tables) {\n          table.type = 'table';\n          table.refId = queryRes.refId;\n          table.meta = queryRes.meta;\n          data.push(table);\n        }\n      }\n    }\n\n    return { data: data };\n  }\n\n  parseMetricFindQueryResult(refId: string, results: any) {\n    if (!results || results.data.length === 0 || results.data.results[refId].meta.rowCount === 0) {\n      return [];\n    }\n\n    const columns = results.data.results[refId].tables[0].columns;\n    const rows = results.data.results[refId].tables[0].rows;\n    const textColIndex = this.findColIndex(columns, '__text');\n    const valueColIndex = this.findColIndex(columns, '__value');\n\n    if (columns.length === 2 && textColIndex !== -1 && valueColIndex !== -1) {\n      return this.transformToKeyValueList(rows, textColIndex, valueColIndex);\n    }\n\n    return this.transformToSimpleList(rows);\n  }\n\n  transformToKeyValueList(rows: any, textColIndex: number, valueColIndex: number) {\n    const res = [];\n\n    for (let i = 0; i < rows.length; i++) {\n      if (!this.containsKey(res, rows[i][textColIndex])) {\n        res.push({\n          text: rows[i][textColIndex],\n          value: rows[i][valueColIndex],\n        });\n      }\n    }\n\n    return res;\n  }\n\n  transformToSimpleList(rows: any) {\n    const res = [];\n\n    for (let i = 0; i < rows.length; i++) {\n      for (let j = 0; j < rows[i].length; j++) {\n        const value = rows[i][j];\n        if (res.indexOf(value) === -1) {\n          res.push(value);\n        }\n      }\n    }\n\n    return _.map(res, value => {\n      return { text: value };\n    });\n  }\n\n  findColIndex(columns: any[], colName: string) {\n    for (let i = 0; i < columns.length; i++) {\n      if (columns[i].text === colName) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  containsKey(res: any[], key: any) {\n    for (let i = 0; i < res.length; i++) {\n      if (res[i].text === key) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  transformAnnotationResponse(options: any, data: any) {\n    const table = data.data.results[options.annotation.name].tables[0];\n\n    let timeColumnIndex = -1;\n    let textColumnIndex = -1;\n    let tagsColumnIndex = -1;\n\n    for (let i = 0; i < table.columns.length; i++) {\n      if (table.columns[i].text === 'time_sec' || table.columns[i].text === 'time') {\n        timeColumnIndex = i;\n      } else if (table.columns[i].text === 'title') {\n        return this.$q.reject({\n          message: 'The title column for annotations is deprecated, now only a column named text is returned',\n        });\n      } else if (table.columns[i].text === 'text') {\n        textColumnIndex = i;\n      } else if (table.columns[i].text === 'tags') {\n        tagsColumnIndex = i;\n      }\n    }\n\n    if (timeColumnIndex === -1) {\n      return this.$q.reject({\n        message: 'Missing mandatory time column (with time_sec column alias) in annotation query.',\n      });\n    }\n\n    const list = [];\n    for (let i = 0; i < table.rows.length; i++) {\n      const row = table.rows[i];\n      list.push({\n        annotation: options.annotation,\n        time: Math.floor(row[timeColumnIndex]),\n        text: row[textColumnIndex] ? row[textColumnIndex].toString() : '',\n        tags: row[tagsColumnIndex] ? row[tagsColumnIndex].trim().split(/\\s*,\\s*/) : [],\n      });\n    }\n\n    return list;\n  }\n}\n","import _ from 'lodash';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport { ScopedVars } from '@grafana/data';\n\nexport default class MysqlQuery {\n  target: any;\n  templateSrv: any;\n  scopedVars: any;\n\n  /** @ngInject */\n  constructor(target: any, templateSrv?: TemplateSrv, scopedVars?: ScopedVars) {\n    this.target = target;\n    this.templateSrv = templateSrv;\n    this.scopedVars = scopedVars;\n\n    target.format = target.format || 'time_series';\n    target.timeColumn = target.timeColumn || 'time';\n    target.metricColumn = target.metricColumn || 'none';\n\n    target.group = target.group || [];\n    target.where = target.where || [{ type: 'macro', name: '$__timeFilter', params: [] }];\n    target.select = target.select || [[{ type: 'column', params: ['value'] }]];\n\n    // handle pre query gui panels gracefully\n    if (!('rawQuery' in this.target)) {\n      if ('rawSql' in target) {\n        // pre query gui panel\n        target.rawQuery = true;\n      } else {\n        // new panel\n        target.rawQuery = false;\n      }\n    }\n\n    // give interpolateQueryStr access to this\n    this.interpolateQueryStr = this.interpolateQueryStr.bind(this);\n  }\n\n  // remove identifier quoting from identifier to use in metadata queries\n  unquoteIdentifier(value: string) {\n    if (value[0] === '\"' && value[value.length - 1] === '\"') {\n      return value.substring(1, value.length - 1).replace(/\"\"/g, '\"');\n    } else {\n      return value;\n    }\n  }\n\n  quoteIdentifier(value: string) {\n    return '\"' + value.replace(/\"/g, '\"\"') + '\"';\n  }\n\n  quoteLiteral(value: string) {\n    return \"'\" + value.replace(/'/g, \"''\") + \"'\";\n  }\n\n  escapeLiteral(value: any) {\n    return String(value).replace(/'/g, \"''\");\n  }\n\n  hasTimeGroup() {\n    return _.find(this.target.group, (g: any) => g.type === 'time');\n  }\n\n  hasMetricColumn() {\n    return this.target.metricColumn !== 'none';\n  }\n\n  interpolateQueryStr(value: string, variable: { multi: any; includeAll: any }, defaultFormatFn: any) {\n    // if no multi or include all do not regexEscape\n    if (!variable.multi && !variable.includeAll) {\n      return this.escapeLiteral(value);\n    }\n\n    if (typeof value === 'string') {\n      return this.quoteLiteral(value);\n    }\n\n    const escapedValues = _.map(value, this.quoteLiteral);\n    return escapedValues.join(',');\n  }\n\n  render(interpolate?: boolean) {\n    const target = this.target;\n\n    // new query with no table set yet\n    if (!this.target.rawQuery && !('table' in this.target)) {\n      return '';\n    }\n\n    if (!target.rawQuery) {\n      target.rawSql = this.buildQuery();\n    }\n\n    if (interpolate) {\n      return this.templateSrv.replace(target.rawSql, this.scopedVars, this.interpolateQueryStr);\n    } else {\n      return target.rawSql;\n    }\n  }\n\n  hasUnixEpochTimecolumn() {\n    return ['int', 'bigint', 'double'].indexOf(this.target.timeColumnType) > -1;\n  }\n\n  buildTimeColumn(alias = true) {\n    const timeGroup = this.hasTimeGroup();\n    let query;\n    let macro = '$__timeGroup';\n\n    if (timeGroup) {\n      let args;\n      if (timeGroup.params.length > 1 && timeGroup.params[1] !== 'none') {\n        args = timeGroup.params.join(',');\n      } else {\n        args = timeGroup.params[0];\n      }\n      if (this.hasUnixEpochTimecolumn()) {\n        macro = '$__unixEpochGroup';\n      }\n      if (alias) {\n        macro += 'Alias';\n      }\n      query = macro + '(' + this.target.timeColumn + ',' + args + ')';\n    } else {\n      query = this.target.timeColumn;\n      if (alias) {\n        query += ' AS \"time\"';\n      }\n    }\n\n    return query;\n  }\n\n  buildMetricColumn() {\n    if (this.hasMetricColumn()) {\n      return this.target.metricColumn + ' AS metric';\n    }\n\n    return '';\n  }\n\n  buildValueColumns() {\n    let query = '';\n    for (const column of this.target.select) {\n      query += ',\\n  ' + this.buildValueColumn(column);\n    }\n\n    return query;\n  }\n\n  buildValueColumn(column: any) {\n    let query = '';\n\n    const columnName: any = _.find(column, (g: any) => g.type === 'column');\n    query = columnName.params[0];\n\n    const aggregate: any = _.find(column, (g: any) => g.type === 'aggregate');\n\n    if (aggregate) {\n      const func = aggregate.params[0];\n      query = func + '(' + query + ')';\n    }\n\n    const alias: any = _.find(column, (g: any) => g.type === 'alias');\n    if (alias) {\n      query += ' AS ' + this.quoteIdentifier(alias.params[0]);\n    }\n\n    return query;\n  }\n\n  buildWhereClause() {\n    let query = '';\n    const conditions = _.map(this.target.where, (tag, index) => {\n      switch (tag.type) {\n        case 'macro':\n          return tag.name + '(' + this.target.timeColumn + ')';\n          break;\n        case 'expression':\n          return tag.params.join(' ');\n          break;\n      }\n    });\n\n    if (conditions.length > 0) {\n      query = '\\nWHERE\\n  ' + conditions.join(' AND\\n  ');\n    }\n\n    return query;\n  }\n\n  buildGroupClause() {\n    let query = '';\n    let groupSection = '';\n\n    for (let i = 0; i < this.target.group.length; i++) {\n      const part = this.target.group[i];\n      if (i > 0) {\n        groupSection += ', ';\n      }\n      if (part.type === 'time') {\n        groupSection += '1';\n      } else {\n        groupSection += part.params[0];\n      }\n    }\n\n    if (groupSection.length) {\n      query = '\\nGROUP BY ' + groupSection;\n      if (this.hasMetricColumn()) {\n        query += ',2';\n      }\n    }\n    return query;\n  }\n\n  buildQuery() {\n    let query = 'SELECT';\n\n    query += '\\n  ' + this.buildTimeColumn();\n    if (this.hasMetricColumn()) {\n      query += ',\\n  ' + this.buildMetricColumn();\n    }\n    query += this.buildValueColumns();\n\n    query += '\\nFROM ' + this.target.table;\n\n    query += this.buildWhereClause();\n    query += this.buildGroupClause();\n\n    query += '\\nORDER BY ' + this.buildTimeColumn(false);\n\n    return query;\n  }\n}\n","import _ from 'lodash';\nimport ResponseParser from './response_parser';\nimport MysqlQuery from 'app/plugins/datasource/mysql/mysql_query';\nimport { BackendSrv } from 'app/core/services/backend_srv';\nimport { IQService } from 'angular';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport { TimeSrv } from 'app/features/dashboard/services/TimeSrv';\n\nexport class MysqlDatasource {\n  id: any;\n  name: any;\n  responseParser: ResponseParser;\n  queryModel: MysqlQuery;\n  interval: string;\n\n  /** @ngInject */\n  constructor(\n    instanceSettings: any,\n    private backendSrv: BackendSrv,\n    private $q: IQService,\n    private templateSrv: TemplateSrv,\n    private timeSrv: TimeSrv\n  ) {\n    this.name = instanceSettings.name;\n    this.id = instanceSettings.id;\n    this.responseParser = new ResponseParser(this.$q);\n    this.queryModel = new MysqlQuery({});\n    this.interval = (instanceSettings.jsonData || {}).timeInterval || '1m';\n  }\n\n  interpolateVariable = (value: string, variable: any) => {\n    if (typeof value === 'string') {\n      if (variable.multi || variable.includeAll) {\n        return this.queryModel.quoteLiteral(value);\n      } else {\n        return value;\n      }\n    }\n\n    if (typeof value === 'number') {\n      return value;\n    }\n\n    const quotedValues = _.map(value, (v: any) => {\n      return this.queryModel.quoteLiteral(v);\n    });\n    return quotedValues.join(',');\n  };\n\n  query(options: any) {\n    const queries = _.filter(options.targets, target => {\n      return target.hide !== true;\n    }).map(target => {\n      const queryModel = new MysqlQuery(target, this.templateSrv, options.scopedVars);\n\n      return {\n        refId: target.refId,\n        intervalMs: options.intervalMs,\n        maxDataPoints: options.maxDataPoints,\n        datasourceId: this.id,\n        rawSql: queryModel.render(this.interpolateVariable as any),\n        format: target.format,\n      };\n    });\n\n    if (queries.length === 0) {\n      return this.$q.when({ data: [] });\n    }\n\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: options.range.from.valueOf().toString(),\n          to: options.range.to.valueOf().toString(),\n          queries: queries,\n        },\n      })\n      .then(this.responseParser.processQueryResult);\n  }\n\n  annotationQuery(options: any) {\n    if (!options.annotation.rawQuery) {\n      return this.$q.reject({\n        message: 'Query missing in annotation definition',\n      });\n    }\n\n    const query = {\n      refId: options.annotation.name,\n      datasourceId: this.id,\n      rawSql: this.templateSrv.replace(options.annotation.rawQuery, options.scopedVars, this.interpolateVariable),\n      format: 'table',\n    };\n\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: options.range.from.valueOf().toString(),\n          to: options.range.to.valueOf().toString(),\n          queries: [query],\n        },\n      })\n      .then((data: any) => this.responseParser.transformAnnotationResponse(options, data));\n  }\n\n  metricFindQuery(query: string, optionalOptions: any) {\n    let refId = 'tempvar';\n    if (optionalOptions && optionalOptions.variable && optionalOptions.variable.name) {\n      refId = optionalOptions.variable.name;\n    }\n\n    const interpolatedQuery = {\n      refId: refId,\n      datasourceId: this.id,\n      rawSql: this.templateSrv.replace(query, {}, this.interpolateVariable),\n      format: 'table',\n    };\n\n    const range = this.timeSrv.timeRange();\n    const data = {\n      queries: [interpolatedQuery],\n      from: range.from.valueOf().toString(),\n      to: range.to.valueOf().toString(),\n    };\n\n    if (optionalOptions && optionalOptions.range && optionalOptions.range.from) {\n      data['from'] = optionalOptions.range.from.valueOf().toString();\n    }\n    if (optionalOptions && optionalOptions.range && optionalOptions.range.to) {\n      data['to'] = optionalOptions.range.to.valueOf().toString();\n    }\n\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: data,\n      })\n      .then((data: any) => this.responseParser.parseMetricFindQueryResult(refId, data));\n  }\n\n  testDatasource() {\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: '5m',\n          to: 'now',\n          queries: [\n            {\n              refId: 'A',\n              intervalMs: 1,\n              maxDataPoints: 1,\n              datasourceId: this.id,\n              rawSql: 'SELECT 1',\n              format: 'table',\n            },\n          ],\n        },\n      })\n      .then((res: any) => {\n        return { status: 'success', message: 'Database Connection OK' };\n      })\n      .catch((err: any) => {\n        console.log(err);\n        if (err.data && err.data.message) {\n          return { status: 'error', message: err.data.message };\n        } else {\n          return { status: 'error', message: err.status };\n        }\n      });\n  }\n\n  targetContainsTemplate(target: any) {\n    let rawSql = '';\n\n    if (target.rawQuery) {\n      rawSql = target.rawSql;\n    } else {\n      const query = new MysqlQuery(target);\n      rawSql = query.buildQuery();\n    }\n\n    rawSql = rawSql.replace('$__', '');\n\n    return this.templateSrv.variableExists(rawSql);\n  }\n}\n","export class MysqlMetaQuery {\n  constructor(private target: any, private queryModel: any) {}\n\n  getOperators(datatype: string) {\n    switch (datatype) {\n      case 'double':\n      case 'float': {\n        return ['=', '!=', '<', '<=', '>', '>='];\n      }\n      case 'text':\n      case 'tinytext':\n      case 'mediumtext':\n      case 'longtext':\n      case 'varchar':\n      case 'char': {\n        return ['=', '!=', '<', '<=', '>', '>=', 'IN', 'NOT IN', 'LIKE', 'NOT LIKE'];\n      }\n      default: {\n        return ['=', '!=', '<', '<=', '>', '>=', 'IN', 'NOT IN'];\n      }\n    }\n  }\n\n  // quote identifier as literal to use in metadata queries\n  quoteIdentAsLiteral(value: string) {\n    return this.queryModel.quoteLiteral(this.queryModel.unquoteIdentifier(value));\n  }\n\n  findMetricTable() {\n    // query that returns first table found that has a timestamp(tz) column and a float column\n    const query = `\n  SELECT\n    table_name as table_name,\n    ( SELECT\n        column_name as column_name\n      FROM information_schema.columns c\n      WHERE\n        c.table_schema = t.table_schema AND\n        c.table_name = t.table_name AND\n        c.data_type IN ('timestamp', 'datetime')\n      ORDER BY ordinal_position LIMIT 1\n    ) AS time_column,\n    ( SELECT\n        column_name AS column_name\n      FROM information_schema.columns c\n      WHERE\n        c.table_schema = t.table_schema AND\n        c.table_name = t.table_name AND\n        c.data_type IN('float', 'int', 'bigint')\n      ORDER BY ordinal_position LIMIT 1\n    ) AS value_column\n  FROM information_schema.tables t\n  WHERE\n    t.table_schema = database() AND\n    EXISTS\n    ( SELECT 1\n      FROM information_schema.columns c\n      WHERE\n        c.table_schema = t.table_schema AND\n        c.table_name = t.table_name AND\n        c.data_type IN ('timestamp', 'datetime')\n    ) AND\n    EXISTS\n    ( SELECT 1\n      FROM information_schema.columns c\n      WHERE\n        c.table_schema = t.table_schema AND\n        c.table_name = t.table_name AND\n        c.data_type IN('float', 'int', 'bigint')\n    )\n  LIMIT 1\n;`;\n    return query;\n  }\n\n  buildTableConstraint(table: string) {\n    let query = '';\n\n    // check for schema qualified table\n    if (table.includes('.')) {\n      const parts = table.split('.');\n      query = 'table_schema = ' + this.quoteIdentAsLiteral(parts[0]);\n      query += ' AND table_name = ' + this.quoteIdentAsLiteral(parts[1]);\n      return query;\n    } else {\n      query = 'table_schema = database() AND table_name = ' + this.quoteIdentAsLiteral(table);\n\n      return query;\n    }\n  }\n\n  buildTableQuery() {\n    return 'SELECT table_name FROM information_schema.tables WHERE table_schema = database() ORDER BY table_name';\n  }\n\n  buildColumnQuery(type?: string) {\n    let query = 'SELECT column_name FROM information_schema.columns WHERE ';\n    query += this.buildTableConstraint(this.target.table);\n\n    switch (type) {\n      case 'time': {\n        query += \" AND data_type IN ('timestamp','datetime','bigint','int','double','float')\";\n        break;\n      }\n      case 'metric': {\n        query += \" AND data_type IN ('text','tinytext','mediumtext','longtext','varchar','char')\";\n        break;\n      }\n      case 'value': {\n        query += \" AND data_type IN ('bigint','int','smallint','mediumint','tinyint','double','decimal','float')\";\n        query += ' AND column_name <> ' + this.quoteIdentAsLiteral(this.target.timeColumn);\n        break;\n      }\n      case 'group': {\n        query += \" AND data_type IN ('text','tinytext','mediumtext','longtext','varchar','char')\";\n        break;\n      }\n    }\n\n    query += ' ORDER BY column_name';\n\n    return query;\n  }\n\n  buildValueQuery(column: string) {\n    let query = 'SELECT DISTINCT QUOTE(' + column + ')';\n    query += ' FROM ' + this.target.table;\n    query += ' WHERE $__timeFilter(' + this.target.timeColumn + ')';\n    query += ' ORDER BY 1 LIMIT 100';\n    return query;\n  }\n\n  buildDatatypeQuery(column: string) {\n    let query = `\nSELECT data_type\nFROM information_schema.columns\nWHERE `;\n    query += ' table_name = ' + this.quoteIdentAsLiteral(this.target.table);\n    query += ' AND column_name = ' + this.quoteIdentAsLiteral(column);\n    return query;\n  }\n}\n","import { SqlPartDef, SqlPart } from 'app/core/components/sql_part/sql_part';\n\nconst index: any[] = [];\n\nfunction createPart(part: any): any {\n  const def = index[part.type];\n  if (!def) {\n    return null;\n  }\n\n  return new SqlPart(part, def);\n}\n\nfunction register(options: any) {\n  index[options.type] = new SqlPartDef(options);\n}\n\nregister({\n  type: 'column',\n  style: 'label',\n  params: [{ type: 'column', dynamicLookup: true }],\n  defaultParams: ['value'],\n});\n\nregister({\n  type: 'expression',\n  style: 'expression',\n  label: 'Expr:',\n  params: [\n    { name: 'left', type: 'string', dynamicLookup: true },\n    { name: 'op', type: 'string', dynamicLookup: true },\n    { name: 'right', type: 'string', dynamicLookup: true },\n  ],\n  defaultParams: ['value', '=', 'value'],\n});\n\nregister({\n  type: 'macro',\n  style: 'label',\n  label: 'Macro:',\n  params: [],\n  defaultParams: [],\n});\n\nregister({\n  type: 'aggregate',\n  style: 'label',\n  params: [\n    {\n      name: 'name',\n      type: 'string',\n      options: ['avg', 'count', 'min', 'max', 'sum', 'stddev', 'variance'],\n    },\n  ],\n  defaultParams: ['avg'],\n});\n\nregister({\n  type: 'alias',\n  style: 'label',\n  params: [{ name: 'name', type: 'string', quote: 'double' }],\n  defaultParams: ['alias'],\n});\n\nregister({\n  type: 'time',\n  style: 'function',\n  label: 'time',\n  params: [\n    {\n      name: 'interval',\n      type: 'interval',\n      options: ['$__interval', '1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n    {\n      name: 'fill',\n      type: 'string',\n      options: ['none', 'NULL', 'previous', '0'],\n    },\n  ],\n  defaultParams: ['$__interval', 'none'],\n});\n\nexport default {\n  create: createPart,\n};\n","import _ from 'lodash';\nimport appEvents from 'app/core/app_events';\nimport { MysqlMetaQuery } from './meta_query';\nimport { QueryCtrl } from 'app/plugins/sdk';\nimport { SqlPart } from 'app/core/components/sql_part/sql_part';\nimport MysqlQuery from './mysql_query';\nimport sqlPart from './sql_part';\nimport { auto, IQService } from 'angular';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\n\nexport interface QueryMeta {\n  sql: string;\n}\n\nconst defaultQuery = `SELECT\n  UNIX_TIMESTAMP(<time_column>) as time_sec,\n  <value column> as value,\n  <series name column> as metric\nFROM <table name>\nWHERE $__timeFilter(time_column)\nORDER BY <time_column> ASC\n`;\n\nexport class MysqlQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  showLastQuerySQL: boolean;\n  formats: any[];\n  lastQueryMeta: QueryMeta;\n  lastQueryError: string;\n  showHelp: boolean;\n\n  queryModel: MysqlQuery;\n  metaBuilder: MysqlMetaQuery;\n  tableSegment: any;\n  whereAdd: any;\n  timeColumnSegment: any;\n  metricColumnSegment: any;\n  selectMenu: any[];\n  selectParts: SqlPart[][];\n  groupParts: SqlPart[];\n  whereParts: SqlPart[];\n  groupAdd: any;\n\n  /** @ngInject */\n  constructor(\n    $scope: any,\n    $injector: auto.IInjectorService,\n    private templateSrv: TemplateSrv,\n    private $q: IQService,\n    private uiSegmentSrv: any\n  ) {\n    super($scope, $injector);\n\n    this.target = this.target;\n    this.queryModel = new MysqlQuery(this.target, templateSrv, this.panel.scopedVars);\n    this.metaBuilder = new MysqlMetaQuery(this.target, this.queryModel);\n    this.updateProjection();\n\n    this.formats = [{ text: 'Time series', value: 'time_series' }, { text: 'Table', value: 'table' }];\n\n    if (!this.target.rawSql) {\n      // special handling when in table panel\n      if (this.panelCtrl.panel.type === 'table') {\n        this.target.format = 'table';\n        this.target.rawSql = 'SELECT 1';\n        this.target.rawQuery = true;\n      } else {\n        this.target.rawSql = defaultQuery;\n        this.datasource.metricFindQuery(this.metaBuilder.findMetricTable()).then((result: any) => {\n          if (result.length > 0) {\n            this.target.table = result[0].text;\n            let segment = this.uiSegmentSrv.newSegment(this.target.table);\n            this.tableSegment.html = segment.html;\n            this.tableSegment.value = segment.value;\n\n            this.target.timeColumn = result[1].text;\n            segment = this.uiSegmentSrv.newSegment(this.target.timeColumn);\n            this.timeColumnSegment.html = segment.html;\n            this.timeColumnSegment.value = segment.value;\n\n            this.target.timeColumnType = 'timestamp';\n            this.target.select = [[{ type: 'column', params: [result[2].text] }]];\n            this.updateProjection();\n            this.updateRawSqlAndRefresh();\n          }\n        });\n      }\n    }\n\n    if (!this.target.table) {\n      this.tableSegment = uiSegmentSrv.newSegment({ value: 'select table', fake: true });\n    } else {\n      this.tableSegment = uiSegmentSrv.newSegment(this.target.table);\n    }\n\n    this.timeColumnSegment = uiSegmentSrv.newSegment(this.target.timeColumn);\n    this.metricColumnSegment = uiSegmentSrv.newSegment(this.target.metricColumn);\n\n    this.buildSelectMenu();\n    this.whereAdd = this.uiSegmentSrv.newPlusButton();\n    this.groupAdd = this.uiSegmentSrv.newPlusButton();\n\n    this.panelCtrl.events.on('data-received', this.onDataReceived.bind(this), $scope);\n    this.panelCtrl.events.on('data-error', this.onDataError.bind(this), $scope);\n  }\n\n  updateRawSqlAndRefresh() {\n    if (!this.target.rawQuery) {\n      this.target.rawSql = this.queryModel.buildQuery();\n    }\n\n    this.panelCtrl.refresh();\n  }\n\n  updateProjection() {\n    this.selectParts = _.map(this.target.select, (parts: any) => {\n      return _.map(parts, sqlPart.create).filter(n => n);\n    });\n    this.whereParts = _.map(this.target.where, sqlPart.create).filter(n => n);\n    this.groupParts = _.map(this.target.group, sqlPart.create).filter(n => n);\n  }\n\n  updatePersistedParts() {\n    this.target.select = _.map(this.selectParts, selectParts => {\n      return _.map(selectParts, (part: any) => {\n        return { type: part.def.type, datatype: part.datatype, params: part.params };\n      });\n    });\n    this.target.where = _.map(this.whereParts, (part: any) => {\n      return { type: part.def.type, datatype: part.datatype, name: part.name, params: part.params };\n    });\n    this.target.group = _.map(this.groupParts, (part: any) => {\n      return { type: part.def.type, datatype: part.datatype, params: part.params };\n    });\n  }\n\n  buildSelectMenu() {\n    this.selectMenu = [];\n    const aggregates = {\n      text: 'Aggregate Functions',\n      value: 'aggregate',\n      submenu: [\n        { text: 'Average', value: 'avg' },\n        { text: 'Count', value: 'count' },\n        { text: 'Maximum', value: 'max' },\n        { text: 'Minimum', value: 'min' },\n        { text: 'Sum', value: 'sum' },\n        { text: 'Standard deviation', value: 'stddev' },\n        { text: 'Variance', value: 'variance' },\n      ],\n    };\n\n    this.selectMenu.push(aggregates);\n    this.selectMenu.push({ text: 'Alias', value: 'alias' });\n    this.selectMenu.push({ text: 'Column', value: 'column' });\n  }\n\n  toggleEditorMode() {\n    if (this.target.rawQuery) {\n      appEvents.emit('confirm-modal', {\n        title: 'Warning',\n        text2: 'Switching to query builder may overwrite your raw SQL.',\n        icon: 'fa-exclamation',\n        yesText: 'Switch',\n        onConfirm: () => {\n          this.target.rawQuery = !this.target.rawQuery;\n        },\n      });\n    } else {\n      this.target.rawQuery = !this.target.rawQuery;\n    }\n  }\n\n  resetPlusButton(button: { html: any; value: any }) {\n    const plusButton = this.uiSegmentSrv.newPlusButton();\n    button.html = plusButton.html;\n    button.value = plusButton.value;\n  }\n\n  getTableSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildTableQuery())\n      .then(this.transformToSegments({}))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  tableChanged() {\n    this.target.table = this.tableSegment.value;\n    this.target.where = [];\n    this.target.group = [];\n    this.updateProjection();\n\n    const segment = this.uiSegmentSrv.newSegment('none');\n    this.metricColumnSegment.html = segment.html;\n    this.metricColumnSegment.value = segment.value;\n    this.target.metricColumn = 'none';\n\n    const task1 = this.datasource.metricFindQuery(this.metaBuilder.buildColumnQuery('time')).then((result: any) => {\n      // check if time column is still valid\n      if (result.length > 0 && !_.find(result, (r: any) => r.text === this.target.timeColumn)) {\n        const segment = this.uiSegmentSrv.newSegment(result[0].text);\n        this.timeColumnSegment.html = segment.html;\n        this.timeColumnSegment.value = segment.value;\n      }\n      return this.timeColumnChanged(false);\n    });\n    const task2 = this.datasource.metricFindQuery(this.metaBuilder.buildColumnQuery('value')).then((result: any) => {\n      if (result.length > 0) {\n        this.target.select = [[{ type: 'column', params: [result[0].text] }]];\n        this.updateProjection();\n      }\n    });\n\n    this.$q.all([task1, task2]).then(() => {\n      this.updateRawSqlAndRefresh();\n    });\n  }\n\n  getTimeColumnSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('time'))\n      .then(this.transformToSegments({}))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  timeColumnChanged(refresh?: boolean) {\n    this.target.timeColumn = this.timeColumnSegment.value;\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildDatatypeQuery(this.target.timeColumn))\n      .then((result: any) => {\n        if (result.length === 1) {\n          if (this.target.timeColumnType !== result[0].text) {\n            this.target.timeColumnType = result[0].text;\n          }\n          let partModel;\n          if (this.queryModel.hasUnixEpochTimecolumn()) {\n            partModel = sqlPart.create({ type: 'macro', name: '$__unixEpochFilter', params: [] });\n          } else {\n            partModel = sqlPart.create({ type: 'macro', name: '$__timeFilter', params: [] });\n          }\n\n          if (this.whereParts.length >= 1 && this.whereParts[0].def.type === 'macro') {\n            // replace current macro\n            this.whereParts[0] = partModel;\n          } else {\n            this.whereParts.splice(0, 0, partModel);\n          }\n        }\n\n        this.updatePersistedParts();\n        if (refresh !== false) {\n          this.updateRawSqlAndRefresh();\n        }\n      });\n  }\n\n  getMetricColumnSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('metric'))\n      .then(this.transformToSegments({ addNone: true }))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  metricColumnChanged() {\n    this.target.metricColumn = this.metricColumnSegment.value;\n    this.updateRawSqlAndRefresh();\n  }\n\n  onDataReceived(dataList: any) {\n    this.lastQueryMeta = null;\n    this.lastQueryError = null;\n\n    const anySeriesFromQuery: any = _.find(dataList, { refId: this.target.refId });\n    if (anySeriesFromQuery) {\n      this.lastQueryMeta = anySeriesFromQuery.meta;\n    }\n  }\n\n  onDataError(err: any) {\n    if (err.data && err.data.results) {\n      const queryRes = err.data.results[this.target.refId];\n      if (queryRes) {\n        this.lastQueryMeta = queryRes.meta;\n        this.lastQueryError = queryRes.error;\n      }\n    }\n  }\n\n  transformToSegments(config: any) {\n    return (results: any) => {\n      const segments = _.map(results, segment => {\n        return this.uiSegmentSrv.newSegment({\n          value: segment.text,\n          expandable: segment.expandable,\n        });\n      });\n\n      if (config.addTemplateVars) {\n        for (const variable of this.templateSrv.variables) {\n          let value;\n          value = '$' + variable.name;\n          if (config.templateQuoter && variable.multi === false) {\n            value = config.templateQuoter(value);\n          }\n\n          segments.unshift(\n            this.uiSegmentSrv.newSegment({\n              type: 'template',\n              value: value,\n              expandable: true,\n            })\n          );\n        }\n      }\n\n      if (config.addNone) {\n        segments.unshift(this.uiSegmentSrv.newSegment({ type: 'template', value: 'none', expandable: true }));\n      }\n\n      return segments;\n    };\n  }\n\n  findAggregateIndex(selectParts: any) {\n    return _.findIndex(selectParts, (p: any) => p.def.type === 'aggregate' || p.def.type === 'percentile');\n  }\n\n  findWindowIndex(selectParts: any) {\n    return _.findIndex(selectParts, (p: any) => p.def.type === 'window' || p.def.type === 'moving_window');\n  }\n\n  addSelectPart(selectParts: any[], item: { value: any }, subItem: { type: any; value: any }) {\n    let partType = item.value;\n    if (subItem && subItem.type) {\n      partType = subItem.type;\n    }\n    let partModel = sqlPart.create({ type: partType });\n    if (subItem) {\n      partModel.params[0] = subItem.value;\n    }\n    let addAlias = false;\n\n    switch (partType) {\n      case 'column':\n        const parts = _.map(selectParts, (part: any) => {\n          return sqlPart.create({ type: part.def.type, params: _.clone(part.params) });\n        });\n        this.selectParts.push(parts);\n        break;\n      case 'percentile':\n      case 'aggregate':\n        // add group by if no group by yet\n        if (this.target.group.length === 0) {\n          this.addGroup('time', '$__interval');\n        }\n        const aggIndex = this.findAggregateIndex(selectParts);\n        if (aggIndex !== -1) {\n          // replace current aggregation\n          selectParts[aggIndex] = partModel;\n        } else {\n          selectParts.splice(1, 0, partModel);\n        }\n        if (!_.find(selectParts, (p: any) => p.def.type === 'alias')) {\n          addAlias = true;\n        }\n        break;\n      case 'moving_window':\n      case 'window':\n        const windowIndex = this.findWindowIndex(selectParts);\n        if (windowIndex !== -1) {\n          // replace current window function\n          selectParts[windowIndex] = partModel;\n        } else {\n          const aggIndex = this.findAggregateIndex(selectParts);\n          if (aggIndex !== -1) {\n            selectParts.splice(aggIndex + 1, 0, partModel);\n          } else {\n            selectParts.splice(1, 0, partModel);\n          }\n        }\n        if (!_.find(selectParts, (p: any) => p.def.type === 'alias')) {\n          addAlias = true;\n        }\n        break;\n      case 'alias':\n        addAlias = true;\n        break;\n    }\n\n    if (addAlias) {\n      // set initial alias name to column name\n      partModel = sqlPart.create({ type: 'alias', params: [selectParts[0].params[0].replace(/\"/g, '')] });\n      if (selectParts[selectParts.length - 1].def.type === 'alias') {\n        selectParts[selectParts.length - 1] = partModel;\n      } else {\n        selectParts.push(partModel);\n      }\n    }\n\n    this.updatePersistedParts();\n    this.updateRawSqlAndRefresh();\n  }\n\n  removeSelectPart(selectParts: any, part: { def: { type: string } }) {\n    if (part.def.type === 'column') {\n      // remove all parts of column unless its last column\n      if (this.selectParts.length > 1) {\n        const modelsIndex = _.indexOf(this.selectParts, selectParts);\n        this.selectParts.splice(modelsIndex, 1);\n      }\n    } else {\n      const partIndex = _.indexOf(selectParts, part);\n      selectParts.splice(partIndex, 1);\n    }\n\n    this.updatePersistedParts();\n  }\n\n  handleSelectPartEvent(selectParts: any, part: { def: any }, evt: { name: any }) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        switch (part.def.type) {\n          // case 'aggregate':\n          //   return this.datasource\n          //     .metricFindQuery(this.metaBuilder.buildAggregateQuery())\n          //     .then(this.transformToSegments({}))\n          //     .catch(this.handleQueryError.bind(this));\n          case 'column':\n            return this.datasource\n              .metricFindQuery(this.metaBuilder.buildColumnQuery('value'))\n              .then(this.transformToSegments({}))\n              .catch(this.handleQueryError.bind(this));\n        }\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'action': {\n        this.removeSelectPart(selectParts, part);\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return this.$q.when([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  handleGroupPartEvent(part: any, index: any, evt: { name: any }) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        return this.datasource\n          .metricFindQuery(this.metaBuilder.buildColumnQuery())\n          .then(this.transformToSegments({}))\n          .catch(this.handleQueryError.bind(this));\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'action': {\n        this.removeGroup(part, index);\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return this.$q.when([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  addGroup(partType: string, value: string) {\n    let params = [value];\n    if (partType === 'time') {\n      params = ['$__interval', 'none'];\n    }\n    const partModel = sqlPart.create({ type: partType, params: params });\n\n    if (partType === 'time') {\n      // put timeGroup at start\n      this.groupParts.splice(0, 0, partModel);\n    } else {\n      this.groupParts.push(partModel);\n    }\n\n    // add aggregates when adding group by\n    for (const selectParts of this.selectParts) {\n      if (!selectParts.some(part => part.def.type === 'aggregate')) {\n        const aggregate = sqlPart.create({ type: 'aggregate', params: ['avg'] });\n        selectParts.splice(1, 0, aggregate);\n        if (!selectParts.some(part => part.def.type === 'alias')) {\n          const alias = sqlPart.create({ type: 'alias', params: [selectParts[0].part.params[0]] });\n          selectParts.push(alias);\n        }\n      }\n    }\n\n    this.updatePersistedParts();\n  }\n\n  removeGroup(part: { def: { type: string } }, index: number) {\n    if (part.def.type === 'time') {\n      // remove aggregations\n      this.selectParts = _.map(this.selectParts, (s: any) => {\n        return _.filter(s, (part: any) => {\n          if (part.def.type === 'aggregate' || part.def.type === 'percentile') {\n            return false;\n          }\n          return true;\n        });\n      });\n    }\n\n    this.groupParts.splice(index, 1);\n    this.updatePersistedParts();\n  }\n\n  handleWherePartEvent(whereParts: any, part: any, evt: any, index: any) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        switch (evt.param.name) {\n          case 'left':\n            return this.datasource\n              .metricFindQuery(this.metaBuilder.buildColumnQuery())\n              .then(this.transformToSegments({}))\n              .catch(this.handleQueryError.bind(this));\n          case 'right':\n            if (['int', 'bigint', 'double', 'datetime'].indexOf(part.datatype) > -1) {\n              // don't do value lookups for numerical fields\n              return this.$q.when([]);\n            } else {\n              return this.datasource\n                .metricFindQuery(this.metaBuilder.buildValueQuery(part.params[0]))\n                .then(\n                  this.transformToSegments({\n                    addTemplateVars: true,\n                    templateQuoter: (v: string) => {\n                      return this.queryModel.quoteLiteral(v);\n                    },\n                  })\n                )\n                .catch(this.handleQueryError.bind(this));\n            }\n          case 'op':\n            return this.$q.when(this.uiSegmentSrv.newOperators(this.metaBuilder.getOperators(part.datatype)));\n          default:\n            return this.$q.when([]);\n        }\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.datasource.metricFindQuery(this.metaBuilder.buildDatatypeQuery(part.params[0])).then((d: any) => {\n          if (d.length === 1) {\n            part.datatype = d[0].text;\n          }\n        });\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'action': {\n        // remove element\n        whereParts.splice(index, 1);\n        this.updatePersistedParts();\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return this.$q.when([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  getWhereOptions() {\n    const options = [];\n    if (this.queryModel.hasUnixEpochTimecolumn()) {\n      options.push(this.uiSegmentSrv.newSegment({ type: 'macro', value: '$__unixEpochFilter' }));\n    } else {\n      options.push(this.uiSegmentSrv.newSegment({ type: 'macro', value: '$__timeFilter' }));\n    }\n    options.push(this.uiSegmentSrv.newSegment({ type: 'expression', value: 'Expression' }));\n    return this.$q.when(options);\n  }\n\n  addWhereAction(part: any, index: number) {\n    switch (this.whereAdd.type) {\n      case 'macro': {\n        const partModel = sqlPart.create({ type: 'macro', name: this.whereAdd.value, params: [] });\n        if (this.whereParts.length >= 1 && this.whereParts[0].def.type === 'macro') {\n          // replace current macro\n          this.whereParts[0] = partModel;\n        } else {\n          this.whereParts.splice(0, 0, partModel);\n        }\n        break;\n      }\n      default: {\n        this.whereParts.push(sqlPart.create({ type: 'expression', params: ['value', '=', 'value'] }));\n      }\n    }\n\n    this.updatePersistedParts();\n    this.resetPlusButton(this.whereAdd);\n    this.updateRawSqlAndRefresh();\n  }\n\n  getGroupOptions() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('group'))\n      .then((tags: any) => {\n        const options = [];\n        if (!this.queryModel.hasTimeGroup()) {\n          options.push(this.uiSegmentSrv.newSegment({ type: 'time', value: 'time($__interval,none)' }));\n        }\n        for (const tag of tags) {\n          options.push(this.uiSegmentSrv.newSegment({ type: 'column', value: tag.text }));\n        }\n        return options;\n      })\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  addGroupAction() {\n    switch (this.groupAdd.value) {\n      default: {\n        this.addGroup(this.groupAdd.type, this.groupAdd.value);\n      }\n    }\n\n    this.resetPlusButton(this.groupAdd);\n    this.updateRawSqlAndRefresh();\n  }\n\n  handleQueryError(err: any): any[] {\n    this.error = err.message || 'Failed to issue metric query';\n    return [];\n  }\n}\n","import { MysqlDatasource } from './datasource';\nimport { MysqlQueryCtrl } from './query_ctrl';\nimport {\n  createChangeHandler,\n  createResetHandler,\n  PasswordFieldEnum,\n} from '../../../features/datasources/utils/passwordHandlers';\n\nclass MysqlConfigCtrl {\n  static templateUrl = 'partials/config.html';\n  current: any;\n  onPasswordReset: ReturnType<typeof createResetHandler>;\n  onPasswordChange: ReturnType<typeof createChangeHandler>;\n\n  constructor() {\n    this.onPasswordReset = createResetHandler(this, PasswordFieldEnum.Password);\n    this.onPasswordChange = createChangeHandler(this, PasswordFieldEnum.Password);\n  }\n}\n\nconst defaultQuery = `SELECT\n    UNIX_TIMESTAMP(<time_column>) as time_sec,\n    <text_column> as text,\n    <tags_column> as tags\n  FROM <table name>\n  WHERE $__timeFilter(time_column)\n  ORDER BY <time_column> ASC\n  LIMIT 100\n  `;\n\nclass MysqlAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n\n  annotation: any;\n\n  /** @ngInject */\n  constructor() {\n    this.annotation.rawQuery = this.annotation.rawQuery || defaultQuery;\n  }\n}\n\nexport {\n  MysqlDatasource,\n  MysqlDatasource as Datasource,\n  MysqlQueryCtrl as QueryCtrl,\n  MysqlConfigCtrl as ConfigCtrl,\n  MysqlAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n"],"sourceRoot":""}