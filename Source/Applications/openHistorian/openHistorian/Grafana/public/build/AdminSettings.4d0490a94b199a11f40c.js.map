{"version":3,"sources":["webpack:///./public/app/features/admin/AdminSettings.tsx"],"names":["backendSrv","Object","_grafana_runtime__WEBPACK_IMPORTED_MODULE_4__","AdminSettings","_super","_this","apply","this","arguments","state","settings","isLoading","tslib__WEBPACK_IMPORTED_MODULE_0__","prototype","componentDidMount","get","_a","sent","setState","render","navModel","props","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","app_core_components_Page_Page__WEBPACK_IMPORTED_MODULE_6__","Contents","className","style","margin","entries","map","i","_b","sectionName","sectionSettings","Fragment","key","j","settingName","settingValue","paddingLeft","PureComponent","__webpack_exports__","react_hot_loader__WEBPACK_IMPORTED_MODULE_3__","module","react_redux__WEBPACK_IMPORTED_MODULE_2__","app_core_selectors_navModel__WEBPACK_IMPORTED_MODULE_5__","navIndex"],"mappings":"2PAWMA,EAAaC,OAAAC,EAAA,cAAAD,GAanBE,EAAA,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAA,OAAAD,KAAAE,MAAAC,KAAAC,YAAAD,YACEF,EAAAI,MAAe,CACbC,SAAU,GACVC,WAAW,KA6Cf,OAhDmCV,OAAAW,EAAA,UAAAX,CAAAE,EAAAC,GAM3BD,EAAAU,UAAAC,kBAAN,+IAC6B,SAAMd,EAAWe,IAAI,sCAA1CL,EAAqBM,EAAAC,OAC3BV,KAAKW,SAAS,CACZR,SAAQA,EACRC,WAAW,cAIfR,EAAAU,UAAAM,OAAA,WACQ,IAAAH,EAAAT,KAAAE,MAAEC,EAAAM,EAAAN,SAAUC,EAAAK,EAAAL,UACVS,EAAAb,KAAAc,MAAAD,SAER,OACEE,EAAAC,EAAAC,cAACC,EAAA,EAAI,CAACL,SAAUA,GACdE,EAAAC,EAAAC,cAACC,EAAA,EAAKC,SAAQ,CAACf,UAAWA,GACxBW,EAAAC,EAAAC,cAAA,OAAKG,UAAU,yBAAyBC,MAAO,CAAEC,OAAQ,kBAAiB,2JAK1EP,EAAAC,EAAAC,cAAA,SAAOG,UAAU,gBACfL,EAAAC,EAAAC,cAAA,aACGvB,OAAO6B,QAAQpB,GAAUqB,IAAI,SAACf,EAAgCgB,OAAhCC,EAAAhC,OAAAW,EAAA,OAAAX,CAAAe,EAAA,GAACkB,EAAAD,EAAA,GAAaE,EAAAF,EAAA,GAAwB,OACnEX,EAAAC,EAAAC,cAACF,EAAAC,EAAMa,SAAQ,CAACC,IAAK,WAAWL,GAC9BV,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAIG,UAAU,0BAA0BO,GACxCZ,EAAAC,EAAAC,cAAA,YAEDvB,OAAO6B,QAAQK,GAAiBJ,IAAI,SAACf,EAA6BsB,OAA7BL,EAAAhC,OAAAW,EAAA,OAAAX,CAAAe,EAAA,GAACuB,EAAAN,EAAA,GAAaO,EAAAP,EAAA,GAAqB,OACvEX,EAAAC,EAAAC,cAAA,MAAIa,IAAK,YAAYC,GACnBhB,EAAAC,EAAAC,cAAA,MAAII,MAAO,CAAEa,YAAa,SAAWF,GACrCjB,EAAAC,EAAAC,cAAA,UAAKgB,cAW3BrC,EAhDA,CAAmCmB,EAAAC,EAAMmB,eAsD1BC,EAAA,QAAA1C,OAAA2C,EAAA,IAAA3C,CAAI4C,EAAJ,CAAY5C,OAAA6C,EAAA,QAAA7C,CAJH,SAACQ,GAAsB,OAC7CW,SAAUnB,OAAA8C,EAAA,EAAA9C,CAAYQ,EAAMuC,SAAU,qBAGb/C,CAAyBE","file":"AdminSettings.4d0490a94b199a11f40c.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { hot } from 'react-hot-loader';\n\nimport { getBackendSrv } from '@grafana/runtime';\nimport { NavModel } from '@grafana/data';\n\nimport { StoreState } from 'app/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport Page from 'app/core/components/Page/Page';\n\nconst backendSrv = getBackendSrv();\n\ntype Settings = { [key: string]: { [key: string]: string } };\n\ninterface Props {\n  navModel: NavModel;\n}\n\ninterface State {\n  settings: Settings;\n  isLoading: boolean;\n}\n\nexport class AdminSettings extends React.PureComponent<Props, State> {\n  state: State = {\n    settings: {},\n    isLoading: true,\n  };\n\n  async componentDidMount() {\n    const settings: Settings = await backendSrv.get('/api/admin/settings');\n    this.setState({\n      settings,\n      isLoading: false,\n    });\n  }\n\n  render() {\n    const { settings, isLoading } = this.state;\n    const { navModel } = this.props;\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={isLoading}>\n          <div className=\"grafana-info-box span8\" style={{ margin: '20px 0 25px 0' }}>\n            These system settings are defined in grafana.ini or custom.ini (or overridden in ENV variables). To change\n            these you currently need to restart grafana.\n          </div>\n\n          <table className=\"filter-table\">\n            <tbody>\n              {Object.entries(settings).map(([sectionName, sectionSettings], i) => (\n                <React.Fragment key={`section-${i}`}>\n                  <tr>\n                    <td className=\"admin-settings-section\">{sectionName}</td>\n                    <td />\n                  </tr>\n                  {Object.entries(sectionSettings).map(([settingName, settingValue], j) => (\n                    <tr key={`property-${j}`}>\n                      <td style={{ paddingLeft: '25px' }}>{settingName}</td>\n                      <td>{settingValue}</td>\n                    </tr>\n                  ))}\n                </React.Fragment>\n              ))}\n            </tbody>\n          </table>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nconst mapStateToProps = (state: StoreState) => ({\n  navModel: getNavModel(state.navIndex, 'server-settings'),\n});\n\nexport default hot(module)(connect(mapStateToProps)(AdminSettings));\n"],"sourceRoot":""}