{"version":3,"file":"AdminListOrgsPage.66e5e0f36ccdc34a44df.js","mappings":"8RAeA,MAAMA,EAAiB,OACrB,OAAC,SACC,oBAAC,MACC,oBAAC,MAAG,cAAE,KACN,OAAC,MAAG,gBAAI,KACR,OAAC,MAAG,MAAO,CAAE,MAAO,IAAK,EAAG,GAC9B,EACF,EAGF,SAASC,EAAwB,CAAE,KAAAC,EAAM,SAAAC,CAAS,EAAU,CAC1D,MAAMC,EAAgB,KAAW,cAAc,sBAAoB,UAAU,EAEvE,CAACC,EAAWC,CAAY,KAAI,YAAuB,EACzD,SACE,QAAC,SAAM,UAAU,+CACd,UAAAN,EAAe,KAChB,OAAC,SACE,SAAAE,EAAK,IAAKK,MACT,QAAC,MACC,oBAAC,MAAG,UAAU,UACZ,mBAAC,KAAE,KAAM,mBAAmBA,EAAI,EAAE,GAAK,SAAAA,EAAI,GAAG,EAChD,KACA,OAAC,MAAG,UAAU,UACZ,mBAAC,KAAE,KAAM,mBAAmBA,EAAI,EAAE,GAAK,SAAAA,EAAI,KAAK,EAClD,KACA,OAAC,MAAG,UAAU,aACZ,mBAACC,EAAA,IACC,QAAQ,cACR,KAAK,KACL,KAAK,QACL,QAAS,IAAMF,EAAaC,CAAG,EAC/B,aAAW,aACX,SAAU,CAACH,CAAA,CACb,EACF,IAhBO,GAAGG,EAAI,EAAE,IAAIA,EAAI,IAAI,EAiB9B,CACD,EACH,EACCF,MACC,OAACI,EAAA,GACC,OAAM,GACN,KAAK,YACL,MAAM,SACN,QACE,QAAC,OAAI,8CACoCJ,EAAU,KAAK,QACtD,OAAC,OAAG,EAAE,OAAC,OAAC,SAAM,iEAAqD,GACrE,EAEF,YAAY,SACZ,UAAW,IAAMC,EAAa,MAAS,EACvC,UAAW,IAAM,CACfH,EAASE,EAAU,EAAE,EACrBC,EAAa,MAAS,CACxB,EACF,GAEJ,CAEJ,CAEA,MAAMI,EAA4C,CAAC,CAAE,UAAAC,CAAU,IAAM,CACnE,MAAMC,KAAS,MAAWC,CAAiB,EAC3C,SACE,QAAC,SAAM,UAAU,eAAgB,GAAGF,EACjC,UAAAX,EAAe,KAChB,OAAC,SACE,aAAI,MAAM,CAAC,EAAE,KAAK,IAAI,EAAE,IAAI,CAACc,EAAGC,OAC/B,QAAC,MACC,oBAAC,MACC,mBAAC,IAAQ,CAAC,MAAO,GAAI,EACvB,KACA,OAAC,MACC,mBAAC,IAAQ,CAAC,MAAO,IAAK,EACxB,KACA,OAAC,MACC,mBAAC,IAAQ,CAAC,mBAAoBH,EAAO,aAAc,MAAO,GAAI,OAAQ,GAAI,EAC5E,IATOG,CAUT,CACD,EACH,GACF,CAEJ,EAEaC,KAAiB,KAAef,EAAyBS,CAAsB,EAEtFG,EAAqBI,IAA0B,CACnD,gBAAc,OAAI,CAChB,WAAY,SACZ,QAAS,OACT,OAAQ,GACR,WAAY,CACd,CAAC,CACH,GCnGMZ,EAAY,MAAOa,GAChB,QAAM,MAAc,EAAE,OAAO,aAAeA,CAAK,EAGpDC,EAAU,SACP,QAAM,MAAc,EAAE,IAAoB,WAAW,EAGxDC,EAAmBC,MAChB,MAAaA,CAAK,EAAIA,GAAO,MAAM,QAAU,gCAGvC,SAASC,GAAqB,CAC3C,KAAM,CAACC,EAAOC,CAAS,KAAIC,EAAA,SAAW,SAAY,MAAMN,EAAQ,EAAG,CAAC,CAAC,EAC/DO,EAAe,KAAW,cAAc,sBAAoB,UAAU,EAE5E,sBAAU,IAAM,CACdF,EAAU,CACZ,EAAG,CAACA,CAAS,CAAC,KAGZ,OAACG,EAAA,IACC,MAAM,cACN,WACE,OAAC,KAAU,CAAC,KAAK,OAAO,KAAK,UAAU,SAAU,CAACD,EAAc,mBAEhE,EAGF,oBAACC,EAAA,GAAK,SAAL,CACE,UAAAJ,EAAM,OAASH,EAAgBG,EAAM,KAAK,EAC1CA,EAAM,YAAW,OAACP,EAAe,SAAf,EAAwB,EAC1CO,EAAM,UACL,OAACP,EAAA,CACC,KAAMO,EAAM,MACZ,SAAWL,GAAU,CACnBb,EAAUa,CAAK,EAAE,KAAK,IAAMM,EAAU,CAAC,CACzC,EACF,GAEJ,EACF,CAEJ,C","sources":["webpack://grafana/./public/app/features/admin/AdminOrgsTable.tsx","webpack://grafana/./public/app/features/admin/AdminListOrgsPage.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport { useState } from 'react';\nimport Skeleton from 'react-loading-skeleton';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, ConfirmModal, useStyles2 } from '@grafana/ui';\nimport { SkeletonComponent, attachSkeleton } from '@grafana/ui/src/unstable';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction, Organization } from 'app/types';\n\ninterface Props {\n  orgs: Organization[];\n  onDelete: (orgId: number) => void;\n}\n\nconst getTableHeader = () => (\n  <thead>\n    <tr>\n      <th>ID</th>\n      <th>Name</th>\n      <th style={{ width: '1%' }}></th>\n    </tr>\n  </thead>\n);\n\nfunction AdminOrgsTableComponent({ orgs, onDelete }: Props) {\n  const canDeleteOrgs = contextSrv.hasPermission(AccessControlAction.OrgsDelete);\n\n  const [deleteOrg, setDeleteOrg] = useState<Organization>();\n  return (\n    <table className=\"filter-table form-inline filter-table--hover\">\n      {getTableHeader()}\n      <tbody>\n        {orgs.map((org) => (\n          <tr key={`${org.id}-${org.name}`}>\n            <td className=\"link-td\">\n              <a href={`admin/orgs/edit/${org.id}`}>{org.id}</a>\n            </td>\n            <td className=\"link-td\">\n              <a href={`admin/orgs/edit/${org.id}`}>{org.name}</a>\n            </td>\n            <td className=\"text-right\">\n              <Button\n                variant=\"destructive\"\n                size=\"sm\"\n                icon=\"times\"\n                onClick={() => setDeleteOrg(org)}\n                aria-label=\"Delete org\"\n                disabled={!canDeleteOrgs}\n              />\n            </td>\n          </tr>\n        ))}\n      </tbody>\n      {deleteOrg && (\n        <ConfirmModal\n          isOpen\n          icon=\"trash-alt\"\n          title=\"Delete\"\n          body={\n            <div>\n              Are you sure you want to delete &apos;{deleteOrg.name}&apos;?\n              <br /> <small>All dashboards for this organization will be removed!</small>\n            </div>\n          }\n          confirmText=\"Delete\"\n          onDismiss={() => setDeleteOrg(undefined)}\n          onConfirm={() => {\n            onDelete(deleteOrg.id);\n            setDeleteOrg(undefined);\n          }}\n        />\n      )}\n    </table>\n  );\n}\n\nconst AdminOrgsTableSkeleton: SkeletonComponent = ({ rootProps }) => {\n  const styles = useStyles2(getSkeletonStyles);\n  return (\n    <table className=\"filter-table\" {...rootProps}>\n      {getTableHeader()}\n      <tbody>\n        {new Array(3).fill(null).map((_, index) => (\n          <tr key={index}>\n            <td>\n              <Skeleton width={16} />\n            </td>\n            <td>\n              <Skeleton width={240} />\n            </td>\n            <td>\n              <Skeleton containerClassName={styles.deleteButton} width={22} height={24} />\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport const AdminOrgsTable = attachSkeleton(AdminOrgsTableComponent, AdminOrgsTableSkeleton);\n\nconst getSkeletonStyles = (theme: GrafanaTheme2) => ({\n  deleteButton: css({\n    alignItems: 'center',\n    display: 'flex',\n    height: 30,\n    lineHeight: 1,\n  }),\n});\n","import { useEffect } from 'react';\nimport useAsyncFn from 'react-use/lib/useAsyncFn';\n\nimport { getBackendSrv, isFetchError } from '@grafana/runtime';\nimport { LinkButton } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AccessControlAction, Organization } from 'app/types';\n\nimport { AdminOrgsTable } from './AdminOrgsTable';\n\nconst deleteOrg = async (orgId: number) => {\n  return await getBackendSrv().delete('/api/orgs/' + orgId);\n};\n\nconst getOrgs = async () => {\n  return await getBackendSrv().get<Organization[]>('/api/orgs');\n};\n\nconst getErrorMessage = (error: Error) => {\n  return isFetchError(error) ? error?.data?.message : 'An unexpected error happened.';\n};\n\nexport default function AdminListOrgsPages() {\n  const [state, fetchOrgs] = useAsyncFn(async () => await getOrgs(), []);\n  const canCreateOrg = contextSrv.hasPermission(AccessControlAction.OrgsCreate);\n\n  useEffect(() => {\n    fetchOrgs();\n  }, [fetchOrgs]);\n\n  return (\n    <Page\n      navId=\"global-orgs\"\n      actions={\n        <LinkButton icon=\"plus\" href=\"org/new\" disabled={!canCreateOrg}>\n          New org\n        </LinkButton>\n      }\n    >\n      <Page.Contents>\n        {state.error && getErrorMessage(state.error)}\n        {state.loading && <AdminOrgsTable.Skeleton />}\n        {state.value && (\n          <AdminOrgsTable\n            orgs={state.value}\n            onDelete={(orgId) => {\n              deleteOrg(orgId).then(() => fetchOrgs());\n            }}\n          />\n        )}\n      </Page.Contents>\n    </Page>\n  );\n}\n"],"names":["getTableHeader","AdminOrgsTableComponent","orgs","onDelete","canDeleteOrgs","deleteOrg","setDeleteOrg","org","Button","ConfirmModal","AdminOrgsTableSkeleton","rootProps","styles","getSkeletonStyles","_","index","AdminOrgsTable","theme","orgId","getOrgs","getErrorMessage","error","AdminListOrgsPages","state","fetchOrgs","useAsyncFn","canCreateOrg","Page"],"sourceRoot":""}