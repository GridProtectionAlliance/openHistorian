{"version":3,"file":"UserInvitePage.d74564b6b9efef2ed932.js","mappings":"8VAWA,MAAMA,EAAQ,CACZ,CAAE,MAAO,SAAU,MAAO,gBAAe,EACzC,CAAE,MAAO,SAAU,MAAO,gBAAe,EACzC,CAAE,MAAO,QAAS,MAAO,eAAc,CACzC,EAUMC,EAA2B,CAC/B,KAAM,GACN,MAAO,GACP,KAAM,iBACN,UAAW,EACb,EAkDA,EAhD8B,IAAM,CAClC,MAAMC,KAAW,eAAY,EAEvBC,EAAW,MAAOC,GAAwB,CAC9C,MAAMF,KAAS,MAAWE,CAAQ,CAAC,EAAE,OAAO,EAC5C,UAAqB,aAAa,CACpC,EAEA,OACE,gBAACC,EAAA,EAAI,CAAC,cAAAJ,EAA8B,SAAAE,CAAA,EACjC,CAAC,CAAE,SAAAG,EAAU,QAAAC,EAAS,OAAAC,CAAO,IAE1B,gCACE,gBAACC,EAAA,EAAQ,KACP,gBAACC,EAAA,GACC,QAAS,CAAC,CAACF,EAAO,aAClB,MAASA,EAAO,aAAe,gCAAkC,OACjE,MAAM,qBAEN,gBAACG,EAAA,EAAK,CAAE,GAAGL,EAAS,eAAgB,CAAE,SAAU,EAAK,CAAC,EAAG,YAAY,mBAAoB,EAC3F,EACA,gBAACI,EAAA,EAAK,CAAC,QAAS,CAAC,CAACF,EAAO,KAAM,MAAM,QACnC,gBAACG,EAAA,EAAK,CAAE,GAAGL,EAAS,MAAM,EAAG,YAAY,YAAa,EACxD,EACA,gBAACI,EAAA,EAAK,CAAC,QAAS,CAAC,CAACF,EAAO,KAAM,MAAM,QACnC,gBAACI,EAAA,GACC,OAAQ,CAAC,CAAE,MAAO,CAAE,IAAAC,EAAK,GAAGC,CAAM,CAAE,IAAM,gBAACC,EAAA,EAAgB,CAAE,GAAGD,EAAO,QAASd,CAAA,CAAO,EACvF,QAAAO,EACA,KAAK,OACP,CACF,EACA,gBAACG,EAAA,EAAK,CAAC,MAAM,qBACX,gBAACM,EAAA,EAAM,CAAC,GAAG,oBAAqB,GAAGV,EAAS,WAAW,EAAG,CAC5D,CACF,EACA,gBAAC,QAAK,KACJ,gBAACW,EAAA,GAAM,CAAC,KAAK,UAAS,QAAM,EAC5B,gBAAC,KAAU,CAAC,KAAM,qBAA2B,MAAU,EAAE,UAAY,YAAY,EAAG,QAAQ,aAAY,MAExG,CACF,CACF,CAGN,CAEJ,ECtEO,SAASC,GAAiB,CAC/B,MAAMC,EACJ,gCAAE,oEAEA,gBAAC,QAAK,UAAU,kBAAiB,IAAE,iBAAwB,CAC7D,EAGIC,EAAQC,EAAA,wBAA+B,eAAiB,QAE9D,OACE,gBAACC,EAAA,EAAI,CAAC,MAAAF,EAAc,QAAS,CAAE,KAAM,aAAc,EAAG,SAAAD,CAAA,EACpD,gBAACG,EAAA,gBACC,gBAAC,EAAc,IAAC,CAClB,CACF,CAEJ,CAEA,QAAeJ,C","sources":["webpack://grafana/./public/app/features/org/UserInviteForm.tsx","webpack://grafana/./public/app/features/org/UserInvitePage.tsx"],"sourcesContent":["import React from 'react';\n\nimport { locationUtil } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { locationService } from '@grafana/runtime';\nimport { Button, LinkButton, Input, Switch, RadioButtonGroup, Form, Field, InputControl, FieldSet } from '@grafana/ui';\nimport { getConfig } from 'app/core/config';\nimport { OrgRole, useDispatch } from 'app/types';\n\nimport { addInvitee } from '../invites/state/actions';\n\nconst roles = [\n  { label: 'Viewer', value: OrgRole.Viewer },\n  { label: 'Editor', value: OrgRole.Editor },\n  { label: 'Admin', value: OrgRole.Admin },\n];\n\nexport interface FormModel {\n  role: OrgRole;\n  name: string;\n  loginOrEmail?: string;\n  sendEmail: boolean;\n  email: string;\n}\n\nconst defaultValues: FormModel = {\n  name: '',\n  email: '',\n  role: OrgRole.Editor,\n  sendEmail: true,\n};\n\nexport const UserInviteForm = () => {\n  const dispatch = useDispatch();\n\n  const onSubmit = async (formData: FormModel) => {\n    await dispatch(addInvitee(formData)).unwrap();\n    locationService.push('/org/users/');\n  };\n\n  return (\n    <Form defaultValues={defaultValues} onSubmit={onSubmit}>\n      {({ register, control, errors }) => {\n        return (\n          <>\n            <FieldSet>\n              <Field\n                invalid={!!errors.loginOrEmail}\n                error={!!errors.loginOrEmail ? 'Email or username is required' : undefined}\n                label=\"Email or username\"\n              >\n                <Input {...register('loginOrEmail', { required: true })} placeholder=\"email@example.com\" />\n              </Field>\n              <Field invalid={!!errors.name} label=\"Name\">\n                <Input {...register('name')} placeholder=\"(optional)\" />\n              </Field>\n              <Field invalid={!!errors.role} label=\"Role\">\n                <InputControl\n                  render={({ field: { ref, ...field } }) => <RadioButtonGroup {...field} options={roles} />}\n                  control={control}\n                  name=\"role\"\n                />\n              </Field>\n              <Field label=\"Send invite email\">\n                <Switch id=\"send-email-switch\" {...register('sendEmail')} />\n              </Field>\n            </FieldSet>\n            <Stack>\n              <Button type=\"submit\">Submit</Button>\n              <LinkButton href={locationUtil.assureBaseUrl(getConfig().appSubUrl + '/org/users')} variant=\"secondary\">\n                Back\n              </LinkButton>\n            </Stack>\n          </>\n        );\n      }}\n    </Form>\n  );\n};\n\nexport default UserInviteForm;\n","import React from 'react';\n\nimport { config } from '@grafana/runtime';\nimport { Page } from 'app/core/components/Page/Page';\nimport { contextSrv } from 'app/core/core';\n\nimport UserInviteForm from './UserInviteForm';\n\nexport function UserInvitePage() {\n  const subTitle = (\n    <>\n      Send invitation or add existing Grafana user to the organization.\n      <span className=\"highlight-word\"> {contextSrv.user.orgName}</span>\n    </>\n  );\n\n  const navId = config.featureToggles.topnav ? 'global-users' : 'users';\n\n  return (\n    <Page navId={navId} pageNav={{ text: 'Invite user' }} subTitle={subTitle}>\n      <Page.Contents>\n        <UserInviteForm />\n      </Page.Contents>\n    </Page>\n  );\n}\n\nexport default UserInvitePage;\n"],"names":["roles","defaultValues","dispatch","onSubmit","formData","Form","register","control","errors","FieldSet","Field","Input","InputControl","ref","field","RadioButtonGroup","Switch","Button","UserInvitePage","subTitle","navId","config","Page"],"sourceRoot":""}