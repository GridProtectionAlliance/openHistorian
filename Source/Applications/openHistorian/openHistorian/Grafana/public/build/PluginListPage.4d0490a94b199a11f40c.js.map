{"version":3,"sources":["webpack:///./public/app/core/components/OrgActionBar/OrgActionBar.tsx","webpack:///./public/app/core/components/FilterInput/FilterInput.tsx","webpack:///./public/app/features/plugins/PluginListItem.tsx","webpack:///./public/app/features/plugins/PluginList.tsx","webpack:///./public/app/features/plugins/PluginListPage.tsx","webpack:///./public/app/features/plugins/state/selectors.ts"],"names":["OrgActionBar","_super","Object","tslib__WEBPACK_IMPORTED_MODULE_0__","prototype","render","_a","this","props","searchQuery","layoutMode","onSetLayoutMode","linkButton","setSearchQuery","target","linkProps","href","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","className","_FilterInput_FilterInput__WEBPACK_IMPORTED_MODULE_3__","labelClassName","inputClassName","value","onChange","placeholder","_LayoutSelector_LayoutSelector__WEBPACK_IMPORTED_MODULE_2__","mode","onLayoutModeChanged","title","react__WEBPACK_IMPORTED_MODULE_1__","__webpack_require__","d","__webpack_exports__","FilterInput","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_grafana_data__WEBPACK_IMPORTED_MODULE_1__","ref","type","event","plugins_PluginListItem","plugin","react_default","id","hasUpdate","bs-tooltip","src","info","logos","small","name","author","plugins","listStyle","classnames_default","card-section","card-list-layout-grid","LayoutSelector","Grid","card-list-layout-list","List","map","index","key","PluginListPage","componentDidMount","fetchPlugins","loadPlugins","sent","hasFetched","navModel","setPluginsLayoutMode","setPluginsSearchQuery","app_core_components_Page_Page__WEBPACK_IMPORTED_MODULE_4__","Contents","isLoading","Fragment","app_core_components_OrgActionBar_OrgActionBar__WEBPACK_IMPORTED_MODULE_5__","query","_PluginList__WEBPACK_IMPORTED_MODULE_6__","mapDispatchToProps","_state_actions__WEBPACK_IMPORTED_MODULE_7__","_state_reducers__WEBPACK_IMPORTED_MODULE_10__","react_hot_loader__WEBPACK_IMPORTED_MODULE_2__","module","react_redux__WEBPACK_IMPORTED_MODULE_3__","state","app_core_selectors_navModel__WEBPACK_IMPORTED_MODULE_8__","navIndex","_state_selectors__WEBPACK_IMPORTED_MODULE_9__","getPlugins","getPluginsSearchQuery","getLayoutMode","regex","RegExp","filter","item","test","description"],"mappings":"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","file":"PluginListPage.4d0490a94b199a11f40c.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport LayoutSelector, { LayoutMode } from '../LayoutSelector/LayoutSelector';\nimport { FilterInput } from '../FilterInput/FilterInput';\n\nexport interface Props {\n  searchQuery: string;\n  layoutMode?: LayoutMode;\n  onSetLayoutMode?: (mode: LayoutMode) => {};\n  setSearchQuery: (value: string) => {};\n  linkButton: { href: string; title: string };\n  target?: string;\n}\n\nexport default class OrgActionBar extends PureComponent<Props> {\n  render() {\n    const { searchQuery, layoutMode, onSetLayoutMode, linkButton, setSearchQuery, target } = this.props;\n    const linkProps = { href: linkButton.href };\n\n    if (target) {\n      (linkProps as any).target = target;\n    }\n\n    return (\n      <div className=\"page-action-bar\">\n        <div className=\"gf-form gf-form--grow\">\n          <FilterInput\n            labelClassName=\"gf-form--has-input-icon\"\n            inputClassName=\"gf-form-input width-20\"\n            value={searchQuery}\n            onChange={setSearchQuery}\n            placeholder={'Filter by name or type'}\n          />\n          <LayoutSelector mode={layoutMode} onLayoutModeChanged={(mode: LayoutMode) => onSetLayoutMode(mode)} />\n        </div>\n        <div className=\"page-action-bar__spacer\" />\n        <a className=\"btn btn-primary\" {...linkProps}>\n          {linkButton.title}\n        </a>\n      </div>\n    );\n  }\n}\n","import React, { forwardRef } from 'react';\nimport { escapeStringForRegex, unEscapeStringFromRegex } from '@grafana/data';\n\nexport interface Props {\n  value: string | undefined;\n  placeholder?: string;\n  labelClassName?: string;\n  inputClassName?: string;\n  onChange: (value: string) => void;\n}\n\nexport const FilterInput = forwardRef<HTMLInputElement, Props>((props, ref) => (\n  <label className={props.labelClassName}>\n    <input\n      ref={ref}\n      type=\"text\"\n      className={props.inputClassName}\n      value={unEscapeStringFromRegex(props.value)}\n      onChange={event => props.onChange(escapeStringForRegex(event.target.value))}\n      placeholder={props.placeholder ? props.placeholder : null}\n    />\n    <i className=\"gf-form-input-icon fa fa-search\" />\n  </label>\n));\n","import React, { FC } from 'react';\nimport { PluginMeta } from '@grafana/data';\n\ninterface Props {\n  plugin: PluginMeta;\n}\n\nconst PluginListItem: FC<Props> = props => {\n  const { plugin } = props;\n\n  return (\n    <li className=\"card-item-wrapper\">\n      <a className=\"card-item\" href={`plugins/${plugin.id}/`}>\n        <div className=\"card-item-header\">\n          <div className=\"card-item-type\">{plugin.type}</div>\n          {plugin.hasUpdate && (\n            <div className=\"card-item-notice\">\n              <span bs-tooltip=\"plugin.latestVersion\">Update available!</span>\n            </div>\n          )}\n        </div>\n        <div className=\"card-item-body\">\n          <figure className=\"card-item-figure\">\n            <img src={plugin.info.logos.small} />\n          </figure>\n          <div className=\"card-item-details\">\n            <div className=\"card-item-name\">{plugin.name}</div>\n            <div className=\"card-item-sub-name\">{`By ${plugin.info.author.name}`}</div>\n          </div>\n        </div>\n      </a>\n    </li>\n  );\n};\n\nexport default PluginListItem;\n","import React, { FC } from 'react';\nimport classNames from 'classnames';\nimport PluginListItem from './PluginListItem';\nimport { PluginMeta } from '@grafana/data';\nimport { LayoutMode, LayoutModes } from '../../core/components/LayoutSelector/LayoutSelector';\n\ninterface Props {\n  plugins: PluginMeta[];\n  layoutMode: LayoutMode;\n}\n\nconst PluginList: FC<Props> = props => {\n  const { plugins, layoutMode } = props;\n\n  const listStyle = classNames({\n    'card-section': true,\n    'card-list-layout-grid': layoutMode === LayoutModes.Grid,\n    'card-list-layout-list': layoutMode === LayoutModes.List,\n  });\n\n  return (\n    <section className={listStyle}>\n      <ol className=\"card-list\">\n        {plugins.map((plugin, index) => {\n          return <PluginListItem plugin={plugin} key={`${plugin.name}-${index}`} />;\n        })}\n      </ol>\n    </section>\n  );\n};\n\nexport default PluginList;\n","import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport Page from 'app/core/components/Page/Page';\nimport OrgActionBar from 'app/core/components/OrgActionBar/OrgActionBar';\nimport PluginList from './PluginList';\nimport { loadPlugins } from './state/actions';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { getLayoutMode, getPlugins, getPluginsSearchQuery } from './state/selectors';\nimport { LayoutMode } from 'app/core/components/LayoutSelector/LayoutSelector';\nimport { NavModel, PluginMeta } from '@grafana/data';\nimport { StoreState } from 'app/types';\nimport { setPluginsLayoutMode, setPluginsSearchQuery } from './state/reducers';\n\nexport interface Props {\n  navModel: NavModel;\n  plugins: PluginMeta[];\n  layoutMode: LayoutMode;\n  searchQuery: string;\n  hasFetched: boolean;\n  loadPlugins: typeof loadPlugins;\n  setPluginsLayoutMode: typeof setPluginsLayoutMode;\n  setPluginsSearchQuery: typeof setPluginsSearchQuery;\n}\n\nexport class PluginListPage extends PureComponent<Props> {\n  componentDidMount() {\n    this.fetchPlugins();\n  }\n\n  async fetchPlugins() {\n    await this.props.loadPlugins();\n  }\n\n  render() {\n    const {\n      hasFetched,\n      navModel,\n      plugins,\n      layoutMode,\n      setPluginsLayoutMode,\n      setPluginsSearchQuery,\n      searchQuery,\n    } = this.props;\n\n    const linkButton = {\n      href: 'https://grafana.com/plugins?utm_source=grafana_plugin_list',\n      title: 'Find more plugins on Grafana.com',\n    };\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={!hasFetched}>\n          <>\n            <OrgActionBar\n              searchQuery={searchQuery}\n              layoutMode={layoutMode}\n              onSetLayoutMode={mode => setPluginsLayoutMode(mode)}\n              setSearchQuery={query => setPluginsSearchQuery(query)}\n              linkButton={linkButton}\n            />\n            {hasFetched && plugins && plugins && <PluginList plugins={plugins} layoutMode={layoutMode} />}\n          </>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, 'plugins'),\n    plugins: getPlugins(state.plugins),\n    layoutMode: getLayoutMode(state.plugins),\n    searchQuery: getPluginsSearchQuery(state.plugins),\n    hasFetched: state.plugins.hasFetched,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadPlugins,\n  setPluginsLayoutMode,\n  setPluginsSearchQuery,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(PluginListPage));\n","import { PluginsState } from 'app/types/plugins';\n\nexport const getPlugins = (state: PluginsState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  return state.plugins.filter(item => {\n    return regex.test(item.name) || regex.test(item.info.author.name) || regex.test(item.info.description);\n  });\n};\n\nexport const getPluginsSearchQuery = (state: PluginsState) => state.searchQuery;\nexport const getLayoutMode = (state: PluginsState) => state.layoutMode;\n"],"sourceRoot":""}