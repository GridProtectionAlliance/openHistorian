{"version":3,"sources":["webpack:///./public/app/plugins/datasource/stackdriver/types.ts","webpack:///./public/app/plugins/datasource/stackdriver/StackdriverMetricFindQuery.ts","webpack:///./public/app/plugins/datasource/stackdriver/datasource.ts","webpack:///./public/app/plugins/datasource/stackdriver/query_ctrl.ts","webpack:///./public/app/plugins/datasource/stackdriver/config_ctrl.ts","webpack:///./public/app/plugins/datasource/stackdriver/annotations_query_ctrl.ts","webpack:///./public/app/plugins/datasource/stackdriver/components/SimpleSelect.tsx","webpack:///./public/app/plugins/datasource/stackdriver/components/VariableQueryEditor.tsx","webpack:///./public/app/plugins/datasource/stackdriver/module.ts"],"names":["MetricFindQueryTypes","StackdriverMetricFindQuery","datasource","this","prototype","execute","query","selectedQueryType","Services","handleServiceQuery","MetricTypes","handleMetricTypesQuery","LabelKeys","handleLabelKeysQuery","LabelValues","handleLabelValuesQuery","ResourceTypes","handleResourceTypeQuery","Aligners","handleAlignersQuery","AlignmentPeriods","handleAlignmentPeriodQuery","Aggregations","handleAggregationQuery","error","console","getMetricTypes","projectName","metricDescriptors","_a","sent","Object","functions","map","s","text","serviceShortName","value","service","expandable","selectedService","_b","templateSrv","replace","displayName","type","selectedMetricType","toFindQueryResult","labelKey","getLabels","response","_c","interpolatedKey","tslib_es6","split","reverse","name","values","meta","metricLabels","hasOwnProperty","resourceLabels","resourceTypes","find","m","_this","valueType","metricKind","constants","x","isString_default","_super","StackdriverDatasource","instanceSettings","backendSrv","timeSrv","call","baseUrl","url","jsonData","defaultProject","authenticationType","$inject","options","targets","filter","target","hide","metricType","t","refId","intervalMs","datasourceId","id","scopedVars","crossSeriesReducer","perSeriesAligner","alignmentPeriod","groupBys","interpolateGroupBys","view","filters","interpolateFilters","aliasBy","length","datasourceRequest","method","from","range","valueOf","toString","to","queries","data","f","getTimeSeries","timeRange","interpolatedGroupBys","forEach","gb","interpolated","Array","isArray","concat","push","resolvePanelUnitFromTargets","unit","every","result","results","queryRes","series","timeSerie","datapoints","points","annotation","title","tags","tables","rows","v","time","Date","parse","stackdriver_StackdriverMetricFindQuery","trys","path","status","message","statusText","defaultErrorMessage","error_1","lodash_default","a","isString","code","formatStackdriverError","res","JSON","err","ensureDefaultProjectQuery","error_2","metricTypes","metricsApiPath","error_3","app_events","emit","doRequest","maxRetries","catch","query_ctrl_StackdriverQueryCtrl","StackdriverQueryCtrl","$scope","$injector","onExecuteQuery","bind","onQueryChange","assign","ctrl","refresh","templateUrl","StackdriverConfigCtrl","datasourceSrv","validationErrors","defaultAuthenticationType","current","secureJsonData","secureJsonFields","authenticationTypes","key","save","jwt","privateKey","private_key","tokenUri","token_uri","clientEmail","client_email","project_id","validateJwt","resetValidationMessages","inputDataValid","onUpload","json","jsonText","onPasteJwt","e","originalEvent","clipboardData","getData","StackdriverAnnotationsQueryCtrl","react","__webpack_require__","react_default","n","components_SimpleSelect","props","label","onValueChange","createElement","className","required","onChange","i","StackdriverVariableQueryEditor","queryTypes","defaults","labels","services","state","some","event","onLabelKeyChange","setState","componentDidUpdate","queryModel","q","insertTemplateVariables","templateVariables","variables","renderQueryTypeSwitch","queryType","onServiceChange","Fragment","onMetricTypeChange","l","render","onQueryTypeChange","d","__webpack_exports__","VariableQueryEditor_StackdriverVariableQueryEditor"],"mappings":"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","file":"stackdriverPlugin.3932bda029d2299a9d96.js","sourcesContent":["import { DataQuery, DataSourceJsonData } from '@grafana/ui';\n\nexport enum MetricFindQueryTypes {\n  Services = 'services',\n  MetricTypes = 'metricTypes',\n  LabelKeys = 'labelKeys',\n  LabelValues = 'labelValues',\n  ResourceTypes = 'resourceTypes',\n  Aggregations = 'aggregations',\n  Aligners = 'aligners',\n  AlignmentPeriods = 'alignmentPeriods',\n}\n\nexport interface VariableQueryData {\n  selectedQueryType: string;\n  metricDescriptors: any[];\n  selectedService: string;\n  selectedMetricType: string;\n  labels: string[];\n  labelKey: string;\n  metricTypes: Array<{ value: string; name: string }>;\n  services: Array<{ value: string; name: string }>;\n}\n\nexport interface StackdriverQuery extends DataQuery {\n  defaultProject?: string;\n  unit?: string;\n  metricType: string;\n  service?: string;\n  refId: string;\n  crossSeriesReducer: string;\n  alignmentPeriod?: string;\n  perSeriesAligner: string;\n  groupBys?: string[];\n  filters?: string[];\n  aliasBy?: string;\n  metricKind: string;\n  valueType: string;\n  datasourceId?: number;\n  view?: string;\n}\n\nexport interface StackdriverOptions extends DataSourceJsonData {\n  defaultProject?: string;\n  authenticationType?: string;\n}\n\nexport interface AnnotationTarget {\n  defaultProject: string;\n  metricType: string;\n  refId: string;\n  filters: string[];\n  metricKind: string;\n  valueType: string;\n  title: string;\n  text: string;\n}\n\nexport interface QueryMeta {\n  alignmentPeriod: string;\n  rawQuery: string;\n  rawQueryString: string;\n  metricLabels: { [key: string]: string[] };\n  resourceLabels: { [key: string]: string[] };\n  resourceTypes: string[];\n}\n\nexport interface MetricDescriptor {\n  valueType: string;\n  metricKind: string;\n  type: string;\n  unit: string;\n  service: string;\n  serviceShortName: string;\n  displayName: string;\n  description: string;\n}\n\nexport interface Segment {\n  type: string;\n  value: string;\n}\n","import isString from 'lodash/isString';\nimport { alignmentPeriods } from './constants';\nimport { MetricFindQueryTypes } from './types';\nimport {\n  getMetricTypesByService,\n  getAlignmentOptionsByMetric,\n  getAggregationOptionsByMetric,\n  extractServicesFromMetricDescriptors,\n  getLabelKeys,\n} from './functions';\n\nexport default class StackdriverMetricFindQuery {\n  constructor(private datasource: any) {}\n\n  async execute(query: any) {\n    try {\n      switch (query.selectedQueryType) {\n        case MetricFindQueryTypes.Services:\n          return this.handleServiceQuery();\n        case MetricFindQueryTypes.MetricTypes:\n          return this.handleMetricTypesQuery(query);\n        case MetricFindQueryTypes.LabelKeys:\n          return this.handleLabelKeysQuery(query);\n        case MetricFindQueryTypes.LabelValues:\n          return this.handleLabelValuesQuery(query);\n        case MetricFindQueryTypes.ResourceTypes:\n          return this.handleResourceTypeQuery(query);\n        case MetricFindQueryTypes.Aligners:\n          return this.handleAlignersQuery(query);\n        case MetricFindQueryTypes.AlignmentPeriods:\n          return this.handleAlignmentPeriodQuery();\n        case MetricFindQueryTypes.Aggregations:\n          return this.handleAggregationQuery(query);\n        default:\n          return [];\n      }\n    } catch (error) {\n      console.error(`Could not run StackdriverMetricFindQuery ${query}`, error);\n      return [];\n    }\n  }\n\n  async handleServiceQuery() {\n    const metricDescriptors = await this.datasource.getMetricTypes(this.datasource.projectName);\n    const services: any[] = extractServicesFromMetricDescriptors(metricDescriptors);\n    return services.map(s => ({\n      text: s.serviceShortName,\n      value: s.service,\n      expandable: true,\n    }));\n  }\n\n  async handleMetricTypesQuery({ selectedService }: any) {\n    if (!selectedService) {\n      return [];\n    }\n    const metricDescriptors = await this.datasource.getMetricTypes(this.datasource.projectName);\n    return getMetricTypesByService(metricDescriptors, this.datasource.templateSrv.replace(selectedService)).map(\n      (s: any) => ({\n        text: s.displayName,\n        value: s.type,\n        expandable: true,\n      })\n    );\n  }\n\n  async handleLabelKeysQuery({ selectedMetricType }: any) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const labelKeys = await getLabelKeys(this.datasource, selectedMetricType);\n    return labelKeys.map(this.toFindQueryResult);\n  }\n\n  async handleLabelValuesQuery({ selectedMetricType, labelKey }: any) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const refId = 'handleLabelValuesQuery';\n    const response = await this.datasource.getLabels(selectedMetricType, refId);\n    const interpolatedKey = this.datasource.templateSrv.replace(labelKey);\n    const [name] = interpolatedKey.split('.').reverse();\n    let values = [];\n    if (response.meta && response.meta.metricLabels && response.meta.metricLabels.hasOwnProperty(name)) {\n      values = response.meta.metricLabels[name];\n    } else if (response.meta && response.meta.resourceLabels && response.meta.resourceLabels.hasOwnProperty(name)) {\n      values = response.meta.resourceLabels[name];\n    }\n\n    return values.map(this.toFindQueryResult);\n  }\n\n  async handleResourceTypeQuery({ selectedMetricType }: any) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const refId = 'handleResourceTypeQueryQueryType';\n    const response = await this.datasource.getLabels(selectedMetricType, refId);\n    return response.meta.resourceTypes ? response.meta.resourceTypes.map(this.toFindQueryResult) : [];\n  }\n\n  async handleAlignersQuery({ selectedMetricType }: any) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const metricDescriptors = await this.datasource.getMetricTypes(this.datasource.projectName);\n    const { valueType, metricKind } = metricDescriptors.find(\n      (m: any) => m.type === this.datasource.templateSrv.replace(selectedMetricType)\n    );\n    return getAlignmentOptionsByMetric(valueType, metricKind).map(this.toFindQueryResult);\n  }\n\n  async handleAggregationQuery({ selectedMetricType }: any) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const metricDescriptors = await this.datasource.getMetricTypes(this.datasource.projectName);\n    const { valueType, metricKind } = metricDescriptors.find(\n      (m: any) => m.type === this.datasource.templateSrv.replace(selectedMetricType)\n    );\n    return getAggregationOptionsByMetric(valueType, metricKind).map(this.toFindQueryResult);\n  }\n\n  handleAlignmentPeriodQuery() {\n    return alignmentPeriods.map(this.toFindQueryResult);\n  }\n\n  toFindQueryResult(x: any) {\n    return isString(x) ? { text: x, expandable: true } : { ...x, expandable: true };\n  }\n}\n","import { stackdriverUnitMappings } from './constants';\nimport appEvents from 'app/core/app_events';\nimport _ from 'lodash';\nimport StackdriverMetricFindQuery from './StackdriverMetricFindQuery';\nimport { StackdriverQuery, MetricDescriptor, StackdriverOptions } from './types';\nimport { DataSourceApi, DataQueryRequest, DataSourceInstanceSettings } from '@grafana/ui';\nimport { ScopedVars } from '@grafana/data';\nimport { BackendSrv } from 'app/core/services/backend_srv';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport { TimeSrv } from 'app/features/dashboard/services/TimeSrv';\n\nexport default class StackdriverDatasource extends DataSourceApi<StackdriverQuery, StackdriverOptions> {\n  url: string;\n  baseUrl: string;\n  projectName: string;\n  authenticationType: string;\n  queryPromise: Promise<any>;\n  metricTypes: any[];\n\n  /** @ngInject */\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<StackdriverOptions>,\n    private backendSrv: BackendSrv,\n    private templateSrv: TemplateSrv,\n    private timeSrv: TimeSrv\n  ) {\n    super(instanceSettings);\n    this.baseUrl = `/stackdriver/`;\n    this.url = instanceSettings.url;\n    this.projectName = instanceSettings.jsonData.defaultProject || '';\n    this.authenticationType = instanceSettings.jsonData.authenticationType || 'jwt';\n    this.metricTypes = [];\n  }\n\n  async getTimeSeries(options: any) {\n    const queries = options.targets\n      .filter((target: any) => {\n        return !target.hide && target.metricType;\n      })\n      .map((t: any) => {\n        return {\n          refId: t.refId,\n          intervalMs: options.intervalMs,\n          datasourceId: this.id,\n          metricType: this.templateSrv.replace(t.metricType, options.scopedVars || {}),\n          crossSeriesReducer: this.templateSrv.replace(t.crossSeriesReducer || 'REDUCE_MEAN', options.scopedVars || {}),\n          perSeriesAligner: this.templateSrv.replace(t.perSeriesAligner, options.scopedVars || {}),\n          alignmentPeriod: this.templateSrv.replace(t.alignmentPeriod, options.scopedVars || {}),\n          groupBys: this.interpolateGroupBys(t.groupBys, options.scopedVars),\n          view: t.view || 'FULL',\n          filters: this.interpolateFilters(t.filters, options.scopedVars),\n          aliasBy: this.templateSrv.replace(t.aliasBy, options.scopedVars || {}),\n          type: 'timeSeriesQuery',\n        };\n      });\n\n    if (queries.length > 0) {\n      const { data } = await this.backendSrv.datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: options.range.from.valueOf().toString(),\n          to: options.range.to.valueOf().toString(),\n          queries,\n        },\n      });\n      return data;\n    } else {\n      return { results: [] };\n    }\n  }\n\n  interpolateFilters(filters: string[], scopedVars: ScopedVars) {\n    return (filters || []).map(f => {\n      return this.templateSrv.replace(f, scopedVars || {}, 'regex');\n    });\n  }\n\n  async getLabels(metricType: string, refId: string) {\n    const response = await this.getTimeSeries({\n      targets: [\n        {\n          refId: refId,\n          datasourceId: this.id,\n          metricType: this.templateSrv.replace(metricType),\n          crossSeriesReducer: 'REDUCE_NONE',\n          view: 'HEADERS',\n        },\n      ],\n      range: this.timeSrv.timeRange(),\n    });\n\n    return response.results[refId];\n  }\n\n  interpolateGroupBys(groupBys: string[], scopedVars: {}): string[] {\n    let interpolatedGroupBys: any[] = [];\n    (groupBys || []).forEach(gb => {\n      const interpolated = this.templateSrv.replace(gb, scopedVars || {}, 'csv').split(',');\n      if (Array.isArray(interpolated)) {\n        interpolatedGroupBys = interpolatedGroupBys.concat(interpolated);\n      } else {\n        interpolatedGroupBys.push(interpolated);\n      }\n    });\n    return interpolatedGroupBys;\n  }\n\n  resolvePanelUnitFromTargets(targets: any[]) {\n    let unit;\n    if (targets.length > 0 && targets.every(t => t.unit === targets[0].unit)) {\n      if (stackdriverUnitMappings.hasOwnProperty(targets[0].unit)) {\n        // @ts-ignore\n        unit = stackdriverUnitMappings[targets[0].unit];\n      }\n    }\n    return unit;\n  }\n\n  async query(options: DataQueryRequest<StackdriverQuery>) {\n    const result: any[] = [];\n    const data = await this.getTimeSeries(options);\n    if (data.results) {\n      Object['values'](data.results).forEach((queryRes: any) => {\n        if (!queryRes.series) {\n          return;\n        }\n        const unit = this.resolvePanelUnitFromTargets(options.targets);\n        queryRes.series.forEach((series: any) => {\n          let timeSerie: any = {\n            target: series.name,\n            datapoints: series.points,\n            refId: queryRes.refId,\n            meta: queryRes.meta,\n          };\n          if (unit) {\n            timeSerie = { ...timeSerie, unit };\n          }\n          result.push(timeSerie);\n        });\n      });\n      return { data: result };\n    } else {\n      return { data: [] };\n    }\n  }\n\n  async annotationQuery(options: any) {\n    const annotation = options.annotation;\n    const queries = [\n      {\n        refId: 'annotationQuery',\n        datasourceId: this.id,\n        metricType: this.templateSrv.replace(annotation.target.metricType, options.scopedVars || {}),\n        crossSeriesReducer: 'REDUCE_NONE',\n        perSeriesAligner: 'ALIGN_NONE',\n        title: this.templateSrv.replace(annotation.target.title, options.scopedVars || {}),\n        text: this.templateSrv.replace(annotation.target.text, options.scopedVars || {}),\n        tags: this.templateSrv.replace(annotation.target.tags, options.scopedVars || {}),\n        view: 'FULL',\n        filters: (annotation.target.filters || []).map((f: any) => {\n          return this.templateSrv.replace(f, options.scopedVars || {});\n        }),\n        type: 'annotationQuery',\n      },\n    ];\n\n    const { data } = await this.backendSrv.datasourceRequest({\n      url: '/api/tsdb/query',\n      method: 'POST',\n      data: {\n        from: options.range.from.valueOf().toString(),\n        to: options.range.to.valueOf().toString(),\n        queries,\n      },\n    });\n\n    const results = data.results['annotationQuery'].tables[0].rows.map((v: any) => {\n      return {\n        annotation: annotation,\n        time: Date.parse(v[0]),\n        title: v[1],\n        tags: [],\n        text: v[3],\n      } as any;\n    });\n\n    return results;\n  }\n\n  async metricFindQuery(query: string) {\n    const stackdriverMetricFindQuery = new StackdriverMetricFindQuery(this);\n    return stackdriverMetricFindQuery.execute(query);\n  }\n\n  async testDatasource() {\n    let status, message;\n    const defaultErrorMessage = 'Cannot connect to Stackdriver API';\n    try {\n      const projectName = await this.getDefaultProject();\n      const path = `v3/projects/${projectName}/metricDescriptors`;\n      const response = await this.doRequest(`${this.baseUrl}${path}`);\n      if (response.status === 200) {\n        status = 'success';\n        message = 'Successfully queried the Stackdriver API.';\n      } else {\n        status = 'error';\n        message = response.statusText ? response.statusText : defaultErrorMessage;\n      }\n    } catch (error) {\n      status = 'error';\n      if (_.isString(error)) {\n        message = error;\n      } else {\n        message = 'Stackdriver: ';\n        message += error.statusText ? error.statusText : defaultErrorMessage;\n        if (error.data && error.data.error && error.data.error.code) {\n          message += ': ' + error.data.error.code + '. ' + error.data.error.message;\n        }\n      }\n    } finally {\n      return {\n        status,\n        message,\n      };\n    }\n  }\n\n  formatStackdriverError(error: any) {\n    let message = 'Stackdriver: ';\n    message += error.statusText ? error.statusText + ': ' : '';\n    if (error.data && error.data.error) {\n      try {\n        const res = JSON.parse(error.data.error);\n        message += res.error.code + '. ' + res.error.message;\n      } catch (err) {\n        message += error.data.error;\n      }\n    } else {\n      message += 'Cannot connect to Stackdriver API';\n    }\n    return message;\n  }\n\n  async getDefaultProject() {\n    try {\n      if (this.authenticationType === 'gce' || !this.projectName) {\n        const { data } = await this.backendSrv.datasourceRequest({\n          url: '/api/tsdb/query',\n          method: 'POST',\n          data: {\n            queries: [\n              {\n                refId: 'ensureDefaultProjectQuery',\n                type: 'ensureDefaultProjectQuery',\n                datasourceId: this.id,\n              },\n            ],\n          },\n        });\n        this.projectName = data.results.ensureDefaultProjectQuery.meta.defaultProject;\n        return this.projectName;\n      } else {\n        return this.projectName;\n      }\n    } catch (error) {\n      throw this.formatStackdriverError(error);\n    }\n  }\n\n  async getMetricTypes(projectName: string): Promise<MetricDescriptor[]> {\n    try {\n      if (this.metricTypes.length === 0) {\n        const metricsApiPath = `v3/projects/${projectName}/metricDescriptors`;\n        const { data } = await this.doRequest(`${this.baseUrl}${metricsApiPath}`);\n\n        this.metricTypes = data.metricDescriptors.map((m: any) => {\n          const [service] = m.type.split('/');\n          const [serviceShortName] = service.split('.');\n          m.service = service;\n          m.serviceShortName = serviceShortName;\n          m.displayName = m.displayName || m.type;\n\n          return m;\n        });\n      }\n\n      return this.metricTypes;\n    } catch (error) {\n      appEvents.emit('ds-request-error', this.formatStackdriverError(error));\n      return [];\n    }\n  }\n\n  async doRequest(url: string, maxRetries = 1) {\n    return this.backendSrv\n      .datasourceRequest({\n        url: this.url + url,\n        method: 'GET',\n      })\n      .catch((error: any) => {\n        if (maxRetries > 0) {\n          return this.doRequest(url, maxRetries - 1);\n        }\n\n        throw error;\n      });\n  }\n}\n","import { QueryCtrl } from 'app/plugins/sdk';\nimport { StackdriverQuery } from './types';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport { auto } from 'angular';\n\nexport class StackdriverQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n  templateSrv: TemplateSrv;\n\n  /** @ngInject */\n  constructor($scope: any, $injector: auto.IInjectorService, templateSrv: TemplateSrv) {\n    super($scope, $injector);\n    this.templateSrv = templateSrv;\n    this.onQueryChange = this.onQueryChange.bind(this);\n    this.onExecuteQuery = this.onExecuteQuery.bind(this);\n  }\n\n  onQueryChange(target: StackdriverQuery) {\n    Object.assign(this.target, target);\n  }\n\n  onExecuteQuery() {\n    this.$scope.ctrl.refresh();\n  }\n}\n","import DatasourceSrv from 'app/features/plugins/datasource_srv';\n\nexport interface JWT {\n  private_key: any;\n  token_uri: any;\n  client_email: any;\n  project_id: any;\n}\n\nexport class StackdriverConfigCtrl {\n  static templateUrl = 'public/app/plugins/datasource/stackdriver/partials/config.html';\n  datasourceSrv: any;\n  current: any;\n  jsonText: string;\n  validationErrors: string[] = [];\n  inputDataValid: boolean;\n  authenticationTypes: any[];\n  defaultAuthenticationType: string;\n\n  /** @ngInject */\n  constructor(datasourceSrv: DatasourceSrv) {\n    this.defaultAuthenticationType = 'jwt';\n    this.datasourceSrv = datasourceSrv;\n    this.current.jsonData = this.current.jsonData || {};\n    this.current.jsonData.authenticationType = this.current.jsonData.authenticationType\n      ? this.current.jsonData.authenticationType\n      : this.defaultAuthenticationType;\n    this.current.secureJsonData = this.current.secureJsonData || {};\n    this.current.secureJsonFields = this.current.secureJsonFields || {};\n    this.authenticationTypes = [\n      { key: this.defaultAuthenticationType, value: 'Google JWT File' },\n      { key: 'gce', value: 'GCE Default Service Account' },\n    ];\n  }\n\n  save(jwt: JWT) {\n    this.current.secureJsonData.privateKey = jwt.private_key;\n    this.current.jsonData.tokenUri = jwt.token_uri;\n    this.current.jsonData.clientEmail = jwt.client_email;\n    this.current.jsonData.defaultProject = jwt.project_id;\n  }\n\n  validateJwt(jwt: JWT) {\n    this.resetValidationMessages();\n    if (!jwt.private_key || jwt.private_key.length === 0) {\n      this.validationErrors.push('Private key field missing in JWT file.');\n    }\n\n    if (!jwt.token_uri || jwt.token_uri.length === 0) {\n      this.validationErrors.push('Token URI field missing in JWT file.');\n    }\n\n    if (!jwt.client_email || jwt.client_email.length === 0) {\n      this.validationErrors.push('Client Email field missing in JWT file.');\n    }\n\n    if (!jwt.project_id || jwt.project_id.length === 0) {\n      this.validationErrors.push('Project Id field missing in JWT file.');\n    }\n\n    if (this.validationErrors.length === 0) {\n      this.inputDataValid = true;\n      return true;\n    }\n\n    return false;\n  }\n\n  onUpload(json: JWT) {\n    this.jsonText = '';\n    if (this.validateJwt(json)) {\n      this.save(json);\n    }\n  }\n\n  onPasteJwt(e: any) {\n    try {\n      const json = JSON.parse(e.originalEvent.clipboardData.getData('text/plain') || this.jsonText);\n      if (this.validateJwt(json)) {\n        this.save(json);\n      }\n    } catch (error) {\n      this.resetValidationMessages();\n      this.validationErrors.push(`Invalid json: ${error.message}`);\n    }\n  }\n\n  resetValidationMessages() {\n    this.validationErrors = [];\n    this.inputDataValid = false;\n    this.jsonText = '';\n\n    this.current.jsonData = Object.assign({}, { authenticationType: this.current.jsonData.authenticationType });\n    this.current.secureJsonData = {};\n    this.current.secureJsonFields = {};\n  }\n}\n","import { TemplateSrv } from 'app/features/templating/template_srv';\n\nexport class StackdriverAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n  annotation: any;\n  templateSrv: TemplateSrv;\n\n  /** @ngInject */\n  constructor(templateSrv: TemplateSrv) {\n    this.templateSrv = templateSrv;\n    this.annotation.target = this.annotation.target || {};\n    this.onQueryChange = this.onQueryChange.bind(this);\n  }\n\n  onQueryChange(target: any) {\n    Object.assign(this.annotation.target, target);\n  }\n}\n","import React, { FC } from 'react';\n\ninterface Props {\n  onValueChange: (e: any) => void;\n  options: any[];\n  value: string;\n  label: string;\n}\n\nconst SimpleSelect: FC<Props> = props => {\n  const { label, onValueChange, value, options } = props;\n  return (\n    <div className=\"gf-form max-width-21\">\n      <span className=\"gf-form-label width-10 query-keyword\">{label}</span>\n      <div className=\"gf-form-select-wrapper max-width-12\">\n        <select className=\"gf-form-input\" required onChange={onValueChange} value={value}>\n          {options.map(({ value, name }, i) => (\n            <option key={i} value={value}>\n              {name}\n            </option>\n          ))}\n        </select>\n      </div>\n    </div>\n  );\n};\n\nexport default SimpleSelect;\n","import React, { PureComponent } from 'react';\nimport { VariableQueryProps } from 'app/types/plugins';\nimport SimpleSelect from './SimpleSelect';\nimport { getMetricTypes, getLabelKeys, extractServicesFromMetricDescriptors } from '../functions';\nimport { MetricFindQueryTypes, VariableQueryData } from '../types';\n\nexport class StackdriverVariableQueryEditor extends PureComponent<VariableQueryProps, VariableQueryData> {\n  queryTypes: Array<{ value: string; name: string }> = [\n    { value: MetricFindQueryTypes.Services, name: 'Services' },\n    { value: MetricFindQueryTypes.MetricTypes, name: 'Metric Types' },\n    { value: MetricFindQueryTypes.LabelKeys, name: 'Label Keys' },\n    { value: MetricFindQueryTypes.LabelValues, name: 'Label Values' },\n    { value: MetricFindQueryTypes.ResourceTypes, name: 'Resource Types' },\n    { value: MetricFindQueryTypes.Aggregations, name: 'Aggregations' },\n    { value: MetricFindQueryTypes.Aligners, name: 'Aligners' },\n    { value: MetricFindQueryTypes.AlignmentPeriods, name: 'Alignment Periods' },\n  ];\n\n  defaults: VariableQueryData = {\n    selectedQueryType: this.queryTypes[0].value,\n    metricDescriptors: [],\n    selectedService: '',\n    selectedMetricType: '',\n    labels: [],\n    labelKey: '',\n    metricTypes: [],\n    services: [],\n  };\n\n  constructor(props: VariableQueryProps) {\n    super(props);\n    this.state = Object.assign(this.defaults, this.props.query);\n  }\n\n  async componentDidMount() {\n    const metricDescriptors = await this.props.datasource.getMetricTypes(this.props.datasource.projectName);\n    const services = extractServicesFromMetricDescriptors(metricDescriptors).map((m: any) => ({\n      value: m.service,\n      name: m.serviceShortName,\n    }));\n\n    let selectedService = '';\n    if (services.some(s => s.value === this.props.templateSrv.replace(this.state.selectedService))) {\n      selectedService = this.state.selectedService;\n    } else if (services && services.length > 0) {\n      selectedService = services[0].value;\n    }\n\n    const { metricTypes, selectedMetricType } = getMetricTypes(\n      metricDescriptors,\n      this.state.selectedMetricType,\n      this.props.templateSrv.replace(this.state.selectedMetricType),\n      this.props.templateSrv.replace(selectedService)\n    );\n    const state: any = {\n      services,\n      selectedService,\n      metricTypes,\n      selectedMetricType,\n      metricDescriptors,\n      ...(await this.getLabels(selectedMetricType)),\n    };\n    this.setState(state);\n  }\n\n  async onQueryTypeChange(event: any) {\n    const state: any = {\n      selectedQueryType: event.target.value,\n      ...(await this.getLabels(this.state.selectedMetricType, event.target.value)),\n    };\n    this.setState(state);\n  }\n\n  async onServiceChange(event: any) {\n    const { metricTypes, selectedMetricType } = getMetricTypes(\n      this.state.metricDescriptors,\n      this.state.selectedMetricType,\n      this.props.templateSrv.replace(this.state.selectedMetricType),\n      this.props.templateSrv.replace(event.target.value)\n    );\n    const state: any = {\n      selectedService: event.target.value,\n      metricTypes,\n      selectedMetricType,\n      ...(await this.getLabels(selectedMetricType)),\n    };\n    this.setState(state);\n  }\n\n  async onMetricTypeChange(event: any) {\n    const state: any = { selectedMetricType: event.target.value, ...(await this.getLabels(event.target.value)) };\n    this.setState(state);\n  }\n\n  onLabelKeyChange(event: any) {\n    this.setState({ labelKey: event.target.value });\n  }\n\n  componentDidUpdate() {\n    const { metricDescriptors, labels, metricTypes, services, ...queryModel } = this.state;\n    const query = this.queryTypes.find(q => q.value === this.state.selectedQueryType);\n    this.props.onChange(queryModel, `Stackdriver - ${query.name}`);\n  }\n\n  async getLabels(selectedMetricType: string, selectedQueryType = this.state.selectedQueryType) {\n    let result = { labels: this.state.labels, labelKey: this.state.labelKey };\n    if (selectedMetricType && selectedQueryType === MetricFindQueryTypes.LabelValues) {\n      const labels = await getLabelKeys(this.props.datasource, selectedMetricType);\n      const labelKey = labels.some(l => l === this.props.templateSrv.replace(this.state.labelKey))\n        ? this.state.labelKey\n        : labels[0];\n      result = { labels, labelKey };\n    }\n    return result;\n  }\n\n  insertTemplateVariables(options: any) {\n    const templateVariables = this.props.templateSrv.variables.map((v: any) => ({\n      name: `$${v.name}`,\n      value: `$${v.name}`,\n    }));\n    return [...templateVariables, ...options];\n  }\n\n  renderQueryTypeSwitch(queryType: string) {\n    switch (queryType) {\n      case MetricFindQueryTypes.MetricTypes:\n        return (\n          <SimpleSelect\n            value={this.state.selectedService}\n            options={this.insertTemplateVariables(this.state.services)}\n            onValueChange={e => this.onServiceChange(e)}\n            label=\"Service\"\n          />\n        );\n      case MetricFindQueryTypes.LabelKeys:\n      case MetricFindQueryTypes.LabelValues:\n      case MetricFindQueryTypes.ResourceTypes:\n        return (\n          <>\n            <SimpleSelect\n              value={this.state.selectedService}\n              options={this.insertTemplateVariables(this.state.services)}\n              onValueChange={e => this.onServiceChange(e)}\n              label=\"Service\"\n            />\n            <SimpleSelect\n              value={this.state.selectedMetricType}\n              options={this.insertTemplateVariables(this.state.metricTypes)}\n              onValueChange={e => this.onMetricTypeChange(e)}\n              label=\"Metric Type\"\n            />\n            {queryType === MetricFindQueryTypes.LabelValues && (\n              <SimpleSelect\n                value={this.state.labelKey}\n                options={this.insertTemplateVariables(this.state.labels.map(l => ({ value: l, name: l })))}\n                onValueChange={e => this.onLabelKeyChange(e)}\n                label=\"Label Key\"\n              />\n            )}\n          </>\n        );\n      case MetricFindQueryTypes.Aligners:\n      case MetricFindQueryTypes.Aggregations:\n        return (\n          <>\n            <SimpleSelect\n              value={this.state.selectedService}\n              options={this.insertTemplateVariables(this.state.services)}\n              onValueChange={e => this.onServiceChange(e)}\n              label=\"Service\"\n            />\n            <SimpleSelect\n              value={this.state.selectedMetricType}\n              options={this.insertTemplateVariables(this.state.metricTypes)}\n              onValueChange={e => this.onMetricTypeChange(e)}\n              label=\"Metric Type\"\n            />\n          </>\n        );\n      default:\n        return '';\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <SimpleSelect\n          value={this.state.selectedQueryType}\n          options={this.queryTypes}\n          onValueChange={e => this.onQueryTypeChange(e)}\n          label=\"Query Type\"\n        />\n        {this.renderQueryTypeSwitch(this.state.selectedQueryType)}\n      </>\n    );\n  }\n}\n","import StackdriverDatasource from './datasource';\nimport { StackdriverQueryCtrl } from './query_ctrl';\nimport { StackdriverConfigCtrl } from './config_ctrl';\nimport { StackdriverAnnotationsQueryCtrl } from './annotations_query_ctrl';\nimport { StackdriverVariableQueryEditor } from './components/VariableQueryEditor';\n\nexport {\n  StackdriverDatasource as Datasource,\n  StackdriverQueryCtrl as QueryCtrl,\n  StackdriverConfigCtrl as ConfigCtrl,\n  StackdriverAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n  StackdriverVariableQueryEditor as VariableQueryEditor,\n};\n"],"sourceRoot":""}