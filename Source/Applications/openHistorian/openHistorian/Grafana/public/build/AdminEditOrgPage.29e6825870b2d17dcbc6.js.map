{"version":3,"file":"AdminEditOrgPage.29e6825870b2d17dcbc6.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/RolePicker/UserRolePicker.tsx","webpack://grafana/./public/app/features/admin/api.ts","webpack://grafana/./public/app/features/admin/AdminEditOrgPage.tsx","webpack://grafana/./public/app/features/admin/OrgRolePicker.tsx","webpack://grafana/./public/app/features/admin/Users/OrgUsersTable.tsx"],"sourcesContent":["import { useEffect } from 'react';\nimport { useAsyncFn } from 'react-use';\n\nimport { contextSrv } from 'app/core/core';\nimport { Role, OrgRole, AccessControlAction } from 'app/types';\n\nimport { RolePicker } from './RolePicker';\nimport { fetchUserRoles, updateUserRoles } from './api';\n\nexport interface Props {\n  basicRole: OrgRole;\n  roles?: Role[];\n  userId: number;\n  orgId?: number;\n  onBasicRoleChange: (newRole: OrgRole) => void;\n  roleOptions: Role[];\n  disabled?: boolean;\n  basicRoleDisabled?: boolean;\n  basicRoleDisabledMessage?: string;\n  /**\n   * Set whether the component should send a request with the new roles to the\n   * backend in UserRolePicker.onRolesChange (apply=false), or call {@link onApplyRoles}\n   * with the updated list of roles (apply=true).\n   *\n   * Besides it sets the RolePickerMenu's Button title to\n   *   * `Update` in case apply equals false\n   *   * `Apply` in case apply equals true\n   *\n   * @default false\n   */\n  apply?: boolean;\n  onApplyRoles?: (newRoles: Role[], userId: number, orgId: number | undefined) => void;\n  pendingRoles?: Role[];\n  maxWidth?: string | number;\n  width?: string | number;\n  isLoading?: boolean;\n}\n\nexport const UserRolePicker = ({\n  basicRole,\n  roles,\n  userId,\n  orgId,\n  onBasicRoleChange,\n  roleOptions,\n  disabled,\n  basicRoleDisabled,\n  basicRoleDisabledMessage,\n  apply = false,\n  onApplyRoles,\n  pendingRoles,\n  maxWidth,\n  width,\n  isLoading,\n}: Props) => {\n  const [{ loading, value: appliedRoles = roles || [] }, getUserRoles] = useAsyncFn(async () => {\n    try {\n      if (roles) {\n        return roles;\n      }\n      if (apply && Boolean(pendingRoles?.length)) {\n        return pendingRoles;\n      }\n\n      if (contextSrv.hasPermission(AccessControlAction.ActionUserRolesList) && userId > 0) {\n        return await fetchUserRoles(userId, orgId);\n      }\n    } catch (e) {\n      // TODO handle error\n      console.error('Error loading options');\n    }\n    return [];\n  }, [orgId, userId, pendingRoles, roles]);\n\n  useEffect(() => {\n    // only load roles when there is an Org selected\n    if (orgId) {\n      getUserRoles();\n    }\n  }, [getUserRoles, orgId]);\n\n  const onRolesChange = async (roles: Role[]) => {\n    if (!apply) {\n      await updateUserRoles(roles, userId, orgId);\n      await getUserRoles();\n    } else if (onApplyRoles) {\n      onApplyRoles(roles, userId, orgId);\n    }\n  };\n\n  const canUpdateRoles =\n    contextSrv.hasPermission(AccessControlAction.ActionUserRolesAdd) &&\n    contextSrv.hasPermission(AccessControlAction.ActionUserRolesRemove);\n\n  return (\n    <RolePicker\n      appliedRoles={appliedRoles}\n      basicRole={basicRole}\n      onRolesChange={onRolesChange}\n      onBasicRoleChange={onBasicRoleChange}\n      roleOptions={roleOptions}\n      isLoading={loading || isLoading}\n      disabled={disabled}\n      basicRoleDisabled={basicRoleDisabled}\n      basicRoleDisabledMessage={basicRoleDisabledMessage}\n      showBasicRole\n      apply={apply}\n      canUpdateRoles={canUpdateRoles}\n      maxWidth={maxWidth}\n      width={width}\n    />\n  );\n};\n","import { UrlQueryValue } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { contextSrv } from 'app/core/core';\nimport { accessControlQueryParam } from 'app/core/utils/accessControl';\nimport { OrgUser, AccessControlAction } from 'app/types';\n\nconst perPage = 30;\n\nexport const getOrg = async (orgId: UrlQueryValue) => {\n  return await getBackendSrv().get(`/api/orgs/${orgId}`);\n};\n\nexport const getOrgUsers = async (orgId: UrlQueryValue, page: number) => {\n  if (contextSrv.hasPermission(AccessControlAction.OrgUsersRead)) {\n    return getBackendSrv().get(`/api/orgs/${orgId}/users/search`, accessControlQueryParam({ perpage: perPage, page }));\n  }\n  return { orgUsers: [] };\n};\n\nexport const getUsersRoles = async (orgId: number, users: OrgUser[]) => {\n  const userIds = users.map((u) => u.userId);\n  const roles = await getBackendSrv().post(`/api/access-control/users/roles/search`, { userIds, orgId });\n  users.forEach((u) => {\n    u.roles = roles ? roles[u.userId] || [] : [];\n  });\n};\n\nexport const updateOrgUserRole = (orgUser: OrgUser, orgId: UrlQueryValue) => {\n  return getBackendSrv().patch(`/api/orgs/${orgId}/users/${orgUser.userId}`, orgUser);\n};\n\nexport const removeOrgUser = (orgUser: OrgUser, orgId: UrlQueryValue) => {\n  return getBackendSrv().delete(`/api/orgs/${orgId}/users/${orgUser.userId}`);\n};\n\nexport const updateOrgName = (name: string, orgId: number) => {\n  return getBackendSrv().put(`/api/orgs/${orgId}`, { name });\n};\n","import { useState, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useParams } from 'react-router-dom-v5-compat';\nimport { useAsyncFn } from 'react-use';\n\nimport { NavModelItem } from '@grafana/data';\nimport { Field, Input, Button, Legend, Alert } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { contextSrv } from 'app/core/core';\nimport { OrgUser, AccessControlAction, OrgRole } from 'app/types';\n\nimport { OrgUsersTable } from './Users/OrgUsersTable';\nimport { getOrg, getOrgUsers, getUsersRoles, removeOrgUser, updateOrgName, updateOrgUserRole } from './api';\n\ninterface OrgNameDTO {\n  orgName: string;\n}\n\nconst AdminEditOrgPage = () => {\n  const { id = '' } = useParams();\n  const orgId = parseInt(id, 10);\n  const canWriteOrg = contextSrv.hasPermission(AccessControlAction.OrgsWrite);\n  const canReadUsers = contextSrv.hasPermission(AccessControlAction.OrgUsersRead);\n\n  const [users, setUsers] = useState<OrgUser[]>([]);\n  const [page, setPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n\n  const [orgState, fetchOrg] = useAsyncFn(() => getOrg(orgId), []);\n  const {\n    handleSubmit,\n    register,\n    formState: { errors },\n  } = useForm<OrgNameDTO>();\n  const [, fetchOrgUsers] = useAsyncFn(async (page) => {\n    const result = await getOrgUsers(orgId, page);\n\n    if (contextSrv.licensedAccessControlEnabled()) {\n      await getUsersRoles(orgId, result.orgUsers);\n    }\n\n    const totalPages = result?.perPage !== 0 ? Math.ceil(result.totalCount / result.perPage) : 0;\n    setTotalPages(totalPages);\n    setUsers(result.orgUsers);\n    return result.orgUsers;\n  }, []);\n\n  useEffect(() => {\n    fetchOrg();\n    fetchOrgUsers(page);\n  }, [fetchOrg, fetchOrgUsers, page]);\n\n  const onUpdateOrgName = async ({ orgName }: OrgNameDTO) => {\n    await updateOrgName(orgName, orgId);\n  };\n\n  const renderMissingPermissionMessage = () => (\n    <Alert severity=\"info\" title=\"Access denied\">\n      You do not have permission to see users in this organization. To update this organization, contact your server\n      administrator.\n    </Alert>\n  );\n\n  const onPageChange = (toPage: number) => {\n    setPage(toPage);\n  };\n\n  const onRemoveUser = async (orgUser: OrgUser) => {\n    await removeOrgUser(orgUser, orgId);\n    fetchOrgUsers(page);\n  };\n\n  const onRoleChange = async (role: OrgRole, orgUser: OrgUser) => {\n    await updateOrgUserRole({ ...orgUser, role }, orgId);\n    fetchOrgUsers(page);\n  };\n\n  const pageNav: NavModelItem = {\n    text: orgState?.value?.name ?? '',\n    icon: 'shield',\n    subTitle: 'Manage settings and user roles for an organization.',\n  };\n\n  return (\n    <Page navId=\"global-orgs\" pageNav={pageNav} subTitle=\"Manage settings for this specific org.\">\n      <Page.Contents>\n        <>\n          <Legend>Edit organization</Legend>\n          {orgState.value && (\n            <form onSubmit={handleSubmit(onUpdateOrgName)} style={{ maxWidth: '600px' }}>\n              <Field label=\"Name\" invalid={!!errors.orgName} error=\"Name is required\" disabled={!canWriteOrg}>\n                <Input\n                  {...register('orgName', { required: true })}\n                  id=\"org-name-input\"\n                  defaultValue={orgState.value.name}\n                />\n              </Field>\n              <Button type=\"submit\" disabled={!canWriteOrg}>\n                Update\n              </Button>\n            </form>\n          )}\n\n          <div style={{ marginTop: '20px' }}>\n            <Legend>Organization users</Legend>\n            {!canReadUsers && renderMissingPermissionMessage()}\n            {canReadUsers && !!users.length && (\n              <OrgUsersTable\n                users={users}\n                orgId={orgId}\n                onRoleChange={onRoleChange}\n                onRemoveUser={onRemoveUser}\n                changePage={onPageChange}\n                page={page}\n                totalPages={totalPages}\n              />\n            )}\n          </div>\n        </>\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default AdminEditOrgPage;\n","import { OrgRole } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\ninterface Props {\n  value: OrgRole;\n  disabled?: boolean;\n  'aria-label'?: string;\n  inputId?: string;\n  onChange: (role: OrgRole) => void;\n  autoFocus?: boolean;\n  width?: number | 'auto';\n}\n\nconst basicRoles = Object.values(OrgRole).filter((r) => r !== OrgRole.None);\nconst options = basicRoles.map((r) => ({ label: r, value: r }));\n\nexport function OrgRolePicker({ value, onChange, 'aria-label': ariaLabel, inputId, autoFocus, ...restProps }: Props) {\n  return (\n    <Select\n      inputId={inputId}\n      value={value}\n      options={options}\n      onChange={(val) => onChange(val.value ?? OrgRole.None)}\n      placeholder=\"Choose role...\"\n      aria-label={ariaLabel}\n      autoFocus={autoFocus}\n      {...restProps}\n    />\n  );\n}\n","import { useEffect, useMemo, useState } from 'react';\n\nimport { OrgRole } from '@grafana/data';\nimport { selectors as e2eSelectors } from '@grafana/e2e-selectors';\nimport {\n  Avatar,\n  Box,\n  Button,\n  CellProps,\n  Column,\n  ConfirmModal,\n  FetchDataFunc,\n  Icon,\n  InteractiveTable,\n  Pagination,\n  Stack,\n  Tag,\n  Text,\n  Tooltip,\n} from '@grafana/ui';\nimport { UserRolePicker } from 'app/core/components/RolePicker/UserRolePicker';\nimport { fetchRoleOptions, updateUserRoles } from 'app/core/components/RolePicker/api';\nimport { TagBadge } from 'app/core/components/TagFilter/TagBadge';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction, OrgUser, Role } from 'app/types';\n\nimport { OrgRolePicker } from '../OrgRolePicker';\n\ntype Cell<T extends keyof OrgUser = keyof OrgUser> = CellProps<OrgUser, OrgUser[T]>;\n\nconst disabledRoleMessage = `This user's role is not editable because it is synchronized from your auth provider.\nRefer to the Grafana authentication docs for details.`;\n\nconst getBasicRoleDisabled = (user: OrgUser) => {\n  const isUserSynced = user?.isExternallySynced;\n  return !contextSrv.hasPermissionInMetadata(AccessControlAction.OrgUsersWrite, user) || isUserSynced;\n};\n\nconst selectors = e2eSelectors.pages.UserListPage.UsersListPage;\n\nexport interface Props {\n  users: OrgUser[];\n  orgId?: number;\n  onRoleChange: (role: OrgRole, user: OrgUser) => void;\n  onRemoveUser: (user: OrgUser) => void;\n  fetchData?: FetchDataFunc<OrgUser>;\n  changePage: (page: number) => void;\n  page: number;\n  totalPages: number;\n  rolesLoading?: boolean;\n  onUserRolesChange?: () => void;\n}\n\nexport const OrgUsersTable = ({\n  users,\n  orgId,\n  onRoleChange,\n  onUserRolesChange,\n  onRemoveUser,\n  fetchData,\n  changePage,\n  page,\n  totalPages,\n  rolesLoading,\n}: Props) => {\n  const [userToRemove, setUserToRemove] = useState<OrgUser | null>(null);\n  const [roleOptions, setRoleOptions] = useState<Role[]>([]);\n\n  useEffect(() => {\n    async function fetchOptions() {\n      try {\n        if (contextSrv.hasPermission(AccessControlAction.ActionRolesList)) {\n          let options = await fetchRoleOptions(orgId);\n          setRoleOptions(options);\n        }\n      } catch (e) {\n        console.error('Error loading options');\n      }\n    }\n    if (contextSrv.licensedAccessControlEnabled()) {\n      fetchOptions();\n    }\n  }, [orgId]);\n\n  const columns: Array<Column<OrgUser>> = useMemo(\n    () => [\n      {\n        id: 'avatarUrl',\n        header: '',\n        cell: ({ cell: { value } }: Cell<'avatarUrl'>) => value && <Avatar src={value} alt=\"User avatar\" />,\n      },\n      {\n        id: 'login',\n        header: 'Login',\n        cell: ({ cell: { value } }: Cell<'login'>) => <div>{value}</div>,\n        sortType: 'string',\n      },\n      {\n        id: 'email',\n        header: 'Email',\n        cell: ({ cell: { value } }: Cell<'email'>) => value,\n        sortType: 'string',\n      },\n      {\n        id: 'name',\n        header: 'Name',\n        cell: ({ cell: { value } }: Cell<'name'>) => value,\n        sortType: 'string',\n      },\n      {\n        id: 'lastSeenAtAge',\n        header: 'Last active',\n        cell: ({ cell: { value } }: Cell<'lastSeenAtAge'>) => {\n          return <>{value && <>{value === '10 years' ? <Text color={'disabled'}>Never</Text> : value}</>}</>;\n        },\n        sortType: (a, b) => new Date(a.original.lastSeenAt).getTime() - new Date(b.original.lastSeenAt).getTime(),\n      },\n      {\n        id: 'role',\n        header: 'Role',\n        cell: ({ cell: { value }, row: { original } }: Cell<'role'>) => {\n          const basicRoleDisabled = getBasicRoleDisabled(original);\n          const onUserRolesUpdate = async (newRoles: Role[], userId: number, orgId: number | undefined) => {\n            await updateUserRoles(newRoles, userId, orgId);\n            if (onUserRolesChange) {\n              onUserRolesChange();\n            }\n          };\n\n          return contextSrv.licensedAccessControlEnabled() ? (\n            <UserRolePicker\n              userId={original.userId}\n              roles={original.roles}\n              apply={true}\n              onApplyRoles={onUserRolesUpdate}\n              isLoading={rolesLoading}\n              orgId={orgId}\n              roleOptions={roleOptions}\n              basicRole={value}\n              onBasicRoleChange={(newRole) => onRoleChange(newRole, original)}\n              basicRoleDisabled={basicRoleDisabled}\n              basicRoleDisabledMessage={disabledRoleMessage}\n              width={40}\n            />\n          ) : (\n            <OrgRolePicker\n              aria-label=\"Role\"\n              value={value}\n              disabled={basicRoleDisabled}\n              onChange={(newRole) => onRoleChange(newRole, original)}\n            />\n          );\n        },\n      },\n      {\n        id: 'info',\n        header: '',\n        cell: ({ row: { original } }: Cell) => {\n          const basicRoleDisabled = getBasicRoleDisabled(original);\n          return (\n            basicRoleDisabled && (\n              <Box display={'flex'} alignItems={'center'} marginLeft={1}>\n                <Tooltip\n                  interactive={true}\n                  content={\n                    <div>\n                      This user&apos;s role is not editable because it is synchronized from your auth provider. Refer to\n                      the&nbsp;\n                      <a\n                        href={\n                          'https://grafana.com/docs/grafana/latest/administration/user-management/manage-org-users/#change-a-users-organization-permissions'\n                        }\n                        rel=\"noreferrer\"\n                        target=\"_blank\"\n                      >\n                        Grafana authentication docs\n                      </a>\n                      &nbsp;for details.\n                    </div>\n                  }\n                >\n                  <Icon name=\"question-circle\" />\n                </Tooltip>\n              </Box>\n            )\n          );\n        },\n      },\n      {\n        id: 'authLabels',\n        header: 'Origin',\n        cell: ({ cell: { value } }: Cell<'authLabels'>) => (\n          <>{Array.isArray(value) && value.length > 0 && <TagBadge label={value[0]} removeIcon={false} count={0} />}</>\n        ),\n      },\n      {\n        id: 'isDisabled',\n        header: '',\n        cell: ({ cell: { value } }: Cell<'isDisabled'>) => <>{value && <Tag colorIndex={9} name={'Disabled'} />}</>,\n      },\n      {\n        id: 'delete',\n        header: '',\n        cell: ({ row: { original } }: Cell) => {\n          return (\n            contextSrv.hasPermissionInMetadata(AccessControlAction.OrgUsersRemove, original) && (\n              <Button\n                size=\"sm\"\n                variant=\"destructive\"\n                onClick={() => {\n                  setUserToRemove(original);\n                }}\n                icon=\"times\"\n                aria-label={`Delete user ${original.name}`}\n              />\n            )\n          );\n        },\n      },\n    ],\n    [rolesLoading, orgId, roleOptions, onUserRolesChange, onRoleChange]\n  );\n\n  return (\n    <Stack direction={'column'} gap={2} data-testid={selectors.container}>\n      <InteractiveTable columns={columns} data={users} getRowId={(user) => String(user.userId)} fetchData={fetchData} />\n      <Stack justifyContent=\"flex-end\">\n        <Pagination onNavigate={changePage} currentPage={page} numberOfPages={totalPages} hideWhenSinglePage={true} />\n      </Stack>\n      {Boolean(userToRemove) && (\n        <ConfirmModal\n          body={`Are you sure you want to delete user ${userToRemove?.login}?`}\n          confirmText=\"Delete\"\n          title=\"Delete\"\n          onDismiss={() => {\n            setUserToRemove(null);\n          }}\n          isOpen={true}\n          onConfirm={() => {\n            if (!userToRemove) {\n              return;\n            }\n            onRemoveUser(userToRemove);\n            setUserToRemove(null);\n          }}\n        />\n      )}\n    </Stack>\n  );\n};\n"],"names":["UserRolePicker","basicRole","roles","userId","orgId","onBasicRoleChange","roleOptions","disabled","basicRoleDisabled","basicRoleDisabledMessage","apply","onApplyRoles","pendingRoles","maxWidth","width","isLoading","loading","appliedRoles","getUserRoles","onRolesChange","canUpdateRoles","perPage","getOrg","getOrgUsers","page","accessControl","getUsersRoles","users","userIds","updateOrgUserRole","orgUser","removeOrgUser","updateOrgName","name","id","canWriteOrg","canReadUsers","setUsers","setPage","totalPages","setTotalPages","orgState","fetchOrg","useAsyncFn","handleSubmit","register","errors","fetchOrgUsers","result","onUpdateOrgName","orgName","renderMissingPermissionMessage","Alert","onPageChange","toPage","onRemoveUser","onRoleChange","role","pageNav","Page","Legend","Field","Input","Button","OrgUsersTable","options","r","OrgRolePicker","value","onChange","ariaLabel","inputId","autoFocus","restProps","val","disabledRoleMessage","getBasicRoleDisabled","user","isUserSynced","selectors","onUserRolesChange","fetchData","changePage","rolesLoading","userToRemove","setUserToRemove","setRoleOptions","fetchOptions","columns","b","original","onUserRolesUpdate","newRoles","newRole"],"sourceRoot":""}