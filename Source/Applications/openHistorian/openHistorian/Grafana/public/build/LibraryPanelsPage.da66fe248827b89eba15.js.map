{"version":3,"file":"LibraryPanelsPage.da66fe248827b89eba15.js","mappings":"oNAQO,MAAMA,EAAoB,IAAM,CACrC,KAAM,CAACC,EAAUC,CAAW,KAAI,YAAwC,MAAS,EAEjF,SACE,OAAC,KAAI,CAAC,MAAM,4BACV,oBAAC,KAAK,SAAL,CACC,oBAAC,IAAmB,CAAC,QAASA,EAAa,qBAAoB,GAAC,SAAQ,GAAC,gBAAe,GAAC,iBAAgB,GAAC,EACzGD,KAAW,OAAC,IAAqB,CAAC,UAAW,IAAMC,EAAY,MAAS,EAAG,aAAcD,CAAA,CAAU,EAAK,MAC3G,EACF,CAEJ,EAEA,EAAeD,C,mLCHR,SAASG,EAAsB,CAAE,aAAAC,EAAc,UAAAC,CAAU,EAA4C,CAC1G,MAAMC,KAAS,MAAWC,CAAS,EAC7B,CAACC,EAASC,CAAU,KAAI,YAAS,EAAK,EACtC,CAACC,EAAWC,CAAY,KAAI,YAAS,CAAC,EACtC,CAACC,EAAQC,CAAS,KAAI,YAA2D,MAAS,KAChG,aAAU,IAAM,EACO,SAAY,CAC/B,MAAMC,EAAsB,QAAM,MAAmCV,EAAa,GAAG,EACrFO,EAAaG,EAAoB,MAAM,CACzC,GACa,CACf,EAAG,CAACV,EAAa,GAAG,CAAC,EACrB,MAAMW,KAAc,eACjBC,GAAyBC,EAAiBb,EAAa,IAAKY,EAAcP,CAAU,EACrF,CAACL,EAAa,GAAG,CACnB,EACMc,KAAuB,WAAQ,IAAM,IAASH,EAAa,IAAK,CAAE,QAAS,EAAK,CAAC,EAAG,CAACA,CAAW,CAAC,EACjGI,EAAeC,GAAqC,CACxDA,EAAE,eAAe,EACjB,KAAgB,KAAK,KAAQ,UAAU,MAAMR,GAAQ,OAAO,GAAG,GAAI,CAAC,CAAC,CAAC,CACxE,EAEA,SACE,QAAC,KACC,SAAO,KAAE,6BAA8B,yBAAyB,EAChE,UAAAP,EACA,gBAAiBA,EACjB,OAAM,GAEN,qBAAC,OAAI,UAAWC,EAAO,UACpB,UAAAI,IAAc,KACb,OAAC,QACC,mBAAC,KAAK,CAAC,QAAS,wCAAyC,uFAEzD,EACF,EACE,KACHA,EAAY,KACX,oBACE,oBAAC,KACC,oBAAC,KAAK,CAAC,QAAQ,4BAA4B,MAAOA,EAAW,yCAC9B,CAAE,MAAOA,CAAU,EAAE,mEAEpD,EACF,KACA,OAAC,MACC,YAAW,GACX,UAAWF,EACX,eAAgB,GAChB,YAAaU,EACb,SAAUL,EACV,eAAa,KAAE,0CAA2C,sCAAsC,EAChG,oBAAkB,KAAE,iDAAkD,qBAAqB,EAC7F,GACF,EACE,MACN,KACA,QAAC,IAAM,UAAN,CACC,oBAAC,KAAM,CAAC,QAAQ,YAAY,QAASR,EAAW,KAAK,UACnD,mBAAC,KAAK,CAAC,QAAS,qCAAsC,kBAAM,EAC9D,KACA,OAAC,KAAM,CAAC,QAASc,EAAa,SAAU,CAASP,EAC9C,SAAAA,KACG,KAAE,0CAA2C,6BAA8B,CAAE,MAAOA,GAAQ,KAAM,CAAC,KACnG,KAAE,0CAA2C,4BAA4B,EAC/E,GACF,GACF,CAEJ,CAEA,eAAeK,EAAiBI,EAAaL,EAAsBP,EAAwC,CACzGA,EAAW,EAAI,EAEf,MAAMa,GADa,QAAM,MAAuBD,CAAG,GAEhD,OAAQE,GAAMA,EAAE,MAAM,YAAY,EAAE,SAASP,EAAa,YAAY,CAAC,CAAC,EACxE,IAAKO,IAAO,CAAE,MAAOA,EAAE,MAAO,MAAOA,CAAE,EAAE,EAC5C,OAAAd,EAAW,EAAK,EAETa,CACT,CAEA,SAASf,EAAUiB,EAAsB,CACvC,MAAO,CACL,aAAW,QACb,CACF,C","sources":["webpack://grafana/./public/app/features/library-panels/LibraryPanelsPage.tsx","webpack://grafana/./public/app/features/library-panels/components/OpenLibraryPanelModal/OpenLibraryPanelModal.tsx"],"sourcesContent":["import { useState } from 'react';\n\nimport { Page } from 'app/core/components/Page/Page';\n\nimport { LibraryPanelsSearch } from './components/LibraryPanelsSearch/LibraryPanelsSearch';\nimport { OpenLibraryPanelModal } from './components/OpenLibraryPanelModal/OpenLibraryPanelModal';\nimport { LibraryElementDTO } from './types';\n\nexport const LibraryPanelsPage = () => {\n  const [selected, setSelected] = useState<LibraryElementDTO | undefined>(undefined);\n\n  return (\n    <Page navId=\"dashboards/library-panels\">\n      <Page.Contents>\n        <LibraryPanelsSearch onClick={setSelected} showSecondaryActions showSort showPanelFilter showFolderFilter />\n        {selected ? <OpenLibraryPanelModal onDismiss={() => setSelected(undefined)} libraryPanel={selected} /> : null}\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default LibraryPanelsPage;\n","import { css } from '@emotion/css';\nimport debounce from 'debounce-promise';\nimport { MouseEvent, useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { GrafanaTheme2, SelectableValue, urlUtil } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { AsyncSelect, Button, Modal, useStyles2 } from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { DashboardSearchItem } from '../../../search/types';\nimport { getConnectedDashboards, getLibraryPanelConnectedDashboards } from '../../state/api';\nimport { LibraryElementDTO } from '../../types';\n\nexport interface OpenLibraryPanelModalProps {\n  onDismiss: () => void;\n  libraryPanel: LibraryElementDTO;\n}\n\nexport function OpenLibraryPanelModal({ libraryPanel, onDismiss }: OpenLibraryPanelModalProps): JSX.Element {\n  const styles = useStyles2(getStyles);\n  const [loading, setLoading] = useState(false);\n  const [connected, setConnected] = useState(0);\n  const [option, setOption] = useState<SelectableValue<DashboardSearchItem> | undefined>(undefined);\n  useEffect(() => {\n    const getConnected = async () => {\n      const connectedDashboards = await getLibraryPanelConnectedDashboards(libraryPanel.uid);\n      setConnected(connectedDashboards.length);\n    };\n    getConnected();\n  }, [libraryPanel.uid]);\n  const loadOptions = useCallback(\n    (searchString: string) => loadOptionsAsync(libraryPanel.uid, searchString, setLoading),\n    [libraryPanel.uid]\n  );\n  const debouncedLoadOptions = useMemo(() => debounce(loadOptions, 300, { leading: true }), [loadOptions]);\n  const onViewPanel = (e: MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    locationService.push(urlUtil.renderUrl(`/d/${option?.value?.uid}`, {}));\n  };\n\n  return (\n    <Modal\n      title={t('library-panels.modal.title', 'View panel in dashboard')}\n      onDismiss={onDismiss}\n      onClickBackdrop={onDismiss}\n      isOpen\n    >\n      <div className={styles.container}>\n        {connected === 0 ? (\n          <span>\n            <Trans i18nKey={'library-panels.modal.panel-not-linked'}>\n              Panel is not linked to a dashboard. Add the panel to a dashboard and retry.\n            </Trans>\n          </span>\n        ) : null}\n        {connected > 0 ? (\n          <>\n            <p>\n              <Trans i18nKey=\"library-panels.modal.body\" count={connected}>\n                This panel is being used in {{ count: connected }} dashboard. Please choose which dashboard to view the\n                panel in:\n              </Trans>\n            </p>\n            <AsyncSelect\n              isClearable\n              isLoading={loading}\n              defaultOptions={true}\n              loadOptions={debouncedLoadOptions}\n              onChange={setOption}\n              placeholder={t('library-panels.modal.select-placeholder', 'Start typing to search for dashboard')}\n              noOptionsMessage={t('library-panels.modal.select-no-options-message', 'No dashboards found')}\n            />\n          </>\n        ) : null}\n      </div>\n      <Modal.ButtonRow>\n        <Button variant=\"secondary\" onClick={onDismiss} fill=\"outline\">\n          <Trans i18nKey={'library-panels.modal.button-cancel'}>Cancel</Trans>\n        </Button>\n        <Button onClick={onViewPanel} disabled={!Boolean(option)}>\n          {option\n            ? t('library-panels.modal.button-view-panel1', 'View panel in {{label}}...', { label: option?.label })\n            : t('library-panels.modal.button-view-panel2', 'View panel in dashboard...')}\n        </Button>\n      </Modal.ButtonRow>\n    </Modal>\n  );\n}\n\nasync function loadOptionsAsync(uid: string, searchString: string, setLoading: (loading: boolean) => void) {\n  setLoading(true);\n  const searchHits = await getConnectedDashboards(uid);\n  const options = searchHits\n    .filter((d) => d.title.toLowerCase().includes(searchString.toLowerCase()))\n    .map((d) => ({ label: d.title, value: d }));\n  setLoading(false);\n\n  return options;\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css``,\n  };\n}\n"],"names":["LibraryPanelsPage","selected","setSelected","OpenLibraryPanelModal","libraryPanel","onDismiss","styles","getStyles","loading","setLoading","connected","setConnected","option","setOption","connectedDashboards","loadOptions","searchString","loadOptionsAsync","debouncedLoadOptions","onViewPanel","e","uid","options","d","theme"],"sourceRoot":""}