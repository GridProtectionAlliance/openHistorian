{"version":3,"file":"DashboardListPage.0609b0261325d16a1def.js","mappings":"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","sources":["webpack://grafana/./public/app/features/search/loaders.ts","webpack://grafana/./public/app/features/search/components/DashboardActions.tsx","webpack://grafana/./public/app/features/search/components/ManageDashboardsNew.tsx","webpack://grafana/./public/app/features/search/components/DashboardListPage.tsx"],"sourcesContent":["import { backendSrv } from 'app/core/services/backend_srv';\n\nimport { buildNavModel } from '../folders/state/navModel';\n\nexport const loadFolderPage = (uid: string) => {\n  return backendSrv.getFolderByUid(uid, { withAccessControl: true }).then((folder) => {\n    const navModel = buildNavModel(folder);\n    navModel.children![0].active = true;\n\n    return { folder, folderNav: navModel };\n  });\n};\n","import React, { useMemo, useState } from 'react';\n\nimport { config, reportInteraction } from '@grafana/runtime';\nimport { Menu, Dropdown, Button, Icon, HorizontalGroup } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\nimport { FolderDTO } from 'app/types';\n\nimport { MoveToFolderModal } from '../page/components/MoveToFolderModal';\n\nexport interface Props {\n  folder: FolderDTO | undefined;\n  canCreateFolders?: boolean;\n  canCreateDashboards?: boolean;\n}\n\nexport const DashboardActions = ({ folder, canCreateFolders = false, canCreateDashboards = false }: Props) => {\n  const [isMoveModalOpen, setIsMoveModalOpen] = useState(false);\n  const canMove = config.featureToggles.nestedFolders && (folder?.canSave ?? false);\n\n  const moveSelection = useMemo(\n    () => new Map<string, Set<string>>([['folder', new Set(folder?.uid ? [folder.uid] : [])]]),\n    [folder]\n  );\n\n  const actionUrl = (type: string) => {\n    let url = `dashboard/${type}`;\n    const isTypeNewFolder = type === 'new_folder';\n\n    if (isTypeNewFolder) {\n      url = `dashboards/folder/new/`;\n    }\n\n    if (folder?.uid) {\n      url += `?folderUid=${folder.uid}`;\n    }\n\n    return url;\n  };\n\n  const MenuActions = () => {\n    return (\n      <Menu>\n        {canCreateDashboards && (\n          <Menu.Item\n            url={actionUrl('new')}\n            label={t('search.dashboard-actions.new-dashboard', 'New Dashboard')}\n            onClick={() =>\n              reportInteraction('grafana_menu_item_clicked', { url: actionUrl('new'), from: '/dashboards' })\n            }\n          />\n        )}\n        {canCreateFolders && (config.featureToggles.nestedFolders || !folder?.uid) && (\n          <Menu.Item\n            url={actionUrl('new_folder')}\n            label={t('search.dashboard-actions.new-folder', 'New Folder')}\n            onClick={() =>\n              reportInteraction('grafana_menu_item_clicked', { url: actionUrl('new_folder'), from: '/dashboards' })\n            }\n          />\n        )}\n        {canCreateDashboards && (\n          <Menu.Item\n            url={actionUrl('import')}\n            label={t('search.dashboard-actions.import', 'Import')}\n            onClick={() =>\n              reportInteraction('grafana_menu_item_clicked', { url: actionUrl('import'), from: '/dashboards' })\n            }\n          />\n        )}\n      </Menu>\n    );\n  };\n\n  return (\n    <>\n      <div>\n        <HorizontalGroup>\n          {canMove && (\n            <Button onClick={() => setIsMoveModalOpen(true)} icon=\"exchange-alt\" variant=\"secondary\">\n              Move\n            </Button>\n          )}\n          <Dropdown overlay={MenuActions} placement=\"bottom-start\">\n            <Button variant=\"primary\">\n              {t('search.dashboard-actions.new', 'New')}\n              <Icon name=\"angle-down\" />\n            </Button>\n          </Dropdown>\n        </HorizontalGroup>\n      </div>\n\n      {canMove && isMoveModalOpen && (\n        <MoveToFolderModal onMoveItems={() => {}} results={moveSelection} onDismiss={() => setIsMoveModalOpen(false)} />\n      )}\n    </>\n  );\n};\n","import { css, cx } from '@emotion/css';\nimport React, { useEffect } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Input, useStyles2, Spinner } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { FolderDTO, AccessControlAction } from 'app/types';\n\nimport { useKeyNavigationListener } from '../hooks/useSearchKeyboardSelection';\nimport { SearchView } from '../page/components/SearchView';\nimport { getSearchStateManager } from '../state/SearchStateManager';\n\nimport { DashboardActions } from './DashboardActions';\n\nexport interface Props {\n  folder?: FolderDTO;\n}\n\nexport const ManageDashboardsNew = React.memo(({ folder }: Props) => {\n  const styles = useStyles2(getStyles);\n  // since we don't use \"query\" from use search... it is not actually loaded from the URL!\n  const stateManager = getSearchStateManager();\n  const state = stateManager.useState();\n  const { onKeyDown, keyboardEvents } = useKeyNavigationListener();\n\n  // TODO: we need to refactor DashboardActions to use folder.uid instead\n\n  const folderUid = folder?.uid;\n  const canSave = folder?.canSave;\n  const { isEditor } = contextSrv;\n  const hasEditPermissionInFolders = folder ? canSave : contextSrv.hasEditPermissionInFolders;\n  const canCreateFolders = contextSrv.hasAccess(AccessControlAction.FoldersCreate, isEditor);\n  const canCreateDashboardsFallback = hasEditPermissionInFolders || !!canSave;\n  const canCreateDashboards = folderUid\n    ? contextSrv.hasAccessInMetadata(AccessControlAction.DashboardsCreate, folder, canCreateDashboardsFallback)\n    : contextSrv.hasAccess(AccessControlAction.DashboardsCreate, canCreateDashboardsFallback);\n  const viewActions = (folder === undefined && canCreateFolders) || canCreateDashboards;\n\n  useEffect(() => stateManager.initStateFromUrl(folder?.uid), [folder?.uid, stateManager]);\n\n  return (\n    <>\n      <div className={cx(styles.actionBar, 'page-action-bar')}>\n        <div className={cx(styles.inputWrapper, 'gf-form gf-form--grow m-r-2')}>\n          <Input\n            value={state.query ?? ''}\n            onChange={(e) => stateManager.onQueryChange(e.currentTarget.value)}\n            onKeyDown={onKeyDown}\n            // eslint-disable-next-line jsx-a11y/no-autofocus\n            autoFocus\n            spellCheck={false}\n            placeholder={\n              state.includePanels\n                ? t('search.search-input.include-panels-placeholder', 'Search for dashboards and panels')\n                : t('search.search-input.placeholder', 'Search for dashboards')\n            }\n            className={styles.searchInput}\n            suffix={false ? <Spinner /> : null}\n          />\n        </div>\n        {viewActions && (\n          <DashboardActions\n            folder={folder}\n            canCreateFolders={canCreateFolders}\n            canCreateDashboards={canCreateDashboards}\n          />\n        )}\n      </div>\n\n      <SearchView\n        showManage={Boolean(isEditor || hasEditPermissionInFolders || canSave)}\n        folderDTO={folder}\n        hidePseudoFolders={true}\n        keyboardEvents={keyboardEvents}\n      />\n    </>\n  );\n});\n\nManageDashboardsNew.displayName = 'ManageDashboardsNew';\n\nexport default ManageDashboardsNew;\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  actionBar: css`\n    ${theme.breakpoints.down('sm')} {\n      flex-wrap: wrap;\n    }\n  `,\n  inputWrapper: css`\n    ${theme.breakpoints.down('sm')} {\n      margin-right: 0 !important;\n    }\n  `,\n  searchInput: css`\n    margin-bottom: 6px;\n    min-height: ${theme.spacing(4)};\n  `,\n  unsupported: css`\n    padding: 10px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 100%;\n    font-size: 18px;\n  `,\n  noResults: css`\n    padding: ${theme.v1.spacing.md};\n    background: ${theme.v1.colors.bg2};\n    font-style: italic;\n    margin-top: ${theme.v1.spacing.md};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { memo } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { locationUtil, NavModelItem } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { Page } from 'app/core/components/Page/Page';\nimport { FolderDTO } from 'app/types';\n\nimport { GrafanaRouteComponentProps } from '../../../core/navigation/types';\nimport { loadFolderPage } from '../loaders';\n\nimport ManageDashboardsNew from './ManageDashboardsNew';\n\nexport interface DashboardListPageRouteParams {\n  uid?: string;\n  slug?: string;\n}\n\ninterface Props extends GrafanaRouteComponentProps<DashboardListPageRouteParams> {}\n\nexport const DashboardListPage = memo(({ match, location }: Props) => {\n  const { loading, value } = useAsync<() => Promise<{ folder?: FolderDTO; pageNav?: NavModelItem }>>(() => {\n    const uid = match.params.uid;\n    const url = location.pathname;\n    if (!uid || !url.startsWith('/dashboards')) {\n      return Promise.resolve({});\n    }\n\n    return loadFolderPage(uid!).then(({ folder, folderNav }) => {\n      const path = locationUtil.stripBaseFromUrl(folder.url);\n\n      if (path !== location.pathname) {\n        locationService.replace(path);\n      }\n\n      return { folder, pageNav: folderNav };\n    });\n  }, [match.params.uid]);\n\n  return (\n    <Page navId=\"dashboards/browse\" pageNav={value?.pageNav}>\n      <Page.Contents\n        isLoading={loading}\n        className={css`\n          display: flex;\n          flex-direction: column;\n          height: 100%;\n        `}\n      >\n        <ManageDashboardsNew folder={value?.folder} />\n      </Page.Contents>\n    </Page>\n  );\n});\n\nDashboardListPage.displayName = 'DashboardListPage';\n\nexport default DashboardListPage;\n"],"names":["loadFolderPage","uid","folder","navModel","DashboardActions","canCreateFolders","canCreateDashboards","isMoveModalOpen","setIsMoveModalOpen","canMove","config","moveSelection","actionUrl","type","url","MenuActions","Menu","Button","Dropdown","Icon","MoveToFolderModal","ManageDashboardsNew","styles","getStyles","stateManager","state","onKeyDown","keyboardEvents","folderUid","canSave","isEditor","hasEditPermissionInFolders","canCreateDashboardsFallback","viewActions","Input","e","SearchView","theme","DashboardListPage","match","location","loading","value","useAsync","folderNav","path","Page"],"sourceRoot":""}