{"version":3,"sources":["webpack:///./public/app/plugins/datasource/input/InputDatasource.ts","webpack:///./public/app/plugins/datasource/input/utils.ts","webpack:///./public/app/plugins/datasource/input/InputQueryEditor.tsx","webpack:///./public/app/plugins/datasource/input/InputConfigEditor.tsx","webpack:///./public/app/plugins/datasource/input/module.ts"],"names":["InputDatasource_InputDatasource","_super","InputDatasource","instanceSettings","_this","call","this","data","jsonData","map","v","Object","src","tslib_es6","prototype","getQueryDisplayText","query","describeDataFrame","name","metricFindQuery","options","Promise","resolve","reject","names","_c","_d","next","done","series","value","_e","e_2","fields","_f","field","push","text","results","_b","targets","hide","i","length","refId","testDatasource","rowCount","info","status","message","getLength","hasOwnProperty","values","count","reduce","acc","dataFrameToCSV","dto","InputQueryEditor_options","label","description","InputQueryEditor_InputQueryEditor","InputQueryEditor","apply","arguments","state","onSourceChange","item","_a","props","datasource","onChange","onRunQuery","undefined","setState","onSeriesParsed","onComponentDidMount","render","id","selected","react_default","a","createElement","className","grafana_ui_src","width","href","height","react","InputConfigEditor_InputConfigEditor","InputConfigEditor","onOptionsChange","componentDidMount","__webpack_require__","d","__webpack_exports__","module_plugin","setConfigEditor","setQueryEditor"],"mappings":"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","file":"inputDatasourcePlugin.4d0490a94b199a11f40c.js","sourcesContent":["// Types\nimport {\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  MetricFindValue,\n  DataFrame,\n  DataFrameDTO,\n  toDataFrame,\n} from '@grafana/data';\n\nimport { InputQuery, InputOptions } from './types';\n\nexport class InputDatasource extends DataSourceApi<InputQuery, InputOptions> {\n  data: DataFrame[] = [];\n\n  constructor(instanceSettings: DataSourceInstanceSettings<InputOptions>) {\n    super(instanceSettings);\n\n    if (instanceSettings.jsonData.data) {\n      this.data = instanceSettings.jsonData.data.map(v => toDataFrame(v));\n    }\n  }\n\n  /**\n   * Convert a query to a simple text string\n   */\n  getQueryDisplayText(query: InputQuery): string {\n    if (query.data) {\n      return 'Panel Data: ' + describeDataFrame(query.data);\n    }\n    return `Shared Data From: ${this.name} (${describeDataFrame(this.data)})`;\n  }\n\n  metricFindQuery(query: string, options?: any): Promise<MetricFindValue[]> {\n    return new Promise((resolve, reject) => {\n      const names = [];\n      for (const series of this.data) {\n        for (const field of series.fields) {\n          // TODO, match query/options?\n          names.push({\n            text: field.name,\n          });\n        }\n      }\n      resolve(names);\n    });\n  }\n\n  query(options: DataQueryRequest<InputQuery>): Promise<DataQueryResponse> {\n    const results: DataFrame[] = [];\n    for (const query of options.targets) {\n      if (query.hide) {\n        continue;\n      }\n      let data = this.data;\n      if (query.data) {\n        data = query.data.map(v => toDataFrame(v));\n      }\n      for (let i = 0; i < data.length; i++) {\n        results.push({\n          ...data[i],\n          refId: query.refId,\n        });\n      }\n    }\n    return Promise.resolve({ data: results });\n  }\n\n  testDatasource() {\n    return new Promise((resolve, reject) => {\n      let rowCount = 0;\n      let info = `${this.data.length} Series:`;\n      for (const series of this.data) {\n        const length = series.length;\n        info += ` [${series.fields.length} Fields, ${length} Rows]`;\n        rowCount += length;\n      }\n\n      if (rowCount > 0) {\n        resolve({\n          status: 'success',\n          message: info,\n        });\n      }\n      reject({\n        status: 'error',\n        message: 'No Data Entered',\n      });\n    });\n  }\n}\n\nfunction getLength(data?: DataFrameDTO | DataFrame) {\n  if (!data || !data.fields || !data.fields.length) {\n    return 0;\n  }\n  if (data.hasOwnProperty('length')) {\n    return (data as DataFrame).length;\n  }\n  return data.fields[0].values.length;\n}\n\nexport function describeDataFrame(data: Array<DataFrameDTO | DataFrame>): string {\n  if (!data || !data.length) {\n    return '';\n  }\n  if (data.length > 1) {\n    const count = data.reduce((acc, series) => {\n      return acc + getLength(series);\n    }, 0);\n    return `${data.length} Series, ${count} Rows`;\n  }\n  const series = data[0];\n  if (!series.fields) {\n    return 'Missing Fields';\n  }\n  const length = getLength(series);\n  return `${series.fields.length} Fields, ${length} Rows`;\n}\n\nexport default InputDatasource;\n","import { toDataFrame, DataFrameDTO, toCSV } from '@grafana/data';\n\nexport function dataFrameToCSV(dto?: DataFrameDTO[]) {\n  if (!dto || !dto.length) {\n    return '';\n  }\n  return toCSV(dto.map(v => toDataFrame(v)));\n}\n","// Libraries\nimport React, { PureComponent } from 'react';\n\n// Types\nimport { InputDatasource, describeDataFrame } from './InputDatasource';\nimport { InputQuery, InputOptions } from './types';\n\nimport { FormLabel, Select, TableInputCSV } from '@grafana/ui';\nimport { DataFrame, toCSV, SelectableValue, MutableDataFrame, QueryEditorProps } from '@grafana/data';\n\nimport { dataFrameToCSV } from './utils';\n\ntype Props = QueryEditorProps<InputDatasource, InputQuery, InputOptions>;\n\nconst options = [\n  { value: 'panel', label: 'Panel', description: 'Save data in the panel configuration.' },\n  { value: 'shared', label: 'Shared', description: 'Save data in the shared datasource object.' },\n];\n\ninterface State {\n  text: string;\n}\n\nexport class InputQueryEditor extends PureComponent<Props, State> {\n  state = {\n    text: '',\n  };\n\n  onComponentDidMount() {\n    const { query } = this.props;\n    const text = dataFrameToCSV(query.data);\n    this.setState({ text });\n  }\n\n  onSourceChange = (item: SelectableValue<string>) => {\n    const { datasource, query, onChange, onRunQuery } = this.props;\n    let data: DataFrame[] | undefined = undefined;\n    if (item.value === 'panel') {\n      if (query.data) {\n        return;\n      }\n      data = [...datasource.data];\n      if (!data) {\n        data = [new MutableDataFrame()];\n      }\n      this.setState({ text: toCSV(data) });\n    }\n    onChange({ ...query, data });\n    onRunQuery();\n  };\n\n  onSeriesParsed = (data: DataFrame[], text: string) => {\n    const { query, onChange, onRunQuery } = this.props;\n    this.setState({ text });\n    if (!data) {\n      data = [new MutableDataFrame()];\n    }\n    onChange({ ...query, data });\n    onRunQuery();\n  };\n\n  render() {\n    const { datasource, query } = this.props;\n    const { id, name } = datasource;\n    const { text } = this.state;\n\n    const selected = query.data ? options[0] : options[1];\n    return (\n      <div>\n        <div className=\"gf-form\">\n          <FormLabel width={4}>Data</FormLabel>\n          <Select width={6} options={options} value={selected} onChange={this.onSourceChange} />\n\n          <div className=\"btn btn-link\">\n            {query.data ? (\n              describeDataFrame(query.data)\n            ) : (\n              <a href={`datasources/edit/${id}/`}>\n                {name}: {describeDataFrame(datasource.data)} &nbsp;&nbsp;\n                <i className=\"fa fa-pencil-square-o\" />\n              </a>\n            )}\n          </div>\n        </div>\n        {query.data && <TableInputCSV text={text} onSeriesParsed={this.onSeriesParsed} width={'100%'} height={200} />}\n      </div>\n    );\n  }\n}\n","// Libraries\nimport React, { PureComponent } from 'react';\n\n// Types\nimport { InputOptions } from './types';\n\nimport { TableInputCSV } from '@grafana/ui';\nimport { DataSourcePluginOptionsEditorProps, DataFrame, MutableDataFrame } from '@grafana/data';\nimport { dataFrameToCSV } from './utils';\n\ninterface Props extends DataSourcePluginOptionsEditorProps<InputOptions> {}\n\ninterface State {\n  text: string;\n}\n\nexport class InputConfigEditor extends PureComponent<Props, State> {\n  state = {\n    text: '',\n  };\n\n  componentDidMount() {\n    const { options } = this.props;\n    if (options.jsonData.data) {\n      const text = dataFrameToCSV(options.jsonData.data);\n      this.setState({ text });\n    }\n  }\n\n  onSeriesParsed = (data: DataFrame[], text: string) => {\n    const { options, onOptionsChange } = this.props;\n    if (!data) {\n      data = [new MutableDataFrame()];\n    }\n    // data is a property on 'jsonData'\n    const jsonData = {\n      ...options.jsonData,\n      data,\n    };\n\n    onOptionsChange({\n      ...options,\n      jsonData,\n    });\n    this.setState({ text });\n  };\n\n  render() {\n    const { text } = this.state;\n    return (\n      <div>\n        <div className=\"gf-form-group\">\n          <h4>Shared Data:</h4>\n          <span>Enter CSV</span>\n          <TableInputCSV text={text} onSeriesParsed={this.onSeriesParsed} width={'100%'} height={200} />\n        </div>\n\n        <div className=\"grafana-info-box\">\n          This data is stored in the datasource json and is returned to every user in the initial request for any\n          datasource. This is an appropriate place to enter a few values. Large datasets will perform better in other\n          datasources.\n          <br />\n          <br />\n          <b>NOTE:</b> Changes to this data will only be reflected after a browser refresh.\n        </div>\n      </div>\n    );\n  }\n}\n","import { DataSourcePlugin } from '@grafana/data';\n\nimport { InputDatasource } from './InputDatasource';\n\nimport { InputQueryEditor } from './InputQueryEditor';\nimport { InputConfigEditor } from './InputConfigEditor';\nimport { InputOptions, InputQuery } from './types';\n\nexport const plugin = new DataSourcePlugin<InputDatasource, InputQuery, InputOptions>(InputDatasource)\n  .setConfigEditor(InputConfigEditor)\n  .setQueryEditor(InputQueryEditor);\n"],"sourceRoot":""}