{"version":3,"file":"UserProfileEditPage.e8abc3b5e98f21318d78.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/SharedPreferences/SharedPreferences.tsx","webpack://grafana/./public/app/features/profile/UserOrganizations.tsx","webpack://grafana/./public/app/features/profile/UserProfileEditForm.tsx","webpack://grafana/./public/app/features/profile/UserSessions.tsx","webpack://grafana/./public/app/features/profile/UserTeams.tsx","webpack://grafana/./public/app/features/profile/UserProfileEditPage.tsx","webpack://grafana/./public/app/features/profile/state/actions.ts","webpack://grafana/./.yarn/__virtual__/react-use-virtual-cea8e826dc/3/opt/drone/yarncache/react-use-npm-17.4.0-0ef4521544-0889da919b.zip/node_modules/react-use/esm/useMount.js"],"sourcesContent":["import { css } from '@emotion/css';\nimport { t, Trans } from '@lingui/macro';\nimport React, { PureComponent } from 'react';\n\nimport { FeatureState, SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { config } from '@grafana/runtime';\nimport {\n  Button,\n  Field,\n  FieldSet,\n  Form,\n  Icon,\n  Label,\n  RadioButtonGroup,\n  Select,\n  stylesFactory,\n  TimeZonePicker,\n  Tooltip,\n  WeekStartPicker,\n  FeatureBadge,\n} from '@grafana/ui';\nimport { ENGLISH_US, FRENCH_FRANCE, SPANISH_SPAIN } from 'app/core/internationalization/constants';\nimport { PreferencesService } from 'app/core/services/PreferencesService';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport { DashboardSearchItem, DashboardSearchItemType } from 'app/features/search/types';\n\nimport { UserPreferencesDTO } from '../../../types';\n\nexport interface Props {\n  resourceUri: string;\n  disabled?: boolean;\n}\n\nexport type State = UserPreferencesDTO & {\n  dashboards: DashboardSearchItem[];\n};\n\nconst themes: SelectableValue[] = [\n  { value: '', label: t({ id: 'shared-preferences.theme.default-label', message: 'Default' }) },\n  { value: 'dark', label: t({ id: 'shared-preferences.theme.dark-label', message: 'Dark' }) },\n  { value: 'light', label: t({ id: 'shared-preferences.theme.light-label', message: 'Light' }) },\n];\n\nconst languages: Array<SelectableValue<string>> = [\n  {\n    value: '',\n    label: t({\n      id: 'common.locale.default',\n      message: 'Default',\n    }),\n  },\n  {\n    value: ENGLISH_US,\n    label: t({\n      id: 'common.locale.en',\n      message: 'English',\n    }),\n  },\n  {\n    value: SPANISH_SPAIN,\n    label: t({\n      id: 'common.locale.es',\n      message: 'Spanish',\n    }),\n  },\n  {\n    value: FRENCH_FRANCE,\n    label: t({\n      id: 'common.locale.fr',\n      message: 'French',\n    }),\n  },\n];\n\nconst i18nFlag = Boolean(config.featureToggles.internationalization);\n\nconst DEFAULT_DASHBOARD_HOME: DashboardSearchItem = {\n  title: 'Default',\n  tags: [],\n  type: '' as DashboardSearchItemType,\n  uid: undefined,\n  uri: '',\n  url: '',\n  folderId: 0,\n  folderTitle: '',\n  folderUid: '',\n  folderUrl: '',\n  isStarred: false,\n  slug: '',\n  items: [],\n};\n\nexport class SharedPreferences extends PureComponent<Props, State> {\n  service: PreferencesService;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.service = new PreferencesService(props.resourceUri);\n    this.state = {\n      homeDashboardUID: DEFAULT_DASHBOARD_HOME.uid,\n      theme: '',\n      timezone: '',\n      weekStart: '',\n      locale: '',\n      dashboards: [],\n      queryHistory: { homeTab: '' },\n    };\n  }\n\n  async componentDidMount() {\n    const prefs = await this.service.load();\n    const dashboards = await backendSrv.search({ starred: true });\n\n    if (prefs.homeDashboardUID && !dashboards.find((d) => d.uid === prefs.homeDashboardUID)) {\n      const missingDash = await backendSrv.search({ dashboardUIDs: prefs.homeDashboardUID });\n\n      if (missingDash.length > 0) {\n        dashboards.push(missingDash[0]);\n      }\n    }\n\n    this.setState({\n      homeDashboardUID: prefs.homeDashboardUID,\n      theme: prefs.theme,\n      timezone: prefs.timezone,\n      weekStart: prefs.weekStart,\n      locale: prefs.locale,\n      dashboards: [DEFAULT_DASHBOARD_HOME, ...dashboards],\n      queryHistory: prefs.queryHistory,\n    });\n  }\n\n  onSubmitForm = async () => {\n    const { homeDashboardUID, theme, timezone, weekStart, locale, queryHistory } = this.state;\n    await this.service.update({ homeDashboardUID, theme, timezone, weekStart, locale, queryHistory });\n    window.location.reload();\n  };\n\n  onThemeChanged = (value: string) => {\n    this.setState({ theme: value });\n  };\n\n  onTimeZoneChanged = (timezone?: string) => {\n    if (!timezone) {\n      return;\n    }\n    this.setState({ timezone: timezone });\n  };\n\n  onWeekStartChanged = (weekStart: string) => {\n    this.setState({ weekStart: weekStart });\n  };\n\n  onHomeDashboardChanged = (dashboardUID: string) => {\n    this.setState({ homeDashboardUID: dashboardUID });\n  };\n\n  onLocaleChanged = (locale: string) => {\n    this.setState({ locale });\n  };\n\n  getFullDashName = (dashboard: SelectableValue<DashboardSearchItem>) => {\n    if (typeof dashboard.folderTitle === 'undefined' || dashboard.folderTitle === '') {\n      return dashboard.title;\n    }\n    return dashboard.folderTitle + ' / ' + dashboard.title;\n  };\n\n  render() {\n    const { theme, timezone, weekStart, homeDashboardUID, locale, dashboards } = this.state;\n    const { disabled } = this.props;\n    const styles = getStyles();\n\n    const homeDashboardTooltip = (\n      <Tooltip\n        content={\n          <Trans id=\"shared-preferences.fields.home-dashboard-tooltip\">\n            Not finding the dashboard you want? Star it first, then it should appear in this select box.\n          </Trans>\n        }\n      >\n        <Icon name=\"info-circle\" />\n      </Tooltip>\n    );\n\n    return (\n      <Form onSubmit={this.onSubmitForm}>\n        {() => {\n          return (\n            <FieldSet label={<Trans id=\"shared-preferences.title\">Preferences</Trans>} disabled={disabled}>\n              <Field label={t({ id: 'shared-preferences.fields.theme-label', message: 'UI Theme' })}>\n                <RadioButtonGroup\n                  options={themes}\n                  value={themes.find((item) => item.value === theme)?.value}\n                  onChange={this.onThemeChanged}\n                />\n              </Field>\n\n              <Field\n                label={\n                  <Label htmlFor=\"home-dashboard-select\">\n                    <span className={styles.labelText}>\n                      <Trans id=\"shared-preferences.fields.home-dashboard-label\">Home Dashboard</Trans>\n                    </span>\n\n                    {homeDashboardTooltip}\n                  </Label>\n                }\n                data-testid=\"User preferences home dashboard drop down\"\n              >\n                <Select\n                  value={dashboards.find((dashboard) => dashboard.uid === homeDashboardUID)}\n                  getOptionValue={(i) => i.uid}\n                  getOptionLabel={this.getFullDashName}\n                  onChange={(dashboard: SelectableValue<DashboardSearchItem>) =>\n                    this.onHomeDashboardChanged(dashboard.uid)\n                  }\n                  options={dashboards}\n                  placeholder={t({\n                    id: 'shared-preferences.fields.home-dashboard-placeholder',\n                    message: 'Choose default dashboard',\n                  })}\n                  inputId=\"home-dashboard-select\"\n                />\n              </Field>\n\n              <Field\n                label={t({ id: 'shared-dashboard.fields.timezone-label', message: 'Timezone' })}\n                data-testid={selectors.components.TimeZonePicker.containerV2}\n              >\n                <TimeZonePicker\n                  includeInternal={true}\n                  value={timezone}\n                  onChange={this.onTimeZoneChanged}\n                  inputId=\"shared-preferences-timezone-picker\"\n                />\n              </Field>\n\n              <Field\n                label={t({ id: 'shared-preferences.fields.week-start-label', message: 'Week start' })}\n                data-testid={selectors.components.WeekStartPicker.containerV2}\n              >\n                <WeekStartPicker\n                  value={weekStart}\n                  onChange={this.onWeekStartChanged}\n                  inputId={'shared-preferences-week-start-picker'}\n                />\n              </Field>\n\n              {i18nFlag ? (\n                <Field\n                  label={\n                    <Label htmlFor=\"locale-select\">\n                      <span className={styles.labelText}>\n                        <Trans id=\"shared-preferences.fields.locale-label\">Language</Trans>\n                      </span>\n                      <FeatureBadge featureState={FeatureState.alpha} />\n                    </Label>\n                  }\n                  data-testid=\"User preferences language drop down\"\n                >\n                  <Select\n                    value={languages.find((lang) => lang.value === locale)}\n                    onChange={(locale: SelectableValue<string>) => this.onLocaleChanged(locale.value ?? '')}\n                    options={languages}\n                    placeholder={t({\n                      id: 'shared-preferences.fields.locale-placeholder',\n                      message: 'Choose language',\n                    })}\n                    inputId=\"locale-select\"\n                  />\n                </Field>\n              ) : null}\n\n              <div className=\"gf-form-button-row\">\n                <Button\n                  type=\"submit\"\n                  variant=\"primary\"\n                  data-testid={selectors.components.UserProfile.preferencesSaveButton}\n                >\n                  <Trans id=\"common.save\">Save</Trans>\n                </Button>\n              </div>\n            </FieldSet>\n          );\n        }}\n      </Form>\n    );\n  }\n}\n\nexport default SharedPreferences;\n\nconst getStyles = stylesFactory(() => {\n  return {\n    labelText: css`\n      margin-right: 6px;\n    `,\n  };\n});\n","import { Trans } from '@lingui/macro';\nimport React, { PureComponent } from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Button, LoadingPlaceholder } from '@grafana/ui';\nimport { UserDTO, UserOrg } from 'app/types';\n\nexport interface Props {\n  user: UserDTO | null;\n  orgs: UserOrg[];\n  isLoading: boolean;\n  setUserOrg: (org: UserOrg) => void;\n}\n\nexport class UserOrganizations extends PureComponent<Props> {\n  render() {\n    const { isLoading, orgs, user } = this.props;\n\n    if (isLoading) {\n      return <LoadingPlaceholder text=\"Loading organizations...\" />;\n    }\n\n    if (orgs.length === 0) {\n      return null;\n    }\n\n    return (\n      <div>\n        <h3 className=\"page-sub-heading\">\n          <Trans id=\"user-orgs.title\">Organizations</Trans>\n        </h3>\n\n        <div className=\"gf-form-group\">\n          <table className=\"filter-table form-inline\" data-testid={selectors.components.UserProfile.orgsTable}>\n            <thead>\n              <tr>\n                <th>\n                  <Trans id=\"user-orgs.name-column\">Name</Trans>\n                </th>\n                <th>\n                  <Trans id=\"user-orgs.role-column\">Role</Trans>\n                </th>\n                <th />\n              </tr>\n            </thead>\n            <tbody>\n              {orgs.map((org: UserOrg, index) => {\n                return (\n                  <tr key={index}>\n                    <td>{org.name}</td>\n                    <td>{org.role}</td>\n                    <td className=\"text-right\">\n                      {org.orgId === user?.orgId ? (\n                        <Button variant=\"secondary\" size=\"sm\" disabled>\n                          <Trans id=\"user-orgs.current-org-button\">Current</Trans>\n                        </Button>\n                      ) : (\n                        <Button\n                          variant=\"secondary\"\n                          size=\"sm\"\n                          onClick={() => {\n                            this.props.setUserOrg(org);\n                          }}\n                        >\n                          <Trans id=\"user-orgs.select-org-button\">Select organisation</Trans>\n                        </Button>\n                      )}\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default UserOrganizations;\n","import { Trans, t } from '@lingui/macro';\nimport React, { FC } from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Button, Field, FieldSet, Form, Icon, Input, Tooltip } from '@grafana/ui';\nimport config from 'app/core/config';\nimport { UserDTO } from 'app/types';\n\nimport { ProfileUpdateFields } from './types';\n\nexport interface Props {\n  user: UserDTO | null;\n  isSavingUser: boolean;\n  updateProfile: (payload: ProfileUpdateFields) => void;\n}\n\nconst { disableLoginForm } = config;\n\nexport const UserProfileEditForm: FC<Props> = ({ user, isSavingUser, updateProfile }) => {\n  const onSubmitProfileUpdate = (data: ProfileUpdateFields) => {\n    updateProfile(data);\n  };\n\n  // check if authLabels is longer than 0 otherwise false\n  const isExternalUser: boolean = (user && user.isExternal) ?? false;\n  const authSource = isExternalUser && user && user.authLabels ? user.authLabels[0] : '';\n  const lockMessage = authSource ? ` (Synced via ${authSource})` : '';\n  const disabledEdit = disableLoginForm || isExternalUser;\n\n  return (\n    <Form onSubmit={onSubmitProfileUpdate} validateOn=\"onBlur\">\n      {({ register, errors }) => {\n        return (\n          <FieldSet label={<Trans id=\"user-profile.title\">Edit profile</Trans>}>\n            <Field\n              label={t({ id: 'user-profile.fields.name-label', message: 'Name' }) + lockMessage}\n              invalid={!!errors.name}\n              error={<Trans id=\"user-profile.fields.name-error\">Name is required</Trans>}\n              disabled={disabledEdit}\n            >\n              <Input\n                {...register('name', { required: true })}\n                id=\"edit-user-profile-name\"\n                placeholder={t({ id: 'user-profile.fields.name-label', message: 'Name' })}\n                defaultValue={user?.name ?? ''}\n                suffix={<InputSuffix />}\n              />\n            </Field>\n\n            <Field\n              label={t({ id: 'user-profile.fields.email-label', message: 'Email' }) + lockMessage}\n              invalid={!!errors.email}\n              error={<Trans id=\"user-profile.fields.email-error\">Email is required</Trans>}\n              disabled={disabledEdit}\n            >\n              <Input\n                {...register('email', { required: true })}\n                id=\"edit-user-profile-email\"\n                placeholder={t({ id: 'user-profile.fields.email-label', message: 'Email' })}\n                defaultValue={user?.email ?? ''}\n                suffix={<InputSuffix />}\n              />\n            </Field>\n\n            <Field\n              label={t({ id: 'user-profile.fields.username-label', message: 'Username' }) + lockMessage}\n              disabled={disabledEdit}\n            >\n              <Input\n                {...register('login')}\n                id=\"edit-user-profile-username\"\n                defaultValue={user?.login ?? ''}\n                placeholder={t({ id: 'user-profile.fields.username-label', message: 'Username' }) + lockMessage}\n                suffix={<InputSuffix />}\n              />\n            </Field>\n\n            <div className=\"gf-form-button-row\">\n              <Button\n                variant=\"primary\"\n                disabled={isSavingUser || disabledEdit}\n                data-testid={selectors.components.UserProfile.profileSaveButton}\n                type=\"submit\"\n              >\n                <Trans id=\"common.save\">Save</Trans>\n              </Button>\n            </div>\n          </FieldSet>\n        );\n      }}\n    </Form>\n  );\n};\n\nexport default UserProfileEditForm;\n\nconst InputSuffix: FC = () => {\n  return disableLoginForm ? (\n    <Tooltip content=\"Login details locked because they are managed in another system.\">\n      <Icon name=\"lock\" />\n    </Tooltip>\n  ) : null;\n};\n","import { t, Trans } from '@lingui/macro';\nimport { withI18n, withI18nProps } from '@lingui/react';\nimport React, { PureComponent } from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Button, Icon, LoadingPlaceholder } from '@grafana/ui';\nimport { UserSession } from 'app/types';\n\ninterface Props extends withI18nProps {\n  sessions: UserSession[];\n  isLoading: boolean;\n  revokeUserSession: (tokenId: number) => void;\n}\n\nclass UserSessions extends PureComponent<Props> {\n  render() {\n    const { isLoading, sessions, revokeUserSession, i18n } = this.props;\n\n    if (isLoading) {\n      return <LoadingPlaceholder text={<Trans id=\"user-sessions.loading\">Loading sessions...</Trans>} />;\n    }\n\n    return (\n      <div>\n        {sessions.length > 0 && (\n          <>\n            <h3 className=\"page-sub-heading\">Sessions</h3>\n            <div className=\"gf-form-group\">\n              <table className=\"filter-table form-inline\" data-testid={selectors.components.UserProfile.sessionsTable}>\n                <thead>\n                  <tr>\n                    <th>\n                      <Trans id=\"user-session.seen-at-column\">Last seen</Trans>\n                    </th>\n                    <th>\n                      <Trans id=\"user-session.created-at-column\">Logged on</Trans>\n                    </th>\n                    <th>\n                      <Trans id=\"user-session.ip-column\">IP address</Trans>\n                    </th>\n                    <th>\n                      <Trans id=\"user-session.browser-column\">Browser &amp; OS</Trans>\n                    </th>\n                    <th></th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {sessions.map((session: UserSession, index) => (\n                    <tr key={index}>\n                      {session.isActive ? <td>Now</td> : <td>{session.seenAt}</td>}\n                      <td>{i18n.date(session.createdAt, { dateStyle: 'long' })}</td>\n                      <td>{session.clientIp}</td>\n                      <td>\n                        {session.browser} on {session.os} {session.osVersion}\n                      </td>\n                      <td>\n                        <Button\n                          size=\"sm\"\n                          variant=\"destructive\"\n                          onClick={() => revokeUserSession(session.id)}\n                          aria-label={t({ id: 'user-session.revoke', message: 'Revoke user session' })}\n                        >\n                          <Icon name=\"power\" />\n                        </Button>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default withI18n()(UserSessions);\n","import React, { PureComponent } from 'react';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\nimport { Team } from 'app/types';\n\nexport interface Props {\n  teams: Team[];\n  isLoading: boolean;\n}\n\nexport class UserTeams extends PureComponent<Props> {\n  render() {\n    const { isLoading, teams } = this.props;\n\n    if (isLoading) {\n      return <LoadingPlaceholder text=\"Loading teams...\" />;\n    }\n\n    if (teams.length === 0) {\n      return null;\n    }\n\n    return (\n      <div>\n        <h3 className=\"page-sub-heading\">Teams</h3>\n        <div className=\"gf-form-group\">\n          <table className=\"filter-table form-inline\" aria-label=\"User teams table\">\n            <thead>\n              <tr>\n                <th />\n                <th>Name</th>\n                <th>Email</th>\n                <th>Members</th>\n              </tr>\n            </thead>\n            <tbody>\n              {teams.map((team: Team, index) => {\n                return (\n                  <tr key={index}>\n                    <td className=\"width-4 text-center\">\n                      <img className=\"filter-table__avatar\" src={team.avatarUrl} alt=\"\" />\n                    </td>\n                    <td>{team.name}</td>\n                    <td>{team.email}</td>\n                    <td>{team.memberCount}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default UserTeams;\n","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { useMount } from 'react-use';\n\nimport { VerticalGroup } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport SharedPreferences from 'app/core/components/SharedPreferences/SharedPreferences';\nimport { StoreState } from 'app/types';\n\nimport UserOrganizations from './UserOrganizations';\nimport UserProfileEditForm from './UserProfileEditForm';\nimport UserSessions from './UserSessions';\nimport { UserTeams } from './UserTeams';\nimport { changeUserOrg, initUserProfilePage, revokeUserSession, updateUserProfile } from './state/actions';\n\nexport interface OwnProps {}\n\nfunction mapStateToProps(state: StoreState) {\n  const userState = state.user;\n  const { user, teams, orgs, sessions, teamsAreLoading, orgsAreLoading, sessionsAreLoading, isUpdating } = userState;\n  return {\n    orgsAreLoading,\n    sessionsAreLoading,\n    teamsAreLoading,\n    orgs,\n    sessions,\n    teams,\n    isUpdating,\n    user,\n  };\n}\n\nconst mapDispatchToProps = {\n  initUserProfilePage,\n  revokeUserSession,\n  changeUserOrg,\n  updateUserProfile,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport function UserProfileEditPage({\n  orgsAreLoading,\n  sessionsAreLoading,\n  teamsAreLoading,\n  initUserProfilePage,\n  orgs,\n  sessions,\n  teams,\n  isUpdating,\n  user,\n  revokeUserSession,\n  changeUserOrg,\n  updateUserProfile,\n}: Props) {\n  useMount(() => initUserProfilePage());\n\n  return (\n    <Page navId=\"profile/settings\">\n      <Page.Contents isLoading={!user}>\n        <VerticalGroup spacing=\"md\">\n          <UserProfileEditForm updateProfile={updateUserProfile} isSavingUser={isUpdating} user={user} />\n          <SharedPreferences resourceUri=\"user\" />\n          <UserTeams isLoading={teamsAreLoading} teams={teams} />\n          <UserOrganizations isLoading={orgsAreLoading} setUserOrg={changeUserOrg} orgs={orgs} user={user} />\n          <UserSessions isLoading={sessionsAreLoading} revokeUserSession={revokeUserSession} sessions={sessions} />\n        </VerticalGroup>\n      </Page.Contents>\n    </Page>\n  );\n}\n\nexport default connector(UserProfileEditPage);\n","import { config } from '@grafana/runtime';\n\nimport { ThunkResult, UserOrg } from '../../../types';\nimport { api } from '../api';\nimport { ChangePasswordFields, ProfileUpdateFields } from '../types';\n\nimport {\n  initLoadOrgs,\n  initLoadSessions,\n  initLoadTeams,\n  orgsLoaded,\n  sessionsLoaded,\n  setUpdating,\n  teamsLoaded,\n  userLoaded,\n  userSessionRevoked,\n} from './reducers';\n\nexport function changePassword(payload: ChangePasswordFields): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(setUpdating({ updating: true }));\n    await api.changePassword(payload);\n    dispatch(setUpdating({ updating: false }));\n  };\n}\n\nexport function initUserProfilePage(): ThunkResult<void> {\n  return async function (dispatch) {\n    await dispatch(loadUser());\n    dispatch(loadTeams());\n    dispatch(loadOrgs());\n    dispatch(loadSessions());\n  };\n}\n\nexport function loadUser(): ThunkResult<void> {\n  return async function (dispatch) {\n    const user = await api.loadUser();\n    dispatch(userLoaded({ user }));\n  };\n}\n\nfunction loadTeams(): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(initLoadTeams());\n    const teams = await api.loadTeams();\n    dispatch(teamsLoaded({ teams }));\n  };\n}\n\nfunction loadOrgs(): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(initLoadOrgs());\n    const orgs = await api.loadOrgs();\n    dispatch(orgsLoaded({ orgs }));\n  };\n}\n\nfunction loadSessions(): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(initLoadSessions());\n    const sessions = await api.loadSessions();\n    dispatch(sessionsLoaded({ sessions }));\n  };\n}\n\nexport function revokeUserSession(tokenId: number): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(setUpdating({ updating: true }));\n    await api.revokeUserSession(tokenId);\n    dispatch(userSessionRevoked({ tokenId }));\n  };\n}\n\nexport function changeUserOrg(org: UserOrg): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(setUpdating({ updating: true }));\n    await api.setUserOrg(org);\n    window.location.href = config.appSubUrl + '/profile';\n  };\n}\n\nexport function updateUserProfile(payload: ProfileUpdateFields): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(setUpdating({ updating: true }));\n    await api.updateUserProfile(payload);\n    await dispatch(loadUser());\n    dispatch(setUpdating({ updating: false }));\n  };\n}\n","import useEffectOnce from './useEffectOnce';\nvar useMount = function (fn) {\n    useEffectOnce(function () {\n        fn();\n    });\n};\nexport default useMount;\n"],"names":["themes","value","label","id","languages","ENGLISH_US","SPANISH_SPAIN","FRENCH_FRANCE","i18nFlag","Boolean","config","DEFAULT_DASHBOARD_HOME","title","tags","type","uid","undefined","uri","url","folderId","folderTitle","folderUid","folderUrl","isStarred","slug","items","SharedPreferences","PureComponent","constructor","props","super","async","homeDashboardUID","theme","timezone","weekStart","locale","queryHistory","this","state","service","update","window","location","reload","setState","dashboardUID","dashboard","PreferencesService","resourceUri","dashboards","homeTab","prefs","load","backendSrv","starred","find","d","missingDash","dashboardUIDs","length","push","render","disabled","styles","getStyles","homeDashboardTooltip","Tooltip","content","Icon","name","Form","onSubmit","onSubmitForm","FieldSet","Field","RadioButtonGroup","options","item","onChange","onThemeChanged","Label","htmlFor","className","labelText","Select","getOptionValue","i","getOptionLabel","getFullDashName","onHomeDashboardChanged","placeholder","inputId","selectors","TimeZonePicker","includeInternal","onTimeZoneChanged","WeekStartPicker","onWeekStartChanged","FeatureBadge","featureState","FeatureState","lang","onLocaleChanged","Button","variant","stylesFactory","css","UserOrganizations","isLoading","orgs","user","LoadingPlaceholder","text","map","org","index","role","orgId","size","onClick","setUserOrg","disableLoginForm","isSavingUser","updateProfile","isExternalUser","isExternal","authSource","authLabels","lockMessage","disabledEdit","data","validateOn","register","errors","invalid","error","Input","required","defaultValue","suffix","InputSuffix","email","login","UserSessions","sessions","revokeUserSession","i18n","session","isActive","seenAt","date","createdAt","dateStyle","clientIp","browser","os","osVersion","withI18n","UserTeams","teams","team","src","avatarUrl","alt","memberCount","mapDispatchToProps","initUserProfilePage","changeUserOrg","updateUserProfile","UserProfileEditPage","orgsAreLoading","sessionsAreLoading","teamsAreLoading","isUpdating","useMount","Page","navId","VerticalGroup","spacing","connect","userState","changePassword","payload","dispatch","setUpdating","updating","api","loadUser","initLoadTeams","teamsLoaded","initLoadOrgs","orgsLoaded","initLoadSessions","sessionsLoaded","userLoaded","tokenId","userSessionRevoked","href","fn"],"sourceRoot":""}