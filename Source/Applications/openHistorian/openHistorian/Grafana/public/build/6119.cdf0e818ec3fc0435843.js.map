{"version":3,"file":"6119.cdf0e818ec3fc0435843.js","mappings":"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CN,MAAOA,EAAM,OAAO,KAAK,UACzB,SAAU,EACZ,CAAC,CACH,E,+tCCpEO,MAAMkC,EAAM,MACNC,EAAM,MACNC,EAAM,MACNC,EAAK,KACLC,EAAM,MACNC,EAAU,UACVC,EAAK,KACLC,EAAO,OACPC,EAAO,OACPC,EAAO,OACPC,GAAW,WACXC,EAAO,OACPC,EAAM,MACNC,EAAS,SACTC,GAAS,SACTC,GAAQ,QACRC,GAAS,SACTC,GAAQ,QACRC,EAAO,OACPC,EAAQ,QACRC,EAAW,WACXC,EAAS,SACTC,GAAQ,QACRC,GAAK,KACLC,GAAQ,QACRC,GAAK,KACLC,GAAO,OACPC,GAAO,OACPC,GAAO,OACPC,GAAO,OACPC,GAAQ,QACRC,GAAM,MACNC,GAAO,OACPC,GAAK,KACLC,GAAK,KACLC,GAAQ,QACRC,GAAQ,QACRC,GAAS,SACTC,GAAS,SACTC,GAAO,OACPC,GAAO,OACPC,GAAO,OACPC,GAAO,OACPC,GAAQ,QACRC,GAAO,OACPC,GAAQ,QACRC,GAAO,OAEPC,GAAW,CACtB/C,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GACAC,EACAC,EACAC,EACAC,GACAC,GACAC,GACAC,GACAC,EACAC,EACAC,EACAC,EACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,EACF,EACaE,GAAwB,CAAChD,EAAKU,EAAQ,EAEtCuC,GAAe,CAAC,GAAGF,GAAU,GAAGC,EAAqB,EAGrDE,GAAsB,CACjC,MACA,YACA,wBACA,oBACA,YACA,MACA,UACA,SACA,UACA,uBACA,gBACA,WACA,UACA,eACA,cACA,QACA,WACA,mBACA,YACA,aACA,QACA,QACA,cACA,WACA,cACA,oBACA,iBACA,gBACA,WACA,OACA,aACA,MACA,SACA,OACA,SACA,MACA,SACA,OACA,aACA,oBACA,YACA,YACA,aACA,iBACA,UACA,aACA,WACA,WACA,WACA,WACA,OACA,MACA,SACA,aACA,cACA,MACA,UACA,UACA,UACA,WACA,UACF,EACaC,GAAkB,CAC7B,QACA,eACA,gBACA,iBACA,iBACA,eACA,eACA,kBACA,aACA,YACA,YACA,iBACA,gBACA,eACA,eACA,cACA,iBACA,aACA,UACA,MACA,WACA,UACA,QACA,YACF,EACaC,GAAwB,CAAC,WAAY,KAAM,SAAU,QAAS,SAAU,MAAO,MAAM,EACrFC,GAAuB,CAClC,SACA,SACA,UACA,OACA,OACA,UACA,SACA,QACA,MACA,WACA,SACA,YACA,SACF,EACaC,GAA+B,CAC1C,aACA,mBACA,UACA,eACA,oBACA,mBACA,WACA,YACA,cACA,sBACA,YACA,WACA,aACA,UACA,WACA,WACA,MACA,aACA,YACA,YACA,UACA,gBACA,qBACA,OACA,WACA,iBACA,iBACA,YACA,mBACA,gBACA,iBACA,qBACA,qBACA,mBACA,SACA,QACA,iBACA,WACA,MACA,UACA,SACA,iBACA,mBACA,mBACA,oBACA,UACA,eACA,mBACA,mBACA,oBACA,mBACA,QACA,mBACA,YACA,cACA,cACA,eACA,iBACA,UACA,aACA,SACA,cACA,MACF,EACaC,GAAiB,CAC5B,YACA,kBACA,oBACA,mBACA,aACA,iBACA,SACF,EACaC,GAAyB,CACpC,MACA,OACA,QACA,OACA,QACA,OACA,QACA,QACA,MACA,SACA,OACA,OACA,UACA,OACA,MACA,OACA,MACA,MACA,UACA,IACA,MACA,QACA,YACA,QACA,WACA,MACA,QACA,QACA,KACA,MACA,QACA,QACA,OACA,WACA,KACA,OACA,WACA,MACA,QACA,UACA,OACA,QACA,SACA,OACA,QACA,MACA,YACA,OACA,SACA,MACA,OACA,OACA,MACA,OACA,UACA,aACA,eACA,eACA,QACA,cACF,EACaC,GAAsB,CAAC,QAAS,YAAa,SAAU,SAAU,cAAe,OAAO,EACvFC,GAAmB,CAC9B,QACA,SACA,aACA,QACA,OACA,cACA,mBACA,MACA,YACA,WACA,SACA,MACA,SACA,WACA,cACA,gBACA,gBACA,UACA,QACA,QACA,OACA,MACA,SACA,cACA,SACA,QACA,OACA,QACA,aACA,OACA,eACA,UACA,WACA,SACA,eACA,iBACA,qBACA,eACA,iBACA,gBACA,SACA,UACA,QACA,OACA,QACA,YACA,UACA,QACA,QACA,aACA,aACA,SACA,YACA,kBACA,YACA,UACA,YACA,aACA,YACA,OACA,gBACA,gBACA,QACA,WACA,OACF,EACaC,GAAmB,CAC9B,YACA,aACA,MACA,OACA,YACA,QACA,eACA,OACA,YACF,EAEaC,GAAgB,CAC3B,GAAGV,GACH,GAAGC,GACH,GAAGC,GACH,GAAGC,GACH,GAAGC,GACH,GAAGC,GACH,GAAGC,GACH,GAAGC,GACH,GAAGC,GACH,GAAGC,EACL,EAGaE,GAAQ,IACRC,GAAgB,KAChBC,EAAkB,MAClBC,GAAY,KACZC,GAAe,IACfC,GAAqB,KACrBC,GAAY,IACZC,GAAkB,KAElBC,GAAoB,CAACnC,GAAIjC,CAAG,EAC5BqE,GAAiB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,MAAO,KAAK,EACvDC,GAAsB,CACjCxC,GACAN,GACAoC,GACAC,GACAC,EACAC,GACAC,GACAC,GACAC,GACAC,GACAvC,GACAP,GACAC,EACF,EAEaiD,GAAgB,CAAC,GAAGF,GAAgB,GAAGD,GAAmB,GAAGE,EAAmB,EAEhFE,GAA+B,CAC1C,aAAc,GACd,WAAY,GACZ,SAAU,CACR,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,kBAAmB,EACnD,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,uBAAwB,EACxD,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,iBAAkB,CACpD,EACA,SAAUxB,GACV,UAAWuB,GACX,iBAAkBZ,GAClB,UAAW,CACT,KAAM,CACJ,CAAE,QAAS,WAAY,EACvB,CAAE,QAAS,aAAc,EACzB,CAAE,QAAS,eAAgB,EAC3B,CAAE,QAAS,UAAW,EACtB,CAAE,QAAS,WAAY,EACvB,CAAE,QAAS,UAAW,EACtB,CAAE,QAA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","sources":["webpack://grafana/./node_modules/@grafana/experimental/dist/esm/QueryEditor/EditorHeader.js","webpack://grafana/./node_modules/@grafana/experimental/dist/esm/QueryEditor/FlexItem.js","webpack://grafana/./node_modules/@grafana/experimental/dist/esm/QueryEditor/InlineSelect.js","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/cloudwatch-logs-sql/language.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/cloudwatch-ppl/language.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/cloudwatch-sql/language.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/dynamic-labels/language.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/logs/language.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/metric-math/language.ts","webpack://grafana/./node_modules/common-tags/es/TemplateTag/TemplateTag.js","webpack://grafana/./node_modules/common-tags/es/inlineArrayTransformer/inlineArrayTransformer.js","webpack://grafana/./node_modules/common-tags/es/stripIndentTransformer/stripIndentTransformer.js","webpack://grafana/./node_modules/common-tags/es/trimResultTransformer/trimResultTransformer.js","webpack://grafana/./node_modules/common-tags/es/commaLists/commaLists.js","webpack://grafana/./node_modules/common-tags/es/commaListsAnd/commaListsAnd.js","webpack://grafana/./node_modules/common-tags/es/commaListsOr/commaListsOr.js","webpack://grafana/./node_modules/common-tags/es/splitStringTransformer/splitStringTransformer.js","webpack://grafana/./node_modules/common-tags/es/removeNonPrintingValuesTransformer/removeNonPrintingValuesTransformer.js","webpack://grafana/./node_modules/common-tags/es/html/html.js","webpack://grafana/./node_modules/common-tags/es/replaceSubstitutionTransformer/replaceSubstitutionTransformer.js","webpack://grafana/./node_modules/common-tags/es/safeHtml/safeHtml.js","webpack://grafana/./node_modules/common-tags/es/replaceResultTransformer/replaceResultTransformer.js","webpack://grafana/./node_modules/common-tags/es/oneLine/oneLine.js","webpack://grafana/./node_modules/common-tags/es/oneLineTrim/oneLineTrim.js","webpack://grafana/./node_modules/common-tags/es/oneLineCommaLists/oneLineCommaLists.js","webpack://grafana/./node_modules/common-tags/es/oneLineCommaListsOr/oneLineCommaListsOr.js","webpack://grafana/./node_modules/common-tags/es/oneLineCommaListsAnd/oneLineCommaListsAnd.js","webpack://grafana/./node_modules/common-tags/es/inlineLists/inlineLists.js","webpack://grafana/./node_modules/common-tags/es/oneLineInlineLists/oneLineInlineLists.js","webpack://grafana/./node_modules/common-tags/es/stripIndent/stripIndent.js","webpack://grafana/./node_modules/common-tags/es/stripIndents/stripIndents.js","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/CheatSheet/sampleQueries.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/cloudwatch-logs/syntax.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/CheatSheet/tokenizer.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/CheatSheet/LogsCheatSheet.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/guards.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/utils/utils.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/hooks.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/standardStatistics.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/shared/Account.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/shared/Dimensions/FilterItem.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/shared/Dimensions/Dimensions.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/shared/MetricStatEditor/MetricStatEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/AnnotationQueryEditor/AnnotationQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/defaultQueries.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/annotationSupport.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/utils/templateVariableUtils.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/cloudwatch-logs/CloudWatchLogsLanguageProvider.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/monarch/LinkedToken.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/monarch/linkedTokenBuilder.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/monarch/types.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/monarch/CompletionItemProvider.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/monarch/commands.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/cloudwatch-logs-sql/definition.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/cloudwatch-logs-sql/completion/types.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/cloudwatch-logs-sql/completion/statementPosition.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/cloudwatch-logs-sql/completion/suggestionKind.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/cloudwatch-logs-sql/completion/CompletionItemProvider.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/cloudwatch-ppl/tokenTypes.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/cloudwatch-ppl/completion/statementPosition.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/cloudwatch-ppl/completion/suggestionKinds.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/cloudwatch-ppl/completion/PPLCompletionItemProvider.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/cloudwatch-sql/completion/types.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/cloudwatch-sql/completion/statementPosition.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/cloudwatch-sql/completion/suggestionKind.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/cloudwatch-sql/completion/tokenUtils.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/cloudwatch-sql/completion/CompletionItemProvider.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/logs/definition.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/logs/completion/types.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/logs/completion/statementPosition.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/logs/completion/suggestionKinds.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/logs/completion/CompletionItemProvider.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/metric-math/completion/types.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/metric-math/completion/statementPosition.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/metric-math/completion/suggestionKind.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/metric-math/completion/CompletionItemProvider.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/memoizedDebounce.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/query-runner/CloudWatchRequest.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/query-runner/CloudWatchAnnotationQueryRunner.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/aws_url.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/utils/datalinks.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/utils/logsRetry.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/utils/rxjs/increasingInterval.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/query-runner/CloudWatchLogsQueryRunner.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/Errors/ThrottlingErrorMessage.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/migrations/metricQueryMigrations.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/query-runner/CloudWatchMetricsQueryRunner.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/resources/ResourcesAPI.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/migrations/variableQueryMigrations.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/VariableQueryEditor/MultiFilterItem.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/VariableQueryEditor/MultiFilter.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/styles.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/VariableQueryEditor/VariableQueryField.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/VariableQueryEditor/VariableTextField.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/VariableQueryEditor/VariableQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/variables.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/datasource.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/shared/LogGroups/LegacyLogGroupSelector.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/shared/LogGroups/LegacyLogGroupNamesSelection.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/shared/LogGroups/Search.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/shared/LogGroups/LogGroupsSelector.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/shared/LogGroups/SelectedLogGroups.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/shared/LogGroups/LogGroupsField.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/ConfigEditor/SecureSocksProxySettingsNewStyling.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/ConfigEditor/XrayLinkConfig.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/ConfigEditor/ConfigEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/MetaInspector/MetaInspector.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/QueryEditor/LogsQueryEditor/CloudWatchLink.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/monarch/register.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/utils/query/getStatsGroups.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/cloudwatch-ppl/definition.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/QueryEditor/LogsQueryEditor/code-editors/PPLQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/QueryEditor/LogsQueryEditor/code-editors/LogsQLCodeEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/QueryEditor/LogsQueryEditor/code-editors/SQLCodeEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/QueryEditor/LogsQueryEditor/LogsQueryField.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/QueryEditor/LogsQueryEditor/LogsQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/migrations/useMigratedMetricsQuery.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/dynamic-labels/CompletionItemProvider.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/dynamic-labels/definition.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/QueryEditor/MetricsQueryEditor/DynamicLabelsField.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/metric-math/definition.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/QueryEditor/MetricsQueryEditor/MathExpressionQueryField.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/cloudwatch-sql/SQLGenerator.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/QueryEditor/MetricsQueryEditor/SQLBuilderEditor/utils.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/QueryEditor/MetricsQueryEditor/SQLBuilderEditor/SQLBuilderSelectRow.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/QueryEditor/MetricsQueryEditor/SQLBuilderEditor/SQLFilter.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/QueryEditor/MetricsQueryEditor/SQLBuilderEditor/SQLGroupBy.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/QueryEditor/MetricsQueryEditor/SQLBuilderEditor/SQLOrderByGroup.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/QueryEditor/MetricsQueryEditor/SQLBuilderEditor/SQLBuilderEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language/cloudwatch-sql/definition.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/QueryEditor/MetricsQueryEditor/SQLCodeEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/QueryEditor/MetricsQueryEditor/MetricsQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/QueryEditor/QueryHeader.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/QueryEditor/QueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/tracking.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/module.tsx","webpack://grafana/./node_modules/jsurl/index.js","webpack://grafana/./node_modules/jsurl/lib/jsurl.js","webpack://grafana/./node_modules/rxjs/dist/esm5/internal/observable/zip.js","webpack://grafana/./node_modules/rxjs/dist/esm5/internal/operators/repeat.js","webpack://grafana/./node_modules/rxjs/dist/esm5/internal/util/argsOrArgArray.js"],"sourcesContent":["import { css } from '@emotion/css';\nimport React from 'react';\nimport { useStyles2 } from '@grafana/ui';\n\nconst EditorHeader = ({ children }) => {\n  const styles = useStyles2(getStyles);\n  return /* @__PURE__ */ React.createElement(\"div\", { className: styles.root }, children);\n};\nconst getStyles = (theme) => ({\n  root: css({\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    alignItems: \"center\",\n    gap: theme.spacing(3),\n    minHeight: theme.spacing(4)\n  })\n});\n\nexport { EditorHeader };\n//# sourceMappingURL=EditorHeader.js.map\n","import React from 'react';\n\nconst FlexItem = ({ grow, shrink }) => {\n  return /* @__PURE__ */ React.createElement(\"div\", { style: { display: \"block\", flexGrow: grow, flexShrink: shrink } });\n};\n\nexport { FlexItem };\n//# sourceMappingURL=FlexItem.js.map\n","import { css, cx } from '@emotion/css';\nimport React, { useState } from 'react';\nimport { useStyles2, Select, SelectContainer as SelectContainer$1 } from '@grafana/ui';\n\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\nfunction InlineSelect(_a) {\n  var _b = _a, { label: labelProp } = _b, props = __objRest(_b, [\"label\"]);\n  const styles = useStyles2(getSelectStyles);\n  const [id] = useState(() => Math.random().toString(16).slice(2));\n  const components = {\n    SelectContainer,\n    ValueContainer,\n    SingleValue: ValueContainer\n  };\n  return /* @__PURE__ */ React.createElement(\"div\", { className: styles.root }, labelProp && /* @__PURE__ */ React.createElement(\"label\", { className: styles.label, htmlFor: id }, labelProp, \":\", \"\\xA0\"), /* @__PURE__ */ React.createElement(Select, __spreadProps(__spreadValues({ openMenuOnFocus: true, inputId: id }, props), { components })));\n}\nconst SelectContainer = (props) => {\n  const { children } = props;\n  const styles = useStyles2(getSelectStyles);\n  return /* @__PURE__ */ React.createElement(SelectContainer$1, __spreadProps(__spreadValues({}, props), { className: cx(props.className, styles.container) }), children);\n};\nconst ValueContainer = (props) => {\n  const { className, children } = props;\n  const styles = useStyles2(getSelectStyles);\n  return /* @__PURE__ */ React.createElement(\"div\", { className: cx(className, styles.valueContainer) }, children);\n};\nconst getSelectStyles = (theme) => ({\n  root: css({\n    display: \"flex\",\n    fontSize: 12,\n    alignItems: \"center\"\n  }),\n  label: css({\n    color: theme.colors.text.secondary,\n    whiteSpace: \"nowrap\"\n  }),\n  container: css({\n    background: \"none\",\n    borderColor: \"transparent\"\n  }),\n  valueContainer: css({\n    display: \"flex\",\n    alignItems: \"center\",\n    flex: \"initial\",\n    color: theme.colors.text.secondary,\n    fontSize: 12\n  })\n});\n\nexport { InlineSelect };\n//# sourceMappingURL=InlineSelect.js.map\n","import type * as monacoType from 'monaco-editor/esm/vs/editor/editor.api';\n\ninterface CloudWatchLanguage extends monacoType.languages.IMonarchLanguage {\n  keywords: string[];\n  operators: string[];\n  builtinFunctions: string[];\n}\n\n/* KEYWORDS */\nexport const ALL = 'ALL';\nexport const AND = 'AND';\nexport const ANY = 'ANY';\nexport const AS = 'AS';\nexport const ASC = 'ASC';\nexport const BETWEEN = 'BETWEEN';\nexport const BY = 'BY';\nexport const CASE = 'CASE';\nexport const CUBE = 'CUBE';\nexport const DESC = 'DESC';\nexport const DISTINCT = 'DISTINCT';\nexport const ELSE = 'ELSE';\nexport const END = 'END';\nexport const ESCAPE = 'ESCAPE';\nexport const EXISTS = 'EXISTS';\nexport const FALSE = 'FALSE';\nexport const FILTER = 'FILTER';\nexport const FIRST = 'FIRST';\nexport const FROM = 'FROM';\nexport const GROUP = 'GROUP';\nexport const GROUPING = 'GROUPING';\nexport const HAVING = 'HAVING';\nexport const ILIKE = 'ILIKE';\nexport const IN = 'IN';\nexport const INNER = 'INNER';\nexport const IS = 'IS';\nexport const JOIN = 'JOIN';\nexport const LAST = 'LAST';\nexport const LEFT = 'LEFT';\nexport const LIKE = 'LIKE';\nexport const LIMIT = 'LIMIT';\nexport const NOT = 'NOT';\nexport const NULL = 'NULL';\nexport const ON = 'ON';\nexport const OR = 'OR';\nexport const ORDER = 'ORDER';\nexport const OUTER = 'OUTER';\nexport const ROLLUP = 'ROLLUP';\nexport const SELECT = 'SELECT';\nexport const SETS = 'SETS';\nexport const SOME = 'SOME';\nexport const THEN = 'THEN';\nexport const TRUE = 'TRUE';\nexport const USING = 'USING';\nexport const WHEN = 'WHEN';\nexport const WHERE = 'WHERE';\nexport const WITH = 'WITH';\n\nexport const KEYWORDS = [\n  ALL,\n  AND,\n  ANY,\n  AS,\n  ASC,\n  BETWEEN,\n  BY,\n  CASE,\n  CUBE,\n  DESC,\n  DISTINCT,\n  ELSE,\n  END,\n  ESCAPE,\n  EXISTS,\n  FALSE,\n  FILTER,\n  FIRST,\n  FROM,\n  GROUP,\n  GROUPING,\n  HAVING,\n  ILIKE,\n  IN,\n  INNER,\n  IS,\n  JOIN,\n  LAST,\n  LEFT,\n  LIKE,\n  LIMIT,\n  NOT,\n  NULL,\n  ON,\n  OR,\n  ORDER,\n  OUTER,\n  ROLLUP,\n  SELECT,\n  SETS,\n  SOME,\n  THEN,\n  TRUE,\n  USING,\n  WHEN,\n  WHERE,\n  WITH,\n];\nexport const AFTER_SELECT_KEYWORDS = [ALL, DISTINCT];\n\nexport const ALL_KEYWORDS = [...KEYWORDS, ...AFTER_SELECT_KEYWORDS];\n\n/* FUNCTIONS */\nexport const AGGREGATE_FUNCTIONS = [\n  'any',\n  'any_value',\n  'approx_count_distinct',\n  'approx_percentile',\n  'array_agg',\n  'avg',\n  'bit_and',\n  'bit_or',\n  'bit_xor',\n  'bitmap_construct_agg',\n  'bitmap_or_agg',\n  'bool_and',\n  'bool_or',\n  'collect_list',\n  'collect_set',\n  'count',\n  'count_if',\n  'count_min_sketch',\n  'covar_pop',\n  'covar_samp',\n  'every',\n  'first',\n  'first_value',\n  'grouping',\n  'grouping_id',\n  'histogram_numeric',\n  'hll_sketch_agg',\n  'hll_union_agg',\n  'kurtosis',\n  'last',\n  'last_value',\n  'max',\n  'max_by',\n  'mean',\n  'median',\n  'min',\n  'min_by',\n  'mode',\n  'percentile',\n  'percentile_approx',\n  'regr_avgx',\n  'regr_avgy',\n  'regr_count',\n  'regr_intercept',\n  'regr_r2',\n  'regr_slope',\n  'regr_sxx',\n  'regr_sxy',\n  'regr_syy',\n  'skewness',\n  'some',\n  'std',\n  'stddev',\n  'stddev_pop',\n  'stddev_samp',\n  'sum',\n  'try_avg',\n  'try_sum',\n  'var_pop',\n  'var_samp',\n  'variance',\n];\nexport const ARRAY_FUNCTIONS = [\n  'array',\n  'array_append',\n  'array_compact',\n  'array_contains',\n  'array_distinct',\n  'array_except',\n  'array_insert',\n  'array_intersect',\n  'array_join',\n  'array_max',\n  'array_min',\n  'array_position',\n  'array_prepend',\n  'array_remove',\n  'array_repeat',\n  'array_union',\n  'arrays_overlap',\n  'arrays_zip',\n  'flatten',\n  'get',\n  'sequence',\n  'shuffle',\n  'slice',\n  'sort_array',\n];\nexport const CONDITIONAL_FUNCTIONS = ['coalesce', 'if', 'ifnull', 'nanvl', 'nullif', 'nvl', 'nvl2'];\nexport const CONVERSION_FUNCTIONS = [\n  'bigint',\n  'binary',\n  'boolean',\n  'cast',\n  'date',\n  'decimal',\n  'double',\n  'float',\n  'int',\n  'smallint',\n  'string',\n  'timestamp',\n  'tinyint',\n];\nexport const DATE_AND_TIMESTAMP_FUNCTIONS = [\n  'add_months',\n  'convert_timezone',\n  'curdate',\n  'current_date',\n  'current_timestamp',\n  'current_timezone',\n  'date_add',\n  'date_diff',\n  'date_format',\n  'date_from_unix_date',\n  'date_part',\n  'date_sub',\n  'date_trunc',\n  'dateadd',\n  'datediff',\n  'datepart',\n  'day',\n  'dayofmonth',\n  'dayofweek',\n  'dayofyear',\n  'extract',\n  'from_unixtime',\n  'from_utc_timestamp',\n  'hour',\n  'last_day',\n  'localtimestamp',\n  'localtimestamp',\n  'make_date',\n  'make_dt_interval',\n  'make_interval',\n  'make_timestamp',\n  'make_timestamp_ltz',\n  'make_timestamp_ntz',\n  'make_ym_interval',\n  'minute',\n  'month',\n  'months_between',\n  'next_day',\n  'now',\n  'quarter',\n  'second',\n  'session_window',\n  'timestamp_micros',\n  'timestamp_millis',\n  'timestamp_seconds',\n  'to_date',\n  'to_timestamp',\n  'to_timestamp_ltz',\n  'to_timestamp_ntz',\n  'to_unix_timestamp',\n  'to_utc_timestamp',\n  'trunc',\n  'try_to_timestamp',\n  'unix_date',\n  'unix_micros',\n  'unix_millis',\n  'unix_seconds',\n  'unix_timestamp',\n  'weekday',\n  'weekofyear',\n  'window',\n  'window_time',\n  'year',\n];\nexport const JSON_FUNCTIONS = [\n  'from_json',\n  'get_json_object',\n  'json_array_length',\n  'json_object_keys',\n  'json_tuple',\n  'schema_of_json',\n  'to_json',\n];\nexport const MATHEMATICAL_FUNCTIONS = [\n  'abs',\n  'acos',\n  'acosh',\n  'asin',\n  'asinh',\n  'atan',\n  'atan2',\n  'atanh',\n  'bin',\n  'bround',\n  'cbrt',\n  'ceil',\n  'ceiling',\n  'conv',\n  'cos',\n  'cosh',\n  'cot',\n  'csc',\n  'degrees',\n  'e',\n  'exp',\n  'expm1',\n  'factorial',\n  'floor',\n  'greatest',\n  'hex',\n  'hypot',\n  'least',\n  'ln',\n  'log',\n  'log10',\n  'log1p',\n  'log2',\n  'negative',\n  'pi',\n  'pmod',\n  'positive',\n  'pow',\n  'power',\n  'radians',\n  'rand',\n  'randn',\n  'random',\n  'rint',\n  'round',\n  'sec',\n  'shiftleft',\n  'sign',\n  'signum',\n  'sin',\n  'sinh',\n  'sqrt',\n  'tan',\n  'tanh',\n  'try_add',\n  'try_divide',\n  'try_multiply',\n  'try_subtract',\n  'unhex',\n  'width_bucket',\n];\nexport const PREDICATE_FUNCTIONS = ['isnan', 'isnotnull', 'isnull', 'regexp', 'regexp_like', 'rlike'];\nexport const STRING_FUNCTIONS = [\n  'ascii',\n  'base64',\n  'bit_length',\n  'btrim',\n  'char',\n  'char_length',\n  'character_length',\n  'chr',\n  'concat_ws',\n  'contains',\n  'decode',\n  'elt',\n  'encode',\n  'endswith',\n  'find_in_set',\n  'format_number',\n  'format_string',\n  'initcap',\n  'instr',\n  'lcase',\n  'left',\n  'len',\n  'length',\n  'levenshtein',\n  'locate',\n  'lower',\n  'lpad',\n  'ltrim',\n  'luhn_check',\n  'mask',\n  'octet_length',\n  'overlay',\n  'position',\n  'printf',\n  'regexp_count',\n  'regexp_extract',\n  'regexp_extract_all',\n  'regexp_instr',\n  'regexp_replace',\n  'regexp_substr',\n  'repeat',\n  'replace',\n  'right',\n  'rpad',\n  'rtrim',\n  'sentences',\n  'soundex',\n  'space',\n  'split',\n  'split_part',\n  'startswith',\n  'substr',\n  'substring',\n  'substring_index',\n  'to_binary',\n  'to_char',\n  'to_number',\n  'to_varchar',\n  'translate',\n  'trim',\n  'try_to_binary',\n  'try_to_number',\n  'ucase',\n  'unbase64',\n  'upper',\n];\nexport const WINDOW_FUNCTIONS = [\n  'cume_dist',\n  'dense_rank',\n  'lag',\n  'lead',\n  'nth_value',\n  'ntile',\n  'percent_rank',\n  'rank',\n  'row_number',\n];\n\nexport const ALL_FUNCTIONS = [\n  ...AGGREGATE_FUNCTIONS,\n  ...ARRAY_FUNCTIONS,\n  ...CONDITIONAL_FUNCTIONS,\n  ...CONVERSION_FUNCTIONS,\n  ...DATE_AND_TIMESTAMP_FUNCTIONS,\n  ...JSON_FUNCTIONS,\n  ...MATHEMATICAL_FUNCTIONS,\n  ...PREDICATE_FUNCTIONS,\n  ...STRING_FUNCTIONS,\n  ...WINDOW_FUNCTIONS,\n];\n\n/* OPERATORS */\nexport const EQUAL = '=';\nexport const DOUBLE_EQUALS = '==';\nexport const NULL_SAFE_EQUAL = '<=>';\nexport const NOT_EQUAL = '!=';\nexport const GREATER_THAN = '>';\nexport const GREATER_THAN_EQUAL = '>=';\nexport const LESS_THAN = '<';\nexport const LESS_THAN_EQUAL = '<=';\n\nexport const LOGICAL_OPERATORS = [OR, AND];\nexport const MATH_OPERATORS = ['*', '/', '+', '-', '%', 'div', 'mod'];\nexport const PREDICATE_OPERATORS = [\n  NOT,\n  IS,\n  EQUAL,\n  DOUBLE_EQUALS,\n  NULL_SAFE_EQUAL,\n  NOT_EQUAL,\n  GREATER_THAN,\n  GREATER_THAN_EQUAL,\n  LESS_THAN,\n  LESS_THAN_EQUAL,\n  LIKE,\n  ILIKE,\n  IN,\n];\n\nexport const ALL_OPERATORS = [...MATH_OPERATORS, ...LOGICAL_OPERATORS, ...PREDICATE_OPERATORS];\n\nexport const language: CloudWatchLanguage = {\n  defaultToken: '',\n  ignoreCase: true,\n  brackets: [\n    { open: '[', close: ']', token: 'delimiter.square' },\n    { open: '(', close: ')', token: 'delimiter.parenthesis' },\n    { open: '{', close: '}', token: 'delimiter.curly' },\n  ],\n  keywords: ALL_KEYWORDS,\n  operators: ALL_OPERATORS,\n  builtinFunctions: ALL_FUNCTIONS,\n  tokenizer: {\n    root: [\n      { include: '@comments' },\n      { include: '@whitespace' },\n      { include: '@customParams' },\n      { include: '@numbers' },\n      { include: '@binaries' },\n      { include: '@strings' },\n      { include: '@strings' },\n      { include: '@complexIdentifiers' },\n      [/[;,.]/, 'delimiter'],\n      [/[\\(\\)\\[\\]\\{\\}]/, '@brackets'],\n      [\n        /[\\w@#$]+/,\n        {\n          cases: {\n            '@operators': 'operator',\n            '@builtinFunctions': 'predefined',\n            '@keywords': 'keyword',\n            '@default': 'identifier',\n          },\n        },\n      ],\n      [/[<>=!%&+\\-*/|~^]/, 'operator'],\n    ],\n    whitespace: [[/[\\s\\t\\r\\n]+/, 'white']],\n    comments: [\n      [/--+.*/, 'comment'],\n      [/\\/\\*/, { token: 'comment.quote', next: '@comment' }],\n    ],\n    comment: [\n      [/[^*/]+/, 'comment'],\n      [/\\*\\//, { token: 'comment.quote', next: '@pop' }],\n      [/./, 'comment'],\n    ],\n    customParams: [\n      [/\\${[A-Za-z0-9._-]*}/, 'variable'],\n      [/\\@\\@{[A-Za-z0-9._-]*}/, 'variable'],\n    ],\n    numbers: [\n      [/0[xX][0-9a-fA-F]*/, 'number'],\n      [/[$][+-]*\\d*(\\.\\d*)?/, 'number'],\n      [/((\\d+(\\.\\d*)?)|(\\.\\d+))([eE][\\-+]?\\d+)?/, 'number'],\n    ],\n    binaries: [\n      [/X'/i, { token: 'binary', next: '@binarySingle' }],\n      [/X\"/i, { token: 'binary', next: '@binaryDouble' }],\n    ],\n    binarySingle: [\n      [/\\d+/, 'binary.escape'],\n      [/''/, 'binary'],\n      [/'/, { token: 'binary', next: '@pop' }],\n    ],\n    binaryDouble: [\n      [/\\d+/, 'binary.escape'],\n      [/\"\"/, 'binary'],\n      [/\"/, { token: 'binary', next: '@pop' }],\n    ],\n    strings: [\n      [/'/, { token: 'string', next: '@stringSingle' }],\n      [/R'/i, { token: 'string', next: '@stringSingle' }],\n      [/\"/, { token: 'string', next: '@stringDouble' }],\n      [/R\"/i, { token: 'string', next: '@stringDouble' }],\n    ],\n    stringSingle: [\n      [/[^']+/, 'string.escape'],\n      [/''/, 'string'],\n      [/'/, { token: 'string', next: '@pop' }],\n    ],\n    stringDouble: [\n      [/[^\"]+/, 'string.escape'],\n      [/\"\"/, 'string'],\n      [/\"/, { token: 'string', next: '@pop' }],\n    ],\n    complexIdentifiers: [[/`/, { token: 'identifier', next: '@quotedIdentifier' }]],\n    quotedIdentifier: [\n      [/[^`]+/, 'identifier'],\n      [/``/, 'identifier'],\n      [/`/, { token: 'identifier', next: '@pop' }],\n    ],\n  },\n};\n\nexport const conf: monacoType.languages.LanguageConfiguration = {\n  comments: {\n    lineComment: '--',\n    blockComment: ['/*', '*/'],\n  },\n  brackets: [\n    ['{', '}'],\n    ['[', ']'],\n    ['(', ')'],\n  ],\n  autoClosingPairs: [\n    { open: '{', close: '}' },\n    { open: '[', close: ']' },\n    { open: '(', close: ')' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n    { open: '`', close: '`' },\n  ],\n  surroundingPairs: [\n    { open: '{', close: '}' },\n    { open: '[', close: ']' },\n    { open: '(', close: ')' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n    { open: '`', close: '`' },\n  ],\n};\n","import type * as monacoType from 'monaco-editor/esm/vs/editor/editor.api';\n\n// OpenSearch PPL syntax: https://github.com/opensearch-project/opensearch-spark/blob/0.5/ppl-spark-integration/src/main/antlr4/OpenSearchPPLParser.g4\ninterface CloudWatchPPLLanguage extends monacoType.languages.IMonarchLanguage {\n  commands: string[];\n  operators: string[];\n  builtinFunctions: string[];\n}\n\nexport const CLOUDWATCH_PPL_LANGUAGE_DEFINITION_ID = 'logs-ppl';\n\n// COMMANDS\nexport const WHERE = 'where';\nexport const FIELDS = 'fields';\nexport const DEDUP = 'dedup';\nexport const STATS = 'stats';\nexport const EVENTSTATS = 'eventstats';\nexport const SORT = 'sort';\nexport const EVAL = 'eval';\nexport const HEAD = 'head';\nexport const TOP = 'top';\nexport const RARE = 'rare';\nexport const PARSE = 'parse';\n\nexport const PPL_COMMANDS = [WHERE, FIELDS, STATS, EVENTSTATS, DEDUP, SORT, TOP, RARE, HEAD, EVAL, PARSE];\n\n// KEYWORDS\nexport const AS = 'as';\nexport const BY = 'by';\nexport const BETWEEN = 'between';\nexport const FROM = 'from';\n\n// PARAMETERS\nconst KEEP_EMPTY = 'keepempty';\nconst CONSECUTIVE = 'consecutive';\nconst PARTITIONS = 'partitions';\nconst ALLNUM = 'allnum';\nconst DELIM = 'delim';\nconst DEDUP_SPLITVALUES = 'dedup_splitvalues';\n\nexport const STATS_PARAMETERS = [PARTITIONS, ALLNUM, DELIM, DEDUP_SPLITVALUES];\nexport const DEDUP_PARAMETERS = [KEEP_EMPTY, CONSECUTIVE];\nexport const PARAMETERS_WITH_BOOLEAN_VALUES = [ALLNUM, DEDUP_SPLITVALUES, KEEP_EMPTY, CONSECUTIVE];\nexport const BOOLEAN_LITERALS = ['true', 'false'];\nexport const IN = 'in';\n\nexport const ALL_KEYWORDS = [...STATS_PARAMETERS, ...DEDUP_PARAMETERS, ...BOOLEAN_LITERALS, AS, BY, IN, BETWEEN, FROM];\n\n// FUNCTIONS\nexport const MATH_FUNCTIONS = [\n  'abs',\n  'acos',\n  'asin',\n  'atan',\n  'atan2',\n  'ceil',\n  'ceiling',\n  'conv',\n  'cos',\n  'cot',\n  'crc32',\n  'degrees',\n  'e',\n  'exp',\n  'floor',\n  'ln',\n  'log',\n  'log2',\n  'log10',\n  'mod',\n  'pi',\n  'pow',\n  'power',\n  'radians',\n  'rand',\n  'round',\n  'sign',\n  'sin',\n  'sqrt',\n  'cbrt',\n];\nexport const DATE_TIME_FUNCTIONS = [\n  'datediff',\n  'day',\n  'dayofmonth',\n  'dayofweek',\n  'dayofyear',\n  'hour',\n  'minute',\n  'second',\n  'month',\n  'quarter',\n  'weekday',\n  'weekofyear',\n  'year',\n  'now',\n  'curdate',\n  'current_date',\n];\nexport const TEXT_FUNCTIONS = [\n  'concat',\n  'concat_ws',\n  'length',\n  'lower',\n  'ltrim',\n  'reverse',\n  'rtrim',\n  'right',\n  'substring',\n  'substr',\n  'trim',\n  'upper',\n];\nexport const SPAN = 'span';\nexport const POSITION = 'position';\nexport const CONDITION_FUNCTIONS = ['like', 'isnull', 'isnotnull', 'exists', 'ifnull', 'nullif', 'if', 'ispresent'];\nexport const SORT_FIELD_FUNCTIONS = ['auto', 'str', 'ip', 'num'];\nexport const PPL_FUNCTIONS = [...MATH_FUNCTIONS, ...DATE_TIME_FUNCTIONS, ...TEXT_FUNCTIONS];\nexport const EVAL_FUNCTIONS: string[] = [...PPL_FUNCTIONS, POSITION];\nexport const STATS_FUNCTIONS = [\n  'avg',\n  'count',\n  'sum',\n  'min',\n  'max',\n  'stddev_samp',\n  'stddev_pop',\n  'percentile',\n  'percentile_approx',\n  'distinct_count',\n  'dc',\n];\n\nexport const ALL_FUNCTIONS = [\n  ...PPL_FUNCTIONS,\n  ...STATS_FUNCTIONS,\n  ...CONDITION_FUNCTIONS,\n  ...SORT_FIELD_FUNCTIONS,\n  POSITION,\n  SPAN,\n];\n\n// OPERATORS\nexport const PLUS = '+';\nexport const MINUS = '-';\nexport const NOT = 'not';\n\nexport const FIELD_OPERATORS = [PLUS, MINUS];\nexport const ARITHMETIC_OPERATORS = [PLUS, MINUS, '*', '/', '%'];\nexport const COMPARISON_OPERATORS = ['>', '>=', '<', '!=', '<=', '='];\nexport const LOGICAL_EXPRESSION_OPERATORS = ['and', 'or', 'xor', NOT];\nexport const PPL_OPERATORS = [...ARITHMETIC_OPERATORS, ...LOGICAL_EXPRESSION_OPERATORS, ...COMPARISON_OPERATORS];\n\nexport const language: CloudWatchPPLLanguage = {\n  defaultToken: '',\n  id: CLOUDWATCH_PPL_LANGUAGE_DEFINITION_ID,\n  ignoreCase: true,\n  commands: PPL_COMMANDS,\n  operators: PPL_OPERATORS,\n  keywords: ALL_KEYWORDS,\n  builtinFunctions: ALL_FUNCTIONS,\n  brackets: [{ open: '(', close: ')', token: 'delimiter.parenthesis' }],\n  tokenizer: {\n    root: [\n      { include: '@comments' },\n      { include: '@regexes' },\n      { include: '@whitespace' },\n      { include: '@variables' },\n      { include: '@strings' },\n      { include: '@numbers' },\n\n      [/[,.:]/, 'delimiter'],\n      [/\\|/, 'delimiter.pipe'],\n      [/[()\\[\\]]/, 'delimiter.parenthesis'],\n\n      [\n        /[\\w@#$]+/,\n        {\n          cases: {\n            '@commands': 'keyword.command',\n            '@keywords': 'keyword',\n            '@builtinFunctions': 'predefined',\n            '@operators': 'operator',\n            '@default': 'identifier',\n          },\n        },\n      ],\n      [/[+\\-*/^%=!<>]/, 'operator'], // handles the math operators\n      [/[,.:]/, 'operator'],\n    ],\n    // template variable syntax\n    variables: [\n      [/\\${/, { token: 'variable', next: '@variable_bracket' }],\n      [/\\$[a-zA-Z0-9-_]+/, 'variable'],\n    ],\n    variable_bracket: [\n      [/[a-zA-Z0-9-_:]+/, 'variable'],\n      [/}/, { token: 'variable', next: '@pop' }],\n    ],\n    whitespace: [[/\\s+/, 'white']],\n    comments: [\n      [/^#.*/, 'comment'],\n      [/\\s+#.*/, 'comment'],\n    ],\n    numbers: [\n      [/0[xX][0-9a-fA-F]*/, 'number'],\n      [/[$][+-]*\\d*(\\.\\d*)?/, 'number'],\n      [/((\\d+(\\.\\d*)?)|(\\.\\d+))([eE][\\-+]?\\d+)?/, 'number'],\n    ],\n    strings: [\n      [/'/, { token: 'string', next: '@string' }],\n      [/\"/, { token: 'string', next: '@string_double' }],\n      [/`/, { token: 'string.backtick', next: '@string_backtick' }],\n    ],\n    string: [\n      [/[^']+/, 'string'],\n      [/''/, 'string'],\n      [/'/, { token: 'string', next: '@pop' }],\n    ],\n    string_double: [\n      [/[^\\\\\"]+/, 'string'],\n      [/\"/, 'string', '@pop'],\n    ],\n    string_backtick: [\n      [/[^\\\\`]+/, 'string.backtick'],\n      [/`/, 'string.backtick', '@pop'],\n    ],\n    regexes: [[/\\/.*?\\/(?!\\s*\\d)/, 'regexp']],\n  },\n};\n\nexport const conf: monacoType.languages.LanguageConfiguration = {\n  brackets: [['(', ')']],\n  autoClosingPairs: [\n    { open: '(', close: ')' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n    { open: '`', close: '`' },\n  ],\n  surroundingPairs: [\n    { open: '(', close: ')' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n    { open: '`', close: '`' },\n  ],\n};\n","import type * as monacoType from 'monaco-editor/esm/vs/editor/editor.api';\n\ninterface CloudWatchLanguage extends monacoType.languages.IMonarchLanguage {\n  keywords: string[];\n  operators: string[];\n  builtinFunctions: string[];\n}\n\nexport const SELECT = 'SELECT';\nexport const FROM = 'FROM';\nexport const WHERE = 'WHERE';\nexport const GROUP = 'GROUP';\nexport const ORDER = 'ORDER';\nexport const BY = 'BY';\nexport const DESC = 'DESC';\nexport const ASC = 'ASC';\nexport const LIMIT = 'LIMIT';\nexport const WITH = 'WITH';\nexport const SCHEMA = 'SCHEMA';\n\nexport const KEYWORDS = [SELECT, FROM, WHERE, GROUP, ORDER, BY, DESC, ASC, LIMIT, WITH, SCHEMA];\nexport const STATISTICS = ['AVG', 'COUNT', 'MAX', 'MIN', 'SUM'];\n\nexport const AND = 'AND';\nexport const LOGICAL_OPERATORS = [AND];\n\nexport const EQUALS = '=';\nexport const NOT_EQUALS = '!=';\nexport const COMPARISON_OPERATORS = [EQUALS, NOT_EQUALS];\n\nexport const language: CloudWatchLanguage = {\n  defaultToken: '',\n  tokenPostfix: '.sql',\n  ignoreCase: true,\n  brackets: [\n    { open: '[', close: ']', token: 'delimiter.square' },\n    { open: '(', close: ')', token: 'delimiter.parenthesis' },\n  ],\n  keywords: KEYWORDS,\n  operators: LOGICAL_OPERATORS,\n  builtinFunctions: STATISTICS,\n  tokenizer: {\n    root: [\n      [/\\$[a-zA-Z0-9-_]+/, 'variable'],\n      { include: '@comments' },\n      { include: '@whitespace' },\n      { include: '@numbers' },\n      { include: '@strings' },\n      { include: '@complexIdentifiers' },\n      [/[;,.]/, 'delimiter'],\n      [/[()]/, '@brackets'],\n      [\n        /[\\w@#$]+/,\n        {\n          cases: {\n            '@keywords': 'keyword',\n            '@operators': 'operator',\n            '@builtinFunctions': 'predefined',\n            '@default': 'identifier',\n          },\n        },\n      ],\n      [/[=!%&+\\-*/|~^]/, 'operator'], // TODO: strip these options\n    ],\n    whitespace: [[/\\s+/, 'white']],\n    comments: [[/--+.*/, 'comment']],\n    comment: [\n      [/[^*/]+/, 'comment'],\n      [/./, 'comment'],\n    ],\n    numbers: [\n      [/0[xX][0-9a-fA-F]*/, 'number'],\n      [/[$][+-]*\\d*(\\.\\d*)?/, 'number'],\n      [/((\\d+(\\.\\d*)?)|(\\.\\d+))([eE][\\-+]?\\d+)?/, 'number'],\n    ],\n    strings: [\n      [/N'/, { token: 'string', next: '@string' }],\n      [/'/, { token: 'string', next: '@string' }],\n      [/\"/, { token: 'type', next: '@string_double' }],\n    ],\n    string: [\n      [/[^']+/, 'string'],\n      [/''/, 'string'],\n      [/'/, { token: 'string', next: '@pop' }],\n    ],\n    string_double: [\n      [/[^\\\\\"]+/, 'type'],\n      [/\"/, 'type', '@pop'],\n    ],\n    complexIdentifiers: [\n      [/\\[/, { token: 'identifier.quote', next: '@bracketedIdentifier' }],\n      [/\"/, { token: 'identifier.quote', next: '@quotedIdentifier' }],\n    ],\n    bracketedIdentifier: [\n      [/[^\\]]+/, 'identifier'],\n      [/]]/, 'identifier'],\n      [/]/, { token: 'identifier.quote', next: '@pop' }],\n    ],\n    quotedIdentifier: [\n      [/[^\"]+/, 'identifier'],\n      [/\"\"/, 'identifier'],\n      [/\"/, { token: 'identifier.quote', next: '@pop' }],\n    ],\n  },\n};\n\nexport const conf: monacoType.languages.LanguageConfiguration = {\n  comments: {\n    lineComment: '--',\n    blockComment: ['/*', '*/'],\n  },\n  brackets: [\n    ['{', '}'],\n    ['[', ']'],\n    ['(', ')'],\n  ],\n  autoClosingPairs: [\n    { open: '{', close: '}' },\n    { open: '[', close: ']' },\n    { open: '(', close: ')' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n  ],\n  surroundingPairs: [\n    { open: '{', close: '}' },\n    { open: '[', close: ']' },\n    { open: '(', close: ')' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n  ],\n};\n","import type * as monacoType from 'monaco-editor/esm/vs/editor/editor.api';\n\nimport { config } from '@grafana/runtime';\n\n// Dynamic labels: https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html\nexport const DYNAMIC_LABEL_PATTERNS = [\n  '${DATAPOINT_COUNT}',\n  '${FIRST}',\n  '${FIRST_LAST_RANGE}',\n  '${FIRST_LAST_TIME_RANGE}',\n  '${FIRST_TIME}',\n  '${FIRST_TIME_RELATIVE}',\n  '${LABEL}',\n  '${LAST}',\n  '${LAST_TIME}',\n  '${LAST_TIME_RELATIVE}',\n  '${MAX}',\n  '${MAX_TIME}',\n  '${MAX_TIME_RELATIVE}',\n  '${MIN}',\n  '${MIN_MAX_RANGE}',\n  '${MIN_MAX_TIME_RANGE}',\n  '${MIN_TIME}',\n  '${MIN_TIME_RELATIVE}',\n  \"${PROP('AccountId')}\",\n  \"${PROP('MetricName')}\",\n  \"${PROP('Namespace')}\",\n  \"${PROP('Period')}\",\n  \"${PROP('Region')}\",\n  \"${PROP('Stat')}\",\n  '${SUM}',\n  ...(config.featureToggles.cloudWatchCrossAccountQuerying ? [\"${PROP('AccountLabel')}\"] : []),\n];\n\nexport const language: monacoType.languages.IMonarchLanguage = {\n  id: 'dynamicLabels',\n  ignoreCase: false,\n  tokenizer: {\n    root: [\n      { include: '@whitespace' },\n      { include: '@builtInFunctions' },\n      { include: '@string' },\n      [/\\$\\{PROP\\('Dim.[a-zA-Z0-9-_]?.*'\\)\\}+/, 'predefined'], //custom handling for dimension patterns\n    ],\n    builtInFunctions: [[DYNAMIC_LABEL_PATTERNS.map(escapeRegExp).join('|'), 'predefined']],\n    whitespace: [[/\\s+/, 'white']],\n    string: [],\n  },\n};\n\nexport const conf: monacoType.languages.LanguageConfiguration = {};\n\nfunction escapeRegExp(string: string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n","import type * as monacoType from 'monaco-editor/esm/vs/editor/editor.api';\n\n// CloudWatch Logs: https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_QuerySyntax.html\ninterface CloudWatchLogsLanguage extends monacoType.languages.IMonarchLanguage {\n  commands: string[];\n  operators: string[];\n  builtinFunctions: string[];\n}\n\nexport const DISPLAY = 'display';\nexport const FIELDS = 'fields';\nexport const FILTER = 'filter';\nexport const PATTERN = 'pattern';\nexport const STATS = 'stats';\nexport const SORT = 'sort';\nexport const LIMIT = 'limit';\nexport const PARSE = 'parse';\nexport const DEDUP = 'dedup';\nexport const LOGS_COMMANDS = [DISPLAY, FIELDS, FILTER, PATTERN, STATS, SORT, LIMIT, PARSE, DEDUP];\n\nexport const LOGS_LOGIC_OPERATORS = ['and', 'or', 'not'];\n\nexport const LOGS_FUNCTION_OPERATORS = [\n  // math\n  'abs',\n  'ceil',\n  'floor',\n  'greatest',\n  'least',\n  'log',\n  'sqrt',\n  // datetime\n  'bin',\n  'datefloor',\n  'dateceil',\n  'fromMillis',\n  'toMillis',\n  // general\n  'ispresent',\n  'coalesce',\n  // ip\n  'isValidIp',\n  'isValidIpV4',\n  'isValidIpV6',\n  'isIpInSubnet',\n  'isIpv4InSubnet',\n  'isIpv6InSubnet',\n  // stats aggregation\n  'avg',\n  'count',\n  'count_distinct',\n  'max',\n  'min',\n  'pct',\n  'stddev',\n  'sum',\n  // stats non-aggregation\n  'earliest',\n  'latest',\n  'sortsFirst',\n  'sortsLast',\n  // strings\n  'isempty',\n  'isblank',\n  'concat',\n  'ltrim',\n  'rtrim',\n  'trim',\n  'strlen',\n  'toupper',\n  'tolower',\n  'substr',\n  'replace',\n  'strcontains',\n  // field\n  'unmask',\n];\n\nexport const SORT_DIRECTION_KEYWORDS = ['asc', 'desc'];\nexport const LOGS_KEYWORDS = ['like', 'by', 'in', 'as', ...SORT_DIRECTION_KEYWORDS];\n\nexport const language: CloudWatchLogsLanguage = {\n  defaultToken: 'invalid',\n  id: 'logs',\n  ignoreCase: true,\n  brackets: [\n    { open: '[', close: ']', token: 'delimiter.square' },\n    { open: '(', close: ')', token: 'delimiter.parenthesis' },\n  ],\n  commands: [...LOGS_COMMANDS, ...LOGS_KEYWORDS],\n  operators: LOGS_LOGIC_OPERATORS,\n  builtinFunctions: LOGS_FUNCTION_OPERATORS,\n  tokenizer: {\n    root: [\n      { include: '@comments' },\n      { include: '@regexes' },\n      { include: '@whitespace' },\n      { include: '@fieldNames' },\n      { include: '@variables' },\n      { include: '@strings' },\n      { include: '@numbers' },\n\n      [/\\|\\|/, 'operator'],\n      [/[,.:\\|]/, 'delimiter'],\n      [/[()\\[\\]]/, 'delimiter.parenthesis'],\n      [\n        /[\\w@#$]+/,\n        {\n          cases: {\n            '@commands': 'keyword',\n            '@builtinFunctions': 'predefined',\n            '@operators': 'operator',\n            '@default': 'identifier',\n          },\n        },\n      ],\n      [/[+\\-*/^%=!<>]/, 'operator'], // handles the math operators\n    ],\n    variables: [\n      [/\\${/, { token: 'variable', next: '@variable_bracket' }],\n      [/\\$[a-zA-Z0-9-_]+/, 'variable'],\n    ],\n    variable_bracket: [\n      [/[a-zA-Z0-9-_:]+/, 'variable'],\n      [/}/, { token: 'variable', next: '@pop' }],\n    ],\n    fieldNames: [[/(@[_a-zA-Z]+[_.0-9a-zA-Z]*)|(`((\\\\`)|([^`]))*?`)/, 'identifier']],\n    whitespace: [[/\\s+/, 'white']],\n    comments: [\n      [/^#.*/, 'comment'],\n      [/\\s+#.*/, 'comment'],\n    ],\n    numbers: [\n      [/0[xX][0-9a-fA-F]*/, 'number'],\n      [/[$][+-]*\\d*(\\.\\d*)?/, 'number'],\n      [/((\\d+(\\.\\d*)?)|(\\.\\d+))([eE][\\-+]?\\d+)?/, 'number'],\n    ],\n    strings: [\n      [/'/, { token: 'string', next: '@string' }],\n      [/\"/, { token: 'string', next: '@string_double' }],\n      [/`/, { token: 'identifier', next: '@string_backtick' }],\n    ],\n    string: [\n      [/[^']+/, 'string'],\n      [/''/, 'string'],\n      [/'/, { token: 'string', next: '@pop' }],\n    ],\n    string_double: [\n      [/[^\\\\\"]+/, 'string'],\n      [/\"/, 'string', '@pop'],\n    ],\n    string_backtick: [\n      [/[^\\\\`]+/, 'identifier'],\n      [/`/, 'identifier', '@pop'],\n    ],\n    regexes: [[/\\/.*?\\/(?=\\s*\\||\\s*$|,)/, 'regexp']],\n  },\n};\n\nexport const conf: monacoType.languages.LanguageConfiguration = {\n  comments: {\n    lineComment: '#',\n  },\n  brackets: [\n    ['{', '}'],\n    ['[', ']'],\n    ['(', ')'],\n  ],\n  autoClosingPairs: [\n    { open: '{', close: '}' },\n    { open: '[', close: ']' },\n    { open: '(', close: ')' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n    { open: '`', close: '`' },\n  ],\n  surroundingPairs: [\n    { open: '{', close: '}' },\n    { open: '[', close: ']' },\n    { open: '(', close: ')' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n    { open: '`', close: '`' },\n  ],\n};\n","import type * as monacoType from 'monaco-editor/esm/vs/editor/editor.api';\n\n// Metric Math: https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html\nexport const METRIC_MATH_FNS = [\n  'ABS',\n  'ANOMALY_DETECTION_BAND',\n  'AVG',\n  'CEIL',\n  'DATAPOINT_COUNT',\n  'DB_PERF_INSIGHTS',\n  'DIFF',\n  'DIFF_TIME',\n  'FILL',\n  'FIRST',\n  'LAST',\n  'FLOOR',\n  'IF',\n  'INSIGHT_RULE_METRIC',\n  'LOG',\n  'LOG10',\n  'MAX',\n  'METRIC_COUNT',\n  'METRICS',\n  'MIN',\n  'MINUTE',\n  'HOUR',\n  'DAY',\n  'DATE',\n  'MONTH',\n  'YEAR',\n  'EPOCH',\n  'PERIOD',\n  'RATE',\n  'REMOVE_EMPTY',\n  'RUNNING_SUM',\n  'SEARCH',\n  'SERVICE_QUOTA',\n  'SLICE',\n  'SORT',\n  'STDDEV',\n  'SUM',\n  'TIME_SERIES',\n];\n\nexport const METRIC_MATH_STATISTIC_KEYWORD_STRINGS = ['Average', 'Maximum', 'Minimum', 'Sum', 'SampleCount']; // second arguments to SEARCH function\n\nexport const METRIC_MATH_KEYWORDS = ['REPEAT', 'LINEAR', 'ASC', 'DSC']; // standalone magic arguments to functions\n\nexport const METRIC_MATH_OPERATORS = [\n  '+',\n  '-',\n  '*',\n  '/',\n  '^',\n  '==',\n  '!=',\n  '<=',\n  '>=',\n  '<',\n  '>',\n  'AND',\n  '&&',\n  'OR',\n  '||',\n];\n\nexport const METRIC_MATH_PERIODS = [10, 60, 300, 900, 3000, 21600, 86400];\n\nexport const language: monacoType.languages.IMonarchLanguage = {\n  id: 'metricMath',\n  ignoreCase: false,\n  brackets: [\n    { open: '[', close: ']', token: 'delimiter.square' },\n    { open: '(', close: ')', token: 'delimiter.parenthesis' },\n    { open: '{', close: '}', token: 'delimiter.curly' },\n  ],\n  tokenizer: {\n    root: [{ include: '@nonNestableStates' }, { include: '@strings' }],\n    nonNestableStates: [\n      { include: '@variables' },\n      { include: '@macros' },\n      { include: '@whitespace' },\n      { include: '@numbers' },\n      { include: '@assignment' },\n      { include: '@keywords' },\n      { include: '@operators' },\n      { include: '@builtInFunctions' },\n      [/[;,.]/, 'delimiter'],\n      [/[(){}\\[\\]]/, '@brackets'], // [], (), {} are all brackets\n    ],\n    keywords: [[METRIC_MATH_KEYWORDS.map(escapeRegExp).join('|'), 'keyword']],\n    operators: [[METRIC_MATH_OPERATORS.map(escapeRegExp).join('|'), 'operator']],\n    builtInFunctions: [[METRIC_MATH_FNS.map(escapeRegExp).join('|'), 'predefined']],\n    variables: [\n      [/\\$[a-zA-Z0-9-_]+/, 'variable'], // $ followed by any letter/number we assume could be grafana template variable\n    ],\n    macros: [[/\\$__[a-zA-Z0-9-_]+/, 'type']], // example: $__period_auto\n    whitespace: [[/\\s+/, 'white']],\n    assignment: [[/=/, 'tag']],\n    numbers: [\n      [/0[xX][0-9a-fA-F]*/, 'number'],\n      [/[$][+-]*\\d*(\\.\\d*)?/, 'number'],\n      [/((\\d+(\\.\\d*)?)|(\\.\\d+))([eE][\\-+]?\\d+)?/, 'number'],\n    ],\n    // states that start other states (aka nested states):\n    strings: [\n      [/'/, { token: 'string', next: '@string' }],\n      [/\"/, { token: 'type', next: '@string_double' }],\n    ],\n    string: [\n      [/{/, { token: 'delimiter.curly', next: '@nestedCurly' }], // escape out of string and into nestedCurly\n      [/\\(/, { token: 'delimiter.parenthesis', next: '@nestedParens' }], // escape out of string and into nestedCurly\n      [/\"/, { token: 'type', next: '@string_double' }], // jump into double string\n      [/'/, { token: 'string', next: '@pop' }], // stop being a string\n      { include: '@nonNestableStates' },\n      [/[^']/, 'string'], // anything that is not a quote, is marked as string\n    ],\n    string_double: [\n      [/[^\"]/, 'type'], // mark anything not a quote as a \"type\" (different type of string for visual difference)\n      [/\"/, { token: 'type', next: '@pop' }], // mark also as a type and stop being in the double string state\n    ],\n    nestedCurly: [\n      [/}/, { token: 'delimiter.curly', next: '@pop' }], // escape out of string and into braces\n      [/'/, { token: 'string', next: '@string' }], // go to string if see start of string\n      [/\"/, { token: 'type', next: '@string_double' }], // go to string_double if see start of double string\n    ],\n    nestedParens: [\n      [/\\)/, { token: 'delimiter.parenthesis', next: '@pop' }], // escape out of string and into braces\n      [/'/, { token: 'string', next: '@string' }], // go to string if see start of string\n      [/\"/, { token: 'type', next: '@string_double' }], // go to string_double if see start of double string\n    ],\n  },\n};\n\nexport const conf: monacoType.languages.LanguageConfiguration = {\n  brackets: [\n    ['{', '}'],\n    ['[', ']'],\n    ['(', ')'],\n  ],\n  autoClosingPairs: [\n    { open: '{', close: '}' },\n    { open: '[', close: ']' },\n    { open: '(', close: ')' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n  ],\n  surroundingPairs: [\n    { open: '{', close: '}' },\n    { open: '[', close: ']' },\n    { open: '(', close: ')' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n  ],\n};\n\nfunction escapeRegExp(string: string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n","var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _templateObject = _taggedTemplateLiteral(['', ''], ['', '']);\n\nfunction _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * @class TemplateTag\n * @classdesc Consumes a pipeline of composable transformer plugins and produces a template tag.\n */\nvar TemplateTag = function () {\n  /**\n   * constructs a template tag\n   * @constructs TemplateTag\n   * @param  {...Object} [...transformers] - an array or arguments list of transformers\n   * @return {Function}                    - a template tag\n   */\n  function TemplateTag() {\n    var _this = this;\n\n    for (var _len = arguments.length, transformers = Array(_len), _key = 0; _key < _len; _key++) {\n      transformers[_key] = arguments[_key];\n    }\n\n    _classCallCheck(this, TemplateTag);\n\n    this.tag = function (strings) {\n      for (var _len2 = arguments.length, expressions = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        expressions[_key2 - 1] = arguments[_key2];\n      }\n\n      if (typeof strings === 'function') {\n        // if the first argument passed is a function, assume it is a template tag and return\n        // an intermediary tag that processes the template using the aforementioned tag, passing the\n        // result to our tag\n        return _this.interimTag.bind(_this, strings);\n      }\n\n      if (typeof strings === 'string') {\n        // if the first argument passed is a string, just transform it\n        return _this.transformEndResult(strings);\n      }\n\n      // else, return a transformed end result of processing the template with our tag\n      strings = strings.map(_this.transformString.bind(_this));\n      return _this.transformEndResult(strings.reduce(_this.processSubstitutions.bind(_this, expressions)));\n    };\n\n    // if first argument is an array, extrude it as a list of transformers\n    if (transformers.length > 0 && Array.isArray(transformers[0])) {\n      transformers = transformers[0];\n    }\n\n    // if any transformers are functions, this means they are not initiated - automatically initiate them\n    this.transformers = transformers.map(function (transformer) {\n      return typeof transformer === 'function' ? transformer() : transformer;\n    });\n\n    // return an ES2015 template tag\n    return this.tag;\n  }\n\n  /**\n   * Applies all transformers to a template literal tagged with this method.\n   * If a function is passed as the first argument, assumes the function is a template tag\n   * and applies it to the template, returning a template tag.\n   * @param  {(Function|String|Array<String>)} strings        - Either a template tag or an array containing template strings separated by identifier\n   * @param  {...*}                            ...expressions - Optional list of substitution values.\n   * @return {(String|Function)}                              - Either an intermediary tag function or the results of processing the template.\n   */\n\n\n  _createClass(TemplateTag, [{\n    key: 'interimTag',\n\n\n    /**\n     * An intermediary template tag that receives a template tag and passes the result of calling the template with the received\n     * template tag to our own template tag.\n     * @param  {Function}        nextTag          - the received template tag\n     * @param  {Array<String>}   template         - the template to process\n     * @param  {...*}            ...substitutions - `substitutions` is an array of all substitutions in the template\n     * @return {*}                                - the final processed value\n     */\n    value: function interimTag(previousTag, template) {\n      for (var _len3 = arguments.length, substitutions = Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n        substitutions[_key3 - 2] = arguments[_key3];\n      }\n\n      return this.tag(_templateObject, previousTag.apply(undefined, [template].concat(substitutions)));\n    }\n\n    /**\n     * Performs bulk processing on the tagged template, transforming each substitution and then\n     * concatenating the resulting values into a string.\n     * @param  {Array<*>} substitutions - an array of all remaining substitutions present in this template\n     * @param  {String}   resultSoFar   - this iteration's result string so far\n     * @param  {String}   remainingPart - the template chunk after the current substitution\n     * @return {String}                 - the result of joining this iteration's processed substitution with the result\n     */\n\n  }, {\n    key: 'processSubstitutions',\n    value: function processSubstitutions(substitutions, resultSoFar, remainingPart) {\n      var substitution = this.transformSubstitution(substitutions.shift(), resultSoFar);\n      return ''.concat(resultSoFar, substitution, remainingPart);\n    }\n\n    /**\n     * Iterate through each transformer, applying the transformer's `onString` method to the template\n     * strings before all substitutions are processed.\n     * @param {String}  str - The input string\n     * @return {String}     - The final results of processing each transformer\n     */\n\n  }, {\n    key: 'transformString',\n    value: function transformString(str) {\n      var cb = function cb(res, transform) {\n        return transform.onString ? transform.onString(res) : res;\n      };\n      return this.transformers.reduce(cb, str);\n    }\n\n    /**\n     * When a substitution is encountered, iterates through each transformer and applies the transformer's\n     * `onSubstitution` method to the substitution.\n     * @param  {*}      substitution - The current substitution\n     * @param  {String} resultSoFar  - The result up to and excluding this substitution.\n     * @return {*}                   - The final result of applying all substitution transformations.\n     */\n\n  }, {\n    key: 'transformSubstitution',\n    value: function transformSubstitution(substitution, resultSoFar) {\n      var cb = function cb(res, transform) {\n        return transform.onSubstitution ? transform.onSubstitution(res, resultSoFar) : res;\n      };\n      return this.transformers.reduce(cb, substitution);\n    }\n\n    /**\n     * Iterates through each transformer, applying the transformer's `onEndResult` method to the\n     * template literal after all substitutions have finished processing.\n     * @param  {String} endResult - The processed template, just before it is returned from the tag\n     * @return {String}           - The final results of processing each transformer\n     */\n\n  }, {\n    key: 'transformEndResult',\n    value: function transformEndResult(endResult) {\n      var cb = function cb(res, transform) {\n        return transform.onEndResult ? transform.onEndResult(res) : res;\n      };\n      return this.transformers.reduce(cb, endResult);\n    }\n  }]);\n\n  return TemplateTag;\n}();\n\nexport default TemplateTag;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","var defaults = {\n  separator: '',\n  conjunction: '',\n  serial: false\n};\n\n/**\n * Converts an array substitution to a string containing a list\n * @param  {String} [opts.separator = ''] - the character that separates each item\n * @param  {String} [opts.conjunction = '']  - replace the last separator with this\n * @param  {Boolean} [opts.serial = false] - include the separator before the conjunction? (Oxford comma use-case)\n *\n * @return {Object}                     - a TemplateTag transformer\n */\nvar inlineArrayTransformer = function inlineArrayTransformer() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaults;\n  return {\n    onSubstitution: function onSubstitution(substitution, resultSoFar) {\n      // only operate on arrays\n      if (Array.isArray(substitution)) {\n        var arrayLength = substitution.length;\n        var separator = opts.separator;\n        var conjunction = opts.conjunction;\n        var serial = opts.serial;\n        // join each item in the array into a string where each item is separated by separator\n        // be sure to maintain indentation\n        var indent = resultSoFar.match(/(\\n?[^\\S\\n]+)$/);\n        if (indent) {\n          substitution = substitution.join(separator + indent[1]);\n        } else {\n          substitution = substitution.join(separator + ' ');\n        }\n        // if conjunction is set, replace the last separator with conjunction, but only if there is more than one substitution\n        if (conjunction && arrayLength > 1) {\n          var separatorIndex = substitution.lastIndexOf(separator);\n          substitution = substitution.slice(0, separatorIndex) + (serial ? separator : '') + ' ' + conjunction + substitution.slice(separatorIndex + 1);\n        }\n      }\n      return substitution;\n    }\n  };\n};\n\nexport default inlineArrayTransformer;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbmxpbmVBcnJheVRyYW5zZm9ybWVyL2lubGluZUFycmF5VHJhbnNmb3JtZXIuanMiXSwibmFtZXMiOlsiZGVmYXVsdHMiLCJzZXBhcmF0b3IiLCJjb25qdW5jdGlvbiIsInNlcmlhbCIsImlubGluZUFycmF5VHJhbnNmb3JtZXIiLCJvcHRzIiwib25TdWJzdGl0dXRpb24iLCJzdWJzdGl0dXRpb24iLCJyZXN1bHRTb0ZhciIsIkFycmF5IiwiaXNBcnJheSIsImFycmF5TGVuZ3RoIiwibGVuZ3RoIiwiaW5kZW50IiwibWF0Y2giLCJqb2luIiwic2VwYXJhdG9ySW5kZXgiLCJsYXN0SW5kZXhPZiIsInNsaWNlIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFNQSxXQUFXO0FBQ2ZDLGFBQVcsRUFESTtBQUVmQyxlQUFhLEVBRkU7QUFHZkMsVUFBUTtBQUhPLENBQWpCOztBQU1BOzs7Ozs7OztBQVFBLElBQU1DLHlCQUF5QixTQUF6QkEsc0JBQXlCO0FBQUEsTUFBQ0MsSUFBRCx1RUFBUUwsUUFBUjtBQUFBLFNBQXNCO0FBQ25ETSxrQkFEbUQsMEJBQ3BDQyxZQURvQyxFQUN0QkMsV0FEc0IsRUFDVDtBQUN4QztBQUNBLFVBQUlDLE1BQU1DLE9BQU4sQ0FBY0gsWUFBZCxDQUFKLEVBQWlDO0FBQy9CLFlBQU1JLGNBQWNKLGFBQWFLLE1BQWpDO0FBQ0EsWUFBTVgsWUFBWUksS0FBS0osU0FBdkI7QUFDQSxZQUFNQyxjQUFjRyxLQUFLSCxXQUF6QjtBQUNBLFlBQU1DLFNBQVNFLEtBQUtGLE1BQXBCO0FBQ0E7QUFDQTtBQUNBLFlBQU1VLFNBQVNMLFlBQVlNLEtBQVosQ0FBa0IsZ0JBQWxCLENBQWY7QUFDQSxZQUFJRCxNQUFKLEVBQVk7QUFDVk4seUJBQWVBLGFBQWFRLElBQWIsQ0FBa0JkLFlBQVlZLE9BQU8sQ0FBUCxDQUE5QixDQUFmO0FBQ0QsU0FGRCxNQUVPO0FBQ0xOLHlCQUFlQSxhQUFhUSxJQUFiLENBQWtCZCxZQUFZLEdBQTlCLENBQWY7QUFDRDtBQUNEO0FBQ0EsWUFBSUMsZUFBZVMsY0FBYyxDQUFqQyxFQUFvQztBQUNsQyxjQUFNSyxpQkFBaUJULGFBQWFVLFdBQWIsQ0FBeUJoQixTQUF6QixDQUF2QjtBQUNBTSx5QkFDRUEsYUFBYVcsS0FBYixDQUFtQixDQUFuQixFQUFzQkYsY0FBdEIsS0FDQ2IsU0FBU0YsU0FBVCxHQUFxQixFQUR0QixJQUVBLEdBRkEsR0FHQUMsV0FIQSxHQUlBSyxhQUFhVyxLQUFiLENBQW1CRixpQkFBaUIsQ0FBcEMsQ0FMRjtBQU1EO0FBQ0Y7QUFDRCxhQUFPVCxZQUFQO0FBQ0Q7QUE1QmtELEdBQXRCO0FBQUEsQ0FBL0I7O0FBK0JBLGVBQWVILHNCQUFmIiwiZmlsZSI6ImlubGluZUFycmF5VHJhbnNmb3JtZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBkZWZhdWx0cyA9IHtcbiAgc2VwYXJhdG9yOiAnJyxcbiAgY29uanVuY3Rpb246ICcnLFxuICBzZXJpYWw6IGZhbHNlLFxufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhbiBhcnJheSBzdWJzdGl0dXRpb24gdG8gYSBzdHJpbmcgY29udGFpbmluZyBhIGxpc3RcbiAqIEBwYXJhbSAge1N0cmluZ30gW29wdHMuc2VwYXJhdG9yID0gJyddIC0gdGhlIGNoYXJhY3RlciB0aGF0IHNlcGFyYXRlcyBlYWNoIGl0ZW1cbiAqIEBwYXJhbSAge1N0cmluZ30gW29wdHMuY29uanVuY3Rpb24gPSAnJ10gIC0gcmVwbGFjZSB0aGUgbGFzdCBzZXBhcmF0b3Igd2l0aCB0aGlzXG4gKiBAcGFyYW0gIHtCb29sZWFufSBbb3B0cy5zZXJpYWwgPSBmYWxzZV0gLSBpbmNsdWRlIHRoZSBzZXBhcmF0b3IgYmVmb3JlIHRoZSBjb25qdW5jdGlvbj8gKE94Zm9yZCBjb21tYSB1c2UtY2FzZSlcbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R9ICAgICAgICAgICAgICAgICAgICAgLSBhIFRlbXBsYXRlVGFnIHRyYW5zZm9ybWVyXG4gKi9cbmNvbnN0IGlubGluZUFycmF5VHJhbnNmb3JtZXIgPSAob3B0cyA9IGRlZmF1bHRzKSA9PiAoe1xuICBvblN1YnN0aXR1dGlvbihzdWJzdGl0dXRpb24sIHJlc3VsdFNvRmFyKSB7XG4gICAgLy8gb25seSBvcGVyYXRlIG9uIGFycmF5c1xuICAgIGlmIChBcnJheS5pc0FycmF5KHN1YnN0aXR1dGlvbikpIHtcbiAgICAgIGNvbnN0IGFycmF5TGVuZ3RoID0gc3Vic3RpdHV0aW9uLmxlbmd0aDtcbiAgICAgIGNvbnN0IHNlcGFyYXRvciA9IG9wdHMuc2VwYXJhdG9yO1xuICAgICAgY29uc3QgY29uanVuY3Rpb24gPSBvcHRzLmNvbmp1bmN0aW9uO1xuICAgICAgY29uc3Qgc2VyaWFsID0gb3B0cy5zZXJpYWw7XG4gICAgICAvLyBqb2luIGVhY2ggaXRlbSBpbiB0aGUgYXJyYXkgaW50byBhIHN0cmluZyB3aGVyZSBlYWNoIGl0ZW0gaXMgc2VwYXJhdGVkIGJ5IHNlcGFyYXRvclxuICAgICAgLy8gYmUgc3VyZSB0byBtYWludGFpbiBpbmRlbnRhdGlvblxuICAgICAgY29uc3QgaW5kZW50ID0gcmVzdWx0U29GYXIubWF0Y2goLyhcXG4/W15cXFNcXG5dKykkLyk7XG4gICAgICBpZiAoaW5kZW50KSB7XG4gICAgICAgIHN1YnN0aXR1dGlvbiA9IHN1YnN0aXR1dGlvbi5qb2luKHNlcGFyYXRvciArIGluZGVudFsxXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdWJzdGl0dXRpb24gPSBzdWJzdGl0dXRpb24uam9pbihzZXBhcmF0b3IgKyAnICcpO1xuICAgICAgfVxuICAgICAgLy8gaWYgY29uanVuY3Rpb24gaXMgc2V0LCByZXBsYWNlIHRoZSBsYXN0IHNlcGFyYXRvciB3aXRoIGNvbmp1bmN0aW9uLCBidXQgb25seSBpZiB0aGVyZSBpcyBtb3JlIHRoYW4gb25lIHN1YnN0aXR1dGlvblxuICAgICAgaWYgKGNvbmp1bmN0aW9uICYmIGFycmF5TGVuZ3RoID4gMSkge1xuICAgICAgICBjb25zdCBzZXBhcmF0b3JJbmRleCA9IHN1YnN0aXR1dGlvbi5sYXN0SW5kZXhPZihzZXBhcmF0b3IpO1xuICAgICAgICBzdWJzdGl0dXRpb24gPVxuICAgICAgICAgIHN1YnN0aXR1dGlvbi5zbGljZSgwLCBzZXBhcmF0b3JJbmRleCkgK1xuICAgICAgICAgIChzZXJpYWwgPyBzZXBhcmF0b3IgOiAnJykgK1xuICAgICAgICAgICcgJyArXG4gICAgICAgICAgY29uanVuY3Rpb24gK1xuICAgICAgICAgIHN1YnN0aXR1dGlvbi5zbGljZShzZXBhcmF0b3JJbmRleCArIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3Vic3RpdHV0aW9uO1xuICB9LFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGlubGluZUFycmF5VHJhbnNmb3JtZXI7XG4iXX0=","function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n/**\n * strips indentation from a template literal\n * @param  {String} type = 'initial' - whether to remove all indentation or just leading indentation. can be 'all' or 'initial'\n * @return {Object}                  - a TemplateTag transformer\n */\nvar stripIndentTransformer = function stripIndentTransformer() {\n  var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'initial';\n  return {\n    onEndResult: function onEndResult(endResult) {\n      if (type === 'initial') {\n        // remove the shortest leading indentation from each line\n        var match = endResult.match(/^[^\\S\\n]*(?=\\S)/gm);\n        var indent = match && Math.min.apply(Math, _toConsumableArray(match.map(function (el) {\n          return el.length;\n        })));\n        if (indent) {\n          var regexp = new RegExp('^.{' + indent + '}', 'gm');\n          return endResult.replace(regexp, '');\n        }\n        return endResult;\n      }\n      if (type === 'all') {\n        // remove all indentation from each line\n        return endResult.replace(/^[^\\S\\n]+/gm, '');\n      }\n      throw new Error('Unknown type: ' + type);\n    }\n  };\n};\n\nexport default stripIndentTransformer;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHJpcEluZGVudFRyYW5zZm9ybWVyL3N0cmlwSW5kZW50VHJhbnNmb3JtZXIuanMiXSwibmFtZXMiOlsic3RyaXBJbmRlbnRUcmFuc2Zvcm1lciIsInR5cGUiLCJvbkVuZFJlc3VsdCIsImVuZFJlc3VsdCIsIm1hdGNoIiwiaW5kZW50IiwiTWF0aCIsIm1pbiIsIm1hcCIsImVsIiwibGVuZ3RoIiwicmVnZXhwIiwiUmVnRXhwIiwicmVwbGFjZSIsIkVycm9yIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7OztBQUtBLElBQU1BLHlCQUF5QixTQUF6QkEsc0JBQXlCO0FBQUEsTUFBQ0MsSUFBRCx1RUFBUSxTQUFSO0FBQUEsU0FBdUI7QUFDcERDLGVBRG9ELHVCQUN4Q0MsU0FEd0MsRUFDN0I7QUFDckIsVUFBSUYsU0FBUyxTQUFiLEVBQXdCO0FBQ3RCO0FBQ0EsWUFBTUcsUUFBUUQsVUFBVUMsS0FBVixDQUFnQixtQkFBaEIsQ0FBZDtBQUNBLFlBQU1DLFNBQVNELFNBQVNFLEtBQUtDLEdBQUwsZ0NBQVlILE1BQU1JLEdBQU4sQ0FBVTtBQUFBLGlCQUFNQyxHQUFHQyxNQUFUO0FBQUEsU0FBVixDQUFaLEVBQXhCO0FBQ0EsWUFBSUwsTUFBSixFQUFZO0FBQ1YsY0FBTU0sU0FBUyxJQUFJQyxNQUFKLFNBQWlCUCxNQUFqQixRQUE0QixJQUE1QixDQUFmO0FBQ0EsaUJBQU9GLFVBQVVVLE9BQVYsQ0FBa0JGLE1BQWxCLEVBQTBCLEVBQTFCLENBQVA7QUFDRDtBQUNELGVBQU9SLFNBQVA7QUFDRDtBQUNELFVBQUlGLFNBQVMsS0FBYixFQUFvQjtBQUNsQjtBQUNBLGVBQU9FLFVBQVVVLE9BQVYsQ0FBa0IsYUFBbEIsRUFBaUMsRUFBakMsQ0FBUDtBQUNEO0FBQ0QsWUFBTSxJQUFJQyxLQUFKLG9CQUEyQmIsSUFBM0IsQ0FBTjtBQUNEO0FBakJtRCxHQUF2QjtBQUFBLENBQS9COztBQW9CQSxlQUFlRCxzQkFBZiIsImZpbGUiOiJzdHJpcEluZGVudFRyYW5zZm9ybWVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBzdHJpcHMgaW5kZW50YXRpb24gZnJvbSBhIHRlbXBsYXRlIGxpdGVyYWxcbiAqIEBwYXJhbSAge1N0cmluZ30gdHlwZSA9ICdpbml0aWFsJyAtIHdoZXRoZXIgdG8gcmVtb3ZlIGFsbCBpbmRlbnRhdGlvbiBvciBqdXN0IGxlYWRpbmcgaW5kZW50YXRpb24uIGNhbiBiZSAnYWxsJyBvciAnaW5pdGlhbCdcbiAqIEByZXR1cm4ge09iamVjdH0gICAgICAgICAgICAgICAgICAtIGEgVGVtcGxhdGVUYWcgdHJhbnNmb3JtZXJcbiAqL1xuY29uc3Qgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lciA9ICh0eXBlID0gJ2luaXRpYWwnKSA9PiAoe1xuICBvbkVuZFJlc3VsdChlbmRSZXN1bHQpIHtcbiAgICBpZiAodHlwZSA9PT0gJ2luaXRpYWwnKSB7XG4gICAgICAvLyByZW1vdmUgdGhlIHNob3J0ZXN0IGxlYWRpbmcgaW5kZW50YXRpb24gZnJvbSBlYWNoIGxpbmVcbiAgICAgIGNvbnN0IG1hdGNoID0gZW5kUmVzdWx0Lm1hdGNoKC9eW15cXFNcXG5dKig/PVxcUykvZ20pO1xuICAgICAgY29uc3QgaW5kZW50ID0gbWF0Y2ggJiYgTWF0aC5taW4oLi4ubWF0Y2gubWFwKGVsID0+IGVsLmxlbmd0aCkpO1xuICAgICAgaWYgKGluZGVudCkge1xuICAgICAgICBjb25zdCByZWdleHAgPSBuZXcgUmVnRXhwKGBeLnske2luZGVudH19YCwgJ2dtJyk7XG4gICAgICAgIHJldHVybiBlbmRSZXN1bHQucmVwbGFjZShyZWdleHAsICcnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBlbmRSZXN1bHQ7XG4gICAgfVxuICAgIGlmICh0eXBlID09PSAnYWxsJykge1xuICAgICAgLy8gcmVtb3ZlIGFsbCBpbmRlbnRhdGlvbiBmcm9tIGVhY2ggbGluZVxuICAgICAgcmV0dXJuIGVuZFJlc3VsdC5yZXBsYWNlKC9eW15cXFNcXG5dKy9nbSwgJycpO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gdHlwZTogJHt0eXBlfWApO1xuICB9LFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHN0cmlwSW5kZW50VHJhbnNmb3JtZXI7XG4iXX0=","/**\n * TemplateTag transformer that trims whitespace on the end result of a tagged template\n * @param  {String} side = '' - The side of the string to trim. Can be 'start' or 'end' (alternatively 'left' or 'right')\n * @return {Object}           - a TemplateTag transformer\n */\nvar trimResultTransformer = function trimResultTransformer() {\n  var side = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return {\n    onEndResult: function onEndResult(endResult) {\n      if (side === '') {\n        return endResult.trim();\n      }\n\n      side = side.toLowerCase();\n\n      if (side === 'start' || side === 'left') {\n        return endResult.replace(/^\\s*/, '');\n      }\n\n      if (side === 'end' || side === 'right') {\n        return endResult.replace(/\\s*$/, '');\n      }\n\n      throw new Error('Side not supported: ' + side);\n    }\n  };\n};\n\nexport default trimResultTransformer;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90cmltUmVzdWx0VHJhbnNmb3JtZXIvdHJpbVJlc3VsdFRyYW5zZm9ybWVyLmpzIl0sIm5hbWVzIjpbInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsInNpZGUiLCJvbkVuZFJlc3VsdCIsImVuZFJlc3VsdCIsInRyaW0iLCJ0b0xvd2VyQ2FzZSIsInJlcGxhY2UiLCJFcnJvciJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0FBS0EsSUFBTUEsd0JBQXdCLFNBQXhCQSxxQkFBd0I7QUFBQSxNQUFDQyxJQUFELHVFQUFRLEVBQVI7QUFBQSxTQUFnQjtBQUM1Q0MsZUFENEMsdUJBQ2hDQyxTQURnQyxFQUNyQjtBQUNyQixVQUFJRixTQUFTLEVBQWIsRUFBaUI7QUFDZixlQUFPRSxVQUFVQyxJQUFWLEVBQVA7QUFDRDs7QUFFREgsYUFBT0EsS0FBS0ksV0FBTCxFQUFQOztBQUVBLFVBQUlKLFNBQVMsT0FBVCxJQUFvQkEsU0FBUyxNQUFqQyxFQUF5QztBQUN2QyxlQUFPRSxVQUFVRyxPQUFWLENBQWtCLE1BQWxCLEVBQTBCLEVBQTFCLENBQVA7QUFDRDs7QUFFRCxVQUFJTCxTQUFTLEtBQVQsSUFBa0JBLFNBQVMsT0FBL0IsRUFBd0M7QUFDdEMsZUFBT0UsVUFBVUcsT0FBVixDQUFrQixNQUFsQixFQUEwQixFQUExQixDQUFQO0FBQ0Q7O0FBRUQsWUFBTSxJQUFJQyxLQUFKLDBCQUFpQ04sSUFBakMsQ0FBTjtBQUNEO0FBakIyQyxHQUFoQjtBQUFBLENBQTlCOztBQW9CQSxlQUFlRCxxQkFBZiIsImZpbGUiOiJ0cmltUmVzdWx0VHJhbnNmb3JtZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRlbXBsYXRlVGFnIHRyYW5zZm9ybWVyIHRoYXQgdHJpbXMgd2hpdGVzcGFjZSBvbiB0aGUgZW5kIHJlc3VsdCBvZiBhIHRhZ2dlZCB0ZW1wbGF0ZVxuICogQHBhcmFtICB7U3RyaW5nfSBzaWRlID0gJycgLSBUaGUgc2lkZSBvZiB0aGUgc3RyaW5nIHRvIHRyaW0uIENhbiBiZSAnc3RhcnQnIG9yICdlbmQnIChhbHRlcm5hdGl2ZWx5ICdsZWZ0JyBvciAncmlnaHQnKVxuICogQHJldHVybiB7T2JqZWN0fSAgICAgICAgICAgLSBhIFRlbXBsYXRlVGFnIHRyYW5zZm9ybWVyXG4gKi9cbmNvbnN0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciA9IChzaWRlID0gJycpID0+ICh7XG4gIG9uRW5kUmVzdWx0KGVuZFJlc3VsdCkge1xuICAgIGlmIChzaWRlID09PSAnJykge1xuICAgICAgcmV0dXJuIGVuZFJlc3VsdC50cmltKCk7XG4gICAgfVxuXG4gICAgc2lkZSA9IHNpZGUudG9Mb3dlckNhc2UoKTtcblxuICAgIGlmIChzaWRlID09PSAnc3RhcnQnIHx8IHNpZGUgPT09ICdsZWZ0Jykge1xuICAgICAgcmV0dXJuIGVuZFJlc3VsdC5yZXBsYWNlKC9eXFxzKi8sICcnKTtcbiAgICB9XG5cbiAgICBpZiAoc2lkZSA9PT0gJ2VuZCcgfHwgc2lkZSA9PT0gJ3JpZ2h0Jykge1xuICAgICAgcmV0dXJuIGVuZFJlc3VsdC5yZXBsYWNlKC9cXHMqJC8sICcnKTtcbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgRXJyb3IoYFNpZGUgbm90IHN1cHBvcnRlZDogJHtzaWRlfWApO1xuICB9LFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lcjtcbiJdfQ==","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\n\nvar commaLists = new TemplateTag(inlineArrayTransformer({ separator: ',' }), stripIndentTransformer, trimResultTransformer);\n\nexport default commaLists;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYUxpc3RzL2NvbW1hTGlzdHMuanMiXSwibmFtZXMiOlsiVGVtcGxhdGVUYWciLCJzdHJpcEluZGVudFRyYW5zZm9ybWVyIiwiaW5saW5lQXJyYXlUcmFuc2Zvcm1lciIsInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsImNvbW1hTGlzdHMiLCJzZXBhcmF0b3IiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLFdBQVAsTUFBd0IsZ0JBQXhCO0FBQ0EsT0FBT0Msc0JBQVAsTUFBbUMsMkJBQW5DO0FBQ0EsT0FBT0Msc0JBQVAsTUFBbUMsMkJBQW5DO0FBQ0EsT0FBT0MscUJBQVAsTUFBa0MsMEJBQWxDOztBQUVBLElBQU1DLGFBQWEsSUFBSUosV0FBSixDQUNqQkUsdUJBQXVCLEVBQUVHLFdBQVcsR0FBYixFQUF2QixDQURpQixFQUVqQkosc0JBRmlCLEVBR2pCRSxxQkFIaUIsQ0FBbkI7O0FBTUEsZUFBZUMsVUFBZiIsImZpbGUiOiJjb21tYUxpc3RzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRlbXBsYXRlVGFnIGZyb20gJy4uL1RlbXBsYXRlVGFnJztcbmltcG9ydCBzdHJpcEluZGVudFRyYW5zZm9ybWVyIGZyb20gJy4uL3N0cmlwSW5kZW50VHJhbnNmb3JtZXInO1xuaW1wb3J0IGlubGluZUFycmF5VHJhbnNmb3JtZXIgZnJvbSAnLi4vaW5saW5lQXJyYXlUcmFuc2Zvcm1lcic7XG5pbXBvcnQgdHJpbVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3RyaW1SZXN1bHRUcmFuc2Zvcm1lcic7XG5cbmNvbnN0IGNvbW1hTGlzdHMgPSBuZXcgVGVtcGxhdGVUYWcoXG4gIGlubGluZUFycmF5VHJhbnNmb3JtZXIoeyBzZXBhcmF0b3I6ICcsJyB9KSxcbiAgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lcixcbiAgdHJpbVJlc3VsdFRyYW5zZm9ybWVyLFxuKTtcblxuZXhwb3J0IGRlZmF1bHQgY29tbWFMaXN0cztcbiJdfQ==","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\n\nvar commaListsAnd = new TemplateTag(inlineArrayTransformer({ separator: ',', conjunction: 'and' }), stripIndentTransformer, trimResultTransformer);\n\nexport default commaListsAnd;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYUxpc3RzQW5kL2NvbW1hTGlzdHNBbmQuanMiXSwibmFtZXMiOlsiVGVtcGxhdGVUYWciLCJzdHJpcEluZGVudFRyYW5zZm9ybWVyIiwiaW5saW5lQXJyYXlUcmFuc2Zvcm1lciIsInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsImNvbW1hTGlzdHNBbmQiLCJzZXBhcmF0b3IiLCJjb25qdW5jdGlvbiJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7O0FBRUEsSUFBTUMsZ0JBQWdCLElBQUlKLFdBQUosQ0FDcEJFLHVCQUF1QixFQUFFRyxXQUFXLEdBQWIsRUFBa0JDLGFBQWEsS0FBL0IsRUFBdkIsQ0FEb0IsRUFFcEJMLHNCQUZvQixFQUdwQkUscUJBSG9CLENBQXRCOztBQU1BLGVBQWVDLGFBQWYiLCJmaWxlIjoiY29tbWFMaXN0c0FuZC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUZW1wbGF0ZVRhZyBmcm9tICcuLi9UZW1wbGF0ZVRhZyc7XG5pbXBvcnQgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lciBmcm9tICcuLi9zdHJpcEluZGVudFRyYW5zZm9ybWVyJztcbmltcG9ydCBpbmxpbmVBcnJheVRyYW5zZm9ybWVyIGZyb20gJy4uL2lubGluZUFycmF5VHJhbnNmb3JtZXInO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuXG5jb25zdCBjb21tYUxpc3RzQW5kID0gbmV3IFRlbXBsYXRlVGFnKFxuICBpbmxpbmVBcnJheVRyYW5zZm9ybWVyKHsgc2VwYXJhdG9yOiAnLCcsIGNvbmp1bmN0aW9uOiAnYW5kJyB9KSxcbiAgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lcixcbiAgdHJpbVJlc3VsdFRyYW5zZm9ybWVyLFxuKTtcblxuZXhwb3J0IGRlZmF1bHQgY29tbWFMaXN0c0FuZDtcbiJdfQ==","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\n\nvar commaListsOr = new TemplateTag(inlineArrayTransformer({ separator: ',', conjunction: 'or' }), stripIndentTransformer, trimResultTransformer);\n\nexport default commaListsOr;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYUxpc3RzT3IvY29tbWFMaXN0c09yLmpzIl0sIm5hbWVzIjpbIlRlbXBsYXRlVGFnIiwic3RyaXBJbmRlbnRUcmFuc2Zvcm1lciIsImlubGluZUFycmF5VHJhbnNmb3JtZXIiLCJ0cmltUmVzdWx0VHJhbnNmb3JtZXIiLCJjb21tYUxpc3RzT3IiLCJzZXBhcmF0b3IiLCJjb25qdW5jdGlvbiJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7O0FBRUEsSUFBTUMsZUFBZSxJQUFJSixXQUFKLENBQ25CRSx1QkFBdUIsRUFBRUcsV0FBVyxHQUFiLEVBQWtCQyxhQUFhLElBQS9CLEVBQXZCLENBRG1CLEVBRW5CTCxzQkFGbUIsRUFHbkJFLHFCQUhtQixDQUFyQjs7QUFNQSxlQUFlQyxZQUFmIiwiZmlsZSI6ImNvbW1hTGlzdHNPci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUZW1wbGF0ZVRhZyBmcm9tICcuLi9UZW1wbGF0ZVRhZyc7XG5pbXBvcnQgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lciBmcm9tICcuLi9zdHJpcEluZGVudFRyYW5zZm9ybWVyJztcbmltcG9ydCBpbmxpbmVBcnJheVRyYW5zZm9ybWVyIGZyb20gJy4uL2lubGluZUFycmF5VHJhbnNmb3JtZXInO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuXG5jb25zdCBjb21tYUxpc3RzT3IgPSBuZXcgVGVtcGxhdGVUYWcoXG4gIGlubGluZUFycmF5VHJhbnNmb3JtZXIoeyBzZXBhcmF0b3I6ICcsJywgY29uanVuY3Rpb246ICdvcicgfSksXG4gIHN0cmlwSW5kZW50VHJhbnNmb3JtZXIsXG4gIHRyaW1SZXN1bHRUcmFuc2Zvcm1lcixcbik7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbW1hTGlzdHNPcjtcbiJdfQ==","var splitStringTransformer = function splitStringTransformer(splitBy) {\n  return {\n    onSubstitution: function onSubstitution(substitution, resultSoFar) {\n      if (splitBy != null && typeof splitBy === 'string') {\n        if (typeof substitution === 'string' && substitution.includes(splitBy)) {\n          substitution = substitution.split(splitBy);\n        }\n      } else {\n        throw new Error('You need to specify a string character to split by.');\n      }\n      return substitution;\n    }\n  };\n};\n\nexport default splitStringTransformer;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zcGxpdFN0cmluZ1RyYW5zZm9ybWVyL3NwbGl0U3RyaW5nVHJhbnNmb3JtZXIuanMiXSwibmFtZXMiOlsic3BsaXRTdHJpbmdUcmFuc2Zvcm1lciIsIm9uU3Vic3RpdHV0aW9uIiwic3Vic3RpdHV0aW9uIiwicmVzdWx0U29GYXIiLCJzcGxpdEJ5IiwiaW5jbHVkZXMiLCJzcGxpdCIsIkVycm9yIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFNQSx5QkFBeUIsU0FBekJBLHNCQUF5QjtBQUFBLFNBQVk7QUFDekNDLGtCQUR5QywwQkFDMUJDLFlBRDBCLEVBQ1pDLFdBRFksRUFDQztBQUN4QyxVQUFJQyxXQUFXLElBQVgsSUFBbUIsT0FBT0EsT0FBUCxLQUFtQixRQUExQyxFQUFvRDtBQUNsRCxZQUFJLE9BQU9GLFlBQVAsS0FBd0IsUUFBeEIsSUFBb0NBLGFBQWFHLFFBQWIsQ0FBc0JELE9BQXRCLENBQXhDLEVBQXdFO0FBQ3RFRix5QkFBZUEsYUFBYUksS0FBYixDQUFtQkYsT0FBbkIsQ0FBZjtBQUNEO0FBQ0YsT0FKRCxNQUlPO0FBQ0wsY0FBTSxJQUFJRyxLQUFKLENBQVUscURBQVYsQ0FBTjtBQUNEO0FBQ0QsYUFBT0wsWUFBUDtBQUNEO0FBVndDLEdBQVo7QUFBQSxDQUEvQjs7QUFhQSxlQUFlRixzQkFBZiIsImZpbGUiOiJzcGxpdFN0cmluZ1RyYW5zZm9ybWVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qgc3BsaXRTdHJpbmdUcmFuc2Zvcm1lciA9IHNwbGl0QnkgPT4gKHtcbiAgb25TdWJzdGl0dXRpb24oc3Vic3RpdHV0aW9uLCByZXN1bHRTb0Zhcikge1xuICAgIGlmIChzcGxpdEJ5ICE9IG51bGwgJiYgdHlwZW9mIHNwbGl0QnkgPT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAodHlwZW9mIHN1YnN0aXR1dGlvbiA9PT0gJ3N0cmluZycgJiYgc3Vic3RpdHV0aW9uLmluY2x1ZGVzKHNwbGl0QnkpKSB7XG4gICAgICAgIHN1YnN0aXR1dGlvbiA9IHN1YnN0aXR1dGlvbi5zcGxpdChzcGxpdEJ5KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbmVlZCB0byBzcGVjaWZ5IGEgc3RyaW5nIGNoYXJhY3RlciB0byBzcGxpdCBieS4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1YnN0aXR1dGlvbjtcbiAgfSxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBzcGxpdFN0cmluZ1RyYW5zZm9ybWVyO1xuIl19","var isValidValue = function isValidValue(x) {\n  return x != null && !Number.isNaN(x) && typeof x !== 'boolean';\n};\n\nvar removeNonPrintingValuesTransformer = function removeNonPrintingValuesTransformer() {\n  return {\n    onSubstitution: function onSubstitution(substitution) {\n      if (Array.isArray(substitution)) {\n        return substitution.filter(isValidValue);\n      }\n      if (isValidValue(substitution)) {\n        return substitution;\n      }\n      return '';\n    }\n  };\n};\n\nexport default removeNonPrintingValuesTransformer;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZW1vdmVOb25QcmludGluZ1ZhbHVlc1RyYW5zZm9ybWVyL3JlbW92ZU5vblByaW50aW5nVmFsdWVzVHJhbnNmb3JtZXIuanMiXSwibmFtZXMiOlsiaXNWYWxpZFZhbHVlIiwieCIsIk51bWJlciIsImlzTmFOIiwicmVtb3ZlTm9uUHJpbnRpbmdWYWx1ZXNUcmFuc2Zvcm1lciIsIm9uU3Vic3RpdHV0aW9uIiwic3Vic3RpdHV0aW9uIiwiQXJyYXkiLCJpc0FycmF5IiwiZmlsdGVyIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFNQSxlQUFlLFNBQWZBLFlBQWU7QUFBQSxTQUNuQkMsS0FBSyxJQUFMLElBQWEsQ0FBQ0MsT0FBT0MsS0FBUCxDQUFhRixDQUFiLENBQWQsSUFBaUMsT0FBT0EsQ0FBUCxLQUFhLFNBRDNCO0FBQUEsQ0FBckI7O0FBR0EsSUFBTUcscUNBQXFDLFNBQXJDQSxrQ0FBcUM7QUFBQSxTQUFPO0FBQ2hEQyxrQkFEZ0QsMEJBQ2pDQyxZQURpQyxFQUNuQjtBQUMzQixVQUFJQyxNQUFNQyxPQUFOLENBQWNGLFlBQWQsQ0FBSixFQUFpQztBQUMvQixlQUFPQSxhQUFhRyxNQUFiLENBQW9CVCxZQUFwQixDQUFQO0FBQ0Q7QUFDRCxVQUFJQSxhQUFhTSxZQUFiLENBQUosRUFBZ0M7QUFDOUIsZUFBT0EsWUFBUDtBQUNEO0FBQ0QsYUFBTyxFQUFQO0FBQ0Q7QUFUK0MsR0FBUDtBQUFBLENBQTNDOztBQVlBLGVBQWVGLGtDQUFmIiwiZmlsZSI6InJlbW92ZU5vblByaW50aW5nVmFsdWVzVHJhbnNmb3JtZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBpc1ZhbGlkVmFsdWUgPSB4ID0+XG4gIHggIT0gbnVsbCAmJiAhTnVtYmVyLmlzTmFOKHgpICYmIHR5cGVvZiB4ICE9PSAnYm9vbGVhbic7XG5cbmNvbnN0IHJlbW92ZU5vblByaW50aW5nVmFsdWVzVHJhbnNmb3JtZXIgPSAoKSA9PiAoe1xuICBvblN1YnN0aXR1dGlvbihzdWJzdGl0dXRpb24pIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzdWJzdGl0dXRpb24pKSB7XG4gICAgICByZXR1cm4gc3Vic3RpdHV0aW9uLmZpbHRlcihpc1ZhbGlkVmFsdWUpO1xuICAgIH1cbiAgICBpZiAoaXNWYWxpZFZhbHVlKHN1YnN0aXR1dGlvbikpIHtcbiAgICAgIHJldHVybiBzdWJzdGl0dXRpb247XG4gICAgfVxuICAgIHJldHVybiAnJztcbiAgfSxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCByZW1vdmVOb25QcmludGluZ1ZhbHVlc1RyYW5zZm9ybWVyO1xuIl19","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport splitStringTransformer from '../splitStringTransformer';\nimport removeNonPrintingValuesTransformer from '../removeNonPrintingValuesTransformer';\n\nvar html = new TemplateTag(splitStringTransformer('\\n'), removeNonPrintingValuesTransformer, inlineArrayTransformer, stripIndentTransformer, trimResultTransformer);\n\nexport default html;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9odG1sL2h0bWwuanMiXSwibmFtZXMiOlsiVGVtcGxhdGVUYWciLCJzdHJpcEluZGVudFRyYW5zZm9ybWVyIiwiaW5saW5lQXJyYXlUcmFuc2Zvcm1lciIsInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsInNwbGl0U3RyaW5nVHJhbnNmb3JtZXIiLCJyZW1vdmVOb25QcmludGluZ1ZhbHVlc1RyYW5zZm9ybWVyIiwiaHRtbCJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxrQ0FBUCxNQUErQyx1Q0FBL0M7O0FBRUEsSUFBTUMsT0FBTyxJQUFJTixXQUFKLENBQ1hJLHVCQUF1QixJQUF2QixDQURXLEVBRVhDLGtDQUZXLEVBR1hILHNCQUhXLEVBSVhELHNCQUpXLEVBS1hFLHFCQUxXLENBQWI7O0FBUUEsZUFBZUcsSUFBZiIsImZpbGUiOiJodG1sLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRlbXBsYXRlVGFnIGZyb20gJy4uL1RlbXBsYXRlVGFnJztcbmltcG9ydCBzdHJpcEluZGVudFRyYW5zZm9ybWVyIGZyb20gJy4uL3N0cmlwSW5kZW50VHJhbnNmb3JtZXInO1xuaW1wb3J0IGlubGluZUFycmF5VHJhbnNmb3JtZXIgZnJvbSAnLi4vaW5saW5lQXJyYXlUcmFuc2Zvcm1lcic7XG5pbXBvcnQgdHJpbVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3RyaW1SZXN1bHRUcmFuc2Zvcm1lcic7XG5pbXBvcnQgc3BsaXRTdHJpbmdUcmFuc2Zvcm1lciBmcm9tICcuLi9zcGxpdFN0cmluZ1RyYW5zZm9ybWVyJztcbmltcG9ydCByZW1vdmVOb25QcmludGluZ1ZhbHVlc1RyYW5zZm9ybWVyIGZyb20gJy4uL3JlbW92ZU5vblByaW50aW5nVmFsdWVzVHJhbnNmb3JtZXInO1xuXG5jb25zdCBodG1sID0gbmV3IFRlbXBsYXRlVGFnKFxuICBzcGxpdFN0cmluZ1RyYW5zZm9ybWVyKCdcXG4nKSxcbiAgcmVtb3ZlTm9uUHJpbnRpbmdWYWx1ZXNUcmFuc2Zvcm1lcixcbiAgaW5saW5lQXJyYXlUcmFuc2Zvcm1lcixcbiAgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lcixcbiAgdHJpbVJlc3VsdFRyYW5zZm9ybWVyLFxuKTtcblxuZXhwb3J0IGRlZmF1bHQgaHRtbDtcbiJdfQ==","var replaceSubstitutionTransformer = function replaceSubstitutionTransformer(replaceWhat, replaceWith) {\n  return {\n    onSubstitution: function onSubstitution(substitution, resultSoFar) {\n      if (replaceWhat == null || replaceWith == null) {\n        throw new Error('replaceSubstitutionTransformer requires at least 2 arguments.');\n      }\n\n      // Do not touch if null or undefined\n      if (substitution == null) {\n        return substitution;\n      } else {\n        return substitution.toString().replace(replaceWhat, replaceWith);\n      }\n    }\n  };\n};\n\nexport default replaceSubstitutionTransformer;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZXBsYWNlU3Vic3RpdHV0aW9uVHJhbnNmb3JtZXIvcmVwbGFjZVN1YnN0aXR1dGlvblRyYW5zZm9ybWVyLmpzIl0sIm5hbWVzIjpbInJlcGxhY2VTdWJzdGl0dXRpb25UcmFuc2Zvcm1lciIsInJlcGxhY2VXaGF0IiwicmVwbGFjZVdpdGgiLCJvblN1YnN0aXR1dGlvbiIsInN1YnN0aXR1dGlvbiIsInJlc3VsdFNvRmFyIiwiRXJyb3IiLCJ0b1N0cmluZyIsInJlcGxhY2UiXSwibWFwcGluZ3MiOiJBQUFBLElBQU1BLGlDQUFpQyxTQUFqQ0EsOEJBQWlDLENBQUNDLFdBQUQsRUFBY0MsV0FBZDtBQUFBLFNBQStCO0FBQ3BFQyxrQkFEb0UsMEJBQ3JEQyxZQURxRCxFQUN2Q0MsV0FEdUMsRUFDMUI7QUFDeEMsVUFBSUosZUFBZSxJQUFmLElBQXVCQyxlQUFlLElBQTFDLEVBQWdEO0FBQzlDLGNBQU0sSUFBSUksS0FBSixDQUNKLCtEQURJLENBQU47QUFHRDs7QUFFRDtBQUNBLFVBQUlGLGdCQUFnQixJQUFwQixFQUEwQjtBQUN4QixlQUFPQSxZQUFQO0FBQ0QsT0FGRCxNQUVPO0FBQ0wsZUFBT0EsYUFBYUcsUUFBYixHQUF3QkMsT0FBeEIsQ0FBZ0NQLFdBQWhDLEVBQTZDQyxXQUE3QyxDQUFQO0FBQ0Q7QUFDRjtBQWRtRSxHQUEvQjtBQUFBLENBQXZDOztBQWlCQSxlQUFlRiw4QkFBZiIsImZpbGUiOiJyZXBsYWNlU3Vic3RpdHV0aW9uVHJhbnNmb3JtZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCByZXBsYWNlU3Vic3RpdHV0aW9uVHJhbnNmb3JtZXIgPSAocmVwbGFjZVdoYXQsIHJlcGxhY2VXaXRoKSA9PiAoe1xuICBvblN1YnN0aXR1dGlvbihzdWJzdGl0dXRpb24sIHJlc3VsdFNvRmFyKSB7XG4gICAgaWYgKHJlcGxhY2VXaGF0ID09IG51bGwgfHwgcmVwbGFjZVdpdGggPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAncmVwbGFjZVN1YnN0aXR1dGlvblRyYW5zZm9ybWVyIHJlcXVpcmVzIGF0IGxlYXN0IDIgYXJndW1lbnRzLicsXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIERvIG5vdCB0b3VjaCBpZiBudWxsIG9yIHVuZGVmaW5lZFxuICAgIGlmIChzdWJzdGl0dXRpb24gPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHN1YnN0aXR1dGlvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHN1YnN0aXR1dGlvbi50b1N0cmluZygpLnJlcGxhY2UocmVwbGFjZVdoYXQsIHJlcGxhY2VXaXRoKTtcbiAgICB9XG4gIH0sXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgcmVwbGFjZVN1YnN0aXR1dGlvblRyYW5zZm9ybWVyO1xuIl19","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport splitStringTransformer from '../splitStringTransformer';\nimport replaceSubstitutionTransformer from '../replaceSubstitutionTransformer';\n\nvar safeHtml = new TemplateTag(splitStringTransformer('\\n'), inlineArrayTransformer, stripIndentTransformer, trimResultTransformer, replaceSubstitutionTransformer(/&/g, '&amp;'), replaceSubstitutionTransformer(/</g, '&lt;'), replaceSubstitutionTransformer(/>/g, '&gt;'), replaceSubstitutionTransformer(/\"/g, '&quot;'), replaceSubstitutionTransformer(/'/g, '&#x27;'), replaceSubstitutionTransformer(/`/g, '&#x60;'));\n\nexport default safeHtml;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zYWZlSHRtbC9zYWZlSHRtbC5qcyJdLCJuYW1lcyI6WyJUZW1wbGF0ZVRhZyIsInN0cmlwSW5kZW50VHJhbnNmb3JtZXIiLCJpbmxpbmVBcnJheVRyYW5zZm9ybWVyIiwidHJpbVJlc3VsdFRyYW5zZm9ybWVyIiwic3BsaXRTdHJpbmdUcmFuc2Zvcm1lciIsInJlcGxhY2VTdWJzdGl0dXRpb25UcmFuc2Zvcm1lciIsInNhZmVIdG1sIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxXQUFQLE1BQXdCLGdCQUF4QjtBQUNBLE9BQU9DLHNCQUFQLE1BQW1DLDJCQUFuQztBQUNBLE9BQU9DLHNCQUFQLE1BQW1DLDJCQUFuQztBQUNBLE9BQU9DLHFCQUFQLE1BQWtDLDBCQUFsQztBQUNBLE9BQU9DLHNCQUFQLE1BQW1DLDJCQUFuQztBQUNBLE9BQU9DLDhCQUFQLE1BQTJDLG1DQUEzQzs7QUFFQSxJQUFNQyxXQUFXLElBQUlOLFdBQUosQ0FDZkksdUJBQXVCLElBQXZCLENBRGUsRUFFZkYsc0JBRmUsRUFHZkQsc0JBSGUsRUFJZkUscUJBSmUsRUFLZkUsK0JBQStCLElBQS9CLEVBQXFDLE9BQXJDLENBTGUsRUFNZkEsK0JBQStCLElBQS9CLEVBQXFDLE1BQXJDLENBTmUsRUFPZkEsK0JBQStCLElBQS9CLEVBQXFDLE1BQXJDLENBUGUsRUFRZkEsK0JBQStCLElBQS9CLEVBQXFDLFFBQXJDLENBUmUsRUFTZkEsK0JBQStCLElBQS9CLEVBQXFDLFFBQXJDLENBVGUsRUFVZkEsK0JBQStCLElBQS9CLEVBQXFDLFFBQXJDLENBVmUsQ0FBakI7O0FBYUEsZUFBZUMsUUFBZiIsImZpbGUiOiJzYWZlSHRtbC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUZW1wbGF0ZVRhZyBmcm9tICcuLi9UZW1wbGF0ZVRhZyc7XG5pbXBvcnQgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lciBmcm9tICcuLi9zdHJpcEluZGVudFRyYW5zZm9ybWVyJztcbmltcG9ydCBpbmxpbmVBcnJheVRyYW5zZm9ybWVyIGZyb20gJy4uL2lubGluZUFycmF5VHJhbnNmb3JtZXInO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuaW1wb3J0IHNwbGl0U3RyaW5nVHJhbnNmb3JtZXIgZnJvbSAnLi4vc3BsaXRTdHJpbmdUcmFuc2Zvcm1lcic7XG5pbXBvcnQgcmVwbGFjZVN1YnN0aXR1dGlvblRyYW5zZm9ybWVyIGZyb20gJy4uL3JlcGxhY2VTdWJzdGl0dXRpb25UcmFuc2Zvcm1lcic7XG5cbmNvbnN0IHNhZmVIdG1sID0gbmV3IFRlbXBsYXRlVGFnKFxuICBzcGxpdFN0cmluZ1RyYW5zZm9ybWVyKCdcXG4nKSxcbiAgaW5saW5lQXJyYXlUcmFuc2Zvcm1lcixcbiAgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lcixcbiAgdHJpbVJlc3VsdFRyYW5zZm9ybWVyLFxuICByZXBsYWNlU3Vic3RpdHV0aW9uVHJhbnNmb3JtZXIoLyYvZywgJyZhbXA7JyksXG4gIHJlcGxhY2VTdWJzdGl0dXRpb25UcmFuc2Zvcm1lcigvPC9nLCAnJmx0OycpLFxuICByZXBsYWNlU3Vic3RpdHV0aW9uVHJhbnNmb3JtZXIoLz4vZywgJyZndDsnKSxcbiAgcmVwbGFjZVN1YnN0aXR1dGlvblRyYW5zZm9ybWVyKC9cIi9nLCAnJnF1b3Q7JyksXG4gIHJlcGxhY2VTdWJzdGl0dXRpb25UcmFuc2Zvcm1lcigvJy9nLCAnJiN4Mjc7JyksXG4gIHJlcGxhY2VTdWJzdGl0dXRpb25UcmFuc2Zvcm1lcigvYC9nLCAnJiN4NjA7JyksXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBzYWZlSHRtbDtcbiJdfQ==","/**\n * Replaces tabs, newlines and spaces with the chosen value when they occur in sequences\n * @param  {(String|RegExp)} replaceWhat - the value or pattern that should be replaced\n * @param  {*}               replaceWith - the replacement value\n * @return {Object}                      - a TemplateTag transformer\n */\nvar replaceResultTransformer = function replaceResultTransformer(replaceWhat, replaceWith) {\n  return {\n    onEndResult: function onEndResult(endResult) {\n      if (replaceWhat == null || replaceWith == null) {\n        throw new Error('replaceResultTransformer requires at least 2 arguments.');\n      }\n      return endResult.replace(replaceWhat, replaceWith);\n    }\n  };\n};\n\nexport default replaceResultTransformer;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIvcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyLmpzIl0sIm5hbWVzIjpbInJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciIsInJlcGxhY2VXaGF0IiwicmVwbGFjZVdpdGgiLCJvbkVuZFJlc3VsdCIsImVuZFJlc3VsdCIsIkVycm9yIiwicmVwbGFjZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQU1BLElBQU1BLDJCQUEyQixTQUEzQkEsd0JBQTJCLENBQUNDLFdBQUQsRUFBY0MsV0FBZDtBQUFBLFNBQStCO0FBQzlEQyxlQUQ4RCx1QkFDbERDLFNBRGtELEVBQ3ZDO0FBQ3JCLFVBQUlILGVBQWUsSUFBZixJQUF1QkMsZUFBZSxJQUExQyxFQUFnRDtBQUM5QyxjQUFNLElBQUlHLEtBQUosQ0FDSix5REFESSxDQUFOO0FBR0Q7QUFDRCxhQUFPRCxVQUFVRSxPQUFWLENBQWtCTCxXQUFsQixFQUErQkMsV0FBL0IsQ0FBUDtBQUNEO0FBUjZELEdBQS9CO0FBQUEsQ0FBakM7O0FBV0EsZUFBZUYsd0JBQWYiLCJmaWxlIjoicmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBSZXBsYWNlcyB0YWJzLCBuZXdsaW5lcyBhbmQgc3BhY2VzIHdpdGggdGhlIGNob3NlbiB2YWx1ZSB3aGVuIHRoZXkgb2NjdXIgaW4gc2VxdWVuY2VzXG4gKiBAcGFyYW0gIHsoU3RyaW5nfFJlZ0V4cCl9IHJlcGxhY2VXaGF0IC0gdGhlIHZhbHVlIG9yIHBhdHRlcm4gdGhhdCBzaG91bGQgYmUgcmVwbGFjZWRcbiAqIEBwYXJhbSAgeyp9ICAgICAgICAgICAgICAgcmVwbGFjZVdpdGggLSB0aGUgcmVwbGFjZW1lbnQgdmFsdWVcbiAqIEByZXR1cm4ge09iamVjdH0gICAgICAgICAgICAgICAgICAgICAgLSBhIFRlbXBsYXRlVGFnIHRyYW5zZm9ybWVyXG4gKi9cbmNvbnN0IHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciA9IChyZXBsYWNlV2hhdCwgcmVwbGFjZVdpdGgpID0+ICh7XG4gIG9uRW5kUmVzdWx0KGVuZFJlc3VsdCkge1xuICAgIGlmIChyZXBsYWNlV2hhdCA9PSBudWxsIHx8IHJlcGxhY2VXaXRoID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ3JlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciByZXF1aXJlcyBhdCBsZWFzdCAyIGFyZ3VtZW50cy4nLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGVuZFJlc3VsdC5yZXBsYWNlKHJlcGxhY2VXaGF0LCByZXBsYWNlV2l0aCk7XG4gIH0sXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyO1xuIl19","import TemplateTag from '../TemplateTag';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\n\nvar oneLine = new TemplateTag(replaceResultTransformer(/(?:\\n(?:\\s*))+/g, ' '), trimResultTransformer);\n\nexport default oneLine;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbmVMaW5lL29uZUxpbmUuanMiXSwibmFtZXMiOlsiVGVtcGxhdGVUYWciLCJ0cmltUmVzdWx0VHJhbnNmb3JtZXIiLCJyZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIiLCJvbmVMaW5lIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxXQUFQLE1BQXdCLGdCQUF4QjtBQUNBLE9BQU9DLHFCQUFQLE1BQWtDLDBCQUFsQztBQUNBLE9BQU9DLHdCQUFQLE1BQXFDLDZCQUFyQzs7QUFFQSxJQUFNQyxVQUFVLElBQUlILFdBQUosQ0FDZEUseUJBQXlCLGlCQUF6QixFQUE0QyxHQUE1QyxDQURjLEVBRWRELHFCQUZjLENBQWhCOztBQUtBLGVBQWVFLE9BQWYiLCJmaWxlIjoib25lTGluZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUZW1wbGF0ZVRhZyBmcm9tICcuLi9UZW1wbGF0ZVRhZyc7XG5pbXBvcnQgdHJpbVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3RyaW1SZXN1bHRUcmFuc2Zvcm1lcic7XG5pbXBvcnQgcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3JlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lcic7XG5cbmNvbnN0IG9uZUxpbmUgPSBuZXcgVGVtcGxhdGVUYWcoXG4gIHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lcigvKD86XFxuKD86XFxzKikpKy9nLCAnICcpLFxuICB0cmltUmVzdWx0VHJhbnNmb3JtZXIsXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBvbmVMaW5lO1xuIl19","import TemplateTag from '../TemplateTag';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\n\nvar oneLineTrim = new TemplateTag(replaceResultTransformer(/(?:\\n\\s*)/g, ''), trimResultTransformer);\n\nexport default oneLineTrim;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbmVMaW5lVHJpbS9vbmVMaW5lVHJpbS5qcyJdLCJuYW1lcyI6WyJUZW1wbGF0ZVRhZyIsInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsInJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciIsIm9uZUxpbmVUcmltIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxXQUFQLE1BQXdCLGdCQUF4QjtBQUNBLE9BQU9DLHFCQUFQLE1BQWtDLDBCQUFsQztBQUNBLE9BQU9DLHdCQUFQLE1BQXFDLDZCQUFyQzs7QUFFQSxJQUFNQyxjQUFjLElBQUlILFdBQUosQ0FDbEJFLHlCQUF5QixZQUF6QixFQUF1QyxFQUF2QyxDQURrQixFQUVsQkQscUJBRmtCLENBQXBCOztBQUtBLGVBQWVFLFdBQWYiLCJmaWxlIjoib25lTGluZVRyaW0uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVGVtcGxhdGVUYWcgZnJvbSAnLi4vVGVtcGxhdGVUYWcnO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuaW1wb3J0IHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi9yZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXInO1xuXG5jb25zdCBvbmVMaW5lVHJpbSA9IG5ldyBUZW1wbGF0ZVRhZyhcbiAgcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyKC8oPzpcXG5cXHMqKS9nLCAnJyksXG4gIHRyaW1SZXN1bHRUcmFuc2Zvcm1lcixcbik7XG5cbmV4cG9ydCBkZWZhdWx0IG9uZUxpbmVUcmltO1xuIl19","import TemplateTag from '../TemplateTag';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\n\nvar oneLineCommaLists = new TemplateTag(inlineArrayTransformer({ separator: ',' }), replaceResultTransformer(/(?:\\s+)/g, ' '), trimResultTransformer);\n\nexport default oneLineCommaLists;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbmVMaW5lQ29tbWFMaXN0cy9vbmVMaW5lQ29tbWFMaXN0cy5qcyJdLCJuYW1lcyI6WyJUZW1wbGF0ZVRhZyIsImlubGluZUFycmF5VHJhbnNmb3JtZXIiLCJ0cmltUmVzdWx0VHJhbnNmb3JtZXIiLCJyZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIiLCJvbmVMaW5lQ29tbWFMaXN0cyIsInNlcGFyYXRvciJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7QUFDQSxPQUFPQyx3QkFBUCxNQUFxQyw2QkFBckM7O0FBRUEsSUFBTUMsb0JBQW9CLElBQUlKLFdBQUosQ0FDeEJDLHVCQUF1QixFQUFFSSxXQUFXLEdBQWIsRUFBdkIsQ0FEd0IsRUFFeEJGLHlCQUF5QixVQUF6QixFQUFxQyxHQUFyQyxDQUZ3QixFQUd4QkQscUJBSHdCLENBQTFCOztBQU1BLGVBQWVFLGlCQUFmIiwiZmlsZSI6Im9uZUxpbmVDb21tYUxpc3RzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRlbXBsYXRlVGFnIGZyb20gJy4uL1RlbXBsYXRlVGFnJztcbmltcG9ydCBpbmxpbmVBcnJheVRyYW5zZm9ybWVyIGZyb20gJy4uL2lubGluZUFycmF5VHJhbnNmb3JtZXInO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuaW1wb3J0IHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi9yZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXInO1xuXG5jb25zdCBvbmVMaW5lQ29tbWFMaXN0cyA9IG5ldyBUZW1wbGF0ZVRhZyhcbiAgaW5saW5lQXJyYXlUcmFuc2Zvcm1lcih7IHNlcGFyYXRvcjogJywnIH0pLFxuICByZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIoLyg/OlxccyspL2csICcgJyksXG4gIHRyaW1SZXN1bHRUcmFuc2Zvcm1lcixcbik7XG5cbmV4cG9ydCBkZWZhdWx0IG9uZUxpbmVDb21tYUxpc3RzO1xuIl19","import TemplateTag from '../TemplateTag';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\n\nvar oneLineCommaListsOr = new TemplateTag(inlineArrayTransformer({ separator: ',', conjunction: 'or' }), replaceResultTransformer(/(?:\\s+)/g, ' '), trimResultTransformer);\n\nexport default oneLineCommaListsOr;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbmVMaW5lQ29tbWFMaXN0c09yL29uZUxpbmVDb21tYUxpc3RzT3IuanMiXSwibmFtZXMiOlsiVGVtcGxhdGVUYWciLCJpbmxpbmVBcnJheVRyYW5zZm9ybWVyIiwidHJpbVJlc3VsdFRyYW5zZm9ybWVyIiwicmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyIiwib25lTGluZUNvbW1hTGlzdHNPciIsInNlcGFyYXRvciIsImNvbmp1bmN0aW9uIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxXQUFQLE1BQXdCLGdCQUF4QjtBQUNBLE9BQU9DLHNCQUFQLE1BQW1DLDJCQUFuQztBQUNBLE9BQU9DLHFCQUFQLE1BQWtDLDBCQUFsQztBQUNBLE9BQU9DLHdCQUFQLE1BQXFDLDZCQUFyQzs7QUFFQSxJQUFNQyxzQkFBc0IsSUFBSUosV0FBSixDQUMxQkMsdUJBQXVCLEVBQUVJLFdBQVcsR0FBYixFQUFrQkMsYUFBYSxJQUEvQixFQUF2QixDQUQwQixFQUUxQkgseUJBQXlCLFVBQXpCLEVBQXFDLEdBQXJDLENBRjBCLEVBRzFCRCxxQkFIMEIsQ0FBNUI7O0FBTUEsZUFBZUUsbUJBQWYiLCJmaWxlIjoib25lTGluZUNvbW1hTGlzdHNPci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUZW1wbGF0ZVRhZyBmcm9tICcuLi9UZW1wbGF0ZVRhZyc7XG5pbXBvcnQgaW5saW5lQXJyYXlUcmFuc2Zvcm1lciBmcm9tICcuLi9pbmxpbmVBcnJheVRyYW5zZm9ybWVyJztcbmltcG9ydCB0cmltUmVzdWx0VHJhbnNmb3JtZXIgZnJvbSAnLi4vdHJpbVJlc3VsdFRyYW5zZm9ybWVyJztcbmltcG9ydCByZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIgZnJvbSAnLi4vcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyJztcblxuY29uc3Qgb25lTGluZUNvbW1hTGlzdHNPciA9IG5ldyBUZW1wbGF0ZVRhZyhcbiAgaW5saW5lQXJyYXlUcmFuc2Zvcm1lcih7IHNlcGFyYXRvcjogJywnLCBjb25qdW5jdGlvbjogJ29yJyB9KSxcbiAgcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyKC8oPzpcXHMrKS9nLCAnICcpLFxuICB0cmltUmVzdWx0VHJhbnNmb3JtZXIsXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBvbmVMaW5lQ29tbWFMaXN0c09yO1xuIl19","import TemplateTag from '../TemplateTag';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\n\nvar oneLineCommaListsAnd = new TemplateTag(inlineArrayTransformer({ separator: ',', conjunction: 'and' }), replaceResultTransformer(/(?:\\s+)/g, ' '), trimResultTransformer);\n\nexport default oneLineCommaListsAnd;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbmVMaW5lQ29tbWFMaXN0c0FuZC9vbmVMaW5lQ29tbWFMaXN0c0FuZC5qcyJdLCJuYW1lcyI6WyJUZW1wbGF0ZVRhZyIsImlubGluZUFycmF5VHJhbnNmb3JtZXIiLCJ0cmltUmVzdWx0VHJhbnNmb3JtZXIiLCJyZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIiLCJvbmVMaW5lQ29tbWFMaXN0c0FuZCIsInNlcGFyYXRvciIsImNvbmp1bmN0aW9uIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxXQUFQLE1BQXdCLGdCQUF4QjtBQUNBLE9BQU9DLHNCQUFQLE1BQW1DLDJCQUFuQztBQUNBLE9BQU9DLHFCQUFQLE1BQWtDLDBCQUFsQztBQUNBLE9BQU9DLHdCQUFQLE1BQXFDLDZCQUFyQzs7QUFFQSxJQUFNQyx1QkFBdUIsSUFBSUosV0FBSixDQUMzQkMsdUJBQXVCLEVBQUVJLFdBQVcsR0FBYixFQUFrQkMsYUFBYSxLQUEvQixFQUF2QixDQUQyQixFQUUzQkgseUJBQXlCLFVBQXpCLEVBQXFDLEdBQXJDLENBRjJCLEVBRzNCRCxxQkFIMkIsQ0FBN0I7O0FBTUEsZUFBZUUsb0JBQWYiLCJmaWxlIjoib25lTGluZUNvbW1hTGlzdHNBbmQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVGVtcGxhdGVUYWcgZnJvbSAnLi4vVGVtcGxhdGVUYWcnO1xuaW1wb3J0IGlubGluZUFycmF5VHJhbnNmb3JtZXIgZnJvbSAnLi4vaW5saW5lQXJyYXlUcmFuc2Zvcm1lcic7XG5pbXBvcnQgdHJpbVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3RyaW1SZXN1bHRUcmFuc2Zvcm1lcic7XG5pbXBvcnQgcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3JlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lcic7XG5cbmNvbnN0IG9uZUxpbmVDb21tYUxpc3RzQW5kID0gbmV3IFRlbXBsYXRlVGFnKFxuICBpbmxpbmVBcnJheVRyYW5zZm9ybWVyKHsgc2VwYXJhdG9yOiAnLCcsIGNvbmp1bmN0aW9uOiAnYW5kJyB9KSxcbiAgcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyKC8oPzpcXHMrKS9nLCAnICcpLFxuICB0cmltUmVzdWx0VHJhbnNmb3JtZXIsXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBvbmVMaW5lQ29tbWFMaXN0c0FuZDtcbiJdfQ==","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\n\nvar inlineLists = new TemplateTag(inlineArrayTransformer, stripIndentTransformer, trimResultTransformer);\n\nexport default inlineLists;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbmxpbmVMaXN0cy9pbmxpbmVMaXN0cy5qcyJdLCJuYW1lcyI6WyJUZW1wbGF0ZVRhZyIsInN0cmlwSW5kZW50VHJhbnNmb3JtZXIiLCJpbmxpbmVBcnJheVRyYW5zZm9ybWVyIiwidHJpbVJlc3VsdFRyYW5zZm9ybWVyIiwiaW5saW5lTGlzdHMiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLFdBQVAsTUFBd0IsZ0JBQXhCO0FBQ0EsT0FBT0Msc0JBQVAsTUFBbUMsMkJBQW5DO0FBQ0EsT0FBT0Msc0JBQVAsTUFBbUMsMkJBQW5DO0FBQ0EsT0FBT0MscUJBQVAsTUFBa0MsMEJBQWxDOztBQUVBLElBQU1DLGNBQWMsSUFBSUosV0FBSixDQUNsQkUsc0JBRGtCLEVBRWxCRCxzQkFGa0IsRUFHbEJFLHFCQUhrQixDQUFwQjs7QUFNQSxlQUFlQyxXQUFmIiwiZmlsZSI6ImlubGluZUxpc3RzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRlbXBsYXRlVGFnIGZyb20gJy4uL1RlbXBsYXRlVGFnJztcbmltcG9ydCBzdHJpcEluZGVudFRyYW5zZm9ybWVyIGZyb20gJy4uL3N0cmlwSW5kZW50VHJhbnNmb3JtZXInO1xuaW1wb3J0IGlubGluZUFycmF5VHJhbnNmb3JtZXIgZnJvbSAnLi4vaW5saW5lQXJyYXlUcmFuc2Zvcm1lcic7XG5pbXBvcnQgdHJpbVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3RyaW1SZXN1bHRUcmFuc2Zvcm1lcic7XG5cbmNvbnN0IGlubGluZUxpc3RzID0gbmV3IFRlbXBsYXRlVGFnKFxuICBpbmxpbmVBcnJheVRyYW5zZm9ybWVyLFxuICBzdHJpcEluZGVudFRyYW5zZm9ybWVyLFxuICB0cmltUmVzdWx0VHJhbnNmb3JtZXIsXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBpbmxpbmVMaXN0cztcbiJdfQ==","import TemplateTag from '../TemplateTag';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\n\nvar oneLineInlineLists = new TemplateTag(inlineArrayTransformer, replaceResultTransformer(/(?:\\s+)/g, ' '), trimResultTransformer);\n\nexport default oneLineInlineLists;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbmVMaW5lSW5saW5lTGlzdHMvb25lTGluZUlubGluZUxpc3RzLmpzIl0sIm5hbWVzIjpbIlRlbXBsYXRlVGFnIiwiaW5saW5lQXJyYXlUcmFuc2Zvcm1lciIsInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsInJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciIsIm9uZUxpbmVJbmxpbmVMaXN0cyJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7QUFDQSxPQUFPQyx3QkFBUCxNQUFxQyw2QkFBckM7O0FBRUEsSUFBTUMscUJBQXFCLElBQUlKLFdBQUosQ0FDekJDLHNCQUR5QixFQUV6QkUseUJBQXlCLFVBQXpCLEVBQXFDLEdBQXJDLENBRnlCLEVBR3pCRCxxQkFIeUIsQ0FBM0I7O0FBTUEsZUFBZUUsa0JBQWYiLCJmaWxlIjoib25lTGluZUlubGluZUxpc3RzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRlbXBsYXRlVGFnIGZyb20gJy4uL1RlbXBsYXRlVGFnJztcbmltcG9ydCBpbmxpbmVBcnJheVRyYW5zZm9ybWVyIGZyb20gJy4uL2lubGluZUFycmF5VHJhbnNmb3JtZXInO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuaW1wb3J0IHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi9yZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXInO1xuXG5jb25zdCBvbmVMaW5lSW5saW5lTGlzdHMgPSBuZXcgVGVtcGxhdGVUYWcoXG4gIGlubGluZUFycmF5VHJhbnNmb3JtZXIsXG4gIHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lcigvKD86XFxzKykvZywgJyAnKSxcbiAgdHJpbVJlc3VsdFRyYW5zZm9ybWVyLFxuKTtcblxuZXhwb3J0IGRlZmF1bHQgb25lTGluZUlubGluZUxpc3RzO1xuIl19","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\n\nvar stripIndent = new TemplateTag(stripIndentTransformer, trimResultTransformer);\n\nexport default stripIndent;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHJpcEluZGVudC9zdHJpcEluZGVudC5qcyJdLCJuYW1lcyI6WyJUZW1wbGF0ZVRhZyIsInN0cmlwSW5kZW50VHJhbnNmb3JtZXIiLCJ0cmltUmVzdWx0VHJhbnNmb3JtZXIiLCJzdHJpcEluZGVudCJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7O0FBRUEsSUFBTUMsY0FBYyxJQUFJSCxXQUFKLENBQ2xCQyxzQkFEa0IsRUFFbEJDLHFCQUZrQixDQUFwQjs7QUFLQSxlQUFlQyxXQUFmIiwiZmlsZSI6InN0cmlwSW5kZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRlbXBsYXRlVGFnIGZyb20gJy4uL1RlbXBsYXRlVGFnJztcbmltcG9ydCBzdHJpcEluZGVudFRyYW5zZm9ybWVyIGZyb20gJy4uL3N0cmlwSW5kZW50VHJhbnNmb3JtZXInO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuXG5jb25zdCBzdHJpcEluZGVudCA9IG5ldyBUZW1wbGF0ZVRhZyhcbiAgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lcixcbiAgdHJpbVJlc3VsdFRyYW5zZm9ybWVyLFxuKTtcblxuZXhwb3J0IGRlZmF1bHQgc3RyaXBJbmRlbnQ7XG4iXX0=","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\n\nvar stripIndents = new TemplateTag(stripIndentTransformer('all'), trimResultTransformer);\n\nexport default stripIndents;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHJpcEluZGVudHMvc3RyaXBJbmRlbnRzLmpzIl0sIm5hbWVzIjpbIlRlbXBsYXRlVGFnIiwic3RyaXBJbmRlbnRUcmFuc2Zvcm1lciIsInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsInN0cmlwSW5kZW50cyJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7O0FBRUEsSUFBTUMsZUFBZSxJQUFJSCxXQUFKLENBQ25CQyx1QkFBdUIsS0FBdkIsQ0FEbUIsRUFFbkJDLHFCQUZtQixDQUFyQjs7QUFLQSxlQUFlQyxZQUFmIiwiZmlsZSI6InN0cmlwSW5kZW50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUZW1wbGF0ZVRhZyBmcm9tICcuLi9UZW1wbGF0ZVRhZyc7XG5pbXBvcnQgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lciBmcm9tICcuLi9zdHJpcEluZGVudFRyYW5zZm9ybWVyJztcbmltcG9ydCB0cmltUmVzdWx0VHJhbnNmb3JtZXIgZnJvbSAnLi4vdHJpbVJlc3VsdFRyYW5zZm9ybWVyJztcblxuY29uc3Qgc3RyaXBJbmRlbnRzID0gbmV3IFRlbXBsYXRlVGFnKFxuICBzdHJpcEluZGVudFRyYW5zZm9ybWVyKCdhbGwnKSxcbiAgdHJpbVJlc3VsdFRyYW5zZm9ybWVyLFxuKTtcblxuZXhwb3J0IGRlZmF1bHQgc3RyaXBJbmRlbnRzO1xuIl19","import { stripIndents } from 'common-tags';\n\nimport { LogsQueryLanguage } from '../../types';\n\nexport interface SampleQuery {\n  title: string;\n  expr: Partial<Record<LogsQueryLanguage, string>>;\n}\n\nconst sqlOnlyGeneralQueries: SampleQuery[] = [\n  {\n    title:\n      'Use the JOIN command to match events between two log groups (LogGroupA, LogGroupB), based on common user IDs across the logs. ',\n    expr: {\n      SQL: stripIndents`SELECT A.transaction_id as txn_id_a, A.userId , A.instance_id as inst_id_a, B.instance_id as inst_id_b FROM \\`LogGroupA\\` as A INNER JOIN \\`LogGroupB\\` as B ON A.userId = B.userId WHERE B.Status='ERROR'`,\n    },\n  },\n  {\n    title: 'Find logs where duration is greater than the average duration of all log groups, using a sub-query',\n    expr: {\n      SQL: stripIndents`SELECT \\`@duration\\` FROM \\`LogGroupA\\`\n WHERE \\`@duration\\` > (\n SELECT avg(\\`@duration\\`) FROM \\`LogGroupA\\`\n WHERE \\`@type\\` = 'REPORT')`,\n    },\n  },\n  {\n    title:\n      'Find all logs relating to a Lambda function where level is ERROR, and order these logs by request id using a sub-query',\n    expr: {\n      SQL: stripIndents`select requestId, level, \\`@timestamp\\`, \\`@message\\` from \\`LogGroupA\\` where requestId IN (SELECT distinct\n  requestId FROM \\`LogGroupA\\` where level = 'ERROR') order by requestId`,\n    },\n  },\n  {\n    title: 'Find error logs from high-volume log streams using a sub-query. ',\n    expr: {\n      SQL: stripIndents`SELECT \n \\`@logStream\\`,\n COUNT(*) as error_count\n FROM \\`LogGroupA\\`\n WHERE \n \\`start\\` >= date_sub(current_timestamp(), 1)\n AND lower(\\`@message\\`) LIKE '%error%'\n AND \\`@logStream\\` IN (\n SELECT \\`@logStream\\`\n FROM \\`logs\\`\n GROUP BY \\`@logStream\\`\n HAVING COUNT(*) > 1000\n )\n GROUP BY \\`@logStream\\`\n ORDER BY error_count DESC`,\n    },\n  },\n  {\n    title: 'Extract parameter values from a JSON log group',\n    expr: {\n      SQL: stripIndents`SELECT query_name, get_json_object(\\`@message\\`, '$.answers[*].Rdata')\n  AS answers FROM \\`LogGroupA\\` Where query_type = 'A'`,\n    },\n  },\n  {\n    title: 'Find the intersection of elements for two columns based on eventName.',\n    expr: {\n      SQL: stripIndents`SELECT array_intersect(\n array(get_json_object(\\`column1\\`, '$.eventName')),\n array(get_json_object(\\`column2\\`, '$.eventName'))\n ) as matching_events\n FROM \\`LogGroupA\\`;`,\n    },\n  },\n  {\n    title: 'Return the top 25 most recently added log events.',\n    expr: {\n      SQL: 'SELECT `@timestamp`, `@message` FROM `LogGroupA` ORDER BY `@timestamp` DESC LIMIT 25;',\n    },\n  },\n  {\n    title: 'Find the number of exceptions logged every five minutes.',\n    expr: {\n      SQL: `SELECT window.start, COUNT(*) AS exceptionCount FROM \\`LogGroupA\\` WHERE \\`@message\\` LIKE '%Exception%' GROUP BY window(\\`@timestamp\\`, '5 minute') ORDER BY exceptionCount DESC`,\n    },\n  },\n  {\n    title: 'Return a list of log events that are not exceptions.',\n    expr: {\n      SQL: `SELECT \\`@message\\` FROM \\`LogGroupA\\` WHERE \\`@message\\` NOT LIKE '%Exception%'`,\n    },\n  },\n  {\n    title: 'Identify faults on API calls.',\n    expr: {\n      SQL: 'Select @timestamp, @logStream as instanceId, ExceptionMessage from `LogGroupA` where Operation = \"x\" and Fault > 0',\n    },\n  },\n  {\n    title:\n      'Return the number of exceptions logged every five minutes using regex where exception is not case sensitive.',\n    expr: {\n      SQL: `SELECT window.start, COUNT(*) AS exceptionCount FROM \\`LogGroupA\\` WHERE \\`@message\\` LIKE '%Exception%' GROUP BY window(\\`@timestamp\\`, '5 minute') ORDER BY exceptionCount DESC`,\n    },\n  },\n  {\n    title:\n      'Count the number of logs per minute over the last 24 hours, grouping them into one-minute time buckets and sorting from newest to oldest, and only consider those groups that have error_count greater than zero.',\n    expr: {\n      SQL: stripIndents`SELECT \n date(\\`@timestamp\\`) as log_date,\n \\`@logStream\\`,\n COUNT(*) as total_messages,\n SUM(CASE WHEN lower(\\`@message\\`) LIKE '%error%' THEN 1 ELSE 0 END) as error_count,\n SUM(CASE WHEN lower(\\`@message\\`) LIKE '%warn%' THEN 1 ELSE 0 END) as warning_count\n FROM \\`LogGroupA\\`\n WHERE \\`@timestamp\\` >= date_sub(current_timestamp(), 7)\n GROUP BY date(\\`startTime\\`), \\`@logStream\\`\n HAVING error_count > 0\n ORDER BY error_count DESC`,\n    },\n  },\n  {\n    title:\n      'Calculate the total count of logs and unique streams, along with the earliest and latest timestamps for all logs from the past 24 hours.',\n    expr: {\n      SQL: stripIndents`SELECT \n COUNT(*) as total_logs,\n COUNT(DISTINCT \\`@logStream\\`) as unique_streams,\n MIN(\\`@timestamp\\`) as earliest_log,\n MAX(\\`startTime\\`) as latest_log\n FROM \\`LogGroupA\\`\n WHERE \\`startTime\\` >= date_sub(current_timestamp(), 1)`,\n    },\n  },\n  {\n    title:\n      \"Show the top 10 most active log streams from the past 24 hours, displaying each stream's total log count and its first and last log timestamps, sorted by highest log count first.\",\n    expr: {\n      SQL: stripIndents`SELECT \\`@logStream\\`, COUNT(*) as log_count, MIN(\\`@timestamp\\`) as first_seen, MAX(\\`@timestamp\\`) as last_seen FROM \\`LogGroupA\\`WHERE \\`startTime\\` >= date_sub(current_timestamp(), 24)GROUP BY \\`@logStream\\`ORDER BY log_count DESC LIMIT 10`,\n    },\n  },\n  {\n    title: 'Count the number of error messages per hour over the last 24 hours, sorted chronologically by hour.',\n    expr: {\n      SQL: stripIndents`SELECT \n hour(\\`@timestamp\\`) as hour_of_day,\n COUNT(*) as error_count\n FROM \\`LogGroupA\\`\n WHERE lower(\\`@message\\`) LIKE '%error%'\n AND \\`@timestamp\\` >= date_sub(current_timestamp(), 24)\n GROUP BY hour(\\`@timestamp\\`)\n ORDER BY hour_of_day`,\n    },\n  },\n  {\n    title:\n      'Categorize and count all log messages from the last 24 hours into different log levels (ERROR, WARNING, INFO, OTHER), based on message content.',\n    expr: {\n      SQL: stripIndents`SELECT \n CASE \n WHEN lower(\\`@message\\`) LIKE '%error%' THEN 'ERROR'\n WHEN lower(\\`@message\\`) LIKE '%warn%' THEN 'WARNING'\n WHEN lower(\\`@message\\`) LIKE '%info%' THEN 'INFO'\n ELSE 'OTHER'\n END as log_level,\n COUNT(*) as message_count\n FROM \\`LogGroupA\\`\n WHERE \\`startTime\\` >= date_sub(current_timestamp(), 1)\n GROUP BY CASE \n WHEN lower(\\`@message\\`) LIKE '%error%' THEN 'ERROR'\n WHEN lower(\\`@message\\`) LIKE '%warn%' THEN 'WARNING'\n WHEN lower(\\`@message\\`) LIKE '%info%' THEN 'INFO'\n ELSE 'OTHER'\n END\n ORDER BY message_count DESC`,\n    },\n  },\n  {\n    title:\n      'Count the number of logs per minute over the last 24 hours, and group them into one-minute time buckets and sort from newest to oldest.',\n    expr: {\n      SQL: stripIndents`SELECT \n date_trunc('minute', startTime) as time_bucket,\n COUNT(*) as log_count\n FROM \\`LogGroupA\\`\n WHERE startTime >= date_sub(current_timestamp(), 1)\n GROUP BY date_trunc('minute', \\`startTime\\`)\n ORDER BY time_bucket DESC`,\n    },\n  },\n  {\n    title:\n      'Find log messages that were truncated, based on analysis of the length of the @message field in the log events.',\n    expr: {\n      SQL: stripIndents`SELECT \n length(\\`@message\\`) as msg_length,\n COUNT(*) as count,\n MIN(\\`@message\\`) as sample_message\n FROM \\`LogGroupA\\`\n WHERE \\`startTime\\` >= date_sub(current_timestamp(), 1)\n GROUP BY length(\\`@message\\`)\n HAVING count > 10\n ORDER BY msg_length DESC\n LIMIT 10`,\n    },\n  },\n  {\n    title:\n      'Show the top 10 most common message lengths from the last 24 hours. It displays the length, count, and a sample message for each message length that appears more than 10 times, sorted by longest messages first.',\n    expr: {\n      SQL: 'SELECT `@logStream`, MAX(`startTime`) as last_log_time, UNIX_TIMESTAMP() - UNIX_TIMESTAMP(MAX(`startTime`)) as seconds_since_last_log FROM `LogGroupA`GROUP BY `@logStream`HAVING seconds_since_last_log > 3600 ORDER BY seconds_since_last_log DESC',\n    },\n  },\n  {\n    title:\n      'Find duplicate log messages that occurred more than 10 times in the last 24 hours, showing their count, first and last occurrence times, and number of streams they appeared in, sorted by most frequent messages first',\n    expr: {\n      SQL: stripIndents`SELECT \n \\`@message\\`,\n COUNT(*) as occurrence_count,\n MIN(\\`@timestamp\\`) as first_seen,\n MAX(\\`@timestamp\\`) as last_seen,\n COUNT(DISTINCT \\`@logStream\\`) as stream_count\n FROM \\`LogGroupA\\`\n WHERE \\`@timestamp\\` >= date_sub(current_timestamp(), 1)\n GROUP BY \\`@message\\`\n HAVING occurrence_count > 10\n ORDER BY occurrence_count DESC\"`,\n    },\n  },\n  {\n    title:\n      'Count unique message patterns per hour over the last 24 hours. When doing this, it considers only the first 50 characters of longer messages. Results are sorted from most recent hour to oldest.',\n    expr: {\n      SQL: stripIndents`SSELECT \n date_trunc('hour', startTime) as hour_window,\n COUNT(DISTINCT \n CASE \n WHEN length(\\`@message\\`) < 50 THEN substr(\\`@message\\`, 1, length(\\`@message\\`))\n ELSE substr(\\`@message\\`, 1, 50)\n END\n ) as unique_patterns\n FROM \\`LogGroupA\\`\n WHERE startTime >= date_sub(current_timestamp(), 24)\n GROUP BY date_trunc('hour', startTime)\n ORDER BY hour_window DESC\"`,\n    },\n  },\n  {\n    title:\n      'Calculate the success and failure rates of requests, based on occurrence of success or failure keywords in the log.',\n    expr: {\n      SQL: stripIndents`SELECT \n date_trunc('minute', \\`@timestamp\\`) as minute,\n COUNT(*) as total_requests,\n SUM(CASE WHEN lower(\\`@message\\`) LIKE '%success%' THEN 1 ELSE 0 END) as successful_requests,\n SUM(CASE WHEN lower(\\`@message\\`) LIKE '%fail%' OR lower(\\`@message\\`) LIKE '%error%' THEN 1 ELSE 0 END) as failed_requests,\n ROUND(SUM(CASE WHEN lower(\\`@message\\`) LIKE '%success%' THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) as success_rate\n FROM \\`LogGroupA\\`\n WHERE startTime >= date_sub(current_timestamp(), 1)\n GROUP BY date_trunc('minute', startTime)\n ORDER BY minute DESC\"`,\n    },\n  },\n  {\n    title: 'Identify and extract specific patterns from messages.',\n    expr: {\n      SQL: stripIndents`SELECT \n \\`@logStream\\`,\n regexp_extract(\\`@message\\`, '([A-Z0-9]{8})', 1) as id_pattern,\n substring_index(\\`@message\\`, ' ', 2) as first_two_words,\n left(\\`@message\\`, 10) as message_start,\n right(\\`@message\\`, 10) as message_end,\n length(trim(\\`@message\\`)) - length(replace(lower(\\`@message\\`), ' ', '')) + 1 as word_count\n FROM \\`LogGroupA\\`\n WHERE startTime >= date_sub(current_timestamp(), 1)\"`,\n    },\n  },\n  {\n    title: 'Mask numbers in the log events, replacing them with asterisks.',\n    expr: {\n      SQL: stripIndents`SELECT \n \\`@logStream\\`,\n translate(\\`@message\\`, '{}[]()',' ') as cleaned_message,\n regexp_replace(\\`@message\\`, '[0-9]', '*') as numbers_masked,\n concat_ws(' - ', \\`@logStream\\`, substr(\\`@message\\`, 1, 50)) as combined_log,\n repeat('*', length(\\`@message\\`)) as message_mask\n FROM \\`LogGroupA\\`\n WHERE startTime >= date_sub(current_timestamp(), 1)\"`,\n    },\n  },\n  {\n    title: 'Find log streams that have more than 50 error logs in the last 24 hours',\n    expr: {\n      SQL: stripIndents`SELECT \n \\`@logStream\\`,\n COUNT(*) as total_logs,\n COUNT(CASE WHEN lower(\\`@message\\`) LIKE '%error%' THEN 1 END) as error_count\n FROM \\`LogGroupA\\`\n WHERE \\`@timestamp\\` >= date_sub(current_timestamp(), 1)\n GROUP BY \\`@logStream\\`\n HAVING error_count > 50\n ORDER BY error_count DESC\"`,\n    },\n  },\n];\n\nconst pplOnlyGeneralQueries: SampleQuery[] = [\n  {\n    title:\n      'Calculate the total message length over five-minute intervals, and then find the average value across the five-minute intervals.\t',\n    expr: {\n      PPL: 'eval len_message = length(`@message`) | stats count(len_message) as log_bytes by span(`@timestamp`, 5m) | stats avg(log_bytes) | head 10',\n    },\n  },\n  {\n    title: 'Return the top 25 most recently added log events.\t',\n    expr: {\n      PPL: 'fields `@timestamp`, `@message` | sort - `@timestamp` | head 25',\n    },\n  },\n  {\n    title: 'Return a list of log events that are not exceptions.\t',\n    expr: {\n      PPL: \"eval result = LIKE(`@message`, '%Exception%') | where result = false\",\n    },\n  },\n  {\n    title: 'Identify faults on API calls.\t',\n    expr: {\n      PPL: stripIndents`\"where Operation = <operation> AND Fault > 0\n | fields \\`@timestamp\\`, \\`@logStream\\` as instanceId, ExceptionMessage\"`,\n    },\n  },\n  {\n    title:\n      'Return the number of exceptions logged every five minutes using regex where exception is not case sensitive.\t',\n    expr: {\n      PPL: 'eval result = LIKE(`@message`, \\'%Exception%\\') | where result = true | stats count() as exceptionCount by span(`@timestamp`, \"5m\") | sort -exceptionCount',\n    },\n  },\n  {\n    title: 'Parse the data and counts the number of fields.\t',\n    expr: {\n      PPL: stripIndents`\"eval result = LIKE(\\`@message\\`, 'EndTime') | eval result = true |\n parse \\`@message\\` '.+=(?<day>[A-Za-z]{3}), \\d+' | stats count() by day | head 25\"`,\n    },\n  },\n  {\n    title:\n      'Examine message length patterns per log stream to identify potential truncation issues or abnormal logging behavior that might indicate problems.\t',\n    expr: {\n      PPL: stripIndents`eval msg_length = length(\\`@message\\`)| stats avg(msg_length) as avg_length, max(msg_length) as max_length, min(msg_length) as min_length by \\`@logStream\\`| sort - avg_length`,\n    },\n  },\n  {\n    title: 'Analyze log volume trends over time to identify patterns and potential issues in system behavior.\t',\n    expr: {\n      PPL: stripIndents`\"eval date = ADDDATE(CURRENT_DATE(), -1) | eval result = TIMESTAMP(date) | where \\`@timestamp\\` > result | \n stats count() as log_count by span(\\`@timestamp\\`, 1h) \n | sort - log_count\n | head 10\"`,\n    },\n  },\n  {\n    title: 'Group and count error messages to identify the most frequent issues affecting the system.\t',\n    expr: {\n      PPL: stripIndents`eval result = LIKE(\\`@message\\`, \"%Error%\") | where result = true | stats count() by \\`@logStream\\` | head 10`,\n    },\n  },\n  {\n    title: 'Find the top causes of error logs.\t',\n    expr: {\n      PPL: stripIndents`eval result = LIKE(\\`@message\\`, \"%Error%\") | where result = true | top 2 \\`@logStream\\` | head 10`,\n    },\n  },\n  {\n    title: 'Find the log streams that contribute the least error log events.\t',\n    expr: {\n      PPL: stripIndents`eval result = LIKE(\\`@message\\`, \"%Error%\") | where result = true | rare \\`@logStream\\` | head 10`,\n    },\n  },\n  {\n    title:\n      'Calculate the total message length over five-minute intervals, and then find the average value across the five-minute intervals.\t',\n    expr: {\n      PPL: stripIndents`eval len_message = length(\\`@message\\`) | stats count(len_message) as log_bytes by span(\\`@timestamp\\`, 5m) | stats avg(log_bytes) | head 10`,\n    },\n  },\n  {\n    title: 'Find the log events that are not exceptions.\t',\n    expr: {\n      PPL: stripIndents`eval isException = LIKE(\\`@message\\`, '%exception%') | where isException = false | fields \\`@logStream\\`, \\`@message\\` | head 10`,\n    },\n  },\n  {\n    title: 'Return the top 25 log events sorted by timestamp.\t',\n    expr: {\n      PPL: stripIndents`fields \\`@logStream\\`, \\`@message\\` | sort -\\`@timestamp\\` | head 25`,\n    },\n  },\n  {\n    title: 'Find and display the error count.\t',\n    expr: {\n      PPL: stripIndents`where Operation = \"x\" and Fault > 0 | fields \\`@timestamp\\`, \\`@logStream\\`, ExceptionMessage | head 20`,\n    },\n  },\n];\n\nexport const generalQueries: SampleQuery[] = [\n  {\n    title: 'Find the 25 most recently added log events',\n    expr: {\n      CWLI: 'fields @timestamp, @message | sort @timestamp desc | limit 25',\n      SQL: stripIndents`SELECT \\`@timestamp\\`, \\`@message\\`\n      FROM \\`log_group\\`\n      ORDER BY \\`@timestamp\\` DESC\n      LIMIT 25`,\n      PPL: stripIndents`fields \\`@timestamp\\`, \\`@message\\`\n| sort - \\`@timestamp\\`\n| head 25\n`,\n    },\n  },\n  {\n    title: 'Get a list of the number of exceptions per hour',\n    expr: {\n      CWLI: stripIndents`filter @message like /Exception/\n| stats count(*) as exceptionCount by bin(1h)\n| sort exceptionCount desc`,\n      SQL: stripIndents`SELECT window.start, COUNT(*) AS exceptionCount\nFROM \\`log_group\\`\nWHERE \\`@message\\` LIKE '%Exception%'\nGROUP BY window(\\`@timestamp\\`, '1 hour')\nORDER BY exceptionCount DESC`,\n      PPL: stripIndents`where abs(\\`@message\\`, \"%Exception%\")\n| stats count() as exceptionCount by span(\\`@timestamp\\`, 1h)\n| sort - exceptionCount`,\n    },\n  },\n  {\n    title: \"Get a list of log events that aren't exceptions.\",\n    expr: {\n      CWLI: 'fields @message | filter @message not like /Exception/',\n      SQL: stripIndents`SELECT \\`@message\\`\nFROM \\`log_group\\`\nWHERE \\`@message\\` NOT LIKE '%Exception%'`,\n      PPL: stripIndents`fields \\`@message\\`\n| where not like(\\`@message\\`, \"%Exception%\")`,\n    },\n  },\n  {\n    title: 'Get the most recent log event for each unique value of the server field',\n    expr: {\n      CWLI: stripIndents`fields @timestamp, server, severity, message\n| sort @timestamp asc\n| dedup server`,\n      PPL: stripIndents`fields \\`@timestamp\\`, server, severity, message\n| sort \\`@timestamp\\`\n| dedup server`,\n    },\n  },\n  {\n    title: 'Get the most recent log event for each unique value of the server field for each severity type',\n    expr: {\n      CWLI: stripIndents`fields @timestamp, server, severity, message\n| sort @timestamp desc\n| dedup server, severity`,\n      PPL: stripIndents`fields \\`@timestamp\\`, server, severity, message\n| sort - \\`@timestamp\\`\n| dedup server`,\n    },\n  },\n  {\n    title: 'Number of exceptions logged every 5 minutes',\n    expr: {\n      CWLI: 'filter @message like /Exception/ | stats count(*) as exceptionCount by bin(5m) | sort exceptionCount desc',\n      SQL: stripIndents`SELECT window.start, COUNT(*) AS exceptionCount\nFROM \\`log_group\\`\nWHERE \\`@message\\` LIKE '%Exception%'\nGROUP BY window(\\`@timestamp\\`, '5 minute')\nORDER BY exceptionCount DESC`,\n      PPL: stripIndents`where like(\\`@message\\`, \"%Exception%\")\n| stats count() as exceptionCount by span(\\`@timestamp\\`, 5m)\n| sort - exceptionCount`,\n    },\n  },\n  ...sqlOnlyGeneralQueries,\n  ...pplOnlyGeneralQueries,\n];\n\nexport const lambdaSamples: SampleQuery[] = [\n  {\n    title: 'View latency statistics for 5-minute intervals',\n    expr: {\n      CWLI: stripIndents`filter @type = \"REPORT\" |\n                           stats avg(@duration), max(@duration), min(@duration) by bin(5m)`,\n      SQL: stripIndents`SELECT window.start, AVG(\\`@duration\\`) AS averageDuration,\n                            MAX(\\`@duration\\`) AS maxDuration,\n                            MIN(\\`@duration\\`) AS minDuration\n                            FROM \\`log_group\\`\n                            WHERE \\`@type\\` = 'REPORT'\n                            GROUP BY window(\\`@timestamp\\`, '5 minute')`,\n    },\n  },\n  {\n    title: 'Determine the amount of overprovisioned memory',\n    expr: {\n      CWLI: stripIndents`filter @type = \"REPORT\"\n          | stats max(@memorySize / 1000 / 1000) as provisionedMemoryMB,\n            min(@maxMemoryUsed / 1000 / 1000) as smallestMemoryRequestMB,\n            avg(@maxMemoryUsed / 1000 / 1000) as avgMemoryUsedMB,\n            max(@maxMemoryUsed / 1000 / 1000) as maxMemoryUsedMB,\n            provisionedMemoryMB - maxMemoryUsedMB as overProvisionedMB\n        `,\n      SQL: stripIndents`SELECT MAX(\\`@memorySize\\` / 1000 / 1000) AS provisonedMemoryMB,\n          MIN(\\`@maxMemoryUsed\\` / 1000 / 1000) AS smallestMemoryRequestMB,\n          AVG(\\`@maxMemoryUsed\\` / 1000 / 1000) AS avgMemoryUsedMB,\n          MAX(\\`@maxMemoryUsed\\` / 1000 / 1000) AS maxMemoryUsedMB,\n          MAX(\\`@memorySize\\` / 1000 / 1000) - MAX(\\`@maxMemoryUsed\\` / 1000 / 1000) AS overProvisionedMB\n          FROM \\`log_group\\`\n          WHERE \\`@type\\` = 'REPORT'`,\n    },\n  },\n  {\n    title: 'Find the most expensive requests',\n    expr: {\n      CWLI: stripIndents`filter @type = \"REPORT\"\n        | fields @requestId, @billedDuration\n        | sort by @billedDuration desc`,\n      SQL: stripIndents`SELECT\\`@requestId\\`, \\`@billedDuration\\`\n              FROM \\`log_group\\`\n              WHERE \\`@type\\` = 'REPORT'\n              ORDER BY \\`@billedDuration\\` DESC`,\n      PPL: stripIndents`where \\`@type\\` = 'REPORT'\n            | fields \\`@requestId\\`, \\`@billedDuration\\`\n            | sort - \\`@billedDuration\\``,\n    },\n  },\n];\n\nexport const vpcSamples: SampleQuery[] = [\n  {\n    title: 'Find the top 15 packet transfers across hosts',\n    expr: {\n      CWLI: stripIndents`stats sum(packets) as packetsTransferred by srcAddr, dstAddr\n          | sort packetsTransferred  desc\n          | limit 15`,\n      SQL: stripIndents`SELECT \\`srcAddr\\`, \\`dstAddr\\`, SUM(\\`packets\\`) AS packetsTransferred\n                FROM \\`log_group\\`\n                GROUP BY \\`srcAddr\\`, \\`dstAddr\\`\n                ORDER BY packetsTransferred DESC\n                LIMIT 15;`,\n    },\n  },\n\n  {\n    title: 'Find the IP addresses that use UDP as a data transfer protocol',\n    expr: {\n      CWLI: 'filter protocol=17 | stats count(*) by srcAddr',\n      SQL: stripIndents`SELECT \\`srcAddr\\`, COUNT(*) AS totalCount\n                FROM \\`log_group\\`\n                WHERE \\`protocol\\` = 17\n                GROUP BY srcAddr;`,\n    },\n  },\n  {\n    title: 'Find the IP addresses where flow records were skipped during the capture window',\n    expr: {\n      CWLI: stripIndents`filter logStatus=\"SKIPDATA\"\n                | stats count(*) by bin(1h) as t\n                | sort t`,\n      SQL: stripIndents`SELECT window.start, COUNT(*) AS totalCount\n              FROM \\`log_group\\`\n              WHERE \\`logStatus\\` = 'SKIPDATA'\n              GROUP BY window(\\`@timestamp\\`, '1 minute')\n              ORDER BY window.start`,\n      PPL: stripIndents`where logStatus=\"SKIPDATA\"\n              | stats count() by span(\\`@timestamp\\`, 1h) as t\n              | sort t`,\n    },\n  },\n  {\n    title: 'Average, min, and max byte transfers by source and destination IP addresses',\n    expr: {\n      CWLI: 'stats sum(bytes) as bytesTransferred by srcAddr, dstAddr | sort bytesTransferred desc | limit 10',\n      SQL: stripIndents`SELECT \\`srcAddr\\`, \\`dstAddr\\`, AVG(\\`bytes\\`),\n    MIN(\\`bytes\\`), MAX(\\`bytes\\`)\n    FROM \\`log_group\\`\n    GROUP BY \\`srcAddr\\`, \\`dstAddr\\``,\n    },\n  },\n\n  {\n    title: 'Top 10 byte transfers by source and destination IP addresses',\n    expr: {\n      CWLI: 'stats sum(bytes) as bytesTransferred by srcAddr, dstAddr | sort bytesTransferred desc | limit 10',\n      SQL: stripIndents`SELECT \\`srcAddr\\`, \\`dstAddr\\`, SUM(\\`bytes\\`) as bytesTransferred\n    FROM \\`log_group\\`\n    GROUP BY \\`srcAddr\\`, \\`dstAddr\\`\n    ORDER BY bytesTransferred DESC\n    LIMIT 10`,\n    },\n  },\n  {\n    title: 'Top 20 source IP addresses with highest number of rejected requests',\n    expr: {\n      CWLI: 'filter action=\"REJECT\" | stats count(*) as numRejections by srcAddr | sort numRejections desc | limit 20',\n      SQL: stripIndents`SELECT \\`srcAddr\\`, COUNT(*) AS numRejections\n              FROM \\`log_group\\`\n              WHERE \\`action\\` = 'REJECT'\n              GROUP BY \\`srcAddr\\`\n              ORDER BY numRejections DESC\n              LIMIT 20`,\n    },\n  },\n  {\n    title: 'Find the 10 DNS resolvers with the highest number of requests.',\n    expr: {\n      CWLI: stripIndents`stats count(*) as numRequests by resolverIp\n            | sort numRequests desc\n            | limit 10`,\n      SQL: stripIndents`SELECT \\`resolverIp\\`, COUNT(*) AS numRequests\n                FROM \\`log_group\\`\n                GROUP BY \\`resolverIp\\`\n                ORDER BY numRequests DESC\n                LIMIT 10`,\n    },\n  },\n  {\n    title: 'Find the number of records by domain and subdomain where the server failed to complete the DNS request.',\n    expr: {\n      CWLI: stripIndents`filter responseCode=\"SERVFAIL\" | stats count(*) by queryName`,\n      SQL: stripIndents`SELECT \\`queryName\\`, COUNT(*)\n    FROM \\`log_group\\`\n    WHERE \\`responseCode\\` = 'SERVFAIL'\n    GROUP BY \\`queryName\\``,\n      PPL: stripIndents`where \\`responseCode\\` = 'SERVFAIL'\n    | stats count() by \\`queryName\\``,\n    },\n  },\n  {\n    title: 'Number of requests received every 10 minutes by edge location',\n    expr: {\n      CWLI: 'stats count(*) by queryType, bin(10m)',\n      SQL: stripIndents`SELECT window.start, \\`queryType\\`,\n    COUNT(*) AS totalCount\n    FROM \\`log_group\\`\n    GROUP BY window(\\`@timestamp\\`, '10 minute'), \\`queryType\\``,\n      PPL: 'stats count() by queryType, span(`@timestamp`, 10m)',\n    },\n  },\n];\n\nexport const cloudtrailSamples: SampleQuery[] = [\n  {\n    title: 'Find the number of log entries for each service, event type, and AWS Region',\n    expr: {\n      CWLI: 'stats count(*) by eventSource, eventName, awsRegion',\n      PPL: 'stats count() by `eventSource`, `eventName`, `awsRegion`',\n      SQL: stripIndents`SELECT \\`eventSource\\`, \\`eventName\\`,\n    \\`awsRegion\\`, COUNT(*)\n    FROM \\`log_group\\`\n    GROUP BY \\`eventSource\\`, \\`eventName\\`,\n    \\`awsRegion\\``,\n    },\n  },\n  {\n    title: 'Find the Amazon EC2 hosts that were started or stopped in a given AWS Region',\n    expr: {\n      CWLI: 'filter (eventName=\"StartInstances\" or eventName=\"StopInstances\") and awsRegion=\"us-east-2',\n      PPL: stripIndents`where \\`eventName\\` = 'StartInstances'\n    OR \\`eventName\\` = 'StopInstances'\n    AND \\`awsRegion\\` = 'us-east-2'`,\n      SQL: stripIndents`SELECT \\`@timestamp\\`, \\`@message\\`\n    FROM \\`log_group\\`\n    WHERE \\`eventName\\` = 'StartInstances'\n    OR \\`eventName\\` = 'StopInstances'\n    AND \\`awsRegion\\` = 'us-east-2'`,\n    },\n  },\n  {\n    title: 'Find the AWS Regions, user names, and ARNs of newly created IAM users',\n    expr: {\n      CWLI: stripIndents`filter eventName=\"CreateUser\"\n            | fields awsRegion, requestParameters.userName, responseElements.user.arn`,\n      PPL: stripIndents`where \\`eventName\\` = 'CreateUser'\n    | fields \\`awsRegion\\`, \\`requestParameters.userName\\`, \\`responseElements.user.arn\\``,\n      SQL: stripIndents`SELECT \\`awsRegion\\`, \\`requestParameters.userName\\`,\n            \\`responseElements.user.arn\\`\n            FROM \\`log_group\\`\n            WHERE \\`eventName\\` = 'CreateUser'`,\n    },\n  },\n  {\n    title: 'Find the number of records where an exception occurred while invoking the API UpdateTrail',\n    expr: {\n      CWLI: stripIndents`filter eventName=\"UpdateTrail\" and ispresent(errorCode)\n    | stats count(*) by errorCode, errorMessage`,\n      PPL: stripIndents`where eventName = \"UpdateTrail\" and isnotnull(errorCode)\n    | stats count() by errorCode, errorMessage`,\n      SQL: stripIndents`SELECT \\`errorCode\\`, \\`errorMessage\\`, COUNT(*)\n    FROM \\`log_group\\`\n    WHERE \\`eventName\\` = 'UpdateTrail'\n    AND \\`errorCode\\` IS NOT NULL\n    GROUP BY \\`errorCode\\`, \\`errorMessage\\``,\n    },\n  },\n  {\n    title: 'Find log entries where TLS 1.0 or 1.1 was used',\n    expr: {\n      CWLI: stripIndents`filter tlsDetails.tlsVersion in [ \"TLSv1\", \"TLSv1.1\" ]\n    | stats count(*) as numOutdatedTlsCalls by userIdentity.accountId, recipientAccountId, eventSource, eventName, awsRegion, tlsDetails.tlsVersion, tlsDetails.cipherSuite, userAgent\n    | sort eventSource, eventName, awsRegion, tlsDetails.tlsVersion`,\n      PPL: stripIndents`where tlsDetails.tlsVersion in ('TLSv1', 'TLSv1.1')\n    | stats count() as numOutdatedTlsCalls by\n    \\`userIdentity.accountId\\`, \\`recipientAccountId\\`,\n    \\`eventSource\\`, \\`eventName\\`, \\`awsRegion\\`\n    \\`tlsDetails.tlsVersion\\`, \\`tlsDetails.cipherSuite\\`\n    \\`userAgent\\`\n    | sort \\`eventSource\\`, \\`eventName\\`, \\`awsRegion\\`, \\`tlsDetails.tlsVersion\\``,\n      SQL: stripIndents`SELECT \\`userIdentity.accountId\\`, \\`recipientAccountId\\`, \\`eventSource\\`,\n    \\`eventName\\`, \\`awsRegion\\`, \\`tlsDetails.tlsVersion\\`,\n    \\`tlsDetails.cipherSuite\\`, \\`userAgent\\`, COUNT(*) AS numOutdatedTlsCalls\n    FROM \\`log_group\\`\n    WHERE \\`tlsDetails.tlsVersion\\` IN ('TLSv1', 'TLSv1.1')\n    GROUP BY \\`userIdentity.accountId\\`, \\`recipientAccountId\\`, \\`eventSource\\`,\n    \\`eventName\\`, \\`awsRegion\\`, \\`tlsDetails.tlsVersion\\`,\n    \\`tlsDetails.cipherSuite\\`, \\`userAgent\\`\n    ORDER BY \\`eventSource\\`, \\`eventName\\`, \\`awsRegion\\`, \\`tlsDetails.tlsVersion\\``,\n    },\n  },\n  {\n    title: 'Find the number of calls per service that used TLS versions 1.0 or 1.1',\n    expr: {\n      CWLI: stripIndents`filter tlsDetails.tlsVersion in [ \"TLSv1\", \"TLSv1.1\" ]\n    | stats count(*) as numOutdatedTlsCalls by eventSource\n    | sort numOutdatedTlsCalls desc`,\n      PPL: stripIndents`where \\`tlsDetails.tlsVersion\\` in ('TLSv1', 'TLSv1.1')\n    | stats count() as numOutdatedTlsCalls by \\`eventSource\\`\n    | sort - numOutdatedTlsCalls`,\n      SQL: stripIndents`SELECT \\`eventSource\\`, COUNT(*) AS numOutdatedTlsCalls\n    FROM \\`log_group\\`\n    WHERE \\`tlsDetails.tlsVersion\\` IN ('TLSv1', 'TLSv1.1')\n    GROUP BY \\`eventSource\\`\n    ORDER BY numOutdatedTlsCalls DESC`,\n    },\n  },\n  {\n    title: 'Number of log entries by region and EC2 event type',\n    expr: {\n      CWLI: 'filter eventSource=\"ec2.amazonaws.com\" | stats count(*) as eventCount by eventName, awsRegion | sort eventCount desc',\n      PPL: stripIndents`where \\`eventSource\\` = 'ec2.amazonaws.com'\n    | stats count() as eventCount by \\`eventName\\`, \\`awsRegion\\`\n    | sort - eventCount\n    `,\n      SQL: stripIndents`SELECT \\`eventName\\`, \\`awsRegion\\`,\n    COUNT(*) AS eventCount\n    FROM \\`log_group\\`\n    WHERE \\`eventSource\\` = 'ec2.amazonaws.com'\n    GROUP BY \\`eventName\\`, \\`awsRegion\\`\n    ORDER BY eventCount DESC`,\n    },\n  },\n];\nexport const natSamples: SampleQuery[] = [\n  {\n    title: 'Find the instances that are sending the most traffic through your NAT gateway',\n    expr: {\n      CWLI: stripIndents`filter (dstAddr like 'x.x.x.x' and srcAddr like 'y.y.')\n    | stats sum(bytes) as bytesTransferred by srcAddr, dstAddr\n    | sort bytesTransferred desc\n    | limit 10`,\n      PPL: stripIndents`where like(dstAddr, \"x.x.x.x\") and like(srcAddr like \"y.y.\")\n    | stats sum(bytes) as bytesTransferred by srcAddr, dstAddr\n    | sort - bytesTransferred\n    | head 10`,\n      SQL: stripIndents`SELECT \\`srcAddr\\`, \\`dstAddr\\`,\n    SUM(\\`bytes\\`) AS bytesTransferred\n    FROM \\`log_group\\`\n    WHERE \\`dstAddr\\` LIKE 'x.x.x.x'\n    AND \\`srcAddr\\` LIKE \\`y.y.%\\`\n    GROUP BY \\`srcAddr\\`, \\`dstAddr\\`\n    ORDER BY bytesTransferred DESC\n    LIMIT 10`,\n    },\n  },\n  {\n    title: \"Determine the traffic that's going to and from the instances in your NAT gateways\",\n    expr: {\n      CWLI: stripIndents`filter (dstAddr like 'x.x.x.x' and srcAddr like 'y.y.') or (srcAddr like 'xxx.xx.xx.xx' and dstAddr like 'y.y.')\n    | stats sum(bytes) as bytesTransferred by srcAddr, dstAddr\n    | sort bytesTransferred desc\n    | limit 10`,\n      PPL: stripIndents`where (like(dstAddr, \"x.x.x.x\") and like(srcAddr, \"y.y.\")) or (like(srcAddr, \"xxx.xx.xx.xx\") and like(dstAddr, \"y.y.\")\n    | stats sum(bytes) as bytesTransferred by srcAddr, dstAddr\n    | sort - bytesTransferred\n    | limit 10`,\n      SQL: stripIndents`SELECT \\`srcAddr\\`, \\`dstAddr\\`,\n    SUM (\\`bytes\\`) AS bytesTransferred\n    FROM \\`log_group\\`\n    WHERE (\\`dstAddr\\` LIKE 'x.x.x.x' AND \\`srcAddr\\` LIKE 'y.y.%')\n    OR (\\`srcAddr\\` LIKE 'xxx.xx.xx.xx' AND \\`dstAddr\\` LIKE 'y.y.%')\n    GROUP BY \\`srcAddr\\`, \\`dstAddr\\`\n    ORDER BY \\`bytesTransferred\\` DESC\n    LIMIT 10`,\n    },\n  },\n  {\n    title:\n      'Determine the internet destinations that the instances in your VPC communicate with most often for uploads and downloads - for uploads',\n    expr: {\n      CWLI: stripIndents`filter (srcAddr like 'x.x.x.x' and dstAddr not like 'y.y.')\n    | stats sum(bytes) as bytesTransferred by srcAddr, dstAddr\n    | sort bytesTransferred desc\n    | limit 10`,\n      PPL: stripIndents`where like(srcAddr like \"y.y.\") and not like(dstAddr, \"x.x.x.x\")\n    | stats sum(bytes) as bytesTransferred by srcAddr, dstAddr\n    | sort - bytesTransferred\n    | head 10`,\n      SQL: stripIndents`SELECT \\`srcAddr\\`, \\`dstAddr\\`,\n    SUM(\\`bytes\\`) AS bytesTransferred\n    FROM \\`log_group\\`\n    WHERE \\`srcAddr\\` LIKE 'x.x.x.x'\n    AND \\`dstAddr\\` NOT LIKE \\`y.y.%\\`\n    GROUP BY \\`srcAddr\\`, \\`dstAddr\\`\n    ORDER BY bytesTransferred DESC\n    LIMIT 10`,\n    },\n  },\n  {\n    title:\n      'Determine the internet destinations that the instances in your VPC communicate with most often for uploads and downloads - for downloads',\n    expr: {\n      CWLI: stripIndents`filter (dstAddr like 'x.x.x.x' and srcAddr not like 'y.y.')\n    | stats sum(bytes) as bytesTransferred by srcAddr, dstAddr\n    | sort bytesTransferred desc\n    | limit 10`,\n      PPL: stripIndents`where like(dstAddr, \"x.x.x.x\") and not like(srcAddr like \"y.y.\")\n    | stats sum(bytes) as bytesTransferred by srcAddr, dstAddr\n    | sort - bytesTransferred\n    | head 10`,\n      SQL: stripIndents`SELECT \\`srcAddr\\`, \\`dstAddr\\`,\n    SUM(\\`bytes\\`) AS bytesTransferred\n    FROM \\`log_group\\`\n    WHERE \\`dstAddr\\` LIKE 'x.x.x.x'\n    AND \\`srcAddr\\` NOT LIKE \\`y.y.%\\`\n    GROUP BY \\`srcAddr\\`, \\`dstAddr\\`\n    ORDER BY bytesTransferred DESC\n    LIMIT 10`,\n    },\n  },\n];\n\nexport const appSyncSamples: SampleQuery[] = [\n  {\n    title: 'Number of unique HTTP status codes',\n    expr: {\n      CWLI: 'fields ispresent(graphQLAPIId) as isApi | filter isApi | filter logType = \"RequestSummary\" | stats count() as statusCount by statusCode | sort statusCount desc',\n      SQL: stripIndents`SELECT \\`graphQLAPIId\\`, \\`statusCode\\`,\n    COUNT(*) AS statusCount\n    FROM \\`log_group\\`\n    WHERE \\`logType\\` = 'RequestSummary'\n    AND \\`graphQLAPIId\\` IS NOT NULL\n    GROUP BY \\`graphQLAPIId\\`, \\`statusCode\\`\n    ORDER BY statusCount DESC`,\n    },\n  },\n  {\n    title: 'Most frequently invoked resolvers',\n    expr: {\n      CWLI: 'fields ispresent(resolverArn) as isRes | stats count() as invocationCount by resolverArn | filter isRes | filter logType = \"Tracing\" | sort invocationCount desc | limit 10',\n      PPL: stripIndents`where \\`logType\\` = 'Tracing'\n    | fields \\`resolverArn\\`, \\`duration\\`\n    | sort - duration\n    | head 10`,\n      SQL: stripIndents`SELECT \\`resolverArn\\`, COUNT(*) AS invocationCount\n    FROM \\`log_group\\`\n    WHERE \\`logType\\` = 'Tracing'\n    AND \\`resolverArn\\` IS NOT NULL\n    GROUP BY \\`resolverArn\\`\n    ORDER BY invocationCount DESC\n    LIMIT 10`,\n    },\n  },\n  {\n    title: 'Top 10 resolvers with maximum latency',\n    expr: {\n      CWLI: 'fields resolverArn, duration | filter logType = \"Tracing\" | sort duration desc | limit 10',\n      PPL: stripIndents`where \\`logType\\` = 'Tracing'\n    | fields \\`resolverArn\\`, \\`duration\\`\n    | sort - duration\n    | head 10`,\n      SQL: stripIndents`SELECT \\`resolverArn\\`, \\`duration\\`\n    FROM \\`log_group\\`\n    WHERE \\`logType\\` = 'Tracing'\n    ORDER BY \\`duration\\` DESC\n    LIMIT 10`,\n    },\n  },\n  {\n    title: 'Resolvers with most errors in mapping templates',\n    expr: {\n      CWLI: 'fields ispresent(resolverArn) as isRes | stats count() as errorCount by resolverArn, logType | filter isRes and (logType = \"RequestMapping\" or logType = \"ResponseMapping\") and fieldInError | sort errorCount desc | limit 10',\n      SQL: stripIndents`SELECT resolverArn, COUNT(*) AS errorCount\n    FROM \\`log_group\\`\n    WHERE ISNOTNULL(resolverArn) AND (logType = \"RequestMapping\" OR logType = \"ResponseMapping\") AND fieldInError\n    GROUP BY resolverArn\n    ORDER BY errorCount DESC\n    LIMIT 10`,\n    },\n  },\n  {\n    title: 'Field latency statistics',\n    expr: {\n      CWLI: `stats min(duration), max(duration), avg(duration) as avgDur by concat(parentType, '/', fieldName) as fieldKey | filter logType = \"Tracing\" | sort avgDur desc | limit 10`,\n      SQL: stripIndents`SELECT CONCAT(parentType, \"/\", fieldName) AS fieldKey, MIN(duration), MAX(duration), AVG(duration) as avgDur\n    FROM \\`log_group\\`\n    ORDER BY fieldKey\n    WHERE logType=\"Tracing\"\n    SORTY BY avgDur DESC\n    LIMIT 10`,\n    },\n  },\n  {\n    title: 'Resolver latency statistics',\n    expr: {\n      CWLI: 'fields ispresent(resolverArn) as isRes | filter isRes | filter logType = \"Tracing\" | stats min(duration), max(duration), avg(duration) as avgDur by resolverArn | sort avgDur desc | limit 10 ',\n      SQL: stripIndents`SELECT \\`resolverArn\\`, MIN(\\`duration\\`),\n    MAX(\\`duration\\`), AVG(\\`duration\\`) as avgDur\n    FROM \\`log_group\\`\n    WHERE \\`resolverArn\\` IS NOT NULL\n    AND \\`logType\\` = 'Tracing'\n    GROUP BY \\`resolverArn\\`\n    ORDER BY avgDur DESC\n    LIMIT 10`,\n    },\n  },\n  {\n    title: 'Top 10 requests with maximum latency',\n    expr: {\n      CWLI: 'fields requestId, latency | filter logType = \"RequestSummary\" | sort latency desc | limit 10',\n      PPL: stripIndents`where \\`logType\\` = 'RequestSummary'\n    | fields \\`requestId\\`, \\`latency\\`\n    | sort - \\`latency\\`\n    | head 10`,\n      SQL: stripIndents`SELECT \\`requestId\\`, \\`latency\\`\n    FROM \\`log_group\\`\n    WHERE \\`logType\\` = 'RequestSummary'\n    ORDER BY \\`latency\\` DESC\n    LIMIT 10`,\n    },\n  },\n];\n\nexport const iotSamples = [\n  {\n    title: 'Count IoT Events and status including errors',\n    expr: {\n      CWLI: 'fields @timestamp, @message | stats count(*) by eventType, status',\n      SQL: stripIndents`SELECT \\`eventType\\`, \\`status\\`, COUNT(*)\n    FROM \\`log_group\\`\n    GROUP BY \\`eventType\\`, \\`status\\``,\n    },\n  },\n  {\n    title: 'Count of Disconnect reasons',\n    expr: {\n      CWLI: 'filter eventType=\"Disconnect\" | stats count(*) by disconnectReason | sort disconnectReason desc',\n      PPL: stripIndents`where \\`eventType\\` = \\`Disconnect\\`\n    | stats count() by \\`disconnectReason\\`\n    | sort - \\`disconnectReason\\``,\n      SQL: stripIndents`SELECT \\`disconnectReason\\`, COUNT(*)\n    FROM \\`log_group\\`\n    WHERE \\`eventType\\` = 'Disconnect'\n    GROUP BY \\`disconnectReason\\`\n    ORDER BY \\`disconnectReason\\` DESC`,\n    },\n  },\n  {\n    title: 'Top 50 devices with Duplicate ClientId disconnect error',\n    expr: {\n      CWLI: 'filter eventType=\"Disconnect\" and disconnectReason=\"DUPLICATE_CLIENTID\" | stats count(*) by clientId | sort numPublishIn desc | limit 50',\n      SQL: stripIndents`SELECT \\`clientId\\`, COUNT(*) AS duplicateCount\n    FROM \\`log_group\\`\n    WHERE \\`eventType\\` = 'Disconnect'\n    AND \\`disconnectReason\\` = 'DUPLICATE_CLIENTID'\n    GROUP BY \\`clientId\\`\n    ORDER BY duplicateCount DESC\n    LIMIT 50`,\n    },\n  },\n  {\n    title: 'Top 10 failed connections by ClientId',\n    expr: {\n      CWLI: 'filter eventType=\"Connect\" and status=\"Failure\" | stats count(*) by clientId | sort numPublishIn desc | limit 10',\n      SQL: stripIndents`SELECT \\`clientId\\`, COUNT(*) AS failedConnectionCount\n    FROM \\`log_group\\`\n    WHERE \\`eventType\\` = 'Connect'\n    AND \\`status\\` = 'Failure'\n    GROUP BY \\`clientId\\`\n    ORDER BY failedConnectionCount DESC\n    LIMIT 10`,\n    },\n  },\n  {\n    title: 'Connectivity activity for a device',\n    expr: {\n      CWLI: 'fields @timestamp, eventType, reason, clientId | filter clientId like /sampleClientID/ | filter eventType like /Connect|Disconnect/ | sort @timestamp desc | limit 20',\n      PPL: stripIndents`fields \\`@timestamp\\`, eventType, reason, clientId\n    | where like(clientId, \"%sampleClientID%\")\n    | where like(eventType, \"%Connect%\") or like(eventType, \"%Disconnect%\")\n    | sort - \\`@timestamp\\`\n    | head 20`,\n      SQL: stripIndents`SELECT \\`@timestamp\\`, \\`eventType\\`,\n    \\`reason\\`, \\`clientId\\`\n    FROM \\`log_group\\`\n    WHERE \\`clientId\\` LIKE '%sampleClientID%'\n    AND \\`eventType\\` LIKE ANY ('%Connect%', '%Disconnect%')\n    ORDER BY \\`@timestamp\\` DESC\n    LIMIT 20`,\n    },\n  },\n  {\n    title: 'View messages published to a topic',\n    expr: {\n      CWLI: 'fields @timestamp, @message | sort @timestamp desc | filter ( eventType=\"Publish-In\" ) and topicName like \\'your/topic/here\\'',\n      PPL: stripIndents`fields \\`@timestamp\\`, \\`@message\\`\n    | where eventType = \"Publish-In\" and like(topicName, \"%your/topic/here%\")\n    | sort - \\`@timestamp\\``,\n      SQL: stripIndents`SELECT \\`@timestamp\\`, \\`@message\\`\n    FROM \\`log_group\\`\n    WHERE \\`eventType\\` = 'Publish-In'\n    AND \\`topicName\\` LIKE '%your/topic/here%'`,\n    },\n  },\n];\n","import { Grammar } from 'prismjs';\n\nimport { CompletionItem } from '@grafana/ui';\n\nexport const QUERY_COMMANDS: CompletionItem[] = [\n  {\n    label: 'fields',\n    documentation: 'Retrieves the specified fields from log events',\n  },\n  { label: 'display', documentation: 'Specifies which fields to display in the query results' },\n  {\n    label: 'filter',\n    documentation: 'Filters the results of a query based on one or more conditions',\n  },\n  {\n    label: 'stats',\n    documentation: 'Calculates aggregate statistics based on the values of log fields',\n  },\n  { label: 'sort', documentation: 'Sorts the retrieved log events' },\n  { label: 'limit', documentation: 'Specifies the number of log events returned by the query' },\n  {\n    label: 'parse',\n    documentation:\n      'Extracts data from a log field, creating one or more ephemeral fields that you can process further in the query',\n  },\n];\n\nexport const COMPARISON_OPERATORS = ['=', '!=', '<', '<=', '>', '>='];\nexport const ARITHMETIC_OPERATORS = ['+', '-', '*', '/', '^', '%'];\n\nexport const NUMERIC_OPERATORS = [\n  {\n    label: 'abs',\n    detail: 'abs(a)',\n    documentation: 'Absolute value.',\n  },\n  {\n    label: 'ceil',\n    detail: 'ceil(a)',\n    documentation: 'Round to ceiling (the smallest integer that is greater than the value of a).',\n  },\n  {\n    label: 'floor',\n    detail: 'floor(a)',\n    documentation: 'Round to floor (the largest integer that is smaller than the value of a).',\n  },\n  {\n    label: 'greatest',\n    detail: 'greatest(a,b, ... z)',\n    documentation: 'Returns the largest value.',\n  },\n  {\n    label: 'least',\n    detail: 'least(a, b, ... z)',\n    documentation: 'Returns the smallest value.',\n  },\n  {\n    label: 'log',\n    detail: 'log(a)',\n    documentation: 'Natural logarithm.',\n  },\n  {\n    label: 'sqrt',\n    detail: 'sqrt(a)',\n    documentation: 'Square root.',\n  },\n];\n\nexport const GENERAL_FUNCTIONS = [\n  {\n    label: 'ispresent',\n    detail: 'ispresent(fieldname)',\n    documentation: 'Returns true if the field exists.',\n  },\n  {\n    label: 'coalesce',\n    detail: 'coalesce(fieldname1, fieldname2, ... fieldnamex)',\n    documentation: 'Returns the first non-null value from the list.',\n  },\n];\n\nexport const STRING_FUNCTIONS = [\n  {\n    label: 'isempty',\n    detail: 'isempty(fieldname)',\n    documentation: 'Returns true if the field is missing or is an empty string.',\n  },\n  {\n    label: 'isblank',\n    detail: 'isblank(fieldname)',\n    documentation: 'Returns true if the field is missing, an empty string, or contains only white space.',\n  },\n  {\n    label: 'concat',\n    detail: 'concat(string1, string2, ... stringz)',\n    documentation: 'Concatenates the strings.',\n  },\n  {\n    label: 'ltrim',\n    detail: 'ltrim(string) or ltrim(string1, string2)',\n    documentation:\n      'Remove white space from the left of the string. If the function has a second string argument, it removes the characters of string2 from the left of string1.',\n  },\n  {\n    label: 'rtrim',\n    detail: 'rtrim(string) or rtrim(string1, string2)',\n    documentation:\n      'Remove white space from the right of the string. If the function has a second string argument, it removes the characters of string2 from the right of string1.',\n  },\n  {\n    label: 'trim',\n    detail: 'trim(string) or trim(string1, string2)',\n    documentation:\n      'Remove white space from both ends of the string. If the function has a second string argument, it removes the characters of string2 from both sides of string1.',\n  },\n  {\n    label: 'strlen',\n    detail: 'strlen(string)',\n    documentation: 'Returns the length of the string in Unicode code points.',\n  },\n  {\n    label: 'toupper',\n    detail: 'toupper(string)',\n    documentation: 'Converts the string to uppercase.',\n  },\n  {\n    label: 'tolower',\n    detail: 'tolower(string)',\n    documentation: 'Converts the string to lowercase.',\n  },\n  {\n    label: 'substr',\n    detail: 'substr(string1, x), or substr(string1, x, y)',\n    documentation:\n      'Returns a substring from the index specified by the number argument to the end of the string. If the function has a second number argument, it contains the length of the substring to be retrieved.',\n  },\n  {\n    label: 'replace',\n    detail: 'replace(string1, string2, string3)',\n    documentation: 'Replaces all instances of string2 in string1 with string3.',\n  },\n  {\n    label: 'strcontains',\n    detail: 'strcontains(string1, string2)',\n    documentation: 'Returns 1 if string1 contains string2 and 0 otherwise.',\n  },\n];\n\nexport const DATETIME_FUNCTIONS = [\n  {\n    label: 'bin',\n    detail: 'bin(period)',\n    documentation: 'Rounds the value of @timestamp to the given period and then truncates.',\n  },\n  {\n    label: 'datefloor',\n    detail: 'datefloor(a, period)',\n    documentation: 'Truncates the timestamp to the given period.',\n  },\n  {\n    label: 'dateceil',\n    detail: 'dateceil(a, period)',\n    documentation: 'Rounds up the timestamp to the given period and then truncates.',\n  },\n  {\n    label: 'fromMillis',\n    detail: 'fromMillis(fieldname)',\n    documentation:\n      'Interprets the input field as the number of milliseconds since the Unix epoch and converts it to a timestamp.',\n  },\n  {\n    label: 'toMillis',\n    detail: 'toMillis(fieldname)',\n    documentation:\n      'Converts the timestamp found in the named field into a number representing the milliseconds since the Unix epoch.',\n  },\n];\n\nexport const IP_FUNCTIONS = [\n  {\n    label: 'isValidIp',\n    detail: 'isValidIp(fieldname)',\n    documentation: 'Returns true if the field is a valid v4 or v6 IP address.',\n  },\n  {\n    label: 'isValidIpV4',\n    detail: 'isValidIpV4(fieldname)',\n    documentation: 'Returns true if the field is a valid v4 IP address.',\n  },\n  {\n    label: 'isValidIpV6',\n    detail: 'isValidIpV6(fieldname)',\n    documentation: 'Returns true if the field is a valid v6 IP address.',\n  },\n  {\n    label: 'isIpInSubnet',\n    detail: 'isIpInSubnet(fieldname, string)',\n    documentation: 'Returns true if the field is a valid v4 or v6 IP address within the specified v4 or v6 subnet.',\n  },\n  {\n    label: 'isIpv4InSubnet',\n    detail: 'isIpv4InSubnet(fieldname, string)',\n    documentation: 'Returns true if the field is a valid v4 IP address within the specified v4 subnet.',\n  },\n  {\n    label: 'isIpv6InSubnet',\n    detail: 'isIpv6InSubnet(fieldname, string)',\n    documentation: 'Returns true if the field is a valid v6 IP address within the specified v6 subnet.',\n  },\n];\n\nexport const BOOLEAN_FUNCTIONS = [\n  {\n    label: 'ispresent',\n    detail: 'ispresent(fieldname)',\n    documentation: 'Returns true if the field exists.',\n  },\n  {\n    label: 'isempty',\n    detail: 'isempty(fieldname)',\n    documentation: 'Returns true if the field is missing or is an empty string.',\n  },\n  {\n    label: 'isblank',\n    detail: 'isblank(fieldname)',\n    documentation: 'Returns true if the field is missing, an empty string, or contains only white space.',\n  },\n  {\n    label: 'strcontains',\n    detail: 'strcontains(string1, string2)',\n    documentation: 'Returns 1 if string1 contains string2 and 0 otherwise.',\n  },\n  ...IP_FUNCTIONS,\n];\n\nexport const AGGREGATION_FUNCTIONS_STATS = [\n  {\n    label: 'avg',\n    detail: 'avg(NumericFieldname)',\n    documentation: 'The average of the values in the specified field.',\n  },\n  {\n    label: 'count',\n    detail: 'count(fieldname) or count(*)',\n    documentation: 'Counts the log records.',\n  },\n  {\n    label: 'count_distinct',\n    detail: 'count_distinct(fieldname)',\n    documentation: 'Returns the number of unique values for the field.',\n  },\n  {\n    label: 'max',\n    detail: 'max(fieldname)',\n    documentation: 'The maximum of the values for this log field in the queried logs.',\n  },\n  {\n    label: 'min',\n    detail: 'min(fieldname)',\n    documentation: 'The minimum of the values for this log field in the queried logs.',\n  },\n  {\n    label: 'pct',\n    detail: 'pct(fieldname, value)',\n    documentation: 'A percentile indicates the relative standing of a value in a datas.',\n  },\n  {\n    label: 'stddev',\n    detail: 'stddev(NumericFieldname)',\n    documentation: 'The standard deviation of the values in the specified field.',\n  },\n  {\n    label: 'sum',\n    detail: 'sum(NumericFieldname)',\n    documentation: 'The sum of the values in the specified field.',\n  },\n];\n\nexport const NON_AGGREGATION_FUNCS_STATS = [\n  {\n    label: 'earliest',\n    detail: 'earliest(fieldname)',\n    documentation:\n      'Returns the value of fieldName from the log event that has the earliest time stamp in the queried logs.',\n  },\n  {\n    label: 'latest',\n    detail: 'latest(fieldname)',\n    documentation:\n      'Returns the value of fieldName from the log event that has the latest time stamp in the queried logs.',\n  },\n  {\n    label: 'sortsFirst',\n    detail: 'sortsFirst(fieldname)',\n    documentation: 'Returns the value of fieldName that sorts first in the queried logs.',\n  },\n  {\n    label: 'sortsLast',\n    detail: 'sortsLast(fieldname)',\n    documentation: 'Returns the value of fieldName that sorts last in the queried logs.',\n  },\n];\n\nexport const STATS_FUNCS = [...AGGREGATION_FUNCTIONS_STATS, ...NON_AGGREGATION_FUNCS_STATS];\n\nexport const KEYWORDS = ['as', 'like', 'by', 'in', 'desc', 'asc'];\nexport const FIELD_AND_FILTER_FUNCTIONS = [\n  ...NUMERIC_OPERATORS,\n  ...GENERAL_FUNCTIONS,\n  ...STRING_FUNCTIONS,\n  ...DATETIME_FUNCTIONS,\n  ...IP_FUNCTIONS,\n];\n\nexport const FUNCTIONS = [...FIELD_AND_FILTER_FUNCTIONS, ...STATS_FUNCS];\n\nconst tokenizer: Grammar = {\n  comment: {\n    pattern: /^#.*/,\n    greedy: true,\n  },\n  backticks: {\n    pattern: /`.*?`/,\n    alias: 'string',\n    greedy: true,\n  },\n  quote: {\n    pattern: /\".*?\"/,\n    alias: 'string',\n    greedy: true,\n  },\n  regex: {\n    pattern: /\\/.*?\\/(?=\\||\\s*$|,)/,\n    greedy: true,\n  },\n  'query-command': {\n    pattern: new RegExp(`\\\\b(?:${QUERY_COMMANDS.map((command) => command.label).join('|')})\\\\b`, 'i'),\n    alias: 'function',\n  },\n  function: {\n    pattern: new RegExp(`\\\\b(?:${FUNCTIONS.map((f) => f.label).join('|')})\\\\b`, 'i'),\n  },\n  keyword: {\n    pattern: new RegExp(`(\\\\s+)(${KEYWORDS.join('|')})(?=\\\\s+)`, 'i'),\n    lookbehind: true,\n  },\n  // 'log-group-name': {\n  //   pattern: /[\\.\\-_/#A-Za-z0-9]+/,\n  // },\n  'field-name': {\n    pattern: /(@?[_a-zA-Z]+[_.0-9a-zA-Z]*)|(`((\\\\`)|([^`]))*?`)/,\n    greedy: true,\n  },\n  number: /\\b-?\\d+((\\.\\d*)?([eE][+-]?\\d+)?)?\\b/,\n  'command-separator': {\n    pattern: /\\|/,\n    alias: 'punctuation',\n  },\n  'comparison-operator': {\n    pattern: /([<>]=?)|(!?=)/,\n  },\n  punctuation: /[{}()`,.]/,\n  whitespace: /\\s+/,\n};\n\nexport default tokenizer;\n","// import { Grammar } from 'prismjs';\n\nimport { Grammar } from 'prismjs';\n\nimport { FUNCTIONS, KEYWORDS, QUERY_COMMANDS } from '../../language/cloudwatch-logs/syntax';\nimport * as sql from '../../language/cloudwatch-logs-sql/language';\nimport * as ppl from '../../language/cloudwatch-ppl/language';\n\nexport const baseTokenizer = (languageSpecificFeatures: Grammar): Grammar => ({\n  comment: {\n    pattern: /^#.*/,\n    greedy: true,\n  },\n  backticks: {\n    pattern: /`.*?`/,\n    alias: 'string',\n    greedy: true,\n  },\n  quote: {\n    pattern: /[\\\"'].*?[\\\"']/,\n    alias: 'string',\n    greedy: true,\n  },\n  regex: {\n    pattern: /\\/.*?\\/(?=\\||\\s*$|,)/,\n    greedy: true,\n  },\n  ...languageSpecificFeatures,\n\n  'field-name': {\n    pattern: /(@?[_a-zA-Z]+[_.0-9a-zA-Z]*)|(`((\\\\`)|([^`]))*?`)/,\n    greedy: true,\n  },\n  number: /\\b-?\\d+((\\.\\d*)?([eE][+-]?\\d+)?)?\\b/,\n  'command-separator': {\n    pattern: /\\|/,\n    alias: 'punctuation',\n  },\n  'comparison-operator': {\n    pattern: /([<>]=?)|(!?=)/,\n  },\n  punctuation: /[{}()`,.]/,\n  whitespace: /\\s+/,\n});\n\nexport const cwliTokenizer: Grammar = {\n  ...baseTokenizer({\n    'query-command': {\n      pattern: new RegExp(`\\\\b(?:${QUERY_COMMANDS.map((command) => command.label).join('|')})\\\\b`, 'i'),\n      alias: 'function',\n    },\n    function: {\n      pattern: new RegExp(`\\\\b(?:${FUNCTIONS.map((f) => f.label).join('|')})\\\\b`, 'i'),\n    },\n    keyword: {\n      pattern: new RegExp(`(\\\\s+)(${KEYWORDS.join('|')})(?=\\\\s+)`, 'i'),\n      lookbehind: true,\n    },\n  }),\n};\n\nexport const pplTokenizer: Grammar = {\n  ...baseTokenizer({\n    'query-command': {\n      pattern: new RegExp(`\\\\b(?:${ppl.PPL_COMMANDS.join('|')})\\\\b`, 'i'),\n      alias: 'function',\n    },\n    function: {\n      pattern: new RegExp(`\\\\b(?:${ppl.ALL_FUNCTIONS.join('|')})\\\\b`, 'i'),\n    },\n    keyword: {\n      pattern: new RegExp(`(\\\\s+)(${ppl.ALL_KEYWORDS.join('|')})(?=\\\\s+)`, 'i'),\n      lookbehind: true,\n    },\n    operator: {\n      pattern: new RegExp(`\\\\b(?:${ppl.PPL_OPERATORS.map((operator) => `\\\\${operator}`).join('|')})\\\\b`, 'i'),\n    },\n  }),\n};\n\nexport const sqlTokenizer = {\n  ...baseTokenizer({\n    function: {\n      pattern: new RegExp(`\\\\b(?:${sql.ALL_FUNCTIONS.join('|')})\\\\b(?!\\\\.)`, 'i'),\n    },\n    keyword: {\n      pattern: new RegExp(`\\\\b(?:${sql.ALL_KEYWORDS.join('|')})\\\\b(?=\\\\s)`, 'i'),\n      lookbehind: true,\n    },\n    operator: {\n      pattern: new RegExp(`\\\\b(?:${sql.ALL_OPERATORS.map((operator) => `\\\\${operator}`).join('|')})\\\\b`, 'i'),\n    },\n  }),\n};\n","import { css } from '@emotion/css';\nimport Prism from 'prismjs';\nimport { useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Collapse, useStyles2, Text } from '@grafana/ui';\nimport { flattenTokens } from '@grafana/ui/src/slate-plugins/slate-prism';\n\nimport { CloudWatchLogsQuery, CloudWatchQuery, LogsQueryLanguage } from '../../types';\n\nimport * as sampleQueries from './sampleQueries';\nimport { cwliTokenizer, pplTokenizer, sqlTokenizer } from './tokenizer';\ninterface QueryExample {\n  category: string;\n  examples: sampleQueries.SampleQuery[];\n}\n\nconst QUERIES: QueryExample[] = [\n  {\n    category: 'General queries',\n    examples: sampleQueries.generalQueries,\n  },\n  {\n    category: 'Lambda',\n    examples: sampleQueries.lambdaSamples,\n  },\n\n  {\n    category: 'VPC Flow Logs',\n    examples: sampleQueries.vpcSamples,\n  },\n  {\n    category: 'CloudTrail Logs',\n    examples: sampleQueries.cloudtrailSamples,\n  },\n  {\n    category: 'NAT Gateway',\n    examples: sampleQueries.natSamples,\n  },\n  {\n    category: 'AWS App Sync',\n    examples: sampleQueries.appSyncSamples,\n  },\n  {\n    category: 'IOT queries',\n    examples: sampleQueries.iotSamples,\n  },\n];\n\nfunction renderHighlightedMarkup(\n  code: string,\n  keyPrefix: string,\n  queryLanugage: LogsQueryLanguage = LogsQueryLanguage.CWLI\n) {\n  const grammar = getGrammarForLanguage(queryLanugage);\n  const tokens = flattenTokens(Prism.tokenize(code, grammar));\n  const spans = tokens\n    .filter((token) => typeof token !== 'string')\n    .map((token, i) => {\n      return (\n        <span\n          className={`prism-token token ${token.types.join(' ')} ${token.aliases.join(' ')}`}\n          key={`${keyPrefix}-token-${i}`}\n        >\n          {token.content}\n        </span>\n      );\n    });\n\n  return <div className=\"slate-query-field\">{spans}</div>;\n}\n\ninterface CollapseProps {\n  key?: string;\n  label: string;\n  children: React.ReactNode;\n}\nconst CheatSheetCollapse = (props: CollapseProps) => {\n  const [isOpen, setIsOpen] = useState(false);\n  return (\n    <Collapse label={props.label} isOpen={isOpen} onToggle={setIsOpen} key={props.key} collapsible>\n      {props.children}\n    </Collapse>\n  );\n};\n\ntype Props = {\n  onClickExample: (query: CloudWatchQuery) => void;\n  query: CloudWatchQuery;\n};\nconst isLogsQuery = (query: CloudWatchQuery): query is CloudWatchLogsQuery => query.queryMode === 'Logs';\nconst LogsCheatSheet = (props: Props) => {\n  const styles = useStyles2(getStyles);\n  const queryLanugage: LogsQueryLanguage =\n    (isLogsQuery(props.query) && props.query.queryLanguage) || LogsQueryLanguage.CWLI;\n\n  return (\n    <div>\n      <div className={styles.heading}>\n        <Text variant=\"h3\" weight=\"bold\">\n          CloudWatch Logs cheat sheet\n        </Text>\n      </div>\n      {QUERIES.map((query, i) => (\n        <CheatSheetCollapse key={query.category} label={query.category}>\n          <div key={`cat-${i}`}>\n            {query.examples.map((item, j) => (\n              <>\n                {item.expr[queryLanugage] && (\n                  <>\n                    <Text variant=\"h6\" weight=\"bold\">\n                      {item.title}\n                    </Text>\n                    <button\n                      type=\"button\"\n                      className={styles.cheatSheetExample}\n                      key={item.expr[queryLanugage]}\n                      onClick={() =>\n                        props.onClickExample({\n                          ...props.query,\n                          refId: props.query.refId ?? 'A',\n                          expression: item.expr[queryLanugage],\n                          queryMode: 'Logs',\n                          region: props.query.region,\n                          id: props.query.refId ?? 'A',\n                          logGroupNames: 'logGroupNames' in props.query ? props.query.logGroupNames : [],\n                          logGroups: 'logGroups' in props.query ? props.query.logGroups : [],\n                        })\n                      }\n                    >\n                      <pre>{renderHighlightedMarkup(item.expr[queryLanugage], `item-${j}`, queryLanugage)}</pre>\n                    </button>\n                  </>\n                )}\n              </>\n            ))}\n          </div>\n        </CheatSheetCollapse>\n      ))}\n      <div>\n        Note: If you are seeing masked data, you may have CloudWatch logs data protection enabled.{' '}\n        <a\n          className={styles.link}\n          href=\"https://grafana.com/docs/grafana/latest/datasources/aws-cloudwatch/#cloudwatch-logs-data-protection\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          See documentation for details\n        </a>\n        .\n      </div>\n    </div>\n  );\n};\n\nexport default LogsCheatSheet;\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  heading: css({\n    marginBottom: theme.spacing(2),\n  }),\n  link: css({\n    textDecoration: 'underline',\n  }),\n  cheatSheetExample: css({\n    margin: theme.spacing(0.5, 0),\n    // element is interactive, clear button styles\n    textAlign: 'left',\n    border: 'none',\n    background: 'transparent',\n    display: 'block',\n  }),\n});\n\nconst getGrammarForLanguage = (queryLanugage: LogsQueryLanguage) => {\n  switch (queryLanugage) {\n    case LogsQueryLanguage.CWLI:\n      return cwliTokenizer;\n    case LogsQueryLanguage.PPL:\n      return pplTokenizer;\n    case LogsQueryLanguage.SQL:\n      return sqlTokenizer;\n  }\n};\n","import { AnnotationQuery } from '@grafana/data';\n\nimport { CloudWatchAnnotationQuery, CloudWatchLogsQuery, CloudWatchMetricsQuery, CloudWatchQuery } from './types';\n\nexport const isCloudWatchLogsQuery = (cloudwatchQuery: CloudWatchQuery): cloudwatchQuery is CloudWatchLogsQuery =>\n  cloudwatchQuery.queryMode === 'Logs';\n\nexport const isCloudWatchMetricsQuery = (cloudwatchQuery: CloudWatchQuery): cloudwatchQuery is CloudWatchMetricsQuery =>\n  cloudwatchQuery.queryMode === 'Metrics' || !cloudwatchQuery.hasOwnProperty('queryMode'); // in early versions of this plugin, queryMode wasn't defined in a CloudWatchMetricsQuery\n\nexport const isCloudWatchAnnotationQuery = (\n  cloudwatchQuery: CloudWatchQuery\n): cloudwatchQuery is CloudWatchAnnotationQuery => cloudwatchQuery.queryMode === 'Annotations';\n\nexport const isCloudWatchAnnotation = (query: unknown): query is AnnotationQuery<CloudWatchAnnotationQuery> =>\n  (query as AnnotationQuery<CloudWatchAnnotationQuery>).target?.queryMode === 'Annotations';\n","import { SelectableValue } from '@grafana/data';\n\nimport { CloudWatchMetricsQuery, MetricQueryType, MetricEditorMode } from '../types';\n\nimport { CloudWatchDatasource } from './../datasource';\n\nexport const toOption = (value: string) => ({ label: value, value });\n\nexport const appendTemplateVariables = (datasource: CloudWatchDatasource, values: SelectableValue[]) => [\n  ...values,\n  { label: 'Template Variables', options: datasource.getVariables().map(toOption) },\n];\n\nexport const filterMetricsQuery = (query: CloudWatchMetricsQuery): boolean => {\n  const { region, metricQueryType, metricEditorMode, expression, metricName, namespace, sqlExpression, statistic } =\n    query;\n  if (!region) {\n    return false;\n  }\n  if (metricQueryType === MetricQueryType.Search && metricEditorMode === MetricEditorMode.Builder) {\n    return !!namespace && !!metricName && !!statistic;\n  } else if (metricQueryType === MetricQueryType.Search && metricEditorMode === MetricEditorMode.Code) {\n    return !!expression;\n  } else if (metricQueryType === MetricQueryType.Insights) {\n    // still TBD how to validate the visual query builder for SQL\n    return !!sqlExpression;\n  }\n\n  return false;\n};\n","import { useEffect, useState } from 'react';\nimport { useAsyncFn, useDeepCompareEffect } from 'react-use';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { config } from '@grafana/runtime';\n\nimport { CloudWatchDatasource } from './datasource';\nimport { ResourcesAPI } from './resources/ResourcesAPI';\nimport { GetMetricsRequest, GetDimensionKeysRequest } from './resources/types';\nimport { appendTemplateVariables } from './utils/utils';\n\nexport const useRegions = (datasource: CloudWatchDatasource): [Array<SelectableValue<string>>, boolean] => {\n  const [regionsIsLoading, setRegionsIsLoading] = useState<boolean>(false);\n  const [regions, setRegions] = useState<Array<SelectableValue<string>>>([{ label: 'default', value: 'default' }]);\n\n  useEffect(() => {\n    setRegionsIsLoading(true);\n\n    const variableOptionGroup = {\n      label: 'Template Variables',\n      options: datasource.getVariables().map(toOption),\n    };\n\n    datasource.resources\n      .getRegions()\n      .then((regions: Array<SelectableValue<string>>) => setRegions([...regions, variableOptionGroup]))\n      .finally(() => setRegionsIsLoading(false));\n  }, [datasource]);\n\n  return [regions, regionsIsLoading];\n};\n\nexport const useNamespaces = (datasource: CloudWatchDatasource) => {\n  const [namespaces, setNamespaces] = useState<Array<SelectableValue<string>>>([]);\n  useEffect(() => {\n    datasource.resources.getNamespaces().then((namespaces) => {\n      setNamespaces(appendTemplateVariables(datasource, namespaces));\n    });\n  }, [datasource]);\n\n  return namespaces;\n};\n\nexport const useMetrics = (datasource: CloudWatchDatasource, { region, namespace, accountId }: GetMetricsRequest) => {\n  const [metrics, setMetrics] = useState<Array<SelectableValue<string>>>([]);\n\n  // need to ensure dependency array below recieves the interpolated value so that the effect is triggered when a variable is changed\n  if (region) {\n    region = datasource.templateSrv.replace(region, {});\n  }\n  if (namespace) {\n    namespace = datasource.templateSrv.replace(namespace, {});\n  }\n\n  if (accountId) {\n    accountId = datasource.templateSrv.replace(accountId, {});\n  }\n  useEffect(() => {\n    datasource.resources.getMetrics({ namespace, region, accountId }).then((result: Array<SelectableValue<string>>) => {\n      setMetrics(appendTemplateVariables(datasource, result));\n    });\n  }, [datasource, region, namespace, accountId]);\n\n  return metrics;\n};\n\nexport const useDimensionKeys = (\n  datasource: CloudWatchDatasource,\n  { region, namespace, metricName, dimensionFilters, accountId }: GetDimensionKeysRequest\n) => {\n  const [dimensionKeys, setDimensionKeys] = useState<Array<SelectableValue<string>>>([]);\n\n  // need to ensure dependency array below revieves the interpolated value so that the effect is triggered when a variable is changed\n  if (region) {\n    region = datasource.templateSrv.replace(region, {});\n  }\n  if (namespace) {\n    namespace = datasource.templateSrv.replace(namespace, {});\n  }\n\n  if (metricName) {\n    metricName = datasource.templateSrv.replace(metricName, {});\n  }\n\n  if (accountId) {\n    accountId = datasource.templateSrv.replace(accountId, {});\n  }\n\n  if (dimensionFilters) {\n    dimensionFilters = datasource.resources.convertDimensionFormat(dimensionFilters, {}, false);\n  }\n\n  // doing deep comparison to avoid making new api calls to list metrics unless dimension filter object props changes\n  useDeepCompareEffect(() => {\n    datasource.resources\n      .getDimensionKeys({ namespace, region, metricName, accountId, dimensionFilters }, false)\n      .then((result: Array<SelectableValue<string>>) => {\n        setDimensionKeys(appendTemplateVariables(datasource, result));\n      });\n  }, [datasource, namespace, region, metricName, accountId, dimensionFilters]);\n\n  return dimensionKeys;\n};\n\nexport const useEnsureVariableHasSingleSelection = (datasource: CloudWatchDatasource, target?: string) => {\n  const [error, setError] = useState('');\n  // interpolate the target to ensure the check in useEffect runs when the variable selection is changed\n  const interpolatedTarget = datasource.templateSrv.replace(target);\n\n  useEffect(() => {\n    if (datasource.resources.isVariableWithMultipleOptionsSelected(target)) {\n      const newErrorMessage = `Template variables with multiple selected options are not supported for ${target}`;\n      if (error !== newErrorMessage) {\n        setError(newErrorMessage);\n      }\n      return;\n    }\n\n    if (error) {\n      setError('');\n    }\n  }, [datasource.resources, target, interpolatedTarget, error]);\n\n  return error;\n};\n\nexport const useIsMonitoringAccount = (resources: ResourcesAPI, region: string) => {\n  const [isMonitoringAccount, setIsMonitoringAccount] = useState(false);\n  // we call this before the use effect to ensure dependency array below\n  // receives the interpolated value so that the effect is triggered when a variable is changed\n  if (region) {\n    region = resources.templateSrv.replace(region, {});\n  }\n  useEffect(() => {\n    if (config.featureToggles.cloudWatchCrossAccountQuerying) {\n      resources.isMonitoringAccount(region).then((result) => setIsMonitoringAccount(result));\n    }\n  }, [region, resources]);\n\n  return isMonitoringAccount;\n};\n\nexport const useAccountOptions = (\n  resources: Pick<ResourcesAPI, 'getAccounts' | 'templateSrv' | 'getVariables'> | undefined,\n  region: string\n) => {\n  // we call this before the use effect to ensure dependency array below\n  // receives the interpolated value so that the effect is triggered when a variable is changed\n  if (region) {\n    region = resources?.templateSrv.replace(region, {}) ?? '';\n  }\n\n  const fetchAccountOptions = async () => {\n    if (!config.featureToggles.cloudWatchCrossAccountQuerying) {\n      return Promise.resolve([]);\n    }\n    const accounts = (await resources?.getAccounts({ region })) ?? [];\n    if (accounts.length === 0) {\n      return [];\n    }\n\n    const options: Array<SelectableValue<string>> = accounts.map((a) => ({\n      label: a.label,\n      value: a.id,\n      description: a.id,\n    }));\n\n    const variableOptions = resources?.getVariables().map(toOption) || [];\n\n    const variableOptionGroup: SelectableValue<string> = {\n      label: 'Template Variables',\n      options: variableOptions,\n    };\n\n    return [...options, variableOptionGroup];\n  };\n\n  const [state, doFetch] = useAsyncFn(fetchAccountOptions, [resources, region]);\n\n  useEffect(() => {\n    doFetch();\n  }, [resources, region, doFetch]);\n\n  return state;\n};\n","export const standardStatistics = ['Average', 'Maximum', 'Minimum', 'Sum', 'SampleCount', 'IQM'];\n","import { useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField } from '@grafana/experimental';\nimport { Select } from '@grafana/ui';\n\nexport interface Props {\n  onChange: (accountId?: string) => void;\n  accountOptions: Array<SelectableValue<string>>;\n  accountId?: string;\n}\n\nexport const ALL_ACCOUNTS_OPTION = {\n  label: 'All',\n  value: 'all',\n  description: 'Target all linked accounts',\n};\n\nexport function Account({ accountId, onChange, accountOptions }: Props) {\n  const selectedAccountExistsInOptions = useMemo(\n    () =>\n      accountOptions.find((a) => {\n        if (a.options) {\n          const matchingTemplateVar = a.options.find((tempVar: SelectableValue<string>) => {\n            return tempVar.value === accountId;\n          });\n          return matchingTemplateVar;\n        }\n        return a.value === accountId;\n      }),\n    [accountOptions, accountId]\n  );\n\n  if (accountOptions.length === 0) {\n    return null;\n  }\n\n  return (\n    <EditorField\n      label=\"Account\"\n      width={26}\n      tooltip=\"A CloudWatch monitoring account views data from source accounts so you can centralize monitoring and troubleshooting activities across multiple accounts. Go to the CloudWatch settings page in the AWS console for more details.\"\n    >\n      <Select\n        aria-label=\"Account Selection\"\n        value={selectedAccountExistsInOptions ? accountId : ALL_ACCOUNTS_OPTION.value}\n        options={[ALL_ACCOUNTS_OPTION, ...accountOptions]}\n        onChange={({ value }) => {\n          onChange(value);\n        }}\n      />\n    </EditorField>\n  );\n}\n","import { css, cx } from '@emotion/css';\nimport { useMemo } from 'react';\nimport { useAsyncFn } from 'react-use';\n\nimport { GrafanaTheme2, SelectableValue, toOption } from '@grafana/data';\nimport { AccessoryButton, InputGroup } from '@grafana/experimental';\nimport { Alert, Select, useStyles2 } from '@grafana/ui';\n\nimport { CloudWatchDatasource } from '../../../datasource';\nimport { useDimensionKeys, useEnsureVariableHasSingleSelection } from '../../../hooks';\nimport { Dimensions, MetricStat } from '../../../types';\nimport { appendTemplateVariables } from '../../../utils/utils';\n\nimport { DimensionFilterCondition } from './Dimensions';\n\nexport interface Props {\n  metricStat: MetricStat;\n  datasource: CloudWatchDatasource;\n  filter: DimensionFilterCondition;\n  disableExpressions: boolean;\n  onChange: (value: DimensionFilterCondition) => void;\n  onDelete: () => void;\n}\n\nconst wildcardOption = { value: '*', label: '*' };\n\nconst excludeCurrentKey = (dimensions: Dimensions, currentKey: string | undefined) =>\n  Object.entries(dimensions ?? {}).reduce<Dimensions>((acc, [key, value]) => {\n    if (key !== currentKey) {\n      return { ...acc, [key]: value };\n    }\n    return acc;\n  }, {});\n\nexport const FilterItem = ({ filter, metricStat, datasource, disableExpressions, onChange, onDelete }: Props) => {\n  const { region, namespace, metricName, dimensions, accountId } = metricStat;\n  const error = useEnsureVariableHasSingleSelection(datasource, filter.key);\n  const dimensionsExcludingCurrentKey = useMemo(\n    () => excludeCurrentKey(dimensions ?? {}, filter.key),\n    [dimensions, filter]\n  );\n  const dimensionKeys = useDimensionKeys(datasource, {\n    ...metricStat,\n    dimensionFilters: dimensionsExcludingCurrentKey,\n  });\n\n  const loadDimensionValues = async () => {\n    if (!filter.key) {\n      return [];\n    }\n\n    return datasource.resources\n      .getDimensionValues({\n        dimensionKey: filter.key,\n        dimensionFilters: dimensionsExcludingCurrentKey,\n        region,\n        namespace,\n        metricName,\n        accountId,\n      })\n      .then((result: Array<SelectableValue<string>>) => {\n        if (result.length && !disableExpressions && !result.some((o) => o.value === wildcardOption.value)) {\n          result.unshift(wildcardOption);\n        }\n        return appendTemplateVariables(datasource, result);\n      });\n  };\n\n  const [state, loadOptions] = useAsyncFn(loadDimensionValues, [\n    filter.key,\n    dimensions,\n    region,\n    namespace,\n    metricName,\n    accountId,\n  ]);\n  const styles = useStyles2(getOperatorStyles);\n\n  return (\n    <div className={styles.container} data-testid=\"cloudwatch-dimensions-filter-item\">\n      <InputGroup>\n        <Select\n          aria-label=\"Dimensions filter key\"\n          inputId=\"cloudwatch-dimensions-filter-item-key\"\n          width=\"auto\"\n          value={filter.key ? toOption(filter.key) : null}\n          allowCustomValue\n          options={dimensionKeys}\n          onChange={(change) => {\n            if (change.label) {\n              onChange({ key: change.label, value: undefined });\n            }\n          }}\n        />\n\n        <span className={cx(styles.root)}>=</span>\n\n        <Select\n          aria-label=\"Dimensions filter value\"\n          inputId=\"cloudwatch-dimensions-filter-item-value\"\n          onOpenMenu={loadOptions}\n          width=\"auto\"\n          value={filter.value ? toOption(filter.value) : null}\n          allowCustomValue\n          isLoading={state.loading}\n          options={state.value}\n          onChange={(change) => {\n            if (change.value) {\n              onChange({ ...filter, value: change.value });\n            }\n          }}\n        />\n        <AccessoryButton aria-label=\"remove\" icon=\"times\" variant=\"secondary\" onClick={onDelete} type=\"button\" />\n      </InputGroup>\n      {error && <Alert className={styles.alert} title={error} severity=\"error\" topSpacing={1} />}\n    </div>\n  );\n};\n\nconst getOperatorStyles = (theme: GrafanaTheme2) => ({\n  root: css({\n    padding: theme.spacing(0, 1),\n    alignSelf: 'center',\n  }),\n  container: css({ display: 'inline-block' }),\n  alert: css({ minWidth: '100%', width: 'min-content' }),\n});\n","import { isEqual } from 'lodash';\nimport { useMemo, useState } from 'react';\n\nimport { EditorList } from '@grafana/experimental';\n\nimport { CloudWatchDatasource } from '../../../datasource';\nimport { Dimensions as DimensionsType, MetricStat } from '../../../types';\n\nimport { FilterItem } from './FilterItem';\n\nexport interface Props {\n  metricStat: MetricStat;\n  onChange: (dimensions: DimensionsType) => void;\n  datasource: CloudWatchDatasource;\n  disableExpressions: boolean;\n}\n\nexport interface DimensionFilterCondition {\n  key?: string;\n  operator?: string;\n  value?: string;\n}\n\nconst dimensionsToFilterConditions = (dimensions: DimensionsType | undefined) =>\n  Object.entries(dimensions ?? {}).reduce<DimensionFilterCondition[]>((acc, [key, value]) => {\n    if (!value) {\n      return acc;\n    }\n\n    // Previously, we only appended to the `acc`umulated dimensions if the value was a string.\n    // However, Cloudwatch can present dimensions with single-value arrays, e.g.\n    //   k: FunctionName\n    //   v: ['MyLambdaFunction']\n    // in which case we grab the single-value from the Array and use that as the value.\n    let v = '';\n    if (typeof value === 'string') {\n      v = value;\n    } else if (Array.isArray(value) && typeof value[0] === 'string') {\n      v = value[0];\n    }\n\n    if (!v) {\n      return acc;\n    }\n\n    const filter = {\n      key: key,\n      value: v,\n      operator: '=',\n    };\n    return [...acc, filter];\n  }, []);\n\nconst filterConditionsToDimensions = (filters: DimensionFilterCondition[]) => {\n  return filters.reduce<DimensionsType>((acc, { key, value }) => {\n    if (key && value) {\n      return { ...acc, [key]: value };\n    }\n    return acc;\n  }, {});\n};\n\nexport const Dimensions = ({ metricStat, datasource, disableExpressions, onChange }: Props) => {\n  const dimensionFilters = useMemo(() => dimensionsToFilterConditions(metricStat.dimensions), [metricStat.dimensions]);\n  const [items, setItems] = useState<DimensionFilterCondition[]>(dimensionFilters);\n  const onDimensionsChange = (newItems: Array<Partial<DimensionFilterCondition>>) => {\n    setItems(newItems);\n\n    // The onChange event should only be triggered in the case there is a complete dimension object.\n    // So when a new key is added that does not yet have a value, it should not trigger an onChange event.\n    const newDimensions = filterConditionsToDimensions(newItems);\n    if (!isEqual(newDimensions, metricStat.dimensions)) {\n      onChange(newDimensions);\n    }\n  };\n\n  return (\n    <EditorList\n      items={items}\n      onChange={onDimensionsChange}\n      renderItem={makeRenderFilter(datasource, metricStat, disableExpressions)}\n    />\n  );\n};\n\nfunction makeRenderFilter(datasource: CloudWatchDatasource, metricStat: MetricStat, disableExpressions: boolean) {\n  function renderFilter(\n    item: DimensionFilterCondition,\n    onChange: (item: DimensionFilterCondition) => void,\n    onDelete: () => void\n  ) {\n    return (\n      <FilterItem\n        filter={item}\n        onChange={(item) => onChange(item)}\n        datasource={datasource}\n        metricStat={metricStat}\n        disableExpressions={disableExpressions}\n        onDelete={onDelete}\n      />\n    );\n  }\n\n  return renderFilter;\n}\n","import { useEffect } from 'react';\nimport * as React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField, EditorFieldGroup, EditorRow, EditorRows, EditorSwitch } from '@grafana/experimental';\nimport { config } from '@grafana/runtime';\nimport { Select } from '@grafana/ui';\n\nimport { CloudWatchDatasource } from '../../../datasource';\nimport { useAccountOptions, useMetrics, useNamespaces } from '../../../hooks';\nimport { standardStatistics } from '../../../standardStatistics';\nimport { MetricStat } from '../../../types';\nimport { appendTemplateVariables, toOption } from '../../../utils/utils';\nimport { Account } from '../Account';\nimport { Dimensions } from '../Dimensions/Dimensions';\n\nexport type Props = {\n  refId: string;\n  metricStat: MetricStat;\n  datasource: CloudWatchDatasource;\n  disableExpressions?: boolean;\n  onChange: (value: MetricStat) => void;\n};\n\nconst percentileSyntaxRE = /^(p|tm|tc|ts|wm)\\d{2}(?:\\.\\d{1,2})?$/;\nconst boundariesInnerParenthesesSyntax = `\\\\d*(\\\\.\\\\d+)?%?:\\\\d*(\\\\.\\\\d+)?%?`;\nconst boundariesSyntaxRE = new RegExp(`^(PR|TM|TC|TS|WM)\\\\((${boundariesInnerParenthesesSyntax})\\\\)$`);\n\n// used in both Metric query editor and in Annotations Editor\nexport const MetricStatEditor = ({\n  refId,\n  metricStat,\n  datasource,\n  disableExpressions = false,\n  onChange,\n}: React.PropsWithChildren<Props>) => {\n  const namespaces = useNamespaces(datasource);\n  const metrics = useMetrics(datasource, metricStat);\n  const accountState = useAccountOptions(datasource.resources, metricStat.region);\n\n  useEffect(() => {\n    datasource.resources.isMonitoringAccount(metricStat.region).then((isMonitoringAccount) => {\n      if (isMonitoringAccount && !accountState.loading && accountState.value?.length && !metricStat.accountId) {\n        onChange({ ...metricStat, accountId: 'all' });\n      }\n\n      if (!accountState.loading && accountState.value && !accountState.value.length && metricStat.accountId) {\n        onChange({ ...metricStat, accountId: undefined });\n      }\n    });\n  }, [accountState, metricStat, onChange, datasource.resources]);\n\n  const onNamespaceChange = async (metricStat: MetricStat) => {\n    const validatedQuery = await validateMetricName(metricStat);\n    onChange(validatedQuery);\n  };\n\n  const validateMetricName = async (metricStat: MetricStat) => {\n    let { metricName, namespace, region } = metricStat;\n    if (!metricName) {\n      return metricStat;\n    }\n    await datasource.resources.getMetrics({ namespace, region }).then((result: Array<SelectableValue<string>>) => {\n      if (!result.find((metric) => metric.value === metricName)) {\n        metricName = '';\n      }\n    });\n    return { ...metricStat, metricName };\n  };\n\n  return (\n    <EditorRows>\n      <EditorRow>\n        {!disableExpressions && config.featureToggles.cloudWatchCrossAccountQuerying && (\n          <Account\n            accountId={metricStat.accountId}\n            onChange={(accountId?: string) => {\n              onChange({ ...metricStat, accountId });\n            }}\n            accountOptions={accountState?.value || []}\n          ></Account>\n        )}\n        <EditorFieldGroup>\n          <EditorField label=\"Namespace\" width={26}>\n            <Select\n              aria-label=\"Namespace\"\n              value={metricStat?.namespace && toOption(metricStat.namespace)}\n              allowCustomValue\n              options={namespaces}\n              onChange={({ value: namespace }) => {\n                if (namespace) {\n                  onNamespaceChange({ ...metricStat, namespace });\n                }\n              }}\n            />\n          </EditorField>\n          <EditorField label=\"Metric name\" width={16}>\n            <Select\n              aria-label=\"Metric name\"\n              value={metricStat?.metricName && toOption(metricStat.metricName)}\n              allowCustomValue\n              options={metrics}\n              onChange={({ value: metricName }) => {\n                if (metricName) {\n                  onChange({ ...metricStat, metricName });\n                }\n              }}\n            />\n          </EditorField>\n\n          <EditorField label=\"Statistic\" width={16}>\n            <Select\n              inputId={`${refId}-metric-stat-editor-select-statistic`}\n              allowCustomValue\n              value={toOption(metricStat.statistic ?? standardStatistics[0])}\n              options={appendTemplateVariables(\n                datasource,\n                standardStatistics.filter((s) => s !== metricStat.statistic).map(toOption)\n              )}\n              onChange={({ value: statistic }) => {\n                if (\n                  !statistic ||\n                  (!standardStatistics.includes(statistic) &&\n                    !(percentileSyntaxRE.test(statistic) || boundariesSyntaxRE.test(statistic)) &&\n                    !datasource.templateSrv.containsTemplate(statistic))\n                ) {\n                  return;\n                }\n\n                onChange({ ...metricStat, statistic });\n              }}\n            />\n          </EditorField>\n        </EditorFieldGroup>\n      </EditorRow>\n\n      <EditorRow>\n        <EditorField label=\"Dimensions\">\n          <Dimensions\n            metricStat={metricStat}\n            onChange={(dimensions) => onChange({ ...metricStat, dimensions })}\n            disableExpressions={disableExpressions}\n            datasource={datasource}\n          />\n        </EditorField>\n        {!disableExpressions && (\n          <EditorField\n            label=\"Match exact\"\n            optional={true}\n            tooltip={\n              <>\n                {\n                  'Only show metrics that contain exactly the dimensions defined in the query and match the specified values. If this is enabled, all dimensions of the metric being queried must be specified so that the '\n                }\n                <a\n                  href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/search-expression-syntax.html\"\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  metric schema\n                </a>\n                {\n                  ' matches exactly. If this is disabled, metrics that match the schema and have additional dimensions will also be returned.'\n                }\n              </>\n            }\n            tooltipInteractive\n          >\n            <EditorSwitch\n              id={`${refId}-cloudwatch-match-exact`}\n              value={!!metricStat.matchExact}\n              onChange={(e) => {\n                onChange({\n                  ...metricStat,\n                  matchExact: e.currentTarget.checked,\n                });\n              }}\n            />\n          </EditorField>\n        )}\n      </EditorRow>\n    </EditorRows>\n  );\n};\n","import { ChangeEvent } from 'react';\n\nimport { QueryEditorProps } from '@grafana/data';\nimport { EditorField, EditorHeader, EditorRow, EditorSwitch, InlineSelect } from '@grafana/experimental';\nimport { Alert, Input, Space } from '@grafana/ui';\n\nimport { CloudWatchDatasource } from '../../datasource';\nimport { isCloudWatchAnnotationQuery } from '../../guards';\nimport { useRegions } from '../../hooks';\nimport { CloudWatchJsonData, CloudWatchQuery, MetricStat } from '../../types';\nimport { MetricStatEditor } from '../shared/MetricStatEditor/MetricStatEditor';\n\nexport type Props = QueryEditorProps<CloudWatchDatasource, CloudWatchQuery, CloudWatchJsonData>;\n\n// Dashboard Settings -> Annotations -> New Query\nexport const AnnotationQueryEditor = (props: Props) => {\n  const { query, onChange, datasource } = props;\n  const [regions, regionIsLoading] = useRegions(datasource);\n\n  if (!isCloudWatchAnnotationQuery(query)) {\n    return (\n      <Alert severity=\"error\" title=\"Invalid annotation query\" topSpacing={2}>\n        {JSON.stringify(query, null, 4)}\n      </Alert>\n    );\n  }\n\n  return (\n    <>\n      <EditorHeader>\n        <InlineSelect\n          label=\"Region\"\n          value={regions.find((v) => v.value === query.region)}\n          placeholder=\"Select region\"\n          allowCustomValue\n          onChange={({ value: region }) => region && onChange({ ...query, region })}\n          options={regions}\n          isLoading={regionIsLoading}\n        />\n      </EditorHeader>\n      <Space v={0.5} />\n      <MetricStatEditor\n        {...props}\n        refId={query.refId}\n        metricStat={query}\n        disableExpressions={true}\n        onChange={(metricStat: MetricStat) => onChange({ ...query, ...metricStat })}\n      ></MetricStatEditor>\n      <Space v={0.5} />\n      <EditorRow>\n        <EditorField label=\"Period\" width={26} tooltip=\"Minimum interval between points in seconds.\">\n          <Input\n            value={query.period || ''}\n            placeholder=\"auto\"\n            onChange={(event: ChangeEvent<HTMLInputElement>) => onChange({ ...query, period: event.target.value })}\n          />\n        </EditorField>\n        <EditorField label=\"Enable Prefix Matching\" optional={true}>\n          <EditorSwitch\n            value={query.prefixMatching}\n            onChange={(e) => {\n              onChange({\n                ...query,\n                prefixMatching: e.currentTarget.checked,\n              });\n            }}\n          />\n        </EditorField>\n        <EditorField label=\"Action\" optional={true} disabled={!query.prefixMatching}>\n          <Input\n            value={query.actionPrefix || ''}\n            onChange={(event: ChangeEvent<HTMLInputElement>) =>\n              onChange({ ...query, actionPrefix: event.target.value })\n            }\n          />\n        </EditorField>\n        <EditorField label=\"Alarm Name\" optional={true} disabled={!query.prefixMatching}>\n          <Input\n            value={query.alarmNamePrefix || ''}\n            onChange={(event: ChangeEvent<HTMLInputElement>) =>\n              onChange({ ...query, alarmNamePrefix: event.target.value })\n            }\n          />\n        </EditorField>\n      </EditorRow>\n    </>\n  );\n};\n","import {\n  CloudWatchAnnotationQuery,\n  CloudWatchLogsQuery,\n  CloudWatchMetricsQuery,\n  LogGroup,\n  LogsQueryLanguage,\n  MetricEditorMode,\n  MetricQueryType,\n  VariableQuery,\n  VariableQueryType,\n} from './types';\n\nexport const DEFAULT_METRICS_QUERY: Omit<CloudWatchMetricsQuery, 'refId'> = {\n  queryMode: 'Metrics',\n  namespace: '',\n  metricName: '',\n  expression: '',\n  dimensions: {},\n  region: 'default',\n  id: '',\n  statistic: 'Average',\n  period: '',\n  metricQueryType: MetricQueryType.Search,\n  metricEditorMode: MetricEditorMode.Builder,\n  sql: undefined,\n  sqlExpression: '',\n  matchExact: true,\n};\n\nexport const DEFAULT_ANNOTATIONS_QUERY: Omit<CloudWatchAnnotationQuery, 'refId'> = {\n  queryMode: 'Annotations',\n  namespace: '',\n  region: 'default',\n  statistic: 'Average',\n};\n\nexport const DEFAULT_CWLI_QUERY_STRING = 'fields @timestamp, @message |\\nsort @timestamp desc |\\nlimit 20';\nexport const DEFAULT_PPL_QUERY_STRING = 'fields `@timestamp`, `@message`\\n| sort - `@timestamp`\\n| head 25s';\nexport const DEFAULT_SQL_QUERY_STRING =\n  'SELECT `@timestamp`, `@message`\\nFROM `log_group`\\nORDER BY `@timestamp` DESC\\nLIMIT 25;';\n\nexport const getDefaultLogsQuery = (\n  defaultLogGroups?: LogGroup[],\n  legacyDefaultLogGroups?: string[]\n): Omit<CloudWatchLogsQuery, 'refId' | 'queryMode'> => ({\n  id: '',\n  region: 'default',\n  // in case legacy default log groups have been defined in the ConfigEditor, they will be migrated in the LogGroupsField component or the next time the ConfigEditor is opened.\n  // the migration requires async backend calls, so we don't want to do it here as it would block the UI.\n  logGroupNames: legacyDefaultLogGroups,\n  logGroups: defaultLogGroups ?? [],\n  queryLanguage: LogsQueryLanguage.CWLI,\n});\n\nexport const DEFAULT_VARIABLE_QUERY: Partial<VariableQuery> = {\n  queryType: VariableQueryType.Regions,\n  region: 'default',\n};\n","import { AnnotationQuery } from '@grafana/data';\n\nimport { AnnotationQueryEditor } from './components/AnnotationQueryEditor/AnnotationQueryEditor';\nimport { DEFAULT_ANNOTATIONS_QUERY } from './defaultQueries';\nimport { isCloudWatchAnnotation } from './guards';\nimport { CloudWatchAnnotationQuery, CloudWatchQuery, LegacyAnnotationQuery } from './types';\n\nexport const CloudWatchAnnotationSupport = {\n  // converts legacy angular style queries to new format. Also sets the same default values as in the deprecated angular directive\n  prepareAnnotation: (\n    query: LegacyAnnotationQuery | AnnotationQuery<CloudWatchAnnotationQuery>\n  ): AnnotationQuery<CloudWatchAnnotationQuery> => {\n    if (isCloudWatchAnnotation(query)) {\n      return query;\n    }\n\n    return {\n      // setting AnnotationQuery props explicitly since spreading would incorrectly use props that should be on the target only\n      datasource: query.datasource,\n      enable: query.enable,\n      iconColor: query.iconColor,\n      name: query.name,\n      builtIn: query.builtIn,\n      hide: query.hide,\n      target: {\n        ...query.target,\n        ...query,\n        statistic: query.statistic || DEFAULT_ANNOTATIONS_QUERY.statistic,\n        region: query.region || DEFAULT_ANNOTATIONS_QUERY.region,\n        queryMode: 'Annotations',\n        refId: query.refId || 'annotationQuery',\n      },\n    };\n  },\n  // return undefined if query is not complete so that annotation query execution is quietly skipped\n  prepareQuery: (anno: AnnotationQuery<CloudWatchAnnotationQuery>): CloudWatchQuery | undefined => {\n    if (!anno.target) {\n      return undefined;\n    }\n\n    const {\n      prefixMatching,\n      actionPrefix,\n      alarmNamePrefix,\n      statistic,\n      namespace,\n      metricName,\n      dimensions = {},\n    } = anno.target;\n    const validPrefixMatchingQuery = !!prefixMatching && !!actionPrefix && !!alarmNamePrefix;\n    const validMetricStatQuery =\n      !prefixMatching && !!namespace && !!metricName && !!statistic && !!Object.values(dimensions).length;\n\n    if (validPrefixMatchingQuery || validMetricStatQuery) {\n      return anno.target;\n    }\n\n    return undefined;\n  },\n  getDefaultQuery() {\n    return DEFAULT_ANNOTATIONS_QUERY;\n  },\n  QueryEditor: AnnotationQueryEditor,\n};\n","import { VariableOption, UserProps, OrgProps, DashboardProps, ScopedVars } from '@grafana/data';\nimport { TemplateSrv } from '@grafana/runtime';\n\n/*\n * This regex matches 3 types of variable reference with an optional format specifier\n * There are 6 capture groups that replace will return\n * \\$(\\w+)                                    $var1\n * \\[\\[(\\w+?)(?::(\\w+))?\\]\\]                  [[var2]] or [[var2:fmt2]]\n * \\${(\\w+)(?:\\.([^:^\\}]+))?(?::([^\\}]+))?}   ${var3} or ${var3.fieldPath} or ${var3:fmt3} (or ${var3.fieldPath:fmt3} but that is not a separate capture group)\n */\nconst variableRegex = /\\$(\\w+)|\\[\\[(\\w+?)(?::(\\w+))?\\]\\]|\\${(\\w+)(?:\\.([^:^\\}]+))?(?::([^\\}]+))?}/g;\n\n// Helper function since lastIndex is not reset\nconst variableRegexExec = (variableString: string) => {\n  variableRegex.lastIndex = 0;\n  return variableRegex.exec(variableString);\n};\n\nexport const getVariableName = (expression: string) => {\n  const match = variableRegexExec(expression);\n  if (!match) {\n    return null;\n  }\n  const variableName = match.slice(1).find((match) => match !== undefined);\n  return variableName;\n};\n\n/**\n * @remarks\n * Takes a string array of variables and non-variables and returns a string array with the raw values of the variable(s)\n * A few examples:\n * single-valued variable + non-variable item. ['$singleValuedVariable', 'log-group'] => ['value', 'log-group']\n * multi-valued variable + non-variable item. ['$multiValuedVariable', 'log-group'] => ['value1', 'value2', 'log-group']\n * @param templateSrv - The template service\n * @param strings - The array of strings to interpolate. May contain variables and non-variables.\n * @pararm scopedVars - The scoped variables to use when interpolating the variables.\n * @param key - Allows you to specify whether the variable MetricFindValue.text or MetricFindValue.value should be used when interpolating the variable. Optional, defaults to 'value'.\n **/\nexport const interpolateStringArrayUsingSingleOrMultiValuedVariable = (\n  templateSrv: TemplateSrv,\n  strings: string[],\n  scopedVars: ScopedVars,\n  key?: 'value' | 'text'\n) => {\n  key = key ?? 'value';\n  const format = key === 'value' ? 'pipe' : 'text';\n  let result: string[] = [];\n  for (const string of strings) {\n    const variableName = getVariableName(string);\n    const valueVar = templateSrv.getVariables().find(({ name }) => name === variableName);\n\n    if (valueVar && 'current' in valueVar && isVariableOption(valueVar.current)) {\n      const rawValue = valueVar.current[key];\n      if (Array.isArray(rawValue)) {\n        const separator = format === 'text' ? ' + ' : '|';\n        result.push(...templateSrv.replace(string, scopedVars, format).split(separator));\n      } else if (typeof rawValue === 'string') {\n        result.push(templateSrv.replace(string, scopedVars, format));\n      }\n    } else {\n      // if it's not a variable, just add the raw value\n      result.push(string);\n    }\n  }\n\n  return result;\n};\n\nexport const isTemplateVariable = (templateSrv: TemplateSrv, string: string) => {\n  const variableName = getVariableName(string);\n  return templateSrv.getVariables().some(({ name }) => name === variableName);\n};\n\nconst isVariableOption = (\n  current:\n    | VariableOption\n    | Record<string, never>\n    | { value: UserProps }\n    | { value: OrgProps }\n    | { value: DashboardProps }\n): current is VariableOption => {\n  return current.hasOwnProperty('value') && current.hasOwnProperty('text');\n};\n","import Prism, { Grammar } from 'prismjs';\nimport { lastValueFrom } from 'rxjs';\n\nimport { AbsoluteTimeRange, HistoryItem, LanguageProvider } from '@grafana/data';\nimport { BackendDataSourceResponse, FetchResponse, TemplateSrv, getTemplateSrv } from '@grafana/runtime';\nimport { CompletionItemGroup, SearchFunctionType, Token, TypeaheadInput, TypeaheadOutput } from '@grafana/ui';\n\nimport { CloudWatchDatasource } from '../../datasource';\nimport { CloudWatchQuery, LogGroup } from '../../types';\nimport { interpolateStringArrayUsingSingleOrMultiValuedVariable } from '../../utils/templateVariableUtils';\n\nimport syntax, {\n  AGGREGATION_FUNCTIONS_STATS,\n  BOOLEAN_FUNCTIONS,\n  DATETIME_FUNCTIONS,\n  FIELD_AND_FILTER_FUNCTIONS,\n  IP_FUNCTIONS,\n  NUMERIC_OPERATORS,\n  QUERY_COMMANDS,\n  STRING_FUNCTIONS,\n} from './syntax';\n\nexport type CloudWatchHistoryItem = HistoryItem<CloudWatchQuery>;\n\ntype TypeaheadContext = {\n  history?: CloudWatchHistoryItem[];\n  absoluteRange?: AbsoluteTimeRange;\n  logGroups?: LogGroup[];\n  region: string;\n};\n\nexport class CloudWatchLogsLanguageProvider extends LanguageProvider {\n  started = false;\n  declare initialRange: AbsoluteTimeRange;\n  datasource: CloudWatchDatasource;\n  templateSrv: TemplateSrv;\n\n  constructor(datasource: CloudWatchDatasource, templateSrv?: TemplateSrv, initialValues?: any) {\n    super();\n\n    this.datasource = datasource;\n    this.templateSrv = templateSrv ?? getTemplateSrv();\n\n    Object.assign(this, initialValues);\n  }\n\n  // Strip syntax chars\n  cleanText = (s: string) => s.replace(/[()]/g, '').trim();\n\n  getSyntax(): Grammar {\n    return syntax;\n  }\n\n  request = (url: string, params?: any): Promise<FetchResponse<BackendDataSourceResponse>> => {\n    return lastValueFrom(this.datasource.logsQueryRunner.awsRequest(url, params));\n  };\n\n  start = () => {\n    if (!this.startTask) {\n      this.startTask = Promise.resolve().then(() => {\n        this.started = true;\n        return [];\n      });\n    }\n\n    return this.startTask;\n  };\n\n  isStatsQuery(query: string): boolean {\n    const grammar = this.getSyntax();\n    const tokens = Prism.tokenize(query, grammar) ?? [];\n\n    return !!tokens.find(\n      (token) =>\n        typeof token !== 'string' &&\n        token.content.toString().toLowerCase() === 'stats' &&\n        token.type === 'query-command'\n    );\n  }\n\n  /**\n   * Return suggestions based on input that can be then plugged into a typeahead dropdown.\n   * Keep this DOM-free for testing\n   * @param input\n   * @param context Is optional in types but is required in case we are doing getLabelCompletionItems\n   * @param context.absoluteRange Required in case we are doing getLabelCompletionItems\n   * @param context.history Optional used only in getEmptyCompletionItems\n   */\n  async provideCompletionItems(input: TypeaheadInput, context?: TypeaheadContext): Promise<TypeaheadOutput> {\n    const { value } = input;\n\n    // Get tokens\n    const tokens = value?.data.get('tokens');\n\n    if (!tokens || !tokens.length) {\n      return { suggestions: [] };\n    }\n\n    const curToken: Token = tokens.filter(\n      (token: any) =>\n        token.offsets.start <= value!.selection?.start?.offset && token.offsets.end >= value!.selection?.start?.offset\n    )[0];\n\n    const isFirstToken = !curToken.prev;\n    const prevToken = prevNonWhitespaceToken(curToken);\n\n    const isCommandStart = isFirstToken || (!isFirstToken && prevToken?.types.includes('command-separator'));\n    if (isCommandStart) {\n      return this.getCommandCompletionItems();\n    }\n\n    if (isInsideFunctionParenthesis(curToken)) {\n      return await this.getFieldCompletionItems(context?.logGroups, context?.region || 'default');\n    }\n\n    if (isAfterKeyword('by', curToken)) {\n      return this.handleKeyword(context);\n    }\n\n    if (prevToken?.types.includes('comparison-operator')) {\n      return this.handleComparison(context);\n    }\n\n    const commandToken = previousCommandToken(curToken);\n    if (commandToken) {\n      return await this.handleCommand(commandToken, curToken, context);\n    }\n\n    return {\n      suggestions: [],\n    };\n  }\n\n  private fetchFields = async (logGroups: LogGroup[], region: string): Promise<string[]> => {\n    const interpolatedLogGroups = interpolateStringArrayUsingSingleOrMultiValuedVariable(\n      this.templateSrv,\n      logGroups.map((lg) => lg.name),\n      {},\n      'text'\n    );\n    const results = await Promise.all(\n      interpolatedLogGroups.map((logGroupName) =>\n        this.datasource.resources\n          .getLogGroupFields({ logGroupName, region })\n          .then((fields) => fields.filter((f) => f).map((f) => f.value.name ?? ''))\n      )\n    );\n\n    return results.flat();\n  };\n\n  private handleKeyword = async (context?: TypeaheadContext): Promise<TypeaheadOutput> => {\n    const suggs = await this.getFieldCompletionItems(context?.logGroups, context?.region || 'default');\n    const functionSuggestions: CompletionItemGroup[] = [\n      {\n        searchFunctionType: SearchFunctionType.Prefix,\n        label: 'Functions',\n        items: STRING_FUNCTIONS.concat(DATETIME_FUNCTIONS, IP_FUNCTIONS),\n      },\n    ];\n    suggs.suggestions.push(...functionSuggestions);\n\n    return suggs;\n  };\n\n  private handleCommand = async (\n    commandToken: Token,\n    curToken: Token,\n    context?: TypeaheadContext\n  ): Promise<TypeaheadOutput> => {\n    const queryCommand = commandToken.content.toLowerCase();\n    const prevToken = prevNonWhitespaceToken(curToken);\n    const currentTokenIsFirstArg = prevToken === commandToken;\n\n    if (queryCommand === 'sort') {\n      return this.handleSortCommand(currentTokenIsFirstArg, curToken, context);\n    }\n\n    if (queryCommand === 'parse') {\n      if (currentTokenIsFirstArg) {\n        return await this.getFieldCompletionItems(context?.logGroups ?? [], context?.region || 'default');\n      }\n    }\n\n    const currentTokenIsAfterCommandAndEmpty = isTokenType(commandToken.next, 'whitespace') && !commandToken.next?.next;\n    const currentTokenIsAfterCommand =\n      currentTokenIsAfterCommandAndEmpty || nextNonWhitespaceToken(commandToken) === curToken;\n\n    const currentTokenIsComma = isTokenType(curToken, 'punctuation', ',');\n    const currentTokenIsCommaOrAfterComma = currentTokenIsComma || isTokenType(prevToken, 'punctuation', ',');\n\n    // We only show suggestions if we are after a command or after a comma which is a field separator\n    if (!(currentTokenIsAfterCommand || currentTokenIsCommaOrAfterComma)) {\n      return { suggestions: [] };\n    }\n\n    if (['display', 'fields'].includes(queryCommand)) {\n      const typeaheadOutput = await this.getFieldCompletionItems(\n        context?.logGroups ?? [],\n        context?.region || 'default'\n      );\n      typeaheadOutput.suggestions.push(...this.getFieldAndFilterFunctionCompletionItems().suggestions);\n\n      return typeaheadOutput;\n    }\n\n    if (queryCommand === 'stats') {\n      const typeaheadOutput = this.getStatsAggCompletionItems();\n      if (currentTokenIsComma || currentTokenIsAfterCommandAndEmpty) {\n        typeaheadOutput?.suggestions.forEach((group) => {\n          group.skipFilter = true;\n        });\n      }\n      return typeaheadOutput;\n    }\n\n    if (queryCommand === 'filter' && currentTokenIsFirstArg) {\n      const sugg = await this.getFieldCompletionItems(context?.logGroups, context?.region || 'default');\n      const boolFuncs = this.getBoolFuncCompletionItems();\n      sugg.suggestions.push(...boolFuncs.suggestions);\n      return sugg;\n    }\n    return { suggestions: [] };\n  };\n\n  private async handleSortCommand(\n    isFirstArgument: boolean,\n    curToken: Token,\n    context?: TypeaheadContext\n  ): Promise<TypeaheadOutput> {\n    if (isFirstArgument) {\n      return await this.getFieldCompletionItems(context?.logGroups, context?.region || 'default');\n    } else if (isTokenType(prevNonWhitespaceToken(curToken), 'field-name')) {\n      // suggest sort options\n      return {\n        suggestions: [\n          {\n            searchFunctionType: SearchFunctionType.Prefix,\n            label: 'Sort Order',\n            items: [\n              {\n                label: 'asc',\n              },\n              { label: 'desc' },\n            ],\n          },\n        ],\n      };\n    }\n\n    return { suggestions: [] };\n  }\n\n  private handleComparison = async (context?: TypeaheadContext) => {\n    const fieldsSuggestions = await this.getFieldCompletionItems(context?.logGroups, context?.region || 'default');\n    const comparisonSuggestions = this.getComparisonCompletionItems();\n    fieldsSuggestions.suggestions.push(...comparisonSuggestions.suggestions);\n    return fieldsSuggestions;\n  };\n\n  private getCommandCompletionItems = (): TypeaheadOutput => {\n    return {\n      suggestions: [{ searchFunctionType: SearchFunctionType.Prefix, label: 'Commands', items: QUERY_COMMANDS }],\n    };\n  };\n\n  private getFieldAndFilterFunctionCompletionItems = (): TypeaheadOutput => {\n    return {\n      suggestions: [\n        { searchFunctionType: SearchFunctionType.Prefix, label: 'Functions', items: FIELD_AND_FILTER_FUNCTIONS },\n      ],\n    };\n  };\n\n  private getStatsAggCompletionItems = (): TypeaheadOutput => {\n    return {\n      suggestions: [\n        { searchFunctionType: SearchFunctionType.Prefix, label: 'Functions', items: AGGREGATION_FUNCTIONS_STATS },\n      ],\n    };\n  };\n\n  private getBoolFuncCompletionItems = (): TypeaheadOutput => {\n    return {\n      suggestions: [\n        {\n          searchFunctionType: SearchFunctionType.Prefix,\n          label: 'Functions',\n          items: BOOLEAN_FUNCTIONS,\n        },\n      ],\n    };\n  };\n\n  private getComparisonCompletionItems = (): TypeaheadOutput => {\n    return {\n      suggestions: [\n        {\n          searchFunctionType: SearchFunctionType.Prefix,\n          label: 'Functions',\n          items: NUMERIC_OPERATORS.concat(BOOLEAN_FUNCTIONS),\n        },\n      ],\n    };\n  };\n\n  private getFieldCompletionItems = async (\n    logGroups: LogGroup[] | undefined,\n    region: string\n  ): Promise<TypeaheadOutput> => {\n    if (!logGroups) {\n      return { suggestions: [] };\n    }\n\n    const fields = await this.fetchFields(logGroups, region);\n    return {\n      suggestions: [\n        {\n          label: 'Fields',\n          items: fields.map((field) => ({\n            label: field,\n            insertText: field.match(/@?[_a-zA-Z]+[_.0-9a-zA-Z]*/) ? undefined : `\\`${field}\\``,\n          })),\n        },\n      ],\n    };\n  };\n}\n\nfunction nextNonWhitespaceToken(token: Token): Token | null {\n  let curToken = token;\n\n  while (curToken.next) {\n    if (curToken.next.types.includes('whitespace')) {\n      curToken = curToken.next;\n    } else {\n      return curToken.next;\n    }\n  }\n\n  return null;\n}\n\nfunction prevNonWhitespaceToken(token: Token): Token | null {\n  let curToken = token;\n\n  while (curToken.prev) {\n    if (isTokenType(curToken.prev, 'whitespace')) {\n      curToken = curToken.prev;\n    } else {\n      return curToken.prev;\n    }\n  }\n\n  return null;\n}\n\nfunction previousCommandToken(startToken: Token): Token | null {\n  let thisToken = startToken;\n  while (!!thisToken.prev) {\n    thisToken = thisToken.prev;\n    if (\n      thisToken.types.includes('query-command') &&\n      (!thisToken.prev || isTokenType(prevNonWhitespaceToken(thisToken), 'command-separator'))\n    ) {\n      return thisToken;\n    }\n  }\n  return null;\n}\n\nconst funcsWithFieldArgs = [\n  'avg',\n  'count',\n  'count_distinct',\n  'earliest',\n  'latest',\n  'sortsFirst',\n  'sortsLast',\n  'max',\n  'min',\n  'pct',\n  'stddev',\n  'ispresent',\n  'fromMillis',\n  'toMillis',\n  'isempty',\n  'isblank',\n  'isValidIp',\n  'isValidIpV4',\n  'isValidIpV6',\n  'isIpInSubnet',\n  'isIpv4InSubnet',\n  'isIpv6InSubnet',\n].map((funcName) => funcName.toLowerCase());\n\n/**\n * Returns true if cursor is currently inside a function parenthesis for example `count(|)` or `count(@mess|)` should\n * return true.\n */\nfunction isInsideFunctionParenthesis(curToken: Token): boolean {\n  const prevToken = prevNonWhitespaceToken(curToken);\n\n  if (!prevToken) {\n    return false;\n  }\n\n  const parenthesisToken = curToken.content === '(' ? curToken : prevToken.content === '(' ? prevToken : undefined;\n  if (parenthesisToken) {\n    const maybeFunctionToken = prevNonWhitespaceToken(parenthesisToken);\n    if (maybeFunctionToken) {\n      return (\n        funcsWithFieldArgs.includes(maybeFunctionToken.content.toLowerCase()) &&\n        maybeFunctionToken.types.includes('function')\n      );\n    }\n  }\n  return false;\n}\n\nfunction isAfterKeyword(keyword: string, token: Token): boolean {\n  const maybeKeyword = getPreviousTokenExcluding(token, [\n    'whitespace',\n    'function',\n    'punctuation',\n    'field-name',\n    'number',\n  ]);\n  if (isTokenType(maybeKeyword, 'keyword', 'by')) {\n    const prev = getPreviousTokenExcluding(token, ['whitespace']);\n    if (prev === maybeKeyword || isTokenType(prev, 'punctuation', ',')) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isTokenType(token: Token | undefined | null, type: string, content?: string): boolean {\n  if (!token?.types.includes(type)) {\n    return false;\n  }\n  if (content) {\n    if (token?.content.toLowerCase() !== content) {\n      return false;\n    }\n  }\n  return true;\n}\n\ntype TokenDef = string | { type: string; value: string };\nfunction getPreviousTokenExcluding(token: Token, exclude: TokenDef[]): Token | undefined | null {\n  let curToken = token.prev;\n  main: while (curToken) {\n    for (const item of exclude) {\n      if (typeof item === 'string') {\n        if (curToken.types.includes(item)) {\n          curToken = curToken.prev;\n          continue main;\n        }\n      } else {\n        if (curToken.types.includes(item.type) && curToken.content.toLowerCase() === item.value) {\n          curToken = curToken.prev;\n          continue main;\n        }\n      }\n    }\n    break;\n  }\n  return curToken;\n}\n","import { monacoTypes } from '@grafana/ui';\n\nimport { TokenTypes } from './types';\n\nexport class LinkedToken {\n  constructor(\n    public type: string,\n    public value: string,\n    public range: monacoTypes.IRange,\n    public previous: LinkedToken | null,\n    public next: LinkedToken | null,\n    public tokenTypes: TokenTypes\n  ) {}\n\n  isKeyword(): boolean {\n    return this.type === this.tokenTypes.Keyword;\n  }\n\n  isWhiteSpace(): boolean {\n    return this.type === this.tokenTypes.Whitespace;\n  }\n\n  isParenthesis(): boolean {\n    return this.type === this.tokenTypes.Parenthesis;\n  }\n\n  isIdentifier(): boolean {\n    return this.type === this.tokenTypes.Identifier;\n  }\n\n  isString(): boolean {\n    return this.type === this.tokenTypes.String;\n  }\n\n  isDoubleQuotedString(): boolean {\n    return this.type === this.tokenTypes.Type;\n  }\n\n  isVariable(): boolean {\n    return this.type === this.tokenTypes.Variable;\n  }\n\n  isFunction(): boolean {\n    return this.type === this.tokenTypes.Function;\n  }\n\n  isNumber(): boolean {\n    return this.type === this.tokenTypes.Number;\n  }\n\n  is(type: string, value?: string | number | boolean): boolean {\n    const isType = this.type === type;\n    return value !== undefined ? isType && this.value === value : isType;\n  }\n\n  endsWith(value: string | number | boolean): boolean {\n    return this.value === value || this.value[this.value.length - 1] === value;\n  }\n\n  getPreviousNonWhiteSpaceToken(): LinkedToken | null {\n    let curr = this.previous;\n    while (curr != null) {\n      if (!curr.isWhiteSpace()) {\n        return curr;\n      }\n      curr = curr.previous;\n    }\n    return null;\n  }\n\n  getPreviousOfType(type: string, value?: string): LinkedToken | null {\n    let curr = this.previous;\n    while (curr != null) {\n      const isType = curr.type === type;\n      if (value !== undefined ? isType && curr.value === value : isType) {\n        return curr;\n      }\n      curr = curr.previous;\n    }\n    return null;\n  }\n\n  getPreviousUntil(type: string, ignoreTypes: string[], value?: string): LinkedToken[] | null {\n    let tokens: LinkedToken[] = [];\n    let curr = this.previous;\n    while (curr != null) {\n      if (ignoreTypes.some((t) => t === curr?.type)) {\n        curr = curr.previous;\n        continue;\n      }\n\n      const isType = curr.type === type;\n      if (value !== undefined ? isType && curr.value === value : isType) {\n        return tokens;\n      }\n      if (!curr.isWhiteSpace()) {\n        tokens.push(curr);\n      }\n      curr = curr.previous;\n    }\n\n    return tokens;\n  }\n\n  getNextUntil(type: string, ignoreTypes: string[], value?: string): LinkedToken[] | null {\n    let tokens: LinkedToken[] = [];\n    let curr = this.next;\n    while (curr != null) {\n      if (ignoreTypes.some((t) => t === curr?.type)) {\n        curr = curr.next;\n        continue;\n      }\n\n      const isType = curr.type === type;\n      if (value !== undefined ? isType && curr.value === value : isType) {\n        return tokens;\n      }\n      if (!curr.isWhiteSpace()) {\n        tokens.push(curr);\n      }\n      curr = curr.next;\n    }\n\n    return tokens;\n  }\n\n  getPreviousKeyword(): LinkedToken | null {\n    let curr = this.previous;\n    while (curr != null) {\n      if (curr.isKeyword()) {\n        return curr;\n      }\n      curr = curr.previous;\n    }\n    return null;\n  }\n\n  getNextNonWhiteSpaceToken(): LinkedToken | null {\n    let curr = this.next;\n    while (curr != null) {\n      if (!curr.isWhiteSpace()) {\n        return curr;\n      }\n      curr = curr.next;\n    }\n    return null;\n  }\n\n  getNextOfType(type: string, value?: string): LinkedToken | null {\n    let curr = this.next;\n    while (curr != null) {\n      const isType = curr.type === type;\n      if (value !== undefined ? isType && curr.value === value : isType) {\n        return curr;\n      }\n      curr = curr.next;\n    }\n    return null;\n  }\n}\n","import type { monacoTypes } from '@grafana/ui';\n\nimport { LinkedToken } from './LinkedToken';\nimport { LanguageDefinition } from './register';\nimport { Monaco, TokenTypes } from './types';\n\nexport function linkedTokenBuilder(\n  monaco: Monaco,\n  language: LanguageDefinition,\n  model: monacoTypes.editor.ITextModel,\n  position: monacoTypes.IPosition,\n  tokenTypes: TokenTypes\n) {\n  let current: LinkedToken | null = null;\n  let previous: LinkedToken | null = null;\n  const tokensPerLine = monaco.editor.tokenize(model.getValue() ?? '', language.id);\n\n  for (let lineIndex = 0; lineIndex < tokensPerLine.length; lineIndex++) {\n    const tokens = tokensPerLine[lineIndex];\n    // In case position is first column in new line, add empty whitespace token so that links are not broken\n    if (!tokens.length && previous) {\n      const token: monacoTypes.Token = {\n        offset: 0,\n        type: tokenTypes.Whitespace,\n        language: language.id,\n        _tokenBrand: undefined,\n      };\n      tokens.push(token);\n    }\n\n    for (let columnIndex = 0; columnIndex < tokens.length; columnIndex++) {\n      const token = tokens[columnIndex];\n      let endColumn =\n        tokens.length > columnIndex + 1 ? tokens[columnIndex + 1].offset + 1 : model.getLineLength(lineIndex + 1) + 1;\n\n      const range: monacoTypes.IRange = {\n        startLineNumber: lineIndex + 1,\n        startColumn: token.offset === 0 ? 0 : token.offset + 1,\n        endLineNumber: lineIndex + 1,\n        endColumn,\n      };\n\n      const value = model.getValueInRange(range);\n      const newToken: LinkedToken = new LinkedToken(token.type, value, range, previous, null, tokenTypes);\n\n      if (monaco.Range.containsPosition(range, position)) {\n        current = newToken;\n      }\n\n      if (previous) {\n        previous.next = newToken;\n      }\n      previous = newToken;\n    }\n  }\n\n  return current;\n}\n","import { monacoTypes } from '@grafana/ui';\n\nimport { LanguageDefinition } from './register';\n\nexport type CompletionItem = monacoTypes.languages.CompletionItem;\n\nexport interface TokenTypes {\n  Parenthesis: string;\n  Whitespace: string;\n  Keyword: string;\n  Delimiter: string;\n  Operator: string;\n  Identifier: string;\n  Type: string;\n  Function: string;\n  Number: string;\n  String: string;\n  Variable: string;\n  Comment: string;\n  Regexp: string;\n}\n\nexport enum StatementPosition {\n  Unknown,\n  // sql\n  SelectKeyword,\n  AfterSelectKeyword,\n  SelectExpression,\n  AfterSelectExpression,\n  AfterSelectFuncFirstArgument,\n  PredefinedFunctionArgument,\n  FromKeyword,\n  AfterFrom,\n  AfterFromKeyword,\n  AfterFromArguments,\n  SchemaFuncFirstArgument,\n  SchemaFuncExtraArgument,\n  WhereKey,\n  WhereComparisonOperator,\n  WhereValue,\n  AfterWhereValue,\n  HavingKey,\n  HavingComparisonOperator,\n  HavingValue,\n  AfterHavingValue,\n  CaseKey,\n  CaseComparisonOperator,\n  CaseValue,\n  AfterCaseValue,\n  WhenKey,\n  WhenComparisonOperator,\n  WhenValue,\n  AfterWhenValue,\n  ThenExpression,\n  AfterThenExpression,\n  AfterElseKeyword,\n  OnKey,\n  OnComparisonOperator,\n  OnValue,\n  AfterOnValue,\n  AfterGroupByKeywords,\n  AfterGroupBy,\n  AfterOrderByKeywords,\n  AfterOrderByFunction,\n  AfterOrderByDirection,\n  Subquery,\n  // metric math\n  PredefinedFunction,\n  SearchFuncSecondArg,\n  SearchFuncThirdArg,\n  PredefinedFuncSecondArg,\n  AfterFunction,\n  WithinString,\n  // logs\n  NewCommand,\n  Comment,\n\n  DedupKeyword,\n  AfterDedupKeyword,\n  DisplayKeyword,\n  AfterDisplayKeyword,\n  FieldsKeyword,\n  AfterFieldsKeyword,\n  FilterKeyword,\n  AfterFilterKeyword,\n  FilterArg,\n  LimitKeyword,\n  AfterLimitKeyword,\n  ParseKeyword,\n  AfterParseKeyword,\n  SortKeyword,\n  AfterSortKeyword,\n  SortArg,\n  StatsKeyword,\n  AfterStatsKeyword,\n\n  AsKeyword,\n  AfterAsKeyword,\n  ByKeyword,\n  AfterByKeyword,\n  InKeyword,\n  AfterInKeyword,\n  LikeKeyword,\n  AfterLikeKeyword,\n\n  Function,\n  FunctionArg,\n  CommandArg,\n  AfterCommand,\n\n  ArithmeticOperator,\n  ArithmeticOperatorArg,\n  BooleanOperator,\n  BooleanOperatorArg,\n  ComparisonOperator,\n  ComparisonOperatorArg,\n\n  //PPL\n  BeforeLogicalExpression,\n  AfterArithmeticOperator,\n  AfterINKeyword,\n  SortField,\n  AfterHeadCommand,\n  AfterFieldsCommand,\n  FieldList,\n  AfterDedupFieldNames,\n  AfterStatsCommand,\n  StatsFunctionArgument,\n  AfterStatsBy,\n  AfterBooleanArgument,\n  EvalClause,\n  Expression,\n  SortFieldExpression,\n}\n\nexport enum SuggestionKind {\n  SelectKeyword,\n  AfterSelectKeyword,\n  AfterSelectExpression,\n  FunctionsWithArguments,\n  Metrics,\n  FromKeyword,\n  AfterFromKeyword,\n  AfterFromArguments,\n  JoinKeywords,\n  HavingKeywords,\n  SchemaKeyword,\n  Namespaces,\n  LabelKeys,\n  WhereKeyword,\n  GroupByKeywords,\n  OrderByKeywords,\n  FunctionsWithoutArguments,\n  LimitKeyword,\n  SortOrderDirectionKeyword,\n  ComparisonOperators,\n  LabelValues,\n  LogicalOperators,\n  CaseKeyword,\n  WhenKeyword,\n  ThenKeyword,\n  AfterThenExpression,\n\n  // metricmath,\n  KeywordArguments,\n  Operators,\n  Statistic,\n  Period,\n\n  // logs\n  Command,\n  Function,\n  InKeyword,\n\n  // PPL\n  BooleanFunction,\n  LogicalExpression,\n  ValueExpression,\n  FieldOperators,\n  Field,\n  BooleanLiteral,\n  DedupParameter,\n  StatsParameter,\n  BooleanArgument,\n  StatsFunctions,\n  SpanClause,\n  SortFunctions,\n}\n\nexport enum CompletionItemPriority {\n  High = 'a',\n  MediumHigh = 'd',\n  Medium = 'g',\n  MediumLow = 'k',\n  Low = 'q',\n}\n\nexport interface Editor {\n  tokenize: (value: string, languageId: string) => monacoTypes.Token[][];\n}\n\nexport interface Range {\n  containsPosition: (range: monacoTypes.IRange, position: monacoTypes.IPosition) => boolean;\n  fromPositions: (start: monacoTypes.IPosition, end?: monacoTypes.IPosition) => monacoTypes.Range;\n}\n\nexport interface Languages {\n  CompletionItemInsertTextRule: {\n    InsertAsSnippet: 4;\n  };\n  CompletionItemKind: {\n    Function: 1;\n  };\n}\nexport interface Monaco {\n  editor: Editor;\n  Range: Range;\n  languages: Languages;\n}\n\nexport interface Completeable {\n  getCompletionProvider(\n    monaco: Monaco,\n    languageDefinition: LanguageDefinition\n  ): monacoTypes.languages.CompletionItemProvider;\n}\n","import { getTemplateSrv, TemplateSrv } from '@grafana/runtime';\nimport type { Monaco, monacoTypes } from '@grafana/ui';\n\nimport { ResourcesAPI } from '../../resources/ResourcesAPI';\nimport { CLOUDWATCH_PPL_LANGUAGE_DEFINITION_ID } from '../cloudwatch-ppl/language';\n\nimport { LinkedToken } from './LinkedToken';\nimport { linkedTokenBuilder } from './linkedTokenBuilder';\nimport { LanguageDefinition } from './register';\nimport { Completeable, StatementPosition, SuggestionKind, TokenTypes } from './types';\n\ntype CompletionItem = monacoTypes.languages.CompletionItem;\n\n/*\nCompletionItemProvider is an extendable class which needs to implement :\n- tokenTypes\n- getStatementPosition\n- getSuggestionKinds\n- getSuggestions\n*/\nexport class CompletionItemProvider implements Completeable {\n  resources: ResourcesAPI;\n  templateSrv: TemplateSrv;\n  tokenTypes: TokenTypes;\n\n  constructor(resources: ResourcesAPI, templateSrv: TemplateSrv = getTemplateSrv()) {\n    this.resources = resources;\n    this.templateSrv = templateSrv;\n    this.templateSrv = templateSrv;\n\n    // implement with more specific tokens when extending this class\n    this.tokenTypes = {\n      Parenthesis: 'delimiter.parenthesis',\n      Whitespace: 'white',\n      Keyword: 'keyword',\n      Delimiter: 'delimiter',\n      Operator: 'operator',\n      Identifier: 'identifier',\n      Type: 'type',\n      Function: 'predefined',\n      Number: 'number',\n      String: 'string',\n      Variable: 'variable',\n      Comment: 'comment',\n      Regexp: 'regexp',\n    };\n  }\n\n  // implemented by subclasses, given a token, returns a lexical position in a query\n  getStatementPosition(currentToken: LinkedToken | null): StatementPosition {\n    return StatementPosition.Unknown;\n  }\n\n  // implemented by subclasses, given a lexical statement position, returns potential kinds of suggestions\n  getSuggestionKinds(position: StatementPosition): SuggestionKind[] {\n    return [];\n  }\n\n  // implemented by subclasses, given potential suggestions kinds, returns suggestion objects for monaco aka \"CompletionItem\"\n  getSuggestions(\n    monaco: Monaco,\n    currentToken: LinkedToken | null,\n    suggestionKinds: SuggestionKind[],\n    statementPosition: StatementPosition,\n    position: monacoTypes.IPosition\n  ): Promise<CompletionItem[]> {\n    return Promise.reject([]);\n  }\n\n  // called by registerLanguage and passed to monaco with registerCompletionItemProvider\n  // returns an object that implements https://microsoft.github.io/monaco-editor/api/interfaces/monaco.languages.CompletionItemProvider.html\n  getCompletionProvider(monaco: Monaco, languageDefinition: LanguageDefinition) {\n    const isPPL = languageDefinition.id === CLOUDWATCH_PPL_LANGUAGE_DEFINITION_ID; // backticks for field names in PPL\n    const triggerCharacters = [' ', '$', ',', '(', \"'\"].concat(isPPL ? ['`'] : []);\n\n    return {\n      triggerCharacters, // one of these characters indicates that it is time to look for a suggestion\n      provideCompletionItems: async (model: monacoTypes.editor.ITextModel, position: monacoTypes.IPosition) => {\n        const currentToken = linkedTokenBuilder(monaco, languageDefinition, model, position, this.tokenTypes);\n        const statementPosition = this.getStatementPosition(currentToken);\n        const suggestionKinds = this.getSuggestionKinds(statementPosition);\n        const suggestions = await this.getSuggestions(\n          monaco,\n          currentToken,\n          suggestionKinds,\n          statementPosition,\n          position\n        );\n\n        return {\n          suggestions,\n        };\n      },\n    };\n  }\n}\n","export const TRIGGER_SUGGEST = {\n  id: 'editor.action.triggerSuggest',\n  title: '',\n};\n","import { LanguageDefinition } from '../monarch/register';\n\nexport const CLOUDWATCH_LOGS_SQL_LANGUAGE_DEFINITION_ID = 'cloudwatch-logs-sql';\n\nconst cloudWatchLogsSqlLanguageDefinition: LanguageDefinition = {\n  id: CLOUDWATCH_LOGS_SQL_LANGUAGE_DEFINITION_ID,\n  extensions: [],\n  aliases: [],\n  mimetypes: [],\n  loader: () => import('./language'),\n};\nexport default cloudWatchLogsSqlLanguageDefinition;\n","import { TokenTypes } from '../../monarch/types';\nimport { CLOUDWATCH_LOGS_SQL_LANGUAGE_DEFINITION_ID } from '../definition';\n\nexport const SQLTokenTypes: TokenTypes = {\n  Parenthesis: `delimiter.parenthesis.${CLOUDWATCH_LOGS_SQL_LANGUAGE_DEFINITION_ID}`,\n  Whitespace: `white.${CLOUDWATCH_LOGS_SQL_LANGUAGE_DEFINITION_ID}`,\n  Keyword: `keyword.${CLOUDWATCH_LOGS_SQL_LANGUAGE_DEFINITION_ID}`,\n  Delimiter: `delimiter.${CLOUDWATCH_LOGS_SQL_LANGUAGE_DEFINITION_ID}`,\n  Operator: `operator.${CLOUDWATCH_LOGS_SQL_LANGUAGE_DEFINITION_ID}`,\n  Identifier: `identifier.${CLOUDWATCH_LOGS_SQL_LANGUAGE_DEFINITION_ID}`,\n  Type: `type.${CLOUDWATCH_LOGS_SQL_LANGUAGE_DEFINITION_ID}`,\n  Function: `predefined.${CLOUDWATCH_LOGS_SQL_LANGUAGE_DEFINITION_ID}`,\n  Number: `number.${CLOUDWATCH_LOGS_SQL_LANGUAGE_DEFINITION_ID}`,\n  String: `string.${CLOUDWATCH_LOGS_SQL_LANGUAGE_DEFINITION_ID}`,\n  Variable: `variable.${CLOUDWATCH_LOGS_SQL_LANGUAGE_DEFINITION_ID}`,\n  Comment: `comment.${CLOUDWATCH_LOGS_SQL_LANGUAGE_DEFINITION_ID}`,\n  Regexp: `regexp.${CLOUDWATCH_LOGS_SQL_LANGUAGE_DEFINITION_ID}`,\n};\n","import { LinkedToken } from '../../monarch/LinkedToken';\nimport { StatementPosition } from '../../monarch/types';\nimport {\n  ALL,\n  DISTINCT,\n  AS,\n  ASC,\n  BY,\n  DESC,\n  FROM,\n  GROUP,\n  ORDER,\n  SELECT,\n  WHERE,\n  HAVING,\n  ON,\n  LOGICAL_OPERATORS,\n  PREDICATE_OPERATORS,\n  NULL,\n  TRUE,\n  FALSE,\n  IN,\n  CASE,\n  WHEN,\n  THEN,\n  ELSE,\n  END,\n} from '../language';\n\nimport { SQLTokenTypes } from './types';\n\nexport function getStatementPosition(currentToken: LinkedToken | null): StatementPosition {\n  const previousNonWhiteSpace = currentToken?.getPreviousNonWhiteSpaceToken();\n  const previousKeyword = currentToken?.getPreviousKeyword();\n\n  const normalizedPreviousNonWhiteSpaceValue = previousNonWhiteSpace?.value?.toUpperCase() || '';\n  const normalizedPreviousKeywordValue = previousKeyword?.value?.toUpperCase() || '';\n\n  let previousNonAliasKeywordValue = previousKeyword;\n  let normalizedPreviousNonAliasKeywordValue = normalizedPreviousKeywordValue;\n  while (normalizedPreviousNonAliasKeywordValue === AS) {\n    previousNonAliasKeywordValue = previousNonAliasKeywordValue?.getPreviousKeyword();\n    normalizedPreviousNonAliasKeywordValue = previousNonAliasKeywordValue?.value.toUpperCase() || '';\n  }\n\n  const isPreviousSelectKeywordGroup =\n    normalizedPreviousNonAliasKeywordValue === SELECT ||\n    ([ALL, DISTINCT].includes(normalizedPreviousNonAliasKeywordValue) &&\n      previousNonAliasKeywordValue?.getPreviousKeyword()?.value.toUpperCase() === SELECT);\n\n  if (currentToken?.is(SQLTokenTypes.Comment) || currentToken?.is('comment.quote.cloudwatch-logs-sql')) {\n    return StatementPosition.Comment;\n  }\n\n  if (\n    currentToken === null ||\n    (currentToken.previous === null && currentToken.isIdentifier()) ||\n    (currentToken.previous === null && currentToken.isWhiteSpace()) ||\n    (currentToken.previous === null && currentToken.isKeyword() && currentToken.value.toUpperCase() === SELECT)\n  ) {\n    return StatementPosition.SelectKeyword;\n  }\n\n  if (\n    (currentToken.isWhiteSpace() || currentToken.is(SQLTokenTypes.Parenthesis, ')')) &&\n    normalizedPreviousNonWhiteSpaceValue === SELECT\n  ) {\n    return StatementPosition.AfterSelectKeyword;\n  }\n\n  if (\n    isPreviousSelectKeywordGroup &&\n    (currentToken.is(SQLTokenTypes.Delimiter, ',') ||\n      (currentToken.isWhiteSpace() && previousNonWhiteSpace?.is(SQLTokenTypes.Delimiter, ',')) ||\n      (currentToken.isWhiteSpace() && previousNonWhiteSpace?.isKeyword()) ||\n      (currentToken.is(SQLTokenTypes.Parenthesis, ')') &&\n        (previousNonWhiteSpace?.isKeyword() || previousNonWhiteSpace?.is(SQLTokenTypes.Delimiter, ','))))\n  ) {\n    return StatementPosition.SelectExpression;\n  }\n\n  if (\n    isPreviousSelectKeywordGroup &&\n    (currentToken.isWhiteSpace() || currentToken.is(SQLTokenTypes.Parenthesis, ')')) &&\n    (previousNonWhiteSpace?.isIdentifier() ||\n      previousNonWhiteSpace?.is(SQLTokenTypes.Parenthesis, ')') ||\n      previousNonWhiteSpace?.is(SQLTokenTypes.Parenthesis, '()') ||\n      previousNonWhiteSpace?.is(SQLTokenTypes.Operator, '*'))\n  ) {\n    return StatementPosition.AfterSelectExpression;\n  }\n\n  if (\n    currentToken.is(SQLTokenTypes.Parenthesis, '()') &&\n    normalizedPreviousNonAliasKeywordValue === WHERE &&\n    normalizedPreviousNonWhiteSpaceValue === IN\n  ) {\n    return StatementPosition.Subquery;\n  }\n\n  if (\n    ((currentToken.is(SQLTokenTypes.Parenthesis, '()') || currentToken.is(SQLTokenTypes.Parenthesis, '())')) &&\n      previousNonWhiteSpace?.isFunction()) ||\n    (currentToken.is(SQLTokenTypes.Delimiter, ',') &&\n      currentToken.getPreviousOfType(SQLTokenTypes.Parenthesis, '(')?.getPreviousNonWhiteSpaceToken()?.isFunction()) ||\n    (currentToken.isWhiteSpace() &&\n      previousNonWhiteSpace?.is(SQLTokenTypes.Delimiter, ',') &&\n      currentToken.getPreviousOfType(SQLTokenTypes.Parenthesis, '(')?.getPreviousNonWhiteSpaceToken()?.isFunction()) ||\n    (currentToken.is(SQLTokenTypes.Parenthesis, ')') &&\n      previousNonWhiteSpace?.is(SQLTokenTypes.Delimiter, ',') &&\n      currentToken.getPreviousOfType(SQLTokenTypes.Parenthesis, '(')?.getPreviousNonWhiteSpaceToken()?.isFunction())\n  ) {\n    return StatementPosition.PredefinedFunctionArgument;\n  }\n\n  if (\n    (currentToken.isWhiteSpace() || currentToken.is(SQLTokenTypes.Parenthesis, ')')) &&\n    normalizedPreviousNonWhiteSpaceValue === FROM\n  ) {\n    return StatementPosition.AfterFromKeyword;\n  }\n\n  if (\n    normalizedPreviousNonAliasKeywordValue === FROM &&\n    (previousNonWhiteSpace?.isIdentifier() ||\n      previousNonWhiteSpace?.isDoubleQuotedString() ||\n      previousNonWhiteSpace?.isVariable() ||\n      previousNonWhiteSpace?.is(SQLTokenTypes.Parenthesis, ')'))\n  ) {\n    return StatementPosition.AfterFromArguments;\n  }\n\n  if (\n    (LOGICAL_OPERATORS.includes(normalizedPreviousNonWhiteSpaceValue) &&\n      [WHERE, HAVING, ON, CASE, WHEN].includes(normalizedPreviousKeywordValue)) ||\n    ((currentToken.isWhiteSpace() || currentToken.is(SQLTokenTypes.Parenthesis, ')')) &&\n      [WHERE, HAVING, ON, CASE, WHEN].includes(normalizedPreviousNonWhiteSpaceValue))\n  ) {\n    switch (normalizedPreviousKeywordValue) {\n      case WHERE:\n        return StatementPosition.WhereKey;\n      case HAVING:\n        return StatementPosition.HavingKey;\n      case ON:\n        return StatementPosition.OnKey;\n      case CASE:\n        return StatementPosition.CaseKey;\n      case WHEN:\n        return StatementPosition.WhenKey;\n    }\n  }\n\n  if (\n    (LOGICAL_OPERATORS.includes(normalizedPreviousNonWhiteSpaceValue) &&\n      [NULL, TRUE, FALSE].includes(normalizedPreviousKeywordValue)) ||\n    ((currentToken.isWhiteSpace() || currentToken.is(SQLTokenTypes.Parenthesis, ')')) &&\n      [NULL, TRUE, FALSE].includes(normalizedPreviousNonWhiteSpaceValue))\n  ) {\n    let nearestPreviousKeyword = previousKeyword;\n    let normalizedNearestPreviousKeywordValue = normalizedPreviousKeywordValue;\n    while (![WHERE, HAVING, ON, CASE, WHEN].includes(normalizedNearestPreviousKeywordValue)) {\n      nearestPreviousKeyword = nearestPreviousKeyword?.getPreviousKeyword();\n      normalizedNearestPreviousKeywordValue = nearestPreviousKeyword?.value.toUpperCase() || '';\n    }\n\n    switch (normalizedNearestPreviousKeywordValue) {\n      case WHERE:\n        return StatementPosition.WhereKey;\n      case HAVING:\n        return StatementPosition.HavingKey;\n      case ON:\n        return StatementPosition.OnKey;\n      case CASE:\n        return StatementPosition.CaseKey;\n      case WHEN:\n        return StatementPosition.WhenKey;\n    }\n  }\n\n  if (\n    [WHERE, HAVING, ON, CASE, WHEN].includes(normalizedPreviousKeywordValue) &&\n    PREDICATE_OPERATORS.includes(normalizedPreviousNonWhiteSpaceValue)\n  ) {\n    switch (normalizedPreviousKeywordValue) {\n      case WHERE:\n        return StatementPosition.WhereValue;\n      case HAVING:\n        return StatementPosition.HavingValue;\n      case ON:\n        return StatementPosition.OnValue;\n      case CASE:\n        return StatementPosition.CaseValue;\n      case WHEN:\n        return StatementPosition.WhenValue;\n    }\n  }\n\n  if (\n    [NULL, TRUE, FALSE].includes(normalizedPreviousKeywordValue) &&\n    PREDICATE_OPERATORS.includes(normalizedPreviousNonWhiteSpaceValue)\n  ) {\n    let nearestPreviousKeyword = previousKeyword;\n    let normalizedNearestPreviousKeywordValue = normalizedPreviousKeywordValue;\n    while (![WHERE, HAVING, ON, CASE, WHEN].includes(normalizedNearestPreviousKeywordValue)) {\n      nearestPreviousKeyword = nearestPreviousKeyword?.getPreviousKeyword();\n      normalizedNearestPreviousKeywordValue = nearestPreviousKeyword?.value.toUpperCase() || '';\n    }\n\n    switch (normalizedNearestPreviousKeywordValue) {\n      case WHERE:\n        return StatementPosition.WhereValue;\n      case HAVING:\n        return StatementPosition.HavingValue;\n      case ON:\n        return StatementPosition.OnValue;\n      case CASE:\n        return StatementPosition.CaseValue;\n      case WHEN:\n        return StatementPosition.WhenValue;\n    }\n  }\n\n  if (\n    [WHERE, HAVING, ON, CASE, WHEN].includes(normalizedPreviousKeywordValue) &&\n    (previousNonWhiteSpace?.isIdentifier() ||\n      previousNonWhiteSpace?.isDoubleQuotedString() ||\n      previousNonWhiteSpace?.isFunction() ||\n      previousNonWhiteSpace?.isNumber() ||\n      previousNonWhiteSpace?.isString() ||\n      previousNonWhiteSpace?.is(SQLTokenTypes.Parenthesis, ')') ||\n      previousNonWhiteSpace?.is(SQLTokenTypes.Parenthesis, '()'))\n  ) {\n    const previousTokens = currentToken.getPreviousUntil(SQLTokenTypes.Keyword, [], normalizedPreviousKeywordValue);\n    const numPredicateOperators =\n      previousTokens?.filter((token) => PREDICATE_OPERATORS.includes(token.value.toUpperCase())).length || 0;\n    const numLogicalOperators =\n      previousTokens?.filter((token) => LOGICAL_OPERATORS.includes(token.value.toUpperCase())).length || 0;\n\n    if (numPredicateOperators - numLogicalOperators === 0) {\n      switch (normalizedPreviousKeywordValue) {\n        case WHERE:\n          return StatementPosition.WhereComparisonOperator;\n        case HAVING:\n          return StatementPosition.HavingComparisonOperator;\n        case ON:\n          return StatementPosition.OnComparisonOperator;\n        case CASE:\n          return StatementPosition.CaseComparisonOperator;\n        case WHEN:\n          return StatementPosition.WhenComparisonOperator;\n      }\n    } else {\n      switch (normalizedPreviousKeywordValue) {\n        case WHERE:\n          return StatementPosition.AfterWhereValue;\n        case HAVING:\n          return StatementPosition.AfterHavingValue;\n        case ON:\n          return StatementPosition.AfterOnValue;\n        case CASE:\n          return StatementPosition.AfterCaseValue;\n        case WHEN:\n          return StatementPosition.AfterWhenValue;\n      }\n    }\n  }\n\n  if (\n    [NULL, TRUE, FALSE].includes(normalizedPreviousKeywordValue) &&\n    PREDICATE_OPERATORS.includes(previousKeyword?.getPreviousNonWhiteSpaceToken()?.value.toUpperCase() || '')\n  ) {\n    let nearestPreviousKeyword = previousKeyword?.getPreviousKeyword();\n    let normalizedNearestPreviousKeywordValue = nearestPreviousKeyword?.value.toUpperCase() || '';\n    while (![WHERE, HAVING, ON, CASE, WHEN].includes(normalizedNearestPreviousKeywordValue)) {\n      nearestPreviousKeyword = nearestPreviousKeyword?.getPreviousKeyword();\n      normalizedNearestPreviousKeywordValue = nearestPreviousKeyword?.value.toUpperCase() || '';\n    }\n\n    const previousTokens = currentToken.getPreviousUntil(\n      SQLTokenTypes.Keyword,\n      [],\n      normalizedNearestPreviousKeywordValue\n    );\n    const numPredicateOperators =\n      previousTokens?.filter((token) => PREDICATE_OPERATORS.includes(token.value.toUpperCase())).length || 0;\n    const numLogicalOperators =\n      previousTokens?.filter((token) => LOGICAL_OPERATORS.includes(token.value.toUpperCase())).length || 0;\n\n    if (numPredicateOperators - numLogicalOperators === 0) {\n      switch (normalizedNearestPreviousKeywordValue) {\n        case WHERE:\n          return StatementPosition.WhereComparisonOperator;\n        case HAVING:\n          return StatementPosition.HavingComparisonOperator;\n        case ON:\n          return StatementPosition.OnComparisonOperator;\n        case CASE:\n          return StatementPosition.CaseComparisonOperator;\n        case WHEN:\n          return StatementPosition.WhenComparisonOperator;\n      }\n    } else {\n      switch (normalizedNearestPreviousKeywordValue) {\n        case WHERE:\n          return StatementPosition.AfterWhereValue;\n        case HAVING:\n          return StatementPosition.AfterHavingValue;\n        case ON:\n          return StatementPosition.AfterOnValue;\n        case CASE:\n          return StatementPosition.AfterCaseValue;\n        case WHEN:\n          return StatementPosition.AfterWhenValue;\n      }\n    }\n  }\n\n  if (currentToken.isWhiteSpace() && normalizedPreviousNonWhiteSpaceValue === THEN) {\n    return StatementPosition.ThenExpression;\n  }\n\n  if (\n    currentToken.isWhiteSpace() &&\n    normalizedPreviousKeywordValue === THEN &&\n    normalizedPreviousNonWhiteSpaceValue !== THEN\n  ) {\n    return StatementPosition.AfterThenExpression;\n  }\n\n  if (currentToken.isWhiteSpace() && normalizedPreviousNonWhiteSpaceValue === ELSE) {\n    return StatementPosition.AfterElseKeyword;\n  }\n\n  if (normalizedPreviousNonWhiteSpaceValue === END && currentToken.isWhiteSpace()) {\n    let nearestCaseKeyword = previousKeyword;\n    while (CASE !== nearestCaseKeyword?.value.toUpperCase()) {\n      nearestCaseKeyword = nearestCaseKeyword?.getPreviousKeyword();\n    }\n    const nearestKeywordBeforeCaseKeywordValue = nearestCaseKeyword.getPreviousKeyword()?.value.toUpperCase() || '';\n    switch (nearestKeywordBeforeCaseKeywordValue) {\n      case SELECT:\n        return StatementPosition.AfterSelectExpression;\n      case WHERE:\n        return StatementPosition.AfterWhereValue;\n    }\n  }\n\n  if (\n    normalizedPreviousKeywordValue === BY &&\n    previousKeyword?.getPreviousKeyword()?.value.toUpperCase() === GROUP &&\n    (previousNonWhiteSpace?.value.toUpperCase() === BY || previousNonWhiteSpace?.is(SQLTokenTypes.Delimiter, ','))\n  ) {\n    return StatementPosition.AfterGroupByKeywords;\n  }\n\n  if (\n    normalizedPreviousKeywordValue === BY &&\n    previousKeyword?.getPreviousKeyword()?.value.toUpperCase() === GROUP &&\n    (previousNonWhiteSpace?.isIdentifier() ||\n      previousNonWhiteSpace?.is(SQLTokenTypes.Parenthesis, ')') ||\n      previousNonWhiteSpace?.is(SQLTokenTypes.Parenthesis, '()'))\n  ) {\n    return StatementPosition.AfterGroupBy;\n  }\n\n  if (normalizedPreviousKeywordValue === BY && previousKeyword?.getPreviousKeyword()?.value.toUpperCase() === ORDER) {\n    return StatementPosition.AfterOrderByKeywords;\n  }\n\n  if ([DESC, ASC].includes(normalizedPreviousKeywordValue)) {\n    return StatementPosition.AfterOrderByDirection;\n  }\n\n  return StatementPosition.Unknown;\n}\n","import { StatementPosition, SuggestionKind } from '../../monarch/types';\n\nexport function getSuggestionKinds(statementPosition: StatementPosition): SuggestionKind[] {\n  switch (statementPosition) {\n    case StatementPosition.SelectKeyword:\n      return [SuggestionKind.SelectKeyword];\n    case StatementPosition.AfterSelectKeyword:\n      return [\n        SuggestionKind.AfterSelectKeyword,\n        SuggestionKind.FunctionsWithArguments,\n        SuggestionKind.Field,\n        SuggestionKind.CaseKeyword,\n      ];\n    case StatementPosition.SelectExpression:\n      return [SuggestionKind.FunctionsWithArguments, SuggestionKind.Field, SuggestionKind.CaseKeyword];\n    case StatementPosition.AfterSelectExpression:\n      return [\n        SuggestionKind.FromKeyword,\n        SuggestionKind.FunctionsWithArguments,\n        SuggestionKind.Field,\n        SuggestionKind.CaseKeyword,\n      ];\n\n    case StatementPosition.FromKeyword:\n      return [SuggestionKind.FromKeyword, SuggestionKind.FunctionsWithArguments, SuggestionKind.Field];\n    case StatementPosition.AfterFromKeyword:\n      return [SuggestionKind.AfterFromKeyword];\n    case StatementPosition.AfterFromArguments:\n      return [\n        SuggestionKind.WhereKeyword,\n        SuggestionKind.GroupByKeywords,\n        SuggestionKind.OrderByKeywords,\n        SuggestionKind.LimitKeyword,\n        SuggestionKind.JoinKeywords,\n        SuggestionKind.HavingKeywords,\n      ];\n\n    case StatementPosition.WhereKey:\n      return [SuggestionKind.FunctionsWithArguments, SuggestionKind.Field, SuggestionKind.CaseKeyword];\n    case StatementPosition.WhereComparisonOperator:\n      return [SuggestionKind.ComparisonOperators];\n    case StatementPosition.WhereValue:\n      return [SuggestionKind.FunctionsWithArguments, SuggestionKind.Field];\n    case StatementPosition.AfterWhereValue:\n      return [\n        SuggestionKind.LogicalOperators,\n        SuggestionKind.GroupByKeywords,\n        SuggestionKind.OrderByKeywords,\n        SuggestionKind.LimitKeyword,\n      ];\n\n    case StatementPosition.HavingKey:\n      return [SuggestionKind.FunctionsWithArguments, SuggestionKind.Field];\n    case StatementPosition.HavingComparisonOperator:\n      return [SuggestionKind.ComparisonOperators];\n    case StatementPosition.HavingValue:\n      return [SuggestionKind.FunctionsWithArguments, SuggestionKind.Field];\n    case StatementPosition.AfterHavingValue:\n      return [SuggestionKind.LogicalOperators, SuggestionKind.OrderByKeywords, SuggestionKind.LimitKeyword];\n\n    case StatementPosition.OnKey:\n      return [SuggestionKind.FunctionsWithArguments, SuggestionKind.Field];\n    case StatementPosition.OnComparisonOperator:\n      return [SuggestionKind.ComparisonOperators];\n    case StatementPosition.OnValue:\n      return [SuggestionKind.FunctionsWithArguments, SuggestionKind.Field];\n    case StatementPosition.AfterOnValue:\n      return [\n        SuggestionKind.LogicalOperators,\n        SuggestionKind.GroupByKeywords,\n        SuggestionKind.OrderByKeywords,\n        SuggestionKind.LimitKeyword,\n      ];\n\n    case StatementPosition.CaseKey:\n      return [SuggestionKind.WhenKeyword, SuggestionKind.Field, SuggestionKind.FunctionsWithArguments];\n    case StatementPosition.CaseComparisonOperator:\n      return [SuggestionKind.ComparisonOperators, SuggestionKind.WhenKeyword];\n    case StatementPosition.CaseValue:\n      return [SuggestionKind.FunctionsWithArguments, SuggestionKind.Field];\n    case StatementPosition.AfterCaseValue:\n      return [SuggestionKind.WhenKeyword];\n\n    case StatementPosition.WhenKey:\n      return [SuggestionKind.Field, SuggestionKind.FunctionsWithArguments];\n    case StatementPosition.WhenComparisonOperator:\n      return [SuggestionKind.ComparisonOperators, SuggestionKind.ThenKeyword];\n    case StatementPosition.WhenValue:\n      return [SuggestionKind.FunctionsWithArguments, SuggestionKind.Field];\n    case StatementPosition.AfterWhenValue:\n      return [SuggestionKind.ThenKeyword];\n\n    case StatementPosition.ThenExpression:\n      return [SuggestionKind.FunctionsWithArguments, SuggestionKind.Field];\n    case StatementPosition.AfterThenExpression:\n      return [SuggestionKind.WhenKeyword, SuggestionKind.AfterThenExpression];\n\n    case StatementPosition.AfterElseKeyword:\n      return [SuggestionKind.FunctionsWithArguments, SuggestionKind.Field];\n\n    case StatementPosition.AfterGroupByKeywords:\n      return [SuggestionKind.Field, SuggestionKind.FunctionsWithArguments];\n    case StatementPosition.AfterGroupBy:\n      return [SuggestionKind.OrderByKeywords, SuggestionKind.LimitKeyword, SuggestionKind.HavingKeywords];\n\n    case StatementPosition.AfterOrderByKeywords:\n      return [SuggestionKind.SortOrderDirectionKeyword, SuggestionKind.LimitKeyword, SuggestionKind.Field];\n    case StatementPosition.AfterOrderByDirection:\n      return [SuggestionKind.LimitKeyword];\n\n    case StatementPosition.PredefinedFunctionArgument:\n      return [SuggestionKind.Field];\n\n    case StatementPosition.Subquery:\n      return [SuggestionKind.SelectKeyword, SuggestionKind.FunctionsWithArguments, SuggestionKind.Field];\n  }\n\n  return [];\n}\n","import { getTemplateSrv, TemplateSrv } from '@grafana/runtime';\nimport type { Monaco, monacoTypes } from '@grafana/ui';\n\nimport { ResourcesAPI } from '../../../resources/ResourcesAPI';\nimport { LogGroup } from '../../../types';\nimport { CompletionItemProvider } from '../../monarch/CompletionItemProvider';\nimport { LinkedToken } from '../../monarch/LinkedToken';\nimport { TRIGGER_SUGGEST } from '../../monarch/commands';\nimport { SuggestionKind, CompletionItemPriority, StatementPosition } from '../../monarch/types';\nimport {\n  ASC,\n  BY,\n  PREDICATE_OPERATORS,\n  DESC,\n  FROM,\n  ALL_FUNCTIONS,\n  ALL,\n  DISTINCT,\n  GROUP,\n  LIMIT,\n  INNER,\n  LEFT,\n  OUTER,\n  ON,\n  JOIN,\n  LOGICAL_OPERATORS,\n  ORDER,\n  SELECT,\n  WHERE,\n  HAVING,\n  CASE,\n  WHEN,\n  THEN,\n  ELSE,\n  END,\n} from '../language';\n\nimport { getStatementPosition } from './statementPosition';\nimport { getSuggestionKinds } from './suggestionKind';\nimport { SQLTokenTypes } from './types';\n\ntype CompletionItem = monacoTypes.languages.CompletionItem;\n\nexport type queryContext = {\n  logGroups?: LogGroup[];\n  region: string;\n};\n\nexport function LogsSQLCompletionItemProviderFunc(\n  resources: ResourcesAPI,\n  templateSrv: TemplateSrv = getTemplateSrv()\n) {\n  return (queryContext: queryContext) => {\n    return new LogsSQLCompletionItemProvider(resources, templateSrv, queryContext);\n  };\n}\n\nexport class LogsSQLCompletionItemProvider extends CompletionItemProvider {\n  region: string;\n  queryContext: queryContext;\n\n  constructor(resources: ResourcesAPI, templateSrv: TemplateSrv = getTemplateSrv(), queryContext: queryContext) {\n    super(resources, templateSrv);\n    this.region = resources.getActualRegion() ?? '';\n    this.getStatementPosition = getStatementPosition;\n    this.getSuggestionKinds = getSuggestionKinds;\n    this.tokenTypes = SQLTokenTypes;\n    this.queryContext = queryContext;\n  }\n\n  async getSuggestions(\n    monaco: Monaco,\n    currentToken: LinkedToken | null,\n    suggestionKinds: SuggestionKind[],\n    statementPosition: StatementPosition,\n    position: monacoTypes.IPosition\n  ): Promise<CompletionItem[]> {\n    let suggestions: CompletionItem[] = [];\n    const invalidRangeToken = currentToken?.isWhiteSpace() || currentToken?.isParenthesis();\n    const range =\n      invalidRangeToken || !currentToken?.range ? monaco.Range.fromPositions(position) : currentToken?.range;\n\n    const toCompletionItem = (value: string, rest: Partial<CompletionItem> = {}) => {\n      const item: CompletionItem = {\n        label: value,\n        insertText: value,\n        kind: monaco.languages.CompletionItemKind.Field,\n        range,\n        sortText: CompletionItemPriority.Medium,\n        ...rest,\n      };\n      return item;\n    };\n\n    function addSuggestion(value: string, rest: Partial<CompletionItem> = {}) {\n      suggestions = [...suggestions, toCompletionItem(value, rest)];\n    }\n\n    for (const suggestion of suggestionKinds) {\n      switch (suggestion) {\n        case SuggestionKind.SelectKeyword:\n          addSuggestion(SELECT, {\n            insertText: `${SELECT} $0`,\n            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n            kind: monaco.languages.CompletionItemKind.Keyword,\n            command: TRIGGER_SUGGEST,\n          });\n          break;\n\n        case SuggestionKind.AfterSelectKeyword:\n          addSuggestion(ALL, {\n            insertText: `${ALL} `,\n            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n            command: TRIGGER_SUGGEST,\n            kind: monaco.languages.CompletionItemKind.Keyword,\n          });\n          addSuggestion(DISTINCT, {\n            insertText: `${DISTINCT} `,\n            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n            command: TRIGGER_SUGGEST,\n            kind: monaco.languages.CompletionItemKind.Keyword,\n          });\n          break;\n\n        case SuggestionKind.FunctionsWithArguments:\n          ALL_FUNCTIONS.map((s) =>\n            addSuggestion(s, {\n              insertText: `${s}($0)`,\n              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n              command: TRIGGER_SUGGEST,\n              kind: monaco.languages.CompletionItemKind.Function,\n            })\n          );\n          break;\n\n        case SuggestionKind.FromKeyword:\n          addSuggestion(FROM, {\n            insertText: `${FROM} $0`,\n            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n            kind: monaco.languages.CompletionItemKind.Keyword,\n            command: TRIGGER_SUGGEST,\n            sortText: CompletionItemPriority.MediumHigh,\n          });\n          addSuggestion(`${FROM} \\`logGroups(logGroupIdentifier: [...])\\``, {\n            insertText: `${FROM} \\`logGroups(logGroupIdentifier: [$0])\\``,\n            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n            kind: monaco.languages.CompletionItemKind.Keyword,\n            command: TRIGGER_SUGGEST,\n            sortText: CompletionItemPriority.MediumHigh,\n          });\n          break;\n\n        case SuggestionKind.AfterFromKeyword:\n          addSuggestion('`logGroups(logGroupIdentifier: [...])`', {\n            insertText: '`logGroups(logGroupIdentifier: [$0])`',\n            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n            kind: monaco.languages.CompletionItemKind.Function,\n            command: TRIGGER_SUGGEST,\n          });\n          break;\n\n        case SuggestionKind.LogicalOperators:\n          LOGICAL_OPERATORS.map((o) =>\n            addSuggestion(`${o}`, {\n              insertText: `${o} `,\n              command: TRIGGER_SUGGEST,\n              sortText: CompletionItemPriority.MediumHigh,\n            })\n          );\n          break;\n\n        case SuggestionKind.WhereKeyword:\n          addSuggestion(`${WHERE}`, {\n            insertText: `${WHERE} `,\n            command: TRIGGER_SUGGEST,\n            sortText: CompletionItemPriority.High,\n          });\n          break;\n\n        case SuggestionKind.HavingKeywords:\n          addSuggestion(`${HAVING}`, {\n            insertText: `${HAVING} `,\n            command: TRIGGER_SUGGEST,\n          });\n          break;\n\n        case SuggestionKind.ComparisonOperators:\n          PREDICATE_OPERATORS.map((o) => addSuggestion(`${o}`, { insertText: `${o} `, command: TRIGGER_SUGGEST }));\n          break;\n\n        case SuggestionKind.CaseKeyword:\n          addSuggestion(CASE, {\n            insertText: `${CASE} `,\n            kind: monaco.languages.CompletionItemKind.Keyword,\n            command: TRIGGER_SUGGEST,\n          });\n          break;\n\n        case SuggestionKind.WhenKeyword:\n          addSuggestion(WHEN, {\n            insertText: `${WHEN} `,\n            kind: monaco.languages.CompletionItemKind.Keyword,\n            command: TRIGGER_SUGGEST,\n          });\n          break;\n\n        case SuggestionKind.ThenKeyword:\n          addSuggestion(THEN, {\n            insertText: `${THEN} `,\n            kind: monaco.languages.CompletionItemKind.Keyword,\n            command: TRIGGER_SUGGEST,\n          });\n          break;\n\n        case SuggestionKind.AfterThenExpression:\n          addSuggestion(`${ELSE} ... ${END}`, {\n            insertText: `${ELSE} $0 ${END}`,\n            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n            kind: monaco.languages.CompletionItemKind.Keyword,\n            command: TRIGGER_SUGGEST,\n          });\n          break;\n\n        case SuggestionKind.GroupByKeywords:\n          addSuggestion(`${GROUP} ${BY}`, {\n            insertText: `${GROUP} ${BY} `,\n            command: TRIGGER_SUGGEST,\n            sortText: CompletionItemPriority.MediumHigh,\n          });\n          break;\n\n        case SuggestionKind.OrderByKeywords:\n          addSuggestion(`${ORDER} ${BY}`, {\n            insertText: `${ORDER} ${BY} `,\n            command: TRIGGER_SUGGEST,\n            sortText: CompletionItemPriority.Medium,\n          });\n          break;\n\n        case SuggestionKind.JoinKeywords:\n          addSuggestion(`${INNER} ${JOIN} <log group> ${ON} <field>`, {\n            insertText: `${INNER} ${JOIN} $1 ${ON} $2`,\n            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n            kind: monaco.languages.CompletionItemKind.Keyword,\n            command: TRIGGER_SUGGEST,\n            sortText: CompletionItemPriority.MediumLow,\n          });\n          addSuggestion(`${LEFT} ${OUTER} ${JOIN} <log group> ${ON} <field>`, {\n            insertText: `${LEFT} ${OUTER} ${JOIN} $1 ${ON} $2`,\n            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n            kind: monaco.languages.CompletionItemKind.Keyword,\n            command: TRIGGER_SUGGEST,\n            sortText: CompletionItemPriority.MediumLow,\n          });\n          break;\n\n        case SuggestionKind.LimitKeyword:\n          addSuggestion(LIMIT, { insertText: `${LIMIT} ` });\n          break;\n\n        case SuggestionKind.SortOrderDirectionKeyword:\n          [ASC, DESC].map((s) =>\n            addSuggestion(s, {\n              insertText: `${s} `,\n              command: TRIGGER_SUGGEST,\n            })\n          );\n          break;\n\n        case SuggestionKind.Field:\n          const fields = await this.fetchFields(this.queryContext.logGroups || [], this.queryContext.region);\n          fields.forEach((field) => {\n            if (field !== '') {\n              addSuggestion(field, {\n                label: field,\n                insertText: `\\`${field}\\``,\n                kind: monaco.languages.CompletionItemKind.Field,\n              });\n            }\n          });\n          break;\n      }\n    }\n\n    this.templateSrv.getVariables().map((v) => {\n      const variable = `$${v.name}`;\n      addSuggestion(variable, {\n        range,\n        label: variable,\n        insertText: variable,\n        kind: monaco.languages.CompletionItemKind.Variable,\n        sortText: CompletionItemPriority.Low,\n      });\n    });\n\n    return suggestions;\n  }\n\n  private fetchFields = async (logGroups: LogGroup[], region: string): Promise<string[]> => {\n    if (logGroups.length === 0) {\n      return [];\n    }\n\n    const results = await Promise.all(\n      logGroups.map((logGroup) =>\n        this.resources\n          .getLogGroupFields({ logGroupName: logGroup.name, arn: logGroup.arn, region })\n          .then((fields) => fields.filter((f) => f).map((f) => f.value.name ?? ''))\n      )\n    );\n    // Deduplicate fields\n    return [...new Set(results.flat())];\n  };\n}\n","import { TokenTypes } from '../monarch/types';\n\nimport { CLOUDWATCH_PPL_LANGUAGE_DEFINITION_ID } from './language';\n\ninterface IpplTokenTypes extends TokenTypes {\n  Pipe: string;\n  Backtick: string;\n  Command: string;\n}\n\nexport const PPLTokenTypes: IpplTokenTypes = {\n  Parenthesis: `delimiter.parenthesis.${CLOUDWATCH_PPL_LANGUAGE_DEFINITION_ID}`,\n  Whitespace: `white.${CLOUDWATCH_PPL_LANGUAGE_DEFINITION_ID}`,\n  Keyword: `keyword.${CLOUDWATCH_PPL_LANGUAGE_DEFINITION_ID}`,\n  Command: `keyword.command.${CLOUDWATCH_PPL_LANGUAGE_DEFINITION_ID}`,\n  Delimiter: `delimiter.${CLOUDWATCH_PPL_LANGUAGE_DEFINITION_ID}`,\n  Pipe: `delimiter.pipe.${CLOUDWATCH_PPL_LANGUAGE_DEFINITION_ID}`,\n  Operator: `operator.${CLOUDWATCH_PPL_LANGUAGE_DEFINITION_ID}`,\n  Identifier: `identifier.${CLOUDWATCH_PPL_LANGUAGE_DEFINITION_ID}`,\n  Type: `type.${CLOUDWATCH_PPL_LANGUAGE_DEFINITION_ID}`,\n  Function: `predefined.${CLOUDWATCH_PPL_LANGUAGE_DEFINITION_ID}`,\n  Number: `number.${CLOUDWATCH_PPL_LANGUAGE_DEFINITION_ID}`,\n  String: `string.${CLOUDWATCH_PPL_LANGUAGE_DEFINITION_ID}`,\n  Variable: `variable.${CLOUDWATCH_PPL_LANGUAGE_DEFINITION_ID}`,\n  Comment: `comment.${CLOUDWATCH_PPL_LANGUAGE_DEFINITION_ID}`,\n  Regexp: `regexp.${CLOUDWATCH_PPL_LANGUAGE_DEFINITION_ID}`,\n  Backtick: `string.backtick.${CLOUDWATCH_PPL_LANGUAGE_DEFINITION_ID}`,\n};\n","import { LinkedToken } from '../../monarch/LinkedToken';\nimport { StatementPosition } from '../../monarch/types';\nimport {\n  ARITHMETIC_OPERATORS,\n  PARAMETERS_WITH_BOOLEAN_VALUES,\n  BY,\n  COMPARISON_OPERATORS,\n  CONDITION_FUNCTIONS,\n  DEDUP,\n  EVAL,\n  EVENTSTATS,\n  FIELD_OPERATORS,\n  FIELDS,\n  HEAD,\n  IN,\n  LOGICAL_EXPRESSION_OPERATORS,\n  NOT,\n  RARE,\n  SORT,\n  SORT_FIELD_FUNCTIONS,\n  SPAN,\n  STATS,\n  STATS_FUNCTIONS,\n  TOP,\n  WHERE,\n  PARSE,\n  BETWEEN,\n  EVAL_FUNCTIONS,\n} from '../language';\nimport { PPLTokenTypes } from '../tokenTypes';\n\n// getStatementPosition returns the 'statement position' of the place where the cursor is currently positioned.\n// Statement positions are places that are syntactically and relevant for the evaluated language and are used to determine the suggestionKinds, i.e.\n// suggestions in the dropdown.\n// For example, in PPL, if the cursor is currently at the whitespace after the WHERE keyword, this function returns StatementPosition.BeforeLogicalExpression.\n// In getSuggestionKinds, this position will result in SuggestionKind.LogicalExpression.\n// Lastly, In PPLCompletionItemProvider appropriate suggestions of logical operators are added to the dropdown based on the suggestion kind.\n\nexport const getStatementPosition = (currentToken: LinkedToken | null): StatementPosition => {\n  const previousNonWhiteSpace = currentToken?.getPreviousNonWhiteSpaceToken();\n  const nextNonWhiteSpace = currentToken?.getNextNonWhiteSpaceToken();\n\n  const normalizedPreviousNonWhiteSpace = previousNonWhiteSpace?.value?.toLowerCase();\n\n  if (\n    currentToken === null ||\n    (currentToken?.isWhiteSpace() && previousNonWhiteSpace === null && nextNonWhiteSpace === null) ||\n    (previousNonWhiteSpace?.is(PPLTokenTypes.Pipe) && currentToken?.isWhiteSpace()) ||\n    previousNonWhiteSpace?.is(PPLTokenTypes.Delimiter, '|')\n  ) {\n    return StatementPosition.NewCommand;\n  }\n\n  switch (normalizedPreviousNonWhiteSpace) {\n    case WHERE:\n      return StatementPosition.BeforeLogicalExpression;\n    case DEDUP:\n      return StatementPosition.FieldList;\n    case FIELDS:\n      return StatementPosition.AfterFieldsCommand;\n    case EVENTSTATS:\n    case STATS:\n      return StatementPosition.AfterStatsCommand;\n    case SORT:\n      return StatementPosition.SortField;\n    case PARSE:\n      return StatementPosition.Expression;\n  }\n\n  if (\n    currentToken?.isWhiteSpace() ||\n    currentToken?.is(PPLTokenTypes.Backtick) ||\n    currentToken?.is(PPLTokenTypes.Delimiter, ',') ||\n    currentToken?.is(PPLTokenTypes.Parenthesis) // for STATS functions\n  ) {\n    const nearestFunction = currentToken?.getPreviousOfType(PPLTokenTypes.Function)?.value.toLowerCase();\n    const nearestKeyword = currentToken?.getPreviousOfType(PPLTokenTypes.Keyword)?.value.toLowerCase();\n    const nearestCommand = currentToken?.getPreviousOfType(PPLTokenTypes.Command)?.value.toLowerCase();\n\n    if (normalizedPreviousNonWhiteSpace) {\n      if (\n        nearestCommand !== FIELDS && // FIELDS and SORT fields can be preceeded by a + or - which are not arithmetic ops\n        nearestCommand !== SORT &&\n        ARITHMETIC_OPERATORS.includes(normalizedPreviousNonWhiteSpace)\n      ) {\n        return StatementPosition.AfterArithmeticOperator;\n      }\n      if (PARAMETERS_WITH_BOOLEAN_VALUES.includes(normalizedPreviousNonWhiteSpace)) {\n        return StatementPosition.AfterBooleanArgument;\n      }\n    }\n\n    const isBeforeLogicalExpression =\n      (normalizedPreviousNonWhiteSpace &&\n        (COMPARISON_OPERATORS.includes(normalizedPreviousNonWhiteSpace) ||\n          LOGICAL_EXPRESSION_OPERATORS.includes(normalizedPreviousNonWhiteSpace))) ||\n      previousNonWhiteSpace?.is(PPLTokenTypes.Regexp) ||\n      normalizedPreviousNonWhiteSpace === NOT || // follows a comparison operator, logical operator, NOT or a regex\n      (nearestFunction && CONDITION_FUNCTIONS.includes(nearestFunction) && normalizedPreviousNonWhiteSpace === ')'); // it's not a condition function argument\n\n    if (\n      nearestCommand !== SORT && // sort command fields can be followed by a field operator, which is handled lower in the block\n      nearestCommand !== EVAL && // eval fields can be followed by an eval clause, which is handled lower in the block\n      nearestCommand !== STATS && // identifiers in STATS can be followed by a stats function, which is handled lower in the block\n      (isListingFields(currentToken) || currentToken?.is(PPLTokenTypes.Backtick))\n    ) {\n      return StatementPosition.FieldList;\n    }\n\n    if (\n      nearestCommand !== EVAL && // eval can have StatementPosition.Expression after an equal operator\n      isBeforeLogicalExpression\n    ) {\n      return StatementPosition.BeforeLogicalExpression;\n    }\n\n    if (nearestKeyword === IN) {\n      return StatementPosition.AfterINKeyword;\n    }\n    if (nearestKeyword === BETWEEN) {\n      return StatementPosition.FunctionArg;\n    }\n\n    if (\n      nearestFunction &&\n      (currentToken?.is(PPLTokenTypes.Parenthesis) || currentToken?.getNextNonWhiteSpaceToken()?.value === ')')\n    ) {\n      if ([...EVAL_FUNCTIONS, ...CONDITION_FUNCTIONS].includes(nearestFunction)) {\n        return StatementPosition.FunctionArg;\n      }\n      if (STATS_FUNCTIONS.includes(nearestFunction)) {\n        return StatementPosition.StatsFunctionArgument;\n      }\n      if (SORT_FIELD_FUNCTIONS.includes(nearestFunction)) {\n        return StatementPosition.SortFieldExpression;\n      }\n    }\n\n    switch (nearestCommand) {\n      case SORT: {\n        if (previousNonWhiteSpace) {\n          if (previousNonWhiteSpace.is(PPLTokenTypes.Delimiter, ',')) {\n            return StatementPosition.SortField;\n          } else if (FIELD_OPERATORS.includes(previousNonWhiteSpace.value)) {\n            return StatementPosition.SortFieldExpression;\n          }\n        }\n        break;\n      }\n      case DEDUP: {\n        // if current active command is DEDUP and there are identifiers (fieldNames) between currentToken and the dedup command\n        const fieldNames = currentToken.getPreviousUntil(PPLTokenTypes.Number, [\n          PPLTokenTypes.Delimiter,\n          PPLTokenTypes.Whitespace,\n        ]);\n        if (fieldNames?.length && !havePipe(fieldNames)) {\n          return StatementPosition.AfterDedupFieldNames;\n        }\n        return StatementPosition.FieldList;\n      }\n      case FIELDS: {\n        return StatementPosition.FieldList;\n      }\n      case STATS:\n      case EVENTSTATS: {\n        if (nearestKeyword === BY && currentToken.isWhiteSpace()) {\n          return StatementPosition.AfterStatsBy;\n        } else if (nearestFunction === SPAN && currentToken?.is(PPLTokenTypes.Parenthesis)) {\n          return StatementPosition.FieldList;\n        }\n        return StatementPosition.AfterStatsCommand;\n      }\n      case RARE: {\n        return StatementPosition.FieldList;\n      }\n      case TOP: {\n        return StatementPosition.FieldList;\n      }\n      case HEAD:\n        return StatementPosition.AfterHeadCommand;\n\n      case EVAL:\n        if (previousNonWhiteSpace?.value === '=') {\n          return StatementPosition.Expression;\n        }\n        if (\n          currentToken?.isWhiteSpace() &&\n          (normalizedPreviousNonWhiteSpace === EVAL || previousNonWhiteSpace?.is(PPLTokenTypes.Delimiter, ','))\n        ) {\n          return StatementPosition.EvalClause;\n        }\n        if (isBeforeLogicalExpression) {\n          return StatementPosition.BeforeLogicalExpression;\n        }\n        break;\n    }\n  }\n\n  return StatementPosition.Unknown;\n};\n\nconst havePipe = (fieldNames: LinkedToken[]) => {\n  return fieldNames?.some((word) => word.type === PPLTokenTypes.Pipe);\n};\nconst isListingFields = (currentToken: LinkedToken | null) => {\n  const tokensUntilFieldName = currentToken?.getPreviousUntil(PPLTokenTypes.Identifier, [PPLTokenTypes.Whitespace]); // tokens until exampleFieldName\n  const tokensUntilEscapedFieldName = currentToken?.getPreviousUntil(PPLTokenTypes.Backtick, [\n    // tokens until `@exampleFieldName`\n    PPLTokenTypes.Whitespace,\n  ]);\n  const isPreceededByAFieldName =\n    (tokensUntilFieldName?.length && tokensUntilFieldName.every((token) => token.is(PPLTokenTypes.Delimiter, ','))) ||\n    (tokensUntilEscapedFieldName?.length &&\n      tokensUntilEscapedFieldName.every((token) => token.is(PPLTokenTypes.Delimiter, ',')));\n  const isAfterComma =\n    currentToken?.isWhiteSpace() && currentToken?.getPreviousNonWhiteSpaceToken()?.is(PPLTokenTypes.Delimiter, ',');\n  const isFunctionArgument = currentToken?.getNextNonWhiteSpaceToken()?.value === ')'; // is not e.g. span(`@timestamp`, 5m)\n\n  return isAfterComma && isPreceededByAFieldName && !isFunctionArgument;\n};\n","import { StatementPosition, SuggestionKind } from '../../monarch/types';\n\nexport function getSuggestionKinds(statementPosition: StatementPosition): SuggestionKind[] {\n  switch (statementPosition) {\n    case StatementPosition.NewCommand:\n      return [SuggestionKind.Command];\n    case StatementPosition.AfterHeadCommand:\n      return [SuggestionKind.FromKeyword];\n    case StatementPosition.AfterStatsCommand:\n      return [SuggestionKind.StatsParameter, SuggestionKind.StatsFunctions];\n    case StatementPosition.SortField:\n      return [SuggestionKind.FieldOperators, SuggestionKind.Field, SuggestionKind.SortFunctions];\n    case StatementPosition.EvalClause:\n    case StatementPosition.StatsFunctionArgument:\n      return [SuggestionKind.Field];\n    case StatementPosition.AfterFieldsCommand:\n      return [SuggestionKind.FieldOperators, SuggestionKind.Field];\n    case StatementPosition.FieldList:\n      return [SuggestionKind.Field];\n    case StatementPosition.AfterBooleanArgument:\n      return [SuggestionKind.BooleanLiteral];\n    case StatementPosition.AfterDedupFieldNames:\n      return [SuggestionKind.DedupParameter];\n    case StatementPosition.AfterStatsBy:\n      return [SuggestionKind.Field, SuggestionKind.SpanClause];\n    case StatementPosition.SortFieldExpression:\n      return [SuggestionKind.Field, SuggestionKind.SortFunctions];\n    case StatementPosition.FunctionArg:\n    case StatementPosition.AfterArithmeticOperator:\n    case StatementPosition.AfterINKeyword:\n      return [SuggestionKind.ValueExpression];\n    // logical expression can contain comparison expression, which can start with a value expression\n    // so we always need to suggest valueExpression when SuggestionKind.LogicalExpression is present\n    case StatementPosition.Expression:\n    case StatementPosition.BeforeLogicalExpression:\n      return [SuggestionKind.LogicalExpression, SuggestionKind.ValueExpression];\n  }\n\n  return [];\n}\n","import { getTemplateSrv, type TemplateSrv } from '@grafana/runtime';\nimport { Monaco, monacoTypes } from '@grafana/ui';\n\nimport { type ResourcesAPI } from '../../../resources/ResourcesAPI';\nimport { LogGroup } from '../../../types';\nimport { CompletionItemProvider } from '../../monarch/CompletionItemProvider';\nimport { LinkedToken } from '../../monarch/LinkedToken';\nimport { TRIGGER_SUGGEST } from '../../monarch/commands';\nimport { CompletionItem, CompletionItemPriority, StatementPosition, SuggestionKind } from '../../monarch/types';\nimport {\n  BOOLEAN_LITERALS,\n  CONDITION_FUNCTIONS,\n  DEDUP_PARAMETERS,\n  EVAL_FUNCTIONS,\n  FIELD_OPERATORS,\n  IN,\n  LOGICAL_EXPRESSION_OPERATORS,\n  NOT,\n  PPL_COMMANDS,\n  SORT_FIELD_FUNCTIONS,\n  SPAN,\n  STATS_PARAMETERS,\n  STATS_FUNCTIONS,\n  FROM,\n} from '../language';\nimport { PPLTokenTypes } from '../tokenTypes';\n\nimport { getStatementPosition } from './statementPosition';\nimport { getSuggestionKinds } from './suggestionKinds';\n\nexport type queryContext = {\n  logGroups?: LogGroup[];\n  region: string;\n};\n\nexport function PPLCompletionItemProviderFunc(resources: ResourcesAPI, templateSrv: TemplateSrv = getTemplateSrv()) {\n  return (queryContext: queryContext) => {\n    return new PPLCompletionItemProvider(resources, templateSrv, queryContext);\n  };\n}\n\nexport class PPLCompletionItemProvider extends CompletionItemProvider {\n  queryContext: queryContext;\n  constructor(resources: ResourcesAPI, templateSrv: TemplateSrv = getTemplateSrv(), queryContext: queryContext) {\n    super(resources, templateSrv);\n    this.getStatementPosition = getStatementPosition;\n    this.getSuggestionKinds = getSuggestionKinds;\n    this.tokenTypes = PPLTokenTypes;\n    this.queryContext = queryContext;\n  }\n\n  async getSuggestions(\n    monaco: Monaco,\n    currentToken: LinkedToken | null,\n    suggestionKinds: SuggestionKind[],\n    _: StatementPosition,\n    position: monacoTypes.IPosition\n  ): Promise<CompletionItem[]> {\n    const suggestions: CompletionItem[] = [];\n    const invalidRangeToken =\n      currentToken?.isWhiteSpace() || currentToken?.isParenthesis() || currentToken?.is(PPLTokenTypes.Backtick); // PPLTokenTypes.Backtick for field wrapping\n    const range =\n      invalidRangeToken || !currentToken?.range ? monaco.Range.fromPositions(position) : currentToken?.range;\n    function toCompletionItem(value: string, rest: Partial<CompletionItem> = {}) {\n      const item: monacoTypes.languages.CompletionItem = {\n        label: value,\n        insertText: value,\n        kind: monaco.languages.CompletionItemKind.Field,\n        range,\n        sortText: CompletionItemPriority.Medium,\n        ...rest,\n      };\n      return item;\n    }\n\n    function addSuggestion(value: string, rest: Partial<CompletionItem> = {}) {\n      suggestions.push(toCompletionItem(value, rest));\n    }\n\n    for (const kind of suggestionKinds) {\n      switch (kind) {\n        case SuggestionKind.Command:\n          PPL_COMMANDS.forEach((command) => {\n            addSuggestion(command, {\n              insertText: `${command} $0`,\n              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n              kind: monaco.languages.CompletionItemKind.Method,\n              command: TRIGGER_SUGGEST,\n            });\n          });\n          break;\n\n        case SuggestionKind.LogicalExpression:\n          // booleanExpression\n          CONDITION_FUNCTIONS.forEach((funct) => {\n            addSuggestion(funct, {\n              insertText: `${funct}($0)`,\n              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n              kind: monaco.languages.CompletionItemKind.Function,\n              command: TRIGGER_SUGGEST,\n            });\n          });\n          addSuggestion(NOT, {\n            insertText: `${NOT} $0`,\n            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n            kind: monaco.languages.CompletionItemKind.Operator,\n            command: TRIGGER_SUGGEST,\n          });\n          break;\n\n        case SuggestionKind.ValueExpression:\n          EVAL_FUNCTIONS.forEach((funct) => {\n            addSuggestion(funct, {\n              insertText: `${funct}($0)`,\n              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n              kind: monaco.languages.CompletionItemKind.Function,\n              command: TRIGGER_SUGGEST,\n            });\n          });\n          await this.addFieldSuggestions(addSuggestion, monaco, range, currentToken);\n          break;\n\n        case SuggestionKind.FieldOperators:\n          FIELD_OPERATORS.forEach((operator) => {\n            addSuggestion(operator, {\n              insertText: `${operator}$0`,\n              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n              kind: monaco.languages.CompletionItemKind.Operator,\n              command: TRIGGER_SUGGEST,\n            });\n          });\n          break;\n\n        case SuggestionKind.BooleanLiteral:\n          BOOLEAN_LITERALS.forEach((literal) =>\n            addSuggestion(`= ${literal}`, {\n              insertText: `= ${literal} $0`,\n              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n              kind: monaco.languages.CompletionItemKind.Value,\n              command: TRIGGER_SUGGEST,\n            })\n          );\n          break;\n\n        case SuggestionKind.DedupParameter:\n          DEDUP_PARAMETERS.forEach((keyword) =>\n            addSuggestion(keyword, {\n              insertText: `${keyword} $0`,\n              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n              kind: monaco.languages.CompletionItemKind.Property,\n              command: TRIGGER_SUGGEST,\n            })\n          );\n          break;\n\n        case SuggestionKind.StatsParameter:\n          STATS_PARAMETERS.forEach((keyword) => {\n            addSuggestion(keyword, {\n              insertText: `${keyword} $0`,\n              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n              kind: monaco.languages.CompletionItemKind.Property,\n              command: TRIGGER_SUGGEST,\n            });\n          });\n          break;\n\n        case SuggestionKind.StatsFunctions:\n          STATS_FUNCTIONS.forEach((f) => {\n            addSuggestion(f, {\n              insertText: `${f}($0)`,\n              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n              kind: monaco.languages.CompletionItemKind.Function,\n              command: TRIGGER_SUGGEST,\n            });\n          });\n          break;\n\n        case SuggestionKind.LogicalOperators:\n          LOGICAL_EXPRESSION_OPERATORS.forEach((operator) => {\n            addSuggestion(operator, {\n              insertText: `${operator} $0`,\n              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n              kind: monaco.languages.CompletionItemKind.Operator,\n              command: TRIGGER_SUGGEST,\n            });\n          });\n          break;\n\n        case SuggestionKind.InKeyword:\n          addSuggestion(IN, {\n            insertText: `${IN} $0`,\n            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n            kind: monaco.languages.CompletionItemKind.Keyword,\n            command: TRIGGER_SUGGEST,\n          });\n          break;\n\n        case SuggestionKind.SpanClause:\n          addSuggestion(SPAN, {\n            insertText: `${SPAN}($0)`,\n            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n            kind: monaco.languages.CompletionItemKind.Function,\n            command: TRIGGER_SUGGEST,\n          });\n          break;\n\n        case SuggestionKind.Field:\n          await this.addFieldSuggestions(addSuggestion, monaco, range, currentToken);\n          break;\n\n        case SuggestionKind.FromKeyword:\n          addSuggestion(FROM, {\n            insertText: `${FROM} $0`,\n            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n            kind: monaco.languages.CompletionItemKind.Keyword,\n            command: TRIGGER_SUGGEST,\n          });\n          break;\n\n        case SuggestionKind.SortFunctions:\n          SORT_FIELD_FUNCTIONS.forEach((funct) => {\n            addSuggestion(funct, {\n              insertText: `${funct}($0)`,\n              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n              kind: monaco.languages.CompletionItemKind.Function,\n              command: TRIGGER_SUGGEST,\n            });\n          });\n          break;\n      }\n    }\n    // always suggest template variables\n    this.templateSrv.getVariables().map((v) => {\n      const variable = `$${v.name}`;\n      addSuggestion(variable, {\n        range,\n        label: variable,\n        insertText: variable,\n        kind: monaco.languages.CompletionItemKind.Variable,\n        sortText: CompletionItemPriority.Low,\n      });\n    });\n\n    return suggestions;\n  }\n\n  private async addFieldSuggestions(\n    addSuggestion: (value: string, rest?: Partial<CompletionItem>) => void,\n    monaco: typeof monacoTypes,\n    range: monacoTypes.IRange | monacoTypes.languages.CompletionItemRanges,\n    currentToken?: LinkedToken | null\n  ): Promise<void> {\n    if (this.queryContext.logGroups && this.queryContext.logGroups.length > 0) {\n      try {\n        let fields = await this.fetchFields(this.queryContext.logGroups, this.queryContext.region);\n        fields.forEach((field) => {\n          if (field !== '') {\n            addSuggestion(field, {\n              range,\n              label: field,\n              insertText: currentToken?.is(PPLTokenTypes.Backtick) ? field : `\\`${field}\\``,\n              kind: monaco.languages.CompletionItemKind.Field,\n              sortText: CompletionItemPriority.High,\n            });\n          }\n        });\n      } catch {\n        return;\n      }\n    }\n  }\n\n  private async fetchFields(logGroups: LogGroup[], region: string): Promise<string[]> {\n    const results = await Promise.all(\n      logGroups.map((logGroup) =>\n        this.resources\n          .getLogGroupFields({ logGroupName: logGroup.name, arn: logGroup.arn, region })\n          .then((fields) => fields.filter((f) => f).map((f) => f.value.name ?? ''))\n      )\n    );\n    // Deduplicate fields\n    return [...new Set(results.flat())];\n  }\n}\n","import { TokenTypes } from '../../monarch/types';\n\nexport const SQLTokenTypes: TokenTypes = {\n  Parenthesis: 'delimiter.parenthesis.sql',\n  Whitespace: 'white.sql',\n  Keyword: 'keyword.sql',\n  Delimiter: 'delimiter.sql',\n  Operator: 'operator.sql',\n  Identifier: 'identifier.sql',\n  Type: 'type.sql',\n  Function: 'predefined.sql',\n  Number: 'number.sql',\n  String: 'string.sql',\n  Variable: 'variable.sql',\n  Comment: 'comment.sql',\n  Regexp: 'regexp.sql',\n};\n","import { LinkedToken } from '../../monarch/LinkedToken';\nimport { StatementPosition } from '../../monarch/types';\nimport { AND, ASC, BY, DESC, EQUALS, FROM, GROUP, NOT_EQUALS, ORDER, SCHEMA, SELECT, WHERE } from '../language';\n\nimport { SQLTokenTypes } from './types';\n\n// about getStatementPosition: public/app/plugins/datasource/cloudwatch/language/cloudwatch-ppl/completion/statementPosition.ts\n\nexport function getStatementPosition(currentToken: LinkedToken | null): StatementPosition {\n  const previousNonWhiteSpace = currentToken?.getPreviousNonWhiteSpaceToken();\n  const previousKeyword = currentToken?.getPreviousKeyword();\n\n  const previousIsSlash = currentToken?.getPreviousNonWhiteSpaceToken()?.is(SQLTokenTypes.Operator, '/');\n  if (\n    currentToken === null ||\n    (currentToken.isWhiteSpace() && currentToken.previous === null) ||\n    (currentToken.is(SQLTokenTypes.Keyword, SELECT) && currentToken.previous === null) ||\n    previousIsSlash ||\n    (currentToken.isIdentifier() && (previousIsSlash || currentToken?.previous === null))\n  ) {\n    return StatementPosition.SelectKeyword;\n  }\n\n  if (previousNonWhiteSpace?.value === SELECT) {\n    return StatementPosition.AfterSelectKeyword;\n  }\n\n  if (\n    (previousNonWhiteSpace?.is(SQLTokenTypes.Parenthesis, '(') || currentToken?.is(SQLTokenTypes.Parenthesis, '()')) &&\n    previousKeyword?.value === SELECT\n  ) {\n    return StatementPosition.AfterSelectFuncFirstArgument;\n  }\n\n  if (previousKeyword?.value === SELECT && previousNonWhiteSpace?.isParenthesis()) {\n    return StatementPosition.FromKeyword;\n  }\n\n  if (previousNonWhiteSpace?.value === FROM) {\n    return StatementPosition.AfterFromKeyword;\n  }\n\n  if (\n    (previousNonWhiteSpace?.is(SQLTokenTypes.Parenthesis, '(') || currentToken?.is(SQLTokenTypes.Parenthesis, '()')) &&\n    previousKeyword?.value === SCHEMA\n  ) {\n    return StatementPosition.SchemaFuncFirstArgument;\n  }\n\n  if (previousKeyword?.value === SCHEMA && previousNonWhiteSpace?.is(SQLTokenTypes.Delimiter, ',')) {\n    return StatementPosition.SchemaFuncExtraArgument;\n  }\n\n  if (\n    (previousKeyword?.value === FROM && previousNonWhiteSpace?.isDoubleQuotedString()) ||\n    (previousKeyword?.value === FROM && previousNonWhiteSpace?.isVariable()) ||\n    (previousKeyword?.value === SCHEMA && previousNonWhiteSpace?.is(SQLTokenTypes.Parenthesis, ')'))\n  ) {\n    return StatementPosition.AfterFrom;\n  }\n\n  if (\n    previousKeyword?.value === WHERE &&\n    (previousNonWhiteSpace?.isKeyword() ||\n      previousNonWhiteSpace?.is(SQLTokenTypes.Parenthesis, '(') ||\n      previousNonWhiteSpace?.is(SQLTokenTypes.Operator, AND))\n  ) {\n    return StatementPosition.WhereKey;\n  }\n\n  if (\n    previousKeyword?.value === WHERE &&\n    (previousNonWhiteSpace?.isIdentifier() || previousNonWhiteSpace?.isDoubleQuotedString())\n  ) {\n    return StatementPosition.WhereComparisonOperator;\n  }\n\n  if (\n    previousKeyword?.value === WHERE &&\n    (previousNonWhiteSpace?.is(SQLTokenTypes.Operator, EQUALS) ||\n      previousNonWhiteSpace?.is(SQLTokenTypes.Operator, NOT_EQUALS))\n  ) {\n    return StatementPosition.WhereValue;\n  }\n\n  if (\n    previousKeyword?.value === WHERE &&\n    (previousNonWhiteSpace?.isString() || previousNonWhiteSpace?.is(SQLTokenTypes.Parenthesis, ')'))\n  ) {\n    return StatementPosition.AfterWhereValue;\n  }\n\n  if (\n    previousKeyword?.is(SQLTokenTypes.Keyword, BY) &&\n    previousKeyword?.getPreviousKeyword()?.is(SQLTokenTypes.Keyword, GROUP) &&\n    (previousNonWhiteSpace?.is(SQLTokenTypes.Keyword, BY) || previousNonWhiteSpace?.is(SQLTokenTypes.Delimiter, ','))\n  ) {\n    return StatementPosition.AfterGroupByKeywords;\n  }\n\n  if (\n    previousKeyword?.is(SQLTokenTypes.Keyword, BY) &&\n    previousKeyword?.getPreviousKeyword()?.is(SQLTokenTypes.Keyword, GROUP) &&\n    (previousNonWhiteSpace?.isIdentifier() || previousNonWhiteSpace?.isDoubleQuotedString())\n  ) {\n    return StatementPosition.AfterGroupBy;\n  }\n\n  if (\n    previousNonWhiteSpace?.is(SQLTokenTypes.Keyword, BY) &&\n    previousNonWhiteSpace?.getPreviousKeyword()?.is(SQLTokenTypes.Keyword, ORDER)\n  ) {\n    return StatementPosition.AfterOrderByKeywords;\n  }\n\n  if (\n    previousKeyword?.is(SQLTokenTypes.Keyword, BY) &&\n    previousKeyword?.getPreviousKeyword()?.is(SQLTokenTypes.Keyword, ORDER) &&\n    previousNonWhiteSpace?.is(SQLTokenTypes.Parenthesis) &&\n    previousNonWhiteSpace?.getPreviousNonWhiteSpaceToken()?.is(SQLTokenTypes.Function)\n  ) {\n    return StatementPosition.AfterOrderByFunction;\n  }\n\n  if (previousKeyword?.is(SQLTokenTypes.Keyword, DESC) || previousKeyword?.is(SQLTokenTypes.Keyword, ASC)) {\n    return StatementPosition.AfterOrderByDirection;\n  }\n\n  return StatementPosition.Unknown;\n}\n","import { StatementPosition, SuggestionKind } from '../../monarch/types';\n\nexport function getSuggestionKinds(statementPosition: StatementPosition): SuggestionKind[] {\n  switch (statementPosition) {\n    case StatementPosition.SelectKeyword:\n      return [SuggestionKind.SelectKeyword];\n    case StatementPosition.AfterSelectKeyword:\n      return [SuggestionKind.FunctionsWithArguments];\n    case StatementPosition.AfterSelectFuncFirstArgument:\n      return [SuggestionKind.Metrics];\n    case StatementPosition.AfterFromKeyword:\n      return [SuggestionKind.Namespaces, SuggestionKind.SchemaKeyword];\n    case StatementPosition.SchemaFuncFirstArgument:\n      return [SuggestionKind.Namespaces];\n    case StatementPosition.SchemaFuncExtraArgument:\n      return [SuggestionKind.LabelKeys];\n    case StatementPosition.FromKeyword:\n      return [SuggestionKind.FromKeyword];\n    case StatementPosition.AfterFrom:\n      return [\n        SuggestionKind.WhereKeyword,\n        SuggestionKind.GroupByKeywords,\n        SuggestionKind.OrderByKeywords,\n        SuggestionKind.LimitKeyword,\n      ];\n    case StatementPosition.WhereKey:\n      return [SuggestionKind.LabelKeys];\n    case StatementPosition.WhereComparisonOperator:\n      return [SuggestionKind.ComparisonOperators];\n    case StatementPosition.WhereValue:\n      return [SuggestionKind.LabelValues];\n    case StatementPosition.AfterWhereValue:\n      return [\n        SuggestionKind.LogicalOperators,\n        SuggestionKind.GroupByKeywords,\n        SuggestionKind.OrderByKeywords,\n        SuggestionKind.LimitKeyword,\n      ];\n    case StatementPosition.AfterGroupByKeywords:\n      return [SuggestionKind.LabelKeys];\n    case StatementPosition.AfterGroupBy:\n      return [SuggestionKind.OrderByKeywords, SuggestionKind.LimitKeyword];\n    case StatementPosition.AfterOrderByKeywords:\n      return [SuggestionKind.FunctionsWithoutArguments];\n    case StatementPosition.AfterOrderByFunction:\n      return [SuggestionKind.SortOrderDirectionKeyword, SuggestionKind.LimitKeyword];\n    case StatementPosition.AfterOrderByDirection:\n      return [SuggestionKind.LimitKeyword];\n  }\n\n  return [];\n}\n","import { LinkedToken } from '../../monarch/LinkedToken';\nimport { FROM, SCHEMA, SELECT } from '../language';\n\nimport { SQLTokenTypes } from './types';\n\nexport const getSelectToken = (currentToken: LinkedToken | null) =>\n  currentToken?.getPreviousOfType(SQLTokenTypes.Keyword, SELECT) ?? null;\n\nexport const getSelectStatisticToken = (currentToken: LinkedToken | null) => {\n  const assumedStatisticToken = getSelectToken(currentToken)?.getNextNonWhiteSpaceToken();\n  return assumedStatisticToken?.isVariable() || assumedStatisticToken?.isFunction() ? assumedStatisticToken : null;\n};\n\nexport const getMetricNameToken = (currentToken: LinkedToken | null) => {\n  // statistic function is followed by `(` and then an argument\n  const assumedMetricNameToken = getSelectStatisticToken(currentToken)?.next?.next;\n  return assumedMetricNameToken?.isVariable() || assumedMetricNameToken?.isIdentifier() ? assumedMetricNameToken : null;\n};\n\nexport const getFromKeywordToken = (currentToken: LinkedToken | null) => {\n  const selectToken = getSelectToken(currentToken);\n  return selectToken?.getNextOfType(SQLTokenTypes.Keyword, FROM);\n};\n\nexport const getNamespaceToken = (currentToken: LinkedToken | null) => {\n  const fromToken = getFromKeywordToken(currentToken);\n  const nextNonWhiteSpace = fromToken?.getNextNonWhiteSpaceToken();\n  if (\n    nextNonWhiteSpace?.isDoubleQuotedString() ||\n    (nextNonWhiteSpace?.isVariable() && nextNonWhiteSpace?.value.toUpperCase() !== SCHEMA)\n  ) {\n    // schema is not used\n    return nextNonWhiteSpace;\n  } else if (nextNonWhiteSpace?.isKeyword() && nextNonWhiteSpace.next?.is(SQLTokenTypes.Parenthesis, '(')) {\n    // schema is specified\n    const assumedNamespaceToken = nextNonWhiteSpace.next?.next;\n    if (assumedNamespaceToken?.isDoubleQuotedString() || assumedNamespaceToken?.isVariable()) {\n      return assumedNamespaceToken;\n    }\n  }\n  return null;\n};\n","import { uniq } from 'lodash';\n\nimport { getTemplateSrv, TemplateSrv } from '@grafana/runtime';\nimport type { Monaco, monacoTypes } from '@grafana/ui';\n\nimport { ResourcesAPI } from '../../../resources/ResourcesAPI';\nimport { CompletionItemProvider } from '../../monarch/CompletionItemProvider';\nimport { LinkedToken } from '../../monarch/LinkedToken';\nimport { TRIGGER_SUGGEST } from '../../monarch/commands';\nimport { SuggestionKind, CompletionItemPriority, StatementPosition } from '../../monarch/types';\nimport {\n  BY,\n  FROM,\n  GROUP,\n  LIMIT,\n  ORDER,\n  SCHEMA,\n  SELECT,\n  ASC,\n  DESC,\n  WHERE,\n  COMPARISON_OPERATORS,\n  LOGICAL_OPERATORS,\n  STATISTICS,\n} from '../language';\n\nimport { getStatementPosition } from './statementPosition';\nimport { getSuggestionKinds } from './suggestionKind';\nimport { getMetricNameToken, getNamespaceToken } from './tokenUtils';\nimport { SQLTokenTypes } from './types';\n\ntype CompletionItem = monacoTypes.languages.CompletionItem;\n\nexport class SQLCompletionItemProvider extends CompletionItemProvider {\n  region: string;\n\n  constructor(resources: ResourcesAPI, templateSrv: TemplateSrv = getTemplateSrv()) {\n    super(resources, templateSrv);\n    this.region = resources.getActualRegion() ?? '';\n    this.getStatementPosition = getStatementPosition;\n    this.getSuggestionKinds = getSuggestionKinds;\n    this.tokenTypes = SQLTokenTypes;\n  }\n\n  setRegion(region: string) {\n    this.region = region;\n  }\n\n  async getSuggestions(\n    monaco: Monaco,\n    currentToken: LinkedToken | null,\n    suggestionKinds: SuggestionKind[],\n    statementPosition: StatementPosition,\n    position: monacoTypes.IPosition\n  ): Promise<CompletionItem[]> {\n    let suggestions: CompletionItem[] = [];\n    const invalidRangeToken = currentToken?.isWhiteSpace() || currentToken?.isParenthesis();\n    const range =\n      invalidRangeToken || !currentToken?.range ? monaco.Range.fromPositions(position) : currentToken?.range;\n\n    const toCompletionItem = (value: string, rest: Partial<CompletionItem> = {}) => {\n      const item: CompletionItem = {\n        label: value,\n        insertText: value,\n        kind: monaco.languages.CompletionItemKind.Field,\n        range,\n        sortText: CompletionItemPriority.Medium,\n        ...rest,\n      };\n      return item;\n    };\n\n    function addSuggestion(value: string, rest: Partial<CompletionItem> = {}) {\n      suggestions = [...suggestions, toCompletionItem(value, rest)];\n    }\n\n    for (const suggestion of suggestionKinds) {\n      switch (suggestion) {\n        case SuggestionKind.SelectKeyword:\n          addSuggestion(SELECT, {\n            insertText: `${SELECT} $0`,\n            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n            kind: monaco.languages.CompletionItemKind.Keyword,\n            command: TRIGGER_SUGGEST,\n          });\n          break;\n\n        case SuggestionKind.FunctionsWithArguments:\n          STATISTICS.map((s) =>\n            addSuggestion(s, {\n              insertText: `${s}($0)`,\n              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n              command: TRIGGER_SUGGEST,\n              kind: monaco.languages.CompletionItemKind.Function,\n            })\n          );\n          break;\n\n        case SuggestionKind.FunctionsWithoutArguments:\n          STATISTICS.map((s) =>\n            addSuggestion(s, {\n              insertText: `${s}() `,\n              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n              command: TRIGGER_SUGGEST,\n              kind: monaco.languages.CompletionItemKind.Function,\n            })\n          );\n          break;\n\n        case SuggestionKind.Metrics:\n          {\n            const namespaceToken = getNamespaceToken(currentToken);\n            if (namespaceToken?.value) {\n              // if a namespace is specified, only suggest metrics for the namespace\n              const metrics = await this.resources.getMetrics({\n                namespace: namespaceToken?.value.replace(/\\\"/g, ''),\n                region: this.region,\n              });\n              metrics.forEach((m) => m.value && addSuggestion(m.value));\n            } else {\n              // If no namespace is specified in the query, just list all metrics\n              const metrics = await this.resources.getAllMetrics({ region: this.region });\n              uniq(metrics.map((m) => m.metricName)).forEach((m) => m && addSuggestion(m, { insertText: m }));\n            }\n          }\n          break;\n\n        case SuggestionKind.FromKeyword:\n          addSuggestion(FROM, {\n            insertText: `${FROM} `,\n            command: TRIGGER_SUGGEST,\n          });\n          break;\n\n        case SuggestionKind.SchemaKeyword:\n          addSuggestion(SCHEMA, {\n            sortText: CompletionItemPriority.High,\n            insertText: `${SCHEMA}($0)`,\n            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n            command: TRIGGER_SUGGEST,\n            kind: monaco.languages.CompletionItemKind.Function,\n          });\n          break;\n\n        case SuggestionKind.Namespaces:\n          const metricNameToken = getMetricNameToken(currentToken);\n          let namespaces = [];\n          if (metricNameToken?.value) {\n            // if a metric is specified, only suggest namespaces that actually have that metric\n            const metrics = await this.resources.getMetrics({ region: this.region });\n            const metricName = this.templateSrv.replace(metricNameToken.value);\n            namespaces = metrics.filter((m) => m.metricName === metricName).map((m) => m.namespace);\n          } else {\n            // if no metric is specified, just suggest all namespaces\n            const ns = await this.resources.getNamespaces();\n            namespaces = ns.map((n) => n.value);\n          }\n          namespaces.map((n) => addSuggestion(`\"${n}\"`, { insertText: `\"${n}\"` }));\n          break;\n\n        case SuggestionKind.LabelKeys:\n          {\n            const metricNameToken = getMetricNameToken(currentToken);\n            const namespaceToken = getNamespaceToken(currentToken);\n            if (namespaceToken?.value) {\n              let dimensionFilters = {};\n              let labelKeyTokens;\n              if (statementPosition === StatementPosition.SchemaFuncExtraArgument) {\n                labelKeyTokens = namespaceToken?.getNextUntil(this.tokenTypes.Parenthesis, [\n                  this.tokenTypes.Delimiter,\n                  this.tokenTypes.Whitespace,\n                ]);\n              } else if (statementPosition === StatementPosition.AfterGroupByKeywords) {\n                labelKeyTokens = currentToken?.getPreviousUntil(this.tokenTypes.Keyword, [\n                  this.tokenTypes.Delimiter,\n                  this.tokenTypes.Whitespace,\n                ]);\n              }\n              dimensionFilters = (labelKeyTokens || []).reduce((acc, curr) => {\n                return { ...acc, [curr.value]: null };\n              }, {});\n              const keys = await this.resources.getDimensionKeys(\n                {\n                  namespace: this.templateSrv.replace(namespaceToken.value.replace(/\\\"/g, '')),\n                  region: this.templateSrv.replace(this.region),\n                  metricName: metricNameToken?.value,\n                  dimensionFilters,\n                },\n                false\n              );\n              keys.map((m) => {\n                const key = /[\\s\\.-]/.test(m.value ?? '') ? `\"${m.value}\"` : m.value;\n                key && addSuggestion(key);\n              });\n            }\n          }\n          break;\n\n        case SuggestionKind.LabelValues:\n          {\n            const namespaceToken = getNamespaceToken(currentToken);\n            const metricNameToken = getMetricNameToken(currentToken);\n            const labelKey = currentToken?.getPreviousNonWhiteSpaceToken()?.getPreviousNonWhiteSpaceToken();\n            if (namespaceToken?.value && labelKey?.value && metricNameToken?.value) {\n              const values = await this.resources.getDimensionValues({\n                region: this.region,\n                namespace: namespaceToken.value.replace(/\\\"/g, ''),\n                metricName: metricNameToken.value,\n                dimensionKey: labelKey.value,\n              });\n              values.map((o) =>\n                addSuggestion(`'${o.value}'`, { insertText: `'${o.value}' `, command: TRIGGER_SUGGEST })\n              );\n            }\n          }\n          break;\n\n        case SuggestionKind.LogicalOperators:\n          LOGICAL_OPERATORS.map((o) =>\n            addSuggestion(`${o}`, {\n              insertText: `${o} `,\n              command: TRIGGER_SUGGEST,\n              sortText: CompletionItemPriority.MediumHigh,\n            })\n          );\n          break;\n\n        case SuggestionKind.WhereKeyword:\n          addSuggestion(`${WHERE}`, {\n            insertText: `${WHERE} `,\n            command: TRIGGER_SUGGEST,\n            sortText: CompletionItemPriority.High,\n          });\n          break;\n\n        case SuggestionKind.ComparisonOperators:\n          COMPARISON_OPERATORS.map((o) => addSuggestion(`${o}`, { insertText: `${o} `, command: TRIGGER_SUGGEST }));\n          break;\n\n        case SuggestionKind.GroupByKeywords:\n          addSuggestion(`${GROUP} ${BY}`, {\n            insertText: `${GROUP} ${BY} `,\n            command: TRIGGER_SUGGEST,\n            sortText: CompletionItemPriority.MediumHigh,\n          });\n          break;\n\n        case SuggestionKind.OrderByKeywords:\n          addSuggestion(`${ORDER} ${BY}`, {\n            insertText: `${ORDER} ${BY} `,\n            command: TRIGGER_SUGGEST,\n            sortText: CompletionItemPriority.Medium,\n          });\n          break;\n\n        case SuggestionKind.LimitKeyword:\n          addSuggestion(LIMIT, { insertText: `${LIMIT} `, sortText: CompletionItemPriority.MediumLow });\n          break;\n\n        case SuggestionKind.SortOrderDirectionKeyword:\n          [ASC, DESC].map((s) =>\n            addSuggestion(s, {\n              insertText: `${s} `,\n              command: TRIGGER_SUGGEST,\n            })\n          );\n          break;\n      }\n    }\n\n    this.templateSrv.getVariables().map((v) => {\n      const variable = `$${v.name}`;\n      addSuggestion(variable, {\n        range,\n        label: variable,\n        insertText: variable,\n        kind: monaco.languages.CompletionItemKind.Variable,\n        sortText: CompletionItemPriority.Low,\n      });\n    });\n\n    return suggestions;\n  }\n}\n","import { LanguageDefinition } from '../monarch/register';\n\nexport const CLOUDWATCH_LOGS_LANGUAGE_DEFINITION_ID = 'cloudwatch-logs';\n\nconst cloudWatchLogsLanguageDefinition: LanguageDefinition = {\n  id: CLOUDWATCH_LOGS_LANGUAGE_DEFINITION_ID,\n  extensions: [],\n  aliases: [],\n  mimetypes: [],\n  loader: () => import('./language'),\n};\nexport default cloudWatchLogsLanguageDefinition;\n","import { TokenTypes } from '../../monarch/types';\nimport { CLOUDWATCH_LOGS_LANGUAGE_DEFINITION_ID } from '../definition';\n\nexport const LogsTokenTypes: TokenTypes = {\n  Parenthesis: `delimiter.parenthesis.${CLOUDWATCH_LOGS_LANGUAGE_DEFINITION_ID}`,\n  Whitespace: `white.${CLOUDWATCH_LOGS_LANGUAGE_DEFINITION_ID}`,\n  Keyword: `keyword.${CLOUDWATCH_LOGS_LANGUAGE_DEFINITION_ID}`,\n  Delimiter: `delimiter.${CLOUDWATCH_LOGS_LANGUAGE_DEFINITION_ID}`,\n  Operator: `operator.${CLOUDWATCH_LOGS_LANGUAGE_DEFINITION_ID}`,\n  Identifier: `identifier.${CLOUDWATCH_LOGS_LANGUAGE_DEFINITION_ID}`,\n  Type: `type.${CLOUDWATCH_LOGS_LANGUAGE_DEFINITION_ID}`,\n  Function: `predefined.${CLOUDWATCH_LOGS_LANGUAGE_DEFINITION_ID}`,\n  Number: `number.${CLOUDWATCH_LOGS_LANGUAGE_DEFINITION_ID}`,\n  String: `string.${CLOUDWATCH_LOGS_LANGUAGE_DEFINITION_ID}`,\n  Variable: `variable.${CLOUDWATCH_LOGS_LANGUAGE_DEFINITION_ID}`,\n  Comment: `comment.${CLOUDWATCH_LOGS_LANGUAGE_DEFINITION_ID}`,\n  Regexp: `regexp.${CLOUDWATCH_LOGS_LANGUAGE_DEFINITION_ID}`,\n};\n","import { LinkedToken } from '../../monarch/LinkedToken';\nimport { StatementPosition } from '../../monarch/types';\nimport {\n  DISPLAY,\n  FIELDS,\n  FILTER,\n  STATS,\n  SORT,\n  LIMIT,\n  PARSE,\n  DEDUP,\n  LOGS_COMMANDS,\n  LOGS_FUNCTION_OPERATORS,\n  LOGS_LOGIC_OPERATORS,\n} from '../language';\n\nimport { LogsTokenTypes } from './types';\n\n// about getStatementPosition: public/app/plugins/datasource/cloudwatch/language/cloudwatch-ppl/completion/statementPosition.ts\n\nexport const getStatementPosition = (currentToken: LinkedToken | null): StatementPosition => {\n  const previousNonWhiteSpace = currentToken?.getPreviousNonWhiteSpaceToken();\n  const nextNonWhiteSpace = currentToken?.getNextNonWhiteSpaceToken();\n\n  const normalizedCurrentToken = currentToken?.value?.toLowerCase();\n  const normalizedPreviousNonWhiteSpace = previousNonWhiteSpace?.value?.toLowerCase();\n\n  if (currentToken?.is(LogsTokenTypes.Comment)) {\n    return StatementPosition.Comment;\n  }\n\n  if (currentToken?.isFunction()) {\n    return StatementPosition.Function;\n  }\n\n  if (\n    currentToken === null ||\n    (currentToken?.isWhiteSpace() && previousNonWhiteSpace === null && nextNonWhiteSpace === null) ||\n    (previousNonWhiteSpace?.is(LogsTokenTypes.Delimiter, '|') && currentToken?.isWhiteSpace()) ||\n    (currentToken?.isIdentifier() &&\n      (previousNonWhiteSpace?.is(LogsTokenTypes.Delimiter, '|') || previousNonWhiteSpace === null))\n  ) {\n    return StatementPosition.NewCommand;\n  }\n\n  if (\n    currentToken?.is(LogsTokenTypes.Delimiter, ')') ||\n    (currentToken?.isWhiteSpace() && previousNonWhiteSpace?.is(LogsTokenTypes.Delimiter, ')'))\n  ) {\n    const openingParenthesis = currentToken?.getPreviousOfType(LogsTokenTypes.Delimiter, '(');\n    const normalizedNonWhitespacePreceedingOpeningParenthesis = openingParenthesis\n      ?.getPreviousNonWhiteSpaceToken()\n      ?.value?.toLowerCase();\n\n    if (normalizedNonWhitespacePreceedingOpeningParenthesis) {\n      if (LOGS_COMMANDS.includes(normalizedNonWhitespacePreceedingOpeningParenthesis)) {\n        return StatementPosition.AfterCommand;\n      }\n      if (LOGS_FUNCTION_OPERATORS.includes(normalizedNonWhitespacePreceedingOpeningParenthesis)) {\n        return StatementPosition.AfterFunction;\n      }\n    }\n  }\n\n  if (currentToken?.isKeyword() && normalizedCurrentToken) {\n    switch (normalizedCurrentToken) {\n      case DEDUP:\n        return StatementPosition.DedupKeyword;\n      case DISPLAY:\n        return StatementPosition.DisplayKeyword;\n      case FIELDS:\n        return StatementPosition.FieldsKeyword;\n      case FILTER:\n        return StatementPosition.FilterKeyword;\n      case LIMIT:\n        return StatementPosition.LimitKeyword;\n      case PARSE:\n        return StatementPosition.ParseKeyword;\n      case STATS:\n        return StatementPosition.StatsKeyword;\n      case SORT:\n        return StatementPosition.SortKeyword;\n      case 'as':\n        return StatementPosition.AsKeyword;\n      case 'by':\n        return StatementPosition.ByKeyword;\n      case 'in':\n        return StatementPosition.InKeyword;\n      case 'like':\n        return StatementPosition.LikeKeyword;\n    }\n  }\n\n  if (currentToken?.isWhiteSpace() && previousNonWhiteSpace?.isKeyword && normalizedPreviousNonWhiteSpace) {\n    switch (normalizedPreviousNonWhiteSpace) {\n      case DEDUP:\n        return StatementPosition.AfterDedupKeyword;\n      case DISPLAY:\n        return StatementPosition.AfterDisplayKeyword;\n      case FIELDS:\n        return StatementPosition.AfterFieldsKeyword;\n      case FILTER:\n        return StatementPosition.AfterFilterKeyword;\n      case LIMIT:\n        return StatementPosition.AfterLimitKeyword;\n      case PARSE:\n        return StatementPosition.AfterParseKeyword;\n      case STATS:\n        return StatementPosition.AfterStatsKeyword;\n      case SORT:\n        return StatementPosition.AfterSortKeyword;\n      case 'as':\n        return StatementPosition.AfterAsKeyword;\n      case 'by':\n        return StatementPosition.AfterByKeyword;\n      case 'in':\n        return StatementPosition.AfterInKeyword;\n      case 'like':\n        return StatementPosition.AfterLikeKeyword;\n    }\n  }\n\n  if (currentToken?.is(LogsTokenTypes.Operator) && normalizedCurrentToken) {\n    if (['+', '-', '*', '/', '^', '%'].includes(normalizedCurrentToken)) {\n      return StatementPosition.ArithmeticOperator;\n    }\n\n    if (['=', '!=', '<', '>', '<=', '>='].includes(normalizedCurrentToken)) {\n      return StatementPosition.ComparisonOperator;\n    }\n\n    if (LOGS_LOGIC_OPERATORS.includes(normalizedCurrentToken)) {\n      return StatementPosition.BooleanOperator;\n    }\n  }\n\n  if (previousNonWhiteSpace?.is(LogsTokenTypes.Operator) && normalizedPreviousNonWhiteSpace) {\n    if (['+', '-', '*', '/', '^', '%'].includes(normalizedPreviousNonWhiteSpace)) {\n      return StatementPosition.ArithmeticOperatorArg;\n    }\n\n    if (['=', '!=', '<', '>', '<=', '>='].includes(normalizedPreviousNonWhiteSpace)) {\n      return StatementPosition.ComparisonOperatorArg;\n    }\n\n    if (LOGS_LOGIC_OPERATORS.includes(normalizedPreviousNonWhiteSpace)) {\n      return StatementPosition.BooleanOperatorArg;\n    }\n  }\n\n  if (\n    currentToken?.isIdentifier() ||\n    currentToken?.isNumber() ||\n    currentToken?.is(LogsTokenTypes.Parenthesis, '()') ||\n    currentToken?.is(LogsTokenTypes.Delimiter, ',') ||\n    currentToken?.is(LogsTokenTypes.Parenthesis, ')') ||\n    (currentToken?.isWhiteSpace() && previousNonWhiteSpace?.is(LogsTokenTypes.Delimiter, ',')) ||\n    (currentToken?.isWhiteSpace() && previousNonWhiteSpace?.isIdentifier()) ||\n    (currentToken?.isWhiteSpace() &&\n      previousNonWhiteSpace?.isKeyword() &&\n      normalizedPreviousNonWhiteSpace &&\n      LOGS_COMMANDS.includes(normalizedPreviousNonWhiteSpace))\n  ) {\n    const nearestKeyword = currentToken?.getPreviousOfType(LogsTokenTypes.Keyword);\n    const nearestFunction = currentToken?.getPreviousOfType(LogsTokenTypes.Function);\n\n    if (nearestKeyword !== null && nearestFunction === null) {\n      if (nearestKeyword.value === SORT) {\n        return StatementPosition.SortArg;\n      }\n      if (nearestKeyword.value === FILTER) {\n        return StatementPosition.FilterArg;\n      }\n      return StatementPosition.CommandArg;\n    }\n\n    if (nearestFunction !== null && nearestKeyword === null) {\n      return StatementPosition.FunctionArg;\n    }\n\n    if (nearestKeyword !== null && nearestFunction !== null) {\n      if (\n        nearestKeyword.range.startLineNumber > nearestFunction.range.startLineNumber ||\n        nearestKeyword.range.endColumn > nearestFunction.range.endColumn\n      ) {\n        if (nearestKeyword.value === SORT) {\n          return StatementPosition.SortArg;\n        }\n        if (nearestKeyword.value === FILTER) {\n          return StatementPosition.FilterArg;\n        }\n        return StatementPosition.CommandArg;\n      }\n\n      if (\n        nearestFunction.range.startLineNumber > nearestKeyword.range.startLineNumber ||\n        nearestFunction.range.endColumn > nearestKeyword.range.endColumn\n      ) {\n        return StatementPosition.FunctionArg;\n      }\n    }\n  }\n\n  return StatementPosition.Unknown;\n};\n","import { StatementPosition, SuggestionKind } from '../../monarch/types';\n\nexport function getSuggestionKinds(statementPosition: StatementPosition): SuggestionKind[] {\n  switch (statementPosition) {\n    case StatementPosition.NewCommand:\n      return [SuggestionKind.Command];\n    case StatementPosition.AfterSortKeyword:\n    case StatementPosition.SortArg:\n      return [SuggestionKind.SortOrderDirectionKeyword, SuggestionKind.Function];\n    case StatementPosition.AfterDisplayKeyword:\n    case StatementPosition.AfterFieldsKeyword:\n    case StatementPosition.AfterFilterKeyword:\n    case StatementPosition.AfterStatsKeyword:\n    case StatementPosition.AfterLimitKeyword:\n    case StatementPosition.AfterParseKeyword:\n    case StatementPosition.AfterDedupKeyword:\n    case StatementPosition.CommandArg:\n    case StatementPosition.FunctionArg:\n    case StatementPosition.ArithmeticOperatorArg:\n    case StatementPosition.BooleanOperatorArg:\n    case StatementPosition.ComparisonOperatorArg:\n      return [SuggestionKind.Function];\n    case StatementPosition.FilterArg:\n      return [SuggestionKind.InKeyword, SuggestionKind.Function];\n  }\n\n  return [];\n}\n","import { getTemplateSrv, TemplateSrv } from '@grafana/runtime';\nimport { Monaco, monacoTypes } from '@grafana/ui';\n\nimport { type ResourcesAPI } from '../../../resources/ResourcesAPI';\nimport { LogGroup } from '../../../types';\nimport { CompletionItemProvider } from '../../monarch/CompletionItemProvider';\nimport { LinkedToken } from '../../monarch/LinkedToken';\nimport { TRIGGER_SUGGEST } from '../../monarch/commands';\nimport { CompletionItem, CompletionItemPriority, StatementPosition, SuggestionKind } from '../../monarch/types';\nimport { LOGS_COMMANDS, LOGS_FUNCTION_OPERATORS, SORT_DIRECTION_KEYWORDS } from '../language';\n\nimport { getStatementPosition } from './statementPosition';\nimport { getSuggestionKinds } from './suggestionKinds';\nimport { LogsTokenTypes } from './types';\n\nexport type queryContext = {\n  logGroups?: LogGroup[];\n  region: string;\n};\n\nexport function LogsCompletionItemProviderFunc(resources: ResourcesAPI, templateSrv: TemplateSrv = getTemplateSrv()) {\n  return (queryContext: queryContext) => {\n    return new LogsCompletionItemProvider(resources, templateSrv, queryContext);\n  };\n}\n\nexport class LogsCompletionItemProvider extends CompletionItemProvider {\n  queryContext: queryContext;\n\n  constructor(resources: ResourcesAPI, templateSrv: TemplateSrv = getTemplateSrv(), queryContext: queryContext) {\n    super(resources, templateSrv);\n    this.getStatementPosition = getStatementPosition;\n    this.getSuggestionKinds = getSuggestionKinds;\n    this.tokenTypes = LogsTokenTypes;\n    this.queryContext = queryContext;\n  }\n\n  async getSuggestions(\n    monaco: Monaco,\n    currentToken: LinkedToken | null,\n    suggestionKinds: SuggestionKind[],\n    statementPosition: StatementPosition,\n    position: monacoTypes.IPosition\n  ): Promise<CompletionItem[]> {\n    const suggestions: CompletionItem[] = [];\n    const invalidRangeToken = currentToken?.isWhiteSpace() || currentToken?.isParenthesis();\n    const range =\n      invalidRangeToken || !currentToken?.range ? monaco.Range.fromPositions(position) : currentToken?.range;\n\n    function toCompletionItem(value: string, rest: Partial<CompletionItem> = {}) {\n      const item: monacoTypes.languages.CompletionItem = {\n        label: value,\n        insertText: value,\n        kind: monaco.languages.CompletionItemKind.Field,\n        range,\n        sortText: CompletionItemPriority.Medium,\n        ...rest,\n      };\n      return item;\n    }\n\n    function addSuggestion(value: string, rest: Partial<CompletionItem> = {}) {\n      suggestions.push(toCompletionItem(value, rest));\n    }\n\n    for (const kind of suggestionKinds) {\n      switch (kind) {\n        case SuggestionKind.Command:\n          LOGS_COMMANDS.forEach((command) => {\n            addSuggestion(command, {\n              insertText: `${command} $0`,\n              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n              command: TRIGGER_SUGGEST,\n              kind: monaco.languages.CompletionItemKind.Method,\n            });\n          });\n          break;\n        case SuggestionKind.Function:\n          LOGS_FUNCTION_OPERATORS.forEach((f) => {\n            addSuggestion(f, {\n              insertText: `${f}($0)`,\n              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n              command: TRIGGER_SUGGEST,\n              kind: monaco.languages.CompletionItemKind.Function,\n            });\n          });\n\n          if (this.queryContext.logGroups && this.queryContext.logGroups.length > 0) {\n            let fields = await this.fetchFields(this.queryContext.logGroups, this.queryContext.region);\n            fields.push('@log');\n            fields.forEach((field) => {\n              if (field !== '') {\n                addSuggestion(field, {\n                  range,\n                  label: field,\n                  insertText: field,\n                  kind: monaco.languages.CompletionItemKind.Field,\n                  sortText: CompletionItemPriority.High,\n                });\n              }\n            });\n          }\n          break;\n        case SuggestionKind.SortOrderDirectionKeyword:\n          SORT_DIRECTION_KEYWORDS.forEach((direction) => {\n            addSuggestion(direction, {\n              sortText: CompletionItemPriority.High,\n              kind: monaco.languages.CompletionItemKind.Operator,\n            });\n          });\n          break;\n        case SuggestionKind.InKeyword:\n          addSuggestion('in []', {\n            insertText: 'in [\"$0\"]',\n            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n            kind: monaco.languages.CompletionItemKind.Snippet,\n            sortText: CompletionItemPriority.High,\n          });\n          break;\n      }\n    }\n\n    this.templateSrv.getVariables().map((v) => {\n      const variable = `$${v.name}`;\n      addSuggestion(variable, {\n        range,\n        label: variable,\n        insertText: variable,\n        kind: monaco.languages.CompletionItemKind.Variable,\n        sortText: CompletionItemPriority.Low,\n      });\n    });\n\n    return suggestions;\n  }\n\n  private fetchFields = async (logGroups: LogGroup[], region: string): Promise<string[]> => {\n    const results = await Promise.all(\n      logGroups.map((logGroup) =>\n        this.resources\n          .getLogGroupFields({ logGroupName: logGroup.name, arn: logGroup.arn, region })\n          .then((fields) => fields.filter((f) => f).map((f) => f.value.name ?? ''))\n      )\n    );\n    // Deduplicate fields\n    return [...new Set(results.flat())];\n  };\n}\n","import { TokenTypes } from '../../monarch/types';\n\nexport const MetricMathTokenTypes: TokenTypes = {\n  Parenthesis: 'delimiter.parenthesis.cloudwatch-MetricMath',\n  Whitespace: 'white.cloudwatch-MetricMath',\n  Keyword: 'keyword.cloudwatch-MetricMath',\n  Delimiter: 'delimiter.cloudwatch-MetricMath',\n  Operator: 'operator.cloudwatch-MetricMath',\n  Identifier: 'identifier.cloudwatch-MetricMath',\n  Type: 'type.cloudwatch-MetricMath',\n  Function: 'predefined.cloudwatch-MetricMath',\n  Number: 'number.cloudwatch-MetricMath',\n  String: 'string.cloudwatch-MetricMath',\n  Variable: 'variable.cloudwatch-MetricMath',\n  Comment: 'comment.cloudwatch-MetricMath',\n  Regexp: 'regexp.cloudwatch-MetricMath',\n};\n","import { LinkedToken } from '../../monarch/LinkedToken';\nimport { StatementPosition } from '../../monarch/types';\n\nimport { MetricMathTokenTypes } from './types';\n\nexport function getStatementPosition(currentToken: LinkedToken | null): StatementPosition {\n  const previousNonWhiteSpace = currentToken?.getPreviousNonWhiteSpaceToken();\n\n  if (currentToken && currentToken.isString()) {\n    return StatementPosition.WithinString;\n  }\n\n  if (currentToken && previousNonWhiteSpace) {\n    const currentFunction = currentToken.getPreviousOfType(MetricMathTokenTypes.Function);\n    const isAfterComma = previousNonWhiteSpace.is(MetricMathTokenTypes.Delimiter, ',');\n    const isWithinSearch = currentFunction && currentFunction.value === 'SEARCH';\n    const allTokensAfterStartOfSearch =\n      currentToken.getPreviousUntil(MetricMathTokenTypes.Function, [], 'SEARCH') || [];\n\n    if (isWithinSearch) {\n      // if there's only one ' then we're still within the first arg\n      if (allTokensAfterStartOfSearch.filter(({ value }) => value === \"'\").length === 1) {\n        return StatementPosition.WithinString;\n      }\n\n      // if there was a , before the last , and it happened after the start of SEARCH\n      const lastComma = previousNonWhiteSpace.getPreviousOfType(MetricMathTokenTypes.Delimiter, ',');\n      if (lastComma) {\n        const lastCommaIsAfterSearch =\n          lastComma.range.startColumn > currentFunction.range.startColumn &&\n          lastComma.range.startLineNumber >= currentFunction.range.startLineNumber;\n        if (lastCommaIsAfterSearch) {\n          return StatementPosition.SearchFuncThirdArg;\n        }\n      }\n\n      // otherwise assume it's the second arg\n      return StatementPosition.SearchFuncSecondArg;\n    }\n\n    if (!isWithinSearch && isAfterComma) {\n      return StatementPosition.PredefinedFuncSecondArg;\n    }\n  }\n\n  if (previousNonWhiteSpace?.endsWith(')')) {\n    return StatementPosition.AfterFunction;\n  }\n\n  if (!currentToken || !currentToken.isString()) {\n    return StatementPosition.PredefinedFunction;\n  }\n\n  return StatementPosition.Unknown;\n}\n","import { StatementPosition, SuggestionKind } from '../../monarch/types';\n\nexport function getSuggestionKinds(statementPosition: StatementPosition): SuggestionKind[] {\n  switch (statementPosition) {\n    case StatementPosition.PredefinedFunction:\n      return [SuggestionKind.FunctionsWithArguments];\n    case StatementPosition.PredefinedFuncSecondArg:\n      return [SuggestionKind.FunctionsWithArguments, SuggestionKind.KeywordArguments];\n    case StatementPosition.AfterFunction:\n      return [SuggestionKind.Operators];\n    case StatementPosition.SearchFuncSecondArg:\n      return [SuggestionKind.Statistic];\n    case StatementPosition.SearchFuncThirdArg:\n      return [SuggestionKind.Period];\n  }\n\n  return [];\n}\n","import { getTemplateSrv, TemplateSrv } from '@grafana/runtime';\nimport type { Monaco, monacoTypes } from '@grafana/ui';\n\nimport { ResourcesAPI } from '../../../resources/ResourcesAPI';\nimport { CompletionItemProvider } from '../../monarch/CompletionItemProvider';\nimport { LinkedToken } from '../../monarch/LinkedToken';\nimport { TRIGGER_SUGGEST } from '../../monarch/commands';\nimport { SuggestionKind, CompletionItemPriority, StatementPosition } from '../../monarch/types';\nimport {\n  METRIC_MATH_FNS,\n  METRIC_MATH_KEYWORDS,\n  METRIC_MATH_OPERATORS,\n  METRIC_MATH_PERIODS,\n  METRIC_MATH_STATISTIC_KEYWORD_STRINGS,\n} from '../language';\n\nimport { getStatementPosition } from './statementPosition';\nimport { getSuggestionKinds } from './suggestionKind';\nimport { MetricMathTokenTypes } from './types';\n\ntype CompletionItem = monacoTypes.languages.CompletionItem;\n\nexport class MetricMathCompletionItemProvider extends CompletionItemProvider {\n  constructor(resources: ResourcesAPI, templateSrv: TemplateSrv = getTemplateSrv()) {\n    super(resources, templateSrv);\n    this.getStatementPosition = getStatementPosition;\n    this.getSuggestionKinds = getSuggestionKinds;\n    this.tokenTypes = MetricMathTokenTypes;\n  }\n\n  async getSuggestions(\n    monaco: Monaco,\n    currentToken: LinkedToken | null,\n    suggestionKinds: SuggestionKind[],\n    statementPosition: StatementPosition,\n    position: monacoTypes.IPosition\n  ): Promise<CompletionItem[]> {\n    let suggestions: CompletionItem[] = [];\n    const invalidRangeToken = currentToken?.isWhiteSpace() || currentToken?.isParenthesis();\n    const range =\n      invalidRangeToken || !currentToken?.range ? monaco.Range.fromPositions(position) : currentToken?.range;\n\n    const toCompletionItem = (value: string, rest: Partial<CompletionItem> = {}) => {\n      const item: CompletionItem = {\n        label: value,\n        insertText: value,\n        kind: monaco.languages.CompletionItemKind.Field,\n        range,\n        sortText: CompletionItemPriority.Medium,\n        ...rest,\n      };\n      return item;\n    };\n\n    function addSuggestion(value: string, rest: Partial<CompletionItem> = {}) {\n      suggestions = [...suggestions, toCompletionItem(value, rest)];\n    }\n\n    for (const suggestion of suggestionKinds) {\n      switch (suggestion) {\n        case SuggestionKind.FunctionsWithArguments:\n          METRIC_MATH_FNS.map((f) =>\n            addSuggestion(f, {\n              insertText: f === 'SEARCH' ? `${f}('$0')` : `${f}($0)`,\n              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n              command: TRIGGER_SUGGEST,\n              kind: monaco.languages.CompletionItemKind.Function,\n            })\n          );\n          break;\n\n        case SuggestionKind.KeywordArguments:\n          METRIC_MATH_KEYWORDS.map((s) =>\n            addSuggestion(s, {\n              insertText: s,\n              command: TRIGGER_SUGGEST,\n              kind: monaco.languages.CompletionItemKind.Keyword,\n              sortText: CompletionItemPriority.MediumHigh,\n            })\n          );\n          break;\n\n        case SuggestionKind.Statistic:\n          METRIC_MATH_STATISTIC_KEYWORD_STRINGS.map((s) =>\n            addSuggestion(s, {\n              insertText: `'${s}', `,\n              command: TRIGGER_SUGGEST,\n            })\n          );\n          break;\n\n        case SuggestionKind.Operators:\n          METRIC_MATH_OPERATORS.map((s) =>\n            addSuggestion(s, {\n              insertText: `${s} `,\n              command: TRIGGER_SUGGEST,\n            })\n          );\n          break;\n\n        case SuggestionKind.Period:\n          addSuggestion('$__period_auto', {\n            kind: monaco.languages.CompletionItemKind.Variable,\n            sortText: 'a',\n            detail: 'Sets period dynamically to adjust to selected time range.',\n          });\n          METRIC_MATH_PERIODS.map((s, idx) =>\n            addSuggestion(s.toString(), {\n              kind: monaco.languages.CompletionItemKind.Value,\n              sortText: String.fromCharCode(97 + idx), // converts index 0, 1 to \"a\", \"b\", etc needed to show the time periods in numerical order\n            })\n          );\n          break;\n      }\n    }\n\n    // always suggest template variables\n    this.templateSrv.getVariables().map((v) => {\n      const variable = `$${v.name}`;\n      addSuggestion(variable, {\n        range,\n        label: variable,\n        insertText: variable,\n        kind: monaco.languages.CompletionItemKind.Variable,\n        sortText: CompletionItemPriority.Low,\n      });\n    });\n\n    return suggestions;\n  }\n}\n","import { debounce, memoize } from 'lodash';\n\nexport default <T>(func: (...args: T[]) => void, wait = 7000) => {\n  const mem = memoize(\n    (...args) =>\n      debounce(func, wait, {\n        leading: true,\n      }),\n    (...args) => JSON.stringify(args)\n  );\n\n  return (...args: T[]) => mem(...args)(...args);\n};\n","import { Observable } from 'rxjs';\n\nimport { DataSourceInstanceSettings, DataSourceRef, getDataSourceRef, ScopedVars, AppEvents } from '@grafana/data';\nimport { BackendDataSourceResponse, FetchResponse, getBackendSrv, TemplateSrv, getAppEvents } from '@grafana/runtime';\n\nimport memoizedDebounce from '../memoizedDebounce';\nimport { CloudWatchJsonData, Dimensions, MetricRequest, MultiFilters } from '../types';\nimport { getVariableName } from '../utils/templateVariableUtils';\n\nexport abstract class CloudWatchRequest {\n  templateSrv: TemplateSrv;\n  ref: DataSourceRef;\n  dsQueryEndpoint = '/api/ds/query';\n  debouncedCustomAlert: (title: string, message: string) => void = memoizedDebounce(displayCustomError);\n\n  constructor(\n    public instanceSettings: DataSourceInstanceSettings<CloudWatchJsonData>,\n    templateSrv: TemplateSrv\n  ) {\n    this.templateSrv = templateSrv;\n    this.ref = getDataSourceRef(instanceSettings);\n  }\n\n  awsRequest(\n    url: string,\n    data: MetricRequest,\n    headers: Record<string, string> = {}\n  ): Observable<FetchResponse<BackendDataSourceResponse>> {\n    const options = {\n      method: 'POST',\n      url,\n      data,\n      headers,\n    };\n\n    return getBackendSrv().fetch<BackendDataSourceResponse>(options);\n  }\n\n  convertDimensionFormat(\n    dimensions: Dimensions,\n    scopedVars: ScopedVars,\n    displayErrorIfIsMultiTemplateVariable = true\n  ): Dimensions {\n    return Object.entries(dimensions).reduce((result, [key, value]) => {\n      key = this.replaceVariableAndDisplayWarningIfMulti(\n        key,\n        scopedVars,\n        displayErrorIfIsMultiTemplateVariable,\n        'dimension keys'\n      );\n\n      if (Array.isArray(value)) {\n        return { ...result, [key]: value };\n      }\n\n      if (!value) {\n        return { ...result, [key]: null };\n      }\n\n      const newValues = this.expandVariableToArray(value, scopedVars);\n      return { ...result, [key]: newValues };\n    }, {});\n  }\n\n  // get the value for a given template variable\n  expandVariableToArray(value: string, scopedVars: ScopedVars): string[] {\n    const variableName = getVariableName(value);\n    const valueVar = this.templateSrv.getVariables().find(({ name }) => {\n      return name === variableName;\n    });\n\n    if (variableName && valueVar) {\n      const isMultiVariable =\n        valueVar?.type === 'custom' || valueVar?.type === 'query' || valueVar?.type === 'datasource';\n      if (isMultiVariable && valueVar.multi) {\n        return this.templateSrv.replace(value, scopedVars, 'pipe').split('|');\n      }\n      return [this.templateSrv.replace(value, scopedVars)];\n    }\n    return [value];\n  }\n\n  convertMultiFilterFormat(multiFilters: MultiFilters, fieldName?: string) {\n    return Object.entries(multiFilters).reduce((result, [key, values]) => {\n      const interpolatedKey = this.replaceVariableAndDisplayWarningIfMulti(key, {}, true, fieldName);\n      if (!values) {\n        return { ...result, [interpolatedKey]: null };\n      }\n      const initialVal: string[] = [];\n      const newValues = values.reduce((result, value) => {\n        const vals = this.expandVariableToArray(value, {});\n        return [...result, ...vals];\n      }, initialVal);\n      return { ...result, [interpolatedKey]: newValues };\n    }, {});\n  }\n\n  isMultiVariable(target?: string) {\n    if (target) {\n      const variables = this.templateSrv.getVariables();\n      const variable = variables.find(({ name }) => name === getVariableName(target));\n      const type = variable?.type;\n      return (type === 'custom' || type === 'query' || type === 'datasource') && variable?.multi;\n    }\n\n    return false;\n  }\n\n  isVariableWithMultipleOptionsSelected(target?: string, scopedVars?: ScopedVars) {\n    if (!target || !this.isMultiVariable(target)) {\n      return false;\n    }\n    return this.expandVariableToArray(target, scopedVars || {}).length > 1;\n  }\n\n  replaceVariableAndDisplayWarningIfMulti(\n    target?: string,\n    scopedVars?: ScopedVars,\n    displayErrorIfIsMultiTemplateVariable?: boolean,\n    fieldName?: string\n  ) {\n    if (displayErrorIfIsMultiTemplateVariable && this.isVariableWithMultipleOptionsSelected(target)) {\n      this.debouncedCustomAlert(\n        'CloudWatch templating error',\n        `Multi template variables are not supported for ${fieldName || target}`\n      );\n    }\n\n    return this.templateSrv.replace(target, scopedVars);\n  }\n\n  getActualRegion(region?: string) {\n    if (region === 'default' || region === undefined || region === '') {\n      return this.instanceSettings.jsonData.defaultRegion ?? '';\n    }\n    return region;\n  }\n\n  getVariables() {\n    return this.templateSrv.getVariables().map((v) => `$${v.name}`);\n  }\n}\n\nconst displayCustomError = (title: string, message: string) =>\n  getAppEvents().publish({\n    type: AppEvents.alertError.name,\n    payload: [title, message],\n  });\n","import { Observable } from 'rxjs';\n\nimport { DataQueryRequest, DataQueryResponse, DataSourceInstanceSettings } from '@grafana/data';\nimport { TemplateSrv } from '@grafana/runtime';\n\nimport { CloudWatchAnnotationQuery, CloudWatchJsonData, CloudWatchQuery } from '../types';\n\nimport { CloudWatchRequest } from './CloudWatchRequest';\n\n// This class handles execution of CloudWatch annotation queries\nexport class CloudWatchAnnotationQueryRunner extends CloudWatchRequest {\n  constructor(instanceSettings: DataSourceInstanceSettings<CloudWatchJsonData>, templateSrv: TemplateSrv) {\n    super(instanceSettings, templateSrv);\n  }\n\n  handleAnnotationQuery(\n    queries: CloudWatchAnnotationQuery[],\n    options: DataQueryRequest<CloudWatchQuery>,\n    queryFn: (request: DataQueryRequest<CloudWatchQuery>) => Observable<DataQueryResponse>\n  ): Observable<DataQueryResponse> {\n    return queryFn({\n      ...options,\n      targets: queries.map((query) => ({\n        ...query,\n        statistic: this.templateSrv.replace(query.statistic),\n        region: this.templateSrv.replace(this.getActualRegion(query.region)),\n        namespace: this.templateSrv.replace(query.namespace),\n        metricName: this.templateSrv.replace(query.metricName),\n        dimensions: this.convertDimensionFormat(query.dimensions ?? {}, {}),\n        period: query.period ?? '',\n        actionPrefix: query.actionPrefix ?? '',\n        alarmNamePrefix: query.alarmNamePrefix ?? '',\n        type: 'annotationQuery',\n        datasource: this.ref,\n      })),\n    });\n  }\n}\n","const JSURL = require('jsurl');\n\nexport interface AwsUrl {\n  end: string;\n  start: string;\n  timeType?: 'ABSOLUTE' | 'RELATIVE';\n  tz?: 'local' | 'UTC';\n  unit?: string;\n  editorString: string;\n  isLiveTail: boolean;\n  source: string[];\n}\n\nconst defaultURL = 'console.aws.amazon.com';\nconst usGovURL = 'console.amazonaws-us-gov.com';\nconst chinaURL = 'console.amazonaws.cn';\n\nexport function getLogsEndpoint(region: string): string {\n  let url = defaultURL;\n  if (region.startsWith('us-gov-')) {\n    url = usGovURL;\n  }\n  if (region.startsWith('cn-')) {\n    url = chinaURL;\n  }\n  return `${region}.${url}`;\n}\n\nexport function encodeUrl(obj: AwsUrl, region: string): string {\n  return `https://${getLogsEndpoint(\n    region\n  )}/cloudwatch/home?region=${region}#logs-insights:queryDetail=${JSURL.stringify(obj)}`;\n}\n","import { DataFrame, DataLink, DataQueryRequest, DataQueryResponse, ScopedVars, TimeRange } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\n\nimport { AwsUrl, encodeUrl } from '../aws_url';\nimport { CloudWatchLogsQuery, CloudWatchQuery } from '../types';\n\ntype ReplaceFn = (\n  target?: string,\n  scopedVars?: ScopedVars,\n  displayErrorIfIsMultiTemplateVariable?: boolean,\n  fieldName?: string\n) => string;\n\nexport async function addDataLinksToLogsResponse(\n  response: DataQueryResponse,\n  request: DataQueryRequest<CloudWatchQuery>,\n  replaceFn: ReplaceFn,\n  getVariableValueFn: (value: string, scopedVars: ScopedVars) => string[],\n  getRegion: (region: string) => string,\n  tracingDatasourceUid?: string\n): Promise<void> {\n  const replace = (target: string, fieldName?: string) => replaceFn(target, request.scopedVars, false, fieldName);\n  const getVariableValue = (target: string) => getVariableValueFn(target, request.scopedVars);\n\n  for (const dataFrame of response.data as DataFrame[]) {\n    const curTarget = request.targets.find((target) => target.refId === dataFrame.refId) as CloudWatchLogsQuery;\n    const interpolatedRegion = getRegion(replace(curTarget.region ?? '', 'region'));\n\n    for (const field of dataFrame.fields) {\n      if (field.name === '@xrayTraceId' && tracingDatasourceUid) {\n        getRegion(replace(curTarget.region ?? '', 'region'));\n        const xrayLink = await createInternalXrayLink(tracingDatasourceUid, interpolatedRegion);\n        if (xrayLink) {\n          field.config.links = [xrayLink];\n        }\n      } else {\n        // Right now we add generic link to open the query in xray console to every field so it shows in the logs row\n        // details. Unfortunately this also creates link for all values inside table which look weird.\n        field.config.links = [\n          createAwsConsoleLink(curTarget, request.range, interpolatedRegion, replace, getVariableValue),\n        ];\n      }\n    }\n  }\n}\n\nasync function createInternalXrayLink(datasourceUid: string, region: string): Promise<DataLink | undefined> {\n  let ds;\n  try {\n    ds = await getDataSourceSrv().get(datasourceUid);\n  } catch (e) {\n    console.error('Could not load linked xray data source, it was probably deleted after it was linked', e);\n    return undefined;\n  }\n\n  return {\n    title: ds.name,\n    url: '',\n    internal: {\n      query: { query: '${__value.raw}', queryType: 'getTrace', region: region },\n      datasourceUid: datasourceUid,\n      datasourceName: ds.name,\n    },\n  };\n}\n\nfunction createAwsConsoleLink(\n  target: CloudWatchLogsQuery,\n  range: TimeRange,\n  region: string,\n  replace: (target: string, fieldName?: string) => string,\n  getVariableValue: (value: string) => string[]\n) {\n  const arns = (target.logGroups ?? [])\n    .filter((group) => group?.arn)\n    .map((group) => (group.arn ?? '').replace(/:\\*$/, '')); // remove `:*` from end of arn\n  const logGroupNames = target.logGroupNames ?? [];\n  const sources = arns?.length ? arns : logGroupNames;\n  const interpolatedExpression = target.expression ? replace(target.expression) : '';\n  const interpolatedGroups = sources?.flatMap(getVariableValue);\n\n  const urlProps: AwsUrl = {\n    end: range.to.toISOString(),\n    start: range.from.toISOString(),\n    timeType: 'ABSOLUTE',\n    tz: 'UTC',\n    editorString: interpolatedExpression,\n    isLiveTail: false,\n    source: interpolatedGroups,\n  };\n\n  const encodedUrl = encodeUrl(urlProps, region);\n  return {\n    url: encodedUrl,\n    title: 'View in CloudWatch console',\n    targetBlank: true,\n  };\n}\n","import { Observable, Subscription } from 'rxjs';\n\nimport { DataFrame, DataFrameJSON, DataQueryError, DataQueryResponse } from '@grafana/data';\nimport { FetchError } from '@grafana/runtime';\n\nimport { StartQueryRequest } from '../types';\n\ntype Result = { frames: DataFrameJSON[]; error?: string };\n\n/**\n * A retry strategy specifically for cloud watch logs query. Cloud watch logs queries need first starting the query\n * and the polling for the results. The start query can fail because of the concurrent queries rate limit,\n * and so we have to retry the start query call if there is already lot of queries running.\n *\n * As we send multiple queries in a single request some can fail and some can succeed and we have to also handle those\n * cases by only retrying the failed queries. We retry the failed queries until we hit the time limit or all queries\n * succeed and only then we pass the data forward. This means we wait longer but makes the code a bit simpler as we\n * can treat starting the query and polling as steps in a pipeline.\n * @param queryFun\n * @param targets\n * @param options\n */\nexport function runWithRetry(\n  queryFun: (targets: StartQueryRequest[]) => Observable<DataQueryResponse>,\n  targets: StartQueryRequest[],\n  timeoutFunc: (retry: number, startTime: number) => boolean\n): Observable<DataQueryResponse> {\n  const startTime = new Date();\n  let retries = 0;\n  let timerID: ReturnType<typeof setTimeout>;\n  let subscription: Subscription;\n  let collected: { data: DataFrame[]; errors: DataQueryError[] } = { data: [], errors: [] };\n  // This function is used to calculate the time to wait before retrying the query.\n  const retryWaitFunction = (retry: number) => {\n    return Math.pow(2, retry) * 1000 + Math.random() * 100;\n  };\n\n  return new Observable((observer) => {\n    // Run function is where the logic takes place. We have it in a function so we can call it recursively.\n    function run(currentQueryParams: StartQueryRequest[]) {\n      subscription = queryFun(currentQueryParams).subscribe({\n        next(response: DataQueryResponse) {\n          if (response.errors) {\n            const { refIdsForRequestsToRetry, errorsNotToRetry } = splitErrorsData(response.errors);\n            if (refIdsForRequestsToRetry.length > 0) {\n              if (!timeoutFunc(retries, startTime.valueOf())) {\n                // store the responses we are not retrying\n                collected.data = [...collected.data, ...response.data];\n                collected.errors = [...collected.errors, ...errorsNotToRetry];\n\n                // We retry only the failed queries\n                timerID = setTimeout(\n                  () => {\n                    retries++;\n                    run(currentQueryParams.filter((query) => refIdsForRequestsToRetry.includes(query.refId)));\n                  },\n                  // We want to know how long to wait for the next retry. First time this will be 0.\n                  retryWaitFunction(retries + 1)\n                );\n\n                // we return early. The observer.next will be called whenever the timeout finisies or there are no errors.\n                return;\n              }\n            }\n          }\n\n          // if the timeout is done or it was never called we take what we have from past retries and the current round\n          collected.data = [...collected.data, ...response.data];\n          collected.errors = [\n            ...collected.errors,\n            ...(response.errors && response.errors.length > 0 ? response.errors : []),\n          ];\n          observer.next(collected);\n          observer.complete();\n        },\n        // if the server returns a raw string 5xx error, something is very unexpectedly wrong and we just forward it\n        error(error: FetchError<{ results?: Record<string, Result> }> | string) {\n          observer.error(error);\n        },\n      });\n    }\n\n    run(targets);\n    return () => {\n      // We clear only the latest timer and subscription but the observable should complete after one response so\n      // there should not be more things running at the same time.\n      clearTimeout(timerID);\n      subscription.unsubscribe();\n    };\n  });\n}\n\nfunction splitErrorsData(errors: DataQueryError[]) {\n  const refIdsForRequestsToRetry: string[] = [];\n  const errorsNotToRetry: DataQueryError[] = [];\n  errors.map((err) => {\n    if (\n      err?.refId &&\n      (err.message?.includes('LimitExceededException') || err.message?.includes('ThrottlingException'))\n    ) {\n      refIdsForRequestsToRetry.push(err.refId);\n    } else {\n      errorsNotToRetry.push(err);\n    }\n  });\n  return { refIdsForRequestsToRetry, errorsNotToRetry };\n}\n","import { SchedulerLike, Observable, SchedulerAction, Subscriber, asyncScheduler } from 'rxjs';\n\n/**\n * Creates an Observable that emits sequential numbers after increasing intervals of time\n * starting with `startPeriod`, ending with `endPeriod` and incrementing by `step`.\n */\nexport const increasingInterval = (\n  { startPeriod = 0, endPeriod = 5000, step = 1000 },\n  scheduler: SchedulerLike = asyncScheduler\n): Observable<number> => {\n  return new Observable<number>((subscriber) => {\n    const state: IntervalState = {\n      subscriber,\n      counter: 0,\n      period: startPeriod,\n      step,\n      endPeriod,\n    };\n\n    subscriber.add(scheduler.schedule(dispatch, startPeriod, state));\n    return subscriber;\n  });\n};\n\nfunction dispatch(this: SchedulerAction<IntervalState>, state?: IntervalState) {\n  if (!state) {\n    return;\n  }\n  const { subscriber, counter, period, step, endPeriod } = state;\n  subscriber.next(counter);\n  const newPeriod = Math.min(period + step, endPeriod);\n  this.schedule({ subscriber, counter: counter + 1, period: newPeriod, step, endPeriod }, newPeriod);\n}\n\ninterface IntervalState {\n  subscriber: Subscriber<number>;\n  counter: number;\n  period: number;\n  endPeriod: number;\n  step: number;\n}\n","import { set, uniq } from 'lodash';\nimport {\n  concatMap,\n  finalize,\n  from,\n  lastValueFrom,\n  map,\n  mergeMap,\n  Observable,\n  of,\n  repeat,\n  scan,\n  share,\n  takeWhile,\n  tap,\n  zip,\n} from 'rxjs';\n\nimport {\n  DataFrame,\n  DataQueryError,\n  DataQueryErrorType,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  LoadingState,\n  LogRowContextOptions,\n  LogRowContextQueryDirection,\n  LogRowModel,\n  getDefaultTimeRange,\n  rangeUtil,\n} from '@grafana/data';\nimport { TemplateSrv } from '@grafana/runtime';\nimport { type CustomFormatterVariable } from '@grafana/scenes';\n\nimport {\n  CloudWatchJsonData,\n  CloudWatchLogsQuery,\n  CloudWatchLogsQueryStatus,\n  CloudWatchLogsRequest,\n  CloudWatchQuery,\n  GetLogEventsRequest,\n  LogAction,\n  LogsQueryLanguage,\n  QueryParam,\n  StartQueryRequest,\n} from '../types';\nimport { addDataLinksToLogsResponse } from '../utils/datalinks';\nimport { runWithRetry } from '../utils/logsRetry';\nimport { increasingInterval } from '../utils/rxjs/increasingInterval';\nimport { interpolateStringArrayUsingSingleOrMultiValuedVariable } from '../utils/templateVariableUtils';\n\nimport { CloudWatchRequest } from './CloudWatchRequest';\n\nexport const LOG_IDENTIFIER_INTERNAL = '__log__grafana_internal__';\nexport const LOGSTREAM_IDENTIFIER_INTERNAL = '__logstream__grafana_internal__';\n\n// This class handles execution of CloudWatch logs query data queries\nexport class CloudWatchLogsQueryRunner extends CloudWatchRequest {\n  logsTimeout: string;\n  logQueries: Record<string, { id: string; region: string; statsQuery: boolean }> = {};\n  tracingDataSourceUid?: string;\n\n  constructor(instanceSettings: DataSourceInstanceSettings<CloudWatchJsonData>, templateSrv: TemplateSrv) {\n    super(instanceSettings, templateSrv);\n\n    this.tracingDataSourceUid = instanceSettings.jsonData.tracingDatasourceUid;\n    this.logsTimeout = instanceSettings.jsonData.logsTimeout || '30m';\n  }\n\n  // only public so that it is easy to mock out in tests\n  public createTimeoutFn = () => {\n    const startTime = new Date();\n    return () => {\n      return Date.now() >= startTime.valueOf() + rangeUtil.intervalToMs(this.logsTimeout);\n    };\n  };\n\n  /**\n   * Where all frontend log queries start. Log Queries are started and then we poll for the results.\n   * There is a timeout set in the ds configuration that will stop the query if it takes too long.\n   * We automatically retry logs queries that hit rate limits from aws.\n   * @param logQueries the raw log queries as created by the user\n   * @param options the full raw query request which might contain other queries\n   * @param queryFn the inherited query function from the datasource that calls /query endpoint\n   */\n  public handleLogQueries = (\n    logQueries: CloudWatchLogsQuery[],\n    options: DataQueryRequest<CloudWatchQuery>,\n    queryFn: (request: DataQueryRequest<CloudWatchQuery>) => Observable<DataQueryResponse>\n  ): Observable<DataQueryResponse> => {\n    const validLogQueries = logQueries.filter(this.filterQuery);\n\n    const startQueryRequests: StartQueryRequest[] = validLogQueries.map((target: CloudWatchLogsQuery) => {\n      const interpolatedLogGroupArns = interpolateStringArrayUsingSingleOrMultiValuedVariable(\n        this.templateSrv,\n        (target.logGroups || this.instanceSettings.jsonData.logGroups || []).map((lg) => lg.arn),\n        options.scopedVars\n      );\n\n      // need to support legacy format variables too\n      const interpolatedLogGroupNames = interpolateStringArrayUsingSingleOrMultiValuedVariable(\n        this.templateSrv,\n        target.logGroupNames || this.instanceSettings.jsonData.defaultLogGroups || [],\n        options.scopedVars,\n        'text'\n      );\n\n      // if a log group template variable expands to log group that has already been selected in the log group picker, we need to remove duplicates.\n      // Otherwise the StartLogQuery API will return a permission error\n      const logGroups = uniq(interpolatedLogGroupArns).map((arn) => ({ arn, name: arn }));\n      const logGroupNames = uniq(interpolatedLogGroupNames);\n\n      const logsSQLCustomerFormatter = (value: unknown, model: Partial<CustomFormatterVariable>) => {\n        if (\n          (typeof value === 'string' && value.startsWith('arn:') && value.endsWith(':*')) ||\n          (Array.isArray(value) &&\n            value.every((v) => typeof v === 'string' && v.startsWith('arn:') && v.endsWith(':*')))\n        ) {\n          const varName = model.name || '';\n          const variable = this.templateSrv.getVariables().find(({ name }) => name === varName);\n          // checks the raw query string for a log group template variable that occurs inside `logGroups(logGroupIdentifier:[ ... ])\\`\n          // to later surround the log group names with backticks\n          // this assumes there's only a single template variable used inside the [ ]\n          const shouldSurroundInQuotes = target.expression\n            ?.replaceAll(/[\\r\\n\\t\\s]+/g, '')\n            .includes(`\\`logGroups(logGroupIdentifier:[$${varName}])\\``);\n          if (variable && 'current' in variable && 'text' in variable.current) {\n            if (Array.isArray(variable.current.text)) {\n              return variable.current.text.map((v) => (shouldSurroundInQuotes ? `'${v}'` : v)).join(',');\n            }\n            return shouldSurroundInQuotes ? `'${variable.current.text}'` : variable.current.text;\n          }\n        }\n\n        return value;\n      };\n      const formatter = target.queryLanguage === LogsQueryLanguage.SQL ? logsSQLCustomerFormatter : undefined;\n      const queryString = this.templateSrv.replace(target.expression || '', options.scopedVars, formatter);\n\n      return {\n        refId: target.refId,\n        region: this.templateSrv.replace(this.getActualRegion(target.region)),\n        queryString,\n        logGroups,\n        logGroupNames,\n        queryLanguage: target.queryLanguage,\n      };\n    });\n\n    const timeoutFunc = this.createTimeoutFn();\n\n    // run with retry will retry any failed start queries due to rate limiting\n    return runWithRetry(\n      (targets) => this.makeLogActionRequest('StartQuery', targets, queryFn, options),\n      startQueryRequests,\n      timeoutFunc\n    ).pipe(\n      // once we've started the query, we need to poll for the results\n      mergeMap((startQueryResponse) => {\n        return this.getQueryResults({ logQueries, timeoutFunc, queryFn, startQueryResponse });\n      }),\n      // once we get the results, we add data links to the logs\n      mergeMap((dataQueryResponse) => {\n        return from(\n          (async () => {\n            await addDataLinksToLogsResponse(\n              dataQueryResponse,\n              options,\n              this.replaceVariableAndDisplayWarningIfMulti.bind(this),\n              this.expandVariableToArray.bind(this),\n              this.getActualRegion.bind(this),\n              this.tracingDataSourceUid\n            );\n\n            return dataQueryResponse;\n          })()\n        );\n      })\n    );\n  };\n\n  /**\n   * Called by datasource.ts, invoked when user clicks on a log row in the logs visualization and the \"show context button\"\n   */\n  public getLogRowContext = async (\n    row: LogRowModel,\n    { limit = 10, direction = LogRowContextQueryDirection.Backward }: LogRowContextOptions = {},\n    queryFn: (request: DataQueryRequest<CloudWatchQuery>) => Observable<DataQueryResponse>,\n    query?: CloudWatchLogsQuery\n  ) => {\n    let logStreamField = null;\n    let logField = null;\n\n    for (const field of row.dataFrame.fields) {\n      if (field.name === LOGSTREAM_IDENTIFIER_INTERNAL) {\n        logStreamField = field;\n        if (logField !== null) {\n          break;\n        }\n      } else if (field.name === LOG_IDENTIFIER_INTERNAL) {\n        logField = field;\n        if (logStreamField !== null) {\n          break;\n        }\n      }\n    }\n\n    const requestParams: GetLogEventsRequest = {\n      refId: query?.refId || 'A', // dummy\n      limit,\n      startFromHead: direction !== LogRowContextQueryDirection.Backward,\n      region: this.templateSrv.replace(this.getActualRegion(query?.region)),\n      logGroupName: parseLogGroupName(logField!.values[row.rowIndex]),\n      logStreamName: logStreamField!.values[row.rowIndex],\n    };\n\n    if (direction === LogRowContextQueryDirection.Backward) {\n      requestParams.endTime = row.timeEpochMs;\n    } else {\n      requestParams.startTime = row.timeEpochMs;\n    }\n\n    return await lastValueFrom(this.makeLogActionRequest('GetLogEvents', [requestParams], queryFn));\n  };\n\n  /**\n   * Check if an already started query is complete and returns results if it is. Otherwise it will start polling for results.\n   */\n  private getQueryResults = ({\n    logQueries,\n    timeoutFunc,\n    queryFn,\n    startQueryResponse,\n  }: {\n    logQueries: CloudWatchLogsQuery[];\n    timeoutFunc: () => boolean;\n    queryFn: (request: DataQueryRequest<CloudWatchQuery>) => Observable<DataQueryResponse>;\n    startQueryResponse: DataQueryResponse;\n  }) => {\n    if (\n      startQueryResponse.data.every((frame) =>\n        [\n          CloudWatchLogsQueryStatus.Complete,\n          CloudWatchLogsQueryStatus.Cancelled,\n          CloudWatchLogsQueryStatus.Failed,\n        ].includes(frame.meta?.custom?.['Status'])\n      )\n    ) {\n      return of({\n        key: 'test-key',\n        state: LoadingState.Done,\n        ...startQueryResponse,\n      });\n    }\n\n    return this.pollForLogQueryResults(\n      startQueryResponse.data.map((dataFrame) => ({\n        queryId: dataFrame.fields[0].values[0],\n        region: dataFrame.meta?.custom?.['Region'] ?? 'default',\n        refId: dataFrame.refId!,\n        statsGroups: logQueries.find((target) => target.refId === dataFrame.refId)?.statsGroups,\n      })),\n      timeoutFunc,\n      queryFn,\n      startQueryResponse.errors || []\n    );\n  };\n\n  /**\n   * Checks progress and polls data of a started logs query with some retry logic.\n   * @param queryParams\n   */\n  private pollForLogQueryResults(\n    queryParams: QueryParam[],\n    timeoutFunc: () => boolean,\n    queryFn: (request: DataQueryRequest<CloudWatchQuery>) => Observable<DataQueryResponse>,\n    errorsFromStartQuery: DataQueryError[]\n  ): Observable<DataQueryResponse> {\n    this.logQueries = {};\n    queryParams.forEach((param) => {\n      this.logQueries[param.refId] = {\n        id: param.queryId,\n        region: param.region,\n        statsQuery: (param.statsGroups?.length ?? 0) > 0,\n      };\n    });\n\n    const responses = increasingInterval({ startPeriod: 100, endPeriod: 1000, step: 300 }).pipe(\n      concatMap((_) => this.makeLogActionRequest('GetQueryResults', queryParams, queryFn)),\n      repeat(),\n      share()\n    );\n\n    let errorsFromGetQuery: DataQueryError[] = [];\n    const dataFrames: Observable<DataFrame[]> = responses.pipe(\n      map((response) => {\n        // TODO: it's not entirely clear to me why but this map gets called twice, but the responses are the same\n        // I think it has something to do with lingering subscriptions being opened, it feels like a bug here.\n        // In an ideal world we'd push the errors to an array, not reset it\n        if (response.errors) {\n          errorsFromGetQuery = response.errors;\n        }\n        return response.data;\n      })\n    );\n\n    const initialValue: { failures: number; prevRecordsMatched: Record<string, number> } = {\n      failures: 0,\n      prevRecordsMatched: {},\n    };\n\n    const consecutiveFailedAttempts = dataFrames.pipe(\n      scan(({ failures, prevRecordsMatched }, frames) => {\n        failures++;\n        for (const frame of frames) {\n          const recordsMatched = frame.meta?.stats?.find((stat) => stat.displayName === 'Records scanned')?.value!;\n          if (recordsMatched > (prevRecordsMatched[frame.refId!] ?? 0)) {\n            failures = 0;\n          }\n          prevRecordsMatched[frame.refId!] = recordsMatched;\n        }\n\n        return { failures, prevRecordsMatched };\n      }, initialValue),\n      map(({ failures }) => failures),\n      share()\n    );\n\n    const queryResponse: Observable<DataQueryResponse> = zip(dataFrames, consecutiveFailedAttempts).pipe(\n      tap(([dataFrames]) => {\n        for (const frame of dataFrames) {\n          if (\n            [\n              CloudWatchLogsQueryStatus.Complete,\n              CloudWatchLogsQueryStatus.Cancelled,\n              CloudWatchLogsQueryStatus.Failed,\n            ].includes(frame.meta?.custom?.['Status']) &&\n            this.logQueries.hasOwnProperty(frame.refId!)\n          ) {\n            delete this.logQueries[frame.refId!];\n          }\n        }\n      }),\n      map(([dataFrames, failedAttempts]) => {\n        // if we've timed out, we set a status of cancel which will stop the query from being retried again in getQueryResults\n        const errors = [...errorsFromStartQuery, ...errorsFromGetQuery];\n        if (timeoutFunc()) {\n          for (const frame of dataFrames) {\n            set(frame, 'meta.custom.Status', CloudWatchLogsQueryStatus.Cancelled);\n            errors.push({\n              message: `Error: Query hit timeout before completing after ${failedAttempts} attempts, partial results may be shown. To increase the timeout window update your datasource configuration.`,\n              type: DataQueryErrorType.Timeout,\n              refId: frame.refId,\n            });\n          }\n        }\n\n        return {\n          data: dataFrames,\n          key: 'test-key',\n          state: dataFrames.every((dataFrame) =>\n            [\n              CloudWatchLogsQueryStatus.Complete,\n              CloudWatchLogsQueryStatus.Cancelled,\n              CloudWatchLogsQueryStatus.Failed,\n            ].includes(dataFrame.meta?.custom?.['Status'])\n          )\n            ? LoadingState.Done\n            : LoadingState.Loading,\n          errors: errors,\n        };\n      }),\n      takeWhile(({ state }) => state !== LoadingState.Error && state !== LoadingState.Done, true)\n    );\n\n    return withTeardown(queryResponse, () => this.stopQueries(queryFn));\n  }\n\n  private stopQueries(queryFn: (request: DataQueryRequest<CloudWatchQuery>) => Observable<DataQueryResponse>) {\n    if (Object.keys(this.logQueries).length > 0) {\n      this.makeLogActionRequest(\n        'StopQuery',\n        Object.values(this.logQueries).map((logQuery) => ({\n          queryId: logQuery.id,\n          region: logQuery.region,\n          queryString: '',\n          refId: '',\n        })),\n        queryFn\n      ).pipe(\n        finalize(() => {\n          this.logQueries = {};\n        })\n      );\n    }\n  }\n\n  private makeLogActionRequest(\n    subtype: LogAction,\n    queryParams: CloudWatchLogsRequest[],\n    queryFn: (request: DataQueryRequest<CloudWatchQuery>) => Observable<DataQueryResponse>,\n    options?: DataQueryRequest<CloudWatchQuery>\n  ): Observable<DataQueryResponse> {\n    const range = options?.range || getDefaultTimeRange();\n\n    const requestParams: DataQueryRequest<CloudWatchLogsQuery> = {\n      ...options,\n      range,\n      skipQueryCache: true,\n      requestId: options?.requestId || '', // dummy\n      interval: options?.interval || '', // dummy\n      intervalMs: options?.intervalMs || 1, // dummy\n      scopedVars: options?.scopedVars || {}, // dummy\n      timezone: options?.timezone || '', // dummy\n      app: options?.app || '', // dummy\n      startTime: options?.startTime || 0, // dummy\n      targets: queryParams.map((param) => ({\n        ...param,\n        id: '',\n        queryMode: 'Logs',\n        refId: param.refId || 'A',\n        intervalMs: 1, // dummy\n        maxDataPoints: 1, // dummy\n        datasource: this.ref,\n        type: 'logAction',\n        subtype: subtype,\n      })),\n    };\n\n    return queryFn(requestParams);\n  }\n\n  private filterQuery(query: CloudWatchLogsQuery) {\n    const hasMissingLegacyLogGroupNames = !query.logGroupNames?.length;\n    const hasMissingLogGroups = !query.logGroups?.length;\n    const hasMissingQueryString = !query.expression?.length;\n\n    // log groups are not mandatory if language is SQL\n    const isInvalidCWLIQuery = query.queryLanguage !== 'SQL' && hasMissingLogGroups && hasMissingLegacyLogGroupNames;\n    if (isInvalidCWLIQuery || hasMissingQueryString) {\n      return false;\n    }\n\n    return true;\n  }\n}\n\nfunction withTeardown<T = DataQueryResponse>(observable: Observable<T>, onUnsubscribe: () => void): Observable<T> {\n  return new Observable<T>((subscriber) => {\n    const innerSub = observable.subscribe({\n      next: (val) => subscriber.next(val),\n      error: (err) => subscriber.next(err),\n      complete: () => subscriber.complete(),\n    });\n\n    return () => {\n      innerSub.unsubscribe();\n      onUnsubscribe();\n    };\n  });\n}\n\nfunction parseLogGroupName(logIdentifier: string): string {\n  const colonIndex = logIdentifier.lastIndexOf(':');\n  return logIdentifier.slice(colonIndex + 1);\n}\n","export interface Props {\n  region: string;\n}\n\nexport const ThrottlingErrorMessage = ({ region }: Props) => (\n  <p>\n    Please visit the&nbsp;\n    <a\n      target=\"_blank\"\n      rel=\"noreferrer\"\n      className=\"text-link\"\n      href={`https://${region}.console.aws.amazon.com/servicequotas/home?region=${region}#!/services/monitoring/quotas/L-5E141212`}\n    >\n      AWS Service Quotas console\n    </a>\n    &nbsp;to request a quota increase or see our&nbsp;\n    <a\n      target=\"_blank\"\n      rel=\"noreferrer\"\n      className=\"text-link\"\n      href=\"https://grafana.com/docs/grafana/latest/datasources/cloudwatch/#manage-service-quotas\"\n    >\n      documentation\n    </a>\n    &nbsp;to learn more.\n  </p>\n);\n","import deepEqual from 'fast-deep-equal';\n\nimport { CloudWatchMetricsQuery } from '../types';\n\n// Call this function to migrate queries from within the plugin.\nexport function migrateMetricQuery(query: CloudWatchMetricsQuery): CloudWatchMetricsQuery {\n  //add metric query migrations here\n  const migratedQuery = migrateAliasPatterns(query);\n  return deepEqual(migratedQuery, query) ? query : migratedQuery;\n}\n\nconst aliasPatterns: Record<string, string> = {\n  metric: `PROP('MetricName')`,\n  namespace: `PROP('Namespace')`,\n  period: `PROP('Period')`,\n  region: `PROP('Region')`,\n  stat: `PROP('Stat')`,\n  label: `LABEL`,\n};\n\n// migrateAliasPatterns in the context of https://github.com/grafana/grafana/issues/48434\nexport function migrateAliasPatterns(query: CloudWatchMetricsQuery): CloudWatchMetricsQuery {\n  if (!query.hasOwnProperty('label')) {\n    const newQuery = { ...query };\n    if (!query.hasOwnProperty('label')) {\n      const regex = /{{\\s*(.+?)\\s*}}/g;\n      newQuery.label =\n        query.alias?.replace(regex, (_, value) => {\n          if (aliasPatterns.hasOwnProperty(value)) {\n            return `\\${${aliasPatterns[value]}}`;\n          }\n\n          return `\\${PROP('Dim.${value}')}`;\n        }) ?? '';\n    }\n    return newQuery;\n  }\n  return query;\n}\n","import { isEmpty } from 'lodash';\nimport { createElement } from 'react';\nimport { catchError, map, Observable, of } from 'rxjs';\n\nimport {\n  AppEvents,\n  DataFrame,\n  DataQueryError,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  dateTimeFormat,\n  FieldType,\n  rangeUtil,\n  ScopedVars,\n} from '@grafana/data';\nimport { TemplateSrv, getAppEvents } from '@grafana/runtime';\n\nimport { ThrottlingErrorMessage } from '../components/Errors/ThrottlingErrorMessage';\nimport memoizedDebounce from '../memoizedDebounce';\nimport { migrateMetricQuery } from '../migrations/metricQueryMigrations';\nimport { CloudWatchJsonData, CloudWatchMetricsQuery, CloudWatchQuery } from '../types';\nimport { filterMetricsQuery } from '../utils/utils';\n\nimport { CloudWatchRequest } from './CloudWatchRequest';\n\nconst getThrottlingErrorMessage = (region: string, message: string) =>\n  `Please visit the AWS Service Quotas console at https://${region}.console.aws.amazon.com/servicequotas/home?region=${region}#!/services/monitoring/quotas/L-5E141212 to request a quota increase or see our documentation at https://grafana.com/docs/grafana/latest/datasources/cloudwatch/#manage-service-quotas to learn more. ${message}`;\n\nconst displayAlert = (datasourceName: string, region: string) =>\n  getAppEvents().publish({\n    type: AppEvents.alertError.name,\n    payload: [\n      `CloudWatch request limit reached in ${region} for data source ${datasourceName}`,\n      '',\n      undefined,\n      createElement(ThrottlingErrorMessage, { region }, null),\n    ],\n  });\n\n// This class handles execution of CloudWatch metrics query data queries\nexport class CloudWatchMetricsQueryRunner extends CloudWatchRequest {\n  debouncedThrottlingAlert: (datasourceName: string, region: string) => void = memoizedDebounce(displayAlert);\n\n  constructor(instanceSettings: DataSourceInstanceSettings<CloudWatchJsonData>, templateSrv: TemplateSrv) {\n    super(instanceSettings, templateSrv);\n  }\n\n  handleMetricQueries = (\n    metricQueries: CloudWatchMetricsQuery[],\n    options: DataQueryRequest<CloudWatchQuery>,\n    queryFn: (request: DataQueryRequest<CloudWatchQuery>) => Observable<DataQueryResponse>\n  ): Observable<DataQueryResponse> => {\n    const timezoneUTCOffset = dateTimeFormat(Date.now(), {\n      timeZone: options.timezone,\n      format: 'Z',\n    }).replace(':', '');\n\n    const validMetricsQueries = metricQueries.filter(this.filterMetricQuery).map((q) => {\n      const migratedQuery = migrateMetricQuery(q);\n      const migratedAndIterpolatedQuery = this.replaceMetricQueryVars(migratedQuery, options.scopedVars);\n\n      return {\n        timezoneUTCOffset,\n        intervalMs: options.intervalMs,\n        maxDataPoints: options.maxDataPoints,\n        ...migratedAndIterpolatedQuery,\n        type: 'timeSeriesQuery',\n        datasource: this.ref,\n      };\n    });\n\n    // No valid targets, return the empty result to save a round trip.\n    if (isEmpty(validMetricsQueries)) {\n      return of({ data: [] });\n    }\n\n    const request: DataQueryRequest<CloudWatchQuery> = {\n      ...options,\n      targets: validMetricsQueries,\n    };\n\n    return this.performTimeSeriesQuery(request, queryFn);\n  };\n\n  interpolateMetricsQueryVariables(\n    query: CloudWatchMetricsQuery,\n    scopedVars: ScopedVars\n  ): Pick<\n    CloudWatchMetricsQuery,\n    'alias' | 'metricName' | 'namespace' | 'period' | 'dimensions' | 'sqlExpression' | 'expression'\n  > {\n    return {\n      alias: this.replaceVariableAndDisplayWarningIfMulti(query.alias, scopedVars),\n      metricName: this.replaceVariableAndDisplayWarningIfMulti(query.metricName, scopedVars),\n      namespace: this.replaceVariableAndDisplayWarningIfMulti(query.namespace, scopedVars),\n      period: this.replaceVariableAndDisplayWarningIfMulti(query.period, scopedVars),\n      expression: this.templateSrv.replace(query.expression, scopedVars),\n      sqlExpression: this.replaceVariableAndDisplayWarningIfMulti(query.sqlExpression, scopedVars),\n      dimensions: this.convertDimensionFormat(query.dimensions ?? {}, scopedVars),\n    };\n  }\n\n  performTimeSeriesQuery(\n    request: DataQueryRequest<CloudWatchQuery>,\n    queryFn: (request: DataQueryRequest<CloudWatchQuery>) => Observable<DataQueryResponse>\n  ): Observable<DataQueryResponse> {\n    return queryFn(request).pipe(\n      map((res) => {\n        const dataframes: DataFrame[] = res.data || [];\n\n        dataframes.forEach((frame) => {\n          frame.fields.forEach((field) => {\n            if (field.type === FieldType.time) {\n              // field.config.interval is populated in order for Grafana to fill in null values at frame intervals\n              field.config.interval = frame.meta?.custom?.period * 1000;\n            }\n          });\n        });\n\n        if (res.errors?.length) {\n          this.alertOnThrottlingErrors(res.errors, request);\n        }\n\n        return {\n          data: dataframes,\n          // DataSourceWithBackend will not throw an error, instead it will return \"errors\" field along with the response\n          errors: this.enrichThrottlingErrorMessages(request, res.errors),\n        };\n      }),\n      catchError((err: unknown) => {\n        if (Array.isArray(err)) {\n          return of({ data: [], errors: err });\n        } else {\n          return of({ data: [], errors: [{ message: err }] });\n        }\n      })\n    );\n  }\n\n  enrichThrottlingErrorMessages(request: DataQueryRequest<CloudWatchQuery>, errors?: DataQueryError[]) {\n    if (!errors || errors.length === 0) {\n      return errors;\n    }\n    const result: DataQueryError[] = [];\n    errors.forEach((error) => {\n      if (error.message && (/^Throttling:.*/.test(error.message) || /^Rate exceeded.*/.test(error.message))) {\n        const region = this.getActualRegion(request.targets.find((target) => target.refId === error.refId)?.region);\n        result.push({ ...error, message: getThrottlingErrorMessage(region, error.message) });\n      } else {\n        result.push(error);\n      }\n    });\n    return result;\n  }\n\n  alertOnThrottlingErrors(errors: DataQueryError[], request: DataQueryRequest<CloudWatchQuery>) {\n    const hasThrottlingError = errors.some(\n      (err) => err.message && (/^Throttling:.*/.test(err.message) || /^Rate exceeded.*/.test(err.message))\n    );\n    if (hasThrottlingError) {\n      const failedRefIds = errors.map((error) => error.refId).filter((refId) => refId);\n      if (failedRefIds.length > 0) {\n        const regionsAffected = Object.values(request.targets).reduce(\n          (res: string[], { refId, region }) =>\n            (refId && !failedRefIds.includes(refId)) || res.includes(region) ? res : [...res, region],\n          []\n        );\n        regionsAffected.forEach((region) => {\n          const actualRegion = this.getActualRegion(region);\n          if (actualRegion) {\n            this.debouncedThrottlingAlert(this.instanceSettings.name, actualRegion);\n          }\n        });\n      }\n    }\n  }\n\n  filterMetricQuery(query: CloudWatchMetricsQuery): boolean {\n    return filterMetricsQuery(query);\n  }\n\n  replaceMetricQueryVars(query: CloudWatchMetricsQuery, scopedVars: ScopedVars): CloudWatchMetricsQuery {\n    query.region = this.templateSrv.replace(this.getActualRegion(query.region), scopedVars);\n    query.namespace = this.replaceVariableAndDisplayWarningIfMulti(query.namespace, scopedVars, true, 'namespace');\n    query.metricName = this.replaceVariableAndDisplayWarningIfMulti(query.metricName, scopedVars, true, 'metric name');\n    query.dimensions = this.convertDimensionFormat(query.dimensions ?? {}, scopedVars);\n    query.statistic = this.templateSrv.replace(query.statistic, scopedVars);\n    query.period = String(this.getPeriod(query, scopedVars)); // use string format for period in graph query, and alerting\n    query.id = this.templateSrv.replace(query.id, scopedVars);\n    query.expression = this.templateSrv.replace(query.expression, scopedVars);\n    query.sqlExpression = this.templateSrv.replace(query.sqlExpression, scopedVars, 'raw');\n    if (query.accountId) {\n      query.accountId = this.templateSrv.replace(query.accountId, scopedVars);\n    }\n\n    return query;\n  }\n\n  getPeriod(target: CloudWatchMetricsQuery, scopedVars: ScopedVars) {\n    let period = this.templateSrv.replace(target.period, scopedVars);\n    if (period && period.toLowerCase() !== 'auto') {\n      let p: number;\n      if (/^\\d+$/.test(period)) {\n        p = parseInt(period, 10);\n      } else {\n        p = rangeUtil.intervalToSeconds(period);\n      }\n\n      if (p < 1) {\n        p = 1;\n      }\n\n      return String(p);\n    }\n\n    return period;\n  }\n}\n","import { memoize } from 'lodash';\n\nimport { DataSourceInstanceSettings, SelectableValue } from '@grafana/data';\nimport { getBackendSrv, TemplateSrv } from '@grafana/runtime';\n\nimport { CloudWatchRequest } from '../query-runner/CloudWatchRequest';\nimport { CloudWatchJsonData, LogGroupField, MultiFilters } from '../types';\n\nimport {\n  ResourceRequest,\n  Account,\n  ResourceResponse,\n  DescribeLogGroupsRequest,\n  LogGroupResponse,\n  GetLogGroupFieldsRequest,\n  GetMetricsRequest,\n  GetDimensionKeysRequest,\n  GetDimensionValuesRequest,\n  MetricResponse,\n  SelectableResourceValue,\n  RegionResponse,\n} from './types';\n\nexport class ResourcesAPI extends CloudWatchRequest {\n  private memoizedGetRequest;\n\n  constructor(instanceSettings: DataSourceInstanceSettings<CloudWatchJsonData>, templateSrv: TemplateSrv) {\n    super(instanceSettings, templateSrv);\n    this.memoizedGetRequest = memoize(this.getRequest.bind(this), (path, parameters) =>\n      JSON.stringify({ path, parameters })\n    );\n  }\n\n  private getRequest<T>(subtype: string, parameters?: Record<string, string | string[] | number>): Promise<T> {\n    return getBackendSrv().get(`/api/datasources/${this.instanceSettings.id}/resources/${subtype}`, parameters);\n  }\n\n  async getExternalId(): Promise<string> {\n    return await this.memoizedGetRequest<{ externalId: string }>('external-id').then(({ externalId }) => externalId);\n  }\n\n  getAccounts({ region }: ResourceRequest): Promise<Account[]> {\n    return this.memoizedGetRequest<Array<ResourceResponse<Account>>>('accounts', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n    }).then((accounts) => accounts.map((a) => a.value));\n  }\n\n  isMonitoringAccount(region: string): Promise<boolean> {\n    return this.getAccounts({ region })\n      .then((accounts) => accounts.some((account) => account.isMonitoringAccount))\n      .catch(() => false);\n  }\n\n  getRegions(): Promise<SelectableResourceValue[]> {\n    return this.memoizedGetRequest<Array<ResourceResponse<RegionResponse>>>('regions').then((regions) => {\n      return [\n        { label: 'default', value: 'default', text: 'default' },\n        ...regions.map((r) => ({\n          label: r.value.name,\n          value: r.value.name,\n          text: r.value.name,\n        })),\n      ].filter((r) => r.value);\n    });\n  }\n\n  getNamespaces() {\n    return this.memoizedGetRequest<Array<ResourceResponse<string>>>('namespaces').then((namespaces) =>\n      namespaces.map((n) => ({ label: n.value, value: n.value }))\n    );\n  }\n\n  getLogGroups(params: DescribeLogGroupsRequest): Promise<Array<ResourceResponse<LogGroupResponse>>> {\n    return this.memoizedGetRequest<Array<ResourceResponse<LogGroupResponse>>>('log-groups', {\n      ...params,\n      region: this.templateSrv.replace(this.getActualRegion(params.region)),\n      accountId: this.templateSrv.replace(params.accountId),\n      listAllLogGroups: params.listAllLogGroups ? 'true' : 'false',\n    });\n  }\n\n  getLogGroupFields({\n    region,\n    arn,\n    logGroupName,\n  }: GetLogGroupFieldsRequest): Promise<Array<ResourceResponse<LogGroupField>>> {\n    return this.memoizedGetRequest<Array<ResourceResponse<LogGroupField>>>('log-group-fields', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      logGroupName: this.templateSrv.replace(logGroupName, {}),\n      logGroupArn: this.templateSrv.replace(arn),\n    });\n  }\n\n  getMetrics({ region, namespace, accountId }: GetMetricsRequest): Promise<Array<SelectableValue<string>>> {\n    if (!namespace) {\n      return Promise.resolve([]);\n    }\n\n    return this.memoizedGetRequest<Array<ResourceResponse<MetricResponse>>>('metrics', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      namespace: this.templateSrv.replace(namespace),\n      accountId: this.templateSrv.replace(accountId),\n    }).then((metrics) => metrics.map((m) => ({ label: m.value.name, value: m.value.name })));\n  }\n\n  getAllMetrics({ region, accountId }: GetMetricsRequest): Promise<Array<{ metricName?: string; namespace: string }>> {\n    return this.memoizedGetRequest<Array<ResourceResponse<MetricResponse>>>('metrics', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      accountId: this.templateSrv.replace(accountId),\n    }).then((metrics) => metrics.map((m) => ({ metricName: m.value.name, namespace: m.value.namespace })));\n  }\n\n  getDimensionKeys(\n    { region, namespace = '', dimensionFilters = {}, metricName = '', accountId }: GetDimensionKeysRequest,\n    displayErrorIfIsMultiTemplateVariable?: boolean\n  ): Promise<Array<SelectableValue<string>>> {\n    return this.memoizedGetRequest<Array<ResourceResponse<string>>>('dimension-keys', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      namespace: this.templateSrv.replace(namespace),\n      accountId: this.templateSrv.replace(accountId),\n      metricName: this.templateSrv.replace(metricName),\n      dimensionFilters: JSON.stringify(\n        this.convertDimensionFormat(dimensionFilters, {}, displayErrorIfIsMultiTemplateVariable)\n      ),\n    }).then((r) => r.map((r) => ({ label: r.value, value: r.value })));\n  }\n\n  getDimensionValues({\n    dimensionKey,\n    region,\n    namespace,\n    dimensionFilters = {},\n    metricName = '',\n    accountId,\n  }: GetDimensionValuesRequest) {\n    if (!namespace || !metricName) {\n      return Promise.resolve([]);\n    }\n\n    return this.memoizedGetRequest<Array<ResourceResponse<string>>>('dimension-values', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      namespace: this.templateSrv.replace(namespace),\n      metricName: this.templateSrv.replace(metricName.trim()),\n      dimensionKey: this.replaceVariableAndDisplayWarningIfMulti(dimensionKey, {}, true),\n      dimensionFilters: JSON.stringify(this.convertDimensionFormat(dimensionFilters, {})),\n      accountId: this.templateSrv.replace(accountId),\n    }).then((r) => r.map((r) => ({ label: r.value, value: r.value })));\n  }\n\n  getEbsVolumeIds(region: string, instanceId: string) {\n    return this.memoizedGetRequest<SelectableResourceValue[]>('ebs-volume-ids', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      instanceId: this.templateSrv.replace(instanceId),\n    });\n  }\n\n  getEc2InstanceAttribute(region: string, attributeName: string, filters: MultiFilters) {\n    return this.memoizedGetRequest<SelectableResourceValue[]>('ec2-instance-attribute', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      attributeName: this.templateSrv.replace(attributeName),\n      filters: JSON.stringify(this.convertMultiFilterFormat(filters, 'filter key')),\n    });\n  }\n\n  getResourceARNs(region: string, resourceType: string, tags: MultiFilters) {\n    return this.memoizedGetRequest<SelectableResourceValue[]>('resource-arns', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      resourceType: this.templateSrv.replace(resourceType),\n      tags: JSON.stringify(this.convertMultiFilterFormat(tags, 'tag name')),\n    });\n  }\n\n  legacyDescribeLogGroups(region: string, logGroupNamePrefix?: string) {\n    return this.memoizedGetRequest<SelectableResourceValue[]>('legacy-log-groups', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      logGroupNamePrefix: logGroupNamePrefix || '',\n    });\n  }\n}\n","import { omit } from 'lodash';\n\nimport { Dimensions, VariableQuery, VariableQueryType, OldVariableQuery, MultiFilters } from '../types';\n\nconst jsonVariable = /\\${(\\w+):json}/g;\n\nfunction isVariableQuery(rawQuery: string | VariableQuery | OldVariableQuery): rawQuery is VariableQuery {\n  return typeof rawQuery !== 'string' && typeof rawQuery.ec2Filters !== 'string' && typeof rawQuery.tags !== 'string';\n}\n\nfunction migrateMultiFilters(oldFilters: string): MultiFilters {\n  const tempFilters = oldFilters.replace(jsonVariable, '\"$$$1\"');\n  const parsedFilters: Dimensions = JSON.parse(tempFilters);\n  const newFilters: MultiFilters = {};\n  // if the old filter was {key:value} transform it to {key:[value]}\n  Object.keys(parsedFilters).forEach((key) => {\n    const value = parsedFilters[key];\n    if (typeof value === 'string') {\n      newFilters[key] = [value];\n    } else if (value !== undefined) {\n      newFilters[key] = value;\n    }\n  });\n  return newFilters;\n}\n\nexport function migrateVariableQuery(rawQuery: string | VariableQuery | OldVariableQuery): VariableQuery {\n  if (isVariableQuery(rawQuery)) {\n    return rawQuery;\n  }\n\n  // rawQuery is OldVariableQuery\n  if (typeof rawQuery !== 'string') {\n    const newQuery: VariableQuery = omit(rawQuery, ['dimensionFilters', 'ec2Filters', 'tags']);\n    newQuery.dimensionFilters = {};\n    newQuery.ec2Filters = {};\n    newQuery.tags = {};\n\n    if (rawQuery.dimensionFilters !== '' && rawQuery.ec2Filters !== '[]') {\n      const tempFilters = rawQuery.dimensionFilters.replace(jsonVariable, '\"$$$1\"');\n      try {\n        newQuery.dimensionFilters = JSON.parse(tempFilters);\n      } catch {\n        throw new Error(`unable to migrate poorly formed filters: ${rawQuery.dimensionFilters}`);\n      }\n    }\n    if (rawQuery.ec2Filters !== '' && rawQuery.ec2Filters !== '[]') {\n      try {\n        newQuery.ec2Filters = migrateMultiFilters(rawQuery.ec2Filters);\n      } catch {\n        throw new Error(`unable to migrate poorly formed filters: ${rawQuery.ec2Filters}`);\n      }\n    }\n    if (rawQuery.tags !== '' && rawQuery.tags !== '[]') {\n      try {\n        newQuery.tags = migrateMultiFilters(rawQuery.tags);\n      } catch {\n        throw new Error(`unable to migrate poorly formed filters: ${rawQuery.tags}`);\n      }\n    }\n    return newQuery;\n  }\n\n  const newQuery: VariableQuery = {\n    refId: 'CloudWatchVariableQueryEditor-VariableQuery',\n    queryType: VariableQueryType.Regions,\n    namespace: '',\n    region: '',\n    metricName: '',\n    dimensionKey: '',\n    dimensionFilters: {},\n    ec2Filters: {},\n    instanceID: '',\n    attributeName: '',\n    resourceType: '',\n    tags: {},\n  };\n\n  if (rawQuery === '') {\n    return newQuery;\n  }\n\n  if (rawQuery.match(/^regions\\(\\)/)) {\n    return newQuery;\n  }\n  if (rawQuery.match(/^namespaces\\(\\)/)) {\n    newQuery.queryType = VariableQueryType.Namespaces;\n    return newQuery;\n  }\n  const metricNameQuery = rawQuery.match(/^metrics\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/);\n  if (metricNameQuery) {\n    newQuery.queryType = VariableQueryType.Metrics;\n    newQuery.namespace = metricNameQuery[1];\n    newQuery.region = metricNameQuery[3] || '';\n    return newQuery;\n  }\n  const dimensionKeysQuery = rawQuery.match(/^dimension_keys\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/);\n  if (dimensionKeysQuery) {\n    newQuery.queryType = VariableQueryType.DimensionKeys;\n    newQuery.namespace = dimensionKeysQuery[1];\n    newQuery.region = dimensionKeysQuery[3] || '';\n    return newQuery;\n  }\n\n  const dimensionValuesQuery = rawQuery.match(\n    /^dimension_values\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?([^,]+?)(,\\s?(.+))?\\)/\n  );\n  if (dimensionValuesQuery) {\n    newQuery.queryType = VariableQueryType.DimensionValues;\n    newQuery.region = dimensionValuesQuery[1];\n    newQuery.namespace = dimensionValuesQuery[2];\n    newQuery.metricName = dimensionValuesQuery[3];\n    newQuery.dimensionKey = dimensionValuesQuery[4];\n    newQuery.dimensionFilters = {};\n    if (!!dimensionValuesQuery[6] && dimensionValuesQuery[6] !== '[]') {\n      const tempFilters = dimensionValuesQuery[6].replace(jsonVariable, '\"$$$1\"');\n      try {\n        newQuery.dimensionFilters = JSON.parse(tempFilters);\n      } catch {\n        throw new Error(`unable to migrate poorly formed filters: ${dimensionValuesQuery[6]}`);\n      }\n    }\n    return newQuery;\n  }\n\n  const ebsVolumeIdsQuery = rawQuery.match(/^ebs_volume_ids\\(([^,]+?),\\s?([^,]+?)\\)/);\n  if (ebsVolumeIdsQuery) {\n    newQuery.queryType = VariableQueryType.EBSVolumeIDs;\n    newQuery.region = ebsVolumeIdsQuery[1];\n    newQuery.instanceID = ebsVolumeIdsQuery[2];\n    return newQuery;\n  }\n\n  const ec2InstanceAttributeQuery = rawQuery.match(/^ec2_instance_attribute\\(([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/);\n  if (ec2InstanceAttributeQuery) {\n    newQuery.queryType = VariableQueryType.EC2InstanceAttributes;\n    newQuery.region = ec2InstanceAttributeQuery[1];\n    newQuery.attributeName = ec2InstanceAttributeQuery[2];\n    if (ec2InstanceAttributeQuery[3] && ec2InstanceAttributeQuery[3] !== '[]') {\n      try {\n        newQuery.ec2Filters = migrateMultiFilters(ec2InstanceAttributeQuery[3]);\n      } catch {\n        throw new Error(`unable to migrate poorly formed filters: ${ec2InstanceAttributeQuery[3]}`);\n      }\n    }\n    return newQuery;\n  }\n\n  const resourceARNsQuery = rawQuery.match(/^resource_arns\\(([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/);\n  if (resourceARNsQuery) {\n    newQuery.queryType = VariableQueryType.ResourceArns;\n    newQuery.region = resourceARNsQuery[1];\n    newQuery.resourceType = resourceARNsQuery[2];\n    if (resourceARNsQuery[3] && resourceARNsQuery[3] !== '[]') {\n      try {\n        newQuery.tags = migrateMultiFilters(resourceARNsQuery[3]);\n      } catch {\n        throw new Error(`unable to migrate poorly formed filters: ${resourceARNsQuery[3]}`);\n      }\n    }\n    return newQuery;\n  }\n\n  const statsQuery = rawQuery.match(/^statistics\\(\\)/);\n  if (statsQuery) {\n    newQuery.queryType = VariableQueryType.Statistics;\n    return newQuery;\n  }\n  throw new Error('unable to parse old variable query');\n}\n","import { css, cx } from '@emotion/css';\nimport { useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { AccessoryButton, InputGroup } from '@grafana/experimental';\nimport { Alert, Input, useStyles2 } from '@grafana/ui';\n\nimport { type CloudWatchDatasource } from '../../datasource';\nimport { useEnsureVariableHasSingleSelection } from '../../hooks';\n\nimport { MultiFilterCondition } from './MultiFilter';\n\nexport interface Props {\n  filter: MultiFilterCondition;\n  onChange: (value: MultiFilterCondition) => void;\n  onDelete: () => void;\n  keyPlaceholder?: string;\n  datasource: CloudWatchDatasource;\n}\n\nexport const MultiFilterItem = ({ filter, onChange, onDelete, keyPlaceholder, datasource }: Props) => {\n  const [localKey, setLocalKey] = useState(filter.key || '');\n  const [localValue, setLocalValue] = useState(filter.value?.join(', ') || '');\n  const error = useEnsureVariableHasSingleSelection(datasource, filter.key);\n  const styles = useStyles2(getOperatorStyles);\n\n  return (\n    <div data-testid=\"cloudwatch-multifilter-item\">\n      <InputGroup>\n        <Input\n          data-testid=\"cloudwatch-multifilter-item-key\"\n          aria-label=\"Filter key\"\n          value={localKey}\n          placeholder={keyPlaceholder ?? 'key'}\n          onChange={(e) => setLocalKey(e.currentTarget.value)}\n          onBlur={() => {\n            if (localKey && localKey !== filter.key) {\n              onChange({ ...filter, key: localKey });\n            }\n          }}\n        />\n\n        <span className={cx(styles.root)}>=</span>\n\n        <Input\n          data-testid=\"cloudwatch-multifilter-item-value\"\n          aria-label=\"Filter value\"\n          value={localValue}\n          placeholder=\"value1, value2,...\"\n          onChange={(e) => setLocalValue(e.currentTarget.value)}\n          onBlur={() => {\n            const newValues = localValue.split(',').map((v) => v.trim());\n            if (localValue && newValues !== filter.value) {\n              onChange({ ...filter, value: newValues });\n            }\n            setLocalValue(newValues.join(', '));\n          }}\n        />\n\n        <AccessoryButton aria-label=\"remove\" icon=\"times\" variant=\"secondary\" onClick={onDelete} type=\"button\" />\n      </InputGroup>\n      {error && <Alert title={error} severity=\"error\" topSpacing={1} />}\n    </div>\n  );\n};\n\nconst getOperatorStyles = (theme: GrafanaTheme2) => ({\n  root: css({\n    padding: theme.spacing(0, 1),\n    alignSelf: 'center',\n  }),\n});\n","import { isEqual } from 'lodash';\nimport { useEffect, useState } from 'react';\n\nimport { EditorList } from '@grafana/experimental';\n\nimport { type CloudWatchDatasource } from '../../datasource';\nimport { MultiFilters } from '../../types';\n\nimport { MultiFilterItem } from './MultiFilterItem';\n\nexport interface Props {\n  filters?: MultiFilters;\n  onChange: (filters: MultiFilters) => void;\n  keyPlaceholder?: string;\n  datasource: CloudWatchDatasource;\n}\n\nexport interface MultiFilterCondition {\n  key?: string;\n  operator?: string;\n  value?: string[];\n}\n\nconst multiFiltersToFilterConditions = (filters: MultiFilters) =>\n  Object.keys(filters).map((key) => ({ key, value: filters[key], operator: '=' }));\n\nconst filterConditionsToMultiFilters = (filters: MultiFilterCondition[]) => {\n  const res: MultiFilters = {};\n  filters.forEach(({ key, value }) => {\n    if (key && value) {\n      res[key] = value;\n    }\n  });\n  return res;\n};\n\nexport const MultiFilter = ({ filters, onChange, keyPlaceholder, datasource }: Props) => {\n  const [items, setItems] = useState<MultiFilterCondition[]>([]);\n  useEffect(() => setItems(filters ? multiFiltersToFilterConditions(filters) : []), [filters]);\n  const onFiltersChange = (newItems: Array<Partial<MultiFilterCondition>>) => {\n    setItems(newItems);\n\n    // The onChange event should only be triggered in the case there is a complete dimension object.\n    // So when a new key is added that does not yet have a value, it should not trigger an onChange event.\n    const newMultifilters = filterConditionsToMultiFilters(newItems);\n    if (!isEqual(newMultifilters, filters)) {\n      onChange(newMultifilters);\n    }\n  };\n\n  return (\n    <EditorList items={items} onChange={onFiltersChange} renderItem={makeRenderFilter(datasource, keyPlaceholder)} />\n  );\n};\n\nfunction makeRenderFilter(datasource: CloudWatchDatasource, keyPlaceholder?: string) {\n  function renderFilter(\n    item: MultiFilterCondition,\n    onChange: (item: MultiFilterCondition) => void,\n    onDelete: () => void\n  ) {\n    return (\n      <MultiFilterItem\n        filter={item}\n        onChange={(item) => onChange(item)}\n        onDelete={onDelete}\n        keyPlaceholder={keyPlaceholder}\n        datasource={datasource}\n      />\n    );\n  }\n  return renderFilter;\n}\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  table: css({\n    width: '100%',\n    tableLayout: 'fixed',\n  }),\n\n  selectedLogGroupsContainer: css({\n    marginLeft: theme.spacing(0.5),\n    marginBottom: theme.spacing(0.5),\n    display: 'flex',\n    flexFlow: 'wrap',\n    gap: theme.spacing(1),\n    button: {\n      margin: 'unset',\n    },\n  }),\n\n  limitLabel: css({\n    color: theme.colors.text.secondary,\n    textAlign: 'center',\n    maxWidth: 'none',\n    svg: {\n      marginRight: theme.spacing(0.5),\n    },\n    fontSize: 12,\n  }),\n\n  logGroupCountLabel: css({\n    color: theme.colors.text.secondary,\n    maxWidth: 'none',\n  }),\n\n  tableScroller: css({\n    maxHeight: '40vh',\n    overflow: 'auto',\n  }),\n\n  row: css({\n    borderBottom: `1px solid ${theme.colors.border.weak}`,\n\n    '&:last-of-type': {\n      borderBottomColor: theme.colors.border.medium,\n    },\n  }),\n\n  cell: css({\n    padding: theme.spacing(1, 1, 1, 0),\n    width: '25%',\n    '&:first-of-type': {\n      width: '80%',\n      padding: theme.spacing(1, 1, 1, 2),\n    },\n  }),\n\n  nestedEntry: css({\n    display: 'flex',\n    alignItems: 'center',\n  }),\n\n  logGroupSearchResults: css({\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n    width: '90%',\n    verticalAlign: 'middle',\n  }),\n\n  modal: css({\n    width: theme.breakpoints.values.lg,\n  }),\n\n  selectAccountId: css({\n    maxWidth: '100px',\n  }),\n\n  logGroupSelectionArea: css({\n    display: 'flex',\n  }),\n\n  searchField: css({\n    width: '100%',\n    marginRight: theme.spacing(1),\n  }),\n\n  resultLimit: css({\n    margin: '4px 0',\n    fontStyle: 'italic',\n  }),\n\n  removeButton: css({\n    verticalAlign: 'middle',\n    marginLeft: theme.spacing(0.5),\n  }),\n});\nexport const removeMarginBottom = css({ marginBottom: 8 });\n\nexport default getStyles;\n","import { SelectableValue } from '@grafana/data';\nimport { EditorField } from '@grafana/experimental';\nimport { Alert, Select } from '@grafana/ui';\n\nimport { VariableQueryType } from '../../types';\nimport { removeMarginBottom } from '../styles';\n\ninterface VariableQueryFieldProps<T> {\n  onChange: (value: T) => void;\n  options: SelectableValue[];\n  value: T | null;\n  label: string;\n  inputId?: string;\n  allowCustomValue?: boolean;\n  isLoading?: boolean;\n  error?: string;\n}\n\nexport const VariableQueryField = <T extends string | VariableQueryType>({\n  label,\n  onChange,\n  value,\n  options,\n  allowCustomValue = false,\n  isLoading = false,\n  inputId = label,\n  error,\n}: VariableQueryFieldProps<T>) => {\n  return (\n    <>\n      <EditorField label={label} htmlFor={inputId} className={removeMarginBottom}>\n        <Select\n          aria-label={label}\n          allowCustomValue={allowCustomValue}\n          value={value}\n          onChange={({ value }) => onChange(value!)}\n          options={options}\n          isLoading={isLoading}\n          inputId={inputId}\n        />\n      </EditorField>\n      {error && <Alert title={error} severity=\"error\" topSpacing={1} />}\n    </>\n  );\n};\n","import { useState } from 'react';\n\nimport { EditorField } from '@grafana/experimental';\nimport { Input, PopoverContent } from '@grafana/ui';\n\nimport { removeMarginBottom } from '../styles';\n\ninterface Props {\n  onBlur: (value: string) => void;\n  value: string;\n  label: string;\n  placeholder?: string;\n  tooltip?: PopoverContent;\n  interactive?: boolean;\n}\n\nexport const VariableTextField = ({ interactive, label, onBlur, placeholder, value, tooltip }: Props) => {\n  const [localValue, setLocalValue] = useState(value);\n  return (\n    <EditorField label={label} tooltip={tooltip} tooltipInteractive={interactive} className={removeMarginBottom}>\n      <Input\n        aria-label={label}\n        placeholder={placeholder}\n        value={localValue}\n        onChange={(e) => setLocalValue(e.currentTarget.value)}\n        onBlur={() => onBlur(localValue)}\n      />\n    </EditorField>\n  );\n};\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2, QueryEditorProps, SelectableValue } from '@grafana/data';\nimport { EditorField } from '@grafana/experimental';\nimport { config } from '@grafana/runtime';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { CloudWatchDatasource } from '../../datasource';\nimport {\n  useAccountOptions,\n  useDimensionKeys,\n  useMetrics,\n  useNamespaces,\n  useRegions,\n  useEnsureVariableHasSingleSelection,\n} from '../../hooks';\nimport { migrateVariableQuery } from '../../migrations/variableQueryMigrations';\nimport { CloudWatchJsonData, CloudWatchQuery, VariableQuery, VariableQueryType } from '../../types';\nimport { ALL_ACCOUNTS_OPTION } from '../shared/Account';\nimport { Dimensions } from '../shared/Dimensions/Dimensions';\n\nimport { MultiFilter } from './MultiFilter';\nimport { VariableQueryField } from './VariableQueryField';\nimport { VariableTextField } from './VariableTextField';\n\nexport type Props = QueryEditorProps<CloudWatchDatasource, CloudWatchQuery, CloudWatchJsonData, VariableQuery>;\n\nconst queryTypes: Array<{ value: string; label: string }> = [\n  { value: VariableQueryType.Regions, label: 'Regions' },\n  { value: VariableQueryType.Namespaces, label: 'Namespaces' },\n  { value: VariableQueryType.Metrics, label: 'Metrics' },\n  { value: VariableQueryType.DimensionKeys, label: 'Dimension Keys' },\n  { value: VariableQueryType.DimensionValues, label: 'Dimension Values' },\n  { value: VariableQueryType.EBSVolumeIDs, label: 'EBS Volume IDs' },\n  { value: VariableQueryType.EC2InstanceAttributes, label: 'EC2 Instance Attributes' },\n  { value: VariableQueryType.ResourceArns, label: 'Resource ARNs' },\n  { value: VariableQueryType.Statistics, label: 'Statistics' },\n  { value: VariableQueryType.LogGroups, label: 'Log Groups' },\n  ...(config.featureToggles.cloudWatchCrossAccountQuerying\n    ? [{ value: VariableQueryType.Accounts, label: 'Accounts' }]\n    : []),\n];\n\nexport const VariableQueryEditor = ({ query, datasource, onChange }: Props) => {\n  const parsedQuery = migrateVariableQuery(query);\n\n  const { region, namespace, metricName, dimensionKey } = parsedQuery;\n  const [regions, regionIsLoading] = useRegions(datasource);\n  const namespaces = useNamespaces(datasource);\n  const metrics = useMetrics(datasource, { region, namespace });\n  const dimensionKeys = useDimensionKeys(datasource, { region, namespace, metricName });\n  const accountState = useAccountOptions(datasource.resources, query.region);\n  const dimensionKeyError = useEnsureVariableHasSingleSelection(datasource, dimensionKey);\n\n  const onRegionChange = async (region: string) => {\n    const validatedQuery = await sanitizeQuery({\n      ...parsedQuery,\n      region,\n      accountId: undefined,\n    });\n    onQueryChange(validatedQuery);\n  };\n\n  const onNamespaceChange = async (namespace: string) => {\n    const validatedQuery = await sanitizeQuery({\n      ...parsedQuery,\n      namespace,\n    });\n    onQueryChange(validatedQuery);\n  };\n\n  const onQueryChange = (newQuery: VariableQuery) => {\n    onChange({\n      ...newQuery,\n      refId: 'CloudWatchVariableQueryEditor-VariableQuery',\n    });\n  };\n\n  // Reset dimensionValue parameters if namespace or region change\n  const sanitizeQuery = async (query: VariableQuery) => {\n    let { metricName, dimensionKey, dimensionFilters, namespace, region } = query;\n    if (metricName) {\n      await datasource.resources.getMetrics({ namespace, region }).then((result: Array<SelectableValue<string>>) => {\n        if (!result.find((metric) => metric.value === metricName)) {\n          metricName = '';\n        }\n      });\n    }\n    if (dimensionKey) {\n      await datasource.resources\n        .getDimensionKeys({ namespace, region })\n        .then((result: Array<SelectableValue<string>>) => {\n          if (!result.find((key) => key.value === dimensionKey)) {\n            dimensionKey = '';\n            dimensionFilters = {};\n          }\n        });\n    }\n    return { ...query, metricName, dimensionKey, dimensionFilters };\n  };\n\n  const hasRegionField = [\n    VariableQueryType.Metrics,\n    VariableQueryType.DimensionKeys,\n    VariableQueryType.DimensionValues,\n    VariableQueryType.EBSVolumeIDs,\n    VariableQueryType.EC2InstanceAttributes,\n    VariableQueryType.ResourceArns,\n    VariableQueryType.LogGroups,\n    VariableQueryType.Accounts,\n  ].includes(parsedQuery.queryType);\n  const hasAccountIDField = [\n    VariableQueryType.Metrics,\n    VariableQueryType.DimensionKeys,\n    VariableQueryType.DimensionValues,\n    VariableQueryType.LogGroups,\n  ].includes(parsedQuery.queryType);\n  const hasNamespaceField = [\n    VariableQueryType.Metrics,\n    VariableQueryType.DimensionKeys,\n    VariableQueryType.DimensionValues,\n  ].includes(parsedQuery.queryType);\n\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.formStyles}>\n      <VariableQueryField\n        value={parsedQuery.queryType}\n        options={queryTypes}\n        onChange={(value: VariableQueryType) =>\n          onQueryChange({ ...parsedQuery, queryType: value, accountId: undefined })\n        }\n        label=\"Query type\"\n        inputId={`variable-query-type-${query.refId}`}\n      />\n      {hasRegionField && (\n        <VariableQueryField\n          value={region}\n          options={regions}\n          onChange={(value: string) => onRegionChange(value)}\n          label=\"Region\"\n          isLoading={regionIsLoading}\n          inputId={`variable-query-region-${query.refId}`}\n        />\n      )}\n      {hasAccountIDField &&\n        accountState.value &&\n        accountState.value?.length > 0 &&\n        config.featureToggles.cloudWatchCrossAccountQuerying && (\n          <VariableQueryField\n            label=\"Account\"\n            value={query.accountId ?? null}\n            onChange={(accountId?: string) => onQueryChange({ ...parsedQuery, accountId })}\n            options={[ALL_ACCOUNTS_OPTION, ...accountState?.value]}\n            allowCustomValue={false}\n          />\n        )}\n      {hasNamespaceField && (\n        <VariableQueryField\n          value={namespace}\n          options={namespaces}\n          onChange={(value: string) => onNamespaceChange(value)}\n          label=\"Namespace\"\n          inputId={`variable-query-namespace-${query.refId}`}\n          allowCustomValue\n        />\n      )}\n      {parsedQuery.queryType === VariableQueryType.DimensionValues && (\n        <>\n          <VariableQueryField\n            value={metricName || null}\n            options={metrics}\n            onChange={(value: string) => onQueryChange({ ...parsedQuery, metricName: value })}\n            label=\"Metric\"\n            inputId={`variable-query-metric-${query.refId}`}\n            allowCustomValue\n          />\n          <VariableQueryField\n            value={dimensionKey || null}\n            options={dimensionKeys}\n            onChange={(value: string) => onQueryChange({ ...parsedQuery, dimensionKey: value })}\n            label=\"Dimension key\"\n            inputId={`variable-query-dimension-key-${query.refId}`}\n            allowCustomValue\n            error={dimensionKeyError}\n          />\n          <EditorField\n            label=\"Dimensions\"\n            className={styles.dimensionsWidth}\n            tooltip=\"Dimensions to filter the returned values on\"\n          >\n            <Dimensions\n              metricStat={{ ...parsedQuery, dimensions: parsedQuery.dimensionFilters }}\n              onChange={(dimensions) => {\n                onChange({ ...parsedQuery, dimensionFilters: dimensions });\n              }}\n              disableExpressions={true}\n              datasource={datasource}\n            />\n          </EditorField>\n        </>\n      )}\n      {parsedQuery.queryType === VariableQueryType.EBSVolumeIDs && (\n        <VariableTextField\n          value={query.instanceID}\n          placeholder=\"i-XXXXXXXXXXXXXXXXX\"\n          onBlur={(value: string) => onQueryChange({ ...parsedQuery, instanceID: value })}\n          label=\"Instance ID\"\n        />\n      )}\n      {parsedQuery.queryType === VariableQueryType.EC2InstanceAttributes && (\n        <>\n          <VariableTextField\n            value={parsedQuery.attributeName}\n            onBlur={(value: string) => onQueryChange({ ...parsedQuery, attributeName: value })}\n            label=\"Attribute name\"\n            interactive={true}\n            tooltip={\n              <>\n                {'Attribute or tag to query on. Tags should be formatted \"Tags.<name>\". '}\n                <a\n                  href=\"https://grafana.com/docs/grafana/latest/datasources/aws-cloudwatch/template-queries-cloudwatch/#selecting-attributes\"\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  See the documentation for more details\n                </a>\n              </>\n            }\n          />\n          <EditorField\n            label=\"Filters\"\n            tooltipInteractive\n            tooltip={\n              <>\n                <a\n                  href=\"https://grafana.com/docs/grafana/latest/datasources/aws-cloudwatch/template-queries-cloudwatch/#selecting-attributes\"\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  Pre-defined ec2:DescribeInstances filters/tags\n                </a>\n                {' and the values to filter on. Tags should be formatted tag:<name>.'}\n              </>\n            }\n          >\n            <MultiFilter\n              filters={parsedQuery.ec2Filters ?? {}}\n              onChange={(filters) => {\n                onChange({ ...parsedQuery, ec2Filters: filters });\n              }}\n              keyPlaceholder=\"filter/tag\"\n              datasource={datasource}\n            />\n          </EditorField>\n        </>\n      )}\n      {parsedQuery.queryType === VariableQueryType.ResourceArns && (\n        <>\n          <VariableTextField\n            value={parsedQuery.resourceType}\n            onBlur={(value: string) => onQueryChange({ ...parsedQuery, resourceType: value })}\n            label=\"Resource type\"\n          />\n          <EditorField label=\"Tags\" tooltip=\"Tags to filter the returned values on.\">\n            <MultiFilter\n              filters={parsedQuery.tags}\n              onChange={(filters) => {\n                onChange({ ...parsedQuery, tags: filters });\n              }}\n              keyPlaceholder=\"tag\"\n              datasource={datasource}\n            />\n          </EditorField>\n        </>\n      )}\n      {parsedQuery.queryType === VariableQueryType.LogGroups && (\n        <VariableTextField\n          value={query.logGroupPrefix ?? ''}\n          onBlur={(value: string) => onQueryChange({ ...parsedQuery, logGroupPrefix: value })}\n          label=\"Log group prefix\"\n        />\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  formStyles: css({\n    maxWidth: theme.spacing(30),\n  }),\n  dimensionsWidth: css({\n    width: theme.spacing(50),\n  }),\n});\n","import { from, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport {\n  CustomVariableSupport,\n  DataQueryRequest,\n  DataQueryResponse,\n  MetricFindValue,\n  SelectableValue,\n} from '@grafana/data';\n\nimport { VariableQueryEditor } from './components/VariableQueryEditor/VariableQueryEditor';\nimport { ALL_ACCOUNTS_OPTION } from './components/shared/Account';\nimport { CloudWatchDatasource } from './datasource';\nimport { DEFAULT_VARIABLE_QUERY } from './defaultQueries';\nimport { migrateVariableQuery } from './migrations/variableQueryMigrations';\nimport { ResourcesAPI } from './resources/ResourcesAPI';\nimport { standardStatistics } from './standardStatistics';\nimport { VariableQuery, VariableQueryType } from './types';\n\nexport class CloudWatchVariableSupport extends CustomVariableSupport<CloudWatchDatasource, VariableQuery> {\n  constructor(private readonly resources: ResourcesAPI) {\n    super();\n  }\n\n  editor = VariableQueryEditor;\n\n  query(request: DataQueryRequest<VariableQuery>): Observable<DataQueryResponse> {\n    const queryObj = migrateVariableQuery(request.targets[0]);\n    return from(this.execute(queryObj)).pipe(map((data) => ({ data })));\n  }\n\n  async execute(query: VariableQuery) {\n    try {\n      switch (query.queryType) {\n        case VariableQueryType.Regions:\n          return this.handleRegionsQuery();\n        case VariableQueryType.Namespaces:\n          return this.handleNamespacesQuery();\n        case VariableQueryType.Metrics:\n          return this.handleMetricsQuery(query);\n        case VariableQueryType.DimensionKeys:\n          return this.handleDimensionKeysQuery(query);\n        case VariableQueryType.DimensionValues:\n          return this.handleDimensionValuesQuery(query);\n        case VariableQueryType.EBSVolumeIDs:\n          return this.handleEbsVolumeIdsQuery(query);\n        case VariableQueryType.EC2InstanceAttributes:\n          return this.handleEc2InstanceAttributeQuery(query);\n        case VariableQueryType.ResourceArns:\n          return this.handleResourceARNsQuery(query);\n        case VariableQueryType.Statistics:\n          return this.handleStatisticsQuery();\n        case VariableQueryType.LogGroups:\n          return this.handleLogGroupsQuery(query);\n        case VariableQueryType.Accounts:\n          return this.handleAccountsQuery(query);\n      }\n    } catch (error) {\n      console.error(`Could not run CloudWatchMetricFindQuery ${query}`, error);\n      return [];\n    }\n  }\n\n  async handleLogGroupsQuery({ region, logGroupPrefix, accountId }: VariableQuery) {\n    const interpolatedPrefix = this.resources.templateSrv.replace(logGroupPrefix);\n    return this.resources\n      .getLogGroups({\n        accountId,\n        region,\n        logGroupNamePrefix: interpolatedPrefix,\n        listAllLogGroups: true,\n      })\n      .then((logGroups) =>\n        logGroups.map((lg) => {\n          return {\n            text: lg.value.name,\n            value: lg.value.arn,\n            expandable: true,\n          };\n        })\n      );\n  }\n\n  async handleRegionsQuery() {\n    return this.resources.getRegions().then((regions) => regions.map(selectableValueToMetricFindOption));\n  }\n\n  async handleNamespacesQuery() {\n    return this.resources.getNamespaces().then((namespaces) => namespaces.map(selectableValueToMetricFindOption));\n  }\n\n  async handleMetricsQuery({ namespace, region, accountId }: VariableQuery) {\n    return this.resources\n      .getMetrics({ namespace, region, accountId })\n      .then((metrics) => metrics.map(selectableValueToMetricFindOption));\n  }\n\n  async handleDimensionKeysQuery({ namespace, region, accountId }: VariableQuery) {\n    return this.resources\n      .getDimensionKeys({ namespace, region, accountId })\n      .then((keys) => keys.map(selectableValueToMetricFindOption));\n  }\n\n  async handleDimensionValuesQuery({\n    namespace,\n    accountId,\n    region,\n    dimensionKey,\n    metricName,\n    dimensionFilters,\n  }: VariableQuery) {\n    if (!dimensionKey || !metricName) {\n      return [];\n    }\n    return this.resources\n      .getDimensionValues({\n        region,\n        accountId,\n        namespace,\n        metricName,\n        dimensionKey,\n        dimensionFilters,\n      })\n      .then((values) => values.map(selectableValueToMetricFindOption));\n  }\n\n  async handleEbsVolumeIdsQuery({ region, instanceID }: VariableQuery) {\n    if (!instanceID) {\n      return [];\n    }\n    return this.resources.getEbsVolumeIds(region, instanceID).then((ids) => ids.map(selectableValueToMetricFindOption));\n  }\n\n  async handleEc2InstanceAttributeQuery({ region, attributeName, ec2Filters }: VariableQuery) {\n    if (!attributeName) {\n      return [];\n    }\n    return this.resources\n      .getEc2InstanceAttribute(region, attributeName, ec2Filters ?? {})\n      .then((values) => values.map(selectableValueToMetricFindOption));\n  }\n\n  async handleResourceARNsQuery({ region, resourceType, tags }: VariableQuery) {\n    if (!resourceType) {\n      return [];\n    }\n    const keys = await this.resources.getResourceARNs(region, resourceType, tags ?? {});\n    return keys.map(selectableValueToMetricFindOption);\n  }\n\n  async handleStatisticsQuery() {\n    return standardStatistics.map((s: string) => ({\n      text: s,\n      value: s,\n      expandable: true,\n    }));\n  }\n\n  allMetricFindValue: MetricFindValue = { text: 'All', value: ALL_ACCOUNTS_OPTION.value, expandable: true };\n  async handleAccountsQuery({ region }: VariableQuery) {\n    return this.resources.getAccounts({ region }).then((accounts) => {\n      const metricFindOptions = accounts.map((account) => ({\n        text: account.label,\n        value: account.id,\n        expandable: true,\n      }));\n\n      return metricFindOptions.length ? [this.allMetricFindValue, ...metricFindOptions] : [];\n    });\n  }\n\n  getDefaultQuery(): Partial<VariableQuery> {\n    return DEFAULT_VARIABLE_QUERY;\n  }\n}\n\nfunction selectableValueToMetricFindOption({ label, value }: SelectableValue<string>): MetricFindValue {\n  return { text: label ?? value ?? '', value: value, expandable: true };\n}\n","import { cloneDeep, find, isEmpty } from 'lodash';\nimport { merge, Observable, of } from 'rxjs';\n\nimport {\n  CoreApp,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  DataSourceWithLogsContextSupport,\n  LoadingState,\n  LogRowContextOptions,\n  LogRowModel,\n  ScopedVars,\n} from '@grafana/data';\nimport { DataSourceWithBackend, TemplateSrv, getTemplateSrv } from '@grafana/runtime';\n\nimport { CloudWatchAnnotationSupport } from './annotationSupport';\nimport { DEFAULT_METRICS_QUERY, getDefaultLogsQuery } from './defaultQueries';\nimport { isCloudWatchAnnotationQuery, isCloudWatchLogsQuery, isCloudWatchMetricsQuery } from './guards';\nimport { CloudWatchLogsLanguageProvider } from './language/cloudwatch-logs/CloudWatchLogsLanguageProvider';\nimport {\n  LogsSQLCompletionItemProvider,\n  LogsSQLCompletionItemProviderFunc,\n} from './language/cloudwatch-logs-sql/completion/CompletionItemProvider';\nimport {\n  PPLCompletionItemProvider,\n  PPLCompletionItemProviderFunc,\n} from './language/cloudwatch-ppl/completion/PPLCompletionItemProvider';\nimport { SQLCompletionItemProvider } from './language/cloudwatch-sql/completion/CompletionItemProvider';\nimport {\n  LogsCompletionItemProvider,\n  LogsCompletionItemProviderFunc,\n  queryContext,\n} from './language/logs/completion/CompletionItemProvider';\nimport { MetricMathCompletionItemProvider } from './language/metric-math/completion/CompletionItemProvider';\nimport { CloudWatchAnnotationQueryRunner } from './query-runner/CloudWatchAnnotationQueryRunner';\nimport { CloudWatchLogsQueryRunner } from './query-runner/CloudWatchLogsQueryRunner';\nimport { CloudWatchMetricsQueryRunner } from './query-runner/CloudWatchMetricsQueryRunner';\nimport { ResourcesAPI } from './resources/ResourcesAPI';\nimport {\n  CloudWatchAnnotationQuery,\n  CloudWatchJsonData,\n  CloudWatchLogsQuery,\n  CloudWatchMetricsQuery,\n  CloudWatchQuery,\n} from './types';\nimport { CloudWatchVariableSupport } from './variables';\n\nexport class CloudWatchDatasource\n  extends DataSourceWithBackend<CloudWatchQuery, CloudWatchJsonData>\n  implements DataSourceWithLogsContextSupport<CloudWatchLogsQuery>\n{\n  defaultRegion?: string;\n  languageProvider: CloudWatchLogsLanguageProvider;\n  sqlCompletionItemProvider: SQLCompletionItemProvider;\n  metricMathCompletionItemProvider: MetricMathCompletionItemProvider;\n  defaultLogGroups?: string[];\n  logsSqlCompletionItemProviderFunc: (queryContext: queryContext) => LogsSQLCompletionItemProvider;\n  logsCompletionItemProviderFunc: (queryContext: queryContext) => LogsCompletionItemProvider;\n  pplCompletionItemProviderFunc: (queryContext: queryContext) => PPLCompletionItemProvider;\n\n  type = 'cloudwatch';\n\n  private metricsQueryRunner: CloudWatchMetricsQueryRunner;\n  private annotationQueryRunner: CloudWatchAnnotationQueryRunner;\n  logsQueryRunner: CloudWatchLogsQueryRunner;\n  resources: ResourcesAPI;\n\n  constructor(\n    private instanceSettings: DataSourceInstanceSettings<CloudWatchJsonData>,\n    readonly templateSrv: TemplateSrv = getTemplateSrv()\n  ) {\n    super(instanceSettings);\n    this.defaultRegion = instanceSettings.jsonData.defaultRegion;\n    this.resources = new ResourcesAPI(instanceSettings, templateSrv);\n    this.languageProvider = new CloudWatchLogsLanguageProvider(this);\n    this.sqlCompletionItemProvider = new SQLCompletionItemProvider(this.resources, this.templateSrv);\n    this.metricsQueryRunner = new CloudWatchMetricsQueryRunner(instanceSettings, templateSrv);\n    this.logsQueryRunner = new CloudWatchLogsQueryRunner(instanceSettings, templateSrv);\n    this.annotationQueryRunner = new CloudWatchAnnotationQueryRunner(instanceSettings, templateSrv);\n    this.variables = new CloudWatchVariableSupport(this.resources);\n    this.annotations = CloudWatchAnnotationSupport;\n    this.defaultLogGroups = instanceSettings.jsonData.defaultLogGroups;\n\n    this.metricMathCompletionItemProvider = new MetricMathCompletionItemProvider(this.resources, this.templateSrv);\n    this.logsCompletionItemProviderFunc = LogsCompletionItemProviderFunc(this.resources, this.templateSrv);\n    this.logsSqlCompletionItemProviderFunc = LogsSQLCompletionItemProviderFunc(this.resources, templateSrv);\n    this.pplCompletionItemProviderFunc = PPLCompletionItemProviderFunc(this.resources, this.templateSrv);\n  }\n\n  filterQuery(query: CloudWatchQuery) {\n    return query.hide !== true || (isCloudWatchMetricsQuery(query) && query.id !== '');\n  }\n\n  // reminder: when queries are made on the backend through alerting they will not go through this function\n  // we have duplicated code here to retry queries on the frontend so that the we can show partial results to users\n  // but ultimately anytime we add special error handling or logic retrying here we should ask ourselves\n  // could it only live in the backend? if so let's implement it there. If not, should it also live in the backend or just in the frontend?\n  // another note that at the end of the day all of these queries call super.query which is what forwards the request to the backend through /query\n  query(options: DataQueryRequest<CloudWatchQuery>): Observable<DataQueryResponse> {\n    options = cloneDeep(options);\n\n    let queries = options.targets.filter(this.filterQuery);\n\n    const logQueries: CloudWatchLogsQuery[] = [];\n    const metricsQueries: CloudWatchMetricsQuery[] = [];\n    const annotationQueries: CloudWatchAnnotationQuery[] = [];\n\n    queries.forEach((query) => {\n      if (isCloudWatchAnnotationQuery(query)) {\n        annotationQueries.push(query);\n      } else if (isCloudWatchLogsQuery(query)) {\n        logQueries.push(query);\n      } else {\n        metricsQueries.push(query);\n      }\n    });\n\n    const dataQueryResponses: Array<Observable<DataQueryResponse>> = [];\n    if (logQueries.length) {\n      dataQueryResponses.push(this.logsQueryRunner.handleLogQueries(logQueries, options, super.query.bind(this)));\n    }\n\n    if (metricsQueries.length) {\n      dataQueryResponses.push(\n        this.metricsQueryRunner.handleMetricQueries(metricsQueries, options, super.query.bind(this))\n      );\n    }\n\n    if (annotationQueries.length) {\n      dataQueryResponses.push(\n        this.annotationQueryRunner.handleAnnotationQuery(annotationQueries, options, super.query.bind(this))\n      );\n    }\n    // No valid targets, return the empty result to save a round trip.\n    if (isEmpty(dataQueryResponses)) {\n      return of({\n        data: [],\n        state: LoadingState.Done,\n      });\n    }\n\n    return merge(...dataQueryResponses);\n  }\n\n  interpolateVariablesInQueries(queries: CloudWatchQuery[], scopedVars: ScopedVars): CloudWatchQuery[] {\n    if (!queries.length) {\n      return queries;\n    }\n\n    return queries.map((query) => ({\n      ...query,\n      region: this.metricsQueryRunner.replaceVariableAndDisplayWarningIfMulti(\n        this.getActualRegion(query.region),\n        scopedVars\n      ),\n      ...(isCloudWatchMetricsQuery(query) &&\n        this.metricsQueryRunner.interpolateMetricsQueryVariables(query, scopedVars)),\n    }));\n  }\n\n  /**\n   * Get log row context for a given log row. This is called when the user clicks on a log row in the logs visualization and the \"show context button\"\n   * it shows the surrounding logs.\n   */\n  getLogRowContext(row: LogRowModel, context?: LogRowContextOptions, query?: CloudWatchLogsQuery) {\n    return this.logsQueryRunner.getLogRowContext(row, context, super.query.bind(this), query);\n  }\n\n  targetContainsTemplate(target: any) {\n    return (\n      this.templateSrv.containsTemplate(target.region) ||\n      this.templateSrv.containsTemplate(target.namespace) ||\n      this.templateSrv.containsTemplate(target.metricName) ||\n      this.templateSrv.containsTemplate(target.expression!) ||\n      target.logGroupNames?.some((logGroup: string) => this.templateSrv.containsTemplate(logGroup)) ||\n      find(target.dimensions, (v, k) => this.templateSrv.containsTemplate(k) || this.templateSrv.containsTemplate(v))\n    );\n  }\n\n  getQueryDisplayText(query: CloudWatchQuery) {\n    if (isCloudWatchLogsQuery(query)) {\n      return query.expression ?? '';\n    } else {\n      return JSON.stringify(query);\n    }\n  }\n\n  // public\n  getVariables() {\n    return this.resources.getVariables();\n  }\n\n  getActualRegion(region?: string) {\n    if (region === 'default' || region === undefined || region === '') {\n      return this.defaultRegion ?? '';\n    }\n    return region;\n  }\n\n  getDefaultQuery(_: CoreApp): Partial<CloudWatchQuery> {\n    return {\n      ...getDefaultLogsQuery(this.instanceSettings.jsonData.logGroups, this.instanceSettings.jsonData.defaultLogGroups),\n      ...DEFAULT_METRICS_QUERY,\n    };\n  }\n}\n","import { debounce, unionBy } from 'lodash';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport * as React from 'react';\n\nimport { AppEvents, SelectableValue, toOption } from '@grafana/data';\nimport { getAppEvents } from '@grafana/runtime';\nimport { MultiSelect } from '@grafana/ui';\nimport { InputActionMeta } from '@grafana/ui/src/components/Select/types';\n\nimport { CloudWatchDatasource } from '../../../datasource';\nimport { appendTemplateVariables } from '../../../utils/utils';\n\nconst MAX_LOG_GROUPS = 20;\nconst MAX_VISIBLE_LOG_GROUPS = 4;\nconst DEBOUNCE_TIMER = 300;\n\nexport interface LogGroupSelectorProps {\n  region: string;\n  selectedLogGroups: string[];\n  onChange: (logGroups: string[]) => void;\n\n  datasource?: CloudWatchDatasource;\n  onOpenMenu?: () => Promise<void>;\n  width?: number | 'auto';\n  saved?: boolean; // is only used in the config editor\n}\n\nexport const LogGroupSelector: React.FC<LogGroupSelectorProps> = ({\n  region,\n  selectedLogGroups,\n  onChange,\n  datasource,\n  onOpenMenu,\n  width,\n  saved = true,\n}) => {\n  const [loadingLogGroups, setLoadingLogGroups] = useState(false);\n  const [availableLogGroups, setAvailableLogGroups] = useState<Array<SelectableValue<string>>>([]);\n  const logGroupOptions = useMemo(\n    () => unionBy(availableLogGroups, selectedLogGroups?.map(toOption), 'value'),\n    [availableLogGroups, selectedLogGroups]\n  );\n\n  const fetchLogGroupOptions = useCallback(\n    async (region: string, logGroupNamePrefix?: string) => {\n      if (!datasource) {\n        return [];\n      }\n      try {\n        const logGroups = await datasource.resources.legacyDescribeLogGroups(region, logGroupNamePrefix);\n        return logGroups;\n      } catch (err) {\n        getAppEvents().publish({\n          type: AppEvents.alertError.name,\n          payload: [typeof err === 'string' ? err : JSON.stringify(err)],\n        });\n        return [];\n      }\n    },\n    [datasource]\n  );\n\n  const onLogGroupSearch = async (searchTerm: string, region: string, actionMeta: InputActionMeta) => {\n    if (actionMeta.action !== 'input-change' || !datasource) {\n      return;\n    }\n\n    // No need to fetch matching log groups if the search term isn't valid\n    // This is also useful for preventing searches when a user is typing out a log group with template vars\n    // See https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_LogGroup.html for the source of the pattern below\n    const logGroupNamePattern = /^[\\.\\-_/#A-Za-z0-9]+$/;\n    if (!logGroupNamePattern.test(searchTerm)) {\n      if (searchTerm !== '') {\n        getAppEvents().publish({\n          type: AppEvents.alertError.name,\n          payload: ['Invalid Log Group name: ' + searchTerm],\n        });\n      }\n      return;\n    }\n\n    setLoadingLogGroups(true);\n    const matchingLogGroups = await fetchLogGroupOptions(region, searchTerm);\n    setAvailableLogGroups(unionBy(availableLogGroups, matchingLogGroups, 'value'));\n    setLoadingLogGroups(false);\n  };\n\n  // Reset the log group options if the datasource or region change and are saved\n  useEffect(() => {\n    async function getAvailableLogGroupOptions() {\n      // Don't call describeLogGroups if datasource or region is undefined\n      if (!datasource || !datasource.getActualRegion(region)) {\n        setAvailableLogGroups([]);\n        return;\n      }\n\n      setLoadingLogGroups(true);\n      return fetchLogGroupOptions(datasource.getActualRegion(region))\n        .then((logGroups) => {\n          setAvailableLogGroups(logGroups);\n        })\n        .finally(() => {\n          setLoadingLogGroups(false);\n        });\n    }\n\n    // Config editor does not fetch new log group options unless changes have been saved\n    saved && getAvailableLogGroupOptions();\n\n    // if component unmounts in the middle of setting state, we reset state and unsubscribe from fetchLogGroupOptions\n    return () => {\n      setAvailableLogGroups([]);\n      setLoadingLogGroups(false);\n    };\n    // this hook shouldn't get called every time selectedLogGroups or onChange updates\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [datasource, region, saved]);\n\n  const onOpenLogGroupMenu = async () => {\n    if (onOpenMenu) {\n      await onOpenMenu();\n    }\n  };\n\n  const onLogGroupSearchDebounced = debounce(onLogGroupSearch, DEBOUNCE_TIMER);\n\n  return (\n    <MultiSelect\n      inputId=\"default-log-groups\"\n      aria-label=\"Log Groups\"\n      allowCustomValue\n      options={datasource ? appendTemplateVariables(datasource, logGroupOptions) : logGroupOptions}\n      value={selectedLogGroups}\n      onChange={(v) => onChange(v.filter(({ value }) => value).map(({ value }) => value))}\n      closeMenuOnSelect={false}\n      isClearable\n      isOptionDisabled={() => selectedLogGroups.length >= MAX_LOG_GROUPS}\n      placeholder=\"Choose Log Groups\"\n      maxVisibleValues={MAX_VISIBLE_LOG_GROUPS}\n      noOptionsMessage=\"No log groups available\"\n      isLoading={loadingLogGroups}\n      onOpenMenu={onOpenLogGroupMenu}\n      onInputChange={(value, actionMeta) => {\n        onLogGroupSearchDebounced(value, region, actionMeta);\n      }}\n      width={width}\n    />\n  );\n};\n","import { css } from '@emotion/css';\n\nimport { CloudWatchDatasource } from '../../../datasource';\n\nimport { LogGroupSelector } from './LegacyLogGroupSelector';\n\ntype Props = {\n  datasource: CloudWatchDatasource;\n  onChange: (logGroups: string[]) => void;\n  region: string;\n  legacyLogGroupNames: string[];\n};\n\nconst rowGap = css`\n  gap: 3px;\n`;\n\nexport const LegacyLogGroupSelection = ({ datasource, region, legacyLogGroupNames, onChange }: Props) => {\n  return (\n    <div className={`gf-form gf-form--grow flex-grow-1 ${rowGap}`}>\n      <LogGroupSelector\n        region={region}\n        selectedLogGroups={legacyLogGroupNames}\n        datasource={datasource}\n        onChange={onChange}\n      />\n    </div>\n  );\n};\n","import { debounce } from 'lodash';\nimport { useEffect, useMemo, useState } from 'react';\n\nimport { Icon, Input } from '@grafana/ui';\n\n// TODO: consider moving search into grafana/ui, this is mostly the same as that in azure monitor\nconst Search = ({ searchFn, searchPhrase }: { searchPhrase: string; searchFn: (searchPhrase: string) => void }) => {\n  const [searchFilter, setSearchFilter] = useState(searchPhrase);\n\n  const debouncedSearch = useMemo(() => debounce(searchFn, 600), [searchFn]);\n\n  useEffect(() => {\n    return () => {\n      // Stop the invocation of the debounced function after unmounting\n      debouncedSearch?.cancel();\n    };\n  }, [debouncedSearch]);\n\n  return (\n    <Input\n      aria-label=\"log group search\"\n      prefix={<Icon name=\"search\" />}\n      value={searchFilter}\n      onChange={(event) => {\n        const searchPhrase = event.currentTarget.value;\n        setSearchFilter(searchPhrase);\n        debouncedSearch(searchPhrase);\n      }}\n      placeholder=\"search by log group name prefix\"\n    />\n  );\n};\n\nexport default Search;\n","import { useEffect, useMemo, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField } from '@grafana/experimental';\nimport { Button, Checkbox, Icon, Label, LoadingPlaceholder, Modal, Select, Space, useStyles2 } from '@grafana/ui';\n\nimport { DescribeLogGroupsRequest, ResourceResponse, LogGroupResponse } from '../../../resources/types';\nimport { LogGroup } from '../../../types';\nimport getStyles from '../../styles';\nimport { Account, ALL_ACCOUNTS_OPTION } from '../Account';\n\nimport Search from './Search';\n\ntype CrossAccountLogsQueryProps = {\n  selectedLogGroups?: LogGroup[];\n  accountOptions?: Array<SelectableValue<string>>;\n  fetchLogGroups: (params: Partial<DescribeLogGroupsRequest>) => Promise<Array<ResourceResponse<LogGroupResponse>>>;\n  variables?: string[];\n  onChange: (selectedLogGroups: LogGroup[]) => void;\n  onBeforeOpen?: () => void;\n};\n\nexport const LogGroupsSelector = ({\n  accountOptions = [],\n  variables = [],\n  fetchLogGroups,\n  onChange,\n  onBeforeOpen,\n  ...props\n}: CrossAccountLogsQueryProps) => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [selectableLogGroups, setSelectableLogGroups] = useState<LogGroup[]>([]);\n  const [selectedLogGroups, setSelectedLogGroups] = useState(props.selectedLogGroups ?? []);\n  const [searchPhrase, setSearchPhrase] = useState('');\n  const [searchAccountId, setSearchAccountId] = useState(ALL_ACCOUNTS_OPTION.value);\n  const [isLoading, setIsLoading] = useState(false);\n  const styles = useStyles2(getStyles);\n  const selectedLogGroupsCounter = useMemo(\n    () => selectedLogGroups.filter((lg) => !lg.name?.startsWith('$')).length,\n    [selectedLogGroups]\n  );\n  const variableOptions = useMemo(() => variables.map((v) => ({ label: v, value: v })), [variables]);\n  const selectedVariable = useMemo(\n    () => selectedLogGroups.find((lg) => lg.name?.startsWith('$'))?.name,\n    [selectedLogGroups]\n  );\n  const currentVariableOption = {\n    label: selectedVariable,\n    value: selectedVariable,\n  };\n\n  useEffect(() => {\n    setSelectedLogGroups(props.selectedLogGroups ?? []);\n  }, [props.selectedLogGroups]);\n\n  const toggleModal = () => {\n    setIsModalOpen(!isModalOpen);\n    if (isModalOpen) {\n    } else {\n      setSelectedLogGroups(selectedLogGroups);\n      searchFn(searchPhrase, searchAccountId);\n    }\n  };\n\n  const accountNameById = useMemo(() => {\n    const idsToNames: Record<string, string> = {};\n    accountOptions.forEach((a) => {\n      if (a.value && a.label) {\n        idsToNames[a.value] = a.label;\n      }\n    });\n    return idsToNames;\n  }, [accountOptions]);\n\n  const searchFn = async (searchTerm?: string, accountId?: string) => {\n    setIsLoading(true);\n    try {\n      const possibleLogGroups = await fetchLogGroups({\n        logGroupPattern: searchTerm,\n        accountId: accountId,\n      });\n      setSelectableLogGroups(\n        possibleLogGroups.map((lg) => ({\n          arn: lg.value.arn,\n          name: lg.value.name,\n          accountId: lg.accountId,\n          accountLabel: lg.accountId ? accountNameById[lg.accountId] : undefined,\n        }))\n      );\n    } catch (err) {\n      setSelectableLogGroups([]);\n    }\n    setIsLoading(false);\n  };\n\n  const handleSelectCheckbox = (row: LogGroup, isChecked: boolean) => {\n    if (isChecked) {\n      setSelectedLogGroups([...selectedLogGroups, row]);\n    } else {\n      setSelectedLogGroups(selectedLogGroups.filter((lg) => lg.arn !== row.arn));\n    }\n  };\n\n  const handleApply = () => {\n    onChange(selectedLogGroups);\n    toggleModal();\n  };\n\n  const handleCancel = () => {\n    setSelectedLogGroups(selectedLogGroups);\n    toggleModal();\n  };\n\n  return (\n    <>\n      <Modal className={styles.modal} title=\"Select log groups\" isOpen={isModalOpen} onDismiss={toggleModal}>\n        <div className={styles.logGroupSelectionArea}>\n          <div className={styles.searchField}>\n            <EditorField label=\"Log group name prefix\">\n              <Search\n                searchFn={(phrase) => {\n                  searchFn(phrase, searchAccountId);\n                  setSearchPhrase(phrase);\n                }}\n                searchPhrase={searchPhrase}\n              />\n            </EditorField>\n          </div>\n\n          <Account\n            onChange={(accountId?: string) => {\n              searchFn(searchPhrase, accountId);\n              setSearchAccountId(accountId || ALL_ACCOUNTS_OPTION.value);\n            }}\n            accountOptions={accountOptions}\n            accountId={searchAccountId}\n          />\n        </div>\n        <Space layout=\"block\" v={2} />\n        <div>\n          {!isLoading && selectableLogGroups.length >= 25 && (\n            <>\n              <div className={styles.limitLabel}>\n                <Icon name=\"info-circle\"></Icon>\n                Only the first 50 results can be shown. If you do not see an expected log group, try narrowing down your\n                search.\n                <p>\n                  A{' '}\n                  <a\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/cloudwatch_limits_cwl.html\"\n                  >\n                    maximum{' '}\n                  </a>{' '}\n                  of 50 Cloudwatch log groups can be queried at one time.\n                </p>\n              </div>\n              <Space layout=\"block\" v={1} />\n            </>\n          )}\n          <div className={styles.tableScroller}>\n            <table className={styles.table}>\n              <thead>\n                <tr className={styles.row}>\n                  <td className={styles.cell}>Log Group</td>\n                  {accountOptions.length > 0 && <td className={styles.cell}>Account label</td>}\n                  <td className={styles.cell}>Account ID</td>\n                </tr>\n              </thead>\n              <tbody>\n                {isLoading && (\n                  <tr className={styles.row}>\n                    <td className={styles.cell}>\n                      <LoadingPlaceholder text={'Loading...'} />\n                    </td>\n                  </tr>\n                )}\n                {!isLoading && selectableLogGroups.length === 0 && (\n                  <tr className={styles.row}>\n                    <td className={styles.cell}>No log groups found</td>\n                  </tr>\n                )}\n                {!isLoading &&\n                  selectableLogGroups.map((row) => (\n                    <tr className={styles.row} key={`${row.arn}`}>\n                      <td className={styles.cell}>\n                        <div className={styles.nestedEntry}>\n                          <Checkbox\n                            id={row.arn}\n                            onChange={(ev) => handleSelectCheckbox(row, ev.currentTarget.checked)}\n                            value={!!(row.arn && selectedLogGroups.some((lg) => lg.arn === row.arn))}\n                          />\n                          <Space layout=\"inline\" h={2} />\n                          <label className={styles.logGroupSearchResults} htmlFor={row.arn} title={row.name}>\n                            {row.name}\n                          </label>\n                        </div>\n                      </td>\n                      {accountOptions.length > 0 && <td className={styles.cell}>{row.accountLabel}</td>}\n                      <td className={styles.cell}>{row.accountId}</td>\n                    </tr>\n                  ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n        <Space layout=\"block\" v={2} />\n        <Label className={styles.logGroupCountLabel}>\n          {selectedLogGroupsCounter} log group{selectedLogGroupsCounter !== 1 && 's'} selected\n        </Label>\n        <Space layout=\"block\" v={1} />\n        <EditorField\n          label=\"Template variable\"\n          width={26}\n          tooltip=\"Optionally you can specify a single or multi-valued template variable. Select a variable separately or in conjunction with log groups.\"\n        >\n          <Select\n            isClearable\n            aria-label=\"Template variable\"\n            value={currentVariableOption}\n            allowCustomValue\n            options={variableOptions}\n            onChange={(option) => {\n              const newValues = selectedLogGroups.filter((lg) => !lg.name?.startsWith('$'));\n              if (option?.label) {\n                newValues.push({ name: option.label, arn: option.label });\n              }\n              setSelectedLogGroups(newValues);\n            }}\n          />\n        </EditorField>\n\n        <Modal.ButtonRow>\n          <Button onClick={handleCancel} variant=\"secondary\" type=\"button\" fill=\"outline\">\n            Cancel\n          </Button>\n          <Button onClick={handleApply} type=\"button\">\n            Add log groups\n          </Button>\n        </Modal.ButtonRow>\n      </Modal>\n\n      <div>\n        <Button\n          variant=\"secondary\"\n          onClick={() => {\n            try {\n              onBeforeOpen?.();\n              toggleModal();\n            } catch (err) {}\n          }}\n          type=\"button\"\n        >\n          Select log groups\n        </Button>\n      </div>\n    </>\n  );\n};\n","import { useEffect, useState } from 'react';\n\nimport { Button, ConfirmModal, useStyles2 } from '@grafana/ui';\n\nimport { LogGroup } from '../../../types';\nimport getStyles from '../../styles';\n\ntype CrossAccountLogsQueryProps = {\n  selectedLogGroups?: LogGroup[];\n  onChange: (selectedLogGroups: LogGroup[]) => void;\n  maxNoOfVisibleLogGroups?: number;\n};\n\nconst MAX_NO_OF_VISIBLE_LOG_GROUPS = 6;\n\nexport const SelectedLogGroups = ({\n  selectedLogGroups = [],\n  onChange,\n  maxNoOfVisibleLogGroups = MAX_NO_OF_VISIBLE_LOG_GROUPS,\n}: CrossAccountLogsQueryProps) => {\n  const styles = useStyles2(getStyles);\n  const [showConfirm, setShowConfirm] = useState(false);\n  const [visibleSelectecLogGroups, setVisibleSelectecLogGroups] = useState(\n    selectedLogGroups.slice(0, MAX_NO_OF_VISIBLE_LOG_GROUPS)\n  );\n\n  useEffect(() => {\n    setVisibleSelectecLogGroups(selectedLogGroups.slice(0, maxNoOfVisibleLogGroups));\n  }, [selectedLogGroups, maxNoOfVisibleLogGroups]);\n\n  return (\n    <>\n      <div className={styles.selectedLogGroupsContainer}>\n        {visibleSelectecLogGroups.map((lg) => (\n          <Button\n            key={lg.arn}\n            size=\"sm\"\n            variant=\"secondary\"\n            icon=\"times\"\n            className={styles.removeButton}\n            onClick={() => {\n              onChange(selectedLogGroups.filter((slg) => slg.arn !== lg.arn));\n            }}\n          >\n            {`${lg.name}${lg.accountLabel ? `(${lg.accountLabel})` : ''}`}\n          </Button>\n        ))}\n        {visibleSelectecLogGroups.length !== selectedLogGroups.length && (\n          <Button\n            size=\"sm\"\n            variant=\"secondary\"\n            icon=\"plus\"\n            fill=\"outline\"\n            className={styles.removeButton}\n            onClick={() => setVisibleSelectecLogGroups(selectedLogGroups)}\n          >\n            Show all\n          </Button>\n        )}\n        {selectedLogGroups.length > 0 && (\n          <Button\n            size=\"sm\"\n            variant=\"secondary\"\n            icon=\"times\"\n            fill=\"outline\"\n            className={styles.removeButton}\n            onClick={() => setShowConfirm(true)}\n          >\n            Clear selection\n          </Button>\n        )}\n      </div>\n      <ConfirmModal\n        isOpen={showConfirm}\n        title=\"Clear Log Group Selection\"\n        body=\"Are you sure you want to clear all log groups?\"\n        confirmText=\"Yes\"\n        dismissText=\"No\"\n        icon=\"exclamation-triangle\"\n        onConfirm={() => {\n          setShowConfirm(false);\n          onChange([]);\n        }}\n        onDismiss={() => setShowConfirm(false)}\n      />\n    </>\n  );\n};\n","import { css } from '@emotion/css';\nimport { useEffect, useState } from 'react';\n\nimport { config } from '@grafana/runtime';\n\nimport { CloudWatchDatasource } from '../../../datasource';\nimport { useAccountOptions } from '../../../hooks';\nimport { DescribeLogGroupsRequest } from '../../../resources/types';\nimport { LogGroup } from '../../../types';\nimport { isTemplateVariable } from '../../../utils/templateVariableUtils';\n\nimport { LegacyLogGroupSelection } from './LegacyLogGroupNamesSelection';\nimport { LogGroupsSelector } from './LogGroupsSelector';\nimport { SelectedLogGroups } from './SelectedLogGroups';\n\ntype Props = {\n  datasource: CloudWatchDatasource;\n  onChange: (logGroups: LogGroup[]) => void;\n  legacyLogGroupNames?: string[];\n  logGroups?: LogGroup[];\n  region: string;\n  maxNoOfVisibleLogGroups?: number;\n  onBeforeOpen?: () => void;\n};\n\nconst logGroupStyles = css({\n  display: 'flex',\n  flexDirection: 'column',\n  marginTop: 8,\n  '& div:first-child': {\n    marginBottom: 8,\n  },\n});\n// used in Config Editor and in Log Query Editor\nexport const LogGroupsField = ({\n  datasource,\n  onChange,\n  legacyLogGroupNames,\n  logGroups,\n  region,\n  maxNoOfVisibleLogGroups,\n  onBeforeOpen,\n}: Props) => {\n  const accountState = useAccountOptions(datasource?.resources, region);\n  const [loadingLogGroupsStarted, setLoadingLogGroupsStarted] = useState(false);\n\n  useEffect(() => {\n    // If log group names are stored in the query model, make a new DescribeLogGroups request for each log group to load the arn. Then update the query model.\n    if (datasource && !loadingLogGroupsStarted && !logGroups?.length && legacyLogGroupNames?.length) {\n      setLoadingLogGroupsStarted(true);\n\n      // there's no need to migrate variables, they will be taken care of in the logs query runner\n      const variables = legacyLogGroupNames.filter((lgn) => isTemplateVariable(datasource.resources.templateSrv, lgn));\n      const legacyLogGroupNameValues = legacyLogGroupNames.filter(\n        (lgn) => !isTemplateVariable(datasource.resources.templateSrv, lgn)\n      );\n\n      Promise.all(\n        legacyLogGroupNameValues.map((lg) =>\n          datasource.resources.getLogGroups({ region: region, logGroupNamePrefix: lg })\n        )\n      )\n        .then((results) => {\n          const logGroups = results.flatMap((r) =>\n            r.map((lg) => ({\n              arn: lg.value.arn,\n              name: lg.value.name,\n              accountId: lg.accountId,\n            }))\n          );\n\n          onChange([...logGroups, ...variables.map((v) => ({ name: v, arn: v }))]);\n        })\n        .catch((err) => {\n          console.error(err);\n        });\n    }\n  }, [datasource, legacyLogGroupNames, logGroups, onChange, region, loadingLogGroupsStarted]);\n\n  return (\n    <div className={logGroupStyles}>\n      <LogGroupsSelector\n        fetchLogGroups={async (params: Partial<DescribeLogGroupsRequest>) =>\n          datasource?.resources.getLogGroups({ region: region, ...params }) ?? []\n        }\n        onChange={onChange}\n        accountOptions={accountState.value}\n        selectedLogGroups={logGroups}\n        onBeforeOpen={onBeforeOpen}\n        variables={datasource?.getVariables()}\n      />\n      <SelectedLogGroups\n        selectedLogGroups={logGroups ?? []}\n        onChange={onChange}\n        maxNoOfVisibleLogGroups={maxNoOfVisibleLogGroups}\n      ></SelectedLogGroups>\n    </div>\n  );\n};\n\n// We had to bring back the Legacy Log Group selector to support due to an issue where GovClouds do not support the new Log Group API\n// when that is fixed we can get rid of this wrapper component and just export the LogGroupsField\ntype WrapperProps = {\n  datasource: CloudWatchDatasource;\n  onChange: (logGroups: LogGroup[]) => void;\n  legacyLogGroupNames?: string[]; // will need this for a while for migration purposes\n  logGroups?: LogGroup[];\n  region: string;\n  maxNoOfVisibleLogGroups?: number;\n  onBeforeOpen?: () => void;\n\n  // Legacy Props, can remove once we remove support for Legacy Log Group Selector\n  legacyOnChange: (logGroups: string[]) => void;\n};\n\nexport const LogGroupsFieldWrapper = (props: WrapperProps) => {\n  if (!config.featureToggles.cloudWatchCrossAccountQuerying) {\n    return (\n      <LegacyLogGroupSelection\n        {...props}\n        onChange={props.legacyOnChange}\n        legacyLogGroupNames={props.legacyLogGroupNames || []}\n      />\n    );\n  }\n\n  return <LogGroupsField {...props} />;\n};\n","import { DataSourceJsonData, DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { ConfigSection } from '@grafana/experimental';\nimport { Field, Switch } from '@grafana/ui';\n\nexport interface Props<T extends DataSourceJsonData>\n  extends Pick<DataSourcePluginOptionsEditorProps<T>, 'options' | 'onOptionsChange'> {}\n\nexport interface SecureSocksProxyConfig extends DataSourceJsonData {\n  enableSecureSocksProxy?: boolean;\n}\n\nexport function SecureSocksProxySettingsNewStyling<T extends SecureSocksProxyConfig>({\n  options,\n  onOptionsChange,\n}: Props<T>): JSX.Element {\n  return (\n    <ConfigSection title=\"Secure Socks Proxy\">\n      <Field label=\"Enabled\" description=\"Connect to this datasource via the secure socks proxy.\">\n        <Switch\n          value={options.jsonData.enableSecureSocksProxy ?? false}\n          onChange={(event) =>\n            onOptionsChange({\n              ...options,\n              jsonData: { ...options.jsonData, enableSecureSocksProxy: event.currentTarget.checked },\n            })\n          }\n        />\n      </Field>\n    </ConfigSection>\n  );\n}\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2, DataSourceInstanceSettings } from '@grafana/data';\nimport { ConfigSection } from '@grafana/experimental';\nimport { DataSourcePicker, getDataSourceSrv } from '@grafana/runtime';\nimport { Alert, Field, InlineField, useStyles2 } from '@grafana/ui';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  infoText: css`\n    padding-bottom: ${theme.spacing(2)};\n    color: ${theme.colors.text.secondary};\n  `,\n});\n\ninterface Props {\n  datasourceUid?: string;\n  onChange: (uid: string) => void;\n  newFormStyling?: boolean;\n}\n\nconst xRayDsId = 'grafana-x-ray-datasource';\n\nexport function XrayLinkConfig({ newFormStyling, datasourceUid, onChange }: Props) {\n  const hasXrayDatasource = Boolean(getDataSourceSrv().getList({ pluginId: xRayDsId }).length);\n\n  const styles = useStyles2(getStyles);\n\n  return newFormStyling ? (\n    <ConfigSection\n      title=\"X-ray trace link\"\n      description=\"Grafana will automatically create a link to a trace in X-ray data source if logs contain @xrayTraceId field\"\n    >\n      {!hasXrayDatasource && (\n        <Alert\n          title={\n            'There is no X-ray datasource to link to. First add an X-ray data source and then link it to Cloud Watch. '\n          }\n          severity=\"info\"\n        />\n      )}\n      <Field htmlFor=\"data-source-picker\" label=\"Data source\" description=\"X-ray data source containing traces\">\n        <DataSourcePicker\n          pluginId={xRayDsId}\n          onChange={(ds: DataSourceInstanceSettings) => onChange(ds.uid)}\n          current={datasourceUid}\n          noDefault={true}\n        />\n      </Field>\n    </ConfigSection>\n  ) : (\n    <>\n      <h3 className=\"page-heading\">X-ray trace link</h3>\n\n      <div className={styles.infoText}>\n        Grafana will automatically create a link to a trace in X-ray data source if logs contain @xrayTraceId field\n      </div>\n\n      {!hasXrayDatasource && (\n        <Alert\n          title={\n            'There is no X-ray datasource to link to. First add an X-ray data source and then link it to Cloud Watch. '\n          }\n          severity=\"info\"\n        />\n      )}\n\n      <div className=\"gf-form-group\">\n        <InlineField\n          htmlFor=\"data-source-picker\"\n          label=\"Data source\"\n          labelWidth={28}\n          tooltip=\"X-ray data source containing traces\"\n        >\n          <DataSourcePicker\n            pluginId={xRayDsId}\n            onChange={(ds: DataSourceInstanceSettings) => onChange(ds.uid)}\n            current={datasourceUid}\n            noDefault={true}\n          />\n        </InlineField>\n      </div>\n    </>\n  );\n}\n","import { css } from '@emotion/css';\nimport { useEffect, useState } from 'react';\nimport { useDebounce } from 'react-use';\n\nimport { ConnectionConfig } from '@grafana/aws-sdk';\nimport {\n  rangeUtil,\n  DataSourcePluginOptionsEditorProps,\n  onUpdateDatasourceJsonDataOption,\n  updateDatasourcePluginJsonDataOption,\n  DataSourceTestSucceeded,\n  DataSourceTestFailed,\n  GrafanaTheme2,\n} from '@grafana/data';\nimport { ConfigSection } from '@grafana/experimental';\nimport { getAppEvents, usePluginInteractionReporter, getDataSourceSrv, config } from '@grafana/runtime';\nimport { Alert, Input, FieldProps, Field, Divider, useStyles2 } from '@grafana/ui';\n\nimport { CloudWatchDatasource } from '../../datasource';\nimport { SelectableResourceValue } from '../../resources/types';\nimport { CloudWatchJsonData, CloudWatchSecureJsonData } from '../../types';\nimport { LogGroupsFieldWrapper } from '../shared/LogGroups/LogGroupsField';\n\nimport { SecureSocksProxySettingsNewStyling } from './SecureSocksProxySettingsNewStyling';\nimport { XrayLinkConfig } from './XrayLinkConfig';\n\nexport type Props = DataSourcePluginOptionsEditorProps<CloudWatchJsonData, CloudWatchSecureJsonData>;\n\ntype LogGroupFieldState = Pick<FieldProps, 'invalid'> & { error?: string | null };\n\nexport const ARN_DEPRECATION_WARNING_MESSAGE =\n  'Since grafana 7.3 authentication type \"arn\" is deprecated, falling back to default SDK provider';\nexport const CREDENTIALS_AUTHENTICATION_WARNING_MESSAGE =\n  'As of grafana 7.3 authentication type \"credentials\" should be used only for shared file credentials. \\\nIf you don\\'t have a credentials file, switch to the default SDK provider for extracting credentials \\\nfrom environment variables or IAM roles';\n\nexport const ConfigEditor = (props: Props) => {\n  const { options, onOptionsChange } = props;\n  const { defaultLogGroups, logsTimeout, defaultRegion, logGroups } = options.jsonData;\n  const datasource = useDatasource(props);\n  const logsTimeoutError = useTimoutValidation(logsTimeout);\n  const saved = useDataSourceSavedState(props);\n  const [logGroupFieldState, setLogGroupFieldState] = useState<LogGroupFieldState>({\n    invalid: false,\n  });\n\n  useEffect(() => setLogGroupFieldState({ invalid: false }), [props.options]);\n  const report = usePluginInteractionReporter();\n  useEffect(() => {\n    const successSubscription = getAppEvents().subscribe<DataSourceTestSucceeded>(DataSourceTestSucceeded, () => {\n      report('grafana_plugin_cloudwatch_save_succeeded', {\n        auth_type: options.jsonData.authType,\n      });\n    });\n    const failSubscription = getAppEvents().subscribe<DataSourceTestFailed>(DataSourceTestFailed, () => {\n      report('grafana_plugin_cloudwatch_save_failed', {\n        auth_type: options.jsonData.authType,\n      });\n    });\n    return () => {\n      successSubscription.unsubscribe();\n      failSubscription.unsubscribe();\n    };\n  }, [options.jsonData.authType, report]);\n  const [externalId, setExternalId] = useState('');\n  useEffect(() => {\n    if (!externalId && datasource) {\n      datasource.resources\n        .getExternalId()\n        .then(setExternalId)\n        .catch(() => setExternalId('Unable to fetch externalId'));\n    }\n  }, [datasource, externalId]);\n\n  const [warning, setWarning] = useState<string | null>(null);\n  const dismissWarning = () => {\n    setWarning(null);\n  };\n  useEffect(() => {\n    if (options.jsonData.authType === 'arn') {\n      setWarning(ARN_DEPRECATION_WARNING_MESSAGE);\n    } else if (options.jsonData.authType === 'credentials' && !options.jsonData.profile && !options.jsonData.database) {\n      setWarning(CREDENTIALS_AUTHENTICATION_WARNING_MESSAGE);\n    }\n  }, [options.jsonData.authType, options.jsonData.database, options.jsonData.profile]);\n\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.formStyles}>\n      {warning && (\n        <Alert title=\"CloudWatch Authentication\" severity=\"warning\" onRemove={dismissWarning}>\n          {warning}\n        </Alert>\n      )}\n      <ConnectionConfig\n        {...props}\n        loadRegions={\n          datasource &&\n          (async () => {\n            return datasource.resources\n              .getRegions()\n              .then((regions) =>\n                regions.reduce(\n                  (acc: string[], curr: SelectableResourceValue) => (curr.value ? [...acc, curr.value] : acc),\n                  []\n                )\n              );\n          })\n        }\n        externalId={externalId}\n      >\n        <Field label=\"Namespaces of Custom Metrics\">\n          <Input\n            placeholder=\"Namespace1,Namespace2\"\n            value={options.jsonData.customMetricsNamespaces || ''}\n            onChange={onUpdateDatasourceJsonDataOption(props, 'customMetricsNamespaces')}\n          />\n        </Field>\n      </ConnectionConfig>\n      {config.secureSocksDSProxyEnabled && (\n        <SecureSocksProxySettingsNewStyling options={options} onOptionsChange={onOptionsChange} />\n      )}\n      <Divider />\n      <ConfigSection title=\"Cloudwatch Logs\">\n        <Field\n          htmlFor=\"logsTimeout\"\n          label=\"Query Result Timeout\"\n          description='Grafana will poll for Cloudwatch Logs results every second until Done status is returned from AWS or timeout is exceeded, in which case Grafana will return an error. Note: For Alerting, the timeout from Grafana config file will take precedence. Must be a valid duration string, such as \"30m\" (default) \"30s\" \"2000ms\" etc.'\n          invalid={Boolean(logsTimeoutError)}\n        >\n          <Input\n            id=\"logsTimeout\"\n            width={60}\n            placeholder=\"30m\"\n            value={options.jsonData.logsTimeout || ''}\n            onChange={onUpdateDatasourceJsonDataOption(props, 'logsTimeout')}\n            title={'The timeout must be a valid duration string, such as \"15m\" \"30s\" \"2000ms\" etc.'}\n          />\n        </Field>\n        <Field\n          label=\"Default Log Groups\"\n          description=\"Optionally, specify default log groups for CloudWatch Logs queries.\"\n          {...logGroupFieldState}\n        >\n          {datasource ? (\n            <LogGroupsFieldWrapper\n              region={defaultRegion ?? ''}\n              datasource={datasource}\n              onBeforeOpen={() => {\n                if (saved) {\n                  return;\n                }\n\n                let error = 'You need to save the data source before adding log groups.';\n                if (props.options.version && props.options.version > 1) {\n                  error =\n                    'You have unsaved connection detail changes. You need to save the data source before adding log groups.';\n                }\n                setLogGroupFieldState({\n                  invalid: true,\n                  error,\n                });\n                throw new Error(error);\n              }}\n              legacyLogGroupNames={defaultLogGroups}\n              logGroups={logGroups}\n              onChange={(updatedLogGroups) => {\n                onOptionsChange({\n                  ...props.options,\n                  jsonData: {\n                    ...props.options.jsonData,\n                    logGroups: updatedLogGroups,\n                    defaultLogGroups: undefined,\n                  },\n                });\n              }}\n              maxNoOfVisibleLogGroups={2}\n              //legacy props\n              legacyOnChange={(logGroups) => {\n                updateDatasourcePluginJsonDataOption(props, 'defaultLogGroups', logGroups);\n              }}\n            />\n          ) : (\n            <></>\n          )}\n        </Field>\n      </ConfigSection>\n      <Divider />\n      <XrayLinkConfig\n        newFormStyling={true}\n        onChange={(uid) => updateDatasourcePluginJsonDataOption(props, 'tracingDatasourceUid', uid)}\n        datasourceUid={options.jsonData.tracingDatasourceUid}\n      />\n    </div>\n  );\n};\n\nfunction useDatasource(props: Props) {\n  const [datasource, setDatasource] = useState<CloudWatchDatasource>();\n\n  useEffect(() => {\n    if (props.options.version) {\n      getDataSourceSrv()\n        .get(props.options.name)\n        .then((datasource) => {\n          if (datasource instanceof CloudWatchDatasource) {\n            setDatasource(datasource);\n          }\n        });\n    }\n  }, [props.options.version, props.options.name]);\n\n  return datasource;\n}\n\nfunction useTimoutValidation(value: string | undefined) {\n  const [err, setErr] = useState<undefined | string>(undefined);\n  useDebounce(\n    () => {\n      if (value) {\n        try {\n          rangeUtil.describeInterval(value);\n          setErr(undefined);\n        } catch (e) {\n          if (e instanceof Error) {\n            setErr(e.toString());\n          }\n        }\n      } else {\n        setErr(undefined);\n      }\n    },\n    350,\n    [value]\n  );\n  return err;\n}\n\nfunction useDataSourceSavedState(props: Props) {\n  const [saved, setSaved] = useState(!!props.options.version && props.options.version > 1);\n  useEffect(() => {\n    setSaved(false);\n  }, [\n    props.options.jsonData.assumeRoleArn,\n    props.options.jsonData.authType,\n    props.options.jsonData.defaultRegion,\n    props.options.jsonData.endpoint,\n    props.options.jsonData.externalId,\n    props.options.jsonData.profile,\n    props.options.secureJsonData?.accessKey,\n    props.options.secureJsonData?.secretKey,\n  ]);\n\n  useEffect(() => {\n    props.options.version && props.options.version > 1 && setSaved(true);\n  }, [props.options.version]);\n\n  return saved;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  formStyles: css({\n    maxWidth: theme.spacing(50),\n  }),\n});\n","import { groupBy } from 'lodash';\nimport { useMemo } from 'react';\n\nimport { MetadataInspectorProps } from '@grafana/data';\n\nimport { CloudWatchDatasource } from '../../datasource';\nimport { CloudWatchQuery, CloudWatchJsonData } from '../../types';\n\nexport type Props = MetadataInspectorProps<CloudWatchDatasource, CloudWatchQuery, CloudWatchJsonData>;\n\n// To view: Query Editor in Dashboard -> Query Inspector -> Meta Data\nexport function MetaInspector({ data = [] }: Props) {\n  const rows = useMemo(() => groupBy(data, 'refId'), [data]);\n\n  return (\n    <>\n      <table className=\"filter-table form-inline\">\n        <thead>\n          <tr>\n            <th>RefId</th>\n            <th>Metric Data Query ID</th>\n            <th>Metric Data Query Expression</th>\n            <th>Period</th>\n            <th />\n          </tr>\n        </thead>\n        {Object.entries(rows).map(([refId, frames], idx) => {\n          if (!frames.length) {\n            return null;\n          }\n\n          const frame = frames[0];\n          const custom = frame.meta?.custom;\n          if (!custom) {\n            return null;\n          }\n\n          return (\n            <tbody key={idx}>\n              <tr>\n                <td>{refId}</td>\n                <td>{custom.id}</td>\n                <td>{frame.meta?.executedQueryString}</td>\n                <td>{custom.period}</td>\n              </tr>\n            </tbody>\n          );\n        })}\n      </table>\n    </>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport { usePrevious } from 'react-use';\n\nimport { PanelData } from '@grafana/data';\nimport { LinkButton } from '@grafana/ui';\n\nimport { AwsUrl, encodeUrl } from '../../../aws_url';\nimport { CloudWatchDatasource } from '../../../datasource';\nimport { CloudWatchLogsQuery } from '../../../types';\n\ninterface Props {\n  query: CloudWatchLogsQuery;\n  panelData?: PanelData;\n  datasource: CloudWatchDatasource;\n}\n\nexport function CloudWatchLink({ panelData, query, datasource }: Props) {\n  const [href, setHref] = useState('');\n  const prevPanelData = usePrevious<PanelData | undefined>(panelData);\n\n  useEffect(() => {\n    if (prevPanelData !== panelData && panelData?.request?.range) {\n      const arns = (query.logGroups ?? [])\n        .filter((group) => group?.arn)\n        .map((group) => (group.arn ?? '').replace(/:\\*$/, '')); // remove `:*` from end of arn\n      const logGroupNames = query.logGroupNames;\n      let sources = arns?.length ? arns : logGroupNames;\n\n      const range = panelData?.request?.range;\n      const start = range.from.toISOString();\n      const end = range.to.toISOString();\n\n      const urlProps: AwsUrl = {\n        end,\n        start,\n        timeType: 'ABSOLUTE',\n        tz: 'UTC',\n        editorString: query.expression ?? '',\n        isLiveTail: false,\n        source: sources ?? [],\n      };\n\n      setHref(encodeUrl(urlProps, datasource.resources.getActualRegion(query.region)));\n    }\n  }, [panelData, prevPanelData, datasource, query]);\n\n  return (\n    <LinkButton variant=\"secondary\" icon=\"share-alt\" href={href} target=\"_blank\" rel=\"noopener noreferrer\">\n      CloudWatch Logs Insights\n    </LinkButton>\n  );\n}\n","import type * as monacoType from 'monaco-editor/esm/vs/editor/editor.api';\n\nimport { Monaco } from '@grafana/ui';\n\nimport { Completeable } from './types';\n\nexport type LanguageDefinition = {\n  id: string;\n  extensions: string[];\n  aliases: string[];\n  mimetypes: string[];\n  loader: () => Promise<{\n    language: monacoType.languages.IMonarchLanguage;\n    conf: monacoType.languages.LanguageConfiguration;\n  }>;\n};\n\nexport const reRegisterCompletionProvider = async (\n  monaco: Monaco,\n  language: LanguageDefinition,\n  completionItemProvider: Completeable,\n  disposal?: monacoType.IDisposable\n) => {\n  const { id, loader } = language;\n  disposal?.dispose();\n  return loader().then((monarch) => {\n    return monaco.languages.registerCompletionItemProvider(\n      id,\n      completionItemProvider.getCompletionProvider(monaco, language)\n    );\n  });\n};\n\nexport const registerLanguage = async (\n  monaco: Monaco,\n  language: LanguageDefinition,\n  completionItemProvider: Completeable\n) => {\n  const { id, loader } = language;\n\n  const languages = monaco.languages.getLanguages();\n  if (languages.find((l) => l.id === id)) {\n    return;\n  }\n\n  monaco.languages.register({ id });\n  return loader().then((monarch) => {\n    monaco.languages.setMonarchTokensProvider(id, monarch.language);\n    monaco.languages.setLanguageConfiguration(id, monarch.conf);\n    return monaco.languages.registerCompletionItemProvider(\n      id,\n      completionItemProvider.getCompletionProvider(monaco, language)\n    );\n  });\n};\n","const byRE = /\\s+by\\s+/im;\n\n/**\n * groups look like this: (@a.foo)( as )(bar),\n * group 1 is the field, group 2 is \" as \" and group 3 is the alias\n * this regex will not advance past any non-identifier or whitespace characters, e.g. |\n */\nconst groupsRE = /([\\w$@().]+)(?:(\\s+as\\s+)([\\w$]+))?\\s*,?\\s*/iy;\n\nexport function getStatsGroups(query: string): string[] {\n  let groups = [];\n\n  // find \" by \"\n  let b;\n  if ((b = query.match(byRE))) {\n    // continue incremental scanning from there for groups & aliases\n    groupsRE.lastIndex = b.index! + b[0].length;\n\n    let g;\n    while ((g = groupsRE.exec(query))) {\n      groups.push(g[2] ? g[3] : g[1]);\n      groupsRE.lastIndex = g.index + g[0].length;\n    }\n  }\n\n  return groups;\n}\n","import { LanguageDefinition } from '../monarch/register';\n\nimport { CLOUDWATCH_PPL_LANGUAGE_DEFINITION_ID } from './language';\n\nconst cloudWatchPPLLanguageDefinition: LanguageDefinition = {\n  id: CLOUDWATCH_PPL_LANGUAGE_DEFINITION_ID,\n  extensions: [],\n  aliases: [],\n  mimetypes: [],\n  loader: () => import('./language'),\n};\nexport default cloudWatchPPLLanguageDefinition;\n","import type * as monacoType from 'monaco-editor/esm/vs/editor/editor.api';\nimport { useCallback, useRef } from 'react';\n\nimport { CodeEditor, Monaco } from '@grafana/ui';\nimport { CodeEditorProps } from '@grafana/ui/src/components/Monaco/types';\n\nimport { CloudWatchDatasource } from '../../../../datasource';\nimport language from '../../../../language/cloudwatch-ppl/definition';\nimport { TRIGGER_SUGGEST } from '../../../../language/monarch/commands';\nimport { registerLanguage, reRegisterCompletionProvider } from '../../../../language/monarch/register';\nimport { CloudWatchLogsQuery } from '../../../../types';\nimport { getStatsGroups } from '../../../../utils/query/getStatsGroups';\n\nexport const codeEditorCommonProps: Partial<CodeEditorProps> = {\n  height: '150px',\n  width: '100%',\n  showMiniMap: false,\n  monacoOptions: {\n    // without this setting, the auto-resize functionality causes an infinite loop, don't remove it!\n    scrollBeyondLastLine: false,\n\n    // These additional options are style focused and are a subset of those in the query editor in Prometheus\n    fontSize: 14,\n    lineNumbers: 'off',\n    renderLineHighlight: 'none',\n    scrollbar: {\n      vertical: 'hidden',\n      horizontal: 'hidden',\n    },\n    suggestFontSize: 12,\n    wordWrap: 'on',\n    padding: {\n      top: 6,\n    },\n  },\n};\ninterface LogsCodeEditorProps {\n  query: CloudWatchLogsQuery;\n  datasource: CloudWatchDatasource;\n  onChange: (query: CloudWatchLogsQuery) => void;\n}\nexport const PPLQueryEditor = (props: LogsCodeEditorProps) => {\n  const { query, datasource, onChange } = props;\n\n  const monacoRef = useRef<Monaco>();\n  const disposalRef = useRef<monacoType.IDisposable>();\n\n  const onFocus = useCallback(async () => {\n    disposalRef.current = await reRegisterCompletionProvider(\n      monacoRef.current!,\n      language,\n      datasource.pplCompletionItemProviderFunc({\n        region: query.region,\n        logGroups: query.logGroups,\n      }),\n      disposalRef.current\n    );\n  }, [datasource, query.logGroups, query.region]);\n\n  const onChangeQuery = useCallback(\n    (value: string) => {\n      const nextQuery = {\n        ...query,\n        expression: value,\n        statsGroups: getStatsGroups(value),\n      };\n      onChange(nextQuery);\n    },\n    [onChange, query]\n  );\n  const onEditorMount = useCallback(\n    (editor: monacoType.editor.IStandaloneCodeEditor, monaco: Monaco) => {\n      editor.onDidFocusEditorText(() => editor.trigger(TRIGGER_SUGGEST.id, TRIGGER_SUGGEST.id, {}));\n      editor.onDidChangeModelContent(() => {\n        const model = editor.getModel();\n        if (model?.getValue().trim() === '') {\n          editor.trigger(TRIGGER_SUGGEST.id, TRIGGER_SUGGEST.id, {});\n        }\n      });\n      editor.addCommand(monaco.KeyMod.Shift | monaco.KeyCode.Enter, () => {\n        const text = editor.getValue();\n        onChangeQuery(text);\n      });\n    },\n    [onChangeQuery]\n  );\n  const onBeforeEditorMount = async (monaco: Monaco) => {\n    monacoRef.current = monaco;\n    disposalRef.current = await registerLanguage(\n      monaco,\n      language,\n      datasource.pplCompletionItemProviderFunc({\n        region: query.region,\n        logGroups: query.logGroups,\n      })\n    );\n  };\n  return (\n    <CodeEditor\n      {...codeEditorCommonProps}\n      language={language.id}\n      value={query.expression ?? ''}\n      onBlur={(value: string) => {\n        if (value !== query.expression) {\n          onChangeQuery(value);\n        }\n        disposalRef.current?.dispose();\n      }}\n      onFocus={onFocus}\n      onBeforeEditorMount={onBeforeEditorMount}\n      onEditorDidMount={onEditorMount}\n      onEditorWillUnmount={() => disposalRef.current?.dispose()}\n    />\n  );\n};\n","import type * as monacoType from 'monaco-editor/esm/vs/editor/editor.api';\nimport { useCallback, useRef } from 'react';\n\nimport { CodeEditor, Monaco } from '@grafana/ui';\n\nimport { CloudWatchDatasource } from '../../../../datasource';\nimport language from '../../../../language/logs/definition';\nimport { TRIGGER_SUGGEST } from '../../../../language/monarch/commands';\nimport { registerLanguage, reRegisterCompletionProvider } from '../../../../language/monarch/register';\nimport { CloudWatchLogsQuery } from '../../../../types';\nimport { getStatsGroups } from '../../../../utils/query/getStatsGroups';\n\nimport { codeEditorCommonProps } from './PPLQueryEditor';\n\ninterface CodeEditorProps {\n  query: CloudWatchLogsQuery;\n  datasource: CloudWatchDatasource;\n  onChange: (query: CloudWatchLogsQuery) => void;\n}\nexport const LogsQLCodeEditor = (props: CodeEditorProps) => {\n  const { query, datasource, onChange } = props;\n\n  const monacoRef = useRef<Monaco>();\n  const disposalRef = useRef<monacoType.IDisposable>();\n\n  const onFocus = useCallback(async () => {\n    disposalRef.current = await reRegisterCompletionProvider(\n      monacoRef.current!,\n      language,\n      datasource.logsCompletionItemProviderFunc({\n        region: query.region,\n        logGroups: query.logGroups,\n      }),\n      disposalRef.current\n    );\n  }, [datasource, query.logGroups, query.region]);\n\n  const onChangeQuery = useCallback(\n    (value: string) => {\n      const nextQuery = {\n        ...query,\n        expression: value,\n        statsGroups: getStatsGroups(value),\n      };\n      onChange(nextQuery);\n    },\n    [onChange, query]\n  );\n  const onEditorMount = useCallback(\n    (editor: monacoType.editor.IStandaloneCodeEditor, monaco: Monaco) => {\n      editor.onDidFocusEditorText(() => editor.trigger(TRIGGER_SUGGEST.id, TRIGGER_SUGGEST.id, {}));\n      editor.onDidChangeModelContent(() => {\n        const model = editor.getModel();\n        if (model?.getValue().trim() === '') {\n          editor.trigger(TRIGGER_SUGGEST.id, TRIGGER_SUGGEST.id, {});\n        }\n      });\n      editor.addCommand(monaco.KeyMod.Shift | monaco.KeyCode.Enter, () => {\n        const text = editor.getValue();\n        onChangeQuery(text);\n      });\n    },\n    [onChangeQuery]\n  );\n  const onBeforeEditorMount = async (monaco: Monaco) => {\n    monacoRef.current = monaco;\n    disposalRef.current = await registerLanguage(\n      monaco,\n      language,\n      datasource.logsCompletionItemProviderFunc({\n        region: query.region,\n        logGroups: query.logGroups,\n      })\n    );\n  };\n  return (\n    <CodeEditor\n      {...codeEditorCommonProps}\n      language={language.id}\n      value={query.expression ?? ''}\n      onBlur={(value: string) => {\n        if (value !== query.expression) {\n          onChangeQuery(value);\n        }\n        disposalRef.current?.dispose();\n      }}\n      onFocus={onFocus}\n      onBeforeEditorMount={onBeforeEditorMount}\n      onEditorDidMount={onEditorMount}\n      onEditorWillUnmount={() => disposalRef.current?.dispose()}\n    />\n  );\n};\n","import type * as monacoType from 'monaco-editor/esm/vs/editor/editor.api';\nimport { useCallback, useRef } from 'react';\n\nimport { CodeEditor, Monaco } from '@grafana/ui';\n\nimport { CloudWatchDatasource } from '../../../../datasource';\nimport language from '../../../../language/cloudwatch-logs-sql/definition';\nimport { TRIGGER_SUGGEST } from '../../../../language/monarch/commands';\nimport { registerLanguage, reRegisterCompletionProvider } from '../../../../language/monarch/register';\nimport { CloudWatchLogsQuery } from '../../../../types';\nimport { getStatsGroups } from '../../../../utils/query/getStatsGroups';\n\nimport { codeEditorCommonProps } from './PPLQueryEditor';\n\ninterface SQLCodeEditorProps {\n  query: CloudWatchLogsQuery;\n  datasource: CloudWatchDatasource;\n  onChange: (query: CloudWatchLogsQuery) => void;\n}\nexport const SQLQueryEditor = (props: SQLCodeEditorProps) => {\n  const { query, datasource, onChange } = props;\n\n  const monacoRef = useRef<Monaco>();\n  const disposalRef = useRef<monacoType.IDisposable>();\n\n  const onFocus = useCallback(async () => {\n    disposalRef.current = await reRegisterCompletionProvider(\n      monacoRef.current!,\n      language,\n      datasource.logsSqlCompletionItemProviderFunc({\n        region: query.region,\n        logGroups: query.logGroups,\n      }),\n      disposalRef.current\n    );\n  }, [datasource, query.logGroups, query.region]);\n\n  const onChangeQuery = useCallback(\n    (value: string) => {\n      const nextQuery = {\n        ...query,\n        expression: value,\n        statsGroups: getStatsGroups(value),\n      };\n      onChange(nextQuery);\n    },\n    [onChange, query]\n  );\n  const onEditorMount = useCallback(\n    (editor: monacoType.editor.IStandaloneCodeEditor, monaco: Monaco) => {\n      editor.onDidFocusEditorText(() => editor.trigger(TRIGGER_SUGGEST.id, TRIGGER_SUGGEST.id, {}));\n      editor.onDidChangeModelContent(() => {\n        const model = editor.getModel();\n        if (model?.getValue().trim() === '') {\n          editor.trigger(TRIGGER_SUGGEST.id, TRIGGER_SUGGEST.id, {});\n        }\n      });\n      editor.addCommand(monaco.KeyMod.Shift | monaco.KeyCode.Enter, () => {\n        const text = editor.getValue();\n        onChangeQuery(text);\n      });\n    },\n    [onChangeQuery]\n  );\n  const onBeforeEditorMount = async (monaco: Monaco) => {\n    monacoRef.current = monaco;\n    disposalRef.current = await registerLanguage(\n      monaco,\n      language,\n      datasource.logsSqlCompletionItemProviderFunc({\n        region: query.region,\n        logGroups: query.logGroups,\n      })\n    );\n  };\n  return (\n    <CodeEditor\n      {...codeEditorCommonProps}\n      language={language.id}\n      value={query.expression ?? ''}\n      onBlur={(value: string) => {\n        if (value !== query.expression) {\n          onChangeQuery(value);\n        }\n        disposalRef.current?.dispose();\n      }}\n      onFocus={onFocus}\n      onBeforeEditorMount={onBeforeEditorMount}\n      onEditorDidMount={onEditorMount}\n      onEditorWillUnmount={() => disposalRef.current?.dispose()}\n    />\n  );\n};\n","import { css } from '@emotion/css';\nimport { ReactNode, useCallback } from 'react';\n\nimport { GrafanaTheme2, QueryEditorProps } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { CloudWatchDatasource } from '../../../datasource';\nimport { CloudWatchJsonData, CloudWatchLogsQuery, CloudWatchQuery, LogsQueryLanguage } from '../../../types';\nimport { LogGroupsFieldWrapper } from '../../shared/LogGroups/LogGroupsField';\n\nimport { LogsQLCodeEditor } from './code-editors/LogsQLCodeEditor';\nimport { PPLQueryEditor } from './code-editors/PPLQueryEditor';\nimport { SQLQueryEditor } from './code-editors/SQLCodeEditor';\n\nexport interface CloudWatchLogsQueryFieldProps\n  extends QueryEditorProps<CloudWatchDatasource, CloudWatchQuery, CloudWatchJsonData> {\n  ExtraFieldElement?: ReactNode;\n  query: CloudWatchLogsQuery;\n}\nexport const CloudWatchLogsQueryField = (props: CloudWatchLogsQueryFieldProps) => {\n  const { query, datasource, onChange, ExtraFieldElement } = props;\n\n  const styles = useStyles2(getStyles);\n\n  const onChangeLogs = useCallback(\n    async (query: CloudWatchLogsQuery) => {\n      onChange(query);\n    },\n    [onChange]\n  );\n\n  return (\n    <>\n      <LogGroupsFieldWrapper\n        region={query.region}\n        datasource={datasource}\n        legacyLogGroupNames={query.logGroupNames}\n        logGroups={query.logGroups}\n        onChange={(logGroups) => {\n          onChangeLogs({ ...query, logGroups, logGroupNames: undefined });\n        }}\n        //legacy props\n        legacyOnChange={(logGroupNames) => {\n          onChangeLogs({ ...query, logGroupNames });\n        }}\n      />\n      <div>\n        {getCodeEditor(query, datasource, onChange)}\n        <div className={styles.editor}>{ExtraFieldElement}</div>\n      </div>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  editor: css({\n    marginTop: theme.spacing(1),\n  }),\n});\n\nconst getCodeEditor = (\n  query: CloudWatchLogsQuery,\n  datasource: CloudWatchDatasource,\n  onChange: (value: CloudWatchLogsQuery) => void\n) => {\n  switch (query.queryLanguage) {\n    case LogsQueryLanguage.PPL:\n      return <PPLQueryEditor query={query} datasource={datasource} onChange={onChange} />;\n    case LogsQueryLanguage.SQL:\n      return <SQLQueryEditor query={query} datasource={datasource} onChange={onChange} />;\n    default:\n      return <LogsQLCodeEditor query={query} datasource={datasource} onChange={onChange} />;\n  }\n};\n","import { memo, useCallback, useEffect, useState } from 'react';\nimport { useEffectOnce } from 'react-use';\n\nimport { QueryEditorProps, SelectableValue } from '@grafana/data';\nimport { InlineSelect } from '@grafana/experimental';\n\nimport { CloudWatchDatasource } from '../../../datasource';\nimport { DEFAULT_CWLI_QUERY_STRING, DEFAULT_PPL_QUERY_STRING, DEFAULT_SQL_QUERY_STRING } from '../../../defaultQueries';\nimport { CloudWatchJsonData, CloudWatchLogsQuery, CloudWatchQuery, LogsQueryLanguage } from '../../../types';\n\nimport { CloudWatchLink } from './CloudWatchLink';\nimport { CloudWatchLogsQueryField } from './LogsQueryField';\n\ntype Props = QueryEditorProps<CloudWatchDatasource, CloudWatchQuery, CloudWatchJsonData> & {\n  query: CloudWatchLogsQuery;\n  extraHeaderElementLeft?: React.Dispatch<JSX.Element | undefined>;\n};\n\nconst logsQueryLanguageOptions: Array<SelectableValue<LogsQueryLanguage>> = [\n  { label: 'Logs Insights QL', value: LogsQueryLanguage.CWLI },\n  { label: 'OpenSearch SQL', value: LogsQueryLanguage.SQL },\n  { label: 'OpenSearch PPL', value: LogsQueryLanguage.PPL },\n];\n\nexport const CloudWatchLogsQueryEditor = memo(function CloudWatchLogsQueryEditor(props: Props) {\n  const { query, data, datasource, onChange, extraHeaderElementLeft } = props;\n\n  const [isQueryNew, setIsQueryNew] = useState(true);\n\n  const onQueryLanguageChange = useCallback(\n    (language: LogsQueryLanguage | undefined) => {\n      if (isQueryNew) {\n        onChange({\n          ...query,\n          expression: getDefaultQueryString(language),\n          queryLanguage: language ?? LogsQueryLanguage.CWLI,\n        });\n      } else {\n        onChange({ ...query, queryLanguage: language ?? LogsQueryLanguage.CWLI });\n      }\n    },\n    [isQueryNew, onChange, query]\n  );\n\n  // if the query has already been saved from before, we shouldn't replace it with a default one\n  useEffectOnce(() => {\n    if (query.expression) {\n      setIsQueryNew(false);\n    }\n  });\n\n  useEffect(() => {\n    // if it's a new query, we should replace it with a default one\n    if (isQueryNew && !query.expression) {\n      onChange({ ...query, expression: getDefaultQueryString(query.queryLanguage) });\n    }\n  }, [onChange, query, isQueryNew]);\n\n  useEffect(() => {\n    extraHeaderElementLeft?.(\n      <InlineSelect\n        label=\"Query language\"\n        value={query.queryLanguage || LogsQueryLanguage.CWLI}\n        options={logsQueryLanguageOptions}\n        onChange={({ value }) => {\n          onQueryLanguageChange(value);\n        }}\n      />\n    );\n\n    return () => {\n      extraHeaderElementLeft?.(undefined);\n    };\n  }, [extraHeaderElementLeft, onChange, onQueryLanguageChange, query]);\n\n  const onQueryStringChange = (query: CloudWatchQuery) => {\n    onChange(query);\n    setIsQueryNew(false);\n  };\n\n  return (\n    <CloudWatchLogsQueryField\n      {...props}\n      onChange={onQueryStringChange}\n      ExtraFieldElement={<CloudWatchLink query={query} panelData={data} datasource={datasource} />}\n    />\n  );\n});\n\nexport default CloudWatchLogsQueryEditor;\n\nconst getDefaultQueryString = (language: LogsQueryLanguage | undefined) => {\n  switch (language) {\n    case LogsQueryLanguage.SQL:\n      return DEFAULT_SQL_QUERY_STRING;\n    case LogsQueryLanguage.PPL:\n      return DEFAULT_PPL_QUERY_STRING;\n    case LogsQueryLanguage.CWLI:\n    default:\n      return DEFAULT_CWLI_QUERY_STRING;\n  }\n};\n","import { useEffect, useMemo } from 'react';\n\nimport { CloudWatchMetricsQuery } from '../types';\n\nimport { migrateMetricQuery } from './metricQueryMigrations';\n\n/**\n * Returns queries with migrations, and calls onChange function to notify if it changes\n */\nconst useMigratedMetricsQuery = (\n  query: CloudWatchMetricsQuery,\n  onChangeQuery: (newQuery: CloudWatchMetricsQuery) => void\n) => {\n  const migratedQUery = useMemo(() => migrateMetricQuery(query), [query]);\n\n  useEffect(() => {\n    if (migratedQUery !== query) {\n      onChangeQuery(migratedQUery);\n    }\n  }, [migratedQUery, query, onChangeQuery]);\n\n  return migratedQUery;\n};\n\nexport default useMigratedMetricsQuery;\n","import type { Monaco, monacoTypes } from '@grafana/ui';\n\nimport { linkedTokenBuilder } from '../monarch/linkedTokenBuilder';\nimport { LanguageDefinition } from '../monarch/register';\nimport { Completeable, CompletionItemPriority, TokenTypes } from '../monarch/types';\n\nimport { DYNAMIC_LABEL_PATTERNS } from './language';\n\ntype CompletionItem = monacoTypes.languages.CompletionItem;\n\nexport class DynamicLabelsCompletionItemProvider implements Completeable {\n  tokenTypes: TokenTypes;\n\n  constructor() {\n    this.tokenTypes = {\n      Parenthesis: 'delimiter.parenthesis.cloudwatch-dynamicLabels',\n      Whitespace: 'white.cloudwatch-dynamicLabels',\n      Keyword: 'keyword.cloudwatch-dynamicLabels',\n      Delimiter: 'delimiter.cloudwatch-dynamicLabels',\n      Operator: 'operator.cloudwatch-dynamicLabels',\n      Identifier: 'identifier.cloudwatch-dynamicLabels',\n      Type: 'type.cloudwatch-dynamicLabels',\n      Function: 'predefined.cloudwatch-dynamicLabels',\n      Number: 'number.cloudwatch-dynamicLabels',\n      String: 'string.cloudwatch-dynamicLabels',\n      Variable: 'variable.cloudwatch-dynamicLabels',\n      Comment: 'comment.cloudwatch-dynamicLabels',\n      Regexp: 'regexp.cloudwatch-dynamicLabels',\n    };\n  }\n\n  // called by registerLanguage and passed to monaco with registerCompletionItemProvider\n  // returns an object that implements https://microsoft.github.io/monaco-editor/api/interfaces/monaco.languages.CompletionItemProvider.html\n  getCompletionProvider(monaco: Monaco, languageDefinition: LanguageDefinition) {\n    return {\n      triggerCharacters: [' ', '$', ',', '(', \"'\"], // one of these characters indicates that it is time to look for a suggestion\n      provideCompletionItems: async (model: monacoTypes.editor.ITextModel, position: monacoTypes.IPosition) => {\n        const currentToken = linkedTokenBuilder(monaco, languageDefinition, model, position, this.tokenTypes);\n        const invalidRangeToken = currentToken?.isWhiteSpace() || currentToken?.isParenthesis();\n        const range =\n          invalidRangeToken || !currentToken?.range ? monaco.Range.fromPositions(position) : currentToken?.range;\n        const toCompletionItem = (value: string, rest: Partial<CompletionItem> = {}) => {\n          const item: CompletionItem = {\n            label: value,\n            insertText: value,\n            kind: monaco.languages.CompletionItemKind.Field,\n            range,\n            sortText: CompletionItemPriority.Medium,\n            ...rest,\n          };\n          return item;\n        };\n        let suggestions: CompletionItem[] = [];\n        const next = currentToken?.next;\n        if (!currentToken?.isFunction() && (!next || next.isWhiteSpace())) {\n          suggestions = DYNAMIC_LABEL_PATTERNS.map((val) => toCompletionItem(val));\n          // always insert suggestion for dimension value and allow user to complete pattern by providing the dimension name\n          suggestions.push(\n            toCompletionItem(\"${PROP('Dim.')}\", {\n              sortText: CompletionItemPriority.High,\n              insertText: `\\${PROP('Dim.$0')} `,\n              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n            })\n          );\n        }\n\n        return {\n          suggestions,\n        };\n      },\n    };\n  }\n}\n","import { LanguageDefinition } from '../monarch/register';\n\nconst cloudWatchDynamicLabelsLanguageDefinition: LanguageDefinition = {\n  id: 'cloudwatch-dynamicLabels',\n  extensions: [],\n  aliases: [],\n  mimetypes: [],\n  loader: () => import('./language'),\n};\nexport default cloudWatchDynamicLabelsLanguageDefinition;\n","import { css, cx } from '@emotion/css';\nimport type * as monacoType from 'monaco-editor/esm/vs/editor/editor.api';\nimport { useCallback, useRef } from 'react';\n\nimport { CodeEditor, getInputStyles, Monaco, useTheme2 } from '@grafana/ui';\n\nimport { DynamicLabelsCompletionItemProvider } from '../../../language/dynamic-labels/CompletionItemProvider';\nimport language from '../../../language/dynamic-labels/definition';\nimport { TRIGGER_SUGGEST } from '../../../language/monarch/commands';\nimport { registerLanguage } from '../../../language/monarch/register';\n\nconst dynamicLabelsCompletionItemProvider = new DynamicLabelsCompletionItemProvider();\n\nexport interface Props {\n  onChange: (query: string) => void;\n  label: string;\n  width: number;\n}\n\nexport function DynamicLabelsField({ label, width, onChange }: Props) {\n  const theme = useTheme2();\n  const styles = getInputStyles({ theme, width });\n  const containerRef = useRef<HTMLDivElement>(null);\n  const onEditorMount = useCallback(\n    (editor: monacoType.editor.IStandaloneCodeEditor, monaco: Monaco) => {\n      editor.onDidFocusEditorText(() => editor.trigger(TRIGGER_SUGGEST.id, TRIGGER_SUGGEST.id, {}));\n      editor.addCommand(monaco.KeyMod.Shift | monaco.KeyCode.Enter, () => {\n        const text = editor.getValue();\n        onChange(text);\n      });\n\n      const containerDiv = containerRef.current;\n      containerDiv !== null && editor.layout({ width: containerDiv.clientWidth, height: containerDiv.clientHeight });\n    },\n    [onChange]\n  );\n\n  return (\n    <div ref={containerRef} className={cx(styles.wrapper)}>\n      <CodeEditor\n        containerStyles={css`\n          border: 1px solid ${theme.colors.action.disabledBackground};\n          &:hover {\n            border-color: ${theme.components.input.borderColor};\n          }\n        `}\n        monacoOptions={{\n          // without this setting, the auto-resize functionality causes an infinite loop, don't remove it!\n          scrollBeyondLastLine: false,\n\n          // These additional options are style focused and are a subset of those in the query editor in Prometheus\n          fontSize: 14,\n          lineNumbers: 'off',\n          renderLineHighlight: 'none',\n          overviewRulerLanes: 0,\n          scrollbar: {\n            vertical: 'hidden',\n            horizontal: 'hidden',\n          },\n          suggestFontSize: 12,\n          padding: {\n            top: 6,\n          },\n        }}\n        language={language.id}\n        value={label}\n        onBlur={(value) => {\n          if (value !== label) {\n            onChange(value);\n          }\n        }}\n        onBeforeEditorMount={(monaco: Monaco) =>\n          registerLanguage(monaco, language, dynamicLabelsCompletionItemProvider)\n        }\n        onEditorDidMount={onEditorMount}\n      />\n    </div>\n  );\n}\n","import { LanguageDefinition } from '../monarch/register';\n\nconst cloudWatchMetricMathLanguageDefinition: LanguageDefinition = {\n  id: 'cloudwatch-MetricMath',\n  extensions: [],\n  aliases: [],\n  mimetypes: [],\n  loader: () => import('./language'),\n};\nexport default cloudWatchMetricMathLanguageDefinition;\n","import type * as monacoType from 'monaco-editor/esm/vs/editor/editor.api';\nimport { useCallback, useRef } from 'react';\nimport * as React from 'react';\n\nimport { CodeEditor, Monaco } from '@grafana/ui';\n\nimport { CloudWatchDatasource } from '../../../datasource';\nimport language from '../../../language/metric-math/definition';\nimport { TRIGGER_SUGGEST } from '../../../language/monarch/commands';\nimport { registerLanguage } from '../../../language/monarch/register';\n\nexport interface Props {\n  onChange: (query: string) => void;\n  expression: string;\n  datasource: CloudWatchDatasource;\n}\n\nexport function MathExpressionQueryField({ expression: query, onChange, datasource }: React.PropsWithChildren<Props>) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const onEditorMount = useCallback(\n    (editor: monacoType.editor.IStandaloneCodeEditor, monaco: Monaco) => {\n      editor.onDidFocusEditorText(() => editor.trigger(TRIGGER_SUGGEST.id, TRIGGER_SUGGEST.id, {}));\n      editor.addCommand(monaco.KeyMod.Shift | monaco.KeyCode.Enter, () => {\n        const text = editor.getValue();\n        onChange(text);\n      });\n\n      // auto resizes the editor to be the height of the content it holds\n      // this code comes from the Prometheus query editor.\n      // We may wish to consider abstracting it into the grafana/ui repo in the future\n      const updateElementHeight = () => {\n        const containerDiv = containerRef.current;\n        if (containerDiv !== null) {\n          const maxPixelHeight = Math.min(200, editor.getContentHeight());\n          const pixelHeight = Math.max(32, maxPixelHeight);\n          containerDiv.style.height = `${pixelHeight}px`;\n          containerDiv.style.width = '100%';\n          const pixelWidth = containerDiv.clientWidth;\n          editor.layout({ width: pixelWidth, height: pixelHeight });\n        }\n      };\n\n      editor.onDidContentSizeChange(updateElementHeight);\n      updateElementHeight();\n    },\n    [onChange]\n  );\n\n  return (\n    <div ref={containerRef}>\n      <CodeEditor\n        monacoOptions={{\n          // without this setting, the auto-resize functionality causes an infinite loop, don't remove it!\n          scrollBeyondLastLine: false,\n\n          // These additional options are style focused and are a subset of those in the query editor in Prometheus\n          fontSize: 14,\n          lineNumbers: 'off',\n          renderLineHighlight: 'none',\n          scrollbar: {\n            vertical: 'hidden',\n            horizontal: 'hidden',\n          },\n          suggestFontSize: 12,\n          wordWrap: 'on',\n          padding: {\n            top: 6,\n          },\n        }}\n        language={language.id}\n        value={query}\n        onBlur={(value) => {\n          if (value !== query) {\n            onChange(value);\n          }\n        }}\n        onBeforeEditorMount={(monaco: Monaco) =>\n          registerLanguage(monaco, language, datasource.metricMathCompletionItemProvider)\n        }\n        onEditorDidMount={onEditorMount}\n      />\n    </div>\n  );\n}\n","import { getTemplateSrv, TemplateSrv } from '@grafana/runtime';\n\nimport {\n  QueryEditorArrayExpression,\n  QueryEditorExpression,\n  QueryEditorExpressionType,\n  QueryEditorFunctionExpression,\n  QueryEditorOperatorExpression,\n  QueryEditorPropertyExpression,\n} from '../../expressions';\nimport { SQLExpression } from '../../types';\n\nconst isAccountIdDefined = (accountId: string | undefined): boolean => !!(accountId && accountId !== 'all');\n\nexport default class SQLGenerator {\n  constructor(private templateSrv: TemplateSrv = getTemplateSrv()) {}\n\n  expressionToSqlQuery(\n    { select, from, where, groupBy, orderBy, orderByDirection, limit }: SQLExpression,\n    accountId?: string\n  ): string | undefined {\n    if (!from || !select?.name || !select?.parameters?.length) {\n      return undefined;\n    }\n\n    let parts: string[] = [];\n    this.appendSelect(select, parts);\n    this.appendFrom(from, parts);\n    this.appendAccountId(parts, accountId);\n    this.appendWhere(where, parts, true, where?.expressions?.length ?? 0, accountId);\n    this.appendGroupBy(groupBy, parts);\n    this.appendOrderBy(orderBy, orderByDirection, parts);\n    this.appendLimit(limit, parts);\n\n    return parts.join(' ');\n  }\n\n  private appendSelect(select: QueryEditorFunctionExpression | undefined, parts: string[]) {\n    parts.push('SELECT');\n    this.appendFunction(select, parts);\n  }\n\n  private appendFrom(from: QueryEditorPropertyExpression | QueryEditorFunctionExpression | undefined, parts: string[]) {\n    parts.push('FROM');\n    from?.type === QueryEditorExpressionType.Function\n      ? this.appendFunction(from, parts)\n      : parts.push(this.formatValue(from?.property?.name ?? ''));\n  }\n\n  private appendAccountId(parts: string[], accountId?: string) {\n    if (!isAccountIdDefined(accountId)) {\n      return;\n    }\n    parts.push(`WHERE AWS.AccountId = '${accountId}'`);\n  }\n\n  private appendWhere(\n    filter: QueryEditorExpression | undefined,\n    parts: string[],\n    isTopLevelExpression: boolean,\n    topLevelExpressionsCount: number,\n    accountId?: string\n  ) {\n    if (!filter) {\n      return;\n    }\n\n    const hasChildExpressions = 'expressions' in filter && filter.expressions.length > 0;\n    if (isTopLevelExpression && hasChildExpressions) {\n      if (isAccountIdDefined(accountId)) {\n        parts.push('AND');\n      } else {\n        parts.push('WHERE');\n      }\n    }\n\n    if (filter.type === QueryEditorExpressionType.And) {\n      const andParts: string[] = [];\n      filter.expressions.map((exp) => this.appendWhere(exp, andParts, false, topLevelExpressionsCount));\n      if (andParts.length === 0) {\n        return;\n      }\n      const andCombined = andParts.join(' AND ');\n      const wrapInParentheses = !isTopLevelExpression && topLevelExpressionsCount > 1 && andParts.length > 1;\n      return parts.push(wrapInParentheses ? `(${andCombined})` : andCombined);\n    }\n\n    if (filter.type === QueryEditorExpressionType.Or) {\n      const orParts: string[] = [];\n      filter.expressions.map((exp) => this.appendWhere(exp, orParts, false, topLevelExpressionsCount));\n      if (orParts.length === 0) {\n        return;\n      }\n      const orCombined = orParts.join(' OR ');\n      const wrapInParentheses = !isTopLevelExpression && topLevelExpressionsCount > 1 && orParts.length > 1;\n      parts.push(wrapInParentheses ? `(${orCombined})` : orCombined);\n      return;\n    }\n\n    if (filter.type === QueryEditorExpressionType.Operator) {\n      return this.appendOperator(filter, parts);\n    }\n  }\n\n  private appendGroupBy(groupBy: QueryEditorArrayExpression | undefined, parts: string[]) {\n    const groupByParts: string[] = [];\n    for (const expression of groupBy?.expressions ?? []) {\n      if (expression?.type !== QueryEditorExpressionType.GroupBy || !expression.property.name) {\n        continue;\n      }\n      groupByParts.push(this.formatValue(expression.property.name));\n    }\n\n    if (groupByParts.length > 0) {\n      parts.push(`GROUP BY ${groupByParts.join(', ')}`);\n    }\n  }\n\n  private appendOrderBy(\n    orderBy: QueryEditorFunctionExpression | undefined,\n    orderByDirection: string | undefined,\n    parts: string[]\n  ) {\n    if (orderBy) {\n      parts.push('ORDER BY');\n      this.appendFunction(orderBy, parts);\n      parts.push(orderByDirection ?? 'ASC');\n    }\n  }\n\n  private appendLimit(limit: number | undefined, parts: string[]) {\n    limit && parts.push(`LIMIT ${limit}`);\n  }\n\n  private appendOperator(expression: QueryEditorOperatorExpression, parts: string[], prefix?: string) {\n    const { property, operator } = expression;\n\n    if (!property.name || !operator.name || !operator.value) {\n      return;\n    }\n\n    parts.push(`${this.formatValue(property.name)} ${operator.name} '${operator.value}'`);\n  }\n\n  private appendFunction(select: QueryEditorFunctionExpression | undefined, parts: string[]) {\n    if (!select?.name) {\n      return;\n    }\n\n    const params = (select.parameters ?? [])\n      .map((p) => p.name && this.formatValue(p.name))\n      .filter(Boolean)\n      .join(', ');\n\n    parts.push(`${select.name}(${params})`);\n  }\n\n  private formatValue(label: string): string {\n    const specialCharacters = /[/\\s\\.%-]/; // slash, space, dot, percent, or dash\n    const startsWithNumber = /^\\d/;\n\n    const interpolated = this.templateSrv.replace(label, {}, 'raw');\n    if (interpolated !== 'AWS.AccountId') {\n      // AWS.AccountId should never be in quotes\n      if (specialCharacters.test(interpolated) || startsWithNumber.test(interpolated)) {\n        return `\"${label}\"`;\n      }\n    }\n\n    return label;\n  }\n}\n","import { SelectableValue } from '@grafana/data';\n\nimport {\n  QueryEditorExpressionType,\n  QueryEditorPropertyType,\n  QueryEditorFunctionParameterExpression,\n  QueryEditorArrayExpression,\n  QueryEditorOperatorExpression,\n  QueryEditorGroupByExpression,\n} from '../../../../expressions';\nimport { SCHEMA } from '../../../../language/cloudwatch-sql/language';\nimport { SQLExpression, CloudWatchMetricsQuery, Dimensions } from '../../../../types';\n\nexport function getMetricNameFromExpression(selectExpression: SQLExpression['select']): string | undefined {\n  return selectExpression?.parameters?.[0].name;\n}\n\nexport function getNamespaceFromExpression(fromExpression: SQLExpression['from']): string | undefined {\n  // It's just a simple `FROM \"AWS/EC2\"` expression\n  if (fromExpression?.type === QueryEditorExpressionType.Property) {\n    return fromExpression.property.name; // PR TODO: do we need to test the type here? It can only be string?\n  }\n\n  // It's a more complicated `FROM SCHEMA(\"AWS/EC2\", ...)` expression\n  if (fromExpression?.type === QueryEditorExpressionType.Function) {\n    // TODO: do we need to test the name of the function?\n    return fromExpression.parameters?.[0].name;\n  }\n\n  return undefined;\n}\n\nexport function getSchemaLabelKeys(fromExpression: SQLExpression['from']): string[] | undefined {\n  // Schema label keys are second to n arguments in the from expression function\n  if (fromExpression?.type === QueryEditorExpressionType.Function && fromExpression?.parameters?.length) {\n    if (fromExpression?.parameters?.length <= 1) {\n      return [];\n    }\n\n    // ignore the first arg (the namespace)\n    const paramExpressions = fromExpression?.parameters.slice(1);\n    return paramExpressions.reduce<string[]>((acc, curr) => (curr.name ? [...acc, curr.name] : acc), []);\n  }\n\n  return undefined;\n}\n\nexport function isUsingWithSchema(fromExpression: SQLExpression['from']): boolean {\n  return fromExpression?.type === QueryEditorExpressionType.Function && fromExpression.name === SCHEMA;\n}\n\n/** Given a partial operator expression, return a non-partial if it's valid, or undefined */\nexport function sanitizeOperator(\n  expression: Partial<QueryEditorOperatorExpression>\n): QueryEditorOperatorExpression | undefined {\n  const key = expression.property?.name;\n  const value = expression.operator?.value;\n  const operator = expression.operator?.name;\n\n  if (key && value && operator) {\n    return {\n      type: QueryEditorExpressionType.Operator,\n      property: {\n        type: QueryEditorPropertyType.String,\n        name: key,\n      },\n      operator: {\n        value,\n        name: operator,\n      },\n    };\n  }\n\n  return undefined;\n}\n\n/**\n * Given an array of Expressions, flattens them to the leaf Operator expressions.\n * Note, this loses context of any nested ANDs or ORs, so will not be useful once we support nested conditions */\nfunction flattenOperatorExpressions(\n  expressions: QueryEditorArrayExpression['expressions']\n): QueryEditorOperatorExpression[] {\n  return expressions.flatMap((expression) => {\n    if (expression.type === QueryEditorExpressionType.Operator) {\n      return expression;\n    }\n\n    if (expression.type === QueryEditorExpressionType.And || expression.type === QueryEditorExpressionType.Or) {\n      return flattenOperatorExpressions(expression.expressions);\n    }\n\n    // Expressions that we don't expect to find in the WHERE filter will be ignored\n    return [];\n  });\n}\n\n/** Returns a flattened list of WHERE filters, losing all context of nested filters or AND vs OR. Not suitable\n * if the UI supports nested conditions\n */\nexport function getFlattenedFilters(sql: SQLExpression): QueryEditorOperatorExpression[] {\n  const where = sql.where;\n  return flattenOperatorExpressions(where?.expressions ?? []);\n}\n\n/**\n * Given an array of Expressions, flattens them to the leaf Operator expressions.\n * Note, this loses context of any nested ANDs or ORs, so will not be useful once we support nested conditions */\nfunction flattenGroupByExpressions(\n  expressions: QueryEditorArrayExpression['expressions']\n): QueryEditorGroupByExpression[] {\n  return expressions.flatMap((expression) => {\n    if (expression.type === QueryEditorExpressionType.GroupBy) {\n      return expression;\n    }\n\n    // Expressions that we don't expect to find in the GROUP BY will be ignored\n    return [];\n  });\n}\n\n/** Returns a flattened list of GROUP BY expressions, losing all context of nested filters or AND vs OR.\n */\nexport function getFlattenedGroupBys(sql: SQLExpression): QueryEditorGroupByExpression[] {\n  const groupBy = sql.groupBy;\n  return flattenGroupByExpressions(groupBy?.expressions ?? []);\n}\n\n/** Converts a string array to a Dimensions object with null values  **/\nexport function stringArrayToDimensions(arr: string[]): Dimensions {\n  return arr.reduce((acc, curr) => {\n    if (curr) {\n      return { ...acc, [curr]: null };\n    }\n    return acc;\n  }, {});\n}\n\nexport function setSql(query: CloudWatchMetricsQuery, sql: SQLExpression): CloudWatchMetricsQuery {\n  return {\n    ...query,\n    sql: {\n      ...(query.sql ?? {}),\n      ...sql,\n    },\n  };\n}\n\nexport function setNamespace(query: CloudWatchMetricsQuery, namespace: string | undefined): CloudWatchMetricsQuery {\n  const sql = query.sql ?? {};\n  //updating `namespace` props for CloudWatchMetricsQuery\n  query.namespace = namespace ? namespace : '';\n\n  if (namespace === undefined) {\n    return setSql(query, {\n      from: undefined,\n    });\n  }\n\n  // It's just a simple `FROM \"AWS/EC2\"` expression\n  if (!sql.from || sql.from.type === QueryEditorExpressionType.Property) {\n    return setSql(query, {\n      from: {\n        type: QueryEditorExpressionType.Property,\n        property: {\n          type: QueryEditorPropertyType.String,\n          name: namespace,\n        },\n      },\n    });\n  }\n\n  // It's a more complicated `FROM SCHEMA(\"AWS/EC2\", ...)` expression\n  if (sql.from.type === QueryEditorExpressionType.Function) {\n    const namespaceParam: QueryEditorFunctionParameterExpression = {\n      type: QueryEditorExpressionType.FunctionParameter,\n      name: namespace,\n    };\n\n    const labelKeys = (sql.from.parameters ?? []).slice(1);\n\n    return setSql(query, {\n      from: {\n        type: QueryEditorExpressionType.Function,\n        name: SCHEMA,\n        parameters: [namespaceParam, ...labelKeys],\n      },\n    });\n  }\n\n  // TODO: do the with schema bit\n  return query;\n}\n\nexport function setSchemaLabels(\n  query: CloudWatchMetricsQuery,\n  schemaLabels: Array<SelectableValue<string>> | SelectableValue<string>\n): CloudWatchMetricsQuery {\n  const sql = query.sql ?? {};\n  schemaLabels = Array.isArray(schemaLabels) ? schemaLabels.map((l) => l.value) : [schemaLabels.value];\n\n  // schema labels are the second parameter in the schema function. `... FROM SCHEMA(\"AWS/EC2\", label1, label2 ...)`\n  if (sql.from?.type === QueryEditorExpressionType.Function && sql.from.parameters?.length) {\n    const parameters: QueryEditorFunctionParameterExpression[] = (schemaLabels ?? []).map((label: string) => ({\n      type: QueryEditorExpressionType.FunctionParameter,\n      name: label,\n    }));\n    const namespaceParam = (sql.from.parameters ?? [])[0];\n\n    return setSql(query, {\n      from: {\n        type: QueryEditorExpressionType.Function,\n        name: SCHEMA,\n        parameters: [namespaceParam, ...parameters],\n      },\n    });\n  }\n\n  return query;\n}\n\nexport function setMetricName(query: CloudWatchMetricsQuery, metricName: string): CloudWatchMetricsQuery {\n  const param: QueryEditorFunctionParameterExpression = {\n    type: QueryEditorExpressionType.FunctionParameter,\n    name: metricName,\n  };\n\n  return setSql(\n    { ...query, metricName },\n    {\n      select: {\n        type: QueryEditorExpressionType.Function,\n        ...(query.sql?.select ?? {}),\n        parameters: [param],\n      },\n    }\n  );\n}\n\nexport function removeMetricName(query: CloudWatchMetricsQuery): CloudWatchMetricsQuery {\n  const queryWithNoParams = { ...query };\n  delete queryWithNoParams.sql?.select?.parameters;\n\n  return queryWithNoParams;\n}\n\nexport function setAggregation(query: CloudWatchMetricsQuery, aggregation: string): CloudWatchMetricsQuery {\n  return setSql(query, {\n    select: {\n      type: QueryEditorExpressionType.Function,\n      ...(query.sql?.select ?? {}),\n      name: aggregation,\n    },\n  });\n}\n\nexport function setOrderBy(query: CloudWatchMetricsQuery, aggregation: string): CloudWatchMetricsQuery {\n  return setSql(query, {\n    orderBy: {\n      type: QueryEditorExpressionType.Function,\n      name: aggregation,\n    },\n  });\n}\n\nexport function setWithSchema(query: CloudWatchMetricsQuery, withSchema: boolean): CloudWatchMetricsQuery {\n  const namespace = getNamespaceFromExpression((query.sql ?? {}).from);\n\n  if (withSchema) {\n    const namespaceParam: QueryEditorFunctionParameterExpression = {\n      type: QueryEditorExpressionType.FunctionParameter,\n      name: namespace,\n    };\n\n    return setSql(query, {\n      from: {\n        type: QueryEditorExpressionType.Function,\n        name: SCHEMA,\n        parameters: [namespaceParam],\n      },\n    });\n  }\n\n  return setSql(query, {\n    from: {\n      type: QueryEditorExpressionType.Property,\n      property: {\n        type: QueryEditorPropertyType.String,\n        name: namespace,\n      },\n    },\n  });\n}\n\n/** Sets the left hand side (InstanceId) in an OperatorExpression\n * Accepts a partial expression to use in an editor\n */\nexport function setOperatorExpressionProperty(\n  expression: Partial<QueryEditorOperatorExpression>,\n  property: string\n): QueryEditorOperatorExpression {\n  return {\n    type: QueryEditorExpressionType.Operator,\n    property: {\n      type: QueryEditorPropertyType.String,\n      name: property,\n    },\n    operator: expression.operator ?? {},\n  };\n}\n\n/** Sets the operator (\"==\") in an OperatorExpression\n * Accepts a partial expression to use in an editor\n */\nexport function setOperatorExpressionName(\n  expression: Partial<QueryEditorOperatorExpression>,\n  name: string\n): QueryEditorOperatorExpression {\n  return {\n    type: QueryEditorExpressionType.Operator,\n    property: expression.property ?? {\n      type: QueryEditorPropertyType.String,\n    },\n    operator: {\n      ...expression.operator,\n      name,\n    },\n  };\n}\n\n/** Sets the right hand side (\"i-abc123445\") in an OperatorExpression\n * Accepts a partial expression to use in an editor\n */\nexport function setOperatorExpressionValue(\n  expression: Partial<QueryEditorOperatorExpression>,\n  value: string\n): QueryEditorOperatorExpression {\n  return {\n    type: QueryEditorExpressionType.Operator,\n    property: expression.property ?? {\n      type: QueryEditorPropertyType.String,\n    },\n    operator: {\n      ...expression.operator,\n      value,\n    },\n  };\n}\n\n/** Creates a GroupByExpression for a specified field\n */\nexport function setGroupByField(field: string): QueryEditorGroupByExpression {\n  return {\n    type: QueryEditorExpressionType.GroupBy,\n    property: {\n      type: QueryEditorPropertyType.String,\n      name: field,\n    },\n  };\n}\n","import { useEffect, useMemo } from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { EditorField, EditorFieldGroup, EditorSwitch } from '@grafana/experimental';\nimport { config } from '@grafana/runtime';\nimport { Select } from '@grafana/ui';\n\nimport { CloudWatchDatasource } from '../../../../datasource';\nimport { useAccountOptions, useDimensionKeys, useMetrics, useNamespaces } from '../../../../hooks';\nimport { STATISTICS } from '../../../../language/cloudwatch-sql/language';\nimport { CloudWatchMetricsQuery } from '../../../../types';\nimport { appendTemplateVariables } from '../../../../utils/utils';\nimport { Account } from '../../../shared/Account';\n\nimport {\n  getMetricNameFromExpression,\n  getNamespaceFromExpression,\n  getSchemaLabelKeys as getSchemaLabels,\n  isUsingWithSchema,\n  removeMetricName,\n  setAggregation,\n  setMetricName,\n  setNamespace,\n  setSchemaLabels,\n  setWithSchema,\n  stringArrayToDimensions,\n} from './utils';\n\ninterface SQLBuilderSelectRowProps {\n  query: CloudWatchMetricsQuery;\n  datasource: CloudWatchDatasource;\n  onQueryChange: (query: CloudWatchMetricsQuery) => void;\n}\n\nconst AGGREGATIONS = STATISTICS.map(toOption);\n\nconst SQLBuilderSelectRow = ({ datasource, query, onQueryChange }: SQLBuilderSelectRowProps) => {\n  const sql = query.sql ?? {};\n\n  const aggregation = sql.select?.name;\n  useEffect(() => {\n    if (!aggregation) {\n      onQueryChange(setAggregation(query, STATISTICS[0]));\n    }\n  }, [aggregation, onQueryChange, query]);\n\n  const metricName = getMetricNameFromExpression(sql.select);\n  const namespace = getNamespaceFromExpression(sql.from);\n  const schemaLabels = getSchemaLabels(sql.from);\n  const withSchemaEnabled = isUsingWithSchema(sql.from);\n\n  const namespaceOptions = useNamespaces(datasource);\n  const metricOptions = useMetrics(datasource, {\n    region: query.region,\n    namespace,\n    ...(config.featureToggles.cloudWatchCrossAccountQuerying &&\n    config.featureToggles.cloudwatchMetricInsightsCrossAccount\n      ? { accountId: query.accountId }\n      : {}),\n  });\n  const existingFilters = useMemo(() => stringArrayToDimensions(schemaLabels ?? []), [schemaLabels]);\n  const unusedDimensionKeys = useDimensionKeys(datasource, {\n    region: query.region,\n    namespace,\n    metricName,\n    dimensionFilters: existingFilters,\n    ...(config.featureToggles.cloudWatchCrossAccountQuerying &&\n    config.featureToggles.cloudwatchMetricInsightsCrossAccount\n      ? { accountId: query.accountId }\n      : {}),\n  });\n  const dimensionKeys = useMemo(\n    () => (schemaLabels?.length ? [...unusedDimensionKeys, ...schemaLabels.map(toOption)] : unusedDimensionKeys),\n    [unusedDimensionKeys, schemaLabels]\n  );\n\n  const onNamespaceChange = async (query: CloudWatchMetricsQuery) => {\n    const validatedQuery = await validateMetricName(query);\n    onQueryChange(validatedQuery);\n  };\n\n  const validateMetricName = async (query: CloudWatchMetricsQuery) => {\n    let { region, sql, namespace } = query;\n    await datasource.resources.getMetrics({ namespace, region }).then((result: Array<SelectableValue<string>>) => {\n      if (!result.some((metric) => metric.value === metricName)) {\n        sql = removeMetricName(query).sql;\n      }\n    });\n    return { ...query, sql };\n  };\n\n  const accountState = useAccountOptions(datasource.resources, query.region);\n  return (\n    <>\n      <EditorFieldGroup>\n        {config.featureToggles.cloudWatchCrossAccountQuerying &&\n          config.featureToggles.cloudwatchMetricInsightsCrossAccount && (\n            <Account\n              accountId={query.accountId}\n              accountOptions={accountState.value || []}\n              onChange={(accountId) => {\n                onQueryChange({\n                  ...query,\n                  accountId,\n                });\n              }}\n            />\n          )}\n        <EditorField label=\"Namespace\" width={16}>\n          <Select\n            aria-label=\"Namespace\"\n            value={namespace ? toOption(namespace) : null}\n            inputId={`${query.refId}-cloudwatch-sql-namespace`}\n            options={namespaceOptions}\n            allowCustomValue\n            onChange={({ value }) => value && onNamespaceChange(setNamespace(query, value))}\n          />\n        </EditorField>\n\n        <EditorField label=\"With schema\">\n          <EditorSwitch\n            id={`${query.refId}-cloudwatch-sql-withSchema`}\n            value={withSchemaEnabled}\n            onChange={(ev) =>\n              ev.target instanceof HTMLInputElement && onQueryChange(setWithSchema(query, ev.target.checked))\n            }\n          />\n        </EditorField>\n\n        {withSchemaEnabled && (\n          <EditorField label=\"Schema labels\" disabled={!namespace}>\n            <Select\n              id={`${query.refId}-cloudwatch-sql-schema-label-keys`}\n              width=\"auto\"\n              isMulti={true}\n              value={schemaLabels ? schemaLabels.map(toOption) : null}\n              options={dimensionKeys}\n              allowCustomValue\n              onChange={(item) => item && onQueryChange(setSchemaLabels(query, item))}\n            />\n          </EditorField>\n        )}\n      </EditorFieldGroup>\n\n      <EditorFieldGroup>\n        <EditorField label=\"Metric name\" width={16}>\n          <Select\n            aria-label=\"Metric name\"\n            value={metricName ? toOption(metricName) : null}\n            options={metricOptions}\n            allowCustomValue\n            onChange={({ value }) => value && onQueryChange(setMetricName(query, value))}\n          />\n        </EditorField>\n\n        <EditorField label=\"Aggregation\" width={16}>\n          <Select\n            aria-label=\"Aggregation\"\n            value={aggregation ? toOption(aggregation) : null}\n            options={appendTemplateVariables(datasource, AGGREGATIONS)}\n            onChange={({ value }) => value && onQueryChange(setAggregation(query, value))}\n          />\n        </EditorField>\n      </EditorFieldGroup>\n    </>\n  );\n};\n\nexport default SQLBuilderSelectRow;\n","import { css } from '@emotion/css';\nimport { useMemo, useState } from 'react';\nimport { useAsyncFn } from 'react-use';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { AccessoryButton, EditorList, InputGroup } from '@grafana/experimental';\nimport { config } from '@grafana/runtime';\nimport { Alert, Select, useStyles2 } from '@grafana/ui';\n\nimport { CloudWatchDatasource } from '../../../../datasource';\nimport {\n  QueryEditorExpressionType,\n  QueryEditorOperatorExpression,\n  QueryEditorPropertyType,\n} from '../../../../expressions';\nimport { useDimensionKeys, useEnsureVariableHasSingleSelection } from '../../../../hooks';\nimport { COMPARISON_OPERATORS, EQUALS } from '../../../../language/cloudwatch-sql/language';\nimport { CloudWatchMetricsQuery } from '../../../../types';\nimport { appendTemplateVariables } from '../../../../utils/utils';\n\nimport {\n  getFlattenedFilters,\n  getMetricNameFromExpression,\n  getNamespaceFromExpression,\n  sanitizeOperator,\n  setOperatorExpressionName,\n  setOperatorExpressionProperty,\n  setOperatorExpressionValue,\n  setSql,\n} from './utils';\n\ninterface SQLFilterProps {\n  query: CloudWatchMetricsQuery;\n  datasource: CloudWatchDatasource;\n  onQueryChange: (query: CloudWatchMetricsQuery) => void;\n}\n\nconst OPERATORS = COMPARISON_OPERATORS.map(toOption);\n\nconst SQLFilter = ({ query, onQueryChange, datasource }: SQLFilterProps) => {\n  const filtersFromQuery = useMemo(() => getFlattenedFilters(query.sql ?? {}), [query.sql]);\n  const [filters, setFilters] = useState<QueryEditorOperatorExpression[]>(filtersFromQuery);\n\n  const onChange = (newItems: Array<Partial<QueryEditorOperatorExpression>>) => {\n    // As new (empty object) items come in, with need to make sure they have the correct type\n    const cleaned = newItems.map(\n      (v): QueryEditorOperatorExpression => ({\n        type: QueryEditorExpressionType.Operator,\n        property: v.property ?? { type: QueryEditorPropertyType.String },\n        operator: v.operator ?? {\n          name: EQUALS,\n        },\n      })\n    );\n\n    setFilters(cleaned);\n\n    // Only save valid and complete filters into the query state\n    const validExpressions: QueryEditorOperatorExpression[] = [];\n    for (const operatorExpression of cleaned) {\n      const validated = sanitizeOperator(operatorExpression);\n      if (validated) {\n        validExpressions.push(validated);\n      }\n    }\n\n    const where = validExpressions.length\n      ? {\n          type: QueryEditorExpressionType.And as const,\n          expressions: validExpressions,\n        }\n      : undefined;\n\n    onQueryChange(setSql(query, { where }));\n  };\n\n  return <EditorList items={filters} onChange={onChange} renderItem={makeRenderFilter(datasource, query)} />;\n};\n\n// Making component functions in the render body is not recommended, but it works for now.\n// If some problems arise (perhaps with state going missing), consider this to be a potential cause\nfunction makeRenderFilter(datasource: CloudWatchDatasource, query: CloudWatchMetricsQuery) {\n  function renderFilter(\n    item: Partial<QueryEditorOperatorExpression>,\n    onChange: (item: QueryEditorOperatorExpression) => void,\n    onDelete: () => void\n  ) {\n    return <FilterItem datasource={datasource} query={query} filter={item} onChange={onChange} onDelete={onDelete} />;\n  }\n\n  return renderFilter;\n}\n\nexport default SQLFilter;\n\ninterface FilterItemProps {\n  datasource: CloudWatchDatasource;\n  query: CloudWatchMetricsQuery;\n  filter: Partial<QueryEditorOperatorExpression>;\n  onChange: (item: QueryEditorOperatorExpression) => void;\n  onDelete: () => void;\n}\n\nconst FilterItem = (props: FilterItemProps) => {\n  const { datasource, query, filter, onChange, onDelete } = props;\n  const styles = useStyles2(getStyles);\n  const sql = query.sql ?? {};\n\n  const namespace = getNamespaceFromExpression(sql.from);\n  const metricName = getMetricNameFromExpression(sql.select);\n\n  const dimensionKeys = useDimensionKeys(datasource, {\n    region: query.region,\n    namespace,\n    metricName,\n    ...(config.featureToggles.cloudWatchCrossAccountQuerying &&\n    config.featureToggles.cloudwatchMetricInsightsCrossAccount\n      ? { accountId: query.accountId }\n      : {}),\n  });\n\n  const loadDimensionValues = async () => {\n    if (!filter.property?.name || !namespace) {\n      return [];\n    }\n\n    return datasource.resources\n      .getDimensionValues({\n        region: query.region,\n        namespace,\n        metricName,\n        dimensionKey: filter.property.name,\n        ...(config.featureToggles.cloudWatchCrossAccountQuerying &&\n        config.featureToggles.cloudwatchMetricInsightsCrossAccount\n          ? { accountId: query.accountId }\n          : {}),\n      })\n      .then((result: Array<SelectableValue<string>>) => {\n        return appendTemplateVariables(datasource, result);\n      });\n  };\n\n  const [state, loadOptions] = useAsyncFn(loadDimensionValues, [\n    query.region,\n    namespace,\n    metricName,\n    filter.property?.name,\n  ]);\n\n  const propertyNameError = useEnsureVariableHasSingleSelection(datasource, filter.property?.name);\n  const operatorValueError = useEnsureVariableHasSingleSelection(\n    datasource,\n    typeof filter.operator?.value === 'string' ? filter.operator?.value : undefined\n  );\n\n  return (\n    <div className={styles.container}>\n      <InputGroup>\n        <Select\n          width=\"auto\"\n          value={filter.property?.name ? toOption(filter.property?.name) : null}\n          options={dimensionKeys}\n          allowCustomValue\n          onChange={({ value }) => value && onChange(setOperatorExpressionProperty(filter, value))}\n        />\n\n        <Select\n          width=\"auto\"\n          value={filter.operator?.name && toOption(filter.operator.name)}\n          options={OPERATORS}\n          onChange={({ value }) => value && onChange(setOperatorExpressionName(filter, value))}\n        />\n\n        <Select\n          width=\"auto\"\n          isLoading={state.loading}\n          value={\n            filter.operator?.value && typeof filter.operator?.value === 'string'\n              ? toOption(filter.operator?.value)\n              : null\n          }\n          options={state.value}\n          allowCustomValue\n          onOpenMenu={loadOptions}\n          onChange={({ value }) => value && onChange(setOperatorExpressionValue(filter, value))}\n        />\n\n        <AccessoryButton aria-label=\"remove\" icon=\"times\" variant=\"secondary\" onClick={onDelete} />\n      </InputGroup>\n\n      {propertyNameError && (\n        <Alert className={styles.alert} title={propertyNameError} severity=\"error\" topSpacing={1} />\n      )}\n      {operatorValueError && (\n        <Alert className={styles.alert} title={operatorValueError} severity=\"error\" topSpacing={1} />\n      )}\n    </div>\n  );\n};\n\nconst getStyles = () => ({\n  container: css({ display: 'inline-block' }),\n  alert: css({ minWidth: '100%', width: 'min-content' }),\n});\n","import { useMemo, useState } from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { AccessoryButton, EditorList, InputGroup } from '@grafana/experimental';\nimport { config } from '@grafana/runtime';\nimport { Select } from '@grafana/ui';\n\nimport { CloudWatchDatasource } from '../../../../datasource';\nimport {\n  QueryEditorExpressionType,\n  QueryEditorGroupByExpression,\n  QueryEditorPropertyType,\n} from '../../../../expressions';\nimport { useDimensionKeys, useIsMonitoringAccount } from '../../../../hooks';\nimport { CloudWatchMetricsQuery } from '../../../../types';\n\nimport {\n  getFlattenedGroupBys,\n  getMetricNameFromExpression,\n  getNamespaceFromExpression,\n  setGroupByField,\n  setSql,\n} from './utils';\n\ninterface SQLGroupByProps {\n  query: CloudWatchMetricsQuery;\n  datasource: CloudWatchDatasource;\n  onQueryChange: (query: CloudWatchMetricsQuery) => void;\n}\n\nconst SQLGroupBy = ({ query, datasource, onQueryChange }: SQLGroupByProps) => {\n  const sql = query.sql ?? {};\n  const groupBysFromQuery = useMemo(() => getFlattenedGroupBys(query.sql ?? {}), [query.sql]);\n  const [items, setItems] = useState<QueryEditorGroupByExpression[]>(groupBysFromQuery);\n  const isMonitoringAccount = useIsMonitoringAccount(datasource.resources, query.region);\n\n  const namespace = getNamespaceFromExpression(sql.from);\n  const metricName = getMetricNameFromExpression(sql.select);\n\n  const baseOptions = useDimensionKeys(datasource, { region: query.region, namespace, metricName });\n  const options = useMemo(\n    // Exclude options we've already selected\n    () => {\n      const isCrossAccountEnabled =\n        config.featureToggles.cloudWatchCrossAccountQuerying &&\n        config.featureToggles.cloudwatchMetricInsightsCrossAccount;\n\n      const baseOptionsWithAccountId =\n        isCrossAccountEnabled && isMonitoringAccount\n          ? [{ label: 'Account ID', value: 'AWS.AccountId' }, ...baseOptions]\n          : baseOptions;\n      return baseOptionsWithAccountId.filter(\n        (option) => !groupBysFromQuery.some((v) => v.property.name === option.value)\n      );\n    },\n    [baseOptions, groupBysFromQuery, isMonitoringAccount]\n  );\n\n  const onChange = (newItems: Array<Partial<QueryEditorGroupByExpression>>) => {\n    // As new (empty object) items come in, with need to make sure they have the correct type\n    const cleaned = newItems.map(\n      (v): QueryEditorGroupByExpression => ({\n        type: QueryEditorExpressionType.GroupBy,\n        property: {\n          type: QueryEditorPropertyType.String,\n          name: v.property?.name,\n        },\n      })\n    );\n\n    setItems(cleaned);\n\n    // Only save complete expressions into the query state;\n    const completeExpressions = cleaned.filter((v) => v.property?.name);\n\n    const groupBy = completeExpressions.length\n      ? {\n          type: QueryEditorExpressionType.And as const,\n          expressions: completeExpressions,\n        }\n      : undefined;\n\n    onQueryChange(setSql(query, { groupBy }));\n  };\n\n  return <EditorList items={items} onChange={onChange} renderItem={makeRenderItem(options)} />;\n};\n\nfunction makeRenderItem(options: Array<SelectableValue<string>>) {\n  function renderItem(\n    item: Partial<QueryEditorGroupByExpression>,\n    onChange: (item: QueryEditorGroupByExpression) => void,\n    onDelete: () => void\n  ) {\n    return <GroupByItem options={options} item={item} onChange={onChange} onDelete={onDelete} />;\n  }\n\n  return renderItem;\n}\n\ninterface GroupByItemProps {\n  options: Array<SelectableValue<string>>;\n  item: Partial<QueryEditorGroupByExpression>;\n  onChange: (item: QueryEditorGroupByExpression) => void;\n  onDelete: () => void;\n}\n\nconst GroupByItem = (props: GroupByItemProps) => {\n  const { options, item, onChange, onDelete } = props;\n  const fieldName = item.property?.name;\n\n  return (\n    <InputGroup>\n      <Select\n        aria-label={`Group by ${fieldName ?? 'filter key'}`}\n        width=\"auto\"\n        value={fieldName ? toOption(fieldName) : null}\n        options={options}\n        allowCustomValue\n        onChange={({ value }) => value && onChange(setGroupByField(value))}\n      />\n\n      <AccessoryButton aria-label=\"remove\" icon=\"times\" variant=\"secondary\" onClick={onDelete} />\n    </InputGroup>\n  );\n};\n\nexport default SQLGroupBy;\n","import { SelectableValue, toOption } from '@grafana/data';\nimport { AccessoryButton, EditorField, EditorFieldGroup, InputGroup } from '@grafana/experimental';\nimport { Select } from '@grafana/ui';\n\nimport { CloudWatchDatasource } from '../../../../datasource';\nimport { ASC, DESC, STATISTICS } from '../../../../language/cloudwatch-sql/language';\nimport { CloudWatchMetricsQuery } from '../../../../types';\nimport { appendTemplateVariables } from '../../../../utils/utils';\n\nimport { setOrderBy, setSql } from './utils';\n\ninterface SQLBuilderSelectRowProps {\n  query: CloudWatchMetricsQuery;\n  datasource: CloudWatchDatasource;\n  onQueryChange: (query: CloudWatchMetricsQuery) => void;\n}\n\nconst orderByDirections: Array<SelectableValue<string>> = [\n  { label: ASC, value: ASC },\n  { label: DESC, value: DESC },\n];\n\nconst SQLOrderByGroup = ({ query, onQueryChange, datasource }: SQLBuilderSelectRowProps) => {\n  const sql = query.sql ?? {};\n  const orderBy = sql.orderBy?.name;\n  const orderByDirection = sql.orderByDirection;\n\n  return (\n    <EditorFieldGroup>\n      <EditorField label=\"Order by\" optional width={16}>\n        <InputGroup>\n          <Select\n            aria-label=\"Order by\"\n            onChange={({ value }) => value && onQueryChange(setOrderBy(query, value))}\n            options={appendTemplateVariables(datasource, STATISTICS.map(toOption))}\n            value={orderBy ? toOption(orderBy) : null}\n          />\n          {orderBy && (\n            <AccessoryButton\n              aria-label=\"remove\"\n              icon=\"times\"\n              variant=\"secondary\"\n              onClick={() => onQueryChange(setSql(query, { orderBy: undefined }))}\n            />\n          )}\n        </InputGroup>\n      </EditorField>\n\n      <EditorField label=\"Direction\" disabled={!orderBy} width={16}>\n        <Select\n          aria-label=\"Direction\"\n          inputId=\"cloudwatch-sql-order-by-direction\"\n          value={orderByDirection ? toOption(orderByDirection) : orderByDirections[0]}\n          options={appendTemplateVariables(datasource, orderByDirections)}\n          onChange={(item) => item && onQueryChange(setSql(query, { orderByDirection: item.value }))}\n        />\n      </EditorField>\n    </EditorFieldGroup>\n  );\n};\n\nexport default SQLOrderByGroup;\n","import { useCallback, useEffect, useState } from 'react';\nimport * as React from 'react';\n\nimport { EditorField, EditorRow, EditorRows } from '@grafana/experimental';\nimport { Input } from '@grafana/ui';\n\nimport { CloudWatchDatasource } from '../../../../datasource';\nimport SQLGenerator from '../../../../language/cloudwatch-sql/SQLGenerator';\nimport { CloudWatchMetricsQuery } from '../../../../types';\n\nimport SQLBuilderSelectRow from './SQLBuilderSelectRow';\nimport SQLFilter from './SQLFilter';\nimport SQLGroupBy from './SQLGroupBy';\nimport SQLOrderByGroup from './SQLOrderByGroup';\nimport { setSql } from './utils';\n\nexport type Props = {\n  query: CloudWatchMetricsQuery;\n  datasource: CloudWatchDatasource;\n  onChange: (value: CloudWatchMetricsQuery) => void;\n};\n\nexport const SQLBuilderEditor = ({ query, datasource, onChange }: React.PropsWithChildren<Props>) => {\n  const sql = query.sql ?? {};\n\n  const onQueryChange = useCallback(\n    (query: CloudWatchMetricsQuery) => {\n      const sqlGenerator = new SQLGenerator();\n      const sqlString = sqlGenerator.expressionToSqlQuery(query.sql ?? {}, query.accountId);\n      const fullQuery = {\n        ...query,\n        sqlExpression: sqlString,\n      };\n\n      onChange(fullQuery);\n    },\n    [onChange]\n  );\n\n  const [sqlPreview, setSQLPreview] = useState<string | undefined>();\n  useEffect(() => {\n    const sqlGenerator = new SQLGenerator();\n    const sqlString = sqlGenerator.expressionToSqlQuery(query.sql ?? {}, query.accountId);\n    if (sqlPreview !== sqlString) {\n      setSQLPreview(sqlString);\n    }\n  }, [query, sqlPreview, setSQLPreview]);\n\n  return (\n    <EditorRows>\n      <EditorRow>\n        <SQLBuilderSelectRow query={query} onQueryChange={onQueryChange} datasource={datasource} />\n      </EditorRow>\n\n      <EditorRow>\n        <EditorField label=\"Filter\" optional={true}>\n          <SQLFilter query={query} onQueryChange={onQueryChange} datasource={datasource} />\n        </EditorField>\n      </EditorRow>\n\n      <EditorRow>\n        <EditorField label=\"Group by\" optional>\n          <SQLGroupBy query={query} onQueryChange={onQueryChange} datasource={datasource} />\n        </EditorField>\n\n        <SQLOrderByGroup query={query} onQueryChange={onQueryChange} datasource={datasource}></SQLOrderByGroup>\n\n        <EditorField label=\"Limit\" optional>\n          <Input\n            id={`${query.refId}-cloudwatch-sql-builder-editor-limit`}\n            value={sql.limit}\n            onChange={(e) => {\n              const val = e.currentTarget.valueAsNumber;\n              onQueryChange(setSql(query, { limit: isNaN(val) ? undefined : val }));\n            }}\n            type=\"number\"\n            min={1}\n          />\n        </EditorField>\n      </EditorRow>\n\n      {sqlPreview && (\n        <EditorRow>\n          {process.env.NODE_ENV === 'development' && <pre>{JSON.stringify(query.sql ?? {}, null, 2)}</pre>}\n          <pre>{sqlPreview ?? ''}</pre>\n        </EditorRow>\n      )}\n    </EditorRows>\n  );\n};\n","import { LanguageDefinition } from '../monarch/register';\n\nconst cloudWatchSqlLanguageDefinition: LanguageDefinition = {\n  id: 'cloudwatch-sql',\n  extensions: ['.cloudwatchSql'],\n  aliases: ['CloudWatch', 'cloudwatch', 'CloudWatchSQL'],\n  mimetypes: [],\n  loader: () => import('./language'),\n};\nexport default cloudWatchSqlLanguageDefinition;\n","import type * as monacoType from 'monaco-editor/esm/vs/editor/editor.api';\nimport { useCallback, useEffect } from 'react';\n\nimport { CodeEditor, Monaco } from '@grafana/ui';\n\nimport { CloudWatchDatasource } from '../../../datasource';\nimport language from '../../../language/cloudwatch-sql/definition';\nimport { TRIGGER_SUGGEST } from '../../../language/monarch/commands';\nimport { registerLanguage } from '../../../language/monarch/register';\n\nexport interface Props {\n  region: string;\n  sql: string;\n  onChange: (sql: string) => void;\n  datasource: CloudWatchDatasource;\n}\n\nexport const SQLCodeEditor = ({ region, sql, onChange, datasource }: Props) => {\n  useEffect(() => {\n    datasource.sqlCompletionItemProvider.setRegion(region);\n  }, [region, datasource]);\n\n  const onEditorMount = useCallback(\n    (editor: monacoType.editor.IStandaloneCodeEditor, monaco: Monaco) => {\n      editor.onDidFocusEditorText(() => editor.trigger(TRIGGER_SUGGEST.id, TRIGGER_SUGGEST.id, {}));\n      editor.addCommand(monaco.KeyMod.Shift | monaco.KeyCode.Enter, () => {\n        const text = editor.getValue();\n        onChange(text);\n      });\n    },\n    [onChange]\n  );\n\n  return (\n    <CodeEditor\n      height={'150px'}\n      language={language.id}\n      value={sql}\n      onBlur={(value) => {\n        if (value !== sql) {\n          onChange(value);\n        }\n      }}\n      showMiniMap={false}\n      showLineNumbers={true}\n      onBeforeEditorMount={(monaco: Monaco) => registerLanguage(monaco, language, datasource.sqlCompletionItemProvider)}\n      onEditorDidMount={onEditorMount}\n    />\n  );\n};\n","import { ChangeEvent, useCallback, useEffect, useState } from 'react';\nimport * as React from 'react';\n\nimport { QueryEditorProps, SelectableValue } from '@grafana/data';\nimport { EditorField, EditorRow, InlineSelect } from '@grafana/experimental';\nimport { ConfirmModal, Input, RadioButtonGroup, Space } from '@grafana/ui';\n\nimport { CloudWatchDatasource } from '../../../datasource';\nimport { DEFAULT_METRICS_QUERY } from '../../../defaultQueries';\nimport useMigratedMetricsQuery from '../../../migrations/useMigratedMetricsQuery';\nimport {\n  CloudWatchJsonData,\n  CloudWatchMetricsQuery,\n  CloudWatchQuery,\n  MetricEditorMode,\n  MetricQueryType,\n  MetricStat,\n} from '../../../types';\nimport { MetricStatEditor } from '../../shared/MetricStatEditor';\n\nimport { DynamicLabelsField } from './DynamicLabelsField';\nimport { MathExpressionQueryField } from './MathExpressionQueryField';\nimport { SQLBuilderEditor } from './SQLBuilderEditor';\nimport { SQLCodeEditor } from './SQLCodeEditor';\n\nexport interface Props extends QueryEditorProps<CloudWatchDatasource, CloudWatchQuery, CloudWatchJsonData> {\n  query: CloudWatchMetricsQuery;\n  extraHeaderElementLeft?: React.Dispatch<JSX.Element | undefined>;\n  extraHeaderElementRight?: React.Dispatch<JSX.Element | undefined>;\n}\n\nconst metricEditorModes: Array<SelectableValue<MetricQueryType>> = [\n  { label: 'Metric Search', value: MetricQueryType.Search },\n  { label: 'Metric Insights', value: MetricQueryType.Insights },\n];\nconst editorModes = [\n  { label: 'Builder', value: MetricEditorMode.Builder },\n  { label: 'Code', value: MetricEditorMode.Code },\n];\n\nexport const MetricsQueryEditor = (props: Props) => {\n  const { query, datasource, extraHeaderElementLeft, extraHeaderElementRight, onChange } = props;\n  const [showConfirm, setShowConfirm] = useState(false);\n  const [codeEditorIsDirty, setCodeEditorIsDirty] = useState(false);\n  const migratedQuery = useMigratedMetricsQuery(query, props.onChange);\n\n  const onEditorModeChange = useCallback(\n    (newMetricEditorMode: MetricEditorMode) => {\n      if (\n        codeEditorIsDirty &&\n        query.metricQueryType === MetricQueryType.Insights &&\n        query.metricEditorMode === MetricEditorMode.Code\n      ) {\n        setShowConfirm(true);\n        return;\n      }\n      onChange({ ...query, metricEditorMode: newMetricEditorMode });\n    },\n    [setShowConfirm, onChange, codeEditorIsDirty, query]\n  );\n\n  useEffect(() => {\n    extraHeaderElementLeft?.(\n      <InlineSelect\n        aria-label=\"Metric editor mode\"\n        value={metricEditorModes.find((m) => m.value === query.metricQueryType)}\n        options={metricEditorModes}\n        onChange={({ value }) => {\n          if (\n            codeEditorIsDirty &&\n            query.metricQueryType === MetricQueryType.Search &&\n            query.metricEditorMode === MetricEditorMode.Builder\n          ) {\n            setShowConfirm(true);\n            return;\n          }\n          onChange({ ...query, metricQueryType: value });\n        }}\n      />\n    );\n\n    extraHeaderElementRight?.(\n      <>\n        <RadioButtonGroup\n          options={editorModes}\n          size=\"sm\"\n          value={query.metricEditorMode}\n          onChange={onEditorModeChange}\n        />\n        <ConfirmModal\n          isOpen={showConfirm}\n          title=\"Are you sure?\"\n          body=\"You will lose changes made to the query if you change to Metric Insights Builder mode.\"\n          confirmText=\"Yes, I am sure.\"\n          dismissText=\"No, continue editing the query.\"\n          icon=\"exclamation-triangle\"\n          onConfirm={() => {\n            setShowConfirm(false);\n            setCodeEditorIsDirty(false);\n            onChange({\n              ...query,\n              ...DEFAULT_METRICS_QUERY,\n              metricQueryType: MetricQueryType.Insights,\n              metricEditorMode: MetricEditorMode.Builder,\n            });\n          }}\n          onDismiss={() => setShowConfirm(false)}\n        />\n      </>\n    );\n\n    return () => {\n      extraHeaderElementLeft?.(undefined);\n      extraHeaderElementRight?.(undefined);\n    };\n  }, [\n    query,\n    codeEditorIsDirty,\n    datasource,\n    onChange,\n    extraHeaderElementLeft,\n    extraHeaderElementRight,\n    showConfirm,\n    onEditorModeChange,\n  ]);\n\n  return (\n    <>\n      <Space v={0.5} />\n\n      {query.metricQueryType === MetricQueryType.Search && (\n        <>\n          {query.metricEditorMode === MetricEditorMode.Builder && (\n            <MetricStatEditor\n              {...props}\n              refId={query.refId}\n              metricStat={query}\n              onChange={(metricStat: MetricStat) => {\n                if (!codeEditorIsDirty) {\n                  setCodeEditorIsDirty(true);\n                }\n                props.onChange({ ...query, ...metricStat });\n              }}\n            ></MetricStatEditor>\n          )}\n          {query.metricEditorMode === MetricEditorMode.Code && (\n            <MathExpressionQueryField\n              expression={query.expression ?? ''}\n              onChange={(expression) => props.onChange({ ...query, expression })}\n              datasource={datasource}\n            ></MathExpressionQueryField>\n          )}\n        </>\n      )}\n      {query.metricQueryType === MetricQueryType.Insights && (\n        <>\n          {query.metricEditorMode === MetricEditorMode.Code && (\n            <SQLCodeEditor\n              region={query.region}\n              sql={query.sqlExpression ?? ''}\n              onChange={(sqlExpression) => {\n                if (!codeEditorIsDirty) {\n                  setCodeEditorIsDirty(true);\n                }\n                props.onChange({ ...migratedQuery, sqlExpression });\n              }}\n              datasource={datasource}\n            />\n          )}\n\n          {query.metricEditorMode === MetricEditorMode.Builder && (\n            <>\n              <SQLBuilderEditor query={query} onChange={props.onChange} datasource={datasource}></SQLBuilderEditor>\n            </>\n          )}\n        </>\n      )}\n      <Space v={0.5} />\n      <EditorRow>\n        <EditorField\n          label=\"ID\"\n          width={26}\n          optional\n          tooltip=\"ID can be used to reference other queries in math expressions. The ID can include numbers, letters, and underscore, and must start with a lowercase letter.\"\n          invalid={!!query.id && !/^$|^[a-z][a-zA-Z0-9_]*$/.test(query.id)}\n        >\n          <Input\n            id={`${query.refId}-cloudwatch-metric-query-editor-id`}\n            onChange={(event: ChangeEvent<HTMLInputElement>) => onChange({ ...migratedQuery, id: event.target.value })}\n            type=\"text\"\n            value={query.id}\n          />\n        </EditorField>\n\n        <EditorField label=\"Period\" width={26} tooltip=\"Minimum interval between points in seconds.\">\n          <Input\n            id={`${query.refId}-cloudwatch-metric-query-editor-period`}\n            value={query.period || ''}\n            placeholder=\"auto\"\n            onChange={(event: ChangeEvent<HTMLInputElement>) =>\n              onChange({ ...migratedQuery, period: event.target.value })\n            }\n          />\n        </EditorField>\n\n        <EditorField\n          label=\"Label\"\n          width={26}\n          optional\n          tooltip=\"Change time series legend name using Dynamic labels. See documentation for details.\"\n        >\n          <DynamicLabelsField\n            width={52}\n            label={migratedQuery.label ?? ''}\n            onChange={(label) => props.onChange({ ...query, label })}\n          ></DynamicLabelsField>\n        </EditorField>\n      </EditorRow>\n    </>\n  );\n};\n","import { CoreApp, LoadingState, QueryEditorProps, SelectableValue } from '@grafana/data';\nimport { EditorHeader, InlineSelect, FlexItem } from '@grafana/experimental';\nimport { config } from '@grafana/runtime';\nimport { Badge, Button } from '@grafana/ui';\n\nimport { CloudWatchDatasource } from '../../datasource';\nimport { isCloudWatchLogsQuery, isCloudWatchMetricsQuery } from '../../guards';\nimport { useIsMonitoringAccount, useRegions } from '../../hooks';\nimport { CloudWatchJsonData, CloudWatchQuery, CloudWatchQueryMode, MetricQueryType } from '../../types';\n\nexport interface Props extends QueryEditorProps<CloudWatchDatasource, CloudWatchQuery, CloudWatchJsonData> {\n  extraHeaderElementLeft?: JSX.Element;\n  extraHeaderElementRight?: JSX.Element;\n  dataIsStale: boolean;\n}\n\nconst apiModes: Array<SelectableValue<CloudWatchQueryMode>> = [\n  { label: 'CloudWatch Metrics', value: 'Metrics' },\n  { label: 'CloudWatch Logs', value: 'Logs' },\n];\n\nconst QueryHeader = ({\n  query,\n  onChange,\n  datasource,\n  extraHeaderElementLeft,\n  extraHeaderElementRight,\n  dataIsStale,\n  data,\n  onRunQuery,\n}: Props) => {\n  const { queryMode, region } = query;\n  const isMonitoringAccount = useIsMonitoringAccount(datasource.resources, query.region);\n  const [regions, regionIsLoading] = useRegions(datasource);\n  const emptyLogsExpression = isCloudWatchLogsQuery(query) ? !query.expression : false;\n\n  const onQueryModeChange = ({ value }: SelectableValue<CloudWatchQueryMode>) => {\n    if (value && value !== queryMode) {\n      onChange({\n        ...datasource.getDefaultQuery(CoreApp.Unknown),\n        ...query,\n        queryMode: value,\n        expression: '',\n      });\n    }\n  };\n  const onRegionChange = async (region: string) => {\n    if (config.featureToggles.cloudWatchCrossAccountQuerying && isCloudWatchMetricsQuery(query)) {\n      const isMonitoringAccount = await datasource.resources.isMonitoringAccount(region);\n      onChange({ ...query, region, accountId: isMonitoringAccount ? query.accountId : undefined });\n    } else {\n      onChange({ ...query, region });\n    }\n  };\n  const metricInsightsCrossAccountEnabled = config.featureToggles.cloudwatchMetricInsightsCrossAccount;\n\n  const shouldDisplayMonitoringBadge =\n    config.featureToggles.cloudWatchCrossAccountQuerying &&\n    isMonitoringAccount &&\n    (query.queryMode === 'Logs' ||\n      (isCloudWatchMetricsQuery(query) && query.metricQueryType === MetricQueryType.Search) ||\n      (metricInsightsCrossAccountEnabled &&\n        isCloudWatchMetricsQuery(query) &&\n        query.metricQueryType === MetricQueryType.Insights));\n\n  return (\n    <>\n      <EditorHeader>\n        <InlineSelect\n          label=\"Region\"\n          value={region}\n          placeholder=\"Select region\"\n          allowCustomValue\n          onChange={({ value: region }) => region && onRegionChange(region)}\n          options={regions}\n          isLoading={regionIsLoading}\n        />\n\n        <InlineSelect\n          aria-label=\"Query mode\"\n          value={queryMode}\n          options={apiModes}\n          onChange={onQueryModeChange}\n          inputId={`cloudwatch-query-mode-${query.refId}`}\n          id={`cloudwatch-query-mode-${query.refId}`}\n        />\n\n        {extraHeaderElementLeft}\n\n        <FlexItem grow={1} />\n\n        {shouldDisplayMonitoringBadge && (\n          <>\n            <Badge\n              text=\"Monitoring account\"\n              color=\"blue\"\n              tooltip=\"AWS monitoring accounts view data from source accounts so you can centralize monitoring and troubleshoot activities\"\n            ></Badge>\n          </>\n        )}\n\n        <Button\n          variant={dataIsStale ? 'primary' : 'secondary'}\n          size=\"sm\"\n          onClick={onRunQuery}\n          icon={data?.state === LoadingState.Loading ? 'spinner' : undefined}\n          disabled={data?.state === LoadingState.Loading || emptyLogsExpression}\n        >\n          Run queries\n        </Button>\n\n        {extraHeaderElementRight}\n      </EditorHeader>\n    </>\n  );\n};\n\nexport default QueryHeader;\n","import { useCallback, useEffect, useState } from 'react';\n\nimport { QueryEditorProps } from '@grafana/data';\n\nimport { CloudWatchDatasource } from '../../datasource';\nimport { isCloudWatchLogsQuery, isCloudWatchMetricsQuery } from '../../guards';\nimport { CloudWatchJsonData, CloudWatchQuery } from '../../types';\n\nimport LogsQueryEditor from './LogsQueryEditor/LogsQueryEditor';\nimport { MetricsQueryEditor } from './MetricsQueryEditor/MetricsQueryEditor';\nimport QueryHeader from './QueryHeader';\n\nexport type Props = QueryEditorProps<CloudWatchDatasource, CloudWatchQuery, CloudWatchJsonData>;\n\nexport const QueryEditor = (props: Props) => {\n  const { query, onChange, data } = props;\n  const [dataIsStale, setDataIsStale] = useState(false);\n  const [extraHeaderElementLeft, setExtraHeaderElementLeft] = useState<JSX.Element>();\n  const [extraHeaderElementRight, setExtraHeaderElementRight] = useState<JSX.Element>();\n\n  useEffect(() => {\n    setDataIsStale(false);\n  }, [data]);\n\n  const onChangeInternal = useCallback(\n    (query: CloudWatchQuery) => {\n      setDataIsStale(true);\n      onChange(query);\n    },\n    [onChange]\n  );\n\n  return (\n    <>\n      <QueryHeader\n        {...props}\n        extraHeaderElementLeft={extraHeaderElementLeft}\n        extraHeaderElementRight={extraHeaderElementRight}\n        dataIsStale={dataIsStale}\n      />\n\n      {isCloudWatchMetricsQuery(query) && (\n        <MetricsQueryEditor\n          {...props}\n          query={query}\n          onRunQuery={() => {}}\n          onChange={onChangeInternal}\n          extraHeaderElementLeft={setExtraHeaderElementLeft}\n          extraHeaderElementRight={setExtraHeaderElementRight}\n        />\n      )}\n      {isCloudWatchLogsQuery(query) && (\n        <LogsQueryEditor\n          {...props}\n          query={query}\n          onChange={onChangeInternal}\n          extraHeaderElementLeft={setExtraHeaderElementLeft}\n        />\n      )}\n    </>\n  );\n};\n","import { DashboardLoadedEvent } from '@grafana/data';\nimport { config, reportInteraction } from '@grafana/runtime';\n\nimport { isCloudWatchLogsQuery, isCloudWatchMetricsQuery } from './guards';\nimport { migrateMetricQuery } from './migrations/metricQueryMigrations';\nimport pluginJson from './plugin.json';\nimport {\n  CloudWatchLogsQuery,\n  CloudWatchMetricsQuery,\n  CloudWatchQuery,\n  MetricEditorMode,\n  MetricQueryType,\n} from './types';\nimport { filterMetricsQuery } from './utils/utils';\n\ntype CloudWatchOnDashboardLoadedTrackingEvent = {\n  grafana_version?: string;\n  dashboard_id?: string;\n  org_id?: number;\n\n  /* The number of CloudWatch logs queries present in the dashboard*/\n  logs_queries_count: number;\n\n  /* The number of CloudWatch metrics queries present in the dashboard*/\n  metrics_queries_count: number;\n\n  /* The number of queries using the \"Search\" mode. \n  Should be measured in relation to metrics_queries_count, e.g metrics_search_count + metrics_query_count = metrics_queries_count */\n  metrics_search_count: number;\n\n  /* The number of search queries that are using the builder mode. \n  Should be measured in relation to metrics_search_count, e.g metrics_search_builder_count + metrics_search_code_count = metrics_search_count */\n  metrics_search_builder_count: number;\n\n  /* The number of search queries that are using the code mode. \n  Should be measured in relation to metrics_search_count, e.g metrics_search_builder_count + metrics_search_code_count = metrics_search_count */\n  metrics_search_code_count: number;\n\n  /* The number of search queries that have enabled the `match exact` toggle in the builder mode. \n  Should be measured in relation to metrics_search_builder_count. \n  E.g 'Out of 5 metric seach queries (metrics_search_builder_count), 2 had match exact toggle (metrics_search_match_exact_count) enabled */\n  metrics_search_match_exact_count: number;\n\n  /* The number of queries using the \"Query\" mode (AKA Metric Insights). \n  Should be measured in relation to metrics_queries_count, e.g metrics_search_count + metrics_query_count = metrics_queries_count */\n  metrics_query_count: number;\n\n  /* The number of \"Insights\" queries that are using the builder mode. \n  Should be measured in relation to metrics_query_count, e.g metrics_query_builder_count + metrics_query_code_count = metrics_query_count */\n  metrics_query_builder_count: number;\n\n  /* The number of \"Insights\" queries that are using the code mode. \n  Should be measured in relation to metrics_query_count, e.g metrics_query_builder_count + metrics_query_code_count = metrics_query_count */\n  metrics_query_code_count: number;\n\n  /* The number of CloudWatch metrics queries that have specified an account in its cross account metric stat query */\n  metrics_queries_with_account_count: number;\n};\n\nexport const onDashboardLoadedHandler = ({\n  payload: { dashboardId, orgId, grafanaVersion, queries },\n}: DashboardLoadedEvent<CloudWatchQuery>) => {\n  try {\n    const cloudWatchQueries = queries[pluginJson.id];\n\n    if (!cloudWatchQueries?.length) {\n      return;\n    }\n\n    let logsQueries: CloudWatchLogsQuery[] = [];\n    let metricsQueries: CloudWatchMetricsQuery[] = [];\n\n    for (const query of cloudWatchQueries) {\n      if (query.hide) {\n        continue;\n      }\n\n      if (isCloudWatchLogsQuery(query)) {\n        query.logGroupNames?.length && logsQueries.push(query);\n      } else if (isCloudWatchMetricsQuery(query)) {\n        const migratedQuery = migrateMetricQuery(query);\n        filterMetricsQuery(migratedQuery) && metricsQueries.push(query);\n      }\n    }\n\n    const e: CloudWatchOnDashboardLoadedTrackingEvent = {\n      grafana_version: grafanaVersion,\n      dashboard_id: dashboardId,\n      org_id: orgId,\n      logs_queries_count: logsQueries?.length,\n      metrics_queries_count: metricsQueries?.length,\n      metrics_search_count: 0,\n      metrics_search_builder_count: 0,\n      metrics_search_code_count: 0,\n      metrics_search_match_exact_count: 0,\n      metrics_query_count: 0,\n      metrics_query_builder_count: 0,\n      metrics_query_code_count: 0,\n      metrics_queries_with_account_count: 0,\n    };\n\n    for (const q of metricsQueries) {\n      e.metrics_search_count += +Boolean(q.metricQueryType === MetricQueryType.Search);\n      e.metrics_search_builder_count += +isMetricSearchBuilder(q);\n      e.metrics_search_code_count += +Boolean(\n        q.metricQueryType === MetricQueryType.Search && q.metricEditorMode === MetricEditorMode.Code\n      );\n      e.metrics_search_match_exact_count += +Boolean(isMetricSearchBuilder(q) && q.matchExact);\n      e.metrics_query_count += +Boolean(q.metricQueryType === MetricQueryType.Insights);\n      e.metrics_query_builder_count += +Boolean(\n        q.metricQueryType === MetricQueryType.Insights && q.metricEditorMode === MetricEditorMode.Builder\n      );\n      e.metrics_query_code_count += +Boolean(\n        q.metricQueryType === MetricQueryType.Insights && q.metricEditorMode === MetricEditorMode.Code\n      );\n      e.metrics_queries_with_account_count += +Boolean(\n        config.featureToggles.cloudWatchCrossAccountQuerying && isMetricSearchBuilder(q) && q.accountId\n      );\n    }\n\n    reportInteraction('grafana_ds_cloudwatch_dashboard_loaded', e);\n  } catch (error) {\n    console.error('error in cloudwatch tracking handler', error);\n  }\n};\n\nconst isMetricSearchBuilder = (q: CloudWatchMetricsQuery) =>\n  Boolean(q.metricQueryType === MetricQueryType.Search && q.metricEditorMode === MetricEditorMode.Builder);\n","import { DashboardLoadedEvent, DataSourcePlugin } from '@grafana/data';\nimport { getAppEvents } from '@grafana/runtime';\n\nimport LogsCheatSheet from './components/CheatSheet/LogsCheatSheet';\nimport { ConfigEditor } from './components/ConfigEditor/ConfigEditor';\nimport { MetaInspector } from './components/MetaInspector/MetaInspector';\nimport { QueryEditor } from './components/QueryEditor/QueryEditor';\nimport { CloudWatchDatasource } from './datasource';\nimport { onDashboardLoadedHandler } from './tracking';\nimport { CloudWatchJsonData, CloudWatchQuery } from './types';\n\nexport const plugin = new DataSourcePlugin<CloudWatchDatasource, CloudWatchQuery, CloudWatchJsonData>(\n  CloudWatchDatasource\n)\n  .setQueryEditorHelp(LogsCheatSheet)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor)\n  .setMetadataInspector(MetaInspector);\n\n// Subscribe to on dashboard loaded event so that we can track plugin adoption\ngetAppEvents().subscribe<DashboardLoadedEvent<CloudWatchQuery>>(DashboardLoadedEvent, onDashboardLoadedHandler);\n","module.exports = require('./lib/jsurl');","/**\n * Copyright (c) 2011 Bruno Jouhier <bruno.jouhier@sage.com>\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n//\n(function(exports) {\n\t\"use strict\";\n\texports.stringify = function stringify(v) {\n\t\tfunction encode(s) {\n\t\t\treturn !/[^\\w-.]/.test(s) ? s : s.replace(/[^\\w-.]/g, function(ch) {\n\t\t\t\tif (ch === '$') return '!';\n\t\t\t\tch = ch.charCodeAt(0);\n\t\t\t\t// thanks to Douglas Crockford for the negative slice trick\n\t\t\t\treturn ch < 0x100 ? '*' + ('00' + ch.toString(16)).slice(-2) : '**' + ('0000' + ch.toString(16)).slice(-4);\n\t\t\t});\n\t\t}\n\n\t\tvar tmpAry;\n\n\t\tswitch (typeof v) {\n\t\t\tcase 'number':\n\t\t\t\treturn isFinite(v) ? '~' + v : '~null';\n\t\t\tcase 'boolean':\n\t\t\t\treturn '~' + v;\n\t\t\tcase 'string':\n\t\t\t\treturn \"~'\" + encode(v);\n\t\t\tcase 'object':\n\t\t\t\tif (!v) return '~null';\n\n\t\t\t\ttmpAry = [];\n\n\t\t\t\tif (Array.isArray(v)) {\n\t\t\t\t\tfor (var i = 0; i < v.length; i++) {\n\t\t\t\t\t\ttmpAry[i] = stringify(v[i]) || '~null';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn '~(' + (tmpAry.join('') || '~') + ')';\n\t\t\t\t} else {\n\t\t\t\t\tfor (var key in v) {\n\t\t\t\t\t\tif (v.hasOwnProperty(key)) {\n\t\t\t\t\t\t\tvar val = stringify(v[key]);\n\n\t\t\t\t\t\t\t// skip undefined and functions\n\t\t\t\t\t\t\tif (val) {\n\t\t\t\t\t\t\t\ttmpAry.push(encode(key) + val);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn '~(' + tmpAry.join('~') + ')';\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\t// function, undefined\n\t\t\t\treturn;\n\t\t}\n\t};\n\n\tvar reserved = {\n\t\t\"true\": true,\n\t\t\"false\": false,\n\t\t\"null\": null\n\t};\n\n\texports.parse = function(s) {\n\t\tif (!s) return s;\n\t\ts = s.replace(/%(25)*27/g, \"'\");\n\t\tvar i = 0,\n\t\t\tlen = s.length;\n\n\t\tfunction eat(expected) {\n\t\t\tif (s.charAt(i) !== expected) throw new Error(\"bad JSURL syntax: expected \" + expected + \", got \" + (s && s.charAt(i)));\n\t\t\ti++;\n\t\t}\n\n\t\tfunction decode() {\n\t\t\tvar beg = i,\n\t\t\t\tch, r = \"\";\n\t\t\twhile (i < len && (ch = s.charAt(i)) !== '~' && ch !== ')') {\n\t\t\t\tswitch (ch) {\n\t\t\t\t\tcase '*':\n\t\t\t\t\t\tif (beg < i) r += s.substring(beg, i);\n\t\t\t\t\t\tif (s.charAt(i + 1) === '*') r += String.fromCharCode(parseInt(s.substring(i + 2, i + 6), 16)), beg = (i += 6);\n\t\t\t\t\t\telse r += String.fromCharCode(parseInt(s.substring(i + 1, i + 3), 16)), beg = (i += 3);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase '!':\n\t\t\t\t\t\tif (beg < i) r += s.substring(beg, i);\n\t\t\t\t\t\tr += '$', beg = ++i;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn r + s.substring(beg, i);\n\t\t}\n\n\t\treturn (function parseOne() {\n\t\t\tvar result, ch, beg;\n\t\t\teat('~');\n\t\t\tswitch (ch = s.charAt(i)) {\n\t\t\t\tcase '(':\n\t\t\t\t\ti++;\n\t\t\t\t\tif (s.charAt(i) === '~') {\n\t\t\t\t\t\tresult = [];\n\t\t\t\t\t\tif (s.charAt(i + 1) === ')') i++;\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\tresult.push(parseOne());\n\t\t\t\t\t\t\t} while (s.charAt(i) === '~');\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult = {};\n\t\t\t\t\t\tif (s.charAt(i) !== ')') {\n\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\tvar key = decode();\n\t\t\t\t\t\t\t\tresult[key] = parseOne();\n\t\t\t\t\t\t\t} while (s.charAt(i) === '~' && ++i);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\teat(')');\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"'\":\n\t\t\t\t\ti++;\n\t\t\t\t\tresult = decode();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbeg = i++;\n\t\t\t\t\twhile (i < len && /[^)~]/.test(s.charAt(i)))\n\t\t\t\t\ti++;\n\t\t\t\t\tvar sub = s.substring(beg, i);\n\t\t\t\t\tif (/[\\d\\-]/.test(ch)) {\n\t\t\t\t\t\tresult = parseFloat(sub);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult = reserved[sub];\n\t\t\t\t\t\tif (typeof result === \"undefined\") throw new Error(\"bad value keyword: \" + sub);\n\t\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t})();\n\t}\n\n\texports.tryParse = function(s, def) {\n\t\ttry {\n\t\t\treturn exports.parse(s);\n\t\t} catch (ex) {\n\t\t\treturn def;\n\t\t}\n\t}\n\n})(typeof exports !== 'undefined' ? exports : (window.JSURL = window.JSURL || {}));\n","import { __read, __spreadArray } from \"tslib\";\nimport { Observable } from '../Observable';\nimport { innerFrom } from './innerFrom';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { EMPTY } from './empty';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { popResultSelector } from '../util/args';\nexport function zip() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    var resultSelector = popResultSelector(args);\n    var sources = argsOrArgArray(args);\n    return sources.length\n        ? new Observable(function (subscriber) {\n            var buffers = sources.map(function () { return []; });\n            var completed = sources.map(function () { return false; });\n            subscriber.add(function () {\n                buffers = completed = null;\n            });\n            var _loop_1 = function (sourceIndex) {\n                innerFrom(sources[sourceIndex]).subscribe(createOperatorSubscriber(subscriber, function (value) {\n                    buffers[sourceIndex].push(value);\n                    if (buffers.every(function (buffer) { return buffer.length; })) {\n                        var result = buffers.map(function (buffer) { return buffer.shift(); });\n                        subscriber.next(resultSelector ? resultSelector.apply(void 0, __spreadArray([], __read(result))) : result);\n                        if (buffers.some(function (buffer, i) { return !buffer.length && completed[i]; })) {\n                            subscriber.complete();\n                        }\n                    }\n                }, function () {\n                    completed[sourceIndex] = true;\n                    !buffers[sourceIndex].length && subscriber.complete();\n                }));\n            };\n            for (var sourceIndex = 0; !subscriber.closed && sourceIndex < sources.length; sourceIndex++) {\n                _loop_1(sourceIndex);\n            }\n            return function () {\n                buffers = completed = null;\n            };\n        })\n        : EMPTY;\n}\n//# sourceMappingURL=zip.js.map","import { EMPTY } from '../observable/empty';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nimport { timer } from '../observable/timer';\nexport function repeat(countOrConfig) {\n    var _a;\n    var count = Infinity;\n    var delay;\n    if (countOrConfig != null) {\n        if (typeof countOrConfig === 'object') {\n            (_a = countOrConfig.count, count = _a === void 0 ? Infinity : _a, delay = countOrConfig.delay);\n        }\n        else {\n            count = countOrConfig;\n        }\n    }\n    return count <= 0\n        ? function () { return EMPTY; }\n        : operate(function (source, subscriber) {\n            var soFar = 0;\n            var sourceSub;\n            var resubscribe = function () {\n                sourceSub === null || sourceSub === void 0 ? void 0 : sourceSub.unsubscribe();\n                sourceSub = null;\n                if (delay != null) {\n                    var notifier = typeof delay === 'number' ? timer(delay) : innerFrom(delay(soFar));\n                    var notifierSubscriber_1 = createOperatorSubscriber(subscriber, function () {\n                        notifierSubscriber_1.unsubscribe();\n                        subscribeToSource();\n                    });\n                    notifier.subscribe(notifierSubscriber_1);\n                }\n                else {\n                    subscribeToSource();\n                }\n            };\n            var subscribeToSource = function () {\n                var syncUnsub = false;\n                sourceSub = source.subscribe(createOperatorSubscriber(subscriber, undefined, function () {\n                    if (++soFar < count) {\n                        if (sourceSub) {\n                            resubscribe();\n                        }\n                        else {\n                            syncUnsub = true;\n                        }\n                    }\n                    else {\n                        subscriber.complete();\n                    }\n                }));\n                if (syncUnsub) {\n                    resubscribe();\n                }\n            };\n            subscribeToSource();\n        });\n}\n//# sourceMappingURL=repeat.js.map","var isArray = Array.isArray;\nexport function argsOrArgArray(args) {\n    return args.length === 1 && isArray(args[0]) ? args[0] : args;\n}\n//# sourceMappingURL=argsOrArgArray.js.map"],"names":["EditorHeader","children","styles","getStyles","theme","FlexItem","grow","shrink","__defProp","__defProps","__getOwnPropDescs","__getOwnPropSymbols","__hasOwnProp","__propIsEnum","__defNormalProp","obj","key","value","__spreadValues","a","b","prop","__spreadProps","__objRest","source","exclude","target","InlineSelect","_a","_b","labelProp","props","getSelectStyles","id","components","SelectContainer","ValueContainer","className","ALL","AND","ANY","AS","ASC","BETWEEN","BY","CASE","CUBE","DESC","DISTINCT","ELSE","END","ESCAPE","EXISTS","FALSE","FILTER","FIRST","FROM","GROUP","GROUPING","HAVING","ILIKE","IN","INNER","IS","JOIN","LAST","LEFT","LIKE","LIMIT","NOT","NULL","ON","OR","ORDER","OUTER","ROLLUP","SELECT","SETS","SOME","THEN","TRUE","USING","WHEN","WHERE","WITH","KEYWORDS","AFTER_SELECT_KEYWORDS","ALL_KEYWORDS","AGGREGATE_FUNCTIONS","ARRAY_FUNCTIONS","CONDITIONAL_FUNCTIONS","CONVERSION_FUNCTIONS","DATE_AND_TIMESTAMP_FUNCTIONS","JSON_FUNCTIONS","MATHEMATICAL_FUNCTIONS","PREDICATE_FUNCTIONS","STRING_FUNCTIONS","WINDOW_FUNCTIONS","ALL_FUNCTIONS","EQUAL","DOUBLE_EQUALS","NULL_SAFE_EQUAL","NOT_EQUAL","GREATER_THAN","GREATER_THAN_EQUAL","LESS_THAN","LESS_THAN_EQUAL","LOGICAL_OPERATORS","MATH_OPERATORS","PREDICATE_OPERATORS","ALL_OPERATORS","language","conf","CLOUDWATCH_PPL_LANGUAGE_DEFINITION_ID","FIELDS","DEDUP","STATS","EVENTSTATS","SORT","EVAL","HEAD","TOP","RARE","PARSE","PPL_COMMANDS","KEEP_EMPTY","CONSECUTIVE","PARTITIONS","ALLNUM","DELIM","DEDUP_SPLITVALUES","STATS_PARAMETERS","DEDUP_PARAMETERS","PARAMETERS_WITH_BOOLEAN_VALUES","BOOLEAN_LITERALS","MATH_FUNCTIONS","DATE_TIME_FUNCTIONS","TEXT_FUNCTIONS","SPAN","POSITION","CONDITION_FUNCTIONS","SORT_FIELD_FUNCTIONS","PPL_FUNCTIONS","EVAL_FUNCTIONS","STATS_FUNCTIONS","PLUS","MINUS","FIELD_OPERATORS","ARITHMETIC_OPERATORS","COMPARISON_OPERATORS","LOGICAL_EXPRESSION_OPERATORS","PPL_OPERATORS","SCHEMA","STATISTICS","EQUALS","NOT_EQUALS","DYNAMIC_LABEL_PATTERNS","escapeRegExp","string","DISPLAY","PATTERN","LOGS_COMMANDS","LOGS_LOGIC_OPERATORS","LOGS_FUNCTION_OPERATORS","SORT_DIRECTION_KEYWORDS","LOGS_KEYWORDS","METRIC_MATH_FNS","METRIC_MATH_STATISTIC_KEYWORD_STRINGS","METRIC_MATH_KEYWORDS","METRIC_MATH_OPERATORS","METRIC_MATH_PERIODS","_createClass","defineProperties","i","descriptor","Constructor","protoProps","staticProps","_templateObject","_taggedTemplateLiteral","strings","raw","_classCallCheck","instance","TemplateTag","_this","_len","transformers","_key","_len2","expressions","_key2","transformer","previousTag","template","_len3","substitutions","_key3","resultSoFar","remainingPart","substitution","str","cb","res","transform","endResult","defaults","inlineArrayTransformer","opts","arrayLength","separator","conjunction","serial","indent","separatorIndex","_toConsumableArray","arr","arr2","stripIndentTransformer","type","match","el","regexp","trimResultTransformer","side","commaLists","commaListsAnd","commaListsOr","splitStringTransformer","splitBy","isValidValue","x","removeNonPrintingValuesTransformer","html","replaceSubstitutionTransformer","replaceWhat","replaceWith","safeHtml","replaceResultTransformer","oneLine","oneLineTrim","oneLineCommaLists","oneLineCommaListsOr","oneLineCommaListsAnd","inlineLists","oneLineInlineLists","stripIndent","stripIndents","sqlOnlyGeneralQueries","pplOnlyGeneralQueries","generalQueries","lambdaSamples","vpcSamples","cloudtrailSamples","natSamples","appSyncSamples","iotSamples","QUERY_COMMANDS","NUMERIC_OPERATORS","GENERAL_FUNCTIONS","DATETIME_FUNCTIONS","IP_FUNCTIONS","BOOLEAN_FUNCTIONS","AGGREGATION_FUNCTIONS_STATS","NON_AGGREGATION_FUNCS_STATS","STATS_FUNCS","FIELD_AND_FILTER_FUNCTIONS","FUNCTIONS","command","f","baseTokenizer","languageSpecificFeatures","cwliTokenizer","pplTokenizer","operator","sqlTokenizer","QUERIES","renderHighlightedMarkup","code","keyPrefix","queryLanugage","grammar","getGrammarForLanguage","spans","token","CheatSheetCollapse","isOpen","setIsOpen","Collapse","isLogsQuery","query","Text","item","j","isCloudWatchLogsQuery","cloudwatchQuery","isCloudWatchMetricsQuery","isCloudWatchAnnotationQuery","isCloudWatchAnnotation","toOption","appendTemplateVariables","datasource","values","filterMetricsQuery","region","metricQueryType","metricEditorMode","expression","metricName","namespace","sqlExpression","statistic","useRegions","regionsIsLoading","setRegionsIsLoading","regions","setRegions","variableOptionGroup","useNamespaces","namespaces","setNamespaces","useMetrics","accountId","metrics","setMetrics","result","useDimensionKeys","dimensionFilters","dimensionKeys","setDimensionKeys","useDeepCompareEffect","useEnsureVariableHasSingleSelection","error","setError","interpolatedTarget","newErrorMessage","useIsMonitoringAccount","resources","isMonitoringAccount","setIsMonitoringAccount","config","useAccountOptions","fetchAccountOptions","accounts","options","state","doFetch","useAsyncFn","standardStatistics","ALL_ACCOUNTS_OPTION","Account","onChange","accountOptions","selectedAccountExistsInOptions","tempVar","EditorField","Select","wildcardOption","excludeCurrentKey","dimensions","currentKey","acc","FilterItem","filter","metricStat","disableExpressions","onDelete","dimensionsExcludingCurrentKey","loadDimensionValues","o","loadOptions","getOperatorStyles","InputGroup","change","AccessoryButton","Alert","dimensionsToFilterConditions","v","filterConditionsToDimensions","filters","Dimensions","items","setItems","onDimensionsChange","newItems","newDimensions","EditorList","makeRenderFilter","renderFilter","percentileSyntaxRE","boundariesInnerParenthesesSyntax","boundariesSyntaxRE","MetricStatEditor","refId","accountState","onNamespaceChange","validatedQuery","validateMetricName","metric","EditorRows","EditorRow","EditorFieldGroup","s","EditorSwitch","e","AnnotationQueryEditor","regionIsLoading","Space","Input","event","DEFAULT_METRICS_QUERY","DEFAULT_ANNOTATIONS_QUERY","DEFAULT_CWLI_QUERY_STRING","DEFAULT_PPL_QUERY_STRING","DEFAULT_SQL_QUERY_STRING","getDefaultLogsQuery","defaultLogGroups","legacyDefaultLogGroups","DEFAULT_VARIABLE_QUERY","CloudWatchAnnotationSupport","anno","prefixMatching","actionPrefix","alarmNamePrefix","validPrefixMatchingQuery","validMetricStatQuery","variableRegex","variableRegexExec","variableString","getVariableName","interpolateStringArrayUsingSingleOrMultiValuedVariable","templateSrv","scopedVars","format","variableName","valueVar","name","isVariableOption","rawValue","isTemplateVariable","current","CloudWatchLogsLanguageProvider","initialValues","url","params","lastValueFrom","logGroups","interpolatedLogGroups","lg","logGroupName","fields","context","suggs","functionSuggestions","commandToken","curToken","queryCommand","prevToken","prevNonWhitespaceToken","currentTokenIsFirstArg","currentTokenIsAfterCommandAndEmpty","isTokenType","currentTokenIsAfterCommand","nextNonWhitespaceToken","currentTokenIsComma","currentTokenIsCommaOrAfterComma","typeaheadOutput","group","sugg","boolFuncs","fieldsSuggestions","comparisonSuggestions","field","syntax","input","tokens","isFirstToken","isInsideFunctionParenthesis","isAfterKeyword","previousCommandToken","isFirstArgument","startToken","thisToken","funcsWithFieldArgs","funcName","parenthesisToken","maybeFunctionToken","keyword","maybeKeyword","getPreviousTokenExcluding","prev","content","main","LinkedToken","range","previous","next","tokenTypes","isType","curr","ignoreTypes","t","linkedTokenBuilder","monaco","model","position","tokensPerLine","lineIndex","columnIndex","endColumn","newToken","StatementPosition","SuggestionKind","CompletionItemPriority","CompletionItemProvider","currentToken","suggestionKinds","statementPosition","languageDefinition","isPPL","TRIGGER_SUGGEST","CLOUDWATCH_LOGS_SQL_LANGUAGE_DEFINITION_ID","SQLTokenTypes","getStatementPosition","previousNonWhiteSpace","previousKeyword","normalizedPreviousNonWhiteSpaceValue","normalizedPreviousKeywordValue","previousNonAliasKeywordValue","normalizedPreviousNonAliasKeywordValue","isPreviousSelectKeywordGroup","nearestPreviousKeyword","normalizedNearestPreviousKeywordValue","previousTokens","numPredicateOperators","numLogicalOperators","nearestCaseKeyword","getSuggestionKinds","LogsSQLCompletionItemProviderFunc","queryContext","LogsSQLCompletionItemProvider","results","logGroup","suggestions","toCompletionItem","rest","addSuggestion","suggestion","variable","PPLTokenTypes","nextNonWhiteSpace","normalizedPreviousNonWhiteSpace","nearestFunction","nearestKeyword","nearestCommand","isBeforeLogicalExpression","isListingFields","fieldNames","havePipe","word","tokensUntilFieldName","tokensUntilEscapedFieldName","isPreceededByAFieldName","isAfterComma","isFunctionArgument","PPLCompletionItemProviderFunc","PPLCompletionItemProvider","_","kind","funct","literal","previousIsSlash","getSelectToken","getSelectStatisticToken","assumedStatisticToken","getMetricNameToken","assumedMetricNameToken","getFromKeywordToken","getNamespaceToken","assumedNamespaceToken","SQLCompletionItemProvider","namespaceToken","m","metricNameToken","n","labelKeyTokens","labelKey","CLOUDWATCH_LOGS_LANGUAGE_DEFINITION_ID","LogsTokenTypes","normalizedCurrentToken","normalizedNonWhitespacePreceedingOpeningParenthesis","LogsCompletionItemProviderFunc","LogsCompletionItemProvider","direction","MetricMathTokenTypes","currentFunction","isWithinSearch","allTokensAfterStartOfSearch","lastComma","MetricMathCompletionItemProvider","idx","func","wait","mem","args","CloudWatchRequest","instanceSettings","memoizedDebounce","displayCustomError","data","headers","displayErrorIfIsMultiTemplateVariable","newValues","multiFilters","fieldName","interpolatedKey","initialVal","vals","title","message","CloudWatchAnnotationQueryRunner","queries","queryFn","JSURL","defaultURL","usGovURL","chinaURL","getLogsEndpoint","encodeUrl","addDataLinksToLogsResponse","response","request","replaceFn","getVariableValueFn","getRegion","tracingDatasourceUid","replace","getVariableValue","dataFrame","curTarget","interpolatedRegion","xrayLink","createInternalXrayLink","createAwsConsoleLink","datasourceUid","ds","arns","logGroupNames","sources","interpolatedExpression","interpolatedGroups","urlProps","runWithRetry","queryFun","targets","timeoutFunc","startTime","retries","timerID","subscription","collected","retryWaitFunction","retry","Observable","observer","run","currentQueryParams","refIdsForRequestsToRetry","errorsNotToRetry","splitErrorsData","errors","err","increasingInterval","startPeriod","endPeriod","step","scheduler","subscriber","dispatch","counter","period","newPeriod","LOG_IDENTIFIER_INTERNAL","LOGSTREAM_IDENTIFIER_INTERNAL","CloudWatchLogsQueryRunner","logQueries","startQueryRequests","interpolatedLogGroupArns","interpolatedLogGroupNames","arn","logsSQLCustomerFormatter","varName","shouldSurroundInQuotes","formatter","queryString","mergeMap","startQueryResponse","dataQueryResponse","from","row","limit","logStreamField","logField","requestParams","parseLogGroupName","frame","of","queryParams","errorsFromStartQuery","param","responses","concatMap","repeat","share","errorsFromGetQuery","dataFrames","map","initialValue","consecutiveFailedAttempts","scan","failures","prevRecordsMatched","frames","recordsMatched","stat","queryResponse","zip","tap","failedAttempts","takeWhile","withTeardown","logQuery","finalize","subtype","hasMissingLegacyLogGroupNames","hasMissingLogGroups","hasMissingQueryString","observable","onUnsubscribe","innerSub","val","logIdentifier","colonIndex","ThrottlingErrorMessage","migrateMetricQuery","migratedQuery","migrateAliasPatterns","aliasPatterns","newQuery","regex","getThrottlingErrorMessage","displayAlert","datasourceName","CloudWatchMetricsQueryRunner","metricQueries","timezoneUTCOffset","validMetricsQueries","q","migratedAndIterpolatedQuery","dataframes","catchError","failedRefIds","actualRegion","p","ResourcesAPI","path","parameters","externalId","account","r","dimensionKey","instanceId","attributeName","resourceType","tags","logGroupNamePrefix","jsonVariable","isVariableQuery","rawQuery","migrateMultiFilters","oldFilters","tempFilters","parsedFilters","newFilters","migrateVariableQuery","metricNameQuery","dimensionKeysQuery","dimensionValuesQuery","ebsVolumeIdsQuery","ec2InstanceAttributeQuery","resourceARNsQuery","MultiFilterItem","keyPlaceholder","localKey","setLocalKey","localValue","setLocalValue","multiFiltersToFilterConditions","filterConditionsToMultiFilters","MultiFilter","onFiltersChange","newMultifilters","removeMarginBottom","VariableQueryField","label","allowCustomValue","isLoading","inputId","VariableTextField","interactive","onBlur","placeholder","tooltip","queryTypes","VariableQueryEditor","parsedQuery","dimensionKeyError","onRegionChange","sanitizeQuery","onQueryChange","hasRegionField","hasAccountIDField","hasNamespaceField","CloudWatchVariableSupport","queryObj","logGroupPrefix","interpolatedPrefix","selectableValueToMetricFindOption","keys","instanceID","ids","ec2Filters","metricFindOptions","CloudWatchDatasource","DataSourceWithBackend","metricsQueries","annotationQueries","dataQueryResponses","merge","k","MAX_LOG_GROUPS","MAX_VISIBLE_LOG_GROUPS","DEBOUNCE_TIMER","LogGroupSelector","selectedLogGroups","onOpenMenu","width","saved","loadingLogGroups","setLoadingLogGroups","availableLogGroups","setAvailableLogGroups","logGroupOptions","fetchLogGroupOptions","onLogGroupSearch","searchTerm","actionMeta","matchingLogGroups","getAvailableLogGroupOptions","onOpenLogGroupMenu","onLogGroupSearchDebounced","rowGap","LegacyLogGroupSelection","legacyLogGroupNames","searchFn","searchPhrase","searchFilter","setSearchFilter","debouncedSearch","Icon","LogGroupsSelector","variables","fetchLogGroups","onBeforeOpen","isModalOpen","setIsModalOpen","selectableLogGroups","setSelectableLogGroups","setSelectedLogGroups","setSearchPhrase","searchAccountId","setSearchAccountId","setIsLoading","selectedLogGroupsCounter","variableOptions","selectedVariable","currentVariableOption","toggleModal","accountNameById","idsToNames","possibleLogGroups","handleSelectCheckbox","isChecked","handleApply","handleCancel","Modal","phrase","LoadingPlaceholder","Checkbox","ev","Label","option","Button","MAX_NO_OF_VISIBLE_LOG_GROUPS","SelectedLogGroups","maxNoOfVisibleLogGroups","showConfirm","setShowConfirm","visibleSelectecLogGroups","setVisibleSelectecLogGroups","slg","ConfirmModal","logGroupStyles","LogGroupsField","loadingLogGroupsStarted","setLoadingLogGroupsStarted","lgn","legacyLogGroupNameValues","LogGroupsFieldWrapper","SecureSocksProxySettingsNewStyling","onOptionsChange","ConfigSection","Field","Switch","xRayDsId","XrayLinkConfig","newFormStyling","hasXrayDatasource","DataSourcePicker","InlineField","ARN_DEPRECATION_WARNING_MESSAGE","CREDENTIALS_AUTHENTICATION_WARNING_MESSAGE","ConfigEditor","logsTimeout","defaultRegion","useDatasource","logsTimeoutError","useTimoutValidation","useDataSourceSavedState","logGroupFieldState","setLogGroupFieldState","report","usePluginInteractionReporter","successSubscription","failSubscription","setExternalId","warning","setWarning","dismissWarning","Divider","updatedLogGroups","uid","setDatasource","setErr","useDebounce","setSaved","MetaInspector","rows","custom","CloudWatchLink","panelData","href","setHref","prevPanelData","usePrevious","start","reRegisterCompletionProvider","completionItemProvider","disposal","loader","monarch","registerLanguage","l","byRE","groupsRE","getStatsGroups","groups","g","codeEditorCommonProps","PPLQueryEditor","monacoRef","disposalRef","onFocus","onChangeQuery","nextQuery","onEditorMount","editor","text","onBeforeEditorMount","CodeEditor","LogsQLCodeEditor","SQLQueryEditor","CloudWatchLogsQueryField","ExtraFieldElement","onChangeLogs","getCodeEditor","logsQueryLanguageOptions","extraHeaderElementLeft","isQueryNew","setIsQueryNew","onQueryLanguageChange","getDefaultQueryString","useEffectOnce","onQueryStringChange","migratedQUery","DynamicLabelsCompletionItemProvider","dynamicLabelsCompletionItemProvider","DynamicLabelsField","containerRef","containerDiv","MathExpressionQueryField","updateElementHeight","maxPixelHeight","pixelHeight","pixelWidth","isAccountIdDefined","SQLGenerator","select","where","groupBy","orderBy","orderByDirection","parts","isTopLevelExpression","topLevelExpressionsCount","hasChildExpressions","andParts","exp","andCombined","wrapInParentheses","orParts","orCombined","groupByParts","prefix","property","specialCharacters","startsWithNumber","interpolated","getMetricNameFromExpression","selectExpression","getNamespaceFromExpression","fromExpression","getSchemaLabelKeys","isUsingWithSchema","sanitizeOperator","flattenOperatorExpressions","getFlattenedFilters","sql","flattenGroupByExpressions","getFlattenedGroupBys","stringArrayToDimensions","setSql","setNamespace","namespaceParam","labelKeys","setSchemaLabels","schemaLabels","setMetricName","removeMetricName","queryWithNoParams","setAggregation","aggregation","setOrderBy","setWithSchema","withSchema","setOperatorExpressionProperty","setOperatorExpressionName","setOperatorExpressionValue","setGroupByField","AGGREGATIONS","withSchemaEnabled","namespaceOptions","metricOptions","existingFilters","unusedDimensionKeys","OPERATORS","SQLFilter","filtersFromQuery","setFilters","cleaned","validExpressions","operatorExpression","validated","propertyNameError","operatorValueError","SQLGroupBy","groupBysFromQuery","baseOptions","completeExpressions","makeRenderItem","renderItem","GroupByItem","orderByDirections","SQLBuilderEditor","sqlString","fullQuery","sqlPreview","setSQLPreview","SQLCodeEditor","metricEditorModes","editorModes","MetricsQueryEditor","extraHeaderElementRight","codeEditorIsDirty","setCodeEditorIsDirty","onEditorModeChange","newMetricEditorMode","RadioButtonGroup","apiModes","dataIsStale","onRunQuery","queryMode","emptyLogsExpression","onQueryModeChange","metricInsightsCrossAccountEnabled","shouldDisplayMonitoringBadge","Badge","QueryEditor","setDataIsStale","setExtraHeaderElementLeft","setExtraHeaderElementRight","onChangeInternal","LogsQueryEditor","onDashboardLoadedHandler","dashboardId","orgId","grafanaVersion","cloudWatchQueries","logsQueries","isMetricSearchBuilder","module","exports","stringify","encode","ch","tmpAry","reserved","len","eat","expected","decode","beg","parseOne","sub","def","_i","resultSelector","buffers","completed","_loop_1","sourceIndex","buffer","countOrConfig","count","delay","soFar","sourceSub","resubscribe","notifier","notifierSubscriber_1","subscribeToSource","syncUnsub","isArray","argsOrArgArray"],"sourceRoot":""}