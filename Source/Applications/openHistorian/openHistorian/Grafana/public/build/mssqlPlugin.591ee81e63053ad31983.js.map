{"version":3,"sources":["webpack:///./public/app/features/datasources/utils/passwordHandlers.ts","webpack:///./public/app/plugins/datasource/mssql/response_parser.ts","webpack:///./public/app/plugins/datasource/mssql/datasource.ts","webpack:///./public/app/plugins/datasource/mssql/query_ctrl.ts","webpack:///./public/app/plugins/datasource/mssql/config_ctrl.ts","webpack:///./public/app/plugins/datasource/mssql/module.ts"],"names":["PasswordFieldEnum","createResetHandler","ctrl","field","event","preventDefault","current","undefined","secureJsonFields","secureJsonData","createChangeHandler","currentTarget","value","ResponseParser","res","data","results","key","queryRes","series","push","target","name","datapoints","points","refId","meta","tables","table","type","length","rowCount","columns","rows","textColIndex","this","findColIndex","valueColIndex","transformToKeyValueList","transformToSimpleList","i","containsKey","text","j","unique","Array","from","Set","_","map","colName","options","annotation","timeColumnIndex","timeEndColumnIndex","textColumnIndex","tagsColumnIndex","Promise","reject","message","list","row","timeEnd","Math","floor","time","tags","trim","split","MssqlDatasource","instanceSettings","templateSrv","getTemplateSrv","timeSrv","getTimeSrv","id","responseParser","interval","jsonData","timeInterval","variable","multi","includeAll","replace","val","join","queries","scopedVars","expandedQueries","query","datasource","rawSql","interpolateVariable","rawQuery","filter","targets","item","hide","intervalMs","maxDataPoints","datasourceId","format","resolve","getBackendSrv","datasourceRequest","url","method","range","valueOf","toString","to","then","processQueryResult","transformAnnotationResponse","optionalOptions","interpolatedQuery","timeRange","parseMetricFindQueryResult","status","catch","err","console","error","variableExists","MssqlQueryCtrl","$scope","$injector","alias","formats","panelCtrl","panel","events","on","PanelEvents","dataReceived","onDataReceived","bind","dataError","onDataError","getLocationSrv","update","inspect","inspectTab","partial","dataList","lastQueryError","QueryCtrl","templateUrl","MssqlConfigCtrl","encrypt","onPasswordReset","Password","onPasswordChange","MssqlAnnotationsQueryCtrl"],"mappings":"4FAOO,IAAKA,EAPZ,sG,SAOYA,K,oBAAAA,E,uCAAAA,M,KAqBL,IAAMC,EAAqB,SAACC,EAAYC,GAAb,OAA0C,SAC1EC,GAEAA,EAAMC,iBAENH,EAAKI,QAAQH,QAASI,EACtBL,EAAKI,QAAQE,iBAAiBL,IAAS,EACvCD,EAAKI,QAAQG,eAAiBP,EAAKI,QAAQG,gBAAkB,GAC7DP,EAAKI,QAAQG,eAAeN,GAAS,KAG1BO,EAAsB,SAACR,EAAWC,GAAZ,OAAyC,SAC1EC,GAEAF,EAAKI,QAAQG,eAAiBP,EAAKI,QAAQG,gBAAkB,GAC7DP,EAAKI,QAAQG,eAAeN,GAASC,EAAMO,cAAcC,S,4OCzCtCC,E,gMACAC,GACjB,IAAMC,EAAc,GAEpB,IAAKD,EAAIC,KAAKC,QACZ,MAAO,CAAED,QAGX,IAAK,IAAME,KAAOH,EAAIC,KAAKC,QAAS,CAClC,IAAME,EAAWJ,EAAIC,KAAKC,QAAQC,GAElC,GAAIC,EAASC,OAAQ,4BACnB,YAAqBD,EAASC,OAA9B,+CAAsC,KAA3BA,EAA2B,QACpCJ,EAAKK,KAAK,CACRC,OAAQF,EAAOG,KACfC,WAAYJ,EAAOK,OACnBC,MAAOP,EAASO,MAChBC,KAAMR,EAASQ,QANA,mFAWrB,GAAIR,EAASS,OAAQ,4BACnB,YAAoBT,EAASS,OAA7B,+CAAqC,KAA1BC,EAA0B,QACnCA,EAAMC,KAAO,QACbD,EAAMH,MAAQP,EAASO,MACvBG,EAAMF,KAAOR,EAASQ,KACtBX,EAAKK,KAAKQ,IALO,oFAUvB,MAAO,CAAEb,KAAMA,K,iDAGUU,EAAeT,GACxC,IAAKA,GAAmC,IAAxBA,EAAQD,KAAKe,QAA8D,IAA9Cd,EAAQD,KAAKC,QAAQS,GAAOC,KAAKK,SAC5E,MAAO,GAGT,IAAMC,EAAUhB,EAAQD,KAAKC,QAAQS,GAAOE,OAAO,GAAGK,QAChDC,EAAOjB,EAAQD,KAAKC,QAAQS,GAAOE,OAAO,GAAGM,KAC7CC,EAAeC,KAAKC,aAAaJ,EAAS,UAC1CK,EAAgBF,KAAKC,aAAaJ,EAAS,WAEjD,OAAuB,IAAnBA,EAAQF,SAAkC,IAAlBI,IAA0C,IAAnBG,EAC1CF,KAAKG,wBAAwBL,EAAMC,EAAcG,GAGnDF,KAAKI,sBAAsBN,K,8CAGZA,EAAWC,EAAsBG,GAGvD,IAFA,IAAMvB,EAAM,GAEH0B,EAAI,EAAGA,EAAIP,EAAKH,OAAQU,IAC1BL,KAAKM,YAAY3B,EAAKmB,EAAKO,GAAGN,KACjCpB,EAAIM,KAAK,CAAEsB,KAAMT,EAAKO,GAAGN,GAAetB,MAAOqB,EAAKO,GAAGH,KAI3D,OAAOvB,I,4CAGamB,GAGpB,IAFA,IAAMnB,EAAM,GAEH0B,EAAI,EAAGA,EAAIP,EAAKH,OAAQU,IAC/B,IAAK,IAAIG,EAAI,EAAGA,EAAIV,EAAKO,GAAGV,OAAQa,IAClC7B,EAAIM,KAAKa,EAAKO,GAAGG,IAIrB,IAAMC,EAASC,MAAMC,KAAK,IAAIC,IAAIjC,IAElC,OAAOkC,IAAEC,IAAIL,GAAQ,SAAAhC,GACnB,MAAO,CAAE8B,KAAM9B,Q,mCAINoB,EAAgBkB,GAC3B,IAAK,IAAIV,EAAI,EAAGA,EAAIR,EAAQF,OAAQU,IAClC,GAAIR,EAAQQ,GAAGE,OAASQ,EACtB,OAAOV,EAIX,OAAQ,I,kCAGE1B,EAAYG,GACtB,IAAK,IAAIuB,EAAI,EAAGA,EAAI1B,EAAIgB,OAAQU,IAC9B,GAAI1B,EAAI0B,GAAGE,OAASzB,EAClB,OAAO,EAGX,OAAO,I,kDAGmBkC,EAAcpC,GAQxC,IAPA,IAAMa,EAAQb,EAAKA,KAAKC,QAAQmC,EAAQC,WAAW9B,MAAMK,OAAO,GAE5D0B,GAAmB,EACnBC,GAAsB,EACtBC,GAAmB,EACnBC,GAAmB,EAEdhB,EAAI,EAAGA,EAAIZ,EAAMI,QAAQF,OAAQU,IACV,SAA1BZ,EAAMI,QAAQQ,GAAGE,KACnBW,EAAkBb,EACiB,YAA1BZ,EAAMI,QAAQQ,GAAGE,KAC1BY,EAAqBd,EACc,SAA1BZ,EAAMI,QAAQQ,GAAGE,KAC1Ba,EAAkBf,EACiB,SAA1BZ,EAAMI,QAAQQ,GAAGE,OAC1Bc,EAAkBhB,GAItB,IAAyB,IAArBa,EACF,OAAOI,QAAQC,OAAO,CAAEC,QAAS,gFAInC,IADA,IAAMC,EAAO,GACJpB,EAAI,EAAGA,EAAIZ,EAAMK,KAAKH,OAAQU,IAAK,CAC1C,IAAMqB,EAAMjC,EAAMK,KAAKO,GACjBsB,GACoB,IAAxBR,GAA6BO,EAAIP,GAAsBS,KAAKC,MAAMH,EAAIP,SAAuB/C,EAC/FqD,EAAKxC,KAAK,CACRgC,WAAYD,EAAQC,WACpBa,KAAMF,KAAKC,MAAMH,EAAIR,IACrBS,UACApB,KAAMmB,EAAIN,GACVW,KAAML,EAAIL,GAAmBK,EAAIL,GAAiBW,OAAOC,MAAM,WAAa,KAIhF,OAAOR,O,8pBClIJ,IAAMS,EAAb,WAME,WACEC,GAGA,IAFiBC,EAEjB,uDAF4CC,cAC3BC,EACjB,uDADoCC,cACpC,eAFiBH,cAEjB,KADiBE,UAEjBtC,KAAKb,KAAOgD,EAAiBhD,KAC7Ba,KAAKwC,GAAKL,EAAiBK,GAC3BxC,KAAKyC,eAAiB,IAAI/D,EAC1BsB,KAAK0C,UAAYP,EAAiBQ,UAAY,IAAIC,cAAgB,K,UAdtE,O,EAAA,G,EAAA,2CAiBsBnE,EAAYoE,GAC9B,MAAqB,iBAAVpE,EACLoE,EAASC,OAASD,EAASE,WACtB,IAAMtE,EAAMuE,QAAQ,KAAd,MAA4B,IAElCvE,EAIU,iBAAVA,EACFA,EAGYoC,IAAEC,IAAIrC,GAAO,SAAAwE,GAChC,MAAqB,iBAAVxE,EACFA,EAGF,IAAMwE,EAAID,QAAQ,KAAZ,MAA0B,OAErBE,KAAK,OArC7B,oDAyCIC,EACAC,GAC8B,WAC1BC,EAAkBF,EAYtB,OAXIA,GAAWA,EAAQxD,OAAS,IAC9B0D,EAAkBF,EAAQrC,KAAI,SAAAwC,GAO5B,O,+VANsB,CAAH,GACdA,EADc,CAEjBC,WAAY,EAAKpE,KACjBqE,OAAQ,EAAKpB,YAAYY,QAAQM,EAAME,OAAQJ,EAAY,EAAKK,qBAChEC,UAAU,QAKTL,IAxDX,4BA2DQrC,GAAc,WACZmC,EAAUtC,IAAE8C,OAAO3C,EAAQ4C,SAAS,SAAAC,GACxC,OAAqB,IAAdA,EAAKC,QACXhD,KAAI,SAAA+C,GACL,MAAO,CACLvE,MAAOuE,EAAKvE,MACZyE,WAAY/C,EAAQ+C,WACpBC,cAAehD,EAAQgD,cACvBC,aAAc,EAAKzB,GACnBgB,OAAQ,EAAKpB,YAAYY,QAAQa,EAAKL,OAAQxC,EAAQoC,WAAY,EAAKK,qBACvES,OAAQL,EAAKK,WAIjB,OAAuB,IAAnBf,EAAQxD,OACH2B,QAAQ6C,QAAQ,CAAEvF,KAAM,KAG1BwF,0BACJC,kBAAkB,CACjBC,IAAK,kBACLC,OAAQ,OACR3F,KAAM,CACJ+B,KAAMK,EAAQwD,MAAM7D,KAAK8D,UAAUC,WACnCC,GAAI3D,EAAQwD,MAAMG,GAAGF,UAAUC,WAC/BvB,QAASA,KAGZyB,KAAK5E,KAAKyC,eAAeoC,sBAvFhC,sCA0FkB7D,GAAc,WAC5B,IAAKA,EAAQC,WAAWyC,SACtB,OAAOpC,QAAQC,OAAO,CAAEC,QAAS,2CAGnC,IAAM8B,EAAQ,CACZhE,MAAO0B,EAAQC,WAAW9B,KAC1B8E,aAAcjE,KAAKwC,GACnBgB,OAAQxD,KAAKoC,YAAYY,QAAQhC,EAAQC,WAAWyC,SAAU1C,EAAQoC,WAAYpD,KAAKyD,qBACvFS,OAAQ,SAGV,OAAOE,0BACJC,kBAAkB,CACjBC,IAAK,kBACLC,OAAQ,OACR3F,KAAM,CACJ+B,KAAMK,EAAQwD,MAAM7D,KAAK8D,UAAUC,WACnCC,GAAI3D,EAAQwD,MAAMG,GAAGF,UAAUC,WAC/BvB,QAAS,CAACG,MAGbsB,MAAK,SAAChG,GAAD,OAAe,EAAK6D,eAAeqC,4BAA4B9D,EAASpC,QAhHpF,sCAmHkB0E,EAAeyB,GAAiD,WAC1EzF,EAAQ,UACRyF,GAAmBA,EAAgBlC,UAAYkC,EAAgBlC,SAAS1D,OAC1EG,EAAQyF,EAAgBlC,SAAS1D,MAGnC,IAAM6F,EAAoB,CACxB1F,MAAOA,EACP2E,aAAcjE,KAAKwC,GACnBgB,OAAQxD,KAAKoC,YAAYY,QAAQM,EAAO,GAAItD,KAAKyD,qBACjDS,OAAQ,SAGJM,EAAQxE,KAAKsC,QAAQ2C,YACrBrG,EAAO,CACXuE,QAAS,CAAC6B,GACVrE,KAAM6D,EAAM7D,KAAK8D,UAAUC,WAC3BC,GAAIH,EAAMG,GAAGF,UAAUC,YAGzB,OAAON,0BACJC,kBAAkB,CACjBC,IAAK,kBACLC,OAAQ,OACR3F,KAAMA,IAEPgG,MAAK,SAAChG,GAAD,OAAe,EAAK6D,eAAeyC,2BAA2B5F,EAAOV,QA7IjF,uCAiJI,OAAOwF,0BACJC,kBAAkB,CACjBC,IAAK,kBACLC,OAAQ,OACR3F,KAAM,CACJ+B,KAAM,KACNgE,GAAI,MACJxB,QAAS,CACP,CACE7D,MAAO,IACPyE,WAAY,EACZC,cAAe,EACfC,aAAcjE,KAAKwC,GACnBgB,OAAQ,WACRU,OAAQ,aAKfU,MAAK,SAACjG,GACL,MAAO,CAAEwG,OAAQ,UAAW3D,QAAS,6BAEtC4D,OAAM,SAACC,GAEN,OADAC,QAAQC,MAAMF,GACVA,EAAIzG,MAAQyG,EAAIzG,KAAK4C,QAChB,CAAE2D,OAAQ,QAAS3D,QAAS6D,EAAIzG,KAAK4C,SAErC,CAAE2D,OAAQ,QAAS3D,QAAS6D,EAAIF,aA5KjD,6CAiLyBjG,GACrB,IAAMsE,EAAStE,EAAOsE,OAAOR,QAAQ,MAAO,IAC5C,OAAOhD,KAAKoC,YAAYoD,eAAehC,Q,2BAnL3C,K,2vBCQA,IAWaiC,EAAb,YASE,WAAYC,EAAaC,GAAkC,M,IAAA,O,4FAAA,S,EACzD,U,EAAA,eAAMD,EAAQC,K,8CAETzG,OAAOgF,OAAS,EAAKhF,OAAOgF,QAAU,cAC3C,EAAKhF,OAAO0G,MAAQ,GACpB,EAAKC,QAAU,CACb,CAAEtF,KAAM,cAAe9B,MAAO,eAC9B,CAAE8B,KAAM,QAAS9B,MAAO,UAGrB,EAAKS,OAAOsE,SAEmB,UAA9B,EAAKsC,UAAUC,MAAMrG,MACvB,EAAKR,OAAOgF,OAAS,QACrB,EAAKhF,OAAOsE,OAAS,YAErB,EAAKtE,OAAOsE,OApCC,kMAwCjB,EAAKsC,UAAUE,OAAOC,GAAGC,cAAYC,aAAc,EAAKC,eAAeC,KAApB,MAAgCX,GACnF,EAAKI,UAAUE,OAAOC,GAAGC,cAAYI,UAAW,EAAKC,YAAYF,KAAjB,MAA6BX,GArBpB,E,UAT7D,wC,kOAAA,M,EAAA,G,EAAA,4CAkCIc,2BAAiBC,OAAO,CACtBnD,MAAO,CAAEoD,QAAS1G,KAAK+F,MAAMvD,GAAImE,WAAY,SAC7CC,SAAS,MApCf,qCAwCiBC,GACb7G,KAAK8G,eAAiB,OAzC1B,kCA4CczB,GACV,GAAIA,EAAIzG,MAAQyG,EAAIzG,KAAKC,QAAS,CAChC,IAAME,EAAWsG,EAAIzG,KAAKC,QAAQmB,KAAKd,OAAOI,OAC1CP,IACFiB,KAAK8G,eAAiB/H,EAASwG,a,2BAhDvC,GAAoCwB,aAAvBtB,EACJuB,YAAc,6B,gBCvBhB,IAAMC,EAQX,WAAYvB,I,4FAAa,SACvB1F,KAAK7B,QAAQwE,SAASuE,QAAUlH,KAAK7B,QAAQwE,SAASuE,SAAW,QACjElH,KAAKmH,gBAAkBrJ,YAAmBkC,KAAMnC,IAAkBuJ,UAClEpH,KAAKqH,iBAAmB9I,YAAoByB,KAAMnC,IAAkBuJ,W,qBAX3DH,EACJD,YAAc,uB,qOCHvB,IAWMM,EAMJ,c,4FAAc,SACZtH,KAAKiB,WAAWyC,SAAW1D,KAAKiB,WAAWyC,UAlB1B,mMAWf4D,EACGN,YAAc","file":"mssqlPlugin.591ee81e63053ad31983.js","sourcesContent":["/**\n * Set of handlers for secure password field in Angular components. They handle backward compatibility with\n * passwords stored in plain text fields.\n */\n\nimport { SyntheticEvent } from 'react';\n\nexport enum PasswordFieldEnum {\n  Password = 'password',\n  BasicAuthPassword = 'basicAuthPassword',\n}\n\n/**\n * Basic shape for settings controllers in at the moment mostly angular datasource plugins.\n */\nexport type Ctrl = {\n  current: {\n    secureJsonFields: {\n      [key: string]: boolean;\n    };\n    secureJsonData?: {\n      [key: string]: string;\n    };\n    password?: string;\n    basicAuthPassword?: string;\n  };\n};\n\nexport const createResetHandler = (ctrl: Ctrl, field: PasswordFieldEnum) => (\n  event: SyntheticEvent<HTMLInputElement>\n) => {\n  event.preventDefault();\n  // Reset also normal plain text password to remove it and only save it in secureJsonData.\n  ctrl.current[field] = undefined;\n  ctrl.current.secureJsonFields[field] = false;\n  ctrl.current.secureJsonData = ctrl.current.secureJsonData || {};\n  ctrl.current.secureJsonData[field] = '';\n};\n\nexport const createChangeHandler = (ctrl: any, field: PasswordFieldEnum) => (\n  event: SyntheticEvent<HTMLInputElement>\n) => {\n  ctrl.current.secureJsonData = ctrl.current.secureJsonData || {};\n  ctrl.current.secureJsonData[field] = event.currentTarget.value;\n};\n","import _ from 'lodash';\n\nexport default class ResponseParser {\n  processQueryResult(res: any) {\n    const data: any[] = [];\n\n    if (!res.data.results) {\n      return { data };\n    }\n\n    for (const key in res.data.results) {\n      const queryRes = res.data.results[key];\n\n      if (queryRes.series) {\n        for (const series of queryRes.series) {\n          data.push({\n            target: series.name,\n            datapoints: series.points,\n            refId: queryRes.refId,\n            meta: queryRes.meta,\n          });\n        }\n      }\n\n      if (queryRes.tables) {\n        for (const table of queryRes.tables) {\n          table.type = 'table';\n          table.refId = queryRes.refId;\n          table.meta = queryRes.meta;\n          data.push(table);\n        }\n      }\n    }\n\n    return { data: data };\n  }\n\n  parseMetricFindQueryResult(refId: string, results: any) {\n    if (!results || results.data.length === 0 || results.data.results[refId].meta.rowCount === 0) {\n      return [];\n    }\n\n    const columns = results.data.results[refId].tables[0].columns;\n    const rows = results.data.results[refId].tables[0].rows;\n    const textColIndex = this.findColIndex(columns, '__text');\n    const valueColIndex = this.findColIndex(columns, '__value');\n\n    if (columns.length === 2 && textColIndex !== -1 && valueColIndex !== -1) {\n      return this.transformToKeyValueList(rows, textColIndex, valueColIndex);\n    }\n\n    return this.transformToSimpleList(rows);\n  }\n\n  transformToKeyValueList(rows: any, textColIndex: number, valueColIndex: number) {\n    const res = [];\n\n    for (let i = 0; i < rows.length; i++) {\n      if (!this.containsKey(res, rows[i][textColIndex])) {\n        res.push({ text: rows[i][textColIndex], value: rows[i][valueColIndex] });\n      }\n    }\n\n    return res;\n  }\n\n  transformToSimpleList(rows: any) {\n    const res = [];\n\n    for (let i = 0; i < rows.length; i++) {\n      for (let j = 0; j < rows[i].length; j++) {\n        res.push(rows[i][j]);\n      }\n    }\n\n    const unique = Array.from(new Set(res));\n\n    return _.map(unique, value => {\n      return { text: value };\n    });\n  }\n\n  findColIndex(columns: any[], colName: string) {\n    for (let i = 0; i < columns.length; i++) {\n      if (columns[i].text === colName) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  containsKey(res: any[], key: any) {\n    for (let i = 0; i < res.length; i++) {\n      if (res[i].text === key) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  transformAnnotationResponse(options: any, data: any) {\n    const table = data.data.results[options.annotation.name].tables[0];\n\n    let timeColumnIndex = -1;\n    let timeEndColumnIndex = -1;\n    let textColumnIndex = -1;\n    let tagsColumnIndex = -1;\n\n    for (let i = 0; i < table.columns.length; i++) {\n      if (table.columns[i].text === 'time') {\n        timeColumnIndex = i;\n      } else if (table.columns[i].text === 'timeend') {\n        timeEndColumnIndex = i;\n      } else if (table.columns[i].text === 'text') {\n        textColumnIndex = i;\n      } else if (table.columns[i].text === 'tags') {\n        tagsColumnIndex = i;\n      }\n    }\n\n    if (timeColumnIndex === -1) {\n      return Promise.reject({ message: 'Missing mandatory time column (with time column alias) in annotation query.' });\n    }\n\n    const list = [];\n    for (let i = 0; i < table.rows.length; i++) {\n      const row = table.rows[i];\n      const timeEnd =\n        timeEndColumnIndex !== -1 && row[timeEndColumnIndex] ? Math.floor(row[timeEndColumnIndex]) : undefined;\n      list.push({\n        annotation: options.annotation,\n        time: Math.floor(row[timeColumnIndex]),\n        timeEnd,\n        text: row[textColumnIndex],\n        tags: row[tagsColumnIndex] ? row[tagsColumnIndex].trim().split(/\\s*,\\s*/) : [],\n      });\n    }\n\n    return list;\n  }\n}\n","import _ from 'lodash';\nimport ResponseParser from './response_parser';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { ScopedVars } from '@grafana/data';\nimport { getTemplateSrv, TemplateSrv } from 'app/features/templating/template_srv';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\n//Types\nimport { MssqlQueryForInterpolation } from './types';\n\nexport class MssqlDatasource {\n  id: any;\n  name: any;\n  responseParser: ResponseParser;\n  interval: string;\n\n  constructor(\n    instanceSettings: any,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv(),\n    private readonly timeSrv: TimeSrv = getTimeSrv()\n  ) {\n    this.name = instanceSettings.name;\n    this.id = instanceSettings.id;\n    this.responseParser = new ResponseParser();\n    this.interval = (instanceSettings.jsonData || {}).timeInterval || '1m';\n  }\n\n  interpolateVariable(value: any, variable: any) {\n    if (typeof value === 'string') {\n      if (variable.multi || variable.includeAll) {\n        return \"'\" + value.replace(/'/g, `''`) + \"'\";\n      } else {\n        return value;\n      }\n    }\n\n    if (typeof value === 'number') {\n      return value;\n    }\n\n    const quotedValues = _.map(value, val => {\n      if (typeof value === 'number') {\n        return value;\n      }\n\n      return \"'\" + val.replace(/'/g, `''`) + \"'\";\n    });\n    return quotedValues.join(',');\n  }\n\n  interpolateVariablesInQueries(\n    queries: MssqlQueryForInterpolation[],\n    scopedVars: ScopedVars\n  ): MssqlQueryForInterpolation[] {\n    let expandedQueries = queries;\n    if (queries && queries.length > 0) {\n      expandedQueries = queries.map(query => {\n        const expandedQuery = {\n          ...query,\n          datasource: this.name,\n          rawSql: this.templateSrv.replace(query.rawSql, scopedVars, this.interpolateVariable),\n          rawQuery: true,\n        };\n        return expandedQuery;\n      });\n    }\n    return expandedQueries;\n  }\n\n  query(options: any) {\n    const queries = _.filter(options.targets, item => {\n      return item.hide !== true;\n    }).map(item => {\n      return {\n        refId: item.refId,\n        intervalMs: options.intervalMs,\n        maxDataPoints: options.maxDataPoints,\n        datasourceId: this.id,\n        rawSql: this.templateSrv.replace(item.rawSql, options.scopedVars, this.interpolateVariable),\n        format: item.format,\n      };\n    });\n\n    if (queries.length === 0) {\n      return Promise.resolve({ data: [] });\n    }\n\n    return getBackendSrv()\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: options.range.from.valueOf().toString(),\n          to: options.range.to.valueOf().toString(),\n          queries: queries,\n        },\n      })\n      .then(this.responseParser.processQueryResult);\n  }\n\n  annotationQuery(options: any) {\n    if (!options.annotation.rawQuery) {\n      return Promise.reject({ message: 'Query missing in annotation definition' });\n    }\n\n    const query = {\n      refId: options.annotation.name,\n      datasourceId: this.id,\n      rawSql: this.templateSrv.replace(options.annotation.rawQuery, options.scopedVars, this.interpolateVariable),\n      format: 'table',\n    };\n\n    return getBackendSrv()\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: options.range.from.valueOf().toString(),\n          to: options.range.to.valueOf().toString(),\n          queries: [query],\n        },\n      })\n      .then((data: any) => this.responseParser.transformAnnotationResponse(options, data));\n  }\n\n  metricFindQuery(query: string, optionalOptions: { variable: { name: string } }) {\n    let refId = 'tempvar';\n    if (optionalOptions && optionalOptions.variable && optionalOptions.variable.name) {\n      refId = optionalOptions.variable.name;\n    }\n\n    const interpolatedQuery = {\n      refId: refId,\n      datasourceId: this.id,\n      rawSql: this.templateSrv.replace(query, {}, this.interpolateVariable),\n      format: 'table',\n    };\n\n    const range = this.timeSrv.timeRange();\n    const data = {\n      queries: [interpolatedQuery],\n      from: range.from.valueOf().toString(),\n      to: range.to.valueOf().toString(),\n    };\n\n    return getBackendSrv()\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: data,\n      })\n      .then((data: any) => this.responseParser.parseMetricFindQueryResult(refId, data));\n  }\n\n  testDatasource() {\n    return getBackendSrv()\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: '5m',\n          to: 'now',\n          queries: [\n            {\n              refId: 'A',\n              intervalMs: 1,\n              maxDataPoints: 1,\n              datasourceId: this.id,\n              rawSql: 'SELECT 1',\n              format: 'table',\n            },\n          ],\n        },\n      })\n      .then((res: any) => {\n        return { status: 'success', message: 'Database Connection OK' };\n      })\n      .catch((err: any) => {\n        console.error(err);\n        if (err.data && err.data.message) {\n          return { status: 'error', message: err.data.message };\n        } else {\n          return { status: 'error', message: err.status };\n        }\n      });\n  }\n\n  targetContainsTemplate(target: any) {\n    const rawSql = target.rawSql.replace('$__', '');\n    return this.templateSrv.variableExists(rawSql);\n  }\n}\n","import _ from 'lodash';\nimport { QueryCtrl } from 'app/plugins/sdk';\nimport { auto } from 'angular';\nimport { PanelEvents } from '@grafana/data';\nimport { getLocationSrv } from '@grafana/runtime';\n\nexport interface MssqlQuery {\n  refId: string;\n  format: string;\n  alias: string;\n  rawSql: string;\n}\n\nexport interface QueryMeta {\n  sql: string;\n}\n\nconst defaultQuery = `SELECT\n  $__timeEpoch(<time_column>),\n  <value column> as value,\n  <series name column> as metric\nFROM\n  <table name>\nWHERE\n  $__timeFilter(time_column)\nORDER BY\n  <time_column> ASC`;\n\nexport class MssqlQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  formats: any[];\n  target: MssqlQuery;\n  lastQueryError: string | null;\n  showHelp: boolean;\n\n  /** @ngInject */\n  constructor($scope: any, $injector: auto.IInjectorService) {\n    super($scope, $injector);\n\n    this.target.format = this.target.format || 'time_series';\n    this.target.alias = '';\n    this.formats = [\n      { text: 'Time series', value: 'time_series' },\n      { text: 'Table', value: 'table' },\n    ];\n\n    if (!this.target.rawSql) {\n      // special handling when in table panel\n      if (this.panelCtrl.panel.type === 'table') {\n        this.target.format = 'table';\n        this.target.rawSql = 'SELECT 1';\n      } else {\n        this.target.rawSql = defaultQuery;\n      }\n    }\n\n    this.panelCtrl.events.on(PanelEvents.dataReceived, this.onDataReceived.bind(this), $scope);\n    this.panelCtrl.events.on(PanelEvents.dataError, this.onDataError.bind(this), $scope);\n  }\n\n  showQueryInspector() {\n    getLocationSrv().update({\n      query: { inspect: this.panel.id, inspectTab: 'query' },\n      partial: true,\n    });\n  }\n\n  onDataReceived(dataList: any) {\n    this.lastQueryError = null;\n  }\n\n  onDataError(err: any) {\n    if (err.data && err.data.results) {\n      const queryRes = err.data.results[this.target.refId];\n      if (queryRes) {\n        this.lastQueryError = queryRes.error;\n      }\n    }\n  }\n}\n","import {\n  createChangeHandler,\n  createResetHandler,\n  PasswordFieldEnum,\n} from '../../../features/datasources/utils/passwordHandlers';\n\nexport class MssqlConfigCtrl {\n  static templateUrl = 'partials/config.html';\n\n  current: any;\n  onPasswordReset: ReturnType<typeof createResetHandler>;\n  onPasswordChange: ReturnType<typeof createChangeHandler>;\n\n  /** @ngInject */\n  constructor($scope: any) {\n    this.current.jsonData.encrypt = this.current.jsonData.encrypt || 'false';\n    this.onPasswordReset = createResetHandler(this, PasswordFieldEnum.Password);\n    this.onPasswordChange = createChangeHandler(this, PasswordFieldEnum.Password);\n  }\n}\n","import { MssqlDatasource } from './datasource';\nimport { MssqlQueryCtrl } from './query_ctrl';\nimport { MssqlConfigCtrl } from './config_ctrl';\n\nconst defaultQuery = `SELECT\n    <time_column> as time,\n    <text_column> as text,\n    <tags_column> as tags\n  FROM\n    <table name>\n  WHERE\n    $__timeFilter(time_column)\n  ORDER BY\n    <time_column> ASC`;\n\nclass MssqlAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n\n  annotation: any;\n\n  /** @ngInject */\n  constructor() {\n    this.annotation.rawQuery = this.annotation.rawQuery || defaultQuery;\n  }\n}\n\nexport {\n  MssqlDatasource,\n  MssqlDatasource as Datasource,\n  MssqlQueryCtrl as QueryCtrl,\n  MssqlConfigCtrl as ConfigCtrl,\n  MssqlAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n"],"sourceRoot":""}