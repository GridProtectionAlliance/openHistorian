{"version":3,"sources":["webpack:///./public/app/features/datasources/DataSourceDashboards.tsx"],"names":["DataSourceDashboards","onImport","dashboard","overwrite","props","dataSource","importDashboard","data","pluginId","path","inputs","push","name","type","value","title","onRemove","removeDashboard","importedUri","this","loadDataSource","pageId","loadPluginDashboards","dashboards","navModel","isLoading","Contents","PureComponent","mapDispatchToProps","hot","module","connect","state","getRouteParamsId","location","getNavModel","navIndex","plugins","getDataSource","dataSources","isLoadingPluginDashboards"],"mappings":"mzCAkCO,IAAMA,EAAb,6KAQEC,SAAW,SAACC,EAA4BC,GAAuB,MACrB,EAAKC,MAArCC,EADqD,EACrDA,WAAYC,EADyC,EACzCA,gBACdC,EAAY,CAChBC,SAAUN,EAAUM,SACpBC,KAAMP,EAAUO,KAChBN,YACAO,OAAQ,IAGNL,GACFE,EAAKG,OAAOC,KAAK,CACfC,KAAM,IACNC,KAAM,aACNL,SAAUH,EAAWQ,KACrBC,MAAOT,EAAWO,OAItBN,EAAgBC,EAAML,EAAUa,QA1BpC,EA6BEC,SAAW,SAACd,GACV,EAAKE,MAAMa,gBAAgBf,EAAUgB,cA9BzC,E,YAAA,S,kOAAA,M,EAAA,G,EAAA,iC,EAAA,yIAEuCC,KAAKf,MAAhCgB,EAFZ,EAEYA,eAAgBC,EAF5B,EAE4BA,OAF5B,SAIUD,EAAeC,GAJzB,OAKIF,KAAKf,MAAMkB,uBALf,iD,8KAAA,4EAiCW,aACqCH,KAAKf,MAAzCmB,EADD,EACCA,WAAYC,EADb,EACaA,SAAUC,EADvB,EACuBA,UAC9B,OACE,kBAAC,IAAD,CAAMD,SAAUA,GACd,kBAAC,IAAKE,SAAN,CAAeD,UAAWA,GACxB,kBAAC,IAAD,CACEF,WAAYA,EACZtB,SAAU,SAACC,EAAWC,GAAZ,OAA0B,EAAKF,SAASC,EAAWC,IAC7Da,SAAU,SAAAd,GAAS,OAAI,EAAKc,SAASd,a,2BAzCjD,GAA0CyB,iBA4D1C,IAAMC,EAAqB,CACzBtB,oBACAc,mBACAE,yBACAL,qBAGaY,wBAAIC,EAAJD,CAAYE,mBAlB3B,SAAyBC,GACvB,IAAMX,EAASY,YAAiBD,EAAME,UACtC,MAAO,CACLV,SAAUW,YAAYH,EAAMI,SAAP,gCAA0Cf,IAC/DA,OAAQA,EACRE,WAAYS,EAAMK,QAAQd,WAC1BlB,WAAYiC,YAAcN,EAAMO,YAAalB,GAC7CI,UAAWO,EAAMK,QAAQG,6BAWuBZ,EAAzBG,CAA6C/B,K","file":"DataSourceDashboards.591ee81e63053ad31983.js","sourcesContent":["// Libraries\nimport React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\n\n// Components\nimport Page from 'app/core/components/Page/Page';\nimport DashboardTable from './DashboardsTable';\n\n// Actions & Selectors\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { getRouteParamsId } from 'app/core/selectors/location';\nimport { loadDataSource } from './state/actions';\nimport { loadPluginDashboards } from '../plugins/state/actions';\nimport { importDashboard, removeDashboard } from '../dashboard/state/actions';\nimport { getDataSource } from './state/selectors';\n\n// Types\nimport { PluginDashboard, StoreState } from 'app/types';\nimport { DataSourceSettings } from '@grafana/data';\nimport { NavModel } from '@grafana/data';\n\nexport interface Props {\n  navModel: NavModel;\n  dashboards: PluginDashboard[];\n  dataSource: DataSourceSettings;\n  pageId: number;\n  importDashboard: typeof importDashboard;\n  loadDataSource: typeof loadDataSource;\n  loadPluginDashboards: typeof loadPluginDashboards;\n  removeDashboard: typeof removeDashboard;\n  isLoading: boolean;\n}\n\nexport class DataSourceDashboards extends PureComponent<Props> {\n  async componentDidMount() {\n    const { loadDataSource, pageId } = this.props;\n\n    await loadDataSource(pageId);\n    this.props.loadPluginDashboards();\n  }\n\n  onImport = (dashboard: PluginDashboard, overwrite: boolean) => {\n    const { dataSource, importDashboard } = this.props;\n    const data: any = {\n      pluginId: dashboard.pluginId,\n      path: dashboard.path,\n      overwrite,\n      inputs: [],\n    };\n\n    if (dataSource) {\n      data.inputs.push({\n        name: '*',\n        type: 'datasource',\n        pluginId: dataSource.type,\n        value: dataSource.name,\n      });\n    }\n\n    importDashboard(data, dashboard.title);\n  };\n\n  onRemove = (dashboard: PluginDashboard) => {\n    this.props.removeDashboard(dashboard.importedUri);\n  };\n\n  render() {\n    const { dashboards, navModel, isLoading } = this.props;\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={isLoading}>\n          <DashboardTable\n            dashboards={dashboards}\n            onImport={(dashboard, overwrite) => this.onImport(dashboard, overwrite)}\n            onRemove={dashboard => this.onRemove(dashboard)}\n          />\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState) {\n  const pageId = getRouteParamsId(state.location);\n  return {\n    navModel: getNavModel(state.navIndex, `datasource-dashboards-${pageId}`),\n    pageId: pageId,\n    dashboards: state.plugins.dashboards,\n    dataSource: getDataSource(state.dataSources, pageId),\n    isLoading: state.plugins.isLoadingPluginDashboards,\n  };\n}\n\nconst mapDispatchToProps = {\n  importDashboard,\n  loadDataSource,\n  loadPluginDashboards,\n  removeDashboard,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(DataSourceDashboards));\n"],"sourceRoot":""}