{"version":3,"file":"debugPanel.fd6073389b14ba349795.js","mappings":"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","sources":["webpack://grafana/./public/app/features/visualization/data-hover/DataHoverView.tsx","webpack://grafana/./public/app/plugins/panel/debug/CursorView.tsx","webpack://grafana/./public/app/plugins/panel/debug/EventBusLogger.tsx","webpack://grafana/./public/app/plugins/panel/debug/RenderInfoViewer.tsx","webpack://grafana/./public/app/plugins/panel/debug/StateView.tsx","webpack://grafana/./public/app/plugins/panel/debug/panelcfg.gen.ts","webpack://grafana/./public/app/plugins/panel/debug/DebugPanel.tsx","webpack://grafana/./public/app/plugins/panel/debug/module.tsx"],"sourcesContent":["import { css } from '@emotion/css';\n\nimport {\n  arrayUtils,\n  DataFrame,\n  Field,\n  formattedValueToString,\n  getFieldDisplayName,\n  GrafanaTheme2,\n  LinkModel,\n} from '@grafana/data';\nimport { SortOrder, TooltipDisplayMode } from '@grafana/schema';\nimport { TextLink, useStyles2 } from '@grafana/ui';\nimport { renderValue } from 'app/plugins/panel/geomap/utils/uiUtils';\n\nimport { ExemplarHoverView } from './ExemplarHoverView';\n\nexport interface Props {\n  data?: DataFrame; // source data\n  rowIndex?: number | null; // the hover row\n  columnIndex?: number | null; // the hover column\n  sortOrder?: SortOrder;\n  mode?: TooltipDisplayMode | null;\n  header?: string;\n  padding?: number;\n}\n\nexport interface DisplayValue {\n  name: string;\n  value: unknown;\n  valueString: string;\n  highlight: boolean;\n}\n\nexport function getDisplayValuesAndLinks(\n  data: DataFrame,\n  rowIndex: number,\n  columnIndex?: number | null,\n  sortOrder?: SortOrder,\n  mode?: TooltipDisplayMode | null\n) {\n  const fields = data.fields;\n  const hoveredField = columnIndex != null ? fields[columnIndex] : null;\n\n  const visibleFields = fields.filter((f) => !Boolean(f.config.custom?.hideFrom?.tooltip));\n  const traceIDField = visibleFields.find((field) => field.name === 'traceID') || fields[0];\n  const orderedVisibleFields = [];\n  // Only include traceID if it's visible and put it in front.\n  if (visibleFields.filter((field) => traceIDField === field).length > 0) {\n    orderedVisibleFields.push(traceIDField);\n  }\n  orderedVisibleFields.push(...visibleFields.filter((field) => traceIDField !== field));\n\n  if (orderedVisibleFields.length === 0) {\n    return null;\n  }\n\n  const displayValues: DisplayValue[] = [];\n  const links: Array<LinkModel<Field>> = [];\n  const linkLookup = new Set<string>();\n\n  for (const field of orderedVisibleFields) {\n    if (mode === TooltipDisplayMode.Single && field !== hoveredField) {\n      continue;\n    }\n\n    const value = field.values[rowIndex];\n    const fieldDisplay = field.display ? field.display(value) : { text: `${value}`, numeric: +value };\n\n    if (field.getLinks) {\n      field.getLinks({ calculatedValue: fieldDisplay, valueRowIndex: rowIndex }).forEach((link) => {\n        const key = `${link.title}/${link.href}`;\n        if (!linkLookup.has(key)) {\n          links.push(link);\n          linkLookup.add(key);\n        }\n      });\n    }\n\n    displayValues.push({\n      name: getFieldDisplayName(field, data),\n      value,\n      valueString: formattedValueToString(fieldDisplay),\n      highlight: field === hoveredField,\n    });\n  }\n\n  if (sortOrder && sortOrder !== SortOrder.None) {\n    displayValues.sort((a, b) => arrayUtils.sortValues(sortOrder)(a.value, b.value));\n  }\n\n  return { displayValues, links };\n}\n\nexport const DataHoverView = ({ data, rowIndex, columnIndex, sortOrder, mode, header, padding = 0 }: Props) => {\n  const styles = useStyles2(getStyles, padding);\n\n  if (!data || rowIndex == null) {\n    return null;\n  }\n\n  const dispValuesAndLinks = getDisplayValuesAndLinks(data, rowIndex, columnIndex, sortOrder, mode);\n\n  if (dispValuesAndLinks == null) {\n    return null;\n  }\n\n  const { displayValues, links } = dispValuesAndLinks;\n\n  if (header === 'Exemplar') {\n    return <ExemplarHoverView displayValues={displayValues} links={links} header={header} />;\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      {header && (\n        <div className={styles.header}>\n          <span className={styles.title}>{header}</span>\n        </div>\n      )}\n      <table className={styles.infoWrap}>\n        <tbody>\n          {displayValues.map((displayValue, i) => (\n            <tr key={`${i}/${rowIndex}`}>\n              <th>{displayValue.name}</th>\n              <td>{renderValue(displayValue.valueString)}</td>\n            </tr>\n          ))}\n          {links.map((link, i) => (\n            <tr key={i}>\n              <th>Link</th>\n              <td colSpan={2}>\n                <TextLink href={link.href} external={link.target === '_blank'} weight={'medium'} inline={false}>\n                  {link.title}\n                </TextLink>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\nconst getStyles = (theme: GrafanaTheme2, padding = 0) => {\n  return {\n    wrapper: css({\n      padding: `${padding}px`,\n      background: theme.components.tooltip.background,\n      borderRadius: theme.shape.borderRadius(2),\n    }),\n    header: css({\n      background: theme.colors.background.secondary,\n      alignItems: 'center',\n      alignContent: 'center',\n      display: 'flex',\n      paddingBottom: theme.spacing(1),\n    }),\n    title: css({\n      fontWeight: theme.typography.fontWeightMedium,\n      overflow: 'hidden',\n      display: 'inline-block',\n      whiteSpace: 'nowrap',\n      textOverflow: 'ellipsis',\n      flexGrow: 1,\n    }),\n    infoWrap: css({\n      padding: theme.spacing(1),\n      background: 'transparent',\n      border: 'none',\n      th: {\n        fontWeight: theme.typography.fontWeightMedium,\n        padding: theme.spacing(0.25, 2, 0.25, 0),\n      },\n\n      tr: {\n        borderBottom: `1px solid ${theme.colors.border.weak}`,\n        '&:last-child': {\n          borderBottom: 'none',\n        },\n      },\n    }),\n    link: css({\n      color: theme.colors.text.link,\n    }),\n  };\n};\n","import { Component } from 'react';\nimport { Subscription } from 'rxjs';\n\nimport {\n  EventBus,\n  LegacyGraphHoverEvent,\n  LegacyGraphHoverClearEvent,\n  DataHoverEvent,\n  DataHoverClearEvent,\n  BusEventBase,\n} from '@grafana/data';\nimport { CustomScrollbar } from '@grafana/ui';\nimport { DataHoverView } from 'app/features/visualization/data-hover/DataHoverView';\n\ninterface Props {\n  eventBus: EventBus;\n}\n\ninterface State {\n  event?: BusEventBase;\n}\nexport class CursorView extends Component<Props, State> {\n  subscription = new Subscription();\n  state: State = {};\n\n  componentDidMount() {\n    const { eventBus } = this.props;\n\n    this.subscription.add(\n      eventBus.subscribe(DataHoverEvent, (event) => {\n        this.setState({ event });\n      })\n    );\n\n    this.subscription.add(\n      eventBus.subscribe(DataHoverClearEvent, (event) => {\n        this.setState({ event });\n      })\n    );\n\n    this.subscription.add(\n      eventBus.subscribe(LegacyGraphHoverEvent, (event) => {\n        this.setState({ event });\n      })\n    );\n\n    this.subscription.add(\n      eventBus.subscribe(LegacyGraphHoverClearEvent, (event) => {\n        this.setState({ event });\n      })\n    );\n  }\n\n  componentWillUnmount() {\n    this.subscription.unsubscribe();\n  }\n\n  render() {\n    const { event } = this.state;\n    if (!event) {\n      return <div>no events yet</div>;\n    }\n    const { type, payload, origin } = event;\n    return (\n      <CustomScrollbar autoHeightMin=\"100%\" autoHeightMax=\"100%\">\n        <h3>Origin: {(origin as any)?.path}</h3>\n        <span>Type: {type}</span>\n        {Boolean(payload) && (\n          <>\n            <pre>{JSON.stringify(payload.point, null, '  ')}</pre>\n            {payload.data && (\n              <DataHoverView data={payload.data} rowIndex={payload.rowIndex} columnIndex={payload.columnIndex} />\n            )}\n          </>\n        )}\n      </CustomScrollbar>\n    );\n  }\n}\n","import { PureComponent } from 'react';\nimport { PartialObserver, Unsubscribable } from 'rxjs';\n\nimport {\n  BusEvent,\n  CircularVector,\n  DataHoverEvent,\n  DataHoverClearEvent,\n  DataSelectEvent,\n  EventBus,\n} from '@grafana/data';\nimport { CustomScrollbar } from '@grafana/ui';\n\ninterface Props {\n  eventBus: EventBus;\n}\n\ninterface State {\n  isError?: boolean;\n  counter: number;\n}\n\ninterface BusEventEx {\n  key: number;\n  type: string;\n  path: string;\n  payload: any;\n}\nlet counter = 100;\n\nexport class EventBusLoggerPanel extends PureComponent<Props, State> {\n  history = new CircularVector<BusEventEx>({ capacity: 40, append: 'head' });\n  subs: Unsubscribable[];\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = { counter };\n\n    const subs: Unsubscribable[] = [];\n    subs.push(props.eventBus.getStream(DataHoverEvent).subscribe(this.eventObserver));\n    subs.push(props.eventBus.getStream(DataHoverClearEvent).subscribe(this.eventObserver));\n    subs.push(props.eventBus.getStream(DataSelectEvent).subscribe(this.eventObserver));\n    this.subs = subs;\n  }\n\n  componentWillUnmount() {\n    for (const sub of this.subs) {\n      sub.unsubscribe();\n    }\n  }\n\n  eventObserver: PartialObserver<BusEvent> = {\n    next: (event: BusEvent) => {\n      const origin: any = event.origin;\n      this.history.add({\n        key: counter++,\n        type: event.type,\n        path: origin?.path,\n        payload: event.payload,\n      });\n      this.setState({ counter });\n    },\n  };\n\n  render() {\n    return (\n      <CustomScrollbar autoHeightMin=\"100%\" autoHeightMax=\"100%\">\n        {this.history.map((v, idx) => (\n          <div key={v.key}>\n            {JSON.stringify(v.path)} {v.type} / X:{JSON.stringify(v.payload.x)} / Y:{JSON.stringify(v.payload.y)}\n          </div>\n        ))}\n      </CustomScrollbar>\n    );\n  }\n}\n","import { Component } from 'react';\n\nimport {\n  compareArrayValues,\n  compareDataFrameStructures,\n  fieldReducers,\n  getFieldDisplayName,\n  getFrameDisplayName,\n  PanelProps,\n  ReducerID,\n} from '@grafana/data';\nimport { IconButton } from '@grafana/ui';\n\nimport { Options, UpdateConfig } from './panelcfg.gen';\n\ntype Props = PanelProps<Options>;\n\ntype UpdateCounters = {\n  [K in keyof UpdateConfig]: number;\n};\n\nexport class RenderInfoViewer extends Component<Props> {\n  // Intentionally not state to avoid overhead -- yes, things will be 1 tick behind\n  lastRender = Date.now();\n  counters: UpdateCounters = {\n    render: 0,\n    dataChanged: 0,\n    schemaChanged: 0,\n  };\n\n  shouldComponentUpdate(prevProps: Props) {\n    const { data, options } = this.props;\n\n    if (prevProps.data !== data) {\n      this.counters.dataChanged++;\n\n      if (options.counters?.schemaChanged) {\n        const oldSeries = prevProps.data?.series;\n        const series = data.series;\n        if (series && oldSeries) {\n          const sameStructure = compareArrayValues(series, oldSeries, compareDataFrameStructures);\n          if (!sameStructure) {\n            this.counters.schemaChanged++;\n          }\n        }\n      }\n    }\n    return true; // always render?\n  }\n\n  resetCounters = () => {\n    this.counters = {\n      render: 0,\n      dataChanged: 0,\n      schemaChanged: 0,\n    };\n    this.forceUpdate();\n  };\n\n  render() {\n    const { data, options } = this.props;\n    const showCounters = options.counters ?? {\n      render: false,\n      dataChanged: false,\n      schemaChanged: false,\n    };\n    this.counters.render++;\n    const now = Date.now();\n    const elapsed = now - this.lastRender;\n    this.lastRender = now;\n\n    const reducer = fieldReducers.get(ReducerID.lastNotNull);\n\n    return (\n      <div>\n        <div>\n          <IconButton name=\"step-backward\" title=\"reset counters\" onClick={this.resetCounters} tooltip=\"Step back\" />\n          <span>\n            {showCounters.render && <span>Render: {this.counters.render}&nbsp;</span>}\n            {showCounters.dataChanged && <span>Data: {this.counters.dataChanged}&nbsp;</span>}\n            {showCounters.schemaChanged && <span>Schema: {this.counters.schemaChanged}&nbsp;</span>}\n            <span>TIME: {elapsed}ms</span>\n          </span>\n        </div>\n\n        {data.series &&\n          data.series.map((frame, idx) => (\n            <div key={`${idx}/${frame.refId}`}>\n              <h4>\n                {getFrameDisplayName(frame, idx)} ({frame.length})\n              </h4>\n              <table className=\"filter-table\">\n                <thead>\n                  <tr>\n                    <td>Field</td>\n                    <td>Type</td>\n                    <td>Last</td>\n                  </tr>\n                </thead>\n                <tbody>\n                  {frame.fields.map((field, idx) => {\n                    const v = reducer.reduce!(field, false, false)[reducer.id];\n                    return (\n                      <tr key={`${idx}/${field.name}`}>\n                        <td>{getFieldDisplayName(field, frame, data.series)}</td>\n                        <td>{field.type}</td>\n                        <td>{`${v}`}</td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            </div>\n          ))}\n      </div>\n    );\n  }\n}\n","import { FormEvent } from 'react';\n\nimport { PanelOptionsEditorProps, PanelProps } from '@grafana/data';\nimport { Field, Input, usePanelContext } from '@grafana/ui';\n\nimport { Options } from './panelcfg.gen';\n\nexport function StateView(props: PanelProps<Options>) {\n  const context = usePanelContext();\n\n  const onChangeName = (e: FormEvent<HTMLInputElement>) => {\n    context.onInstanceStateChange!({\n      name: e.currentTarget.value,\n    });\n  };\n\n  return (\n    <>\n      <Field label=\"State name\">\n        <Input value={context.instanceState?.name ?? ''} onChange={onChangeName} />\n      </Field>\n    </>\n  );\n}\n\nexport function StateViewEditor({ value, context, onChange, item }: PanelOptionsEditorProps<string>) {\n  return <div>Current value: {context.instanceState?.name} </div>;\n}\n","// Code generated - EDITING IS FUTILE. DO NOT EDIT.\n//\n// Generated by:\n//     public/app/plugins/gen.go\n// Using jennies:\n//     TSTypesJenny\n//     PluginTsTypesJenny\n//\n// Run 'make gen-cue' from repository root to regenerate.\n\nexport type UpdateConfig = {\n  render: boolean,\n  dataChanged: boolean,\n  schemaChanged: boolean,\n};\n\nexport enum DebugMode {\n  Cursor = 'cursor',\n  Events = 'events',\n  Render = 'render',\n  State = 'State',\n  ThrowError = 'ThrowError',\n}\n\nexport interface Options {\n  counters?: UpdateConfig;\n  mode: DebugMode;\n}\n","import { Component } from 'react';\n\nimport { PanelProps } from '@grafana/data';\n\nimport { CursorView } from './CursorView';\nimport { EventBusLoggerPanel } from './EventBusLogger';\nimport { RenderInfoViewer } from './RenderInfoViewer';\nimport { StateView } from './StateView';\nimport { Options, DebugMode } from './panelcfg.gen';\n\ntype Props = PanelProps<Options>;\n\nexport class DebugPanel extends Component<Props> {\n  render() {\n    const { options } = this.props;\n\n    switch (options.mode) {\n      case DebugMode.Events:\n        return <EventBusLoggerPanel eventBus={this.props.eventBus} />;\n      case DebugMode.Cursor:\n        return <CursorView eventBus={this.props.eventBus} />;\n      case DebugMode.State:\n        return <StateView {...this.props} />;\n      case DebugMode.ThrowError:\n        throw new Error('I failed you and for that i am deeply sorry');\n      default:\n        return <RenderInfoViewer {...this.props} />;\n    }\n  }\n}\n","import { PanelPlugin } from '@grafana/data';\n\nimport { DebugPanel } from './DebugPanel';\nimport { StateViewEditor } from './StateView';\nimport { DebugMode, Options } from './panelcfg.gen';\n\nexport const plugin = new PanelPlugin<Options>(DebugPanel).useFieldConfig().setPanelOptions((builder) => {\n  builder\n    .addSelect({\n      path: 'mode',\n      name: 'Mode',\n      defaultValue: DebugMode.Render,\n      settings: {\n        options: [\n          { label: 'Render', value: DebugMode.Render },\n          { label: 'Events', value: DebugMode.Events },\n          { label: 'Cursor', value: DebugMode.Cursor },\n          { label: 'Cursor', value: DebugMode.Cursor },\n          { label: 'Share state', value: DebugMode.State },\n          { label: 'Throw error', value: DebugMode.ThrowError },\n        ],\n      },\n    })\n    .addCustomEditor({\n      id: 'stateView',\n      path: 'stateView',\n      name: 'State view',\n      defaultValue: '',\n      showIf: ({ mode }) => mode === DebugMode.State,\n      editor: StateViewEditor,\n    })\n    .addBooleanSwitch({\n      path: 'counters.render',\n      name: 'Render count',\n      defaultValue: true,\n      showIf: ({ mode }) => mode === DebugMode.Render,\n    })\n    .addBooleanSwitch({\n      path: 'counters.dataChanged',\n      name: 'Data changed count',\n      defaultValue: true,\n      showIf: ({ mode }) => mode === DebugMode.Render,\n    })\n    .addBooleanSwitch({\n      path: 'counters.schemaChanged',\n      name: 'Schema changed count',\n      defaultValue: true,\n      showIf: ({ mode }) => mode === DebugMode.Render,\n    })\n    .addDashboardPicker({\n      path: 'dashboardUID',\n      name: 'Dashboard',\n      settings: {\n        placeholder: 'Select dashboard',\n        isClearable: true,\n      },\n    });\n});\n"],"names":["getDisplayValuesAndLinks","data","rowIndex","columnIndex","sortOrder","mode","fields","hoveredField","visibleFields","f","traceIDField","field","orderedVisibleFields","displayValues","links","linkLookup","value","fieldDisplay","link","key","a","b","DataHoverView","header","padding","styles","getStyles","dispValuesAndLinks","displayValue","theme","CursorView","Subscription","eventBus","event","type","payload","origin","CustomScrollbar","counter","EventBusLoggerPanel","props","CircularVector","subs","sub","v","idx","RenderInfoViewer","prevProps","options","oldSeries","series","showCounters","now","elapsed","reducer","fieldReducer","IconButton","frame","StateView","context","onChangeName","e","Field","Input","StateViewEditor","onChange","item","DebugMode","DebugPanel","PanelPlugin","builder"],"sourceRoot":""}