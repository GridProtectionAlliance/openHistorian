{"version":3,"sources":["webpack:///./public/app/features/folders/state/actions.ts","webpack:///./public/app/features/folders/components/NewDashboardsFolder.tsx","webpack:///./public/app/features/folders/state/navModel.ts"],"names":["getFolderByUid","uid","dispatch","backendSrv","folder","loadFolder","updateNavIndex","buildNavModel","saveFolder","put","title","version","res","appEvents","emit","AppEvents","alertSuccess","updateLocation","path","url","deleteFolder","delete","getFolderPermissions","get","permissions","loadFolderPermissions","toUpdateItem","item","userId","teamId","role","permission","updateFolderPermission","itemToUpdate","level","getStore","itemsToUpdate","inherited","updated","push","post","items","removeFolderPermission","itemToDelete","addFolderPermission","newItem","createNewFolder","folderName","getBackendSrv","newFolder","locationUtil","stripBaseFromUrl","initialFormModel","NewDashboardsFolder","onSubmit","formData","props","validateFolderName","validationSrv","validateNewFolderName","then","catch","e","message","navModel","this","Contents","defaultValues","register","errors","label","invalid","error","name","ref","required","validate","v","type","PureComponent","mapDispatchToProps","connect","state","getNavModel","navIndex","icon","id","subTitle","text","breadcrumbs","children","active","getLoadingNav","tabIndex","main","canSave","canEdit","canAdmin","node"],"mappings":"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","file":"NewDashboardsFolder.591ee81e63053ad31983.js","sourcesContent":["import { AppEvents, locationUtil } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport { FolderState, ThunkResult } from 'app/types';\nimport { DashboardAcl, DashboardAclUpdateDTO, NewDashboardAclItem, PermissionLevel } from 'app/types/acl';\nimport { updateLocation, updateNavIndex } from 'app/core/actions';\nimport { buildNavModel } from './navModel';\nimport appEvents from 'app/core/app_events';\nimport { loadFolder, loadFolderPermissions } from './reducers';\n\nexport function getFolderByUid(uid: string): ThunkResult<void> {\n  return async dispatch => {\n    const folder = await backendSrv.getFolderByUid(uid);\n    dispatch(loadFolder(folder));\n    dispatch(updateNavIndex(buildNavModel(folder)));\n  };\n}\n\nexport function saveFolder(folder: FolderState): ThunkResult<void> {\n  return async dispatch => {\n    const res = await backendSrv.put(`/api/folders/${folder.uid}`, {\n      title: folder.title,\n      version: folder.version,\n    });\n\n    // this should be redux action at some point\n    appEvents.emit(AppEvents.alertSuccess, ['Folder saved']);\n\n    dispatch(updateLocation({ path: `${res.url}/settings` }));\n  };\n}\n\nexport function deleteFolder(uid: string): ThunkResult<void> {\n  return async dispatch => {\n    await backendSrv.delete(`/api/folders/${uid}`);\n    dispatch(updateLocation({ path: `dashboards` }));\n  };\n}\n\nexport function getFolderPermissions(uid: string): ThunkResult<void> {\n  return async dispatch => {\n    const permissions = await backendSrv.get(`/api/folders/${uid}/permissions`);\n    dispatch(loadFolderPermissions(permissions));\n  };\n}\n\nfunction toUpdateItem(item: DashboardAcl): DashboardAclUpdateDTO {\n  return {\n    userId: item.userId,\n    teamId: item.teamId,\n    role: item.role,\n    permission: item.permission,\n  };\n}\n\nexport function updateFolderPermission(itemToUpdate: DashboardAcl, level: PermissionLevel): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const folder = getStore().folder;\n    const itemsToUpdate = [];\n\n    for (const item of folder.permissions) {\n      if (item.inherited) {\n        continue;\n      }\n\n      const updated = toUpdateItem(item);\n\n      // if this is the item we want to update, update it's permission\n      if (itemToUpdate === item) {\n        updated.permission = level;\n      }\n\n      itemsToUpdate.push(updated);\n    }\n\n    await backendSrv.post(`/api/folders/${folder.uid}/permissions`, { items: itemsToUpdate });\n    await dispatch(getFolderPermissions(folder.uid));\n  };\n}\n\nexport function removeFolderPermission(itemToDelete: DashboardAcl): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const folder = getStore().folder;\n    const itemsToUpdate = [];\n\n    for (const item of folder.permissions) {\n      if (item.inherited || item === itemToDelete) {\n        continue;\n      }\n      itemsToUpdate.push(toUpdateItem(item));\n    }\n\n    await backendSrv.post(`/api/folders/${folder.uid}/permissions`, { items: itemsToUpdate });\n    await dispatch(getFolderPermissions(folder.uid));\n  };\n}\n\nexport function addFolderPermission(newItem: NewDashboardAclItem): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const folder = getStore().folder;\n    const itemsToUpdate = [];\n\n    for (const item of folder.permissions) {\n      if (item.inherited) {\n        continue;\n      }\n      itemsToUpdate.push(toUpdateItem(item));\n    }\n\n    itemsToUpdate.push({\n      userId: newItem.userId,\n      teamId: newItem.teamId,\n      role: newItem.role,\n      permission: newItem.permission,\n    });\n\n    await backendSrv.post(`/api/folders/${folder.uid}/permissions`, { items: itemsToUpdate });\n    await dispatch(getFolderPermissions(folder.uid));\n  };\n}\n\nexport function createNewFolder(folderName: string): ThunkResult<void> {\n  return async dispatch => {\n    const newFolder = await getBackendSrv().post('/api/folders', { title: folderName });\n    appEvents.emit(AppEvents.alertSuccess, ['Folder Created', 'OK']);\n    dispatch(updateLocation({ path: locationUtil.stripBaseFromUrl(newFolder.url) }));\n  };\n}\n","import React, { PureComponent } from 'react';\nimport { connect, MapDispatchToProps, MapStateToProps } from 'react-redux';\nimport { NavModel } from '@grafana/data';\nimport { Button, Input, Form, Field } from '@grafana/ui';\nimport Page from 'app/core/components/Page/Page';\nimport { createNewFolder } from '../state/actions';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { StoreState } from 'app/types';\nimport validationSrv from '../../manage-dashboards/services/ValidationSrv';\n\ninterface OwnProps {}\n\ninterface ConnectedProps {\n  navModel: NavModel;\n}\n\ninterface DispatchProps {\n  createNewFolder: typeof createNewFolder;\n}\n\ninterface FormModel {\n  folderName: string;\n}\n\nconst initialFormModel: FormModel = { folderName: '' };\n\ntype Props = OwnProps & ConnectedProps & DispatchProps;\n\nexport class NewDashboardsFolder extends PureComponent<Props> {\n  onSubmit = (formData: FormModel) => {\n    this.props.createNewFolder(formData.folderName);\n  };\n\n  validateFolderName = (folderName: string) => {\n    return validationSrv\n      .validateNewFolderName(folderName)\n      .then(() => {\n        return true;\n      })\n      .catch(e => {\n        return e.message;\n      });\n  };\n\n  render() {\n    return (\n      <Page navModel={this.props.navModel}>\n        <Page.Contents>\n          <h3>New Dashboard Folder</h3>\n          <Form defaultValues={initialFormModel} onSubmit={this.onSubmit}>\n            {({ register, errors }) => (\n              <>\n                <Field\n                  label=\"Folder name\"\n                  invalid={!!errors.folderName}\n                  error={errors.folderName && errors.folderName.message}\n                >\n                  <Input\n                    name=\"folderName\"\n                    ref={register({\n                      required: 'Folder name is required.',\n                      validate: async v => await this.validateFolderName(v),\n                    })}\n                  />\n                </Field>\n                <Button type=\"submit\">Create</Button>\n              </>\n            )}\n          </Form>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, OwnProps, StoreState> = state => ({\n  navModel: getNavModel(state.navIndex, 'manage-dashboards'),\n});\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, OwnProps> = {\n  createNewFolder,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NewDashboardsFolder);\n","import { FolderDTO } from 'app/types';\nimport { NavModelItem, NavModel } from '@grafana/data';\n\nexport function buildNavModel(folder: FolderDTO): NavModelItem {\n  return {\n    icon: 'folder',\n    id: 'manage-folder',\n    subTitle: 'Manage folder dashboards & permissions',\n    url: '',\n    text: folder.title,\n    breadcrumbs: [{ title: 'Dashboards', url: 'dashboards' }],\n    children: [\n      {\n        active: false,\n        icon: 'apps',\n        id: `folder-dashboards-${folder.uid}`,\n        text: 'Dashboards',\n        url: folder.url,\n      },\n      {\n        active: false,\n        icon: 'lock',\n        id: `folder-permissions-${folder.uid}`,\n        text: 'Permissions',\n        url: `${folder.url}/permissions`,\n      },\n      {\n        active: false,\n        icon: 'cog',\n        id: `folder-settings-${folder.uid}`,\n        text: 'Settings',\n        url: `${folder.url}/settings`,\n      },\n    ],\n  };\n}\n\nexport function getLoadingNav(tabIndex: number): NavModel {\n  const main = buildNavModel({\n    id: 1,\n    uid: 'loading',\n    title: 'Loading',\n    url: 'url',\n    canSave: false,\n    canEdit: false,\n    canAdmin: false,\n    version: 0,\n  });\n\n  main.children![tabIndex].active = true;\n\n  return {\n    main: main,\n    node: main.children![tabIndex],\n  };\n}\n"],"sourceRoot":""}