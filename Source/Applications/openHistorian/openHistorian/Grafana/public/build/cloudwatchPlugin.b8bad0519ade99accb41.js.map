{"version":3,"file":"cloudwatchPlugin.b8bad0519ade99accb41.js","mappings":"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","sources":["webpack://grafana/./public/app/plugins/datasource/cloudwatch/cloudwatch-sql/language.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/dynamic-labels/language.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/metric-math/language.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/utils/utils.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/LogGroupSelector.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/XrayLinkConfig.tsx","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/TemplateTag/TemplateTag.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/inlineArrayTransformer/inlineArrayTransformer.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/stripIndentTransformer/stripIndentTransformer.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/trimResultTransformer/trimResultTransformer.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/commaLists/commaLists.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/commaListsAnd/commaListsAnd.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/commaListsOr/commaListsOr.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/splitStringTransformer/splitStringTransformer.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/removeNonPrintingValuesTransformer/removeNonPrintingValuesTransformer.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/html/html.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/replaceSubstitutionTransformer/replaceSubstitutionTransformer.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/safeHtml/safeHtml.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/replaceResultTransformer/replaceResultTransformer.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/oneLine/oneLine.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/oneLineTrim/oneLineTrim.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/oneLineCommaLists/oneLineCommaLists.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/oneLineCommaListsOr/oneLineCommaListsOr.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/oneLineCommaListsAnd/oneLineCommaListsAnd.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/inlineLists/inlineLists.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/oneLineInlineLists/oneLineInlineLists.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/stripIndent/stripIndent.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/stripIndents/stripIndents.js","webpack://grafana/./public/app/plugins/datasource/cloudwatch/syntax.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/LogsCheatSheet.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/guards.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/Dimensions/FilterItem.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/Dimensions/Dimensions.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/Forms.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/aws_url.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/CloudWatchLink.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/utils/query/getStatsGroups.ts","webpack://grafana/./.yarn/__virtual__/react-use-virtual-cea8e826dc/3/opt/drone/yarncache/react-use-npm-17.4.0-0ef4521544-0889da919b.zip/node_modules/react-use/esm/useCustomCompareEffect.js","webpack://grafana/./.yarn/__virtual__/react-use-virtual-cea8e826dc/3/opt/drone/yarncache/react-use-npm-17.4.0-0ef4521544-0889da919b.zip/node_modules/react-use/esm/misc/isDeepEqual.js","webpack://grafana/./.yarn/__virtual__/react-use-virtual-cea8e826dc/3/opt/drone/yarncache/react-use-npm-17.4.0-0ef4521544-0889da919b.zip/node_modules/react-use/esm/useDeepCompareEffect.js","webpack://grafana/./public/app/plugins/datasource/cloudwatch/hooks.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/MetricsQueryEditor/MetricsQueryHeader.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/QueryHeader.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/LogsQueryField.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/LogsQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/MetricStatEditor/MetricStatEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/expressions.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/cloudwatch-sql/SQLGenerator.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/SQLBuilderEditor/utils.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/SQLBuilderEditor/SQLBuilderSelectRow.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/SQLBuilderEditor/SQLFilter.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/SQLBuilderEditor/SQLGroupBy.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/SQLBuilderEditor/SQLOrderByGroup.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/SQLBuilderEditor/SQLBuilderEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/metric-math/definition.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/monarch/commands.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/monarch/register.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/MathExpressionQueryField.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/cloudwatch-sql/definition.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/SQLCodeEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/monarch/LinkedToken.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/monarch/linkedTokenBuilder.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/monarch/types.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/dynamic-labels/definition.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/DynamicLabelsField.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/dynamic-labels/CompletionItemProvider.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/MetricsQueryEditor/Alias.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/migrations/metricQueryMigrations.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/MetricsQueryEditor/usePreparedMetricsQuery.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/MetricsQueryEditor/MetricsQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/PanelQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/AnnotationQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/annotationSupport.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/monarch/CompletionItemProvider.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/cloudwatch-sql/completion/types.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/cloudwatch-sql/completion/statementPosition.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/cloudwatch-sql/completion/suggestionKind.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/cloudwatch-sql/completion/tokenUtils.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/cloudwatch-sql/completion/CompletionItemProvider.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/ThrottlingErrorMessage.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language_provider.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/memoizedDebounce.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/metric-math/completion/types.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/metric-math/completion/statementPosition.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/metric-math/completion/suggestionKind.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/metric-math/completion/CompletionItemProvider.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/utils/datalinks.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/utils/logsRetry.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/utils/rxjs/increasingInterval.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/migrations/variableQueryMigrations.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/VariableQueryEditor/MultiFilterItem.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/VariableQueryEditor/MultiFilter.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/VariableQueryEditor/VariableQueryField.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/VariableQueryEditor/VariableTextField.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/VariableQueryEditor/VariableQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/variables.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/datasource.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/module.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/ConfigEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/MetaInspector.tsx","webpack://grafana/../../opt/drone/yarncache/@grafana-aws-sdk-npm-0.0.37-8e06caf3f3-3994e78182.zip/node_modules/@grafana/aws-sdk/dist/index.production.js","webpack://grafana/../../opt/drone/yarncache/@grafana-aws-sdk-npm-0.0.37-8e06caf3f3-3994e78182.zip/node_modules/@grafana/aws-sdk/index.js","webpack://grafana/../../opt/drone/yarncache/fast-deep-equal-npm-3.1.3-790edcfcf5-e21a9d8d84.zip/node_modules/fast-deep-equal/react.js","webpack://grafana/../../opt/drone/yarncache/jsurl-npm-0.1.5-9e17f93783-50b614908d.zip/node_modules/jsurl/index.js","webpack://grafana/../../opt/drone/yarncache/jsurl-npm-0.1.5-9e17f93783-50b614908d.zip/node_modules/jsurl/lib/jsurl.js"],"sourcesContent":["import type * as monacoType from 'monaco-editor/esm/vs/editor/editor.api';\n\ninterface CloudWatchLanguage extends monacoType.languages.IMonarchLanguage {\n  keywords: string[];\n  operators: string[];\n  builtinFunctions: string[];\n}\n\nexport const SELECT = 'SELECT';\nexport const FROM = 'FROM';\nexport const WHERE = 'WHERE';\nexport const GROUP = 'GROUP';\nexport const ORDER = 'ORDER';\nexport const BY = 'BY';\nexport const DESC = 'DESC';\nexport const ASC = 'ASC';\nexport const LIMIT = 'LIMIT';\nexport const WITH = 'WITH';\nexport const SCHEMA = 'SCHEMA';\n\nexport const KEYWORDS = [SELECT, FROM, WHERE, GROUP, ORDER, BY, DESC, ASC, LIMIT, WITH, SCHEMA];\nexport const STATISTICS = ['AVG', 'COUNT', 'MAX', 'MIN', 'SUM'];\n\nexport const AND = 'AND';\nexport const LOGICAL_OPERATORS = [AND];\n\nexport const EQUALS = '=';\nexport const NOT_EQUALS = '!=';\nexport const COMPARISON_OPERATORS = [EQUALS, NOT_EQUALS];\n\nexport const language: CloudWatchLanguage = {\n  defaultToken: '',\n  tokenPostfix: '.sql',\n  ignoreCase: true,\n  brackets: [\n    { open: '[', close: ']', token: 'delimiter.square' },\n    { open: '(', close: ')', token: 'delimiter.parenthesis' },\n  ],\n  keywords: KEYWORDS,\n  operators: LOGICAL_OPERATORS,\n  builtinFunctions: STATISTICS,\n  tokenizer: {\n    root: [\n      [/\\$[a-zA-Z0-9-_]+/, 'variable'],\n      { include: '@comments' },\n      { include: '@whitespace' },\n      { include: '@numbers' },\n      { include: '@strings' },\n      { include: '@complexIdentifiers' },\n      [/[;,.]/, 'delimiter'],\n      [/[()]/, '@brackets'],\n      [\n        /[\\w@#$]+/,\n        {\n          cases: {\n            '@keywords': 'keyword',\n            '@operators': 'operator',\n            '@builtinFunctions': 'predefined',\n            '@default': 'identifier',\n          },\n        },\n      ],\n      [/[=!%&+\\-*/|~^]/, 'operator'], // TODO: strip these options\n    ],\n    whitespace: [[/\\s+/, 'white']],\n    comments: [[/--+.*/, 'comment']],\n    comment: [\n      [/[^*/]+/, 'comment'],\n      [/./, 'comment'],\n    ],\n    numbers: [\n      [/0[xX][0-9a-fA-F]*/, 'number'],\n      [/[$][+-]*\\d*(\\.\\d*)?/, 'number'],\n      [/((\\d+(\\.\\d*)?)|(\\.\\d+))([eE][\\-+]?\\d+)?/, 'number'],\n    ],\n    strings: [\n      [/N'/, { token: 'string', next: '@string' }],\n      [/'/, { token: 'string', next: '@string' }],\n      [/\"/, { token: 'type', next: '@string_double' }],\n    ],\n    string: [\n      [/[^']+/, 'string'],\n      [/''/, 'string'],\n      [/'/, { token: 'string', next: '@pop' }],\n    ],\n    string_double: [\n      [/[^\\\\\"]+/, 'type'],\n      [/\"/, 'type', '@pop'],\n    ],\n    complexIdentifiers: [\n      [/\\[/, { token: 'identifier.quote', next: '@bracketedIdentifier' }],\n      [/\"/, { token: 'identifier.quote', next: '@quotedIdentifier' }],\n    ],\n    bracketedIdentifier: [\n      [/[^\\]]+/, 'identifier'],\n      [/]]/, 'identifier'],\n      [/]/, { token: 'identifier.quote', next: '@pop' }],\n    ],\n    quotedIdentifier: [\n      [/[^\"]+/, 'identifier'],\n      [/\"\"/, 'identifier'],\n      [/\"/, { token: 'identifier.quote', next: '@pop' }],\n    ],\n  },\n};\n\nexport const conf: monacoType.languages.LanguageConfiguration = {\n  comments: {\n    lineComment: '--',\n    blockComment: ['/*', '*/'],\n  },\n  brackets: [\n    ['{', '}'],\n    ['[', ']'],\n    ['(', ')'],\n  ],\n  autoClosingPairs: [\n    { open: '{', close: '}' },\n    { open: '[', close: ']' },\n    { open: '(', close: ')' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n  ],\n  surroundingPairs: [\n    { open: '{', close: '}' },\n    { open: '[', close: ']' },\n    { open: '(', close: ')' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n  ],\n};\n","import type * as monacoType from 'monaco-editor/esm/vs/editor/editor.api';\n\n// Dynamic labels: https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html\nexport const DYNAMIC_LABEL_PATTERNS = [\n  '${DATAPOINT_COUNT}',\n  '${FIRST}',\n  '${FIRST_LAST_RANGE}',\n  '${FIRST_LAST_TIME_RANGE}',\n  '${FIRST_TIME}',\n  '${FIRST_TIME_RELATIVE}',\n  '${LABEL}',\n  '${LAST}',\n  '${LAST_TIME}',\n  '${LAST_TIME_RELATIVE}',\n  '${MAX}',\n  '${MAX_TIME}',\n  '${MAX_TIME_RELATIVE}',\n  '${MIN}',\n  '${MIN_MAX_RANGE}',\n  '${MIN_MAX_TIME_RANGE}',\n  '${MIN_TIME}',\n  '${MIN_TIME_RELATIVE}',\n  \"${PROP('AccountId')}\",\n  \"${PROP('MetricName')}\",\n  \"${PROP('Namespace')}\",\n  \"${PROP('Period')}\",\n  \"${PROP('Region')}\",\n  \"${PROP('Stat')}\",\n  '${SUM}',\n];\n\nexport const language: monacoType.languages.IMonarchLanguage = {\n  id: 'dynamicLabels',\n  ignoreCase: false,\n  tokenizer: {\n    root: [\n      { include: '@whitespace' },\n      { include: '@builtInFunctions' },\n      { include: '@string' },\n      [/\\$\\{PROP\\('Dim.[a-zA-Z0-9-_]?.*'\\)\\}+/, 'predefined'], //custom handling for dimension patterns\n    ],\n    builtInFunctions: [[DYNAMIC_LABEL_PATTERNS.map(escapeRegExp).join('|'), 'predefined']],\n    whitespace: [[/\\s+/, 'white']],\n    string: [],\n  },\n};\n\nexport const conf: monacoType.languages.LanguageConfiguration = {};\n\nfunction escapeRegExp(string: string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n","import type * as monacoType from 'monaco-editor/esm/vs/editor/editor.api';\n\n// Metric Math: https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html\nexport const METRIC_MATH_FNS = [\n  'ABS',\n  'ANOMALY_DETECTION_BAND',\n  'AVG',\n  'CEIL',\n  'DATAPOINT_COUNT',\n  'DIFF',\n  'DIFF_TIME',\n  'FILL',\n  'FIRST',\n  'LAST',\n  'FLOOR',\n  'IF',\n  'INSIGHT_RULE_METRIC',\n  'LOG',\n  'LOG10',\n  'MAX',\n  'METRIC_COUNT',\n  'METRICS',\n  'MIN',\n  'MINUTE',\n  'HOUR',\n  'DAY',\n  'DATE',\n  'MONTH',\n  'YEAR',\n  'EPOCH',\n  'PERIOD',\n  'RATE',\n  'REMOVE_EMPTY',\n  'RUNNING_SUM',\n  'SEARCH',\n  'SERVICE_QUOTA',\n  'SLICE',\n  'SORT',\n  'STDDEV',\n  'SUM',\n  'TIME_SERIES',\n];\n\nexport const METRIC_MATH_STATISTIC_KEYWORD_STRINGS = ['Average', 'Maximum', 'Minimum', 'Sum', 'SampleCount']; // second arguments to SEARCH function\n\nexport const METRIC_MATH_KEYWORDS = ['REPEAT', 'LINEAR', 'ASC', 'DSC']; // standalone magic arguments to functions\n\nexport const METRIC_MATH_OPERATORS = [\n  '+',\n  '-',\n  '*',\n  '/',\n  '^',\n  '==',\n  '!=',\n  '<=',\n  '>=',\n  '<',\n  '>',\n  'AND',\n  '&&',\n  'OR',\n  '||',\n];\n\nexport const METRIC_MATH_PERIODS = [10, 60, 300, 900, 3000, 21600, 86400];\n\nexport const language: monacoType.languages.IMonarchLanguage = {\n  id: 'metricMath',\n  ignoreCase: false,\n  brackets: [\n    { open: '[', close: ']', token: 'delimiter.square' },\n    { open: '(', close: ')', token: 'delimiter.parenthesis' },\n    { open: '{', close: '}', token: 'delimiter.curly' },\n  ],\n  tokenizer: {\n    root: [{ include: '@nonNestableStates' }, { include: '@strings' }],\n    nonNestableStates: [\n      { include: '@variables' },\n      { include: '@whitespace' },\n      { include: '@numbers' },\n      { include: '@assignment' },\n      { include: '@keywords' },\n      { include: '@operators' },\n      { include: '@builtInFunctions' },\n      [/[;,.]/, 'delimiter'],\n      [/[(){}\\[\\]]/, '@brackets'], // [], (), {} are all brackets\n    ],\n    keywords: [[METRIC_MATH_KEYWORDS.map(escapeRegExp).join('|'), 'keyword']],\n    operators: [[METRIC_MATH_OPERATORS.map(escapeRegExp).join('|'), 'operator']],\n    builtInFunctions: [[METRIC_MATH_FNS.map(escapeRegExp).join('|'), 'predefined']],\n    variables: [\n      [/\\$[a-zA-Z0-9-_]+/, 'variable'], // $ followed by any letter/number we assume could be grafana template variable\n    ],\n    whitespace: [[/\\s+/, 'white']],\n    assignment: [[/=/, 'tag']],\n    numbers: [\n      [/0[xX][0-9a-fA-F]*/, 'number'],\n      [/[$][+-]*\\d*(\\.\\d*)?/, 'number'],\n      [/((\\d+(\\.\\d*)?)|(\\.\\d+))([eE][\\-+]?\\d+)?/, 'number'],\n    ],\n    // states that start other states (aka nested states):\n    strings: [\n      [/'/, { token: 'string', next: '@string' }],\n      [/\"/, { token: 'type', next: '@string_double' }],\n    ],\n    string: [\n      [/{/, { token: 'delimiter.curly', next: '@nestedCurly' }], // escape out of string and into nestedCurly\n      [/\\(/, { token: 'delimiter.parenthesis', next: '@nestedParens' }], // escape out of string and into nestedCurly\n      [/\"/, { token: 'type', next: '@string_double' }], // jump into double string\n      [/'/, { token: 'string', next: '@pop' }], // stop being a string\n      { include: '@nonNestableStates' },\n      [/[^']/, 'string'], // anything that is not a quote, is marked as string\n    ],\n    string_double: [\n      [/[^\"]/, 'type'], // mark anything not a quote as a \"type\" (different type of string for visual difference)\n      [/\"/, { token: 'type', next: '@pop' }], // mark also as a type and stop being in the double string state\n    ],\n    nestedCurly: [\n      [/}/, { token: 'delimiter.curly', next: '@pop' }], // escape out of string and into braces\n      [/'/, { token: 'string', next: '@string' }], // go to string if see start of string\n      [/\"/, { token: 'type', next: '@string_double' }], // go to string_double if see start of double string\n    ],\n    nestedParens: [\n      [/\\)/, { token: 'delimiter.parenthesis', next: '@pop' }], // escape out of string and into braces\n      [/'/, { token: 'string', next: '@string' }], // go to string if see start of string\n      [/\"/, { token: 'type', next: '@string_double' }], // go to string_double if see start of double string\n    ],\n  },\n};\n\nexport const conf: monacoType.languages.LanguageConfiguration = {\n  brackets: [\n    ['{', '}'],\n    ['[', ']'],\n    ['(', ')'],\n  ],\n  autoClosingPairs: [\n    { open: '{', close: '}' },\n    { open: '[', close: ']' },\n    { open: '(', close: ')' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n  ],\n  surroundingPairs: [\n    { open: '{', close: '}' },\n    { open: '[', close: ']' },\n    { open: '(', close: ')' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n  ],\n};\n\nfunction escapeRegExp(string: string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n","import { SelectableValue } from '@grafana/data';\n\nimport { CloudWatchDatasource } from './../datasource';\n\nexport const toOption = (value: string) => ({ label: value, value });\n\nexport const appendTemplateVariables = (datasource: CloudWatchDatasource, values: SelectableValue[]) => [\n  ...values,\n  { label: 'Template Variables', options: datasource.getVariables().map(toOption) },\n];\n","import { debounce, intersection, unionBy } from 'lodash';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { MultiSelect } from '@grafana/ui';\nimport { InputActionMeta } from '@grafana/ui/src/components/Select/types';\nimport { notifyApp } from 'app/core/actions';\nimport { createErrorNotification } from 'app/core/copy/appNotification';\nimport { dispatch } from 'app/store/store';\n\nimport { CloudWatchDatasource } from '../datasource';\nimport { appendTemplateVariables } from '../utils/utils';\n\nconst MAX_LOG_GROUPS = 20;\nconst MAX_VISIBLE_LOG_GROUPS = 4;\nconst DEBOUNCE_TIMER = 300;\n\nexport interface LogGroupSelectorProps {\n  region: string;\n  selectedLogGroups: string[];\n  onChange: (logGroups: string[]) => void;\n\n  datasource?: CloudWatchDatasource;\n  onRunQuery?: () => void;\n  onOpenMenu?: () => Promise<void>;\n  refId?: string;\n  width?: number | 'auto';\n  saved?: boolean;\n}\n\nexport const LogGroupSelector: React.FC<LogGroupSelectorProps> = ({\n  region,\n  selectedLogGroups,\n  onChange,\n  datasource,\n  onRunQuery,\n  onOpenMenu,\n  refId,\n  width,\n  saved = true,\n}) => {\n  const [loadingLogGroups, setLoadingLogGroups] = useState(false);\n  const [availableLogGroups, setAvailableLogGroups] = useState<Array<SelectableValue<string>>>([]);\n  const logGroupOptions = useMemo(\n    () => unionBy(availableLogGroups, selectedLogGroups?.map(toOption), 'value'),\n    [availableLogGroups, selectedLogGroups]\n  );\n\n  const fetchLogGroupOptions = useCallback(\n    async (region: string, logGroupNamePrefix?: string) => {\n      if (!datasource) {\n        return [];\n      }\n      try {\n        const logGroups: string[] = await datasource.describeLogGroups({\n          refId,\n          region,\n          logGroupNamePrefix,\n        });\n        return logGroups.map(toOption);\n      } catch (err) {\n        dispatch(notifyApp(createErrorNotification(typeof err === 'string' ? err : JSON.stringify(err))));\n        return [];\n      }\n    },\n    [datasource, refId]\n  );\n\n  const onLogGroupSearch = async (searchTerm: string, region: string, actionMeta: InputActionMeta) => {\n    if (actionMeta.action !== 'input-change' || !datasource) {\n      return;\n    }\n\n    // No need to fetch matching log groups if the search term isn't valid\n    // This is also useful for preventing searches when a user is typing out a log group with template vars\n    // See https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_LogGroup.html for the source of the pattern below\n    const logGroupNamePattern = /^[\\.\\-_/#A-Za-z0-9]+$/;\n    if (!logGroupNamePattern.test(searchTerm)) {\n      if (searchTerm !== '') {\n        dispatch(notifyApp(createErrorNotification('Invalid Log Group name: ' + searchTerm)));\n      }\n      return;\n    }\n\n    setLoadingLogGroups(true);\n    const matchingLogGroups = await fetchLogGroupOptions(region, searchTerm);\n    setAvailableLogGroups(unionBy(availableLogGroups, matchingLogGroups, 'value'));\n    setLoadingLogGroups(false);\n  };\n\n  // Reset the log group options if the datasource or region change and are saved\n  useEffect(() => {\n    async function resetLogGroups() {\n      // Don't call describeLogGroups if datasource or region is undefined\n      if (!datasource || !datasource.getActualRegion(region)) {\n        setAvailableLogGroups([]);\n        return;\n      }\n\n      setLoadingLogGroups(true);\n      return fetchLogGroupOptions(datasource.getActualRegion(region))\n        .then((logGroups) => {\n          const newSelectedLogGroups = intersection(\n            selectedLogGroups,\n            logGroups.map((l) => l.value || '')\n          );\n          onChange(newSelectedLogGroups);\n          setAvailableLogGroups(logGroups);\n        })\n        .finally(() => {\n          setLoadingLogGroups(false);\n        });\n    }\n    // Only reset if the current datasource is saved\n    saved && resetLogGroups();\n    // this hook shouldn't get called every time selectedLogGroups or onChange updates\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [datasource, region, saved]);\n\n  const onOpenLogGroupMenu = async () => {\n    if (onOpenMenu) {\n      await onOpenMenu();\n    }\n  };\n\n  const onLogGroupSearchDebounced = debounce(onLogGroupSearch, DEBOUNCE_TIMER);\n\n  return (\n    <MultiSelect\n      inputId=\"default-log-groups\"\n      aria-label=\"Log Groups\"\n      allowCustomValue\n      options={datasource ? appendTemplateVariables(datasource, logGroupOptions) : logGroupOptions}\n      value={selectedLogGroups}\n      onChange={(v) => onChange(v.filter(({ value }) => value).map(({ value }) => value))}\n      onBlur={onRunQuery}\n      closeMenuOnSelect={false}\n      isClearable\n      isOptionDisabled={() => selectedLogGroups.length >= MAX_LOG_GROUPS}\n      placeholder=\"Choose Log Groups\"\n      maxVisibleValues={MAX_VISIBLE_LOG_GROUPS}\n      noOptionsMessage=\"No log groups available\"\n      isLoading={loadingLogGroups}\n      onOpenMenu={onOpenLogGroupMenu}\n      onInputChange={(value, actionMeta) => {\n        onLogGroupSearchDebounced(value, region, actionMeta);\n      }}\n      width={width}\n    />\n  );\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { Alert, InlineField, useStyles2 } from '@grafana/ui';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  infoText: css`\n    padding-bottom: ${theme.spacing(2)};\n    color: ${theme.colors.text.secondary};\n  `,\n});\n\ninterface Props {\n  datasourceUid?: string;\n  onChange: (uid: string) => void;\n}\n\nconst xRayDsId = 'grafana-x-ray-datasource';\n\nexport function XrayLinkConfig({ datasourceUid, onChange }: Props) {\n  const hasXrayDatasource = Boolean(getDatasourceSrv().getList({ pluginId: xRayDsId }).length);\n\n  const styles = useStyles2(getStyles);\n\n  return (\n    <>\n      <h3 className=\"page-heading\">X-ray trace link</h3>\n\n      <div className={styles.infoText}>\n        Grafana will automatically create a link to a trace in X-ray data source if logs contain @xrayTraceId field\n      </div>\n\n      {!hasXrayDatasource && (\n        <Alert\n          title={\n            'There is no X-ray datasource to link to. First add an X-ray data source and then link it to Cloud Watch. '\n          }\n          severity=\"info\"\n        />\n      )}\n\n      <div className=\"gf-form-group\">\n        <InlineField\n          htmlFor=\"data-source-picker\"\n          label=\"Data source\"\n          labelWidth={28}\n          tooltip=\"X-ray data source containing traces\"\n        >\n          <DataSourcePicker\n            pluginId={xRayDsId}\n            onChange={(ds) => onChange(ds.uid)}\n            current={datasourceUid}\n            noDefault={true}\n          />\n        </InlineField>\n      </div>\n    </>\n  );\n}\n","var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _templateObject = _taggedTemplateLiteral(['', ''], ['', '']);\n\nfunction _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * @class TemplateTag\n * @classdesc Consumes a pipeline of composable transformer plugins and produces a template tag.\n */\nvar TemplateTag = function () {\n  /**\n   * constructs a template tag\n   * @constructs TemplateTag\n   * @param  {...Object} [...transformers] - an array or arguments list of transformers\n   * @return {Function}                    - a template tag\n   */\n  function TemplateTag() {\n    var _this = this;\n\n    for (var _len = arguments.length, transformers = Array(_len), _key = 0; _key < _len; _key++) {\n      transformers[_key] = arguments[_key];\n    }\n\n    _classCallCheck(this, TemplateTag);\n\n    this.tag = function (strings) {\n      for (var _len2 = arguments.length, expressions = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        expressions[_key2 - 1] = arguments[_key2];\n      }\n\n      if (typeof strings === 'function') {\n        // if the first argument passed is a function, assume it is a template tag and return\n        // an intermediary tag that processes the template using the aforementioned tag, passing the\n        // result to our tag\n        return _this.interimTag.bind(_this, strings);\n      }\n\n      if (typeof strings === 'string') {\n        // if the first argument passed is a string, just transform it\n        return _this.transformEndResult(strings);\n      }\n\n      // else, return a transformed end result of processing the template with our tag\n      strings = strings.map(_this.transformString.bind(_this));\n      return _this.transformEndResult(strings.reduce(_this.processSubstitutions.bind(_this, expressions)));\n    };\n\n    // if first argument is an array, extrude it as a list of transformers\n    if (transformers.length > 0 && Array.isArray(transformers[0])) {\n      transformers = transformers[0];\n    }\n\n    // if any transformers are functions, this means they are not initiated - automatically initiate them\n    this.transformers = transformers.map(function (transformer) {\n      return typeof transformer === 'function' ? transformer() : transformer;\n    });\n\n    // return an ES2015 template tag\n    return this.tag;\n  }\n\n  /**\n   * Applies all transformers to a template literal tagged with this method.\n   * If a function is passed as the first argument, assumes the function is a template tag\n   * and applies it to the template, returning a template tag.\n   * @param  {(Function|String|Array<String>)} strings        - Either a template tag or an array containing template strings separated by identifier\n   * @param  {...*}                            ...expressions - Optional list of substitution values.\n   * @return {(String|Function)}                              - Either an intermediary tag function or the results of processing the template.\n   */\n\n\n  _createClass(TemplateTag, [{\n    key: 'interimTag',\n\n\n    /**\n     * An intermediary template tag that receives a template tag and passes the result of calling the template with the received\n     * template tag to our own template tag.\n     * @param  {Function}        nextTag          - the received template tag\n     * @param  {Array<String>}   template         - the template to process\n     * @param  {...*}            ...substitutions - `substitutions` is an array of all substitutions in the template\n     * @return {*}                                - the final processed value\n     */\n    value: function interimTag(previousTag, template) {\n      for (var _len3 = arguments.length, substitutions = Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n        substitutions[_key3 - 2] = arguments[_key3];\n      }\n\n      return this.tag(_templateObject, previousTag.apply(undefined, [template].concat(substitutions)));\n    }\n\n    /**\n     * Performs bulk processing on the tagged template, transforming each substitution and then\n     * concatenating the resulting values into a string.\n     * @param  {Array<*>} substitutions - an array of all remaining substitutions present in this template\n     * @param  {String}   resultSoFar   - this iteration's result string so far\n     * @param  {String}   remainingPart - the template chunk after the current substitution\n     * @return {String}                 - the result of joining this iteration's processed substitution with the result\n     */\n\n  }, {\n    key: 'processSubstitutions',\n    value: function processSubstitutions(substitutions, resultSoFar, remainingPart) {\n      var substitution = this.transformSubstitution(substitutions.shift(), resultSoFar);\n      return ''.concat(resultSoFar, substitution, remainingPart);\n    }\n\n    /**\n     * Iterate through each transformer, applying the transformer's `onString` method to the template\n     * strings before all substitutions are processed.\n     * @param {String}  str - The input string\n     * @return {String}     - The final results of processing each transformer\n     */\n\n  }, {\n    key: 'transformString',\n    value: function transformString(str) {\n      var cb = function cb(res, transform) {\n        return transform.onString ? transform.onString(res) : res;\n      };\n      return this.transformers.reduce(cb, str);\n    }\n\n    /**\n     * When a substitution is encountered, iterates through each transformer and applies the transformer's\n     * `onSubstitution` method to the substitution.\n     * @param  {*}      substitution - The current substitution\n     * @param  {String} resultSoFar  - The result up to and excluding this substitution.\n     * @return {*}                   - The final result of applying all substitution transformations.\n     */\n\n  }, {\n    key: 'transformSubstitution',\n    value: function transformSubstitution(substitution, resultSoFar) {\n      var cb = function cb(res, transform) {\n        return transform.onSubstitution ? transform.onSubstitution(res, resultSoFar) : res;\n      };\n      return this.transformers.reduce(cb, substitution);\n    }\n\n    /**\n     * Iterates through each transformer, applying the transformer's `onEndResult` method to the\n     * template literal after all substitutions have finished processing.\n     * @param  {String} endResult - The processed template, just before it is returned from the tag\n     * @return {String}           - The final results of processing each transformer\n     */\n\n  }, {\n    key: 'transformEndResult',\n    value: function transformEndResult(endResult) {\n      var cb = function cb(res, transform) {\n        return transform.onEndResult ? transform.onEndResult(res) : res;\n      };\n      return this.transformers.reduce(cb, endResult);\n    }\n  }]);\n\n  return TemplateTag;\n}();\n\nexport default TemplateTag;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","var defaults = {\n  separator: '',\n  conjunction: '',\n  serial: false\n};\n\n/**\n * Converts an array substitution to a string containing a list\n * @param  {String} [opts.separator = ''] - the character that separates each item\n * @param  {String} [opts.conjunction = '']  - replace the last separator with this\n * @param  {Boolean} [opts.serial = false] - include the separator before the conjunction? (Oxford comma use-case)\n *\n * @return {Object}                     - a TemplateTag transformer\n */\nvar inlineArrayTransformer = function inlineArrayTransformer() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaults;\n  return {\n    onSubstitution: function onSubstitution(substitution, resultSoFar) {\n      // only operate on arrays\n      if (Array.isArray(substitution)) {\n        var arrayLength = substitution.length;\n        var separator = opts.separator;\n        var conjunction = opts.conjunction;\n        var serial = opts.serial;\n        // join each item in the array into a string where each item is separated by separator\n        // be sure to maintain indentation\n        var indent = resultSoFar.match(/(\\n?[^\\S\\n]+)$/);\n        if (indent) {\n          substitution = substitution.join(separator + indent[1]);\n        } else {\n          substitution = substitution.join(separator + ' ');\n        }\n        // if conjunction is set, replace the last separator with conjunction, but only if there is more than one substitution\n        if (conjunction && arrayLength > 1) {\n          var separatorIndex = substitution.lastIndexOf(separator);\n          substitution = substitution.slice(0, separatorIndex) + (serial ? separator : '') + ' ' + conjunction + substitution.slice(separatorIndex + 1);\n        }\n      }\n      return substitution;\n    }\n  };\n};\n\nexport default inlineArrayTransformer;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbmxpbmVBcnJheVRyYW5zZm9ybWVyL2lubGluZUFycmF5VHJhbnNmb3JtZXIuanMiXSwibmFtZXMiOlsiZGVmYXVsdHMiLCJzZXBhcmF0b3IiLCJjb25qdW5jdGlvbiIsInNlcmlhbCIsImlubGluZUFycmF5VHJhbnNmb3JtZXIiLCJvcHRzIiwib25TdWJzdGl0dXRpb24iLCJzdWJzdGl0dXRpb24iLCJyZXN1bHRTb0ZhciIsIkFycmF5IiwiaXNBcnJheSIsImFycmF5TGVuZ3RoIiwibGVuZ3RoIiwiaW5kZW50IiwibWF0Y2giLCJqb2luIiwic2VwYXJhdG9ySW5kZXgiLCJsYXN0SW5kZXhPZiIsInNsaWNlIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFNQSxXQUFXO0FBQ2ZDLGFBQVcsRUFESTtBQUVmQyxlQUFhLEVBRkU7QUFHZkMsVUFBUTtBQUhPLENBQWpCOztBQU1BOzs7Ozs7OztBQVFBLElBQU1DLHlCQUF5QixTQUF6QkEsc0JBQXlCO0FBQUEsTUFBQ0MsSUFBRCx1RUFBUUwsUUFBUjtBQUFBLFNBQXNCO0FBQ25ETSxrQkFEbUQsMEJBQ3BDQyxZQURvQyxFQUN0QkMsV0FEc0IsRUFDVDtBQUN4QztBQUNBLFVBQUlDLE1BQU1DLE9BQU4sQ0FBY0gsWUFBZCxDQUFKLEVBQWlDO0FBQy9CLFlBQU1JLGNBQWNKLGFBQWFLLE1BQWpDO0FBQ0EsWUFBTVgsWUFBWUksS0FBS0osU0FBdkI7QUFDQSxZQUFNQyxjQUFjRyxLQUFLSCxXQUF6QjtBQUNBLFlBQU1DLFNBQVNFLEtBQUtGLE1BQXBCO0FBQ0E7QUFDQTtBQUNBLFlBQU1VLFNBQVNMLFlBQVlNLEtBQVosQ0FBa0IsZ0JBQWxCLENBQWY7QUFDQSxZQUFJRCxNQUFKLEVBQVk7QUFDVk4seUJBQWVBLGFBQWFRLElBQWIsQ0FBa0JkLFlBQVlZLE9BQU8sQ0FBUCxDQUE5QixDQUFmO0FBQ0QsU0FGRCxNQUVPO0FBQ0xOLHlCQUFlQSxhQUFhUSxJQUFiLENBQWtCZCxZQUFZLEdBQTlCLENBQWY7QUFDRDtBQUNEO0FBQ0EsWUFBSUMsZUFBZVMsY0FBYyxDQUFqQyxFQUFvQztBQUNsQyxjQUFNSyxpQkFBaUJULGFBQWFVLFdBQWIsQ0FBeUJoQixTQUF6QixDQUF2QjtBQUNBTSx5QkFDRUEsYUFBYVcsS0FBYixDQUFtQixDQUFuQixFQUFzQkYsY0FBdEIsS0FDQ2IsU0FBU0YsU0FBVCxHQUFxQixFQUR0QixJQUVBLEdBRkEsR0FHQUMsV0FIQSxHQUlBSyxhQUFhVyxLQUFiLENBQW1CRixpQkFBaUIsQ0FBcEMsQ0FMRjtBQU1EO0FBQ0Y7QUFDRCxhQUFPVCxZQUFQO0FBQ0Q7QUE1QmtELEdBQXRCO0FBQUEsQ0FBL0I7O0FBK0JBLGVBQWVILHNCQUFmIiwiZmlsZSI6ImlubGluZUFycmF5VHJhbnNmb3JtZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBkZWZhdWx0cyA9IHtcbiAgc2VwYXJhdG9yOiAnJyxcbiAgY29uanVuY3Rpb246ICcnLFxuICBzZXJpYWw6IGZhbHNlLFxufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhbiBhcnJheSBzdWJzdGl0dXRpb24gdG8gYSBzdHJpbmcgY29udGFpbmluZyBhIGxpc3RcbiAqIEBwYXJhbSAge1N0cmluZ30gW29wdHMuc2VwYXJhdG9yID0gJyddIC0gdGhlIGNoYXJhY3RlciB0aGF0IHNlcGFyYXRlcyBlYWNoIGl0ZW1cbiAqIEBwYXJhbSAge1N0cmluZ30gW29wdHMuY29uanVuY3Rpb24gPSAnJ10gIC0gcmVwbGFjZSB0aGUgbGFzdCBzZXBhcmF0b3Igd2l0aCB0aGlzXG4gKiBAcGFyYW0gIHtCb29sZWFufSBbb3B0cy5zZXJpYWwgPSBmYWxzZV0gLSBpbmNsdWRlIHRoZSBzZXBhcmF0b3IgYmVmb3JlIHRoZSBjb25qdW5jdGlvbj8gKE94Zm9yZCBjb21tYSB1c2UtY2FzZSlcbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R9ICAgICAgICAgICAgICAgICAgICAgLSBhIFRlbXBsYXRlVGFnIHRyYW5zZm9ybWVyXG4gKi9cbmNvbnN0IGlubGluZUFycmF5VHJhbnNmb3JtZXIgPSAob3B0cyA9IGRlZmF1bHRzKSA9PiAoe1xuICBvblN1YnN0aXR1dGlvbihzdWJzdGl0dXRpb24sIHJlc3VsdFNvRmFyKSB7XG4gICAgLy8gb25seSBvcGVyYXRlIG9uIGFycmF5c1xuICAgIGlmIChBcnJheS5pc0FycmF5KHN1YnN0aXR1dGlvbikpIHtcbiAgICAgIGNvbnN0IGFycmF5TGVuZ3RoID0gc3Vic3RpdHV0aW9uLmxlbmd0aDtcbiAgICAgIGNvbnN0IHNlcGFyYXRvciA9IG9wdHMuc2VwYXJhdG9yO1xuICAgICAgY29uc3QgY29uanVuY3Rpb24gPSBvcHRzLmNvbmp1bmN0aW9uO1xuICAgICAgY29uc3Qgc2VyaWFsID0gb3B0cy5zZXJpYWw7XG4gICAgICAvLyBqb2luIGVhY2ggaXRlbSBpbiB0aGUgYXJyYXkgaW50byBhIHN0cmluZyB3aGVyZSBlYWNoIGl0ZW0gaXMgc2VwYXJhdGVkIGJ5IHNlcGFyYXRvclxuICAgICAgLy8gYmUgc3VyZSB0byBtYWludGFpbiBpbmRlbnRhdGlvblxuICAgICAgY29uc3QgaW5kZW50ID0gcmVzdWx0U29GYXIubWF0Y2goLyhcXG4/W15cXFNcXG5dKykkLyk7XG4gICAgICBpZiAoaW5kZW50KSB7XG4gICAgICAgIHN1YnN0aXR1dGlvbiA9IHN1YnN0aXR1dGlvbi5qb2luKHNlcGFyYXRvciArIGluZGVudFsxXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdWJzdGl0dXRpb24gPSBzdWJzdGl0dXRpb24uam9pbihzZXBhcmF0b3IgKyAnICcpO1xuICAgICAgfVxuICAgICAgLy8gaWYgY29uanVuY3Rpb24gaXMgc2V0LCByZXBsYWNlIHRoZSBsYXN0IHNlcGFyYXRvciB3aXRoIGNvbmp1bmN0aW9uLCBidXQgb25seSBpZiB0aGVyZSBpcyBtb3JlIHRoYW4gb25lIHN1YnN0aXR1dGlvblxuICAgICAgaWYgKGNvbmp1bmN0aW9uICYmIGFycmF5TGVuZ3RoID4gMSkge1xuICAgICAgICBjb25zdCBzZXBhcmF0b3JJbmRleCA9IHN1YnN0aXR1dGlvbi5sYXN0SW5kZXhPZihzZXBhcmF0b3IpO1xuICAgICAgICBzdWJzdGl0dXRpb24gPVxuICAgICAgICAgIHN1YnN0aXR1dGlvbi5zbGljZSgwLCBzZXBhcmF0b3JJbmRleCkgK1xuICAgICAgICAgIChzZXJpYWwgPyBzZXBhcmF0b3IgOiAnJykgK1xuICAgICAgICAgICcgJyArXG4gICAgICAgICAgY29uanVuY3Rpb24gK1xuICAgICAgICAgIHN1YnN0aXR1dGlvbi5zbGljZShzZXBhcmF0b3JJbmRleCArIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3Vic3RpdHV0aW9uO1xuICB9LFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGlubGluZUFycmF5VHJhbnNmb3JtZXI7XG4iXX0=","function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n/**\n * strips indentation from a template literal\n * @param  {String} type = 'initial' - whether to remove all indentation or just leading indentation. can be 'all' or 'initial'\n * @return {Object}                  - a TemplateTag transformer\n */\nvar stripIndentTransformer = function stripIndentTransformer() {\n  var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'initial';\n  return {\n    onEndResult: function onEndResult(endResult) {\n      if (type === 'initial') {\n        // remove the shortest leading indentation from each line\n        var match = endResult.match(/^[^\\S\\n]*(?=\\S)/gm);\n        var indent = match && Math.min.apply(Math, _toConsumableArray(match.map(function (el) {\n          return el.length;\n        })));\n        if (indent) {\n          var regexp = new RegExp('^.{' + indent + '}', 'gm');\n          return endResult.replace(regexp, '');\n        }\n        return endResult;\n      }\n      if (type === 'all') {\n        // remove all indentation from each line\n        return endResult.replace(/^[^\\S\\n]+/gm, '');\n      }\n      throw new Error('Unknown type: ' + type);\n    }\n  };\n};\n\nexport default stripIndentTransformer;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHJpcEluZGVudFRyYW5zZm9ybWVyL3N0cmlwSW5kZW50VHJhbnNmb3JtZXIuanMiXSwibmFtZXMiOlsic3RyaXBJbmRlbnRUcmFuc2Zvcm1lciIsInR5cGUiLCJvbkVuZFJlc3VsdCIsImVuZFJlc3VsdCIsIm1hdGNoIiwiaW5kZW50IiwiTWF0aCIsIm1pbiIsIm1hcCIsImVsIiwibGVuZ3RoIiwicmVnZXhwIiwiUmVnRXhwIiwicmVwbGFjZSIsIkVycm9yIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7OztBQUtBLElBQU1BLHlCQUF5QixTQUF6QkEsc0JBQXlCO0FBQUEsTUFBQ0MsSUFBRCx1RUFBUSxTQUFSO0FBQUEsU0FBdUI7QUFDcERDLGVBRG9ELHVCQUN4Q0MsU0FEd0MsRUFDN0I7QUFDckIsVUFBSUYsU0FBUyxTQUFiLEVBQXdCO0FBQ3RCO0FBQ0EsWUFBTUcsUUFBUUQsVUFBVUMsS0FBVixDQUFnQixtQkFBaEIsQ0FBZDtBQUNBLFlBQU1DLFNBQVNELFNBQVNFLEtBQUtDLEdBQUwsZ0NBQVlILE1BQU1JLEdBQU4sQ0FBVTtBQUFBLGlCQUFNQyxHQUFHQyxNQUFUO0FBQUEsU0FBVixDQUFaLEVBQXhCO0FBQ0EsWUFBSUwsTUFBSixFQUFZO0FBQ1YsY0FBTU0sU0FBUyxJQUFJQyxNQUFKLFNBQWlCUCxNQUFqQixRQUE0QixJQUE1QixDQUFmO0FBQ0EsaUJBQU9GLFVBQVVVLE9BQVYsQ0FBa0JGLE1BQWxCLEVBQTBCLEVBQTFCLENBQVA7QUFDRDtBQUNELGVBQU9SLFNBQVA7QUFDRDtBQUNELFVBQUlGLFNBQVMsS0FBYixFQUFvQjtBQUNsQjtBQUNBLGVBQU9FLFVBQVVVLE9BQVYsQ0FBa0IsYUFBbEIsRUFBaUMsRUFBakMsQ0FBUDtBQUNEO0FBQ0QsWUFBTSxJQUFJQyxLQUFKLG9CQUEyQmIsSUFBM0IsQ0FBTjtBQUNEO0FBakJtRCxHQUF2QjtBQUFBLENBQS9COztBQW9CQSxlQUFlRCxzQkFBZiIsImZpbGUiOiJzdHJpcEluZGVudFRyYW5zZm9ybWVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBzdHJpcHMgaW5kZW50YXRpb24gZnJvbSBhIHRlbXBsYXRlIGxpdGVyYWxcbiAqIEBwYXJhbSAge1N0cmluZ30gdHlwZSA9ICdpbml0aWFsJyAtIHdoZXRoZXIgdG8gcmVtb3ZlIGFsbCBpbmRlbnRhdGlvbiBvciBqdXN0IGxlYWRpbmcgaW5kZW50YXRpb24uIGNhbiBiZSAnYWxsJyBvciAnaW5pdGlhbCdcbiAqIEByZXR1cm4ge09iamVjdH0gICAgICAgICAgICAgICAgICAtIGEgVGVtcGxhdGVUYWcgdHJhbnNmb3JtZXJcbiAqL1xuY29uc3Qgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lciA9ICh0eXBlID0gJ2luaXRpYWwnKSA9PiAoe1xuICBvbkVuZFJlc3VsdChlbmRSZXN1bHQpIHtcbiAgICBpZiAodHlwZSA9PT0gJ2luaXRpYWwnKSB7XG4gICAgICAvLyByZW1vdmUgdGhlIHNob3J0ZXN0IGxlYWRpbmcgaW5kZW50YXRpb24gZnJvbSBlYWNoIGxpbmVcbiAgICAgIGNvbnN0IG1hdGNoID0gZW5kUmVzdWx0Lm1hdGNoKC9eW15cXFNcXG5dKig/PVxcUykvZ20pO1xuICAgICAgY29uc3QgaW5kZW50ID0gbWF0Y2ggJiYgTWF0aC5taW4oLi4ubWF0Y2gubWFwKGVsID0+IGVsLmxlbmd0aCkpO1xuICAgICAgaWYgKGluZGVudCkge1xuICAgICAgICBjb25zdCByZWdleHAgPSBuZXcgUmVnRXhwKGBeLnske2luZGVudH19YCwgJ2dtJyk7XG4gICAgICAgIHJldHVybiBlbmRSZXN1bHQucmVwbGFjZShyZWdleHAsICcnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBlbmRSZXN1bHQ7XG4gICAgfVxuICAgIGlmICh0eXBlID09PSAnYWxsJykge1xuICAgICAgLy8gcmVtb3ZlIGFsbCBpbmRlbnRhdGlvbiBmcm9tIGVhY2ggbGluZVxuICAgICAgcmV0dXJuIGVuZFJlc3VsdC5yZXBsYWNlKC9eW15cXFNcXG5dKy9nbSwgJycpO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gdHlwZTogJHt0eXBlfWApO1xuICB9LFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHN0cmlwSW5kZW50VHJhbnNmb3JtZXI7XG4iXX0=","/**\n * TemplateTag transformer that trims whitespace on the end result of a tagged template\n * @param  {String} side = '' - The side of the string to trim. Can be 'start' or 'end' (alternatively 'left' or 'right')\n * @return {Object}           - a TemplateTag transformer\n */\nvar trimResultTransformer = function trimResultTransformer() {\n  var side = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return {\n    onEndResult: function onEndResult(endResult) {\n      if (side === '') {\n        return endResult.trim();\n      }\n\n      side = side.toLowerCase();\n\n      if (side === 'start' || side === 'left') {\n        return endResult.replace(/^\\s*/, '');\n      }\n\n      if (side === 'end' || side === 'right') {\n        return endResult.replace(/\\s*$/, '');\n      }\n\n      throw new Error('Side not supported: ' + side);\n    }\n  };\n};\n\nexport default trimResultTransformer;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90cmltUmVzdWx0VHJhbnNmb3JtZXIvdHJpbVJlc3VsdFRyYW5zZm9ybWVyLmpzIl0sIm5hbWVzIjpbInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsInNpZGUiLCJvbkVuZFJlc3VsdCIsImVuZFJlc3VsdCIsInRyaW0iLCJ0b0xvd2VyQ2FzZSIsInJlcGxhY2UiLCJFcnJvciJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0FBS0EsSUFBTUEsd0JBQXdCLFNBQXhCQSxxQkFBd0I7QUFBQSxNQUFDQyxJQUFELHVFQUFRLEVBQVI7QUFBQSxTQUFnQjtBQUM1Q0MsZUFENEMsdUJBQ2hDQyxTQURnQyxFQUNyQjtBQUNyQixVQUFJRixTQUFTLEVBQWIsRUFBaUI7QUFDZixlQUFPRSxVQUFVQyxJQUFWLEVBQVA7QUFDRDs7QUFFREgsYUFBT0EsS0FBS0ksV0FBTCxFQUFQOztBQUVBLFVBQUlKLFNBQVMsT0FBVCxJQUFvQkEsU0FBUyxNQUFqQyxFQUF5QztBQUN2QyxlQUFPRSxVQUFVRyxPQUFWLENBQWtCLE1BQWxCLEVBQTBCLEVBQTFCLENBQVA7QUFDRDs7QUFFRCxVQUFJTCxTQUFTLEtBQVQsSUFBa0JBLFNBQVMsT0FBL0IsRUFBd0M7QUFDdEMsZUFBT0UsVUFBVUcsT0FBVixDQUFrQixNQUFsQixFQUEwQixFQUExQixDQUFQO0FBQ0Q7O0FBRUQsWUFBTSxJQUFJQyxLQUFKLDBCQUFpQ04sSUFBakMsQ0FBTjtBQUNEO0FBakIyQyxHQUFoQjtBQUFBLENBQTlCOztBQW9CQSxlQUFlRCxxQkFBZiIsImZpbGUiOiJ0cmltUmVzdWx0VHJhbnNmb3JtZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRlbXBsYXRlVGFnIHRyYW5zZm9ybWVyIHRoYXQgdHJpbXMgd2hpdGVzcGFjZSBvbiB0aGUgZW5kIHJlc3VsdCBvZiBhIHRhZ2dlZCB0ZW1wbGF0ZVxuICogQHBhcmFtICB7U3RyaW5nfSBzaWRlID0gJycgLSBUaGUgc2lkZSBvZiB0aGUgc3RyaW5nIHRvIHRyaW0uIENhbiBiZSAnc3RhcnQnIG9yICdlbmQnIChhbHRlcm5hdGl2ZWx5ICdsZWZ0JyBvciAncmlnaHQnKVxuICogQHJldHVybiB7T2JqZWN0fSAgICAgICAgICAgLSBhIFRlbXBsYXRlVGFnIHRyYW5zZm9ybWVyXG4gKi9cbmNvbnN0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciA9IChzaWRlID0gJycpID0+ICh7XG4gIG9uRW5kUmVzdWx0KGVuZFJlc3VsdCkge1xuICAgIGlmIChzaWRlID09PSAnJykge1xuICAgICAgcmV0dXJuIGVuZFJlc3VsdC50cmltKCk7XG4gICAgfVxuXG4gICAgc2lkZSA9IHNpZGUudG9Mb3dlckNhc2UoKTtcblxuICAgIGlmIChzaWRlID09PSAnc3RhcnQnIHx8IHNpZGUgPT09ICdsZWZ0Jykge1xuICAgICAgcmV0dXJuIGVuZFJlc3VsdC5yZXBsYWNlKC9eXFxzKi8sICcnKTtcbiAgICB9XG5cbiAgICBpZiAoc2lkZSA9PT0gJ2VuZCcgfHwgc2lkZSA9PT0gJ3JpZ2h0Jykge1xuICAgICAgcmV0dXJuIGVuZFJlc3VsdC5yZXBsYWNlKC9cXHMqJC8sICcnKTtcbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgRXJyb3IoYFNpZGUgbm90IHN1cHBvcnRlZDogJHtzaWRlfWApO1xuICB9LFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lcjtcbiJdfQ==","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\n\nvar commaLists = new TemplateTag(inlineArrayTransformer({ separator: ',' }), stripIndentTransformer, trimResultTransformer);\n\nexport default commaLists;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYUxpc3RzL2NvbW1hTGlzdHMuanMiXSwibmFtZXMiOlsiVGVtcGxhdGVUYWciLCJzdHJpcEluZGVudFRyYW5zZm9ybWVyIiwiaW5saW5lQXJyYXlUcmFuc2Zvcm1lciIsInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsImNvbW1hTGlzdHMiLCJzZXBhcmF0b3IiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLFdBQVAsTUFBd0IsZ0JBQXhCO0FBQ0EsT0FBT0Msc0JBQVAsTUFBbUMsMkJBQW5DO0FBQ0EsT0FBT0Msc0JBQVAsTUFBbUMsMkJBQW5DO0FBQ0EsT0FBT0MscUJBQVAsTUFBa0MsMEJBQWxDOztBQUVBLElBQU1DLGFBQWEsSUFBSUosV0FBSixDQUNqQkUsdUJBQXVCLEVBQUVHLFdBQVcsR0FBYixFQUF2QixDQURpQixFQUVqQkosc0JBRmlCLEVBR2pCRSxxQkFIaUIsQ0FBbkI7O0FBTUEsZUFBZUMsVUFBZiIsImZpbGUiOiJjb21tYUxpc3RzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRlbXBsYXRlVGFnIGZyb20gJy4uL1RlbXBsYXRlVGFnJztcbmltcG9ydCBzdHJpcEluZGVudFRyYW5zZm9ybWVyIGZyb20gJy4uL3N0cmlwSW5kZW50VHJhbnNmb3JtZXInO1xuaW1wb3J0IGlubGluZUFycmF5VHJhbnNmb3JtZXIgZnJvbSAnLi4vaW5saW5lQXJyYXlUcmFuc2Zvcm1lcic7XG5pbXBvcnQgdHJpbVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3RyaW1SZXN1bHRUcmFuc2Zvcm1lcic7XG5cbmNvbnN0IGNvbW1hTGlzdHMgPSBuZXcgVGVtcGxhdGVUYWcoXG4gIGlubGluZUFycmF5VHJhbnNmb3JtZXIoeyBzZXBhcmF0b3I6ICcsJyB9KSxcbiAgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lcixcbiAgdHJpbVJlc3VsdFRyYW5zZm9ybWVyLFxuKTtcblxuZXhwb3J0IGRlZmF1bHQgY29tbWFMaXN0cztcbiJdfQ==","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\n\nvar commaListsAnd = new TemplateTag(inlineArrayTransformer({ separator: ',', conjunction: 'and' }), stripIndentTransformer, trimResultTransformer);\n\nexport default commaListsAnd;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYUxpc3RzQW5kL2NvbW1hTGlzdHNBbmQuanMiXSwibmFtZXMiOlsiVGVtcGxhdGVUYWciLCJzdHJpcEluZGVudFRyYW5zZm9ybWVyIiwiaW5saW5lQXJyYXlUcmFuc2Zvcm1lciIsInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsImNvbW1hTGlzdHNBbmQiLCJzZXBhcmF0b3IiLCJjb25qdW5jdGlvbiJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7O0FBRUEsSUFBTUMsZ0JBQWdCLElBQUlKLFdBQUosQ0FDcEJFLHVCQUF1QixFQUFFRyxXQUFXLEdBQWIsRUFBa0JDLGFBQWEsS0FBL0IsRUFBdkIsQ0FEb0IsRUFFcEJMLHNCQUZvQixFQUdwQkUscUJBSG9CLENBQXRCOztBQU1BLGVBQWVDLGFBQWYiLCJmaWxlIjoiY29tbWFMaXN0c0FuZC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUZW1wbGF0ZVRhZyBmcm9tICcuLi9UZW1wbGF0ZVRhZyc7XG5pbXBvcnQgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lciBmcm9tICcuLi9zdHJpcEluZGVudFRyYW5zZm9ybWVyJztcbmltcG9ydCBpbmxpbmVBcnJheVRyYW5zZm9ybWVyIGZyb20gJy4uL2lubGluZUFycmF5VHJhbnNmb3JtZXInO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuXG5jb25zdCBjb21tYUxpc3RzQW5kID0gbmV3IFRlbXBsYXRlVGFnKFxuICBpbmxpbmVBcnJheVRyYW5zZm9ybWVyKHsgc2VwYXJhdG9yOiAnLCcsIGNvbmp1bmN0aW9uOiAnYW5kJyB9KSxcbiAgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lcixcbiAgdHJpbVJlc3VsdFRyYW5zZm9ybWVyLFxuKTtcblxuZXhwb3J0IGRlZmF1bHQgY29tbWFMaXN0c0FuZDtcbiJdfQ==","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\n\nvar commaListsOr = new TemplateTag(inlineArrayTransformer({ separator: ',', conjunction: 'or' }), stripIndentTransformer, trimResultTransformer);\n\nexport default commaListsOr;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYUxpc3RzT3IvY29tbWFMaXN0c09yLmpzIl0sIm5hbWVzIjpbIlRlbXBsYXRlVGFnIiwic3RyaXBJbmRlbnRUcmFuc2Zvcm1lciIsImlubGluZUFycmF5VHJhbnNmb3JtZXIiLCJ0cmltUmVzdWx0VHJhbnNmb3JtZXIiLCJjb21tYUxpc3RzT3IiLCJzZXBhcmF0b3IiLCJjb25qdW5jdGlvbiJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7O0FBRUEsSUFBTUMsZUFBZSxJQUFJSixXQUFKLENBQ25CRSx1QkFBdUIsRUFBRUcsV0FBVyxHQUFiLEVBQWtCQyxhQUFhLElBQS9CLEVBQXZCLENBRG1CLEVBRW5CTCxzQkFGbUIsRUFHbkJFLHFCQUhtQixDQUFyQjs7QUFNQSxlQUFlQyxZQUFmIiwiZmlsZSI6ImNvbW1hTGlzdHNPci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUZW1wbGF0ZVRhZyBmcm9tICcuLi9UZW1wbGF0ZVRhZyc7XG5pbXBvcnQgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lciBmcm9tICcuLi9zdHJpcEluZGVudFRyYW5zZm9ybWVyJztcbmltcG9ydCBpbmxpbmVBcnJheVRyYW5zZm9ybWVyIGZyb20gJy4uL2lubGluZUFycmF5VHJhbnNmb3JtZXInO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuXG5jb25zdCBjb21tYUxpc3RzT3IgPSBuZXcgVGVtcGxhdGVUYWcoXG4gIGlubGluZUFycmF5VHJhbnNmb3JtZXIoeyBzZXBhcmF0b3I6ICcsJywgY29uanVuY3Rpb246ICdvcicgfSksXG4gIHN0cmlwSW5kZW50VHJhbnNmb3JtZXIsXG4gIHRyaW1SZXN1bHRUcmFuc2Zvcm1lcixcbik7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbW1hTGlzdHNPcjtcbiJdfQ==","var splitStringTransformer = function splitStringTransformer(splitBy) {\n  return {\n    onSubstitution: function onSubstitution(substitution, resultSoFar) {\n      if (splitBy != null && typeof splitBy === 'string') {\n        if (typeof substitution === 'string' && substitution.includes(splitBy)) {\n          substitution = substitution.split(splitBy);\n        }\n      } else {\n        throw new Error('You need to specify a string character to split by.');\n      }\n      return substitution;\n    }\n  };\n};\n\nexport default splitStringTransformer;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zcGxpdFN0cmluZ1RyYW5zZm9ybWVyL3NwbGl0U3RyaW5nVHJhbnNmb3JtZXIuanMiXSwibmFtZXMiOlsic3BsaXRTdHJpbmdUcmFuc2Zvcm1lciIsIm9uU3Vic3RpdHV0aW9uIiwic3Vic3RpdHV0aW9uIiwicmVzdWx0U29GYXIiLCJzcGxpdEJ5IiwiaW5jbHVkZXMiLCJzcGxpdCIsIkVycm9yIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFNQSx5QkFBeUIsU0FBekJBLHNCQUF5QjtBQUFBLFNBQVk7QUFDekNDLGtCQUR5QywwQkFDMUJDLFlBRDBCLEVBQ1pDLFdBRFksRUFDQztBQUN4QyxVQUFJQyxXQUFXLElBQVgsSUFBbUIsT0FBT0EsT0FBUCxLQUFtQixRQUExQyxFQUFvRDtBQUNsRCxZQUFJLE9BQU9GLFlBQVAsS0FBd0IsUUFBeEIsSUFBb0NBLGFBQWFHLFFBQWIsQ0FBc0JELE9BQXRCLENBQXhDLEVBQXdFO0FBQ3RFRix5QkFBZUEsYUFBYUksS0FBYixDQUFtQkYsT0FBbkIsQ0FBZjtBQUNEO0FBQ0YsT0FKRCxNQUlPO0FBQ0wsY0FBTSxJQUFJRyxLQUFKLENBQVUscURBQVYsQ0FBTjtBQUNEO0FBQ0QsYUFBT0wsWUFBUDtBQUNEO0FBVndDLEdBQVo7QUFBQSxDQUEvQjs7QUFhQSxlQUFlRixzQkFBZiIsImZpbGUiOiJzcGxpdFN0cmluZ1RyYW5zZm9ybWVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qgc3BsaXRTdHJpbmdUcmFuc2Zvcm1lciA9IHNwbGl0QnkgPT4gKHtcbiAgb25TdWJzdGl0dXRpb24oc3Vic3RpdHV0aW9uLCByZXN1bHRTb0Zhcikge1xuICAgIGlmIChzcGxpdEJ5ICE9IG51bGwgJiYgdHlwZW9mIHNwbGl0QnkgPT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAodHlwZW9mIHN1YnN0aXR1dGlvbiA9PT0gJ3N0cmluZycgJiYgc3Vic3RpdHV0aW9uLmluY2x1ZGVzKHNwbGl0QnkpKSB7XG4gICAgICAgIHN1YnN0aXR1dGlvbiA9IHN1YnN0aXR1dGlvbi5zcGxpdChzcGxpdEJ5KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbmVlZCB0byBzcGVjaWZ5IGEgc3RyaW5nIGNoYXJhY3RlciB0byBzcGxpdCBieS4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1YnN0aXR1dGlvbjtcbiAgfSxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBzcGxpdFN0cmluZ1RyYW5zZm9ybWVyO1xuIl19","var isValidValue = function isValidValue(x) {\n  return x != null && !Number.isNaN(x) && typeof x !== 'boolean';\n};\n\nvar removeNonPrintingValuesTransformer = function removeNonPrintingValuesTransformer() {\n  return {\n    onSubstitution: function onSubstitution(substitution) {\n      if (Array.isArray(substitution)) {\n        return substitution.filter(isValidValue);\n      }\n      if (isValidValue(substitution)) {\n        return substitution;\n      }\n      return '';\n    }\n  };\n};\n\nexport default removeNonPrintingValuesTransformer;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZW1vdmVOb25QcmludGluZ1ZhbHVlc1RyYW5zZm9ybWVyL3JlbW92ZU5vblByaW50aW5nVmFsdWVzVHJhbnNmb3JtZXIuanMiXSwibmFtZXMiOlsiaXNWYWxpZFZhbHVlIiwieCIsIk51bWJlciIsImlzTmFOIiwicmVtb3ZlTm9uUHJpbnRpbmdWYWx1ZXNUcmFuc2Zvcm1lciIsIm9uU3Vic3RpdHV0aW9uIiwic3Vic3RpdHV0aW9uIiwiQXJyYXkiLCJpc0FycmF5IiwiZmlsdGVyIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFNQSxlQUFlLFNBQWZBLFlBQWU7QUFBQSxTQUNuQkMsS0FBSyxJQUFMLElBQWEsQ0FBQ0MsT0FBT0MsS0FBUCxDQUFhRixDQUFiLENBQWQsSUFBaUMsT0FBT0EsQ0FBUCxLQUFhLFNBRDNCO0FBQUEsQ0FBckI7O0FBR0EsSUFBTUcscUNBQXFDLFNBQXJDQSxrQ0FBcUM7QUFBQSxTQUFPO0FBQ2hEQyxrQkFEZ0QsMEJBQ2pDQyxZQURpQyxFQUNuQjtBQUMzQixVQUFJQyxNQUFNQyxPQUFOLENBQWNGLFlBQWQsQ0FBSixFQUFpQztBQUMvQixlQUFPQSxhQUFhRyxNQUFiLENBQW9CVCxZQUFwQixDQUFQO0FBQ0Q7QUFDRCxVQUFJQSxhQUFhTSxZQUFiLENBQUosRUFBZ0M7QUFDOUIsZUFBT0EsWUFBUDtBQUNEO0FBQ0QsYUFBTyxFQUFQO0FBQ0Q7QUFUK0MsR0FBUDtBQUFBLENBQTNDOztBQVlBLGVBQWVGLGtDQUFmIiwiZmlsZSI6InJlbW92ZU5vblByaW50aW5nVmFsdWVzVHJhbnNmb3JtZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBpc1ZhbGlkVmFsdWUgPSB4ID0+XG4gIHggIT0gbnVsbCAmJiAhTnVtYmVyLmlzTmFOKHgpICYmIHR5cGVvZiB4ICE9PSAnYm9vbGVhbic7XG5cbmNvbnN0IHJlbW92ZU5vblByaW50aW5nVmFsdWVzVHJhbnNmb3JtZXIgPSAoKSA9PiAoe1xuICBvblN1YnN0aXR1dGlvbihzdWJzdGl0dXRpb24pIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzdWJzdGl0dXRpb24pKSB7XG4gICAgICByZXR1cm4gc3Vic3RpdHV0aW9uLmZpbHRlcihpc1ZhbGlkVmFsdWUpO1xuICAgIH1cbiAgICBpZiAoaXNWYWxpZFZhbHVlKHN1YnN0aXR1dGlvbikpIHtcbiAgICAgIHJldHVybiBzdWJzdGl0dXRpb247XG4gICAgfVxuICAgIHJldHVybiAnJztcbiAgfSxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCByZW1vdmVOb25QcmludGluZ1ZhbHVlc1RyYW5zZm9ybWVyO1xuIl19","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport splitStringTransformer from '../splitStringTransformer';\nimport removeNonPrintingValuesTransformer from '../removeNonPrintingValuesTransformer';\n\nvar html = new TemplateTag(splitStringTransformer('\\n'), removeNonPrintingValuesTransformer, inlineArrayTransformer, stripIndentTransformer, trimResultTransformer);\n\nexport default html;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9odG1sL2h0bWwuanMiXSwibmFtZXMiOlsiVGVtcGxhdGVUYWciLCJzdHJpcEluZGVudFRyYW5zZm9ybWVyIiwiaW5saW5lQXJyYXlUcmFuc2Zvcm1lciIsInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsInNwbGl0U3RyaW5nVHJhbnNmb3JtZXIiLCJyZW1vdmVOb25QcmludGluZ1ZhbHVlc1RyYW5zZm9ybWVyIiwiaHRtbCJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxrQ0FBUCxNQUErQyx1Q0FBL0M7O0FBRUEsSUFBTUMsT0FBTyxJQUFJTixXQUFKLENBQ1hJLHVCQUF1QixJQUF2QixDQURXLEVBRVhDLGtDQUZXLEVBR1hILHNCQUhXLEVBSVhELHNCQUpXLEVBS1hFLHFCQUxXLENBQWI7O0FBUUEsZUFBZUcsSUFBZiIsImZpbGUiOiJodG1sLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRlbXBsYXRlVGFnIGZyb20gJy4uL1RlbXBsYXRlVGFnJztcbmltcG9ydCBzdHJpcEluZGVudFRyYW5zZm9ybWVyIGZyb20gJy4uL3N0cmlwSW5kZW50VHJhbnNmb3JtZXInO1xuaW1wb3J0IGlubGluZUFycmF5VHJhbnNmb3JtZXIgZnJvbSAnLi4vaW5saW5lQXJyYXlUcmFuc2Zvcm1lcic7XG5pbXBvcnQgdHJpbVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3RyaW1SZXN1bHRUcmFuc2Zvcm1lcic7XG5pbXBvcnQgc3BsaXRTdHJpbmdUcmFuc2Zvcm1lciBmcm9tICcuLi9zcGxpdFN0cmluZ1RyYW5zZm9ybWVyJztcbmltcG9ydCByZW1vdmVOb25QcmludGluZ1ZhbHVlc1RyYW5zZm9ybWVyIGZyb20gJy4uL3JlbW92ZU5vblByaW50aW5nVmFsdWVzVHJhbnNmb3JtZXInO1xuXG5jb25zdCBodG1sID0gbmV3IFRlbXBsYXRlVGFnKFxuICBzcGxpdFN0cmluZ1RyYW5zZm9ybWVyKCdcXG4nKSxcbiAgcmVtb3ZlTm9uUHJpbnRpbmdWYWx1ZXNUcmFuc2Zvcm1lcixcbiAgaW5saW5lQXJyYXlUcmFuc2Zvcm1lcixcbiAgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lcixcbiAgdHJpbVJlc3VsdFRyYW5zZm9ybWVyLFxuKTtcblxuZXhwb3J0IGRlZmF1bHQgaHRtbDtcbiJdfQ==","var replaceSubstitutionTransformer = function replaceSubstitutionTransformer(replaceWhat, replaceWith) {\n  return {\n    onSubstitution: function onSubstitution(substitution, resultSoFar) {\n      if (replaceWhat == null || replaceWith == null) {\n        throw new Error('replaceSubstitutionTransformer requires at least 2 arguments.');\n      }\n\n      // Do not touch if null or undefined\n      if (substitution == null) {\n        return substitution;\n      } else {\n        return substitution.toString().replace(replaceWhat, replaceWith);\n      }\n    }\n  };\n};\n\nexport default replaceSubstitutionTransformer;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZXBsYWNlU3Vic3RpdHV0aW9uVHJhbnNmb3JtZXIvcmVwbGFjZVN1YnN0aXR1dGlvblRyYW5zZm9ybWVyLmpzIl0sIm5hbWVzIjpbInJlcGxhY2VTdWJzdGl0dXRpb25UcmFuc2Zvcm1lciIsInJlcGxhY2VXaGF0IiwicmVwbGFjZVdpdGgiLCJvblN1YnN0aXR1dGlvbiIsInN1YnN0aXR1dGlvbiIsInJlc3VsdFNvRmFyIiwiRXJyb3IiLCJ0b1N0cmluZyIsInJlcGxhY2UiXSwibWFwcGluZ3MiOiJBQUFBLElBQU1BLGlDQUFpQyxTQUFqQ0EsOEJBQWlDLENBQUNDLFdBQUQsRUFBY0MsV0FBZDtBQUFBLFNBQStCO0FBQ3BFQyxrQkFEb0UsMEJBQ3JEQyxZQURxRCxFQUN2Q0MsV0FEdUMsRUFDMUI7QUFDeEMsVUFBSUosZUFBZSxJQUFmLElBQXVCQyxlQUFlLElBQTFDLEVBQWdEO0FBQzlDLGNBQU0sSUFBSUksS0FBSixDQUNKLCtEQURJLENBQU47QUFHRDs7QUFFRDtBQUNBLFVBQUlGLGdCQUFnQixJQUFwQixFQUEwQjtBQUN4QixlQUFPQSxZQUFQO0FBQ0QsT0FGRCxNQUVPO0FBQ0wsZUFBT0EsYUFBYUcsUUFBYixHQUF3QkMsT0FBeEIsQ0FBZ0NQLFdBQWhDLEVBQTZDQyxXQUE3QyxDQUFQO0FBQ0Q7QUFDRjtBQWRtRSxHQUEvQjtBQUFBLENBQXZDOztBQWlCQSxlQUFlRiw4QkFBZiIsImZpbGUiOiJyZXBsYWNlU3Vic3RpdHV0aW9uVHJhbnNmb3JtZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCByZXBsYWNlU3Vic3RpdHV0aW9uVHJhbnNmb3JtZXIgPSAocmVwbGFjZVdoYXQsIHJlcGxhY2VXaXRoKSA9PiAoe1xuICBvblN1YnN0aXR1dGlvbihzdWJzdGl0dXRpb24sIHJlc3VsdFNvRmFyKSB7XG4gICAgaWYgKHJlcGxhY2VXaGF0ID09IG51bGwgfHwgcmVwbGFjZVdpdGggPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAncmVwbGFjZVN1YnN0aXR1dGlvblRyYW5zZm9ybWVyIHJlcXVpcmVzIGF0IGxlYXN0IDIgYXJndW1lbnRzLicsXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIERvIG5vdCB0b3VjaCBpZiBudWxsIG9yIHVuZGVmaW5lZFxuICAgIGlmIChzdWJzdGl0dXRpb24gPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHN1YnN0aXR1dGlvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHN1YnN0aXR1dGlvbi50b1N0cmluZygpLnJlcGxhY2UocmVwbGFjZVdoYXQsIHJlcGxhY2VXaXRoKTtcbiAgICB9XG4gIH0sXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgcmVwbGFjZVN1YnN0aXR1dGlvblRyYW5zZm9ybWVyO1xuIl19","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport splitStringTransformer from '../splitStringTransformer';\nimport replaceSubstitutionTransformer from '../replaceSubstitutionTransformer';\n\nvar safeHtml = new TemplateTag(splitStringTransformer('\\n'), inlineArrayTransformer, stripIndentTransformer, trimResultTransformer, replaceSubstitutionTransformer(/&/g, '&amp;'), replaceSubstitutionTransformer(/</g, '&lt;'), replaceSubstitutionTransformer(/>/g, '&gt;'), replaceSubstitutionTransformer(/\"/g, '&quot;'), replaceSubstitutionTransformer(/'/g, '&#x27;'), replaceSubstitutionTransformer(/`/g, '&#x60;'));\n\nexport default safeHtml;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zYWZlSHRtbC9zYWZlSHRtbC5qcyJdLCJuYW1lcyI6WyJUZW1wbGF0ZVRhZyIsInN0cmlwSW5kZW50VHJhbnNmb3JtZXIiLCJpbmxpbmVBcnJheVRyYW5zZm9ybWVyIiwidHJpbVJlc3VsdFRyYW5zZm9ybWVyIiwic3BsaXRTdHJpbmdUcmFuc2Zvcm1lciIsInJlcGxhY2VTdWJzdGl0dXRpb25UcmFuc2Zvcm1lciIsInNhZmVIdG1sIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxXQUFQLE1BQXdCLGdCQUF4QjtBQUNBLE9BQU9DLHNCQUFQLE1BQW1DLDJCQUFuQztBQUNBLE9BQU9DLHNCQUFQLE1BQW1DLDJCQUFuQztBQUNBLE9BQU9DLHFCQUFQLE1BQWtDLDBCQUFsQztBQUNBLE9BQU9DLHNCQUFQLE1BQW1DLDJCQUFuQztBQUNBLE9BQU9DLDhCQUFQLE1BQTJDLG1DQUEzQzs7QUFFQSxJQUFNQyxXQUFXLElBQUlOLFdBQUosQ0FDZkksdUJBQXVCLElBQXZCLENBRGUsRUFFZkYsc0JBRmUsRUFHZkQsc0JBSGUsRUFJZkUscUJBSmUsRUFLZkUsK0JBQStCLElBQS9CLEVBQXFDLE9BQXJDLENBTGUsRUFNZkEsK0JBQStCLElBQS9CLEVBQXFDLE1BQXJDLENBTmUsRUFPZkEsK0JBQStCLElBQS9CLEVBQXFDLE1BQXJDLENBUGUsRUFRZkEsK0JBQStCLElBQS9CLEVBQXFDLFFBQXJDLENBUmUsRUFTZkEsK0JBQStCLElBQS9CLEVBQXFDLFFBQXJDLENBVGUsRUFVZkEsK0JBQStCLElBQS9CLEVBQXFDLFFBQXJDLENBVmUsQ0FBakI7O0FBYUEsZUFBZUMsUUFBZiIsImZpbGUiOiJzYWZlSHRtbC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUZW1wbGF0ZVRhZyBmcm9tICcuLi9UZW1wbGF0ZVRhZyc7XG5pbXBvcnQgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lciBmcm9tICcuLi9zdHJpcEluZGVudFRyYW5zZm9ybWVyJztcbmltcG9ydCBpbmxpbmVBcnJheVRyYW5zZm9ybWVyIGZyb20gJy4uL2lubGluZUFycmF5VHJhbnNmb3JtZXInO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuaW1wb3J0IHNwbGl0U3RyaW5nVHJhbnNmb3JtZXIgZnJvbSAnLi4vc3BsaXRTdHJpbmdUcmFuc2Zvcm1lcic7XG5pbXBvcnQgcmVwbGFjZVN1YnN0aXR1dGlvblRyYW5zZm9ybWVyIGZyb20gJy4uL3JlcGxhY2VTdWJzdGl0dXRpb25UcmFuc2Zvcm1lcic7XG5cbmNvbnN0IHNhZmVIdG1sID0gbmV3IFRlbXBsYXRlVGFnKFxuICBzcGxpdFN0cmluZ1RyYW5zZm9ybWVyKCdcXG4nKSxcbiAgaW5saW5lQXJyYXlUcmFuc2Zvcm1lcixcbiAgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lcixcbiAgdHJpbVJlc3VsdFRyYW5zZm9ybWVyLFxuICByZXBsYWNlU3Vic3RpdHV0aW9uVHJhbnNmb3JtZXIoLyYvZywgJyZhbXA7JyksXG4gIHJlcGxhY2VTdWJzdGl0dXRpb25UcmFuc2Zvcm1lcigvPC9nLCAnJmx0OycpLFxuICByZXBsYWNlU3Vic3RpdHV0aW9uVHJhbnNmb3JtZXIoLz4vZywgJyZndDsnKSxcbiAgcmVwbGFjZVN1YnN0aXR1dGlvblRyYW5zZm9ybWVyKC9cIi9nLCAnJnF1b3Q7JyksXG4gIHJlcGxhY2VTdWJzdGl0dXRpb25UcmFuc2Zvcm1lcigvJy9nLCAnJiN4Mjc7JyksXG4gIHJlcGxhY2VTdWJzdGl0dXRpb25UcmFuc2Zvcm1lcigvYC9nLCAnJiN4NjA7JyksXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBzYWZlSHRtbDtcbiJdfQ==","/**\n * Replaces tabs, newlines and spaces with the chosen value when they occur in sequences\n * @param  {(String|RegExp)} replaceWhat - the value or pattern that should be replaced\n * @param  {*}               replaceWith - the replacement value\n * @return {Object}                      - a TemplateTag transformer\n */\nvar replaceResultTransformer = function replaceResultTransformer(replaceWhat, replaceWith) {\n  return {\n    onEndResult: function onEndResult(endResult) {\n      if (replaceWhat == null || replaceWith == null) {\n        throw new Error('replaceResultTransformer requires at least 2 arguments.');\n      }\n      return endResult.replace(replaceWhat, replaceWith);\n    }\n  };\n};\n\nexport default replaceResultTransformer;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIvcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyLmpzIl0sIm5hbWVzIjpbInJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciIsInJlcGxhY2VXaGF0IiwicmVwbGFjZVdpdGgiLCJvbkVuZFJlc3VsdCIsImVuZFJlc3VsdCIsIkVycm9yIiwicmVwbGFjZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQU1BLElBQU1BLDJCQUEyQixTQUEzQkEsd0JBQTJCLENBQUNDLFdBQUQsRUFBY0MsV0FBZDtBQUFBLFNBQStCO0FBQzlEQyxlQUQ4RCx1QkFDbERDLFNBRGtELEVBQ3ZDO0FBQ3JCLFVBQUlILGVBQWUsSUFBZixJQUF1QkMsZUFBZSxJQUExQyxFQUFnRDtBQUM5QyxjQUFNLElBQUlHLEtBQUosQ0FDSix5REFESSxDQUFOO0FBR0Q7QUFDRCxhQUFPRCxVQUFVRSxPQUFWLENBQWtCTCxXQUFsQixFQUErQkMsV0FBL0IsQ0FBUDtBQUNEO0FBUjZELEdBQS9CO0FBQUEsQ0FBakM7O0FBV0EsZUFBZUYsd0JBQWYiLCJmaWxlIjoicmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBSZXBsYWNlcyB0YWJzLCBuZXdsaW5lcyBhbmQgc3BhY2VzIHdpdGggdGhlIGNob3NlbiB2YWx1ZSB3aGVuIHRoZXkgb2NjdXIgaW4gc2VxdWVuY2VzXG4gKiBAcGFyYW0gIHsoU3RyaW5nfFJlZ0V4cCl9IHJlcGxhY2VXaGF0IC0gdGhlIHZhbHVlIG9yIHBhdHRlcm4gdGhhdCBzaG91bGQgYmUgcmVwbGFjZWRcbiAqIEBwYXJhbSAgeyp9ICAgICAgICAgICAgICAgcmVwbGFjZVdpdGggLSB0aGUgcmVwbGFjZW1lbnQgdmFsdWVcbiAqIEByZXR1cm4ge09iamVjdH0gICAgICAgICAgICAgICAgICAgICAgLSBhIFRlbXBsYXRlVGFnIHRyYW5zZm9ybWVyXG4gKi9cbmNvbnN0IHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciA9IChyZXBsYWNlV2hhdCwgcmVwbGFjZVdpdGgpID0+ICh7XG4gIG9uRW5kUmVzdWx0KGVuZFJlc3VsdCkge1xuICAgIGlmIChyZXBsYWNlV2hhdCA9PSBudWxsIHx8IHJlcGxhY2VXaXRoID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ3JlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciByZXF1aXJlcyBhdCBsZWFzdCAyIGFyZ3VtZW50cy4nLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGVuZFJlc3VsdC5yZXBsYWNlKHJlcGxhY2VXaGF0LCByZXBsYWNlV2l0aCk7XG4gIH0sXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyO1xuIl19","import TemplateTag from '../TemplateTag';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\n\nvar oneLine = new TemplateTag(replaceResultTransformer(/(?:\\n(?:\\s*))+/g, ' '), trimResultTransformer);\n\nexport default oneLine;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbmVMaW5lL29uZUxpbmUuanMiXSwibmFtZXMiOlsiVGVtcGxhdGVUYWciLCJ0cmltUmVzdWx0VHJhbnNmb3JtZXIiLCJyZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIiLCJvbmVMaW5lIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxXQUFQLE1BQXdCLGdCQUF4QjtBQUNBLE9BQU9DLHFCQUFQLE1BQWtDLDBCQUFsQztBQUNBLE9BQU9DLHdCQUFQLE1BQXFDLDZCQUFyQzs7QUFFQSxJQUFNQyxVQUFVLElBQUlILFdBQUosQ0FDZEUseUJBQXlCLGlCQUF6QixFQUE0QyxHQUE1QyxDQURjLEVBRWRELHFCQUZjLENBQWhCOztBQUtBLGVBQWVFLE9BQWYiLCJmaWxlIjoib25lTGluZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUZW1wbGF0ZVRhZyBmcm9tICcuLi9UZW1wbGF0ZVRhZyc7XG5pbXBvcnQgdHJpbVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3RyaW1SZXN1bHRUcmFuc2Zvcm1lcic7XG5pbXBvcnQgcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3JlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lcic7XG5cbmNvbnN0IG9uZUxpbmUgPSBuZXcgVGVtcGxhdGVUYWcoXG4gIHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lcigvKD86XFxuKD86XFxzKikpKy9nLCAnICcpLFxuICB0cmltUmVzdWx0VHJhbnNmb3JtZXIsXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBvbmVMaW5lO1xuIl19","import TemplateTag from '../TemplateTag';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\n\nvar oneLineTrim = new TemplateTag(replaceResultTransformer(/(?:\\n\\s*)/g, ''), trimResultTransformer);\n\nexport default oneLineTrim;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbmVMaW5lVHJpbS9vbmVMaW5lVHJpbS5qcyJdLCJuYW1lcyI6WyJUZW1wbGF0ZVRhZyIsInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsInJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciIsIm9uZUxpbmVUcmltIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxXQUFQLE1BQXdCLGdCQUF4QjtBQUNBLE9BQU9DLHFCQUFQLE1BQWtDLDBCQUFsQztBQUNBLE9BQU9DLHdCQUFQLE1BQXFDLDZCQUFyQzs7QUFFQSxJQUFNQyxjQUFjLElBQUlILFdBQUosQ0FDbEJFLHlCQUF5QixZQUF6QixFQUF1QyxFQUF2QyxDQURrQixFQUVsQkQscUJBRmtCLENBQXBCOztBQUtBLGVBQWVFLFdBQWYiLCJmaWxlIjoib25lTGluZVRyaW0uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVGVtcGxhdGVUYWcgZnJvbSAnLi4vVGVtcGxhdGVUYWcnO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuaW1wb3J0IHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi9yZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXInO1xuXG5jb25zdCBvbmVMaW5lVHJpbSA9IG5ldyBUZW1wbGF0ZVRhZyhcbiAgcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyKC8oPzpcXG5cXHMqKS9nLCAnJyksXG4gIHRyaW1SZXN1bHRUcmFuc2Zvcm1lcixcbik7XG5cbmV4cG9ydCBkZWZhdWx0IG9uZUxpbmVUcmltO1xuIl19","import TemplateTag from '../TemplateTag';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\n\nvar oneLineCommaLists = new TemplateTag(inlineArrayTransformer({ separator: ',' }), replaceResultTransformer(/(?:\\s+)/g, ' '), trimResultTransformer);\n\nexport default oneLineCommaLists;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbmVMaW5lQ29tbWFMaXN0cy9vbmVMaW5lQ29tbWFMaXN0cy5qcyJdLCJuYW1lcyI6WyJUZW1wbGF0ZVRhZyIsImlubGluZUFycmF5VHJhbnNmb3JtZXIiLCJ0cmltUmVzdWx0VHJhbnNmb3JtZXIiLCJyZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIiLCJvbmVMaW5lQ29tbWFMaXN0cyIsInNlcGFyYXRvciJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7QUFDQSxPQUFPQyx3QkFBUCxNQUFxQyw2QkFBckM7O0FBRUEsSUFBTUMsb0JBQW9CLElBQUlKLFdBQUosQ0FDeEJDLHVCQUF1QixFQUFFSSxXQUFXLEdBQWIsRUFBdkIsQ0FEd0IsRUFFeEJGLHlCQUF5QixVQUF6QixFQUFxQyxHQUFyQyxDQUZ3QixFQUd4QkQscUJBSHdCLENBQTFCOztBQU1BLGVBQWVFLGlCQUFmIiwiZmlsZSI6Im9uZUxpbmVDb21tYUxpc3RzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRlbXBsYXRlVGFnIGZyb20gJy4uL1RlbXBsYXRlVGFnJztcbmltcG9ydCBpbmxpbmVBcnJheVRyYW5zZm9ybWVyIGZyb20gJy4uL2lubGluZUFycmF5VHJhbnNmb3JtZXInO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuaW1wb3J0IHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi9yZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXInO1xuXG5jb25zdCBvbmVMaW5lQ29tbWFMaXN0cyA9IG5ldyBUZW1wbGF0ZVRhZyhcbiAgaW5saW5lQXJyYXlUcmFuc2Zvcm1lcih7IHNlcGFyYXRvcjogJywnIH0pLFxuICByZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIoLyg/OlxccyspL2csICcgJyksXG4gIHRyaW1SZXN1bHRUcmFuc2Zvcm1lcixcbik7XG5cbmV4cG9ydCBkZWZhdWx0IG9uZUxpbmVDb21tYUxpc3RzO1xuIl19","import TemplateTag from '../TemplateTag';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\n\nvar oneLineCommaListsOr = new TemplateTag(inlineArrayTransformer({ separator: ',', conjunction: 'or' }), replaceResultTransformer(/(?:\\s+)/g, ' '), trimResultTransformer);\n\nexport default oneLineCommaListsOr;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbmVMaW5lQ29tbWFMaXN0c09yL29uZUxpbmVDb21tYUxpc3RzT3IuanMiXSwibmFtZXMiOlsiVGVtcGxhdGVUYWciLCJpbmxpbmVBcnJheVRyYW5zZm9ybWVyIiwidHJpbVJlc3VsdFRyYW5zZm9ybWVyIiwicmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyIiwib25lTGluZUNvbW1hTGlzdHNPciIsInNlcGFyYXRvciIsImNvbmp1bmN0aW9uIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxXQUFQLE1BQXdCLGdCQUF4QjtBQUNBLE9BQU9DLHNCQUFQLE1BQW1DLDJCQUFuQztBQUNBLE9BQU9DLHFCQUFQLE1BQWtDLDBCQUFsQztBQUNBLE9BQU9DLHdCQUFQLE1BQXFDLDZCQUFyQzs7QUFFQSxJQUFNQyxzQkFBc0IsSUFBSUosV0FBSixDQUMxQkMsdUJBQXVCLEVBQUVJLFdBQVcsR0FBYixFQUFrQkMsYUFBYSxJQUEvQixFQUF2QixDQUQwQixFQUUxQkgseUJBQXlCLFVBQXpCLEVBQXFDLEdBQXJDLENBRjBCLEVBRzFCRCxxQkFIMEIsQ0FBNUI7O0FBTUEsZUFBZUUsbUJBQWYiLCJmaWxlIjoib25lTGluZUNvbW1hTGlzdHNPci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUZW1wbGF0ZVRhZyBmcm9tICcuLi9UZW1wbGF0ZVRhZyc7XG5pbXBvcnQgaW5saW5lQXJyYXlUcmFuc2Zvcm1lciBmcm9tICcuLi9pbmxpbmVBcnJheVRyYW5zZm9ybWVyJztcbmltcG9ydCB0cmltUmVzdWx0VHJhbnNmb3JtZXIgZnJvbSAnLi4vdHJpbVJlc3VsdFRyYW5zZm9ybWVyJztcbmltcG9ydCByZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIgZnJvbSAnLi4vcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyJztcblxuY29uc3Qgb25lTGluZUNvbW1hTGlzdHNPciA9IG5ldyBUZW1wbGF0ZVRhZyhcbiAgaW5saW5lQXJyYXlUcmFuc2Zvcm1lcih7IHNlcGFyYXRvcjogJywnLCBjb25qdW5jdGlvbjogJ29yJyB9KSxcbiAgcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyKC8oPzpcXHMrKS9nLCAnICcpLFxuICB0cmltUmVzdWx0VHJhbnNmb3JtZXIsXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBvbmVMaW5lQ29tbWFMaXN0c09yO1xuIl19","import TemplateTag from '../TemplateTag';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\n\nvar oneLineCommaListsAnd = new TemplateTag(inlineArrayTransformer({ separator: ',', conjunction: 'and' }), replaceResultTransformer(/(?:\\s+)/g, ' '), trimResultTransformer);\n\nexport default oneLineCommaListsAnd;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbmVMaW5lQ29tbWFMaXN0c0FuZC9vbmVMaW5lQ29tbWFMaXN0c0FuZC5qcyJdLCJuYW1lcyI6WyJUZW1wbGF0ZVRhZyIsImlubGluZUFycmF5VHJhbnNmb3JtZXIiLCJ0cmltUmVzdWx0VHJhbnNmb3JtZXIiLCJyZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIiLCJvbmVMaW5lQ29tbWFMaXN0c0FuZCIsInNlcGFyYXRvciIsImNvbmp1bmN0aW9uIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxXQUFQLE1BQXdCLGdCQUF4QjtBQUNBLE9BQU9DLHNCQUFQLE1BQW1DLDJCQUFuQztBQUNBLE9BQU9DLHFCQUFQLE1BQWtDLDBCQUFsQztBQUNBLE9BQU9DLHdCQUFQLE1BQXFDLDZCQUFyQzs7QUFFQSxJQUFNQyx1QkFBdUIsSUFBSUosV0FBSixDQUMzQkMsdUJBQXVCLEVBQUVJLFdBQVcsR0FBYixFQUFrQkMsYUFBYSxLQUEvQixFQUF2QixDQUQyQixFQUUzQkgseUJBQXlCLFVBQXpCLEVBQXFDLEdBQXJDLENBRjJCLEVBRzNCRCxxQkFIMkIsQ0FBN0I7O0FBTUEsZUFBZUUsb0JBQWYiLCJmaWxlIjoib25lTGluZUNvbW1hTGlzdHNBbmQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVGVtcGxhdGVUYWcgZnJvbSAnLi4vVGVtcGxhdGVUYWcnO1xuaW1wb3J0IGlubGluZUFycmF5VHJhbnNmb3JtZXIgZnJvbSAnLi4vaW5saW5lQXJyYXlUcmFuc2Zvcm1lcic7XG5pbXBvcnQgdHJpbVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3RyaW1SZXN1bHRUcmFuc2Zvcm1lcic7XG5pbXBvcnQgcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3JlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lcic7XG5cbmNvbnN0IG9uZUxpbmVDb21tYUxpc3RzQW5kID0gbmV3IFRlbXBsYXRlVGFnKFxuICBpbmxpbmVBcnJheVRyYW5zZm9ybWVyKHsgc2VwYXJhdG9yOiAnLCcsIGNvbmp1bmN0aW9uOiAnYW5kJyB9KSxcbiAgcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyKC8oPzpcXHMrKS9nLCAnICcpLFxuICB0cmltUmVzdWx0VHJhbnNmb3JtZXIsXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBvbmVMaW5lQ29tbWFMaXN0c0FuZDtcbiJdfQ==","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\n\nvar inlineLists = new TemplateTag(inlineArrayTransformer, stripIndentTransformer, trimResultTransformer);\n\nexport default inlineLists;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbmxpbmVMaXN0cy9pbmxpbmVMaXN0cy5qcyJdLCJuYW1lcyI6WyJUZW1wbGF0ZVRhZyIsInN0cmlwSW5kZW50VHJhbnNmb3JtZXIiLCJpbmxpbmVBcnJheVRyYW5zZm9ybWVyIiwidHJpbVJlc3VsdFRyYW5zZm9ybWVyIiwiaW5saW5lTGlzdHMiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLFdBQVAsTUFBd0IsZ0JBQXhCO0FBQ0EsT0FBT0Msc0JBQVAsTUFBbUMsMkJBQW5DO0FBQ0EsT0FBT0Msc0JBQVAsTUFBbUMsMkJBQW5DO0FBQ0EsT0FBT0MscUJBQVAsTUFBa0MsMEJBQWxDOztBQUVBLElBQU1DLGNBQWMsSUFBSUosV0FBSixDQUNsQkUsc0JBRGtCLEVBRWxCRCxzQkFGa0IsRUFHbEJFLHFCQUhrQixDQUFwQjs7QUFNQSxlQUFlQyxXQUFmIiwiZmlsZSI6ImlubGluZUxpc3RzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRlbXBsYXRlVGFnIGZyb20gJy4uL1RlbXBsYXRlVGFnJztcbmltcG9ydCBzdHJpcEluZGVudFRyYW5zZm9ybWVyIGZyb20gJy4uL3N0cmlwSW5kZW50VHJhbnNmb3JtZXInO1xuaW1wb3J0IGlubGluZUFycmF5VHJhbnNmb3JtZXIgZnJvbSAnLi4vaW5saW5lQXJyYXlUcmFuc2Zvcm1lcic7XG5pbXBvcnQgdHJpbVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3RyaW1SZXN1bHRUcmFuc2Zvcm1lcic7XG5cbmNvbnN0IGlubGluZUxpc3RzID0gbmV3IFRlbXBsYXRlVGFnKFxuICBpbmxpbmVBcnJheVRyYW5zZm9ybWVyLFxuICBzdHJpcEluZGVudFRyYW5zZm9ybWVyLFxuICB0cmltUmVzdWx0VHJhbnNmb3JtZXIsXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBpbmxpbmVMaXN0cztcbiJdfQ==","import TemplateTag from '../TemplateTag';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\n\nvar oneLineInlineLists = new TemplateTag(inlineArrayTransformer, replaceResultTransformer(/(?:\\s+)/g, ' '), trimResultTransformer);\n\nexport default oneLineInlineLists;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbmVMaW5lSW5saW5lTGlzdHMvb25lTGluZUlubGluZUxpc3RzLmpzIl0sIm5hbWVzIjpbIlRlbXBsYXRlVGFnIiwiaW5saW5lQXJyYXlUcmFuc2Zvcm1lciIsInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsInJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciIsIm9uZUxpbmVJbmxpbmVMaXN0cyJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7QUFDQSxPQUFPQyx3QkFBUCxNQUFxQyw2QkFBckM7O0FBRUEsSUFBTUMscUJBQXFCLElBQUlKLFdBQUosQ0FDekJDLHNCQUR5QixFQUV6QkUseUJBQXlCLFVBQXpCLEVBQXFDLEdBQXJDLENBRnlCLEVBR3pCRCxxQkFIeUIsQ0FBM0I7O0FBTUEsZUFBZUUsa0JBQWYiLCJmaWxlIjoib25lTGluZUlubGluZUxpc3RzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRlbXBsYXRlVGFnIGZyb20gJy4uL1RlbXBsYXRlVGFnJztcbmltcG9ydCBpbmxpbmVBcnJheVRyYW5zZm9ybWVyIGZyb20gJy4uL2lubGluZUFycmF5VHJhbnNmb3JtZXInO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuaW1wb3J0IHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi9yZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXInO1xuXG5jb25zdCBvbmVMaW5lSW5saW5lTGlzdHMgPSBuZXcgVGVtcGxhdGVUYWcoXG4gIGlubGluZUFycmF5VHJhbnNmb3JtZXIsXG4gIHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lcigvKD86XFxzKykvZywgJyAnKSxcbiAgdHJpbVJlc3VsdFRyYW5zZm9ybWVyLFxuKTtcblxuZXhwb3J0IGRlZmF1bHQgb25lTGluZUlubGluZUxpc3RzO1xuIl19","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\n\nvar stripIndent = new TemplateTag(stripIndentTransformer, trimResultTransformer);\n\nexport default stripIndent;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHJpcEluZGVudC9zdHJpcEluZGVudC5qcyJdLCJuYW1lcyI6WyJUZW1wbGF0ZVRhZyIsInN0cmlwSW5kZW50VHJhbnNmb3JtZXIiLCJ0cmltUmVzdWx0VHJhbnNmb3JtZXIiLCJzdHJpcEluZGVudCJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7O0FBRUEsSUFBTUMsY0FBYyxJQUFJSCxXQUFKLENBQ2xCQyxzQkFEa0IsRUFFbEJDLHFCQUZrQixDQUFwQjs7QUFLQSxlQUFlQyxXQUFmIiwiZmlsZSI6InN0cmlwSW5kZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRlbXBsYXRlVGFnIGZyb20gJy4uL1RlbXBsYXRlVGFnJztcbmltcG9ydCBzdHJpcEluZGVudFRyYW5zZm9ybWVyIGZyb20gJy4uL3N0cmlwSW5kZW50VHJhbnNmb3JtZXInO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuXG5jb25zdCBzdHJpcEluZGVudCA9IG5ldyBUZW1wbGF0ZVRhZyhcbiAgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lcixcbiAgdHJpbVJlc3VsdFRyYW5zZm9ybWVyLFxuKTtcblxuZXhwb3J0IGRlZmF1bHQgc3RyaXBJbmRlbnQ7XG4iXX0=","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\n\nvar stripIndents = new TemplateTag(stripIndentTransformer('all'), trimResultTransformer);\n\nexport default stripIndents;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHJpcEluZGVudHMvc3RyaXBJbmRlbnRzLmpzIl0sIm5hbWVzIjpbIlRlbXBsYXRlVGFnIiwic3RyaXBJbmRlbnRUcmFuc2Zvcm1lciIsInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsInN0cmlwSW5kZW50cyJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7O0FBRUEsSUFBTUMsZUFBZSxJQUFJSCxXQUFKLENBQ25CQyx1QkFBdUIsS0FBdkIsQ0FEbUIsRUFFbkJDLHFCQUZtQixDQUFyQjs7QUFLQSxlQUFlQyxZQUFmIiwiZmlsZSI6InN0cmlwSW5kZW50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUZW1wbGF0ZVRhZyBmcm9tICcuLi9UZW1wbGF0ZVRhZyc7XG5pbXBvcnQgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lciBmcm9tICcuLi9zdHJpcEluZGVudFRyYW5zZm9ybWVyJztcbmltcG9ydCB0cmltUmVzdWx0VHJhbnNmb3JtZXIgZnJvbSAnLi4vdHJpbVJlc3VsdFRyYW5zZm9ybWVyJztcblxuY29uc3Qgc3RyaXBJbmRlbnRzID0gbmV3IFRlbXBsYXRlVGFnKFxuICBzdHJpcEluZGVudFRyYW5zZm9ybWVyKCdhbGwnKSxcbiAgdHJpbVJlc3VsdFRyYW5zZm9ybWVyLFxuKTtcblxuZXhwb3J0IGRlZmF1bHQgc3RyaXBJbmRlbnRzO1xuIl19","import { Grammar } from 'prismjs';\n\nimport { CompletionItem } from '@grafana/ui';\n\nexport const QUERY_COMMANDS: CompletionItem[] = [\n  {\n    label: 'fields',\n    documentation: 'Retrieves the specified fields from log events',\n  },\n  { label: 'display', documentation: 'Specifies which fields to display in the query results' },\n  {\n    label: 'filter',\n    documentation: 'Filters the results of a query based on one or more conditions',\n  },\n  {\n    label: 'stats',\n    documentation: 'Calculates aggregate statistics based on the values of log fields',\n  },\n  { label: 'sort', documentation: 'Sorts the retrieved log events' },\n  { label: 'limit', documentation: 'Specifies the number of log events returned by the query' },\n  {\n    label: 'parse',\n    documentation:\n      'Extracts data from a log field, creating one or more ephemeral fields that you can process further in the query',\n  },\n];\n\nexport const COMPARISON_OPERATORS = ['=', '!=', '<', '<=', '>', '>='];\nexport const ARITHMETIC_OPERATORS = ['+', '-', '*', '/', '^', '%'];\n\nexport const NUMERIC_OPERATORS = [\n  {\n    label: 'abs',\n    detail: 'abs(a)',\n    documentation: 'Absolute value.',\n  },\n  {\n    label: 'ceil',\n    detail: 'ceil(a)',\n    documentation: 'Round to ceiling (the smallest integer that is greater than the value of a).',\n  },\n  {\n    label: 'floor',\n    detail: 'floor(a)',\n    documentation: 'Round to floor (the largest integer that is smaller than the value of a).',\n  },\n  {\n    label: 'greatest',\n    detail: 'greatest(a,b, ... z)',\n    documentation: 'Returns the largest value.',\n  },\n  {\n    label: 'least',\n    detail: 'least(a, b, ... z)',\n    documentation: 'Returns the smallest value.',\n  },\n  {\n    label: 'log',\n    detail: 'log(a)',\n    documentation: 'Natural logarithm.',\n  },\n  {\n    label: 'sqrt',\n    detail: 'sqrt(a)',\n    documentation: 'Square root.',\n  },\n];\n\nexport const GENERAL_FUNCTIONS = [\n  {\n    label: 'ispresent',\n    detail: 'ispresent(fieldname)',\n    documentation: 'Returns true if the field exists.',\n  },\n  {\n    label: 'coalesce',\n    detail: 'coalesce(fieldname1, fieldname2, ... fieldnamex)',\n    documentation: 'Returns the first non-null value from the list.',\n  },\n];\n\nexport const STRING_FUNCTIONS = [\n  {\n    label: 'isempty',\n    detail: 'isempty(fieldname)',\n    documentation: 'Returns true if the field is missing or is an empty string.',\n  },\n  {\n    label: 'isblank',\n    detail: 'isblank(fieldname)',\n    documentation: 'Returns true if the field is missing, an empty string, or contains only white space.',\n  },\n  {\n    label: 'concat',\n    detail: 'concat(string1, string2, ... stringz)',\n    documentation: 'Concatenates the strings.',\n  },\n  {\n    label: 'ltrim',\n    detail: 'ltrim(string) or ltrim(string1, string2)',\n    documentation:\n      'Remove white space from the left of the string. If the function has a second string argument, it removes the characters of string2 from the left of string1.',\n  },\n  {\n    label: 'rtrim',\n    detail: 'rtrim(string) or rtrim(string1, string2)',\n    documentation:\n      'Remove white space from the right of the string. If the function has a second string argument, it removes the characters of string2 from the right of string1.',\n  },\n  {\n    label: 'trim',\n    detail: 'trim(string) or trim(string1, string2)',\n    documentation:\n      'Remove white space from both ends of the string. If the function has a second string argument, it removes the characters of string2 from both sides of string1.',\n  },\n  {\n    label: 'strlen',\n    detail: 'strlen(string)',\n    documentation: 'Returns the length of the string in Unicode code points.',\n  },\n  {\n    label: 'toupper',\n    detail: 'toupper(string)',\n    documentation: 'Converts the string to uppercase.',\n  },\n  {\n    label: 'tolower',\n    detail: 'tolower(string)',\n    documentation: 'Converts the string to lowercase.',\n  },\n  {\n    label: 'substr',\n    detail: 'substr(string1, x), or substr(string1, x, y)',\n    documentation:\n      'Returns a substring from the index specified by the number argument to the end of the string. If the function has a second number argument, it contains the length of the substring to be retrieved.',\n  },\n  {\n    label: 'replace',\n    detail: 'replace(string1, string2, string3)',\n    documentation: 'Replaces all instances of string2 in string1 with string3.',\n  },\n  {\n    label: 'strcontains',\n    detail: 'strcontains(string1, string2)',\n    documentation: 'Returns 1 if string1 contains string2 and 0 otherwise.',\n  },\n];\n\nexport const DATETIME_FUNCTIONS = [\n  {\n    label: 'bin',\n    detail: 'bin(period)',\n    documentation: 'Rounds the value of @timestamp to the given period and then truncates.',\n  },\n  {\n    label: 'datefloor',\n    detail: 'datefloor(a, period)',\n    documentation: 'Truncates the timestamp to the given period.',\n  },\n  {\n    label: 'dateceil',\n    detail: 'dateceil(a, period)',\n    documentation: 'Rounds up the timestamp to the given period and then truncates.',\n  },\n  {\n    label: 'fromMillis',\n    detail: 'fromMillis(fieldname)',\n    documentation:\n      'Interprets the input field as the number of milliseconds since the Unix epoch and converts it to a timestamp.',\n  },\n  {\n    label: 'toMillis',\n    detail: 'toMillis(fieldname)',\n    documentation:\n      'Converts the timestamp found in the named field into a number representing the milliseconds since the Unix epoch.',\n  },\n];\n\nexport const IP_FUNCTIONS = [\n  {\n    label: 'isValidIp',\n    detail: 'isValidIp(fieldname)',\n    documentation: 'Returns true if the field is a valid v4 or v6 IP address.',\n  },\n  {\n    label: 'isValidIpV4',\n    detail: 'isValidIpV4(fieldname)',\n    documentation: 'Returns true if the field is a valid v4 IP address.',\n  },\n  {\n    label: 'isValidIpV6',\n    detail: 'isValidIpV6(fieldname)',\n    documentation: 'Returns true if the field is a valid v6 IP address.',\n  },\n  {\n    label: 'isIpInSubnet',\n    detail: 'isIpInSubnet(fieldname, string)',\n    documentation: 'Returns true if the field is a valid v4 or v6 IP address within the specified v4 or v6 subnet.',\n  },\n  {\n    label: 'isIpv4InSubnet',\n    detail: 'isIpv4InSubnet(fieldname, string)',\n    documentation: 'Returns true if the field is a valid v4 IP address within the specified v4 subnet.',\n  },\n  {\n    label: 'isIpv6InSubnet',\n    detail: 'isIpv6InSubnet(fieldname, string)',\n    documentation: 'Returns true if the field is a valid v6 IP address within the specified v6 subnet.',\n  },\n];\n\nexport const BOOLEAN_FUNCTIONS = [\n  {\n    label: 'ispresent',\n    detail: 'ispresent(fieldname)',\n    documentation: 'Returns true if the field exists.',\n  },\n  {\n    label: 'isempty',\n    detail: 'isempty(fieldname)',\n    documentation: 'Returns true if the field is missing or is an empty string.',\n  },\n  {\n    label: 'isblank',\n    detail: 'isblank(fieldname)',\n    documentation: 'Returns true if the field is missing, an empty string, or contains only white space.',\n  },\n  {\n    label: 'strcontains',\n    detail: 'strcontains(string1, string2)',\n    documentation: 'Returns 1 if string1 contains string2 and 0 otherwise.',\n  },\n  ...IP_FUNCTIONS,\n];\n\nexport const AGGREGATION_FUNCTIONS_STATS = [\n  {\n    label: 'avg',\n    detail: 'avg(NumericFieldname)',\n    documentation: 'The average of the values in the specified field.',\n  },\n  {\n    label: 'count',\n    detail: 'count(fieldname) or count(*)',\n    documentation: 'Counts the log records.',\n  },\n  {\n    label: 'count_distinct',\n    detail: 'count_distinct(fieldname)',\n    documentation: 'Returns the number of unique values for the field.',\n  },\n  {\n    label: 'max',\n    detail: 'max(fieldname)',\n    documentation: 'The maximum of the values for this log field in the queried logs.',\n  },\n  {\n    label: 'min',\n    detail: 'min(fieldname)',\n    documentation: 'The minimum of the values for this log field in the queried logs.',\n  },\n  {\n    label: 'pct',\n    detail: 'pct(fieldname, value)',\n    documentation: 'A percentile indicates the relative standing of a value in a datas.',\n  },\n  {\n    label: 'stddev',\n    detail: 'stddev(NumericFieldname)',\n    documentation: 'The standard deviation of the values in the specified field.',\n  },\n  {\n    label: 'sum',\n    detail: 'sum(NumericFieldname)',\n    documentation: 'The sum of the values in the specified field.',\n  },\n];\n\nexport const NON_AGGREGATION_FUNCS_STATS = [\n  {\n    label: 'earliest',\n    detail: 'earliest(fieldname)',\n    documentation:\n      'Returns the value of fieldName from the log event that has the earliest time stamp in the queried logs.',\n  },\n  {\n    label: 'latest',\n    detail: 'latest(fieldname)',\n    documentation:\n      'Returns the value of fieldName from the log event that has the latest time stamp in the queried logs.',\n  },\n  {\n    label: 'sortsFirst',\n    detail: 'sortsFirst(fieldname)',\n    documentation: 'Returns the value of fieldName that sorts first in the queried logs.',\n  },\n  {\n    label: 'sortsLast',\n    detail: 'sortsLast(fieldname)',\n    documentation: 'Returns the value of fieldName that sorts last in the queried logs.',\n  },\n];\n\nexport const STATS_FUNCS = [...AGGREGATION_FUNCTIONS_STATS, ...NON_AGGREGATION_FUNCS_STATS];\n\nexport const KEYWORDS = ['as', 'like', 'by', 'in', 'desc', 'asc'];\nexport const FIELD_AND_FILTER_FUNCTIONS = [\n  ...NUMERIC_OPERATORS,\n  ...GENERAL_FUNCTIONS,\n  ...STRING_FUNCTIONS,\n  ...DATETIME_FUNCTIONS,\n  ...IP_FUNCTIONS,\n];\n\nexport const FUNCTIONS = [...FIELD_AND_FILTER_FUNCTIONS, ...STATS_FUNCS];\n\nconst tokenizer: Grammar = {\n  comment: {\n    pattern: /^#.*/,\n    greedy: true,\n  },\n  backticks: {\n    pattern: /`.*?`/,\n    alias: 'string',\n    greedy: true,\n  },\n  quote: {\n    pattern: /\".*?\"/,\n    alias: 'string',\n    greedy: true,\n  },\n  regex: {\n    pattern: /\\/.*?\\/(?=\\||\\s*$|,)/,\n    greedy: true,\n  },\n  'query-command': {\n    pattern: new RegExp(`\\\\b(?:${QUERY_COMMANDS.map((command) => command.label).join('|')})\\\\b`, 'i'),\n    alias: 'function',\n  },\n  function: {\n    pattern: new RegExp(`\\\\b(?:${FUNCTIONS.map((f) => f.label).join('|')})\\\\b`, 'i'),\n  },\n  keyword: {\n    pattern: new RegExp(`(\\\\s+)(${KEYWORDS.join('|')})(?=\\\\s+)`, 'i'),\n    lookbehind: true,\n  },\n  // 'log-group-name': {\n  //   pattern: /[\\.\\-_/#A-Za-z0-9]+/,\n  // },\n  'field-name': {\n    pattern: /(@?[_a-zA-Z]+[_.0-9a-zA-Z]*)|(`((\\\\`)|([^`]))*?`)/,\n    greedy: true,\n  },\n  number: /\\b-?\\d+((\\.\\d*)?([eE][+-]?\\d+)?)?\\b/,\n  'command-separator': {\n    pattern: /\\|/,\n    alias: 'punctuation',\n  },\n  'comparison-operator': {\n    pattern: /([<>]=?)|(!?=)/,\n  },\n  punctuation: /[{}()`,.]/,\n  whitespace: /\\s+/,\n};\n\nexport default tokenizer;\n","import { css, cx } from '@emotion/css';\nimport { stripIndent, stripIndents } from 'common-tags';\nimport Prism from 'prismjs';\nimport React, { PureComponent } from 'react';\n\nimport { QueryEditorHelpProps } from '@grafana/data';\nimport { flattenTokens } from '@grafana/ui/src/slate-plugins/slate-prism';\n\nimport tokenizer from '../syntax';\nimport { CloudWatchQuery } from '../types';\n\ninterface QueryExample {\n  category: string;\n  examples: Array<{\n    title: string;\n    expr: string;\n  }>;\n}\n\nconst CLIQ_EXAMPLES: QueryExample[] = [\n  {\n    category: 'Lambda',\n    examples: [\n      {\n        title: 'View latency statistics for 5-minute intervals',\n        expr: stripIndents`filter @type = \"REPORT\" |\n                           stats avg(@duration), max(@duration), min(@duration) by bin(5m)`,\n      },\n      {\n        title: 'Determine the amount of overprovisioned memory',\n        expr: stripIndent`\n        filter @type = \"REPORT\" |\n        stats max(@memorySize / 1024 / 1024) as provisonedMemoryMB,\n              min(@maxMemoryUsed / 1024 / 1024) as smallestMemoryRequestMB,\n              avg(@maxMemoryUsed / 1024 / 1024) as avgMemoryUsedMB,\n              max(@maxMemoryUsed / 1024 / 1024) as maxMemoryUsedMB,\n              provisonedMemoryMB - maxMemoryUsedMB as overProvisionedMB`,\n      },\n      {\n        title: 'Find the most expensive requests',\n        expr: stripIndents`filter @type = \"REPORT\" |\n                           fields @requestId, @billedDuration |\n                           sort by @billedDuration desc`,\n      },\n    ],\n  },\n\n  {\n    category: 'VPC Flow Logs',\n    examples: [\n      {\n        title: 'Average, min, and max byte transfers by source and destination IP addresses',\n        expr: `stats avg(bytes), min(bytes), max(bytes) by srcAddr, dstAddr`,\n      },\n      {\n        title: 'IP addresses using UDP transfer protocol',\n        expr: 'filter protocol=17 | stats count(*) by srcAddr',\n      },\n      {\n        title: 'Top 10 byte transfers by source and destination IP addresses',\n        expr: stripIndents`stats sum(bytes) as bytesTransferred by srcAddr, dstAddr |\n                           sort bytesTransferred desc |\n                           limit 10`,\n      },\n      {\n        title: 'Top 20 source IP addresses with highest number of rejected requests',\n        expr: stripIndents`filter action=\"REJECT\" |\n                           stats count(*) as numRejections by srcAddr |\n                           sort numRejections desc |\n                           limit 20`,\n      },\n    ],\n  },\n  {\n    category: 'CloudTrail',\n    examples: [\n      {\n        title: 'Number of log entries by service, event type, and region',\n        expr: 'stats count(*) by eventSource, eventName, awsRegion',\n      },\n\n      {\n        title: 'Number of log entries by region and EC2 event type',\n        expr: stripIndents`filter eventSource=\"ec2.amazonaws.com\" |\n                           stats count(*) as eventCount by eventName, awsRegion |\n                           sort eventCount desc`,\n      },\n\n      {\n        title: 'Regions, usernames, and ARNs of newly created IAM users',\n        expr: stripIndents`filter eventName=\"CreateUser\" |\n                           fields awsRegion, requestParameters.userName, responseElements.user.arn`,\n      },\n    ],\n  },\n  {\n    category: 'Common Queries',\n    examples: [\n      {\n        title: '25 most recently added log events',\n        expr: stripIndents`fields @timestamp, @message |\n                           sort @timestamp desc |\n                           limit 25`,\n      },\n      {\n        title: 'Number of exceptions logged every 5 minutes',\n        expr: stripIndents`filter @message like /Exception/ |\n                           stats count(*) as exceptionCount by bin(5m) |\n                           sort exceptionCount desc`,\n      },\n      {\n        title: 'List of log events that are not exceptions',\n        expr: 'fields @message | filter @message not like /Exception/',\n      },\n    ],\n  },\n  {\n    category: 'Route 53',\n    examples: [\n      {\n        title: 'Number of requests received every 10  minutes by edge location',\n        expr: 'stats count(*) by queryType, bin(10m)',\n      },\n      {\n        title: 'Number of unsuccessful requests by domain',\n        expr: 'filter responseCode=\"SERVFAIL\" | stats count(*) by queryName',\n      },\n      {\n        title: 'Number of requests received every 10  minutes by edge location',\n        expr: 'stats count(*) as numRequests by resolverIp | sort numRequests desc | limit 10',\n      },\n    ],\n  },\n  {\n    category: 'AWS AppSync',\n    examples: [\n      {\n        title: 'Number of unique HTTP status codes',\n        expr: stripIndents`fields ispresent(graphQLAPIId) as isApi |\n                           filter isApi |\n                           filter logType = \"RequestSummary\" |\n                           stats count() as statusCount by statusCode |\n                           sort statusCount desc`,\n      },\n      {\n        title: 'Top 10 resolvers with maximum latency',\n        expr: stripIndents`fields resolverArn, duration |\n                           filter logType = \"Tracing\" |\n                           sort duration desc |\n                           limit 10`,\n      },\n      {\n        title: 'Most frequently invoked resolvers',\n        expr: stripIndents`fields ispresent(resolverArn) as isRes |\n                           stats count() as invocationCount by resolverArn |\n                           filter isRes |\n                           filter logType = \"Tracing\" |\n                           sort invocationCount desc |\n                           limit 10`,\n      },\n      {\n        title: 'Resolvers with most errors in mapping templates',\n        expr: stripIndents`fields ispresent(resolverArn) as isRes |\n                           stats count() as errorCount by resolverArn, logType |\n                           filter isRes and (logType = \"RequestMapping\" or logType = \"ResponseMapping\") and fieldInError |\n                           sort errorCount desc |\n                           limit 10`,\n      },\n      {\n        title: 'Field latency statistics',\n        expr: stripIndents`fields requestId, latency |\n                           filter logType = \"RequestSummary\" |\n                           sort latency desc |\n                           limit 10`,\n      },\n      {\n        title: 'Resolver latency statistics',\n        expr: stripIndents`fields ispresent(resolverArn) as isRes |\n                           filter isRes |\n                           filter logType = \"Tracing\" |\n                           stats min(duration), max(duration), avg(duration) as avgDur by resolverArn |\n                           sort avgDur desc |\n                           limit 10`,\n      },\n      {\n        title: 'Top 10 requests with maximum latency',\n        expr: stripIndents`fields requestId, latency |\n                           filter logType = \"RequestSummary\" |\n                           sort latency desc |\n                           limit 10`,\n      },\n    ],\n  },\n];\n\nfunction renderHighlightedMarkup(code: string, keyPrefix: string) {\n  const grammar = tokenizer;\n  const tokens = flattenTokens(Prism.tokenize(code, grammar));\n  const spans = tokens\n    .filter((token) => typeof token !== 'string')\n    .map((token, i) => {\n      return (\n        <span\n          className={`prism-token token ${token.types.join(' ')} ${token.aliases.join(' ')}`}\n          key={`${keyPrefix}-token-${i}`}\n        >\n          {token.content}\n        </span>\n      );\n    });\n\n  return <div className=\"slate-query-field\">{spans}</div>;\n}\n\nconst exampleCategory = css`\n  margin-top: 5px;\n`;\n\nexport default class LogsCheatSheet extends PureComponent<\n  QueryEditorHelpProps<CloudWatchQuery>,\n  { userExamples: string[] }\n> {\n  onClickExample(query: CloudWatchQuery) {\n    this.props.onClickExample(query);\n  }\n\n  renderExpression(expr: string, keyPrefix: string) {\n    return (\n      <div\n        className=\"cheat-sheet-item__example\"\n        key={expr}\n        onClick={() =>\n          this.onClickExample({\n            refId: this.props.query.refId ?? 'A',\n            expression: expr,\n            queryMode: 'Logs',\n            region: this.props.query.region,\n            id: this.props.query.refId ?? 'A',\n            logGroupNames: 'logGroupNames' in this.props.query ? this.props.query.logGroupNames : [],\n          })\n        }\n      >\n        <pre>{renderHighlightedMarkup(expr, keyPrefix)}</pre>\n      </div>\n    );\n  }\n\n  renderLogsCheatSheet() {\n    return (\n      <div>\n        <h2>CloudWatch Logs Cheat Sheet</h2>\n        {CLIQ_EXAMPLES.map((cat, i) => (\n          <div key={`${cat.category}-${i}`}>\n            <div className={`cheat-sheet-item__title ${cx(exampleCategory)}`}>{cat.category}</div>\n            {cat.examples.map((item, j) => (\n              <div className=\"cheat-sheet-item\" key={`item-${j}`}>\n                <h4>{item.title}</h4>\n                {this.renderExpression(item.expr, `item-${j}`)}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>CloudWatch Logs cheat sheet</h3>\n        {CLIQ_EXAMPLES.map((cat, i) => (\n          <div key={`cat-${i}`}>\n            <div className={`cheat-sheet-item__title ${cx(exampleCategory)}`}>{cat.category}</div>\n            {cat.examples.map((item, j) => (\n              <div className=\"cheat-sheet-item\" key={`item-${j}`}>\n                <h4>{item.title}</h4>\n                {this.renderExpression(item.expr, `item-${j}`)}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n","import { AnnotationQuery } from '@grafana/data';\n\nimport { CloudWatchAnnotationQuery, CloudWatchLogsQuery, CloudWatchMetricsQuery, CloudWatchQuery } from './types';\n\nexport const isCloudWatchLogsQuery = (cloudwatchQuery: CloudWatchQuery): cloudwatchQuery is CloudWatchLogsQuery =>\n  cloudwatchQuery.queryMode === 'Logs';\n\nexport const isCloudWatchMetricsQuery = (cloudwatchQuery: CloudWatchQuery): cloudwatchQuery is CloudWatchMetricsQuery =>\n  cloudwatchQuery.queryMode === 'Metrics' || !cloudwatchQuery.hasOwnProperty('queryMode'); // in early versions of this plugin, queryMode wasn't defined in a CloudWatchMetricsQuery\n\nexport const isCloudWatchAnnotationQuery = (\n  cloudwatchQuery: CloudWatchQuery\n): cloudwatchQuery is CloudWatchAnnotationQuery => cloudwatchQuery.queryMode === 'Annotations';\n\nexport const isCloudWatchAnnotation = (query: unknown): query is AnnotationQuery<CloudWatchAnnotationQuery> =>\n  (query as AnnotationQuery<CloudWatchAnnotationQuery>).target?.queryMode === 'Annotations';\n","import { css, cx } from '@emotion/css';\nimport React, { FunctionComponent, useMemo } from 'react';\nimport { useAsyncFn } from 'react-use';\n\nimport { GrafanaTheme2, SelectableValue, toOption } from '@grafana/data';\nimport { AccessoryButton, InputGroup } from '@grafana/experimental';\nimport { Select, stylesFactory, useTheme2 } from '@grafana/ui';\n\nimport { CloudWatchDatasource } from '../../datasource';\nimport { Dimensions, MetricStat } from '../../types';\nimport { appendTemplateVariables } from '../../utils/utils';\n\nimport { DimensionFilterCondition } from './Dimensions';\n\nexport interface Props {\n  metricStat: MetricStat;\n  datasource: CloudWatchDatasource;\n  filter: DimensionFilterCondition;\n  dimensionKeys: Array<SelectableValue<string>>;\n  disableExpressions: boolean;\n  onChange: (value: DimensionFilterCondition) => void;\n  onDelete: () => void;\n}\n\nconst wildcardOption = { value: '*', label: '*' };\n\nconst excludeCurrentKey = (dimensions: Dimensions, currentKey: string | undefined) =>\n  Object.entries(dimensions ?? {}).reduce<Dimensions>((acc, [key, value]) => {\n    if (key !== currentKey) {\n      return { ...acc, [key]: value };\n    }\n    return acc;\n  }, {});\n\nexport const FilterItem: FunctionComponent<Props> = ({\n  filter,\n  metricStat: { region, namespace, metricName, dimensions },\n  datasource,\n  dimensionKeys,\n  disableExpressions,\n  onChange,\n  onDelete,\n}) => {\n  const dimensionsExcludingCurrentKey = useMemo(\n    () => excludeCurrentKey(dimensions ?? {}, filter.key),\n    [dimensions, filter]\n  );\n\n  const loadDimensionValues = async () => {\n    if (!filter.key) {\n      return [];\n    }\n\n    return datasource\n      .getDimensionValues(region, namespace, metricName, filter.key, dimensionsExcludingCurrentKey)\n      .then((result: Array<SelectableValue<string>>) => {\n        if (result.length && !disableExpressions) {\n          result.unshift(wildcardOption);\n        }\n        return appendTemplateVariables(datasource, result);\n      });\n  };\n\n  const [state, loadOptions] = useAsyncFn(loadDimensionValues, [filter.key, dimensions]);\n  const theme = useTheme2();\n  const styles = getOperatorStyles(theme);\n\n  return (\n    <div data-testid=\"cloudwatch-dimensions-filter-item\">\n      <InputGroup>\n        <Select\n          aria-label=\"Dimensions filter key\"\n          inputId=\"cloudwatch-dimensions-filter-item-key\"\n          width=\"auto\"\n          value={filter.key ? toOption(filter.key) : null}\n          allowCustomValue\n          options={dimensionKeys}\n          onChange={(change) => {\n            if (change.label) {\n              onChange({ key: change.label, value: undefined });\n            }\n          }}\n        />\n\n        <span className={cx(styles.root)}>=</span>\n\n        <Select\n          aria-label=\"Dimensions filter value\"\n          inputId=\"cloudwatch-dimensions-filter-item-value\"\n          onOpenMenu={loadOptions}\n          width=\"auto\"\n          value={filter.value ? toOption(filter.value) : null}\n          allowCustomValue\n          isLoading={state.loading}\n          options={state.value}\n          onChange={(change) => {\n            if (change.value) {\n              onChange({ ...filter, value: change.value });\n            }\n          }}\n        />\n        <AccessoryButton aria-label=\"remove\" icon=\"times\" variant=\"secondary\" onClick={onDelete} type=\"button\" />\n      </InputGroup>\n    </div>\n  );\n};\n\nconst getOperatorStyles = stylesFactory((theme: GrafanaTheme2) => ({\n  root: css({\n    padding: theme.spacing(0, 1),\n    alignSelf: 'center',\n  }),\n}));\n","import { isEqual } from 'lodash';\nimport React, { useMemo, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorList } from '@grafana/experimental';\n\nimport { CloudWatchDatasource } from '../../datasource';\nimport { Dimensions as DimensionsType, MetricStat } from '../../types';\n\nimport { FilterItem } from './FilterItem';\n\nexport interface Props {\n  metricStat: MetricStat;\n  onChange: (dimensions: DimensionsType) => void;\n  datasource: CloudWatchDatasource;\n  dimensionKeys: Array<SelectableValue<string>>;\n  disableExpressions: boolean;\n}\n\nexport interface DimensionFilterCondition {\n  key?: string;\n  operator?: string;\n  value?: string;\n}\n\nconst dimensionsToFilterConditions = (dimensions: DimensionsType | undefined) =>\n  Object.entries(dimensions ?? {}).reduce<DimensionFilterCondition[]>((acc, [key, value]) => {\n    if (value && typeof value === 'string') {\n      const filter = {\n        key,\n        value,\n        operator: '=',\n      };\n      return [...acc, filter];\n    }\n    return acc;\n  }, []);\n\nconst filterConditionsToDimensions = (filters: DimensionFilterCondition[]) => {\n  return filters.reduce<DimensionsType>((acc, { key, value }) => {\n    if (key && value) {\n      return { ...acc, [key]: value };\n    }\n    return acc;\n  }, {});\n};\n\nexport const Dimensions: React.FC<Props> = ({\n  metricStat,\n  datasource,\n  dimensionKeys,\n  disableExpressions,\n  onChange,\n}) => {\n  const dimensionFilters = useMemo(() => dimensionsToFilterConditions(metricStat.dimensions), [metricStat.dimensions]);\n  const [items, setItems] = useState<DimensionFilterCondition[]>(dimensionFilters);\n  const onDimensionsChange = (newItems: Array<Partial<DimensionFilterCondition>>) => {\n    setItems(newItems);\n\n    // The onChange event should only be triggered in the case there is a complete dimension object.\n    // So when a new key is added that does not yet have a value, it should not trigger an onChange event.\n    const newDimensions = filterConditionsToDimensions(newItems);\n    if (!isEqual(newDimensions, metricStat.dimensions)) {\n      onChange(newDimensions);\n    }\n  };\n\n  return (\n    <EditorList\n      items={items}\n      onChange={onDimensionsChange}\n      renderItem={makeRenderFilter(datasource, metricStat, dimensionKeys, disableExpressions)}\n    />\n  );\n};\n\nfunction makeRenderFilter(\n  datasource: CloudWatchDatasource,\n  metricStat: MetricStat,\n  dimensionKeys: Array<SelectableValue<string>>,\n  disableExpressions: boolean\n) {\n  function renderFilter(\n    item: DimensionFilterCondition,\n    onChange: (item: DimensionFilterCondition) => void,\n    onDelete: () => void\n  ) {\n    return (\n      <FilterItem\n        filter={item}\n        onChange={(item) => onChange(item)}\n        datasource={datasource}\n        metricStat={metricStat}\n        disableExpressions={disableExpressions}\n        dimensionKeys={dimensionKeys}\n        onDelete={onDelete}\n      />\n    );\n  }\n\n  return renderFilter;\n}\n","import React, { InputHTMLAttributes, FunctionComponent } from 'react';\n\nimport { InlineFormLabel } from '@grafana/ui';\n\nexport interface Props extends InputHTMLAttributes<HTMLInputElement> {\n  label: string;\n  tooltip?: string;\n  children?: React.ReactNode;\n}\n\nexport const QueryField: FunctionComponent<Partial<Props>> = ({ label, tooltip, children }) => (\n  <>\n    <InlineFormLabel width={8} className=\"query-keyword\" tooltip={tooltip}>\n      {label}\n    </InlineFormLabel>\n    {children}\n  </>\n);\n\nexport const QueryInlineField: FunctionComponent<Props> = ({ ...props }) => {\n  return (\n    <div className={'gf-form-inline'}>\n      <QueryField {...props} />\n      <div className=\"gf-form gf-form--grow\">\n        <div className=\"gf-form-label gf-form-label--grow\" />\n      </div>\n    </div>\n  );\n};\n","const JSURL = require('jsurl');\n\nexport interface AwsUrl {\n  end: string;\n  start: string;\n  timeType?: 'ABSOLUTE' | 'RELATIVE';\n  tz?: 'local' | 'UTC';\n  unit?: string;\n  editorString: string;\n  isLiveTail: boolean;\n  source: string[];\n}\n\nexport function encodeUrl(obj: AwsUrl, region: string): string {\n  return `https://${region}.console.aws.amazon.com/cloudwatch/home?region=${region}#logs-insights:queryDetail=${JSURL.stringify(\n    obj\n  )}`;\n}\n","import React, { Component } from 'react';\n\nimport { PanelData } from '@grafana/data';\nimport { Icon } from '@grafana/ui';\n\nimport { encodeUrl, AwsUrl } from '../aws_url';\nimport { CloudWatchDatasource } from '../datasource';\nimport { CloudWatchLogsQuery } from '../types';\n\ninterface Props {\n  query: CloudWatchLogsQuery;\n  panelData?: PanelData;\n  datasource: CloudWatchDatasource;\n}\n\ninterface State {\n  href: string;\n}\n\nexport default class CloudWatchLink extends Component<Props, State> {\n  state: State = { href: '' };\n\n  async componentDidUpdate(prevProps: Props) {\n    const { panelData: panelDataNew } = this.props;\n    const { panelData: panelDataOld } = prevProps;\n\n    if (panelDataOld !== panelDataNew && panelDataNew?.request) {\n      const href = this.getExternalLink();\n      this.setState({ href });\n    }\n  }\n\n  getExternalLink(): string {\n    const { query, panelData, datasource } = this.props;\n\n    const range = panelData?.request?.range;\n\n    if (!range) {\n      return '';\n    }\n\n    const start = range.from.toISOString();\n    const end = range.to.toISOString();\n\n    const urlProps: AwsUrl = {\n      end,\n      start,\n      timeType: 'ABSOLUTE',\n      tz: 'UTC',\n      editorString: query.expression ?? '',\n      isLiveTail: false,\n      source: query.logGroupNames ?? [],\n    };\n\n    return encodeUrl(urlProps, datasource.getActualRegion(query.region));\n  }\n\n  render() {\n    const { href } = this.state;\n    return (\n      <a href={href} target=\"_blank\" rel=\"noopener noreferrer\">\n        <Icon name=\"share-alt\" /> CloudWatch Logs Insights\n      </a>\n    );\n  }\n}\n","const byRE = /\\s+by\\s+/im;\n\n/**\n * groups look like this: (@a.foo)( as )(bar),\n * group 1 is the field, group 2 is \" as \" and group 3 is the alias\n * this regex will not advance past any non-identifier or whitespace characters, e.g. |\n */\nconst groupsRE = /([\\w$@().]+)(?:(\\s+as\\s+)([\\w$]+))?\\s*,?\\s*/iy;\n\nexport function getStatsGroups(query: string): string[] {\n  let groups = [];\n\n  // find \" by \"\n  let b;\n  if ((b = query.match(byRE))) {\n    // continue incremental scanning from there for groups & aliases\n    groupsRE.lastIndex = b.index! + b[0].length;\n\n    let g;\n    while ((g = groupsRE.exec(query))) {\n      groups.push(g[2] ? g[3] : g[1]);\n      groupsRE.lastIndex = g.index + g[0].length;\n    }\n  }\n\n  return groups;\n}\n","import { useEffect, useRef } from 'react';\nvar isPrimitive = function (val) { return val !== Object(val); };\nvar useCustomCompareEffect = function (effect, deps, depsEqual) {\n    if (process.env.NODE_ENV !== 'production') {\n        if (!(deps instanceof Array) || !deps.length) {\n            console.warn('`useCustomCompareEffect` should not be used with no dependencies. Use React.useEffect instead.');\n        }\n        if (deps.every(isPrimitive)) {\n            console.warn('`useCustomCompareEffect` should not be used with dependencies that are all primitive values. Use React.useEffect instead.');\n        }\n        if (typeof depsEqual !== 'function') {\n            console.warn('`useCustomCompareEffect` should be used with depsEqual callback for comparing deps list');\n        }\n    }\n    var ref = useRef(undefined);\n    if (!ref.current || !depsEqual(deps, ref.current)) {\n        ref.current = deps;\n    }\n    useEffect(effect, ref.current);\n};\nexport default useCustomCompareEffect;\n","import isDeepEqualReact from 'fast-deep-equal/react';\nexport default isDeepEqualReact;\n","import useCustomCompareEffect from './useCustomCompareEffect';\nimport isDeepEqual from './misc/isDeepEqual';\nvar isPrimitive = function (val) { return val !== Object(val); };\nvar useDeepCompareEffect = function (effect, deps) {\n    if (process.env.NODE_ENV !== 'production') {\n        if (!(deps instanceof Array) || !deps.length) {\n            console.warn('`useDeepCompareEffect` should not be used with no dependencies. Use React.useEffect instead.');\n        }\n        if (deps.every(isPrimitive)) {\n            console.warn('`useDeepCompareEffect` should not be used with dependencies that are all primitive values. Use React.useEffect instead.');\n        }\n    }\n    useCustomCompareEffect(effect, deps, isDeepEqual);\n};\nexport default useDeepCompareEffect;\n","import { useEffect, useState } from 'react';\nimport { useDeepCompareEffect } from 'react-use';\n\nimport { SelectableValue, toOption } from '@grafana/data';\n\nimport { CloudWatchDatasource } from './datasource';\nimport { Dimensions } from './types';\nimport { appendTemplateVariables } from './utils/utils';\n\nexport const useRegions = (datasource: CloudWatchDatasource): [Array<SelectableValue<string>>, boolean] => {\n  const [regionsIsLoading, setRegionsIsLoading] = useState<boolean>(false);\n  const [regions, setRegions] = useState<Array<SelectableValue<string>>>([{ label: 'default', value: 'default' }]);\n\n  useEffect(() => {\n    setRegionsIsLoading(true);\n\n    const variableOptionGroup = {\n      label: 'Template Variables',\n      options: datasource.getVariables().map(toOption),\n    };\n\n    datasource\n      .getRegions()\n      .then((regions: Array<SelectableValue<string>>) => setRegions([...regions, variableOptionGroup]))\n      .finally(() => setRegionsIsLoading(false));\n  }, [datasource]);\n\n  return [regions, regionsIsLoading];\n};\n\nexport const useNamespaces = (datasource: CloudWatchDatasource) => {\n  const [namespaces, setNamespaces] = useState<Array<SelectableValue<string>>>([]);\n  useEffect(() => {\n    datasource.getNamespaces().then((namespaces) => {\n      setNamespaces(appendTemplateVariables(datasource, namespaces));\n    });\n  }, [datasource]);\n\n  return namespaces;\n};\n\nexport const useMetrics = (datasource: CloudWatchDatasource, region: string, namespace: string | undefined) => {\n  const [metrics, setMetrics] = useState<Array<SelectableValue<string>>>([]);\n  useEffect(() => {\n    datasource.getMetrics(namespace, region).then((result: Array<SelectableValue<string>>) => {\n      setMetrics(appendTemplateVariables(datasource, result));\n    });\n  }, [datasource, region, namespace]);\n\n  return metrics;\n};\n\nexport const useDimensionKeys = (\n  datasource: CloudWatchDatasource,\n  region: string,\n  namespace: string | undefined,\n  metricName: string | undefined,\n  dimensionFilter?: Dimensions\n) => {\n  const [dimensionKeys, setDimensionKeys] = useState<Array<SelectableValue<string>>>([]);\n\n  // doing deep comparison to avoid making new api calls to list metrics unless dimension filter object props changes\n  useDeepCompareEffect(() => {\n    datasource\n      .getDimensionKeys(namespace, region, dimensionFilter, metricName)\n      .then((result: Array<SelectableValue<string>>) => {\n        setDimensionKeys(appendTemplateVariables(datasource, result));\n      });\n  }, [datasource, region, namespace, metricName, dimensionFilter]);\n\n  return dimensionKeys;\n};\n","import React, { useCallback, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { InlineSelect, FlexItem } from '@grafana/experimental';\nimport { Button, ConfirmModal, RadioButtonGroup } from '@grafana/ui';\n\nimport { CloudWatchDatasource } from '../../datasource';\nimport { CloudWatchMetricsQuery, CloudWatchQuery, MetricEditorMode, MetricQueryType } from '../../types';\n\ninterface MetricsQueryHeaderProps {\n  query: CloudWatchMetricsQuery;\n  datasource: CloudWatchDatasource;\n  onChange: (query: CloudWatchQuery) => void;\n  onRunQuery: () => void;\n  sqlCodeEditorIsDirty: boolean;\n}\n\nconst metricEditorModes: Array<SelectableValue<MetricQueryType>> = [\n  { label: 'Metric Search', value: MetricQueryType.Search },\n  { label: 'Metric Query', value: MetricQueryType.Query },\n];\n\nconst editorModes = [\n  { label: 'Builder', value: MetricEditorMode.Builder },\n  { label: 'Code', value: MetricEditorMode.Code },\n];\n\nconst MetricsQueryHeader: React.FC<MetricsQueryHeaderProps> = ({\n  query,\n  sqlCodeEditorIsDirty,\n  onChange,\n  onRunQuery,\n}) => {\n  const { metricEditorMode, metricQueryType } = query;\n  const [showConfirm, setShowConfirm] = useState(false);\n\n  const onEditorModeChange = useCallback(\n    (newMetricEditorMode: MetricEditorMode) => {\n      if (\n        sqlCodeEditorIsDirty &&\n        metricQueryType === MetricQueryType.Query &&\n        metricEditorMode === MetricEditorMode.Code\n      ) {\n        setShowConfirm(true);\n        return;\n      }\n      onChange({ ...query, metricEditorMode: newMetricEditorMode });\n    },\n    [setShowConfirm, onChange, sqlCodeEditorIsDirty, query, metricEditorMode, metricQueryType]\n  );\n\n  return (\n    <>\n      <InlineSelect\n        aria-label=\"Metric editor mode\"\n        value={metricEditorModes.find((m) => m.value === metricQueryType)}\n        options={metricEditorModes}\n        onChange={({ value }) => {\n          onChange({ ...query, metricQueryType: value });\n        }}\n      />\n      <FlexItem grow={1} />\n\n      <RadioButtonGroup options={editorModes} size=\"sm\" value={metricEditorMode} onChange={onEditorModeChange} />\n\n      {query.metricQueryType === MetricQueryType.Query && query.metricEditorMode === MetricEditorMode.Code && (\n        <Button variant=\"secondary\" size=\"sm\" onClick={() => onRunQuery()}>\n          Run query\n        </Button>\n      )}\n\n      <ConfirmModal\n        isOpen={showConfirm}\n        title=\"Are you sure?\"\n        body=\"You will lose manual changes done to the query if you go back to the visual builder.\"\n        confirmText=\"Yes, I am sure.\"\n        dismissText=\"No, continue editing the query manually.\"\n        icon=\"exclamation-triangle\"\n        onConfirm={() => {\n          setShowConfirm(false);\n          onChange({ ...query, metricEditorMode: MetricEditorMode.Builder });\n        }}\n        onDismiss={() => setShowConfirm(false)}\n      />\n    </>\n  );\n};\n\nexport default MetricsQueryHeader;\n","import { pick } from 'lodash';\nimport React from 'react';\n\nimport { SelectableValue, ExploreMode } from '@grafana/data';\nimport { EditorHeader, InlineSelect } from '@grafana/experimental';\n\nimport { CloudWatchDatasource } from '../datasource';\nimport { useRegions } from '../hooks';\nimport { CloudWatchQuery, CloudWatchQueryMode } from '../types';\n\nimport MetricsQueryHeader from './MetricsQueryEditor/MetricsQueryHeader';\n\ninterface QueryHeaderProps {\n  query: CloudWatchQuery;\n  datasource: CloudWatchDatasource;\n  onChange: (query: CloudWatchQuery) => void;\n  onRunQuery: () => void;\n  sqlCodeEditorIsDirty: boolean;\n  onRegionChange?: (region: string) => Promise<void>;\n}\n\nconst apiModes: Array<SelectableValue<CloudWatchQueryMode>> = [\n  { label: 'CloudWatch Metrics', value: 'Metrics' },\n  { label: 'CloudWatch Logs', value: 'Logs' },\n];\n\nconst QueryHeader: React.FC<QueryHeaderProps> = ({ query, sqlCodeEditorIsDirty, datasource, onChange, onRunQuery }) => {\n  const { queryMode, region } = query;\n\n  const [regions, regionIsLoading] = useRegions(datasource);\n\n  const onQueryModeChange = ({ value }: SelectableValue<CloudWatchQueryMode>) => {\n    if (value !== queryMode) {\n      const commonProps = pick(query, 'id', 'region', 'namespace', 'refId', 'hide', 'key', 'queryType', 'datasource');\n      onChange({\n        ...commonProps,\n        queryMode: value,\n      } as CloudWatchQuery);\n    }\n  };\n\n  const onRegion = async ({ value }: SelectableValue<string>) => {\n    onChange({\n      ...query,\n      region: value,\n    } as CloudWatchQuery);\n  };\n\n  return (\n    <EditorHeader>\n      <InlineSelect\n        label=\"Region\"\n        value={region}\n        placeholder=\"Select region\"\n        allowCustomValue\n        onChange={({ value: region }) => region && onRegion({ value: region })}\n        options={regions}\n        isLoading={regionIsLoading}\n      />\n\n      <InlineSelect aria-label=\"Query mode\" value={queryMode} options={apiModes} onChange={onQueryModeChange} />\n\n      {queryMode === ExploreMode.Metrics && (\n        <MetricsQueryHeader\n          query={query}\n          datasource={datasource}\n          onChange={onChange}\n          onRunQuery={onRunQuery}\n          sqlCodeEditorIsDirty={sqlCodeEditorIsDirty}\n        />\n      )}\n    </EditorHeader>\n  );\n};\n\nexport default QueryHeader;\n","import { css } from '@emotion/css';\nimport { LanguageMap, languages as prismLanguages } from 'prismjs';\nimport React, { ReactNode } from 'react';\nimport { Node, Plugin } from 'slate';\nimport { Editor } from 'slate-react';\n\nimport { AbsoluteTimeRange, QueryEditorProps } from '@grafana/data';\nimport { BracesPlugin, LegacyForms, QueryField, SlatePrism, TypeaheadInput, TypeaheadOutput } from '@grafana/ui';\nimport { ExploreId } from 'app/types';\n// Utils & Services\n// dom also includes Element polyfills\n\nimport { CloudWatchDatasource } from '../datasource';\nimport { CloudWatchLanguageProvider } from '../language_provider';\nimport syntax from '../syntax';\nimport { CloudWatchJsonData, CloudWatchLogsQuery, CloudWatchQuery } from '../types';\nimport { getStatsGroups } from '../utils/query/getStatsGroups';\n\nimport { LogGroupSelector } from './LogGroupSelector';\nimport QueryHeader from './QueryHeader';\n\nexport interface CloudWatchLogsQueryFieldProps\n  extends QueryEditorProps<CloudWatchDatasource, CloudWatchQuery, CloudWatchJsonData> {\n  absoluteRange: AbsoluteTimeRange;\n  onLabelsRefresh?: () => void;\n  ExtraFieldElement?: ReactNode;\n  exploreId: ExploreId;\n  query: CloudWatchLogsQuery;\n}\n\nconst rowGap = css`\n  gap: 3px;\n`;\n\ninterface State {\n  hint:\n    | {\n        message: string;\n        fix: {\n          label: string;\n          action: () => void;\n        };\n      }\n    | undefined;\n}\n\nexport class CloudWatchLogsQueryField extends React.PureComponent<CloudWatchLogsQueryFieldProps, State> {\n  state: State = {\n    hint: undefined,\n  };\n\n  plugins: Array<Plugin<Editor>>;\n\n  constructor(props: CloudWatchLogsQueryFieldProps, context: React.Context<any>) {\n    super(props, context);\n\n    this.plugins = [\n      BracesPlugin(),\n      SlatePrism(\n        {\n          onlyIn: (node: Node) => node.object === 'block' && node.type === 'code_block',\n          getSyntax: (node: Node) => 'cloudwatch',\n        },\n        { ...(prismLanguages as LanguageMap), cloudwatch: syntax }\n      ),\n    ];\n  }\n\n  componentDidMount = () => {\n    const { query, datasource, onChange } = this.props;\n\n    if (onChange) {\n      onChange({ ...query, logGroupNames: query.logGroupNames ?? datasource.defaultLogGroups });\n    }\n  };\n\n  onChangeQuery = (value: string) => {\n    // Send text change to parent\n    const { query, onChange } = this.props;\n\n    if (onChange) {\n      const nextQuery = {\n        ...query,\n        expression: value,\n        statsGroups: getStatsGroups(value),\n      };\n      onChange(nextQuery);\n    }\n  };\n\n  onTypeahead = async (typeahead: TypeaheadInput): Promise<TypeaheadOutput> => {\n    const { datasource, query } = this.props;\n    const { logGroupNames } = query;\n\n    if (!datasource.languageProvider) {\n      return { suggestions: [] };\n    }\n\n    const cloudwatchLanguageProvider = datasource.languageProvider as CloudWatchLanguageProvider;\n    const { history, absoluteRange } = this.props;\n    const { prefix, text, value, wrapperClasses, labelKey, editor } = typeahead;\n\n    return await cloudwatchLanguageProvider.provideCompletionItems(\n      { text, value, prefix, wrapperClasses, labelKey, editor },\n      {\n        history,\n        absoluteRange,\n        logGroupNames,\n        region: query.region,\n      }\n    );\n  };\n\n  render() {\n    const { onRunQuery, onChange, ExtraFieldElement, data, query, datasource } = this.props;\n    const { region, refId, expression, logGroupNames } = query;\n    const { hint } = this.state;\n\n    const showError = data && data.error && data.error.refId === query.refId;\n    const cleanText = datasource.languageProvider ? datasource.languageProvider.cleanText : undefined;\n\n    return (\n      <>\n        <QueryHeader\n          query={query}\n          onRunQuery={onRunQuery}\n          datasource={datasource}\n          onChange={onChange}\n          sqlCodeEditorIsDirty={false}\n        />\n        <div className={`gf-form gf-form--grow flex-grow-1 ${rowGap}`}>\n          <LegacyForms.FormField\n            label=\"Log Groups\"\n            labelWidth={6}\n            className=\"flex-grow-1\"\n            inputEl={\n              <LogGroupSelector\n                region={region}\n                selectedLogGroups={logGroupNames ?? datasource.defaultLogGroups}\n                datasource={datasource}\n                onChange={function (logGroups: string[]): void {\n                  onChange({ ...query, logGroupNames: logGroups });\n                }}\n                onRunQuery={onRunQuery}\n                refId={refId}\n              />\n            }\n          />\n        </div>\n        <div className=\"gf-form-inline gf-form-inline--nowrap flex-grow-1\">\n          <div className=\"gf-form gf-form--grow flex-shrink-1\">\n            <QueryField\n              additionalPlugins={this.plugins}\n              query={expression ?? ''}\n              onChange={this.onChangeQuery}\n              onRunQuery={this.props.onRunQuery}\n              onTypeahead={this.onTypeahead}\n              cleanText={cleanText}\n              placeholder=\"Enter a CloudWatch Logs Insights query (run with Shift+Enter)\"\n              portalOrigin=\"cloudwatch\"\n              disabled={!logGroupNames || logGroupNames.length === 0}\n            />\n          </div>\n          {ExtraFieldElement}\n        </div>\n        {hint && (\n          <div className=\"query-row-break\">\n            <div className=\"text-warning\">\n              {hint.message}\n              <a className=\"text-link muted\" onClick={hint.fix.action}>\n                {hint.fix.label}\n              </a>\n            </div>\n          </div>\n        )}\n        {showError ? (\n          <div className=\"query-row-break\">\n            <div className=\"prom-query-field-info text-error\">{data?.error?.message}</div>\n          </div>\n        ) : null}\n      </>\n    );\n  }\n}\n","// Libraries\nimport { css } from '@emotion/css';\nimport React, { memo } from 'react';\n\n// Types\nimport { AbsoluteTimeRange, QueryEditorProps } from '@grafana/data';\nimport { InlineFormLabel } from '@grafana/ui';\n\nimport { CloudWatchDatasource } from '../datasource';\nimport { CloudWatchJsonData, CloudWatchLogsQuery, CloudWatchQuery } from '../types';\n\nimport CloudWatchLink from './CloudWatchLink';\nimport { CloudWatchLogsQueryField } from './LogsQueryField';\n\ntype Props = QueryEditorProps<CloudWatchDatasource, CloudWatchQuery, CloudWatchJsonData> & {\n  query: CloudWatchLogsQuery;\n};\n\nconst labelClass = css`\n  margin-left: 3px;\n  flex-grow: 0;\n`;\n\nexport const CloudWatchLogsQueryEditor = memo(function CloudWatchLogsQueryEditor(props: Props) {\n  const { query, data, datasource, onRunQuery, onChange, exploreId } = props;\n\n  let absolute: AbsoluteTimeRange;\n  if (data?.request?.range?.from) {\n    const { range } = data.request;\n    absolute = {\n      from: range.from.valueOf(),\n      to: range.to.valueOf(),\n    };\n  } else {\n    absolute = {\n      from: Date.now() - 10000,\n      to: Date.now(),\n    };\n  }\n\n  return (\n    <CloudWatchLogsQueryField\n      exploreId={exploreId}\n      datasource={datasource}\n      query={query}\n      onChange={onChange}\n      onRunQuery={onRunQuery}\n      history={[]}\n      data={data}\n      absoluteRange={absolute}\n      ExtraFieldElement={\n        <InlineFormLabel className={`gf-form-label--btn ${labelClass}`} width=\"auto\" tooltip=\"Link to Graph in AWS\">\n          <CloudWatchLink query={query as CloudWatchLogsQuery} panelData={data} datasource={datasource} />\n        </InlineFormLabel>\n      }\n    />\n  );\n});\n\nexport default CloudWatchLogsQueryEditor;\n","import React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField, EditorFieldGroup, EditorRow, EditorRows, EditorSwitch } from '@grafana/experimental';\nimport { Select } from '@grafana/ui';\n\nimport { Dimensions } from '..';\nimport { CloudWatchDatasource } from '../../datasource';\nimport { useDimensionKeys, useMetrics, useNamespaces } from '../../hooks';\nimport { MetricStat } from '../../types';\nimport { appendTemplateVariables, toOption } from '../../utils/utils';\n\nexport type Props = {\n  refId: string;\n  metricStat: MetricStat;\n  datasource: CloudWatchDatasource;\n  disableExpressions?: boolean;\n  onChange: (value: MetricStat) => void;\n  onRunQuery: () => void;\n};\n\nexport function MetricStatEditor({\n  refId,\n  metricStat,\n  datasource,\n  disableExpressions = false,\n  onChange,\n  onRunQuery,\n}: React.PropsWithChildren<Props>) {\n  const { region, namespace, metricName, dimensions } = metricStat;\n  const namespaces = useNamespaces(datasource);\n  const metrics = useMetrics(datasource, region, namespace);\n  const dimensionKeys = useDimensionKeys(datasource, region, namespace, metricName, dimensions ?? {});\n\n  const onMetricStatChange = (metricStat: MetricStat) => {\n    onChange(metricStat);\n    onRunQuery();\n  };\n\n  const onNamespaceChange = async (metricStat: MetricStat) => {\n    const validatedQuery = await validateMetricName(metricStat);\n    onMetricStatChange(validatedQuery);\n  };\n\n  const validateMetricName = async (metricStat: MetricStat) => {\n    let { metricName, namespace, region } = metricStat;\n    if (!metricName) {\n      return metricStat;\n    }\n    await datasource.getMetrics(namespace, region).then((result: Array<SelectableValue<string>>) => {\n      if (!result.find((metric) => metric.value === metricName)) {\n        metricName = '';\n      }\n    });\n    return { ...metricStat, metricName };\n  };\n\n  return (\n    <EditorRows>\n      <EditorRow>\n        <EditorFieldGroup>\n          <EditorField label=\"Namespace\" width={26}>\n            <Select\n              aria-label=\"Namespace\"\n              value={metricStat?.namespace && toOption(metricStat.namespace)}\n              allowCustomValue\n              options={namespaces}\n              onChange={({ value: namespace }) => {\n                if (namespace) {\n                  onNamespaceChange({ ...metricStat, namespace });\n                }\n              }}\n            />\n          </EditorField>\n          <EditorField label=\"Metric name\" width={16}>\n            <Select\n              aria-label=\"Metric name\"\n              value={metricStat?.metricName && toOption(metricStat.metricName)}\n              allowCustomValue\n              options={metrics}\n              onChange={({ value: metricName }) => {\n                if (metricName) {\n                  onMetricStatChange({ ...metricStat, metricName });\n                }\n              }}\n            />\n          </EditorField>\n\n          <EditorField label=\"Statistic\" width={16}>\n            <Select\n              inputId={`${refId}-metric-stat-editor-select-statistic`}\n              allowCustomValue\n              value={toOption(metricStat.statistic ?? datasource.standardStatistics[0])}\n              options={appendTemplateVariables(\n                datasource,\n                datasource.standardStatistics.filter((s) => s !== metricStat.statistic).map(toOption)\n              )}\n              onChange={({ value: statistic }) => {\n                if (\n                  !statistic ||\n                  (!datasource.standardStatistics.includes(statistic) &&\n                    !/^p\\d{2}(?:\\.\\d{1,2})?$/.test(statistic) &&\n                    !statistic.startsWith('$'))\n                ) {\n                  return;\n                }\n\n                onMetricStatChange({ ...metricStat, statistic });\n              }}\n            />\n          </EditorField>\n        </EditorFieldGroup>\n      </EditorRow>\n\n      <EditorRow>\n        <EditorField label=\"Dimensions\">\n          <Dimensions\n            metricStat={metricStat}\n            onChange={(dimensions) => onMetricStatChange({ ...metricStat, dimensions })}\n            dimensionKeys={dimensionKeys}\n            disableExpressions={disableExpressions}\n            datasource={datasource}\n          />\n        </EditorField>\n      </EditorRow>\n      {!disableExpressions && (\n        <EditorRow>\n          <EditorField\n            label=\"Match exact\"\n            optional={true}\n            tooltip=\"Only show metrics that exactly match all defined dimension names.\"\n          >\n            <EditorSwitch\n              id={`${refId}-cloudwatch-match-exact`}\n              value={!!metricStat.matchExact}\n              onChange={(e) => {\n                onMetricStatChange({\n                  ...metricStat,\n                  matchExact: e.currentTarget.checked,\n                });\n              }}\n            />\n          </EditorField>\n        </EditorRow>\n      )}\n    </EditorRows>\n  );\n}\n","export enum QueryEditorPropertyType {\n  String = 'string',\n}\n\nexport interface QueryEditorProperty {\n  type: QueryEditorPropertyType;\n  name?: string;\n}\n\nexport type QueryEditorOperatorType = string | boolean | number;\ntype QueryEditorOperatorValueType = QueryEditorOperatorType | QueryEditorOperatorType[];\n\nexport interface QueryEditorOperator<T extends QueryEditorOperatorValueType> {\n  name?: string;\n  value?: T;\n}\n\nexport interface QueryEditorOperatorExpression {\n  type: QueryEditorExpressionType.Operator;\n  property: QueryEditorProperty;\n  operator: QueryEditorOperator<QueryEditorOperatorValueType>;\n}\n\nexport interface QueryEditorArrayExpression {\n  type: QueryEditorExpressionType.And | QueryEditorExpressionType.Or;\n  expressions: QueryEditorExpression[] | QueryEditorArrayExpression[];\n}\n\nexport interface QueryEditorPropertyExpression {\n  type: QueryEditorExpressionType.Property;\n  property: QueryEditorProperty;\n}\n\nexport enum QueryEditorExpressionType {\n  Property = 'property',\n  Operator = 'operator',\n  Or = 'or',\n  And = 'and',\n  GroupBy = 'groupBy',\n  Function = 'function',\n  FunctionParameter = 'functionParameter',\n}\n\nexport type QueryEditorExpression =\n  | QueryEditorArrayExpression\n  | QueryEditorPropertyExpression\n  | QueryEditorGroupByExpression\n  | QueryEditorFunctionExpression\n  | QueryEditorFunctionParameterExpression\n  | QueryEditorOperatorExpression;\n\nexport interface QueryEditorGroupByExpression {\n  type: QueryEditorExpressionType.GroupBy;\n  property: QueryEditorProperty;\n}\n\nexport interface QueryEditorFunctionExpression {\n  type: QueryEditorExpressionType.Function;\n  name?: string;\n  parameters?: QueryEditorFunctionParameterExpression[];\n}\n\nexport interface QueryEditorFunctionParameterExpression {\n  type: QueryEditorExpressionType.FunctionParameter;\n  name?: string;\n}\n","import { getTemplateSrv, TemplateSrv } from 'app/features/templating/template_srv';\n\nimport {\n  QueryEditorArrayExpression,\n  QueryEditorExpression,\n  QueryEditorExpressionType,\n  QueryEditorFunctionExpression,\n  QueryEditorOperatorExpression,\n  QueryEditorPropertyExpression,\n} from '../expressions';\nimport { SQLExpression } from '../types';\n\nexport default class SQLGenerator {\n  constructor(private templateSrv: TemplateSrv = getTemplateSrv()) {}\n\n  expressionToSqlQuery({\n    select,\n    from,\n    where,\n    groupBy,\n    orderBy,\n    orderByDirection,\n    limit,\n  }: SQLExpression): string | undefined {\n    if (!from || !select?.name || !select?.parameters?.length) {\n      return undefined;\n    }\n\n    let parts: string[] = [];\n    this.appendSelect(select, parts);\n    this.appendFrom(from, parts);\n    this.appendWhere(where, parts, true, where?.expressions?.length ?? 0);\n    this.appendGroupBy(groupBy, parts);\n    this.appendOrderBy(orderBy, orderByDirection, parts);\n    this.appendLimit(limit, parts);\n\n    return parts.join(' ');\n  }\n\n  private appendSelect(select: QueryEditorFunctionExpression | undefined, parts: string[]) {\n    parts.push('SELECT');\n    this.appendFunction(select, parts);\n  }\n\n  private appendFrom(from: QueryEditorPropertyExpression | QueryEditorFunctionExpression | undefined, parts: string[]) {\n    parts.push('FROM');\n    from?.type === QueryEditorExpressionType.Function\n      ? this.appendFunction(from, parts)\n      : parts.push(this.formatValue(from?.property?.name ?? ''));\n  }\n\n  private appendWhere(\n    filter: QueryEditorExpression | undefined,\n    parts: string[],\n    isTopLevelExpression: boolean,\n    topLevelExpressionsCount: number\n  ) {\n    if (!filter) {\n      return;\n    }\n\n    const hasChildExpressions = 'expressions' in filter && filter.expressions.length > 0;\n    if (isTopLevelExpression && hasChildExpressions) {\n      parts.push('WHERE');\n    }\n\n    if (filter.type === QueryEditorExpressionType.And) {\n      const andParts: string[] = [];\n      filter.expressions.map((exp) => this.appendWhere(exp, andParts, false, topLevelExpressionsCount));\n      if (andParts.length === 0) {\n        return;\n      }\n      const andCombined = andParts.join(' AND ');\n      const wrapInParentheses = !isTopLevelExpression && topLevelExpressionsCount > 1 && andParts.length > 1;\n      return parts.push(wrapInParentheses ? `(${andCombined})` : andCombined);\n    }\n\n    if (filter.type === QueryEditorExpressionType.Or) {\n      const orParts: string[] = [];\n      filter.expressions.map((exp) => this.appendWhere(exp, orParts, false, topLevelExpressionsCount));\n      if (orParts.length === 0) {\n        return;\n      }\n      const orCombined = orParts.join(' OR ');\n      const wrapInParentheses = !isTopLevelExpression && topLevelExpressionsCount > 1 && orParts.length > 1;\n      parts.push(wrapInParentheses ? `(${orCombined})` : orCombined);\n      return;\n    }\n\n    if (filter.type === QueryEditorExpressionType.Operator) {\n      return this.appendOperator(filter, parts);\n    }\n  }\n\n  private appendGroupBy(groupBy: QueryEditorArrayExpression | undefined, parts: string[]) {\n    const groupByParts: string[] = [];\n    for (const expression of groupBy?.expressions ?? []) {\n      if (expression?.type !== QueryEditorExpressionType.GroupBy || !expression.property.name) {\n        continue;\n      }\n      groupByParts.push(this.formatValue(expression.property.name));\n    }\n\n    if (groupByParts.length > 0) {\n      parts.push(`GROUP BY ${groupByParts.join(', ')}`);\n    }\n  }\n\n  private appendOrderBy(\n    orderBy: QueryEditorFunctionExpression | undefined,\n    orderByDirection: string | undefined,\n    parts: string[]\n  ) {\n    if (orderBy) {\n      parts.push('ORDER BY');\n      this.appendFunction(orderBy, parts);\n      parts.push(orderByDirection ?? 'ASC');\n    }\n  }\n\n  private appendLimit(limit: number | undefined, parts: string[]) {\n    limit && parts.push(`LIMIT ${limit}`);\n  }\n\n  private appendOperator(expression: QueryEditorOperatorExpression, parts: string[], prefix?: string) {\n    const { property, operator } = expression;\n\n    if (!property.name || !operator.name || !operator.value) {\n      return;\n    }\n\n    parts.push(`${this.formatValue(property.name)} ${operator.name} '${operator.value}'`);\n  }\n\n  private appendFunction(select: QueryEditorFunctionExpression | undefined, parts: string[]) {\n    if (!select?.name) {\n      return;\n    }\n\n    const params = (select.parameters ?? [])\n      .map((p) => p.name && this.formatValue(p.name))\n      .filter(Boolean)\n      .join(', ');\n\n    parts.push(`${select.name}(${params})`);\n  }\n\n  private formatValue(label: string): string {\n    const specialCharacters = /[/\\s\\.-]/; // slash, space, dot or dash\n\n    const interpolated = this.templateSrv.replace(label, {}, 'raw');\n    if (specialCharacters.test(interpolated)) {\n      return `\"${label}\"`;\n    }\n\n    return label;\n  }\n}\n","import { SCHEMA } from '../../cloudwatch-sql/language';\nimport {\n  QueryEditorExpressionType,\n  QueryEditorPropertyType,\n  QueryEditorFunctionParameterExpression,\n  QueryEditorArrayExpression,\n  QueryEditorOperatorExpression,\n  QueryEditorGroupByExpression,\n} from '../../expressions';\nimport { SQLExpression, CloudWatchMetricsQuery, Dimensions } from '../../types';\n\nimport { SelectableValue } from './../../../../../../../packages/grafana-data/src/types/select';\n\nexport function getMetricNameFromExpression(selectExpression: SQLExpression['select']): string | undefined {\n  return selectExpression?.parameters?.[0].name;\n}\n\nexport function getNamespaceFromExpression(fromExpression: SQLExpression['from']): string | undefined {\n  // It's just a simple `FROM \"AWS/EC2\"` expression\n  if (fromExpression?.type === QueryEditorExpressionType.Property) {\n    return fromExpression.property.name; // PR TODO: do we need to test the type here? It can only be string?\n  }\n\n  // It's a more complicated `FROM SCHEMA(\"AWS/EC2\", ...)` expression\n  if (fromExpression?.type === QueryEditorExpressionType.Function) {\n    // TODO: do we need to test the name of the function?\n    return fromExpression.parameters?.[0].name;\n  }\n\n  return undefined;\n}\n\nexport function getSchemaLabelKeys(fromExpression: SQLExpression['from']): string[] | undefined {\n  // Schema label keys are second to n arguments in the from expression function\n  if (fromExpression?.type === QueryEditorExpressionType.Function && fromExpression?.parameters?.length) {\n    if (fromExpression?.parameters?.length <= 1) {\n      return [];\n    }\n\n    // ignore the first arg (the namespace)\n    const paramExpressions = fromExpression?.parameters.slice(1);\n    return paramExpressions.reduce<string[]>((acc, curr) => (curr.name ? [...acc, curr.name] : acc), []);\n  }\n\n  return undefined;\n}\n\nexport function isUsingWithSchema(fromExpression: SQLExpression['from']): boolean {\n  return fromExpression?.type === QueryEditorExpressionType.Function && fromExpression.name === SCHEMA;\n}\n\n/** Given a partial operator expression, return a non-partial if it's valid, or undefined */\nexport function sanitizeOperator(\n  expression: Partial<QueryEditorOperatorExpression>\n): QueryEditorOperatorExpression | undefined {\n  const key = expression.property?.name;\n  const value = expression.operator?.value;\n  const operator = expression.operator?.name;\n\n  if (key && value && operator) {\n    return {\n      type: QueryEditorExpressionType.Operator,\n      property: {\n        type: QueryEditorPropertyType.String,\n        name: key,\n      },\n      operator: {\n        value,\n        name: operator,\n      },\n    };\n  }\n\n  return undefined;\n}\n\n/**\n * Given an array of Expressions, flattens them to the leaf Operator expressions.\n * Note, this loses context of any nested ANDs or ORs, so will not be useful once we support nested conditions */\nfunction flattenOperatorExpressions(\n  expressions: QueryEditorArrayExpression['expressions']\n): QueryEditorOperatorExpression[] {\n  return expressions.flatMap((expression) => {\n    if (expression.type === QueryEditorExpressionType.Operator) {\n      return expression;\n    }\n\n    if (expression.type === QueryEditorExpressionType.And || expression.type === QueryEditorExpressionType.Or) {\n      return flattenOperatorExpressions(expression.expressions);\n    }\n\n    // Expressions that we don't expect to find in the WHERE filter will be ignored\n    return [];\n  });\n}\n\n/** Returns a flattened list of WHERE filters, losing all context of nested filters or AND vs OR. Not suitable\n * if the UI supports nested conditions\n */\nexport function getFlattenedFilters(sql: SQLExpression): QueryEditorOperatorExpression[] {\n  const where = sql.where;\n  return flattenOperatorExpressions(where?.expressions ?? []);\n}\n\n/**\n * Given an array of Expressions, flattens them to the leaf Operator expressions.\n * Note, this loses context of any nested ANDs or ORs, so will not be useful once we support nested conditions */\nfunction flattenGroupByExpressions(\n  expressions: QueryEditorArrayExpression['expressions']\n): QueryEditorGroupByExpression[] {\n  return expressions.flatMap((expression) => {\n    if (expression.type === QueryEditorExpressionType.GroupBy) {\n      return expression;\n    }\n\n    // Expressions that we don't expect to find in the GROUP BY will be ignored\n    return [];\n  });\n}\n\n/** Returns a flattened list of GROUP BY expressions, losing all context of nested filters or AND vs OR.\n */\nexport function getFlattenedGroupBys(sql: SQLExpression): QueryEditorGroupByExpression[] {\n  const groupBy = sql.groupBy;\n  return flattenGroupByExpressions(groupBy?.expressions ?? []);\n}\n\n/** Converts a string array to a Dimensions object with null values  **/\nexport function stringArrayToDimensions(arr: string[]): Dimensions {\n  return arr.reduce((acc, curr) => {\n    if (curr) {\n      return { ...acc, [curr]: null };\n    }\n    return acc;\n  }, {});\n}\n\nexport function setSql(query: CloudWatchMetricsQuery, sql: SQLExpression): CloudWatchMetricsQuery {\n  return {\n    ...query,\n    sql: {\n      ...(query.sql ?? {}),\n      ...sql,\n    },\n  };\n}\n\nexport function setNamespace(query: CloudWatchMetricsQuery, namespace: string | undefined): CloudWatchMetricsQuery {\n  const sql = query.sql ?? {};\n  //updating `namespace` props for CloudWatchMetricsQuery\n  query.namespace = namespace ? namespace : '';\n\n  if (namespace === undefined) {\n    return setSql(query, {\n      from: undefined,\n    });\n  }\n\n  // It's just a simple `FROM \"AWS/EC2\"` expression\n  if (!sql.from || sql.from.type === QueryEditorExpressionType.Property) {\n    return setSql(query, {\n      from: {\n        type: QueryEditorExpressionType.Property,\n        property: {\n          type: QueryEditorPropertyType.String,\n          name: namespace,\n        },\n      },\n    });\n  }\n\n  // It's a more complicated `FROM SCHEMA(\"AWS/EC2\", ...)` expression\n  if (sql.from.type === QueryEditorExpressionType.Function) {\n    const namespaceParam: QueryEditorFunctionParameterExpression = {\n      type: QueryEditorExpressionType.FunctionParameter,\n      name: namespace,\n    };\n\n    const labelKeys = (sql.from.parameters ?? []).slice(1);\n\n    return setSql(query, {\n      from: {\n        type: QueryEditorExpressionType.Function,\n        name: SCHEMA,\n        parameters: [namespaceParam, ...labelKeys],\n      },\n    });\n  }\n\n  // TODO: do the with schema bit\n  return query;\n}\n\nexport function setSchemaLabels(\n  query: CloudWatchMetricsQuery,\n  schemaLabels: Array<SelectableValue<string>> | SelectableValue<string>\n): CloudWatchMetricsQuery {\n  const sql = query.sql ?? {};\n  schemaLabels = Array.isArray(schemaLabels) ? schemaLabels.map((l) => l.value) : [schemaLabels.value];\n\n  // schema labels are the second parameter in the schema function. `... FROM SCHEMA(\"AWS/EC2\", label1, label2 ...)`\n  if (sql.from?.type === QueryEditorExpressionType.Function && sql.from.parameters?.length) {\n    const parameters: QueryEditorFunctionParameterExpression[] = (schemaLabels ?? []).map((label: string) => ({\n      type: QueryEditorExpressionType.FunctionParameter,\n      name: label,\n    }));\n    const namespaceParam = (sql.from.parameters ?? [])[0];\n\n    return setSql(query, {\n      from: {\n        type: QueryEditorExpressionType.Function,\n        name: SCHEMA,\n        parameters: [namespaceParam, ...parameters],\n      },\n    });\n  }\n\n  return query;\n}\n\nexport function setMetricName(query: CloudWatchMetricsQuery, metricName: string): CloudWatchMetricsQuery {\n  const param: QueryEditorFunctionParameterExpression = {\n    type: QueryEditorExpressionType.FunctionParameter,\n    name: metricName,\n  };\n\n  return setSql(query, {\n    select: {\n      type: QueryEditorExpressionType.Function,\n      ...(query.sql?.select ?? {}),\n      parameters: [param],\n    },\n  });\n}\n\nexport function removeMetricName(query: CloudWatchMetricsQuery): CloudWatchMetricsQuery {\n  const queryWithNoParams = { ...query };\n  delete queryWithNoParams.sql?.select?.parameters;\n\n  return queryWithNoParams;\n}\n\nexport function setAggregation(query: CloudWatchMetricsQuery, aggregation: string): CloudWatchMetricsQuery {\n  return setSql(query, {\n    select: {\n      type: QueryEditorExpressionType.Function,\n      ...(query.sql?.select ?? {}),\n      name: aggregation,\n    },\n  });\n}\n\nexport function setOrderBy(query: CloudWatchMetricsQuery, aggregation: string): CloudWatchMetricsQuery {\n  return setSql(query, {\n    orderBy: {\n      type: QueryEditorExpressionType.Function,\n      name: aggregation,\n    },\n  });\n}\n\nexport function setWithSchema(query: CloudWatchMetricsQuery, withSchema: boolean): CloudWatchMetricsQuery {\n  const namespace = getNamespaceFromExpression((query.sql ?? {}).from);\n\n  if (withSchema) {\n    const namespaceParam: QueryEditorFunctionParameterExpression = {\n      type: QueryEditorExpressionType.FunctionParameter,\n      name: namespace,\n    };\n\n    return setSql(query, {\n      from: {\n        type: QueryEditorExpressionType.Function,\n        name: SCHEMA,\n        parameters: [namespaceParam],\n      },\n    });\n  }\n\n  return setSql(query, {\n    from: {\n      type: QueryEditorExpressionType.Property,\n      property: {\n        type: QueryEditorPropertyType.String,\n        name: namespace,\n      },\n    },\n  });\n}\n\n/** Sets the left hand side (InstanceId) in an OperatorExpression\n * Accepts a partial expression to use in an editor\n */\nexport function setOperatorExpressionProperty(\n  expression: Partial<QueryEditorOperatorExpression>,\n  property: string\n): QueryEditorOperatorExpression {\n  return {\n    type: QueryEditorExpressionType.Operator,\n    property: {\n      type: QueryEditorPropertyType.String,\n      name: property,\n    },\n    operator: expression.operator ?? {},\n  };\n}\n\n/** Sets the operator (\"==\") in an OperatorExpression\n * Accepts a partial expression to use in an editor\n */\nexport function setOperatorExpressionName(\n  expression: Partial<QueryEditorOperatorExpression>,\n  name: string\n): QueryEditorOperatorExpression {\n  return {\n    type: QueryEditorExpressionType.Operator,\n    property: expression.property ?? {\n      type: QueryEditorPropertyType.String,\n    },\n    operator: {\n      ...expression.operator,\n      name,\n    },\n  };\n}\n\n/** Sets the right hand side (\"i-abc123445\") in an OperatorExpression\n * Accepts a partial expression to use in an editor\n */\nexport function setOperatorExpressionValue(\n  expression: Partial<QueryEditorOperatorExpression>,\n  value: string\n): QueryEditorOperatorExpression {\n  return {\n    type: QueryEditorExpressionType.Operator,\n    property: expression.property ?? {\n      type: QueryEditorPropertyType.String,\n    },\n    operator: {\n      ...expression.operator,\n      value,\n    },\n  };\n}\n\n/** Creates a GroupByExpression for a specified field\n */\nexport function setGroupByField(field: string): QueryEditorGroupByExpression {\n  return {\n    type: QueryEditorExpressionType.GroupBy,\n    property: {\n      type: QueryEditorPropertyType.String,\n      name: field,\n    },\n  };\n}\n","import React, { useEffect, useMemo } from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { EditorField, EditorFieldGroup, EditorSwitch } from '@grafana/experimental';\nimport { Select } from '@grafana/ui';\n\nimport { STATISTICS } from '../../cloudwatch-sql/language';\nimport { CloudWatchDatasource } from '../../datasource';\nimport { useDimensionKeys, useMetrics, useNamespaces } from '../../hooks';\nimport { CloudWatchMetricsQuery } from '../../types';\nimport { appendTemplateVariables } from '../../utils/utils';\n\nimport {\n  getMetricNameFromExpression,\n  getNamespaceFromExpression,\n  getSchemaLabelKeys as getSchemaLabels,\n  isUsingWithSchema,\n  removeMetricName,\n  setAggregation,\n  setMetricName,\n  setNamespace,\n  setSchemaLabels,\n  setWithSchema,\n  stringArrayToDimensions,\n} from './utils';\n\ninterface SQLBuilderSelectRowProps {\n  query: CloudWatchMetricsQuery;\n  datasource: CloudWatchDatasource;\n  onQueryChange: (query: CloudWatchMetricsQuery) => void;\n}\n\nconst AGGREGATIONS = STATISTICS.map(toOption);\n\nconst SQLBuilderSelectRow: React.FC<SQLBuilderSelectRowProps> = ({ datasource, query, onQueryChange }) => {\n  const sql = query.sql ?? {};\n\n  const aggregation = sql.select?.name;\n  useEffect(() => {\n    if (!aggregation) {\n      onQueryChange(setAggregation(query, STATISTICS[0]));\n    }\n  }, [aggregation, onQueryChange, query]);\n\n  const metricName = getMetricNameFromExpression(sql.select);\n  const namespace = getNamespaceFromExpression(sql.from);\n  const schemaLabels = getSchemaLabels(sql.from);\n  const withSchemaEnabled = isUsingWithSchema(sql.from);\n\n  const namespaceOptions = useNamespaces(datasource);\n  const metricOptions = useMetrics(datasource, query.region, namespace);\n  const existingFilters = useMemo(() => stringArrayToDimensions(schemaLabels ?? []), [schemaLabels]);\n  const unusedDimensionKeys = useDimensionKeys(datasource, query.region, namespace, metricName, existingFilters);\n  const dimensionKeys = useMemo(\n    () => (schemaLabels?.length ? [...unusedDimensionKeys, ...schemaLabels.map(toOption)] : unusedDimensionKeys),\n    [unusedDimensionKeys, schemaLabels]\n  );\n\n  const onNamespaceChange = async (query: CloudWatchMetricsQuery) => {\n    const validatedQuery = await validateMetricName(query);\n    onQueryChange(validatedQuery);\n  };\n\n  const validateMetricName = async (query: CloudWatchMetricsQuery) => {\n    let { region, sql } = query;\n    await datasource.getMetrics(query.namespace, region).then((result: Array<SelectableValue<string>>) => {\n      if (!result.some((metric) => metric.value === metricName)) {\n        sql = removeMetricName(query).sql;\n      }\n    });\n    return { ...query, sql };\n  };\n\n  return (\n    <>\n      <EditorFieldGroup>\n        <EditorField label=\"Namespace\" width={16}>\n          <Select\n            aria-label=\"Namespace\"\n            value={namespace ? toOption(namespace) : null}\n            inputId={`${query.refId}-cloudwatch-sql-namespace`}\n            options={namespaceOptions}\n            allowCustomValue\n            onChange={({ value }) => value && onNamespaceChange(setNamespace(query, value))}\n          />\n        </EditorField>\n\n        <EditorField label=\"With schema\">\n          <EditorSwitch\n            id={`${query.refId}-cloudwatch-sql-withSchema`}\n            value={withSchemaEnabled}\n            onChange={(ev) =>\n              ev.target instanceof HTMLInputElement && onQueryChange(setWithSchema(query, ev.target.checked))\n            }\n          />\n        </EditorField>\n\n        {withSchemaEnabled && (\n          <EditorField label=\"Schema labels\" disabled={!namespace}>\n            <Select\n              id={`${query.refId}-cloudwatch-sql-schema-label-keys`}\n              width=\"auto\"\n              isMulti={true}\n              value={schemaLabels ? schemaLabels.map(toOption) : null}\n              options={dimensionKeys}\n              allowCustomValue\n              onChange={(item) => item && onQueryChange(setSchemaLabels(query, item))}\n            />\n          </EditorField>\n        )}\n      </EditorFieldGroup>\n\n      <EditorFieldGroup>\n        <EditorField label=\"Metric name\" width={16}>\n          <Select\n            aria-label=\"Metric name\"\n            value={metricName ? toOption(metricName) : null}\n            options={metricOptions}\n            allowCustomValue\n            onChange={({ value }) => value && onQueryChange(setMetricName(query, value))}\n          />\n        </EditorField>\n\n        <EditorField label=\"Aggregation\" width={16}>\n          <Select\n            aria-label=\"Aggregation\"\n            value={aggregation ? toOption(aggregation) : null}\n            options={appendTemplateVariables(datasource, AGGREGATIONS)}\n            onChange={({ value }) => value && onQueryChange(setAggregation(query, value))}\n          />\n        </EditorField>\n      </EditorFieldGroup>\n    </>\n  );\n};\n\nexport default SQLBuilderSelectRow;\n","import React, { useMemo, useState } from 'react';\nimport { useAsyncFn } from 'react-use';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { AccessoryButton, EditorList, InputGroup } from '@grafana/experimental';\nimport { Select } from '@grafana/ui';\n\nimport { COMPARISON_OPERATORS, EQUALS } from '../../cloudwatch-sql/language';\nimport { CloudWatchDatasource } from '../../datasource';\nimport { QueryEditorExpressionType, QueryEditorOperatorExpression, QueryEditorPropertyType } from '../../expressions';\nimport { useDimensionKeys } from '../../hooks';\nimport { CloudWatchMetricsQuery } from '../../types';\nimport { appendTemplateVariables } from '../../utils/utils';\n\nimport {\n  getFlattenedFilters,\n  getMetricNameFromExpression,\n  getNamespaceFromExpression,\n  sanitizeOperator,\n  setOperatorExpressionName,\n  setOperatorExpressionProperty,\n  setOperatorExpressionValue,\n  setSql,\n} from './utils';\n\ninterface SQLFilterProps {\n  query: CloudWatchMetricsQuery;\n  datasource: CloudWatchDatasource;\n  onQueryChange: (query: CloudWatchMetricsQuery) => void;\n}\n\nconst OPERATORS = COMPARISON_OPERATORS.map(toOption);\n\nconst SQLFilter: React.FC<SQLFilterProps> = ({ query, onQueryChange, datasource }) => {\n  const filtersFromQuery = useMemo(() => getFlattenedFilters(query.sql ?? {}), [query.sql]);\n  const [filters, setFilters] = useState<QueryEditorOperatorExpression[]>(filtersFromQuery);\n\n  const onChange = (newItems: Array<Partial<QueryEditorOperatorExpression>>) => {\n    // As new (empty object) items come in, with need to make sure they have the correct type\n    const cleaned = newItems.map(\n      (v): QueryEditorOperatorExpression => ({\n        type: QueryEditorExpressionType.Operator,\n        property: v.property ?? { type: QueryEditorPropertyType.String },\n        operator: v.operator ?? {\n          name: EQUALS,\n        },\n      })\n    );\n\n    setFilters(cleaned);\n\n    // Only save valid and complete filters into the query state\n    const validExpressions: QueryEditorOperatorExpression[] = [];\n    for (const operatorExpression of cleaned) {\n      const validated = sanitizeOperator(operatorExpression);\n      if (validated) {\n        validExpressions.push(validated);\n      }\n    }\n\n    const where = validExpressions.length\n      ? {\n          type: QueryEditorExpressionType.And as const,\n          expressions: validExpressions,\n        }\n      : undefined;\n\n    onQueryChange(setSql(query, { where }));\n  };\n\n  return <EditorList items={filters} onChange={onChange} renderItem={makeRenderFilter(datasource, query)} />;\n};\n\n// Making component functions in the render body is not recommended, but it works for now.\n// If some problems arise (perhaps with state going missing), consider this to be a potential cause\nfunction makeRenderFilter(datasource: CloudWatchDatasource, query: CloudWatchMetricsQuery) {\n  function renderFilter(\n    item: Partial<QueryEditorOperatorExpression>,\n    onChange: (item: QueryEditorOperatorExpression) => void,\n    onDelete: () => void\n  ) {\n    return <FilterItem datasource={datasource} query={query} filter={item} onChange={onChange} onDelete={onDelete} />;\n  }\n\n  return renderFilter;\n}\n\nexport default SQLFilter;\n\ninterface FilterItemProps {\n  datasource: CloudWatchDatasource;\n  query: CloudWatchMetricsQuery;\n  filter: Partial<QueryEditorOperatorExpression>;\n  onChange: (item: QueryEditorOperatorExpression) => void;\n  onDelete: () => void;\n}\n\nconst FilterItem: React.FC<FilterItemProps> = (props) => {\n  const { datasource, query, filter, onChange, onDelete } = props;\n  const sql = query.sql ?? {};\n\n  const namespace = getNamespaceFromExpression(sql.from);\n  const metricName = getMetricNameFromExpression(sql.select);\n\n  const dimensionKeys = useDimensionKeys(datasource, query.region, namespace, metricName);\n\n  const loadDimensionValues = async () => {\n    if (!filter.property?.name) {\n      return [];\n    }\n\n    return datasource\n      .getDimensionValues(query.region, namespace, metricName, filter.property.name, {})\n      .then((result: Array<SelectableValue<string>>) => {\n        return appendTemplateVariables(datasource, result);\n      });\n  };\n\n  const [state, loadOptions] = useAsyncFn(loadDimensionValues, [\n    query.region,\n    namespace,\n    metricName,\n    filter.property?.name,\n  ]);\n\n  return (\n    <InputGroup>\n      <Select\n        width=\"auto\"\n        value={filter.property?.name ? toOption(filter.property?.name) : null}\n        options={dimensionKeys}\n        allowCustomValue\n        onChange={({ value }) => value && onChange(setOperatorExpressionProperty(filter, value))}\n      />\n\n      <Select\n        width=\"auto\"\n        value={filter.operator?.name && toOption(filter.operator.name)}\n        options={OPERATORS}\n        onChange={({ value }) => value && onChange(setOperatorExpressionName(filter, value))}\n      />\n\n      <Select\n        width=\"auto\"\n        isLoading={state.loading}\n        value={\n          filter.operator?.value && typeof filter.operator?.value === 'string' ? toOption(filter.operator?.value) : null\n        }\n        options={state.value}\n        allowCustomValue\n        onOpenMenu={loadOptions}\n        onChange={({ value }) => value && onChange(setOperatorExpressionValue(filter, value))}\n      />\n\n      <AccessoryButton aria-label=\"remove\" icon=\"times\" variant=\"secondary\" onClick={onDelete} />\n    </InputGroup>\n  );\n};\n","import React, { useMemo, useState } from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { AccessoryButton, EditorList, InputGroup } from '@grafana/experimental';\nimport { Select } from '@grafana/ui';\n\nimport { CloudWatchDatasource } from '../../datasource';\nimport { QueryEditorExpressionType, QueryEditorGroupByExpression, QueryEditorPropertyType } from '../../expressions';\nimport { useDimensionKeys } from '../../hooks';\nimport { CloudWatchMetricsQuery } from '../../types';\n\nimport {\n  getFlattenedGroupBys,\n  getMetricNameFromExpression,\n  getNamespaceFromExpression,\n  setGroupByField,\n  setSql,\n} from './utils';\n\ninterface SQLGroupByProps {\n  query: CloudWatchMetricsQuery;\n  datasource: CloudWatchDatasource;\n  onQueryChange: (query: CloudWatchMetricsQuery) => void;\n}\n\nconst SQLGroupBy: React.FC<SQLGroupByProps> = ({ query, datasource, onQueryChange }) => {\n  const sql = query.sql ?? {};\n  const groupBysFromQuery = useMemo(() => getFlattenedGroupBys(query.sql ?? {}), [query.sql]);\n  const [items, setItems] = useState<QueryEditorGroupByExpression[]>(groupBysFromQuery);\n\n  const namespace = getNamespaceFromExpression(sql.from);\n  const metricName = getMetricNameFromExpression(sql.select);\n\n  const baseOptions = useDimensionKeys(datasource, query.region, namespace, metricName);\n  const options = useMemo(\n    // Exclude options we've already selected\n    () => baseOptions.filter((option) => !groupBysFromQuery.some((v) => v.property.name === option.value)),\n    [baseOptions, groupBysFromQuery]\n  );\n\n  const onChange = (newItems: Array<Partial<QueryEditorGroupByExpression>>) => {\n    // As new (empty object) items come in, with need to make sure they have the correct type\n    const cleaned = newItems.map(\n      (v): QueryEditorGroupByExpression => ({\n        type: QueryEditorExpressionType.GroupBy,\n        property: {\n          type: QueryEditorPropertyType.String,\n          name: v.property?.name,\n        },\n      })\n    );\n\n    setItems(cleaned);\n\n    // Only save complete expressions into the query state;\n    const completeExpressions = cleaned.filter((v) => v.property?.name);\n\n    const groupBy = completeExpressions.length\n      ? {\n          type: QueryEditorExpressionType.And as const,\n          expressions: completeExpressions,\n        }\n      : undefined;\n\n    onQueryChange(setSql(query, { groupBy }));\n  };\n\n  return <EditorList items={items} onChange={onChange} renderItem={makeRenderItem(options)} />;\n};\n\nfunction makeRenderItem(options: Array<SelectableValue<string>>) {\n  function renderItem(\n    item: Partial<QueryEditorGroupByExpression>,\n    onChange: (item: QueryEditorGroupByExpression) => void,\n    onDelete: () => void\n  ) {\n    return <GroupByItem options={options} item={item} onChange={onChange} onDelete={onDelete} />;\n  }\n\n  return renderItem;\n}\n\ninterface GroupByItemProps {\n  options: Array<SelectableValue<string>>;\n  item: Partial<QueryEditorGroupByExpression>;\n  onChange: (item: QueryEditorGroupByExpression) => void;\n  onDelete: () => void;\n}\n\nconst GroupByItem: React.FC<GroupByItemProps> = (props) => {\n  const { options, item, onChange, onDelete } = props;\n  const fieldName = item.property?.name;\n\n  return (\n    <InputGroup>\n      <Select\n        aria-label={`Group by ${fieldName ?? 'filter key'}`}\n        width=\"auto\"\n        value={fieldName ? toOption(fieldName) : null}\n        options={options}\n        allowCustomValue\n        onChange={({ value }) => value && onChange(setGroupByField(value))}\n      />\n\n      <AccessoryButton aria-label=\"remove\" icon=\"times\" variant=\"secondary\" onClick={onDelete} />\n    </InputGroup>\n  );\n};\n\nexport default SQLGroupBy;\n","import React from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { AccessoryButton, EditorField, EditorFieldGroup, InputGroup } from '@grafana/experimental';\nimport { Select } from '@grafana/ui';\n\nimport { ASC, DESC, STATISTICS } from '../../cloudwatch-sql/language';\nimport { CloudWatchDatasource } from '../../datasource';\nimport { CloudWatchMetricsQuery } from '../../types';\nimport { appendTemplateVariables } from '../../utils/utils';\n\nimport { setOrderBy, setSql } from './utils';\n\ninterface SQLBuilderSelectRowProps {\n  query: CloudWatchMetricsQuery;\n  datasource: CloudWatchDatasource;\n  onQueryChange: (query: CloudWatchMetricsQuery) => void;\n}\n\nconst orderByDirections: Array<SelectableValue<string>> = [\n  { label: ASC, value: ASC },\n  { label: DESC, value: DESC },\n];\n\nconst SQLOrderByGroup: React.FC<SQLBuilderSelectRowProps> = ({ query, onQueryChange, datasource }) => {\n  const sql = query.sql ?? {};\n  const orderBy = sql.orderBy?.name;\n  const orderByDirection = sql.orderByDirection;\n\n  return (\n    <EditorFieldGroup>\n      <EditorField label=\"Order by\" optional width={16}>\n        <InputGroup>\n          <Select\n            aria-label=\"Order by\"\n            onChange={({ value }) => value && onQueryChange(setOrderBy(query, value))}\n            options={appendTemplateVariables(datasource, STATISTICS.map(toOption))}\n            value={orderBy ? toOption(orderBy) : null}\n          />\n          {orderBy && (\n            <AccessoryButton\n              aria-label=\"remove\"\n              icon=\"times\"\n              variant=\"secondary\"\n              onClick={() => onQueryChange(setSql(query, { orderBy: undefined }))}\n            />\n          )}\n        </InputGroup>\n      </EditorField>\n\n      <EditorField label=\"Direction\" disabled={!orderBy} width={16}>\n        <Select\n          aria-label=\"Direction\"\n          inputId=\"cloudwatch-sql-order-by-direction\"\n          value={orderByDirection ? toOption(orderByDirection) : orderByDirections[0]}\n          options={appendTemplateVariables(datasource, orderByDirections)}\n          onChange={(item) => item && onQueryChange(setSql(query, { orderByDirection: item.value }))}\n        />\n      </EditorField>\n    </EditorFieldGroup>\n  );\n};\n\nexport default SQLOrderByGroup;\n","import React, { useCallback, useEffect, useState } from 'react';\n\nimport { EditorField, EditorRow, EditorRows } from '@grafana/experimental';\nimport { Input } from '@grafana/ui';\n\nimport SQLGenerator from '../../cloudwatch-sql/SQLGenerator';\nimport { CloudWatchDatasource } from '../../datasource';\nimport { CloudWatchMetricsQuery } from '../../types';\n\nimport SQLBuilderSelectRow from './SQLBuilderSelectRow';\nimport SQLFilter from './SQLFilter';\nimport SQLGroupBy from './SQLGroupBy';\nimport SQLOrderByGroup from './SQLOrderByGroup';\nimport { setSql } from './utils';\n\nexport type Props = {\n  query: CloudWatchMetricsQuery;\n  datasource: CloudWatchDatasource;\n  onChange: (value: CloudWatchMetricsQuery) => void;\n  onRunQuery: () => void;\n};\n\nexport function SQLBuilderEditor({ query, datasource, onChange, onRunQuery }: React.PropsWithChildren<Props>) {\n  const sql = query.sql ?? {};\n\n  const onQueryChange = useCallback(\n    (query: CloudWatchMetricsQuery) => {\n      const sqlGenerator = new SQLGenerator();\n      const sqlString = sqlGenerator.expressionToSqlQuery(query.sql ?? {});\n      const fullQuery = {\n        ...query,\n        sqlExpression: sqlString,\n      };\n\n      onChange(fullQuery);\n      onRunQuery();\n    },\n    [onChange, onRunQuery]\n  );\n\n  const [sqlPreview, setSQLPreview] = useState<string | undefined>();\n  useEffect(() => {\n    const sqlGenerator = new SQLGenerator();\n    const sqlString = sqlGenerator.expressionToSqlQuery(query.sql ?? {});\n    if (sqlPreview !== sqlString) {\n      setSQLPreview(sqlString);\n    }\n  }, [query, sqlPreview, setSQLPreview]);\n\n  return (\n    <EditorRows>\n      <EditorRow>\n        <SQLBuilderSelectRow query={query} onQueryChange={onQueryChange} datasource={datasource} />\n      </EditorRow>\n\n      <EditorRow>\n        <EditorField label=\"Filter\" optional={true}>\n          <SQLFilter query={query} onQueryChange={onQueryChange} datasource={datasource} />\n        </EditorField>\n      </EditorRow>\n\n      <EditorRow>\n        <EditorField label=\"Group by\" optional>\n          <SQLGroupBy query={query} onQueryChange={onQueryChange} datasource={datasource} />\n        </EditorField>\n\n        <SQLOrderByGroup query={query} onQueryChange={onQueryChange} datasource={datasource}></SQLOrderByGroup>\n\n        <EditorField label=\"Limit\" optional>\n          <Input\n            id={`${query.refId}-cloudwatch-sql-builder-editor-limit`}\n            value={sql.limit}\n            onChange={(e) => {\n              const val = e.currentTarget.valueAsNumber;\n              onQueryChange(setSql(query, { limit: isNaN(val) ? undefined : val }));\n            }}\n            type=\"number\"\n            min={1}\n          />\n        </EditorField>\n      </EditorRow>\n\n      {sqlPreview && (\n        <EditorRow>\n          {process.env.NODE_ENV === 'development' && <pre>{JSON.stringify(query.sql ?? {}, null, 2)}</pre>}\n          <pre>{sqlPreview ?? ''}</pre>\n        </EditorRow>\n      )}\n    </EditorRows>\n  );\n}\n","import { LanguageDefinition } from '../monarch/register';\n\nconst cloudWatchMetricMathLanguageDefinition: LanguageDefinition = {\n  id: 'cloudwatch-MetricMath',\n  extensions: [],\n  aliases: [],\n  mimetypes: [],\n  loader: () => import('./language'),\n};\nexport default cloudWatchMetricMathLanguageDefinition;\n","export const TRIGGER_SUGGEST = {\n  id: 'editor.action.triggerSuggest',\n  title: '',\n};\n","import type * as monacoType from 'monaco-editor/esm/vs/editor/editor.api';\n\nimport { Monaco } from '@grafana/ui';\n\nimport { Completeable } from './types';\n\nexport type LanguageDefinition = {\n  id: string;\n  extensions: string[];\n  aliases: string[];\n  mimetypes: string[];\n  loader: () => Promise<{\n    language: monacoType.languages.IMonarchLanguage;\n    conf: monacoType.languages.LanguageConfiguration;\n  }>;\n};\n\nexport const registerLanguage = (\n  monaco: Monaco,\n  language: LanguageDefinition,\n  completionItemProvider: Completeable\n) => {\n  const { id, loader } = language;\n\n  const languages = monaco.languages.getLanguages();\n  if (languages.find((l) => l.id === id)) {\n    return;\n  }\n\n  monaco.languages.register({ id });\n  loader().then((monarch) => {\n    monaco.languages.setMonarchTokensProvider(id, monarch.language);\n    monaco.languages.setLanguageConfiguration(id, monarch.conf);\n    monaco.languages.registerCompletionItemProvider(id, completionItemProvider.getCompletionProvider(monaco, language));\n  });\n};\n","import type * as monacoType from 'monaco-editor/esm/vs/editor/editor.api';\nimport React, { useCallback, useRef } from 'react';\n\nimport { CodeEditor, Monaco } from '@grafana/ui';\n\nimport { CloudWatchDatasource } from '../datasource';\nimport language from '../metric-math/definition';\nimport { TRIGGER_SUGGEST } from '../monarch/commands';\nimport { registerLanguage } from '../monarch/register';\n\nexport interface Props {\n  onChange: (query: string) => void;\n  onRunQuery: () => void;\n  expression: string;\n  datasource: CloudWatchDatasource;\n}\n\nexport function MathExpressionQueryField({\n  expression: query,\n  onChange,\n  onRunQuery,\n  datasource,\n}: React.PropsWithChildren<Props>) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const onEditorMount = useCallback(\n    (editor: monacoType.editor.IStandaloneCodeEditor, monaco: Monaco) => {\n      editor.onDidFocusEditorText(() => editor.trigger(TRIGGER_SUGGEST.id, TRIGGER_SUGGEST.id, {}));\n      editor.addCommand(monaco.KeyMod.Shift | monaco.KeyCode.Enter, () => {\n        const text = editor.getValue();\n        onChange(text);\n        onRunQuery();\n      });\n\n      // auto resizes the editor to be the height of the content it holds\n      // this code comes from the Prometheus query editor.\n      // We may wish to consider abstracting it into the grafana/ui repo in the future\n      const updateElementHeight = () => {\n        const containerDiv = containerRef.current;\n        if (containerDiv !== null && editor.getContentHeight() < 200) {\n          const pixelHeight = Math.max(32, editor.getContentHeight());\n          containerDiv.style.height = `${pixelHeight}px`;\n          containerDiv.style.width = '100%';\n          const pixelWidth = containerDiv.clientWidth;\n          editor.layout({ width: pixelWidth, height: pixelHeight });\n        }\n      };\n\n      editor.onDidContentSizeChange(updateElementHeight);\n      updateElementHeight();\n    },\n    [onChange, onRunQuery]\n  );\n\n  return (\n    <div ref={containerRef}>\n      <CodeEditor\n        monacoOptions={{\n          // without this setting, the auto-resize functionality causes an infinite loop, don't remove it!\n          scrollBeyondLastLine: false,\n\n          // These additional options are style focused and are a subset of those in the query editor in Prometheus\n          fontSize: 14,\n          lineNumbers: 'off',\n          renderLineHighlight: 'none',\n          scrollbar: {\n            vertical: 'hidden',\n            horizontal: 'hidden',\n          },\n          suggestFontSize: 12,\n          wordWrap: 'on',\n          padding: {\n            top: 6,\n          },\n        }}\n        language={language.id}\n        value={query}\n        onBlur={(value) => {\n          if (value !== query) {\n            onChange(value);\n            onRunQuery();\n          }\n        }}\n        onBeforeEditorMount={(monaco: Monaco) =>\n          registerLanguage(monaco, language, datasource.metricMathCompletionItemProvider)\n        }\n        onEditorDidMount={onEditorMount}\n      />\n    </div>\n  );\n}\n","import { LanguageDefinition } from '../monarch/register';\n\nconst cloudWatchSqlLanguageDefinition: LanguageDefinition = {\n  id: 'cloudwatch-sql',\n  extensions: ['.cloudwatchSql'],\n  aliases: ['CloudWatch', 'cloudwatch', 'CloudWatchSQL'],\n  mimetypes: [],\n  loader: () => import('./language'),\n};\nexport default cloudWatchSqlLanguageDefinition;\n","import type * as monacoType from 'monaco-editor/esm/vs/editor/editor.api';\nimport React, { FunctionComponent, useCallback, useEffect } from 'react';\n\nimport { CodeEditor, Monaco } from '@grafana/ui';\n\nimport language from '../cloudwatch-sql/definition';\nimport { CloudWatchDatasource } from '../datasource';\nimport { TRIGGER_SUGGEST } from '../monarch/commands';\nimport { registerLanguage } from '../monarch/register';\n\nexport interface Props {\n  region: string;\n  sql: string;\n  onChange: (sql: string) => void;\n  onRunQuery: () => void;\n  datasource: CloudWatchDatasource;\n}\n\nexport const SQLCodeEditor: FunctionComponent<Props> = ({ region, sql, onChange, onRunQuery, datasource }) => {\n  useEffect(() => {\n    datasource.sqlCompletionItemProvider.setRegion(region);\n  }, [region, datasource]);\n\n  const onEditorMount = useCallback(\n    (editor: monacoType.editor.IStandaloneCodeEditor, monaco: Monaco) => {\n      editor.onDidFocusEditorText(() => editor.trigger(TRIGGER_SUGGEST.id, TRIGGER_SUGGEST.id, {}));\n      editor.addCommand(monaco.KeyMod.Shift | monaco.KeyCode.Enter, () => {\n        const text = editor.getValue();\n        onChange(text);\n        onRunQuery();\n      });\n    },\n    [onChange, onRunQuery]\n  );\n\n  return (\n    <CodeEditor\n      height={'150px'}\n      language={language.id}\n      value={sql}\n      onBlur={(value) => {\n        if (value !== sql) {\n          onChange(value);\n        }\n      }}\n      showMiniMap={false}\n      showLineNumbers={true}\n      onBeforeEditorMount={(monaco: Monaco) => registerLanguage(monaco, language, datasource.sqlCompletionItemProvider)}\n      onEditorDidMount={onEditorMount}\n    />\n  );\n};\n","import { monacoTypes } from '@grafana/ui';\n\nimport { TokenTypes } from './types';\n\nexport class LinkedToken {\n  constructor(\n    public type: string,\n    public value: string,\n    public range: monacoTypes.IRange,\n    public previous: LinkedToken | null,\n    public next: LinkedToken | null,\n    public tokenTypes: TokenTypes\n  ) {}\n\n  isKeyword(): boolean {\n    return this.type === this.tokenTypes.Keyword;\n  }\n\n  isWhiteSpace(): boolean {\n    return this.type === this.tokenTypes.Whitespace;\n  }\n\n  isParenthesis(): boolean {\n    return this.type === this.tokenTypes.Parenthesis;\n  }\n\n  isIdentifier(): boolean {\n    return this.type === this.tokenTypes.Identifier;\n  }\n\n  isString(): boolean {\n    return this.type === this.tokenTypes.String;\n  }\n\n  isDoubleQuotedString(): boolean {\n    return this.type === this.tokenTypes.Type;\n  }\n\n  isVariable(): boolean {\n    return this.type === this.tokenTypes.Variable;\n  }\n\n  isFunction(): boolean {\n    return this.type === this.tokenTypes.Function;\n  }\n\n  isNumber(): boolean {\n    return this.type === this.tokenTypes.Number;\n  }\n\n  is(type: string, value?: string | number | boolean): boolean {\n    const isType = this.type === type;\n    return value !== undefined ? isType && this.value === value : isType;\n  }\n\n  endsWith(value: string | number | boolean): boolean {\n    return this.value === value || this.value[this.value.length - 1] === value;\n  }\n\n  getPreviousNonWhiteSpaceToken(): LinkedToken | null {\n    let curr = this.previous;\n    while (curr != null) {\n      if (!curr.isWhiteSpace()) {\n        return curr;\n      }\n      curr = curr.previous;\n    }\n    return null;\n  }\n\n  getPreviousOfType(type: string, value?: string): LinkedToken | null {\n    let curr = this.previous;\n    while (curr != null) {\n      const isType = curr.type === type;\n      if (value !== undefined ? isType && curr.value === value : isType) {\n        return curr;\n      }\n      curr = curr.previous;\n    }\n    return null;\n  }\n\n  getPreviousUntil(type: string, ignoreTypes: string[], value?: string): LinkedToken[] | null {\n    let tokens: LinkedToken[] = [];\n    let curr = this.previous;\n    while (curr != null) {\n      if (ignoreTypes.some((t) => t === curr?.type)) {\n        curr = curr.previous;\n        continue;\n      }\n\n      const isType = curr.type === type;\n      if (value !== undefined ? isType && curr.value === value : isType) {\n        return tokens;\n      }\n      if (!curr.isWhiteSpace()) {\n        tokens.push(curr);\n      }\n      curr = curr.previous;\n    }\n\n    return tokens;\n  }\n\n  getNextUntil(type: string, ignoreTypes: string[], value?: string): LinkedToken[] | null {\n    let tokens: LinkedToken[] = [];\n    let curr = this.next;\n    while (curr != null) {\n      if (ignoreTypes.some((t) => t === curr?.type)) {\n        curr = curr.next;\n        continue;\n      }\n\n      const isType = curr.type === type;\n      if (value !== undefined ? isType && curr.value === value : isType) {\n        return tokens;\n      }\n      if (!curr.isWhiteSpace()) {\n        tokens.push(curr);\n      }\n      curr = curr.next;\n    }\n\n    return tokens;\n  }\n\n  getPreviousKeyword(): LinkedToken | null {\n    let curr = this.previous;\n    while (curr != null) {\n      if (curr.isKeyword()) {\n        return curr;\n      }\n      curr = curr.previous;\n    }\n    return null;\n  }\n\n  getNextNonWhiteSpaceToken(): LinkedToken | null {\n    let curr = this.next;\n    while (curr != null) {\n      if (!curr.isWhiteSpace()) {\n        return curr;\n      }\n      curr = curr.next;\n    }\n    return null;\n  }\n\n  getNextOfType(type: string, value?: string): LinkedToken | null {\n    let curr = this.next;\n    while (curr != null) {\n      const isType = curr.type === type;\n      if (value !== undefined ? isType && curr.value === value : isType) {\n        return curr;\n      }\n      curr = curr.next;\n    }\n    return null;\n  }\n}\n","import type { monacoTypes } from '@grafana/ui';\n\nimport { LinkedToken } from './LinkedToken';\nimport { LanguageDefinition } from './register';\nimport { Monaco, TokenTypes } from './types';\n\nexport function linkedTokenBuilder(\n  monaco: Monaco,\n  language: LanguageDefinition,\n  model: monacoTypes.editor.ITextModel,\n  position: monacoTypes.IPosition,\n  tokenTypes: TokenTypes\n) {\n  let current: LinkedToken | null = null;\n  let previous: LinkedToken | null = null;\n  const tokensPerLine = monaco.editor.tokenize(model.getValue() ?? '', language.id);\n\n  for (let lineIndex = 0; lineIndex < tokensPerLine.length; lineIndex++) {\n    const tokens = tokensPerLine[lineIndex];\n    // In case position is first column in new line, add empty whitespace token so that links are not broken\n    if (!tokens.length && previous) {\n      const token: monacoTypes.Token = {\n        offset: 0,\n        type: tokenTypes.Whitespace,\n        language: language.id,\n        _tokenBrand: undefined,\n      };\n      tokens.push(token);\n    }\n\n    for (let columnIndex = 0; columnIndex < tokens.length; columnIndex++) {\n      const token = tokens[columnIndex];\n      let endColumn =\n        tokens.length > columnIndex + 1 ? tokens[columnIndex + 1].offset + 1 : model.getLineLength(lineIndex + 1) + 1;\n\n      const range: monacoTypes.IRange = {\n        startLineNumber: lineIndex + 1,\n        startColumn: token.offset === 0 ? 0 : token.offset + 1,\n        endLineNumber: lineIndex + 1,\n        endColumn,\n      };\n\n      const value = model.getValueInRange(range);\n      const newToken: LinkedToken = new LinkedToken(token.type, value, range, previous, null, tokenTypes);\n\n      if (monaco.Range.containsPosition(range, position)) {\n        current = newToken;\n      }\n\n      if (previous) {\n        previous.next = newToken;\n      }\n      previous = newToken;\n    }\n  }\n\n  return current;\n}\n","import { monacoTypes } from '@grafana/ui';\n\nimport { LanguageDefinition } from './register';\n\nexport interface TokenTypes {\n  Parenthesis: string;\n  Whitespace: string;\n  Keyword: string;\n  Delimiter: string;\n  Operator: string;\n  Identifier: string;\n  Type: string;\n  Function: string;\n  Number: string;\n  String: string;\n  Variable: string;\n}\n\nexport enum StatementPosition {\n  Unknown,\n  // sql\n  SelectKeyword,\n  AfterSelectKeyword,\n  AfterSelectFuncFirstArgument,\n  AfterFromKeyword,\n  SchemaFuncFirstArgument,\n  SchemaFuncExtraArgument,\n  FromKeyword,\n  AfterFrom,\n  WhereKey,\n  WhereComparisonOperator,\n  WhereValue,\n  AfterWhereValue,\n  AfterGroupByKeywords,\n  AfterGroupBy,\n  AfterOrderByKeywords,\n  AfterOrderByFunction,\n  AfterOrderByDirection,\n  // metric math\n  PredefinedFunction,\n  SearchFuncSecondArg,\n  SearchFuncThirdArg,\n  PredefinedFuncSecondArg,\n  AfterFunction,\n  WithinString,\n}\n\nexport enum SuggestionKind {\n  SelectKeyword,\n  FunctionsWithArguments,\n  Metrics,\n  FromKeyword,\n  SchemaKeyword,\n  Namespaces,\n  LabelKeys,\n  WhereKeyword,\n  GroupByKeywords,\n  OrderByKeywords,\n  FunctionsWithoutArguments,\n  LimitKeyword,\n  SortOrderDirectionKeyword,\n  ComparisonOperators,\n  LabelValues,\n  LogicalOperators,\n\n  // metricmath,\n  KeywordArguments,\n  Operators,\n  Statistic,\n  Period,\n}\n\nexport enum CompletionItemPriority {\n  High = 'a',\n  MediumHigh = 'd',\n  Medium = 'g',\n  MediumLow = 'k',\n  Low = 'q',\n}\n\nexport interface Editor {\n  tokenize: (value: string, languageId: string) => monacoTypes.Token[][];\n}\n\nexport interface Range {\n  containsPosition: (range: monacoTypes.IRange, position: monacoTypes.IPosition) => boolean;\n  fromPositions: (start: monacoTypes.IPosition, end?: monacoTypes.IPosition) => monacoTypes.Range;\n}\n\nexport interface Languages {\n  CompletionItemInsertTextRule: {\n    InsertAsSnippet: 4;\n  };\n  CompletionItemKind: {\n    Function: 1;\n  };\n}\nexport interface Monaco {\n  editor: Editor;\n  Range: Range;\n  languages: Languages;\n}\n\nexport interface Completeable {\n  getCompletionProvider(\n    monaco: Monaco,\n    languageDefinition: LanguageDefinition\n  ): monacoTypes.languages.CompletionItemProvider;\n}\n","import { LanguageDefinition } from '../monarch/register';\n\nconst cloudWatchDynamicLabelsLanguageDefinition: LanguageDefinition = {\n  id: 'cloudwatch-dynamicLabels',\n  extensions: [],\n  aliases: [],\n  mimetypes: [],\n  loader: () => import('./language'),\n};\nexport default cloudWatchDynamicLabelsLanguageDefinition;\n","import { css, cx } from '@emotion/css';\nimport type * as monacoType from 'monaco-editor/esm/vs/editor/editor.api';\nimport React, { useCallback, useRef } from 'react';\n\nimport { CodeEditor, getInputStyles, Monaco, useTheme2 } from '@grafana/ui';\n\nimport { DynamicLabelsCompletionItemProvider } from '../dynamic-labels/CompletionItemProvider';\nimport language from '../dynamic-labels/definition';\nimport { TRIGGER_SUGGEST } from '../monarch/commands';\nimport { registerLanguage } from '../monarch/register';\n\nconst dynamicLabelsCompletionItemProvider = new DynamicLabelsCompletionItemProvider();\n\nexport interface Props {\n  onChange: (query: string) => void;\n  onRunQuery: () => void;\n  label: string;\n  width: number;\n}\n\nexport function DynamicLabelsField({ label, width, onChange, onRunQuery }: Props) {\n  const theme = useTheme2();\n  const styles = getInputStyles({ theme, width });\n  const containerRef = useRef<HTMLDivElement>(null);\n  const onEditorMount = useCallback(\n    (editor: monacoType.editor.IStandaloneCodeEditor, monaco: Monaco) => {\n      editor.onDidFocusEditorText(() => editor.trigger(TRIGGER_SUGGEST.id, TRIGGER_SUGGEST.id, {}));\n      editor.addCommand(monaco.KeyMod.Shift | monaco.KeyCode.Enter, () => {\n        const text = editor.getValue();\n        onChange(text);\n        onRunQuery();\n      });\n\n      const containerDiv = containerRef.current;\n      containerDiv !== null && editor.layout({ width: containerDiv.clientWidth, height: containerDiv.clientHeight });\n    },\n    [onChange, onRunQuery]\n  );\n\n  return (\n    <div ref={containerRef} className={cx(styles.wrapper)}>\n      <CodeEditor\n        containerStyles={css`\n          border: 1px solid ${theme.colors.action.disabledBackground};\n          &:hover {\n            border-color: ${theme.components.input.borderColor};\n          }\n        `}\n        monacoOptions={{\n          // without this setting, the auto-resize functionality causes an infinite loop, don't remove it!\n          scrollBeyondLastLine: false,\n\n          // These additional options are style focused and are a subset of those in the query editor in Prometheus\n          fontSize: 14,\n          lineNumbers: 'off',\n          renderLineHighlight: 'none',\n          overviewRulerLanes: 0,\n          scrollbar: {\n            vertical: 'hidden',\n            horizontal: 'hidden',\n          },\n          suggestFontSize: 12,\n          padding: {\n            top: 6,\n          },\n        }}\n        language={language.id}\n        value={label}\n        onBlur={(value) => {\n          if (value !== label) {\n            onChange(value);\n            onRunQuery();\n          }\n        }}\n        onBeforeEditorMount={(monaco: Monaco) =>\n          registerLanguage(monaco, language, dynamicLabelsCompletionItemProvider)\n        }\n        onEditorDidMount={onEditorMount}\n      />\n    </div>\n  );\n}\n","import type { Monaco, monacoTypes } from '@grafana/ui';\n\nimport { linkedTokenBuilder } from '../monarch/linkedTokenBuilder';\nimport { LanguageDefinition } from '../monarch/register';\nimport { Completeable, CompletionItemPriority, TokenTypes } from '../monarch/types';\n\nimport { DYNAMIC_LABEL_PATTERNS } from './language';\n\ntype CompletionItem = monacoTypes.languages.CompletionItem;\n\nexport class DynamicLabelsCompletionItemProvider implements Completeable {\n  tokenTypes: TokenTypes;\n\n  constructor() {\n    this.tokenTypes = {\n      Parenthesis: 'delimiter.parenthesis.cloudwatch-dynamicLabels',\n      Whitespace: 'white.cloudwatch-dynamicLabels',\n      Keyword: 'keyword.cloudwatch-dynamicLabels',\n      Delimiter: 'delimiter.cloudwatch-dynamicLabels',\n      Operator: 'operator.cloudwatch-dynamicLabels',\n      Identifier: 'identifier.cloudwatch-dynamicLabels',\n      Type: 'type.cloudwatch-dynamicLabels',\n      Function: 'predefined.cloudwatch-dynamicLabels',\n      Number: 'number.cloudwatch-dynamicLabels',\n      String: 'string.cloudwatch-dynamicLabels',\n      Variable: 'variable.cloudwatch-dynamicLabels',\n    };\n  }\n\n  // called by registerLanguage and passed to monaco with registerCompletionItemProvider\n  // returns an object that implements https://microsoft.github.io/monaco-editor/api/interfaces/monaco.languages.CompletionItemProvider.html\n  getCompletionProvider(monaco: Monaco, languageDefinition: LanguageDefinition) {\n    return {\n      triggerCharacters: [' ', '$', ',', '(', \"'\"], // one of these characters indicates that it is time to look for a suggestion\n      provideCompletionItems: async (model: monacoTypes.editor.ITextModel, position: monacoTypes.IPosition) => {\n        const currentToken = linkedTokenBuilder(monaco, languageDefinition, model, position, this.tokenTypes);\n        const invalidRangeToken = currentToken?.isWhiteSpace() || currentToken?.isParenthesis();\n        const range =\n          invalidRangeToken || !currentToken?.range ? monaco.Range.fromPositions(position) : currentToken?.range;\n        const toCompletionItem = (value: string, rest: Partial<CompletionItem> = {}) => {\n          const item: CompletionItem = {\n            label: value,\n            insertText: value,\n            kind: monaco.languages.CompletionItemKind.Field,\n            range,\n            sortText: CompletionItemPriority.Medium,\n            ...rest,\n          };\n          return item;\n        };\n        let suggestions: CompletionItem[] = [];\n        const next = currentToken?.next;\n        if (!currentToken?.isFunction() && (!next || next.isWhiteSpace())) {\n          suggestions = DYNAMIC_LABEL_PATTERNS.map((val) => toCompletionItem(val));\n          // always insert suggestion for dimension value and allow user to complete pattern by providing the dimension name\n          suggestions.push(\n            toCompletionItem(\"${PROP('Dim.')}\", {\n              sortText: CompletionItemPriority.High,\n              insertText: `\\${PROP('Dim.$0')} `,\n              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n            })\n          );\n        }\n\n        return {\n          suggestions,\n        };\n      },\n    };\n  }\n}\n","import { debounce } from 'lodash';\nimport React, { FunctionComponent, useState } from 'react';\n\nimport { Input } from '@grafana/ui';\n\nexport interface Props {\n  onChange: (alias: any) => void;\n  value: string;\n  id?: string;\n}\n\nexport const Alias: FunctionComponent<Props> = ({ value = '', onChange, id }) => {\n  const [alias, setAlias] = useState(value);\n\n  const propagateOnChange = debounce(onChange, 1500);\n\n  onChange = (e: any) => {\n    setAlias(e.target.value);\n    propagateOnChange(e.target.value);\n  };\n\n  return <Input id={id} type=\"text\" value={alias} onChange={onChange} aria-label=\"Optional alias\" />;\n};\n","import { config } from '@grafana/runtime';\n\nimport { CloudWatchMetricsQuery } from '../types';\n\n// Call this function to migrate queries from within the plugin.\nexport function migrateMetricQuery(query: CloudWatchMetricsQuery): CloudWatchMetricsQuery {\n  //add metric query migrations here\n  const migratedQuery = migrateAliasPatterns(query);\n  return migratedQuery;\n}\n\nconst aliasPatterns: Record<string, string> = {\n  metric: `PROP('MetricName')`,\n  namespace: `PROP('Namespace')`,\n  period: `PROP('Period')`,\n  region: `PROP('Region')`,\n  stat: `PROP('Stat')`,\n  label: `LABEL`,\n};\n\nexport function migrateAliasPatterns(query: CloudWatchMetricsQuery): CloudWatchMetricsQuery {\n  if (config.featureToggles.cloudWatchDynamicLabels && !query.hasOwnProperty('label')) {\n    const regex = /{{\\s*(.+?)\\s*}}/g;\n    query.label =\n      query.alias?.replace(regex, (_, value) => {\n        if (aliasPatterns.hasOwnProperty(value)) {\n          return `\\${${aliasPatterns[value]}}`;\n        }\n\n        return `\\${PROP('Dim.${value}')}`;\n      }) ?? '';\n  }\n\n  return query;\n}\n","import deepEqual from 'fast-deep-equal';\nimport { useEffect, useMemo } from 'react';\n\nimport { migrateMetricQuery } from '../../migrations/metricQueryMigrations';\nimport { CloudWatchMetricsQuery, MetricEditorMode, MetricQueryType } from '../../types';\n\nexport const DEFAULT_QUERY: Omit<CloudWatchMetricsQuery, 'refId'> = {\n  queryMode: 'Metrics',\n  namespace: '',\n  metricName: '',\n  expression: '',\n  dimensions: {},\n  region: 'default',\n  id: '',\n  statistic: 'Average',\n  period: '',\n  metricQueryType: MetricQueryType.Search,\n  metricEditorMode: MetricEditorMode.Builder,\n  sqlExpression: '',\n  matchExact: true,\n};\n\nconst prepareQuery = (query: CloudWatchMetricsQuery) => {\n  const withDefaults = { ...DEFAULT_QUERY, ...query };\n  const migratedQuery = migrateMetricQuery(withDefaults);\n\n  // If we didn't make any changes to the object, then return the original object to keep the\n  // identity the same, and not trigger any other useEffects or anything.\n  return deepEqual(migratedQuery, query) ? query : migratedQuery;\n};\n\n/**\n * Returns queries with some defaults + migrations, and calls onChange function to notify if it changes\n */\nconst usePreparedMetricsQuery = (\n  query: CloudWatchMetricsQuery,\n  onChangeQuery: (newQuery: CloudWatchMetricsQuery) => void\n) => {\n  const preparedQuery = useMemo(() => prepareQuery(query), [query]);\n\n  useEffect(() => {\n    if (preparedQuery !== query) {\n      onChangeQuery(preparedQuery);\n    }\n  }, [preparedQuery, query, onChangeQuery]);\n\n  return preparedQuery;\n};\n\nexport default usePreparedMetricsQuery;\n","import React, { ChangeEvent, useState } from 'react';\n\nimport { QueryEditorProps } from '@grafana/data';\nimport { EditorField, EditorRow, Space } from '@grafana/experimental';\nimport { config } from '@grafana/runtime';\nimport { Input } from '@grafana/ui';\n\nimport { MathExpressionQueryField, MetricStatEditor, SQLBuilderEditor, SQLCodeEditor } from '../';\nimport { CloudWatchDatasource } from '../../datasource';\nimport { isCloudWatchMetricsQuery } from '../../guards';\nimport {\n  CloudWatchJsonData,\n  CloudWatchMetricsQuery,\n  CloudWatchQuery,\n  MetricEditorMode,\n  MetricQueryType,\n  MetricStat,\n} from '../../types';\nimport { DynamicLabelsField } from '../DynamicLabelsField';\nimport QueryHeader from '../QueryHeader';\n\nimport { Alias } from './Alias';\nimport usePreparedMetricsQuery from './usePreparedMetricsQuery';\n\nexport interface Props extends QueryEditorProps<CloudWatchDatasource, CloudWatchQuery, CloudWatchJsonData> {\n  query: CloudWatchMetricsQuery;\n}\n\nexport const MetricsQueryEditor = (props: Props) => {\n  const { query, onRunQuery, datasource } = props;\n  const [sqlCodeEditorIsDirty, setSQLCodeEditorIsDirty] = useState(false);\n  const preparedQuery = usePreparedMetricsQuery(query, props.onChange);\n\n  const onChange = (query: CloudWatchQuery) => {\n    const { onChange, onRunQuery } = props;\n    onChange(query);\n    onRunQuery();\n  };\n\n  return (\n    <>\n      <QueryHeader\n        query={query}\n        onRunQuery={onRunQuery}\n        datasource={datasource}\n        onChange={(newQuery) => {\n          if (isCloudWatchMetricsQuery(newQuery) && newQuery.metricEditorMode !== query.metricEditorMode) {\n            setSQLCodeEditorIsDirty(false);\n          }\n          onChange(newQuery);\n        }}\n        sqlCodeEditorIsDirty={sqlCodeEditorIsDirty}\n      />\n      <Space v={0.5} />\n\n      {query.metricQueryType === MetricQueryType.Search && (\n        <>\n          {query.metricEditorMode === MetricEditorMode.Builder && (\n            <MetricStatEditor\n              {...props}\n              refId={query.refId}\n              metricStat={query}\n              onChange={(metricStat: MetricStat) => props.onChange({ ...query, ...metricStat })}\n            ></MetricStatEditor>\n          )}\n          {query.metricEditorMode === MetricEditorMode.Code && (\n            <MathExpressionQueryField\n              onRunQuery={onRunQuery}\n              expression={query.expression ?? ''}\n              onChange={(expression) => props.onChange({ ...query, expression })}\n              datasource={datasource}\n            ></MathExpressionQueryField>\n          )}\n        </>\n      )}\n      {query.metricQueryType === MetricQueryType.Query && (\n        <>\n          {query.metricEditorMode === MetricEditorMode.Code && (\n            <SQLCodeEditor\n              region={query.region}\n              sql={query.sqlExpression ?? ''}\n              onChange={(sqlExpression) => {\n                if (!sqlCodeEditorIsDirty) {\n                  setSQLCodeEditorIsDirty(true);\n                }\n                props.onChange({ ...preparedQuery, sqlExpression });\n              }}\n              onRunQuery={onRunQuery}\n              datasource={datasource}\n            />\n          )}\n\n          {query.metricEditorMode === MetricEditorMode.Builder && (\n            <>\n              <SQLBuilderEditor\n                query={query}\n                onChange={props.onChange}\n                onRunQuery={onRunQuery}\n                datasource={datasource}\n              ></SQLBuilderEditor>\n            </>\n          )}\n        </>\n      )}\n      <Space v={0.5} />\n      <EditorRow>\n        <EditorField\n          label=\"ID\"\n          width={26}\n          optional\n          tooltip=\"ID can be used to reference other queries in math expressions. The ID can include numbers, letters, and underscore, and must start with a lowercase letter.\"\n          invalid={!!query.id && !/^$|^[a-z][a-zA-Z0-9_]*$/.test(query.id)}\n        >\n          <Input\n            id={`${query.refId}-cloudwatch-metric-query-editor-id`}\n            onBlur={onRunQuery}\n            onChange={(event: ChangeEvent<HTMLInputElement>) => onChange({ ...preparedQuery, id: event.target.value })}\n            type=\"text\"\n            value={query.id}\n          />\n        </EditorField>\n\n        <EditorField label=\"Period\" width={26} tooltip=\"Minimum interval between points in seconds.\">\n          <Input\n            id={`${query.refId}-cloudwatch-metric-query-editor-period`}\n            value={query.period || ''}\n            placeholder=\"auto\"\n            onBlur={onRunQuery}\n            onChange={(event: ChangeEvent<HTMLInputElement>) =>\n              onChange({ ...preparedQuery, period: event.target.value })\n            }\n          />\n        </EditorField>\n\n        {config.featureToggles.cloudWatchDynamicLabels ? (\n          <EditorField\n            label=\"Label\"\n            width={26}\n            optional\n            tooltip=\"Change time series legend name using Dynamic labels. See documentation for details.\"\n          >\n            <DynamicLabelsField\n              width={52}\n              onRunQuery={onRunQuery}\n              label={preparedQuery.label ?? ''}\n              onChange={(label) => props.onChange({ ...query, label })}\n            ></DynamicLabelsField>\n          </EditorField>\n        ) : (\n          <EditorField\n            label=\"Alias\"\n            width={26}\n            optional\n            tooltip=\"Change time series legend name using this field. See documentation for replacement variable formats.\"\n          >\n            <Alias\n              id={`${query.refId}-cloudwatch-metric-query-editor-alias`}\n              value={preparedQuery.alias ?? ''}\n              onChange={(value: string) => onChange({ ...preparedQuery, alias: value })}\n            />\n          </EditorField>\n        )}\n      </EditorRow>\n    </>\n  );\n};\n","import React, { PureComponent } from 'react';\n\nimport { QueryEditorProps } from '@grafana/data';\n\nimport { CloudWatchDatasource } from '../datasource';\nimport { isCloudWatchLogsQuery, isCloudWatchMetricsQuery } from '../guards';\nimport { CloudWatchJsonData, CloudWatchQuery } from '../types';\n\nimport { MetricsQueryEditor } from '././MetricsQueryEditor/MetricsQueryEditor';\nimport LogsQueryEditor from './LogsQueryEditor';\n\nexport type Props = QueryEditorProps<CloudWatchDatasource, CloudWatchQuery, CloudWatchJsonData>;\n\nexport class PanelQueryEditor extends PureComponent<Props> {\n  render() {\n    const { query } = this.props;\n\n    return (\n      <>\n        {isCloudWatchMetricsQuery(query) && <MetricsQueryEditor {...this.props} query={query} />}\n        {isCloudWatchLogsQuery(query) && <LogsQueryEditor {...this.props} query={query} />}\n      </>\n    );\n  }\n}\n","import React, { ChangeEvent } from 'react';\n\nimport { QueryEditorProps } from '@grafana/data';\nimport { EditorField, EditorHeader, EditorRow, InlineSelect, Space, EditorSwitch } from '@grafana/experimental';\nimport { Alert, Input } from '@grafana/ui';\n\nimport { CloudWatchDatasource } from '../datasource';\nimport { isCloudWatchAnnotationQuery } from '../guards';\nimport { useRegions } from '../hooks';\nimport { CloudWatchJsonData, CloudWatchQuery, MetricStat } from '../types';\n\nimport { MetricStatEditor } from './MetricStatEditor';\n\nexport type Props = QueryEditorProps<CloudWatchDatasource, CloudWatchQuery, CloudWatchJsonData>;\n\nexport const AnnotationQueryEditor = (props: Props) => {\n  const { query, onChange, datasource } = props;\n  const [regions, regionIsLoading] = useRegions(datasource);\n\n  if (!isCloudWatchAnnotationQuery(query)) {\n    return (\n      <Alert severity=\"error\" title=\"Invalid annotation query\" topSpacing={2}>\n        {JSON.stringify(query, null, 4)}\n      </Alert>\n    );\n  }\n\n  return (\n    <>\n      <EditorHeader>\n        <InlineSelect\n          label=\"Region\"\n          value={regions.find((v) => v.value === query.region)}\n          placeholder=\"Select region\"\n          allowCustomValue\n          onChange={({ value: region }) => region && onChange({ ...query, region })}\n          options={regions}\n          isLoading={regionIsLoading}\n        />\n      </EditorHeader>\n      <Space v={0.5} />\n      <MetricStatEditor\n        {...props}\n        refId={query.refId}\n        metricStat={query}\n        disableExpressions={true}\n        onChange={(metricStat: MetricStat) => onChange({ ...query, ...metricStat })}\n        onRunQuery={() => {}}\n      ></MetricStatEditor>\n      <Space v={0.5} />\n      <EditorRow>\n        <EditorField label=\"Period\" width={26} tooltip=\"Minimum interval between points in seconds.\">\n          <Input\n            value={query.period || ''}\n            placeholder=\"auto\"\n            onChange={(event: ChangeEvent<HTMLInputElement>) => onChange({ ...query, period: event.target.value })}\n          />\n        </EditorField>\n        <EditorField label=\"Enable Prefix Matching\" optional={true}>\n          <EditorSwitch\n            value={query.prefixMatching}\n            onChange={(e) => {\n              onChange({\n                ...query,\n                prefixMatching: e.currentTarget.checked,\n              });\n            }}\n          />\n        </EditorField>\n        <EditorField label=\"Action\" optional={true} disabled={!query.prefixMatching}>\n          <Input\n            value={query.actionPrefix || ''}\n            onChange={(event: ChangeEvent<HTMLInputElement>) =>\n              onChange({ ...query, actionPrefix: event.target.value })\n            }\n          />\n        </EditorField>\n        <EditorField label=\"Alarm Name\" optional={true} disabled={!query.prefixMatching}>\n          <Input\n            value={query.alarmNamePrefix || ''}\n            onChange={(event: ChangeEvent<HTMLInputElement>) =>\n              onChange({ ...query, alarmNamePrefix: event.target.value })\n            }\n          />\n        </EditorField>\n      </EditorRow>\n    </>\n  );\n};\n","import { AnnotationQuery } from '@grafana/data';\n\nimport { AnnotationQueryEditor } from './components/AnnotationQueryEditor';\nimport { isCloudWatchAnnotation } from './guards';\nimport { CloudWatchAnnotationQuery, CloudWatchQuery, LegacyAnnotationQuery } from './types';\n\nexport const CloudWatchAnnotationSupport = {\n  // converts legacy angular style queries to new format. Also sets the same default values as in the deprecated angular directive\n  prepareAnnotation: (\n    query: LegacyAnnotationQuery | AnnotationQuery<CloudWatchAnnotationQuery>\n  ): AnnotationQuery<CloudWatchAnnotationQuery> => {\n    if (isCloudWatchAnnotation(query)) {\n      return query;\n    }\n\n    return {\n      // setting AnnotationQuery props explicitly since spreading would incorrectly use props that should be on the target only\n      datasource: query.datasource,\n      enable: query.enable,\n      iconColor: query.iconColor,\n      name: query.name,\n      builtIn: query.builtIn,\n      hide: query.hide,\n      target: {\n        ...query.target,\n        ...query,\n        statistic: query.statistic || 'Average',\n        region: query.region || 'default',\n        queryMode: 'Annotations',\n        refId: query.refId || 'annotationQuery',\n      },\n    };\n  },\n  // return undefined if query is not complete so that annotation query execution is quietly skipped\n  prepareQuery: (anno: AnnotationQuery<CloudWatchAnnotationQuery>): CloudWatchQuery | undefined => {\n    if (!anno.target) {\n      return undefined;\n    }\n\n    const {\n      prefixMatching,\n      actionPrefix,\n      alarmNamePrefix,\n      statistic,\n      namespace,\n      metricName,\n      dimensions = {},\n    } = anno.target;\n    const validPrefixMatchingQuery = !!prefixMatching && !!actionPrefix && !!alarmNamePrefix;\n    const validMetricStatQuery =\n      !prefixMatching && !!namespace && !!metricName && !!statistic && !!Object.values(dimensions).length;\n\n    if (validPrefixMatchingQuery || validMetricStatQuery) {\n      return anno.target;\n    }\n\n    return undefined;\n  },\n  QueryEditor: AnnotationQueryEditor,\n};\n","import { getTemplateSrv, TemplateSrv } from '@grafana/runtime';\nimport type { Monaco, monacoTypes } from '@grafana/ui';\n\nimport { CloudWatchDatasource } from '../datasource';\n\nimport { LinkedToken } from './LinkedToken';\nimport { linkedTokenBuilder } from './linkedTokenBuilder';\nimport { LanguageDefinition } from './register';\nimport { Completeable, StatementPosition, SuggestionKind, TokenTypes } from './types';\n\ntype CompletionItem = monacoTypes.languages.CompletionItem;\n\n/*\nCompletionItemProvider is an extendable class which needs to implement :\n- tokenTypes\n- getStatementPosition\n- getSuggestionKinds\n- getSuggestions\n*/\nexport class CompletionItemProvider implements Completeable {\n  templateVariables: string[];\n  datasource: CloudWatchDatasource;\n  templateSrv: TemplateSrv;\n  tokenTypes: TokenTypes;\n\n  constructor(datasource: CloudWatchDatasource, templateSrv: TemplateSrv = getTemplateSrv()) {\n    this.datasource = datasource;\n    this.templateSrv = templateSrv;\n    this.templateVariables = this.datasource.getVariables();\n    this.templateSrv = templateSrv;\n\n    // implement with more specific tokens when extending this class\n    this.tokenTypes = {\n      Parenthesis: 'delimiter.parenthesis',\n      Whitespace: 'white',\n      Keyword: 'keyword',\n      Delimiter: 'delimiter',\n      Operator: 'operator',\n      Identifier: 'identifier',\n      Type: 'type',\n      Function: 'predefined',\n      Number: 'number',\n      String: 'string',\n      Variable: 'variable',\n    };\n  }\n\n  // implemented by subclasses, given a token, returns a lexical position in a query\n  getStatementPosition(currentToken: LinkedToken | null): StatementPosition {\n    return StatementPosition.Unknown;\n  }\n\n  // implemented by subclasses, given a lexical statement position, returns potential kinds of suggestions\n  getSuggestionKinds(position: StatementPosition): SuggestionKind[] {\n    return [];\n  }\n\n  // implemented by subclasses, given potential suggestions kinds, returns suggestion objects for monaco aka \"CompletionItem\"\n  getSuggestions(\n    monaco: Monaco,\n    currentToken: LinkedToken | null,\n    suggestionKinds: SuggestionKind[],\n    statementPosition: StatementPosition,\n    position: monacoTypes.IPosition\n  ): Promise<CompletionItem[]> {\n    return Promise.reject([]);\n  }\n\n  // called by registerLanguage and passed to monaco with registerCompletionItemProvider\n  // returns an object that implements https://microsoft.github.io/monaco-editor/api/interfaces/monaco.languages.CompletionItemProvider.html\n  getCompletionProvider(monaco: Monaco, languageDefinition: LanguageDefinition) {\n    return {\n      triggerCharacters: [' ', '$', ',', '(', \"'\"], // one of these characters indicates that it is time to look for a suggestion\n      provideCompletionItems: async (model: monacoTypes.editor.ITextModel, position: monacoTypes.IPosition) => {\n        const currentToken = linkedTokenBuilder(monaco, languageDefinition, model, position, this.tokenTypes);\n        const statementPosition = this.getStatementPosition(currentToken);\n        const suggestionKinds = this.getSuggestionKinds(statementPosition);\n        const suggestions = await this.getSuggestions(\n          monaco,\n          currentToken,\n          suggestionKinds,\n          statementPosition,\n          position\n        );\n\n        return {\n          suggestions,\n        };\n      },\n    };\n  }\n}\n","import { TokenTypes } from '../../monarch/types';\n\nexport const SQLTokenTypes: TokenTypes = {\n  Parenthesis: 'delimiter.parenthesis.sql',\n  Whitespace: 'white.sql',\n  Keyword: 'keyword.sql',\n  Delimiter: 'delimiter.sql',\n  Operator: 'operator.sql',\n  Identifier: 'identifier.sql',\n  Type: 'type.sql',\n  Function: 'predefined.sql',\n  Number: 'number.sql',\n  String: 'string.sql',\n  Variable: 'variable.sql',\n};\n","import { LinkedToken } from '../../monarch/LinkedToken';\nimport { StatementPosition } from '../../monarch/types';\nimport { AND, ASC, BY, DESC, EQUALS, FROM, GROUP, NOT_EQUALS, ORDER, SCHEMA, SELECT, WHERE } from '../language';\n\nimport { SQLTokenTypes } from './types';\n\nexport function getStatementPosition(currentToken: LinkedToken | null): StatementPosition {\n  const previousNonWhiteSpace = currentToken?.getPreviousNonWhiteSpaceToken();\n  const previousKeyword = currentToken?.getPreviousKeyword();\n\n  const previousIsSlash = currentToken?.getPreviousNonWhiteSpaceToken()?.is(SQLTokenTypes.Operator, '/');\n  if (\n    currentToken === null ||\n    (currentToken.isWhiteSpace() && currentToken.previous === null) ||\n    (currentToken.is(SQLTokenTypes.Keyword, SELECT) && currentToken.previous === null) ||\n    previousIsSlash ||\n    (currentToken.isIdentifier() && (previousIsSlash || currentToken?.previous === null))\n  ) {\n    return StatementPosition.SelectKeyword;\n  }\n\n  if (previousNonWhiteSpace?.value === SELECT) {\n    return StatementPosition.AfterSelectKeyword;\n  }\n\n  if (\n    (previousNonWhiteSpace?.is(SQLTokenTypes.Parenthesis, '(') || currentToken?.is(SQLTokenTypes.Parenthesis, '()')) &&\n    previousKeyword?.value === SELECT\n  ) {\n    return StatementPosition.AfterSelectFuncFirstArgument;\n  }\n\n  if (previousKeyword?.value === SELECT && previousNonWhiteSpace?.isParenthesis()) {\n    return StatementPosition.FromKeyword;\n  }\n\n  if (previousNonWhiteSpace?.value === FROM) {\n    return StatementPosition.AfterFromKeyword;\n  }\n\n  if (\n    (previousNonWhiteSpace?.is(SQLTokenTypes.Parenthesis, '(') || currentToken?.is(SQLTokenTypes.Parenthesis, '()')) &&\n    previousKeyword?.value === SCHEMA\n  ) {\n    return StatementPosition.SchemaFuncFirstArgument;\n  }\n\n  if (previousKeyword?.value === SCHEMA && previousNonWhiteSpace?.is(SQLTokenTypes.Delimiter, ',')) {\n    return StatementPosition.SchemaFuncExtraArgument;\n  }\n\n  if (\n    (previousKeyword?.value === FROM && previousNonWhiteSpace?.isDoubleQuotedString()) ||\n    (previousKeyword?.value === FROM && previousNonWhiteSpace?.isVariable()) ||\n    (previousKeyword?.value === SCHEMA && previousNonWhiteSpace?.is(SQLTokenTypes.Parenthesis, ')'))\n  ) {\n    return StatementPosition.AfterFrom;\n  }\n\n  if (\n    previousKeyword?.value === WHERE &&\n    (previousNonWhiteSpace?.isKeyword() ||\n      previousNonWhiteSpace?.is(SQLTokenTypes.Parenthesis, '(') ||\n      previousNonWhiteSpace?.is(SQLTokenTypes.Operator, AND))\n  ) {\n    return StatementPosition.WhereKey;\n  }\n\n  if (\n    previousKeyword?.value === WHERE &&\n    (previousNonWhiteSpace?.isIdentifier() || previousNonWhiteSpace?.isDoubleQuotedString())\n  ) {\n    return StatementPosition.WhereComparisonOperator;\n  }\n\n  if (\n    previousKeyword?.value === WHERE &&\n    (previousNonWhiteSpace?.is(SQLTokenTypes.Operator, EQUALS) ||\n      previousNonWhiteSpace?.is(SQLTokenTypes.Operator, NOT_EQUALS))\n  ) {\n    return StatementPosition.WhereValue;\n  }\n\n  if (\n    previousKeyword?.value === WHERE &&\n    (previousNonWhiteSpace?.isString() || previousNonWhiteSpace?.is(SQLTokenTypes.Parenthesis, ')'))\n  ) {\n    return StatementPosition.AfterWhereValue;\n  }\n\n  if (\n    previousKeyword?.is(SQLTokenTypes.Keyword, BY) &&\n    previousKeyword?.getPreviousKeyword()?.is(SQLTokenTypes.Keyword, GROUP) &&\n    (previousNonWhiteSpace?.is(SQLTokenTypes.Keyword, BY) || previousNonWhiteSpace?.is(SQLTokenTypes.Delimiter, ','))\n  ) {\n    return StatementPosition.AfterGroupByKeywords;\n  }\n\n  if (\n    previousKeyword?.is(SQLTokenTypes.Keyword, BY) &&\n    previousKeyword?.getPreviousKeyword()?.is(SQLTokenTypes.Keyword, GROUP) &&\n    (previousNonWhiteSpace?.isIdentifier() || previousNonWhiteSpace?.isDoubleQuotedString())\n  ) {\n    return StatementPosition.AfterGroupBy;\n  }\n\n  if (\n    previousNonWhiteSpace?.is(SQLTokenTypes.Keyword, BY) &&\n    previousNonWhiteSpace?.getPreviousKeyword()?.is(SQLTokenTypes.Keyword, ORDER)\n  ) {\n    return StatementPosition.AfterOrderByKeywords;\n  }\n\n  if (\n    previousKeyword?.is(SQLTokenTypes.Keyword, BY) &&\n    previousKeyword?.getPreviousKeyword()?.is(SQLTokenTypes.Keyword, ORDER) &&\n    previousNonWhiteSpace?.is(SQLTokenTypes.Parenthesis) &&\n    previousNonWhiteSpace?.getPreviousNonWhiteSpaceToken()?.is(SQLTokenTypes.Function)\n  ) {\n    return StatementPosition.AfterOrderByFunction;\n  }\n\n  if (previousKeyword?.is(SQLTokenTypes.Keyword, DESC) || previousKeyword?.is(SQLTokenTypes.Keyword, ASC)) {\n    return StatementPosition.AfterOrderByDirection;\n  }\n\n  return StatementPosition.Unknown;\n}\n","import { StatementPosition, SuggestionKind } from '../../monarch/types';\n\nexport function getSuggestionKinds(statementPosition: StatementPosition): SuggestionKind[] {\n  switch (statementPosition) {\n    case StatementPosition.SelectKeyword:\n      return [SuggestionKind.SelectKeyword];\n    case StatementPosition.AfterSelectKeyword:\n      return [SuggestionKind.FunctionsWithArguments];\n    case StatementPosition.AfterSelectFuncFirstArgument:\n      return [SuggestionKind.Metrics];\n    case StatementPosition.AfterFromKeyword:\n      return [SuggestionKind.Namespaces, SuggestionKind.SchemaKeyword];\n    case StatementPosition.SchemaFuncFirstArgument:\n      return [SuggestionKind.Namespaces];\n    case StatementPosition.SchemaFuncExtraArgument:\n      return [SuggestionKind.LabelKeys];\n    case StatementPosition.FromKeyword:\n      return [SuggestionKind.FromKeyword];\n    case StatementPosition.AfterFrom:\n      return [\n        SuggestionKind.WhereKeyword,\n        SuggestionKind.GroupByKeywords,\n        SuggestionKind.OrderByKeywords,\n        SuggestionKind.LimitKeyword,\n      ];\n    case StatementPosition.WhereKey:\n      return [SuggestionKind.LabelKeys];\n    case StatementPosition.WhereComparisonOperator:\n      return [SuggestionKind.ComparisonOperators];\n    case StatementPosition.WhereValue:\n      return [SuggestionKind.LabelValues];\n    case StatementPosition.AfterWhereValue:\n      return [\n        SuggestionKind.LogicalOperators,\n        SuggestionKind.GroupByKeywords,\n        SuggestionKind.OrderByKeywords,\n        SuggestionKind.LimitKeyword,\n      ];\n    case StatementPosition.AfterGroupByKeywords:\n      return [SuggestionKind.LabelKeys];\n    case StatementPosition.AfterGroupBy:\n      return [SuggestionKind.OrderByKeywords, SuggestionKind.LimitKeyword];\n    case StatementPosition.AfterOrderByKeywords:\n      return [SuggestionKind.FunctionsWithoutArguments];\n    case StatementPosition.AfterOrderByFunction:\n      return [SuggestionKind.SortOrderDirectionKeyword, SuggestionKind.LimitKeyword];\n    case StatementPosition.AfterOrderByDirection:\n      return [SuggestionKind.LimitKeyword];\n  }\n\n  return [];\n}\n","import { LinkedToken } from '../../monarch/LinkedToken';\nimport { FROM, SCHEMA, SELECT } from '../language';\n\nimport { SQLTokenTypes } from './types';\n\nexport const getSelectToken = (currentToken: LinkedToken | null) =>\n  currentToken?.getPreviousOfType(SQLTokenTypes.Keyword, SELECT) ?? null;\n\nexport const getSelectStatisticToken = (currentToken: LinkedToken | null) => {\n  const assumedStatisticToken = getSelectToken(currentToken)?.getNextNonWhiteSpaceToken();\n  return assumedStatisticToken?.isVariable() || assumedStatisticToken?.isFunction() ? assumedStatisticToken : null;\n};\n\nexport const getMetricNameToken = (currentToken: LinkedToken | null) => {\n  // statistic function is followed by `(` and then an argument\n  const assumedMetricNameToken = getSelectStatisticToken(currentToken)?.next?.next;\n  return assumedMetricNameToken?.isVariable() || assumedMetricNameToken?.isIdentifier() ? assumedMetricNameToken : null;\n};\n\nexport const getFromKeywordToken = (currentToken: LinkedToken | null) => {\n  const selectToken = getSelectToken(currentToken);\n  return selectToken?.getNextOfType(SQLTokenTypes.Keyword, FROM);\n};\n\nexport const getNamespaceToken = (currentToken: LinkedToken | null) => {\n  const fromToken = getFromKeywordToken(currentToken);\n  const nextNonWhiteSpace = fromToken?.getNextNonWhiteSpaceToken();\n  if (\n    nextNonWhiteSpace?.isDoubleQuotedString() ||\n    (nextNonWhiteSpace?.isVariable() && nextNonWhiteSpace?.value.toUpperCase() !== SCHEMA)\n  ) {\n    // schema is not used\n    return nextNonWhiteSpace;\n  } else if (nextNonWhiteSpace?.isKeyword() && nextNonWhiteSpace.next?.is(SQLTokenTypes.Parenthesis, '(')) {\n    // schema is specified\n    const assumedNamespaceToken = nextNonWhiteSpace.next?.next;\n    if (assumedNamespaceToken?.isDoubleQuotedString() || assumedNamespaceToken?.isVariable()) {\n      return assumedNamespaceToken;\n    }\n  }\n  return null;\n};\n","import { uniq } from 'lodash';\n\nimport { getTemplateSrv, TemplateSrv } from '@grafana/runtime';\nimport type { Monaco, monacoTypes } from '@grafana/ui';\n\nimport { CloudWatchDatasource } from '../../datasource';\nimport { CompletionItemProvider } from '../../monarch/CompletionItemProvider';\nimport { LinkedToken } from '../../monarch/LinkedToken';\nimport { TRIGGER_SUGGEST } from '../../monarch/commands';\nimport { SuggestionKind, CompletionItemPriority, StatementPosition } from '../../monarch/types';\nimport {\n  BY,\n  FROM,\n  GROUP,\n  LIMIT,\n  ORDER,\n  SCHEMA,\n  SELECT,\n  ASC,\n  DESC,\n  WHERE,\n  COMPARISON_OPERATORS,\n  LOGICAL_OPERATORS,\n  STATISTICS,\n} from '../language';\n\nimport { getStatementPosition } from './statementPosition';\nimport { getSuggestionKinds } from './suggestionKind';\nimport { getMetricNameToken, getNamespaceToken } from './tokenUtils';\nimport { SQLTokenTypes } from './types';\n\ntype CompletionItem = monacoTypes.languages.CompletionItem;\n\nexport class SQLCompletionItemProvider extends CompletionItemProvider {\n  region: string;\n\n  constructor(datasource: CloudWatchDatasource, templateSrv: TemplateSrv = getTemplateSrv()) {\n    super(datasource, templateSrv);\n    this.region = datasource.getActualRegion();\n    this.getStatementPosition = getStatementPosition;\n    this.getSuggestionKinds = getSuggestionKinds;\n    this.tokenTypes = SQLTokenTypes;\n  }\n\n  setRegion(region: string) {\n    this.region = region;\n  }\n\n  async getSuggestions(\n    monaco: Monaco,\n    currentToken: LinkedToken | null,\n    suggestionKinds: SuggestionKind[],\n    statementPosition: StatementPosition,\n    position: monacoTypes.IPosition\n  ): Promise<CompletionItem[]> {\n    let suggestions: CompletionItem[] = [];\n    const invalidRangeToken = currentToken?.isWhiteSpace() || currentToken?.isParenthesis();\n    const range =\n      invalidRangeToken || !currentToken?.range ? monaco.Range.fromPositions(position) : currentToken?.range;\n\n    const toCompletionItem = (value: string, rest: Partial<CompletionItem> = {}) => {\n      const item: CompletionItem = {\n        label: value,\n        insertText: value,\n        kind: monaco.languages.CompletionItemKind.Field,\n        range,\n        sortText: CompletionItemPriority.Medium,\n        ...rest,\n      };\n      return item;\n    };\n\n    function addSuggestion(value: string, rest: Partial<CompletionItem> = {}) {\n      suggestions = [...suggestions, toCompletionItem(value, rest)];\n    }\n\n    for (const suggestion of suggestionKinds) {\n      switch (suggestion) {\n        case SuggestionKind.SelectKeyword:\n          addSuggestion(SELECT, {\n            insertText: `${SELECT} $0`,\n            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n            kind: monaco.languages.CompletionItemKind.Keyword,\n            command: TRIGGER_SUGGEST,\n          });\n          break;\n\n        case SuggestionKind.FunctionsWithArguments:\n          STATISTICS.map((s) =>\n            addSuggestion(s, {\n              insertText: `${s}($0)`,\n              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n              command: TRIGGER_SUGGEST,\n              kind: monaco.languages.CompletionItemKind.Function,\n            })\n          );\n          break;\n\n        case SuggestionKind.FunctionsWithoutArguments:\n          STATISTICS.map((s) =>\n            addSuggestion(s, {\n              insertText: `${s}() `,\n              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n              command: TRIGGER_SUGGEST,\n              kind: monaco.languages.CompletionItemKind.Function,\n            })\n          );\n          break;\n\n        case SuggestionKind.Metrics:\n          {\n            const namespaceToken = getNamespaceToken(currentToken);\n            if (namespaceToken?.value) {\n              // if a namespace is specified, only suggest metrics for the namespace\n              const metrics = await this.datasource.getMetrics(\n                this.templateSrv.replace(namespaceToken?.value.replace(/\\\"/g, '')),\n                this.templateSrv.replace(this.region)\n              );\n              metrics.map((m) => addSuggestion(m.value));\n            } else {\n              // If no namespace is specified in the query, just list all metrics\n              const metrics = await this.datasource.getAllMetrics(this.templateSrv.replace(this.region));\n              uniq(metrics.map((m) => m.metricName)).map((m) => addSuggestion(m, { insertText: m }));\n            }\n          }\n          break;\n\n        case SuggestionKind.FromKeyword:\n          addSuggestion(FROM, {\n            insertText: `${FROM} `,\n            command: TRIGGER_SUGGEST,\n          });\n          break;\n\n        case SuggestionKind.SchemaKeyword:\n          addSuggestion(SCHEMA, {\n            sortText: CompletionItemPriority.High,\n            insertText: `${SCHEMA}($0)`,\n            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n            command: TRIGGER_SUGGEST,\n            kind: monaco.languages.CompletionItemKind.Function,\n          });\n          break;\n\n        case SuggestionKind.Namespaces:\n          const metricNameToken = getMetricNameToken(currentToken);\n          let namespaces = [];\n          if (metricNameToken?.value) {\n            // if a metric is specified, only suggest namespaces that actually have that metric\n            const metrics = await this.datasource.getAllMetrics(this.region);\n            const metricName = this.templateSrv.replace(metricNameToken.value);\n            namespaces = metrics.filter((m) => m.metricName === metricName).map((m) => m.namespace);\n          } else {\n            // if no metric is specified, just suggest all namespaces\n            const ns = await this.datasource.getNamespaces();\n            namespaces = ns.map((n) => n.value);\n          }\n          namespaces.map((n) => addSuggestion(`\"${n}\"`, { insertText: `\"${n}\"` }));\n          break;\n\n        case SuggestionKind.LabelKeys:\n          {\n            const metricNameToken = getMetricNameToken(currentToken);\n            const namespaceToken = getNamespaceToken(currentToken);\n            if (namespaceToken?.value) {\n              let dimensionFilter = {};\n              let labelKeyTokens;\n              if (statementPosition === StatementPosition.SchemaFuncExtraArgument) {\n                labelKeyTokens = namespaceToken?.getNextUntil(this.tokenTypes.Parenthesis, [\n                  this.tokenTypes.Delimiter,\n                  this.tokenTypes.Whitespace,\n                ]);\n              } else if (statementPosition === StatementPosition.AfterGroupByKeywords) {\n                labelKeyTokens = currentToken?.getPreviousUntil(this.tokenTypes.Keyword, [\n                  this.tokenTypes.Delimiter,\n                  this.tokenTypes.Whitespace,\n                ]);\n              }\n              dimensionFilter = (labelKeyTokens || []).reduce((acc, curr) => {\n                return { ...acc, [curr.value]: null };\n              }, {});\n              const keys = await this.datasource.getDimensionKeys(\n                this.templateSrv.replace(namespaceToken.value.replace(/\\\"/g, '')),\n                this.templateSrv.replace(this.region),\n                dimensionFilter,\n                metricNameToken?.value ?? ''\n              );\n              keys.map((m) => {\n                const key = /[\\s\\.-]/.test(m.value) ? `\"${m.value}\"` : m.value;\n                addSuggestion(key);\n              });\n            }\n          }\n          break;\n\n        case SuggestionKind.LabelValues:\n          {\n            const namespaceToken = getNamespaceToken(currentToken);\n            const metricNameToken = getMetricNameToken(currentToken);\n            const labelKey = currentToken?.getPreviousNonWhiteSpaceToken()?.getPreviousNonWhiteSpaceToken();\n            if (namespaceToken?.value && labelKey?.value && metricNameToken?.value) {\n              const values = await this.datasource.getDimensionValues(\n                this.templateSrv.replace(this.region),\n                this.templateSrv.replace(namespaceToken.value.replace(/\\\"/g, '')),\n                this.templateSrv.replace(metricNameToken.value),\n                this.templateSrv.replace(labelKey.value),\n                {}\n              );\n              values.map((o) =>\n                addSuggestion(`'${o.value}'`, { insertText: `'${o.value}' `, command: TRIGGER_SUGGEST })\n              );\n            }\n          }\n          break;\n\n        case SuggestionKind.LogicalOperators:\n          LOGICAL_OPERATORS.map((o) =>\n            addSuggestion(`${o}`, {\n              insertText: `${o} `,\n              command: TRIGGER_SUGGEST,\n              sortText: CompletionItemPriority.MediumHigh,\n            })\n          );\n          break;\n\n        case SuggestionKind.WhereKeyword:\n          addSuggestion(`${WHERE}`, {\n            insertText: `${WHERE} `,\n            command: TRIGGER_SUGGEST,\n            sortText: CompletionItemPriority.High,\n          });\n          break;\n\n        case SuggestionKind.ComparisonOperators:\n          COMPARISON_OPERATORS.map((o) => addSuggestion(`${o}`, { insertText: `${o} `, command: TRIGGER_SUGGEST }));\n          break;\n\n        case SuggestionKind.GroupByKeywords:\n          addSuggestion(`${GROUP} ${BY}`, {\n            insertText: `${GROUP} ${BY} `,\n            command: TRIGGER_SUGGEST,\n            sortText: CompletionItemPriority.MediumHigh,\n          });\n          break;\n\n        case SuggestionKind.OrderByKeywords:\n          addSuggestion(`${ORDER} ${BY}`, {\n            insertText: `${ORDER} ${BY} `,\n            command: TRIGGER_SUGGEST,\n            sortText: CompletionItemPriority.Medium,\n          });\n          break;\n\n        case SuggestionKind.LimitKeyword:\n          addSuggestion(LIMIT, { insertText: `${LIMIT} `, sortText: CompletionItemPriority.MediumLow });\n          break;\n\n        case SuggestionKind.SortOrderDirectionKeyword:\n          [ASC, DESC].map((s) =>\n            addSuggestion(s, {\n              insertText: `${s} `,\n              command: TRIGGER_SUGGEST,\n            })\n          );\n          break;\n      }\n    }\n\n    // always suggest template variables\n    this.templateVariables.map((v) => {\n      addSuggestion(v, {\n        range,\n        label: v,\n        insertText: v,\n        kind: monaco.languages.CompletionItemKind.Variable,\n        sortText: CompletionItemPriority.Low,\n      });\n    });\n\n    return suggestions;\n  }\n}\n","import React, { FunctionComponent } from 'react';\n\nexport interface Props {\n  region: string;\n}\n\nexport const ThrottlingErrorMessage: FunctionComponent<Props> = ({ region }) => (\n  <p>\n    Please visit the&nbsp;\n    <a\n      target=\"_blank\"\n      rel=\"noreferrer\"\n      className=\"text-link\"\n      href={`https://${region}.console.aws.amazon.com/servicequotas/home?region=${region}#!/services/monitoring/quotas/L-5E141212`}\n    >\n      AWS Service Quotas console\n    </a>\n    &nbsp;to request a quota increase or see our&nbsp;\n    <a\n      target=\"_blank\"\n      rel=\"noreferrer\"\n      className=\"text-link\"\n      href=\"https://grafana.com/docs/grafana/latest/datasources/cloudwatch/#service-quotas\"\n    >\n      documentation\n    </a>\n    &nbsp;to learn more.\n  </p>\n);\n","import { sortedUniq } from 'lodash';\nimport Prism, { Grammar } from 'prismjs';\nimport { lastValueFrom } from 'rxjs';\n\nimport { AbsoluteTimeRange, HistoryItem, LanguageProvider } from '@grafana/data';\nimport { CompletionItemGroup, SearchFunctionType, Token, TypeaheadInput, TypeaheadOutput } from '@grafana/ui';\n\nimport { CloudWatchDatasource } from './datasource';\nimport syntax, {\n  AGGREGATION_FUNCTIONS_STATS,\n  BOOLEAN_FUNCTIONS,\n  DATETIME_FUNCTIONS,\n  FIELD_AND_FILTER_FUNCTIONS,\n  IP_FUNCTIONS,\n  NUMERIC_OPERATORS,\n  QUERY_COMMANDS,\n  STRING_FUNCTIONS,\n} from './syntax';\nimport { CloudWatchQuery, TSDBResponse } from './types';\n\nexport type CloudWatchHistoryItem = HistoryItem<CloudWatchQuery>;\n\ntype TypeaheadContext = {\n  history?: CloudWatchHistoryItem[];\n  absoluteRange?: AbsoluteTimeRange;\n  logGroupNames?: string[];\n  region: string;\n};\n\nexport class CloudWatchLanguageProvider extends LanguageProvider {\n  started = false;\n  declare initialRange: AbsoluteTimeRange;\n  datasource: CloudWatchDatasource;\n\n  constructor(datasource: CloudWatchDatasource, initialValues?: any) {\n    super();\n\n    this.datasource = datasource;\n\n    Object.assign(this, initialValues);\n  }\n\n  // Strip syntax chars\n  cleanText = (s: string) => s.replace(/[()]/g, '').trim();\n\n  getSyntax(): Grammar {\n    return syntax;\n  }\n\n  request = (url: string, params?: any): Promise<TSDBResponse> => {\n    return lastValueFrom(this.datasource.awsRequest(url, params));\n  };\n\n  start = () => {\n    if (!this.startTask) {\n      this.startTask = Promise.resolve().then(() => {\n        this.started = true;\n        return [];\n      });\n    }\n\n    return this.startTask;\n  };\n\n  isStatsQuery(query: string): boolean {\n    const grammar = this.getSyntax();\n    const tokens = Prism.tokenize(query, grammar) ?? [];\n\n    return !!tokens.find(\n      (token) =>\n        typeof token !== 'string' &&\n        token.content.toString().toLowerCase() === 'stats' &&\n        token.type === 'query-command'\n    );\n  }\n\n  /**\n   * Return suggestions based on input that can be then plugged into a typeahead dropdown.\n   * Keep this DOM-free for testing\n   * @param input\n   * @param context Is optional in types but is required in case we are doing getLabelCompletionItems\n   * @param context.absoluteRange Required in case we are doing getLabelCompletionItems\n   * @param context.history Optional used only in getEmptyCompletionItems\n   */\n  async provideCompletionItems(input: TypeaheadInput, context?: TypeaheadContext): Promise<TypeaheadOutput> {\n    const { value } = input;\n\n    // Get tokens\n    const tokens = value?.data.get('tokens');\n\n    if (!tokens || !tokens.length) {\n      return { suggestions: [] };\n    }\n\n    const curToken: Token = tokens.filter(\n      (token: any) =>\n        token.offsets.start <= value!.selection?.start?.offset && token.offsets.end >= value!.selection?.start?.offset\n    )[0];\n\n    const isFirstToken = !curToken.prev;\n    const prevToken = prevNonWhitespaceToken(curToken);\n\n    const isCommandStart = isFirstToken || (!isFirstToken && prevToken?.types.includes('command-separator'));\n    if (isCommandStart) {\n      return this.getCommandCompletionItems();\n    }\n\n    if (isInsideFunctionParenthesis(curToken)) {\n      return await this.getFieldCompletionItems(context?.logGroupNames ?? [], context?.region || 'default');\n    }\n\n    if (isAfterKeyword('by', curToken)) {\n      return this.handleKeyword(context);\n    }\n\n    if (prevToken?.types.includes('comparison-operator')) {\n      return this.handleComparison(context);\n    }\n\n    const commandToken = previousCommandToken(curToken);\n    if (commandToken) {\n      return await this.handleCommand(commandToken, curToken, context);\n    }\n\n    return {\n      suggestions: [],\n    };\n  }\n\n  private fetchedFieldsCache:\n    | {\n        time: number;\n        logGroups: string[];\n        fields: string[];\n      }\n    | undefined;\n\n  private fetchFields = async (logGroups: string[], region: string): Promise<string[]> => {\n    if (\n      this.fetchedFieldsCache &&\n      Date.now() - this.fetchedFieldsCache.time < 30 * 1000 &&\n      sortedUniq(this.fetchedFieldsCache.logGroups).join('|') === sortedUniq(logGroups).join('|')\n    ) {\n      return this.fetchedFieldsCache.fields;\n    }\n\n    const results = await Promise.all(\n      logGroups.map((logGroup) => this.datasource.getLogGroupFields({ logGroupName: logGroup, region }))\n    );\n\n    const fields = [\n      ...new Set<string>(\n        results.reduce((acc: string[], cur) => acc.concat(cur.logGroupFields?.map((f) => f.name) as string[]), [])\n      ).values(),\n    ];\n\n    this.fetchedFieldsCache = {\n      time: Date.now(),\n      logGroups,\n      fields,\n    };\n\n    return fields;\n  };\n\n  private handleKeyword = async (context?: TypeaheadContext): Promise<TypeaheadOutput> => {\n    const suggs = await this.getFieldCompletionItems(context?.logGroupNames ?? [], context?.region || 'default');\n    const functionSuggestions: CompletionItemGroup[] = [\n      {\n        searchFunctionType: SearchFunctionType.Prefix,\n        label: 'Functions',\n        items: STRING_FUNCTIONS.concat(DATETIME_FUNCTIONS, IP_FUNCTIONS),\n      },\n    ];\n    suggs.suggestions.push(...functionSuggestions);\n\n    return suggs;\n  };\n\n  private handleCommand = async (\n    commandToken: Token,\n    curToken: Token,\n    context?: TypeaheadContext\n  ): Promise<TypeaheadOutput> => {\n    const queryCommand = commandToken.content.toLowerCase();\n    const prevToken = prevNonWhitespaceToken(curToken);\n    const currentTokenIsFirstArg = prevToken === commandToken;\n\n    if (queryCommand === 'sort') {\n      return this.handleSortCommand(currentTokenIsFirstArg, curToken, context);\n    }\n\n    if (queryCommand === 'parse') {\n      if (currentTokenIsFirstArg) {\n        return await this.getFieldCompletionItems(context?.logGroupNames ?? [], context?.region || 'default');\n      }\n    }\n\n    const currentTokenIsAfterCommandAndEmpty = isTokenType(commandToken.next, 'whitespace') && !commandToken.next?.next;\n    const currentTokenIsAfterCommand =\n      currentTokenIsAfterCommandAndEmpty || nextNonWhitespaceToken(commandToken) === curToken;\n\n    const currentTokenIsComma = isTokenType(curToken, 'punctuation', ',');\n    const currentTokenIsCommaOrAfterComma = currentTokenIsComma || isTokenType(prevToken, 'punctuation', ',');\n\n    // We only show suggestions if we are after a command or after a comma which is a field separator\n    if (!(currentTokenIsAfterCommand || currentTokenIsCommaOrAfterComma)) {\n      return { suggestions: [] };\n    }\n\n    if (['display', 'fields'].includes(queryCommand)) {\n      const typeaheadOutput = await this.getFieldCompletionItems(\n        context?.logGroupNames ?? [],\n        context?.region || 'default'\n      );\n      typeaheadOutput.suggestions.push(...this.getFieldAndFilterFunctionCompletionItems().suggestions);\n\n      return typeaheadOutput;\n    }\n\n    if (queryCommand === 'stats') {\n      const typeaheadOutput = this.getStatsAggCompletionItems();\n      if (currentTokenIsComma || currentTokenIsAfterCommandAndEmpty) {\n        typeaheadOutput?.suggestions.forEach((group) => {\n          group.skipFilter = true;\n        });\n      }\n      return typeaheadOutput;\n    }\n\n    if (queryCommand === 'filter' && currentTokenIsFirstArg) {\n      const sugg = await this.getFieldCompletionItems(context?.logGroupNames ?? [], context?.region || 'default');\n      const boolFuncs = this.getBoolFuncCompletionItems();\n      sugg.suggestions.push(...boolFuncs.suggestions);\n      return sugg;\n    }\n    return { suggestions: [] };\n  };\n\n  private async handleSortCommand(\n    isFirstArgument: boolean,\n    curToken: Token,\n    context?: TypeaheadContext\n  ): Promise<TypeaheadOutput> {\n    if (isFirstArgument) {\n      return await this.getFieldCompletionItems(context?.logGroupNames ?? [], context?.region || 'default');\n    } else if (isTokenType(prevNonWhitespaceToken(curToken), 'field-name')) {\n      // suggest sort options\n      return {\n        suggestions: [\n          {\n            searchFunctionType: SearchFunctionType.Prefix,\n            label: 'Sort Order',\n            items: [\n              {\n                label: 'asc',\n              },\n              { label: 'desc' },\n            ],\n          },\n        ],\n      };\n    }\n\n    return { suggestions: [] };\n  }\n\n  private handleComparison = async (context?: TypeaheadContext) => {\n    const fieldsSuggestions = await this.getFieldCompletionItems(\n      context?.logGroupNames ?? [],\n      context?.region || 'default'\n    );\n    const comparisonSuggestions = this.getComparisonCompletionItems();\n    fieldsSuggestions.suggestions.push(...comparisonSuggestions.suggestions);\n    return fieldsSuggestions;\n  };\n\n  private getCommandCompletionItems = (): TypeaheadOutput => {\n    return {\n      suggestions: [{ searchFunctionType: SearchFunctionType.Prefix, label: 'Commands', items: QUERY_COMMANDS }],\n    };\n  };\n\n  private getFieldAndFilterFunctionCompletionItems = (): TypeaheadOutput => {\n    return {\n      suggestions: [\n        { searchFunctionType: SearchFunctionType.Prefix, label: 'Functions', items: FIELD_AND_FILTER_FUNCTIONS },\n      ],\n    };\n  };\n\n  private getStatsAggCompletionItems = (): TypeaheadOutput => {\n    return {\n      suggestions: [\n        { searchFunctionType: SearchFunctionType.Prefix, label: 'Functions', items: AGGREGATION_FUNCTIONS_STATS },\n      ],\n    };\n  };\n\n  private getBoolFuncCompletionItems = (): TypeaheadOutput => {\n    return {\n      suggestions: [\n        {\n          searchFunctionType: SearchFunctionType.Prefix,\n          label: 'Functions',\n          items: BOOLEAN_FUNCTIONS,\n        },\n      ],\n    };\n  };\n\n  private getComparisonCompletionItems = (): TypeaheadOutput => {\n    return {\n      suggestions: [\n        {\n          searchFunctionType: SearchFunctionType.Prefix,\n          label: 'Functions',\n          items: NUMERIC_OPERATORS.concat(BOOLEAN_FUNCTIONS),\n        },\n      ],\n    };\n  };\n\n  private getFieldCompletionItems = async (logGroups: string[], region: string): Promise<TypeaheadOutput> => {\n    const fields = await this.fetchFields(logGroups, region);\n\n    return {\n      suggestions: [\n        {\n          label: 'Fields',\n          items: fields.map((field) => ({\n            label: field,\n            insertText: field.match(/@?[_a-zA-Z]+[_.0-9a-zA-Z]*/) ? undefined : `\\`${field}\\``,\n          })),\n        },\n      ],\n    };\n  };\n}\n\nfunction nextNonWhitespaceToken(token: Token): Token | null {\n  let curToken = token;\n\n  while (curToken.next) {\n    if (curToken.next.types.includes('whitespace')) {\n      curToken = curToken.next;\n    } else {\n      return curToken.next;\n    }\n  }\n\n  return null;\n}\n\nfunction prevNonWhitespaceToken(token: Token): Token | null {\n  let curToken = token;\n\n  while (curToken.prev) {\n    if (isTokenType(curToken.prev, 'whitespace')) {\n      curToken = curToken.prev;\n    } else {\n      return curToken.prev;\n    }\n  }\n\n  return null;\n}\n\nfunction previousCommandToken(startToken: Token): Token | null {\n  let thisToken = startToken;\n  while (!!thisToken.prev) {\n    thisToken = thisToken.prev;\n    if (\n      thisToken.types.includes('query-command') &&\n      (!thisToken.prev || isTokenType(prevNonWhitespaceToken(thisToken), 'command-separator'))\n    ) {\n      return thisToken;\n    }\n  }\n  return null;\n}\n\nconst funcsWithFieldArgs = [\n  'avg',\n  'count',\n  'count_distinct',\n  'earliest',\n  'latest',\n  'sortsFirst',\n  'sortsLast',\n  'max',\n  'min',\n  'pct',\n  'stddev',\n  'ispresent',\n  'fromMillis',\n  'toMillis',\n  'isempty',\n  'isblank',\n  'isValidIp',\n  'isValidIpV4',\n  'isValidIpV6',\n  'isIpInSubnet',\n  'isIpv4InSubnet',\n  'isIpv6InSubnet',\n].map((funcName) => funcName.toLowerCase());\n\n/**\n * Returns true if cursor is currently inside a function parenthesis for example `count(|)` or `count(@mess|)` should\n * return true.\n */\nfunction isInsideFunctionParenthesis(curToken: Token): boolean {\n  const prevToken = prevNonWhitespaceToken(curToken);\n\n  if (!prevToken) {\n    return false;\n  }\n\n  const parenthesisToken = curToken.content === '(' ? curToken : prevToken.content === '(' ? prevToken : undefined;\n  if (parenthesisToken) {\n    const maybeFunctionToken = prevNonWhitespaceToken(parenthesisToken);\n    if (maybeFunctionToken) {\n      return (\n        funcsWithFieldArgs.includes(maybeFunctionToken.content.toLowerCase()) &&\n        maybeFunctionToken.types.includes('function')\n      );\n    }\n  }\n  return false;\n}\n\nfunction isAfterKeyword(keyword: string, token: Token): boolean {\n  const maybeKeyword = getPreviousTokenExcluding(token, [\n    'whitespace',\n    'function',\n    'punctuation',\n    'field-name',\n    'number',\n  ]);\n  if (isTokenType(maybeKeyword, 'keyword', 'by')) {\n    const prev = getPreviousTokenExcluding(token, ['whitespace']);\n    if (prev === maybeKeyword || isTokenType(prev, 'punctuation', ',')) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isTokenType(token: Token | undefined | null, type: string, content?: string): boolean {\n  if (!token?.types.includes(type)) {\n    return false;\n  }\n  if (content) {\n    if (token?.content.toLowerCase() !== content) {\n      return false;\n    }\n  }\n  return true;\n}\n\ntype TokenDef = string | { type: string; value: string };\nfunction getPreviousTokenExcluding(token: Token, exclude: TokenDef[]): Token | undefined | null {\n  let curToken = token.prev;\n  main: while (curToken) {\n    for (const item of exclude) {\n      if (typeof item === 'string') {\n        if (curToken.types.includes(item)) {\n          curToken = curToken.prev;\n          continue main;\n        }\n      } else {\n        if (curToken.types.includes(item.type) && curToken.content.toLowerCase() === item.value) {\n          curToken = curToken.prev;\n          continue main;\n        }\n      }\n    }\n    break;\n  }\n  return curToken;\n}\n","import { debounce, memoize } from 'lodash';\n\nexport default (func: (...args: any[]) => void, wait = 7000) => {\n  const mem = memoize(\n    (...args) =>\n      debounce(func, wait, {\n        leading: true,\n      }),\n    (...args) => JSON.stringify(args)\n  );\n\n  return (...args: any[]) => mem(...args)(...args);\n};\n","import { TokenTypes } from '../../monarch/types';\n\nexport const MetricMathTokenTypes: TokenTypes = {\n  Parenthesis: 'delimiter.parenthesis.cloudwatch-MetricMath',\n  Whitespace: 'white.cloudwatch-MetricMath',\n  Keyword: 'keyword.cloudwatch-MetricMath',\n  Delimiter: 'delimiter.cloudwatch-MetricMath',\n  Operator: 'operator.cloudwatch-MetricMath',\n  Identifier: 'identifier.cloudwatch-MetricMath',\n  Type: 'type.cloudwatch-MetricMath',\n  Function: 'predefined.cloudwatch-MetricMath',\n  Number: 'number.cloudwatch-MetricMath',\n  String: 'string.cloudwatch-MetricMath',\n  Variable: 'variable.cloudwatch-MetricMath',\n};\n","import { LinkedToken } from '../../monarch/LinkedToken';\nimport { StatementPosition } from '../../monarch/types';\n\nimport { MetricMathTokenTypes } from './types';\n\nexport function getStatementPosition(currentToken: LinkedToken | null): StatementPosition {\n  const previousNonWhiteSpace = currentToken?.getPreviousNonWhiteSpaceToken();\n\n  if (currentToken && currentToken.isString()) {\n    return StatementPosition.WithinString;\n  }\n\n  if (currentToken && previousNonWhiteSpace) {\n    const currentFunction = currentToken.getPreviousOfType(MetricMathTokenTypes.Function);\n    const isAfterComma = previousNonWhiteSpace.is(MetricMathTokenTypes.Delimiter, ',');\n    const isWithinSearch = currentFunction && currentFunction.value === 'SEARCH';\n    const allTokensAfterStartOfSearch =\n      currentToken.getPreviousUntil(MetricMathTokenTypes.Function, [], 'SEARCH') || [];\n\n    if (isWithinSearch) {\n      // if there's only one ' then we're still within the first arg\n      if (allTokensAfterStartOfSearch.filter(({ value }) => value === \"'\").length === 1) {\n        return StatementPosition.WithinString;\n      }\n\n      // if there was a , before the last , and it happened after the start of SEARCH\n      const lastComma = previousNonWhiteSpace.getPreviousOfType(MetricMathTokenTypes.Delimiter, ',');\n      if (lastComma) {\n        const lastCommaIsAfterSearch =\n          lastComma.range.startColumn > currentFunction.range.startColumn &&\n          lastComma.range.startLineNumber >= currentFunction.range.startLineNumber;\n        if (lastCommaIsAfterSearch) {\n          return StatementPosition.SearchFuncThirdArg;\n        }\n      }\n\n      // otherwise assume it's the second arg\n      return StatementPosition.SearchFuncSecondArg;\n    }\n\n    if (!isWithinSearch && isAfterComma) {\n      return StatementPosition.PredefinedFuncSecondArg;\n    }\n  }\n\n  if (previousNonWhiteSpace?.endsWith(')')) {\n    return StatementPosition.AfterFunction;\n  }\n\n  if (!currentToken || !currentToken.isString()) {\n    return StatementPosition.PredefinedFunction;\n  }\n\n  return StatementPosition.Unknown;\n}\n","import { StatementPosition, SuggestionKind } from '../../monarch/types';\n\nexport function getSuggestionKinds(statementPosition: StatementPosition): SuggestionKind[] {\n  switch (statementPosition) {\n    case StatementPosition.PredefinedFunction:\n      return [SuggestionKind.FunctionsWithArguments];\n    case StatementPosition.PredefinedFuncSecondArg:\n      return [SuggestionKind.FunctionsWithArguments, SuggestionKind.KeywordArguments];\n    case StatementPosition.AfterFunction:\n      return [SuggestionKind.Operators];\n    case StatementPosition.SearchFuncSecondArg:\n      return [SuggestionKind.Statistic];\n    case StatementPosition.SearchFuncThirdArg:\n      return [SuggestionKind.Period];\n  }\n\n  return [];\n}\n","import { getTemplateSrv, TemplateSrv } from '@grafana/runtime';\nimport type { Monaco, monacoTypes } from '@grafana/ui';\n\nimport { CloudWatchDatasource } from '../../datasource';\nimport { CompletionItemProvider } from '../../monarch/CompletionItemProvider';\nimport { LinkedToken } from '../../monarch/LinkedToken';\nimport { TRIGGER_SUGGEST } from '../../monarch/commands';\nimport { SuggestionKind, CompletionItemPriority, StatementPosition } from '../../monarch/types';\nimport {\n  METRIC_MATH_FNS,\n  METRIC_MATH_KEYWORDS,\n  METRIC_MATH_OPERATORS,\n  METRIC_MATH_PERIODS,\n  METRIC_MATH_STATISTIC_KEYWORD_STRINGS,\n} from '../language';\n\nimport { getStatementPosition } from './statementPosition';\nimport { getSuggestionKinds } from './suggestionKind';\nimport { MetricMathTokenTypes } from './types';\n\ntype CompletionItem = monacoTypes.languages.CompletionItem;\n\nexport class MetricMathCompletionItemProvider extends CompletionItemProvider {\n  constructor(datasource: CloudWatchDatasource, templateSrv: TemplateSrv = getTemplateSrv()) {\n    super(datasource, templateSrv);\n    this.getStatementPosition = getStatementPosition;\n    this.getSuggestionKinds = getSuggestionKinds;\n    this.tokenTypes = MetricMathTokenTypes;\n  }\n\n  async getSuggestions(\n    monaco: Monaco,\n    currentToken: LinkedToken | null,\n    suggestionKinds: SuggestionKind[],\n    statementPosition: StatementPosition,\n    position: monacoTypes.IPosition\n  ): Promise<CompletionItem[]> {\n    let suggestions: CompletionItem[] = [];\n    const invalidRangeToken = currentToken?.isWhiteSpace() || currentToken?.isParenthesis();\n    const range =\n      invalidRangeToken || !currentToken?.range ? monaco.Range.fromPositions(position) : currentToken?.range;\n\n    const toCompletionItem = (value: string, rest: Partial<CompletionItem> = {}) => {\n      const item: CompletionItem = {\n        label: value,\n        insertText: value,\n        kind: monaco.languages.CompletionItemKind.Field,\n        range,\n        sortText: CompletionItemPriority.Medium,\n        ...rest,\n      };\n      return item;\n    };\n\n    function addSuggestion(value: string, rest: Partial<CompletionItem> = {}) {\n      suggestions = [...suggestions, toCompletionItem(value, rest)];\n    }\n\n    for (const suggestion of suggestionKinds) {\n      switch (suggestion) {\n        case SuggestionKind.FunctionsWithArguments:\n          METRIC_MATH_FNS.map((f) =>\n            addSuggestion(f, {\n              insertText: f === 'SEARCH' ? `${f}('$0')` : `${f}($0)`,\n              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n              command: TRIGGER_SUGGEST,\n              kind: monaco.languages.CompletionItemKind.Function,\n            })\n          );\n          break;\n\n        case SuggestionKind.KeywordArguments:\n          METRIC_MATH_KEYWORDS.map((s) =>\n            addSuggestion(s, {\n              insertText: s,\n              command: TRIGGER_SUGGEST,\n              kind: monaco.languages.CompletionItemKind.Keyword,\n              sortText: CompletionItemPriority.MediumHigh,\n            })\n          );\n          break;\n\n        case SuggestionKind.Statistic:\n          METRIC_MATH_STATISTIC_KEYWORD_STRINGS.map((s) =>\n            addSuggestion(s, {\n              insertText: `'${s}', `,\n              command: TRIGGER_SUGGEST,\n            })\n          );\n          break;\n\n        case SuggestionKind.Operators:\n          METRIC_MATH_OPERATORS.map((s) =>\n            addSuggestion(s, {\n              insertText: `${s} `,\n              command: TRIGGER_SUGGEST,\n            })\n          );\n          break;\n\n        case SuggestionKind.Period:\n          METRIC_MATH_PERIODS.map((s, idx) =>\n            addSuggestion(s.toString(), {\n              kind: monaco.languages.CompletionItemKind.Value,\n              sortText: String.fromCharCode(97 + idx), // converts index 0, 1 to \"a\", \"b\", etc needed to show the time periods in numerical order\n            })\n          );\n          break;\n      }\n    }\n\n    // always suggest template variables\n    this.templateVariables.map((v) => {\n      addSuggestion(v, {\n        range,\n        label: v,\n        insertText: v,\n        kind: monaco.languages.CompletionItemKind.Variable,\n        sortText: CompletionItemPriority.Low,\n      });\n    });\n\n    return suggestions;\n  }\n}\n","import { DataFrame, DataLink, DataQueryRequest, DataQueryResponse, ScopedVars, TimeRange } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\n\nimport { AwsUrl, encodeUrl } from '../aws_url';\nimport { CloudWatchLogsQuery, CloudWatchQuery } from '../types';\n\ntype ReplaceFn = (\n  target?: string,\n  scopedVars?: ScopedVars,\n  displayErrorIfIsMultiTemplateVariable?: boolean,\n  fieldName?: string\n) => string;\n\nexport async function addDataLinksToLogsResponse(\n  response: DataQueryResponse,\n  request: DataQueryRequest<CloudWatchQuery>,\n  range: TimeRange,\n  replaceFn: ReplaceFn,\n  getVariableValueFn: (value: string, scopedVars: ScopedVars) => string[],\n  getRegion: (region: string) => string,\n  tracingDatasourceUid?: string\n): Promise<void> {\n  const replace = (target: string, fieldName?: string) => replaceFn(target, request.scopedVars, true, fieldName);\n  const getVariableValue = (target: string) => getVariableValueFn(target, request.scopedVars);\n\n  for (const dataFrame of response.data as DataFrame[]) {\n    const curTarget = request.targets.find((target) => target.refId === dataFrame.refId) as CloudWatchLogsQuery;\n    const interpolatedRegion = getRegion(replace(curTarget.region ?? '', 'region'));\n\n    for (const field of dataFrame.fields) {\n      if (field.name === '@xrayTraceId' && tracingDatasourceUid) {\n        getRegion(replace(curTarget.region ?? '', 'region'));\n        const xrayLink = await createInternalXrayLink(tracingDatasourceUid, interpolatedRegion);\n        if (xrayLink) {\n          field.config.links = [xrayLink];\n        }\n      } else {\n        // Right now we add generic link to open the query in xray console to every field so it shows in the logs row\n        // details. Unfortunately this also creates link for all values inside table which look weird.\n        field.config.links = [createAwsConsoleLink(curTarget, range, interpolatedRegion, replace, getVariableValue)];\n      }\n    }\n  }\n}\n\nasync function createInternalXrayLink(datasourceUid: string, region: string) {\n  let ds;\n  try {\n    ds = await getDataSourceSrv().get(datasourceUid);\n  } catch (e) {\n    console.error('Could not load linked xray data source, it was probably deleted after it was linked', e);\n    return undefined;\n  }\n\n  return {\n    title: ds.name,\n    url: '',\n    internal: {\n      query: { query: '${__value.raw}', queryType: 'getTrace', region: region },\n      datasourceUid: datasourceUid,\n      datasourceName: ds.name,\n    },\n  } as DataLink;\n}\n\nfunction createAwsConsoleLink(\n  target: CloudWatchLogsQuery,\n  range: TimeRange,\n  region: string,\n  replace: (target: string, fieldName?: string) => string,\n  getVariableValue: (value: string) => string[]\n) {\n  const interpolatedExpression = target.expression ? replace(target.expression) : '';\n  const interpolatedGroups = target.logGroupNames?.flatMap(getVariableValue) ?? [];\n\n  const urlProps: AwsUrl = {\n    end: range.to.toISOString(),\n    start: range.from.toISOString(),\n    timeType: 'ABSOLUTE',\n    tz: 'UTC',\n    editorString: interpolatedExpression,\n    isLiveTail: false,\n    source: interpolatedGroups,\n  };\n\n  const encodedUrl = encodeUrl(urlProps, region);\n  return {\n    url: encodedUrl,\n    title: 'View in CloudWatch console',\n    targetBlank: true,\n  };\n}\n","import { Observable, Subscription } from 'rxjs';\n\nimport { DataFrame, DataFrameJSON, DataQueryError } from '@grafana/data';\nimport { FetchError, toDataQueryResponse } from '@grafana/runtime';\n\nimport { StartQueryRequest } from '../types';\n\ntype Result = { frames: DataFrameJSON[]; error?: string };\n\n/**\n * A retry strategy specifically for cloud watch logs query. Cloud watch logs queries need first starting the query\n * and the polling for the results. The start query can fail because of the concurrent queries rate limit,\n * and so we have to retry the start query call if there is already lot of queries running.\n *\n * As we send multiple queries in a single request some can fail and some can succeed and we have to also handle those\n * cases by only retrying the failed queries. We retry the failed queries until we hit the time limit or all queries\n * succeed and only then we pass the data forward. This means we wait longer but makes the code a bit simpler as we\n * can treat starting the query and polling as steps in a pipeline.\n * @param queryFun\n * @param targets\n * @param options\n */\nexport function runWithRetry(\n  queryFun: (targets: StartQueryRequest[]) => Observable<DataFrame[]>,\n  targets: StartQueryRequest[],\n  timeoutFunc: (retry: number, startTime: number) => boolean\n): Observable<{ frames: DataFrame[]; error?: DataQueryError }> {\n  const startTime = new Date();\n  let retries = 0;\n  let timerID: any;\n  let subscription: Subscription;\n  let collected = {};\n\n  const retryWaitFunction = (retry: number) => {\n    return Math.pow(2, retry) * 1000 + Math.random() * 100;\n  };\n\n  return new Observable((observer) => {\n    // Run function is where the logic takes place. We have it in a function so we can call it recursively.\n    function run(currentQueryParams: StartQueryRequest[]) {\n      subscription = queryFun(currentQueryParams).subscribe({\n        next(frames) {\n          // In case we successfully finished, merge the current response with whatever we already collected.\n          const collectedPreviously = toDataQueryResponse({ data: { results: collected } }).data || [];\n          observer.next({ frames: [...collectedPreviously, ...frames] });\n          observer.complete();\n        },\n        error(error: FetchError<{ results?: Record<string, Result> }> | string) {\n          // In case of error we first try to figure out what kind of error it is\n\n          // This means it was a generic 500 error probably so we just pass it on\n          if (typeof error === 'string') {\n            observer.error(error);\n            return;\n          }\n\n          // In case of multiple queries this some can error while some may be ok\n          const errorData = splitErrorData(error);\n\n          if (!errorData) {\n            // Not sure what happened but the error structure wasn't what we expected\n            observer.error(error);\n            return;\n          }\n\n          if (!errorData!.errors.length) {\n            // So there is no limit error but some other errors so nothing to retry so we just pass it as it would be\n            // otherwise.\n            observer.error(error);\n            return;\n          }\n\n          if (timeoutFunc(retries, startTime.valueOf())) {\n            // We timed out but we could have started some queries\n            if (Object.keys(collected).length || Object.keys(errorData.good).length) {\n              const dataResponse = toDataQueryResponse({\n                data: {\n                  results: {\n                    ...(errorData.good ?? {}),\n                    ...(collected ?? {}),\n                  },\n                },\n              });\n              dataResponse.error = {\n                ...(dataResponse.error ?? {}),\n                message: `Some queries timed out: ${errorData.errorMessage}`,\n              };\n              // So we consider this a partial success and pass the data forward but also with error to be shown to\n              // the user.\n              observer.next({\n                error: dataResponse.error,\n                frames: dataResponse.data,\n              });\n              observer.complete();\n            } else {\n              // So we timed out and there was no data to pass forward so we just pass the error\n              const dataResponse = toDataQueryResponse({ data: { results: error.data?.results ?? {} } });\n              observer.error(dataResponse.error);\n            }\n            return;\n          }\n\n          collected = {\n            ...collected,\n            ...errorData!.good,\n          };\n\n          timerID = setTimeout(\n            () => {\n              retries++;\n              run(errorData!.errors);\n            },\n            // We want to know how long to wait for the next retry. First time this will be 0.\n            retryWaitFunction(retries + 1)\n          );\n        },\n      });\n    }\n    run(targets);\n    return () => {\n      // We clear only the latest timer and subscription but the observable should complete after one response so\n      // there should not be more things running at the same time.\n      clearTimeout(timerID);\n      subscription.unsubscribe();\n    };\n  });\n}\n\nfunction splitErrorData(error: FetchError<{ results?: Record<string, Result> }>) {\n  const results = error.data?.results;\n  if (!results) {\n    return undefined;\n  }\n  return Object.keys(results).reduce<{\n    errors: StartQueryRequest[];\n    good: Record<string, Result>;\n    errorMessage: string;\n  }>(\n    (acc, refId) => {\n      if (results[refId].error?.startsWith('LimitExceededException')) {\n        acc.errorMessage = results[refId].error!;\n        acc.errors.push(error.config.data.queries.find((q: any) => q.refId === refId));\n      } else {\n        acc.good[refId] = results[refId];\n      }\n      return acc;\n    },\n    { errors: [], good: {}, errorMessage: '' }\n  );\n}\n","import { SchedulerLike, Observable, SchedulerAction, Subscriber, asyncScheduler } from 'rxjs';\n\n/**\n * Creates an Observable that emits sequential numbers after increasing intervals of time\n * starting with `startPeriod`, ending with `endPeriod` and incrementing by `step`.\n */\nexport const increasingInterval = (\n  { startPeriod = 0, endPeriod = 5000, step = 1000 },\n  scheduler: SchedulerLike = asyncScheduler\n): Observable<number> => {\n  return new Observable<number>((subscriber) => {\n    const state: IntervalState = {\n      subscriber,\n      counter: 0,\n      period: startPeriod,\n      step,\n      endPeriod,\n    };\n\n    subscriber.add(scheduler.schedule(dispatch, startPeriod, state));\n    return subscriber;\n  });\n};\n\nfunction dispatch(this: SchedulerAction<IntervalState>, state?: IntervalState) {\n  if (!state) {\n    return;\n  }\n  const { subscriber, counter, period, step, endPeriod } = state;\n  subscriber.next(counter);\n  const newPeriod = Math.min(period + step, endPeriod);\n  this.schedule({ subscriber, counter: counter + 1, period: newPeriod, step, endPeriod }, newPeriod);\n}\n\ninterface IntervalState {\n  subscriber: Subscriber<number>;\n  counter: number;\n  period: number;\n  endPeriod: number;\n  step: number;\n}\n","import { omit } from 'lodash';\n\nimport { Dimensions, VariableQuery, VariableQueryType, OldVariableQuery, MultiFilters } from '../types';\n\nconst jsonVariable = /\\${(\\w+):json}/g;\n\nfunction isVariableQuery(rawQuery: string | VariableQuery | OldVariableQuery): rawQuery is VariableQuery {\n  return typeof rawQuery !== 'string' && typeof rawQuery.ec2Filters !== 'string' && typeof rawQuery.tags !== 'string';\n}\n\nfunction migrateMultiFilters(oldFilters: string): MultiFilters {\n  const tempFilters = oldFilters.replace(jsonVariable, '\"$$$1\"');\n  const parsedFilters: Dimensions = JSON.parse(tempFilters);\n  const newFilters: MultiFilters = {};\n  // if the old filter was {key:value} transform it to {key:[value]}\n  Object.keys(parsedFilters).forEach((key) => {\n    const value = parsedFilters[key];\n    if (typeof value === 'string') {\n      newFilters[key] = [value];\n    } else if (value !== undefined) {\n      newFilters[key] = value;\n    }\n  });\n  return newFilters;\n}\n\nexport function migrateVariableQuery(rawQuery: string | VariableQuery | OldVariableQuery): VariableQuery {\n  if (isVariableQuery(rawQuery)) {\n    return rawQuery;\n  }\n\n  // rawQuery is OldVariableQuery\n  if (typeof rawQuery !== 'string') {\n    const newQuery: VariableQuery = omit(rawQuery, ['dimensionFilters', 'ec2Filters', 'tags']);\n    newQuery.dimensionFilters = {};\n    newQuery.ec2Filters = {};\n    newQuery.tags = {};\n\n    if (rawQuery.dimensionFilters !== '' && rawQuery.ec2Filters !== '[]') {\n      const tempFilters = rawQuery.dimensionFilters.replace(jsonVariable, '\"$$$1\"');\n      try {\n        newQuery.dimensionFilters = JSON.parse(tempFilters);\n      } catch {\n        throw new Error(`unable to migrate poorly formed filters: ${rawQuery.dimensionFilters}`);\n      }\n    }\n    if (rawQuery.ec2Filters !== '' && rawQuery.ec2Filters !== '[]') {\n      try {\n        newQuery.ec2Filters = migrateMultiFilters(rawQuery.ec2Filters);\n      } catch {\n        throw new Error(`unable to migrate poorly formed filters: ${rawQuery.ec2Filters}`);\n      }\n    }\n    if (rawQuery.tags !== '' && rawQuery.tags !== '[]') {\n      try {\n        newQuery.tags = migrateMultiFilters(rawQuery.tags);\n      } catch {\n        throw new Error(`unable to migrate poorly formed filters: ${rawQuery.tags}`);\n      }\n    }\n    return newQuery;\n  }\n\n  const newQuery: VariableQuery = {\n    refId: 'CloudWatchVariableQueryEditor-VariableQuery',\n    queryType: VariableQueryType.Regions,\n    namespace: '',\n    region: '',\n    metricName: '',\n    dimensionKey: '',\n    dimensionFilters: {},\n    ec2Filters: {},\n    instanceID: '',\n    attributeName: '',\n    resourceType: '',\n    tags: {},\n  };\n\n  if (rawQuery === '') {\n    return newQuery;\n  }\n\n  if (rawQuery.match(/^regions\\(\\)/)) {\n    return newQuery;\n  }\n  if (rawQuery.match(/^namespaces\\(\\)/)) {\n    newQuery.queryType = VariableQueryType.Namespaces;\n    return newQuery;\n  }\n  const metricNameQuery = rawQuery.match(/^metrics\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/);\n  if (metricNameQuery) {\n    newQuery.queryType = VariableQueryType.Metrics;\n    newQuery.namespace = metricNameQuery[1];\n    newQuery.region = metricNameQuery[3] || '';\n    return newQuery;\n  }\n  const dimensionKeysQuery = rawQuery.match(/^dimension_keys\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/);\n  if (dimensionKeysQuery) {\n    newQuery.queryType = VariableQueryType.DimensionKeys;\n    newQuery.namespace = dimensionKeysQuery[1];\n    newQuery.region = dimensionKeysQuery[3] || '';\n    return newQuery;\n  }\n\n  const dimensionValuesQuery = rawQuery.match(\n    /^dimension_values\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?([^,]+?)(,\\s?(.+))?\\)/\n  );\n  if (dimensionValuesQuery) {\n    newQuery.queryType = VariableQueryType.DimensionValues;\n    newQuery.region = dimensionValuesQuery[1];\n    newQuery.namespace = dimensionValuesQuery[2];\n    newQuery.metricName = dimensionValuesQuery[3];\n    newQuery.dimensionKey = dimensionValuesQuery[4];\n    newQuery.dimensionFilters = {};\n    if (!!dimensionValuesQuery[6] && dimensionValuesQuery[6] !== '[]') {\n      const tempFilters = dimensionValuesQuery[6].replace(jsonVariable, '\"$$$1\"');\n      try {\n        newQuery.dimensionFilters = JSON.parse(tempFilters);\n      } catch {\n        throw new Error(`unable to migrate poorly formed filters: ${dimensionValuesQuery[6]}`);\n      }\n    }\n    return newQuery;\n  }\n\n  const ebsVolumeIdsQuery = rawQuery.match(/^ebs_volume_ids\\(([^,]+?),\\s?([^,]+?)\\)/);\n  if (ebsVolumeIdsQuery) {\n    newQuery.queryType = VariableQueryType.EBSVolumeIDs;\n    newQuery.region = ebsVolumeIdsQuery[1];\n    newQuery.instanceID = ebsVolumeIdsQuery[2];\n    return newQuery;\n  }\n\n  const ec2InstanceAttributeQuery = rawQuery.match(/^ec2_instance_attribute\\(([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/);\n  if (ec2InstanceAttributeQuery) {\n    newQuery.queryType = VariableQueryType.EC2InstanceAttributes;\n    newQuery.region = ec2InstanceAttributeQuery[1];\n    newQuery.attributeName = ec2InstanceAttributeQuery[2];\n    if (ec2InstanceAttributeQuery[3] && ec2InstanceAttributeQuery[3] !== '[]') {\n      try {\n        newQuery.ec2Filters = migrateMultiFilters(ec2InstanceAttributeQuery[3]);\n      } catch {\n        throw new Error(`unable to migrate poorly formed filters: ${ec2InstanceAttributeQuery[3]}`);\n      }\n    }\n    return newQuery;\n  }\n\n  const resourceARNsQuery = rawQuery.match(/^resource_arns\\(([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/);\n  if (resourceARNsQuery) {\n    newQuery.queryType = VariableQueryType.ResourceArns;\n    newQuery.region = resourceARNsQuery[1];\n    newQuery.resourceType = resourceARNsQuery[2];\n    if (resourceARNsQuery[3] && resourceARNsQuery[3] !== '[]') {\n      try {\n        newQuery.tags = migrateMultiFilters(resourceARNsQuery[3]);\n      } catch {\n        throw new Error(`unable to migrate poorly formed filters: ${resourceARNsQuery[3]}`);\n      }\n    }\n    return newQuery;\n  }\n\n  const statsQuery = rawQuery.match(/^statistics\\(\\)/);\n  if (statsQuery) {\n    newQuery.queryType = VariableQueryType.Statistics;\n    return newQuery;\n  }\n  throw new Error('unable to parse old variable query');\n}\n","import { css, cx } from '@emotion/css';\nimport React, { FunctionComponent, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { AccessoryButton, InputGroup } from '@grafana/experimental';\nimport { Input, stylesFactory, useTheme2 } from '@grafana/ui';\n\nimport { MultiFilterCondition } from './MultiFilter';\n\nexport interface Props {\n  filter: MultiFilterCondition;\n  onChange: (value: MultiFilterCondition) => void;\n  onDelete: () => void;\n  keyPlaceholder?: string;\n}\n\nexport const MultiFilterItem: FunctionComponent<Props> = ({ filter, onChange, onDelete, keyPlaceholder }) => {\n  const [localKey, setLocalKey] = useState(filter.key || '');\n  const [localValue, setLocalValue] = useState(filter.value?.join(', ') || '');\n  const theme = useTheme2();\n  const styles = getOperatorStyles(theme);\n\n  return (\n    <div data-testid=\"cloudwatch-multifilter-item\">\n      <InputGroup>\n        <Input\n          data-testid=\"cloudwatch-multifilter-item-key\"\n          aria-label=\"Filter key\"\n          value={localKey}\n          placeholder={keyPlaceholder ?? 'key'}\n          onChange={(e) => setLocalKey(e.currentTarget.value)}\n          onBlur={() => {\n            if (localKey && localKey !== filter.key) {\n              onChange({ ...filter, key: localKey });\n            }\n          }}\n        />\n\n        <span className={cx(styles.root)}>=</span>\n\n        <Input\n          data-testid=\"cloudwatch-multifilter-item-value\"\n          aria-label=\"Filter value\"\n          value={localValue}\n          placeholder=\"value1, value2,...\"\n          onChange={(e) => setLocalValue(e.currentTarget.value)}\n          onBlur={() => {\n            const newValues = localValue.split(',').map((v) => v.trim());\n            if (localValue && newValues !== filter.value) {\n              onChange({ ...filter, value: newValues });\n            }\n            setLocalValue(newValues.join(', '));\n          }}\n        />\n\n        <AccessoryButton aria-label=\"remove\" icon=\"times\" variant=\"secondary\" onClick={onDelete} type=\"button\" />\n      </InputGroup>\n    </div>\n  );\n};\n\nconst getOperatorStyles = stylesFactory((theme: GrafanaTheme2) => ({\n  root: css({\n    padding: theme.spacing(0, 1),\n    alignSelf: 'center',\n  }),\n}));\n","import { isEqual } from 'lodash';\nimport React, { useEffect, useState } from 'react';\n\nimport { EditorList } from '@grafana/experimental';\n\nimport { MultiFilters } from '../../types';\n\nimport { MultiFilterItem } from './MultiFilterItem';\n\nexport interface Props {\n  filters?: MultiFilters;\n  onChange: (filters: MultiFilters) => void;\n  keyPlaceholder?: string;\n}\n\nexport interface MultiFilterCondition {\n  key?: string;\n  operator?: string;\n  value?: string[];\n}\n\nconst multiFiltersToFilterConditions = (filters: MultiFilters) =>\n  Object.keys(filters).map((key) => ({ key, value: filters[key], operator: '=' }));\n\nconst filterConditionsToMultiFilters = (filters: MultiFilterCondition[]) => {\n  const res: MultiFilters = {};\n  filters.forEach(({ key, value }) => {\n    if (key && value) {\n      res[key] = value;\n    }\n  });\n  return res;\n};\n\nexport const MultiFilter: React.FC<Props> = ({ filters, onChange, keyPlaceholder }) => {\n  const [items, setItems] = useState<MultiFilterCondition[]>([]);\n  useEffect(() => setItems(filters ? multiFiltersToFilterConditions(filters) : []), [filters]);\n  const onFiltersChange = (newItems: Array<Partial<MultiFilterCondition>>) => {\n    setItems(newItems);\n\n    // The onChange event should only be triggered in the case there is a complete dimension object.\n    // So when a new key is added that does not yet have a value, it should not trigger an onChange event.\n    const newMultifilters = filterConditionsToMultiFilters(newItems);\n    if (!isEqual(newMultifilters, filters)) {\n      onChange(newMultifilters);\n    }\n  };\n\n  return <EditorList items={items} onChange={onFiltersChange} renderItem={makeRenderFilter(keyPlaceholder)} />;\n};\n\nfunction makeRenderFilter(keyPlaceholder?: string) {\n  function renderFilter(\n    item: MultiFilterCondition,\n    onChange: (item: MultiFilterCondition) => void,\n    onDelete: () => void\n  ) {\n    return (\n      <MultiFilterItem\n        filter={item}\n        onChange={(item) => onChange(item)}\n        onDelete={onDelete}\n        keyPlaceholder={keyPlaceholder}\n      />\n    );\n  }\n  return renderFilter;\n}\n","import React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { InlineField, Select } from '@grafana/ui';\n\nimport { VariableQueryType } from '../../types';\n\nconst LABEL_WIDTH = 20;\n\ninterface VariableQueryFieldProps<T> {\n  onChange: (value: T) => void;\n  options: SelectableValue[];\n  value: T | null;\n  label: string;\n  inputId?: string;\n  allowCustomValue?: boolean;\n  isLoading?: boolean;\n}\n\nexport const VariableQueryField = <T extends string | VariableQueryType>({\n  label,\n  onChange,\n  value,\n  options,\n  allowCustomValue = false,\n  isLoading = false,\n  inputId = label,\n}: VariableQueryFieldProps<T>) => {\n  return (\n    <InlineField label={label} labelWidth={LABEL_WIDTH} htmlFor={inputId}>\n      <Select\n        aria-label={label}\n        width={25}\n        allowCustomValue={allowCustomValue}\n        value={value}\n        onChange={({ value }) => onChange(value!)}\n        options={options}\n        isLoading={isLoading}\n        inputId={inputId}\n      />\n    </InlineField>\n  );\n};\n","import React, { FC, useState } from 'react';\n\nimport { InlineField, Input, PopoverContent } from '@grafana/ui';\n\nconst LABEL_WIDTH = 20;\n\ninterface VariableTextFieldProps {\n  onBlur: (value: string) => void;\n  value: string;\n  label: string;\n  placeholder?: string;\n  tooltip?: PopoverContent;\n  interactive?: boolean;\n}\n\nexport const VariableTextField: FC<VariableTextFieldProps> = ({\n  interactive,\n  label,\n  onBlur,\n  placeholder,\n  value,\n  tooltip,\n}) => {\n  const [localValue, setLocalValue] = useState(value);\n  return (\n    <InlineField interactive={interactive} label={label} labelWidth={LABEL_WIDTH} tooltip={tooltip} grow>\n      <Input\n        aria-label={label}\n        placeholder={placeholder}\n        value={localValue}\n        onChange={(e) => setLocalValue(e.currentTarget.value)}\n        onBlur={() => onBlur(localValue)}\n      />\n    </InlineField>\n  );\n};\n","import React from 'react';\n\nimport { QueryEditorProps, SelectableValue } from '@grafana/data';\nimport { InlineField } from '@grafana/ui';\n\nimport { Dimensions } from '..';\nimport { CloudWatchDatasource } from '../../datasource';\nimport { useDimensionKeys, useMetrics, useNamespaces, useRegions } from '../../hooks';\nimport { migrateVariableQuery } from '../../migrations/variableQueryMigrations';\nimport { CloudWatchJsonData, CloudWatchQuery, VariableQuery, VariableQueryType } from '../../types';\n\nimport { MultiFilter } from './MultiFilter';\nimport { VariableQueryField } from './VariableQueryField';\nimport { VariableTextField } from './VariableTextField';\n\nexport type Props = QueryEditorProps<CloudWatchDatasource, CloudWatchQuery, CloudWatchJsonData, VariableQuery>;\n\nconst queryTypes: Array<{ value: string; label: string }> = [\n  { value: VariableQueryType.Regions, label: 'Regions' },\n  { value: VariableQueryType.Namespaces, label: 'Namespaces' },\n  { value: VariableQueryType.Metrics, label: 'Metrics' },\n  { value: VariableQueryType.DimensionKeys, label: 'Dimension Keys' },\n  { value: VariableQueryType.DimensionValues, label: 'Dimension Values' },\n  { value: VariableQueryType.EBSVolumeIDs, label: 'EBS Volume IDs' },\n  { value: VariableQueryType.EC2InstanceAttributes, label: 'EC2 Instance Attributes' },\n  { value: VariableQueryType.ResourceArns, label: 'Resource ARNs' },\n  { value: VariableQueryType.Statistics, label: 'Statistics' },\n  { value: VariableQueryType.LogGroups, label: 'Log Groups' },\n];\n\nexport const VariableQueryEditor = ({ query, datasource, onChange }: Props) => {\n  const parsedQuery = migrateVariableQuery(query);\n\n  const { region, namespace, metricName, dimensionKey, dimensionFilters } = parsedQuery;\n  const [regions, regionIsLoading] = useRegions(datasource);\n  const namespaces = useNamespaces(datasource);\n  const metrics = useMetrics(datasource, region, namespace);\n  const dimensionKeys = useDimensionKeys(datasource, region, namespace, metricName);\n  const keysForDimensionFilter = useDimensionKeys(datasource, region, namespace, metricName, dimensionFilters ?? {});\n\n  const onRegionChange = async (region: string) => {\n    const validatedQuery = await sanitizeQuery({\n      ...parsedQuery,\n      region,\n    });\n    onQueryChange(validatedQuery);\n  };\n\n  const onNamespaceChange = async (namespace: string) => {\n    const validatedQuery = await sanitizeQuery({\n      ...parsedQuery,\n      namespace,\n    });\n    onQueryChange(validatedQuery);\n  };\n\n  const onQueryChange = (newQuery: VariableQuery) => {\n    onChange({\n      ...newQuery,\n      refId: 'CloudWatchVariableQueryEditor-VariableQuery',\n    });\n  };\n\n  // Reset dimensionValue parameters if namespace or region change\n  const sanitizeQuery = async (query: VariableQuery) => {\n    let { metricName, dimensionKey, dimensionFilters, namespace, region } = query;\n    if (metricName) {\n      await datasource.getMetrics(namespace, region).then((result: Array<SelectableValue<string>>) => {\n        if (!result.find((metric) => metric.value === metricName)) {\n          metricName = '';\n        }\n      });\n    }\n    if (dimensionKey) {\n      await datasource.getDimensionKeys(namespace, region).then((result: Array<SelectableValue<string>>) => {\n        if (!result.find((key) => key.value === dimensionKey)) {\n          dimensionKey = '';\n          dimensionFilters = {};\n        }\n      });\n    }\n    return { ...query, metricName, dimensionKey, dimensionFilters };\n  };\n\n  const hasRegionField = [\n    VariableQueryType.Metrics,\n    VariableQueryType.DimensionKeys,\n    VariableQueryType.DimensionValues,\n    VariableQueryType.EBSVolumeIDs,\n    VariableQueryType.EC2InstanceAttributes,\n    VariableQueryType.ResourceArns,\n    VariableQueryType.LogGroups,\n  ].includes(parsedQuery.queryType);\n  const hasNamespaceField = [\n    VariableQueryType.Metrics,\n    VariableQueryType.DimensionKeys,\n    VariableQueryType.DimensionValues,\n  ].includes(parsedQuery.queryType);\n  return (\n    <>\n      <VariableQueryField\n        value={parsedQuery.queryType}\n        options={queryTypes}\n        onChange={(value: VariableQueryType) => onQueryChange({ ...parsedQuery, queryType: value })}\n        label=\"Query type\"\n        inputId={`variable-query-type-${query.refId}`}\n      />\n      {hasRegionField && (\n        <VariableQueryField\n          value={region}\n          options={regions}\n          onChange={(value: string) => onRegionChange(value)}\n          label=\"Region\"\n          isLoading={regionIsLoading}\n          inputId={`variable-query-region-${query.refId}`}\n        />\n      )}\n      {hasNamespaceField && (\n        <VariableQueryField\n          value={namespace}\n          options={namespaces}\n          onChange={(value: string) => onNamespaceChange(value)}\n          label=\"Namespace\"\n          inputId={`variable-query-namespace-${query.refId}`}\n          allowCustomValue\n        />\n      )}\n      {parsedQuery.queryType === VariableQueryType.DimensionValues && (\n        <>\n          <VariableQueryField\n            value={metricName || null}\n            options={metrics}\n            onChange={(value: string) => onQueryChange({ ...parsedQuery, metricName: value })}\n            label=\"Metric\"\n            inputId={`variable-query-metric-${query.refId}`}\n            allowCustomValue\n          />\n          <VariableQueryField\n            value={dimensionKey || null}\n            options={dimensionKeys}\n            onChange={(value: string) => onQueryChange({ ...parsedQuery, dimensionKey: value })}\n            label=\"Dimension key\"\n            inputId={`variable-query-dimension-key-${query.refId}`}\n            allowCustomValue\n          />\n          <InlineField label=\"Dimensions\" labelWidth={20} tooltip=\"Dimensions to filter the returned values on\">\n            <Dimensions\n              metricStat={{ ...parsedQuery, dimensions: parsedQuery.dimensionFilters }}\n              onChange={(dimensions) => {\n                onChange({ ...parsedQuery, dimensionFilters: dimensions });\n              }}\n              dimensionKeys={keysForDimensionFilter}\n              disableExpressions={true}\n              datasource={datasource}\n            />\n          </InlineField>\n        </>\n      )}\n      {parsedQuery.queryType === VariableQueryType.EBSVolumeIDs && (\n        <VariableTextField\n          value={query.instanceID}\n          placeholder=\"i-XXXXXXXXXXXXXXXXX\"\n          onBlur={(value: string) => onQueryChange({ ...parsedQuery, instanceID: value })}\n          label=\"Instance ID\"\n        />\n      )}\n      {parsedQuery.queryType === VariableQueryType.EC2InstanceAttributes && (\n        <>\n          <VariableTextField\n            value={parsedQuery.attributeName}\n            onBlur={(value: string) => onQueryChange({ ...parsedQuery, attributeName: value })}\n            label=\"Attribute name\"\n            interactive={true}\n            tooltip={\n              <>\n                {'Attribute or tag to query on. Tags should be formatted \"Tags.<name>\". '}\n                <a\n                  href=\"https://grafana.com/docs/grafana/latest/datasources/aws-cloudwatch/template-queries-cloudwatch/#selecting-attributes\"\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  See the documentation for more details\n                </a>\n              </>\n            }\n          />\n          <InlineField\n            label=\"Filters\"\n            labelWidth={20}\n            tooltip={\n              <>\n                <a\n                  href=\"https://grafana.com/docs/grafana/latest/datasources/aws-cloudwatch/template-queries-cloudwatch/#selecting-attributes\"\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  Pre-defined ec2:DescribeInstances filters/tags\n                </a>\n                {' and the values to filter on. Tags should be formatted tag:<name>.'}\n              </>\n            }\n          >\n            <MultiFilter\n              filters={parsedQuery.ec2Filters}\n              onChange={(filters) => {\n                onChange({ ...parsedQuery, ec2Filters: filters });\n              }}\n              keyPlaceholder=\"filter/tag\"\n            />\n          </InlineField>\n        </>\n      )}\n      {parsedQuery.queryType === VariableQueryType.ResourceArns && (\n        <>\n          <VariableTextField\n            value={parsedQuery.resourceType}\n            onBlur={(value: string) => onQueryChange({ ...parsedQuery, resourceType: value })}\n            label=\"Resource type\"\n          />\n          <InlineField label=\"Tags\" labelWidth={20} tooltip=\"Tags to filter the returned values on.\">\n            <MultiFilter\n              filters={parsedQuery.tags}\n              onChange={(filters) => {\n                onChange({ ...parsedQuery, tags: filters });\n              }}\n              keyPlaceholder=\"tag\"\n            />\n          </InlineField>\n        </>\n      )}\n      {parsedQuery.queryType === VariableQueryType.LogGroups && (\n        <VariableTextField\n          value={query.logGroupPrefix ?? ''}\n          onBlur={(value: string) => onQueryChange({ ...parsedQuery, logGroupPrefix: value })}\n          label=\"Log group prefix\"\n        />\n      )}\n    </>\n  );\n};\n","import { from, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CustomVariableSupport, DataQueryRequest, DataQueryResponse } from '@grafana/data';\n\nimport { VariableQueryEditor } from './components/VariableQueryEditor/VariableQueryEditor';\nimport { CloudWatchDatasource } from './datasource';\nimport { migrateVariableQuery } from './migrations/variableQueryMigrations';\nimport { VariableQuery, VariableQueryType } from './types';\n\nexport class CloudWatchVariableSupport extends CustomVariableSupport<CloudWatchDatasource, VariableQuery> {\n  private readonly datasource: CloudWatchDatasource;\n\n  constructor(datasource: CloudWatchDatasource) {\n    super();\n    this.datasource = datasource;\n    this.query = this.query.bind(this);\n  }\n\n  editor = VariableQueryEditor;\n\n  query(request: DataQueryRequest<VariableQuery>): Observable<DataQueryResponse> {\n    const queryObj = migrateVariableQuery(request.targets[0]);\n    return from(this.execute(queryObj)).pipe(map((data) => ({ data })));\n  }\n\n  async execute(query: VariableQuery) {\n    try {\n      switch (query.queryType) {\n        case VariableQueryType.Regions:\n          return this.handleRegionsQuery();\n        case VariableQueryType.Namespaces:\n          return this.handleNamespacesQuery();\n        case VariableQueryType.Metrics:\n          return this.handleMetricsQuery(query);\n        case VariableQueryType.DimensionKeys:\n          return this.handleDimensionKeysQuery(query);\n        case VariableQueryType.DimensionValues:\n          return this.handleDimensionValuesQuery(query);\n        case VariableQueryType.EBSVolumeIDs:\n          return this.handleEbsVolumeIdsQuery(query);\n        case VariableQueryType.EC2InstanceAttributes:\n          return this.handleEc2InstanceAttributeQuery(query);\n        case VariableQueryType.ResourceArns:\n          return this.handleResourceARNsQuery(query);\n        case VariableQueryType.Statistics:\n          return this.handleStatisticsQuery();\n        case VariableQueryType.LogGroups:\n          return this.handleLogGroupsQuery(query);\n      }\n    } catch (error) {\n      console.error(`Could not run CloudWatchMetricFindQuery ${query}`, error);\n      return [];\n    }\n  }\n\n  async handleLogGroupsQuery({ region, logGroupPrefix }: VariableQuery) {\n    const logGroups = await this.datasource.describeLogGroups({ region, logGroupNamePrefix: logGroupPrefix });\n    return logGroups.map((s) => ({\n      text: s,\n      value: s,\n      expandable: true,\n    }));\n  }\n\n  async handleRegionsQuery() {\n    const regions = await this.datasource.getRegions();\n    return regions.map((s: { label: string; value: string }) => ({\n      text: s.label,\n      value: s.value,\n      expandable: true,\n    }));\n  }\n\n  async handleNamespacesQuery() {\n    const namespaces = await this.datasource.getNamespaces();\n    return namespaces.map((s: { label: string; value: string }) => ({\n      text: s.label,\n      value: s.value,\n      expandable: true,\n    }));\n  }\n\n  async handleMetricsQuery({ namespace, region }: VariableQuery) {\n    const metrics = await this.datasource.getMetrics(namespace, region);\n    return metrics.map((s: { label: string; value: string }) => ({\n      text: s.label,\n      value: s.value,\n      expandable: true,\n    }));\n  }\n\n  async handleDimensionKeysQuery({ namespace, region }: VariableQuery) {\n    const keys = await this.datasource.getDimensionKeys(namespace, region);\n    return keys.map((s: { label: string; value: string }) => ({\n      text: s.label,\n      value: s.value,\n      expandable: true,\n    }));\n  }\n\n  async handleDimensionValuesQuery({ namespace, region, dimensionKey, metricName, dimensionFilters }: VariableQuery) {\n    if (!dimensionKey || !metricName) {\n      return [];\n    }\n    const keys = await this.datasource.getDimensionValues(\n      region,\n      namespace,\n      metricName,\n      dimensionKey,\n      dimensionFilters ?? {}\n    );\n    return keys.map((s: { label: string; value: string }) => ({\n      text: s.label,\n      value: s.value,\n      expandable: true,\n    }));\n  }\n\n  async handleEbsVolumeIdsQuery({ region, instanceID }: VariableQuery) {\n    if (!instanceID) {\n      return [];\n    }\n    const ids = await this.datasource.getEbsVolumeIds(region, instanceID);\n    return ids.map((s: { label: string; value: string }) => ({\n      text: s.label,\n      value: s.value,\n      expandable: true,\n    }));\n  }\n\n  async handleEc2InstanceAttributeQuery({ region, attributeName, ec2Filters }: VariableQuery) {\n    if (!attributeName) {\n      return [];\n    }\n    const values = await this.datasource.getEc2InstanceAttribute(region, attributeName, ec2Filters ?? {});\n    return values.map((s: { label: string; value: string }) => ({\n      text: s.label,\n      value: s.value,\n      expandable: true,\n    }));\n  }\n\n  async handleResourceARNsQuery({ region, resourceType, tags }: VariableQuery) {\n    if (!resourceType) {\n      return [];\n    }\n    const keys = await this.datasource.getResourceARNs(region, resourceType, tags ?? {});\n    return keys.map((s: { label: string; value: string }) => ({\n      text: s.label,\n      value: s.value,\n      expandable: true,\n    }));\n  }\n\n  async handleStatisticsQuery() {\n    return this.datasource.standardStatistics.map((s: string) => ({\n      text: s,\n      value: s,\n      expandable: true,\n    }));\n  }\n}\n","import { cloneDeep, find, findLast, isEmpty, isString, set } from 'lodash';\nimport React from 'react';\nimport { from, lastValueFrom, merge, Observable, of, throwError, zip } from 'rxjs';\nimport { catchError, concatMap, finalize, map, mergeMap, repeat, scan, share, takeWhile, tap } from 'rxjs/operators';\n\nimport {\n  DataFrame,\n  DataQueryError,\n  DataQueryErrorType,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  DataSourceWithLogsContextSupport,\n  dateMath,\n  dateTimeFormat,\n  FieldType,\n  LoadingState,\n  LogRowModel,\n  rangeUtil,\n  ScopedVars,\n  TimeRange,\n} from '@grafana/data';\nimport { DataSourceWithBackend, FetchError, getBackendSrv, toDataQueryResponse } from '@grafana/runtime';\nimport { RowContextOptions } from '@grafana/ui/src/components/Logs/LogRowContextProvider';\nimport { notifyApp } from 'app/core/actions';\nimport { config } from 'app/core/config';\nimport { createErrorNotification } from 'app/core/copy/appNotification';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { getTemplateSrv, TemplateSrv } from 'app/features/templating/template_srv';\nimport { VariableWithMultiSupport } from 'app/features/variables/types';\nimport { store } from 'app/store/store';\nimport { AppNotificationTimeout } from 'app/types';\n\nimport { CloudWatchAnnotationSupport } from './annotationSupport';\nimport { SQLCompletionItemProvider } from './cloudwatch-sql/completion/CompletionItemProvider';\nimport { ThrottlingErrorMessage } from './components/ThrottlingErrorMessage';\nimport { isCloudWatchAnnotationQuery, isCloudWatchLogsQuery, isCloudWatchMetricsQuery } from './guards';\nimport { CloudWatchLanguageProvider } from './language_provider';\nimport memoizedDebounce from './memoizedDebounce';\nimport { MetricMathCompletionItemProvider } from './metric-math/completion/CompletionItemProvider';\nimport { migrateMetricQuery } from './migrations/metricQueryMigrations';\nimport {\n  CloudWatchAnnotationQuery,\n  CloudWatchJsonData,\n  CloudWatchLogsQuery,\n  CloudWatchLogsQueryStatus,\n  CloudWatchLogsRequest,\n  CloudWatchMetricsQuery,\n  CloudWatchQuery,\n  DescribeLogGroupsRequest,\n  Dimensions,\n  GetLogEventsRequest,\n  GetLogGroupFieldsRequest,\n  GetLogGroupFieldsResponse,\n  LogAction,\n  MetricEditorMode,\n  MetricQuery,\n  MetricQueryType,\n  MetricRequest,\n  MultiFilters,\n  StartQueryRequest,\n  TSDBResponse,\n} from './types';\nimport { addDataLinksToLogsResponse } from './utils/datalinks';\nimport { runWithRetry } from './utils/logsRetry';\nimport { increasingInterval } from './utils/rxjs/increasingInterval';\nimport { CloudWatchVariableSupport } from './variables';\n\nconst DS_QUERY_ENDPOINT = '/api/ds/query';\n\n// Constants also defined in tsdb/cloudwatch/cloudwatch.go\nexport const LOG_IDENTIFIER_INTERNAL = '__log__grafana_internal__';\nexport const LOGSTREAM_IDENTIFIER_INTERNAL = '__logstream__grafana_internal__';\n\nconst displayAlert = (datasourceName: string, region: string) =>\n  store.dispatch(\n    notifyApp(\n      createErrorNotification(\n        `CloudWatch request limit reached in ${region} for data source ${datasourceName}`,\n        '',\n        undefined,\n        React.createElement(ThrottlingErrorMessage, { region }, null)\n      )\n    )\n  );\n\nconst displayCustomError = (title: string, message: string) =>\n  store.dispatch(notifyApp(createErrorNotification(title, message)));\n\nexport class CloudWatchDatasource\n  extends DataSourceWithBackend<CloudWatchQuery, CloudWatchJsonData>\n  implements DataSourceWithLogsContextSupport<CloudWatchLogsQuery>\n{\n  proxyUrl: any;\n  defaultRegion: any;\n  datasourceName: string;\n  languageProvider: CloudWatchLanguageProvider;\n  sqlCompletionItemProvider: SQLCompletionItemProvider;\n\n  metricMathCompletionItemProvider: MetricMathCompletionItemProvider;\n\n  tracingDataSourceUid?: string;\n  logsTimeout: string;\n  defaultLogGroups: string[];\n\n  type = 'cloudwatch';\n  standardStatistics = ['Average', 'Maximum', 'Minimum', 'Sum', 'SampleCount'];\n\n  debouncedAlert: (datasourceName: string, region: string) => void = memoizedDebounce(\n    displayAlert,\n    AppNotificationTimeout.Error\n  );\n  debouncedCustomAlert: (title: string, message: string) => void = memoizedDebounce(\n    displayCustomError,\n    AppNotificationTimeout.Error\n  );\n  logQueries: Record<string, { id: string; region: string; statsQuery: boolean }> = {};\n\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<CloudWatchJsonData>,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv(),\n    private readonly timeSrv: TimeSrv = getTimeSrv()\n  ) {\n    super(instanceSettings);\n    this.proxyUrl = instanceSettings.url;\n    this.defaultRegion = instanceSettings.jsonData.defaultRegion;\n    this.datasourceName = instanceSettings.name;\n    this.languageProvider = new CloudWatchLanguageProvider(this);\n    this.tracingDataSourceUid = instanceSettings.jsonData.tracingDatasourceUid;\n    this.logsTimeout = instanceSettings.jsonData.logsTimeout || '15m';\n    this.defaultLogGroups = instanceSettings.jsonData.defaultLogGroups || [];\n    this.sqlCompletionItemProvider = new SQLCompletionItemProvider(this, this.templateSrv);\n    this.metricMathCompletionItemProvider = new MetricMathCompletionItemProvider(this, this.templateSrv);\n    this.variables = new CloudWatchVariableSupport(this);\n    this.annotations = CloudWatchAnnotationSupport;\n  }\n\n  filterQuery(query: CloudWatchQuery) {\n    return query.hide !== true || (isCloudWatchMetricsQuery(query) && query.id !== '');\n  }\n\n  query(options: DataQueryRequest<CloudWatchQuery>): Observable<DataQueryResponse> {\n    options = cloneDeep(options);\n\n    let queries = options.targets.filter(this.filterQuery);\n    const { logQueries, metricsQueries, annotationQueries } = this.getTargetsByQueryMode(queries);\n\n    const dataQueryResponses: Array<Observable<DataQueryResponse>> = [];\n    if (logQueries.length > 0) {\n      dataQueryResponses.push(this.handleLogQueries(logQueries, options));\n    }\n\n    if (metricsQueries.length > 0) {\n      dataQueryResponses.push(this.handleMetricQueries(metricsQueries, options));\n    }\n\n    if (annotationQueries.length > 0) {\n      dataQueryResponses.push(this.handleAnnotationQuery(annotationQueries, options));\n    }\n    // No valid targets, return the empty result to save a round trip.\n    if (isEmpty(dataQueryResponses)) {\n      return of({\n        data: [],\n        state: LoadingState.Done,\n      });\n    }\n\n    return merge(...dataQueryResponses);\n  }\n\n  /**\n   * Handle log query. The log query works by starting the query on the CloudWatch and then periodically polling for\n   * results.\n   * @param logQueries\n   * @param options\n   */\n  handleLogQueries = (\n    logQueries: CloudWatchLogsQuery[],\n    options: DataQueryRequest<CloudWatchQuery>\n  ): Observable<DataQueryResponse> => {\n    const queryParams = logQueries.map((target: CloudWatchLogsQuery) => ({\n      queryString: target.expression || '',\n      refId: target.refId,\n      logGroupNames: target.logGroupNames || this.defaultLogGroups,\n      region: this.replace(this.getActualRegion(target.region), options.scopedVars, true, 'region'),\n    }));\n\n    const validLogQueries = queryParams.filter((item) => item.logGroupNames?.length);\n    if (logQueries.length > validLogQueries.length) {\n      return of({ data: [], error: { message: 'Log group is required' } });\n    }\n\n    // No valid targets, return the empty result to save a round trip.\n    if (isEmpty(validLogQueries)) {\n      return of({ data: [], state: LoadingState.Done });\n    }\n\n    const startTime = new Date();\n    const timeoutFunc = () => {\n      return Date.now() >= startTime.valueOf() + rangeUtil.intervalToMs(this.logsTimeout);\n    };\n\n    return runWithRetry(\n      (targets: StartQueryRequest[]) => {\n        return this.makeLogActionRequest('StartQuery', targets, {\n          makeReplacements: true,\n          scopedVars: options.scopedVars,\n          skipCache: true,\n        });\n      },\n      queryParams,\n      timeoutFunc\n    ).pipe(\n      mergeMap(({ frames, error }: { frames: DataFrame[]; error?: DataQueryError }) =>\n        // This queries for the results\n        this.logsQuery(\n          frames.map((dataFrame) => ({\n            queryId: dataFrame.fields[0].values.get(0),\n            region: dataFrame.meta?.custom?.['Region'] ?? 'default',\n            refId: dataFrame.refId!,\n            statsGroups: (logQueries.find((target) => target.refId === dataFrame.refId)! as CloudWatchLogsQuery)\n              .statsGroups,\n          })),\n          timeoutFunc\n        ).pipe(\n          map((response: DataQueryResponse) => {\n            if (!response.error && error) {\n              response.error = error;\n            }\n            return response;\n          })\n        )\n      ),\n      mergeMap((dataQueryResponse) => {\n        return from(\n          (async () => {\n            await addDataLinksToLogsResponse(\n              dataQueryResponse,\n              options,\n              this.timeSrv.timeRange(),\n              this.replace.bind(this),\n              this.expandVariableToArray.bind(this),\n              this.getActualRegion.bind(this),\n              this.tracingDataSourceUid\n            );\n\n            return dataQueryResponse;\n          })()\n        );\n      })\n    );\n  };\n\n  filterMetricQuery(query: CloudWatchMetricsQuery): boolean {\n    const { region, metricQueryType, metricEditorMode, expression, metricName, namespace, sqlExpression, statistic } =\n      query;\n    if (!region) {\n      return false;\n    }\n    if (metricQueryType === MetricQueryType.Search && metricEditorMode === MetricEditorMode.Builder) {\n      return !!namespace && !!metricName && !!statistic;\n    } else if (metricQueryType === MetricQueryType.Search && metricEditorMode === MetricEditorMode.Code) {\n      return !!expression;\n    } else if (metricQueryType === MetricQueryType.Query) {\n      // still TBD how to validate the visual query builder for SQL\n      return !!sqlExpression;\n    }\n\n    throw new Error('invalid metric editor mode');\n  }\n\n  replaceMetricQueryVars(\n    query: CloudWatchMetricsQuery,\n    options: DataQueryRequest<CloudWatchQuery>\n  ): CloudWatchMetricsQuery {\n    query.region = this.templateSrv.replace(this.getActualRegion(query.region), options.scopedVars);\n    query.namespace = this.replace(query.namespace, options.scopedVars, true, 'namespace');\n    query.metricName = this.replace(query.metricName, options.scopedVars, true, 'metric name');\n    query.dimensions = this.convertDimensionFormat(query.dimensions ?? {}, options.scopedVars);\n    query.statistic = this.templateSrv.replace(query.statistic, options.scopedVars);\n    query.period = String(this.getPeriod(query, options)); // use string format for period in graph query, and alerting\n    query.id = this.templateSrv.replace(query.id, options.scopedVars);\n    query.expression = this.templateSrv.replace(query.expression, options.scopedVars);\n    query.sqlExpression = this.templateSrv.replace(query.sqlExpression, options.scopedVars, 'raw');\n\n    return query;\n  }\n\n  handleMetricQueries = (\n    metricQueries: CloudWatchMetricsQuery[],\n    options: DataQueryRequest<CloudWatchQuery>\n  ): Observable<DataQueryResponse> => {\n    const timezoneUTCOffset = dateTimeFormat(Date.now(), {\n      timeZone: options.timezone,\n      format: 'Z',\n    }).replace(':', '');\n\n    const validMetricsQueries = metricQueries\n      .filter(this.filterMetricQuery)\n      .map((q: CloudWatchMetricsQuery): MetricQuery => {\n        const migratedQuery = migrateMetricQuery(q);\n        const migratedAndIterpolatedQuery = this.replaceMetricQueryVars(migratedQuery, options);\n\n        return {\n          timezoneUTCOffset,\n          intervalMs: options.intervalMs,\n          maxDataPoints: options.maxDataPoints,\n          ...migratedAndIterpolatedQuery,\n          type: 'timeSeriesQuery',\n          datasource: this.getRef(),\n        };\n      });\n\n    // No valid targets, return the empty result to save a round trip.\n    if (isEmpty(validMetricsQueries)) {\n      return of({ data: [] });\n    }\n\n    const request = {\n      from: options?.range?.from.valueOf().toString(),\n      to: options?.range?.to.valueOf().toString(),\n      queries: validMetricsQueries,\n    };\n\n    return this.performTimeSeriesQuery(request, options.range);\n  };\n\n  handleAnnotationQuery(\n    queries: CloudWatchAnnotationQuery[],\n    options: DataQueryRequest<CloudWatchQuery>\n  ): Observable<DataQueryResponse> {\n    return this.awsRequest(DS_QUERY_ENDPOINT, {\n      from: options.range.from.valueOf().toString(),\n      to: options.range.to.valueOf().toString(),\n      queries: queries.map((query) => ({\n        ...query,\n        statistic: this.templateSrv.replace(query.statistic),\n        region: this.templateSrv.replace(this.getActualRegion(query.region)),\n        namespace: this.templateSrv.replace(query.namespace),\n        metricName: this.templateSrv.replace(query.metricName),\n        dimensions: this.convertDimensionFormat(query.dimensions ?? {}, {}),\n        period: query.period ?? '',\n        actionPrefix: query.actionPrefix ?? '',\n        alarmNamePrefix: query.alarmNamePrefix ?? '',\n        type: 'annotationQuery',\n        datasource: this.getRef(),\n      })),\n    }).pipe(\n      map((r) => {\n        const frames = toDataQueryResponse({ data: r }).data as DataFrame[];\n        return { data: frames };\n      })\n    );\n  }\n\n  /**\n   * Checks progress and polls data of a started logs query with some retry logic.\n   * @param queryParams\n   */\n  logsQuery(\n    queryParams: Array<{\n      queryId: string;\n      refId: string;\n      limit?: number;\n      region: string;\n      statsGroups?: string[];\n    }>,\n    timeoutFunc: () => boolean\n  ): Observable<DataQueryResponse> {\n    this.logQueries = {};\n    queryParams.forEach((param) => {\n      this.logQueries[param.refId] = {\n        id: param.queryId,\n        region: param.region,\n        statsQuery: (param.statsGroups?.length ?? 0) > 0 ?? false,\n      };\n    });\n\n    const dataFrames = increasingInterval({ startPeriod: 100, endPeriod: 1000, step: 300 }).pipe(\n      concatMap((_) => this.makeLogActionRequest('GetQueryResults', queryParams, { skipCache: true })),\n      repeat(),\n      share()\n    );\n\n    const consecutiveFailedAttempts = dataFrames.pipe(\n      scan(\n        ({ failures, prevRecordsMatched }, frames) => {\n          failures++;\n          for (const frame of frames) {\n            const recordsMatched = frame.meta?.stats?.find((stat) => stat.displayName === 'Records scanned')?.value!;\n            if (recordsMatched > (prevRecordsMatched[frame.refId!] ?? 0)) {\n              failures = 0;\n            }\n            prevRecordsMatched[frame.refId!] = recordsMatched;\n          }\n\n          return { failures, prevRecordsMatched };\n        },\n        { failures: 0, prevRecordsMatched: {} as Record<string, number> }\n      ),\n      map(({ failures }) => failures),\n      share()\n    );\n\n    const queryResponse: Observable<DataQueryResponse> = zip(dataFrames, consecutiveFailedAttempts).pipe(\n      tap(([dataFrames]) => {\n        for (const frame of dataFrames) {\n          if (\n            [\n              CloudWatchLogsQueryStatus.Complete,\n              CloudWatchLogsQueryStatus.Cancelled,\n              CloudWatchLogsQueryStatus.Failed,\n            ].includes(frame.meta?.custom?.['Status']) &&\n            this.logQueries.hasOwnProperty(frame.refId!)\n          ) {\n            delete this.logQueries[frame.refId!];\n          }\n        }\n      }),\n      map(([dataFrames, failedAttempts]) => {\n        if (timeoutFunc()) {\n          for (const frame of dataFrames) {\n            set(frame, 'meta.custom.Status', CloudWatchLogsQueryStatus.Cancelled);\n          }\n        }\n\n        return {\n          data: dataFrames,\n          key: 'test-key',\n          state: dataFrames.every((dataFrame) =>\n            [\n              CloudWatchLogsQueryStatus.Complete,\n              CloudWatchLogsQueryStatus.Cancelled,\n              CloudWatchLogsQueryStatus.Failed,\n            ].includes(dataFrame.meta?.custom?.['Status'])\n          )\n            ? LoadingState.Done\n            : LoadingState.Loading,\n          error: timeoutFunc()\n            ? {\n                message: `error: query timed out after ${failedAttempts} attempts`,\n                type: DataQueryErrorType.Timeout,\n              }\n            : undefined,\n        };\n      }),\n      takeWhile(({ state }) => state !== LoadingState.Error && state !== LoadingState.Done, true)\n    );\n\n    return withTeardown(queryResponse, () => this.stopQueries());\n  }\n\n  stopQueries() {\n    if (Object.keys(this.logQueries).length > 0) {\n      this.makeLogActionRequest(\n        'StopQuery',\n        Object.values(this.logQueries).map((logQuery) => ({ queryId: logQuery.id, region: logQuery.region })),\n        {\n          makeReplacements: false,\n          skipCache: true,\n        }\n      ).pipe(\n        finalize(() => {\n          this.logQueries = {};\n        })\n      );\n    }\n  }\n\n  async describeLogGroups(params: DescribeLogGroupsRequest): Promise<string[]> {\n    const dataFrames = await lastValueFrom(this.makeLogActionRequest('DescribeLogGroups', [params]));\n\n    const logGroupNames = dataFrames[0]?.fields[0]?.values.toArray() ?? [];\n    return logGroupNames;\n  }\n\n  async getLogGroupFields(params: GetLogGroupFieldsRequest): Promise<GetLogGroupFieldsResponse> {\n    const dataFrames = await lastValueFrom(this.makeLogActionRequest('GetLogGroupFields', [params]));\n\n    const fieldNames = dataFrames[0].fields[0].values.toArray();\n    const fieldPercentages = dataFrames[0].fields[1].values.toArray();\n    const getLogGroupFieldsResponse = {\n      logGroupFields: fieldNames.map((val, i) => ({ name: val, percent: fieldPercentages[i] })) ?? [],\n    };\n\n    return getLogGroupFieldsResponse;\n  }\n\n  getLogRowContext = async (\n    row: LogRowModel,\n    { limit = 10, direction = 'BACKWARD' }: RowContextOptions = {},\n    query?: CloudWatchLogsQuery\n  ): Promise<{ data: DataFrame[] }> => {\n    let logStreamField = null;\n    let logField = null;\n\n    for (const field of row.dataFrame.fields) {\n      if (field.name === LOGSTREAM_IDENTIFIER_INTERNAL) {\n        logStreamField = field;\n        if (logField !== null) {\n          break;\n        }\n      } else if (field.name === LOG_IDENTIFIER_INTERNAL) {\n        logField = field;\n        if (logStreamField !== null) {\n          break;\n        }\n      }\n    }\n\n    const requestParams: GetLogEventsRequest = {\n      limit,\n      startFromHead: direction !== 'BACKWARD',\n      region: query?.region,\n      logGroupName: parseLogGroupName(logField!.values.get(row.rowIndex)),\n      logStreamName: logStreamField!.values.get(row.rowIndex),\n    };\n\n    if (direction === 'BACKWARD') {\n      requestParams.endTime = row.timeEpochMs;\n    } else {\n      requestParams.startTime = row.timeEpochMs;\n    }\n\n    const dataFrames = await lastValueFrom(this.makeLogActionRequest('GetLogEvents', [requestParams]));\n\n    return {\n      data: dataFrames,\n    };\n  };\n\n  getVariables() {\n    return this.templateSrv.getVariables().map((v) => `$${v.name}`);\n  }\n\n  getPeriod(target: CloudWatchMetricsQuery, options: any) {\n    let period = this.templateSrv.replace(target.period, options.scopedVars) as any;\n    if (period && period.toLowerCase() !== 'auto') {\n      if (/^\\d+$/.test(period)) {\n        period = parseInt(period, 10);\n      } else {\n        period = rangeUtil.intervalToSeconds(period);\n      }\n\n      if (period < 1) {\n        period = 1;\n      }\n    }\n\n    return period || '';\n  }\n\n  performTimeSeriesQuery(request: MetricRequest, { from, to }: TimeRange): Observable<any> {\n    return this.awsRequest(DS_QUERY_ENDPOINT, request).pipe(\n      map((res) => {\n        const dataframes: DataFrame[] = toDataQueryResponse({ data: res }).data;\n        if (!dataframes || dataframes.length <= 0) {\n          return { data: [] };\n        }\n\n        const lastError = findLast(res.results, (v) => !!v.error);\n\n        dataframes.forEach((frame) => {\n          frame.fields.forEach((field) => {\n            if (field.type === FieldType.time) {\n              // field.config.interval is populated in order for Grafana to fill in null values at frame intervals\n              field.config.interval = frame.meta?.custom?.period * 1000;\n            }\n          });\n        });\n\n        return {\n          data: dataframes,\n          error: lastError ? { message: lastError.error } : null,\n        };\n      }),\n      catchError((err) => {\n        const isFrameError = err.data.results;\n\n        // Error is not frame specific\n        if (!isFrameError && err.data && err.data.message === 'Metric request error' && err.data.error) {\n          err.message = err.data.error;\n          return throwError(() => err);\n        }\n\n        // The error is either for a specific frame or for all the frames\n        const results: Array<{ error?: string }> = Object.values(err.data.results);\n        const firstErrorResult = results.find((r) => r.error);\n        if (firstErrorResult) {\n          err.message = firstErrorResult.error;\n        }\n\n        if (results.some((r) => r.error && /^Throttling:.*/.test(r.error))) {\n          const failedRedIds = Object.keys(err.data.results);\n          const regionsAffected = Object.values(request.queries).reduce(\n            (res: string[], { refId, region }) =>\n              (refId && !failedRedIds.includes(refId)) || res.includes(region) ? res : [...res, region],\n            []\n          ) as string[];\n          regionsAffected.forEach((region) => {\n            const actualRegion = this.getActualRegion(region);\n            if (actualRegion) {\n              this.debouncedAlert(this.datasourceName, actualRegion);\n            }\n          });\n        }\n\n        return throwError(() => err);\n      })\n    );\n  }\n\n  doMetricResourceRequest(subtype: string, parameters?: any): Promise<Array<{ text: any; label: any; value: any }>> {\n    return this.getResource(subtype, parameters);\n  }\n\n  makeLogActionRequest(\n    subtype: LogAction,\n    queryParams: CloudWatchLogsRequest[],\n    options: {\n      scopedVars?: ScopedVars;\n      makeReplacements?: boolean;\n      skipCache?: boolean;\n    } = {\n      makeReplacements: true,\n      skipCache: false,\n    }\n  ): Observable<DataFrame[]> {\n    const range = this.timeSrv.timeRange();\n\n    const requestParams = {\n      from: range.from.valueOf().toString(),\n      to: range.to.valueOf().toString(),\n      queries: queryParams.map((param: CloudWatchLogsRequest) => ({\n        refId: (param as StartQueryRequest).refId || 'A',\n        intervalMs: 1, // dummy\n        maxDataPoints: 1, // dummy\n        datasource: this.getRef(),\n        type: 'logAction',\n        subtype: subtype,\n        ...param,\n      })),\n    };\n\n    if (options.makeReplacements) {\n      requestParams.queries.forEach((query: CloudWatchLogsRequest) => {\n        const fieldsToReplace: Array<\n          keyof (GetLogEventsRequest & StartQueryRequest & DescribeLogGroupsRequest & GetLogGroupFieldsRequest)\n        > = ['queryString', 'logGroupNames', 'logGroupName', 'logGroupNamePrefix'];\n\n        const anyQuery: any = query;\n        for (const fieldName of fieldsToReplace) {\n          if (query.hasOwnProperty(fieldName)) {\n            if (Array.isArray(anyQuery[fieldName])) {\n              anyQuery[fieldName] = anyQuery[fieldName].flatMap((val: string) => {\n                if (fieldName === 'logGroupNames') {\n                  return this.expandVariableToArray(val, options.scopedVars || {});\n                }\n                return this.replace(val, options.scopedVars, true, fieldName);\n              });\n            } else {\n              anyQuery[fieldName] = this.replace(anyQuery[fieldName], options.scopedVars, true, fieldName);\n            }\n          }\n        }\n        // TODO: seems to be some sort of bug that we don't really send region with all queries. This means\n        //  if you select different than default region in editor you will get results for autocomplete from wrong\n        //  region.\n        if (anyQuery.region) {\n          anyQuery.region = this.replace(anyQuery.region, options.scopedVars, true, 'region');\n          anyQuery.region = this.getActualRegion(anyQuery.region);\n        }\n      });\n    }\n\n    const resultsToDataFrames = (val: any): DataFrame[] => toDataQueryResponse(val).data || [];\n    let headers = {};\n    if (options.skipCache) {\n      headers = {\n        'X-Cache-Skip': true,\n      };\n    }\n\n    return this.awsRequest(DS_QUERY_ENDPOINT, requestParams, headers).pipe(\n      map((response) => resultsToDataFrames({ data: response })),\n      catchError((err: FetchError) => {\n        if (config.featureToggles.datasourceQueryMultiStatus && err.status === 207) {\n          throw err;\n        }\n\n        if (err.status === 400) {\n          throw err;\n        }\n\n        if (err.data?.error) {\n          throw err.data.error;\n        } else if (err.data?.message) {\n          // In PROD we do not supply .error\n          throw err.data.message;\n        }\n\n        throw err;\n      })\n    );\n  }\n\n  getRegions(): Promise<Array<{ label: string; value: string; text: string }>> {\n    return this.doMetricResourceRequest('regions').then((regions: any) => [\n      { label: 'default', value: 'default', text: 'default' },\n      ...regions,\n    ]);\n  }\n\n  getNamespaces() {\n    return this.doMetricResourceRequest('namespaces');\n  }\n\n  async getMetrics(namespace: string | undefined, region?: string) {\n    if (!namespace) {\n      return [];\n    }\n\n    return this.doMetricResourceRequest('metrics', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      namespace: this.templateSrv.replace(namespace),\n    });\n  }\n\n  async getAllMetrics(region: string): Promise<Array<{ metricName: string; namespace: string }>> {\n    const values = await this.doMetricResourceRequest('all-metrics', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n    });\n\n    return values.map((v) => ({ metricName: v.value, namespace: v.text }));\n  }\n\n  async getDimensionKeys(\n    namespace: string | undefined,\n    region: string,\n    dimensionFilters: Dimensions = {},\n    metricName = ''\n  ) {\n    if (!namespace) {\n      return [];\n    }\n\n    return this.doMetricResourceRequest('dimension-keys', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      namespace: this.templateSrv.replace(namespace),\n      dimensionFilters: JSON.stringify(this.convertDimensionFormat(dimensionFilters, {})),\n      metricName,\n    });\n  }\n\n  async getDimensionValues(\n    region: string,\n    namespace: string | undefined,\n    metricName: string | undefined,\n    dimensionKey: string,\n    filterDimensions: {}\n  ) {\n    if (!namespace || !metricName) {\n      return [];\n    }\n\n    const values = await this.doMetricResourceRequest('dimension-values', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      namespace: this.templateSrv.replace(namespace),\n      metricName: this.templateSrv.replace(metricName.trim()),\n      dimensionKey: this.templateSrv.replace(dimensionKey),\n      dimensions: JSON.stringify(this.convertDimensionFormat(filterDimensions, {})),\n    });\n\n    return values;\n  }\n\n  getEbsVolumeIds(region: string, instanceId: string) {\n    return this.doMetricResourceRequest('ebs-volume-ids', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      instanceId: this.templateSrv.replace(instanceId),\n    });\n  }\n\n  getEc2InstanceAttribute(region: string, attributeName: string, filters: any) {\n    return this.doMetricResourceRequest('ec2-instance-attribute', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      attributeName: this.templateSrv.replace(attributeName),\n      filters: JSON.stringify(this.convertMultiFilterFormat(filters, 'filter key')),\n    });\n  }\n\n  getResourceARNs(region: string, resourceType: string, tags: any) {\n    return this.doMetricResourceRequest('resource-arns', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      resourceType: this.templateSrv.replace(resourceType),\n      tags: JSON.stringify(this.convertMultiFilterFormat(tags, 'tag name')),\n    });\n  }\n\n  targetContainsTemplate(target: any) {\n    return (\n      this.templateSrv.containsTemplate(target.region) ||\n      this.templateSrv.containsTemplate(target.namespace) ||\n      this.templateSrv.containsTemplate(target.metricName) ||\n      this.templateSrv.containsTemplate(target.expression!) ||\n      target.logGroupNames?.some((logGroup: string) => this.templateSrv.containsTemplate(logGroup)) ||\n      find(target.dimensions, (v, k) => this.templateSrv.containsTemplate(k) || this.templateSrv.containsTemplate(v))\n    );\n  }\n\n  awsRequest(url: string, data: MetricRequest, headers: Record<string, any> = {}): Observable<TSDBResponse> {\n    const options = {\n      method: 'POST',\n      url,\n      data,\n      headers,\n    };\n\n    return getBackendSrv()\n      .fetch<TSDBResponse>(options)\n      .pipe(map((result) => result.data));\n  }\n\n  getDefaultRegion() {\n    return this.defaultRegion;\n  }\n\n  getActualRegion(region?: string) {\n    if (region === 'default' || region === undefined || region === '') {\n      return this.getDefaultRegion();\n    }\n    return region;\n  }\n\n  showContextToggle() {\n    return true;\n  }\n\n  convertToCloudWatchTime(date: any, roundUp: any) {\n    if (isString(date)) {\n      date = dateMath.parse(date, roundUp);\n    }\n    return Math.round(date.valueOf() / 1000);\n  }\n\n  convertDimensionFormat(dimensions: Dimensions, scopedVars: ScopedVars) {\n    return Object.entries(dimensions).reduce((result, [key, value]) => {\n      key = this.replace(key, scopedVars, true, 'dimension keys');\n\n      if (Array.isArray(value)) {\n        return { ...result, [key]: value };\n      }\n\n      if (!value) {\n        return { ...result, [key]: null };\n      }\n\n      const newValues = this.expandVariableToArray(value, scopedVars);\n      return { ...result, [key]: newValues };\n    }, {});\n  }\n\n  // get the value for a given template variable\n  expandVariableToArray(value: string, scopedVars: ScopedVars): string[] {\n    const variableName = this.templateSrv.getVariableName(value);\n    const valueVar = this.templateSrv.getVariables().find(({ name }) => {\n      return name === variableName;\n    });\n    if (variableName && valueVar) {\n      if ((valueVar as unknown as VariableWithMultiSupport).multi) {\n        return this.templateSrv.replace(value, scopedVars, 'pipe').split('|');\n      }\n      return [this.templateSrv.replace(value, scopedVars)];\n    }\n    return [value];\n  }\n\n  convertMultiFilterFormat(multiFilters: MultiFilters, fieldName?: string) {\n    return Object.entries(multiFilters).reduce((result, [key, values]) => {\n      key = this.replace(key, {}, true, fieldName);\n      if (!values) {\n        return { ...result, [key]: null };\n      }\n      const initialVal: string[] = [];\n      const newValues = values.reduce((result, value) => {\n        const vals = this.expandVariableToArray(value, {});\n        return [...result, ...vals];\n      }, initialVal);\n      return { ...result, [key]: newValues };\n    }, {});\n  }\n\n  replace(\n    target?: string,\n    scopedVars?: ScopedVars,\n    displayErrorIfIsMultiTemplateVariable?: boolean,\n    fieldName?: string\n  ) {\n    if (displayErrorIfIsMultiTemplateVariable && !!target) {\n      const variable = this.templateSrv\n        .getVariables()\n        .find(({ name }) => name === this.templateSrv.getVariableName(target));\n      if (variable && (variable as unknown as VariableWithMultiSupport).multi) {\n        this.debouncedCustomAlert(\n          'CloudWatch templating error',\n          `Multi template variables are not supported for ${fieldName || target}`\n        );\n      }\n    }\n\n    return this.templateSrv.replace(target, scopedVars);\n  }\n\n  getQueryDisplayText(query: CloudWatchQuery) {\n    if (query.queryMode === 'Logs') {\n      return query.expression ?? '';\n    } else {\n      return JSON.stringify(query);\n    }\n  }\n\n  getTargetsByQueryMode = (targets: CloudWatchQuery[]) => {\n    const logQueries: CloudWatchLogsQuery[] = [];\n    const metricsQueries: CloudWatchMetricsQuery[] = [];\n    const annotationQueries: CloudWatchAnnotationQuery[] = [];\n\n    targets.forEach((query) => {\n      if (isCloudWatchAnnotationQuery(query)) {\n        annotationQueries.push(query);\n      } else if (isCloudWatchLogsQuery(query)) {\n        logQueries.push(query);\n      } else {\n        metricsQueries.push(query);\n      }\n    });\n\n    return {\n      logQueries,\n      metricsQueries,\n      annotationQueries,\n    };\n  };\n\n  interpolateVariablesInQueries(queries: CloudWatchQuery[], scopedVars: ScopedVars): CloudWatchQuery[] {\n    if (!queries.length) {\n      return queries;\n    }\n\n    return queries.map((query) => ({\n      ...query,\n      region: this.getActualRegion(this.replace(query.region, scopedVars)),\n      ...(isCloudWatchMetricsQuery(query) && this.interpolateMetricsQueryVariables(query, scopedVars)),\n    }));\n  }\n\n  interpolateMetricsQueryVariables(\n    query: CloudWatchMetricsQuery,\n    scopedVars: ScopedVars\n  ): Pick<CloudWatchMetricsQuery, 'alias' | 'metricName' | 'namespace' | 'period' | 'dimensions' | 'sqlExpression'> {\n    return {\n      alias: this.replace(query.alias, scopedVars),\n      metricName: this.replace(query.metricName, scopedVars),\n      namespace: this.replace(query.namespace, scopedVars),\n      period: this.replace(query.period, scopedVars),\n      sqlExpression: this.replace(query.sqlExpression, scopedVars),\n      dimensions: this.convertDimensionFormat(query.dimensions ?? {}, scopedVars),\n    };\n  }\n}\n\nfunction withTeardown<T = any>(observable: Observable<T>, onUnsubscribe: () => void): Observable<T> {\n  return new Observable<T>((subscriber) => {\n    const innerSub = observable.subscribe({\n      next: (val) => subscriber.next(val),\n      error: (err) => subscriber.next(err),\n      complete: () => subscriber.complete(),\n    });\n\n    return () => {\n      innerSub.unsubscribe();\n      onUnsubscribe();\n    };\n  });\n}\n\nfunction parseLogGroupName(logIdentifier: string): string {\n  const colonIndex = logIdentifier.lastIndexOf(':');\n  return logIdentifier.slice(colonIndex + 1);\n}\n","import { DataSourcePlugin } from '@grafana/data';\n\nimport { ConfigEditor } from './components/ConfigEditor';\nimport LogsCheatSheet from './components/LogsCheatSheet';\nimport { MetaInspector } from './components/MetaInspector';\nimport { PanelQueryEditor } from './components/PanelQueryEditor';\nimport { CloudWatchDatasource } from './datasource';\nimport { CloudWatchJsonData, CloudWatchQuery } from './types';\n\nexport const plugin = new DataSourcePlugin<CloudWatchDatasource, CloudWatchQuery, CloudWatchJsonData>(\n  CloudWatchDatasource\n)\n  .setQueryEditorHelp(LogsCheatSheet)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(PanelQueryEditor)\n  .setMetadataInspector(MetaInspector);\n","import React, { FC, useEffect, useState } from 'react';\nimport { useDebounce } from 'react-use';\n\nimport { ConnectionConfig } from '@grafana/aws-sdk';\nimport {\n  rangeUtil,\n  DataSourcePluginOptionsEditorProps,\n  onUpdateDatasourceJsonDataOption,\n  updateDatasourcePluginJsonDataOption,\n  updateDatasourcePluginOption,\n} from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { Input, InlineField } from '@grafana/ui';\nimport { notifyApp } from 'app/core/actions';\nimport { createWarningNotification } from 'app/core/copy/appNotification';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { store } from 'app/store/store';\n\nimport { CloudWatchDatasource } from '../datasource';\nimport { CloudWatchJsonData, CloudWatchSecureJsonData } from '../types';\n\nimport { LogGroupSelector } from './LogGroupSelector';\nimport { XrayLinkConfig } from './XrayLinkConfig';\n\nexport type Props = DataSourcePluginOptionsEditorProps<CloudWatchJsonData, CloudWatchSecureJsonData>;\n\nexport const ConfigEditor: FC<Props> = (props: Props) => {\n  const { options } = props;\n  const { defaultLogGroups, logsTimeout, defaultRegion } = options.jsonData;\n  const [saved, setSaved] = useState(!!options.version && options.version > 1);\n\n  const datasource = useDatasource(options.name, saved);\n  useAuthenticationWarning(options.jsonData);\n  const logsTimeoutError = useTimoutValidation(logsTimeout);\n  useEffect(() => {\n    setSaved(false);\n  }, [\n    props.options.jsonData.assumeRoleArn,\n    props.options.jsonData.authType,\n    props.options.jsonData.defaultRegion,\n    props.options.jsonData.endpoint,\n    props.options.jsonData.externalId,\n    props.options.jsonData.profile,\n    props.options.secureJsonData?.accessKey,\n    props.options.secureJsonData?.secretKey,\n  ]);\n\n  const saveOptions = async (): Promise<void> => {\n    if (saved) {\n      return;\n    }\n    await getBackendSrv()\n      .put(`/api/datasources/${options.id}`, options)\n      .then((result: { datasource: any }) => {\n        updateDatasourcePluginOption(props, 'version', result.datasource.version);\n      });\n    setSaved(true);\n  };\n\n  return (\n    <>\n      <ConnectionConfig\n        {...props}\n        loadRegions={\n          datasource &&\n          (() => datasource!.getRegions().then((r) => r.filter((r) => r.value !== 'default').map((v) => v.value)))\n        }\n      >\n        <InlineField label=\"Namespaces of Custom Metrics\" labelWidth={28} tooltip=\"Namespaces of Custom Metrics.\">\n          <Input\n            width={60}\n            placeholder=\"Namespace1,Namespace2\"\n            value={options.jsonData.customMetricsNamespaces || ''}\n            onChange={onUpdateDatasourceJsonDataOption(props, 'customMetricsNamespaces')}\n          />\n        </InlineField>\n      </ConnectionConfig>\n\n      <h3 className=\"page-heading\">CloudWatch Logs</h3>\n      <div className=\"gf-form-group\">\n        <InlineField\n          label=\"Timeout\"\n          labelWidth={28}\n          tooltip='Custom timeout for CloudWatch Logs insights queries which have max concurrency limits. Default is 15 minutes. Must be a valid duration string, such as \"15m\" \"30s\" \"2000ms\" etc.'\n          invalid={Boolean(logsTimeoutError)}\n        >\n          <Input\n            width={60}\n            placeholder=\"15m\"\n            value={options.jsonData.logsTimeout || ''}\n            onChange={onUpdateDatasourceJsonDataOption(props, 'logsTimeout')}\n            title={'The timeout must be a valid duration string, such as \"15m\" \"30s\" \"2000ms\" etc.'}\n          />\n        </InlineField>\n        <InlineField\n          label=\"Default Log Groups\"\n          labelWidth={28}\n          tooltip=\"Optionally, specify default log groups for CloudWatch Logs queries.\"\n        >\n          <LogGroupSelector\n            region={defaultRegion ?? ''}\n            selectedLogGroups={defaultLogGroups ?? []}\n            datasource={datasource}\n            onChange={(logGroups) => {\n              updateDatasourcePluginJsonDataOption(props, 'defaultLogGroups', logGroups);\n            }}\n            onOpenMenu={saveOptions}\n            width={60}\n            saved={saved}\n          />\n        </InlineField>\n      </div>\n\n      <XrayLinkConfig\n        onChange={(uid) => updateDatasourcePluginJsonDataOption(props, 'tracingDatasourceUid', uid)}\n        datasourceUid={options.jsonData.tracingDatasourceUid}\n      />\n    </>\n  );\n};\n\nfunction useAuthenticationWarning(jsonData: CloudWatchJsonData) {\n  const addWarning = (message: string) => {\n    store.dispatch(notifyApp(createWarningNotification('CloudWatch Authentication', message)));\n  };\n\n  useEffect(() => {\n    if (jsonData.authType === 'arn') {\n      addWarning('Since grafana 7.3 authentication type \"arn\" is deprecated, falling back to default SDK provider');\n    } else if (jsonData.authType === 'credentials' && !jsonData.profile && !jsonData.database) {\n      addWarning(\n        'As of grafana 7.3 authentication type \"credentials\" should be used only for shared file credentials. \\\n             If you don\\'t have a credentials file, switch to the default SDK provider for extracting credentials \\\n             from environment variables or IAM roles'\n      );\n    }\n  }, [jsonData.authType, jsonData.database, jsonData.profile]);\n}\n\nfunction useDatasource(datasourceName: string, saved: boolean) {\n  const [datasource, setDatasource] = useState<CloudWatchDatasource>();\n\n  useEffect(() => {\n    // reload the datasource when it's saved\n    if (!saved) {\n      return;\n    }\n    getDatasourceSrv()\n      .loadDatasource(datasourceName)\n      .then((datasource) => {\n        // It's really difficult to type .loadDatasource() because it's inherently untyped as it involves two JSON.parse()'s\n        // So a \"as\" type assertion here is a necessary evil.\n        setDatasource(datasource as CloudWatchDatasource);\n      });\n  }, [datasourceName, saved]);\n\n  return datasource;\n}\n\nfunction useTimoutValidation(value: string | undefined) {\n  const [err, setErr] = useState<undefined | string>(undefined);\n  useDebounce(\n    () => {\n      if (value) {\n        try {\n          rangeUtil.describeInterval(value);\n          setErr(undefined);\n        } catch (e) {\n          if (e instanceof Error) {\n            setErr(e.toString());\n          }\n        }\n      } else {\n        setErr(undefined);\n      }\n    },\n    350,\n    [value]\n  );\n  return err;\n}\n","import { groupBy } from 'lodash';\nimport React, { useMemo } from 'react';\n\nimport { MetadataInspectorProps } from '@grafana/data';\n\nimport { CloudWatchDatasource } from '../datasource';\nimport { CloudWatchQuery, CloudWatchJsonData } from '../types';\n\nexport type Props = MetadataInspectorProps<CloudWatchDatasource, CloudWatchQuery, CloudWatchJsonData>;\n\nexport function MetaInspector({ data = [] }: Props) {\n  const rows = useMemo(() => groupBy(data, 'refId'), [data]);\n\n  return (\n    <>\n      <table className=\"filter-table form-inline\">\n        <thead>\n          <tr>\n            <th>RefId</th>\n            <th>Metric Data Query ID</th>\n            <th>Metric Data Query Expression</th>\n            <th>Period</th>\n            <th />\n          </tr>\n        </thead>\n        {Object.entries(rows).map(([refId, frames], idx) => {\n          if (!frames.length) {\n            return null;\n          }\n\n          const frame = frames[0];\n          const custom = frame.meta?.custom;\n          if (!custom) {\n            return null;\n          }\n\n          return (\n            <tbody key={idx}>\n              <tr>\n                <td>{refId}</td>\n                <td>{custom.id}</td>\n                <td>{frame.meta?.executedQueryString}</td>\n                <td>{custom.period}</td>\n              </tr>\n            </tbody>\n          );\n        })}\n      </table>\n    </>\n  );\n}\n","Object.defineProperty(exports,\"__esModule\",{value:!0});var e,t=require(\"react\"),a=(e=t)&&\"object\"==typeof e&&\"default\"in e?e.default:e,n=require(\"@grafana/ui\"),l=require(\"@grafana/data\"),o=require(\"lodash\"),s=function(){return(s=Object.assign||function(e){for(var t,a=1,n=arguments.length;a<n;a++)for(var l in t=arguments[a])Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l]);return e}).apply(this,arguments)};function i(e,t,a,n){return new(a||(a=Promise))((function(l,o){function s(e){try{r(n.next(e))}catch(e){o(e)}}function i(e){try{r(n.throw(e))}catch(e){o(e)}}function r(e){var t;e.done?l(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(s,i)}r((n=n.apply(e,t||[])).next())}))}function r(e,t){var a,n,l,o,s={label:0,sent:function(){if(1&l[0])throw l[1];return l[1]},trys:[],ops:[]};return o={next:i(0),throw:i(1),return:i(2)},\"function\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function i(o){return function(i){return function(o){if(a)throw new TypeError(\"Generator is already executing.\");for(;s;)try{if(a=1,n&&(l=2&o[0]?n.return:o[0]?n.throw||((l=n.return)&&l.call(n),0):n.next)&&!(l=l.call(n,o[1])).done)return l;switch(n=0,l&&(o=[2&o[0],l.value]),o[0]){case 0:case 1:l=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,n=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(l=s.trys,(l=l.length>0&&l[l.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!l||o[1]>l[0]&&o[1]<l[3])){s.label=o[1];break}if(6===o[0]&&s.label<l[1]){s.label=l[1],l=o;break}if(l&&s.label<l[2]){s.label=l[2],s.ops.push(o);break}l[2]&&s.ops.pop(),s.trys.pop();continue}o=t.call(e,s)}catch(e){o=[6,e],n=0}finally{a=l=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,i])}}}function u(e,t){var a=\"function\"==typeof Symbol&&e[Symbol.iterator];if(!a)return e;var n,l,o=a.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)s.push(n.value)}catch(e){l={error:e}}finally{try{n&&!n.done&&(a=o.return)&&a.call(o)}finally{if(l)throw l.error}}return s}var c,d=[\"af-south-1\",\"ap-east-1\",\"ap-northeast-1\",\"ap-northeast-2\",\"ap-northeast-3\",\"ap-south-1\",\"ap-southeast-1\",\"ap-southeast-2\",\"ca-central-1\",\"cn-north-1\",\"cn-northwest-1\",\"eu-central-1\",\"eu-north-1\",\"eu-west-1\",\"eu-west-2\",\"eu-west-3\",\"me-south-1\",\"sa-east-1\",\"us-east-1\",\"us-east-2\",\"us-gov-east-1\",\"us-gov-west-1\",\"us-iso-east-1\",\"us-isob-east-1\",\"us-west-1\",\"us-west-2\"];(c=exports.AwsAuthType||(exports.AwsAuthType={})).Keys=\"keys\",c.Credentials=\"credentials\",c.Default=\"default\",c.EC2IAMRole=\"ec2_iam_role\",c.ARN=\"arn\";var p,h=[{label:\"Workspace IAM Role\",value:exports.AwsAuthType.EC2IAMRole},{label:\"AWS SDK Default\",value:exports.AwsAuthType.Default},{label:\"Access & secret key\",value:exports.AwsAuthType.Keys},{label:\"Credentials file\",value:exports.AwsAuthType.Credentials}],f=function(e){return{value:e,label:e}},v=function(e){var o,i,r,c,p,v,m,g,y,b=u(t.useState((e.standardRegions||d).map(f)),2),D=b[0],w=b[1],E=e.loadRegions,A=e.onOptionsChange,S=e.skipHeader,C=void 0!==S&&S,x=e.skipEndpoint,V=void 0!==x&&x,I=e.options,F=I.jsonData.profile;void 0===F&&(F=I.database);var O=window.grafanaBootData.settings,R=null!==(o=O.awsAllowedAuthProviders)&&void 0!==o?o:[exports.AwsAuthType.Default,exports.AwsAuthType.Keys,exports.AwsAuthType.Credentials],j=null===(i=O.awsAssumeRoleEnabled)||void 0===i||i,K=h.find((function(e){return e.value===I.jsonData.authType}));return t.useEffect((function(){!K&&R.length&&A(s(s({},I),{jsonData:s(s({},I.jsonData),{authType:R[0]})}))}),[K,I,A]),t.useEffect((function(){E&&E().then((function(e){return w(e.map(f))}))}),[E]),a.createElement(n.FieldSet,{label:C?\"\":\"Connection Details\",\"data-testid\":\"connection-config\"},a.createElement(n.InlineField,{label:\"Authentication Provider\",labelWidth:28,tooltip:\"Specify which AWS credentials chain to use.\"},a.createElement(n.Select,{\"aria-label\":\"Authentication Provider\",className:\"width-30\",value:K,options:h.filter((function(e){return R.includes(e.value)})),defaultValue:I.jsonData.authType,onChange:function(t){l.onUpdateDatasourceJsonDataOptionSelect(e,\"authType\")(t)},menuShouldPortal:!0})),\"credentials\"===I.jsonData.authType&&a.createElement(n.InlineField,{label:\"Credentials Profile Name\",labelWidth:28,tooltip:\"Credentials profile name, as specified in ~/.aws/credentials, leave blank for default.\"},a.createElement(n.Input,{\"aria-label\":\"Credentials Profile Name\",className:\"width-30\",placeholder:\"default\",value:F,onChange:l.onUpdateDatasourceJsonDataOption(e,\"profile\")})),\"keys\"===I.jsonData.authType&&a.createElement(a.Fragment,null,a.createElement(n.InlineField,{label:\"Access Key ID\",labelWidth:28},(null===(r=e.options.secureJsonFields)||void 0===r?void 0:r.accessKey)?a.createElement(n.ButtonGroup,{className:\"width-30\"},a.createElement(n.Input,{disabled:!0,placeholder:\"Configured\"}),a.createElement(n.ToolbarButton,{icon:\"edit\",tooltip:\"Edit Access Key ID\",type:\"button\",onClick:l.onUpdateDatasourceResetOption(e,\"accessKey\")})):a.createElement(n.Input,{\"aria-label\":\"Access Key ID\",className:\"width-30\",value:null!==(p=null===(c=I.secureJsonData)||void 0===c?void 0:c.accessKey)&&void 0!==p?p:\"\",onChange:l.onUpdateDatasourceSecureJsonDataOption(e,\"accessKey\")})),a.createElement(n.InlineField,{label:\"Secret Access Key\",labelWidth:28},(null===(v=e.options.secureJsonFields)||void 0===v?void 0:v.secretKey)?a.createElement(n.ButtonGroup,{className:\"width-30\"},a.createElement(n.Input,{disabled:!0,placeholder:\"Configured\"}),a.createElement(n.ToolbarButton,{icon:\"edit\",type:\"button\",tooltip:\"Edit Secret Access Key\",onClick:l.onUpdateDatasourceResetOption(e,\"secretKey\")})):a.createElement(n.Input,{\"aria-label\":\"Secret Access Key\",className:\"width-30\",value:null!==(g=null===(m=I.secureJsonData)||void 0===m?void 0:m.secretKey)&&void 0!==g?g:\"\",onChange:l.onUpdateDatasourceSecureJsonDataOption(e,\"secretKey\")}))),j&&a.createElement(a.Fragment,null,a.createElement(n.InlineField,{label:\"Assume Role ARN\",labelWidth:28,tooltip:\"Optionally, specify the ARN of a role to assume. Specifying a role here will ensure that the selected authentication provider is used to assume the specified role rather than using the credentials directly. Leave blank if you don't need to assume a role at all\"},a.createElement(n.Input,{\"aria-label\":\"Assume Role ARN\",className:\"width-30\",placeholder:\"arn:aws:iam:*\",value:I.jsonData.assumeRoleArn||\"\",onChange:l.onUpdateDatasourceJsonDataOption(e,\"assumeRoleArn\")})),a.createElement(n.InlineField,{label:\"External ID\",labelWidth:28,tooltip:\"If you are assuming a role in another account, that has been created with an external ID, specify the external ID here.\"},a.createElement(n.Input,{\"aria-label\":\"External ID\",className:\"width-30\",placeholder:\"External ID\",value:I.jsonData.externalId||\"\",onChange:l.onUpdateDatasourceJsonDataOption(e,\"externalId\")}))),!V&&a.createElement(n.InlineField,{label:\"Endpoint\",labelWidth:28,tooltip:\"Optionally, specify a custom endpoint for the service\"},a.createElement(n.Input,{\"aria-label\":\"Endpoint\",className:\"width-30\",placeholder:null!==(y=e.defaultEndpoint)&&void 0!==y?y:\"https://{service}.{region}.amazonaws.com\",value:I.jsonData.endpoint||\"\",onChange:l.onUpdateDatasourceJsonDataOption(e,\"endpoint\")})),a.createElement(n.InlineField,{label:\"Default Region\",labelWidth:28,tooltip:\"Specify the region, such as for US West (Oregon) use ` us-west-2 ` as the region.\"},a.createElement(n.Select,{\"aria-label\":\"Default Region\",className:\"width-30\",value:D.find((function(e){return e.value===I.jsonData.defaultRegion})),options:D,defaultValue:I.jsonData.defaultRegion,allowCustomValue:!0,onChange:l.onUpdateDatasourceJsonDataOptionSelect(e,\"defaultRegion\"),formatCreateLabel:function(e){return\"Use region: \"+e},menuShouldPortal:!0})),e.children)};function m(e){var l=this,c=u(t.useState(e.value||e.default||null),2),d=c[0],p=c[1],h=u(t.useState(d?[d]:[]),2),f=h[0],v=h[1],m=u(t.useState(e.dependencies),2),g=m[0],y=m[1],b=u(t.useState(!1),2),D=b[0],w=b[1],E=u(t.useState(!1),2),A=E[0],S=E[1],C=t.useMemo((function(){var t=[{label:\"default (\"+e.default+\")\",value:\"__default\",description:\"Default value set in the data source\"}];return e.value&&\"__default\"!==e.value&&t.push({label:e.value,value:e.value}),t}),[e.default,e.value]),x=u(t.useState(e.default?C:[]),2),V=x[0],I=x[1];t.useEffect((function(){void 0!==e.resources&&v(e.resources)}),[e.resources]),t.useEffect((function(){var t=e.default?C:[];f.length?(f.forEach((function(e){var a=\"string\"==typeof e?e:e.value;t.find((function(e){return e.value===a}))||(\"string\"==typeof e?t.push({label:e,value:e}):t.push(e))})),I(t)):I([])}),[f,C,e.default]),t.useEffect((function(){o.isEqual(e.dependencies,g)||(S(!1),p(null),e.onChange(null),y(e.dependencies))}),[e,g]);return a.createElement(n.InlineField,{label:e.label,labelWidth:e.labelWidth,tooltip:e.tooltip,hidden:e.hidden},a.createElement(\"div\",{\"data-testid\":e[\"data-testid\"],title:e.title},a.createElement(n.Select,s({},e,{\"aria-label\":e.label,options:V,onChange:function(t){e.onChange(t),t.value&&p(t.value)},isLoading:D,className:e.className||\"min-width-6\",onOpenMenu:function(){return e.fetch&&i(l,void 0,void 0,(function(){return r(this,(function(t){switch(t.label){case 0:w(!0),t.label=1;case 1:return t.trys.push([1,,3,4]),[4,i(l,void 0,void 0,(function(){var t;return r(this,(function(a){switch(a.label){case 0:return A?[2]:e.saveOptions?[4,e.saveOptions()]:[3,2];case 1:a.sent(),a.label=2;case 2:return a.trys.push([2,,4,5]),[4,e.fetch()];case 3:return t=a.sent(),v(t),[3,5];case 4:return S(!0),[7];case 5:return[2]}}))}))];case 2:return t.sent(),[3,4];case 3:return w(!1),[7];case 4:return[2]}}))}))},menuShouldPortal:!0}))))}(p=exports.FillValueOptions||(exports.FillValueOptions={}))[p.Previous=0]=\"Previous\",p[p.Null=1]=\"Null\",p[p.Value=2]=\"Value\";var g=[{label:\"Previous Value\",value:exports.FillValueOptions.Previous},{label:\"NULL\",value:exports.FillValueOptions.Null},{label:\"Value\",value:exports.FillValueOptions.Value}];function y(e){return\"string\"==typeof e?e:e.map((function(e){return function(e){return\"'\"+String(e).replace(/'/g,\"''\")+\"'\"}(e)})).join(\",\")}exports.ConfigSelect=function(e){var t,n,l=e.options.jsonData,o={title:l.defaultRegion?\"\":\"select a default region\",labelWidth:28,className:\"width-30\"},i=[e.options.jsonData.assumeRoleArn,e.options.jsonData.authType,e.options.jsonData.defaultRegion,e.options.jsonData.endpoint,e.options.jsonData.externalId,e.options.jsonData.profile,null===(t=e.options.secureJsonData)||void 0===t?void 0:t.accessKey,null===(n=e.options.secureJsonData)||void 0===n?void 0:n.secretKey].concat(e.dependencies);return a.createElement(m,s({label:e.label,\"data-testid\":e[\"data-testid\"],onChange:e.onChange,fetch:e.fetch,value:e.value,saveOptions:e.saveOptions,dependencies:i,hidden:e.hidden,disabled:e.disabled||!l.defaultRegion,allowCustomValue:e.allowCustomValue,autoFocus:e.autoFocus,backspaceRemovesValue:e.backspaceRemovesValue,className:e.className,invalid:e.invalid,isClearable:e.isClearable,isMulti:e.isMulti,inputId:e.inputId,showAllSelectedWhenOpen:e.showAllSelectedWhenOpen,maxMenuHeight:e.maxMenuHeight,minMenuHeight:e.minMenuHeight,maxVisibleValues:e.maxVisibleValues,menuPlacement:e.menuPlacement,menuPosition:e.menuPosition,noOptionsMessage:e.noOptionsMessage,onBlur:e.onBlur,onCreateOption:e.onCreateOption,onInputChange:e.onInputChange,placeholder:e.placeholder,width:e.width,isOptionDisabled:e.isOptionDisabled},o))},exports.ConnectionConfig=v,exports.FillValueSelect=function(e){var t,l,o;return a.createElement(a.Fragment,null,a.createElement(n.InlineField,{label:\"Fill value\",tooltip:\"value to fill missing points\"},a.createElement(n.Select,{\"aria-label\":\"Fill value\",options:g,value:null!==(l=null===(t=e.query.fillMode)||void 0===t?void 0:t.mode)&&void 0!==l?l:exports.FillValueOptions.Previous,onChange:function(t){var a=t.value;e.onChange(s(s({},e.query),{fillMode:s(s({},e.query.fillMode),{mode:a})})),e.onRunQuery()},className:\"width-12\",menuShouldPortal:!0})),(null===(o=e.query.fillMode)||void 0===o?void 0:o.mode)===exports.FillValueOptions.Value&&a.createElement(n.InlineField,{label:\"Value\",labelWidth:11},a.createElement(n.Input,{type:\"number\",\"aria-label\":\"Value\",value:e.query.fillMode.value,onChange:function(t){var a=t.currentTarget;return e.onChange(s(s({},e.query),{fillMode:{mode:exports.FillValueOptions.Value,value:a.valueAsNumber}}))},onBlur:function(){return e.onRunQuery()}})))},exports.FormatSelect=function(e){return a.createElement(n.InlineField,{label:\"Format as\",labelWidth:11},a.createElement(n.Select,{\"aria-label\":\"Format as\",options:e.options,value:e.query.format,onChange:function(t){e.onChange(s(s({},e.query),{format:t.value||0})),e.onRunQuery()},className:\"width-12\",menuShouldPortal:!0}))},exports.InlineInput=function(e){return a.createElement(n.InlineField,{label:e.label,labelWidth:28,tooltip:e.tooltip,hidden:e.hidden,disabled:e.disabled},a.createElement(n.Input,{\"data-testid\":e[\"data-testid\"],className:\"width-30\",value:e.value,onChange:e.onChange,placeholder:e.placeholder,disabled:e.disabled}))},exports.QueryCodeEditor=function(e){var l=e.getSuggestions,i=e.query,r=o.defaults(e.query,{rawSQL:\"\"}).rawSQL,u=t.useRef([]);return t.useEffect((function(){u.current=l(i)}),[l,i]),a.createElement(n.CodeEditor,s({language:e.language,value:r,onBlur:function(t){var a=s(s({},e.query),{rawSQL:t});e.onChange(a),e.onRunQuery()},showMiniMap:!1,showLineNumbers:!0,getSuggestions:function(){return u.current},height:\"240px\"},e.editorProps))},exports.ResourceSelector=m,exports.SIGV4ConnectionConfig=function(e){var t,n,l,o,i=e.onOptionsChange,r=e.options,u={onOptionsChange:function(e){var t,a,n,l,o=s(s({},r),{jsonData:s(s({},r.jsonData),{sigV4AuthType:e.jsonData.authType,sigV4Profile:e.jsonData.profile,sigV4AssumeRoleArn:e.jsonData.assumeRoleArn,sigV4ExternalId:e.jsonData.externalId,sigV4Region:e.jsonData.defaultRegion,sigV4Endpoint:e.jsonData.endpoint}),secureJsonFields:{sigV4AccessKey:null===(t=e.secureJsonFields)||void 0===t?void 0:t.accessKey,sigV4SecretKey:null===(a=e.secureJsonFields)||void 0===a?void 0:a.secretKey},secureJsonData:{sigV4AccessKey:null===(n=e.secureJsonData)||void 0===n?void 0:n.accessKey,sigV4SecretKey:null===(l=e.secureJsonData)||void 0===l?void 0:l.secretKey}});i(o)},options:s(s({},r),{jsonData:s(s({},r.jsonData),{authType:r.jsonData.sigV4AuthType,profile:r.jsonData.sigV4Profile,assumeRoleArn:r.jsonData.sigV4AssumeRoleArn,externalId:r.jsonData.sigV4ExternalId,defaultRegion:r.jsonData.sigV4Region,endpoint:r.jsonData.sigV4Endpoint}),secureJsonFields:{accessKey:null===(t=r.secureJsonFields)||void 0===t?void 0:t.sigV4AccessKey,secretKey:null===(n=r.secureJsonFields)||void 0===n?void 0:n.sigV4SecretKey},secureJsonData:{accessKey:null===(l=r.secureJsonData)||void 0===l?void 0:l.sigV4AccessKey,secretKey:null===(o=r.secureJsonData)||void 0===o?void 0:o.sigV4SecretKey}})};return a.createElement(a.Fragment,null,a.createElement(\"div\",{className:\"gf-form\"},a.createElement(\"h6\",null,\"SigV4 Auth Details\")),a.createElement(v,s({},u,{skipHeader:!0,skipEndpoint:!0})))},exports.appendTemplateVariablesAsSuggestions=function(e,t){var a=e(),l=[];return a.getVariables().forEach((function(e){var t=\"$\"+e.name,o=a.replace(t);o===t&&(o=\"\"),l.push({label:t,kind:n.CodeEditorSuggestionItemKind.Text,detail:\"(Template Variable) \"+o})})),t.concat(l)},exports.applySQLTemplateVariables=function(e,t,a){var n=a();return s(s({},e),{rawSQL:n.replace(e.rawSQL,t,y)})},exports.awsAuthProviderOptions=h,exports.filterSQLQuery=function(e){return!!e.rawSQL},exports.standardRegions=d;\n//# sourceMappingURL=index.production.js.map\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./dist/index.production.js');\n} else {\n  module.exports = require('./dist/index.development.js');\n}\n","'use strict';\n\n// do not edit .js files directly - edit src/index.jst\n\n\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (key === '_owner' && a.$$typeof) {\n        // React-specific: avoid traversing React elements' _owner.\n        //  _owner contains circular references\n        // and is not needed when comparing the actual elements (and not their owners)\n        continue;\n      }\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n","module.exports = require('./lib/jsurl');","/**\n * Copyright (c) 2011 Bruno Jouhier <bruno.jouhier@sage.com>\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n//\n(function(exports) {\n\t\"use strict\";\n\texports.stringify = function stringify(v) {\n\t\tfunction encode(s) {\n\t\t\treturn !/[^\\w-.]/.test(s) ? s : s.replace(/[^\\w-.]/g, function(ch) {\n\t\t\t\tif (ch === '$') return '!';\n\t\t\t\tch = ch.charCodeAt(0);\n\t\t\t\t// thanks to Douglas Crockford for the negative slice trick\n\t\t\t\treturn ch < 0x100 ? '*' + ('00' + ch.toString(16)).slice(-2) : '**' + ('0000' + ch.toString(16)).slice(-4);\n\t\t\t});\n\t\t}\n\n\t\tvar tmpAry;\n\n\t\tswitch (typeof v) {\n\t\t\tcase 'number':\n\t\t\t\treturn isFinite(v) ? '~' + v : '~null';\n\t\t\tcase 'boolean':\n\t\t\t\treturn '~' + v;\n\t\t\tcase 'string':\n\t\t\t\treturn \"~'\" + encode(v);\n\t\t\tcase 'object':\n\t\t\t\tif (!v) return '~null';\n\n\t\t\t\ttmpAry = [];\n\n\t\t\t\tif (Array.isArray(v)) {\n\t\t\t\t\tfor (var i = 0; i < v.length; i++) {\n\t\t\t\t\t\ttmpAry[i] = stringify(v[i]) || '~null';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn '~(' + (tmpAry.join('') || '~') + ')';\n\t\t\t\t} else {\n\t\t\t\t\tfor (var key in v) {\n\t\t\t\t\t\tif (v.hasOwnProperty(key)) {\n\t\t\t\t\t\t\tvar val = stringify(v[key]);\n\n\t\t\t\t\t\t\t// skip undefined and functions\n\t\t\t\t\t\t\tif (val) {\n\t\t\t\t\t\t\t\ttmpAry.push(encode(key) + val);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn '~(' + tmpAry.join('~') + ')';\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\t// function, undefined\n\t\t\t\treturn;\n\t\t}\n\t};\n\n\tvar reserved = {\n\t\t\"true\": true,\n\t\t\"false\": false,\n\t\t\"null\": null\n\t};\n\n\texports.parse = function(s) {\n\t\tif (!s) return s;\n\t\ts = s.replace(/%(25)*27/g, \"'\");\n\t\tvar i = 0,\n\t\t\tlen = s.length;\n\n\t\tfunction eat(expected) {\n\t\t\tif (s.charAt(i) !== expected) throw new Error(\"bad JSURL syntax: expected \" + expected + \", got \" + (s && s.charAt(i)));\n\t\t\ti++;\n\t\t}\n\n\t\tfunction decode() {\n\t\t\tvar beg = i,\n\t\t\t\tch, r = \"\";\n\t\t\twhile (i < len && (ch = s.charAt(i)) !== '~' && ch !== ')') {\n\t\t\t\tswitch (ch) {\n\t\t\t\t\tcase '*':\n\t\t\t\t\t\tif (beg < i) r += s.substring(beg, i);\n\t\t\t\t\t\tif (s.charAt(i + 1) === '*') r += String.fromCharCode(parseInt(s.substring(i + 2, i + 6), 16)), beg = (i += 6);\n\t\t\t\t\t\telse r += String.fromCharCode(parseInt(s.substring(i + 1, i + 3), 16)), beg = (i += 3);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase '!':\n\t\t\t\t\t\tif (beg < i) r += s.substring(beg, i);\n\t\t\t\t\t\tr += '$', beg = ++i;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn r + s.substring(beg, i);\n\t\t}\n\n\t\treturn (function parseOne() {\n\t\t\tvar result, ch, beg;\n\t\t\teat('~');\n\t\t\tswitch (ch = s.charAt(i)) {\n\t\t\t\tcase '(':\n\t\t\t\t\ti++;\n\t\t\t\t\tif (s.charAt(i) === '~') {\n\t\t\t\t\t\tresult = [];\n\t\t\t\t\t\tif (s.charAt(i + 1) === ')') i++;\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\tresult.push(parseOne());\n\t\t\t\t\t\t\t} while (s.charAt(i) === '~');\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult = {};\n\t\t\t\t\t\tif (s.charAt(i) !== ')') {\n\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\tvar key = decode();\n\t\t\t\t\t\t\t\tresult[key] = parseOne();\n\t\t\t\t\t\t\t} while (s.charAt(i) === '~' && ++i);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\teat(')');\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"'\":\n\t\t\t\t\ti++;\n\t\t\t\t\tresult = decode();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbeg = i++;\n\t\t\t\t\twhile (i < len && /[^)~]/.test(s.charAt(i)))\n\t\t\t\t\ti++;\n\t\t\t\t\tvar sub = s.substring(beg, i);\n\t\t\t\t\tif (/[\\d\\-]/.test(ch)) {\n\t\t\t\t\t\tresult = parseFloat(sub);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult = reserved[sub];\n\t\t\t\t\t\tif (typeof result === \"undefined\") throw new Error(\"bad value keyword: \" + sub);\n\t\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t})();\n\t}\n\n\texports.tryParse = function(s, def) {\n\t\ttry {\n\t\t\treturn exports.parse(s);\n\t\t} catch (ex) {\n\t\t\treturn def;\n\t\t}\n\t}\n\n})(typeof exports !== 'undefined' ? exports : (window.JSURL = window.JSURL || {}));\n"],"names":["SELECT","FROM","WHERE","GROUP","ORDER","BY","DESC","ASC","LIMIT","WITH","SCHEMA","KEYWORDS","STATISTICS","AND","LOGICAL_OPERATORS","EQUALS","NOT_EQUALS","COMPARISON_OPERATORS","language","defaultToken","tokenPostfix","ignoreCase","brackets","open","close","token","keywords","operators","builtinFunctions","tokenizer","root","include","cases","whitespace","comments","comment","numbers","strings","next","string","string_double","complexIdentifiers","bracketedIdentifier","quotedIdentifier","conf","lineComment","blockComment","autoClosingPairs","surroundingPairs","DYNAMIC_LABEL_PATTERNS","id","builtInFunctions","map","replace","join","METRIC_MATH_FNS","METRIC_MATH_STATISTIC_KEYWORD_STRINGS","METRIC_MATH_KEYWORDS","METRIC_MATH_OPERATORS","METRIC_MATH_PERIODS","nonNestableStates","escapeRegExp","variables","assignment","nestedCurly","nestedParens","toOption","value","label","appendTemplateVariables","datasource","values","options","getVariables","LogGroupSelector","region","selectedLogGroups","onChange","onRunQuery","onOpenMenu","refId","width","saved","loadingLogGroups","setLoadingLogGroups","useState","availableLogGroups","setAvailableLogGroups","logGroupOptions","useMemo","unionBy","fetchLogGroupOptions","useCallback","async","logGroupNamePrefix","describeLogGroups","err","dispatch","notifyApp","createErrorNotification","JSON","stringify","useEffect","getActualRegion","then","logGroups","newSelectedLogGroups","intersection","l","finally","resetLogGroups","onLogGroupSearchDebounced","debounce","searchTerm","actionMeta","action","test","matchingLogGroups","MultiSelect","inputId","allowCustomValue","v","filter","onBlur","closeMenuOnSelect","isClearable","isOptionDisabled","length","placeholder","maxVisibleValues","noOptionsMessage","isLoading","onInputChange","getStyles","theme","infoText","css","spacing","colors","text","secondary","xRayDsId","XrayLinkConfig","datasourceUid","hasXrayDatasource","Boolean","getDatasourceSrv","getList","pluginId","styles","useStyles2","className","Alert","title","severity","InlineField","htmlFor","labelWidth","tooltip","DataSourcePicker","ds","uid","current","noDefault","raw","_createClass","defineProperties","target","props","i","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_templateObject","freeze","_classCallCheck","instance","TypeError","TemplateTag","_this","this","_len","arguments","transformers","Array","_key","tag","_len2","expressions","_key2","interimTag","bind","transformEndResult","transformString","reduce","processSubstitutions","isArray","transformer","previousTag","template","_len3","substitutions","_key3","apply","undefined","concat","resultSoFar","remainingPart","substitution","transformSubstitution","shift","str","res","transform","onString","onSubstitution","endResult","onEndResult","defaults","separator","conjunction","serial","opts","arrayLength","indent","match","separatorIndex","lastIndexOf","slice","_toConsumableArray","arr","arr2","from","type","Math","min","el","regexp","RegExp","Error","side","trim","toLowerCase","splitBy","includes","split","isValidValue","x","Number","isNaN","replaceWhat","replaceWith","toString","QUERY_COMMANDS","documentation","NUMERIC_OPERATORS","detail","STRING_FUNCTIONS","DATETIME_FUNCTIONS","IP_FUNCTIONS","BOOLEAN_FUNCTIONS","AGGREGATION_FUNCTIONS_STATS","STATS_FUNCS","FIELD_AND_FILTER_FUNCTIONS","FUNCTIONS","pattern","greedy","backticks","alias","quote","regex","command","function","f","keyword","lookbehind","number","punctuation","CLIQ_EXAMPLES","category","examples","expr","stripIndents","stripIndent","renderHighlightedMarkup","code","keyPrefix","grammar","spans","flattenTokens","Prism","types","aliases","content","exampleCategory","LogsCheatSheet","PureComponent","onClickExample","query","renderExpression","onClick","expression","queryMode","logGroupNames","renderLogsCheatSheet","cat","cx","item","j","render","isCloudWatchLogsQuery","cloudwatchQuery","isCloudWatchMetricsQuery","hasOwnProperty","isCloudWatchAnnotationQuery","wildcardOption","FilterItem","metricStat","namespace","metricName","dimensions","dimensionKeys","disableExpressions","onDelete","dimensionsExcludingCurrentKey","currentKey","entries","acc","excludeCurrentKey","state","loadOptions","useAsyncFn","getDimensionValues","result","unshift","useTheme2","getOperatorStyles","InputGroup","Select","change","loading","AccessoryButton","icon","variant","stylesFactory","padding","alignSelf","Dimensions","dimensionFilters","dimensionsToFilterConditions","operator","items","setItems","EditorList","newItems","newDimensions","isEqual","renderItem","makeRenderFilter","JSURL","require","encodeUrl","obj","CloudWatchLink","Component","href","prevProps","panelData","panelDataNew","panelDataOld","request","getExternalLink","setState","range","start","toISOString","end","to","timeType","tz","editorString","isLiveTail","source","rel","Icon","name","byRE","groupsRE","getStatsGroups","b","groups","g","lastIndex","index","exec","push","effect","deps","depsEqual","ref","useRef","isDeepEqual","useRegions","regionsIsLoading","setRegionsIsLoading","regions","setRegions","variableOptionGroup","getRegions","useNamespaces","namespaces","setNamespaces","getNamespaces","useMetrics","metrics","setMetrics","getMetrics","useDimensionKeys","dimensionFilter","setDimensionKeys","useDeepCompareEffect","getDimensionKeys","metricEditorModes","MetricQueryType","editorModes","MetricEditorMode","sqlCodeEditorIsDirty","metricEditorMode","metricQueryType","showConfirm","setShowConfirm","onEditorModeChange","newMetricEditorMode","InlineSelect","find","m","FlexItem","grow","RadioButtonGroup","size","Button","ConfirmModal","isOpen","body","confirmText","dismissText","onConfirm","onDismiss","apiModes","regionIsLoading","EditorHeader","onRegion","commonProps","pick","ExploreMode","rowGap","CloudWatchLogsQueryField","React","constructor","context","super","hint","defaultLogGroups","statsGroups","languageProvider","suggestions","cloudwatchLanguageProvider","history","absoluteRange","prefix","wrapperClasses","labelKey","editor","typeahead","provideCompletionItems","plugins","BracesPlugin","SlatePrism","onlyIn","node","object","getSyntax","prismLanguages","cloudwatch","syntax","ExtraFieldElement","data","showError","error","cleanText","LegacyForms","inputEl","QueryField","additionalPlugins","onChangeQuery","onTypeahead","portalOrigin","disabled","message","fix","labelClass","memo","exploreId","absolute","valueOf","Date","now","InlineFormLabel","MetricStatEditor","onMetricStatChange","validateMetricName","metric","EditorRows","EditorRow","EditorFieldGroup","EditorField","validatedQuery","onNamespaceChange","statistic","standardStatistics","s","startsWith","optional","EditorSwitch","matchExact","e","currentTarget","checked","QueryEditorPropertyType","QueryEditorExpressionType","SQLGenerator","templateSrv","getTemplateSrv","expressionToSqlQuery","select","where","groupBy","orderBy","orderByDirection","limit","parameters","parts","appendSelect","appendFrom","appendWhere","appendGroupBy","appendOrderBy","appendLimit","appendFunction","Function","formatValue","property","isTopLevelExpression","topLevelExpressionsCount","hasChildExpressions","And","andParts","exp","andCombined","wrapInParentheses","Or","Operator","appendOperator","orParts","orCombined","groupByParts","GroupBy","params","p","interpolated","getMetricNameFromExpression","selectExpression","getNamespaceFromExpression","fromExpression","Property","sanitizeOperator","String","flattenOperatorExpressions","flatMap","getFlattenedFilters","sql","getFlattenedGroupBys","setSql","setAggregation","aggregation","AGGREGATIONS","onQueryChange","schemaLabels","curr","getSchemaLabels","withSchemaEnabled","namespaceOptions","metricOptions","existingFilters","unusedDimensionKeys","some","queryWithNoParams","removeMetricName","namespaceParam","FunctionParameter","labelKeys","setNamespace","ev","HTMLInputElement","withSchema","setWithSchema","isMulti","setSchemaLabels","param","setMetricName","OPERATORS","filtersFromQuery","filters","setFilters","cleaned","validExpressions","operatorExpression","validated","setOperatorExpressionValue","makeRenderItem","GroupByItem","fieldName","field","groupBysFromQuery","baseOptions","option","completeExpressions","orderByDirections","setOrderBy","SQLBuilderEditor","sqlString","fullQuery","sqlExpression","sqlPreview","setSQLPreview","Input","val","valueAsNumber","process","extensions","mimetypes","loader","TRIGGER_SUGGEST","registerLanguage","monaco","completionItemProvider","languages","getLanguages","register","monarch","setMonarchTokensProvider","setLanguageConfiguration","registerCompletionItemProvider","getCompletionProvider","MathExpressionQueryField","containerRef","onEditorMount","onDidFocusEditorText","trigger","addCommand","KeyMod","Shift","KeyCode","Enter","getValue","updateElementHeight","containerDiv","getContentHeight","pixelHeight","max","style","height","pixelWidth","clientWidth","layout","onDidContentSizeChange","CodeEditor","monacoOptions","scrollBeyondLastLine","fontSize","lineNumbers","renderLineHighlight","scrollbar","vertical","horizontal","suggestFontSize","wordWrap","top","onBeforeEditorMount","metricMathCompletionItemProvider","onEditorDidMount","SQLCodeEditor","sqlCompletionItemProvider","setRegion","showMiniMap","showLineNumbers","LinkedToken","previous","tokenTypes","isKeyword","Keyword","isWhiteSpace","Whitespace","isParenthesis","Parenthesis","isIdentifier","Identifier","isString","isDoubleQuotedString","Type","isVariable","Variable","isFunction","isNumber","is","isType","endsWith","getPreviousNonWhiteSpaceToken","getPreviousOfType","getPreviousUntil","ignoreTypes","tokens","t","getNextUntil","getPreviousKeyword","getNextNonWhiteSpaceToken","getNextOfType","linkedTokenBuilder","model","position","tokensPerLine","tokenize","lineIndex","offset","_tokenBrand","columnIndex","endColumn","getLineLength","startLineNumber","startColumn","endLineNumber","getValueInRange","newToken","Range","containsPosition","StatementPosition","SuggestionKind","CompletionItemPriority","dynamicLabelsCompletionItemProvider","Delimiter","languageDefinition","triggerCharacters","currentToken","fromPositions","toCompletionItem","rest","insertText","kind","CompletionItemKind","Field","sortText","Medium","High","insertTextRules","CompletionItemInsertTextRule","InsertAsSnippet","DynamicLabelsField","getInputStyles","clientHeight","wrapper","containerStyles","disabledBackground","components","input","borderColor","overviewRulerLanes","Alias","setAlias","propagateOnChange","migrateMetricQuery","migratedQuery","config","_","aliasPatterns","migrateAliasPatterns","period","stat","DEFAULT_QUERY","preparedQuery","deepEqual","prepareQuery","MetricsQueryEditor","setSQLCodeEditorIsDirty","usePreparedMetricsQuery","newQuery","Space","invalid","event","PanelQueryEditor","LogsQueryEditor","CloudWatchAnnotationSupport","prepareAnnotation","isCloudWatchAnnotation","enable","iconColor","builtIn","hide","anno","prefixMatching","actionPrefix","alarmNamePrefix","validPrefixMatchingQuery","validMetricStatQuery","QueryEditor","topSpacing","CompletionItemProvider","templateVariables","getStatementPosition","Unknown","getSuggestionKinds","getSuggestions","suggestionKinds","statementPosition","Promise","reject","SQLTokenTypes","previousNonWhiteSpace","previousKeyword","previousIsSlash","SelectKeyword","AfterSelectKeyword","AfterSelectFuncFirstArgument","FromKeyword","AfterFromKeyword","SchemaFuncFirstArgument","SchemaFuncExtraArgument","AfterFrom","WhereKey","WhereComparisonOperator","WhereValue","AfterWhereValue","AfterGroupByKeywords","AfterGroupBy","AfterOrderByKeywords","AfterOrderByFunction","AfterOrderByDirection","FunctionsWithArguments","Metrics","Namespaces","SchemaKeyword","LabelKeys","WhereKeyword","GroupByKeywords","OrderByKeywords","LimitKeyword","ComparisonOperators","LabelValues","LogicalOperators","FunctionsWithoutArguments","SortOrderDirectionKeyword","getSelectToken","getMetricNameToken","assumedMetricNameToken","assumedStatisticToken","getSelectStatisticToken","getNamespaceToken","fromToken","selectToken","getFromKeywordToken","nextNonWhiteSpace","toUpperCase","assumedNamespaceToken","SQLCompletionItemProvider","addSuggestion","suggestion","namespaceToken","getAllMetrics","uniq","metricNameToken","n","labelKeyTokens","o","MediumHigh","MediumLow","Low","ThrottlingErrorMessage","CloudWatchLanguageProvider","LanguageProvider","initialValues","url","lastValueFrom","awsRequest","startTask","resolve","started","fetchedFieldsCache","time","sortedUniq","fields","results","all","logGroup","getLogGroupFields","logGroupName","Set","cur","logGroupFields","suggs","getFieldCompletionItems","functionSuggestions","searchFunctionType","SearchFunctionType","commandToken","curToken","queryCommand","prevToken","prevNonWhitespaceToken","currentTokenIsFirstArg","handleSortCommand","currentTokenIsAfterCommandAndEmpty","isTokenType","currentTokenIsAfterCommand","nextNonWhitespaceToken","currentTokenIsComma","currentTokenIsCommaOrAfterComma","typeaheadOutput","getFieldAndFilterFunctionCompletionItems","getStatsAggCompletionItems","forEach","group","skipFilter","sugg","boolFuncs","getBoolFuncCompletionItems","fieldsSuggestions","comparisonSuggestions","getComparisonCompletionItems","fetchFields","assign","isStatsQuery","get","offsets","selection","isFirstToken","prev","getCommandCompletionItems","parenthesisToken","maybeFunctionToken","funcsWithFieldArgs","isInsideFunctionParenthesis","maybeKeyword","getPreviousTokenExcluding","isAfterKeyword","handleKeyword","handleComparison","startToken","thisToken","previousCommandToken","handleCommand","isFirstArgument","funcName","exclude","main","func","wait","mem","memoize","leading","args","MetricMathTokenTypes","WithinString","currentFunction","isAfterComma","isWithinSearch","allTokensAfterStartOfSearch","lastComma","SearchFuncThirdArg","SearchFuncSecondArg","PredefinedFuncSecondArg","AfterFunction","PredefinedFunction","KeywordArguments","Operators","Statistic","Period","MetricMathCompletionItemProvider","idx","Value","fromCharCode","createInternalXrayLink","getDataSourceSrv","console","internal","queryType","datasourceName","createAwsConsoleLink","getVariableValue","interpolatedExpression","interpolatedGroups","targetBlank","runWithRetry","queryFun","targets","timeoutFunc","startTime","timerID","subscription","retries","collected","Observable","observer","run","currentQueryParams","subscribe","frames","collectedPreviously","toDataQueryResponse","complete","errorData","keys","errorMessage","errors","queries","q","good","splitErrorData","retry","dataResponse","setTimeout","pow","random","clearTimeout","unsubscribe","subscriber","counter","step","endPeriod","newPeriod","schedule","jsonVariable","migrateMultiFilters","oldFilters","tempFilters","parsedFilters","parse","newFilters","migrateVariableQuery","rawQuery","ec2Filters","tags","isVariableQuery","omit","VariableQueryType","dimensionKey","instanceID","attributeName","resourceType","metricNameQuery","dimensionKeysQuery","dimensionValuesQuery","ebsVolumeIdsQuery","ec2InstanceAttributeQuery","resourceARNsQuery","MultiFilterItem","keyPlaceholder","localKey","setLocalKey","localValue","setLocalValue","newValues","MultiFilter","multiFiltersToFilterConditions","newMultifilters","filterConditionsToMultiFilters","VariableQueryField","VariableTextField","interactive","queryTypes","VariableQueryEditor","parsedQuery","keysForDimensionFilter","sanitizeQuery","hasRegionField","hasNamespaceField","onRegionChange","logGroupPrefix","CloudWatchVariableSupport","CustomVariableSupport","queryObj","execute","pipe","handleRegionsQuery","handleNamespacesQuery","handleMetricsQuery","handleDimensionKeysQuery","handleDimensionValuesQuery","handleEbsVolumeIdsQuery","handleEc2InstanceAttributeQuery","handleResourceARNsQuery","handleStatisticsQuery","handleLogGroupsQuery","expandable","getEbsVolumeIds","getEc2InstanceAttribute","getResourceARNs","DS_QUERY_ENDPOINT","LOG_IDENTIFIER_INTERNAL","LOGSTREAM_IDENTIFIER_INTERNAL","displayAlert","store","displayCustomError","CloudWatchDatasource","DataSourceWithBackend","instanceSettings","timeSrv","getTimeSrv","memoizedDebounce","AppNotificationTimeout","logQueries","queryParams","queryString","scopedVars","validLogQueries","of","isEmpty","LoadingState","rangeUtil","logsTimeout","makeLogActionRequest","makeReplacements","skipCache","mergeMap","logsQuery","dataFrame","queryId","meta","custom","response","dataQueryResponse","replaceFn","getVariableValueFn","getRegion","tracingDatasourceUid","curTarget","interpolatedRegion","xrayLink","links","addDataLinksToLogsResponse","timeRange","expandVariableToArray","tracingDataSourceUid","metricQueries","timezoneUTCOffset","dateTimeFormat","timeZone","timezone","format","validMetricsQueries","filterMetricQuery","migratedAndIterpolatedQuery","replaceMetricQueryVars","intervalMs","maxDataPoints","getRef","performTimeSeriesQuery","row","direction","logStreamField","logField","requestParams","startFromHead","parseLogGroupName","rowIndex","logStreamName","endTime","timeEpochMs","dataFrames","metricsQueries","annotationQueries","proxyUrl","defaultRegion","jsonData","annotations","filterQuery","cloneDeep","getTargetsByQueryMode","dataQueryResponses","handleLogQueries","handleMetricQueries","handleAnnotationQuery","merge","convertDimensionFormat","getPeriod","r","statsQuery","startPeriod","scheduler","asyncScheduler","add","increasingInterval","concatMap","repeat","share","consecutiveFailedAttempts","scan","failures","prevRecordsMatched","frame","recordsMatched","stats","displayName","queryResponse","zip","tap","CloudWatchLogsQueryStatus","failedAttempts","set","every","DataQueryErrorType","takeWhile","observable","onUnsubscribe","stopQueries","innerSub","logQuery","finalize","toArray","fieldNames","fieldPercentages","percent","parseInt","dataframes","lastError","findLast","FieldType","interval","catchError","throwError","firstErrorResult","failedRedIds","actualRegion","debouncedAlert","doMetricResourceRequest","subtype","getResource","fieldsToReplace","anyQuery","headers","resultsToDataFrames","status","filterDimensions","instanceId","convertMultiFilterFormat","targetContainsTemplate","containsTemplate","k","method","getBackendSrv","fetch","getDefaultRegion","showContextToggle","convertToCloudWatchTime","date","roundUp","dateMath","round","variableName","getVariableName","valueVar","multi","multiFilters","displayErrorIfIsMultiTemplateVariable","variable","debouncedCustomAlert","getQueryDisplayText","interpolateVariablesInQueries","interpolateMetricsQueryVariables","logIdentifier","colonIndex","plugin","DataSourcePlugin","setQueryEditorHelp","setConfigEditor","setSaved","version","setDatasource","loadDatasource","useDatasource","addWarning","createWarningNotification","authType","profile","database","useAuthenticationWarning","logsTimeoutError","setErr","useDebounce","useTimoutValidation","assumeRoleArn","endpoint","externalId","secureJsonData","accessKey","secretKey","ConnectionConfig","loadRegions","customMetricsNamespaces","onUpdateDatasourceJsonDataOption","updateDatasourcePluginJsonDataOption","put","updateDatasourcePluginOption","setQueryEditor","setMetadataInspector","rows","executedQueryString","a","default","call","throw","done","sent","trys","ops","return","Symbol","iterator","pop","u","c","d","exports","Keys","Credentials","Default","EC2IAMRole","ARN","h","y","standardRegions","D","w","E","A","onOptionsChange","S","skipHeader","C","skipEndpoint","V","I","F","O","window","grafanaBootData","settings","R","awsAllowedAuthProviders","awsAssumeRoleEnabled","K","createElement","FieldSet","defaultValue","onUpdateDatasourceJsonDataOptionSelect","menuShouldPortal","Fragment","secureJsonFields","ButtonGroup","ToolbarButton","onUpdateDatasourceResetOption","onUpdateDatasourceSecureJsonDataOption","defaultEndpoint","formatCreateLabel","children","dependencies","description","resources","hidden","saveOptions","Previous","Null","SIGV4ConnectionConfig","sigV4AuthType","sigV4Profile","sigV4AssumeRoleArn","sigV4ExternalId","sigV4Region","sigV4Endpoint","sigV4AccessKey","sigV4SecretKey","module","equal","flags","$$typeof","encode","ch","charCodeAt","tmpAry","isFinite","reserved","len","eat","expected","charAt","decode","beg","substring","parseOne","sub","parseFloat","tryParse","def","ex"],"sourceRoot":""}