{"version":3,"sources":["webpack:///./public/app/plugins/datasource/mixed/MixedDataSource.ts","webpack:///./public/app/plugins/datasource/mixed/module.ts"],"names":["MixedDataSource_MixedDatasource","_super","MixedDatasource","instanceSettings","call","this","tslib_es6","prototype","query","request","queries","targets","filter","t","datasource","length","Object","of","data","sets","groupBy_default","observables","runningSubRequests","key","dsName","observable","from","grafana_runtime_src","get","pipe","mergeMap","dataSourceApi","datasourceRequest","cloneDeep_default","newTargets","slice","meta","hiddenQueries","hide","requestId","hasCountedAsDone","tap","response","state","src","Streaming","Loading","map","Done","push","merge","apply","testDatasource","Promise","resolve","grafana_ui_src","__webpack_require__","d","__webpack_exports__"],"mappings":"yQAYAA,EAAA,SAAAC,GACE,SAAAC,EAAYC,UACVF,EAAAG,KAAAC,KAAMF,IAAiBE,KAoF3B,OAtFqCC,EAAA,EAAAJ,EAAAD,GAKnCC,EAAAK,UAAAC,MAAA,SAAMC,GAEJ,IAAMC,EAAUD,EAAQE,QAAQC,OAAO,SAAAC,GACrC,MAV+B,gBAUxBA,EAAEC,aAGX,IAAKJ,EAAQK,OACX,OAAOC,OAAAC,EAAA,EAAAD,CAAG,CAAEE,KAAM,KAGpB,IAAMC,EAAuCC,IAAQV,EAAS,cACxDW,EAAoD,GACtDC,EAAqB,aAEdC,GACT,IAAMZ,EAAUQ,EAAKI,GACfC,EAASb,EAAQ,GAAGG,WAEpBW,EAAaT,OAAAU,EAAA,EAAAV,CAAKA,OAAAW,EAAA,iBAAAX,GAAmBY,IAAIJ,IAASK,KACtDb,OAAAc,EAAA,EAAAd,CAAS,SAACe,GACR,IAAMC,EAAoBC,IAAUxB,GAGhCyB,EAAavB,EAAQwB,QASzB,GARKJ,EAAcK,KAAKC,gBACtBH,EAAaA,EAAWtB,OAAO,SAACC,GAAiB,OAACA,EAAEyB,QAGtDN,EAAkBrB,QAAUuB,EAC5BF,EAAkBO,UAAY,GAAGf,GAASQ,EAAkBO,WAAa,IAGhC,IAArCP,EAAkBrB,QAAQI,OAC5B,OAAOC,OAAAC,EAAA,EAAAD,CAAG,CAAEE,KAAM,GAAIK,IAAKS,EAAkBO,YAG/CjB,IACA,IAAIkB,GAAmB,EAEvB,OAAOxB,OAAAU,EAAA,EAAAV,CAAKe,EAAcvB,MAAMwB,IAAoBH,KAClDb,OAAAyB,EAAA,EAAAzB,CACE,SAAC0B,GAEGF,GACAE,EAASC,QAAUC,EAAA,aAAaC,WAChCH,EAASC,QAAUC,EAAA,aAAaE,UAIlCxB,IACAkB,GAAmB,IAErB,WACMA,IAGJA,GAAmB,EACnBlB,OAGJN,OAAA+B,EAAA,EAAA/B,CAAI,SAAC0B,GACH,OAAOpC,EAAA,KACFoC,EAAQ,CACXxB,KAAMwB,EAASxB,MAAQ,GACvByB,MAA8B,IAAvBrB,EAA2BsB,EAAA,aAAaI,KAAOJ,EAAA,aAAaE,QACnEvB,IAAK,GAAGC,GAASkB,EAASnB,KAAO,YAO3CF,EAAY4B,KAAKxB,IA1DnB,IAAK,IAAMF,KAAOJ,IAAPI,GA6DX,OAAO2B,EAAA,EAAKC,WAAA,EAAA7C,EAAA,EAAIe,KAGlBnB,EAAAK,UAAA6C,eAAA,WACE,OAAOC,QAAQC,QAAQ,KAE3BpD,EAtFA,CAAqCqD,EAAA,eCZrCC,EAAAC,EAAAC,EAAA,oCAAA1D,IAAAwD,EAAAC,EAAAC,EAAA,+BAAA1D","file":"mixedPlugin.3932bda029d2299a9d96.js","sourcesContent":["import cloneDeep from 'lodash/cloneDeep';\nimport groupBy from 'lodash/groupBy';\nimport { from, of, Observable, merge } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { LoadingState } from '@grafana/data';\nimport { DataSourceApi, DataQuery, DataQueryRequest, DataQueryResponse, DataSourceInstanceSettings } from '@grafana/ui';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { mergeMap, map } from 'rxjs/operators';\n\nexport const MIXED_DATASOURCE_NAME = '-- Mixed --';\n\nexport class MixedDatasource extends DataSourceApi<DataQuery> {\n  constructor(instanceSettings: DataSourceInstanceSettings) {\n    super(instanceSettings);\n  }\n\n  query(request: DataQueryRequest<DataQuery>): Observable<DataQueryResponse> {\n    // Remove any invalid queries\n    const queries = request.targets.filter(t => {\n      return t.datasource !== MIXED_DATASOURCE_NAME;\n    });\n\n    if (!queries.length) {\n      return of({ data: [] } as DataQueryResponse); // nothing\n    }\n\n    const sets: { [key: string]: DataQuery[] } = groupBy(queries, 'datasource');\n    const observables: Array<Observable<DataQueryResponse>> = [];\n    let runningSubRequests = 0;\n\n    for (const key in sets) {\n      const targets = sets[key];\n      const dsName = targets[0].datasource;\n\n      const observable = from(getDataSourceSrv().get(dsName)).pipe(\n        mergeMap((dataSourceApi: DataSourceApi) => {\n          const datasourceRequest = cloneDeep(request);\n\n          // Remove any unused hidden queries\n          let newTargets = targets.slice();\n          if (!dataSourceApi.meta.hiddenQueries) {\n            newTargets = newTargets.filter((t: DataQuery) => !t.hide);\n          }\n\n          datasourceRequest.targets = newTargets;\n          datasourceRequest.requestId = `${dsName}${datasourceRequest.requestId || ''}`;\n\n          // all queries hidden return empty result for for this requestId\n          if (datasourceRequest.targets.length === 0) {\n            return of({ data: [], key: datasourceRequest.requestId });\n          }\n\n          runningSubRequests++;\n          let hasCountedAsDone = false;\n\n          return from(dataSourceApi.query(datasourceRequest)).pipe(\n            tap(\n              (response: DataQueryResponse) => {\n                if (\n                  hasCountedAsDone ||\n                  response.state === LoadingState.Streaming ||\n                  response.state === LoadingState.Loading\n                ) {\n                  return;\n                }\n                runningSubRequests--;\n                hasCountedAsDone = true;\n              },\n              () => {\n                if (hasCountedAsDone) {\n                  return;\n                }\n                hasCountedAsDone = true;\n                runningSubRequests--;\n              }\n            ),\n            map((response: DataQueryResponse) => {\n              return {\n                ...response,\n                data: response.data || [],\n                state: runningSubRequests === 0 ? LoadingState.Done : LoadingState.Loading,\n                key: `${dsName}${response.key || ''}`,\n              } as DataQueryResponse;\n            })\n          );\n        })\n      );\n\n      observables.push(observable);\n    }\n\n    return merge(...observables);\n  }\n\n  testDatasource() {\n    return Promise.resolve({});\n  }\n}\n","import { MixedDatasource } from './MixedDataSource';\nexport { MixedDatasource, MixedDatasource as Datasource };\n"],"sourceRoot":""}