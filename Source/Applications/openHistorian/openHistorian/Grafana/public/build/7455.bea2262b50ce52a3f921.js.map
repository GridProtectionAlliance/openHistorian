{"version":3,"file":"7455.bea2262b50ce52a3f921.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/CloudCommonChannelSettings.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/CloudReceiverForm.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/GrafanaCommonChannelSettings.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/TestContactPointModal.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/GrafanaReceiverForm.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/ChannelOptions.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/ChannelSubForm.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/fields/DeletedSubform.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/util.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/ReceiverForm.tsx"],"sourcesContent":["import { useFormContext } from 'react-hook-form';\n\nimport { Checkbox, Field } from '@grafana/ui';\n\nimport { CommonSettingsComponentProps } from '../../../types/receiver-form';\n\nexport const CloudCommonChannelSettings = ({\n  pathPrefix,\n  className,\n  readOnly = false,\n}: CommonSettingsComponentProps) => {\n  const { register } = useFormContext();\n  return (\n    <div className={className}>\n      <Field disabled={readOnly}>\n        <Checkbox\n          {...register(`${pathPrefix}sendResolved`)}\n          label=\"Send resolved\"\n          disabled={readOnly}\n          description=\"Whether or not to notify about resolved alerts.\"\n        />\n      </Field>\n    </div>\n  );\n};\n","import { useMemo } from 'react';\n\nimport { locationService } from '@grafana/runtime';\nimport { Alert } from '@grafana/ui';\nimport { alertmanagerApi } from 'app/features/alerting/unified/api/alertmanagerApi';\nimport {\n  useCreateContactPoint,\n  useUpdateContactPoint,\n} from 'app/features/alerting/unified/components/contact-points/useContactPoints';\nimport { Receiver } from 'app/plugins/datasource/alertmanager/types';\n\nimport { CloudChannelMap, CloudChannelValues, ReceiverFormValues } from '../../../types/receiver-form';\nimport { cloudNotifierTypes } from '../../../utils/cloud-alertmanager-notifier-types';\nimport { isVanillaPrometheusAlertManagerDataSource } from '../../../utils/datasource';\nimport { cloudReceiverToFormValues, formValuesToCloudReceiver } from '../../../utils/receiver-form';\n\nimport { CloudCommonChannelSettings } from './CloudCommonChannelSettings';\nimport { ReceiverForm } from './ReceiverForm';\nimport { Notifier } from './notifiers';\n\ninterface Props {\n  alertManagerSourceName: string;\n  contactPoint?: Receiver;\n  readOnly?: boolean;\n  editMode?: boolean;\n}\n\nconst defaultChannelValues: CloudChannelValues = Object.freeze({\n  __id: '',\n  sendResolved: true,\n  secureSettings: {},\n  settings: {},\n  secureFields: {},\n  type: 'email',\n});\n\nconst cloudNotifiers = cloudNotifierTypes.map<Notifier>((n) => ({ dto: n }));\nconst { useGetAlertmanagerConfigurationQuery } = alertmanagerApi;\n\nexport const CloudReceiverForm = ({ contactPoint, alertManagerSourceName, readOnly = false, editMode }: Props) => {\n  const { isLoading, data: config } = useGetAlertmanagerConfigurationQuery(alertManagerSourceName);\n\n  const isVanillaAM = isVanillaPrometheusAlertManagerDataSource(alertManagerSourceName);\n  const [createContactPoint] = useCreateContactPoint({ alertmanager: alertManagerSourceName });\n  const [updateContactPoint] = useUpdateContactPoint({ alertmanager: alertManagerSourceName });\n\n  // transform receiver DTO to form values\n  const [existingValue] = useMemo((): [ReceiverFormValues<CloudChannelValues> | undefined, CloudChannelMap] => {\n    if (!contactPoint) {\n      return [undefined, {}];\n    }\n    return cloudReceiverToFormValues(contactPoint, cloudNotifierTypes);\n  }, [contactPoint]);\n\n  const onSubmit = async (values: ReceiverFormValues<CloudChannelValues>) => {\n    const newReceiver = formValuesToCloudReceiver(values, defaultChannelValues);\n\n    try {\n      if (editMode && contactPoint) {\n        await updateContactPoint.execute({ contactPoint: newReceiver, originalName: contactPoint.name });\n      } else {\n        await createContactPoint.execute({ contactPoint: newReceiver });\n      }\n      locationService.push('/alerting/notifications');\n    } catch (error) {\n      // React form validation will handle this for us\n    }\n  };\n\n  // this basically checks if we can manage the selected alert manager data source, either because it's a Grafana Managed one\n  // or a Mimir-based AlertManager\n  const isManageableAlertManagerDataSource =\n    !readOnly ?? !isVanillaPrometheusAlertManagerDataSource(alertManagerSourceName);\n\n  return (\n    <>\n      {!isVanillaAM && (\n        <Alert title=\"Info\" severity=\"info\">\n          Note that empty string values will be replaced with global defaults where appropriate.\n        </Alert>\n      )}\n      <ReceiverForm<CloudChannelValues>\n        showDefaultRouteWarning={!isLoading && !config?.alertmanager_config.route}\n        isEditable={isManageableAlertManagerDataSource}\n        isTestable={isManageableAlertManagerDataSource}\n        onSubmit={onSubmit}\n        initialValues={existingValue}\n        notifiers={cloudNotifiers}\n        alertManagerSourceName={alertManagerSourceName}\n        defaultItem={defaultChannelValues}\n        commonSettingsComponent={CloudCommonChannelSettings}\n      />\n    </>\n  );\n};\n","import { useFormContext } from 'react-hook-form';\n\nimport { Checkbox, Field } from '@grafana/ui';\n\nimport { CommonSettingsComponentProps } from '../../../types/receiver-form';\n\nexport const GrafanaCommonChannelSettings = ({\n  pathPrefix,\n  className,\n  readOnly = false,\n}: CommonSettingsComponentProps) => {\n  const { register } = useFormContext();\n  return (\n    <div className={className}>\n      <Field>\n        <Checkbox\n          {...register(`${pathPrefix}disableResolveMessage`)}\n          label=\"Disable resolved message\"\n          description=\"Disable the resolve message [OK] that is sent when alerting state returns to false\"\n          disabled={readOnly}\n        />\n      </Field>\n    </div>\n  );\n};\n","import { css } from '@emotion/css';\nimport { useState } from 'react';\nimport { FormProvider, useForm } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Label, Modal, RadioButtonGroup, useStyles2 } from '@grafana/ui';\nimport { TestReceiversAlert } from 'app/plugins/datasource/alertmanager/types';\nimport { Annotations, Labels } from 'app/types/unified-alerting-dto';\n\nimport { defaultAnnotations } from '../../../utils/constants';\nimport AnnotationsStep from '../../rule-editor/AnnotationsStep';\nimport LabelsField from '../../rule-editor/labels/LabelsField';\n\ninterface Props {\n  isOpen: boolean;\n  onDismiss: () => void;\n  onTest: (alert?: TestReceiversAlert) => void;\n}\n\ntype AnnoField = {\n  key: string;\n  value: string;\n};\n\ninterface FormFields {\n  annotations: AnnoField[];\n  labels: AnnoField[];\n}\n\nenum NotificationType {\n  predefined = 'Predefined',\n  custom = 'Custom',\n}\n\nconst notificationOptions = Object.values(NotificationType).map((value) => ({ label: value, value: value }));\n\nconst defaultValues: FormFields = {\n  annotations: [...defaultAnnotations],\n  labels: [{ key: '', value: '' }],\n};\n\nexport const TestContactPointModal = ({ isOpen, onDismiss, onTest }: Props) => {\n  const [notificationType, setNotificationType] = useState<NotificationType>(NotificationType.predefined);\n  const styles = useStyles2(getStyles);\n  const formMethods = useForm<FormFields>({ defaultValues, mode: 'onBlur' });\n\n  const onSubmit = (data: FormFields) => {\n    if (notificationType === NotificationType.custom) {\n      const alert = {\n        annotations: data.annotations\n          .filter(({ key, value }) => !!key && !!value)\n          .reduce<Annotations>((acc, { key, value }) => {\n            return { ...acc, [key]: value };\n          }, {}),\n        labels: data.labels\n          .filter(({ key, value }) => !!key && !!value)\n          .reduce<Labels>((acc, { key, value }) => {\n            return { ...acc, [key]: value };\n          }, {}),\n      };\n      onTest(alert);\n    } else {\n      onTest();\n    }\n  };\n\n  return (\n    <Modal onDismiss={onDismiss} isOpen={isOpen} title={'Test contact point'}>\n      <div className={styles.section}>\n        <Label>Notification message</Label>\n        <RadioButtonGroup\n          options={notificationOptions}\n          value={notificationType}\n          onChange={(value) => setNotificationType(value)}\n        />\n      </div>\n\n      <FormProvider {...formMethods}>\n        <form onSubmit={formMethods.handleSubmit(onSubmit)}>\n          {notificationType === NotificationType.predefined && (\n            <div className={styles.section}>\n              You will send a test notification that uses a predefined alert. If you have defined a custom template or\n              message, for better results switch to <strong>custom</strong> notification message, from above.\n            </div>\n          )}\n          {notificationType === NotificationType.custom && (\n            <>\n              <div className={styles.section}>\n                You will send a test notification that uses the annotations defined below. This is a good option if you\n                use custom templates and messages.\n              </div>\n              <div className={styles.section}>\n                <AnnotationsStep />\n              </div>\n              <div className={styles.section}>\n                <LabelsField />\n              </div>\n            </>\n          )}\n\n          <Modal.ButtonRow>\n            <Button type=\"submit\">Send test notification</Button>\n          </Modal.ButtonRow>\n        </form>\n      </FormProvider>\n    </Modal>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  flexRow: css({\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    marginBottom: theme.spacing(1),\n  }),\n  section: css({\n    marginBottom: theme.spacing(2),\n  }),\n});\n","import { useMemo, useState } from 'react';\n\nimport { locationService } from '@grafana/runtime';\nimport { Alert, LoadingPlaceholder } from '@grafana/ui';\nimport {\n  useCreateContactPoint,\n  useUpdateContactPoint,\n} from 'app/features/alerting/unified/components/contact-points/useContactPoints';\nimport { showManageContactPointPermissions } from 'app/features/alerting/unified/components/contact-points/utils';\nimport { GRAFANA_RULES_SOURCE_NAME } from 'app/features/alerting/unified/utils/datasource';\nimport { canEditEntity } from 'app/features/alerting/unified/utils/k8s/utils';\nimport {\n  GrafanaManagedContactPoint,\n  GrafanaManagedReceiverConfig,\n  TestReceiversAlert,\n} from 'app/plugins/datasource/alertmanager/types';\nimport { useDispatch } from 'app/types';\n\nimport { alertmanagerApi } from '../../../api/alertmanagerApi';\nimport { testReceiversAction } from '../../../state/actions';\nimport { GrafanaChannelValues, ReceiverFormValues } from '../../../types/receiver-form';\nimport { shouldUseK8sApi } from '../../../utils/k8s/utils';\nimport {\n  formChannelValuesToGrafanaChannelConfig,\n  formValuesToGrafanaReceiver,\n  grafanaReceiverToFormValues,\n} from '../../../utils/receiver-form';\nimport { ProvisionedResource, ProvisioningAlert } from '../../Provisioning';\nimport { ReceiverTypes } from '../grafanaAppReceivers/onCall/onCall';\nimport { useOnCallIntegration } from '../grafanaAppReceivers/onCall/useOnCallIntegration';\n\nimport { GrafanaCommonChannelSettings } from './GrafanaCommonChannelSettings';\nimport { ReceiverForm } from './ReceiverForm';\nimport { TestContactPointModal } from './TestContactPointModal';\nimport { Notifier } from './notifiers';\n\nconst defaultChannelValues: GrafanaChannelValues = Object.freeze({\n  __id: '',\n  secureSettings: {},\n  settings: {},\n  secureFields: {},\n  disableResolveMessage: false,\n  type: 'email',\n});\n\ninterface Props {\n  contactPoint?: GrafanaManagedContactPoint;\n  readOnly?: boolean;\n  editMode?: boolean;\n}\n\nconst { useGrafanaNotifiersQuery } = alertmanagerApi;\n\nexport const GrafanaReceiverForm = ({ contactPoint, readOnly = false, editMode }: Props) => {\n  const dispatch = useDispatch();\n  const useK8sAPI = shouldUseK8sApi(GRAFANA_RULES_SOURCE_NAME);\n  const [createContactPoint] = useCreateContactPoint({\n    alertmanager: GRAFANA_RULES_SOURCE_NAME,\n  });\n  const [updateContactPoint] = useUpdateContactPoint({\n    alertmanager: GRAFANA_RULES_SOURCE_NAME,\n  });\n\n  const {\n    onCallNotifierMeta,\n    extendOnCallNotifierFeatures,\n    extendOnCallReceivers,\n    onCallFormValidators,\n    isLoadingOnCallIntegration,\n    hasOnCallError,\n  } = useOnCallIntegration();\n\n  const { data: grafanaNotifiers = [], isLoading: isLoadingNotifiers } = useGrafanaNotifiersQuery();\n\n  const [testChannelValues, setTestChannelValues] = useState<GrafanaChannelValues>();\n\n  // transform receiver DTO to form values\n  const [existingValue, id2original] = useMemo((): [\n    ReceiverFormValues<GrafanaChannelValues> | undefined,\n    Record<string, GrafanaManagedReceiverConfig>,\n  ] => {\n    if (!contactPoint || isLoadingNotifiers || isLoadingOnCallIntegration) {\n      return [undefined, {}];\n    }\n\n    return grafanaReceiverToFormValues(extendOnCallReceivers(contactPoint), grafanaNotifiers);\n  }, [contactPoint, isLoadingNotifiers, grafanaNotifiers, extendOnCallReceivers, isLoadingOnCallIntegration]);\n\n  const onSubmit = async (values: ReceiverFormValues<GrafanaChannelValues>) => {\n    const newReceiver = formValuesToGrafanaReceiver(values, id2original, defaultChannelValues, grafanaNotifiers);\n\n    try {\n      if (editMode) {\n        if (useK8sAPI && contactPoint && contactPoint.id) {\n          await updateContactPoint.execute({\n            contactPoint: newReceiver,\n            id: contactPoint.id,\n            resourceVersion: contactPoint?.metadata?.resourceVersion,\n          });\n        } else if (contactPoint) {\n          await updateContactPoint.execute({\n            contactPoint: newReceiver,\n            originalName: contactPoint.name,\n          });\n        }\n      } else {\n        await createContactPoint.execute({ contactPoint: newReceiver });\n      }\n      locationService.push('/alerting/notifications');\n    } catch (error) {\n      // React form validation will handle this for us\n    }\n  };\n\n  const onTestChannel = (values: GrafanaChannelValues) => {\n    setTestChannelValues(values);\n  };\n\n  const testNotification = (alert?: TestReceiversAlert) => {\n    if (testChannelValues) {\n      const existing: GrafanaManagedReceiverConfig | undefined = id2original[testChannelValues.__id];\n      const chan = formChannelValuesToGrafanaChannelConfig(testChannelValues, defaultChannelValues, 'test', existing);\n\n      const payload = {\n        alertManagerSourceName: GRAFANA_RULES_SOURCE_NAME,\n        receivers: [\n          {\n            name: 'test',\n            grafana_managed_receiver_configs: [chan],\n          },\n        ],\n        alert,\n      };\n\n      dispatch(testReceiversAction(payload));\n    }\n  };\n\n  const isEditable = Boolean(\n    (!readOnly || (contactPoint && canEditEntity(contactPoint))) && !contactPoint?.provisioned\n  );\n  const isTestable = !readOnly;\n\n  if (isLoadingNotifiers || isLoadingOnCallIntegration) {\n    return <LoadingPlaceholder text=\"Loading notifiers...\" />;\n  }\n\n  const notifiers: Notifier[] = grafanaNotifiers.map((n) => {\n    if (n.type === ReceiverTypes.OnCall) {\n      return {\n        dto: extendOnCallNotifierFeatures(n),\n        meta: onCallNotifierMeta,\n      };\n    }\n\n    return { dto: n };\n  });\n  return (\n    <>\n      {hasOnCallError && (\n        <Alert severity=\"error\" title=\"Loading OnCall integration failed\">\n          Grafana OnCall plugin has been enabled in your Grafana instances but it is not reachable. Please check the\n          plugin configuration\n        </Alert>\n      )}\n\n      {contactPoint?.provisioned && <ProvisioningAlert resource={ProvisionedResource.ContactPoint} />}\n\n      <ReceiverForm<GrafanaChannelValues>\n        contactPointId={contactPoint?.id}\n        isEditable={isEditable}\n        isTestable={isTestable}\n        onSubmit={onSubmit}\n        initialValues={existingValue}\n        onTestChannel={onTestChannel}\n        notifiers={notifiers}\n        alertManagerSourceName={GRAFANA_RULES_SOURCE_NAME}\n        defaultItem={{ ...defaultChannelValues }}\n        commonSettingsComponent={GrafanaCommonChannelSettings}\n        customValidators={{ [ReceiverTypes.OnCall]: onCallFormValidators }}\n        canManagePermissions={\n          editMode && contactPoint && showManageContactPointPermissions(GRAFANA_RULES_SOURCE_NAME, contactPoint)\n        }\n      />\n      <TestContactPointModal\n        onDismiss={() => setTestChannelValues(undefined)}\n        isOpen={!!testChannelValues}\n        onTest={(alert) => testNotification(alert)}\n      />\n    </>\n  );\n};\n","import * as React from 'react';\nimport { DeepMap, FieldError, FieldErrors, useFormContext } from 'react-hook-form';\n\nimport { Field, SecretInput } from '@grafana/ui';\nimport { NotificationChannelOption, NotificationChannelSecureFields } from 'app/types';\n\nimport { ChannelValues, ReceiverFormValues } from '../../../types/receiver-form';\n\nimport { OptionField } from './fields/OptionField';\n\nexport interface Props<R extends ChannelValues> {\n  defaultValues: R;\n  selectedChannelOptions: NotificationChannelOption[];\n  secureFields: NotificationChannelSecureFields;\n\n  onResetSecureField: (key: string) => void;\n  errors?: FieldErrors<R>;\n  pathPrefix?: string;\n  readOnly?: boolean;\n\n  customValidators?: Record<string, React.ComponentProps<typeof OptionField>['customValidator']>;\n}\n\nexport function ChannelOptions<R extends ChannelValues>({\n  defaultValues,\n  selectedChannelOptions,\n  onResetSecureField,\n  secureFields,\n  errors,\n  pathPrefix = '',\n  readOnly = false,\n  customValidators = {},\n}: Props<R>): JSX.Element {\n  const { watch } = useFormContext<ReceiverFormValues<R>>();\n  const currentFormValues = watch(); // react hook form types ARE LYING!\n\n  return (\n    <>\n      {selectedChannelOptions.map((option: NotificationChannelOption, index: number) => {\n        const key = `${option.label}-${index}`;\n        // Some options can be dependent on other options, this determines what is selected in the dependency options\n        // I think this needs more thought.\n        // pathPrefix = items.index.\n        const paths = pathPrefix.split('.');\n        const selectedOptionValue =\n          paths.length >= 2 ? currentFormValues.items?.[Number(paths[1])].settings?.[option.showWhen.field] : undefined;\n\n        if (option.showWhen.field && selectedOptionValue !== option.showWhen.is) {\n          return null;\n        }\n\n        if (secureFields && secureFields[option.propertyName]) {\n          return (\n            <Field key={key} label={option.label} description={option.description}>\n              <SecretInput onReset={() => onResetSecureField(option.propertyName)} isConfigured />\n            </Field>\n          );\n        }\n\n        const error: FieldError | DeepMap<any, FieldError> | undefined = (\n          (option.secure ? errors?.secureSettings : errors?.settings) as DeepMap<any, FieldError> | undefined\n        )?.[option.propertyName];\n\n        const defaultValue = defaultValues?.settings?.[option.propertyName];\n\n        return (\n          <OptionField\n            onResetSecureField={onResetSecureField}\n            secureFields={secureFields}\n            defaultValue={defaultValue}\n            readOnly={readOnly}\n            key={key}\n            error={error}\n            pathPrefix={pathPrefix}\n            pathSuffix={option.secure ? 'secureSettings.' : 'settings.'}\n            option={option}\n            customValidator={customValidators[option.propertyName]}\n          />\n        );\n      })}\n    </>\n  );\n}\n","import { css } from '@emotion/css';\nimport { sortBy } from 'lodash';\nimport * as React from 'react';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { Controller, FieldErrors, FieldValues, useFormContext } from 'react-hook-form';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { Alert, Button, Field, Select, Text, useStyles2 } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport { useUnifiedAlertingSelector } from '../../../hooks/useUnifiedAlertingSelector';\nimport { ChannelValues, CommonSettingsComponentType } from '../../../types/receiver-form';\nimport { OnCallIntegrationType } from '../grafanaAppReceivers/onCall/useOnCallIntegration';\n\nimport { ChannelOptions } from './ChannelOptions';\nimport { CollapsibleSection } from './CollapsibleSection';\nimport { Notifier } from './notifiers';\n\ninterface Props<R extends FieldValues> {\n  defaultValues: R;\n  initialValues?: R;\n  pathPrefix: string;\n  notifiers: Notifier[];\n  onDuplicate: () => void;\n  onTest?: () => void;\n  commonSettingsComponent: CommonSettingsComponentType;\n\n  secureFields?: Record<string, boolean>;\n  errors?: FieldErrors<R>;\n  onDelete?: () => void;\n  isEditable?: boolean;\n  isTestable?: boolean;\n\n  customValidators?: React.ComponentProps<typeof ChannelOptions>['customValidators'];\n}\n\nexport function ChannelSubForm<R extends ChannelValues>({\n  defaultValues,\n  initialValues,\n  pathPrefix,\n  onDuplicate,\n  onDelete,\n  onTest,\n  notifiers,\n  errors,\n  secureFields,\n  commonSettingsComponent: CommonSettingsComponent,\n  isEditable = true,\n  isTestable,\n  customValidators = {},\n}: Props<R>): JSX.Element {\n  const styles = useStyles2(getStyles);\n\n  const fieldName = useCallback((fieldName: string) => `${pathPrefix}${fieldName}`, [pathPrefix]);\n\n  const { control, watch, register, trigger, formState, setValue } = useFormContext();\n  const selectedType = watch(fieldName('type')) ?? defaultValues.type; // nope, setting \"default\" does not work at all.\n  const parse_mode = watch(fieldName('settings.parse_mode'));\n  const { loading: testingReceiver } = useUnifiedAlertingSelector((state) => state.testReceivers);\n\n  // TODO I don't like integration specific code here but other ways require a bigger refactoring\n  const onCallIntegrationType = watch(fieldName('settings.integration_type'));\n  const isTestAvailable = onCallIntegrationType !== OnCallIntegrationType.NewIntegration;\n\n  useEffect(() => {\n    register(`${pathPrefix}.__id`);\n    /* Need to manually register secureFields or else they'll\n     be lost when testing a contact point */\n    register(`${pathPrefix}.secureFields`);\n  }, [register, pathPrefix]);\n\n  // Prevent forgetting about initial values when switching the integration type and the oncall integration type\n  useEffect(() => {\n    // Restore values when switching back from a changed integration to the default one\n    const subscription = watch((v, { name, type }) => {\n      const value = name ? v[name] : '';\n      if (initialValues && name === fieldName('type') && value === initialValues.type && type === 'change') {\n        setValue(fieldName('settings'), initialValues.settings);\n      }\n      // Restore initial value of an existing oncall integration\n      if (\n        initialValues &&\n        name === fieldName('settings.integration_type') &&\n        value === OnCallIntegrationType.ExistingIntegration\n      ) {\n        setValue(fieldName('settings.url'), initialValues.settings.url);\n      }\n    });\n\n    return () => subscription.unsubscribe();\n  }, [selectedType, initialValues, setValue, fieldName, watch]);\n\n  const [_secureFields, setSecureFields] = useState<Record<string, boolean | ''>>(secureFields ?? {});\n\n  const onResetSecureField = (key: string) => {\n    if (_secureFields[key]) {\n      const updatedSecureFields = { ..._secureFields };\n      updatedSecureFields[key] = '';\n      setSecureFields(updatedSecureFields);\n      setValue(`${pathPrefix}.secureFields`, updatedSecureFields);\n    }\n  };\n\n  const typeOptions = useMemo(\n    (): SelectableValue[] =>\n      sortBy(notifiers, ({ dto, meta }) => [meta?.order ?? 0, dto.name])\n        // .notifiers.sort((a, b) => a.dto.name.localeCompare(b.dto.name))\n        .map<SelectableValue>(({ dto: { name, type }, meta }) => ({\n          label: name,\n          value: type,\n          description: meta?.description,\n          isDisabled: meta ? !meta.enabled : false,\n          imgUrl: meta?.iconUrl,\n        })),\n    [notifiers]\n  );\n\n  const handleTest = async () => {\n    await trigger();\n    const isValid = Object.keys(formState.errors).length === 0;\n\n    if (isValid && onTest) {\n      onTest();\n    }\n  };\n\n  const notifier = notifiers.find(({ dto: { type } }) => type === selectedType);\n  const isTelegram = selectedType === 'telegram';\n  // Grafana AM takes \"None\" value and maps to an empty string,\n  // Cloud AM takes no value at all\n  const isParseModeNone = parse_mode === 'None' || !parse_mode;\n  const showTelegramWarning = isTelegram && !isParseModeNone;\n  // if there are mandatory options defined, optional options will be hidden by a collapse\n  // if there aren't mandatory options, all options will be shown without collapse\n  const mandatoryOptions = notifier?.dto.options.filter((o) => o.required);\n  const optionalOptions = notifier?.dto.options.filter((o) => !o.required);\n\n  const contactPointTypeInputId = `contact-point-type-${pathPrefix}`;\n  return (\n    <div className={styles.wrapper} data-testid=\"item-container\">\n      <div className={styles.topRow}>\n        <div>\n          <Field label=\"Integration\" htmlFor={contactPointTypeInputId} data-testid={`${pathPrefix}type`}>\n            <Controller\n              name={fieldName('type')}\n              defaultValue={defaultValues.type}\n              render={({ field: { ref, onChange, ...field } }) => (\n                <Select\n                  disabled={!isEditable}\n                  inputId={contactPointTypeInputId}\n                  {...field}\n                  width={37}\n                  options={typeOptions}\n                  onChange={(value) => onChange(value?.value)}\n                />\n              )}\n              control={control}\n              rules={{ required: true }}\n            />\n          </Field>\n        </div>\n        <div className={styles.buttons}>\n          {isTestable && onTest && isTestAvailable && (\n            <Button\n              disabled={testingReceiver}\n              size=\"xs\"\n              variant=\"secondary\"\n              type=\"button\"\n              onClick={() => handleTest()}\n              icon={testingReceiver ? 'spinner' : 'message'}\n            >\n              Test\n            </Button>\n          )}\n          {isEditable && (\n            <>\n              <Button size=\"xs\" variant=\"secondary\" type=\"button\" onClick={() => onDuplicate()} icon=\"copy\">\n                Duplicate\n              </Button>\n              {onDelete && (\n                <Button\n                  data-testid={`${pathPrefix}delete-button`}\n                  size=\"xs\"\n                  variant=\"secondary\"\n                  type=\"button\"\n                  onClick={() => onDelete()}\n                  icon=\"trash-alt\"\n                >\n                  Delete\n                </Button>\n              )}\n            </>\n          )}\n        </div>\n      </div>\n      {notifier && (\n        <div className={styles.innerContent}>\n          {showTelegramWarning && (\n            <Alert\n              title={t(\n                'alerting.contact-points.telegram.parse-mode-warning-title',\n                'Telegram messages are limited to 4096 UTF-8 characters.'\n              )}\n              severity=\"warning\"\n            >\n              <Trans i18nKey=\"alerting.contact-points.telegram.parse-mode-warning-body\">\n                If you use a <Text variant=\"code\">parse_mode</Text> option other than <Text variant=\"code\">None</Text>,\n                truncation may result in an invalid message, causing the notification to fail. For longer messages, we\n                recommend using an alternative contact method.\n              </Trans>\n            </Alert>\n          )}\n          <ChannelOptions<R>\n            defaultValues={defaultValues}\n            selectedChannelOptions={mandatoryOptions?.length ? mandatoryOptions! : optionalOptions!}\n            secureFields={_secureFields}\n            errors={errors}\n            onResetSecureField={onResetSecureField}\n            pathPrefix={pathPrefix}\n            readOnly={!isEditable}\n            customValidators={customValidators}\n          />\n          {!!(mandatoryOptions?.length && optionalOptions?.length) && (\n            <CollapsibleSection label={`Optional ${notifier.dto.name} settings`}>\n              {notifier.dto.info !== '' && (\n                <Alert title=\"\" severity=\"info\">\n                  {notifier.dto.info}\n                </Alert>\n              )}\n              <ChannelOptions<R>\n                defaultValues={defaultValues}\n                selectedChannelOptions={optionalOptions!}\n                secureFields={_secureFields}\n                onResetSecureField={onResetSecureField}\n                errors={errors}\n                pathPrefix={pathPrefix}\n                readOnly={!isEditable}\n                customValidators={customValidators}\n              />\n            </CollapsibleSection>\n          )}\n          <CollapsibleSection label=\"Notification settings\">\n            <CommonSettingsComponent pathPrefix={pathPrefix} readOnly={!isEditable} />\n          </CollapsibleSection>\n        </div>\n      )}\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  buttons: css({\n    '& > * + *': {\n      marginLeft: theme.spacing(1),\n    },\n  }),\n  innerContent: css({\n    maxWidth: '536px',\n  }),\n  wrapper: css({\n    margin: theme.spacing(2, 0),\n    padding: theme.spacing(1),\n    border: `solid 1px ${theme.colors.border.medium}`,\n    borderRadius: theme.shape.radius.default,\n  }),\n  topRow: css({\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  }),\n  channelSettingsHeader: css({\n    marginTop: theme.spacing(2),\n  }),\n});\n","import { useEffect } from 'react';\nimport { useFormContext } from 'react-hook-form';\n\ninterface Props {\n  pathPrefix: string;\n}\n\n// we can't drop the deleted item from list entirely because\n// there will be a rece condition with register/unregister calls in react-hook-form\n// and fields will become randomly erroneously unregistered\nexport function DeletedSubForm({ pathPrefix }: Props): JSX.Element {\n  const { register } = useFormContext();\n\n  // required to be registered or react-hook-form will randomly drop the values when it feels like it\n  useEffect(() => {\n    register(`${pathPrefix}.__id`);\n    register(`${pathPrefix}.__deleted`);\n  }, [register, pathPrefix]);\n\n  return <></>;\n}\n","import { omit } from 'lodash';\n\nimport { ChannelValues, ReceiverFormValues } from '../../../types/receiver-form';\n\nexport interface DeprecatedAuthHTTPConfig {\n  bearer_token?: string;\n  bearer_token_file?: string;\n}\n\nexport interface HTTPAuthConfig {\n  authorization?: {\n    type: string;\n    credentials?: string;\n    credentials_file?: string;\n  };\n}\n\n// convert the newer http_config to the older (deprecated) format\nexport function normalizeFormValues(\n  values?: ReceiverFormValues<ChannelValues>\n): ReceiverFormValues<ChannelValues> | undefined {\n  if (!values) {\n    return;\n  }\n\n  return {\n    ...values,\n    items: values.items.map((item) => ({\n      ...item,\n      settings: {\n        ...item.settings,\n        http_config: item.settings?.http_config ? normalizeHTTPConfig(item.settings?.http_config) : undefined,\n      },\n    })),\n  };\n}\n\nfunction normalizeHTTPConfig(config: HTTPAuthConfig | DeprecatedAuthHTTPConfig): DeprecatedAuthHTTPConfig {\n  if (isDeprecatedHTTPAuthConfig(config)) {\n    return config;\n  }\n\n  return {\n    ...omit(config, 'authorization'),\n    bearer_token: config.authorization?.credentials,\n    bearer_token_file: config.authorization?.credentials_file,\n  };\n}\n\nfunction isDeprecatedHTTPAuthConfig(\n  config: HTTPAuthConfig | DeprecatedAuthHTTPConfig\n): config is DeprecatedAuthHTTPConfig {\n  return ['bearer_token', 'bearer_token_file'].some((prop) => prop in config);\n}\n","import { css } from '@emotion/css';\nimport * as React from 'react';\nimport { FieldErrors, FormProvider, SubmitErrorHandler, useForm } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { isFetchError } from '@grafana/runtime';\nimport { Alert, Button, Field, Input, LinkButton, Stack, useStyles2 } from '@grafana/ui';\nimport { useAppNotification } from 'app/core/copy/appNotification';\nimport { useCleanup } from 'app/core/hooks/useCleanup';\nimport { useValidateContactPoint } from 'app/features/alerting/unified/components/contact-points/useContactPoints';\nimport { ManagePermissions } from 'app/features/alerting/unified/components/permissions/ManagePermissions';\n\nimport { getMessageFromError } from '../../../../../../core/utils/errors';\nimport { logError } from '../../../Analytics';\nimport { isOnCallFetchError } from '../../../api/onCallApi';\nimport { useControlledFieldArray } from '../../../hooks/useControlledFieldArray';\nimport { ChannelValues, CommonSettingsComponentType, ReceiverFormValues } from '../../../types/receiver-form';\nimport { makeAMLink } from '../../../utils/misc';\nimport { initialAsyncRequestState } from '../../../utils/redux';\n\nimport { ChannelSubForm } from './ChannelSubForm';\nimport { DeletedSubForm } from './fields/DeletedSubform';\nimport { Notifier } from './notifiers';\nimport { normalizeFormValues } from './util';\n\ninterface Props<R extends ChannelValues> {\n  notifiers: Notifier[];\n  defaultItem: R;\n  alertManagerSourceName: string;\n  onTestChannel?: (channel: R) => void;\n  onSubmit: (values: ReceiverFormValues<R>) => Promise<void>;\n  commonSettingsComponent: CommonSettingsComponentType;\n  initialValues?: ReceiverFormValues<R>;\n  isEditable: boolean;\n  isTestable?: boolean;\n  customValidators?: Record<string, React.ComponentProps<typeof ChannelSubForm>['customValidators']>;\n  /**\n   * Should we show a warning that there is no default policy set,\n   * and that contact point being created will be set as the default?\n   */\n  showDefaultRouteWarning?: boolean;\n  contactPointId?: string;\n  canManagePermissions?: boolean;\n}\n\nexport function ReceiverForm<R extends ChannelValues>({\n  initialValues,\n  defaultItem,\n  notifiers,\n  alertManagerSourceName,\n  onSubmit,\n  onTestChannel,\n  commonSettingsComponent,\n  isEditable,\n  isTestable,\n  customValidators,\n  showDefaultRouteWarning,\n  contactPointId,\n  canManagePermissions,\n}: Props<R>) {\n  const notifyApp = useAppNotification();\n  const styles = useStyles2(getStyles);\n  const validateContactPointName = useValidateContactPoint({ alertmanager: alertManagerSourceName });\n\n  // normalize deprecated and new config values\n  const normalizedConfig = normalizeFormValues(initialValues);\n\n  const defaultValues = normalizedConfig ?? {\n    name: '',\n    items: [\n      {\n        ...defaultItem,\n        __id: String(Math.random()),\n      } as any,\n    ],\n  };\n\n  const formAPI = useForm<ReceiverFormValues<R>>({\n    // making a copy here beacuse react-hook-form will mutate these, and break if the object is frozen. for real.\n    defaultValues: structuredClone(defaultValues),\n  });\n\n  useCleanup((state) => (state.unifiedAlerting.saveAMConfig = initialAsyncRequestState));\n\n  const {\n    handleSubmit,\n    register,\n    formState: { errors, isSubmitting },\n    getValues,\n  } = formAPI;\n\n  const { fields, append, remove } = useControlledFieldArray<R>({ name: 'items', formAPI, softDelete: true });\n\n  const submitCallback = async (values: ReceiverFormValues<R>) => {\n    values.items.forEach((item) => {\n      if (item.secureFields) {\n        // omit secure fields with boolean value as BE expects not touched fields to be omitted: https://github.com/grafana/grafana/pull/71307\n        Object.keys(item.secureFields).forEach((key) => {\n          if (item.secureFields[key] === true || item.secureFields[key] === false) {\n            delete item.secureFields[key];\n          }\n        });\n      }\n    });\n\n    try {\n      await onSubmit({\n        ...values,\n        items: values.items.filter((item) => !item.__deleted),\n      });\n    } catch (e) {\n      if (e instanceof Error || isFetchError(e)) {\n        notifyApp.error('Failed to save the contact point', getErrorMessage(e));\n\n        const error = new Error('Failed to save the contact point');\n        error.cause = e;\n        logError(error);\n      }\n      throw e;\n    }\n  };\n\n  const onInvalid: SubmitErrorHandler<ReceiverFormValues<R>> = () => {\n    notifyApp.error('There are errors in the form. Please correct them and try again!');\n  };\n\n  return (\n    <FormProvider {...formAPI}>\n      {showDefaultRouteWarning && (\n        <Alert severity=\"warning\" title=\"Attention\">\n          Because there is no default policy configured yet, this contact point will automatically be set as default.\n        </Alert>\n      )}\n\n      <form onSubmit={handleSubmit(submitCallback, onInvalid)} className={styles.wrapper}>\n        <Stack justifyContent=\"space-between\" alignItems=\"center\">\n          <h2 className={styles.heading}>\n            {!isEditable ? 'Contact point' : initialValues ? 'Update contact point' : 'Create contact point'}\n          </h2>\n          {canManagePermissions && contactPointId && (\n            <ManagePermissions\n              resource=\"receivers\"\n              resourceId={contactPointId}\n              resourceName={initialValues?.name}\n              title=\"Manage contact point permissions\"\n            />\n          )}\n        </Stack>\n        <Field label=\"Name\" invalid={!!errors.name} error={errors.name && errors.name.message} required>\n          <Input\n            readOnly={!isEditable}\n            id=\"name\"\n            {...register('name', {\n              required: 'Name is required',\n              validate: async (value) => {\n                const existingValue = initialValues?.name;\n                return validateContactPointName(value, existingValue);\n              },\n            })}\n            width={39}\n            placeholder=\"Name\"\n          />\n        </Field>\n        {fields.map((field, index) => {\n          const pathPrefix = `items.${index}.`;\n          if (field.__deleted) {\n            return <DeletedSubForm key={field.__id} pathPrefix={pathPrefix} />;\n          }\n          const initialItem = initialValues?.items.find(({ __id }) => __id === field.__id);\n          return (\n            <ChannelSubForm<R>\n              defaultValues={field}\n              initialValues={initialItem}\n              key={field.__id}\n              onDuplicate={() => {\n                const currentValues: R = getValues().items[index];\n                append({ ...currentValues, __id: String(Math.random()) });\n              }}\n              onTest={\n                onTestChannel\n                  ? () => {\n                      const currentValues: R = getValues().items[index];\n                      onTestChannel(currentValues);\n                    }\n                  : undefined\n              }\n              onDelete={() => remove(index)}\n              pathPrefix={pathPrefix}\n              notifiers={notifiers}\n              secureFields={initialItem?.secureFields}\n              errors={errors?.items?.[index] as FieldErrors<R>}\n              commonSettingsComponent={commonSettingsComponent}\n              isEditable={isEditable}\n              isTestable={isTestable}\n              customValidators={customValidators ? customValidators[field.type] : undefined}\n            />\n          );\n        })}\n        <>\n          {isEditable && (\n            <Button\n              type=\"button\"\n              icon=\"plus\"\n              variant=\"secondary\"\n              onClick={() => append({ ...defaultItem, __id: String(Math.random()) })}\n            >\n              Add contact point integration\n            </Button>\n          )}\n          <div className={styles.buttons}>\n            {isEditable && (\n              <>\n                {isSubmitting && (\n                  <Button disabled={true} icon=\"spinner\" variant=\"primary\">\n                    Saving...\n                  </Button>\n                )}\n                {!isSubmitting && <Button type=\"submit\">Save contact point</Button>}\n              </>\n            )}\n            <LinkButton\n              disabled={isSubmitting}\n              variant=\"secondary\"\n              data-testid=\"cancel-button\"\n              href={makeAMLink('/alerting/notifications', alertManagerSourceName)}\n            >\n              Cancel\n            </LinkButton>\n          </div>\n        </>\n      </form>\n    </FormProvider>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  heading: css({\n    margin: theme.spacing(2, 0, 3, 0),\n  }),\n  buttons: css({\n    marginTop: theme.spacing(4),\n\n    '& > * + *': {\n      marginLeft: theme.spacing(1),\n    },\n  }),\n  wrapper: css({\n    maxWidth: `${theme.breakpoints.values.xl}px`,\n  }),\n});\n\nfunction getErrorMessage(error: unknown) {\n  if (isOnCallFetchError(error)) {\n    return error.data.detail;\n  }\n\n  return getMessageFromError(error);\n}\n"],"names":["CloudCommonChannelSettings","pathPrefix","className","readOnly","register","Field","Checkbox","defaultChannelValues","cloudNotifiers","n","useGetAlertmanagerConfigurationQuery","alertmanagerApi","CloudReceiverForm","contactPoint","alertManagerSourceName","editMode","isLoading","config","isVanillaAM","createContactPoint","updateContactPoint","existingValue","onSubmit","values","newReceiver","isManageableAlertManagerDataSource","Alert","ReceiverForm","GrafanaCommonChannelSettings","NotificationType","notificationOptions","value","defaultValues","TestContactPointModal","isOpen","onDismiss","onTest","notificationType","setNotificationType","styles","getStyles","formMethods","data","alert","key","acc","Modal","Label","RadioButtonGroup","AnnotationsStep","LabelsField","Button","theme","useGrafanaNotifiersQuery","GrafanaReceiverForm","dispatch","useK8sAPI","onCallNotifierMeta","extendOnCallNotifierFeatures","extendOnCallReceivers","onCallFormValidators","isLoadingOnCallIntegration","hasOnCallError","useOnCallIntegration","grafanaNotifiers","isLoadingNotifiers","testChannelValues","setTestChannelValues","id2original","onTestChannel","testNotification","existing","chan","payload","isEditable","isTestable","LoadingPlaceholder","notifiers","Provisioning","ChannelOptions","selectedChannelOptions","onResetSecureField","secureFields","errors","customValidators","watch","currentFormValues","option","index","paths","selectedOptionValue","SecretInput","error","defaultValue","OptionField","ChannelSubForm","initialValues","onDuplicate","onDelete","CommonSettingsComponent","fieldName","control","trigger","formState","setValue","selectedType","parse_mode","testingReceiver","useUnifiedAlertingSelector","state","isTestAvailable","subscription","v","name","type","_secureFields","setSecureFields","updatedSecureFields","typeOptions","dto","meta","handleTest","notifier","showTelegramWarning","mandatoryOptions","o","optionalOptions","contactPointTypeInputId","ref","onChange","field","Select","Text","CollapsibleSection","DeletedSubForm","normalizeFormValues","item","normalizeHTTPConfig","isDeprecatedHTTPAuthConfig","prop","defaultItem","commonSettingsComponent","showDefaultRouteWarning","contactPointId","canManagePermissions","notifyApp","validateContactPointName","formAPI","useCleanup","handleSubmit","isSubmitting","getValues","fields","append","remove","useControlledFieldArray","submitCallback","e","getErrorMessage","onInvalid","Stack","ManagePermissions","Input","initialItem","__id","currentValues"],"sourceRoot":""}