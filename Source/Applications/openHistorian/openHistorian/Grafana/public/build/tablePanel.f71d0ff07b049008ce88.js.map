{"version":3,"file":"tablePanel.f71d0ff07b049008ce88.js","mappings":"2PAmBO,SAASA,EAAWC,EAAc,CACvC,KAAM,CAAE,KAAAC,EAAM,OAAAC,EAAQ,MAAAC,EAAO,QAAAC,EAAS,YAAAC,EAAa,GAAAC,EAAI,UAAAC,CAAU,EAAIP,EAE/DQ,KAAQ,MAAU,EAClBC,KAAe,MAAgB,EAC/BC,KAAS,MAA4BT,EAAK,MAAM,KAClD,MAAwCA,EAAK,MAAM,EACnDA,EAAK,OACHU,EAAQD,GAAQ,OAChBE,EAAYF,EAAO,KAAMG,GAAUA,EAAM,OAAO,OAAS,CAAC,EAC1DC,EAAeC,EAAqBL,EAAQN,CAAO,EACnDY,EAAON,EAAOI,CAAY,EAEhC,IAAIG,EAAcf,EAElB,GAAI,CAACS,GAAS,CAACC,EACb,SAAO,OAAC,IAAkB,CAAC,QAASN,EAAI,YAAAD,EAA0B,KAAAJ,CAAA,CAAY,EAGhF,GAAIU,EAAQ,EAAG,CACb,MAAMO,EAAcV,EAAM,QAAQ,SAAWA,EAAM,WAAW,OAAO,GAC/DW,EAAUX,EAAM,QAAQ,SAE9BS,EAAcf,EAASgB,EAAcC,CACvC,CAEA,MAAMC,EAAwBX,EAAa,MAAQA,EAAa,KAAK,IAAM,IAAoB,IAEzFY,KACJ,OAAC,KACC,OAAQJ,EACR,MAAAd,EACA,KAAMa,EACN,SAAU,CAACZ,EAAQ,WACnB,cAAeA,EAAQ,cACvB,UAAW,GACX,cAAeA,EAAQ,OACvB,eAAiBkB,GAAWC,EAAeD,EAAQtB,CAAK,EACxD,eAAgB,CAACwB,EAAaC,IAAiBC,EAAeF,EAAaC,EAAczB,CAAK,EAC9F,kBAAmBS,EAAa,iBAChC,cAAeL,EAAQ,OACvB,iBAAkBA,EAAQ,QAAQ,iBAClC,WAAYA,EAAQ,WACpB,UAAAG,EACA,sBAAuB,IAAO,eAAe,sBAAwBa,EACrE,YAAAf,CAAA,CACF,EAGF,GAAIM,IAAU,EACZ,OAAOU,EAGT,MAAMM,EAAQjB,EAAO,IAAI,CAACG,EAAOe,KACxB,CACL,SAAO,MAAoBf,CAAK,EAChC,MAAOe,CACT,EACD,EAED,SACE,QAAC,OAAI,UAAWC,EAAY,QACzB,UAAAR,KACD,OAAC,OAAI,UAAWQ,EAAY,cAC1B,mBAAC,KAAM,CAAC,QAASF,EAAO,MAAOA,EAAMb,CAAY,EAAG,SAAWgB,GAAQC,EAAuBD,EAAK9B,CAAK,EAAG,EAC7G,GACF,CAEJ,CAEA,SAASe,EAAqBL,EAAqBN,EAAkB,CACnE,OAAOA,EAAQ,WAAa,GAAKA,EAAQ,WAAaM,EAAO,OAASN,EAAQ,WAAa,CAC7F,CAEA,SAASsB,EAAeM,EAA0B7B,EAAeH,EAAc,CAC7E,KAAM,CAAE,YAAAK,CAAY,EAAIL,EAClB,CAAE,UAAAiC,CAAU,EAAI5B,EAEhB6B,EAAY,KAAe,OAC3BC,EAAS,eAGTC,EAAWH,EAAU,KAAMI,GAAMA,EAAE,QAAQ,KAAOH,GAAaG,EAAE,QAAQ,UAAYL,CAAgB,EAE3G,GAAII,EAAU,CAEZ,MAAME,EAAWF,EAAS,WAAW,KAAMG,GAASA,EAAK,KAAOJ,CAAM,EAClEG,EACFA,EAAS,MAAQnC,EAEjBiC,EAAS,WAAW,KAAK,CAAE,GAAID,EAAQ,MAAOhC,CAAM,CAAC,CAEzD,MACE8B,EAAU,KAAK,CACb,QAAS,CAAE,GAAIC,EAAW,QAASF,CAAiB,EACpD,WAAY,CAAC,CAAE,GAAIG,EAAQ,MAAOhC,CAAM,CAAC,CAC3C,CAAC,EAGHH,EAAM,oBAAoB,CACxB,GAAGK,EACH,UAAA4B,CACF,CAAC,CACH,CAEA,SAASV,EAAeD,EAAiCtB,EAAc,CACrEA,EAAM,gBAAgB,CACpB,GAAGA,EAAM,QACT,OAAAsB,CACF,CAAC,CACH,CAEA,SAASS,EAAuBD,EAA8B9B,EAAc,CAC1EA,EAAM,gBAAgB,CACpB,GAAGA,EAAM,QACT,WAAY8B,EAAI,OAAS,CAC3B,CAAC,CACH,CAEA,MAAMD,EAAc,CAClB,WAAS;AAAA;AAAA;AAAA;AAAA;AAAA,IAMT,iBAAe;AAAA;AAAA,GAGjB,C,sHC/HO,MAAMW,EAAyBC,IAEhC,CAACA,EAAM,eAAiB,YAAaA,GACvC,QAAQ,IAAI,oBAAqBA,CAAK,EAIjCA,EAAM,SAGTC,EAAgB,CACpB,mBAAoB,eACpB,sBAAuB,kBACvB,wBAAyB,SACzB,MAAO,OACT,EAEMC,EAAa,CACjB,IAAK,OACL,IAAK,MACL,IAAK,MACL,MAAO,MACP,QAAS,cACT,MAAO,OACT,EAEMC,EAAe,CACnB,KAAM,mBACN,IAAK,mBACL,MAAO,YACT,EAkBMC,EAAqB,CAACC,EAAsBC,IACzC,CAAC,KAAW,GAAGD,CAAU,EAAE,IAAI,CAACE,EAAWC,KAAS,CACzD,MAAOF,EAAOE,CAAG,EACjB,SAAO,YAASD,CAAS,EAAIA,EAAY,SAASA,EAAW,EAAE,CACjE,EAAE,EAGEE,EAAyB,CAC7BT,EACAU,IACG,CACH,MAAMC,EAAoCX,EAAM,iBAAmB,CAAC,EACpE,GAAI,OAAO,KAAKC,CAAa,EAAE,SAASS,EAAQ,SAAS,EAAG,CAC1D,MAAME,EAAiC,CACrC,SAAU,CAAC,CACb,EACIF,EAAQ,YAAc,4BACxBE,EAAK,iBAAmB,GACxBA,EAAK,SAAWF,EAAQ,QAAQ,IAAKG,GAAmBX,EAAWW,EAAO,KAAK,CAAC,GAElFF,EAAgB,KAAK,CACnB,GAAIV,EAAcS,EAAQ,SAAS,EACnC,QAASE,CACX,CAAC,CACH,CACA,OAAOD,CACT,EAmBMG,EAA+BC,GAAiB,CAEpD,MAAMpB,EAA+B,CACnC,QAAS,CACP,GAHmB,WAAW,KAAKoB,EAAM,OAAO,EAAI,KAAe,SAAW,KAAe,OAI7F,QAASA,EAAM,OACjB,EACA,WAAY,CAAC,CACf,EAEA,OAAIA,EAAM,OACRpB,EAAS,WAAW,KAAK,CACvB,GAAI,cACJ,MAAOoB,EAAM,KACf,CAAC,EAGCA,EAAM,MACRpB,EAAS,WAAW,KAAK,CACvB,GAAI,OACJ,MAAOoB,EAAM,IACf,CAAC,EAGCA,EAAM,UACRpB,EAAS,WAAW,KAAK,CACvB,GAAI,WACJ,MAAOoB,EAAM,QACf,CAAC,EAGCA,EAAM,OAAS,QACjBpB,EAAS,WAAW,KAAK,CACvB,GAAI,OACJ,MAAO,SAASoB,EAAM,UAAU,EAClC,CAAC,EAGCA,EAAM,OAAS,UACjBpB,EAAS,WAAW,KAAK,CACvB,GAAI,gBACJ,MAAO,EACT,CAAC,EAGCoB,EAAM,MACRpB,EAAS,WAAW,KAAK,CACvB,GAAI,QACJ,MAAO,CACL,CACE,SAAO,aAAUoB,EAAM,YAAa,EAAE,EACtC,OAAK,aAAUA,EAAM,QAAS,EAAE,EAChC,eAAa,aAAUA,EAAM,gBAAiB,EAAK,CACrD,CACF,CACF,CAAC,EAGCA,EAAM,WACRpB,EAAS,WAAW,KAAK,CACvB,GAAI,qBACJ,MAAO,CACL,KAAMQ,EAAaY,EAAM,SAAS,CACpC,CACF,CAAC,EAGCA,EAAM,OACRpB,EAAS,WAAW,KAAK,CACvB,GAAI,eACJ,MAAOoB,EAAM,QAAU,OAAS,KAAOA,EAAM,KAC/C,CAAC,EAGCA,EAAM,YAAY,QACpBpB,EAAS,WAAW,KAAK,CACvB,GAAI,aACJ,MAAO,CACL,KAAM,IAAe,SACrB,MAAOS,EAAmBW,EAAM,WAAYA,EAAM,MAAM,CAC1D,CACF,CAAC,EAGIpB,CACT,EAEMqB,EAAmBC,GAAwB,CAC/C,IAAIC,EAAwB,CAC1B,OAAQ,CAAC,CACX,EACA,GAAID,EAAc,CAahB,GAZAC,KAAW,UACT,CACE,KAAMD,EAAa,KACnB,SAAUA,EAAa,SACvB,YAAaA,EAAa,MAC1B,OAAQ,CACN,MAAOA,EAAa,QAAU,OAAS,KAAOA,EAAa,KAC7D,CACF,EACA,OACF,EAEIA,EAAa,WAAW,OAAQ,CAClC,MAAMZ,EAA+B,CACnC,KAAM,IAAe,SACrB,MAAOD,EAAmBa,EAAa,WAAYA,EAAa,MAAM,CACxE,EACAC,EAAS,WAAab,CACxB,CAEIY,EAAa,YACfC,EAAS,OAAO,YAAc,CAC5B,KAAMf,EAAac,EAAa,SAAS,CAC3C,EAEJ,CACA,OAAOC,CACT,EAKaC,EAA2B,CACtCnB,EACAoB,EACAC,IACG,CAEH,GAAID,IAAiB,aAAeC,EAAY,QAAS,CACvD,MAAMX,EAAUW,EAAY,QACtBV,EAAkBF,EAAuBT,EAAOU,CAAO,EACvDO,EAAeP,EAAQ,OAAO,KAAMK,GAAeA,EAAM,UAAY,MAAM,EAC3EG,EAAWF,EAAgBC,CAAY,EACvCzB,EAAYkB,EAAQ,OAAO,OAAQK,GAAeA,EAAM,UAAY,MAAM,EAAE,IAAID,CAA2B,EAEjHd,EAAM,gBAAkBW,EACxBX,EAAM,YAAc,CAClB,SAAAkB,EACA,UAAA1B,CACF,CACF,CAEA,MAAO,CAAC,CACV,EAEM8B,EAAiBrD,GACdA,GAAQ,OAAQsD,GAAOA,EAAG,MAAM,QAAQ,iBAAmB,MAAS,GAAK,CAACtD,IAAS,CAAC,CAAC,EAQjFuD,EAA2CvD,GAA+B,CACrF,MAAMwD,EAA8B,CAAC,EAKrC,OAJmBH,EAAcrD,CAAM,EAAE,OACtCG,GAAqD,CAAC,CAACA,GAASA,EAAM,SAAW,CACpF,GAEY,QAASA,GAAU,CAC7B,MAAMsD,EAAYzD,GAAQ,OAAQsD,GAAOnD,EAAM,QAAUmD,EAAG,OAASA,EAAG,MAAM,QAAQ,iBAAmB,MAAS,EAC5GI,KAAmB,WAAQD,EAAYtD,GAAqBA,EAAM,MAAM,QAAQ,cAAc,EAC9FwD,EAAmB,OAAO,KAAKD,CAAgB,EAAE,IAAKE,GAAQF,EAAiBE,CAAG,CAAC,EACnFC,EAAgB,CAAE,GAAG1D,CAAM,EAE7BsD,GAAaA,EAAU,OAAS,GAClCI,EAAc,OAAO,KAAK,CACxB,KAAM,SACN,KAAM,KAAU,aAChB,OAAQ,CAAC,EACT,OAAQF,CACV,CAAC,EAEHH,EAAe,KAAKK,CAAa,CACnC,CAAC,EAEML,CACT,EAEaM,EAA+B9D,GACnCA,GAAQ,KAAMsD,GAAOA,EAAG,MAAM,QAAQ,iBAAmB,MAAS,C,kKCpSpE,SAASS,EAAiB,CAAE,SAAAC,EAAU,MAAAC,EAAO,QAAAC,CAAQ,EAAiC,CAC3F,MAAMC,EAAeC,GAAyD,CACxEA,GAAO,cAAc,UACvBF,EAAQ,QAAQ,OAAO,KAAO,IAEhCF,EAASI,GAAO,cAAc,OAAO,CACvC,EAEA,SAAO,OAACC,EAAA,EAAM,CAAC,MAAO,EAAQJ,EAAQ,SAAUE,CAAA,CAAa,CAC/D,C,2FCTO,MAAMG,EAAwB,CAAC,CACpC,YAAAC,EACA,SAAAP,CACF,IAA8E,CAE5E,MAAMQ,EAAmB,IAAM,CAC7BD,EAAY,SAAW,CAACA,EAAY,SACpCP,EAASO,CAAW,CACtB,EAEME,KACJ,QAACC,EAAA,EAAK,CAAC,YAAY,iFAChB,0BACD,OAACC,EAAA,EAAK,CAAC,KAAK,QAAQ,MAAM,OAAO,MAAO,CAAE,SAAU,OAAQ,WAAY,MAAO,WAAY,KAAM,EAAG,GACtG,EAGF,SACE,mBACE,mBAACC,EAAA,EAAK,CAAC,MAAAH,EACL,mBAACJ,EAAA,EAAM,CAAC,MAAOE,EAAY,SAAU,SAAUC,CAAA,CAAkB,EACnE,EACF,CAEJ,E,0BCrBO,SAASK,EAA0B,CAAE,YAAAN,EAAa,SAAAP,CAAS,EAAU,CAE1E,MAAMc,EAAuBC,GAA2B,CACtDR,EAAY,KAAOQ,EACnBf,EAASO,CAAW,CACtB,EAEMS,EAAqBD,GAAyB,CAClDR,EAAY,iBAAmBQ,EAC/Bf,EAASO,CAAW,CACtB,EAEA,SACE,QAACU,EAAA,EAAK,CAAC,UAAU,SAAS,IAAK,EAC7B,oBAACL,EAAA,EAAK,CAAC,MAAM,qBACX,mBAACM,EAAA,GACC,MAAOX,GAAa,MAAQ,KAAoB,SAChD,SAAUO,EACV,QAASK,CAAA,CACX,EACF,KACA,OAACP,EAAA,EAAK,CAAC,MAAM,gBACX,mBAACM,EAAA,GACC,MAAOX,GAAa,kBAAoB,KAAkB,KAC1D,SAAUS,EACV,QAASI,CAAA,CACX,EACF,GACF,CAEJ,CAEA,MAAMD,EAAkC,CACtC,CAAE,MAAO,KAAoB,MAAO,MAAO,OAAQ,EACnD,CAAE,MAAO,KAAoB,SAAU,MAAO,UAAW,EACzD,CAAE,MAAO,KAAoB,IAAK,MAAO,WAAY,CACvD,EAEMC,EAAgC,CACpC,CAAE,MAAO,KAAkB,MAAO,MAAO,aAAc,EACvD,CAAE,MAAO,KAAkB,KAAM,MAAO,YAAa,EACrD,CAAE,MAAO,KAAkB,OAAQ,MAAO,QAAS,CACrD,EC5CMC,EAA8E,CAClF,CAAE,MAAO,KAA+B,MAAO,MAAO,OAAQ,EAC9D,CAAE,MAAO,KAA+B,SAAU,MAAO,UAAW,CACtE,EAEaC,EAAmC,CAAC,CAC/C,YAAAf,EACA,SAAAP,CACF,IAA+D,CAE7D,MAAMc,EAAuBC,GAAsC,CACjER,EAAY,KAAOQ,EACnBf,EAASO,CAAW,CACtB,EAGMgB,EAAmB,IAAM,CAC7BhB,EAAY,WAAa,CAACA,EAAY,WACtCP,EAASO,CAAW,CACtB,EAGMC,EAAmB,IAAM,CAC7BD,EAAY,SAAW,CAACA,EAAY,SACpCP,EAASO,CAAW,CACtB,EAEME,KACJ,QAACC,EAAA,EAAK,CAAC,YAAY,iFAChB,0BACD,OAACC,EAAA,EAAK,CAAC,KAAK,QAAQ,MAAM,OAAO,MAAO,CAAE,SAAU,OAAQ,WAAY,MAAO,WAAY,KAAM,EAAG,GACtG,EAGF,SACE,oBACE,oBAACC,EAAA,EAAK,CAAC,MAAM,0BACX,mBAACM,EAAA,GACC,MAAOX,GAAa,MAAQ,KAA+B,SAC3D,SAAUO,EACV,QAASO,CAAA,CACX,EACF,KACA,OAACT,EAAA,GACC,MAAM,sBACN,YAAY,oEAEZ,mBAACP,EAAA,EAAM,CAAC,MAAOE,EAAY,WAAY,SAAUgB,CAAA,CAAkB,EACrE,KACA,OAACX,EAAA,EAAK,CAAC,MAAAH,EACL,mBAACJ,EAAA,EAAM,CAAC,MAAOE,EAAY,SAAU,SAAUC,CAAA,CAAkB,EACnE,GACF,CAEJ,E,eCrDO,MAAMgB,EAAyB,CAAC,CAAE,YAAAjB,EAAa,SAAAP,CAAS,IAAmD,CAChH,MAAMyB,EAAeC,GAAmC,CACtDnB,EAAY,IAAMmB,EAAE,cAAc,MAClC1B,EAASO,CAAW,CACtB,EAEMoB,EAAiBD,GAAmC,CACxDnB,EAAY,MAAQmB,EAAE,cAAc,MACpC1B,EAASO,CAAW,CACtB,EAEA,SACE,oBACE,oBAACK,EAAA,GACC,MAAM,WACN,YAAY,8GAEZ,mBAACgB,EAAA,EAAK,CAAC,SAAUH,EAAa,aAAclB,EAAY,IAAK,EAC/D,KAEA,OAACK,EAAA,EAAK,CAAC,MAAM,aAAa,YAAY,oEACpC,mBAACgB,EAAA,EAAK,CAAC,SAAUD,EAAe,aAAcpB,EAAY,MAAO,EACnE,GACF,CAEJ,E,gDCnBA,MAAMsB,EAAoD,CACxD,YACA,YACA,oBACA,eACA,YACA,cACA,eACA,YACA,YACA,aACA,WACF,EAEA,SAASC,EAAmBC,EAAoE,CAC9F,MAAMC,KAAmB,KAAoBD,CAAG,EAChD,MAAO,CACL,GAAGC,EACH,gBAAkBC,GAAY,CAC5BD,EAAiB,kBAAkBC,CAAO,EAC1CA,EAAQ,iBAAiB,CACvB,KAAM,YACN,KAAM,YACR,CAAC,CACH,CACF,CACF,CAEO,MAAMC,EAA8B5G,GAA2D,CACpG,KAAM,CAAE,YAAAiF,EAAa,SAAAP,CAAS,EAAI1E,EAE5B6G,KAAW,WAAQ,IAAM,CAC7B,MAAMC,EAASN,EAAmB,GAA0B,EAC5D,SAAO,KAA0BM,EAAQ,WAAW,CACtD,EAAG,CAAC,CAAC,EAECtD,KAAQ,MAAWuD,CAAS,EAE5BC,EAAS,CAAE,GAAG,IAA4B,GAAG/B,CAAY,EAE/D,SACE,OAAC,KAAa,CACX,SAAA4B,EAAS,KAAKN,EAAU,IAAKjG,GAAO,UAAUA,CAAE,EAAE,CAAC,EAAE,IAAK2G,GAAS,CAClE,GAAIA,EAAK,QAAU,CAACA,EAAK,OAAOD,CAAM,EACpC,OAAO,KAET,MAAME,EAASD,EAAK,OACdE,EAAOF,EAAK,KAElB,SACE,OAAC3B,EAAA,EAAK,CAAC,MAAO2B,EAAK,KAAoB,UAAWzD,EAAM,MACtD,mBAAC0D,EAAA,CACC,SAAWpF,GAAQ4C,EAAS,CAAE,GAAGO,EAAa,CAACkC,CAAI,EAAGrF,CAAI,CAAC,EAC3D,OAAQsF,EAAYD,EAAMH,CAAM,EAAIA,EAAOG,CAAI,EAAI,SAAcF,EAAK,aACtE,KAAAA,EACA,QAAS,CAAE,KAAM,CAAC,CAAE,EACtB,GAN4BA,EAAK,EAOnC,CAEJ,CAAC,EACH,CAEJ,EAGA,SAASG,EAAY9C,EAAalE,EAAsD,CACtF,OAAOkE,KAAOlE,CAChB,CAEA,MAAM2G,EAAY,KAAO,CACvB,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAUT,GClEaM,EAAwB,CAAC,CAAE,MAAA1C,EAAO,SAAAD,CAAS,IAAa,CACnE,MAAM4C,EAAW3C,EAAM,KACjB4C,KAAS,MAAW,EAAS,EAC7BC,EAAcC,GAAuB,KAAMpF,GAAMA,EAAE,MAAO,OAASiF,CAAQ,EACjF,GAAI,CAACI,EAAcC,CAAe,KAAI,YAA2C,CAAC,CAAC,EAGnF,MAAMC,EAAoBnC,GAAyC,CAC7DA,EAAE,QAAU,SAGdd,EAAQc,EAAE,MAINiC,EAAa/C,EAAM,IAAI,IAAM,QAAa,OAAO,KAAK+C,EAAa/C,EAAM,IAAI,CAAC,EAAE,OAAS,IAC3FA,KAAQ,SAAMA,EAAO+C,EAAa/C,EAAM,IAAI,CAAC,GAG/CD,EAASC,CAAK,EAElB,EAIMa,EAAuBpF,GAA8B,CACzDsH,EAAa/C,EAAM,IAAI,KAAI,SAAMA,EAAOvE,CAAO,EAC/CuH,EAAgBD,CAAY,EAC5BhD,EAASgD,EAAa/C,EAAM,IAAI,CAAC,CACnC,EAGA,SACE,QAAC,OAAI,UAAW4C,EAAO,gBACrB,oBAACjC,EAAA,EAAK,CACJ,mBAACuC,EAAA,GAAM,CAAC,QAASJ,GAAwB,MAAOD,EAAa,SAAUI,CAAA,CAAkB,EAC3F,GACEN,IAAa,KAAqB,MAAQA,IAAa,KAAqB,eAC5E,OAACtC,EAAqB,CAAC,YAAaL,EAAO,SAAUa,CAAA,CAAqB,EAE3E8B,IAAa,KAAqB,UACjC,OAAC/B,EAAyB,CAAC,YAAaZ,EAAO,SAAUa,CAAA,CAAqB,EAE/E8B,IAAa,KAAqB,oBACjC,OAACtB,EAAgC,CAAC,YAAarB,EAAO,SAAUa,CAAA,CAAqB,EAEtF8B,IAAa,KAAqB,cACjC,OAACV,EAA0B,CAAC,YAAajC,EAAO,SAAUa,CAAA,CAAqB,EAEhF8B,IAAa,KAAqB,UACjC,OAACpB,EAAsB,CAAC,YAAavB,EAAO,SAAUa,CAAA,CAAqB,GAE/E,CAEJ,EAEMiC,GAAmE,CACvE,CAAE,MAAO,CAAE,KAAM,KAAqB,IAAK,EAAG,MAAO,MAAO,EAC5D,CAAE,MAAO,CAAE,KAAM,KAAqB,SAAU,EAAG,MAAO,WAAY,EACtE,CAAE,MAAO,CAAE,KAAM,KAAqB,SAAU,EAAG,MAAO,cAAe,EACzE,CAAE,MAAO,CAAE,KAAM,KAAqB,eAAgB,EAAG,MAAO,oBAAqB,EACrF,CAAE,MAAO,CAAE,KAAM,KAAqB,KAAM,EAAG,MAAO,OAAQ,EAC9D,CAAE,MAAO,CAAE,KAAM,KAAqB,SAAU,EAAG,MAAO,YAAa,EACvE,CAAE,MAAO,CAAE,KAAM,KAAqB,QAAS,EAAG,MAAO,WAAY,EACrE,CAAE,MAAO,CAAE,KAAM,KAAqB,KAAM,EAAG,MAAO,OAAQ,CAChE,EAEM,GAAajH,IAA0B,CAC3C,mBAAiB,OAAI,CACnB,aAAcA,EAAM,QAAQ,EAAE,CAChC,CAAC,CACH,G,4BC3DO,MAAMsH,EAAmC,CAC9C,WAAY,KAAmB,GAC/B,OAAQ,CAIN,KAAM,GAIN,UAAW,GAIX,QAAS,CAAC,CACZ,EACA,WAAY,EACZ,WAAY,GACZ,cAAe,GACf,OAAQ,CAAC,CACX,E,gBCrDO,MAAMC,EAAyB,CACpC,sBAAsBpB,EAA0C,CAC9D,MAAMqB,EAAOrB,EAAQ,gBAA4C,CAC/D,KAAM,KAAe,MACrB,SAAU,QACV,QAAS,CAAC,EACV,YAAa,CACX,SAAU,CACR,OAAQ,CAAC,CACX,EACA,UAAW,CAAC,CACd,EACA,YAAa,CACX,gBAAkBsB,GAAM,CACtBA,EAAE,YAAa,SAAS,OAAQ,SAAW,EAC7C,CACF,CACF,CAAC,EAGGtB,EAAQ,YAAY,aAAe,EACrCqB,EAAK,OAAO,CACV,YAAa,CACX,OAAQ,wDACV,CACF,CAAC,EAEDA,EAAK,OAAO,CAAC,CAAC,CAElB,CACF,CClBA,MAAME,EAAiB,eACjBC,GAAe,CAAC,cAAc,EAEvB,GAAS,IAAIC,EAAA,EAAkCrI,GAAA,CAAU,EACnE,sBAAsB,KAAwB,EAC9C,oBAAoB,KAAqB,EACzC,eAAe,CACd,gBAAkB4G,GAAY,CAC5BA,EACG,eAAe,CACd,KAAM,WACN,KAAM,uBACN,YAAa,6CACb,SAAU,CACR,YAAa,MACb,IAAK,GACL,IAAK,GACP,EACA,YAAa,IAAM,GACnB,aAAc,KAAyB,QACzC,CAAC,EACA,eAAe,CACd,KAAM,QACN,KAAM,eACN,SAAU,CACR,YAAa,OACb,IAAK,GACL,IAAK,GACP,EACA,YAAa,IAAM,GACnB,aAAc,KAAyB,KACzC,CAAC,EACA,SAAS,CACR,KAAM,QACN,KAAM,mBACN,SAAU,CACR,QAAS,CACP,CAAE,MAAO,OAAQ,MAAO,MAAO,EAC/B,CAAE,MAAO,OAAQ,MAAO,MAAO,EAC/B,CAAE,MAAO,SAAU,MAAO,QAAS,EACnC,CAAE,MAAO,QAAS,MAAO,OAAQ,CACnC,CACF,EACA,aAAc,KAAyB,KACzC,CAAC,EACA,gBAAwC,CACvC,GAAI,cACJ,KAAM,cACN,KAAM,YACN,OAAQU,EACR,SAAUA,EACV,aAAc,KAAyB,YACvC,QAAS,KACT,SAAUc,GACV,YAAa,IAAM,EACrB,CAAC,EACA,iBAAiB,CAChB,KAAM,UACN,KAAM,qBACN,YAAa,iDACb,aAAc,GACd,SAAUA,GACV,OAAS1B,GAELA,EAAI,YAAY,OAAS,KAAqB,MAC9CA,EAAI,YAAY,OAAS,KAAqB,UAC9CA,EAAI,YAAY,OAAS,KAAqB,WAC9CA,EAAI,YAAY,OAAS,KAAqB,eAGpD,CAAC,EACA,iBAAiB,CAChB,KAAM,aACN,KAAM,gBACN,YAAa,0CACb,aAAc,KAAyB,UACzC,CAAC,EACA,iBAAiB,CAChB,KAAM,SACN,KAAM,gBACN,aAAc,OACd,iBAAkB,EACpB,CAAC,CACL,CACF,CAAC,EACA,gBAAiBE,GAAY,CAC5BA,EACG,iBAAiB,CAChB,KAAM,aACN,KAAM,oBACN,aAAcmB,EAAe,UAC/B,CAAC,EACA,SAAS,CACR,KAAM,aACN,KAAM,cACN,aAAcA,EAAe,WAC7B,SAAU,CACR,QAAS,CACP,CAAE,MAAO,KAAgB,GAAI,MAAO,OAAQ,EAC5C,CAAE,MAAO,KAAgB,GAAI,MAAO,QAAS,EAC7C,CAAE,MAAO,KAAgB,GAAI,MAAO,OAAQ,CAC9C,CACF,CACF,CAAC,EACA,iBAAiB,CAChB,KAAM,cACN,SAAU,CAACI,CAAc,EACzB,KAAM,oBACN,aAAcJ,EAAe,QAAQ,IACvC,CAAC,EACA,gBAAgB,CACf,GAAI,iBACJ,SAAU,CAACI,CAAc,EACzB,KAAM,iBACN,KAAM,cACN,YAAa,0CACb,OAAQ,IAAwB,IAAI,cAAc,EAAE,OACpD,aAAc,CAAC,KAAU,GAAG,EAC5B,OAASzB,GAAQA,EAAI,QAAQ,IAC/B,CAAC,EACA,iBAAiB,CAChB,KAAM,mBACN,SAAU,CAACyB,CAAc,EACzB,KAAM,aACN,YAAa,2CACb,aAAcJ,EAAe,QAAQ,UACrC,OAASrB,GAAQA,EAAI,QAAQ,SAAS,SAAW,GAAKA,EAAI,QAAQ,QAAQ,CAAC,IAAM,KAAU,KAC7F,CAAC,EACA,eAAe,CACd,KAAM,gBACN,SAAU,CAACyB,CAAc,EACzB,KAAM,SACN,YAAa,8CACb,SAAU,CACR,iBAAkB,GAClB,QAAS,CAAC,EACV,YAAa,qBACb,WAAY,MAAOtD,GAAkC,CACnD,MAAMxE,EAAU,CAAC,EACjB,GAAIwE,GAAWA,EAAQ,MAAQA,EAAQ,KAAK,OAAS,EAAG,CACtD,MAAM/D,EAAQ+D,EAAQ,KAAK,CAAC,EAC5B,UAAWyD,KAASxH,EAAM,OACxB,GAAIwH,EAAM,OAAS,KAAU,OAAQ,CACnC,MAAMC,KAAO,MAAoBD,EAAOxH,EAAO+D,EAAQ,IAAI,EACrDD,EAAQ0D,EAAM,KACpBjI,EAAQ,KAAK,CAAE,MAAAuE,EAAO,MAAO2D,CAAK,CAAC,CACrC,CAEJ,CACA,OAAOlI,CACT,CACF,EACA,aAAc,GACd,OAASqG,GAAQA,EAAI,QAAQ,MAAQ,CAACA,EAAI,QAAQ,SACpD,CAAC,EACA,gBAAgB,CACf,GAAI,0BACJ,KAAM,0BACN,KAAM,oBACN,OAAQhC,CACV,CAAC,CACL,CAAC,EACA,uBAAuB,IAAIsD,EAA0B,C","sources":["webpack://grafana/./public/app/plugins/panel/table/TablePanel.tsx","webpack://grafana/./public/app/plugins/panel/table/migrations.ts","webpack://grafana/./public/app/plugins/panel/table/PaginationEditor.tsx","webpack://grafana/./public/app/plugins/panel/table/cells/AutoCellOptionsEditor.tsx","webpack://grafana/./public/app/plugins/panel/table/cells/BarGaugeCellOptionsEditor.tsx","webpack://grafana/./public/app/plugins/panel/table/cells/ColorBackgroundCellOptionsEditor.tsx","webpack://grafana/./public/app/plugins/panel/table/cells/ImageCellOptionsEditor.tsx","webpack://grafana/./public/app/plugins/panel/table/cells/SparklineCellOptionsEditor.tsx","webpack://grafana/./public/app/plugins/panel/table/TableCellOptionEditor.tsx","webpack://grafana/./public/app/plugins/panel/table/panelcfg.gen.ts","webpack://grafana/./public/app/plugins/panel/table/suggestions.ts","webpack://grafana/./public/app/plugins/panel/table/module.tsx"],"sourcesContent":["import { css } from '@emotion/css';\n\nimport {\n  DashboardCursorSync,\n  DataFrame,\n  FieldMatcherID,\n  getFrameDisplayName,\n  PanelProps,\n  SelectableValue,\n} from '@grafana/data';\nimport { config, PanelDataErrorView } from '@grafana/runtime';\nimport { Select, Table, usePanelContext, useTheme2 } from '@grafana/ui';\nimport { TableSortByFieldState } from '@grafana/ui/src/components/Table/types';\n\nimport { hasDeprecatedParentRowIndex, migrateFromParentRowIndexToNestedFrames } from './migrations';\nimport { Options } from './panelcfg.gen';\n\ninterface Props extends PanelProps<Options> {}\n\nexport function TablePanel(props: Props) {\n  const { data, height, width, options, fieldConfig, id, timeRange } = props;\n\n  const theme = useTheme2();\n  const panelContext = usePanelContext();\n  const frames = hasDeprecatedParentRowIndex(data.series)\n    ? migrateFromParentRowIndexToNestedFrames(data.series)\n    : data.series;\n  const count = frames?.length;\n  const hasFields = frames.some((frame) => frame.fields.length > 0);\n  const currentIndex = getCurrentFrameIndex(frames, options);\n  const main = frames[currentIndex];\n\n  let tableHeight = height;\n\n  if (!count || !hasFields) {\n    return <PanelDataErrorView panelId={id} fieldConfig={fieldConfig} data={data} />;\n  }\n\n  if (count > 1) {\n    const inputHeight = theme.spacing.gridSize * theme.components.height.md;\n    const padding = theme.spacing.gridSize;\n\n    tableHeight = height - inputHeight - padding;\n  }\n\n  const enableSharedCrosshair = panelContext.sync && panelContext.sync() !== DashboardCursorSync.Off;\n\n  const tableElement = (\n    <Table\n      height={tableHeight}\n      width={width}\n      data={main}\n      noHeader={!options.showHeader}\n      showTypeIcons={options.showTypeIcons}\n      resizable={true}\n      initialSortBy={options.sortBy}\n      onSortByChange={(sortBy) => onSortByChange(sortBy, props)}\n      onColumnResize={(displayName, resizedWidth) => onColumnResize(displayName, resizedWidth, props)}\n      onCellFilterAdded={panelContext.onAddAdHocFilter}\n      footerOptions={options.footer}\n      enablePagination={options.footer?.enablePagination}\n      cellHeight={options.cellHeight}\n      timeRange={timeRange}\n      enableSharedCrosshair={config.featureToggles.tableSharedCrosshair && enableSharedCrosshair}\n      fieldConfig={fieldConfig}\n    />\n  );\n\n  if (count === 1) {\n    return tableElement;\n  }\n\n  const names = frames.map((frame, index) => {\n    return {\n      label: getFrameDisplayName(frame),\n      value: index,\n    };\n  });\n\n  return (\n    <div className={tableStyles.wrapper}>\n      {tableElement}\n      <div className={tableStyles.selectWrapper}>\n        <Select options={names} value={names[currentIndex]} onChange={(val) => onChangeTableSelection(val, props)} />\n      </div>\n    </div>\n  );\n}\n\nfunction getCurrentFrameIndex(frames: DataFrame[], options: Options) {\n  return options.frameIndex > 0 && options.frameIndex < frames.length ? options.frameIndex : 0;\n}\n\nfunction onColumnResize(fieldDisplayName: string, width: number, props: Props) {\n  const { fieldConfig } = props;\n  const { overrides } = fieldConfig;\n\n  const matcherId = FieldMatcherID.byName;\n  const propId = 'custom.width';\n\n  // look for existing override\n  const override = overrides.find((o) => o.matcher.id === matcherId && o.matcher.options === fieldDisplayName);\n\n  if (override) {\n    // look for existing property\n    const property = override.properties.find((prop) => prop.id === propId);\n    if (property) {\n      property.value = width;\n    } else {\n      override.properties.push({ id: propId, value: width });\n    }\n  } else {\n    overrides.push({\n      matcher: { id: matcherId, options: fieldDisplayName },\n      properties: [{ id: propId, value: width }],\n    });\n  }\n\n  props.onFieldConfigChange({\n    ...fieldConfig,\n    overrides,\n  });\n}\n\nfunction onSortByChange(sortBy: TableSortByFieldState[], props: Props) {\n  props.onOptionsChange({\n    ...props.options,\n    sortBy,\n  });\n}\n\nfunction onChangeTableSelection(val: SelectableValue<number>, props: Props) {\n  props.onOptionsChange({\n    ...props.options,\n    frameIndex: val.value || 0,\n  });\n}\n\nconst tableStyles = {\n  wrapper: css`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    height: 100%;\n  `,\n  selectWrapper: css`\n    padding: 8px 8px 0px 8px;\n  `,\n};\n","import { omitBy, isNil, isNumber, defaultTo, groupBy } from 'lodash';\n\nimport {\n  PanelModel,\n  FieldMatcherID,\n  ConfigOverrideRule,\n  ThresholdsMode,\n  ThresholdsConfig,\n  FieldConfig,\n  DataFrame,\n  FieldType,\n} from '@grafana/data';\nimport { ReduceTransformerOptions } from '@grafana/data/src/transformations/transformers/reduce';\n\nimport { Options } from './panelcfg.gen';\n\n/**\n * At 7.0, the `table` panel was swapped from an angular implementation to a react one.\n * The models do not match, so this process will delegate to the old implementation when\n * a saved table configuration exists.\n */\nexport const tableMigrationHandler = (panel: PanelModel<Options>): Partial<Options> => {\n  // Table was saved as an angular table, lets just swap to the 'table-old' panel\n  if (!panel.pluginVersion && 'columns' in panel) {\n    console.log('Was angular table', panel);\n  }\n\n  // Nothing changed\n  return panel.options;\n};\n\nconst transformsMap = {\n  timeseries_to_rows: 'seriesToRows',\n  timeseries_to_columns: 'seriesToColumns',\n  timeseries_aggregations: 'reduce',\n  table: 'merge',\n};\n\nconst columnsMap = {\n  avg: 'mean',\n  min: 'min',\n  max: 'max',\n  total: 'sum',\n  current: 'lastNotNull',\n  count: 'count',\n};\n\nconst colorModeMap = {\n  cell: 'color-background',\n  row: 'color-background',\n  value: 'color-text',\n};\n\ntype Transformations = keyof typeof transformsMap;\n\ntype Transformation = {\n  id: string;\n  options: ReduceTransformerOptions;\n};\n\ntype Columns = keyof typeof columnsMap;\n\ntype Column = {\n  value: Columns;\n  text: string;\n};\n\ntype ColorModes = keyof typeof colorModeMap;\n\nconst generateThresholds = (thresholds: string[], colors: string[]) => {\n  return [-Infinity, ...thresholds].map((threshold, idx) => ({\n    color: colors[idx],\n    value: isNumber(threshold) ? threshold : parseInt(threshold, 10),\n  }));\n};\n\nconst migrateTransformations = (\n  panel: PanelModel<Partial<Options>>,\n  oldOpts: { columns: any; transform: Transformations }\n) => {\n  const transformations: Transformation[] = panel.transformations ?? [];\n  if (Object.keys(transformsMap).includes(oldOpts.transform)) {\n    const opts: ReduceTransformerOptions = {\n      reducers: [],\n    };\n    if (oldOpts.transform === 'timeseries_aggregations') {\n      opts.includeTimeField = false;\n      opts.reducers = oldOpts.columns.map((column: Column) => columnsMap[column.value]);\n    }\n    transformations.push({\n      id: transformsMap[oldOpts.transform],\n      options: opts,\n    });\n  }\n  return transformations;\n};\n\ntype Style = {\n  unit: string;\n  type: string;\n  alias: string;\n  decimals: number;\n  colors: string[];\n  colorMode: ColorModes;\n  pattern: string;\n  thresholds: string[];\n  align?: string;\n  dateFormat: string;\n  link: boolean;\n  linkTargetBlank?: boolean;\n  linkTooltip?: string;\n  linkUrl?: string;\n};\n\nconst migrateTableStyleToOverride = (style: Style) => {\n  const fieldMatcherId = /^\\/.*\\/$/.test(style.pattern) ? FieldMatcherID.byRegexp : FieldMatcherID.byName;\n  const override: ConfigOverrideRule = {\n    matcher: {\n      id: fieldMatcherId,\n      options: style.pattern,\n    },\n    properties: [],\n  };\n\n  if (style.alias) {\n    override.properties.push({\n      id: 'displayName',\n      value: style.alias,\n    });\n  }\n\n  if (style.unit) {\n    override.properties.push({\n      id: 'unit',\n      value: style.unit,\n    });\n  }\n\n  if (style.decimals) {\n    override.properties.push({\n      id: 'decimals',\n      value: style.decimals,\n    });\n  }\n\n  if (style.type === 'date') {\n    override.properties.push({\n      id: 'unit',\n      value: `time: ${style.dateFormat}`,\n    });\n  }\n\n  if (style.type === 'hidden') {\n    override.properties.push({\n      id: 'custom.hidden',\n      value: true,\n    });\n  }\n\n  if (style.link) {\n    override.properties.push({\n      id: 'links',\n      value: [\n        {\n          title: defaultTo(style.linkTooltip, ''),\n          url: defaultTo(style.linkUrl, ''),\n          targetBlank: defaultTo(style.linkTargetBlank, false),\n        },\n      ],\n    });\n  }\n\n  if (style.colorMode) {\n    override.properties.push({\n      id: 'custom.cellOptions',\n      value: {\n        type: colorModeMap[style.colorMode],\n      },\n    });\n  }\n\n  if (style.align) {\n    override.properties.push({\n      id: 'custom.align',\n      value: style.align === 'auto' ? null : style.align,\n    });\n  }\n\n  if (style.thresholds?.length) {\n    override.properties.push({\n      id: 'thresholds',\n      value: {\n        mode: ThresholdsMode.Absolute,\n        steps: generateThresholds(style.thresholds, style.colors),\n      },\n    });\n  }\n\n  return override;\n};\n\nconst migrateDefaults = (prevDefaults: Style) => {\n  let defaults: FieldConfig = {\n    custom: {},\n  };\n  if (prevDefaults) {\n    defaults = omitBy(\n      {\n        unit: prevDefaults.unit,\n        decimals: prevDefaults.decimals,\n        displayName: prevDefaults.alias,\n        custom: {\n          align: prevDefaults.align === 'auto' ? null : prevDefaults.align,\n        },\n      },\n      isNil\n    );\n\n    if (prevDefaults.thresholds.length) {\n      const thresholds: ThresholdsConfig = {\n        mode: ThresholdsMode.Absolute,\n        steps: generateThresholds(prevDefaults.thresholds, prevDefaults.colors),\n      };\n      defaults.thresholds = thresholds;\n    }\n\n    if (prevDefaults.colorMode) {\n      defaults.custom.cellOptions = {\n        type: colorModeMap[prevDefaults.colorMode],\n      };\n    }\n  }\n  return defaults;\n};\n\n/**\n * This is called when the panel changes from another panel\n */\nexport const tablePanelChangedHandler = (\n  panel: PanelModel<Partial<Options>>,\n  prevPluginId: string,\n  prevOptions: any\n) => {\n  // Changing from angular table panel\n  if (prevPluginId === 'table-old' && prevOptions.angular) {\n    const oldOpts = prevOptions.angular;\n    const transformations = migrateTransformations(panel, oldOpts);\n    const prevDefaults = oldOpts.styles.find((style: any) => style.pattern === '/.*/');\n    const defaults = migrateDefaults(prevDefaults);\n    const overrides = oldOpts.styles.filter((style: any) => style.pattern !== '/.*/').map(migrateTableStyleToOverride);\n\n    panel.transformations = transformations;\n    panel.fieldConfig = {\n      defaults,\n      overrides,\n    };\n  }\n\n  return {};\n};\n\nconst getMainFrames = (frames: DataFrame[] | null) => {\n  return frames?.filter((df) => df.meta?.custom?.parentRowIndex === undefined) || [frames?.[0]];\n};\n\n/**\n * In 9.3 meta.custom.parentRowIndex was introduced to support sub-tables.\n * In 10.2 meta.custom.parentRowIndex was deprecated in favor of FieldType.nestedFrames, which supports multiple nested frames.\n * Migrate DataFrame[] from using meta.custom.parentRowIndex to using FieldType.nestedFrames\n */\nexport const migrateFromParentRowIndexToNestedFrames = (frames: DataFrame[] | null) => {\n  const migratedFrames: DataFrame[] = [];\n  const mainFrames = getMainFrames(frames).filter(\n    (frame: DataFrame | undefined): frame is DataFrame => !!frame && frame.length !== 0\n  );\n\n  mainFrames?.forEach((frame) => {\n    const subFrames = frames?.filter((df) => frame.refId === df.refId && df.meta?.custom?.parentRowIndex !== undefined);\n    const subFramesGrouped = groupBy(subFrames, (frame: DataFrame) => frame.meta?.custom?.parentRowIndex);\n    const subFramesByIndex = Object.keys(subFramesGrouped).map((key) => subFramesGrouped[key]);\n    const migratedFrame = { ...frame };\n\n    if (subFrames && subFrames.length > 0) {\n      migratedFrame.fields.push({\n        name: 'nested',\n        type: FieldType.nestedFrames,\n        config: {},\n        values: subFramesByIndex,\n      });\n    }\n    migratedFrames.push(migratedFrame);\n  });\n\n  return migratedFrames;\n};\n\nexport const hasDeprecatedParentRowIndex = (frames: DataFrame[] | null) => {\n  return frames?.some((df) => df.meta?.custom?.parentRowIndex !== undefined);\n};\n","import * as React from 'react';\n\nimport { StandardEditorProps } from '@grafana/data';\nimport { Switch } from '@grafana/ui';\n\nexport function PaginationEditor({ onChange, value, context }: StandardEditorProps<boolean>) {\n  const changeValue = (event: React.FormEvent<HTMLInputElement> | undefined) => {\n    if (event?.currentTarget.checked) {\n      context.options.footer.show = false;\n    }\n    onChange(event?.currentTarget.checked);\n  };\n\n  return <Switch value={Boolean(value)} onChange={changeValue} />;\n}\n","import { TableAutoCellOptions, TableColorTextCellOptions } from '@grafana/schema';\nimport { Field, Switch, Badge, Label } from '@grafana/ui';\n\nimport { TableCellEditorProps } from '../TableCellOptionEditor';\n\nexport const AutoCellOptionsEditor = ({\n  cellOptions,\n  onChange,\n}: TableCellEditorProps<TableAutoCellOptions | TableColorTextCellOptions>) => {\n  // Handle row coloring changes\n  const onWrapTextChange = () => {\n    cellOptions.wrapText = !cellOptions.wrapText;\n    onChange(cellOptions);\n  };\n\n  const label = (\n    <Label description=\"If selected text will be wrapped to the width of text in the configured column\">\n      {'Wrap text '}\n      <Badge text=\"Alpha\" color=\"blue\" style={{ fontSize: '11px', marginLeft: '5px', lineHeight: '1.2' }} />\n    </Label>\n  );\n\n  return (\n    <>\n      <Field label={label}>\n        <Switch value={cellOptions.wrapText} onChange={onWrapTextChange} />\n      </Field>\n    </>\n  );\n};\n","import { SelectableValue } from '@grafana/data';\nimport { BarGaugeDisplayMode, BarGaugeValueMode, TableBarGaugeCellOptions } from '@grafana/schema';\nimport { Field, RadioButtonGroup, Stack } from '@grafana/ui';\n\nimport { TableCellEditorProps } from '../TableCellOptionEditor';\n\ntype Props = TableCellEditorProps<TableBarGaugeCellOptions>;\n\nexport function BarGaugeCellOptionsEditor({ cellOptions, onChange }: Props) {\n  // Set the display mode on change\n  const onCellOptionsChange = (v: BarGaugeDisplayMode) => {\n    cellOptions.mode = v;\n    onChange(cellOptions);\n  };\n\n  const onValueModeChange = (v: BarGaugeValueMode) => {\n    cellOptions.valueDisplayMode = v;\n    onChange(cellOptions);\n  };\n\n  return (\n    <Stack direction=\"column\" gap={0}>\n      <Field label=\"Gauge display mode\">\n        <RadioButtonGroup\n          value={cellOptions?.mode ?? BarGaugeDisplayMode.Gradient}\n          onChange={onCellOptionsChange}\n          options={barGaugeOpts}\n        />\n      </Field>\n      <Field label=\"Value display\">\n        <RadioButtonGroup\n          value={cellOptions?.valueDisplayMode ?? BarGaugeValueMode.Text}\n          onChange={onValueModeChange}\n          options={valueModes}\n        />\n      </Field>\n    </Stack>\n  );\n}\n\nconst barGaugeOpts: SelectableValue[] = [\n  { value: BarGaugeDisplayMode.Basic, label: 'Basic' },\n  { value: BarGaugeDisplayMode.Gradient, label: 'Gradient' },\n  { value: BarGaugeDisplayMode.Lcd, label: 'Retro LCD' },\n];\n\nconst valueModes: SelectableValue[] = [\n  { value: BarGaugeValueMode.Color, label: 'Value color' },\n  { value: BarGaugeValueMode.Text, label: 'Text color' },\n  { value: BarGaugeValueMode.Hidden, label: 'Hidden' },\n];\n","import { SelectableValue } from '@grafana/data';\nimport { TableCellBackgroundDisplayMode, TableColoredBackgroundCellOptions } from '@grafana/schema';\nimport { Field, RadioButtonGroup, Switch, Label, Badge } from '@grafana/ui';\n\nimport { TableCellEditorProps } from '../TableCellOptionEditor';\n\nconst colorBackgroundOpts: Array<SelectableValue<TableCellBackgroundDisplayMode>> = [\n  { value: TableCellBackgroundDisplayMode.Basic, label: 'Basic' },\n  { value: TableCellBackgroundDisplayMode.Gradient, label: 'Gradient' },\n];\n\nexport const ColorBackgroundCellOptionsEditor = ({\n  cellOptions,\n  onChange,\n}: TableCellEditorProps<TableColoredBackgroundCellOptions>) => {\n  // Set the display mode on change\n  const onCellOptionsChange = (v: TableCellBackgroundDisplayMode) => {\n    cellOptions.mode = v;\n    onChange(cellOptions);\n  };\n\n  // Handle row coloring changes\n  const onColorRowChange = () => {\n    cellOptions.applyToRow = !cellOptions.applyToRow;\n    onChange(cellOptions);\n  };\n\n  // Handle row coloring changes\n  const onWrapTextChange = () => {\n    cellOptions.wrapText = !cellOptions.wrapText;\n    onChange(cellOptions);\n  };\n\n  const label = (\n    <Label description=\"If selected text will be wrapped to the width of text in the configured column\">\n      {'Wrap text '}\n      <Badge text=\"Alpha\" color=\"blue\" style={{ fontSize: '11px', marginLeft: '5px', lineHeight: '1.2' }} />\n    </Label>\n  );\n\n  return (\n    <>\n      <Field label=\"Background display mode\">\n        <RadioButtonGroup\n          value={cellOptions?.mode ?? TableCellBackgroundDisplayMode.Gradient}\n          onChange={onCellOptionsChange}\n          options={colorBackgroundOpts}\n        />\n      </Field>\n      <Field\n        label=\"Apply to entire row\"\n        description=\"If selected the entire row will be colored as this cell would be.\"\n      >\n        <Switch value={cellOptions.applyToRow} onChange={onColorRowChange} />\n      </Field>\n      <Field label={label}>\n        <Switch value={cellOptions.wrapText} onChange={onWrapTextChange} />\n      </Field>\n    </>\n  );\n};\n","import { FormEvent } from 'react';\n\nimport { TableImageCellOptions } from '@grafana/schema';\nimport { Field, Input } from '@grafana/ui';\n\nimport { TableCellEditorProps } from '../TableCellOptionEditor';\n\nexport const ImageCellOptionsEditor = ({ cellOptions, onChange }: TableCellEditorProps<TableImageCellOptions>) => {\n  const onAltChange = (e: FormEvent<HTMLInputElement>) => {\n    cellOptions.alt = e.currentTarget.value;\n    onChange(cellOptions);\n  };\n\n  const onTitleChange = (e: FormEvent<HTMLInputElement>) => {\n    cellOptions.title = e.currentTarget.value;\n    onChange(cellOptions);\n  };\n\n  return (\n    <>\n      <Field\n        label=\"Alt text\"\n        description=\"Alternative text that will be displayed if an image can't be displayed or for users who use a screen reader\"\n      >\n        <Input onChange={onAltChange} defaultValue={cellOptions.alt} />\n      </Field>\n\n      <Field label=\"Title text\" description=\"Text that will be displayed when the image is hovered by a cursor\">\n        <Input onChange={onTitleChange} defaultValue={cellOptions.title} />\n      </Field>\n    </>\n  );\n};\n","import { css } from '@emotion/css';\nimport { useMemo } from 'react';\n\nimport { createFieldConfigRegistry, SetFieldConfigOptionsArgs } from '@grafana/data';\nimport { GraphFieldConfig, TableSparklineCellOptions } from '@grafana/schema';\nimport { VerticalGroup, Field, useStyles2 } from '@grafana/ui';\nimport { defaultSparklineCellConfig } from '@grafana/ui/src/components/Table/SparklineCell';\n\nimport { getGraphFieldConfig } from '../../timeseries/config';\nimport { TableCellEditorProps } from '../TableCellOptionEditor';\n\ntype OptionKey = keyof TableSparklineCellOptions;\n\nconst optionIds: Array<keyof TableSparklineCellOptions> = [\n  'hideValue',\n  'drawStyle',\n  'lineInterpolation',\n  'barAlignment',\n  'lineWidth',\n  'fillOpacity',\n  'gradientMode',\n  'lineStyle',\n  'spanNulls',\n  'showPoints',\n  'pointSize',\n];\n\nfunction getChartCellConfig(cfg: GraphFieldConfig): SetFieldConfigOptionsArgs<GraphFieldConfig> {\n  const graphFieldConfig = getGraphFieldConfig(cfg);\n  return {\n    ...graphFieldConfig,\n    useCustomConfig: (builder) => {\n      graphFieldConfig.useCustomConfig?.(builder);\n      builder.addBooleanSwitch({\n        path: 'hideValue',\n        name: 'Hide value',\n      });\n    },\n  };\n}\n\nexport const SparklineCellOptionsEditor = (props: TableCellEditorProps<TableSparklineCellOptions>) => {\n  const { cellOptions, onChange } = props;\n\n  const registry = useMemo(() => {\n    const config = getChartCellConfig(defaultSparklineCellConfig);\n    return createFieldConfigRegistry(config, 'ChartCell');\n  }, []);\n\n  const style = useStyles2(getStyles);\n\n  const values = { ...defaultSparklineCellConfig, ...cellOptions };\n\n  return (\n    <VerticalGroup>\n      {registry.list(optionIds.map((id) => `custom.${id}`)).map((item) => {\n        if (item.showIf && !item.showIf(values)) {\n          return null;\n        }\n        const Editor = item.editor;\n        const path = item.path;\n\n        return (\n          <Field label={item.name} key={item.id} className={style.field}>\n            <Editor\n              onChange={(val) => onChange({ ...cellOptions, [path]: val })}\n              value={(isOptionKey(path, values) ? values[path] : undefined) ?? item.defaultValue}\n              item={item}\n              context={{ data: [] }}\n            />\n          </Field>\n        );\n      })}\n    </VerticalGroup>\n  );\n};\n\n// jumping through hoops to avoid using \"any\"\nfunction isOptionKey(key: string, options: TableSparklineCellOptions): key is OptionKey {\n  return key in options;\n}\n\nconst getStyles = () => ({\n  field: css`\n    width: 100%;\n\n    // @TODO don't show \"scheme\" option for custom gradient mode.\n    // it needs thresholds to work, which are not supported\n    // for area chart cell right now\n    [title='Use color scheme to define gradient'] {\n      display: none;\n    }\n  `,\n});\n","import { css } from '@emotion/css';\nimport { merge } from 'lodash';\nimport { useState } from 'react';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { TableCellOptions } from '@grafana/schema';\nimport { Field, Select, TableCellDisplayMode, useStyles2 } from '@grafana/ui';\n\nimport { AutoCellOptionsEditor } from './cells/AutoCellOptionsEditor';\nimport { BarGaugeCellOptionsEditor } from './cells/BarGaugeCellOptionsEditor';\nimport { ColorBackgroundCellOptionsEditor } from './cells/ColorBackgroundCellOptionsEditor';\nimport { ImageCellOptionsEditor } from './cells/ImageCellOptionsEditor';\nimport { SparklineCellOptionsEditor } from './cells/SparklineCellOptionsEditor';\n\n// The props that any cell type editor are expected\n// to handle. In this case the generic type should\n// be a discriminated interface of TableCellOptions\nexport interface TableCellEditorProps<T> {\n  cellOptions: T;\n  onChange: (value: T) => void;\n}\n\ninterface Props {\n  value: TableCellOptions;\n  onChange: (v: TableCellOptions) => void;\n}\n\nexport const TableCellOptionEditor = ({ value, onChange }: Props) => {\n  const cellType = value.type;\n  const styles = useStyles2(getStyles);\n  const currentMode = cellDisplayModeOptions.find((o) => o.value!.type === cellType)!;\n  let [settingCache, setSettingCache] = useState<Record<string, TableCellOptions>>({});\n\n  // Update display mode on change\n  const onCellTypeChange = (v: SelectableValue<TableCellOptions>) => {\n    if (v.value !== undefined) {\n      // Set the new type of cell starting\n      // with default settings\n      value = v.value;\n\n      // When changing cell type see if there were previously stored\n      // settings and merge those with the changed value\n      if (settingCache[value.type] !== undefined && Object.keys(settingCache[value.type]).length > 1) {\n        value = merge(value, settingCache[value.type]);\n      }\n\n      onChange(value);\n    }\n  };\n\n  // When options for a cell change we merge\n  // any option changes with our options object\n  const onCellOptionsChange = (options: TableCellOptions) => {\n    settingCache[value.type] = merge(value, options);\n    setSettingCache(settingCache);\n    onChange(settingCache[value.type]);\n  };\n\n  // Setup and inject editor\n  return (\n    <div className={styles.fixBottomMargin}>\n      <Field>\n        <Select options={cellDisplayModeOptions} value={currentMode} onChange={onCellTypeChange} />\n      </Field>\n      {(cellType === TableCellDisplayMode.Auto || cellType === TableCellDisplayMode.ColorText) && (\n        <AutoCellOptionsEditor cellOptions={value} onChange={onCellOptionsChange} />\n      )}\n      {cellType === TableCellDisplayMode.Gauge && (\n        <BarGaugeCellOptionsEditor cellOptions={value} onChange={onCellOptionsChange} />\n      )}\n      {cellType === TableCellDisplayMode.ColorBackground && (\n        <ColorBackgroundCellOptionsEditor cellOptions={value} onChange={onCellOptionsChange} />\n      )}\n      {cellType === TableCellDisplayMode.Sparkline && (\n        <SparklineCellOptionsEditor cellOptions={value} onChange={onCellOptionsChange} />\n      )}\n      {cellType === TableCellDisplayMode.Image && (\n        <ImageCellOptionsEditor cellOptions={value} onChange={onCellOptionsChange} />\n      )}\n    </div>\n  );\n};\n\nconst cellDisplayModeOptions: Array<SelectableValue<TableCellOptions>> = [\n  { value: { type: TableCellDisplayMode.Auto }, label: 'Auto' },\n  { value: { type: TableCellDisplayMode.Sparkline }, label: 'Sparkline' },\n  { value: { type: TableCellDisplayMode.ColorText }, label: 'Colored text' },\n  { value: { type: TableCellDisplayMode.ColorBackground }, label: 'Colored background' },\n  { value: { type: TableCellDisplayMode.Gauge }, label: 'Gauge' },\n  { value: { type: TableCellDisplayMode.DataLinks }, label: 'Data links' },\n  { value: { type: TableCellDisplayMode.JSONView }, label: 'JSON View' },\n  { value: { type: TableCellDisplayMode.Image }, label: 'Image' },\n];\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  fixBottomMargin: css({\n    marginBottom: theme.spacing(-2),\n  }),\n});\n","// Code generated - EDITING IS FUTILE. DO NOT EDIT.\n//\n// Generated by:\n//     public/app/plugins/gen.go\n// Using jennies:\n//     TSTypesJenny\n//     PluginTsTypesJenny\n//\n// Run 'make gen-cue' from repository root to regenerate.\n\nimport * as ui from '@grafana/schema';\n\nexport interface Options {\n  /**\n   * Controls the height of the rows\n   */\n  cellHeight?: ui.TableCellHeight;\n  /**\n   * Controls footer options\n   */\n  footer?: ui.TableFooterOptions;\n  /**\n   * Represents the index of the selected frame\n   */\n  frameIndex: number;\n  /**\n   * Controls whether the panel should show the header\n   */\n  showHeader: boolean;\n  /**\n   * Controls whether the header should show icons for the column types\n   */\n  showTypeIcons?: boolean;\n  /**\n   * Used to control row sorting\n   */\n  sortBy?: Array<ui.TableSortByFieldState>;\n}\n\nexport const defaultOptions: Partial<Options> = {\n  cellHeight: ui.TableCellHeight.Sm,\n  footer: {\n    /**\n     * Controls whether the footer should be shown\n     */\n    show: false,\n    /**\n     * Controls whether the footer should show the total number of rows on Count calculation\n     */\n    countRows: false,\n    /**\n     * Represents the selected calculations\n     */\n    reducer: [],\n  },\n  frameIndex: 0,\n  showHeader: true,\n  showTypeIcons: false,\n  sortBy: [],\n};\n\nexport interface FieldConfig extends ui.TableFieldOptions {}\n","import { VisualizationSuggestionsBuilder } from '@grafana/data';\nimport { TableFieldOptions } from '@grafana/schema';\nimport { SuggestionName } from 'app/types/suggestions';\n\nimport { Options } from './panelcfg.gen';\n\nexport class TableSuggestionsSupplier {\n  getSuggestionsForData(builder: VisualizationSuggestionsBuilder) {\n    const list = builder.getListAppender<Options, TableFieldOptions>({\n      name: SuggestionName.Table,\n      pluginId: 'table',\n      options: {},\n      fieldConfig: {\n        defaults: {\n          custom: {},\n        },\n        overrides: [],\n      },\n      cardOptions: {\n        previewModifier: (s) => {\n          s.fieldConfig!.defaults.custom!.minWidth = 50;\n        },\n      },\n    });\n\n    // If there are not data suggest table anyway but use icon instead of real preview\n    if (builder.dataSummary.fieldCount === 0) {\n      list.append({\n        cardOptions: {\n          imgSrc: 'public/app/plugins/panel/table/img/icn-table-panel.svg',\n        },\n      });\n    } else {\n      list.append({});\n    }\n  }\n}\n","import {\n  FieldOverrideContext,\n  FieldType,\n  getFieldDisplayName,\n  PanelPlugin,\n  ReducerID,\n  standardEditorsRegistry,\n  identityOverrideProcessor,\n} from '@grafana/data';\nimport { TableCellOptions, TableCellDisplayMode, defaultTableFieldOptions, TableCellHeight } from '@grafana/schema';\n\nimport { PaginationEditor } from './PaginationEditor';\nimport { TableCellOptionEditor } from './TableCellOptionEditor';\nimport { TablePanel } from './TablePanel';\nimport { tableMigrationHandler, tablePanelChangedHandler } from './migrations';\nimport { Options, defaultOptions, FieldConfig } from './panelcfg.gen';\nimport { TableSuggestionsSupplier } from './suggestions';\n\nconst footerCategory = 'Table footer';\nconst cellCategory = ['Cell options'];\n\nexport const plugin = new PanelPlugin<Options, FieldConfig>(TablePanel)\n  .setPanelChangeHandler(tablePanelChangedHandler)\n  .setMigrationHandler(tableMigrationHandler)\n  .useFieldConfig({\n    useCustomConfig: (builder) => {\n      builder\n        .addNumberInput({\n          path: 'minWidth',\n          name: 'Minimum column width',\n          description: 'The minimum width for column auto resizing',\n          settings: {\n            placeholder: '150',\n            min: 50,\n            max: 500,\n          },\n          shouldApply: () => true,\n          defaultValue: defaultTableFieldOptions.minWidth,\n        })\n        .addNumberInput({\n          path: 'width',\n          name: 'Column width',\n          settings: {\n            placeholder: 'auto',\n            min: 20,\n            max: 300,\n          },\n          shouldApply: () => true,\n          defaultValue: defaultTableFieldOptions.width,\n        })\n        .addRadio({\n          path: 'align',\n          name: 'Column alignment',\n          settings: {\n            options: [\n              { label: 'Auto', value: 'auto' },\n              { label: 'Left', value: 'left' },\n              { label: 'Center', value: 'center' },\n              { label: 'Right', value: 'right' },\n            ],\n          },\n          defaultValue: defaultTableFieldOptions.align,\n        })\n        .addCustomEditor<void, TableCellOptions>({\n          id: 'cellOptions',\n          path: 'cellOptions',\n          name: 'Cell type',\n          editor: TableCellOptionEditor,\n          override: TableCellOptionEditor,\n          defaultValue: defaultTableFieldOptions.cellOptions,\n          process: identityOverrideProcessor,\n          category: cellCategory,\n          shouldApply: () => true,\n        })\n        .addBooleanSwitch({\n          path: 'inspect',\n          name: 'Cell value inspect',\n          description: 'Enable cell value inspection in a modal window',\n          defaultValue: false,\n          category: cellCategory,\n          showIf: (cfg) => {\n            return (\n              cfg.cellOptions.type === TableCellDisplayMode.Auto ||\n              cfg.cellOptions.type === TableCellDisplayMode.JSONView ||\n              cfg.cellOptions.type === TableCellDisplayMode.ColorText ||\n              cfg.cellOptions.type === TableCellDisplayMode.ColorBackground\n            );\n          },\n        })\n        .addBooleanSwitch({\n          path: 'filterable',\n          name: 'Column filter',\n          description: 'Enables/disables field filters in table',\n          defaultValue: defaultTableFieldOptions.filterable,\n        })\n        .addBooleanSwitch({\n          path: 'hidden',\n          name: 'Hide in table',\n          defaultValue: undefined,\n          hideFromDefaults: true,\n        });\n    },\n  })\n  .setPanelOptions((builder) => {\n    builder\n      .addBooleanSwitch({\n        path: 'showHeader',\n        name: 'Show table header',\n        defaultValue: defaultOptions.showHeader,\n      })\n      .addRadio({\n        path: 'cellHeight',\n        name: 'Cell height',\n        defaultValue: defaultOptions.cellHeight,\n        settings: {\n          options: [\n            { value: TableCellHeight.Sm, label: 'Small' },\n            { value: TableCellHeight.Md, label: 'Medium' },\n            { value: TableCellHeight.Lg, label: 'Large' },\n          ],\n        },\n      })\n      .addBooleanSwitch({\n        path: 'footer.show',\n        category: [footerCategory],\n        name: 'Show table footer',\n        defaultValue: defaultOptions.footer?.show,\n      })\n      .addCustomEditor({\n        id: 'footer.reducer',\n        category: [footerCategory],\n        path: 'footer.reducer',\n        name: 'Calculation',\n        description: 'Choose a reducer function / calculation',\n        editor: standardEditorsRegistry.get('stats-picker').editor,\n        defaultValue: [ReducerID.sum],\n        showIf: (cfg) => cfg.footer?.show,\n      })\n      .addBooleanSwitch({\n        path: 'footer.countRows',\n        category: [footerCategory],\n        name: 'Count rows',\n        description: 'Display a single count for all data rows',\n        defaultValue: defaultOptions.footer?.countRows,\n        showIf: (cfg) => cfg.footer?.reducer?.length === 1 && cfg.footer?.reducer[0] === ReducerID.count,\n      })\n      .addMultiSelect({\n        path: 'footer.fields',\n        category: [footerCategory],\n        name: 'Fields',\n        description: 'Select the fields that should be calculated',\n        settings: {\n          allowCustomValue: false,\n          options: [],\n          placeholder: 'All Numeric Fields',\n          getOptions: async (context: FieldOverrideContext) => {\n            const options = [];\n            if (context && context.data && context.data.length > 0) {\n              const frame = context.data[0];\n              for (const field of frame.fields) {\n                if (field.type === FieldType.number) {\n                  const name = getFieldDisplayName(field, frame, context.data);\n                  const value = field.name;\n                  options.push({ value, label: name });\n                }\n              }\n            }\n            return options;\n          },\n        },\n        defaultValue: '',\n        showIf: (cfg) => cfg.footer?.show && !cfg.footer?.countRows,\n      })\n      .addCustomEditor({\n        id: 'footer.enablePagination',\n        path: 'footer.enablePagination',\n        name: 'Enable pagination',\n        editor: PaginationEditor,\n      });\n  })\n  .setSuggestionsSupplier(new TableSuggestionsSupplier());\n"],"names":["TablePanel","props","data","height","width","options","fieldConfig","id","timeRange","theme","panelContext","frames","count","hasFields","frame","currentIndex","getCurrentFrameIndex","main","tableHeight","inputHeight","padding","enableSharedCrosshair","tableElement","sortBy","onSortByChange","displayName","resizedWidth","onColumnResize","names","index","tableStyles","val","onChangeTableSelection","fieldDisplayName","overrides","matcherId","propId","override","o","property","prop","tableMigrationHandler","panel","transformsMap","columnsMap","colorModeMap","generateThresholds","thresholds","colors","threshold","idx","migrateTransformations","oldOpts","transformations","opts","column","migrateTableStyleToOverride","style","migrateDefaults","prevDefaults","defaults","tablePanelChangedHandler","prevPluginId","prevOptions","getMainFrames","df","migrateFromParentRowIndexToNestedFrames","migratedFrames","subFrames","subFramesGrouped","subFramesByIndex","key","migratedFrame","hasDeprecatedParentRowIndex","PaginationEditor","onChange","value","context","changeValue","event","Switch","AutoCellOptionsEditor","cellOptions","onWrapTextChange","label","Label","Badge","Field","BarGaugeCellOptionsEditor","onCellOptionsChange","v","onValueModeChange","Stack","RadioButtonGroup","barGaugeOpts","valueModes","colorBackgroundOpts","ColorBackgroundCellOptionsEditor","onColorRowChange","ImageCellOptionsEditor","onAltChange","e","onTitleChange","Input","optionIds","getChartCellConfig","cfg","graphFieldConfig","builder","SparklineCellOptionsEditor","registry","config","getStyles","values","item","Editor","path","isOptionKey","TableCellOptionEditor","cellType","styles","currentMode","cellDisplayModeOptions","settingCache","setSettingCache","onCellTypeChange","Select","defaultOptions","TableSuggestionsSupplier","list","s","footerCategory","cellCategory","PanelPlugin","field","name"],"sourceRoot":""}