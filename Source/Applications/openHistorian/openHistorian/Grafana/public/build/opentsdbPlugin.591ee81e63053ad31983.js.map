{"version":3,"sources":["webpack:///./public/app/plugins/datasource/opentsdb/datasource.ts","webpack:///./public/app/plugins/datasource/opentsdb/query_ctrl.ts","webpack:///./public/app/plugins/datasource/opentsdb/components/OpenTsdbDetails.tsx","webpack:///./public/app/plugins/datasource/opentsdb/module.ts","webpack:///./public/app/plugins/datasource/opentsdb/components/ConfigEditor.tsx"],"names":["OpenTsDatasource","instanceSettings","templateSrv","getTemplateSrv","type","url","name","withCredentials","basicAuth","jsonData","tsdbVersion","tsdbResolution","lookupLimit","tagKeys","aggregatorsPromise","filterTypesPromise","options","start","this","convertToTSDBTime","range","raw","from","timezone","end","to","qs","_","each","targets","target","metric","push","convertTargetToQuery","queries","compact","isEmpty","Promise","resolve","data","groupByTags","query","filters","length","val","tagk","tags","key","filter","hide","performTimeSeriesQuery","then","response","metricToTargetMapping","mapMetricsToTargets","map","metricData","index","_saveTagKeys","transformMetricData","rangeRaw","eventList","aggregator","annotation","results","annotationObject","annotations","isGlobal","globalAnnotations","event","text","description","time","Math","floor","startTime","i","variableExists","Object","keys","tagKey","msResolution","reqBody","showQuery","method","_addCredentialOptions","getBackendSrv","datasourceRequest","aggregateTags","tag","_get","q","max","result","keysArray","split","trim","keysQuery","splice","join","m","limit","tagvs","r","indexOf","tagks","tagv","relativeUrl","params","headers","Authorization","interpolated","replace","err","reject","responseTransform","value","metricsQuery","match","_performSuggestQuery","tagNamesQuery","_performMetricKeyLookup","tagValuesQuery","_performMetricKeyValueLookup","tagNamesSuggestQuery","tagValuesSuggestQuery","status","message","isArray","sort","md","metricLabel","createMetricLabel","dps","v","k","datapoints","alias","scopedVars","clone","label","tagData","toPairs","has","shouldComputeRate","rate","rateOptions","counter","isCounter","counterMax","parseInt","counterResetValue","resetValue","dropResets","ResetValue","disableDownsampling","interval","downsampleInterval","parseFloat","downsample","downsampleAggregator","downsampleFillPolicy","angular","copy","filterKey","explicitTags","metrics","interpolatedTagValue","arrTagV","findIndex","every","tagV","tagK","includes","date","roundUp","dateMath","parse","valueOf","DataSourceApi","OpenTsQueryCtrl","$scope","$injector","errors","validateTarget","aggregators","fillPolicies","filterTypes","datasource","getAggregators","aggs","getFilterTypes","suggestMetrics","callback","metricFindQuery","getTextValues","suggestTagKeys","suggestTagValues","refresh","metricFindResult","textUtil","escapeHtml","addTagMode","currentTagKey","currentTagValue","targetBlur","removeTag","addTag","size","addFilterMode","currentFilterType","currentFilterGroupBy","currentFilter","currentFilterKey","currentFilterValue","groupBy","fil","removeFilter","addFilter","errs","shouldDownsample","rangeUtil","describeInterval","QueryCtrl","templateUrl","Select","LegacyForms","Input","tsdbVersions","tsdbResolutions","OpenTsdbDetails","props","onChange","className","width","find","version","onSelectChangeHandler","resolution","onInputChangeHandler","newValue","currentTarget","AnnotationsQueryCtrl","plugin","DataSourcePlugin","setQueryCtrl","setConfigEditor","onOptionsChange","defaultUrl","dataSourceConfig","setAnnotationQueryCtrl"],"mappings":"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","file":"opentsdbPlugin.591ee81e63053ad31983.js","sourcesContent":["import angular from 'angular';\nimport _ from 'lodash';\nimport { dateMath, DataQueryRequest, DataSourceApi, ScopedVars } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { getTemplateSrv, TemplateSrv } from 'app/features/templating/template_srv';\nimport { OpenTsdbOptions, OpenTsdbQuery } from './types';\n\nexport default class OpenTsDatasource extends DataSourceApi<OpenTsdbQuery, OpenTsdbOptions> {\n  type: any;\n  url: any;\n  name: any;\n  withCredentials: any;\n  basicAuth: any;\n  tsdbVersion: any;\n  tsdbResolution: any;\n  lookupLimit: any;\n  tagKeys: any;\n\n  aggregatorsPromise: any;\n  filterTypesPromise: any;\n\n  constructor(instanceSettings: any, private readonly templateSrv: TemplateSrv = getTemplateSrv()) {\n    super(instanceSettings);\n    this.type = 'opentsdb';\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.basicAuth = instanceSettings.basicAuth;\n    instanceSettings.jsonData = instanceSettings.jsonData || {};\n    this.tsdbVersion = instanceSettings.jsonData.tsdbVersion || 1;\n    this.tsdbResolution = instanceSettings.jsonData.tsdbResolution || 1;\n    this.lookupLimit = instanceSettings.jsonData.lookupLimit || 1000;\n    this.tagKeys = {};\n\n    this.aggregatorsPromise = null;\n    this.filterTypesPromise = null;\n  }\n\n  // Called once per panel (graph)\n  query(options: DataQueryRequest<OpenTsdbQuery>) {\n    const start = this.convertToTSDBTime(options.range.raw.from, false, options.timezone);\n    const end = this.convertToTSDBTime(options.range.raw.to, true, options.timezone);\n    const qs: any[] = [];\n\n    _.each(options.targets, target => {\n      if (!target.metric) {\n        return;\n      }\n      qs.push(this.convertTargetToQuery(target, options, this.tsdbVersion));\n    });\n\n    const queries = _.compact(qs);\n\n    // No valid targets, return the empty result to save a round trip.\n    if (_.isEmpty(queries)) {\n      return Promise.resolve({ data: [] });\n    }\n\n    const groupByTags: any = {};\n    _.each(queries, query => {\n      if (query.filters && query.filters.length > 0) {\n        _.each(query.filters, val => {\n          groupByTags[val.tagk] = true;\n        });\n      } else {\n        _.each(query.tags, (val, key) => {\n          groupByTags[key] = true;\n        });\n      }\n    });\n\n    options.targets = _.filter(options.targets, query => {\n      return query.hide !== true;\n    });\n\n    return this.performTimeSeriesQuery(queries, start, end).then((response: any) => {\n      const metricToTargetMapping = this.mapMetricsToTargets(response.data, options, this.tsdbVersion);\n      const result = _.map(response.data, (metricData: any, index: number) => {\n        index = metricToTargetMapping[index];\n        if (index === -1) {\n          index = 0;\n        }\n        this._saveTagKeys(metricData);\n\n        return this.transformMetricData(metricData, groupByTags, options.targets[index], options, this.tsdbResolution);\n      });\n      return { data: result };\n    });\n  }\n\n  annotationQuery(options: any) {\n    const start = this.convertToTSDBTime(options.rangeRaw.from, false, options.timezone);\n    const end = this.convertToTSDBTime(options.rangeRaw.to, true, options.timezone);\n    const qs = [];\n    const eventList: any[] = [];\n\n    qs.push({ aggregator: 'sum', metric: options.annotation.target });\n\n    const queries = _.compact(qs);\n\n    return this.performTimeSeriesQuery(queries, start, end).then((results: any) => {\n      if (results.data[0]) {\n        let annotationObject = results.data[0].annotations;\n        if (options.annotation.isGlobal) {\n          annotationObject = results.data[0].globalAnnotations;\n        }\n        if (annotationObject) {\n          _.each(annotationObject, annotation => {\n            const event = {\n              text: annotation.description,\n              time: Math.floor(annotation.startTime) * 1000,\n              annotation: options.annotation,\n            };\n\n            eventList.push(event);\n          });\n        }\n      }\n      return eventList;\n    });\n  }\n\n  targetContainsTemplate(target: any) {\n    if (target.filters && target.filters.length > 0) {\n      for (let i = 0; i < target.filters.length; i++) {\n        if (this.templateSrv.variableExists(target.filters[i].filter)) {\n          return true;\n        }\n      }\n    }\n\n    if (target.tags && Object.keys(target.tags).length > 0) {\n      for (const tagKey in target.tags) {\n        if (this.templateSrv.variableExists(target.tags[tagKey])) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  performTimeSeriesQuery(queries: any[], start: any, end: any) {\n    let msResolution = false;\n    if (this.tsdbResolution === 2) {\n      msResolution = true;\n    }\n    const reqBody: any = {\n      start: start,\n      queries: queries,\n      msResolution: msResolution,\n      globalAnnotations: true,\n    };\n    if (this.tsdbVersion === 3) {\n      reqBody.showQuery = true;\n    }\n\n    // Relative queries (e.g. last hour) don't include an end time\n    if (end) {\n      reqBody.end = end;\n    }\n\n    const options = {\n      method: 'POST',\n      url: this.url + '/api/query',\n      data: reqBody,\n    };\n\n    this._addCredentialOptions(options);\n    return getBackendSrv().datasourceRequest(options);\n  }\n\n  suggestTagKeys(metric: string | number) {\n    return Promise.resolve(this.tagKeys[metric] || []);\n  }\n\n  _saveTagKeys(metricData: { tags: {}; aggregateTags: any; metric: string | number }) {\n    const tagKeys = Object.keys(metricData.tags);\n    _.each(metricData.aggregateTags, tag => {\n      tagKeys.push(tag);\n    });\n\n    this.tagKeys[metricData.metric] = tagKeys;\n  }\n\n  _performSuggestQuery(query: string, type: string) {\n    return this._get('/api/suggest', { type, q: query, max: this.lookupLimit }).then((result: any) => {\n      return result.data;\n    });\n  }\n\n  _performMetricKeyValueLookup(metric: string, keys: any) {\n    if (!metric || !keys) {\n      return Promise.resolve([]);\n    }\n\n    const keysArray = keys.split(',').map((key: any) => {\n      return key.trim();\n    });\n    const key = keysArray[0];\n    let keysQuery = key + '=*';\n\n    if (keysArray.length > 1) {\n      keysQuery += ',' + keysArray.splice(1).join(',');\n    }\n\n    const m = metric + '{' + keysQuery + '}';\n\n    return this._get('/api/search/lookup', { m: m, limit: this.lookupLimit }).then((result: any) => {\n      result = result.data.results;\n      const tagvs: any[] = [];\n      _.each(result, r => {\n        if (tagvs.indexOf(r.tags[key]) === -1) {\n          tagvs.push(r.tags[key]);\n        }\n      });\n      return tagvs;\n    });\n  }\n\n  _performMetricKeyLookup(metric: any) {\n    if (!metric) {\n      return Promise.resolve([]);\n    }\n\n    return this._get('/api/search/lookup', { m: metric, limit: 1000 }).then((result: any) => {\n      result = result.data.results;\n      const tagks: any[] = [];\n      _.each(result, r => {\n        _.each(r.tags, (tagv, tagk) => {\n          if (tagks.indexOf(tagk) === -1) {\n            tagks.push(tagk);\n          }\n        });\n      });\n      return tagks;\n    });\n  }\n\n  _get(relativeUrl: string, params?: { type?: string; q?: string; max?: number; m?: any; limit?: number }) {\n    const options = {\n      method: 'GET',\n      url: this.url + relativeUrl,\n      params: params,\n    };\n\n    this._addCredentialOptions(options);\n\n    return getBackendSrv().datasourceRequest(options);\n  }\n\n  _addCredentialOptions(options: any) {\n    if (this.basicAuth || this.withCredentials) {\n      options.withCredentials = true;\n    }\n    if (this.basicAuth) {\n      options.headers = { Authorization: this.basicAuth };\n    }\n  }\n\n  metricFindQuery(query: string) {\n    if (!query) {\n      return Promise.resolve([]);\n    }\n\n    let interpolated;\n    try {\n      interpolated = this.templateSrv.replace(query, {}, 'distributed');\n    } catch (err) {\n      return Promise.reject(err);\n    }\n\n    const responseTransform = (result: any) => {\n      return _.map(result, value => {\n        return { text: value };\n      });\n    };\n\n    const metricsRegex = /metrics\\((.*)\\)/;\n    const tagNamesRegex = /tag_names\\((.*)\\)/;\n    const tagValuesRegex = /tag_values\\((.*?),\\s?(.*)\\)/;\n    const tagNamesSuggestRegex = /suggest_tagk\\((.*)\\)/;\n    const tagValuesSuggestRegex = /suggest_tagv\\((.*)\\)/;\n\n    const metricsQuery = interpolated.match(metricsRegex);\n    if (metricsQuery) {\n      return this._performSuggestQuery(metricsQuery[1], 'metrics').then(responseTransform);\n    }\n\n    const tagNamesQuery = interpolated.match(tagNamesRegex);\n    if (tagNamesQuery) {\n      return this._performMetricKeyLookup(tagNamesQuery[1]).then(responseTransform);\n    }\n\n    const tagValuesQuery = interpolated.match(tagValuesRegex);\n    if (tagValuesQuery) {\n      return this._performMetricKeyValueLookup(tagValuesQuery[1], tagValuesQuery[2]).then(responseTransform);\n    }\n\n    const tagNamesSuggestQuery = interpolated.match(tagNamesSuggestRegex);\n    if (tagNamesSuggestQuery) {\n      return this._performSuggestQuery(tagNamesSuggestQuery[1], 'tagk').then(responseTransform);\n    }\n\n    const tagValuesSuggestQuery = interpolated.match(tagValuesSuggestRegex);\n    if (tagValuesSuggestQuery) {\n      return this._performSuggestQuery(tagValuesSuggestQuery[1], 'tagv').then(responseTransform);\n    }\n\n    return Promise.resolve([]);\n  }\n\n  testDatasource() {\n    return this._performSuggestQuery('cpu', 'metrics').then(() => {\n      return { status: 'success', message: 'Data source is working' };\n    });\n  }\n\n  getAggregators() {\n    if (this.aggregatorsPromise) {\n      return this.aggregatorsPromise;\n    }\n\n    this.aggregatorsPromise = this._get('/api/aggregators').then((result: any) => {\n      if (result.data && _.isArray(result.data)) {\n        return result.data.sort();\n      }\n      return [];\n    });\n    return this.aggregatorsPromise;\n  }\n\n  getFilterTypes() {\n    if (this.filterTypesPromise) {\n      return this.filterTypesPromise;\n    }\n\n    this.filterTypesPromise = this._get('/api/config/filters').then((result: any) => {\n      if (result.data) {\n        return Object.keys(result.data).sort();\n      }\n      return [];\n    });\n    return this.filterTypesPromise;\n  }\n\n  transformMetricData(md: { dps: any }, groupByTags: any, target: any, options: any, tsdbResolution: number) {\n    const metricLabel = this.createMetricLabel(md, target, groupByTags, options);\n    const dps: any[] = [];\n\n    // TSDB returns datapoints has a hash of ts => value.\n    // Can't use _.pairs(invert()) because it stringifies keys/values\n    _.each(md.dps, (v: any, k: number) => {\n      if (tsdbResolution === 2) {\n        dps.push([v, k * 1]);\n      } else {\n        dps.push([v, k * 1000]);\n      }\n    });\n\n    return { target: metricLabel, datapoints: dps };\n  }\n\n  createMetricLabel(\n    md: { dps?: any; tags?: any; metric?: any },\n    target: { alias: string },\n    groupByTags: any,\n    options: { scopedVars: any }\n  ) {\n    if (target.alias) {\n      const scopedVars = _.clone(options.scopedVars || {});\n      _.each(md.tags, (value, key) => {\n        scopedVars['tag_' + key] = { value: value };\n      });\n      return this.templateSrv.replace(target.alias, scopedVars);\n    }\n\n    let label = md.metric;\n    const tagData: any[] = [];\n\n    if (!_.isEmpty(md.tags)) {\n      _.each(_.toPairs(md.tags), tag => {\n        if (_.has(groupByTags, tag[0])) {\n          tagData.push(tag[0] + '=' + tag[1]);\n        }\n      });\n    }\n\n    if (!_.isEmpty(tagData)) {\n      label += '{' + tagData.join(', ') + '}';\n    }\n\n    return label;\n  }\n\n  convertTargetToQuery(target: any, options: any, tsdbVersion: number) {\n    if (!target.metric || target.hide) {\n      return null;\n    }\n\n    const query: any = {\n      metric: this.templateSrv.replace(target.metric, options.scopedVars, 'pipe'),\n      aggregator: 'avg',\n    };\n\n    if (target.aggregator) {\n      query.aggregator = this.templateSrv.replace(target.aggregator);\n    }\n\n    if (target.shouldComputeRate) {\n      query.rate = true;\n      query.rateOptions = {\n        counter: !!target.isCounter,\n      };\n\n      if (target.counterMax && target.counterMax.length) {\n        query.rateOptions.counterMax = parseInt(target.counterMax, 10);\n      }\n\n      if (target.counterResetValue && target.counterResetValue.length) {\n        query.rateOptions.resetValue = parseInt(target.counterResetValue, 10);\n      }\n\n      if (tsdbVersion >= 2) {\n        query.rateOptions.dropResets =\n          !query.rateOptions.counterMax && (!query.rateOptions.ResetValue || query.rateOptions.ResetValue === 0);\n      }\n    }\n\n    if (!target.disableDownsampling) {\n      let interval = this.templateSrv.replace(target.downsampleInterval || options.interval);\n\n      if (interval.match(/\\.[0-9]+s/)) {\n        interval = parseFloat(interval) * 1000 + 'ms';\n      }\n\n      query.downsample = interval + '-' + target.downsampleAggregator;\n\n      if (target.downsampleFillPolicy && target.downsampleFillPolicy !== 'none') {\n        query.downsample += '-' + target.downsampleFillPolicy;\n      }\n    }\n\n    if (target.filters && target.filters.length > 0) {\n      query.filters = angular.copy(target.filters);\n      if (query.filters) {\n        for (const filterKey in query.filters) {\n          query.filters[filterKey].filter = this.templateSrv.replace(\n            query.filters[filterKey].filter,\n            options.scopedVars,\n            'pipe'\n          );\n        }\n      }\n    } else {\n      query.tags = angular.copy(target.tags);\n      if (query.tags) {\n        for (const tagKey in query.tags) {\n          query.tags[tagKey] = this.templateSrv.replace(query.tags[tagKey], options.scopedVars, 'pipe');\n        }\n      }\n    }\n\n    if (target.explicitTags) {\n      query.explicitTags = true;\n    }\n\n    return query;\n  }\n\n  mapMetricsToTargets(metrics: any, options: any, tsdbVersion: number) {\n    let interpolatedTagValue, arrTagV;\n    return _.map(metrics, metricData => {\n      if (tsdbVersion === 3) {\n        return metricData.query.index;\n      } else {\n        return _.findIndex(options.targets as any[], target => {\n          if (target.filters && target.filters.length > 0) {\n            return target.metric === metricData.metric;\n          } else {\n            return (\n              target.metric === metricData.metric &&\n              _.every(target.tags, (tagV, tagK) => {\n                interpolatedTagValue = this.templateSrv.replace(tagV, options.scopedVars, 'pipe');\n                arrTagV = interpolatedTagValue.split('|');\n                return _.includes(arrTagV, metricData.tags[tagK]) || interpolatedTagValue === '*';\n              })\n            );\n          }\n        });\n      }\n    });\n  }\n\n  interpolateVariablesInQueries(queries: OpenTsdbQuery[], scopedVars: ScopedVars): OpenTsdbQuery[] {\n    if (!queries.length) {\n      return queries;\n    }\n\n    return queries.map(query => ({\n      ...query,\n      metric: this.templateSrv.replace(query.metric, scopedVars),\n    }));\n  }\n\n  convertToTSDBTime(date: any, roundUp: any, timezone: any) {\n    if (date === 'now') {\n      return null;\n    }\n\n    date = dateMath.parse(date, roundUp, timezone);\n    return date.valueOf();\n  }\n}\n","import _ from 'lodash';\nimport { QueryCtrl } from 'app/plugins/sdk';\nimport { auto } from 'angular';\nimport { textUtil, rangeUtil } from '@grafana/data';\n\nexport class OpenTsQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n  aggregators: any;\n  fillPolicies: any;\n  filterTypes: any;\n  tsdbVersion: any;\n  aggregator: any;\n  downsampleInterval: any;\n  downsampleAggregator: any;\n  downsampleFillPolicy: any;\n  errors: any;\n  suggestMetrics: any;\n  suggestTagKeys: any;\n  suggestTagValues: any;\n  addTagMode: boolean;\n  addFilterMode: boolean;\n\n  /** @ngInject */\n  constructor($scope: any, $injector: auto.IInjectorService) {\n    super($scope, $injector);\n\n    this.errors = this.validateTarget();\n    this.aggregators = ['avg', 'sum', 'min', 'max', 'dev', 'zimsum', 'mimmin', 'mimmax'];\n    this.fillPolicies = ['none', 'nan', 'null', 'zero'];\n    this.filterTypes = [\n      'wildcard',\n      'iliteral_or',\n      'not_iliteral_or',\n      'not_literal_or',\n      'iwildcard',\n      'literal_or',\n      'regexp',\n    ];\n\n    this.tsdbVersion = this.datasource.tsdbVersion;\n\n    if (!this.target.aggregator) {\n      this.target.aggregator = 'sum';\n    }\n\n    if (!this.target.downsampleAggregator) {\n      this.target.downsampleAggregator = 'avg';\n    }\n\n    if (!this.target.downsampleFillPolicy) {\n      this.target.downsampleFillPolicy = 'none';\n    }\n\n    this.datasource.getAggregators().then((aggs: { length: number }) => {\n      if (aggs.length !== 0) {\n        this.aggregators = aggs;\n      }\n    });\n\n    this.datasource.getFilterTypes().then((filterTypes: { length: number }) => {\n      if (filterTypes.length !== 0) {\n        this.filterTypes = filterTypes;\n      }\n    });\n\n    // needs to be defined here as it is called from typeahead\n    this.suggestMetrics = (query: string, callback: any) => {\n      this.datasource\n        .metricFindQuery('metrics(' + query + ')')\n        .then(this.getTextValues)\n        .then(callback);\n    };\n\n    this.suggestTagKeys = (query: any, callback: any) => {\n      this.datasource.suggestTagKeys(this.target.metric).then(callback);\n    };\n\n    this.suggestTagValues = (query: string, callback: any) => {\n      this.datasource\n        .metricFindQuery('suggest_tagv(' + query + ')')\n        .then(this.getTextValues)\n        .then(callback);\n    };\n  }\n\n  targetBlur() {\n    this.errors = this.validateTarget();\n    this.refresh();\n  }\n\n  getTextValues(metricFindResult: any) {\n    return _.map(metricFindResult, value => {\n      return textUtil.escapeHtml(value.text);\n    });\n  }\n\n  addTag() {\n    if (this.target.filters && this.target.filters.length > 0) {\n      this.errors.tags = 'Please remove filters to use tags, tags and filters are mutually exclusive.';\n    }\n\n    if (!this.addTagMode) {\n      this.addTagMode = true;\n      return;\n    }\n\n    if (!this.target.tags) {\n      this.target.tags = {};\n    }\n\n    this.errors = this.validateTarget();\n\n    if (!this.errors.tags) {\n      this.target.tags[this.target.currentTagKey] = this.target.currentTagValue;\n      this.target.currentTagKey = '';\n      this.target.currentTagValue = '';\n      this.targetBlur();\n    }\n\n    this.addTagMode = false;\n  }\n\n  removeTag(key: string | number) {\n    delete this.target.tags[key];\n    this.targetBlur();\n  }\n\n  editTag(key: string | number, value: any) {\n    this.removeTag(key);\n    this.target.currentTagKey = key;\n    this.target.currentTagValue = value;\n    this.addTag();\n  }\n\n  closeAddTagMode() {\n    this.addTagMode = false;\n    return;\n  }\n\n  addFilter() {\n    if (this.target.tags && _.size(this.target.tags) > 0) {\n      this.errors.filters = 'Please remove tags to use filters, tags and filters are mutually exclusive.';\n    }\n\n    if (!this.addFilterMode) {\n      this.addFilterMode = true;\n      return;\n    }\n\n    if (!this.target.filters) {\n      this.target.filters = [];\n    }\n\n    if (!this.target.currentFilterType) {\n      this.target.currentFilterType = 'iliteral_or';\n    }\n\n    if (!this.target.currentFilterGroupBy) {\n      this.target.currentFilterGroupBy = false;\n    }\n\n    this.errors = this.validateTarget();\n\n    if (!this.errors.filters) {\n      const currentFilter = {\n        type: this.target.currentFilterType,\n        tagk: this.target.currentFilterKey,\n        filter: this.target.currentFilterValue,\n        groupBy: this.target.currentFilterGroupBy,\n      };\n      this.target.filters.push(currentFilter);\n      this.target.currentFilterType = 'literal_or';\n      this.target.currentFilterKey = '';\n      this.target.currentFilterValue = '';\n      this.target.currentFilterGroupBy = false;\n      this.targetBlur();\n    }\n\n    this.addFilterMode = false;\n  }\n\n  removeFilter(index: number) {\n    this.target.filters.splice(index, 1);\n    this.targetBlur();\n  }\n\n  editFilter(fil: { tagk: any; filter: any; type: any; groupBy: any }, index: number) {\n    this.removeFilter(index);\n    this.target.currentFilterKey = fil.tagk;\n    this.target.currentFilterValue = fil.filter;\n    this.target.currentFilterType = fil.type;\n    this.target.currentFilterGroupBy = fil.groupBy;\n    this.addFilter();\n  }\n\n  closeAddFilterMode() {\n    this.addFilterMode = false;\n    return;\n  }\n\n  validateTarget() {\n    const errs: any = {};\n\n    if (this.target.shouldDownsample) {\n      try {\n        if (this.target.downsampleInterval) {\n          rangeUtil.describeInterval(this.target.downsampleInterval);\n        } else {\n          errs.downsampleInterval = \"You must supply a downsample interval (e.g. '1m' or '1h').\";\n        }\n      } catch (err) {\n        errs.downsampleInterval = err.message;\n      }\n    }\n\n    if (this.target.tags && _.has(this.target.tags, this.target.currentTagKey)) {\n      errs.tags = \"Duplicate tag key '\" + this.target.currentTagKey + \"'.\";\n    }\n\n    return errs;\n  }\n}\n","import React, { SyntheticEvent } from 'react';\nimport { InlineFormLabel, LegacyForms } from '@grafana/ui';\nconst { Select, Input } = LegacyForms;\nimport { DataSourceSettings, SelectableValue } from '@grafana/data';\nimport { OpenTsdbOptions } from '../types';\n\nconst tsdbVersions = [\n  { label: '<=2.1', value: 1 },\n  { label: '==2.2', value: 2 },\n  { label: '==2.3', value: 3 },\n];\n\nconst tsdbResolutions = [\n  { label: 'second', value: 1 },\n  { label: 'millisecond', value: 2 },\n];\n\ninterface Props {\n  value: DataSourceSettings<OpenTsdbOptions>;\n  onChange: (value: DataSourceSettings<OpenTsdbOptions>) => void;\n}\n\nexport const OpenTsdbDetails = (props: Props) => {\n  const { onChange, value } = props;\n\n  return (\n    <>\n      <h5>OpenTSDB settings</h5>\n      <div className=\"gf-form\">\n        <InlineFormLabel width={7}>Version</InlineFormLabel>\n        <Select\n          options={tsdbVersions}\n          value={tsdbVersions.find(version => version.value === value.jsonData.tsdbVersion) ?? tsdbVersions[0]}\n          onChange={onSelectChangeHandler('tsdbVersion', value, onChange)}\n        />\n      </div>\n      <div className=\"gf-form\">\n        <InlineFormLabel width={7}>Resolution</InlineFormLabel>\n        <Select\n          options={tsdbResolutions}\n          value={\n            tsdbResolutions.find(resolution => resolution.value === value.jsonData.tsdbResolution) ?? tsdbResolutions[0]\n          }\n          onChange={onSelectChangeHandler('tsdbResolution', value, onChange)}\n        />\n      </div>\n      <div className=\"gf-form\">\n        <InlineFormLabel width={7}>Lookup Limit</InlineFormLabel>\n        <Input\n          type=\"number\"\n          value={value.jsonData.lookupLimit ?? 1000}\n          onChange={onInputChangeHandler('lookupLimit', value, onChange)}\n        />\n      </div>\n    </>\n  );\n};\n\nconst onSelectChangeHandler = (key: keyof OpenTsdbOptions, value: Props['value'], onChange: Props['onChange']) => (\n  newValue: SelectableValue\n) => {\n  onChange({\n    ...value,\n    jsonData: {\n      ...value.jsonData,\n      [key]: newValue.value,\n    },\n  });\n};\n\nconst onInputChangeHandler = (key: keyof OpenTsdbOptions, value: Props['value'], onChange: Props['onChange']) => (\n  event: SyntheticEvent<HTMLInputElement>\n) => {\n  onChange({\n    ...value,\n    jsonData: {\n      ...value.jsonData,\n      [key]: event.currentTarget.value,\n    },\n  });\n};\n","import OpenTsDatasource from './datasource';\nimport { OpenTsQueryCtrl } from './query_ctrl';\nimport { DataSourcePlugin } from '@grafana/data';\nimport { ConfigEditor } from './components/ConfigEditor';\n\nclass AnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n}\n\nexport const plugin = new DataSourcePlugin(OpenTsDatasource)\n  .setQueryCtrl(OpenTsQueryCtrl)\n  .setConfigEditor(ConfigEditor)\n  .setAnnotationQueryCtrl(AnnotationsQueryCtrl);\n","import React from 'react';\nimport { DataSourceHttpSettings } from '@grafana/ui';\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { OpenTsdbDetails } from './OpenTsdbDetails';\nimport { OpenTsdbOptions } from '../types';\n\nexport const ConfigEditor = (props: DataSourcePluginOptionsEditorProps<OpenTsdbOptions>) => {\n  const { options, onOptionsChange } = props;\n\n  return (\n    <>\n      <DataSourceHttpSettings\n        defaultUrl=\"http://localhost:4242\"\n        dataSourceConfig={options}\n        onChange={onOptionsChange}\n      />\n      <OpenTsdbDetails value={options} onChange={onOptionsChange} />\n    </>\n  );\n};\n"],"sourceRoot":""}