{"version":3,"file":"flamegraphPanel.3f7ef8d5b3701a364b70.js","mappings":"4NAIA,SAASA,EAAYC,EAAcC,EAA2C,CAAC,EAAG,IAChF,MAAkB,sBAAsBD,CAAI,GAAI,CAC9C,IAAK,KAAQ,QACb,gBAAiBE,EAAA,EAAO,UAAU,QAClC,GAAGD,CACL,CAAC,CACH,CAEO,MAAME,EAAmBC,GAAsB,CACpD,MAAMC,KAAc,MAAYD,EAAM,KAAK,OAAO,CAAC,CAAC,EACpD,OAAIC,KAEA,OAACC,EAAA,EAAkB,CAAC,QAASF,EAAM,GAAI,KAAMA,EAAM,KAAM,WAAS,MAA4BC,CAAW,EAAG,KAK9G,OAAC,KACC,KAAMD,EAAM,KAAK,OAAO,CAAC,EACzB,aAAc,GACd,SAAU,IAAMF,EAAA,EAAO,OACvB,mBAAoBE,EAAM,SAAS,oBAAsB,GACzD,mBAAoB,IAAML,EAAY,qBAAqB,EAC3D,eAAiBQ,GAAiBR,EAAY,gBAAiB,CAAE,KAAAQ,CAAK,CAAC,EACvE,oBAAsBC,GAAkBT,EAAY,sBAAuB,CAAE,MAAAS,CAAM,CAAC,EACpF,YAAcC,GAAiBV,EAAY,sBAAuB,CAAE,KAAAU,CAAK,CAAC,EAC5E,CAEJ,E,eC5BO,MAAMC,CAA8B,CACzC,oBAAoBC,EAA0C,CAC5D,OAAOA,EAAQ,gBAAwB,CACrC,KAAM,IAAe,WACrB,SAAU,YACZ,CAAC,CACH,CAEA,sBAAsBA,EAA0C,CAC9D,GAAI,CAACA,EAAQ,KACX,OAGF,MAAMC,EAAYD,EAAQ,KAAK,OAAO,CAAC,EACnC,CAACC,MAGe,MAAYA,CAAS,GAKzC,KAAK,oBAAoBD,CAAO,EAAE,OAAO,CACvC,KAAM,IAAe,UACvB,CAAC,CACH,CACF,CCzBO,MAAM,EAAS,IAAIE,EAAA,EAAYV,CAAe,EAAE,uBAAuB,IAAIO,CAA+B,C","sources":["webpack://grafana/./public/app/plugins/panel/flamegraph/FlameGraphPanel.tsx","webpack://grafana/./public/app/plugins/panel/flamegraph/suggestions.ts","webpack://grafana/./public/app/plugins/panel/flamegraph/module.tsx"],"sourcesContent":["import { CoreApp, PanelProps } from '@grafana/data';\nimport { FlameGraph, checkFields, getMessageCheckFieldsResult } from '@grafana/flamegraph';\nimport { PanelDataErrorView, reportInteraction, config } from '@grafana/runtime';\n\nfunction interaction(name: string, context: Record<string, string | number> = {}) {\n  reportInteraction(`grafana_flamegraph_${name}`, {\n    app: CoreApp.Unknown,\n    grafana_version: config.buildInfo.version,\n    ...context,\n  });\n}\n\nexport const FlameGraphPanel = (props: PanelProps) => {\n  const wrongFields = checkFields(props.data.series[0]);\n  if (wrongFields) {\n    return (\n      <PanelDataErrorView panelId={props.id} data={props.data} message={getMessageCheckFieldsResult(wrongFields)} />\n    );\n  }\n\n  return (\n    <FlameGraph\n      data={props.data.series[0]}\n      stickyHeader={false}\n      getTheme={() => config.theme2}\n      showFlameGraphOnly={props.options?.showFlameGraphOnly ?? false}\n      onTableSymbolClick={() => interaction('table_item_selected')}\n      onViewSelected={(view: string) => interaction('view_selected', { view })}\n      onTextAlignSelected={(align: string) => interaction('text_align_selected', { align })}\n      onTableSort={(sort: string) => interaction('table_sort_selected', { sort })}\n    />\n  );\n};\n","import { VisualizationSuggestionsBuilder } from '@grafana/data';\nimport { checkFields } from '@grafana/flamegraph';\nimport { SuggestionName } from 'app/types/suggestions';\n\nexport class FlameGraphSuggestionsSupplier {\n  getListWithDefaults(builder: VisualizationSuggestionsBuilder) {\n    return builder.getListAppender<{}, {}>({\n      name: SuggestionName.FlameGraph,\n      pluginId: 'flamegraph',\n    });\n  }\n\n  getSuggestionsForData(builder: VisualizationSuggestionsBuilder) {\n    if (!builder.data) {\n      return;\n    }\n\n    const dataFrame = builder.data.series[0];\n    if (!dataFrame) {\n      return;\n    }\n    const wrongFields = checkFields(dataFrame);\n    if (wrongFields) {\n      return;\n    }\n\n    this.getListWithDefaults(builder).append({\n      name: SuggestionName.FlameGraph,\n    });\n  }\n}\n","import { PanelPlugin } from '@grafana/data';\n\nimport { FlameGraphPanel } from './FlameGraphPanel';\nimport { FlameGraphSuggestionsSupplier } from './suggestions';\n\nexport const plugin = new PanelPlugin(FlameGraphPanel).setSuggestionsSupplier(new FlameGraphSuggestionsSupplier());\n"],"names":["interaction","name","context","config","FlameGraphPanel","props","wrongFields","PanelDataErrorView","view","align","sort","FlameGraphSuggestionsSupplier","builder","dataFrame","PanelPlugin"],"sourceRoot":""}