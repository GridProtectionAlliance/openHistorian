{"version":3,"file":"opentsdbPlugin.13757a43402806666939.js","mappings":"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","sources":["webpack://grafana/./public/app/plugins/datasource/opentsdb/components/OpenTsdbDetails.tsx","webpack://grafana/./public/app/plugins/datasource/opentsdb/components/ConfigEditor.tsx","webpack://grafana/./public/app/plugins/datasource/opentsdb/components/DownSample.tsx","webpack://grafana/./public/app/plugins/datasource/opentsdb/components/FilterSection.tsx","webpack://grafana/./public/app/plugins/datasource/opentsdb/components/MetricSection.tsx","webpack://grafana/./public/app/plugins/datasource/opentsdb/components/RateSection.tsx","webpack://grafana/./public/app/plugins/datasource/opentsdb/components/TagSection.tsx","webpack://grafana/./public/app/plugins/datasource/opentsdb/components/OpenTsdbQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/opentsdb/components/AnnotationEditor.tsx","webpack://grafana/./public/app/plugins/datasource/opentsdb/migrations.ts","webpack://grafana/./public/app/plugins/datasource/opentsdb/datasource.ts","webpack://grafana/./public/app/plugins/datasource/opentsdb/module.ts"],"sourcesContent":["import { SyntheticEvent, useId } from 'react';\n\nimport { DataSourceSettings, SelectableValue } from '@grafana/data';\nimport { Select, Input, Field, FieldSet } from '@grafana/ui';\n\nimport { OpenTsdbOptions } from '../types';\n\nconst tsdbVersions = [\n  { label: '<=2.1', value: 1 },\n  { label: '==2.2', value: 2 },\n  { label: '==2.3', value: 3 },\n];\n\nconst tsdbResolutions = [\n  { label: 'second', value: 1 },\n  { label: 'millisecond', value: 2 },\n];\n\ninterface Props {\n  value: DataSourceSettings<OpenTsdbOptions>;\n  onChange: (value: DataSourceSettings<OpenTsdbOptions>) => void;\n}\n\nexport const OpenTsdbDetails = (props: Props) => {\n  const { onChange, value } = props;\n\n  const idSuffix = useId();\n\n  return (\n    <>\n      <FieldSet label=\"OpenTSDB settings\">\n        <Field htmlFor={`select-version-${idSuffix}`} label=\"Version\">\n          <Select\n            inputId={`select-version-${idSuffix}`}\n            options={tsdbVersions}\n            value={tsdbVersions.find((version) => version.value === value.jsonData.tsdbVersion) ?? tsdbVersions[0]}\n            onChange={onSelectChangeHandler('tsdbVersion', value, onChange)}\n            width={20}\n          />\n        </Field>\n        <Field htmlFor={`select-resolution-${idSuffix}`} label=\"Resolution\">\n          <Select\n            inputId={`select-resolution-${idSuffix}`}\n            options={tsdbResolutions}\n            value={\n              tsdbResolutions.find((resolution) => resolution.value === value.jsonData.tsdbResolution) ??\n              tsdbResolutions[0]\n            }\n            onChange={onSelectChangeHandler('tsdbResolution', value, onChange)}\n            width={20}\n          />\n        </Field>\n        <Field htmlFor={`lookup-input-${idSuffix}`} label=\"Lookup limit\">\n          <Input\n            id={`lookup-input-${idSuffix}`}\n            type=\"number\"\n            value={value.jsonData.lookupLimit ?? 1000}\n            onChange={onInputChangeHandler('lookupLimit', value, onChange)}\n            width={20}\n          />\n        </Field>\n      </FieldSet>\n    </>\n  );\n};\n\nconst onSelectChangeHandler =\n  (key: keyof OpenTsdbOptions, value: Props['value'], onChange: Props['onChange']) => (newValue: SelectableValue) => {\n    onChange({\n      ...value,\n      jsonData: {\n        ...value.jsonData,\n        [key]: newValue.value,\n      },\n    });\n  };\n\nconst onInputChangeHandler =\n  (key: keyof OpenTsdbOptions, value: Props['value'], onChange: Props['onChange']) =>\n  (event: SyntheticEvent<HTMLInputElement>) => {\n    onChange({\n      ...value,\n      jsonData: {\n        ...value.jsonData,\n        [key]: event.currentTarget.value,\n      },\n    });\n  };\n","import { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { DataSourceHttpSettings } from '@grafana/ui';\n\nimport { OpenTsdbOptions } from '../types';\n\nimport { OpenTsdbDetails } from './OpenTsdbDetails';\n\nexport const ConfigEditor = (props: DataSourcePluginOptionsEditorProps<OpenTsdbOptions>) => {\n  const { options, onOptionsChange } = props;\n\n  return (\n    <>\n      <DataSourceHttpSettings\n        defaultUrl=\"http://localhost:4242\"\n        dataSourceConfig={options}\n        onChange={onOptionsChange}\n        secureSocksDSProxyEnabled={config.secureSocksDSProxyEnabled}\n      />\n      <OpenTsdbDetails value={options} onChange={onOptionsChange} />\n    </>\n  );\n};\n","import { toOption } from '@grafana/data';\nimport { InlineLabel, Select, Input, InlineFormLabel, InlineSwitch, Stack } from '@grafana/ui';\n\nimport { OpenTsdbQuery } from '../types';\n\nexport interface DownSampleProps {\n  query: OpenTsdbQuery;\n  onChange: (query: OpenTsdbQuery) => void;\n  onRunQuery: () => void;\n  aggregators: string[];\n  fillPolicies: string[];\n  tsdbVersion: number;\n}\n\nexport function DownSample({ query, onChange, onRunQuery, aggregators, fillPolicies, tsdbVersion }: DownSampleProps) {\n  const aggregatorOptions = aggregators.map((value: string) => toOption(value));\n  const fillPolicyOptions = fillPolicies.map((value: string) => toOption(value));\n\n  return (\n    <Stack gap={0.5} alignItems=\"flex-start\" data-testid={testIds.section}>\n      <Stack gap={0}>\n        <InlineFormLabel\n          className=\"query-keyword\"\n          width={8}\n          tooltip={\n            <div>\n              Leave interval blank for auto or for example use <code>1m</code>\n            </div>\n          }\n        >\n          Down sample\n        </InlineFormLabel>\n        <Input\n          width={25}\n          data-testid={testIds.interval}\n          placeholder=\"interval\"\n          value={query.downsampleInterval ?? ''}\n          onChange={(e) => {\n            const value = e.currentTarget.value;\n            onChange({ ...query, downsampleInterval: value });\n          }}\n          onBlur={() => onRunQuery()}\n        />\n      </Stack>\n      <Stack gap={0}>\n        <InlineFormLabel width={'auto'} className=\"query-keyword\">\n          Aggregator\n        </InlineFormLabel>\n        <Select\n          value={query.downsampleAggregator ? toOption(query.downsampleAggregator) : undefined}\n          options={aggregatorOptions}\n          onChange={({ value }) => {\n            if (value) {\n              onChange({ ...query, downsampleAggregator: value });\n              onRunQuery();\n            }\n          }}\n        />\n      </Stack>\n      {tsdbVersion >= 2 && (\n        <Stack gap={0} alignItems=\"flex-start\">\n          <InlineLabel className=\"width-6 query-keyword\">Fill</InlineLabel>\n          <Select\n            inputId=\"opentsdb-fillpolicy-select\"\n            value={query.downsampleFillPolicy ? toOption(query.downsampleFillPolicy) : undefined}\n            options={fillPolicyOptions}\n            onChange={({ value }) => {\n              if (value) {\n                onChange({ ...query, downsampleFillPolicy: value });\n                onRunQuery();\n              }\n            }}\n          />\n        </Stack>\n      )}\n      <Stack gap={0}>\n        <InlineFormLabel className=\"query-keyword\">Disable downsampling</InlineFormLabel>\n        <InlineSwitch\n          value={query.disableDownsampling ?? false}\n          onChange={() => {\n            const disableDownsampling = query.disableDownsampling ?? false;\n            onChange({ ...query, disableDownsampling: !disableDownsampling });\n            onRunQuery();\n          }}\n        />\n      </Stack>\n      <Stack gap={0} grow={1}>\n        <InlineLabel> </InlineLabel>\n      </Stack>\n    </Stack>\n  );\n}\n\nexport const testIds = {\n  section: 'opentsdb-downsample',\n  interval: 'downsample-interval',\n};\n","import debounce from 'debounce-promise';\nimport { size } from 'lodash';\nimport { useCallback, useState } from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport {\n  InlineLabel,\n  Select,\n  InlineFormLabel,\n  InlineSwitch,\n  Icon,\n  clearButtonStyles,\n  useStyles2,\n  AsyncSelect,\n  Stack,\n} from '@grafana/ui';\n\nimport { OpenTsdbFilter, OpenTsdbQuery } from '../types';\n\nexport interface FilterSectionProps {\n  query: OpenTsdbQuery;\n  onChange: (query: OpenTsdbQuery) => void;\n  onRunQuery: () => void;\n  suggestTagKeys: (query: OpenTsdbQuery) => Promise<string[]>;\n  filterTypes: string[];\n  suggestTagValues: (value: string) => Promise<SelectableValue[]>;\n}\n\nexport function FilterSection({\n  query,\n  onChange,\n  onRunQuery,\n  suggestTagKeys,\n  filterTypes,\n  suggestTagValues,\n}: FilterSectionProps) {\n  const buttonStyles = useStyles2(clearButtonStyles);\n\n  const [tagKeys, updTagKeys] = useState<Array<SelectableValue<string>>>();\n  const [keyIsLoading, updKeyIsLoading] = useState<boolean>();\n\n  const [addFilterMode, updAddFilterMode] = useState<boolean>(false);\n\n  const [curFilterType, updCurFilterType] = useState<string>('iliteral_or');\n  const [curFilterKey, updCurFilterKey] = useState<string>('');\n  const [curFilterValue, updCurFilterValue] = useState<string>('');\n  const [curFilterGroupBy, updCurFilterGroupBy] = useState<boolean>(false);\n\n  const [errors, setErrors] = useState<string>('');\n\n  const filterTypesOptions = filterTypes.map((value: string) => toOption(value));\n\n  function changeAddFilterMode() {\n    updAddFilterMode(!addFilterMode);\n  }\n\n  function addFilter() {\n    if (query.tags && size(query.tags) > 0) {\n      const err = 'Please remove tags to use filters, tags and filters are mutually exclusive.';\n      setErrors(err);\n      return;\n    }\n\n    if (!addFilterMode) {\n      updAddFilterMode(true);\n      return;\n    }\n\n    // Add the filter to the query\n    const currentFilter = {\n      type: curFilterType,\n      tagk: curFilterKey,\n      filter: curFilterValue,\n      groupBy: curFilterGroupBy,\n    };\n\n    // filters may be undefined\n    query.filters = query.filters ? query.filters.concat([currentFilter]) : [currentFilter];\n\n    // reset the inputs\n    updCurFilterType('literal_or');\n    updCurFilterKey('');\n    updCurFilterValue('');\n    updCurFilterGroupBy(false);\n\n    // fire the query\n    onChange(query);\n    onRunQuery();\n\n    // close the filter ditor\n    changeAddFilterMode();\n  }\n\n  function removeFilter(index: number) {\n    query.filters?.splice(index, 1);\n    // fire the query\n    onChange(query);\n    onRunQuery();\n  }\n\n  function editFilter(fil: OpenTsdbFilter, idx: number) {\n    removeFilter(idx);\n    updCurFilterKey(fil.tagk);\n    updCurFilterValue(fil.filter);\n    updCurFilterType(fil.type);\n    updCurFilterGroupBy(fil.groupBy);\n    addFilter();\n  }\n\n  // We are matching words split with space\n  const splitSeparator = ' ';\n  const customFilterOption = useCallback((option: SelectableValue<string>, searchQuery: string) => {\n    const label = option.value ?? '';\n\n    const searchWords = searchQuery.split(splitSeparator);\n    return searchWords.reduce((acc, cur) => acc && label.toLowerCase().includes(cur.toLowerCase()), true);\n  }, []);\n\n  const tagValueSearch = debounce((query: string) => suggestTagValues(query), 350);\n\n  return (\n    <Stack gap={0} data-testid={testIds.section}>\n      <InlineFormLabel\n        className=\"query-keyword\"\n        width={8}\n        tooltip={<div>Filters does not work with tags, either of the two will work but not both.</div>}\n      >\n        Filters\n      </InlineFormLabel>\n      {query.filters &&\n        query.filters.map((fil: OpenTsdbFilter, idx: number) => {\n          return (\n            <InlineFormLabel key={idx} width=\"auto\" data-testid={testIds.list + idx}>\n              {fil.tagk} = {fil.type}({fil.filter}), groupBy = {'' + fil.groupBy}\n              <button type=\"button\" className={buttonStyles} onClick={() => editFilter(fil, idx)}>\n                <Icon name={'pen'} />\n              </button>\n              <button\n                type=\"button\"\n                className={buttonStyles}\n                onClick={() => removeFilter(idx)}\n                data-testid={testIds.remove}\n              >\n                <Icon name={'times'} />\n              </button>\n            </InlineFormLabel>\n          );\n        })}\n      {!addFilterMode && (\n        <InlineFormLabel width={2}>\n          <button type=\"button\" className={buttonStyles} onClick={changeAddFilterMode} aria-label=\"Add filter\">\n            <Icon name={'plus'} />\n          </button>\n        </InlineFormLabel>\n      )}\n      {addFilterMode && (\n        <Stack gap={0.5} alignItems=\"center\">\n          <Stack gap={0}>\n            <Select\n              inputId=\"opentsdb-suggested-tagk-select\"\n              value={curFilterKey ? toOption(curFilterKey) : undefined}\n              placeholder=\"key\"\n              allowCustomValue\n              filterOption={customFilterOption}\n              onOpenMenu={async () => {\n                updKeyIsLoading(true);\n                const tKs = await suggestTagKeys(query);\n                const tKsOptions = tKs.map((value: string) => toOption(value));\n                updTagKeys(tKsOptions);\n                updKeyIsLoading(false);\n              }}\n              isLoading={keyIsLoading}\n              options={tagKeys}\n              onChange={({ value }) => {\n                if (value) {\n                  updCurFilterKey(value);\n                }\n              }}\n            />\n          </Stack>\n\n          <Stack gap={0}>\n            <InlineLabel className=\"width-4 query-keyword\">Type</InlineLabel>\n            <Select\n              inputId=\"opentsdb-aggregator-select\"\n              value={curFilterType ? toOption(curFilterType) : undefined}\n              options={filterTypesOptions}\n              onChange={({ value }) => {\n                if (value) {\n                  updCurFilterType(value);\n                }\n              }}\n            />\n          </Stack>\n\n          <Stack gap={0}>\n            <AsyncSelect\n              inputId=\"opentsdb-suggested-tagv-select\"\n              value={curFilterValue ? toOption(curFilterValue) : undefined}\n              placeholder=\"filter\"\n              allowCustomValue\n              loadOptions={tagValueSearch}\n              defaultOptions={[]}\n              onChange={({ value }) => {\n                if (value) {\n                  updCurFilterValue(value);\n                }\n              }}\n            />\n          </Stack>\n\n          <InlineFormLabel width={5} className=\"query-keyword\">\n            Group by\n          </InlineFormLabel>\n          <InlineSwitch\n            value={curFilterGroupBy}\n            onChange={() => {\n              // DO NOT RUN THE QUERY HERE\n              // OLD FUNCTIONALITY RAN THE QUERY\n              updCurFilterGroupBy(!curFilterGroupBy);\n            }}\n          />\n          <Stack gap={0}>\n            {errors && (\n              <InlineLabel title={errors} data-testid={testIds.error}>\n                <Icon name={'exclamation-triangle'} color={'rgb(229, 189, 28)'} />\n              </InlineLabel>\n            )}\n            <InlineFormLabel width={5.5}>\n              <button type=\"button\" className={buttonStyles} onClick={addFilter}>\n                add filter\n              </button>\n              <button type=\"button\" className={buttonStyles} onClick={changeAddFilterMode}>\n                <Icon name={'times'} />\n              </button>\n            </InlineFormLabel>\n          </Stack>\n        </Stack>\n      )}\n      <Stack gap={0} grow={1}>\n        <InlineLabel> </InlineLabel>\n      </Stack>\n    </Stack>\n  );\n}\n\nexport const testIds = {\n  section: 'opentsdb-filter',\n  list: 'opentsdb-filter-list',\n  error: 'opentsdb-filter-error',\n  remove: 'opentsdb-filter-remove',\n};\n","import debounce from 'debounce-promise';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { Select, Input, InlineFormLabel, AsyncSelect, Stack, InlineLabel } from '@grafana/ui';\n\nimport { OpenTsdbQuery } from '../types';\n\nexport interface MetricSectionProps {\n  query: OpenTsdbQuery;\n  onChange: (query: OpenTsdbQuery) => void;\n  onRunQuery: () => void;\n  suggestMetrics: (value: string) => Promise<SelectableValue[]>;\n  aggregators: string[];\n}\n\nexport function MetricSection({ query, onChange, onRunQuery, suggestMetrics, aggregators }: MetricSectionProps) {\n  const aggregatorOptions = aggregators.map((value: string) => toOption(value));\n  const metricSearch = debounce((query: string) => suggestMetrics(query), 350);\n\n  return (\n    <Stack gap={0.5} alignItems=\"flex-start\" data-testid={testIds.section}>\n      <Stack gap={0}>\n        <InlineFormLabel width={8} className=\"query-keyword\">\n          Metric\n        </InlineFormLabel>\n        {/* metric async select: autocomplete calls opentsdb suggest API */}\n        <AsyncSelect\n          width={25}\n          inputId=\"opentsdb-metric-select\"\n          value={query.metric ? toOption(query.metric) : undefined}\n          placeholder=\"Metric name\"\n          allowCustomValue\n          loadOptions={metricSearch}\n          defaultOptions={[]}\n          onChange={({ value }) => {\n            if (value) {\n              onChange({ ...query, metric: value });\n              onRunQuery();\n            }\n          }}\n        />\n      </Stack>\n      <Stack gap={0} alignItems=\"flex-start\">\n        <InlineFormLabel width={'auto'} className=\"query-keyword\">\n          Aggregator\n        </InlineFormLabel>\n        <Select\n          inputId=\"opentsdb-aggregator-select\"\n          value={query.aggregator ? toOption(query.aggregator) : undefined}\n          options={aggregatorOptions}\n          onChange={({ value }) => {\n            if (value) {\n              onChange({ ...query, aggregator: value });\n              onRunQuery();\n            }\n          }}\n        />\n      </Stack>\n      <Stack gap={0}>\n        <InlineFormLabel\n          className=\"query-keyword\"\n          width={6}\n          tooltip={<div>Use patterns like $tag_tagname to replace part of the alias for a tag value</div>}\n        >\n          Alias\n        </InlineFormLabel>\n        <Input\n          data-testid={testIds.alias}\n          placeholder=\"series alias\"\n          value={query.alias ?? ''}\n          onChange={(e) => {\n            const value = e.currentTarget.value;\n            onChange({ ...query, alias: value });\n          }}\n          onBlur={() => onRunQuery()}\n        />\n      </Stack>\n      <Stack gap={0} grow={1}>\n        <InlineLabel> </InlineLabel>\n      </Stack>\n    </Stack>\n  );\n}\n\nexport const testIds = {\n  section: 'opentsdb-metricsection',\n  alias: 'metric-alias',\n};\n","import { InlineLabel, Input, InlineFormLabel, InlineSwitch, Stack } from '@grafana/ui';\n\nimport { OpenTsdbQuery } from '../types';\n\nexport interface RateSectionProps {\n  query: OpenTsdbQuery;\n  onChange: (query: OpenTsdbQuery) => void;\n  onRunQuery: () => void;\n  tsdbVersion: number;\n}\n\nexport function RateSection({ query, onChange, onRunQuery, tsdbVersion }: RateSectionProps) {\n  return (\n    <Stack gap={0} data-testid={testIds.section}>\n      <InlineFormLabel className=\"query-keyword\" width={8}>\n        Rate\n      </InlineFormLabel>\n      <InlineSwitch\n        data-testid={testIds.shouldComputeRate}\n        value={query.shouldComputeRate ?? false}\n        onChange={() => {\n          const shouldComputeRate = query.shouldComputeRate ?? false;\n          onChange({ ...query, shouldComputeRate: !shouldComputeRate });\n          onRunQuery();\n        }}\n      />\n\n      {query.shouldComputeRate && (\n        <>\n          <InlineFormLabel className=\"query-keyword\" width={'auto'}>\n            Counter\n          </InlineFormLabel>\n          <InlineSwitch\n            data-testid={testIds.isCounter}\n            value={query.isCounter ?? false}\n            onChange={() => {\n              const isCounter = query.isCounter ?? false;\n              onChange({ ...query, isCounter: !isCounter });\n              onRunQuery();\n            }}\n          />\n        </>\n      )}\n      {query.shouldComputeRate && query.isCounter && (\n        <Stack gap={0}>\n          <InlineLabel width={'auto'} className=\"query-keyword\">\n            Counter max\n          </InlineLabel>\n          <Input\n            data-testid={testIds.counterMax}\n            placeholder=\"max value\"\n            value={query.counterMax ?? ''}\n            onChange={(e) => {\n              const value = e.currentTarget.value;\n              onChange({ ...query, counterMax: value });\n            }}\n            onBlur={() => onRunQuery()}\n          />\n          <InlineLabel width={'auto'} className=\"query-keyword\">\n            Reset value\n          </InlineLabel>\n          <Input\n            data-testid={testIds.counterResetValue}\n            placeholder=\"reset value\"\n            value={query.counterResetValue ?? ''}\n            onChange={(e) => {\n              const value = e.currentTarget.value;\n              onChange({ ...query, counterResetValue: value });\n            }}\n            onBlur={() => onRunQuery()}\n          />\n        </Stack>\n      )}\n      {tsdbVersion > 2 && (\n        <>\n          <InlineFormLabel className=\"query-keyword\" width={'auto'}>\n            Explicit tags\n          </InlineFormLabel>\n          <InlineSwitch\n            data-testid={testIds.explicitTags}\n            value={query.explicitTags ?? false}\n            onChange={() => {\n              const explicitTags = query.explicitTags ?? false;\n              onChange({ ...query, explicitTags: !explicitTags });\n              onRunQuery();\n            }}\n          />\n        </>\n      )}\n      <Stack gap={0} grow={1}>\n        <InlineLabel> </InlineLabel>\n      </Stack>\n    </Stack>\n  );\n}\n\nexport const testIds = {\n  section: 'opentsdb-rate',\n  shouldComputeRate: 'opentsdb-shouldComputeRate',\n  isCounter: 'opentsdb-is-counter',\n  counterMax: 'opentsdb-counter-max',\n  counterResetValue: 'opentsdb-counter-reset-value',\n  explicitTags: 'opentsdb-explicit-tags',\n};\n","import debounce from 'debounce-promise';\nimport { has, size } from 'lodash';\nimport { useState } from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport {\n  Select,\n  InlineFormLabel,\n  Icon,\n  clearButtonStyles,\n  useStyles2,\n  AsyncSelect,\n  Stack,\n  InlineLabel,\n} from '@grafana/ui';\n\nimport { OpenTsdbQuery } from '../types';\n\nexport interface TagSectionProps {\n  query: OpenTsdbQuery;\n  onChange: (query: OpenTsdbQuery) => void;\n  onRunQuery: () => void;\n  suggestTagKeys: (query: OpenTsdbQuery) => Promise<string[]>;\n  suggestTagValues: (value: string) => Promise<SelectableValue[]>;\n  tsdbVersion: number;\n}\n\nexport function TagSection({\n  query,\n  onChange,\n  onRunQuery,\n  suggestTagKeys,\n  suggestTagValues,\n  tsdbVersion,\n}: TagSectionProps) {\n  const buttonStyles = useStyles2(clearButtonStyles);\n\n  const [tagKeys, updTagKeys] = useState<Array<SelectableValue<string>>>();\n  const [keyIsLoading, updKeyIsLoading] = useState<boolean>();\n\n  const [addTagMode, updAddTagMode] = useState<boolean>(false);\n\n  const [curTagKey, updCurTagKey] = useState<string | number>('');\n  const [curTagValue, updCurTagValue] = useState<string>('');\n\n  const [errors, setErrors] = useState<string>('');\n\n  function changeAddTagMode() {\n    updAddTagMode(!addTagMode);\n  }\n\n  function addTag() {\n    if (query.filters && size(query.filters) > 0) {\n      const err = 'Please remove filters to use tags, tags and filters are mutually exclusive.';\n      setErrors(err);\n      return;\n    }\n\n    if (!addTagMode) {\n      updAddTagMode(true);\n      return;\n    }\n\n    // check for duplicate tags\n    if (query.tags && has(query.tags, curTagKey)) {\n      const err = \"Duplicate tag key '\" + curTagKey + \"'.\";\n      setErrors(err);\n      return;\n    }\n\n    // tags may be undefined\n    if (!query.tags) {\n      query.tags = {};\n    }\n\n    // add tag to query\n    query.tags[curTagKey] = curTagValue;\n\n    // reset the inputs\n    updCurTagKey('');\n    updCurTagValue('');\n\n    // fire the query\n    onChange(query);\n    onRunQuery();\n\n    // close the tag ditor\n    changeAddTagMode();\n  }\n\n  function removeTag(key: string | number) {\n    delete query.tags[key];\n\n    // fire off the query\n    onChange(query);\n    onRunQuery();\n  }\n\n  function editTag(key: string | number, value: string) {\n    removeTag(key);\n    updCurTagKey(key);\n    updCurTagValue(value);\n    addTag();\n  }\n\n  const tagValueSearch = debounce((query: string) => suggestTagValues(query), 350);\n\n  return (\n    <Stack gap={0} data-testid={testIds.section}>\n      <InlineFormLabel\n        className=\"query-keyword\"\n        width={8}\n        tooltip={tsdbVersion >= 2 ? <div>Please use filters, tags are deprecated in opentsdb 2.2</div> : undefined}\n      >\n        Tags\n      </InlineFormLabel>\n      {query.tags &&\n        Object.keys(query.tags).map((tagKey: string | number, idx: number) => {\n          const tagValue = query.tags[tagKey];\n          return (\n            <InlineFormLabel key={idx} width=\"auto\" data-testid={testIds.list + idx}>\n              {tagKey}={tagValue}\n              <button type=\"button\" className={buttonStyles} onClick={() => editTag(tagKey, tagValue)}>\n                <Icon name={'pen'} />\n              </button>\n              <button\n                type=\"button\"\n                className={buttonStyles}\n                onClick={() => removeTag(tagKey)}\n                data-testid={testIds.remove}\n              >\n                <Icon name={'times'} />\n              </button>\n            </InlineFormLabel>\n          );\n        })}\n      {!addTagMode && (\n        <InlineFormLabel width={2}>\n          <button type=\"button\" className={buttonStyles} onClick={changeAddTagMode} aria-label=\"Add tag\">\n            <Icon name={'plus'} />\n          </button>\n        </InlineFormLabel>\n      )}\n\n      {addTagMode && (\n        <Stack gap={0.5} alignItems=\"center\">\n          <Stack gap={0}>\n            <Select\n              inputId=\"opentsdb-suggested-tagk-select\"\n              value={curTagKey ? toOption('' + curTagKey) : undefined}\n              placeholder=\"key\"\n              allowCustomValue\n              onOpenMenu={async () => {\n                updKeyIsLoading(true);\n                const tKs = await suggestTagKeys(query);\n                const tKsOptions = tKs.map((value: string) => toOption(value));\n                updTagKeys(tKsOptions);\n                updKeyIsLoading(false);\n              }}\n              isLoading={keyIsLoading}\n              options={tagKeys}\n              onChange={({ value }) => {\n                if (value) {\n                  updCurTagKey(value);\n                }\n              }}\n            />\n          </Stack>\n\n          <Stack gap={0}>\n            <AsyncSelect\n              inputId=\"opentsdb-suggested-tagv-select\"\n              value={curTagValue ? toOption(curTagValue) : undefined}\n              placeholder=\"value\"\n              allowCustomValue\n              loadOptions={tagValueSearch}\n              defaultOptions={[]}\n              onChange={({ value }) => {\n                if (value) {\n                  updCurTagValue(value);\n                }\n              }}\n            />\n          </Stack>\n\n          <Stack gap={0}>\n            {errors && (\n              <InlineLabel title={errors} data-testid={testIds.error}>\n                <Icon name={'exclamation-triangle'} color={'rgb(229, 189, 28)'} />\n              </InlineLabel>\n            )}\n\n            <InlineFormLabel width={5.5}>\n              <button type=\"button\" className={buttonStyles} onClick={addTag}>\n                add tag\n              </button>\n              <button type=\"button\" className={buttonStyles} onClick={changeAddTagMode}>\n                <Icon name={'times'} />\n              </button>\n            </InlineFormLabel>\n          </Stack>\n        </Stack>\n      )}\n      <Stack gap={0} grow={1}>\n        <InlineLabel> </InlineLabel>\n      </Stack>\n    </Stack>\n  );\n}\n\nexport const testIds = {\n  section: 'opentsdb-tag',\n  list: 'opentsdb-tag-list',\n  error: 'opentsdb-tag-error',\n  remove: 'opentsdb-tag-remove',\n};\n","import { css } from '@emotion/css';\nimport { useEffect, useState } from 'react';\n\nimport { GrafanaTheme2, QueryEditorProps, textUtil } from '@grafana/data';\nimport { useStyles2, Stack } from '@grafana/ui';\n\nimport OpenTsDatasource from '../datasource';\nimport { OpenTsdbOptions, OpenTsdbQuery } from '../types';\n\nimport { DownSample } from './DownSample';\nimport { FilterSection } from './FilterSection';\nimport { MetricSection } from './MetricSection';\nimport { RateSection } from './RateSection';\nimport { TagSection } from './TagSection';\n\nexport type OpenTsdbQueryEditorProps = QueryEditorProps<OpenTsDatasource, OpenTsdbQuery, OpenTsdbOptions>;\n\nexport function OpenTsdbQueryEditor({\n  datasource,\n  onRunQuery,\n  onChange,\n  query,\n  range,\n  queries,\n}: OpenTsdbQueryEditorProps) {\n  const styles = useStyles2(getStyles);\n\n  const [aggregators, setAggregators] = useState<string[]>([\n    'avg',\n    'sum',\n    'min',\n    'max',\n    'dev',\n    'zimsum',\n    'mimmin',\n    'mimmax',\n  ]);\n\n  const fillPolicies: string[] = ['none', 'nan', 'null', 'zero'];\n\n  const [filterTypes, setFilterTypes] = useState<string[]>([\n    'wildcard',\n    'iliteral_or',\n    'not_iliteral_or',\n    'not_literal_or',\n    'iwildcard',\n    'literal_or',\n    'regexp',\n  ]);\n\n  const tsdbVersion: number = datasource.tsdbVersion;\n\n  if (!query.aggregator) {\n    query.aggregator = 'sum';\n  }\n\n  if (!query.downsampleAggregator) {\n    query.downsampleAggregator = 'avg';\n  }\n\n  if (!query.downsampleFillPolicy) {\n    query.downsampleFillPolicy = 'none';\n  }\n\n  useEffect(() => {\n    datasource.getAggregators().then((aggs: string[]) => {\n      if (aggs.length !== 0) {\n        setAggregators(aggs);\n      }\n    });\n  }, [datasource]);\n\n  useEffect(() => {\n    datasource.getFilterTypes().then((newFilterTypes: string[]) => {\n      if (newFilterTypes.length !== 0) {\n        setFilterTypes(newFilterTypes);\n      }\n    });\n  }, [datasource]);\n\n  async function suggestMetrics(value: string): Promise<Array<{ value: string; description: string }>> {\n    return datasource.metricFindQuery(`metrics(${value})`).then(getTextValues);\n  }\n\n  // previously called as an autocomplete on every input,\n  // in this we call it once on init and filter in the MetricSection component\n  async function suggestTagValues(value: string): Promise<Array<{ value: string; description: string }>> {\n    return datasource.metricFindQuery(`suggest_tagv(${value})`).then(getTextValues);\n  }\n\n  async function suggestTagKeys(query: OpenTsdbQuery): Promise<string[]> {\n    return datasource.suggestTagKeys(query);\n  }\n\n  function getTextValues(metrics: Array<{ text: string }>) {\n    const variables = datasource.getVariables().map((value) => {\n      return {\n        value: textUtil.escapeHtml(value),\n        description: value,\n      };\n    });\n\n    const values = metrics.map((value: { text: string }) => {\n      return {\n        value: textUtil.escapeHtml(value.text),\n        description: value.text,\n      };\n    });\n\n    return variables.concat(values);\n  }\n\n  return (\n    <div className={styles.container} data-testid={testIds.editor}>\n      <Stack gap={0.5} direction=\"column\" grow={1}>\n        <MetricSection\n          query={query}\n          onChange={onChange}\n          onRunQuery={onRunQuery}\n          suggestMetrics={suggestMetrics}\n          aggregators={aggregators}\n        />\n        <DownSample\n          query={query}\n          onChange={onChange}\n          onRunQuery={onRunQuery}\n          aggregators={aggregators}\n          fillPolicies={fillPolicies}\n          tsdbVersion={tsdbVersion}\n        />\n        {tsdbVersion >= 2 && (\n          <FilterSection\n            query={query}\n            onChange={onChange}\n            onRunQuery={onRunQuery}\n            filterTypes={filterTypes}\n            suggestTagValues={suggestTagValues}\n            suggestTagKeys={suggestTagKeys}\n          />\n        )}\n        <TagSection\n          query={query}\n          onChange={onChange}\n          onRunQuery={onRunQuery}\n          suggestTagValues={suggestTagValues}\n          suggestTagKeys={suggestTagKeys}\n          tsdbVersion={tsdbVersion}\n        />\n        <RateSection query={query} onChange={onChange} onRunQuery={onRunQuery} tsdbVersion={tsdbVersion} />\n      </Stack>\n    </div>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css`\n      display: flex;\n    `,\n    toggleButton: css`\n      margin-left: ${theme.spacing(0.5)};\n    `,\n  };\n}\n\nexport const testIds = {\n  editor: 'opentsdb-editor',\n};\n","import { useState } from 'react';\n\nimport { QueryEditorProps } from '@grafana/data';\nimport { InlineFormLabel, Input, InlineSwitch } from '@grafana/ui';\n\nimport OpenTsDatasource from '../datasource';\nimport { OpenTsdbQuery, OpenTsdbOptions } from '../types';\n\nexport const AnnotationEditor = (props: QueryEditorProps<OpenTsDatasource, OpenTsdbQuery, OpenTsdbOptions>) => {\n  const { query, onChange } = props;\n  const [target, setTarget] = useState<string>(query.target ?? '');\n  const [isGlobal, setIsGlobal] = useState<boolean>(query.isGlobal ?? false);\n\n  const updateValue = <K extends keyof OpenTsdbQuery, V extends OpenTsdbQuery[K]>(key: K, val: V) => {\n    onChange({\n      ...query,\n      [key]: val,\n      fromAnnotations: true,\n    });\n  };\n\n  const updateIsGlobal = (isGlobal: boolean) => {\n    isGlobal = !isGlobal;\n    setIsGlobal(isGlobal);\n    updateValue('isGlobal', isGlobal);\n  };\n\n  return (\n    <div className=\"gf-form-group\">\n      <div className=\"gf-form\">\n        <InlineFormLabel width={12}>OpenTSDB metrics query</InlineFormLabel>\n        <Input\n          value={target}\n          onChange={(e) => setTarget(e.currentTarget.value ?? '')}\n          onBlur={() => updateValue('target', target)}\n          placeholder=\"events.eventname\"\n        />\n      </div>\n      <div className=\"gf-form\">\n        <InlineFormLabel width={12}>Show Global Annotations?</InlineFormLabel>\n        <InlineSwitch value={isGlobal} onChange={(e) => updateIsGlobal(isGlobal)} />\n      </div>\n    </div>\n  );\n};\n","import { AnnotationQuery, AnnotationSupport } from '@grafana/data';\n\nimport { LegacyAnnotation, OpenTsdbQuery } from './types';\n\n// this becomes the target in the migrated annotations\nconst migrateLegacyAnnotation = (json: LegacyAnnotation) => {\n  // return the target annotation\n  const annotation: LegacyAnnotation = {\n    fromAnnotations: true,\n    target: json.target ?? '',\n    name: json.name ?? '',\n    isGlobal: json.isGlobal ?? false,\n  };\n\n  return annotation;\n};\n\nexport const prepareAnnotation: AnnotationSupport<\n  OpenTsdbQuery,\n  AnnotationQuery<OpenTsdbQuery>\n>['prepareAnnotation'] = (json) => {\n  const resultingTarget = json.target && typeof json.target !== 'string' ? json.target : migrateLegacyAnnotation(json);\n\n  json.target = resultingTarget;\n\n  return json;\n};\n","import {\n  clone,\n  cloneDeep,\n  compact,\n  each,\n  every,\n  filter,\n  findIndex,\n  has,\n  includes,\n  isArray,\n  isEmpty,\n  map as _map,\n  toPairs,\n} from 'lodash';\nimport { lastValueFrom, merge, Observable, of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\nimport {\n  AnnotationEvent,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  dateMath,\n  DateTime,\n  ScopedVars,\n  toDataFrame,\n} from '@grafana/data';\nimport { FetchResponse, getBackendSrv } from '@grafana/runtime';\nimport { getTemplateSrv, TemplateSrv } from 'app/features/templating/template_srv';\n\nimport { AnnotationEditor } from './components/AnnotationEditor';\nimport { prepareAnnotation } from './migrations';\nimport { OpenTsdbFilter, OpenTsdbOptions, OpenTsdbQuery } from './types';\n\nexport default class OpenTsDatasource extends DataSourceApi<OpenTsdbQuery, OpenTsdbOptions> {\n  type: 'opentsdb';\n  url: string;\n  name: string;\n  withCredentials: boolean;\n  basicAuth: any;\n  tsdbVersion: number;\n  tsdbResolution: number;\n  lookupLimit: number;\n  tagKeys: Record<string | number, string[]>;\n\n  aggregatorsPromise: Promise<string[]> | null;\n  filterTypesPromise: Promise<string[]> | null;\n\n  constructor(\n    instanceSettings: any,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv()\n  ) {\n    super(instanceSettings);\n    this.type = 'opentsdb';\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.basicAuth = instanceSettings.basicAuth;\n    instanceSettings.jsonData = instanceSettings.jsonData || {};\n    this.tsdbVersion = instanceSettings.jsonData.tsdbVersion || 1;\n    this.tsdbResolution = instanceSettings.jsonData.tsdbResolution || 1;\n    this.lookupLimit = instanceSettings.jsonData.lookupLimit || 1000;\n    this.tagKeys = {};\n\n    this.aggregatorsPromise = null;\n    this.filterTypesPromise = null;\n    this.annotations = {\n      QueryEditor: AnnotationEditor,\n      prepareAnnotation,\n    };\n  }\n\n  // Called once per panel (graph)\n  query(options: DataQueryRequest<OpenTsdbQuery>): Observable<DataQueryResponse> {\n    // migrate annotations\n    if (options.targets.some((target: OpenTsdbQuery) => target.fromAnnotations)) {\n      const streams: Array<Observable<DataQueryResponse>> = [];\n\n      for (const annotation of options.targets) {\n        if (annotation.target) {\n          streams.push(\n            new Observable((subscriber) => {\n              this.annotationEvent(options, annotation)\n                .then((events) => subscriber.next({ data: [toDataFrame(events)] }))\n                .catch((ex) => {\n                  // grafana fetch throws the error so for annotation consistency among datasources\n                  // we return an empty array which displays as 'no events found'\n                  // in the annnotation editor\n                  return subscriber.next({ data: [toDataFrame([])] });\n                })\n                .finally(() => subscriber.complete());\n            })\n          );\n        }\n      }\n\n      return merge(...streams);\n    }\n\n    const start = this.convertToTSDBTime(options.range.raw.from, false, options.timezone);\n    const end = this.convertToTSDBTime(options.range.raw.to, true, options.timezone);\n    const qs: any[] = [];\n\n    each(options.targets, (target) => {\n      if (!target.metric) {\n        return;\n      }\n      qs.push(this.convertTargetToQuery(target, options, this.tsdbVersion));\n    });\n\n    const queries = compact(qs);\n\n    // No valid targets, return the empty result to save a round trip.\n    if (isEmpty(queries)) {\n      return of({ data: [] });\n    }\n\n    const groupByTags: Record<string, boolean> = {};\n    each(queries, (query) => {\n      if (query.filters && query.filters.length > 0) {\n        each(query.filters, (val) => {\n          groupByTags[val.tagk] = true;\n        });\n      } else {\n        each(query.tags, (val, key) => {\n          groupByTags[key] = true;\n        });\n      }\n    });\n\n    options.targets = filter(options.targets, (query) => {\n      return query.hide !== true;\n    });\n\n    return this.performTimeSeriesQuery(queries, start, end).pipe(\n      catchError((err) => {\n        // Throw the error message here instead of the whole object to workaround the error parsing error.\n        throw err?.data?.error?.message || 'Error performing time series query.';\n      }),\n      map((response) => {\n        const metricToTargetMapping = this.mapMetricsToTargets(response.data, options, this.tsdbVersion);\n        const result = _map(response.data, (metricData, index: number) => {\n          index = metricToTargetMapping[index];\n          if (index === -1) {\n            index = 0;\n          }\n          this._saveTagKeys(metricData);\n\n          return this.transformMetricData(\n            metricData,\n            groupByTags,\n            options.targets[index],\n            options,\n            this.tsdbResolution\n          );\n        });\n        return { data: result };\n      })\n    );\n  }\n\n  annotationEvent(options: DataQueryRequest, annotation: OpenTsdbQuery): Promise<AnnotationEvent[]> {\n    const start = this.convertToTSDBTime(options.range.raw.from, false, options.timezone);\n    const end = this.convertToTSDBTime(options.range.raw.to, true, options.timezone);\n    const qs = [];\n    const eventList: AnnotationEvent[] = [];\n\n    qs.push({ aggregator: 'sum', metric: annotation.target });\n\n    const queries = compact(qs);\n\n    return lastValueFrom(\n      this.performTimeSeriesQuery(queries, start, end).pipe(\n        map((results) => {\n          if (results.data[0]) {\n            let annotationObject = results.data[0].annotations;\n            if (annotation.isGlobal) {\n              annotationObject = results.data[0].globalAnnotations;\n            }\n            if (annotationObject) {\n              each(annotationObject, (ann) => {\n                const event = {\n                  text: ann.description,\n                  time: Math.floor(ann.startTime) * 1000,\n                  annotation: annotation,\n                };\n\n                eventList.push(event);\n              });\n            }\n          }\n          return eventList;\n        })\n      )\n    );\n  }\n\n  targetContainsTemplate(target: any) {\n    if (target.filters && target.filters.length > 0) {\n      for (let i = 0; i < target.filters.length; i++) {\n        if (this.templateSrv.containsTemplate(target.filters[i].filter)) {\n          return true;\n        }\n      }\n    }\n\n    if (target.tags && Object.keys(target.tags).length > 0) {\n      for (const tagKey in target.tags) {\n        if (this.templateSrv.containsTemplate(target.tags[tagKey])) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  performTimeSeriesQuery(queries: any[], start: number | null, end: number | null): Observable<FetchResponse> {\n    let msResolution = false;\n    if (this.tsdbResolution === 2) {\n      msResolution = true;\n    }\n    const reqBody: any = {\n      start: start,\n      queries: queries,\n      msResolution: msResolution,\n      globalAnnotations: true,\n    };\n    if (this.tsdbVersion === 3) {\n      reqBody.showQuery = true;\n    }\n\n    // Relative queries (e.g. last hour) don't include an end time\n    if (end) {\n      reqBody.end = end;\n    }\n\n    const options = {\n      method: 'POST',\n      url: this.url + '/api/query',\n      data: reqBody,\n    };\n\n    this._addCredentialOptions(options);\n    return getBackendSrv().fetch(options);\n  }\n\n  suggestTagKeys(query: OpenTsdbQuery) {\n    const metric = query.metric ?? '';\n    return Promise.resolve(this.tagKeys[metric] || []);\n  }\n\n  _saveTagKeys(metricData: { tags: {}; aggregateTags: any; metric: string | number }) {\n    const tagKeys = Object.keys(metricData.tags);\n    each(metricData.aggregateTags, (tag) => {\n      tagKeys.push(tag);\n    });\n\n    this.tagKeys[metricData.metric] = tagKeys;\n  }\n\n  _performSuggestQuery(query: string, type: string) {\n    return this._get('/api/suggest', { type, q: query, max: this.lookupLimit }).pipe(\n      map((result) => {\n        return result.data;\n      })\n    );\n  }\n\n  _performMetricKeyValueLookup(metric: string, keys: string) {\n    if (!metric || !keys) {\n      return of([]);\n    }\n\n    const keysArray = keys.split(',').map((key) => {\n      return key.trim();\n    });\n    const key = keysArray[0];\n    let keysQuery = key + '=*';\n\n    if (keysArray.length > 1) {\n      keysQuery += ',' + keysArray.splice(1).join(',');\n    }\n\n    const m = metric + '{' + keysQuery + '}';\n\n    return this._get('/api/search/lookup', { m: m, limit: this.lookupLimit }).pipe(\n      map((result) => {\n        result = result.data.results;\n        const tagvs: any[] = [];\n        each(result, (r) => {\n          if (tagvs.indexOf(r.tags[key]) === -1) {\n            tagvs.push(r.tags[key]);\n          }\n        });\n        return tagvs;\n      })\n    );\n  }\n\n  _performMetricKeyLookup(metric: string) {\n    if (!metric) {\n      return of([]);\n    }\n\n    return this._get('/api/search/lookup', { m: metric, limit: 1000 }).pipe(\n      map((result) => {\n        result = result.data.results;\n        const tagks: any[] = [];\n        each(result, (r) => {\n          each(r.tags, (tagv, tagk) => {\n            if (tagks.indexOf(tagk) === -1) {\n              tagks.push(tagk);\n            }\n          });\n        });\n        return tagks;\n      })\n    );\n  }\n\n  _get(\n    relativeUrl: string,\n    params?: { type?: string; q?: string; max?: number; m?: string; limit?: number }\n  ): Observable<FetchResponse> {\n    const options = {\n      method: 'GET',\n      url: this.url + relativeUrl,\n      params: params,\n    };\n\n    this._addCredentialOptions(options);\n\n    return getBackendSrv().fetch(options);\n  }\n\n  _addCredentialOptions(options: Record<string, unknown>) {\n    if (this.basicAuth || this.withCredentials) {\n      options.withCredentials = true;\n    }\n    if (this.basicAuth) {\n      options.headers = { Authorization: this.basicAuth };\n    }\n  }\n\n  metricFindQuery(query: string) {\n    if (!query) {\n      return Promise.resolve([]);\n    }\n\n    let interpolated;\n    try {\n      interpolated = this.templateSrv.replace(query, {}, 'distributed');\n    } catch (err) {\n      return Promise.reject(err);\n    }\n\n    const responseTransform = (result: any) => {\n      return _map(result, (value) => {\n        return { text: value };\n      });\n    };\n\n    const metricsRegex = /metrics\\((.*)\\)/;\n    const tagNamesRegex = /tag_names\\((.*)\\)/;\n    const tagValuesRegex = /tag_values\\((.*?),\\s?(.*)\\)/;\n    const tagNamesSuggestRegex = /suggest_tagk\\((.*)\\)/;\n    const tagValuesSuggestRegex = /suggest_tagv\\((.*)\\)/;\n\n    const metricsQuery = interpolated.match(metricsRegex);\n    if (metricsQuery) {\n      return lastValueFrom(this._performSuggestQuery(metricsQuery[1], 'metrics').pipe(map(responseTransform)));\n    }\n\n    const tagNamesQuery = interpolated.match(tagNamesRegex);\n    if (tagNamesQuery) {\n      return lastValueFrom(this._performMetricKeyLookup(tagNamesQuery[1]).pipe(map(responseTransform)));\n    }\n\n    const tagValuesQuery = interpolated.match(tagValuesRegex);\n    if (tagValuesQuery) {\n      return lastValueFrom(\n        this._performMetricKeyValueLookup(tagValuesQuery[1], tagValuesQuery[2]).pipe(map(responseTransform))\n      );\n    }\n\n    const tagNamesSuggestQuery = interpolated.match(tagNamesSuggestRegex);\n    if (tagNamesSuggestQuery) {\n      return lastValueFrom(this._performSuggestQuery(tagNamesSuggestQuery[1], 'tagk').pipe(map(responseTransform)));\n    }\n\n    const tagValuesSuggestQuery = interpolated.match(tagValuesSuggestRegex);\n    if (tagValuesSuggestQuery) {\n      return lastValueFrom(this._performSuggestQuery(tagValuesSuggestQuery[1], 'tagv').pipe(map(responseTransform)));\n    }\n\n    return Promise.resolve([]);\n  }\n\n  testDatasource() {\n    return lastValueFrom(\n      this._performSuggestQuery('cpu', 'metrics').pipe(\n        map(() => {\n          return { status: 'success', message: 'Data source is working' };\n        })\n      )\n    );\n  }\n\n  getAggregators() {\n    if (this.aggregatorsPromise) {\n      return this.aggregatorsPromise;\n    }\n\n    this.aggregatorsPromise = lastValueFrom(\n      this._get('/api/aggregators').pipe(\n        map((result) => {\n          if (result.data && isArray(result.data)) {\n            return result.data.sort();\n          }\n          return [];\n        })\n      )\n    );\n    return this.aggregatorsPromise;\n  }\n\n  getFilterTypes() {\n    if (this.filterTypesPromise) {\n      return this.filterTypesPromise;\n    }\n\n    this.filterTypesPromise = lastValueFrom(\n      this._get('/api/config/filters').pipe(\n        map((result) => {\n          if (result.data) {\n            return Object.keys(result.data).sort();\n          }\n          return [];\n        })\n      )\n    );\n    return this.filterTypesPromise;\n  }\n\n  transformMetricData(\n    md: { dps: any },\n    groupByTags: Record<string, boolean>,\n    target: OpenTsdbQuery,\n    options: DataQueryRequest<OpenTsdbQuery>,\n    tsdbResolution: number\n  ) {\n    const metricLabel = this.createMetricLabel(md, target, groupByTags, options);\n    const dps: any[] = [];\n\n    // TSDB returns datapoints has a hash of ts => value.\n    // Can't use pairs(invert()) because it stringifies keys/values\n    each(md.dps, (v, k: number) => {\n      if (tsdbResolution === 2) {\n        dps.push([v, k * 1]);\n      } else {\n        dps.push([v, k * 1000]);\n      }\n    });\n\n    return { target: metricLabel, datapoints: dps };\n  }\n\n  createMetricLabel(\n    md: { dps?: any; tags?: any; metric?: any },\n    target: OpenTsdbQuery,\n    groupByTags: Record<string, boolean>,\n    options: DataQueryRequest<OpenTsdbQuery>\n  ) {\n    if (target.alias) {\n      const scopedVars = clone(options.scopedVars || {});\n      each(md.tags, (value, key) => {\n        scopedVars['tag_' + key] = { value: value };\n      });\n      return this.templateSrv.replace(target.alias, scopedVars);\n    }\n\n    let label = md.metric;\n    const tagData: any[] = [];\n\n    if (!isEmpty(md.tags)) {\n      each(toPairs(md.tags), (tag) => {\n        if (has(groupByTags, tag[0])) {\n          tagData.push(tag[0] + '=' + tag[1]);\n        }\n      });\n    }\n\n    if (!isEmpty(tagData)) {\n      label += '{' + tagData.join(', ') + '}';\n    }\n\n    return label;\n  }\n\n  convertTargetToQuery(target: OpenTsdbQuery, options: DataQueryRequest<OpenTsdbQuery>, tsdbVersion: number) {\n    if (!target.metric || target.hide) {\n      return null;\n    }\n\n    const query = this.interpolateVariablesInQuery(target, options.scopedVars);\n\n    if (target.shouldComputeRate) {\n      query.rate = true;\n      query.rateOptions = {\n        counter: !!target.isCounter,\n      };\n\n      if (target.counterMax && target.counterMax.length) {\n        query.rateOptions.counterMax = parseInt(target.counterMax, 10);\n      }\n\n      if (target.counterResetValue && target.counterResetValue.length) {\n        query.rateOptions.resetValue = parseInt(target.counterResetValue, 10);\n      }\n\n      if (tsdbVersion >= 2) {\n        query.rateOptions.dropResets =\n          !query.rateOptions.counterMax && (!query.rateOptions.ResetValue || query.rateOptions.ResetValue === 0);\n      }\n    }\n\n    if (!target.disableDownsampling) {\n      let interval = this.templateSrv.replace(target.downsampleInterval || options.interval);\n\n      if (interval.match(/\\.[0-9]+s/)) {\n        interval = parseFloat(interval) * 1000 + 'ms';\n      }\n\n      query.downsample = interval + '-' + target.downsampleAggregator;\n\n      if (target.downsampleFillPolicy && target.downsampleFillPolicy !== 'none') {\n        query.downsample += '-' + target.downsampleFillPolicy;\n      }\n    }\n\n    if (target.explicitTags) {\n      query.explicitTags = true;\n    }\n\n    return query;\n  }\n\n  interpolateVariablesInFilters(query: OpenTsdbQuery, scopedVars: ScopedVars) {\n    query.filters = query.filters?.map((filter: OpenTsdbFilter): OpenTsdbFilter => {\n      filter.tagk = this.templateSrv.replace(filter.tagk, scopedVars, 'pipe');\n\n      filter.filter = this.templateSrv.replace(filter.filter, scopedVars, 'pipe');\n\n      return filter;\n    });\n  }\n\n  getVariables(): string[] {\n    return this.templateSrv.getVariables().map((v) => `$${v.name}`);\n  }\n\n  mapMetricsToTargets(metrics: any, options: DataQueryRequest<OpenTsdbQuery>, tsdbVersion: number) {\n    let interpolatedTagValue, arrTagV;\n    return _map(metrics, (metricData) => {\n      if (tsdbVersion === 3) {\n        return metricData.query.index;\n      } else {\n        return findIndex(options.targets, (target) => {\n          if (target.filters && target.filters.length > 0) {\n            return target.metric === metricData.metric;\n          } else {\n            return (\n              target.metric === metricData.metric &&\n              every(target.tags, (tagV, tagK) => {\n                interpolatedTagValue = this.templateSrv.replace(tagV, options.scopedVars, 'pipe');\n                arrTagV = interpolatedTagValue.split('|');\n                return includes(arrTagV, metricData.tags[tagK]) || interpolatedTagValue === '*';\n              })\n            );\n          }\n        });\n      }\n    });\n  }\n\n  interpolateVariablesInQueries(queries: OpenTsdbQuery[], scopedVars: ScopedVars): OpenTsdbQuery[] {\n    if (!queries.length) {\n      return queries;\n    }\n\n    return queries.map((query) => this.interpolateVariablesInQuery(query, scopedVars));\n  }\n\n  interpolateVariablesInQuery(target: OpenTsdbQuery, scopedVars: ScopedVars): any {\n    const query = cloneDeep(target);\n\n    query.metric = this.templateSrv.replace(target.metric, scopedVars, 'pipe');\n\n    query.aggregator = 'avg';\n    if (target.aggregator) {\n      query.aggregator = this.templateSrv.replace(target.aggregator);\n    }\n\n    if (query.filters && query.filters.length > 0) {\n      this.interpolateVariablesInFilters(query, scopedVars);\n    } else {\n      if (query.tags) {\n        for (const tagKey in query.tags) {\n          query.tags[tagKey] = this.templateSrv.replace(query.tags[tagKey], scopedVars, 'pipe');\n        }\n      }\n    }\n\n    return query;\n  }\n\n  convertToTSDBTime(date: string | DateTime, roundUp: boolean, timezone: string) {\n    if (date === 'now') {\n      return null;\n    }\n\n    const dateTime = dateMath.parse(date, roundUp, timezone);\n    return dateTime?.valueOf() ?? null;\n  }\n}\n","import { DataSourcePlugin } from '@grafana/data';\n\nimport { ConfigEditor } from './components/ConfigEditor';\nimport { OpenTsdbQueryEditor } from './components/OpenTsdbQueryEditor';\nimport OpenTsDatasource from './datasource';\n\nexport const plugin = new DataSourcePlugin(OpenTsDatasource)\n  .setQueryEditor(OpenTsdbQueryEditor)\n  .setConfigEditor(ConfigEditor);\n"],"names":["tsdbVersions","tsdbResolutions","OpenTsdbDetails","props","onChange","value","idSuffix","FieldSet","Field","Select","version","onSelectChangeHandler","resolution","Input","onInputChangeHandler","key","newValue","event","ConfigEditor","options","onOptionsChange","DataSourceHttpSettings","config","DownSample","query","onRunQuery","aggregators","fillPolicies","tsdbVersion","aggregatorOptions","fillPolicyOptions","Stack","testIds","e","InlineLabel","disableDownsampling","FilterSection","suggestTagKeys","filterTypes","suggestTagValues","buttonStyles","tagKeys","updTagKeys","keyIsLoading","updKeyIsLoading","addFilterMode","updAddFilterMode","curFilterType","updCurFilterType","curFilterKey","updCurFilterKey","curFilterValue","updCurFilterValue","curFilterGroupBy","updCurFilterGroupBy","errors","setErrors","filterTypesOptions","changeAddFilterMode","addFilter","currentFilter","removeFilter","index","editFilter","fil","idx","splitSeparator","customFilterOption","option","searchQuery","label","acc","cur","tagValueSearch","Icon","tKsOptions","MetricSection","suggestMetrics","metricSearch","RateSection","shouldComputeRate","isCounter","explicitTags","TagSection","addTagMode","updAddTagMode","curTagKey","updCurTagKey","curTagValue","updCurTagValue","changeAddTagMode","addTag","err","removeTag","editTag","tagKey","tagValue","OpenTsdbQueryEditor","datasource","range","queries","styles","getStyles","setAggregators","setFilterTypes","aggs","newFilterTypes","getTextValues","metrics","variables","values","theme","AnnotationEditor","target","setTarget","isGlobal","setIsGlobal","updateValue","val","updateIsGlobal","migrateLegacyAnnotation","json","prepareAnnotation","resultingTarget","OpenTsDatasource","instanceSettings","templateSrv","streams","annotation","Observable","subscriber","events","ex","merge","start","end","qs","of","groupByTags","catchError","map","response","metricToTargetMapping","metricData","eventList","lastValueFrom","results","annotationObject","ann","i","msResolution","reqBody","metric","tag","type","result","keys","keysArray","keysQuery","m","tagvs","r","tagks","tagv","tagk","relativeUrl","params","interpolated","responseTransform","metricsRegex","tagNamesRegex","tagValuesRegex","tagNamesSuggestRegex","tagValuesSuggestRegex","metricsQuery","tagNamesQuery","tagValuesQuery","tagNamesSuggestQuery","tagValuesSuggestQuery","md","tsdbResolution","metricLabel","dps","v","k","scopedVars","tagData","interval","filter","interpolatedTagValue","arrTagV","tagV","tagK","date","roundUp","timezone"],"sourceRoot":""}