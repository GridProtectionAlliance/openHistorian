{"version":3,"sources":["webpack:///./public/app/plugins/datasource/cloudwatch/query_parameter_ctrl.ts","webpack:///./public/app/plugins/datasource/cloudwatch/datasource.ts","webpack:///./public/app/plugins/datasource/cloudwatch/query_ctrl.ts","webpack:///./public/app/plugins/datasource/cloudwatch/config_ctrl.ts","webpack:///./public/app/plugins/datasource/cloudwatch/module.ts"],"names":["query_parameter_ctrl_CloudWatchQueryParameterCtrl","CloudWatchQueryParameterCtrl","$scope","templateSrv","uiSegmentSrv","datasourceSrv","$q","init","target","namespace","metricName","statistics","dimensions","period","region","id","expression","highResolution","regionSegment","getSegmentForValue","namespaceSegment","metricSegment","dimSegments","lodash_default","a","reduce","memo","value","key","push","newKey","newOperator","newKeyValue","statSegments","map","stat","ensurePlusButton","removeDimSegment","newSegment","fake","removeStatSegment","isEmpty","onChange","getStatSegments","when","flatten","angular_default","copy","datasource","standardStatistics","s","statSegmentChanged","segment","index","splice","type","seg","segments","count","length","lastSegment","Math","max","newPlusButton","getDimSegments","$index","query","getDimensionKeys","dimensionKey","getDimensionValues","then","transformToSegments","results","dimSegmentChanged","newFake","cssClass","syncDimSegmentsWithModel","dims","i","keySegment","valueSegment","getRegions","metricFindQuery","unshift","text","getNamespaces","getMetrics","regionChanged","namespaceChanged","metricChanged","addTemplateVars","expandable","each","variables","variable","name","$inject","templateUrl","controller","restrict","_super","CloudWatchDatasource","instanceSettings","backendSrv","timeSrv","_this","call","this","proxyUrl","url","defaultRegion","jsonData","tslib_es6","prototype","options","targets","expandTemplateVariable","scopedVars","filter","item","hide","replace","getActualRegion","convertDimensionFormat","String","getPeriod","some","indexOf","matches","exec","message","extend","refId","intervalMs","maxDataPoints","datasourceId","queries","d","defer","resolve","data","promise","request","from","range","valueOf","toString","to","performTimeSeriesQuery","now","start","convertToCloudWatchTime","end","round","Date","periodUnit","test","parseInt","kbn","interval_to_seconds","daySec","ceil","awsRequest","res","e_1","_a","e_2","_b","_c","_d","next","done","_e","queryRes","series","_f","datapoints","points","meta","unit","error","transformSuggestDataFromTable","suggestData","tables","rows","v","doMetricQueryRequest","subtype","parameters","timeRange","r","filterDimensions","getEbsVolumeIds","instanceId","getEc2InstanceAttribute","attributeName","filters","getResourceARNs","resourceType","tags","filterJson","match","metricNameQuery","dimensionKeysQuery","dimensionValuesQuery","JSON","parse","ebsVolumeIdsQuery","ec2InstanceAttributeQuery","targetAttributeName","resourceARNsQuery","tagsJSON","annotationQuery","annotation","defaultPeriod","prefixMatching","actionPrefix","alarmNamePrefix","time","title","targetContainsTemplate","variableExists","find","k","testDatasource","status","method","datasourceRequest","result","getDefaultRegion","getExpandedVariables","allSelected","selected","currentVariables","isArray","current","selectedVariables","t","scopedVar","multi","window","btoa","chain","variableIndex","keyBy","findKey","variableName","getVariableName","has","multiVariable","date","roundUp","isString","src","convertedDimensions","query_ctrl_CloudWatchQueryCtrl","$injector","aliasSyntax","CloudWatchQueryCtrl","CloudWatchConfigCtrl","accessKeyExist","secretKeyExist","authTypes","indexPatternTypes","undefined","example","regions","timeField","authType","secureJsonFields","accessKey","secretKey","resetAccessKey","resetSecretKey","loadDatasource","ds","err","console","__webpack_require__","__webpack_exports__","CloudWatchAnnotationsQueryCtrl","config_ctrl_CloudWatchConfigCtrl"],"mappings":"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","file":"cloudwatchPlugin.3932bda029d2299a9d96.js","sourcesContent":["import angular, { IQService } from 'angular';\nimport coreModule from 'app/core/core_module';\nimport _ from 'lodash';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport DatasourceSrv from 'app/features/plugins/datasource_srv';\n\nexport class CloudWatchQueryParameterCtrl {\n  /** @ngInject */\n  constructor($scope: any, templateSrv: TemplateSrv, uiSegmentSrv: any, datasourceSrv: DatasourceSrv, $q: IQService) {\n    $scope.init = () => {\n      const target = $scope.target;\n      target.namespace = target.namespace || '';\n      target.metricName = target.metricName || '';\n      target.statistics = target.statistics || ['Average'];\n      target.dimensions = target.dimensions || {};\n      target.period = target.period || '';\n      target.region = target.region || 'default';\n      target.id = target.id || '';\n      target.expression = target.expression || '';\n      target.highResolution = target.highResolution || false;\n\n      $scope.regionSegment = uiSegmentSrv.getSegmentForValue($scope.target.region, 'select region');\n      $scope.namespaceSegment = uiSegmentSrv.getSegmentForValue($scope.target.namespace, 'select namespace');\n      $scope.metricSegment = uiSegmentSrv.getSegmentForValue($scope.target.metricName, 'select metric');\n\n      $scope.dimSegments = _.reduce(\n        $scope.target.dimensions,\n        (memo, value, key) => {\n          memo.push(uiSegmentSrv.newKey(key));\n          memo.push(uiSegmentSrv.newOperator('='));\n          memo.push(uiSegmentSrv.newKeyValue(value));\n          return memo;\n        },\n        []\n      );\n\n      $scope.statSegments = _.map($scope.target.statistics, stat => {\n        return uiSegmentSrv.getSegmentForValue(stat);\n      });\n\n      $scope.ensurePlusButton($scope.statSegments);\n      $scope.ensurePlusButton($scope.dimSegments);\n      $scope.removeDimSegment = uiSegmentSrv.newSegment({\n        fake: true,\n        value: '-- remove dimension --',\n      });\n      $scope.removeStatSegment = uiSegmentSrv.newSegment({\n        fake: true,\n        value: '-- remove stat --',\n      });\n\n      if (_.isEmpty($scope.target.region)) {\n        $scope.target.region = 'default';\n      }\n\n      if (!$scope.onChange) {\n        $scope.onChange = () => {};\n      }\n    };\n\n    $scope.getStatSegments = () => {\n      return $q.when(\n        _.flatten([\n          angular.copy($scope.removeStatSegment),\n          _.map($scope.datasource.standardStatistics, s => {\n            return uiSegmentSrv.getSegmentForValue(s);\n          }),\n          uiSegmentSrv.getSegmentForValue('pNN.NN'),\n        ])\n      );\n    };\n\n    $scope.statSegmentChanged = (segment: any, index: number) => {\n      if (segment.value === $scope.removeStatSegment.value) {\n        $scope.statSegments.splice(index, 1);\n      } else {\n        segment.type = 'value';\n      }\n\n      $scope.target.statistics = _.reduce(\n        $scope.statSegments,\n        (memo, seg) => {\n          if (!seg.fake) {\n            memo.push(seg.value);\n          }\n          return memo;\n        },\n        []\n      );\n\n      $scope.ensurePlusButton($scope.statSegments);\n      $scope.onChange();\n    };\n\n    $scope.ensurePlusButton = (segments: any) => {\n      const count = segments.length;\n      const lastSegment = segments[Math.max(count - 1, 0)];\n\n      if (!lastSegment || lastSegment.type !== 'plus-button') {\n        segments.push(uiSegmentSrv.newPlusButton());\n      }\n    };\n\n    $scope.getDimSegments = (segment: any, $index: number) => {\n      if (segment.type === 'operator') {\n        return $q.when([]);\n      }\n\n      const target = $scope.target;\n      let query = $q.when([]);\n\n      if (segment.type === 'key' || segment.type === 'plus-button') {\n        query = $scope.datasource.getDimensionKeys($scope.target.namespace, $scope.target.region);\n      } else if (segment.type === 'value') {\n        const dimensionKey = $scope.dimSegments[$index - 2].value;\n        delete target.dimensions[dimensionKey];\n        query = $scope.datasource.getDimensionValues(\n          target.region,\n          target.namespace,\n          target.metricName,\n          dimensionKey,\n          target.dimensions\n        );\n      }\n\n      return query.then($scope.transformToSegments(true)).then(results => {\n        if (segment.type === 'key') {\n          results.splice(0, 0, angular.copy($scope.removeDimSegment));\n        }\n        return results;\n      });\n    };\n\n    $scope.dimSegmentChanged = (segment: any, index: number) => {\n      $scope.dimSegments[index] = segment;\n\n      if (segment.value === $scope.removeDimSegment.value) {\n        $scope.dimSegments.splice(index, 3);\n      } else if (segment.type === 'plus-button') {\n        $scope.dimSegments.push(uiSegmentSrv.newOperator('='));\n        $scope.dimSegments.push(uiSegmentSrv.newFake('select dimension value', 'value', 'query-segment-value'));\n        segment.type = 'key';\n        segment.cssClass = 'query-segment-key';\n      }\n\n      $scope.syncDimSegmentsWithModel();\n      $scope.ensurePlusButton($scope.dimSegments);\n      $scope.onChange();\n    };\n\n    $scope.syncDimSegmentsWithModel = () => {\n      const dims: any = {};\n      const length = $scope.dimSegments.length;\n\n      for (let i = 0; i < length - 2; i += 3) {\n        const keySegment = $scope.dimSegments[i];\n        const valueSegment = $scope.dimSegments[i + 2];\n        if (!valueSegment.fake) {\n          dims[keySegment.value] = valueSegment.value;\n        }\n      }\n\n      $scope.target.dimensions = dims;\n    };\n\n    $scope.getRegions = () => {\n      return $scope.datasource\n        .metricFindQuery('regions()')\n        .then((results: any) => {\n          results.unshift({ text: 'default' });\n          return results;\n        })\n        .then($scope.transformToSegments(true));\n    };\n\n    $scope.getNamespaces = () => {\n      return $scope.datasource.metricFindQuery('namespaces()').then($scope.transformToSegments(true));\n    };\n\n    $scope.getMetrics = () => {\n      return $scope.datasource\n        .metricFindQuery('metrics(' + $scope.target.namespace + ',' + $scope.target.region + ')')\n        .then($scope.transformToSegments(true));\n    };\n\n    $scope.regionChanged = () => {\n      $scope.target.region = $scope.regionSegment.value;\n      $scope.onChange();\n    };\n\n    $scope.namespaceChanged = () => {\n      $scope.target.namespace = $scope.namespaceSegment.value;\n      $scope.onChange();\n    };\n\n    $scope.metricChanged = () => {\n      $scope.target.metricName = $scope.metricSegment.value;\n      $scope.onChange();\n    };\n\n    $scope.transformToSegments = (addTemplateVars: any) => {\n      return (results: any) => {\n        const segments = _.map(results, segment => {\n          return uiSegmentSrv.newSegment({\n            value: segment.text,\n            expandable: segment.expandable,\n          });\n        });\n\n        if (addTemplateVars) {\n          _.each(templateSrv.variables, variable => {\n            segments.unshift(\n              uiSegmentSrv.newSegment({\n                type: 'template',\n                value: '$' + variable.name,\n                expandable: true,\n              })\n            );\n          });\n        }\n\n        return segments;\n      };\n    };\n\n    $scope.init();\n  }\n}\n\nexport function cloudWatchQueryParameter() {\n  return {\n    templateUrl: 'public/app/plugins/datasource/cloudwatch/partials/query.parameter.html',\n    controller: CloudWatchQueryParameterCtrl,\n    restrict: 'E',\n    scope: {\n      target: '=',\n      datasource: '=',\n      onChange: '&',\n    },\n  };\n}\n\ncoreModule.directive('cloudwatchQueryParameter', cloudWatchQueryParameter);\n","import angular, { IQService } from 'angular';\nimport _ from 'lodash';\nimport { dateMath, ScopedVars } from '@grafana/data';\nimport kbn from 'app/core/utils/kbn';\nimport { CloudWatchQuery } from './types';\nimport { DataSourceApi, DataQueryRequest, DataSourceInstanceSettings } from '@grafana/ui';\nimport { BackendSrv } from 'app/core/services/backend_srv';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport { TimeSrv } from 'app/features/dashboard/services/TimeSrv';\n// import * as moment from 'moment';\n\nexport default class CloudWatchDatasource extends DataSourceApi<CloudWatchQuery> {\n  type: any;\n  proxyUrl: any;\n  defaultRegion: any;\n  standardStatistics: any;\n\n  /** @ngInject */\n  constructor(\n    private instanceSettings: DataSourceInstanceSettings,\n    private $q: IQService,\n    private backendSrv: BackendSrv,\n    private templateSrv: TemplateSrv,\n    private timeSrv: TimeSrv\n  ) {\n    super(instanceSettings);\n    this.type = 'cloudwatch';\n    this.proxyUrl = instanceSettings.url;\n    this.defaultRegion = instanceSettings.jsonData.defaultRegion;\n    this.instanceSettings = instanceSettings;\n    this.standardStatistics = ['Average', 'Maximum', 'Minimum', 'Sum', 'SampleCount'];\n  }\n\n  query(options: DataQueryRequest<CloudWatchQuery>) {\n    options = angular.copy(options);\n    options.targets = this.expandTemplateVariable(options.targets, options.scopedVars, this.templateSrv);\n\n    const queries = _.filter(options.targets, item => {\n      return (\n        (item.id !== '' || item.hide !== true) &&\n        ((!!item.region && !!item.namespace && !!item.metricName && !_.isEmpty(item.statistics)) ||\n          item.expression.length > 0)\n      );\n    }).map(item => {\n      item.region = this.templateSrv.replace(this.getActualRegion(item.region), options.scopedVars);\n      item.namespace = this.templateSrv.replace(item.namespace, options.scopedVars);\n      item.metricName = this.templateSrv.replace(item.metricName, options.scopedVars);\n      item.dimensions = this.convertDimensionFormat(item.dimensions, options.scopedVars);\n      item.statistics = item.statistics.map(s => {\n        return this.templateSrv.replace(s, options.scopedVars);\n      });\n      item.period = String(this.getPeriod(item, options)); // use string format for period in graph query, and alerting\n      item.id = this.templateSrv.replace(item.id, options.scopedVars);\n      item.expression = this.templateSrv.replace(item.expression, options.scopedVars);\n\n      // valid ExtendedStatistics is like p90.00, check the pattern\n      const hasInvalidStatistics = item.statistics.some(s => {\n        if (s.indexOf('p') === 0) {\n          const matches = /^p\\d{2}(?:\\.\\d{1,2})?$/.exec(s);\n          return !matches || matches[0] !== s;\n        }\n\n        return false;\n      });\n\n      if (hasInvalidStatistics) {\n        throw { message: 'Invalid extended statistics' };\n      }\n\n      return _.extend(\n        {\n          refId: item.refId,\n          intervalMs: options.intervalMs,\n          maxDataPoints: options.maxDataPoints,\n          datasourceId: this.instanceSettings.id,\n          type: 'timeSeriesQuery',\n        },\n        item\n      );\n    });\n\n    // No valid targets, return the empty result to save a round trip.\n    if (_.isEmpty(queries)) {\n      const d = this.$q.defer();\n      d.resolve({ data: [] });\n      return d.promise;\n    }\n\n    const request = {\n      from: options.range.from.valueOf().toString(),\n      to: options.range.to.valueOf().toString(),\n      queries: queries,\n    };\n\n    return this.performTimeSeriesQuery(request);\n  }\n\n  getPeriod(target: any, options: any, now?: number) {\n    const start = this.convertToCloudWatchTime(options.range.from, false);\n    const end = this.convertToCloudWatchTime(options.range.to, true);\n    now = Math.round((now || Date.now()) / 1000);\n\n    let period;\n    const range = end - start;\n\n    const hourSec = 60 * 60;\n    const daySec = hourSec * 24;\n    let periodUnit = 60;\n    if (!target.period) {\n      if (now - start <= daySec * 15) {\n        // until 15 days ago\n        if (target.namespace === 'AWS/EC2') {\n          periodUnit = period = 300;\n        } else {\n          periodUnit = period = 60;\n        }\n      } else if (now - start <= daySec * 63) {\n        // until 63 days ago\n        periodUnit = period = 60 * 5;\n      } else if (now - start <= daySec * 455) {\n        // until 455 days ago\n        periodUnit = period = 60 * 60;\n      } else {\n        // over 455 days, should return error, but try to long period\n        periodUnit = period = 60 * 60;\n      }\n    } else {\n      if (/^\\d+$/.test(target.period)) {\n        period = parseInt(target.period, 10);\n      } else {\n        period = kbn.interval_to_seconds(this.templateSrv.replace(target.period, options.scopedVars));\n      }\n    }\n    if (period < 1) {\n      period = 1;\n    }\n    if (!target.highResolution && range / period >= 1440) {\n      period = Math.ceil(range / 1440 / periodUnit) * periodUnit;\n    }\n\n    return period;\n  }\n\n  performTimeSeriesQuery(request: any) {\n    return this.awsRequest('/api/tsdb/query', request).then((res: any) => {\n      const data = [];\n\n      if (res.results) {\n        for (const query of request.queries) {\n          const queryRes = res.results[query.refId];\n          if (queryRes) {\n            for (const series of queryRes.series) {\n              const s = { target: series.name, datapoints: series.points } as any;\n              if (queryRes.meta.unit) {\n                s.unit = queryRes.meta.unit;\n              }\n              data.push(s);\n            }\n          }\n        }\n      }\n\n      return { data: data };\n    });\n  }\n\n  transformSuggestDataFromTable(suggestData: any) {\n    return _.map(suggestData.results['metricFindQuery'].tables[0].rows, v => {\n      return {\n        text: v[0],\n        value: v[1],\n      };\n    });\n  }\n\n  doMetricQueryRequest(subtype: any, parameters: any) {\n    const range = this.timeSrv.timeRange();\n    return this.awsRequest('/api/tsdb/query', {\n      from: range.from.valueOf().toString(),\n      to: range.to.valueOf().toString(),\n      queries: [\n        _.extend(\n          {\n            refId: 'metricFindQuery',\n            intervalMs: 1, // dummy\n            maxDataPoints: 1, // dummy\n            datasourceId: this.instanceSettings.id,\n            type: 'metricFindQuery',\n            subtype: subtype,\n          },\n          parameters\n        ),\n      ],\n    }).then((r: any) => {\n      return this.transformSuggestDataFromTable(r);\n    });\n  }\n\n  getRegions() {\n    return this.doMetricQueryRequest('regions', null);\n  }\n\n  getNamespaces() {\n    return this.doMetricQueryRequest('namespaces', null);\n  }\n\n  getMetrics(namespace: string, region: string) {\n    return this.doMetricQueryRequest('metrics', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      namespace: this.templateSrv.replace(namespace),\n    });\n  }\n\n  getDimensionKeys(namespace: string, region: string) {\n    return this.doMetricQueryRequest('dimension_keys', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      namespace: this.templateSrv.replace(namespace),\n    });\n  }\n\n  getDimensionValues(\n    region: string,\n    namespace: string,\n    metricName: string,\n    dimensionKey: string,\n    filterDimensions: {}\n  ) {\n    return this.doMetricQueryRequest('dimension_values', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      namespace: this.templateSrv.replace(namespace),\n      metricName: this.templateSrv.replace(metricName),\n      dimensionKey: this.templateSrv.replace(dimensionKey),\n      dimensions: this.convertDimensionFormat(filterDimensions, {}),\n    });\n  }\n\n  getEbsVolumeIds(region: string, instanceId: string) {\n    return this.doMetricQueryRequest('ebs_volume_ids', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      instanceId: this.templateSrv.replace(instanceId),\n    });\n  }\n\n  getEc2InstanceAttribute(region: string, attributeName: string, filters: any) {\n    return this.doMetricQueryRequest('ec2_instance_attribute', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      attributeName: this.templateSrv.replace(attributeName),\n      filters: filters,\n    });\n  }\n\n  getResourceARNs(region: string, resourceType: string, tags: any) {\n    return this.doMetricQueryRequest('resource_arns', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      resourceType: this.templateSrv.replace(resourceType),\n      tags: tags,\n    });\n  }\n\n  metricFindQuery(query: string) {\n    let region;\n    let namespace;\n    let metricName;\n    let filterJson;\n\n    const regionQuery = query.match(/^regions\\(\\)/);\n    if (regionQuery) {\n      return this.getRegions();\n    }\n\n    const namespaceQuery = query.match(/^namespaces\\(\\)/);\n    if (namespaceQuery) {\n      return this.getNamespaces();\n    }\n\n    const metricNameQuery = query.match(/^metrics\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/);\n    if (metricNameQuery) {\n      namespace = metricNameQuery[1];\n      region = metricNameQuery[3];\n      return this.getMetrics(namespace, region);\n    }\n\n    const dimensionKeysQuery = query.match(/^dimension_keys\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/);\n    if (dimensionKeysQuery) {\n      namespace = dimensionKeysQuery[1];\n      region = dimensionKeysQuery[3];\n      return this.getDimensionKeys(namespace, region);\n    }\n\n    const dimensionValuesQuery = query.match(\n      /^dimension_values\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?([^,]+?)(,\\s?(.+))?\\)/\n    );\n    if (dimensionValuesQuery) {\n      region = dimensionValuesQuery[1];\n      namespace = dimensionValuesQuery[2];\n      metricName = dimensionValuesQuery[3];\n      const dimensionKey = dimensionValuesQuery[4];\n      filterJson = {};\n      if (dimensionValuesQuery[6]) {\n        filterJson = JSON.parse(this.templateSrv.replace(dimensionValuesQuery[6]));\n      }\n\n      return this.getDimensionValues(region, namespace, metricName, dimensionKey, filterJson);\n    }\n\n    const ebsVolumeIdsQuery = query.match(/^ebs_volume_ids\\(([^,]+?),\\s?([^,]+?)\\)/);\n    if (ebsVolumeIdsQuery) {\n      region = ebsVolumeIdsQuery[1];\n      const instanceId = ebsVolumeIdsQuery[2];\n      return this.getEbsVolumeIds(region, instanceId);\n    }\n\n    const ec2InstanceAttributeQuery = query.match(/^ec2_instance_attribute\\(([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/);\n    if (ec2InstanceAttributeQuery) {\n      region = ec2InstanceAttributeQuery[1];\n      const targetAttributeName = ec2InstanceAttributeQuery[2];\n      filterJson = JSON.parse(this.templateSrv.replace(ec2InstanceAttributeQuery[3]));\n      return this.getEc2InstanceAttribute(region, targetAttributeName, filterJson);\n    }\n\n    const resourceARNsQuery = query.match(/^resource_arns\\(([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/);\n    if (resourceARNsQuery) {\n      region = resourceARNsQuery[1];\n      const resourceType = resourceARNsQuery[2];\n      const tagsJSON = JSON.parse(this.templateSrv.replace(resourceARNsQuery[3]));\n      return this.getResourceARNs(region, resourceType, tagsJSON);\n    }\n\n    return this.$q.when([]);\n  }\n\n  annotationQuery(options: any) {\n    const annotation = options.annotation;\n    const statistics = _.map(annotation.statistics, s => {\n      return this.templateSrv.replace(s);\n    });\n    const defaultPeriod = annotation.prefixMatching ? '' : '300';\n    let period = annotation.period || defaultPeriod;\n    period = parseInt(period, 10);\n    const parameters = {\n      prefixMatching: annotation.prefixMatching,\n      region: this.templateSrv.replace(this.getActualRegion(annotation.region)),\n      namespace: this.templateSrv.replace(annotation.namespace),\n      metricName: this.templateSrv.replace(annotation.metricName),\n      dimensions: this.convertDimensionFormat(annotation.dimensions, {}),\n      statistics: statistics,\n      period: period,\n      actionPrefix: annotation.actionPrefix || '',\n      alarmNamePrefix: annotation.alarmNamePrefix || '',\n    };\n\n    return this.awsRequest('/api/tsdb/query', {\n      from: options.range.from.valueOf().toString(),\n      to: options.range.to.valueOf().toString(),\n      queries: [\n        _.extend(\n          {\n            refId: 'annotationQuery',\n            intervalMs: 1, // dummy\n            maxDataPoints: 1, // dummy\n            datasourceId: this.instanceSettings.id,\n            type: 'annotationQuery',\n          },\n          parameters\n        ),\n      ],\n    }).then((r: any) => {\n      return _.map(r.results['annotationQuery'].tables[0].rows, v => {\n        return {\n          annotation: annotation,\n          time: Date.parse(v[0]),\n          title: v[1],\n          tags: [v[2]],\n          text: v[3],\n        };\n      });\n    });\n  }\n\n  targetContainsTemplate(target: any) {\n    return (\n      this.templateSrv.variableExists(target.region) ||\n      this.templateSrv.variableExists(target.namespace) ||\n      this.templateSrv.variableExists(target.metricName) ||\n      _.find(target.dimensions, (v, k) => {\n        return this.templateSrv.variableExists(k) || this.templateSrv.variableExists(v);\n      })\n    );\n  }\n\n  testDatasource() {\n    /* use billing metrics for test */\n    const region = this.defaultRegion;\n    const namespace = 'AWS/Billing';\n    const metricName = 'EstimatedCharges';\n    const dimensions = {};\n\n    return this.getDimensionValues(region, namespace, metricName, 'ServiceName', dimensions).then(() => {\n      return { status: 'success', message: 'Data source is working' };\n    });\n  }\n\n  awsRequest(url: string, data: any) {\n    const options = {\n      method: 'POST',\n      url,\n      data,\n    };\n\n    return this.backendSrv.datasourceRequest(options).then((result: any) => {\n      return result.data;\n    });\n  }\n\n  getDefaultRegion() {\n    return this.defaultRegion;\n  }\n\n  getActualRegion(region: string) {\n    if (region === 'default' || _.isEmpty(region)) {\n      return this.getDefaultRegion();\n    }\n    return region;\n  }\n\n  getExpandedVariables(target: any, dimensionKey: any, variable: any, templateSrv: TemplateSrv) {\n    /* if the all checkbox is marked we should add all values to the targets */\n    const allSelected: any = _.find(variable.options, { selected: true, text: 'All' });\n    const selectedVariables = _.filter(variable.options, v => {\n      if (allSelected) {\n        return v.text !== 'All';\n      } else {\n        return v.selected;\n      }\n    });\n    const currentVariables = !_.isArray(variable.current.value)\n      ? [variable.current]\n      : variable.current.value.map((v: any) => {\n          return {\n            text: v,\n            value: v,\n          };\n        });\n    const useSelectedVariables =\n      selectedVariables.some((s: any) => {\n        return s.value === currentVariables[0].value;\n      }) || currentVariables[0].value === '$__all';\n    return (useSelectedVariables ? selectedVariables : currentVariables).map((v: any) => {\n      const t = angular.copy(target);\n      const scopedVar: any = {};\n      scopedVar[variable.name] = v;\n      t.refId = target.refId + '_' + v.value;\n      t.dimensions[dimensionKey] = templateSrv.replace(t.dimensions[dimensionKey], scopedVar);\n      if (variable.multi && target.id) {\n        t.id = target.id + window.btoa(v.value).replace(/=/g, '0'); // generate unique id\n      } else {\n        t.id = target.id;\n      }\n      return t;\n    });\n  }\n\n  expandTemplateVariable(targets: any, scopedVars: ScopedVars, templateSrv: TemplateSrv) {\n    // Datasource and template srv logic uber-complected. This should be cleaned up.\n    return _.chain(targets)\n      .map(target => {\n        if (target.id && target.id.length > 0 && target.expression && target.expression.length > 0) {\n          return [target];\n        }\n\n        const variableIndex = _.keyBy(templateSrv.variables, 'name');\n        const dimensionKey = _.findKey(target.dimensions, v => {\n          const variableName = templateSrv.getVariableName(v);\n          return templateSrv.variableExists(v) && !_.has(scopedVars, variableName) && variableIndex[variableName].multi;\n        });\n\n        if (dimensionKey) {\n          const multiVariable = variableIndex[templateSrv.getVariableName(target.dimensions[dimensionKey])];\n          return this.getExpandedVariables(target, dimensionKey, multiVariable, templateSrv);\n        } else {\n          return [target];\n        }\n      })\n      .flatten()\n      .value();\n  }\n\n  convertToCloudWatchTime(date: any, roundUp: any) {\n    if (_.isString(date)) {\n      date = dateMath.parse(date, roundUp);\n    }\n    return Math.round(date.valueOf() / 1000);\n  }\n\n  convertDimensionFormat(dimensions: any, scopedVars: ScopedVars) {\n    const convertedDimensions: any = {};\n    _.each(dimensions, (value, key) => {\n      convertedDimensions[this.templateSrv.replace(key, scopedVars)] = this.templateSrv.replace(value, scopedVars);\n    });\n    return convertedDimensions;\n  }\n}\n","import './query_parameter_ctrl';\nimport { QueryCtrl } from 'app/plugins/sdk';\nimport { auto } from 'angular';\n\nexport class CloudWatchQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  aliasSyntax: string;\n\n  /** @ngInject */\n  constructor($scope: any, $injector: auto.IInjectorService) {\n    super($scope, $injector);\n    this.aliasSyntax = '{{metric}} {{stat}} {{namespace}} {{region}} {{<dimension name>}}';\n  }\n}\n","import _ from 'lodash';\nimport DatasourceSrv from 'app/features/plugins/datasource_srv';\nimport CloudWatchDatasource from './datasource';\nexport class CloudWatchConfigCtrl {\n  static templateUrl = 'partials/config.html';\n  current: any;\n  datasourceSrv: any;\n\n  accessKeyExist = false;\n  secretKeyExist = false;\n\n  /** @ngInject */\n  constructor($scope: any, datasourceSrv: DatasourceSrv) {\n    this.current.jsonData.timeField = this.current.jsonData.timeField || '@timestamp';\n    this.current.jsonData.authType = this.current.jsonData.authType || 'credentials';\n\n    this.accessKeyExist = this.current.secureJsonFields.accessKey;\n    this.secretKeyExist = this.current.secureJsonFields.secretKey;\n    this.datasourceSrv = datasourceSrv;\n    this.getRegions();\n  }\n\n  resetAccessKey() {\n    this.accessKeyExist = false;\n  }\n\n  resetSecretKey() {\n    this.secretKeyExist = false;\n  }\n\n  authTypes = [\n    { name: 'Access & secret key', value: 'keys' },\n    { name: 'Credentials file', value: 'credentials' },\n    { name: 'ARN', value: 'arn' },\n  ];\n\n  indexPatternTypes: any = [\n    { name: 'No pattern', value: undefined },\n    { name: 'Hourly', value: 'Hourly', example: '[logstash-]YYYY.MM.DD.HH' },\n    { name: 'Daily', value: 'Daily', example: '[logstash-]YYYY.MM.DD' },\n    { name: 'Weekly', value: 'Weekly', example: '[logstash-]GGGG.WW' },\n    { name: 'Monthly', value: 'Monthly', example: '[logstash-]YYYY.MM' },\n    { name: 'Yearly', value: 'Yearly', example: '[logstash-]YYYY' },\n  ];\n\n  regions = [\n    'ap-northeast-1',\n    'ap-northeast-2',\n    'ap-northeast-3',\n    'ap-south-1',\n    'ap-southeast-1',\n    'ap-southeast-2',\n    'ca-central-1',\n    'cn-north-1',\n    'cn-northwest-1',\n    'eu-central-1',\n    'eu-north-1',\n    'eu-west-1',\n    'eu-west-2',\n    'eu-west-3',\n    'me-south-1',\n    'sa-east-1',\n    'us-east-1',\n    'us-east-2',\n    'us-gov-east-1',\n    'us-gov-west-1',\n    'us-iso-east-1',\n    'us-isob-east-1',\n    'us-west-1',\n    'us-west-2',\n  ];\n\n  getRegions() {\n    this.datasourceSrv\n      .loadDatasource(this.current.name)\n      .then((ds: CloudWatchDatasource) => {\n        return ds.getRegions();\n      })\n      .then(\n        (regions: any) => {\n          this.regions = _.map(regions, 'value');\n        },\n        (err: any) => {\n          console.error('failed to get latest regions');\n        }\n      );\n  }\n}\n","import './query_parameter_ctrl';\n\nimport CloudWatchDatasource from './datasource';\nimport { CloudWatchQueryCtrl } from './query_ctrl';\nimport { CloudWatchConfigCtrl } from './config_ctrl';\n\nclass CloudWatchAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n}\n\nexport {\n  CloudWatchDatasource as Datasource,\n  CloudWatchQueryCtrl as QueryCtrl,\n  CloudWatchConfigCtrl as ConfigCtrl,\n  CloudWatchAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n"],"sourceRoot":""}