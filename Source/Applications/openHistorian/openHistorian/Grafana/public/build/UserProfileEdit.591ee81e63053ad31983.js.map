{"version":3,"sources":["webpack:///./public/app/features/profile/UserProfileEdit.tsx","webpack:///./public/app/features/profile/UserOrganizations.tsx","webpack:///./public/app/features/profile/UserProfileEditForm.tsx","webpack:///./public/app/core/utils/UserProvider.tsx","webpack:///./public/app/features/profile/UserTeams.tsx","webpack:///./public/app/core/components/SharedPreferences/SharedPreferences.tsx","webpack:///./public/app/features/profile/UserSessions.tsx"],"names":["UserProfileEdit","navModel","userId","config","bootData","user","id","api","states","teams","orgs","sessions","Contents","loadUser","text","updateProfile","updateUserProfile","isSavingUser","resourceUri","isLoading","loadTeams","loadOrgs","setUserOrg","loadSessions","revokeUserSession","hot","module","connect","state","getNavModel","navIndex","UserOrganizations","this","props","length","className","map","org","index","key","name","role","orgId","variant","size","onClick","PureComponent","disableLoginForm","UserProfileEditForm","onSubmit","data","validateOn","register","errors","label","invalid","error","ref","required","placeholder","defaultValue","email","disabled","suffix","InputSuffix","login","content","UserProvider","loadingStates","changePassword","updateUserOrg","payload","setState","getBackendSrv","put","get","Object","keys","then","sort","a","b","Number","isActive","session","seenAt","dateTimeFormatTimeAgo","createdAt","dateTimeFormat","format","clientIp","browser","browserVersion","os","osVersion","device","tokenId","post","authTokenId","filter","window","location","href","appSubUrl","finally","catch","e","console","children","UserTeams","team","src","avatarUrl","memberCount","themes","value","SharedPreferences","backendSrv","onSubmitForm","homeDashboardId","theme","timezone","reload","onThemeChanged","onTimeZoneChanged","onHomeDashboardChanged","dashboardId","getFullDashName","dashboard","folderTitle","title","dashboards","prefs","search","starred","defaultDashboardHit","tags","type","uid","uri","url","folderId","folderUid","folderUrl","isStarred","slug","items","find","d","dashboardIds","missing","push","styles","getStyles","options","item","onChange","labelText","getOptionValue","i","getOptionLabel","aria-label","selectors","components","TimeZonePicker","container","includeInternal","stylesFactory","css","UserSessions"],"mappings":"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","file":"UserProfileEdit.591ee81e63053ad31983.js","sourcesContent":["import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { hot } from 'react-hot-loader';\nimport { LoadingPlaceholder } from '@grafana/ui';\nimport { config } from '@grafana/runtime';\nimport { NavModel } from '@grafana/data';\nimport { UserProvider, UserAPI, LoadingStates } from 'app/core/utils/UserProvider';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { User, Team, UserOrg, UserSession, StoreState } from 'app/types';\nimport { SharedPreferences } from 'app/core/components/SharedPreferences/SharedPreferences';\nimport Page from 'app/core/components/Page/Page';\nimport { UserTeams } from './UserTeams';\nimport { UserSessions } from './UserSessions';\nimport { UserOrganizations } from './UserOrganizations';\nimport { UserProfileEditForm } from './UserProfileEditForm';\n\nexport interface Props {\n  navModel: NavModel;\n}\n\nexport const UserProfileEdit: FC<Props> = ({ navModel }) => (\n  <Page navModel={navModel}>\n    <UserProvider userId={config.bootData.user.id}>\n      {(api: UserAPI, states: LoadingStates, teams: Team[], orgs: UserOrg[], sessions: UserSession[], user: User) => {\n        return (\n          <Page.Contents>\n            {states.loadUser ? (\n              <LoadingPlaceholder text=\"Loading user profile...\" />\n            ) : (\n              <UserProfileEditForm\n                updateProfile={api.updateUserProfile}\n                isSavingUser={states.updateUserProfile}\n                user={user}\n              />\n            )}\n            <SharedPreferences resourceUri=\"user\" />\n            <UserTeams isLoading={states.loadTeams} loadTeams={api.loadTeams} teams={teams} />\n            {!states.loadUser && (\n              <>\n                <UserOrganizations\n                  isLoading={states.loadOrgs}\n                  setUserOrg={api.setUserOrg}\n                  loadOrgs={api.loadOrgs}\n                  orgs={orgs}\n                  user={user}\n                />\n                <UserSessions\n                  isLoading={states.loadSessions}\n                  loadSessions={api.loadSessions}\n                  revokeUserSession={api.revokeUserSession}\n                  sessions={sessions}\n                  user={user}\n                />\n              </>\n            )}\n          </Page.Contents>\n        );\n      }}\n    </UserProvider>\n  </Page>\n);\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, 'profile-settings'),\n  };\n}\n\nexport default hot(module)(connect(mapStateToProps, null)(UserProfileEdit));\n","import React, { PureComponent } from 'react';\nimport { User, UserOrg } from 'app/types';\nimport { LoadingPlaceholder, Button } from '@grafana/ui';\n\nexport interface Props {\n  user: User;\n  orgs: UserOrg[];\n  isLoading: boolean;\n  loadOrgs: () => void;\n  setUserOrg: (org: UserOrg) => void;\n}\n\nexport class UserOrganizations extends PureComponent<Props> {\n  componentDidMount() {\n    this.props.loadOrgs();\n  }\n\n  render() {\n    const { isLoading, orgs, user } = this.props;\n\n    if (isLoading) {\n      return <LoadingPlaceholder text=\"Loading organizations...\" />;\n    }\n\n    return (\n      <>\n        {orgs.length > 0 && (\n          <>\n            <h3 className=\"page-sub-heading\">Organizations</h3>\n            <div className=\"gf-form-group\">\n              <table className=\"filter-table form-inline\">\n                <thead>\n                  <tr>\n                    <th>Name</th>\n                    <th>Role</th>\n                    <th />\n                  </tr>\n                </thead>\n                <tbody>\n                  {orgs.map((org: UserOrg, index) => {\n                    return (\n                      <tr key={index}>\n                        <td>{org.name}</td>\n                        <td>{org.role}</td>\n                        <td className=\"text-right\">\n                          {org.orgId === user.orgId ? (\n                            <span className=\"btn btn-primary btn-small\">Current</span>\n                          ) : (\n                            <Button\n                              variant=\"secondary\"\n                              size=\"sm\"\n                              onClick={() => {\n                                this.props.setUserOrg(org);\n                              }}\n                            >\n                              Select\n                            </Button>\n                          )}\n                        </td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            </div>\n          </>\n        )}\n      </>\n    );\n  }\n}\n\nexport default UserOrganizations;\n","import React, { FC } from 'react';\nimport { Button, Tooltip, Icon, Form, Input, Field, FieldSet } from '@grafana/ui';\nimport { User } from 'app/types';\nimport config from 'app/core/config';\nimport { ProfileUpdateFields } from 'app/core/utils/UserProvider';\n\nexport interface Props {\n  user: User;\n  isSavingUser: boolean;\n  updateProfile: (payload: ProfileUpdateFields) => void;\n}\n\nconst { disableLoginForm } = config;\n\nexport const UserProfileEditForm: FC<Props> = ({ user, isSavingUser, updateProfile }) => {\n  const onSubmitProfileUpdate = (data: ProfileUpdateFields) => {\n    updateProfile(data);\n  };\n\n  return (\n    <Form onSubmit={onSubmitProfileUpdate} validateOn=\"onBlur\">\n      {({ register, errors }) => {\n        return (\n          <FieldSet label=\"Edit Profile\">\n            <Field label=\"Name\" invalid={!!errors.name} error=\"Name is required\">\n              <Input name=\"name\" ref={register({ required: true })} placeholder=\"Name\" defaultValue={user.name} />\n            </Field>\n            <Field label=\"Email\" invalid={!!errors.email} error=\"Email is required\" disabled={disableLoginForm}>\n              <Input\n                name=\"email\"\n                ref={register({ required: true })}\n                placeholder=\"Email\"\n                defaultValue={user.email}\n                suffix={<InputSuffix />}\n              />\n            </Field>\n            <Field label=\"Username\" disabled={disableLoginForm}>\n              <Input\n                name=\"login\"\n                ref={register}\n                defaultValue={user.login}\n                placeholder=\"Username\"\n                suffix={<InputSuffix />}\n              />\n            </Field>\n            <div className=\"gf-form-button-row\">\n              <Button variant=\"primary\" disabled={isSavingUser}>\n                Save\n              </Button>\n            </div>\n          </FieldSet>\n        );\n      }}\n    </Form>\n  );\n};\n\nexport default UserProfileEditForm;\n\nconst InputSuffix: FC = () => {\n  return disableLoginForm ? (\n    <Tooltip content=\"Login Details Locked - managed in another system.\">\n      <Icon name=\"lock\" />\n    </Tooltip>\n  ) : null;\n};\n","import React, { PureComponent } from 'react';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { User, Team, UserOrg, UserSession } from 'app/types';\nimport { config } from 'app/core/config';\nimport { dateTimeFormat, dateTimeFormatTimeAgo } from '@grafana/data';\n\nexport interface UserAPI {\n  changePassword: (changePassword: ChangePasswordFields) => void;\n  updateUserProfile: (profile: ProfileUpdateFields) => void;\n  loadUser: () => void;\n  loadTeams: () => void;\n  loadOrgs: () => void;\n  loadSessions: () => void;\n  setUserOrg: (org: UserOrg) => void;\n  revokeUserSession: (tokenId: number) => void;\n}\n\nexport interface LoadingStates {\n  changePassword: boolean;\n  loadUser: boolean;\n  loadTeams: boolean;\n  loadOrgs: boolean;\n  loadSessions: boolean;\n  updateUserProfile: boolean;\n  updateUserOrg: boolean;\n}\n\nexport interface ChangePasswordFields {\n  oldPassword: string;\n  newPassword: string;\n  confirmNew: string;\n}\n\nexport interface ProfileUpdateFields {\n  name: string;\n  email: string;\n  login: string;\n}\n\nexport interface Props {\n  userId?: number; // passed, will load user on mount\n  children: (\n    api: UserAPI,\n    states: LoadingStates,\n    teams: Team[],\n    orgs: UserOrg[],\n    sessions: UserSession[],\n    user?: User\n  ) => JSX.Element;\n}\n\nexport interface State {\n  user?: User;\n  teams: Team[];\n  orgs: UserOrg[];\n  sessions: UserSession[];\n  loadingStates: LoadingStates;\n}\n\nexport class UserProvider extends PureComponent<Props, State> {\n  state: State = {\n    teams: [] as Team[],\n    orgs: [] as UserOrg[],\n    sessions: [] as UserSession[],\n    loadingStates: {\n      changePassword: false,\n      loadUser: true,\n      loadTeams: false,\n      loadOrgs: false,\n      loadSessions: false,\n      updateUserProfile: false,\n      updateUserOrg: false,\n    },\n  };\n\n  componentWillMount() {\n    if (this.props.userId) {\n      this.loadUser();\n    }\n  }\n\n  changePassword = async (payload: ChangePasswordFields) => {\n    this.setState({ loadingStates: { ...this.state.loadingStates, changePassword: true } });\n    await getBackendSrv().put('/api/user/password', payload);\n    this.setState({ loadingStates: { ...this.state.loadingStates, changePassword: false } });\n  };\n\n  loadUser = async () => {\n    this.setState({\n      loadingStates: { ...this.state.loadingStates, loadUser: true },\n    });\n    const user = await getBackendSrv().get('/api/user');\n    this.setState({ user, loadingStates: { ...this.state.loadingStates, loadUser: Object.keys(user).length === 0 } });\n  };\n\n  loadTeams = async () => {\n    this.setState({\n      loadingStates: { ...this.state.loadingStates, loadTeams: true },\n    });\n    const teams = await getBackendSrv().get('/api/user/teams');\n    this.setState({ teams, loadingStates: { ...this.state.loadingStates, loadTeams: false } });\n  };\n\n  loadOrgs = async () => {\n    this.setState({\n      loadingStates: { ...this.state.loadingStates, loadOrgs: true },\n    });\n    const orgs = await getBackendSrv().get('/api/user/orgs');\n    this.setState({ orgs, loadingStates: { ...this.state.loadingStates, loadOrgs: false } });\n  };\n\n  loadSessions = async () => {\n    this.setState({\n      loadingStates: { ...this.state.loadingStates, loadSessions: true },\n    });\n\n    await getBackendSrv()\n      .get('/api/user/auth-tokens')\n      .then((sessions: UserSession[]) => {\n        sessions = sessions\n          // Show active sessions first\n          .sort((a, b) => Number(b.isActive) - Number(a.isActive))\n          .map((session: UserSession) => {\n            return {\n              id: session.id,\n              isActive: session.isActive,\n              seenAt: dateTimeFormatTimeAgo(session.seenAt),\n              createdAt: dateTimeFormat(session.createdAt, { format: 'MMMM DD, YYYY' }),\n              clientIp: session.clientIp,\n              browser: session.browser,\n              browserVersion: session.browserVersion,\n              os: session.os,\n              osVersion: session.osVersion,\n              device: session.device,\n            };\n          });\n\n        this.setState({ sessions, loadingStates: { ...this.state.loadingStates, loadSessions: false } });\n      });\n  };\n\n  revokeUserSession = async (tokenId: number) => {\n    await getBackendSrv()\n      .post('/api/user/revoke-auth-token', {\n        authTokenId: tokenId,\n      })\n      .then(() => {\n        const sessions = this.state.sessions.filter((session: UserSession) => {\n          return session.id !== tokenId;\n        });\n\n        this.setState({ sessions });\n      });\n  };\n\n  setUserOrg = async (org: UserOrg) => {\n    this.setState({\n      loadingStates: { ...this.state.loadingStates, updateUserOrg: true },\n    });\n    await getBackendSrv()\n      .post('/api/user/using/' + org.orgId, {})\n      .then(() => {\n        window.location.href = config.appSubUrl + '/profile';\n      })\n      .finally(() => {\n        this.setState({ loadingStates: { ...this.state.loadingStates, updateUserOrg: false } });\n      });\n  };\n\n  updateUserProfile = async (payload: ProfileUpdateFields) => {\n    this.setState({ loadingStates: { ...this.state.loadingStates, updateUserProfile: true } });\n    await getBackendSrv()\n      .put('/api/user', payload)\n      .then(this.loadUser)\n      .catch(e => console.error(e))\n      .finally(() => {\n        this.setState({ loadingStates: { ...this.state.loadingStates, updateUserProfile: false } });\n      });\n  };\n\n  render() {\n    const { children } = this.props;\n    const { loadingStates, teams, orgs, sessions, user } = this.state;\n\n    const api: UserAPI = {\n      changePassword: this.changePassword,\n      loadUser: this.loadUser,\n      loadTeams: this.loadTeams,\n      loadOrgs: this.loadOrgs,\n      loadSessions: this.loadSessions,\n      revokeUserSession: this.revokeUserSession,\n      updateUserProfile: this.updateUserProfile,\n      setUserOrg: this.setUserOrg,\n    };\n\n    return <>{children(api, loadingStates, teams, orgs, sessions, user)}</>;\n  }\n}\n\nexport default UserProvider;\n","import React, { PureComponent } from 'react';\nimport { Team } from 'app/types';\nimport { LoadingPlaceholder } from '@grafana/ui';\n\nexport interface Props {\n  teams: Team[];\n  isLoading: boolean;\n  loadTeams: () => void;\n}\n\nexport class UserTeams extends PureComponent<Props> {\n  componentDidMount() {\n    this.props.loadTeams();\n  }\n\n  render() {\n    const { isLoading, teams } = this.props;\n\n    if (isLoading) {\n      return <LoadingPlaceholder text=\"Loading teams...\" />;\n    }\n\n    return (\n      <>\n        {teams.length > 0 && (\n          <>\n            <h3 className=\"page-sub-heading\">Teams</h3>\n            <div className=\"gf-form-group\">\n              <table className=\"filter-table form-inline\">\n                <thead>\n                  <tr>\n                    <th />\n                    <th>Name</th>\n                    <th>Email</th>\n                    <th>Members</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {teams.map((team: Team, index) => {\n                    return (\n                      <tr key={index}>\n                        <td className=\"width-4 text-center\">\n                          <img className=\"filter-table__avatar\" src={team.avatarUrl} />\n                        </td>\n                        <td>{team.name}</td>\n                        <td>{team.email}</td>\n                        <td>{team.memberCount}</td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            </div>\n          </>\n        )}\n      </>\n    );\n  }\n}\n\nexport default UserTeams;\n","import React, { PureComponent } from 'react';\nimport { css } from 'emotion';\n\nimport {\n  Select,\n  Field,\n  Form,\n  Tooltip,\n  Icon,\n  stylesFactory,\n  Label,\n  Button,\n  RadioButtonGroup,\n  FieldSet,\n  TimeZonePicker,\n} from '@grafana/ui';\nimport { SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport { DashboardSearchHit, DashboardSearchItemType } from 'app/features/search/types';\nimport { backendSrv } from 'app/core/services/backend_srv';\n\nexport interface Props {\n  resourceUri: string;\n}\n\nexport interface State {\n  homeDashboardId: number;\n  theme: string;\n  timezone: string;\n  dashboards: DashboardSearchHit[];\n}\n\nconst themes: SelectableValue[] = [\n  { value: '', label: 'Default' },\n  { value: 'dark', label: 'Dark' },\n  { value: 'light', label: 'Light' },\n];\n\nexport class SharedPreferences extends PureComponent<Props, State> {\n  backendSrv = backendSrv;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      homeDashboardId: 0,\n      theme: '',\n      timezone: '',\n      dashboards: [],\n    };\n  }\n\n  async componentDidMount() {\n    const prefs = await backendSrv.get(`/api/${this.props.resourceUri}/preferences`);\n    const dashboards = await backendSrv.search({ starred: true });\n    const defaultDashboardHit: DashboardSearchHit = {\n      id: 0,\n      title: 'Default',\n      tags: [],\n      type: '' as DashboardSearchItemType,\n      uid: '',\n      uri: '',\n      url: '',\n      folderId: 0,\n      folderTitle: '',\n      folderUid: '',\n      folderUrl: '',\n      isStarred: false,\n      slug: '',\n      items: [],\n    };\n\n    if (prefs.homeDashboardId > 0 && !dashboards.find(d => d.id === prefs.homeDashboardId)) {\n      const missing = await backendSrv.search({ dashboardIds: [prefs.homeDashboardId] });\n      if (missing && missing.length > 0) {\n        dashboards.push(missing[0]);\n      }\n    }\n\n    this.setState({\n      homeDashboardId: prefs.homeDashboardId,\n      theme: prefs.theme,\n      timezone: prefs.timezone,\n      dashboards: [defaultDashboardHit, ...dashboards],\n    });\n  }\n\n  onSubmitForm = async () => {\n    const { homeDashboardId, theme, timezone } = this.state;\n\n    await backendSrv.put(`/api/${this.props.resourceUri}/preferences`, {\n      homeDashboardId,\n      theme,\n      timezone,\n    });\n    window.location.reload();\n  };\n\n  onThemeChanged = (value: string) => {\n    this.setState({ theme: value });\n  };\n\n  onTimeZoneChanged = (timezone: string) => {\n    if (!timezone) {\n      return;\n    }\n    this.setState({ timezone: timezone });\n  };\n\n  onHomeDashboardChanged = (dashboardId: number) => {\n    this.setState({ homeDashboardId: dashboardId });\n  };\n\n  getFullDashName = (dashboard: DashboardSearchHit) => {\n    if (typeof dashboard.folderTitle === 'undefined' || dashboard.folderTitle === '') {\n      return dashboard.title;\n    }\n    return dashboard.folderTitle + ' / ' + dashboard.title;\n  };\n\n  render() {\n    const { theme, timezone, homeDashboardId, dashboards } = this.state;\n    const styles = getStyles();\n\n    return (\n      <Form onSubmit={this.onSubmitForm}>\n        {() => {\n          return (\n            <FieldSet label=\"Preferences\">\n              <Field label=\"UI Theme\">\n                <RadioButtonGroup\n                  options={themes}\n                  value={themes.find(item => item.value === theme)?.value}\n                  onChange={this.onThemeChanged}\n                />\n              </Field>\n\n              <Field\n                label={\n                  <Label>\n                    <span className={styles.labelText}>Home Dashboard</span>\n                    <Tooltip content=\"Not finding dashboard you want? Star it first, then it should appear in this select box.\">\n                      <Icon name=\"info-circle\" />\n                    </Tooltip>\n                  </Label>\n                }\n              >\n                <Select\n                  value={dashboards.find(dashboard => dashboard.id === homeDashboardId)}\n                  getOptionValue={i => i.id}\n                  getOptionLabel={this.getFullDashName}\n                  onChange={(dashboard: DashboardSearchHit) => this.onHomeDashboardChanged(dashboard.id)}\n                  options={dashboards}\n                  placeholder=\"Choose default dashboard\"\n                />\n              </Field>\n\n              <Field label=\"Timezone\" aria-label={selectors.components.TimeZonePicker.container}>\n                <TimeZonePicker includeInternal={true} value={timezone} onChange={this.onTimeZoneChanged} />\n              </Field>\n              <div className=\"gf-form-button-row\">\n                <Button variant=\"primary\">Save</Button>\n              </div>\n            </FieldSet>\n          );\n        }}\n      </Form>\n    );\n  }\n}\n\nexport default SharedPreferences;\n\nconst getStyles = stylesFactory(() => {\n  return {\n    labelText: css`\n      margin-right: 6px;\n    `,\n  };\n});\n","import React, { PureComponent } from 'react';\nimport { User, UserSession } from 'app/types';\nimport { LoadingPlaceholder, Button, Icon } from '@grafana/ui';\n\nexport interface Props {\n  user: User;\n  sessions: UserSession[];\n  isLoading: boolean;\n  loadSessions: () => void;\n  revokeUserSession: (tokenId: number) => void;\n}\n\nexport class UserSessions extends PureComponent<Props> {\n  componentDidMount() {\n    this.props.loadSessions();\n  }\n\n  render() {\n    const { isLoading, sessions, revokeUserSession } = this.props;\n\n    if (isLoading) {\n      return <LoadingPlaceholder text=\"Loading sessions...\" />;\n    }\n\n    return (\n      <>\n        {sessions.length > 0 && (\n          <>\n            <h3 className=\"page-sub-heading\">Sessions</h3>\n            <div className=\"gf-form-group\">\n              <table className=\"filter-table form-inline\">\n                <thead>\n                  <tr>\n                    <th>Last seen</th>\n                    <th>Logged on</th>\n                    <th>IP address</th>\n                    <th>Browser &amp; OS</th>\n                    <th></th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {sessions.map((session: UserSession, index) => (\n                    <tr key={index}>\n                      {session.isActive ? <td>Now</td> : <td>{session.seenAt}</td>}\n                      <td>{session.createdAt}</td>\n                      <td>{session.clientIp}</td>\n                      <td>\n                        {session.browser} on {session.os} {session.osVersion}\n                      </td>\n                      <td>\n                        <Button size=\"sm\" variant=\"destructive\" onClick={() => revokeUserSession(session.id)}>\n                          <Icon name=\"power\" />\n                        </Button>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </>\n        )}\n      </>\n    );\n  }\n}\n\nexport default UserSessions;\n"],"sourceRoot":""}