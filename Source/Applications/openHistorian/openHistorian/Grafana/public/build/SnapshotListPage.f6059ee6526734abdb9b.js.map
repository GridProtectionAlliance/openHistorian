{"version":3,"file":"SnapshotListPage.f6059ee6526734abdb9b.js","mappings":"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","sources":["webpack://grafana/./public/app/features/manage-dashboards/components/SnapshotListTableRow.tsx","webpack://grafana/./public/app/features/manage-dashboards/components/SnapshotListTable.tsx","webpack://grafana/./public/app/features/manage-dashboards/SnapshotListPage.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport Skeleton from 'react-loading-skeleton';\n\nimport { Button, LinkButton, useStyles2 } from '@grafana/ui';\nimport { SkeletonComponent, attachSkeleton } from '@grafana/ui/src/unstable';\nimport { Trans } from 'app/core/internationalization';\nimport { Snapshot } from 'app/features/dashboard/services/SnapshotSrv';\n\nexport interface Props {\n  snapshot: Snapshot;\n  onRemove: () => void;\n}\n\nconst SnapshotListTableRowComponent = ({ snapshot, onRemove }: Props) => {\n  const url = snapshot.externalUrl || snapshot.url;\n  return (\n    <tr>\n      <td>\n        <a href={url}>{snapshot.name}</a>\n      </td>\n      <td>\n        <a href={url}>{url}</a>\n      </td>\n      <td>\n        {snapshot.external && (\n          <span className=\"query-keyword\">\n            <Trans i18nKey=\"snapshot.external-badge\">External</Trans>\n          </span>\n        )}\n      </td>\n      <td className=\"text-center\">\n        <LinkButton href={url} variant=\"secondary\" size=\"sm\" icon=\"eye\">\n          <Trans i18nKey=\"snapshot.view-button\">View</Trans>\n        </LinkButton>\n      </td>\n      <td className=\"text-right\">\n        <Button variant=\"destructive\" size=\"sm\" icon=\"times\" onClick={onRemove} />\n      </td>\n    </tr>\n  );\n};\n\nconst SnapshotListTableRowSkeleton: SkeletonComponent = ({ rootProps }) => {\n  const styles = useStyles2(getSkeletonStyles);\n  return (\n    <tr {...rootProps}>\n      <td>\n        <Skeleton width={80} />\n      </td>\n      <td>\n        <Skeleton width={240} />\n      </td>\n      <td></td>\n      <td>\n        <Skeleton width={63} height={24} containerClassName={styles.blockSkeleton} />\n      </td>\n      <td>\n        <Skeleton width={22} height={24} containerClassName={styles.blockSkeleton} />\n      </td>\n    </tr>\n  );\n};\n\nexport const SnapshotListTableRow = attachSkeleton(SnapshotListTableRowComponent, SnapshotListTableRowSkeleton);\n\nconst getSkeletonStyles = () => ({\n  blockSkeleton: css({\n    // needed to align correctly in the table\n    display: 'block',\n    lineHeight: 1,\n  }),\n});\n","import { useState, useCallback } from 'react';\nimport useAsync from 'react-use/lib/useAsync';\n\nimport { config } from '@grafana/runtime';\nimport { ConfirmModal, EmptyState, TextLink } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\nimport { getDashboardSnapshotSrv, Snapshot } from 'app/features/dashboard/services/SnapshotSrv';\n\nimport { SnapshotListTableRow } from './SnapshotListTableRow';\n\nexport async function getSnapshots() {\n  return getDashboardSnapshotSrv()\n    .getSnapshots()\n    .then((result: Snapshot[]) => {\n      return result.map((snapshot) => ({\n        ...snapshot,\n        url: `${config.appUrl}dashboard/snapshot/${snapshot.key}`,\n      }));\n    });\n}\nexport const SnapshotListTable = () => {\n  const [snapshots, setSnapshots] = useState<Snapshot[]>([]);\n  const [isFetching, setIsFetching] = useState(false);\n  const [removeSnapshot, setRemoveSnapshot] = useState<Snapshot | undefined>();\n  useAsync(async () => {\n    setIsFetching(true);\n    const response = await getSnapshots();\n    setIsFetching(false);\n    setSnapshots(response);\n  }, [setSnapshots]);\n\n  const doRemoveSnapshot = useCallback(\n    async (snapshot: Snapshot) => {\n      const filteredSnapshots = snapshots.filter((ss) => ss.key !== snapshot.key);\n      setSnapshots(filteredSnapshots);\n      await getDashboardSnapshotSrv()\n        .deleteSnapshot(snapshot.key)\n        .catch(() => {\n          setSnapshots(snapshots);\n        });\n    },\n    [snapshots]\n  );\n\n  if (!isFetching && snapshots.length === 0) {\n    return (\n      <EmptyState\n        variant=\"call-to-action\"\n        message={t('snapshot.empty-state.message', \"You haven't created any snapshots yet\")}\n      >\n        <Trans i18nKey=\"snapshot.empty-state.more-info\">\n          You can create a snapshot of any dashboard through the <b>Share</b> modal.{' '}\n          <TextLink\n            external\n            href=\"https://grafana.com/docs/grafana/latest/dashboards/share-dashboards-panels/#publish-a-snapshot\"\n          >\n            Learn more\n          </TextLink>\n        </Trans>\n      </EmptyState>\n    );\n  }\n\n  return (\n    <div>\n      <table className=\"filter-table\">\n        <thead>\n          <tr>\n            <th>\n              <strong>\n                <Trans i18nKey=\"snapshot.name-column-header\">Name</Trans>\n              </strong>\n            </th>\n            <th>\n              <strong>\n                <Trans i18nKey=\"snapshot.url-column-header\">Snapshot url</Trans>\n              </strong>\n            </th>\n            <th style={{ width: '70px' }}></th>\n            <th style={{ width: '30px' }}></th>\n            <th style={{ width: '25px' }}></th>\n          </tr>\n        </thead>\n        <tbody>\n          {isFetching ? (\n            <>\n              <SnapshotListTableRow.Skeleton />\n              <SnapshotListTableRow.Skeleton />\n              <SnapshotListTableRow.Skeleton />\n            </>\n          ) : (\n            snapshots.map((snapshot) => (\n              <SnapshotListTableRow\n                key={snapshot.key}\n                snapshot={snapshot}\n                onRemove={() => setRemoveSnapshot(snapshot)}\n              />\n            ))\n          )}\n        </tbody>\n      </table>\n\n      <ConfirmModal\n        isOpen={!!removeSnapshot}\n        icon=\"trash-alt\"\n        title=\"Delete\"\n        body={`Are you sure you want to delete '${removeSnapshot?.name}'?`}\n        confirmText=\"Delete\"\n        onDismiss={() => setRemoveSnapshot(undefined)}\n        onConfirm={() => {\n          doRemoveSnapshot(removeSnapshot!);\n          setRemoveSnapshot(undefined);\n        }}\n      />\n    </div>\n  );\n};\n","import { Page } from 'app/core/components/Page/Page';\n\nimport { SnapshotListTable } from './components/SnapshotListTable';\n\nexport const SnapshotListPage = ({}) => {\n  return (\n    <Page navId=\"dashboards/snapshots\">\n      <Page.Contents>\n        <SnapshotListTable />\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default SnapshotListPage;\n"],"names":["SnapshotListTableRowComponent","snapshot","onRemove","url","Button","SnapshotListTableRowSkeleton","rootProps","styles","getSkeletonStyles","SnapshotListTableRow","getSnapshots","result","config","SnapshotListTable","snapshots","setSnapshots","isFetching","setIsFetching","removeSnapshot","setRemoveSnapshot","useAsync","response","doRemoveSnapshot","filteredSnapshots","ss","EmptyState","TextLink","ConfirmModal","SnapshotListPage","Page"],"sourceRoot":""}