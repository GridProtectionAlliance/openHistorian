{"version":3,"sources":["webpack:///./public/app/features/org/OrgProfile.tsx","webpack:///./public/app/features/org/OrgDetailsPage.tsx","webpack:///./public/app/features/org/state/actions.ts"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_grafana_ui__WEBPACK_IMPORTED_MODULE_1__","__webpack_exports__","_a","onSubmit","onOrgNameChange","orgName","a","createElement","className","name","event","preventDefault","type","onChange","target","value","OrgDetailsPage","_super","_this","apply","this","arguments","props","setOrganizationName","onUpdateOrganization","updateOrganization","Object","tslib__WEBPACK_IMPORTED_MODULE_0__","prototype","componentDidMount","loadOrganization","sent","render","navModel","organization","isLoading","keys","length","react__WEBPACK_IMPORTED_MODULE_1___default","app_core_components_Page_Page__WEBPACK_IMPORTED_MODULE_4__","Contents","_OrgProfile__WEBPACK_IMPORTED_MODULE_5__","app_core_components_SharedPreferences_SharedPreferences__WEBPACK_IMPORTED_MODULE_6__","resourceUri","react__WEBPACK_IMPORTED_MODULE_1__","mapDispatchToProps","_state_actions__WEBPACK_IMPORTED_MODULE_7__","_state_reducers__WEBPACK_IMPORTED_MODULE_9__","react_hot_loader__WEBPACK_IMPORTED_MODULE_2__","module","react_redux__WEBPACK_IMPORTED_MODULE_3__","state","app_core_selectors_navModel__WEBPACK_IMPORTED_MODULE_8__","navIndex","dispatch","_grafana_runtime__WEBPACK_IMPORTED_MODULE_1__","get","organizationResponse","_reducers__WEBPACK_IMPORTED_MODULE_2__","getStore","put"],"mappings":"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","file":"OrgDetailsPage.4d0490a94b199a11f40c.js","sourcesContent":["import React, { ChangeEvent, FC } from 'react';\nimport { Input } from '@grafana/ui';\n\nexport interface Props {\n  orgName: string;\n  onSubmit: () => void;\n  onOrgNameChange: (orgName: string) => void;\n}\n\nconst OrgProfile: FC<Props> = ({ onSubmit, onOrgNameChange, orgName }) => {\n  return (\n    <div>\n      <h3 className=\"page-sub-heading\">Organization profile</h3>\n      <form\n        name=\"orgForm\"\n        className=\"gf-form-group\"\n        onSubmit={event => {\n          event.preventDefault();\n          onSubmit();\n        }}\n      >\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form max-width-28\">\n            <span className=\"gf-form-label\">Organization name</span>\n            <Input\n              className=\"gf-form-input\"\n              type=\"text\"\n              onChange={(event: ChangeEvent<HTMLInputElement>) => onOrgNameChange(event.target.value)}\n              value={orgName}\n            />\n          </div>\n        </div>\n        <div className=\"gf-form-button-row\">\n          <button type=\"submit\" className=\"btn btn-primary\">\n            Save\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default OrgProfile;\n","import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport { NavModel } from '@grafana/data';\n\nimport Page from 'app/core/components/Page/Page';\nimport OrgProfile from './OrgProfile';\nimport SharedPreferences from 'app/core/components/SharedPreferences/SharedPreferences';\nimport { loadOrganization, updateOrganization } from './state/actions';\nimport { Organization, StoreState } from 'app/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { setOrganizationName } from './state/reducers';\n\nexport interface Props {\n  navModel: NavModel;\n  organization: Organization;\n  loadOrganization: typeof loadOrganization;\n  setOrganizationName: typeof setOrganizationName;\n  updateOrganization: typeof updateOrganization;\n}\n\nexport class OrgDetailsPage extends PureComponent<Props> {\n  async componentDidMount() {\n    await this.props.loadOrganization();\n  }\n\n  onOrgNameChange = (name: string) => {\n    this.props.setOrganizationName(name);\n  };\n\n  onUpdateOrganization = () => {\n    this.props.updateOrganization();\n  };\n\n  render() {\n    const { navModel, organization } = this.props;\n    const isLoading = Object.keys(organization).length === 0;\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={isLoading}>\n          {!isLoading && (\n            <div>\n              <OrgProfile\n                onOrgNameChange={name => this.onOrgNameChange(name)}\n                onSubmit={this.onUpdateOrganization}\n                orgName={organization.name}\n              />\n              <SharedPreferences resourceUri=\"org\" />\n            </div>\n          )}\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, 'org-settings'),\n    organization: state.organization.organization,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadOrganization,\n  setOrganizationName,\n  updateOrganization,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(OrgDetailsPage));\n","import { ThunkResult } from 'app/types';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { organizationLoaded } from './reducers';\n\nexport function loadOrganization(): ThunkResult<any> {\n  return async dispatch => {\n    const organizationResponse = await getBackendSrv().get('/api/org');\n    dispatch(organizationLoaded(organizationResponse));\n\n    return organizationResponse;\n  };\n}\n\nexport function updateOrganization(): ThunkResult<any> {\n  return async (dispatch, getStore) => {\n    const organization = getStore().organization.organization;\n\n    await getBackendSrv().put('/api/org', { name: organization.name });\n\n    dispatch(loadOrganization());\n  };\n}\n"],"sourceRoot":""}