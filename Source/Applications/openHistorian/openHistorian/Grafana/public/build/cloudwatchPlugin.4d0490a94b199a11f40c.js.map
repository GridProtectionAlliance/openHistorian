{"version":3,"sources":["webpack:///./public/app/plugins/datasource/cloudwatch/query_parameter_ctrl.ts","webpack:///./public/app/plugins/datasource/cloudwatch/components/ConfigEditor.tsx","webpack:///./public/app/plugins/datasource/cloudwatch/components/QueryEditor.tsx","webpack:///./public/app/plugins/datasource/cloudwatch/components/ThrottlingErrorMessage.tsx","webpack:///./public/app/plugins/datasource/cloudwatch/memoizedDebounce.ts","webpack:///./public/app/plugins/datasource/cloudwatch/datasource.ts","webpack:///./public/app/plugins/datasource/cloudwatch/annotations_query_ctrl.ts","webpack:///./public/app/plugins/datasource/cloudwatch/module.tsx","webpack:///./public/app/core/utils/CancelablePromise.ts"],"names":["query_parameter_ctrl_CloudWatchQueryParameterCtrl","CloudWatchQueryParameterCtrl","$scope","templateSrv","uiSegmentSrv","datasourceSrv","init","target","namespace","metricName","statistics","dimensions","period","region","id","expression","regionSegment","getSegmentForValue","namespaceSegment","metricSegment","dimSegments","lodash_default","a","reduce","memo","value","key","push","newKey","newOperator","newKeyValue","statSegments","map","stat","ensurePlusButton","removeDimSegment","newSegment","fake","removeStatSegment","isEmpty","onChange","getStatSegments","Promise","resolve","flatten","angular_default","copy","datasource","standardStatistics","s","statSegmentChanged","segment","index","splice","type","seg","segments","count","length","lastSegment","Math","max","newPlusButton","getDimSegments","$index","query","getDimensionKeys","dimensionKey","getDimensionValues","then","transformToSegments","results","dimSegmentChanged","newFake","cssClass","syncDimSegmentsWithModel","dims","i","keySegment","valueSegment","getRegions","metricFindQuery","unshift","text","getNamespaces","getMetrics","regionChanged","namespaceChanged","metricChanged","addTemplateVars","expandable","each","variables","variable","name","$inject","templateUrl","controller","restrict","authProviderOptions","label","ConfigEditor_ConfigEditor","_super","ConfigEditor","props","_this","call","this","loadRegionsPromise","state","regions","Object","tslib_es6","prototype","componentDidMount","CancelablePromise","loadRegions","promise","catch","_a","isCanceled","console","warn","componentWillUnmount","cancel","datasource_srv","loadDatasource","options","ds","setState","err","render","secureJsonData","react_default","createElement","Fragment","className","grafana_ui_src","find","authProvider","jsonData","authType","defaultValue","src","tooltip","placeholder","database","secureJsonFields","accessKey","disabled","variant","onClick","secretKey","assumeRoleArn","defaultRegion","customMetricsNamespaces","idValidationEvents","QueryEditor_a","onBlur","rule","RegExp","test","errorMessage","QueryEditor_QueryEditor","QueryEditor","apply","arguments","getDerivedStateFromProps","alias","hasOwnProperty","matchExact","onRunQuery","data","showMeta","metaDataExist","values","components","event","validationEvents","labelClass","checked","series","meta","gmdMeta","ID","Expression","Period","href","memoizedDebounce","func","wait","mem","lodash","_i","leading","JSON","stringify","args","displayAlert","datasourceName","store","dispatch","actions","appNotification","ThrottlingErrorMessage","displayCustomError","title","message","CloudWatchDatasource","instanceSettings","backendSrv","timeSrv","proxyUrl","url","debouncedCustomAlert","types","Error","filter","targets","item","hide","replace","getActualRegion","scopedVars","convertDimensionFormat","String","getPeriod","some","indexOf","matches","exec","extend","refId","intervalMs","maxDataPoints","datasourceId","queries","request","from","range","valueOf","toString","to","performTimeSeriesQuery","get","enumerable","configurable","toLowerCase","parseInt","kbn","interval_to_seconds","buildCloudwatchConsoleUrl","start","end","conf","view","stacked","isSearchExpression","every","metrics","entries","acc","_b","encodeURIComponent","awsRequest","res","queryRequest","error","queryResult","link","toISOString","e_1","points","dataFrame","datapoints","_c","fields","_d","next","done","links","targetBlank","keys","failedRedIds_1","includes","forEach","debouncedAlert","transformSuggestDataFromTable","suggestData","tables","rows","v","doMetricQueryRequest","subtype","parameters","timeRange","r","trim","getEbsVolumeIds","instanceId","getEc2InstanceAttribute","attributeName","filters","getResourceARNs","resourceType","tags","filterJson","metricNameQuery","dimensionKeysQuery","dimensionValuesQuery","ebsVolumeIdsQuery","ec2InstanceAttributeQuery","targetAttributeName","resourceARNsQuery","tagsJSON","match","parse","annotationQuery","annotation","defaultPeriod","prefixMatching","actionPrefix","alarmNamePrefix","time","Date","targetContainsTemplate","variableExists","k","testDatasource","status","method","datasourceRequest","result","getDefaultRegion","convertToCloudWatchTime","date","roundUp","isString","round","_e","_f","Array","isArray","valueVar","getVariableName","multi","split","displayErrorIfIsMultiTemplateVariable","fieldName","annotations_query_ctrl_CloudWatchAnnotationsQueryCtrl","CloudWatchAnnotationsQueryCtrl","defaultsDeep","bind","assign","__webpack_require__","d","__webpack_exports__","module_plugin","setConfigEditor","setQueryEditor","makePromiseCancelable","hasCanceled_","reject","val"],"mappings":"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","file":"cloudwatchPlugin.4d0490a94b199a11f40c.js","sourcesContent":["import angular from 'angular';\nimport coreModule from 'app/core/core_module';\nimport _ from 'lodash';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport DatasourceSrv from 'app/features/plugins/datasource_srv';\n\nexport class CloudWatchQueryParameterCtrl {\n  /** @ngInject */\n  constructor($scope: any, templateSrv: TemplateSrv, uiSegmentSrv: any, datasourceSrv: DatasourceSrv) {\n    $scope.init = () => {\n      const target = $scope.target;\n      target.namespace = target.namespace || '';\n      target.metricName = target.metricName || '';\n      target.statistics = target.statistics || ['Average'];\n      target.dimensions = target.dimensions || {};\n      target.period = target.period || '';\n      target.region = target.region || 'default';\n      target.id = target.id || '';\n      target.expression = target.expression || '';\n\n      $scope.regionSegment = uiSegmentSrv.getSegmentForValue($scope.target.region, 'select region');\n      $scope.namespaceSegment = uiSegmentSrv.getSegmentForValue($scope.target.namespace, 'select namespace');\n      $scope.metricSegment = uiSegmentSrv.getSegmentForValue($scope.target.metricName, 'select metric');\n\n      $scope.dimSegments = _.reduce(\n        $scope.target.dimensions,\n        (memo, value, key) => {\n          memo.push(uiSegmentSrv.newKey(key));\n          memo.push(uiSegmentSrv.newOperator('='));\n          memo.push(uiSegmentSrv.newKeyValue(value));\n          return memo;\n        },\n        []\n      );\n\n      $scope.statSegments = _.map($scope.target.statistics, stat => {\n        return uiSegmentSrv.getSegmentForValue(stat);\n      });\n\n      $scope.ensurePlusButton($scope.statSegments);\n      $scope.ensurePlusButton($scope.dimSegments);\n      $scope.removeDimSegment = uiSegmentSrv.newSegment({\n        fake: true,\n        value: '-- remove dimension --',\n      });\n      $scope.removeStatSegment = uiSegmentSrv.newSegment({\n        fake: true,\n        value: '-- remove stat --',\n      });\n\n      if (_.isEmpty($scope.target.region)) {\n        $scope.target.region = 'default';\n      }\n\n      if (!$scope.onChange) {\n        $scope.onChange = () => {};\n      }\n    };\n\n    $scope.getStatSegments = () => {\n      return Promise.resolve(\n        _.flatten([\n          angular.copy($scope.removeStatSegment),\n          _.map($scope.datasource.standardStatistics, s => {\n            return uiSegmentSrv.getSegmentForValue(s);\n          }),\n          uiSegmentSrv.getSegmentForValue('pNN.NN'),\n        ])\n      );\n    };\n\n    $scope.statSegmentChanged = (segment: any, index: number) => {\n      if (segment.value === $scope.removeStatSegment.value) {\n        $scope.statSegments.splice(index, 1);\n      } else {\n        segment.type = 'value';\n      }\n\n      $scope.target.statistics = _.reduce(\n        $scope.statSegments,\n        (memo, seg) => {\n          if (!seg.fake) {\n            memo.push(seg.value);\n          }\n          return memo;\n        },\n        []\n      );\n\n      $scope.ensurePlusButton($scope.statSegments);\n      $scope.onChange();\n    };\n\n    $scope.ensurePlusButton = (segments: any) => {\n      const count = segments.length;\n      const lastSegment = segments[Math.max(count - 1, 0)];\n\n      if (!lastSegment || lastSegment.type !== 'plus-button') {\n        segments.push(uiSegmentSrv.newPlusButton());\n      }\n    };\n\n    $scope.getDimSegments = (segment: any, $index: number) => {\n      if (segment.type === 'operator') {\n        return Promise.resolve([]);\n      }\n\n      const target = $scope.target;\n      let query = Promise.resolve([]);\n\n      if (segment.type === 'key' || segment.type === 'plus-button') {\n        query = $scope.datasource.getDimensionKeys($scope.target.namespace, $scope.target.region);\n      } else if (segment.type === 'value') {\n        const dimensionKey = $scope.dimSegments[$index - 2].value;\n        delete target.dimensions[dimensionKey];\n        query = $scope.datasource.getDimensionValues(\n          target.region,\n          target.namespace,\n          target.metricName,\n          dimensionKey,\n          target.dimensions\n        );\n      }\n\n      return query.then($scope.transformToSegments(true)).then(results => {\n        if (segment.type === 'key') {\n          results.splice(0, 0, angular.copy($scope.removeDimSegment));\n        }\n        return results;\n      });\n    };\n\n    $scope.dimSegmentChanged = (segment: any, index: number) => {\n      $scope.dimSegments[index] = segment;\n\n      if (segment.value === $scope.removeDimSegment.value) {\n        $scope.dimSegments.splice(index, 3);\n      } else if (segment.type === 'plus-button') {\n        $scope.dimSegments.push(uiSegmentSrv.newOperator('='));\n        $scope.dimSegments.push(uiSegmentSrv.newFake('select dimension value', 'value', 'query-segment-value'));\n        segment.type = 'key';\n        segment.cssClass = 'query-segment-key';\n      }\n\n      $scope.syncDimSegmentsWithModel();\n      $scope.ensurePlusButton($scope.dimSegments);\n      $scope.onChange();\n    };\n\n    $scope.syncDimSegmentsWithModel = () => {\n      const dims: any = {};\n      const length = $scope.dimSegments.length;\n\n      for (let i = 0; i < length - 2; i += 3) {\n        const keySegment = $scope.dimSegments[i];\n        const valueSegment = $scope.dimSegments[i + 2];\n        if (!valueSegment.fake) {\n          dims[keySegment.value] = valueSegment.value;\n        }\n      }\n\n      $scope.target.dimensions = dims;\n    };\n\n    $scope.getRegions = () => {\n      return $scope.datasource\n        .metricFindQuery('regions()')\n        .then((results: any) => {\n          results.unshift({ text: 'default' });\n          return results;\n        })\n        .then($scope.transformToSegments(true));\n    };\n\n    $scope.getNamespaces = () => {\n      return $scope.datasource.metricFindQuery('namespaces()').then($scope.transformToSegments(true));\n    };\n\n    $scope.getMetrics = () => {\n      return $scope.datasource\n        .metricFindQuery('metrics(' + $scope.target.namespace + ',' + $scope.target.region + ')')\n        .then($scope.transformToSegments(true));\n    };\n\n    $scope.regionChanged = () => {\n      $scope.target.region = $scope.regionSegment.value;\n      $scope.onChange();\n    };\n\n    $scope.namespaceChanged = () => {\n      $scope.target.namespace = $scope.namespaceSegment.value;\n      $scope.onChange();\n    };\n\n    $scope.metricChanged = () => {\n      $scope.target.metricName = $scope.metricSegment.value;\n      $scope.onChange();\n    };\n\n    $scope.transformToSegments = (addTemplateVars: any) => {\n      return (results: any) => {\n        const segments = _.map(results, segment => {\n          return uiSegmentSrv.newSegment({\n            value: segment.text,\n            expandable: segment.expandable,\n          });\n        });\n\n        if (addTemplateVars) {\n          _.each(templateSrv.variables, variable => {\n            segments.unshift(\n              uiSegmentSrv.newSegment({\n                type: 'template',\n                value: '$' + variable.name,\n                expandable: true,\n              })\n            );\n          });\n        }\n\n        return segments;\n      };\n    };\n\n    $scope.init();\n  }\n}\n\nexport function cloudWatchQueryParameter() {\n  return {\n    templateUrl: 'public/app/plugins/datasource/cloudwatch/partials/query.parameter.html',\n    controller: CloudWatchQueryParameterCtrl,\n    restrict: 'E',\n    scope: {\n      target: '=',\n      datasource: '=',\n      onChange: '&',\n    },\n  };\n}\n\ncoreModule.directive('cloudwatchQueryParameter', cloudWatchQueryParameter);\n","import React, { PureComponent } from 'react';\nimport { FormLabel, Select, Input, Button } from '@grafana/ui';\nimport {\n  DataSourcePluginOptionsEditorProps,\n  onUpdateDatasourceJsonDataOptionSelect,\n  onUpdateDatasourceOption,\n  onUpdateDatasourceResetOption,\n  onUpdateDatasourceJsonDataOption,\n  onUpdateDatasourceSecureJsonDataOption,\n} from '@grafana/data';\nimport { SelectableValue } from '@grafana/data';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport CloudWatchDatasource from '../datasource';\nimport { CloudWatchJsonData, CloudWatchSecureJsonData } from '../types';\nimport { CancelablePromise, makePromiseCancelable } from 'app/core/utils/CancelablePromise';\n\nconst authProviderOptions = [\n  { label: 'Access & secret key', value: 'keys' },\n  { label: 'Credentials file', value: 'credentials' },\n  { label: 'ARN', value: 'arn' },\n] as SelectableValue[];\n\nexport type Props = DataSourcePluginOptionsEditorProps<CloudWatchJsonData, CloudWatchSecureJsonData>;\n\nexport interface State {\n  regions: SelectableValue[];\n}\n\nexport class ConfigEditor extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      regions: [],\n    };\n  }\n\n  loadRegionsPromise: CancelablePromise<any> = null;\n\n  componentDidMount() {\n    this.loadRegionsPromise = makePromiseCancelable(this.loadRegions());\n    this.loadRegionsPromise.promise.catch(({ isCanceled }) => {\n      if (isCanceled) {\n        console.warn('Cloud Watch ConfigEditor has unmounted, intialization was canceled');\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    if (this.loadRegionsPromise) {\n      this.loadRegionsPromise.cancel();\n    }\n  }\n\n  async loadRegions() {\n    await getDatasourceSrv()\n      .loadDatasource(this.props.options.name)\n      .then((ds: CloudWatchDatasource) => {\n        return ds.getRegions();\n      })\n      .then(\n        (regions: any) => {\n          this.setState({\n            regions: regions.map((region: any) => {\n              return {\n                value: region.value,\n                label: region.text,\n              };\n            }),\n          });\n        },\n        (err: any) => {\n          const regions = [\n            'ap-east-1',\n            'ap-northeast-1',\n            'ap-northeast-2',\n            'ap-northeast-3',\n            'ap-south-1',\n            'ap-southeast-1',\n            'ap-southeast-2',\n            'ca-central-1',\n            'cn-north-1',\n            'cn-northwest-1',\n            'eu-central-1',\n            'eu-north-1',\n            'eu-west-1',\n            'eu-west-2',\n            'eu-west-3',\n            'me-south-1',\n            'sa-east-1',\n            'us-east-1',\n            'us-east-2',\n            'us-gov-east-1',\n            'us-gov-west-1',\n            'us-iso-east-1',\n            'us-isob-east-1',\n            'us-west-1',\n            'us-west-2',\n          ];\n\n          this.setState({\n            regions: regions.map((region: string) => {\n              return {\n                value: region,\n                label: region,\n              };\n            }),\n          });\n\n          // expected to fail when creating new datasource\n          // console.error('failed to get latest regions', err);\n        }\n      );\n  }\n\n  render() {\n    const { regions } = this.state;\n    const { options } = this.props;\n    const secureJsonData = (options.secureJsonData || {}) as CloudWatchSecureJsonData;\n\n    return (\n      <>\n        <h3 className=\"page-heading\">CloudWatch Details</h3>\n        <div className=\"gf-form-group\">\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <FormLabel className=\"width-14\">Auth Provider</FormLabel>\n              <Select\n                className=\"width-30\"\n                value={authProviderOptions.find(authProvider => authProvider.value === options.jsonData.authType)}\n                options={authProviderOptions}\n                defaultValue={options.jsonData.authType}\n                onChange={onUpdateDatasourceJsonDataOptionSelect(this.props, 'authType')}\n              />\n            </div>\n          </div>\n          {options.jsonData.authType === 'credentials' && (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <FormLabel\n                  className=\"width-14\"\n                  tooltip=\"Credentials profile name, as specified in ~/.aws/credentials, leave blank for default.\"\n                >\n                  Credentials Profile Name\n                </FormLabel>\n                <div className=\"width-30\">\n                  <Input\n                    className=\"width-30\"\n                    placeholder=\"default\"\n                    value={options.jsonData.database}\n                    onChange={onUpdateDatasourceOption(this.props, 'database')}\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n          {options.jsonData.authType === 'keys' && (\n            <div>\n              {options.secureJsonFields.accessKey ? (\n                <div className=\"gf-form-inline\">\n                  <div className=\"gf-form\">\n                    <FormLabel className=\"width-14\">Access Key ID</FormLabel>\n                    <Input className=\"width-25\" placeholder=\"Configured\" disabled={true} />\n                  </div>\n                  <div className=\"gf-form\">\n                    <div className=\"max-width-30 gf-form-inline\">\n                      <Button\n                        variant=\"secondary\"\n                        type=\"button\"\n                        onClick={onUpdateDatasourceResetOption(this.props, 'accessKey')}\n                      >\n                        Reset\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"gf-form-inline\">\n                  <div className=\"gf-form\">\n                    <FormLabel className=\"width-14\">Access Key ID</FormLabel>\n                    <div className=\"width-30\">\n                      <Input\n                        className=\"width-30\"\n                        value={secureJsonData.accessKey || ''}\n                        onChange={onUpdateDatasourceSecureJsonDataOption(this.props, 'accessKey')}\n                      />\n                    </div>\n                  </div>\n                </div>\n              )}\n              {options.secureJsonFields.secretKey ? (\n                <div className=\"gf-form-inline\">\n                  <div className=\"gf-form\">\n                    <FormLabel className=\"width-14\">Secret Access Key</FormLabel>\n                    <Input className=\"width-25\" placeholder=\"Configured\" disabled={true} />\n                  </div>\n                  <div className=\"gf-form\">\n                    <div className=\"max-width-30 gf-form-inline\">\n                      <Button\n                        variant=\"secondary\"\n                        type=\"button\"\n                        onClick={onUpdateDatasourceResetOption(this.props, 'secretKey')}\n                      >\n                        Reset\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"gf-form-inline\">\n                  <div className=\"gf-form\">\n                    <FormLabel className=\"width-14\">Secret Access Key</FormLabel>\n                    <div className=\"width-30\">\n                      <Input\n                        className=\"width-30\"\n                        value={secureJsonData.secretKey || ''}\n                        onChange={onUpdateDatasourceSecureJsonDataOption(this.props, 'secretKey')}\n                      />\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n          {options.jsonData.authType === 'arn' && (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <FormLabel className=\"width-14\" tooltip=\"ARN of Assume Role\">\n                  Assume Role ARN\n                </FormLabel>\n                <div className=\"width-30\">\n                  <Input\n                    className=\"width-30\"\n                    placeholder=\"arn:aws:iam:*\"\n                    value={options.jsonData.assumeRoleArn || ''}\n                    onChange={onUpdateDatasourceJsonDataOption(this.props, 'assumeRoleArn')}\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <FormLabel\n                className=\"width-14\"\n                tooltip=\"Specify the region, such as for US West (Oregon) use ` us-west-2 ` as the region.\"\n              >\n                Default Region\n              </FormLabel>\n              <Select\n                className=\"width-30\"\n                value={regions.find(region => region.value === options.jsonData.defaultRegion)}\n                options={regions}\n                defaultValue={options.jsonData.defaultRegion}\n                onChange={onUpdateDatasourceJsonDataOptionSelect(this.props, 'defaultRegion')}\n              />\n            </div>\n          </div>\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <FormLabel className=\"width-14\" tooltip=\"Namespaces of Custom Metrics.\">\n                Custom Metrics\n              </FormLabel>\n              <Input\n                className=\"width-30\"\n                placeholder=\"Namespace1,Namespace2\"\n                value={options.jsonData.customMetricsNamespaces || ''}\n                onChange={onUpdateDatasourceJsonDataOption(this.props, 'customMetricsNamespaces')}\n              />\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default ConfigEditor;\n","import React, { PureComponent, ChangeEvent } from 'react';\nimport { ExploreQueryFieldProps } from '@grafana/data';\nimport { Input, ValidationEvents, EventsWithValidation, Switch } from '@grafana/ui';\nimport { CloudWatchQuery } from '../types';\nimport CloudWatchDatasource from '../datasource';\nimport { QueryField, Alias, QueryFieldsEditor } from './';\n\nexport type Props = ExploreQueryFieldProps<CloudWatchDatasource, CloudWatchQuery>;\n\ninterface State {\n  showMeta: boolean;\n}\n\nconst idValidationEvents: ValidationEvents = {\n  [EventsWithValidation.onBlur]: [\n    {\n      rule: value => new RegExp(/^$|^[a-z][a-zA-Z0-9_]*$/).test(value),\n      errorMessage: 'Invalid format. Only alphanumeric characters and underscores are allowed',\n    },\n  ],\n};\n\nexport class QueryEditor extends PureComponent<Props, State> {\n  state: State = { showMeta: false };\n\n  static getDerivedStateFromProps(props: Props, state: State) {\n    const { query } = props;\n\n    if (!query.namespace) {\n      query.namespace = '';\n    }\n\n    if (!query.metricName) {\n      query.metricName = '';\n    }\n\n    if (!query.expression) {\n      query.expression = '';\n    }\n\n    if (!query.dimensions) {\n      query.dimensions = {};\n    }\n\n    if (!query.region) {\n      query.region = 'default';\n    }\n\n    if (!query.id) {\n      query.id = '';\n    }\n\n    if (!query.alias) {\n      query.alias = '';\n    }\n\n    if (!query.statistics || !query.statistics.length) {\n      query.statistics = ['Average'];\n    }\n\n    if (!query.hasOwnProperty('matchExact')) {\n      query.matchExact = true;\n    }\n\n    return state;\n  }\n\n  onChange(query: CloudWatchQuery) {\n    const { onChange, onRunQuery } = this.props;\n    onChange(query);\n    onRunQuery();\n  }\n\n  render() {\n    const { data, query, onRunQuery } = this.props;\n    const { showMeta } = this.state;\n    const metaDataExist = data && Object.values(data).length && data.state === 'Done';\n    return (\n      <>\n        <QueryFieldsEditor {...this.props}></QueryFieldsEditor>\n        {query.statistics.length <= 1 && (\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <QueryField\n                label=\"Id\"\n                tooltip=\"Id can include numbers, letters, and underscore, and must start with a lowercase letter.\"\n              >\n                <Input\n                  className=\"gf-form-input width-8\"\n                  onBlur={onRunQuery}\n                  onChange={(event: ChangeEvent<HTMLInputElement>) =>\n                    this.onChange({ ...query, id: event.target.value })\n                  }\n                  validationEvents={idValidationEvents}\n                  value={query.id || ''}\n                />\n              </QueryField>\n            </div>\n            <div className=\"gf-form gf-form--grow\">\n              <QueryField\n                className=\"gf-form--grow\"\n                label=\"Expression\"\n                tooltip=\"Optionally you can add an expression here. Please note that if a math expression that is referencing other queries is being used, it will not be possible to create an alert rule based on this query\"\n              >\n                <Input\n                  className=\"gf-form-input\"\n                  onBlur={onRunQuery}\n                  value={query.expression || ''}\n                  onChange={(event: ChangeEvent<HTMLInputElement>) =>\n                    this.onChange({ ...query, expression: event.target.value })\n                  }\n                />\n              </QueryField>\n            </div>\n          </div>\n        )}\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <QueryField label=\"Period\" tooltip=\"Minimum interval between points in seconds\">\n              <Input\n                className=\"gf-form-input width-8\"\n                value={query.period || ''}\n                placeholder=\"auto\"\n                onBlur={onRunQuery}\n                onChange={(event: ChangeEvent<HTMLInputElement>) =>\n                  this.onChange({ ...query, period: event.target.value })\n                }\n              />\n            </QueryField>\n          </div>\n          <div className=\"gf-form\">\n            <QueryField\n              label=\"Alias\"\n              tooltip=\"Alias replacement variables: {{metric}}, {{stat}}, {{namespace}}, {{region}}, {{period}}, {{label}}, {{YOUR_DIMENSION_NAME}}\"\n            >\n              <Alias value={query.alias} onChange={(value: string) => this.onChange({ ...query, alias: value })} />\n            </QueryField>\n            <Switch\n              label=\"Match Exact\"\n              labelClass=\"query-keyword\"\n              tooltip=\"Only show metrics that exactly match all defined dimension names.\"\n              checked={query.matchExact}\n              onChange={() => this.onChange({ ...query, matchExact: !query.matchExact })}\n            />\n            <label className=\"gf-form-label\">\n              <a\n                onClick={() =>\n                  metaDataExist &&\n                  this.setState({\n                    showMeta: !showMeta,\n                  })\n                }\n              >\n                <i className={`fa fa-caret-${showMeta ? 'down' : 'right'}`} /> {showMeta ? 'Hide' : 'Show'} Query\n                Preview\n              </a>\n            </label>\n          </div>\n          <div className=\"gf-form gf-form--grow\">\n            <div className=\"gf-form-label gf-form-label--grow\" />\n          </div>\n          {showMeta && metaDataExist && (\n            <table className=\"filter-table form-inline\">\n              <thead>\n                <tr>\n                  <th>Metric Data Query ID</th>\n                  <th>Metric Data Query Expression</th>\n                  <th>Period</th>\n                  <th />\n                </tr>\n              </thead>\n              <tbody>\n                {data.series[0].meta.gmdMeta.map(({ ID, Expression, Period }: any) => (\n                  <tr key={ID}>\n                    <td>{ID}</td>\n                    <td>{Expression}</td>\n                    <td>{Period}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          )}\n        </div>\n      </>\n    );\n  }\n}\n","import React, { FunctionComponent } from 'react';\n\nexport interface Props {\n  region: string;\n}\n\nexport const ThrottlingErrorMessage: FunctionComponent<Props> = ({ region }) => (\n  <p>\n    Please visit the&nbsp;\n    <a\n      target=\"_blank\"\n      className=\"text-link\"\n      href={`https://${region}.console.aws.amazon.com/servicequotas/home?region=${region}#!/services/monitoring/quotas/L-5E141212`}\n    >\n      AWS Service Quotas console\n    </a>\n    &nbsp;to request a quota increase or see our&nbsp;\n    <a\n      target=\"_blank\"\n      className=\"text-link\"\n      href={`https://grafana.com/docs/features/datasources/cloudwatch/#service-quotas`}\n    >\n      documentation\n    </a>\n    &nbsp;to learn more.\n  </p>\n);\n","import { debounce, memoize } from 'lodash';\n\nexport default (func: (...args: any[]) => void, wait = 7000) => {\n  const mem = memoize(\n    (...args) =>\n      debounce(func, wait, {\n        leading: true,\n      }),\n    (...args) => JSON.stringify(args)\n  );\n\n  return (...args: any[]) => mem(...args)(...args);\n};\n","import React from 'react';\nimport angular from 'angular';\nimport _ from 'lodash';\nimport { notifyApp } from 'app/core/actions';\nimport { createErrorNotification } from 'app/core/copy/appNotification';\nimport { AppNotificationTimeout } from 'app/types';\nimport { store } from 'app/store/store';\nimport kbn from 'app/core/utils/kbn';\nimport {\n  dateMath,\n  ScopedVars,\n  toDataFrame,\n  TimeRange,\n  DataSourceApi,\n  DataQueryRequest,\n  DataSourceInstanceSettings,\n} from '@grafana/data';\nimport { BackendSrv } from 'app/core/services/backend_srv';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport { TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { ThrottlingErrorMessage } from './components/ThrottlingErrorMessage';\nimport memoizedDebounce from './memoizedDebounce';\nimport { CloudWatchQuery, CloudWatchJsonData } from './types';\n\nconst displayAlert = (datasourceName: string, region: string) =>\n  store.dispatch(\n    notifyApp(\n      createErrorNotification(\n        `CloudWatch request limit reached in ${region} for data source ${datasourceName}`,\n        '',\n        React.createElement(ThrottlingErrorMessage, { region }, null)\n      )\n    )\n  );\n\nconst displayCustomError = (title: string, message: string) =>\n  store.dispatch(notifyApp(createErrorNotification(title, message)));\n\nexport default class CloudWatchDatasource extends DataSourceApi<CloudWatchQuery, CloudWatchJsonData> {\n  type: any;\n  proxyUrl: any;\n  defaultRegion: any;\n  standardStatistics: any;\n  datasourceName: string;\n  debouncedAlert: (datasourceName: string, region: string) => void;\n  debouncedCustomAlert: (title: string, message: string) => void;\n\n  /** @ngInject */\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<CloudWatchJsonData>,\n    private backendSrv: BackendSrv,\n    private templateSrv: TemplateSrv,\n    private timeSrv: TimeSrv\n  ) {\n    super(instanceSettings);\n    this.type = 'cloudwatch';\n    this.proxyUrl = instanceSettings.url;\n    this.defaultRegion = instanceSettings.jsonData.defaultRegion;\n    this.datasourceName = instanceSettings.name;\n    this.standardStatistics = ['Average', 'Maximum', 'Minimum', 'Sum', 'SampleCount'];\n    this.debouncedAlert = memoizedDebounce(displayAlert, AppNotificationTimeout.Error);\n    this.debouncedCustomAlert = memoizedDebounce(displayCustomError, AppNotificationTimeout.Error);\n  }\n\n  query(options: DataQueryRequest<CloudWatchQuery>) {\n    options = angular.copy(options);\n\n    const queries = _.filter(options.targets, item => {\n      return (\n        (item.id !== '' || item.hide !== true) &&\n        ((!!item.region && !!item.namespace && !!item.metricName && !_.isEmpty(item.statistics)) ||\n          item.expression.length > 0)\n      );\n    }).map(item => {\n      item.region = this.replace(this.getActualRegion(item.region), options.scopedVars, true, 'region');\n      item.namespace = this.replace(item.namespace, options.scopedVars, true, 'namespace');\n      item.metricName = this.replace(item.metricName, options.scopedVars, true, 'metric name');\n      item.dimensions = this.convertDimensionFormat(item.dimensions, options.scopedVars);\n      item.statistics = item.statistics.map(stat => this.replace(stat, options.scopedVars, true, 'statistics'));\n      item.period = String(this.getPeriod(item, options)); // use string format for period in graph query, and alerting\n      item.id = this.templateSrv.replace(item.id, options.scopedVars);\n      item.expression = this.templateSrv.replace(item.expression, options.scopedVars);\n\n      // valid ExtendedStatistics is like p90.00, check the pattern\n      const hasInvalidStatistics = item.statistics.some(s => {\n        if (s.indexOf('p') === 0) {\n          const matches = /^p\\d{2}(?:\\.\\d{1,2})?$/.exec(s);\n          return !matches || matches[0] !== s;\n        }\n\n        return false;\n      });\n\n      if (hasInvalidStatistics) {\n        throw { message: 'Invalid extended statistics' };\n      }\n\n      return _.extend(\n        {\n          refId: item.refId,\n          intervalMs: options.intervalMs,\n          maxDataPoints: options.maxDataPoints,\n          datasourceId: this.id,\n          type: 'timeSeriesQuery',\n        },\n        item\n      );\n    });\n\n    // No valid targets, return the empty result to save a round trip.\n    if (_.isEmpty(queries)) {\n      return Promise.resolve({ data: [] });\n    }\n\n    const request = {\n      from: options.range.from.valueOf().toString(),\n      to: options.range.to.valueOf().toString(),\n      queries: queries,\n    };\n\n    return this.performTimeSeriesQuery(request, options.range);\n  }\n\n  get variables() {\n    return this.templateSrv.variables.map(v => `$${v.name}`);\n  }\n\n  getPeriod(target: any, options: any) {\n    let period = this.templateSrv.replace(target.period, options.scopedVars);\n    if (period && period.toLowerCase() !== 'auto') {\n      if (/^\\d+$/.test(period)) {\n        period = parseInt(period, 10);\n      } else {\n        period = kbn.interval_to_seconds(period);\n      }\n\n      if (period < 1) {\n        period = 1;\n      }\n    }\n\n    return period || '';\n  }\n\n  buildCloudwatchConsoleUrl(\n    { region, namespace, metricName, dimensions, statistics, expression }: CloudWatchQuery,\n    start: string,\n    end: string,\n    title: string,\n    gmdMeta: Array<{ Expression: string; Period: string }>\n  ) {\n    region = this.getActualRegion(region);\n    let conf = {\n      view: 'timeSeries',\n      stacked: false,\n      title,\n      start,\n      end,\n      region,\n    } as any;\n\n    const isSearchExpression =\n      gmdMeta && gmdMeta.length && gmdMeta.every(({ Expression: expression }) => /SEARCH().*/.test(expression));\n    const isMathExpression = !isSearchExpression && expression;\n\n    if (isMathExpression) {\n      return '';\n    }\n\n    if (isSearchExpression) {\n      const metrics: any =\n        gmdMeta && gmdMeta.length ? gmdMeta.map(({ Expression: expression }) => ({ expression })) : [{ expression }];\n      conf = { ...conf, metrics };\n    } else {\n      conf = {\n        ...conf,\n        metrics: [\n          ...statistics.map(stat => [\n            namespace,\n            metricName,\n            ...Object.entries(dimensions).reduce((acc, [key, value]) => [...acc, key, value[0]], []),\n            {\n              stat,\n              period: gmdMeta.length ? gmdMeta[0].Period : 60,\n            },\n          ]),\n        ],\n      };\n    }\n\n    return `https://${region}.console.aws.amazon.com/cloudwatch/deeplink.js?region=${region}#metricsV2:graph=${encodeURIComponent(\n      JSON.stringify(conf)\n    )}`;\n  }\n\n  performTimeSeriesQuery(request: any, { from, to }: TimeRange) {\n    return this.awsRequest('/api/tsdb/query', request)\n      .then((res: any) => {\n        if (!res.results) {\n          return { data: [] };\n        }\n        return Object.values(request.queries).reduce(\n          ({ data, error }: any, queryRequest: any) => {\n            const queryResult = res.results[queryRequest.refId];\n            if (!queryResult) {\n              return { data, error };\n            }\n\n            const link = this.buildCloudwatchConsoleUrl(\n              queryRequest,\n              from.toISOString(),\n              to.toISOString(),\n              queryRequest.refId,\n              queryResult.meta.gmdMeta\n            );\n\n            return {\n              error: error || queryResult.error ? { message: queryResult.error } : null,\n              data: [\n                ...data,\n                ...queryResult.series.map(({ name, points }: any) => {\n                  const dataFrame = toDataFrame({\n                    target: name,\n                    datapoints: points,\n                    refId: queryRequest.refId,\n                    meta: queryResult.meta,\n                  });\n                  if (link) {\n                    for (const field of dataFrame.fields) {\n                      field.config.links = [\n                        {\n                          url: link,\n                          title: 'View in CloudWatch console',\n                          targetBlank: true,\n                        },\n                      ];\n                    }\n                  }\n                  return dataFrame;\n                }),\n              ],\n            };\n          },\n          { data: [], error: null }\n        );\n      })\n      .catch((err: any = { data: { error: '' } }) => {\n        if (/^Throttling:.*/.test(err.data.message)) {\n          const failedRedIds = Object.keys(err.data.results);\n          const regionsAffected = Object.values(request.queries).reduce(\n            (res: string[], { refId, region }: CloudWatchQuery) =>\n              !failedRedIds.includes(refId) || res.includes(region) ? res : [...res, region],\n            []\n          ) as string[];\n\n          regionsAffected.forEach(region => this.debouncedAlert(this.datasourceName, this.getActualRegion(region)));\n        }\n\n        if (err.data && err.data.message === 'Metric request error' && err.data.error) {\n          err.data.message = err.data.error;\n        }\n\n        throw err;\n      });\n  }\n\n  transformSuggestDataFromTable(suggestData: any) {\n    return _.map(suggestData.results['metricFindQuery'].tables[0].rows, v => {\n      return {\n        text: v[0],\n        value: v[1],\n        label: v[1],\n      };\n    });\n  }\n\n  doMetricQueryRequest(subtype: any, parameters: any) {\n    const range = this.timeSrv.timeRange();\n    return this.awsRequest('/api/tsdb/query', {\n      from: range.from.valueOf().toString(),\n      to: range.to.valueOf().toString(),\n      queries: [\n        _.extend(\n          {\n            refId: 'metricFindQuery',\n            intervalMs: 1, // dummy\n            maxDataPoints: 1, // dummy\n            datasourceId: this.id,\n            type: 'metricFindQuery',\n            subtype: subtype,\n          },\n          parameters\n        ),\n      ],\n    }).then((r: any) => {\n      return this.transformSuggestDataFromTable(r);\n    });\n  }\n\n  getRegions() {\n    return this.doMetricQueryRequest('regions', null).then((regions: any) => [\n      { label: 'default', value: 'default', text: 'default' },\n      ...regions,\n    ]);\n  }\n\n  getNamespaces() {\n    return this.doMetricQueryRequest('namespaces', null);\n  }\n\n  async getMetrics(namespace: string, region?: string) {\n    if (!namespace) {\n      return [];\n    }\n\n    return this.doMetricQueryRequest('metrics', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      namespace: this.templateSrv.replace(namespace),\n    });\n  }\n\n  async getDimensionKeys(namespace: string, region: string) {\n    if (!namespace) {\n      return [];\n    }\n\n    return this.doMetricQueryRequest('dimension_keys', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      namespace: this.templateSrv.replace(namespace),\n    });\n  }\n\n  async getDimensionValues(\n    region: string,\n    namespace: string,\n    metricName: string,\n    dimensionKey: string,\n    filterDimensions: {}\n  ) {\n    if (!namespace || !metricName) {\n      return [];\n    }\n\n    const values = await this.doMetricQueryRequest('dimension_values', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      namespace: this.templateSrv.replace(namespace),\n      metricName: this.templateSrv.replace(metricName.trim()),\n      dimensionKey: this.templateSrv.replace(dimensionKey),\n      dimensions: this.convertDimensionFormat(filterDimensions, {}),\n    });\n\n    return values;\n  }\n\n  getEbsVolumeIds(region: string, instanceId: string) {\n    return this.doMetricQueryRequest('ebs_volume_ids', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      instanceId: this.templateSrv.replace(instanceId),\n    });\n  }\n\n  getEc2InstanceAttribute(region: string, attributeName: string, filters: any) {\n    return this.doMetricQueryRequest('ec2_instance_attribute', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      attributeName: this.templateSrv.replace(attributeName),\n      filters: filters,\n    });\n  }\n\n  getResourceARNs(region: string, resourceType: string, tags: any) {\n    return this.doMetricQueryRequest('resource_arns', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      resourceType: this.templateSrv.replace(resourceType),\n      tags: tags,\n    });\n  }\n\n  async metricFindQuery(query: string) {\n    let region;\n    let namespace;\n    let metricName;\n    let filterJson;\n\n    const regionQuery = query.match(/^regions\\(\\)/);\n    if (regionQuery) {\n      return this.getRegions();\n    }\n\n    const namespaceQuery = query.match(/^namespaces\\(\\)/);\n    if (namespaceQuery) {\n      return this.getNamespaces();\n    }\n\n    const metricNameQuery = query.match(/^metrics\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/);\n    if (metricNameQuery) {\n      namespace = metricNameQuery[1];\n      region = metricNameQuery[3];\n      return this.getMetrics(namespace, region);\n    }\n\n    const dimensionKeysQuery = query.match(/^dimension_keys\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/);\n    if (dimensionKeysQuery) {\n      namespace = dimensionKeysQuery[1];\n      region = dimensionKeysQuery[3];\n      return this.getDimensionKeys(namespace, region);\n    }\n\n    const dimensionValuesQuery = query.match(\n      /^dimension_values\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?([^,]+?)(,\\s?(.+))?\\)/\n    );\n    if (dimensionValuesQuery) {\n      region = dimensionValuesQuery[1];\n      namespace = dimensionValuesQuery[2];\n      metricName = dimensionValuesQuery[3];\n      const dimensionKey = dimensionValuesQuery[4];\n      filterJson = {};\n      if (dimensionValuesQuery[6]) {\n        filterJson = JSON.parse(this.templateSrv.replace(dimensionValuesQuery[6]));\n      }\n\n      return this.getDimensionValues(region, namespace, metricName, dimensionKey, filterJson);\n    }\n\n    const ebsVolumeIdsQuery = query.match(/^ebs_volume_ids\\(([^,]+?),\\s?([^,]+?)\\)/);\n    if (ebsVolumeIdsQuery) {\n      region = ebsVolumeIdsQuery[1];\n      const instanceId = ebsVolumeIdsQuery[2];\n      return this.getEbsVolumeIds(region, instanceId);\n    }\n\n    const ec2InstanceAttributeQuery = query.match(/^ec2_instance_attribute\\(([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/);\n    if (ec2InstanceAttributeQuery) {\n      region = ec2InstanceAttributeQuery[1];\n      const targetAttributeName = ec2InstanceAttributeQuery[2];\n      filterJson = JSON.parse(this.templateSrv.replace(ec2InstanceAttributeQuery[3]));\n      return this.getEc2InstanceAttribute(region, targetAttributeName, filterJson);\n    }\n\n    const resourceARNsQuery = query.match(/^resource_arns\\(([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/);\n    if (resourceARNsQuery) {\n      region = resourceARNsQuery[1];\n      const resourceType = resourceARNsQuery[2];\n      const tagsJSON = JSON.parse(this.templateSrv.replace(resourceARNsQuery[3]));\n      return this.getResourceARNs(region, resourceType, tagsJSON);\n    }\n\n    const statsQuery = query.match(/^statistics\\(\\)/);\n    if (statsQuery) {\n      return this.standardStatistics.map((s: string) => ({ value: s, label: s, text: s }));\n    }\n\n    return Promise.resolve([]);\n  }\n\n  annotationQuery(options: any) {\n    const annotation = options.annotation;\n    const statistics = _.map(annotation.statistics, s => {\n      return this.templateSrv.replace(s);\n    });\n    const defaultPeriod = annotation.prefixMatching ? '' : '300';\n    let period = annotation.period || defaultPeriod;\n    period = parseInt(period, 10);\n    const parameters = {\n      prefixMatching: annotation.prefixMatching,\n      region: this.templateSrv.replace(this.getActualRegion(annotation.region)),\n      namespace: this.templateSrv.replace(annotation.namespace),\n      metricName: this.templateSrv.replace(annotation.metricName),\n      dimensions: this.convertDimensionFormat(annotation.dimensions, {}),\n      statistics: statistics,\n      period: period,\n      actionPrefix: annotation.actionPrefix || '',\n      alarmNamePrefix: annotation.alarmNamePrefix || '',\n    };\n\n    return this.awsRequest('/api/tsdb/query', {\n      from: options.range.from.valueOf().toString(),\n      to: options.range.to.valueOf().toString(),\n      queries: [\n        _.extend(\n          {\n            refId: 'annotationQuery',\n            intervalMs: 1, // dummy\n            maxDataPoints: 1, // dummy\n            datasourceId: this.id,\n            type: 'annotationQuery',\n          },\n          parameters\n        ),\n      ],\n    }).then((r: any) => {\n      return _.map(r.results['annotationQuery'].tables[0].rows, v => {\n        return {\n          annotation: annotation,\n          time: Date.parse(v[0]),\n          title: v[1],\n          tags: [v[2]],\n          text: v[3],\n        };\n      });\n    });\n  }\n\n  targetContainsTemplate(target: any) {\n    return (\n      this.templateSrv.variableExists(target.region) ||\n      this.templateSrv.variableExists(target.namespace) ||\n      this.templateSrv.variableExists(target.metricName) ||\n      _.find(target.dimensions, (v, k) => {\n        return this.templateSrv.variableExists(k) || this.templateSrv.variableExists(v);\n      })\n    );\n  }\n\n  testDatasource() {\n    // use billing metrics for test\n    const region = this.defaultRegion;\n    const namespace = 'AWS/Billing';\n    const metricName = 'EstimatedCharges';\n    const dimensions = {};\n\n    return this.getDimensionValues(region, namespace, metricName, 'ServiceName', dimensions).then(() => {\n      return { status: 'success', message: 'Data source is working' };\n    });\n  }\n\n  awsRequest(url: string, data: any) {\n    const options = {\n      method: 'POST',\n      url,\n      data,\n    };\n\n    return this.backendSrv.datasourceRequest(options).then((result: any) => {\n      return result.data;\n    });\n  }\n\n  getDefaultRegion() {\n    return this.defaultRegion;\n  }\n\n  getActualRegion(region: string) {\n    if (region === 'default' || _.isEmpty(region)) {\n      return this.getDefaultRegion();\n    }\n    return region;\n  }\n\n  convertToCloudWatchTime(date: any, roundUp: any) {\n    if (_.isString(date)) {\n      date = dateMath.parse(date, roundUp);\n    }\n    return Math.round(date.valueOf() / 1000);\n  }\n\n  convertDimensionFormat(dimensions: { [key: string]: string | string[] }, scopedVars: ScopedVars) {\n    return Object.entries(dimensions).reduce((result, [key, value]) => {\n      key = this.replace(key, scopedVars, true, 'dimension keys');\n\n      if (Array.isArray(value)) {\n        return { ...result, [key]: value };\n      }\n\n      const valueVar = this.templateSrv.variables.find(({ name }) => name === this.templateSrv.getVariableName(value));\n      if (valueVar) {\n        if (valueVar.multi) {\n          const values = this.templateSrv.replace(value, scopedVars, 'pipe').split('|');\n          return { ...result, [key]: values };\n        }\n        return { ...result, [key]: [this.templateSrv.replace(value, scopedVars)] };\n      }\n\n      return { ...result, [key]: [value] };\n    }, {});\n  }\n\n  replace(target: string, scopedVars: ScopedVars, displayErrorIfIsMultiTemplateVariable?: boolean, fieldName?: string) {\n    if (displayErrorIfIsMultiTemplateVariable) {\n      const variable = this.templateSrv.variables.find(({ name }) => name === this.templateSrv.getVariableName(target));\n      if (variable && variable.multi) {\n        this.debouncedCustomAlert(\n          'CloudWatch templating error',\n          `Multi template variables are not supported for ${fieldName || target}`\n        );\n      }\n    }\n\n    return this.templateSrv.replace(target, scopedVars);\n  }\n}\n","import _ from 'lodash';\nimport { AnnotationQuery } from './types';\n\nexport class CloudWatchAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n  annotation: any;\n\n  /** @ngInject */\n  constructor() {\n    _.defaultsDeep(this.annotation, {\n      namespace: '',\n      metricName: '',\n      expression: '',\n      dimensions: {},\n      region: 'default',\n      id: '',\n      alias: '',\n      statistics: ['Average'],\n      matchExact: true,\n      prefixMatching: false,\n      actionPrefix: '',\n      alarmNamePrefix: '',\n    });\n\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onChange(query: AnnotationQuery) {\n    Object.assign(this.annotation, query);\n  }\n}\n","import './query_parameter_ctrl';\nimport { DataSourcePlugin } from '@grafana/data';\nimport { ConfigEditor } from './components/ConfigEditor';\nimport { QueryEditor } from './components/QueryEditor';\nimport CloudWatchDatasource from './datasource';\nimport { CloudWatchAnnotationsQueryCtrl } from './annotations_query_ctrl';\nimport { CloudWatchJsonData, CloudWatchQuery } from './types';\n\nexport const plugin = new DataSourcePlugin<CloudWatchDatasource, CloudWatchQuery, CloudWatchJsonData>(\n  CloudWatchDatasource\n)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor)\n  .setExploreQueryField(QueryEditor)\n  .setAnnotationQueryCtrl(CloudWatchAnnotationsQueryCtrl);\n","// https://github.com/facebook/react/issues/5465\n\nexport interface CancelablePromise<T> {\n  promise: Promise<T>;\n  cancel: () => void;\n}\n\nexport const makePromiseCancelable = <T>(promise: Promise<T>): CancelablePromise<T> => {\n  let hasCanceled_ = false;\n\n  const wrappedPromise = new Promise<T>((resolve, reject) => {\n    promise.then(val => (hasCanceled_ ? reject({ isCanceled: true }) : resolve(val)));\n    promise.catch(error => (hasCanceled_ ? reject({ isCanceled: true }) : reject(error)));\n  });\n\n  return {\n    promise: wrappedPromise,\n    cancel() {\n      hasCanceled_ = true;\n    },\n  };\n};\n"],"sourceRoot":""}