{"version":3,"file":"logsPanel.37c0e991f554637edb20.js","mappings":"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","sources":["webpack://grafana/./public/app/plugins/panel/logs/panelcfg.gen.ts","webpack://grafana/./public/app/plugins/panel/logs/types.ts","webpack://grafana/./public/app/plugins/panel/logs/useDatasourcesFromTargets.ts","webpack://grafana/./public/app/plugins/panel/logs/LogsPanel.tsx","webpack://grafana/./public/app/plugins/panel/logs/suggestions.ts","webpack://grafana/./public/app/plugins/panel/logs/module.tsx"],"sourcesContent":["// Code generated - EDITING IS FUTILE. DO NOT EDIT.\n//\n// Generated by:\n//     public/app/plugins/gen.go\n// Using jennies:\n//     TSTypesJenny\n//     PluginTsTypesJenny\n//\n// Run 'make gen-cue' from repository root to regenerate.\n\nimport * as common from '@grafana/schema';\n\nexport interface Options {\n  dedupStrategy: common.LogsDedupStrategy;\n  displayedFields?: Array<string>;\n  enableLogDetails: boolean;\n  isFilterLabelActive?: unknown;\n  /**\n   * TODO: figure out how to define callbacks\n   */\n  onClickFilterLabel?: unknown;\n  onClickFilterOutLabel?: unknown;\n  onClickFilterOutString?: unknown;\n  onClickFilterString?: unknown;\n  onClickHideField?: unknown;\n  onClickShowField?: unknown;\n  prettifyLogMessage: boolean;\n  showCommonLabels: boolean;\n  showLabels: boolean;\n  showLogContextToggle: boolean;\n  showTime: boolean;\n  sortOrder: common.LogsSortOrder;\n  wrapLogMessage: boolean;\n}\n\nexport const defaultOptions: Partial<Options> = {\n  displayedFields: [],\n};\n","import { DataFrame } from '@grafana/data';\n\nexport { Options } from './panelcfg.gen';\n\ntype onClickFilterLabelType = (key: string, value: string, frame?: DataFrame) => void;\ntype onClickFilterOutLabelType = (key: string, value: string, frame?: DataFrame) => void;\ntype onClickFilterValueType = (value: string, refId?: string) => void;\ntype onClickFilterOutStringType = (value: string, refId?: string) => void;\ntype isFilterLabelActiveType = (key: string, value: string, refId?: string) => Promise<boolean>;\ntype isOnClickShowFieldType = (value: string) => void;\ntype isOnClickHideFieldType = (value: string) => void;\n\nexport function isOnClickFilterLabel(callback: unknown): callback is onClickFilterLabelType {\n  return typeof callback === 'function';\n}\n\nexport function isOnClickFilterOutLabel(callback: unknown): callback is onClickFilterOutLabelType {\n  return typeof callback === 'function';\n}\n\nexport function isOnClickFilterString(callback: unknown): callback is onClickFilterValueType {\n  return typeof callback === 'function';\n}\n\nexport function isOnClickFilterOutString(callback: unknown): callback is onClickFilterOutStringType {\n  return typeof callback === 'function';\n}\n\nexport function isIsFilterLabelActive(callback: unknown): callback is isFilterLabelActiveType {\n  return typeof callback === 'function';\n}\n\nexport function isOnClickShowField(callback: unknown): callback is isOnClickShowFieldType {\n  return typeof callback === 'function';\n}\n\nexport function isOnClickHideField(callback: unknown): callback is isOnClickHideFieldType {\n  return typeof callback === 'function';\n}\n","import { useState } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { DataSourceApi } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { DataQuery } from '@grafana/schema';\n\nexport const useDatasourcesFromTargets = (targets: DataQuery[] | undefined): Map<string, DataSourceApi> => {\n  const [dataSourcesMap, setDataSourcesMap] = useState(new Map<string, DataSourceApi>());\n\n  useAsync(async () => {\n    if (!targets) {\n      setDataSourcesMap(new Map<string, DataSourceApi>());\n      return;\n    }\n\n    const raw = await Promise.all(\n      targets\n        .filter((target) => !!target.datasource?.uid)\n        .map((target) =>\n          getDataSourceSrv()\n            .get(target.datasource?.uid)\n            .then((ds) => ({ key: target.refId, ds }))\n        )\n    );\n\n    setDataSourcesMap(new Map<string, DataSourceApi>(raw.map(({ key, ds }) => [key, ds])));\n  }, [targets]);\n\n  return dataSourcesMap;\n};\n","import { css, cx } from '@emotion/css';\nimport { useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState } from 'react';\nimport * as React from 'react';\n\nimport {\n  CoreApp,\n  DataHoverClearEvent,\n  DataHoverEvent,\n  DataQueryResponse,\n  Field,\n  GrafanaTheme2,\n  hasLogsContextSupport,\n  hasLogsContextUiSupport,\n  Labels,\n  LogRowContextOptions,\n  LogRowModel,\n  LogsSortOrder,\n  PanelProps,\n  TimeRange,\n  toUtc,\n  urlUtil,\n} from '@grafana/data';\nimport { CustomScrollbar, usePanelContext, useStyles2 } from '@grafana/ui';\nimport { getFieldLinksForExplore } from 'app/features/explore/utils/links';\nimport { LogRowContextModal } from 'app/features/logs/components/log-context/LogRowContextModal';\nimport { PanelDataErrorView } from 'app/features/panel/components/PanelDataErrorView';\n\nimport { createAndCopyShortLink } from '../../../core/utils/shortLinks';\nimport { LogLabels } from '../../../features/logs/components/LogLabels';\nimport { LogRows } from '../../../features/logs/components/LogRows';\nimport { COMMON_LABELS, dataFrameToLogsModel, dedupLogRows } from '../../../features/logs/logsModel';\n\nimport {\n  isIsFilterLabelActive,\n  isOnClickFilterLabel,\n  isOnClickFilterOutLabel,\n  isOnClickFilterOutString,\n  isOnClickFilterString,\n  isOnClickHideField,\n  isOnClickShowField,\n  Options,\n} from './types';\nimport { useDatasourcesFromTargets } from './useDatasourcesFromTargets';\n\ninterface LogsPanelProps extends PanelProps<Options> {\n  /**\n   * Adds a key => value filter to the query referenced by the provided DataFrame refId. Used by Log details and Logs table.\n   * onClickFilterLabel?: (key: string, value: string, frame?: DataFrame) => void;\n   *\n   * Adds a negative key => value filter to the query referenced by the provided DataFrame refId. Used by Log details and Logs table.\n   * onClickFilterOutLabel?: (key: string, value: string, frame?: DataFrame) => void;\n   *\n   * Adds a string filter to the query referenced by the provided DataFrame refId. Used by the Logs popover menu.\n   * onClickFilterOutString?: (value: string, refId?: string) => void;\n   *\n   * Removes a string filter to the query referenced by the provided DataFrame refId. Used by the Logs popover menu.\n   * onClickFilterString?: (value: string, refId?: string) => void;\n   *\n   * Determines if a given key => value filter is active in a given query. Used by Log details.\n   * isFilterLabelActive?: (key: string, value: string, refId?: string) => Promise<boolean>;\n   *\n   * Array of field names to display instead of the log line. Pass a list of fields or an empty array to enable hide/show fields in Log Details.\n   * displayedFields?: string[]\n   *\n   * Called from the \"eye\" icon in Log Details to request showing the displayed field. If ommited, a default implementation is used.\n   * onClickShowField?: (key: string) => void;\n   *\n   * Called from the \"eye\" icon in Log Details to request hiding the displayed field. If ommited, a default implementation is used.\n   * onClickHideField?: (key: string) => void;\n   */\n}\ninterface LogsPermalinkUrlState {\n  logs?: {\n    id?: string;\n  };\n}\n\nconst noCommonLabels: Labels = {};\n\nexport const LogsPanel = ({\n  data,\n  timeZone,\n  fieldConfig,\n  options: {\n    showLabels,\n    showTime,\n    wrapLogMessage,\n    showCommonLabels,\n    prettifyLogMessage,\n    sortOrder,\n    dedupStrategy,\n    enableLogDetails,\n    showLogContextToggle,\n    onClickFilterLabel,\n    onClickFilterOutLabel,\n    onClickFilterOutString,\n    onClickFilterString,\n    isFilterLabelActive,\n    ...options\n  },\n  id,\n}: LogsPanelProps) => {\n  const isAscending = sortOrder === LogsSortOrder.Ascending;\n  const style = useStyles2(getStyles);\n  const [scrollTop, setScrollTop] = useState(0);\n  const logsContainerRef = useRef<HTMLDivElement>(null);\n  const [contextRow, setContextRow] = useState<LogRowModel | null>(null);\n  const timeRange = data.timeRange;\n  const dataSourcesMap = useDatasourcesFromTargets(data.request?.targets);\n  const [scrollElement, setScrollElement] = useState<HTMLDivElement | null>(null);\n  const [displayedFields, setDisplayedFields] = useState<string[]>(options.displayedFields ?? []);\n  let closeCallback = useRef<() => void>();\n\n  const { eventBus, onAddAdHocFilter } = usePanelContext();\n  const onLogRowHover = useCallback(\n    (row?: LogRowModel) => {\n      if (row) {\n        eventBus.publish(\n          new DataHoverEvent({\n            point: {\n              time: row.timeEpochMs,\n            },\n          })\n        );\n      }\n    },\n    [eventBus]\n  );\n\n  const onLogContainerMouseLeave = useCallback(() => {\n    eventBus.publish(new DataHoverClearEvent());\n  }, [eventBus]);\n\n  const onCloseContext = useCallback(() => {\n    setContextRow(null);\n    if (closeCallback.current) {\n      closeCallback.current();\n    }\n  }, [closeCallback]);\n\n  const onOpenContext = useCallback(\n    (row: LogRowModel, onClose: () => void) => {\n      setContextRow(row);\n      closeCallback.current = onClose;\n    },\n    [closeCallback]\n  );\n\n  const onPermalinkClick = useCallback(\n    async (row: LogRowModel) => {\n      return await copyDashboardUrl(row, timeRange);\n    },\n    [timeRange]\n  );\n\n  const showContextToggle = useCallback(\n    (row: LogRowModel): boolean => {\n      if (\n        !row.dataFrame.refId ||\n        !dataSourcesMap ||\n        (!showLogContextToggle &&\n          data.request?.app !== CoreApp.Dashboard &&\n          data.request?.app !== CoreApp.PanelEditor &&\n          data.request?.app !== CoreApp.PanelViewer)\n      ) {\n        return false;\n      }\n\n      const dataSource = dataSourcesMap.get(row.dataFrame.refId);\n      return hasLogsContextSupport(dataSource);\n    },\n    [dataSourcesMap, showLogContextToggle, data.request?.app]\n  );\n\n  const showPermaLink = useCallback(() => {\n    return !(\n      data.request?.app !== CoreApp.Dashboard &&\n      data.request?.app !== CoreApp.PanelEditor &&\n      data.request?.app !== CoreApp.PanelViewer\n    );\n  }, [data.request?.app]);\n\n  const getLogRowContext = useCallback(\n    async (row: LogRowModel, origRow: LogRowModel, options: LogRowContextOptions): Promise<DataQueryResponse> => {\n      if (!origRow.dataFrame.refId || !dataSourcesMap) {\n        return Promise.resolve({ data: [] });\n      }\n\n      const query = data.request?.targets[0];\n      if (!query) {\n        return Promise.resolve({ data: [] });\n      }\n\n      const dataSource = dataSourcesMap.get(origRow.dataFrame.refId);\n      if (!hasLogsContextSupport(dataSource)) {\n        return Promise.resolve({ data: [] });\n      }\n\n      return dataSource.getLogRowContext(row, options, query);\n    },\n    [data.request?.targets, dataSourcesMap]\n  );\n\n  const getLogRowContextUi = useCallback(\n    (origRow: LogRowModel, runContextQuery?: () => void): React.ReactNode => {\n      if (!origRow.dataFrame.refId || !dataSourcesMap) {\n        return <></>;\n      }\n\n      const query = data.request?.targets[0];\n      if (!query) {\n        return <></>;\n      }\n\n      const dataSource = dataSourcesMap.get(origRow.dataFrame.refId);\n      if (!hasLogsContextUiSupport(dataSource)) {\n        return <></>;\n      }\n\n      if (!dataSource.getLogRowContextUi) {\n        return <></>;\n      }\n\n      return dataSource.getLogRowContextUi(origRow, runContextQuery, query);\n    },\n    [data.request?.targets, dataSourcesMap]\n  );\n\n  // Important to memoize stuff here, as panel rerenders a lot for example when resizing.\n  const [logRows, deduplicatedRows, commonLabels] = useMemo(() => {\n    const logs = data\n      ? dataFrameToLogsModel(data.series, data.request?.intervalMs, undefined, data.request?.targets)\n      : null;\n    const logRows = logs?.rows || [];\n    const commonLabels = logs?.meta?.find((m) => m.label === COMMON_LABELS);\n    const deduplicatedRows = dedupLogRows(logRows, dedupStrategy);\n    return [logRows, deduplicatedRows, commonLabels];\n  }, [data, dedupStrategy]);\n\n  useLayoutEffect(() => {\n    if (isAscending && logsContainerRef.current) {\n      setScrollTop(logsContainerRef.current.offsetHeight);\n    } else {\n      setScrollTop(0);\n    }\n  }, [isAscending, logRows]);\n\n  const getFieldLinks = useCallback(\n    (field: Field, rowIndex: number) => {\n      return getFieldLinksForExplore({ field, rowIndex, range: data.timeRange });\n    },\n    [data]\n  );\n\n  /**\n   * Scrolls the given row into view.\n   */\n  const scrollIntoView = useCallback(\n    (row: HTMLElement) => {\n      scrollElement?.scrollTo({\n        top: row.offsetTop,\n        behavior: 'smooth',\n      });\n    },\n    [scrollElement]\n  );\n\n  const handleOnClickFilterLabel = useCallback(\n    (key: string, value: string) => {\n      onAddAdHocFilter?.({\n        key,\n        value,\n        operator: '=',\n      });\n    },\n    [onAddAdHocFilter]\n  );\n\n  const handleOnClickFilterOutLabel = useCallback(\n    (key: string, value: string) => {\n      onAddAdHocFilter?.({\n        key,\n        value,\n        operator: '!=',\n      });\n    },\n    [onAddAdHocFilter]\n  );\n\n  const showField = useCallback(\n    (key: string) => {\n      const index = displayedFields?.indexOf(key);\n      if (index === -1) {\n        setDisplayedFields(displayedFields?.concat(key));\n      }\n    },\n    [displayedFields]\n  );\n\n  const hideField = useCallback(\n    (key: string) => {\n      const index = displayedFields?.indexOf(key);\n      if (index !== undefined && index > -1) {\n        setDisplayedFields(displayedFields?.filter((k) => key !== k));\n      }\n    },\n    [displayedFields]\n  );\n\n  useEffect(() => {\n    if (options.displayedFields) {\n      setDisplayedFields(options.displayedFields);\n    }\n  }, [options.displayedFields]);\n\n  if (!data || logRows.length === 0) {\n    return <PanelDataErrorView fieldConfig={fieldConfig} panelId={id} data={data} needsStringField />;\n  }\n\n  const renderCommonLabels = () => (\n    <div className={cx(style.labelContainer, isAscending && style.labelContainerAscending)}>\n      <span className={style.label}>Common labels:</span>\n      <LogLabels\n        labels={typeof commonLabels?.value === 'object' ? commonLabels?.value : noCommonLabels}\n        emptyMessage=\"(no common labels)\"\n      />\n    </div>\n  );\n\n  // Passing callbacks control the display of the filtering buttons. We want to pass it only if onAddAdHocFilter is defined.\n  const defaultOnClickFilterLabel = onAddAdHocFilter ? handleOnClickFilterLabel : undefined;\n  const defaultOnClickFilterOutLabel = onAddAdHocFilter ? handleOnClickFilterOutLabel : undefined;\n\n  const onClickShowField = isOnClickShowField(options.onClickShowField) ? options.onClickShowField : showField;\n  const onClickHideField = isOnClickHideField(options.onClickHideField) ? options.onClickHideField : hideField;\n\n  return (\n    <>\n      {contextRow && (\n        <LogRowContextModal\n          open={contextRow !== null}\n          row={contextRow}\n          onClose={onCloseContext}\n          getRowContext={(row, options) => getLogRowContext(row, contextRow, options)}\n          logsSortOrder={sortOrder}\n          timeZone={timeZone}\n          getLogRowContextUi={getLogRowContextUi}\n        />\n      )}\n      <CustomScrollbar\n        autoHide\n        scrollTop={scrollTop}\n        scrollRefCallback={(scrollElement) => setScrollElement(scrollElement)}\n      >\n        <div onMouseLeave={onLogContainerMouseLeave} className={style.container} ref={logsContainerRef}>\n          {showCommonLabels && !isAscending && renderCommonLabels()}\n          <LogRows\n            containerRendered={logsContainerRef.current !== null}\n            scrollIntoView={scrollIntoView}\n            permalinkedRowId={getLogsPanelState()?.logs?.id ?? undefined}\n            onPermalinkClick={showPermaLink() ? onPermalinkClick : undefined}\n            logRows={logRows}\n            showContextToggle={showContextToggle}\n            deduplicatedRows={deduplicatedRows}\n            dedupStrategy={dedupStrategy}\n            showLabels={showLabels}\n            showTime={showTime}\n            wrapLogMessage={wrapLogMessage}\n            prettifyLogMessage={prettifyLogMessage}\n            timeZone={timeZone}\n            getFieldLinks={getFieldLinks}\n            logsSortOrder={sortOrder}\n            enableLogDetails={enableLogDetails}\n            previewLimit={isAscending ? logRows.length : undefined}\n            onLogRowHover={onLogRowHover}\n            app={CoreApp.Dashboard}\n            onOpenContext={onOpenContext}\n            onClickFilterLabel={\n              isOnClickFilterLabel(onClickFilterLabel) ? onClickFilterLabel : defaultOnClickFilterLabel\n            }\n            onClickFilterOutLabel={\n              isOnClickFilterOutLabel(onClickFilterOutLabel) ? onClickFilterOutLabel : defaultOnClickFilterOutLabel\n            }\n            onClickFilterString={isOnClickFilterString(onClickFilterString) ? onClickFilterString : undefined}\n            onClickFilterOutString={\n              isOnClickFilterOutString(onClickFilterOutString) ? onClickFilterOutString : undefined\n            }\n            isFilterLabelActive={isIsFilterLabelActive(isFilterLabelActive) ? isFilterLabelActive : undefined}\n            displayedFields={displayedFields}\n            onClickShowField={displayedFields !== undefined ? onClickShowField : undefined}\n            onClickHideField={displayedFields !== undefined ? onClickHideField : undefined}\n          />\n          {showCommonLabels && isAscending && renderCommonLabels()}\n        </div>\n      </CustomScrollbar>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css({\n    marginBottom: theme.spacing(1.5),\n  }),\n  labelContainer: css({\n    margin: theme.spacing(0, 0, 0.5, 0.5),\n    display: 'flex',\n    alignItems: 'center',\n  }),\n  labelContainerAscending: css({\n    margin: theme.spacing(0.5, 0, 0.5, 0),\n  }),\n  label: css({\n    marginRight: theme.spacing(0.5),\n    fontSize: theme.typography.bodySmall.fontSize,\n    fontWeight: theme.typography.fontWeightMedium,\n  }),\n});\n\nfunction getLogsPanelState(): LogsPermalinkUrlState | undefined {\n  const urlParams = urlUtil.getUrlSearchParams();\n  const panelStateEncoded = urlParams?.panelState;\n  if (\n    panelStateEncoded &&\n    Array.isArray(panelStateEncoded) &&\n    panelStateEncoded?.length > 0 &&\n    typeof panelStateEncoded[0] === 'string'\n  ) {\n    try {\n      return JSON.parse(panelStateEncoded[0]);\n    } catch (e) {\n      console.error('error parsing logsPanelState', e);\n    }\n  }\n\n  return undefined;\n}\n\nasync function copyDashboardUrl(row: LogRowModel, timeRange: TimeRange) {\n  // this is an extra check, to be sure that we are not\n  // creating permalinks for logs without an id-field.\n  // normally it should never happen, because we do not\n  // display the permalink button in such cases.\n  if (row.rowId === undefined || !row.dataFrame.refId) {\n    return;\n  }\n\n  // get panel state, add log-row-id\n  const panelState = {\n    logs: { id: row.uid },\n  };\n\n  // Grab the current dashboard URL\n  const currentURL = new URL(window.location.href);\n\n  // Add panel state containing the rowId, and absolute time range from the current query, but leave everything else the same, if the user is in edit mode when grabbing the link, that's what will be linked to, etc.\n  currentURL.searchParams.set('panelState', JSON.stringify(panelState));\n  currentURL.searchParams.set('from', toUtc(timeRange.from).valueOf().toString(10));\n  currentURL.searchParams.set('to', toUtc(timeRange.to).valueOf().toString(10));\n\n  await createAndCopyShortLink(currentURL.toString());\n\n  return Promise.resolve();\n}\n","import { VisualizationSuggestionsBuilder, VisualizationSuggestionScore } from '@grafana/data';\nimport { SuggestionName } from 'app/types/suggestions';\n\nimport { Options } from './types';\n\nexport class LogsPanelSuggestionsSupplier {\n  getSuggestionsForData(builder: VisualizationSuggestionsBuilder) {\n    const list = builder.getListAppender<Options, {}>({\n      name: '',\n      pluginId: 'logs',\n      options: {},\n      fieldConfig: {\n        defaults: {\n          custom: {},\n        },\n        overrides: [],\n      },\n    });\n\n    const { dataSummary: ds } = builder;\n\n    // Require a string & time field\n    if (!ds.hasData || !ds.hasTimeField || !ds.hasStringField) {\n      return;\n    }\n\n    if (ds.preferredVisualisationType === 'logs') {\n      list.append({ name: SuggestionName.Logs, score: VisualizationSuggestionScore.Best });\n    } else {\n      list.append({ name: SuggestionName.Logs });\n    }\n  }\n}\n","import { PanelPlugin, LogsSortOrder, LogsDedupStrategy, LogsDedupDescription } from '@grafana/data';\n\nimport { LogsPanel } from './LogsPanel';\nimport { LogsPanelSuggestionsSupplier } from './suggestions';\nimport { Options } from './types';\n\nexport const plugin = new PanelPlugin<Options>(LogsPanel)\n  .setPanelOptions((builder) => {\n    builder\n      .addBooleanSwitch({\n        path: 'showTime',\n        name: 'Time',\n        description: '',\n        defaultValue: false,\n      })\n      .addBooleanSwitch({\n        path: 'showLabels',\n        name: 'Unique labels',\n        description: '',\n        defaultValue: false,\n      })\n      .addBooleanSwitch({\n        path: 'showCommonLabels',\n        name: 'Common labels',\n        description: '',\n        defaultValue: false,\n      })\n      .addBooleanSwitch({\n        path: 'wrapLogMessage',\n        name: 'Wrap lines',\n        description: '',\n        defaultValue: false,\n      })\n      .addBooleanSwitch({\n        path: 'prettifyLogMessage',\n        name: 'Prettify JSON',\n        description: '',\n        defaultValue: false,\n      })\n      .addBooleanSwitch({\n        path: 'enableLogDetails',\n        name: 'Enable log details',\n        description: '',\n        defaultValue: true,\n      })\n      .addRadio({\n        path: 'dedupStrategy',\n        name: 'Deduplication',\n        description: '',\n        settings: {\n          options: [\n            { value: LogsDedupStrategy.none, label: 'None', description: LogsDedupDescription[LogsDedupStrategy.none] },\n            {\n              value: LogsDedupStrategy.exact,\n              label: 'Exact',\n              description: LogsDedupDescription[LogsDedupStrategy.exact],\n            },\n            {\n              value: LogsDedupStrategy.numbers,\n              label: 'Numbers',\n              description: LogsDedupDescription[LogsDedupStrategy.numbers],\n            },\n            {\n              value: LogsDedupStrategy.signature,\n              label: 'Signature',\n              description: LogsDedupDescription[LogsDedupStrategy.signature],\n            },\n          ],\n        },\n        defaultValue: LogsDedupStrategy.none,\n      })\n      .addRadio({\n        path: 'sortOrder',\n        name: 'Order',\n        description: '',\n        settings: {\n          options: [\n            { value: LogsSortOrder.Descending, label: 'Newest first' },\n            { value: LogsSortOrder.Ascending, label: 'Oldest first' },\n          ],\n        },\n        defaultValue: LogsSortOrder.Descending,\n      });\n  })\n  .setSuggestionsSupplier(new LogsPanelSuggestionsSupplier());\n"],"names":["defaultOptions","isOnClickFilterLabel","callback","isOnClickFilterOutLabel","isOnClickFilterString","isOnClickFilterOutString","isIsFilterLabelActive","isOnClickShowField","isOnClickHideField","useDatasourcesFromTargets","targets","dataSourcesMap","setDataSourcesMap","useAsync","raw","target","ds","key","noCommonLabels","LogsPanel","data","timeZone","fieldConfig","showLabels","showTime","wrapLogMessage","showCommonLabels","prettifyLogMessage","sortOrder","dedupStrategy","enableLogDetails","showLogContextToggle","onClickFilterLabel","onClickFilterOutLabel","onClickFilterOutString","onClickFilterString","isFilterLabelActive","options","id","isAscending","style","getStyles","scrollTop","setScrollTop","logsContainerRef","contextRow","setContextRow","timeRange","scrollElement","setScrollElement","displayedFields","setDisplayedFields","closeCallback","eventBus","onAddAdHocFilter","onLogRowHover","row","onLogContainerMouseLeave","onCloseContext","onOpenContext","onClose","onPermalinkClick","copyDashboardUrl","showContextToggle","dataSource","showPermaLink","getLogRowContext","origRow","query","getLogRowContextUi","runContextQuery","logRows","deduplicatedRows","commonLabels","logs","m","getFieldLinks","field","rowIndex","scrollIntoView","handleOnClickFilterLabel","value","handleOnClickFilterOutLabel","showField","hideField","index","k","PanelDataErrorView","renderCommonLabels","LogLabels","defaultOnClickFilterLabel","defaultOnClickFilterOutLabel","onClickShowField","onClickHideField","LogRowContextModal","CustomScrollbar","LogRows","getLogsPanelState","theme","panelStateEncoded","url","e","panelState","currentURL","LogsPanelSuggestionsSupplier","builder","list","PanelPlugin"],"sourceRoot":""}