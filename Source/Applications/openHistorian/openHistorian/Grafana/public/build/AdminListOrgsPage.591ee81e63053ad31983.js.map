{"version":3,"sources":["webpack:///./public/app/features/admin/AdminOrgsTable.tsx","webpack:///./public/app/features/admin/AdminListOrgsPage.tsx"],"names":["AdminOrgsTable","orgs","onDelete","useState","deleteOrg","setDeleteOrg","className","style","width","map","org","key","id","name","href","variant","size","icon","onClick","isOpen","title","body","confirmText","onDismiss","undefined","onConfirm","orgId","getBackendSrv","delete","getOrgs","get","AdminListOrgsPages","navIndex","useSelector","state","navModel","getNavModel","useAsyncFn","fetchOrgs","useEffect","Page","Contents","loading","error","value","then"],"mappings":"6qBASO,IAAMA,EAA4B,SAAC,GAAuB,IAArBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAAe,IAC7BC,qBAD6B,GACxDC,EADwD,KAC7CC,EAD6C,KAE/D,OACE,2BAAOC,UAAU,gDACf,+BACE,4BACE,kCACA,oCACA,wBAAIC,MAAO,CAAEC,MAAO,UAGxB,+BACGP,EAAKQ,KAAI,SAAAC,GAAG,OACX,wBAAIC,IAAG,UAAKD,EAAIE,GAAT,YAAeF,EAAIG,OACxB,wBAAIP,UAAU,WACZ,uBAAGQ,KAAI,0BAAqBJ,EAAIE,KAAOF,EAAIE,KAE7C,wBAAIN,UAAU,WACZ,uBAAGQ,KAAI,0BAAqBJ,EAAIE,KAAOF,EAAIG,OAE7C,wBAAIP,UAAU,cACZ,kBAAC,SAAD,CAAQS,QAAQ,cAAcC,KAAK,KAAKC,KAAK,QAAQC,QAAS,kBAAMb,EAAaK,YAKxFN,GACC,kBAAC,eAAD,CACEe,QAAM,EACNF,KAAK,YACLG,MAAM,SACNC,KACE,iEACoCjB,EAAUS,KAD9C,KAEE,6BAFF,IAES,yFAGXS,YAAY,SACZC,UAAW,kBAAMlB,OAAamB,IAC9BC,UAAW,WACTvB,EAASE,EAAUQ,IACnBP,OAAamB,Q,03BCxCzB,IAAMpB,EAAS,4CAAG,WAAOsB,GAAP,gGACHC,0BAAgBC,OAAO,aAAeF,GADnC,mFAAH,sDAITG,EAAO,4CAAG,6GACDF,0BAAgBG,IAAI,aADnB,mFAAH,qDAIAC,EAAyB,WACpC,IAAMC,EAAWC,uBAAY,SAACC,GAAD,OAAuBA,EAAMF,YACpDG,EAAWC,YAAYJ,EAAU,eAFG,IAGfK,IAAU,2BAAC,6GAAkBR,IAAlB,mFAA6B,IAHzB,GAGnCK,EAHmC,KAG5BI,EAH4B,KAS1C,OAJAC,qBAAU,WACRD,MACC,IAGD,kBAACE,EAAA,EAAD,CAAML,SAAUA,GACd,kBAACK,EAAA,EAAKC,SAAN,KACE,oCACE,yBAAKnC,UAAU,mBACb,yBAAKA,UAAU,4BACf,kBAAC,aAAD,CAAYW,KAAK,OAAOH,KAAK,WAA7B,YAIDoB,EAAMQ,SAAW,yBACjBR,EAAMS,MACNT,EAAMU,OACL,kBAAC,EAAD,CACE3C,KAAMiC,EAAMU,MACZ1C,SAAU,SAAAwB,GACRtB,EAAUsB,GAAOmB,MAAK,kBAAMP,cAU7BP","file":"AdminListOrgsPage.591ee81e63053ad31983.js","sourcesContent":["import React, { FC, useState } from 'react';\nimport { Organization } from 'app/types';\nimport { Button, ConfirmModal } from '@grafana/ui';\n\ninterface Props {\n  orgs: Organization[];\n  onDelete: (orgId: number) => void;\n}\n\nexport const AdminOrgsTable: FC<Props> = ({ orgs, onDelete }) => {\n  const [deleteOrg, setDeleteOrg] = useState<Organization>();\n  return (\n    <table className=\"filter-table form-inline filter-table--hover\">\n      <thead>\n        <tr>\n          <th>Id</th>\n          <th>Name</th>\n          <th style={{ width: '1%' }}></th>\n        </tr>\n      </thead>\n      <tbody>\n        {orgs.map(org => (\n          <tr key={`${org.id}-${org.name}`}>\n            <td className=\"link-td\">\n              <a href={`admin/orgs/edit/${org.id}`}>{org.id}</a>\n            </td>\n            <td className=\"link-td\">\n              <a href={`admin/orgs/edit/${org.id}`}>{org.name}</a>\n            </td>\n            <td className=\"text-right\">\n              <Button variant=\"destructive\" size=\"sm\" icon=\"times\" onClick={() => setDeleteOrg(org)} />\n            </td>\n          </tr>\n        ))}\n      </tbody>\n      {deleteOrg && (\n        <ConfirmModal\n          isOpen\n          icon=\"trash-alt\"\n          title=\"Delete\"\n          body={\n            <div>\n              Are you sure you want to delete '{deleteOrg.name}'?\n              <br /> <small>All dashboards for this organization will be removed!</small>\n            </div>\n          }\n          confirmText=\"Delete\"\n          onDismiss={() => setDeleteOrg(undefined)}\n          onConfirm={() => {\n            onDelete(deleteOrg.id);\n            setDeleteOrg(undefined);\n          }}\n        />\n      )}\n    </table>\n  );\n};\n","import React, { FC, useEffect } from 'react';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport Page from 'app/core/components/Page/Page';\nimport { useSelector } from 'react-redux';\nimport { StoreState } from 'app/types/store';\nimport { LinkButton } from '@grafana/ui';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { AdminOrgsTable } from './AdminOrgsTable';\nimport useAsyncFn from 'react-use/lib/useAsyncFn';\n\nconst deleteOrg = async (orgId: number) => {\n  return await getBackendSrv().delete('/api/orgs/' + orgId);\n};\n\nconst getOrgs = async () => {\n  return await getBackendSrv().get('/api/orgs');\n};\n\nexport const AdminListOrgsPages: FC = () => {\n  const navIndex = useSelector((state: StoreState) => state.navIndex);\n  const navModel = getNavModel(navIndex, 'global-orgs');\n  const [state, fetchOrgs] = useAsyncFn(async () => await getOrgs(), []);\n\n  useEffect(() => {\n    fetchOrgs();\n  }, []);\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        <>\n          <div className=\"page-action-bar\">\n            <div className=\"page-action-bar__spacer\" />\n            <LinkButton icon=\"plus\" href=\"org/new\">\n              New org\n            </LinkButton>\n          </div>\n          {state.loading && 'Fetching organizations'}\n          {state.error}\n          {state.value && (\n            <AdminOrgsTable\n              orgs={state.value}\n              onDelete={orgId => {\n                deleteOrg(orgId).then(() => fetchOrgs());\n              }}\n            />\n          )}\n        </>\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default AdminListOrgsPages;\n"],"sourceRoot":""}