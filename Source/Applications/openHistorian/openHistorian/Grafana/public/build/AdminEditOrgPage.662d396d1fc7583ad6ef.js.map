{"version":3,"file":"AdminEditOrgPage.662d396d1fc7583ad6ef.js","mappings":"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","sources":["webpack://grafana/./public/app/features/admin/AdminEditOrgPage.tsx","webpack://grafana/./public/app/features/users/UsersTable.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useAsyncFn } from 'react-use';\n\nimport { NavModelItem, UrlQueryValue } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { Form, Field, Input, Button, Legend, Alert, VerticalGroup, HorizontalGroup, Pagination } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { contextSrv } from 'app/core/core';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { accessControlQueryParam } from 'app/core/utils/accessControl';\nimport { OrgUser, AccessControlAction, OrgRole } from 'app/types';\n\nimport { UsersTable } from '../users/UsersTable';\n\nconst perPage = 30;\n\ninterface OrgNameDTO {\n  orgName: string;\n}\n\nconst getOrg = async (orgId: UrlQueryValue) => {\n  return await getBackendSrv().get(`/api/orgs/${orgId}`);\n};\n\nconst getOrgUsers = async (orgId: UrlQueryValue, page: number) => {\n  if (contextSrv.hasPermission(AccessControlAction.OrgUsersRead)) {\n    return getBackendSrv().get(`/api/orgs/${orgId}/users/search`, accessControlQueryParam({ perpage: perPage, page }));\n  }\n  return { orgUsers: [] };\n};\n\nconst updateOrgUserRole = (orgUser: OrgUser, orgId: UrlQueryValue) => {\n  return getBackendSrv().patch(`/api/orgs/${orgId}/users/${orgUser.userId}`, orgUser);\n};\n\nconst removeOrgUser = (orgUser: OrgUser, orgId: UrlQueryValue) => {\n  return getBackendSrv().delete(`/api/orgs/${orgId}/users/${orgUser.userId}`);\n};\n\ninterface Props extends GrafanaRouteComponentProps<{ id: string }> {}\n\nconst AdminEditOrgPage = ({ match }: Props) => {\n  const orgId = parseInt(match.params.id, 10);\n  const canWriteOrg = contextSrv.hasPermission(AccessControlAction.OrgsWrite);\n  const canReadUsers = contextSrv.hasPermission(AccessControlAction.OrgUsersRead);\n\n  const [users, setUsers] = useState<OrgUser[]>([]);\n  const [page, setPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n\n  const [orgState, fetchOrg] = useAsyncFn(() => getOrg(orgId), []);\n  const [, fetchOrgUsers] = useAsyncFn(async (page) => {\n    const result = await getOrgUsers(orgId, page);\n    const totalPages = result?.perPage !== 0 ? Math.ceil(result.totalCount / result.perPage) : 0;\n    setTotalPages(totalPages);\n    setUsers(result.orgUsers);\n    return result.orgUsers;\n  }, []);\n\n  useEffect(() => {\n    fetchOrg();\n    fetchOrgUsers(page);\n  }, [fetchOrg, fetchOrgUsers, page]);\n\n  const updateOrgName = async (name: string) => {\n    return await getBackendSrv().put(`/api/orgs/${orgId}`, { ...orgState.value, name });\n  };\n\n  const renderMissingPermissionMessage = () => (\n    <Alert severity=\"info\" title=\"Access denied\">\n      You do not have permission to see users in this organization. To update this organization, contact your server\n      administrator.\n    </Alert>\n  );\n\n  const onPageChange = (toPage: number) => {\n    setPage(toPage);\n  };\n\n  const onRemoveUser = async (orgUser: OrgUser) => {\n    await removeOrgUser(orgUser, orgId);\n    fetchOrgUsers(page);\n  };\n\n  const onRoleChange = async (role: OrgRole, orgUser: OrgUser) => {\n    await updateOrgUserRole({ ...orgUser, role }, orgId);\n    fetchOrgUsers(page);\n  };\n\n  const pageNav: NavModelItem = {\n    text: orgState?.value?.name ?? '',\n    icon: 'shield',\n    breadcrumbs: [{ title: 'Orgs', url: 'admin/orgs' }],\n    subTitle: 'Manage settings and user roles for an organization.',\n  };\n\n  return (\n    <Page navId=\"global-orgs\" pageNav={pageNav} subTitle=\"Manage settings for this specific org.\">\n      <Page.Contents>\n        <>\n          <Legend>Edit organization</Legend>\n          {orgState.value && (\n            <Form\n              defaultValues={{ orgName: orgState.value.name }}\n              onSubmit={(values: OrgNameDTO) => updateOrgName(values.orgName)}\n            >\n              {({ register, errors }) => (\n                <>\n                  <Field label=\"Name\" invalid={!!errors.orgName} error=\"Name is required\" disabled={!canWriteOrg}>\n                    <Input {...register('orgName', { required: true })} id=\"org-name-input\" />\n                  </Field>\n                  <Button type=\"submit\" disabled={!canWriteOrg}>\n                    Update\n                  </Button>\n                </>\n              )}\n            </Form>\n          )}\n\n          <div style={{ marginTop: '20px' }}>\n            <Legend>Organization users</Legend>\n            {!canReadUsers && renderMissingPermissionMessage()}\n            {canReadUsers && !!users.length && (\n              <VerticalGroup spacing=\"md\">\n                <UsersTable users={users} orgId={orgId} onRoleChange={onRoleChange} onRemoveUser={onRemoveUser} />\n                <HorizontalGroup justify=\"flex-end\">\n                  <Pagination\n                    onNavigate={onPageChange}\n                    currentPage={page}\n                    numberOfPages={totalPages}\n                    hideWhenSinglePage={true}\n                  />\n                </HorizontalGroup>\n              </VerticalGroup>\n            )}\n          </div>\n        </>\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default AdminEditOrgPage;\n","import React, { useEffect, useState } from 'react';\n\nimport { OrgRole } from '@grafana/data';\nimport { Button, ConfirmModal } from '@grafana/ui';\nimport { UserRolePicker } from 'app/core/components/RolePicker/UserRolePicker';\nimport { fetchRoleOptions } from 'app/core/components/RolePicker/api';\nimport { TagBadge } from 'app/core/components/TagFilter/TagBadge';\nimport config from 'app/core/config';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction, OrgUser, Role } from 'app/types';\n\nimport { OrgRolePicker } from '../admin/OrgRolePicker';\n\nexport interface Props {\n  users: OrgUser[];\n  orgId?: number;\n  onRoleChange: (role: OrgRole, user: OrgUser) => void;\n  onRemoveUser: (user: OrgUser) => void;\n}\n\nexport const UsersTable = ({ users, orgId, onRoleChange, onRemoveUser }: Props) => {\n  const [userToRemove, setUserToRemove] = useState<OrgUser | null>(null);\n  const [roleOptions, setRoleOptions] = useState<Role[]>([]);\n\n  useEffect(() => {\n    async function fetchOptions() {\n      try {\n        if (contextSrv.hasPermission(AccessControlAction.ActionRolesList)) {\n          let options = await fetchRoleOptions(orgId);\n          setRoleOptions(options);\n        }\n      } catch (e) {\n        console.error('Error loading options');\n      }\n    }\n    if (contextSrv.licensedAccessControlEnabled()) {\n      fetchOptions();\n    }\n  }, [orgId]);\n\n  return (\n    <>\n      <table className=\"filter-table form-inline\">\n        <thead>\n          <tr>\n            <th />\n            <th>Login</th>\n            <th>Email</th>\n            <th>Name</th>\n            <th>Seen</th>\n            <th>Role</th>\n            <th style={{ width: '34px' }} />\n            <th>Origin</th>\n            <th></th>\n          </tr>\n        </thead>\n        <tbody>\n          {users.map((user, index) => {\n            let basicRoleDisabled = !contextSrv.hasPermissionInMetadata(AccessControlAction.OrgUsersWrite, user);\n            if (config.featureToggles.onlyExternalOrgRoleSync) {\n              const isUserSynced = user?.isExternallySynced;\n              basicRoleDisabled = isUserSynced || basicRoleDisabled;\n            }\n            return (\n              <tr key={`${user.userId}-${index}`}>\n                <td className=\"width-2 text-center\">\n                  <img className=\"filter-table__avatar\" src={user.avatarUrl} alt=\"User avatar\" />\n                </td>\n                <td className=\"max-width-6\">\n                  <span className=\"ellipsis\" title={user.login}>\n                    {user.login}\n                  </span>\n                </td>\n\n                <td className=\"max-width-5\">\n                  <span className=\"ellipsis\" title={user.email}>\n                    {user.email}\n                  </span>\n                </td>\n                <td className=\"max-width-5\">\n                  <span className=\"ellipsis\" title={user.name}>\n                    {user.name}\n                  </span>\n                </td>\n                <td className=\"width-1\">{user.lastSeenAtAge}</td>\n\n                <td className=\"width-8\">\n                  {contextSrv.licensedAccessControlEnabled() ? (\n                    <UserRolePicker\n                      userId={user.userId}\n                      orgId={orgId}\n                      roleOptions={roleOptions}\n                      basicRole={user.role}\n                      onBasicRoleChange={(newRole) => onRoleChange(newRole, user)}\n                      basicRoleDisabled={basicRoleDisabled}\n                    />\n                  ) : (\n                    <OrgRolePicker\n                      aria-label=\"Role\"\n                      value={user.role}\n                      disabled={basicRoleDisabled}\n                      onChange={(newRole) => onRoleChange(newRole, user)}\n                    />\n                  )}\n                </td>\n\n                <td className=\"width-1 text-center\">\n                  {user.isDisabled && <span className=\"label label-tag label-tag--gray\">Disabled</span>}\n                </td>\n\n                <td className=\"width-1\">\n                  {Array.isArray(user.authLabels) && user.authLabels.length > 0 && (\n                    <TagBadge label={user.authLabels[0]} removeIcon={false} count={0} />\n                  )}\n                </td>\n\n                {contextSrv.hasPermissionInMetadata(AccessControlAction.OrgUsersRemove, user) && (\n                  <td className=\"text-right\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"destructive\"\n                      onClick={() => {\n                        setUserToRemove(user);\n                      }}\n                      icon=\"times\"\n                      aria-label=\"Delete user\"\n                    />\n                  </td>\n                )}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n      {Boolean(userToRemove) && (\n        <ConfirmModal\n          body={`Are you sure you want to delete user ${userToRemove?.login}?`}\n          confirmText=\"Delete\"\n          title=\"Delete\"\n          onDismiss={() => {\n            setUserToRemove(null);\n          }}\n          isOpen={true}\n          onConfirm={() => {\n            if (!userToRemove) {\n              return;\n            }\n            onRemoveUser(userToRemove);\n            setUserToRemove(null);\n          }}\n        />\n      )}\n    </>\n  );\n};\n"],"names":["perPage","getOrg","orgId","getOrgUsers","page","updateOrgUserRole","orgUser","removeOrgUser","match","canWriteOrg","canReadUsers","users","setUsers","setPage","totalPages","setTotalPages","orgState","fetchOrg","fetchOrgUsers","result","updateOrgName","name","renderMissingPermissionMessage","onPageChange","toPage","onRemoveUser","onRoleChange","role","pageNav","values","register","errors","UsersTable","userToRemove","setUserToRemove","roleOptions","setRoleOptions","fetchOptions","options","user","index","basicRoleDisabled","newRole"],"sourceRoot":""}