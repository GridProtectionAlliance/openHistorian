{"version":3,"file":"UserProfileEditPage.75c2db541537e2bddb15.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/SharedPreferences/SharedPreferences.tsx","webpack://grafana/./public/app/features/profile/UserOrganizations.tsx","webpack://grafana/./public/app/features/profile/UserProfileEditForm.tsx","webpack://grafana/./public/app/features/profile/UserSessions.tsx","webpack://grafana/./public/app/features/profile/UserTeams.tsx","webpack://grafana/./public/app/features/profile/UserProfileEditPage.tsx","webpack://grafana/./public/app/features/profile/state/actions.ts","webpack://grafana/./.yarn/__virtual__/react-use-virtual-720cbd4f86/3/opt/drone/yarncache/react-use-npm-17.4.0-0ef4521544-0889da919b.zip/node_modules/react-use/esm/useMount.js"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\n\nimport { FeatureState, SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { config, reportInteraction } from '@grafana/runtime';\nimport { Preferences as UserPreferencesDTO } from '@grafana/schema/src/raw/preferences/x/preferences_types.gen';\nimport {\n  Button,\n  Field,\n  FieldSet,\n  Form,\n  Label,\n  RadioButtonGroup,\n  Select,\n  stylesFactory,\n  TimeZonePicker,\n  WeekStartPicker,\n  FeatureBadge,\n} from '@grafana/ui';\nimport { DashboardPicker } from 'app/core/components/Select/DashboardPicker';\nimport { t, Trans } from 'app/core/internationalization';\nimport { LANGUAGES } from 'app/core/internationalization/constants';\nimport { PreferencesService } from 'app/core/services/PreferencesService';\n\nexport interface Props {\n  resourceUri: string;\n  disabled?: boolean;\n  preferenceType: 'org' | 'team' | 'user';\n  onConfirm?: () => Promise<boolean>;\n}\n\nexport type State = UserPreferencesDTO;\n\nfunction getLanguageOptions(): Array<SelectableValue<string>> {\n  const languageOptions = LANGUAGES.map((v) => ({\n    value: v.code,\n    label: v.name,\n  }));\n\n  const options = [\n    {\n      value: '',\n      label: t('common.locale.default', 'Default'),\n    },\n    ...languageOptions,\n  ];\n\n  return options;\n}\n\nconst i18nFlag = Boolean(config.featureToggles.internationalization);\n\nexport class SharedPreferences extends PureComponent<Props, State> {\n  service: PreferencesService;\n  themeOptions: SelectableValue[];\n\n  constructor(props: Props) {\n    super(props);\n\n    this.service = new PreferencesService(props.resourceUri);\n    this.state = {\n      theme: '',\n      timezone: '',\n      weekStart: '',\n      language: '',\n      queryHistory: { homeTab: '' },\n    };\n\n    this.themeOptions = [\n      { value: '', label: t('shared-preferences.theme.default-label', 'Default') },\n      { value: 'dark', label: t('shared-preferences.theme.dark-label', 'Dark') },\n      { value: 'light', label: t('shared-preferences.theme.light-label', 'Light') },\n      { value: 'system', label: t('shared-preferences.theme.system-label', 'System') },\n    ];\n  }\n\n  async componentDidMount() {\n    const prefs = await this.service.load();\n\n    this.setState({\n      homeDashboardUID: prefs.homeDashboardUID,\n      theme: prefs.theme,\n      timezone: prefs.timezone,\n      weekStart: prefs.weekStart,\n      language: prefs.language,\n      queryHistory: prefs.queryHistory,\n    });\n  }\n\n  onSubmitForm = async () => {\n    const confirmationResult = this.props.onConfirm ? await this.props.onConfirm() : true;\n\n    if (confirmationResult) {\n      const { homeDashboardUID, theme, timezone, weekStart, language, queryHistory } = this.state;\n      await this.service.update({ homeDashboardUID, theme, timezone, weekStart, language, queryHistory });\n      window.location.reload();\n    }\n  };\n\n  onThemeChanged = (value: string) => {\n    this.setState({ theme: value });\n  };\n\n  onTimeZoneChanged = (timezone?: string) => {\n    if (!timezone) {\n      return;\n    }\n    this.setState({ timezone: timezone });\n  };\n\n  onWeekStartChanged = (weekStart: string) => {\n    this.setState({ weekStart: weekStart });\n  };\n\n  onHomeDashboardChanged = (dashboardUID: string) => {\n    this.setState({ homeDashboardUID: dashboardUID });\n  };\n\n  onLanguageChanged = (language: string) => {\n    this.setState({ language });\n\n    reportInteraction('grafana_preferences_language_changed', {\n      toLanguage: language,\n      preferenceType: this.props.preferenceType,\n    });\n  };\n\n  render() {\n    const { theme, timezone, weekStart, homeDashboardUID, language } = this.state;\n    const { disabled } = this.props;\n    const styles = getStyles();\n    const languages = getLanguageOptions();\n    let currentThemeOption = this.themeOptions[0].value;\n    if (theme?.length) {\n      currentThemeOption = this.themeOptions.find((item) => item.value === theme)?.value;\n    }\n\n    return (\n      <Form onSubmit={this.onSubmitForm}>\n        {() => {\n          return (\n            <FieldSet label={<Trans i18nKey=\"shared-preferences.title\">Preferences</Trans>} disabled={disabled}>\n              <Field label={t('shared-preferences.fields.theme-label', 'UI Theme')}>\n                <RadioButtonGroup\n                  options={this.themeOptions}\n                  value={currentThemeOption}\n                  onChange={this.onThemeChanged}\n                />\n              </Field>\n\n              <Field\n                label={\n                  <Label htmlFor=\"home-dashboard-select\">\n                    <span className={styles.labelText}>\n                      <Trans i18nKey=\"shared-preferences.fields.home-dashboard-label\">Home Dashboard</Trans>\n                    </span>\n                  </Label>\n                }\n                data-testid=\"User preferences home dashboard drop down\"\n              >\n                <DashboardPicker\n                  value={homeDashboardUID}\n                  onChange={(v) => this.onHomeDashboardChanged(v?.uid ?? '')}\n                  defaultOptions={true}\n                  isClearable={true}\n                  placeholder={t('shared-preferences.fields.home-dashboard-placeholder', 'Default dashboard')}\n                  inputId=\"home-dashboard-select\"\n                />\n              </Field>\n\n              <Field\n                label={t('shared-dashboard.fields.timezone-label', 'Timezone')}\n                data-testid={selectors.components.TimeZonePicker.containerV2}\n              >\n                <TimeZonePicker\n                  includeInternal={true}\n                  value={timezone}\n                  onChange={this.onTimeZoneChanged}\n                  inputId=\"shared-preferences-timezone-picker\"\n                />\n              </Field>\n\n              <Field\n                label={t('shared-preferences.fields.week-start-label', 'Week start')}\n                data-testid={selectors.components.WeekStartPicker.containerV2}\n              >\n                <WeekStartPicker\n                  value={weekStart || ''}\n                  onChange={this.onWeekStartChanged}\n                  inputId={'shared-preferences-week-start-picker'}\n                />\n              </Field>\n\n              {i18nFlag ? (\n                <Field\n                  label={\n                    <Label htmlFor=\"locale-select\">\n                      <span className={styles.labelText}>\n                        <Trans i18nKey=\"shared-preferences.fields.locale-label\">Language</Trans>\n                      </span>\n                      <FeatureBadge featureState={FeatureState.beta} />\n                    </Label>\n                  }\n                  data-testid=\"User preferences language drop down\"\n                >\n                  <Select\n                    value={languages.find((lang) => lang.value === language)}\n                    onChange={(lang: SelectableValue<string>) => this.onLanguageChanged(lang.value ?? '')}\n                    options={languages}\n                    placeholder={t('shared-preferences.fields.locale-placeholder', 'Choose language')}\n                    inputId=\"locale-select\"\n                  />\n                </Field>\n              ) : null}\n\n              <div className=\"gf-form-button-row\">\n                <Button\n                  type=\"submit\"\n                  variant=\"primary\"\n                  data-testid={selectors.components.UserProfile.preferencesSaveButton}\n                >\n                  <Trans i18nKey=\"common.save\">Save</Trans>\n                </Button>\n              </div>\n            </FieldSet>\n          );\n        }}\n      </Form>\n    );\n  }\n}\n\nexport default SharedPreferences;\n\nconst getStyles = stylesFactory(() => {\n  return {\n    labelText: css`\n      margin-right: 6px;\n    `,\n  };\n});\n","import React, { PureComponent } from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Button, LoadingPlaceholder } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\nimport { UserDTO, UserOrg } from 'app/types';\n\nexport interface Props {\n  user: UserDTO | null;\n  orgs: UserOrg[];\n  isLoading: boolean;\n  setUserOrg: (org: UserOrg) => void;\n}\n\nexport class UserOrganizations extends PureComponent<Props> {\n  render() {\n    const { isLoading, orgs, user } = this.props;\n\n    if (isLoading) {\n      return <LoadingPlaceholder text=\"Loading organizations...\" />;\n    }\n\n    if (orgs.length === 0) {\n      return null;\n    }\n\n    return (\n      <div>\n        <h3 className=\"page-sub-heading\">\n          <Trans i18nKey=\"user-orgs.title\">Organizations</Trans>\n        </h3>\n\n        <div className=\"gf-form-group\">\n          <table className=\"filter-table form-inline\" data-testid={selectors.components.UserProfile.orgsTable}>\n            <thead>\n              <tr>\n                <th>\n                  <Trans i18nKey=\"user-orgs.name-column\">Name</Trans>\n                </th>\n                <th>\n                  <Trans i18nKey=\"user-orgs.role-column\">Role</Trans>\n                </th>\n                <th />\n              </tr>\n            </thead>\n            <tbody>\n              {orgs.map((org: UserOrg, index) => {\n                return (\n                  <tr key={index}>\n                    <td>{org.name}</td>\n                    <td>{org.role}</td>\n                    <td className=\"text-right\">\n                      {org.orgId === user?.orgId ? (\n                        <Button variant=\"secondary\" size=\"sm\" disabled>\n                          <Trans i18nKey=\"user-orgs.current-org-button\">Current</Trans>\n                        </Button>\n                      ) : (\n                        <Button\n                          variant=\"secondary\"\n                          size=\"sm\"\n                          onClick={() => {\n                            this.props.setUserOrg(org);\n                          }}\n                        >\n                          <Trans i18nKey=\"user-orgs.select-org-button\">Select organisation</Trans>\n                        </Button>\n                      )}\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default UserOrganizations;\n","import React from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Button, Field, FieldSet, Form, Icon, Input, Tooltip } from '@grafana/ui';\nimport config from 'app/core/config';\nimport { t, Trans } from 'app/core/internationalization';\nimport { UserDTO } from 'app/types';\n\nimport { ProfileUpdateFields } from './types';\n\nexport interface Props {\n  user: UserDTO | null;\n  isSavingUser: boolean;\n  updateProfile: (payload: ProfileUpdateFields) => void;\n}\n\nconst { disableLoginForm } = config;\n\nexport const UserProfileEditForm = ({ user, isSavingUser, updateProfile }: Props) => {\n  const onSubmitProfileUpdate = (data: ProfileUpdateFields) => {\n    updateProfile(data);\n  };\n\n  // check if authLabels is longer than 0 otherwise false\n  const isExternalUser: boolean = (user && user.isExternal) ?? false;\n  const authSource = isExternalUser && user && user.authLabels ? user.authLabels[0] : '';\n  const lockMessage = authSource ? ` (Synced via ${authSource})` : '';\n  const disabledEdit = disableLoginForm || isExternalUser;\n\n  return (\n    <Form onSubmit={onSubmitProfileUpdate} validateOn=\"onBlur\">\n      {({ register, errors }) => {\n        return (\n          <FieldSet>\n            <Field\n              label={t('user-profile.fields.name-label', 'Name') + lockMessage}\n              invalid={!!errors.name}\n              error={<Trans i18nKey=\"user-profile.fields.name-error\">Name is required</Trans>}\n              disabled={disabledEdit}\n            >\n              <Input\n                {...register('name', { required: true })}\n                id=\"edit-user-profile-name\"\n                placeholder={t('user-profile.fields.name-label', 'Name')}\n                defaultValue={user?.name ?? ''}\n                suffix={<InputSuffix />}\n              />\n            </Field>\n\n            <Field\n              label={t('user-profile.fields.email-label', 'Email') + lockMessage}\n              invalid={!!errors.email}\n              error={<Trans i18nKey=\"user-profile.fields.email-error\">Email is required</Trans>}\n              disabled={disabledEdit}\n            >\n              <Input\n                {...register('email', { required: true })}\n                id=\"edit-user-profile-email\"\n                placeholder={t('user-profile.fields.email-label', 'Email')}\n                defaultValue={user?.email ?? ''}\n                suffix={<InputSuffix />}\n              />\n            </Field>\n\n            <Field label={t('user-profile.fields.username-label', 'Username') + lockMessage} disabled={disabledEdit}>\n              <Input\n                {...register('login')}\n                id=\"edit-user-profile-username\"\n                defaultValue={user?.login ?? ''}\n                placeholder={t('user-profile.fields.username-label', 'Username') + lockMessage}\n                suffix={<InputSuffix />}\n              />\n            </Field>\n\n            <div className=\"gf-form-button-row\">\n              <Button\n                variant=\"primary\"\n                disabled={isSavingUser || disabledEdit}\n                data-testid={selectors.components.UserProfile.profileSaveButton}\n                type=\"submit\"\n              >\n                <Trans i18nKey=\"common.save\">Save</Trans>\n              </Button>\n            </div>\n          </FieldSet>\n        );\n      }}\n    </Form>\n  );\n};\n\nexport default UserProfileEditForm;\n\nconst InputSuffix = () => {\n  return disableLoginForm ? (\n    <Tooltip content=\"Login details locked because they are managed in another system.\">\n      <Icon name=\"lock\" />\n    </Tooltip>\n  ) : null;\n};\n","import { css, cx } from '@emotion/css';\nimport { t } from 'i18next';\nimport React, { PureComponent } from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Button, Icon, LoadingPlaceholder } from '@grafana/ui';\nimport { i18nDate, Trans } from 'app/core/internationalization';\nimport { UserSession } from 'app/types';\n\ninterface Props {\n  sessions: UserSession[];\n  isLoading: boolean;\n  revokeUserSession: (tokenId: number) => void;\n}\n\nclass UserSessions extends PureComponent<Props> {\n  render() {\n    const { isLoading, sessions, revokeUserSession } = this.props;\n    const styles = getStyles();\n\n    if (isLoading) {\n      return <LoadingPlaceholder text={<Trans i18nKey=\"user-sessions.loading\">Loading sessions...</Trans>} />;\n    }\n\n    return (\n      <div className={styles.wrapper}>\n        {sessions.length > 0 && (\n          <>\n            <h3 className=\"page-sub-heading\">Sessions</h3>\n            <div className={cx('gf-form-group', styles.table)}>\n              <table className=\"filter-table form-inline\" data-testid={selectors.components.UserProfile.sessionsTable}>\n                <thead>\n                  <tr>\n                    <th>\n                      <Trans i18nKey=\"user-session.seen-at-column\">Last seen</Trans>\n                    </th>\n                    <th>\n                      <Trans i18nKey=\"user-session.created-at-column\">Logged on</Trans>\n                    </th>\n                    <th>\n                      <Trans i18nKey=\"user-session.ip-column\">IP address</Trans>\n                    </th>\n                    <th>\n                      <Trans i18nKey=\"user-session.browser-column\">Browser & OS</Trans>\n                    </th>\n                    <th></th>\n                  </tr>\n                </thead>\n\n                <tbody>\n                  {sessions.map((session: UserSession, index) => (\n                    <tr key={index}>\n                      {session.isActive ? <td>Now</td> : <td>{session.seenAt}</td>}\n                      <td>{i18nDate(session.createdAt, { dateStyle: 'long' })}</td>\n                      <td>{session.clientIp}</td>\n                      <td>\n                        {session.browser} on {session.os} {session.osVersion}\n                      </td>\n                      <td>\n                        <Button\n                          size=\"sm\"\n                          variant=\"destructive\"\n                          onClick={() => revokeUserSession(session.id)}\n                          aria-label={t('user-session.revoke', 'Revoke user session')}\n                        >\n                          <Icon name=\"power\" />\n                        </Button>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </>\n        )}\n      </div>\n    );\n  }\n}\n\nconst getStyles = () => ({\n  wrapper: css({\n    maxWidth: '100%',\n  }),\n  table: css({\n    overflow: 'auto',\n  }),\n});\n\nexport default UserSessions;\n","import React, { PureComponent } from 'react';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\nimport { Team } from 'app/types';\n\nexport interface Props {\n  teams: Team[];\n  isLoading: boolean;\n}\n\nexport class UserTeams extends PureComponent<Props> {\n  render() {\n    const { isLoading, teams } = this.props;\n\n    if (isLoading) {\n      return <LoadingPlaceholder text=\"Loading teams...\" />;\n    }\n\n    if (teams.length === 0) {\n      return null;\n    }\n\n    return (\n      <div>\n        <h3 className=\"page-sub-heading\">Teams</h3>\n        <div className=\"gf-form-group\">\n          <table className=\"filter-table form-inline\" aria-label=\"User teams table\">\n            <thead>\n              <tr>\n                <th />\n                <th>Name</th>\n                <th>Email</th>\n                <th>Members</th>\n              </tr>\n            </thead>\n            <tbody>\n              {teams.map((team: Team, index) => {\n                return (\n                  <tr key={index}>\n                    <td className=\"width-4 text-center\">\n                      <img className=\"filter-table__avatar\" src={team.avatarUrl} alt=\"\" />\n                    </td>\n                    <td>{team.name}</td>\n                    <td>{team.email}</td>\n                    <td>{team.memberCount}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default UserTeams;\n","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { useMount } from 'react-use';\n\nimport { VerticalGroup } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport SharedPreferences from 'app/core/components/SharedPreferences/SharedPreferences';\nimport { StoreState } from 'app/types';\n\nimport UserOrganizations from './UserOrganizations';\nimport UserProfileEditForm from './UserProfileEditForm';\nimport UserSessions from './UserSessions';\nimport { UserTeams } from './UserTeams';\nimport { changeUserOrg, initUserProfilePage, revokeUserSession, updateUserProfile } from './state/actions';\n\nexport interface OwnProps {}\n\nfunction mapStateToProps(state: StoreState) {\n  const userState = state.user;\n  const { user, teams, orgs, sessions, teamsAreLoading, orgsAreLoading, sessionsAreLoading, isUpdating } = userState;\n  return {\n    orgsAreLoading,\n    sessionsAreLoading,\n    teamsAreLoading,\n    orgs,\n    sessions,\n    teams,\n    isUpdating,\n    user,\n  };\n}\n\nconst mapDispatchToProps = {\n  initUserProfilePage,\n  revokeUserSession,\n  changeUserOrg,\n  updateUserProfile,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport function UserProfileEditPage({\n  orgsAreLoading,\n  sessionsAreLoading,\n  teamsAreLoading,\n  initUserProfilePage,\n  orgs,\n  sessions,\n  teams,\n  isUpdating,\n  user,\n  revokeUserSession,\n  changeUserOrg,\n  updateUserProfile,\n}: Props) {\n  useMount(() => initUserProfilePage());\n\n  return (\n    <Page navId=\"profile/settings\">\n      <Page.Contents isLoading={!user}>\n        <VerticalGroup spacing=\"md\">\n          <UserProfileEditForm updateProfile={updateUserProfile} isSavingUser={isUpdating} user={user} />\n          <SharedPreferences resourceUri=\"user\" preferenceType=\"user\" />\n          <UserTeams isLoading={teamsAreLoading} teams={teams} />\n          <UserOrganizations isLoading={orgsAreLoading} setUserOrg={changeUserOrg} orgs={orgs} user={user} />\n          <UserSessions isLoading={sessionsAreLoading} revokeUserSession={revokeUserSession} sessions={sessions} />\n        </VerticalGroup>\n      </Page.Contents>\n    </Page>\n  );\n}\n\nexport default connector(UserProfileEditPage);\n","import { config } from '@grafana/runtime';\n\nimport { ThunkResult, UserOrg } from '../../../types';\nimport { api } from '../api';\nimport { ChangePasswordFields, ProfileUpdateFields } from '../types';\n\nimport {\n  initLoadOrgs,\n  initLoadSessions,\n  initLoadTeams,\n  orgsLoaded,\n  sessionsLoaded,\n  setUpdating,\n  teamsLoaded,\n  userLoaded,\n  userSessionRevoked,\n} from './reducers';\n\nexport function changePassword(payload: ChangePasswordFields): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(setUpdating({ updating: true }));\n    await api.changePassword(payload);\n    dispatch(setUpdating({ updating: false }));\n  };\n}\n\nexport function initUserProfilePage(): ThunkResult<void> {\n  return async function (dispatch) {\n    await dispatch(loadUser());\n    dispatch(loadTeams());\n    dispatch(loadOrgs());\n    dispatch(loadSessions());\n  };\n}\n\nexport function loadUser(): ThunkResult<void> {\n  return async function (dispatch) {\n    const user = await api.loadUser();\n    dispatch(userLoaded({ user }));\n  };\n}\n\nfunction loadTeams(): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(initLoadTeams());\n    const teams = await api.loadTeams();\n    dispatch(teamsLoaded({ teams }));\n  };\n}\n\nfunction loadOrgs(): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(initLoadOrgs());\n    const orgs = await api.loadOrgs();\n    dispatch(orgsLoaded({ orgs }));\n  };\n}\n\nfunction loadSessions(): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(initLoadSessions());\n    const sessions = await api.loadSessions();\n    dispatch(sessionsLoaded({ sessions }));\n  };\n}\n\nexport function revokeUserSession(tokenId: number): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(setUpdating({ updating: true }));\n    await api.revokeUserSession(tokenId);\n    dispatch(userSessionRevoked({ tokenId }));\n  };\n}\n\nexport function changeUserOrg(org: UserOrg): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(setUpdating({ updating: true }));\n    await api.setUserOrg(org);\n    window.location.href = config.appSubUrl + '/profile';\n  };\n}\n\nexport function updateUserProfile(payload: ProfileUpdateFields): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(setUpdating({ updating: true }));\n    await api.updateUserProfile(payload);\n    await dispatch(loadUser());\n    dispatch(setUpdating({ updating: false }));\n  };\n}\n","import useEffectOnce from './useEffectOnce';\nvar useMount = function (fn) {\n    useEffectOnce(function () {\n        fn();\n    });\n};\nexport default useMount;\n"],"names":["getLanguageOptions","languageOptions","v","i18nFlag","SharedPreferences","props","homeDashboardUID","theme","timezone","weekStart","language","queryHistory","value","dashboardUID","prefs","disabled","styles","getStyles","languages","currentThemeOption","item","lang","UserOrganizations","isLoading","orgs","user","LoadingPlaceholder","selectors","org","index","Button","disableLoginForm","config","isSavingUser","updateProfile","onSubmitProfileUpdate","data","isExternalUser","authSource","lockMessage","disabledEdit","Form","register","errors","FieldSet","Field","Input","InputSuffix","Tooltip","Icon","UserSessions","sessions","revokeUserSession","session","UserTeams","teams","team","mapStateToProps","state","userState","teamsAreLoading","orgsAreLoading","sessionsAreLoading","isUpdating","mapDispatchToProps","connector","UserProfileEditPage","initUserProfilePage","changeUserOrg","updateUserProfile","useMount","Page","changePassword","payload","dispatch","loadUser","loadTeams","loadOrgs","loadSessions","tokenId","fn"],"sourceRoot":""}