{"version":3,"file":"UserCreatePage.53525f0888ced8d7adda.js","mappings":"6NAeA,MAAMA,EAAa,MAAOC,MAAkB,KAAc,EAAE,KAAK,mBAAoBA,CAAI,EAEnFC,EAAwB,CAC5B,KAAM,OACN,GAAI,WACJ,KAAM,WACN,SAAU,6BACV,YAAa,CAAC,CAAE,MAAO,eAAgB,IAAK,aAAc,CAAC,CAC7D,EA6DA,EA3DuB,IAAM,CAC3B,MAAMC,KAAU,MAAW,EAErBC,KAAW,eACf,MAAOC,GAAkB,CACvB,KAAM,CAAE,GAAAC,CAAG,EAAI,MAAMN,EAAWK,CAAI,EAEpCF,EAAQ,KAAK,qBAAqBG,GAAI,CACxC,EACA,CAACH,CAAO,CACV,EAEA,OACE,gBAAC,IAAI,CAAC,MAAM,eAAe,QAAAD,CAAA,EACzB,gBAAC,kBACC,gBAAC,IAAI,CAAC,SAAAE,EAAoB,WAAW,UAClC,CAAC,CAAE,SAAAG,EAAU,OAAAC,CAAO,IAEjB,gCACE,gBAAC,KACC,MAAM,OACN,SAAQ,GACR,QAAS,CAAC,CAACA,EAAO,KAClB,MAAOA,EAAO,KAAO,mBAAqB,QAE1C,gBAAC,IAAK,CAAC,GAAG,aAAc,GAAGD,EAAS,OAAQ,CAAE,SAAU,EAAK,CAAC,EAAG,CACnE,EAEA,gBAAC,IAAK,CAAC,MAAM,SACX,gBAAC,IAAK,CAAC,GAAG,cAAe,GAAGA,EAAS,OAAO,EAAG,CACjD,EAEA,gBAAC,IAAK,CAAC,MAAM,YACX,gBAAC,IAAK,CAAC,GAAG,iBAAkB,GAAGA,EAAS,OAAO,EAAG,CACpD,EACA,gBAAC,KACC,MAAM,WACN,SAAQ,GACR,QAAS,CAAC,CAACC,EAAO,SAClB,MAAOA,EAAO,SAAW,8DAAgE,QAEzF,gBAAC,KACC,GAAG,iBACF,GAAGD,EAAS,WAAY,CACvB,SAAWE,GAAUA,EAAM,KAAK,IAAM,IAAMA,EAAM,QAAU,CAC9D,CAAC,EACD,KAAK,WACP,CACF,EACA,gBAAC,KAAM,CAAC,KAAK,UAAS,aAAW,CACnC,CAGN,CACF,CACF,CAEJ,C","sources":["webpack://grafana/./public/app/features/admin/UserCreatePage.tsx"],"sourcesContent":["import React, { useCallback } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport { NavModelItem } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { Form, Button, Input, Field } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\n\ninterface UserDTO {\n  name: string;\n  password: string;\n  email?: string;\n  login?: string;\n}\n\nconst createUser = async (user: UserDTO) => getBackendSrv().post('/api/admin/users', user);\n\nconst pageNav: NavModelItem = {\n  icon: 'user',\n  id: 'user-new',\n  text: 'New user',\n  subTitle: 'Create a new Grafana user.',\n  breadcrumbs: [{ title: 'Server admin', url: 'admin/users' }],\n};\n\nconst UserCreatePage = () => {\n  const history = useHistory();\n\n  const onSubmit = useCallback(\n    async (data: UserDTO) => {\n      const { id } = await createUser(data);\n\n      history.push(`/admin/users/edit/${id}`);\n    },\n    [history]\n  );\n\n  return (\n    <Page navId=\"global-users\" pageNav={pageNav}>\n      <Page.Contents>\n        <Form onSubmit={onSubmit} validateOn=\"onBlur\">\n          {({ register, errors }) => {\n            return (\n              <>\n                <Field\n                  label=\"Name\"\n                  required\n                  invalid={!!errors.name}\n                  error={errors.name ? 'Name is required' : undefined}\n                >\n                  <Input id=\"name-input\" {...register('name', { required: true })} />\n                </Field>\n\n                <Field label=\"Email\">\n                  <Input id=\"email-input\" {...register('email')} />\n                </Field>\n\n                <Field label=\"Username\">\n                  <Input id=\"username-input\" {...register('login')} />\n                </Field>\n                <Field\n                  label=\"Password\"\n                  required\n                  invalid={!!errors.password}\n                  error={errors.password ? 'Password is required and must contain at least 4 characters' : undefined}\n                >\n                  <Input\n                    id=\"password-input\"\n                    {...register('password', {\n                      validate: (value) => value.trim() !== '' && value.length >= 4,\n                    })}\n                    type=\"password\"\n                  />\n                </Field>\n                <Button type=\"submit\">Create user</Button>\n              </>\n            );\n          }}\n        </Form>\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default UserCreatePage;\n"],"names":["createUser","user","pageNav","history","onSubmit","data","id","register","errors","value"],"sourceRoot":""}