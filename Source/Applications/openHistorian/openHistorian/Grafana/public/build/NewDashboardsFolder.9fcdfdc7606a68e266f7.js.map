{"version":3,"file":"NewDashboardsFolder.9fcdfdc7606a68e266f7.js","mappings":"yQAYA,MAAMA,EAAqB,CACzB,gBAAe,IACjB,EAEMC,KAAY,WAAQ,KAAMD,CAAkB,EAU5CE,EAA8B,CAAE,WAAY,EAAG,EAE/CC,EAAwB,CAC5B,KAAM,sBACN,SAAU,6DACV,YAAa,CAAC,CAAE,MAAO,aAAc,IAAK,YAAa,CAAC,CAC1D,EAEA,SAASC,EAAoB,CAAE,gBAAAC,CAAgB,EAAU,CACvD,KAAM,CAACC,CAAW,KAAI,KAAe,EAC/BC,EAAYC,GAAwB,CACxC,MAAMC,EAAY,OAAOH,EAAY,WAAiB,SAAWA,EAAY,UAAe,OAE5FD,EAAgBG,EAAS,WAAYC,CAAS,CAChD,EAEMC,EAAsBC,GACnB,0BACkBA,CAAU,EAChC,KAAK,IACG,EACR,EACA,MAAOC,GACCA,EAAE,OACV,EAGL,OACE,gBAAC,IAAI,CAAC,MAAM,oBAAoB,QAAAT,CAAA,EAC9B,gBAAC,kBACE,CAAC,2BAAgC,gBAAC,UAAG,sBAAoB,EAC1D,gBAAC,IAAI,CAAC,cAAeD,EAAkB,SAAAK,CAAA,EACpC,CAAC,CAAE,SAAAM,EAAU,OAAAC,CAAO,IACnB,gCACE,gBAAC,KACC,MAAM,cACN,QAAS,CAAC,CAACA,EAAO,WAClB,MAAOA,EAAO,YAAcA,EAAO,WAAW,SAE9C,gBAAC,KACC,GAAG,oBACF,GAAGD,EAAS,aAAc,CACzB,SAAU,2BACV,SAAU,MAAOE,GAAM,MAAML,EAAmBK,CAAC,CACnD,CAAC,EACH,CACF,EACA,gBAAC,KAAe,KACd,gBAAC,KAAM,CAAC,KAAK,UAAS,QAAM,EAC5B,gBAAC,KAAU,CAAC,QAAQ,YAAY,KAAM,GAAG,0BAAgB,EAAe,QAExE,CACF,CACF,CAEJ,CACF,CACF,CAEJ,CAEA,QAAed,EAAUG,CAAmB,C","sources":["webpack://grafana/./public/app/features/folders/components/NewDashboardsFolder.tsx"],"sourcesContent":["import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { NavModelItem } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Button, Input, Form, Field, HorizontalGroup, LinkButton } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\n\nimport { validationSrv } from '../../manage-dashboards/services/ValidationSrv';\nimport { createNewFolder } from '../state/actions';\n\nconst mapDispatchToProps = {\n  createNewFolder,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\ninterface OwnProps {}\n\ninterface FormModel {\n  folderName: string;\n}\n\ntype Props = OwnProps & ConnectedProps<typeof connector>;\n\nconst initialFormModel: FormModel = { folderName: '' };\n\nconst pageNav: NavModelItem = {\n  text: 'Create a new folder',\n  subTitle: 'Folders provide a way to group dashboards and alert rules.',\n  breadcrumbs: [{ title: 'Dashboards', url: 'dashboards' }],\n};\n\nfunction NewDashboardsFolder({ createNewFolder }: Props) {\n  const [queryParams] = useQueryParams();\n  const onSubmit = (formData: FormModel) => {\n    const folderUid = typeof queryParams['folderUid'] === 'string' ? queryParams['folderUid'] : undefined;\n\n    createNewFolder(formData.folderName, folderUid);\n  };\n\n  const validateFolderName = (folderName: string) => {\n    return validationSrv\n      .validateNewFolderName(folderName)\n      .then(() => {\n        return true;\n      })\n      .catch((e) => {\n        return e.message;\n      });\n  };\n\n  return (\n    <Page navId=\"dashboards/browse\" pageNav={pageNav}>\n      <Page.Contents>\n        {!config.featureToggles.topnav && <h3>New dashboard folder</h3>}\n        <Form defaultValues={initialFormModel} onSubmit={onSubmit}>\n          {({ register, errors }) => (\n            <>\n              <Field\n                label=\"Folder name\"\n                invalid={!!errors.folderName}\n                error={errors.folderName && errors.folderName.message}\n              >\n                <Input\n                  id=\"folder-name-input\"\n                  {...register('folderName', {\n                    required: 'Folder name is required.',\n                    validate: async (v) => await validateFolderName(v),\n                  })}\n                />\n              </Field>\n              <HorizontalGroup>\n                <Button type=\"submit\">Create</Button>\n                <LinkButton variant=\"secondary\" href={`${config.appSubUrl}/dashboards`}>\n                  Cancel\n                </LinkButton>\n              </HorizontalGroup>\n            </>\n          )}\n        </Form>\n      </Page.Contents>\n    </Page>\n  );\n}\n\nexport default connector(NewDashboardsFolder);\n"],"names":["mapDispatchToProps","connector","initialFormModel","pageNav","NewDashboardsFolder","createNewFolder","queryParams","onSubmit","formData","folderUid","validateFolderName","folderName","e","register","errors","v"],"sourceRoot":""}