{"version":3,"file":"FolderSettingsPage.85cbfe513a802345293c.js","mappings":"uRAIA,KAAM,CAAE,MAAAA,CAAM,EAAI,cAeZC,EAAkB,CAACC,EAAmBC,IAAoB,CAC9D,MAAMC,EAAMD,EAAM,MAAM,OAAO,IAC/B,MAAO,CACL,WAAS,MAAYD,EAAM,SAAU,mBAAmBE,OAAO,KAAc,CAAC,CAAC,EAC/E,UAAWA,EACX,OAAQF,EAAM,MAChB,CACF,EAEMG,EAAqB,CACzB,eAAc,KACd,WAAU,KACV,eAAc,KACd,aAAY,IACd,EAEMC,KAAY,WAAQL,EAAiBI,CAAkB,EAQtD,MAAME,UAA2B,eAA4B,CAClE,YAAYJ,EAAc,CACxB,MAAMA,CAAK,EAUb,mBAAiBK,GAA6C,CAC5D,KAAK,MAAM,eAAeA,EAAI,OAAO,KAAK,CAC5C,EAEA,YAAS,MAAOA,GAA0C,CACxDA,EAAI,eAAe,EACnBA,EAAI,gBAAgB,EACpB,KAAK,SAAS,CAAE,UAAW,EAAK,CAAC,EACjC,MAAM,KAAK,MAAM,WAAW,KAAK,MAAM,MAAM,EAC7C,KAAK,SAAS,CAAE,UAAW,EAAM,CAAC,CACpC,EAEA,cAAYA,GAA6C,CACvDA,EAAI,gBAAgB,EACpBA,EAAI,eAAe,EAEnB,MAAMC,EAAmB,uEACzB,YACE,IAAI,KAAsB,CACxB,MAAO,SACP,KAAMA,EACN,KAAM,YACN,QAAS,SACT,UAAW,IAAM,CACf,KAAK,MAAM,aAAa,KAAK,MAAM,OAAO,GAAG,CAC/C,CACF,CAAC,CACH,CACF,EArCE,KAAK,MAAQ,CACX,UAAW,EACb,CACF,CAEA,mBAAoB,CAClB,KAAK,MAAM,eAAe,KAAK,MAAM,SAAS,CAChD,CAgCA,QAAS,CACP,KAAM,CAAE,QAAAC,EAAS,OAAAC,CAAO,EAAI,KAAK,MAEjC,OACE,gBAAC,IAAI,CAAC,MAAM,oBAAoB,QAASD,EAAQ,MAC/C,gBAAC,cAAc,UAAW,KAAK,MAAM,WACnC,gBAAC,MAAG,UAAU,oBAAmB,iBAAe,EAEhD,gBAAC,OAAI,UAAU,yBACb,gBAAC,QAAK,KAAK,qBAAqB,SAAU,KAAK,QAC7C,gBAAC,OAAI,UAAU,WACb,gBAAC,SAAM,QAAQ,eAAe,UAAU,yBAAwB,MAEhE,EACA,gBAACV,EAAA,CACC,KAAK,OACL,UAAU,yBACV,GAAG,eACH,MAAOW,EAAO,MACd,SAAU,KAAK,cACjB,CACF,EACA,gBAAC,OAAI,UAAU,sBACb,gBAAC,KAAM,CAAC,KAAK,SAAS,SAAU,CAACA,EAAO,SAAW,CAACA,EAAO,YAAY,MAEvE,EACA,gBAAC,KAAM,CAAC,QAAQ,cAAc,QAAS,KAAK,SAAU,SAAU,CAACA,EAAO,WAAW,QAEnF,CACF,CACF,CACF,CACF,CACF,CAEJ,CACF,CAEA,QAAeL,EAAUC,CAAkB,C","sources":["webpack://grafana/./public/app/features/folders/FolderSettingsPage.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { Button, LegacyForms } from '@grafana/ui';\nconst { Input } = LegacyForms;\nimport appEvents from 'app/core/app_events';\nimport { Page } from 'app/core/components/Page/Page';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { StoreState } from 'app/types';\n\nimport { ShowConfirmModalEvent } from '../../types/events';\n\nimport { deleteFolder, getFolderByUid, saveFolder } from './state/actions';\nimport { getLoadingNav } from './state/navModel';\nimport { setFolderTitle } from './state/reducers';\n\nexport interface OwnProps extends GrafanaRouteComponentProps<{ uid: string }> {}\n\nconst mapStateToProps = (state: StoreState, props: OwnProps) => {\n  const uid = props.match.params.uid;\n  return {\n    pageNav: getNavModel(state.navIndex, `folder-settings-${uid}`, getLoadingNav(2)),\n    folderUid: uid,\n    folder: state.folder,\n  };\n};\n\nconst mapDispatchToProps = {\n  getFolderByUid,\n  saveFolder,\n  setFolderTitle,\n  deleteFolder,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport interface State {\n  isLoading: boolean;\n}\n\nexport class FolderSettingsPage extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      isLoading: false,\n    };\n  }\n\n  componentDidMount() {\n    this.props.getFolderByUid(this.props.folderUid);\n  }\n\n  onTitleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    this.props.setFolderTitle(evt.target.value);\n  };\n\n  onSave = async (evt: React.FormEvent<HTMLFormElement>) => {\n    evt.preventDefault();\n    evt.stopPropagation();\n    this.setState({ isLoading: true });\n    await this.props.saveFolder(this.props.folder);\n    this.setState({ isLoading: false });\n  };\n\n  onDelete = (evt: React.MouseEvent<HTMLButtonElement>) => {\n    evt.stopPropagation();\n    evt.preventDefault();\n\n    const confirmationText = `Do you want to delete this folder and all its dashboards and alerts?`;\n    appEvents.publish(\n      new ShowConfirmModalEvent({\n        title: 'Delete',\n        text: confirmationText,\n        icon: 'trash-alt',\n        yesText: 'Delete',\n        onConfirm: () => {\n          this.props.deleteFolder(this.props.folder.uid);\n        },\n      })\n    );\n  };\n\n  render() {\n    const { pageNav, folder } = this.props;\n\n    return (\n      <Page navId=\"dashboards/browse\" pageNav={pageNav.main}>\n        <Page.Contents isLoading={this.state.isLoading}>\n          <h3 className=\"page-sub-heading\">Folder settings</h3>\n\n          <div className=\"section gf-form-group\">\n            <form name=\"folderSettingsForm\" onSubmit={this.onSave}>\n              <div className=\"gf-form\">\n                <label htmlFor=\"folder-title\" className=\"gf-form-label width-7\">\n                  Name\n                </label>\n                <Input\n                  type=\"text\"\n                  className=\"gf-form-input width-30\"\n                  id=\"folder-title\"\n                  value={folder.title}\n                  onChange={this.onTitleChange}\n                />\n              </div>\n              <div className=\"gf-form-button-row\">\n                <Button type=\"submit\" disabled={!folder.canSave || !folder.hasChanged}>\n                  Save\n                </Button>\n                <Button variant=\"destructive\" onClick={this.onDelete} disabled={!folder.canDelete}>\n                  Delete\n                </Button>\n              </div>\n            </form>\n          </div>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nexport default connector(FolderSettingsPage);\n"],"names":["Input","mapStateToProps","state","props","uid","mapDispatchToProps","connector","FolderSettingsPage","evt","confirmationText","pageNav","folder"],"sourceRoot":""}