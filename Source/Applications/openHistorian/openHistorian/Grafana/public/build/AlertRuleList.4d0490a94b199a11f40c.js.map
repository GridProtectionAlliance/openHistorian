{"version":3,"sources":["webpack:///./public/app/features/alerting/state/actions.ts","webpack:///./public/app/core/components/FilterInput/FilterInput.tsx","webpack:///./public/app/features/alerting/AlertRuleList.tsx","webpack:///./public/app/features/alerting/AlertRuleItem.tsx","webpack:///./public/app/features/alerting/state/selectors.ts"],"names":["getAlertRulesAsync","options","_this","this","dispatch","Object","tslib__WEBPACK_IMPORTED_MODULE_0__","_reducers__WEBPACK_IMPORTED_MODULE_2__","_grafana_runtime__WEBPACK_IMPORTED_MODULE_1__","get","rules","_a","sent","togglePauseAlertRule","id","getState","post","stateFilter","location","query","state","toString","__webpack_require__","d","__webpack_exports__","FilterInput","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_grafana_data__WEBPACK_IMPORTED_MODULE_1__","props","ref","a","createElement","className","labelClassName","type","inputClassName","value","onChange","event","target","placeholder","AlertRuleList","_super","apply","arguments","stateFilters","text","onStateFilterChanged","evt","updateLocation","onOpenHowTo","app_core_app_events__WEBPACK_IMPORTED_MODULE_6__","emit","app_types__WEBPACK_IMPORTED_MODULE_9__","showModal","src","modalClass","model","onSearchQueryChange","setSearchQuery","onTogglePause","rule","paused","alertStateFilterOption","react__WEBPACK_IMPORTED_MODULE_1___default","key","prototype","componentDidMount","fetchRules","componentDidUpdate","prevProps","getStateFilter","render","navModel","alertRules","search","isLoading","app_core_components_Page_Page__WEBPACK_IMPORTED_MODULE_4__","Contents","app_core_components_FilterInput_FilterInput__WEBPACK_IMPORTED_MODULE_12__","map","onClick","_AlertRuleItem__WEBPACK_IMPORTED_MODULE_5__","react__WEBPACK_IMPORTED_MODULE_1__","mapDispatchToProps","app_core_actions__WEBPACK_IMPORTED_MODULE_7__","_state_actions__WEBPACK_IMPORTED_MODULE_10__","_state_reducers__WEBPACK_IMPORTED_MODULE_13__","react_hot_loader__WEBPACK_IMPORTED_MODULE_2__","module","react_redux__WEBPACK_IMPORTED_MODULE_3__","app_core_selectors_navModel__WEBPACK_IMPORTED_MODULE_8__","navIndex","_state_selectors__WEBPACK_IMPORTED_MODULE_11__","AlertRuleItem","renderText","react_highlight_words__WEBPACK_IMPORTED_MODULE_2___default","highlightClassName","textToHighlight","searchWords","iconClassName","classnames__WEBPACK_IMPORTED_MODULE_3___default","fa","fa-play","fa-pause","ruleUrl","url","panelId","stateClass","stateIcon","href","name","stateText","stateAge","info","title","getSearchQuery","getAlertRuleItems","searchQuery","regex","RegExp","items","filter","item","test"],"mappings":"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","file":"AlertRuleList.4d0490a94b199a11f40c.js","sourcesContent":["import { getBackendSrv } from '@grafana/runtime';\nimport { AlertRuleDTO, ThunkResult } from 'app/types';\nimport { loadAlertRules, loadedAlertRules } from './reducers';\n\nexport function getAlertRulesAsync(options: { state: string }): ThunkResult<void> {\n  return async dispatch => {\n    dispatch(loadAlertRules());\n    const rules: AlertRuleDTO[] = await getBackendSrv().get('/api/alerts', options);\n    dispatch(loadedAlertRules(rules));\n  };\n}\n\nexport function togglePauseAlertRule(id: number, options: { paused: boolean }): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    await getBackendSrv().post(`/api/alerts/${id}/pause`, options);\n    const stateFilter = getState().location.query.state || 'all';\n    dispatch(getAlertRulesAsync({ state: stateFilter.toString() }));\n  };\n}\n","import React, { forwardRef } from 'react';\nimport { escapeStringForRegex, unEscapeStringFromRegex } from '@grafana/data';\n\nexport interface Props {\n  value: string | undefined;\n  placeholder?: string;\n  labelClassName?: string;\n  inputClassName?: string;\n  onChange: (value: string) => void;\n}\n\nexport const FilterInput = forwardRef<HTMLInputElement, Props>((props, ref) => (\n  <label className={props.labelClassName}>\n    <input\n      ref={ref}\n      type=\"text\"\n      className={props.inputClassName}\n      value={unEscapeStringFromRegex(props.value)}\n      onChange={event => props.onChange(escapeStringForRegex(event.target.value))}\n      placeholder={props.placeholder ? props.placeholder : null}\n    />\n    <i className=\"gf-form-input-icon fa fa-search\" />\n  </label>\n));\n","import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport Page from 'app/core/components/Page/Page';\nimport AlertRuleItem from './AlertRuleItem';\nimport appEvents from 'app/core/app_events';\nimport { updateLocation } from 'app/core/actions';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { AlertRule, CoreEvents, StoreState } from 'app/types';\nimport { getAlertRulesAsync, togglePauseAlertRule } from './state/actions';\nimport { getAlertRuleItems, getSearchQuery } from './state/selectors';\nimport { FilterInput } from 'app/core/components/FilterInput/FilterInput';\nimport { NavModel } from '@grafana/data';\nimport { setSearchQuery } from './state/reducers';\n\nexport interface Props {\n  navModel: NavModel;\n  alertRules: AlertRule[];\n  updateLocation: typeof updateLocation;\n  getAlertRulesAsync: typeof getAlertRulesAsync;\n  setSearchQuery: typeof setSearchQuery;\n  togglePauseAlertRule: typeof togglePauseAlertRule;\n  stateFilter: string;\n  search: string;\n  isLoading: boolean;\n}\n\nexport class AlertRuleList extends PureComponent<Props, any> {\n  stateFilters = [\n    { text: 'All', value: 'all' },\n    { text: 'OK', value: 'ok' },\n    { text: 'Not OK', value: 'not_ok' },\n    { text: 'Alerting', value: 'alerting' },\n    { text: 'No Data', value: 'no_data' },\n    { text: 'Paused', value: 'paused' },\n    { text: 'Pending', value: 'pending' },\n  ];\n\n  componentDidMount() {\n    this.fetchRules();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.stateFilter !== this.props.stateFilter) {\n      this.fetchRules();\n    }\n  }\n\n  async fetchRules() {\n    await this.props.getAlertRulesAsync({ state: this.getStateFilter() });\n  }\n\n  getStateFilter(): string {\n    const { stateFilter } = this.props;\n    if (stateFilter) {\n      return stateFilter.toString();\n    }\n    return 'all';\n  }\n\n  onStateFilterChanged = (evt: React.ChangeEvent<HTMLSelectElement>) => {\n    this.props.updateLocation({\n      query: { state: evt.target.value },\n    });\n  };\n\n  onOpenHowTo = () => {\n    appEvents.emit(CoreEvents.showModal, {\n      src: 'public/app/features/alerting/partials/alert_howto.html',\n      modalClass: 'confirm-modal',\n      model: {},\n    });\n  };\n\n  onSearchQueryChange = (value: string) => {\n    this.props.setSearchQuery(value);\n  };\n\n  onTogglePause = (rule: AlertRule) => {\n    this.props.togglePauseAlertRule(rule.id, { paused: rule.state !== 'paused' });\n  };\n\n  alertStateFilterOption = ({ text, value }: { text: string; value: string }) => {\n    return (\n      <option key={value} value={value}>\n        {text}\n      </option>\n    );\n  };\n\n  render() {\n    const { navModel, alertRules, search, isLoading } = this.props;\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={isLoading}>\n          <div className=\"page-action-bar\">\n            <div className=\"gf-form gf-form--grow\">\n              <FilterInput\n                labelClassName=\"gf-form--has-input-icon gf-form--grow\"\n                inputClassName=\"gf-form-input\"\n                placeholder=\"Search alerts\"\n                value={search}\n                onChange={this.onSearchQueryChange}\n              />\n            </div>\n            <div className=\"gf-form\">\n              <label className=\"gf-form-label\">States</label>\n\n              <div className=\"gf-form-select-wrapper width-13\">\n                <select className=\"gf-form-input\" onChange={this.onStateFilterChanged} value={this.getStateFilter()}>\n                  {this.stateFilters.map(this.alertStateFilterOption)}\n                </select>\n              </div>\n            </div>\n            <div className=\"page-action-bar__spacer\" />\n            <a className=\"btn btn-secondary\" onClick={this.onOpenHowTo}>\n              How to add an alert\n            </a>\n          </div>\n          <section>\n            <ol className=\"alert-rule-list\">\n              {alertRules.map(rule => (\n                <AlertRuleItem\n                  rule={rule}\n                  key={rule.id}\n                  search={search}\n                  onTogglePause={() => this.onTogglePause(rule)}\n                />\n              ))}\n            </ol>\n          </section>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nconst mapStateToProps = (state: StoreState) => ({\n  navModel: getNavModel(state.navIndex, 'alert-list'),\n  alertRules: getAlertRuleItems(state.alertRules),\n  stateFilter: state.location.query.state,\n  search: getSearchQuery(state.alertRules),\n  isLoading: state.alertRules.isLoading,\n});\n\nconst mapDispatchToProps = {\n  updateLocation,\n  getAlertRulesAsync,\n  setSearchQuery,\n  togglePauseAlertRule,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(AlertRuleList));\n","import React, { PureComponent } from 'react';\n// @ts-ignore\nimport Highlighter from 'react-highlight-words';\nimport classNames from 'classnames';\nimport { AlertRule } from '../../types';\n\nexport interface Props {\n  rule: AlertRule;\n  search: string;\n  onTogglePause: () => void;\n}\n\nclass AlertRuleItem extends PureComponent<Props> {\n  renderText(text: string) {\n    return (\n      <Highlighter\n        highlightClassName=\"highlight-search-match\"\n        textToHighlight={text}\n        searchWords={[this.props.search]}\n      />\n    );\n  }\n\n  render() {\n    const { rule, onTogglePause } = this.props;\n\n    const iconClassName = classNames({\n      fa: true,\n      'fa-play': rule.state === 'paused',\n      'fa-pause': rule.state !== 'paused',\n    });\n\n    const ruleUrl = `${rule.url}?panelId=${rule.panelId}&fullscreen&edit&tab=alert`;\n\n    return (\n      <li className=\"alert-rule-item\">\n        <span className={`alert-rule-item__icon ${rule.stateClass}`}>\n          <i className={rule.stateIcon} />\n        </span>\n        <div className=\"alert-rule-item__body\">\n          <div className=\"alert-rule-item__header\">\n            <div className=\"alert-rule-item__name\">\n              <a href={ruleUrl}>{this.renderText(rule.name)}</a>\n            </div>\n            <div className=\"alert-rule-item__text\">\n              <span className={`${rule.stateClass}`}>{this.renderText(rule.stateText)}</span>\n              <span className=\"alert-rule-item__time\"> for {rule.stateAge}</span>\n            </div>\n          </div>\n          {rule.info && <div className=\"small muted alert-rule-item__info\">{this.renderText(rule.info)}</div>}\n        </div>\n\n        <div className=\"alert-rule-item__actions\">\n          <button\n            className=\"btn btn-small btn-inverse alert-list__btn width-2\"\n            title=\"Pausing an alert rule prevents it from executing\"\n            onClick={onTogglePause}\n          >\n            <i className={iconClassName} />\n          </button>\n          <a className=\"btn btn-small btn-inverse alert-list__btn width-2\" href={ruleUrl} title=\"Edit alert rule\">\n            <i className=\"gicon gicon-cog\" />\n          </a>\n        </div>\n      </li>\n    );\n  }\n}\n\nexport default AlertRuleItem;\n","import { AlertRulesState } from 'app/types';\n\nexport const getSearchQuery = (state: AlertRulesState) => state.searchQuery;\n\nexport const getAlertRuleItems = (state: AlertRulesState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  return state.items.filter(item => {\n    return regex.test(item.name) || regex.test(item.stateText) || regex.test(item.info);\n  });\n};\n"],"sourceRoot":""}