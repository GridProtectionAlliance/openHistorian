{"version":3,"file":"dashListPanel.d68c2f1cab6a53912c18.js","mappings":"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","sources":["webpack://grafana/./public/app/plugins/panel/dashlist/styles.ts","webpack://grafana/./public/app/plugins/panel/dashlist/DashList.tsx","webpack://grafana/./public/app/plugins/panel/dashlist/migrations.ts","webpack://grafana/./public/app/plugins/panel/dashlist/panelcfg.gen.ts","webpack://grafana/./public/app/plugins/panel/dashlist/module.tsx"],"sourcesContent":["import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    dashlistSectionHeader: css({\n      padding: theme.spacing(0.25, 1),\n      marginRight: theme.spacing(1),\n    }),\n    dashlistSection: css({\n      marginBottom: theme.spacing(2),\n      paddingTop: theme.spacing(0.5),\n    }),\n    dashlistLink: css({\n      display: 'flex',\n      cursor: 'pointer',\n      borderBottom: `1px solid ${theme.colors.border.weak}`,\n      margin: theme.spacing(1),\n      padding: theme.spacing(1),\n      alignItems: 'center',\n\n      '&:hover': {\n        a: {\n          color: theme.colors.text.link,\n          textDecoration: 'underline',\n        },\n      },\n    }),\n    dashlistFolder: css({\n      color: theme.colors.text.secondary,\n      fontSize: theme.typography.bodySmall.fontSize,\n      lineHeight: theme.typography.body.lineHeight,\n    }),\n    dashlistTitle: css({\n      '&::after': {\n        position: 'absolute',\n        content: '\"\"',\n        left: 0,\n        top: 0,\n        bottom: 0,\n        right: 0,\n      },\n    }),\n    dashlistLinkBody: css({\n      flexGrow: 1,\n    }),\n    dashlistItem: css({\n      position: 'relative',\n      listStyle: 'none',\n    }),\n  };\n};\n","import { take } from 'lodash';\nimport { useEffect, useMemo, useState } from 'react';\nimport * as React from 'react';\n\nimport {\n  DataLinkBuiltInVars,\n  DateTime,\n  InterpolateFunction,\n  PanelProps,\n  textUtil,\n  UrlQueryValue,\n  urlUtil,\n} from '@grafana/data';\nimport { CustomScrollbar, useStyles2, IconButton } from '@grafana/ui';\nimport { updateNavIndex } from 'app/core/actions';\nimport { getConfig } from 'app/core/config';\nimport { appEvents } from 'app/core/core';\nimport { useBusEvent } from 'app/core/hooks/useBusEvent';\nimport { ID_PREFIX, setStarred } from 'app/core/reducers/navBarTree';\nimport { removeNavIndex } from 'app/core/reducers/navModel';\nimport { getBackendSrv } from 'app/core/services/backend_srv';\nimport impressionSrv from 'app/core/services/impression_srv';\nimport { getDashboardSrv } from 'app/features/dashboard/services/DashboardSrv';\nimport { DashboardSearchItem } from 'app/features/search/types';\nimport { VariablesChanged } from 'app/features/variables/types';\nimport { useDispatch, useSelector } from 'app/types';\n\nimport { Options } from './panelcfg.gen';\nimport { getStyles } from './styles';\n\ntype Dashboard = DashboardSearchItem & { id?: number; isSearchResult?: boolean; isRecent?: boolean };\n\ninterface DashboardGroup {\n  show: boolean;\n  header: string;\n  dashboards: Dashboard[];\n}\n\nasync function fetchDashboards(options: Options, replaceVars: InterpolateFunction) {\n  let starredDashboards: Promise<DashboardSearchItem[]> = Promise.resolve([]);\n\n  if (options.showStarred) {\n    const params = { limit: options.maxItems, starred: 'true' };\n    starredDashboards = getBackendSrv().search(params);\n  }\n\n  let recentDashboards: Promise<DashboardSearchItem[]> = Promise.resolve([]);\n  let dashUIDs: string[] = [];\n  if (options.showRecentlyViewed) {\n    let uids = await impressionSrv.getDashboardOpened();\n    dashUIDs = take<string>(uids, options.maxItems);\n    recentDashboards = getBackendSrv().search({ dashboardUIDs: dashUIDs, limit: options.maxItems });\n  }\n\n  let searchedDashboards: Promise<DashboardSearchItem[]> = Promise.resolve([]);\n  if (options.showSearch) {\n    const uid = options.folderUID === '' ? 'general' : options.folderUID;\n    const params = {\n      limit: options.maxItems,\n      query: replaceVars(options.query, {}, 'text'),\n      folderUIDs: uid,\n      tag: options.tags.map((tag: string) => replaceVars(tag, {}, 'text')),\n      type: 'dash-db',\n    };\n\n    searchedDashboards = getBackendSrv().search(params);\n  }\n\n  const [starred, searched, recent] = await Promise.all([starredDashboards, searchedDashboards, recentDashboards]);\n\n  // We deliberately deal with recent dashboards first so that the order of dash IDs is preserved\n  let dashMap = new Map<string, Dashboard>();\n  for (const dashUID of dashUIDs) {\n    const dash = recent.find((d) => d.uid === dashUID);\n    if (dash) {\n      dashMap.set(dashUID, { ...dash, isRecent: true });\n    }\n  }\n\n  searched.forEach((dash) => {\n    if (!dash.uid) {\n      return;\n    }\n    if (dashMap.has(dash.uid)) {\n      dashMap.get(dash.uid)!.isSearchResult = true;\n    } else {\n      dashMap.set(dash.uid, { ...dash, isSearchResult: true });\n    }\n  });\n\n  starred.forEach((dash) => {\n    if (!dash.uid) {\n      return;\n    }\n    if (dashMap.has(dash.uid)) {\n      dashMap.get(dash.uid)!.isStarred = true;\n    } else {\n      dashMap.set(dash.uid, { ...dash, isStarred: true });\n    }\n  });\n\n  return dashMap;\n}\n\nexport function DashList(props: PanelProps<Options>) {\n  const [dashboards, setDashboards] = useState(new Map<string, Dashboard>());\n  const dispatch = useDispatch();\n  const navIndex = useSelector((state) => state.navIndex);\n\n  useEffect(() => {\n    fetchDashboards(props.options, props.replaceVariables).then((dashes) => {\n      setDashboards(dashes);\n    });\n  }, [props.options, props.replaceVariables, props.renderCounter]);\n\n  const toggleDashboardStar = async (e: React.SyntheticEvent, dash: Dashboard) => {\n    const { uid, title, url } = dash;\n    e.preventDefault();\n    e.stopPropagation();\n\n    const isStarred = await getDashboardSrv().starDashboard(dash.uid, dash.isStarred);\n    const updatedDashboards = new Map(dashboards);\n    updatedDashboards.set(dash?.uid ?? '', { ...dash, isStarred });\n    setDashboards(updatedDashboards);\n    dispatch(setStarred({ id: uid ?? '', title, url, isStarred }));\n\n    const starredNavItem = navIndex['starred'];\n    if (isStarred) {\n      starredNavItem.children?.push({\n        id: ID_PREFIX + uid,\n        text: title,\n        url: url ?? '',\n        parentItem: starredNavItem,\n      });\n    } else {\n      dispatch(removeNavIndex(ID_PREFIX + uid));\n      const indexToRemove = starredNavItem.children?.findIndex((element) => element.id === ID_PREFIX + uid);\n      if (indexToRemove) {\n        starredNavItem.children?.splice(indexToRemove, 1);\n      }\n    }\n    dispatch(updateNavIndex(starredNavItem));\n  };\n\n  const [starredDashboards, recentDashboards, searchedDashboards] = useMemo(() => {\n    const dashboardList = [...dashboards.values()];\n    return [\n      dashboardList.filter((dash) => dash.isStarred).sort((a, b) => a.title.localeCompare(b.title)),\n      dashboardList.filter((dash) => dash.isRecent),\n      dashboardList.filter((dash) => dash.isSearchResult).sort((a, b) => a.title.localeCompare(b.title)),\n    ];\n  }, [dashboards]);\n\n  const { showStarred, showRecentlyViewed, showHeadings, showFolderNames, showSearch } = props.options;\n\n  const dashboardGroups: DashboardGroup[] = [\n    {\n      header: 'Starred dashboards',\n      dashboards: starredDashboards,\n      show: showStarred,\n    },\n    {\n      header: 'Recently viewed dashboards',\n      dashboards: recentDashboards,\n      show: showRecentlyViewed,\n    },\n    {\n      header: 'Search',\n      dashboards: searchedDashboards,\n      show: showSearch,\n    },\n  ];\n\n  const css = useStyles2(getStyles);\n  const urlParams = useDashListUrlParams(props);\n\n  const renderList = (dashboards: Dashboard[]) => (\n    <ul>\n      {dashboards.map((dash) => {\n        let url = dash.url;\n\n        url = urlUtil.appendQueryToUrl(url, urlParams);\n        url = getConfig().disableSanitizeHtml ? url : textUtil.sanitizeUrl(url);\n\n        return (\n          <li className={css.dashlistItem} key={`dash-${dash.uid}`}>\n            <div className={css.dashlistLink}>\n              <div className={css.dashlistLinkBody}>\n                <a className={css.dashlistTitle} href={url}>\n                  {dash.title}\n                </a>\n                {showFolderNames && dash.folderTitle && <div className={css.dashlistFolder}>{dash.folderTitle}</div>}\n              </div>\n              <IconButton\n                tooltip={dash.isStarred ? `Unmark \"${dash.title}\" as favorite` : `Mark \"${dash.title}\" as favorite`}\n                name={dash.isStarred ? 'favorite' : 'star'}\n                iconType={dash.isStarred ? 'mono' : 'default'}\n                onClick={(e) => toggleDashboardStar(e, dash)}\n              />\n            </div>\n          </li>\n        );\n      })}\n    </ul>\n  );\n\n  return (\n    <CustomScrollbar autoHeightMin=\"100%\" autoHeightMax=\"100%\">\n      {dashboardGroups.map(\n        ({ show, header, dashboards }, i) =>\n          show && (\n            <div className={css.dashlistSection} key={`dash-group-${i}`}>\n              {showHeadings && <h6 className={css.dashlistSectionHeader}>{header}</h6>}\n              {renderList(dashboards)}\n            </div>\n          )\n      )}\n    </CustomScrollbar>\n  );\n}\n\nfunction useDashListUrlParams(props: PanelProps<Options>) {\n  // We don't care about the payload just want to get re-render when this event is published\n  useBusEvent(appEvents, VariablesChanged);\n\n  let params: { [key: string]: string | DateTime | UrlQueryValue } = {};\n\n  if (props.options.keepTime) {\n    params[`\\$${DataLinkBuiltInVars.keepTime}`] = true;\n  }\n\n  if (props.options.includeVars) {\n    params[`\\$${DataLinkBuiltInVars.includeVars}`] = true;\n  }\n\n  const urlParms = props.replaceVariables(urlUtil.toUrlParams(params));\n\n  return urlParms;\n}\n","import { PanelModel } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { FolderDTO } from 'app/types';\n\nimport { Options } from './panelcfg.gen';\n\nasync function getFolderUID(folderID: number): Promise<string> {\n  // folderID 0 is always the fake General/Dashboards folder, which always has a UID of empty string\n  if (folderID === 0) {\n    return '';\n  }\n\n  const folderDTO = await getBackendSrv().get<FolderDTO>(`/api/folders/id/${folderID}`, undefined, undefined, {\n    showErrorAlert: false,\n  });\n\n  return folderDTO.uid;\n}\n\nexport interface AngularModel {\n  /** @deprecated */\n  starred?: boolean;\n  /** @deprecated */\n  recent?: boolean;\n  /** @deprecated */\n  search?: boolean;\n  /** @deprecated */\n  headings?: boolean;\n  /** @deprecated */\n  limit?: number;\n  /** @deprecated */\n  query?: string;\n  /** @deprecated */\n  folderId?: number;\n  /** @deprecated */\n  tags?: string[];\n}\n\nexport async function dashlistMigrationHandler(panel: PanelModel<Options> & AngularModel) {\n  // Convert old angular model to new react model\n  const newOptions: Options = {\n    ...panel.options,\n    showStarred: panel.options.showStarred ?? panel.starred,\n    showRecentlyViewed: panel.options.showRecentlyViewed ?? panel.recent,\n    showSearch: panel.options.showSearch ?? panel.search,\n    showHeadings: panel.options.showHeadings ?? panel.headings,\n    maxItems: panel.options.maxItems ?? panel.limit,\n    query: panel.options.query ?? panel.query,\n    folderId: panel.options.folderId ?? panel.folderId,\n    tags: panel.options.tags ?? panel.tags,\n  };\n\n  // Delete old angular properties\n  const previousVersion = parseFloat(panel.pluginVersion || '6.1');\n  if (previousVersion < 6.3) {\n    const oldProps = ['starred', 'recent', 'search', 'headings', 'limit', 'query', 'folderId'] as const;\n    oldProps.forEach((prop) => delete panel[prop]);\n  }\n\n  // Convert the folderId to folderUID. Uses the API to do the conversion.\n  if (newOptions.folderId !== undefined) {\n    const folderId = newOptions.folderId;\n\n    // If converting ID to UID fails, the panel will not be migrated and will show incorrectly\n    try {\n      const folderUID = await getFolderUID(folderId);\n      newOptions.folderUID = folderUID;\n      delete newOptions.folderId;\n    } catch (err) {\n      console.warn('Dashlist: Error migrating folder ID to UID', err);\n    }\n  }\n\n  return newOptions;\n}\n","// Code generated - EDITING IS FUTILE. DO NOT EDIT.\n//\n// Generated by:\n//     public/app/plugins/gen.go\n// Using jennies:\n//     TSTypesJenny\n//     PluginTsTypesJenny\n//\n// Run 'make gen-cue' from repository root to regenerate.\n\nexport interface Options {\n  /**\n   * folderId is deprecated, and migrated to folderUid on panel init\n   */\n  folderId?: number;\n  folderUID?: string;\n  includeVars: boolean;\n  keepTime: boolean;\n  maxItems: number;\n  query: string;\n  showFolderNames: boolean;\n  showHeadings: boolean;\n  showRecentlyViewed: boolean;\n  showSearch: boolean;\n  showStarred: boolean;\n  tags: Array<string>;\n}\n\nexport const defaultOptions: Partial<Options> = {\n  includeVars: false,\n  keepTime: false,\n  maxItems: 10,\n  query: '',\n  showFolderNames: true,\n  showHeadings: true,\n  showRecentlyViewed: false,\n  showSearch: false,\n  showStarred: true,\n  tags: [],\n};\n","import { PanelPlugin } from '@grafana/data';\nimport { TagsInput } from '@grafana/ui';\nimport { FolderPicker } from 'app/core/components/Select/FolderPicker';\nimport { PermissionLevelString } from 'app/types';\n\nimport { DashList } from './DashList';\nimport { dashlistMigrationHandler } from './migrations';\nimport { defaultOptions, Options } from './panelcfg.gen';\n\nexport const plugin = new PanelPlugin<Options>(DashList)\n  .setPanelOptions((builder) => {\n    builder\n      .addBooleanSwitch({\n        path: 'keepTime',\n        name: 'Include current time range',\n        defaultValue: defaultOptions.keepTime,\n      })\n      .addBooleanSwitch({\n        path: 'includeVars',\n        name: 'Include current template variable values',\n        defaultValue: defaultOptions.includeVars,\n      })\n      .addBooleanSwitch({\n        path: 'showStarred',\n        name: 'Starred',\n        defaultValue: defaultOptions.showStarred,\n      })\n      .addBooleanSwitch({\n        path: 'showRecentlyViewed',\n        name: 'Recently viewed',\n        defaultValue: defaultOptions.showRecentlyViewed,\n      })\n      .addBooleanSwitch({\n        path: 'showSearch',\n        name: 'Search',\n        defaultValue: defaultOptions.showSearch,\n      })\n      .addBooleanSwitch({\n        path: 'showHeadings',\n        name: 'Show headings',\n        defaultValue: defaultOptions.showHeadings,\n      })\n      .addBooleanSwitch({\n        path: 'showFolderNames',\n        name: 'Show folder names',\n        defaultValue: defaultOptions.showFolderNames,\n      })\n      .addNumberInput({\n        path: 'maxItems',\n        name: 'Max items',\n        defaultValue: defaultOptions.maxItems,\n      })\n      .addTextInput({\n        path: 'query',\n        name: 'Query',\n        defaultValue: defaultOptions.query,\n      })\n      .addCustomEditor({\n        path: 'folderUID',\n        name: 'Folder',\n        id: 'folderUID',\n        defaultValue: undefined,\n        editor: function RenderFolderPicker({ value, onChange }) {\n          return (\n            <FolderPicker\n              clearable\n              permission={PermissionLevelString.View}\n              value={value}\n              onChange={(folderUID) => onChange(folderUID)}\n            />\n          );\n        },\n      })\n      .addCustomEditor({\n        id: 'tags',\n        path: 'tags',\n        name: 'Tags',\n        description: '',\n        defaultValue: defaultOptions.tags,\n        editor(props) {\n          return <TagsInput tags={props.value} onChange={props.onChange} />;\n        },\n      });\n  })\n  .setMigrationHandler(dashlistMigrationHandler);\n"],"names":["getStyles","theme","fetchDashboards","options","replaceVars","starredDashboards","params","recentDashboards","dashUIDs","uids","searchedDashboards","uid","tag","starred","searched","recent","dashMap","dashUID","dash","d","DashList","props","dashboards","setDashboards","dispatch","navIndex","state","dashes","toggleDashboardStar","e","title","url","isStarred","updatedDashboards","starredNavItem","indexToRemove","element","dashboardList","a","b","showStarred","showRecentlyViewed","showHeadings","showFolderNames","showSearch","dashboardGroups","css","urlParams","useDashListUrlParams","renderList","IconButton","CustomScrollbar","show","header","i","useBusEvent","getFolderUID","folderID","dashlistMigrationHandler","panel","newOptions","prop","folderId","folderUID","err","defaultOptions","PanelPlugin","builder","value","onChange","FolderPicker","TagsInput"],"sourceRoot":""}