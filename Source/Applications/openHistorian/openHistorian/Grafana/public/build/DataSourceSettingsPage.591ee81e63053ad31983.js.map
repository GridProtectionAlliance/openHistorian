{"version":3,"sources":["webpack:///./public/app/features/datasources/settings/ButtonRow.tsx","webpack:///./public/app/features/plugins/PluginStateInfo.tsx","webpack:///./public/app/features/datasources/settings/PluginSettings.tsx","webpack:///./public/app/features/datasources/settings/BasicSettings.tsx","webpack:///./public/app/features/datasources/settings/DataSourceSettingsPage.tsx","webpack:///./public/app/core/components/connectWithCleanUp.tsx"],"names":["ButtonRow","isReadOnly","onDelete","onSubmit","onTest","className","type","disabled","onClick","event","aria-label","selectors","pages","DataSource","saveAndTest","delete","href","config","appSubUrl","PluginStateinfo","props","text","state","PluginState","alpha","beta","getPluginStateInfoText","css","PluginSettings","onModelChanged","dataSource","onModelChange","scopeProps","ctrl","datasourceMeta","dataSourceMeta","current","_","cloneDeep","bind","plugin","this","element","components","ConfigEditor","loader","getAngularLoader","component","load","prevProps","digest","destroy","ref","React","createElement","options","onOptionsChange","PureComponent","Input","LegacyForms","Switch","BasicSettings","dataSourceName","isDefault","onDefaultChange","onNameChange","style","marginRight","tooltip","value","placeholder","onChange","target","required","name","label","checked","DataSourceSettingsPage","evt","preventDefault","updateDataSource","testDataSource","appEvents","emit","CoreEvents","showConfirmModal","title","yesText","icon","onConfirm","confirmDelete","deleteDataSource","dataSourceLoaded","initDataSourceSettings","pageId","readOnly","loadError","showDelete","msg","toString","data","message","isString","node","subTitle","nav","main","navModel","Contents","page","configPages","p","id","body","query","setDataSourceName","setIsDefault","testingStatus","renderIsReadOnlyMessage","status","alert","alertMessage","renderLoadError","isLoading","hasDataSource","renderConfigPageBody","renderSettings","mapDispatchToProps","loadDataSource","hot","module","connectWithCleanUp","getRouteParamsId","location","getDataSource","dataSources","dataSourceSettings","getNavModel","navIndex","getDataSourceLoadingNav","getDataSourceMeta","mapStateToProps","stateSelector","Component","ConnectedComponent","connect","ConnectedComponentWithCleanUp","dispatch","useDispatch","useEffect","cleanUpAction","displayName","hoistNonReactStatics"],"mappings":"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","file":"DataSourceSettingsPage.591ee81e63053ad31983.js","sourcesContent":["import React, { FC } from 'react';\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport config from 'app/core/config';\n\nexport interface Props {\n  isReadOnly: boolean;\n  onDelete: () => void;\n  onSubmit: (event: any) => void;\n  onTest: (event: any) => void;\n}\n\nconst ButtonRow: FC<Props> = ({ isReadOnly, onDelete, onSubmit, onTest }) => {\n  return (\n    <div className=\"gf-form-button-row\">\n      {!isReadOnly && (\n        <button\n          type=\"submit\"\n          className=\"btn btn-primary\"\n          disabled={isReadOnly}\n          onClick={event => onSubmit(event)}\n          aria-label={selectors.pages.DataSource.saveAndTest}\n        >\n          Save &amp; Test\n        </button>\n      )}\n      {isReadOnly && (\n        <button type=\"submit\" className=\"btn btn-success\" onClick={onTest}>\n          Test\n        </button>\n      )}\n      <button\n        type=\"button\"\n        className=\"btn btn-danger\"\n        disabled={isReadOnly}\n        onClick={onDelete}\n        aria-label={selectors.pages.DataSource.delete}\n      >\n        Delete\n      </button>\n      <a className=\"btn btn-inverse\" href={`${config.appSubUrl}/datasources`}>\n        Back\n      </a>\n    </div>\n  );\n};\n\nexport default ButtonRow;\n","import React, { FC } from 'react';\nimport { AlphaNotice } from '@grafana/ui';\nimport { PluginState } from '@grafana/data';\nimport { css } from 'emotion';\n\ninterface Props {\n  state?: PluginState;\n}\n\nfunction getPluginStateInfoText(state?: PluginState): string | null {\n  switch (state) {\n    case PluginState.alpha:\n      return 'Alpha Plugin: This plugin is a work in progress and updates may include breaking changes';\n    case PluginState.beta:\n      return 'Beta Plugin: There could be bugs and minor breaking changes to this plugin';\n  }\n  return null;\n}\n\nconst PluginStateinfo: FC<Props> = props => {\n  const text = getPluginStateInfoText(props.state);\n\n  if (!text) {\n    return null;\n  }\n\n  return (\n    <AlphaNotice\n      state={props.state}\n      text={text}\n      className={css`\n        margin-left: 16px;\n      `}\n    />\n  );\n};\n\nexport default PluginStateinfo;\n","import React, { PureComponent } from 'react';\nimport _ from 'lodash';\nimport {\n  DataSourceSettings,\n  DataSourcePlugin,\n  DataSourcePluginMeta,\n  DataSourceApi,\n  DataQuery,\n  DataSourceJsonData,\n} from '@grafana/data';\nimport { getAngularLoader, AngularComponent } from '@grafana/runtime';\n\nexport type GenericDataSourcePlugin = DataSourcePlugin<DataSourceApi<DataQuery, DataSourceJsonData>>;\n\nexport interface Props {\n  plugin: GenericDataSourcePlugin;\n  dataSource: DataSourceSettings;\n  dataSourceMeta: DataSourcePluginMeta;\n  onModelChange: (dataSource: DataSourceSettings) => void;\n}\n\nexport class PluginSettings extends PureComponent<Props> {\n  element: any;\n  component: AngularComponent;\n  scopeProps: {\n    ctrl: { datasourceMeta: DataSourcePluginMeta; current: DataSourceSettings };\n    onModelChanged: (dataSource: DataSourceSettings) => void;\n  };\n\n  constructor(props: Props) {\n    super(props);\n\n    this.scopeProps = {\n      ctrl: { datasourceMeta: props.dataSourceMeta, current: _.cloneDeep(props.dataSource) },\n      onModelChanged: this.onModelChanged,\n    };\n    this.onModelChanged = this.onModelChanged.bind(this);\n  }\n\n  componentDidMount() {\n    const { plugin } = this.props;\n\n    if (!this.element) {\n      return;\n    }\n\n    if (!plugin.components.ConfigEditor) {\n      // React editor is not specified, let's render angular editor\n      // How to apprach this better? Introduce ReactDataSourcePlugin interface and typeguard it here?\n      const loader = getAngularLoader();\n      const template = '<plugin-component type=\"datasource-config-ctrl\" />';\n\n      this.component = loader.load(this.element, this.scopeProps, template);\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { plugin } = this.props;\n    if (!plugin.components.ConfigEditor && this.props.dataSource !== prevProps.dataSource) {\n      this.scopeProps.ctrl.current = _.cloneDeep(this.props.dataSource);\n\n      this.component.digest();\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.component) {\n      this.component.destroy();\n    }\n  }\n\n  onModelChanged = (dataSource: DataSourceSettings) => {\n    this.props.onModelChange(dataSource);\n  };\n\n  render() {\n    const { plugin, dataSource } = this.props;\n\n    if (!plugin) {\n      return null;\n    }\n\n    return (\n      <div ref={element => (this.element = element)}>\n        {plugin.components.ConfigEditor &&\n          React.createElement(plugin.components.ConfigEditor, {\n            options: dataSource,\n            onOptionsChange: this.onModelChanged,\n          })}\n      </div>\n    );\n  }\n}\n\nexport default PluginSettings;\n","import React, { FC } from 'react';\nimport { InlineFormLabel, LegacyForms } from '@grafana/ui';\nimport { selectors } from '@grafana/e2e-selectors';\n\nconst { Input, Switch } = LegacyForms;\n\nexport interface Props {\n  dataSourceName: string;\n  isDefault: boolean;\n  onNameChange: (name: string) => void;\n  onDefaultChange: (value: boolean) => void;\n}\n\nconst BasicSettings: FC<Props> = ({ dataSourceName, isDefault, onDefaultChange, onNameChange }) => {\n  return (\n    <div className=\"gf-form-group\" aria-label=\"Datasource settings page basic settings\">\n      <div className=\"gf-form-inline\">\n        <div className=\"gf-form max-width-30\" style={{ marginRight: '3px' }}>\n          <InlineFormLabel\n            tooltip={\n              'The name is used when you select the data source in panels. The Default data source is ' +\n              'preselected in new panels.'\n            }\n          >\n            Name\n          </InlineFormLabel>\n          <Input\n            className=\"gf-form-input max-width-23\"\n            type=\"text\"\n            value={dataSourceName}\n            placeholder=\"Name\"\n            onChange={event => onNameChange(event.target.value)}\n            required\n            aria-label={selectors.pages.DataSource.name}\n          />\n        </div>\n        <Switch\n          label=\"Default\"\n          checked={isDefault}\n          onChange={event => {\n            // @ts-ignore\n            onDefaultChange(event.target.checked);\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default BasicSettings;\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport isString from 'lodash/isString';\nimport { Icon } from '@grafana/ui';\nimport { selectors } from '@grafana/e2e-selectors';\n// Components\nimport Page from 'app/core/components/Page/Page';\nimport { GenericDataSourcePlugin, PluginSettings } from './PluginSettings';\nimport BasicSettings from './BasicSettings';\nimport ButtonRow from './ButtonRow';\n// Services & Utils\nimport appEvents from 'app/core/app_events';\n// Actions & selectors\nimport { getDataSource, getDataSourceMeta } from '../state/selectors';\nimport {\n  deleteDataSource,\n  initDataSourceSettings,\n  loadDataSource,\n  testDataSource,\n  updateDataSource,\n} from '../state/actions';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { getRouteParamsId } from 'app/core/selectors/location';\n// Types\nimport { CoreEvents, StoreState } from 'app/types/';\nimport { DataSourcePluginMeta, DataSourceSettings, NavModel, UrlQueryMap } from '@grafana/data';\nimport { getDataSourceLoadingNav } from '../state/navModel';\nimport PluginStateinfo from 'app/features/plugins/PluginStateInfo';\nimport { dataSourceLoaded, setDataSourceName, setIsDefault } from '../state/reducers';\nimport { connectWithCleanUp } from 'app/core/components/connectWithCleanUp';\n\nexport interface Props {\n  navModel: NavModel;\n  dataSource: DataSourceSettings;\n  dataSourceMeta: DataSourcePluginMeta;\n  pageId: number;\n  deleteDataSource: typeof deleteDataSource;\n  loadDataSource: typeof loadDataSource;\n  setDataSourceName: typeof setDataSourceName;\n  updateDataSource: typeof updateDataSource;\n  setIsDefault: typeof setIsDefault;\n  dataSourceLoaded: typeof dataSourceLoaded;\n  initDataSourceSettings: typeof initDataSourceSettings;\n  testDataSource: typeof testDataSource;\n  plugin?: GenericDataSourcePlugin;\n  query: UrlQueryMap;\n  page?: string;\n  testingStatus?: {\n    message?: string;\n    status?: string;\n  };\n  loadError?: Error | string;\n}\n\nexport class DataSourceSettingsPage extends PureComponent<Props> {\n  componentDidMount() {\n    const { initDataSourceSettings, pageId } = this.props;\n    initDataSourceSettings(pageId);\n  }\n\n  onSubmit = async (evt: React.FormEvent<HTMLFormElement>) => {\n    evt.preventDefault();\n\n    await this.props.updateDataSource({ ...this.props.dataSource });\n\n    this.testDataSource();\n  };\n\n  onTest = async (evt: React.FormEvent<HTMLFormElement>) => {\n    evt.preventDefault();\n\n    this.testDataSource();\n  };\n\n  onDelete = () => {\n    appEvents.emit(CoreEvents.showConfirmModal, {\n      title: 'Delete',\n      text: 'Are you sure you want to delete this data source?',\n      yesText: 'Delete',\n      icon: 'trash-alt',\n      onConfirm: () => {\n        this.confirmDelete();\n      },\n    });\n  };\n\n  confirmDelete = () => {\n    this.props.deleteDataSource();\n  };\n\n  onModelChange = (dataSource: DataSourceSettings) => {\n    this.props.dataSourceLoaded(dataSource);\n  };\n\n  isReadOnly() {\n    return this.props.dataSource.readOnly === true;\n  }\n\n  renderIsReadOnlyMessage() {\n    return (\n      <div className=\"grafana-info-box span8\">\n        This datasource was added by config and cannot be modified using the UI. Please contact your server admin to\n        update this datasource.\n      </div>\n    );\n  }\n\n  testDataSource() {\n    const { dataSource, testDataSource } = this.props;\n    testDataSource(dataSource.name);\n  }\n\n  get hasDataSource() {\n    return this.props.dataSource.id > 0;\n  }\n\n  renderLoadError(loadError: any) {\n    let showDelete = false;\n    let msg = loadError.toString();\n    if (loadError.data) {\n      if (loadError.data.message) {\n        msg = loadError.data.message;\n      }\n    } else if (isString(loadError)) {\n      showDelete = true;\n    }\n\n    const node = {\n      text: msg,\n      subTitle: 'Data Source Error',\n      icon: 'exclamation-triangle',\n    };\n    const nav = {\n      node: node,\n      main: node,\n    };\n\n    return (\n      <Page navModel={nav}>\n        <Page.Contents>\n          <div>\n            <div className=\"gf-form-button-row\">\n              {showDelete && (\n                <button type=\"submit\" className=\"btn btn-danger\" onClick={this.onDelete}>\n                  Delete\n                </button>\n              )}\n              <a className=\"btn btn-inverse\" href=\"datasources\">\n                Back\n              </a>\n            </div>\n          </div>\n        </Page.Contents>\n      </Page>\n    );\n  }\n\n  renderConfigPageBody(page: string) {\n    const { plugin } = this.props;\n    if (!plugin || !plugin.configPages) {\n      return null; // still loading\n    }\n\n    for (const p of plugin.configPages) {\n      if (p.id === page) {\n        return <p.body plugin={plugin} query={this.props.query} />;\n      }\n    }\n\n    return <div>Page Not Found: {page}</div>;\n  }\n\n  renderSettings() {\n    const { dataSourceMeta, setDataSourceName, setIsDefault, dataSource, testingStatus, plugin } = this.props;\n\n    return (\n      <form onSubmit={this.onSubmit}>\n        {this.isReadOnly() && this.renderIsReadOnlyMessage()}\n        {dataSourceMeta.state && (\n          <div className=\"gf-form\">\n            <label className=\"gf-form-label width-10\">Plugin state</label>\n            <label className=\"gf-form-label gf-form-label--transparent\">\n              <PluginStateinfo state={dataSourceMeta.state} />\n            </label>\n          </div>\n        )}\n\n        <BasicSettings\n          dataSourceName={dataSource.name}\n          isDefault={dataSource.isDefault}\n          onDefaultChange={state => setIsDefault(state)}\n          onNameChange={name => setDataSourceName(name)}\n        />\n\n        {plugin && (\n          <PluginSettings\n            plugin={plugin}\n            dataSource={dataSource}\n            dataSourceMeta={dataSourceMeta}\n            onModelChange={this.onModelChange}\n          />\n        )}\n\n        <div className=\"gf-form-group\">\n          {testingStatus && testingStatus.message && (\n            <div className={`alert-${testingStatus.status} alert`} aria-label={selectors.pages.DataSource.alert}>\n              <div className=\"alert-icon\">\n                {testingStatus.status === 'error' ? <Icon name=\"exclamation-triangle\" /> : <Icon name=\"check\" />}\n              </div>\n              <div className=\"alert-body\">\n                <div className=\"alert-title\" aria-label={selectors.pages.DataSource.alertMessage}>\n                  {testingStatus.message}\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n\n        <ButtonRow\n          onSubmit={event => this.onSubmit(event)}\n          isReadOnly={this.isReadOnly()}\n          onDelete={this.onDelete}\n          onTest={event => this.onTest(event)}\n        />\n      </form>\n    );\n  }\n\n  render() {\n    const { navModel, page, loadError } = this.props;\n\n    if (loadError) {\n      return this.renderLoadError(loadError);\n    }\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={!this.hasDataSource}>\n          {this.hasDataSource ? <div>{page ? this.renderConfigPageBody(page) : this.renderSettings()}</div> : null}\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState) {\n  const pageId = getRouteParamsId(state.location);\n  const dataSource = getDataSource(state.dataSources, pageId);\n  const page = state.location.query.page as string;\n  const { plugin, loadError, testingStatus } = state.dataSourceSettings;\n\n  return {\n    navModel: getNavModel(\n      state.navIndex,\n      page ? `datasource-page-${page}` : `datasource-settings-${pageId}`,\n      getDataSourceLoadingNav('settings')\n    ),\n    dataSource: getDataSource(state.dataSources, pageId),\n    dataSourceMeta: getDataSourceMeta(state.dataSources, dataSource.type),\n    pageId: pageId,\n    query: state.location.query,\n    page,\n    plugin,\n    loadError,\n    testingStatus,\n  };\n}\n\nconst mapDispatchToProps = {\n  deleteDataSource,\n  loadDataSource,\n  setDataSourceName,\n  updateDataSource,\n  setIsDefault,\n  dataSourceLoaded,\n  initDataSourceSettings,\n  testDataSource,\n};\n\nexport default hot(module)(\n  connectWithCleanUp(mapStateToProps, mapDispatchToProps, state => state.dataSourceSettings)(DataSourceSettingsPage)\n);\n","import { connect, MapDispatchToPropsParam, MapStateToPropsParam, useDispatch } from 'react-redux';\nimport { cleanUpAction, StateSelector } from '../actions/cleanUp';\nimport React, { ComponentType, FunctionComponent, useEffect } from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\n\nexport const connectWithCleanUp = <\n  TStateProps extends {} = {},\n  TDispatchProps = {},\n  TOwnProps = {},\n  State = {},\n  TSelector extends object = {},\n  Statics = {}\n>(\n  mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\n  mapDispatchToProps: MapDispatchToPropsParam<TDispatchProps, TOwnProps>,\n  stateSelector: StateSelector<TSelector>\n) => (Component: ComponentType<any>) => {\n  const ConnectedComponent = connect(\n    mapStateToProps,\n    mapDispatchToProps\n    // @ts-ignore\n  )(Component);\n\n  const ConnectedComponentWithCleanUp: FunctionComponent = props => {\n    const dispatch = useDispatch();\n    useEffect(() => {\n      return function cleanUp() {\n        dispatch(cleanUpAction({ stateSelector }));\n      };\n    }, []);\n    // @ts-ignore\n    return <ConnectedComponent {...props} />;\n  };\n\n  ConnectedComponentWithCleanUp.displayName = `ConnectWithCleanUp(${ConnectedComponent.displayName})`;\n  hoistNonReactStatics(ConnectedComponentWithCleanUp, Component);\n  type Hoisted = typeof ConnectedComponentWithCleanUp & Statics;\n\n  return ConnectedComponentWithCleanUp as Hoisted;\n};\n"],"sourceRoot":""}