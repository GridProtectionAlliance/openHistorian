{"version":3,"file":"DataSourcesListPage.56a661c1f173f08535c5.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/PageActionBar/PageActionBar.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourcesListHeader.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourcesList.tsx","webpack://grafana/./public/app/features/datasources/pages/DataSourcesListPage.tsx","webpack://grafana/./public/app/features/datasources/state/contexts.ts","webpack://grafana/./public/app/features/datasources/state/hooks.ts"],"sourcesContent":["import React, { PureComponent } from 'react';\n\nimport { LinkButton, FilterInput } from '@grafana/ui';\n\nexport interface Props {\n  searchQuery: string;\n  setSearchQuery: (value: string) => void;\n  linkButton?: { href: string; title: string; disabled?: boolean };\n  target?: string;\n  placeholder?: string;\n}\n\nexport default class PageActionBar extends PureComponent<Props> {\n  render() {\n    const { searchQuery, linkButton, setSearchQuery, target, placeholder = 'Search by name or type' } = this.props;\n    const linkProps: typeof LinkButton.defaultProps = { href: linkButton?.href, disabled: linkButton?.disabled };\n\n    if (target) {\n      linkProps.target = target;\n    }\n\n    return (\n      <div className=\"page-action-bar\">\n        <div className=\"gf-form gf-form--grow\">\n          <FilterInput value={searchQuery} onChange={setSearchQuery} placeholder={placeholder} />\n        </div>\n        {linkButton && <LinkButton {...linkProps}>{linkButton.title}</LinkButton>}\n      </div>\n    );\n  }\n}\n","import React, { useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { AnyAction } from 'redux';\n\nimport PageActionBar from 'app/core/components/PageActionBar/PageActionBar';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction, StoreState } from 'app/types';\n\nimport { getDataSourcesSearchQuery, setDataSourcesSearchQuery, useDataSourcesRoutes } from '../state';\n\nexport function DataSourcesListHeader() {\n  const dispatch = useDispatch();\n  const setSearchQuery = useCallback((q: string) => dispatch(setDataSourcesSearchQuery(q)), [dispatch]);\n  const searchQuery = useSelector(({ dataSources }: StoreState) => getDataSourcesSearchQuery(dataSources));\n  const canCreateDataSource = contextSrv.hasPermission(AccessControlAction.DataSourcesCreate);\n\n  return (\n    <DataSourcesListHeaderView\n      searchQuery={searchQuery}\n      setSearchQuery={setSearchQuery}\n      canCreateDataSource={canCreateDataSource}\n    />\n  );\n}\n\nexport type ViewProps = {\n  searchQuery: string;\n  setSearchQuery: (q: string) => AnyAction;\n  canCreateDataSource: boolean;\n};\n\nexport function DataSourcesListHeaderView({ searchQuery, setSearchQuery, canCreateDataSource }: ViewProps) {\n  const dataSourcesRoutes = useDataSourcesRoutes();\n  const linkButton = {\n    href: dataSourcesRoutes.New,\n    title: 'Add data source',\n    disabled: !canCreateDataSource,\n  };\n\n  return (\n    <PageActionBar searchQuery={searchQuery} setSearchQuery={setSearchQuery} linkButton={linkButton} key=\"action-bar\" />\n  );\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { DataSourceSettings } from '@grafana/data';\nimport { Card, Tag, useStyles } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport PageLoader from 'app/core/components/PageLoader/PageLoader';\nimport { contextSrv } from 'app/core/core';\nimport { StoreState, AccessControlAction } from 'app/types';\n\nimport { getDataSources, getDataSourcesCount, useDataSourcesRoutes, useLoadDataSources } from '../state';\n\nimport { DataSourcesListHeader } from './DataSourcesListHeader';\n\nexport function DataSourcesList() {\n  useLoadDataSources();\n\n  const dataSources = useSelector((state: StoreState) => getDataSources(state.dataSources));\n  const dataSourcesCount = useSelector(({ dataSources }: StoreState) => getDataSourcesCount(dataSources));\n  const hasFetched = useSelector(({ dataSources }: StoreState) => dataSources.hasFetched);\n  const hasCreateRights = contextSrv.hasPermission(AccessControlAction.DataSourcesCreate);\n\n  return (\n    <DataSourcesListView\n      dataSources={dataSources}\n      dataSourcesCount={dataSourcesCount}\n      isLoading={!hasFetched}\n      hasCreateRights={hasCreateRights}\n    />\n  );\n}\n\nexport type ViewProps = {\n  dataSources: DataSourceSettings[];\n  dataSourcesCount: number;\n  isLoading: boolean;\n  hasCreateRights: boolean;\n};\n\nexport function DataSourcesListView({ dataSources, dataSourcesCount, isLoading, hasCreateRights }: ViewProps) {\n  const styles = useStyles(getStyles);\n  const dataSourcesRoutes = useDataSourcesRoutes();\n\n  if (isLoading) {\n    return <PageLoader />;\n  }\n\n  if (dataSourcesCount === 0) {\n    return (\n      <EmptyListCTA\n        buttonDisabled={!hasCreateRights}\n        title=\"No data sources defined\"\n        buttonIcon=\"database\"\n        buttonLink={dataSourcesRoutes.New}\n        buttonTitle=\"Add data source\"\n        proTip=\"You can also define data sources through configuration files.\"\n        proTipLink=\"http://docs.grafana.org/administration/provisioning/#datasources?utm_source=grafana_ds_list\"\n        proTipLinkTitle=\"Learn more\"\n        proTipTarget=\"_blank\"\n      />\n    );\n  }\n\n  return (\n    <>\n      {/* List Header */}\n      <DataSourcesListHeader />\n\n      {/* List */}\n      <ul className={styles.list}>\n        {dataSources.map((dataSource) => {\n          return (\n            <li key={dataSource.uid}>\n              <Card href={dataSourcesRoutes.Edit.replace(/:uid/gi, dataSource.uid)}>\n                <Card.Heading>{dataSource.name}</Card.Heading>\n                <Card.Figure>\n                  <img src={dataSource.typeLogoUrl} alt=\"\" height=\"40px\" width=\"40px\" className={styles.logo} />\n                </Card.Figure>\n                <Card.Meta>\n                  {[\n                    dataSource.typeName,\n                    dataSource.url,\n                    dataSource.isDefault && <Tag key=\"default-tag\" name={'default'} colorIndex={1} />,\n                  ]}\n                </Card.Meta>\n              </Card>\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n}\n\nconst getStyles = () => {\n  return {\n    list: css({\n      listStyle: 'none',\n      display: 'grid',\n      // gap: '8px', Add back when legacy support for old Card interface is dropped\n    }),\n    logo: css({\n      objectFit: 'contain',\n    }),\n  };\n};\n","import React from 'react';\n\nimport { Page } from 'app/core/components/Page/Page';\n\nimport { DataSourcesList } from '../components/DataSourcesList';\n\nexport function DataSourcesListPage() {\n  return (\n    <Page navId=\"datasources\">\n      <Page.Contents>\n        <DataSourcesList />\n      </Page.Contents>\n    </Page>\n  );\n}\n\nexport default DataSourcesListPage;\n","import { createContext } from 'react';\n\nimport { DATASOURCES_ROUTES } from '../constants';\nimport { DataSourcesRoutes } from '../types';\n\n// The purpose of this context is to be able to override the data-sources routes (used for links for example) used under\n// the app/features/datasources modules, so we can reuse them more easily in different parts of the application (e.g. under Data Connections)\nexport const DataSourcesRoutesContext = createContext<DataSourcesRoutes>(DATASOURCES_ROUTES);\n","import { useContext, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { DataSourcePluginMeta, DataSourceSettings, urlUtil } from '@grafana/data';\nimport { cleanUpAction } from 'app/core/actions/cleanUp';\nimport appEvents from 'app/core/app_events';\nimport { contextSrv } from 'app/core/core';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { AccessControlAction, StoreState } from 'app/types';\nimport { ShowConfirmModalEvent } from 'app/types/events';\n\nimport { DataSourceRights } from '../types';\n\nimport {\n  initDataSourceSettings,\n  testDataSource,\n  loadDataSource,\n  loadDataSources,\n  loadDataSourcePlugins,\n  addDataSource,\n  updateDataSource,\n  deleteLoadedDataSource,\n} from './actions';\nimport { DataSourcesRoutesContext } from './contexts';\nimport { getDataSourceLoadingNav, buildNavModel, getDataSourceNav } from './navModel';\nimport { getDataSource, getDataSourceMeta } from './selectors';\n\nexport const useInitDataSourceSettings = (uid: string) => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(initDataSourceSettings(uid));\n\n    return function cleanUp() {\n      dispatch(\n        cleanUpAction({\n          stateSelector: (state) => state.dataSourceSettings,\n        })\n      );\n    };\n  }, [uid, dispatch]);\n};\n\nexport const useTestDataSource = (uid: string) => {\n  const dispatch = useDispatch();\n\n  return () => dispatch(testDataSource(uid));\n};\n\nexport const useLoadDataSources = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(loadDataSources());\n  }, [dispatch]);\n};\n\nexport const useLoadDataSource = (uid: string) => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(loadDataSource(uid));\n  }, [dispatch, uid]);\n};\n\nexport const useLoadDataSourcePlugins = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(loadDataSourcePlugins());\n  }, [dispatch]);\n};\n\nexport const useAddDatasource = () => {\n  const dispatch = useDispatch();\n  const dataSourcesRoutes = useDataSourcesRoutes();\n\n  return (plugin: DataSourcePluginMeta) => {\n    dispatch(addDataSource(plugin, dataSourcesRoutes.Edit));\n  };\n};\n\nexport const useUpdateDatasource = () => {\n  const dispatch = useDispatch();\n\n  return (dataSource: DataSourceSettings) => dispatch(updateDataSource(dataSource));\n};\n\nexport const useDeleteLoadedDataSource = () => {\n  const dispatch = useDispatch();\n  const { name } = useSelector((state: StoreState) => state.dataSources.dataSource);\n\n  return () => {\n    appEvents.publish(\n      new ShowConfirmModalEvent({\n        title: 'Delete',\n        text: `Are you sure you want to delete the \"${name}\" data source?`,\n        yesText: 'Delete',\n        icon: 'trash-alt',\n        onConfirm: () => dispatch(deleteLoadedDataSource()),\n      })\n    );\n  };\n};\n\nexport const useDataSource = (uid: string) => {\n  return useSelector((state: StoreState) => getDataSource(state.dataSources, uid));\n};\n\nexport const useDataSourceExploreUrl = (uid: string) => {\n  const dataSource = useDataSource(uid);\n  const exploreState = JSON.stringify({ datasource: dataSource.name, context: 'explore' });\n  const exploreUrl = urlUtil.renderUrl('/explore', { left: exploreState });\n\n  return exploreUrl;\n};\n\nexport const useDataSourceMeta = (pluginType: string): DataSourcePluginMeta => {\n  return useSelector((state: StoreState) => getDataSourceMeta(state.dataSources, pluginType));\n};\n\nexport const useDataSourceSettings = () => {\n  return useSelector((state: StoreState) => state.dataSourceSettings);\n};\n\nexport const useDataSourceSettingsNav = (dataSourceId: string, pageId: string | null) => {\n  const dataSource = useDataSource(dataSourceId);\n  const { plugin, loadError, loading } = useDataSourceSettings();\n  const navIndex = useSelector((state: StoreState) => state.navIndex);\n  const navIndexId = pageId ? `datasource-page-${pageId}` : `datasource-settings-${dataSourceId}`;\n\n  if (loadError) {\n    const node = {\n      text: loadError,\n      subTitle: 'Data Source Error',\n      icon: 'exclamation-triangle',\n    };\n\n    return {\n      node: node,\n      main: node,\n    };\n  }\n\n  if (loading || !plugin) {\n    return getNavModel(navIndex, navIndexId, getDataSourceLoadingNav('settings'));\n  }\n\n  return getNavModel(navIndex, navIndexId, getDataSourceNav(buildNavModel(dataSource, plugin), pageId || 'settings'));\n};\n\nexport const useDataSourceRights = (uid: string): DataSourceRights => {\n  const dataSource = useDataSource(uid);\n  const readOnly = dataSource.readOnly === true;\n  const hasWriteRights = contextSrv.hasPermissionInMetadata(AccessControlAction.DataSourcesWrite, dataSource);\n  const hasDeleteRights = contextSrv.hasPermissionInMetadata(AccessControlAction.DataSourcesDelete, dataSource);\n\n  return {\n    readOnly,\n    hasWriteRights,\n    hasDeleteRights,\n  };\n};\n\nexport const useDataSourcesRoutes = () => {\n  return useContext(DataSourcesRoutesContext);\n};\n"],"names":["PageActionBar","PureComponent","render","searchQuery","linkButton","setSearchQuery","target","placeholder","this","props","linkProps","href","disabled","className","FilterInput","value","onChange","LinkButton","title","DataSourcesListHeader","dispatch","useDispatch","useCallback","q","setDataSourcesSearchQuery","useSelector","dataSources","getDataSourcesSearchQuery","canCreateDataSource","contextSrv","AccessControlAction","DataSourcesListHeaderView","useDataSourcesRoutes","New","DataSourcesList","useLoadDataSources","state","getDataSources","dataSourcesCount","getDataSourcesCount","hasFetched","hasCreateRights","DataSourcesListView","isLoading","styles","useStyles","getStyles","dataSourcesRoutes","PageLoader","EmptyListCTA","buttonDisabled","buttonIcon","buttonLink","buttonTitle","proTip","proTipLink","proTipLinkTitle","proTipTarget","list","map","dataSource","Card","Edit","replace","uid","name","src","typeLogoUrl","alt","height","width","logo","typeName","url","isDefault","Tag","colorIndex","css","listStyle","display","objectFit","DataSourcesListPage","navId","DataSourcesRoutesContext","createContext","DATASOURCES_ROUTES","useInitDataSourceSettings","useEffect","initDataSourceSettings","cleanUpAction","stateSelector","dataSourceSettings","useTestDataSource","testDataSource","loadDataSources","useLoadDataSource","loadDataSource","useLoadDataSourcePlugins","loadDataSourcePlugins","useAddDatasource","plugin","addDataSource","useUpdateDatasource","updateDataSource","useDeleteLoadedDataSource","appEvents","ShowConfirmModalEvent","text","yesText","icon","onConfirm","deleteLoadedDataSource","useDataSource","getDataSource","useDataSourceExploreUrl","exploreState","JSON","stringify","datasource","context","urlUtil","left","useDataSourceMeta","pluginType","getDataSourceMeta","useDataSourceSettings","useDataSourceSettingsNav","dataSourceId","pageId","loadError","loading","navIndex","navIndexId","node","subTitle","main","getNavModel","getDataSourceLoadingNav","getDataSourceNav","buildNavModel","useDataSourceRights","readOnly","hasWriteRights","hasDeleteRights","useContext"],"sourceRoot":""}