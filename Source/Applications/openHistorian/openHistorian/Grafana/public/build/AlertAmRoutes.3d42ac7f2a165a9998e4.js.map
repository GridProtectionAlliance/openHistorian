{"version":3,"file":"AlertAmRoutes.3d42ac7f2a165a9998e4.js","mappings":"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","sources":["webpack://grafana/./public/app/core/hooks/useCleanup.ts","webpack://grafana/./public/app/features/alerting/unified/api/grafana.ts","webpack://grafana/./public/app/features/alerting/unified/api/receiversApi.ts","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaMuteTimingsExporter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/mute-timings/useExportMuteTimingsDrawer.tsx","webpack://grafana/./public/app/features/alerting/unified/components/mute-timings/MuteTimingActionsButtons.tsx","webpack://grafana/./public/app/features/alerting/unified/components/EmptyAreaWithCTA.tsx","webpack://grafana/./public/app/features/alerting/unified/components/mute-timings/MuteTimingsTable.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/Filters.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/AlertGroupsSummary.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/utils.ts","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/EditDefaultPolicyForm.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/EditNotificationPolicyForm.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/Modals.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaPoliciesExporter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/Policy.tsx","webpack://grafana/./public/app/features/alerting/unified/NotificationPolicies.tsx","webpack://grafana/./public/app/features/alerting/unified/components/Authorize.tsx","webpack://grafana/./public/app/features/alerting/unified/components/EmptyArea.tsx","webpack://grafana/./public/app/features/alerting/unified/components/GrafanaAlertmanagerDeliveryWarning.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertDetails.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertGroupAlertsTable.tsx","webpack://grafana/./public/app/features/alerting/unified/styles/notifications.ts","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertGroupHeader.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertGroup.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/ContactPointSelector.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/Matchers.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertmanagerConfig.ts","webpack://grafana/./public/app/features/alerting/unified/createRouteGroupsMatcherWorker.ts","webpack://grafana/./public/app/features/alerting/unified/useRouteGroupsMatcher.ts","webpack://grafana/./public/app/features/alerting/unified/utils/mute-timings.ts"],"sourcesContent":["import { useEffect, useRef } from 'react';\n\nimport { useDispatch } from 'app/types';\n\nimport { cleanUpAction, CleanUpAction } from '../actions/cleanUp';\n\nexport function useCleanup(cleanupAction: CleanUpAction) {\n  const dispatch = useDispatch();\n  //bit of a hack to unburden user from having to wrap stateSelcetor in a useCallback. Otherwise cleanup would happen on every render\n  const selectorRef = useRef(cleanupAction);\n  selectorRef.current = cleanupAction;\n  useEffect(() => {\n    return () => {\n      dispatch(cleanUpAction({ cleanupAction: selectorRef.current }));\n    };\n  }, [dispatch]);\n}\n","import { lastValueFrom } from 'rxjs';\n\nimport { getBackendSrv } from '@grafana/runtime';\nimport { ContactPointsState, ReceiversStateDTO, ReceiverState } from 'app/types';\n\nimport { getDatasourceAPIUid } from '../utils/datasource';\n\ninterface IntegrationNameObject {\n  type: string;\n  index?: string;\n}\nexport const parseIntegrationName = (integrationName: string): IntegrationNameObject => {\n  const matches = integrationName.match(/^(\\w+)(\\[\\d+\\])?$/);\n  if (!matches) {\n    return { type: integrationName, index: undefined };\n  }\n\n  return {\n    type: matches[1],\n    index: matches[2],\n  };\n};\n\nexport const contactPointsStateDtoToModel = (receiversStateDto: ReceiversStateDTO[]): ContactPointsState => {\n  // init object to return\n  const contactPointsState: ContactPointsState = { receivers: {}, errorCount: 0 };\n  // for each receiver from response\n  receiversStateDto.forEach((cpState) => {\n    //init receiver state\n    contactPointsState.receivers[cpState.name] = { active: cpState.active, notifiers: {}, errorCount: 0 };\n    const receiverState = contactPointsState.receivers[cpState.name];\n    //update integrations in response\n    cpState.integrations.forEach((integrationStatusDTO) => {\n      //update errorcount\n      const hasError = Boolean(integrationStatusDTO?.lastNotifyAttemptError);\n      if (hasError) {\n        receiverState.errorCount += 1;\n      }\n      //add integration for this type\n      const integrationType = getIntegrationType(integrationStatusDTO.name);\n      if (integrationType) {\n        //if type still does not exist in IntegrationsTypeState we initialize it with an empty array\n        if (!receiverState.notifiers[integrationType]) {\n          receiverState.notifiers[integrationType] = [];\n        }\n        // add error status for this type\n        receiverState.notifiers[integrationType].push(integrationStatusDTO);\n      }\n    });\n  });\n  const errorsCount = Object.values(contactPointsState.receivers).reduce(\n    (prevCount: number, receiverState: ReceiverState) => prevCount + receiverState.errorCount,\n    0\n  );\n  return { ...contactPointsState, errorCount: errorsCount };\n};\n\nexport const getIntegrationType = (integrationName: string): string | undefined =>\n  parseIntegrationName(integrationName)?.type;\n\nexport async function fetchContactPointsState(alertManagerSourceName: string): Promise<ContactPointsState> {\n  try {\n    const response = await lastValueFrom(\n      getBackendSrv().fetch<ReceiversStateDTO[]>({\n        url: `/api/alertmanager/${getDatasourceAPIUid(alertManagerSourceName)}/config/api/v1/receivers`,\n        showErrorAlert: false,\n        showSuccessAlert: false,\n      })\n    );\n    return contactPointsStateDtoToModel(response.data);\n  } catch (error) {\n    return contactPointsStateDtoToModel([]);\n  }\n}\n","/** @deprecated To be deleted - use alertingApiServer API instead */\n\nimport { ContactPointsState } from 'app/types';\n\nimport { CONTACT_POINTS_STATE_INTERVAL_MS } from '../utils/constants';\n\nimport { alertingApi } from './alertingApi';\nimport { fetchContactPointsState } from './grafana';\n\nexport const receiversApi = alertingApi.injectEndpoints({\n  endpoints: (build) => ({\n    contactPointsState: build.query<ContactPointsState, { amSourceName: string }>({\n      queryFn: async ({ amSourceName }) => {\n        try {\n          const contactPointsState = await fetchContactPointsState(amSourceName);\n          return { data: contactPointsState };\n        } catch (error) {\n          return { error: error };\n        }\n      },\n    }),\n  }),\n});\n\nexport const useGetContactPointsState = (alertManagerSourceName: string) => {\n  const contactPointsStateEmpty: ContactPointsState = { receivers: {}, errorCount: 0 };\n  const { currentData: contactPointsState } = receiversApi.useContactPointsStateQuery(\n    { amSourceName: alertManagerSourceName ?? '' },\n    {\n      skip: !alertManagerSourceName,\n      pollingInterval: CONTACT_POINTS_STATE_INTERVAL_MS,\n    }\n  );\n  return contactPointsState ?? contactPointsStateEmpty;\n};\n","import { useState } from 'react';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\n\nimport { alertRuleApi } from '../../api/alertRuleApi';\n\nimport { FileExportPreview } from './FileExportPreview';\nimport { GrafanaExportDrawer } from './GrafanaExportDrawer';\nimport { allGrafanaExportProviders, ExportFormats } from './providers';\ninterface MuteTimingsExporterPreviewProps {\n  exportFormat: ExportFormats;\n  onClose: () => void;\n}\n\nconst GrafanaMuteTimingsExporterPreview = ({ exportFormat, onClose }: MuteTimingsExporterPreviewProps) => {\n  const { currentData: muteTimingsDefinition = '', isFetching } = alertRuleApi.useExportMuteTimingsQuery({\n    format: exportFormat,\n  });\n  const downloadFileName = `mute-timings-${new Date().getTime()}`;\n\n  if (isFetching) {\n    return <LoadingPlaceholder text=\"Loading....\" />;\n  }\n  return (\n    <FileExportPreview\n      format={exportFormat}\n      textDefinition={muteTimingsDefinition}\n      downloadFileName={downloadFileName}\n      onClose={onClose}\n    />\n  );\n};\n\ninterface GrafanaMuteTimingExporterPreviewProps extends MuteTimingsExporterPreviewProps {\n  muteTimingName: string;\n}\nconst GrafanaMuteTimingExporterPreview = ({\n  exportFormat,\n  onClose,\n  muteTimingName,\n}: GrafanaMuteTimingExporterPreviewProps) => {\n  const { currentData: muteTimingsDefinition = '', isFetching } = alertRuleApi.useExportMuteTimingQuery({\n    format: exportFormat,\n    muteTiming: muteTimingName,\n  });\n  const downloadFileName = `mute-timing-${muteTimingName}-${new Date().getTime()}`;\n\n  if (isFetching) {\n    return <LoadingPlaceholder text=\"Loading....\" />;\n  }\n  return (\n    <FileExportPreview\n      format={exportFormat}\n      textDefinition={muteTimingsDefinition}\n      downloadFileName={downloadFileName}\n      onClose={onClose}\n    />\n  );\n};\ninterface GrafanaMuteTimingsExporterProps {\n  onClose: () => void;\n  muteTimingName?: string;\n}\n\nexport const GrafanaMuteTimingsExporter = ({ onClose, muteTimingName }: GrafanaMuteTimingsExporterProps) => {\n  const [activeTab, setActiveTab] = useState<ExportFormats>('yaml');\n  return (\n    <GrafanaExportDrawer\n      activeTab={activeTab}\n      onTabChange={setActiveTab}\n      onClose={onClose}\n      formatProviders={Object.values(allGrafanaExportProviders)}\n    >\n      {muteTimingName ? (\n        <GrafanaMuteTimingExporterPreview exportFormat={activeTab} onClose={onClose} muteTimingName={muteTimingName} />\n      ) : (\n        <GrafanaMuteTimingsExporterPreview exportFormat={activeTab} onClose={onClose} />\n      )}\n    </GrafanaExportDrawer>\n  );\n};\n","import { useCallback, useMemo, useState } from 'react';\nimport { useToggle } from 'react-use';\n\nimport { GrafanaMuteTimingsExporter } from '../export/GrafanaMuteTimingsExporter';\n\nexport const ALL_MUTE_TIMINGS = Symbol('all mute timings');\n\ntype ExportProps = [JSX.Element | null, (muteTiming: string | typeof ALL_MUTE_TIMINGS) => void];\n\nexport const useExportMuteTimingsDrawer = (): ExportProps => {\n  const [muteTimingName, setMuteTimingName] = useState<string | typeof ALL_MUTE_TIMINGS | null>(null);\n  const [isExportDrawerOpen, toggleShowExportDrawer] = useToggle(false);\n\n  const handleClose = useCallback(() => {\n    setMuteTimingName(null);\n    toggleShowExportDrawer(false);\n  }, [toggleShowExportDrawer]);\n\n  const handleOpen = (muteTimingName: string | typeof ALL_MUTE_TIMINGS) => {\n    setMuteTimingName(muteTimingName);\n    toggleShowExportDrawer(true);\n  };\n\n  const drawer = useMemo(() => {\n    if (!muteTimingName || !isExportDrawerOpen) {\n      return null;\n    }\n\n    if (muteTimingName === ALL_MUTE_TIMINGS) {\n      // use this drawer when we want to export all mute timings\n      return <GrafanaMuteTimingsExporter onClose={handleClose} />;\n    } else {\n      // use this one for exporting a single mute timing\n      return <GrafanaMuteTimingsExporter muteTimingName={muteTimingName} onClose={handleClose} />;\n    }\n  }, [isExportDrawerOpen, handleClose, muteTimingName]);\n\n  return [drawer, handleOpen];\n};\n","import { useState } from 'react';\n\nimport { Badge, ConfirmModal, LinkButton, Stack } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\nimport { useExportMuteTimingsDrawer } from 'app/features/alerting/unified/components/mute-timings/useExportMuteTimingsDrawer';\n\nimport { Authorize } from '../../components/Authorize';\nimport { AlertmanagerAction, useAlertmanagerAbility } from '../../hooks/useAbilities';\nimport { isLoading } from '../../hooks/useAsync';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { makeAMLink } from '../../utils/misc';\nimport { isDisabled } from '../../utils/mute-timings';\n\nimport { MuteTiming, useDeleteMuteTiming } from './useMuteTimings';\n\ninterface MuteTimingActionsButtonsProps {\n  muteTiming: MuteTiming;\n  alertManagerSourceName: string;\n}\n\nexport const MuteTimingActionsButtons = ({ muteTiming, alertManagerSourceName }: MuteTimingActionsButtonsProps) => {\n  const [deleteMuteTiming, deleteMuteTimingRequestState] = useDeleteMuteTiming({\n    alertmanager: alertManagerSourceName!,\n  });\n  const [showDeleteDrawer, setShowDeleteDrawer] = useState(false);\n  const [ExportDrawer, showExportDrawer] = useExportMuteTimingsDrawer();\n  const [exportSupported, exportAllowed] = useAlertmanagerAbility(AlertmanagerAction.ExportMuteTimings);\n\n  const closeDeleteModal = () => setShowDeleteDrawer(false);\n\n  const isGrafanaDataSource = alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME;\n  const viewOrEditHref = makeAMLink(`/alerting/routes/mute-timing/edit`, alertManagerSourceName, {\n    muteName: muteTiming.id,\n  });\n\n  const viewOrEditButton = (\n    <LinkButton\n      href={viewOrEditHref}\n      variant=\"secondary\"\n      size=\"sm\"\n      icon={muteTiming.provisioned ? 'eye' : 'pen'}\n      disabled={isLoading(deleteMuteTimingRequestState)}\n    >\n      {muteTiming.provisioned ? (\n        <Trans i18nKey=\"alerting.common.view\">View</Trans>\n      ) : (\n        <Trans i18nKey=\"alerting.common.edit\">Edit</Trans>\n      )}\n    </LinkButton>\n  );\n\n  return (\n    <>\n      <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"flex-end\" wrap=\"wrap\">\n        {!isGrafanaDataSource && isDisabled(muteTiming) && <Badge text=\"Disabled\" color=\"orange\" />}\n        <Authorize actions={[AlertmanagerAction.UpdateMuteTiming]}>{viewOrEditButton}</Authorize>\n\n        {exportSupported && (\n          <LinkButton\n            icon=\"download-alt\"\n            variant=\"secondary\"\n            size=\"sm\"\n            data-testid=\"export\"\n            disabled={!exportAllowed || isLoading(deleteMuteTimingRequestState)}\n            onClick={() => showExportDrawer(muteTiming.name)}\n          >\n            <Trans i18nKey=\"alerting.common.export\">Export</Trans>\n          </LinkButton>\n        )}\n\n        {!muteTiming.provisioned && (\n          <Authorize actions={[AlertmanagerAction.DeleteMuteTiming]}>\n            <LinkButton\n              icon=\"trash-alt\"\n              variant=\"secondary\"\n              size=\"sm\"\n              onClick={() => setShowDeleteDrawer(true)}\n              disabled={isLoading(deleteMuteTimingRequestState)}\n            >\n              <Trans i18nKey=\"alerting.common.delete\">Delete</Trans>\n            </LinkButton>\n          </Authorize>\n        )}\n      </Stack>\n      <ConfirmModal\n        isOpen={showDeleteDrawer}\n        title=\"Delete mute timing\"\n        body={`Are you sure you would like to delete \"${muteTiming.name}\"?`}\n        confirmText={t('alerting.common.delete', 'Delete')}\n        onConfirm={async () => {\n          await deleteMuteTiming.execute({\n            name: muteTiming?.metadata?.name ?? muteTiming.name,\n          });\n\n          closeDeleteModal();\n        }}\n        onDismiss={closeDeleteModal}\n      />\n      {ExportDrawer}\n    </>\n  );\n};\n","import { css } from '@emotion/css';\nimport { ButtonHTMLAttributes } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, ButtonVariant, IconName, LinkButton, useStyles2 } from '@grafana/ui';\n\nimport { EmptyArea } from './EmptyArea';\n\nexport interface EmptyAreaWithCTAProps {\n  buttonLabel: string;\n  href?: string;\n  onButtonClick?: ButtonHTMLAttributes<HTMLButtonElement>['onClick'];\n  text: string;\n\n  buttonIcon?: IconName;\n  buttonSize?: 'xs' | 'sm' | 'md' | 'lg';\n  buttonVariant?: ButtonVariant;\n  showButton?: boolean;\n}\n\nexport const EmptyAreaWithCTA = ({\n  buttonIcon,\n  buttonLabel,\n  buttonSize = 'lg',\n  buttonVariant = 'primary',\n  onButtonClick,\n  text,\n  href,\n  showButton = true,\n}: EmptyAreaWithCTAProps) => {\n  const styles = useStyles2(getStyles);\n\n  const commonProps = {\n    className: styles.button,\n    icon: buttonIcon,\n    size: buttonSize,\n    variant: buttonVariant,\n  };\n\n  return (\n    <EmptyArea>\n      <>\n        <p className={styles.text}>{text}</p>\n        {showButton &&\n          (href ? (\n            <LinkButton href={href} type=\"button\" {...commonProps}>\n              {buttonLabel}\n            </LinkButton>\n          ) : (\n            <Button onClick={onButtonClick} type=\"button\" {...commonProps}>\n              {buttonLabel}\n            </Button>\n          ))}\n      </>\n    </EmptyArea>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css({\n      backgroundColor: theme.colors.background.secondary,\n      color: theme.colors.text.secondary,\n      padding: theme.spacing(4),\n      textAlign: 'center',\n    }),\n    text: css({\n      marginBottom: theme.spacing(2),\n    }),\n    button: css({\n      margin: theme.spacing(2, 0, 1),\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport { useMemo } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Button, LinkButton, LoadingPlaceholder, Stack, useStyles2 } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\nimport { MuteTimingActionsButtons } from 'app/features/alerting/unified/components/mute-timings/MuteTimingActionsButtons';\nimport {\n  ALL_MUTE_TIMINGS,\n  useExportMuteTimingsDrawer,\n} from 'app/features/alerting/unified/components/mute-timings/useExportMuteTimingsDrawer';\nimport { PROVENANCE_ANNOTATION } from 'app/features/alerting/unified/utils/k8s/constants';\n\nimport { Authorize } from '../../components/Authorize';\nimport { AlertmanagerAction, useAlertmanagerAbilities, useAlertmanagerAbility } from '../../hooks/useAbilities';\nimport { makeAMLink } from '../../utils/misc';\nimport { DynamicTable, DynamicTableColumnProps } from '../DynamicTable';\nimport { EmptyAreaWithCTA } from '../EmptyAreaWithCTA';\nimport { ProvisioningBadge } from '../Provisioning';\nimport { Spacer } from '../Spacer';\n\nimport { MuteTiming, useMuteTimings } from './useMuteTimings';\nimport { renderTimeIntervals } from './util';\n\ninterface MuteTimingsTableProps {\n  alertManagerSourceName: string;\n  hideActions?: boolean;\n}\n\ntype TableItem = {\n  id: string;\n  data: MuteTiming;\n};\n\nexport const MuteTimingsTable = ({ alertManagerSourceName, hideActions }: MuteTimingsTableProps) => {\n  const styles = useStyles2(getStyles);\n  const [ExportAllDrawer, showExportAllDrawer] = useExportMuteTimingsDrawer();\n\n  const { data, isLoading, error } = useMuteTimings({ alertmanager: alertManagerSourceName });\n\n  const items = useMemo((): TableItem[] => {\n    const muteTimings = data || [];\n\n    return muteTimings.map((mute) => {\n      return {\n        id: mute.id,\n        data: mute,\n      };\n    });\n  }, [data]);\n\n  const [_, allowedToCreateMuteTiming] = useAlertmanagerAbility(AlertmanagerAction.CreateMuteTiming);\n\n  const [exportMuteTimingsSupported, exportMuteTimingsAllowed] = useAlertmanagerAbility(\n    AlertmanagerAction.ExportMuteTimings\n  );\n  const columns = useColumns(alertManagerSourceName, hideActions);\n\n  if (isLoading) {\n    return <LoadingPlaceholder text=\"Loading mute timings...\" />;\n  }\n\n  if (error) {\n    return (\n      <Alert severity=\"error\" title={t('alerting.mute_timings.error-loading.title', 'Error loading mute timings')}>\n        <Trans i18nKey=\"alerting.mute_timings.error-loading.description\">\n          Could not load mute timings. Please try again later.\n        </Trans>\n      </Alert>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <Stack direction=\"row\" alignItems=\"center\">\n        <span>\n          Enter specific time intervals when not to send notifications or freeze notifications for recurring periods of\n          time.\n        </span>\n        <Spacer />\n        {!hideActions && items.length > 0 && (\n          <Authorize actions={[AlertmanagerAction.CreateMuteTiming]}>\n            <LinkButton\n              className={styles.muteTimingsButtons}\n              icon=\"plus\"\n              variant=\"primary\"\n              href={makeAMLink('alerting/routes/mute-timing/new', alertManagerSourceName)}\n            >\n              Add mute timing\n            </LinkButton>\n          </Authorize>\n        )}\n        {exportMuteTimingsSupported && (\n          <>\n            <Button\n              icon=\"download-alt\"\n              className={styles.muteTimingsButtons}\n              variant=\"secondary\"\n              disabled={!exportMuteTimingsAllowed}\n              onClick={() => showExportAllDrawer(ALL_MUTE_TIMINGS)}\n            >\n              <Trans i18nKey=\"alerting.common.export-all\">Export all</Trans>\n            </Button>\n            {ExportAllDrawer}\n          </>\n        )}\n      </Stack>\n      {items.length > 0 ? (\n        <DynamicTable items={items} cols={columns} pagination={{ itemsPerPage: 25 }} />\n      ) : !hideActions ? (\n        <EmptyAreaWithCTA\n          text=\"You haven't created any mute timings yet\"\n          buttonLabel=\"Add mute timing\"\n          buttonIcon=\"plus\"\n          buttonSize=\"lg\"\n          href={makeAMLink('alerting/routes/mute-timing/new', alertManagerSourceName)}\n          showButton={allowedToCreateMuteTiming}\n        />\n      ) : (\n        <EmptyAreaWithCTA text=\"No mute timings configured\" buttonLabel={''} showButton={false} />\n      )}\n    </div>\n  );\n};\n\nfunction useColumns(alertManagerSourceName: string, hideActions = false) {\n  const [[_editSupported, allowedToEdit], [_deleteSupported, allowedToDelete]] = useAlertmanagerAbilities([\n    AlertmanagerAction.UpdateMuteTiming,\n    AlertmanagerAction.DeleteMuteTiming,\n  ]);\n  const showActions = !hideActions && (allowedToEdit || allowedToDelete);\n\n  return useMemo((): Array<DynamicTableColumnProps<MuteTiming>> => {\n    const columns: Array<DynamicTableColumnProps<MuteTiming>> = [\n      {\n        id: 'name',\n        label: 'Name',\n        renderCell: function renderName({ data }) {\n          return (\n            <div>\n              {data.name}{' '}\n              {data.provisioned && (\n                <ProvisioningBadge tooltip provenance={data.metadata?.annotations?.[PROVENANCE_ANNOTATION]} />\n              )}\n            </div>\n          );\n        },\n        size: 1,\n      },\n      {\n        id: 'timeRange',\n        label: 'Time range',\n        renderCell: ({ data }) => {\n          return renderTimeIntervals(data);\n        },\n        size: 5,\n      },\n    ];\n    if (showActions) {\n      columns.push({\n        id: 'actions',\n        label: 'Actions',\n        alignColumn: 'end',\n        renderCell: ({ data }) => (\n          <MuteTimingActionsButtons muteTiming={data} alertManagerSourceName={alertManagerSourceName} />\n        ),\n        size: 2,\n      });\n    }\n    return columns;\n  }, [showActions, alertManagerSourceName]);\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css({\n    display: 'flex',\n    flexFlow: 'column nowrap',\n  }),\n  muteTimingsButtons: css({\n    marginBottom: theme.spacing(2),\n  }),\n});\n","import { css } from '@emotion/css';\nimport { debounce, isEqual } from 'lodash';\nimport { useCallback, useEffect, useRef } from 'react';\n\nimport { Button, Field, Icon, Input, Label, Stack, Text, Tooltip, useStyles2 } from '@grafana/ui';\nimport { ContactPointSelector } from 'app/features/alerting/unified/components/notification-policies/ContactPointSelector';\nimport { ObjectMatcher, RouteWithID } from 'app/plugins/datasource/alertmanager/types';\n\nimport { useURLSearchParams } from '../../hooks/useURLSearchParams';\nimport { matcherToObjectMatcher } from '../../utils/alertmanager';\nimport {\n  normalizeMatchers,\n  parsePromQLStyleMatcherLoose,\n  parsePromQLStyleMatcherLooseSafe,\n} from '../../utils/matchers';\n\ninterface NotificationPoliciesFilterProps {\n  onChangeMatchers: (labels: ObjectMatcher[]) => void;\n  onChangeReceiver: (receiver: string | undefined) => void;\n  matchingCount: number;\n}\n\nconst NotificationPoliciesFilter = ({\n  onChangeReceiver,\n  onChangeMatchers,\n  matchingCount,\n}: NotificationPoliciesFilterProps) => {\n  const [searchParams, setSearchParams] = useURLSearchParams();\n  const searchInputRef = useRef<HTMLInputElement | null>(null);\n  const { queryString, contactPoint } = getNotificationPoliciesFilters(searchParams);\n  const styles = useStyles2(getStyles);\n\n  const handleChangeLabels = useCallback(() => debounce(onChangeMatchers, 500), [onChangeMatchers]);\n\n  useEffect(() => {\n    onChangeReceiver(contactPoint);\n  }, [contactPoint, onChangeReceiver]);\n\n  useEffect(() => {\n    const matchers = parsePromQLStyleMatcherLooseSafe(queryString ?? '').map(matcherToObjectMatcher);\n    handleChangeLabels()(matchers);\n  }, [handleChangeLabels, queryString]);\n\n  const clearFilters = useCallback(() => {\n    if (searchInputRef.current) {\n      searchInputRef.current.value = '';\n    }\n    setSearchParams({ contactPoint: '', queryString: undefined });\n  }, [setSearchParams]);\n\n  const hasFilters = queryString || contactPoint;\n\n  let inputValid = Boolean(queryString && queryString.length > 3);\n  try {\n    if (!queryString) {\n      inputValid = true;\n    } else {\n      parsePromQLStyleMatcherLoose(queryString);\n    }\n  } catch (err) {\n    inputValid = false;\n  }\n\n  return (\n    <Stack direction=\"row\" alignItems=\"flex-end\" gap={1}>\n      <Field\n        className={styles.noBottom}\n        label={\n          <Label>\n            <Stack gap={0.5}>\n              <span>Search by matchers</span>\n              <Tooltip\n                content={\n                  <div>\n                    Filter notification policies by using a comma separated list of matchers, e.g.:\n                    <pre>severity=critical, region=EMEA</pre>\n                  </div>\n                }\n              >\n                <Icon name=\"info-circle\" size=\"sm\" />\n              </Tooltip>\n            </Stack>\n          </Label>\n        }\n        invalid={!inputValid}\n        error={!inputValid ? 'Query must use valid matcher syntax' : null}\n      >\n        <Input\n          ref={searchInputRef}\n          data-testid=\"search-query-input\"\n          placeholder=\"Search\"\n          width={46}\n          prefix={<Icon name=\"search\" />}\n          onChange={(event) => {\n            setSearchParams({ queryString: event.currentTarget.value });\n          }}\n          defaultValue={queryString}\n        />\n      </Field>\n      <Field label=\"Search by contact point\" style={{ marginBottom: 0 }}>\n        <ContactPointSelector\n          selectProps={{\n            id: 'receiver',\n            'aria-label': 'Search by contact point',\n            onChange: (option) => {\n              setSearchParams({ contactPoint: option?.value?.name });\n            },\n            width: 28,\n            isClearable: true,\n          }}\n          selectedContactPointName={searchParams.get('contactPoint') ?? undefined}\n        />\n      </Field>\n      {hasFilters && (\n        <Stack alignItems=\"center\">\n          <Button variant=\"secondary\" icon=\"times\" onClick={clearFilters}>\n            Clear filters\n          </Button>\n          <Text variant=\"bodySmall\" color=\"secondary\">\n            {matchingCount === 0 && 'No policies matching filters.'}\n            {matchingCount === 1 && `${matchingCount} policy matches the filters.`}\n            {matchingCount > 1 && `${matchingCount} policies match the filters.`}\n          </Text>\n        </Stack>\n      )}\n    </Stack>\n  );\n};\n\n/**\n * Find a list of route IDs that match given input filters\n */\ntype FilterPredicate = (route: RouteWithID) => boolean;\n\n/**\n * Find routes int the tree that match the given predicate function\n * @param routeTree the route tree to search\n * @param predicateFn the predicate function to match routes\n * @returns\n * - matches: list of routes that match the predicate\n * - matchingRouteIdsWithPath: map with routeids that are part of the path of a matching route\n *  key is the route id, value is an array of route ids that are part of its path\n */\nexport function findRoutesMatchingPredicate(\n  routeTree: RouteWithID,\n  predicateFn: FilterPredicate\n): Map<RouteWithID, RouteWithID[]> {\n  // map with routids that are part of the path of a matching route\n  // key is the route id, value is an array of route ids that are part of the path\n  const matchingRouteIdsWithPath = new Map<RouteWithID, RouteWithID[]>();\n\n  function findMatch(route: RouteWithID, path: RouteWithID[]) {\n    const newPath = [...path, route];\n\n    if (predicateFn(route)) {\n      // if the route matches the predicate, we need to add the path to the map of matching routes\n      const previousPath = matchingRouteIdsWithPath.get(route) ?? [];\n      // add the current route id to the map with its path\n      matchingRouteIdsWithPath.set(route, [...previousPath, ...newPath]);\n    }\n\n    // if the route has subroutes, call findMatch recursively\n    route.routes?.forEach((route) => findMatch(route, newPath));\n  }\n\n  findMatch(routeTree, []);\n\n  return matchingRouteIdsWithPath;\n}\n\nexport function findRoutesByMatchers(route: RouteWithID, labelMatchersFilter: ObjectMatcher[]): boolean {\n  const routeMatchers = normalizeMatchers(route);\n\n  return labelMatchersFilter.every((filter) => routeMatchers.some((matcher) => isEqual(filter, matcher)));\n}\n\nconst getNotificationPoliciesFilters = (searchParams: URLSearchParams) => ({\n  queryString: searchParams.get('queryString') ?? undefined,\n  contactPoint: searchParams.get('contactPoint') ?? undefined,\n});\n\nconst getStyles = () => ({\n  noBottom: css({\n    marginBottom: 0,\n  }),\n});\n\nexport { NotificationPoliciesFilter };\n","import pluralize from 'pluralize';\nimport { Fragment } from 'react';\nimport * as React from 'react';\n\nimport { Badge, Stack } from '@grafana/ui';\n\ninterface Props {\n  active?: number;\n  suppressed?: number;\n  unprocessed?: number;\n}\n\nexport const AlertGroupsSummary = ({ active = 0, suppressed = 0, unprocessed = 0 }: Props) => {\n  const statsComponents: React.ReactNode[] = [];\n  const total = active + suppressed + unprocessed;\n\n  if (active) {\n    statsComponents.push(<Badge color=\"red\" key=\"firing\" text={`${active} firing`} />);\n  }\n\n  if (suppressed) {\n    statsComponents.push(<Badge color=\"blue\" key=\"suppressed\" text={`${suppressed} suppressed`} />);\n  }\n\n  if (unprocessed) {\n    statsComponents.push(<Badge color=\"orange\" key=\"unprocessed\" text={`${unprocessed} unprocessed`} />);\n  }\n\n  // if we only have one category it's not really necessary to repeat the total\n  if (statsComponents.length > 1) {\n    statsComponents.unshift(\n      <Fragment key=\"total\">\n        {total} {pluralize('instance', total)}\n      </Fragment>\n    );\n  }\n\n  const hasStats = Boolean(statsComponents.length);\n\n  return hasStats ? <Stack gap={0.5}>{statsComponents}</Stack> : null;\n};\n","import { ControllerRenderProps } from 'react-hook-form';\n\nimport { SelectableValue } from '@grafana/data';\nimport { ContactPointWithMetadata } from 'app/features/alerting/unified/components/contact-points/utils';\n\nexport const handleContactPointSelect = (\n  value: SelectableValue<ContactPointWithMetadata>,\n  onChange: ControllerRenderProps['onChange']\n) => {\n  if (value === null) {\n    return onChange(null);\n  }\n\n  if (!value) {\n    return onChange('');\n  }\n\n  return onChange(value.value?.name);\n};\n","import { ReactNode, useState } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\n\nimport { Collapse, Field, Link, MultiSelect, useStyles2 } from '@grafana/ui';\nimport { ContactPointSelector } from 'app/features/alerting/unified/components/notification-policies/ContactPointSelector';\nimport { handleContactPointSelect } from 'app/features/alerting/unified/components/notification-policies/utils';\nimport { RouteWithID } from 'app/plugins/datasource/alertmanager/types';\n\nimport { FormAmRoute } from '../../types/amroutes';\nimport {\n  amRouteToFormAmRoute,\n  commonGroupByOptions,\n  mapMultiSelectValueToStrings,\n  promDurationValidator,\n  repeatIntervalValidator,\n  stringsToSelectableValues,\n  stringToSelectableValue,\n} from '../../utils/amroutes';\nimport { makeAMLink } from '../../utils/misc';\n\nimport { PromDurationInput } from './PromDurationInput';\nimport { getFormStyles } from './formStyles';\nimport { TIMING_OPTIONS_DEFAULTS } from './timingOptions';\n\nexport interface AmRootRouteFormProps {\n  alertManagerSourceName: string;\n  actionButtons: ReactNode;\n  onSubmit: (route: Partial<FormAmRoute>) => void;\n  route: RouteWithID;\n}\n\nexport const AmRootRouteForm = ({ actionButtons, alertManagerSourceName, onSubmit, route }: AmRootRouteFormProps) => {\n  const styles = useStyles2(getFormStyles);\n  const [isTimingOptionsExpanded, setIsTimingOptionsExpanded] = useState(false);\n  const [groupByOptions, setGroupByOptions] = useState(stringsToSelectableValues(route.group_by));\n\n  const defaultValues = amRouteToFormAmRoute(route);\n  const {\n    handleSubmit,\n    register,\n    control,\n    formState: { errors },\n    setValue,\n    getValues,\n  } = useForm<FormAmRoute>({\n    defaultValues: {\n      ...defaultValues,\n      overrideTimings: true,\n      overrideGrouping: true,\n    },\n  });\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Field label=\"Default contact point\" invalid={!!errors.receiver} error={errors.receiver?.message}>\n        <>\n          <div className={styles.container} data-testid=\"am-receiver-select\">\n            <Controller\n              render={({ field: { onChange, ref, value, ...field } }) => (\n                <ContactPointSelector\n                  selectProps={{\n                    ...field,\n                    onChange: (changeValue) => handleContactPointSelect(changeValue, onChange),\n                  }}\n                  selectedContactPointName={value}\n                />\n              )}\n              control={control}\n              name=\"receiver\"\n              rules={{ required: { value: true, message: 'Required.' } }}\n            />\n            <span>or</span>\n            <Link\n              className={styles.linkText}\n              href={makeAMLink('/alerting/notifications/receivers/new', alertManagerSourceName)}\n            >\n              Create a contact point\n            </Link>\n          </div>\n        </>\n      </Field>\n      <Field\n        label=\"Group by\"\n        description=\"Combine multiple alerts into a single notification by grouping them by the same label values.\"\n        data-testid=\"am-group-select\"\n      >\n        <Controller\n          render={({ field: { onChange, ref, ...field } }) => (\n            <MultiSelect\n              aria-label=\"Group by\"\n              {...field}\n              allowCustomValue\n              className={styles.input}\n              onCreateOption={(opt: string) => {\n                setGroupByOptions((opts) => [...opts, stringToSelectableValue(opt)]);\n                setValue('groupBy', [...(field.value || []), opt]);\n              }}\n              onChange={(value) => onChange(mapMultiSelectValueToStrings(value))}\n              options={[...commonGroupByOptions, ...groupByOptions]}\n            />\n          )}\n          control={control}\n          name=\"groupBy\"\n        />\n      </Field>\n      <Collapse\n        collapsible\n        className={styles.collapse}\n        isOpen={isTimingOptionsExpanded}\n        label=\"Timing options\"\n        onToggle={setIsTimingOptionsExpanded}\n      >\n        <div className={styles.timingFormContainer}>\n          <Field\n            label=\"Group wait\"\n            description=\"The waiting time before sending the first notification for a new group of alerts. Default 30 seconds.\"\n            invalid={!!errors.groupWaitValue}\n            error={errors.groupWaitValue?.message}\n            data-testid=\"am-group-wait\"\n          >\n            <PromDurationInput\n              {...register('groupWaitValue', { validate: promDurationValidator })}\n              placeholder={TIMING_OPTIONS_DEFAULTS.group_wait}\n              className={styles.promDurationInput}\n              aria-label=\"Group wait\"\n            />\n          </Field>\n          <Field\n            label=\"Group interval\"\n            description=\"The wait time before sending a notification about changes in the alert group after the first notification has been sent. Default is 5 minutes.\"\n            invalid={!!errors.groupIntervalValue}\n            error={errors.groupIntervalValue?.message}\n            data-testid=\"am-group-interval\"\n          >\n            <PromDurationInput\n              {...register('groupIntervalValue', { validate: promDurationValidator })}\n              placeholder={TIMING_OPTIONS_DEFAULTS.group_interval}\n              className={styles.promDurationInput}\n              aria-label=\"Group interval\"\n            />\n          </Field>\n          <Field\n            label=\"Repeat interval\"\n            description=\"The wait time before resending a notification that has already been sent successfully. Default is 4 hours. Should be a multiple of Group interval.\"\n            invalid={!!errors.repeatIntervalValue}\n            error={errors.repeatIntervalValue?.message}\n            data-testid=\"am-repeat-interval\"\n          >\n            <PromDurationInput\n              {...register('repeatIntervalValue', {\n                validate: (value: string) => {\n                  const groupInterval = getValues('groupIntervalValue');\n                  return repeatIntervalValidator(value, groupInterval);\n                },\n              })}\n              placeholder={TIMING_OPTIONS_DEFAULTS.repeat_interval}\n              className={styles.promDurationInput}\n              aria-label=\"Repeat interval\"\n            />\n          </Field>\n        </div>\n      </Collapse>\n      <div className={styles.container}>{actionButtons}</div>\n    </form>\n  );\n};\n","import { css } from '@emotion/css';\nimport { ReactNode, useState } from 'react';\nimport { useForm, Controller, useFieldArray } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport {\n  Badge,\n  Button,\n  Field,\n  FieldValidationMessage,\n  IconButton,\n  Input,\n  MultiSelect,\n  Select,\n  Stack,\n  Switch,\n  useStyles2,\n} from '@grafana/ui';\nimport MuteTimingsSelector from 'app/features/alerting/unified/components/alertmanager-entities/MuteTimingsSelector';\nimport { ContactPointSelector } from 'app/features/alerting/unified/components/notification-policies/ContactPointSelector';\nimport { handleContactPointSelect } from 'app/features/alerting/unified/components/notification-policies/utils';\nimport { MatcherOperator, RouteWithID } from 'app/plugins/datasource/alertmanager/types';\n\nimport { useAlertmanager } from '../../state/AlertmanagerContext';\nimport { FormAmRoute } from '../../types/amroutes';\nimport { matcherFieldOptions } from '../../utils/alertmanager';\nimport {\n  amRouteToFormAmRoute,\n  commonGroupByOptions,\n  emptyArrayFieldMatcher,\n  mapMultiSelectValueToStrings,\n  promDurationValidator,\n  repeatIntervalValidator,\n  stringToSelectableValue,\n  stringsToSelectableValues,\n} from '../../utils/amroutes';\n\nimport { PromDurationInput } from './PromDurationInput';\nimport { getFormStyles } from './formStyles';\nimport { routeTimingsFields } from './routeTimingsFields';\n\nexport interface AmRoutesExpandedFormProps {\n  route?: RouteWithID;\n  onSubmit: (route: Partial<FormAmRoute>) => void;\n  actionButtons: ReactNode;\n  defaults?: Partial<FormAmRoute>;\n}\n\nexport const AmRoutesExpandedForm = ({ actionButtons, route, onSubmit, defaults }: AmRoutesExpandedFormProps) => {\n  const styles = useStyles2(getStyles);\n  const formStyles = useStyles2(getFormStyles);\n  const { selectedAlertmanager } = useAlertmanager();\n  const [groupByOptions, setGroupByOptions] = useState(stringsToSelectableValues(route?.group_by));\n  const emptyMatcher = [{ name: '', operator: MatcherOperator.equal, value: '' }];\n\n  const formAmRoute = {\n    ...amRouteToFormAmRoute(route),\n    ...defaults,\n  };\n\n  const defaultValues: Omit<FormAmRoute, 'routes'> = {\n    ...formAmRoute,\n    // if we're adding a new route, show at least one empty matcher\n    object_matchers: route ? formAmRoute.object_matchers : emptyMatcher,\n  };\n\n  const {\n    handleSubmit,\n    control,\n    register,\n    formState: { errors },\n    setValue,\n    watch,\n    getValues,\n  } = useForm<FormAmRoute>({\n    defaultValues,\n  });\n  const { fields, append, remove } = useFieldArray({\n    control,\n    name: 'object_matchers',\n  });\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input type=\"hidden\" {...register('id')} />\n      <Stack direction=\"column\" alignItems=\"flex-start\">\n        <div>Matching labels</div>\n        {fields.length === 0 && (\n          <Badge\n            color=\"orange\"\n            className={styles.noMatchersWarning}\n            icon=\"exclamation-triangle\"\n            text=\"If no matchers are specified, this notification policy will handle all alert instances.\"\n          />\n        )}\n        {fields.length > 0 && (\n          <div className={styles.matchersContainer}>\n            {fields.map((field, index) => {\n              return (\n                <Stack direction=\"row\" key={field.id} alignItems=\"center\">\n                  <Field\n                    label=\"Label\"\n                    invalid={!!errors.object_matchers?.[index]?.name}\n                    error={errors.object_matchers?.[index]?.name?.message}\n                  >\n                    <Input\n                      {...register(`object_matchers.${index}.name`, { required: 'Field is required' })}\n                      defaultValue={field.name}\n                      placeholder=\"label\"\n                      autoFocus\n                    />\n                  </Field>\n                  <Field label={'Operator'}>\n                    <Controller\n                      render={({ field: { onChange, ref, ...field } }) => (\n                        <Select\n                          {...field}\n                          className={styles.matchersOperator}\n                          onChange={(value) => onChange(value?.value)}\n                          options={matcherFieldOptions}\n                          aria-label=\"Operator\"\n                        />\n                      )}\n                      defaultValue={field.operator}\n                      control={control}\n                      name={`object_matchers.${index}.operator`}\n                      rules={{ required: { value: true, message: 'Required.' } }}\n                    />\n                  </Field>\n                  <Field\n                    label=\"Value\"\n                    invalid={!!errors.object_matchers?.[index]?.value}\n                    error={errors.object_matchers?.[index]?.value?.message}\n                  >\n                    <Input\n                      {...register(`object_matchers.${index}.value`)}\n                      defaultValue={field.value}\n                      placeholder=\"value\"\n                    />\n                  </Field>\n                  <IconButton tooltip=\"Remove matcher\" name={'trash-alt'} onClick={() => remove(index)}>\n                    Remove\n                  </IconButton>\n                </Stack>\n              );\n            })}\n          </div>\n        )}\n        <Button\n          className={styles.addMatcherBtn}\n          icon=\"plus\"\n          onClick={() => append(emptyArrayFieldMatcher)}\n          variant=\"secondary\"\n          type=\"button\"\n        >\n          Add matcher\n        </Button>\n      </Stack>\n\n      <Field label=\"Contact point\">\n        <Controller\n          render={({ field: { onChange, ref, value, ...field } }) => (\n            <ContactPointSelector\n              selectProps={{\n                ...field,\n                className: formStyles.input,\n                onChange: (value) => handleContactPointSelect(value, onChange),\n                isClearable: true,\n              }}\n              selectedContactPointName={value}\n            />\n          )}\n          control={control}\n          name=\"receiver\"\n        />\n      </Field>\n      <Field label=\"Continue matching subsequent sibling nodes\">\n        <Switch id=\"continue-toggle\" {...register('continue')} />\n      </Field>\n      <Field label=\"Override grouping\">\n        <Switch id=\"override-grouping-toggle\" {...register('overrideGrouping')} />\n      </Field>\n      {watch().overrideGrouping && (\n        <Field\n          label=\"Group by\"\n          description=\"Combine multiple alerts into a single notification by grouping them by the same label values. If empty, it is inherited from the parent policy.\"\n        >\n          <Controller\n            rules={{\n              validate: (value) => {\n                if (!value || value.length === 0) {\n                  return 'At least one group by option is required.';\n                }\n                return true;\n              },\n            }}\n            render={({ field: { onChange, ref, ...field }, fieldState: { error } }) => (\n              <>\n                <MultiSelect\n                  aria-label=\"Group by\"\n                  {...field}\n                  invalid={Boolean(error)}\n                  allowCustomValue\n                  className={formStyles.input}\n                  onCreateOption={(opt: string) => {\n                    setGroupByOptions((opts) => [...opts, stringToSelectableValue(opt)]);\n                    setValue('groupBy', [...(field.value || []), opt]);\n                  }}\n                  onChange={(value) => onChange(mapMultiSelectValueToStrings(value))}\n                  options={[...commonGroupByOptions, ...groupByOptions]}\n                />\n                {error && <FieldValidationMessage>{error.message}</FieldValidationMessage>}\n              </>\n            )}\n            control={control}\n            name=\"groupBy\"\n          />\n        </Field>\n      )}\n      <Field label=\"Override general timings\">\n        <Switch id=\"override-timings-toggle\" {...register('overrideTimings')} />\n      </Field>\n      {watch().overrideTimings && (\n        <>\n          <Field\n            label={routeTimingsFields.groupWait.label}\n            description={routeTimingsFields.groupWait.description}\n            invalid={!!errors.groupWaitValue}\n            error={errors.groupWaitValue?.message}\n          >\n            <PromDurationInput\n              {...register('groupWaitValue', { validate: promDurationValidator })}\n              aria-label={routeTimingsFields.groupWait.ariaLabel}\n              className={formStyles.promDurationInput}\n            />\n          </Field>\n          <Field\n            label={routeTimingsFields.groupInterval.label}\n            description={routeTimingsFields.groupInterval.description}\n            invalid={!!errors.groupIntervalValue}\n            error={errors.groupIntervalValue?.message}\n          >\n            <PromDurationInput\n              {...register('groupIntervalValue', { validate: promDurationValidator })}\n              aria-label={routeTimingsFields.groupInterval.ariaLabel}\n              className={formStyles.promDurationInput}\n            />\n          </Field>\n          <Field\n            label={routeTimingsFields.repeatInterval.label}\n            description={routeTimingsFields.repeatInterval.description}\n            invalid={!!errors.repeatIntervalValue}\n            error={errors.repeatIntervalValue?.message}\n          >\n            <PromDurationInput\n              {...register('repeatIntervalValue', {\n                validate: (value = '') => {\n                  const groupInterval = getValues('groupIntervalValue');\n                  return repeatIntervalValidator(value, groupInterval);\n                },\n              })}\n              aria-label={routeTimingsFields.repeatInterval.ariaLabel}\n              className={formStyles.promDurationInput}\n            />\n          </Field>\n        </>\n      )}\n      <Field\n        label=\"Mute timings\"\n        data-testid=\"am-mute-timing-select\"\n        description=\"Add mute timing to policy\"\n        invalid={!!errors.muteTimeIntervals}\n      >\n        <Controller\n          render={({ field: { onChange, ref, ...field } }) => (\n            <MuteTimingsSelector\n              alertmanager={selectedAlertmanager!}\n              selectProps={{\n                ...field,\n                onChange: (value) => onChange(mapMultiSelectValueToStrings(value)),\n              }}\n            />\n          )}\n          control={control}\n          name=\"muteTimeIntervals\"\n        />\n      </Field>\n      {actionButtons}\n    </form>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  const commonSpacing = theme.spacing(3.5);\n\n  return {\n    addMatcherBtn: css({\n      marginBottom: commonSpacing,\n    }),\n    matchersContainer: css({\n      backgroundColor: theme.colors.background.secondary,\n      padding: `${theme.spacing(1.5)} ${theme.spacing(2)}`,\n      paddingBottom: 0,\n      width: 'fit-content',\n    }),\n    matchersOperator: css({\n      minWidth: '120px',\n    }),\n    noMatchersWarning: css({\n      padding: `${theme.spacing(1)} ${theme.spacing(2)}`,\n      marginBottom: theme.spacing(1),\n    }),\n  };\n};\n","import { groupBy } from 'lodash';\nimport { FC, useCallback, useMemo, useState } from 'react';\n\nimport { Button, Icon, Modal, ModalProps, Spinner, Stack } from '@grafana/ui';\nimport { AlertmanagerGroup, AlertState, ObjectMatcher, RouteWithID } from 'app/plugins/datasource/alertmanager/types';\n\nimport { FormAmRoute } from '../../types/amroutes';\nimport { MatcherFormatter } from '../../utils/matchers';\nimport { InsertPosition } from '../../utils/routeTree';\nimport { AlertGroup } from '../alert-groups/AlertGroup';\n\nimport { AlertGroupsSummary } from './AlertGroupsSummary';\nimport { AmRootRouteForm } from './EditDefaultPolicyForm';\nimport { AmRoutesExpandedForm } from './EditNotificationPolicyForm';\nimport { Matchers } from './Matchers';\n\ntype ModalHook<T = undefined> = [JSX.Element, (item: T) => void, () => void];\ntype AddModalHook<T = undefined> = [JSX.Element, (item: T, position: InsertPosition) => void, () => void];\ntype EditModalHook = [JSX.Element, (item: RouteWithID, isDefaultRoute?: boolean) => void, () => void];\n\nconst useAddPolicyModal = (\n  handleAdd: (route: Partial<FormAmRoute>, referenceRoute: RouteWithID, position: InsertPosition) => void,\n  loading: boolean\n): AddModalHook<RouteWithID> => {\n  const [showModal, setShowModal] = useState(false);\n  const [insertPosition, setInsertPosition] = useState<InsertPosition | undefined>(undefined);\n  const [referenceRoute, setReferenceRoute] = useState<RouteWithID>();\n\n  const handleDismiss = useCallback(() => {\n    setReferenceRoute(undefined);\n    setInsertPosition(undefined);\n    setShowModal(false);\n  }, []);\n\n  const handleShow = useCallback((referenceRoute: RouteWithID, position: InsertPosition) => {\n    setReferenceRoute(referenceRoute);\n    setInsertPosition(position);\n    setShowModal(true);\n  }, []);\n\n  const modalElement = useMemo(\n    () =>\n      loading ? (\n        <UpdatingModal isOpen={showModal} />\n      ) : (\n        <Modal\n          isOpen={showModal}\n          onDismiss={handleDismiss}\n          closeOnBackdropClick={true}\n          closeOnEscape={true}\n          title=\"Add notification policy\"\n        >\n          <AmRoutesExpandedForm\n            defaults={{\n              groupBy: referenceRoute?.group_by,\n            }}\n            onSubmit={(newRoute) => {\n              if (referenceRoute && insertPosition) {\n                handleAdd(newRoute, referenceRoute, insertPosition);\n              }\n            }}\n            actionButtons={\n              <Modal.ButtonRow>\n                <Button type=\"button\" variant=\"secondary\" onClick={handleDismiss} fill=\"outline\">\n                  Cancel\n                </Button>\n                <Button type=\"submit\">Save policy</Button>\n              </Modal.ButtonRow>\n            }\n          />\n        </Modal>\n      ),\n    [handleAdd, handleDismiss, insertPosition, loading, referenceRoute, showModal]\n  );\n\n  return [modalElement, handleShow, handleDismiss];\n};\n\nconst useEditPolicyModal = (\n  alertManagerSourceName: string,\n  handleSave: (route: Partial<FormAmRoute>) => void,\n  loading: boolean\n): EditModalHook => {\n  const [showModal, setShowModal] = useState(false);\n  const [isDefaultPolicy, setIsDefaultPolicy] = useState(false);\n  const [route, setRoute] = useState<RouteWithID>();\n\n  const handleDismiss = useCallback(() => {\n    setRoute(undefined);\n    setShowModal(false);\n  }, []);\n\n  const handleShow = useCallback((route: RouteWithID, isDefaultPolicy?: boolean) => {\n    setIsDefaultPolicy(isDefaultPolicy ?? false);\n    setRoute(route);\n    setShowModal(true);\n  }, []);\n\n  const modalElement = useMemo(\n    () =>\n      loading ? (\n        <UpdatingModal isOpen={showModal} />\n      ) : (\n        <Modal\n          isOpen={showModal}\n          onDismiss={handleDismiss}\n          closeOnBackdropClick={true}\n          closeOnEscape={true}\n          title=\"Edit notification policy\"\n        >\n          {isDefaultPolicy && route && (\n            <AmRootRouteForm\n              // TODO *sigh* this alertmanagersourcename should come from context or something\n              // passing it down all the way here is a code smell\n              alertManagerSourceName={alertManagerSourceName}\n              onSubmit={handleSave}\n              route={route}\n              actionButtons={\n                <Modal.ButtonRow>\n                  <Button type=\"button\" variant=\"secondary\" onClick={handleDismiss} fill=\"outline\">\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\">Update default policy</Button>\n                </Modal.ButtonRow>\n              }\n            />\n          )}\n          {!isDefaultPolicy && (\n            <AmRoutesExpandedForm\n              route={route}\n              onSubmit={handleSave}\n              actionButtons={\n                <Modal.ButtonRow>\n                  <Button type=\"button\" variant=\"secondary\" onClick={handleDismiss} fill=\"outline\">\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\">Update policy</Button>\n                </Modal.ButtonRow>\n              }\n            />\n          )}\n        </Modal>\n      ),\n    [alertManagerSourceName, handleDismiss, handleSave, isDefaultPolicy, loading, route, showModal]\n  );\n\n  return [modalElement, handleShow, handleDismiss];\n};\n\nconst useDeletePolicyModal = (handleDelete: (route: RouteWithID) => void, loading: boolean): ModalHook<RouteWithID> => {\n  const [showModal, setShowModal] = useState(false);\n  const [route, setRoute] = useState<RouteWithID>();\n\n  const handleDismiss = useCallback(() => {\n    setRoute(undefined);\n    setShowModal(false);\n  }, [setRoute]);\n\n  const handleShow = useCallback((route: RouteWithID) => {\n    setRoute(route);\n    setShowModal(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    if (route) {\n      handleDelete(route);\n    }\n  }, [handleDelete, route]);\n\n  const modalElement = useMemo(\n    () =>\n      loading ? (\n        <UpdatingModal isOpen={showModal} />\n      ) : (\n        <Modal\n          isOpen={showModal}\n          onDismiss={handleDismiss}\n          closeOnBackdropClick={true}\n          closeOnEscape={true}\n          title=\"Delete notification policy\"\n        >\n          <p>Deleting this notification policy will permanently remove it.</p>\n          <p>Are you sure you want to delete this policy?</p>\n\n          <Modal.ButtonRow>\n            <Button type=\"button\" variant=\"destructive\" onClick={handleSubmit}>\n              Yes, delete policy\n            </Button>\n            <Button type=\"button\" variant=\"secondary\" onClick={handleDismiss}>\n              Cancel\n            </Button>\n          </Modal.ButtonRow>\n        </Modal>\n      ),\n    [handleDismiss, handleSubmit, loading, showModal]\n  );\n\n  return [modalElement, handleShow, handleDismiss];\n};\n\nconst useAlertGroupsModal = (\n  alertManagerSourceName: string\n): [JSX.Element, (alertGroups: AlertmanagerGroup[], matchers?: ObjectMatcher[]) => void, () => void] => {\n  const [showModal, setShowModal] = useState(false);\n  const [alertGroups, setAlertGroups] = useState<AlertmanagerGroup[]>([]);\n  const [matchers, setMatchers] = useState<ObjectMatcher[]>([]);\n  const [formatter, setFormatter] = useState<MatcherFormatter>('default');\n\n  const handleDismiss = useCallback(() => {\n    setShowModal(false);\n    setAlertGroups([]);\n    setMatchers([]);\n  }, []);\n\n  const handleShow = useCallback(\n    (alertGroups: AlertmanagerGroup[], matchers?: ObjectMatcher[], formatter?: MatcherFormatter) => {\n      setAlertGroups(alertGroups);\n      if (matchers) {\n        setMatchers(matchers);\n      }\n      if (formatter) {\n        setFormatter(formatter);\n      }\n      setShowModal(true);\n    },\n    []\n  );\n\n  const instancesByState = useMemo(() => {\n    const instances = alertGroups.flatMap((group) => group.alerts);\n    return groupBy(instances, (instance) => instance.status.state);\n  }, [alertGroups]);\n\n  const modalElement = useMemo(\n    () => (\n      <Modal\n        isOpen={showModal}\n        onDismiss={handleDismiss}\n        closeOnBackdropClick={true}\n        closeOnEscape={true}\n        title={\n          <Stack direction=\"row\" alignItems=\"center\" gap={1} wrap={'wrap'}>\n            <Stack direction=\"row\" alignItems=\"center\" gap={0.5}>\n              <Icon name=\"x\" /> Matchers\n            </Stack>\n            <Matchers matchers={matchers} formatter={formatter} />\n          </Stack>\n        }\n      >\n        <Stack direction=\"column\">\n          <AlertGroupsSummary\n            active={instancesByState[AlertState.Active]?.length}\n            suppressed={instancesByState[AlertState.Suppressed]?.length}\n            unprocessed={instancesByState[AlertState.Unprocessed]?.length}\n          />\n          <div>\n            {alertGroups.map((group, index) => (\n              <AlertGroup key={index} alertManagerSourceName={alertManagerSourceName} group={group} />\n            ))}\n          </div>\n        </Stack>\n        <Modal.ButtonRow>\n          <Button type=\"button\" variant=\"secondary\" onClick={handleDismiss}>\n            Cancel\n          </Button>\n        </Modal.ButtonRow>\n      </Modal>\n    ),\n    [alertGroups, handleDismiss, instancesByState, matchers, formatter, showModal, alertManagerSourceName]\n  );\n\n  return [modalElement, handleShow, handleDismiss];\n};\n\nconst UpdatingModal: FC<Pick<ModalProps, 'isOpen'>> = ({ isOpen }) => (\n  <Modal\n    isOpen={isOpen}\n    onDismiss={() => {}}\n    closeOnBackdropClick={false}\n    closeOnEscape={false}\n    title={\n      <Stack direction=\"row\" alignItems=\"center\" gap={0.5}>\n        Updating... <Spinner inline />\n      </Stack>\n    }\n  >\n    Please wait while we update your notification policies.\n  </Modal>\n);\n\nexport { useAddPolicyModal, useDeletePolicyModal, useEditPolicyModal, useAlertGroupsModal };\n","import { useState } from 'react';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\n\nimport { alertRuleApi } from '../../api/alertRuleApi';\n\nimport { FileExportPreview } from './FileExportPreview';\nimport { GrafanaExportDrawer } from './GrafanaExportDrawer';\nimport { allGrafanaExportProviders, ExportFormats } from './providers';\ninterface GrafanaPoliciesPreviewProps {\n  exportFormat: ExportFormats;\n  onClose: () => void;\n}\n\nconst GrafanaPoliciesExporterPreview = ({ exportFormat, onClose }: GrafanaPoliciesPreviewProps) => {\n  const { currentData: policiesDefinition = '', isFetching } = alertRuleApi.useExportPoliciesQuery({\n    format: exportFormat,\n  });\n\n  const downloadFileName = `policies-${new Date().getTime()}`;\n\n  if (isFetching) {\n    return <LoadingPlaceholder text=\"Loading....\" />;\n  }\n\n  return (\n    <FileExportPreview\n      format={exportFormat}\n      textDefinition={policiesDefinition}\n      downloadFileName={downloadFileName}\n      onClose={onClose}\n    />\n  );\n};\n\ninterface GrafanaPoliciesExporterProps {\n  onClose: () => void;\n}\n\nexport const GrafanaPoliciesExporter = ({ onClose }: GrafanaPoliciesExporterProps) => {\n  const [activeTab, setActiveTab] = useState<ExportFormats>('yaml');\n\n  return (\n    <GrafanaExportDrawer\n      activeTab={activeTab}\n      onTabChange={setActiveTab}\n      onClose={onClose}\n      formatProviders={Object.values(allGrafanaExportProviders)}\n    >\n      <GrafanaPoliciesExporterPreview exportFormat={activeTab} onClose={onClose} />\n    </GrafanaExportDrawer>\n  );\n};\n","import { css } from '@emotion/css';\nimport { defaults, groupBy, isArray, sumBy, uniqueId, upperFirst } from 'lodash';\nimport pluralize from 'pluralize';\nimport { FC, Fragment, ReactNode, useState } from 'react';\nimport * as React from 'react';\nimport { useToggle } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport {\n  Badge,\n  Button,\n  Dropdown,\n  Icon,\n  IconButton,\n  Menu,\n  Stack,\n  Text,\n  TextLink,\n  Tooltip,\n  getTagColorsFromName,\n  useStyles2,\n} from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\nimport ConditionalWrap from 'app/features/alerting/unified/components/ConditionalWrap';\nimport { PrimaryText } from 'app/features/alerting/unified/components/common/TextVariants';\nimport {\n  AlertmanagerGroup,\n  MatcherOperator,\n  ObjectMatcher,\n  Receiver,\n  RouteWithID,\n} from 'app/plugins/datasource/alertmanager/types';\nimport { ReceiversState } from 'app/types';\n\nimport { RoutesMatchingFilters } from '../../NotificationPolicies';\nimport { AlertmanagerAction, useAlertmanagerAbilities, useAlertmanagerAbility } from '../../hooks/useAbilities';\nimport { INTEGRATION_ICONS } from '../../types/contact-points';\nimport { getAmMatcherFormatter } from '../../utils/alertmanager';\nimport { MatcherFormatter, normalizeMatchers } from '../../utils/matchers';\nimport { createContactPointLink, createMuteTimingLink } from '../../utils/misc';\nimport { InheritableProperties, getInheritedProperties } from '../../utils/notification-policies';\nimport { InsertPosition } from '../../utils/routeTree';\nimport { Authorize } from '../Authorize';\nimport { PopupCard } from '../HoverCard';\nimport { Label } from '../Label';\nimport { MetaText } from '../MetaText';\nimport { ProvisioningBadge } from '../Provisioning';\nimport { Spacer } from '../Spacer';\nimport { GrafanaPoliciesExporter } from '../export/GrafanaPoliciesExporter';\n\nimport { Matchers } from './Matchers';\nimport { TIMING_OPTIONS_DEFAULTS, TimingOptions } from './timingOptions';\n\ninterface PolicyComponentProps {\n  receivers?: Receiver[];\n  alertGroups?: AlertmanagerGroup[];\n  contactPointsState?: ReceiversState;\n  readOnly?: boolean;\n  provisioned?: boolean;\n  inheritedProperties?: Partial<InheritableProperties>;\n  routesMatchingFilters?: RoutesMatchingFilters;\n\n  matchingInstancesPreview?: {\n    groupsMap?: Map<string, AlertmanagerGroup[]>;\n    enabled: boolean;\n  };\n\n  routeTree: RouteWithID;\n  currentRoute: RouteWithID;\n  alertManagerSourceName: string;\n  onEditPolicy: (route: RouteWithID, isDefault?: boolean, isAutogenerated?: boolean) => void;\n  onAddPolicy: (route: RouteWithID, position: InsertPosition) => void;\n  onDeletePolicy: (route: RouteWithID) => void;\n  onShowAlertInstances: (\n    alertGroups: AlertmanagerGroup[],\n    matchers?: ObjectMatcher[],\n    formatter?: MatcherFormatter\n  ) => void;\n  isAutoGenerated?: boolean;\n}\n\nconst Policy = (props: PolicyComponentProps) => {\n  const {\n    receivers = [],\n    contactPointsState,\n    readOnly = false,\n    provisioned = false,\n    alertGroups = [],\n    alertManagerSourceName,\n    currentRoute,\n    routeTree,\n    inheritedProperties,\n    routesMatchingFilters = {\n      filtersApplied: false,\n      matchedRoutesWithPath: new Map<RouteWithID, RouteWithID[]>(),\n    },\n    matchingInstancesPreview = { enabled: false },\n    onEditPolicy,\n    onAddPolicy,\n    onDeletePolicy,\n    onShowAlertInstances,\n    isAutoGenerated = false,\n  } = props;\n\n  const styles = useStyles2(getStyles);\n\n  const isDefaultPolicy = currentRoute === routeTree;\n\n  const contactPoint = currentRoute.receiver;\n  const continueMatching = currentRoute.continue ?? false;\n\n  const matchers = normalizeMatchers(currentRoute);\n  const hasMatchers = Boolean(matchers && matchers.length);\n\n  const { filtersApplied, matchedRoutesWithPath } = routesMatchingFilters;\n  const matchedRoutes = Array.from(matchedRoutesWithPath.keys());\n\n  // check if this route matches the filters\n  const hasFocus = filtersApplied && matchedRoutes.some((route) => route.id === currentRoute.id);\n\n  // check if this route belongs to a path that matches the filters\n  const routesPath = Array.from(matchedRoutesWithPath.values()).flat();\n  const belongsToMatchPath = routesPath.some((route: RouteWithID) => route.id === currentRoute.id);\n\n  // gather errors here\n  const errors: ReactNode[] = [];\n\n  // if the route has no matchers, is not the default policy (that one has none) and it does not continue\n  // then we should warn the user that it's a suspicious setup\n  const showMatchesAllLabelsWarning = !hasMatchers && !isDefaultPolicy && !continueMatching;\n\n  // if the receiver / contact point has any errors show it on the policy\n  const actualContactPoint = contactPoint ?? inheritedProperties?.receiver ?? '';\n  const contactPointErrors = contactPointsState ? getContactPointErrors(actualContactPoint, contactPointsState) : [];\n\n  const allChildPolicies = currentRoute.routes ?? [];\n\n  // filter child policies that match\n  const childPolicies = filtersApplied\n    ? // filter by the ones that belong to the path that matches the filters\n      allChildPolicies.filter((policy) => routesPath.some((route: RouteWithID) => route.id === policy.id))\n    : allChildPolicies;\n\n  const hasChildPolicies = childPolicies.length > 0;\n\n  const [showExportDrawer, toggleShowExportDrawer] = useToggle(false);\n  const matchingAlertGroups = matchingInstancesPreview?.groupsMap?.get(currentRoute.id);\n\n  // sum all alert instances for all groups we're handling\n  const numberOfAlertInstances = matchingAlertGroups\n    ? sumBy(matchingAlertGroups, (group) => group.alerts.length)\n    : undefined;\n\n  // simplified routing permissions\n  const [isSupportedToSeeAutogeneratedChunk, isAllowedToSeeAutogeneratedChunk] = useAlertmanagerAbility(\n    AlertmanagerAction.ViewAutogeneratedPolicyTree\n  );\n\n  // we collapse the auto-generated policies by default\n  const isAutogeneratedPolicyRoot = isAutoGeneratedRootAndSimplifiedEnabled(currentRoute);\n  const [showPolicyChildren, togglePolicyChildren] = useToggle(isAutogeneratedPolicyRoot ? false : true);\n\n  const groupBy = currentRoute.group_by;\n  const muteTimings = currentRoute.mute_time_intervals ?? [];\n  const activeTimings = currentRoute.active_time_intervals ?? [];\n\n  const timingOptions: TimingOptions = {\n    group_wait: currentRoute.group_wait,\n    group_interval: currentRoute.group_interval,\n    repeat_interval: currentRoute.repeat_interval,\n  };\n\n  contactPointErrors.forEach((error) => {\n    errors.push(error);\n  });\n\n  const POLICIES_PER_PAGE = 20;\n\n  const [visibleChildPolicies, setVisibleChildPolicies] = useState(POLICIES_PER_PAGE);\n\n  // build the menu actions for our policy\n  const dropdownMenuActions: JSX.Element[] = useCreateDropdownMenuActions(\n    isAutoGenerated,\n    isDefaultPolicy,\n    provisioned,\n    onEditPolicy,\n    currentRoute,\n    toggleShowExportDrawer,\n    onDeletePolicy\n  );\n\n  // check if this policy should be visible. If it's autogenerated and the user is not allowed to see autogenerated\n  // policies then we should not show it. Same if the user is not supported to see autogenerated policies.\n  const hideCurrentPolicy =\n    isAutoGenerated && (!isAllowedToSeeAutogeneratedChunk || !isSupportedToSeeAutogeneratedChunk);\n  const hideCurrentPolicyForFilters = filtersApplied && !belongsToMatchPath;\n\n  if (hideCurrentPolicy || hideCurrentPolicyForFilters) {\n    return null;\n  }\n\n  const isImmutablePolicy = isDefaultPolicy || isAutogeneratedPolicyRoot;\n  // TODO dead branch detection, warnings for all sort of configs that won't work or will never be activated\n\n  const childPoliciesBelongingToMatchPath = childPolicies.filter((child) =>\n    routesPath.some((route: RouteWithID) => route.id === child.id)\n  );\n\n  // child policies to render are the ones that belong to the path that matches the filters\n  const childPoliciesToRender = filtersApplied ? childPoliciesBelongingToMatchPath : childPolicies;\n  const pageOfChildren = childPoliciesToRender.slice(0, visibleChildPolicies);\n\n  const moreCount = childPoliciesToRender.length - pageOfChildren.length;\n  const showMore = moreCount > 0;\n\n  return (\n    <>\n      <Stack direction=\"column\" gap={1.5}>\n        <div\n          className={styles.policyWrapper(hasFocus)}\n          data-testid={isDefaultPolicy ? 'am-root-route-container' : 'am-route-container'}\n        >\n          {/* continueMatching and showMatchesAllLabelsWarning are mutually exclusive so the icons can't overlap */}\n          {continueMatching && <ContinueMatchingIndicator />}\n          {showMatchesAllLabelsWarning && <AllMatchesIndicator />}\n\n          <div className={styles.policyItemWrapper}>\n            <Stack direction=\"column\" gap={1}>\n              {/* Matchers and actions */}\n              <div>\n                <Stack direction=\"row\" alignItems=\"center\" gap={1}>\n                  {hasChildPolicies ? (\n                    <IconButton\n                      name={showPolicyChildren ? 'angle-down' : 'angle-right'}\n                      onClick={togglePolicyChildren}\n                      aria-label={showPolicyChildren ? 'Collapse' : 'Expand'}\n                    />\n                  ) : null}\n                  {isImmutablePolicy ? (\n                    isAutogeneratedPolicyRoot ? (\n                      <AutogeneratedRootIndicator />\n                    ) : (\n                      <DefaultPolicyIndicator />\n                    )\n                  ) : hasMatchers ? (\n                    <Matchers matchers={matchers ?? []} formatter={getAmMatcherFormatter(alertManagerSourceName)} />\n                  ) : (\n                    <span className={styles.metadata}>\n                      <Trans i18nKey=\"alerting.policies.no-matchers\">No matchers</Trans>\n                    </span>\n                  )}\n                  <Spacer />\n                  {/* TODO maybe we should move errors to the gutter instead? */}\n                  {errors.length > 0 && <Errors errors={errors} />}\n                  {provisioned && <ProvisioningBadge />}\n                  <Stack direction=\"row\" gap={0.5}>\n                    {!isAutoGenerated && !readOnly && (\n                      <Authorize actions={[AlertmanagerAction.CreateNotificationPolicy]}>\n                        <ConditionalWrap shouldWrap={provisioned} wrap={ProvisionedTooltip}>\n                          {isDefaultPolicy ? (\n                            <Button\n                              variant=\"secondary\"\n                              icon=\"plus\"\n                              size=\"sm\"\n                              disabled={provisioned}\n                              type=\"button\"\n                              onClick={() => onAddPolicy(currentRoute, 'child')}\n                            >\n                              <Trans i18nKey=\"alerting.policies.new-child\">New child policy</Trans>\n                            </Button>\n                          ) : (\n                            <Dropdown\n                              overlay={\n                                <Menu>\n                                  <Menu.Item\n                                    label=\"New sibling above\"\n                                    icon=\"arrow-up\"\n                                    onClick={() => onAddPolicy(currentRoute, 'above')}\n                                  />\n                                  <Menu.Item\n                                    label=\"New sibling below\"\n                                    icon=\"arrow-down\"\n                                    onClick={() => onAddPolicy(currentRoute, 'below')}\n                                  />\n                                  <Menu.Divider />\n                                  <Menu.Item\n                                    label=\"New child policy\"\n                                    icon=\"plus\"\n                                    onClick={() => onAddPolicy(currentRoute, 'child')}\n                                  />\n                                </Menu>\n                              }\n                            >\n                              <Button\n                                size=\"sm\"\n                                variant=\"secondary\"\n                                disabled={provisioned}\n                                icon=\"angle-down\"\n                                type=\"button\"\n                              >\n                                <Trans i18nKey=\"alerting.policies.new-policy\">Add new policy</Trans>\n                              </Button>\n                            </Dropdown>\n                          )}\n                        </ConditionalWrap>\n                      </Authorize>\n                    )}\n                    {dropdownMenuActions.length > 0 && (\n                      <Dropdown overlay={<Menu>{dropdownMenuActions}</Menu>}>\n                        <Button\n                          icon=\"ellipsis-h\"\n                          variant=\"secondary\"\n                          size=\"sm\"\n                          type=\"button\"\n                          aria-label=\"more-actions\"\n                          data-testid=\"more-actions\"\n                        />\n                      </Dropdown>\n                    )}\n                  </Stack>\n                </Stack>\n              </div>\n\n              {/* Metadata row */}\n              <MetadataRow\n                matchingInstancesPreview={matchingInstancesPreview}\n                numberOfAlertInstances={numberOfAlertInstances}\n                contactPoint={contactPoint ?? undefined}\n                groupBy={groupBy}\n                muteTimings={muteTimings}\n                activeTimings={activeTimings}\n                timingOptions={timingOptions}\n                inheritedProperties={inheritedProperties}\n                alertManagerSourceName={alertManagerSourceName}\n                receivers={receivers}\n                matchingAlertGroups={matchingAlertGroups}\n                matchers={matchers}\n                isDefaultPolicy={isDefaultPolicy}\n                onShowAlertInstances={onShowAlertInstances}\n              />\n            </Stack>\n          </div>\n        </div>\n        <div className={styles.childPolicies}>\n          {showPolicyChildren && (\n            <>\n              {pageOfChildren.map((child) => {\n                const childInheritedProperties = getInheritedProperties(currentRoute, child, inheritedProperties);\n                // This child is autogenerated if it's the autogenerated root or if it's a child of an autogenerated policy.\n                const isThisChildAutoGenerated = isAutoGeneratedRootAndSimplifiedEnabled(child) || isAutoGenerated;\n                /* pass the \"readOnly\" prop from the parent, because for any child policy , if its parent it's not editable,\n                then the child policy should not be editable either */\n                const isThisChildReadOnly = readOnly || provisioned || isAutoGenerated;\n\n                return (\n                  <Policy\n                    key={child.id}\n                    routeTree={routeTree}\n                    currentRoute={child}\n                    receivers={receivers}\n                    contactPointsState={contactPointsState}\n                    readOnly={isThisChildReadOnly}\n                    inheritedProperties={childInheritedProperties}\n                    onAddPolicy={onAddPolicy}\n                    onEditPolicy={onEditPolicy}\n                    onDeletePolicy={onDeletePolicy}\n                    onShowAlertInstances={onShowAlertInstances}\n                    alertManagerSourceName={alertManagerSourceName}\n                    alertGroups={alertGroups}\n                    routesMatchingFilters={routesMatchingFilters}\n                    matchingInstancesPreview={matchingInstancesPreview}\n                    isAutoGenerated={isThisChildAutoGenerated}\n                    provisioned={provisioned}\n                  />\n                );\n              })}\n              {showMore && (\n                <Button\n                  size=\"sm\"\n                  icon=\"angle-down\"\n                  variant=\"secondary\"\n                  className={styles.moreButtons}\n                  onClick={() => setVisibleChildPolicies(visibleChildPolicies + POLICIES_PER_PAGE)}\n                >\n                  <Trans i18nKey=\"alerting.policies.n-more-policies\" count={moreCount}>\n                    {{ count: moreCount }} additional policies\n                  </Trans>\n                </Button>\n              )}\n            </>\n          )}\n        </div>\n        {showExportDrawer && <GrafanaPoliciesExporter onClose={toggleShowExportDrawer} />}\n      </Stack>\n    </>\n  );\n};\n\ninterface MetadataRowProps {\n  matchingInstancesPreview: { groupsMap?: Map<string, AlertmanagerGroup[]>; enabled: boolean };\n  numberOfAlertInstances?: number;\n  contactPoint?: string;\n  groupBy?: string[];\n  muteTimings?: string[];\n  activeTimings?: string[];\n  timingOptions?: TimingOptions;\n  inheritedProperties?: Partial<InheritableProperties>;\n  alertManagerSourceName: string;\n  receivers: Receiver[];\n  matchingAlertGroups?: AlertmanagerGroup[];\n  matchers?: ObjectMatcher[];\n  isDefaultPolicy: boolean;\n  onShowAlertInstances: (\n    alertGroups: AlertmanagerGroup[],\n    matchers?: ObjectMatcher[],\n    formatter?: MatcherFormatter\n  ) => void;\n}\n\nfunction MetadataRow({\n  numberOfAlertInstances,\n  isDefaultPolicy,\n  timingOptions,\n  groupBy,\n  muteTimings = [],\n  activeTimings = [],\n  matchingInstancesPreview,\n  inheritedProperties,\n  matchingAlertGroups,\n  onShowAlertInstances,\n  matchers,\n  contactPoint,\n  alertManagerSourceName,\n  receivers,\n}: MetadataRowProps) {\n  const styles = useStyles2(getStyles);\n\n  const inheritedGrouping = inheritedProperties && inheritedProperties.group_by;\n  const hasInheritedProperties = inheritedProperties && Object.keys(inheritedProperties).length > 0;\n\n  const noGrouping = isArray(groupBy) && groupBy[0] === '...';\n  const customGrouping = !noGrouping && isArray(groupBy) && groupBy.length > 0;\n  const singleGroup = isDefaultPolicy && isArray(groupBy) && groupBy.length === 0;\n\n  const hasMuteTimings = Boolean(muteTimings.length);\n  const hasActiveTimings = Boolean(activeTimings.length);\n\n  return (\n    <div className={styles.metadataRow}>\n      <Stack direction=\"row\" alignItems=\"center\" gap={1}>\n        {matchingInstancesPreview.enabled && (\n          <MetaText\n            icon=\"layers-alt\"\n            onClick={() => {\n              matchingAlertGroups &&\n                onShowAlertInstances(matchingAlertGroups, matchers, getAmMatcherFormatter(alertManagerSourceName));\n            }}\n            data-testid=\"matching-instances\"\n          >\n            <Text color=\"primary\">{numberOfAlertInstances ?? '-'}</Text>\n            <span>\n              <Trans i18nKey=\"alerting.policies.metadata.n-instances\" count={numberOfAlertInstances ?? 0}>\n                instance\n              </Trans>\n            </span>\n          </MetaText>\n        )}\n        {contactPoint && (\n          <MetaText icon=\"at\" data-testid=\"contact-point\">\n            <span>\n              <Trans i18nKey=\"alerting.policies.metadata.delivered-to\">Delivered to</Trans>\n            </span>\n            <ContactPointsHoverDetails\n              alertManagerSourceName={alertManagerSourceName}\n              receivers={receivers}\n              contactPoint={contactPoint}\n            />\n          </MetaText>\n        )}\n        {!inheritedGrouping && (\n          <>\n            {customGrouping && (\n              <MetaText icon=\"layer-group\" data-testid=\"grouping\">\n                <span>\n                  <Trans i18nKey=\"alerting.policies.metadata.grouped-by\">Grouped by</Trans>\n                </span>\n                <Text color=\"primary\">{groupBy.join(', ')}</Text>\n              </MetaText>\n            )}\n            {singleGroup && (\n              <MetaText icon=\"layer-group\">\n                <span>\n                  <Trans i18nKey=\"alerting.policies.metadata.grouping.single-group\">Single group</Trans>\n                </span>\n              </MetaText>\n            )}\n            {noGrouping && (\n              <MetaText icon=\"layer-group\">\n                <span>\n                  <Trans i18nKey=\"alerting.policies.metadata.grouping.none\">Not grouping</Trans>\n                </span>\n              </MetaText>\n            )}\n          </>\n        )}\n        {hasMuteTimings && (\n          <MetaText icon=\"calendar-slash\" data-testid=\"mute-timings\">\n            <span>\n              <Trans i18nKey=\"alerting.policies.metadata.mute-time\">Muted when</Trans>\n            </span>\n            <TimeIntervals timings={muteTimings} alertManagerSourceName={alertManagerSourceName} />\n          </MetaText>\n        )}\n        {hasActiveTimings && (\n          <MetaText icon=\"calendar-alt\" data-testid=\"active-timings\">\n            <span>\n              <Trans i18nKey=\"alerting.policies.metadata.active-time\">Active when</Trans>\n            </span>\n            <TimeIntervals timings={activeTimings} alertManagerSourceName={alertManagerSourceName} />\n          </MetaText>\n        )}\n        {timingOptions && (\n          // for the default policy we will also merge the default timings, that way a user can observe what the timing options would be\n          <TimingOptionsMeta\n            timingOptions={isDefaultPolicy ? defaults(timingOptions, TIMING_OPTIONS_DEFAULTS) : timingOptions}\n          />\n        )}\n        {hasInheritedProperties && (\n          <>\n            <MetaText icon=\"corner-down-right-alt\" data-testid=\"inherited-properties\">\n              <span>\n                <Trans i18nKey=\"alerting.policies.metadata.inherited\">Inherited</Trans>\n              </span>\n              <InheritedProperties properties={inheritedProperties} />\n            </MetaText>\n          </>\n        )}\n      </Stack>\n    </div>\n  );\n}\n\nexport const useCreateDropdownMenuActions = (\n  isAutoGenerated: boolean,\n  isDefaultPolicy: boolean,\n  provisioned: boolean,\n  onEditPolicy: (route: RouteWithID, isDefault?: boolean, readOnly?: boolean) => void,\n  currentRoute: RouteWithID,\n  toggleShowExportDrawer: () => void,\n  onDeletePolicy: (route: RouteWithID) => void\n) => {\n  const [\n    [updatePoliciesSupported, updatePoliciesAllowed],\n    [deletePolicySupported, deletePolicyAllowed],\n    [exportPoliciesSupported, exportPoliciesAllowed],\n  ] = useAlertmanagerAbilities([\n    AlertmanagerAction.UpdateNotificationPolicyTree,\n    AlertmanagerAction.DeleteNotificationPolicy,\n    AlertmanagerAction.ExportNotificationPolicies,\n  ]);\n  const dropdownMenuActions = [];\n  const showExportAction = exportPoliciesAllowed && exportPoliciesSupported && isDefaultPolicy && !isAutoGenerated;\n  const showEditAction = updatePoliciesSupported && updatePoliciesAllowed;\n  const showDeleteAction = deletePolicySupported && deletePolicyAllowed && !isDefaultPolicy && !isAutoGenerated;\n\n  if (showEditAction) {\n    dropdownMenuActions.push(\n      <Fragment key=\"edit-policy\">\n        <ConditionalWrap shouldWrap={provisioned} wrap={ProvisionedTooltip}>\n          <Menu.Item\n            icon=\"edit\"\n            disabled={provisioned || isAutoGenerated}\n            label=\"Edit\"\n            onClick={() => onEditPolicy(currentRoute, isDefaultPolicy)}\n          />\n        </ConditionalWrap>\n      </Fragment>\n    );\n  }\n\n  if (showExportAction) {\n    dropdownMenuActions.push(\n      <Menu.Item key=\"export-policy\" icon=\"download-alt\" label=\"Export\" onClick={toggleShowExportDrawer} />\n    );\n  }\n\n  if (showDeleteAction) {\n    dropdownMenuActions.push(\n      <Fragment key=\"delete-policy\">\n        <Menu.Divider />\n        <ConditionalWrap shouldWrap={provisioned} wrap={ProvisionedTooltip}>\n          <Menu.Item\n            destructive\n            icon=\"trash-alt\"\n            disabled={provisioned || isAutoGenerated}\n            label=\"Delete\"\n            onClick={() => onDeletePolicy(currentRoute)}\n          />\n        </ConditionalWrap>\n      </Fragment>\n    );\n  }\n  return dropdownMenuActions;\n};\n\nexport const AUTOGENERATED_ROOT_LABEL_NAME = '__grafana_autogenerated__';\n\nexport function isAutoGeneratedRootAndSimplifiedEnabled(route: RouteWithID) {\n  const simplifiedRoutingToggleEnabled = config.featureToggles.alertingSimplifiedRouting ?? false;\n  if (!simplifiedRoutingToggleEnabled) {\n    return false;\n  }\n  if (!route.object_matchers) {\n    return false;\n  }\n  return (\n    route.object_matchers.some((objectMatcher) => {\n      return (\n        objectMatcher[0] === AUTOGENERATED_ROOT_LABEL_NAME &&\n        objectMatcher[1] === MatcherOperator.equal &&\n        objectMatcher[2] === 'true'\n      );\n    }) ?? false\n  );\n  // return simplifiedRoutingToggleEnabled && route.receiver === 'contact_point_5';\n}\n\nconst ProvisionedTooltip = (children: ReactNode) => (\n  <Tooltip content=\"Provisioned items cannot be edited in the UI\" placement=\"top\">\n    <span>{children}</span>\n  </Tooltip>\n);\n\nconst Errors: FC<{ errors: React.ReactNode[] }> = ({ errors }) => (\n  <PopupCard\n    arrow\n    placement=\"top\"\n    content={\n      <Stack direction=\"column\" gap={0.5}>\n        {errors.map((error) => (\n          <Fragment key={uniqueId()}>{error}</Fragment>\n        ))}\n      </Stack>\n    }\n  >\n    <span>\n      <Badge icon=\"exclamation-circle\" color=\"red\" text={pluralize('error', errors.length, true)} />\n    </span>\n  </PopupCard>\n);\n\nconst ContinueMatchingIndicator: FC = () => {\n  const styles = useStyles2(getStyles);\n  return (\n    <Tooltip placement=\"top\" content=\"This route will continue matching other policies\">\n      <div className={styles.gutterIcon} data-testid=\"continue-matching\">\n        <Icon name=\"arrow-down\" />\n      </div>\n    </Tooltip>\n  );\n};\n\nconst AllMatchesIndicator: FC = () => {\n  const styles = useStyles2(getStyles);\n  return (\n    <Tooltip placement=\"top\" content=\"This policy matches all labels\">\n      <div className={styles.gutterIcon} data-testid=\"matches-all\">\n        <Icon name=\"exclamation-triangle\" />\n      </div>\n    </Tooltip>\n  );\n};\n\nfunction DefaultPolicyIndicator() {\n  const styles = useStyles2(getStyles);\n  return (\n    <>\n      <Text element=\"h2\" variant=\"body\" weight=\"medium\">\n        <Trans i18nKey=\"alerting.policies.default-policy.title\">Default policy</Trans>\n      </Text>\n      <span className={styles.metadata}>\n        <Trans i18nKey=\"alerting.policies.default-policy.description\">\n          All alert instances will be handled by the default policy if no other matching policies are found.\n        </Trans>\n      </span>\n    </>\n  );\n}\n\nfunction AutogeneratedRootIndicator() {\n  return (\n    <Text element=\"h3\" variant=\"body\" weight=\"medium\">\n      <Trans i18nKey=\"alerting.policies.generated-policies\">Auto-generated policies</Trans>\n    </Text>\n  );\n}\n\nconst InheritedProperties: FC<{ properties: InheritableProperties }> = ({ properties }) => (\n  <PopupCard\n    arrow\n    placement=\"top\"\n    content={\n      <Stack direction=\"row\" gap={0.5}>\n        {Object.entries(properties).map(([key, value]) => {\n          if (!value) {\n            return null;\n          }\n\n          return <Label key={key} label={routePropertyToLabel(key)} value={routePropertyToValue(key, value)} />;\n        })}\n      </Stack>\n    }\n  >\n    <div>\n      <Text color=\"primary\">{pluralize('property', Object.keys(properties).length, true)}</Text>\n    </div>\n  </PopupCard>\n);\n\nconst TimeIntervals: FC<{ timings: string[]; alertManagerSourceName: string }> = ({\n  timings,\n  alertManagerSourceName,\n}) => {\n  /* TODO make a better mute timing overview, allow combining multiple in to one overview */\n  /*\n    <HoverCard\n      arrow\n      placement=\"top\"\n      header={<MetaText icon=\"calendar-slash\">Mute Timings</MetaText>}\n      content={\n        // TODO show a combined view of all mute timings here, combining the weekdays, years, months, etc\n        <Stack direction=\"row\" gap={0.5}>\n          <Label label=\"Weekdays\" value=\"Saturday and Sunday\" />\n        </Stack>\n      }\n    >\n      <div>\n        <Strong>{muteTimings.join(', ')}</Strong>\n      </div>\n    </HoverCard>\n  */\n  return (\n    <div>\n      {timings.map((timing, index) => (\n        <Fragment key={timing}>\n          <TextLink\n            href={createMuteTimingLink(timing, alertManagerSourceName)}\n            color=\"primary\"\n            variant=\"bodySmall\"\n            inline={false}\n          >\n            {timing}\n          </TextLink>\n          {index < timings.length - 1 && ', '}\n        </Fragment>\n      ))}\n    </div>\n  );\n};\n\ninterface TimingOptionsMetaProps {\n  timingOptions: TimingOptions;\n}\nexport const TimingOptionsMeta = ({ timingOptions }: TimingOptionsMetaProps) => {\n  const groupWait = timingOptions.group_wait;\n  const groupInterval = timingOptions.group_interval;\n  const repeatInterval = timingOptions.repeat_interval;\n\n  // we don't have any timing options to show – we're inheriting everything from the parent\n  // and those show up in a separate \"inherited properties\" component\n  if (!groupWait && !groupInterval && !repeatInterval) {\n    return null;\n  }\n\n  const metaOptions: ReactNode[] = [];\n\n  if (groupWait) {\n    metaOptions.push(\n      <Tooltip\n        placement=\"top\"\n        content={t(\n          'alerting.policies.metadata.timingOptions.groupWait.description',\n          'How long to initially wait to send a notification for a group of alert instances.'\n        )}\n      >\n        <span>\n          <Trans i18nKey=\"alerting.policies.metadata.timingOptions.groupWait.label\">\n            Wait <PrimaryText content={groupWait} /> to group instances\n          </Trans>\n        </span>\n      </Tooltip>\n    );\n  }\n\n  if (groupInterval) {\n    metaOptions.push(\n      <Tooltip\n        placement=\"top\"\n        content={t(\n          'alerting.policies.metadata.timingOptions.groupInterval.description',\n          'How long to wait before sending a notification about new alerts that are added to a group of alerts for which an initial notification has already been sent.'\n        )}\n      >\n        <span>\n          <Trans i18nKey=\"alerting.policies.metadata.timingOptions.groupInterval.label\">\n            Wait <PrimaryText content={groupInterval} /> before sending updates\n          </Trans>\n        </span>\n      </Tooltip>\n    );\n  }\n\n  if (repeatInterval) {\n    metaOptions.push(\n      <Tooltip\n        placement=\"top\"\n        content={t(\n          'alerting.policies.metadata.timingOptions.repeatInterval.description',\n          'How often notifications are sent if the group of alerts has not changed since the last notification.'\n        )}\n      >\n        <span>\n          <Trans i18nKey=\"alerting.policies.metadata.timingOptions.repeatInterval.label\">\n            Repeated every <PrimaryText content={repeatInterval} />\n          </Trans>\n        </span>\n      </Tooltip>\n    );\n  }\n\n  return (\n    <MetaText icon=\"hourglass\" data-testid=\"timing-options\">\n      {metaOptions.map((meta, index) => (\n        <span key={uniqueId()}>\n          {meta}\n          {index < metaOptions.length - 1 && ' · '}\n        </span>\n      ))}\n    </MetaText>\n  );\n};\n\ninterface ContactPointDetailsProps {\n  alertManagerSourceName: string;\n  contactPoint: string;\n  receivers: Receiver[];\n}\n\n// @TODO make this work for cloud AMs too\nconst ContactPointsHoverDetails: FC<ContactPointDetailsProps> = ({\n  alertManagerSourceName,\n  contactPoint,\n  receivers,\n}) => {\n  const details = receivers.find((receiver) => receiver.name === contactPoint);\n  if (!details) {\n    return (\n      <TextLink\n        href={createContactPointLink(contactPoint, alertManagerSourceName)}\n        color=\"primary\"\n        variant=\"bodySmall\"\n        inline={false}\n      >\n        {contactPoint}\n      </TextLink>\n    );\n  }\n\n  const integrations = details.grafana_managed_receiver_configs;\n  if (!integrations) {\n    return (\n      <TextLink\n        href={createContactPointLink(contactPoint, alertManagerSourceName)}\n        color=\"primary\"\n        variant=\"bodySmall\"\n        inline={false}\n      >\n        {contactPoint}\n      </TextLink>\n    );\n  }\n\n  const groupedIntegrations = groupBy(details.grafana_managed_receiver_configs, (config) => config.type);\n\n  return (\n    <PopupCard\n      arrow\n      placement=\"top\"\n      header={\n        <MetaText icon=\"at\">\n          <div>\n            <Trans i18nKey=\"alerting.contact-point\">Contact Point</Trans>\n          </div>\n          <Text color=\"primary\">{contactPoint}</Text>\n        </MetaText>\n      }\n      key={uniqueId()}\n      content={\n        <Stack direction=\"row\" gap={0.5}>\n          {/* use \"label\" to indicate how many of that type we have in the contact point */}\n          {Object.entries(groupedIntegrations).map(([type, integrations]) => (\n            <Label\n              key={uniqueId()}\n              label={integrations.length > 1 ? integrations.length : undefined}\n              icon={INTEGRATION_ICONS[type]}\n              value={upperFirst(type)}\n            />\n          ))}\n        </Stack>\n      }\n    >\n      <TextLink\n        href={createContactPointLink(contactPoint, alertManagerSourceName)}\n        color=\"primary\"\n        variant=\"bodySmall\"\n        inline={false}\n      >\n        {contactPoint}\n      </TextLink>\n    </PopupCard>\n  );\n};\n\nfunction getContactPointErrors(contactPoint: string, contactPointsState: ReceiversState): JSX.Element[] {\n  const notifierStates = Object.entries(contactPointsState[contactPoint]?.notifiers ?? []);\n  const contactPointErrors = notifierStates.reduce((acc: JSX.Element[] = [], [_, notifierStatuses]) => {\n    const notifierErrors = notifierStatuses\n      .filter((status) => status.lastNotifyAttemptError)\n      .map((status) => (\n        <Label\n          icon=\"at\"\n          key={uniqueId()}\n          label={`Contact Point › ${status.name}`}\n          value={status.lastNotifyAttemptError}\n        />\n      ));\n\n    return acc.concat(notifierErrors);\n  }, []);\n\n  return contactPointErrors;\n}\n\nconst routePropertyToLabel = (key: keyof InheritableProperties | string): string => {\n  switch (key) {\n    case 'receiver':\n      return 'Contact Point';\n    case 'group_by':\n      return 'Group by';\n    case 'group_interval':\n      return 'Group interval';\n    case 'group_wait':\n      return 'Group wait';\n    case 'repeat_interval':\n      return 'Repeat interval';\n    default:\n      return key;\n  }\n};\n\nconst routePropertyToValue = (\n  key: keyof InheritableProperties | string,\n  value: string | string[]\n): NonNullable<ReactNode> => {\n  const isNotGrouping = key === 'group_by' && Array.isArray(value) && value[0] === '...';\n  const isSingleGroup = key === 'group_by' && Array.isArray(value) && value.length === 0;\n\n  if (isNotGrouping) {\n    return (\n      <Text variant=\"bodySmall\" color=\"secondary\">\n        <Trans i18nKey=\"alerting.policies.metadata.grouping.none\">Not grouping</Trans>\n      </Text>\n    );\n  }\n\n  if (isSingleGroup) {\n    return (\n      <Text variant=\"bodySmall\" color=\"secondary\">\n        <Trans i18nKey=\"alerting.policies.metadata.grouping.single-group\">Single group</Trans>\n      </Text>\n    );\n  }\n\n  return Array.isArray(value) ? value.join(', ') : value;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  matcher: (label: string) => {\n    const { color, borderColor } = getTagColorsFromName(label);\n\n    return {\n      wrapper: css({\n        color: '#fff',\n        background: color,\n        padding: `${theme.spacing(0.33)} ${theme.spacing(0.66)}`,\n        fontSize: theme.typography.bodySmall.fontSize,\n        border: `solid 1px ${borderColor}`,\n        borderRadius: theme.shape.radius.default,\n      }),\n    };\n  },\n  childPolicies: css({\n    marginLeft: theme.spacing(4),\n    position: 'relative',\n    '&:before': {\n      content: '\"\"',\n      position: 'absolute',\n      height: 'calc(100% - 10px)',\n      borderLeft: `solid 1px ${theme.colors.border.weak}`,\n      marginTop: 0,\n      marginLeft: '-20px',\n    },\n  }),\n  policyItemWrapper: css({\n    padding: theme.spacing(1.5),\n  }),\n  metadataRow: css({\n    borderBottomLeftRadius: theme.shape.borderRadius(2),\n    borderBottomRightRadius: theme.shape.borderRadius(2),\n  }),\n  policyWrapper: (hasFocus = false) =>\n    css({\n      flex: 1,\n      position: 'relative',\n      background: theme.colors.background.secondary,\n      borderRadius: theme.shape.radius.default,\n      border: `solid 1px ${theme.colors.border.weak}`,\n      ...(hasFocus && {\n        borderColor: theme.colors.primary.border,\n        background: theme.colors.primary.transparent,\n      }),\n    }),\n  metadata: css({\n    color: theme.colors.text.secondary,\n    fontSize: theme.typography.bodySmall.fontSize,\n    fontWeight: theme.typography.bodySmall.fontWeight,\n  }),\n  break: css({\n    width: '100%',\n    height: 0,\n    marginBottom: theme.spacing(2),\n  }),\n  gutterIcon: css({\n    position: 'absolute',\n    top: 0,\n    transform: 'translateY(50%)',\n    left: `-${theme.spacing(4)}`,\n    color: theme.colors.text.secondary,\n    background: theme.colors.background.primary,\n    width: '25px',\n    height: '25px',\n    textAlign: 'center',\n    border: `solid 1px ${theme.colors.border.weak}`,\n    borderRadius: theme.shape.radius.default,\n    padding: 0,\n  }),\n  moreButtons: css({\n    marginTop: theme.spacing(0.5),\n    marginBottom: theme.spacing(1.5),\n  }),\n});\n\nexport { Policy };\n","import { css } from '@emotion/css';\nimport { useEffect, useMemo, useState } from 'react';\nimport { useAsyncFn } from 'react-use';\n\nimport { GrafanaTheme2, UrlQueryMap } from '@grafana/data';\nimport { Alert, LoadingPlaceholder, Stack, Tab, TabContent, TabsBar, useStyles2, withErrorBoundary } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { useMuteTimings } from 'app/features/alerting/unified/components/mute-timings/useMuteTimings';\nimport { ObjectMatcher, Route, RouteWithID } from 'app/plugins/datasource/alertmanager/types';\nimport { useDispatch } from 'app/types';\n\nimport { useCleanup } from '../../../core/hooks/useCleanup';\n\nimport { alertmanagerApi } from './api/alertmanagerApi';\nimport { useGetContactPointsState } from './api/receiversApi';\nimport { AlertmanagerPageWrapper } from './components/AlertingPageWrapper';\nimport { GrafanaAlertmanagerDeliveryWarning } from './components/GrafanaAlertmanagerDeliveryWarning';\nimport { MuteTimingsTable } from './components/mute-timings/MuteTimingsTable';\nimport {\n  NotificationPoliciesFilter,\n  findRoutesByMatchers,\n  findRoutesMatchingPredicate,\n} from './components/notification-policies/Filters';\nimport {\n  useAddPolicyModal,\n  useAlertGroupsModal,\n  useDeletePolicyModal,\n  useEditPolicyModal,\n} from './components/notification-policies/Modals';\nimport { Policy } from './components/notification-policies/Policy';\nimport { useAlertmanagerConfig } from './hooks/useAlertmanagerConfig';\nimport { useAlertmanager } from './state/AlertmanagerContext';\nimport { updateAlertManagerConfigAction } from './state/actions';\nimport { FormAmRoute } from './types/amroutes';\nimport { useRouteGroupsMatcher } from './useRouteGroupsMatcher';\nimport { addUniqueIdentifierToRoute } from './utils/amroutes';\nimport { computeInheritedTree } from './utils/notification-policies';\nimport { initialAsyncRequestState } from './utils/redux';\nimport {\n  InsertPosition,\n  addRouteToReferenceRoute,\n  cleanRouteIDs,\n  mergePartialAmRouteWithRouteTree,\n  omitRouteFromRouteTree,\n} from './utils/routeTree';\n\nenum ActiveTab {\n  NotificationPolicies = 'notification_policies',\n  MuteTimings = 'mute_timings',\n}\n\nconst AmRoutes = () => {\n  const dispatch = useDispatch();\n  const styles = useStyles2(getStyles);\n\n  const { useGetAlertmanagerAlertGroupsQuery } = alertmanagerApi;\n\n  const [queryParams, setQueryParams] = useQueryParams();\n  const { tab } = getActiveTabFromUrl(queryParams);\n\n  const [activeTab, setActiveTab] = useState<ActiveTab>(tab);\n  const [updatingTree, setUpdatingTree] = useState<boolean>(false);\n  const [contactPointFilter, setContactPointFilter] = useState<string | undefined>();\n  const [labelMatchersFilter, setLabelMatchersFilter] = useState<ObjectMatcher[]>([]);\n\n  const { selectedAlertmanager, hasConfigurationAPI, isGrafanaAlertmanager } = useAlertmanager();\n  const { getRouteGroupsMap } = useRouteGroupsMatcher();\n  const { data: muteTimings = [] } = useMuteTimings({ alertmanager: selectedAlertmanager ?? '' });\n\n  const contactPointsState = useGetContactPointsState(selectedAlertmanager ?? '');\n\n  const {\n    currentData: result,\n    isLoading: resultLoading,\n    error: resultError,\n  } = useAlertmanagerConfig(selectedAlertmanager, {\n    refetchOnFocus: true,\n    refetchOnReconnect: true,\n  });\n\n  const config = result?.alertmanager_config;\n\n  const { currentData: alertGroups, refetch: refetchAlertGroups } = useGetAlertmanagerAlertGroupsQuery(\n    { amSourceName: selectedAlertmanager ?? '' },\n    { skip: !selectedAlertmanager }\n  );\n\n  const receivers = config?.receivers ?? [];\n\n  const rootRoute = useMemo(() => {\n    if (config?.route) {\n      return addUniqueIdentifierToRoute(config.route);\n    }\n    return;\n  }, [config?.route]);\n\n  // useAsync could also work but it's hard to wait until it's done in the tests\n  // Combining with useEffect gives more predictable results because the condition is in useEffect\n  const [{ value: routeAlertGroupsMap, error: instancesPreviewError }, triggerGetRouteGroupsMap] = useAsyncFn(\n    getRouteGroupsMap,\n    [getRouteGroupsMap]\n  );\n\n  useEffect(() => {\n    if (rootRoute && alertGroups) {\n      triggerGetRouteGroupsMap(rootRoute, alertGroups, { unquoteMatchers: !isGrafanaAlertmanager });\n    }\n  }, [rootRoute, alertGroups, triggerGetRouteGroupsMap, isGrafanaAlertmanager]);\n\n  // these are computed from the contactPoint and labels matchers filter\n  const routesMatchingFilters = useMemo(() => {\n    if (!rootRoute) {\n      const emptyResult: RoutesMatchingFilters = {\n        filtersApplied: false,\n        matchedRoutesWithPath: new Map(),\n      };\n\n      return emptyResult;\n    }\n\n    return findRoutesMatchingFilters(rootRoute, { contactPointFilter, labelMatchersFilter });\n  }, [contactPointFilter, labelMatchersFilter, rootRoute]);\n\n  const isProvisioned = Boolean(config?.route?.provenance);\n\n  function handleSave(partialRoute: Partial<FormAmRoute>) {\n    if (!rootRoute) {\n      return;\n    }\n    const newRouteTree = mergePartialAmRouteWithRouteTree(selectedAlertmanager ?? '', partialRoute, rootRoute);\n    updateRouteTree(newRouteTree);\n  }\n\n  function handleDelete(route: RouteWithID) {\n    if (!rootRoute) {\n      return;\n    }\n    const newRouteTree = omitRouteFromRouteTree(route, rootRoute);\n    updateRouteTree(newRouteTree);\n  }\n\n  function handleAdd(partialRoute: Partial<FormAmRoute>, referenceRoute: RouteWithID, insertPosition: InsertPosition) {\n    if (!rootRoute) {\n      return;\n    }\n\n    const newRouteTree = addRouteToReferenceRoute(\n      selectedAlertmanager ?? '',\n      partialRoute,\n      referenceRoute,\n      rootRoute,\n      insertPosition\n    );\n    updateRouteTree(newRouteTree);\n  }\n\n  function updateRouteTree(routeTree: Route | RouteWithID) {\n    if (!result) {\n      return;\n    }\n\n    // make sure we omit all IDs from our routes\n    const newRouteTree = cleanRouteIDs(routeTree);\n\n    setUpdatingTree(true);\n\n    dispatch(\n      updateAlertManagerConfigAction({\n        newConfig: {\n          ...result,\n          alertmanager_config: {\n            ...result.alertmanager_config,\n            route: newRouteTree,\n          },\n        },\n        oldConfig: result,\n        alertManagerSourceName: selectedAlertmanager!,\n        successMessage: 'Updated notification policies',\n      })\n    )\n      .unwrap()\n      .then(() => {\n        if (selectedAlertmanager) {\n          refetchAlertGroups();\n        }\n        closeEditModal();\n        closeAddModal();\n        closeDeleteModal();\n      })\n      .finally(() => {\n        setUpdatingTree(false);\n      });\n  }\n\n  // edit, add, delete modals\n  const [addModal, openAddModal, closeAddModal] = useAddPolicyModal(handleAdd, updatingTree);\n  const [editModal, openEditModal, closeEditModal] = useEditPolicyModal(\n    selectedAlertmanager ?? '',\n    handleSave,\n    updatingTree\n  );\n  const [deleteModal, openDeleteModal, closeDeleteModal] = useDeletePolicyModal(handleDelete, updatingTree);\n  const [alertInstancesModal, showAlertGroupsModal] = useAlertGroupsModal(selectedAlertmanager ?? '');\n\n  useCleanup((state) => (state.unifiedAlerting.saveAMConfig = initialAsyncRequestState));\n\n  if (!selectedAlertmanager) {\n    return null;\n  }\n\n  const numberOfMuteTimings = muteTimings.length;\n  const haveData = result && !resultError && !resultLoading;\n  const isFetching = !result && resultLoading;\n  const haveError = resultError && !resultLoading;\n\n  const muteTimingsTabActive = activeTab === ActiveTab.MuteTimings;\n  const policyTreeTabActive = activeTab === ActiveTab.NotificationPolicies;\n\n  return (\n    <>\n      <GrafanaAlertmanagerDeliveryWarning currentAlertmanager={selectedAlertmanager} />\n      <TabsBar>\n        <Tab\n          label={'Notification Policies'}\n          active={policyTreeTabActive}\n          onChangeTab={() => {\n            setActiveTab(ActiveTab.NotificationPolicies);\n            setQueryParams({ tab: ActiveTab.NotificationPolicies });\n          }}\n        />\n        <Tab\n          label={'Mute Timings'}\n          active={muteTimingsTabActive}\n          counter={numberOfMuteTimings}\n          onChangeTab={() => {\n            setActiveTab(ActiveTab.MuteTimings);\n            setQueryParams({ tab: ActiveTab.MuteTimings });\n          }}\n        />\n      </TabsBar>\n      <TabContent className={styles.tabContent}>\n        {isFetching && <LoadingPlaceholder text=\"Loading Alertmanager config...\" />}\n        {haveError && (\n          <Alert severity=\"error\" title=\"Error loading Alertmanager config\">\n            {resultError.message || 'Unknown error.'}\n          </Alert>\n        )}\n        {haveData && (\n          <>\n            {policyTreeTabActive && (\n              <>\n                <Stack direction=\"column\" gap={1}>\n                  {rootRoute && (\n                    <NotificationPoliciesFilter\n                      onChangeMatchers={setLabelMatchersFilter}\n                      onChangeReceiver={setContactPointFilter}\n                      matchingCount={routesMatchingFilters.matchedRoutesWithPath.size}\n                    />\n                  )}\n                  {rootRoute && (\n                    <Policy\n                      receivers={receivers}\n                      routeTree={rootRoute}\n                      currentRoute={rootRoute}\n                      alertGroups={alertGroups ?? []}\n                      contactPointsState={contactPointsState.receivers}\n                      readOnly={!hasConfigurationAPI}\n                      provisioned={isProvisioned}\n                      alertManagerSourceName={selectedAlertmanager}\n                      onAddPolicy={openAddModal}\n                      onEditPolicy={openEditModal}\n                      onDeletePolicy={openDeleteModal}\n                      onShowAlertInstances={showAlertGroupsModal}\n                      routesMatchingFilters={routesMatchingFilters}\n                      matchingInstancesPreview={{ groupsMap: routeAlertGroupsMap, enabled: !instancesPreviewError }}\n                      isAutoGenerated={false}\n                    />\n                  )}\n                </Stack>\n                {addModal}\n                {editModal}\n                {deleteModal}\n                {alertInstancesModal}\n              </>\n            )}\n            {muteTimingsTabActive && (\n              <MuteTimingsTable alertManagerSourceName={selectedAlertmanager} hideActions={!hasConfigurationAPI} />\n            )}\n          </>\n        )}\n      </TabContent>\n    </>\n  );\n};\n\ntype RouteFilters = {\n  contactPointFilter?: string;\n  labelMatchersFilter?: ObjectMatcher[];\n};\n\ntype FilterResult = Map<RouteWithID, RouteWithID[]>;\n\nexport interface RoutesMatchingFilters {\n  filtersApplied: boolean;\n  matchedRoutesWithPath: FilterResult;\n}\n\nexport const findRoutesMatchingFilters = (rootRoute: RouteWithID, filters: RouteFilters): RoutesMatchingFilters => {\n  const { contactPointFilter, labelMatchersFilter = [] } = filters;\n  const hasFilter = contactPointFilter || labelMatchersFilter.length > 0;\n  const havebothFilters = Boolean(contactPointFilter) && labelMatchersFilter.length > 0;\n\n  // if filters are empty we short-circuit this function\n  if (!hasFilter) {\n    return { filtersApplied: false, matchedRoutesWithPath: new Map() };\n  }\n\n  // we'll collect all of the routes matching the filters\n  // we track an array of matching routes, each item in the array is for 1 type of filter\n  //\n  // [contactPointMatches, labelMatcherMatches] -> [[{ a: [], b: [] }], [{ a: [], c: [] }]]\n  // later we'll use intersection to find results in all sets of filter matchers\n  const matchedRoutes: RouteWithID[][] = [];\n\n  // compute fully inherited tree so all policies have their inherited receiver\n  const fullRoute = computeInheritedTree(rootRoute);\n\n  // find all routes for our contact point filter\n  const matchingRoutesForContactPoint = contactPointFilter\n    ? findRoutesMatchingPredicate(fullRoute, (route) => route.receiver === contactPointFilter)\n    : new Map();\n\n  const routesMatchingContactPoint = Array.from(matchingRoutesForContactPoint.keys());\n  if (routesMatchingContactPoint) {\n    matchedRoutes.push(routesMatchingContactPoint);\n  }\n\n  // find all routes matching our label matchers\n  const matchingRoutesForLabelMatchers = labelMatchersFilter.length\n    ? findRoutesMatchingPredicate(fullRoute, (route) => findRoutesByMatchers(route, labelMatchersFilter))\n    : new Map();\n\n  const routesMatchingLabelFilters = Array.from(matchingRoutesForLabelMatchers.keys());\n  if (matchingRoutesForLabelMatchers.size > 0) {\n    matchedRoutes.push(routesMatchingLabelFilters);\n  }\n\n  // now that we have our maps for all filters, we just need to find the intersection of all maps by route if we have both filters\n  const routesForAllFilterResults = havebothFilters\n    ? findMapIntersection(matchingRoutesForLabelMatchers, matchingRoutesForContactPoint)\n    : new Map([...matchingRoutesForLabelMatchers, ...matchingRoutesForContactPoint]);\n\n  return {\n    filtersApplied: true,\n    matchedRoutesWithPath: routesForAllFilterResults,\n  };\n};\n\n// this function takes multiple maps and creates a new map with routes that exist in all maps\n//\n// map 1: { a: [], b: [] }\n// map 2: { a: [], c: [] }\n// return: { a: [] }\nfunction findMapIntersection(...matchingRoutes: FilterResult[]): FilterResult {\n  const result = new Map<RouteWithID, RouteWithID[]>();\n\n  // Iterate through the keys of the first map'\n  for (const key of matchingRoutes[0].keys()) {\n    // Check if the key exists in all other maps\n    if (matchingRoutes.every((map) => map.has(key))) {\n      // If yes, add the key to the result map\n      // @ts-ignore\n      result.set(key, matchingRoutes[0].get(key));\n    }\n  }\n\n  return result;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  tabContent: css({\n    marginTop: theme.spacing(2),\n  }),\n});\n\ninterface QueryParamValues {\n  tab: ActiveTab;\n}\n\nfunction getActiveTabFromUrl(queryParams: UrlQueryMap): QueryParamValues {\n  let tab = ActiveTab.NotificationPolicies; // default tab\n\n  if (queryParams.tab === ActiveTab.NotificationPolicies) {\n    tab = ActiveTab.NotificationPolicies;\n  }\n\n  if (queryParams.tab === ActiveTab.MuteTimings) {\n    tab = ActiveTab.MuteTimings;\n  }\n\n  return {\n    tab,\n  };\n}\n\nconst NotificationPoliciesPage = () => (\n  <AlertmanagerPageWrapper navId=\"am-routes\" accessType=\"notification\">\n    <AmRoutes />\n  </AlertmanagerPageWrapper>\n);\n\nexport default withErrorBoundary(NotificationPoliciesPage, { style: 'page' });\n","import { chain, filter } from 'lodash';\nimport { PropsWithChildren } from 'react';\n\nimport {\n  Abilities,\n  Action,\n  AlertingAction,\n  AlertmanagerAction,\n  useAlertingAbilities,\n  useAllAlertmanagerAbilities,\n} from '../hooks/useAbilities';\n\ninterface AuthorizeProps extends PropsWithChildren {\n  actions: AlertmanagerAction[] | AlertingAction[];\n}\n\nexport const Authorize = ({ actions, children }: AuthorizeProps) => {\n  const alertmanagerActions = filter(actions, isAlertmanagerAction) as AlertmanagerAction[];\n  const alertSourceActions = filter(actions, isAlertingAction) as AlertingAction[];\n\n  if (alertmanagerActions.length) {\n    return <AuthorizeAlertmanager actions={alertmanagerActions}>{children}</AuthorizeAlertmanager>;\n  }\n\n  if (alertSourceActions.length) {\n    return <AuthorizeAlertsource actions={alertSourceActions}>{children}</AuthorizeAlertsource>;\n  }\n\n  return null;\n};\n\ninterface ActionsProps<T extends Action> extends PropsWithChildren {\n  actions: T[];\n}\n\nconst AuthorizeAlertmanager = ({ actions, children }: ActionsProps<AlertmanagerAction>) => {\n  const alertmanagerAbilties = useAllAlertmanagerAbilities();\n  const allowed = actionsAllowed(alertmanagerAbilties, actions);\n\n  if (allowed) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n\nconst AuthorizeAlertsource = ({ actions, children }: ActionsProps<AlertingAction>) => {\n  const alertSourceAbilities = useAlertingAbilities();\n  const allowed = actionsAllowed(alertSourceAbilities, actions);\n\n  if (allowed) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n\n// TODO add some authorize helper components for alert source and individual alert rules\n\n// check if some action is allowed from the abilities\nfunction actionsAllowed<T extends Action>(abilities: Abilities<T>, actions: T[]) {\n  return chain(abilities)\n    .pick(actions)\n    .values()\n    .value()\n    .some(([_supported, allowed]) => allowed === true);\n}\n\nfunction isAlertmanagerAction(action: AlertmanagerAction) {\n  return Object.values(AlertmanagerAction).includes(action);\n}\n\nfunction isAlertingAction(action: AlertingAction) {\n  return Object.values(AlertingAction).includes(action);\n}\n","import { css } from '@emotion/css';\nimport * as React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nexport const EmptyArea = ({ children }: React.PropsWithChildren<{}>) => {\n  const styles = useStyles2(getStyles);\n\n  return <div className={styles.container}>{children}</div>;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css({\n      backgroundColor: theme.colors.background.secondary,\n      color: theme.colors.text.secondary,\n      padding: theme.spacing(4),\n      textAlign: 'center',\n    }),\n  };\n};\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data/src';\nimport { Alert, useStyles2 } from '@grafana/ui/src';\n\nimport { AlertmanagerChoice } from '../../../../plugins/datasource/alertmanager/types';\nimport { alertmanagerApi } from '../api/alertmanagerApi';\nimport { AlertingAction, useAlertingAbility } from '../hooks/useAbilities';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\ninterface GrafanaAlertmanagerDeliveryWarningProps {\n  currentAlertmanager: string;\n}\n\nexport function GrafanaAlertmanagerDeliveryWarning({ currentAlertmanager }: GrafanaAlertmanagerDeliveryWarningProps) {\n  const styles = useStyles2(getStyles);\n  const externalAlertmanager = currentAlertmanager !== GRAFANA_RULES_SOURCE_NAME;\n\n  const [readConfigurationStatusSupported, readConfigurationStatusAllowed] = useAlertingAbility(\n    AlertingAction.ReadConfigurationStatus\n  );\n  const canReadConfigurationStatus = readConfigurationStatusSupported && readConfigurationStatusAllowed;\n\n  const { currentData: amChoiceStatus } = alertmanagerApi.endpoints.getGrafanaAlertingConfigurationStatus.useQuery(\n    undefined,\n    {\n      skip: externalAlertmanager || !canReadConfigurationStatus,\n    }\n  );\n\n  const interactsWithExternalAMs =\n    amChoiceStatus?.alertmanagersChoice &&\n    [AlertmanagerChoice.External, AlertmanagerChoice.All].includes(amChoiceStatus?.alertmanagersChoice);\n\n  if (!interactsWithExternalAMs || externalAlertmanager) {\n    return null;\n  }\n\n  const hasActiveExternalAMs = amChoiceStatus.numExternalAlertmanagers > 0;\n\n  if (amChoiceStatus.alertmanagersChoice === AlertmanagerChoice.External) {\n    return (\n      <Alert title=\"Grafana alerts are not delivered to Grafana Alertmanager\">\n        Grafana is configured to send alerts to external Alertmanagers only. Changing Grafana Alertmanager configuration\n        will not affect delivery of your alerts.\n        <div className={styles.adminHint}>\n          To change your Alertmanager setup, go to the Alerting Admin page. If you do not have access, contact your\n          Administrator.\n        </div>\n      </Alert>\n    );\n  }\n\n  if (amChoiceStatus.alertmanagersChoice === AlertmanagerChoice.All && hasActiveExternalAMs) {\n    return (\n      <Alert title=\"You have additional Alertmanagers to configure\" severity=\"warning\">\n        Ensure you make configuration changes in the correct Alertmanagers; both internal and external. Changing one\n        will not affect the others.\n        <div className={styles.adminHint}>\n          To change your Alertmanager setup, go to the Alerting Admin page. If you do not have access, contact your\n          Administrator.\n        </div>\n      </Alert>\n    );\n  }\n\n  return null;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  adminHint: css({\n    fontSize: theme.typography.bodySmall.fontSize,\n    fontWeight: theme.typography.bodySmall.fontWeight,\n  }),\n});\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { LinkButton, useStyles2 } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AlertmanagerAlert, AlertState } from 'app/plugins/datasource/alertmanager/types';\nimport { AccessControlAction } from 'app/types';\n\nimport { AlertmanagerAction } from '../../hooks/useAbilities';\nimport { isGrafanaRulesSource } from '../../utils/datasource';\nimport { makeAMLink, makeLabelBasedSilenceLink } from '../../utils/misc';\nimport { AnnotationDetailsField } from '../AnnotationDetailsField';\nimport { Authorize } from '../Authorize';\n\ninterface AmNotificationsAlertDetailsProps {\n  alertManagerSourceName: string;\n  alert: AlertmanagerAlert;\n}\n\nexport const AlertDetails = ({ alert, alertManagerSourceName }: AmNotificationsAlertDetailsProps) => {\n  const styles = useStyles2(getStyles);\n\n  // For Grafana Managed alerts the Generator URL redirects to the alert rule edit page, so update permission is required\n  // For external alert manager the Generator URL redirects to an external service which we don't control\n  const isGrafanaSource = isGrafanaRulesSource(alertManagerSourceName);\n  const isSeeSourceButtonEnabled = isGrafanaSource\n    ? contextSrv.hasPermission(AccessControlAction.AlertingRuleRead)\n    : true;\n\n  return (\n    <>\n      <div className={styles.actionsRow}>\n        {alert.status.state === AlertState.Suppressed && (\n          <Authorize actions={[AlertmanagerAction.CreateSilence, AlertmanagerAction.UpdateSilence]}>\n            <LinkButton\n              href={`${makeAMLink(\n                '/alerting/silences',\n                alertManagerSourceName\n              )}&silenceIds=${alert.status.silencedBy.join(',')}`}\n              className={styles.button}\n              icon={'bell'}\n              size={'sm'}\n            >\n              Manage silences\n            </LinkButton>\n          </Authorize>\n        )}\n        {alert.status.state === AlertState.Active && (\n          <Authorize actions={[AlertmanagerAction.CreateSilence]}>\n            <LinkButton\n              href={makeLabelBasedSilenceLink(alertManagerSourceName, alert.labels)}\n              className={styles.button}\n              icon={'bell-slash'}\n              size={'sm'}\n            >\n              Silence\n            </LinkButton>\n          </Authorize>\n        )}\n        {isSeeSourceButtonEnabled && alert.generatorURL && (\n          <LinkButton className={styles.button} href={alert.generatorURL} icon={'chart-line'} size={'sm'}>\n            {isGrafanaSource ? 'See alert rule' : 'See source'}\n          </LinkButton>\n        )}\n      </div>\n      {Object.entries(alert.annotations).map(([annotationKey, annotationValue]) => (\n        <AnnotationDetailsField key={annotationKey} annotationKey={annotationKey} value={annotationValue} />\n      ))}\n      <div className={styles.receivers}>\n        Receivers:{' '}\n        {alert.receivers\n          .map(({ name }) => name)\n          .filter((name) => !!name)\n          .join(', ')}\n      </div>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  button: css({\n    '& + &': {\n      marginLeft: theme.spacing(1),\n    },\n  }),\n  actionsRow: css({\n    padding: `${theme.spacing(2, 0)} !important`,\n    borderBottom: `1px solid ${theme.colors.border.medium}`,\n  }),\n  receivers: css({\n    padding: theme.spacing(1, 0),\n  }),\n});\n","import { css } from '@emotion/css';\nimport { useMemo } from 'react';\n\nimport { GrafanaTheme2, intervalToAbbreviatedDurationString } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { AlertmanagerAlert } from 'app/plugins/datasource/alertmanager/types';\n\nimport { AlertLabels } from '../AlertLabels';\nimport { DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\nimport { DynamicTableWithGuidelines } from '../DynamicTableWithGuidelines';\nimport { AmAlertStateTag } from '../silences/AmAlertStateTag';\n\nimport { AlertDetails } from './AlertDetails';\n\ninterface Props {\n  alerts: AlertmanagerAlert[];\n  alertManagerSourceName: string;\n}\n\ntype AlertGroupAlertsTableColumnProps = DynamicTableColumnProps<AlertmanagerAlert>;\ntype AlertGroupAlertsTableItemProps = DynamicTableItemProps<AlertmanagerAlert>;\n\nexport const AlertGroupAlertsTable = ({ alerts, alertManagerSourceName }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const columns = useMemo(\n    (): AlertGroupAlertsTableColumnProps[] => [\n      {\n        id: 'state',\n        label: 'Notification state',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: alert }) => (\n          <>\n            <AmAlertStateTag state={alert.status.state} />\n            <span className={styles.duration}>\n              for{' '}\n              {intervalToAbbreviatedDurationString({\n                start: new Date(alert.startsAt),\n                end: new Date(alert.endsAt),\n              })}\n            </span>\n          </>\n        ),\n        size: '220px',\n      },\n      {\n        id: 'labels',\n        label: 'Instance labels',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: { labels } }) => <AlertLabels labels={labels} size=\"sm\" />,\n        size: 1,\n      },\n    ],\n    [styles]\n  );\n\n  const items = useMemo(\n    (): AlertGroupAlertsTableItemProps[] =>\n      alerts.map((alert) => ({\n        id: alert.fingerprint,\n        data: alert,\n      })),\n    [alerts]\n  );\n\n  return (\n    <div className={styles.tableWrapper} data-testid=\"alert-group-table\">\n      <DynamicTableWithGuidelines\n        cols={columns}\n        items={items}\n        isExpandable={true}\n        renderExpandedContent={({ data: alert }) => (\n          <AlertDetails alert={alert} alertManagerSourceName={alertManagerSourceName} />\n        )}\n      />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  tableWrapper: css({\n    marginTop: theme.spacing(3),\n    [theme.breakpoints.up('md')]: {\n      marginLeft: theme.spacing(4.5),\n    },\n  }),\n  duration: css({\n    marginLeft: theme.spacing(1),\n    fontSize: theme.typography.bodySmall.fontSize,\n  }),\n});\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { AlertState } from 'app/plugins/datasource/alertmanager/types';\n\nexport const getNotificationsTextColors = (theme: GrafanaTheme2) => ({\n  [AlertState.Active]: css({\n    color: theme.colors.error.text,\n  }),\n  [AlertState.Suppressed]: css({\n    color: theme.colors.primary.text,\n  }),\n  [AlertState.Unprocessed]: css({\n    color: theme.colors.secondary.text,\n  }),\n});\n","import pluralize from 'pluralize';\n\nimport { useStyles2 } from '@grafana/ui';\nimport { AlertmanagerGroup, AlertState } from 'app/plugins/datasource/alertmanager/types';\n\nimport { getNotificationsTextColors } from '../../styles/notifications';\n\ninterface Props {\n  group: AlertmanagerGroup;\n}\n\nexport const AlertGroupHeader = ({ group }: Props) => {\n  const textStyles = useStyles2(getNotificationsTextColors);\n  const total = group.alerts.length;\n  const countByStatus = group.alerts.reduce(\n    (statusObj, alert) => {\n      if (statusObj[alert.status.state]) {\n        statusObj[alert.status.state] += 1;\n      } else {\n        statusObj[alert.status.state] = 1;\n      }\n      return statusObj;\n    },\n    {} as Record<AlertState, number>\n  );\n\n  return (\n    <div>\n      {`${total} ${pluralize('alert', total)}: `}\n      {Object.entries(countByStatus).map(([state, count], index) => {\n        return (\n          <span\n            key={`${JSON.stringify(group.labels)}-notifications-${index}`}\n            className={textStyles[state as AlertState]}\n          >\n            {index > 0 && ', '}\n            {`${count} ${state}`}\n          </span>\n        );\n      })}\n    </div>\n  );\n};\n","import { css } from '@emotion/css';\nimport { useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2, Stack, TextLink } from '@grafana/ui';\nimport { AlertmanagerGroup, AlertState } from 'app/plugins/datasource/alertmanager/types';\n\nimport { createContactPointLink } from '../../utils/misc';\nimport { AlertLabels } from '../AlertLabels';\nimport { CollapseToggle } from '../CollapseToggle';\nimport { MetaText } from '../MetaText';\n\nimport { AlertGroupAlertsTable } from './AlertGroupAlertsTable';\nimport { AlertGroupHeader } from './AlertGroupHeader';\n\ninterface Props {\n  group: AlertmanagerGroup;\n  alertManagerSourceName: string;\n}\n\nexport const AlertGroup = ({ alertManagerSourceName, group }: Props) => {\n  const [isCollapsed, setIsCollapsed] = useState<boolean>(true);\n  const styles = useStyles2(getStyles);\n\n  // When group is grouped, receiver.name is 'NONE' as it can contain multiple receivers\n  const receiverInGroup = group.receiver.name !== 'NONE';\n  const contactPoint = group.receiver.name;\n\n  return (\n    <div className={styles.wrapper}>\n      <div className={styles.header}>\n        <div className={styles.group} data-testid=\"alert-group\">\n          <CollapseToggle\n            size=\"sm\"\n            isCollapsed={isCollapsed}\n            onToggle={() => setIsCollapsed(!isCollapsed)}\n            data-testid=\"alert-group-collapse-toggle\"\n          />\n          {Object.keys(group.labels).length ? (\n            <Stack direction=\"row\" alignItems=\"center\">\n              <AlertLabels labels={group.labels} size=\"sm\" />\n\n              {receiverInGroup && (\n                <MetaText icon=\"at\">\n                  Delivered to{' '}\n                  <TextLink\n                    href={createContactPointLink(contactPoint, alertManagerSourceName)}\n                    variant=\"bodySmall\"\n                    color=\"primary\"\n                    inline={false}\n                  >\n                    {group.receiver.name}\n                  </TextLink>\n                </MetaText>\n              )}\n            </Stack>\n          ) : (\n            <span>No grouping</span>\n          )}\n        </div>\n        <AlertGroupHeader group={group} />\n      </div>\n      {!isCollapsed && <AlertGroupAlertsTable alertManagerSourceName={alertManagerSourceName} alerts={group.alerts} />}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css({\n    '& + &': {\n      marginTop: theme.spacing(2),\n    },\n  }),\n  header: css({\n    display: 'flex',\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    padding: `${theme.spacing(1)} ${theme.spacing(1)} ${theme.spacing(1)} 0`,\n    backgroundColor: theme.colors.background.secondary,\n    width: '100%',\n  }),\n  group: css({\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n  }),\n  summary: css({}),\n  [AlertState.Active]: css({\n    color: theme.colors.error.main,\n  }),\n  [AlertState.Suppressed]: css({\n    color: theme.colors.primary.main,\n  }),\n  [AlertState.Unprocessed]: css({\n    color: theme.colors.secondary.main,\n  }),\n});\n","import { css, cx, keyframes } from '@emotion/css';\nimport { useMemo, useState } from 'react';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { Select, SelectCommonProps, Stack, Alert, IconButton, Text, useStyles2 } from '@grafana/ui';\nimport { ContactPointReceiverSummary } from 'app/features/alerting/unified/components/contact-points/ContactPoint';\nimport { useAlertmanager } from 'app/features/alerting/unified/state/AlertmanagerContext';\n\nimport { useContactPointsWithStatus } from '../contact-points/useContactPoints';\nimport { ContactPointWithMetadata } from '../contact-points/utils';\n\nconst MAX_CONTACT_POINTS_RENDERED = 500;\n\n// Mock sleep method, as fetching receivers is very fast and may seem like it hasn't occurred\nconst sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));\nconst LOADING_SPINNER_DURATION = 1000;\n\ntype ContactPointSelectorProps = {\n  selectProps: SelectCommonProps<ContactPointWithMetadata>;\n  showRefreshButton?: boolean;\n  /** Name of a contact point to optionally find and set as the preset value on the dropdown */\n  selectedContactPointName?: string | null;\n};\n\nexport const ContactPointSelector = ({\n  selectProps,\n  showRefreshButton,\n  selectedContactPointName,\n}: ContactPointSelectorProps) => {\n  const { selectedAlertmanager } = useAlertmanager();\n  const { contactPoints, isLoading, error, refetch } = useContactPointsWithStatus({\n    alertmanager: selectedAlertmanager!,\n  });\n  const [loaderSpinning, setLoaderSpinning] = useState(false);\n  const styles = useStyles2(getStyles);\n\n  const options: Array<SelectableValue<ContactPointWithMetadata>> = contactPoints.map((contactPoint) => {\n    return {\n      label: contactPoint.name,\n      value: contactPoint,\n      component: () => (\n        <Text variant=\"bodySmall\" color=\"secondary\">\n          <ContactPointReceiverSummary receivers={contactPoint.grafana_managed_receiver_configs} limit={2} />\n        </Text>\n      ),\n    };\n  });\n\n  const matchedContactPoint: SelectableValue<ContactPointWithMetadata> | null = useMemo(() => {\n    return options.find((option) => option.value?.name === selectedContactPointName) || null;\n  }, [options, selectedContactPointName]);\n\n  // force some minimum wait period for fetching contact points\n  const onClickRefresh = () => {\n    setLoaderSpinning(true);\n    Promise.all([refetch(), sleep(LOADING_SPINNER_DURATION)]).finally(() => {\n      setLoaderSpinning(false);\n    });\n  };\n\n  // TODO error handling\n  if (error) {\n    return <Alert title=\"Failed to fetch contact points\" severity=\"error\" />;\n  }\n\n  return (\n    <Stack>\n      <Select\n        virtualized={options.length > MAX_CONTACT_POINTS_RENDERED}\n        options={options}\n        value={matchedContactPoint}\n        {...selectProps}\n        isLoading={isLoading}\n      />\n      {showRefreshButton && (\n        <IconButton\n          name=\"sync\"\n          onClick={onClickRefresh}\n          aria-label=\"Refresh contact points\"\n          tooltip=\"Refresh contact points list\"\n          className={cx(styles.refreshButton, {\n            [styles.loading]: loaderSpinning || isLoading,\n          })}\n        />\n      )}\n    </Stack>\n  );\n};\n\nconst rotation = keyframes({\n  from: {\n    transform: 'rotate(0deg)',\n  },\n  to: {\n    transform: 'rotate(720deg)',\n  },\n});\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  refreshButton: css({\n    color: theme.colors.text.secondary,\n    cursor: 'pointer',\n    borderRadius: theme.shape.radius.circle,\n    overflow: 'hidden',\n  }),\n  loading: css({\n    pointerEvents: 'none',\n    [theme.transitions.handleMotion('no-preference')]: {\n      animation: `${rotation} 2s infinite linear`,\n    },\n    [theme.transitions.handleMotion('reduce')]: {\n      animation: `${rotation} 6s infinite linear`,\n    },\n  }),\n});\n","import { css } from '@emotion/css';\nimport { take, takeRight, uniqueId } from 'lodash';\nimport { FC } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { getTagColorsFromName, useStyles2, Stack } from '@grafana/ui';\nimport { ObjectMatcher } from 'app/plugins/datasource/alertmanager/types';\n\nimport { MatcherFormatter, matcherFormatter } from '../../utils/matchers';\nimport { PopupCard } from '../HoverCard';\n\ntype MatchersProps = { matchers: ObjectMatcher[]; formatter?: MatcherFormatter };\n\n// renders the first N number of matchers\nconst Matchers: FC<MatchersProps> = ({ matchers, formatter = 'default' }) => {\n  const styles = useStyles2(getStyles);\n\n  const NUM_MATCHERS = 5;\n\n  const firstFew = take(matchers, NUM_MATCHERS);\n  const rest = takeRight(matchers, matchers.length - NUM_MATCHERS);\n  const hasMoreMatchers = rest.length > 0;\n\n  return (\n    <span data-testid=\"label-matchers\">\n      <Stack direction=\"row\" gap={1} alignItems=\"center\" wrap={'wrap'}>\n        {firstFew.map((matcher) => (\n          <MatcherBadge key={uniqueId()} matcher={matcher} formatter={formatter} />\n        ))}\n        {/* TODO hover state to show all matchers we're not showing */}\n        {hasMoreMatchers && (\n          <PopupCard\n            arrow\n            placement=\"top\"\n            content={\n              <>\n                {rest.map((matcher) => (\n                  <MatcherBadge key={uniqueId()} matcher={matcher} />\n                ))}\n              </>\n            }\n          >\n            <span>\n              <div className={styles.metadata}>{`and ${rest.length} more`}</div>\n            </span>\n          </PopupCard>\n        )}\n      </Stack>\n    </span>\n  );\n};\n\ninterface MatcherBadgeProps {\n  matcher: ObjectMatcher;\n  formatter?: MatcherFormatter;\n}\n\nconst MatcherBadge: FC<MatcherBadgeProps> = ({ matcher, formatter = 'default' }) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.matcher(matcher[0]).wrapper}>\n      <Stack direction=\"row\" gap={0} alignItems=\"baseline\">\n        {matcherFormatter[formatter](matcher)}\n      </Stack>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  matcher: (label: string) => {\n    const { color, borderColor } = getTagColorsFromName(label);\n\n    return {\n      wrapper: css({\n        color: '#fff',\n        background: color,\n        padding: `${theme.spacing(0.33)} ${theme.spacing(0.66)}`,\n        fontSize: theme.typography.bodySmall.fontSize,\n\n        border: `solid 1px ${borderColor}`,\n        borderRadius: theme.shape.borderRadius(2),\n\n        // Ensure we preserve whitespace, as otherwise it's not noticeable _at all_\n        // when rendering the matcher, and is only noticeable when editing\n        whiteSpace: 'pre',\n      }),\n    };\n  },\n  metadata: css({\n    color: theme.colors.text.secondary,\n\n    fontSize: theme.typography.bodySmall.fontSize,\n    fontWeight: theme.typography.bodySmall.fontWeight,\n  }),\n});\n\nexport { Matchers };\n","import { SerializedError } from '@reduxjs/toolkit';\n\nimport { alertmanagerApi } from '../api/alertmanagerApi';\n\ntype Options = {\n  refetchOnFocus: boolean;\n  refetchOnReconnect: boolean;\n};\n\n// TODO refactor this so we can just call \"alertmanagerApi.endpoints.getAlertmanagerConfiguration\" everywhere\n// and remove this hook since it adds little value\nexport function useAlertmanagerConfig(amSourceName?: string, options?: Options) {\n  const fetchConfig = alertmanagerApi.endpoints.getAlertmanagerConfiguration.useQuery(amSourceName ?? '', {\n    // we'll disable cache by default to prevent overwriting other changes made since last fetch\n    refetchOnMountOrArgChange: true,\n    ...options,\n    skip: !amSourceName,\n  });\n\n  return {\n    ...fetchConfig,\n    // TODO refactor to get rid of this type assertion\n    error: fetchConfig.error as SerializedError,\n  };\n}\n","import { CorsWorker as Worker } from 'app/core/utils/CorsWorker';\n\n// CorsWorker is needed as a workaround for CORS issue caused\n// by static assets served from an url different from origin\nexport const createWorker = () => new Worker(new URL('./routeGroupsMatcher.worker.ts', import.meta.url));\n","import * as comlink from 'comlink';\nimport { useCallback, useEffect } from 'react';\n\nimport { AlertmanagerGroup, RouteWithID } from '../../../plugins/datasource/alertmanager/types';\nimport { Labels } from '../../../types/unified-alerting-dto';\n\nimport { logError, logInfo } from './Analytics';\nimport { createWorker } from './createRouteGroupsMatcherWorker';\nimport type { MatchOptions, RouteGroupsMatcher } from './routeGroupsMatcher';\n\nlet routeMatcher: comlink.Remote<RouteGroupsMatcher> | undefined;\n\n// Load worker loads the worker if it's not loaded yet\n// and returns a function to dispose of the worker\n// We do it to enable feature toggling. If the feature is disabled we don't wont to load the worker code at all\n// An alternative way would be to move all this code to the hook below, but it will create and terminate the worker much more often\nfunction loadWorker() {\n  let worker: Worker | undefined;\n\n  if (routeMatcher === undefined) {\n    try {\n      worker = createWorker();\n      routeMatcher = comlink.wrap<RouteGroupsMatcher>(worker);\n    } catch (e: unknown) {\n      if (e instanceof Error) {\n        logError(e);\n      }\n    }\n  }\n\n  const disposeWorker = () => {\n    if (worker && routeMatcher) {\n      routeMatcher[comlink.releaseProxy]();\n      worker.terminate();\n\n      routeMatcher = undefined;\n      worker = undefined;\n    }\n  };\n\n  return { disposeWorker };\n}\n\nfunction validateWorker(matcher: typeof routeMatcher): asserts matcher is comlink.Remote<RouteGroupsMatcher> {\n  if (!routeMatcher) {\n    throw new Error('Route Matcher has not been initialized');\n  }\n}\n\nexport function useRouteGroupsMatcher() {\n  useEffect(() => {\n    const { disposeWorker } = loadWorker();\n    return disposeWorker;\n  }, []);\n\n  const getRouteGroupsMap = useCallback(\n    async (rootRoute: RouteWithID, alertGroups: AlertmanagerGroup[], options?: MatchOptions) => {\n      validateWorker(routeMatcher);\n\n      const startTime = performance.now();\n\n      const result = await routeMatcher.getRouteGroupsMap(rootRoute, alertGroups, options);\n\n      const timeSpent = performance.now() - startTime;\n\n      logInfo(`Route Groups Matched in  ${timeSpent} ms`, {\n        matchingTime: timeSpent.toString(),\n        alertGroupsCount: alertGroups.length.toString(),\n        // Counting all nested routes might be too time-consuming, so we only count the first level\n        topLevelRoutesCount: rootRoute.routes?.length.toString() ?? '0',\n      });\n\n      return result;\n    },\n    []\n  );\n\n  const matchInstancesToRoute = useCallback(\n    async (rootRoute: RouteWithID, instancesToMatch: Labels[], options?: MatchOptions) => {\n      validateWorker(routeMatcher);\n\n      const startTime = performance.now();\n\n      const result = await routeMatcher.matchInstancesToRoute(rootRoute, instancesToMatch, options);\n\n      const timeSpent = performance.now() - startTime;\n\n      logInfo(`Instances Matched in  ${timeSpent} ms`, {\n        matchingTime: timeSpent.toString(),\n        instancesToMatchCount: instancesToMatch.length.toString(),\n        // Counting all nested routes might be too time-consuming, so we only count the first level\n        topLevelRoutesCount: rootRoute.routes?.length.toString() ?? '0',\n      });\n\n      return result;\n    },\n    []\n  );\n\n  return { getRouteGroupsMap, matchInstancesToRoute };\n}\n","import { isUndefined, omitBy } from 'lodash';\n\nimport { MuteTimeInterval, TimeInterval, TimeRange } from 'app/plugins/datasource/alertmanager/types';\n\nimport { MuteTimingFields, MuteTimingIntervalFields } from '../types/mute-timing-form';\n\nexport const DAYS_OF_THE_WEEK = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];\n\nexport const MONTHS = [\n  'january',\n  'february',\n  'march',\n  'april',\n  'may',\n  'june',\n  'july',\n  'august',\n  'september',\n  'october',\n  'november',\n  'december',\n];\n\nexport const defaultTimeInterval: MuteTimingIntervalFields = {\n  times: [{ start_time: '', end_time: '' }],\n  weekdays: '',\n  days_of_month: '',\n  months: '',\n  years: '',\n  location: '',\n  disable: false,\n};\n\nexport const validateArrayField = (\n  value: string | undefined,\n  validateValue: (input: string) => boolean,\n  invalidText: string\n) => {\n  if (value) {\n    return (\n      value\n        .split(',')\n        .map((x) => x.trim())\n        .every((entry) => entry.split(':').every(validateValue)) || invalidText\n    );\n  } else {\n    return true;\n  }\n};\n\nconst convertStringToArray = (str?: string) => {\n  return str ? str.split(',').map((s) => s.trim()) : undefined;\n};\n\nexport const createMuteTiming = (fields: MuteTimingFields): MuteTimeInterval => {\n  const timeIntervals: TimeInterval[] = fields.time_intervals.map(\n    ({ times, weekdays, days_of_month, months, years, location, disable }) => {\n      const interval = {\n        times: convertTimesToDto(times, disable),\n        weekdays: convertStringToArray(weekdays)?.map((v) => v.toLowerCase()),\n        days_of_month: convertStringToArray(days_of_month),\n        months: convertStringToArray(months),\n        years: convertStringToArray(years),\n        location: location ? location : undefined,\n      };\n\n      return omitBy(interval, isUndefined);\n    }\n  );\n\n  return {\n    name: fields.name,\n    time_intervals: timeIntervals,\n  };\n};\n\n/*\n * Convert times from form to dto, if disable is true, then return an empty array as times\n If the times array is empty and disable is false, then return undefined\n * @param muteTimeInterval\n * @returns MuteTimingFields\n *\n */\nfunction convertTimesToDto(times: TimeRange[] | undefined, disable: boolean) {\n  if (disable) {\n    return [];\n  }\n  const timesToReturn = times?.filter(({ start_time, end_time }) => !!start_time && !!end_time);\n  return timesToReturn?.length ? timesToReturn : undefined;\n}\n\n/*\n * Get disable field from dto, if any of the lists is an empty array, then the disable field is true\n * @param muteTimeInterval\n * @returns MuteTimingFields\n *\n */\n\nexport function isTimeIntervalDisabled(intervals: TimeInterval): boolean {\n  if (\n    intervals.times?.length === 0 ||\n    intervals.weekdays?.length === 0 ||\n    intervals.days_of_month?.length === 0 ||\n    intervals.months?.length === 0 ||\n    intervals.years?.length === 0\n  ) {\n    return true;\n  }\n  return false;\n}\n\n/*\n   Return true if all the time intervals are disabled\n  * @param muteTimeInterval\n  * @returns MuteTimingFields\n  * */\nexport function isDisabled(muteTiming: MuteTimeInterval) {\n  return muteTiming.time_intervals.every((timeInterval) => isTimeIntervalDisabled(timeInterval));\n}\n"],"names":["useCleanup","cleanupAction","dispatch","selectorRef","parseIntegrationName","integrationName","matches","contactPointsStateDtoToModel","receiversStateDto","contactPointsState","cpState","receiverState","integrationStatusDTO","integrationType","getIntegrationType","errorsCount","prevCount","fetchContactPointsState","alertManagerSourceName","response","lastValueFrom","receiversApi","alertingApi","build","amSourceName","error","useGetContactPointsState","contactPointsStateEmpty","GrafanaMuteTimingsExporterPreview","exportFormat","onClose","muteTimingsDefinition","isFetching","alertRuleApi","downloadFileName","LoadingPlaceholder","FileExportPreview","GrafanaMuteTimingExporterPreview","muteTimingName","GrafanaMuteTimingsExporter","activeTab","setActiveTab","GrafanaExportDrawer","ALL_MUTE_TIMINGS","useExportMuteTimingsDrawer","setMuteTimingName","isExportDrawerOpen","toggleShowExportDrawer","useToggle","handleClose","handleOpen","MuteTimingActionsButtons","muteTiming","deleteMuteTiming","deleteMuteTimingRequestState","showDeleteDrawer","setShowDeleteDrawer","ExportDrawer","showExportDrawer","exportSupported","exportAllowed","closeDeleteModal","isGrafanaDataSource","viewOrEditHref","viewOrEditButton","Stack","Badge","Authorize","ConfirmModal","EmptyAreaWithCTA","buttonIcon","buttonLabel","buttonSize","buttonVariant","onButtonClick","text","href","showButton","styles","getStyles","commonProps","EmptyArea","Button","theme","MuteTimingsTable","hideActions","ExportAllDrawer","showExportAllDrawer","data","isLoading","useMuteTimings","items","mute","_","allowedToCreateMuteTiming","exportMuteTimingsSupported","exportMuteTimingsAllowed","columns","useColumns","Alert","Spacer","DynamicTable","_editSupported","allowedToEdit","_deleteSupported","allowedToDelete","showActions","Provisioning","NotificationPoliciesFilter","onChangeReceiver","onChangeMatchers","matchingCount","searchParams","setSearchParams","useURLSearchParams","searchInputRef","queryString","contactPoint","getNotificationPoliciesFilters","handleChangeLabels","matchers","clearFilters","hasFilters","inputValid","Field","Label","Tooltip","Icon","Input","event","ContactPointSelector","option","Text","findRoutesMatchingPredicate","routeTree","predicateFn","matchingRouteIdsWithPath","findMatch","route","path","newPath","previousPath","findRoutesByMatchers","labelMatchersFilter","routeMatchers","filter","matcher","AlertGroupsSummary","active","suppressed","unprocessed","statsComponents","total","handleContactPointSelect","value","onChange","AmRootRouteForm","actionButtons","onSubmit","isTimingOptionsExpanded","setIsTimingOptionsExpanded","groupByOptions","setGroupByOptions","defaultValues","handleSubmit","register","control","errors","setValue","getValues","ref","field","changeValue","Link","opt","opts","Collapse","PromDurationInput","groupInterval","AmRoutesExpandedForm","defaults","formStyles","selectedAlertmanager","emptyMatcher","formAmRoute","watch","fields","append","remove","index","Select","IconButton","Switch","FieldValidationMessage","routeTimingsFields","MuteTimingsSelector","commonSpacing","useAddPolicyModal","handleAdd","loading","showModal","setShowModal","insertPosition","setInsertPosition","referenceRoute","setReferenceRoute","handleDismiss","handleShow","position","UpdatingModal","Modal","newRoute","useEditPolicyModal","handleSave","isDefaultPolicy","setIsDefaultPolicy","setRoute","useDeletePolicyModal","handleDelete","useAlertGroupsModal","alertGroups","setAlertGroups","setMatchers","formatter","setFormatter","instancesByState","instances","group","instance","Matchers","AlertGroup","isOpen","Spinner","GrafanaPoliciesExporterPreview","policiesDefinition","GrafanaPoliciesExporter","Policy","props","receivers","readOnly","provisioned","currentRoute","inheritedProperties","routesMatchingFilters","matchingInstancesPreview","onEditPolicy","onAddPolicy","onDeletePolicy","onShowAlertInstances","isAutoGenerated","continueMatching","hasMatchers","filtersApplied","matchedRoutesWithPath","matchedRoutes","hasFocus","routesPath","belongsToMatchPath","showMatchesAllLabelsWarning","actualContactPoint","contactPointErrors","getContactPointErrors","allChildPolicies","childPolicies","policy","hasChildPolicies","matchingAlertGroups","numberOfAlertInstances","isSupportedToSeeAutogeneratedChunk","isAllowedToSeeAutogeneratedChunk","isAutogeneratedPolicyRoot","isAutoGeneratedRootAndSimplifiedEnabled","showPolicyChildren","togglePolicyChildren","groupBy","muteTimings","activeTimings","timingOptions","POLICIES_PER_PAGE","visibleChildPolicies","setVisibleChildPolicies","dropdownMenuActions","useCreateDropdownMenuActions","isImmutablePolicy","childPoliciesBelongingToMatchPath","child","childPoliciesToRender","pageOfChildren","moreCount","showMore","ContinueMatchingIndicator","AllMatchesIndicator","AutogeneratedRootIndicator","DefaultPolicyIndicator","Errors","ConditionalWrap","ProvisionedTooltip","Dropdown","Menu","MetadataRow","childInheritedProperties","isThisChildAutoGenerated","isThisChildReadOnly","inheritedGrouping","hasInheritedProperties","noGrouping","customGrouping","singleGroup","hasMuteTimings","hasActiveTimings","MetaText","ContactPointsHoverDetails","TimeIntervals","TimingOptionsMeta","InheritedProperties","updatePoliciesSupported","updatePoliciesAllowed","deletePolicySupported","deletePolicyAllowed","exportPoliciesSupported","exportPoliciesAllowed","showExportAction","showEditAction","showDeleteAction","Fragment","AUTOGENERATED_ROOT_LABEL_NAME","config","objectMatcher","children","properties","key","routePropertyToLabel","routePropertyToValue","timings","timing","TextLink","groupWait","repeatInterval","metaOptions","meta","details","receiver","groupedIntegrations","type","integrations","acc","notifierStatuses","notifierErrors","status","isNotGrouping","isSingleGroup","label","color","borderColor","ActiveTab","AmRoutes","useGetAlertmanagerAlertGroupsQuery","alertmanagerApi","queryParams","setQueryParams","useQueryParams","tab","getActiveTabFromUrl","updatingTree","setUpdatingTree","contactPointFilter","setContactPointFilter","setLabelMatchersFilter","hasConfigurationAPI","isGrafanaAlertmanager","getRouteGroupsMap","useRouteGroupsMatcher","result","resultLoading","resultError","useAlertmanagerConfig","refetchAlertGroups","rootRoute","routeAlertGroupsMap","instancesPreviewError","triggerGetRouteGroupsMap","useAsyncFn","findRoutesMatchingFilters","isProvisioned","partialRoute","newRouteTree","updateRouteTree","closeEditModal","closeAddModal","addModal","openAddModal","editModal","openEditModal","deleteModal","openDeleteModal","alertInstancesModal","showAlertGroupsModal","state","numberOfMuteTimings","haveData","haveError","muteTimingsTabActive","policyTreeTabActive","GrafanaAlertmanagerDeliveryWarning","TabsBar","Tab","TabContent","filters","hasFilter","havebothFilters","fullRoute","matchingRoutesForContactPoint","routesMatchingContactPoint","matchingRoutesForLabelMatchers","routesMatchingLabelFilters","findMapIntersection","matchingRoutes","map","NotificationPoliciesPage","actions","alertmanagerActions","isAlertmanagerAction","alertSourceActions","isAlertingAction","AuthorizeAlertmanager","AuthorizeAlertsource","alertmanagerAbilties","actionsAllowed","alertSourceAbilities","abilities","_supported","allowed","action","currentAlertmanager","externalAlertmanager","readConfigurationStatusSupported","readConfigurationStatusAllowed","canReadConfigurationStatus","amChoiceStatus","hasActiveExternalAMs","AlertDetails","alert","isGrafanaSource","isSeeSourceButtonEnabled","annotationKey","annotationValue","AnnotationDetailsField","name","AlertGroupAlertsTable","alerts","AmAlertStateTag","labels","AlertLabels","DynamicTableWithGuidelines","getNotificationsTextColors","AlertGroupHeader","textStyles","countByStatus","statusObj","count","isCollapsed","setIsCollapsed","receiverInGroup","CollapseToggle","MAX_CONTACT_POINTS_RENDERED","sleep","ms","resolve","LOADING_SPINNER_DURATION","selectProps","showRefreshButton","selectedContactPointName","contactPoints","refetch","loaderSpinning","setLoaderSpinning","options","matchedContactPoint","onClickRefresh","rotation","NUM_MATCHERS","firstFew","rest","hasMoreMatchers","MatcherBadge","fetchConfig","createWorker","routeMatcher","loadWorker","worker","comlink","e","validateWorker","disposeWorker","startTime","timeSpent","matchInstancesToRoute","instancesToMatch","DAYS_OF_THE_WEEK","MONTHS","defaultTimeInterval","validateArrayField","validateValue","invalidText","x","entry","convertStringToArray","str","s","createMuteTiming","timeIntervals","times","weekdays","days_of_month","months","years","location","disable","interval","convertTimesToDto","v","timesToReturn","start_time","end_time","isTimeIntervalDisabled","intervals","isDisabled","timeInterval"],"sourceRoot":""}