{"version":3,"file":"scenes.059d9c1ed1753c476a4a.js","mappings":"oOAeO,MAAMA,EAAgB,CAAC,CAAC,IAAa,CAC1C,MAAMC,KAAS,KAAU,EACnBC,KAAU,KAAS,OAChB,sBAAmB,EAAE,QAAQ,CAAE,QAAS,EAAK,CAAC,EACpD,CAAC,CAAC,EAEL,OACE,gBAAC,IAAI,CAAC,MAAM,SAAS,SAAS,2DAC5B,gBAAC,kBACC,gBAAC,QAAK,CAAC,UAAU,SAAS,IAAK,GAC7B,gBAAC,UAAG,MAAI,EACR,gBAAC,QAAK,CAAC,UAAU,SAAS,IAAK,GAC7B,gBAAC,IAAI,CAAC,KAAM,8BACV,gBAAC,iBAAa,oBAAkB,CAClC,CACF,EACA,gBAAC,UAAG,aAAW,EACf,gBAAC,QAAK,CAAC,UAAU,SAAS,IAAK,GAC5BD,EAAO,IAAKE,GACX,gBAAC,IAAI,CAAC,IAAKA,EAAM,MAAO,KAAM,WAAWA,EAAM,SAC7C,gBAAC,iBAAcA,EAAM,KAAM,CAC7B,CACD,CACH,EACCD,EAAQ,OACP,gCACE,gBAAC,UAAG,oBAAkB,EACtB,gBAAC,QAAK,CAAC,UAAU,SAAS,IAAK,GAC5BA,EAAQ,MAAO,KAAK,IAAKE,GACxB,gBAAC,IAAI,CAAC,KAAM,qBAAqBA,EAAK,MAAO,IAAKA,EAAK,KACrD,gBAAC,iBAAcA,EAAK,IAAK,CAC3B,CACD,CACH,CACF,CAEJ,CACF,CACF,CAEJ,EAEA,EAAeJ,C,qGC/CR,MAAMK,EAAaC,GAAiB,CACzC,MAAMH,KAAQ,KAAgBG,EAAM,MAAM,OAAO,IAAI,EAC/C,CAACC,EAAeC,CAAc,KAAI,YAAS,EAAK,EAStD,SAPA,aAAU,IAAM,CACVL,GAAS,CAACI,OACZ,MAAkB,EAAE,SAASJ,CAAK,EAClCK,EAAe,EAAI,EAEvB,EAAG,CAACD,EAAeJ,CAAK,CAAC,EAEpBA,EAIAI,EAIE,gBAACJ,EAAM,UAAN,CAAgB,MAAOA,CAAA,CAAO,EAH7B,KAJA,gBAAC,UAAG,iBAAe,CAQ9B,EAEA,EAAeE,C,yPCpBR,MAAMI,UAAyB,IAAuC,CAAtE,kCACL,KAAO,SAAYC,GAAkB,CACnC,KAAK,SAAS,CAAE,MAAAA,CAAM,CAAC,EACvB,KAAK,MAAM,SAASA,CAAK,CAC3B,EAOF,CAXaD,EAMG,UAAY,CAAC,CAAE,MAAAE,CAAM,IAA6C,CAC9E,KAAM,CAAE,QAAAC,EAAS,MAAAF,CAAM,EAAIC,EAAM,SAAS,EAE1C,OAAO,gBAACE,EAAA,EAAgB,CAAC,QAAAD,EAAkB,MAAAF,EAAc,SAAUC,EAAM,SAAU,CACrF,E,eCbK,MAAMG,UAAuB,IAAqC,CAAlE,kCACL,KAAO,SAAYC,GAA2C,CAC5D,KAAK,SAAS,CAAE,MAAOA,EAAI,cAAc,KAAM,CAAC,CAClD,EAOF,CAVaD,EAKG,UAAY,CAAC,CAAE,MAAAH,CAAM,IAA2C,CAC5E,KAAM,CAAE,MAAAD,CAAM,EAAIC,EAAM,SAAS,EAEjC,OAAO,gBAACK,EAAA,EAAK,CAAC,MAAO,GAAI,YAAY,YAAY,MAAAN,EAAc,SAAUC,EAAM,SAAU,CAC3F,E,+CCNK,SAASM,EAAwBC,EAAsC,CAC5E,MAAMC,EAAyD,CAC7D,GAAI,WACJ,QAAS,CAAE,MAAOD,CAAM,CAC1B,EAEA,MAAO,CACL,GAAI,kBACJ,QAAS,CACP,KAAM,aACN,MAAO,SACP,QAAS,CACP,CACE,UAAW,UACX,OAAQC,CACV,CACF,CACF,CACF,CACF,CAEO,SAASC,EAA6BF,EAAwC,CACnF,MAAO,IAAOG,GACLA,EAAO,QACZC,EAAA,GAAKC,GACIA,EAAK,OAAQC,MAAU,KAAoBA,CAAK,EAAE,YAAY,EAAE,SAASN,EAAM,YAAY,CAAC,CAAC,CACrG,CACH,CAEJ,C,eCpCO,SAASO,GAAoB,CAClC,MAAMC,EAAW,YAAY,EAC7B,OAAO,uBAAuBA,EAAS,QAAU,EAAE,CACrD,CAEO,SAASC,EAA0BC,EAAcC,EAA6B,CACnF,OAAOC,EAAA,aAAkBF,EAAMC,CAAM,CACvC,CCcO,SAASE,GAAyC,CACvD,MAAMC,EAAY,IAAIlB,EAAe,CAAE,MAAO,EAAG,CAAC,EAE5CmB,EAAqBC,EAAgB,CACzC,KAAM,kHACR,CAAC,EAEKC,EAA6B,IAAI,KAAqB,CAC1D,MAAOF,EACP,gBAAiB,CAAChB,EAAwB,EAAE,CAAC,CAC/C,CAAC,EAEDkB,EAA2B,qBAAqB,IAAM,CACpD,MAAMC,EAAMJ,EAAU,iBAAkBK,GAAU,CAEhDF,EAA2B,SAAS,CAAE,gBAAiB,CAAClB,EAAwBoB,EAAM,KAAK,CAAC,CAAE,CAAC,EAC/FF,EAA2B,yBAAyB,CACtD,CAAC,EAED,MAAO,IAAMC,EAAI,YAAY,CAC/B,CAAC,EAED,MAAME,EAAoB,IAAI,IAAS,CACrC,MAAOH,EACP,SAAU,QACV,MAAO,GACP,QAAS,CACP,OAAQ,CACN,iBAAkB,EACpB,CACF,EACA,YAAa,CACX,SAAU,CAAC,EACX,UAAW,CACT,CACE,QAAS,CACP,GAAI,WACJ,QAAS,IACX,EACA,WAAY,CAAC,CAAE,GAAI,aAAc,MAAO,EAAM,CAAC,CACjD,EACA,CACE,QAAS,CACP,GAAI,SACJ,QAAS,MACX,EACA,WAAY,CAAC,CAAE,GAAI,gBAAiB,MAAO,EAAK,CAAC,CACnD,EACA,CACE,QAAS,CACP,GAAI,SACJ,QAAS,OACX,EACA,WAAY,CAAC,CAAE,GAAI,cAAe,MAAO,gBAAiB,CAAC,CAC7D,EACA,CACE,QAAS,CACP,GAAI,SACJ,QAAS,SACX,EACA,WAAY,CACV,CACE,GAAI,QACJ,MAAO,CACL,CACE,MAAO,+BACP,WAAY,IAAM,CAChB,MAAMN,EAAS,qBAAgC,EAC/C,OAAOF,EACL,oEACAE,CACF,CACF,CACF,CACF,CACF,CACF,CACF,CACF,CACF,CACF,CAAC,EAEKU,EAAwB,IAAI,KAAiB,CACjD,WAAY,CAAE,IAAK,iBAAkB,EACrC,QAAS,CACP,CACE,MAAO,IAEP,KAAM,iHACN,MAAO,GACP,OAAQ,cACR,aAAc,oDACd,cAAe,GACjB,CACF,CACF,CAAC,EAEKC,EAAgC,IAAI,KAAqB,CAC7D,MAAOD,EACP,gBAAiB,CAACnB,EAA6B,EAAE,CAAC,CACpD,CAAC,EAEDoB,EAA8B,qBAAqB,IAAM,CACvD,MAAMJ,EAAMJ,EAAU,iBAAkBK,GAAU,CAEhDG,EAA8B,SAAS,CAAE,gBAAiB,CAACpB,EAA6BiB,EAAM,KAAK,CAAC,CAAE,CAAC,EACvGG,EAA8B,yBAAyB,CACzD,CAAC,EAED,MAAO,IAAMJ,EAAI,YAAY,CAC/B,CAAC,EAED,MAAMK,EAAc,IAAI,KAAqB,CAC3C,MAAOD,EACP,KAAM,IAAI,KAAgB,CACxB,UAAW,SACX,SAAU,CAAC,CACb,CAAC,EACD,eAAgB,CAACjB,EAAMC,EAAOkB,IACrB,IAAI,KAAc,CACvB,IAAK,SAASA,IACd,UAAW,IACX,MAAO,IAAI,KAAc,CACvB,KAAM,CACJ,GAAGnB,EACH,OAAQ,CAACC,CAAK,CAChB,CACF,CAAC,EACD,KAAM,IAAI,KAAgB,CACxB,UAAW,MACX,SAAU,CACR,IAAI,KAAc,CAChB,KAAM,IAAI,IAAS,CACjB,SAAU,aAKV,SAAO,KAAoBA,CAAK,EAChC,QAAS,CACP,OAAQ,CAAE,YAAa,QAAS,CAClC,CACF,CAAC,CACH,CAAC,EAED,IAAI,KAAc,CAChB,MAAO,IACP,KAAM,IAAI,IAAS,CACjB,MAAO,OACP,SAAU,OACV,YAAa,CACX,SAAU,CACR,YAAa,OACb,MAAO,CACL,CACE,MAAO,+BACP,IAAK,GACL,WAAY,IAAM,CAChB,MAAMK,EAAS,qBAAgC,EAC/C,OAAOF,EACL,8EACAE,CACF,CACF,CACF,CACF,CACF,EACA,UAAW,CAAC,CACd,EACA,QAAS,CACP,UAAW,OACX,SAAU,OACZ,CACF,CAAC,CACH,CAAC,CACH,CACF,CAAC,CACH,CAAC,CAEL,CAAC,EAEKc,EAAS,IAAI,KAAgB,CACjC,SAAU,CAAC,IAAI,KAAc,CAAE,KAAML,CAAkB,CAAC,CAAC,CAC3D,CAAC,EAEKM,EAAc,IAAInC,EAAiB,CACvC,QAAS,CACP,CAAE,MAAO,QAAS,MAAO,OAAQ,EACjC,CAAE,MAAO,SAAU,MAAO,QAAS,CACrC,EACA,MAAO,QACP,SAAWC,GAAU,CACfA,IAAU,QACZiC,EAAO,SAAS,CAAE,SAAU,CAAC,IAAI,KAAc,CAAE,KAAML,CAAkB,CAAC,CAAC,CAAE,CAAC,EAE9EK,EAAO,SAAS,CAAE,SAAU,CAACF,CAAW,CAAE,CAAC,CAE/C,CACF,CAAC,EAiBD,OAfc,IAAI,KAAc,CAC9B,WAAYI,EAAwB,EACpC,MAAOZ,EACP,WAAY,IAAI,KAAe,CAAE,KAAM,SAAU,GAAI,KAAM,CAAC,EAC5D,SAAU,CACR,IAAI,KAAuB,CAAC,CAAC,EAC7BD,EACA,IAAI,KACJY,EACA,IAAI,KAAgB,CAAE,WAAY,EAAK,CAAC,EACxC,IAAI,KAAmB,CAAE,WAAY,EAAK,CAAC,CAC7C,EACA,KAAMD,CACR,CAAC,CAGH,CAEO,SAASG,EAAuBC,EAAgC,CACrE,MAAMR,EAAwBS,EAAmB,CAC/C,KAAM,uFAAuFD,gCAC7F,aAAc,mDAChB,CAAC,EAEKE,EAAqBD,EAAmB,CAC5C,KAAM,yFAAyFD,2BAC/F,aAAc,mDAChB,CAAC,EAoCD,OAlCc,IAAI,KAAc,CAC9B,WAAYF,EAAwB,EACpC,WAAY,IAAI,KAAe,CAAE,KAAM,SAAU,GAAI,KAAM,CAAC,EAC5D,SAAU,CACR,IAAI,KAAuB,CAAC,CAAC,EAC7B,IAAI,KACJ,IAAI,KAAgB,CAAE,WAAY,EAAK,CAAC,EACxC,IAAI,KAAmB,CAAE,WAAY,EAAK,CAAC,CAC7C,EACA,KAAM,IAAI,KAAgB,CACxB,UAAW,SACX,SAAU,CACR,IAAI,KAAc,CAChB,KAAM,IAAI,IAAS,CACjB,MAAON,EACP,SAAU,aACV,MAAO,4BAEP,QAAS,CAAC,CACZ,CAAC,CACH,CAAC,EACD,IAAI,KAAc,CAChB,KAAM,IAAI,IAAS,CACjB,MAAOU,EACP,SAAU,aACV,MAAO,kBAEP,QAAS,CAAC,CACZ,CAAC,CACH,CAAC,CACH,CACF,CAAC,CACH,CAAC,CAGH,CAEA,SAASf,EAAgBhB,EAA6C,CACpE,OAAO,IAAI,KAAiB,CAC1B,WAAY,CAAE,IAAK,iBAAkB,EACrC,QAAS,CACP,CACE,MAAO,IACP,QAAS,GACT,OAAQ,QACR,cAAe,IACf,GAAGA,CACL,CACF,CACF,CAAC,CACH,CAEA,SAAS8B,EAAmB9B,EAA6C,CACvE,OAAO,IAAI,KAAiB,CAC1B,WAAY,CAAE,IAAK,iBAAkB,EACrC,QAAS,CACP,CACE,MAAO,IACP,MAAO,GACP,OAAQ,cACR,cAAe,IACf,GAAGA,CACL,CACF,CACF,CAAC,CACH,CAEO,SAASgC,GAAkC,CA0GhD,OAzGc,IAAI,KAAc,CAC9B,WAAYL,EAAwB,EACpC,WAAY,IAAI,KAAe,CAAE,KAAM,SAAU,GAAI,KAAM,CAAC,EAC5D,SAAU,CACR,IAAI,KAAuB,CAAC,CAAC,EAC7B,IAAI,KACJ,IAAI,KAAgB,CAAE,WAAY,EAAK,CAAC,EACxC,IAAI,KAAmB,CAAE,WAAY,EAAK,CAAC,CAC7C,EACA,KAAM,IAAI,KAAgB,CACxB,UAAW,SACX,SAAU,CACR,IAAI,KAAc,CAChB,OAAQ,IACR,KAAM,IAAI,KAAgB,CACxB,SAAU,CACR,IAAI,KAAc,CAChB,KAAMM,EAAoB,gCAAiC,YAAY,CACzE,CAAC,EACD,IAAI,KAAc,CAChB,KAAMA,EAAoB,2BAA4B,OAAO,CAC/D,CAAC,EACD,IAAI,KAAc,CAChB,KAAMA,EAAoB,sCAAuC,cAAc,CACjF,CAAC,EACD,IAAI,KAAc,CAChB,KAAMA,EAAoB,4CAA6C,wBAAwB,CACjG,CAAC,CACH,CACF,CAAC,CACH,CAAC,EAED,IAAI,KAAc,CAChB,KAAM,IAAI,IAAS,CACjB,MAAO,IAAI,KAAiB,CAC1B,WAAY,CAAE,IAAK,iBAAkB,EACrC,QAAS,CACP,CACE,MAAO,IACP,KAAM,2EACN,MAAO,GACP,OAAQ,cACR,cAAe,GACjB,CACF,CACF,CAAC,EACD,SAAU,aACV,MAAO,eACP,QAAS,CACP,OAAQ,CACN,WAAY,EACd,CACF,EACA,YAAa,CACX,SAAU,CACR,KAAM,QACN,IAAK,EACL,OAAQ,CACN,UAAW,EACX,YAAa,CAEf,CACF,EACA,UAAW,CAAC,CACd,CACF,CAAC,CACH,CAAC,EACD,IAAI,KAAc,CAChB,KAAM,IAAI,IAAS,CACjB,MAAO,IAAI,KAAiB,CAC1B,WAAY,CAAE,IAAK,iBAAkB,EACrC,QAAS,CACP,CACE,MAAO,IACP,KAAM,2DACN,MAAO,GACP,OAAQ,cACR,cAAe,GACjB,CACF,CACF,CAAC,EACD,SAAU,aACV,MAAO,cACP,QAAS,CACP,OAAQ,CACN,WAAY,EACd,CACF,EACA,YAAa,CACX,SAAU,CACR,IAAK,EACL,OAAQ,CACN,UAAW,EACX,YAAa,CAEf,CACF,EACA,UAAW,CAAC,CACd,CACF,CAAC,CACH,CAAC,CACH,CACF,CAAC,CACH,CAAC,CAGH,CAEA,SAASN,GAA0B,CACjC,OAAO,IAAI,KAAiB,CAC1B,UAAW,CACT,IAAI,KAAc,CAChB,KAAM,WACN,WAAY,CAAE,IAAK,iBAAkB,EACrC,MAAO,CAAE,MAAO,mEAAoE,CACtF,CAAC,CACH,CACF,CAAC,CACH,CAEA,SAASM,EAAoBjC,EAAekC,EAAe,CACzD,OAAO,IAAI,IAAS,CAClB,MAAOlB,EAAgB,CAAE,KAAMhB,CAAM,CAAC,EACtC,SAAU,OACV,MAAAkC,EACA,QAAS,CAAC,EACV,YAAa,CACX,SAAU,CACR,MAAO,CAAE,WAAY,OAAQ,KAAM,SAAuB,CAC5D,EACA,UAAW,CAAC,CACd,CACF,CAAC,CACH,CAEO,SAASC,EAAoBN,EAAgC,CAClE,MAAMO,EAAY,IAAI,KAAiB,CACrC,WAAY,CAAE,IAAK,WAAY,EAC/B,QAAS,CACP,CACE,MAAO,IACP,KAAM,wCAAwCP,uBAC9C,UAAW,QACX,cAAe,GACjB,CACF,CACF,CAAC,EAgDD,OA9Cc,IAAI,KAAc,CAC9B,WAAYF,EAAwB,EACpC,WAAY,IAAI,KAAe,CAAE,KAAM,SAAU,GAAI,KAAM,CAAC,EAC5D,SAAU,CACR,IAAI,KAAuB,CAAC,CAAC,EAC7B,IAAI,KACJ,IAAI,KAAgB,CAAE,WAAY,EAAK,CAAC,EACxC,IAAI,KAAmB,CAAE,WAAY,EAAK,CAAC,CAC7C,EACA,KAAM,IAAI,KAAgB,CACxB,UAAW,SACX,SAAU,CACR,IAAI,KAAc,CAChB,KAAM,IAAI,IAAS,CACjB,SAAU,OACV,MAAO,GACP,QAAS,CACP,KAAM,WACN,QAAS;AAAA,+CACwB,mBAAmBE,CAAO;AAAA,+CAC1B,mBAAmBA,CAAO;AAAA,GAE7D,CACF,CAAC,CACH,CAAC,EACD,IAAI,KAAc,CAChB,KAAM,IAAI,IAAS,CACjB,MAAOO,EACP,SAAU,OACV,MAAO,GACP,QAAS,CACP,SAAU,GACV,WAAY,GACZ,iBAAkB,GAClB,eAAgB,GAChB,mBAAoB,GACpB,iBAAkB,GAClB,cAAe,OACf,UAAW,YACb,CACF,CAAC,CACH,CAAC,CACH,CACF,CAAC,CACH,CAAC,CAGH,CAEO,SAASC,GAAsC,CACpD,MAAMD,EAAY,IAAI,KAAiB,CACrC,WAAY,CAAE,IAAK,WAAY,EAC/B,QAAS,CACP,CACE,MAAO,IACP,KAAM,0CACN,UAAW,QACX,cAAe,GACjB,CACF,CACF,CAAC,EAmCD,OAjCc,IAAI,KAAc,CAC9B,WAAYT,EAAwB,EACpC,WAAY,IAAI,KAAe,CAAE,KAAM,SAAU,GAAI,KAAM,CAAC,EAC5D,SAAU,CACR,IAAI,KAAuB,CAAC,CAAC,EAC7B,IAAI,KACJ,IAAI,KAAgB,CAAE,WAAY,EAAK,CAAC,EACxC,IAAI,KAAmB,CAAE,WAAY,EAAK,CAAC,CAC7C,EACA,KAAM,IAAI,KAAgB,CACxB,UAAW,SACX,SAAU,CACR,IAAI,KAAc,CAChB,KAAM,IAAI,IAAS,CACjB,MAAOS,EACP,SAAU,OACV,MAAO,GACP,QAAS,CACP,SAAU,GACV,WAAY,GACZ,iBAAkB,GAClB,eAAgB,GAChB,mBAAoB,GACpB,iBAAkB,GAClB,cAAe,OACf,UAAW,YACb,CACF,CAAC,CACH,CAAC,CACH,CACF,CAAC,CACH,CAAC,CAGH,CC/hBO,SAASE,GAAuB,CACrC,MAAMC,KAAW,WACf,IACE,IAAI,KAAS,CACX,MAAO,CAACC,EAAiB,CAAC,CAC5B,CAAC,EACH,CAAC,CACH,EAEMC,KAAaC,EAAA,GAAW,QAAQ,EAChC,CAACC,CAAa,KAAI,YAAgC,CAAE,WAAAF,CAAW,CAAC,EAEtE,OACE,gBAACG,EAAA,YAA2B,MAAOD,CAAA,EACjC,gBAACJ,EAAS,UAAT,CAAmB,MAAOA,CAAA,CAAU,CACvC,CAEJ,CAEO,SAASC,GAAmB,CACjC,OAAO,IAAI,KAAa,CACtB,MAAO,qBACP,SAAU,mEACV,IAAK,6BACL,oBAAqB,GACrB,SAAUR,EACV,KAAM,CACJ,IAAI,KAAa,CACf,MAAO,WACP,IAAK,6BACL,SAAUA,EACV,gBAAiB,CAAC,OAAQ,KAAM,cAAc,CAChD,CAAC,EACD,IAAI,KAAa,CACf,MAAO,gBACP,IAAK,sCACL,SAAUnB,EACV,gBAAiB,CAAC,OAAQ,KAAM,cAAc,EAC9C,WAAY,CACV,CACE,UAAW,+CACX,QAASgC,CACX,CACF,CACF,CAAC,EACD,IAAI,KAAa,CACf,MAAO,OACP,IAAK,kCACL,SAAUR,EACV,gBAAiB,CAAC,OAAQ,KAAM,cAAc,CAChD,CAAC,CACH,CACF,CAAC,CACH,CAEO,SAASQ,EACdC,EACAC,EACA,CACA,MAAMlB,EAAU,mBAAmBiB,EAAM,OAAO,OAAO,EACjDE,EAAU,uCAAuC,mBAAmBnB,CAAO,IAEjF,OAAO,IAAI,KAAa,CACtB,MAAOA,EACP,SAAU,2EACV,IAAKmB,EACL,cAAe,IAAMD,EACrB,SAAU,IAAMnB,EAAuBC,CAAO,EAC9C,KAAM,CACJ,IAAI,KAAa,CACf,MAAO,UACP,IAAKmB,EACL,UAAW,+CACX,SAAU,IAAMpB,EAAuBC,CAAO,EAC9C,gBAAiB,CAAC,OAAQ,KAAM,cAAc,CAChD,CAAC,EACD,IAAI,KAAa,CACf,MAAO,OACP,IAAKmB,EAAU,QACf,UAAW,oDACX,SAAU,IAAMb,EAAoBN,CAAO,EAC3C,gBAAiB,CAAC,OAAQ,KAAM,cAAc,EAC9C,WAAY,CACV,CACE,UAAW,iEACX,QAASoB,CACX,CACF,CACF,CAAC,CACH,CACF,CAAC,CACH,CAEO,SAASA,EACdH,EACAC,EACA,CACA,MAAMlB,EAAU,mBAAmBiB,EAAM,OAAO,OAAO,EACjDI,EAAc,mBAAmBJ,EAAM,OAAO,WAAW,EACzDE,EAAU,uCAAuC,mBAAmBnB,CAAO,UAAUqB,IAE3F,OAAO,IAAI,KAAa,CACtB,MAAOA,EACP,SAAU,iCACV,IAAKF,EACL,cAAe,IAAMD,EACrB,SAAU,IACD,IAAI,KAAc,CACvB,KAAM,IAAI,KAAgB,CACxB,SAAU,CACR,IAAI,KAAc,CAChB,KAAM,IAAI,KAAgB,CACxB,KAAM,cAAgBG,CACxB,CAAC,CACH,CAAC,CACH,CACF,CAAC,CACH,CAAC,CAEL,CAAC,CACH,CAEA,QAAeZ,C,yIChIR,MAAMa,UAAuB,IAAqC,CAEzE,CAFaA,EACG,UAAYC,EAG5B,SAASA,EAAuB,CAAE,MAAA3D,CAAM,EAAwC,CAC9E,KAAM,CAAE,MAAAyC,EAAO,KAAAmB,EAAM,QAAAC,EAAU,CAAC,EAAG,IAAAC,EAAK,SAAAC,CAAS,EAAI/D,EAAM,SAAS,EAC9DgE,KAAS,MAAWC,CAAS,EAE7BC,GAAkBL,GAAW,CAAC,GAAG,IAAKM,GAAW,gBAACA,EAAO,UAAP,CAAiB,IAAKA,EAAO,MAAM,IAAK,MAAOA,CAAA,CAAQ,CAAE,EAE7GL,GAAK,QACPI,EAAe,KACb,gBAAC,KACC,KAAK,OACL,QAAS,IAAM,UAAqB,MAAMJ,GAAK,EAC/C,QAAQ,oBACR,IAAI,4BACN,CACF,EAEF,MAAMM,EAAc,gBAAC,IAAe,CAAC,QAASF,CAAA,CAAgB,EAE9D,OACE,gBAAC,IAAI,CAAC,MAAM,SAAS,QAAS,CAAE,KAAMzB,CAAM,EAAG,OAAQ,YAAuB,QAAS2B,CAAA,EACpFL,GACC,gBAAC,OAAI,UAAWC,EAAO,UACpBD,EAAS,IAAKM,GACb,gBAACA,EAAQ,UAAR,CAAkB,IAAKA,EAAQ,MAAM,IAAK,MAAOA,CAAA,CAAS,CAC5D,CACH,EAEF,gBAAC,OAAI,UAAWL,EAAO,MACrB,gBAACJ,EAAK,UAAL,CAAe,MAAOA,CAAA,CAAM,CAC/B,CACF,CAEJ,CAEA,SAASK,EAAUK,EAAsB,CACvC,MAAO,CACL,QAAM,OAAI,CACR,SAAU,EACV,QAAS,OACT,IAAK,KACP,CAAC,EACD,YAAU,OAAI,CACZ,QAAS,OACT,cAAeA,EAAM,QAAQ,CAAC,EAC9B,SAAU,OACV,WAAY,SACZ,IAAKA,EAAM,QAAQ,CAAC,CACtB,CAAC,CACH,CACF,C,0LCrEO,SAASC,EAAyBC,EAAiB,CACxD,MAAO,SAASA,GAClB,CAOO,SAASC,EAAsBjF,EAA8C,CAClF,MAAMkF,EAAmD,CAAC,EAE1D,OAAAlF,EAAM,aAAcmF,GAAU,CAC5BD,EAAqB,KAAKD,EAAsBE,CAAK,CAAC,CACxD,CAAC,EAEDD,EAAqB,KAAKlF,EAAM,SAAS,CAAC,EAEnC,IAAM,CACX,UAAW4C,KAAWsC,EACpBtC,EAAQ,CAEZ,CACF,CCPO,MAAMwC,UAA+B,IAA0E,CAI7G,YAAYlD,EAAoC,CACrD,MAAMA,CAAK,EAEX,KAAK,qBAAqB,KAIxB,KAAK,mBAAmB,EAEjB,IAAM,CACP,KAAK,WACP,KAAK,UAAU,YAAY,EAEzB,KAAK,gCACP,KAAK,+BAA+B,CAExC,EACD,CACH,CAEQ,oBAAqB,CAC3B,KAAM,CAAE,MAAAnB,CAAM,EAAI,KAAK,MAMvB,GAJI,KAAK,WACP,KAAK,UAAU,YAAY,EAGzB,CAACA,EAAM,QACT,OAGF,MAAMsE,EAAYN,EAAyBhE,EAAM,OAAO,EAClDG,EAASoE,EAAkB,KAAK,QAAQ,EAAItF,GAAuBA,EAAM,MAAM,MAAQqF,CAAS,EAEtG,GAAI,CAACnE,EAAQ,CACX,QAAQ,IAAI,2EAA2E,EACvF,MACF,CAEA,IAAIqE,EAAarE,EAAO,MAAM,MAC9B,GAAI,CAACqE,EAAY,CACf,QAAQ,IAAI,iDAAiD,EAC7D,MACF,CAMA,GAFA,KAAK,+BAAiCA,EAAW,SAAS,EAEtDA,aAAsB,MACpB,CAACxE,EAAM,eAAgB,CACzB,GAAI,CAACwE,EAAW,MAAM,MACpB,MAAM,IAAI,MAAM,wDAAwD,EAE1EA,EAAaA,EAAW,MAAM,KAChC,CAGF,KAAK,UAAYA,EAAW,iBAAkBrD,GAAU,KAAK,SAAS,CAAE,KAAMA,EAAM,IAAK,CAAC,CAAC,EAG3F,KAAK,SAAS,CAAE,KAAMqD,EAAW,MAAM,IAAK,CAAC,CAC/C,CACF,CAEO,SAASD,EAAkBtF,EAAoBwF,EAA4D,CAChH,GAAIA,EAAMxF,CAAK,EACb,OAAOA,EAGT,IAAIyF,EAA4B,KAEhC,OAAAzF,EAAM,aAAcmF,GAAU,CAC5B,IAAIO,EAAQJ,EAAkBH,EAAOK,CAAK,EACtCE,IACFD,EAAQC,EAEZ,CAAC,EAEMD,CACT,CC3DO,MAAME,UAAwBC,EAAA,CAAuC,CAArE,kCACL,KAAQ,MAAwC,CAAC,EAEjD,MAAa,KAAKtB,EAAa,CAC7B,MAAMuB,EAAY,KAAK,MAAMvB,CAAG,EAChC,GAAIuB,EAAW,CACb,KAAK,SAAS,CAAE,UAAWA,CAAU,CAAC,EACtC,MACF,CAEA,KAAK,SAAS,CAAE,UAAW,EAAK,CAAC,EAEjC,GAAI,CACF,MAAMC,EAAM,MAAM,mBAAiC,KAAM,GAAIxB,CAAG,EAEhE,GAAIwB,EAAI,UACN,KAAK,cAAcA,CAAG,MAEtB,OAAM,IAAI,MAAM,qBAAqB,CAEzC,OAASC,EAAP,CACA,KAAK,SAAS,CAAE,UAAW,GAAO,UAAW,OAAOA,CAAG,CAAE,CAAC,CAC5D,CACF,CAEQ,cAAcD,EAAmB,CAEvC,MAAME,EAAW,IAAI,IAAeF,EAAI,UAAWA,EAAI,KAAM,CAC3D,qBAAsB,EACxB,CAAC,EAEKG,EAAYC,EAAuCF,CAAQ,KAIjE,MAAkB,EAAE,SAASC,CAAS,EAEtC,KAAK,MAAMH,EAAI,UAAU,GAAG,EAAIG,EAChC,KAAK,SAAS,CAAE,UAAAA,EAAW,UAAW,EAAM,CAAC,CAC/C,CAEO,YAAa,CAClB,KAAK,SAAS,CAAE,UAAW,OAAW,UAAW,OAAW,UAAW,EAAM,CAAC,CAChF,CACF,CAEO,SAASE,EAA4BC,EAA8D,CAExG,MAAMC,EAA8C,CAAC,EAGrD,IAAIC,EAAgC,KAEhCC,EAAoC,CAAC,EAEzC,UAAWC,KAASJ,EAClB,GAAII,EAAM,OAAS,MACZF,EAiBCA,EAAW,KAAOE,EAAM,KAE1BH,EAAO,KACL,IAAI,KAAa,CACf,MAAOC,EAAY,MACnB,EAAGA,EAAW,QAAQ,EACtB,SAAUC,CACZ,CAAC,CACH,EAEAD,EAAaE,EACbD,EAAmB,CAAC,GA3BlB,QAAQC,EAAM,SAAS,EAEzBH,EAAO,KACL,IAAI,KAAa,CACf,MAAOG,EAAM,MACb,YAAa,GACb,EAAGA,EAAM,QAAQ,EACjB,SAAUA,EAAM,OAASA,EAAM,OAAO,IAAIC,CAA4B,EAAI,CAAC,CAC7E,CAAC,CACH,EAGAH,EAAaE,MAkBZ,CACL,MAAME,EAAcD,EAA6BD,CAAK,EAGlDF,EACFC,EAAiB,KAAKG,CAAW,EAEjCL,EAAO,KAAKK,CAAW,CAE3B,CAIF,OAAIJ,GACFD,EAAO,KACL,IAAI,KAAa,CACf,MAAOC,EAAY,MACnB,EAAGA,EAAW,QAAQ,EACtB,SAAUC,CACZ,CAAC,CACH,EAGKF,CACT,CAEO,SAASH,EAAuCF,EAA0B,CAC/E,IAAIW,EAEJ,GAAIX,EAAS,YAAY,MAAM,OAAQ,CACrC,MAAMY,EAAkBZ,EAAS,WAAW,KACzC,IAAKa,GAAM,CACV,GAAI,CACF,OAAOC,EAAqCD,CAAC,CAC/C,OAASd,EAAP,CACA,eAAQ,MAAMA,CAAG,EACV,IACT,CACF,CAAC,EAGA,OAAQc,GAA0B,QAAQA,CAAC,CAAC,EAE/CF,EAAY,IAAI,KAAiB,CAC/B,UAAWC,CACb,CAAC,CACH,CAEA,OAAO,IAAI1C,EAAA,EAAe,CACxB,MAAO8B,EAAS,MAChB,IAAKA,EAAS,IACd,KAAM,IAAI,KAAgB,CACxB,SAAUG,EAA4BH,EAAS,MAAM,CACvD,CAAC,EACD,WAAY,IAAI,KAAeA,EAAS,IAAI,EAC5C,QAAS,CACP,IAAI,KAAgB,CAAC,CAAC,EACtB,IAAI,KAAmB,CACrB,QAASA,EAAS,QAClB,UAAWA,EAAS,WAAW,iBACjC,CAAC,CACH,EACA,WAAYW,EACZ,GAAIA,GAAa,CACf,SAAU,CAAC,IAAI,KAAuB,CAAC,CAAC,CAAC,CAC3C,CACF,CAAC,CACH,CAEO,SAASG,EAAqCC,EAAwC,CAC3F,MAAMC,EAAmB,CACvB,KAAMD,EAAS,KACf,MAAOA,EAAS,KAClB,EACA,GAAIE,EAAiBF,CAAQ,EAC3B,OAAO,IAAI,KAAe,CACxB,GAAGC,EACH,MAAOD,EAAS,QAAQ,MACxB,KAAMA,EAAS,QAAQ,KACvB,YAAaA,EAAS,YACtB,MAAOA,EAAS,MAChB,QAASA,EAAS,MAClB,SAAUA,EAAS,UAAY,OAC/B,WAAYA,EAAS,WACrB,aAAc,QAAQA,EAAS,UAAU,EACzC,YAAaA,EAAS,YACtB,KAAMA,EAAS,IACjB,CAAC,EACI,GAAIG,EAAgBH,CAAQ,EACjC,OAAO,IAAI,KAAc,CACvB,GAAGC,EACH,MAAOD,EAAS,QAAQ,MACxB,KAAMA,EAAS,QAAQ,KACvB,YAAaA,EAAS,YACtB,MAAOA,EAAS,MAChB,WAAYA,EAAS,WACrB,KAAMA,EAAS,KACf,QAASA,EAAS,QAClB,MAAOA,EAAS,MAChB,SAAUA,EAAS,UAAY,OAC/B,WAAYA,EAAS,WACrB,aAAc,QAAQA,EAAS,UAAU,EACzC,QAASA,EAAS,MAClB,YAAaA,EAAS,YACtB,KAAMA,EAAS,IACjB,CAAC,EACI,GAAII,EAAqBJ,CAAQ,EACtC,OAAO,IAAI,KAAmB,CAC5B,GAAGC,EACH,MAAOD,EAAS,QAAQ,MACxB,KAAMA,EAAS,QAAQ,KACvB,YAAaA,EAAS,YACtB,MAAOA,EAAS,MAChB,SAAUA,EAAS,MACnB,SAAUA,EAAS,UAAY,OAC/B,WAAYA,EAAS,WACrB,aAAc,QAAQA,EAAS,UAAU,EACzC,YAAaA,EAAS,YACtB,QAASA,EAAS,MAClB,KAAMA,EAAS,IACjB,CAAC,EACI,GAAIK,EAAmBL,CAAQ,EACpC,OAAO,IAAI,KAAiB,CAC1B,GAAGC,EACH,YAAaD,EAAS,YACtB,MAAOA,EAAS,MAChB,YAAaA,EAAS,YACtB,KAAMA,EAAS,IACjB,CAAC,EAED,MAAM,IAAI,MAAM,qCAAqCA,EAAS,MAAM,CAExE,CAEO,SAASN,EAA6BD,EAAmB,CAC9D,OAAO,IAAI,KAAc,CACvB,EAAGA,EAAM,QAAQ,EACjB,EAAGA,EAAM,QAAQ,EACjB,MAAOA,EAAM,QAAQ,EACrB,OAAQA,EAAM,QAAQ,EACtB,YAAa,GACb,YAAa,GACb,KAAM,IAAI,IAAS,CACjB,IAAKzB,EAAyByB,EAAM,EAAE,EACtC,MAAOA,EAAM,MACb,SAAUA,EAAM,KAChB,QAASA,EAAM,SAAW,CAAC,EAC3B,YAAaA,EAAM,YACnB,cAAeA,EAAM,cACrB,YAAaA,EAAM,YAAc,cAAgB,OAEjD,YAAa,CAACA,EAAM,OAAS,CAACA,EAAM,UAAY,CAACA,EAAM,UACvD,MAAOa,EAAwBb,CAAK,CACtC,CAAC,CACH,CAAC,CACH,CAEO,SAASa,EAAwBb,EAAkD,CACxF,GAAI,CAACA,EAAM,SAAS,OAClB,OAGF,IAAIc,EAEJ,OAAId,EAAM,YAAY,MAAQ,IAC5Bc,EAAe,IAAIlC,EAAuB,CAAE,MAAOoB,EAAM,QAAQ,CAAC,CAAE,CAAC,EAErEc,EAAe,IAAI,KAAiB,CAClC,QAASd,EAAM,QACf,cAAeA,EAAM,eAAiB,MACxC,CAAC,EAICA,EAAM,iBAAiB,SACzBc,EAAe,IAAI,KAAqB,CACtC,MAAOA,EACP,gBAAiBd,EAAM,eACzB,CAAC,GAGIc,CACT,CAEA,IAAIC,EAAiC,KAE9B,SAASC,GAAsC,CACpD,OAAKD,IACHA,EAAS,IAAI5B,EAAgB,CAAC,CAAC,GAG1B4B,CACT,CAEA,MAAMN,EAAoBJ,GAA+CA,EAAE,OAAS,SAC9EK,EAAmBL,GAA8CA,EAAE,OAAS,QAC5EM,EAAwBN,GAAmDA,EAAE,OAAS,aACtFO,EAAsBP,GAAiDA,EAAE,OAAS,WC5T3EY,EAAqB,CAAC,CAAE,MAAA5D,CAAM,IAAa,CACtD,MAAM0D,EAASC,EAAmB,EAC5B,CAAE,UAAAvB,EAAW,UAAAyB,CAAU,EAAIH,EAAO,SAAS,EASjD,SAPA,aAAU,KACRA,EAAO,KAAK1D,EAAM,OAAO,GAAG,EACrB,IAAM,CACX0D,EAAO,WAAW,CACpB,GACC,CAACA,EAAQ1D,EAAM,OAAO,GAAG,CAAC,EAExBoC,EASE,gBAACA,EAAU,UAAV,CAAoB,MAAOA,CAAA,CAAW,EAP1C,gBAAC0B,EAAA,EAAI,CAAC,OAAQ,WAAqB,EAChCD,GAAa,gBAACE,EAAA,EAAU,IAAC,EACzB,CAACF,GAAa,gBAAC,UAAG,qBAAmB,CACxC,CAKN,EAEA,EAAeD,C,gFChCR,SAASI,EACdC,EACAC,EACA,CACA,OAAO,IAAI,KAAiB,CAC1B,QAAS,CACP,CACE,MAAO,IACP,WAAY,CACV,IAAK,gBACL,KAAM,UACR,EACA,WAAY,cACZ,GAAGD,CACL,CACF,EACA,GAAGC,CACL,CAAC,CACH,CCNO,SAASC,GAAgD,CAC9D,MAAMC,EAAkB,IAAI,KACtBC,EAAgB,IAAI,KAAe,CACvC,KAAM,SACN,GAAI,KACN,CAAC,EAED,OAAO,IAAIhE,EAAA,EAAe,CACxB,MAAO,uDACP,KAAM,IAAI,KAAgB,CACxB,SAAU,CACR,IAAI,KAAa,CACf,WAAYgE,EACZ,MAAOL,EAAkC,CAAE,WAAY,oBAAkC,CAAC,EAC1F,MAAO,kDACP,IAAK,QACL,YAAa,GACb,EAAG,EACH,SAAU,CACR,IAAI,KAAc,CAChB,EAAG,EACH,EAAG,EACH,MAAO,GACP,OAAQ,EACR,YAAa,GACb,YAAa,GACb,KAAM,IAAI,IAAS,CACjB,SAAU,aACV,MAAO,eACP,IAAK,cACP,CAAC,CACH,CAAC,EACD,IAAI,KAAc,CAChB,EAAG,EACH,EAAG,EACH,MAAO,EACP,OAAQ,EACR,YAAa,GACb,YAAa,GACb,KAAM,IAAI,IAAS,CACjB,SAAU,aACV,MAAO,eACP,IAAK,cACP,CAAC,CACH,CAAC,CACH,CACF,CAAC,EACD,IAAI,KAAc,CAChB,EAAG,EACH,EAAG,GACH,MAAO,EACP,OAAQ,GACR,YAAa,GACb,YAAa,GACb,KAAM,IAAI,IAAS,CACjB,MAAOA,EAAkC,EACzC,SAAU,aACV,MAAO,8BACP,IAAK,oBACP,CAAC,CACH,CAAC,CACH,CACF,CAAC,EACD,WAAYI,EACZ,MAAOJ,EAAkC,EACzC,QAAS,CAAC,IAAI,KAAgB,CAAC,CAAC,EAAG,IAAI,KAAmB,CAAC,CAAC,CAAC,CAC/D,CAAC,CACH,CCnEO,SAASM,GAA4C,CAC1D,OAAO,IAAIjE,EAAA,EAAe,CACxB,MAAO,6BACP,KAAM,IAAI,KAAgB,CACxB,SAAU,CACR,IAAI,KAAc,CAChB,KAAM,IAAI,KAAgB,CACxB,SAAU,CACR,IAAI,KAAc,CAChB,EAAG,EACH,EAAG,EACH,MAAO,GACP,OAAQ,GACR,YAAa,GACb,YAAa,GACb,KAAM,IAAI,IAAS,CACjB,SAAU,aACV,MAAO,yBACT,CAAC,CACH,CAAC,EACD,IAAI,KAAc,CAChB,EAAG,GACH,EAAG,EACH,MAAO,GACP,OAAQ,GACR,YAAa,GACb,YAAa,GACb,KAAM,IAAI,IAAS,CACjB,SAAU,aACV,MAAO,gBACT,CAAC,CACH,CAAC,EACD,IAAI,KAAc,CAChB,EAAG,EACH,EAAG,GACH,MAAO,GACP,OAAQ,GACR,YAAa,GACb,YAAa,GACb,KAAM,IAAI,KAAgB,CACxB,UAAW,SACX,SAAU,CACR,IAAI,KAAc,CAChB,QAAS,OACT,KAAM,IAAI,IAAS,CACjB,SAAU,aACV,MAAO,aACT,CAAC,CACH,CAAC,EACD,IAAI,KAAc,CAChB,QAAS,OACT,KAAM,IAAI,IAAS,CACjB,SAAU,aACV,MAAO,aACT,CAAC,CACH,CAAC,CACH,CACF,CAAC,CACH,CAAC,CACH,CACF,CAAC,CACH,CAAC,EACD,IAAI,KAAc,CAChB,KAAM,IAAI,KAAgB,CACxB,SAAU,CACR,IAAI,KAAc,CAChB,EAAG,EACH,EAAG,EACH,MAAO,GACP,OAAQ,GACR,YAAa,GACb,YAAa,GACb,KAAM,IAAI,IAAS,CACjB,SAAU,aACV,MAAO,yBACT,CAAC,CACH,CAAC,EACD,IAAI,KAAc,CAChB,EAAG,GACH,EAAG,EACH,MAAO,GACP,OAAQ,GACR,YAAa,GACb,YAAa,GACb,KAAM,IAAI,IAAS,CACjB,SAAU,aACV,MAAO,gBACT,CAAC,CACH,CAAC,EACD,IAAI,KAAc,CAChB,EAAG,EACH,EAAG,GACH,MAAO,GACP,OAAQ,GACR,YAAa,GACb,YAAa,GACb,KAAM,IAAI,KAAgB,CACxB,UAAW,SACX,SAAU,CACR,IAAI,KAAc,CAChB,QAAS,OACT,KAAM,IAAI,IAAS,CACjB,SAAU,aACV,MAAO,aACT,CAAC,CACH,CAAC,EACD,IAAI,KAAc,CAChB,QAAS,OACT,KAAM,IAAI,IAAS,CACjB,SAAU,aACV,MAAO,aACT,CAAC,CACH,CAAC,CACH,CACF,CAAC,CACH,CAAC,CACH,CACF,CAAC,CACH,CAAC,CACH,CACF,CAAC,EACD,WAAY,IAAI,KAChB,MAAO2D,EAAkC,EACzC,QAAS,CAAC,IAAI,KAAgB,CAAC,CAAC,EAAG,IAAI,KAAmB,CAAC,CAAC,CAAC,CAC/D,CAAC,CACH,CC7HO,SAASO,GAA0C,CACxD,OAAO,IAAIlE,EAAA,EAAe,CACxB,MAAO,uCACP,KAAM,IAAI,KAAgB,CACxB,SAAU,CACR,IAAI,KAAa,CACf,WAAY,IAAI,KAChB,MAAO2D,EAAkC,CAAE,WAAY,oBAAkC,CAAC,EAC1F,MAAO,4BACP,IAAK,QACL,YAAa,GACb,EAAG,EACH,SAAU,CACR,IAAI,KAAc,CAChB,EAAG,EACH,EAAG,EACH,MAAO,GACP,OAAQ,EACR,YAAa,GACb,YAAa,GACb,KAAM,IAAI,IAAS,CACjB,SAAU,aACV,MAAO,eACP,IAAK,cACP,CAAC,CACH,CAAC,EACD,IAAI,KAAc,CAChB,EAAG,EACH,EAAG,EACH,MAAO,EACP,OAAQ,EACR,YAAa,GACb,YAAa,GACb,KAAM,IAAI,IAAS,CACjB,SAAU,aACV,MAAO,eACP,IAAK,cACP,CAAC,CACH,CAAC,CACH,CACF,CAAC,EACD,IAAI,KAAa,CACf,MAAO,4BACP,IAAK,QACL,YAAa,GACb,EAAG,EACH,SAAU,CACR,IAAI,KAAc,CAChB,EAAG,EACH,EAAG,EACH,MAAO,GACP,OAAQ,EACR,YAAa,GACb,YAAa,GACb,KAAM,IAAI,IAAS,CACjB,SAAU,aACV,MAAO,eACP,IAAK,cACP,CAAC,CACH,CAAC,EACD,IAAI,KAAc,CAChB,EAAG,EACH,EAAG,EACH,MAAO,EACP,OAAQ,EACR,YAAa,GACb,YAAa,GACb,KAAM,IAAI,IAAS,CACjB,MAAOA,EAAkC,CAAE,YAAa,EAAG,CAAC,EAC5D,SAAU,aACV,MAAO,yBACP,IAAK,cACP,CAAC,CACH,CAAC,CACH,CACF,CAAC,EACD,IAAI,KAAc,CAChB,EAAG,EACH,EAAG,GACH,MAAO,EACP,OAAQ,GACR,YAAa,GACb,YAAa,GACb,KAAM,IAAI,IAAS,CACjB,MAAOA,EAAkC,CAAE,YAAa,EAAG,CAAC,EAC5D,SAAU,aACV,MAAO,8BACP,IAAK,oBACP,CAAC,CACH,CAAC,EACD,IAAI,KAAc,CAChB,EAAG,EACH,EAAG,GACH,MAAO,GACP,OAAQ,GACR,YAAa,GACb,YAAa,GACb,KAAM,IAAI,IAAS,CACjB,SAAU,aACV,MAAO,8BACP,IAAK,uBACP,CAAC,CACH,CAAC,CACH,CACF,CAAC,EACD,WAAY,IAAI,KAChB,MAAOA,EAAkC,EACzC,QAAS,CAAC,IAAI,KAAgB,CAAC,CAAC,EAAG,IAAI,KAAmB,CAAC,CAAC,CAAC,CAC/D,CAAC,CACH,C,eC3GO,SAASQ,GAAuC,CACrD,OAAO,IAAInE,EAAA,EAAe,CACxB,MAAO,iBACP,WAAY,IAAI,KAAiB,CAC/B,UAAW,CACT,IAAI,KAAe,CACjB,KAAM,SACN,MAAO,gCACT,CAAC,EACD,IAAI,KAAmB,CACrB,KAAM,aACN,SAAU,YACZ,CAAC,EACD,IAAI,KAAc,CAChB,KAAM,uCACN,QAAS,wBACT,MAAO,CAAE,MAAO,iDAAkD,EAClE,WAAY,CAAE,IAAK,eAAgB,CACrC,CAAC,EACD,IAAI,KAAc,CAChB,KAAM,uCACN,QAAS,wBACT,MAAO,CAAE,MAAO,iDAAkD,EAClE,WAAY,CAAE,IAAK,kBAAmB,KAAM,YAAa,CAC3D,CAAC,EACD,IAAI,KAAc,CAChB,KAAM,oBACN,QAAS,wBACT,MAAO,CAAE,UAAW,UAAW,OAAQ,kBAAmB,EAC1D,WAAY,CAAE,IAAK,gBAAiB,KAAM,UAAW,CACvD,CAAC,CACH,CACF,CAAC,EACD,KAAM,IAAI,KAAgB,CACxB,UAAW,MACX,SAAU,CACR,IAAI,KAAc,CAChB,MAAO,MACP,KAAM,IAAI,KAAgB,CACxB,KAAM,oBACN,SAAU,GACV,MAAO,QACT,CAAC,CACH,CAAC,CACH,CACF,CAAC,EACD,WAAY,IAAI,KAChB,QAAS,CAAC,IAAI,KAAgB,CAAC,CAAC,EAAG,IAAI,KAAmB,CAAC,CAAC,CAAC,EAC7D,SAAU,CAAC,IAAI,KAAuB,CAAC,CAAC,CAAC,CAC3C,CAAC,CACH,CCrDO,SAASoE,GAAmC,CACjD,OAAO,IAAIpE,EAAA,EAAe,CACxB,MAAO,kBACP,KAAM,IAAI,KAAgB,CACxB,UAAW,SACX,SAAU,CACR,IAAI,KAAY,CACd,MAAO,WACP,YAAa,GACb,KAAM,IAAI,KAAgB,CACxB,UAAW,MACX,SAAU,CACR,IAAI,KAAc,CAChB,KAAM,IAAI,IAAS,CACjB,SAAU,aACV,MAAO,aACT,CAAC,CACH,CAAC,EAED,IAAI,KAAc,CAChB,KAAM,IAAI,IAAS,CACjB,SAAU,aACV,MAAO,aACT,CAAC,CACH,CAAC,CACH,CACF,CAAC,CACH,CAAC,EACD,IAAI,KAAY,CACd,MAAO,sBACP,YAAa,GACb,KAAM,IAAI,KAAgB,CACxB,UAAW,MACX,SAAU,CACR,IAAI,KAAc,CAChB,KAAM,IAAI,IAAS,CACjB,SAAU,aACV,MAAO,aACT,CAAC,CACH,CAAC,EACD,IAAI,KAAc,CAChB,KAAM,IAAI,IAAS,CACjB,SAAU,aACV,MAAO,aACT,CAAC,CACH,CAAC,CACH,CACF,CAAC,CACH,CAAC,CACH,CACF,CAAC,EACD,WAAY,IAAI,KAChB,MAAO2D,EAAkC,EACzC,QAAS,CAAC,IAAI,KAAgB,CAAC,CAAC,EAAG,IAAI,KAAmB,CAAC,CAAC,CAAC,CAC/D,CAAC,CACH,CCvDO,SAASU,GAAyC,CACvD,OAAO,IAAIrE,EAAA,EAAe,CACxB,MAAO,uBACP,KAAM,IAAI,KAAgB,CACxB,UAAW,MACX,SAAU,CACR,IAAI,KAAc,CAChB,KAAM,IAAI,KAAgB,CACxB,UAAW,SACX,SAAU,CACR,IAAI,KAAc,CAChB,KAAM,IAAI,KAAgB,CACxB,UAAW,MACX,SAAU,CACR,IAAI,KAAc,CAChB,KAAM,IAAI,IAAS,CACjB,SAAU,aACV,MAAO,2BACT,CAAC,CACH,CAAC,EACD,IAAI,KAAc,CAChB,KAAM,IAAI,IAAS,CACjB,SAAU,OACV,MAAO,mBACP,MAAO,IAAI,KAAqB,CAC9B,gBAAiB,CACf,CACE,GAAI,SACJ,QAAS,CACP,SAAU,CAAC,OAAQ,MAAM,CAC3B,CACF,CACF,CACF,CAAC,CACH,CAAC,CACH,CAAC,CACH,CACF,CAAC,CACH,CAAC,EACD,IAAI,KAAc,CAChB,KAAM,IAAI,IAAS,CACjB,MAAO,IAAI,KAAqB,CAC9B,MAAO2D,EAAkC,EACzC,gBAAiB,CACf,CACE,GAAI,SACJ,QAAS,CACP,SAAU,CAAC,MAAM,CACnB,CACF,CACF,CACF,CAAC,EAED,SAAU,OACV,MAAO,uCACT,CAAC,CACH,CAAC,CACH,CACF,CAAC,CACH,CAAC,CACH,CACF,CAAC,EACD,WAAY,IAAI,KAChB,MAAOA,EAAkC,EACzC,QAAS,CAAC,IAAI,KAAgB,CAAC,CAAC,EAAG,IAAI,KAAmB,CAAC,CAAC,CAAC,CAC/D,CAAC,CACH,CC3DO,SAASW,GAAmC,CACjD,OAAO,IAAItE,EAAA,EAAe,CACxB,MAAO,YACP,WAAY,IAAI,KAAiB,CAC/B,UAAW,CACT,IAAI,KAAa,CACf,KAAM,SACN,MAAO,MACP,MAAO,SACP,KAAM,GACN,QAAS,IACT,QAAS,CAAC,CACZ,CAAC,EACD,IAAI,KAAa,CACf,KAAM,MACN,MAAO,cACP,MAAO,MACP,QAAS,IACT,QAAS,GACT,KAAM,GACN,QAAS,CAAC,CACZ,CAAC,EACD,IAAI,KAAa,CACf,KAAM,UACN,MAAO,mBACP,MAAO,UACP,QAAS,IAET,KAAM,GACN,QAAS,CAAC,CACZ,CAAC,EACD,IAAI,KAAe,CACjB,KAAM,SACN,MAAO,eACT,CAAC,EACD,IAAI,KAAmB,CACrB,KAAM,KACN,SAAU,UACZ,CAAC,EACD,IAAI,KAAgB,CAClB,KAAM,UACN,MAAO,eACT,CAAC,CACH,CACF,CAAC,EACD,KAAM,IAAI,KAAgB,CACxB,UAAW,MACX,SAAU,CACR,IAAI,KAAc,CAChB,KAAM,IAAI,KAAgB,CACxB,UAAW,SACX,SAAU,CACR,IAAI,KAAc,CAChB,KAAM,IAAI,KAAgB,CACxB,SAAU,CACR,IAAI,KAAc,CAChB,KAAM,IAAI,IAAS,CACjB,SAAU,aACV,MAAO,oBACP,MAAO2D,EAAkC,CACvC,MAAO,mBACT,CAAC,CACH,CAAC,CACH,CAAC,EACD,IAAI,KAAc,CAChB,KAAM,IAAI,KAAgB,CACxB,KAAM,mBACN,SAAU,GACV,MAAO,QACT,CAAC,CACH,CAAC,EACD,IAAI,KAAc,CAChB,MAAO,MACP,KAAM,IAAI,KAAgB,CACxB,KAAM,+BACN,SAAU,GACV,MAAO,QACT,CAAC,CACH,CAAC,CACH,CACF,CAAC,CACH,CAAC,EACD,IAAI,KAAc,CAChB,KAAM,IAAI,KAAY,CACpB,MAAO,0BACP,YAAa,GACb,KAAM,IAAI,KAAgB,CACxB,UAAW,MACX,SAAU,CACR,IAAI,KAAc,CAChB,KAAM,IAAI,IAAS,CACjB,SAAU,aACV,MAAO,oBACP,MAAOA,EAAkC,CACvC,MAAO,mBACT,CAAC,CACH,CAAC,CACH,CAAC,CACH,CACF,CAAC,CACH,CAAC,CACH,CAAC,CACH,CACF,CAAC,CACH,CAAC,CACH,CACF,CAAC,EACD,WAAY,IAAI,KAChB,QAAS,CAAC,IAAI,KAAgB,CAAC,CAAC,EAAG,IAAI,KAAmB,CAAC,CAAC,CAAC,EAC7D,SAAU,CAAC,IAAI,KAAuB,CAAC,CAAC,CAAC,CAC3C,CAAC,CACH,CAEO,SAASY,GAA0C,CACxD,OAAO,IAAIvE,EAAA,EAAe,CACxB,MAAO,4BACP,WAAY,IAAI,KAAiB,CAC/B,UAAW,CACT,IAAI,KAAa,CACf,KAAM,SACN,MAAO,MACP,MAAO,KACP,KAAM,KACN,WAAY,GACZ,aAAc,GACd,QAAS,IACT,QAAS,CAAC,CACZ,CAAC,EACD,IAAI,KAAa,CACf,KAAM,MACN,MAAO,cACP,MAAO,CAAC,EACR,QAAS,IACT,QAAS,GACT,WAAY,GACZ,aAAc,GACd,KAAM,GACN,QAAS,CAAC,CACZ,CAAC,EACD,IAAI,KAAa,CACf,KAAM,UACN,MAAO,mBACP,MAAO,CAAC,EACR,QAAS,IACT,WAAY,GACZ,aAAc,GACd,QAAS,GACT,KAAM,GACN,QAAS,CAAC,CACZ,CAAC,CACH,CACF,CAAC,EACD,KAAM,IAAI,KAAgB,CACxB,UAAW,MACX,SAAU,CACR,IAAI,KAAc,CAChB,KAAM,IAAI,IAAS,CACjB,SAAU,aACV,MAAO,oBACP,MAAO2D,EAAkC,CACvC,MAAO,mBACT,CAAC,CACH,CAAC,CACH,CAAC,EACD,IAAI,KAAc,CAChB,MAAO,MACP,KAAM,IAAI,KAAgB,CACxB,KAAM,+BACN,SAAU,GACV,MAAO,QACT,CAAC,CACH,CAAC,CACH,CACF,CAAC,EACD,WAAY,IAAI,KAChB,QAAS,CAAC,IAAI,KAAgB,CAAC,CAAC,EAAG,IAAI,KAAmB,CAAC,CAAC,CAAC,EAC7D,SAAU,CAAC,IAAI,KAAuB,CAAC,CAAC,CAAC,CAC3C,CAAC,CACH,CCzLO,SAASa,GAAwB,CACtC,MAAO,CACL,CAAE,MAAO,kBAAmB,SAAUJ,CAAiB,EACvD,CAAE,MAAO,uCAAwC,SAAUF,CAAwB,EACnF,CAAE,MAAO,uDAAwD,SAAUJ,CAA8B,EACzG,CAAE,MAAO,6BAA8B,SAAUG,CAA0B,EAC3E,CAAE,MAAO,YAAa,SAAUK,CAAiB,EACjD,CAAE,MAAO,4BAA6B,SAAUC,CAAwB,EACxE,CAAE,MAAO,iBAAkB,SAAUJ,CAAqB,EAC1D,CAAE,MAAO,uBAAwB,SAAUE,CAAuB,CACpE,CACF,CAEA,MAAMI,EAAwC,CAAC,EAExC,SAASC,EAAgB3F,EAAe,CAC7C,GAAI0F,EAAM1F,CAAK,EACb,OAAO0F,EAAM1F,CAAK,EAGpB,MAAMjD,EAAQ0I,EAAU,EAAE,KAAM,GAAM,EAAE,QAAUzF,CAAK,EAEvD,OAAIjD,IACF2I,EAAM1F,CAAK,EAAIjD,EAAM,SAAS,GAGzB2I,EAAM1F,CAAK,CACpB,C,oCC7BO,MAAM4F,EAAwB,OAAO,OAAO,CAAC,EAAG,CAAC,CAAC,EAElD,IAAKC,GAAAA,IACVA,EAAA,YAAc,cACdA,EAAA,MAAQ,QACRA,EAAA,WAAa,cACbA,EAAA,QAAU,WACVA,EAAA,gBAAkB,oBAClBA,EAAA,uBAAyB,2BACzBA,EAAA,6BAA+B,kCAC/BA,EAAA,WAAa,cACbA,EAAA,WAAa,cACbA,EAAA,wBAA0B,6BAC1BA,EAAA,KAAO,OACPA,EAAA,KAAO,OACPA,EAAA,YAAc,eACdA,EAAA,aAAe,iBACfA,EAAA,UAAY,aACZA,EAAA,mBAAqB,uBACrBA,EAAA,iBAAmB,oBACnBA,EAAA,WAAa,cACbA,EAAA,gBAAkB,oBAClBA,EAAA,oBAAsB,yBACtBA,EAAA,SAAW,YACXA,EAAA,eAAiB,mBACjBA,EAAA,WAAa,aACbA,EAAA,UAAY,aACZA,EAAA,gBAAkB,mBAClBA,EAAA,YAAc,eACdA,EAAA,MAAQ,QACRA,EAAA,IAAM,MACNA,EAAA,eAAiB,kBA7BPA,IAAAA,GAAA,IAwEL,MAAMC,EAAqC,CAChD,OAAQ,CAAC,EACT,OAAQ,CAAC,CACX,EA2CaC,EAAqC,CAChD,QAAS,CAAC,EACV,OAAQ,CAAC,EACT,WAAY,aACd,C","sources":["webpack://grafana/./public/app/features/scenes/SceneListPage.tsx","webpack://grafana/./public/app/features/scenes/ScenePage.tsx","webpack://grafana/./public/app/features/scenes/apps/SceneRadioToggle.tsx","webpack://grafana/./public/app/features/scenes/apps/SceneSearchBox.tsx","webpack://grafana/./public/app/features/scenes/apps/transforms.ts","webpack://grafana/./public/app/features/scenes/apps/utils.ts","webpack://grafana/./public/app/features/scenes/apps/scenes.ts","webpack://grafana/./public/app/features/scenes/apps/GrafanaMonitoringApp.tsx","webpack://grafana/./public/app/features/scenes/dashboard/DashboardScene.tsx","webpack://grafana/./public/app/features/scenes/dashboard/utils.ts","webpack://grafana/./public/app/features/scenes/dashboard/ShareQueryDataProvider.ts","webpack://grafana/./public/app/features/scenes/dashboard/DashboardsLoader.ts","webpack://grafana/./public/app/features/scenes/dashboard/DashboardScenePage.tsx","webpack://grafana/./public/app/features/scenes/scenes/queries.ts","webpack://grafana/./public/app/features/scenes/scenes/gridMultiTimeRange.tsx","webpack://grafana/./public/app/features/scenes/scenes/gridMultiple.tsx","webpack://grafana/./public/app/features/scenes/scenes/gridWithMultipleData.tsx","webpack://grafana/./public/app/features/scenes/scenes/queryVariableDemo.tsx","webpack://grafana/./public/app/features/scenes/scenes/sceneWithRows.tsx","webpack://grafana/./public/app/features/scenes/scenes/transformations.tsx","webpack://grafana/./public/app/features/scenes/scenes/variablesDemo.tsx","webpack://grafana/./public/app/features/scenes/scenes/index.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/dataquery.gen.ts"],"sourcesContent":["// Libraries\nimport React from 'react';\nimport { useAsync } from 'react-use';\n\nimport { Stack } from '@grafana/experimental';\nimport { Card } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\n\n// Types\nimport { getGrafanaSearcher } from '../search/service';\n\nimport { getScenes } from './scenes';\n\nexport interface Props {}\n\nexport const SceneListPage = ({}: Props) => {\n  const scenes = getScenes();\n  const results = useAsync(() => {\n    return getGrafanaSearcher().starred({ starred: true });\n  }, []);\n\n  return (\n    <Page navId=\"scenes\" subTitle=\"Experimental new runtime and state model for dashboards\">\n      <Page.Contents>\n        <Stack direction=\"column\" gap={1}>\n          <h5>Apps</h5>\n          <Stack direction=\"column\" gap={0}>\n            <Card href={`/scenes/grafana-monitoring`}>\n              <Card.Heading>Grafana monitoring</Card.Heading>\n            </Card>\n          </Stack>\n          <h5>Test scenes</h5>\n          <Stack direction=\"column\" gap={0}>\n            {scenes.map((scene) => (\n              <Card key={scene.title} href={`/scenes/${scene.title}`}>\n                <Card.Heading>{scene.title}</Card.Heading>\n              </Card>\n            ))}\n          </Stack>\n          {results.value && (\n            <>\n              <h5>Starred dashboards</h5>\n              <Stack direction=\"column\" gap={0}>\n                {results.value!.view.map((dash) => (\n                  <Card href={`/scenes/dashboard/${dash.uid}`} key={dash.uid}>\n                    <Card.Heading>{dash.name}</Card.Heading>\n                  </Card>\n                ))}\n              </Stack>\n            </>\n          )}\n        </Stack>\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default SceneListPage;\n","// Libraries\nimport React, { useEffect, useState } from 'react';\n\nimport { getUrlSyncManager } from '@grafana/scenes';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\n\nimport { getSceneByTitle } from './scenes';\n\nexport interface Props extends GrafanaRouteComponentProps<{ name: string }> {}\n\nexport const ScenePage = (props: Props) => {\n  const scene = getSceneByTitle(props.match.params.name);\n  const [isInitialized, setInitialized] = useState(false);\n\n  useEffect(() => {\n    if (scene && !isInitialized) {\n      getUrlSyncManager().initSync(scene);\n      setInitialized(true);\n    }\n  }, [isInitialized, scene]);\n\n  if (!scene) {\n    return <h2>Scene not found</h2>;\n  }\n\n  if (!isInitialized) {\n    return null;\n  }\n\n  return <scene.Component model={scene} />;\n};\n\nexport default ScenePage;\n","import React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { SceneComponentProps, SceneObjectBase, SceneObjectState } from '@grafana/scenes';\nimport { RadioButtonGroup } from '@grafana/ui';\n\nexport interface SceneRadioToggleState extends SceneObjectState {\n  options: Array<SelectableValue<string>>;\n  value: string;\n  onChange: (value: string) => void;\n}\n\nexport class SceneRadioToggle extends SceneObjectBase<SceneRadioToggleState> {\n  public onChange = (value: string) => {\n    this.setState({ value });\n    this.state.onChange(value);\n  };\n\n  public static Component = ({ model }: SceneComponentProps<SceneRadioToggle>) => {\n    const { options, value } = model.useState();\n\n    return <RadioButtonGroup options={options} value={value} onChange={model.onChange} />;\n  };\n}\n","import React from 'react';\n\nimport { SceneComponentProps, SceneObjectState, SceneObjectBase } from '@grafana/scenes';\nimport { Input } from '@grafana/ui';\n\nexport interface SceneSearchBoxState extends SceneObjectState {\n  value: string;\n}\n\nexport class SceneSearchBox extends SceneObjectBase<SceneSearchBoxState> {\n  public onChange = (evt: React.FormEvent<HTMLInputElement>) => {\n    this.setState({ value: evt.currentTarget.value });\n  };\n\n  public static Component = ({ model }: SceneComponentProps<SceneSearchBox>) => {\n    const { value } = model.useState();\n\n    return <Input width={25} placeholder=\"Search...\" value={value} onChange={model.onChange} />;\n  };\n}\n","import { map } from 'rxjs';\n\nimport {\n  BasicValueMatcherOptions,\n  CustomTransformOperator,\n  DataTransformerID,\n  getFrameDisplayName,\n  ValueMatcherID,\n} from '@grafana/data';\nimport { FilterByValueMatch, FilterByValueType } from '@grafana/data/src/transformations/transformers/filterByValue';\nimport { DataTransformerConfig, MatcherConfig } from '@grafana/schema';\n\nexport function getTableFilterTransform(query: string): DataTransformerConfig {\n  const regex: MatcherConfig<BasicValueMatcherOptions<string>> = {\n    id: ValueMatcherID.regex,\n    options: { value: query },\n  };\n\n  return {\n    id: DataTransformerID.filterByValue,\n    options: {\n      type: FilterByValueType.include,\n      match: FilterByValueMatch.all,\n      filters: [\n        {\n          fieldName: 'handler',\n          config: regex,\n        },\n      ],\n    },\n  };\n}\n\nexport function getTimeSeriesFilterTransform(query: string): CustomTransformOperator {\n  return () => (source) => {\n    return source.pipe(\n      map((data) => {\n        return data.filter((frame) => getFrameDisplayName(frame).toLowerCase().includes(query.toLowerCase()));\n      })\n    );\n  };\n}\n","import { useLocation } from 'react-router-dom';\n\nimport { UrlQueryMap, urlUtil } from '@grafana/data';\nimport { locationSearchToObject } from '@grafana/runtime';\n\nexport function useAppQueryParams() {\n  const location = useLocation();\n  return locationSearchToObject(location.search || '');\n}\n\nexport function getLinkUrlWithAppUrlState(path: string, params: UrlQueryMap): string {\n  return urlUtil.renderUrl(path, params);\n}\n","import { FieldColorModeId, getFrameDisplayName } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport {\n  SceneFlexLayout,\n  SceneByFrameRepeater,\n  SceneTimePicker,\n  VizPanel,\n  EmbeddedScene,\n  SceneDataNode,\n  SceneTimeRange,\n  VariableValueSelectors,\n  SceneQueryRunner,\n  SceneVariableSet,\n  QueryVariable,\n  SceneControlsSpacer,\n  SceneDataTransformer,\n  SceneRefreshPicker,\n  SceneFlexItem,\n} from '@grafana/scenes';\nimport { PromQuery } from 'app/plugins/datasource/prometheus/types';\n\nimport { SceneRadioToggle } from './SceneRadioToggle';\nimport { SceneSearchBox } from './SceneSearchBox';\nimport { getTableFilterTransform, getTimeSeriesFilterTransform } from './transforms';\nimport { getLinkUrlWithAppUrlState } from './utils';\n\nexport function getHttpHandlerListScene(): EmbeddedScene {\n  const searchBox = new SceneSearchBox({ value: '' });\n\n  const httpHandlerQueries = getInstantQuery({\n    expr: 'sort_desc(avg without(job, instance) (rate(grafana_http_request_duration_seconds_sum[$__rate_interval]) * 1e3)) ',\n  });\n\n  const httpHandlerQueriesFiltered = new SceneDataTransformer({\n    $data: httpHandlerQueries,\n    transformations: [getTableFilterTransform('')],\n  });\n\n  httpHandlerQueriesFiltered.addActivationHandler(() => {\n    const sub = searchBox.subscribeToState((state) => {\n      // Update transform and re-process them\n      httpHandlerQueriesFiltered.setState({ transformations: [getTableFilterTransform(state.value)] });\n      httpHandlerQueriesFiltered.reprocessTransformations();\n    });\n\n    return () => sub.unsubscribe();\n  });\n\n  const httpHandlersTable = new VizPanel({\n    $data: httpHandlerQueriesFiltered,\n    pluginId: 'table',\n    title: '',\n    options: {\n      footer: {\n        enablePagination: true,\n      },\n    },\n    fieldConfig: {\n      defaults: {},\n      overrides: [\n        {\n          matcher: {\n            id: 'byRegexp',\n            options: '.*',\n          },\n          properties: [{ id: 'filterable', value: false }],\n        },\n        {\n          matcher: {\n            id: 'byName',\n            options: 'Time',\n          },\n          properties: [{ id: 'custom.hidden', value: true }],\n        },\n        {\n          matcher: {\n            id: 'byName',\n            options: 'Value',\n          },\n          properties: [{ id: 'displayName', value: 'Duration (Avg)' }],\n        },\n        {\n          matcher: {\n            id: 'byName',\n            options: 'handler',\n          },\n          properties: [\n            {\n              id: 'links',\n              value: [\n                {\n                  title: 'Go to handler drilldown view',\n                  onBuildUrl: () => {\n                    const params = locationService.getSearchObject();\n                    return getLinkUrlWithAppUrlState(\n                      '/scenes/grafana-monitoring/handlers/${__value.text:percentencode}',\n                      params\n                    );\n                  },\n                },\n              ],\n            },\n          ],\n        },\n      ],\n    },\n  });\n\n  const reqDurationTimeSeries = new SceneQueryRunner({\n    datasource: { uid: 'gdev-prometheus' },\n    queries: [\n      {\n        refId: 'A',\n        //expr: ``,\n        expr: 'topk(20, avg without(job, instance) (rate(grafana_http_request_duration_seconds_sum[$__rate_interval])) * 1e3)',\n        range: true,\n        format: 'time_series',\n        legendFormat: '{{method}} {{handler}} (status = {{status_code}})',\n        maxDataPoints: 500,\n      },\n    ],\n  });\n\n  const reqDurationTimeSeriesFiltered = new SceneDataTransformer({\n    $data: reqDurationTimeSeries,\n    transformations: [getTimeSeriesFilterTransform('')],\n  });\n\n  reqDurationTimeSeriesFiltered.addActivationHandler(() => {\n    const sub = searchBox.subscribeToState((state) => {\n      // Update transform and re-process them\n      reqDurationTimeSeriesFiltered.setState({ transformations: [getTimeSeriesFilterTransform(state.value)] });\n      reqDurationTimeSeriesFiltered.reprocessTransformations();\n    });\n\n    return () => sub.unsubscribe();\n  });\n\n  const graphsScene = new SceneByFrameRepeater({\n    $data: reqDurationTimeSeriesFiltered,\n    body: new SceneFlexLayout({\n      direction: 'column',\n      children: [],\n    }),\n    getLayoutChild: (data, frame, frameIndex) => {\n      return new SceneFlexItem({\n        key: `panel-${frameIndex}`,\n        minHeight: 200,\n        $data: new SceneDataNode({\n          data: {\n            ...data,\n            series: [frame],\n          },\n        }),\n        body: new SceneFlexLayout({\n          direction: 'row',\n          children: [\n            new SceneFlexItem({\n              body: new VizPanel({\n                pluginId: 'timeseries',\n                // titleLink: {\n                //   path: `/scenes/grafana-monitoring/handlers/${encodeURIComponent(frame.fields[1].labels.handler)}`,\n                //   queryKeys: ['from', 'to', 'var-instance'],\n                // },\n                title: getFrameDisplayName(frame),\n                options: {\n                  legend: { displayMode: 'hidden' },\n                },\n              }),\n            }),\n\n            new SceneFlexItem({\n              width: 200,\n              body: new VizPanel({\n                title: 'Last',\n                pluginId: 'stat',\n                fieldConfig: {\n                  defaults: {\n                    displayName: 'Last',\n                    links: [\n                      {\n                        title: 'Go to handler drilldown view',\n                        url: ``,\n                        onBuildUrl: () => {\n                          const params = locationService.getSearchObject();\n                          return getLinkUrlWithAppUrlState(\n                            '/scenes/grafana-monitoring/handlers/${__field.labels.handler:percentencode}',\n                            params\n                          );\n                        },\n                      },\n                    ],\n                  },\n                  overrides: [],\n                },\n                options: {\n                  graphMode: 'none',\n                  textMode: 'value',\n                },\n              }),\n            }),\n          ],\n        }),\n      });\n    },\n  });\n\n  const layout = new SceneFlexLayout({\n    children: [new SceneFlexItem({ body: httpHandlersTable })],\n  });\n\n  const sceneToggle = new SceneRadioToggle({\n    options: [\n      { value: 'table', label: 'Table' },\n      { value: 'graphs', label: 'Graphs' },\n    ],\n    value: 'table',\n    onChange: (value) => {\n      if (value === 'table') {\n        layout.setState({ children: [new SceneFlexItem({ body: httpHandlersTable })] });\n      } else {\n        layout.setState({ children: [graphsScene] });\n      }\n    },\n  });\n\n  const scene = new EmbeddedScene({\n    $variables: getVariablesDefinitions(),\n    $data: httpHandlerQueries,\n    $timeRange: new SceneTimeRange({ from: 'now-1h', to: 'now' }),\n    controls: [\n      new VariableValueSelectors({}),\n      searchBox,\n      new SceneControlsSpacer(),\n      sceneToggle,\n      new SceneTimePicker({ isOnCanvas: true }),\n      new SceneRefreshPicker({ isOnCanvas: true }),\n    ],\n    body: layout,\n  });\n\n  return scene;\n}\n\nexport function getHandlerDetailsScene(handler: string): EmbeddedScene {\n  const reqDurationTimeSeries = getTimeSeriesQuery({\n    expr: `avg without(job, instance) (rate(grafana_http_request_duration_seconds_sum{handler=\"${handler}\"}[$__rate_interval])) * 1e3`,\n    legendFormat: '{{method}} {{handler}} (status = {{status_code}})',\n  });\n\n  const reqCountTimeSeries = getTimeSeriesQuery({\n    expr: `sum without(job, instance) (rate(grafana_http_request_duration_seconds_count{handler=\"${handler}\"}[$__rate_interval])) `,\n    legendFormat: '{{method}} {{handler}} (status = {{status_code}})',\n  });\n\n  const scene = new EmbeddedScene({\n    $variables: getVariablesDefinitions(),\n    $timeRange: new SceneTimeRange({ from: 'now-1h', to: 'now' }),\n    controls: [\n      new VariableValueSelectors({}),\n      new SceneControlsSpacer(),\n      new SceneTimePicker({ isOnCanvas: true }),\n      new SceneRefreshPicker({ isOnCanvas: true }),\n    ],\n    body: new SceneFlexLayout({\n      direction: 'column',\n      children: [\n        new SceneFlexItem({\n          body: new VizPanel({\n            $data: reqDurationTimeSeries,\n            pluginId: 'timeseries',\n            title: 'Request duration avg (ms)',\n            //displayMode: 'transparent',\n            options: {},\n          }),\n        }),\n        new SceneFlexItem({\n          body: new VizPanel({\n            $data: reqCountTimeSeries,\n            pluginId: 'timeseries',\n            title: 'Request count/s',\n            //displayMode: 'transparent',\n            options: {},\n          }),\n        }),\n      ],\n    }),\n  });\n\n  return scene;\n}\n\nfunction getInstantQuery(query: Partial<PromQuery>): SceneQueryRunner {\n  return new SceneQueryRunner({\n    datasource: { uid: 'gdev-prometheus' },\n    queries: [\n      {\n        refId: 'A',\n        instant: true,\n        format: 'table',\n        maxDataPoints: 500,\n        ...query,\n      },\n    ],\n  });\n}\n\nfunction getTimeSeriesQuery(query: Partial<PromQuery>): SceneQueryRunner {\n  return new SceneQueryRunner({\n    datasource: { uid: 'gdev-prometheus' },\n    queries: [\n      {\n        refId: 'A',\n        range: true,\n        format: 'time_series',\n        maxDataPoints: 500,\n        ...query,\n      },\n    ],\n  });\n}\n\nexport function getOverviewScene(): EmbeddedScene {\n  const scene = new EmbeddedScene({\n    $variables: getVariablesDefinitions(),\n    $timeRange: new SceneTimeRange({ from: 'now-1h', to: 'now' }),\n    controls: [\n      new VariableValueSelectors({}),\n      new SceneControlsSpacer(),\n      new SceneTimePicker({ isOnCanvas: true }),\n      new SceneRefreshPicker({ isOnCanvas: true }),\n    ],\n    body: new SceneFlexLayout({\n      direction: 'column',\n      children: [\n        new SceneFlexItem({\n          height: 150,\n          body: new SceneFlexLayout({\n            children: [\n              new SceneFlexItem({\n                body: getInstantStatPanel('grafana_stat_totals_dashboard', 'Dashboards'),\n              }),\n              new SceneFlexItem({\n                body: getInstantStatPanel('grafana_stat_total_users', 'Users'),\n              }),\n              new SceneFlexItem({\n                body: getInstantStatPanel('sum(grafana_stat_totals_datasource)', 'Data sources'),\n              }),\n              new SceneFlexItem({\n                body: getInstantStatPanel('grafana_stat_total_service_account_tokens', 'Service account tokens'),\n              }),\n            ],\n          }),\n        }),\n\n        new SceneFlexItem({\n          body: new VizPanel({\n            $data: new SceneQueryRunner({\n              datasource: { uid: 'gdev-prometheus' },\n              queries: [\n                {\n                  refId: 'A',\n                  expr: `sum(process_resident_memory_bytes{job=\"grafana\", instance=~\"$instance\"})`,\n                  range: true,\n                  format: 'time_series',\n                  maxDataPoints: 500,\n                },\n              ],\n            }),\n            pluginId: 'timeseries',\n            title: 'Memory usage',\n            options: {\n              legend: {\n                showLegend: false,\n              },\n            },\n            fieldConfig: {\n              defaults: {\n                unit: 'bytes',\n                min: 0,\n                custom: {\n                  lineWidth: 2,\n                  fillOpacity: 6,\n                  //gradientMode: 'opacity',\n                },\n              },\n              overrides: [],\n            },\n          }),\n        }),\n        new SceneFlexItem({\n          body: new VizPanel({\n            $data: new SceneQueryRunner({\n              datasource: { uid: 'gdev-prometheus' },\n              queries: [\n                {\n                  refId: 'A',\n                  expr: `sum(go_goroutines{job=\"grafana\", instance=~\"$instance\"})`,\n                  range: true,\n                  format: 'time_series',\n                  maxDataPoints: 500,\n                },\n              ],\n            }),\n            pluginId: 'timeseries',\n            title: 'Go routines',\n            options: {\n              legend: {\n                showLegend: false,\n              },\n            },\n            fieldConfig: {\n              defaults: {\n                min: 0,\n                custom: {\n                  lineWidth: 2,\n                  fillOpacity: 6,\n                  //gradientMode: 'opacity',\n                },\n              },\n              overrides: [],\n            },\n          }),\n        }),\n      ],\n    }),\n  });\n\n  return scene;\n}\n\nfunction getVariablesDefinitions() {\n  return new SceneVariableSet({\n    variables: [\n      new QueryVariable({\n        name: 'instance',\n        datasource: { uid: 'gdev-prometheus' },\n        query: { query: 'label_values(grafana_http_request_duration_seconds_sum, instance)' },\n      }),\n    ],\n  });\n}\n\nfunction getInstantStatPanel(query: string, title: string) {\n  return new VizPanel({\n    $data: getInstantQuery({ expr: query }),\n    pluginId: 'stat',\n    title,\n    options: {},\n    fieldConfig: {\n      defaults: {\n        color: { fixedColor: 'text', mode: FieldColorModeId.Fixed },\n      },\n      overrides: [],\n    },\n  });\n}\n\nexport function getHandlerLogsScene(handler: string): EmbeddedScene {\n  const logsQuery = new SceneQueryRunner({\n    datasource: { uid: 'gdev-loki' },\n    queries: [\n      {\n        refId: 'A',\n        expr: `{job=\"grafana\"} | logfmt | handler=\\`${handler}\\` | __error__=\\`\\``,\n        queryType: 'range',\n        maxDataPoints: 5000,\n      },\n    ],\n  });\n\n  const scene = new EmbeddedScene({\n    $variables: getVariablesDefinitions(),\n    $timeRange: new SceneTimeRange({ from: 'now-1h', to: 'now' }),\n    controls: [\n      new VariableValueSelectors({}),\n      new SceneControlsSpacer(),\n      new SceneTimePicker({ isOnCanvas: true }),\n      new SceneRefreshPicker({ isOnCanvas: true }),\n    ],\n    body: new SceneFlexLayout({\n      direction: 'column',\n      children: [\n        new SceneFlexItem({\n          body: new VizPanel({\n            pluginId: 'text',\n            title: '',\n            options: {\n              mode: 'markdown',\n              content: `\n  [mupp](/scenes/grafana-monitoring/handlers/${encodeURIComponent(handler)}/logs/mupp)\n  [mapp](/scenes/grafana-monitoring/handlers/${encodeURIComponent(handler)}/logs/mapp)\n  `,\n            },\n          }),\n        }),\n        new SceneFlexItem({\n          body: new VizPanel({\n            $data: logsQuery,\n            pluginId: 'logs',\n            title: '',\n            options: {\n              showTime: true,\n              showLabels: false,\n              showCommonLabels: false,\n              wrapLogMessage: true,\n              prettifyLogMessage: false,\n              enableLogDetails: true,\n              dedupStrategy: 'none',\n              sortOrder: 'Descending',\n            },\n          }),\n        }),\n      ],\n    }),\n  });\n\n  return scene;\n}\n\nexport function getOverviewLogsScene(): EmbeddedScene {\n  const logsQuery = new SceneQueryRunner({\n    datasource: { uid: 'gdev-loki' },\n    queries: [\n      {\n        refId: 'A',\n        expr: `{job=\"grafana\"} | logfmt | __error__=\\`\\``,\n        queryType: 'range',\n        maxDataPoints: 5000,\n      },\n    ],\n  });\n\n  const scene = new EmbeddedScene({\n    $variables: getVariablesDefinitions(),\n    $timeRange: new SceneTimeRange({ from: 'now-1h', to: 'now' }),\n    controls: [\n      new VariableValueSelectors({}),\n      new SceneControlsSpacer(),\n      new SceneTimePicker({ isOnCanvas: true }),\n      new SceneRefreshPicker({ isOnCanvas: true }),\n    ],\n    body: new SceneFlexLayout({\n      direction: 'column',\n      children: [\n        new SceneFlexItem({\n          body: new VizPanel({\n            $data: logsQuery,\n            pluginId: 'logs',\n            title: '',\n            options: {\n              showTime: true,\n              showLabels: false,\n              showCommonLabels: false,\n              wrapLogMessage: true,\n              prettifyLogMessage: false,\n              enableLogDetails: true,\n              dedupStrategy: 'none',\n              sortOrder: 'Descending',\n            },\n          }),\n        }),\n      ],\n    }),\n  });\n\n  return scene;\n}\n","// Libraries\nimport React, { useMemo, useState } from 'react';\n\nimport {\n  SceneCanvasText,\n  SceneFlexLayout,\n  SceneApp,\n  SceneAppPage,\n  SceneRouteMatch,\n  EmbeddedScene,\n  SceneAppPageLike,\n  SceneFlexItem,\n} from '@grafana/scenes';\nimport { usePageNav } from 'app/core/components/Page/usePageNav';\nimport { PluginPageContext, PluginPageContextType } from 'app/features/plugins/components/PluginPageContext';\n\nimport {\n  getOverviewScene,\n  getHttpHandlerListScene,\n  getOverviewLogsScene,\n  getHandlerDetailsScene,\n  getHandlerLogsScene,\n} from './scenes';\n\nexport function GrafanaMonitoringApp() {\n  const appScene = useMemo(\n    () =>\n      new SceneApp({\n        pages: [getMainPageScene()],\n      }),\n    []\n  );\n\n  const sectionNav = usePageNav('scenes')!;\n  const [pluginContext] = useState<PluginPageContextType>({ sectionNav });\n\n  return (\n    <PluginPageContext.Provider value={pluginContext}>\n      <appScene.Component model={appScene} />\n    </PluginPageContext.Provider>\n  );\n}\n\nexport function getMainPageScene() {\n  return new SceneAppPage({\n    title: 'Grafana Monitoring',\n    subTitle: 'A custom app with embedded scenes to monitor your Grafana server',\n    url: '/scenes/grafana-monitoring',\n    hideFromBreadcrumbs: false,\n    getScene: getOverviewScene,\n    tabs: [\n      new SceneAppPage({\n        title: 'Overview',\n        url: '/scenes/grafana-monitoring',\n        getScene: getOverviewScene,\n        preserveUrlKeys: ['from', 'to', 'var-instance'],\n      }),\n      new SceneAppPage({\n        title: 'HTTP handlers',\n        url: '/scenes/grafana-monitoring/handlers',\n        getScene: getHttpHandlerListScene,\n        preserveUrlKeys: ['from', 'to', 'var-instance'],\n        drilldowns: [\n          {\n            routePath: '/scenes/grafana-monitoring/handlers/:handler',\n            getPage: getHandlerDrilldownPage,\n          },\n        ],\n      }),\n      new SceneAppPage({\n        title: 'Logs',\n        url: '/scenes/grafana-monitoring/logs',\n        getScene: getOverviewLogsScene,\n        preserveUrlKeys: ['from', 'to', 'var-instance'],\n      }),\n    ],\n  });\n}\n\nexport function getHandlerDrilldownPage(\n  match: SceneRouteMatch<{ handler: string; tab?: string }>,\n  parent: SceneAppPageLike\n) {\n  const handler = decodeURIComponent(match.params.handler);\n  const baseUrl = `/scenes/grafana-monitoring/handlers/${encodeURIComponent(handler)}`;\n\n  return new SceneAppPage({\n    title: handler,\n    subTitle: 'A grafana http handler is responsible for service a specific API request',\n    url: baseUrl,\n    getParentPage: () => parent,\n    getScene: () => getHandlerDetailsScene(handler),\n    tabs: [\n      new SceneAppPage({\n        title: 'Metrics',\n        url: baseUrl,\n        routePath: '/scenes/grafana-monitoring/handlers/:handler',\n        getScene: () => getHandlerDetailsScene(handler),\n        preserveUrlKeys: ['from', 'to', 'var-instance'],\n      }),\n      new SceneAppPage({\n        title: 'Logs',\n        url: baseUrl + '/logs',\n        routePath: '/scenes/grafana-monitoring/handlers/:handler/logs',\n        getScene: () => getHandlerLogsScene(handler),\n        preserveUrlKeys: ['from', 'to', 'var-instance'],\n        drilldowns: [\n          {\n            routePath: '/scenes/grafana-monitoring/handlers/:handler/logs/:secondLevel',\n            getPage: getSecondLevelDrilldown,\n          },\n        ],\n      }),\n    ],\n  });\n}\n\nexport function getSecondLevelDrilldown(\n  match: SceneRouteMatch<{ handler: string; secondLevel: string }>,\n  parent: SceneAppPageLike\n) {\n  const handler = decodeURIComponent(match.params.handler);\n  const secondLevel = decodeURIComponent(match.params.secondLevel);\n  const baseUrl = `/scenes/grafana-monitoring/handlers/${encodeURIComponent(handler)}/logs/${secondLevel}`;\n\n  return new SceneAppPage({\n    title: secondLevel,\n    subTitle: 'Second level dynamic drilldown',\n    url: baseUrl,\n    getParentPage: () => parent,\n    getScene: () => {\n      return new EmbeddedScene({\n        body: new SceneFlexLayout({\n          children: [\n            new SceneFlexItem({\n              body: new SceneCanvasText({\n                text: 'Drilldown: ' + secondLevel,\n              }),\n            }),\n          ],\n        }),\n      });\n    },\n  });\n}\n\nexport default GrafanaMonitoringApp;\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2, PageLayoutType } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { SceneObjectBase, SceneComponentProps, SceneObject, SceneObjectState } from '@grafana/scenes';\nimport { ToolbarButton, useStyles2 } from '@grafana/ui';\nimport { AppChromeUpdate } from 'app/core/components/AppChrome/AppChromeUpdate';\nimport { Page } from 'app/core/components/Page/Page';\n\ninterface DashboardSceneState extends SceneObjectState {\n  title: string;\n  uid?: string;\n  body: SceneObject;\n  actions?: SceneObject[];\n  controls?: SceneObject[];\n}\n\nexport class DashboardScene extends SceneObjectBase<DashboardSceneState> {\n  public static Component = DashboardSceneRenderer;\n}\n\nfunction DashboardSceneRenderer({ model }: SceneComponentProps<DashboardScene>) {\n  const { title, body, actions = [], uid, controls } = model.useState();\n  const styles = useStyles2(getStyles);\n\n  const toolbarActions = (actions ?? []).map((action) => <action.Component key={action.state.key} model={action} />);\n\n  if (uid?.length) {\n    toolbarActions.push(\n      <ToolbarButton\n        icon=\"apps\"\n        onClick={() => locationService.push(`/d/${uid}`)}\n        tooltip=\"View as Dashboard\"\n        key=\"scene-to-dashboard-switch\"\n      />\n    );\n  }\n  const pageToolbar = <AppChromeUpdate actions={toolbarActions} />;\n\n  return (\n    <Page navId=\"scenes\" pageNav={{ text: title }} layout={PageLayoutType.Canvas} toolbar={pageToolbar}>\n      {controls && (\n        <div className={styles.controls}>\n          {controls.map((control) => (\n            <control.Component key={control.state.key} model={control} />\n          ))}\n        </div>\n      )}\n      <div className={styles.body}>\n        <body.Component model={body} />\n      </div>\n    </Page>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    body: css({\n      flexGrow: 1,\n      display: 'flex',\n      gap: '8px',\n    }),\n    controls: css({\n      display: 'flex',\n      paddingBottom: theme.spacing(2),\n      flexWrap: 'wrap',\n      alignItems: 'center',\n      gap: theme.spacing(1),\n    }),\n  };\n}\n","import { SceneDeactivationHandler, SceneObject } from '@grafana/scenes';\n\nexport function getVizPanelKeyForPanelId(panelId: number) {\n  return `panel-${panelId}`;\n}\n\n/**\n * Useful from tests to simulate mounting a full scene. Children are activated before parents to simulate the real order\n * of React mount order and useEffect ordering.\n *\n */\nexport function activateFullSceneTree(scene: SceneObject): SceneDeactivationHandler {\n  const deactivationHandlers: SceneDeactivationHandler[] = [];\n\n  scene.forEachChild((child) => {\n    deactivationHandlers.push(activateFullSceneTree(child));\n  });\n\n  deactivationHandlers.push(scene.activate());\n\n  return () => {\n    for (const handler of deactivationHandlers) {\n      handler();\n    }\n  };\n}\n","import { Unsubscribable } from 'rxjs';\n\nimport {\n  SceneDataProvider,\n  SceneDataState,\n  SceneDataTransformer,\n  SceneDeactivationHandler,\n  SceneObject,\n  SceneObjectBase,\n} from '@grafana/scenes';\nimport { DashboardQuery } from 'app/plugins/datasource/dashboard/types';\n\nimport { getVizPanelKeyForPanelId } from './utils';\n\nexport interface ShareQueryDataProviderState extends SceneDataState {\n  query: DashboardQuery;\n}\n\nexport class ShareQueryDataProvider extends SceneObjectBase<ShareQueryDataProviderState> implements SceneDataProvider {\n  private _querySub: Unsubscribable | undefined;\n  private _sourceDataDeactivationHandler?: SceneDeactivationHandler;\n\n  public constructor(state: ShareQueryDataProviderState) {\n    super(state);\n\n    this.addActivationHandler(() => {\n      // TODO handle changes to query model (changed panelId / withTransforms)\n      //this.subscribeToState(this._onStateChanged);\n\n      this._subscribeToSource();\n\n      return () => {\n        if (this._querySub) {\n          this._querySub.unsubscribe();\n        }\n        if (this._sourceDataDeactivationHandler) {\n          this._sourceDataDeactivationHandler();\n        }\n      };\n    });\n  }\n\n  private _subscribeToSource() {\n    const { query } = this.state;\n\n    if (this._querySub) {\n      this._querySub.unsubscribe();\n    }\n\n    if (!query.panelId) {\n      return;\n    }\n\n    const keyToFind = getVizPanelKeyForPanelId(query.panelId);\n    const source = findObjectInScene(this.getRoot(), (scene: SceneObject) => scene.state.key === keyToFind);\n\n    if (!source) {\n      console.log('Shared dashboard query refers to a panel that does not exist in the scene');\n      return;\n    }\n\n    let sourceData = source.state.$data;\n    if (!sourceData) {\n      console.log('No source data found for shared dashboard query');\n      return;\n    }\n\n    // This will activate if sourceData is part of hidden panel\n    // Also make sure the sourceData is not deactivated if hidden later\n    this._sourceDataDeactivationHandler = sourceData.activate();\n\n    if (sourceData instanceof SceneDataTransformer) {\n      if (!query.withTransforms) {\n        if (!sourceData.state.$data) {\n          throw new Error('No source inner query runner found in data transformer');\n        }\n        sourceData = sourceData.state.$data;\n      }\n    }\n\n    this._querySub = sourceData.subscribeToState((state) => this.setState({ data: state.data }));\n\n    // Copy the initial state\n    this.setState({ data: sourceData.state.data });\n  }\n}\n\nexport function findObjectInScene(scene: SceneObject, check: (scene: SceneObject) => boolean): SceneObject | null {\n  if (check(scene)) {\n    return scene;\n  }\n\n  let found: SceneObject | null = null;\n\n  scene.forEachChild((child) => {\n    let maybe = findObjectInScene(child, check);\n    if (maybe) {\n      found = maybe;\n    }\n  });\n\n  return found;\n}\n","import {\n  ConstantVariableModel,\n  CustomVariableModel,\n  DataSourceVariableModel,\n  QueryVariableModel,\n  VariableModel,\n} from '@grafana/data';\nimport {\n  VizPanel,\n  SceneTimePicker,\n  SceneGridLayout,\n  SceneGridRow,\n  SceneTimeRange,\n  SceneQueryRunner,\n  SceneVariableSet,\n  VariableValueSelectors,\n  SceneVariable,\n  CustomVariable,\n  DataSourceVariable,\n  QueryVariable,\n  ConstantVariable,\n  SceneRefreshPicker,\n  SceneDataTransformer,\n  SceneGridItem,\n  SceneDataProvider,\n  getUrlSyncManager,\n} from '@grafana/scenes';\nimport { StateManagerBase } from 'app/core/services/StateManagerBase';\nimport { dashboardLoaderSrv } from 'app/features/dashboard/services/DashboardLoaderSrv';\nimport { DashboardModel, PanelModel } from 'app/features/dashboard/state';\nimport { SHARED_DASHBOARD_QUERY } from 'app/plugins/datasource/dashboard/types';\nimport { DashboardDTO } from 'app/types';\n\nimport { DashboardScene } from './DashboardScene';\nimport { ShareQueryDataProvider } from './ShareQueryDataProvider';\nimport { getVizPanelKeyForPanelId } from './utils';\n\nexport interface DashboardLoaderState {\n  dashboard?: DashboardScene;\n  isLoading?: boolean;\n  loadError?: string;\n}\n\nexport class DashboardLoader extends StateManagerBase<DashboardLoaderState> {\n  private cache: Record<string, DashboardScene> = {};\n\n  public async load(uid: string) {\n    const fromCache = this.cache[uid];\n    if (fromCache) {\n      this.setState({ dashboard: fromCache });\n      return;\n    }\n\n    this.setState({ isLoading: true });\n\n    try {\n      const rsp = await dashboardLoaderSrv.loadDashboard('db', '', uid);\n\n      if (rsp.dashboard) {\n        this.initDashboard(rsp);\n      } else {\n        throw new Error('Dashboard not found');\n      }\n    } catch (err) {\n      this.setState({ isLoading: false, loadError: String(err) });\n    }\n  }\n\n  private initDashboard(rsp: DashboardDTO) {\n    // Just to have migrations run\n    const oldModel = new DashboardModel(rsp.dashboard, rsp.meta, {\n      autoMigrateOldPanels: true,\n    });\n\n    const dashboard = createDashboardSceneFromDashboardModel(oldModel);\n\n    // We initialize URL sync here as it better to do that before mounting and doing any rendering.\n    // But would be nice to have a conditional around this so you can pre-load dashboards without url sync.\n    getUrlSyncManager().initSync(dashboard);\n\n    this.cache[rsp.dashboard.uid] = dashboard;\n    this.setState({ dashboard, isLoading: false });\n  }\n\n  public clearState() {\n    this.setState({ dashboard: undefined, loadError: undefined, isLoading: false });\n  }\n}\n\nexport function createSceneObjectsForPanels(oldPanels: PanelModel[]): Array<SceneGridItem | SceneGridRow> {\n  // collects all panels and rows\n  const panels: Array<SceneGridItem | SceneGridRow> = [];\n\n  // indicates expanded row that's currently processed\n  let currentRow: PanelModel | null = null;\n  // collects panels in the currently processed, expanded row\n  let currentRowPanels: SceneGridItem[] = [];\n\n  for (const panel of oldPanels) {\n    if (panel.type === 'row') {\n      if (!currentRow) {\n        if (Boolean(panel.collapsed)) {\n          // collapsed rows contain their panels within the row model\n          panels.push(\n            new SceneGridRow({\n              title: panel.title,\n              isCollapsed: true,\n              y: panel.gridPos.y,\n              children: panel.panels ? panel.panels.map(createVizPanelFromPanelModel) : [],\n            })\n          );\n        } else {\n          // indicate new row to be processed\n          currentRow = panel;\n        }\n      } else {\n        // when a row has been processed, and we hit a next one for processing\n        if (currentRow.id !== panel.id) {\n          // commit previous row panels\n          panels.push(\n            new SceneGridRow({\n              title: currentRow!.title,\n              y: currentRow.gridPos.y,\n              children: currentRowPanels,\n            })\n          );\n\n          currentRow = panel;\n          currentRowPanels = [];\n        }\n      }\n    } else {\n      const panelObject = createVizPanelFromPanelModel(panel);\n\n      // when processing an expanded row, collect its panels\n      if (currentRow) {\n        currentRowPanels.push(panelObject);\n      } else {\n        panels.push(panelObject);\n      }\n    }\n  }\n\n  // commit a row if it's the last one\n  if (currentRow) {\n    panels.push(\n      new SceneGridRow({\n        title: currentRow!.title,\n        y: currentRow.gridPos.y,\n        children: currentRowPanels,\n      })\n    );\n  }\n\n  return panels;\n}\n\nexport function createDashboardSceneFromDashboardModel(oldModel: DashboardModel) {\n  let variables: SceneVariableSet | undefined = undefined;\n\n  if (oldModel.templating?.list?.length) {\n    const variableObjects = oldModel.templating.list\n      .map((v) => {\n        try {\n          return createSceneVariableFromVariableModel(v);\n        } catch (err) {\n          console.error(err);\n          return null;\n        }\n      })\n      // TODO: Remove filter\n      // Added temporarily to allow skipping non-compatible variables\n      .filter((v): v is SceneVariable => Boolean(v));\n\n    variables = new SceneVariableSet({\n      variables: variableObjects,\n    });\n  }\n\n  return new DashboardScene({\n    title: oldModel.title,\n    uid: oldModel.uid,\n    body: new SceneGridLayout({\n      children: createSceneObjectsForPanels(oldModel.panels),\n    }),\n    $timeRange: new SceneTimeRange(oldModel.time),\n    actions: [\n      new SceneTimePicker({}),\n      new SceneRefreshPicker({\n        refresh: oldModel.refresh,\n        intervals: oldModel.timepicker.refresh_intervals,\n      }),\n    ],\n    $variables: variables,\n    ...(variables && {\n      controls: [new VariableValueSelectors({})],\n    }),\n  });\n}\n\nexport function createSceneVariableFromVariableModel(variable: VariableModel): SceneVariable {\n  const commonProperties = {\n    name: variable.name,\n    label: variable.label,\n  };\n  if (isCustomVariable(variable)) {\n    return new CustomVariable({\n      ...commonProperties,\n      value: variable.current.value,\n      text: variable.current.text,\n      description: variable.description,\n      query: variable.query,\n      isMulti: variable.multi,\n      allValue: variable.allValue || undefined,\n      includeAll: variable.includeAll,\n      defaultToAll: Boolean(variable.includeAll),\n      skipUrlSync: variable.skipUrlSync,\n      hide: variable.hide,\n    });\n  } else if (isQueryVariable(variable)) {\n    return new QueryVariable({\n      ...commonProperties,\n      value: variable.current.value,\n      text: variable.current.text,\n      description: variable.description,\n      query: variable.query,\n      datasource: variable.datasource,\n      sort: variable.sort,\n      refresh: variable.refresh,\n      regex: variable.regex,\n      allValue: variable.allValue || undefined,\n      includeAll: variable.includeAll,\n      defaultToAll: Boolean(variable.includeAll),\n      isMulti: variable.multi,\n      skipUrlSync: variable.skipUrlSync,\n      hide: variable.hide,\n    });\n  } else if (isDataSourceVariable(variable)) {\n    return new DataSourceVariable({\n      ...commonProperties,\n      value: variable.current.value,\n      text: variable.current.text,\n      description: variable.description,\n      regex: variable.regex,\n      pluginId: variable.query,\n      allValue: variable.allValue || undefined,\n      includeAll: variable.includeAll,\n      defaultToAll: Boolean(variable.includeAll),\n      skipUrlSync: variable.skipUrlSync,\n      isMulti: variable.multi,\n      hide: variable.hide,\n    });\n  } else if (isConstantVariable(variable)) {\n    return new ConstantVariable({\n      ...commonProperties,\n      description: variable.description,\n      value: variable.query,\n      skipUrlSync: variable.skipUrlSync,\n      hide: variable.hide,\n    });\n  } else {\n    throw new Error(`Scenes: Unsupported variable type ${variable.type}`);\n  }\n}\n\nexport function createVizPanelFromPanelModel(panel: PanelModel) {\n  return new SceneGridItem({\n    x: panel.gridPos.x,\n    y: panel.gridPos.y,\n    width: panel.gridPos.w,\n    height: panel.gridPos.h,\n    isDraggable: true,\n    isResizable: true,\n    body: new VizPanel({\n      key: getVizPanelKeyForPanelId(panel.id),\n      title: panel.title,\n      pluginId: panel.type,\n      options: panel.options ?? {},\n      fieldConfig: panel.fieldConfig,\n      pluginVersion: panel.pluginVersion,\n      displayMode: panel.transparent ? 'transparent' : undefined,\n      // To be replaced with it's own option persited option instead derived\n      hoverHeader: !panel.title && !panel.timeFrom && !panel.timeShift,\n      $data: createPanelDataProvider(panel),\n    }),\n  });\n}\n\nexport function createPanelDataProvider(panel: PanelModel): SceneDataProvider | undefined {\n  if (!panel.targets?.length) {\n    return undefined;\n  }\n\n  let dataProvider: SceneDataProvider | undefined = undefined;\n\n  if (panel.datasource?.uid === SHARED_DASHBOARD_QUERY) {\n    dataProvider = new ShareQueryDataProvider({ query: panel.targets[0] });\n  } else {\n    dataProvider = new SceneQueryRunner({\n      queries: panel.targets,\n      maxDataPoints: panel.maxDataPoints ?? undefined,\n    });\n  }\n\n  // Wrap inner data provider in a data transformer\n  if (panel.transformations?.length) {\n    dataProvider = new SceneDataTransformer({\n      $data: dataProvider,\n      transformations: panel.transformations,\n    });\n  }\n\n  return dataProvider;\n}\n\nlet loader: DashboardLoader | null = null;\n\nexport function getDashboardLoader(): DashboardLoader {\n  if (!loader) {\n    loader = new DashboardLoader({});\n  }\n\n  return loader;\n}\n\nconst isCustomVariable = (v: VariableModel): v is CustomVariableModel => v.type === 'custom';\nconst isQueryVariable = (v: VariableModel): v is QueryVariableModel => v.type === 'query';\nconst isDataSourceVariable = (v: VariableModel): v is DataSourceVariableModel => v.type === 'datasource';\nconst isConstantVariable = (v: VariableModel): v is ConstantVariableModel => v.type === 'constant';\n","// Libraries\nimport React, { useEffect } from 'react';\n\nimport { PageLayoutType } from '@grafana/data';\nimport { Page } from 'app/core/components/Page/Page';\nimport PageLoader from 'app/core/components/PageLoader/PageLoader';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\n\nimport { getDashboardLoader } from './DashboardsLoader';\n\nexport interface Props extends GrafanaRouteComponentProps<{ uid: string }> {}\n\nexport const DashboardScenePage = ({ match }: Props) => {\n  const loader = getDashboardLoader();\n  const { dashboard, isLoading } = loader.useState();\n\n  useEffect(() => {\n    loader.load(match.params.uid);\n    return () => {\n      loader.clearState();\n    };\n  }, [loader, match.params.uid]);\n\n  if (!dashboard) {\n    return (\n      <Page layout={PageLayoutType.Canvas}>\n        {isLoading && <PageLoader />}\n        {!isLoading && <h2>Dashboard not found</h2>}\n      </Page>\n    );\n  }\n\n  return <dashboard.Component model={dashboard} />;\n};\n\nexport default DashboardScenePage;\n","import { QueryRunnerState, SceneQueryRunner } from '@grafana/scenes';\nimport { TestData } from 'app/plugins/datasource/testdata/dataquery.gen';\n\nexport function getQueryRunnerWithRandomWalkQuery(\n  overrides?: Partial<TestData>,\n  queryRunnerOverrides?: Partial<QueryRunnerState>\n) {\n  return new SceneQueryRunner({\n    queries: [\n      {\n        refId: 'A',\n        datasource: {\n          uid: 'gdev-testdata',\n          type: 'testdata',\n        },\n        scenarioId: 'random_walk',\n        ...overrides,\n      },\n    ],\n    ...queryRunnerOverrides,\n  });\n}\n","import {\n  VizPanel,\n  SceneGridRow,\n  SceneTimePicker,\n  SceneGridLayout,\n  SceneTimeRange,\n  SceneRefreshPicker,\n  SceneGridItem,\n} from '@grafana/scenes';\nimport { TestDataQueryType } from 'app/plugins/datasource/testdata/dataquery.gen';\n\nimport { DashboardScene } from '../dashboard/DashboardScene';\n\nimport { getQueryRunnerWithRandomWalkQuery } from './queries';\n\nexport function getGridWithMultipleTimeRanges(): DashboardScene {\n  const globalTimeRange = new SceneTimeRange();\n  const row1TimeRange = new SceneTimeRange({\n    from: 'now-1y',\n    to: 'now',\n  });\n\n  return new DashboardScene({\n    title: 'Grid with rows and different queries and time ranges',\n    body: new SceneGridLayout({\n      children: [\n        new SceneGridRow({\n          $timeRange: row1TimeRange,\n          $data: getQueryRunnerWithRandomWalkQuery({ scenarioId: TestDataQueryType.RandomWalkTable }),\n          title: 'Row A - has its own query, last year time range',\n          key: 'Row A',\n          isCollapsed: true,\n          y: 0,\n          children: [\n            new SceneGridItem({\n              x: 0,\n              y: 1,\n              width: 12,\n              height: 5,\n              isResizable: true,\n              isDraggable: true,\n              body: new VizPanel({\n                pluginId: 'timeseries',\n                title: 'Row A Child1',\n                key: 'Row A Child1',\n              }),\n            }),\n            new SceneGridItem({\n              x: 0,\n              y: 5,\n              width: 6,\n              height: 5,\n              isResizable: true,\n              isDraggable: true,\n              body: new VizPanel({\n                pluginId: 'timeseries',\n                title: 'Row A Child2',\n                key: 'Row A Child2',\n              }),\n            }),\n          ],\n        }),\n        new SceneGridItem({\n          x: 0,\n          y: 12,\n          width: 6,\n          height: 10,\n          isResizable: true,\n          isDraggable: true,\n          body: new VizPanel({\n            $data: getQueryRunnerWithRandomWalkQuery(),\n            pluginId: 'timeseries',\n            title: 'Outsider, has its own query',\n            key: 'Outsider-own-query',\n          }),\n        }),\n      ],\n    }),\n    $timeRange: globalTimeRange,\n    $data: getQueryRunnerWithRandomWalkQuery(),\n    actions: [new SceneTimePicker({}), new SceneRefreshPicker({})],\n  });\n}\n","import {\n  VizPanel,\n  SceneTimePicker,\n  SceneFlexLayout,\n  SceneGridLayout,\n  SceneTimeRange,\n  SceneRefreshPicker,\n  SceneGridItem,\n  SceneFlexItem,\n} from '@grafana/scenes';\n\nimport { DashboardScene } from '../dashboard/DashboardScene';\n\nimport { getQueryRunnerWithRandomWalkQuery } from './queries';\n\nexport function getMultipleGridLayoutTest(): DashboardScene {\n  return new DashboardScene({\n    title: 'Multiple grid layouts test',\n    body: new SceneFlexLayout({\n      children: [\n        new SceneFlexItem({\n          body: new SceneGridLayout({\n            children: [\n              new SceneGridItem({\n                x: 0,\n                y: 0,\n                width: 12,\n                height: 10,\n                isDraggable: true,\n                isResizable: true,\n                body: new VizPanel({\n                  pluginId: 'timeseries',\n                  title: 'Dragabble and resizable',\n                }),\n              }),\n              new SceneGridItem({\n                x: 12,\n                y: 0,\n                width: 12,\n                height: 10,\n                isResizable: false,\n                isDraggable: true,\n                body: new VizPanel({\n                  pluginId: 'timeseries',\n                  title: 'Draggable only',\n                }),\n              }),\n              new SceneGridItem({\n                x: 6,\n                y: 11,\n                width: 12,\n                height: 10,\n                isResizable: false,\n                isDraggable: true,\n                body: new SceneFlexLayout({\n                  direction: 'column',\n                  children: [\n                    new SceneFlexItem({\n                      ySizing: 'fill',\n                      body: new VizPanel({\n                        pluginId: 'timeseries',\n                        title: 'Fill height',\n                      }),\n                    }),\n                    new SceneFlexItem({\n                      ySizing: 'fill',\n                      body: new VizPanel({\n                        pluginId: 'timeseries',\n                        title: 'Fill height',\n                      }),\n                    }),\n                  ],\n                }),\n              }),\n            ],\n          }),\n        }),\n        new SceneFlexItem({\n          body: new SceneGridLayout({\n            children: [\n              new SceneGridItem({\n                x: 0,\n                y: 0,\n                width: 12,\n                height: 10,\n                isDraggable: true,\n                isResizable: true,\n                body: new VizPanel({\n                  pluginId: 'timeseries',\n                  title: 'Dragabble and resizable',\n                }),\n              }),\n              new SceneGridItem({\n                x: 12,\n                y: 0,\n                width: 12,\n                height: 10,\n                isResizable: false,\n                isDraggable: true,\n                body: new VizPanel({\n                  pluginId: 'timeseries',\n                  title: 'Draggable only',\n                }),\n              }),\n              new SceneGridItem({\n                x: 6,\n                y: 11,\n                width: 12,\n                height: 10,\n                isResizable: false,\n                isDraggable: true,\n                body: new SceneFlexLayout({\n                  direction: 'column',\n                  children: [\n                    new SceneFlexItem({\n                      ySizing: 'fill',\n                      body: new VizPanel({\n                        pluginId: 'timeseries',\n                        title: 'Fill height',\n                      }),\n                    }),\n                    new SceneFlexItem({\n                      ySizing: 'fill',\n                      body: new VizPanel({\n                        pluginId: 'timeseries',\n                        title: 'Fill height',\n                      }),\n                    }),\n                  ],\n                }),\n              }),\n            ],\n          }),\n        }),\n      ],\n    }),\n    $timeRange: new SceneTimeRange(),\n    $data: getQueryRunnerWithRandomWalkQuery(),\n    actions: [new SceneTimePicker({}), new SceneRefreshPicker({})],\n  });\n}\n","import {\n  VizPanel,\n  SceneGridRow,\n  SceneTimePicker,\n  SceneGridLayout,\n  SceneTimeRange,\n  SceneRefreshPicker,\n  SceneGridItem,\n} from '@grafana/scenes';\nimport { TestDataQueryType } from 'app/plugins/datasource/testdata/dataquery.gen';\n\nimport { DashboardScene } from '../dashboard/DashboardScene';\n\nimport { getQueryRunnerWithRandomWalkQuery } from './queries';\n\nexport function getGridWithMultipleData(): DashboardScene {\n  return new DashboardScene({\n    title: 'Grid with rows and different queries',\n    body: new SceneGridLayout({\n      children: [\n        new SceneGridRow({\n          $timeRange: new SceneTimeRange(),\n          $data: getQueryRunnerWithRandomWalkQuery({ scenarioId: TestDataQueryType.RandomWalkTable }),\n          title: 'Row A - has its own query',\n          key: 'Row A',\n          isCollapsed: true,\n          y: 0,\n          children: [\n            new SceneGridItem({\n              x: 0,\n              y: 1,\n              width: 12,\n              height: 5,\n              isResizable: true,\n              isDraggable: true,\n              body: new VizPanel({\n                pluginId: 'timeseries',\n                title: 'Row A Child1',\n                key: 'Row A Child1',\n              }),\n            }),\n            new SceneGridItem({\n              x: 0,\n              y: 5,\n              width: 6,\n              height: 5,\n              isResizable: true,\n              isDraggable: true,\n              body: new VizPanel({\n                pluginId: 'timeseries',\n                title: 'Row A Child2',\n                key: 'Row A Child2',\n              }),\n            }),\n          ],\n        }),\n        new SceneGridRow({\n          title: 'Row B - uses global query',\n          key: 'Row B',\n          isCollapsed: true,\n          y: 1,\n          children: [\n            new SceneGridItem({\n              x: 0,\n              y: 2,\n              width: 12,\n              height: 5,\n              isResizable: false,\n              isDraggable: true,\n              body: new VizPanel({\n                pluginId: 'timeseries',\n                title: 'Row B Child1',\n                key: 'Row B Child1',\n              }),\n            }),\n            new SceneGridItem({\n              x: 0,\n              y: 7,\n              width: 6,\n              height: 5,\n              isResizable: false,\n              isDraggable: true,\n              body: new VizPanel({\n                $data: getQueryRunnerWithRandomWalkQuery({ seriesCount: 10 }),\n                pluginId: 'timeseries',\n                title: 'Row B Child2 with data',\n                key: 'Row B Child2',\n              }),\n            }),\n          ],\n        }),\n        new SceneGridItem({\n          x: 0,\n          y: 12,\n          width: 6,\n          height: 10,\n          isResizable: true,\n          isDraggable: true,\n          body: new VizPanel({\n            $data: getQueryRunnerWithRandomWalkQuery({ seriesCount: 10 }),\n            pluginId: 'timeseries',\n            title: 'Outsider, has its own query',\n            key: 'Outsider-own-query',\n          }),\n        }),\n        new SceneGridItem({\n          x: 6,\n          y: 12,\n          width: 12,\n          height: 10,\n          isResizable: true,\n          isDraggable: true,\n          body: new VizPanel({\n            pluginId: 'timeseries',\n            title: 'Outsider, uses global query',\n            key: 'Outsider-global-query',\n          }),\n        }),\n      ],\n    }),\n    $timeRange: new SceneTimeRange(),\n    $data: getQueryRunnerWithRandomWalkQuery(),\n    actions: [new SceneTimePicker({}), new SceneRefreshPicker({})],\n  });\n}\n","import { VariableRefresh } from '@grafana/data';\nimport {\n  SceneCanvasText,\n  SceneTimePicker,\n  SceneFlexLayout,\n  SceneTimeRange,\n  VariableValueSelectors,\n  SceneVariableSet,\n  CustomVariable,\n  DataSourceVariable,\n  QueryVariable,\n  SceneRefreshPicker,\n  SceneFlexItem,\n} from '@grafana/scenes';\n\nimport { DashboardScene } from '../dashboard/DashboardScene';\n\nexport function getQueryVariableDemo(): DashboardScene {\n  return new DashboardScene({\n    title: 'Query variable',\n    $variables: new SceneVariableSet({\n      variables: [\n        new CustomVariable({\n          name: 'metric',\n          query: 'job : job, instance : instance',\n        }),\n        new DataSourceVariable({\n          name: 'datasource',\n          pluginId: 'prometheus',\n        }),\n        new QueryVariable({\n          name: 'instance (using datasource variable)',\n          refresh: VariableRefresh.onTimeRangeChanged,\n          query: { query: 'label_values(go_gc_duration_seconds, ${metric})' },\n          datasource: { uid: '${datasource}' },\n        }),\n        new QueryVariable({\n          name: 'label values (on time range refresh)',\n          refresh: VariableRefresh.onTimeRangeChanged,\n          query: { query: 'label_values(go_gc_duration_seconds, ${metric})' },\n          datasource: { uid: 'gdev-prometheus', type: 'prometheus' },\n        }),\n        new QueryVariable({\n          name: 'legacy (graphite)',\n          refresh: VariableRefresh.onTimeRangeChanged,\n          query: { queryType: 'Default', target: 'stats.response.*' },\n          datasource: { uid: 'gdev-graphite', type: 'graphite' },\n        }),\n      ],\n    }),\n    body: new SceneFlexLayout({\n      direction: 'row',\n      children: [\n        new SceneFlexItem({\n          width: '40%',\n          body: new SceneCanvasText({\n            text: 'metric: ${metric}',\n            fontSize: 20,\n            align: 'center',\n          }),\n        }),\n      ],\n    }),\n    $timeRange: new SceneTimeRange(),\n    actions: [new SceneTimePicker({}), new SceneRefreshPicker({})],\n    controls: [new VariableValueSelectors({})],\n  });\n}\n","import {\n  VizPanel,\n  NestedScene,\n  SceneTimePicker,\n  SceneFlexLayout,\n  SceneTimeRange,\n  SceneRefreshPicker,\n  SceneFlexItem,\n} from '@grafana/scenes';\n\nimport { DashboardScene } from '../dashboard/DashboardScene';\n\nimport { getQueryRunnerWithRandomWalkQuery } from './queries';\n\nexport function getSceneWithRows(): DashboardScene {\n  return new DashboardScene({\n    title: 'Scene with rows',\n    body: new SceneFlexLayout({\n      direction: 'column',\n      children: [\n        new NestedScene({\n          title: 'Overview',\n          canCollapse: true,\n          body: new SceneFlexLayout({\n            direction: 'row',\n            children: [\n              new SceneFlexItem({\n                body: new VizPanel({\n                  pluginId: 'timeseries',\n                  title: 'Fill height',\n                }),\n              }),\n\n              new SceneFlexItem({\n                body: new VizPanel({\n                  pluginId: 'timeseries',\n                  title: 'Fill height',\n                }),\n              }),\n            ],\n          }),\n        }),\n        new NestedScene({\n          title: 'More server details',\n          canCollapse: true,\n          body: new SceneFlexLayout({\n            direction: 'row',\n            children: [\n              new SceneFlexItem({\n                body: new VizPanel({\n                  pluginId: 'timeseries',\n                  title: 'Fill height',\n                }),\n              }),\n              new SceneFlexItem({\n                body: new VizPanel({\n                  pluginId: 'timeseries',\n                  title: 'Fill height',\n                }),\n              }),\n            ],\n          }),\n        }),\n      ],\n    }),\n    $timeRange: new SceneTimeRange(),\n    $data: getQueryRunnerWithRandomWalkQuery(),\n    actions: [new SceneTimePicker({}), new SceneRefreshPicker({})],\n  });\n}\n","import {\n  SceneTimePicker,\n  SceneFlexLayout,\n  VizPanel,\n  SceneDataTransformer,\n  SceneTimeRange,\n  SceneRefreshPicker,\n  SceneFlexItem,\n} from '@grafana/scenes';\n\nimport { DashboardScene } from '../dashboard/DashboardScene';\n\nimport { getQueryRunnerWithRandomWalkQuery } from './queries';\n\nexport function getTransformationsDemo(): DashboardScene {\n  return new DashboardScene({\n    title: 'Transformations demo',\n    body: new SceneFlexLayout({\n      direction: 'row',\n      children: [\n        new SceneFlexItem({\n          body: new SceneFlexLayout({\n            direction: 'column',\n            children: [\n              new SceneFlexItem({\n                body: new SceneFlexLayout({\n                  direction: 'row',\n                  children: [\n                    new SceneFlexItem({\n                      body: new VizPanel({\n                        pluginId: 'timeseries',\n                        title: 'Source data (global query',\n                      }),\n                    }),\n                    new SceneFlexItem({\n                      body: new VizPanel({\n                        pluginId: 'stat',\n                        title: 'Transformed data',\n                        $data: new SceneDataTransformer({\n                          transformations: [\n                            {\n                              id: 'reduce',\n                              options: {\n                                reducers: ['last', 'mean'],\n                              },\n                            },\n                          ],\n                        }),\n                      }),\n                    }),\n                  ],\n                }),\n              }),\n              new SceneFlexItem({\n                body: new VizPanel({\n                  $data: new SceneDataTransformer({\n                    $data: getQueryRunnerWithRandomWalkQuery(),\n                    transformations: [\n                      {\n                        id: 'reduce',\n                        options: {\n                          reducers: ['mean'],\n                        },\n                      },\n                    ],\n                  }),\n\n                  pluginId: 'stat',\n                  title: 'Query with predefined transformations',\n                }),\n              }),\n            ],\n          }),\n        }),\n      ],\n    }),\n    $timeRange: new SceneTimeRange(),\n    $data: getQueryRunnerWithRandomWalkQuery(),\n    actions: [new SceneTimePicker({}), new SceneRefreshPicker({})],\n  });\n}\n","import {\n  VizPanel,\n  SceneCanvasText,\n  SceneTimePicker,\n  SceneFlexLayout,\n  SceneTimeRange,\n  VariableValueSelectors,\n  SceneVariableSet,\n  CustomVariable,\n  DataSourceVariable,\n  TestVariable,\n  NestedScene,\n  SceneRefreshPicker,\n  TextBoxVariable,\n  SceneFlexItem,\n} from '@grafana/scenes';\n\nimport { DashboardScene } from '../dashboard/DashboardScene';\n\nimport { getQueryRunnerWithRandomWalkQuery } from './queries';\n\nexport function getVariablesDemo(): DashboardScene {\n  return new DashboardScene({\n    title: 'Variables',\n    $variables: new SceneVariableSet({\n      variables: [\n        new TestVariable({\n          name: 'server',\n          query: 'A.*',\n          value: 'server',\n          text: '',\n          delayMs: 1000,\n          options: [],\n        }),\n        new TestVariable({\n          name: 'pod',\n          query: 'A.$server.*',\n          value: 'pod',\n          delayMs: 1000,\n          isMulti: true,\n          text: '',\n          options: [],\n        }),\n        new TestVariable({\n          name: 'handler',\n          query: 'A.$server.$pod.*',\n          value: 'handler',\n          delayMs: 1000,\n          //isMulti: true,\n          text: '',\n          options: [],\n        }),\n        new CustomVariable({\n          name: 'custom',\n          query: 'A : 10,B : 20',\n        }),\n        new DataSourceVariable({\n          name: 'ds',\n          pluginId: 'testdata',\n        }),\n        new TextBoxVariable({\n          name: 'textbox',\n          value: 'default value',\n        }),\n      ],\n    }),\n    body: new SceneFlexLayout({\n      direction: 'row',\n      children: [\n        new SceneFlexItem({\n          body: new SceneFlexLayout({\n            direction: 'column',\n            children: [\n              new SceneFlexItem({\n                body: new SceneFlexLayout({\n                  children: [\n                    new SceneFlexItem({\n                      body: new VizPanel({\n                        pluginId: 'timeseries',\n                        title: 'handler: $handler',\n                        $data: getQueryRunnerWithRandomWalkQuery({\n                          alias: 'handler: $handler',\n                        }),\n                      }),\n                    }),\n                    new SceneFlexItem({\n                      body: new SceneCanvasText({\n                        text: 'Text: ${textbox}',\n                        fontSize: 20,\n                        align: 'center',\n                      }),\n                    }),\n                    new SceneFlexItem({\n                      width: '40%',\n                      body: new SceneCanvasText({\n                        text: 'server: ${server} pod:${pod}',\n                        fontSize: 20,\n                        align: 'center',\n                      }),\n                    }),\n                  ],\n                }),\n              }),\n              new SceneFlexItem({\n                body: new NestedScene({\n                  title: 'Collapsable inner scene',\n                  canCollapse: true,\n                  body: new SceneFlexLayout({\n                    direction: 'row',\n                    children: [\n                      new SceneFlexItem({\n                        body: new VizPanel({\n                          pluginId: 'timeseries',\n                          title: 'handler: $handler',\n                          $data: getQueryRunnerWithRandomWalkQuery({\n                            alias: 'handler: $handler',\n                          }),\n                        }),\n                      }),\n                    ],\n                  }),\n                }),\n              }),\n            ],\n          }),\n        }),\n      ],\n    }),\n    $timeRange: new SceneTimeRange(),\n    actions: [new SceneTimePicker({}), new SceneRefreshPicker({})],\n    controls: [new VariableValueSelectors({})],\n  });\n}\n\nexport function getVariablesDemoWithAll(): DashboardScene {\n  return new DashboardScene({\n    title: 'Variables with All values',\n    $variables: new SceneVariableSet({\n      variables: [\n        new TestVariable({\n          name: 'server',\n          query: 'A.*',\n          value: 'AA',\n          text: 'AA',\n          includeAll: true,\n          defaultToAll: true,\n          delayMs: 1000,\n          options: [],\n        }),\n        new TestVariable({\n          name: 'pod',\n          query: 'A.$server.*',\n          value: [],\n          delayMs: 1000,\n          isMulti: true,\n          includeAll: true,\n          defaultToAll: true,\n          text: '',\n          options: [],\n        }),\n        new TestVariable({\n          name: 'handler',\n          query: 'A.$server.$pod.*',\n          value: [],\n          delayMs: 1000,\n          includeAll: true,\n          defaultToAll: false,\n          isMulti: true,\n          text: '',\n          options: [],\n        }),\n      ],\n    }),\n    body: new SceneFlexLayout({\n      direction: 'row',\n      children: [\n        new SceneFlexItem({\n          body: new VizPanel({\n            pluginId: 'timeseries',\n            title: 'handler: $handler',\n            $data: getQueryRunnerWithRandomWalkQuery({\n              alias: 'handler: $handler',\n            }),\n          }),\n        }),\n        new SceneFlexItem({\n          width: '40%',\n          body: new SceneCanvasText({\n            text: 'server: ${server} pod:${pod}',\n            fontSize: 20,\n            align: 'center',\n          }),\n        }),\n      ],\n    }),\n    $timeRange: new SceneTimeRange(),\n    actions: [new SceneTimePicker({}), new SceneRefreshPicker({})],\n    controls: [new VariableValueSelectors({})],\n  });\n}\n","import { DashboardScene } from '../dashboard/DashboardScene';\n\nimport { getGridWithMultipleTimeRanges } from './gridMultiTimeRange';\nimport { getMultipleGridLayoutTest } from './gridMultiple';\nimport { getGridWithMultipleData } from './gridWithMultipleData';\nimport { getQueryVariableDemo } from './queryVariableDemo';\nimport { getSceneWithRows } from './sceneWithRows';\nimport { getTransformationsDemo } from './transformations';\nimport { getVariablesDemo, getVariablesDemoWithAll } from './variablesDemo';\n\ninterface SceneDef {\n  title: string;\n  getScene: () => DashboardScene;\n}\nexport function getScenes(): SceneDef[] {\n  return [\n    { title: 'Scene with rows', getScene: getSceneWithRows },\n    { title: 'Grid with rows and different queries', getScene: getGridWithMultipleData },\n    { title: 'Grid with rows and different queries and time ranges', getScene: getGridWithMultipleTimeRanges },\n    { title: 'Multiple grid layouts test', getScene: getMultipleGridLayoutTest },\n    { title: 'Variables', getScene: getVariablesDemo },\n    { title: 'Variables with All values', getScene: getVariablesDemoWithAll },\n    { title: 'Query variable', getScene: getQueryVariableDemo },\n    { title: 'Transformations demo', getScene: getTransformationsDemo },\n  ];\n}\n\nconst cache: Record<string, DashboardScene> = {};\n\nexport function getSceneByTitle(title: string) {\n  if (cache[title]) {\n    return cache[title];\n  }\n\n  const scene = getScenes().find((x) => x.title === title);\n\n  if (scene) {\n    cache[title] = scene.getScene();\n  }\n\n  return cache[title];\n}\n","// Code generated - EDITING IS FUTILE. DO NOT EDIT.\n//\n// Generated by:\n//     public/app/plugins/gen.go\n// Using jennies:\n//     TSTypesJenny\n//     PluginTSTypesJenny\n//\n// Run 'make gen-cue' from repository root to regenerate.\n\nimport * as common from '@grafana/schema';\n\nexport const DataQueryModelVersion = Object.freeze([0, 0]);\n\nexport enum TestDataQueryType {\n  Annotations = 'annotations',\n  Arrow = 'arrow',\n  CSVContent = 'csv_content',\n  CSVFile = 'csv_file',\n  CSVMetricValues = 'csv_metric_values',\n  DataPointsOutsideRange = 'datapoints_outside_range',\n  ExponentialHeatmapBucketData = 'exponential_heatmap_bucket_data',\n  FlameGraph = 'flame_graph',\n  GrafanaAPI = 'grafana_api',\n  LinearHeatmapBucketData = 'linear_heatmap_bucket_data',\n  Live = 'live',\n  Logs = 'logs',\n  ManualEntry = 'manual_entry',\n  NoDataPoints = 'no_data_points',\n  NodeGraph = 'node_graph',\n  PredictableCSVWave = 'predictable_csv_wave',\n  PredictablePulse = 'predictable_pulse',\n  RandomWalk = 'random_walk',\n  RandomWalkTable = 'random_walk_table',\n  RandomWalkWithError = 'random_walk_with_error',\n  RawFrame = 'raw_frame',\n  ServerError500 = 'server_error_500',\n  Simulation = 'simulation',\n  SlowQuery = 'slow_query',\n  StreamingClient = 'streaming_client',\n  TableStatic = 'table_static',\n  Trace = 'trace',\n  USA = 'usa',\n  VariablesQuery = 'variables-query',\n}\n\nexport interface StreamingQuery {\n  bands?: number;\n  noise: number;\n  speed: number;\n  spread: number;\n  type: ('signal' | 'logs' | 'fetch');\n  url?: string;\n}\n\nexport interface PulseWaveQuery {\n  offCount?: number;\n  offValue?: number;\n  onCount?: number;\n  onValue?: number;\n  timeStep?: number;\n}\n\nexport interface SimulationQuery {\n  config?: Record<string, unknown>;\n  key: {\n    type: string;\n    tick: number;\n    uid?: string;\n  };\n  last?: boolean;\n  stream?: boolean;\n}\n\nexport interface NodesQuery {\n  count?: number;\n  type?: ('random' | 'response' | 'random edges');\n}\n\nexport interface USAQuery {\n  fields?: Array<string>;\n  mode?: string;\n  period?: string;\n  states?: Array<string>;\n}\n\nexport const defaultUSAQuery: Partial<USAQuery> = {\n  fields: [],\n  states: [],\n};\n\nexport interface CSVWave {\n  labels?: string;\n  name?: string;\n  timeStep?: number;\n  valuesCSV?: string;\n}\n\n/**\n * TODO: Should this live here given it's not used in the dataquery?\n */\nexport interface Scenario {\n  description?: string;\n  hideAliasField?: boolean;\n  id: string;\n  name: string;\n  stringInput: string;\n}\n\nexport interface TestData extends common.DataQuery {\n  alias?: string;\n  channel?: string;\n  csvContent?: string;\n  csvFileName?: string;\n  csvWave?: Array<CSVWave>;\n  errorType?: ('server_panic' | 'frontend_exception' | 'frontend_observable');\n  labels?: string;\n  levelColumn?: boolean;\n  lines?: number;\n  nodes?: NodesQuery;\n  points?: Array<Array<(string | number)>>;\n  pulseWave?: PulseWaveQuery;\n  rawFrameContent?: string;\n  scenarioId?: TestDataQueryType;\n  seriesCount?: number;\n  sim?: SimulationQuery;\n  spanCount?: number;\n  stream?: StreamingQuery;\n  stringInput?: string;\n  usa?: USAQuery;\n}\n\nexport const defaultTestData: Partial<TestData> = {\n  csvWave: [],\n  points: [],\n  scenarioId: TestDataQueryType.RandomWalk,\n};\n"],"names":["SceneListPage","scenes","results","scene","dash","ScenePage","props","isInitialized","setInitialized","SceneRadioToggle","value","model","options","RadioButtonGroup","SceneSearchBox","evt","Input","getTableFilterTransform","query","regex","getTimeSeriesFilterTransform","source","map","data","frame","useAppQueryParams","location","getLinkUrlWithAppUrlState","path","params","url","getHttpHandlerListScene","searchBox","httpHandlerQueries","getInstantQuery","httpHandlerQueriesFiltered","sub","state","httpHandlersTable","reqDurationTimeSeries","reqDurationTimeSeriesFiltered","graphsScene","frameIndex","layout","sceneToggle","getVariablesDefinitions","getHandlerDetailsScene","handler","getTimeSeriesQuery","reqCountTimeSeries","getOverviewScene","getInstantStatPanel","title","getHandlerLogsScene","logsQuery","getOverviewLogsScene","GrafanaMonitoringApp","appScene","getMainPageScene","sectionNav","usePageNav","pluginContext","PluginPageContext","getHandlerDrilldownPage","match","parent","baseUrl","getSecondLevelDrilldown","secondLevel","DashboardScene","DashboardSceneRenderer","body","actions","uid","controls","styles","getStyles","toolbarActions","action","pageToolbar","control","theme","getVizPanelKeyForPanelId","panelId","activateFullSceneTree","deactivationHandlers","child","ShareQueryDataProvider","keyToFind","findObjectInScene","sourceData","check","found","maybe","DashboardLoader","StateManagerBase","fromCache","rsp","err","oldModel","dashboard","createDashboardSceneFromDashboardModel","createSceneObjectsForPanels","oldPanels","panels","currentRow","currentRowPanels","panel","createVizPanelFromPanelModel","panelObject","variables","variableObjects","v","createSceneVariableFromVariableModel","variable","commonProperties","isCustomVariable","isQueryVariable","isDataSourceVariable","isConstantVariable","createPanelDataProvider","dataProvider","loader","getDashboardLoader","DashboardScenePage","isLoading","Page","PageLoader","getQueryRunnerWithRandomWalkQuery","overrides","queryRunnerOverrides","getGridWithMultipleTimeRanges","globalTimeRange","row1TimeRange","getMultipleGridLayoutTest","getGridWithMultipleData","getQueryVariableDemo","getSceneWithRows","getTransformationsDemo","getVariablesDemo","getVariablesDemoWithAll","getScenes","cache","getSceneByTitle","DataQueryModelVersion","TestDataQueryType","defaultUSAQuery","defaultTestData"],"sourceRoot":""}