{"version":3,"sources":["webpack:///./public/app/core/utils/version.ts","webpack:///./public/app/plugins/datasource/graphite/gfunc.ts","webpack:///./public/app/plugins/datasource/graphite/types.ts","webpack:///./public/app/plugins/datasource/graphite/datasource.ts","webpack:///./public/app/plugins/datasource/graphite/add_graphite_func.ts","webpack:///./public/app/plugins/datasource/graphite/func_editor.ts","webpack:///./public/app/plugins/datasource/graphite/lexer.ts","webpack:///./public/app/plugins/datasource/graphite/parser.ts","webpack:///./public/app/plugins/datasource/graphite/graphite_query.ts","webpack:///./public/app/plugins/datasource/graphite/query_ctrl.ts","webpack:///./public/app/plugins/datasource/graphite/configuration/GraphiteDetails.tsx","webpack:///./public/app/plugins/datasource/graphite/configuration/ConfigEditor.tsx","webpack:///./public/app/plugins/datasource/graphite/meta.ts","webpack:///./public/app/plugins/datasource/graphite/MetricTankMetaInspector.tsx","webpack:///./public/app/plugins/datasource/graphite/module.ts"],"names":["versionPattern","SemVersion","version","match","exec","this","major","Number","minor","patch","meta","prototype","isGtOrEq","compared","i","comparable","length","isValid","lodash_default","a","isNumber","get","enumerable","configurable","isVersionGtOrEq","b","version_SemVersion","gfunc_index","addFuncDef","funcDef","params","defaultParams","name","shortName","optionalSeriesRefArgs","type","optional","multiple","isVersionRelatedFunction","obj","graphiteVersion","category","options","fake","FuncInstance","def","withDefaultParams","slice","updateText","render","metricExp","replaceVariables","_this","str","parameters","map","value","index","paramType","last","includes","valueInterpolated","isString","isFinite","toString","pop","unshift","join","_hasMultipleParamsInString","strValue","indexOf","updateParam","each","split","partVal","idx","trim","splice","text","getFuncDef","message","GraphiteType","gfunc","createFuncInstance","gfunc_FuncInstance","getFuncDefs","funcs","forEach","assign","filter","param","rawDefs","funcDefs","funcName","group","description","replace","func","test","required","shift","rawParam","undefined","default","push","suggestions","datasource_GraphiteDatasource","_super","GraphiteDatasource","instanceSettings","backendSrv","templateSrv","call","funcDefsPromise","result","data","series","isArray","s","y","datapoints","frame","Object","src","request","info","basicAuth","url","jsonData","isMetricTank","graphiteType","Metrictank","supportsTags","cacheTimeout","withCredentials","_seriesRefLetters","$inject","tslib_es6","getQueryOptionsInfo","Promise","httpOptions","_a","from","translateTime","rangeRaw","timezone","until","to","targets","format","maxDataPoints","buildGraphiteParams","graphOptions","scopedVars","resolve","method","headers","Content-Type","addTracingHeaders","panelId","doGraphiteRequest","then","convertResponseToDataFrames","dashboardId","parseTags","tagString","tags","interpolateVariablesInQueries","queries","expandedQueries","query","datasource","target","annotationQuery","annotation","graphiteQuery","list","target_1","time","fields","values","title","events","range","results","e","tags_1","when","what","err","reject","targetContainsTemplate","variableExists","date","roundUp","substring","parse","add","subtract","unix","metricFindQuery","optionalOptions","interpolatedQuery","variable","wildcardChar","matches","expressions","exprRegex","limit","getTagValuesAutoComplete","getTagsAutoComplete","requestId","metric","expandable","getTags","tag","id","getTagValues","key","tagPrefix","expr","expression","valuePrefix","getVersion","catch","waitForFuncDefsLoaded","status","parseFuncDefs","console","log","testDatasource","Authorization","inspect","datasourceRequest","targetValue","graphiteOptions","cleanOptions","regex","intervalFormatFixRegex","hasTargets","fixIntervalFormat","refId","nestedSeriesRegexReplacer","g1","hide","encodeURIComponent","graphiteAddFunc","$compile","$scope","elem","ctrl","$input","jquery_js_exposed_default","$button","appendTo","allFunctions","sort","functionMenu","categories","click","sortBy","submenu","createFunctionDropDownMenu","attr","typeahead","source","toLowerCase","find","$apply","addFunction","trigger","show","focus","keyup","toggleClass","val","blur","removeClass","contents","drop","destroy","label","shortDesc","contentElement","document","createElement","__webpack_require__","t","bind","sent","innerHTML","rst2html","drop_default","content","attachment","on","cleanUpDrop","$on","graphiteFuncEditor","paramTemplate","$funcLink","scheduledRelink","paramCountAtLink","cancelBlur","clickFuncParam","paramIndex","$link","$comma","prev","next","select","lookup","paramDef","switchToLink","inputElem","clearTimeout","newValue","html","highlightVariablesAsHtml","setTimeout","relink","targetChanged","hasClass","addClass","inputBlur","inputKeyPress","which","inputKeyDown","style","width","addElementsAndCompile","defParams","clone","lastParam","paramValue","hasValue","linkClass","$paramLink","partial","keypress","$element","process","addTypeahead","children","remove","added","first","handleRemoveFunction","removeFunction","handleMoveLeft","moveFunction","handleMoveRight","directive","core_module","unicodeLetterTable","lexer_i","identifierStartTable","Lexer","input","char","peek","charAt","skip","tokenize","token","scanStringLiteral","scanPunctuator","scanNumericLiteral","scanIdentifier","scanTemplateSequence","pos","code","isHexDigit","readUnicodeEscapeSequence","ch1","ch2","ch3","ch4","isUnicodeLetter","parseInt","getIdentifierStart","chr","charCodeAt","getIdentifierPart","identifierPartTable","bad","isDecimalDigit","isOctalDigit","isIdentifierStart","ch","isMalformed","base","isPunctuator","quote","isUnclosed","Parser","lexer","lexer_Lexer","tokens","getAst","start","functionCall","metricExpression","curlyBraceSegment","curlySegment","consumeToken","errorMark","metricSegment","curly","parts","node","segments","segment","functionParameters","boolExpression","numericLiteral","seriesRefExpression","stringLiteral","concat","parseFloat","currentToken","matchToken","token1","token2","GraphiteQuery","parseTarget","removeTagValue","functions","seriesByTagUsed","error","textEditor","astNode","parser_Parser","parseTargetRecursive","checkOtherSegmentsIndex","getSegmentPathUpTo","arr","reduce","innerFunc_1","hidden","splitSeriesByTagParams","getSeriesByTagFuncIndex","addFunctionParameter","updateSegmentValue","addSelectMetricSegment","newFunc","without","offset","move","updateModelTarget","metricPath","_b","_c","done","return","e_1","updateRenderedTarget","targetsByRefId","keyBy","nestedSeriesRefRegex","targetWithNestedQueries","count","refCount","countTargetRefs","updated","targetFull","flatten","tagPattern","operator","findIndex","getSeriesByTagFunc","seriesByTagFuncIndex","addTag","newTagParam","renderTagString","removeTag","updateTag","tagIndex","renderTagExpressions","excludeIndex","compact","tagExpr","app_events","GRAPHITE_TAG_OPERATORS","TAG_PREFIX","GraphiteQueryCtrl","$injector","uiSegmentSrv","$timeout","paused","queryModel","graphite_query","buildSegments","toggleEditorMode","modifyLastSegment","newSegment","checkOtherSegments","fixTagSegments","newSelectMetric","fromIndex","path","emit","alertError","setSegmentFocus","segmentIndex","getAltSegments","prefix","panelCtrl","altSegments","eachRight","panel","variables","removeTaggedEntry","addAltTagSegments","getTagsAsSegments","tagSegments","apply","segmentValueChanged","pause","addSeriesByTagFunc","spliceSegments","emptySegments","targetTextChanged","refresh","oldTarget","smartlyHandleNewAliasByNode","tagParam","getAllTags","altTags","mapToDropdownOptions","tagExpressions","getTagOperators","getAllTagValues","tagKey","altValues","tagChanged","addNewTag","newTag","addTagSegments","newPlusButton","showDelimiter","unpause","getCollapsedText","templateUrl","grafana_ui_src","graphiteVersions","graphiteTypes","keys","GraphiteDetails","props","onChangeHandler","onChange","state","showMetricTankHelp","item","react_default","Fragment","className","tooltip","currentVersion","marginLeft","marginTop","variant","size","onClick","setState","prevState","href","react","toInteger","toBooleanOrTimestamp","MetricTankMetaInspector","arguments","spec","vals","interval","retention","chunkspan","buckets","row","numchunks","ready","JSON","stringify","custom","d","__webpack_exports__","module_plugin","AnnotationsQueryCtrl","defaultUrl","dataSourceConfig","onOptionsChange","GraphiteDetails_GraphiteDetails"],"mappings":"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","file":"graphitePlugin.4d0490a94b199a11f40c.js","sourcesContent":["import _ from 'lodash';\n\nconst versionPattern = /^(\\d+)(?:\\.(\\d+))?(?:\\.(\\d+))?(?:-([0-9A-Za-z\\.]+))?/;\n\nexport class SemVersion {\n  major: number;\n  minor: number;\n  patch: number;\n  meta: string;\n\n  constructor(version: string) {\n    const match = versionPattern.exec(version);\n    if (match) {\n      this.major = Number(match[1]);\n      this.minor = Number(match[2] || 0);\n      this.patch = Number(match[3] || 0);\n      this.meta = match[4];\n    }\n  }\n\n  isGtOrEq(version: string): boolean {\n    const compared = new SemVersion(version);\n\n    for (let i = 0; i < this.comparable.length; ++i) {\n      if (this.comparable[i] > compared.comparable[i]) {\n        return true;\n      }\n      if (this.comparable[i] < compared.comparable[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  isValid(): boolean {\n    return _.isNumber(this.major);\n  }\n\n  get comparable() {\n    return [this.major, this.minor, this.patch];\n  }\n}\n\nexport function isVersionGtOrEq(a: string, b: string): boolean {\n  const aSemver = new SemVersion(a);\n  return aSemver.isGtOrEq(b);\n}\n","import _ from 'lodash';\nimport { isVersionGtOrEq } from 'app/core/utils/version';\nimport { InterpolateFunction } from '@grafana/data';\n\nconst index: any = {};\n\nexport interface FuncDef {\n  name: any;\n  category?: string;\n  params?: any;\n  defaultParams?: any;\n  shortName?: any;\n  fake?: boolean;\n  version?: string;\n  description?: string;\n}\n\nfunction addFuncDef(funcDef: FuncDef) {\n  funcDef.params = funcDef.params || [];\n  funcDef.defaultParams = funcDef.defaultParams || [];\n\n  index[funcDef.name] = funcDef;\n  if (funcDef.shortName) {\n    index[funcDef.shortName] = funcDef;\n  }\n}\n\nconst optionalSeriesRefArgs = [{ name: 'other', type: 'value_or_series', optional: true, multiple: true }];\n\naddFuncDef({\n  name: 'scaleToSeconds',\n  category: 'Transform',\n  params: [{ name: 'seconds', type: 'int' }],\n  defaultParams: [1],\n});\n\naddFuncDef({\n  name: 'perSecond',\n  category: 'Transform',\n  params: [{ name: 'max value', type: 'int', optional: true }],\n  defaultParams: [],\n});\n\naddFuncDef({\n  name: 'holtWintersForecast',\n  category: 'Calculate',\n});\n\naddFuncDef({\n  name: 'holtWintersConfidenceBands',\n  category: 'Calculate',\n  params: [{ name: 'delta', type: 'int' }],\n  defaultParams: [3],\n});\n\naddFuncDef({\n  name: 'holtWintersAberration',\n  category: 'Calculate',\n  params: [{ name: 'delta', type: 'int' }],\n  defaultParams: [3],\n});\n\naddFuncDef({\n  name: 'nPercentile',\n  category: 'Calculate',\n  params: [{ name: 'Nth percentile', type: 'int' }],\n  defaultParams: [95],\n});\n\naddFuncDef({\n  name: 'diffSeries',\n  params: optionalSeriesRefArgs,\n  defaultParams: ['#A'],\n  category: 'Combine',\n});\n\naddFuncDef({\n  name: 'stddevSeries',\n  params: optionalSeriesRefArgs,\n  defaultParams: [''],\n  category: 'Combine',\n});\n\naddFuncDef({\n  name: 'divideSeries',\n  params: optionalSeriesRefArgs,\n  defaultParams: ['#A'],\n  category: 'Combine',\n});\n\naddFuncDef({\n  name: 'multiplySeries',\n  params: optionalSeriesRefArgs,\n  defaultParams: ['#A'],\n  category: 'Combine',\n});\n\naddFuncDef({\n  name: 'asPercent',\n  params: optionalSeriesRefArgs,\n  defaultParams: ['#A'],\n  category: 'Combine',\n});\n\naddFuncDef({\n  name: 'group',\n  params: optionalSeriesRefArgs,\n  defaultParams: ['#A', '#B'],\n  category: 'Combine',\n});\n\naddFuncDef({\n  name: 'sumSeries',\n  shortName: 'sum',\n  category: 'Combine',\n  params: optionalSeriesRefArgs,\n  defaultParams: [''],\n});\n\naddFuncDef({\n  name: 'averageSeries',\n  shortName: 'avg',\n  category: 'Combine',\n  params: optionalSeriesRefArgs,\n  defaultParams: [''],\n});\n\naddFuncDef({\n  name: 'rangeOfSeries',\n  category: 'Combine',\n});\n\naddFuncDef({\n  name: 'percentileOfSeries',\n  category: 'Combine',\n  params: [\n    { name: 'n', type: 'int' },\n    { name: 'interpolate', type: 'boolean', options: ['true', 'false'] },\n  ],\n  defaultParams: [95, 'false'],\n});\n\naddFuncDef({\n  name: 'sumSeriesWithWildcards',\n  category: 'Combine',\n  params: [{ name: 'node', type: 'int', multiple: true }],\n  defaultParams: [3],\n});\n\naddFuncDef({\n  name: 'maxSeries',\n  shortName: 'max',\n  category: 'Combine',\n});\n\naddFuncDef({\n  name: 'minSeries',\n  shortName: 'min',\n  category: 'Combine',\n});\n\naddFuncDef({\n  name: 'averageSeriesWithWildcards',\n  category: 'Combine',\n  params: [{ name: 'node', type: 'int', multiple: true }],\n  defaultParams: [3],\n});\n\naddFuncDef({\n  name: 'alias',\n  category: 'Alias',\n  params: [{ name: 'alias', type: 'string' }],\n  defaultParams: ['alias'],\n});\n\naddFuncDef({\n  name: 'aliasSub',\n  category: 'Alias',\n  params: [\n    { name: 'search', type: 'string' },\n    { name: 'replace', type: 'string' },\n  ],\n  defaultParams: ['', '\\\\1'],\n});\n\naddFuncDef({\n  name: 'consolidateBy',\n  category: 'Special',\n  params: [\n    {\n      name: 'function',\n      type: 'string',\n      options: ['sum', 'average', 'min', 'max'],\n    },\n  ],\n  defaultParams: ['max'],\n});\n\naddFuncDef({\n  name: 'cumulative',\n  category: 'Special',\n  params: [],\n  defaultParams: [],\n});\n\naddFuncDef({\n  name: 'groupByNode',\n  category: 'Combine',\n  params: [\n    {\n      name: 'node',\n      type: 'int',\n      options: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12],\n    },\n    {\n      name: 'function',\n      type: 'string',\n      options: ['sum', 'avg', 'maxSeries'],\n    },\n  ],\n  defaultParams: [3, 'sum'],\n});\n\naddFuncDef({\n  name: 'aliasByNode',\n  category: 'Alias',\n  params: [\n    {\n      name: 'node',\n      type: 'int',\n      options: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12],\n      multiple: true,\n    },\n  ],\n  defaultParams: [3],\n});\n\naddFuncDef({\n  name: 'substr',\n  category: 'Special',\n  params: [\n    {\n      name: 'start',\n      type: 'int',\n      options: [-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12],\n    },\n    {\n      name: 'stop',\n      type: 'int',\n      options: [-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12],\n    },\n  ],\n  defaultParams: [0, 0],\n});\n\naddFuncDef({\n  name: 'sortByName',\n  category: 'Sorting',\n  params: [\n    {\n      name: 'natural',\n      type: 'boolean',\n      options: ['true', 'false'],\n      optional: true,\n    },\n  ],\n  defaultParams: ['false'],\n});\n\naddFuncDef({\n  name: 'sortByMaxima',\n  category: 'Sorting',\n});\n\naddFuncDef({\n  name: 'sortByMinima',\n  category: 'Sorting',\n});\n\naddFuncDef({\n  name: 'sortByTotal',\n  category: 'Sorting',\n});\n\naddFuncDef({\n  name: 'aliasByMetric',\n  category: 'Alias',\n});\n\naddFuncDef({\n  name: 'randomWalk',\n  fake: true,\n  category: 'Special',\n  params: [{ name: 'name', type: 'string' }],\n  defaultParams: ['randomWalk'],\n});\n\naddFuncDef({\n  name: 'countSeries',\n  category: 'Combine',\n});\n\naddFuncDef({\n  name: 'constantLine',\n  category: 'Special',\n  params: [{ name: 'value', type: 'int' }],\n  defaultParams: [10],\n});\n\naddFuncDef({\n  name: 'cactiStyle',\n  category: 'Special',\n});\n\naddFuncDef({\n  name: 'keepLastValue',\n  category: 'Transform',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [100],\n});\n\naddFuncDef({\n  name: 'changed',\n  category: 'Special',\n  params: [],\n  defaultParams: [],\n});\n\naddFuncDef({\n  name: 'scale',\n  category: 'Transform',\n  params: [{ name: 'factor', type: 'int' }],\n  defaultParams: [1],\n});\n\naddFuncDef({\n  name: 'offset',\n  category: 'Transform',\n  params: [{ name: 'amount', type: 'int' }],\n  defaultParams: [10],\n});\n\naddFuncDef({\n  name: 'transformNull',\n  category: 'Transform',\n  params: [{ name: 'amount', type: 'int' }],\n  defaultParams: [0],\n});\n\naddFuncDef({\n  name: 'integral',\n  category: 'Transform',\n});\n\naddFuncDef({\n  name: 'derivative',\n  category: 'Transform',\n});\n\naddFuncDef({\n  name: 'nonNegativeDerivative',\n  category: 'Transform',\n  params: [{ name: 'max value or 0', type: 'int', optional: true }],\n  defaultParams: [''],\n});\n\naddFuncDef({\n  name: 'timeShift',\n  category: 'Transform',\n  params: [\n    {\n      name: 'amount',\n      type: 'select',\n      options: ['1h', '6h', '12h', '1d', '2d', '7d', '14d', '30d'],\n    },\n  ],\n  defaultParams: ['1d'],\n});\n\naddFuncDef({\n  name: 'timeStack',\n  category: 'Transform',\n  params: [\n    {\n      name: 'timeShiftUnit',\n      type: 'select',\n      options: ['1h', '6h', '12h', '1d', '2d', '7d', '14d', '30d'],\n    },\n    { name: 'timeShiftStart', type: 'int' },\n    { name: 'timeShiftEnd', type: 'int' },\n  ],\n  defaultParams: ['1d', 0, 7],\n});\n\naddFuncDef({\n  name: 'summarize',\n  category: 'Transform',\n  params: [\n    { name: 'interval', type: 'string' },\n    {\n      name: 'func',\n      type: 'select',\n      options: ['sum', 'avg', 'min', 'max', 'last'],\n    },\n    {\n      name: 'alignToFrom',\n      type: 'boolean',\n      optional: true,\n      options: ['false', 'true'],\n    },\n  ],\n  defaultParams: ['1h', 'sum', 'false'],\n});\n\naddFuncDef({\n  name: 'smartSummarize',\n  category: 'Transform',\n  params: [\n    { name: 'interval', type: 'string' },\n    {\n      name: 'func',\n      type: 'select',\n      options: ['sum', 'avg', 'min', 'max', 'last'],\n    },\n  ],\n  defaultParams: ['1h', 'sum'],\n});\n\naddFuncDef({\n  name: 'absolute',\n  category: 'Transform',\n});\n\naddFuncDef({\n  name: 'hitcount',\n  category: 'Transform',\n  params: [{ name: 'interval', type: 'string' }],\n  defaultParams: ['10s'],\n});\n\naddFuncDef({\n  name: 'log',\n  category: 'Transform',\n  params: [{ name: 'base', type: 'int' }],\n  defaultParams: ['10'],\n});\n\naddFuncDef({\n  name: 'averageAbove',\n  category: 'Filter Series',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [25],\n});\n\naddFuncDef({\n  name: 'averageBelow',\n  category: 'Filter Series',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [25],\n});\n\naddFuncDef({\n  name: 'currentAbove',\n  category: 'Filter Series',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [25],\n});\n\naddFuncDef({\n  name: 'currentBelow',\n  category: 'Filter Series',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [25],\n});\n\naddFuncDef({\n  name: 'maximumAbove',\n  category: 'Filter Series',\n  params: [{ name: 'value', type: 'int' }],\n  defaultParams: [0],\n});\n\naddFuncDef({\n  name: 'maximumBelow',\n  category: 'Filter Series',\n  params: [{ name: 'value', type: 'int' }],\n  defaultParams: [0],\n});\n\naddFuncDef({\n  name: 'minimumAbove',\n  category: 'Filter Series',\n  params: [{ name: 'value', type: 'int' }],\n  defaultParams: [0],\n});\n\naddFuncDef({\n  name: 'minimumBelow',\n  category: 'Filter Series',\n  params: [{ name: 'value', type: 'int' }],\n  defaultParams: [0],\n});\n\naddFuncDef({\n  name: 'limit',\n  category: 'Filter Series',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [5],\n});\n\naddFuncDef({\n  name: 'mostDeviant',\n  category: 'Filter Series',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [10],\n});\n\naddFuncDef({\n  name: 'exclude',\n  category: 'Filter Series',\n  params: [{ name: 'exclude', type: 'string' }],\n  defaultParams: ['exclude'],\n});\n\naddFuncDef({\n  name: 'highestCurrent',\n  category: 'Filter Series',\n  params: [{ name: 'count', type: 'int' }],\n  defaultParams: [5],\n});\n\naddFuncDef({\n  name: 'highestMax',\n  category: 'Filter Series',\n  params: [{ name: 'count', type: 'int' }],\n  defaultParams: [5],\n});\n\naddFuncDef({\n  name: 'lowestCurrent',\n  category: 'Filter Series',\n  params: [{ name: 'count', type: 'int' }],\n  defaultParams: [5],\n});\n\naddFuncDef({\n  name: 'movingAverage',\n  category: 'Calculate',\n  params: [\n    {\n      name: 'windowSize',\n      type: 'int_or_interval',\n      options: ['5', '7', '10', '5min', '10min', '30min', '1hour'],\n    },\n  ],\n  defaultParams: [10],\n});\n\naddFuncDef({\n  name: 'movingMedian',\n  category: 'Calculate',\n  params: [\n    {\n      name: 'windowSize',\n      type: 'int_or_interval',\n      options: ['5', '7', '10', '5min', '10min', '30min', '1hour'],\n    },\n  ],\n  defaultParams: ['5'],\n});\n\naddFuncDef({\n  name: 'stdev',\n  category: 'Calculate',\n  params: [\n    { name: 'n', type: 'int' },\n    { name: 'tolerance', type: 'int' },\n  ],\n  defaultParams: [5, 0.1],\n});\n\naddFuncDef({\n  name: 'highestAverage',\n  category: 'Filter Series',\n  params: [{ name: 'count', type: 'int' }],\n  defaultParams: [5],\n});\n\naddFuncDef({\n  name: 'lowestAverage',\n  category: 'Filter Series',\n  params: [{ name: 'count', type: 'int' }],\n  defaultParams: [5],\n});\n\naddFuncDef({\n  name: 'removeAbovePercentile',\n  category: 'Filter Data',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [5],\n});\n\naddFuncDef({\n  name: 'removeAboveValue',\n  category: 'Filter Data',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [5],\n});\n\naddFuncDef({\n  name: 'removeBelowPercentile',\n  category: 'Filter Data',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [5],\n});\n\naddFuncDef({\n  name: 'removeBelowValue',\n  category: 'Filter Data',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [5],\n});\n\naddFuncDef({\n  name: 'useSeriesAbove',\n  category: 'Filter Series',\n  params: [\n    { name: 'value', type: 'int' },\n    { name: 'search', type: 'string' },\n    { name: 'replace', type: 'string' },\n  ],\n  defaultParams: [0, 'search', 'replace'],\n});\n\n////////////////////\n// Graphite 1.0.x //\n////////////////////\n\naddFuncDef({\n  name: 'aggregateLine',\n  category: 'Calculate',\n  params: [\n    {\n      name: 'func',\n      type: 'select',\n      options: ['sum', 'avg', 'min', 'max', 'last'],\n    },\n  ],\n  defaultParams: ['avg'],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'averageOutsidePercentile',\n  category: 'Filter Series',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [95],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'delay',\n  category: 'Transform',\n  params: [{ name: 'steps', type: 'int' }],\n  defaultParams: [1],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'exponentialMovingAverage',\n  category: 'Calculate',\n  params: [\n    {\n      name: 'windowSize',\n      type: 'int_or_interval',\n      options: ['5', '7', '10', '5min', '10min', '30min', '1hour'],\n    },\n  ],\n  defaultParams: [10],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'fallbackSeries',\n  category: 'Special',\n  params: [{ name: 'fallback', type: 'string' }],\n  defaultParams: ['constantLine(0)'],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'grep',\n  category: 'Filter Series',\n  params: [{ name: 'grep', type: 'string' }],\n  defaultParams: ['grep'],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'groupByNodes',\n  category: 'Combine',\n  params: [\n    {\n      name: 'function',\n      type: 'string',\n      options: ['sum', 'avg', 'maxSeries'],\n    },\n    {\n      name: 'node',\n      type: 'int',\n      options: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12],\n      multiple: true,\n    },\n  ],\n  defaultParams: ['sum', 3],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'integralByInterval',\n  category: 'Transform',\n  params: [\n    {\n      name: 'intervalUnit',\n      type: 'select',\n      options: ['1h', '6h', '12h', '1d', '2d', '7d', '14d', '30d'],\n    },\n  ],\n  defaultParams: ['1d'],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'interpolate',\n  category: 'Transform',\n  params: [{ name: 'limit', type: 'int', optional: true }],\n  defaultParams: [],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'invert',\n  category: 'Transform',\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'isNonNull',\n  category: 'Combine',\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'linearRegression',\n  category: 'Calculate',\n  params: [\n    {\n      name: 'startSourceAt',\n      type: 'select',\n      options: ['-1h', '-6h', '-12h', '-1d', '-2d', '-7d', '-14d', '-30d'],\n      optional: true,\n    },\n    {\n      name: 'endSourceAt',\n      type: 'select',\n      options: ['-1h', '-6h', '-12h', '-1d', '-2d', '-7d', '-14d', '-30d'],\n      optional: true,\n    },\n  ],\n  defaultParams: [],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'mapSeries',\n  shortName: 'map',\n  params: [{ name: 'node', type: 'int' }],\n  defaultParams: [3],\n  category: 'Combine',\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'movingMin',\n  category: 'Calculate',\n  params: [\n    {\n      name: 'windowSize',\n      type: 'int_or_interval',\n      options: ['5', '7', '10', '5min', '10min', '30min', '1hour'],\n    },\n  ],\n  defaultParams: [10],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'movingMax',\n  category: 'Calculate',\n  params: [\n    {\n      name: 'windowSize',\n      type: 'int_or_interval',\n      options: ['5', '7', '10', '5min', '10min', '30min', '1hour'],\n    },\n  ],\n  defaultParams: [10],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'movingSum',\n  category: 'Calculate',\n  params: [\n    {\n      name: 'windowSize',\n      type: 'int_or_interval',\n      options: ['5', '7', '10', '5min', '10min', '30min', '1hour'],\n    },\n  ],\n  defaultParams: [10],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'multiplySeriesWithWildcards',\n  category: 'Combine',\n  params: [\n    {\n      name: 'position',\n      type: 'int',\n      options: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12],\n      multiple: true,\n    },\n  ],\n  defaultParams: [2],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'offsetToZero',\n  category: 'Transform',\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'pow',\n  category: 'Transform',\n  params: [{ name: 'factor', type: 'int' }],\n  defaultParams: [10],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'powSeries',\n  category: 'Transform',\n  params: optionalSeriesRefArgs,\n  defaultParams: [''],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'reduceSeries',\n  shortName: 'reduce',\n  params: [\n    {\n      name: 'function',\n      type: 'string',\n      options: ['asPercent', 'diffSeries', 'divideSeries'],\n    },\n    {\n      name: 'reduceNode',\n      type: 'int',\n      options: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],\n    },\n    { name: 'reduceMatchers', type: 'string', multiple: true },\n  ],\n  defaultParams: ['asPercent', 2, 'used_bytes'],\n  category: 'Combine',\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'removeBetweenPercentile',\n  category: 'Filter Series',\n  params: [{ name: 'n', type: 'int' }],\n  defaultParams: [95],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'removeEmptySeries',\n  category: 'Filter Series',\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'squareRoot',\n  category: 'Transform',\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'timeSlice',\n  category: 'Transform',\n  params: [\n    {\n      name: 'startSliceAt',\n      type: 'select',\n      options: ['-1h', '-6h', '-12h', '-1d', '-2d', '-7d', '-14d', '-30d'],\n    },\n    {\n      name: 'endSliceAt',\n      type: 'select',\n      options: ['-1h', '-6h', '-12h', '-1d', '-2d', '-7d', '-14d', '-30d'],\n      optional: true,\n    },\n  ],\n  defaultParams: ['-1h'],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'weightedAverage',\n  category: 'Combine',\n  params: [\n    { name: 'other', type: 'value_or_series', optional: true },\n    {\n      name: 'node',\n      type: 'int',\n      options: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12],\n    },\n  ],\n  defaultParams: ['#A', 4],\n  version: '1.0',\n});\n\naddFuncDef({\n  name: 'seriesByTag',\n  category: 'Special',\n  params: [{ name: 'tagExpression', type: 'string', multiple: true }],\n  version: '1.1',\n});\n\naddFuncDef({\n  name: 'groupByTags',\n  category: 'Combine',\n  params: [\n    {\n      name: 'function',\n      type: 'string',\n      options: ['sum', 'avg', 'maxSeries'],\n    },\n    { name: 'tag', type: 'string', multiple: true },\n  ],\n  defaultParams: ['sum', 'tag'],\n  version: '1.1',\n});\n\naddFuncDef({\n  name: 'aliasByTags',\n  category: 'Alias',\n  params: [{ name: 'tag', type: 'string', multiple: true }],\n  defaultParams: ['tag'],\n  version: '1.1',\n});\n\nfunction isVersionRelatedFunction(obj: { version: string }, graphiteVersion: string) {\n  return !obj.version || isVersionGtOrEq(graphiteVersion, obj.version);\n}\n\nexport class FuncInstance {\n  def: any;\n  params: any;\n  text: any;\n  added: boolean;\n\n  constructor(funcDef: any, options: { withDefaultParams: any }) {\n    this.def = funcDef;\n    this.params = [];\n\n    if (options && options.withDefaultParams) {\n      this.params = funcDef.defaultParams.slice(0);\n    }\n\n    this.updateText();\n  }\n\n  render(metricExp: string, replaceVariables: InterpolateFunction): string {\n    const str = this.def.name + '(';\n\n    const parameters = _.map(this.params, (value, index) => {\n      let paramType;\n\n      if (index < this.def.params.length) {\n        paramType = this.def.params[index].type;\n      } else if (_.get(_.last(this.def.params), 'multiple')) {\n        paramType = _.get(_.last(this.def.params), 'type');\n      }\n\n      // param types that should never be quoted\n      if (_.includes(['value_or_series', 'boolean', 'int', 'float', 'node'], paramType)) {\n        return value;\n      }\n\n      const valueInterpolated = _.isString(value) ? replaceVariables(value) : value;\n\n      // param types that might be quoted\n      // To quote variables correctly we need to interpolate it to check if it contains a numeric or string value\n      if (_.includes(['int_or_interval', 'node_or_tag'], paramType) && _.isFinite(+valueInterpolated)) {\n        return _.toString(value);\n      }\n\n      return \"'\" + value + \"'\";\n    });\n\n    // don't send any blank parameters to graphite\n    while (parameters[parameters.length - 1] === '') {\n      parameters.pop();\n    }\n\n    if (metricExp) {\n      parameters.unshift(metricExp);\n    }\n\n    return str + parameters.join(', ') + ')';\n  }\n\n  _hasMultipleParamsInString(strValue: any, index: number) {\n    if (strValue.indexOf(',') === -1) {\n      return false;\n    }\n\n    if (this.def.params[index + 1] && this.def.params[index + 1].optional) {\n      return true;\n    }\n\n    if (index + 1 >= this.def.params.length && _.get(_.last(this.def.params), 'multiple')) {\n      return true;\n    }\n\n    return false;\n  }\n\n  updateParam(strValue: any, index: any) {\n    // handle optional parameters\n    // if string contains ',' and next param is optional, split and update both\n    if (this._hasMultipleParamsInString(strValue, index)) {\n      _.each(strValue.split(','), (partVal, idx) => {\n        this.updateParam(partVal.trim(), index + idx);\n      });\n      return;\n    }\n\n    if (strValue === '' && (index >= this.def.params.length || this.def.params[index].optional)) {\n      this.params.splice(index, 1);\n    } else {\n      this.params[index] = strValue;\n    }\n\n    this.updateText();\n  }\n\n  updateText() {\n    if (this.params.length === 0) {\n      this.text = this.def.name + '()';\n      return;\n    }\n\n    let text = this.def.name + '(';\n    text += this.params.join(', ');\n    text += ')';\n    this.text = text;\n  }\n}\n\nfunction createFuncInstance(funcDef: any, options?: { withDefaultParams: any }, idx?: any) {\n  if (_.isString(funcDef)) {\n    funcDef = getFuncDef(funcDef, idx);\n  }\n  return new FuncInstance(funcDef, options);\n}\n\nfunction getFuncDef(name: string, idx?: any) {\n  if (!(idx || index)[name]) {\n    throw { message: 'Method not found ' + name };\n  }\n  return (idx || index)[name];\n}\n\nfunction getFuncDefs(graphiteVersion: string, idx?: any) {\n  const funcs: any = {};\n  _.forEach(idx || index, funcDef => {\n    if (isVersionRelatedFunction(funcDef, graphiteVersion)) {\n      funcs[funcDef.name] = _.assign({}, funcDef, {\n        params: _.filter(funcDef.params, param => {\n          return isVersionRelatedFunction(param, graphiteVersion);\n        }),\n      });\n    }\n  });\n  return funcs;\n}\n\n// parse response from graphite /functions endpoint into internal format\nfunction parseFuncDefs(rawDefs: any) {\n  const funcDefs: any = {};\n\n  _.forEach(rawDefs || {}, (funcDef, funcName) => {\n    // skip graphite graph functions\n    if (funcDef.group === 'Graph') {\n      return;\n    }\n\n    let description = funcDef.description;\n    if (description) {\n      // tidy up some pydoc syntax that rst2html can't handle\n      description = description\n        .replace(/:py:func:`(.+)( <[^>]*>)?`/g, '``$1``')\n        .replace(/.. seealso:: /g, 'See also: ')\n        .replace(/.. code-block *:: *none/g, '.. code-block::');\n    }\n\n    const func: FuncDef = {\n      name: funcDef.name,\n      description,\n      category: funcDef.group,\n      params: [],\n      defaultParams: [],\n      fake: false,\n    };\n\n    // get rid of the first \"seriesList\" param\n    if (/^seriesLists?$/.test(_.get(funcDef, 'params[0].type', ''))) {\n      // handle functions that accept multiple seriesLists\n      // we leave the param in place but mark it optional, so users can add more series if they wish\n      if (funcDef.params[0].multiple) {\n        funcDef.params[0].required = false;\n        // otherwise chop off the first param, it'll be handled separately\n      } else {\n        funcDef.params.shift();\n      }\n      // tag function as fake\n    } else {\n      func.fake = true;\n    }\n\n    _.forEach(funcDef.params, rawParam => {\n      const param: any = {\n        name: rawParam.name,\n        type: 'string',\n        optional: !rawParam.required,\n        multiple: !!rawParam.multiple,\n        options: undefined,\n      };\n\n      if (rawParam.default !== undefined) {\n        func.defaultParams.push(_.toString(rawParam.default));\n      } else if (rawParam.suggestions) {\n        func.defaultParams.push(_.toString(rawParam.suggestions[0]));\n      } else {\n        func.defaultParams.push('');\n      }\n\n      if (rawParam.type === 'boolean') {\n        param.type = 'boolean';\n        param.options = ['true', 'false'];\n      } else if (rawParam.type === 'integer') {\n        param.type = 'int';\n      } else if (rawParam.type === 'float') {\n        param.type = 'float';\n      } else if (rawParam.type === 'node') {\n        param.type = 'node';\n        param.options = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'];\n      } else if (rawParam.type === 'nodeOrTag') {\n        param.type = 'node_or_tag';\n        param.options = ['name', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'];\n      } else if (rawParam.type === 'intOrInterval') {\n        param.type = 'int_or_interval';\n      } else if (rawParam.type === 'seriesList') {\n        param.type = 'value_or_series';\n      }\n\n      if (rawParam.options) {\n        param.options = _.map(rawParam.options, _.toString);\n      } else if (rawParam.suggestions) {\n        param.options = _.map(rawParam.suggestions, _.toString);\n      }\n\n      func.params.push(param);\n    });\n\n    funcDefs[funcName] = func;\n  });\n\n  return funcDefs;\n}\n\nexport default {\n  createFuncInstance: createFuncInstance,\n  getFuncDef: getFuncDef,\n  getFuncDefs: getFuncDefs,\n  parseFuncDefs: parseFuncDefs,\n};\n","import { DataQuery, DataSourceJsonData } from '@grafana/data';\n\nexport interface GraphiteQuery extends DataQuery {\n  target?: string;\n}\n\nexport interface GraphiteOptions extends DataSourceJsonData {\n  graphiteVersion: string;\n  graphiteType: GraphiteType;\n}\n\nexport enum GraphiteType {\n  Default = 'default',\n  Metrictank = 'metrictank',\n}\n\nexport interface MetricTankRequestMeta {\n  [key: string]: any; // TODO -- fill this with real values from metrictank\n}\n\nexport interface MetricTankResultMeta {\n  'schema-name': string;\n  'schema-retentions': string; //\"1s:35d:20min:5:1542274085,1min:38d:2h:1:true,10min:120d:6h:1:true,2h:2y:6h:2\",\n  'archive-read': number;\n  'archive-interval': number;\n  'aggnum-norm': number;\n  'consolidate-normfetch': string; //\"MaximumConsolidator\",\n  'aggnum-rc': number;\n  'consolidate-rc': string; //\"MaximumConsolidator\",\n  count: number;\n}\n\nexport interface MetricTankMeta {\n  request: MetricTankRequestMeta;\n  info: MetricTankResultMeta[];\n}\n","import _ from 'lodash';\nimport {\n  DataFrame,\n  dateMath,\n  ScopedVars,\n  DataQueryResponse,\n  DataQueryRequest,\n  toDataFrame,\n  DataSourceApi,\n} from '@grafana/data';\nimport { isVersionGtOrEq, SemVersion } from 'app/core/utils/version';\nimport gfunc from './gfunc';\nimport { BackendSrv } from 'app/core/services/backend_srv';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\n//Types\nimport { GraphiteOptions, GraphiteQuery, GraphiteType } from './types';\nimport { getSearchFilterScopedVar } from '../../../features/templating/variable';\n\nexport class GraphiteDatasource extends DataSourceApi<GraphiteQuery, GraphiteOptions> {\n  basicAuth: string;\n  url: string;\n  name: string;\n  graphiteVersion: any;\n  supportsTags: boolean;\n  isMetricTank: boolean;\n  cacheTimeout: any;\n  withCredentials: boolean;\n  funcDefs: any = null;\n  funcDefsPromise: Promise<any> = null;\n  _seriesRefLetters: string;\n\n  /** @ngInject */\n  constructor(instanceSettings: any, private backendSrv: BackendSrv, private templateSrv: TemplateSrv) {\n    super(instanceSettings);\n    this.basicAuth = instanceSettings.basicAuth;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.graphiteVersion = instanceSettings.jsonData.graphiteVersion || '0.9';\n    this.isMetricTank = instanceSettings.jsonData.graphiteType === GraphiteType.Metrictank;\n    this.supportsTags = supportsTags(this.graphiteVersion);\n    this.cacheTimeout = instanceSettings.cacheTimeout;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.funcDefs = null;\n    this.funcDefsPromise = null;\n    this._seriesRefLetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  }\n\n  getQueryOptionsInfo() {\n    return {\n      maxDataPoints: true,\n      cacheTimeout: true,\n      links: [\n        {\n          text: 'Help',\n          url: 'http://docs.grafana.org/features/datasources/graphite/#using-graphite-in-grafana',\n        },\n      ],\n    };\n  }\n\n  async query(options: DataQueryRequest<GraphiteQuery>): Promise<DataQueryResponse> {\n    const graphOptions = {\n      from: this.translateTime(options.rangeRaw.from, false, options.timezone),\n      until: this.translateTime(options.rangeRaw.to, true, options.timezone),\n      targets: options.targets,\n      format: (options as any).format,\n      cacheTimeout: options.cacheTimeout || this.cacheTimeout,\n      maxDataPoints: options.maxDataPoints,\n    };\n\n    const params = this.buildGraphiteParams(graphOptions, options.scopedVars);\n    if (params.length === 0) {\n      return Promise.resolve({ data: [] });\n    }\n\n    if (this.isMetricTank) {\n      params.push('meta=true');\n    }\n\n    const httpOptions: any = {\n      method: 'POST',\n      url: '/render',\n      data: params.join('&'),\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n    };\n\n    this.addTracingHeaders(httpOptions, options);\n\n    if (options.panelId) {\n      httpOptions.requestId = this.name + '.panelId.' + options.panelId;\n    }\n\n    return this.doGraphiteRequest(httpOptions).then(this.convertResponseToDataFrames);\n  }\n\n  addTracingHeaders(httpOptions: { headers: any }, options: { dashboardId: any; panelId: any }) {\n    const proxyMode = !this.url.match(/^http/);\n    if (proxyMode) {\n      httpOptions.headers['X-Dashboard-Id'] = options.dashboardId;\n      httpOptions.headers['X-Panel-Id'] = options.panelId;\n    }\n  }\n\n  convertResponseToDataFrames = (result: any): DataQueryResponse => {\n    const data: DataFrame[] = [];\n    if (!result || !result.data) {\n      return { data };\n    }\n    // Series are either at the root or under a node called 'series'\n    const series = result.data.series || result.data;\n    if (!_.isArray(series)) {\n      throw { message: 'Missing series in result', data: result };\n    }\n\n    for (let i = 0; i < series.length; i++) {\n      const s = series[i];\n      for (let y = 0; y < s.datapoints.length; y++) {\n        s.datapoints[y][1] *= 1000;\n      }\n      const frame = toDataFrame(s);\n\n      // Metrictank metadata\n      if (s.meta) {\n        frame.meta = {\n          datasource: this.name,\n          custom: {\n            request: result.data.meta, // info for the whole request\n            info: s.meta, // Array of metadata\n          },\n        };\n      }\n      data.push(frame);\n    }\n    return { data };\n  };\n\n  parseTags(tagString: string) {\n    let tags: string[] = [];\n    tags = tagString.split(',');\n    if (tags.length === 1) {\n      tags = tagString.split(' ');\n      if (tags[0] === '') {\n        tags = [];\n      }\n    }\n    return tags;\n  }\n\n  interpolateVariablesInQueries(queries: GraphiteQuery[], scopedVars: ScopedVars): GraphiteQuery[] {\n    let expandedQueries = queries;\n    if (queries && queries.length > 0) {\n      expandedQueries = queries.map(query => {\n        const expandedQuery = {\n          ...query,\n          datasource: this.name,\n          target: this.templateSrv.replace(query.target, scopedVars),\n        };\n        return expandedQuery;\n      });\n    }\n    return expandedQueries;\n  }\n\n  annotationQuery(options: any) {\n    // Graphite metric as annotation\n    if (options.annotation.target) {\n      const target = this.templateSrv.replace(options.annotation.target, {}, 'glob');\n      const graphiteQuery = ({\n        rangeRaw: options.rangeRaw,\n        targets: [{ target: target }],\n        format: 'json',\n        maxDataPoints: 100,\n      } as unknown) as DataQueryRequest<GraphiteQuery>;\n\n      return this.query(graphiteQuery).then(result => {\n        const list = [];\n\n        for (let i = 0; i < result.data.length; i++) {\n          const target = result.data[i];\n\n          for (let y = 0; y < target.length; y++) {\n            const time = target.fields[1].values.get(y);\n            const value = target.fields[0].values.get(y);\n\n            if (!value) {\n              continue;\n            }\n\n            list.push({\n              annotation: options.annotation,\n              time,\n              title: target.name,\n            });\n          }\n        }\n\n        return list;\n      });\n    } else {\n      // Graphite event as annotation\n      const tags = this.templateSrv.replace(options.annotation.tags);\n      return this.events({ range: options.rangeRaw, tags: tags }).then((results: any) => {\n        const list = [];\n        for (let i = 0; i < results.data.length; i++) {\n          const e = results.data[i];\n\n          let tags = e.tags;\n          if (_.isString(e.tags)) {\n            tags = this.parseTags(e.tags);\n          }\n\n          list.push({\n            annotation: options.annotation,\n            time: e.when * 1000,\n            title: e.what,\n            tags: tags,\n            text: e.data,\n          });\n        }\n\n        return list;\n      });\n    }\n  }\n\n  events(options: { range: any; tags: any; timezone?: any }) {\n    try {\n      let tags = '';\n      if (options.tags) {\n        tags = '&tags=' + options.tags;\n      }\n      return this.doGraphiteRequest({\n        method: 'GET',\n        url:\n          '/events/get_data?from=' +\n          this.translateTime(options.range.from, false, options.timezone) +\n          '&until=' +\n          this.translateTime(options.range.to, true, options.timezone) +\n          tags,\n      });\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n\n  targetContainsTemplate(target: GraphiteQuery) {\n    return this.templateSrv.variableExists(target.target);\n  }\n\n  translateTime(date: any, roundUp: any, timezone: any) {\n    if (_.isString(date)) {\n      if (date === 'now') {\n        return 'now';\n      } else if (date.indexOf('now-') >= 0 && date.indexOf('/') === -1) {\n        date = date.substring(3);\n        date = date.replace('m', 'min');\n        date = date.replace('M', 'mon');\n        return date;\n      }\n      date = dateMath.parse(date, roundUp, timezone);\n    }\n\n    // graphite' s from filter is exclusive\n    // here we step back one minute in order\n    // to guarantee that we get all the data that\n    // exists for the specified range\n    if (roundUp) {\n      if (date.get('s')) {\n        date.add(1, 's');\n      }\n    } else if (roundUp === false) {\n      if (date.get('s')) {\n        date.subtract(1, 's');\n      }\n    }\n\n    return date.unix();\n  }\n\n  metricFindQuery(query: string, optionalOptions: any) {\n    const options: any = optionalOptions || {};\n    let interpolatedQuery = this.templateSrv.replace(\n      query,\n      getSearchFilterScopedVar({ query, wildcardChar: '', options: optionalOptions })\n    );\n\n    // special handling for tag_values(<tag>[,<expression>]*), this is used for template variables\n    let matches = interpolatedQuery.match(/^tag_values\\(([^,]+)((, *[^,]+)*)\\)$/);\n    if (matches) {\n      const expressions = [];\n      const exprRegex = /, *([^,]+)/g;\n      let match = exprRegex.exec(matches[2]);\n      while (match !== null) {\n        expressions.push(match[1]);\n        match = exprRegex.exec(matches[2]);\n      }\n      options.limit = 10000;\n      return this.getTagValuesAutoComplete(expressions, matches[1], undefined, options);\n    }\n\n    // special handling for tags(<expression>[,<expression>]*), this is used for template variables\n    matches = interpolatedQuery.match(/^tags\\(([^,]*)((, *[^,]+)*)\\)$/);\n    if (matches) {\n      const expressions = [];\n      if (matches[1]) {\n        expressions.push(matches[1]);\n        const exprRegex = /, *([^,]+)/g;\n        let match = exprRegex.exec(matches[2]);\n        while (match !== null) {\n          expressions.push(match[1]);\n          match = exprRegex.exec(matches[2]);\n        }\n      }\n      options.limit = 10000;\n      return this.getTagsAutoComplete(expressions, undefined, options);\n    }\n\n    interpolatedQuery = this.templateSrv.replace(\n      query,\n      getSearchFilterScopedVar({ query, wildcardChar: '*', options: optionalOptions })\n    );\n\n    const httpOptions: any = {\n      method: 'POST',\n      url: '/metrics/find',\n      params: {},\n      data: `query=${interpolatedQuery}`,\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      // for cancellations\n      requestId: options.requestId,\n    };\n\n    if (options.range) {\n      httpOptions.params.from = this.translateTime(options.range.from, false, options.timezone);\n      httpOptions.params.until = this.translateTime(options.range.to, true, options.timezone);\n    }\n\n    return this.doGraphiteRequest(httpOptions).then((results: any) => {\n      return _.map(results.data, metric => {\n        return {\n          text: metric.text,\n          expandable: metric.expandable ? true : false,\n        };\n      });\n    });\n  }\n\n  getTags(optionalOptions: any) {\n    const options = optionalOptions || {};\n\n    const httpOptions: any = {\n      method: 'GET',\n      url: '/tags',\n      // for cancellations\n      requestId: options.requestId,\n    };\n\n    if (options.range) {\n      httpOptions.params.from = this.translateTime(options.range.from, false, options.timezone);\n      httpOptions.params.until = this.translateTime(options.range.to, true, options.timezone);\n    }\n\n    return this.doGraphiteRequest(httpOptions).then((results: any) => {\n      return _.map(results.data, tag => {\n        return {\n          text: tag.tag,\n          id: tag.id,\n        };\n      });\n    });\n  }\n\n  getTagValues(options: any = {}) {\n    const httpOptions: any = {\n      method: 'GET',\n      url: '/tags/' + this.templateSrv.replace(options.key),\n      // for cancellations\n      requestId: options.requestId,\n    };\n\n    if (options.range) {\n      httpOptions.params.from = this.translateTime(options.range.from, false, options.timezone);\n      httpOptions.params.until = this.translateTime(options.range.to, true, options.timezone);\n    }\n\n    return this.doGraphiteRequest(httpOptions).then((results: any) => {\n      if (results.data && results.data.values) {\n        return _.map(results.data.values, value => {\n          return {\n            text: value.value,\n            id: value.id,\n          };\n        });\n      } else {\n        return [];\n      }\n    });\n  }\n\n  getTagsAutoComplete(expressions: any[], tagPrefix: any, optionalOptions: any) {\n    const options = optionalOptions || {};\n\n    const httpOptions: any = {\n      method: 'GET',\n      url: '/tags/autoComplete/tags',\n      params: {\n        expr: _.map(expressions, expression => this.templateSrv.replace((expression || '').trim())),\n      },\n      // for cancellations\n      requestId: options.requestId,\n    };\n\n    if (tagPrefix) {\n      httpOptions.params.tagPrefix = tagPrefix;\n    }\n    if (options.limit) {\n      httpOptions.params.limit = options.limit;\n    }\n    if (options.range) {\n      httpOptions.params.from = this.translateTime(options.range.from, false, options.timezone);\n      httpOptions.params.until = this.translateTime(options.range.to, true, options.timezone);\n    }\n\n    return this.doGraphiteRequest(httpOptions).then((results: any) => {\n      if (results.data) {\n        return _.map(results.data, tag => {\n          return { text: tag };\n        });\n      } else {\n        return [];\n      }\n    });\n  }\n\n  getTagValuesAutoComplete(expressions: any[], tag: any, valuePrefix: any, optionalOptions: any) {\n    const options = optionalOptions || {};\n\n    const httpOptions: any = {\n      method: 'GET',\n      url: '/tags/autoComplete/values',\n      params: {\n        expr: _.map(expressions, expression => this.templateSrv.replace((expression || '').trim())),\n        tag: this.templateSrv.replace((tag || '').trim()),\n      },\n      // for cancellations\n      requestId: options.requestId,\n    };\n\n    if (valuePrefix) {\n      httpOptions.params.valuePrefix = valuePrefix;\n    }\n    if (options.limit) {\n      httpOptions.params.limit = options.limit;\n    }\n    if (options.range) {\n      httpOptions.params.from = this.translateTime(options.range.from, false, options.timezone);\n      httpOptions.params.until = this.translateTime(options.range.to, true, options.timezone);\n    }\n\n    return this.doGraphiteRequest(httpOptions).then((results: any) => {\n      if (results.data) {\n        return _.map(results.data, value => {\n          return { text: value };\n        });\n      } else {\n        return [];\n      }\n    });\n  }\n\n  getVersion(optionalOptions: any) {\n    const options = optionalOptions || {};\n\n    const httpOptions = {\n      method: 'GET',\n      url: '/version',\n      requestId: options.requestId,\n    };\n\n    return this.doGraphiteRequest(httpOptions)\n      .then((results: any) => {\n        if (results.data) {\n          const semver = new SemVersion(results.data);\n          return semver.isValid() ? results.data : '';\n        }\n        return '';\n      })\n      .catch(() => {\n        return '';\n      });\n  }\n\n  createFuncInstance(funcDef: any, options?: any) {\n    return gfunc.createFuncInstance(funcDef, options, this.funcDefs);\n  }\n\n  getFuncDef(name: string) {\n    return gfunc.getFuncDef(name, this.funcDefs);\n  }\n\n  waitForFuncDefsLoaded() {\n    return this.getFuncDefs();\n  }\n\n  getFuncDefs() {\n    if (this.funcDefsPromise !== null) {\n      return this.funcDefsPromise;\n    }\n\n    if (!supportsFunctionIndex(this.graphiteVersion)) {\n      this.funcDefs = gfunc.getFuncDefs(this.graphiteVersion);\n      this.funcDefsPromise = Promise.resolve(this.funcDefs);\n      return this.funcDefsPromise;\n    }\n\n    const httpOptions = {\n      method: 'GET',\n      url: '/functions',\n    };\n\n    this.funcDefsPromise = this.doGraphiteRequest(httpOptions)\n      .then((results: any) => {\n        if (results.status !== 200 || typeof results.data !== 'object') {\n          this.funcDefs = gfunc.getFuncDefs(this.graphiteVersion);\n        } else {\n          this.funcDefs = gfunc.parseFuncDefs(results.data);\n        }\n        return this.funcDefs;\n      })\n      .catch((err: any) => {\n        console.log('Fetching graphite functions error', err);\n        this.funcDefs = gfunc.getFuncDefs(this.graphiteVersion);\n        return this.funcDefs;\n      });\n\n    return this.funcDefsPromise;\n  }\n\n  testDatasource() {\n    const query = ({\n      panelId: 3,\n      rangeRaw: { from: 'now-1h', to: 'now' },\n      targets: [{ target: 'constantLine(100)' }],\n      maxDataPoints: 300,\n    } as unknown) as DataQueryRequest<GraphiteQuery>;\n    return this.query(query).then(() => {\n      return { status: 'success', message: 'Data source is working' };\n    });\n  }\n\n  doGraphiteRequest(options: {\n    method?: string;\n    url: any;\n    requestId?: any;\n    withCredentials?: any;\n    headers?: any;\n    inspect?: any;\n  }) {\n    if (this.basicAuth || this.withCredentials) {\n      options.withCredentials = true;\n    }\n    if (this.basicAuth) {\n      options.headers = options.headers || {};\n      options.headers.Authorization = this.basicAuth;\n    }\n\n    options.url = this.url + options.url;\n    options.inspect = { type: 'graphite' };\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  buildGraphiteParams(options: any, scopedVars: ScopedVars): string[] {\n    const graphiteOptions = ['from', 'until', 'rawData', 'format', 'maxDataPoints', 'cacheTimeout'];\n    const cleanOptions = [],\n      targets: any = {};\n    let target, targetValue, i;\n    const regex = /\\#([A-Z])/g;\n    const intervalFormatFixRegex = /'(\\d+)m'/gi;\n    let hasTargets = false;\n\n    options['format'] = 'json';\n\n    function fixIntervalFormat(match: any) {\n      return match.replace('m', 'min').replace('M', 'mon');\n    }\n\n    for (i = 0; i < options.targets.length; i++) {\n      target = options.targets[i];\n      if (!target.target) {\n        continue;\n      }\n\n      if (!target.refId) {\n        target.refId = this._seriesRefLetters[i];\n      }\n\n      targetValue = this.templateSrv.replace(target.target, scopedVars);\n      targetValue = targetValue.replace(intervalFormatFixRegex, fixIntervalFormat);\n      targets[target.refId] = targetValue;\n    }\n\n    function nestedSeriesRegexReplacer(match: any, g1: string | number) {\n      return targets[g1] || match;\n    }\n\n    for (i = 0; i < options.targets.length; i++) {\n      target = options.targets[i];\n      if (!target.target) {\n        continue;\n      }\n\n      targetValue = targets[target.refId];\n      targetValue = targetValue.replace(regex, nestedSeriesRegexReplacer);\n      targets[target.refId] = targetValue;\n\n      if (!target.hide) {\n        hasTargets = true;\n        cleanOptions.push('target=' + encodeURIComponent(targetValue));\n      }\n    }\n\n    _.each(options, (value, key) => {\n      if (_.indexOf(graphiteOptions, key) === -1) {\n        return;\n      }\n      if (value) {\n        cleanOptions.push(key + '=' + encodeURIComponent(value));\n      }\n    });\n\n    if (!hasTargets) {\n      return [];\n    }\n\n    return cleanOptions;\n  }\n}\n\nfunction supportsTags(version: string): boolean {\n  return isVersionGtOrEq(version, '1.1');\n}\n\nfunction supportsFunctionIndex(version: string): boolean {\n  return isVersionGtOrEq(version, '1.1');\n}\n","import _ from 'lodash';\nimport $ from 'jquery';\n// @ts-ignore\nimport Drop from 'tether-drop';\nimport coreModule from 'app/core/core_module';\nimport { FuncDef } from './gfunc';\n\n/** @ngInject */\nexport function graphiteAddFunc($compile: any) {\n  const inputTemplate =\n    '<input type=\"text\"' + ' class=\"gf-form-input\"' + ' spellcheck=\"false\" style=\"display:none\"></input>';\n\n  const buttonTemplate =\n    '<a class=\"gf-form-label query-part dropdown-toggle\"' +\n    ' tabindex=\"1\" gf-dropdown=\"functionMenu\" data-toggle=\"dropdown\">' +\n    '<i class=\"fa fa-plus\"></i></a>';\n\n  return {\n    link: function($scope: any, elem: JQuery) {\n      const ctrl = $scope.ctrl;\n\n      const $input = $(inputTemplate);\n      const $button = $(buttonTemplate);\n\n      $input.appendTo(elem);\n      $button.appendTo(elem);\n\n      ctrl.datasource.getFuncDefs().then((funcDefs: FuncDef[]) => {\n        const allFunctions = _.map(funcDefs, 'name').sort();\n\n        $scope.functionMenu = createFunctionDropDownMenu(funcDefs);\n\n        $input.attr('data-provide', 'typeahead');\n        $input.typeahead({\n          source: allFunctions,\n          minLength: 1,\n          items: 10,\n          updater: (value: any) => {\n            let funcDef: any = ctrl.datasource.getFuncDef(value);\n            if (!funcDef) {\n              // try find close match\n              value = value.toLowerCase();\n              funcDef = _.find(allFunctions, funcName => {\n                return funcName.toLowerCase().indexOf(value) === 0;\n              });\n\n              if (!funcDef) {\n                return '';\n              }\n            }\n\n            $scope.$apply(() => {\n              ctrl.addFunction(funcDef);\n            });\n\n            $input.trigger('blur');\n            return '';\n          },\n        });\n\n        $button.click(() => {\n          $button.hide();\n          $input.show();\n          $input.focus();\n        });\n\n        $input.keyup(() => {\n          elem.toggleClass('open', $input.val() === '');\n        });\n\n        $input.blur(() => {\n          // clicking the function dropdown menu won't\n          // work if you remove class at once\n          setTimeout(() => {\n            $input.val('');\n            $input.hide();\n            $button.show();\n            elem.removeClass('open');\n          }, 200);\n        });\n\n        $compile(elem.contents())($scope);\n      });\n\n      let drop: any;\n      const cleanUpDrop = () => {\n        if (drop) {\n          drop.destroy();\n          drop = null;\n        }\n      };\n\n      $(elem)\n        .on('mouseenter', 'ul.dropdown-menu li', async () => {\n          cleanUpDrop();\n\n          let funcDef;\n          try {\n            funcDef = ctrl.datasource.getFuncDef($('a', this).text());\n          } catch (e) {\n            // ignore\n          }\n\n          if (funcDef && funcDef.description) {\n            let shortDesc = funcDef.description;\n            if (shortDesc.length > 500) {\n              shortDesc = shortDesc.substring(0, 497) + '...';\n            }\n\n            const contentElement = document.createElement('div');\n            // @ts-ignore\n            const { default: rst2html } = await import(/* webpackChunkName: \"rst2html\" */ 'rst2html');\n            contentElement.innerHTML = '<h4>' + funcDef.name + '</h4>' + rst2html(shortDesc);\n\n            drop = new Drop({\n              target: this,\n              content: contentElement,\n              classes: 'drop-popover',\n              openOn: 'always',\n              tetherOptions: {\n                attachment: 'bottom left',\n                targetAttachment: 'bottom right',\n              },\n            });\n          }\n        })\n        .on('mouseout', 'ul.dropdown-menu li', () => {\n          cleanUpDrop();\n        });\n\n      $scope.$on('$destroy', cleanUpDrop);\n    },\n  };\n}\n\ncoreModule.directive('graphiteAddFunc', graphiteAddFunc);\n\nfunction createFunctionDropDownMenu(funcDefs: FuncDef[]) {\n  const categories: any = {};\n\n  _.forEach(funcDefs, funcDef => {\n    if (!funcDef.category) {\n      return;\n    }\n    if (!categories[funcDef.category]) {\n      categories[funcDef.category] = [];\n    }\n    categories[funcDef.category].push({\n      text: funcDef.name,\n      click: \"ctrl.addFunction('\" + funcDef.name + \"')\",\n    });\n  });\n\n  return _.sortBy(\n    _.map(categories, (submenu, category) => {\n      return {\n        text: category,\n        submenu: _.sortBy(submenu, 'text'),\n      };\n    }),\n    'text'\n  );\n}\n","import _ from 'lodash';\nimport $ from 'jquery';\nimport coreModule from 'app/core/core_module';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\n\n/** @ngInject */\nexport function graphiteFuncEditor($compile: any, templateSrv: TemplateSrv) {\n  const funcSpanTemplate = `\n    <function-editor\n      func=\"func\"\n      onRemove=\"ctrl.handleRemoveFunction\"\n      onMoveLeft=\"ctrl.handleMoveLeft\"\n      onMoveRight=\"ctrl.handleMoveRight\"\n    /><span>(</span>\n  `;\n  const paramTemplate =\n    '<input type=\"text\" style=\"display:none\"' + ' class=\"input-small tight-form-func-param\"></input>';\n\n  return {\n    restrict: 'A',\n    link: function postLink($scope: any, elem: JQuery) {\n      const $funcLink = $(funcSpanTemplate);\n      const ctrl = $scope.ctrl;\n      const func = $scope.func;\n      let scheduledRelink = false;\n      let paramCountAtLink = 0;\n      let cancelBlur: any = null;\n\n      ctrl.handleRemoveFunction = (func: any) => {\n        ctrl.removeFunction(func);\n      };\n\n      ctrl.handleMoveLeft = (func: any) => {\n        ctrl.moveFunction(func, -1);\n      };\n\n      ctrl.handleMoveRight = (func: any) => {\n        ctrl.moveFunction(func, 1);\n      };\n\n      function clickFuncParam(this: any, paramIndex: any) {\n        /*jshint validthis:true */\n\n        const $link = $(this);\n        const $comma = $link.prev('.comma');\n        const $input = $link.next();\n\n        $input.val(func.params[paramIndex]);\n\n        $comma.removeClass('query-part__last');\n        $link.hide();\n        $input.show();\n        $input.focus();\n        $input.select();\n\n        const typeahead = $input.data('typeahead');\n        if (typeahead) {\n          $input.val('');\n          typeahead.lookup();\n        }\n      }\n\n      function scheduledRelinkIfNeeded() {\n        if (paramCountAtLink === func.params.length) {\n          return;\n        }\n\n        if (!scheduledRelink) {\n          scheduledRelink = true;\n          setTimeout(() => {\n            relink();\n            scheduledRelink = false;\n          }, 200);\n        }\n      }\n\n      function paramDef(index: number) {\n        if (index < func.def.params.length) {\n          return func.def.params[index];\n        }\n        if ((_.last(func.def.params) as any).multiple) {\n          return _.assign({}, _.last(func.def.params), { optional: true });\n        }\n        return {};\n      }\n\n      function switchToLink(inputElem: HTMLElement, paramIndex: any) {\n        /*jshint validthis:true */\n        const $input = $(inputElem);\n\n        clearTimeout(cancelBlur);\n        cancelBlur = null;\n\n        const $link = $input.prev();\n        const $comma = $link.prev('.comma');\n        const newValue = $input.val();\n\n        // remove optional empty params\n        if (newValue !== '' || paramDef(paramIndex).optional) {\n          func.updateParam(newValue, paramIndex);\n          $link.html(newValue ? templateSrv.highlightVariablesAsHtml(newValue) : '&nbsp;');\n        }\n\n        scheduledRelinkIfNeeded();\n\n        $scope.$apply(() => {\n          ctrl.targetChanged();\n        });\n\n        if ($link.hasClass('query-part__last') && newValue === '') {\n          $comma.addClass('query-part__last');\n        } else {\n          $link.removeClass('query-part__last');\n        }\n\n        $input.hide();\n        $link.show();\n      }\n\n      // this = input element\n      function inputBlur(this: any, paramIndex: any) {\n        /*jshint validthis:true */\n        const inputElem = this;\n        // happens long before the click event on the typeahead options\n        // need to have long delay because the blur\n        cancelBlur = setTimeout(() => {\n          switchToLink(inputElem, paramIndex);\n        }, 200);\n      }\n\n      function inputKeyPress(this: any, paramIndex: any, e: any) {\n        /*jshint validthis:true */\n        if (e.which === 13) {\n          $(this).blur();\n        }\n      }\n\n      function inputKeyDown(this: any) {\n        /*jshint validthis:true */\n        this.style.width = (3 + this.value.length) * 8 + 'px';\n      }\n\n      function addTypeahead($input: any, paramIndex: any) {\n        $input.attr('data-provide', 'typeahead');\n\n        let options = paramDef(paramIndex).options;\n        if (paramDef(paramIndex).type === 'int') {\n          options = _.map(options, val => {\n            return val.toString();\n          });\n        }\n\n        $input.typeahead({\n          source: options,\n          minLength: 0,\n          items: 20,\n          updater: (value: any) => {\n            $input.val(value);\n            switchToLink($input[0], paramIndex);\n            return value;\n          },\n        });\n\n        const typeahead = $input.data('typeahead');\n        typeahead.lookup = function() {\n          this.query = this.$element.val() || '';\n          return this.process(this.source);\n        };\n      }\n\n      function addElementsAndCompile() {\n        $funcLink.appendTo(elem);\n\n        const defParams: any = _.clone(func.def.params);\n        const lastParam: any = _.last(func.def.params);\n\n        while (func.params.length >= defParams.length && lastParam && lastParam.multiple) {\n          defParams.push(_.assign({}, lastParam, { optional: true }));\n        }\n\n        _.each(defParams, (param: any, index: number) => {\n          if (param.optional && func.params.length < index) {\n            return false;\n          }\n\n          let paramValue = templateSrv.highlightVariablesAsHtml(func.params[index]);\n          const hasValue = paramValue !== null && paramValue !== undefined && paramValue !== '';\n          const last = index >= func.params.length - 1 && param.optional && !hasValue;\n          let linkClass = 'query-part__link';\n\n          if (last) {\n            linkClass += ' query-part__last';\n          }\n\n          if (last && param.multiple) {\n            paramValue = '+';\n          } else if (!hasValue) {\n            // for params with no value default to param name\n            paramValue = param.name;\n            linkClass += ' query-part__link--no-value';\n          }\n\n          if (index > 0) {\n            $('<span class=\"comma' + (last ? ' query-part__last' : '') + '\">, </span>').appendTo(elem);\n          }\n\n          const $paramLink = $(`<a ng-click=\"\" class=\"${linkClass}\">${paramValue}</a>`);\n          const $input = $(paramTemplate);\n          $input.attr('placeholder', param.name);\n\n          paramCountAtLink++;\n\n          $paramLink.appendTo(elem);\n          $input.appendTo(elem);\n\n          $input.blur(_.partial(inputBlur, index));\n          $input.keyup(inputKeyDown);\n          $input.keypress(_.partial(inputKeyPress, index));\n          $paramLink.click(_.partial(clickFuncParam, index));\n\n          if (param.options) {\n            addTypeahead($input, index);\n          }\n\n          return true;\n        });\n\n        $('<span>)</span>').appendTo(elem);\n\n        $compile(elem.contents())($scope);\n      }\n\n      function ifJustAddedFocusFirstParam() {\n        if ($scope.func.added) {\n          $scope.func.added = false;\n          setTimeout(() => {\n            elem\n              .find('.query-part__link')\n              .first()\n              .click();\n          }, 10);\n        }\n      }\n\n      function relink() {\n        elem.children().remove();\n        addElementsAndCompile();\n        ifJustAddedFocusFirstParam();\n      }\n\n      relink();\n    },\n  };\n}\n\ncoreModule.directive('graphiteFuncEditor', graphiteFuncEditor);\n","import _ from 'lodash';\n\n// This is auto generated from the unicode tables.\n// The tables are at:\n// http://www.fileformat.info/info/unicode/category/Lu/list.htm\n// http://www.fileformat.info/info/unicode/category/Ll/list.htm\n// http://www.fileformat.info/info/unicode/category/Lt/list.htm\n// http://www.fileformat.info/info/unicode/category/Lm/list.htm\n// http://www.fileformat.info/info/unicode/category/Lo/list.htm\n// http://www.fileformat.info/info/unicode/category/Nl/list.htm\n\nconst unicodeLetterTable = [\n  170,\n  170,\n  181,\n  181,\n  186,\n  186,\n  192,\n  214,\n  216,\n  246,\n  248,\n  705,\n  710,\n  721,\n  736,\n  740,\n  748,\n  748,\n  750,\n  750,\n  880,\n  884,\n  886,\n  887,\n  890,\n  893,\n  902,\n  902,\n  904,\n  906,\n  908,\n  908,\n  910,\n  929,\n  931,\n  1013,\n  1015,\n  1153,\n  1162,\n  1319,\n  1329,\n  1366,\n  1369,\n  1369,\n  1377,\n  1415,\n  1488,\n  1514,\n  1520,\n  1522,\n  1568,\n  1610,\n  1646,\n  1647,\n  1649,\n  1747,\n  1749,\n  1749,\n  1765,\n  1766,\n  1774,\n  1775,\n  1786,\n  1788,\n  1791,\n  1791,\n  1808,\n  1808,\n  1810,\n  1839,\n  1869,\n  1957,\n  1969,\n  1969,\n  1994,\n  2026,\n  2036,\n  2037,\n  2042,\n  2042,\n  2048,\n  2069,\n  2074,\n  2074,\n  2084,\n  2084,\n  2088,\n  2088,\n  2112,\n  2136,\n  2308,\n  2361,\n  2365,\n  2365,\n  2384,\n  2384,\n  2392,\n  2401,\n  2417,\n  2423,\n  2425,\n  2431,\n  2437,\n  2444,\n  2447,\n  2448,\n  2451,\n  2472,\n  2474,\n  2480,\n  2482,\n  2482,\n  2486,\n  2489,\n  2493,\n  2493,\n  2510,\n  2510,\n  2524,\n  2525,\n  2527,\n  2529,\n  2544,\n  2545,\n  2565,\n  2570,\n  2575,\n  2576,\n  2579,\n  2600,\n  2602,\n  2608,\n  2610,\n  2611,\n  2613,\n  2614,\n  2616,\n  2617,\n  2649,\n  2652,\n  2654,\n  2654,\n  2674,\n  2676,\n  2693,\n  2701,\n  2703,\n  2705,\n  2707,\n  2728,\n  2730,\n  2736,\n  2738,\n  2739,\n  2741,\n  2745,\n  2749,\n  2749,\n  2768,\n  2768,\n  2784,\n  2785,\n  2821,\n  2828,\n  2831,\n  2832,\n  2835,\n  2856,\n  2858,\n  2864,\n  2866,\n  2867,\n  2869,\n  2873,\n  2877,\n  2877,\n  2908,\n  2909,\n  2911,\n  2913,\n  2929,\n  2929,\n  2947,\n  2947,\n  2949,\n  2954,\n  2958,\n  2960,\n  2962,\n  2965,\n  2969,\n  2970,\n  2972,\n  2972,\n  2974,\n  2975,\n  2979,\n  2980,\n  2984,\n  2986,\n  2990,\n  3001,\n  3024,\n  3024,\n  3077,\n  3084,\n  3086,\n  3088,\n  3090,\n  3112,\n  3114,\n  3123,\n  3125,\n  3129,\n  3133,\n  3133,\n  3160,\n  3161,\n  3168,\n  3169,\n  3205,\n  3212,\n  3214,\n  3216,\n  3218,\n  3240,\n  3242,\n  3251,\n  3253,\n  3257,\n  3261,\n  3261,\n  3294,\n  3294,\n  3296,\n  3297,\n  3313,\n  3314,\n  3333,\n  3340,\n  3342,\n  3344,\n  3346,\n  3386,\n  3389,\n  3389,\n  3406,\n  3406,\n  3424,\n  3425,\n  3450,\n  3455,\n  3461,\n  3478,\n  3482,\n  3505,\n  3507,\n  3515,\n  3517,\n  3517,\n  3520,\n  3526,\n  3585,\n  3632,\n  3634,\n  3635,\n  3648,\n  3654,\n  3713,\n  3714,\n  3716,\n  3716,\n  3719,\n  3720,\n  3722,\n  3722,\n  3725,\n  3725,\n  3732,\n  3735,\n  3737,\n  3743,\n  3745,\n  3747,\n  3749,\n  3749,\n  3751,\n  3751,\n  3754,\n  3755,\n  3757,\n  3760,\n  3762,\n  3763,\n  3773,\n  3773,\n  3776,\n  3780,\n  3782,\n  3782,\n  3804,\n  3805,\n  3840,\n  3840,\n  3904,\n  3911,\n  3913,\n  3948,\n  3976,\n  3980,\n  4096,\n  4138,\n  4159,\n  4159,\n  4176,\n  4181,\n  4186,\n  4189,\n  4193,\n  4193,\n  4197,\n  4198,\n  4206,\n  4208,\n  4213,\n  4225,\n  4238,\n  4238,\n  4256,\n  4293,\n  4304,\n  4346,\n  4348,\n  4348,\n  4352,\n  4680,\n  4682,\n  4685,\n  4688,\n  4694,\n  4696,\n  4696,\n  4698,\n  4701,\n  4704,\n  4744,\n  4746,\n  4749,\n  4752,\n  4784,\n  4786,\n  4789,\n  4792,\n  4798,\n  4800,\n  4800,\n  4802,\n  4805,\n  4808,\n  4822,\n  4824,\n  4880,\n  4882,\n  4885,\n  4888,\n  4954,\n  4992,\n  5007,\n  5024,\n  5108,\n  5121,\n  5740,\n  5743,\n  5759,\n  5761,\n  5786,\n  5792,\n  5866,\n  5870,\n  5872,\n  5888,\n  5900,\n  5902,\n  5905,\n  5920,\n  5937,\n  5952,\n  5969,\n  5984,\n  5996,\n  5998,\n  6000,\n  6016,\n  6067,\n  6103,\n  6103,\n  6108,\n  6108,\n  6176,\n  6263,\n  6272,\n  6312,\n  6314,\n  6314,\n  6320,\n  6389,\n  6400,\n  6428,\n  6480,\n  6509,\n  6512,\n  6516,\n  6528,\n  6571,\n  6593,\n  6599,\n  6656,\n  6678,\n  6688,\n  6740,\n  6823,\n  6823,\n  6917,\n  6963,\n  6981,\n  6987,\n  7043,\n  7072,\n  7086,\n  7087,\n  7104,\n  7141,\n  7168,\n  7203,\n  7245,\n  7247,\n  7258,\n  7293,\n  7401,\n  7404,\n  7406,\n  7409,\n  7424,\n  7615,\n  7680,\n  7957,\n  7960,\n  7965,\n  7968,\n  8005,\n  8008,\n  8013,\n  8016,\n  8023,\n  8025,\n  8025,\n  8027,\n  8027,\n  8029,\n  8029,\n  8031,\n  8061,\n  8064,\n  8116,\n  8118,\n  8124,\n  8126,\n  8126,\n  8130,\n  8132,\n  8134,\n  8140,\n  8144,\n  8147,\n  8150,\n  8155,\n  8160,\n  8172,\n  8178,\n  8180,\n  8182,\n  8188,\n  8305,\n  8305,\n  8319,\n  8319,\n  8336,\n  8348,\n  8450,\n  8450,\n  8455,\n  8455,\n  8458,\n  8467,\n  8469,\n  8469,\n  8473,\n  8477,\n  8484,\n  8484,\n  8486,\n  8486,\n  8488,\n  8488,\n  8490,\n  8493,\n  8495,\n  8505,\n  8508,\n  8511,\n  8517,\n  8521,\n  8526,\n  8526,\n  8544,\n  8584,\n  11264,\n  11310,\n  11312,\n  11358,\n  11360,\n  11492,\n  11499,\n  11502,\n  11520,\n  11557,\n  11568,\n  11621,\n  11631,\n  11631,\n  11648,\n  11670,\n  11680,\n  11686,\n  11688,\n  11694,\n  11696,\n  11702,\n  11704,\n  11710,\n  11712,\n  11718,\n  11720,\n  11726,\n  11728,\n  11734,\n  11736,\n  11742,\n  11823,\n  11823,\n  12293,\n  12295,\n  12321,\n  12329,\n  12337,\n  12341,\n  12344,\n  12348,\n  12353,\n  12438,\n  12445,\n  12447,\n  12449,\n  12538,\n  12540,\n  12543,\n  12549,\n  12589,\n  12593,\n  12686,\n  12704,\n  12730,\n  12784,\n  12799,\n  13312,\n  13312,\n  19893,\n  19893,\n  19968,\n  19968,\n  40907,\n  40907,\n  40960,\n  42124,\n  42192,\n  42237,\n  42240,\n  42508,\n  42512,\n  42527,\n  42538,\n  42539,\n  42560,\n  42606,\n  42623,\n  42647,\n  42656,\n  42735,\n  42775,\n  42783,\n  42786,\n  42888,\n  42891,\n  42894,\n  42896,\n  42897,\n  42912,\n  42921,\n  43002,\n  43009,\n  43011,\n  43013,\n  43015,\n  43018,\n  43020,\n  43042,\n  43072,\n  43123,\n  43138,\n  43187,\n  43250,\n  43255,\n  43259,\n  43259,\n  43274,\n  43301,\n  43312,\n  43334,\n  43360,\n  43388,\n  43396,\n  43442,\n  43471,\n  43471,\n  43520,\n  43560,\n  43584,\n  43586,\n  43588,\n  43595,\n  43616,\n  43638,\n  43642,\n  43642,\n  43648,\n  43695,\n  43697,\n  43697,\n  43701,\n  43702,\n  43705,\n  43709,\n  43712,\n  43712,\n  43714,\n  43714,\n  43739,\n  43741,\n  43777,\n  43782,\n  43785,\n  43790,\n  43793,\n  43798,\n  43808,\n  43814,\n  43816,\n  43822,\n  43968,\n  44002,\n  44032,\n  44032,\n  55203,\n  55203,\n  55216,\n  55238,\n  55243,\n  55291,\n  63744,\n  64045,\n  64048,\n  64109,\n  64112,\n  64217,\n  64256,\n  64262,\n  64275,\n  64279,\n  64285,\n  64285,\n  64287,\n  64296,\n  64298,\n  64310,\n  64312,\n  64316,\n  64318,\n  64318,\n  64320,\n  64321,\n  64323,\n  64324,\n  64326,\n  64433,\n  64467,\n  64829,\n  64848,\n  64911,\n  64914,\n  64967,\n  65008,\n  65019,\n  65136,\n  65140,\n  65142,\n  65276,\n  65313,\n  65338,\n  65345,\n  65370,\n  65382,\n  65470,\n  65474,\n  65479,\n  65482,\n  65487,\n  65490,\n  65495,\n  65498,\n  65500,\n  65536,\n  65547,\n  65549,\n  65574,\n  65576,\n  65594,\n  65596,\n  65597,\n  65599,\n  65613,\n  65616,\n  65629,\n  65664,\n  65786,\n  65856,\n  65908,\n  66176,\n  66204,\n  66208,\n  66256,\n  66304,\n  66334,\n  66352,\n  66378,\n  66432,\n  66461,\n  66464,\n  66499,\n  66504,\n  66511,\n  66513,\n  66517,\n  66560,\n  66717,\n  67584,\n  67589,\n  67592,\n  67592,\n  67594,\n  67637,\n  67639,\n  67640,\n  67644,\n  67644,\n  67647,\n  67669,\n  67840,\n  67861,\n  67872,\n  67897,\n  68096,\n  68096,\n  68112,\n  68115,\n  68117,\n  68119,\n  68121,\n  68147,\n  68192,\n  68220,\n  68352,\n  68405,\n  68416,\n  68437,\n  68448,\n  68466,\n  68608,\n  68680,\n  69635,\n  69687,\n  69763,\n  69807,\n  73728,\n  74606,\n  74752,\n  74850,\n  77824,\n  78894,\n  92160,\n  92728,\n  110592,\n  110593,\n  119808,\n  119892,\n  119894,\n  119964,\n  119966,\n  119967,\n  119970,\n  119970,\n  119973,\n  119974,\n  119977,\n  119980,\n  119982,\n  119993,\n  119995,\n  119995,\n  119997,\n  120003,\n  120005,\n  120069,\n  120071,\n  120074,\n  120077,\n  120084,\n  120086,\n  120092,\n  120094,\n  120121,\n  120123,\n  120126,\n  120128,\n  120132,\n  120134,\n  120134,\n  120138,\n  120144,\n  120146,\n  120485,\n  120488,\n  120512,\n  120514,\n  120538,\n  120540,\n  120570,\n  120572,\n  120596,\n  120598,\n  120628,\n  120630,\n  120654,\n  120656,\n  120686,\n  120688,\n  120712,\n  120714,\n  120744,\n  120746,\n  120770,\n  120772,\n  120779,\n  131072,\n  131072,\n  173782,\n  173782,\n  173824,\n  173824,\n  177972,\n  177972,\n  177984,\n  177984,\n  178205,\n  178205,\n  194560,\n  195101,\n];\n\nconst identifierStartTable: any[] = [];\n\nfor (let i = 0; i < 128; i++) {\n  identifierStartTable[i] =\n    (i >= 48 && i <= 57) || // 0-9\n    i === 36 || // $\n    i === 126 || // ~\n    i === 124 || // |\n    (i >= 65 && i <= 90) || // A-Z\n    i === 95 || // _\n    i === 45 || // -\n    i === 42 || // *\n    i === 58 || // :\n    i === 91 || // templateStart [\n    i === 93 || // templateEnd ]\n    i === 63 || // ?\n    i === 37 || // %\n    i === 35 || // #\n    i === 61 || // =\n    (i >= 97 && i <= 122); // a-z\n}\n\nconst identifierPartTable = identifierStartTable;\n\nexport class Lexer {\n  input: any;\n  char: number;\n  from: number;\n\n  constructor(expression: any) {\n    this.input = expression;\n    this.char = 1;\n    this.from = 1;\n  }\n\n  peek(i?: number) {\n    return this.input.charAt(i || 0);\n  }\n\n  skip(i?: number) {\n    i = i || 1;\n    this.char += i;\n    this.input = this.input.slice(i);\n  }\n\n  tokenize() {\n    const list = [];\n    let token = this.next();\n    while (token) {\n      list.push(token);\n      token = this.next();\n    }\n    return list;\n  }\n\n  next() {\n    this.from = this.char;\n\n    // Move to the next non-space character.\n    if (/\\s/.test(this.peek())) {\n      while (/\\s/.test(this.peek())) {\n        this.from += 1;\n        this.skip();\n      }\n\n      if (this.peek() === '') {\n        // EOL\n        return null;\n      }\n    }\n\n    let match = this.scanStringLiteral();\n    if (match) {\n      return match;\n    }\n\n    match = this.scanPunctuator() || this.scanNumericLiteral() || this.scanIdentifier() || this.scanTemplateSequence();\n\n    if (match) {\n      this.skip(match.value.length);\n      return match;\n    }\n\n    // No token could be matched, give up.\n    return null;\n  }\n\n  scanTemplateSequence() {\n    if (this.peek() === '[' && this.peek(1) === '[') {\n      return {\n        type: 'templateStart',\n        value: '[[',\n        pos: this.char,\n      };\n    }\n\n    if (this.peek() === ']' && this.peek(1) === ']') {\n      return {\n        type: 'templateEnd',\n        value: '[[',\n        pos: this.char,\n      };\n    }\n\n    return null;\n  }\n\n  /*\n   * Extract a JavaScript identifier out of the next sequence of\n   * characters or return 'null' if its not possible. In addition,\n   * to Identifier this method can also produce BooleanLiteral\n   * (true/false) and NullLiteral (null).\n   */\n  scanIdentifier() {\n    let id = '';\n    let index = 0;\n    let type, char;\n\n    // Detects any character in the Unicode categories \"Uppercase\n    // letter (Lu)\", \"Lowercase letter (Ll)\", \"Titlecase letter\n    // (Lt)\", \"Modifier letter (Lm)\", \"Other letter (Lo)\", or\n    // \"Letter number (Nl)\".\n    //\n    // Both approach and unicodeLetterTable were borrowed from\n    // Google's Traceur.\n\n    function isUnicodeLetter(code: number) {\n      for (let i = 0; i < unicodeLetterTable.length; ) {\n        if (code < unicodeLetterTable[i++]) {\n          return false;\n        }\n\n        if (code <= unicodeLetterTable[i++]) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    function isHexDigit(str: string) {\n      return /^[0-9a-fA-F]$/.test(str);\n    }\n\n    const readUnicodeEscapeSequence = _.bind(function(this: any) {\n      /*jshint validthis:true */\n      index += 1;\n\n      if (this.peek(index) !== 'u') {\n        return null;\n      }\n\n      const ch1 = this.peek(index + 1);\n      const ch2 = this.peek(index + 2);\n      const ch3 = this.peek(index + 3);\n      const ch4 = this.peek(index + 4);\n      let code;\n\n      if (isHexDigit(ch1) && isHexDigit(ch2) && isHexDigit(ch3) && isHexDigit(ch4)) {\n        code = parseInt(ch1 + ch2 + ch3 + ch4, 16);\n\n        if (isUnicodeLetter(code)) {\n          index += 5;\n          return '\\\\u' + ch1 + ch2 + ch3 + ch4;\n        }\n\n        return null;\n      }\n\n      return null;\n    }, this);\n\n    const getIdentifierStart = _.bind(function(this: any) {\n      /*jshint validthis:true */\n      const chr = this.peek(index);\n      const code = chr.charCodeAt(0);\n\n      if (chr === '*') {\n        index += 1;\n        return chr;\n      }\n\n      if (code === 92) {\n        return readUnicodeEscapeSequence();\n      }\n\n      if (code < 128) {\n        if (identifierStartTable[code]) {\n          index += 1;\n          return chr;\n        }\n\n        return null;\n      }\n\n      if (isUnicodeLetter(code)) {\n        index += 1;\n        return chr;\n      }\n\n      return null;\n    }, this);\n\n    const getIdentifierPart = _.bind(function(this: any) {\n      /*jshint validthis:true */\n      const chr = this.peek(index);\n      const code = chr.charCodeAt(0);\n\n      if (code === 92) {\n        return readUnicodeEscapeSequence();\n      }\n\n      if (code < 128) {\n        if (identifierPartTable[code]) {\n          index += 1;\n          return chr;\n        }\n\n        return null;\n      }\n\n      if (isUnicodeLetter(code)) {\n        index += 1;\n        return chr;\n      }\n\n      return null;\n    }, this);\n\n    char = getIdentifierStart();\n    if (char === null) {\n      return null;\n    }\n\n    id = char;\n    for (;;) {\n      char = getIdentifierPart();\n\n      if (char === null) {\n        break;\n      }\n\n      id += char;\n    }\n\n    switch (id) {\n      case 'true': {\n        type = 'bool';\n        break;\n      }\n      case 'false': {\n        type = 'bool';\n        break;\n      }\n      default:\n        type = 'identifier';\n    }\n\n    return {\n      type: type,\n      value: id,\n      pos: this.char,\n    };\n  }\n\n  /*\n   * Extract a numeric literal out of the next sequence of\n   * characters or return 'null' if its not possible. This method\n   * supports all numeric literals described in section 7.8.3\n   * of the EcmaScript 5 specification.\n   *\n   * This method's implementation was heavily influenced by the\n   * scanNumericLiteral function in the Esprima parser's source code.\n   */\n  scanNumericLiteral(): any {\n    let index = 0;\n    let value = '';\n    const length = this.input.length;\n    let char = this.peek(index);\n    let bad;\n\n    function isDecimalDigit(str: string) {\n      return /^[0-9]$/.test(str);\n    }\n\n    function isOctalDigit(str: string) {\n      return /^[0-7]$/.test(str);\n    }\n\n    function isHexDigit(str: string) {\n      return /^[0-9a-fA-F]$/.test(str);\n    }\n\n    function isIdentifierStart(ch: string) {\n      return ch === '$' || ch === '_' || ch === '\\\\' || (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z');\n    }\n\n    // handle negative num literals\n    if (char === '-') {\n      value += char;\n      index += 1;\n      char = this.peek(index);\n    }\n\n    // Numbers must start either with a decimal digit or a point.\n    if (char !== '.' && !isDecimalDigit(char)) {\n      return null;\n    }\n\n    if (char !== '.') {\n      value += this.peek(index);\n      index += 1;\n      char = this.peek(index);\n\n      if (value === '0') {\n        // Base-16 numbers.\n        if (char === 'x' || char === 'X') {\n          index += 1;\n          value += char;\n\n          while (index < length) {\n            char = this.peek(index);\n            if (!isHexDigit(char)) {\n              break;\n            }\n            value += char;\n            index += 1;\n          }\n\n          if (value.length <= 2) {\n            // 0x\n            return {\n              type: 'number',\n              value: value,\n              isMalformed: true,\n              pos: this.char,\n            };\n          }\n\n          if (index < length) {\n            char = this.peek(index);\n            if (isIdentifierStart(char)) {\n              return null;\n            }\n          }\n\n          return {\n            type: 'number',\n            value: value,\n            base: 16,\n            isMalformed: false,\n            pos: this.char,\n          };\n        }\n\n        // Base-8 numbers.\n        if (isOctalDigit(char)) {\n          index += 1;\n          value += char;\n          bad = false;\n\n          while (index < length) {\n            char = this.peek(index);\n\n            // Numbers like '019' (note the 9) are not valid octals\n            // but we still parse them and mark as malformed.\n\n            if (isDecimalDigit(char)) {\n              bad = true;\n            }\n            if (!isOctalDigit(char)) {\n              // if the char is a non punctuator then its not a valid number\n              if (!this.isPunctuator(char)) {\n                return null;\n              }\n              break;\n            }\n            value += char;\n            index += 1;\n          }\n\n          if (index < length) {\n            char = this.peek(index);\n            if (isIdentifierStart(char)) {\n              return null;\n            }\n          }\n\n          return {\n            type: 'number',\n            value: value,\n            base: 8,\n            isMalformed: bad,\n          };\n        }\n\n        // Decimal numbers that start with '0' such as '09' are illegal\n        // but we still parse them and return as malformed.\n\n        if (isDecimalDigit(char)) {\n          index += 1;\n          value += char;\n        }\n      }\n\n      while (index < length) {\n        char = this.peek(index);\n        if (!isDecimalDigit(char)) {\n          break;\n        }\n        value += char;\n        index += 1;\n      }\n    }\n\n    // Decimal digits.\n\n    if (char === '.') {\n      value += char;\n      index += 1;\n\n      while (index < length) {\n        char = this.peek(index);\n        if (!isDecimalDigit(char)) {\n          break;\n        }\n        value += char;\n        index += 1;\n      }\n    }\n\n    // Exponent part.\n\n    if (char === 'e' || char === 'E') {\n      value += char;\n      index += 1;\n      char = this.peek(index);\n\n      if (char === '+' || char === '-') {\n        value += this.peek(index);\n        index += 1;\n      }\n\n      char = this.peek(index);\n      if (isDecimalDigit(char)) {\n        value += char;\n        index += 1;\n\n        while (index < length) {\n          char = this.peek(index);\n          if (!isDecimalDigit(char)) {\n            break;\n          }\n          value += char;\n          index += 1;\n        }\n      } else {\n        return null;\n      }\n    }\n\n    if (index < length) {\n      char = this.peek(index);\n      if (!this.isPunctuator(char)) {\n        return null;\n      }\n    }\n\n    return {\n      type: 'number',\n      value: value,\n      base: 10,\n      pos: this.char,\n      isMalformed: !isFinite(+value),\n    };\n  }\n\n  isPunctuator(ch1: string) {\n    switch (ch1) {\n      case '.':\n      case '(':\n      case ')':\n      case ',':\n      case '{':\n      case '}':\n        return true;\n    }\n\n    return false;\n  }\n\n  scanPunctuator() {\n    const ch1 = this.peek();\n\n    if (this.isPunctuator(ch1)) {\n      return {\n        type: ch1,\n        value: ch1,\n        pos: this.char,\n      };\n    }\n\n    return null;\n  }\n\n  /*\n   * Extract a string out of the next sequence of characters and/or\n   * lines or return 'null' if its not possible. Since strings can\n   * span across multiple lines this method has to move the char\n   * pointer.\n   *\n   * This method recognizes pseudo-multiline JavaScript strings:\n   *\n   *   var str = \"hello\\\n   *   world\";\n   */\n  scanStringLiteral() {\n    /*jshint loopfunc:true */\n    const quote = this.peek();\n\n    // String must start with a quote.\n    if (quote !== '\"' && quote !== \"'\") {\n      return null;\n    }\n\n    let value = '';\n\n    this.skip();\n\n    while (this.peek() !== quote) {\n      if (this.peek() === '') {\n        // End Of Line\n        return {\n          type: 'string',\n          value: value,\n          isUnclosed: true,\n          quote: quote,\n          pos: this.char,\n        };\n      }\n\n      const char = this.peek();\n      const jump = 1; // A length of a jump, after we're done\n      // parsing this character.\n\n      value += char;\n      this.skip(jump);\n    }\n\n    this.skip();\n    return {\n      type: 'string',\n      value: value,\n      isUnclosed: false,\n      quote: quote,\n      pos: this.char,\n    };\n  }\n}\n","import { Lexer } from './lexer';\n\nexport class Parser {\n  expression: any;\n  lexer: Lexer;\n  tokens: any;\n  index: number;\n\n  constructor(expression: any) {\n    this.expression = expression;\n    this.lexer = new Lexer(expression);\n    this.tokens = this.lexer.tokenize();\n    this.index = 0;\n  }\n\n  getAst() {\n    return this.start();\n  }\n\n  start() {\n    try {\n      return this.functionCall() || this.metricExpression();\n    } catch (e) {\n      return {\n        type: 'error',\n        message: e.message,\n        pos: e.pos,\n      };\n    }\n  }\n\n  curlyBraceSegment() {\n    if (this.match('identifier', '{') || this.match('{')) {\n      let curlySegment = '';\n\n      while (!this.match('') && !this.match('}')) {\n        curlySegment += this.consumeToken().value;\n      }\n\n      if (!this.match('}')) {\n        this.errorMark(\"Expected closing '}'\");\n      }\n\n      curlySegment += this.consumeToken().value;\n\n      // if curly segment is directly followed by identifier\n      // include it in the segment\n      if (this.match('identifier')) {\n        curlySegment += this.consumeToken().value;\n      }\n\n      return {\n        type: 'segment',\n        value: curlySegment,\n      };\n    } else {\n      return null;\n    }\n  }\n\n  metricSegment() {\n    const curly = this.curlyBraceSegment();\n    if (curly) {\n      return curly;\n    }\n\n    if (this.match('identifier') || this.match('number')) {\n      // hack to handle float numbers in metric segments\n      const parts = this.consumeToken().value.split('.');\n      if (parts.length === 2) {\n        this.tokens.splice(this.index, 0, { type: '.' });\n        this.tokens.splice(this.index + 1, 0, {\n          type: 'number',\n          value: parts[1],\n        });\n      }\n\n      return {\n        type: 'segment',\n        value: parts[0],\n      };\n    }\n\n    if (!this.match('templateStart')) {\n      this.errorMark('Expected metric identifier');\n    }\n\n    this.consumeToken();\n\n    if (!this.match('identifier')) {\n      this.errorMark('Expected identifier after templateStart');\n    }\n\n    const node = {\n      type: 'template',\n      value: this.consumeToken().value,\n    };\n\n    if (!this.match('templateEnd')) {\n      this.errorMark('Expected templateEnd');\n    }\n\n    this.consumeToken();\n    return node;\n  }\n\n  metricExpression() {\n    if (!this.match('templateStart') && !this.match('identifier') && !this.match('number') && !this.match('{')) {\n      return null;\n    }\n\n    const node: any = {\n      type: 'metric',\n      segments: [],\n    };\n\n    node.segments.push(this.metricSegment());\n\n    while (this.match('.')) {\n      this.consumeToken();\n\n      const segment = this.metricSegment();\n      if (!segment) {\n        this.errorMark('Expected metric identifier');\n      }\n\n      node.segments.push(segment);\n    }\n\n    return node;\n  }\n\n  functionCall() {\n    if (!this.match('identifier', '(')) {\n      return null;\n    }\n\n    const node: any = {\n      type: 'function',\n      name: this.consumeToken().value,\n    };\n\n    // consume left parenthesis\n    this.consumeToken();\n\n    node.params = this.functionParameters();\n\n    if (!this.match(')')) {\n      this.errorMark('Expected closing parenthesis');\n    }\n\n    this.consumeToken();\n\n    return node;\n  }\n\n  boolExpression() {\n    if (!this.match('bool')) {\n      return null;\n    }\n\n    return {\n      type: 'bool',\n      value: this.consumeToken().value === 'true',\n    };\n  }\n\n  functionParameters(): any {\n    if (this.match(')') || this.match('')) {\n      return [];\n    }\n\n    const param =\n      this.functionCall() ||\n      this.numericLiteral() ||\n      this.seriesRefExpression() ||\n      this.boolExpression() ||\n      this.metricExpression() ||\n      this.stringLiteral();\n\n    if (!this.match(',')) {\n      return [param];\n    }\n\n    this.consumeToken();\n    return [param].concat(this.functionParameters());\n  }\n\n  seriesRefExpression() {\n    if (!this.match('identifier')) {\n      return null;\n    }\n\n    const value = this.tokens[this.index].value;\n    if (!value.match(/\\#[A-Z]/)) {\n      return null;\n    }\n\n    const token = this.consumeToken();\n\n    return {\n      type: 'series-ref',\n      value: token.value,\n    };\n  }\n\n  numericLiteral() {\n    if (!this.match('number')) {\n      return null;\n    }\n\n    return {\n      type: 'number',\n      value: parseFloat(this.consumeToken().value),\n    };\n  }\n\n  stringLiteral() {\n    if (!this.match('string')) {\n      return null;\n    }\n\n    const token = this.consumeToken();\n    if (token.isUnclosed) {\n      throw { message: 'Unclosed string parameter', pos: token.pos };\n    }\n\n    return {\n      type: 'string',\n      value: token.value,\n    };\n  }\n\n  errorMark(text: string) {\n    const currentToken = this.tokens[this.index];\n    const type = currentToken ? currentToken.type : 'end of string';\n    throw {\n      message: text + ' instead found ' + type,\n      pos: currentToken ? currentToken.pos : this.lexer.char,\n    };\n  }\n\n  // returns token value and incre\n  consumeToken() {\n    this.index++;\n    return this.tokens[this.index - 1];\n  }\n\n  matchToken(type: any, index: number) {\n    const token = this.tokens[this.index + index];\n    return (token === undefined && type === '') || (token && token.type === type);\n  }\n\n  match(token1: any, token2?: any) {\n    return this.matchToken(token1, 0) && (!token2 || this.matchToken(token2, 1));\n  }\n}\n","import _ from 'lodash';\nimport { Parser } from './parser';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport { ScopedVars } from '@grafana/data';\n\nexport default class GraphiteQuery {\n  datasource: any;\n  target: any;\n  functions: any[];\n  segments: any[];\n  tags: any[];\n  error: any;\n  seriesByTagUsed: boolean;\n  checkOtherSegmentsIndex: number;\n  removeTagValue: string;\n  templateSrv: any;\n  scopedVars: any;\n\n  /** @ngInject */\n  constructor(datasource: any, target: any, templateSrv?: TemplateSrv, scopedVars?: ScopedVars) {\n    this.datasource = datasource;\n    this.target = target;\n    this.templateSrv = templateSrv;\n    this.scopedVars = scopedVars;\n    this.parseTarget();\n\n    this.removeTagValue = '-- remove tag --';\n  }\n\n  parseTarget() {\n    this.functions = [];\n    this.segments = [];\n    this.tags = [];\n    this.seriesByTagUsed = false;\n    this.error = null;\n\n    if (this.target.textEditor) {\n      return;\n    }\n\n    const parser = new Parser(this.target.target);\n    const astNode = parser.getAst();\n    if (astNode === null) {\n      this.checkOtherSegmentsIndex = 0;\n      return;\n    }\n\n    if (astNode.type === 'error') {\n      this.error = astNode.message + ' at position: ' + astNode.pos;\n      this.target.textEditor = true;\n      return;\n    }\n\n    try {\n      this.parseTargetRecursive(astNode, null);\n    } catch (err) {\n      console.log('error parsing target:', err.message);\n      this.error = err.message;\n      this.target.textEditor = true;\n    }\n\n    this.checkOtherSegmentsIndex = this.segments.length - 1;\n  }\n\n  getSegmentPathUpTo(index: number) {\n    const arr = this.segments.slice(0, index);\n\n    return _.reduce(\n      arr,\n      (result, segment) => {\n        return result ? result + '.' + segment.value : segment.value;\n      },\n      ''\n    );\n  }\n\n  parseTargetRecursive(astNode: any, func: any): any {\n    if (astNode === null) {\n      return null;\n    }\n\n    switch (astNode.type) {\n      case 'function':\n        const innerFunc = this.datasource.createFuncInstance(astNode.name, {\n          withDefaultParams: false,\n        });\n        _.each(astNode.params, param => {\n          this.parseTargetRecursive(param, innerFunc);\n        });\n\n        innerFunc.updateText();\n        this.functions.push(innerFunc);\n\n        // extract tags from seriesByTag function and hide function\n        if (innerFunc.def.name === 'seriesByTag' && !this.seriesByTagUsed) {\n          this.seriesByTagUsed = true;\n          innerFunc.hidden = true;\n          this.tags = this.splitSeriesByTagParams(innerFunc);\n        }\n\n        break;\n      case 'series-ref':\n        if (this.segments.length > 0 || this.getSeriesByTagFuncIndex() >= 0) {\n          this.addFunctionParameter(func, astNode.value);\n        } else {\n          this.segments.push(astNode);\n        }\n        break;\n      case 'bool':\n      case 'string':\n      case 'number':\n        this.addFunctionParameter(func, astNode.value);\n        break;\n      case 'metric':\n        if (this.segments.length || this.tags.length) {\n          this.addFunctionParameter(func, _.join(_.map(astNode.segments, 'value'), '.'));\n        } else {\n          this.segments = astNode.segments;\n        }\n        break;\n    }\n  }\n\n  updateSegmentValue(segment: any, index: number) {\n    this.segments[index].value = segment.value;\n  }\n\n  addSelectMetricSegment() {\n    this.segments.push({ value: 'select metric' });\n  }\n\n  addFunction(newFunc: any) {\n    this.functions.push(newFunc);\n  }\n\n  addFunctionParameter(func: any, value: string) {\n    if (func.params.length >= func.def.params.length && !_.get(_.last(func.def.params), 'multiple', false)) {\n      throw { message: 'too many parameters for function ' + func.def.name };\n    }\n    func.params.push(value);\n  }\n\n  removeFunction(func: any) {\n    this.functions = _.without(this.functions, func);\n  }\n\n  moveFunction(func: any, offset: number) {\n    const index = this.functions.indexOf(func);\n    // @ts-ignore\n    _.move(this.functions, index, index + offset);\n  }\n\n  updateModelTarget(targets: any) {\n    const wrapFunction = (target: string, func: any) => {\n      return func.render(target, (value: string) => {\n        return this.templateSrv.replace(value, this.scopedVars);\n      });\n    };\n\n    if (!this.target.textEditor) {\n      const metricPath = this.getSegmentPathUpTo(this.segments.length).replace(/\\.select metric$/, '');\n      this.target.target = _.reduce(this.functions, wrapFunction, metricPath);\n    }\n\n    this.updateRenderedTarget(this.target, targets);\n\n    // loop through other queries and update targetFull as needed\n    for (const target of targets || []) {\n      if (target.refId !== this.target.refId) {\n        this.updateRenderedTarget(target, targets);\n      }\n    }\n  }\n\n  updateRenderedTarget(target: { refId: string | number; target: any; targetFull: any }, targets: any) {\n    // render nested query\n    const targetsByRefId = _.keyBy(targets, 'refId');\n\n    // no references to self\n    delete targetsByRefId[target.refId];\n\n    const nestedSeriesRefRegex = /\\#([A-Z])/g;\n    let targetWithNestedQueries = target.target;\n\n    // Use ref count to track circular references\n    function countTargetRefs(targetsByRefId: any, refId: string) {\n      let refCount = 0;\n      _.each(targetsByRefId, (t, id) => {\n        if (id !== refId) {\n          const match = nestedSeriesRefRegex.exec(t.target);\n          const count = match && match.length ? match.length - 1 : 0;\n          refCount += count;\n        }\n      });\n      targetsByRefId[refId].refCount = refCount;\n    }\n    _.each(targetsByRefId, (t, id) => {\n      countTargetRefs(targetsByRefId, id);\n    });\n\n    // Keep interpolating until there are no query references\n    // The reason for the loop is that the referenced query might contain another reference to another query\n    while (targetWithNestedQueries.match(nestedSeriesRefRegex)) {\n      const updated = targetWithNestedQueries.replace(nestedSeriesRefRegex, (match: string, g1: string) => {\n        const t = targetsByRefId[g1];\n        if (!t) {\n          return match;\n        }\n\n        // no circular references\n        if (t.refCount === 0) {\n          delete targetsByRefId[g1];\n        }\n        t.refCount--;\n\n        return t.target;\n      });\n\n      if (updated === targetWithNestedQueries) {\n        break;\n      }\n\n      targetWithNestedQueries = updated;\n    }\n\n    delete target.targetFull;\n    if (target.target !== targetWithNestedQueries) {\n      target.targetFull = targetWithNestedQueries;\n    }\n  }\n\n  splitSeriesByTagParams(func: { params: any }) {\n    const tagPattern = /([^\\!=~]+)(\\!?=~?)(.*)/;\n    return _.flatten(\n      _.map(func.params, (param: string) => {\n        const matches = tagPattern.exec(param);\n        if (matches) {\n          const tag = matches.slice(1);\n          if (tag.length === 3) {\n            return {\n              key: tag[0],\n              operator: tag[1],\n              value: tag[2],\n            };\n          }\n        }\n        return [];\n      })\n    );\n  }\n\n  getSeriesByTagFuncIndex() {\n    return _.findIndex(this.functions, func => func.def.name === 'seriesByTag');\n  }\n\n  getSeriesByTagFunc() {\n    const seriesByTagFuncIndex = this.getSeriesByTagFuncIndex();\n    if (seriesByTagFuncIndex >= 0) {\n      return this.functions[seriesByTagFuncIndex];\n    } else {\n      return undefined;\n    }\n  }\n\n  addTag(tag: { key: any; operator: string; value: string }) {\n    const newTagParam = renderTagString(tag);\n    this.getSeriesByTagFunc().params.push(newTagParam);\n    this.tags.push(tag);\n  }\n\n  removeTag(index: number) {\n    this.getSeriesByTagFunc().params.splice(index, 1);\n    this.tags.splice(index, 1);\n  }\n\n  updateTag(tag: { key: string }, tagIndex: number) {\n    this.error = null;\n\n    if (tag.key === this.removeTagValue) {\n      this.removeTag(tagIndex);\n      return;\n    }\n\n    const newTagParam = renderTagString(tag);\n    this.getSeriesByTagFunc().params[tagIndex] = newTagParam;\n    this.tags[tagIndex] = tag;\n  }\n\n  renderTagExpressions(excludeIndex = -1) {\n    return _.compact(\n      _.map(this.tags, (tagExpr, index) => {\n        // Don't render tag that we want to lookup\n        if (index !== excludeIndex) {\n          return tagExpr.key + tagExpr.operator + tagExpr.value;\n        }\n      })\n    );\n  }\n}\n\nfunction renderTagString(tag: { key: any; operator?: any; value?: any }) {\n  return tag.key + tag.operator + tag.value;\n}\n","import './add_graphite_func';\nimport './func_editor';\n\nimport _ from 'lodash';\nimport GraphiteQuery from './graphite_query';\nimport { QueryCtrl } from 'app/plugins/sdk';\nimport appEvents from 'app/core/app_events';\nimport { auto } from 'angular';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport { AppEvents } from '@grafana/data';\n\nconst GRAPHITE_TAG_OPERATORS = ['=', '!=', '=~', '!=~'];\nconst TAG_PREFIX = 'tag: ';\n\nexport class GraphiteQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  queryModel: GraphiteQuery;\n  segments: any[];\n  addTagSegments: any[];\n  removeTagValue: string;\n  supportsTags: boolean;\n  paused: boolean;\n\n  /** @ngInject */\n  constructor(\n    $scope: any,\n    $injector: auto.IInjectorService,\n    private uiSegmentSrv: any,\n    private templateSrv: TemplateSrv,\n    $timeout: any\n  ) {\n    super($scope, $injector);\n    this.supportsTags = this.datasource.supportsTags;\n    this.paused = false;\n    this.target.target = this.target.target || '';\n\n    this.datasource.waitForFuncDefsLoaded().then(() => {\n      this.queryModel = new GraphiteQuery(this.datasource, this.target, templateSrv);\n      this.buildSegments(false);\n    });\n\n    this.removeTagValue = '-- remove tag --';\n  }\n\n  parseTarget() {\n    this.queryModel.parseTarget();\n    this.buildSegments();\n  }\n\n  toggleEditorMode() {\n    this.target.textEditor = !this.target.textEditor;\n    this.parseTarget();\n  }\n\n  buildSegments(modifyLastSegment = true) {\n    this.segments = _.map(this.queryModel.segments, segment => {\n      return this.uiSegmentSrv.newSegment(segment);\n    });\n\n    const checkOtherSegmentsIndex = this.queryModel.checkOtherSegmentsIndex || 0;\n    this.checkOtherSegments(checkOtherSegmentsIndex, modifyLastSegment);\n\n    if (this.queryModel.seriesByTagUsed) {\n      this.fixTagSegments();\n    }\n  }\n\n  addSelectMetricSegment() {\n    this.queryModel.addSelectMetricSegment();\n    this.segments.push(this.uiSegmentSrv.newSelectMetric());\n  }\n\n  checkOtherSegments(fromIndex: number, modifyLastSegment = true) {\n    if (this.queryModel.segments.length === 1 && this.queryModel.segments[0].type === 'series-ref') {\n      return;\n    }\n\n    if (fromIndex === 0) {\n      this.addSelectMetricSegment();\n      return;\n    }\n\n    const path = this.queryModel.getSegmentPathUpTo(fromIndex + 1);\n    if (path === '') {\n      return Promise.resolve();\n    }\n\n    return this.datasource\n      .metricFindQuery(path)\n      .then((segments: any) => {\n        if (segments.length === 0) {\n          if (path !== '' && modifyLastSegment) {\n            this.queryModel.segments = this.queryModel.segments.splice(0, fromIndex);\n            this.segments = this.segments.splice(0, fromIndex);\n            this.addSelectMetricSegment();\n          }\n        } else if (segments[0].expandable) {\n          if (this.segments.length === fromIndex) {\n            this.addSelectMetricSegment();\n          } else {\n            return this.checkOtherSegments(fromIndex + 1);\n          }\n        }\n      })\n      .catch((err: any) => {\n        appEvents.emit(AppEvents.alertError, ['Error', err]);\n      });\n  }\n\n  setSegmentFocus(segmentIndex: any) {\n    _.each(this.segments, (segment, index) => {\n      segment.focus = segmentIndex === index;\n    });\n  }\n\n  getAltSegments(index: number, prefix: string) {\n    let query = prefix && prefix.length > 0 ? '*' + prefix + '*' : '*';\n    if (index > 0) {\n      query = this.queryModel.getSegmentPathUpTo(index) + '.' + query;\n    }\n    const options = {\n      range: this.panelCtrl.range,\n      requestId: 'get-alt-segments',\n    };\n\n    return this.datasource\n      .metricFindQuery(query, options)\n      .then((segments: any[]) => {\n        const altSegments = _.map(segments, segment => {\n          return this.uiSegmentSrv.newSegment({\n            value: segment.text,\n            expandable: segment.expandable,\n          });\n        });\n\n        if (index > 0 && altSegments.length === 0) {\n          return altSegments;\n        }\n\n        // add query references\n        if (index === 0) {\n          _.eachRight(this.panelCtrl.panel.targets, target => {\n            if (target.refId === this.queryModel.target.refId) {\n              return;\n            }\n\n            altSegments.unshift(\n              this.uiSegmentSrv.newSegment({\n                type: 'series-ref',\n                value: '#' + target.refId,\n                expandable: false,\n              })\n            );\n          });\n        }\n\n        // add template variables\n        _.eachRight(this.templateSrv.variables, variable => {\n          altSegments.unshift(\n            this.uiSegmentSrv.newSegment({\n              type: 'template',\n              value: '$' + variable.name,\n              expandable: true,\n            })\n          );\n        });\n\n        // add wildcard option\n        altSegments.unshift(this.uiSegmentSrv.newSegment('*'));\n\n        if (this.supportsTags && index === 0) {\n          this.removeTaggedEntry(altSegments);\n          return this.addAltTagSegments(prefix, altSegments);\n        } else {\n          return altSegments;\n        }\n      })\n      .catch((err: any): any[] => {\n        return [];\n      });\n  }\n\n  addAltTagSegments(prefix: string, altSegments: any[]) {\n    return this.getTagsAsSegments(prefix).then((tagSegments: any[]) => {\n      tagSegments = _.map(tagSegments, segment => {\n        segment.value = TAG_PREFIX + segment.value;\n        return segment;\n      });\n      return altSegments.concat(...tagSegments);\n    });\n  }\n\n  removeTaggedEntry(altSegments: any[]) {\n    altSegments = _.remove(altSegments, s => s.value === '_tagged');\n  }\n\n  segmentValueChanged(segment: { type: string; value: string; expandable: any }, segmentIndex: number) {\n    this.error = null;\n    this.queryModel.updateSegmentValue(segment, segmentIndex);\n\n    if (this.queryModel.functions.length > 0 && this.queryModel.functions[0].def.fake) {\n      this.queryModel.functions = [];\n    }\n\n    if (segment.type === 'tag') {\n      const tag = removeTagPrefix(segment.value);\n      this.pause();\n      this.addSeriesByTagFunc(tag);\n      return;\n    }\n\n    if (segment.expandable) {\n      return this.checkOtherSegments(segmentIndex + 1).then(() => {\n        this.setSegmentFocus(segmentIndex + 1);\n        this.targetChanged();\n      });\n    } else {\n      this.spliceSegments(segmentIndex + 1);\n    }\n\n    this.setSegmentFocus(segmentIndex + 1);\n    this.targetChanged();\n  }\n\n  spliceSegments(index: any) {\n    this.segments = this.segments.splice(0, index);\n    this.queryModel.segments = this.queryModel.segments.splice(0, index);\n  }\n\n  emptySegments() {\n    this.queryModel.segments = [];\n    this.segments = [];\n  }\n\n  targetTextChanged() {\n    this.updateModelTarget();\n    this.refresh();\n  }\n\n  updateModelTarget() {\n    this.queryModel.updateModelTarget(this.panelCtrl.panel.targets);\n  }\n\n  targetChanged() {\n    if (this.queryModel.error) {\n      return;\n    }\n\n    const oldTarget = this.queryModel.target.target;\n    this.updateModelTarget();\n\n    if (this.queryModel.target !== oldTarget && !this.paused) {\n      this.panelCtrl.refresh();\n    }\n  }\n\n  addFunction(funcDef: any) {\n    const newFunc = this.datasource.createFuncInstance(funcDef, {\n      withDefaultParams: true,\n    });\n    newFunc.added = true;\n    this.queryModel.addFunction(newFunc);\n    this.smartlyHandleNewAliasByNode(newFunc);\n\n    if (this.segments.length === 1 && this.segments[0].fake) {\n      this.emptySegments();\n    }\n\n    if (!newFunc.params.length && newFunc.added) {\n      this.targetChanged();\n    }\n\n    if (newFunc.def.name === 'seriesByTag') {\n      this.parseTarget();\n    }\n  }\n\n  removeFunction(func: any) {\n    this.queryModel.removeFunction(func);\n    this.targetChanged();\n  }\n\n  moveFunction(func: any, offset: any) {\n    this.queryModel.moveFunction(func, offset);\n    this.targetChanged();\n  }\n\n  addSeriesByTagFunc(tag: string) {\n    const newFunc = this.datasource.createFuncInstance('seriesByTag', {\n      withDefaultParams: false,\n    });\n    const tagParam = `${tag}=`;\n    newFunc.params = [tagParam];\n    this.queryModel.addFunction(newFunc);\n    newFunc.added = true;\n\n    this.emptySegments();\n    this.targetChanged();\n    this.parseTarget();\n  }\n\n  smartlyHandleNewAliasByNode(func: { def: { name: string }; params: number[]; added: boolean }) {\n    if (func.def.name !== 'aliasByNode') {\n      return;\n    }\n\n    for (let i = 0; i < this.segments.length; i++) {\n      if (this.segments[i].value.indexOf('*') >= 0) {\n        func.params[0] = i;\n        func.added = false;\n        this.targetChanged();\n        return;\n      }\n    }\n  }\n\n  getAllTags() {\n    return this.datasource.getTags().then((values: any[]) => {\n      const altTags = _.map(values, 'text');\n      altTags.splice(0, 0, this.removeTagValue);\n      return mapToDropdownOptions(altTags);\n    });\n  }\n\n  getTags(index: number, tagPrefix: any) {\n    const tagExpressions = this.queryModel.renderTagExpressions(index);\n    return this.datasource.getTagsAutoComplete(tagExpressions, tagPrefix).then((values: any) => {\n      const altTags = _.map(values, 'text');\n      altTags.splice(0, 0, this.removeTagValue);\n      return mapToDropdownOptions(altTags);\n    });\n  }\n\n  getTagsAsSegments(tagPrefix: string) {\n    const tagExpressions = this.queryModel.renderTagExpressions();\n    return this.datasource.getTagsAutoComplete(tagExpressions, tagPrefix).then((values: any) => {\n      return _.map(values, val => {\n        return this.uiSegmentSrv.newSegment({\n          value: val.text,\n          type: 'tag',\n          expandable: false,\n        });\n      });\n    });\n  }\n\n  getTagOperators() {\n    return mapToDropdownOptions(GRAPHITE_TAG_OPERATORS);\n  }\n\n  getAllTagValues(tag: { key: any }) {\n    const tagKey = tag.key;\n    return this.datasource.getTagValues(tagKey).then((values: any[]) => {\n      const altValues = _.map(values, 'text');\n      return mapToDropdownOptions(altValues);\n    });\n  }\n\n  getTagValues(tag: { key: any }, index: number, valuePrefix: any) {\n    const tagExpressions = this.queryModel.renderTagExpressions(index);\n    const tagKey = tag.key;\n    return this.datasource.getTagValuesAutoComplete(tagExpressions, tagKey, valuePrefix).then((values: any[]) => {\n      const altValues = _.map(values, 'text');\n      // Add template variables as additional values\n      _.eachRight(this.templateSrv.variables, variable => {\n        altValues.push('${' + variable.name + ':regex}');\n      });\n      return mapToDropdownOptions(altValues);\n    });\n  }\n\n  tagChanged(tag: any, tagIndex: any) {\n    this.queryModel.updateTag(tag, tagIndex);\n    this.targetChanged();\n  }\n\n  addNewTag(segment: { value: any }) {\n    const newTagKey = segment.value;\n    const newTag = { key: newTagKey, operator: '=', value: '' };\n    this.queryModel.addTag(newTag);\n    this.targetChanged();\n    this.fixTagSegments();\n  }\n\n  removeTag(index: any) {\n    this.queryModel.removeTag(index);\n    this.targetChanged();\n  }\n\n  fixTagSegments() {\n    // Adding tag with the same name as just removed works incorrectly if single segment is used (instead of array)\n    this.addTagSegments = [this.uiSegmentSrv.newPlusButton()];\n  }\n\n  showDelimiter(index: number) {\n    return index !== this.queryModel.tags.length - 1;\n  }\n\n  pause() {\n    this.paused = true;\n  }\n\n  unpause() {\n    this.paused = false;\n    this.panelCtrl.refresh();\n  }\n\n  getCollapsedText() {\n    return this.target.target;\n  }\n}\n\nfunction mapToDropdownOptions(results: any[]) {\n  return _.map(results, value => {\n    return { text: value, value: value };\n  });\n}\n\nfunction removeTagPrefix(value: string): string {\n  return value.replace(TAG_PREFIX, '');\n}\n","import React, { PureComponent } from 'react';\nimport { DataSourceSettings, SelectableValue } from '@grafana/data';\nimport { Button, FormLabel, Select } from '@grafana/ui';\nimport { GraphiteOptions, GraphiteType } from '../types';\n\nconst graphiteVersions = [\n  { label: '0.9.x', value: '0.9' },\n  { label: '1.0.x', value: '1.0' },\n  { label: '1.1.x', value: '1.1' },\n];\n\nconst graphiteTypes = Object.keys(GraphiteType).map((key: string) => ({\n  label: key,\n  value: (GraphiteType as any)[key],\n}));\n\ninterface Props {\n  value: DataSourceSettings<GraphiteOptions>;\n  onChange: (value: DataSourceSettings<GraphiteOptions>) => void;\n}\n\ninterface State {\n  showMetricTankHelp: boolean;\n}\n\nexport class GraphiteDetails extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      showMetricTankHelp: false,\n    };\n  }\n\n  onChangeHandler = (key: keyof GraphiteOptions) => (newValue: SelectableValue) => {\n    const { value, onChange } = this.props;\n    onChange({\n      ...value,\n      jsonData: {\n        ...value.jsonData,\n        [key]: newValue.value,\n      },\n    });\n  };\n\n  render() {\n    const { value } = this.props;\n    const { showMetricTankHelp } = this.state;\n\n    const currentVersion =\n      graphiteVersions.find(item => item.value === value.jsonData.graphiteVersion) ?? graphiteVersions[2];\n\n    return (\n      <>\n        <h3 className=\"page-heading\">Graphite details</h3>\n        <div className=\"gf-form-group\">\n          <div className=\"gf-form\">\n            <FormLabel tooltip=\"This option controls what functions are available in the Graphite query editor.\">\n              Version\n            </FormLabel>\n            <Select\n              value={currentVersion}\n              options={graphiteVersions}\n              width={8}\n              onChange={this.onChangeHandler('graphiteVersion')}\n            />\n          </div>\n          <div className=\"gf-form-inline\">\n            <FormLabel>Type</FormLabel>\n            <Select\n              options={graphiteTypes}\n              value={graphiteTypes.find(type => type.value === value.jsonData.graphiteType)}\n              width={8}\n              onChange={this.onChangeHandler('graphiteType')}\n            />\n\n            <Button\n              style={{ marginLeft: '8px', marginTop: '5px' }}\n              variant=\"secondary\"\n              size=\"sm\"\n              onClick={() =>\n                this.setState((prevState: State) => ({ showMetricTankHelp: !prevState.showMetricTankHelp }))\n              }\n            >\n              Help <i className={showMetricTankHelp ? 'fa fa-caret-down' : 'fa fa-caret-right'} />\n            </Button>\n          </div>\n          {showMetricTankHelp && (\n            <div className=\"grafana-info-box m-t-2\">\n              <div className=\"alert-body\">\n                <p>\n                  There are different types of Graphite compatible backends. Here you can specify the type you are\n                  using. If you are using{' '}\n                  <a href=\"https://github.com/grafana/metrictank\" className=\"pointer\" target=\"_blank\">\n                    Metrictank\n                  </a>{' '}\n                  then select that here. This will enable Metrictank specific features like query processing meta data.\n                  Metrictank is a multi-tenant timeseries engine for Graphite and friends.\n                </p>\n              </div>\n            </div>\n          )}\n        </div>\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport { DataSourceHttpSettings } from '@grafana/ui';\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { GraphiteDetails } from './GraphiteDetails';\nimport { GraphiteOptions } from '../types';\n\nexport const ConfigEditor = (props: DataSourcePluginOptionsEditorProps<GraphiteOptions>) => {\n  const { options, onOptionsChange } = props;\n\n  return (\n    <>\n      <DataSourceHttpSettings\n        defaultUrl=\"http://localhost:8080\"\n        dataSourceConfig={options}\n        onChange={onOptionsChange}\n      />\n      <GraphiteDetails value={options} onChange={onOptionsChange} />\n    </>\n  );\n};\n","export interface MetricTankResultMeta {\n  'schema-name': string;\n  'schema-retentions': string; //\"1s:35d:20min:5:1542274085,1min:38d:2h:1:true,10min:120d:6h:1:true,2h:2y:6h:2\",\n}\n\n// https://github.com/grafana/metrictank/blob/master/scripts/config/storage-schemas.conf#L15-L46\n\nexport interface RetentionInfo {\n  interval: string;\n  retention?: string;\n  chunkspan?: string;\n  numchunks?: number;\n  ready?: boolean | number; // whether, or as of what data timestamp, the archive is ready for querying.\n}\n\nfunction toInteger(val?: string): number | undefined {\n  if (val) {\n    return parseInt(val, 10);\n  }\n  return undefined;\n}\nfunction toBooleanOrTimestamp(val?: string): number | boolean | undefined {\n  if (val) {\n    if (val === 'true') {\n      return true;\n    }\n    if (val === 'false') {\n      return false;\n    }\n    return parseInt(val, 10);\n  }\n  return undefined;\n}\n\nexport function parseSchemaRetentions(spec: string): RetentionInfo[] {\n  if (!spec) {\n    return [];\n  }\n  return spec.split(',').map(str => {\n    const vals = str.split(':');\n    return {\n      interval: vals[0],\n      retention: vals[1],\n      chunkspan: vals[2],\n      numchunks: toInteger(vals[3]),\n      ready: toBooleanOrTimestamp(vals[4]),\n    };\n  });\n}\n","import React, { PureComponent } from 'react';\nimport { MetadataInspectorProps, DataFrame } from '@grafana/data';\nimport { GraphiteDatasource } from './datasource';\nimport { GraphiteQuery, GraphiteOptions, MetricTankMeta, MetricTankResultMeta } from './types';\nimport { parseSchemaRetentions } from './meta';\n\nexport type Props = MetadataInspectorProps<GraphiteDatasource, GraphiteQuery, GraphiteOptions>;\n\nexport interface State {\n  index: number;\n}\n\nexport class MetricTankMetaInspector extends PureComponent<Props, State> {\n  state = { index: 0 };\n\n  renderInfo = (info: MetricTankResultMeta, frame: DataFrame) => {\n    const buckets = parseSchemaRetentions(info['schema-retentions']);\n    return (\n      <div>\n        <h3>Info</h3>\n        <table>\n          <tbody>\n            {buckets.map(row => (\n              <tr key={row.interval}>\n                <td>{row.interval} &nbsp;</td>\n                <td>{row.retention} &nbsp;</td>\n                <td>{row.chunkspan} &nbsp;</td>\n                <td>{row.numchunks} &nbsp;</td>\n                <td>{row.ready} &nbsp;</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n        <pre>{JSON.stringify(info, null, 2)}</pre>\n      </div>\n    );\n  };\n\n  render() {\n    const { data } = this.props;\n    if (!data || !data.length) {\n      return <div>No Metadata</div>;\n    }\n\n    const frame = data[this.state.index];\n    const meta = frame.meta?.custom as MetricTankMeta;\n    if (!meta || !meta.info) {\n      return <>No Metadatata on DataFrame</>;\n    }\n    return (\n      <div>\n        <h3>MetricTank Request</h3>\n        <pre>{JSON.stringify(meta.request, null, 2)}</pre>\n        {meta.info.map(info => this.renderInfo(info, frame))}\n      </div>\n    );\n  }\n}\n","import { GraphiteDatasource } from './datasource';\nimport { GraphiteQueryCtrl } from './query_ctrl';\nimport { DataSourcePlugin } from '@grafana/data';\nimport { ConfigEditor } from './configuration/ConfigEditor';\nimport { MetricTankMetaInspector } from './MetricTankMetaInspector';\n\nclass AnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n}\n\nexport const plugin = new DataSourcePlugin(GraphiteDatasource)\n  .setQueryCtrl(GraphiteQueryCtrl)\n  .setConfigEditor(ConfigEditor)\n  .setMetadataInspector(MetricTankMetaInspector)\n  .setAnnotationQueryCtrl(AnnotationsQueryCtrl);\n"],"sourceRoot":""}