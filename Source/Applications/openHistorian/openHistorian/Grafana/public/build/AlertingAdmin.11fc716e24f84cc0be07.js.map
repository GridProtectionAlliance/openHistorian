{"version":3,"file":"AlertingAdmin.11fc716e24f84cc0be07.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/components/admin/AlertmanagerConfig.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useExternalAmSelector.ts","webpack://grafana/./public/app/features/alerting/unified/components/admin/AddAlertManagerModal.tsx","webpack://grafana/./public/app/features/alerting/unified/components/admin/ExternalAlertmanagerDataSources.tsx","webpack://grafana/./public/app/features/alerting/unified/components/admin/ExternalAlertmanagers.tsx","webpack://grafana/./public/app/features/alerting/unified/Admin.tsx","webpack://grafana/./public/app/features/alerting/unified/components/AlertingPageWrapper.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertManagerSourceName.ts","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertManagerSources.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useEffect, useState, useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Button, ConfirmModal, TextArea, HorizontalGroup, Field, Form, useStyles2 } from '@grafana/ui';\n\nimport { useAlertManagerSourceName } from '../../hooks/useAlertManagerSourceName';\nimport { useAlertManagersByPermission } from '../../hooks/useAlertManagerSources';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport {\n  deleteAlertManagerConfigAction,\n  fetchAlertManagerConfigAction,\n  updateAlertManagerConfigAction,\n} from '../../state/actions';\nimport { GRAFANA_RULES_SOURCE_NAME, isVanillaPrometheusAlertManagerDataSource } from '../../utils/datasource';\nimport { initialAsyncRequestState } from '../../utils/redux';\nimport { AlertManagerPicker } from '../AlertManagerPicker';\n\ninterface FormValues {\n  configJSON: string;\n}\n\nexport default function AlertmanagerConfig(): JSX.Element {\n  const dispatch = useDispatch();\n  const alertManagers = useAlertManagersByPermission('notification');\n  const [alertManagerSourceName, setAlertManagerSourceName] = useAlertManagerSourceName(alertManagers);\n\n  const [showConfirmDeleteAMConfig, setShowConfirmDeleteAMConfig] = useState(false);\n  const { loading: isDeleting } = useUnifiedAlertingSelector((state) => state.deleteAMConfig);\n  const { loading: isSaving } = useUnifiedAlertingSelector((state) => state.saveAMConfig);\n  const readOnly = alertManagerSourceName ? isVanillaPrometheusAlertManagerDataSource(alertManagerSourceName) : false;\n  const styles = useStyles2(getStyles);\n\n  const configRequests = useUnifiedAlertingSelector((state) => state.amConfigs);\n\n  const {\n    result: config,\n    loading: isLoadingConfig,\n    error: loadingError,\n  } = (alertManagerSourceName && configRequests[alertManagerSourceName]) || initialAsyncRequestState;\n\n  useEffect(() => {\n    if (alertManagerSourceName) {\n      dispatch(fetchAlertManagerConfigAction(alertManagerSourceName));\n    }\n  }, [alertManagerSourceName, dispatch]);\n\n  const resetConfig = () => {\n    if (alertManagerSourceName) {\n      dispatch(deleteAlertManagerConfigAction(alertManagerSourceName));\n    }\n    setShowConfirmDeleteAMConfig(false);\n  };\n\n  const defaultValues = useMemo(\n    (): FormValues => ({\n      configJSON: config ? JSON.stringify(config, null, 2) : '',\n    }),\n    [config]\n  );\n\n  const loading = isDeleting || isLoadingConfig || isSaving;\n\n  const onSubmit = (values: FormValues) => {\n    if (alertManagerSourceName && config) {\n      dispatch(\n        updateAlertManagerConfigAction({\n          newConfig: JSON.parse(values.configJSON),\n          oldConfig: config,\n          alertManagerSourceName,\n          successMessage: 'Alertmanager configuration updated.',\n          refetch: true,\n        })\n      );\n    }\n  };\n\n  return (\n    <div className={styles.container}>\n      <AlertManagerPicker\n        current={alertManagerSourceName}\n        onChange={setAlertManagerSourceName}\n        dataSources={alertManagers}\n      />\n      {loadingError && !loading && (\n        <Alert severity=\"error\" title=\"Error loading Alertmanager configuration\">\n          {loadingError.message || 'Unknown error.'}\n        </Alert>\n      )}\n      {isDeleting && alertManagerSourceName !== GRAFANA_RULES_SOURCE_NAME && (\n        <Alert severity=\"info\" title=\"Resetting Alertmanager configuration\">\n          It might take a while...\n        </Alert>\n      )}\n      {alertManagerSourceName && config && (\n        <Form defaultValues={defaultValues} onSubmit={onSubmit} key={defaultValues.configJSON}>\n          {({ register, errors }) => (\n            <>\n              {!readOnly && (\n                <Field\n                  disabled={loading}\n                  label=\"Configuration\"\n                  invalid={!!errors.configJSON}\n                  error={errors.configJSON?.message}\n                >\n                  <TextArea\n                    {...register('configJSON', {\n                      required: { value: true, message: 'Required.' },\n                      validate: (v) => {\n                        try {\n                          JSON.parse(v);\n                          return true;\n                        } catch (e) {\n                          return e instanceof Error ? e.message : 'Invalid JSON.';\n                        }\n                      },\n                    })}\n                    id=\"configuration\"\n                    rows={25}\n                  />\n                </Field>\n              )}\n              {readOnly && (\n                <Field label=\"Configuration\">\n                  <pre data-testid=\"readonly-config\">{defaultValues.configJSON}</pre>\n                </Field>\n              )}\n              {!readOnly && (\n                <HorizontalGroup>\n                  <Button type=\"submit\" variant=\"primary\" disabled={loading}>\n                    Save\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    disabled={loading}\n                    variant=\"destructive\"\n                    onClick={() => setShowConfirmDeleteAMConfig(true)}\n                  >\n                    Reset configuration\n                  </Button>\n                </HorizontalGroup>\n              )}\n              {!!showConfirmDeleteAMConfig && (\n                <ConfirmModal\n                  isOpen={true}\n                  title=\"Reset Alertmanager configuration\"\n                  body={`Are you sure you want to reset configuration ${\n                    alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME\n                      ? 'for the Grafana Alertmanager'\n                      : `for \"${alertManagerSourceName}\"`\n                  }? Contact points and notification policies will be reset to their defaults.`}\n                  confirmText=\"Yes, reset configuration\"\n                  onConfirm={resetConfig}\n                  onDismiss={() => setShowConfirmDeleteAMConfig(false)}\n                />\n              )}\n            </>\n          )}\n        </Form>\n      )}\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    margin-bottom: ${theme.spacing(4)};\n  `,\n});\n","import { countBy, keyBy } from 'lodash';\nimport { useSelector } from 'react-redux';\n\nimport { DataSourceInstanceSettings, DataSourceSettings } from '@grafana/data';\nimport { AlertManagerDataSourceJsonData } from 'app/plugins/datasource/alertmanager/types';\n\nimport { StoreState } from '../../../../types';\nimport { getAlertManagerDataSources } from '../utils/datasource';\n\nimport { useUnifiedAlertingSelector } from './useUnifiedAlertingSelector';\n\nconst SUFFIX_REGEX = /\\/api\\/v[1|2]\\/alerts/i;\ntype AlertmanagerConfig = { url: string; status: string; actualUrl: string };\n\nexport function useExternalAmSelector(): AlertmanagerConfig[] | [] {\n  const discoveredAlertmanagers = useSelector(\n    (state: StoreState) => state.unifiedAlerting.externalAlertmanagers.discoveredAlertmanagers.result?.data\n  );\n  const alertmanagerConfig = useSelector(\n    (state: StoreState) => state.unifiedAlerting.externalAlertmanagers.alertmanagerConfig.result?.alertmanagers\n  );\n\n  if (!discoveredAlertmanagers || !alertmanagerConfig) {\n    return [];\n  }\n\n  const enabledAlertmanagers: AlertmanagerConfig[] = [];\n  const droppedAlertmanagers: AlertmanagerConfig[] = discoveredAlertmanagers.droppedAlertManagers.map((am) => ({\n    url: am.url.replace(SUFFIX_REGEX, ''),\n    status: 'dropped',\n    actualUrl: am.url,\n  }));\n\n  for (const url of alertmanagerConfig) {\n    if (discoveredAlertmanagers.activeAlertManagers.length === 0) {\n      enabledAlertmanagers.push({\n        url: url,\n        status: 'pending',\n        actualUrl: '',\n      });\n    } else {\n      const matchingActiveAM = discoveredAlertmanagers.activeAlertManagers.find(\n        (am) => am.url === `${url}/api/v2/alerts`\n      );\n      matchingActiveAM\n        ? enabledAlertmanagers.push({\n            url: matchingActiveAM.url.replace(SUFFIX_REGEX, ''),\n            status: 'active',\n            actualUrl: matchingActiveAM.url,\n          })\n        : enabledAlertmanagers.push({\n            url: url,\n            status: 'pending',\n            actualUrl: '',\n          });\n    }\n  }\n\n  return [...enabledAlertmanagers, ...droppedAlertmanagers];\n}\n\nexport interface ExternalDataSourceAM {\n  dataSource: DataSourceInstanceSettings<AlertManagerDataSourceJsonData>;\n  url?: string;\n  status: 'active' | 'pending' | 'dropped';\n  statusInconclusive?: boolean;\n}\n\nexport function useExternalDataSourceAlertmanagers(): ExternalDataSourceAM[] {\n  const externalDsAlertManagers = getAlertManagerDataSources().filter((ds) => ds.jsonData.handleGrafanaManagedAlerts);\n\n  const alertmanagerDatasources = useSelector((state: StoreState) =>\n    keyBy(\n      state.dataSources.dataSources.filter((ds) => ds.type === 'alertmanager'),\n      (ds) => ds.uid\n    )\n  );\n\n  const discoveredAlertmanagers = useUnifiedAlertingSelector(\n    (state) => state.externalAlertmanagers.discoveredAlertmanagers.result?.data\n  );\n\n  const droppedAMUrls = countBy(discoveredAlertmanagers?.droppedAlertManagers, (x) => x.url);\n  const activeAMUrls = countBy(discoveredAlertmanagers?.activeAlertManagers, (x) => x.url);\n\n  return externalDsAlertManagers.map<ExternalDataSourceAM>((dsAm) => {\n    const dsSettings = alertmanagerDatasources[dsAm.uid];\n\n    if (!dsSettings) {\n      return {\n        dataSource: dsAm,\n        status: 'pending',\n      };\n    }\n\n    const amUrl = getDataSourceUrlWithProtocol(dsSettings);\n    const amStatusUrl = `${amUrl}/api/v2/alerts`;\n\n    const matchingDroppedUrls = droppedAMUrls[amStatusUrl] ?? 0;\n    const matchingActiveUrls = activeAMUrls[amStatusUrl] ?? 0;\n\n    const isDropped = matchingDroppedUrls > 0;\n    const isActive = matchingActiveUrls > 0;\n\n    // Multiple Alertmanagers of the same URL may exist (e.g. with different credentials)\n    // Alertmanager response only contains URLs, so in case of duplication, we are not able\n    // to distinguish which is which, resulting in an inconclusive status.\n    const isStatusInconclusive = matchingDroppedUrls + matchingActiveUrls > 1;\n\n    const status = isDropped ? 'dropped' : isActive ? 'active' : 'pending';\n\n    return {\n      dataSource: dsAm,\n      url: dsSettings.url,\n      status,\n      statusInconclusive: isStatusInconclusive,\n    };\n  });\n}\n\nfunction getDataSourceUrlWithProtocol<T>(dsSettings: DataSourceSettings<T>) {\n  const hasProtocol = new RegExp('^[^:]*://').test(dsSettings.url);\n  if (!hasProtocol) {\n    return `http://${dsSettings.url}`; // Grafana append http protocol if there is no any\n  }\n\n  return dsSettings.url;\n}\n","import { css, cx } from '@emotion/css';\nimport React, { FC, useMemo } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Field, FieldArray, Form, Icon, Input, Modal, useStyles2 } from '@grafana/ui';\nimport { AlertmanagerUrl } from 'app/plugins/datasource/alertmanager/types';\n\ninterface Props {\n  onClose: () => void;\n  alertmanagers: AlertmanagerUrl[];\n  onChangeAlertmanagerConfig: (alertmanagers: string[]) => void;\n}\n\nexport const AddAlertManagerModal: FC<Props> = ({ alertmanagers, onChangeAlertmanagerConfig, onClose }) => {\n  const styles = useStyles2(getStyles);\n  const defaultValues: Record<string, AlertmanagerUrl[]> = useMemo(\n    () => ({\n      alertmanagers: alertmanagers,\n    }),\n    [alertmanagers]\n  );\n\n  const modalTitle = (\n    <div className={styles.modalTitle}>\n      <Icon name=\"bell\" className={styles.modalIcon} />\n      <h3>Add Alertmanager</h3>\n    </div>\n  );\n\n  const onSubmit = (values: Record<string, AlertmanagerUrl[]>) => {\n    onChangeAlertmanagerConfig(values.alertmanagers.map((am) => cleanAlertmanagerUrl(am.url)));\n    onClose();\n  };\n\n  return (\n    <Modal title={modalTitle} isOpen={true} onDismiss={onClose} className={styles.modal}>\n      <div className={styles.description}>\n        We use a service discovery method to find existing Alertmanagers for a given URL.\n      </div>\n      <Form onSubmit={onSubmit} defaultValues={defaultValues}>\n        {({ register, control, errors }) => (\n          <div>\n            <FieldArray control={control} name=\"alertmanagers\">\n              {({ fields, append, remove }) => (\n                <div className={styles.fieldArray}>\n                  <div className={styles.bold}>Source url</div>\n                  <div className={styles.muted}>\n                    Authentication can be done via URL (e.g. user:password@myalertmanager.com) and only the Alertmanager\n                    v2 API is supported. The suffix is added internally, there is no need to specify it.\n                  </div>\n                  {fields.map((field, index) => {\n                    return (\n                      <Field\n                        invalid={!!errors?.alertmanagers?.[index]}\n                        error=\"Field is required\"\n                        key={`${field.id}-${index}`}\n                      >\n                        <Input\n                          className={styles.input}\n                          defaultValue={field.url}\n                          {...register(`alertmanagers.${index}.url`, { required: true })}\n                          placeholder=\"http://localhost:9093\"\n                          addonAfter={\n                            <Button\n                              aria-label=\"Remove alertmanager\"\n                              type=\"button\"\n                              onClick={() => remove(index)}\n                              variant=\"destructive\"\n                              className={styles.destroyInputRow}\n                            >\n                              <Icon name=\"trash-alt\" />\n                            </Button>\n                          }\n                        />\n                      </Field>\n                    );\n                  })}\n                  <Button type=\"button\" variant=\"secondary\" onClick={() => append({ url: '' })}>\n                    Add URL\n                  </Button>\n                </div>\n              )}\n            </FieldArray>\n            <div>\n              <Button type=\"submit\" onSubmit={() => onSubmit}>\n                Add Alertmanagers\n              </Button>\n            </div>\n          </div>\n        )}\n      </Form>\n    </Modal>\n  );\n};\n\nfunction cleanAlertmanagerUrl(url: string): string {\n  return url.replace(/\\/$/, '').replace(/\\/api\\/v[1|2]\\/alerts/i, '');\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  const muted = css`\n    color: ${theme.colors.text.secondary};\n  `;\n  return {\n    description: cx(\n      css`\n        margin-bottom: ${theme.spacing(2)};\n      `,\n      muted\n    ),\n    muted: muted,\n    bold: css`\n      font-weight: ${theme.typography.fontWeightBold};\n    `,\n    modal: css``,\n    modalIcon: cx(\n      muted,\n      css`\n        margin-right: ${theme.spacing(1)};\n      `\n    ),\n    modalTitle: css`\n      display: flex;\n    `,\n    input: css`\n      margin-bottom: ${theme.spacing(1)};\n      margin-right: ${theme.spacing(1)};\n    `,\n    inputRow: css`\n      display: flex;\n    `,\n    destroyInputRow: css`\n      padding: ${theme.spacing(1)};\n    `,\n    fieldArray: css`\n      margin-bottom: ${theme.spacing(4)};\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport { capitalize } from 'lodash';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Badge, CallToActionCard, Card, Icon, LinkButton, Tooltip, useStyles2 } from '@grafana/ui';\n\nimport { ExternalDataSourceAM } from '../../hooks/useExternalAmSelector';\nimport { makeDataSourceLink } from '../../utils/misc';\n\nexport interface ExternalAlertManagerDataSourcesProps {\n  alertmanagers: ExternalDataSourceAM[];\n  inactive: boolean;\n}\n\nexport function ExternalAlertmanagerDataSources({ alertmanagers, inactive }: ExternalAlertManagerDataSourcesProps) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <>\n      <h5>Alertmanagers data sources</h5>\n      <div className={styles.muted}>\n        Alertmanager data sources support a configuration setting that allows you to choose to send Grafana-managed\n        alerts to that Alertmanager. <br />\n        Below, you can see the list of all Alertmanager data sources that have this setting enabled.\n      </div>\n      {alertmanagers.length === 0 && (\n        <CallToActionCard\n          message={\n            <div>\n              There are no Alertmanager data sources configured to receive Grafana-managed alerts. <br />\n              You can change this by selecting Receive Grafana Alerts in a data source configuration.\n            </div>\n          }\n          callToActionElement={<LinkButton href=\"/datasources\">Go to data sources</LinkButton>}\n          className={styles.externalDsCTA}\n        />\n      )}\n      {alertmanagers.length > 0 && (\n        <div className={styles.externalDs}>\n          {alertmanagers.map((am) => (\n            <ExternalAMdataSourceCard key={am.dataSource.uid} alertmanager={am} inactive={inactive} />\n          ))}\n        </div>\n      )}\n    </>\n  );\n}\n\ninterface ExternalAMdataSourceCardProps {\n  alertmanager: ExternalDataSourceAM;\n  inactive: boolean;\n}\n\nexport function ExternalAMdataSourceCard({ alertmanager, inactive }: ExternalAMdataSourceCardProps) {\n  const styles = useStyles2(getStyles);\n\n  const { dataSource, status, statusInconclusive, url } = alertmanager;\n\n  return (\n    <Card>\n      <Card.Heading className={styles.externalHeading}>\n        {dataSource.name}{' '}\n        {statusInconclusive && (\n          <Tooltip content=\"Multiple Alertmangers have the same URL configured. The state might be inconclusive.\">\n            <Icon name=\"exclamation-triangle\" size=\"md\" className={styles.externalWarningIcon} />\n          </Tooltip>\n        )}\n      </Card.Heading>\n      <Card.Figure>\n        <img\n          src=\"public/app/plugins/datasource/alertmanager/img/logo.svg\"\n          alt=\"\"\n          height=\"40px\"\n          width=\"40px\"\n          style={{ objectFit: 'contain' }}\n        />\n      </Card.Figure>\n      <Card.Tags>\n        {inactive ? (\n          <Badge\n            text=\"Inactive\"\n            color=\"red\"\n            tooltip=\"Grafana is configured to send alerts to the built-in internal Alertmanager only. External Alertmanagers do not receive any alerts.\"\n          />\n        ) : (\n          <Badge\n            text={capitalize(status)}\n            color={status === 'dropped' ? 'red' : status === 'active' ? 'green' : 'orange'}\n          />\n        )}\n      </Card.Tags>\n      <Card.Meta>{url}</Card.Meta>\n      <Card.Actions>\n        <LinkButton href={makeDataSourceLink(dataSource)} size=\"sm\" variant=\"secondary\">\n          Go to datasouce\n        </LinkButton>\n      </Card.Actions>\n    </Card>\n  );\n}\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  muted: css`\n    color: ${theme.colors.text.secondary};\n  `,\n  externalHeading: css`\n    justify-content: flex-start;\n  `,\n  externalWarningIcon: css`\n    margin: ${theme.spacing(0, 1)};\n    fill: ${theme.colors.warning.main};\n  `,\n  externalDs: css`\n    display: grid;\n    gap: ${theme.spacing(1)};\n    padding: ${theme.spacing(2, 0)};\n  `,\n  externalDsCTA: css`\n    margin: ${theme.spacing(2, 0)};\n  `,\n});\n","import { css, cx } from '@emotion/css';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport {\n  Alert,\n  Button,\n  ConfirmModal,\n  Field,\n  HorizontalGroup,\n  Icon,\n  RadioButtonGroup,\n  Tooltip,\n  useStyles2,\n  useTheme2,\n} from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { loadDataSources } from 'app/features/datasources/state/actions';\nimport { AlertmanagerChoice } from 'app/plugins/datasource/alertmanager/types';\nimport { StoreState } from 'app/types/store';\n\nimport { useExternalAmSelector, useExternalDataSourceAlertmanagers } from '../../hooks/useExternalAmSelector';\nimport {\n  addExternalAlertmanagersAction,\n  fetchExternalAlertmanagersAction,\n  fetchExternalAlertmanagersConfigAction,\n} from '../../state/actions';\n\nimport { AddAlertManagerModal } from './AddAlertManagerModal';\nimport { ExternalAlertmanagerDataSources } from './ExternalAlertmanagerDataSources';\n\nconst alertmanagerChoices: Array<SelectableValue<AlertmanagerChoice>> = [\n  { value: AlertmanagerChoice.Internal, label: 'Only Internal' },\n  { value: AlertmanagerChoice.External, label: 'Only External' },\n  { value: AlertmanagerChoice.All, label: 'Both internal and external' },\n];\n\nexport const ExternalAlertmanagers = () => {\n  const styles = useStyles2(getStyles);\n  const dispatch = useDispatch();\n  const [modalState, setModalState] = useState({ open: false, payload: [{ url: '' }] });\n  const [deleteModalState, setDeleteModalState] = useState({ open: false, index: 0 });\n\n  const externalAlertManagers = useExternalAmSelector();\n  const externalDsAlertManagers = useExternalDataSourceAlertmanagers();\n\n  const alertmanagersChoice = useSelector(\n    (state: StoreState) => state.unifiedAlerting.externalAlertmanagers.alertmanagerConfig.result?.alertmanagersChoice\n  );\n  const theme = useTheme2();\n\n  useEffect(() => {\n    dispatch(fetchExternalAlertmanagersAction());\n    dispatch(fetchExternalAlertmanagersConfigAction());\n    dispatch(loadDataSources());\n    const interval = setInterval(() => dispatch(fetchExternalAlertmanagersAction()), 5000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [dispatch]);\n\n  const onDelete = useCallback(\n    (index: number) => {\n      // to delete we need to filter the alertmanager from the list and repost\n      const newList = (externalAlertManagers ?? [])\n        .filter((am, i) => i !== index)\n        .map((am) => {\n          return am.url;\n        });\n      dispatch(\n        addExternalAlertmanagersAction({\n          alertmanagers: newList,\n          alertmanagersChoice: alertmanagersChoice ?? AlertmanagerChoice.All,\n        })\n      );\n      setDeleteModalState({ open: false, index: 0 });\n    },\n    [externalAlertManagers, dispatch, alertmanagersChoice]\n  );\n\n  const onEdit = useCallback(() => {\n    const ams = externalAlertManagers ? [...externalAlertManagers] : [{ url: '' }];\n    setModalState((state) => ({\n      ...state,\n      open: true,\n      payload: ams,\n    }));\n  }, [setModalState, externalAlertManagers]);\n\n  const onOpenModal = useCallback(() => {\n    setModalState((state) => {\n      const ams = externalAlertManagers ? [...externalAlertManagers, { url: '' }] : [{ url: '' }];\n      return {\n        ...state,\n        open: true,\n        payload: ams,\n      };\n    });\n  }, [externalAlertManagers]);\n\n  const onCloseModal = useCallback(() => {\n    setModalState((state) => ({\n      ...state,\n      open: false,\n    }));\n  }, [setModalState]);\n\n  const onChangeAlertmanagerChoice = (alertmanagersChoice: AlertmanagerChoice) => {\n    dispatch(\n      addExternalAlertmanagersAction({ alertmanagers: externalAlertManagers.map((am) => am.url), alertmanagersChoice })\n    );\n  };\n\n  const onChangeAlertmanagers = (alertmanagers: string[]) => {\n    dispatch(\n      addExternalAlertmanagersAction({\n        alertmanagers,\n        alertmanagersChoice: alertmanagersChoice ?? AlertmanagerChoice.All,\n      })\n    );\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active':\n        return theme.colors.success.main;\n\n      case 'pending':\n        return theme.colors.warning.main;\n\n      default:\n        return theme.colors.error.main;\n    }\n  };\n\n  const noAlertmanagers = externalAlertManagers?.length === 0;\n  const noDsAlertmanagers = externalDsAlertManagers?.length === 0;\n  const hasExternalAlertmanagers = !(noAlertmanagers && noDsAlertmanagers);\n\n  return (\n    <div>\n      <h4>External Alertmanagers</h4>\n      <Alert title=\"External Alertmanager changes\" severity=\"info\">\n        The way you configure external Alertmanagers has changed.\n        <br />\n        You can now use configured Alertmanager data sources as receivers of your Grafana-managed alerts.\n        <br />\n        For more information, refer to our documentation.\n      </Alert>\n\n      <ExternalAlertmanagerDataSources\n        alertmanagers={externalDsAlertManagers}\n        inactive={alertmanagersChoice === AlertmanagerChoice.Internal}\n      />\n\n      {hasExternalAlertmanagers && (\n        <div className={styles.amChoice}>\n          <Field\n            label=\"Send alerts to\"\n            description=\"Configures how the Grafana alert rule evaluation engine Alertmanager handles your alerts. Internal (Grafana built-in Alertmanager), External (All Alertmanagers configured above), or both.\"\n          >\n            <RadioButtonGroup\n              options={alertmanagerChoices}\n              value={alertmanagersChoice}\n              onChange={(value) => onChangeAlertmanagerChoice(value!)}\n            />\n          </Field>\n        </div>\n      )}\n\n      <h5>Alertmanagers by URL</h5>\n      <Alert severity=\"warning\" title=\"Deprecation Notice\">\n        The URL-based configuration of Alertmanagers is deprecated and will be removed in Grafana 9.2.0.\n        <br />\n        Use Alertmanager data sources to configure your external Alertmanagers.\n      </Alert>\n\n      <div className={styles.muted}>\n        You can have your Grafana managed alerts be delivered to one or many external Alertmanager(s) in addition to the\n        internal Alertmanager by specifying their URLs below.\n      </div>\n      <div className={styles.actions}>\n        {!noAlertmanagers && (\n          <Button type=\"button\" onClick={onOpenModal}>\n            Add Alertmanager\n          </Button>\n        )}\n      </div>\n\n      {noAlertmanagers ? (\n        <EmptyListCTA\n          title=\"You have not added any external alertmanagers\"\n          onClick={onOpenModal}\n          buttonTitle=\"Add Alertmanager\"\n          buttonIcon=\"bell-slash\"\n        />\n      ) : (\n        <>\n          <table className={cx('filter-table form-inline filter-table--hover', styles.table)}>\n            <thead>\n              <tr>\n                <th>Url</th>\n                <th>Status</th>\n                <th style={{ width: '2%' }}>Action</th>\n              </tr>\n            </thead>\n            <tbody>\n              {externalAlertManagers?.map((am, index) => {\n                return (\n                  <tr key={index}>\n                    <td>\n                      <span className={styles.url}>{am.url}</span>\n                      {am.actualUrl ? (\n                        <Tooltip content={`Discovered ${am.actualUrl} from ${am.url}`} theme=\"info\">\n                          <Icon name=\"info-circle\" />\n                        </Tooltip>\n                      ) : null}\n                    </td>\n                    <td>\n                      <Icon name=\"heart\" style={{ color: getStatusColor(am.status) }} title={am.status} />\n                    </td>\n                    <td>\n                      <HorizontalGroup>\n                        <Button variant=\"secondary\" type=\"button\" onClick={onEdit} aria-label=\"Edit alertmanager\">\n                          <Icon name=\"pen\" />\n                        </Button>\n                        <Button\n                          variant=\"destructive\"\n                          aria-label=\"Remove alertmanager\"\n                          type=\"button\"\n                          onClick={() => setDeleteModalState({ open: true, index })}\n                        >\n                          <Icon name=\"trash-alt\" />\n                        </Button>\n                      </HorizontalGroup>\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </>\n      )}\n\n      <ConfirmModal\n        isOpen={deleteModalState.open}\n        title=\"Remove Alertmanager\"\n        body=\"Are you sure you want to remove this Alertmanager\"\n        confirmText=\"Remove\"\n        onConfirm={() => onDelete(deleteModalState.index)}\n        onDismiss={() => setDeleteModalState({ open: false, index: 0 })}\n      />\n      {modalState.open && (\n        <AddAlertManagerModal\n          onClose={onCloseModal}\n          alertmanagers={modalState.payload}\n          onChangeAlertmanagerConfig={onChangeAlertmanagers}\n        />\n      )}\n    </div>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  url: css`\n    margin-right: ${theme.spacing(1)};\n  `,\n  muted: css`\n    color: ${theme.colors.text.secondary};\n  `,\n  actions: css`\n    margin-top: ${theme.spacing(2)};\n    display: flex;\n    justify-content: flex-end;\n  `,\n  table: css`\n    margin-bottom: ${theme.spacing(2)};\n  `,\n  amChoice: css`\n    margin-bottom: ${theme.spacing(4)};\n  `,\n});\n","import React from 'react';\n\nimport { AlertingPageWrapper } from './components/AlertingPageWrapper';\nimport AlertmanagerConfig from './components/admin/AlertmanagerConfig';\nimport { ExternalAlertmanagers } from './components/admin/ExternalAlertmanagers';\nimport { useAlertManagerSourceName } from './hooks/useAlertManagerSourceName';\nimport { useAlertManagersByPermission } from './hooks/useAlertManagerSources';\nimport { GRAFANA_RULES_SOURCE_NAME } from './utils/datasource';\n\nexport default function Admin(): JSX.Element {\n  const alertManagers = useAlertManagersByPermission('notification');\n  const [alertManagerSourceName] = useAlertManagerSourceName(alertManagers);\n\n  const isGrafanaAmSelected = alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME;\n\n  return (\n    <AlertingPageWrapper pageId=\"alerting-admin\">\n      <AlertmanagerConfig test-id=\"admin-alertmanagerconfig\" />\n      {isGrafanaAmSelected && <ExternalAlertmanagers test-id=\"admin-externalalertmanagers\" />}\n    </AlertingPageWrapper>\n  );\n}\n","import React, { FC } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { Page } from 'app/core/components/Page/Page';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { StoreState } from 'app/types/store';\n\ninterface Props {\n  pageId: string;\n  isLoading?: boolean;\n}\n\nexport const AlertingPageWrapper: FC<Props> = ({ children, pageId, isLoading }) => {\n  const navModel = getNavModel(\n    useSelector((state: StoreState) => state.navIndex),\n    pageId\n  );\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents isLoading={isLoading}>{children}</Page.Contents>\n    </Page>\n  );\n};\n","import { useCallback } from 'react';\n\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport store from 'app/core/store';\n\nimport { ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, ALERTMANAGER_NAME_QUERY_KEY } from '../utils/constants';\nimport { AlertManagerDataSource, GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\nfunction useIsAlertManagerAvailable(availableAlertManagers: AlertManagerDataSource[]) {\n  return useCallback(\n    (alertManagerName: string) => {\n      const availableAlertManagersNames = availableAlertManagers.map((am) => am.name);\n      return availableAlertManagersNames.includes(alertManagerName);\n    },\n    [availableAlertManagers]\n  );\n}\n\n/* This will return am name either from query params or from local storage or a default (grafana).\n * Due to RBAC permissions Grafana Managed Alert manager or external alert managers may not be available\n * In the worst case neihter GMA nor external alert manager is available\n */\nexport function useAlertManagerSourceName(\n  availableAlertManagers: AlertManagerDataSource[]\n): [string | undefined, (alertManagerSourceName: string) => void] {\n  const [queryParams, updateQueryParams] = useQueryParams();\n  const isAlertManagerAvailable = useIsAlertManagerAvailable(availableAlertManagers);\n\n  const update = useCallback(\n    (alertManagerSourceName: string) => {\n      if (!isAlertManagerAvailable(alertManagerSourceName)) {\n        return;\n      }\n      if (alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME) {\n        store.delete(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: null });\n      } else {\n        store.set(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, alertManagerSourceName);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: alertManagerSourceName });\n      }\n    },\n    [updateQueryParams, isAlertManagerAvailable]\n  );\n\n  const querySource = queryParams[ALERTMANAGER_NAME_QUERY_KEY];\n\n  if (querySource && typeof querySource === 'string') {\n    if (isAlertManagerAvailable(querySource)) {\n      return [querySource, update];\n    } else {\n      // non existing alertmanager\n      return [undefined, update];\n    }\n  }\n\n  const storeSource = store.get(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n  if (storeSource && typeof storeSource === 'string' && isAlertManagerAvailable(storeSource)) {\n    update(storeSource);\n    return [storeSource, update];\n  }\n\n  if (isAlertManagerAvailable(GRAFANA_RULES_SOURCE_NAME)) {\n    return [GRAFANA_RULES_SOURCE_NAME, update];\n  }\n\n  return [undefined, update];\n}\n","import { useMemo } from 'react';\n\nimport { getAlertManagerDataSourcesByPermission } from '../utils/datasource';\n\nexport function useAlertManagersByPermission(accessType: 'instance' | 'notification') {\n  return useMemo(() => getAlertManagerDataSourcesByPermission(accessType), [accessType]);\n}\n"],"names":["AlertmanagerConfig","dispatch","useDispatch","alertManagers","useAlertManagersByPermission","alertManagerSourceName","setAlertManagerSourceName","useAlertManagerSourceName","showConfirmDeleteAMConfig","setShowConfirmDeleteAMConfig","useState","loading","isDeleting","useUnifiedAlertingSelector","state","deleteAMConfig","isSaving","saveAMConfig","readOnly","isVanillaPrometheusAlertManagerDataSource","styles","useStyles2","getStyles","configRequests","amConfigs","result","config","isLoadingConfig","error","loadingError","initialAsyncRequestState","useEffect","fetchAlertManagerConfigAction","resetConfig","deleteAlertManagerConfigAction","defaultValues","useMemo","configJSON","JSON","stringify","className","container","AlertManagerPicker","current","onChange","dataSources","Alert","severity","title","message","GRAFANA_RULES_SOURCE_NAME","Form","onSubmit","values","updateAlertManagerConfigAction","newConfig","parse","oldConfig","successMessage","refetch","register","errors","Field","disabled","label","invalid","TextArea","required","value","validate","v","e","Error","id","rows","HorizontalGroup","Button","type","variant","onClick","ConfirmModal","isOpen","body","confirmText","onConfirm","onDismiss","theme","css","spacing","SUFFIX_REGEX","useExternalDataSourceAlertmanagers","externalDsAlertManagers","getAlertManagerDataSources","filter","ds","jsonData","handleGrafanaManagedAlerts","alertmanagerDatasources","useSelector","keyBy","uid","discoveredAlertmanagers","externalAlertmanagers","data","droppedAMUrls","countBy","droppedAlertManagers","x","url","activeAMUrls","activeAlertManagers","map","dsAm","dsSettings","dataSource","status","amUrl","RegExp","test","getDataSourceUrlWithProtocol","amStatusUrl","matchingDroppedUrls","matchingActiveUrls","isStatusInconclusive","statusInconclusive","AddAlertManagerModal","alertmanagers","onChangeAlertmanagerConfig","onClose","modalTitle","Icon","name","modalIcon","am","replace","Modal","modal","description","control","FieldArray","fields","append","remove","fieldArray","bold","muted","field","index","Input","input","defaultValue","placeholder","addonAfter","destroyInputRow","colors","text","secondary","cx","typography","fontWeightBold","inputRow","ExternalAlertmanagerDataSources","inactive","length","CallToActionCard","callToActionElement","LinkButton","href","externalDsCTA","externalDs","ExternalAMdataSourceCard","alertmanager","Card","externalHeading","Tooltip","content","size","externalWarningIcon","src","alt","height","width","style","objectFit","Badge","color","tooltip","capitalize","makeDataSourceLink","warning","main","alertmanagerChoices","AlertmanagerChoice","ExternalAlertmanagers","modalState","setModalState","open","payload","deleteModalState","setDeleteModalState","externalAlertManagers","unifiedAlerting","alertmanagerConfig","enabledAlertmanagers","droppedAlertmanagers","actualUrl","push","matchingActiveAM","find","useExternalAmSelector","alertmanagersChoice","useTheme2","fetchExternalAlertmanagersAction","fetchExternalAlertmanagersConfigAction","loadDataSources","interval","setInterval","clearInterval","onDelete","useCallback","newList","i","addExternalAlertmanagersAction","onEdit","ams","onOpenModal","onCloseModal","getStatusColor","success","noAlertmanagers","noDsAlertmanagers","hasExternalAlertmanagers","amChoice","RadioButtonGroup","options","onChangeAlertmanagerChoice","actions","EmptyListCTA","buttonTitle","buttonIcon","table","Admin","isGrafanaAmSelected","AlertingPageWrapper","pageId","children","isLoading","navModel","getNavModel","navIndex","availableAlertManagers","queryParams","updateQueryParams","useQueryParams","isAlertManagerAvailable","alertManagerName","includes","useIsAlertManagerAvailable","update","store","ALERTMANAGER_NAME_LOCAL_STORAGE_KEY","ALERTMANAGER_NAME_QUERY_KEY","querySource","undefined","storeSource","accessType","getAlertManagerDataSourcesByPermission"],"sourceRoot":""}