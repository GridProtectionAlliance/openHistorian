{"version":3,"file":"AlertingRedirectToRule.26a4e0610d6be4dd860e.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/RedirectToRuleViewer.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-viewer/RuleViewerLayout.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useCombinedRule.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { useLocation } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Alert, Card, Icon, LoadingPlaceholder, useStyles2, withErrorBoundary } from '@grafana/ui';\n\nimport { AlertLabels } from './components/AlertLabels';\nimport { RuleViewerLayout } from './components/rule-viewer/RuleViewerLayout';\nimport { useCombinedRulesMatching } from './hooks/useCombinedRule';\nimport { getRulesSourceByName } from './utils/datasource';\nimport { createViewLink } from './utils/misc';\n\nconst pageTitle = 'Find rule';\nconst subUrl = config.appSubUrl;\n\nfunction useRuleFindParams() {\n  // DO NOT USE REACT-ROUTER HOOKS FOR THIS CODE\n  // React-router's useLocation/useParams/props.match are broken and don't preserve original param values when parsing location\n  // so, they cannot be used to parse name and sourceName path params\n  // React-router messes the pathname up resulting in a string that is neither encoded nor decoded\n  // Relevant issue: https://github.com/remix-run/history/issues/505#issuecomment-453175833\n  // It was probably fixed in React-Router v6\n  const location = useLocation();\n  const segments = location.pathname?.replace(subUrl, '').split('/') ?? []; // [\"\", \"alerting\", \"{sourceName}\", \"{name}]\n\n  const name = decodeURIComponent(segments[3]);\n  const sourceName = decodeURIComponent(segments[2]);\n\n  return { name, sourceName };\n}\n\nexport function RedirectToRuleViewer(): JSX.Element | null {\n  const styles = useStyles2(getStyles);\n\n  const { name, sourceName } = useRuleFindParams();\n  const { error, loading, result: rules, dispatched } = useCombinedRulesMatching(name, sourceName);\n\n  if (error) {\n    return (\n      <RuleViewerLayout title={pageTitle}>\n        <Alert title={`Failed to load rules from ${sourceName}`}>\n          <details className={styles.errorMessage}>\n            {error.message}\n            <br />\n            {!!error?.stack && error.stack}\n          </details>\n        </Alert>\n      </RuleViewerLayout>\n    );\n  }\n\n  if (loading || !dispatched || !Array.isArray(rules)) {\n    return (\n      <RuleViewerLayout title={pageTitle}>\n        <LoadingPlaceholder text=\"Loading rule...\" />\n      </RuleViewerLayout>\n    );\n  }\n\n  if (!name || !sourceName) {\n    return <Redirect to=\"/notfound\" />;\n  }\n\n  const rulesSource = getRulesSourceByName(sourceName);\n\n  if (!rulesSource) {\n    return (\n      <RuleViewerLayout title={pageTitle}>\n        <Alert title=\"Could not view rule\">\n          <details className={styles.errorMessage}>{`Could not find data source with name: ${sourceName}.`}</details>\n        </Alert>\n      </RuleViewerLayout>\n    );\n  }\n\n  if (rules.length === 1) {\n    const [rule] = rules;\n    const to = createViewLink(rulesSource, rule, '/alerting/list').replace(subUrl, '');\n    return <Redirect to={to} />;\n  }\n\n  return (\n    <RuleViewerLayout title={pageTitle}>\n      <div>\n        Several rules in <span className={styles.param}>{sourceName}</span> matched the name{' '}\n        <span className={styles.param}>{name}</span>, please select the rule you want to view.\n      </div>\n      <div className={styles.rules}>\n        {rules.map((rule, index) => {\n          return (\n            <Card key={`${rule.name}-${index}`} href={createViewLink(rulesSource, rule, '/alerting/list')}>\n              <Card.Heading>{rule.name}</Card.Heading>\n              <Card.Meta separator={''}>\n                <Icon name=\"folder\" />\n                <span className={styles.namespace}>{`${rule.namespace.name} / ${rule.group.name}`}</span>\n              </Card.Meta>\n              <Card.Tags>\n                <AlertLabels labels={rule.labels} />\n              </Card.Tags>\n            </Card>\n          );\n        })}\n      </div>\n    </RuleViewerLayout>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    param: css`\n      font-style: italic;\n      color: ${theme.colors.text.secondary};\n    `,\n    rules: css`\n      margin-top: ${theme.spacing(2)};\n    `,\n    namespace: css`\n      margin-left: ${theme.spacing(1)};\n    `,\n    errorMessage: css`\n      white-space: pre-wrap;\n    `,\n  };\n}\n\nexport default withErrorBoundary(RedirectToRuleViewer, { style: 'page' });\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2, NavModelItem } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\n\ntype Props = {\n  children: React.ReactNode | React.ReactNode[];\n  title: string;\n  wrapInContent?: boolean;\n};\n\nconst defaultPageNav: Partial<NavModelItem> = {\n  icon: 'bell',\n  id: 'alert-rule-view',\n  breadcrumbs: [{ title: 'Alert rules', url: 'alerting/list' }],\n};\n\nexport function RuleViewerLayout(props: Props): JSX.Element | null {\n  const { wrapInContent = true, children, title } = props;\n  const styles = useStyles2(getPageStyles);\n\n  return (\n    <Page pageNav={{ ...defaultPageNav, text: title }} navId=\"alert-list\">\n      <Page.Contents>\n        <div className={styles.content}>{wrapInContent ? <RuleViewerLayoutContent {...props} /> : children}</div>\n      </Page.Contents>\n    </Page>\n  );\n}\n\ntype ContentProps = {\n  children: React.ReactNode | React.ReactNode[];\n  padding?: number;\n};\n\nexport function RuleViewerLayoutContent({ children, padding = 2 }: ContentProps): JSX.Element | null {\n  const styles = useStyles2(getContentStyles(padding));\n  return <div className={styles.wrapper}>{children}</div>;\n}\n\nconst getPageStyles = (theme: GrafanaTheme2) => {\n  return {\n    content: css`\n      max-width: ${theme.breakpoints.values.xxl}px;\n    `,\n  };\n};\n\nconst getContentStyles = (padding: number) => (theme: GrafanaTheme2) => {\n  return {\n    wrapper: css`\n      background: ${theme.colors.background.primary};\n      border: 1px solid ${theme.colors.border.weak};\n      border-radius: ${theme.shape.borderRadius()};\n      padding: ${theme.spacing(padding)};\n    `,\n  };\n};\n","import { useMemo } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { useDispatch } from 'app/types';\nimport { CombinedRule, RuleIdentifier, RuleNamespace } from 'app/types/unified-alerting';\nimport { RulerRulesConfigDTO } from 'app/types/unified-alerting-dto';\n\nimport { fetchPromAndRulerRulesAction } from '../state/actions';\nimport { AsyncRequestMapSlice, AsyncRequestState, initialAsyncRequestState } from '../utils/redux';\nimport * as ruleId from '../utils/rule-id';\nimport { isRulerNotSupportedResponse } from '../utils/rules';\n\nimport { useCombinedRuleNamespaces } from './useCombinedRuleNamespaces';\nimport { useUnifiedAlertingSelector } from './useUnifiedAlertingSelector';\n\nexport function useCombinedRule(\n  identifier: RuleIdentifier | undefined,\n  ruleSourceName: string | undefined\n): AsyncRequestState<CombinedRule> {\n  const requestState = useCombinedRulesLoader(ruleSourceName);\n  const combinedRules = useCombinedRuleNamespaces(ruleSourceName);\n\n  const rule = useMemo(() => {\n    if (!identifier || !ruleSourceName || combinedRules.length === 0) {\n      return;\n    }\n\n    for (const namespace of combinedRules) {\n      for (const group of namespace.groups) {\n        for (const rule of group.rules) {\n          const id = ruleId.fromCombinedRule(ruleSourceName, rule);\n\n          if (ruleId.equal(id, identifier)) {\n            return rule;\n          }\n        }\n      }\n    }\n\n    return;\n  }, [identifier, ruleSourceName, combinedRules]);\n\n  return {\n    ...requestState,\n    result: rule,\n  };\n}\n\nexport function useCombinedRulesMatching(\n  ruleName: string | undefined,\n  ruleSourceName: string | undefined\n): AsyncRequestState<CombinedRule[]> {\n  const requestState = useCombinedRulesLoader(ruleSourceName);\n  const combinedRules = useCombinedRuleNamespaces(ruleSourceName);\n\n  const rules = useMemo(() => {\n    if (!ruleName || !ruleSourceName || combinedRules.length === 0) {\n      return [];\n    }\n\n    const rules: CombinedRule[] = [];\n\n    for (const namespace of combinedRules) {\n      for (const group of namespace.groups) {\n        for (const rule of group.rules) {\n          if (rule.name === ruleName) {\n            rules.push(rule);\n          }\n        }\n      }\n    }\n\n    return rules;\n  }, [ruleName, ruleSourceName, combinedRules]);\n\n  return {\n    ...requestState,\n    result: rules,\n  };\n}\n\nfunction useCombinedRulesLoader(rulesSourceName: string | undefined): AsyncRequestState<void> {\n  const dispatch = useDispatch();\n  const promRuleRequests = useUnifiedAlertingSelector((state) => state.promRules);\n  const promRuleRequest = getRequestState(rulesSourceName, promRuleRequests);\n  const rulerRuleRequests = useUnifiedAlertingSelector((state) => state.rulerRules);\n  const rulerRuleRequest = getRequestState(rulesSourceName, rulerRuleRequests);\n\n  const { loading } = useAsync(async () => {\n    if (!rulesSourceName) {\n      return;\n    }\n\n    await dispatch(fetchPromAndRulerRulesAction({ rulesSourceName }));\n  }, [dispatch, rulesSourceName]);\n\n  return {\n    loading,\n    error: promRuleRequest.error ?? isRulerNotSupportedResponse(rulerRuleRequest) ? undefined : rulerRuleRequest.error,\n    dispatched: promRuleRequest.dispatched && rulerRuleRequest.dispatched,\n  };\n}\n\nfunction getRequestState(\n  ruleSourceName: string | undefined,\n  slice: AsyncRequestMapSlice<RulerRulesConfigDTO | RuleNamespace[] | null>\n): AsyncRequestState<RulerRulesConfigDTO | RuleNamespace[] | null> {\n  if (!ruleSourceName) {\n    return initialAsyncRequestState;\n  }\n\n  const state = slice[ruleSourceName];\n\n  if (!state) {\n    return initialAsyncRequestState;\n  }\n\n  return state;\n}\n"],"names":["pageTitle","subUrl","useRuleFindParams","segments","name","sourceName","RedirectToRuleViewer","styles","getStyles","error","loading","rules","dispatched","rulesSource","rule","to","index","theme","defaultPageNav","RuleViewerLayout","props","wrapInContent","children","title","getPageStyles","RuleViewerLayoutContent","padding","getContentStyles","useCombinedRule","identifier","ruleSourceName","requestState","useCombinedRulesLoader","combinedRules","namespace","group","id","useCombinedRulesMatching","ruleName","rulesSourceName","dispatch","promRuleRequests","state","promRuleRequest","getRequestState","rulerRuleRequests","rulerRuleRequest","slice"],"sourceRoot":""}