{"version":3,"file":"DataConnectionsPage.7fa606a4927f119867ef.js","mappings":"+JAEA,MAAMA,EAAaC,IAAAA,OAAe,eAAgB,CAAC,YAG7CC,EAAiB,CACrBF,EACAC,IAAAA,OAAe,sBAAuB,IACtCA,IAAAA,OAAe,qBAAsB,IACrCA,IAAAA,OAAe,oBAAqB,IACpCA,IAAAA,OAAe,mBAAoB,IACnCA,IAAAA,OAAe,kBAAmB,IAClCA,IAAAA,OAAe,iBAAkB,KAKnC,K,qECPO,MAAME,EAGXC,c,iBAAc,G,EAAA,c,EAAA,M,sFACZC,KAAKC,SAAWC,EAAAA,GAAAA,SAAAA,QAGlBC,aACE,OAAOH,KAAKC,SAASG,MAAMC,GAA2B,QAAfA,EAAQC,KAGjDC,SAAwC,MACtC,IAAIC,EAAWR,KAAKC,SACpB,MAAMQ,EAAW,CACfC,YAAa,IAHuB,2BAA9BC,EAA8B,yBAA9BA,EAA8B,gBAMtC,IAAK,MAAML,KAAMK,EAAM,CAErB,GAAkB,iBAAPL,EAAiB,CAC1BG,EAAIG,KAAOH,EAAIC,YAAYJ,GAC3B,MAGF,MAAMO,EAAOL,EAASJ,MAAMU,GAAUA,EAAMR,KAAOA,IACzC,MAAV,GAAIO,EACFJ,EAAIC,YAAYK,KAAKF,GACrBJ,EAAII,KAAOA,EACXJ,EAAIG,KAAOC,EACXL,EAAQ,UAAGK,EAAKL,gBAAR,QAAoB,GAIhC,aAAIC,EAAIG,YAAR,OAAI,EAAUJ,SACZ,IAAK,MAAMQ,KAAQP,EAAIG,KAAKJ,SAAU,OACpCQ,EAAKC,OAASD,EAAKE,OAAL,UAAaT,EAAII,YAAjB,aAAa,EAAUK,KAIzC,OAAOT,EAGTU,iBACE,OAAOA,KASJ,SAASA,IACd,OAAOC,EAAc,iBAAkB,aAGlC,SAASA,EAAcC,EAAcC,GAC1C,MAAMT,EAAO,CACXQ,KAAAA,EACAC,SAAAA,EACAC,KAAM,wBAER,MAAO,CACLV,KAAMA,EACND,KAAMC,G,aAIVlB,EAAAA,GAAAA,QAAmB,cAAeG,I,qEClEnB,MAAM0B,UAAsBC,EAAAA,cACzCC,SACE,MAAM,YAAEC,EAAF,WAAeC,EAAf,eAA2BC,EAA3B,OAA2CC,EAA3C,YAAmDC,EAAc,0BAA6B/B,KAAKgC,MACnGC,EAA4C,CAAEC,KAAMN,MAAAA,OAAF,EAAEA,EAAYM,KAAMC,SAAUP,MAAAA,OAAF,EAAEA,EAAYO,UAMlG,OAJIL,IACFG,EAAUH,OAASA,IAInB,iBAAKM,UAAU,kBAAf,WACE,gBAAKA,UAAU,wBAAf,UACE,SAAC,EAAAC,YAAD,CAAaC,MAAOX,EAAaY,SAAUV,EAAgBE,YAAaA,MAEzEH,IAAc,SAAC,EAAAY,WAAD,iBAAgBP,EAAhB,UAA4BL,EAAWa,e,sPCRvD,MAAMC,EAAkB,IAA4C,IAA3C,GAAEpC,EAAF,SAAMqC,GAAqC,EACzE,MAAOlC,EAAKmC,IAAUC,EAAAA,EAAAA,UAA0B,OACxCP,MAAOQ,EAAT,MAAiBC,EAAjB,QAAwBC,GCbG1C,CAAAA,IAC1B2C,EAAAA,EAAAA,IAASC,UACd,MAAMC,QAAmBC,EAAAA,EAAAA,GAAkB9C,GAE3C,IAAK6C,EACH,MAAM,IAAIE,MAAO,oBAAmB/C,MAGtC,GAAI6C,EAAWG,OAASC,EAAAA,WAAAA,IACtB,MAAM,IAAIF,MAAO,qCAAoCF,EAAWG,UAGlE,IAAKH,EAAWK,QACd,MAAM,IAAIH,MAAO,gBAAe/C,qBAGlC,aAAamD,EAAAA,EAAAA,IAAgBN,MDHWO,CAAmBpD,GACvDqD,GAAcC,EAAAA,EAAAA,OACd,SAAEC,IAAaC,EAAAA,EAAAA,MAErB,OAAIf,GACK,SAACgB,EAAA,SAAD,CAAa1D,SAASe,EAAAA,EAAAA,IAAc2B,EAAMiB,QAASjB,EAAMkB,OAAOrD,QAIvE,gCACGoC,IAAO,OAAI,SAACkB,EAAA,EAAD,MACXzD,IAAO,SAACsD,EAAA,SAAD,CAAa1D,QAASI,EAAIG,QAChCoC,GAAWF,GAAUA,EAAOqB,OAC5B,SAACrB,EAAOqB,KAAR,CACEC,KAAMtB,EAAOsB,KACbC,SAAU1B,GAAYkB,EACtBS,aAAc1B,EACd2B,MAAOZ,EACPa,KAAMX,QE7BT,SAASY,IACd,MAAMC,GAAIC,EAAAA,EAAAA,YAAWC,GAErB,OACE,gBAAKxC,UAAWsC,EAAEG,UAAlB,UACE,SAACnC,EAAD,CAAiBpC,GAAIwE,EAAAA,EAAyBnC,SAAUoC,EAAAA,GAAAA,sBAK9D,MAAMH,EAAaI,IAAD,CAEhBH,UAAWI,EAAAA,GAAI;;2BCdV,SAASC,EAAgBlD,GAC9B,MAAMmD,EAAMnD,EAAMoD,MAAMC,OAAOF,IAEzBG,EADS,IAAIC,gBAAgBvD,EAAMwD,SAASC,QAC5BC,IAAI,QAE1B,OAAO,SAACC,EAAA,EAAD,CAAgBR,IAAKA,EAAKG,OAAQA,ICVpC,SAASM,IACd,OAAO,IAAP,GAAO,uECDF,SAASC,IACd,OAAO,oFCYM,SAASC,IACtB,MAAMC,ECLmB,MAAM,MAC/B,MAAQlC,SAAUmC,IAAgBlC,EAAAA,EAAAA,MAC5BmC,GAAWC,EAAAA,EAAAA,cAAaC,GAAsBA,EAAMF,WACpDpF,EAAOoF,EAASG,EAAAA,IAChBxF,EAAOC,EACPwF,EAAkBrF,GACtBgF,IAAiB,IAAGI,EAAAA,MAA+B,iCAAZpF,EAAKV,GACxCgG,EAAgBtF,GAAuBgF,EAAYO,WAAWvF,EAAKE,KAAO,IAOhF,OALAN,EAAKJ,SAAL,UAAgBI,EAAKJ,gBAArB,aAAgB,EAAegG,KAAKxF,GAAD,iBAC9BA,EAD8B,CAEjCC,OAAQqF,EAAatF,IAASqF,EAAerF,OAGxC,CACLH,KAAAA,EACAD,KAAAA,IDXe6F,GAEjB,OACE,SAAC,cAAD,CACEnE,MAAO,CACLoE,IAAK3B,EAAAA,GAAAA,eACL4B,KAAM5B,EAAAA,GAAAA,YACN6B,KAAM7B,EAAAA,GAAAA,gBACN8B,WAAY9B,EAAAA,GAAAA,uBALhB,UAQE,SAAChB,EAAA,EAAD,CAAMgC,SAAUA,EAAhB,UACE,SAAChC,EAAA,WAAD,WACE,UAAC,KAAD,YACE,SAAC,KAAD,CAAOS,KAAMO,EAAAA,GAAAA,eAAuB+B,UAAWC,EAAAA,KAC/C,SAAC,KAAD,CAAOvC,KAAMO,EAAAA,GAAAA,gBAAwB+B,UAAW5B,KAChD,SAAC,KAAD,CAAOV,KAAMO,EAAAA,GAAAA,YAAoB+B,UAAWE,EAAAA,KAC5C,SAAC,KAAD,CAAOxC,KAAMO,EAAAA,GAAAA,QAAgB+B,UAAWlB,KACxC,SAAC,KAAD,CAAOpB,KAAMO,EAAAA,GAAAA,kBAA0B+B,UAAWrC,KAClD,SAAC,KAAD,CAAOD,KAAMO,EAAAA,GAAAA,gBAAwB+B,UAAWjB,IANlD,OASE,SAAC,KAAD,CAAOiB,UAAWE,EAAAA,gB,mKE5BvB,SAASC,IACd,MAAMC,GAAWC,EAAAA,EAAAA,eACXtF,GAAiBuF,EAAAA,EAAAA,cAAaC,GAAcH,GAASI,EAAAA,EAAAA,IAA0BD,KAAK,CAACH,IACrFvF,GAAcuE,EAAAA,EAAAA,cAAY,QAAC,YAAEqB,GAAH,SAAiCC,EAAAA,EAAAA,IAA0BD,MACrFE,EAAsBC,EAAAA,GAAAA,cAAyBC,EAAAA,GAAAA,mBAErD,OACE,SAACC,EAAD,CACEjG,YAAaA,EACbE,eAAgBA,EAChB4F,oBAAqBA,IAWpB,SAASG,EAAT,GAAoG,IAAjE,YAAEjG,EAAF,eAAeE,EAAf,oBAA+B4F,GAAkC,EACzG,MACM7F,EAAa,CACjBM,MAFwB2F,EAAAA,EAAAA,MAEAnB,IACxBjE,MAAO,kBACPN,UAAWsF,GAGb,OACE,SAACjG,EAAA,EAAD,CAAeG,YAAaA,EAAaE,eAAgBA,EAAgBD,WAAYA,GAAgB,cCzBlG,SAASoF,KACdc,EAAAA,EAAAA,MAEA,MAAMP,GAAcrB,EAAAA,EAAAA,cAAaC,IAAsB4B,EAAAA,EAAAA,IAAe5B,EAAMoB,eACtES,GAAmB9B,EAAAA,EAAAA,cAAY,QAAC,YAAEqB,GAAH,SAAiCU,EAAAA,EAAAA,IAAoBV,MACpFW,GAAahC,EAAAA,EAAAA,cAAY,QAAC,YAAEqB,GAAH,SAAiCA,EAAYW,cACtEC,EAAkBT,EAAAA,GAAAA,cAAyBC,EAAAA,GAAAA,mBAEjD,OACE,SAACS,EAAD,CACEb,YAAaA,EACbS,iBAAkBA,EAClBK,WAAYH,EACZC,gBAAiBA,IAYhB,SAASC,EAAT,GAAuG,IAA1E,YAAEb,EAAF,iBAAeS,EAAf,UAAiCK,EAAjC,gBAA4CF,GAA8B,EAC5G,MAAMG,GAASC,EAAAA,EAAAA,WAAU3D,GACnB4D,GAAoBX,EAAAA,EAAAA,MAE1B,OAAIQ,EACK,IAAP,GAAO,SAACnE,EAAA,EAAD,KAGgB,IAArB8D,GAEA,SAACS,EAAA,EAAD,CACEC,gBAAiBP,EACjB1F,MAAM,0BACNkG,WAAW,WACXC,WAAYJ,EAAkB9B,IAC9BmC,YAAY,kBACZC,OAAO,gEACPC,WAAW,8FACXC,gBAAgB,aAChBC,aAAa,YAMjB,uCAEE,SAAChC,EAAD,MAGA,eAAI7E,UAAWkG,EAAOY,KAAtB,SACG3B,EAAYf,KAAK2C,IAEd,yBACE,UAAC,EAAAC,KAAD,CAAMlH,KAAMsG,EAAkB5B,KAAKyC,QAAQ,SAAUF,EAAWhE,KAAhE,WACE,SAAC,EAAAiE,KAAA,QAAD,UAAeD,EAAWG,QAC1B,SAAC,EAAAF,KAAA,OAAD,WACE,gBAAKG,IAAKJ,EAAWK,YAAaC,IAAI,GAAGC,OAAO,OAAOC,MAAM,OAAOvH,UAAWkG,EAAOsB,UAExF,SAAC,EAAAR,KAAA,KAAD,UACG,CACCD,EAAWU,SACXV,EAAWjI,IACXiI,EAAWW,YAAX,OAAwB,SAAC,EAAAC,IAAD,CAAuBT,KAAM,UAAWU,WAAY,GAA3C,wBAVhCb,EAAWhE,YAsBhC,MAAMP,EAAY,KACT,CACLsE,MAAMjE,EAAAA,EAAAA,KAAI,CACRgF,UAAW,OACXC,QAAS,SAGXN,MAAM3E,EAAAA,EAAAA,KAAI,CACRkF,UAAW,e,yIC9FV,SAASC,IACd,MAAMC,GAASC,EAAAA,EAAAA,OACT,UAAEjC,IAAckC,EAAAA,EAAAA,MAChBvF,GAAQwF,EAAAA,EAAAA,YAEd,OAAInC,GAA+B,IAAlBgC,EAAOI,OACf,MAIP,SAAC,EAAAC,QAAD,CACE,aAAYC,EAAAA,GAAAA,MAAAA,YAAAA,qBACZC,SAAS,UACTC,SAAS,iCACT3J,IAAI,qEAJN,UAME,kCACE,4LADF,uEAME,SAAC,EAAAyF,KAAD,CACEmE,MAAOT,EACPjI,UAAW6C,EAAAA,GAAI;;YAGf8F,WAAahI,IACX,gBACEX,UAAW6C,EAAAA,GAAI;8BACCD,EAAMgG,QAAQC;gBAFhC,UAKE,UAAC,EAAAC,gBAAD,CAAiBF,QAAQ,KAAKG,QAAQ,aAAaC,MAAM,SAAzD,WACE,4BAASrI,EAAMsI,YACf,SAAC,EAAAC,qBAAD,CACEC,OAAQC,EAAoCzI,EAAM0I,WAClDrJ,UAAW6C,EAAAA,GAAI;;kCAajC,SAASuG,EAAoCE,GAC3C,OAAQA,GACN,KAAKC,EAAAA,gBAAAA,iBACH,OAAOC,EAAAA,sBAAAA,QACT,KAAKD,EAAAA,gBAAAA,iBACH,OAAOC,EAAAA,sBAAAA,QACT,KAAKD,EAAAA,gBAAAA,kBACH,OAAOC,EAAAA,sBAAAA,SACT,QACE,OAAOA,EAAAA,sBAAAA,SCxDN,SAASC,EAAT,GAAkE,YAAtC,QAAEC,EAAF,iBAAWC,GAA2B,EACvE,MAAMC,EAAwC,YAA5BD,EAAiBE,OAC7BC,GAAeF,IAAcD,EAAiBI,WAC9CC,GAAgB,UAAAL,EAAiBM,YAAjB,mBAAuBC,aAAvB,eAA8B7B,QAAS,EAAIsB,EAAiBM,KAAKC,MAAM,GAAK,KAE5FhE,GAAS3D,EAAAA,EAAAA,YAAWC,GAE1B,OACE,UAAC,EAAAwE,KAAD,CAAMhH,WAAWmK,EAAAA,EAAAA,IAAGjE,EAAOkE,KAAM,eAAgBV,QAASI,EAAcJ,EAAU,OAAlF,WAEE,SAAC,EAAA1C,KAAA,QAAD,CACEhH,UAAWkG,EAAOmE,QAClB,aAAYC,EAAAA,GAAAA,MAAAA,cAAAA,oBAAqDX,EAAiBzC,MAFpF,SAIGyC,EAAiBzC,QAIpB,SAAC,EAAAF,KAAA,OAAD,CAAagC,MAAM,SAAShJ,UAAWkG,EAAOqE,OAA9C,UACE,gBAAKvK,UAAWkG,EAAOsB,KAAML,IAAKwC,EAAiBM,KAAKO,MAAMC,MAAOpD,IAAI,QAG3E,SAAC,EAAAL,KAAA,YAAD,CAAkBhH,UAAWkG,EAAOwE,YAApC,SAAkDf,EAAiBM,KAAKS,eAGtEd,IACA,SAAC,EAAA5C,KAAA,KAAD,CAAWhH,UAAWkG,EAAOlE,KAA7B,UACE,SAAC,EAAAkH,qBAAD,CAAsBC,OAAQQ,EAAiBgB,eAKnD,SAAC,EAAA3D,KAAA,QAAD,CAAchH,UAAWkG,EAAO0E,QAAhC,SACGZ,IACC,SAAC,EAAA5J,WAAD,CACE,aAAa,GAAEuJ,EAAiBzC,oBAChCpH,KAAO,GAAEkK,EAAclL,gCACvBK,KAAK,oBACLuK,QAAUmB,GAAMA,EAAEC,kBAClBC,IAAI,WACJrL,OAAO,SACPsL,QAAQ,YAPV,SASGhB,EAAc9C,YAQ3B,SAAS1E,EAAUI,GACjB,MAAO,CACLyH,SAASxH,EAAAA,EAAAA,KAAI,CACXoI,SAAUrI,EAAMsI,GAAGC,WAAWd,QAAQe,GACtCC,WAAY,YAEdd,QAAQ1H,EAAAA,EAAAA,KAAI,CACV0E,MAAO,UACP+D,YAAa,MACb,QAAS,CACP/D,MAAO3E,EAAMgG,QAAQ,MAGzB5G,MAAMa,EAAAA,EAAAA,KAAI,CACR0I,UAAW,MACXC,SAAU,aAEZd,aAAa7H,EAAAA,EAAAA,KAAI,CACf4I,OAAQ,MACRR,SAAUrI,EAAMuI,WAAWO,KAAK7C,KAElC+B,SAAS/H,EAAAA,EAAAA,KAAI,CACX2I,SAAU,WACVG,UAAW,SACXJ,UAAW,MACXK,QAAS,EAET,oDAAqD,CACnDA,QAAS,KAGbxB,MAAMvH,EAAAA,EAAAA,KAAI,CACRgJ,kBAAoB,6JAMtBrE,MAAM3E,EAAAA,EAAAA,KAAI,CACRyI,YAAa1I,EAAMsI,GAAGtC,QAAQkD,GAC9BC,WAAYnJ,EAAMsI,GAAGtC,QAAQC,GAC7BtB,MAAO3E,EAAMgG,QAAQ,GACrBoD,UAAWpJ,EAAMgG,QAAQ,MC1FxB,SAASqD,EAAT,GAAqF,IAArD,kBAAEC,EAAF,sBAAqBC,GAAgC,EAC1F,OAAKD,GAAsBA,EAAkB7D,QAK3C,SAAC,EAAA9D,KAAD,CACEmE,MAAOwD,EACPE,WAAaxN,GAASA,EAAKV,GAAGmO,WAC9B1D,WAAa/J,IAAS,SAAC6K,EAAD,CAAoBE,iBAAkB/K,EAAM8K,QAAS,IAAMyC,EAAsBvN,KACvGoB,UAAW6C,EAAAA,GAAI;;;;UARV,KCDJ,SAASyJ,EAAT,GAA4E,IAA9C,WAAEC,EAAF,sBAAcJ,GAAgC,EACjF,OACE,gCAEGI,EAAWnI,KAAI,QAAC,GAAElG,EAAF,MAAMmC,EAAN,QAAamM,GAAd,SACd,iBAAKxM,UAAU,2BAAf,WACE,gBAAKA,UAAU,mCAAmC9B,GAAIA,EAAtD,SACGmC,KAEH,SAAC4L,EAAD,CAAwBC,kBAAmBM,EAASL,sBAAuBA,MAJ9BjO,MAHnD,OAYE,gBAAK8B,UAAU,uBAAf,UACE,SAAC,EAAAI,WAAD,CACE4K,QAAQ,YACRlL,KAAK,wEACLJ,OAAO,SACPqL,IAAI,WAJN,gE,qBCXD,SAASpG,KACd8H,EAAAA,EAAAA,MAEA,MAAM3H,GAAWC,EAAAA,EAAAA,eACX2H,GAAsB5I,EAAAA,EAAAA,cAAaxB,IAAkBqK,EAAAA,EAAAA,IAA6BrK,EAAE6C,eACpF5F,GAAcuE,EAAAA,EAAAA,cAAaxB,GAAkBA,EAAE6C,YAAYyH,4BAC3D3G,GAAYnC,EAAAA,EAAAA,cAAaxB,GAAkBA,EAAE6C,YAAY0H,uBACzDC,GAAuBhJ,EAAAA,EAAAA,cAAaxB,GAAkBA,EAAE6C,YAAYoH,aACpEQ,GAAkBC,EAAAA,EAAAA,MAGxB,OACE,SAACC,EAAD,CACE9H,YAAauH,EACbI,qBAAsBA,EACtBvN,YAAaA,EACb0G,UAAWA,EACX8G,gBAAiBA,EACjBG,iBATsBjI,GAAcH,GAASqI,EAAAA,EAAAA,IAA6BlI,MAuBzE,SAASgI,EAAT,GAOO,IAPoB,YAChC9H,EADgC,qBAEhC2H,EAFgC,YAGhCvN,EAHgC,UAIhC0G,EAJgC,gBAKhC8G,EALgC,iBAMhCG,GACY,EACZ,MAAM9G,GAAoBX,EAAAA,EAAAA,MAE1B,OAAIQ,EACK,IAAP,GAAO,SAACnE,EAAA,EAAD,MAIP,iCAEE,iBAAK9B,UAAU,kBAAf,WACE,SAAC,EAAAC,YAAD,CAAaC,MAAOX,EAAaY,SAAU+M,EAAkBvN,YAAY,2BAD3E,OAEE,gBAAKK,UAAU,8BACf,SAAC,EAAAI,WAAD,CAAYN,KAAMsG,EAAkB7B,KAAM6I,KAAK,UAAUpC,QAAQ,YAAY7L,KAAK,aAAlF,wBAMAI,IAAD,OAAgB,SAACyI,EAAD,OAGjB,2BACGzI,IACC,SAAC0M,EAAD,CAAwBC,kBAAmB/G,EAAagH,sBAAuBY,KAE/ExN,IACA,SAAC+M,EAAD,CAAsBC,WAAYO,EAAsBX,sBAAuBY,Y,sNC9ElF,MAAMM,EAActJ,GAAmCA,EAAMyI,QAEvDc,GAAcC,EAAAA,EAAAA,IAAeF,GAAY,QAAC,MAAE3E,GAAH,SAAeA,KAExD8E,GAAoBD,EAAAA,EAAAA,IAAeF,GAAY,QAAC,SAAEI,GAAH,SAAkBA,EAASC,gBAExEC,UAAF,aAAaC,GAAeC,EAAAA,GAAAA,aAA4BP,GAO/DQ,EAAuB,CAACC,EAAkBC,KAC9CT,EAAAA,EAAAA,IANuBQ,CAAAA,IACvBR,EAAAA,EAAAA,IAAeI,GAAYnB,GACzBA,EAAQyB,QAAQvN,GAAyB,cAAbqN,EAA2BrN,EAAOwN,aAAexN,EAAOyN,WAIvEC,CAAgBL,IAAYvB,GACzCA,EAAQyB,QAAQvN,GAA4B,QAAjBsN,GAA0BtN,EAAOQ,OAAS8M,MAuB5DhQ,EAAO,CAACqQ,EAAkBN,EAAkBC,KACvDT,EAAAA,EAAAA,IACEO,EAAqBC,EAAUC,GAtBZK,CAAAA,IACrBd,EAAAA,EAAAA,IAAeI,GAAYnB,GACR,KAAb6B,EACK,GAGF7B,EAAQyB,QAAQvN,IACrB,MAAM4N,EAAmB,GASzB,OARI5N,EAAOwG,MACToH,EAAO3P,KAAK+B,EAAOwG,KAAKqH,eAGtB7N,EAAO8N,SACTF,EAAO3P,KAAK+B,EAAO8N,QAAQD,eAGtBD,EAAOG,MAAMC,GAAMA,EAAEC,UAASC,EAAAA,EAAAA,yBAAwBP,GAAUE,sBAOzEM,CAAcR,IACd,CAACS,EAAiBC,IACI,KAAbV,EAAkBS,EAAkBC,IAIpCC,GAAqBzB,EAAAA,EAAAA,IAAeI,GAAYnB,GAC3DA,EACIA,EACGyB,QAAQgB,GAAMC,QAAQD,EAAEtO,SACxByD,KACE6K,IAAD,CACEhG,SAAUgG,EAAE/Q,GACZmL,UAAW4F,EAAGtO,UAGpB,KAIOwO,EAAiBC,IAC5B7B,EAAAA,EAAAA,IAAeF,GAAY,QAAC,SAAEgC,EAAW,IAAd,SAAuBA,EAASD,MAEhDE,EAA0BF,IACrC7B,EAAAA,EAAAA,IAAe4B,EAAcC,IAAcG,IAAYA,MAAAA,OAAA,EAAAA,EAASpG,UAAWqG,EAAAA,GAAAA,UAEhEC,EAAsBL,IACjC7B,EAAAA,EAAAA,IAAe4B,EAAcC,IAAcG,IACzCA,MAAAA,OAAA,EAAAA,EAASpG,UAAWqG,EAAAA,GAAAA,SAAyBD,MAAAA,OAA7C,EAA6CA,EAAS5O,MAAQ,OCjDrD+O,EAAuB,IAKrB,IALsB,MACnCvN,EAAQ,GAD2B,SAEnC4L,EAAW,YAFwB,aAGnCC,EAAe,MAHoB,OAInC2B,EAASC,EAAAA,GAAAA,SACI,EACbC,IAEA,MAAMC,GAAWhM,EAAAA,EAAAA,aAAY9F,EAAKmE,EAAO4L,EAAUC,KAC7C,UAAE/H,EAAF,MAAatF,GAAUwH,IAG7B,MAAO,CACLlC,UAAAA,EACAtF,MAAAA,EACA6L,SALwBuD,EAAAA,EAAAA,IAAYD,EAAUH,KAerCK,EAAgB9R,IAC3B2R,IACAI,EAAgB/R,IAET4F,EAAAA,EAAAA,cAAaC,GAAmC6J,EAAW7J,EAAO7F,MAG9DgK,EAAe,KAC1B2H,KAEO/L,EAAAA,EAAAA,aAAYkL,IAGRkB,EAAa,KACxB,MAAMpL,GAAWC,EAAAA,EAAAA,eACjB,MAAO,CAAC7G,EAAYiS,EAAkBC,IAAyBtL,GAASuL,EAAAA,EAAAA,IAAQ,CAAEnS,GAAAA,EAAIiS,QAAAA,EAASC,WAAAA,MAGpFE,EAAe,KAC1B,MAAMxL,GAAWC,EAAAA,EAAAA,eAEjB,OAAQ7G,GAAe4G,GAASyL,EAAAA,EAAAA,IAAUrS,KAG/BsS,EAA8B,IAExB,QADH1M,EAAAA,EAAAA,aAAY2L,EAAmBgB,EAAAA,GAAAA,aAIlCtI,EAAiB,KAIrB,CAAElC,WAHSnC,EAAAA,EAAAA,aAAYwL,EAAuBoB,EAAAA,GAAAA,aAGjC/P,OAFNmD,EAAAA,EAAAA,aAAY2L,EAAmBiB,EAAAA,GAAAA,eAKlCC,EAAwB,KAI5B,CAAE1K,WAHSnC,EAAAA,EAAAA,aAAYwL,EAAuBsB,EAAAA,GAAAA,aAGjCjQ,OAFNmD,EAAAA,EAAAA,aAAY2L,EAAmBmB,EAAAA,GAAAA,eAKlCC,EAAmB,KAIvB,CAAEC,cAHYhN,EAAAA,EAAAA,aAAYwL,EAAuBe,EAAAA,GAAAA,aAGjC1P,OAFTmD,EAAAA,EAAAA,aAAY2L,EAAmBY,EAAAA,GAAAA,eAKlCU,EAAqB,KAIzB,CAAEC,gBAHclN,EAAAA,EAAAA,aAAYwL,EAAuBiB,EAAAA,GAAAA,aAGjC5P,OAFXmD,EAAAA,EAAAA,aAAY2L,EAAmBc,EAAAA,GAAAA,eAMlCV,EAAc,KACzB,MAAM/K,GAAWC,EAAAA,EAAAA,eACXkM,GAAenN,EAAAA,EAAAA,cDjCmBsL,ECiCmBsB,EAAAA,GAAAA,YDhC3DnD,EAAAA,EAAAA,IAAe4B,EAAcC,IAAcG,QAAwB2B,IAAZ3B,MADfH,IAAAA,GCmCxC+B,EAAAA,EAAAA,YAAU,KACRF,GAAgBnM,GAAS4L,EAAAA,EAAAA,SACxB,KAGQT,EAAmB/R,IAC9B,MAAM4G,GAAWC,EAAAA,EAAAA,eACXrE,GAASoD,EAAAA,EAAAA,cAAaC,GAAmC6J,EAAW7J,EAAO7F,KAE3EkT,IADiBtN,EAAAA,EAAAA,aAAYwL,EAAuBsB,EAAAA,GAAAA,cACrBlQ,IAAWA,EAAO2Q,SAEvDF,EAAAA,EAAAA,YAAU,KACRC,GAAetM,GAAS8L,EAAAA,EAAAA,IAAa1S,MACpC,CAACwC,KAGO4Q,EAAiB,KAC5B,MAAMxM,GAAWC,EAAAA,EAAAA,eAGjB,MAAO,CACL2I,aAHkB5J,EAAAA,EAAAA,aAAY0J,GAI9B+D,eAAiBC,GAA6B1M,GAASyM,EAAAA,EAAAA,IAAeC","sources":["webpack://grafana/./public/app/angular/core_module.ts","webpack://grafana/./public/app/angular/services/nav_model_srv.ts","webpack://grafana/./public/app/core/components/PageActionBar/PageActionBar.tsx","webpack://grafana/./public/app/features/plugins/components/AppPluginLoader.tsx","webpack://grafana/./public/app/features/plugins/hooks/useImportAppPlugin.ts","webpack://grafana/./public/app/features/data-connections/tabs/CloudIntegrations/CloudIntegrations.tsx","webpack://grafana/./public/app/features/data-connections/tabs/DataSourcesEdit/DataSourcesEdit.tsx","webpack://grafana/./public/app/features/data-connections/tabs/Plugins/Plugins.tsx","webpack://grafana/./public/app/features/data-connections/tabs/RecordedQueries/RecordedQueries.tsx","webpack://grafana/./public/app/features/data-connections/DataConnectionsPage.tsx","webpack://grafana/./public/app/features/data-connections/hooks/useNavModel.ts","webpack://grafana/./public/app/features/datasources/components/DataSourcesListHeader.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourcesList.tsx","webpack://grafana/./public/app/features/plugins/components/PluginsErrorsInfo.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceTypeCard.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceTypeCardList.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceCategories.tsx","webpack://grafana/./public/app/features/datasources/components/NewDataSource.tsx","webpack://grafana/./public/app/features/plugins/admin/state/selectors.ts","webpack://grafana/./public/app/features/plugins/admin/state/hooks.ts"],"sourcesContent":["import angular from 'angular';\n\nconst coreModule = angular.module('grafana.core', ['ngRoute']);\n\n// legacy modules\nconst angularModules = [\n  coreModule,\n  angular.module('grafana.controllers', []),\n  angular.module('grafana.directives', []),\n  angular.module('grafana.factories', []),\n  angular.module('grafana.services', []),\n  angular.module('grafana.filters', []),\n  angular.module('grafana.routes', []),\n];\n\nexport { angularModules, coreModule };\n\nexport default coreModule;\n","import { NavModel, NavModelItem } from '@grafana/data';\nimport coreModule from 'app/angular/core_module';\nimport config from 'app/core/config';\n\ninterface Nav {\n  breadcrumbs: NavModelItem[];\n  node?: NavModelItem;\n  main?: NavModelItem;\n}\n\nexport class NavModelSrv {\n  navItems: NavModelItem[];\n\n  constructor() {\n    this.navItems = config.bootData.navTree;\n  }\n\n  getCfgNode() {\n    return this.navItems.find((navItem) => navItem.id === 'cfg');\n  }\n\n  getNav(...args: Array<string | number>) {\n    let children = this.navItems;\n    const nav: Nav = {\n      breadcrumbs: [],\n    };\n\n    for (const id of args) {\n      // if its a number then it's the index to use for main\n      if (typeof id === 'number') {\n        nav.main = nav.breadcrumbs[id];\n        break;\n      }\n\n      const node = children.find((child) => child.id === id);\n      if (node) {\n        nav.breadcrumbs.push(node);\n        nav.node = node;\n        nav.main = node;\n        children = node.children ?? [];\n      }\n    }\n\n    if (nav.main?.children) {\n      for (const item of nav.main.children) {\n        item.active = item.url === nav.node?.url;\n      }\n    }\n\n    return nav;\n  }\n\n  getNotFoundNav() {\n    return getNotFoundNav(); // the exported function\n  }\n}\n\nexport function getExceptionNav(error: any): NavModel {\n  console.error(error);\n  return getWarningNav('Exception thrown', 'See console for details');\n}\n\nexport function getNotFoundNav(): NavModel {\n  return getWarningNav('Page not found', '404 Error');\n}\n\nexport function getWarningNav(text: string, subTitle?: string): NavModel {\n  const node = {\n    text,\n    subTitle,\n    icon: 'exclamation-triangle',\n  };\n  return {\n    node: node,\n    main: node,\n  };\n}\n\ncoreModule.service('navModelSrv', NavModelSrv);\n","import React, { PureComponent } from 'react';\n\nimport { LinkButton, FilterInput } from '@grafana/ui';\n\nexport interface Props {\n  searchQuery: string;\n  setSearchQuery: (value: string) => void;\n  linkButton?: { href: string; title: string; disabled?: boolean };\n  target?: string;\n  placeholder?: string;\n}\n\nexport default class PageActionBar extends PureComponent<Props> {\n  render() {\n    const { searchQuery, linkButton, setSearchQuery, target, placeholder = 'Search by name or type' } = this.props;\n    const linkProps: typeof LinkButton.defaultProps = { href: linkButton?.href, disabled: linkButton?.disabled };\n\n    if (target) {\n      linkProps.target = target;\n    }\n\n    return (\n      <div className=\"page-action-bar\">\n        <div className=\"gf-form gf-form--grow\">\n          <FilterInput value={searchQuery} onChange={setSearchQuery} placeholder={placeholder} />\n        </div>\n        {linkButton && <LinkButton {...linkProps}>{linkButton.title}</LinkButton>}\n      </div>\n    );\n  }\n}\n","import React, { useState } from 'react';\nimport { useLocation, useParams } from 'react-router-dom';\n\nimport { NavModel } from '@grafana/data';\nimport { getWarningNav } from 'app/angular/services/nav_model_srv';\nimport { Page } from 'app/core/components/Page/Page';\nimport PageLoader from 'app/core/components/PageLoader/PageLoader';\n\nimport { useImportAppPlugin } from '../hooks/useImportAppPlugin';\n\ntype AppPluginLoaderProps = {\n  // The id of the app plugin to be loaded\n  id: string;\n  // The base URL path - defaults to the current path\n  basePath?: string;\n};\n\n// This component can be used to render an app-plugin based on its plugin ID.\nexport const AppPluginLoader = ({ id, basePath }: AppPluginLoaderProps) => {\n  const [nav, setNav] = useState<NavModel | null>(null);\n  const { value: plugin, error, loading } = useImportAppPlugin(id);\n  const queryParams = useParams();\n  const { pathname } = useLocation();\n\n  if (error) {\n    return <Page.Header navItem={getWarningNav(error.message, error.stack).main} />;\n  }\n\n  return (\n    <>\n      {loading && <PageLoader />}\n      {nav && <Page.Header navItem={nav.main} />}\n      {!loading && plugin && plugin.root && (\n        <plugin.root\n          meta={plugin.meta}\n          basename={basePath || pathname}\n          onNavChanged={setNav}\n          query={queryParams}\n          path={pathname}\n        />\n      )}\n    </>\n  );\n};\n","import useAsync from 'react-use/lib/useAsync';\n\nimport { PluginType } from '@grafana/data';\n\nimport { getPluginSettings } from '../pluginSettings';\nimport { importAppPlugin } from '../plugin_loader';\n\nexport const useImportAppPlugin = (id: string) => {\n  return useAsync(async () => {\n    const pluginMeta = await getPluginSettings(id);\n\n    if (!pluginMeta) {\n      throw new Error(`Unknown plugin: \"${id}\"`);\n    }\n\n    if (pluginMeta.type !== PluginType.app) {\n      throw new Error(`Plugin must be an app (currently \"${pluginMeta.type}\")`);\n    }\n\n    if (!pluginMeta.enabled) {\n      throw new Error(`Application \"${id}\" is not enabled`);\n    }\n\n    return await importAppPlugin(pluginMeta);\n  });\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { AppPluginLoader } from 'app/features/plugins/components/AppPluginLoader';\n\nimport { CLOUD_ONBOARDING_APP_ID, ROUTES } from '../../constants';\n\nexport function CloudIntegrations() {\n  const s = useStyles2(getStyles);\n\n  return (\n    <div className={s.container}>\n      <AppPluginLoader id={CLOUD_ONBOARDING_APP_ID} basePath={ROUTES.CloudIntegrations} />\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  // We would like to force the app to stay inside the provided tab\n  container: css`\n    position: relative;\n  `,\n});\n","import React from 'react';\n\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { EditDataSource } from 'app/features/datasources/components/EditDataSource';\n\nexport interface Props extends GrafanaRouteComponentProps<{ uid: string }> {}\n\nexport function DataSourcesEdit(props: Props) {\n  const uid = props.match.params.uid;\n  const params = new URLSearchParams(props.location.search);\n  const pageId = params.get('page');\n\n  return <EditDataSource uid={uid} pageId={pageId} />;\n}\n","import React from 'react';\n\nexport function Plugins() {\n  return <div>The list of plugins is under development</div>;\n}\n","import React from 'react';\n\nexport function RecordedQueries() {\n  return <div>The recorded queries tab is under development.</div>;\n}\n","import * as React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport { Page } from 'app/core/components/Page/Page';\nimport { DataSourcesList } from 'app/features/datasources/components/DataSourcesList';\nimport { NewDataSource } from 'app/features/datasources/components/NewDataSource';\nimport { DataSourcesRoutesContext } from 'app/features/datasources/state';\n\nimport { ROUTES } from './constants';\nimport { useNavModel } from './hooks/useNavModel';\nimport { CloudIntegrations } from './tabs/CloudIntegrations';\nimport { DataSourcesEdit } from './tabs/DataSourcesEdit';\nimport { Plugins } from './tabs/Plugins';\nimport { RecordedQueries } from './tabs/RecordedQueries';\n\nexport default function DataConnectionsPage() {\n  const navModel = useNavModel();\n\n  return (\n    <DataSourcesRoutesContext.Provider\n      value={{\n        New: ROUTES.DataSourcesNew,\n        List: ROUTES.DataSources,\n        Edit: ROUTES.DataSourcesEdit,\n        Dashboards: ROUTES.DataSourcesDashboards,\n      }}\n    >\n      <Page navModel={navModel}>\n        <Page.Contents>\n          <Switch>\n            <Route path={ROUTES.DataSourcesNew} component={NewDataSource} />\n            <Route path={ROUTES.DataSourcesEdit} component={DataSourcesEdit} />\n            <Route path={ROUTES.DataSources} component={DataSourcesList} />\n            <Route path={ROUTES.Plugins} component={Plugins} />\n            <Route path={ROUTES.CloudIntegrations} component={CloudIntegrations} />\n            <Route path={ROUTES.RecordedQueries} component={RecordedQueries} />\n\n            {/* Default page */}\n            <Route component={DataSourcesList} />\n          </Switch>\n        </Page.Contents>\n      </Page>\n    </DataSourcesRoutesContext.Provider>\n  );\n}\n","import { useSelector } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\n\nimport { NavModelItem } from '@grafana/data';\nimport { StoreState } from 'app/types/store';\n\nimport { ROUTE_BASE_ID } from '../constants';\n\n// We need this utility logic to make sure that the tab with the current URL is marked as active.\n// (In case we were using `getNavModel()` from app/core/selectors/navModel, then we would need to set\n// the child nav-model-item's ID on the call-site.)\nexport const useNavModel = () => {\n  const { pathname: currentPath } = useLocation();\n  const navIndex = useSelector((state: StoreState) => state.navIndex);\n  const node = navIndex[ROUTE_BASE_ID];\n  const main = node;\n  const isDefaultRoute = (item: NavModelItem) =>\n    currentPath === `/${ROUTE_BASE_ID}` && item.id === 'data-connections-datasources';\n  const isItemActive = (item: NavModelItem) => currentPath.startsWith(item.url || '');\n\n  main.children = main.children?.map((item) => ({\n    ...item,\n    active: isItemActive(item) || isDefaultRoute(item),\n  }));\n\n  return {\n    node,\n    main,\n  };\n};\n","import React, { useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { AnyAction } from 'redux';\n\nimport PageActionBar from 'app/core/components/PageActionBar/PageActionBar';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction, StoreState } from 'app/types';\n\nimport { getDataSourcesSearchQuery, setDataSourcesSearchQuery, useDataSourcesRoutes } from '../state';\n\nexport function DataSourcesListHeader() {\n  const dispatch = useDispatch();\n  const setSearchQuery = useCallback((q: string) => dispatch(setDataSourcesSearchQuery(q)), [dispatch]);\n  const searchQuery = useSelector(({ dataSources }: StoreState) => getDataSourcesSearchQuery(dataSources));\n  const canCreateDataSource = contextSrv.hasPermission(AccessControlAction.DataSourcesCreate);\n\n  return (\n    <DataSourcesListHeaderView\n      searchQuery={searchQuery}\n      setSearchQuery={setSearchQuery}\n      canCreateDataSource={canCreateDataSource}\n    />\n  );\n}\n\nexport type ViewProps = {\n  searchQuery: string;\n  setSearchQuery: (q: string) => AnyAction;\n  canCreateDataSource: boolean;\n};\n\nexport function DataSourcesListHeaderView({ searchQuery, setSearchQuery, canCreateDataSource }: ViewProps) {\n  const dataSourcesRoutes = useDataSourcesRoutes();\n  const linkButton = {\n    href: dataSourcesRoutes.New,\n    title: 'Add data source',\n    disabled: !canCreateDataSource,\n  };\n\n  return (\n    <PageActionBar searchQuery={searchQuery} setSearchQuery={setSearchQuery} linkButton={linkButton} key=\"action-bar\" />\n  );\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { DataSourceSettings } from '@grafana/data';\nimport { Card, Tag, useStyles } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport PageLoader from 'app/core/components/PageLoader/PageLoader';\nimport { contextSrv } from 'app/core/core';\nimport { StoreState, AccessControlAction } from 'app/types';\n\nimport { getDataSources, getDataSourcesCount, useDataSourcesRoutes, useLoadDataSources } from '../state';\n\nimport { DataSourcesListHeader } from './DataSourcesListHeader';\n\nexport function DataSourcesList() {\n  useLoadDataSources();\n\n  const dataSources = useSelector((state: StoreState) => getDataSources(state.dataSources));\n  const dataSourcesCount = useSelector(({ dataSources }: StoreState) => getDataSourcesCount(dataSources));\n  const hasFetched = useSelector(({ dataSources }: StoreState) => dataSources.hasFetched);\n  const hasCreateRights = contextSrv.hasPermission(AccessControlAction.DataSourcesCreate);\n\n  return (\n    <DataSourcesListView\n      dataSources={dataSources}\n      dataSourcesCount={dataSourcesCount}\n      isLoading={!hasFetched}\n      hasCreateRights={hasCreateRights}\n    />\n  );\n}\n\nexport type ViewProps = {\n  dataSources: DataSourceSettings[];\n  dataSourcesCount: number;\n  isLoading: boolean;\n  hasCreateRights: boolean;\n};\n\nexport function DataSourcesListView({ dataSources, dataSourcesCount, isLoading, hasCreateRights }: ViewProps) {\n  const styles = useStyles(getStyles);\n  const dataSourcesRoutes = useDataSourcesRoutes();\n\n  if (isLoading) {\n    return <PageLoader />;\n  }\n\n  if (dataSourcesCount === 0) {\n    return (\n      <EmptyListCTA\n        buttonDisabled={!hasCreateRights}\n        title=\"No data sources defined\"\n        buttonIcon=\"database\"\n        buttonLink={dataSourcesRoutes.New}\n        buttonTitle=\"Add data source\"\n        proTip=\"You can also define data sources through configuration files.\"\n        proTipLink=\"http://docs.grafana.org/administration/provisioning/#datasources?utm_source=grafana_ds_list\"\n        proTipLinkTitle=\"Learn more\"\n        proTipTarget=\"_blank\"\n      />\n    );\n  }\n\n  return (\n    <>\n      {/* List Header */}\n      <DataSourcesListHeader />\n\n      {/* List */}\n      <ul className={styles.list}>\n        {dataSources.map((dataSource) => {\n          return (\n            <li key={dataSource.uid}>\n              <Card href={dataSourcesRoutes.Edit.replace(/:uid/gi, dataSource.uid)}>\n                <Card.Heading>{dataSource.name}</Card.Heading>\n                <Card.Figure>\n                  <img src={dataSource.typeLogoUrl} alt=\"\" height=\"40px\" width=\"40px\" className={styles.logo} />\n                </Card.Figure>\n                <Card.Meta>\n                  {[\n                    dataSource.typeName,\n                    dataSource.url,\n                    dataSource.isDefault && <Tag key=\"default-tag\" name={'default'} colorIndex={1} />,\n                  ]}\n                </Card.Meta>\n              </Card>\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n}\n\nconst getStyles = () => {\n  return {\n    list: css({\n      listStyle: 'none',\n      display: 'grid',\n      // gap: '8px', Add back when legacy support for old Card interface is dropped\n    }),\n    logo: css({\n      objectFit: 'contain',\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { PluginErrorCode, PluginSignatureStatus } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { HorizontalGroup, InfoBox, List, PluginSignatureBadge, useTheme } from '@grafana/ui';\n\nimport { useGetErrors, useFetchStatus } from '../admin/state/hooks';\n\nexport function PluginsErrorsInfo(): React.ReactElement | null {\n  const errors = useGetErrors();\n  const { isLoading } = useFetchStatus();\n  const theme = useTheme();\n\n  if (isLoading || errors.length === 0) {\n    return null;\n  }\n\n  return (\n    <InfoBox\n      aria-label={selectors.pages.PluginsList.signatureErrorNotice}\n      severity=\"warning\"\n      urlTitle=\"Read more about plugin signing\"\n      url=\"https://grafana.com/docs/grafana/latest/plugins/plugin-signatures/\"\n    >\n      <div>\n        <p>\n          Unsigned plugins were found during plugin initialization. Grafana Labs cannot guarantee the integrity of these\n          plugins. We recommend only using signed plugins.\n        </p>\n        The following plugins are disabled and not shown in the list below:\n        <List\n          items={errors}\n          className={css`\n            list-style-type: circle;\n          `}\n          renderItem={(error) => (\n            <div\n              className={css`\n                margin-top: ${theme.spacing.sm};\n              `}\n            >\n              <HorizontalGroup spacing=\"sm\" justify=\"flex-start\" align=\"center\">\n                <strong>{error.pluginId}</strong>\n                <PluginSignatureBadge\n                  status={mapPluginErrorCodeToSignatureStatus(error.errorCode)}\n                  className={css`\n                    margin-top: 0;\n                  `}\n                />\n              </HorizontalGroup>\n            </div>\n          )}\n        />\n      </div>\n    </InfoBox>\n  );\n}\n\nfunction mapPluginErrorCodeToSignatureStatus(code: PluginErrorCode) {\n  switch (code) {\n    case PluginErrorCode.invalidSignature:\n      return PluginSignatureStatus.invalid;\n    case PluginErrorCode.missingSignature:\n      return PluginSignatureStatus.missing;\n    case PluginErrorCode.modifiedSignature:\n      return PluginSignatureStatus.modified;\n    default:\n      return PluginSignatureStatus.missing;\n  }\n}\n","import { css, cx } from '@emotion/css';\nimport React from 'react';\n\nimport { DataSourcePluginMeta, GrafanaTheme2 } from '@grafana/data';\nimport { selectors as e2eSelectors } from '@grafana/e2e-selectors';\nimport { Card, LinkButton, PluginSignatureBadge, useStyles2 } from '@grafana/ui';\n\nexport type Props = {\n  dataSourcePlugin: DataSourcePluginMeta;\n  onClick: () => void;\n};\n\nexport function DataSourceTypeCard({ onClick, dataSourcePlugin }: Props) {\n  const isPhantom = dataSourcePlugin.module === 'phantom';\n  const isClickable = !isPhantom && !dataSourcePlugin.unlicensed;\n  const learnMoreLink = dataSourcePlugin.info?.links?.length > 0 ? dataSourcePlugin.info.links[0] : null;\n\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Card className={cx(styles.card, 'card-parent')} onClick={isClickable ? onClick : () => {}}>\n      {/* Name */}\n      <Card.Heading\n        className={styles.heading}\n        aria-label={e2eSelectors.pages.AddDataSource.dataSourcePluginsV2(dataSourcePlugin.name)}\n      >\n        {dataSourcePlugin.name}\n      </Card.Heading>\n\n      {/* Logo */}\n      <Card.Figure align=\"center\" className={styles.figure}>\n        <img className={styles.logo} src={dataSourcePlugin.info.logos.small} alt=\"\" />\n      </Card.Figure>\n\n      <Card.Description className={styles.description}>{dataSourcePlugin.info.description}</Card.Description>\n\n      {/* Signature */}\n      {!isPhantom && (\n        <Card.Meta className={styles.meta}>\n          <PluginSignatureBadge status={dataSourcePlugin.signature} />\n        </Card.Meta>\n      )}\n\n      {/* Learn more */}\n      <Card.Actions className={styles.actions}>\n        {learnMoreLink && (\n          <LinkButton\n            aria-label={`${dataSourcePlugin.name}, learn more.`}\n            href={`${learnMoreLink.url}?utm_source=grafana_add_ds`}\n            icon=\"external-link-alt\"\n            onClick={(e) => e.stopPropagation()}\n            rel=\"noopener\"\n            target=\"_blank\"\n            variant=\"secondary\"\n          >\n            {learnMoreLink.name}\n          </LinkButton>\n        )}\n      </Card.Actions>\n    </Card>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    heading: css({\n      fontSize: theme.v1.typography.heading.h5,\n      fontWeight: 'inherit',\n    }),\n    figure: css({\n      width: 'inherit',\n      marginRight: '0px',\n      '> img': {\n        width: theme.spacing(7),\n      },\n    }),\n    meta: css({\n      marginTop: '6px',\n      position: 'relative',\n    }),\n    description: css({\n      margin: '0px',\n      fontSize: theme.typography.size.sm,\n    }),\n    actions: css({\n      position: 'relative',\n      alignSelf: 'center',\n      marginTop: '0px',\n      opacity: 0,\n\n      '.card-parent:hover &, .card-parent:focus-within &': {\n        opacity: 1,\n      },\n    }),\n    card: css({\n      gridTemplateAreas: `\n        \"Figure   Heading   Actions\"\n        \"Figure Description Actions\"\n        \"Figure    Meta     Actions\"\n        \"Figure     -       Actions\"`,\n    }),\n    logo: css({\n      marginRight: theme.v1.spacing.lg,\n      marginLeft: theme.v1.spacing.sm,\n      width: theme.spacing(7),\n      maxHeight: theme.spacing(7),\n    }),\n  };\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { DataSourcePluginMeta } from '@grafana/data';\nimport { List } from '@grafana/ui';\n\nimport { DataSourceTypeCard } from './DataSourceTypeCard';\n\nexport type Props = {\n  // The list of data-source plugins to display\n  dataSourcePlugins: DataSourcePluginMeta[];\n  // Called when a data-source plugin is clicked on in the list\n  onClickDataSourceType: (dataSource: DataSourcePluginMeta) => void;\n};\n\nexport function DataSourceTypeCardList({ dataSourcePlugins, onClickDataSourceType }: Props) {\n  if (!dataSourcePlugins || !dataSourcePlugins.length) {\n    return null;\n  }\n\n  return (\n    <List\n      items={dataSourcePlugins}\n      getItemKey={(item) => item.id.toString()}\n      renderItem={(item) => <DataSourceTypeCard dataSourcePlugin={item} onClick={() => onClickDataSourceType(item)} />}\n      className={css`\n        > li {\n          margin-bottom: 2px;\n        }\n      `}\n    />\n  );\n}\n","import React from 'react';\n\nimport { DataSourcePluginMeta } from '@grafana/data';\nimport { LinkButton } from '@grafana/ui';\nimport { DataSourcePluginCategory } from 'app/types';\n\nimport { DataSourceTypeCardList } from './DataSourceTypeCardList';\n\nexport type Props = {\n  // The list of data-source plugin categories to display\n  categories: DataSourcePluginCategory[];\n\n  // Called when a data-source plugin is clicked on in the list\n  onClickDataSourceType: (dataSource: DataSourcePluginMeta) => void;\n};\n\nexport function DataSourceCategories({ categories, onClickDataSourceType }: Props) {\n  return (\n    <>\n      {/* Categories */}\n      {categories.map(({ id, title, plugins }) => (\n        <div className=\"add-data-source-category\" key={id}>\n          <div className=\"add-data-source-category__header\" id={id}>\n            {title}\n          </div>\n          <DataSourceTypeCardList dataSourcePlugins={plugins} onClickDataSourceType={onClickDataSourceType} />\n        </div>\n      ))}\n\n      {/* Find more */}\n      <div className=\"add-data-source-more\">\n        <LinkButton\n          variant=\"secondary\"\n          href=\"https://grafana.com/plugins?type=datasource&utm_source=grafana_add_ds\"\n          target=\"_blank\"\n          rel=\"noopener\"\n        >\n          Find more data source plugins on grafana.com\n        </LinkButton>\n      </div>\n    </>\n  );\n}\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AnyAction } from 'redux';\n\nimport { DataSourcePluginMeta } from '@grafana/data';\nimport { LinkButton, FilterInput } from '@grafana/ui';\nimport PageLoader from 'app/core/components/PageLoader/PageLoader';\nimport { PluginsErrorsInfo } from 'app/features/plugins/components/PluginsErrorsInfo';\nimport { DataSourcePluginCategory, StoreState } from 'app/types';\n\nimport { DataSourceCategories } from '../components/DataSourceCategories';\nimport { DataSourceTypeCardList } from '../components/DataSourceTypeCardList';\nimport {\n  useAddDatasource,\n  useLoadDataSourcePlugins,\n  getFilteredDataSourcePlugins,\n  setDataSourceTypeSearchQuery,\n  useDataSourcesRoutes,\n} from '../state';\n\nexport function NewDataSource() {\n  useLoadDataSourcePlugins();\n\n  const dispatch = useDispatch();\n  const filteredDataSources = useSelector((s: StoreState) => getFilteredDataSourcePlugins(s.dataSources));\n  const searchQuery = useSelector((s: StoreState) => s.dataSources.dataSourceTypeSearchQuery);\n  const isLoading = useSelector((s: StoreState) => s.dataSources.isLoadingDataSources);\n  const dataSourceCategories = useSelector((s: StoreState) => s.dataSources.categories);\n  const onAddDataSource = useAddDatasource();\n  const onSetSearchQuery = (q: string) => dispatch(setDataSourceTypeSearchQuery(q));\n\n  return (\n    <NewDataSourceView\n      dataSources={filteredDataSources}\n      dataSourceCategories={dataSourceCategories}\n      searchQuery={searchQuery}\n      isLoading={isLoading}\n      onAddDataSource={onAddDataSource}\n      onSetSearchQuery={onSetSearchQuery}\n    />\n  );\n}\n\nexport type ViewProps = {\n  dataSources: DataSourcePluginMeta[];\n  dataSourceCategories: DataSourcePluginCategory[];\n  searchQuery: string;\n  isLoading: boolean;\n  onAddDataSource: (dataSource: DataSourcePluginMeta) => void;\n  onSetSearchQuery: (q: string) => AnyAction;\n};\n\nexport function NewDataSourceView({\n  dataSources,\n  dataSourceCategories,\n  searchQuery,\n  isLoading,\n  onAddDataSource,\n  onSetSearchQuery,\n}: ViewProps) {\n  const dataSourcesRoutes = useDataSourcesRoutes();\n\n  if (isLoading) {\n    return <PageLoader />;\n  }\n\n  return (\n    <>\n      {/* Search */}\n      <div className=\"page-action-bar\">\n        <FilterInput value={searchQuery} onChange={onSetSearchQuery} placeholder=\"Filter by name or type\" />\n        <div className=\"page-action-bar__spacer\" />\n        <LinkButton href={dataSourcesRoutes.List} fill=\"outline\" variant=\"secondary\" icon=\"arrow-left\">\n          Cancel\n        </LinkButton>\n      </div>\n\n      {/* Show any plugin errors while not searching for anything specific */}\n      {!searchQuery && <PluginsErrorsInfo />}\n\n      {/* Search results */}\n      <div>\n        {searchQuery && (\n          <DataSourceTypeCardList dataSourcePlugins={dataSources} onClickDataSourceType={onAddDataSource} />\n        )}\n        {!searchQuery && (\n          <DataSourceCategories categories={dataSourceCategories} onClickDataSourceType={onAddDataSource} />\n        )}\n      </div>\n    </>\n  );\n}\n","import { createSelector } from '@reduxjs/toolkit';\n\nimport { PluginError, PluginErrorCode, unEscapeStringFromRegex } from '@grafana/data';\n\nimport { RequestStatus, PluginCatalogStoreState } from '../types';\n\nimport { pluginsAdapter } from './reducer';\n\nexport const selectRoot = (state: PluginCatalogStoreState) => state.plugins;\n\nexport const selectItems = createSelector(selectRoot, ({ items }) => items);\n\nexport const selectDisplayMode = createSelector(selectRoot, ({ settings }) => settings.displayMode);\n\nexport const { selectAll, selectById } = pluginsAdapter.getSelectors(selectItems);\n\nconst selectInstalled = (filterBy: string) =>\n  createSelector(selectAll, (plugins) =>\n    plugins.filter((plugin) => (filterBy === 'installed' ? plugin.isInstalled : !plugin.isCore))\n  );\n\nconst findByInstallAndType = (filterBy: string, filterByType: string) =>\n  createSelector(selectInstalled(filterBy), (plugins) =>\n    plugins.filter((plugin) => filterByType === 'all' || plugin.type === filterByType)\n  );\n\nconst findByKeyword = (searchBy: string) =>\n  createSelector(selectAll, (plugins) => {\n    if (searchBy === '') {\n      return [];\n    }\n\n    return plugins.filter((plugin) => {\n      const fields: String[] = [];\n      if (plugin.name) {\n        fields.push(plugin.name.toLowerCase());\n      }\n\n      if (plugin.orgName) {\n        fields.push(plugin.orgName.toLowerCase());\n      }\n\n      return fields.some((f) => f.includes(unEscapeStringFromRegex(searchBy).toLowerCase()));\n    });\n  });\n\nexport const find = (searchBy: string, filterBy: string, filterByType: string) =>\n  createSelector(\n    findByInstallAndType(filterBy, filterByType),\n    findByKeyword(searchBy),\n    (filteredPlugins, searchedPlugins) => {\n      return searchBy === '' ? filteredPlugins : searchedPlugins;\n    }\n  );\n\nexport const selectPluginErrors = createSelector(selectAll, (plugins) =>\n  plugins\n    ? plugins\n        .filter((p) => Boolean(p.error))\n        .map(\n          (p): PluginError => ({\n            pluginId: p.id,\n            errorCode: p!.error as PluginErrorCode,\n          })\n        )\n    : []\n);\n\n// The following selectors are used to get information about the outstanding or completed plugins-related network requests.\nexport const selectRequest = (actionType: string) =>\n  createSelector(selectRoot, ({ requests = {} }) => requests[actionType]);\n\nexport const selectIsRequestPending = (actionType: string) =>\n  createSelector(selectRequest(actionType), (request) => request?.status === RequestStatus.Pending);\n\nexport const selectRequestError = (actionType: string) =>\n  createSelector(selectRequest(actionType), (request) =>\n    request?.status === RequestStatus.Rejected ? request?.error : null\n  );\n\nexport const selectIsRequestNotFetched = (actionType: string) =>\n  createSelector(selectRequest(actionType), (request) => request === undefined);\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { PluginError } from '@grafana/data';\n\nimport { sortPlugins, Sorters } from '../helpers';\nimport { CatalogPlugin, PluginCatalogStoreState, PluginListDisplayMode } from '../types';\n\nimport { fetchAll, fetchDetails, fetchRemotePlugins, install, uninstall } from './actions';\nimport { setDisplayMode } from './reducer';\nimport {\n  find,\n  selectAll,\n  selectById,\n  selectIsRequestPending,\n  selectRequestError,\n  selectIsRequestNotFetched,\n  selectDisplayMode,\n  selectPluginErrors,\n} from './selectors';\n\ntype Filters = {\n  query?: string; // Note: this will be an escaped regex string as it comes from `FilterInput`\n  filterBy?: string;\n  filterByType?: string;\n  sortBy?: Sorters;\n};\n\nexport const useGetAllWithFilters = ({\n  query = '',\n  filterBy = 'installed',\n  filterByType = 'all',\n  sortBy = Sorters.nameAsc,\n}: Filters) => {\n  useFetchAll();\n\n  const filtered = useSelector(find(query, filterBy, filterByType));\n  const { isLoading, error } = useFetchStatus();\n  const sortedAndFiltered = sortPlugins(filtered, sortBy);\n\n  return {\n    isLoading,\n    error,\n    plugins: sortedAndFiltered,\n  };\n};\n\nexport const useGetAll = (): CatalogPlugin[] => {\n  useFetchAll();\n\n  return useSelector(selectAll);\n};\n\nexport const useGetSingle = (id: string): CatalogPlugin | undefined => {\n  useFetchAll();\n  useFetchDetails(id);\n\n  return useSelector((state: PluginCatalogStoreState) => selectById(state, id));\n};\n\nexport const useGetErrors = (): PluginError[] => {\n  useFetchAll();\n\n  return useSelector(selectPluginErrors);\n};\n\nexport const useInstall = () => {\n  const dispatch = useDispatch();\n  return (id: string, version?: string, isUpdating?: boolean) => dispatch(install({ id, version, isUpdating }));\n};\n\nexport const useUninstall = () => {\n  const dispatch = useDispatch();\n\n  return (id: string) => dispatch(uninstall(id));\n};\n\nexport const useIsRemotePluginsAvailable = () => {\n  const error = useSelector(selectRequestError(fetchRemotePlugins.typePrefix));\n  return error === null;\n};\n\nexport const useFetchStatus = () => {\n  const isLoading = useSelector(selectIsRequestPending(fetchAll.typePrefix));\n  const error = useSelector(selectRequestError(fetchAll.typePrefix));\n\n  return { isLoading, error };\n};\n\nexport const useFetchDetailsStatus = () => {\n  const isLoading = useSelector(selectIsRequestPending(fetchDetails.typePrefix));\n  const error = useSelector(selectRequestError(fetchDetails.typePrefix));\n\n  return { isLoading, error };\n};\n\nexport const useInstallStatus = () => {\n  const isInstalling = useSelector(selectIsRequestPending(install.typePrefix));\n  const error = useSelector(selectRequestError(install.typePrefix));\n\n  return { isInstalling, error };\n};\n\nexport const useUninstallStatus = () => {\n  const isUninstalling = useSelector(selectIsRequestPending(uninstall.typePrefix));\n  const error = useSelector(selectRequestError(uninstall.typePrefix));\n\n  return { isUninstalling, error };\n};\n\n// Only fetches in case they were not fetched yet\nexport const useFetchAll = () => {\n  const dispatch = useDispatch();\n  const isNotFetched = useSelector(selectIsRequestNotFetched(fetchAll.typePrefix));\n\n  useEffect(() => {\n    isNotFetched && dispatch(fetchAll());\n  }, []); // eslint-disable-line\n};\n\nexport const useFetchDetails = (id: string) => {\n  const dispatch = useDispatch();\n  const plugin = useSelector((state: PluginCatalogStoreState) => selectById(state, id));\n  const isNotFetching = !useSelector(selectIsRequestPending(fetchDetails.typePrefix));\n  const shouldFetch = isNotFetching && plugin && !plugin.details;\n\n  useEffect(() => {\n    shouldFetch && dispatch(fetchDetails(id));\n  }, [plugin]); // eslint-disable-line\n};\n\nexport const useDisplayMode = () => {\n  const dispatch = useDispatch();\n  const displayMode = useSelector(selectDisplayMode);\n\n  return {\n    displayMode,\n    setDisplayMode: (v: PluginListDisplayMode) => dispatch(setDisplayMode(v)),\n  };\n};\n"],"names":["coreModule","angular","angularModules","NavModelSrv","constructor","this","navItems","config","getCfgNode","find","navItem","id","getNav","children","nav","breadcrumbs","args","main","node","child","push","item","active","url","getNotFoundNav","getWarningNav","text","subTitle","icon","PageActionBar","PureComponent","render","searchQuery","linkButton","setSearchQuery","target","placeholder","props","linkProps","href","disabled","className","FilterInput","value","onChange","LinkButton","title","AppPluginLoader","basePath","setNav","useState","plugin","error","loading","useAsync","async","pluginMeta","getPluginSettings","Error","type","PluginType","enabled","importAppPlugin","useImportAppPlugin","queryParams","useParams","pathname","useLocation","Page","message","stack","PageLoader","root","meta","basename","onNavChanged","query","path","CloudIntegrations","s","useStyles2","getStyles","container","CLOUD_ONBOARDING_APP_ID","ROUTES","theme","css","DataSourcesEdit","uid","match","params","pageId","URLSearchParams","location","search","get","EditDataSource","Plugins","RecordedQueries","DataConnectionsPage","navModel","currentPath","navIndex","useSelector","state","ROUTE_BASE_ID","isDefaultRoute","isItemActive","startsWith","map","useNavModel","New","List","Edit","Dashboards","component","NewDataSource","DataSourcesList","DataSourcesListHeader","dispatch","useDispatch","useCallback","q","setDataSourcesSearchQuery","dataSources","getDataSourcesSearchQuery","canCreateDataSource","contextSrv","AccessControlAction","DataSourcesListHeaderView","useDataSourcesRoutes","useLoadDataSources","getDataSources","dataSourcesCount","getDataSourcesCount","hasFetched","hasCreateRights","DataSourcesListView","isLoading","styles","useStyles","dataSourcesRoutes","EmptyListCTA","buttonDisabled","buttonIcon","buttonLink","buttonTitle","proTip","proTipLink","proTipLinkTitle","proTipTarget","list","dataSource","Card","replace","name","src","typeLogoUrl","alt","height","width","logo","typeName","isDefault","Tag","colorIndex","listStyle","display","objectFit","PluginsErrorsInfo","errors","useGetErrors","useFetchStatus","useTheme","length","InfoBox","selectors","severity","urlTitle","items","renderItem","spacing","sm","HorizontalGroup","justify","align","pluginId","PluginSignatureBadge","status","mapPluginErrorCodeToSignatureStatus","errorCode","code","PluginErrorCode","PluginSignatureStatus","DataSourceTypeCard","onClick","dataSourcePlugin","isPhantom","module","isClickable","unlicensed","learnMoreLink","info","links","cx","card","heading","e2eSelectors","figure","logos","small","description","signature","actions","e","stopPropagation","rel","variant","fontSize","v1","typography","h5","fontWeight","marginRight","marginTop","position","margin","size","alignSelf","opacity","gridTemplateAreas","lg","marginLeft","maxHeight","DataSourceTypeCardList","dataSourcePlugins","onClickDataSourceType","getItemKey","toString","DataSourceCategories","categories","plugins","useLoadDataSourcePlugins","filteredDataSources","getFilteredDataSourcePlugins","dataSourceTypeSearchQuery","isLoadingDataSources","dataSourceCategories","onAddDataSource","useAddDatasource","NewDataSourceView","onSetSearchQuery","setDataSourceTypeSearchQuery","fill","selectRoot","selectItems","createSelector","selectDisplayMode","settings","displayMode","selectAll","selectById","pluginsAdapter","findByInstallAndType","filterBy","filterByType","filter","isInstalled","isCore","selectInstalled","searchBy","fields","toLowerCase","orgName","some","f","includes","unEscapeStringFromRegex","findByKeyword","filteredPlugins","searchedPlugins","selectPluginErrors","p","Boolean","selectRequest","actionType","requests","selectIsRequestPending","request","RequestStatus","selectRequestError","useGetAllWithFilters","sortBy","Sorters","useFetchAll","filtered","sortPlugins","useGetSingle","useFetchDetails","useInstall","version","isUpdating","install","useUninstall","uninstall","useIsRemotePluginsAvailable","fetchRemotePlugins","fetchAll","useFetchDetailsStatus","fetchDetails","useInstallStatus","isInstalling","useUninstallStatus","isUninstalling","isNotFetched","undefined","useEffect","shouldFetch","details","useDisplayMode","setDisplayMode","v"],"sourceRoot":""}