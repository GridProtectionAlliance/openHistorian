{"version":3,"file":"707.b02de56435c1c89199e3.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/Layers/LayerName.tsx","webpack://grafana/./public/app/features/dimensions/editors/ColorDimensionEditor.tsx","webpack://grafana/./public/app/features/dimensions/editors/TextDimensionEditor.tsx","webpack://grafana/./public/app/features/dimensions/editors/IconSelector.tsx","webpack://grafana/./public/app/features/dimensions/editors/ResourceDimensionEditor.tsx","webpack://grafana/./public/app/features/dimensions/editors/ScaleDimensionEditor.tsx","webpack://grafana/./public/app/features/dimensions/editors/ScalarDimensionEditor.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport { useState } from 'react';\nimport * as React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, Input, FieldValidationMessage, useStyles2 } from '@grafana/ui';\n\nexport interface LayerNameProps {\n  name: string;\n  onChange: (v: string) => void;\n  verifyLayerNameUniqueness?: (nameToCheck: string) => boolean;\n  overrideStyles?: boolean;\n}\n\nexport const LayerName = ({ name, onChange, verifyLayerNameUniqueness, overrideStyles }: LayerNameProps) => {\n  const styles = useStyles2(getStyles);\n\n  const [isEditing, setIsEditing] = useState<boolean>(false);\n  const [validationError, setValidationError] = useState<string | null>(null);\n\n  const onEditLayer = (event: React.SyntheticEvent) => {\n    setIsEditing(true);\n  };\n\n  const onEndEditName = (newName: string) => {\n    setIsEditing(false);\n\n    if (validationError) {\n      setValidationError(null);\n      return;\n    }\n\n    if (name !== newName) {\n      onChange(newName);\n    }\n  };\n\n  const onInputChange = (event: React.SyntheticEvent<HTMLInputElement>) => {\n    const newName = event.currentTarget.value.trim();\n\n    if (newName.length === 0) {\n      setValidationError('An empty layer name is not allowed');\n      return;\n    }\n\n    if (verifyLayerNameUniqueness && !verifyLayerNameUniqueness(newName) && newName !== name) {\n      setValidationError('Layer name already exists');\n      return;\n    }\n\n    if (validationError) {\n      setValidationError(null);\n    }\n  };\n\n  const onEditLayerBlur = (event: React.SyntheticEvent<HTMLInputElement>) => {\n    onEndEditName(event.currentTarget.value.trim());\n  };\n\n  const onKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Enter') {\n      onEndEditName(event.currentTarget.value);\n    }\n  };\n\n  const onFocus = (event: React.FocusEvent<HTMLInputElement>) => {\n    event.target.select();\n  };\n\n  return (\n    <>\n      <div className={styles.wrapper}>\n        {!isEditing && (\n          <button\n            className={styles.layerNameWrapper}\n            title=\"Edit layer name\"\n            onClick={onEditLayer}\n            data-testid=\"layer-name-div\"\n          >\n            <span className={overrideStyles ? '' : styles.layerName}>{name}</span>\n            <Icon name=\"pen\" className={styles.layerEditIcon} size=\"sm\" />\n          </button>\n        )}\n\n        {isEditing && (\n          <>\n            <Input\n              type=\"text\"\n              defaultValue={name}\n              onBlur={onEditLayerBlur}\n              autoFocus\n              onKeyDown={onKeyDown}\n              onFocus={onFocus}\n              invalid={validationError !== null}\n              onChange={onInputChange}\n              className={styles.layerNameInput}\n              data-testid=\"layer-name-input\"\n            />\n            {validationError && <FieldValidationMessage horizontal>{validationError}</FieldValidationMessage>}\n          </>\n        )}\n      </div>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrapper: css({\n      label: 'Wrapper',\n      display: 'flex',\n      alignItems: 'center',\n      marginLeft: theme.spacing(0.5),\n    }),\n    layerNameWrapper: css({\n      display: 'flex',\n      cursor: 'pointer',\n      border: '1px solid transparent',\n      borderRadius: theme.shape.radius.default,\n      alignItems: 'center',\n      padding: `0 0 0 ${theme.spacing(0.5)}`,\n      margin: 0,\n      background: 'transparent',\n\n      '&:hover': {\n        background: theme.colors.action.hover,\n        border: `1px dashed ${theme.colors.border.strong}`,\n      },\n\n      '&:focus': {\n        border: `2px solid ${theme.colors.primary.border}`,\n      },\n\n      '&:hover, &:focus': {\n        '.query-name-edit-icon': {\n          visibility: 'visible',\n        },\n      },\n    }),\n    layerName: css({\n      fontWeight: theme.typography.fontWeightMedium,\n      color: theme.colors.primary.text,\n      cursor: 'pointer',\n      overflow: 'hidden',\n      marginLeft: theme.spacing(0.5),\n    }),\n    layerEditIcon: cx(\n      css({\n        marginLeft: theme.spacing(2),\n        visibility: 'hidden',\n      }),\n      'query-name-edit-icon'\n    ),\n    layerNameInput: css({\n      maxWidth: '300px',\n      margin: '-4px 0',\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport { useCallback } from 'react';\n\nimport { GrafanaTheme2, SelectableValue, StandardEditorProps, FieldNamePickerBaseNameMode } from '@grafana/data';\nimport { ColorDimensionConfig } from '@grafana/schema';\nimport { Select, ColorPicker, useStyles2 } from '@grafana/ui';\nimport { useFieldDisplayNames, useSelectOptions } from '@grafana/ui/src/components/MatchersUI/utils';\n\nconst fixedColorOption: SelectableValue<string> = {\n  label: 'Fixed color',\n  value: '_____fixed_____',\n};\n\ninterface ColorDimensionSettings {\n  isClearable?: boolean;\n  baseNameMode?: FieldNamePickerBaseNameMode;\n  placeholder?: string;\n}\n\nexport const ColorDimensionEditor = (props: StandardEditorProps<ColorDimensionConfig, ColorDimensionSettings>) => {\n  const { value, context, onChange, item } = props;\n\n  const defaultColor = 'dark-green';\n\n  const styles = useStyles2(getStyles);\n  const fieldName = value?.field;\n  const isFixed = value && Boolean(!fieldName) && value?.fixed;\n  const names = useFieldDisplayNames(context.data);\n  const selectOptions = useSelectOptions(names, fieldName, fixedColorOption, undefined, item.settings?.baseNameMode);\n\n  const onSelectChange = useCallback(\n    (selection: SelectableValue<string>) => {\n      if (!selection) {\n        onChange(undefined);\n        return;\n      }\n\n      const field = selection.value;\n      if (field && field !== fixedColorOption.value) {\n        onChange({\n          ...value,\n          field,\n        });\n      } else {\n        const fixed = value?.fixed ?? defaultColor;\n        onChange({\n          ...value,\n          field: undefined,\n          fixed,\n        });\n      }\n    },\n    [onChange, value]\n  );\n\n  const onColorChange = useCallback(\n    (c: string) => {\n      onChange({\n        field: undefined,\n        fixed: c ?? defaultColor,\n      });\n    },\n    [onChange]\n  );\n\n  const selectedOption = isFixed ? fixedColorOption : selectOptions.find((v) => v.value === fieldName);\n  return (\n    <>\n      <div className={styles.container}>\n        <Select\n          value={selectedOption}\n          options={selectOptions}\n          onChange={onSelectChange}\n          noOptionsMessage=\"No fields found\"\n          isClearable={item.settings?.isClearable}\n          placeholder={item.settings?.placeholder}\n        />\n        {isFixed && (\n          <div className={styles.picker}>\n            <ColorPicker color={value?.fixed} onChange={onColorChange} enableNamedColors={true} />\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    display: flex;\n    flex-wrap: nowrap;\n    justify-content: flex-end;\n    align-items: center;\n  `,\n  picker: css`\n    padding-left: 8px;\n  `,\n});\n","import { useCallback } from 'react';\n\nimport {\n  FieldNamePickerConfigSettings,\n  StandardEditorProps,\n  StandardEditorsRegistryItem,\n  StringFieldConfigSettings,\n} from '@grafana/data';\nimport { TextDimensionConfig, TextDimensionMode } from '@grafana/schema';\nimport { Button, InlineField, InlineFieldRow, RadioButtonGroup } from '@grafana/ui';\nimport { FieldNamePicker } from '@grafana/ui/src/components/MatchersUI/FieldNamePicker';\nimport { StringValueEditor } from 'app/core/components/OptionsUI/string';\n\nimport { TextDimensionOptions } from '../types';\n\nconst textOptions = [\n  { label: 'Fixed', value: TextDimensionMode.Fixed, description: 'Fixed value' },\n  { label: 'Field', value: TextDimensionMode.Field, description: 'Display field value' },\n  //  { label: 'Template', value: TextDimensionMode.Template, description: 'use template text' },\n];\n\nconst dummyFieldSettings = {\n  settings: {},\n} as StandardEditorsRegistryItem<string, FieldNamePickerConfigSettings>;\n\nconst dummyStringSettings = {\n  settings: {},\n} as StandardEditorsRegistryItem<string, StringFieldConfigSettings>;\n\ntype Props = StandardEditorProps<TextDimensionConfig, TextDimensionOptions>;\n\nexport const TextDimensionEditor = ({ value, context, onChange }: Props) => {\n  const labelWidth = 9;\n\n  const onModeChange = useCallback(\n    (mode: TextDimensionMode) => {\n      onChange({\n        ...value,\n        mode,\n      });\n    },\n    [onChange, value]\n  );\n\n  const onFieldChange = useCallback(\n    (field?: string) => {\n      onChange({\n        ...value,\n        field,\n      });\n    },\n    [onChange, value]\n  );\n\n  const onFixedChange = useCallback(\n    (fixed = '') => {\n      onChange({\n        ...value,\n        fixed,\n      });\n    },\n    [onChange, value]\n  );\n\n  const onClearFixed = () => {\n    onFixedChange('');\n  };\n\n  const mode = value?.mode ?? TextDimensionMode.Fixed;\n  return (\n    <>\n      <InlineFieldRow>\n        <InlineField label=\"Source\" labelWidth={labelWidth} grow={true}>\n          <RadioButtonGroup value={mode} options={textOptions} onChange={onModeChange} fullWidth />\n        </InlineField>\n      </InlineFieldRow>\n      {mode !== TextDimensionMode.Fixed && (\n        <InlineFieldRow>\n          <InlineField label=\"Field\" labelWidth={labelWidth} grow={true}>\n            <FieldNamePicker\n              context={context}\n              value={value.field ?? ''}\n              onChange={onFieldChange}\n              item={dummyFieldSettings}\n            />\n          </InlineField>\n        </InlineFieldRow>\n      )}\n      {mode === TextDimensionMode.Fixed && (\n        <InlineFieldRow key={value?.fixed}>\n          <InlineField label={'Value'} labelWidth={labelWidth} grow={true}>\n            <StringValueEditor\n              context={context}\n              value={value?.fixed}\n              onChange={onFixedChange}\n              item={dummyStringSettings}\n              suffix={\n                value?.fixed && <Button icon=\"times\" variant=\"secondary\" fill=\"text\" size=\"sm\" onClick={onClearFixed} />\n              }\n            />\n          </InlineField>\n        </InlineFieldRow>\n      )}\n      {mode === TextDimensionMode.Template && (\n        <InlineFieldRow>\n          <InlineField label=\"Template\" labelWidth={labelWidth} grow={true}>\n            <StringValueEditor // This could be a code editor\n              context={context}\n              value={value?.fixed}\n              onChange={onFixedChange}\n              item={dummyStringSettings}\n            />\n          </InlineField>\n        </InlineFieldRow>\n      )}\n    </>\n  );\n};\n","import { useState, useEffect } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { Select } from '@grafana/ui';\n\ninterface Props {\n  value: string;\n  onChange: (v: string) => void;\n}\n\nconst IconSelector = ({ value, onChange }: Props) => {\n  const [icons, setIcons] = useState<SelectableValue[]>(value ? [{ value, label: value }] : []);\n  const [icon, setIcon] = useState<string>();\n  const iconRoot = window.__grafana_public_path__ + 'img/icons/unicons/';\n  const onChangeIcon = (value: string) => {\n    onChange(value);\n    setIcon(value);\n  };\n  useEffect(() => {\n    getBackendSrv()\n      .get(`${iconRoot}/index.json`)\n      .then((data) => {\n        setIcons(\n          data.files.map((icon: string) => ({\n            value: icon,\n            label: icon,\n          }))\n        );\n      });\n  }, [iconRoot]);\n  return (\n    <Select\n      options={icons}\n      value={icon}\n      onChange={(selectedValue) => {\n        onChangeIcon(selectedValue.value!);\n      }}\n    />\n  );\n};\n\nexport default IconSelector;\n","import { useCallback } from 'react';\nimport * as React from 'react';\n\nimport { FieldNamePickerConfigSettings, StandardEditorProps, StandardEditorsRegistryItem } from '@grafana/data';\nimport { ResourceDimensionConfig, ResourceDimensionMode } from '@grafana/schema';\nimport { InlineField, InlineFieldRow, RadioButtonGroup } from '@grafana/ui';\nimport { FieldNamePicker } from '@grafana/ui/src/components/MatchersUI/FieldNamePicker';\n\nimport { getPublicOrAbsoluteUrl, ResourceFolderName } from '..';\nimport { MediaType, ResourceDimensionOptions, ResourcePickerSize } from '../types';\n\nimport { ResourcePicker } from './ResourcePicker';\n\nconst resourceOptions = [\n  { label: 'Fixed', value: ResourceDimensionMode.Fixed, description: 'Fixed value' },\n  { label: 'Field', value: ResourceDimensionMode.Field, description: 'Use a string field result' },\n  //  { label: 'Mapping', value: ResourceDimensionMode.Mapping, description: 'Map the results of a value to an svg' },\n];\n\nconst dummyFieldSettings = {\n  settings: {},\n} as StandardEditorsRegistryItem<string, FieldNamePickerConfigSettings>;\n\nexport const ResourceDimensionEditor = (\n  props: StandardEditorProps<ResourceDimensionConfig, ResourceDimensionOptions, unknown>\n) => {\n  const { value, context, onChange, item } = props;\n  const labelWidth = 9;\n\n  const onModeChange = useCallback(\n    (mode: ResourceDimensionMode) => {\n      onChange({\n        ...value,\n        mode,\n      });\n    },\n    [onChange, value]\n  );\n\n  const onFieldChange = useCallback(\n    (field = '') => {\n      onChange({\n        ...value,\n        field,\n      });\n    },\n    [onChange, value]\n  );\n\n  const onFixedChange = useCallback(\n    (fixed?: string) => {\n      onChange({\n        ...value,\n        fixed: fixed ?? '',\n      });\n    },\n    [onChange, value]\n  );\n\n  const onClear = (event: React.MouseEvent) => {\n    event.stopPropagation();\n    onChange({ mode: ResourceDimensionMode.Fixed, fixed: '', field: '' });\n  };\n\n  const mode = value?.mode ?? ResourceDimensionMode.Fixed;\n  const showSourceRadio = item.settings?.showSourceRadio ?? true;\n  const mediaType = item.settings?.resourceType ?? MediaType.Icon;\n  const folderName = item.settings?.folderName ?? ResourceFolderName.Icon;\n  const maxFiles = item.settings?.maxFiles; // undefined leads to backend default\n  let srcPath = '';\n  if (mediaType === MediaType.Icon) {\n    if (value?.fixed) {\n      srcPath = getPublicOrAbsoluteUrl(value.fixed);\n    } else if (item.settings?.placeholderValue) {\n      srcPath = getPublicOrAbsoluteUrl(item.settings.placeholderValue);\n    }\n  }\n\n  return (\n    <>\n      {showSourceRadio && (\n        <InlineFieldRow>\n          <InlineField label=\"Source\" labelWidth={labelWidth} grow={true}>\n            <RadioButtonGroup value={mode} options={resourceOptions} onChange={onModeChange} fullWidth />\n          </InlineField>\n        </InlineFieldRow>\n      )}\n      {mode !== ResourceDimensionMode.Fixed && (\n        <InlineFieldRow>\n          <InlineField label=\"Field\" labelWidth={labelWidth} grow={true}>\n            <FieldNamePicker\n              context={context}\n              value={value.field ?? ''}\n              onChange={onFieldChange}\n              item={dummyFieldSettings}\n            />\n          </InlineField>\n        </InlineFieldRow>\n      )}\n      {mode === ResourceDimensionMode.Fixed && (\n        <ResourcePicker\n          onChange={onFixedChange}\n          onClear={onClear}\n          value={value?.fixed}\n          src={srcPath}\n          placeholder={item.settings?.placeholderText ?? 'Select a value'}\n          name={niceName(value?.fixed) ?? ''}\n          mediaType={mediaType}\n          folderName={folderName}\n          size={ResourcePickerSize.NORMAL}\n          maxFiles={maxFiles}\n        />\n      )}\n      {mode === ResourceDimensionMode.Mapping && (\n        <InlineFieldRow>\n          <InlineField label=\"Mappings\" labelWidth={labelWidth} grow={true}>\n            <div>TODO mappings editor!</div>\n          </InlineField>\n        </InlineFieldRow>\n      )}\n    </>\n  );\n};\n\nexport function niceName(value?: string): string | undefined {\n  if (!value) {\n    return undefined;\n  }\n  const idx = value.lastIndexOf('/');\n  if (idx > 0) {\n    return value.substring(idx + 1);\n  }\n  return value;\n}\n","import { css } from '@emotion/css';\nimport { useCallback, useMemo } from 'react';\n\nimport { GrafanaTheme2, SelectableValue, StandardEditorProps } from '@grafana/data';\nimport { ScaleDimensionConfig } from '@grafana/schema';\nimport { InlineField, InlineFieldRow, Select, useStyles2 } from '@grafana/ui';\nimport { useFieldDisplayNames, useSelectOptions } from '@grafana/ui/src/components/MatchersUI/utils';\nimport { NumberInput } from 'app/core/components/OptionsUI/NumberInput';\n\nimport { validateScaleOptions, validateScaleConfig } from '../scale';\nimport { ScaleDimensionOptions } from '../types';\n\nconst fixedValueOption: SelectableValue<string> = {\n  label: 'Fixed value',\n  value: '_____fixed_____',\n};\n\nexport const ScaleDimensionEditor = (props: StandardEditorProps<ScaleDimensionConfig, ScaleDimensionOptions>) => {\n  const { value, context, onChange, item } = props;\n  const { settings } = item;\n  const styles = useStyles2(getStyles);\n\n  const fieldName = value?.field;\n  const isFixed = Boolean(!fieldName);\n  const names = useFieldDisplayNames(context.data);\n  const selectOptions = useSelectOptions(names, fieldName, fixedValueOption, settings?.filteredFieldType);\n  const minMaxStep = useMemo(() => {\n    return validateScaleOptions(settings);\n  }, [settings]);\n\n  // Validate and update\n  const validateAndDoChange = useCallback(\n    (v: ScaleDimensionConfig) => {\n      // always called with a copy so no need to spread\n      onChange(validateScaleConfig(v, minMaxStep));\n    },\n    [onChange, minMaxStep]\n  );\n\n  const onSelectChange = useCallback(\n    (selection: SelectableValue<string>) => {\n      const field = selection.value;\n      if (field && field !== fixedValueOption.value) {\n        validateAndDoChange({\n          ...value,\n          field,\n        });\n      } else {\n        validateAndDoChange({\n          ...value,\n          field: undefined,\n        });\n      }\n    },\n    [validateAndDoChange, value]\n  );\n\n  const onMinChange = useCallback(\n    (min?: number) => {\n      if (min !== undefined) {\n        validateAndDoChange({\n          ...value,\n          min,\n        });\n      }\n    },\n    [validateAndDoChange, value]\n  );\n\n  const onMaxChange = useCallback(\n    (max?: number) => {\n      if (max !== undefined) {\n        validateAndDoChange({\n          ...value,\n          max,\n        });\n      }\n    },\n    [validateAndDoChange, value]\n  );\n\n  const onValueChange = useCallback(\n    (fixed?: number) => {\n      if (fixed !== undefined) {\n        validateAndDoChange({\n          ...value,\n          fixed,\n        });\n      }\n    },\n    [validateAndDoChange, value]\n  );\n\n  const val = value ?? {};\n  const selectedOption = isFixed ? fixedValueOption : selectOptions.find((v) => v.value === fieldName);\n  return (\n    <>\n      <div>\n        <Select\n          value={selectedOption}\n          options={selectOptions}\n          onChange={onSelectChange}\n          noOptionsMessage=\"No fields found\"\n        />\n      </div>\n      <div className={styles.range}>\n        {isFixed && (\n          <InlineFieldRow>\n            <InlineField label=\"Value\" labelWidth={8} grow={true}>\n              <NumberInput value={val.fixed} {...minMaxStep} onChange={onValueChange} />\n            </InlineField>\n          </InlineFieldRow>\n        )}\n        {!isFixed && !minMaxStep.hideRange && (\n          <>\n            <InlineFieldRow>\n              <InlineField label=\"Min\" labelWidth={8} grow={true}>\n                <NumberInput value={val.min} {...minMaxStep} onChange={onMinChange} />\n              </InlineField>\n            </InlineFieldRow>\n            <InlineFieldRow>\n              <InlineField label=\"Max\" labelWidth={8} grow={true}>\n                <NumberInput value={val.max} {...minMaxStep} onChange={onMaxChange} />\n              </InlineField>\n            </InlineFieldRow>\n          </>\n        )}\n      </div>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  range: css`\n    padding-top: 8px;\n  `,\n});\n","import { css } from '@emotion/css';\nimport { useCallback } from 'react';\n\nimport { FieldType, GrafanaTheme2, SelectableValue, StandardEditorProps } from '@grafana/data';\nimport { ScalarDimensionMode, ScalarDimensionConfig } from '@grafana/schema';\nimport { InlineField, InlineFieldRow, RadioButtonGroup, Select, useStyles2 } from '@grafana/ui';\nimport { useFieldDisplayNames, useSelectOptions } from '@grafana/ui/src/components/MatchersUI/utils';\nimport { NumberInput } from 'app/core/components/OptionsUI/NumberInput';\n\nimport { ScalarDimensionOptions } from '../types';\n\nconst fixedValueOption: SelectableValue<string> = {\n  label: 'Fixed value',\n  value: '_____fixed_____',\n};\n\nconst scalarOptions = [\n  { label: 'Mod', value: ScalarDimensionMode.Mod, description: 'Use field values, mod from max' },\n  { label: 'Clamped', value: ScalarDimensionMode.Clamped, description: 'Use field values, clamped to max and min' },\n];\n\ntype Props = StandardEditorProps<ScalarDimensionConfig, ScalarDimensionOptions>;\n\nexport const ScalarDimensionEditor = ({ value, context, onChange, item }: Props) => {\n  const { settings } = item;\n\n  const DEFAULT_VALUE = 0;\n\n  const fieldName = value?.field;\n  const isFixed = Boolean(!fieldName);\n  const names = useFieldDisplayNames(context.data);\n  const selectOptions = useSelectOptions(names, fieldName, fixedValueOption, FieldType.number);\n\n  const styles = useStyles2(getStyles);\n\n  const onSelectChange = useCallback(\n    (selection: SelectableValue<string>) => {\n      const field = selection.value;\n      if (field && field !== fixedValueOption.value) {\n        onChange({\n          ...value,\n          field,\n        });\n      } else {\n        const fixed = value.fixed ?? DEFAULT_VALUE;\n        onChange({\n          ...value,\n          field: undefined,\n          fixed,\n        });\n      }\n    },\n    [onChange, value]\n  );\n\n  const onModeChange = useCallback(\n    (mode: ScalarDimensionMode) => {\n      onChange({\n        ...value,\n        mode,\n      });\n    },\n    [onChange, value]\n  );\n\n  const onValueChange = useCallback(\n    (v: number | undefined) => {\n      onChange({\n        ...value,\n        field: undefined,\n        fixed: v ?? DEFAULT_VALUE,\n      });\n    },\n    [onChange, value]\n  );\n\n  const val = value ?? {};\n  const mode = value?.mode ?? ScalarDimensionMode.Mod;\n  const selectedOption = isFixed ? fixedValueOption : selectOptions.find((v) => v.value === fieldName);\n  return (\n    <>\n      <div>\n        <InlineFieldRow>\n          <InlineField label=\"Limit\" labelWidth={8} grow={true}>\n            <RadioButtonGroup value={mode} options={scalarOptions} onChange={onModeChange} fullWidth />\n          </InlineField>\n        </InlineFieldRow>\n        <Select\n          value={selectedOption}\n          options={selectOptions}\n          onChange={onSelectChange}\n          noOptionsMessage=\"No fields found\"\n        />\n      </div>\n      <div className={styles.range}>\n        {isFixed && (\n          <InlineFieldRow>\n            <InlineField label=\"Value\" labelWidth={8} grow={true}>\n              <NumberInput\n                value={val?.fixed ?? DEFAULT_VALUE}\n                onChange={onValueChange}\n                max={settings?.max}\n                min={settings?.min}\n              />\n            </InlineField>\n          </InlineFieldRow>\n        )}\n      </div>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  range: css`\n    padding-top: 8px;\n  `,\n});\n"],"names":["LayerName","name","onChange","verifyLayerNameUniqueness","overrideStyles","styles","getStyles","isEditing","setIsEditing","validationError","setValidationError","onEditLayer","event","onEndEditName","newName","onInputChange","onEditLayerBlur","onKeyDown","onFocus","theme","fixedColorOption","ColorDimensionEditor","props","value","context","item","defaultColor","fieldName","isFixed","names","selectOptions","onSelectChange","selection","field","fixed","onColorChange","c","selectedOption","v","textOptions","dummyFieldSettings","dummyStringSettings","TextDimensionEditor","onModeChange","mode","onFieldChange","onFixedChange","onClearFixed","IconSelector","icons","setIcons","icon","setIcon","iconRoot","onChangeIcon","data","selectedValue","resourceOptions","ResourceDimensionEditor","labelWidth","onClear","showSourceRadio","mediaType","folderName","maxFiles","srcPath","InlineFieldRow","InlineField","RadioButtonGroup","FieldNamePicker","ResourcePicker","niceName","idx","fixedValueOption","ScaleDimensionEditor","settings","minMaxStep","validateAndDoChange","onMinChange","min","onMaxChange","max","onValueChange","val","NumberInput","scalarOptions","ScalarDimensionEditor","DEFAULT_VALUE"],"sourceRoot":""}