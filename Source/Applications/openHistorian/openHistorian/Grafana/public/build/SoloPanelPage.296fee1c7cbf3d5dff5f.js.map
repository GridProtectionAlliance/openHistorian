{"version":3,"file":"SoloPanelPage.296fee1c7cbf3d5dff5f.js","mappings":"6OAiBA,MAIMA,EAAqB,CACzBC,cAAaA,EAAAA,IAGTC,GAAYC,EAAAA,EAAAA,UAROC,IAAD,CACtBC,UAAWD,EAAMC,UAAUC,cAOcN,GAUpC,MAAMO,UAAsBC,EAAAA,UAAwB,c,UAAA,oB,EAC1C,CACbC,MAAO,KACPC,UAAU,I,EAH6C,W,EAAA,M,sFAMzDC,oBACE,MAAM,MAAEC,EAAF,MAASC,GAAUC,KAAKC,MAE9BD,KAAKC,MAAMd,cAAc,CACvBe,QAASJ,EAAMK,OAAOC,KACtBC,OAAQP,EAAMK,OAAOG,IACrBC,QAAST,EAAMK,OAAOK,KACtBC,UAAWV,EAAMU,UACjBC,QAAQ,IAIZC,aAAqB,MACnB,OAAOC,SAAQ,UAACZ,KAAKC,MAAMY,YAAYC,eAAxB,QAAmC,IAAK,IAGzDC,mBAAmBC,GACjB,MAAM,UAAEzB,GAAcS,KAAKC,MAE3B,GAAKV,KAKAyB,EAAUzB,WAAayB,EAAUzB,UAAUe,MAAQf,EAAUe,KAAK,CACrE,MAAMX,EAAQJ,EAAU0B,gBAAgBjB,KAAKC,MAAMY,YAAYC,SAE/D,IAAKnB,EAEH,YADAK,KAAKkB,SAAS,CAAEtB,UAAU,IAI5BI,KAAKkB,SAAS,CAAEvB,MAAAA,KAIpBwB,SACE,OACE,SAACC,EAAD,CACE7B,UAAWS,KAAKC,MAAMV,UACtBK,SAAUI,KAAKV,MAAMM,SACrBD,MAAOK,KAAKV,MAAMK,MAClBmB,QAASd,KAAKW,gBAWf,MAAMS,EAAY,IAA6D,IAA5D,UAAE7B,EAAF,SAAaK,EAAb,MAAuBD,EAAvB,QAA8BmB,GAA8B,EACpF,OAAIlB,GACK,iBAAKyB,UAAU,oBAAf,2BAAkDP,EAAlD,gBAGJnB,GAAUJ,GAKb,gBAAK8B,UAAU,aAAf,UACE,SAAC,IAAD,UACG,IAAuB,IAAtB,MAAEC,EAAF,OAASC,GAAa,EACtB,OAAc,IAAVD,EACK,MAGP,SAAC,IAAD,CACEE,SAAU7B,EAAM8B,IAChBH,MAAOA,EACPC,OAAQA,EACRhC,UAAWA,EACXI,MAAOA,EACP+B,WAAW,EACXC,WAAW,EACXC,MAAM,SAnBT,IAAP,GAAO,gEA4BX,EAAexC,EAAUK","sources":["webpack://grafana/./public/app/features/dashboard/containers/SoloPanelPage.tsx"],"sourcesContent":["import React, { Component } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { DashboardModel, PanelModel } from 'app/features/dashboard/state';\nimport { StoreState } from 'app/types';\n\nimport { DashboardPanel } from '../dashgrid/DashboardPanel';\nimport { initDashboard } from '../state/initDashboard';\n\nexport interface DashboardPageRouteParams {\n  uid?: string;\n  type?: string;\n  slug?: string;\n}\n\nconst mapStateToProps = (state: StoreState) => ({\n  dashboard: state.dashboard.getModel(),\n});\n\nconst mapDispatchToProps = {\n  initDashboard,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = GrafanaRouteComponentProps<DashboardPageRouteParams, { panelId: string }> &\n  ConnectedProps<typeof connector>;\n\nexport interface State {\n  panel: PanelModel | null;\n  notFound: boolean;\n}\n\nexport class SoloPanelPage extends Component<Props, State> {\n  state: State = {\n    panel: null,\n    notFound: false,\n  };\n\n  componentDidMount() {\n    const { match, route } = this.props;\n\n    this.props.initDashboard({\n      urlSlug: match.params.slug,\n      urlUid: match.params.uid,\n      urlType: match.params.type,\n      routeName: route.routeName,\n      fixUrl: false,\n    });\n  }\n\n  getPanelId(): number {\n    return parseInt(this.props.queryParams.panelId ?? '0', 10);\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { dashboard } = this.props;\n\n    if (!dashboard) {\n      return;\n    }\n\n    // we just got a new dashboard\n    if (!prevProps.dashboard || prevProps.dashboard.uid !== dashboard.uid) {\n      const panel = dashboard.getPanelByUrlId(this.props.queryParams.panelId);\n\n      if (!panel) {\n        this.setState({ notFound: true });\n        return;\n      }\n\n      this.setState({ panel });\n    }\n  }\n\n  render() {\n    return (\n      <SoloPanel\n        dashboard={this.props.dashboard}\n        notFound={this.state.notFound}\n        panel={this.state.panel}\n        panelId={this.getPanelId()}\n      />\n    );\n  }\n}\n\nexport interface SoloPanelProps extends State {\n  dashboard: DashboardModel | null;\n  panelId: number;\n}\n\nexport const SoloPanel = ({ dashboard, notFound, panel, panelId }: SoloPanelProps) => {\n  if (notFound) {\n    return <div className=\"alert alert-error\">Panel with id {panelId} not found</div>;\n  }\n\n  if (!panel || !dashboard) {\n    return <div>Loading & initializing dashboard</div>;\n  }\n\n  return (\n    <div className=\"panel-solo\">\n      <AutoSizer>\n        {({ width, height }) => {\n          if (width === 0) {\n            return null;\n          }\n          return (\n            <DashboardPanel\n              stateKey={panel.key}\n              width={width}\n              height={height}\n              dashboard={dashboard}\n              panel={panel}\n              isEditing={false}\n              isViewing={false}\n              lazy={false}\n            />\n          );\n        }}\n      </AutoSizer>\n    </div>\n  );\n};\n\nexport default connector(SoloPanelPage);\n"],"names":["mapDispatchToProps","initDashboard","connector","connect","state","dashboard","getModel","SoloPanelPage","Component","panel","notFound","componentDidMount","match","route","this","props","urlSlug","params","slug","urlUid","uid","urlType","type","routeName","fixUrl","getPanelId","parseInt","queryParams","panelId","componentDidUpdate","prevProps","getPanelByUrlId","setState","render","SoloPanel","className","width","height","stateKey","key","isEditing","isViewing","lazy"],"sourceRoot":""}