{"version":3,"file":"615.fa4599f74e04c773935b.js","mappings":"yRA6BO,MAAMA,EAAcC,GAAiB,CAC1C,MAAMC,KAAY,MAAmB,EAC/BC,EAAW,MAAOC,GAAwB,CAC1CA,EAAS,OAAS,IACpB,OAAOA,EAAS,KAElB,OAAOA,EAAS,SAEC,QAAM,KAAc,EAClC,KAAK,yBAA0B,CAC9B,MAAOA,EAAS,MAChB,KAAMA,EAAS,KACf,SAAUA,EAAS,MACnB,QAASA,EAAS,QAClB,SAAUA,EAAS,SACnB,KAAMA,EAAS,IACjB,CAAC,EACA,MAAOC,GAAQ,CACd,MAAMC,EAAMD,EAAI,MAAM,SAAWA,EACjCH,EAAU,QAAQI,CAAG,CACvB,CAAC,GAEU,OAAS,0BACpB,OAAO,SAAS,UAAO,MAAU,EAAE,UAAY,8BAA8B,EAE/E,OAAO,SAAS,UAAO,MAAU,EAAE,UAAY,GAAG,CACpD,EAEMC,EAAgB,CACpB,MAAON,EAAM,YAAY,MACzB,KAAMA,EAAM,YAAY,IAC1B,EAEA,OACE,gBAAC,KAAW,KACV,gBAAC,KAAQ,KACP,gBAAC,IAAI,CAAC,cAAAM,EAA8B,SAAAJ,CAAA,EACjC,CAAC,CAAE,OAAAK,EAAQ,SAAAC,EAAU,UAAAC,CAAU,IAC9B,gCACE,gBAAC,IAAK,CAAC,MAAM,aACX,gBAAC,IAAK,CAAC,GAAG,YAAa,GAAGD,EAAS,MAAM,EAAG,YAAY,YAAa,EACvE,EACA,gBAAC,IAAK,CAAC,MAAM,QAAQ,QAAS,CAAC,CAACD,EAAO,MAAO,MAAOA,EAAO,OAAO,SACjE,gBAAC,KACC,GAAG,QACF,GAAGC,EAAS,QAAS,CACpB,SAAU,oBACV,QAAS,CACP,MAAO,KACP,QAAS,kBACX,CACF,CAAC,EACD,KAAK,QACL,YAAY,QACd,CACF,EACC,IAAC,MAAU,EAAE,eACZ,gBAAC,IAAK,CAAC,MAAM,aACX,gBAAC,IAAK,CAAC,GAAG,WAAY,GAAGA,EAAS,SAAS,EAAG,YAAY,WAAY,EACxE,KAED,MAAU,EAAE,oBACX,gBAAC,IAAK,CAAC,MAAM,gDACX,gBAAC,IAAK,CAAC,GAAG,oBAAqB,GAAGA,EAAS,MAAM,EAAG,YAAY,MAAO,EACzE,EAEF,gBAAC,IAAK,CAAC,MAAM,WAAW,QAAS,CAAC,CAACD,EAAO,SAAU,MAAOA,GAAQ,UAAU,SAC3E,gBAAC,KACC,GAAG,eACH,UAAS,GACT,aAAa,eACZ,GAAGC,EAAS,WAAY,CAAE,SAAU,sBAAuB,CAAC,EAC/D,CACF,EACA,gBAAC,IAAK,CAAC,MAAM,mBAAmB,QAAS,CAAC,CAACD,EAAO,QAAS,MAAOA,GAAQ,SAAS,SACjF,gBAAC,KACC,GAAG,uBACH,aAAa,eACZ,GAAGC,EAAS,UAAW,CACtB,SAAU,iCACV,SAAWE,GAAMA,IAAMD,EAAU,EAAE,UAAY,uBACjD,CAAC,EACH,CACF,EAEA,gBAAC,KAAe,KACd,gBAAC,KAAM,CAAC,KAAK,UAAS,QAAM,EAC5B,gBAAC,KAAU,CAAC,KAAK,OAAO,QAAM,MAAU,EAAE,UAAY,UAAU,eAEhE,CACF,CACF,CAEJ,CACF,CACF,CAEJ,EAEA,EAAeV,C,4DC7HR,MAAMY,EACX,wIAEK,SAASC,GAAU,CACxB,MAAMC,EAAS,iBAAoB,YACnC,MAAO,CAAC,EAAEA,GAAUA,EAAS,EAC/B,CAEO,MAAMC,EAAiB,IAAMF,EAAQ,GAAK,oC","sources":["webpack://grafana/./public/app/core/components/Signup/SignupPage.tsx","webpack://grafana/./public/app/features/admin/utils.ts"],"sourcesContent":["import React from 'react';\n\nimport { getBackendSrv } from '@grafana/runtime';\nimport { Form, Field, Input, Button, HorizontalGroup, LinkButton, FormAPI } from '@grafana/ui';\nimport { getConfig } from 'app/core/config';\nimport { useAppNotification } from 'app/core/copy/appNotification';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { w3cStandardEmailValidator } from 'app/features/admin/utils';\n\nimport { InnerBox, LoginLayout } from '../Login/LoginLayout';\nimport { PasswordField } from '../PasswordField/PasswordField';\n\ninterface SignupDTO {\n  name?: string;\n  email: string;\n  username: string;\n  orgName?: string;\n  password: string;\n  code: string;\n  confirm?: string;\n}\n\ninterface QueryParams {\n  email?: string;\n  code?: string;\n}\n\ninterface Props extends GrafanaRouteComponentProps<{}, QueryParams> {}\n\nexport const SignupPage = (props: Props) => {\n  const notifyApp = useAppNotification();\n  const onSubmit = async (formData: SignupDTO) => {\n    if (formData.name === '') {\n      delete formData.name;\n    }\n    delete formData.confirm;\n\n    const response = await getBackendSrv()\n      .post('/api/user/signup/step2', {\n        email: formData.email,\n        code: formData.code,\n        username: formData.email,\n        orgName: formData.orgName,\n        password: formData.password,\n        name: formData.name,\n      })\n      .catch((err) => {\n        const msg = err.data?.message || err;\n        notifyApp.warning(msg);\n      });\n\n    if (response.code === 'redirect-to-select-org') {\n      window.location.assign(getConfig().appSubUrl + '/profile/select-org?signup=1');\n    }\n    window.location.assign(getConfig().appSubUrl + '/');\n  };\n\n  const defaultValues = {\n    email: props.queryParams.email,\n    code: props.queryParams.code,\n  };\n\n  return (\n    <LoginLayout>\n      <InnerBox>\n        <Form defaultValues={defaultValues} onSubmit={onSubmit}>\n          {({ errors, register, getValues }: FormAPI<SignupDTO>) => (\n            <>\n              <Field label=\"Your name\">\n                <Input id=\"user-name\" {...register('name')} placeholder=\"(optional)\" />\n              </Field>\n              <Field label=\"Email\" invalid={!!errors.email} error={errors.email?.message}>\n                <Input\n                  id=\"email\"\n                  {...register('email', {\n                    required: 'Email is required',\n                    pattern: {\n                      value: w3cStandardEmailValidator,\n                      message: 'Email is invalid',\n                    },\n                  })}\n                  type=\"email\"\n                  placeholder=\"Email\"\n                />\n              </Field>\n              {!getConfig().autoAssignOrg && (\n                <Field label=\"Org. name\">\n                  <Input id=\"org-name\" {...register('orgName')} placeholder=\"Org. name\" />\n                </Field>\n              )}\n              {getConfig().verifyEmailEnabled && (\n                <Field label=\"Email verification code (sent to your email)\">\n                  <Input id=\"verification-code\" {...register('code')} placeholder=\"Code\" />\n                </Field>\n              )}\n              <Field label=\"Password\" invalid={!!errors.password} error={errors?.password?.message}>\n                <PasswordField\n                  id=\"new-password\"\n                  autoFocus\n                  autoComplete=\"new-password\"\n                  {...register('password', { required: 'Password is required' })}\n                />\n              </Field>\n              <Field label=\"Confirm password\" invalid={!!errors.confirm} error={errors?.confirm?.message}>\n                <PasswordField\n                  id=\"confirm-new-password\"\n                  autoComplete=\"new-password\"\n                  {...register('confirm', {\n                    required: 'Confirmed password is required',\n                    validate: (v) => v === getValues().password || 'Passwords must match!',\n                  })}\n                />\n              </Field>\n\n              <HorizontalGroup>\n                <Button type=\"submit\">Submit</Button>\n                <LinkButton fill=\"text\" href={getConfig().appSubUrl + '/login'}>\n                  Back to login\n                </LinkButton>\n              </HorizontalGroup>\n            </>\n          )}\n        </Form>\n      </InnerBox>\n    </LoginLayout>\n  );\n};\n\nexport default SignupPage;\n","import { config } from '@grafana/runtime/src';\n\n// https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address\nexport const w3cStandardEmailValidator =\n  /^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n\nexport function isTrial() {\n  const expiry = config.licenseInfo?.trialExpiry;\n  return !!(expiry && expiry > 0);\n}\n\nexport const highlightTrial = () => isTrial() && config.featureToggles.featureHighlights;\n"],"names":["SignupPage","props","notifyApp","onSubmit","formData","err","msg","defaultValues","errors","register","getValues","v","w3cStandardEmailValidator","isTrial","expiry","highlightTrial"],"sourceRoot":""}