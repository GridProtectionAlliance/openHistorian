{"version":3,"file":"TeamPages.be6c0b586457faf836cc.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/RolePicker/TeamRolePicker.tsx","webpack://grafana/./public/app/core/components/RolePicker/hooks.ts","webpack://grafana/./public/app/core/components/SharedPreferences/SharedPreferences.tsx","webpack://grafana/./public/app/features/admin/utils.ts","webpack://grafana/./public/app/core/components/Upgrade/UpgradeBox.tsx","webpack://grafana/./public/app/features/teams/TeamGroupSync.tsx","webpack://grafana/./public/app/core/components/WithFeatureToggle.tsx","webpack://grafana/./public/app/features/teams/TeamMemberRow.tsx","webpack://grafana/./public/app/features/teams/TeamMembers.tsx","webpack://grafana/./public/app/features/teams/TeamPermissions.tsx","webpack://grafana/./public/app/features/teams/TeamSettings.tsx","webpack://grafana/./public/app/features/teams/TeamPages.tsx","webpack://grafana/./public/app/features/teams/state/actions.ts","webpack://grafana/./public/app/features/teams/state/navModel.ts","webpack://grafana/./public/app/features/teams/state/selectors.ts"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useAsyncFn } from 'react-use';\n\nimport { contextSrv } from 'app/core/core';\nimport { Role, AccessControlAction } from 'app/types';\n\nimport { RolePicker } from './RolePicker';\nimport { fetchTeamRoles, updateTeamRoles } from './api';\n\nexport interface Props {\n  teamId: number;\n  orgId?: number;\n  roleOptions: Role[];\n  disabled?: boolean;\n  onApplyRoles?: (newRoles: Role[]) => void;\n  pendingRoles?: Role[];\n  /**\n   * Set whether the component should send a request with the new roles to the\n   * backend in TeamRolePicker.onRolesChange (apply=false), or call {@link onApplyRoles}\n   * with the updated list of roles (apply=true).\n   *\n   * Besides it sets the RolePickerMenu's Button title to\n   *   * `Update` in case apply equals false\n   *   * `Apply` in case apply equals true\n   *\n   * @default false\n   */\n  apply?: boolean;\n  maxWidth?: string | number;\n}\n\nexport const TeamRolePicker = ({\n  teamId,\n  roleOptions,\n  disabled,\n  onApplyRoles,\n  pendingRoles,\n  apply = false,\n  maxWidth,\n}: Props) => {\n  const [{ loading, value: appliedRoles = [] }, getTeamRoles] = useAsyncFn(async () => {\n    try {\n      if (apply && Boolean(pendingRoles?.length)) {\n        return pendingRoles;\n      }\n\n      if (contextSrv.hasPermission(AccessControlAction.ActionTeamsRolesList)) {\n        return await fetchTeamRoles(teamId);\n      }\n    } catch (e) {\n      console.error('Error loading options', e);\n    }\n    return [];\n  }, [teamId, pendingRoles]);\n\n  useEffect(() => {\n    getTeamRoles();\n  }, [teamId, getTeamRoles, pendingRoles]);\n\n  const onRolesChange = async (roles: Role[]) => {\n    if (!apply) {\n      await updateTeamRoles(roles, teamId);\n      await getTeamRoles();\n    } else if (onApplyRoles) {\n      onApplyRoles(roles);\n    }\n  };\n\n  const canUpdateRoles =\n    contextSrv.hasPermission(AccessControlAction.ActionTeamsRolesAdd) &&\n    contextSrv.hasPermission(AccessControlAction.ActionTeamsRolesRemove);\n\n  return (\n    <RolePicker\n      apply={apply}\n      onRolesChange={onRolesChange}\n      roleOptions={roleOptions}\n      appliedRoles={appliedRoles}\n      isLoading={loading}\n      disabled={disabled}\n      basicRoleDisabled={true}\n      canUpdateRoles={canUpdateRoles}\n      maxWidth={maxWidth}\n    />\n  );\n};\n","import { useState } from 'react';\nimport useAsync from 'react-use/lib/useAsync';\n\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction } from 'app/types';\n\nimport { fetchRoleOptions } from './api';\n\nexport const useRoleOptions = (organizationId: number) => {\n  const [orgId, setOrgId] = useState(organizationId);\n\n  const { value = [] } = useAsync(async () => {\n    if (contextSrv.licensedAccessControlEnabled() && contextSrv.hasPermission(AccessControlAction.ActionRolesList)) {\n      return fetchRoleOptions(orgId);\n    }\n    return Promise.resolve([]);\n  }, [orgId]);\n\n  return [{ roleOptions: value }, setOrgId] as const;\n};\n","import { css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\n\nimport { FeatureState, SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { config, reportInteraction } from '@grafana/runtime';\nimport { Preferences as UserPreferencesDTO } from '@grafana/schema/src/raw/preferences/x/preferences_types.gen';\nimport {\n  Button,\n  Field,\n  FieldSet,\n  Form,\n  Label,\n  RadioButtonGroup,\n  Select,\n  stylesFactory,\n  TimeZonePicker,\n  WeekStartPicker,\n  FeatureBadge,\n} from '@grafana/ui';\nimport { DashboardPicker } from 'app/core/components/Select/DashboardPicker';\nimport { t, Trans } from 'app/core/internationalization';\nimport { LANGUAGES } from 'app/core/internationalization/constants';\nimport { PreferencesService } from 'app/core/services/PreferencesService';\n\nexport interface Props {\n  resourceUri: string;\n  disabled?: boolean;\n  preferenceType: 'org' | 'team' | 'user';\n  onConfirm?: () => Promise<boolean>;\n}\n\nexport type State = UserPreferencesDTO;\n\nfunction getLanguageOptions(): Array<SelectableValue<string>> {\n  const languageOptions = LANGUAGES.map((v) => ({\n    value: v.code,\n    label: v.name,\n  }));\n\n  const options = [\n    {\n      value: '',\n      label: t('common.locale.default', 'Default'),\n    },\n    ...languageOptions,\n  ];\n\n  return options;\n}\n\nconst i18nFlag = Boolean(config.featureToggles.internationalization);\n\nexport class SharedPreferences extends PureComponent<Props, State> {\n  service: PreferencesService;\n  themeOptions: SelectableValue[];\n\n  constructor(props: Props) {\n    super(props);\n\n    this.service = new PreferencesService(props.resourceUri);\n    this.state = {\n      theme: '',\n      timezone: '',\n      weekStart: '',\n      language: '',\n      queryHistory: { homeTab: '' },\n    };\n\n    this.themeOptions = [\n      { value: '', label: t('shared-preferences.theme.default-label', 'Default') },\n      { value: 'dark', label: t('shared-preferences.theme.dark-label', 'Dark') },\n      { value: 'light', label: t('shared-preferences.theme.light-label', 'Light') },\n      { value: 'system', label: t('shared-preferences.theme.system-label', 'System') },\n    ];\n  }\n\n  async componentDidMount() {\n    const prefs = await this.service.load();\n\n    this.setState({\n      homeDashboardUID: prefs.homeDashboardUID,\n      theme: prefs.theme,\n      timezone: prefs.timezone,\n      weekStart: prefs.weekStart,\n      language: prefs.language,\n      queryHistory: prefs.queryHistory,\n    });\n  }\n\n  onSubmitForm = async () => {\n    const confirmationResult = this.props.onConfirm ? await this.props.onConfirm() : true;\n\n    if (confirmationResult) {\n      const { homeDashboardUID, theme, timezone, weekStart, language, queryHistory } = this.state;\n      await this.service.update({ homeDashboardUID, theme, timezone, weekStart, language, queryHistory });\n      window.location.reload();\n    }\n  };\n\n  onThemeChanged = (value: string) => {\n    this.setState({ theme: value });\n  };\n\n  onTimeZoneChanged = (timezone?: string) => {\n    if (!timezone) {\n      return;\n    }\n    this.setState({ timezone: timezone });\n  };\n\n  onWeekStartChanged = (weekStart: string) => {\n    this.setState({ weekStart: weekStart });\n  };\n\n  onHomeDashboardChanged = (dashboardUID: string) => {\n    this.setState({ homeDashboardUID: dashboardUID });\n  };\n\n  onLanguageChanged = (language: string) => {\n    this.setState({ language });\n\n    reportInteraction('grafana_preferences_language_changed', {\n      toLanguage: language,\n      preferenceType: this.props.preferenceType,\n    });\n  };\n\n  render() {\n    const { theme, timezone, weekStart, homeDashboardUID, language } = this.state;\n    const { disabled } = this.props;\n    const styles = getStyles();\n    const languages = getLanguageOptions();\n    let currentThemeOption = this.themeOptions[0].value;\n    if (theme?.length) {\n      currentThemeOption = this.themeOptions.find((item) => item.value === theme)?.value;\n    }\n\n    return (\n      <Form onSubmit={this.onSubmitForm}>\n        {() => {\n          return (\n            <FieldSet label={<Trans i18nKey=\"shared-preferences.title\">Preferences</Trans>} disabled={disabled}>\n              <Field label={t('shared-preferences.fields.theme-label', 'UI Theme')}>\n                <RadioButtonGroup\n                  options={this.themeOptions}\n                  value={currentThemeOption}\n                  onChange={this.onThemeChanged}\n                />\n              </Field>\n\n              <Field\n                label={\n                  <Label htmlFor=\"home-dashboard-select\">\n                    <span className={styles.labelText}>\n                      <Trans i18nKey=\"shared-preferences.fields.home-dashboard-label\">Home Dashboard</Trans>\n                    </span>\n                  </Label>\n                }\n                data-testid=\"User preferences home dashboard drop down\"\n              >\n                <DashboardPicker\n                  value={homeDashboardUID}\n                  onChange={(v) => this.onHomeDashboardChanged(v?.uid ?? '')}\n                  defaultOptions={true}\n                  isClearable={true}\n                  placeholder={t('shared-preferences.fields.home-dashboard-placeholder', 'Default dashboard')}\n                  inputId=\"home-dashboard-select\"\n                />\n              </Field>\n\n              <Field\n                label={t('shared-dashboard.fields.timezone-label', 'Timezone')}\n                data-testid={selectors.components.TimeZonePicker.containerV2}\n              >\n                <TimeZonePicker\n                  includeInternal={true}\n                  value={timezone}\n                  onChange={this.onTimeZoneChanged}\n                  inputId=\"shared-preferences-timezone-picker\"\n                />\n              </Field>\n\n              <Field\n                label={t('shared-preferences.fields.week-start-label', 'Week start')}\n                data-testid={selectors.components.WeekStartPicker.containerV2}\n              >\n                <WeekStartPicker\n                  value={weekStart || ''}\n                  onChange={this.onWeekStartChanged}\n                  inputId={'shared-preferences-week-start-picker'}\n                />\n              </Field>\n\n              {i18nFlag ? (\n                <Field\n                  label={\n                    <Label htmlFor=\"locale-select\">\n                      <span className={styles.labelText}>\n                        <Trans i18nKey=\"shared-preferences.fields.locale-label\">Language</Trans>\n                      </span>\n                      <FeatureBadge featureState={FeatureState.beta} />\n                    </Label>\n                  }\n                  data-testid=\"User preferences language drop down\"\n                >\n                  <Select\n                    value={languages.find((lang) => lang.value === language)}\n                    onChange={(lang: SelectableValue<string>) => this.onLanguageChanged(lang.value ?? '')}\n                    options={languages}\n                    placeholder={t('shared-preferences.fields.locale-placeholder', 'Choose language')}\n                    inputId=\"locale-select\"\n                  />\n                </Field>\n              ) : null}\n\n              <div className=\"gf-form-button-row\">\n                <Button\n                  type=\"submit\"\n                  variant=\"primary\"\n                  data-testid={selectors.components.UserProfile.preferencesSaveButton}\n                >\n                  <Trans i18nKey=\"common.save\">Save</Trans>\n                </Button>\n              </div>\n            </FieldSet>\n          );\n        }}\n      </Form>\n    );\n  }\n}\n\nexport default SharedPreferences;\n\nconst getStyles = stylesFactory(() => {\n  return {\n    labelText: css`\n      margin-right: 6px;\n    `,\n  };\n});\n","import { config } from '@grafana/runtime/src';\n\n// https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address\nexport const w3cStandardEmailValidator =\n  /^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n\nexport function isTrial() {\n  const expiry = config.licenseInfo?.trialExpiry;\n  return !!(expiry && expiry > 0);\n}\n\nexport const highlightTrial = () => isTrial() && config.featureToggles.featureHighlights;\n","import { css, cx } from '@emotion/css';\nimport React, { HTMLAttributes, useEffect } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { reportExperimentView } from '@grafana/runtime/src';\nimport { Button, Icon, LinkButton, useStyles2 } from '@grafana/ui';\n\ntype ComponentSize = 'sm' | 'md';\n\nexport interface Props extends HTMLAttributes<HTMLOrSVGElement> {\n  featureName: string;\n  size?: ComponentSize;\n  text?: string;\n  eventVariant?: string;\n  featureId: string;\n}\n\nexport const UpgradeBox = ({\n  featureName,\n  className,\n  children,\n  text,\n  featureId,\n  eventVariant = '',\n  size = 'md',\n  ...htmlProps\n}: Props) => {\n  const styles = useStyles2((theme) => getUpgradeBoxStyles(theme, size));\n\n  useEffect(() => {\n    reportExperimentView(`feature-highlights-${featureId}`, 'test', eventVariant);\n  }, [eventVariant, featureId]);\n\n  return (\n    <div className={cx(styles.box, className)} {...htmlProps}>\n      <Icon name={'rocket'} className={styles.icon} />\n      <div className={styles.inner}>\n        <p className={styles.text}>\n          You’ve discovered a Pro feature! {text || `Get the Grafana Pro plan to access ${featureName}.`}\n        </p>\n        <LinkButton\n          variant=\"secondary\"\n          size={size}\n          className={styles.button}\n          href=\"https://grafana.com/profile/org/subscription\"\n          target=\"__blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Upgrade\n        </LinkButton>\n      </div>\n    </div>\n  );\n};\n\nconst getUpgradeBoxStyles = (theme: GrafanaTheme2, size: ComponentSize) => {\n  const borderRadius = theme.shape.borderRadius(2);\n  const fontBase = size === 'md' ? 'body' : 'bodySmall';\n\n  return {\n    box: css`\n      display: flex;\n      align-items: center;\n      position: relative;\n      border-radius: ${borderRadius};\n      background: ${theme.colors.success.transparent};\n      padding: ${theme.spacing(2)};\n      color: ${theme.colors.success.text};\n      font-size: ${theme.typography[fontBase].fontSize};\n      text-align: left;\n      line-height: 16px;\n      margin: ${theme.spacing(0, 'auto', 3, 'auto')};\n      max-width: ${theme.breakpoints.values.xxl}px;\n      width: 100%;\n    `,\n    inner: css`\n      display: flex;\n      align-items: center;\n      width: 100%;\n      justify-content: space-between;\n    `,\n    text: css`\n      margin: 0;\n    `,\n    button: css`\n      background-color: ${theme.colors.success.main};\n      font-weight: ${theme.typography.fontWeightLight};\n      color: white;\n\n      &:hover {\n        background-color: ${theme.colors.success.main};\n      }\n\n      &:focus-visible {\n        box-shadow: none;\n        color: ${theme.colors.text.primary};\n        outline: 2px solid ${theme.colors.primary.main};\n      }\n    `,\n    icon: css`\n      margin: ${theme.spacing(0.5, 1, 0.5, 0.5)};\n    `,\n  };\n};\n\nexport interface UpgradeContentProps {\n  image: string;\n  featureUrl?: string;\n  featureName: string;\n  description?: string;\n  listItems: string[];\n  caption?: string;\n  action?: {\n    text: string;\n    link?: string;\n    onClick?: () => void;\n  };\n}\n\nexport const UpgradeContent = ({\n  listItems,\n  image,\n  featureUrl,\n  featureName,\n  description,\n  caption,\n  action,\n}: UpgradeContentProps) => {\n  const styles = useStyles2(getUpgradeContentStyles);\n  return (\n    <div className={styles.container}>\n      <div className={styles.content}>\n        <h3 className={styles.title}>Get started with {featureName}</h3>\n        {description && <h6 className={styles.description}>{description}</h6>}\n        <ul className={styles.list}>\n          {listItems.map((item, index) => (\n            <li key={index}>\n              <Icon name={'check'} size={'xl'} className={styles.icon} /> {item}\n            </li>\n          ))}\n        </ul>\n        {action?.link && (\n          <LinkButton variant={'primary'} href={action.link}>\n            {action.text}\n          </LinkButton>\n        )}\n        {action?.onClick && (\n          <Button variant={'primary'} onClick={action.onClick}>\n            {action.text}\n          </Button>\n        )}\n        {featureUrl && (\n          <LinkButton fill={'text'} href={featureUrl} className={styles.link} target=\"_blank\" rel=\"noreferrer noopener\">\n            Learn more\n          </LinkButton>\n        )}\n      </div>\n      <div className={styles.media}>\n        <img src={getImgUrl(image)} alt={'Feature screenshot'} />\n        {caption && <p className={styles.caption}>{caption}</p>}\n      </div>\n    </div>\n  );\n};\n\nconst getUpgradeContentStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      display: flex;\n      justify-content: space-between;\n    `,\n    content: css`\n      width: 45%;\n      margin-right: ${theme.spacing(4)};\n    `,\n    media: css`\n      width: 55%;\n\n      img {\n        width: 100%;\n      }\n    `,\n    title: css`\n      color: ${theme.colors.text.maxContrast};\n    `,\n    description: css`\n      color: ${theme.colors.text.primary};\n      font-weight: ${theme.typography.fontWeightLight};\n    `,\n    list: css`\n      list-style: none;\n      margin: ${theme.spacing(4, 0, 2, 0)};\n\n      li {\n        display: flex;\n        align-items: flex-start;\n        color: ${theme.colors.text.primary};\n        padding: ${theme.spacing(1, 0)};\n      }\n    `,\n    icon: css`\n      color: ${theme.colors.success.main};\n      margin-right: ${theme.spacing(1)};\n    `,\n    link: css`\n      margin-left: ${theme.spacing(2)};\n    `,\n    caption: css`\n      font-weight: ${theme.typography.fontWeightLight};\n      margin: ${theme.spacing(1, 0, 0)};\n    `,\n  };\n};\n\nexport const UpgradeContentVertical = ({\n  featureName,\n  description,\n  featureUrl,\n  image,\n}: Omit<UpgradeContentProps, 'listItems' | 'caption'>) => {\n  const styles = useStyles2(getContentVerticalStyles);\n  return (\n    <div className={styles.container}>\n      <h3 className={styles.title}>Get started with {featureName}</h3>\n      {description && <h6 className={styles.description}>{description}</h6>}\n      <LinkButton fill={'text'} href={featureUrl} target=\"_blank\" rel=\"noreferrer noopener\">\n        Learn more\n      </LinkButton>\n      <div className={styles.media}>\n        <img src={getImgUrl(image)} alt={'Feature screenshot'} />\n      </div>\n    </div>\n  );\n};\n\nconst getContentVerticalStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      overflow: auto;\n      height: 100%;\n    `,\n    title: css`\n      color: ${theme.colors.text.maxContrast};\n    `,\n    description: css`\n      color: ${theme.colors.text.primary};\n      font-weight: ${theme.typography.fontWeightLight};\n    `,\n    media: css`\n      width: 100%;\n      margin-top: ${theme.spacing(2)};\n\n      img {\n        width: 100%;\n      }\n    `,\n  };\n};\n\nconst getImgUrl = (urlOrId: string) => {\n  if (urlOrId.startsWith('http')) {\n    return urlOrId;\n  }\n\n  return '/public/img/enterprise/highlights/' + urlOrId;\n};\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { Input, Tooltip, Icon, Button, useTheme2, InlineField, InlineFieldRow } from '@grafana/ui';\nimport { SlideDown } from 'app/core/components/Animations/SlideDown';\nimport { CloseButton } from 'app/core/components/CloseButton/CloseButton';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { UpgradeBox, UpgradeContent, UpgradeContentProps } from 'app/core/components/Upgrade/UpgradeBox';\nimport { highlightTrial } from 'app/features/admin/utils';\n\nimport { StoreState, TeamGroup } from '../../types';\n\nimport { addTeamGroup, loadTeamGroups, removeTeamGroup } from './state/actions';\nimport { getTeamGroups } from './state/selectors';\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    groups: getTeamGroups(state.team),\n  };\n}\n\nconst mapDispatchToProps = {\n  loadTeamGroups,\n  addTeamGroup,\n  removeTeamGroup,\n};\n\ninterface OwnProps {\n  isReadOnly: boolean;\n}\n\ninterface State {\n  isAdding: boolean;\n  newGroupId: string;\n}\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nconst headerTooltip = `Sync LDAP, OAuth or SAML groups with your Grafana teams.`;\n\nexport class TeamGroupSync extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { isAdding: false, newGroupId: '' };\n  }\n\n  componentDidMount() {\n    this.fetchTeamGroups();\n  }\n\n  async fetchTeamGroups() {\n    await this.props.loadTeamGroups();\n  }\n\n  onToggleAdding = () => {\n    this.setState({ isAdding: !this.state.isAdding });\n  };\n\n  onNewGroupIdChanged = (event: any) => {\n    this.setState({ newGroupId: event.target.value });\n  };\n\n  onAddGroup = (event: any) => {\n    event.preventDefault();\n    this.props.addTeamGroup(this.state.newGroupId);\n    this.setState({ isAdding: false, newGroupId: '' });\n  };\n\n  onRemoveGroup = (group: TeamGroup) => {\n    this.props.removeTeamGroup(group.groupId);\n  };\n\n  isNewGroupValid() {\n    return this.state.newGroupId.length > 1;\n  }\n\n  renderGroup(group: TeamGroup) {\n    const { isReadOnly } = this.props;\n    return (\n      <tr key={group.groupId}>\n        <td>{group.groupId}</td>\n        <td style={{ width: '1%' }}>\n          <Button\n            size=\"sm\"\n            variant=\"destructive\"\n            onClick={() => this.onRemoveGroup(group)}\n            disabled={isReadOnly}\n            aria-label={`Remove group ${group.groupId}`}\n          >\n            <Icon name=\"times\" />\n          </Button>\n        </td>\n      </tr>\n    );\n  }\n\n  render() {\n    const { isAdding, newGroupId } = this.state;\n    const { groups, isReadOnly } = this.props;\n    return (\n      <div>\n        {highlightTrial() && (\n          <UpgradeBox\n            featureId={'team-sync'}\n            eventVariant={'trial'}\n            featureName={'team sync'}\n            text={'Add a group to enable team sync for free during your trial of Grafana Pro.'}\n          />\n        )}\n        <div className=\"page-action-bar\">\n          {(!highlightTrial() || groups.length > 0) && (\n            <>\n              <h3 className=\"page-sub-heading\">External group sync</h3>\n              <Tooltip placement=\"auto\" content={headerTooltip}>\n                <Icon className=\"icon--has-hover page-sub-heading-icon\" name=\"question-circle\" />\n              </Tooltip>\n            </>\n          )}\n          <div className=\"page-action-bar__spacer\" />\n          {groups.length > 0 && (\n            <Button className=\"pull-right\" onClick={this.onToggleAdding} disabled={isReadOnly}>\n              <Icon name=\"plus\" /> Add group\n            </Button>\n          )}\n        </div>\n\n        <SlideDown in={isAdding}>\n          <div className=\"cta-form\">\n            <CloseButton onClick={this.onToggleAdding} />\n            <form onSubmit={this.onAddGroup}>\n              <InlineFieldRow>\n                <InlineField\n                  label={'Add External Group'}\n                  tooltip=\"LDAP Group Example: cn=users,ou=groups,dc=grafana,dc=org.\"\n                >\n                  <Input\n                    type=\"text\"\n                    id={'add-external-group'}\n                    placeholder=\"\"\n                    value={newGroupId}\n                    onChange={this.onNewGroupIdChanged}\n                    disabled={isReadOnly}\n                  />\n                </InlineField>\n                <Button type=\"submit\" disabled={isReadOnly || !this.isNewGroupValid()} style={{ marginLeft: 4 }}>\n                  Add group\n                </Button>\n              </InlineFieldRow>\n            </form>\n          </div>\n        </SlideDown>\n\n        {groups.length === 0 &&\n          !isAdding &&\n          (highlightTrial() ? (\n            <TeamSyncUpgradeContent action={{ onClick: this.onToggleAdding, text: 'Add group' }} />\n          ) : (\n            <EmptyListCTA\n              onClick={this.onToggleAdding}\n              buttonIcon=\"users-alt\"\n              title=\"There are no external groups to sync with\"\n              buttonTitle=\"Add group\"\n              proTip={headerTooltip}\n              proTipLinkTitle=\"Learn more\"\n              proTipLink=\"https://grafana.com/docs/grafana/latest/setup-grafana/configure-security/configure-team-sync/\"\n              proTipTarget=\"_blank\"\n              buttonDisabled={isReadOnly}\n            />\n          ))}\n\n        {groups.length > 0 && (\n          <div className=\"admin-list-table\">\n            <table className=\"filter-table filter-table--hover form-inline\">\n              <thead>\n                <tr>\n                  <th>External Group ID</th>\n                  <th style={{ width: '1%' }} />\n                </tr>\n              </thead>\n              <tbody>{groups.map((group) => this.renderGroup(group))}</tbody>\n            </table>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport const TeamSyncUpgradeContent = ({ action }: { action?: UpgradeContentProps['action'] }) => {\n  const theme = useTheme2();\n  return (\n    <UpgradeContent\n      action={action}\n      listItems={[\n        'Stop managing user access in two places - assign users to groups in SAML, LDAP or Oauth, and manage access at a Team level in Grafana',\n        'Update users’ permissions immediately when you add or remove them from an LDAP group, with no need for them to sign out and back in',\n      ]}\n      image={`team-sync-${theme.isLight ? 'light' : 'dark'}.png`}\n      featureName={'team sync'}\n      featureUrl={'https://grafana.com/docs/grafana/latest/enterprise/team-sync'}\n      description={\n        'Team Sync makes it easier for you to manage users’ access in Grafana, by immediately updating each user’s Grafana teams and permissions based on their single sign-on group membership, instead of when users sign in.'\n      }\n    />\n  );\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamGroupSync);\n","import React from 'react';\n\nexport interface Props {\n  featureToggle: boolean;\n}\n\nexport const WithFeatureToggle = ({ featureToggle, children }: React.PropsWithChildren<Props>) => {\n  if (featureToggle === true) {\n    return <>{children}</>;\n  }\n\n  return null;\n};\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select, DeleteButton } from '@grafana/ui';\nimport { TagBadge } from 'app/core/components/TagFilter/TagBadge';\nimport { WithFeatureToggle } from 'app/core/components/WithFeatureToggle';\nimport { TeamMember, teamsPermissionLevels, TeamPermissionLevel } from 'app/types';\n\nimport { updateTeamMember, removeTeamMember } from './state/actions';\n\nconst mapDispatchToProps = {\n  removeTeamMember,\n  updateTeamMember,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\ninterface OwnProps {\n  member: TeamMember;\n  syncEnabled: boolean;\n  editorsCanAdmin: boolean;\n  signedInUserIsTeamAdmin: boolean;\n}\nexport type Props = ConnectedProps<typeof connector> & OwnProps;\n\nexport class TeamMemberRow extends PureComponent<Props> {\n  constructor(props: Props) {\n    super(props);\n    this.renderLabels = this.renderLabels.bind(this);\n    this.renderPermissions = this.renderPermissions.bind(this);\n  }\n\n  onRemoveMember(member: TeamMember) {\n    this.props.removeTeamMember(member.userId);\n  }\n\n  onPermissionChange = (item: SelectableValue<TeamPermissionLevel>, member: TeamMember) => {\n    const permission = item.value;\n    const updatedTeamMember: TeamMember = {\n      ...member,\n      permission: permission as number,\n    };\n\n    this.props.updateTeamMember(updatedTeamMember);\n  };\n\n  renderPermissions(member: TeamMember) {\n    const { editorsCanAdmin, signedInUserIsTeamAdmin } = this.props;\n    const value = teamsPermissionLevels.find((dp) => dp.value === member.permission)!;\n\n    return (\n      <WithFeatureToggle featureToggle={editorsCanAdmin}>\n        <td className=\"width-5 team-permissions\">\n          {signedInUserIsTeamAdmin ? (\n            <Select\n              isSearchable={false}\n              options={teamsPermissionLevels}\n              onChange={(item) => this.onPermissionChange(item, member)}\n              value={value}\n              width={32}\n              aria-label={`Select member's ${member.name} permission level`}\n            />\n          ) : (\n            <span>{value.label}</span>\n          )}\n        </td>\n      </WithFeatureToggle>\n    );\n  }\n\n  renderLabels(labels: string[]) {\n    if (!labels) {\n      return <td />;\n    }\n\n    return (\n      <td>\n        {labels.map((label) => (\n          <TagBadge key={label} label={label} removeIcon={false} count={0} />\n        ))}\n      </td>\n    );\n  }\n\n  render() {\n    const { member, syncEnabled, signedInUserIsTeamAdmin } = this.props;\n    return (\n      <tr key={member.userId}>\n        <td className=\"width-4 text-center\">\n          <img\n            alt={`Avatar for team member \"${member.name}\"`}\n            className=\"filter-table__avatar\"\n            src={member.avatarUrl}\n          />\n        </td>\n        <td>{member.login}</td>\n        <td>{member.email}</td>\n        <td>{member.name}</td>\n        {this.renderPermissions(member)}\n        {syncEnabled && this.renderLabels(member.labels)}\n        <td className=\"text-right\">\n          <DeleteButton\n            aria-label={`Remove team member ${member.name}`}\n            size=\"sm\"\n            disabled={!signedInUserIsTeamAdmin}\n            onConfirm={() => this.onRemoveMember(member)}\n          />\n        </td>\n      </tr>\n    );\n  }\n}\n\nexport default connector(TeamMemberRow);\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Button, FilterInput, Label } from '@grafana/ui';\nimport { SlideDown } from 'app/core/components/Animations/SlideDown';\nimport { CloseButton } from 'app/core/components/CloseButton/CloseButton';\nimport { UserPicker } from 'app/core/components/Select/UserPicker';\nimport { TagBadge } from 'app/core/components/TagFilter/TagBadge';\nimport { WithFeatureToggle } from 'app/core/components/WithFeatureToggle';\nimport { config } from 'app/core/config';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { TeamMember, OrgUser } from 'app/types';\n\nimport TeamMemberRow from './TeamMemberRow';\nimport { addTeamMember } from './state/actions';\nimport { setSearchMemberQuery } from './state/reducers';\nimport { getSearchMemberQuery, isSignedInUserTeamAdmin } from './state/selectors';\n\nfunction mapStateToProps(state: any) {\n  return {\n    searchMemberQuery: getSearchMemberQuery(state.team),\n    editorsCanAdmin: config.editorsCanAdmin, // this makes the feature toggle mockable/controllable from tests,\n    signedInUser: contextSrv.user, // this makes the feature toggle mockable/controllable from tests,\n  };\n}\n\nconst mapDispatchToProps = {\n  addTeamMember,\n  setSearchMemberQuery,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ninterface OwnProps {\n  members: TeamMember[];\n  syncEnabled: boolean;\n}\n\nexport type Props = ConnectedProps<typeof connector> & OwnProps;\n\nexport interface State {\n  isAdding: boolean;\n  newTeamMember?: SelectableValue<OrgUser['userId']> | null;\n}\n\nexport class TeamMembers extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { isAdding: false, newTeamMember: null };\n  }\n\n  onSearchQueryChange = (value: string) => {\n    this.props.setSearchMemberQuery(value);\n  };\n\n  onToggleAdding = () => {\n    this.setState({ isAdding: !this.state.isAdding });\n  };\n\n  onUserSelected = (user: SelectableValue<OrgUser['userId']>) => {\n    this.setState({ newTeamMember: user });\n  };\n\n  onAddUserToTeam = async () => {\n    this.props.addTeamMember(this.state.newTeamMember!.id);\n    this.setState({ newTeamMember: null });\n  };\n\n  renderLabels(labels: string[]) {\n    if (!labels) {\n      return <td />;\n    }\n\n    return (\n      <td>\n        {labels.map((label) => (\n          <TagBadge key={label} label={label} removeIcon={false} count={0} />\n        ))}\n      </td>\n    );\n  }\n\n  render() {\n    const { isAdding } = this.state;\n    const { searchMemberQuery, members, syncEnabled, editorsCanAdmin, signedInUser } = this.props;\n    const isTeamAdmin = isSignedInUserTeamAdmin({ members, editorsCanAdmin, signedInUser });\n\n    return (\n      <div>\n        <div className=\"page-action-bar\">\n          <div className=\"gf-form gf-form--grow\">\n            <FilterInput placeholder=\"Search members\" value={searchMemberQuery} onChange={this.onSearchQueryChange} />\n          </div>\n          <Button className=\"pull-right\" onClick={this.onToggleAdding} disabled={isAdding || !isTeamAdmin}>\n            Add member\n          </Button>\n        </div>\n\n        <SlideDown in={isAdding}>\n          <div className=\"cta-form\">\n            <CloseButton aria-label=\"Close 'Add team member' dialogue\" onClick={this.onToggleAdding} />\n            <Label htmlFor=\"user-picker\">Add team member</Label>\n            <div className=\"gf-form-inline\">\n              <UserPicker inputId=\"user-picker\" onSelected={this.onUserSelected} className=\"min-width-30\" />\n              {this.state.newTeamMember && (\n                <Button type=\"submit\" onClick={this.onAddUserToTeam}>\n                  Add to team\n                </Button>\n              )}\n            </div>\n          </div>\n        </SlideDown>\n\n        <div className=\"admin-list-table\">\n          <table className=\"filter-table filter-table--hover form-inline\">\n            <thead>\n              <tr>\n                <th />\n                <th>Login</th>\n                <th>Email</th>\n                <th>Name</th>\n                <WithFeatureToggle featureToggle={editorsCanAdmin}>\n                  <th>Permission</th>\n                </WithFeatureToggle>\n                {syncEnabled && <th />}\n                <th style={{ width: '1%' }} />\n              </tr>\n            </thead>\n            <tbody>\n              {members &&\n                members.map((member) => (\n                  <TeamMemberRow\n                    key={member.userId}\n                    member={member}\n                    syncEnabled={syncEnabled}\n                    editorsCanAdmin={editorsCanAdmin}\n                    signedInUserIsTeamAdmin={isTeamAdmin}\n                  />\n                ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connector(TeamMembers);\n","import React from 'react';\n\nimport { Permissions } from 'app/core/components/AccessControl';\nimport { contextSrv } from 'app/core/services/context_srv';\n\nimport { AccessControlAction, Team } from '../../types';\n\ntype TeamPermissionsProps = {\n  team: Team;\n};\n\n// TeamPermissions component replaces TeamMembers component when the accesscontrol feature flag is set\nconst TeamPermissions = (props: TeamPermissionsProps) => {\n  const canSetPermissions = contextSrv.hasPermissionInMetadata(\n    AccessControlAction.ActionTeamsPermissionsWrite,\n    props.team\n  );\n\n  return (\n    <Permissions\n      title=\"\"\n      addPermissionTitle=\"Add member\"\n      buttonLabel=\"Add member\"\n      emptyLabel=\"There are no members in this team or you do not have the permissions to list the current members.\"\n      resource=\"teams\"\n      resourceId={props.team.id}\n      canSetPermissions={canSetPermissions}\n    />\n  );\n};\n\nexport default TeamPermissions;\n","import React, { useState } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { Input, Field, Form, Button, FieldSet, VerticalGroup } from '@grafana/ui';\nimport { TeamRolePicker } from 'app/core/components/RolePicker/TeamRolePicker';\nimport { updateTeamRoles } from 'app/core/components/RolePicker/api';\nimport { useRoleOptions } from 'app/core/components/RolePicker/hooks';\nimport { SharedPreferences } from 'app/core/components/SharedPreferences/SharedPreferences';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AccessControlAction, Role, Team } from 'app/types';\n\nimport { updateTeam } from './state/actions';\n\nconst mapDispatchToProps = {\n  updateTeam,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\ninterface OwnProps {\n  team: Team;\n}\nexport type Props = ConnectedProps<typeof connector> & OwnProps;\n\nexport const TeamSettings = ({ team, updateTeam }: Props) => {\n  const canWriteTeamSettings = contextSrv.hasPermissionInMetadata(AccessControlAction.ActionTeamsWrite, team);\n  const currentOrgId = contextSrv.user.orgId;\n\n  const [{ roleOptions }] = useRoleOptions(currentOrgId);\n  const [pendingRoles, setPendingRoles] = useState<Role[]>([]);\n\n  const canUpdateRoles =\n    contextSrv.hasPermission(AccessControlAction.ActionUserRolesAdd) &&\n    contextSrv.hasPermission(AccessControlAction.ActionUserRolesRemove);\n\n  return (\n    <VerticalGroup spacing=\"lg\">\n      <Form\n        defaultValues={{ ...team }}\n        onSubmit={async (formTeam: Team) => {\n          if (contextSrv.licensedAccessControlEnabled() && canUpdateRoles) {\n            await updateTeamRoles(pendingRoles, team.id);\n          }\n          updateTeam(formTeam.name, formTeam.email || '');\n        }}\n        disabled={!canWriteTeamSettings}\n      >\n        {({ register, errors }) => (\n          <FieldSet label=\"Team details\">\n            <Field\n              label=\"Name\"\n              disabled={!canWriteTeamSettings}\n              required\n              invalid={!!errors.name}\n              error=\"Name is required\"\n            >\n              <Input {...register('name', { required: true })} id=\"name-input\" />\n            </Field>\n\n            {contextSrv.licensedAccessControlEnabled() && (\n              <Field label=\"Role\">\n                <TeamRolePicker\n                  teamId={team.id}\n                  roleOptions={roleOptions}\n                  disabled={false}\n                  apply={true}\n                  onApplyRoles={setPendingRoles}\n                  pendingRoles={pendingRoles}\n                  maxWidth=\"100%\"\n                />\n              </Field>\n            )}\n\n            <Field\n              label=\"Email\"\n              description=\"This is optional and is primarily used to set the team profile avatar (via gravatar service).\"\n              disabled={!canWriteTeamSettings}\n            >\n              <Input {...register('email')} placeholder=\"team@email.com\" type=\"email\" id=\"email-input\" />\n            </Field>\n            <Button type=\"submit\" disabled={!canWriteTeamSettings}>\n              Update\n            </Button>\n          </FieldSet>\n        )}\n      </Form>\n      <SharedPreferences resourceUri={`teams/${team.id}`} disabled={!canWriteTeamSettings} preferenceType=\"team\" />\n    </VerticalGroup>\n  );\n};\n\nexport default connector(TeamSettings);\n","import { includes } from 'lodash';\nimport React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { NavModelItem } from '@grafana/data';\nimport { featureEnabled } from '@grafana/runtime';\nimport { Themeable2, withTheme2 } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { UpgradeBox } from 'app/core/components/Upgrade/UpgradeBox';\nimport config from 'app/core/config';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AccessControlAction, StoreState } from 'app/types';\n\nimport TeamGroupSync, { TeamSyncUpgradeContent } from './TeamGroupSync';\nimport TeamMembers from './TeamMembers';\nimport TeamPermissions from './TeamPermissions';\nimport TeamSettings from './TeamSettings';\nimport { loadTeam, loadTeamMembers } from './state/actions';\nimport { getTeamLoadingNav } from './state/navModel';\nimport { getTeam, getTeamMembers, isSignedInUserTeamAdmin } from './state/selectors';\n\ninterface TeamPageRouteParams {\n  id: string;\n  page: string | null;\n}\n\nexport interface OwnProps extends GrafanaRouteComponentProps<TeamPageRouteParams>, Themeable2 {}\n\ninterface State {\n  isSyncEnabled: boolean;\n  isLoading: boolean;\n}\n\nenum PageTypes {\n  Members = 'members',\n  Settings = 'settings',\n  GroupSync = 'groupsync',\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps) {\n  const teamId = parseInt(props.match.params.id, 10);\n  const team = getTeam(state.team, teamId);\n  let defaultPage = 'members';\n  if (contextSrv.accessControlEnabled()) {\n    // With RBAC the settings page will always be available\n    if (!team || !contextSrv.hasPermissionInMetadata(AccessControlAction.ActionTeamsPermissionsRead, team)) {\n      defaultPage = 'settings';\n    }\n  }\n  const pageName = props.match.params.page ?? defaultPage;\n  const teamLoadingNav = getTeamLoadingNav(pageName as string);\n  const pageNav = getNavModel(state.navIndex, `team-${pageName}-${teamId}`, teamLoadingNav).main;\n  const members = getTeamMembers(state.team);\n\n  return {\n    pageNav,\n    teamId: teamId,\n    pageName: pageName,\n    team,\n    members,\n    editorsCanAdmin: config.editorsCanAdmin, // this makes the feature toggle mockable/controllable from tests,\n    signedInUser: contextSrv.user, // this makes the feature toggle mockable/controllable from tests,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadTeam,\n  loadTeamMembers,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport class TeamPages extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      isLoading: false,\n      isSyncEnabled: featureEnabled('teamsync'),\n    };\n  }\n\n  async componentDidMount() {\n    await this.fetchTeam();\n  }\n\n  async fetchTeam() {\n    const { loadTeam, teamId } = this.props;\n    this.setState({ isLoading: true });\n    const team = await loadTeam(teamId);\n    // With accesscontrol, the TeamPermissions will fetch team members\n    if (!contextSrv.accessControlEnabled()) {\n      await this.props.loadTeamMembers();\n    }\n    this.setState({ isLoading: false });\n    return team;\n  }\n\n  getCurrentPage() {\n    const pages = ['members', 'settings', 'groupsync'];\n    const currentPage = this.props.pageName;\n    return includes(pages, currentPage) ? currentPage : pages[0];\n  }\n\n  textsAreEqual = (text1: string, text2: string) => {\n    if (!text1 && !text2) {\n      return true;\n    }\n\n    if (!text1 || !text2) {\n      return false;\n    }\n\n    return text1.toLocaleLowerCase() === text2.toLocaleLowerCase();\n  };\n\n  hideTabsFromNonTeamAdmin = (pageNav: NavModelItem, isSignedInUserTeamAdmin: boolean) => {\n    if (contextSrv.accessControlEnabled()) {\n      return pageNav;\n    }\n\n    if (!isSignedInUserTeamAdmin && pageNav && pageNav.children) {\n      pageNav.children\n        .filter((navItem) => !this.textsAreEqual(navItem.text, PageTypes.Members))\n        .map((navItem) => {\n          navItem.hideFromTabs = true;\n        });\n    }\n\n    return pageNav;\n  };\n\n  renderPage(isSignedInUserTeamAdmin: boolean): React.ReactNode {\n    const { isSyncEnabled } = this.state;\n    const { members, team } = this.props;\n    const currentPage = this.getCurrentPage();\n\n    const canReadTeam = contextSrv.hasAccessInMetadata(\n      AccessControlAction.ActionTeamsRead,\n      team!,\n      isSignedInUserTeamAdmin\n    );\n    const canReadTeamPermissions = contextSrv.hasAccessInMetadata(\n      AccessControlAction.ActionTeamsPermissionsRead,\n      team!,\n      isSignedInUserTeamAdmin\n    );\n    const canWriteTeamPermissions = contextSrv.hasAccessInMetadata(\n      AccessControlAction.ActionTeamsPermissionsWrite,\n      team!,\n      isSignedInUserTeamAdmin\n    );\n\n    switch (currentPage) {\n      case PageTypes.Members:\n        if (contextSrv.accessControlEnabled()) {\n          return <TeamPermissions team={team!} />;\n        } else {\n          return <TeamMembers syncEnabled={isSyncEnabled} members={members} />;\n        }\n      case PageTypes.Settings:\n        return canReadTeam && <TeamSettings team={team!} />;\n      case PageTypes.GroupSync:\n        if (isSyncEnabled) {\n          if (canReadTeamPermissions) {\n            return <TeamGroupSync isReadOnly={!canWriteTeamPermissions} />;\n          }\n        } else if (config.featureToggles.featureHighlights) {\n          return (\n            <>\n              <UpgradeBox featureName={'team sync'} featureId={'team-sync'} />\n              <TeamSyncUpgradeContent />\n            </>\n          );\n        }\n    }\n\n    return null;\n  }\n\n  render() {\n    const { team, pageNav, members, editorsCanAdmin, signedInUser } = this.props;\n    const isTeamAdmin = isSignedInUserTeamAdmin({ members, editorsCanAdmin, signedInUser });\n\n    return (\n      <Page navId=\"teams\" pageNav={this.hideTabsFromNonTeamAdmin(pageNav, isTeamAdmin)}>\n        <Page.Contents isLoading={this.state.isLoading}>\n          {team && Object.keys(team).length !== 0 && this.renderPage(isTeamAdmin)}\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nexport default connector(withTheme2(TeamPages));\n","import { debounce } from 'lodash';\n\nimport { getBackendSrv } from '@grafana/runtime';\nimport { updateNavIndex } from 'app/core/actions';\nimport { contextSrv } from 'app/core/core';\nimport { accessControlQueryParam } from 'app/core/utils/accessControl';\nimport { AccessControlAction, TeamMember, ThunkResult } from 'app/types';\n\nimport { buildNavModel } from './navModel';\nimport { teamGroupsLoaded, queryChanged, pageChanged, teamLoaded, teamMembersLoaded, teamsLoaded } from './reducers';\n\nexport function loadTeams(initial = false): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    const { query, page, perPage } = getState().teams;\n    // Early return if the user cannot list teams\n    if (!contextSrv.hasPermission(AccessControlAction.ActionTeamsRead)) {\n      dispatch(teamsLoaded({ teams: [], totalCount: 0, page: 1, perPage, noTeams: true }));\n      return;\n    }\n\n    const response = await getBackendSrv().get(\n      '/api/teams/search',\n      accessControlQueryParam({ query, page, perpage: perPage })\n    );\n\n    // We only want to check if there is no teams on the initial request.\n    // A query that returns no teams should not render the empty list banner.\n    let noTeams = false;\n    if (initial) {\n      noTeams = response.teams.length === 0;\n    }\n\n    dispatch(teamsLoaded({ noTeams, ...response }));\n  };\n}\n\nconst loadTeamsWithDebounce = debounce((dispatch) => dispatch(loadTeams()), 500);\n\nexport function loadTeam(id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    const response = await getBackendSrv().get(`/api/teams/${id}`, accessControlQueryParam());\n    dispatch(teamLoaded(response));\n    dispatch(updateNavIndex(buildNavModel(response)));\n  };\n}\n\nexport function deleteTeam(id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().delete(`/api/teams/${id}`);\n    // Update users permissions in case they lost teams.read with the deletion\n    await contextSrv.fetchUserPermissions();\n    dispatch(loadTeams());\n  };\n}\n\nexport function changeQuery(query: string): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(queryChanged(query));\n    loadTeamsWithDebounce(dispatch);\n  };\n}\n\nexport function changePage(page: number): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(pageChanged(page));\n    dispatch(loadTeams());\n  };\n}\n\nexport function loadTeamMembers(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    const response = await getBackendSrv().get(`/api/teams/${team.id}/members`);\n    dispatch(teamMembersLoaded(response));\n  };\n}\n\nexport function addTeamMember(id: number): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().post(`/api/teams/${team.id}/members`, { userId: id });\n    dispatch(loadTeamMembers());\n  };\n}\n\nexport function removeTeamMember(id: number): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().delete(`/api/teams/${team.id}/members/${id}`);\n    dispatch(loadTeamMembers());\n  };\n}\n\nexport function updateTeam(name: string, email: string): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().put(`/api/teams/${team.id}`, { name, email });\n    dispatch(loadTeam(team.id));\n  };\n}\n\nexport function loadTeamGroups(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    const response = await getBackendSrv().get(`/api/teams/${team.id}/groups`);\n    dispatch(teamGroupsLoaded(response));\n  };\n}\n\nexport function addTeamGroup(groupId: string): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().post(`/api/teams/${team.id}/groups`, { groupId: groupId });\n    dispatch(loadTeamGroups());\n  };\n}\n\nexport function removeTeamGroup(groupId: string): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    // need to use query parameter due to escaped characters in the request\n    await getBackendSrv().delete(`/api/teams/${team.id}/groups?groupId=${encodeURIComponent(groupId)}`);\n    dispatch(loadTeamGroups());\n  };\n}\n\nexport function updateTeamMember(member: TeamMember): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().put(`/api/teams/${member.teamId}/members/${member.userId}`, {\n      permission: member.permission,\n    });\n    dispatch(loadTeamMembers());\n  };\n}\n","import { NavModelItem, NavModel } from '@grafana/data';\nimport { featureEnabled } from '@grafana/runtime';\nimport { ProBadge } from 'app/core/components/Upgrade/ProBadge';\nimport config from 'app/core/config';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { highlightTrial } from 'app/features/admin/utils';\nimport { AccessControlAction, Team, TeamPermissionLevel } from 'app/types';\n\nconst loadingTeam = {\n  avatarUrl: 'public/img/user_profile.png',\n  id: 1,\n  name: 'Loading',\n  email: 'loading',\n  memberCount: 0,\n  permission: TeamPermissionLevel.Member,\n  accessControl: { isEditor: false },\n  created: '',\n  orgId: 0,\n  updated: '',\n};\n\nexport function buildNavModel(team: Team): NavModelItem {\n  const navModel: NavModelItem = {\n    img: team.avatarUrl,\n    id: 'team-' + team.id,\n    subTitle: 'Manage members and settings',\n    url: '',\n    text: team.name,\n    breadcrumbs: [{ title: 'Teams', url: 'org/teams' }],\n    children: [\n      // With RBAC this tab will always be available (but not always editable)\n      // With Legacy it will be hidden by hideTabsFromNonTeamAdmin should the user not be allowed to see it\n      {\n        active: false,\n        icon: 'sliders-v-alt',\n        id: `team-settings-${team.id}`,\n        text: 'Settings',\n        url: `org/teams/edit/${team.id}/settings`,\n      },\n    ],\n  };\n\n  // While team is loading we leave the members tab\n  // With RBAC the Members tab is available when user has ActionTeamsPermissionsRead for this team\n  // With Legacy it will always be present\n  if (\n    team === loadingTeam ||\n    contextSrv.hasPermissionInMetadata(AccessControlAction.ActionTeamsPermissionsRead, team)\n  ) {\n    navModel.children!.unshift({\n      active: false,\n      icon: 'users-alt',\n      id: `team-members-${team.id}`,\n      text: 'Members',\n      url: `org/teams/edit/${team.id}/members`,\n    });\n  }\n\n  const teamGroupSync: NavModelItem = {\n    active: false,\n    icon: 'sync',\n    id: `team-groupsync-${team.id}`,\n    text: 'External group sync',\n    url: `org/teams/edit/${team.id}/groupsync`,\n  };\n\n  const isLoadingTeam = team === loadingTeam;\n\n  if (highlightTrial()) {\n    teamGroupSync.tabSuffix = () =>\n      ProBadge({ experimentId: isLoadingTeam ? '' : 'feature-highlights-team-sync-badge', eventVariant: 'trial' });\n  }\n\n  // With both Legacy and RBAC the tab is protected being featureEnabled\n  // While team is loading we leave the teamsync tab\n  // With RBAC the External Group Sync tab is available when user has ActionTeamsPermissionsRead for this team\n  if (featureEnabled('teamsync')) {\n    if (isLoadingTeam || contextSrv.hasPermissionInMetadata(AccessControlAction.ActionTeamsPermissionsRead, team)) {\n      navModel.children!.push(teamGroupSync);\n    }\n  } else if (config.featureToggles.featureHighlights) {\n    navModel.children!.push({\n      ...teamGroupSync,\n      tabSuffix: () => ProBadge({ experimentId: isLoadingTeam ? '' : 'feature-highlights-team-sync-badge' }),\n    });\n  }\n\n  return navModel;\n}\n\nexport function getTeamLoadingNav(pageName: string): NavModel {\n  const main = buildNavModel(loadingTeam);\n\n  let node: NavModelItem;\n\n  // find active page\n  for (const child of main.children!) {\n    if (child.id!.indexOf(pageName) > 0) {\n      child.active = true;\n      node = child;\n      break;\n    }\n  }\n\n  return {\n    main: main,\n    node: node!,\n  };\n}\n","import { User } from 'app/core/services/context_srv';\nimport { Team, TeamState, TeamMember, OrgRole, TeamPermissionLevel } from 'app/types';\n\nexport const getSearchMemberQuery = (state: TeamState) => state.searchMemberQuery;\nexport const getTeamGroups = (state: TeamState) => state.groups;\n\nexport const getTeam = (state: TeamState, currentTeamId: any): Team | null => {\n  if (state.team.id === parseInt(currentTeamId, 10)) {\n    return state.team;\n  }\n\n  return null;\n};\n\nexport const getTeamMembers = (state: TeamState) => {\n  const regex = RegExp(state.searchMemberQuery, 'i');\n\n  return state.members.filter((member) => {\n    return regex.test(member.login) || regex.test(member.email) || regex.test(member.name);\n  });\n};\n\nexport interface Config {\n  members: TeamMember[];\n  editorsCanAdmin: boolean;\n  signedInUser: User;\n}\n\nexport const isSignedInUserTeamAdmin = (config: Config): boolean => {\n  const { members, signedInUser, editorsCanAdmin } = config;\n  const userInMembers = members.find((m) => m.userId === signedInUser.id);\n  const permission = userInMembers ? userInMembers.permission : TeamPermissionLevel.Member;\n\n  return isPermissionTeamAdmin({ permission, signedInUser, editorsCanAdmin });\n};\n\nexport interface PermissionConfig {\n  permission: TeamPermissionLevel;\n  editorsCanAdmin: boolean;\n  signedInUser: User;\n}\n\nexport const isPermissionTeamAdmin = (config: PermissionConfig): boolean => {\n  const { permission, signedInUser, editorsCanAdmin } = config;\n  const isAdmin = signedInUser.isGrafanaAdmin || signedInUser.orgRole === OrgRole.Admin;\n  const userIsTeamAdmin = permission === TeamPermissionLevel.Admin;\n  const isSignedInUserTeamAdmin = isAdmin || userIsTeamAdmin;\n\n  return isSignedInUserTeamAdmin || !editorsCanAdmin;\n};\n"],"names":["TeamRolePicker","teamId","roleOptions","disabled","onApplyRoles","pendingRoles","apply","maxWidth","loading","appliedRoles","getTeamRoles","e","onRolesChange","roles","canUpdateRoles","useRoleOptions","organizationId","orgId","setOrgId","value","getLanguageOptions","languageOptions","v","i18nFlag","SharedPreferences","props","homeDashboardUID","theme","timezone","weekStart","language","queryHistory","dashboardUID","prefs","styles","getStyles","languages","currentThemeOption","item","lang","w3cStandardEmailValidator","isTrial","expiry","highlightTrial","UpgradeBox","featureName","className","children","text","featureId","eventVariant","size","htmlProps","getUpgradeBoxStyles","Icon","borderRadius","fontBase","UpgradeContent","listItems","image","featureUrl","description","caption","action","getUpgradeContentStyles","index","Button","getImgUrl","UpgradeContentVertical","getContentVerticalStyles","urlOrId","mapStateToProps","state","mapDispatchToProps","connector","headerTooltip","TeamGroupSync","event","group","isReadOnly","isAdding","newGroupId","groups","Tooltip","SlideDown","CloseButton","InlineFieldRow","InlineField","Input","TeamSyncUpgradeContent","EmptyListCTA","WithFeatureToggle","featureToggle","TeamMemberRow","member","permission","updatedTeamMember","editorsCanAdmin","signedInUserIsTeamAdmin","dp","Select","labels","label","TagBadge","syncEnabled","DeleteButton","config","TeamMembers","user","searchMemberQuery","members","signedInUser","isTeamAdmin","FilterInput","Label","UserPicker","canSetPermissions","team","updateTeam","canWriteTeamSettings","currentOrgId","setPendingRoles","Form","formTeam","register","errors","FieldSet","Field","PageTypes","defaultPage","pageName","teamLoadingNav","pageNav","TeamPages","text1","text2","isSignedInUserTeamAdmin","navItem","loadTeam","pages","currentPage","isSyncEnabled","canReadTeam","canReadTeamPermissions","canWriteTeamPermissions","Page","loadTeams","initial","dispatch","getState","query","page","perPage","response","noTeams","loadTeamsWithDebounce","id","deleteTeam","changeQuery","changePage","loadTeamMembers","getStore","addTeamMember","removeTeamMember","name","email","loadTeamGroups","addTeamGroup","groupId","removeTeamGroup","updateTeamMember","loadingTeam","buildNavModel","navModel","teamGroupSync","isLoadingTeam","getTeamLoadingNav","main","node","child","getSearchMemberQuery","getTeamGroups","getTeam","currentTeamId","getTeamMembers","regex","userInMembers","m","isPermissionTeamAdmin","isAdmin","userIsTeamAdmin"],"sourceRoot":""}