{"version":3,"file":"2120.617214410a5cc92bef54.js","mappings":"gPAaO,MAAMA,EAAmB,CAAC,CAAE,aAAAC,EAAc,iBAAAC,CAAiB,IAAa,CAC7E,KAAM,CAACC,EAAeC,CAAW,KAAI,MAAuB,KAAmB,kBAAkB,EAE3FC,EAAW,CAACF,GAAiB,CAACC,EAEpC,OAAIF,IAAqB,QAChB,OAACI,EAAA,EAAmB,CAAC,aAAAL,EAA4B,SAAAI,EAAoB,SAAQ,GAAC,KAGnF,OAACE,EAAA,GACC,uBAAwBL,EACxB,aAAAD,EACA,SAAAI,EACA,SAAQ,GACV,CAGN,ECcA,EAjCyB,CAAC,CAAE,MAAAG,CAAM,IAAa,CAC7C,KAAM,CAAE,qBAAAC,CAAqB,KAAI,MAAgB,EAE3CC,EAAmB,mBAAmBF,GAAO,OAAO,IAAK,EACzD,CACJ,UAAAG,EACA,MAAAC,EACA,KAAMX,CACR,KAAI,MAAmB,CAAE,KAAMS,EAAkB,aAAcD,CAAsB,CAAC,EAEtF,OAAIE,KACK,OAACE,EAAA,EAAkB,CAAC,KAAK,YAAa,GAG3CD,KAEA,OAACE,EAAA,EAAK,CAAC,SAAS,QAAQ,MAAM,gCAC3B,kBAAmBF,CAAK,EAC3B,EAICX,KAQE,OAACD,EAAgB,CAAC,iBAAkBS,EAAuB,aAAAR,CAAA,CAA4B,KAN1F,OAACa,EAAA,EAAK,CAAC,SAAS,QAAQ,MAAM,qBAC3B,6DACH,CAKN,C","sources":["webpack://grafana/./public/app/features/alerting/unified/components/receivers/EditReceiverView.tsx","webpack://grafana/./public/app/features/alerting/unified/components/contact-points/EditContactPoint.tsx"],"sourcesContent":["import { GrafanaManagedContactPoint, Receiver } from 'app/plugins/datasource/alertmanager/types';\n\nimport { AlertmanagerAction, useAlertmanagerAbility } from '../../hooks/useAbilities';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\n\nimport { CloudReceiverForm } from './form/CloudReceiverForm';\nimport { GrafanaReceiverForm } from './form/GrafanaReceiverForm';\n\ninterface Props {\n  alertmanagerName: string;\n  contactPoint: GrafanaManagedContactPoint | Receiver;\n}\n\nexport const EditReceiverView = ({ contactPoint, alertmanagerName }: Props) => {\n  const [editSupported, editAllowed] = useAlertmanagerAbility(AlertmanagerAction.UpdateContactPoint);\n\n  const readOnly = !editSupported || !editAllowed;\n\n  if (alertmanagerName === GRAFANA_RULES_SOURCE_NAME) {\n    return <GrafanaReceiverForm contactPoint={contactPoint} readOnly={readOnly} editMode />;\n  } else {\n    return (\n      <CloudReceiverForm\n        alertManagerSourceName={alertmanagerName}\n        contactPoint={contactPoint}\n        readOnly={readOnly}\n        editMode\n      />\n    );\n  }\n};\n","import { RouteChildrenProps } from 'react-router-dom';\n\nimport { Alert, LoadingPlaceholder } from '@grafana/ui';\nimport { useGetContactPoint } from 'app/features/alerting/unified/components/contact-points/useContactPoints';\nimport { stringifyErrorLike } from 'app/features/alerting/unified/utils/misc';\n\nimport { useAlertmanager } from '../../state/AlertmanagerContext';\nimport { EditReceiverView } from '../receivers/EditReceiverView';\n\ntype Props = RouteChildrenProps<{ name: string }>;\n\nconst EditContactPoint = ({ match }: Props) => {\n  const { selectedAlertmanager } = useAlertmanager();\n\n  const contactPointName = decodeURIComponent(match?.params.name!);\n  const {\n    isLoading,\n    error,\n    data: contactPoint,\n  } = useGetContactPoint({ name: contactPointName, alertmanager: selectedAlertmanager! });\n\n  if (isLoading) {\n    return <LoadingPlaceholder text=\"Loading...\" />;\n  }\n\n  if (error) {\n    return (\n      <Alert severity=\"error\" title=\"Failed to fetch contact point\">\n        {stringifyErrorLike(error)}\n      </Alert>\n    );\n  }\n\n  if (!contactPoint) {\n    return (\n      <Alert severity=\"error\" title=\"Receiver not found\">\n        {'Sorry, this contact point does not seem to exist.'}\n      </Alert>\n    );\n  }\n\n  return <EditReceiverView alertmanagerName={selectedAlertmanager!} contactPoint={contactPoint} />;\n};\n\nexport default EditContactPoint;\n"],"names":["EditReceiverView","contactPoint","alertmanagerName","editSupported","editAllowed","readOnly","GrafanaReceiverForm","CloudReceiverForm","match","selectedAlertmanager","contactPointName","isLoading","error","LoadingPlaceholder","Alert"],"sourceRoot":""}