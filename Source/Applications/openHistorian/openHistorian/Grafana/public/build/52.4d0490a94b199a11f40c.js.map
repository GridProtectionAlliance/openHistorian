{"version":3,"sources":["webpack:///./public/app/core/components/PasswordInput/PasswordInput.tsx","webpack:///./public/app/features/profile/ChangePasswordForm.tsx","webpack:///./public/app/features/profile/ChangePasswordPage.tsx"],"names":["PasswordInput","Object","react","props","ref","react_default","a","createElement","Fragment","src","className","label","type","onChange","event","target","value","ChangePasswordForm_ChangePasswordForm","_super","ChangePasswordForm","_this","apply","this","arguments","state","oldPassword","newPassword","confirmNew","onOldPasswordChange","setState","onNewPasswordChange","onConfirmPasswordChange","onSubmitChangePassword","preventDefault","onChangePassword","tslib_es6","prototype","render","_a","isSaving","ldapEnabled","config","authProxyEnabled","name","variant","onClick","disabled","href","appSubUrl","ChangePasswordPage","tslib__WEBPACK_IMPORTED_MODULE_0__","navModel","react__WEBPACK_IMPORTED_MODULE_1___default","app_core_components_Page_Page__WEBPACK_IMPORTED_MODULE_6__","app_core_utils_UserProvider__WEBPACK_IMPORTED_MODULE_5__","states","changePassword","Contents","_ChangePasswordForm__WEBPACK_IMPORTED_MODULE_7__","react__WEBPACK_IMPORTED_MODULE_1__","__webpack_exports__","react_hot_loader__WEBPACK_IMPORTED_MODULE_2__","module","react_redux__WEBPACK_IMPORTED_MODULE_3__","app_core_selectors_navModel__WEBPACK_IMPORTED_MODULE_4__","navIndex"],"mappings":"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","file":"52.4d0490a94b199a11f40c.js","sourcesContent":["import React, { ChangeEvent, forwardRef } from 'react';\nimport { Input, FormLabel } from '@grafana/ui';\n\nexport interface Props {\n  label: string;\n  value: string | undefined;\n  onChange: (value: string) => void;\n}\n\nexport const PasswordInput = forwardRef<HTMLInputElement, Props>((props, ref) => (\n  <>\n    <FormLabel className=\"width-8\">{props.label}</FormLabel>\n    <Input\n      className=\"gf-form-input max-width-22\"\n      type=\"password\"\n      onChange={(event: ChangeEvent<HTMLInputElement>) => props.onChange(event.target.value)}\n      value={props.value}\n    />\n  </>\n));\n","import React, { PureComponent, MouseEvent } from 'react';\nimport config from 'app/core/config';\nimport { Button, LinkButton } from '@grafana/ui';\nimport { ChangePasswordFields } from 'app/core/utils/UserProvider';\nimport { PasswordInput } from 'app/core/components/PasswordInput/PasswordInput';\n\nexport interface Props {\n  isSaving: boolean;\n  onChangePassword: (payload: ChangePasswordFields) => void;\n}\n\nexport interface State {\n  oldPassword: string;\n  newPassword: string;\n  confirmNew: string;\n}\n\nexport class ChangePasswordForm extends PureComponent<Props, State> {\n  state: State = {\n    oldPassword: '',\n    newPassword: '',\n    confirmNew: '',\n  };\n\n  onOldPasswordChange = (oldPassword: string) => {\n    this.setState({ oldPassword });\n  };\n\n  onNewPasswordChange = (newPassword: string) => {\n    this.setState({ newPassword });\n  };\n\n  onConfirmPasswordChange = (confirmNew: string) => {\n    this.setState({ confirmNew });\n  };\n\n  onSubmitChangePassword = (event: MouseEvent<HTMLInputElement>) => {\n    event.preventDefault();\n    this.props.onChangePassword({ ...this.state });\n  };\n\n  render() {\n    const { oldPassword, newPassword, confirmNew } = this.state;\n    const { isSaving } = this.props;\n    const { ldapEnabled, authProxyEnabled } = config;\n\n    if (ldapEnabled || authProxyEnabled) {\n      return <p>You cannot change password when ldap or auth proxy authentication is enabled.</p>;\n    }\n\n    return (\n      <form name=\"userForm\" className=\"gf-form-group\">\n        <div className=\"gf-form max-width-30\">\n          <PasswordInput label=\"Old Password\" onChange={this.onOldPasswordChange} value={oldPassword} />\n        </div>\n        <div className=\"gf-form max-width-30\">\n          <PasswordInput label=\"New Password\" onChange={this.onNewPasswordChange} value={newPassword} />\n        </div>\n        <div className=\"gf-form max-width-30\">\n          <PasswordInput label=\"Confirm Password\" onChange={this.onConfirmPasswordChange} value={confirmNew} />\n        </div>\n        <div className=\"gf-form-button-row\">\n          <Button variant=\"primary\" onClick={this.onSubmitChangePassword} disabled={isSaving}>\n            Change Password\n          </Button>\n          <LinkButton variant=\"transparent\" href={`${config.appSubUrl}/profile`}>\n            Cancel\n          </LinkButton>\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default ChangePasswordForm;\n","import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport { StoreState } from 'app/types';\nimport { NavModel } from '@grafana/data';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { UserProvider } from 'app/core/utils/UserProvider';\nimport Page from 'app/core/components/Page/Page';\nimport { ChangePasswordForm } from './ChangePasswordForm';\n\nexport interface Props {\n  navModel: NavModel;\n}\n\nexport class ChangePasswordPage extends PureComponent<Props> {\n  render() {\n    const { navModel } = this.props;\n    return (\n      <Page navModel={navModel}>\n        <UserProvider>\n          {({ changePassword }, states) => (\n            <Page.Contents>\n              <h3 className=\"page-sub-heading\">Change Your Password</h3>\n              <ChangePasswordForm onChangePassword={changePassword} isSaving={states.changePassword} />\n            </Page.Contents>\n          )}\n        </UserProvider>\n      </Page>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, `change-password`),\n  };\n}\n\nconst mapDispatchToProps = {};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(ChangePasswordPage));\n"],"sourceRoot":""}