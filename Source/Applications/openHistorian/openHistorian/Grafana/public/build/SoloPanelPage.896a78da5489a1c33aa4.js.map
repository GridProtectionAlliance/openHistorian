{"version":3,"file":"SoloPanelPage.896a78da5489a1c33aa4.js","mappings":"2OAkBA,MAAMA,EAAmBC,IAAuB,CAC9C,UAAWA,EAAM,UAAU,SAAS,CACtC,GAEMC,EAAqB,CACzB,cAAa,IACf,EAEMC,KAAY,WAAQH,EAAiBE,CAAkB,EAUtD,MAAME,UAAsB,WAAwB,CAApD,kCAIL,WAAe,CACb,MAAO,KACP,SAAU,EACZ,EAEA,mBAAoB,CAClB,KAAM,CAAE,MAAAC,EAAO,MAAAC,CAAM,EAAI,KAAK,MAE9B,KAAK,MAAM,cAAc,CACvB,QAASD,EAAM,OAAO,KACtB,OAAQA,EAAM,OAAO,IACrB,QAASA,EAAM,OAAO,KACtB,UAAWC,EAAM,UACjB,OAAQ,GACR,cAAe,KAAK,QAAQ,WAC9B,CAAC,CACH,CAEA,YAAqB,CACnB,OAAO,SAAS,KAAK,MAAM,YAAY,SAAW,IAAK,EAAE,CAC3D,CAEA,mBAAmBC,EAAkB,CACnC,KAAM,CAAE,UAAAC,CAAU,EAAI,KAAK,MAE3B,GAAKA,IAKD,CAACD,EAAU,WAAaA,EAAU,UAAU,MAAQC,EAAU,KAAK,CACrE,MAAMC,EAAQD,EAAU,gBAAgB,KAAK,MAAM,YAAY,OAAO,EAEtE,GAAI,CAACC,EAAO,CACV,KAAK,SAAS,CAAE,SAAU,EAAK,CAAC,EAChC,MACF,CAEA,KAAK,SAAS,CAAE,MAAAA,CAAM,CAAC,CACzB,CACF,CAEA,QAAS,CACP,OACE,gBAACC,EAAA,CACC,UAAW,KAAK,MAAM,UACtB,SAAU,KAAK,MAAM,SACrB,MAAO,KAAK,MAAM,MAClB,QAAS,KAAK,WAAW,EACzB,SAAU,KAAK,MAAM,YAAY,SACnC,CAEJ,CACF,CAzDaN,EAEJ,YAAc,IA+DhB,MAAMM,EAAY,CAAC,CAAE,UAAAF,EAAW,SAAAG,EAAU,MAAAF,EAAO,QAAAG,EAAS,SAAAC,CAAS,IACpEF,EACK,gBAAC,OAAI,UAAU,qBAAoB,iBAAeC,EAAQ,YAAU,EAGzE,CAACH,GAAS,CAACD,EACN,gBAAC,WAAI,kCAAgC,EAI5C,gBAAC,OAAI,UAAU,cACb,gBAAC,IAAS,KACP,CAAC,CAAE,MAAAM,EAAO,OAAAC,CAAO,IACZD,IAAU,EACL,KAGP,gBAAC,KACC,SAAUL,EAAM,IAChB,MAAAK,EACA,OAAAC,EACA,UAAAP,EACA,MAAAC,EACA,UAAW,GACX,UAAW,GACX,KAAM,GACN,SAAAI,EACA,SAAU,GACZ,CAGN,CACF,EAIJ,EAAeV,EAAUC,CAAa,C","sources":["webpack://grafana/./public/app/features/dashboard/containers/SoloPanelPage.tsx"],"sourcesContent":["import React, { Component } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaContext, GrafanaContextType } from 'app/core/context/GrafanaContext';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { DashboardModel, PanelModel } from 'app/features/dashboard/state';\nimport { StoreState } from 'app/types';\n\nimport { DashboardPanel } from '../dashgrid/DashboardPanel';\nimport { initDashboard } from '../state/initDashboard';\n\nexport interface DashboardPageRouteParams {\n  uid?: string;\n  type?: string;\n  slug?: string;\n}\n\nconst mapStateToProps = (state: StoreState) => ({\n  dashboard: state.dashboard.getModel(),\n});\n\nconst mapDispatchToProps = {\n  initDashboard,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = GrafanaRouteComponentProps<DashboardPageRouteParams, { panelId: string; timezone?: string }> &\n  ConnectedProps<typeof connector>;\n\nexport interface State {\n  panel: PanelModel | null;\n  notFound: boolean;\n}\n\nexport class SoloPanelPage extends Component<Props, State> {\n  declare context: GrafanaContextType;\n  static contextType = GrafanaContext;\n\n  state: State = {\n    panel: null,\n    notFound: false,\n  };\n\n  componentDidMount() {\n    const { match, route } = this.props;\n\n    this.props.initDashboard({\n      urlSlug: match.params.slug,\n      urlUid: match.params.uid,\n      urlType: match.params.type,\n      routeName: route.routeName,\n      fixUrl: false,\n      keybindingSrv: this.context.keybindings,\n    });\n  }\n\n  getPanelId(): number {\n    return parseInt(this.props.queryParams.panelId ?? '0', 10);\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { dashboard } = this.props;\n\n    if (!dashboard) {\n      return;\n    }\n\n    // we just got a new dashboard\n    if (!prevProps.dashboard || prevProps.dashboard.uid !== dashboard.uid) {\n      const panel = dashboard.getPanelByUrlId(this.props.queryParams.panelId);\n\n      if (!panel) {\n        this.setState({ notFound: true });\n        return;\n      }\n\n      this.setState({ panel });\n    }\n  }\n\n  render() {\n    return (\n      <SoloPanel\n        dashboard={this.props.dashboard}\n        notFound={this.state.notFound}\n        panel={this.state.panel}\n        panelId={this.getPanelId()}\n        timezone={this.props.queryParams.timezone}\n      />\n    );\n  }\n}\n\nexport interface SoloPanelProps extends State {\n  dashboard: DashboardModel | null;\n  panelId: number;\n  timezone?: string;\n}\n\nexport const SoloPanel = ({ dashboard, notFound, panel, panelId, timezone }: SoloPanelProps) => {\n  if (notFound) {\n    return <div className=\"alert alert-error\">Panel with id {panelId} not found</div>;\n  }\n\n  if (!panel || !dashboard) {\n    return <div>Loading & initializing dashboard</div>;\n  }\n\n  return (\n    <div className=\"panel-solo\">\n      <AutoSizer>\n        {({ width, height }) => {\n          if (width === 0) {\n            return null;\n          }\n          return (\n            <DashboardPanel\n              stateKey={panel.key}\n              width={width}\n              height={height}\n              dashboard={dashboard}\n              panel={panel}\n              isEditing={false}\n              isViewing={true}\n              lazy={false}\n              timezone={timezone}\n              hideMenu={true}\n            />\n          );\n        }}\n      </AutoSizer>\n    </div>\n  );\n};\n\nexport default connector(SoloPanelPage);\n"],"names":["mapStateToProps","state","mapDispatchToProps","connector","SoloPanelPage","match","route","prevProps","dashboard","panel","SoloPanel","notFound","panelId","timezone","width","height"],"sourceRoot":""}