{"version":3,"file":"grafanaPlugin.2a2ace556af5978d6149.js","mappings":"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","sources":["webpack://grafana/./public/app/plugins/datasource/grafana/components/SearchEditor.tsx","webpack://grafana/./public/app/plugins/datasource/grafana/components/QueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/grafana/module.ts"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport { InlineField, Input, InlineFieldRow, CodeEditor } from '@grafana/ui';\nimport { SearchQuery } from 'app/features/search/service';\n\ninterface Props {\n  value: SearchQuery;\n  onChange: (value: SearchQuery) => void;\n}\n\nexport default function SearchEditor({ value, onChange }: Props) {\n  const [json, setJSON] = useState('');\n  const [query, setQuery] = useState(value.query ?? '');\n\n  useEffect(() => {\n    const emptySearchQuery: SearchQuery = {\n      query: '*',\n      location: '', // general, etc\n      ds_uid: '',\n      sort: '',\n      tags: [],\n      kind: [],\n      explain: false,\n      facet: [{ field: 'kind' }, { field: 'tags' }],\n      from: 0,\n      limit: 20,\n    };\n\n    setJSON(JSON.stringify({ ...emptySearchQuery, ...value }, null, 2));\n  }, [value]);\n\n  const handleSearchBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n    if (query !== value.query) {\n      onChange({ ...value, query });\n    }\n  };\n\n  const handleSearchEnterKey = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key !== 'Enter') {\n      return;\n    }\n    handleSearchBlur(e as any);\n  };\n\n  const onSaveSearchJSON = (rawSearchJSON: string) => {\n    try {\n      const searchQuery = JSON.parse(rawSearchJSON) as SearchQuery;\n      onChange(searchQuery);\n      setQuery(searchQuery.query ?? '');\n    } catch (ex) {\n      console.log('UNABLE TO parse search', rawSearchJSON, ex);\n    }\n  };\n\n  return (\n    <>\n      <InlineFieldRow>\n        <InlineField label=\"Query\" grow={true} labelWidth={12}>\n          <Input\n            placeholder=\"Everything\"\n            value={query}\n            onChange={(e) => setQuery(e.currentTarget.value)}\n            onKeyDown={handleSearchEnterKey}\n            onBlur={handleSearchBlur}\n            spellCheck={false}\n          />\n        </InlineField>\n      </InlineFieldRow>\n      <CodeEditor\n        height={300}\n        language=\"json\"\n        value={json}\n        onBlur={onSaveSearchJSON}\n        onSave={onSaveSearchJSON}\n        showMiniMap={false}\n        showLineNumbers={true}\n      />\n    </>\n  );\n}\n","import { css } from '@emotion/css';\nimport pluralize from 'pluralize';\nimport React, { PureComponent } from 'react';\nimport { DropEvent, FileRejection } from 'react-dropzone';\n\nimport {\n  QueryEditorProps,\n  SelectableValue,\n  dataFrameFromJSON,\n  rangeUtil,\n  DataQueryRequest,\n  DataFrame,\n  DataFrameJSON,\n  dataFrameToJSON,\n  GrafanaTheme2,\n  getValueFormat,\n  formattedValueToString,\n} from '@grafana/data';\nimport { config, getBackendSrv, getDataSourceSrv } from '@grafana/runtime';\nimport {\n  InlineField,\n  Select,\n  Alert,\n  Input,\n  InlineFieldRow,\n  InlineLabel,\n  FileDropzone,\n  FileDropzoneDefaultChildren,\n  DropzoneFile,\n  Themeable2,\n  withTheme2,\n} from '@grafana/ui';\nimport { hasAlphaPanels } from 'app/core/config';\nimport * as DFImport from 'app/features/dataframe-import';\nimport { SearchQuery } from 'app/features/search/service';\n\nimport { GrafanaDatasource } from '../datasource';\nimport { defaultQuery, GrafanaQuery, GrafanaQueryType } from '../types';\n\nimport SearchEditor from './SearchEditor';\n\ninterface Props extends QueryEditorProps<GrafanaDatasource, GrafanaQuery>, Themeable2 {}\n\nconst labelWidth = 12;\n\ninterface State {\n  channels: Array<SelectableValue<string>>;\n  channelFields: Record<string, Array<SelectableValue<string>>>;\n  folders?: Array<SelectableValue<string>>;\n}\n\nexport class UnthemedQueryEditor extends PureComponent<Props, State> {\n  state: State = { channels: [], channelFields: {} };\n\n  queryTypes: Array<SelectableValue<GrafanaQueryType>> = [\n    {\n      label: 'Random Walk',\n      value: GrafanaQueryType.RandomWalk,\n      description: 'Random signal within the selected time range',\n    },\n    {\n      label: 'Live Measurements',\n      value: GrafanaQueryType.LiveMeasurements,\n      description: 'Stream real-time measurements from Grafana',\n    },\n    {\n      label: 'List public files',\n      value: GrafanaQueryType.List,\n      description: 'Show directory listings for public resources',\n    },\n  ];\n\n  constructor(props: Props) {\n    super(props);\n\n    if (config.featureToggles.panelTitleSearch && hasAlphaPanels) {\n      this.queryTypes.push({\n        label: 'Search',\n        value: GrafanaQueryType.Search,\n        description: 'Search for grafana resources',\n      });\n    }\n    if (config.featureToggles.editPanelCSVDragAndDrop) {\n      this.queryTypes.push({\n        label: 'Spreadsheet or snapshot',\n        value: GrafanaQueryType.Snapshot,\n        description: 'Query an uploaded spreadsheet or a snapshot',\n      });\n    }\n  }\n\n  loadChannelInfo() {\n    getBackendSrv()\n      .fetch({ url: 'api/live/list' })\n      .subscribe({\n        next: (v: any) => {\n          const channelInfo = v.data?.channels as any[];\n          if (channelInfo?.length) {\n            const channelFields: Record<string, Array<SelectableValue<string>>> = {};\n            const channels: Array<SelectableValue<string>> = channelInfo.map((c) => {\n              if (c.data) {\n                const distinctFields = new Set<string>();\n                const frame = dataFrameFromJSON(c.data);\n                for (const f of frame.fields) {\n                  distinctFields.add(f.name);\n                }\n                channelFields[c.channel] = Array.from(distinctFields).map((n) => ({\n                  value: n,\n                  label: n,\n                }));\n              }\n              return {\n                value: c.channel,\n                label: c.channel + ' [' + c.minute_rate + ' msg/min]',\n              };\n            });\n\n            this.setState({ channelFields, channels });\n          }\n        },\n      });\n  }\n\n  loadFolderInfo() {\n    const query: DataQueryRequest<GrafanaQuery> = {\n      targets: [{ queryType: GrafanaQueryType.List, refId: 'A' }],\n    } as any;\n\n    getDataSourceSrv()\n      .get('-- Grafana --')\n      .then((ds) => {\n        const gds = ds as GrafanaDatasource;\n        gds.query(query).subscribe({\n          next: (rsp) => {\n            if (rsp.data.length) {\n              const names = (rsp.data[0] as DataFrame).fields[0];\n              const folders = names.values.toArray().map((v) => ({\n                value: v,\n                label: v,\n              }));\n              this.setState({ folders });\n            }\n          },\n        });\n      });\n  }\n\n  componentDidMount() {\n    this.loadChannelInfo();\n  }\n\n  onQueryTypeChange = (sel: SelectableValue<GrafanaQueryType>) => {\n    const { onChange, query, onRunQuery } = this.props;\n    onChange({ ...query, queryType: sel.value! });\n    onRunQuery();\n\n    // Reload the channel list\n    this.loadChannelInfo();\n  };\n\n  onChannelChange = (sel: SelectableValue<string>) => {\n    const { onChange, query, onRunQuery } = this.props;\n    onChange({ ...query, channel: sel?.value });\n    onRunQuery();\n  };\n\n  onFieldNamesChange = (item: SelectableValue<string>) => {\n    const { onChange, query, onRunQuery } = this.props;\n    let fields: string[] = [];\n    if (Array.isArray(item)) {\n      fields = item.map((v) => v.value);\n    } else if (item.value) {\n      fields = [item.value];\n    }\n\n    // When adding the first field, also add time (if it exists)\n    if (fields.length === 1 && !query.filter?.fields?.length && query.channel) {\n      const names = this.state.channelFields[query.channel] ?? [];\n      const tf = names.find((f) => f.value === 'time' || f.value === 'Time');\n      if (tf && tf.value && tf.value !== fields[0]) {\n        fields = [tf.value, ...fields];\n      }\n    }\n\n    onChange({\n      ...query,\n      filter: {\n        ...query.filter,\n        fields,\n      },\n    });\n    onRunQuery();\n  };\n\n  checkAndUpdateValue = (key: keyof GrafanaQuery, txt: string) => {\n    const { onChange, query, onRunQuery } = this.props;\n    if (key === 'buffer') {\n      let buffer: number | undefined;\n      if (txt) {\n        try {\n          buffer = rangeUtil.intervalToSeconds(txt) * 1000;\n        } catch (err) {\n          console.warn('ERROR', err);\n        }\n      }\n      onChange({\n        ...query,\n        buffer,\n      });\n    } else {\n      onChange({\n        ...query,\n        [key]: txt,\n      });\n    }\n    onRunQuery();\n  };\n\n  handleEnterKey = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key !== 'Enter') {\n      return;\n    }\n    this.checkAndUpdateValue('buffer', (e.target as any).value);\n  };\n\n  handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n    this.checkAndUpdateValue('buffer', e.target.value);\n  };\n\n  renderMeasurementsQuery() {\n    let { channel, filter, buffer } = this.props.query;\n    let { channels, channelFields } = this.state;\n    let currentChannel = channels.find((c) => c.value === channel);\n    if (channel && !currentChannel) {\n      currentChannel = {\n        value: channel,\n        label: channel,\n        description: `Connected to ${channel}`,\n      };\n      channels = [currentChannel, ...channels];\n    }\n\n    const distinctFields = new Set<string>();\n    const fields: Array<SelectableValue<string>> = channel ? channelFields[channel] ?? [] : [];\n    // if (data && data.series?.length) {\n    //   for (const frame of data.series) {\n    //     for (const field of frame.fields) {\n    //       if (distinctFields.has(field.name) || !field.name) {\n    //         continue;\n    //       }\n    //       fields.push({\n    //         value: field.name,\n    //         label: field.name,\n    //         description: `(${getFrameDisplayName(frame)} / ${field.type})`,\n    //       });\n    //       distinctFields.add(field.name);\n    //     }\n    //   }\n    // }\n    if (filter?.fields) {\n      for (const f of filter.fields) {\n        if (!distinctFields.has(f)) {\n          fields.push({\n            value: f,\n            label: `${f} (not loaded)`,\n            description: `Configured, but not found in the query results`,\n          });\n          distinctFields.add(f);\n        }\n      }\n    }\n\n    let formattedTime = '';\n    if (buffer) {\n      formattedTime = rangeUtil.secondsToHms(buffer / 1000);\n    }\n\n    return (\n      <>\n        <div className=\"gf-form\">\n          <InlineField label=\"Channel\" grow={true} labelWidth={labelWidth}>\n            <Select\n              options={channels}\n              value={currentChannel || ''}\n              onChange={this.onChannelChange}\n              allowCustomValue={true}\n              backspaceRemovesValue={true}\n              placeholder=\"Select measurements channel\"\n              isClearable={true}\n              noOptionsMessage=\"Enter channel name\"\n              formatCreateLabel={(input: string) => `Connect to: ${input}`}\n            />\n          </InlineField>\n        </div>\n        {channel && (\n          <div className=\"gf-form\">\n            <InlineField label=\"Fields\" grow={true} labelWidth={labelWidth}>\n              <Select\n                options={fields}\n                value={filter?.fields || []}\n                onChange={this.onFieldNamesChange}\n                allowCustomValue={true}\n                backspaceRemovesValue={true}\n                placeholder=\"All fields\"\n                isClearable={true}\n                noOptionsMessage=\"Unable to list all fields\"\n                formatCreateLabel={(input: string) => `Field: ${input}`}\n                isSearchable={true}\n                isMulti={true}\n              />\n            </InlineField>\n            <InlineField label=\"Buffer\">\n              <Input\n                placeholder=\"Auto\"\n                width={12}\n                defaultValue={formattedTime}\n                onKeyDown={this.handleEnterKey}\n                onBlur={this.handleBlur}\n                spellCheck={false}\n              />\n            </InlineField>\n          </div>\n        )}\n\n        <Alert title=\"Grafana Live - Measurements\" severity=\"info\">\n          This supports real-time event streams in Grafana core. This feature is under heavy development. Expect the\n          interfaces and structures to change as this becomes more production ready.\n        </Alert>\n      </>\n    );\n  }\n\n  onFolderChanged = (sel: SelectableValue<string>) => {\n    const { onChange, query, onRunQuery } = this.props;\n    onChange({ ...query, path: sel?.value });\n    onRunQuery();\n  };\n\n  renderListPublicFiles() {\n    let { path } = this.props.query;\n    let { folders } = this.state;\n    if (!folders) {\n      folders = [];\n      this.loadFolderInfo();\n    }\n    const currentFolder = folders.find((f) => f.value === path);\n    if (path && !currentFolder) {\n      folders = [\n        ...folders,\n        {\n          value: path,\n          label: path,\n        },\n      ];\n    }\n\n    return (\n      <InlineFieldRow>\n        <InlineField label=\"Path\" grow={true} labelWidth={labelWidth}>\n          <Select\n            options={folders}\n            value={currentFolder || ''}\n            onChange={this.onFolderChanged}\n            allowCustomValue={true}\n            backspaceRemovesValue={true}\n            placeholder=\"Select folder\"\n            isClearable={true}\n            formatCreateLabel={(input: string) => `Folder: ${input}`}\n          />\n        </InlineField>\n      </InlineFieldRow>\n    );\n  }\n\n  // Skip rendering the file list as we're handling that in this component instead.\n  fileListRenderer = (file: DropzoneFile, removeFile: (file: DropzoneFile) => void) => {\n    return null;\n  };\n\n  onFileDrop = (acceptedFiles: File[], fileRejections: FileRejection[], event: DropEvent) => {\n    DFImport.filesToDataframes(acceptedFiles).subscribe((next) => {\n      const snapshot: DataFrameJSON[] = [];\n      next.dataFrames.forEach((df) => {\n        const dataframeJson = dataFrameToJSON(df);\n        snapshot.push(dataframeJson);\n      });\n      this.props.onChange({\n        ...this.props.query,\n        file: { name: next.file.name, size: next.file.size },\n        queryType: GrafanaQueryType.Snapshot,\n        snapshot,\n      });\n      this.props.onRunQuery();\n    });\n  };\n\n  renderSnapshotQuery() {\n    const { query, theme } = this.props;\n    const file = query.file;\n    const styles = getStyles(theme);\n    const fileSize = getValueFormat('decbytes')(file ? file.size : 0);\n\n    return (\n      <>\n        <InlineFieldRow>\n          <InlineField label=\"Snapshot\" grow={true} labelWidth={labelWidth}>\n            <InlineLabel>{pluralize('frame', query.snapshot?.length ?? 0, true)}</InlineLabel>\n          </InlineField>\n        </InlineFieldRow>\n        {config.featureToggles.editPanelCSVDragAndDrop && (\n          <>\n            <FileDropzone\n              readAs=\"readAsArrayBuffer\"\n              fileListRenderer={this.fileListRenderer}\n              options={{\n                onDrop: this.onFileDrop,\n                maxSize: DFImport.maxFileSize,\n                multiple: false,\n                accept: DFImport.acceptedFiles,\n              }}\n            >\n              <FileDropzoneDefaultChildren primaryText={this.props?.query?.file ? 'Replace file' : 'Upload file'} />\n            </FileDropzone>\n            {file && (\n              <div className={styles.file}>\n                <span>{file?.name}</span>\n                <span>\n                  <span>{formattedValueToString(fileSize)}</span>\n                </span>\n              </div>\n            )}\n          </>\n        )}\n      </>\n    );\n  }\n\n  onSearchChange = (search: SearchQuery) => {\n    const { query, onChange, onRunQuery } = this.props;\n\n    onChange({\n      ...query,\n      search,\n    });\n    onRunQuery();\n  };\n\n  render() {\n    const query = {\n      ...defaultQuery,\n      ...this.props.query,\n    };\n\n    const { queryType } = query;\n\n    // Only show \"snapshot\" when it already exists\n    let queryTypes = this.queryTypes;\n    if (queryType === GrafanaQueryType.Snapshot && !config.featureToggles.editPanelCSVDragAndDrop) {\n      queryTypes = [\n        ...this.queryTypes,\n        {\n          label: 'Snapshot',\n          value: queryType,\n        },\n      ];\n    }\n\n    return (\n      <>\n        {queryType === GrafanaQueryType.Search && (\n          <Alert title=\"Grafana Search\" severity=\"info\">\n            Using this datasource to call the new search system is experimental, and subject to change at any time\n            without notice.\n          </Alert>\n        )}\n        <InlineFieldRow>\n          <InlineField label=\"Query type\" grow={true} labelWidth={labelWidth}>\n            <Select\n              options={queryTypes}\n              value={queryTypes.find((v) => v.value === queryType) || queryTypes[0]}\n              onChange={this.onQueryTypeChange}\n            />\n          </InlineField>\n        </InlineFieldRow>\n        {queryType === GrafanaQueryType.LiveMeasurements && this.renderMeasurementsQuery()}\n        {queryType === GrafanaQueryType.List && this.renderListPublicFiles()}\n        {queryType === GrafanaQueryType.Snapshot && this.renderSnapshotQuery()}\n        {queryType === GrafanaQueryType.Search && (\n          <SearchEditor value={query.search ?? {}} onChange={this.onSearchChange} />\n        )}\n      </>\n    );\n  }\n}\n\nexport const QueryEditor = withTheme2(UnthemedQueryEditor);\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    file: css`\n      width: 100%;\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n      justify-content: space-between;\n      padding: ${theme.spacing(2)};\n      border: 1px dashed ${theme.colors.border.medium};\n      background-color: ${theme.colors.background.secondary};\n      margin-top: ${theme.spacing(1)};\n    `,\n  };\n}\n","import { DataSourcePlugin } from '@grafana/data';\n\nimport { QueryEditor } from './components/QueryEditor';\nimport { GrafanaDatasource } from './datasource';\nimport { GrafanaQuery } from './types';\n\nexport const plugin = new DataSourcePlugin<GrafanaDatasource, GrafanaQuery>(GrafanaDatasource).setQueryEditor(\n  QueryEditor\n);\n"],"names":["SearchEditor","value","onChange","json","setJSON","query","setQuery","handleSearchBlur","e","handleSearchEnterKey","onSaveSearchJSON","rawSearchJSON","searchQuery","ex","InlineFieldRow","InlineField","Input","CodeEditor","labelWidth","UnthemedQueryEditor","props","sel","onRunQuery","item","fields","v","tf","f","key","txt","buffer","err","file","removeFile","acceptedFiles","fileRejections","event","next","snapshot","df","dataframeJson","search","config","channelInfo","channelFields","channels","c","distinctFields","frame","n","ds","rsp","folders","channel","filter","currentChannel","formattedTime","Select","input","Alert","path","currentFolder","theme","styles","getStyles","fileSize","InlineLabel","FileDropzone","queryType","queryTypes","QueryEditor"],"sourceRoot":""}