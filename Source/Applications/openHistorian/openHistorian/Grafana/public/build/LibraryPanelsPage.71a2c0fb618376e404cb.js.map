{"version":3,"file":"LibraryPanelsPage.71a2c0fb618376e404cb.js","mappings":"wMAQO,MAAMA,EAAoB,IAAM,CACrC,KAAM,CAACC,EAAUC,CAAW,KAAI,YAAwC,MAAS,EAEjF,OACE,gBAAC,IAAI,CAAC,MAAM,6BACV,gBAAC,kBACC,gBAAC,IAAmB,CAAC,QAASA,EAAa,qBAAoB,GAAC,SAAQ,GAAC,gBAAe,GAAC,iBAAgB,GAAC,EACzGD,EAAW,gBAAC,IAAqB,CAAC,UAAW,IAAMC,EAAY,MAAS,EAAG,aAAcD,CAAA,CAAU,EAAK,IAC3G,CACF,CAEJ,EAEA,EAAeD,C,4JCJR,SAASG,EAAsB,CAAE,aAAAC,EAAc,UAAAC,CAAU,EAA4C,CAC1G,MAAMC,KAAS,MAAWC,CAAS,EAC7B,CAACC,EAASC,CAAU,KAAI,YAAS,EAAK,EACtC,CAACC,EAAWC,CAAY,KAAI,YAAS,CAAC,EACtC,CAACC,EAAQC,CAAS,KAAI,YAA2D,MAAS,KAChG,aAAU,IAAM,EACO,SAAY,CAC/B,MAAMC,EAAsB,QAAM,MAAmCV,EAAa,GAAG,EACrFO,EAAaG,EAAoB,MAAM,CACzC,GACa,CACf,EAAG,CAACV,EAAa,GAAG,CAAC,EACrB,MAAMW,KAAc,eACjBC,GAAyBC,EAAiBb,EAAa,IAAKY,EAAcP,CAAU,EACrF,CAACL,EAAa,GAAG,CACnB,EACMc,KAAuB,WAAQ,IAAM,IAASH,EAAa,IAAK,CAAE,QAAS,EAAK,CAAC,EAAG,CAACA,CAAW,CAAC,EACjGI,EAAeC,GAAqC,CACxDA,EAAE,eAAe,EACjB,UAAqB,eAAkB,MAAMR,GAAQ,OAAO,MAAO,CAAC,CAAC,CAAC,CACxE,EAEA,OACE,gBAAC,IAAK,CAAC,MAAM,0BAA0B,UAAAP,EAAsB,gBAAiBA,EAAW,OAAM,IAC7F,gBAAC,OAAI,UAAWC,EAAO,WACpBI,IAAc,EACb,gBAAC,YAAK,6EAA2E,EAC/E,KACHA,EAAY,EACX,gCACE,gBAAC,SAAE,8BAC2B,IAC5B,gBAAC,cACEA,EAAU,IAAEA,EAAY,EAAI,aAAe,WAC9C,EAAS,sDAEX,EACA,gBAAC,MACC,YAAW,GACX,UAAWF,EACX,eAAgB,GAChB,YAAaU,EACb,SAAUL,EACV,YAAY,uCACZ,iBAAiB,sBACnB,CACF,EACE,IACN,EACA,gBAAC,mBACC,gBAAC,KAAM,CAAC,QAAQ,YAAY,QAASR,EAAW,KAAK,WAAU,QAE/D,EACA,gBAAC,KAAM,CAAC,QAASc,EAAa,SAAU,CAAC,QAAQP,CAAM,GACpDA,EAAS,iBAAiBA,GAAQ,WAAa,4BAClD,CACF,CACF,CAEJ,CAEA,eAAeK,EAAiBI,EAAaL,EAAsBP,EAAwC,CACzGA,EAAW,EAAI,EAEf,MAAMa,GADa,QAAM,MAAuBD,CAAG,GAEhD,OAAQE,GAAMA,EAAE,MAAM,YAAY,EAAE,SAASP,EAAa,YAAY,CAAC,CAAC,EACxE,IAAKO,IAAO,CAAE,MAAOA,EAAE,MAAO,MAAOA,CAAE,EAAE,EAC5C,OAAAd,EAAW,EAAK,EAETa,CACT,CAEA,SAASf,EAAUiB,EAAsB,CACvC,MAAO,CACL,UAAW,OACb,CACF,C","sources":["webpack://grafana/./public/app/features/library-panels/LibraryPanelsPage.tsx","webpack://grafana/./public/app/features/library-panels/components/OpenLibraryPanelModal/OpenLibraryPanelModal.tsx"],"sourcesContent":["import React, { useState } from 'react';\n\nimport { Page } from 'app/core/components/Page/Page';\n\nimport { LibraryPanelsSearch } from './components/LibraryPanelsSearch/LibraryPanelsSearch';\nimport { OpenLibraryPanelModal } from './components/OpenLibraryPanelModal/OpenLibraryPanelModal';\nimport { LibraryElementDTO } from './types';\n\nexport const LibraryPanelsPage = () => {\n  const [selected, setSelected] = useState<LibraryElementDTO | undefined>(undefined);\n\n  return (\n    <Page navId=\"dashboards/library-panels\">\n      <Page.Contents>\n        <LibraryPanelsSearch onClick={setSelected} showSecondaryActions showSort showPanelFilter showFolderFilter />\n        {selected ? <OpenLibraryPanelModal onDismiss={() => setSelected(undefined)} libraryPanel={selected} /> : null}\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default LibraryPanelsPage;\n","import { css } from '@emotion/css';\nimport debounce from 'debounce-promise';\nimport React, { MouseEvent, useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { GrafanaTheme2, SelectableValue, urlUtil } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { AsyncSelect, Button, Modal, useStyles2 } from '@grafana/ui';\n\nimport { DashboardSearchItem } from '../../../search/types';\nimport { getConnectedDashboards, getLibraryPanelConnectedDashboards } from '../../state/api';\nimport { LibraryElementDTO } from '../../types';\n\nexport interface OpenLibraryPanelModalProps {\n  onDismiss: () => void;\n  libraryPanel: LibraryElementDTO;\n}\n\nexport function OpenLibraryPanelModal({ libraryPanel, onDismiss }: OpenLibraryPanelModalProps): JSX.Element {\n  const styles = useStyles2(getStyles);\n  const [loading, setLoading] = useState(false);\n  const [connected, setConnected] = useState(0);\n  const [option, setOption] = useState<SelectableValue<DashboardSearchItem> | undefined>(undefined);\n  useEffect(() => {\n    const getConnected = async () => {\n      const connectedDashboards = await getLibraryPanelConnectedDashboards(libraryPanel.uid);\n      setConnected(connectedDashboards.length);\n    };\n    getConnected();\n  }, [libraryPanel.uid]);\n  const loadOptions = useCallback(\n    (searchString: string) => loadOptionsAsync(libraryPanel.uid, searchString, setLoading),\n    [libraryPanel.uid]\n  );\n  const debouncedLoadOptions = useMemo(() => debounce(loadOptions, 300, { leading: true }), [loadOptions]);\n  const onViewPanel = (e: MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    locationService.push(urlUtil.renderUrl(`/d/${option?.value?.uid}`, {}));\n  };\n\n  return (\n    <Modal title=\"View panel in dashboard\" onDismiss={onDismiss} onClickBackdrop={onDismiss} isOpen>\n      <div className={styles.container}>\n        {connected === 0 ? (\n          <span>Panel is not linked to a dashboard. Add the panel to a dashboard and retry.</span>\n        ) : null}\n        {connected > 0 ? (\n          <>\n            <p>\n              This panel is being used in{' '}\n              <strong>\n                {connected} {connected > 1 ? 'dashboards' : 'dashboard'}\n              </strong>\n              .Please choose which dashboard to view the panel in:\n            </p>\n            <AsyncSelect\n              isClearable\n              isLoading={loading}\n              defaultOptions={true}\n              loadOptions={debouncedLoadOptions}\n              onChange={setOption}\n              placeholder=\"Start typing to search for dashboard\"\n              noOptionsMessage=\"No dashboards found\"\n            />\n          </>\n        ) : null}\n      </div>\n      <Modal.ButtonRow>\n        <Button variant=\"secondary\" onClick={onDismiss} fill=\"outline\">\n          Cancel\n        </Button>\n        <Button onClick={onViewPanel} disabled={!Boolean(option)}>\n          {option ? `View panel in ${option?.label}...` : 'View panel in dashboard...'}\n        </Button>\n      </Modal.ButtonRow>\n    </Modal>\n  );\n}\n\nasync function loadOptionsAsync(uid: string, searchString: string, setLoading: (loading: boolean) => void) {\n  setLoading(true);\n  const searchHits = await getConnectedDashboards(uid);\n  const options = searchHits\n    .filter((d) => d.title.toLowerCase().includes(searchString.toLowerCase()))\n    .map((d) => ({ label: d.title, value: d }));\n  setLoading(false);\n\n  return options;\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css``,\n  };\n}\n"],"names":["LibraryPanelsPage","selected","setSelected","OpenLibraryPanelModal","libraryPanel","onDismiss","styles","getStyles","loading","setLoading","connected","setConnected","option","setOption","connectedDashboards","loadOptions","searchString","loadOptionsAsync","debouncedLoadOptions","onViewPanel","e","uid","options","d","theme"],"sourceRoot":""}