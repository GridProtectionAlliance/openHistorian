{"version":3,"file":"heatmapPanel.c215e3b6a365c8ca89ff.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/ColorScale/ColorScale.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/result_transformer.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/types.ts","webpack://grafana/./public/app/plugins/panel/heatmap/HeatmapHoverView.tsx","webpack://grafana/./public/app/plugins/panel/heatmap/utils.ts","webpack://grafana/./public/app/plugins/panel/heatmap/fields.ts","webpack://grafana/./public/app/plugins/panel/heatmap/panelcfg.gen.ts","webpack://grafana/./public/app/plugins/panel/heatmap/types.ts","webpack://grafana/./public/app/plugins/panel/heatmap/palettes.ts","webpack://grafana/./public/app/plugins/panel/heatmap/HeatmapPanel.tsx","webpack://grafana/./public/app/plugins/panel/heatmap/migrations.ts","webpack://grafana/./public/app/plugins/panel/heatmap/suggestions.ts","webpack://grafana/./public/app/plugins/panel/heatmap/module.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useState, useEffect } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useTheme2 } from '@grafana/ui';\n\ntype Props = {\n  colorPalette: string[];\n  min: number;\n  max: number;\n\n  // Show a value as string -- when not defined, the raw values will not be shown\n  display?: (v: number) => string;\n  hoverValue?: number;\n  useStopsPercentage?: boolean;\n};\n\ntype HoverState = {\n  isShown: boolean;\n  value: number;\n};\n\nconst GRADIENT_STOPS = 10;\n\nexport const ColorScale = ({ colorPalette, min, max, display, hoverValue, useStopsPercentage }: Props) => {\n  const [colors, setColors] = useState<string[]>([]);\n  const [scaleHover, setScaleHover] = useState<HoverState>({ isShown: false, value: 0 });\n  const [percent, setPercent] = useState<number | null>(null); // 0-100 for CSS percentage\n\n  const theme = useTheme2();\n  const styles = getStyles(theme, colors);\n\n  useEffect(() => {\n    setColors(getGradientStops({ colorArray: colorPalette, stops: GRADIENT_STOPS, useStopsPercentage }));\n  }, [colorPalette, useStopsPercentage]);\n\n  const onScaleMouseMove = (event: React.MouseEvent<HTMLDivElement>) => {\n    const divOffset = event.nativeEvent.offsetX;\n    const offsetWidth = event.currentTarget.offsetWidth;\n    const normPercentage = Math.floor((divOffset * 100) / offsetWidth + 1);\n    const scaleValue = Math.floor(((max - min) * normPercentage) / 100 + min);\n\n    setScaleHover({ isShown: true, value: scaleValue });\n    setPercent(normPercentage);\n  };\n\n  const onScaleMouseLeave = () => {\n    setScaleHover({ isShown: false, value: 0 });\n  };\n\n  useEffect(() => {\n    setPercent(hoverValue == null ? null : clampPercent100((hoverValue - min) / (max - min)));\n  }, [hoverValue, min, max]);\n\n  return (\n    <div className={styles.scaleWrapper} onMouseMove={onScaleMouseMove} onMouseLeave={onScaleMouseLeave}>\n      <div className={styles.scaleGradient}>\n        {display && (scaleHover.isShown || hoverValue !== undefined) && (\n          <div className={styles.followerContainer}>\n            <div className={styles.follower} style={{ left: `${percent}%` }} />\n          </div>\n        )}\n      </div>\n      {display && (\n        <div className={styles.followerContainer}>\n          <div className={styles.legendValues}>\n            <span>{display(min)}</span>\n            <span>{display(max)}</span>\n          </div>\n          {percent != null && (scaleHover.isShown || hoverValue !== undefined) && (\n            <span className={styles.hoverValue} style={{ left: `${percent}%` }}>\n              {display(hoverValue ?? scaleHover.value)}\n            </span>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst getGradientStops = ({\n  colorArray,\n  stops,\n  useStopsPercentage = true,\n}: {\n  colorArray: string[];\n  stops: number;\n  useStopsPercentage?: boolean;\n}): string[] => {\n  const colorCount = colorArray.length;\n  if (useStopsPercentage && colorCount <= 20) {\n    const incr = (1 / colorCount) * 100;\n    let per = 0;\n    const stops: string[] = [];\n    for (const color of colorArray) {\n      if (per > 0) {\n        stops.push(`${color} ${per}%`);\n      } else {\n        stops.push(color);\n      }\n      per += incr;\n      stops.push(`${color} ${per}%`);\n    }\n    return stops;\n  }\n\n  const gradientEnd = colorArray[colorCount - 1];\n  const skip = Math.ceil(colorCount / stops);\n  const gradientStops = new Set<string>();\n\n  for (let i = 0; i < colorCount; i += skip) {\n    gradientStops.add(colorArray[i]);\n  }\n\n  gradientStops.add(gradientEnd);\n\n  return [...gradientStops];\n};\n\nfunction clampPercent100(v: number) {\n  if (v > 1) {\n    return 100;\n  }\n  if (v < 0) {\n    return 0;\n  }\n  return v * 100;\n}\n\nconst getStyles = (theme: GrafanaTheme2, colors: string[]) => ({\n  scaleWrapper: css`\n    width: 100%;\n    font-size: 11px;\n    opacity: 1;\n  `,\n  scaleGradient: css`\n    background: linear-gradient(90deg, ${colors.join()});\n    height: 10px;\n    pointer-events: none;\n  `,\n  legendValues: css`\n    display: flex;\n    justify-content: space-between;\n    pointer-events: none;\n  `,\n  hoverValue: css`\n    position: absolute;\n    margin-top: -14px;\n    padding: 3px 15px;\n    background: ${theme.colors.background.primary};\n    transform: translateX(-50%);\n  `,\n  followerContainer: css`\n    position: relative;\n    pointer-events: none;\n    white-space: nowrap;\n  `,\n  follower: css`\n    position: absolute;\n    height: 14px;\n    width: 14px;\n    border-radius: 50%;\n    transform: translateX(-50%) translateY(-50%);\n    border: 2px solid ${theme.colors.text.primary};\n    margin-top: 5px;\n  `,\n});\n","import { descending, deviation } from 'd3';\nimport { flatten, forOwn, groupBy, partition } from 'lodash';\n\nimport {\n  ArrayDataFrame,\n  ArrayVector,\n  CoreApp,\n  DataFrame,\n  DataFrameType,\n  DataLink,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataTopic,\n  Field,\n  FieldType,\n  formatLabels,\n  getDisplayProcessor,\n  Labels,\n  MutableField,\n  PreferredVisualisationType,\n  ScopedVars,\n  TIME_SERIES_TIME_FIELD_NAME,\n  TIME_SERIES_VALUE_FIELD_NAME,\n} from '@grafana/data';\nimport { FetchResponse, getDataSourceSrv, getTemplateSrv } from '@grafana/runtime';\n\nimport { renderLegendFormat } from './legend';\nimport {\n  ExemplarTraceIdDestination,\n  isExemplarData,\n  isMatrixData,\n  MatrixOrVectorResult,\n  PromDataSuccessResponse,\n  PromMetric,\n  PromQuery,\n  PromQueryRequest,\n  PromValue,\n  TransformOptions,\n} from './types';\n\n// handles case-insensitive Inf, +Inf, -Inf (with optional \"inity\" suffix)\nconst INFINITY_SAMPLE_REGEX = /^[+-]?inf(?:inity)?$/i;\n\ninterface TimeAndValue {\n  [TIME_SERIES_TIME_FIELD_NAME]: number;\n  [TIME_SERIES_VALUE_FIELD_NAME]: number;\n}\n\nconst isTableResult = (dataFrame: DataFrame, options: DataQueryRequest<PromQuery>): boolean => {\n  // We want to process vector and scalar results in Explore as table\n  if (\n    options.app === CoreApp.Explore &&\n    (dataFrame.meta?.custom?.resultType === 'vector' || dataFrame.meta?.custom?.resultType === 'scalar')\n  ) {\n    return true;\n  }\n\n  // We want to process all dataFrames with target.format === 'table' as table\n  const target = options.targets.find((target) => target.refId === dataFrame.refId);\n  return target?.format === 'table';\n};\n\nconst isHeatmapResult = (dataFrame: DataFrame, options: DataQueryRequest<PromQuery>): boolean => {\n  const target = options.targets.find((target) => target.refId === dataFrame.refId);\n  return target?.format === 'heatmap';\n};\n\n// V2 result transformer used to transform query results from queries that were run through prometheus backend\nexport function transformV2(\n  response: DataQueryResponse,\n  request: DataQueryRequest<PromQuery>,\n  options: { exemplarTraceIdDestinations?: ExemplarTraceIdDestination[] }\n) {\n  const [tableFrames, framesWithoutTable] = partition<DataFrame>(response.data, (df) => isTableResult(df, request));\n  const processedTableFrames = transformDFToTable(tableFrames);\n\n  const [exemplarFrames, framesWithoutTableAndExemplars] = partition<DataFrame>(\n    framesWithoutTable,\n    (df) => df.meta?.custom?.resultType === 'exemplar'\n  );\n\n  // EXEMPLAR FRAMES: We enrich exemplar frames with data links and add dataTopic meta info\n  const { exemplarTraceIdDestinations: destinations } = options;\n  const processedExemplarFrames = exemplarFrames.map((dataFrame) => {\n    if (destinations?.length) {\n      for (const exemplarTraceIdDestination of destinations) {\n        const traceIDField = dataFrame.fields.find((field) => field.name === exemplarTraceIdDestination.name);\n        if (traceIDField) {\n          const links = getDataLinks(exemplarTraceIdDestination);\n          traceIDField.config.links = traceIDField.config.links?.length\n            ? [...traceIDField.config.links, ...links]\n            : links;\n        }\n      }\n    }\n\n    return { ...dataFrame, meta: { ...dataFrame.meta, dataTopic: DataTopic.Annotations } };\n  });\n\n  const [heatmapResults, framesWithoutTableHeatmapsAndExemplars] = partition<DataFrame>(\n    framesWithoutTableAndExemplars,\n    (df) => isHeatmapResult(df, request)\n  );\n\n  // this works around the fact that we only get back frame.name with le buckets when legendFormat == {{le}}...which is not the default\n  heatmapResults.forEach((df) => {\n    if (df.name == null) {\n      let f = df.fields.find((f) => f.name === 'Value');\n\n      if (f) {\n        let le = f.labels?.le;\n\n        if (le) {\n          // this is used for sorting the frames by numeric ascending le labels for de-accum\n          df.name = le;\n          // this is used for renaming the Value fields to le label\n          f.config.displayNameFromDS = le;\n        }\n      }\n    }\n  });\n\n  // Group heatmaps by query\n  const heatmapResultsGroupedByQuery = groupBy<DataFrame>(heatmapResults, (h) => h.refId);\n\n  // Initialize empty array to push grouped histogram frames to\n  let processedHeatmapResultsGroupedByQuery: DataFrame[][] = [];\n\n  // Iterate through every query in this heatmap\n  for (const query in heatmapResultsGroupedByQuery) {\n    // Get reference to dataFrames for heatmap\n    const heatmapResultsGroup = heatmapResultsGroupedByQuery[query];\n\n    // Create a new grouping by iterating through the data frames...\n    const heatmapResultsGroupedByValues = groupBy<DataFrame>(heatmapResultsGroup, (dataFrame) => {\n      // Each data frame has `Time` and `Value` properties, we want to get the values\n      const values = dataFrame.fields.find((field) => field.name === TIME_SERIES_VALUE_FIELD_NAME);\n      // Specific functionality for special \"le\" quantile heatmap value, we know if this value exists, that we do not want to calculate the heatmap density across data frames from the same quartile\n      if (values?.labels && HISTOGRAM_QUANTILE_LABEL_NAME in values.labels) {\n        const { le, ...notLE } = values?.labels;\n        return Object.values(notLE).join();\n      }\n\n      // Return a string made from the concatenation of this frame's values to represent a grouping in the query\n      return Object.values(values?.labels ?? []).join();\n    });\n\n    // Then iterate through the resultant object\n    forOwn(heatmapResultsGroupedByValues, (dataFrames, key) => {\n      // Sort frames within each grouping\n      const sortedHeatmap = dataFrames.sort(sortSeriesByLabel);\n      // And push the sorted grouping with the rest\n      processedHeatmapResultsGroupedByQuery.push(mergeHeatmapFrames(transformToHistogramOverTime(sortedHeatmap)));\n    });\n  }\n\n  // Everything else is processed as time_series result and graph preferredVisualisationType\n  const otherFrames = framesWithoutTableHeatmapsAndExemplars.map((dataFrame) => {\n    const df: DataFrame = {\n      ...dataFrame,\n      meta: {\n        ...dataFrame.meta,\n        preferredVisualisationType: 'graph',\n      },\n    };\n    return df;\n  });\n\n  const flattenedProcessedHeatmapFrames = flatten(processedHeatmapResultsGroupedByQuery);\n\n  return {\n    ...response,\n    data: [...otherFrames, ...processedTableFrames, ...flattenedProcessedHeatmapFrames, ...processedExemplarFrames],\n  };\n}\n\nconst HISTOGRAM_QUANTILE_LABEL_NAME = 'le';\n\nexport function transformDFToTable(dfs: DataFrame[]): DataFrame[] {\n  // If no dataFrames or if 1 dataFrames with no values, return original dataFrame\n  if (dfs.length === 0 || (dfs.length === 1 && dfs[0].length === 0)) {\n    return dfs;\n  }\n\n  // Group results by refId and process dataFrames with the same refId as 1 dataFrame\n  const dataFramesByRefId = groupBy(dfs, 'refId');\n  const refIds = Object.keys(dataFramesByRefId);\n\n  const frames = refIds.map((refId) => {\n    // Create timeField, valueField and labelFields\n    const valueText = getValueText(refIds.length, refId);\n    const valueField = getValueField({ data: [], valueName: valueText });\n    const timeField = getTimeField([]);\n    const labelFields: MutableField[] = [];\n\n    // Fill labelsFields with labels from dataFrames\n    dataFramesByRefId[refId].forEach((df) => {\n      const frameValueField = df.fields[1];\n      const promLabels = frameValueField?.labels ?? {};\n\n      Object.keys(promLabels)\n        .sort()\n        .forEach((label) => {\n          // If we don't have label in labelFields, add it\n          if (!labelFields.some((l) => l.name === label)) {\n            const numberField = label === HISTOGRAM_QUANTILE_LABEL_NAME;\n            labelFields.push({\n              name: label,\n              config: { filterable: true },\n              type: numberField ? FieldType.number : FieldType.string,\n              values: new ArrayVector(),\n            });\n          }\n        });\n    });\n\n    // Fill valueField, timeField and labelFields with values\n    dataFramesByRefId[refId].forEach((df) => {\n      const timeFields = df.fields[0]?.values ?? new ArrayVector();\n      const dataFields = df.fields[1]?.values ?? new ArrayVector();\n      timeFields.toArray().forEach((value) => timeField.values.add(value));\n      dataFields.toArray().forEach((value) => {\n        valueField.values.add(parseSampleValue(value));\n        const labelsForField = df.fields[1].labels ?? {};\n        labelFields.forEach((field) => field.values.add(getLabelValue(labelsForField, field.name)));\n      });\n    });\n\n    const fields = [timeField, ...labelFields, valueField];\n    return {\n      refId,\n      fields,\n      // Prometheus specific UI for instant queries\n      meta: { ...dfs[0].meta, preferredVisualisationType: 'rawPrometheus' as PreferredVisualisationType },\n      length: timeField.values.length,\n    };\n  });\n  return frames;\n}\n\nfunction getValueText(responseLength: number, refId = '') {\n  return responseLength > 1 ? `Value #${refId}` : 'Value';\n}\n\nexport function transform(\n  response: FetchResponse<PromDataSuccessResponse>,\n  transformOptions: {\n    query: PromQueryRequest;\n    exemplarTraceIdDestinations?: ExemplarTraceIdDestination[];\n    target: PromQuery;\n    responseListLength: number;\n    scopedVars?: ScopedVars;\n  }\n) {\n  // Create options object from transformOptions\n  const options: TransformOptions = {\n    format: transformOptions.target.format,\n    step: transformOptions.query.step,\n    legendFormat: transformOptions.target.legendFormat,\n    start: transformOptions.query.start,\n    end: transformOptions.query.end,\n    query: transformOptions.query.expr,\n    responseListLength: transformOptions.responseListLength,\n    scopedVars: transformOptions.scopedVars,\n    refId: transformOptions.target.refId,\n    valueWithRefId: transformOptions.target.valueWithRefId,\n    meta: {\n      // Fix for showing of Prometheus results in Explore table\n      preferredVisualisationType: transformOptions.query.instant ? 'rawPrometheus' : 'graph',\n    },\n  };\n  const prometheusResult = response.data.data;\n\n  if (isExemplarData(prometheusResult)) {\n    const events: TimeAndValue[] = [];\n    prometheusResult.forEach((exemplarData) => {\n      const data = exemplarData.exemplars.map((exemplar) => {\n        return {\n          [TIME_SERIES_TIME_FIELD_NAME]: exemplar.timestamp * 1000,\n          [TIME_SERIES_VALUE_FIELD_NAME]: exemplar.value,\n          ...exemplar.labels,\n          ...exemplarData.seriesLabels,\n        };\n      });\n      events.push(...data);\n    });\n\n    // Grouping exemplars by step\n    const sampledExemplars = sampleExemplars(events, options);\n\n    const dataFrame = new ArrayDataFrame(sampledExemplars);\n    dataFrame.meta = { dataTopic: DataTopic.Annotations };\n\n    // Add data links if configured\n    if (transformOptions.exemplarTraceIdDestinations?.length) {\n      for (const exemplarTraceIdDestination of transformOptions.exemplarTraceIdDestinations) {\n        const traceIDField = dataFrame.fields.find((field) => field.name === exemplarTraceIdDestination.name);\n        if (traceIDField) {\n          const links = getDataLinks(exemplarTraceIdDestination);\n          traceIDField.config.links = traceIDField.config.links?.length\n            ? [...traceIDField.config.links, ...links]\n            : links;\n        }\n      }\n    }\n    return [dataFrame];\n  }\n\n  if (!prometheusResult?.result) {\n    return [];\n  }\n\n  // Return early if result type is scalar\n  if (prometheusResult.resultType === 'scalar') {\n    return [\n      {\n        meta: options.meta,\n        refId: options.refId,\n        length: 1,\n        fields: [getTimeField([prometheusResult.result]), getValueField({ data: [prometheusResult.result] })],\n      },\n    ];\n  }\n\n  // Return early again if the format is table, this needs special transformation.\n  if (options.format === 'table') {\n    const tableData = transformMetricDataToTable(prometheusResult.result, options);\n    return [tableData];\n  }\n\n  // Process matrix and vector results to DataFrame\n  const dataFrame: DataFrame[] = [];\n  prometheusResult.result.forEach((data: MatrixOrVectorResult) => dataFrame.push(transformToDataFrame(data, options)));\n\n  // When format is heatmap use the already created data frames and transform it more\n  if (options.format === 'heatmap') {\n    return mergeHeatmapFrames(transformToHistogramOverTime(dataFrame.sort(sortSeriesByLabel)));\n  }\n\n  // Return matrix or vector result as DataFrame[]\n  return dataFrame;\n}\n\nfunction getDataLinks(options: ExemplarTraceIdDestination): DataLink[] {\n  const dataLinks: DataLink[] = [];\n\n  if (options.datasourceUid) {\n    const dataSourceSrv = getDataSourceSrv();\n    const dsSettings = dataSourceSrv.getInstanceSettings(options.datasourceUid);\n\n    // dsSettings is undefined because of the reasons below:\n    // - permissions issues (probably most likely)\n    // - deleted datasource\n    // - misconfiguration\n    if (dsSettings) {\n      dataLinks.push({\n        title: options.urlDisplayLabel || `Query with ${dsSettings?.name}`,\n        url: '',\n        internal: {\n          query: { query: '${__value.raw}', queryType: 'traceql' },\n          datasourceUid: options.datasourceUid,\n          datasourceName: dsSettings?.name ?? 'Data source not found',\n        },\n      });\n    }\n  }\n\n  if (options.url) {\n    dataLinks.push({\n      title: options.urlDisplayLabel || `Go to ${options.url}`,\n      url: options.url,\n      targetBlank: true,\n    });\n  }\n  return dataLinks;\n}\n\n/**\n * Reduce the density of the exemplars by making sure that the highest value exemplar is included\n * and then only the ones that are 2 times the standard deviation of the all the values.\n * This makes sure not to show too many dots near each other.\n */\nfunction sampleExemplars(events: TimeAndValue[], options: TransformOptions) {\n  const step = options.step || 15;\n  const bucketedExemplars: { [ts: string]: TimeAndValue[] } = {};\n  const values: number[] = [];\n  for (const exemplar of events) {\n    // Align exemplar timestamp to nearest step second\n    const alignedTs = String(Math.floor(exemplar[TIME_SERIES_TIME_FIELD_NAME] / 1000 / step) * step * 1000);\n    if (!bucketedExemplars[alignedTs]) {\n      // New bucket found\n      bucketedExemplars[alignedTs] = [];\n    }\n    bucketedExemplars[alignedTs].push(exemplar);\n    values.push(exemplar[TIME_SERIES_VALUE_FIELD_NAME]);\n  }\n\n  // Getting exemplars from each bucket\n  const standardDeviation = deviation(values);\n  const sampledBuckets = Object.keys(bucketedExemplars).sort();\n  const sampledExemplars = [];\n  for (const ts of sampledBuckets) {\n    const exemplarsInBucket = bucketedExemplars[ts];\n    if (exemplarsInBucket.length === 1) {\n      sampledExemplars.push(exemplarsInBucket[0]);\n    } else {\n      // Choose which values to sample\n      const bucketValues = exemplarsInBucket.map((ex) => ex[TIME_SERIES_VALUE_FIELD_NAME]).sort(descending);\n      const sampledBucketValues = bucketValues.reduce((acc: number[], curr) => {\n        if (acc.length === 0) {\n          // First value is max and is always added\n          acc.push(curr);\n        } else {\n          // Then take values only when at least 2 standard deviation distance to previously taken value\n          const prev = acc[acc.length - 1];\n          if (standardDeviation && prev - curr >= 2 * standardDeviation) {\n            acc.push(curr);\n          }\n        }\n        return acc;\n      }, []);\n      // Find the exemplars for the sampled values\n      sampledExemplars.push(\n        ...sampledBucketValues.map(\n          (value) => exemplarsInBucket.find((ex) => ex[TIME_SERIES_VALUE_FIELD_NAME] === value)!\n        )\n      );\n    }\n  }\n  return sampledExemplars;\n}\n\n/**\n * Transforms matrix and vector result from Prometheus result to DataFrame\n */\nfunction transformToDataFrame(data: MatrixOrVectorResult, options: TransformOptions): DataFrame {\n  const { name, labels } = createLabelInfo(data.metric, options);\n\n  const fields: Field[] = [];\n\n  if (isMatrixData(data)) {\n    const stepMs = options.step ? options.step * 1000 : NaN;\n    let baseTimestamp = options.start * 1000;\n    const dps: PromValue[] = [];\n\n    for (const value of data.values) {\n      let dpValue: number | null = parseSampleValue(value[1]);\n\n      if (isNaN(dpValue)) {\n        dpValue = null;\n      }\n\n      const timestamp = value[0] * 1000;\n      for (let t = baseTimestamp; t < timestamp; t += stepMs) {\n        dps.push([t, null]);\n      }\n      baseTimestamp = timestamp + stepMs;\n      dps.push([timestamp, dpValue]);\n    }\n\n    const endTimestamp = options.end * 1000;\n    for (let t = baseTimestamp; t <= endTimestamp; t += stepMs) {\n      dps.push([t, null]);\n    }\n    fields.push(getTimeField(dps, true));\n    fields.push(getValueField({ data: dps, parseValue: false, labels, displayNameFromDS: name }));\n  } else {\n    fields.push(getTimeField([data.value]));\n    fields.push(getValueField({ data: [data.value], labels, displayNameFromDS: name }));\n  }\n\n  return {\n    meta: options.meta,\n    refId: options.refId,\n    length: fields[0].values.length,\n    fields,\n    name,\n  };\n}\n\nfunction transformMetricDataToTable(md: MatrixOrVectorResult[], options: TransformOptions): DataFrame {\n  if (!md || md.length === 0) {\n    return {\n      meta: options.meta,\n      refId: options.refId,\n      length: 0,\n      fields: [],\n    };\n  }\n\n  const valueText = options.responseListLength > 1 || options.valueWithRefId ? `Value #${options.refId}` : 'Value';\n\n  const timeField = getTimeField([]);\n  const metricFields = Object.keys(md.reduce((acc, series) => ({ ...acc, ...series.metric }), {}))\n    .sort()\n    .map((label) => {\n      // Labels have string field type, otherwise table tries to figure out the type which can result in unexpected results\n      // Only \"le\" label has a number field type\n      const numberField = label === HISTOGRAM_QUANTILE_LABEL_NAME;\n      return {\n        name: label,\n        config: { filterable: true },\n        type: numberField ? FieldType.number : FieldType.string,\n        values: new ArrayVector(),\n      };\n    });\n  const valueField = getValueField({ data: [], valueName: valueText });\n\n  md.forEach((d) => {\n    if (isMatrixData(d)) {\n      d.values.forEach((val) => {\n        timeField.values.add(val[0] * 1000);\n        metricFields.forEach((metricField) => metricField.values.add(getLabelValue(d.metric, metricField.name)));\n        valueField.values.add(parseSampleValue(val[1]));\n      });\n    } else {\n      timeField.values.add(d.value[0] * 1000);\n      metricFields.forEach((metricField) => metricField.values.add(getLabelValue(d.metric, metricField.name)));\n      valueField.values.add(parseSampleValue(d.value[1]));\n    }\n  });\n\n  return {\n    meta: options.meta,\n    refId: options.refId,\n    length: timeField.values.length,\n    fields: [timeField, ...metricFields, valueField],\n  };\n}\n\nfunction getLabelValue(metric: PromMetric, label: string): string | number {\n  if (metric.hasOwnProperty(label)) {\n    if (label === HISTOGRAM_QUANTILE_LABEL_NAME) {\n      return parseSampleValue(metric[label]);\n    }\n    return metric[label];\n  }\n  return '';\n}\n\nfunction getTimeField(data: PromValue[], isMs = false): MutableField {\n  return {\n    name: TIME_SERIES_TIME_FIELD_NAME,\n    type: FieldType.time,\n    config: {},\n    values: new ArrayVector<number>(data.map((val) => (isMs ? val[0] : val[0] * 1000))),\n  };\n}\n\ntype ValueFieldOptions = {\n  data: PromValue[];\n  valueName?: string;\n  parseValue?: boolean;\n  labels?: Labels;\n  displayNameFromDS?: string;\n};\n\nfunction getValueField({\n  data,\n  valueName = TIME_SERIES_VALUE_FIELD_NAME,\n  parseValue = true,\n  labels,\n  displayNameFromDS,\n}: ValueFieldOptions): MutableField {\n  return {\n    name: valueName,\n    type: FieldType.number,\n    display: getDisplayProcessor(),\n    config: {\n      displayNameFromDS,\n    },\n    labels,\n    values: new ArrayVector<number | null>(data.map((val) => (parseValue ? parseSampleValue(val[1]) : val[1]))),\n  };\n}\n\nfunction createLabelInfo(labels: { [key: string]: string }, options: TransformOptions) {\n  if (options?.legendFormat) {\n    const title = renderLegendFormat(getTemplateSrv().replace(options.legendFormat, options?.scopedVars), labels);\n    return { name: title, labels };\n  }\n\n  const { __name__, ...labelsWithoutName } = labels;\n  const labelPart = formatLabels(labelsWithoutName);\n  let title = `${__name__ ?? ''}${labelPart}`;\n\n  if (!title) {\n    title = options.query;\n  }\n\n  return { name: title, labels: labelsWithoutName };\n}\n\nexport function getOriginalMetricName(labelData: { [key: string]: string }) {\n  const metricName = labelData.__name__ || '';\n  delete labelData.__name__;\n  const labelPart = Object.entries(labelData)\n    .map((label) => `${label[0]}=\"${label[1]}\"`)\n    .join(',');\n  return `${metricName}{${labelPart}}`;\n}\n\nfunction mergeHeatmapFrames(frames: DataFrame[]): DataFrame[] {\n  if (frames.length === 0) {\n    return [];\n  }\n\n  const timeField = frames[0].fields.find((field) => field.type === FieldType.time)!;\n  const countFields = frames.map((frame) => {\n    let field = frame.fields.find((field) => field.type === FieldType.number)!;\n\n    return {\n      ...field,\n      name: field.config.displayNameFromDS!,\n    };\n  });\n\n  return [\n    {\n      ...frames[0],\n      meta: {\n        ...frames[0].meta,\n        type: DataFrameType.HeatmapRows,\n      },\n      fields: [timeField!, ...countFields],\n    },\n  ];\n}\n\nfunction transformToHistogramOverTime(seriesList: DataFrame[]) {\n  /*      t1 = timestamp1, t2 = timestamp2 etc.\n            t1  t2  t3          t1  t2  t3\n    le10    10  10  0     =>    10  10  0\n    le20    20  10  30    =>    10  0   30\n    le30    30  10  35    =>    10  0   5\n    */\n  for (let i = seriesList.length - 1; i > 0; i--) {\n    const topSeries = seriesList[i].fields.find((s) => s.name === TIME_SERIES_VALUE_FIELD_NAME);\n    const bottomSeries = seriesList[i - 1].fields.find((s) => s.name === TIME_SERIES_VALUE_FIELD_NAME);\n    if (!topSeries || !bottomSeries) {\n      throw new Error('Prometheus heatmap transform error: data should be a time series');\n    }\n\n    for (let j = 0; j < topSeries.values.length; j++) {\n      const bottomPoint = bottomSeries.values.get(j) || [0];\n      topSeries.values.toArray()[j] -= bottomPoint;\n    }\n  }\n\n  return seriesList;\n}\n\nexport function sortSeriesByLabel(s1: DataFrame, s2: DataFrame): number {\n  let le1, le2;\n\n  try {\n    // fail if not integer. might happen with bad queries\n    le1 = parseSampleValue(s1.name ?? s1.fields[1].name);\n    le2 = parseSampleValue(s2.name ?? s2.fields[1].name);\n  } catch (err) {\n    console.error(err);\n    return 0;\n  }\n\n  if (le1 > le2) {\n    return 1;\n  }\n\n  if (le1 < le2) {\n    return -1;\n  }\n\n  return 0;\n}\n\n/** @internal */\nexport function parseSampleValue(value: string): number {\n  if (INFINITY_SAMPLE_REGEX.test(value)) {\n    return value[0] === '-' ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY;\n  }\n  return parseFloat(value);\n}\n","import { DataSourceJsonData, QueryResultMeta, ScopedVars } from '@grafana/data';\nimport { DataQuery } from '@grafana/schema';\n\nimport { PromApplication } from '../../../types/unified-alerting-dto';\n\nimport { Prometheus as GenPromQuery } from './dataquery.gen';\nimport { QueryEditorMode } from './querybuilder/shared/types';\n\nexport interface PromQuery extends GenPromQuery, DataQuery {\n  /**\n   * Timezone offset to align start & end time on backend\n   */\n  utcOffsetSec?: number;\n  legendFormat?: string;\n  valueWithRefId?: boolean;\n  showingGraph?: boolean;\n  showingTable?: boolean;\n  hinting?: boolean;\n  interval?: string;\n  intervalFactor?: number;\n}\n\nexport enum PrometheusCacheLevel {\n  Low = 'Low',\n  Medium = 'Medium',\n  High = 'High',\n  None = 'None',\n}\nexport interface PromOptions extends DataSourceJsonData {\n  timeInterval?: string;\n  queryTimeout?: string;\n  httpMethod?: string;\n  directUrl?: string;\n  customQueryParameters?: string;\n  disableMetricsLookup?: boolean;\n  exemplarTraceIdDestinations?: ExemplarTraceIdDestination[];\n  prometheusType?: PromApplication;\n  prometheusVersion?: string;\n  cacheLevel?: PrometheusCacheLevel;\n  defaultEditor?: QueryEditorMode;\n}\n\nexport type ExemplarTraceIdDestination = {\n  name: string;\n  url?: string;\n  urlDisplayLabel?: string;\n  datasourceUid?: string;\n};\n\nexport interface PromQueryRequest extends PromQuery {\n  step?: number;\n  requestId?: string;\n  start: number;\n  end: number;\n  headers?: any;\n}\n\nexport interface PromMetricsMetadataItem {\n  type: string;\n  help: string;\n  unit?: string;\n}\n\nexport interface PromMetricsMetadata {\n  [metric: string]: PromMetricsMetadataItem;\n}\n\nexport interface PromDataSuccessResponse<T = PromData> {\n  status: 'success';\n  data: T;\n}\n\nexport interface PromDataErrorResponse<T = PromData> {\n  status: 'error';\n  errorType: string;\n  error: string;\n  data: T;\n}\n\nexport type PromData = PromMatrixData | PromVectorData | PromScalarData | PromExemplarData[];\n\nexport interface Labels {\n  [index: string]: any;\n}\n\nexport interface Exemplar {\n  labels: Labels;\n  value: number;\n  timestamp: number;\n}\n\nexport interface PromExemplarData {\n  seriesLabels: PromMetric;\n  exemplars: Exemplar[];\n}\n\nexport interface PromVectorData {\n  resultType: 'vector';\n  result: Array<{\n    metric: PromMetric;\n    value: PromValue;\n  }>;\n}\n\nexport interface PromMatrixData {\n  resultType: 'matrix';\n  result: Array<{\n    metric: PromMetric;\n    values: PromValue[];\n  }>;\n}\n\nexport interface PromScalarData {\n  resultType: 'scalar';\n  result: PromValue;\n}\n\nexport type PromValue = [number, any];\n\nexport interface PromMetric {\n  __name__?: string;\n\n  [index: string]: any;\n}\n\nexport function isMatrixData(result: MatrixOrVectorResult): result is PromMatrixData['result'][0] {\n  return 'values' in result;\n}\n\nexport function isExemplarData(result: PromData): result is PromExemplarData[] {\n  if (result == null || !Array.isArray(result)) {\n    return false;\n  }\n  return result.length ? 'exemplars' in result[0] : false;\n}\n\nexport type MatrixOrVectorResult = PromMatrixData['result'][0] | PromVectorData['result'][0];\n\nexport interface TransformOptions {\n  format?: string;\n  step?: number;\n  legendFormat?: string;\n  start: number;\n  end: number;\n  query: string;\n  responseListLength: number;\n  scopedVars?: ScopedVars;\n  refId: string;\n  valueWithRefId?: boolean;\n  meta: QueryResultMeta;\n}\n\nexport interface PromLabelQueryResponse {\n  data: {\n    status: string;\n    data: string[];\n  };\n  cancelled?: boolean;\n}\n\n/**\n * Auto = query.legendFormat == '__auto'\n * Verbose = query.legendFormat == null/undefined/''\n * Custom query.legendFormat.length > 0 && query.legendFormat !== '__auto'\n */\nexport enum LegendFormatMode {\n  Auto = '__auto',\n  Verbose = '__verbose',\n  Custom = '__custom',\n}\n\nexport enum PromVariableQueryType {\n  LabelNames,\n  LabelValues,\n  MetricNames,\n  VarQueryResult,\n  SeriesQuery,\n}\n\nexport interface PromVariableQuery extends DataQuery {\n  query?: string;\n  expr?: string;\n  qryType?: PromVariableQueryType;\n  label?: string;\n  metric?: string;\n  varQuery?: string;\n  seriesQuery?: string;\n}\n\nexport type StandardPromVariableQuery = {\n  query: string;\n  refId: string;\n};\n","import React, { useEffect, useRef, useState } from 'react';\n\nimport {\n  DataFrameType,\n  Field,\n  FieldType,\n  formattedValueToString,\n  getFieldDisplayName,\n  LinkModel,\n  TimeRange,\n} from '@grafana/data';\nimport { HeatmapCellLayout } from '@grafana/schema';\nimport { LinkButton, VerticalGroup } from '@grafana/ui';\nimport { getDashboardSrv } from 'app/features/dashboard/services/DashboardSrv';\nimport { isHeatmapCellsDense, readHeatmapRowsCustomMeta } from 'app/features/transformers/calculateHeatmap/heatmap';\n\nimport { DataHoverView } from '../geomap/components/DataHoverView';\n\nimport { HeatmapData } from './fields';\nimport { HeatmapHoverEvent } from './utils';\n\ntype Props = {\n  data: HeatmapData;\n  hover: HeatmapHoverEvent;\n  showHistogram?: boolean;\n  timeRange: TimeRange;\n};\n\nexport const HeatmapHoverView = (props: Props) => {\n  if (props.hover.seriesIdx === 2) {\n    return <DataHoverView data={props.data.exemplars} rowIndex={props.hover.dataIdx} header={'Exemplar'} />;\n  }\n  return <HeatmapHoverCell {...props} />;\n};\n\nconst HeatmapHoverCell = ({ data, hover, showHistogram }: Props) => {\n  const index = hover.dataIdx;\n  const xField = data.heatmap?.fields[0];\n  const yField = data.heatmap?.fields[1];\n  const countField = data.heatmap?.fields[2];\n\n  const xDisp = (v: any) => {\n    if (xField?.display) {\n      return formattedValueToString(xField.display(v));\n    }\n    if (xField?.type === FieldType.time) {\n      const tooltipTimeFormat = 'YYYY-MM-DD HH:mm:ss';\n      const dashboard = getDashboardSrv().getCurrent();\n      return dashboard?.formatDate(v, tooltipTimeFormat);\n    }\n    return `${v}`;\n  };\n\n  const xVals = xField?.values.toArray();\n  const yVals = yField?.values.toArray();\n  const countVals = countField?.values.toArray();\n\n  // labeled buckets\n  const meta = readHeatmapRowsCustomMeta(data.heatmap);\n  const yDisp = yField?.display ? (v: any) => formattedValueToString(yField.display!(v)) : (v: any) => `${v}`;\n\n  const yValueIdx = index % data.yBucketCount! ?? 0;\n\n  let yBucketMin: string;\n  let yBucketMax: string;\n\n  let nonNumericOrdinalDisplay: string | undefined = undefined;\n\n  if (meta.yOrdinalDisplay) {\n    const yMinIdx = data.yLayout === HeatmapCellLayout.le ? yValueIdx - 1 : yValueIdx;\n    const yMaxIdx = data.yLayout === HeatmapCellLayout.le ? yValueIdx : yValueIdx + 1;\n    yBucketMin = yMinIdx < 0 ? meta.yMinDisplay! : `${meta.yOrdinalDisplay[yMinIdx]}`;\n    yBucketMax = `${meta.yOrdinalDisplay[yMaxIdx]}`;\n\n    // e.g. \"pod-xyz123\"\n    if (!meta.yOrdinalLabel || Number.isNaN(+meta.yOrdinalLabel[0])) {\n      nonNumericOrdinalDisplay = data.yLayout === HeatmapCellLayout.le ? yBucketMax : yBucketMin;\n    }\n  } else {\n    const value = yVals?.[yValueIdx];\n\n    if (data.yLayout === HeatmapCellLayout.le) {\n      yBucketMax = `${value}`;\n\n      if (data.yLog) {\n        let logFn = data.yLog === 2 ? Math.log2 : Math.log10;\n        let exp = logFn(value) - 1 / data.yLogSplit!;\n        yBucketMin = `${data.yLog ** exp}`;\n      } else {\n        yBucketMin = `${value - data.yBucketSize!}`;\n      }\n    } else {\n      yBucketMin = `${value}`;\n\n      if (data.yLog) {\n        let logFn = data.yLog === 2 ? Math.log2 : Math.log10;\n        let exp = logFn(value) + 1 / data.yLogSplit!;\n        yBucketMax = `${data.yLog ** exp}`;\n      } else {\n        yBucketMax = `${value + data.yBucketSize!}`;\n      }\n    }\n  }\n\n  let xBucketMin: number;\n  let xBucketMax: number;\n\n  if (data.xLayout === HeatmapCellLayout.le) {\n    xBucketMax = xVals?.[index];\n    xBucketMin = xBucketMax - data.xBucketSize!;\n  } else {\n    xBucketMin = xVals?.[index];\n    xBucketMax = xBucketMin + data.xBucketSize!;\n  }\n\n  const count = countVals?.[index];\n\n  const visibleFields = data.heatmap?.fields.filter((f) => !Boolean(f.config.custom?.hideFrom?.tooltip));\n  const links: Array<LinkModel<Field>> = [];\n  const linkLookup = new Set<string>();\n\n  for (const field of visibleFields ?? []) {\n    // TODO: Currently always undefined? (getLinks)\n    if (field.getLinks) {\n      const v = field.values.get(index);\n      const disp = field.display ? field.display(v) : { text: `${v}`, numeric: +v };\n\n      field.getLinks({ calculatedValue: disp, valueRowIndex: index }).forEach((link) => {\n        const key = `${link.title}/${link.href}`;\n        if (!linkLookup.has(key)) {\n          links.push(link);\n          linkLookup.add(key);\n        }\n      });\n    }\n  }\n\n  let can = useRef<HTMLCanvasElement>(null);\n\n  let histCssWidth = 150;\n  let histCssHeight = 50;\n  let histCanWidth = Math.round(histCssWidth * devicePixelRatio);\n  let histCanHeight = Math.round(histCssHeight * devicePixelRatio);\n\n  useEffect(\n    () => {\n      if (showHistogram) {\n        let histCtx = can.current?.getContext('2d');\n\n        if (histCtx && xVals && yVals && countVals) {\n          let fromIdx = index;\n\n          while (xVals[fromIdx--] === xVals[index]) {}\n\n          fromIdx++;\n\n          let toIdx = fromIdx + data.yBucketCount!;\n\n          let maxCount = 0;\n\n          let i = fromIdx;\n          while (i < toIdx) {\n            let c = countVals[i];\n            maxCount = Math.max(maxCount, c);\n            i++;\n          }\n\n          let pHov = new Path2D();\n          let pRest = new Path2D();\n\n          i = fromIdx;\n          let j = 0;\n          while (i < toIdx) {\n            let c = countVals[i];\n\n            if (c > 0) {\n              let pctY = c / maxCount;\n              let pctX = j / (data.yBucketCount! + 1);\n\n              let p = i === index ? pHov : pRest;\n\n              p.rect(\n                Math.round(histCanWidth * pctX),\n                Math.round(histCanHeight * (1 - pctY)),\n                Math.round(histCanWidth / data.yBucketCount!),\n                Math.round(histCanHeight * pctY)\n              );\n            }\n\n            i++;\n            j++;\n          }\n\n          histCtx.clearRect(0, 0, histCanWidth, histCanHeight);\n\n          histCtx.fillStyle = '#ffffff80';\n          histCtx.fill(pRest);\n\n          histCtx.fillStyle = '#ff000080';\n          histCtx.fill(pHov);\n        }\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [index]\n  );\n\n  const [isSparse] = useState(\n    () => data.heatmap?.meta?.type === DataFrameType.HeatmapCells && !isHeatmapCellsDense(data.heatmap)\n  );\n\n  if (isSparse) {\n    return (\n      <div>\n        <DataHoverView data={data.heatmap} rowIndex={index} />\n      </div>\n    );\n  }\n\n  const renderYBucket = () => {\n    if (nonNumericOrdinalDisplay) {\n      return <div>Name: {nonNumericOrdinalDisplay}</div>;\n    }\n\n    switch (data.yLayout) {\n      case HeatmapCellLayout.unknown:\n        return <div>{yDisp(yBucketMin)}</div>;\n    }\n    return (\n      <div>\n        Bucket: {yDisp(yBucketMin)} - {yDisp(yBucketMax)}\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <div>\n        <div>{xDisp(xBucketMin)}</div>\n        {data.xLayout !== HeatmapCellLayout.unknown && <div>{xDisp(xBucketMax)}</div>}\n      </div>\n      {showHistogram && (\n        <canvas\n          width={histCanWidth}\n          height={histCanHeight}\n          ref={can}\n          style={{ width: histCanWidth + 'px', height: histCanHeight + 'px' }}\n        />\n      )}\n      <div>\n        {renderYBucket()}\n        <div>\n          {getFieldDisplayName(countField!, data.heatmap)}: {data.display!(count)}\n        </div>\n      </div>\n      {links.length > 0 && (\n        <VerticalGroup>\n          {links.map((link, i) => (\n            <LinkButton\n              key={i}\n              icon={'external-link-alt'}\n              target={link.target}\n              href={link.href}\n              onClick={link.onClick}\n              fill=\"text\"\n              style={{ width: '100%' }}\n            >\n              {link.title}\n            </LinkButton>\n          ))}\n        </VerticalGroup>\n      )}\n    </>\n  );\n};\n","import { MutableRefObject, RefObject } from 'react';\nimport uPlot, { Cursor } from 'uplot';\n\nimport {\n  DashboardCursorSync,\n  DataFrameType,\n  DataHoverClearEvent,\n  DataHoverEvent,\n  DataHoverPayload,\n  EventBus,\n  formattedValueToString,\n  getValueFormat,\n  GrafanaTheme2,\n  incrRoundDn,\n  incrRoundUp,\n  TimeRange,\n  FieldType,\n} from '@grafana/data';\nimport { AxisPlacement, ScaleDirection, ScaleDistribution, ScaleOrientation, HeatmapCellLayout } from '@grafana/schema';\nimport { UPlotConfigBuilder } from '@grafana/ui';\nimport { isHeatmapCellsDense, readHeatmapRowsCustomMeta } from 'app/features/transformers/calculateHeatmap/heatmap';\n\nimport { pointWithin, Quadtree, Rect } from '../barchart/quadtree';\n\nimport { HeatmapData } from './fields';\nimport { PanelFieldConfig, YAxisConfig } from './types';\n\ninterface PathbuilderOpts {\n  each: (u: uPlot, seriesIdx: number, dataIdx: number, lft: number, top: number, wid: number, hgt: number) => void;\n  gap?: number | null;\n  hideLE?: number;\n  hideGE?: number;\n  xAlign?: -1 | 0 | 1;\n  yAlign?: -1 | 0 | 1;\n  ySizeDivisor?: number;\n  disp: {\n    fill: {\n      values: (u: uPlot, seriesIndex: number) => number[];\n      index: Array<CanvasRenderingContext2D['fillStyle']>;\n    };\n  };\n}\n\ninterface PointsBuilderOpts {\n  each: (u: uPlot, seriesIdx: number, dataIdx: number, lft: number, top: number, wid: number, hgt: number) => void;\n}\n\nexport interface HeatmapHoverEvent {\n  seriesIdx: number;\n  dataIdx: number;\n  pageX: number;\n  pageY: number;\n}\n\nexport interface HeatmapZoomEvent {\n  xMin: number;\n  xMax: number;\n}\n\ninterface PrepConfigOpts {\n  dataRef: RefObject<HeatmapData>;\n  theme: GrafanaTheme2;\n  eventBus: EventBus;\n  onhover?: null | ((evt?: HeatmapHoverEvent | null) => void);\n  onclick?: null | ((evt?: Object) => void);\n  onzoom?: null | ((evt: HeatmapZoomEvent) => void);\n  isToolTipOpen: MutableRefObject<boolean>;\n  timeZone: string;\n  getTimeRange: () => TimeRange;\n  palette: string[];\n  exemplarColor: string;\n  cellGap?: number | null; // in css pixels\n  hideLE?: number;\n  hideGE?: number;\n  yAxisConfig: YAxisConfig;\n  ySizeDivisor?: number;\n  sync?: () => DashboardCursorSync;\n}\n\nexport function prepConfig(opts: PrepConfigOpts) {\n  const {\n    dataRef,\n    theme,\n    eventBus,\n    onhover,\n    onclick,\n    onzoom,\n    isToolTipOpen,\n    timeZone,\n    getTimeRange,\n    palette,\n    cellGap,\n    hideLE,\n    hideGE,\n    yAxisConfig,\n    ySizeDivisor,\n    sync,\n  } = opts;\n\n  const xScaleKey = 'x';\n  let xScaleUnit = 'time';\n  let isTime = true;\n\n  if (dataRef.current?.heatmap?.fields[0].type !== FieldType.time) {\n    xScaleUnit = dataRef.current?.heatmap?.fields[0].config?.unit ?? 'x';\n    isTime = false;\n  }\n\n  const pxRatio = devicePixelRatio;\n\n  let heatmapType = dataRef.current?.heatmap?.meta?.type;\n  const exemplarFillColor = theme.visualization.getColorByName(opts.exemplarColor);\n\n  let qt: Quadtree;\n  let hRect: Rect | null;\n\n  let builder = new UPlotConfigBuilder(timeZone);\n\n  let rect: DOMRect;\n\n  builder.addHook('init', (u) => {\n    u.root.querySelectorAll<HTMLElement>('.u-cursor-pt').forEach((el) => {\n      Object.assign(el.style, {\n        borderRadius: '0',\n        border: '1px solid white',\n        background: 'transparent',\n      });\n    });\n\n    onclick &&\n      u.over.addEventListener(\n        'mouseup',\n        (e) => {\n          // @ts-ignore\n          let isDragging: boolean = u.cursor.drag._x || u.cursor.drag._y;\n\n          if (!isDragging) {\n            onclick(e);\n          }\n        },\n        true\n      );\n  });\n\n  onzoom &&\n    builder.addHook('setSelect', (u) => {\n      onzoom({\n        xMin: u.posToVal(u.select.left, xScaleKey),\n        xMax: u.posToVal(u.select.left + u.select.width, xScaleKey),\n      });\n      u.setSelect({ left: 0, top: 0, width: 0, height: 0 }, false);\n    });\n\n  if (isTime) {\n    // this is a tmp hack because in mode: 2, uplot does not currently call scales.x.range() for setData() calls\n    // scales.x.range() typically reads back from drilled-down panelProps.timeRange via getTimeRange()\n    builder.addHook('setData', (u) => {\n      //let [min, max] = (u.scales!.x!.range! as uPlot.Range.Function)(u, 0, 100, xScaleKey);\n\n      let { min: xMin, max: xMax } = u.scales!.x;\n\n      let min = getTimeRange().from.valueOf();\n      let max = getTimeRange().to.valueOf();\n\n      if (xMin !== min || xMax !== max) {\n        queueMicrotask(() => {\n          u.setScale(xScaleKey, { min, max });\n        });\n      }\n    });\n  }\n\n  // rect of .u-over (grid area)\n  builder.addHook('syncRect', (u, r) => {\n    rect = r;\n  });\n\n  const payload: DataHoverPayload = {\n    point: {\n      [xScaleUnit]: null,\n    },\n    data: dataRef.current?.heatmap,\n  };\n  const hoverEvent = new DataHoverEvent(payload);\n\n  let pendingOnleave: ReturnType<typeof setTimeout> | 0;\n\n  onhover &&\n    builder.addHook('setLegend', (u) => {\n      if (u.cursor.idxs != null) {\n        for (let i = 0; i < u.cursor.idxs.length; i++) {\n          const sel = u.cursor.idxs[i];\n          if (sel != null) {\n            const { left, top } = u.cursor;\n            payload.rowIndex = sel;\n            payload.point[xScaleUnit] = u.posToVal(left!, xScaleKey);\n            eventBus.publish(hoverEvent);\n\n            if (!isToolTipOpen.current) {\n              if (pendingOnleave) {\n                clearTimeout(pendingOnleave);\n                pendingOnleave = 0;\n              }\n              onhover({\n                seriesIdx: i,\n                dataIdx: sel,\n                pageX: rect.left + left!,\n                pageY: rect.top + top!,\n              });\n            }\n            return;\n          }\n        }\n      }\n\n      if (!isToolTipOpen.current) {\n        // if tiles have gaps, reduce flashing / re-render (debounce onleave by 100ms)\n        if (!pendingOnleave) {\n          pendingOnleave = setTimeout(() => {\n            onhover(null);\n            payload.rowIndex = undefined;\n            payload.point[xScaleUnit] = null;\n            eventBus.publish(hoverEvent);\n          }, 100);\n        }\n      }\n    });\n\n  builder.addHook('drawClear', (u) => {\n    qt = qt || new Quadtree(0, 0, u.bbox.width, u.bbox.height);\n\n    qt.clear();\n\n    // force-clear the path cache to cause drawBars() to rebuild new quadtree\n    u.series.forEach((s, i) => {\n      if (i > 0) {\n        // @ts-ignore\n        s._paths = null;\n      }\n    });\n  });\n\n  builder.setMode(2);\n\n  builder.addScale({\n    scaleKey: xScaleKey,\n    isTime,\n    orientation: ScaleOrientation.Horizontal,\n    direction: ScaleDirection.Right,\n    // TODO: expand by x bucket size and layout\n    range: (u, dataMin, dataMax) => {\n      if (isTime) {\n        return [getTimeRange().from.valueOf(), getTimeRange().to.valueOf()];\n      } else {\n        if (dataRef.current?.xLayout === HeatmapCellLayout.le) {\n          return [dataMin - dataRef.current?.xBucketSize!, dataMax];\n        } else if (dataRef.current?.xLayout === HeatmapCellLayout.ge) {\n          return [dataMin, dataMax + dataRef.current?.xBucketSize!];\n        } else {\n          let offset = dataRef.current?.xBucketSize! / 2;\n\n          return [dataMin - offset, dataMax + offset];\n        }\n      }\n    },\n  });\n\n  let incrs;\n\n  if (!isTime) {\n    incrs = [];\n\n    for (let i = 0; i < 10; i++) {\n      incrs.push(i * dataRef.current?.xBucketSize!);\n    }\n  }\n\n  builder.addAxis({\n    scaleKey: xScaleKey,\n    placement: AxisPlacement.Bottom,\n    incrs,\n    isTime,\n    theme: theme,\n    timeZone,\n  });\n\n  const yField = dataRef.current?.heatmap?.fields[1]!;\n  if (!yField) {\n    return builder; // early abort (avoids error)\n  }\n\n  // eslint-ignore @typescript-eslint/no-explicit-any\n  const yFieldConfig = yField.config?.custom as PanelFieldConfig | undefined;\n  const yScale = yFieldConfig?.scaleDistribution ?? { type: ScaleDistribution.Linear };\n  const yAxisReverse = Boolean(yAxisConfig.reverse);\n  const isSparseHeatmap = heatmapType === DataFrameType.HeatmapCells && !isHeatmapCellsDense(dataRef.current?.heatmap!);\n  const shouldUseLogScale = yScale.type !== ScaleDistribution.Linear || isSparseHeatmap;\n  const isOrdinalY = readHeatmapRowsCustomMeta(dataRef.current?.heatmap).yOrdinalDisplay != null;\n\n  // random to prevent syncing y in other heatmaps\n  // TODO: try to match TimeSeries y keygen algo to sync with TimeSeries panels (when not isOrdinalY)\n  const yScaleKey = 'y_' + (Math.random() + 1).toString(36).substring(7);\n\n  builder.addScale({\n    scaleKey: yScaleKey,\n    isTime: false,\n    // distribution: ScaleDistribution.Ordinal, // does not work with facets/scatter yet\n    orientation: ScaleOrientation.Vertical,\n    direction: yAxisReverse ? ScaleDirection.Down : ScaleDirection.Up,\n    // should be tweakable manually\n    distribution: shouldUseLogScale ? ScaleDistribution.Log : ScaleDistribution.Linear,\n    log: yScale.log ?? 2,\n    range:\n      // sparse already accounts for le/ge by explicit yMin & yMax cell bounds, so no need to expand y range\n      isSparseHeatmap\n        ? (u, dataMin, dataMax) => {\n            let scaleMin: number | null, scaleMax: number | null;\n\n            [scaleMin, scaleMax] = shouldUseLogScale\n              ? uPlot.rangeLog(dataMin, dataMax, (yScale.log ?? 2) as unknown as uPlot.Scale.LogBase, true)\n              : [dataMin, dataMax];\n\n            if (shouldUseLogScale && !isOrdinalY) {\n              let yExp = u.scales[yScaleKey].log!;\n              let log = yExp === 2 ? Math.log2 : Math.log10;\n\n              let { min: explicitMin, max: explicitMax } = yAxisConfig;\n\n              // guard against <= 0\n              if (explicitMin != null && explicitMin > 0) {\n                // snap to magnitude\n                let minLog = log(explicitMin);\n                scaleMin = yExp ** incrRoundDn(minLog, 1);\n              }\n\n              if (explicitMax != null && explicitMax > 0) {\n                let maxLog = log(explicitMax);\n                scaleMax = yExp ** incrRoundUp(maxLog, 1);\n              }\n            }\n\n            return [scaleMin, scaleMax];\n          }\n        : // dense and ordinal only have one of yMin|yMax|y, so expand range by one cell in the direction of le/ge/unknown\n          (u, dataMin, dataMax) => {\n            let scaleMin = dataMin,\n              scaleMax = dataMax;\n\n            let { min: explicitMin, max: explicitMax } = yAxisConfig;\n\n            // logarithmic expansion\n            if (shouldUseLogScale) {\n              let yExp = u.scales[yScaleKey].log!;\n\n              let minExpanded = false;\n              let maxExpanded = false;\n\n              let log = yExp === 2 ? Math.log2 : Math.log10;\n\n              if (ySizeDivisor !== 1) {\n                let minLog = log(dataMin);\n                let maxLog = log(dataMax);\n\n                if (!Number.isInteger(minLog)) {\n                  scaleMin = yExp ** incrRoundDn(minLog, 1);\n                  minExpanded = true;\n                }\n\n                if (!Number.isInteger(maxLog)) {\n                  scaleMax = yExp ** incrRoundUp(maxLog, 1);\n                  maxExpanded = true;\n                }\n              }\n\n              if (dataRef.current?.yLayout === HeatmapCellLayout.le) {\n                if (!minExpanded) {\n                  scaleMin /= yExp;\n                }\n              } else if (dataRef.current?.yLayout === HeatmapCellLayout.ge) {\n                if (!maxExpanded) {\n                  scaleMax *= yExp;\n                }\n              } else {\n                scaleMin /= yExp / 2;\n                scaleMax *= yExp / 2;\n              }\n\n              if (!isOrdinalY) {\n                // guard against <= 0\n                if (explicitMin != null && explicitMin > 0) {\n                  // snap down to magnitude\n                  let minLog = log(explicitMin);\n                  scaleMin = yExp ** incrRoundDn(minLog, 1);\n                }\n\n                if (explicitMax != null && explicitMax > 0) {\n                  let maxLog = log(explicitMax);\n                  scaleMax = yExp ** incrRoundUp(maxLog, 1);\n                }\n              }\n            }\n            // linear expansion\n            else {\n              let bucketSize = dataRef.current?.yBucketSize;\n\n              if (bucketSize === 0) {\n                bucketSize = 1;\n              }\n\n              if (bucketSize) {\n                if (dataRef.current?.yLayout === HeatmapCellLayout.le) {\n                  scaleMin -= bucketSize!;\n                } else if (dataRef.current?.yLayout === HeatmapCellLayout.ge) {\n                  scaleMax += bucketSize!;\n                } else {\n                  scaleMin -= bucketSize! / 2;\n                  scaleMax += bucketSize! / 2;\n                }\n              } else {\n                // how to expand scale range if inferred non-regular or log buckets?\n              }\n\n              if (!isOrdinalY) {\n                scaleMin = explicitMin ?? scaleMin;\n                scaleMax = explicitMax ?? scaleMax;\n              }\n            }\n\n            return [scaleMin, scaleMax];\n          },\n  });\n\n  const dispY = yField.display ?? getValueFormat('short');\n\n  builder.addAxis({\n    scaleKey: yScaleKey,\n    show: yAxisConfig.axisPlacement !== AxisPlacement.Hidden,\n    placement: yAxisConfig.axisPlacement || AxisPlacement.Left,\n    size: yAxisConfig.axisWidth || null,\n    label: yAxisConfig.axisLabel,\n    theme: theme,\n    formatValue: (v, decimals) => formattedValueToString(dispY(v, decimals)),\n    splits: isOrdinalY\n      ? (self: uPlot) => {\n          const meta = readHeatmapRowsCustomMeta(dataRef.current?.heatmap);\n          if (!meta.yOrdinalDisplay) {\n            return [0, 1]; //?\n          }\n          let splits = meta.yOrdinalDisplay.map((v, idx) => idx);\n\n          switch (dataRef.current?.yLayout) {\n            case HeatmapCellLayout.le:\n              splits.unshift(-1);\n              break;\n            case HeatmapCellLayout.ge:\n              splits.push(splits.length);\n              break;\n          }\n\n          // Skip labels when the height is too small\n          if (self.height < 60) {\n            splits = [splits[0], splits[splits.length - 1]];\n          } else {\n            while (splits.length > 3 && (self.height - 15) / splits.length < 10) {\n              splits = splits.filter((v, idx) => idx % 2 === 0); // remove half the items\n            }\n          }\n          return splits;\n        }\n      : undefined,\n    values: isOrdinalY\n      ? (self: uPlot, splits) => {\n          const meta = readHeatmapRowsCustomMeta(dataRef.current?.heatmap);\n          if (meta.yOrdinalDisplay) {\n            return splits.map((v) =>\n              v < 0\n                ? meta.yMinDisplay ?? '' // Check prometheus style labels\n                : meta.yOrdinalDisplay[v] ?? ''\n            );\n          }\n          return splits;\n        }\n      : undefined,\n  });\n\n  const pathBuilder = isSparseHeatmap ? heatmapPathsSparse : heatmapPathsDense;\n\n  // heatmap layer\n  builder.addSeries({\n    facets: [\n      {\n        scale: xScaleKey,\n        auto: true,\n        sorted: 1,\n      },\n      {\n        scale: yScaleKey,\n        auto: true,\n      },\n    ],\n    pathBuilder: pathBuilder({\n      each: (u, seriesIdx, dataIdx, x, y, xSize, ySize) => {\n        qt.add({\n          x: x - u.bbox.left,\n          y: y - u.bbox.top,\n          w: xSize,\n          h: ySize,\n          sidx: seriesIdx,\n          didx: dataIdx,\n        });\n      },\n      gap: cellGap,\n      hideLE,\n      hideGE,\n      xAlign:\n        dataRef.current?.xLayout === HeatmapCellLayout.le\n          ? -1\n          : dataRef.current?.xLayout === HeatmapCellLayout.ge\n          ? 1\n          : 0,\n      yAlign: ((dataRef.current?.yLayout === HeatmapCellLayout.le\n        ? -1\n        : dataRef.current?.yLayout === HeatmapCellLayout.ge\n        ? 1\n        : 0) * (yAxisReverse ? -1 : 1)) as -1 | 0 | 1,\n      ySizeDivisor,\n      disp: {\n        fill: {\n          values: (u, seriesIdx) => {\n            let countFacetIdx = !isSparseHeatmap ? 2 : 3;\n            return valuesToFills(\n              u.data[seriesIdx][countFacetIdx] as unknown as number[],\n              palette,\n              dataRef.current?.minValue!,\n              dataRef.current?.maxValue!\n            );\n          },\n          index: palette,\n        },\n      },\n    }),\n    theme,\n    scaleKey: '', // facets' scales used (above)\n  });\n\n  // exemplars layer\n  builder.addSeries({\n    facets: [\n      {\n        scale: xScaleKey,\n        auto: true,\n        sorted: 1,\n      },\n      {\n        scale: yScaleKey,\n        auto: true,\n      },\n    ],\n    pathBuilder: heatmapPathsPoints(\n      {\n        each: (u, seriesIdx, dataIdx, x, y, xSize, ySize) => {\n          qt.add({\n            x: x - u.bbox.left,\n            y: y - u.bbox.top,\n            w: xSize,\n            h: ySize,\n            sidx: seriesIdx,\n            didx: dataIdx,\n          });\n        },\n      },\n      exemplarFillColor\n    ),\n    theme,\n    scaleKey: '', // facets' scales used (above)\n  });\n\n  const cursor: Cursor = {\n    drag: {\n      x: true,\n      y: false,\n      setScale: false,\n    },\n    dataIdx: (u, seriesIdx) => {\n      if (seriesIdx === 1) {\n        hRect = null;\n\n        let cx = u.cursor.left! * pxRatio;\n        let cy = u.cursor.top! * pxRatio;\n\n        qt.get(cx, cy, 1, 1, (o) => {\n          if (pointWithin(cx, cy, o.x, o.y, o.x + o.w, o.y + o.h)) {\n            hRect = o;\n          }\n        });\n      }\n\n      return hRect && seriesIdx === hRect.sidx ? hRect.didx : null;\n    },\n    points: {\n      fill: 'rgba(255,255,255, 0.3)',\n      bbox: (u, seriesIdx) => {\n        let isHovered = hRect && seriesIdx === hRect.sidx;\n\n        return {\n          left: isHovered ? hRect!.x / pxRatio : -10,\n          top: isHovered ? hRect!.y / pxRatio : -10,\n          width: isHovered ? hRect!.w / pxRatio : 0,\n          height: isHovered ? hRect!.h / pxRatio : 0,\n        };\n      },\n    },\n  };\n\n  if (sync && sync() !== DashboardCursorSync.Off) {\n    cursor.sync = {\n      key: '__global_',\n      scales: [xScaleKey, yScaleKey],\n      filters: {\n        pub: (type: string, src: uPlot, x: number, y: number, w: number, h: number, dataIdx: number) => {\n          if (x < 0) {\n            payload.point[xScaleUnit] = null;\n            eventBus.publish(new DataHoverClearEvent());\n          } else {\n            payload.point[xScaleUnit] = src.posToVal(x, xScaleKey);\n            eventBus.publish(hoverEvent);\n          }\n\n          return true;\n        },\n      },\n    };\n\n    builder.setSync();\n  }\n\n  builder.setCursor(cursor);\n\n  return builder;\n}\n\nconst CRISP_EDGES_GAP_MIN = 4;\n\nexport function heatmapPathsDense(opts: PathbuilderOpts) {\n  const { disp, each, gap = 1, hideLE = -Infinity, hideGE = Infinity, xAlign = 1, yAlign = 1, ySizeDivisor = 1 } = opts;\n\n  const pxRatio = devicePixelRatio;\n\n  const round = gap! >= CRISP_EDGES_GAP_MIN ? Math.round : (v: number) => v;\n\n  const cellGap = Math.round(gap! * pxRatio);\n\n  return (u: uPlot, seriesIdx: number) => {\n    uPlot.orient(\n      u,\n      seriesIdx,\n      (\n        series,\n        dataX,\n        dataY,\n        scaleX,\n        scaleY,\n        valToPosX,\n        valToPosY,\n        xOff,\n        yOff,\n        xDim,\n        yDim,\n        moveTo,\n        lineTo,\n        rect,\n        arc\n      ) => {\n        let d = u.data[seriesIdx];\n        const xs = d[0] as unknown as number[];\n        const ys = d[1] as unknown as number[];\n        const counts = d[2] as unknown as number[];\n        const dlen = xs.length;\n\n        // fill colors are mapped from interpolating densities / counts along some gradient\n        // (should be quantized to 64 colors/levels max. e.g. 16)\n        let fills = disp.fill.values(u, seriesIdx);\n        let fillPalette = disp.fill.index ?? [...new Set(fills)];\n\n        let fillPaths = fillPalette.map((color) => new Path2D());\n\n        // detect x and y bin qtys by detecting layout repetition in x & y data\n        let yBinQty = dlen - ys.lastIndexOf(ys[0]);\n        let xBinQty = dlen / yBinQty;\n        let yBinIncr = ys[1] - ys[0] || scaleY.max! - scaleY.min!;\n        let xBinIncr = xs[yBinQty] - xs[0];\n\n        // uniform tile sizes based on zoom level\n        let xSize: number;\n        let ySize: number;\n\n        if (scaleX.distr === 3) {\n          xSize = Math.abs(valToPosX(xs[0] * scaleX.log!, scaleX, xDim, xOff) - valToPosX(xs[0], scaleX, xDim, xOff));\n        } else {\n          xSize = Math.abs(valToPosX(xBinIncr, scaleX, xDim, xOff) - valToPosX(0, scaleX, xDim, xOff));\n        }\n\n        if (scaleY.distr === 3) {\n          ySize =\n            Math.abs(valToPosY(ys[0] * scaleY.log!, scaleY, yDim, yOff) - valToPosY(ys[0], scaleY, yDim, yOff)) /\n            ySizeDivisor;\n        } else {\n          ySize = Math.abs(valToPosY(yBinIncr, scaleY, yDim, yOff) - valToPosY(0, scaleY, yDim, yOff)) / ySizeDivisor;\n        }\n\n        // clamp min tile size to 1px\n        xSize = Math.max(1, round(xSize - cellGap));\n        ySize = Math.max(1, round(ySize - cellGap));\n\n        // bucket agg direction\n        // let xCeil = false;\n        // let yCeil = false;\n\n        let xOffset = xAlign === -1 ? -xSize : xAlign === 0 ? -xSize / 2 : 0;\n        let yOffset = yAlign === 1 ? -ySize : yAlign === 0 ? -ySize / 2 : 0;\n\n        // pre-compute x and y offsets\n        let cys = ys.slice(0, yBinQty).map((y) => round(valToPosY(y, scaleY, yDim, yOff) + yOffset));\n        let cxs = Array.from({ length: xBinQty }, (v, i) =>\n          round(valToPosX(xs[i * yBinQty], scaleX, xDim, xOff) + xOffset)\n        );\n\n        for (let i = 0; i < dlen; i++) {\n          if (counts[i] > hideLE && counts[i] < hideGE) {\n            let cx = cxs[~~(i / yBinQty)];\n            let cy = cys[i % yBinQty];\n\n            let fillPath = fillPaths[fills[i]];\n\n            rect(fillPath, cx, cy, xSize, ySize);\n\n            each(u, 1, i, cx, cy, xSize, ySize);\n          }\n        }\n\n        u.ctx.save();\n        //\tu.ctx.globalAlpha = 0.8;\n        u.ctx.rect(u.bbox.left, u.bbox.top, u.bbox.width, u.bbox.height);\n        u.ctx.clip();\n        fillPaths.forEach((p, i) => {\n          u.ctx.fillStyle = fillPalette[i];\n          u.ctx.fill(p);\n        });\n        u.ctx.restore();\n\n        return null;\n      }\n    );\n\n    return null;\n  };\n}\n\nexport function heatmapPathsPoints(opts: PointsBuilderOpts, exemplarColor: string) {\n  return (u: uPlot, seriesIdx: number) => {\n    uPlot.orient(\n      u,\n      seriesIdx,\n      (\n        series,\n        dataX,\n        dataY,\n        scaleX,\n        scaleY,\n        valToPosX,\n        valToPosY,\n        xOff,\n        yOff,\n        xDim,\n        yDim,\n        moveTo,\n        lineTo,\n        rect,\n        arc\n      ) => {\n        //console.time('heatmapPathsSparse');\n\n        let points = new Path2D();\n        let fillPaths = [points];\n        let fillPalette = [exemplarColor ?? 'rgba(255,0,255,0.7)'];\n\n        for (let i = 0; i < dataX.length; i++) {\n          let yVal = dataY[i]!;\n          yVal -= 0.5; // center vertically in bucket (when tiles are le)\n          // y-randomize vertically to distribute exemplars in same bucket at same time\n          let randSign = Math.round(Math.random()) * 2 - 1;\n          yVal += randSign * 0.5 * Math.random();\n\n          let x = valToPosX(dataX[i], scaleX, xDim, xOff);\n          let y = valToPosY(yVal, scaleY, yDim, yOff);\n          let w = 8;\n          let h = 8;\n\n          rect(points, x - w / 2, y - h / 2, w, h);\n\n          opts.each(u, seriesIdx, i, x - w / 2, y - h / 2, w, h);\n        }\n\n        u.ctx.save();\n        u.ctx.rect(u.bbox.left, u.bbox.top, u.bbox.width, u.bbox.height);\n        u.ctx.clip();\n        fillPaths.forEach((p, i) => {\n          u.ctx.fillStyle = fillPalette[i];\n          u.ctx.fill(p);\n        });\n        u.ctx.restore();\n      }\n    );\n\n    return null;\n  };\n}\n// accepts xMax, yMin, yMax, count\n// xbinsize? x tile sizes are uniform?\nexport function heatmapPathsSparse(opts: PathbuilderOpts) {\n  const { disp, each, gap = 1, hideLE = -Infinity, hideGE = Infinity } = opts;\n\n  const pxRatio = devicePixelRatio;\n\n  const round = gap! >= CRISP_EDGES_GAP_MIN ? Math.round : (v: number) => v;\n\n  const cellGap = Math.round(gap! * pxRatio);\n\n  return (u: uPlot, seriesIdx: number) => {\n    uPlot.orient(\n      u,\n      seriesIdx,\n      (\n        series,\n        dataX,\n        dataY,\n        scaleX,\n        scaleY,\n        valToPosX,\n        valToPosY,\n        xOff,\n        yOff,\n        xDim,\n        yDim,\n        moveTo,\n        lineTo,\n        rect,\n        arc\n      ) => {\n        //console.time('heatmapPathsSparse');\n\n        let d = u.data[seriesIdx];\n        const xMaxs = d[0] as unknown as number[]; // xMax, do we get interval?\n        const yMins = d[1] as unknown as number[];\n        const yMaxs = d[2] as unknown as number[];\n        const counts = d[3] as unknown as number[];\n        const dlen = xMaxs.length;\n\n        // fill colors are mapped from interpolating densities / counts along some gradient\n        // (should be quantized to 64 colors/levels max. e.g. 16)\n        let fills = disp.fill.values(u, seriesIdx);\n        let fillPalette = disp.fill.index ?? [...new Set(fills)];\n\n        let fillPaths = fillPalette.map((color) => new Path2D());\n\n        // cache all tile bounds\n        let xOffs = new Map();\n        let yOffs = new Map();\n\n        for (let i = 0; i < xMaxs.length; i++) {\n          let xMax = xMaxs[i];\n          let yMin = yMins[i];\n          let yMax = yMaxs[i];\n\n          if (!xOffs.has(xMax)) {\n            xOffs.set(xMax, round(valToPosX(xMax, scaleX, xDim, xOff)));\n          }\n\n          if (!yOffs.has(yMin)) {\n            yOffs.set(yMin, round(valToPosY(yMin, scaleY, yDim, yOff)));\n          }\n\n          if (!yOffs.has(yMax)) {\n            yOffs.set(yMax, round(valToPosY(yMax, scaleY, yDim, yOff)));\n          }\n        }\n\n        // uniform x size (interval, step)\n        let xSizeUniform = xOffs.get(xMaxs.find((v) => v !== xMaxs[0])) - xOffs.get(xMaxs[0]);\n\n        for (let i = 0; i < dlen; i++) {\n          if (counts[i] <= hideLE || counts[i] >= hideGE) {\n            continue;\n          }\n\n          let xMax = xMaxs[i];\n          let yMin = yMins[i];\n          let yMax = yMaxs[i];\n\n          let xMaxPx = xOffs.get(xMax); // xSize is from interval, or inferred delta?\n          let yMinPx = yOffs.get(yMin);\n          let yMaxPx = yOffs.get(yMax);\n\n          let xSize = xSizeUniform;\n          let ySize = yMinPx - yMaxPx;\n\n          // clamp min tile size to 1px\n          xSize = Math.max(1, xSize - cellGap);\n          ySize = Math.max(1, ySize - cellGap);\n\n          let x = xMaxPx;\n          let y = yMinPx;\n\n          let fillPath = fillPaths[fills[i]];\n\n          rect(fillPath, x, y, xSize, ySize);\n\n          each(u, 1, i, x, y, xSize, ySize);\n        }\n\n        u.ctx.save();\n        //\tu.ctx.globalAlpha = 0.8;\n        u.ctx.rect(u.bbox.left, u.bbox.top, u.bbox.width, u.bbox.height);\n        u.ctx.clip();\n        fillPaths.forEach((p, i) => {\n          u.ctx.fillStyle = fillPalette[i];\n          u.ctx.fill(p);\n        });\n        u.ctx.restore();\n\n        //console.timeEnd('heatmapPathsSparse');\n      }\n    );\n\n    return null;\n  };\n}\n\nexport const boundedMinMax = (\n  values: number[],\n  minValue?: number,\n  maxValue?: number,\n  hideLE = -Infinity,\n  hideGE = Infinity\n) => {\n  if (minValue == null) {\n    minValue = Infinity;\n\n    for (let i = 0; i < values.length; i++) {\n      if (values[i] > hideLE && values[i] < hideGE) {\n        minValue = Math.min(minValue, values[i]);\n      }\n    }\n  }\n\n  if (maxValue == null) {\n    maxValue = -Infinity;\n\n    for (let i = 0; i < values.length; i++) {\n      if (values[i] > hideLE && values[i] < hideGE) {\n        maxValue = Math.max(maxValue, values[i]);\n      }\n    }\n  }\n\n  return [minValue, maxValue];\n};\n\nexport const valuesToFills = (values: number[], palette: string[], minValue: number, maxValue: number) => {\n  let range = Math.max(maxValue - minValue, 1);\n\n  let paletteSize = palette.length;\n\n  let indexedFills = Array(values.length);\n\n  for (let i = 0; i < values.length; i++) {\n    indexedFills[i] =\n      values[i] < minValue\n        ? 0\n        : values[i] > maxValue\n        ? paletteSize - 1\n        : Math.min(paletteSize - 1, Math.floor((paletteSize * (values[i] - minValue)) / range));\n  }\n\n  return indexedFills;\n};\n","import {\n  DataFrame,\n  DataFrameType,\n  Field,\n  FieldType,\n  formattedValueToString,\n  getDisplayProcessor,\n  GrafanaTheme2,\n  LinkModel,\n  outerJoinDataFrames,\n  PanelData,\n  ValueFormatter,\n  ValueLinkConfig,\n} from '@grafana/data';\nimport { HeatmapCellLayout } from '@grafana/schema';\nimport {\n  calculateHeatmapFromData,\n  isHeatmapCellsDense,\n  readHeatmapRowsCustomMeta,\n  rowsToCellsHeatmap,\n} from 'app/features/transformers/calculateHeatmap/heatmap';\nimport { parseSampleValue, sortSeriesByLabel } from 'app/plugins/datasource/prometheus/result_transformer';\n\nimport { CellValues, PanelOptions } from './types';\nimport { boundedMinMax } from './utils';\n\nexport interface HeatmapData {\n  heatmap?: DataFrame; // data we will render\n  exemplars?: DataFrame; // optionally linked exemplars\n  exemplarColor?: string;\n\n  xBucketSize?: number;\n  yBucketSize?: number;\n\n  xBucketCount?: number;\n  yBucketCount?: number;\n\n  xLayout?: HeatmapCellLayout;\n  yLayout?: HeatmapCellLayout;\n\n  xLog?: number;\n  yLog?: number;\n\n  xLogSplit?: number;\n  yLogSplit?: number;\n\n  // color scale range\n  minValue?: number;\n  maxValue?: number;\n\n  // Print a heatmap cell value\n  display?: (v: number) => string;\n\n  // Errors\n  warning?: string;\n}\n\nexport function prepareHeatmapData(\n  data: PanelData,\n  options: PanelOptions,\n  theme: GrafanaTheme2,\n  getFieldLinks?: (exemplars: DataFrame, field: Field) => (config: ValueLinkConfig) => Array<LinkModel<Field>>\n): HeatmapData {\n  let frames = data.series;\n  if (!frames?.length) {\n    return {};\n  }\n\n  const exemplars = data.annotations?.find((f) => f.name === 'exemplar');\n\n  if (getFieldLinks) {\n    exemplars?.fields.forEach((field, index) => {\n      exemplars.fields[index].getLinks = getFieldLinks(exemplars, field);\n    });\n  }\n\n  if (options.calculate) {\n    return getDenseHeatmapData(calculateHeatmapFromData(frames, options.calculation ?? {}), exemplars, options, theme);\n  }\n\n  // Check for known heatmap types\n  let rowsHeatmap: DataFrame | undefined = undefined;\n  for (const frame of frames) {\n    switch (frame.meta?.type) {\n      case DataFrameType.HeatmapCells:\n        return isHeatmapCellsDense(frame)\n          ? getDenseHeatmapData(frame, exemplars, options, theme)\n          : getSparseHeatmapData(frame, exemplars, options, theme);\n\n      case DataFrameType.HeatmapRows:\n        rowsHeatmap = frame; // the default format\n    }\n  }\n\n  // Everything past here assumes a field for each row in the heatmap (buckets)\n  if (!rowsHeatmap) {\n    if (frames.length > 1) {\n      let allNamesNumeric = frames.every(\n        (frame) => !Number.isNaN(parseSampleValue(frame.name ?? frame.fields[1].name))\n      );\n\n      if (allNamesNumeric) {\n        frames.sort(sortSeriesByLabel);\n      }\n\n      rowsHeatmap = [\n        outerJoinDataFrames({\n          frames,\n        })!,\n      ][0];\n    } else {\n      rowsHeatmap = frames[0];\n    }\n  }\n\n  return getDenseHeatmapData(\n    rowsToCellsHeatmap({\n      unit: options.yAxis?.unit, // used to format the ordinal lookup values\n      decimals: options.yAxis?.decimals,\n      ...options.rowsFrame,\n      frame: rowsHeatmap,\n    }),\n    exemplars,\n    options,\n    theme\n  );\n}\n\nconst getSparseHeatmapData = (\n  frame: DataFrame,\n  exemplars: DataFrame | undefined,\n  options: PanelOptions,\n  theme: GrafanaTheme2\n): HeatmapData => {\n  if (frame.meta?.type !== DataFrameType.HeatmapCells || isHeatmapCellsDense(frame)) {\n    return {\n      warning: 'Expected sparse heatmap format',\n      heatmap: frame,\n    };\n  }\n\n  // y axis tick label display\n  updateFieldDisplay(frame.fields[1], options.yAxis, theme);\n\n  // cell value display\n  const disp = updateFieldDisplay(frame.fields[3], options.cellValues, theme);\n\n  let [minValue, maxValue] = boundedMinMax(\n    frame.fields[3].values.toArray(),\n    options.color.min,\n    options.color.max,\n    options.filterValues?.le,\n    options.filterValues?.ge\n  );\n\n  return {\n    heatmap: frame,\n    minValue,\n    maxValue,\n    exemplars,\n    display: (v) => formattedValueToString(disp(v)),\n  };\n};\n\nconst getDenseHeatmapData = (\n  frame: DataFrame,\n  exemplars: DataFrame | undefined,\n  options: PanelOptions,\n  theme: GrafanaTheme2\n): HeatmapData => {\n  if (frame.meta?.type !== DataFrameType.HeatmapCells) {\n    return {\n      warning: 'Expected heatmap scanlines format',\n      heatmap: frame,\n    };\n  }\n\n  if (frame.fields.length < 2 || frame.length < 2) {\n    return { heatmap: frame };\n  }\n\n  const meta = readHeatmapRowsCustomMeta(frame);\n  let xName: string | undefined = undefined;\n  let yName: string | undefined = undefined;\n  let valueField: Field | undefined = undefined;\n\n  // validate field display properties\n  for (const field of frame.fields) {\n    switch (field.name) {\n      case 'y':\n        yName = field.name;\n\n      case 'yMin':\n      case 'yMax': {\n        if (!yName) {\n          yName = field.name;\n        }\n        if (meta.yOrdinalDisplay == null) {\n          updateFieldDisplay(field, options.yAxis, theme);\n        }\n        break;\n      }\n\n      case 'x':\n      case 'xMin':\n      case 'xMax':\n        xName = field.name;\n        break;\n\n      default: {\n        if (field.type === FieldType.number && !valueField) {\n          valueField = field;\n        }\n      }\n    }\n  }\n\n  if (!yName) {\n    return { warning: 'Missing Y field', heatmap: frame };\n  }\n  if (!yName) {\n    return { warning: 'Missing X field', heatmap: frame };\n  }\n  if (!valueField) {\n    return { warning: 'Missing value field', heatmap: frame };\n  }\n\n  const disp = updateFieldDisplay(valueField, options.cellValues, theme);\n\n  // infer bucket sizes from data (for now)\n  // the 'heatmap-scanlines' dense frame format looks like:\n  // x:      1,1,1,1,2,2,2,2\n  // y:      3,4,5,6,3,4,5,6\n  // count:  0,0,0,7,0,3,0,1\n\n  const xs = frame.fields[0].values.toArray();\n  const ys = frame.fields[1].values.toArray();\n  const dlen = xs.length;\n\n  // below is literally copy/paste from the pathBuilder code in utils.ts\n  // detect x and y bin qtys by detecting layout repetition in x & y data\n  let yBinQty = dlen - ys.lastIndexOf(ys[0]);\n  let xBinQty = dlen / yBinQty;\n  let yBinIncr = ys[1] - ys[0];\n  let xBinIncr = xs[yBinQty] - xs[0];\n\n  let [minValue, maxValue] = boundedMinMax(\n    valueField.values.toArray(),\n    options.color.min,\n    options.color.max,\n    options.filterValues?.le,\n    options.filterValues?.ge\n  );\n\n  let calcX = options.calculation?.xBuckets;\n  let calcY = options.calculation?.yBuckets;\n\n  const data: HeatmapData = {\n    heatmap: frame,\n    exemplars: exemplars?.length ? exemplars : undefined,\n    xBucketSize: xBinIncr,\n    yBucketSize: yBinIncr,\n    xBucketCount: xBinQty,\n    yBucketCount: yBinQty,\n\n    yLog: calcY?.scale?.log ?? 0,\n    xLog: calcX?.scale?.log ?? 0,\n\n    xLogSplit: calcX?.scale?.log ? +(calcX?.value ?? '1') : 1,\n    yLogSplit: calcY?.scale?.log ? +(calcY?.value ?? '1') : 1,\n\n    minValue,\n    maxValue,\n\n    // TODO: improve heuristic\n    xLayout:\n      xName === 'xMax' ? HeatmapCellLayout.le : xName === 'xMin' ? HeatmapCellLayout.ge : HeatmapCellLayout.unknown,\n    yLayout:\n      yName === 'yMax' ? HeatmapCellLayout.le : yName === 'yMin' ? HeatmapCellLayout.ge : HeatmapCellLayout.unknown,\n\n    display: (v) => formattedValueToString(disp(v)),\n  };\n\n  return data;\n};\n\nfunction updateFieldDisplay(field: Field, opts: CellValues | undefined, theme: GrafanaTheme2): ValueFormatter {\n  if (opts?.unit?.length || opts?.decimals != null) {\n    const { unit, decimals } = opts;\n    field.display = undefined;\n    field.config = { ...field.config };\n    if (unit?.length) {\n      field.config.unit = unit;\n    }\n    if (decimals != null) {\n      field.config.decimals = decimals;\n    }\n  }\n  if (!field.display) {\n    field.display = getDisplayProcessor({ field, theme });\n  }\n  return field.display;\n}\n","// Code generated - EDITING IS FUTILE. DO NOT EDIT.\n//\n// Generated by:\n//     public/app/plugins/gen.go\n// Using jennies:\n//     TSTypesJenny\n//     PluginTSTypesJenny\n//\n// Run 'make gen-cue' from repository root to regenerate.\n\nimport * as ui from '@grafana/schema';\n\nexport const PanelCfgModelVersion = Object.freeze([0, 0]);\n\n/**\n * Controls the color mode of the heatmap\n */\nexport enum HeatmapColorMode {\n  Opacity = 'opacity',\n  Scheme = 'scheme',\n}\n\n/**\n * Controls the color scale of the heatmap\n */\nexport enum HeatmapColorScale {\n  Exponential = 'exponential',\n  Linear = 'linear',\n}\n\n/**\n * Controls various color options\n */\nexport interface HeatmapColorOptions {\n  /**\n   * Controls the exponent when scale is set to exponential\n   */\n  exponent: number;\n  /**\n   * Controls the color fill when in opacity mode\n   */\n  fill: string;\n  /**\n   * Sets the maximum value for the color scale\n   */\n  max?: number;\n  /**\n   * Sets the minimum value for the color scale\n   */\n  min?: number;\n  /**\n   * Sets the color mode\n   */\n  mode?: HeatmapColorMode;\n  /**\n   * Reverses the color scheme\n   */\n  reverse: boolean;\n  /**\n   * Controls the color scale\n   */\n  scale?: HeatmapColorScale;\n  /**\n   * Controls the color scheme used\n   */\n  scheme: string;\n  /**\n   * Controls the number of color steps\n   */\n  steps: number;\n}\n\n/**\n * Configuration options for the yAxis\n */\nexport interface YAxisConfig extends ui.AxisConfig {\n  /**\n   * Controls the number of decimals for yAxis values\n   */\n  decimals?: number;\n  /**\n   * Sets the maximum value for the yAxis\n   */\n  max?: number;\n  /**\n   * Sets the minimum value for the yAxis\n   */\n  min?: number;\n  /**\n   * Reverses the yAxis\n   */\n  reverse?: boolean;\n  /**\n   * Sets the yAxis unit\n   */\n  unit?: string;\n}\n\n/**\n * Controls cell value options\n */\nexport interface CellValues {\n  /**\n   * Controls the number of decimals for cell values\n   */\n  decimals?: number;\n  /**\n   * Controls the cell value unit\n   */\n  unit?: string;\n}\n\n/**\n * Controls the value filter range\n */\nexport interface FilterValueRange {\n  /**\n   * Sets the filter range to values greater than or equal to the given value\n   */\n  ge?: number;\n  /**\n   * Sets the filter range to values less than or equal to the given value\n   */\n  le?: number;\n}\n\n/**\n * Controls tooltip options\n */\nexport interface HeatmapTooltip {\n  /**\n   * Controls if the tooltip is shown\n   */\n  show: boolean;\n  /**\n   * Controls if the tooltip shows a histogram of the y-axis values\n   */\n  yHistogram?: boolean;\n}\n\n/**\n * Controls legend options\n */\nexport interface HeatmapLegend {\n  /**\n   * Controls if the legend is shown\n   */\n  show: boolean;\n}\n\n/**\n * Controls exemplar options\n */\nexport interface ExemplarConfig {\n  /**\n   * Sets the color of the exemplar markers\n   */\n  color: string;\n}\n\n/**\n * Controls frame rows options\n */\nexport interface RowsHeatmapOptions {\n  /**\n   * Controls tick alignment when not calculating from data\n   */\n  layout?: ui.HeatmapCellLayout;\n  /**\n   * Sets the name of the cell when not calculating from data\n   */\n  value?: string;\n}\n\nexport interface PanelOptions {\n  /**\n   * Controls if the heatmap should be calculated from data\n   */\n  calculate?: boolean;\n  /**\n   * Calculation options for the heatmap\n   */\n  calculation?: ui.HeatmapCalculationOptions;\n  /**\n   * Controls gap between cells\n   */\n  cellGap?: number;\n  /**\n   * Controls cell radius\n   */\n  cellRadius?: number;\n  /**\n   * Controls cell value unit\n   */\n  cellValues?: CellValues;\n  /**\n   * Controls the color options\n   */\n  color: HeatmapColorOptions;\n  /**\n   * Controls exemplar options\n   */\n  exemplars: ExemplarConfig;\n  /**\n   * Filters values between a given range\n   */\n  filterValues?: FilterValueRange;\n  /**\n   * | *{\n   * \taxisPlacement: ui.AxisPlacement & \"left\" // TODO: fix after remove when https://github.com/grafana/cuetsy/issues/74 is fixed\n   * }\n   * Controls legend options\n   */\n  legend: HeatmapLegend;\n  /**\n   * Controls tick alignment and value name when not calculating from data\n   */\n  rowsFrame?: RowsHeatmapOptions;\n  /**\n   * | *{\n   * \tlayout: ui.HeatmapCellLayout & \"auto\" // TODO: fix after remove when https://github.com/grafana/cuetsy/issues/74 is fixed\n   * }\n   * Controls the display of the value in the cell\n   */\n  showValue: ui.VisibilityMode;\n  /**\n   * Controls tooltip options\n   */\n  tooltip: HeatmapTooltip;\n  /**\n   * Controls yAxis placement\n   */\n  yAxis: YAxisConfig;\n}\n\nexport const defaultPanelOptions: Partial<PanelOptions> = {\n  calculate: false,\n  cellGap: 1,\n  cellValues: {},\n  color: {\n    /**\n     * mode:     HeatmapColorMode // TODO: fix after remove when https://github.com/grafana/cuetsy/issues/74 is fixed\n     */\n    scheme: 'Oranges',\n    fill: 'dark-orange',\n    /**\n     * scale:    HeatmapColorScale // TODO: fix after remove when https://github.com/grafana/cuetsy/issues/74 is fixed\n     */\n    reverse: false,\n    exponent: 0.5,\n    steps: 64,\n  },\n  exemplars: {\n    color: 'rgba(255,0,255,0.7)',\n  },\n  filterValues: {\n    le: 1e-09,\n  },\n  legend: {\n    show: true,\n  },\n  showValue: ui.VisibilityMode.Auto,\n  tooltip: {\n    show: true,\n    yHistogram: false,\n  },\n};\n\nexport interface PanelFieldConfig extends ui.HideableFieldConfig {\n  scaleDistribution?: ui.ScaleDistributionConfig;\n}\n","export * from './panelcfg.gen';\n\nimport { AxisPlacement, HeatmapCellLayout } from '@grafana/schema';\n\nimport {\n  defaultPanelOptions as defaultPanelOptionsGen,\n  HeatmapColorMode,\n  HeatmapColorScale,\n  PanelOptions,\n} from './panelcfg.gen';\n\nexport const defaultPanelOptions = {\n  ...defaultPanelOptionsGen,\n  color: { ...defaultPanelOptionsGen.color, mode: HeatmapColorMode.Scheme, scale: HeatmapColorScale.Exponential },\n  yAxis: { ...defaultPanelOptionsGen.yAxis, axisPlacement: AxisPlacement.Left },\n  rowsFrame: { ...defaultPanelOptionsGen.rowsFrame, layout: HeatmapCellLayout.auto },\n} as PanelOptions;\n","import * as d3 from 'd3';\nimport * as d3ScaleChromatic from 'd3-scale-chromatic';\nimport tinycolor from 'tinycolor2';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport { HeatmapColorOptions, defaultPanelOptions, HeatmapColorMode, HeatmapColorScale } from './types';\n\n// https://observablehq.com/@d3/color-schemes?collection=@d3/d3-scale-chromatic\n\n// the previous heatmap panel used d3 deps and some code to interpolate to static 9-color palettes. here we just hard-code them for clarity.\n// if the need arises for configurable-sized palettes, we can bring back the deps & variable interpolation (see simplified code at end)\n\n// Schemes from d3-scale-chromatic\n// https://github.com/d3/d3-scale-chromatic\nexport const colorSchemes = [\n  // Diverging\n  { name: 'BrBG', invert: 'always' },\n  { name: 'PiYG', invert: 'always' },\n  { name: 'PRGn', invert: 'always' },\n  { name: 'PuOr', invert: 'always' },\n  { name: 'RdBu', invert: 'always' },\n  { name: 'RdGy', invert: 'always' },\n  { name: 'RdYlBu', invert: 'always' },\n  { name: 'RdYlGn', invert: 'always' },\n  { name: 'Spectral', invert: 'always' },\n\n  // Sequential (Single Hue)\n  { name: 'Blues', invert: 'dark' },\n  { name: 'Greens', invert: 'dark' },\n  { name: 'Greys', invert: 'dark' },\n  { name: 'Oranges', invert: 'dark' },\n  { name: 'Purples', invert: 'dark' },\n  { name: 'Reds', invert: 'dark' },\n\n  // Sequential (Multi-Hue)\n  { name: 'Turbo', invert: 'light' },\n  { name: 'Cividis', invert: 'light' },\n  { name: 'Viridis', invert: 'light' },\n  { name: 'Magma', invert: 'light' },\n  { name: 'Inferno', invert: 'light' },\n  { name: 'Plasma', invert: 'light' },\n  { name: 'Warm', invert: 'light' },\n  { name: 'Cool', invert: 'light' },\n  { name: 'Cubehelix', invert: 'light', name2: 'CubehelixDefault' },\n  { name: 'BuGn', invert: 'dark' },\n  { name: 'BuPu', invert: 'dark' },\n  { name: 'GnBu', invert: 'dark' },\n  { name: 'OrRd', invert: 'dark' },\n  { name: 'PuBuGn', invert: 'dark' },\n  { name: 'PuBu', invert: 'dark' },\n  { name: 'PuRd', invert: 'dark' },\n  { name: 'RdPu', invert: 'dark' },\n  { name: 'YlGnBu', invert: 'dark' },\n  { name: 'YlGn', invert: 'dark' },\n  { name: 'YlOrBr', invert: 'dark' },\n  { name: 'YlOrRd', invert: 'dark' },\n\n  // Cyclical\n  { name: 'Rainbow', invert: 'always' },\n  { name: 'Sinebow', invert: 'always' },\n];\n\ntype Interpolator = (t: number) => string;\n\nconst DEFAULT_SCHEME = colorSchemes.find((scheme) => scheme.name === 'Spectral');\n\nexport function quantizeScheme(opts: HeatmapColorOptions, theme: GrafanaTheme2): string[] {\n  const options = { ...defaultPanelOptions.color, ...opts };\n  const palette = [];\n  const steps = (options.steps ?? 128) - 1;\n\n  if (opts.mode === HeatmapColorMode.Opacity) {\n    const fill = tinycolor(theme.visualization.getColorByName(opts.fill)).toPercentageRgb();\n\n    const scale =\n      options.scale === HeatmapColorScale.Exponential\n        ? d3.scalePow().exponent(options.exponent).domain([0, 1]).range([0, 1])\n        : d3.scaleLinear().domain([0, 1]).range([0, 1]);\n\n    for (let i = 0; i <= steps; i++) {\n      fill.a = scale(i / steps);\n      palette.push(tinycolor(fill).toString('hex8'));\n    }\n  } else {\n    const scheme = colorSchemes.find((scheme) => scheme.name === options.scheme) ?? DEFAULT_SCHEME!;\n    let fnName = 'interpolate' + (scheme.name2 ?? scheme.name);\n    const interpolate: Interpolator = (d3ScaleChromatic as any)[fnName];\n\n    for (let i = 0; i <= steps; i++) {\n      let rgbStr = interpolate(i / steps);\n      let rgb =\n        rgbStr.indexOf('rgb') === 0\n          ? '#' + [...rgbStr.matchAll(/\\d+/g)].map((v) => (+v[0]).toString(16).padStart(2, '0')).join('')\n          : rgbStr;\n      palette.push(rgb);\n    }\n\n    if (\n      scheme.invert === 'always' ||\n      (scheme.invert === 'dark' && theme.isDark) ||\n      (scheme.invert === 'light' && theme.isLight)\n    ) {\n      palette.reverse();\n    }\n\n    if (opts.reverse) {\n      palette.reverse();\n    }\n  }\n\n  return palette;\n}\n","import { css } from '@emotion/css';\nimport React, { useCallback, useMemo, useRef, useState } from 'react';\n\nimport { DataFrame, DataFrameType, Field, getLinksSupplier, GrafanaTheme2, PanelProps, TimeRange } from '@grafana/data';\nimport { PanelDataErrorView } from '@grafana/runtime';\nimport { ScaleDistributionConfig } from '@grafana/schema';\nimport {\n  Portal,\n  ScaleDistribution,\n  UPlotChart,\n  usePanelContext,\n  useStyles2,\n  useTheme2,\n  VizLayout,\n  VizTooltipContainer,\n} from '@grafana/ui';\nimport { CloseButton } from 'app/core/components/CloseButton/CloseButton';\nimport { ColorScale } from 'app/core/components/ColorScale/ColorScale';\nimport { isHeatmapCellsDense, readHeatmapRowsCustomMeta } from 'app/features/transformers/calculateHeatmap/heatmap';\n\nimport { HeatmapHoverView } from './HeatmapHoverView';\nimport { prepareHeatmapData } from './fields';\nimport { quantizeScheme } from './palettes';\nimport { PanelOptions } from './types';\nimport { HeatmapHoverEvent, prepConfig } from './utils';\n\ninterface HeatmapPanelProps extends PanelProps<PanelOptions> {}\n\nexport const HeatmapPanel = ({\n  data,\n  id,\n  timeRange,\n  timeZone,\n  width,\n  height,\n  options,\n  fieldConfig,\n  eventBus,\n  onChangeTimeRange,\n  replaceVariables,\n}: HeatmapPanelProps) => {\n  const theme = useTheme2();\n  const styles = useStyles2(getStyles);\n  const { sync } = usePanelContext();\n\n  // ugh\n  let timeRangeRef = useRef<TimeRange>(timeRange);\n  timeRangeRef.current = timeRange;\n\n  const getFieldLinksSupplier = useCallback(\n    (exemplars: DataFrame, field: Field) => {\n      return getLinksSupplier(exemplars, field, field.state?.scopedVars ?? {}, replaceVariables);\n    },\n    [replaceVariables]\n  );\n\n  const info = useMemo(() => {\n    try {\n      return prepareHeatmapData(data, options, theme, getFieldLinksSupplier);\n    } catch (ex) {\n      return { warning: `${ex}` };\n    }\n  }, [data, options, theme, getFieldLinksSupplier]);\n\n  const facets = useMemo(() => {\n    let exemplarsXFacet: number[] = []; // \"Time\" field\n    let exemplarsyFacet: number[] = [];\n\n    const meta = readHeatmapRowsCustomMeta(info.heatmap);\n    if (info.exemplars?.length && meta.yMatchWithLabel) {\n      exemplarsXFacet = info.exemplars?.fields[0].values.toArray();\n\n      // ordinal/labeled heatmap-buckets?\n      const hasLabeledY = meta.yOrdinalDisplay != null;\n\n      if (hasLabeledY) {\n        let matchExemplarsBy = info.exemplars?.fields\n          .find((field) => field.name === meta.yMatchWithLabel)!\n          .values.toArray();\n        exemplarsyFacet = matchExemplarsBy.map((label) => meta.yOrdinalLabel?.indexOf(label)) as number[];\n      } else {\n        exemplarsyFacet = info.exemplars?.fields[1].values.toArray() as number[]; // \"Value\" field\n      }\n    }\n\n    return [null, info.heatmap?.fields.map((f) => f.values.toArray()), [exemplarsXFacet, exemplarsyFacet]];\n  }, [info.heatmap, info.exemplars]);\n\n  const palette = useMemo(() => quantizeScheme(options.color, theme), [options.color, theme]);\n\n  const [hover, setHover] = useState<HeatmapHoverEvent | undefined>(undefined);\n  const [shouldDisplayCloseButton, setShouldDisplayCloseButton] = useState<boolean>(false);\n  const isToolTipOpen = useRef<boolean>(false);\n\n  const onCloseToolTip = () => {\n    isToolTipOpen.current = false;\n    setShouldDisplayCloseButton(false);\n    onhover(null);\n  };\n\n  const onclick = () => {\n    isToolTipOpen.current = !isToolTipOpen.current;\n\n    // Linking into useState required to re-render tooltip\n    setShouldDisplayCloseButton(isToolTipOpen.current);\n  };\n\n  const onhover = useCallback(\n    (evt?: HeatmapHoverEvent | null) => {\n      setHover(evt ?? undefined);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [options, data.structureRev]\n  );\n\n  // ugh\n  const dataRef = useRef(info);\n  dataRef.current = info;\n\n  const builder = useMemo(() => {\n    const scaleConfig = dataRef.current?.heatmap?.fields[1].config?.custom\n      ?.scaleDistribution as ScaleDistributionConfig;\n    return prepConfig({\n      dataRef,\n      theme,\n      eventBus,\n      onhover: onhover,\n      onclick: options.tooltip.show ? onclick : null,\n      onzoom: (evt) => {\n        const delta = evt.xMax - evt.xMin;\n        if (delta > 1) {\n          onChangeTimeRange({ from: evt.xMin, to: evt.xMax });\n        }\n      },\n      isToolTipOpen,\n      timeZone,\n      getTimeRange: () => timeRangeRef.current,\n      sync,\n      palette,\n      cellGap: options.cellGap,\n      hideLE: options.filterValues?.le,\n      hideGE: options.filterValues?.ge,\n      exemplarColor: options.exemplars?.color ?? 'rgba(255,0,255,0.7)',\n      yAxisConfig: options.yAxis,\n      ySizeDivisor: scaleConfig?.type === ScaleDistribution.Log ? +(options.calculation?.yBuckets?.value || 1) : 1,\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [options, timeZone, data.structureRev]);\n\n  const renderLegend = () => {\n    if (!info.heatmap || !options.legend.show) {\n      return null;\n    }\n\n    let heatmapType = dataRef.current?.heatmap?.meta?.type;\n    let isSparseHeatmap = heatmapType === DataFrameType.HeatmapCells && !isHeatmapCellsDense(dataRef.current?.heatmap!);\n    let countFieldIdx = !isSparseHeatmap ? 2 : 3;\n    const countField = info.heatmap.fields[countFieldIdx];\n\n    let hoverValue: number | undefined = undefined;\n    // seriesIdx: 1 is heatmap layer; 2 is exemplar layer\n    if (hover && info.heatmap.fields && hover.seriesIdx === 1) {\n      hoverValue = countField.values.get(hover.dataIdx);\n    }\n\n    return (\n      <VizLayout.Legend placement=\"bottom\" maxHeight=\"20%\">\n        <div className={styles.colorScaleWrapper}>\n          <ColorScale\n            hoverValue={hoverValue}\n            colorPalette={palette}\n            min={dataRef.current.minValue!}\n            max={dataRef.current.maxValue!}\n            display={info.display}\n          />\n        </div>\n      </VizLayout.Legend>\n    );\n  };\n\n  if (info.warning || !info.heatmap) {\n    return (\n      <PanelDataErrorView\n        panelId={id}\n        fieldConfig={fieldConfig}\n        data={data}\n        needsNumberField={true}\n        message={info.warning}\n      />\n    );\n  }\n\n  return (\n    <>\n      <VizLayout width={width} height={height} legend={renderLegend()}>\n        {(vizWidth: number, vizHeight: number) => (\n          <UPlotChart config={builder} data={facets as any} width={vizWidth} height={vizHeight} timeRange={timeRange}>\n            {/*children ? children(config, alignedFrame) : null*/}\n          </UPlotChart>\n        )}\n      </VizLayout>\n      <Portal>\n        {hover && options.tooltip.show && (\n          <VizTooltipContainer\n            position={{ x: hover.pageX, y: hover.pageY }}\n            offset={{ x: 10, y: 10 }}\n            allowPointerEvents={isToolTipOpen.current}\n          >\n            {shouldDisplayCloseButton && (\n              <div\n                style={{\n                  width: '100%',\n                  display: 'flex',\n                  justifyContent: 'flex-end',\n                  paddingBottom: '6px',\n                }}\n              >\n                <CloseButton\n                  onClick={onCloseToolTip}\n                  style={{\n                    position: 'relative',\n                    top: 'auto',\n                    right: 'auto',\n                    marginRight: 0,\n                  }}\n                />\n              </div>\n            )}\n            <HeatmapHoverView\n              timeRange={timeRange}\n              data={info}\n              hover={hover}\n              showHistogram={options.tooltip.yHistogram}\n            />\n          </VizTooltipContainer>\n        )}\n      </Portal>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  colorScaleWrapper: css`\n    margin-left: 25px;\n    padding: 10px 0;\n    max-width: 300px;\n  `,\n});\n","import { FieldConfigSource, PanelModel, PanelTypeChangedHandler } from '@grafana/data';\nimport {\n  AxisPlacement,\n  ScaleDistribution,\n  VisibilityMode,\n  HeatmapCellLayout,\n  HeatmapCalculationMode,\n  HeatmapCalculationOptions,\n} from '@grafana/schema';\n\nimport { colorSchemes } from './palettes';\nimport { PanelOptions, defaultPanelOptions, HeatmapColorMode } from './types';\n\n/** Called when the version number changes */\nexport const heatmapMigrationHandler = (panel: PanelModel): Partial<PanelOptions> => {\n  // Migrating from angular\n  if (Object.keys(panel.options).length === 0) {\n    return heatmapChangedHandler(panel, 'heatmap', { angular: panel }, panel.fieldConfig);\n  }\n  return panel.options;\n};\n\n/**\n * This is called when the panel changes from another panel\n */\nexport const heatmapChangedHandler: PanelTypeChangedHandler = (panel, prevPluginId, prevOptions, prevFieldConfig) => {\n  if (prevPluginId === 'heatmap' && prevOptions.angular) {\n    const { fieldConfig, options } = angularToReactHeatmap({\n      ...prevOptions.angular,\n      fieldConfig: prevFieldConfig,\n    });\n    panel.fieldConfig = fieldConfig; // Mutates the incoming panel\n    return options;\n  }\n  // alpha for 8.5+, then beta at 9.0.1\n  if (prevPluginId === 'heatmap-new') {\n    const { bucketFrame, ...options } = panel.options;\n    if (bucketFrame) {\n      return { ...options, rowsFrame: bucketFrame };\n    }\n    return panel.options;\n  }\n  return {};\n};\n\nexport function angularToReactHeatmap(angular: any): { fieldConfig: FieldConfigSource; options: PanelOptions } {\n  const fieldConfig: FieldConfigSource = {\n    defaults: {},\n    overrides: [],\n  };\n\n  const calculate = angular.dataFormat === 'tsbuckets' ? false : true;\n  const calculation: HeatmapCalculationOptions = {\n    ...defaultPanelOptions.calculation,\n  };\n\n  const oldYAxis = { logBase: 1, ...angular.yAxis };\n\n  if (calculate) {\n    if (angular.xBucketSize) {\n      calculation.xBuckets = { mode: HeatmapCalculationMode.Size, value: `${angular.xBucketSize}` };\n    } else if (angular.xBucketNumber) {\n      calculation.xBuckets = { mode: HeatmapCalculationMode.Count, value: `${angular.xBucketNumber}` };\n    }\n\n    if (angular.yBucketSize) {\n      calculation.yBuckets = { mode: HeatmapCalculationMode.Size, value: `${angular.yBucketSize}` };\n    } else if (angular.xBucketNumber) {\n      calculation.yBuckets = { mode: HeatmapCalculationMode.Count, value: `${angular.yBucketNumber}` };\n    }\n\n    if (oldYAxis.logBase > 1) {\n      calculation.yBuckets = {\n        mode: HeatmapCalculationMode.Count,\n        value: +oldYAxis.splitFactor > 0 ? `${oldYAxis.splitFactor}` : undefined,\n        scale: {\n          type: ScaleDistribution.Log,\n          log: oldYAxis.logBase,\n        },\n      };\n    }\n  }\n\n  const cellGap = asNumber(angular.cards?.cardPadding, 2);\n  const options: PanelOptions = {\n    calculate,\n    calculation,\n    color: {\n      ...defaultPanelOptions.color,\n      steps: 128, // best match with existing colors\n    },\n    cellGap: cellGap ? cellGap : 1, // default to size 1\n    cellRadius: asNumber(angular.cards?.cardRound), // just to keep it\n    yAxis: {\n      axisPlacement: oldYAxis.show === false ? AxisPlacement.Hidden : AxisPlacement.Left,\n      reverse: Boolean(angular.reverseYBuckets),\n      axisWidth: asNumber(oldYAxis.width),\n      min: oldYAxis.min,\n      max: oldYAxis.max,\n      unit: oldYAxis.format,\n      decimals: oldYAxis.decimals,\n    },\n    cellValues: {\n      decimals: asNumber(angular.tooltipDecimals),\n    },\n    rowsFrame: {\n      layout: getHeatmapCellLayout(angular.yBucketBound),\n    },\n    legend: {\n      show: Boolean(angular.legend?.show),\n    },\n    showValue: VisibilityMode.Never,\n    tooltip: {\n      show: Boolean(angular.tooltip?.show),\n      yHistogram: Boolean(angular.tooltip?.showHistogram),\n    },\n    exemplars: {\n      ...defaultPanelOptions.exemplars,\n    },\n  };\n\n  if (angular.hideZeroBuckets) {\n    options.filterValues = { ...defaultPanelOptions.filterValues }; // min: 1e-9\n  }\n\n  // Migrate color options\n  const color = angular.color ?? {};\n  switch (color?.mode) {\n    case 'spectrum': {\n      options.color.mode = HeatmapColorMode.Scheme;\n\n      const current = color.colorScheme as string;\n      let scheme = colorSchemes.find((v) => v.name === current);\n      if (!scheme) {\n        scheme = colorSchemes.find((v) => current.indexOf(v.name) >= 0);\n      }\n      options.color.scheme = scheme ? scheme.name : defaultPanelOptions.color.scheme;\n      break;\n    }\n    case 'opacity': {\n      options.color.mode = HeatmapColorMode.Opacity;\n      options.color.scale = color.scale;\n      break;\n    }\n  }\n  options.color.fill = color.cardColor;\n  options.color.min = color.min;\n  options.color.max = color.max;\n\n  if (typeof color.min === 'number' && typeof color.max === 'number' && color.min > color.max) {\n    options.color.min = color.max;\n    options.color.max = color.min;\n    options.color.reverse = true;\n  }\n\n  return { fieldConfig, options };\n}\n\nfunction getHeatmapCellLayout(v?: string): HeatmapCellLayout {\n  switch (v) {\n    case 'upper':\n      return HeatmapCellLayout.ge;\n    case 'lower':\n      return HeatmapCellLayout.le;\n    case 'middle':\n      return HeatmapCellLayout.unknown;\n  }\n  return HeatmapCellLayout.auto;\n}\n\nfunction asNumber(v: any, defaultValue?: number): number | undefined {\n  if (v == null || v === '') {\n    return defaultValue;\n  }\n  const num = +v;\n  return isNaN(num) ? defaultValue : num;\n}\n","import { VisualizationSuggestionsBuilder } from '@grafana/data';\nimport { config } from '@grafana/runtime';\n\nimport { prepareHeatmapData } from './fields';\nimport { PanelOptions, defaultPanelOptions } from './types';\n\nexport class HeatmapSuggestionsSupplier {\n  getSuggestionsForData(builder: VisualizationSuggestionsBuilder) {\n    const { dataSummary } = builder;\n\n    if (\n      !builder.data?.series ||\n      !dataSummary.hasData ||\n      dataSummary.timeFieldCount < 1 ||\n      dataSummary.numberFieldCount < 2 ||\n      dataSummary.numberFieldCount > 10\n    ) {\n      return;\n    }\n\n    const info = prepareHeatmapData(builder.data, defaultPanelOptions, config.theme2);\n    if (!info || info.warning) {\n      return;\n    }\n\n    builder.getListAppender<PanelOptions, {}>({\n      name: '',\n      pluginId: 'heatmap',\n      options: {},\n      fieldConfig: {\n        defaults: {\n          custom: {},\n        },\n        overrides: [],\n      },\n    });\n  }\n}\n","import React from 'react';\n\nimport { FieldConfigProperty, FieldType, identityOverrideProcessor, PanelData, PanelPlugin } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport {\n  AxisPlacement,\n  GraphFieldConfig,\n  ScaleDistribution,\n  ScaleDistributionConfig,\n  HeatmapCellLayout,\n} from '@grafana/schema';\nimport { addHideFrom, ScaleDistributionEditor } from '@grafana/ui/src/options/builder';\nimport { ColorScale } from 'app/core/components/ColorScale/ColorScale';\nimport { addHeatmapCalculationOptions } from 'app/features/transformers/calculateHeatmap/editor/helper';\nimport { readHeatmapRowsCustomMeta } from 'app/features/transformers/calculateHeatmap/heatmap';\n\nimport { HeatmapPanel } from './HeatmapPanel';\nimport { prepareHeatmapData } from './fields';\nimport { heatmapChangedHandler, heatmapMigrationHandler } from './migrations';\nimport { colorSchemes, quantizeScheme } from './palettes';\nimport { HeatmapSuggestionsSupplier } from './suggestions';\nimport { PanelOptions, defaultPanelOptions, HeatmapColorMode, HeatmapColorScale } from './types';\n\nexport const plugin = new PanelPlugin<PanelOptions, GraphFieldConfig>(HeatmapPanel)\n  .useFieldConfig({\n    disableStandardOptions: Object.values(FieldConfigProperty).filter((v) => v !== FieldConfigProperty.Links),\n    useCustomConfig: (builder) => {\n      builder.addCustomEditor<void, ScaleDistributionConfig>({\n        id: 'scaleDistribution',\n        path: 'scaleDistribution',\n        name: 'Y axis scale',\n        category: ['Heatmap'],\n        editor: ScaleDistributionEditor as any,\n        override: ScaleDistributionEditor as any,\n        defaultValue: { type: ScaleDistribution.Linear },\n        shouldApply: (f) => f.type === FieldType.number,\n        process: identityOverrideProcessor,\n        hideFromDefaults: true,\n      });\n      addHideFrom(builder); // for tooltip etc\n    },\n  })\n  .setPanelChangeHandler(heatmapChangedHandler)\n  .setMigrationHandler(heatmapMigrationHandler)\n  .setPanelOptions((builder, context) => {\n    const opts = context.options ?? defaultPanelOptions;\n\n    let isOrdinalY = false;\n\n    try {\n      const v = prepareHeatmapData({ series: context.data } as PanelData, opts, config.theme2);\n      isOrdinalY = readHeatmapRowsCustomMeta(v.heatmap).yOrdinalDisplay != null;\n    } catch {}\n\n    let category = ['Heatmap'];\n\n    builder.addRadio({\n      path: 'calculate',\n      name: 'Calculate from data',\n      defaultValue: defaultPanelOptions.calculate,\n      category,\n      settings: {\n        options: [\n          { label: 'Yes', value: true },\n          { label: 'No', value: false },\n        ],\n      },\n    });\n\n    if (opts.calculate) {\n      addHeatmapCalculationOptions('calculation.', builder, opts.calculation, category);\n    }\n\n    category = ['Y Axis'];\n\n    builder\n      .addRadio({\n        path: 'yAxis.axisPlacement',\n        name: 'Placement',\n        defaultValue: defaultPanelOptions.yAxis.axisPlacement ?? AxisPlacement.Left,\n        category,\n        settings: {\n          options: [\n            { label: 'Left', value: AxisPlacement.Left },\n            { label: 'Right', value: AxisPlacement.Right },\n            { label: 'Hidden', value: AxisPlacement.Hidden },\n          ],\n        },\n      })\n      .addUnitPicker({\n        category,\n        path: 'yAxis.unit',\n        name: 'Unit',\n        defaultValue: undefined,\n        settings: {\n          isClearable: true,\n        },\n      })\n      .addNumberInput({\n        category,\n        path: 'yAxis.decimals',\n        name: 'Decimals',\n        settings: {\n          placeholder: 'Auto',\n        },\n      });\n\n    if (!isOrdinalY) {\n      // if undefined, then show the min+max\n      builder\n        .addNumberInput({\n          path: 'yAxis.min',\n          name: 'Min value',\n          settings: {\n            placeholder: 'Auto',\n          },\n          category,\n        })\n        .addTextInput({\n          path: 'yAxis.max',\n          name: 'Max value',\n          settings: {\n            placeholder: 'Auto',\n          },\n          category,\n        });\n    }\n\n    builder\n      .addNumberInput({\n        path: 'yAxis.axisWidth',\n        name: 'Axis width',\n        defaultValue: defaultPanelOptions.yAxis.axisWidth,\n        settings: {\n          placeholder: 'Auto',\n          min: 5, // smaller should just be hidden\n        },\n        category,\n      })\n      .addTextInput({\n        path: 'yAxis.axisLabel',\n        name: 'Axis label',\n        defaultValue: defaultPanelOptions.yAxis.axisLabel,\n        settings: {\n          placeholder: 'Auto',\n        },\n        category,\n      });\n\n    if (!opts.calculate) {\n      builder.addRadio({\n        path: 'rowsFrame.layout',\n        name: 'Tick alignment',\n        defaultValue: defaultPanelOptions.rowsFrame?.layout ?? HeatmapCellLayout.auto,\n        category,\n        settings: {\n          options: [\n            { label: 'Auto', value: HeatmapCellLayout.auto },\n            { label: 'Top (LE)', value: HeatmapCellLayout.le },\n            { label: 'Middle', value: HeatmapCellLayout.unknown },\n            { label: 'Bottom (GE)', value: HeatmapCellLayout.ge },\n          ],\n        },\n      });\n    }\n    builder.addBooleanSwitch({\n      path: 'yAxis.reverse',\n      name: 'Reverse',\n      defaultValue: defaultPanelOptions.yAxis.reverse === true,\n      category,\n    });\n\n    category = ['Colors'];\n\n    builder.addRadio({\n      path: `color.mode`,\n      name: 'Mode',\n      defaultValue: defaultPanelOptions.color.mode,\n      category,\n      settings: {\n        options: [\n          { label: 'Scheme', value: HeatmapColorMode.Scheme },\n          { label: 'Opacity', value: HeatmapColorMode.Opacity },\n        ],\n      },\n    });\n\n    builder.addColorPicker({\n      path: `color.fill`,\n      name: 'Color',\n      defaultValue: defaultPanelOptions.color.fill,\n      category,\n      showIf: (opts) => opts.color.mode === HeatmapColorMode.Opacity,\n    });\n\n    builder.addRadio({\n      path: `color.scale`,\n      name: 'Scale',\n      defaultValue: defaultPanelOptions.color.scale,\n      category,\n      settings: {\n        options: [\n          { label: 'Exponential', value: HeatmapColorScale.Exponential },\n          { label: 'Linear', value: HeatmapColorScale.Linear },\n        ],\n      },\n      showIf: (opts) => opts.color.mode === HeatmapColorMode.Opacity,\n    });\n\n    builder.addSliderInput({\n      path: 'color.exponent',\n      name: 'Exponent',\n      defaultValue: defaultPanelOptions.color.exponent,\n      category,\n      settings: {\n        min: 0.1, // 1 for on/off?\n        max: 2,\n        step: 0.1,\n      },\n      showIf: (opts) =>\n        opts.color.mode === HeatmapColorMode.Opacity && opts.color.scale === HeatmapColorScale.Exponential,\n    });\n\n    builder.addSelect({\n      path: `color.scheme`,\n      name: 'Scheme',\n      description: '',\n      defaultValue: defaultPanelOptions.color.scheme,\n      category,\n      settings: {\n        options: colorSchemes.map((scheme) => ({\n          value: scheme.name,\n          label: scheme.name,\n          //description: 'Set a geometry field based on the results of other fields',\n        })),\n      },\n      showIf: (opts) => opts.color.mode !== HeatmapColorMode.Opacity,\n    });\n\n    builder\n      .addSliderInput({\n        path: 'color.steps',\n        name: 'Steps',\n        defaultValue: defaultPanelOptions.color.steps,\n        category,\n        settings: {\n          min: 2,\n          max: 128,\n          step: 1,\n        },\n      })\n      .addBooleanSwitch({\n        path: 'color.reverse',\n        name: 'Reverse',\n        defaultValue: defaultPanelOptions.color.reverse,\n        category,\n      })\n      .addCustomEditor({\n        id: '__scale__',\n        path: `__scale__`,\n        name: '',\n        category,\n        editor: () => {\n          const palette = quantizeScheme(opts.color, config.theme2);\n          return (\n            <div>\n              <ColorScale colorPalette={palette} min={1} max={100} />\n            </div>\n          );\n        },\n      });\n\n    builder\n      .addNumberInput({\n        path: 'color.min',\n        name: 'Start color scale from value',\n        defaultValue: defaultPanelOptions.color.min,\n        settings: {\n          placeholder: 'Auto (min)',\n        },\n        category,\n      })\n      .addNumberInput({\n        path: 'color.max',\n        name: 'End color scale at value',\n        defaultValue: defaultPanelOptions.color.max,\n        settings: {\n          placeholder: 'Auto (max)',\n        },\n        category,\n      });\n\n    category = ['Cell display'];\n\n    if (!opts.calculate) {\n      builder.addTextInput({\n        path: 'rowsFrame.value',\n        name: 'Value name',\n        defaultValue: defaultPanelOptions.rowsFrame?.value,\n        settings: {\n          placeholder: 'Value',\n        },\n        category,\n      });\n    }\n\n    builder\n      .addUnitPicker({\n        category,\n        path: 'cellValues.unit',\n        name: 'Unit',\n        defaultValue: undefined,\n        settings: {\n          isClearable: true,\n        },\n      })\n      .addNumberInput({\n        category,\n        path: 'cellValues.decimals',\n        name: 'Decimals',\n        settings: {\n          placeholder: 'Auto',\n        },\n      });\n\n    builder\n      // .addRadio({\n      //   path: 'showValue',\n      //   name: 'Show values',\n      //   defaultValue: defaultPanelOptions.showValue,\n      //   category,\n      //   settings: {\n      //     options: [\n      //       { value: VisibilityMode.Auto, label: 'Auto' },\n      //       { value: VisibilityMode.Always, label: 'Always' },\n      //       { value: VisibilityMode.Never, label: 'Never' },\n      //     ],\n      //   },\n      // })\n      .addSliderInput({\n        name: 'Cell gap',\n        path: 'cellGap',\n        defaultValue: defaultPanelOptions.cellGap,\n        category,\n        settings: {\n          min: 0,\n          max: 25,\n        },\n      })\n      .addNumberInput({\n        path: 'filterValues.le',\n        name: 'Hide cells with values <=',\n        defaultValue: defaultPanelOptions.filterValues?.le,\n        settings: {\n          placeholder: 'None',\n        },\n        category,\n      })\n      .addNumberInput({\n        path: 'filterValues.ge',\n        name: 'Hide cells with values >=',\n        defaultValue: defaultPanelOptions.filterValues?.ge,\n        settings: {\n          placeholder: 'None',\n        },\n        category,\n      });\n    // .addSliderInput({\n    //   name: 'Cell radius',\n    //   path: 'cellRadius',\n    //   defaultValue: defaultPanelOptions.cellRadius,\n    //   category,\n    //   settings: {\n    //     min: 0,\n    //     max: 100,\n    //   },\n    // })\n\n    category = ['Tooltip'];\n\n    builder.addBooleanSwitch({\n      path: 'tooltip.show',\n      name: 'Show tooltip',\n      defaultValue: defaultPanelOptions.tooltip.show,\n      category,\n    });\n\n    builder.addBooleanSwitch({\n      path: 'tooltip.yHistogram',\n      name: 'Show histogram (Y axis)',\n      defaultValue: defaultPanelOptions.tooltip.yHistogram,\n      category,\n      showIf: (opts) => opts.tooltip.show,\n    });\n\n    category = ['Legend'];\n    builder.addBooleanSwitch({\n      path: 'legend.show',\n      name: 'Show legend',\n      defaultValue: defaultPanelOptions.legend.show,\n      category,\n    });\n\n    category = ['Exemplars'];\n    builder.addColorPicker({\n      path: 'exemplars.color',\n      name: 'Color',\n      defaultValue: defaultPanelOptions.exemplars.color,\n      category,\n    });\n  })\n  .setSuggestionsSupplier(new HeatmapSuggestionsSupplier());\n"],"names":["GRADIENT_STOPS","ColorScale","colorPalette","min","max","display","hoverValue","useStopsPercentage","colors","setColors","scaleHover","setScaleHover","percent","setPercent","theme","styles","getStyles","getGradientStops","onScaleMouseMove","event","divOffset","offsetWidth","normPercentage","scaleValue","onScaleMouseLeave","clampPercent100","colorArray","stops","colorCount","incr","per","color","gradientEnd","skip","gradientStops","i","v","INFINITY_SAMPLE_REGEX","isTableResult","dataFrame","options","target","isHeatmapResult","transformV2","response","request","tableFrames","framesWithoutTable","df","processedTableFrames","transformDFToTable","exemplarFrames","framesWithoutTableAndExemplars","destinations","processedExemplarFrames","exemplarTraceIdDestination","traceIDField","field","links","getDataLinks","heatmapResults","framesWithoutTableHeatmapsAndExemplars","f","le","heatmapResultsGroupedByQuery","h","processedHeatmapResultsGroupedByQuery","query","heatmapResultsGroup","heatmapResultsGroupedByValues","values","HISTOGRAM_QUANTILE_LABEL_NAME","notLE","dataFrames","key","sortedHeatmap","sortSeriesByLabel","mergeHeatmapFrames","transformToHistogramOverTime","otherFrames","flattenedProcessedHeatmapFrames","dfs","dataFramesByRefId","refIds","refId","valueText","getValueText","valueField","getValueField","timeField","getTimeField","labelFields","promLabels","label","l","numberField","timeFields","dataFields","value","parseSampleValue","labelsForField","getLabelValue","fields","responseLength","transform","transformOptions","prometheusResult","events","exemplarData","data","exemplar","sampledExemplars","sampleExemplars","transformMetricDataToTable","transformToDataFrame","dataLinks","dsSettings","step","bucketedExemplars","alignedTs","standardDeviation","sampledBuckets","ts","exemplarsInBucket","sampledBucketValues","ex","acc","curr","prev","name","labels","createLabelInfo","stepMs","baseTimestamp","dps","dpValue","timestamp","t","endTimestamp","md","metricFields","series","d","val","metricField","metric","isMs","valueName","parseValue","displayNameFromDS","__name__","labelsWithoutName","labelPart","title","getOriginalMetricName","labelData","metricName","frames","countFields","frame","seriesList","topSeries","s","bottomSeries","j","bottomPoint","s1","s2","le1","le2","err","PrometheusCacheLevel","isMatrixData","result","isExemplarData","LegendFormatMode","PromVariableQueryType","HeatmapHoverView","props","DataHoverView","HeatmapHoverCell","hover","showHistogram","index","xField","yField","countField","xDisp","tooltipTimeFormat","xVals","yVals","countVals","meta","yDisp","yValueIdx","yBucketMin","yBucketMax","nonNumericOrdinalDisplay","yMinIdx","yMaxIdx","exp","xBucketMin","xBucketMax","count","visibleFields","linkLookup","disp","link","can","histCssWidth","histCssHeight","histCanWidth","histCanHeight","histCtx","fromIdx","toIdx","maxCount","c","pHov","pRest","pctY","pctX","isSparse","renderYBucket","prepConfig","opts","dataRef","eventBus","onhover","onclick","onzoom","isToolTipOpen","timeZone","getTimeRange","palette","cellGap","hideLE","hideGE","yAxisConfig","ySizeDivisor","sync","xScaleKey","xScaleUnit","isTime","pxRatio","heatmapType","exemplarFillColor","qt","hRect","builder","UPlotConfigBuilder","rect","u","el","e","xMin","xMax","r","payload","hoverEvent","pendingOnleave","sel","left","top","dataMin","dataMax","offset","incrs","yScale","yAxisReverse","isSparseHeatmap","shouldUseLogScale","isOrdinalY","yScaleKey","scaleMin","scaleMax","yExp","log","explicitMin","explicitMax","minLog","maxLog","minExpanded","maxExpanded","bucketSize","dispY","decimals","self","splits","idx","pathBuilder","heatmapPathsSparse","heatmapPathsDense","seriesIdx","dataIdx","x","y","xSize","ySize","countFacetIdx","valuesToFills","heatmapPathsPoints","cursor","cx","cy","o","isHovered","type","src","w","CRISP_EDGES_GAP_MIN","each","gap","xAlign","yAlign","round","dataX","dataY","scaleX","scaleY","valToPosX","valToPosY","xOff","yOff","xDim","yDim","moveTo","lineTo","arc","xs","ys","counts","dlen","fills","fillPalette","fillPaths","yBinQty","xBinQty","yBinIncr","xBinIncr","xOffset","yOffset","cys","cxs","fillPath","p","exemplarColor","points","yVal","randSign","xMaxs","yMins","yMaxs","xOffs","yOffs","yMin","yMax","xSizeUniform","xMaxPx","yMinPx","yMaxPx","boundedMinMax","minValue","maxValue","range","paletteSize","indexedFills","prepareHeatmapData","getFieldLinks","exemplars","getDenseHeatmapData","rowsHeatmap","getSparseHeatmapData","updateFieldDisplay","xName","yName","calcX","calcY","unit","PanelCfgModelVersion","HeatmapColorMode","HeatmapColorScale","defaultPanelOptions","colorSchemes","DEFAULT_SCHEME","scheme","quantizeScheme","steps","fill","tinycolor","scale","fnName","interpolate","rgbStr","rgb","HeatmapPanel","id","timeRange","width","height","fieldConfig","onChangeTimeRange","replaceVariables","timeRangeRef","getFieldLinksSupplier","info","facets","exemplarsXFacet","exemplarsyFacet","setHover","shouldDisplayCloseButton","setShouldDisplayCloseButton","onCloseToolTip","evt","scaleConfig","renderLegend","countFieldIdx","VizLayout","PanelDataErrorView","vizWidth","vizHeight","Portal","VizTooltipContainer","CloseButton","heatmapMigrationHandler","panel","heatmapChangedHandler","prevPluginId","prevOptions","prevFieldConfig","angularToReactHeatmap","bucketFrame","angular","calculate","calculation","oldYAxis","asNumber","getHeatmapCellLayout","current","defaultValue","num","HeatmapSuggestionsSupplier","dataSummary","config","PanelPlugin","context","category"],"sourceRoot":""}