{"version":3,"file":"4643.fe373f4fbbccab465a41.js","mappings":"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","sources":["webpack://grafana/./public/app/features/admin/utils.ts","webpack://grafana/./public/app/features/datasources/api.ts","webpack://grafana/./public/app/features/datasources/utils.ts","webpack://grafana/./public/app/features/datasources/state/actions.ts","webpack://grafana/./public/app/features/datasources/state/buildCategories.ts","webpack://grafana/./public/app/features/datasources/state/navModel.ts","webpack://grafana/./public/app/features/datasources/state/selectors.ts"],"sourcesContent":["import { config } from '@grafana/runtime/src';\n\nexport function isTrial() {\n  const expiry = config.licenseInfo?.trialExpiry;\n  return !!(expiry && expiry > 0);\n}\n\nexport const highlightTrial = () => isTrial() && config.featureToggles.featureHighlights;\n","import { lastValueFrom } from 'rxjs';\n\nimport { DataSourceSettings } from '@grafana/data';\nimport { getBackendSrv } from 'app/core/services/backend_srv';\nimport { accessControlQueryParam } from 'app/core/utils/accessControl';\n\nexport const getDataSources = async (): Promise<DataSourceSettings[]> => {\n  return await getBackendSrv().get('/api/datasources');\n};\n\n/**\n * @deprecated Use `getDataSourceByUid` instead.\n */\nexport const getDataSourceById = async (id: string) => {\n  const response = await lastValueFrom(\n    getBackendSrv().fetch<DataSourceSettings>({\n      method: 'GET',\n      url: `/api/datasources/${id}`,\n      params: accessControlQueryParam(),\n      showErrorAlert: false,\n    })\n  );\n\n  if (response.ok) {\n    return response.data;\n  }\n\n  throw Error(`Could not find data source by ID: \"${id}\"`);\n};\n\nexport const getDataSourceByUid = async (uid: string) => {\n  const response = await lastValueFrom(\n    getBackendSrv().fetch<DataSourceSettings>({\n      method: 'GET',\n      url: `/api/datasources/uid/${uid}`,\n      params: accessControlQueryParam(),\n      showErrorAlert: false,\n    })\n  );\n\n  if (response.ok) {\n    return response.data;\n  }\n\n  throw Error(`Could not find data source by UID: \"${uid}\"`);\n};\n\nexport const getDataSourceByIdOrUid = async (idOrUid: string) => {\n  // Try with UID first, as we are trying to migrate to that\n  try {\n    return await getDataSourceByUid(idOrUid);\n  } catch (err) {\n    console.log(`Failed to lookup data source using UID \"${idOrUid}\"`);\n  }\n\n  // Try using ID\n  try {\n    return await getDataSourceById(idOrUid);\n  } catch (err) {\n    console.log(`Failed to lookup data source using ID \"${idOrUid}\"`);\n  }\n\n  throw Error('Could not find data source');\n};\n\nexport const createDataSource = (dataSource: Partial<DataSourceSettings>) =>\n  getBackendSrv().post('/api/datasources', dataSource);\n\nexport const getDataSourcePlugins = () => getBackendSrv().get('/api/plugins', { enabled: 1, type: 'datasource' });\n\nexport const updateDataSource = (dataSource: DataSourceSettings) =>\n  getBackendSrv().put(`/api/datasources/uid/${dataSource.uid}`, dataSource);\n\nexport const deleteDataSource = (uid: string) => getBackendSrv().delete(`/api/datasources/uid/${uid}`);\n","interface ItemWithName {\n  name: string;\n}\n\nexport function nameExits(dataSources: ItemWithName[], name: string) {\n  return (\n    dataSources.filter((dataSource) => {\n      return dataSource.name.toLowerCase() === name.toLowerCase();\n    }).length > 0\n  );\n}\n\nexport function findNewName(dataSources: ItemWithName[], name: string) {\n  // Need to loop through current data sources to make sure\n  // the name doesn't exist\n  while (nameExits(dataSources, name)) {\n    // If there's a duplicate name that doesn't end with '-x'\n    // we can add -1 to the name and be done.\n    if (!nameHasSuffix(name)) {\n      name = `${name}-1`;\n    } else {\n      // if there's a duplicate name that ends with '-x'\n      // we can try to increment the last digit until the name is unique\n\n      // remove the 'x' part and replace it with the new number\n      name = `${getNewName(name)}${incrementLastDigit(getLastDigit(name))}`;\n    }\n  }\n\n  return name;\n}\n\nfunction nameHasSuffix(name: string) {\n  return name.endsWith('-', name.length - 1);\n}\n\nfunction getLastDigit(name: string) {\n  return parseInt(name.slice(-1), 10);\n}\n\nfunction incrementLastDigit(digit: number) {\n  return isNaN(digit) ? 1 : digit + 1;\n}\n\nfunction getNewName(name: string) {\n  return name.slice(0, name.length - 1);\n}\n","import { DataSourcePluginMeta, DataSourceSettings, locationUtil } from '@grafana/data';\nimport {\n  DataSourceWithBackend,\n  getDataSourceSrv,\n  HealthCheckError,\n  HealthCheckResultDetails,\n  isFetchError,\n  locationService,\n} from '@grafana/runtime';\nimport { updateNavIndex } from 'app/core/actions';\nimport { contextSrv } from 'app/core/core';\nimport { getBackendSrv } from 'app/core/services/backend_srv';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { getPluginSettings } from 'app/features/plugins/pluginSettings';\nimport { importDataSourcePlugin } from 'app/features/plugins/plugin_loader';\nimport { DataSourcePluginCategory, ThunkDispatch, ThunkResult } from 'app/types';\n\nimport * as api from '../api';\nimport { DATASOURCES_ROUTES } from '../constants';\nimport { nameExits, findNewName } from '../utils';\n\nimport { buildCategories } from './buildCategories';\nimport { buildNavModel } from './navModel';\nimport {\n  dataSourceLoaded,\n  dataSourceMetaLoaded,\n  dataSourcePluginsLoad,\n  dataSourcePluginsLoaded,\n  dataSourcesLoaded,\n  initDataSourceSettingsFailed,\n  initDataSourceSettingsSucceeded,\n  testDataSourceFailed,\n  testDataSourceStarting,\n  testDataSourceSucceeded,\n} from './reducers';\nimport { getDataSource, getDataSourceMeta } from './selectors';\n\nexport interface DataSourceTypesLoadedPayload {\n  plugins: DataSourcePluginMeta[];\n  categories: DataSourcePluginCategory[];\n}\n\nexport interface InitDataSourceSettingDependencies {\n  loadDataSource: typeof loadDataSource;\n  loadDataSourceMeta: typeof loadDataSourceMeta;\n  getDataSource: typeof getDataSource;\n  getDataSourceMeta: typeof getDataSourceMeta;\n  importDataSourcePlugin: typeof importDataSourcePlugin;\n}\n\nexport interface TestDataSourceDependencies {\n  getDatasourceSrv: typeof getDataSourceSrv;\n  getBackendSrv: typeof getBackendSrv;\n}\n\nexport const initDataSourceSettings = (\n  uid: string,\n  dependencies: InitDataSourceSettingDependencies = {\n    loadDataSource,\n    loadDataSourceMeta,\n    getDataSource,\n    getDataSourceMeta,\n    importDataSourcePlugin,\n  }\n): ThunkResult<void> => {\n  return async (dispatch, getState) => {\n    if (!uid) {\n      dispatch(initDataSourceSettingsFailed(new Error('Invalid UID')));\n      return;\n    }\n\n    try {\n      const loadedDataSource = await dispatch(dependencies.loadDataSource(uid));\n      await dispatch(dependencies.loadDataSourceMeta(loadedDataSource));\n\n      const dataSource = dependencies.getDataSource(getState().dataSources, uid);\n      const dataSourceMeta = dependencies.getDataSourceMeta(getState().dataSources, dataSource!.type);\n      const importedPlugin = await dependencies.importDataSourcePlugin(dataSourceMeta);\n\n      dispatch(initDataSourceSettingsSucceeded(importedPlugin));\n    } catch (err) {\n      if (err instanceof Error) {\n        dispatch(initDataSourceSettingsFailed(err));\n      }\n    }\n  };\n};\n\nexport const testDataSource = (\n  dataSourceName: string,\n  dependencies: TestDataSourceDependencies = {\n    getDatasourceSrv,\n    getBackendSrv,\n  }\n): ThunkResult<void> => {\n  return async (dispatch: ThunkDispatch, getState) => {\n    const dsApi = await dependencies.getDatasourceSrv().get(dataSourceName);\n\n    if (!dsApi.testDatasource) {\n      return;\n    }\n\n    dispatch(testDataSourceStarting());\n\n    dependencies.getBackendSrv().withNoBackendCache(async () => {\n      try {\n        const result = await dsApi.testDatasource();\n\n        dispatch(testDataSourceSucceeded(result));\n      } catch (err) {\n        let message: string | undefined;\n        let details: HealthCheckResultDetails;\n\n        if (err instanceof HealthCheckError) {\n          message = err.message;\n          details = err.details;\n        } else if (isFetchError(err)) {\n          message = err.data.message ?? `HTTP error ${err.statusText}`;\n        } else if (err instanceof Error) {\n          message = err.message;\n        }\n\n        dispatch(testDataSourceFailed({ message, details }));\n      }\n    });\n  };\n};\n\nexport function loadDataSources(): ThunkResult<void> {\n  return async (dispatch) => {\n    const response = await api.getDataSources();\n    dispatch(dataSourcesLoaded(response));\n  };\n}\n\nexport function loadDataSource(uid: string): ThunkResult<Promise<DataSourceSettings>> {\n  return async (dispatch) => {\n    let dataSource = await api.getDataSourceByIdOrUid(uid);\n\n    // Reload route to use UID instead\n    // -------------------------------\n    // In case we were trying to fetch and reference a data-source with an old numeric ID\n    // (which can happen by referencing it with a \"old\" URL), we would like to automatically redirect\n    // to the new URL format using the UID.\n    // [Please revalidate the following]: Unfortunately we can update the location using react router, but need to fully reload the\n    // route as the nav model page index is not matching with the url in that case.\n    // And react router has no way to unmount remount a route.\n    if (uid !== dataSource.uid) {\n      window.location.href = locationUtil.assureBaseUrl(`/datasources/edit/${dataSource.uid}`);\n\n      // Avoid a flashing error while the reload happens\n      dataSource = {} as DataSourceSettings;\n    }\n\n    dispatch(dataSourceLoaded(dataSource));\n\n    return dataSource;\n  };\n}\n\nexport function loadDataSourceMeta(dataSource: DataSourceSettings): ThunkResult<void> {\n  return async (dispatch) => {\n    const pluginInfo = (await getPluginSettings(dataSource.type)) as DataSourcePluginMeta;\n    const plugin = await importDataSourcePlugin(pluginInfo);\n    const isBackend = plugin.DataSourceClass.prototype instanceof DataSourceWithBackend;\n    const meta = {\n      ...pluginInfo,\n      isBackend: pluginInfo.backend || isBackend,\n    };\n\n    dispatch(dataSourceMetaLoaded(meta));\n\n    plugin.meta = meta;\n    dispatch(updateNavIndex(buildNavModel(dataSource, plugin)));\n  };\n}\n\nexport function addDataSource(plugin: DataSourcePluginMeta, editLink = DATASOURCES_ROUTES.Edit): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    await dispatch(loadDataSources());\n\n    const dataSources = getStore().dataSources.dataSources;\n    const isFirstDataSource = dataSources.length === 0;\n    const newInstance = {\n      name: plugin.name,\n      type: plugin.id,\n      access: 'proxy',\n      isDefault: isFirstDataSource,\n    };\n\n    if (nameExits(dataSources, newInstance.name)) {\n      newInstance.name = findNewName(dataSources, newInstance.name);\n    }\n\n    const result = await api.createDataSource(newInstance);\n\n    await getDatasourceSrv().reload();\n    await contextSrv.fetchUserPermissions();\n\n    locationService.push(editLink.replace(/:uid/gi, result.datasource.uid));\n  };\n}\n\nexport function loadDataSourcePlugins(): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(dataSourcePluginsLoad());\n    const plugins = await api.getDataSourcePlugins();\n    const categories = buildCategories(plugins);\n    dispatch(dataSourcePluginsLoaded({ plugins, categories }));\n  };\n}\n\nexport function updateDataSource(dataSource: DataSourceSettings): ThunkResult<void> {\n  return async (dispatch) => {\n    await api.updateDataSource(dataSource);\n    await getDatasourceSrv().reload();\n    return dispatch(loadDataSource(dataSource.uid));\n  };\n}\n\nexport function deleteLoadedDataSource(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const { uid } = getStore().dataSources.dataSource;\n\n    await api.deleteDataSource(uid);\n    await getDatasourceSrv().reload();\n\n    locationService.push('/datasources');\n  };\n}\n","import { DataSourcePluginMeta, PluginType } from '@grafana/data';\nimport { config, featureEnabled } from '@grafana/runtime';\nimport { DataSourcePluginCategory } from 'app/types';\n\nexport function buildCategories(plugins: DataSourcePluginMeta[]): DataSourcePluginCategory[] {\n  const categories: DataSourcePluginCategory[] = [\n    { id: 'tsdb', title: 'Time series databases', plugins: [] },\n    { id: 'logging', title: 'Logging & document databases', plugins: [] },\n    { id: 'tracing', title: 'Distributed tracing', plugins: [] },\n    { id: 'sql', title: 'SQL', plugins: [] },\n    { id: 'cloud', title: 'Cloud', plugins: [] },\n    { id: 'enterprise', title: 'Enterprise plugins', plugins: [] },\n    { id: 'iot', title: 'Industrial & IoT', plugins: [] },\n    { id: 'other', title: 'Others', plugins: [] },\n  ].filter((item) => item);\n\n  const categoryIndex: Record<string, DataSourcePluginCategory> = {};\n  const pluginIndex: Record<string, DataSourcePluginMeta> = {};\n  const enterprisePlugins = getEnterprisePhantomPlugins();\n\n  // build indices\n  for (const category of categories) {\n    categoryIndex[category.id] = category;\n  }\n\n  for (const plugin of plugins) {\n    const enterprisePlugin = enterprisePlugins.find((item) => item.id === plugin.id);\n    // Force category for enterprise plugins\n    if (plugin.enterprise || enterprisePlugin) {\n      plugin.category = 'enterprise';\n      plugin.unlicensed = !featureEnabled('enterprise.plugins');\n      plugin.info.links = enterprisePlugin?.info?.links || plugin.info.links;\n    }\n\n    // Fix link name\n    if (plugin.info.links) {\n      for (const link of plugin.info.links) {\n        link.name = 'Learn more';\n      }\n    }\n\n    const category = categories.find((item) => item.id === plugin.category) || categoryIndex['other'];\n    category.plugins.push(plugin);\n    // add to plugin index\n    pluginIndex[plugin.id] = plugin;\n  }\n\n  for (const category of categories) {\n    // add phantom plugin\n    if (category.id === 'cloud') {\n      category.plugins.push(getGrafanaCloudPhantomPlugin());\n    }\n\n    // add phantom plugins\n    if (category.id === 'enterprise') {\n      for (const plugin of enterprisePlugins) {\n        if (!pluginIndex[plugin.id]) {\n          category.plugins.push(plugin);\n        }\n      }\n    }\n\n    sortPlugins(category.plugins);\n  }\n\n  // Only show categories with plugins\n  return categories.filter((c) => c.plugins.length > 0);\n}\n\nfunction sortPlugins(plugins: DataSourcePluginMeta[]) {\n  const sortingRules: { [id: string]: number } = {\n    prometheus: 100,\n    graphite: 95,\n    loki: 90,\n    mysql: 80,\n    jaeger: 100,\n    postgres: 79,\n    gcloud: -1,\n  };\n\n  plugins.sort((a, b) => {\n    const aSort = sortingRules[a.id] || 0;\n    const bSort = sortingRules[b.id] || 0;\n    if (aSort > bSort) {\n      return -1;\n    }\n    if (aSort < bSort) {\n      return 1;\n    }\n\n    return a.name > b.name ? 1 : -1;\n  });\n}\n\nfunction getEnterprisePhantomPlugins(): DataSourcePluginMeta[] {\n  return [\n    getPhantomPlugin({\n      id: 'grafana-splunk-datasource',\n      name: 'Splunk',\n      description: 'Visualize and explore Splunk logs',\n      imgUrl: 'public/img/plugins/splunk_logo_128.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-oracle-datasource',\n      name: 'Oracle',\n      description: 'Visualize and explore Oracle SQL',\n      imgUrl: 'public/img/plugins/oracle.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-dynatrace-datasource',\n      name: 'Dynatrace',\n      description: 'Visualize and explore Dynatrace data',\n      imgUrl: 'public/img/plugins/dynatrace.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-servicenow-datasource',\n      description: 'ServiceNow integration and data source',\n      name: 'ServiceNow',\n      imgUrl: 'public/img/plugins/servicenow.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-datadog-datasource',\n      description: 'DataDog integration and data source',\n      name: 'DataDog',\n      imgUrl: 'public/img/plugins/datadog.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-newrelic-datasource',\n      description: 'New Relic integration and data source',\n      name: 'New Relic',\n      imgUrl: 'public/img/plugins/newrelic.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-mongodb-datasource',\n      description: 'MongoDB integration and data source',\n      name: 'MongoDB',\n      imgUrl: 'public/img/plugins/mongodb.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-snowflake-datasource',\n      description: 'Snowflake integration and data source',\n      name: 'Snowflake',\n      imgUrl: 'public/img/plugins/snowflake.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-wavefront-datasource',\n      description: 'Wavefront integration and data source',\n      name: 'Wavefront',\n      imgUrl: 'public/img/plugins/wavefront.svg',\n    }),\n    getPhantomPlugin({\n      id: 'dlopes7-appdynamics-datasource',\n      description: 'AppDynamics integration and data source',\n      name: 'AppDynamics',\n      imgUrl: 'public/img/plugins/appdynamics.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-saphana-datasource',\n      description: 'SAP HANA® integration and data source',\n      name: 'SAP HANA®',\n      imgUrl: 'public/img/plugins/sap_hana.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-honeycomb-datasource',\n      description: 'Honeycomb integration and datasource',\n      name: 'Honeycomb',\n      imgUrl: 'public/img/plugins/honeycomb.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-salesforce-datasource',\n      description: 'Salesforce integration and datasource',\n      name: 'Salesforce',\n      imgUrl: 'public/img/plugins/salesforce.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-jira-datasource',\n      description: 'Jira integration and datasource',\n      name: 'Jira',\n      imgUrl: 'public/img/plugins/jira_logo.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-gitlab-datasource',\n      description: 'GitLab integration and datasource',\n      name: 'GitLab',\n      imgUrl: 'public/img/plugins/gitlab.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-splunk-monitoring-datasource',\n      description: 'SignalFx integration and datasource',\n      name: 'Splunk Infrastructure Monitoring',\n      imgUrl: 'public/img/plugins/signalfx-logo.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-azuredevops-datasource',\n      description: 'Azure Devops datasource',\n      name: 'Azure Devops',\n      imgUrl: 'public/img/plugins/azure-devops.png',\n    }),\n  ];\n}\n\nfunction getGrafanaCloudPhantomPlugin(): DataSourcePluginMeta {\n  return {\n    id: 'gcloud',\n    name: 'Grafana Cloud',\n    type: PluginType.datasource,\n    module: 'phantom',\n    baseUrl: '',\n    info: {\n      description: 'Hosted Graphite, Prometheus, and Loki',\n      logos: { small: 'public/img/grafana_icon.svg', large: 'asd' },\n      author: { name: 'Grafana Labs' },\n      links: [\n        {\n          url: 'https://grafana.com/products/cloud/',\n          name: 'Learn more',\n        },\n      ],\n      screenshots: [],\n      updated: '2019-05-10',\n      version: '1.0.0',\n    },\n  };\n}\n\ninterface GetPhantomPluginOptions {\n  id: string;\n  name: string;\n  description: string;\n  imgUrl: string;\n}\n\nfunction getPhantomPlugin(options: GetPhantomPluginOptions): DataSourcePluginMeta {\n  return {\n    id: options.id,\n    name: options.name,\n    type: PluginType.datasource,\n    module: 'phantom',\n    baseUrl: '',\n    info: {\n      description: options.description,\n      logos: { small: options.imgUrl, large: options.imgUrl },\n      author: { name: 'Grafana Labs' },\n      links: [\n        {\n          url: config.pluginCatalogURL + options.id,\n          name: 'Install now',\n        },\n      ],\n      screenshots: [],\n      updated: '2019-05-10',\n      version: '1.0.0',\n    },\n  };\n}\n","import { DataSourceSettings, PluginType, PluginInclude, NavModel, NavModelItem } from '@grafana/data';\nimport { featureEnabled } from '@grafana/runtime';\nimport { ProBadge } from 'app/core/components/Upgrade/ProBadge';\nimport config from 'app/core/config';\nimport { contextSrv } from 'app/core/core';\nimport { highlightTrial } from 'app/features/admin/utils';\nimport { AccessControlAction } from 'app/types';\n\nimport { GenericDataSourcePlugin } from '../types';\n\nconst loadingDSType = 'Loading';\n\nexport function buildNavModel(dataSource: DataSourceSettings, plugin: GenericDataSourcePlugin): NavModelItem {\n  const pluginMeta = plugin.meta;\n  const highlightsEnabled = config.featureToggles.featureHighlights;\n  const navModel: NavModelItem = {\n    img: pluginMeta.info.logos.large,\n    id: 'datasource-' + dataSource.uid,\n    subTitle: `Type: ${pluginMeta.name}`,\n    url: '',\n    text: dataSource.name,\n    breadcrumbs: [{ title: 'Data Sources', url: 'datasources' }],\n    children: [\n      {\n        active: false,\n        icon: 'sliders-v-alt',\n        id: `datasource-settings-${dataSource.uid}`,\n        text: 'Settings',\n        url: `datasources/edit/${dataSource.uid}/`,\n      },\n    ],\n  };\n\n  if (plugin.configPages) {\n    for (const page of plugin.configPages) {\n      navModel.children!.push({\n        active: false,\n        text: page.title,\n        icon: page.icon,\n        url: `datasources/edit/${dataSource.uid}/?page=${page.id}`,\n        id: `datasource-page-${page.id}`,\n      });\n    }\n  }\n\n  if (pluginMeta.includes && hasDashboards(pluginMeta.includes) && contextSrv.hasRole('Admin')) {\n    navModel.children!.push({\n      active: false,\n      icon: 'apps',\n      id: `datasource-dashboards-${dataSource.uid}`,\n      text: 'Dashboards',\n      url: `datasources/edit/${dataSource.uid}/dashboards`,\n    });\n  }\n\n  const isLoadingNav = dataSource.type === loadingDSType;\n\n  const permissionsExperimentId = 'feature-highlights-data-source-permissions-badge';\n  const dsPermissions: NavModelItem = {\n    active: false,\n    icon: 'lock',\n    id: `datasource-permissions-${dataSource.uid}`,\n    text: 'Permissions',\n    url: `datasources/edit/${dataSource.uid}/permissions`,\n  };\n\n  if (highlightTrial() && !isLoadingNav) {\n    dsPermissions.tabSuffix = () => ProBadge({ experimentId: permissionsExperimentId, eventVariant: 'trial' });\n  }\n\n  if (featureEnabled('dspermissions')) {\n    if (contextSrv.hasPermission(AccessControlAction.DataSourcesPermissionsRead)) {\n      navModel.children!.push(dsPermissions);\n    }\n  } else if (highlightsEnabled && !isLoadingNav) {\n    navModel.children!.push({\n      ...dsPermissions,\n      url: dsPermissions.url + '/upgrade',\n      tabSuffix: () => ProBadge({ experimentId: permissionsExperimentId }),\n    });\n  }\n\n  const analyticsExperimentId = 'feature-highlights-data-source-insights-badge';\n  const analytics: NavModelItem = {\n    active: false,\n    icon: 'info-circle',\n    id: `datasource-insights-${dataSource.uid}`,\n    text: 'Insights',\n    url: `datasources/edit/${dataSource.uid}/insights`,\n  };\n\n  if (highlightTrial() && !isLoadingNav) {\n    analytics.tabSuffix = () => ProBadge({ experimentId: analyticsExperimentId, eventVariant: 'trial' });\n  }\n\n  if (featureEnabled('analytics')) {\n    if (contextSrv.hasPermission(AccessControlAction.DataSourcesInsightsRead)) {\n      navModel.children!.push(analytics);\n    }\n  } else if (highlightsEnabled && !isLoadingNav) {\n    navModel.children!.push({\n      ...analytics,\n      url: analytics.url + '/upgrade',\n      tabSuffix: () => ProBadge({ experimentId: analyticsExperimentId }),\n    });\n  }\n\n  const cachingExperimentId = 'feature-highlights-query-caching-badge';\n\n  const caching: NavModelItem = {\n    active: false,\n    icon: 'database',\n    id: `datasource-cache-${dataSource.uid}`,\n    text: 'Cache',\n    url: `datasources/edit/${dataSource.uid}/cache`,\n    hideFromTabs: !pluginMeta.isBackend || !config.caching.enabled,\n  };\n\n  if (highlightTrial() && !isLoadingNav) {\n    caching.tabSuffix = () => ProBadge({ experimentId: cachingExperimentId, eventVariant: 'trial' });\n  }\n\n  if (featureEnabled('caching')) {\n    if (contextSrv.hasPermissionInMetadata(AccessControlAction.DataSourcesCachingRead, dataSource)) {\n      navModel.children!.push(caching);\n    }\n  } else if (highlightsEnabled && !isLoadingNav) {\n    navModel.children!.push({\n      ...caching,\n      url: caching.url + '/upgrade',\n      tabSuffix: () => ProBadge({ experimentId: cachingExperimentId }),\n    });\n  }\n\n  return navModel;\n}\n\nexport function getDataSourceNav(main: NavModelItem, pageName: string): NavModel {\n  let node: NavModelItem = { text: '' };\n\n  // find active page\n  for (const child of main.children!) {\n    if (child.id!.indexOf(pageName) > 0) {\n      child.active = true;\n      node = child;\n      break;\n    }\n  }\n\n  return {\n    main: main,\n    node: node!,\n  };\n}\nexport function getDataSourceLoadingNav(pageName: string): NavModel {\n  const main = buildNavModel(\n    {\n      access: '',\n      basicAuth: false,\n      basicAuthUser: '',\n      withCredentials: false,\n      database: '',\n      id: 1,\n      uid: 'x',\n      isDefault: false,\n      jsonData: { authType: 'credentials', defaultRegion: 'eu-west-2' },\n      name: 'Loading',\n      orgId: 1,\n      readOnly: false,\n      type: loadingDSType,\n      typeName: loadingDSType,\n      typeLogoUrl: 'public/img/icn-datasource.svg',\n      url: '',\n      user: '',\n      secureJsonFields: {},\n    },\n    {\n      meta: {\n        id: '1',\n        type: PluginType.datasource,\n        name: '',\n        info: {\n          author: {\n            name: '',\n            url: '',\n          },\n          description: '',\n          links: [{ name: '', url: '' }],\n          logos: {\n            large: '',\n            small: '',\n          },\n          screenshots: [],\n          updated: '',\n          version: '',\n        },\n        includes: [],\n        module: '',\n        baseUrl: '',\n      },\n    } as any\n  );\n\n  return getDataSourceNav(main, pageName);\n}\n\nfunction hasDashboards(includes: PluginInclude[]): boolean {\n  return (\n    includes.find((include) => {\n      return include.type === 'dashboard';\n    }) !== undefined\n  );\n}\n","import { DataSourcePluginMeta, DataSourceSettings, UrlQueryValue } from '@grafana/data';\nimport { DataSourcesState } from 'app/types/datasources';\n\nexport const getDataSources = (state: DataSourcesState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  return state.dataSources.filter((dataSource: DataSourceSettings) => {\n    return regex.test(dataSource.name) || regex.test(dataSource.database) || regex.test(dataSource.type);\n  });\n};\n\nexport const getFilteredDataSourcePlugins = (state: DataSourcesState) => {\n  const regex = new RegExp(state.dataSourceTypeSearchQuery, 'i');\n\n  return state.plugins.filter((type: DataSourcePluginMeta) => {\n    return regex.test(type.name);\n  });\n};\n\nexport const getDataSource = (state: DataSourcesState, dataSourceId: UrlQueryValue): DataSourceSettings => {\n  if (state.dataSource.uid === dataSourceId) {\n    return state.dataSource;\n  }\n  return {} as DataSourceSettings;\n};\n\nexport const getDataSourceMeta = (state: DataSourcesState, type: string): DataSourcePluginMeta => {\n  if (state.dataSourceMeta.id === type) {\n    return state.dataSourceMeta;\n  }\n\n  return {} as DataSourcePluginMeta;\n};\n\nexport const getDataSourcesSearchQuery = (state: DataSourcesState) => state.searchQuery;\nexport const getDataSourcesLayoutMode = (state: DataSourcesState) => state.layoutMode;\nexport const getDataSourcesCount = (state: DataSourcesState) => state.dataSourcesCount;\n"],"names":["highlightTrial","expiry","config","trialExpiry","isTrial","getDataSourceByIdOrUid","async","response","lastValueFrom","getBackendSrv","fetch","method","url","uid","params","accessControlQueryParam","showErrorAlert","ok","data","Error","getDataSourceByUid","idOrUid","err","console","log","id","getDataSourceById","createDataSource","dataSource","post","nameExits","dataSources","name","filter","toLowerCase","length","findNewName","nameHasSuffix","getNewName","digit","getLastDigit","isNaN","endsWith","parseInt","slice","initDataSourceSettings","dependencies","loadDataSource","loadDataSourceMeta","getDataSource","getDataSourceMeta","importDataSourcePlugin","dispatch","getState","loadedDataSource","dataSourceMeta","type","importedPlugin","initDataSourceSettingsSucceeded","initDataSourceSettingsFailed","testDataSource","dataSourceName","getDatasourceSrv","dsApi","get","testDatasource","testDataSourceStarting","withNoBackendCache","result","testDataSourceSucceeded","message","details","HealthCheckError","isFetchError","statusText","testDataSourceFailed","loadDataSources","api","dataSourcesLoaded","window","location","href","locationUtil","dataSourceLoaded","pluginInfo","getPluginSettings","plugin","isBackend","DataSourceClass","prototype","DataSourceWithBackend","meta","backend","dataSourceMetaLoaded","updateNavIndex","buildNavModel","addDataSource","editLink","DATASOURCES_ROUTES","getStore","isFirstDataSource","newInstance","access","isDefault","reload","contextSrv","locationService","replace","datasource","loadDataSourcePlugins","dataSourcePluginsLoad","plugins","enabled","categories","buildCategories","dataSourcePluginsLoaded","updateDataSource","put","deleteLoadedDataSource","delete","title","item","categoryIndex","pluginIndex","enterprisePlugins","getPhantomPlugin","description","imgUrl","category","enterprisePlugin","find","enterprise","unlicensed","featureEnabled","info","links","link","push","PluginType","module","baseUrl","logos","small","large","author","screenshots","updated","version","sortPlugins","c","sortingRules","prometheus","graphite","loki","mysql","jaeger","postgres","gcloud","sort","a","b","aSort","bSort","options","loadingDSType","pluginMeta","highlightsEnabled","navModel","img","subTitle","text","breadcrumbs","children","active","icon","configPages","page","includes","undefined","include","isLoadingNav","permissionsExperimentId","dsPermissions","tabSuffix","ProBadge","experimentId","eventVariant","AccessControlAction","analyticsExperimentId","analytics","cachingExperimentId","caching","hideFromTabs","getDataSourceNav","main","pageName","node","child","indexOf","getDataSourceLoadingNav","basicAuth","basicAuthUser","withCredentials","database","jsonData","authType","defaultRegion","orgId","readOnly","typeName","typeLogoUrl","user","secureJsonFields","getDataSources","state","regex","RegExp","searchQuery","test","getFilteredDataSourcePlugins","dataSourceTypeSearchQuery","dataSourceId","getDataSourcesSearchQuery","getDataSourcesCount","dataSourcesCount"],"sourceRoot":""}