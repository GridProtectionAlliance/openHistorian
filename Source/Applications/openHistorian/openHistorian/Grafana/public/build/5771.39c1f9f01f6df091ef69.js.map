{"version":3,"file":"5771.39c1f9f01f6df091ef69.js","mappings":"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","sources":["webpack://grafana/./public/app/features/profile/ChangePasswordForm.tsx","webpack://grafana/./public/app/features/profile/ChangePasswordPage.tsx","webpack://grafana/./public/app/features/profile/state/actions.ts","webpack://grafana/./.yarn/__virtual__/react-use-virtual-720cbd4f86/3/opt/drone/yarncache/react-use-npm-17.4.0-0ef4521544-0889da919b.zip/node_modules/react-use/esm/useMount.js"],"sourcesContent":["import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { Button, Field, Form, HorizontalGroup, LinkButton } from '@grafana/ui';\nimport config from 'app/core/config';\nimport { UserDTO } from 'app/types';\n\nimport { PasswordField } from '../../core/components/PasswordField/PasswordField';\n\nimport { ChangePasswordFields } from './types';\n\nexport interface Props {\n  user: UserDTO;\n  isSaving: boolean;\n  onChangePassword: (payload: ChangePasswordFields) => void;\n}\n\nexport const ChangePasswordForm = ({ user, onChangePassword, isSaving }: Props) => {\n  const { disableLoginForm } = config;\n  const authSource = user.authLabels?.length && user.authLabels[0];\n\n  if (authSource === 'LDAP' || authSource === 'Auth Proxy') {\n    return <p>You cannot change password when signed in with LDAP or auth proxy.</p>;\n  }\n  if (authSource && disableLoginForm) {\n    return <p>Password cannot be changed here.</p>;\n  }\n\n  return (\n    <div\n      className={css`\n        max-width: 400px;\n      `}\n    >\n      <Form onSubmit={onChangePassword}>\n        {({ register, errors, getValues }) => {\n          return (\n            <>\n              <Field label=\"Old password\" invalid={!!errors.oldPassword} error={errors?.oldPassword?.message}>\n                <PasswordField\n                  id=\"current-password\"\n                  autoComplete=\"current-password\"\n                  {...register('oldPassword', { required: 'Old password is required' })}\n                />\n              </Field>\n\n              <Field label=\"New password\" invalid={!!errors.newPassword} error={errors?.newPassword?.message}>\n                <PasswordField\n                  id=\"new-password\"\n                  autoComplete=\"new-password\"\n                  {...register('newPassword', {\n                    required: 'New password is required',\n                    validate: {\n                      confirm: (v) => v === getValues().confirmNew || 'Passwords must match',\n                      old: (v) => v !== getValues().oldPassword || `New password can't be the same as the old one.`,\n                    },\n                  })}\n                />\n              </Field>\n\n              <Field label=\"Confirm password\" invalid={!!errors.confirmNew} error={errors?.confirmNew?.message}>\n                <PasswordField\n                  id=\"confirm-new-password\"\n                  autoComplete=\"new-password\"\n                  {...register('confirmNew', {\n                    required: 'New password confirmation is required',\n                    validate: (v) => v === getValues().newPassword || 'Passwords must match',\n                  })}\n                />\n              </Field>\n              <HorizontalGroup>\n                <Button variant=\"primary\" disabled={isSaving} type=\"submit\">\n                  Change Password\n                </Button>\n                <LinkButton variant=\"secondary\" href={`${config.appSubUrl}/profile`} fill=\"outline\">\n                  Cancel\n                </LinkButton>\n              </HorizontalGroup>\n            </>\n          );\n        }}\n      </Form>\n    </div>\n  );\n};\n","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { useMount } from 'react-use';\n\nimport { Page } from 'app/core/components/Page/Page';\nimport { StoreState } from 'app/types';\n\nimport { ChangePasswordForm } from './ChangePasswordForm';\nimport { changePassword, loadUser } from './state/actions';\n\nexport interface OwnProps {}\n\nfunction mapStateToProps(state: StoreState) {\n  const userState = state.user;\n  const { isUpdating, user } = userState;\n  return {\n    isUpdating,\n    user,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadUser,\n  changePassword,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport function ChangePasswordPage({ loadUser, isUpdating, user, changePassword }: Props) {\n  useMount(() => loadUser());\n\n  return (\n    <Page navId=\"profile/password\">\n      <Page.Contents isLoading={!Boolean(user)}>\n        {user ? (\n          <>\n            <Page.OldNavOnly>\n              <h3 className=\"page-sub-heading\">Change Your Password</h3>\n            </Page.OldNavOnly>\n            <ChangePasswordForm user={user} onChangePassword={changePassword} isSaving={isUpdating} />\n          </>\n        ) : null}\n      </Page.Contents>\n    </Page>\n  );\n}\n\nexport default connector(ChangePasswordPage);\n","import { config } from '@grafana/runtime';\n\nimport { ThunkResult, UserOrg } from '../../../types';\nimport { api } from '../api';\nimport { ChangePasswordFields, ProfileUpdateFields } from '../types';\n\nimport {\n  initLoadOrgs,\n  initLoadSessions,\n  initLoadTeams,\n  orgsLoaded,\n  sessionsLoaded,\n  setUpdating,\n  teamsLoaded,\n  userLoaded,\n  userSessionRevoked,\n} from './reducers';\n\nexport function changePassword(payload: ChangePasswordFields): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(setUpdating({ updating: true }));\n    await api.changePassword(payload);\n    dispatch(setUpdating({ updating: false }));\n  };\n}\n\nexport function initUserProfilePage(): ThunkResult<void> {\n  return async function (dispatch) {\n    await dispatch(loadUser());\n    dispatch(loadTeams());\n    dispatch(loadOrgs());\n    dispatch(loadSessions());\n  };\n}\n\nexport function loadUser(): ThunkResult<void> {\n  return async function (dispatch) {\n    const user = await api.loadUser();\n    dispatch(userLoaded({ user }));\n  };\n}\n\nfunction loadTeams(): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(initLoadTeams());\n    const teams = await api.loadTeams();\n    dispatch(teamsLoaded({ teams }));\n  };\n}\n\nfunction loadOrgs(): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(initLoadOrgs());\n    const orgs = await api.loadOrgs();\n    dispatch(orgsLoaded({ orgs }));\n  };\n}\n\nfunction loadSessions(): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(initLoadSessions());\n    const sessions = await api.loadSessions();\n    dispatch(sessionsLoaded({ sessions }));\n  };\n}\n\nexport function revokeUserSession(tokenId: number): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(setUpdating({ updating: true }));\n    await api.revokeUserSession(tokenId);\n    dispatch(userSessionRevoked({ tokenId }));\n  };\n}\n\nexport function changeUserOrg(org: UserOrg): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(setUpdating({ updating: true }));\n    await api.setUserOrg(org);\n    window.location.href = config.appSubUrl + '/profile';\n  };\n}\n\nexport function updateUserProfile(payload: ProfileUpdateFields): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(setUpdating({ updating: true }));\n    await api.updateUserProfile(payload);\n    await dispatch(loadUser());\n    dispatch(setUpdating({ updating: false }));\n  };\n}\n","import useEffectOnce from './useEffectOnce';\nvar useMount = function (fn) {\n    useEffectOnce(function () {\n        fn();\n    });\n};\nexport default useMount;\n"],"names":["ChangePasswordForm","user","onChangePassword","isSaving","disableLoginForm","config","authSource","Form","register","errors","getValues","Field","PasswordField","v","Button","mapStateToProps","state","userState","isUpdating","mapDispatchToProps","connector","ChangePasswordPage","loadUser","changePassword","useMount","Page","payload","dispatch","initUserProfilePage","loadTeams","loadOrgs","loadSessions","teams","orgs","sessions","revokeUserSession","tokenId","changeUserOrg","org","updateUserProfile","fn"],"sourceRoot":""}