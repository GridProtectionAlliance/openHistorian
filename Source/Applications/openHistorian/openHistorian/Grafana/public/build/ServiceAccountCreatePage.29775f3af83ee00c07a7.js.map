{"version":3,"file":"ServiceAccountCreatePage.29775f3af83ee00c07a7.js","mappings":"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","sources":["webpack://grafana/./public/app/features/serviceaccounts/ServiceAccountCreatePage.tsx"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\n\nimport { getBackendSrv, locationService } from '@grafana/runtime';\nimport { Form, Button, Input, Field, FieldSet } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { UserRolePicker } from 'app/core/components/RolePicker/UserRolePicker';\nimport { fetchBuiltinRoles, fetchRoleOptions, updateUserRoles } from 'app/core/components/RolePicker/api';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction, OrgRole, Role, ServiceAccountCreateApiResponse, ServiceAccountDTO } from 'app/types';\n\nimport { OrgRolePicker } from '../admin/OrgRolePicker';\n\nexport interface Props {}\n\nconst createServiceAccount = async (sa: ServiceAccountDTO) => {\n  const result = await getBackendSrv().post('/api/serviceaccounts/', sa);\n  await contextSrv.fetchUserPermissions();\n  return result;\n};\n\nconst updateServiceAccount = async (id: number, sa: ServiceAccountDTO) =>\n  getBackendSrv().patch(`/api/serviceaccounts/${id}`, sa);\n\nexport const ServiceAccountCreatePage = ({}: Props): JSX.Element => {\n  const [roleOptions, setRoleOptions] = useState<Role[]>([]);\n  const [builtinRoles, setBuiltinRoles] = useState<{ [key: string]: Role[] }>({});\n  const [pendingRoles, setPendingRoles] = useState<Role[]>([]);\n\n  const currentOrgId = contextSrv.user.orgId;\n  const [serviceAccount, setServiceAccount] = useState<ServiceAccountDTO>({\n    id: 0,\n    orgId: contextSrv.user.orgId,\n    role: OrgRole.Viewer,\n    tokens: 0,\n    name: '',\n    login: '',\n    isDisabled: false,\n    createdAt: '',\n    teams: [],\n  });\n\n  useEffect(() => {\n    async function fetchOptions() {\n      try {\n        if (contextSrv.hasPermission(AccessControlAction.ActionRolesList)) {\n          let options = await fetchRoleOptions(currentOrgId);\n          setRoleOptions(options);\n        }\n\n        if (\n          contextSrv.accessControlBuiltInRoleAssignmentEnabled() &&\n          contextSrv.hasPermission(AccessControlAction.ActionBuiltinRolesList)\n        ) {\n          const builtInRoles = await fetchBuiltinRoles(currentOrgId);\n          setBuiltinRoles(builtInRoles);\n        }\n      } catch (e) {\n        console.error('Error loading options', e);\n      }\n    }\n    if (contextSrv.licensedAccessControlEnabled()) {\n      fetchOptions();\n    }\n  }, [currentOrgId]);\n\n  const onSubmit = useCallback(\n    async (data: ServiceAccountDTO) => {\n      data.role = serviceAccount.role;\n      const response = await createServiceAccount(data);\n      try {\n        const newAccount: ServiceAccountCreateApiResponse = {\n          avatarUrl: response.avatarUrl,\n          id: response.id,\n          isDisabled: response.isDisabled,\n          login: response.login,\n          name: response.name,\n          orgId: response.orgId,\n          role: response.role,\n          tokens: response.tokens,\n        };\n        await updateServiceAccount(response.id, data);\n        if (\n          contextSrv.licensedAccessControlEnabled() &&\n          contextSrv.hasPermission(AccessControlAction.ActionUserRolesAdd) &&\n          contextSrv.hasPermission(AccessControlAction.ActionUserRolesRemove)\n        ) {\n          await updateUserRoles(pendingRoles, newAccount.id, newAccount.orgId);\n        }\n      } catch (e) {\n        console.error(e);\n      }\n      locationService.push(`/org/serviceaccounts/${response.id}`);\n    },\n    [serviceAccount.role, pendingRoles]\n  );\n\n  const onRoleChange = (role: OrgRole) => {\n    setServiceAccount({\n      ...serviceAccount,\n      role: role,\n    });\n  };\n\n  const onPendingRolesUpdate = (roles: Role[], userId: number, orgId: number | undefined) => {\n    // keep the new role assignments for user\n    setPendingRoles(roles);\n  };\n\n  return (\n    <Page navId=\"serviceaccounts\" pageNav={{ text: 'Create service account' }}>\n      <Page.Contents>\n        <Page.OldNavOnly>\n          <h3 className=\"page-sub-heading\">Create service account</h3>\n        </Page.OldNavOnly>\n        <Form onSubmit={onSubmit} validateOn=\"onSubmit\">\n          {({ register, errors }) => {\n            return (\n              <>\n                <FieldSet>\n                  <Field\n                    label=\"Display name\"\n                    required\n                    invalid={!!errors.name}\n                    error={errors.name ? 'Display name is required' : undefined}\n                  >\n                    <Input id=\"display-name-input\" {...register('name', { required: true })} autoFocus />\n                  </Field>\n                  <Field label=\"Role\">\n                    {contextSrv.licensedAccessControlEnabled() ? (\n                      <UserRolePicker\n                        apply\n                        userId={serviceAccount.id || 0}\n                        orgId={serviceAccount.orgId}\n                        builtInRole={serviceAccount.role}\n                        builtInRoles={builtinRoles}\n                        onBuiltinRoleChange={onRoleChange}\n                        roleOptions={roleOptions}\n                        onApplyRoles={onPendingRolesUpdate}\n                        pendingRoles={pendingRoles}\n                      />\n                    ) : (\n                      <OrgRolePicker aria-label=\"Role\" value={serviceAccount.role} onChange={onRoleChange} />\n                    )}\n                  </Field>\n                </FieldSet>\n                <Button type=\"submit\">Create</Button>\n              </>\n            );\n          }}\n        </Form>\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default ServiceAccountCreatePage;\n"],"names":["ServiceAccountCreatePage","roleOptions","setRoleOptions","useState","builtinRoles","setBuiltinRoles","pendingRoles","setPendingRoles","currentOrgId","contextSrv","serviceAccount","setServiceAccount","id","orgId","role","OrgRole","tokens","name","login","isDisabled","createdAt","teams","useEffect","async","AccessControlAction","options","fetchRoleOptions","builtInRoles","fetchBuiltinRoles","e","console","error","fetchOptions","onSubmit","useCallback","data","response","result","getBackendSrv","post","sa","createServiceAccount","newAccount","avatarUrl","patch","updateServiceAccount","updateUserRoles","locationService","onRoleChange","onPendingRolesUpdate","roles","userId","navId","pageNav","text","className","Form","validateOn","register","errors","FieldSet","Field","label","required","invalid","undefined","Input","autoFocus","apply","builtInRole","onBuiltinRoleChange","onApplyRoles","value","onChange","Button","type"],"sourceRoot":""}