{"version":3,"file":"CorrelationsPage.cb8d06f7ff3b093df125.js","mappings":"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","sources":["webpack://grafana/./public/app/features/correlations/components/Wizard/wizardContext.tsx","webpack://grafana/./public/app/features/correlations/components/Wizard/WizardContent.tsx","webpack://grafana/./public/app/features/correlations/components/Wizard/Wizard.tsx","webpack://grafana/./public/app/features/correlations/Forms/correlationsFormContext.tsx","webpack://grafana/./public/app/features/correlations/Forms/utils.ts","webpack://grafana/./public/app/features/correlations/Forms/ConfigureCorrelationBasicInfoForm.tsx","webpack://grafana/./public/app/features/correlations/Forms/TransformationEditorRow.tsx","webpack://grafana/./public/app/features/correlations/Forms/TransformationsEditor.tsx","webpack://grafana/./public/app/features/correlations/Forms/ConfigureCorrelationSourceForm.tsx","webpack://grafana/./public/app/features/correlations/Forms/QueryEditorField.tsx","webpack://grafana/./public/app/features/correlations/Forms/ConfigureCorrelationTargetForm.tsx","webpack://grafana/./public/app/features/correlations/Forms/CorrelationFormNavigation.tsx","webpack://grafana/./public/app/features/correlations/Forms/AddCorrelationForm.tsx","webpack://grafana/./public/app/features/correlations/Forms/EditCorrelationForm.tsx","webpack://grafana/./public/app/features/correlations/components/EmptyCorrelationsCTA.tsx","webpack://grafana/./public/app/features/correlations/CorrelationsPage.tsx","webpack://grafana/./public/app/features/correlations/Forms/types.ts"],"sourcesContent":["import { createContext, PropsWithChildren, useContext, useState } from 'react';\nimport * as React from 'react';\nimport { FieldValues } from 'react-hook-form';\n\nexport type WizardContextProps<T> = {\n  currentPage: number;\n  nextPage: () => void;\n  prevPage: () => void;\n  isLastPage: boolean;\n  onSubmit: (data: T) => void;\n  CurrentPageComponent: React.ComponentType;\n};\n\nexport const WizardContext = createContext<WizardContextProps<FieldValues> | undefined>(undefined);\n\n/**\n * Dependencies provided to Wizard component required to build WizardContext\n */\ntype WizardContextProviderDeps<T> = {\n  pages: React.ComponentType[];\n  onSubmit: (data: T) => void;\n};\n\n/**\n * Context providing current state and logic of a Wizard. Can be used by pages and navigation components.\n */\nexport function WizardContextProvider<T>(props: PropsWithChildren<WizardContextProviderDeps<T>>) {\n  const [currentPage, setCurrentPage] = useState(0);\n  const { pages, onSubmit, children } = props;\n\n  return (\n    <WizardContext.Provider\n      value={{\n        currentPage,\n        CurrentPageComponent: pages[currentPage],\n        isLastPage: currentPage === pages.length - 1,\n        nextPage: () => setCurrentPage(currentPage + 1),\n        prevPage: () => setCurrentPage(currentPage - 1),\n        // @ts-expect-error\n        onSubmit,\n      }}\n    >\n      {children}\n    </WizardContext.Provider>\n  );\n}\n\nexport const useWizardContext = () => {\n  const ctx = useContext(WizardContext);\n\n  if (!ctx) {\n    throw new Error('useWizardContext must be used within a WizardContextProvider');\n  }\n  return ctx;\n};\n","import * as React from 'react';\nimport { useFormContext } from 'react-hook-form';\n\nimport { useWizardContext } from './wizardContext';\n\ntype Props = {\n  navigation: React.ComponentType;\n};\n\nexport function WizardContent(props: Props) {\n  const { navigation } = props;\n  const { handleSubmit } = useFormContext();\n  const { CurrentPageComponent, isLastPage, nextPage, onSubmit } = useWizardContext();\n\n  const NavigationComponent = navigation;\n\n  return (\n    <form\n      onSubmit={handleSubmit((data) => {\n        if (isLastPage) {\n          onSubmit(data);\n        } else {\n          nextPage();\n        }\n      })}\n    >\n      <CurrentPageComponent />\n      <NavigationComponent />\n    </form>\n  );\n}\n","import { useForm, FormProvider, FieldValues } from 'react-hook-form';\n\nimport { WizardContent } from './WizardContent';\nimport { WizardProps } from './types';\nimport { WizardContextProvider } from './wizardContext';\n\nexport function Wizard<T extends FieldValues>(props: WizardProps<T>) {\n  const { defaultValues, pages, onSubmit, navigation } = props;\n  const formMethods = useForm<T>({ defaultValues });\n  return (\n    <FormProvider {...formMethods}>\n      <WizardContextProvider pages={pages} onSubmit={onSubmit}>\n        <WizardContent navigation={navigation} />\n      </WizardContextProvider>\n    </FormProvider>\n  );\n}\n","import { createContext, PropsWithChildren, useContext } from 'react';\n\nimport { Correlation } from '../types';\n\nexport type CorrelationsFormContextData = {\n  loading: boolean;\n  correlation?: Correlation;\n  readOnly: boolean;\n};\n\nexport const CorrelationsFormContext = createContext<CorrelationsFormContextData>({\n  loading: false,\n  correlation: undefined,\n  readOnly: false,\n});\n\ntype Props = {\n  data: CorrelationsFormContextData;\n};\n\nexport const CorrelationsFormContextProvider = (props: PropsWithChildren<Props>) => {\n  const { data, children } = props;\n  return <CorrelationsFormContext.Provider value={data}>{children}</CorrelationsFormContext.Provider>;\n};\n\nexport const useCorrelationsFormContext = () => {\n  return useContext(CorrelationsFormContext);\n};\n","import { Correlation } from '../types';\n\ntype CorrelationBaseData = Pick<Correlation, 'uid' | 'sourceUID'>;\n\nexport const getInputId = (inputName: string, correlation?: CorrelationBaseData) => {\n  if (!correlation) {\n    return inputName;\n  }\n\n  return `${inputName}_${correlation.sourceUID}-${correlation.uid}`;\n};\n","import { css, cx } from '@emotion/css';\nimport { useFormContext } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Field, FieldSet, Input, TextArea, useStyles2 } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport { useCorrelationsFormContext } from './correlationsFormContext';\nimport { FormDTO } from './types';\nimport { getInputId } from './utils';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  label: css`\n    max-width: ${theme.spacing(80)};\n  `,\n  description: css`\n    max-width: ${theme.spacing(80)};\n  `,\n});\n\nexport const ConfigureCorrelationBasicInfoForm = () => {\n  const { register, formState } = useFormContext<FormDTO>();\n  const styles = useStyles2(getStyles);\n  const { correlation, readOnly } = useCorrelationsFormContext();\n\n  return (\n    <>\n      <FieldSet label={t('correlations.basic-info-form.title', 'Define correlation label (Step 1 of 3)')}>\n        <Trans i18nKey=\"correlations.basic-info-form.sub-text\">\n          <p>Define text that will describe the correlation.</p>\n        </Trans>\n        <input type=\"hidden\" {...register('type')} />\n        <Field\n          label={t('correlations.basic-info-form.label-label', 'Label')}\n          description={t(\n            'correlations.basic-info-form.label-description',\n            'This name will be used as the label for the correlation. This will show as button text, a menu item, or hover text on a link.'\n          )}\n          className={styles.label}\n          invalid={!!formState.errors.label}\n          error={formState.errors.label?.message}\n        >\n          <Input\n            id={getInputId('label', correlation)}\n            {...register('label', {\n              required: {\n                value: true,\n                message: t('correlations.basic-info-form.label-required', 'This field is required.'),\n              },\n            })}\n            readOnly={readOnly}\n            placeholder={t('correlations.basic-info-form.label-placeholder', 'e.g. Tempo traces')}\n          />\n        </Field>\n\n        <Field\n          label={t('correlations.basic-info-form.description-label', 'Description')}\n          description={t(\n            'correlations.basic-info-form.description-description',\n            'Optional description with more information about the link'\n          )}\n          // the Field component automatically adds margin to itself, so we are forced to workaround it by overriding  its styles\n          className={cx(styles.description)}\n        >\n          <TextArea id={getInputId('description', correlation)} {...register('description')} readOnly={readOnly} />\n        </Field>\n      </FieldSet>\n    </>\n  );\n};\n","import { css } from '@emotion/css';\nimport { useState } from 'react';\nimport { useFormContext, useWatch } from 'react-hook-form';\n\nimport { Field, Icon, IconButton, Input, Label, Select, Stack, Tooltip, useStyles2 } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport { FormDTO, getSupportedTransTypeDetails, getTransformOptions } from './types';\ntype Props = {\n  index: number;\n  value: Record<string, string>;\n  readOnly: boolean;\n  remove: (index?: number | number[]) => void;\n};\n\nconst getStyles = () => ({\n  // set fixed position from the top instead of centring as the container\n  // may get bigger when the for is invalid\n  removeButton: css({\n    marginTop: '25px',\n  }),\n});\n\nconst TransformationEditorRow = (props: Props) => {\n  const { index, value: defaultValue, readOnly, remove } = props;\n  const { control, formState, register, setValue, watch, getValues } = useFormContext<FormDTO>();\n\n  const [keptVals, setKeptVals] = useState<{ expression?: string; mapValue?: string }>({});\n\n  register(`config.transformations.${index}.type`, {\n    required: {\n      value: true,\n      message: t('correlations.transform-row.transform-required', 'Please select a transformation type'),\n    },\n  });\n  const typeValue = useWatch({ name: `config.transformations.${index}.type`, control });\n\n  const styles = useStyles2(getStyles);\n\n  const transformOptions = getTransformOptions();\n\n  return (\n    <Stack direction=\"row\" key={defaultValue.id} alignItems=\"flex-start\">\n      <Field\n        label={\n          <Stack gap={0.5}>\n            <Label htmlFor={`config.transformations.${defaultValue.id}-${index}.type`}>\n              <Trans i18nKey=\"correlations.transform-row.type-label\">Type</Trans>\n            </Label>\n            <Tooltip\n              content={\n                <div>\n                  <p>\n                    <Trans i18nKey=\"correlations.transform-row.type-tooltip\">\n                      The type of transformation that will be applied to the source data.\n                    </Trans>\n                  </p>\n                </div>\n              }\n            >\n              <Icon name=\"info-circle\" size=\"sm\" />\n            </Tooltip>\n          </Stack>\n        }\n        invalid={!!formState.errors?.config?.transformations?.[index]?.type}\n        error={formState.errors?.config?.transformations?.[index]?.message}\n        validationMessageHorizontalOverflow={true}\n      >\n        <Select\n          value={typeValue}\n          onChange={(value) => {\n            if (!readOnly) {\n              const currentValues = getValues()?.config?.transformations?.[index];\n              if (currentValues) {\n                setKeptVals({\n                  expression: currentValues.expression,\n                  mapValue: currentValues.mapValue,\n                });\n              }\n              if (value.value) {\n                const newValueDetails = getSupportedTransTypeDetails(value.value);\n\n                if (newValueDetails.expressionDetails.show) {\n                  setValue(`config.transformations.${index}.expression`, keptVals?.expression || '');\n                } else {\n                  setValue(`config.transformations.${index}.expression`, '');\n                }\n\n                if (newValueDetails.mapValueDetails.show) {\n                  setValue(`config.transformations.${index}.mapValue`, keptVals?.mapValue || '');\n                } else {\n                  setValue(`config.transformations.${index}.mapValue`, '');\n                }\n\n                setValue(`config.transformations.${index}.type`, value.value);\n              }\n            }\n          }}\n          options={transformOptions}\n          width={25}\n          inputId={`config.transformations.${defaultValue.id}-${index}.type`}\n        />\n      </Field>\n      <Field\n        label={\n          <Stack gap={0.5}>\n            <Label htmlFor={`config.transformations.${defaultValue.id}.field`}>\n              <Trans i18nKey=\"correlations.transform-row.field-label\">Field</Trans>\n            </Label>\n            <Tooltip\n              content={\n                <div>\n                  <p>\n                    <Trans i18nKey=\"correlations.transform-row.field-tooltip\">\n                      Optional. The field to transform. If not specified, the transformation will be applied to the\n                      results field.\n                    </Trans>\n                  </p>\n                </div>\n              }\n            >\n              <Icon name=\"info-circle\" size=\"sm\" />\n            </Tooltip>\n          </Stack>\n        }\n      >\n        <Input\n          {...register(`config.transformations.${index}.field`)}\n          readOnly={readOnly}\n          defaultValue={defaultValue.field}\n          label={t('correlations.transform-row.field-input', 'field')}\n          id={`config.transformations.${defaultValue.id}.field`}\n        />\n      </Field>\n      <Field\n        label={\n          <Stack gap={0.5}>\n            <Label htmlFor={`config.transformations.${defaultValue.id}.expression`}>\n              <Trans i18nKey=\"correlations.transform-row.expression-label\">Expression</Trans>\n              {getSupportedTransTypeDetails(watch(`config.transformations.${index}.type`)).expressionDetails.required\n                ? ' *'\n                : ''}\n            </Label>\n            <Tooltip\n              content={\n                <div>\n                  <p>\n                    <Trans i18nKey=\"correlations.transform-row.expression-tooltip\">\n                      Required for regular expression. The expression the transformation will use. Logfmt does not use\n                      further specifications.\n                    </Trans>\n                  </p>\n                </div>\n              }\n            >\n              <Icon name=\"info-circle\" size=\"sm\" />\n            </Tooltip>\n          </Stack>\n        }\n        invalid={!!formState.errors?.config?.transformations?.[index]?.expression}\n        error={formState.errors?.config?.transformations?.[index]?.expression?.message}\n      >\n        <Input\n          {...register(`config.transformations.${index}.expression`, {\n            required: getSupportedTransTypeDetails(watch(`config.transformations.${index}.type`)).expressionDetails\n              .required\n              ? t('correlations.transform-row.expression-required', 'Please define an expression')\n              : undefined,\n          })}\n          defaultValue={defaultValue.expression}\n          readOnly={readOnly}\n          disabled={!getSupportedTransTypeDetails(watch(`config.transformations.${index}.type`)).expressionDetails.show}\n          id={`config.transformations.${defaultValue.id}.expression`}\n        />\n      </Field>\n      <Field\n        label={\n          <Stack gap={0.5}>\n            <Label htmlFor={`config.transformations.${defaultValue.id}.mapValue`}>\n              <Trans i18nKey=\"correlations.transform-row.map-value-label\">Map value</Trans>\n            </Label>\n            <Tooltip\n              content={\n                <div>\n                  <p>\n                    <Trans i18nKey=\"correlations.transform-row.map-value-tooltip\">\n                      Optional. Defines the name of the variable. This is currently only valid for regular expressions\n                      with a single, unnamed capture group.\n                    </Trans>\n                  </p>\n                </div>\n              }\n            >\n              <Icon name=\"info-circle\" size=\"sm\" />\n            </Tooltip>\n          </Stack>\n        }\n      >\n        <Input\n          {...register(`config.transformations.${index}.mapValue`)}\n          defaultValue={defaultValue.mapValue}\n          readOnly={readOnly}\n          disabled={!getSupportedTransTypeDetails(watch(`config.transformations.${index}.type`)).mapValueDetails.show}\n          id={`config.transformations.${defaultValue.id}.mapValue`}\n        />\n      </Field>\n      {!readOnly && (\n        <div className={styles.removeButton}>\n          <IconButton\n            tooltip={t('correlations.transform-row.remove-tooltip', 'Remove transformation')}\n            name=\"trash-alt\"\n            onClick={() => {\n              remove(index);\n            }}\n          >\n            <Trans i18nKey=\"correlations.transform-row.remove-button\">Remove</Trans>\n          </IconButton>\n        </div>\n      )}\n    </Stack>\n  );\n};\n\nexport default TransformationEditorRow;\n","import { useFormContext, useFieldArray } from 'react-hook-form';\n\nimport { Button, Stack, Text } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\nimport TransformationsEditorRow from './TransformationEditorRow';\n\ntype Props = { readOnly: boolean };\n\nexport const TransformationsEditor = (props: Props) => {\n  const { control, register } = useFormContext();\n  const { fields, append, remove } = useFieldArray({ control, name: 'config.transformations' });\n  const { readOnly } = props;\n\n  return (\n    <>\n      <input type=\"hidden\" {...register('id')} />\n      <Stack direction=\"column\" alignItems=\"flex-start\">\n        <Text variant={'h5'}>\n          <Trans i18nKey=\"correlations.transform.heading\">Transformations</Trans>\n        </Text>\n        {fields.length === 0 && (\n          <div>\n            <Trans i18nKey=\"correlations.transform.no-transform\">No transformations defined.</Trans>\n          </div>\n        )}\n        {fields.length > 0 && (\n          <div>\n            {fields.map((fieldVal, index) => {\n              return (\n                <TransformationsEditorRow\n                  key={index}\n                  value={fieldVal}\n                  index={index}\n                  readOnly={readOnly}\n                  remove={remove}\n                />\n              );\n            })}\n          </div>\n        )}\n        {!readOnly && (\n          <Button\n            icon=\"plus\"\n            onClick={() => append({ type: undefined }, { shouldFocus: false })}\n            variant=\"secondary\"\n            type=\"button\"\n          >\n            <Trans i18nKey=\"correlations.transform.add-button\">Add transformation</Trans>\n          </Button>\n        )}\n      </Stack>\n    </>\n  );\n};\n","import { css } from '@emotion/css';\nimport { Controller, useFormContext } from 'react-hook-form';\n\nimport { DataSourceInstanceSettings, GrafanaTheme2 } from '@grafana/data';\nimport { Card, Field, FieldSet, Input, useStyles2 } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\nimport { DataSourcePicker } from 'app/features/datasources/components/picker/DataSourcePicker';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\n\nimport { getVariableUsageInfo } from '../../explore/utils/links';\n\nimport { TransformationsEditor } from './TransformationsEditor';\nimport { useCorrelationsFormContext } from './correlationsFormContext';\nimport { FormDTO } from './types';\nimport { getInputId } from './utils';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  label: css`\n    max-width: ${theme.spacing(80)};\n  `,\n  variable: css`\n    font-family: ${theme.typography.fontFamilyMonospace};\n    font-weight: ${theme.typography.fontWeightMedium};\n  `,\n});\n\nconst getFormText = (queryType: string, dataSourceName?: string) => {\n  if (queryType === 'query') {\n    return {\n      title: t(\n        'correlations.source-form.query-title',\n        'Configure the data source that will link to {{dataSourceName}} (Step 3 of 3)',\n        { dataSourceName }\n      ),\n      descriptionPre: t(\n        'correlations.source-form.description-query-pre',\n        'You have used following variables in the target query:'\n      ),\n      heading: t('correlations.source-form.heading-query', 'Variables used in the target query'),\n    };\n  } else {\n    return {\n      title: t(\n        'correlations.source-form.external-title',\n        'Configure the data source that will use the URL (Step 3 of 3)'\n      ),\n      descriptionPre: t(\n        'correlations.source-form.description-external-pre',\n        'You have used following variables in the target URL:'\n      ),\n      heading: t('correlations.source-form.heading-external', 'Variables used in the target URL'),\n    };\n  }\n};\n\nexport const ConfigureCorrelationSourceForm = () => {\n  const { control, formState, register, getValues } = useFormContext<FormDTO>();\n  const styles = useStyles2(getStyles);\n  const withDsUID = (fn: Function) => (ds: DataSourceInstanceSettings) => fn(ds.uid);\n\n  const { correlation, readOnly } = useCorrelationsFormContext();\n\n  const currentTargetQuery = getValues('config.target');\n  const currentType = getValues('type');\n  const variables = getVariableUsageInfo(currentTargetQuery, {}).variables.map(\n    (variable) => variable.variableName + (variable.fieldPath ? `.${variable.fieldPath}` : '')\n  );\n  const dataSourceName = getDatasourceSrv().getInstanceSettings(getValues('targetUID'))?.name;\n\n  const formText = getFormText(currentType, dataSourceName);\n\n  function VariableList() {\n    return (\n      <>\n        {variables.map((name, i) => (\n          <span className={styles.variable} key={i}>\n            {name}\n            {i < variables.length - 1 ? ', ' : ''}\n          </span>\n        ))}\n      </>\n    );\n  }\n\n  return (\n    <>\n      <FieldSet label={formText.title}>\n        <Trans i18nKey=\"correlations.source-form.sub-text\">\n          <p>\n            Define what data source will display the correlation, and what data will replace previously defined\n            variables.\n          </p>\n        </Trans>\n        <Controller\n          control={control}\n          name=\"sourceUID\"\n          rules={{\n            required: {\n              value: true,\n              message: t('correlations.source-form.control-required', 'This field is required.'),\n            },\n          }}\n          render={({ field: { onChange, value } }) => (\n            <Field\n              label={t('correlations.source-form.source-label', 'Source')}\n              description={t(\n                'correlations.source-form.source-description',\n                'Results from selected source data source have links displayed in the panel'\n              )}\n              htmlFor=\"source\"\n              invalid={!!formState.errors.sourceUID}\n              error={formState.errors.sourceUID?.message}\n            >\n              <DataSourcePicker\n                onChange={withDsUID(onChange)}\n                noDefault\n                current={value}\n                inputId=\"source\"\n                width={32}\n                disabled={correlation !== undefined}\n              />\n            </Field>\n          )}\n        />\n\n        <Field\n          label={t('correlations.source-form.results-label', 'Results field')}\n          description={t(\n            'correlations.source-form.results-description',\n            'The link will be shown next to the value of this field'\n          )}\n          className={styles.label}\n          invalid={!!formState.errors?.config?.field}\n          error={formState.errors?.config?.field?.message}\n        >\n          <Input\n            id={getInputId('field', correlation)}\n            {...register('config.field', {\n              required: t('correlations.source-form.results-required', 'This field is required.'),\n            })}\n            readOnly={readOnly}\n          />\n        </Field>\n        {variables.length > 0 && (\n          <Card>\n            <Card.Heading>{formText.heading}</Card.Heading>\n            <Card.Description>\n              {formText.descriptionPre}\n              <VariableList />\n              <br />\n              <Trans i18nKey=\"correlations.source-form.description\">\n                A data point needs to provide values to all variables as fields or as transformations output to make the\n                correlation button appear in the visualization.\n                <br />\n                Note: Not every variable needs to be explicitly defined below. A transformation such as{' '}\n                <span className={styles.variable}>logfmt</span> will create variables for every key/value pair.\n              </Trans>\n            </Card.Description>\n          </Card>\n        )}\n        <TransformationsEditor readOnly={readOnly} />\n      </FieldSet>\n    </>\n  );\n};\n","import { Controller } from 'react-hook-form';\nimport { useAsync } from 'react-use';\n\nimport { CoreApp } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { Field, LoadingPlaceholder, Alert } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\ninterface Props {\n  dsUid?: string;\n  name: string;\n  invalid?: boolean;\n  error?: string;\n}\n\nexport const QueryEditorField = ({ dsUid, invalid, error, name }: Props) => {\n  const {\n    value: datasource,\n    loading: dsLoading,\n    error: dsError,\n  } = useAsync(async () => {\n    if (!dsUid) {\n      return;\n    }\n    return getDataSourceSrv().get(dsUid);\n  }, [dsUid]);\n\n  const QueryEditor = datasource?.components?.QueryEditor;\n\n  return (\n    <Field\n      label={t('correlations.query-editor.query-label', 'Query')}\n      description={\n        <span>\n          <Trans i18nKey=\"correlations.query-editor.query-description\">\n            Define the query that is run when the link is clicked. You can use{' '}\n            <a\n              href=\"https://grafana.com/docs/grafana/latest/panels-visualizations/configure-data-links/\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              variables\n            </a>{' '}\n            to access specific field values.\n          </Trans>\n        </span>\n      }\n      invalid={invalid}\n      error={error}\n    >\n      <Controller\n        name={name}\n        rules={{\n          validate: {\n            hasQueryEditor: (_, formVals) => {\n              return formVals.type === 'query' && QueryEditor === undefined\n                ? t(\n                    'correlations.query-editor.control-rules',\n                    'The selected target data source must export a query editor.'\n                  )\n                : true;\n            },\n          },\n        }}\n        render={({ field: { value, onChange } }) => {\n          if (dsLoading) {\n            return <LoadingPlaceholder text={t('correlations.query-editor.loading', 'Loading query editor...')} />;\n          }\n          if (dsError) {\n            return (\n              <Alert title={t('correlations.query-editor.error-title', 'Error loading data source')}>\n                <Trans i18nKey=\"correlations.query-editor.error-text\">\n                  The selected data source could not be loaded.\n                </Trans>\n              </Alert>\n            );\n          }\n          if (!datasource) {\n            return (\n              <Alert\n                title={t('correlations.query-editor.data-source-title', 'No data source selected')}\n                severity=\"info\"\n              >\n                <Trans i18nKey=\"correlations.query-editor.data-source-text\">\n                  Please select a target data source first.\n                </Trans>\n              </Alert>\n            );\n          }\n          if (!QueryEditor) {\n            return (\n              <Alert\n                title={t('correlations.query-editor.query-editor-title', 'Data source does not export a query editor.')}\n              ></Alert>\n            );\n          }\n          return (\n            <>\n              <QueryEditor\n                onRunQuery={() => {}}\n                app={CoreApp.Correlations}\n                onChange={(value) => {\n                  onChange(value);\n                }}\n                datasource={datasource}\n                query={value}\n              />\n            </>\n          );\n        }}\n      />\n    </Field>\n  );\n};\n","import { css } from '@emotion/css';\nimport { Controller, FieldError, useFormContext, useWatch } from 'react-hook-form';\n\nimport { DataSourceInstanceSettings, GrafanaTheme2 } from '@grafana/data';\nimport { Field, FieldSet, Input, Select, useStyles2 } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\nimport { DataSourcePicker } from 'app/features/datasources/components/picker/DataSourcePicker';\n\nimport { CorrelationType, ExternalTypeTarget } from '../types';\n\nimport { QueryEditorField } from './QueryEditorField';\nimport { useCorrelationsFormContext } from './correlationsFormContext';\nimport { assertIsQueryTypeError, FormDTO } from './types';\n\ntype CorrelationTypeOptions = {\n  value: CorrelationType;\n  label: string;\n  description: string;\n};\n\nexport const CORR_TYPES_SELECT: Record<CorrelationType, CorrelationTypeOptions> = {\n  query: {\n    value: 'query',\n    label: 'Query',\n    description: 'Open a query',\n  },\n  external: {\n    value: 'external',\n    label: 'External',\n    description: 'Open an external URL',\n  },\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  typeSelect: css`\n    max-width: ${theme.spacing(40)};\n  `,\n});\n\nexport const ConfigureCorrelationTargetForm = () => {\n  const {\n    control,\n    formState: { errors },\n  } = useFormContext<FormDTO>();\n  const withDsUID = (fn: Function) => (ds: DataSourceInstanceSettings) => fn(ds.uid);\n  const { correlation } = useCorrelationsFormContext();\n  const targetUIDFromCorrelation = correlation && 'targetUID' in correlation ? correlation.targetUID : undefined;\n  const targetUID: string | undefined = useWatch({ name: 'targetUID' }) || targetUIDFromCorrelation;\n  const correlationType: CorrelationType | undefined = useWatch({ name: 'type' }) || correlation?.type;\n  const styles = useStyles2(getStyles);\n\n  return (\n    <>\n      <FieldSet label={t('correlations.target-form.title', 'Setup the target for the correlation (Step 2 of 3)')}>\n        <Trans i18nKey=\"correlations.target-form.sub-text\">\n          <p>\n            Define what the correlation will link to. With the query type, a query will run when the correlation is\n            clicked. With the external type, clicking the correlation will open a URL.\n          </p>\n        </Trans>\n        <Controller\n          control={control}\n          name=\"type\"\n          rules={{\n            required: { value: true, message: t('correlations.target-form.control-rules', 'This field is required.') },\n          }}\n          render={({ field: { onChange, value, ...field } }) => (\n            <Field\n              label={t('correlations.target-form.type-label', 'Type')}\n              description={t('correlations.target-form.target-type-description', 'Specify the type of correlation')}\n              htmlFor=\"corrType\"\n              invalid={!!errors.type}\n            >\n              <Select\n                className={styles.typeSelect}\n                value={correlationType}\n                onChange={(value) => onChange(value.value)}\n                options={Object.values(CORR_TYPES_SELECT)}\n                aria-label=\"correlation type\"\n              />\n            </Field>\n          )}\n        />\n\n        {correlationType === 'query' &&\n          (() => {\n            assertIsQueryTypeError(errors);\n            // the assert above will make sure the form dto, which can be either external or query, is for query\n            // however, the query type has config.target, an object, which doesn't get converted, so we must explicity type it below\n            return (\n              <>\n                <Controller\n                  control={control}\n                  name=\"targetUID\"\n                  rules={{\n                    required: {\n                      value: true,\n                      message: t('correlations.target-form.control-rules', 'This field is required.'),\n                    },\n                  }}\n                  render={({ field: { onChange, value } }) => (\n                    <Field\n                      label={t('correlations.target-form.target-label', 'Target')}\n                      description={t(\n                        'correlations.target-form.target-description-query',\n                        'Specify which data source is queried when the link is clicked'\n                      )}\n                      htmlFor=\"target\"\n                      invalid={!!errors.targetUID}\n                      error={errors.targetUID?.message}\n                    >\n                      <DataSourcePicker\n                        onChange={withDsUID(onChange)}\n                        noDefault\n                        current={value}\n                        inputId=\"target\"\n                        width={32}\n                        disabled={correlation !== undefined}\n                      />\n                    </Field>\n                  )}\n                />\n\n                <QueryEditorField\n                  name=\"config.target\"\n                  dsUid={targetUID}\n                  invalid={!!errors?.config?.target}\n                  error={\n                    errors?.config?.target && 'message' in errors?.config?.target\n                      ? (errors?.config?.target as FieldError).message\n                      : 'Error'\n                  }\n                />\n              </>\n            );\n          })()}\n        {correlationType === 'external' && (\n          <>\n            <Controller\n              control={control}\n              name=\"config.target\"\n              rules={{\n                required: {\n                  value: true,\n                  message: t('correlations.target-form.control-rules', 'This field is required.'),\n                },\n              }}\n              render={({ field: { onChange, value } }) => {\n                const castVal = value as ExternalTypeTarget; // the target under \"query\" type can contain anything a datasource query contains\n                return (\n                  <Field\n                    label={t('correlations.target-form.target-label', 'Target')}\n                    description={t(\n                      'correlations.target-form.target-description-external',\n                      'Specify the URL that will open when the link is clicked'\n                    )}\n                    htmlFor=\"target\"\n                  >\n                    <Input\n                      value={castVal.url || ''}\n                      onChange={(e) => {\n                        onChange({ url: e.currentTarget.value });\n                      }}\n                    />\n                  </Field>\n                );\n              }}\n            />\n          </>\n        )}\n      </FieldSet>\n    </>\n  );\n};\n","import { Button, Stack } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport { useWizardContext } from '../components/Wizard/wizardContext';\n\nimport { useCorrelationsFormContext } from './correlationsFormContext';\n\nexport const CorrelationFormNavigation = () => {\n  const { currentPage, prevPage, isLastPage } = useWizardContext();\n  const { readOnly, loading, correlation } = useCorrelationsFormContext();\n\n  const LastPageNext = !readOnly && (\n    <Button variant=\"primary\" icon={loading ? 'spinner' : 'save'} type=\"submit\" disabled={loading}>\n      {correlation === undefined\n        ? t('correlations.navigation-form.add-button', 'Add')\n        : t('correlations.navigation-form.save-button', 'Save')}\n    </Button>\n  );\n\n  const NextPage = (\n    <Button variant=\"primary\" type=\"submit\">\n      <Trans i18nKey=\"correlations.navigation-form.next-button\">Next</Trans>\n    </Button>\n  );\n\n  return (\n    <Stack justifyContent=\"flex-start\">\n      {currentPage > 0 ? (\n        <Button variant=\"secondary\" onClick={prevPage}>\n          <Trans i18nKey=\"correlations.navigation-form.back-button\">Back</Trans>\n        </Button>\n      ) : undefined}\n\n      {isLastPage ? LastPageNext : NextPage}\n    </Stack>\n  );\n};\n","import { css } from '@emotion/css';\nimport { useEffect } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { PanelContainer, useStyles2 } from '@grafana/ui';\nimport { CloseButton } from 'app/core/components/CloseButton/CloseButton';\n\nimport { Wizard } from '../components/Wizard';\nimport { useCorrelations } from '../useCorrelations';\n\nimport { ConfigureCorrelationBasicInfoForm } from './ConfigureCorrelationBasicInfoForm';\nimport { ConfigureCorrelationSourceForm } from './ConfigureCorrelationSourceForm';\nimport { ConfigureCorrelationTargetForm } from './ConfigureCorrelationTargetForm';\nimport { CorrelationFormNavigation } from './CorrelationFormNavigation';\nimport { CorrelationsFormContextProvider } from './correlationsFormContext';\nimport { FormDTO } from './types';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  panelContainer: css`\n    position: relative;\n    padding: ${theme.spacing(1)};\n    margin-bottom: ${theme.spacing(2)};\n  `,\n  infoBox: css`\n    margin-top: 20px; // give space for close button\n  `,\n});\n\ninterface Props {\n  onClose: () => void;\n  onCreated: () => void;\n}\n\nexport const AddCorrelationForm = ({ onClose, onCreated }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const {\n    create: { execute, loading, error, value },\n  } = useCorrelations();\n\n  useEffect(() => {\n    if (!error && !loading && value) {\n      onCreated();\n    }\n  }, [error, loading, value, onCreated]);\n\n  const defaultValues: Partial<FormDTO> = { type: 'query', config: { target: {}, field: '' } };\n\n  return (\n    <PanelContainer className={styles.panelContainer}>\n      <CloseButton onClick={onClose} />\n      <CorrelationsFormContextProvider data={{ loading, readOnly: false, correlation: undefined }}>\n        <Wizard<FormDTO>\n          defaultValues={defaultValues}\n          pages={[ConfigureCorrelationBasicInfoForm, ConfigureCorrelationTargetForm, ConfigureCorrelationSourceForm]}\n          navigation={CorrelationFormNavigation}\n          onSubmit={execute}\n        />\n      </CorrelationsFormContextProvider>\n    </PanelContainer>\n  );\n};\n","import { useEffect } from 'react';\n\nimport { Wizard } from '../components/Wizard';\nimport { Correlation } from '../types';\nimport { useCorrelations } from '../useCorrelations';\n\nimport { ConfigureCorrelationBasicInfoForm } from './ConfigureCorrelationBasicInfoForm';\nimport { ConfigureCorrelationSourceForm } from './ConfigureCorrelationSourceForm';\nimport { ConfigureCorrelationTargetForm } from './ConfigureCorrelationTargetForm';\nimport { CorrelationFormNavigation } from './CorrelationFormNavigation';\nimport { CorrelationsFormContextProvider } from './correlationsFormContext';\nimport { EditFormDTO } from './types';\n\ninterface Props {\n  onUpdated: () => void;\n  correlation: Correlation;\n  readOnly?: boolean;\n}\n\nexport const EditCorrelationForm = ({ onUpdated, correlation, readOnly = false }: Props) => {\n  const {\n    update: { execute, loading, error, value },\n  } = useCorrelations();\n\n  const onSubmit = (data: EditFormDTO) => {\n    return execute({ ...data, sourceUID: correlation.sourceUID, uid: correlation.uid });\n  };\n\n  useEffect(() => {\n    if (!error && !loading && value) {\n      onUpdated();\n    }\n  }, [error, loading, value, onUpdated]);\n\n  return (\n    <CorrelationsFormContextProvider data={{ loading, readOnly, correlation }}>\n      <Wizard<EditFormDTO>\n        defaultValues={correlation}\n        pages={[ConfigureCorrelationBasicInfoForm, ConfigureCorrelationTargetForm, ConfigureCorrelationSourceForm]}\n        onSubmit={readOnly ? (e) => () => {} : onSubmit}\n        navigation={CorrelationFormNavigation}\n      />\n    </CorrelationsFormContextProvider>\n  );\n};\n","import { Button, Card, EmptyState } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\ninterface Props {\n  onClick?: () => void;\n  canWriteCorrelations: boolean;\n}\nexport const EmptyCorrelationsCTA = ({ onClick, canWriteCorrelations }: Props) => {\n  // TODO: if there are no datasources show a different message\n\n  return canWriteCorrelations ? (\n    <EmptyState\n      variant=\"call-to-action\"\n      button={\n        <Button icon=\"gf-glue\" onClick={onClick} size=\"lg\">\n          <Trans i18nKey=\"correlations.empty-state.button-title\">Add correlation</Trans>\n        </Button>\n      }\n      message={t('correlations.empty-state.title', \"You haven't defined any correlations yet\")}\n    >\n      <Trans i18nKey=\"correlations.empty-state.pro-tip\">\n        You can also define correlations via datasource provisioning\n      </Trans>\n    </EmptyState>\n  ) : (\n    <Card>\n      <Card.Heading>There are no correlations configured yet.</Card.Heading>\n      <Card.Description>Please contact your administrator to create new correlations.</Card.Description>\n    </Card>\n  );\n};\n","import { css } from '@emotion/css';\nimport { negate } from 'lodash';\nimport { memo, useCallback, useEffect, useMemo, useRef, useState } from 'react';\n\nimport { DataSourceInstanceSettings, GrafanaTheme2 } from '@grafana/data';\nimport { isFetchError, reportInteraction } from '@grafana/runtime';\nimport {\n  Badge,\n  Button,\n  DeleteButton,\n  LoadingPlaceholder,\n  useStyles2,\n  Alert,\n  InteractiveTable,\n  type Column,\n  type CellProps,\n  type SortByFn,\n  Pagination,\n  Icon,\n} from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { contextSrv } from 'app/core/core';\nimport { useNavModel } from 'app/core/hooks/useNavModel';\nimport { Trans, t } from 'app/core/internationalization';\nimport { AccessControlAction } from 'app/types';\n\nimport { AddCorrelationForm } from './Forms/AddCorrelationForm';\nimport { EditCorrelationForm } from './Forms/EditCorrelationForm';\nimport { EmptyCorrelationsCTA } from './components/EmptyCorrelationsCTA';\nimport type { Correlation, RemoveCorrelationParams } from './types';\nimport { CorrelationData, useCorrelations } from './useCorrelations';\n\nconst sortDatasource: SortByFn<CorrelationData> = (a, b, column) =>\n  a.values[column].name.localeCompare(b.values[column].name);\n\nconst isCorrelationsReadOnly = (correlation: CorrelationData) => correlation.provisioned;\n\nconst loaderWrapper = css`\n  display: flex;\n  justify-content: center;\n`;\n\nexport default function CorrelationsPage() {\n  const navModel = useNavModel('correlations');\n  const [isAdding, setIsAddingValue] = useState(false);\n  const page = useRef(1);\n\n  const setIsAdding = (value: boolean) => {\n    setIsAddingValue(value);\n    if (value) {\n      reportInteraction('grafana_correlations_adding_started');\n    }\n  };\n\n  const {\n    remove,\n    get: { execute: fetchCorrelations, ...get },\n  } = useCorrelations();\n\n  const canWriteCorrelations = contextSrv.hasPermission(AccessControlAction.DataSourcesWrite);\n\n  const handleAdded = useCallback(() => {\n    reportInteraction('grafana_correlations_added');\n    fetchCorrelations({ page: page.current });\n    setIsAdding(false);\n  }, [fetchCorrelations]);\n\n  const handleUpdated = useCallback(() => {\n    reportInteraction('grafana_correlations_edited');\n    fetchCorrelations({ page: page.current });\n  }, [fetchCorrelations]);\n\n  const handleDelete = useCallback(\n    async (params: RemoveCorrelationParams, isLastRow: boolean) => {\n      await remove.execute(params);\n      reportInteraction('grafana_correlations_deleted');\n\n      if (isLastRow) {\n        page.current--;\n      }\n      fetchCorrelations({ page: page.current });\n    },\n    [remove, fetchCorrelations]\n  );\n\n  useEffect(() => {\n    fetchCorrelations({ page: page.current });\n  }, [fetchCorrelations]);\n\n  const RowActions = useCallback(\n    ({\n      row: {\n        index,\n        original: {\n          source: { uid: sourceUID },\n          provisioned,\n          uid,\n        },\n      },\n    }: CellProps<CorrelationData, void>) => {\n      return (\n        !provisioned && (\n          <DeleteButton\n            aria-label={t('correlations.list.delete', 'delete correlation')}\n            onConfirm={() =>\n              handleDelete({ sourceUID, uid }, page.current > 1 && index === 0 && data?.correlations.length === 1)\n            }\n            closeOnConfirm\n          />\n        )\n      );\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [handleDelete]\n  );\n\n  const columns = useMemo<Array<Column<CorrelationData>>>(\n    () => [\n      {\n        id: 'info',\n        cell: InfoCell,\n        disableGrow: true,\n        visible: (data) => data.some(isCorrelationsReadOnly),\n      },\n      {\n        id: 'source',\n        header: t('correlations.list.source', 'Source'),\n        cell: DataSourceCell,\n        sortType: sortDatasource,\n      },\n      {\n        id: 'target',\n        header: t('correlations.list.target', 'Target'),\n        cell: DataSourceCell,\n        sortType: sortDatasource,\n      },\n      { id: 'label', header: t('correlations.list.label', 'Label'), sortType: 'alphanumeric' },\n      {\n        id: 'actions',\n        cell: RowActions,\n        disableGrow: true,\n        visible: (data) => canWriteCorrelations && data.some(negate(isCorrelationsReadOnly)),\n      },\n    ],\n    [RowActions, canWriteCorrelations]\n  );\n\n  const data = useMemo(() => get.value, [get.value]);\n  const showEmptyListCTA = data?.correlations.length === 0 && !isAdding && !get.error;\n  const addButton = canWriteCorrelations && data?.correlations?.length !== 0 && data !== undefined && !isAdding && (\n    <Button icon=\"plus\" onClick={() => setIsAdding(true)}>\n      <Trans i18nKey=\"correlations.add-new\">Add new</Trans>\n    </Button>\n  );\n\n  return (\n    <Page\n      navModel={navModel}\n      subTitle={\n        <>\n          <Trans i18nKey=\"correlations.sub-title\">\n            Define how data living in different data sources relates to each other. Read more in the{' '}\n            <a\n              href=\"https://grafana.com/docs/grafana/next/administration/correlations/\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              documentation\n              <Icon name=\"external-link-alt\" />\n            </a>\n          </Trans>\n        </>\n      }\n      actions={addButton}\n    >\n      <Page.Contents>\n        <div>\n          {!data && get.loading && (\n            <div className={loaderWrapper}>\n              <LoadingPlaceholder text={t('correlations.list.loading', 'loading...')} />\n            </div>\n          )}\n\n          {showEmptyListCTA && (\n            <EmptyCorrelationsCTA canWriteCorrelations={canWriteCorrelations} onClick={() => setIsAdding(true)} />\n          )}\n\n          {\n            // This error is not actionable, it'd be nice to have a recovery button\n            get.error && (\n              <Alert\n                severity=\"error\"\n                title={t('correlations.alert.title', 'Error fetching correlation data')}\n                topSpacing={2}\n              >\n                {(isFetchError(get.error) && get.error.data?.message) ||\n                  t(\n                    'correlations.alert.error-message',\n                    'An unknown error occurred while fetching correlation data. Please try again.'\n                  )}\n              </Alert>\n            )\n          }\n\n          {isAdding && <AddCorrelationForm onClose={() => setIsAdding(false)} onCreated={handleAdded} />}\n\n          {data && data.correlations.length >= 1 && (\n            <>\n              <InteractiveTable\n                renderExpandedRow={(correlation) => (\n                  <ExpendedRow\n                    correlation={correlation}\n                    onUpdated={handleUpdated}\n                    readOnly={isCorrelationsReadOnly(correlation) || !canWriteCorrelations}\n                  />\n                )}\n                columns={columns}\n                data={data.correlations}\n                getRowId={(correlation) => `${correlation.source.uid}-${correlation.uid}`}\n              />\n              <Pagination\n                currentPage={page.current}\n                numberOfPages={Math.ceil(data.totalCount / data.limit)}\n                onNavigate={(toPage: number) => {\n                  fetchCorrelations({ page: (page.current = toPage) });\n                }}\n              />\n            </>\n          )}\n        </div>\n      </Page.Contents>\n    </Page>\n  );\n}\n\ninterface ExpandedRowProps {\n  correlation: CorrelationData;\n  readOnly: boolean;\n  onUpdated: () => void;\n}\nfunction ExpendedRow({ correlation: { source, ...correlation }, readOnly, onUpdated }: ExpandedRowProps) {\n  useEffect(\n    () => reportInteraction('grafana_correlations_details_expanded'),\n    // we only want to fire this on first render\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  let corr: Correlation =\n    correlation.type === 'query'\n      ? { ...correlation, type: 'query', sourceUID: source.uid, targetUID: correlation.target.uid }\n      : { ...correlation, type: 'external', sourceUID: source.uid };\n\n  return <EditCorrelationForm correlation={corr} onUpdated={onUpdated} readOnly={readOnly} />;\n}\n\nconst getDatasourceCellStyles = (theme: GrafanaTheme2) => ({\n  root: css`\n    display: flex;\n    align-items: center;\n  `,\n  dsLogo: css`\n    margin-right: ${theme.spacing()};\n    height: 16px;\n    width: 16px;\n  `,\n});\n\nconst DataSourceCell = memo(\n  function DataSourceCell({ cell: { value } }: CellProps<CorrelationData, DataSourceInstanceSettings>) {\n    const styles = useStyles2(getDatasourceCellStyles);\n\n    return (\n      <span className={styles.root}>\n        {value?.name !== undefined && (\n          <>\n            <img src={value.meta.info.logos.small} alt=\"\" className={styles.dsLogo} />\n            {value.name}\n          </>\n        )}\n      </span>\n    );\n  },\n  ({ cell: { value } }, { cell: { value: prevValue } }) => {\n    return value?.type === prevValue?.type && value?.name === prevValue?.name;\n  }\n);\n\nconst noWrap = css`\n  white-space: nowrap;\n`;\n\nconst InfoCell = memo(\n  function InfoCell({ ...props }: CellProps<CorrelationData, void>) {\n    const readOnly = props.row.original.provisioned;\n\n    if (readOnly) {\n      return <Badge text={t('correlations.list.read-only', 'Read only')} color=\"purple\" className={noWrap} />;\n    } else {\n      return null;\n    }\n  },\n  (props, prevProps) => props.row.original.source.readOnly === prevProps.row.original.source.readOnly\n);\n","import { DeepMap, FieldError, FieldErrors } from 'react-hook-form';\n\nimport { SupportedTransformationType } from '@grafana/data';\nimport { t } from 'app/core/internationalization';\n\nimport { CorrelationConfigExternal, CorrelationConfigQuery, OmitUnion } from '../types';\n\nexport interface FormExternalDTO {\n  sourceUID: string;\n  label: string;\n  description: string;\n  type: 'external';\n  config: CorrelationConfigExternal;\n}\n\nexport interface FormQueryDTO {\n  sourceUID: string;\n  targetUID: string;\n  label: string;\n  description: string;\n  type: 'query';\n  config: CorrelationConfigQuery;\n}\n\nexport type FormDTO = FormExternalDTO | FormQueryDTO;\n\nexport function assertIsQueryTypeError(\n  errors: FieldErrors<FormDTO>\n): asserts errors is DeepMap<FormQueryDTO, FieldError> {\n  // explicitly assert the type so that TS can narrow down FormDTO to FormQueryDTO\n}\n\nexport type EditFormDTO = OmitUnion<FormDTO, 'targetUID' | 'sourceUID'>;\n\nexport type TransformationDTO = {\n  type: SupportedTransformationType;\n  expression?: string;\n  mapValue?: string;\n};\n\nexport interface TransformationFieldDetails {\n  show: boolean;\n  required?: boolean;\n  helpText?: string;\n}\n\ninterface SupportedTransformationTypeDetails {\n  label: string;\n  value: SupportedTransformationType;\n  description?: string;\n  expressionDetails: TransformationFieldDetails;\n  mapValueDetails: TransformationFieldDetails;\n}\n\nexport function getSupportedTransTypeDetails(\n  transType: SupportedTransformationType\n): SupportedTransformationTypeDetails {\n  switch (transType) {\n    case SupportedTransformationType.Logfmt:\n      return {\n        label: t('correlations.trans-details.logfmt-label', 'Logfmt'),\n        value: SupportedTransformationType.Logfmt,\n        description: t(\n          'correlations.trans-details.logfmt-description',\n          'Parse provided field with logfmt to get variables'\n        ),\n        expressionDetails: { show: false },\n        mapValueDetails: { show: false },\n      };\n    case SupportedTransformationType.Regex:\n      return {\n        label: t('correlations.trans-details.regex-label', 'Regular expression'),\n        value: SupportedTransformationType.Regex,\n        description: t(\n          'correlations.trans-details.regex-description',\n          'Field will be parsed with regex. Use named capture groups to return multiple variables, or a single unnamed capture group to add variable to named map value. Regex is case insensitive.'\n        ),\n        expressionDetails: {\n          show: true,\n          required: true,\n          helpText: t(\n            'correlations.trans-details.regex-expression',\n            'Use capture groups to extract a portion of the field.'\n          ),\n        },\n        mapValueDetails: {\n          show: true,\n          required: false,\n          helpText: t(\n            'correlations.trans-details.regex-map-values',\n            'Defines the name of the variable if the capture group is not named.'\n          ),\n        },\n      };\n    default:\n      return {\n        label: transType,\n        value: transType,\n        expressionDetails: { show: false },\n        mapValueDetails: { show: false },\n      };\n  }\n}\n\nexport const getTransformOptions = () => {\n  return Object.values(SupportedTransformationType).map((transformationType) => {\n    const transType = getSupportedTransTypeDetails(transformationType);\n    return {\n      label: transType.label,\n      value: transType.value,\n      description: transType.description,\n    };\n  });\n};\n"],"names":["WizardContext","WizardContextProvider","props","currentPage","setCurrentPage","pages","onSubmit","children","useWizardContext","ctx","WizardContent","navigation","handleSubmit","CurrentPageComponent","isLastPage","nextPage","NavigationComponent","data","Wizard","defaultValues","formMethods","CorrelationsFormContext","CorrelationsFormContextProvider","useCorrelationsFormContext","getInputId","inputName","correlation","getStyles","theme","ConfigureCorrelationBasicInfoForm","register","formState","styles","readOnly","FieldSet","Field","Input","TextArea","index","defaultValue","remove","control","setValue","watch","getValues","keptVals","setKeptVals","typeValue","transformOptions","Stack","Label","Tooltip","Icon","Select","value","currentValues","newValueDetails","IconButton","TransformationsEditor","fields","append","Text","fieldVal","Button","getFormText","queryType","dataSourceName","ConfigureCorrelationSourceForm","withDsUID","fn","ds","currentTargetQuery","currentType","variables","variable","formText","VariableList","name","i","onChange","DataSourcePicker","Card","QueryEditorField","dsUid","invalid","error","datasource","dsLoading","dsError","useAsync","QueryEditor","_","formVals","LoadingPlaceholder","Alert","CORR_TYPES_SELECT","ConfigureCorrelationTargetForm","errors","targetUIDFromCorrelation","targetUID","correlationType","field","castVal","e","CorrelationFormNavigation","prevPage","loading","LastPageNext","NextPage","AddCorrelationForm","onClose","onCreated","execute","useCorrelations","PanelContainer","CloseButton","EditCorrelationForm","onUpdated","EmptyCorrelationsCTA","onClick","canWriteCorrelations","EmptyState","sortDatasource","a","b","column","isCorrelationsReadOnly","loaderWrapper","CorrelationsPage","navModel","useNavModel","isAdding","setIsAddingValue","page","setIsAdding","fetchCorrelations","get","handleAdded","handleUpdated","handleDelete","params","isLastRow","RowActions","sourceUID","provisioned","uid","DeleteButton","columns","InfoCell","DataSourceCell","showEmptyListCTA","addButton","Page","InteractiveTable","ExpendedRow","Pagination","toPage","source","corr","getDatasourceCellStyles","prevValue","noWrap","Badge","prevProps","assertIsQueryTypeError","getSupportedTransTypeDetails","transType","getTransformOptions","transformationType"],"sourceRoot":""}