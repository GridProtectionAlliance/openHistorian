{"version":3,"file":"2533.b029dd967fae73a19b00.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/PluginHelp/PluginHelp.tsx","webpack://grafana/./public/app/features/datasource-drawer/components/DataSourceCard.tsx","webpack://grafana/./public/app/features/datasource-drawer/components/DataSourceDisplay.tsx","webpack://grafana/./public/app/features/datasource-drawer/DataSourceDrawer.tsx","webpack://grafana/./public/app/features/datasource-drawer/DataSourcePicker.tsx","webpack://grafana/./public/app/features/datasource-drawer/DataSourcePickerWithHistory.tsx","webpack://grafana/./public/app/features/query/state/updateQueries.ts","webpack://grafana/./public/app/features/query/components/QueryGroupOptions.tsx","webpack://grafana/./public/app/features/query/components/QueryGroup.tsx"],"sourcesContent":["import React from 'react';\nimport { useAsync } from 'react-use';\n\nimport { renderMarkdown } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { LoadingPlaceholder } from '@grafana/ui';\n\ninterface Props {\n  pluginId: string;\n}\n\nexport function PluginHelp({ pluginId }: Props) {\n  const { value, loading, error } = useAsync(async () => {\n    return getBackendSrv().get(`/api/plugins/${pluginId}/markdown/query_help`);\n  }, []);\n\n  const renderedMarkdown = renderMarkdown(value);\n\n  if (loading) {\n    return <LoadingPlaceholder text=\"Loading help...\" />;\n  }\n\n  if (error) {\n    return <h3>An error occurred when loading help.</h3>;\n  }\n\n  if (value === '') {\n    return <h3>No query help could be found.</h3>;\n  }\n\n  return <div className=\"markdown-html\" dangerouslySetInnerHTML={{ __html: renderedMarkdown }} />;\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { DataSourceInstanceSettings, DataSourceJsonData, GrafanaTheme2 } from '@grafana/data';\nimport { Card, PluginSignatureBadge, Tag, useStyles2 } from '@grafana/ui';\n\nexport interface DataSourceCardProps {\n  onChange: (uid: string) => void;\n  selected?: boolean;\n  ds: DataSourceInstanceSettings<DataSourceJsonData>;\n}\n\nexport function DataSourceCard(props: DataSourceCardProps) {\n  const { selected, ds, onChange } = props;\n  const styles = useStyles2(getStyles);\n  return (\n    <Card className={selected ? styles.selectedDataSource : undefined} key={ds.uid} onClick={() => onChange(ds.uid)}>\n      <Card.Figure>\n        <img alt={`${ds.meta.name} logo`} src={ds.meta.info.logos.large}></img>\n      </Card.Figure>\n      <Card.Meta>\n        {[ds.meta.name, ds.url, ds.isDefault && <Tag key=\"default-tag\" name={'default'} colorIndex={1} />]}\n      </Card.Meta>\n      <Card.Tags>\n        <PluginSignatureBadge status={ds.meta.signature} />\n      </Card.Tags>\n      <Card.Heading>{ds.name}</Card.Heading>\n    </Card>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    selectedDataSource: css`\n      background-color: ${theme.colors.emphasize(theme.colors.background.secondary, 0.1)};\n    `,\n  };\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { DataSourceInstanceSettings, DataSourceJsonData, GrafanaTheme2 } from '@grafana/data';\nimport { DataSourceRef } from '@grafana/schema';\nimport { useStyles2 } from '@grafana/ui';\n\nexport interface DataSourceDisplayProps {\n  dataSource: DataSourceInstanceSettings<DataSourceJsonData> | string | DataSourceRef | null | undefined;\n}\n\nexport function DataSourceDisplay(props: DataSourceDisplayProps) {\n  const { dataSource } = props;\n  const styles = useStyles2(getStyles);\n\n  if (!dataSource) {\n    return <span>Unknown</span>;\n  }\n\n  if (typeof dataSource === 'string') {\n    return <span>${dataSource} - not found</span>;\n  }\n\n  if ('name' in dataSource) {\n    return (\n      <>\n        <img\n          className={styles.pickerDSLogo}\n          alt={`${dataSource.meta.name} logo`}\n          src={dataSource.meta.info.logos.small}\n        ></img>\n        <span>{dataSource.name}</span>\n      </>\n    );\n  }\n\n  return <span>{dataSource.uid} - not found</span>;\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    pickerDSLogo: css`\n      height: 20px;\n      width: 20px;\n      margin-right: ${theme.spacing(1)};\n    `,\n  };\n}\n","import { css } from '@emotion/css';\nimport React, { useCallback, useState } from 'react';\n\nimport { DataSourceInstanceSettings, DataSourceJsonData, DataSourceRef, GrafanaTheme2 } from '@grafana/data';\nimport {\n  Button,\n  CustomScrollbar,\n  Drawer,\n  FileDropzone,\n  FileDropzoneDefaultChildren,\n  Input,\n  ModalsController,\n  useStyles2,\n} from '@grafana/ui';\n\nimport { DataSourceCard } from './components/DataSourceCard';\nimport { DataSourceDisplay } from './components/DataSourceDisplay';\nimport { PickerContentProps, DataSourceDrawerProps } from './types';\n\nexport function DataSourceDrawer(props: DataSourceDrawerProps) {\n  const { current, onChange } = props;\n  const styles = useStyles2(getStyles);\n\n  return (\n    <ModalsController>\n      {({ showModal, hideModal }) => (\n        <Button\n          className={styles.picker}\n          onClick={() => {\n            showModal(PickerContent, {\n              ...props,\n              onDismiss: hideModal,\n              onChange: (ds) => {\n                onChange(ds);\n                hideModal();\n              },\n            });\n          }}\n        >\n          <DataSourceDisplay dataSource={current}></DataSourceDisplay>\n        </Button>\n      )}\n    </ModalsController>\n  );\n}\n\nfunction PickerContent(props: PickerContentProps) {\n  const { datasources, enableFileUpload, recentlyUsed = [], onChange, fileUploadOptions, onDismiss, current } = props;\n  const changeCallback = useCallback(\n    (ds: string) => {\n      onChange(ds);\n    },\n    [onChange]\n  );\n\n  const [filterTerm, onFilterChange] = useState<string>('');\n  const styles = useStyles2(getStyles);\n\n  const filteredDataSources = datasources.filter((ds) => {\n    return ds?.name.toLocaleLowerCase().indexOf(filterTerm.toLocaleLowerCase()) !== -1;\n  });\n\n  return (\n    <Drawer closeOnMaskClick={true} onClose={onDismiss}>\n      <div className={styles.drawerContent}>\n        <div className={styles.filterContainer}>\n          <Input\n            onChange={(e) => {\n              onFilterChange(e.currentTarget.value);\n            }}\n            value={filterTerm}\n          ></Input>\n        </div>\n        <div className={styles.dataSourceList}>\n          <CustomScrollbar>\n            {recentlyUsed\n              .map((uid) => filteredDataSources.find((ds) => ds.uid === uid))\n              .map((ds) => {\n                if (!ds) {\n                  return null;\n                }\n                return (\n                  <DataSourceCard\n                    selected={isDataSourceMatch(ds, current)}\n                    key={ds.uid}\n                    ds={ds}\n                    onChange={changeCallback}\n                  />\n                );\n              })}\n            {recentlyUsed && recentlyUsed.length > 0 && <hr />}\n            {filteredDataSources.map((ds) => (\n              <DataSourceCard\n                selected={isDataSourceMatch(ds, current)}\n                key={ds.uid}\n                ds={ds}\n                onChange={changeCallback}\n              />\n            ))}\n          </CustomScrollbar>\n        </div>\n        {enableFileUpload && (\n          <div className={styles.additionalContent}>\n            <FileDropzone\n              readAs=\"readAsArrayBuffer\"\n              fileListRenderer={() => undefined}\n              options={{\n                ...fileUploadOptions,\n                onDrop: (...args) => {\n                  onDismiss();\n                  fileUploadOptions?.onDrop?.(...args);\n                },\n              }}\n            >\n              <FileDropzoneDefaultChildren primaryText={'Upload file'} />\n            </FileDropzone>\n          </div>\n        )}\n      </div>\n    </Drawer>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    drawerContent: css`\n      display: flex;\n      flex-direction: column;\n      height: 100%;\n    `,\n    picker: css`\n      background: ${theme.colors.background.secondary};\n    `,\n    filterContainer: css`\n      padding-bottom: ${theme.spacing(1)};\n    `,\n    dataSourceList: css`\n      height: 50px;\n      flex-grow: 1;\n    `,\n    additionalContent: css`\n      padding-top: ${theme.spacing(1)};\n    `,\n  };\n}\n\nexport function isDataSourceMatch(\n  ds: DataSourceInstanceSettings<DataSourceJsonData> | undefined,\n  current: string | DataSourceInstanceSettings<DataSourceJsonData> | DataSourceRef | null | undefined\n): boolean | undefined {\n  if (!ds) {\n    return false;\n  }\n  if (!current) {\n    return false;\n  }\n  if (typeof current === 'string') {\n    return ds.uid === current;\n  }\n  return ds.uid === current.uid;\n}\n","import React, { PureComponent } from 'react';\n\n// Components\n\nimport { DataSourceInstanceSettings, DataSourceRef, getDataSourceUID } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { DataSourceJsonData } from '@grafana/schema';\n\nimport { DataSourceDrawer } from './DataSourceDrawer';\nimport { DataSourcePickerProps } from './types';\n\n/**\n * Component state description for the {@link DataSourcePicker}\n *\n * @internal\n */\nexport interface DataSourcePickerState {\n  error?: string;\n}\n\n/**\n * Component to be able to select a datasource from the list of installed and enabled\n * datasources in the current Grafana instance.\n *\n * @internal\n */\nexport class DataSourcePicker extends PureComponent<DataSourcePickerProps, DataSourcePickerState> {\n  dataSourceSrv = getDataSourceSrv();\n\n  state: DataSourcePickerState = {};\n\n  componentDidMount() {\n    const { current } = this.props;\n    const dsSettings = this.dataSourceSrv.getInstanceSettings(current);\n    if (!dsSettings) {\n      this.setState({ error: 'Could not find data source ' + current });\n    }\n  }\n\n  onChange = (ds?: string) => {\n    const dsSettings = this.dataSourceSrv.getInstanceSettings(ds);\n\n    if (dsSettings) {\n      this.props.onChange(dsSettings);\n      this.setState({ error: undefined });\n    }\n  };\n\n  private getCurrentDs(): DataSourceInstanceSettings<DataSourceJsonData> | string | DataSourceRef | null | undefined {\n    const { current, noDefault } = this.props;\n    if (!current && noDefault) {\n      return;\n    }\n\n    const ds = this.dataSourceSrv.getInstanceSettings(current);\n    if (ds) {\n      return ds;\n    }\n\n    return getDataSourceUID(current);\n  }\n\n  getDatasources() {\n    const { alerting, tracing, metrics, mixed, dashboard, variables, annotations, pluginId, type, filter, logs } =\n      this.props;\n\n    return this.dataSourceSrv.getList({\n      alerting,\n      tracing,\n      metrics,\n      logs,\n      dashboard,\n      mixed,\n      variables,\n      annotations,\n      pluginId,\n      filter,\n      type,\n    });\n  }\n\n  render() {\n    const { recentlyUsed, fileUploadOptions, enableFileUpload } = this.props;\n\n    return (\n      <div>\n        <DataSourceDrawer\n          datasources={this.getDatasources()}\n          onChange={this.onChange}\n          recentlyUsed={recentlyUsed}\n          current={this.getCurrentDs()}\n          fileUploadOptions={fileUploadOptions}\n          enableFileUpload={enableFileUpload}\n        />\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport { dateTime } from '@grafana/data';\nimport { LocalStorageValueProvider } from 'app/core/components/LocalStorageValueProvider';\n\nimport { DataSourcePicker } from './DataSourcePicker';\nimport { DataSourcePickerHistoryItem, DataSourcePickerWithHistoryProps } from './types';\n\nconst DS_PICKER_STORAGE_KEY = 'DATASOURCE_PICKER';\n\nexport const DataSourcePickerWithHistory = (props: DataSourcePickerWithHistoryProps) => {\n  return (\n    <LocalStorageValueProvider<DataSourcePickerHistoryItem[]>\n      defaultValue={[]}\n      storageKey={props.localStorageKey ?? DS_PICKER_STORAGE_KEY}\n    >\n      {(rawValues, onSaveToStore) => {\n        return (\n          <DataSourcePicker\n            {...props}\n            recentlyUsed={rawValues.map((dsi) => dsi.uid)} //Filter recently to have a time cutoff\n            onChange={(ds) => {\n              onSaveToStore(updateHistory(rawValues, { uid: ds.uid, lastUse: dateTime(new Date()).toISOString() }));\n              props.onChange(ds);\n            }}\n          ></DataSourcePicker>\n        );\n      }}\n    </LocalStorageValueProvider>\n  );\n};\n\nexport function updateHistory(values: DataSourcePickerHistoryItem[], newValue: DataSourcePickerHistoryItem) {\n  const newHistory = values;\n  const existingIndex = newHistory.findIndex((dpi) => dpi.uid === newValue.uid);\n  if (existingIndex !== -1) {\n    newHistory[existingIndex] = newValue;\n  } else {\n    newHistory.push(newValue);\n  }\n\n  newHistory.sort((a, b) => {\n    const al = dateTime(a.lastUse);\n    const bl = dateTime(b.lastUse);\n    if (al.isBefore(bl)) {\n      return 1;\n    } else if (bl.isBefore(al)) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n\n  return newHistory.slice(0, 3);\n}\n","import { CoreApp, DataQuery, DataSourceApi, hasQueryExportSupport, hasQueryImportSupport } from '@grafana/data';\nimport { isExpressionReference } from '@grafana/runtime/src/utils/DataSourceWithBackend';\n\nexport async function updateQueries(\n  nextDS: DataSourceApi,\n  nextDSUidOrVariableExpression: string,\n  queries: DataQuery[],\n  currentDS?: DataSourceApi\n): Promise<DataQuery[]> {\n  let nextQueries = queries;\n  const datasource = { type: nextDS.type, uid: nextDSUidOrVariableExpression };\n  const DEFAULT_QUERY = { ...nextDS?.getDefaultQuery?.(CoreApp.PanelEditor), datasource, refId: 'A' };\n\n  // we are changing data source type\n  if (currentDS?.meta.id !== nextDS.meta.id) {\n    // If changing to mixed do nothing\n    if (nextDS.meta.mixed) {\n      return queries;\n    }\n    // when both data sources support abstract queries\n    else if (hasQueryExportSupport(currentDS) && hasQueryImportSupport(nextDS)) {\n      const abstractQueries = await currentDS.exportToAbstractQueries(queries);\n      nextQueries = await nextDS.importFromAbstractQueries(abstractQueries);\n    }\n    // when datasource supports query import\n    else if (currentDS && nextDS.importQueries) {\n      nextQueries = await nextDS.importQueries(queries, currentDS);\n    }\n    // Otherwise clear queries\n    else {\n      return [DEFAULT_QUERY];\n    }\n  }\n\n  if (nextQueries.length === 0) {\n    return [DEFAULT_QUERY];\n  }\n\n  // Set data source on all queries except expression queries\n  return nextQueries.map((query) => {\n    if (!isExpressionReference(query.datasource) && !nextDS.meta.mixed) {\n      query.datasource = datasource;\n    }\n    return query;\n  });\n}\n","import { css } from '@emotion/css';\nimport React, { PureComponent, ChangeEvent, FocusEvent } from 'react';\n\nimport { rangeUtil, PanelData, DataSourceApi } from '@grafana/data';\nimport { Switch, Input, InlineField, InlineFormLabel, stylesFactory } from '@grafana/ui';\nimport { QueryOperationRow } from 'app/core/components/QueryOperationRow/QueryOperationRow';\nimport { config } from 'app/core/config';\nimport { QueryGroupOptions } from 'app/types';\n\ninterface Props {\n  options: QueryGroupOptions;\n  dataSource: DataSourceApi;\n  data: PanelData;\n  onChange: (options: QueryGroupOptions) => void;\n}\n\ninterface State {\n  timeRangeFrom: string;\n  timeRangeShift: string;\n  timeRangeHide: boolean;\n  isOpen: boolean;\n  relativeTimeIsValid: boolean;\n  timeShiftIsValid: boolean;\n}\n\nexport class QueryGroupOptionsEditor extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    const { options } = props;\n\n    this.state = {\n      timeRangeFrom: options.timeRange?.from || '',\n      timeRangeShift: options.timeRange?.shift || '',\n      timeRangeHide: options.timeRange?.hide ?? false,\n      isOpen: false,\n      relativeTimeIsValid: true,\n      timeShiftIsValid: true,\n    };\n  }\n\n  onRelativeTimeChange = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      timeRangeFrom: event.target.value,\n    });\n  };\n\n  onTimeShiftChange = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      timeRangeShift: event.target.value,\n    });\n  };\n\n  onOverrideTime = (event: FocusEvent<HTMLInputElement>) => {\n    const { options, onChange } = this.props;\n\n    const newValue = emptyToNull(event.target.value);\n    const isValid = timeRangeValidation(newValue);\n\n    if (isValid && options.timeRange?.from !== newValue) {\n      onChange({\n        ...options,\n        timeRange: {\n          ...(options.timeRange ?? {}),\n          from: newValue,\n        },\n      });\n    }\n\n    this.setState({ relativeTimeIsValid: isValid });\n  };\n\n  onTimeShift = (event: FocusEvent<HTMLInputElement>) => {\n    const { options, onChange } = this.props;\n\n    const newValue = emptyToNull(event.target.value);\n    const isValid = timeRangeValidation(newValue);\n\n    if (isValid && options.timeRange?.shift !== newValue) {\n      onChange({\n        ...options,\n        timeRange: {\n          ...(options.timeRange ?? {}),\n          shift: newValue,\n        },\n      });\n    }\n\n    this.setState({ timeShiftIsValid: isValid });\n  };\n\n  onToggleTimeOverride = () => {\n    const { onChange, options } = this.props;\n\n    this.setState({ timeRangeHide: !this.state.timeRangeHide }, () => {\n      onChange({\n        ...options,\n        timeRange: {\n          ...(options.timeRange ?? {}),\n          hide: this.state.timeRangeHide,\n        },\n      });\n    });\n  };\n\n  onCacheTimeoutBlur = (event: ChangeEvent<HTMLInputElement>) => {\n    const { options, onChange } = this.props;\n    onChange({\n      ...options,\n      cacheTimeout: emptyToNull(event.target.value),\n    });\n  };\n\n  onQueryCachingTTLBlur = (event: ChangeEvent<HTMLInputElement>) => {\n    const { options, onChange } = this.props;\n\n    let ttl: number | null = parseInt(event.target.value, 10);\n\n    if (isNaN(ttl) || ttl === 0) {\n      ttl = null;\n    }\n\n    onChange({\n      ...options,\n      queryCachingTTL: ttl,\n    });\n  };\n\n  onMaxDataPointsBlur = (event: ChangeEvent<HTMLInputElement>) => {\n    const { options, onChange } = this.props;\n\n    let maxDataPoints: number | null = parseInt(event.target.value as string, 10);\n\n    if (isNaN(maxDataPoints) || maxDataPoints === 0) {\n      maxDataPoints = null;\n    }\n\n    if (maxDataPoints !== options.maxDataPoints) {\n      onChange({\n        ...options,\n        maxDataPoints,\n      });\n    }\n  };\n\n  onMinIntervalBlur = (event: ChangeEvent<HTMLInputElement>) => {\n    const { options, onChange } = this.props;\n    const minInterval = emptyToNull(event.target.value);\n    if (minInterval !== options.minInterval) {\n      onChange({\n        ...options,\n        minInterval,\n      });\n    }\n  };\n\n  renderCacheTimeoutOption() {\n    const { dataSource, options } = this.props;\n\n    const tooltip = `If your time series store has a query cache this option can override the default cache timeout. Specify a\n    numeric value in seconds.`;\n\n    if (!dataSource.meta.queryOptions?.cacheTimeout) {\n      return null;\n    }\n\n    return (\n      <div className=\"gf-form-inline\">\n        <div className=\"gf-form\">\n          <InlineFormLabel width={9} tooltip={tooltip}>\n            Cache timeout\n          </InlineFormLabel>\n          <Input\n            type=\"text\"\n            className=\"width-6\"\n            placeholder=\"60\"\n            spellCheck={false}\n            onBlur={this.onCacheTimeoutBlur}\n            defaultValue={options.cacheTimeout ?? ''}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  renderQueryCachingTTLOption() {\n    const { dataSource, options } = this.props;\n\n    const tooltip = `Cache time-to-live: How long results from this queries in this panel will be cached, in milliseconds. Defaults to the TTL in the caching configuration for this datasource.`;\n\n    if (!dataSource.cachingConfig?.enabled) {\n      return null;\n    }\n\n    return (\n      <div className=\"gf-form-inline\">\n        <div className=\"gf-form\">\n          <InlineFormLabel width={9} tooltip={tooltip}>\n            Cache TTL\n          </InlineFormLabel>\n          <Input\n            type=\"number\"\n            className=\"width-6\"\n            placeholder={`${dataSource.cachingConfig.TTLMs}`}\n            spellCheck={false}\n            onBlur={this.onQueryCachingTTLBlur}\n            defaultValue={options.queryCachingTTL ?? undefined}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  renderMaxDataPointsOption() {\n    const { data, options } = this.props;\n    const realMd = data.request?.maxDataPoints;\n    const value = options.maxDataPoints ?? '';\n    const isAuto = value === '';\n\n    return (\n      <div className=\"gf-form-inline\">\n        <div className=\"gf-form\">\n          <InlineFormLabel\n            width={9}\n            tooltip={\n              <>\n                The maximum data points per series. Used directly by some data sources and used in calculation of auto\n                interval. With streaming data this value is used for the rolling buffer.\n              </>\n            }\n          >\n            Max data points\n          </InlineFormLabel>\n          <Input\n            type=\"number\"\n            className=\"width-6\"\n            placeholder={`${realMd}`}\n            spellCheck={false}\n            onBlur={this.onMaxDataPointsBlur}\n            defaultValue={value}\n          />\n          {isAuto && (\n            <>\n              <div className=\"gf-form-label query-segment-operator\">=</div>\n              <div className=\"gf-form-label\">Width of panel</div>\n            </>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  renderIntervalOption() {\n    const { data, dataSource, options } = this.props;\n    const realInterval = data.request?.interval;\n    const minIntervalOnDs = dataSource.interval ?? 'No limit';\n\n    return (\n      <>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel\n              width={9}\n              tooltip={\n                <>\n                  A lower limit for the interval. Recommended to be set to write frequency, for example <code>1m</code>{' '}\n                  if your data is written every minute. Default value can be set in data source settings for most data\n                  sources.\n                </>\n              }\n            >\n              Min interval\n            </InlineFormLabel>\n            <Input\n              type=\"text\"\n              className=\"width-6\"\n              placeholder={`${minIntervalOnDs}`}\n              spellCheck={false}\n              onBlur={this.onMinIntervalBlur}\n              defaultValue={options.minInterval ?? ''}\n            />\n          </div>\n        </div>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel\n              width={9}\n              tooltip={\n                <>\n                  The evaluated interval that is sent to data source and is used in <code>$__interval</code> and{' '}\n                  <code>$__interval_ms</code>\n                </>\n              }\n            >\n              Interval\n            </InlineFormLabel>\n            <InlineFormLabel width={6}>{realInterval}</InlineFormLabel>\n            <div className=\"gf-form-label query-segment-operator\">=</div>\n            <div className=\"gf-form-label\">Time range / max data points</div>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  onOpenOptions = () => {\n    this.setState({ isOpen: true });\n  };\n\n  onCloseOptions = () => {\n    this.setState({ isOpen: false });\n  };\n\n  renderCollapsedText(styles: StylesType): React.ReactNode | undefined {\n    const { data, options } = this.props;\n    const { isOpen } = this.state;\n\n    if (isOpen) {\n      return undefined;\n    }\n\n    let mdDesc = options.maxDataPoints ?? '';\n    if (mdDesc === '' && data.request) {\n      mdDesc = `auto = ${data.request.maxDataPoints}`;\n    }\n\n    let intervalDesc = options.minInterval;\n    if (data.request) {\n      intervalDesc = `${data.request.interval}`;\n    }\n\n    return (\n      <>\n        {<div className={styles.collapsedText}>MD = {mdDesc}</div>}\n        {<div className={styles.collapsedText}>Interval = {intervalDesc}</div>}\n      </>\n    );\n  }\n\n  render() {\n    const { timeRangeHide: hideTimeOverride, relativeTimeIsValid, timeShiftIsValid } = this.state;\n    const { timeRangeFrom: relativeTime, timeRangeShift: timeShift, isOpen } = this.state;\n    const styles = getStyles();\n\n    return (\n      <QueryOperationRow\n        id=\"Query options\"\n        index={0}\n        title=\"Query options\"\n        headerElement={this.renderCollapsedText(styles)}\n        isOpen={isOpen}\n        onOpen={this.onOpenOptions}\n        onClose={this.onCloseOptions}\n      >\n        {this.renderMaxDataPointsOption()}\n        {this.renderIntervalOption()}\n        {this.renderCacheTimeoutOption()}\n        {this.renderQueryCachingTTLOption()}\n\n        <div className=\"gf-form\">\n          <InlineFormLabel width={9}>Relative time</InlineFormLabel>\n          <Input\n            type=\"text\"\n            className=\"width-6\"\n            placeholder=\"1h\"\n            onChange={this.onRelativeTimeChange}\n            onBlur={this.onOverrideTime}\n            invalid={!relativeTimeIsValid}\n            value={relativeTime}\n          />\n        </div>\n\n        <div className=\"gf-form\">\n          <span className=\"gf-form-label width-9\">Time shift</span>\n          <Input\n            type=\"text\"\n            className=\"width-6\"\n            placeholder=\"1h\"\n            onChange={this.onTimeShiftChange}\n            onBlur={this.onTimeShift}\n            invalid={!timeShiftIsValid}\n            value={timeShift}\n          />\n        </div>\n        {(timeShift || relativeTime) && (\n          <div className=\"gf-form-inline\">\n            <InlineField label=\"Hide time info\" labelWidth={18}>\n              <Switch value={hideTimeOverride} onChange={this.onToggleTimeOverride} />\n            </InlineField>\n          </div>\n        )}\n      </QueryOperationRow>\n    );\n  }\n}\n\nconst timeRangeValidation = (value: string | null) => {\n  if (!value) {\n    return true;\n  }\n\n  return rangeUtil.isValidTimeSpan(value);\n};\n\nconst emptyToNull = (value: string) => {\n  return value === '' ? null : value;\n};\n\nconst getStyles = stylesFactory(() => {\n  const { theme } = config;\n\n  return {\n    collapsedText: css`\n      margin-left: ${theme.spacing.md};\n      font-size: ${theme.typography.size.sm};\n      color: ${theme.colors.textWeak};\n    `,\n  };\n});\n\ntype StylesType = ReturnType<typeof getStyles>;\n","import { css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\nimport { DropEvent, FileRejection } from 'react-dropzone';\nimport { Unsubscribable } from 'rxjs';\n\nimport {\n  CoreApp,\n  DataFrameJSON,\n  dataFrameToJSON,\n  DataQuery,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  getDefaultTimeRange,\n  LoadingState,\n  PanelData,\n} from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { DataSourcePicker, getDataSourceSrv } from '@grafana/runtime';\nimport { Button, CustomScrollbar, HorizontalGroup, InlineFormLabel, Modal, stylesFactory } from '@grafana/ui';\nimport { PluginHelp } from 'app/core/components/PluginHelp/PluginHelp';\nimport config from 'app/core/config';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport { addQuery, queryIsEmpty } from 'app/core/utils/query';\nimport * as DFImport from 'app/features/dataframe-import';\nimport { DataSourcePickerWithHistory } from 'app/features/datasource-drawer/DataSourcePickerWithHistory';\nimport { dataSource as expressionDatasource } from 'app/features/expressions/ExpressionDatasource';\nimport { DashboardQueryEditor, isSharedDashboardQuery } from 'app/plugins/datasource/dashboard';\nimport { GrafanaQuery, GrafanaQueryType } from 'app/plugins/datasource/grafana/types';\nimport { QueryGroupDataSource, QueryGroupOptions } from 'app/types';\n\nimport { PanelQueryRunner } from '../state/PanelQueryRunner';\nimport { updateQueries } from '../state/updateQueries';\n\nimport { GroupActionComponents } from './QueryActionComponent';\nimport { QueryEditorRows } from './QueryEditorRows';\nimport { QueryGroupOptionsEditor } from './QueryGroupOptions';\n\nexport interface Props {\n  queryRunner: PanelQueryRunner;\n  options: QueryGroupOptions;\n  onOpenQueryInspector?: () => void;\n  onRunQueries: () => void;\n  onOptionsChange: (options: QueryGroupOptions) => void;\n}\n\ninterface State {\n  dataSource?: DataSourceApi;\n  dsSettings?: DataSourceInstanceSettings;\n  queries: DataQuery[];\n  helpContent: React.ReactNode;\n  isLoadingHelp: boolean;\n  isPickerOpen: boolean;\n  isAddingMixed: boolean;\n  data: PanelData;\n  isHelpOpen: boolean;\n  defaultDataSource?: DataSourceApi;\n  scrollElement?: HTMLDivElement;\n  savedQueryUid?: string | null;\n  initialState: {\n    queries: DataQuery[];\n    dataSource?: QueryGroupDataSource;\n    savedQueryUid?: string | null;\n  };\n}\n\nexport class QueryGroup extends PureComponent<Props, State> {\n  backendSrv = backendSrv;\n  dataSourceSrv = getDataSourceSrv();\n  querySubscription: Unsubscribable | null = null;\n\n  state: State = {\n    isLoadingHelp: false,\n    helpContent: null,\n    isPickerOpen: false,\n    isAddingMixed: false,\n    isHelpOpen: false,\n    queries: [],\n    savedQueryUid: null,\n    initialState: {\n      queries: [],\n      savedQueryUid: null,\n    },\n    data: {\n      state: LoadingState.NotStarted,\n      series: [],\n      timeRange: getDefaultTimeRange(),\n    },\n  };\n\n  async componentDidMount() {\n    const { options, queryRunner } = this.props;\n\n    this.querySubscription = queryRunner.getData({ withTransforms: false, withFieldConfig: false }).subscribe({\n      next: (data: PanelData) => this.onPanelDataUpdate(data),\n    });\n\n    try {\n      const ds = await this.dataSourceSrv.get(options.dataSource);\n      const dsSettings = this.dataSourceSrv.getInstanceSettings(options.dataSource);\n\n      const defaultDataSource = await this.dataSourceSrv.get();\n      const datasource = ds.getRef();\n      const queries = options.queries.map((q) => ({\n        ...(queryIsEmpty(q) && ds?.getDefaultQuery?.(CoreApp.PanelEditor)),\n        datasource,\n        ...q,\n      }));\n      this.setState({\n        queries,\n        dataSource: ds,\n        dsSettings,\n        defaultDataSource,\n        savedQueryUid: options.savedQueryUid,\n        initialState: {\n          queries: options.queries.map((q) => ({ ...q })),\n          dataSource: { ...options.dataSource },\n          savedQueryUid: options.savedQueryUid,\n        },\n      });\n    } catch (error) {\n      console.log('failed to load data source', error);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.querySubscription) {\n      this.querySubscription.unsubscribe();\n      this.querySubscription = null;\n    }\n  }\n\n  onPanelDataUpdate(data: PanelData) {\n    this.setState({ data });\n  }\n\n  onChangeDataSource = async (newSettings: DataSourceInstanceSettings) => {\n    const { dsSettings } = this.state;\n    const currentDS = dsSettings ? await getDataSourceSrv().get(dsSettings.uid) : undefined;\n    const nextDS = await getDataSourceSrv().get(newSettings.uid);\n\n    // We need to pass in newSettings.uid as well here as that can be a variable expression and we want to store that in the query model not the current ds variable value\n    const queries = await updateQueries(nextDS, newSettings.uid, this.state.queries, currentDS);\n\n    const dataSource = await this.dataSourceSrv.get(newSettings.name);\n    this.onChange({\n      queries,\n      savedQueryUid: null,\n      dataSource: {\n        name: newSettings.name,\n        uid: newSettings.uid,\n        type: newSettings.meta.id,\n        default: newSettings.isDefault,\n      },\n    });\n\n    this.setState({\n      queries,\n      savedQueryUid: null,\n      dataSource: dataSource,\n      dsSettings: newSettings,\n    });\n  };\n\n  onAddQueryClick = () => {\n    const { queries } = this.state;\n    this.onQueriesChange(addQuery(queries, this.newQuery()));\n    this.onScrollBottom();\n  };\n\n  newQuery(): Partial<DataQuery> {\n    const { dsSettings, defaultDataSource } = this.state;\n\n    const ds = !dsSettings?.meta.mixed ? dsSettings : defaultDataSource;\n\n    return {\n      ...this.state.dataSource?.getDefaultQuery?.(CoreApp.PanelEditor),\n      datasource: { uid: ds?.uid, type: ds?.type },\n    };\n  }\n\n  onChange(changedProps: Partial<QueryGroupOptions>) {\n    this.props.onOptionsChange({\n      ...this.props.options,\n      ...changedProps,\n    });\n  }\n\n  onAddExpressionClick = () => {\n    this.onQueriesChange(addQuery(this.state.queries, expressionDatasource.newQuery()));\n    this.onScrollBottom();\n  };\n\n  onScrollBottom = () => {\n    setTimeout(() => {\n      if (this.state.scrollElement) {\n        this.state.scrollElement.scrollTo({ top: 10000 });\n      }\n    }, 20);\n  };\n\n  onUpdateAndRun = (options: QueryGroupOptions) => {\n    this.props.onOptionsChange(options);\n    this.props.onRunQueries();\n  };\n\n  renderTopSection(styles: QueriesTabStyles) {\n    const { onOpenQueryInspector, options } = this.props;\n    const { dataSource, data } = this.state;\n\n    return (\n      <div>\n        <div className={styles.dataSourceRow}>\n          <InlineFormLabel htmlFor=\"data-source-picker\" width={'auto'}>\n            Data source\n          </InlineFormLabel>\n          <div className={styles.dataSourceRowItem}>\n            {config.featureToggles.drawerDataSourcePicker ? (\n              <DataSourcePickerWithHistory\n                onChange={this.onChangeDataSource}\n                current={options.dataSource}\n                metrics={true}\n                mixed={true}\n                dashboard={true}\n                variables={true}\n                enableFileUpload={config.featureToggles.editPanelCSVDragAndDrop}\n                fileUploadOptions={{\n                  onDrop: this.onFileDrop,\n                  maxSize: DFImport.maxFileSize,\n                  multiple: false,\n                  accept: DFImport.acceptedFiles,\n                }}\n              ></DataSourcePickerWithHistory>\n            ) : (\n              <DataSourcePicker\n                onChange={this.onChangeDataSource}\n                current={options.dataSource}\n                metrics={true}\n                mixed={true}\n                dashboard={true}\n                variables={true}\n              ></DataSourcePicker>\n            )}\n          </div>\n          {dataSource && (\n            <>\n              <div className={styles.dataSourceRowItem}>\n                <Button\n                  variant=\"secondary\"\n                  icon=\"question-circle\"\n                  title=\"Open data source help\"\n                  onClick={this.onOpenHelp}\n                  data-testid=\"query-tab-help-button\"\n                />\n              </div>\n              <div className={styles.dataSourceRowItemOptions}>\n                <QueryGroupOptionsEditor\n                  options={options}\n                  dataSource={dataSource}\n                  data={data}\n                  onChange={this.onUpdateAndRun}\n                />\n              </div>\n              {onOpenQueryInspector && (\n                <div className={styles.dataSourceRowItem}>\n                  <Button\n                    variant=\"secondary\"\n                    onClick={onOpenQueryInspector}\n                    aria-label={selectors.components.QueryTab.queryInspectorButton}\n                  >\n                    Query inspector\n                  </Button>\n                </div>\n              )}\n            </>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  onOpenHelp = () => {\n    this.setState({ isHelpOpen: true });\n  };\n\n  onCloseHelp = () => {\n    this.setState({ isHelpOpen: false });\n  };\n\n  renderMixedPicker = () => {\n    return (\n      <DataSourcePicker\n        mixed={false}\n        onChange={this.onAddMixedQuery}\n        current={null}\n        autoFocus={true}\n        variables={true}\n        onBlur={this.onMixedPickerBlur}\n        openMenuOnFocus={true}\n      />\n    );\n  };\n\n  onAddMixedQuery = (datasource: any) => {\n    this.onAddQuery({ datasource: datasource.name });\n    this.setState({ isAddingMixed: false });\n  };\n\n  onMixedPickerBlur = () => {\n    this.setState({ isAddingMixed: false });\n  };\n\n  onAddQuery = (query: Partial<DataQuery>) => {\n    const { dsSettings, queries } = this.state;\n    this.onQueriesChange(addQuery(queries, query, { type: dsSettings?.type, uid: dsSettings?.uid }));\n    this.onScrollBottom();\n  };\n\n  onFileDrop = (acceptedFiles: File[], fileRejections: FileRejection[], event: DropEvent) => {\n    DFImport.filesToDataframes(acceptedFiles).subscribe(async (next) => {\n      const snapshot: DataFrameJSON[] = [];\n      next.dataFrames.forEach((df) => {\n        const dataframeJson = dataFrameToJSON(df);\n        snapshot.push(dataframeJson);\n      });\n      const ds = getDataSourceSrv().getInstanceSettings('-- Grafana --');\n      await this.onChangeDataSource(ds!);\n      this.onQueriesChange([\n        {\n          refId: 'A',\n          datasource: {\n            type: 'grafana',\n            uid: 'grafana',\n          },\n          queryType: GrafanaQueryType.Snapshot,\n          snapshot: snapshot,\n          file: next.file,\n        },\n      ]);\n      this.props.onRunQueries();\n    });\n  };\n\n  onQueriesChange = (queries: DataQuery[] | GrafanaQuery[]) => {\n    this.onChange({ queries });\n    this.setState({ queries });\n  };\n\n  renderQueries(dsSettings: DataSourceInstanceSettings) {\n    const { onRunQueries } = this.props;\n    const { data, queries } = this.state;\n    if (isSharedDashboardQuery(dsSettings.name)) {\n      return (\n        <DashboardQueryEditor\n          queries={queries}\n          panelData={data}\n          onChange={this.onQueriesChange}\n          onRunQueries={onRunQueries}\n        />\n      );\n    }\n\n    return (\n      <div aria-label={selectors.components.QueryTab.content}>\n        <QueryEditorRows\n          queries={queries}\n          dsSettings={dsSettings}\n          onQueriesChange={this.onQueriesChange}\n          onAddQuery={this.onAddQuery}\n          onRunQueries={onRunQueries}\n          data={data}\n        />\n      </div>\n    );\n  }\n\n  isExpressionsSupported(dsSettings: DataSourceInstanceSettings): boolean {\n    return (dsSettings.meta.alerting || dsSettings.meta.mixed) === true;\n  }\n\n  renderExtraActions() {\n    return GroupActionComponents.getAllExtraRenderAction()\n      .map((action, index) =>\n        action({\n          onAddQuery: this.onAddQuery,\n          onChangeDataSource: this.onChangeDataSource,\n          key: index,\n        })\n      )\n      .filter(Boolean);\n  }\n\n  renderAddQueryRow(dsSettings: DataSourceInstanceSettings, styles: QueriesTabStyles) {\n    const { isAddingMixed } = this.state;\n    const showAddButton = !(isAddingMixed || isSharedDashboardQuery(dsSettings.name));\n\n    return (\n      <HorizontalGroup spacing=\"md\" align=\"flex-start\">\n        {showAddButton && (\n          <Button\n            icon=\"plus\"\n            onClick={this.onAddQueryClick}\n            variant=\"secondary\"\n            aria-label={selectors.components.QueryTab.addQuery}\n            data-testid=\"query-tab-add-query\"\n          >\n            Query\n          </Button>\n        )}\n        {config.expressionsEnabled && this.isExpressionsSupported(dsSettings) && (\n          <Button\n            icon=\"plus\"\n            onClick={this.onAddExpressionClick}\n            variant=\"secondary\"\n            className={styles.expressionButton}\n            data-testid=\"query-tab-add-expression\"\n          >\n            <span>Expression&nbsp;</span>\n          </Button>\n        )}\n        {this.renderExtraActions()}\n      </HorizontalGroup>\n    );\n  }\n\n  setScrollRef = (scrollElement: HTMLDivElement): void => {\n    this.setState({ scrollElement });\n  };\n\n  render() {\n    const { isHelpOpen, dsSettings } = this.state;\n    const styles = getStyles();\n\n    return (\n      <CustomScrollbar autoHeightMin=\"100%\" scrollRefCallback={this.setScrollRef}>\n        <div className={styles.innerWrapper}>\n          {this.renderTopSection(styles)}\n          {dsSettings && (\n            <>\n              <div className={styles.queriesWrapper}>{this.renderQueries(dsSettings)}</div>\n              {this.renderAddQueryRow(dsSettings, styles)}\n              {isHelpOpen && (\n                <Modal title=\"Data source help\" isOpen={true} onDismiss={this.onCloseHelp}>\n                  <PluginHelp pluginId={dsSettings.meta.id} />\n                </Modal>\n              )}\n            </>\n          )}\n        </div>\n      </CustomScrollbar>\n    );\n  }\n}\n\nconst getStyles = stylesFactory(() => {\n  const { theme } = config;\n\n  return {\n    innerWrapper: css`\n      display: flex;\n      flex-direction: column;\n      padding: ${theme.spacing.md};\n    `,\n    dataSourceRow: css`\n      display: flex;\n      margin-bottom: ${theme.spacing.md};\n    `,\n    dataSourceRowItem: css`\n      margin-right: ${theme.spacing.inlineFormMargin};\n    `,\n    dataSourceRowItemOptions: css`\n      flex-grow: 1;\n      margin-right: ${theme.spacing.inlineFormMargin};\n    `,\n    queriesWrapper: css`\n      padding-bottom: 16px;\n    `,\n    expressionWrapper: css``,\n    expressionButton: css`\n      margin-right: ${theme.spacing.sm};\n    `,\n  };\n});\n\ntype QueriesTabStyles = ReturnType<typeof getStyles>;\n"],"names":["PluginHelp","pluginId","value","loading","error","useAsync","renderedMarkdown","LoadingPlaceholder","DataSourceCard","props","selected","ds","onChange","styles","getStyles","Card","Tag","PluginSignatureBadge","theme","DataSourceDisplay","dataSource","DataSourceDrawer","current","showModal","hideModal","Button","PickerContent","datasources","enableFileUpload","recentlyUsed","fileUploadOptions","onDismiss","changeCallback","filterTerm","onFilterChange","filteredDataSources","Drawer","Input","e","CustomScrollbar","uid","isDataSourceMatch","FileDropzone","args","dsSettings","noDefault","alerting","tracing","metrics","mixed","dashboard","variables","annotations","type","filter","logs","DS_PICKER_STORAGE_KEY","DataSourcePickerWithHistory","LocalStorageValueProvider","rawValues","onSaveToStore","dsi","updateHistory","values","newValue","newHistory","existingIndex","dpi","a","b","al","bl","updateQueries","nextDS","nextDSUidOrVariableExpression","queries","currentDS","nextQueries","datasource","DEFAULT_QUERY","abstractQueries","query","QueryGroupOptionsEditor","event","options","emptyToNull","isValid","timeRangeValidation","ttl","maxDataPoints","minInterval","tooltip","data","realMd","isAuto","realInterval","minIntervalOnDs","isOpen","mdDesc","intervalDesc","hideTimeOverride","relativeTimeIsValid","timeShiftIsValid","relativeTime","timeShift","QueryOperationRow","InlineField","Switch","stylesFactory","config","QueryGroup","newSettings","DataSourcePicker","acceptedFiles","fileRejections","next","snapshot","df","dataframeJson","scrollElement","queryRunner","defaultDataSource","q","changedProps","onOpenQueryInspector","selectors","onRunQueries","QueryEditorRows","action","index","isAddingMixed","showAddButton","isHelpOpen","Modal"],"sourceRoot":""}