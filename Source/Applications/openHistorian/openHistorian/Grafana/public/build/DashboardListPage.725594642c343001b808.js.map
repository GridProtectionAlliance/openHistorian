{"version":3,"file":"DashboardListPage.725594642c343001b808.js","mappings":"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","sources":["webpack://grafana/./public/app/features/search/tempI18nPhrases.ts","webpack://grafana/./public/app/features/browse-dashboards/components/BrowseActions/BrowseActions.tsx","webpack://grafana/./public/app/features/browse-dashboards/components/BrowseFilters.tsx","webpack://grafana/./public/app/features/browse-dashboards/types.ts","webpack://grafana/./public/app/features/browse-dashboards/components/CheckboxCell.tsx","webpack://grafana/./public/app/features/browse-dashboards/components/CheckboxHeaderCell.tsx","webpack://grafana/./public/app/features/browse-dashboards/components/NameCell.tsx","webpack://grafana/./public/app/features/browse-dashboards/components/TagsCell.tsx","webpack://grafana/./public/app/features/browse-dashboards/components/DashboardsTree.tsx","webpack://grafana/./public/app/features/browse-dashboards/components/BrowseView.tsx","webpack://grafana/./public/app/features/browse-dashboards/components/NewFolderForm.tsx","webpack://grafana/./public/app/features/browse-dashboards/components/CreateNewButton.tsx","webpack://grafana/./public/app/features/browse-dashboards/BrowseDashboardsPage.tsx","webpack://grafana/./public/app/features/browse-dashboards/components/BrowseActions/DeleteModal.tsx","webpack://grafana/./public/app/features/browse-dashboards/components/BrowseActions/MoveModal.tsx","webpack://grafana/./public/app/features/browse-dashboards/components/FolderActionsButton.tsx","webpack://grafana/./public/app/features/browse-dashboards/components/SearchView.tsx","webpack://grafana/./public/app/features/browse-dashboards/permissions.ts","webpack://grafana/./public/app/features/search/page/components/ActionRow.tsx","webpack://grafana/./public/app/features/search/state/SearchStateManager.ts"],"sourcesContent":["// Temporary place to collect phrases we reuse between new and old browse/search\n// TODO: remove this when new Browse Dashboards UI is no longer feature flagged\n\nimport { t } from 'app/core/internationalization';\n\nexport function getSearchPlaceholder(includePanels = false) {\n  return includePanels\n    ? t('search.search-input.include-panels-placeholder', 'Search for dashboards, folders, and panels')\n    : t('search.search-input.placeholder', 'Search for dashboards and folders');\n}\n\nexport function getNewDashboardPhrase() {\n  return t('search.dashboard-actions.new-dashboard', 'New dashboard');\n}\n\nexport function getNewFolderPhrase() {\n  return t('search.dashboard-actions.new-folder', 'New folder');\n}\n\nexport function getImportPhrase() {\n  return t('search.dashboard-actions.import', 'Import');\n}\n\nexport function getNewPhrase() {\n  return t('search.dashboard-actions.new', 'New');\n}\n","import { useMemo } from 'react';\n\nimport { config, reportInteraction } from '@grafana/runtime';\nimport { Button, Stack, Tooltip } from '@grafana/ui';\nimport appEvents from 'app/core/app_events';\nimport { t, Trans } from 'app/core/internationalization';\nimport { useSearchStateManager } from 'app/features/search/state/SearchStateManager';\nimport { useDispatch } from 'app/types';\nimport { ShowModalReactEvent } from 'app/types/events';\n\nimport { useDeleteItemsMutation, useMoveItemsMutation } from '../../api/browseDashboardsAPI';\nimport { setAllSelection, useActionSelectionState } from '../../state';\nimport { DashboardTreeSelection } from '../../types';\n\nimport { DeleteModal } from './DeleteModal';\nimport { MoveModal } from './MoveModal';\n\nexport interface Props {}\n\nexport function BrowseActions() {\n  const dispatch = useDispatch();\n  const selectedItems = useActionSelectionState();\n  const [deleteItems] = useDeleteItemsMutation();\n  const [moveItems] = useMoveItemsMutation();\n  const [, stateManager] = useSearchStateManager();\n\n  // Folders can only be moved if nested folders is enabled\n  const moveIsInvalid = useMemo(\n    () => !config.featureToggles.nestedFolders && Object.values(selectedItems.folder).some((v) => v),\n    [selectedItems]\n  );\n\n  const isSearching = stateManager.hasSearchFilters();\n\n  const onActionComplete = () => {\n    dispatch(setAllSelection({ isSelected: false, folderUID: undefined }));\n\n    if (isSearching) {\n      // Redo search query\n      stateManager.doSearchWithDebounce();\n    }\n  };\n\n  const onDelete = async () => {\n    await deleteItems({ selectedItems });\n    trackAction('delete', selectedItems);\n    onActionComplete();\n  };\n\n  const onMove = async (destinationUID: string) => {\n    await moveItems({ selectedItems, destinationUID });\n    trackAction('move', selectedItems);\n    onActionComplete();\n  };\n\n  const showMoveModal = () => {\n    appEvents.publish(\n      new ShowModalReactEvent({\n        component: MoveModal,\n        props: {\n          selectedItems,\n          onConfirm: onMove,\n        },\n      })\n    );\n  };\n\n  const showDeleteModal = () => {\n    appEvents.publish(\n      new ShowModalReactEvent({\n        component: DeleteModal,\n        props: {\n          selectedItems,\n          onConfirm: onDelete,\n        },\n      })\n    );\n  };\n\n  const moveButton = (\n    <Button onClick={showMoveModal} variant=\"secondary\" disabled={moveIsInvalid}>\n      <Trans i18nKey=\"browse-dashboards.action.move-button\">Move</Trans>\n    </Button>\n  );\n\n  return (\n    <Stack gap={1} data-testid=\"manage-actions\">\n      {moveIsInvalid ? (\n        <Tooltip content={t('browse-dashboards.action.cannot-move-folders', 'Folders cannot be moved')}>\n          {moveButton}\n        </Tooltip>\n      ) : (\n        moveButton\n      )}\n\n      <Button onClick={showDeleteModal} variant=\"destructive\">\n        <Trans i18nKey=\"browse-dashboards.action.delete-button\">Delete</Trans>\n      </Button>\n    </Stack>\n  );\n}\n\nconst actionMap = {\n  move: 'grafana_manage_dashboards_item_moved',\n  delete: 'grafana_manage_dashboards_item_deleted',\n} as const;\n\nfunction trackAction(action: keyof typeof actionMap, selectedItems: Omit<DashboardTreeSelection, 'panel' | '$all'>) {\n  const selectedDashboards = Object.keys(selectedItems.dashboard).filter((uid) => selectedItems.dashboard[uid]);\n  const selectedFolders = Object.keys(selectedItems.folder).filter((uid) => selectedItems.folder[uid]);\n\n  reportInteraction(actionMap[action], {\n    item_counts: {\n      folder: selectedFolders.length,\n      dashboard: selectedDashboards.length,\n    },\n    source: 'tree_actions',\n    restore_enabled: config.featureToggles.dashboardRestoreUI,\n  });\n}\n","import { ActionRow } from 'app/features/search/page/components/ActionRow';\nimport { getGrafanaSearcher } from 'app/features/search/service';\nimport { useSearchStateManager } from 'app/features/search/state/SearchStateManager';\n\nexport function BrowseFilters() {\n  const [searchState, stateManager] = useSearchStateManager();\n\n  return (\n    <ActionRow\n      showStarredFilter\n      showLayout\n      state={searchState}\n      getTagOptions={stateManager.getTagOptions}\n      getSortOptions={getGrafanaSearcher().getSortOptions}\n      sortPlaceholder={getGrafanaSearcher().sortPlaceholder}\n      onLayoutChange={stateManager.onLayoutChange}\n      onStarredFilterChange={stateManager.onStarredFilterChange}\n      onSortChange={stateManager.onSortChange}\n      onTagFilterChange={stateManager.onTagFilterChange}\n      onDatasourceChange={stateManager.onDatasourceChange}\n      onPanelTypeChange={stateManager.onPanelTypeChange}\n      onSetIncludePanels={stateManager.onSetIncludePanels}\n    />\n  );\n}\n","import { CellProps, Column, HeaderProps } from 'react-table';\n\nimport { DashboardViewItem, DashboardViewItemKind } from 'app/features/search/types';\n\nexport type DashboardTreeSelection = Record<DashboardViewItemKind, Record<string, boolean | undefined>> & {\n  $all: boolean;\n};\n\n/**\n * Stores children at a particular location in the tree, and information\n * required for pagination.\n */\nexport type DashboardViewItemCollection = {\n  items: DashboardViewItem[];\n  lastFetchedKind: 'folder' | 'dashboard';\n  lastFetchedPage: number;\n  lastKindHasMoreItems: boolean;\n  isFullyLoaded: boolean;\n};\n\nexport interface BrowseDashboardsState {\n  rootItems: DashboardViewItemCollection | undefined;\n  childrenByParentUID: Record<string, DashboardViewItemCollection | undefined>;\n  selectedItems: DashboardTreeSelection;\n\n  // Only folders can ever be open or closed, so no need to seperate this by kind\n  openFolders: Record<string, boolean>;\n}\n\nexport interface UIDashboardViewItem {\n  kind: 'ui';\n  uiKind: 'empty-folder' | 'pagination-placeholder' | 'divider';\n  uid: string;\n}\n\nexport type DashboardViewItemWithUIItems = DashboardViewItem | UIDashboardViewItem;\n\nexport interface DashboardsTreeItem<T extends DashboardViewItemWithUIItems = DashboardViewItemWithUIItems> {\n  item: T;\n  level: number;\n  isOpen: boolean;\n  parentUID?: string;\n}\n\ninterface RendererUserProps {\n  // Note: userProps for cell renderers (e.g. second argument in `cell.render('Cell', foo)` )\n  // aren't typed, so we must be careful when accessing this\n  isSelected?: (kind: DashboardViewItem | '$all') => SelectionState;\n  onAllSelectionChange?: (newState: boolean) => void;\n  onItemSelectionChange?: (item: DashboardViewItem, newState: boolean) => void;\n  treeID?: string;\n}\n\nexport type DashboardsTreeColumn = Column<DashboardsTreeItem>;\nexport type DashboardsTreeCellProps = CellProps<DashboardsTreeItem, unknown> & RendererUserProps;\nexport type DashboardTreeHeaderProps = HeaderProps<DashboardsTreeItem> & RendererUserProps;\n\nexport enum SelectionState {\n  Unselected,\n  Selected,\n  Mixed,\n}\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Checkbox, useStyles2 } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { DashboardsTreeCellProps, SelectionState } from '../types';\n\nimport { isSharedWithMe } from './utils';\n\nexport default function CheckboxCell({\n  row: { original: row },\n  isSelected,\n  onItemSelectionChange,\n}: DashboardsTreeCellProps) {\n  const item = row.item;\n\n  if (!isSelected) {\n    return <CheckboxSpacer />;\n  }\n\n  if (item.kind === 'ui') {\n    if (item.uiKind === 'pagination-placeholder') {\n      return <Checkbox disabled value={false} />;\n    } else {\n      return <CheckboxSpacer />;\n    }\n  }\n\n  if (isSharedWithMe(item.uid)) {\n    return <CheckboxSpacer />;\n  }\n\n  const state = isSelected(item);\n\n  return (\n    <Checkbox\n      data-testid={selectors.pages.BrowseDashboards.table.checkbox(item.uid)}\n      aria-label={t('browse-dashboards.dashboards-tree.select-checkbox', 'Select')}\n      value={state === SelectionState.Selected}\n      indeterminate={state === SelectionState.Mixed}\n      onChange={(ev) => onItemSelectionChange?.(item, ev.currentTarget.checked)}\n    />\n  );\n}\n\nfunction CheckboxSpacer() {\n  const styles = useStyles2(getStyles);\n  return <span className={styles.checkboxSpacer} />;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  // Should be the same size as the <IconButton /> so Dashboard name is aligned to Folder name siblings\n  checkboxSpacer: css({\n    paddingLeft: theme.spacing(2),\n  }),\n});\n","import { Checkbox } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { DashboardTreeHeaderProps, SelectionState } from '../types';\n\nexport default function CheckboxHeaderCell({ isSelected, onAllSelectionChange }: DashboardTreeHeaderProps) {\n  const state = isSelected?.('$all') ?? SelectionState.Unselected;\n\n  return (\n    <Checkbox\n      value={state === SelectionState.Selected}\n      indeterminate={state === SelectionState.Mixed}\n      aria-label={t('browse-dashboards.dashboards-tree.select-all-header-checkbox', 'Select all')}\n      onChange={(ev) => {\n        if (state === SelectionState.Mixed) {\n          // Ensure clicking an indeterminate checkbox always clears the selection\n          onAllSelectionChange?.(false);\n        } else {\n          onAllSelectionChange?.(ev.currentTarget.checked);\n        }\n      }}\n    />\n  );\n}\n","import { css } from '@emotion/css';\nimport Skeleton from 'react-loading-skeleton';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Icon, IconButton, Link, Spinner, useStyles2, Text } from '@grafana/ui';\nimport { getSvgSize } from '@grafana/ui/src/components/Icon/utils';\nimport { t } from 'app/core/internationalization';\nimport { getIconForItem } from 'app/features/search/service/utils';\n\nimport { Indent } from '../../../core/components/Indent/Indent';\nimport { useChildrenByParentUIDState } from '../state';\nimport { DashboardsTreeCellProps } from '../types';\n\nimport { makeRowID } from './utils';\n\nconst CHEVRON_SIZE = 'md';\nconst ICON_SIZE = 'sm';\n\ntype NameCellProps = DashboardsTreeCellProps & {\n  onFolderClick: (uid: string, newOpenState: boolean) => void;\n};\n\nexport function NameCell({ row: { original: data }, onFolderClick, treeID }: NameCellProps) {\n  const styles = useStyles2(getStyles);\n  const { item, level, isOpen } = data;\n  const childrenByParentUID = useChildrenByParentUIDState();\n  const isLoading = isOpen && !childrenByParentUID[item.uid];\n  const iconName = getIconForItem(data.item, isOpen);\n\n  if (item.kind === 'ui') {\n    return (\n      <>\n        <Indent\n          level={level}\n          spacing={{\n            xs: 1,\n            md: 3,\n          }}\n        />\n        <span className={styles.folderButtonSpacer} />\n        {item.uiKind === 'empty-folder' ? (\n          <em className={styles.emptyText}>\n            <Text variant=\"body\" color=\"secondary\" truncate>\n              No items\n            </Text>\n          </em>\n        ) : (\n          <Skeleton width={200} />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <>\n      <Indent\n        level={level}\n        spacing={{\n          xs: 1,\n          md: 3,\n        }}\n      />\n\n      {item.kind === 'folder' ? (\n        <IconButton\n          size={CHEVRON_SIZE}\n          className={styles.chevron}\n          onClick={() => {\n            onFolderClick(item.uid, !isOpen);\n          }}\n          name={isOpen ? 'angle-down' : 'angle-right'}\n          aria-label={\n            isOpen\n              ? t('browse-dashboards.dashboards-tree.collapse-folder-button', 'Collapse folder {{title}}', {\n                  title: item.title,\n                })\n              : t('browse-dashboards.dashboards-tree.expand-folder-button', 'Expand folder {{title}}', {\n                  title: item.title,\n                })\n          }\n        />\n      ) : (\n        <span className={styles.folderButtonSpacer} />\n      )}\n\n      <div className={styles.iconNameContainer}>\n        {isLoading ? <Spinner size={ICON_SIZE} /> : <Icon size={ICON_SIZE} name={iconName} />}\n\n        <Text variant=\"body\" truncate id={treeID && makeRowID(treeID, item)}>\n          {item.url ? (\n            <Link\n              onClick={() => {\n                reportInteraction('manage_dashboards_result_clicked');\n              }}\n              href={item.url}\n              className={styles.link}\n            >\n              {item.title}\n            </Link>\n          ) : (\n            item.title\n          )}\n        </Text>\n      </div>\n    </>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    chevron: css({\n      marginRight: theme.spacing(1),\n      width: getSvgSize(CHEVRON_SIZE),\n    }),\n    emptyText: css({\n      // needed for text to truncate correctly\n      overflow: 'hidden',\n    }),\n    // Should be the same size as the <IconButton /> so Dashboard name is aligned to Folder name siblings\n    folderButtonSpacer: css({\n      paddingLeft: `calc(${getSvgSize(CHEVRON_SIZE)}px + ${theme.spacing(1)})`,\n    }),\n    iconNameContainer: css({\n      alignItems: 'center',\n      display: 'flex',\n      gap: theme.spacing(1),\n      overflow: 'hidden',\n    }),\n    link: css({\n      '&:hover': {\n        textDecoration: 'underline',\n      },\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport { CellProps } from 'react-table';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { TagList, useStyles2 } from '@grafana/ui';\n\nimport { DashboardsTreeItem } from '../types';\n\nexport function TagsCell({ row: { original: data } }: CellProps<DashboardsTreeItem, unknown>) {\n  const styles = useStyles2(getStyles);\n  const item = data.item;\n\n  if (item.kind === 'ui') {\n    if (item.uiKind === 'pagination-placeholder') {\n      return <TagList.Skeleton />;\n    } else {\n      return null;\n    }\n  }\n\n  if (!item.tags) {\n    return null;\n  }\n\n  return <TagList className={styles.tagList} tags={item.tags} />;\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    // TagList is annoying and has weird default alignment\n    tagList: css({\n      justifyContent: 'flex-start',\n      flexWrap: 'nowrap',\n    }),\n  };\n}\n","import { css, cx } from '@emotion/css';\nimport { useCallback, useEffect, useId, useMemo, useRef } from 'react';\nimport * as React from 'react';\nimport { TableInstance, useTable } from 'react-table';\nimport { VariableSizeList as List } from 'react-window';\nimport InfiniteLoader from 'react-window-infinite-loader';\n\nimport { GrafanaTheme2, isTruthy } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { useStyles2 } from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\nimport { DashboardViewItem } from 'app/features/search/types';\n\nimport { DashboardsTreeCellProps, DashboardsTreeColumn, DashboardsTreeItem, SelectionState } from '../types';\n\nimport CheckboxCell from './CheckboxCell';\nimport CheckboxHeaderCell from './CheckboxHeaderCell';\nimport { NameCell } from './NameCell';\nimport { TagsCell } from './TagsCell';\nimport { useCustomFlexLayout } from './customFlexTableLayout';\nimport { makeRowID } from './utils';\n\ninterface DashboardsTreeProps {\n  items: DashboardsTreeItem[];\n  width: number;\n  height: number;\n  canSelect: boolean;\n  isSelected: (kind: DashboardViewItem | '$all') => SelectionState;\n  onFolderClick: (uid: string, newOpenState: boolean) => void;\n  onAllSelectionChange: (newState: boolean) => void;\n  onItemSelectionChange: (item: DashboardViewItem, newState: boolean) => void;\n\n  isItemLoaded: (itemIndex: number) => boolean;\n  requestLoadMore: (folderUid: string | undefined) => void;\n}\n\nconst HEADER_HEIGHT = 36;\nconst ROW_HEIGHT = 36;\nconst DIVIDER_HEIGHT = 0; // Yes - make it appear as a border on the row rather than a row itself\n\nexport function DashboardsTree({\n  items,\n  width,\n  height,\n  isSelected,\n  onFolderClick,\n  onAllSelectionChange,\n  onItemSelectionChange,\n  isItemLoaded,\n  requestLoadMore,\n  canSelect = false,\n}: DashboardsTreeProps) {\n  const treeID = useId();\n\n  const infiniteLoaderRef = useRef<InfiniteLoader>(null);\n  const listRef = useRef<List | null>(null);\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    // If the tree changed identity, then some indexes that were previously loaded may now be unloaded,\n    // especially after a refetch after a move/delete.\n    // Clear that cache, and check if we need to trigger another load\n    if (infiniteLoaderRef.current) {\n      infiniteLoaderRef.current.resetloadMoreItemsCache(true);\n    }\n\n    if (listRef.current) {\n      listRef.current.resetAfterIndex(0);\n    }\n  }, [items]);\n\n  const tableColumns = useMemo(() => {\n    const checkboxColumn: DashboardsTreeColumn = {\n      id: 'checkbox',\n      width: 0,\n      Header: CheckboxHeaderCell,\n      Cell: CheckboxCell,\n    };\n\n    const nameColumn: DashboardsTreeColumn = {\n      id: 'name',\n      width: 3,\n      Header: (\n        <span style={{ paddingLeft: 24 }}>\n          <Trans i18nKey=\"browse-dashboards.dashboards-tree.name-column\">Name</Trans>\n        </span>\n      ),\n      Cell: (props: DashboardsTreeCellProps) => <NameCell {...props} onFolderClick={onFolderClick} />,\n    };\n\n    const tagsColumns: DashboardsTreeColumn = {\n      id: 'tags',\n      width: 2,\n      Header: t('browse-dashboards.dashboards-tree.tags-column', 'Tags'),\n      Cell: TagsCell,\n    };\n    const columns = [canSelect && checkboxColumn, nameColumn, tagsColumns].filter(isTruthy);\n\n    return columns;\n  }, [onFolderClick, canSelect]);\n\n  const table = useTable({ columns: tableColumns, data: items }, useCustomFlexLayout);\n  const { getTableProps, getTableBodyProps, headerGroups } = table;\n\n  const virtualData = useMemo(\n    () => ({\n      table,\n      isSelected,\n      onAllSelectionChange,\n      onItemSelectionChange,\n      treeID,\n    }),\n    // we need this to rerender if items changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [table, isSelected, onAllSelectionChange, onItemSelectionChange, items, treeID]\n  );\n\n  const handleIsItemLoaded = useCallback(\n    (itemIndex: number) => {\n      return isItemLoaded(itemIndex);\n    },\n    [isItemLoaded]\n  );\n\n  const handleLoadMore = useCallback(\n    (startIndex: number, endIndex: number) => {\n      const { parentUID } = items[startIndex];\n      requestLoadMore(parentUID);\n    },\n    [requestLoadMore, items]\n  );\n\n  const getRowHeight = useCallback(\n    (rowIndex: number) => {\n      const row = items[rowIndex];\n      if (row.item.kind === 'ui' && row.item.uiKind === 'divider') {\n        return DIVIDER_HEIGHT;\n      }\n\n      return ROW_HEIGHT;\n    },\n    [items]\n  );\n\n  return (\n    <div {...getTableProps()} role=\"table\">\n      {headerGroups.map((headerGroup) => {\n        const { key, ...headerGroupProps } = headerGroup.getHeaderGroupProps({\n          style: { width },\n        });\n\n        return (\n          <div key={key} {...headerGroupProps} className={cx(styles.row, styles.headerRow)}>\n            {headerGroup.headers.map((column) => {\n              const { key, ...headerProps } = column.getHeaderProps();\n\n              return (\n                <div key={key} {...headerProps} role=\"columnheader\" className={styles.cell}>\n                  {column.render('Header', { isSelected, onAllSelectionChange })}\n                </div>\n              );\n            })}\n          </div>\n        );\n      })}\n\n      <div {...getTableBodyProps()} data-testid={selectors.pages.BrowseDashboards.table.body}>\n        <InfiniteLoader\n          ref={infiniteLoaderRef}\n          itemCount={items.length}\n          isItemLoaded={handleIsItemLoaded}\n          loadMoreItems={handleLoadMore}\n        >\n          {({ onItemsRendered, ref }) => (\n            <List\n              ref={(elem) => {\n                ref(elem);\n                listRef.current = elem;\n              }}\n              height={height - HEADER_HEIGHT}\n              width={width}\n              itemCount={items.length}\n              itemData={virtualData}\n              estimatedItemSize={ROW_HEIGHT}\n              itemSize={getRowHeight}\n              onItemsRendered={onItemsRendered}\n            >\n              {VirtualListRow}\n            </List>\n          )}\n        </InfiniteLoader>\n      </div>\n    </div>\n  );\n}\n\ninterface VirtualListRowProps {\n  index: number;\n  style: React.CSSProperties;\n  data: {\n    table: TableInstance<DashboardsTreeItem>;\n    isSelected: DashboardsTreeCellProps['isSelected'];\n    onAllSelectionChange: DashboardsTreeCellProps['onAllSelectionChange'];\n    onItemSelectionChange: DashboardsTreeCellProps['onItemSelectionChange'];\n    treeID: string;\n  };\n}\n\nfunction VirtualListRow({ index, style, data }: VirtualListRowProps) {\n  const styles = useStyles2(getStyles);\n  const { table, isSelected, onItemSelectionChange, treeID } = data;\n  const { rows, prepareRow } = table;\n\n  const row = rows[index];\n  prepareRow(row);\n\n  const dashboardItem = row.original.item;\n  const { key, ...rowProps } = row.getRowProps({ style });\n\n  if (dashboardItem.kind === 'ui' && dashboardItem.uiKind === 'divider') {\n    return (\n      <div key={key} {...rowProps}>\n        <hr className={styles.divider} />\n      </div>\n    );\n  }\n\n  return (\n    <div\n      key={key}\n      {...rowProps}\n      className={cx(styles.row, styles.bodyRow)}\n      aria-labelledby={makeRowID(treeID, dashboardItem)}\n      data-testid={selectors.pages.BrowseDashboards.table.row(\n        'title' in dashboardItem ? dashboardItem.title : dashboardItem.uid\n      )}\n    >\n      {row.cells.map((cell) => {\n        const { key, ...cellProps } = cell.getCellProps();\n\n        return (\n          <div key={key} {...cellProps} className={styles.cell}>\n            {cell.render('Cell', { isSelected, onItemSelectionChange, treeID })}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    // Column flex properties (cell sizing) are set by customFlexTableLayout.ts\n\n    row: css({\n      gap: theme.spacing(1),\n    }),\n\n    divider: css({\n      borderTop: `1px solid ${theme.colors.border.weak}`,\n      width: '100%',\n      margin: 0,\n    }),\n\n    headerRow: css({\n      backgroundColor: theme.colors.background.secondary,\n      height: HEADER_HEIGHT,\n    }),\n\n    bodyRow: css({\n      height: ROW_HEIGHT,\n\n      '&:hover': {\n        backgroundColor: theme.colors.emphasize(theme.colors.background.primary, 0.03),\n      },\n    }),\n\n    cell: css({\n      padding: theme.spacing(1),\n      overflow: 'hidden', // Required so flex children can do text-overflow: ellipsis\n      display: 'flex',\n      alignItems: 'center',\n    }),\n\n    link: css({\n      '&:hover': {\n        textDecoration: 'underline',\n      },\n    }),\n  };\n};\n","import { useCallback } from 'react';\n\nimport { CallToActionCard, EmptyState, LinkButton, TextLink } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\nimport { DashboardViewItem } from 'app/features/search/types';\nimport { useDispatch } from 'app/types';\n\nimport { PAGE_SIZE } from '../api/services';\nimport {\n  useFlatTreeState,\n  useCheckboxSelectionState,\n  setFolderOpenState,\n  setItemSelectionState,\n  useChildrenByParentUIDState,\n  setAllSelection,\n  useBrowseLoadingStatus,\n  useLoadNextChildrenPage,\n  fetchNextChildrenPage,\n} from '../state';\nimport { BrowseDashboardsState, DashboardTreeSelection, SelectionState } from '../types';\n\nimport { DashboardsTree } from './DashboardsTree';\n\ninterface BrowseViewProps {\n  height: number;\n  width: number;\n  folderUID: string | undefined;\n  canSelect: boolean;\n}\n\nexport function BrowseView({ folderUID, width, height, canSelect }: BrowseViewProps) {\n  const status = useBrowseLoadingStatus(folderUID);\n  const dispatch = useDispatch();\n  const flatTree = useFlatTreeState(folderUID);\n  const selectedItems = useCheckboxSelectionState();\n  const childrenByParentUID = useChildrenByParentUIDState();\n\n  const handleFolderClick = useCallback(\n    (clickedFolderUID: string, isOpen: boolean) => {\n      dispatch(setFolderOpenState({ folderUID: clickedFolderUID, isOpen }));\n\n      if (isOpen) {\n        dispatch(fetchNextChildrenPage({ parentUID: clickedFolderUID, pageSize: PAGE_SIZE }));\n      }\n    },\n    [dispatch]\n  );\n\n  const handleItemSelectionChange = useCallback(\n    (item: DashboardViewItem, isSelected: boolean) => {\n      dispatch(setItemSelectionState({ item, isSelected }));\n    },\n    [dispatch]\n  );\n\n  const isSelected = useCallback(\n    (item: DashboardViewItem | '$all'): SelectionState => {\n      if (item === '$all') {\n        // We keep the boolean $all state up to date in redux, so we can short-circut\n        // the logic if we know this has been selected\n        if (selectedItems.$all) {\n          return SelectionState.Selected;\n        }\n\n        // Otherwise, if we have any selected items, then it should be in 'mixed' state\n        for (const selection of Object.values(selectedItems)) {\n          if (typeof selection === 'boolean') {\n            continue;\n          }\n\n          for (const uid in selection) {\n            const isSelected = selection[uid];\n            if (isSelected) {\n              return SelectionState.Mixed;\n            }\n          }\n        }\n\n        // Otherwise otherwise, nothing is selected and header should be unselected\n        return SelectionState.Unselected;\n      }\n\n      const isSelected = selectedItems[item.kind][item.uid];\n      if (isSelected) {\n        return SelectionState.Selected;\n      }\n\n      // Because if _all_ children, then the parent is selected (and bailed in the previous check),\n      // this .some check will only return true if the children are partially selected\n      const isMixed = hasSelectedDescendants(item, childrenByParentUID, selectedItems);\n      if (isMixed) {\n        return SelectionState.Mixed;\n      }\n\n      return SelectionState.Unselected;\n    },\n    [selectedItems, childrenByParentUID]\n  );\n\n  const isItemLoaded = useCallback(\n    (itemIndex: number) => {\n      const treeItem = flatTree[itemIndex];\n      if (!treeItem) {\n        return false;\n      }\n      const item = treeItem.item;\n      const result = !(item.kind === 'ui' && item.uiKind === 'pagination-placeholder');\n\n      return result;\n    },\n    [flatTree]\n  );\n\n  const handleLoadMore = useLoadNextChildrenPage();\n\n  if (status === 'fulfilled' && flatTree.length === 0) {\n    return (\n      <div style={{ width }}>\n        {canSelect ? (\n          <EmptyState\n            variant=\"call-to-action\"\n            button={\n              <LinkButton\n                href={folderUID ? `dashboard/new?folderUid=${folderUID}` : 'dashboard/new'}\n                icon=\"plus\"\n                size=\"lg\"\n              >\n                <Trans i18nKey=\"browse-dashboards.empty-state.button-title\">Create dashboard</Trans>\n              </LinkButton>\n            }\n            message={\n              folderUID\n                ? t('browse-dashboards.empty-state.title-folder', \"This folder doesn't have any dashboards yet\")\n                : t('browse-dashboards.empty-state.title', \"You haven't created any dashboards yet\")\n            }\n          >\n            {folderUID && (\n              <Trans i18nKey=\"browse-dashboards.empty-state.pro-tip\">\n                Add/move dashboards to your folder at{' '}\n                <TextLink external={false} href=\"/dashboards\">\n                  Browse dashboards\n                </TextLink>\n              </Trans>\n            )}\n          </EmptyState>\n        ) : (\n          <CallToActionCard callToActionElement={<span>This folder is empty</span>} />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <DashboardsTree\n      canSelect={canSelect}\n      items={flatTree}\n      width={width}\n      height={height}\n      isSelected={isSelected}\n      onFolderClick={handleFolderClick}\n      onAllSelectionChange={(newState) => dispatch(setAllSelection({ isSelected: newState, folderUID }))}\n      onItemSelectionChange={handleItemSelectionChange}\n      isItemLoaded={isItemLoaded}\n      requestLoadMore={handleLoadMore}\n    />\n  );\n}\n\nfunction hasSelectedDescendants(\n  item: DashboardViewItem,\n  childrenByParentUID: BrowseDashboardsState['childrenByParentUID'],\n  selectedItems: DashboardTreeSelection\n): boolean {\n  const collection = childrenByParentUID[item.uid];\n  if (!collection) {\n    return false;\n  }\n\n  return collection.items.some((v) => {\n    const thisIsSelected = selectedItems[v.kind][v.uid];\n    if (thisIsSelected) {\n      return thisIsSelected;\n    }\n\n    return hasSelectedDescendants(v, childrenByParentUID, selectedItems);\n  });\n}\n","import { useForm } from 'react-hook-form';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Button, Input, Field, Stack } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport { validationSrv } from '../../manage-dashboards/services/ValidationSrv';\n\ninterface Props {\n  onConfirm: (folderName: string) => void;\n  onCancel: () => void;\n}\n\ninterface FormModel {\n  folderName: string;\n}\n\nconst initialFormModel: FormModel = { folderName: '' };\n\nexport function NewFolderForm({ onCancel, onConfirm }: Props) {\n  const {\n    handleSubmit,\n    register,\n    formState: { errors },\n  } = useForm<FormModel>({ defaultValues: initialFormModel });\n\n  const translatedFolderNameRequiredPhrase = t(\n    'browse-dashboards.action.new-folder-name-required-phrase',\n    'Folder name is required.'\n  );\n  const validateFolderName = async (folderName: string) => {\n    try {\n      await validationSrv.validateNewFolderName(folderName);\n      return true;\n    } catch (e) {\n      if (e instanceof Error) {\n        return e.message;\n      } else {\n        throw e;\n      }\n    }\n  };\n\n  const fieldNameLabel = t('browse-dashboards.new-folder-form.name-label', 'Folder name');\n\n  return (\n    <form\n      name=\"addFolder\"\n      onSubmit={handleSubmit((form) => onConfirm(form.folderName))}\n      data-testid={selectors.pages.BrowseDashboards.NewFolderForm.form}\n    >\n      <Field\n        label={fieldNameLabel}\n        invalid={!!errors.folderName}\n        error={errors.folderName && errors.folderName.message}\n      >\n        <Input\n          data-testid={selectors.pages.BrowseDashboards.NewFolderForm.nameInput}\n          id=\"folder-name-input\"\n          defaultValue={initialFormModel.folderName}\n          {...register('folderName', {\n            required: translatedFolderNameRequiredPhrase,\n            validate: async (v) => await validateFolderName(v),\n          })}\n        />\n      </Field>\n      <Stack>\n        <Button variant=\"secondary\" fill=\"outline\" onClick={onCancel}>\n          <Trans i18nKey=\"browse-dashboards.new-folder-form.cancel-label\">Cancel</Trans>\n        </Button>\n        <Button type=\"submit\">\n          <Trans i18nKey=\"browse-dashboards.new-folder-form.create-label\">Create</Trans>\n        </Button>\n      </Stack>\n    </form>\n  );\n}\n","import { useState } from 'react';\nimport { useLocation } from 'react-router-dom-v5-compat';\n\nimport { config, reportInteraction } from '@grafana/runtime';\nimport { Button, Drawer, Dropdown, Icon, Menu, MenuItem } from '@grafana/ui';\nimport {\n  getNewDashboardPhrase,\n  getNewFolderPhrase,\n  getImportPhrase,\n  getNewPhrase,\n} from 'app/features/search/tempI18nPhrases';\nimport { FolderDTO } from 'app/types';\n\nimport { useNewFolderMutation } from '../api/browseDashboardsAPI';\n\nimport { NewFolderForm } from './NewFolderForm';\n\ninterface Props {\n  parentFolder?: FolderDTO;\n  canCreateFolder: boolean;\n  canCreateDashboard: boolean;\n}\n\nexport default function CreateNewButton({ parentFolder, canCreateDashboard, canCreateFolder }: Props) {\n  const [isOpen, setIsOpen] = useState(false);\n  const location = useLocation();\n  const [newFolder] = useNewFolderMutation();\n  const [showNewFolderDrawer, setShowNewFolderDrawer] = useState(false);\n\n  const onCreateFolder = async (folderName: string) => {\n    try {\n      await newFolder({\n        title: folderName,\n        parentUid: parentFolder?.uid,\n      });\n      const depth = parentFolder?.parents ? parentFolder.parents.length + 1 : 0;\n      reportInteraction('grafana_manage_dashboards_folder_created', {\n        is_subfolder: Boolean(parentFolder?.uid),\n        folder_depth: depth,\n      });\n    } finally {\n      setShowNewFolderDrawer(false);\n    }\n  };\n\n  const newMenu = (\n    <Menu>\n      {canCreateDashboard && (\n        <MenuItem\n          label={getNewDashboardPhrase()}\n          onClick={() =>\n            reportInteraction('grafana_menu_item_clicked', {\n              url: buildUrl('/dashboard/new', parentFolder?.uid),\n              from: location.pathname,\n            })\n          }\n          url={buildUrl('/dashboard/new', parentFolder?.uid)}\n        />\n      )}\n      {canCreateFolder && <MenuItem onClick={() => setShowNewFolderDrawer(true)} label={getNewFolderPhrase()} />}\n      {canCreateDashboard && (\n        <MenuItem\n          label={getImportPhrase()}\n          onClick={() =>\n            reportInteraction('grafana_menu_item_clicked', {\n              url: buildUrl('/dashboard/import', parentFolder?.uid),\n              from: location.pathname,\n            })\n          }\n          url={buildUrl('/dashboard/import', parentFolder?.uid)}\n        />\n      )}\n    </Menu>\n  );\n\n  return (\n    <>\n      <Dropdown overlay={newMenu} onVisibleChange={setIsOpen}>\n        <Button>\n          {getNewPhrase()}\n          <Icon name={isOpen ? 'angle-up' : 'angle-down'} />\n        </Button>\n      </Dropdown>\n      {showNewFolderDrawer && (\n        <Drawer\n          title={getNewFolderPhrase()}\n          subtitle={parentFolder?.title ? `Location: ${parentFolder.title}` : undefined}\n          onClose={() => setShowNewFolderDrawer(false)}\n          size=\"sm\"\n        >\n          <NewFolderForm onConfirm={onCreateFolder} onCancel={() => setShowNewFolderDrawer(false)} />\n        </Drawer>\n      )}\n    </>\n  );\n}\n\n/**\n *\n * @param url without any parameters\n * @param folderUid  folder id\n * @returns url with paramter if folder is present\n */\nfunction buildUrl(url: string, folderUid: string | undefined) {\n  const baseUrl = folderUid ? url + '?folderUid=' + folderUid : url;\n  return config.appSubUrl ? config.appSubUrl + baseUrl : baseUrl;\n}\n","import { css } from '@emotion/css';\nimport { memo, useEffect, useMemo } from 'react';\nimport { useLocation, useParams } from 'react-router-dom-v5-compat';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config, reportInteraction } from '@grafana/runtime';\nimport { LinkButton, FilterInput, useStyles2 } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { getConfig } from 'app/core/config';\nimport { Trans } from 'app/core/internationalization';\nimport { useDispatch } from 'app/types';\n\nimport { contextSrv } from '../../core/services/context_srv';\nimport { buildNavModel, getDashboardsTabID } from '../folders/state/navModel';\nimport { useSearchStateManager } from '../search/state/SearchStateManager';\nimport { getSearchPlaceholder } from '../search/tempI18nPhrases';\n\nimport { skipToken, useGetFolderQuery, useSaveFolderMutation } from './api/browseDashboardsAPI';\nimport { BrowseActions } from './components/BrowseActions/BrowseActions';\nimport { BrowseFilters } from './components/BrowseFilters';\nimport { BrowseView } from './components/BrowseView';\nimport CreateNewButton from './components/CreateNewButton';\nimport { FolderActionsButton } from './components/FolderActionsButton';\nimport { SearchView } from './components/SearchView';\nimport { getFolderPermissions } from './permissions';\nimport { setAllSelection, useHasSelection } from './state';\n\n// New Browse/Manage/Search Dashboards views for nested folders\nconst BrowseDashboardsPage = memo(() => {\n  const { uid: folderUID } = useParams();\n  const dispatch = useDispatch();\n\n  const styles = useStyles2(getStyles);\n  const [searchState, stateManager] = useSearchStateManager();\n  const isSearching = stateManager.hasSearchFilters();\n  const location = useLocation();\n  const search = useMemo(() => new URLSearchParams(location.search), [location.search]);\n\n  useEffect(() => {\n    stateManager.initStateFromUrl(folderUID);\n\n    // Clear selected state when folderUID changes\n    dispatch(\n      setAllSelection({\n        isSelected: false,\n        folderUID: undefined,\n      })\n    );\n  }, [dispatch, folderUID, stateManager]);\n\n  // Trigger search when \"starred\" query param changes\n  useEffect(() => {\n    stateManager.onSetStarred(search.has('starred'));\n  }, [search, stateManager]);\n\n  useEffect(() => {\n    // Clear the search results when we leave SearchView to prevent old results flashing\n    // when starting a new search\n    if (!isSearching && searchState.result) {\n      stateManager.setState({ result: undefined, includePanels: undefined });\n    }\n  }, [isSearching, searchState.result, stateManager]);\n\n  const { data: folderDTO } = useGetFolderQuery(folderUID ?? skipToken);\n  const [saveFolder] = useSaveFolderMutation();\n  const navModel = useMemo(() => {\n    if (!folderDTO) {\n      return undefined;\n    }\n    const model = buildNavModel(folderDTO);\n\n    // Set the \"Dashboards\" tab to active\n    const dashboardsTabID = getDashboardsTabID(folderDTO.uid);\n    const dashboardsTab = model.children?.find((child) => child.id === dashboardsTabID);\n    if (dashboardsTab) {\n      dashboardsTab.active = true;\n    }\n    return model;\n  }, [folderDTO]);\n\n  const hasSelection = useHasSelection();\n\n  // Fetch the root (aka general) folder if we're not in a specific folder\n  const { data: rootFolderDTO } = useGetFolderQuery(folderDTO ? skipToken : 'general');\n  const folder = folderDTO ?? rootFolderDTO;\n\n  const { canEditFolders, canEditDashboards, canCreateDashboards, canCreateFolders } = getFolderPermissions(folder);\n  const hasAdminRights = contextSrv.hasRole('Admin') || contextSrv.isGrafanaAdmin;\n\n  const showEditTitle = canEditFolders && folderUID;\n  const canSelect = canEditFolders || canEditDashboards;\n  const onEditTitle = async (newValue: string) => {\n    if (folderDTO) {\n      const result = await saveFolder({\n        ...folderDTO,\n        title: newValue,\n      });\n      if ('error' in result) {\n        reportInteraction('grafana_browse_dashboards_page_edit_folder_name', {\n          status: 'failed_with_error',\n          error: result.error,\n        });\n        throw result.error;\n      } else {\n        reportInteraction('grafana_browse_dashboards_page_edit_folder_name', { status: 'success' });\n      }\n    } else {\n      reportInteraction('grafana_browse_dashboards_page_edit_folder_name', { status: 'failed_no_folderDTO' });\n    }\n  };\n\n  const handleButtonClickToRecentlyDeleted = () => {\n    reportInteraction('grafana_browse_dashboards_page_button_to_recently_deleted', {\n      origin: window.location.pathname === getConfig().appSubUrl + '/dashboards' ? 'Dashboards' : 'Folder view',\n    });\n  };\n\n  return (\n    <Page\n      navId=\"dashboards/browse\"\n      pageNav={navModel}\n      onEditTitle={showEditTitle ? onEditTitle : undefined}\n      actions={\n        <>\n          {config.featureToggles.dashboardRestore && config.featureToggles.dashboardRestoreUI && hasAdminRights && (\n            <LinkButton\n              variant=\"secondary\"\n              href={getConfig().appSubUrl + '/dashboard/recently-deleted'}\n              onClick={handleButtonClickToRecentlyDeleted}\n            >\n              <Trans i18nKey=\"browse-dashboards.actions.button-to-recently-deleted\">Recently deleted</Trans>\n            </LinkButton>\n          )}\n          {folderDTO && <FolderActionsButton folder={folderDTO} />}\n          {(canCreateDashboards || canCreateFolders) && (\n            <CreateNewButton\n              parentFolder={folderDTO}\n              canCreateDashboard={canCreateDashboards}\n              canCreateFolder={canCreateFolders}\n            />\n          )}\n        </>\n      }\n    >\n      <Page.Contents className={styles.pageContents}>\n        <div>\n          <FilterInput\n            placeholder={getSearchPlaceholder(searchState.includePanels)}\n            value={searchState.query}\n            escapeRegex={false}\n            onChange={(e) => stateManager.onQueryChange(e)}\n          />\n        </div>\n\n        {hasSelection ? (\n          <BrowseActions />\n        ) : (\n          <div className={styles.filters}>\n            <BrowseFilters />\n          </div>\n        )}\n\n        <div className={styles.subView}>\n          <AutoSizer>\n            {({ width, height }) =>\n              isSearching ? (\n                <SearchView\n                  canSelect={canSelect}\n                  width={width}\n                  height={height}\n                  searchState={searchState}\n                  searchStateManager={stateManager}\n                />\n              ) : (\n                <BrowseView canSelect={canSelect} width={width} height={height} folderUID={folderUID} />\n              )\n            }\n          </AutoSizer>\n        </div>\n      </Page.Contents>\n    </Page>\n  );\n});\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  pageContents: css({\n    display: 'flex',\n    flexDirection: 'column',\n    gap: theme.spacing(1),\n    height: '100%',\n  }),\n\n  // AutoSizer needs an element to measure the full height available\n  subView: css({\n    height: '100%',\n  }),\n\n  filters: css({\n    display: 'none',\n\n    [theme.breakpoints.up('md')]: {\n      display: 'block',\n    },\n  }),\n});\n\nBrowseDashboardsPage.displayName = 'BrowseDashboardsPage';\nexport default BrowseDashboardsPage;\n","import { useState } from 'react';\n\nimport { config, reportInteraction } from '@grafana/runtime';\nimport { Alert, ConfirmModal, Text, Space } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport { useGetAffectedItemsQuery } from '../../api/browseDashboardsAPI';\nimport { DashboardTreeSelection } from '../../types';\n\nimport { DescendantCount } from './DescendantCount';\n\nexport interface Props {\n  isOpen: boolean;\n  onConfirm: () => Promise<void>;\n  onDismiss: () => void;\n  selectedItems: DashboardTreeSelection;\n}\n\nexport const DeleteModal = ({ onConfirm, onDismiss, selectedItems, ...props }: Props) => {\n  const { data } = useGetAffectedItemsQuery(selectedItems);\n  const deleteIsInvalid = Boolean(data && (data.alertRule || data.libraryPanel));\n  const [isDeleting, setIsDeleting] = useState(false);\n  const onDelete = async () => {\n    reportInteraction('grafana_manage_dashboards_delete_clicked', {\n      item_counts: {\n        dashboard: Object.keys(selectedItems.dashboard).length,\n        folder: Object.keys(selectedItems.folder).length,\n      },\n      source: 'browse_dashboards',\n      restore_enabled: config.featureToggles.dashboardRestoreUI,\n    });\n    setIsDeleting(true);\n    try {\n      await onConfirm();\n      setIsDeleting(false);\n      onDismiss();\n    } catch {\n      setIsDeleting(false);\n    }\n  };\n\n  return (\n    <ConfirmModal\n      body={\n        <>\n          {config.featureToggles.dashboardRestore && (\n            <>\n              <Text element=\"p\">\n                <Trans i18nKey=\"browse-dashboards.action.delete-modal-restore-dashboards-text\">\n                  This action will delete the selected folders immediately but the selected dashboards will be marked\n                  for deletion in 30 days. Your organization administrator can restore the dashboards anytime before the\n                  30 days expire. Folders cannot be restored.\n                </Trans>\n              </Text>\n              <Space v={2} />\n            </>\n          )}\n          <Text element=\"p\">\n            <Trans i18nKey=\"browse-dashboards.action.delete-modal-text\">\n              This action will delete the following content:\n            </Trans>\n          </Text>\n          <DescendantCount selectedItems={selectedItems} />\n          <Space v={2} />\n        </>\n      }\n      description={\n        <>\n          {deleteIsInvalid ? (\n            <Alert\n              severity=\"warning\"\n              title={t('browse-dashboards.action.delete-modal-invalid-title', 'Cannot delete folder')}\n            >\n              <Trans i18nKey=\"browse-dashboards.action.delete-modal-invalid-text\">\n                One or more folders contain library panels or alert rules. Delete these first in order to proceed.\n              </Trans>\n            </Alert>\n          ) : null}\n        </>\n      }\n      confirmationText={t('browse-dashboards.action.confirmation-text', 'Delete')}\n      confirmText={\n        isDeleting\n          ? t('browse-dashboards.action.deleting', 'Deleting...')\n          : t('browse-dashboards.action.delete-button', 'Delete')\n      }\n      onDismiss={onDismiss}\n      onConfirm={onDelete}\n      title={t('browse-dashboards.action.delete-modal-title', 'Delete')}\n      {...props}\n      disabled={deleteIsInvalid}\n    />\n  );\n};\n","import { useState } from 'react';\n\nimport { Alert, Button, Field, Modal, Text, Space } from '@grafana/ui';\nimport { FolderPicker } from 'app/core/components/Select/FolderPicker';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { DashboardTreeSelection } from '../../types';\n\nimport { DescendantCount } from './DescendantCount';\n\nexport interface Props {\n  isOpen: boolean;\n  onConfirm: (targetFolderUid: string) => Promise<void>;\n  onDismiss: () => void;\n  selectedItems: DashboardTreeSelection;\n}\n\nexport const MoveModal = ({ onConfirm, onDismiss, selectedItems, ...props }: Props) => {\n  const [moveTarget, setMoveTarget] = useState<string>();\n  const [isMoving, setIsMoving] = useState(false);\n  const selectedFolders = Object.keys(selectedItems.folder).filter((uid) => selectedItems.folder[uid]);\n\n  const onMove = async () => {\n    if (moveTarget !== undefined) {\n      setIsMoving(true);\n      try {\n        await onConfirm(moveTarget);\n        setIsMoving(false);\n        onDismiss();\n      } catch {\n        setIsMoving(false);\n      }\n    }\n  };\n\n  return (\n    <Modal title={t('browse-dashboards.action.move-modal-title', 'Move')} onDismiss={onDismiss} {...props}>\n      {selectedFolders.length > 0 && (\n        <Alert\n          severity=\"info\"\n          title={t('browse-dashboards.action.move-modal-alert', 'Moving this item may change its permissions.')}\n        />\n      )}\n\n      <Text element=\"p\">\n        <Trans i18nKey=\"browse-dashboards.action.move-modal-text\">This action will move the following content:</Trans>\n      </Text>\n\n      <DescendantCount selectedItems={selectedItems} />\n\n      <Space v={3} />\n\n      <Field label={t('browse-dashboards.action.move-modal-field-label', 'Folder name')}>\n        <FolderPicker value={moveTarget} excludeUIDs={selectedFolders} onChange={setMoveTarget} />\n      </Field>\n\n      <Modal.ButtonRow>\n        <Button onClick={onDismiss} variant=\"secondary\" fill=\"outline\">\n          <Trans i18nKey=\"browse-dashboards.action.cancel-button\">Cancel</Trans>\n        </Button>\n        <Button disabled={moveTarget === undefined || isMoving} onClick={onMove} variant=\"primary\">\n          {isMoving\n            ? t('browse-dashboards.action.moving', 'Moving...')\n            : t('browse-dashboards.action.move-button', 'Move')}\n        </Button>\n      </Modal.ButtonRow>\n    </Modal>\n  );\n};\n","import { useState } from 'react';\n\nimport { config, locationService, reportInteraction } from '@grafana/runtime';\nimport { Button, Drawer, Dropdown, Icon, Menu, MenuItem } from '@grafana/ui';\nimport { Permissions } from 'app/core/components/AccessControl';\nimport { appEvents } from 'app/core/core';\nimport { t, Trans } from 'app/core/internationalization';\nimport { FolderDTO } from 'app/types';\nimport { ShowModalReactEvent } from 'app/types/events';\n\nimport { useDeleteFolderMutation, useMoveFolderMutation } from '../api/browseDashboardsAPI';\nimport { getFolderPermissions } from '../permissions';\n\nimport { DeleteModal } from './BrowseActions/DeleteModal';\nimport { MoveModal } from './BrowseActions/MoveModal';\n\ninterface Props {\n  folder: FolderDTO;\n}\n\nexport function FolderActionsButton({ folder }: Props) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [showPermissionsDrawer, setShowPermissionsDrawer] = useState(false);\n  const [moveFolder] = useMoveFolderMutation();\n  const [deleteFolder] = useDeleteFolderMutation();\n  const { canEditFolders, canDeleteFolders, canViewPermissions, canSetPermissions } = getFolderPermissions(folder);\n  // Can only move folders when nestedFolders is enabled\n  const canMoveFolder = config.featureToggles.nestedFolders && canEditFolders;\n\n  const onMove = async (destinationUID: string) => {\n    await moveFolder({ folder, destinationUID });\n    reportInteraction('grafana_manage_dashboards_item_moved', {\n      item_counts: {\n        folder: 1,\n        dashboard: 0,\n      },\n      source: 'folder_actions',\n    });\n  };\n\n  const onDelete = async () => {\n    await deleteFolder(folder);\n    reportInteraction('grafana_manage_dashboards_item_deleted', {\n      item_counts: {\n        folder: 1,\n        dashboard: 0,\n      },\n      source: 'folder_actions',\n    });\n    const { parents } = folder;\n    const parentUrl = parents && parents.length ? parents[parents.length - 1].url : '/dashboards';\n    locationService.push(parentUrl);\n  };\n\n  const showMoveModal = () => {\n    appEvents.publish(\n      new ShowModalReactEvent({\n        component: MoveModal,\n        props: {\n          selectedItems: {\n            folder: { [folder.uid]: true },\n            dashboard: {},\n            panel: {},\n            $all: false,\n          },\n          onConfirm: onMove,\n        },\n      })\n    );\n  };\n\n  const showDeleteModal = () => {\n    appEvents.publish(\n      new ShowModalReactEvent({\n        component: DeleteModal,\n        props: {\n          selectedItems: {\n            folder: { [folder.uid]: true },\n            dashboard: {},\n            panel: {},\n            $all: false,\n          },\n          onConfirm: onDelete,\n        },\n      })\n    );\n  };\n\n  const managePermissionsLabel = t('browse-dashboards.folder-actions-button.manage-permissions', 'Manage permissions');\n  const moveLabel = t('browse-dashboards.folder-actions-button.move', 'Move');\n  const deleteLabel = t('browse-dashboards.folder-actions-button.delete', 'Delete');\n\n  const menu = (\n    <Menu>\n      {canViewPermissions && <MenuItem onClick={() => setShowPermissionsDrawer(true)} label={managePermissionsLabel} />}\n      {canMoveFolder && <MenuItem onClick={showMoveModal} label={moveLabel} />}\n      {canDeleteFolders && <MenuItem destructive onClick={showDeleteModal} label={deleteLabel} />}\n    </Menu>\n  );\n\n  if (!canViewPermissions && !canMoveFolder && !canDeleteFolders) {\n    return null;\n  }\n\n  return (\n    <>\n      <Dropdown overlay={menu} onVisibleChange={setIsOpen}>\n        <Button variant=\"secondary\">\n          <Trans i18nKey=\"browse-dashboards.folder-actions-button.folder-actions\">Folder actions</Trans>\n          <Icon name={isOpen ? 'angle-up' : 'angle-down'} />\n        </Button>\n      </Dropdown>\n      {showPermissionsDrawer && (\n        <Drawer\n          title={t('browse-dashboards.action.manage-permissions-button', 'Manage permissions')}\n          subtitle={folder.title}\n          onClose={() => setShowPermissionsDrawer(false)}\n          size=\"md\"\n        >\n          <Permissions resource=\"folders\" resourceId={folder.uid} canSetPermissions={canSetPermissions} />\n        </Drawer>\n      )}\n    </>\n  );\n}\n","import { ReactNode, useCallback } from 'react';\n\nimport { DataFrameView, toDataFrame } from '@grafana/data';\nimport { Button, EmptyState } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\nimport { useKeyNavigationListener } from 'app/features/search/hooks/useSearchKeyboardSelection';\nimport { SearchResultsProps, SearchResultsTable } from 'app/features/search/page/components/SearchResultsTable';\nimport { SearchStateManager } from 'app/features/search/state/SearchStateManager';\nimport { DashboardViewItemKind, SearchState } from 'app/features/search/types';\nimport { useDispatch, useSelector } from 'app/types';\n\nimport { setAllSelection, setItemSelectionState, useHasSelection } from '../state';\n\ninterface SearchViewProps {\n  height: number;\n  width: number;\n  canSelect: boolean;\n  searchState: SearchState;\n  searchStateManager: SearchStateManager;\n  emptyState?: ReactNode;\n}\n\nconst NUM_PLACEHOLDER_ROWS = 25;\nconst initialLoadingView = {\n  view: new DataFrameView(\n    toDataFrame({\n      fields: [\n        { name: 'uid', display: true, values: Array(NUM_PLACEHOLDER_ROWS).fill(null) },\n        { name: 'kind', display: true, values: Array(NUM_PLACEHOLDER_ROWS).fill('dashboard') },\n        { name: 'name', display: true, values: Array(NUM_PLACEHOLDER_ROWS).fill('') },\n        { name: 'location', display: true, values: Array(NUM_PLACEHOLDER_ROWS).fill('') },\n        { name: 'tags', display: true, values: Array(NUM_PLACEHOLDER_ROWS).fill([]) },\n      ],\n      meta: {\n        custom: {\n          locationInfo: [],\n        },\n      },\n    })\n  ),\n  loadMoreItems: () => Promise.resolve(),\n  // this is key and controls whether to show the skeleton in generateColumns\n  isItemLoaded: () => false,\n  totalRows: NUM_PLACEHOLDER_ROWS,\n};\n\nexport function SearchView({\n  width,\n  height,\n  canSelect,\n  searchState,\n  searchStateManager: stateManager,\n  emptyState: emptyStateProp,\n}: SearchViewProps) {\n  const dispatch = useDispatch();\n  const selectedItems = useSelector((wholeState) => wholeState.browseDashboards.selectedItems);\n  const hasSelection = useHasSelection();\n\n  const { keyboardEvents } = useKeyNavigationListener();\n\n  const value = searchState.result ?? initialLoadingView;\n\n  const selectionChecker = useCallback(\n    (kind: string | undefined, uid: string): boolean => {\n      if (!kind) {\n        return false;\n      }\n\n      // Currently, this indicates _some_ items are selected, not nessicarily all are\n      // selected.\n      if (kind === '*' && uid === '*') {\n        return hasSelection;\n      } else if (kind === '*') {\n        // Unsure how this case can happen\n        return false;\n      }\n\n      return selectedItems[assertDashboardViewItemKind(kind)][uid] ?? false;\n    },\n    [selectedItems, hasSelection]\n  );\n\n  const clearSelection = useCallback(() => {\n    dispatch(setAllSelection({ isSelected: false, folderUID: undefined }));\n  }, [dispatch]);\n\n  const handleItemSelectionChange = useCallback(\n    (kind: string, uid: string) => {\n      const newIsSelected = !selectionChecker(kind, uid);\n\n      dispatch(\n        setItemSelectionState({ item: { kind: assertDashboardViewItemKind(kind), uid }, isSelected: newIsSelected })\n      );\n    },\n    [selectionChecker, dispatch]\n  );\n\n  if (value.totalRows === 0) {\n    const emptyState = emptyStateProp ?? (\n      <EmptyState\n        button={\n          <Button variant=\"secondary\" onClick={stateManager.onClearSearchAndFilters}>\n            <Trans i18nKey=\"browse-dashboards.no-results.clear\">Clear search and filters</Trans>\n          </Button>\n        }\n        message={t('browse-dashboards.no-results.text', 'No results found for your query')}\n        variant=\"not-found\"\n        role=\"alert\"\n      />\n    );\n\n    return <div style={{ width }}>{emptyState}</div>;\n  }\n\n  const props: SearchResultsProps = {\n    response: value,\n    selection: canSelect ? selectionChecker : undefined,\n    selectionToggle: canSelect ? handleItemSelectionChange : undefined,\n    clearSelection,\n    width: width,\n    height: height,\n    onTagSelected: stateManager.onAddTag,\n    keyboardEvents,\n    onDatasourceChange: searchState.datasource ? stateManager.onDatasourceChange : undefined,\n    onClickItem: stateManager.onSearchItemClicked,\n  };\n\n  return <SearchResultsTable {...props} />;\n}\n\nfunction assertDashboardViewItemKind(kind: string): DashboardViewItemKind {\n  switch (kind) {\n    case 'folder':\n      return 'folder';\n    case 'dashboard':\n      return 'dashboard';\n    case 'panel':\n      return 'panel';\n  }\n\n  throw new Error('Unsupported kind' + kind);\n}\n","import { config } from '@grafana/runtime';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction, FolderDTO } from 'app/types';\n\nfunction checkFolderPermission(action: AccessControlAction, folderDTO?: FolderDTO) {\n  return folderDTO ? contextSrv.hasPermissionInMetadata(action, folderDTO) : contextSrv.hasPermission(action);\n}\n\nfunction checkCanCreateFolders(folderDTO?: FolderDTO) {\n  // Can only create a folder if we have permissions and either we're at root or nestedFolders is enabled\n  if (folderDTO && folderDTO.uid !== 'general' && !config.featureToggles.nestedFolders) {\n    return false;\n  }\n\n  if (!config.featureToggles.accessActionSets) {\n    if (!folderDTO || folderDTO.uid === 'general') {\n      return checkFolderPermission(AccessControlAction.FoldersCreate);\n    }\n    return (\n      checkFolderPermission(AccessControlAction.FoldersCreate) &&\n      checkFolderPermission(AccessControlAction.FoldersWrite, folderDTO)\n    );\n  }\n\n  return checkFolderPermission(AccessControlAction.FoldersCreate, folderDTO);\n}\n\nexport function getFolderPermissions(folderDTO?: FolderDTO) {\n  const canCreateDashboards = checkFolderPermission(AccessControlAction.DashboardsCreate, folderDTO);\n  const canCreateFolders = checkCanCreateFolders(folderDTO);\n  const canDeleteFolders = checkFolderPermission(AccessControlAction.FoldersDelete, folderDTO);\n  const canEditDashboards = checkFolderPermission(AccessControlAction.DashboardsWrite, folderDTO);\n  const canEditFolders = checkFolderPermission(AccessControlAction.FoldersWrite, folderDTO);\n  const canSetPermissions = checkFolderPermission(AccessControlAction.FoldersPermissionsWrite, folderDTO);\n  const canViewPermissions = checkFolderPermission(AccessControlAction.FoldersPermissionsRead, folderDTO);\n\n  return {\n    canCreateDashboards,\n    canCreateFolders,\n    canDeleteFolders,\n    canEditDashboards,\n    canEditFolders,\n    canSetPermissions,\n    canViewPermissions,\n  };\n}\n","import { css } from '@emotion/css';\nimport { FormEvent } from 'react';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Button, Checkbox, Stack, RadioButtonGroup, useStyles2 } from '@grafana/ui';\nimport { SortPicker } from 'app/core/components/Select/SortPicker';\nimport { TagFilter, TermCount } from 'app/core/components/TagFilter/TagFilter';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { SearchLayout, SearchState } from '../../types';\n\nfunction getLayoutOptions() {\n  return [\n    {\n      value: SearchLayout.Folders,\n      icon: 'folder',\n      description: t('search.actions.view-as-folders', 'View by folders'),\n    },\n    { value: SearchLayout.List, icon: 'list-ul', description: t('search.actions.view-as-list', 'View as list') },\n  ];\n}\n\ninterface ActionRowProps {\n  state: SearchState;\n  showStarredFilter?: boolean;\n  showLayout?: boolean;\n  sortPlaceholder?: string;\n\n  onLayoutChange: (layout: SearchLayout) => void;\n  onSortChange: (value?: string) => void;\n  onStarredFilterChange?: (event: FormEvent<HTMLInputElement>) => void;\n  onTagFilterChange: (tags: string[]) => void;\n  getTagOptions: () => Promise<TermCount[]>;\n  getSortOptions: () => Promise<SelectableValue[]>;\n  onDatasourceChange: (ds?: string) => void;\n  onPanelTypeChange: (pt?: string) => void;\n  onSetIncludePanels: (v: boolean) => void;\n}\n\nexport function getValidQueryLayout(q: SearchState): SearchLayout {\n  const layout = q.layout ?? SearchLayout.Folders;\n\n  // Folders is not valid when a query exists\n  if (layout === SearchLayout.Folders) {\n    if (q.query || q.sort || q.starred || q.tag.length > 0) {\n      return SearchLayout.List;\n    }\n  }\n\n  return layout;\n}\n\nexport const ActionRow = ({\n  state,\n  showStarredFilter,\n  showLayout,\n  sortPlaceholder,\n  onLayoutChange,\n  onSortChange,\n  onStarredFilterChange = () => {},\n  onTagFilterChange,\n  getTagOptions,\n  getSortOptions,\n  onDatasourceChange,\n  onPanelTypeChange,\n  onSetIncludePanels,\n}: ActionRowProps) => {\n  const styles = useStyles2(getStyles);\n  const layout = getValidQueryLayout(state);\n\n  // Disabled folder layout option when query is present\n  const disabledOptions =\n    state.tag.length || state.starred || state.query || state.datasource || state.panel_type\n      ? [SearchLayout.Folders]\n      : [];\n\n  return (\n    <Stack justifyContent=\"space-between\" alignItems=\"center\">\n      <Stack gap={2} alignItems=\"center\">\n        <TagFilter isClearable={false} tags={state.tag} tagOptions={getTagOptions} onChange={onTagFilterChange} />\n        {config.featureToggles.panelTitleSearch && (\n          <Checkbox\n            data-testid=\"include-panels\"\n            disabled={layout === SearchLayout.Folders}\n            value={state.includePanels}\n            onChange={() => onSetIncludePanels(!state.includePanels)}\n            label={t('search.actions.include-panels', 'Include panels')}\n          />\n        )}\n\n        {showStarredFilter && (\n          <div className={styles.checkboxWrapper}>\n            <Checkbox\n              label={t('search.actions.starred', 'Starred')}\n              onChange={onStarredFilterChange}\n              value={state.starred}\n            />\n          </div>\n        )}\n        {state.datasource && (\n          <Button icon=\"times\" variant=\"secondary\" onClick={() => onDatasourceChange(undefined)}>\n            <Trans i18nKey=\"search.actions.remove-datasource-filter\">\n              Datasource: {{ datasource: state.datasource }}\n            </Trans>\n          </Button>\n        )}\n        {state.panel_type && (\n          <Button icon=\"times\" variant=\"secondary\" onClick={() => onPanelTypeChange(undefined)}>\n            Panel: {state.panel_type}\n          </Button>\n        )}\n      </Stack>\n\n      <Stack gap={2}>\n        {showLayout && (\n          <RadioButtonGroup\n            options={getLayoutOptions()}\n            disabledOptions={disabledOptions}\n            onChange={onLayoutChange}\n            value={layout}\n          />\n        )}\n        <SortPicker\n          onChange={(change) => onSortChange(change?.value)}\n          value={state.sort}\n          getSortOptions={getSortOptions}\n          placeholder={sortPlaceholder || t('search.actions.sort-placeholder', 'Sort')}\n          isClearable\n        />\n      </Stack>\n    </Stack>\n  );\n};\n\nActionRow.displayName = 'ActionRow';\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    checkboxWrapper: css({\n      label: {\n        lineHeight: '1.2',\n      },\n    }),\n  };\n};\n","import { debounce } from 'lodash';\nimport { FormEvent } from 'react';\n\nimport { locationService } from '@grafana/runtime';\nimport { TermCount } from 'app/core/components/TagFilter/TagFilter';\nimport { StateManagerBase } from 'app/core/services/StateManagerBase';\nimport store from 'app/core/store';\n\nimport { SEARCH_PANELS_LOCAL_STORAGE_KEY, SEARCH_SELECTED_LAYOUT, SEARCH_SELECTED_SORT } from '../constants';\nimport {\n  reportDashboardListViewed,\n  reportSearchFailedQueryInteraction,\n  reportSearchQueryInteraction,\n  reportSearchResultInteraction,\n} from '../page/reporting';\nimport { getGrafanaSearcher, SearchQuery } from '../service';\nimport { SearchLayout, SearchQueryParams, SearchState } from '../types';\nimport { parseRouteParams } from '../utils';\n\nexport const initialState: SearchState = {\n  query: '',\n  tag: [],\n  starred: false,\n  layout: SearchLayout.Folders,\n  sort: undefined,\n  prevSort: undefined,\n  eventTrackingNamespace: 'dashboard_search',\n  deleted: false,\n};\n\nexport const defaultQueryParams: SearchQueryParams = {\n  sort: null,\n  starred: null,\n  query: null,\n  tag: null,\n  layout: null,\n};\n\nconst getLocalStorageLayout = () => {\n  const selectedLayout = localStorage.getItem(SEARCH_SELECTED_LAYOUT);\n  if (selectedLayout === SearchLayout.List) {\n    return SearchLayout.List;\n  } else {\n    return SearchLayout.Folders;\n  }\n};\nexport class SearchStateManager extends StateManagerBase<SearchState> {\n  updateLocation = debounce((query) => locationService.partial(query, true), 300);\n  doSearchWithDebounce = debounce(() => this.doSearch(), 300);\n  lastQuery?: SearchQuery;\n\n  lastSearchTimestamp = 0;\n\n  initStateFromUrl(folderUid?: string, doInitialSearch = true) {\n    const stateFromUrl = parseRouteParams(locationService.getSearchObject());\n\n    // Force list view when conditions are specified from the URL\n    if (stateFromUrl.query || stateFromUrl.datasource || stateFromUrl.panel_type) {\n      stateFromUrl.layout = SearchLayout.List;\n    }\n\n    const layout = getLocalStorageLayout();\n    const prevSort = localStorage.getItem(SEARCH_SELECTED_SORT) ?? undefined;\n    const sort = layout === SearchLayout.List ? stateFromUrl.sort || prevSort : null;\n\n    this.setState({\n      ...initialState,\n      ...stateFromUrl,\n      layout,\n      sort: sort ?? initialState.sort,\n      prevSort,\n      folderUid: folderUid,\n      eventTrackingNamespace: folderUid ? 'manage_dashboards' : 'dashboard_search',\n      deleted: this.state.deleted,\n    });\n\n    if (doInitialSearch && this.hasSearchFilters()) {\n      this.doSearch();\n    }\n  }\n\n  /**\n   * Updates internal and url state, then triggers a new search\n   */\n  setStateAndDoSearch(state: Partial<SearchState>) {\n    const sort = state.sort || this.state.sort || localStorage.getItem(SEARCH_SELECTED_SORT) || undefined;\n\n    // Set internal state\n    this.setState({ sort, ...state });\n\n    // Update url state\n    this.updateLocation({\n      query: this.state.query.length === 0 ? null : this.state.query,\n      tag: this.state.tag,\n      datasource: this.state.datasource,\n      panel_type: this.state.panel_type,\n      starred: this.state.starred ? this.state.starred : null,\n      sort: this.state.sort,\n    });\n\n    // Prevent searching when user is only clearing the input.\n    // We don't show these results anyway\n    if (this.hasSearchFilters()) {\n      this.doSearchWithDebounce();\n    }\n  }\n\n  onCloseSearch = () => {\n    this.updateLocation({\n      search: null,\n      folder: null,\n      ...defaultQueryParams,\n    });\n  };\n\n  onClearSearchAndFilters = () => {\n    this.setStateAndDoSearch({\n      query: '',\n      datasource: undefined,\n      tag: [],\n      panel_type: undefined,\n      starred: undefined,\n      sort: undefined,\n    });\n  };\n\n  onQueryChange = (query: string) => {\n    this.setStateAndDoSearch({ query });\n  };\n\n  onRemoveTag = (tagToRemove: string) => {\n    this.setStateAndDoSearch({ tag: this.state.tag.filter((tag) => tag !== tagToRemove) });\n  };\n\n  onTagFilterChange = (tags: string[]) => {\n    this.setStateAndDoSearch({ tag: tags });\n  };\n\n  onAddTag = (newTag: string) => {\n    if (this.state.tag && this.state.tag.includes(newTag)) {\n      return;\n    }\n\n    this.setStateAndDoSearch({ tag: [...this.state.tag, newTag] });\n  };\n\n  onDatasourceChange = (datasource: string | undefined) => {\n    this.setStateAndDoSearch({ datasource });\n  };\n\n  onPanelTypeChange = (panel_type?: string) => {\n    this.setStateAndDoSearch({ panel_type });\n  };\n\n  onStarredFilterChange = (e: FormEvent<HTMLInputElement>) => {\n    const starred = e.currentTarget.checked;\n    this.setStateAndDoSearch({ starred });\n  };\n\n  onClearStarred = () => {\n    this.setStateAndDoSearch({ starred: false });\n  };\n\n  onSetStarred = (starred: boolean) => {\n    if (starred !== this.state.starred) {\n      this.setStateAndDoSearch({ starred });\n    }\n  };\n\n  onSortChange = (sort: string | undefined) => {\n    if (sort) {\n      localStorage.setItem(SEARCH_SELECTED_SORT, sort);\n    } else {\n      localStorage.removeItem(SEARCH_SELECTED_SORT);\n    }\n\n    if (this.state.layout === SearchLayout.Folders) {\n      this.setStateAndDoSearch({ sort, layout: SearchLayout.List });\n    } else {\n      this.setStateAndDoSearch({ sort });\n    }\n  };\n\n  onLayoutChange = (layout: SearchLayout) => {\n    localStorage.setItem(SEARCH_SELECTED_LAYOUT, layout);\n\n    if (this.state.sort && layout === SearchLayout.Folders) {\n      this.setStateAndDoSearch({ layout, prevSort: this.state.sort, sort: undefined });\n    } else {\n      this.setStateAndDoSearch({ layout, sort: this.state.prevSort });\n    }\n  };\n\n  onSetIncludePanels = (includePanels: boolean) => {\n    this.setStateAndDoSearch({ includePanels });\n    store.set(SEARCH_PANELS_LOCAL_STORAGE_KEY, includePanels);\n  };\n\n  hasSearchFilters() {\n    return Boolean(\n      this.state.query ||\n        this.state.tag.length ||\n        this.state.starred ||\n        this.state.panel_type ||\n        this.state.sort ||\n        this.state.deleted ||\n        this.state.layout === SearchLayout.List\n    );\n  }\n\n  getSearchQuery() {\n    const q: SearchQuery = {\n      query: this.state.query,\n      tags: this.state.tag,\n      ds_uid: this.state.datasource,\n      panel_type: this.state.panel_type,\n      location: this.state.folderUid, // This will scope all results to the prefix\n      sort: this.state.sort,\n      explain: this.state.explain,\n      withAllowedActions: this.state.explain, // allowedActions are currently not used for anything on the UI and added only in `explain` mode\n      starred: this.state.starred,\n      deleted: this.state.deleted,\n    };\n\n    // Only dashboards have additional properties\n    if (q.sort?.length && !q.sort.includes('name')) {\n      q.kind = ['dashboard', 'folder']; // skip panels\n    }\n\n    if (!q.query?.length) {\n      q.query = '*';\n      if (!q.location) {\n        q.kind = ['dashboard', 'folder']; // skip panels\n      }\n    }\n\n    if (!this.state.includePanels && !q.kind) {\n      q.kind = ['dashboard', 'folder']; // skip panels\n    }\n\n    if (q.panel_type?.length) {\n      q.kind = ['panel'];\n    }\n\n    return q;\n  }\n\n  private doSearch() {\n    const trackingInfo = {\n      layout: this.state.layout,\n      starred: this.state.starred,\n      sortValue: this.state.sort,\n      query: this.state.query,\n      tagCount: this.state.tag?.length,\n      includePanels: this.state.includePanels,\n      deleted: this.state.deleted,\n    };\n\n    reportSearchQueryInteraction(this.state.eventTrackingNamespace, trackingInfo);\n\n    this.lastQuery = this.getSearchQuery();\n\n    this.setState({ loading: true });\n\n    const searcher = getGrafanaSearcher();\n\n    const searchTimestamp = Date.now();\n    const searchPromise = this.state.starred ? searcher.starred(this.lastQuery) : searcher.search(this.lastQuery);\n\n    searchPromise\n      .then((result) => {\n        // Only keep the results if it's was issued after the most recently resolved search.\n        // This prevents results showing out of order if first request is slower than later ones\n        if (searchTimestamp > this.lastSearchTimestamp) {\n          this.setState({ result, loading: false });\n          this.lastSearchTimestamp = searchTimestamp;\n        }\n      })\n      .catch((error) => {\n        reportSearchFailedQueryInteraction(this.state.eventTrackingNamespace, {\n          ...trackingInfo,\n          error: error?.message,\n        });\n        this.setState({ loading: false });\n      });\n  }\n\n  // This gets the possible tags from within the query results\n  getTagOptions = (): Promise<TermCount[]> => {\n    const query = this.lastQuery ?? {\n      kind: ['dashboard', 'folder'],\n      query: '*',\n    };\n    return getGrafanaSearcher().tags(query);\n  };\n\n  /**\n   * When item is selected clear some filters and report interaction\n   */\n  onSearchItemClicked = (e: React.MouseEvent<HTMLElement>) => {\n    reportSearchResultInteraction(this.state.eventTrackingNamespace, {\n      layout: this.state.layout,\n      starred: this.state.starred,\n      sortValue: this.state.sort,\n      query: this.state.query,\n      tagCount: this.state.tag?.length,\n      includePanels: this.state.includePanels,\n      deleted: this.state.deleted,\n    });\n  };\n\n  /**\n   * Caller should handle debounce\n   */\n  onReportSearchUsage = () => {\n    reportDashboardListViewed(this.state.eventTrackingNamespace, {\n      layout: this.state.layout,\n      starred: this.state.starred,\n      sortValue: this.state.sort,\n      query: this.state.query,\n      tagCount: this.state.tag?.length,\n      includePanels: this.state.includePanels,\n      deleted: this.state.deleted,\n    });\n  };\n}\n\nlet stateManager: SearchStateManager;\n\nexport function getSearchStateManager() {\n  if (!stateManager) {\n    const selectedLayout = localStorage.getItem(SEARCH_SELECTED_LAYOUT) as SearchLayout;\n    const layout = selectedLayout ?? initialState.layout;\n\n    let includePanels = store.getBool(SEARCH_PANELS_LOCAL_STORAGE_KEY, true);\n    if (includePanels) {\n      includePanels = false;\n    }\n\n    stateManager = new SearchStateManager({ ...initialState, layout, includePanels });\n  }\n\n  return stateManager;\n}\n\nexport function useSearchStateManager() {\n  const stateManager = getSearchStateManager();\n  const state = stateManager.useState();\n\n  return [state, stateManager] as const;\n}\n"],"names":["getSearchPlaceholder","includePanels","getNewDashboardPhrase","getNewFolderPhrase","getImportPhrase","getNewPhrase","BrowseActions","dispatch","selectedItems","deleteItems","moveItems","stateManager","moveIsInvalid","config","v","isSearching","onActionComplete","onDelete","trackAction","onMove","destinationUID","showMoveModal","MoveModal","showDeleteModal","DeleteModal","moveButton","Button","Stack","Tooltip","actionMap","action","selectedDashboards","uid","selectedFolders","BrowseFilters","searchState","ActionRow","SelectionState","CheckboxCell","row","isSelected","onItemSelectionChange","item","CheckboxSpacer","Checkbox","state","selectors","ev","styles","getStyles","theme","CheckboxHeaderCell","onAllSelectionChange","CHEVRON_SIZE","ICON_SIZE","NameCell","data","onFolderClick","treeID","level","isOpen","childrenByParentUID","isLoading","iconName","Indent","Text","IconButton","Spinner","Icon","Link","TagsCell","TagList","HEADER_HEIGHT","ROW_HEIGHT","DIVIDER_HEIGHT","DashboardsTree","items","width","height","isItemLoaded","requestLoadMore","canSelect","infiniteLoaderRef","listRef","tableColumns","checkboxColumn","nameColumn","props","tagsColumns","table","getTableProps","getTableBodyProps","headerGroups","virtualData","handleIsItemLoaded","itemIndex","handleLoadMore","startIndex","endIndex","parentUID","getRowHeight","rowIndex","headerGroup","key","headerGroupProps","column","headerProps","onItemsRendered","ref","elem","VirtualListRow","index","style","rows","prepareRow","dashboardItem","rowProps","cell","cellProps","BrowseView","folderUID","status","flatTree","handleFolderClick","clickedFolderUID","handleItemSelectionChange","selection","hasSelectedDescendants","treeItem","EmptyState","TextLink","CallToActionCard","newState","collection","thisIsSelected","initialFormModel","NewFolderForm","onCancel","onConfirm","handleSubmit","register","errors","translatedFolderNameRequiredPhrase","validateFolderName","folderName","e","fieldNameLabel","form","Field","Input","CreateNewButton","parentFolder","canCreateDashboard","canCreateFolder","setIsOpen","location","newFolder","showNewFolderDrawer","setShowNewFolderDrawer","onCreateFolder","depth","newMenu","Menu","MenuItem","buildUrl","Dropdown","Drawer","url","folderUid","baseUrl","BrowseDashboardsPage","search","folderDTO","saveFolder","navModel","model","dashboardsTabID","dashboardsTab","child","hasSelection","rootFolderDTO","folder","canEditFolders","canEditDashboards","canCreateDashboards","canCreateFolders","hasAdminRights","showEditTitle","onEditTitle","newValue","result","handleButtonClickToRecentlyDeleted","Page","FolderActionsButton","FilterInput","SearchView","onDismiss","deleteIsInvalid","isDeleting","setIsDeleting","moveTarget","setMoveTarget","isMoving","setIsMoving","showPermissionsDrawer","setShowPermissionsDrawer","moveFolder","deleteFolder","canDeleteFolders","canViewPermissions","canSetPermissions","canMoveFolder","parents","parentUrl","managePermissionsLabel","moveLabel","deleteLabel","menu","NUM_PLACEHOLDER_ROWS","initialLoadingView","emptyStateProp","wholeState","keyboardEvents","value","selectionChecker","kind","assertDashboardViewItemKind","clearSelection","newIsSelected","emptyState","checkFolderPermission","checkCanCreateFolders","getFolderPermissions","getLayoutOptions","getValidQueryLayout","q","layout","showStarredFilter","showLayout","sortPlaceholder","onLayoutChange","onSortChange","onStarredFilterChange","onTagFilterChange","getTagOptions","getSortOptions","onDatasourceChange","onPanelTypeChange","onSetIncludePanels","disabledOptions","change","initialState","defaultQueryParams","getLocalStorageLayout","SearchStateManager","query","tagToRemove","tag","tags","newTag","datasource","panel_type","starred","sort","doInitialSearch","stateFromUrl","prevSort","trackingInfo","searcher","searchTimestamp","error","getSearchStateManager","useSearchStateManager"],"sourceRoot":""}