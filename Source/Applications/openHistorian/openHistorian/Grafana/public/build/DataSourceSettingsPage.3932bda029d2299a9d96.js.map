{"version":3,"sources":["webpack:///./public/app/features/datasources/settings/ButtonRow.tsx","webpack:///./public/app/features/plugins/PluginStateInfo.tsx","webpack:///./public/app/features/datasources/settings/PluginSettings.tsx","webpack:///./public/app/features/datasources/settings/BasicSettings.tsx","webpack:///./public/app/features/datasources/settings/DataSourceSettingsPage.tsx","webpack:///./public/app/core/selectors/location.ts","webpack:///./public/app/features/datasources/state/selectors.ts"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","app_core_config__WEBPACK_IMPORTED_MODULE_1__","__webpack_exports__","_a","isReadOnly","onDelete","onSubmit","onTest","a","createElement","className","type","disabled","onClick","event","aria-label","href","appSubUrl","props","text","state","_grafana_ui__WEBPACK_IMPORTED_MODULE_2__","alpha","beta","getPluginStateInfoText","react__WEBPACK_IMPORTED_MODULE_1___default","Object","emotion__WEBPACK_IMPORTED_MODULE_3__","templateObject_1","tslib__WEBPACK_IMPORTED_MODULE_0__","PluginSettings","_super","_this","call","this","onModelChanged","dataSource","onModelChange","scopeProps","ctrl","datasourceMeta","dataSourceMeta","current","lodash__WEBPACK_IMPORTED_MODULE_2___default","cloneDeep","bind","prototype","componentDidMount","plugin","element","components","ConfigEditor","loader","_grafana_runtime__WEBPACK_IMPORTED_MODULE_3__","component","load","componentDidUpdate","prevProps","digest","componentWillUnmount","destroy","render","ref","options","onOptionsChange","react__WEBPACK_IMPORTED_MODULE_1__","_grafana_ui__WEBPACK_IMPORTED_MODULE_1__","dataSourceName","isDefault","onDefaultChange","onNameChange","style","marginRight","tooltip","value","placeholder","onChange","target","required","label","checked","DataSourceSettingsPage","evt","preventDefault","updateDataSource","sent","testDataSource","app_core_app_events__WEBPACK_IMPORTED_MODULE_9__","emit","title","yesText","icon","onConfirm","confirmDelete","deleteDataSource","dataSourceLoaded","loadPlugin","pluginId","app_features_plugins_plugin_loader__WEBPACK_IMPORTED_MODULE_18__","importedPlugin","console","log","e_1","setState","loadDataSource","pageId","isNaN","loadError","_b","err_1","readOnly","renderIsReadOnlyMessage","app_features_plugins_datasource_srv__WEBPACK_IMPORTED_MODULE_11__","get","name","dsApi","testDatasource","isTesting","testingMessage","testingStatus","app_core_services_backend_srv__WEBPACK_IMPORTED_MODULE_10__","withNoBackendCache","result","status","message","err_2","statusText","defineProperty","id","renderLoadError","showDelete","msg","toString","data","lodash_isString__WEBPACK_IMPORTED_MODULE_4___default","node","subTitle","nav","main","app_core_components_Page_Page__WEBPACK_IMPORTED_MODULE_5__","navModel","Contents","renderConfigPageBody","page","configPages","_c","next","done","p","body","query","renderSettings","setDataSourceName","setIsDefault","app_features_plugins_PluginStateInfo__WEBPACK_IMPORTED_MODULE_17__","_BasicSettings__WEBPACK_IMPORTED_MODULE_7__","_PluginSettings__WEBPACK_IMPORTED_MODULE_6__","_ButtonRow__WEBPACK_IMPORTED_MODULE_8__","isLoading","hasDataSource","mapDispatchToProps","_state_actions__WEBPACK_IMPORTED_MODULE_13__","react_hot_loader__WEBPACK_IMPORTED_MODULE_2__","module","react_redux__WEBPACK_IMPORTED_MODULE_3__","app_core_selectors_location__WEBPACK_IMPORTED_MODULE_15__","location","_state_selectors__WEBPACK_IMPORTED_MODULE_12__","dataSources","app_core_selectors_navModel__WEBPACK_IMPORTED_MODULE_14__","navIndex","_state_navModel__WEBPACK_IMPORTED_MODULE_16__","d","getRouteParamsId","getRouteParamsPage","routeParams","getDataSources","getDataSourceTypes","getDataSource","getDataSourceMeta","getDataSourcesSearchQuery","getDataSourcesLayoutMode","getDataSourcesCount","regex","RegExp","searchQuery","filter","test","database","dataSourceTypeSearchQuery","dataSourceTypes","dataSourceId","parseInt","layoutMode","dataSourcesCount"],"mappings":"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","file":"DataSourceSettingsPage.3932bda029d2299a9d96.js","sourcesContent":["import React, { FC } from 'react';\nimport config from 'app/core/config';\n\nexport interface Props {\n  isReadOnly: boolean;\n  onDelete: () => void;\n  onSubmit: (event: any) => void;\n  onTest: (event: any) => void;\n}\n\nconst ButtonRow: FC<Props> = ({ isReadOnly, onDelete, onSubmit, onTest }) => {\n  return (\n    <div className=\"gf-form-button-row\">\n      {!isReadOnly && (\n        <button\n          type=\"submit\"\n          className=\"btn btn-primary\"\n          disabled={isReadOnly}\n          onClick={event => onSubmit(event)}\n          aria-label=\"Save and Test button\"\n        >\n          Save &amp; Test\n        </button>\n      )}\n      {isReadOnly && (\n        <button type=\"submit\" className=\"btn btn-success\" onClick={onTest}>\n          Test\n        </button>\n      )}\n      <button type=\"submit\" className=\"btn btn-danger\" disabled={isReadOnly} onClick={onDelete}>\n        Delete\n      </button>\n      <a className=\"btn btn-inverse\" href={`${config.appSubUrl}/datasources`}>\n        Back\n      </a>\n    </div>\n  );\n};\n\nexport default ButtonRow;\n","import React, { FC } from 'react';\nimport { PluginState, AlphaNotice } from '@grafana/ui';\nimport { css } from 'emotion';\n\ninterface Props {\n  state?: PluginState;\n}\n\nfunction getPluginStateInfoText(state?: PluginState): string | null {\n  switch (state) {\n    case PluginState.alpha:\n      return 'Alpha Plugin: This plugin is a work in progress and updates may include breaking changes';\n    case PluginState.beta:\n      return 'Beta Plugin: There could be bugs and minor breaking changes to this plugin';\n  }\n  return null;\n}\n\nconst PluginStateinfo: FC<Props> = props => {\n  const text = getPluginStateInfoText(props.state);\n\n  if (!text) {\n    return null;\n  }\n\n  return (\n    <AlphaNotice\n      state={props.state}\n      text={text}\n      className={css`\n        margin-left: 16px;\n      `}\n    />\n  );\n};\n\nexport default PluginStateinfo;\n","import React, { PureComponent } from 'react';\nimport _ from 'lodash';\nimport {\n  DataSourceSettings,\n  DataSourcePlugin,\n  DataSourcePluginMeta,\n  DataSourceApi,\n  DataQuery,\n  DataSourceJsonData,\n} from '@grafana/ui';\nimport { getAngularLoader, AngularComponent } from '@grafana/runtime';\n\nexport type GenericDataSourcePlugin = DataSourcePlugin<DataSourceApi<DataQuery, DataSourceJsonData>>;\n\nexport interface Props {\n  plugin: GenericDataSourcePlugin;\n  dataSource: DataSourceSettings;\n  dataSourceMeta: DataSourcePluginMeta;\n  onModelChange: (dataSource: DataSourceSettings) => void;\n}\n\nexport class PluginSettings extends PureComponent<Props> {\n  element: any;\n  component: AngularComponent;\n  scopeProps: {\n    ctrl: { datasourceMeta: DataSourcePluginMeta; current: DataSourceSettings };\n    onModelChanged: (dataSource: DataSourceSettings) => void;\n  };\n\n  constructor(props: Props) {\n    super(props);\n\n    this.scopeProps = {\n      ctrl: { datasourceMeta: props.dataSourceMeta, current: _.cloneDeep(props.dataSource) },\n      onModelChanged: this.onModelChanged,\n    };\n    this.onModelChanged = this.onModelChanged.bind(this);\n  }\n\n  componentDidMount() {\n    const { plugin } = this.props;\n\n    if (!this.element) {\n      return;\n    }\n\n    if (!plugin.components.ConfigEditor) {\n      // React editor is not specified, let's render angular editor\n      // How to apprach this better? Introduce ReactDataSourcePlugin interface and typeguard it here?\n      const loader = getAngularLoader();\n      const template = '<plugin-component type=\"datasource-config-ctrl\" />';\n\n      this.component = loader.load(this.element, this.scopeProps, template);\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { plugin } = this.props;\n    if (!plugin.components.ConfigEditor && this.props.dataSource !== prevProps.dataSource) {\n      this.scopeProps.ctrl.current = _.cloneDeep(this.props.dataSource);\n\n      this.component.digest();\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.component) {\n      this.component.destroy();\n    }\n  }\n\n  onModelChanged = (dataSource: DataSourceSettings) => {\n    this.props.onModelChange(dataSource);\n  };\n\n  render() {\n    const { plugin, dataSource } = this.props;\n\n    if (!plugin) {\n      return null;\n    }\n\n    return (\n      <div ref={element => (this.element = element)}>\n        {plugin.components.ConfigEditor &&\n          React.createElement(plugin.components.ConfigEditor, {\n            options: dataSource,\n            onOptionsChange: this.onModelChanged,\n          })}\n      </div>\n    );\n  }\n}\n\nexport default PluginSettings;\n","import React, { FC } from 'react';\nimport { FormLabel, Input, Switch } from '@grafana/ui';\n\nexport interface Props {\n  dataSourceName: string;\n  isDefault: boolean;\n  onNameChange: (name: string) => void;\n  onDefaultChange: (value: boolean) => void;\n}\n\nconst BasicSettings: FC<Props> = ({ dataSourceName, isDefault, onDefaultChange, onNameChange }) => {\n  return (\n    <div className=\"gf-form-group\">\n      <div className=\"gf-form-inline\">\n        <div className=\"gf-form max-width-30\" style={{ marginRight: '3px' }}>\n          <FormLabel\n            tooltip={\n              'The name is used when you select the data source in panels. The Default data source is ' +\n              'preselected in new panels.'\n            }\n          >\n            Name\n          </FormLabel>\n          <Input\n            className=\"gf-form-input max-width-23\"\n            type=\"text\"\n            value={dataSourceName}\n            placeholder=\"Name\"\n            onChange={event => onNameChange(event.target.value)}\n            required\n          />\n        </div>\n        {/*\n        //@ts-ignore */}\n        <Switch label=\"Default\" checked={isDefault} onChange={event => onDefaultChange(event.target.checked)} />\n      </div>\n    </div>\n  );\n};\n\nexport default BasicSettings;\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport isString from 'lodash/isString';\n\n// Components\nimport Page from 'app/core/components/Page/Page';\nimport { PluginSettings, GenericDataSourcePlugin } from './PluginSettings';\nimport BasicSettings from './BasicSettings';\nimport ButtonRow from './ButtonRow';\n\n// Services & Utils\nimport appEvents from 'app/core/app_events';\nimport { getBackendSrv } from 'app/core/services/backend_srv';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\n\n// Actions & selectors\nimport { getDataSource, getDataSourceMeta } from '../state/selectors';\nimport {\n  deleteDataSource,\n  loadDataSource,\n  setDataSourceName,\n  setIsDefault,\n  updateDataSource,\n  dataSourceLoaded,\n} from '../state/actions';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { getRouteParamsId } from 'app/core/selectors/location';\n\n// Types\nimport { StoreState } from 'app/types/';\nimport { UrlQueryMap } from '@grafana/runtime';\nimport { DataSourceSettings, DataSourcePluginMeta } from '@grafana/ui';\nimport { NavModel } from '@grafana/data';\nimport { getDataSourceLoadingNav } from '../state/navModel';\nimport PluginStateinfo from 'app/features/plugins/PluginStateInfo';\nimport { importDataSourcePlugin } from 'app/features/plugins/plugin_loader';\n\nexport interface Props {\n  navModel: NavModel;\n  dataSource: DataSourceSettings;\n  dataSourceMeta: DataSourcePluginMeta;\n  pageId: number;\n  deleteDataSource: typeof deleteDataSource;\n  loadDataSource: typeof loadDataSource;\n  setDataSourceName: typeof setDataSourceName;\n  updateDataSource: typeof updateDataSource;\n  setIsDefault: typeof setIsDefault;\n  dataSourceLoaded: typeof dataSourceLoaded;\n  plugin?: GenericDataSourcePlugin;\n  query: UrlQueryMap;\n  page?: string;\n}\n\ninterface State {\n  plugin?: GenericDataSourcePlugin;\n  isTesting?: boolean;\n  testingMessage?: string;\n  testingStatus?: string;\n  loadError?: any;\n}\n\nexport class DataSourceSettingsPage extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      plugin: props.plugin,\n    };\n  }\n\n  async loadPlugin(pluginId?: string) {\n    const { dataSourceMeta } = this.props;\n    let importedPlugin: GenericDataSourcePlugin;\n\n    try {\n      importedPlugin = await importDataSourcePlugin(dataSourceMeta);\n    } catch (e) {\n      console.log('Failed to import plugin module', e);\n    }\n\n    this.setState({ plugin: importedPlugin });\n  }\n\n  async componentDidMount() {\n    const { loadDataSource, pageId } = this.props;\n    if (isNaN(pageId)) {\n      this.setState({ loadError: 'Invalid ID' });\n      return;\n    }\n    try {\n      await loadDataSource(pageId);\n      if (!this.state.plugin) {\n        await this.loadPlugin();\n      }\n    } catch (err) {\n      this.setState({ loadError: err });\n    }\n  }\n\n  onSubmit = async (evt: React.FormEvent<HTMLFormElement>) => {\n    evt.preventDefault();\n\n    await this.props.updateDataSource({ ...this.props.dataSource });\n\n    this.testDataSource();\n  };\n\n  onTest = async (evt: React.FormEvent<HTMLFormElement>) => {\n    evt.preventDefault();\n\n    this.testDataSource();\n  };\n\n  onDelete = () => {\n    appEvents.emit('confirm-modal', {\n      title: 'Delete',\n      text: 'Are you sure you want to delete this data source?',\n      yesText: 'Delete',\n      icon: 'fa-trash',\n      onConfirm: () => {\n        this.confirmDelete();\n      },\n    });\n  };\n\n  confirmDelete = () => {\n    this.props.deleteDataSource();\n  };\n\n  onModelChange = (dataSource: DataSourceSettings) => {\n    this.props.dataSourceLoaded(dataSource);\n  };\n\n  isReadOnly() {\n    return this.props.dataSource.readOnly === true;\n  }\n\n  renderIsReadOnlyMessage() {\n    return (\n      <div className=\"grafana-info-box span8\">\n        This datasource was added by config and cannot be modified using the UI. Please contact your server admin to\n        update this datasource.\n      </div>\n    );\n  }\n\n  async testDataSource() {\n    const dsApi = await getDatasourceSrv().get(this.props.dataSource.name);\n\n    if (!dsApi.testDatasource) {\n      return;\n    }\n\n    this.setState({ isTesting: true, testingMessage: 'Testing...', testingStatus: 'info' });\n\n    getBackendSrv().withNoBackendCache(async () => {\n      try {\n        const result = await dsApi.testDatasource();\n\n        this.setState({\n          isTesting: false,\n          testingStatus: result.status,\n          testingMessage: result.message,\n        });\n      } catch (err) {\n        let message = '';\n\n        if (err.statusText) {\n          message = 'HTTP Error ' + err.statusText;\n        } else {\n          message = err.message;\n        }\n\n        this.setState({\n          isTesting: false,\n          testingStatus: 'error',\n          testingMessage: message,\n        });\n      }\n    });\n  }\n\n  get hasDataSource() {\n    return this.props.dataSource.id > 0;\n  }\n\n  renderLoadError(loadError: any) {\n    let showDelete = false;\n    let msg = loadError.toString();\n    if (loadError.data) {\n      if (loadError.data.message) {\n        msg = loadError.data.message;\n      }\n    } else if (isString(loadError)) {\n      showDelete = true;\n    }\n\n    const node = {\n      text: msg,\n      subTitle: 'Data Source Error',\n      icon: 'fa fa-fw fa-warning',\n    };\n    const nav = {\n      node: node,\n      main: node,\n    };\n\n    return (\n      <Page navModel={nav}>\n        <Page.Contents>\n          <div>\n            <div className=\"gf-form-button-row\">\n              {showDelete && (\n                <button type=\"submit\" className=\"btn btn-danger\" onClick={this.onDelete}>\n                  Delete\n                </button>\n              )}\n              <a className=\"btn btn-inverse\" href=\"datasources\">\n                Back\n              </a>\n            </div>\n          </div>\n        </Page.Contents>\n      </Page>\n    );\n  }\n\n  renderConfigPageBody(page: string) {\n    const { plugin } = this.state;\n    if (!plugin || !plugin.configPages) {\n      return null; // still loading\n    }\n\n    for (const p of plugin.configPages) {\n      if (p.id === page) {\n        return <p.body plugin={plugin} query={this.props.query} />;\n      }\n    }\n\n    return <div>Page Not Found: {page}</div>;\n  }\n\n  renderSettings() {\n    const { dataSourceMeta, setDataSourceName, setIsDefault, dataSource } = this.props;\n    const { testingMessage, testingStatus, plugin } = this.state;\n\n    return (\n      <form onSubmit={this.onSubmit}>\n        {this.isReadOnly() && this.renderIsReadOnlyMessage()}\n        {dataSourceMeta.state && (\n          <div className=\"gf-form\">\n            <label className=\"gf-form-label width-10\">Plugin state</label>\n            <label className=\"gf-form-label gf-form-label--transparent\">\n              <PluginStateinfo state={dataSourceMeta.state} />\n            </label>\n          </div>\n        )}\n\n        <BasicSettings\n          dataSourceName={dataSource.name}\n          isDefault={dataSource.isDefault}\n          onDefaultChange={state => setIsDefault(state)}\n          onNameChange={name => setDataSourceName(name)}\n        />\n\n        {plugin && (\n          <PluginSettings\n            plugin={plugin}\n            dataSource={dataSource}\n            dataSourceMeta={dataSourceMeta}\n            onModelChange={this.onModelChange}\n          />\n        )}\n\n        <div className=\"gf-form-group\">\n          {testingMessage && (\n            <div className={`alert-${testingStatus} alert`} aria-label=\"Datasource settings page Alert\">\n              <div className=\"alert-icon\">\n                {testingStatus === 'error' ? (\n                  <i className=\"fa fa-exclamation-triangle\" />\n                ) : (\n                  <i className=\"fa fa-check\" />\n                )}\n              </div>\n              <div className=\"alert-body\">\n                <div className=\"alert-title\" aria-label=\"Datasource settings page Alert message\">\n                  {testingMessage}\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n\n        <ButtonRow\n          onSubmit={event => this.onSubmit(event)}\n          isReadOnly={this.isReadOnly()}\n          onDelete={this.onDelete}\n          onTest={event => this.onTest(event)}\n        />\n      </form>\n    );\n  }\n\n  render() {\n    const { navModel, page } = this.props;\n    const { loadError } = this.state;\n\n    if (loadError) {\n      return this.renderLoadError(loadError);\n    }\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={!this.hasDataSource}>\n          {this.hasDataSource && <div>{page ? this.renderConfigPageBody(page) : this.renderSettings()}</div>}\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState) {\n  const pageId = getRouteParamsId(state.location);\n  const dataSource = getDataSource(state.dataSources, pageId);\n  const page = state.location.query.page as string;\n\n  return {\n    navModel: getNavModel(\n      state.navIndex,\n      page ? `datasource-page-${page}` : `datasource-settings-${pageId}`,\n      getDataSourceLoadingNav('settings')\n    ),\n    dataSource: getDataSource(state.dataSources, pageId),\n    dataSourceMeta: getDataSourceMeta(state.dataSources, dataSource.type),\n    pageId: pageId,\n    query: state.location.query,\n    page,\n  };\n}\n\nconst mapDispatchToProps = {\n  deleteDataSource,\n  loadDataSource,\n  setDataSourceName,\n  updateDataSource,\n  setIsDefault,\n  dataSourceLoaded,\n};\n\nexport default hot(module)(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(DataSourceSettingsPage)\n);\n","import { LocationState } from 'app/types';\n\nexport const getRouteParamsId = (state: LocationState) => state.routeParams.id;\nexport const getRouteParamsPage = (state: LocationState) => state.routeParams.page;\n","import { DataSourceSettings, DataSourcePluginMeta } from '@grafana/ui';\nimport { DataSourcesState } from '../../../types/datasources';\nimport { UrlQueryValue } from '@grafana/runtime';\n\nexport const getDataSources = (state: DataSourcesState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  return state.dataSources.filter((dataSource: DataSourceSettings) => {\n    return regex.test(dataSource.name) || regex.test(dataSource.database);\n  });\n};\n\nexport const getDataSourceTypes = (state: DataSourcesState) => {\n  const regex = new RegExp(state.dataSourceTypeSearchQuery, 'i');\n\n  return state.dataSourceTypes.filter((type: DataSourcePluginMeta) => {\n    return regex.test(type.name);\n  });\n};\n\nexport const getDataSource = (state: DataSourcesState, dataSourceId: UrlQueryValue): DataSourceSettings | null => {\n  if (state.dataSource.id === parseInt(dataSourceId as string, 10)) {\n    return state.dataSource;\n  }\n  return {} as DataSourceSettings;\n};\n\nexport const getDataSourceMeta = (state: DataSourcesState, type: string): DataSourcePluginMeta => {\n  if (state.dataSourceMeta.id === type) {\n    return state.dataSourceMeta;\n  }\n\n  return {} as DataSourcePluginMeta;\n};\n\nexport const getDataSourcesSearchQuery = (state: DataSourcesState) => state.searchQuery;\nexport const getDataSourcesLayoutMode = (state: DataSourcesState) => state.layoutMode;\nexport const getDataSourcesCount = (state: DataSourcesState) => state.dataSourcesCount;\n"],"sourceRoot":""}