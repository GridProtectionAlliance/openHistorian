{"version":3,"file":"TeamPages.8e7c7a3f1e7a29340238.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/SharedPreferences/SharedPreferences.tsx","webpack://grafana/./public/app/features/admin/utils.ts","webpack://grafana/./public/app/core/components/Upgrade/UpgradeBox.tsx","webpack://grafana/./public/app/features/teams/TeamGroupSync.tsx","webpack://grafana/./public/app/core/components/WithFeatureToggle.tsx","webpack://grafana/./public/app/features/teams/TeamMemberRow.tsx","webpack://grafana/./public/app/features/teams/TeamMembers.tsx","webpack://grafana/./public/app/features/teams/TeamPermissions.tsx","webpack://grafana/./public/app/features/teams/TeamSettings.tsx","webpack://grafana/./public/app/features/teams/TeamPages.tsx","webpack://grafana/./public/app/features/teams/state/actions.ts","webpack://grafana/./public/app/features/teams/state/navModel.ts","webpack://grafana/./public/app/features/teams/state/selectors.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport { t, Trans } from '@lingui/macro';\nimport React, { PureComponent } from 'react';\n\nimport { FeatureState, SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { config } from '@grafana/runtime';\nimport {\n  Button,\n  Field,\n  FieldSet,\n  Form,\n  Icon,\n  Label,\n  RadioButtonGroup,\n  Select,\n  stylesFactory,\n  TimeZonePicker,\n  Tooltip,\n  WeekStartPicker,\n  FeatureBadge,\n} from '@grafana/ui';\nimport { ENGLISH_US, FRENCH_FRANCE, SPANISH_SPAIN } from 'app/core/internationalization/constants';\nimport { PreferencesService } from 'app/core/services/PreferencesService';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport { DashboardSearchItem, DashboardSearchItemType } from 'app/features/search/types';\n\nimport { UserPreferencesDTO } from '../../../types';\n\nexport interface Props {\n  resourceUri: string;\n  disabled?: boolean;\n}\n\nexport type State = UserPreferencesDTO & {\n  dashboards: DashboardSearchItem[];\n};\n\nconst themes: SelectableValue[] = [\n  { value: '', label: t({ id: 'shared-preferences.theme.default-label', message: 'Default' }) },\n  { value: 'dark', label: t({ id: 'shared-preferences.theme.dark-label', message: 'Dark' }) },\n  { value: 'light', label: t({ id: 'shared-preferences.theme.light-label', message: 'Light' }) },\n];\n\nconst languages: Array<SelectableValue<string>> = [\n  {\n    value: '',\n    label: t({\n      id: 'common.locale.default',\n      message: 'Default',\n    }),\n  },\n  {\n    value: ENGLISH_US,\n    label: t({\n      id: 'common.locale.en',\n      message: 'English',\n    }),\n  },\n  {\n    value: SPANISH_SPAIN,\n    label: t({\n      id: 'common.locale.es',\n      message: 'Spanish',\n    }),\n  },\n  {\n    value: FRENCH_FRANCE,\n    label: t({\n      id: 'common.locale.fr',\n      message: 'French',\n    }),\n  },\n];\n\nconst i18nFlag = Boolean(config.featureToggles.internationalization);\n\nconst DEFAULT_DASHBOARD_HOME: DashboardSearchItem = {\n  title: 'Default',\n  tags: [],\n  type: '' as DashboardSearchItemType,\n  uid: undefined,\n  uri: '',\n  url: '',\n  folderId: 0,\n  folderTitle: '',\n  folderUid: '',\n  folderUrl: '',\n  isStarred: false,\n  slug: '',\n  items: [],\n};\n\nexport class SharedPreferences extends PureComponent<Props, State> {\n  service: PreferencesService;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.service = new PreferencesService(props.resourceUri);\n    this.state = {\n      homeDashboardUID: DEFAULT_DASHBOARD_HOME.uid,\n      theme: '',\n      timezone: '',\n      weekStart: '',\n      locale: '',\n      dashboards: [],\n      queryHistory: { homeTab: '' },\n    };\n  }\n\n  async componentDidMount() {\n    const prefs = await this.service.load();\n    const dashboards = await backendSrv.search({ starred: true });\n\n    if (prefs.homeDashboardUID && !dashboards.find((d) => d.uid === prefs.homeDashboardUID)) {\n      const missingDash = await backendSrv.search({ dashboardUIDs: prefs.homeDashboardUID });\n\n      if (missingDash.length > 0) {\n        dashboards.push(missingDash[0]);\n      }\n    }\n\n    this.setState({\n      homeDashboardUID: prefs.homeDashboardUID,\n      theme: prefs.theme,\n      timezone: prefs.timezone,\n      weekStart: prefs.weekStart,\n      locale: prefs.locale,\n      dashboards: [DEFAULT_DASHBOARD_HOME, ...dashboards],\n      queryHistory: prefs.queryHistory,\n    });\n  }\n\n  onSubmitForm = async () => {\n    const { homeDashboardUID, theme, timezone, weekStart, locale, queryHistory } = this.state;\n    await this.service.update({ homeDashboardUID, theme, timezone, weekStart, locale, queryHistory });\n    window.location.reload();\n  };\n\n  onThemeChanged = (value: string) => {\n    this.setState({ theme: value });\n  };\n\n  onTimeZoneChanged = (timezone?: string) => {\n    if (!timezone) {\n      return;\n    }\n    this.setState({ timezone: timezone });\n  };\n\n  onWeekStartChanged = (weekStart: string) => {\n    this.setState({ weekStart: weekStart });\n  };\n\n  onHomeDashboardChanged = (dashboardUID: string) => {\n    this.setState({ homeDashboardUID: dashboardUID });\n  };\n\n  onLocaleChanged = (locale: string) => {\n    this.setState({ locale });\n  };\n\n  getFullDashName = (dashboard: SelectableValue<DashboardSearchItem>) => {\n    if (typeof dashboard.folderTitle === 'undefined' || dashboard.folderTitle === '') {\n      return dashboard.title;\n    }\n    return dashboard.folderTitle + ' / ' + dashboard.title;\n  };\n\n  render() {\n    const { theme, timezone, weekStart, homeDashboardUID, locale, dashboards } = this.state;\n    const { disabled } = this.props;\n    const styles = getStyles();\n\n    const homeDashboardTooltip = (\n      <Tooltip\n        content={\n          <Trans id=\"shared-preferences.fields.home-dashboard-tooltip\">\n            Not finding the dashboard you want? Star it first, then it should appear in this select box.\n          </Trans>\n        }\n      >\n        <Icon name=\"info-circle\" />\n      </Tooltip>\n    );\n\n    return (\n      <Form onSubmit={this.onSubmitForm}>\n        {() => {\n          return (\n            <FieldSet label={<Trans id=\"shared-preferences.title\">Preferences</Trans>} disabled={disabled}>\n              <Field label={t({ id: 'shared-preferences.fields.theme-label', message: 'UI Theme' })}>\n                <RadioButtonGroup\n                  options={themes}\n                  value={themes.find((item) => item.value === theme)?.value}\n                  onChange={this.onThemeChanged}\n                />\n              </Field>\n\n              <Field\n                label={\n                  <Label htmlFor=\"home-dashboard-select\">\n                    <span className={styles.labelText}>\n                      <Trans id=\"shared-preferences.fields.home-dashboard-label\">Home Dashboard</Trans>\n                    </span>\n\n                    {homeDashboardTooltip}\n                  </Label>\n                }\n                data-testid=\"User preferences home dashboard drop down\"\n              >\n                <Select\n                  value={dashboards.find((dashboard) => dashboard.uid === homeDashboardUID)}\n                  getOptionValue={(i) => i.uid}\n                  getOptionLabel={this.getFullDashName}\n                  onChange={(dashboard: SelectableValue<DashboardSearchItem>) =>\n                    this.onHomeDashboardChanged(dashboard.uid)\n                  }\n                  options={dashboards}\n                  placeholder={t({\n                    id: 'shared-preferences.fields.home-dashboard-placeholder',\n                    message: 'Choose default dashboard',\n                  })}\n                  inputId=\"home-dashboard-select\"\n                />\n              </Field>\n\n              <Field\n                label={t({ id: 'shared-dashboard.fields.timezone-label', message: 'Timezone' })}\n                data-testid={selectors.components.TimeZonePicker.containerV2}\n              >\n                <TimeZonePicker\n                  includeInternal={true}\n                  value={timezone}\n                  onChange={this.onTimeZoneChanged}\n                  inputId=\"shared-preferences-timezone-picker\"\n                />\n              </Field>\n\n              <Field\n                label={t({ id: 'shared-preferences.fields.week-start-label', message: 'Week start' })}\n                data-testid={selectors.components.WeekStartPicker.containerV2}\n              >\n                <WeekStartPicker\n                  value={weekStart}\n                  onChange={this.onWeekStartChanged}\n                  inputId={'shared-preferences-week-start-picker'}\n                />\n              </Field>\n\n              {i18nFlag ? (\n                <Field\n                  label={\n                    <Label htmlFor=\"locale-select\">\n                      <span className={styles.labelText}>\n                        <Trans id=\"shared-preferences.fields.locale-label\">Language</Trans>\n                      </span>\n                      <FeatureBadge featureState={FeatureState.alpha} />\n                    </Label>\n                  }\n                  data-testid=\"User preferences language drop down\"\n                >\n                  <Select\n                    value={languages.find((lang) => lang.value === locale)}\n                    onChange={(locale: SelectableValue<string>) => this.onLocaleChanged(locale.value ?? '')}\n                    options={languages}\n                    placeholder={t({\n                      id: 'shared-preferences.fields.locale-placeholder',\n                      message: 'Choose language',\n                    })}\n                    inputId=\"locale-select\"\n                  />\n                </Field>\n              ) : null}\n\n              <div className=\"gf-form-button-row\">\n                <Button\n                  type=\"submit\"\n                  variant=\"primary\"\n                  data-testid={selectors.components.UserProfile.preferencesSaveButton}\n                >\n                  <Trans id=\"common.save\">Save</Trans>\n                </Button>\n              </div>\n            </FieldSet>\n          );\n        }}\n      </Form>\n    );\n  }\n}\n\nexport default SharedPreferences;\n\nconst getStyles = stylesFactory(() => {\n  return {\n    labelText: css`\n      margin-right: 6px;\n    `,\n  };\n});\n","import { config } from '@grafana/runtime/src';\n\nexport function isTrial() {\n  const expiry = config.licenseInfo?.trialExpiry;\n  return !!(expiry && expiry > 0);\n}\n\nexport const highlightTrial = () => isTrial() && config.featureToggles.featureHighlights;\n","import { css, cx } from '@emotion/css';\nimport React, { HTMLAttributes, useEffect } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { reportExperimentView } from '@grafana/runtime/src';\nimport { Button, Icon, LinkButton, useStyles2 } from '@grafana/ui';\n\ntype ComponentSize = 'sm' | 'md';\n\nexport interface Props extends HTMLAttributes<HTMLOrSVGElement> {\n  featureName: string;\n  size?: ComponentSize;\n  text?: string;\n  eventVariant?: string;\n  featureId: string;\n}\n\nexport const UpgradeBox = ({\n  featureName,\n  className,\n  children,\n  text,\n  featureId,\n  eventVariant = '',\n  size = 'md',\n  ...htmlProps\n}: Props) => {\n  const styles = useStyles2((theme) => getUpgradeBoxStyles(theme, size));\n\n  useEffect(() => {\n    reportExperimentView(`feature-highlights-${featureId}`, 'test', eventVariant);\n  }, [eventVariant, featureId]);\n\n  return (\n    <div className={cx(styles.box, className)} {...htmlProps}>\n      <Icon name={'rocket'} className={styles.icon} />\n      <div className={styles.inner}>\n        <p className={styles.text}>\n          You’ve discovered a Pro feature! {text || `Get the Grafana Pro plan to access ${featureName}.`}\n        </p>\n        <LinkButton\n          variant=\"secondary\"\n          size={size}\n          className={styles.button}\n          href=\"https://grafana.com/profile/org/subscription\"\n          target=\"__blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Upgrade\n        </LinkButton>\n      </div>\n    </div>\n  );\n};\n\nconst getUpgradeBoxStyles = (theme: GrafanaTheme2, size: ComponentSize) => {\n  const borderRadius = theme.shape.borderRadius(2);\n  const fontBase = size === 'md' ? 'body' : 'bodySmall';\n\n  return {\n    box: css`\n      display: flex;\n      align-items: center;\n      position: relative;\n      border-radius: ${borderRadius};\n      background: ${theme.colors.success.transparent};\n      padding: ${theme.spacing(2)};\n      color: ${theme.colors.success.text};\n      font-size: ${theme.typography[fontBase].fontSize};\n      text-align: left;\n      line-height: 16px;\n      margin: ${theme.spacing(0, 'auto', 3, 'auto')};\n      max-width: ${theme.breakpoints.values.xxl}px;\n      width: 100%;\n    `,\n    inner: css`\n      display: flex;\n      align-items: center;\n      width: 100%;\n      justify-content: space-between;\n    `,\n    text: css`\n      margin: 0;\n    `,\n    button: css`\n      background-color: ${theme.colors.success.main};\n      font-weight: ${theme.typography.fontWeightLight};\n      color: white;\n\n      &:hover {\n        background-color: ${theme.colors.success.main};\n      }\n\n      &:focus-visible {\n        box-shadow: none;\n        color: ${theme.colors.text.primary};\n        outline: 2px solid ${theme.colors.primary.main};\n      }\n    `,\n    icon: css`\n      margin: ${theme.spacing(0.5, 1, 0.5, 0.5)};\n    `,\n  };\n};\n\nexport interface UpgradeContentProps {\n  image: string;\n  featureUrl?: string;\n  featureName: string;\n  description?: string;\n  listItems: string[];\n  caption?: string;\n  action?: {\n    text: string;\n    link?: string;\n    onClick?: () => void;\n  };\n}\n\nexport const UpgradeContent = ({\n  listItems,\n  image,\n  featureUrl,\n  featureName,\n  description,\n  caption,\n  action,\n}: UpgradeContentProps) => {\n  const styles = useStyles2(getUpgradeContentStyles);\n  return (\n    <div className={styles.container}>\n      <div className={styles.content}>\n        <h3 className={styles.title}>Get started with {featureName}</h3>\n        {description && <h6 className={styles.description}>{description}</h6>}\n        <ul className={styles.list}>\n          {listItems.map((item, index) => (\n            <li key={index}>\n              <Icon name={'check'} size={'xl'} className={styles.icon} /> {item}\n            </li>\n          ))}\n        </ul>\n        {action?.link && (\n          <LinkButton variant={'primary'} href={action.link}>\n            {action.text}\n          </LinkButton>\n        )}\n        {action?.onClick && (\n          <Button variant={'primary'} onClick={action.onClick}>\n            {action.text}\n          </Button>\n        )}\n        {featureUrl && (\n          <LinkButton fill={'text'} href={featureUrl} className={styles.link} target=\"_blank\" rel=\"noreferrer noopener\">\n            Learn more\n          </LinkButton>\n        )}\n      </div>\n      <div className={styles.media}>\n        <img src={getImgUrl(image)} alt={'Feature screenshot'} />\n        {caption && <p className={styles.caption}>{caption}</p>}\n      </div>\n    </div>\n  );\n};\n\nconst getUpgradeContentStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      display: flex;\n      justify-content: space-between;\n    `,\n    content: css`\n      width: 45%;\n      margin-right: ${theme.spacing(4)};\n    `,\n    media: css`\n      width: 55%;\n\n      img {\n        width: 100%;\n      }\n    `,\n    title: css`\n      color: ${theme.colors.text.maxContrast};\n    `,\n    description: css`\n      color: ${theme.colors.text.primary};\n      font-weight: ${theme.typography.fontWeightLight};\n    `,\n    list: css`\n      list-style: none;\n      margin: ${theme.spacing(4, 0, 2, 0)};\n\n      li {\n        display: flex;\n        align-items: flex-start;\n        color: ${theme.colors.text.primary};\n        padding: ${theme.spacing(1, 0)};\n      }\n    `,\n    icon: css`\n      color: ${theme.colors.success.main};\n      margin-right: ${theme.spacing(1)};\n    `,\n    link: css`\n      margin-left: ${theme.spacing(2)};\n    `,\n    caption: css`\n      font-weight: ${theme.typography.fontWeightLight};\n      margin: ${theme.spacing(1, 0, 0)};\n    `,\n  };\n};\n\nexport const UpgradeContentVertical = ({\n  featureName,\n  description,\n  featureUrl,\n  image,\n}: Omit<UpgradeContentProps, 'listItems' | 'caption'>) => {\n  const styles = useStyles2(getContentVerticalStyles);\n  return (\n    <div className={styles.container}>\n      <h3 className={styles.title}>Get started with {featureName}</h3>\n      {description && <h6 className={styles.description}>{description}</h6>}\n      <LinkButton fill={'text'} href={featureUrl} target=\"_blank\" rel=\"noreferrer noopener\">\n        Learn more\n      </LinkButton>\n      <div className={styles.media}>\n        <img src={getImgUrl(image)} alt={'Feature screenshot'} />\n      </div>\n    </div>\n  );\n};\n\nconst getContentVerticalStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      overflow: auto;\n      height: 100%;\n    `,\n    title: css`\n      color: ${theme.colors.text.maxContrast};\n    `,\n    description: css`\n      color: ${theme.colors.text.primary};\n      font-weight: ${theme.typography.fontWeightLight};\n    `,\n    media: css`\n      width: 100%;\n      margin-top: ${theme.spacing(2)};\n\n      img {\n        width: 100%;\n      }\n    `,\n  };\n};\n\nconst getImgUrl = (urlOrId: string) => {\n  if (urlOrId.startsWith('http')) {\n    return urlOrId;\n  }\n\n  return '/public/img/enterprise/highlights/' + urlOrId;\n};\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { Input, Tooltip, Icon, Button, useTheme2, InlineField, InlineFieldRow } from '@grafana/ui';\nimport { SlideDown } from 'app/core/components/Animations/SlideDown';\nimport { CloseButton } from 'app/core/components/CloseButton/CloseButton';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { UpgradeBox, UpgradeContent, UpgradeContentProps } from 'app/core/components/Upgrade/UpgradeBox';\nimport { highlightTrial } from 'app/features/admin/utils';\n\nimport { StoreState, TeamGroup } from '../../types';\n\nimport { addTeamGroup, loadTeamGroups, removeTeamGroup } from './state/actions';\nimport { getTeamGroups } from './state/selectors';\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    groups: getTeamGroups(state.team),\n  };\n}\n\nconst mapDispatchToProps = {\n  loadTeamGroups,\n  addTeamGroup,\n  removeTeamGroup,\n};\n\ninterface OwnProps {\n  isReadOnly: boolean;\n}\n\ninterface State {\n  isAdding: boolean;\n  newGroupId: string;\n}\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nconst headerTooltip = `Sync LDAP, OAuth or SAML groups with your Grafana teams.`;\n\nexport class TeamGroupSync extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { isAdding: false, newGroupId: '' };\n  }\n\n  componentDidMount() {\n    this.fetchTeamGroups();\n  }\n\n  async fetchTeamGroups() {\n    await this.props.loadTeamGroups();\n  }\n\n  onToggleAdding = () => {\n    this.setState({ isAdding: !this.state.isAdding });\n  };\n\n  onNewGroupIdChanged = (event: any) => {\n    this.setState({ newGroupId: event.target.value });\n  };\n\n  onAddGroup = (event: any) => {\n    event.preventDefault();\n    this.props.addTeamGroup(this.state.newGroupId);\n    this.setState({ isAdding: false, newGroupId: '' });\n  };\n\n  onRemoveGroup = (group: TeamGroup) => {\n    this.props.removeTeamGroup(group.groupId);\n  };\n\n  isNewGroupValid() {\n    return this.state.newGroupId.length > 1;\n  }\n\n  renderGroup(group: TeamGroup) {\n    const { isReadOnly } = this.props;\n    return (\n      <tr key={group.groupId}>\n        <td>{group.groupId}</td>\n        <td style={{ width: '1%' }}>\n          <Button\n            size=\"sm\"\n            variant=\"destructive\"\n            onClick={() => this.onRemoveGroup(group)}\n            disabled={isReadOnly}\n            aria-label={`Remove group ${group.groupId}`}\n          >\n            <Icon name=\"times\" />\n          </Button>\n        </td>\n      </tr>\n    );\n  }\n\n  render() {\n    const { isAdding, newGroupId } = this.state;\n    const { groups, isReadOnly } = this.props;\n    return (\n      <div>\n        {highlightTrial() && (\n          <UpgradeBox\n            featureId={'team-sync'}\n            eventVariant={'trial'}\n            featureName={'team sync'}\n            text={'Add a group to enable team sync for free during your trial of Grafana Pro.'}\n          />\n        )}\n        <div className=\"page-action-bar\">\n          {(!highlightTrial() || groups.length > 0) && (\n            <>\n              <h3 className=\"page-sub-heading\">External group sync</h3>\n              <Tooltip placement=\"auto\" content={headerTooltip}>\n                <Icon className=\"icon--has-hover page-sub-heading-icon\" name=\"question-circle\" />\n              </Tooltip>\n            </>\n          )}\n          <div className=\"page-action-bar__spacer\" />\n          {groups.length > 0 && (\n            <Button className=\"pull-right\" onClick={this.onToggleAdding} disabled={isReadOnly}>\n              <Icon name=\"plus\" /> Add group\n            </Button>\n          )}\n        </div>\n\n        <SlideDown in={isAdding}>\n          <div className=\"cta-form\">\n            <CloseButton onClick={this.onToggleAdding} />\n            <form onSubmit={this.onAddGroup}>\n              <InlineFieldRow>\n                <InlineField\n                  label={'Add External Group'}\n                  tooltip=\"LDAP Group Example: cn=users,ou=groups,dc=grafana,dc=org.\"\n                >\n                  <Input\n                    type=\"text\"\n                    id={'add-external-group'}\n                    placeholder=\"\"\n                    value={newGroupId}\n                    onChange={this.onNewGroupIdChanged}\n                    disabled={isReadOnly}\n                  />\n                </InlineField>\n                <Button type=\"submit\" disabled={isReadOnly || !this.isNewGroupValid()} style={{ marginLeft: 4 }}>\n                  Add group\n                </Button>\n              </InlineFieldRow>\n            </form>\n          </div>\n        </SlideDown>\n\n        {groups.length === 0 &&\n          !isAdding &&\n          (highlightTrial() ? (\n            <TeamSyncUpgradeContent action={{ onClick: this.onToggleAdding, text: 'Add group' }} />\n          ) : (\n            <EmptyListCTA\n              onClick={this.onToggleAdding}\n              buttonIcon=\"users-alt\"\n              title=\"There are no external groups to sync with\"\n              buttonTitle=\"Add group\"\n              proTip={headerTooltip}\n              proTipLinkTitle=\"Learn more\"\n              proTipLink=\"https://docs.grafana.org/auth/enhanced_ldap/\"\n              proTipTarget=\"_blank\"\n              buttonDisabled={isReadOnly}\n            />\n          ))}\n\n        {groups.length > 0 && (\n          <div className=\"admin-list-table\">\n            <table className=\"filter-table filter-table--hover form-inline\">\n              <thead>\n                <tr>\n                  <th>External Group ID</th>\n                  <th style={{ width: '1%' }} />\n                </tr>\n              </thead>\n              <tbody>{groups.map((group) => this.renderGroup(group))}</tbody>\n            </table>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport const TeamSyncUpgradeContent = ({ action }: { action?: UpgradeContentProps['action'] }) => {\n  const theme = useTheme2();\n  return (\n    <UpgradeContent\n      action={action}\n      listItems={[\n        'Stop managing user access in two places - assign users to groups in SAML, LDAP or Oauth, and manage access at a Team level in Grafana',\n        'Update users’ permissions immediately when you add or remove them from an LDAP group, with no need for them to sign out and back in',\n      ]}\n      image={`team-sync-${theme.isLight ? 'light' : 'dark'}.png`}\n      featureName={'team sync'}\n      featureUrl={'https://grafana.com/docs/grafana/latest/enterprise/team-sync'}\n      description={\n        'Team Sync makes it easier for you to manage users’ access in Grafana, by immediately updating each user’s Grafana teams and permissions based on their single sign-on group membership, instead of when users sign in.'\n      }\n    />\n  );\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamGroupSync);\n","import React, { FunctionComponent } from 'react';\n\nexport interface Props {\n  featureToggle: boolean;\n}\n\nexport const WithFeatureToggle: FunctionComponent<Props> = ({ featureToggle, children }) => {\n  if (featureToggle === true) {\n    return <>{children}</>;\n  }\n\n  return null;\n};\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select, DeleteButton } from '@grafana/ui';\nimport { TagBadge } from 'app/core/components/TagFilter/TagBadge';\nimport { WithFeatureToggle } from 'app/core/components/WithFeatureToggle';\nimport { TeamMember, teamsPermissionLevels, TeamPermissionLevel } from 'app/types';\n\nimport { updateTeamMember, removeTeamMember } from './state/actions';\n\nconst mapDispatchToProps = {\n  removeTeamMember,\n  updateTeamMember,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\ninterface OwnProps {\n  member: TeamMember;\n  syncEnabled: boolean;\n  editorsCanAdmin: boolean;\n  signedInUserIsTeamAdmin: boolean;\n}\nexport type Props = ConnectedProps<typeof connector> & OwnProps;\n\nexport class TeamMemberRow extends PureComponent<Props> {\n  constructor(props: Props) {\n    super(props);\n    this.renderLabels = this.renderLabels.bind(this);\n    this.renderPermissions = this.renderPermissions.bind(this);\n  }\n\n  onRemoveMember(member: TeamMember) {\n    this.props.removeTeamMember(member.userId);\n  }\n\n  onPermissionChange = (item: SelectableValue<TeamPermissionLevel>, member: TeamMember) => {\n    const permission = item.value;\n    const updatedTeamMember: TeamMember = {\n      ...member,\n      permission: permission as number,\n    };\n\n    this.props.updateTeamMember(updatedTeamMember);\n  };\n\n  renderPermissions(member: TeamMember) {\n    const { editorsCanAdmin, signedInUserIsTeamAdmin } = this.props;\n    const value = teamsPermissionLevels.find((dp) => dp.value === member.permission)!;\n\n    return (\n      <WithFeatureToggle featureToggle={editorsCanAdmin}>\n        <td className=\"width-5 team-permissions\">\n          {signedInUserIsTeamAdmin ? (\n            <Select\n              isSearchable={false}\n              options={teamsPermissionLevels}\n              onChange={(item) => this.onPermissionChange(item, member)}\n              value={value}\n              width={32}\n              aria-label={`Select member's ${member.name} permission level`}\n            />\n          ) : (\n            <span>{value.label}</span>\n          )}\n        </td>\n      </WithFeatureToggle>\n    );\n  }\n\n  renderLabels(labels: string[]) {\n    if (!labels) {\n      return <td />;\n    }\n\n    return (\n      <td>\n        {labels.map((label) => (\n          <TagBadge key={label} label={label} removeIcon={false} count={0} onClick={() => {}} />\n        ))}\n      </td>\n    );\n  }\n\n  render() {\n    const { member, syncEnabled, signedInUserIsTeamAdmin } = this.props;\n    return (\n      <tr key={member.userId}>\n        <td className=\"width-4 text-center\">\n          <img\n            alt={`Avatar for team member \"${member.name}\"`}\n            className=\"filter-table__avatar\"\n            src={member.avatarUrl}\n          />\n        </td>\n        <td>{member.login}</td>\n        <td>{member.email}</td>\n        <td>{member.name}</td>\n        {this.renderPermissions(member)}\n        {syncEnabled && this.renderLabels(member.labels)}\n        <td className=\"text-right\">\n          <DeleteButton\n            aria-label={`Remove team member ${member.name}`}\n            size=\"sm\"\n            disabled={!signedInUserIsTeamAdmin}\n            onConfirm={() => this.onRemoveMember(member)}\n          />\n        </td>\n      </tr>\n    );\n  }\n}\n\nexport default connector(TeamMemberRow);\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Button, FilterInput, Label } from '@grafana/ui';\nimport { SlideDown } from 'app/core/components/Animations/SlideDown';\nimport { CloseButton } from 'app/core/components/CloseButton/CloseButton';\nimport { UserPicker } from 'app/core/components/Select/UserPicker';\nimport { TagBadge } from 'app/core/components/TagFilter/TagBadge';\nimport { WithFeatureToggle } from 'app/core/components/WithFeatureToggle';\nimport { config } from 'app/core/config';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { TeamMember, OrgUser } from 'app/types';\n\nimport TeamMemberRow from './TeamMemberRow';\nimport { addTeamMember } from './state/actions';\nimport { setSearchMemberQuery } from './state/reducers';\nimport { getSearchMemberQuery, isSignedInUserTeamAdmin } from './state/selectors';\n\nfunction mapStateToProps(state: any) {\n  return {\n    searchMemberQuery: getSearchMemberQuery(state.team),\n    editorsCanAdmin: config.editorsCanAdmin, // this makes the feature toggle mockable/controllable from tests,\n    signedInUser: contextSrv.user, // this makes the feature toggle mockable/controllable from tests,\n  };\n}\n\nconst mapDispatchToProps = {\n  addTeamMember,\n  setSearchMemberQuery,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ninterface OwnProps {\n  members: TeamMember[];\n  syncEnabled: boolean;\n}\n\nexport type Props = ConnectedProps<typeof connector> & OwnProps;\n\nexport interface State {\n  isAdding: boolean;\n  newTeamMember?: SelectableValue<OrgUser['userId']> | null;\n}\n\nexport class TeamMembers extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { isAdding: false, newTeamMember: null };\n  }\n\n  onSearchQueryChange = (value: string) => {\n    this.props.setSearchMemberQuery(value);\n  };\n\n  onToggleAdding = () => {\n    this.setState({ isAdding: !this.state.isAdding });\n  };\n\n  onUserSelected = (user: SelectableValue<OrgUser['userId']>) => {\n    this.setState({ newTeamMember: user });\n  };\n\n  onAddUserToTeam = async () => {\n    this.props.addTeamMember(this.state.newTeamMember!.id);\n    this.setState({ newTeamMember: null });\n  };\n\n  renderLabels(labels: string[]) {\n    if (!labels) {\n      return <td />;\n    }\n\n    return (\n      <td>\n        {labels.map((label) => (\n          <TagBadge key={label} label={label} removeIcon={false} count={0} onClick={() => {}} />\n        ))}\n      </td>\n    );\n  }\n\n  render() {\n    const { isAdding } = this.state;\n    const { searchMemberQuery, members, syncEnabled, editorsCanAdmin, signedInUser } = this.props;\n    const isTeamAdmin = isSignedInUserTeamAdmin({ members, editorsCanAdmin, signedInUser });\n\n    return (\n      <div>\n        <div className=\"page-action-bar\">\n          <div className=\"gf-form gf-form--grow\">\n            <FilterInput placeholder=\"Search members\" value={searchMemberQuery} onChange={this.onSearchQueryChange} />\n          </div>\n          <Button className=\"pull-right\" onClick={this.onToggleAdding} disabled={isAdding || !isTeamAdmin}>\n            Add member\n          </Button>\n        </div>\n\n        <SlideDown in={isAdding}>\n          <div className=\"cta-form\">\n            <CloseButton aria-label=\"Close 'Add team member' dialogue\" onClick={this.onToggleAdding} />\n            <Label htmlFor=\"user-picker\">Add team member</Label>\n            <div className=\"gf-form-inline\">\n              <UserPicker inputId=\"user-picker\" onSelected={this.onUserSelected} className=\"min-width-30\" />\n              {this.state.newTeamMember && (\n                <Button type=\"submit\" onClick={this.onAddUserToTeam}>\n                  Add to team\n                </Button>\n              )}\n            </div>\n          </div>\n        </SlideDown>\n\n        <div className=\"admin-list-table\">\n          <table className=\"filter-table filter-table--hover form-inline\">\n            <thead>\n              <tr>\n                <th />\n                <th>Login</th>\n                <th>Email</th>\n                <th>Name</th>\n                <WithFeatureToggle featureToggle={editorsCanAdmin}>\n                  <th>Permission</th>\n                </WithFeatureToggle>\n                {syncEnabled && <th />}\n                <th style={{ width: '1%' }} />\n              </tr>\n            </thead>\n            <tbody>\n              {members &&\n                members.map((member) => (\n                  <TeamMemberRow\n                    key={member.userId}\n                    member={member}\n                    syncEnabled={syncEnabled}\n                    editorsCanAdmin={editorsCanAdmin}\n                    signedInUserIsTeamAdmin={isTeamAdmin}\n                  />\n                ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connector(TeamMembers);\n","import React from 'react';\n\nimport { Permissions } from 'app/core/components/AccessControl';\nimport { contextSrv } from 'app/core/services/context_srv';\n\nimport { AccessControlAction, Team } from '../../types';\n\ntype TeamPermissionsProps = {\n  team: Team;\n};\n\n// TeamPermissions component replaces TeamMembers component when the accesscontrol feature flag is set\nconst TeamPermissions = (props: TeamPermissionsProps) => {\n  const canSetPermissions = contextSrv.hasPermissionInMetadata(\n    AccessControlAction.ActionTeamsPermissionsWrite,\n    props.team\n  );\n\n  return (\n    <Permissions\n      title=\"\"\n      addPermissionTitle=\"Add member\"\n      buttonLabel=\"Add member\"\n      resource=\"teams\"\n      resourceId={props.team.id}\n      canSetPermissions={canSetPermissions}\n    />\n  );\n};\n\nexport default TeamPermissions;\n","import React, { FC } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { Input, Field, Form, Button, FieldSet, VerticalGroup } from '@grafana/ui';\nimport { SharedPreferences } from 'app/core/components/SharedPreferences/SharedPreferences';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AccessControlAction, Team } from 'app/types';\n\nimport { updateTeam } from './state/actions';\n\nconst mapDispatchToProps = {\n  updateTeam,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\ninterface OwnProps {\n  team: Team;\n}\nexport type Props = ConnectedProps<typeof connector> & OwnProps;\n\nexport const TeamSettings: FC<Props> = ({ team, updateTeam }) => {\n  const canWriteTeamSettings = contextSrv.hasPermissionInMetadata(AccessControlAction.ActionTeamsWrite, team);\n\n  return (\n    <VerticalGroup>\n      <FieldSet label=\"Team settings\">\n        <Form\n          defaultValues={{ ...team }}\n          onSubmit={(formTeam: Team) => {\n            updateTeam(formTeam.name, formTeam.email);\n          }}\n          disabled={!canWriteTeamSettings}\n        >\n          {({ register, errors }) => (\n            <>\n              <Field\n                label=\"Name\"\n                disabled={!canWriteTeamSettings}\n                required\n                invalid={!!errors.name}\n                error=\"Name is required\"\n              >\n                <Input {...register('name', { required: true })} id=\"name-input\" />\n              </Field>\n\n              <Field\n                label=\"Email\"\n                description=\"This is optional and is primarily used to set the team profile avatar (via gravatar service).\"\n                disabled={!canWriteTeamSettings}\n              >\n                <Input {...register('email')} placeholder=\"team@email.com\" type=\"email\" id=\"email-input\" />\n              </Field>\n              <Button type=\"submit\" disabled={!canWriteTeamSettings}>\n                Update\n              </Button>\n            </>\n          )}\n        </Form>\n      </FieldSet>\n      <SharedPreferences resourceUri={`teams/${team.id}`} disabled={!canWriteTeamSettings} />\n    </VerticalGroup>\n  );\n};\n\nexport default connector(TeamSettings);\n","import { includes } from 'lodash';\nimport React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { NavModelItem } from '@grafana/data';\nimport { featureEnabled } from '@grafana/runtime';\nimport { Themeable2, withTheme2 } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { UpgradeBox } from 'app/core/components/Upgrade/UpgradeBox';\nimport config from 'app/core/config';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AccessControlAction, StoreState } from 'app/types';\n\nimport TeamGroupSync, { TeamSyncUpgradeContent } from './TeamGroupSync';\nimport TeamMembers from './TeamMembers';\nimport TeamPermissions from './TeamPermissions';\nimport TeamSettings from './TeamSettings';\nimport { loadTeam, loadTeamMembers } from './state/actions';\nimport { getTeamLoadingNav } from './state/navModel';\nimport { getTeam, getTeamMembers, isSignedInUserTeamAdmin } from './state/selectors';\n\ninterface TeamPageRouteParams {\n  id: string;\n  page: string | null;\n}\n\nexport interface OwnProps extends GrafanaRouteComponentProps<TeamPageRouteParams>, Themeable2 {}\n\ninterface State {\n  isSyncEnabled: boolean;\n  isLoading: boolean;\n}\n\nenum PageTypes {\n  Members = 'members',\n  Settings = 'settings',\n  GroupSync = 'groupsync',\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps) {\n  const teamId = parseInt(props.match.params.id, 10);\n  const team = getTeam(state.team, teamId);\n  let defaultPage = 'members';\n  if (contextSrv.accessControlEnabled()) {\n    // With RBAC the settings page will always be available\n    if (!team || !contextSrv.hasPermissionInMetadata(AccessControlAction.ActionTeamsPermissionsRead, team)) {\n      defaultPage = 'settings';\n    }\n  }\n  const pageName = props.match.params.page ?? defaultPage;\n  const teamLoadingNav = getTeamLoadingNav(pageName as string);\n  const pageNav = getNavModel(state.navIndex, `team-${pageName}-${teamId}`, teamLoadingNav).main;\n  const members = getTeamMembers(state.team);\n\n  return {\n    pageNav,\n    teamId: teamId,\n    pageName: pageName,\n    team,\n    members,\n    editorsCanAdmin: config.editorsCanAdmin, // this makes the feature toggle mockable/controllable from tests,\n    signedInUser: contextSrv.user, // this makes the feature toggle mockable/controllable from tests,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadTeam,\n  loadTeamMembers,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport class TeamPages extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      isLoading: false,\n      isSyncEnabled: featureEnabled('teamsync'),\n    };\n  }\n\n  async componentDidMount() {\n    await this.fetchTeam();\n  }\n\n  async fetchTeam() {\n    const { loadTeam, teamId } = this.props;\n    this.setState({ isLoading: true });\n    const team = await loadTeam(teamId);\n    // With accesscontrol, the TeamPermissions will fetch team members\n    if (!contextSrv.accessControlEnabled()) {\n      await this.props.loadTeamMembers();\n    }\n    this.setState({ isLoading: false });\n    return team;\n  }\n\n  getCurrentPage() {\n    const pages = ['members', 'settings', 'groupsync'];\n    const currentPage = this.props.pageName;\n    return includes(pages, currentPage) ? currentPage : pages[0];\n  }\n\n  textsAreEqual = (text1: string, text2: string) => {\n    if (!text1 && !text2) {\n      return true;\n    }\n\n    if (!text1 || !text2) {\n      return false;\n    }\n\n    return text1.toLocaleLowerCase() === text2.toLocaleLowerCase();\n  };\n\n  hideTabsFromNonTeamAdmin = (pageNav: NavModelItem, isSignedInUserTeamAdmin: boolean) => {\n    if (contextSrv.accessControlEnabled()) {\n      return pageNav;\n    }\n\n    if (!isSignedInUserTeamAdmin && pageNav && pageNav.children) {\n      pageNav.children\n        .filter((navItem) => !this.textsAreEqual(navItem.text, PageTypes.Members))\n        .map((navItem) => {\n          navItem.hideFromTabs = true;\n        });\n    }\n\n    return pageNav;\n  };\n\n  renderPage(isSignedInUserTeamAdmin: boolean): React.ReactNode {\n    const { isSyncEnabled } = this.state;\n    const { members, team } = this.props;\n    const currentPage = this.getCurrentPage();\n\n    const canReadTeam = contextSrv.hasAccessInMetadata(\n      AccessControlAction.ActionTeamsRead,\n      team!,\n      isSignedInUserTeamAdmin\n    );\n    const canReadTeamPermissions = contextSrv.hasAccessInMetadata(\n      AccessControlAction.ActionTeamsPermissionsRead,\n      team!,\n      isSignedInUserTeamAdmin\n    );\n    const canWriteTeamPermissions = contextSrv.hasAccessInMetadata(\n      AccessControlAction.ActionTeamsPermissionsWrite,\n      team!,\n      isSignedInUserTeamAdmin\n    );\n\n    switch (currentPage) {\n      case PageTypes.Members:\n        if (contextSrv.accessControlEnabled()) {\n          return <TeamPermissions team={team!} />;\n        } else {\n          return <TeamMembers syncEnabled={isSyncEnabled} members={members} />;\n        }\n      case PageTypes.Settings:\n        return canReadTeam && <TeamSettings team={team!} />;\n      case PageTypes.GroupSync:\n        if (isSyncEnabled) {\n          if (canReadTeamPermissions) {\n            return <TeamGroupSync isReadOnly={!canWriteTeamPermissions} />;\n          }\n        } else if (config.featureToggles.featureHighlights) {\n          return (\n            <>\n              <UpgradeBox featureName={'team sync'} featureId={'team-sync'} />\n              <TeamSyncUpgradeContent />\n            </>\n          );\n        }\n    }\n\n    return null;\n  }\n\n  render() {\n    const { team, pageNav, members, editorsCanAdmin, signedInUser } = this.props;\n    const isTeamAdmin = isSignedInUserTeamAdmin({ members, editorsCanAdmin, signedInUser });\n\n    return (\n      <Page navId=\"teams\" pageNav={this.hideTabsFromNonTeamAdmin(pageNav, isTeamAdmin)}>\n        <Page.Contents isLoading={this.state.isLoading}>\n          {team && Object.keys(team).length !== 0 && this.renderPage(isTeamAdmin)}\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nexport default connector(withTheme2(TeamPages));\n","import { getBackendSrv } from '@grafana/runtime';\nimport { updateNavIndex } from 'app/core/actions';\nimport { contextSrv } from 'app/core/core';\nimport { accessControlQueryParam } from 'app/core/utils/accessControl';\nimport { AccessControlAction, TeamMember, ThunkResult } from 'app/types';\n\nimport { buildNavModel } from './navModel';\nimport { teamGroupsLoaded, teamLoaded, teamMembersLoaded, teamsLoaded } from './reducers';\n\nexport function loadTeams(): ThunkResult<void> {\n  return async (dispatch) => {\n    // Early return if the user cannot list teams\n    if (!contextSrv.hasPermission(AccessControlAction.ActionTeamsRead)) {\n      dispatch(teamsLoaded([]));\n      return;\n    }\n\n    const response = await getBackendSrv().get(\n      '/api/teams/search',\n      accessControlQueryParam({ perpage: 1000, page: 1 })\n    );\n    dispatch(teamsLoaded(response.teams));\n  };\n}\n\nexport function loadTeam(id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    const response = await getBackendSrv().get(`/api/teams/${id}`, accessControlQueryParam());\n    dispatch(teamLoaded(response));\n    dispatch(updateNavIndex(buildNavModel(response)));\n  };\n}\n\nexport function loadTeamMembers(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    const response = await getBackendSrv().get(`/api/teams/${team.id}/members`);\n    dispatch(teamMembersLoaded(response));\n  };\n}\n\nexport function addTeamMember(id: number): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().post(`/api/teams/${team.id}/members`, { userId: id });\n    dispatch(loadTeamMembers());\n  };\n}\n\nexport function removeTeamMember(id: number): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().delete(`/api/teams/${team.id}/members/${id}`);\n    dispatch(loadTeamMembers());\n  };\n}\n\nexport function updateTeam(name: string, email: string): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().put(`/api/teams/${team.id}`, { name, email });\n    dispatch(loadTeam(team.id));\n  };\n}\n\nexport function loadTeamGroups(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    const response = await getBackendSrv().get(`/api/teams/${team.id}/groups`);\n    dispatch(teamGroupsLoaded(response));\n  };\n}\n\nexport function addTeamGroup(groupId: string): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().post(`/api/teams/${team.id}/groups`, { groupId: groupId });\n    dispatch(loadTeamGroups());\n  };\n}\n\nexport function removeTeamGroup(groupId: string): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().delete(`/api/teams/${team.id}/groups/${encodeURIComponent(groupId)}`);\n    dispatch(loadTeamGroups());\n  };\n}\n\nexport function deleteTeam(id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().delete(`/api/teams/${id}`);\n    // Update users permissions in case they lost teams.read with the deletion\n    await contextSrv.fetchUserPermissions();\n    dispatch(loadTeams());\n  };\n}\n\nexport function updateTeamMember(member: TeamMember): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().put(`/api/teams/${member.teamId}/members/${member.userId}`, {\n      permission: member.permission,\n    });\n    dispatch(loadTeamMembers());\n  };\n}\n","import { NavModelItem, NavModel } from '@grafana/data';\nimport { featureEnabled } from '@grafana/runtime';\nimport { ProBadge } from 'app/core/components/Upgrade/ProBadge';\nimport config from 'app/core/config';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { highlightTrial } from 'app/features/admin/utils';\nimport { AccessControlAction, Team, TeamPermissionLevel } from 'app/types';\n\nconst loadingTeam = {\n  avatarUrl: 'public/img/user_profile.png',\n  id: 1,\n  name: 'Loading',\n  email: 'loading',\n  memberCount: 0,\n  permission: TeamPermissionLevel.Member,\n};\n\nexport function buildNavModel(team: Team): NavModelItem {\n  const navModel: NavModelItem = {\n    img: team.avatarUrl,\n    id: 'team-' + team.id,\n    subTitle: 'Manage members and settings',\n    url: '',\n    text: team.name,\n    breadcrumbs: [{ title: 'Teams', url: 'org/teams' }],\n    children: [\n      // With RBAC this tab will always be available (but not always editable)\n      // With Legacy it will be hidden by hideTabsFromNonTeamAdmin should the user not be allowed to see it\n      {\n        active: false,\n        icon: 'sliders-v-alt',\n        id: `team-settings-${team.id}`,\n        text: 'Settings',\n        url: `org/teams/edit/${team.id}/settings`,\n      },\n    ],\n  };\n\n  // While team is loading we leave the members tab\n  // With RBAC the Members tab is available when user has ActionTeamsPermissionsRead for this team\n  // With Legacy it will always be present\n  if (\n    team === loadingTeam ||\n    contextSrv.hasPermissionInMetadata(AccessControlAction.ActionTeamsPermissionsRead, team)\n  ) {\n    navModel.children!.unshift({\n      active: false,\n      icon: 'users-alt',\n      id: `team-members-${team.id}`,\n      text: 'Members',\n      url: `org/teams/edit/${team.id}/members`,\n    });\n  }\n\n  const teamGroupSync: NavModelItem = {\n    active: false,\n    icon: 'sync',\n    id: `team-groupsync-${team.id}`,\n    text: 'External group sync',\n    url: `org/teams/edit/${team.id}/groupsync`,\n  };\n\n  const isLoadingTeam = team === loadingTeam;\n\n  if (highlightTrial()) {\n    teamGroupSync.tabSuffix = () =>\n      ProBadge({ experimentId: isLoadingTeam ? '' : 'feature-highlights-team-sync-badge', eventVariant: 'trial' });\n  }\n\n  // With both Legacy and RBAC the tab is protected being featureEnabled\n  // While team is loading we leave the teamsync tab\n  // With RBAC the External Group Sync tab is available when user has ActionTeamsPermissionsRead for this team\n  if (featureEnabled('teamsync')) {\n    if (isLoadingTeam || contextSrv.hasPermissionInMetadata(AccessControlAction.ActionTeamsPermissionsRead, team)) {\n      navModel.children!.push(teamGroupSync);\n    }\n  } else if (config.featureToggles.featureHighlights) {\n    navModel.children!.push({\n      ...teamGroupSync,\n      tabSuffix: () => ProBadge({ experimentId: isLoadingTeam ? '' : 'feature-highlights-team-sync-badge' }),\n    });\n  }\n\n  return navModel;\n}\n\nexport function getTeamLoadingNav(pageName: string): NavModel {\n  const main = buildNavModel(loadingTeam);\n\n  let node: NavModelItem;\n\n  // find active page\n  for (const child of main.children!) {\n    if (child.id!.indexOf(pageName) > 0) {\n      child.active = true;\n      node = child;\n      break;\n    }\n  }\n\n  return {\n    main: main,\n    node: node!,\n  };\n}\n","import { User } from 'app/core/services/context_srv';\nimport { Team, TeamsState, TeamState, TeamMember, OrgRole, TeamPermissionLevel } from 'app/types';\n\nexport const getSearchQuery = (state: TeamsState) => state.searchQuery;\nexport const getSearchMemberQuery = (state: TeamState) => state.searchMemberQuery;\nexport const getTeamGroups = (state: TeamState) => state.groups;\nexport const getTeamsCount = (state: TeamsState) => state.teams.length;\nexport const getTeamsSearchPage = (state: TeamsState) => state.searchPage;\n\nexport const getTeam = (state: TeamState, currentTeamId: any): Team | null => {\n  if (state.team.id === parseInt(currentTeamId, 10)) {\n    return state.team;\n  }\n\n  return null;\n};\n\nexport const getTeams = (state: TeamsState) => {\n  const regex = RegExp(state.searchQuery, 'i');\n\n  return state.teams.filter((team) => {\n    return regex.test(team.name);\n  });\n};\n\nexport const getTeamMembers = (state: TeamState) => {\n  const regex = RegExp(state.searchMemberQuery, 'i');\n\n  return state.members.filter((member) => {\n    return regex.test(member.login) || regex.test(member.email) || regex.test(member.name);\n  });\n};\n\nexport interface Config {\n  members: TeamMember[];\n  editorsCanAdmin: boolean;\n  signedInUser: User;\n}\n\nexport const isSignedInUserTeamAdmin = (config: Config): boolean => {\n  const { members, signedInUser, editorsCanAdmin } = config;\n  const userInMembers = members.find((m) => m.userId === signedInUser.id);\n  const permission = userInMembers ? userInMembers.permission : TeamPermissionLevel.Member;\n\n  return isPermissionTeamAdmin({ permission, signedInUser, editorsCanAdmin });\n};\n\nexport interface PermissionConfig {\n  permission: TeamPermissionLevel;\n  editorsCanAdmin: boolean;\n  signedInUser: User;\n}\n\nexport const isPermissionTeamAdmin = (config: PermissionConfig): boolean => {\n  const { permission, signedInUser, editorsCanAdmin } = config;\n  const isAdmin = signedInUser.isGrafanaAdmin || signedInUser.orgRole === OrgRole.Admin;\n  const userIsTeamAdmin = permission === TeamPermissionLevel.Admin;\n  const isSignedInUserTeamAdmin = isAdmin || userIsTeamAdmin;\n\n  return isSignedInUserTeamAdmin || !editorsCanAdmin;\n};\n"],"names":["themes","value","label","id","languages","ENGLISH_US","SPANISH_SPAIN","FRENCH_FRANCE","i18nFlag","Boolean","config","DEFAULT_DASHBOARD_HOME","title","tags","type","uid","undefined","uri","url","folderId","folderTitle","folderUid","folderUrl","isStarred","slug","items","SharedPreferences","PureComponent","constructor","props","super","async","homeDashboardUID","theme","timezone","weekStart","locale","queryHistory","this","state","service","update","window","location","reload","setState","dashboardUID","dashboard","PreferencesService","resourceUri","dashboards","homeTab","prefs","load","backendSrv","starred","find","d","missingDash","dashboardUIDs","length","push","render","disabled","styles","getStyles","homeDashboardTooltip","Tooltip","content","Icon","name","Form","onSubmit","onSubmitForm","FieldSet","Field","RadioButtonGroup","options","item","onChange","onThemeChanged","Label","htmlFor","className","labelText","Select","getOptionValue","i","getOptionLabel","getFullDashName","onHomeDashboardChanged","placeholder","inputId","selectors","TimeZonePicker","includeInternal","onTimeZoneChanged","WeekStartPicker","onWeekStartChanged","FeatureBadge","featureState","FeatureState","lang","onLocaleChanged","Button","variant","stylesFactory","css","highlightTrial","expiry","trialExpiry","isTrial","UpgradeBox","featureName","text","featureId","eventVariant","size","htmlProps","useStyles2","getUpgradeBoxStyles","useEffect","reportExperimentView","cx","box","icon","inner","LinkButton","button","href","target","rel","borderRadius","shape","fontBase","colors","success","transparent","spacing","typography","fontSize","breakpoints","values","xxl","main","fontWeightLight","primary","UpgradeContent","listItems","image","featureUrl","description","caption","action","getUpgradeContentStyles","container","list","map","index","link","onClick","fill","media","src","getImgUrl","alt","maxContrast","urlOrId","startsWith","mapStateToProps","groups","getTeamGroups","team","mapDispatchToProps","loadTeamGroups","addTeamGroup","removeTeamGroup","headerTooltip","connect","TeamGroupSync","isAdding","event","newGroupId","preventDefault","group","groupId","componentDidMount","fetchTeamGroups","isNewGroupValid","renderGroup","isReadOnly","style","width","onRemoveGroup","placement","onToggleAdding","SlideDown","in","CloseButton","onAddGroup","InlineFieldRow","InlineField","tooltip","Input","onNewGroupIdChanged","marginLeft","TeamSyncUpgradeContent","EmptyListCTA","buttonIcon","buttonTitle","proTip","proTipLinkTitle","proTipLink","proTipTarget","buttonDisabled","useTheme2","isLight","WithFeatureToggle","featureToggle","children","removeTeamMember","updateTeamMember","connector","TeamMemberRow","member","permission","updatedTeamMember","renderLabels","bind","renderPermissions","onRemoveMember","userId","editorsCanAdmin","signedInUserIsTeamAdmin","teamsPermissionLevels","dp","isSearchable","onPermissionChange","labels","TagBadge","removeIcon","count","syncEnabled","avatarUrl","login","email","DeleteButton","onConfirm","addTeamMember","setSearchMemberQuery","searchMemberQuery","getSearchMemberQuery","signedInUser","contextSrv","TeamMembers","user","newTeamMember","members","isTeamAdmin","isSignedInUserTeamAdmin","FilterInput","onSearchQueryChange","UserPicker","onSelected","onUserSelected","onAddUserToTeam","canSetPermissions","AccessControlAction","P","addPermissionTitle","buttonLabel","resource","resourceId","updateTeam","canWriteTeamSettings","VerticalGroup","defaultValues","formTeam","register","errors","required","invalid","error","PageTypes","loadTeam","loadTeamMembers","teamId","parseInt","match","params","getTeam","defaultPage","pageName","page","teamLoadingNav","getTeamLoadingNav","pageNav","getNavModel","navIndex","getTeamMembers","TeamPages","text1","text2","toLocaleLowerCase","filter","navItem","textsAreEqual","Members","hideFromTabs","isLoading","isSyncEnabled","featureEnabled","fetchTeam","getCurrentPage","pages","currentPage","includes","renderPage","canReadTeam","canReadTeamPermissions","canWriteTeamPermissions","Settings","GroupSync","Page","navId","hideTabsFromNonTeamAdmin","Object","keys","withTheme2","loadTeams","dispatch","teamsLoaded","response","getBackendSrv","get","accessControlQueryParam","perpage","teams","teamLoaded","updateNavIndex","buildNavModel","getStore","teamMembersLoaded","post","delete","put","teamGroupsLoaded","encodeURIComponent","deleteTeam","loadingTeam","memberCount","TeamPermissionLevel","navModel","img","subTitle","breadcrumbs","active","unshift","teamGroupSync","isLoadingTeam","tabSuffix","ProBadge","experimentId","node","child","indexOf","getSearchQuery","searchQuery","getTeamsCount","getTeamsSearchPage","searchPage","currentTeamId","getTeams","regex","RegExp","test","userInMembers","m","isPermissionTeamAdmin","isAdmin","isGrafanaAdmin","orgRole","OrgRole","userIsTeamAdmin"],"sourceRoot":""}