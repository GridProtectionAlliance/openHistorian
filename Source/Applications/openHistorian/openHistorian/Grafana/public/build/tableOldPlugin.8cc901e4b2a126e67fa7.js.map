{"version":3,"file":"tableOldPlugin.8cc901e4b2a126e67fa7.js","mappings":"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","sources":["webpack://grafana/./public/app/angular/AngularLocationWrapper.ts","webpack://grafana/./public/app/angular/panel/metrics_panel_ctrl.ts","webpack://grafana/./public/app/angular/panel/panel_ctrl.ts","webpack://grafana/./public/app/angular/panel/query_ctrl.ts","webpack://grafana/./public/app/plugins/panel/table-old/column_options.ts","webpack://grafana/./public/app/plugins/panel/table-old/transformers.ts","webpack://grafana/./public/app/plugins/panel/table-old/editor.ts","webpack://grafana/./public/app/plugins/panel/table-old/renderer.ts","webpack://grafana/./public/app/plugins/panel/table-old/module.ts","webpack://grafana/./public/app/plugins/sdk.ts"],"sourcesContent":["import { deprecationWarning, urlUtil } from '@grafana/data';\nimport { locationSearchToObject, locationService, navigationLogger } from '@grafana/runtime';\n\n// Ref: https://github.com/angular/angular.js/blob/ae8e903edf88a83fedd116ae02c0628bf72b150c/src/ng/location.js#L5\nconst DEFAULT_PORTS: Record<string, number> = { http: 80, https: 443, ftp: 21 };\n\nexport class AngularLocationWrapper {\n  constructor() {\n    this.absUrl = this.wrapInDeprecationWarning(this.absUrl);\n    this.hash = this.wrapInDeprecationWarning(this.hash);\n    this.host = this.wrapInDeprecationWarning(this.host);\n    this.path = this.wrapInDeprecationWarning(this.path);\n    this.port = this.wrapInDeprecationWarning(this.port, 'window.location');\n    this.protocol = this.wrapInDeprecationWarning(this.protocol, 'window.location');\n    this.replace = this.wrapInDeprecationWarning(this.replace);\n    this.search = this.wrapInDeprecationWarning(this.search);\n    this.state = this.wrapInDeprecationWarning(this.state);\n    this.url = this.wrapInDeprecationWarning(this.url);\n  }\n\n  wrapInDeprecationWarning(fn: Function, replacement?: string) {\n    let self = this;\n\n    return function wrapper() {\n      deprecationWarning('$location', fn.name, replacement || 'locationService');\n      return fn.apply(self, arguments);\n    };\n  }\n\n  absUrl(): string {\n    return `${window.location.origin}${this.url()}`;\n  }\n\n  hash(newHash?: string | null) {\n    navigationLogger('AngularLocationWrapper', false, 'Angular compat layer: hash');\n\n    if (!newHash) {\n      return locationService.getLocation().hash.slice(1);\n    } else {\n      throw new Error('AngularLocationWrapper method not implemented.');\n    }\n  }\n\n  host(): string {\n    return new URL(window.location.href).hostname;\n  }\n\n  path(pathname?: any) {\n    navigationLogger('AngularLocationWrapper', false, 'Angular compat layer: path');\n\n    const location = locationService.getLocation();\n\n    if (pathname !== undefined && pathname !== null) {\n      let parsedPath = String(pathname);\n      parsedPath = parsedPath.startsWith('/') ? parsedPath : `/${parsedPath}`;\n      const url = new URL(`${window.location.origin}${parsedPath}`);\n\n      locationService.push({\n        pathname: url.pathname,\n        search: url.search.length > 0 ? url.search : location.search,\n        hash: url.hash.length > 0 ? url.hash : location.hash,\n      });\n      return this;\n    }\n\n    if (pathname === null) {\n      locationService.push('/');\n      return this;\n    }\n\n    return location.pathname;\n  }\n\n  port(): number | null {\n    const url = new URL(window.location.href);\n    return parseInt(url.port, 10) || DEFAULT_PORTS[url.protocol] || null;\n  }\n\n  protocol(): string {\n    return new URL(window.location.href).protocol.slice(0, -1);\n  }\n\n  replace() {\n    throw new Error('AngularLocationWrapper method not implemented.');\n  }\n\n  search(search?: any, paramValue?: any) {\n    navigationLogger('AngularLocationWrapper', false, 'Angular compat layer: search');\n    if (!search) {\n      return locationService.getSearchObject();\n    }\n\n    if (search && arguments.length > 1) {\n      locationService.partial({\n        [search]: paramValue,\n      });\n\n      return this;\n    }\n\n    if (search) {\n      let newQuery;\n\n      if (typeof search === 'object') {\n        newQuery = { ...search };\n      } else {\n        newQuery = locationSearchToObject(search);\n      }\n\n      for (const key of Object.keys(newQuery)) {\n        // removing params with null | undefined\n        if (newQuery[key] === null || newQuery[key] === undefined) {\n          delete newQuery[key];\n        }\n      }\n\n      const updatedUrl = urlUtil.renderUrl(locationService.getLocation().pathname, newQuery);\n      locationService.push(updatedUrl);\n    }\n\n    return this;\n  }\n\n  state(state?: any) {\n    navigationLogger('AngularLocationWrapper', false, 'Angular compat layer: state');\n    throw new Error('AngularLocationWrapper method not implemented.');\n  }\n\n  url(newUrl?: any) {\n    navigationLogger('AngularLocationWrapper', false, 'Angular compat layer: url');\n\n    if (newUrl !== undefined) {\n      if (newUrl.startsWith('#')) {\n        locationService.push({ ...locationService.getLocation(), hash: newUrl });\n      } else if (newUrl.startsWith('?')) {\n        locationService.push({ ...locationService.getLocation(), search: newUrl });\n      } else if (newUrl.trim().length === 0) {\n        locationService.push('/');\n      } else {\n        locationService.push(newUrl);\n      }\n\n      return locationService;\n    }\n\n    const location = locationService.getLocation();\n    return `${location.pathname}${location.search}${location.hash}`;\n  }\n}\n","import { isArray } from 'lodash';\nimport { Unsubscribable } from 'rxjs';\n\nimport {\n  DataFrame,\n  DataQueryResponse,\n  DataSourceApi,\n  LegacyResponseData,\n  LoadingState,\n  PanelData,\n  PanelEvents,\n  TimeRange,\n  toDataFrameDTO,\n  toLegacyResponseData,\n} from '@grafana/data';\nimport { PanelCtrl } from 'app/angular/panel/panel_ctrl';\nimport { ContextSrv } from 'app/core/services/context_srv';\nimport { PanelModel } from 'app/features/dashboard/state';\nimport { applyPanelTimeOverrides } from 'app/features/dashboard/utils/panel';\n\nimport { PanelQueryRunner } from '../../features/query/state/PanelQueryRunner';\n\nclass MetricsPanelCtrl extends PanelCtrl {\n  declare datasource: DataSourceApi;\n  declare range: TimeRange;\n\n  contextSrv: ContextSrv;\n  datasourceSrv: any;\n  timeSrv: any;\n  templateSrv: any;\n  interval: any;\n  intervalMs: any;\n  resolution: any;\n  timeInfo?: string;\n  skipDataOnInit = false;\n  dataList: LegacyResponseData[] = [];\n  querySubscription?: Unsubscribable | null;\n  useDataFrames = false;\n  panelData?: PanelData;\n\n  constructor($scope: any, $injector: any) {\n    super($scope, $injector);\n\n    this.contextSrv = $injector.get('contextSrv');\n    this.datasourceSrv = $injector.get('datasourceSrv');\n    this.timeSrv = $injector.get('timeSrv');\n    this.templateSrv = $injector.get('templateSrv');\n    this.panel.datasource = this.panel.datasource || null;\n\n    this.events.on(PanelEvents.refresh, this.onMetricsPanelRefresh.bind(this));\n    this.events.on(PanelEvents.panelTeardown, this.onPanelTearDown.bind(this));\n    this.events.on(PanelEvents.componentDidMount, this.onMetricsPanelMounted.bind(this));\n  }\n\n  private onMetricsPanelMounted() {\n    const queryRunner = this.panel.getQueryRunner() as PanelQueryRunner;\n    this.querySubscription = queryRunner\n      .getData({ withTransforms: true, withFieldConfig: true })\n      .subscribe(this.panelDataObserver);\n  }\n\n  private onPanelTearDown() {\n    if (this.querySubscription) {\n      this.querySubscription.unsubscribe();\n      this.querySubscription = null;\n    }\n  }\n\n  private onMetricsPanelRefresh() {\n    // ignore fetching data if another panel is in fullscreen\n    if (this.otherPanelInFullscreenMode()) {\n      return;\n    }\n\n    // if we have snapshot data use that\n    if (this.panel.snapshotData) {\n      this.updateTimeRange();\n      let data = this.panel.snapshotData;\n      // backward compatibility\n      if (!isArray(data)) {\n        data = data.data;\n      }\n\n      this.panelData = {\n        state: LoadingState.Done,\n        series: data,\n        timeRange: this.range,\n      };\n\n      // Defer panel rendering till the next digest cycle.\n      // For some reason snapshot panels don't init at this time, so this helps to avoid rendering issues.\n      return this.$timeout(() => {\n        this.events.emit(PanelEvents.dataSnapshotLoad, data);\n      });\n    }\n\n    // clear loading/error state\n    delete this.error;\n    this.loading = true;\n\n    // load datasource service\n    return this.datasourceSrv\n      .get(this.panel.datasource, this.panel.scopedVars)\n      .then(this.issueQueries.bind(this))\n      .catch((err: any) => {\n        this.processDataError(err);\n      });\n  }\n\n  processDataError(err: any) {\n    // if canceled  keep loading set to true\n    if (err.cancelled) {\n      console.log('Panel request cancelled', err);\n      return;\n    }\n\n    this.error = err.message || 'Request Error';\n\n    if (err.data) {\n      if (err.data.message) {\n        this.error = err.data.message;\n      } else if (err.data.error) {\n        this.error = err.data.error;\n      }\n    }\n\n    this.angularDirtyCheck();\n  }\n\n  angularDirtyCheck() {\n    if (!this.$scope.$root.$$phase) {\n      this.$scope.$digest();\n    }\n  }\n\n  // Updates the response with information from the stream\n  panelDataObserver = {\n    next: (data: PanelData) => {\n      this.panelData = data;\n\n      if (data.state === LoadingState.Error) {\n        this.loading = false;\n        this.processDataError(data.error);\n      }\n\n      // Ignore data in loading state\n      if (data.state === LoadingState.Loading) {\n        this.loading = true;\n        this.angularDirtyCheck();\n        return;\n      }\n\n      if (data.request) {\n        const { timeInfo } = data.request;\n        if (timeInfo) {\n          this.timeInfo = timeInfo;\n        }\n      }\n\n      if (data.timeRange) {\n        this.range = data.timeRange;\n      }\n\n      if (this.useDataFrames) {\n        this.handleDataFrames(data.series);\n      } else {\n        // Make the results look as if they came directly from a <6.2 datasource request\n        const legacy = data.series.map((v) => toLegacyResponseData(v));\n        this.handleQueryResult({ data: legacy });\n      }\n\n      this.angularDirtyCheck();\n    },\n  };\n\n  updateTimeRange(datasource?: DataSourceApi) {\n    this.datasource = datasource || this.datasource;\n    this.range = this.timeSrv.timeRange();\n\n    const newTimeData = applyPanelTimeOverrides(this.panel, this.range);\n    this.timeInfo = newTimeData.timeInfo;\n    this.range = newTimeData.timeRange;\n  }\n\n  issueQueries(datasource: DataSourceApi) {\n    this.updateTimeRange(datasource);\n\n    this.datasource = datasource;\n\n    const panel = this.panel as PanelModel;\n    const queryRunner = panel.getQueryRunner();\n\n    return queryRunner.run({\n      datasource: panel.datasource,\n      queries: panel.targets,\n      panelId: panel.id,\n      dashboardId: this.dashboard.id,\n      timezone: this.dashboard.getTimezone(),\n      timeInfo: this.timeInfo,\n      timeRange: this.range,\n      maxDataPoints: panel.maxDataPoints || this.width,\n      minInterval: panel.interval,\n      scopedVars: panel.scopedVars,\n      cacheTimeout: panel.cacheTimeout,\n      transformations: panel.transformations,\n    });\n  }\n\n  handleDataFrames(data: DataFrame[]) {\n    this.loading = false;\n\n    if (this.dashboard && this.dashboard.snapshot) {\n      this.panel.snapshotData = data.map((frame) => toDataFrameDTO(frame));\n    }\n\n    try {\n      this.events.emit(PanelEvents.dataFramesReceived, data);\n    } catch (err) {\n      this.processDataError(err);\n    }\n  }\n\n  handleQueryResult(result: DataQueryResponse) {\n    this.loading = false;\n\n    if (this.dashboard.snapshot) {\n      this.panel.snapshotData = result.data;\n    }\n\n    if (!result || !result.data) {\n      console.log('Data source query result invalid, missing data field:', result);\n      result = { data: [] };\n    }\n\n    try {\n      this.events.emit(PanelEvents.dataReceived, result.data);\n    } catch (err) {\n      this.processDataError(err);\n    }\n  }\n}\n\nexport { MetricsPanelCtrl };\n","import { auto } from 'angular';\nimport { isString } from 'lodash';\n\nimport {\n  AppEvent,\n  PanelEvents,\n  PanelPluginMeta,\n  AngularPanelMenuItem,\n  EventBusExtended,\n  EventBusSrv,\n} from '@grafana/data';\nimport { AngularLocationWrapper } from 'app/angular/AngularLocationWrapper';\nimport config from 'app/core/config';\nimport { profiler } from 'app/core/core';\n\nimport { DashboardModel } from '../../features/dashboard/state';\n\nexport class PanelCtrl {\n  panel: any;\n  error: any;\n  declare dashboard: DashboardModel;\n  pluginName = '';\n  pluginId = '';\n  editorTabs: any;\n  $scope: any;\n  $injector: auto.IInjectorService;\n  $timeout: any;\n  editModeInitiated = false;\n  declare height: number;\n  declare width: number;\n  containerHeight: any;\n  events: EventBusExtended;\n  loading = false;\n  timing: any;\n  $location: AngularLocationWrapper;\n\n  constructor($scope: any, $injector: auto.IInjectorService) {\n    this.panel = this.panel ?? $scope.$parent.panel;\n    this.dashboard = this.dashboard ?? $scope.$parent.dashboard;\n    this.$injector = $injector;\n    this.$scope = $scope;\n    this.$timeout = $injector.get('$timeout');\n    this.editorTabs = [];\n    this.$location = new AngularLocationWrapper();\n    this.events = new EventBusSrv();\n    this.timing = {}; // not used but here to not break plugins\n\n    const plugin = config.panels[this.panel.type];\n    if (plugin) {\n      this.pluginId = plugin.id;\n      this.pluginName = plugin.name;\n    }\n\n    $scope.$on(PanelEvents.componentDidMount.name, () => this.panelDidMount());\n  }\n\n  panelDidMount() {\n    this.events.emit(PanelEvents.componentDidMount);\n    this.events.emit(PanelEvents.initialized);\n    this.dashboard.panelInitialized(this.panel);\n  }\n\n  renderingCompleted() {\n    profiler.renderingCompleted();\n  }\n\n  refresh() {\n    this.panel.refresh();\n  }\n\n  publishAppEvent<T>(event: AppEvent<T>, payload?: T) {\n    this.$scope.$root.appEvent(event, payload);\n  }\n\n  initEditMode() {\n    if (!this.editModeInitiated) {\n      this.editModeInitiated = true;\n      this.events.emit(PanelEvents.editModeInitialized);\n    }\n  }\n\n  addEditorTab(title: string, directiveFn: any, index?: number, icon?: any) {\n    const editorTab = { title, directiveFn, icon };\n\n    if (isString(directiveFn)) {\n      editorTab.directiveFn = () => {\n        return { templateUrl: directiveFn };\n      };\n    }\n\n    if (index) {\n      this.editorTabs.splice(index, 0, editorTab);\n    } else {\n      this.editorTabs.push(editorTab);\n    }\n  }\n\n  getExtendedMenu() {\n    const menu: AngularPanelMenuItem[] = [];\n    this.events.emit(PanelEvents.initPanelActions, menu);\n    return menu;\n  }\n\n  // Override in sub-class to add items before extended menu\n  async getAdditionalMenuItems(): Promise<any[]> {\n    return [];\n  }\n\n  otherPanelInFullscreenMode() {\n    return this.dashboard.otherPanelInFullscreen(this.panel);\n  }\n\n  render(payload?: any) {\n    this.events.emit(PanelEvents.render, payload);\n  }\n\n  // overriden from react\n  onPluginTypeChange = (plugin: PanelPluginMeta) => {};\n}\n","import { auto } from 'angular';\nimport { indexOf } from 'lodash';\n\nexport class QueryCtrl<T = any> {\n  target!: T;\n  datasource!: any;\n  panelCtrl!: any;\n  panel: any;\n  hasRawMode!: boolean;\n  error?: string | null;\n  isLastQuery: boolean;\n\n  constructor(public $scope: any, public $injector: auto.IInjectorService) {\n    this.panelCtrl = this.panelCtrl ?? $scope.ctrl.panelCtrl;\n    this.target = this.target ?? $scope.ctrl.target;\n    this.datasource = this.datasource ?? $scope.ctrl.datasource;\n    this.panel = this.panelCtrl?.panel ?? $scope.ctrl.panelCtrl.panel;\n    this.isLastQuery = indexOf(this.panel.targets, this.target) === this.panel.targets.length - 1;\n  }\n\n  refresh() {\n    this.panelCtrl.refresh();\n  }\n}\n","import { map, without } from 'lodash';\n\nimport { getValueFormats } from '@grafana/data';\n\nexport class ColumnOptionsCtrl {\n  panel: any;\n  panelCtrl: any;\n  colorModes: any;\n  columnStyles: any;\n  columnTypes: any;\n  fontSizes: any;\n  dateFormats: any;\n  addColumnSegment: any;\n  unitFormats: any;\n  getColumnNames: any;\n  activeStyleIndex: number;\n  mappingTypes: any;\n\n  alignTypes: any;\n  static readonly alignTypesEnum = [\n    { text: 'auto', value: '' },\n    { text: 'left', value: 'left' },\n    { text: 'center', value: 'center' },\n    { text: 'right', value: 'right' },\n  ];\n\n  /** @ngInject */\n  constructor($scope: any) {\n    $scope.editor = this;\n\n    this.activeStyleIndex = 0;\n    this.panelCtrl = $scope.ctrl;\n    this.panel = this.panelCtrl.panel;\n    this.unitFormats = getValueFormats();\n    this.colorModes = [\n      { text: 'Disabled', value: null },\n      { text: 'Cell', value: 'cell' },\n      { text: 'Value', value: 'value' },\n      { text: 'Row', value: 'row' },\n    ];\n    this.columnTypes = [\n      { text: 'Number', value: 'number' },\n      { text: 'String', value: 'string' },\n      { text: 'Date', value: 'date' },\n      { text: 'Hidden', value: 'hidden' },\n    ];\n    this.fontSizes = ['80%', '90%', '100%', '110%', '120%', '130%', '150%', '160%', '180%', '200%', '220%', '250%'];\n    this.dateFormats = [\n      { text: 'YYYY-MM-DD HH:mm:ss', value: 'YYYY-MM-DD HH:mm:ss' },\n      { text: 'YYYY-MM-DD HH:mm:ss.SSS', value: 'YYYY-MM-DD HH:mm:ss.SSS' },\n      { text: 'MM/DD/YY h:mm:ss a', value: 'MM/DD/YY h:mm:ss a' },\n      { text: 'MMMM D, YYYY LT', value: 'MMMM D, YYYY LT' },\n      { text: 'YYYY-MM-DD', value: 'YYYY-MM-DD' },\n    ];\n    this.mappingTypes = [\n      { text: 'Value to text', value: 1 },\n      { text: 'Range to text', value: 2 },\n    ];\n    this.alignTypes = ColumnOptionsCtrl.alignTypesEnum;\n\n    this.getColumnNames = () => {\n      if (!this.panelCtrl.table) {\n        return [];\n      }\n      return map(this.panelCtrl.table.columns, (col: any) => {\n        return col.text;\n      });\n    };\n\n    this.onColorChange = this.onColorChange.bind(this);\n  }\n\n  render() {\n    this.panelCtrl.render();\n  }\n\n  setUnitFormat(column: any) {\n    return (value: any) => {\n      column.unit = value;\n      this.panelCtrl.render();\n    };\n  }\n\n  addColumnStyle() {\n    const newStyleRule: object = {\n      unit: 'short',\n      type: 'number',\n      alias: '',\n      decimals: 2,\n      colors: ['rgba(245, 54, 54, 0.9)', 'rgba(237, 129, 40, 0.89)', 'rgba(50, 172, 45, 0.97)'],\n      colorMode: null,\n      pattern: '',\n      dateFormat: 'YYYY-MM-DD HH:mm:ss',\n      thresholds: [],\n      mappingType: 1,\n      align: 'auto',\n    };\n\n    const styles = this.panel.styles;\n    const stylesCount = styles.length;\n    let indexToInsert = stylesCount;\n\n    // check if last is a catch all rule, then add it before that one\n    if (stylesCount > 0) {\n      const last = styles[stylesCount - 1];\n      if (last.pattern === '/.*/') {\n        indexToInsert = stylesCount - 1;\n      }\n    }\n\n    styles.splice(indexToInsert, 0, newStyleRule);\n    this.activeStyleIndex = indexToInsert;\n  }\n\n  removeColumnStyle(style: any) {\n    this.panel.styles = without(this.panel.styles, style);\n  }\n\n  invertColorOrder(index: number) {\n    const ref = this.panel.styles[index].colors;\n    const copy = ref[0];\n    ref[0] = ref[2];\n    ref[2] = copy;\n    this.panelCtrl.render();\n  }\n\n  onColorChange(style: any, colorIndex: number) {\n    return (newColor: string) => {\n      style.colors[colorIndex] = newColor;\n      this.render();\n    };\n  }\n\n  addValueMap(style: any) {\n    if (!style.valueMaps) {\n      style.valueMaps = [];\n    }\n    style.valueMaps.push({ value: '', text: '' });\n    this.panelCtrl.render();\n  }\n\n  removeValueMap(style: any, index: number) {\n    style.valueMaps.splice(index, 1);\n    this.panelCtrl.render();\n  }\n\n  addRangeMap(style: any) {\n    if (!style.rangeMaps) {\n      style.rangeMaps = [];\n    }\n    style.rangeMaps.push({ from: '', to: '', text: '' });\n    this.panelCtrl.render();\n  }\n\n  removeRangeMap(style: any, index: number) {\n    style.rangeMaps.splice(index, 1);\n    this.panelCtrl.render();\n  }\n}\n\nexport function columnOptionsTab() {\n  'use strict';\n  return {\n    restrict: 'E',\n    scope: true,\n    templateUrl: 'public/app/plugins/panel/table-old/column_options.html',\n    controller: ColumnOptionsCtrl,\n  };\n}\n","import { findIndex, isObject, map } from 'lodash';\n\nimport { Column, TableData } from '@grafana/data';\nimport TableModel, { mergeTablesIntoModel } from 'app/core/table_model';\nimport TimeSeries from 'app/core/time_series2';\nimport flatten from 'app/core/utils/flatten';\n\nimport { TableTransform } from './types';\n\nconst transformers: { [key: string]: TableTransform } = {};\nexport const timeSeriesFormatFilterer = (data: any): any[] => {\n  if (!Array.isArray(data)) {\n    return data.datapoints ? [data] : [];\n  }\n\n  return data.reduce((acc, series) => {\n    if (!series.datapoints) {\n      return acc;\n    }\n\n    return acc.concat(series);\n  }, []);\n};\n\nexport const tableDataFormatFilterer = (data: any): any[] => {\n  if (!Array.isArray(data)) {\n    return data.columns ? [data] : [];\n  }\n\n  return data.reduce((acc, series) => {\n    if (!series.columns) {\n      return acc;\n    }\n\n    return acc.concat(series);\n  }, []);\n};\n\ntransformers['timeseries_to_rows'] = {\n  description: 'Time series to rows',\n  getColumns: () => {\n    return [];\n  },\n  transform: (data, panel, model) => {\n    model.columns = [{ text: 'Time', type: 'date' }, { text: 'Metric' }, { text: 'Value' }];\n    const filteredData = timeSeriesFormatFilterer(data);\n\n    for (let i = 0; i < filteredData.length; i++) {\n      const series = filteredData[i];\n      for (let y = 0; y < series.datapoints.length; y++) {\n        const dp = series.datapoints[y];\n        model.rows.push([dp[1], series.target, dp[0]]);\n      }\n    }\n  },\n};\n\ntransformers['timeseries_to_columns'] = {\n  description: 'Time series to columns',\n  getColumns: () => {\n    return [];\n  },\n  transform: (data, panel, model) => {\n    model.columns.push({ text: 'Time', type: 'date' });\n\n    // group by time\n    const points: any = {};\n    const filteredData = timeSeriesFormatFilterer(data);\n\n    for (let i = 0; i < filteredData.length; i++) {\n      const series = filteredData[i];\n      model.columns.push({ text: series.target });\n\n      for (let y = 0; y < series.datapoints.length; y++) {\n        const dp = series.datapoints[y];\n        const timeKey = dp[1].toString();\n\n        if (!points[timeKey]) {\n          points[timeKey] = { time: dp[1] };\n          points[timeKey][i] = dp[0];\n        } else {\n          points[timeKey][i] = dp[0];\n        }\n      }\n    }\n\n    for (const time in points) {\n      const point = points[time];\n      const values = [point.time];\n\n      for (let i = 0; i < filteredData.length; i++) {\n        const value = point[i];\n        values.push(value);\n      }\n\n      model.rows.push(values);\n    }\n  },\n};\n\ntransformers['timeseries_aggregations'] = {\n  description: 'Time series aggregations',\n  getColumns: () => {\n    return [\n      { text: 'Avg', value: 'avg' },\n      { text: 'Min', value: 'min' },\n      { text: 'Max', value: 'max' },\n      { text: 'Total', value: 'total' },\n      { text: 'Current', value: 'current' },\n      { text: 'Count', value: 'count' },\n    ];\n  },\n  transform: (data, panel, model) => {\n    let i, y;\n    model.columns.push({ text: 'Metric' });\n\n    for (i = 0; i < panel.columns.length; i++) {\n      model.columns.push({ text: panel.columns[i].text });\n    }\n\n    const filteredData = timeSeriesFormatFilterer(data);\n\n    for (i = 0; i < filteredData.length; i++) {\n      const series = new TimeSeries({\n        datapoints: filteredData[i].datapoints,\n        alias: filteredData[i].target,\n      });\n\n      series.getFlotPairs('connected');\n      const cells = [series.alias];\n\n      for (y = 0; y < panel.columns.length; y++) {\n        cells.push(series.stats[panel.columns[y].value]);\n      }\n\n      model.rows.push(cells);\n    }\n  },\n};\n\ntransformers['annotations'] = {\n  description: 'Annotations',\n  getColumns: () => {\n    return [];\n  },\n  transform: (data, panel, model) => {\n    model.columns.push({ text: 'Time', type: 'date' });\n    model.columns.push({ text: 'Title' });\n    model.columns.push({ text: 'Text' });\n    model.columns.push({ text: 'Tags' });\n\n    if (!data || !data.annotations || data.annotations.length === 0) {\n      return;\n    }\n\n    for (let i = 0; i < data.annotations.length; i++) {\n      const evt = data.annotations[i];\n      model.rows.push([evt.time, evt.title, evt.text, evt.tags]);\n    }\n  },\n};\n\ntransformers['table'] = {\n  description: 'Table',\n  getColumns: (data) => {\n    if (!data || data.length === 0) {\n      return [];\n    }\n\n    // Single query returns data columns as is\n    if (data.length === 1) {\n      return [...data[0].columns];\n    }\n\n    const filteredData = tableDataFormatFilterer(data);\n\n    // Track column indexes: name -> index\n    const columnNames: any = {};\n\n    // Union of all columns\n    const columns = filteredData.reduce((acc: Column[], series: TableData) => {\n      series.columns.forEach((col) => {\n        const { text } = col;\n        if (columnNames[text] === undefined) {\n          columnNames[text] = acc.length;\n          acc.push(col);\n        }\n      });\n      return acc;\n    }, []);\n\n    return columns;\n  },\n  transform: (data: any[], panel, model) => {\n    if (!data || data.length === 0) {\n      return;\n    }\n    const filteredData = tableDataFormatFilterer(data);\n    const noTableIndex = findIndex(filteredData, (d) => 'columns' in d && 'rows' in d);\n    if (noTableIndex < 0) {\n      throw {\n        message: `Result of query #${String.fromCharCode(\n          65 + noTableIndex\n        )} is not in table format, try using another transform.`,\n      };\n    }\n\n    mergeTablesIntoModel(model, ...filteredData);\n  },\n};\n\ntransformers['json'] = {\n  description: 'JSON Data',\n  getColumns: (data) => {\n    if (!data || data.length === 0) {\n      return [];\n    }\n\n    const names: any = {};\n    for (let i = 0; i < data.length; i++) {\n      const series = data[i];\n      if (series.type !== 'docs') {\n        continue;\n      }\n\n      // only look at 100 docs\n      const maxDocs = Math.min(series.datapoints.length, 100);\n      for (let y = 0; y < maxDocs; y++) {\n        const doc = series.datapoints[y];\n        const flattened = flatten(doc, {});\n        for (const propName in flattened) {\n          names[propName] = true;\n        }\n      }\n    }\n\n    return map(names, (value, key) => {\n      return { text: key, value: key };\n    });\n  },\n  transform: (data, panel, model) => {\n    let i, y, z;\n\n    for (const column of panel.columns) {\n      const tableCol: any = { text: column.text };\n\n      // if filterable data then set columns to filterable\n      if (data.length > 0 && data[0].filterable) {\n        tableCol.filterable = true;\n      }\n\n      model.columns.push(tableCol);\n    }\n\n    if (model.columns.length === 0) {\n      model.columns.push({ text: 'JSON' });\n    }\n\n    for (i = 0; i < data.length; i++) {\n      const series = data[i];\n\n      for (y = 0; y < series.datapoints.length; y++) {\n        const dp = series.datapoints[y];\n        const values = [];\n\n        if (isObject(dp) && panel.columns.length > 0) {\n          const flattened = flatten(dp);\n          for (z = 0; z < panel.columns.length; z++) {\n            values.push(flattened[panel.columns[z].value]);\n          }\n        } else {\n          values.push(JSON.stringify(dp));\n        }\n\n        model.rows.push(values);\n      }\n    }\n  },\n};\n\nfunction transformDataToTable(data: any, panel: any) {\n  const model = new TableModel();\n\n  if (!data || data.length === 0) {\n    return model;\n  }\n\n  const transformer = transformers[panel.transform];\n  if (!transformer) {\n    throw { message: 'Transformer ' + panel.transform + ' not found' };\n  }\n\n  transformer.transform(data, panel, model);\n  return model;\n}\n\nexport { transformers, transformDataToTable };\n","import { find, map, without } from 'lodash';\n\nimport { transformers } from './transformers';\nimport { ColumnStyle } from './types';\n\nexport class TablePanelEditorCtrl {\n  panel: any;\n  panelCtrl: any;\n  transformers: any;\n  fontSizes: any;\n  addColumnSegment: any;\n  getColumnNames: any;\n  canSetColumns = false;\n  columnsHelpMessage = '';\n\n  /** @ngInject */\n  constructor($scope: any, private uiSegmentSrv: any) {\n    $scope.editor = this;\n    this.panelCtrl = $scope.ctrl;\n    this.panel = this.panelCtrl.panel;\n    this.transformers = transformers;\n    this.fontSizes = ['80%', '90%', '100%', '110%', '120%', '130%', '150%', '160%', '180%', '200%', '220%', '250%'];\n    this.addColumnSegment = uiSegmentSrv.newPlusButton();\n    this.updateTransformHints();\n  }\n\n  updateTransformHints() {\n    this.canSetColumns = false;\n    this.columnsHelpMessage = '';\n\n    switch (this.panel.transform) {\n      case 'timeseries_aggregations': {\n        this.canSetColumns = true;\n        break;\n      }\n      case 'json': {\n        this.canSetColumns = true;\n        break;\n      }\n      case 'table': {\n        this.columnsHelpMessage = 'Columns and their order are determined by the data query';\n      }\n    }\n  }\n\n  getColumnOptions() {\n    if (!this.panelCtrl.dataRaw) {\n      return Promise.resolve([]);\n    }\n    const columns = this.transformers[this.panel.transform].getColumns(this.panelCtrl.dataRaw);\n    const segments = map(columns, (c: any) => this.uiSegmentSrv.newSegment({ value: c.text }));\n    return Promise.resolve(segments);\n  }\n\n  addColumn() {\n    const columns = transformers[this.panel.transform].getColumns(this.panelCtrl.dataRaw);\n    const column: any = find(columns, { text: this.addColumnSegment.value });\n\n    if (column) {\n      this.panel.columns.push(column);\n      this.render();\n    }\n\n    const plusButton = this.uiSegmentSrv.newPlusButton();\n    this.addColumnSegment.html = plusButton.html;\n    this.addColumnSegment.value = plusButton.value;\n  }\n\n  transformChanged() {\n    this.panel.columns = [];\n    if (this.panel.transform === 'annotations') {\n      this.panelCtrl.refresh();\n    } else {\n      if (this.panel.transform === 'timeseries_aggregations') {\n        this.panel.columns.push({ text: 'Avg', value: 'avg' });\n      }\n\n      this.updateTransformHints();\n      this.render();\n    }\n  }\n\n  render() {\n    this.panelCtrl.render();\n  }\n\n  removeColumn(column: ColumnStyle) {\n    this.panel.columns = without(this.panel.columns, column);\n    this.panelCtrl.render();\n  }\n}\n\nexport function tablePanelEditor(uiSegmentSrv: any) {\n  'use strict';\n  return {\n    restrict: 'E',\n    scope: true,\n    templateUrl: 'public/app/plugins/panel/table-old/editor.html',\n    controller: TablePanelEditorCtrl,\n  };\n}\n","import { find, first, isArray, isString, escape } from 'lodash';\n\nimport {\n  escapeStringForRegex,\n  formattedValueToString,\n  getValueFormat,\n  ScopedVars,\n  stringStartsAsRegEx,\n  stringToJsRegex,\n  textUtil,\n  unEscapeStringFromRegex,\n  TimeZone,\n  dateTimeFormatISO,\n  dateTimeFormat,\n  GrafanaTheme,\n} from '@grafana/data';\nimport { getTemplateSrv, TemplateSrv } from '@grafana/runtime';\n\nimport { ColumnOptionsCtrl } from './column_options';\nimport { ColumnRender, TableRenderModel, ColumnStyle } from './types';\n\nexport class TableRenderer {\n  formatters: any[] = [];\n  colorState: any;\n\n  constructor(\n    private panel: { styles: ColumnStyle[]; pageSize: number },\n    private table: TableRenderModel,\n    private timeZone: TimeZone,\n    private sanitize: (v: any) => any,\n    private templateSrv: TemplateSrv = getTemplateSrv(),\n    private theme: GrafanaTheme\n  ) {\n    this.initColumns();\n  }\n\n  setTable(table: TableRenderModel) {\n    this.table = table;\n\n    this.initColumns();\n  }\n\n  initColumns() {\n    this.formatters = [];\n    this.colorState = {};\n\n    for (let colIndex = 0; colIndex < this.table.columns.length; colIndex++) {\n      const column = this.table.columns[colIndex];\n      column.title = column.text;\n\n      for (let i = 0; i < this.panel.styles.length; i++) {\n        const style = this.panel.styles[i];\n\n        const escapedPattern = stringStartsAsRegEx(style.pattern)\n          ? style.pattern\n          : escapeStringForRegex(unEscapeStringFromRegex(style.pattern));\n        const regex = stringToJsRegex(escapedPattern);\n        if (column.text.match(regex)) {\n          column.style = style;\n\n          if (style.alias) {\n            column.title = textUtil.escapeHtml(column.text.replace(regex, style.alias));\n          }\n\n          break;\n        }\n      }\n\n      this.formatters[colIndex] = this.createColumnFormatter(column);\n    }\n  }\n\n  getColorForValue(value: number, style: ColumnStyle) {\n    if (!style.thresholds || !style.colors) {\n      return null;\n    }\n    for (let i = style.thresholds.length; i > 0; i--) {\n      if (value >= style.thresholds[i - 1]) {\n        return this.theme.visualization.getColorByName(style.colors[i]);\n      }\n    }\n    return this.theme.visualization.getColorByName(first(style.colors));\n  }\n\n  defaultCellFormatter(v: any, style: ColumnStyle) {\n    if (v === null || v === void 0 || v === undefined) {\n      return '';\n    }\n\n    if (isArray(v)) {\n      v = v.join(', ');\n    }\n\n    if (style && style.sanitize) {\n      return this.sanitize(v);\n    } else {\n      return escape(v);\n    }\n  }\n\n  createColumnFormatter(column: ColumnRender) {\n    if (!column.style) {\n      return this.defaultCellFormatter;\n    }\n\n    if (column.style.type === 'hidden') {\n      return (v: any): undefined => undefined;\n    }\n\n    if (column.style.type === 'date') {\n      return (v: any) => {\n        if (v === undefined || v === null) {\n          return '-';\n        }\n\n        if (isArray(v)) {\n          v = v[0];\n        }\n\n        // if is an epoch (numeric string and len > 12)\n        if (isString(v) && !isNaN(v as any) && v.length > 12) {\n          v = parseInt(v, 10);\n        }\n\n        if (!column.style.dateFormat) {\n          return dateTimeFormatISO(v, {\n            timeZone: this.timeZone,\n          });\n        }\n\n        return dateTimeFormat(v, {\n          format: column.style.dateFormat,\n          timeZone: this.timeZone,\n        });\n      };\n    }\n\n    if (column.style.type === 'string') {\n      return (v: any): any => {\n        if (isArray(v)) {\n          v = v.join(', ');\n        }\n\n        const mappingType = column.style.mappingType || 0;\n\n        if (mappingType === 1 && column.style.valueMaps) {\n          for (let i = 0; i < column.style.valueMaps.length; i++) {\n            const map = column.style.valueMaps[i];\n\n            if (v === null) {\n              if (map.value === 'null') {\n                return map.text;\n              }\n              continue;\n            }\n\n            // Allow both numeric and string values to be mapped\n            if ((!isString(v) && Number(map.value) === Number(v)) || map.value === v) {\n              this.setColorState(v, column.style);\n              return this.defaultCellFormatter(map.text, column.style);\n            }\n          }\n        }\n\n        if (mappingType === 2 && column.style.rangeMaps) {\n          for (let i = 0; i < column.style.rangeMaps.length; i++) {\n            const map = column.style.rangeMaps[i];\n\n            if (v === null) {\n              if (map.from === 'null' && map.to === 'null') {\n                return map.text;\n              }\n              continue;\n            }\n\n            if (Number(map.from) <= Number(v) && Number(map.to) >= Number(v)) {\n              this.setColorState(v, column.style);\n              return this.defaultCellFormatter(map.text, column.style);\n            }\n          }\n        }\n\n        if (v === null || v === void 0) {\n          return '-';\n        }\n\n        this.setColorState(v, column.style);\n        return this.defaultCellFormatter(v, column.style);\n      };\n    }\n\n    if (column.style.type === 'number') {\n      const valueFormatter = getValueFormat(column.unit || column.style.unit);\n\n      return (v: any): any => {\n        if (v === null || v === void 0) {\n          return '-';\n        }\n\n        if (isNaN(v) || isArray(v)) {\n          return this.defaultCellFormatter(v, column.style);\n        }\n\n        this.setColorState(v, column.style);\n        return formattedValueToString(valueFormatter(v, column.style.decimals, null));\n      };\n    }\n\n    return (value: any) => {\n      return this.defaultCellFormatter(value, column.style);\n    };\n  }\n\n  setColorState(value: any, style: ColumnStyle) {\n    if (!style.colorMode) {\n      return;\n    }\n\n    if (value === null || value === void 0 || isArray(value)) {\n      return;\n    }\n\n    const numericValue = Number(value);\n    if (isNaN(numericValue)) {\n      return;\n    }\n\n    this.colorState[style.colorMode] = this.getColorForValue(numericValue, style);\n  }\n\n  renderRowVariables(rowIndex: number) {\n    const scopedVars: ScopedVars = {};\n    let cellVariable;\n    const row = this.table.rows[rowIndex];\n    for (let i = 0; i < row.length; i++) {\n      cellVariable = `__cell_${i}`;\n      scopedVars[cellVariable] = { value: row[i], text: row[i] ? row[i].toString() : '' };\n    }\n    return scopedVars;\n  }\n\n  formatColumnValue(colIndex: number, value: any) {\n    const fmt = this.formatters[colIndex];\n    if (fmt) {\n      return fmt(value);\n    }\n    return value;\n  }\n\n  renderCell(columnIndex: number, rowIndex: number, value: any, addWidthHack = false) {\n    value = this.formatColumnValue(columnIndex, value);\n\n    const column = this.table.columns[columnIndex];\n    const cellStyles = [];\n    let cellStyle = '';\n    const cellClasses = [];\n    let cellClass = '';\n\n    if (this.colorState.cell) {\n      cellStyles.push('background-color:' + this.colorState.cell);\n      cellClasses.push('table-panel-color-cell');\n      this.colorState.cell = null;\n    } else if (this.colorState.value) {\n      cellStyles.push('color:' + this.colorState.value);\n      this.colorState.value = null;\n    }\n    // because of the fixed table headers css only solution\n    // there is an issue if header cell is wider the cell\n    // this hack adds header content to cell (not visible)\n    let columnHtml = '';\n    if (addWidthHack) {\n      columnHtml = '<div class=\"table-panel-width-hack\">' + this.table.columns[columnIndex].title + '</div>';\n    }\n\n    if (value === undefined) {\n      cellStyles.push('display:none');\n      column.hidden = true;\n    } else {\n      column.hidden = false;\n    }\n\n    if (column.hidden === true) {\n      return '';\n    }\n\n    if (column.style && column.style.preserveFormat) {\n      cellClasses.push('table-panel-cell-pre');\n    }\n\n    if (column.style && column.style.align) {\n      const textAlign = find(ColumnOptionsCtrl.alignTypesEnum, ['text', column.style.align]);\n      if (textAlign && textAlign['value']) {\n        cellStyles.push(`text-align:${textAlign['value']}`);\n      }\n    }\n\n    if (cellStyles.length) {\n      cellStyle = ' style=\"' + cellStyles.join(';') + '\"';\n    }\n\n    if (column.style && column.style.link) {\n      // Render cell as link\n      const scopedVars = this.renderRowVariables(rowIndex);\n      scopedVars['__cell'] = { value: value, text: value ? value.toString() : '' };\n\n      const cellLink = this.templateSrv.replace(column.style.linkUrl, scopedVars, encodeURIComponent);\n      const sanitizedCellLink = textUtil.sanitizeUrl(cellLink);\n\n      const cellLinkTooltip = textUtil.escapeHtml(this.templateSrv.replace(column.style.linkTooltip, scopedVars));\n      const cellTarget = column.style.linkTargetBlank ? '_blank' : '';\n\n      cellClasses.push('table-panel-cell-link');\n\n      columnHtml += `<a href=\"${sanitizedCellLink}\" target=\"${cellTarget}\" data-link-tooltip data-original-title=\"${cellLinkTooltip}\" data-placement=\"right\"${cellStyle}>`;\n      columnHtml += `${value}`;\n      columnHtml += `</a>`;\n    } else {\n      columnHtml += value;\n    }\n\n    if (column.filterable) {\n      cellClasses.push('table-panel-cell-filterable');\n      columnHtml += `<a class=\"table-panel-filter-link\" data-link-tooltip data-original-title=\"Filter out value\" data-placement=\"bottom\"\n           data-row=\"${rowIndex}\" data-column=\"${columnIndex}\" data-operator=\"!=\">`;\n      columnHtml += `<i class=\"fa fa-search-minus\"></i>`;\n      columnHtml += `</a>`;\n      columnHtml += `<a class=\"table-panel-filter-link\" data-link-tooltip data-original-title=\"Filter for value\" data-placement=\"bottom\"\n           data-row=\"${rowIndex}\" data-column=\"${columnIndex}\" data-operator=\"=\">`;\n      columnHtml += `<i class=\"fa fa-search-plus\"></i>`;\n      columnHtml += `</a>`;\n    }\n\n    if (cellClasses.length) {\n      cellClass = ' class=\"' + cellClasses.join(' ') + '\"';\n    }\n\n    columnHtml = '<td' + cellClass + cellStyle + '>' + columnHtml + '</td>';\n    return columnHtml;\n  }\n\n  render(page: number) {\n    const pageSize = this.panel.pageSize || 100;\n    const startPos = page * pageSize;\n    const endPos = Math.min(startPos + pageSize, this.table.rows.length);\n    let html = '';\n\n    for (let y = startPos; y < endPos; y++) {\n      const row = this.table.rows[y];\n      let cellHtml = '';\n      let rowStyle = '';\n      const rowClasses = [];\n      let rowClass = '';\n      for (let i = 0; i < this.table.columns.length; i++) {\n        cellHtml += this.renderCell(i, y, row[i], y === startPos);\n      }\n\n      if (this.colorState.row) {\n        rowStyle = ' style=\"background-color:' + this.colorState.row + '\"';\n        rowClasses.push('table-panel-color-row');\n        this.colorState.row = null;\n      }\n\n      if (rowClasses.length) {\n        rowClass = ' class=\"' + rowClasses.join(' ') + '\"';\n      }\n\n      html += '<tr ' + rowClass + rowStyle + '>' + cellHtml + '</tr>';\n    }\n\n    return html;\n  }\n\n  render_values() {\n    const rows = [];\n    const visibleColumns = this.table.columns.filter((column) => !column.hidden);\n\n    for (let y = 0; y < this.table.rows.length; y++) {\n      const row = this.table.rows[y];\n      const newRow = [];\n      for (let i = 0; i < this.table.columns.length; i++) {\n        if (!this.table.columns[i].hidden) {\n          newRow.push(this.formatColumnValue(i, row[i]));\n        }\n      }\n      rows.push(newRow);\n    }\n    return {\n      columns: visibleColumns,\n      rows: rows,\n    };\n  }\n}\n","import $ from 'jquery';\nimport { defaults } from 'lodash';\nimport { ComponentType } from 'react';\n\nimport { isTableData, PanelEvents, PanelPlugin, PanelProps } from '@grafana/data';\nimport config from 'app/core/config';\nimport { applyFilterFromTable } from 'app/features/variables/adhoc/actions';\nimport { MetricsPanelCtrl } from 'app/plugins/sdk';\nimport { dispatch } from 'app/store/store';\n\nimport { columnOptionsTab } from './column_options';\nimport { tablePanelEditor } from './editor';\nimport { TableRenderer } from './renderer';\nimport { transformDataToTable } from './transformers';\n\nexport class TablePanelCtrl extends MetricsPanelCtrl {\n  static templateUrl = 'module.html';\n\n  pageIndex: number;\n  dataRaw: any;\n  table: any;\n  renderer: any;\n  panelHasRowColorMode: boolean;\n  panelHasLinks: boolean;\n\n  panelDefaults: any = {\n    targets: [{}],\n    transform: 'timeseries_to_columns',\n    pageSize: null,\n    showHeader: true,\n    styles: [\n      {\n        type: 'date',\n        pattern: 'Time',\n        alias: 'Time',\n        dateFormat: 'YYYY-MM-DD HH:mm:ss',\n        align: 'auto',\n      },\n      {\n        unit: 'short',\n        type: 'number',\n        alias: '',\n        decimals: 2,\n        colors: ['rgba(245, 54, 54, 0.9)', 'rgba(237, 129, 40, 0.89)', 'rgba(50, 172, 45, 0.97)'],\n        colorMode: null,\n        pattern: '/.*/',\n        thresholds: [],\n        align: 'right',\n      },\n    ],\n    columns: [],\n\n    fontSize: '100%',\n    sort: { col: 0, desc: true },\n  };\n\n  /** @ngInject */\n  constructor($scope: any, $injector: any, private annotationsSrv: any, private $sanitize: any) {\n    super($scope, $injector);\n\n    this.pageIndex = 0;\n\n    if (this.panel.styles === void 0) {\n      this.panel.styles = this.panel.columns;\n      this.panel.columns = this.panel.fields;\n      delete this.panel.columns;\n      delete this.panel.fields;\n    }\n\n    defaults(this.panel, this.panelDefaults);\n\n    this.panelHasRowColorMode = Boolean(this.panel.styles.find((style: any) => style.colorMode === 'row'));\n    this.panelHasLinks = Boolean(this.panel.styles.find((style: any) => style.link));\n\n    this.events.on(PanelEvents.dataReceived, this.onDataReceived.bind(this));\n    this.events.on(PanelEvents.dataSnapshotLoad, this.onDataReceived.bind(this));\n    this.events.on(PanelEvents.editModeInitialized, this.onInitEditMode.bind(this));\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('Options', tablePanelEditor, 2);\n    this.addEditorTab('Column Styles', columnOptionsTab, 3);\n  }\n\n  migrateToPanel(type: string) {\n    this.onPluginTypeChange(config.panels[type]);\n  }\n\n  issueQueries(datasource: any) {\n    this.pageIndex = 0;\n\n    if (this.panel.transform === 'annotations') {\n      return this.annotationsSrv\n        .getAnnotations({\n          dashboard: this.dashboard,\n          panel: this.panel,\n          range: this.range,\n        })\n        .then((anno: any) => {\n          this.loading = false;\n          this.dataRaw = anno;\n          this.pageIndex = 0;\n          this.render();\n          return { data: this.dataRaw }; // Not used\n        });\n    }\n\n    return super.issueQueries(datasource);\n  }\n\n  onDataReceived(dataList: any) {\n    this.dataRaw = dataList;\n    this.pageIndex = 0;\n\n    // automatically correct transform mode based on data\n    if (this.dataRaw && this.dataRaw.length) {\n      if (isTableData(this.dataRaw[0])) {\n        this.panel.transform = 'table';\n      } else {\n        if (this.dataRaw[0].type === 'docs') {\n          this.panel.transform = 'json';\n        } else {\n          if (this.panel.transform === 'table' || this.panel.transform === 'json') {\n            this.panel.transform = 'timeseries_to_rows';\n          }\n        }\n      }\n    }\n\n    this.render();\n  }\n\n  render() {\n    this.table = transformDataToTable(this.dataRaw, this.panel);\n    this.table.sort(this.panel.sort);\n\n    this.renderer = new TableRenderer(\n      this.panel,\n      this.table,\n      this.dashboard.getTimezone(),\n      this.$sanitize,\n      this.templateSrv,\n      config.theme\n    );\n\n    return super.render(this.table);\n  }\n\n  toggleColumnSort(col: any, colIndex: any) {\n    // remove sort flag from current column\n    if (this.table.columns[this.panel.sort.col]) {\n      this.table.columns[this.panel.sort.col].sort = false;\n    }\n\n    if (this.panel.sort.col === colIndex) {\n      if (this.panel.sort.desc) {\n        this.panel.sort.desc = false;\n      } else {\n        this.panel.sort.col = null;\n      }\n    } else {\n      this.panel.sort.col = colIndex;\n      this.panel.sort.desc = true;\n    }\n    this.render();\n  }\n\n  link(scope: any, elem: JQuery, attrs: any, ctrl: TablePanelCtrl) {\n    let data: any;\n    const panel = ctrl.panel;\n    let pageCount = 0;\n\n    function getTableHeight() {\n      let panelHeight = ctrl.height;\n\n      if (pageCount > 1) {\n        panelHeight -= 26;\n      }\n\n      return panelHeight - 31 + 'px';\n    }\n\n    function appendTableRows(tbodyElem: JQuery) {\n      ctrl.renderer.setTable(data);\n      tbodyElem.empty();\n      tbodyElem.html(ctrl.renderer.render(ctrl.pageIndex));\n    }\n\n    function switchPage(e: any) {\n      const el = $(e.currentTarget);\n      ctrl.pageIndex = parseInt(el.text(), 10) - 1;\n      renderPanel();\n    }\n\n    function appendPaginationControls(footerElem: JQuery) {\n      footerElem.empty();\n\n      const pageSize = panel.pageSize || 100;\n      pageCount = Math.ceil(data.rows.length / pageSize);\n      if (pageCount === 1) {\n        return;\n      }\n\n      const startPage = Math.max(ctrl.pageIndex - 3, 0);\n      const endPage = Math.min(pageCount, startPage + 9);\n\n      const paginationList = $('<ul></ul>');\n\n      for (let i = startPage; i < endPage; i++) {\n        const activeClass = i === ctrl.pageIndex ? 'active' : '';\n        const pageLinkElem = $(\n          '<li><a class=\"table-panel-page-link pointer ' + activeClass + '\">' + (i + 1) + '</a></li>'\n        );\n        paginationList.append(pageLinkElem);\n      }\n\n      footerElem.append(paginationList);\n    }\n\n    function renderPanel() {\n      const panelElem = elem.parents('.panel-content');\n      const rootElem = elem.find('.table-panel-scroll');\n      const tbodyElem = elem.find('tbody');\n      const footerElem = elem.find('.table-panel-footer');\n\n      elem.css({ 'font-size': panel.fontSize });\n      panelElem.addClass('table-panel-content');\n\n      appendTableRows(tbodyElem);\n      appendPaginationControls(footerElem);\n\n      rootElem.css({ 'max-height': getTableHeight() });\n    }\n\n    // hook up link tooltips\n    elem.tooltip({\n      selector: '[data-link-tooltip]',\n    });\n\n    function addFilterClicked(e: any) {\n      const filterData = $(e.currentTarget).data();\n      const options = {\n        datasource: panel.datasource,\n        key: data.columns[filterData.column].text,\n        value: data.rows[filterData.row][filterData.column],\n        operator: filterData.operator,\n      };\n\n      dispatch(applyFilterFromTable(options));\n    }\n\n    elem.on('click', '.table-panel-page-link', switchPage);\n    elem.on('click', '.table-panel-filter-link', addFilterClicked);\n\n    const unbindDestroy = scope.$on('$destroy', () => {\n      elem.off('click', '.table-panel-page-link');\n      elem.off('click', '.table-panel-filter-link');\n      unbindDestroy();\n    });\n\n    ctrl.events.on(PanelEvents.render, (renderData: any) => {\n      data = renderData || data;\n      if (data) {\n        renderPanel();\n      }\n      ctrl.renderingCompleted();\n    });\n  }\n}\n\nexport const plugin = new PanelPlugin(null as unknown as ComponentType<PanelProps<any>>);\nplugin.angularPanelCtrl = TablePanelCtrl;\nplugin.setNoPadding();\n","import { makeClassES5Compatible } from '@grafana/data';\nimport { loadPluginCss } from '@grafana/runtime';\nimport { MetricsPanelCtrl as MetricsPanelCtrlES6 } from 'app/angular/panel/metrics_panel_ctrl';\nimport { PanelCtrl as PanelCtrlES6 } from 'app/angular/panel/panel_ctrl';\nimport { QueryCtrl as QueryCtrlES6 } from 'app/angular/panel/query_ctrl';\n\nconst PanelCtrl = makeClassES5Compatible(PanelCtrlES6);\nconst MetricsPanelCtrl = makeClassES5Compatible(MetricsPanelCtrlES6);\nconst QueryCtrl = makeClassES5Compatible(QueryCtrlES6);\n\nexport { PanelCtrl, MetricsPanelCtrl, QueryCtrl, loadPluginCss };\n"],"names":["DEFAULT_PORTS","http","https","ftp","AngularLocationWrapper","constructor","this","absUrl","wrapInDeprecationWarning","hash","host","path","port","protocol","replace","search","state","url","fn","replacement","self","deprecationWarning","name","apply","arguments","window","location","origin","newHash","navigationLogger","Error","locationService","slice","URL","href","hostname","pathname","parsedPath","String","startsWith","length","parseInt","paramValue","newQuery","locationSearchToObject","key","Object","keys","undefined","updatedUrl","urlUtil","newUrl","trim","MetricsPanelCtrl","PanelCtrl","$scope","$injector","super","next","data","panelData","LoadingState","loading","processDataError","error","angularDirtyCheck","request","timeInfo","timeRange","range","useDataFrames","handleDataFrames","series","legacy","map","v","toLegacyResponseData","handleQueryResult","contextSrv","get","datasourceSrv","timeSrv","templateSrv","panel","datasource","events","on","PanelEvents","onMetricsPanelRefresh","bind","onPanelTearDown","onMetricsPanelMounted","queryRunner","getQueryRunner","querySubscription","getData","withTransforms","withFieldConfig","subscribe","panelDataObserver","unsubscribe","otherPanelInFullscreenMode","snapshotData","updateTimeRange","isArray","$timeout","emit","scopedVars","then","issueQueries","catch","err","cancelled","console","log","message","$root","$$phase","$digest","newTimeData","applyPanelTimeOverrides","run","queries","targets","panelId","id","dashboardId","dashboard","timezone","getTimezone","maxDataPoints","width","minInterval","interval","cacheTimeout","transformations","snapshot","frame","toDataFrameDTO","result","plugin","$parent","editorTabs","$location","EventBusSrv","timing","config","type","pluginId","pluginName","$on","panelDidMount","panelInitialized","renderingCompleted","profiler","refresh","publishAppEvent","event","payload","appEvent","initEditMode","editModeInitiated","addEditorTab","title","directiveFn","index","icon","editorTab","isString","templateUrl","splice","push","getExtendedMenu","menu","otherPanelInFullscreen","render","QueryCtrl","panelCtrl","ctrl","target","isLastQuery","indexOf","ColumnOptionsCtrl","editor","activeStyleIndex","unitFormats","getValueFormats","colorModes","text","value","columnTypes","fontSizes","dateFormats","mappingTypes","alignTypes","alignTypesEnum","getColumnNames","table","columns","col","onColorChange","setUnitFormat","column","unit","addColumnStyle","styles","stylesCount","indexToInsert","pattern","alias","decimals","colors","colorMode","dateFormat","thresholds","mappingType","align","removeColumnStyle","style","without","invertColorOrder","ref","copy","colorIndex","newColor","addValueMap","valueMaps","removeValueMap","addRangeMap","rangeMaps","from","to","removeRangeMap","columnOptionsTab","restrict","scope","controller","transformers","timeSeriesFormatFilterer","Array","reduce","acc","datapoints","concat","tableDataFormatFilterer","description","getColumns","transform","model","filteredData","i","y","dp","rows","points","timeKey","toString","time","point","values","TimeSeries","getFlotPairs","cells","stats","annotations","evt","tags","columnNames","forEach","noTableIndex","findIndex","d","fromCharCode","mergeTablesIntoModel","names","maxDocs","Math","min","doc","flattened","flatten","propName","z","tableCol","filterable","isObject","JSON","stringify","TablePanelEditorCtrl","uiSegmentSrv","addColumnSegment","newPlusButton","updateTransformHints","canSetColumns","columnsHelpMessage","getColumnOptions","dataRaw","Promise","resolve","segments","c","newSegment","addColumn","find","plusButton","html","transformChanged","removeColumn","tablePanelEditor","TableRenderer","timeZone","sanitize","getTemplateSrv","theme","initColumns","setTable","formatters","colorState","colIndex","escapedPattern","stringStartsAsRegEx","escapeStringForRegex","unEscapeStringFromRegex","regex","stringToJsRegex","match","textUtil","createColumnFormatter","getColorForValue","visualization","getColorByName","first","defaultCellFormatter","join","escape","isNaN","dateTimeFormat","format","dateTimeFormatISO","Number","setColorState","valueFormatter","getValueFormat","formattedValueToString","numericValue","renderRowVariables","rowIndex","cellVariable","row","formatColumnValue","fmt","renderCell","columnIndex","addWidthHack","cellStyles","cellStyle","cellClasses","cellClass","cell","columnHtml","hidden","preserveFormat","textAlign","link","cellLink","linkUrl","encodeURIComponent","sanitizedCellLink","cellLinkTooltip","linkTooltip","cellTarget","linkTargetBlank","page","pageSize","startPos","endPos","cellHtml","rowStyle","rowClasses","rowClass","render_values","visibleColumns","filter","newRow","TablePanelCtrl","annotationsSrv","$sanitize","showHeader","fontSize","sort","desc","pageIndex","fields","defaults","panelDefaults","panelHasRowColorMode","Boolean","panelHasLinks","onDataReceived","onInitEditMode","migrateToPanel","onPluginTypeChange","getAnnotations","anno","dataList","isTableData","TableModel","transformer","transformDataToTable","renderer","toggleColumnSort","elem","attrs","pageCount","getTableHeight","panelHeight","height","renderPanel","panelElem","parents","rootElem","tbodyElem","footerElem","css","addClass","empty","appendTableRows","ceil","startPage","max","endPage","paginationList","$","activeClass","pageLinkElem","append","appendPaginationControls","tooltip","selector","e","el","currentTarget","filterData","options","operator","dispatch","applyFilterFromTable","unbindDestroy","off","renderData","PanelPlugin","angularPanelCtrl","setNoPadding","makeClassES5Compatible","PanelCtrlES6","MetricsPanelCtrlES6","QueryCtrlES6"],"sourceRoot":""}