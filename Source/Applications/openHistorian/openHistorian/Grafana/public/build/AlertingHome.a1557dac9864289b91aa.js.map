{"version":3,"file":"AlertingHome.a1557dac9864289b91aa.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/Home.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React from 'react';\nimport SVG from 'react-inlinesvg';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { config } from '@grafana/runtime';\nimport { Icon, useStyles2, useTheme2 } from '@grafana/ui';\n\nimport { AlertingPageWrapper } from './components/AlertingPageWrapper';\n\nexport default function Home() {\n  const theme = useTheme2();\n  const styles = useStyles2(getWelcomePageStyles);\n\n  return (\n    <AlertingPageWrapper pageId={config.featureToggles.topnav ? 'alerting' : 'alert-home'}>\n      <div className={styles.grid}>\n        <WelcomeHeader className={styles.ctaContainer} />\n        <ContentBox className={styles.flowBlock}>\n          <div>\n            <h3>How it works</h3>\n            <ul className={styles.list}>\n              <li>\n                Grafana alerting periodically queries data sources and evaluates the condition defined in the alert rule\n              </li>\n              <li>If the condition is breached, an alert instance fires</li>\n              <li>Firing instances are routed to notification policies based on matching labels</li>\n              <li>Notifications are sent out to the contact points specified in the notification policy</li>\n            </ul>\n          </div>\n          <SVG\n            src={`public/img/alerting/at_a_glance_${theme.name.toLowerCase()}.svg`}\n            width={undefined}\n            height={undefined}\n          />\n        </ContentBox>\n        <ContentBox className={styles.gettingStartedBlock}>\n          <h3>Get started</h3>\n          <Stack direction=\"column\" alignItems=\"space-between\">\n            <ul className={styles.list}>\n              <li>\n                <strong>Create an alert rule</strong> by adding queries and expressions from multiple data sources.\n              </li>\n              <li>\n                <strong>Add labels</strong> to your alert rules{' '}\n                <strong>to connect them to notification policies</strong>\n              </li>\n              <li>\n                <strong>Configure contact points</strong> to define where to send your notifications to.\n              </li>\n              <li>\n                <strong>Configure notification policies</strong> to route your alert instances to contact points.\n              </li>\n            </ul>\n            <div>\n              <ArrowLink href=\"https://grafana.com/docs/grafana/latest/alerting/\" title=\"Read more in the Docs\" />\n            </div>\n          </Stack>\n        </ContentBox>\n        <ContentBox className={styles.videoBlock}>\n          <iframe\n            title=\"Alerting - Introductory video\"\n            src=\"https://player.vimeo.com/video/720001629?h=c6c1732f92\"\n            width=\"960\"\n            height=\"540\"\n            allow=\"autoplay; fullscreen\"\n            allowFullScreen\n            frameBorder=\"0\"\n            // This is necessary because color-scheme defined on :root has impact on iframe elements\n            // More about how color-scheme works for iframes https://github.com/w3c/csswg-drafts/issues/4772\n            // Summary: If the color scheme of an iframe differs from embedding document iframe gets an opaque canvas bg appropriate to its color scheme\n            style={{ colorScheme: 'light dark' }}\n          ></iframe>\n        </ContentBox>\n      </div>\n    </AlertingPageWrapper>\n  );\n}\n\nconst getWelcomePageStyles = (theme: GrafanaTheme2) => ({\n  grid: css`\n    display: grid;\n    grid-template-rows: min-content auto auto;\n    grid-template-columns: 1fr 1fr 1fr 1fr 1fr;\n    gap: ${theme.spacing(2)};\n  `,\n  ctaContainer: css`\n    grid-column: 1 / span 5;\n  `,\n  flowBlock: css`\n    grid-column: 1 / span 5;\n\n    display: flex;\n    flex-wrap: wrap;\n    gap: ${theme.spacing(1)};\n\n    & > div {\n      flex: 2;\n      min-width: 350px;\n    }\n    & > svg {\n      flex: 3;\n      min-width: 500px;\n    }\n  `,\n  videoBlock: css`\n    grid-column: 3 / span 3;\n    grid-row: 3 / span 1;\n\n    // Video required\n    position: relative;\n    padding: 56.25% 0 0 0; /* 16:9 */\n\n    iframe {\n      position: absolute;\n      top: ${theme.spacing(2)};\n      left: ${theme.spacing(2)};\n      width: calc(100% - ${theme.spacing(4)});\n      height: calc(100% - ${theme.spacing(4)});\n      border: none;\n    }\n  `,\n  gettingStartedBlock: css`\n    grid-column: 1 / span 2;\n    justify-content: space-between;\n  `,\n  list: css`\n    margin: ${theme.spacing(0, 2)};\n    & > li {\n      margin-bottom: ${theme.spacing(1)};\n    }\n  `,\n});\n\nfunction WelcomeHeader({ className }: { className?: string }) {\n  const styles = useStyles2(getWelcomeHeaderStyles);\n\n  return (\n    <ContentBox className={cx(styles.ctaContainer, className)}>\n      <WelcomeCTABox\n        title=\"Alert rules\"\n        description=\"Define the condition that must be met before an alert rule fires\"\n        href=\"/alerting/list\"\n        hrefText=\"Manage alert rules\"\n      />\n      <div className={styles.separator} />\n      <WelcomeCTABox\n        title=\"Contact points\"\n        description=\"Configure who receives notifications and how they are sent\"\n        href=\"/alerting/notifications\"\n        hrefText=\"Manage contact points\"\n      />\n      <div className={styles.separator} />\n      <WelcomeCTABox\n        title=\"Notification policies\"\n        description=\"Configure how firing alert instances are routed to contact points\"\n        href=\"/alerting/routes\"\n        hrefText=\"Manage notification policies\"\n      />\n    </ContentBox>\n  );\n}\n\nconst getWelcomeHeaderStyles = (theme: GrafanaTheme2) => ({\n  ctaContainer: css`\n    padding: ${theme.spacing(4, 2)};\n    display: flex;\n    gap: ${theme.spacing(4)};\n    justify-content: space-between;\n    flex-wrap: wrap;\n\n    ${theme.breakpoints.down('lg')} {\n      flex-direction: column;\n    }\n  `,\n\n  separator: css`\n    width: 1px;\n    background-color: ${theme.colors.border.medium};\n\n    ${theme.breakpoints.down('lg')} {\n      display: none;\n    }\n  `,\n});\n\ninterface WelcomeCTABoxProps {\n  title: string;\n  description: string;\n  href: string;\n  hrefText: string;\n}\n\nfunction WelcomeCTABox({ title, description, href, hrefText }: WelcomeCTABoxProps) {\n  const styles = useStyles2(getWelcomeCTAButtonStyles);\n\n  return (\n    <div className={styles.container}>\n      <h3 className={styles.title}>{title}</h3>\n      <div className={styles.desc}>{description}</div>\n      <div className={styles.actionRow}>\n        <a href={href} className={styles.link}>\n          {hrefText}\n        </a>\n      </div>\n    </div>\n  );\n}\n\nconst getWelcomeCTAButtonStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    flex: 1;\n    min-width: 240px;\n    display: grid;\n    gap: ${theme.spacing(1)};\n    grid-template-columns: min-content 1fr 1fr 1fr;\n    grid-template-rows: min-content auto min-content;\n  `,\n\n  title: css`\n    margin-bottom: 0;\n    grid-column: 2 / span 3;\n    grid-row: 1;\n  `,\n\n  desc: css`\n    grid-column: 2 / span 3;\n    grid-row: 2;\n  `,\n\n  actionRow: css`\n    grid-column: 2 / span 3;\n    grid-row: 3;\n    max-width: 240px;\n  `,\n\n  link: css`\n    color: ${theme.colors.text.link};\n  `,\n});\n\nfunction ContentBox({ children, className }: React.PropsWithChildren<{ className?: string }>) {\n  const styles = useStyles2(getContentBoxStyles);\n\n  return <div className={cx(styles.box, className)}>{children}</div>;\n}\n\nconst getContentBoxStyles = (theme: GrafanaTheme2) => ({\n  box: css`\n    padding: ${theme.spacing(2)};\n    background-color: ${theme.colors.background.secondary};\n    border-radius: ${theme.shape.borderRadius()};\n  `,\n});\n\nfunction ArrowLink({ href, title }: { href: string; title: string }) {\n  const styles = useStyles2(getArrowLinkStyles);\n\n  return (\n    <a href={href} className={styles.link} rel=\"noreferrer\">\n      {title} <Icon name=\"angle-right\" size=\"xl\" />\n    </a>\n  );\n}\n\nconst getArrowLinkStyles = (theme: GrafanaTheme2) => ({\n  link: css`\n    display: block;\n    color: ${theme.colors.text.link};\n  `,\n});\n"],"names":["Home","theme","styles","getWelcomePageStyles","WelcomeHeader","ContentBox","ArrowLink","className","getWelcomeHeaderStyles","WelcomeCTABox","title","description","href","hrefText","getWelcomeCTAButtonStyles","children","getContentBoxStyles","getArrowLinkStyles"],"sourceRoot":""}