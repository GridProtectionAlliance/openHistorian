{"version":3,"file":"AlertingRule.3d8aba00f45d41923a34.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/components/rule-viewer/RuleViewerVisualization.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleDetailsFederatedSources.tsx","webpack://grafana/./public/app/features/alerting/unified/utils/query.ts","webpack://grafana/./public/app/features/alerting/unified/RuleViewer.tsx","webpack://grafana/./public/app/features/alerting/unified/components/Authorize.tsx","webpack://grafana/./public/app/features/alerting/unified/components/PanelPluginsButtonGroup.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-viewer/RuleViewerLayout.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertQueriesStatus.ts","webpack://grafana/./public/app/features/alerting/unified/hooks/useCombinedRule.ts","webpack://grafana/./public/app/features/alerting/unified/utils/timeRange.ts","webpack://grafana/./public/app/features/alerting/unified/state/AlertingQueryRunner.ts","webpack://grafana/./public/app/features/expressions/guards.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useCallback, useState } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { DataSourceInstanceSettings, DateTime, dateTime, GrafanaTheme2, PanelData, urlUtil } from '@grafana/data';\nimport { config, getDataSourceSrv, PanelRenderer } from '@grafana/runtime';\nimport { Alert, CodeEditor, DateTimePicker, LinkButton, useStyles2, useTheme2 } from '@grafana/ui';\nimport { isExpressionQuery } from 'app/features/expressions/guards';\nimport { PanelOptions } from 'app/plugins/panel/table/models.gen';\nimport { AccessControlAction } from 'app/types';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { TABLE, TIMESERIES } from '../../utils/constants';\nimport { Authorize } from '../Authorize';\nimport { PanelPluginsButtonGroup, SupportedPanelPlugins } from '../PanelPluginsButtonGroup';\n\ntype RuleViewerVisualizationProps = {\n  data?: PanelData;\n  query: AlertQuery;\n  onChangeQuery: (query: AlertQuery) => void;\n};\n\nconst headerHeight = 4;\n\nexport function RuleViewerVisualization(props: RuleViewerVisualizationProps): JSX.Element | null {\n  const theme = useTheme2();\n  const styles = useStyles2(getStyles);\n  const { data, query, onChangeQuery } = props;\n  const defaultPanel = isExpressionQuery(query.model) ? TABLE : TIMESERIES;\n  const [panel, setPanel] = useState<SupportedPanelPlugins>(defaultPanel);\n  const dsSettings = getDataSourceSrv().getInstanceSettings(query.datasourceUid);\n  const relativeTimeRange = query.relativeTimeRange;\n  const [options, setOptions] = useState<PanelOptions>({\n    frameIndex: 0,\n    showHeader: true,\n  });\n\n  const onTimeChange = useCallback(\n    (newDateTime: DateTime) => {\n      const now = dateTime().unix() - newDateTime.unix();\n\n      if (relativeTimeRange) {\n        const interval = relativeTimeRange.from - relativeTimeRange.to;\n        onChangeQuery({\n          ...query,\n          relativeTimeRange: { from: now + interval, to: now },\n        });\n      }\n    },\n    [onChangeQuery, query, relativeTimeRange]\n  );\n\n  const setDateTime = useCallback((relativeTimeRangeTo: number) => {\n    return relativeTimeRangeTo === 0 ? dateTime() : dateTime().subtract(relativeTimeRangeTo, 'seconds');\n  }, []);\n\n  if (!data) {\n    return null;\n  }\n\n  if (!dsSettings) {\n    return (\n      <div className={styles.content}>\n        <Alert title=\"Could not find datasource for query\" />\n        <CodeEditor\n          width=\"100%\"\n          height=\"250px\"\n          language=\"json\"\n          showLineNumbers={false}\n          showMiniMap={false}\n          value={JSON.stringify(query, null, '\\t')}\n          readOnly={true}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.content}>\n      <AutoSizer>\n        {({ width, height }) => {\n          return (\n            <div style={{ width, height }}>\n              <div className={styles.header}>\n                <div>\n                  {`Query ${query.refId}`}\n                  <span className={styles.dataSource}>({dsSettings.name})</span>\n                </div>\n                <div className={styles.actions}>\n                  {!isExpressionQuery(query.model) && relativeTimeRange ? (\n                    <DateTimePicker\n                      date={setDateTime(relativeTimeRange.to)}\n                      onChange={onTimeChange}\n                      maxDate={new Date()}\n                    />\n                  ) : null}\n                  <PanelPluginsButtonGroup onChange={setPanel} value={panel} size=\"md\" />\n                  <Authorize actions={[AccessControlAction.DataSourcesExplore]}>\n                    {!isExpressionQuery(query.model) && (\n                      <>\n                        <div className={styles.spacing} />\n                        <LinkButton\n                          size=\"md\"\n                          variant=\"secondary\"\n                          icon=\"compass\"\n                          target=\"_blank\"\n                          href={createExploreLink(dsSettings, query)}\n                        >\n                          View in Explore\n                        </LinkButton>\n                      </>\n                    )}\n                  </Authorize>\n                </div>\n              </div>\n              <PanelRenderer\n                height={height - theme.spacing.gridSize * headerHeight}\n                width={width}\n                data={data}\n                pluginId={panel}\n                title=\"\"\n                onOptionsChange={setOptions}\n                options={options}\n              />\n            </div>\n          );\n        }}\n      </AutoSizer>\n    </div>\n  );\n}\n\nfunction createExploreLink(settings: DataSourceInstanceSettings, query: AlertQuery): string {\n  const { name } = settings;\n  const { refId, ...rest } = query.model;\n  const queryParams = { ...rest, datasource: name };\n\n  return urlUtil.renderUrl(`${config.appSubUrl}/explore`, {\n    left: JSON.stringify(['now-1h', 'now', name, queryParams]),\n  });\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    content: css`\n      width: 100%;\n      height: 250px;\n    `,\n    header: css`\n      height: ${theme.spacing(headerHeight)};\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      white-space: nowrap;\n    `,\n    refId: css`\n      font-weight: ${theme.typography.fontWeightMedium};\n      color: ${theme.colors.text.link};\n      overflow: hidden;\n    `,\n    dataSource: css`\n      margin-left: ${theme.spacing(1)};\n      font-style: italic;\n      color: ${theme.colors.text.secondary};\n    `,\n    actions: css`\n      display: flex;\n      align-items: center;\n    `,\n    spacing: css`\n      padding: ${theme.spacing(0, 1, 0, 0)};\n    `,\n    errorMessage: css`\n      white-space: pre-wrap;\n    `,\n  };\n};\n","import React, { FC } from 'react';\n\nimport { CombinedRuleGroup } from 'app/types/unified-alerting';\n\nimport { DetailsField } from '../DetailsField';\n\ninterface Props {\n  group: CombinedRuleGroup;\n}\n\nconst RuleDetailsFederatedSources: FC<Props> = ({ group }) => {\n  const sourceTenants = group.source_tenants ?? [];\n\n  return (\n    <DetailsField label=\"Tenant sources\">\n      <>\n        {sourceTenants.map((tenant) => (\n          <div key={tenant}>{tenant}</div>\n        ))}\n      </>\n    </DetailsField>\n  );\n};\n\nexport { RuleDetailsFederatedSources };\n","import { DataQuery, DataSourceInstanceSettings } from '@grafana/data';\nimport { LokiQuery } from 'app/plugins/datasource/loki/types';\nimport { PromQuery } from 'app/plugins/datasource/prometheus/types';\nimport { CombinedRule } from 'app/types/unified-alerting';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { isCloudRulesSource, isGrafanaRulesSource } from './datasource';\nimport { isGrafanaRulerRule } from './rules';\n\nexport function alertRuleToQueries(combinedRule: CombinedRule | undefined | null): AlertQuery[] {\n  if (!combinedRule) {\n    return [];\n  }\n  const { namespace, rulerRule } = combinedRule;\n  const { rulesSource } = namespace;\n\n  if (isGrafanaRulesSource(rulesSource)) {\n    if (isGrafanaRulerRule(rulerRule)) {\n      return rulerRule.grafana_alert.data;\n    }\n  }\n\n  if (isCloudRulesSource(rulesSource)) {\n    const model = cloudAlertRuleToModel(rulesSource, combinedRule);\n\n    return [\n      {\n        refId: model.refId,\n        datasourceUid: rulesSource.uid,\n        queryType: '',\n        model,\n        relativeTimeRange: {\n          from: 360,\n          to: 0,\n        },\n      },\n    ];\n  }\n\n  return [];\n}\n\nfunction cloudAlertRuleToModel(dsSettings: DataSourceInstanceSettings, rule: CombinedRule): DataQuery {\n  const refId = 'A';\n\n  switch (dsSettings.type) {\n    case 'prometheus': {\n      const query: PromQuery = {\n        refId,\n        expr: rule.query,\n      };\n\n      return query;\n    }\n\n    case 'loki': {\n      const query: LokiQuery = {\n        refId,\n        expr: rule.query,\n      };\n\n      return query;\n    }\n\n    default:\n      throw new Error(`Query for datasource type ${dsSettings.type} is currently not supported by cloud alert rules.`);\n  }\n}\n","import { css } from '@emotion/css';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useObservable } from 'react-use';\n\nimport { GrafanaTheme2, LoadingState, PanelData } from '@grafana/data';\nimport {\n  Alert,\n  Button,\n  Icon,\n  LoadingPlaceholder,\n  PanelChromeLoadingIndicator,\n  useStyles2,\n  VerticalGroup,\n  withErrorBoundary,\n} from '@grafana/ui';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\n\nimport { DEFAULT_PER_PAGE_PAGINATION } from '../../../core/constants';\nimport { AlertQuery } from '../../../types/unified-alerting-dto';\n\nimport { AlertLabels } from './components/AlertLabels';\nimport { DetailsField } from './components/DetailsField';\nimport { ProvisionedResource, ProvisioningAlert } from './components/Provisioning';\nimport { RuleViewerLayout, RuleViewerLayoutContent } from './components/rule-viewer/RuleViewerLayout';\nimport { RuleViewerVisualization } from './components/rule-viewer/RuleViewerVisualization';\nimport { RuleDetailsActionButtons } from './components/rules/RuleDetailsActionButtons';\nimport { RuleDetailsAnnotations } from './components/rules/RuleDetailsAnnotations';\nimport { RuleDetailsDataSources } from './components/rules/RuleDetailsDataSources';\nimport { RuleDetailsExpression } from './components/rules/RuleDetailsExpression';\nimport { RuleDetailsFederatedSources } from './components/rules/RuleDetailsFederatedSources';\nimport { RuleDetailsMatchingInstances } from './components/rules/RuleDetailsMatchingInstances';\nimport { RuleHealth } from './components/rules/RuleHealth';\nimport { RuleState } from './components/rules/RuleState';\nimport { useAlertQueriesStatus } from './hooks/useAlertQueriesStatus';\nimport { useCombinedRule } from './hooks/useCombinedRule';\nimport { AlertingQueryRunner } from './state/AlertingQueryRunner';\nimport { getRulesSourceByName } from './utils/datasource';\nimport { alertRuleToQueries } from './utils/query';\nimport * as ruleId from './utils/rule-id';\nimport { isFederatedRuleGroup, isGrafanaRulerRule } from './utils/rules';\n\ntype RuleViewerProps = GrafanaRouteComponentProps<{ id?: string; sourceName?: string }>;\n\nconst errorMessage = 'Could not find data source for rule';\nconst errorTitle = 'Could not view rule';\nconst pageTitle = 'Alerting / View rule';\n\nexport function RuleViewer({ match }: RuleViewerProps) {\n  const styles = useStyles2(getStyles);\n  const { id } = match.params;\n  const identifier = ruleId.tryParse(id, true);\n\n  const { loading, error, result: rule } = useCombinedRule(identifier, identifier?.ruleSourceName);\n  const runner = useMemo(() => new AlertingQueryRunner(), []);\n  const data = useObservable(runner.get());\n  const queries2 = useMemo(() => alertRuleToQueries(rule), [rule]);\n  const [queries, setQueries] = useState<AlertQuery[]>([]);\n\n  const { allDataSourcesAvailable } = useAlertQueriesStatus(queries2);\n\n  const onRunQueries = useCallback(() => {\n    if (queries.length > 0 && allDataSourcesAvailable) {\n      runner.run(queries);\n    }\n  }, [queries, runner, allDataSourcesAvailable]);\n\n  useEffect(() => {\n    setQueries(queries2);\n  }, [queries2]);\n\n  useEffect(() => {\n    if (allDataSourcesAvailable) {\n      onRunQueries();\n    }\n  }, [onRunQueries, allDataSourcesAvailable]);\n\n  useEffect(() => {\n    return () => runner.destroy();\n  }, [runner]);\n\n  const onChangeQuery = useCallback((query: AlertQuery) => {\n    setQueries((queries) =>\n      queries.map((q) => {\n        if (q.refId === query.refId) {\n          return query;\n        }\n        return q;\n      })\n    );\n  }, []);\n\n  if (!identifier?.ruleSourceName) {\n    return (\n      <RuleViewerLayout title={pageTitle}>\n        <Alert title={errorTitle}>\n          <details className={styles.errorMessage}>{errorMessage}</details>\n        </Alert>\n      </RuleViewerLayout>\n    );\n  }\n\n  const rulesSource = getRulesSourceByName(identifier.ruleSourceName);\n\n  if (loading) {\n    return (\n      <RuleViewerLayout title={pageTitle}>\n        <LoadingPlaceholder text=\"Loading rule...\" />\n      </RuleViewerLayout>\n    );\n  }\n\n  if (error || !rulesSource) {\n    return (\n      <RuleViewerLayout title={pageTitle}>\n        <Alert title={errorTitle}>\n          <details className={styles.errorMessage}>\n            {error?.message ?? errorMessage}\n            <br />\n            {!!error?.stack && error.stack}\n          </details>\n        </Alert>\n      </RuleViewerLayout>\n    );\n  }\n\n  if (!rule) {\n    return (\n      <RuleViewerLayout title={pageTitle}>\n        <span>Rule could not be found.</span>\n      </RuleViewerLayout>\n    );\n  }\n\n  const annotations = Object.entries(rule.annotations).filter(([_, value]) => !!value.trim());\n  const isFederatedRule = isFederatedRuleGroup(rule.group);\n  const isProvisioned = isGrafanaRulerRule(rule.rulerRule) && Boolean(rule.rulerRule.grafana_alert.provenance);\n\n  return (\n    <RuleViewerLayout wrapInContent={false} title={pageTitle}>\n      {isFederatedRule && (\n        <Alert severity=\"info\" title=\"This rule is part of a federated rule group.\">\n          <VerticalGroup>\n            Federated rule groups are currently an experimental feature.\n            <Button fill=\"text\" icon=\"book\">\n              <a href=\"https://grafana.com/docs/metrics-enterprise/latest/tenant-management/tenant-federation/#cross-tenant-alerting-and-recording-rule-federation\">\n                Read documentation\n              </a>\n            </Button>\n          </VerticalGroup>\n        </Alert>\n      )}\n      {isProvisioned && <ProvisioningAlert resource={ProvisionedResource.AlertRule} />}\n      <RuleViewerLayoutContent>\n        <div>\n          <h4>\n            <Icon name=\"bell\" size=\"lg\" /> {rule.name}\n          </h4>\n          <RuleState rule={rule} isCreating={false} isDeleting={false} />\n          <RuleDetailsActionButtons rule={rule} rulesSource={rulesSource} />\n        </div>\n        <div className={styles.details}>\n          <div className={styles.leftSide}>\n            {rule.promRule && (\n              <DetailsField label=\"Health\" horizontal={true}>\n                <RuleHealth rule={rule.promRule} />\n              </DetailsField>\n            )}\n            {!!rule.labels && !!Object.keys(rule.labels).length && (\n              <DetailsField label=\"Labels\" horizontal={true}>\n                <AlertLabels labels={rule.labels} />\n              </DetailsField>\n            )}\n            <RuleDetailsExpression rulesSource={rulesSource} rule={rule} annotations={annotations} />\n            <RuleDetailsAnnotations annotations={annotations} />\n          </div>\n          <div className={styles.rightSide}>\n            <RuleDetailsDataSources rule={rule} rulesSource={rulesSource} />\n            {isFederatedRule && <RuleDetailsFederatedSources group={rule.group} />}\n            <DetailsField label=\"Namespace / Group\">{`${rule.namespace.name} / ${rule.group.name}`}</DetailsField>\n          </div>\n        </div>\n        <div>\n          <RuleDetailsMatchingInstances rule={rule} pagination={{ itemsPerPage: DEFAULT_PER_PAGE_PAGINATION }} />\n        </div>\n      </RuleViewerLayoutContent>\n      {!isFederatedRule && data && Object.keys(data).length > 0 && (\n        <>\n          <div className={styles.queriesTitle}>\n            Query results <PanelChromeLoadingIndicator loading={isLoading(data)} onCancel={() => runner.cancel()} />\n          </div>\n          <RuleViewerLayoutContent padding={0}>\n            <div className={styles.queries}>\n              {queries.map((query) => {\n                return (\n                  <div key={query.refId} className={styles.query}>\n                    <RuleViewerVisualization\n                      query={query}\n                      data={data && data[query.refId]}\n                      onChangeQuery={onChangeQuery}\n                    />\n                  </div>\n                );\n              })}\n            </div>\n          </RuleViewerLayoutContent>\n        </>\n      )}\n      {!isFederatedRule && !allDataSourcesAvailable && (\n        <Alert title=\"Query not available\" severity=\"warning\" className={styles.queryWarning}>\n          Cannot display the query preview. Some of the data sources used in the queries are not available.\n        </Alert>\n      )}\n    </RuleViewerLayout>\n  );\n}\n\nfunction isLoading(data: Record<string, PanelData>): boolean {\n  return !!Object.values(data).find((d) => d.state === LoadingState.Loading);\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    errorMessage: css`\n      white-space: pre-wrap;\n    `,\n    queries: css`\n      height: 100%;\n      width: 100%;\n    `,\n    queriesTitle: css`\n      padding: ${theme.spacing(2, 0.5)};\n      font-size: ${theme.typography.h5.fontSize};\n      font-weight: ${theme.typography.fontWeightBold};\n      font-family: ${theme.typography.h5.fontFamily};\n    `,\n    query: css`\n      border-bottom: 1px solid ${theme.colors.border.medium};\n      padding: ${theme.spacing(2)};\n    `,\n    queryWarning: css`\n      margin: ${theme.spacing(4, 0)};\n    `,\n    details: css`\n      display: flex;\n      flex-direction: row;\n    `,\n    leftSide: css`\n      flex: 1;\n    `,\n    rightSide: css`\n      padding-left: 90px;\n      width: 300px;\n    `,\n  };\n};\n\nexport default withErrorBoundary(RuleViewer, { style: 'page' });\n","import React, { FC } from 'react';\n\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AccessControlAction } from 'app/types';\n\ntype Props = {\n  actions: AccessControlAction[];\n  fallback?: boolean;\n};\n\nexport const Authorize: FC<Props> = ({ actions, children, fallback = true }) => {\n  if (actions.some((action) => contextSrv.hasAccess(action, fallback))) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n","import React, { useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { RadioButtonGroup } from '@grafana/ui';\n\nimport { STAT, TABLE, TIMESERIES } from '../utils/constants';\n\nexport type SupportedPanelPlugins = 'timeseries' | 'table' | 'stat';\n\ntype Props = {\n  value: SupportedPanelPlugins;\n  onChange: (value: SupportedPanelPlugins) => void;\n  size?: 'sm' | 'md';\n};\n\nexport function PanelPluginsButtonGroup(props: Props): JSX.Element | null {\n  const { value, onChange, size = 'md' } = props;\n  const panels = useMemo(() => getSupportedPanels(), []);\n\n  return <RadioButtonGroup options={panels} value={value} onChange={onChange} size={size} />;\n}\n\nfunction getSupportedPanels(): Array<SelectableValue<SupportedPanelPlugins>> {\n  return Object.values(config.panels).reduce((panels: Array<SelectableValue<SupportedPanelPlugins>>, panel) => {\n    if (isSupportedPanelPlugin(panel.id)) {\n      panels.push({\n        value: panel.id,\n        label: panel.name,\n        imgUrl: panel.info.logos.small,\n      });\n    }\n    return panels;\n  }, []);\n}\n\nfunction isSupportedPanelPlugin(id: string): id is SupportedPanelPlugins {\n  switch (id) {\n    case TIMESERIES:\n    case TABLE:\n    case STAT:\n      return true;\n    default:\n      return false;\n  }\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { PageToolbar, useStyles2 } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\n\ntype Props = {\n  children: React.ReactNode | React.ReactNode[];\n  title: string;\n  wrapInContent?: boolean;\n};\n\nexport function RuleViewerLayout(props: Props): JSX.Element | null {\n  const { wrapInContent = true, children, title } = props;\n  const styles = useStyles2(getPageStyles);\n\n  return (\n    <Page>\n      <PageToolbar title={title} pageIcon=\"bell\" onGoBack={() => locationService.push('/alerting/list')} />\n      <div className={styles.content}>{wrapInContent ? <RuleViewerLayoutContent {...props} /> : children}</div>\n    </Page>\n  );\n}\n\ntype ContentProps = {\n  children: React.ReactNode | React.ReactNode[];\n  padding?: number;\n};\n\nexport function RuleViewerLayoutContent({ children, padding = 2 }: ContentProps): JSX.Element | null {\n  const styles = useStyles2(getContentStyles(padding));\n  return <div className={styles.wrapper}>{children}</div>;\n}\n\nconst getPageStyles = (theme: GrafanaTheme2) => {\n  return {\n    content: css`\n      margin: ${theme.spacing(0, 2, 2)};\n      max-width: ${theme.breakpoints.values.xxl}px;\n    `,\n  };\n};\n\nconst getContentStyles = (padding: number) => (theme: GrafanaTheme2) => {\n  return {\n    wrapper: css`\n      background: ${theme.colors.background.primary};\n      border: 1px solid ${theme.colors.border.weak};\n      border-radius: ${theme.shape.borderRadius()};\n      padding: ${theme.spacing(padding)};\n    `,\n  };\n};\n","import { useMemo } from 'react';\n\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\nexport function useAlertQueriesStatus(queries: AlertQuery[]) {\n  const allDataSourcesAvailable = useMemo(\n    () => queries.every((query) => Boolean(getDataSourceSrv().getInstanceSettings(query.datasourceUid))),\n    [queries]\n  );\n\n  return { allDataSourcesAvailable };\n}\n","import { useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAsync } from 'react-use';\n\nimport { CombinedRule, RuleIdentifier, RuleNamespace } from 'app/types/unified-alerting';\nimport { RulerRulesConfigDTO } from 'app/types/unified-alerting-dto';\n\nimport { fetchPromAndRulerRulesAction } from '../state/actions';\nimport { AsyncRequestMapSlice, AsyncRequestState, initialAsyncRequestState } from '../utils/redux';\nimport * as ruleId from '../utils/rule-id';\nimport { isRulerNotSupportedResponse } from '../utils/rules';\n\nimport { useCombinedRuleNamespaces } from './useCombinedRuleNamespaces';\nimport { useUnifiedAlertingSelector } from './useUnifiedAlertingSelector';\n\nexport function useCombinedRule(\n  identifier: RuleIdentifier | undefined,\n  ruleSourceName: string | undefined\n): AsyncRequestState<CombinedRule> {\n  const requestState = useCombinedRulesLoader(ruleSourceName);\n  const combinedRules = useCombinedRuleNamespaces(ruleSourceName);\n\n  const rule = useMemo(() => {\n    if (!identifier || !ruleSourceName || combinedRules.length === 0) {\n      return;\n    }\n\n    for (const namespace of combinedRules) {\n      for (const group of namespace.groups) {\n        for (const rule of group.rules) {\n          const id = ruleId.fromCombinedRule(ruleSourceName, rule);\n\n          if (ruleId.equal(id, identifier)) {\n            return rule;\n          }\n        }\n      }\n    }\n\n    return;\n  }, [identifier, ruleSourceName, combinedRules]);\n\n  return {\n    ...requestState,\n    result: rule,\n  };\n}\n\nexport function useCombinedRulesMatching(\n  ruleName: string | undefined,\n  ruleSourceName: string | undefined\n): AsyncRequestState<CombinedRule[]> {\n  const requestState = useCombinedRulesLoader(ruleSourceName);\n  const combinedRules = useCombinedRuleNamespaces(ruleSourceName);\n\n  const rules = useMemo(() => {\n    if (!ruleName || !ruleSourceName || combinedRules.length === 0) {\n      return [];\n    }\n\n    const rules: CombinedRule[] = [];\n\n    for (const namespace of combinedRules) {\n      for (const group of namespace.groups) {\n        for (const rule of group.rules) {\n          if (rule.name === ruleName) {\n            rules.push(rule);\n          }\n        }\n      }\n    }\n\n    return rules;\n  }, [ruleName, ruleSourceName, combinedRules]);\n\n  return {\n    ...requestState,\n    result: rules,\n  };\n}\n\nfunction useCombinedRulesLoader(rulesSourceName: string | undefined): AsyncRequestState<void> {\n  const dispatch = useDispatch();\n  const promRuleRequests = useUnifiedAlertingSelector((state) => state.promRules);\n  const promRuleRequest = getRequestState(rulesSourceName, promRuleRequests);\n  const rulerRuleRequests = useUnifiedAlertingSelector((state) => state.rulerRules);\n  const rulerRuleRequest = getRequestState(rulesSourceName, rulerRuleRequests);\n\n  const { loading } = useAsync(async () => {\n    if (!rulesSourceName) {\n      return;\n    }\n\n    await dispatch(fetchPromAndRulerRulesAction({ rulesSourceName }));\n  }, [dispatch, rulesSourceName]);\n\n  return {\n    loading,\n    error: promRuleRequest.error ?? isRulerNotSupportedResponse(rulerRuleRequest) ? undefined : rulerRuleRequest.error,\n    dispatched: promRuleRequest.dispatched && rulerRuleRequest.dispatched,\n  };\n}\n\nfunction getRequestState(\n  ruleSourceName: string | undefined,\n  slice: AsyncRequestMapSlice<RulerRulesConfigDTO | RuleNamespace[] | null>\n): AsyncRequestState<RulerRulesConfigDTO | RuleNamespace[] | null> {\n  if (!ruleSourceName) {\n    return initialAsyncRequestState;\n  }\n\n  const state = slice[ruleSourceName];\n\n  if (!state) {\n    return initialAsyncRequestState;\n  }\n\n  return state;\n}\n","import { RelativeTimeRange } from '@grafana/data';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { ExpressionQuery, ExpressionQueryType } from '../../../expressions/types';\n\nconst FALL_BACK_TIME_RANGE = { from: 21600, to: 0 };\n\nexport const getTimeRangeForExpression = (query: ExpressionQuery, queries: AlertQuery[]): RelativeTimeRange => {\n  const referencedRefIds: string[] | undefined = getReferencedIds(query, queries);\n\n  if (!referencedRefIds) {\n    return FALL_BACK_TIME_RANGE;\n  }\n\n  const { from, to } = getTimeRanges(referencedRefIds, queries);\n\n  if (!from.length && !to.length) {\n    return FALL_BACK_TIME_RANGE;\n  }\n\n  return {\n    from: Math.max(...from),\n    to: Math.min(...to),\n  };\n};\n\nconst getReferencedIds = (model: ExpressionQuery, queries: AlertQuery[]): string[] | undefined => {\n  switch (model.type) {\n    case ExpressionQueryType.classic:\n      return getReferencedIdsForClassicCondition(model);\n    case ExpressionQueryType.math:\n      return getReferencedIdsForMath(model, queries);\n    case ExpressionQueryType.resample:\n    case ExpressionQueryType.reduce:\n      return getReferencedIdsForReduce(model);\n  }\n};\n\nconst getReferencedIdsForClassicCondition = (model: ExpressionQuery) => {\n  return model.conditions?.map((condition) => {\n    return condition.query.params[0];\n  });\n};\n\nconst getTimeRanges = (referencedRefIds: string[], queries: AlertQuery[]) => {\n  let from: number[] = [];\n  let to = [FALL_BACK_TIME_RANGE.to];\n  for (const referencedRefIdsKey of referencedRefIds) {\n    const query = queries.find((query) => query.refId === referencedRefIdsKey);\n\n    if (!query || !query.relativeTimeRange) {\n      continue;\n    }\n    from.push(query.relativeTimeRange.from);\n    to.push(query.relativeTimeRange.to);\n  }\n\n  return {\n    from,\n    to,\n  };\n};\n\nconst getReferencedIdsForMath = (model: ExpressionQuery, queries: AlertQuery[]) => {\n  return (\n    queries\n      // filter queries of type query and filter expression on if it includes any refIds\n      .filter((q) => q.queryType === 'query' && model.expression?.includes(q.refId))\n      .map((q) => {\n        return q.refId;\n      })\n  );\n};\n\nconst getReferencedIdsForReduce = (model: ExpressionQuery) => {\n  return model.expression ? [model.expression] : undefined;\n};\n","import { Observable, of, OperatorFunction, ReplaySubject, Unsubscribable } from 'rxjs';\nimport { catchError, map, share } from 'rxjs/operators';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport {\n  dataFrameFromJSON,\n  DataFrameJSON,\n  getDefaultTimeRange,\n  LoadingState,\n  PanelData,\n  rangeUtil,\n  TimeRange,\n  withLoadingIndicator,\n} from '@grafana/data';\nimport { FetchResponse, getDataSourceSrv, toDataQueryError } from '@grafana/runtime';\nimport { BackendSrv, getBackendSrv } from 'app/core/services/backend_srv';\nimport { isExpressionQuery } from 'app/features/expressions/guards';\nimport { cancelNetworkRequestsOnUnsubscribe } from 'app/features/query/state/processing/canceler';\nimport { setStructureRevision } from 'app/features/query/state/processing/revision';\nimport { preProcessPanelData } from 'app/features/query/state/runRequest';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { getTimeRangeForExpression } from '../utils/timeRange';\n\nexport interface AlertingQueryResult {\n  frames: DataFrameJSON[];\n}\n\nexport interface AlertingQueryResponse {\n  results: Record<string, AlertingQueryResult>;\n}\nexport class AlertingQueryRunner {\n  private subject: ReplaySubject<Record<string, PanelData>>;\n  private subscription?: Unsubscribable;\n  private lastResult: Record<string, PanelData>;\n\n  constructor(private backendSrv = getBackendSrv(), private dataSourceSrv = getDataSourceSrv()) {\n    this.subject = new ReplaySubject(1);\n    this.lastResult = {};\n  }\n\n  get(): Observable<Record<string, PanelData>> {\n    return this.subject.asObservable();\n  }\n\n  async run(queries: AlertQuery[]) {\n    if (queries.length === 0) {\n      const empty = initialState(queries, LoadingState.Done);\n      return this.subject.next(empty);\n    }\n\n    // do not execute if one more of the queries are not runnable,\n    // for example not completely configured\n    for (const query of queries) {\n      if (!isExpressionQuery(query.model)) {\n        const ds = await this.dataSourceSrv.get(query.datasourceUid);\n        if (ds.filterQuery && !ds.filterQuery(query.model)) {\n          const empty = initialState(queries, LoadingState.Done);\n          return this.subject.next(empty);\n        }\n      }\n    }\n\n    this.subscription = runRequest(this.backendSrv, queries).subscribe({\n      next: (dataPerQuery) => {\n        const nextResult = applyChange(dataPerQuery, (refId, data) => {\n          const previous = this.lastResult[refId];\n          const preProcessed = preProcessPanelData(data, previous);\n          return setStructureRevision(preProcessed, previous);\n        });\n\n        this.lastResult = nextResult;\n        this.subject.next(this.lastResult);\n      },\n\n      error: (error: Error) => {\n        this.lastResult = mapErrorToPanelData(this.lastResult, error);\n        this.subject.next(this.lastResult);\n      },\n    });\n  }\n\n  cancel() {\n    if (!this.subscription) {\n      return;\n    }\n    this.subscription.unsubscribe();\n\n    let requestIsRunning = false;\n\n    const nextResult = applyChange(this.lastResult, (refId, data) => {\n      if (data.state === LoadingState.Loading) {\n        requestIsRunning = true;\n      }\n\n      return {\n        ...data,\n        state: LoadingState.Done,\n      };\n    });\n\n    if (requestIsRunning) {\n      this.subject.next(nextResult);\n    }\n  }\n\n  destroy() {\n    if (this.subject) {\n      this.subject.complete();\n    }\n\n    this.cancel();\n  }\n}\n\nconst runRequest = (backendSrv: BackendSrv, queries: AlertQuery[]): Observable<Record<string, PanelData>> => {\n  const initial = initialState(queries, LoadingState.Loading);\n  const request = {\n    data: { data: queries },\n    url: '/api/v1/eval',\n    method: 'POST',\n    requestId: uuidv4(),\n  };\n\n  return withLoadingIndicator({\n    whileLoading: initial,\n    source: backendSrv.fetch<AlertingQueryResponse>(request).pipe(\n      mapToPanelData(initial),\n      catchError((error) => of(mapErrorToPanelData(initial, error))),\n      cancelNetworkRequestsOnUnsubscribe(backendSrv, request.requestId),\n      share()\n    ),\n  });\n};\n\nconst initialState = (queries: AlertQuery[], state: LoadingState): Record<string, PanelData> => {\n  return queries.reduce((dataByQuery: Record<string, PanelData>, query) => {\n    dataByQuery[query.refId] = {\n      state,\n      series: [],\n      timeRange: getTimeRange(query, queries),\n    };\n\n    return dataByQuery;\n  }, {});\n};\n\nconst getTimeRange = (query: AlertQuery, queries: AlertQuery[]): TimeRange => {\n  if (isExpressionQuery(query.model)) {\n    const relative = getTimeRangeForExpression(query.model, queries);\n    return rangeUtil.relativeToTimeRange(relative);\n  }\n\n  if (!query.relativeTimeRange) {\n    console.warn(`Query with refId: ${query.refId} did not have any relative time range, using default.`);\n    return getDefaultTimeRange();\n  }\n\n  return rangeUtil.relativeToTimeRange(query.relativeTimeRange);\n};\n\nconst mapToPanelData = (\n  dataByQuery: Record<string, PanelData>\n): OperatorFunction<FetchResponse<AlertingQueryResponse>, Record<string, PanelData>> => {\n  return map((response) => {\n    const { data } = response;\n    const results: Record<string, PanelData> = {};\n\n    for (const [refId, result] of Object.entries(data.results)) {\n      results[refId] = {\n        timeRange: dataByQuery[refId].timeRange,\n        state: LoadingState.Done,\n        series: result.frames.map(dataFrameFromJSON),\n      };\n    }\n\n    return results;\n  });\n};\n\nconst mapErrorToPanelData = (lastResult: Record<string, PanelData>, error: Error): Record<string, PanelData> => {\n  const queryError = toDataQueryError(error);\n\n  return applyChange(lastResult, (refId, data) => {\n    return {\n      ...data,\n      state: LoadingState.Error,\n      error: queryError,\n    };\n  });\n};\n\nconst applyChange = (\n  initial: Record<string, PanelData>,\n  change: (refId: string, data: PanelData) => PanelData\n): Record<string, PanelData> => {\n  const nextResult: Record<string, PanelData> = {};\n\n  for (const [refId, data] of Object.entries(initial)) {\n    nextResult[refId] = change(refId, data);\n  }\n\n  return nextResult;\n};\n","import { DataQuery } from '@grafana/data';\nimport { isExpressionReference } from '@grafana/runtime/src/utils/DataSourceWithBackend';\n\nimport { ExpressionQuery, ExpressionQueryType } from './types';\n\nexport const isExpressionQuery = (dataQuery?: DataQuery): dataQuery is ExpressionQuery => {\n  if (!dataQuery) {\n    return false;\n  }\n\n  if (isExpressionReference(dataQuery.datasource)) {\n    return true;\n  }\n\n  const expression = dataQuery as ExpressionQuery;\n\n  if (typeof expression.type !== 'string') {\n    return false;\n  }\n  return Object.values(ExpressionQueryType).includes(expression.type);\n};\n"],"names":["RuleViewerVisualization","props","theme","useTheme2","styles","useStyles2","getStyles","data","query","onChangeQuery","defaultPanel","isExpressionQuery","model","TABLE","TIMESERIES","panel","setPanel","useState","dsSettings","getDataSourceSrv","getInstanceSettings","datasourceUid","relativeTimeRange","options","setOptions","frameIndex","showHeader","onTimeChange","useCallback","newDateTime","now","dateTime","unix","interval","from","to","setDateTime","relativeTimeRangeTo","subtract","className","content","width","height","style","header","refId","dataSource","name","actions","DateTimePicker","date","onChange","maxDate","Date","PanelPluginsButtonGroup","value","size","Authorize","AccessControlAction","spacing","LinkButton","variant","icon","target","href","createExploreLink","PanelRenderer","gridSize","pluginId","title","onOptionsChange","Alert","CodeEditor","language","showLineNumbers","showMiniMap","JSON","stringify","readOnly","settings","rest","queryParams","datasource","urlUtil","config","left","css","typography","fontWeightMedium","colors","text","link","secondary","errorMessage","RuleDetailsFederatedSources","group","sourceTenants","source_tenants","DetailsField","label","map","tenant","alertRuleToQueries","combinedRule","namespace","rulerRule","rulesSource","isGrafanaRulesSource","isGrafanaRulerRule","grafana_alert","isCloudRulesSource","rule","type","expr","Error","cloudAlertRuleToModel","uid","queryType","errorTitle","pageTitle","RuleViewer","match","id","params","identifier","ruleId","loading","error","result","useCombinedRule","ruleSourceName","runner","useMemo","AlertingQueryRunner","useObservable","get","queries2","queries","setQueries","allDataSourcesAvailable","useAlertQueriesStatus","onRunQueries","length","run","useEffect","destroy","q","RuleViewerLayout","getRulesSourceByName","LoadingPlaceholder","message","stack","annotations","Object","entries","filter","_","trim","isFederatedRule","isFederatedRuleGroup","isProvisioned","Boolean","provenance","wrapInContent","severity","VerticalGroup","Button","fill","Provisioning","resource","ProvisionedResource","Icon","RuleState","isCreating","isDeleting","RuleDetailsActionButtons","details","leftSide","promRule","horizontal","RuleHealth","labels","keys","AlertLabels","RuleDetailsExpression","RuleDetailsAnnotations","rightSide","RuleDetailsDataSources","RuleDetailsMatchingInstances","pagination","itemsPerPage","DEFAULT_PER_PAGE_PAGINATION","queriesTitle","PanelChromeLoadingIndicator","isLoading","onCancel","cancel","padding","queryWarning","values","find","d","state","LoadingState","h5","fontSize","fontWeightBold","fontFamily","border","medium","withErrorBoundary","children","fallback","some","action","contextSrv","panels","reduce","STAT","isSupportedPanelPlugin","push","imgUrl","info","logos","small","RadioButtonGroup","getPageStyles","PageToolbar","pageIcon","onGoBack","locationService","RuleViewerLayoutContent","getContentStyles","wrapper","breakpoints","xxl","background","primary","weak","shape","borderRadius","every","requestState","useCombinedRulesLoader","combinedRules","useCombinedRuleNamespaces","groups","rules","useCombinedRulesMatching","ruleName","rulesSourceName","dispatch","useDispatch","promRuleRequests","useUnifiedAlertingSelector","promRules","promRuleRequest","getRequestState","rulerRuleRequests","rulerRules","rulerRuleRequest","useAsync","async","fetchPromAndRulerRulesAction","isRulerNotSupportedResponse","undefined","dispatched","slice","initialAsyncRequestState","FALL_BACK_TIME_RANGE","getReferencedIds","ExpressionQueryType","getReferencedIdsForClassicCondition","getReferencedIdsForMath","getReferencedIdsForReduce","conditions","condition","getTimeRanges","referencedRefIds","referencedRefIdsKey","expression","includes","constructor","backendSrv","getBackendSrv","dataSourceSrv","this","subject","ReplaySubject","lastResult","asObservable","empty","initialState","next","ds","filterQuery","subscription","runRequest","subscribe","dataPerQuery","nextResult","applyChange","previous","preProcessed","preProcessPanelData","setStructureRevision","mapErrorToPanelData","unsubscribe","requestIsRunning","complete","initial","request","url","method","requestId","uuidv4","withLoadingIndicator","whileLoading","source","fetch","pipe","mapToPanelData","catchError","of","cancelNetworkRequestsOnUnsubscribe","share","dataByQuery","series","timeRange","getTimeRange","relative","Math","max","min","getTimeRangeForExpression","rangeUtil","console","warn","getDefaultTimeRange","response","results","frames","dataFrameFromJSON","queryError","toDataQueryError","change","dataQuery","isExpressionReference"],"sourceRoot":""}