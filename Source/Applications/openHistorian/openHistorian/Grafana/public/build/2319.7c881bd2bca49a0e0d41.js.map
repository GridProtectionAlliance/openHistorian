{"version":3,"file":"2319.7c881bd2bca49a0e0d41.js","mappings":"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","sources":["webpack://grafana/./public/app/features/dashboard/state/analyticsProcessor.ts","webpack://grafana/./public/app/features/dashboard/state/initDashboard.ts","webpack://grafana/./public/app/features/explore/AddToDashboard/addToDashboard.ts","webpack://grafana/./public/app/features/explore/AddToDashboard/AddToDashboardModal.tsx","webpack://grafana/./public/app/features/explore/AddToDashboard/index.tsx"],"sourcesContent":["import { reportMetaAnalytics, MetaAnalyticsEventName, DashboardViewEventPayload } from '@grafana/runtime';\n\nimport { DashboardModel } from './DashboardModel';\n\nexport function emitDashboardViewEvent(dashboard: DashboardModel) {\n  const eventData: DashboardViewEventPayload = {\n    dashboardId: dashboard.id,\n    dashboardName: dashboard.title,\n    dashboardUid: dashboard.uid,\n    folderName: dashboard.meta.folderTitle,\n    eventName: MetaAnalyticsEventName.DashboardView,\n  };\n\n  reportMetaAnalytics(eventData);\n}\n","import { DataQuery, locationUtil, setWeekStart, DashboardLoadedEvent } from '@grafana/data';\nimport { config, isFetchError, locationService } from '@grafana/runtime';\nimport { notifyApp } from 'app/core/actions';\nimport appEvents from 'app/core/app_events';\nimport { createErrorNotification } from 'app/core/copy/appNotification';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport { KeybindingSrv } from 'app/core/services/keybindingSrv';\nimport store from 'app/core/store';\nimport { dashboardLoaderSrv } from 'app/features/dashboard/services/DashboardLoaderSrv';\nimport { DashboardSrv, getDashboardSrv } from 'app/features/dashboard/services/DashboardSrv';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { dashboardWatcher } from 'app/features/live/dashboard/dashboardWatcher';\nimport { playlistSrv } from 'app/features/playlist/PlaylistSrv';\nimport { toStateKey } from 'app/features/variables/utils';\nimport {\n  DashboardDTO,\n  DashboardInitPhase,\n  DashboardMeta,\n  DashboardRoutes,\n  StoreState,\n  ThunkDispatch,\n  ThunkResult,\n} from 'app/types';\n\nimport { createDashboardQueryRunner } from '../../query/state/DashboardQueryRunner/DashboardQueryRunner';\nimport { initVariablesTransaction } from '../../variables/state/actions';\nimport { getIfExistsLastKey } from '../../variables/state/selectors';\n\nimport { DashboardModel } from './DashboardModel';\nimport { PanelModel } from './PanelModel';\nimport { emitDashboardViewEvent } from './analyticsProcessor';\nimport { dashboardInitCompleted, dashboardInitFailed, dashboardInitFetching, dashboardInitServices } from './reducers';\n\nexport interface InitDashboardArgs {\n  urlUid?: string;\n  urlSlug?: string;\n  urlType?: string;\n  urlFolderUid?: string;\n  panelType?: string;\n  accessToken?: string;\n  routeName?: string;\n  fixUrl: boolean;\n  keybindingSrv: KeybindingSrv;\n}\n\nasync function fetchDashboard(\n  args: InitDashboardArgs,\n  dispatch: ThunkDispatch,\n  getState: () => StoreState\n): Promise<DashboardDTO | null> {\n  // When creating new or adding panels to a dashboard from explore we load it from local storage\n  const model = store.getObject<DashboardDTO>(DASHBOARD_FROM_LS_KEY);\n  if (model) {\n    removeDashboardToFetchFromLocalStorage();\n    return model;\n  }\n\n  try {\n    switch (args.routeName) {\n      case DashboardRoutes.Home: {\n        // load home dash\n        const dashDTO: DashboardDTO = await backendSrv.get('/api/dashboards/home');\n\n        // if user specified a custom home dashboard redirect to that\n        if (dashDTO.redirectUri) {\n          const newUrl = locationUtil.stripBaseFromUrl(dashDTO.redirectUri);\n          locationService.replace(newUrl);\n          return null;\n        }\n\n        // disable some actions on the default home dashboard\n        dashDTO.meta.canSave = false;\n        dashDTO.meta.canShare = false;\n        dashDTO.meta.canStar = false;\n        return dashDTO;\n      }\n      case DashboardRoutes.Public: {\n        return await dashboardLoaderSrv.loadDashboard('public', args.urlSlug, args.accessToken);\n      }\n      case DashboardRoutes.Normal: {\n        const dashDTO: DashboardDTO = await dashboardLoaderSrv.loadDashboard(args.urlType, args.urlSlug, args.urlUid);\n\n        if (args.fixUrl && dashDTO.meta.url && !playlistSrv.isPlaying) {\n          // check if the current url is correct (might be old slug)\n          const dashboardUrl = locationUtil.stripBaseFromUrl(dashDTO.meta.url);\n          const currentPath = locationService.getLocation().pathname;\n\n          if (dashboardUrl !== currentPath) {\n            // Spread current location to persist search params used for navigation\n            locationService.replace({\n              ...locationService.getLocation(),\n              pathname: dashboardUrl,\n            });\n            console.log('not correct url correcting', dashboardUrl, currentPath);\n          }\n        }\n        return dashDTO;\n      }\n      case DashboardRoutes.New: {\n        return getNewDashboardModelData(args.urlFolderUid, args.panelType);\n      }\n      case DashboardRoutes.Path: {\n        const path = args.urlSlug ?? '';\n        return await dashboardLoaderSrv.loadDashboard(DashboardRoutes.Path, path, path);\n      }\n      default:\n        throw { message: 'Unknown route ' + args.routeName };\n    }\n  } catch (err) {\n    // Ignore cancelled errors\n    if (isFetchError(err) && err.cancelled) {\n      return null;\n    }\n\n    dispatch(dashboardInitFailed({ message: 'Failed to fetch dashboard', error: err }));\n    console.error(err);\n    return null;\n  }\n}\n\nconst getQueriesByDatasource = (\n  panels: PanelModel[],\n  queries: { [datasourceId: string]: DataQuery[] } = {}\n): { [datasourceId: string]: DataQuery[] } => {\n  panels.forEach((panel) => {\n    if (panel.panels) {\n      getQueriesByDatasource(panel.panels, queries);\n    } else if (panel.targets) {\n      panel.targets.forEach((target) => {\n        if (target.datasource?.type) {\n          if (queries[target.datasource.type]) {\n            queries[target.datasource.type].push(target);\n          } else {\n            queries[target.datasource.type] = [target];\n          }\n        }\n      });\n    }\n  });\n  return queries;\n};\n\n/**\n * This action (or saga) does everything needed to bootstrap a dashboard & dashboard model.\n * First it handles the process of fetching the dashboard, correcting the url if required (causing redirects/url updates)\n *\n * This is used both for single dashboard & solo panel routes, home & new dashboard routes.\n *\n * Then it handles the initializing of the old angular services that the dashboard components & panels still depend on\n *\n */\nexport function initDashboard(args: InitDashboardArgs): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    // set fetching state\n    dispatch(dashboardInitFetching());\n\n    // fetch dashboard data\n    const dashDTO = await fetchDashboard(args, dispatch, getState);\n\n    // returns null if there was a redirect or error\n    if (!dashDTO) {\n      return;\n    }\n\n    // set initializing state\n    dispatch(dashboardInitServices());\n\n    // create model\n    let dashboard: DashboardModel;\n    try {\n      dashboard = new DashboardModel(dashDTO.dashboard, dashDTO.meta);\n    } catch (err) {\n      dispatch(dashboardInitFailed({ message: 'Failed create dashboard model', error: err }));\n      console.error(err);\n      return;\n    }\n\n    // add missing orgId query param\n    const storeState = getState();\n    const queryParams = locationService.getSearchObject();\n\n    if (!queryParams.orgId) {\n      // TODO this is currently not possible with the LocationService API\n      locationService.partial({ orgId: storeState.user.orgId }, true);\n    }\n\n    // init services\n    const timeSrv: TimeSrv = getTimeSrv();\n    const dashboardSrv: DashboardSrv = getDashboardSrv();\n\n    // legacy srv state, we need this value updated for built-in annotations\n    dashboardSrv.setCurrent(dashboard);\n\n    timeSrv.init(dashboard);\n\n    const dashboardUid = toStateKey(args.urlUid ?? dashboard.uid);\n    // template values service needs to initialize completely before the rest of the dashboard can load\n    await dispatch(initVariablesTransaction(dashboardUid, dashboard));\n\n    // DashboardQueryRunner needs to run after all variables have been resolved so that any annotation query including a variable\n    // will be correctly resolved\n    const runner = createDashboardQueryRunner({ dashboard, timeSrv });\n    runner.run({ dashboard, range: timeSrv.timeRange() });\n\n    if (getIfExistsLastKey(getState()) !== dashboardUid) {\n      // if a previous dashboard has slow running variable queries the batch uid will be the new one\n      // but the args.urlUid will be the same as before initVariablesTransaction was called so then we can't continue initializing\n      // the previous dashboard.\n      return;\n    }\n\n    // If dashboard is in a different init phase it means it cancelled during service init\n    if (getState().dashboard.initPhase !== DashboardInitPhase.Services) {\n      return;\n    }\n\n    try {\n      dashboard.processRepeats();\n\n      // handle auto fix experimental feature\n      if (queryParams.autofitpanels) {\n        dashboard.autoFitPanels(window.innerHeight, queryParams.kiosk);\n      }\n\n      args.keybindingSrv.setupDashboardBindings(dashboard);\n    } catch (err) {\n      if (err instanceof Error) {\n        dispatch(notifyApp(createErrorNotification('Dashboard init failed', err)));\n      }\n      console.error(err);\n    }\n\n    // send open dashboard event\n    if (args.routeName !== DashboardRoutes.New) {\n      emitDashboardViewEvent(dashboard);\n\n      // Listen for changes on the current dashboard\n      dashboardWatcher.watch(dashboard.uid);\n    } else {\n      dashboardWatcher.leave();\n    }\n\n    // set week start\n    if (dashboard.weekStart !== '') {\n      setWeekStart(dashboard.weekStart);\n    } else {\n      setWeekStart(config.bootData.user.weekStart);\n    }\n\n    // Propagate an app-wide event about the dashboard being loaded\n    appEvents.publish(\n      new DashboardLoadedEvent({\n        dashboardId: dashboard.uid,\n        orgId: storeState.user.orgId,\n        userId: storeState.user.user?.id,\n        grafanaVersion: config.buildInfo.version,\n        queries: getQueriesByDatasource(dashboard.panels),\n      })\n    );\n\n    // yay we are done\n    dispatch(dashboardInitCompleted(dashboard));\n  };\n}\n\nexport function getNewDashboardModelData(\n  urlFolderUid?: string,\n  panelType?: string\n): { dashboard: any; meta: DashboardMeta } {\n  const panels = config.featureToggles.emptyDashboardPage\n    ? []\n    : [\n        {\n          type: panelType ?? 'add-panel',\n          gridPos: { x: 0, y: 0, w: 12, h: 9 },\n          title: 'Panel Title',\n        },\n      ];\n\n  const data = {\n    meta: {\n      canStar: false,\n      canShare: false,\n      canDelete: false,\n      isNew: true,\n      folderUid: '',\n    },\n    dashboard: {\n      title: 'New dashboard',\n      panels,\n    },\n  };\n\n  if (urlFolderUid) {\n    data.meta.folderUid = urlFolderUid;\n  }\n\n  return data;\n}\n\nconst DASHBOARD_FROM_LS_KEY = 'DASHBOARD_FROM_LS_KEY';\n\nexport function setDashboardToFetchFromLocalStorage(model: DashboardDTO) {\n  store.setObject(DASHBOARD_FROM_LS_KEY, model);\n}\n\nexport function removeDashboardToFetchFromLocalStorage() {\n  store.delete(DASHBOARD_FROM_LS_KEY);\n}\n","import { DataFrame } from '@grafana/data';\nimport { DataQuery, DataSourceRef } from '@grafana/schema';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport {\n  getNewDashboardModelData,\n  setDashboardToFetchFromLocalStorage,\n} from 'app/features/dashboard/state/initDashboard';\nimport { DashboardDTO, ExplorePanelData } from 'app/types';\n\nexport enum AddToDashboardError {\n  FETCH_DASHBOARD = 'fetch-dashboard',\n  SET_DASHBOARD_LS = 'set-dashboard-ls-error',\n}\n\ninterface AddPanelToDashboardOptions {\n  queries: DataQuery[];\n  queryResponse: ExplorePanelData;\n  datasource?: DataSourceRef;\n  dashboardUid?: string;\n}\n\nfunction createDashboard(): DashboardDTO {\n  const dto = getNewDashboardModelData();\n\n  // getNewDashboardModelData adds by default the \"add-panel\" panel. We don't want that.\n  dto.dashboard.panels = [];\n\n  return dto;\n}\n\nexport async function setDashboardInLocalStorage(options: AddPanelToDashboardOptions) {\n  const panelType = getPanelType(options.queries, options.queryResponse);\n  const panel = {\n    targets: options.queries,\n    type: panelType,\n    title: 'New Panel',\n    gridPos: { x: 0, y: 0, w: 12, h: 8 },\n    datasource: options.datasource,\n  };\n\n  let dto: DashboardDTO;\n\n  if (options.dashboardUid) {\n    try {\n      dto = await backendSrv.getDashboardByUid(options.dashboardUid);\n    } catch (e) {\n      throw AddToDashboardError.FETCH_DASHBOARD;\n    }\n  } else {\n    dto = createDashboard();\n  }\n\n  dto.dashboard.panels = [panel, ...(dto.dashboard.panels ?? [])];\n\n  try {\n    setDashboardToFetchFromLocalStorage(dto);\n  } catch {\n    throw AddToDashboardError.SET_DASHBOARD_LS;\n  }\n}\n\nconst isVisible = (query: DataQuery) => !query.hide;\nconst hasRefId = (refId: DataFrame['refId']) => (frame: DataFrame) => frame.refId === refId;\n\nfunction getPanelType(queries: DataQuery[], queryResponse: ExplorePanelData) {\n  for (const { refId } of queries.filter(isVisible)) {\n    const hasQueryRefId = hasRefId(refId);\n    if (queryResponse.flameGraphFrames.some(hasQueryRefId)) {\n      return 'flamegraph';\n    }\n    if (queryResponse.graphFrames.some(hasQueryRefId)) {\n      return 'timeseries';\n    }\n    if (queryResponse.logsFrames.some(hasQueryRefId)) {\n      return 'logs';\n    }\n    if (queryResponse.nodeGraphFrames.some(hasQueryRefId)) {\n      return 'nodeGraph';\n    }\n    if (queryResponse.traceFrames.some(hasQueryRefId)) {\n      return 'traces';\n    }\n  }\n\n  // falling back to table\n  return 'table';\n}\n","import { partial } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { DeepMap, FieldError, useForm } from 'react-hook-form';\n\nimport { locationUtil, SelectableValue } from '@grafana/data';\nimport { config, locationService, reportInteraction } from '@grafana/runtime';\nimport { Alert, Button, Field, InputControl, Modal, RadioButtonGroup } from '@grafana/ui';\nimport { DashboardPicker } from 'app/core/components/Select/DashboardPicker';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { removeDashboardToFetchFromLocalStorage } from 'app/features/dashboard/state/initDashboard';\nimport { ExploreId, AccessControlAction, useSelector } from 'app/types';\n\nimport { getExploreItemSelector } from '../state/selectors';\n\nimport { setDashboardInLocalStorage, AddToDashboardError } from './addToDashboard';\n\nenum SaveTarget {\n  NewDashboard = 'new-dashboard',\n  ExistingDashboard = 'existing-dashboard',\n}\n\ninterface SaveTargetDTO {\n  saveTarget: SaveTarget;\n}\ninterface SaveToNewDashboardDTO extends SaveTargetDTO {\n  saveTarget: SaveTarget.NewDashboard;\n}\n\ninterface SaveToExistingDashboard extends SaveTargetDTO {\n  saveTarget: SaveTarget.ExistingDashboard;\n  dashboardUid: string;\n}\n\ntype FormDTO = SaveToNewDashboardDTO | SaveToExistingDashboard;\n\nfunction assertIsSaveToExistingDashboardError(\n  errors: DeepMap<FormDTO, FieldError>\n): asserts errors is DeepMap<SaveToExistingDashboard, FieldError> {\n  // the shape of the errors object is always compatible with the type above, but we need to\n  // explicitly assert its type so that TS can narrow down FormDTO to SaveToExistingDashboard\n  // when we use it in the form.\n}\n\nfunction getDashboardURL(dashboardUid?: string) {\n  return dashboardUid ? `d/${dashboardUid}` : 'dashboard/new';\n}\n\nenum GenericError {\n  UNKNOWN = 'unknown-error',\n  NAVIGATION = 'navigation-error',\n}\n\ninterface SubmissionError {\n  error: AddToDashboardError | GenericError;\n  message: string;\n}\n\ninterface Props {\n  onClose: () => void;\n  exploreId: ExploreId;\n}\n\nexport const AddToDashboardModal = ({ onClose, exploreId }: Props) => {\n  const exploreItem = useSelector(getExploreItemSelector(exploreId))!;\n  const [submissionError, setSubmissionError] = useState<SubmissionError | undefined>();\n  const {\n    handleSubmit,\n    control,\n    formState: { errors },\n    watch,\n  } = useForm<FormDTO>({\n    defaultValues: { saveTarget: SaveTarget.NewDashboard },\n  });\n\n  const canCreateDashboard = contextSrv.hasAccess(AccessControlAction.DashboardsCreate, contextSrv.isEditor);\n  const canWriteDashboard = contextSrv.hasAccess(AccessControlAction.DashboardsWrite, contextSrv.isEditor);\n\n  const saveTargets: Array<SelectableValue<SaveTarget>> = [];\n  if (canCreateDashboard) {\n    saveTargets.push({\n      label: 'New dashboard',\n      value: SaveTarget.NewDashboard,\n    });\n  }\n  if (canWriteDashboard) {\n    saveTargets.push({\n      label: 'Existing dashboard',\n      value: SaveTarget.ExistingDashboard,\n    });\n  }\n\n  const saveTarget = saveTargets.length > 1 ? watch('saveTarget') : saveTargets[0].value;\n\n  const modalTitle = `Add panel to ${saveTargets.length > 1 ? 'dashboard' : saveTargets[0].label!.toLowerCase()}`;\n\n  const onSubmit = async (openInNewTab: boolean, data: FormDTO) => {\n    setSubmissionError(undefined);\n    const dashboardUid = data.saveTarget === SaveTarget.ExistingDashboard ? data.dashboardUid : undefined;\n\n    reportInteraction('e_2_d_submit', {\n      newTab: openInNewTab,\n      saveTarget: data.saveTarget,\n      queries: exploreItem.queries.length,\n    });\n\n    try {\n      await setDashboardInLocalStorage({\n        dashboardUid,\n        datasource: exploreItem.datasourceInstance?.getRef(),\n        queries: exploreItem.queries,\n        queryResponse: exploreItem.queryResponse,\n      });\n    } catch (error) {\n      switch (error) {\n        case AddToDashboardError.FETCH_DASHBOARD:\n          setSubmissionError({ error, message: 'Could not fetch dashboard information. Please try again.' });\n          break;\n        case AddToDashboardError.SET_DASHBOARD_LS:\n          setSubmissionError({ error, message: 'Could not add panel to dashboard. Please try again.' });\n          break;\n        default:\n          setSubmissionError({ error: GenericError.UNKNOWN, message: 'Something went wrong. Please try again.' });\n      }\n      return;\n    }\n\n    const dashboardURL = getDashboardURL(dashboardUid);\n    if (!openInNewTab) {\n      onClose();\n      locationService.push(locationUtil.stripBaseFromUrl(dashboardURL));\n      return;\n    }\n\n    const didTabOpen = !!global.open(config.appUrl + dashboardURL, '_blank');\n    if (!didTabOpen) {\n      setSubmissionError({\n        error: GenericError.NAVIGATION,\n        message: 'Could not navigate to the selected dashboard. Please try again.',\n      });\n      removeDashboardToFetchFromLocalStorage();\n      return;\n    }\n    onClose();\n  };\n\n  useEffect(() => {\n    reportInteraction('e_2_d_open');\n  }, []);\n\n  return (\n    <Modal title={modalTitle} onDismiss={onClose} isOpen>\n      <form>\n        {saveTargets.length > 1 && (\n          <InputControl\n            control={control}\n            render={({ field: { ref, ...field } }) => (\n              <Field label=\"Target dashboard\" description=\"Choose where to add the panel.\">\n                <RadioButtonGroup options={saveTargets} {...field} id=\"e2d-save-target\" />\n              </Field>\n            )}\n            name=\"saveTarget\"\n          />\n        )}\n\n        {saveTarget === SaveTarget.ExistingDashboard &&\n          (() => {\n            assertIsSaveToExistingDashboardError(errors);\n            return (\n              <InputControl\n                render={({ field: { ref, value, onChange, ...field } }) => (\n                  <Field\n                    label=\"Dashboard\"\n                    description=\"Select in which dashboard the panel will be created.\"\n                    error={errors.dashboardUid?.message}\n                    invalid={!!errors.dashboardUid}\n                  >\n                    <DashboardPicker\n                      {...field}\n                      inputId=\"e2d-dashboard-picker\"\n                      defaultOptions\n                      onChange={(d) => onChange(d?.uid)}\n                    />\n                  </Field>\n                )}\n                control={control}\n                name=\"dashboardUid\"\n                shouldUnregister\n                rules={{ required: { value: true, message: 'This field is required.' } }}\n              />\n            );\n          })()}\n\n        {submissionError && (\n          <Alert severity=\"error\" title=\"Error adding the panel\">\n            {submissionError.message}\n          </Alert>\n        )}\n\n        <Modal.ButtonRow>\n          <Button type=\"reset\" onClick={onClose} fill=\"outline\" variant=\"secondary\">\n            Cancel\n          </Button>\n          <Button\n            type=\"submit\"\n            variant=\"secondary\"\n            onClick={handleSubmit(partial(onSubmit, true))}\n            icon=\"external-link-alt\"\n          >\n            Open in new tab\n          </Button>\n          <Button type=\"submit\" variant=\"primary\" onClick={handleSubmit(partial(onSubmit, false))} icon=\"apps\">\n            Open dashboard\n          </Button>\n        </Modal.ButtonRow>\n      </form>\n    </Modal>\n  );\n};\n","import React, { useState } from 'react';\n\nimport { ToolbarButton } from '@grafana/ui';\nimport { ExploreId, useSelector } from 'app/types';\n\nimport { getExploreItemSelector } from '../state/selectors';\n\nimport { AddToDashboardModal } from './AddToDashboardModal';\n\ninterface Props {\n  exploreId: ExploreId;\n}\n\nexport const AddToDashboard = ({ exploreId }: Props) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const selectExploreItem = getExploreItemSelector(exploreId);\n  const explorePaneHasQueries = !!useSelector(selectExploreItem)?.queries?.length;\n\n  return (\n    <>\n      <ToolbarButton\n        icon=\"apps\"\n        variant=\"canvas\"\n        onClick={() => setIsOpen(true)}\n        aria-label=\"Add to dashboard\"\n        disabled={!explorePaneHasQueries}\n      >\n        Add to dashboard\n      </ToolbarButton>\n\n      {isOpen && <AddToDashboardModal onClose={() => setIsOpen(false)} exploreId={exploreId} />}\n    </>\n  );\n};\n"],"names":["emitDashboardViewEvent","dashboard","eventData","fetchDashboard","args","dispatch","getState","model","store","DASHBOARD_FROM_LS_KEY","removeDashboardToFetchFromLocalStorage","dashDTO","newUrl","dashboardUrl","currentPath","getNewDashboardModelData","path","err","getQueriesByDatasource","panels","queries","panel","target","initDashboard","DashboardModel","storeState","queryParams","timeSrv","dashboardUid","dashboardWatcher","config","urlFolderUid","panelType","data","setDashboardToFetchFromLocalStorage","AddToDashboardError","createDashboard","dto","setDashboardInLocalStorage","options","getPanelType","isVisible","query","hasRefId","refId","frame","queryResponse","hasQueryRefId","SaveTarget","assertIsSaveToExistingDashboardError","errors","getDashboardURL","GenericError","AddToDashboardModal","onClose","exploreId","exploreItem","submissionError","setSubmissionError","handleSubmit","control","watch","canCreateDashboard","canWriteDashboard","saveTargets","saveTarget","modalTitle","onSubmit","openInNewTab","error","dashboardURL","Modal","InputControl","ref","field","Field","RadioButtonGroup","value","onChange","DashboardPicker","d","Alert","Button","AddToDashboard","isOpen","setIsOpen","selectExploreItem","explorePaneHasQueries","ToolbarButton"],"sourceRoot":""}