{"version":3,"file":"ServerStats.2db84794c9427091210a.js","mappings":"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","sources":["webpack://grafana/./public/app/features/admin/state/apis.tsx","webpack://grafana/./public/app/features/admin/ServerStats.tsx","webpack://grafana/./public/app/features/plugins/admin/components/Loader.tsx"],"sourcesContent":["import { getBackendSrv } from '@grafana/runtime';\n\nexport interface ServerStat {\n  activeAdmins: number;\n  activeEditors: number;\n  activeSessions: number;\n  activeUsers: number;\n  activeViewers: number;\n  admins: number;\n  alerts: number;\n  dashboards: number;\n  datasources: number;\n  editors: number;\n  orgs: number;\n  playlists: number;\n  snapshots: number;\n  stars: number;\n  tags: number;\n  users: number;\n  viewers: number;\n}\n\nexport const getServerStats = async (): Promise<ServerStat | null> => {\n  return getBackendSrv()\n    .get('api/admin/stats')\n    .catch((err) => {\n      console.error(err);\n      return null;\n    });\n};\n","import { css } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { CardContainer, LinkButton, useStyles2 } from '@grafana/ui';\nimport { AccessControlAction } from 'app/types';\n\nimport { contextSrv } from '../../core/services/context_srv';\nimport { Loader } from '../plugins/admin/components/Loader';\n\nimport { getServerStats, ServerStat } from './state/apis';\n\nexport const ServerStats = () => {\n  const [stats, setStats] = useState<ServerStat | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const styles = useStyles2(getStyles);\n\n  const hasAccessToDataSources = contextSrv.hasAccess(AccessControlAction.DataSourcesRead, contextSrv.isGrafanaAdmin);\n  const hasAccessToAdminUsers = contextSrv.hasAccess(AccessControlAction.UsersRead, contextSrv.isGrafanaAdmin);\n\n  useEffect(() => {\n    if (contextSrv.hasAccess(AccessControlAction.ActionServerStatsRead, contextSrv.isGrafanaAdmin)) {\n      setIsLoading(true);\n      getServerStats().then((stats) => {\n        setStats(stats);\n        setIsLoading(false);\n      });\n    }\n  }, []);\n\n  if (!contextSrv.hasAccess(AccessControlAction.ActionServerStatsRead, contextSrv.isGrafanaAdmin)) {\n    return null;\n  }\n\n  return (\n    <>\n      <h2 className={styles.title}>Instance statistics</h2>\n      {isLoading ? (\n        <div className={styles.loader}>\n          <Loader text={'Loading instance stats...'} />\n        </div>\n      ) : stats ? (\n        <div className={styles.row}>\n          <StatCard\n            content={[\n              { name: 'Dashboards (starred)', value: `${stats.dashboards} (${stats.stars})` },\n              { name: 'Tags', value: stats.tags },\n              { name: 'Playlists', value: stats.playlists },\n              { name: 'Snapshots', value: stats.snapshots },\n            ]}\n            footer={\n              <LinkButton href={'/dashboards'} variant={'secondary'}>\n                Manage dashboards\n              </LinkButton>\n            }\n          />\n\n          <div className={styles.doubleRow}>\n            <StatCard\n              content={[{ name: 'Data sources', value: stats.datasources }]}\n              footer={\n                hasAccessToDataSources && (\n                  <LinkButton href={'/datasources'} variant={'secondary'}>\n                    Manage data sources\n                  </LinkButton>\n                )\n              }\n            />\n            <StatCard\n              content={[{ name: 'Alerts', value: stats.alerts }]}\n              footer={\n                <LinkButton href={'/alerting/list'} variant={'secondary'}>\n                  Alerts\n                </LinkButton>\n              }\n            />\n          </div>\n          <StatCard\n            content={[\n              { name: 'Organisations', value: stats.orgs },\n              { name: 'Users total', value: stats.users },\n              { name: 'Active users in last 30 days', value: stats.activeUsers },\n              { name: 'Active sessions', value: stats.activeSessions },\n            ]}\n            footer={\n              hasAccessToAdminUsers && (\n                <LinkButton href={'/admin/users'} variant={'secondary'}>\n                  Manage users\n                </LinkButton>\n              )\n            }\n          />\n        </div>\n      ) : (\n        <p className={styles.notFound}>No stats found.</p>\n      )}\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    title: css`\n      margin-bottom: ${theme.spacing(4)};\n    `,\n    row: css`\n      display: flex;\n      justify-content: space-between;\n      width: 100%;\n\n      & > div:not(:last-of-type) {\n        margin-right: ${theme.spacing(2)};\n      }\n\n      & > div {\n        width: 33.3%;\n      }\n    `,\n    doubleRow: css`\n      display: flex;\n      flex-direction: column;\n\n      & > div:first-of-type {\n        margin-bottom: ${theme.spacing(2)};\n      }\n    `,\n\n    loader: css`\n      height: 290px;\n    `,\n\n    notFound: css`\n      font-size: ${theme.typography.h6.fontSize};\n      text-align: center;\n      height: 290px;\n    `,\n  };\n};\n\ntype StatCardProps = {\n  content: Array<Record<string, number | string>>;\n  footer?: JSX.Element | boolean;\n};\n\nconst StatCard = ({ content, footer }: StatCardProps) => {\n  const styles = useStyles2(getCardStyles);\n  return (\n    <CardContainer className={styles.container} disableHover>\n      <div className={styles.inner}>\n        <div className={styles.content}>\n          {content.map((item) => {\n            return (\n              <div key={item.name} className={styles.row}>\n                <span>{item.name}</span>\n                <span>{item.value}</span>\n              </div>\n            );\n          })}\n        </div>\n        {footer && <div>{footer}</div>}\n      </div>\n    </CardContainer>\n  );\n};\n\nconst getCardStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      padding: ${theme.spacing(2)};\n    `,\n    inner: css`\n      display: flex;\n      flex-direction: column;\n      width: 100%;\n    `,\n    content: css`\n      flex: 1 0 auto;\n    `,\n    row: css`\n      display: flex;\n      justify-content: space-between;\n      width: 100%;\n      margin-bottom: ${theme.spacing(2)};\n      align-items: center;\n    `,\n  };\n};\n","import React from 'react';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\n\nexport interface Props {\n  text?: string;\n}\n\nexport const Loader = ({ text = 'Loading...' }: Props) => {\n  return (\n    <div className=\"page-loader-wrapper\">\n      <LoadingPlaceholder text={text} />\n    </div>\n  );\n};\n"],"names":["getServerStats","err","ServerStats","stats","setStats","isLoading","setIsLoading","styles","getStyles","hasAccessToDataSources","hasAccessToAdminUsers","Loader","StatCard","theme","content","footer","getCardStyles","CardContainer","item","text"],"sourceRoot":""}