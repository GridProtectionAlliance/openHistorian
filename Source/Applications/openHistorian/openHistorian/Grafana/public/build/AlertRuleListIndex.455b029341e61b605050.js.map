{"version":3,"file":"AlertRuleListIndex.455b029341e61b605050.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/hooks/ruleGroup/useDeleteRuleGroup.ts","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaRuleFolderExporter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaRuleGroupExporter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/ReorderRuleGroupModal.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RulesGroup.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/useCombinedGroupNamespace.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/CloudRules.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaRulesExporter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/GrafanaRules.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleListGroupView.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleListStateSection.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-list/RuleList.v1.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleListStateView.tsx","webpack://grafana/./public/app/features/alerting/unified/RuleList.tsx","webpack://grafana/./public/app/features/alerting/unified/components/Authorize.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/NeedHelpInfo.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/RuleEditorSection.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/ActionIcon.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/MultipleDataSourcePicker.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/Filter/RulesFilter.v1.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/Filter/RulesFilter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/NoRulesCTA.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleListErrors.tsx","webpack://grafana/./public/app/features/alerting/unified/plugins/useAlertingHomePageExtensions.ts","webpack://grafana/./node_modules/react-use/esm/useInterval.js"],"sourcesContent":["import { dispatch } from 'app/store/store';\nimport { RuleGroupIdentifier } from 'app/types/unified-alerting';\n\nimport { alertRuleApi } from '../../api/alertRuleApi';\nimport { featureDiscoveryApi } from '../../api/featureDiscoveryApi';\nimport { fetchPromAndRulerRulesAction } from '../../state/actions';\nimport { useAsync } from '../useAsync';\n\nimport { RulerNotSupportedError } from './useProduceNewRuleGroup';\n\nconst { useDeleteRuleGroupFromNamespaceMutation } = alertRuleApi;\nconst { useLazyDiscoverDsFeaturesQuery } = featureDiscoveryApi;\n\nexport function useDeleteRuleGroup() {\n  const [deleteRuleGroup] = useDeleteRuleGroupFromNamespaceMutation();\n  const [discoverDataSourceFeature] = useLazyDiscoverDsFeaturesQuery();\n\n  return useAsync(async (ruleGroupIdentifier: RuleGroupIdentifier) => {\n    const { dataSourceName, namespaceName, groupName } = ruleGroupIdentifier;\n\n    const { rulerConfig } = await discoverDataSourceFeature({ rulesSourceName: dataSourceName }).unwrap();\n    if (!rulerConfig) {\n      throw RulerNotSupportedError(dataSourceName);\n    }\n\n    const result = await deleteRuleGroup({ rulerConfig, namespace: namespaceName, group: groupName }).unwrap();\n\n    // @TODO remove this once we can use tags to invalidate\n    await dispatch(fetchPromAndRulerRulesAction({ rulesSourceName: dataSourceName }));\n\n    return result;\n  });\n}\n","import { useState } from 'react';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\n\nimport { FolderDTO } from '../../../../../types';\nimport { alertRuleApi } from '../../api/alertRuleApi';\n\nimport { FileExportPreview } from './FileExportPreview';\nimport { GrafanaExportDrawer } from './GrafanaExportDrawer';\nimport { allGrafanaExportProviders, ExportFormats } from './providers';\n\ninterface GrafanaRuleFolderExporterProps {\n  folder: FolderDTO;\n  onClose: () => void;\n}\n\nexport function GrafanaRuleFolderExporter({ folder, onClose }: GrafanaRuleFolderExporterProps) {\n  const [activeTab, setActiveTab] = useState<ExportFormats>('yaml');\n\n  return (\n    <GrafanaExportDrawer\n      title={`Export ${folder.title} rules`}\n      activeTab={activeTab}\n      onTabChange={setActiveTab}\n      onClose={onClose}\n      formatProviders={Object.values(allGrafanaExportProviders)}\n    >\n      <GrafanaRuleFolderExportPreview folder={folder} exportFormat={activeTab} onClose={onClose} />\n    </GrafanaExportDrawer>\n  );\n}\n\ninterface GrafanaRuleFolderExportPreviewProps {\n  folder: FolderDTO;\n  exportFormat: ExportFormats;\n  onClose: () => void;\n}\n\nfunction GrafanaRuleFolderExportPreview({ folder, exportFormat, onClose }: GrafanaRuleFolderExportPreviewProps) {\n  const { currentData: exportFolderDefinition = '', isFetching } = alertRuleApi.endpoints.exportRules.useQuery({\n    folderUid: folder.uid,\n    format: exportFormat,\n  });\n\n  if (isFetching) {\n    return <LoadingPlaceholder text=\"Loading....\" />;\n  }\n\n  const downloadFileName = `${folder.title}-${folder.uid}`;\n\n  return (\n    <FileExportPreview\n      format={exportFormat}\n      textDefinition={exportFolderDefinition}\n      downloadFileName={downloadFileName}\n      onClose={onClose}\n    />\n  );\n}\n","import { useState } from 'react';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\n\nimport { alertRuleApi } from '../../api/alertRuleApi';\n\nimport { FileExportPreview } from './FileExportPreview';\nimport { GrafanaExportDrawer } from './GrafanaExportDrawer';\nimport { allGrafanaExportProviders, ExportFormats } from './providers';\n\ninterface GrafanaRuleGroupExporterProps {\n  folderUid: string;\n  groupName: string;\n  onClose: () => void;\n}\n\nexport function GrafanaRuleGroupExporter({ folderUid, groupName, onClose }: GrafanaRuleGroupExporterProps) {\n  const [activeTab, setActiveTab] = useState<ExportFormats>('yaml');\n\n  return (\n    <GrafanaExportDrawer\n      title={`Export ${groupName} rules`}\n      activeTab={activeTab}\n      onTabChange={setActiveTab}\n      onClose={onClose}\n      formatProviders={Object.values(allGrafanaExportProviders)}\n    >\n      <GrafanaRuleGroupExportPreview\n        folderUid={folderUid}\n        groupName={groupName}\n        exportFormat={activeTab}\n        onClose={onClose}\n      />\n    </GrafanaExportDrawer>\n  );\n}\n\ninterface GrafanaRuleGroupExportPreviewProps {\n  folderUid: string;\n  groupName: string;\n  exportFormat: ExportFormats;\n  onClose: () => void;\n}\n\nfunction GrafanaRuleGroupExportPreview({\n  folderUid,\n  groupName,\n  exportFormat,\n  onClose,\n}: GrafanaRuleGroupExportPreviewProps) {\n  const { currentData: ruleGroupTextDefinition = '', isFetching } = alertRuleApi.endpoints.exportRules.useQuery({\n    folderUid,\n    group: groupName,\n    format: exportFormat,\n  });\n\n  if (isFetching) {\n    return <LoadingPlaceholder text=\"Loading....\" />;\n  }\n\n  return (\n    <FileExportPreview\n      format={exportFormat}\n      textDefinition={ruleGroupTextDefinition}\n      downloadFileName={groupName}\n      onClose={onClose}\n    />\n  );\n}\n","import { css } from '@emotion/css';\nimport {\n  DragDropContext,\n  Draggable,\n  DraggableProvided,\n  Droppable,\n  DroppableProvided,\n  DropResult,\n} from '@hello-pangea/dnd';\nimport cx from 'classnames';\nimport { produce } from 'immer';\nimport { useCallback, useEffect, useState } from 'react';\nimport * as React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Badge, Button, Icon, Modal, Tooltip, useStyles2 } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\nimport { dispatch, getState } from 'app/store/store';\nimport { CombinedRuleGroup, CombinedRuleNamespace, RuleGroupIdentifier } from 'app/types/unified-alerting';\nimport { RulerRuleDTO } from 'app/types/unified-alerting-dto';\n\nimport { alertRuleApi } from '../../api/alertRuleApi';\nimport { useReorderRuleForRuleGroup } from '../../hooks/ruleGroup/useUpdateRuleGroup';\nimport { isLoading } from '../../hooks/useAsync';\nimport { swapItems, SwapOperation } from '../../reducers/ruler/ruleGroups';\nimport { fetchRulerRulesAction, getDataSourceRulerConfig } from '../../state/actions';\nimport { isCloudRulesSource } from '../../utils/datasource';\nimport { hashRulerRule } from '../../utils/rule-id';\nimport {\n  isAlertingRulerRule,\n  isGrafanaRulerRule,\n  isRecordingRulerRule,\n  rulesSourceToDataSourceName,\n} from '../../utils/rules';\n\ninterface ModalProps {\n  namespace: CombinedRuleNamespace;\n  group: CombinedRuleGroup;\n  onClose: () => void;\n  folderUid?: string;\n}\n\ntype RulerRuleWithUID = { uid: string } & RulerRuleDTO;\n\nexport const ReorderCloudGroupModal = (props: ModalProps) => {\n  const styles = useStyles2(getStyles);\n  const { group, namespace, onClose, folderUid } = props;\n  const [operations, setOperations] = useState<Array<[number, number]>>([]);\n\n  const [reorderRulesInGroup, reorderState] = useReorderRuleForRuleGroup();\n  const isUpdating = isLoading(reorderState);\n\n  // The list of rules might have been filtered before we get to this reordering modal\n  // We need to grab the full (unfiltered) list\n  const dataSourceName = rulesSourceToDataSourceName(namespace.rulesSource);\n  const rulerConfig = getDataSourceRulerConfig(getState, dataSourceName);\n  const { currentData: ruleGroup, isLoading: loadingRules } = alertRuleApi.endpoints.getRuleGroupForNamespace.useQuery(\n    {\n      rulerConfig,\n      namespace: folderUid ?? namespace.name,\n      group: group.name,\n    },\n    { refetchOnMountOrArgChange: true }\n  );\n\n  const [rulesList, setRulesList] = useState<RulerRuleDTO[]>([]);\n\n  useEffect(() => {\n    if (ruleGroup) {\n      setRulesList(ruleGroup?.rules);\n    }\n  }, [ruleGroup]);\n\n  const onDragEnd = useCallback(\n    (result: DropResult) => {\n      // check for no-ops so we don't update the group unless we have changes\n      if (!result.destination) {\n        return;\n      }\n\n      const swapOperation: SwapOperation = [result.source.index, result.destination.index];\n\n      // add old index and new index to the modifications object\n      setOperations(\n        produce(operations, (draft) => {\n          draft.push(swapOperation);\n        })\n      );\n\n      // re-order the rules list for the UI rendering\n      const newOrderedRules = produce(rulesList, (draft) => {\n        swapItems(draft, swapOperation);\n      });\n      setRulesList(newOrderedRules);\n    },\n    [rulesList, operations]\n  );\n\n  const updateRulesOrder = useCallback(async () => {\n    const ruleGroupIdentifier: RuleGroupIdentifier = {\n      dataSourceName: rulesSourceToDataSourceName(namespace.rulesSource),\n      groupName: group.name,\n      namespaceName: folderUid ?? namespace.name,\n    };\n\n    await reorderRulesInGroup.execute(ruleGroupIdentifier, operations);\n    // TODO: Remove once RTKQ is more prevalently used\n    await dispatch(fetchRulerRulesAction({ rulesSourceName: dataSourceName }));\n    onClose();\n  }, [\n    namespace.rulesSource,\n    namespace.name,\n    group.name,\n    folderUid,\n    reorderRulesInGroup,\n    operations,\n    dataSourceName,\n    onClose,\n  ]);\n\n  // assign unique but stable identifiers to each (alerting / recording) rule\n  const rulesWithUID: RulerRuleWithUID[] = rulesList.map((rulerRule) => ({\n    ...rulerRule,\n    uid: hashRulerRule(rulerRule),\n  }));\n\n  return (\n    <Modal\n      className={styles.modal}\n      isOpen={true}\n      title={<ModalHeader namespace={namespace} group={group} />}\n      onDismiss={onClose}\n      onClickBackdrop={onClose}\n    >\n      {loadingRules && 'Loading...'}\n      {rulesWithUID.length > 0 && (\n        <>\n          <DragDropContext onDragEnd={onDragEnd}>\n            <Droppable\n              droppableId=\"alert-list\"\n              mode=\"standard\"\n              renderClone={(provided, _snapshot, rubric) => (\n                <ListItem provided={provided} rule={rulesWithUID[rubric.source.index]} isClone />\n              )}\n            >\n              {(droppableProvided: DroppableProvided) => (\n                <div\n                  ref={droppableProvided.innerRef}\n                  className={cx(styles.listContainer, isUpdating && styles.disabled)}\n                  {...droppableProvided.droppableProps}\n                >\n                  {rulesWithUID.map((rule, index) => (\n                    <Draggable key={rule.uid} draggableId={rule.uid} index={index} isDragDisabled={isUpdating}>\n                      {(provided: DraggableProvided) => <ListItem key={rule.uid} provided={provided} rule={rule} />}\n                    </Draggable>\n                  ))}\n                  {droppableProvided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          </DragDropContext>\n          <Modal.ButtonRow>\n            <Button variant=\"secondary\" fill=\"outline\" onClick={onClose}>\n              <Trans i18nKey={'common.cancel'}>Cancel</Trans>\n            </Button>\n            <Button onClick={() => updateRulesOrder()} disabled={isUpdating}>\n              <Trans i18nKey={'common.save'}>Save</Trans>\n            </Button>\n          </Modal.ButtonRow>\n        </>\n      )}\n    </Modal>\n  );\n};\n\ninterface ListItemProps extends React.HTMLAttributes<HTMLDivElement> {\n  provided: DraggableProvided;\n  rule: RulerRuleDTO;\n  isClone?: boolean;\n  isDragging?: boolean;\n}\n\nconst ListItem = ({ provided, rule, isClone = false, isDragging = false }: ListItemProps) => {\n  const styles = useStyles2(getStyles);\n\n  // @TODO does this work with Grafana-managed recording rules too? Double check that.\n  return (\n    <div\n      data-testid=\"reorder-alert-rule\"\n      className={cx(styles.listItem, isClone && 'isClone', isDragging && 'isDragging')}\n      ref={provided.innerRef}\n      {...provided.draggableProps}\n      {...provided.dragHandleProps}\n    >\n      {isGrafanaRulerRule(rule) && <div className={styles.listItemName}>{rule.grafana_alert.title}</div>}\n      {isRecordingRulerRule(rule) && (\n        <>\n          <div className={styles.listItemName}>{rule.record}</div>\n          <Badge text=\"Recording\" color=\"purple\" />\n        </>\n      )}\n      {isAlertingRulerRule(rule) && <div className={styles.listItemName}>{rule.alert}</div>}\n      <Icon name=\"draggabledots\" />\n    </div>\n  );\n};\n\ninterface ModalHeaderProps {\n  namespace: CombinedRuleNamespace;\n  group: CombinedRuleGroup;\n}\n\nconst ModalHeader = ({ namespace, group }: ModalHeaderProps) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.header}>\n      <Icon name=\"folder\" />\n      {isCloudRulesSource(namespace.rulesSource) && (\n        <Tooltip content={namespace.rulesSource.name} placement=\"top\">\n          <img\n            alt={namespace.rulesSource.meta.name}\n            className={styles.dataSourceIcon}\n            src={namespace.rulesSource.meta.info.logos.small}\n          />\n        </Tooltip>\n      )}\n      <span>{namespace.name}</span>\n      <Icon name=\"angle-right\" />\n      <span>{group.name}</span>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  modal: css({\n    maxWidth: '640px',\n    maxHeight: '80%',\n    overflow: 'hidden',\n  }),\n  listItem: css({\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n\n    gap: theme.spacing(),\n\n    background: theme.colors.background.primary,\n    color: theme.colors.text.secondary,\n\n    borderBottom: `solid 1px ${theme.colors.border.medium}`,\n    padding: `${theme.spacing(1)} ${theme.spacing(2)}`,\n\n    '&:last-child': {\n      borderBottom: 'none',\n    },\n\n    '&.isClone': {\n      border: `solid 1px ${theme.colors.primary.shade}`,\n    },\n  }),\n  listContainer: css({\n    userSelect: 'none',\n    border: `solid 1px ${theme.colors.border.medium}`,\n  }),\n  disabled: css({\n    opacity: '0.5',\n    pointerEvents: 'none',\n  }),\n  listItemName: css({\n    flex: 1,\n\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n  }),\n  header: css({\n    display: 'flex',\n    alignItems: 'center',\n\n    gap: theme.spacing(1),\n  }),\n  dataSourceIcon: css({\n    width: theme.spacing(2),\n    height: theme.spacing(2),\n  }),\n});\n","import { css } from '@emotion/css';\nimport pluralize from 'pluralize';\nimport React, { useEffect, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Badge, ConfirmModal, Icon, Spinner, Stack, Tooltip, useStyles2 } from '@grafana/ui';\nimport { CombinedRuleGroup, CombinedRuleNamespace, RuleGroupIdentifier, RulesSource } from 'app/types/unified-alerting';\n\nimport { LogMessages, logInfo } from '../../Analytics';\nimport { useDeleteRuleGroup } from '../../hooks/ruleGroup/useDeleteRuleGroup';\nimport { useFolder } from '../../hooks/useFolder';\nimport { useHasRuler } from '../../hooks/useHasRuler';\nimport { useRulesAccess } from '../../utils/accessControlHooks';\nimport { getRulesSourceName, GRAFANA_RULES_SOURCE_NAME, isCloudRulesSource } from '../../utils/datasource';\nimport { makeFolderLink, makeFolderSettingsLink } from '../../utils/misc';\nimport { isFederatedRuleGroup, isGrafanaRulerRule } from '../../utils/rules';\nimport { CollapseToggle } from '../CollapseToggle';\nimport { RuleLocation } from '../RuleLocation';\nimport { GrafanaRuleFolderExporter } from '../export/GrafanaRuleFolderExporter';\nimport { GrafanaRuleGroupExporter } from '../export/GrafanaRuleGroupExporter';\nimport { decodeGrafanaNamespace } from '../expressions/util';\n\nimport { ActionIcon } from './ActionIcon';\nimport { EditCloudGroupModal } from './EditRuleGroupModal';\nimport { ReorderCloudGroupModal } from './ReorderRuleGroupModal';\nimport { RuleGroupStats } from './RuleStats';\nimport { RulesTable } from './RulesTable';\n\ntype ViewMode = 'grouped' | 'list';\n\ninterface Props {\n  namespace: CombinedRuleNamespace;\n  group: CombinedRuleGroup;\n  expandAll: boolean;\n  viewMode: ViewMode;\n}\n\nexport const RulesGroup = React.memo(({ group, namespace, expandAll, viewMode }: Props) => {\n  const { rulesSource } = namespace;\n  const [deleteRuleGroup] = useDeleteRuleGroup();\n  const styles = useStyles2(getStyles);\n\n  const [isEditingGroup, setIsEditingGroup] = useState(false);\n  const [isDeletingGroup, setIsDeletingGroup] = useState(false);\n  const [isReorderingGroup, setIsReorderingGroup] = useState(false);\n  const [isExporting, setIsExporting] = useState<'group' | 'folder' | undefined>(undefined);\n  const [isCollapsed, setIsCollapsed] = useState(!expandAll);\n\n  const { canEditRules } = useRulesAccess();\n\n  useEffect(() => {\n    setIsCollapsed(!expandAll);\n  }, [expandAll]);\n\n  const { hasRuler, rulerRulesLoaded } = useHasRuler(namespace.rulesSource);\n  const rulerRule = group.rules[0]?.rulerRule;\n  const folderUID = (rulerRule && isGrafanaRulerRule(rulerRule) && rulerRule.grafana_alert.namespace_uid) || undefined;\n  const { folder } = useFolder(folderUID);\n\n  // group \"is deleting\" if rules source has ruler, but this group has no rules that are in ruler\n  const isDeleting = hasRuler && rulerRulesLoaded && !group.rules.find((rule) => !!rule.rulerRule);\n  const isFederated = isFederatedRuleGroup(group);\n\n  // check if group has provisioned items\n  const isProvisioned = group.rules.some((rule) => {\n    return isGrafanaRulerRule(rule.rulerRule) && rule.rulerRule.grafana_alert.provenance;\n  });\n\n  // check what view mode we are in\n  const isListView = viewMode === 'list';\n  const isGroupView = viewMode === 'grouped';\n\n  const deleteGroup = async () => {\n    const namespaceName = decodeGrafanaNamespace(namespace).name;\n    const groupName = group.name;\n    const dataSourceName = getRulesSourceName(namespace.rulesSource);\n\n    const ruleGroupIdentifier: RuleGroupIdentifier = { namespaceName, groupName, dataSourceName };\n    await deleteRuleGroup.execute(ruleGroupIdentifier);\n    setIsDeletingGroup(false);\n  };\n\n  const actionIcons: React.ReactNode[] = [];\n\n  // for grafana, link to folder views\n  if (isDeleting) {\n    actionIcons.push(\n      <Stack key=\"is-deleting\">\n        <Spinner />\n        deleting\n      </Stack>\n    );\n  } else if (rulesSource === GRAFANA_RULES_SOURCE_NAME) {\n    if (folderUID) {\n      const baseUrl = makeFolderLink(folderUID);\n      if (folder?.canSave) {\n        if (isGroupView && !isProvisioned) {\n          actionIcons.push(\n            <ActionIcon\n              aria-label=\"edit rule group\"\n              data-testid=\"edit-group\"\n              key=\"edit\"\n              icon=\"pen\"\n              tooltip=\"edit rule group\"\n              onClick={() => setIsEditingGroup(true)}\n            />\n          );\n          actionIcons.push(\n            <ActionIcon\n              data-testid=\"reorder-group\"\n              key=\"reorder\"\n              icon=\"exchange-alt\"\n              tooltip=\"reorder rules\"\n              className={styles.rotate90}\n              onClick={() => setIsReorderingGroup(true)}\n            />\n          );\n        }\n        if (isListView) {\n          actionIcons.push(\n            <ActionIcon\n              aria-label=\"go to folder\"\n              key=\"goto\"\n              icon=\"folder-open\"\n              tooltip=\"go to folder\"\n              to={baseUrl}\n              target=\"__blank\"\n            />\n          );\n\n          if (folder?.canAdmin) {\n            actionIcons.push(\n              <ActionIcon\n                aria-label=\"manage permissions\"\n                key=\"manage-perms\"\n                icon=\"lock\"\n                tooltip=\"manage permissions\"\n                to={baseUrl + '/permissions'}\n                target=\"__blank\"\n              />\n            );\n          }\n        }\n      }\n      if (folder) {\n        if (isListView) {\n          actionIcons.push(\n            <ActionIcon\n              aria-label=\"export rule folder\"\n              data-testid=\"export-folder\"\n              key=\"export-folder\"\n              icon=\"download-alt\"\n              tooltip=\"Export rules folder\"\n              onClick={() => setIsExporting('folder')}\n            />\n          );\n        } else if (isGroupView) {\n          actionIcons.push(\n            <ActionIcon\n              aria-label=\"export rule group\"\n              data-testid=\"export-group\"\n              key=\"export-group\"\n              icon=\"download-alt\"\n              tooltip=\"Export rule group\"\n              onClick={() => setIsExporting('group')}\n            />\n          );\n        }\n      }\n    }\n  } else if (canEditRules(rulesSource.name) && hasRuler) {\n    if (!isFederated) {\n      actionIcons.push(\n        <ActionIcon\n          aria-label=\"edit rule group\"\n          data-testid=\"edit-group\"\n          key=\"edit\"\n          icon=\"pen\"\n          tooltip=\"edit rule group\"\n          onClick={() => setIsEditingGroup(true)}\n        />\n      );\n      actionIcons.push(\n        <ActionIcon\n          data-testid=\"reorder-group\"\n          key=\"reorder\"\n          icon=\"exchange-alt\"\n          tooltip=\"reorder rules\"\n          className={styles.rotate90}\n          onClick={() => setIsReorderingGroup(true)}\n        />\n      );\n    }\n\n    actionIcons.push(\n      <ActionIcon\n        aria-label=\"delete rule group\"\n        data-testid=\"delete-group\"\n        key=\"delete-group\"\n        icon=\"trash-alt\"\n        tooltip=\"delete rule group\"\n        onClick={() => setIsDeletingGroup(true)}\n      />\n    );\n  }\n\n  // ungrouped rules are rules that are in the \"default\" group name\n  const groupName = isListView ? (\n    <RuleLocation namespace={decodeGrafanaNamespace(namespace).name} />\n  ) : (\n    <RuleLocation namespace={decodeGrafanaNamespace(namespace).name} group={group.name} />\n  );\n\n  const closeEditModal = (saved = false) => {\n    if (!saved) {\n      logInfo(LogMessages.leavingRuleGroupEdit);\n    }\n    setIsEditingGroup(false);\n  };\n\n  return (\n    <div className={styles.wrapper} data-testid=\"rule-group\">\n      <div className={styles.header} data-testid=\"rule-group-header\">\n        <CollapseToggle\n          size=\"sm\"\n          className={styles.collapseToggle}\n          isCollapsed={isCollapsed}\n          onToggle={setIsCollapsed}\n          data-testid={selectors.components.AlertRules.groupToggle}\n        />\n        <FolderIcon isCollapsed={isCollapsed} />\n        <CloudSourceLogo rulesSource={rulesSource} />\n        {\n          // eslint-disable-next-line\n          <div className={styles.groupName} onClick={() => setIsCollapsed(!isCollapsed)}>\n            {isFederated && <Badge color=\"purple\" text=\"Federated\" />} {groupName}\n          </div>\n        }\n        <div className={styles.spacer} />\n        <div className={styles.headerStats}>\n          <RuleGroupStats group={group} />\n        </div>\n        {isProvisioned && (\n          <>\n            <div className={styles.actionsSeparator}>|</div>\n            <div className={styles.actionIcons}>\n              <Badge color=\"purple\" text=\"Provisioned\" />\n            </div>\n          </>\n        )}\n        {!!actionIcons.length && (\n          <>\n            <div className={styles.actionsSeparator}>|</div>\n            <div className={styles.actionIcons}>\n              <Stack gap={0.5}>{actionIcons}</Stack>\n            </div>\n          </>\n        )}\n      </div>\n      {!isCollapsed && (\n        <RulesTable\n          showSummaryColumn={true}\n          className={styles.rulesTable}\n          showGuidelines={true}\n          showNextEvaluationColumn={Boolean(group.interval)}\n          rules={group.rules}\n        />\n      )}\n      {isEditingGroup && (\n        <EditCloudGroupModal\n          namespace={namespace}\n          group={group}\n          onClose={() => closeEditModal()}\n          folderUrl={folder?.canEdit ? makeFolderSettingsLink(folder.uid) : undefined}\n          folderUid={folderUID}\n        />\n      )}\n      {isReorderingGroup && (\n        <ReorderCloudGroupModal\n          group={group}\n          folderUid={folderUID}\n          namespace={namespace}\n          onClose={() => setIsReorderingGroup(false)}\n        />\n      )}\n      <ConfirmModal\n        isOpen={isDeletingGroup}\n        title=\"Delete group\"\n        body={\n          <div>\n            <p>\n              Deleting &quot;<strong>{group.name}</strong>&quot; will permanently remove the group and{' '}\n              {group.rules.length} alert {pluralize('rule', group.rules.length)} belonging to it.\n            </p>\n            <p>Are you sure you want to delete this group?</p>\n          </div>\n        }\n        onConfirm={deleteGroup}\n        onDismiss={() => setIsDeletingGroup(false)}\n        confirmText=\"Delete\"\n      />\n      {folder && isExporting === 'folder' && (\n        <GrafanaRuleFolderExporter folder={folder} onClose={() => setIsExporting(undefined)} />\n      )}\n      {folder && isExporting === 'group' && (\n        <GrafanaRuleGroupExporter\n          folderUid={folder.uid}\n          groupName={group.name}\n          onClose={() => setIsExporting(undefined)}\n        />\n      )}\n    </div>\n  );\n});\n\nRulesGroup.displayName = 'RulesGroup';\n\n// It's a simple component but we render 80 of them on the list page it needs to be fast\n// The Tooltip component is expensive to render and the rulesSource doesn't change often\n// so memoization seems to bring a lot of benefit here\nconst CloudSourceLogo = React.memo(({ rulesSource }: { rulesSource: RulesSource | string }) => {\n  const styles = useStyles2(getStyles);\n\n  if (isCloudRulesSource(rulesSource)) {\n    return (\n      <Tooltip content={rulesSource.name} placement=\"top\">\n        <img alt={rulesSource.meta.name} className={styles.dataSourceIcon} src={rulesSource.meta.info.logos.small} />\n      </Tooltip>\n    );\n  }\n\n  return null;\n});\n\nCloudSourceLogo.displayName = 'CloudSourceLogo';\n\n// We render a lot of these on the list page, and the Icon component does quite a bit of work\n// to render its contents\nconst FolderIcon = React.memo(({ isCollapsed }: { isCollapsed: boolean }) => {\n  return <Icon name={isCollapsed ? 'folder' : 'folder-open'} />;\n});\n\nFolderIcon.displayName = 'FolderIcon';\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrapper: css({}),\n    header: css({\n      display: 'flex',\n      flexDirection: 'row',\n      alignItems: 'center',\n      padding: `${theme.spacing(1)} ${theme.spacing(1)} ${theme.spacing(1)} 0`,\n      flexWrap: 'nowrap',\n      borderBottom: `1px solid ${theme.colors.border.weak}`,\n\n      '&:hover': {\n        backgroundColor: theme.components.table.rowHoverBackground,\n      },\n    }),\n    headerStats: css({\n      flexShrink: 0,\n\n      span: {\n        verticalAlign: 'middle',\n      },\n\n      [theme.breakpoints.down('sm')]: {\n        order: 2,\n        width: '100%',\n        paddingLeft: theme.spacing(1),\n      },\n    }),\n    groupName: css({\n      marginLeft: theme.spacing(1),\n      marginBottom: 0,\n      cursor: 'pointer',\n\n      whiteSpace: 'nowrap',\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n    }),\n    spacer: css({\n      flex: 1,\n    }),\n    collapseToggle: css({\n      background: 'none',\n      border: 'none',\n      marginTop: `-${theme.spacing(1)}`,\n      marginBottom: `-${theme.spacing(1)}`,\n\n      svg: {\n        marginBottom: 0,\n      },\n    }),\n    dataSourceIcon: css({\n      width: theme.spacing(2),\n      height: theme.spacing(2),\n      marginLeft: theme.spacing(2),\n    }),\n    dataSourceOrigin: css({\n      marginRight: '1em',\n      color: theme.colors.text.disabled,\n    }),\n    actionsSeparator: css({\n      margin: `0 ${theme.spacing(2)}`,\n    }),\n    actionIcons: css({\n      width: '80px',\n      alignItems: 'center',\n\n      flexShrink: 0,\n    }),\n    rulesTable: css({\n      margin: theme.spacing(2, 0),\n    }),\n    rotate90: css({\n      transform: 'rotate(90deg)',\n    }),\n  };\n};\n","import { useMemo } from 'react';\n\nimport { CombinedRuleNamespace } from '../../../../../types/unified-alerting';\n\nexport function useCombinedGroupNamespace(namespaces: CombinedRuleNamespace[]) {\n  return useMemo(\n    () =>\n      namespaces.flatMap((ns) =>\n        ns.groups.map((g) => ({\n          namespace: ns,\n          group: g,\n        }))\n      ),\n    [namespaces]\n  );\n}\n","import { css } from '@emotion/css';\nimport pluralize from 'pluralize';\nimport { useMemo } from 'react';\nimport { useLocation } from 'react-router-dom-v5-compat';\n\nimport { GrafanaTheme2, urlUtil } from '@grafana/data';\nimport { LinkButton, LoadingPlaceholder, Pagination, Spinner, Text, useStyles2 } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\nimport { CombinedRuleNamespace } from 'app/types/unified-alerting';\n\nimport { DEFAULT_PER_PAGE_PAGINATION } from '../../../../../core/constants';\nimport { AlertingAction, useAlertingAbility } from '../../hooks/useAbilities';\nimport { usePagination } from '../../hooks/usePagination';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { getPaginationStyles } from '../../styles/pagination';\nimport { getRulesDataSources, getRulesSourceUid } from '../../utils/datasource';\nimport { isAsyncRequestStatePending } from '../../utils/redux';\n\nimport { RulesGroup } from './RulesGroup';\nimport { useCombinedGroupNamespace } from './useCombinedGroupNamespace';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n  expandAll: boolean;\n}\n\nexport const CloudRules = ({ namespaces, expandAll }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const dsConfigs = useUnifiedAlertingSelector((state) => state.dataSources);\n  const promRules = useUnifiedAlertingSelector((state) => state.promRules);\n  const rulesDataSources = useMemo(getRulesDataSources, []);\n  const groupsWithNamespaces = useCombinedGroupNamespace(namespaces);\n\n  const dataSourcesLoading = useMemo(\n    () =>\n      rulesDataSources.filter(\n        (ds) => isAsyncRequestStatePending(promRules[ds.name]) || isAsyncRequestStatePending(dsConfigs[ds.name])\n      ),\n    [promRules, dsConfigs, rulesDataSources]\n  );\n\n  const hasSomeResults = rulesDataSources.some((ds) => Boolean(promRules[ds.name]?.result?.length));\n\n  const hasDataSourcesConfigured = rulesDataSources.length > 0;\n  const hasDataSourcesLoading = dataSourcesLoading.length > 0;\n  const hasNamespaces = namespaces.length > 0;\n\n  const { numberOfPages, onPageChange, page, pageItems } = usePagination(\n    groupsWithNamespaces,\n    1,\n    DEFAULT_PER_PAGE_PAGINATION\n  );\n\n  return (\n    <section className={styles.wrapper}>\n      <div className={styles.sectionHeader}>\n        <div className={styles.headerRow}>\n          <Text element=\"h2\" variant=\"h5\">\n            <Trans i18nKey=\"alerting.list-view.section.dataSourceManaged.title\">Data source-managed</Trans>\n          </Text>\n          {dataSourcesLoading.length ? (\n            <LoadingPlaceholder\n              className={styles.loader}\n              text={`Loading rules from ${dataSourcesLoading.length} ${pluralize('source', dataSourcesLoading.length)}`}\n            />\n          ) : (\n            <div />\n          )}\n          <CreateRecordingRuleButton />\n        </div>\n      </div>\n\n      {pageItems.map(({ group, namespace }) => {\n        return (\n          <RulesGroup\n            group={group}\n            key={`${getRulesSourceUid(namespace.rulesSource)}-${namespace.name}-${group.name}`}\n            namespace={namespace}\n            expandAll={expandAll}\n            viewMode={'grouped'}\n          />\n        );\n      })}\n\n      {!hasDataSourcesConfigured && <p>There are no Prometheus or Loki data sources configured.</p>}\n      {hasDataSourcesConfigured && !hasDataSourcesLoading && !hasNamespaces && <p>No rules found.</p>}\n      {!hasSomeResults && hasDataSourcesLoading && <Spinner size=\"xl\" className={styles.spinner} />}\n\n      <Pagination\n        className={styles.pagination}\n        currentPage={page}\n        numberOfPages={numberOfPages}\n        onNavigate={onPageChange}\n        hideWhenSinglePage\n      />\n    </section>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  loader: css({\n    marginBottom: 0,\n  }),\n  sectionHeader: css({\n    display: 'flex',\n    justifyContent: 'space-between',\n  }),\n  wrapper: css({\n    marginBottom: theme.spacing(4),\n  }),\n  spinner: css({\n    textAlign: 'center',\n    padding: theme.spacing(2),\n  }),\n  pagination: getPaginationStyles(theme),\n  headerRow: css({\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    width: '100%',\n    marginBottom: theme.spacing(1),\n  }),\n});\n\nexport function CreateRecordingRuleButton() {\n  const [createCloudRuleSupported, createCloudRuleAllowed] = useAlertingAbility(AlertingAction.CreateExternalAlertRule);\n\n  const location = useLocation();\n\n  const canCreateCloudRules = createCloudRuleSupported && createCloudRuleAllowed;\n\n  if (canCreateCloudRules) {\n    return (\n      <LinkButton\n        key=\"new-recording-rule\"\n        href={urlUtil.renderUrl(`alerting/new/recording`, {\n          returnTo: location.pathname + location.search,\n        })}\n        tooltip=\"Create new Data source-managed recording rule\"\n        icon=\"plus\"\n        variant=\"secondary\"\n      >\n        New recording rule\n      </LinkButton>\n    );\n  }\n  return null;\n}\n","import { useState } from 'react';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\n\nimport { alertRuleApi } from '../../api/alertRuleApi';\n\nimport { FileExportPreview } from './FileExportPreview';\nimport { GrafanaExportDrawer } from './GrafanaExportDrawer';\nimport { allGrafanaExportProviders, ExportFormats } from './providers';\n\ninterface GrafanaRulesExporterProps {\n  onClose: () => void;\n}\n\nexport function GrafanaRulesExporter({ onClose }: GrafanaRulesExporterProps) {\n  const [activeTab, setActiveTab] = useState<ExportFormats>('yaml');\n\n  return (\n    <GrafanaExportDrawer\n      activeTab={activeTab}\n      onTabChange={setActiveTab}\n      onClose={onClose}\n      formatProviders={Object.values(allGrafanaExportProviders)}\n    >\n      <GrafanaRulesExportPreview exportFormat={activeTab} onClose={onClose} />\n    </GrafanaExportDrawer>\n  );\n}\n\ninterface GrafanaRulesExportPreviewProps {\n  exportFormat: ExportFormats;\n  onClose: () => void;\n}\n\nfunction GrafanaRulesExportPreview({ exportFormat, onClose }: GrafanaRulesExportPreviewProps) {\n  const { currentData: rulesDefinition = '', isFetching } = alertRuleApi.endpoints.exportRules.useQuery({\n    format: exportFormat,\n  });\n\n  const downloadFileName = `alert-rules-${new Date().getTime()}`;\n\n  if (isFetching) {\n    return <LoadingPlaceholder text=\"Loading....\" />;\n  }\n\n  return (\n    <FileExportPreview\n      format={exportFormat}\n      textDefinition={rulesDefinition}\n      downloadFileName={downloadFileName}\n      onClose={onClose}\n    />\n  );\n}\n","import { css } from '@emotion/css';\nimport { useToggle } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Button, LinkButton, LoadingPlaceholder, Pagination, Spinner, Stack, Text, useStyles2 } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { Trans, t } from 'app/core/internationalization';\nimport { CombinedRuleNamespace } from 'app/types/unified-alerting';\n\nimport { DEFAULT_PER_PAGE_PAGINATION } from '../../../../../core/constants';\nimport { LogMessages, logInfo } from '../../Analytics';\nimport { AlertingAction, useAlertingAbility } from '../../hooks/useAbilities';\nimport { flattenGrafanaManagedRules } from '../../hooks/useCombinedRuleNamespaces';\nimport { usePagination } from '../../hooks/usePagination';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { getPaginationStyles } from '../../styles/pagination';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { initialAsyncRequestState } from '../../utils/redux';\nimport { createRelativeUrl } from '../../utils/url';\nimport { GrafanaRulesExporter } from '../export/GrafanaRulesExporter';\n\nimport { RulesGroup } from './RulesGroup';\nimport { useCombinedGroupNamespace } from './useCombinedGroupNamespace';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n  expandAll: boolean;\n}\n\nexport const GrafanaRules = ({ namespaces, expandAll }: Props) => {\n  const styles = useStyles2(getStyles);\n  const [queryParams] = useQueryParams();\n\n  const { prom, ruler } = useUnifiedAlertingSelector((state) => ({\n    prom: state.promRules[GRAFANA_RULES_SOURCE_NAME] || initialAsyncRequestState,\n    ruler: state.rulerRules[GRAFANA_RULES_SOURCE_NAME] || initialAsyncRequestState,\n  }));\n\n  const loading = prom.loading || ruler.loading;\n  const hasResult = !!prom.result || !!ruler.result;\n\n  const wantsListView = queryParams.view === 'list';\n  const namespacesFormat = wantsListView ? flattenGrafanaManagedRules(namespaces) : namespaces;\n\n  const groupsWithNamespaces = useCombinedGroupNamespace(namespacesFormat);\n\n  const { numberOfPages, onPageChange, page, pageItems } = usePagination(\n    groupsWithNamespaces,\n    1,\n    DEFAULT_PER_PAGE_PAGINATION\n  );\n\n  const [exportRulesSupported, exportRulesAllowed] = useAlertingAbility(AlertingAction.ExportGrafanaManagedRules);\n  const canExportRules = exportRulesSupported && exportRulesAllowed;\n\n  const [showExportDrawer, toggleShowExportDrawer] = useToggle(false);\n  const hasGrafanaAlerts = namespaces.length > 0;\n\n  const grafanaRecordingRulesEnabled = config.featureToggles.grafanaManagedRecordingRules;\n\n  return (\n    <section className={styles.wrapper}>\n      <div className={styles.sectionHeader}>\n        <div className={styles.headerRow}>\n          <Text element=\"h2\" variant=\"h5\">\n            <Trans i18nKey=\"alerting.list-view.section.grafanaManaged.title\">Grafana-managed</Trans>\n          </Text>\n          {loading ? (\n            <LoadingPlaceholder\n              className={styles.loader}\n              text={t('alerting.list-view.section.grafanaManaged.loading', 'Loading...')}\n            />\n          ) : (\n            <div />\n          )}\n          <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"flex-end\">\n            {hasGrafanaAlerts && canExportRules && (\n              <Button\n                aria-label=\"export all grafana rules\"\n                data-testid=\"export-all-grafana-rules\"\n                icon=\"download-alt\"\n                tooltip=\"Export all Grafana-managed rules\"\n                onClick={toggleShowExportDrawer}\n                variant=\"secondary\"\n              >\n                <Trans i18nKey=\"alerting.list-view.section.grafanaManaged.export-rules\">Export rules</Trans>\n              </Button>\n            )}\n            {grafanaRecordingRulesEnabled && (\n              <LinkButton\n                href={createRelativeUrl('/alerting/new/grafana-recording', {\n                  returnTo: '/alerting/list' + location.search,\n                })}\n                icon=\"plus\"\n                variant=\"secondary\"\n                tooltip=\"Create new Grafana-managed recording rule\"\n                onClick={() => logInfo(LogMessages.grafanaRecording)}\n              >\n                <Trans i18nKey=\"alerting.list-view.section.grafanaManaged.new-recording-rule\">New recording rule</Trans>\n              </LinkButton>\n            )}\n          </Stack>\n        </div>\n      </div>\n\n      {pageItems.map(({ group, namespace }) => (\n        <RulesGroup\n          group={group}\n          key={`${namespace.name}-${group.name}`}\n          namespace={namespace}\n          expandAll={expandAll}\n          viewMode={wantsListView ? 'list' : 'grouped'}\n        />\n      ))}\n      {hasResult && namespacesFormat?.length === 0 && <p>No rules found.</p>}\n      {!hasResult && loading && <Spinner size=\"xl\" className={styles.spinner} />}\n      <Pagination\n        className={styles.pagination}\n        currentPage={page}\n        numberOfPages={numberOfPages}\n        onNavigate={onPageChange}\n        hideWhenSinglePage\n      />\n      {canExportRules && showExportDrawer && <GrafanaRulesExporter onClose={toggleShowExportDrawer} />}\n    </section>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  loader: css({\n    marginBottom: 0,\n  }),\n  sectionHeader: css({\n    display: 'flex',\n    justifyContent: 'space-between',\n    marginBottom: theme.spacing(1),\n  }),\n  wrapper: css({\n    marginBottom: theme.spacing(4),\n  }),\n  spinner: css({\n    textAlign: 'center',\n    padding: theme.spacing(2),\n  }),\n  pagination: getPaginationStyles(theme),\n  headerRow: css({\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    width: '100%',\n    flexDirection: 'row',\n  }),\n});\n","import { useEffect, useMemo } from 'react';\n\nimport { CombinedRuleNamespace } from 'app/types/unified-alerting';\n\nimport { LogMessages, logInfo } from '../../Analytics';\nimport { AlertingAction } from '../../hooks/useAbilities';\nimport { isCloudRulesSource, isGrafanaRulesSource } from '../../utils/datasource';\nimport { Authorize } from '../Authorize';\n\nimport { CloudRules } from './CloudRules';\nimport { GrafanaRules } from './GrafanaRules';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n  expandAll: boolean;\n}\n\nexport const RuleListGroupView = ({ namespaces, expandAll }: Props) => {\n  const [grafanaNamespaces, cloudNamespaces] = useMemo(() => {\n    const sorted = namespaces\n      .map((namespace) => ({\n        ...namespace,\n        groups: namespace.groups.sort((a, b) => a.name.localeCompare(b.name)),\n      }))\n      .sort((a, b) => a.name.localeCompare(b.name));\n    return [\n      sorted.filter((ns) => isGrafanaRulesSource(ns.rulesSource)),\n      sorted.filter((ns) => isCloudRulesSource(ns.rulesSource)),\n    ];\n  }, [namespaces]);\n\n  useEffect(() => {\n    logInfo(LogMessages.loadedList);\n  }, []);\n\n  return (\n    <>\n      <Authorize actions={[AlertingAction.ViewAlertRule]}>\n        <GrafanaRules namespaces={grafanaNamespaces} expandAll={expandAll} />\n      </Authorize>\n      <Authorize actions={[AlertingAction.ViewExternalAlertRule]}>\n        <CloudRules namespaces={cloudNamespaces} expandAll={expandAll} />\n      </Authorize>\n    </>\n  );\n};\n","import { css } from '@emotion/css';\nimport { useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { CombinedRule } from 'app/types/unified-alerting';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\n\nimport { alertStateToReadable } from '../../utils/rules';\nimport { CollapseToggle } from '../CollapseToggle';\n\nimport { RulesTable } from './RulesTable';\n\ninterface Props {\n  rules: CombinedRule[];\n  state: PromAlertingRuleState;\n  defaultCollapsed?: boolean;\n}\n\nexport const RuleListStateSection = ({ rules, state, defaultCollapsed = false }: Props) => {\n  const [collapsed, setCollapsed] = useState(defaultCollapsed);\n  const styles = useStyles2(getStyles);\n  return (\n    <>\n      <h4 className={styles.header}>\n        <CollapseToggle\n          className={styles.collapseToggle}\n          size=\"xxl\"\n          isCollapsed={collapsed}\n          onToggle={() => setCollapsed(!collapsed)}\n        />\n        {alertStateToReadable(state)} ({rules.length})\n      </h4>\n      {!collapsed && <RulesTable className={styles.rulesTable} rules={rules} showGroupColumn={true} />}\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  collapseToggle: css({\n    verticalAlign: 'middle',\n  }),\n  header: css({\n    marginTop: theme.spacing(2),\n  }),\n  rulesTable: css({\n    marginTop: theme.spacing(3),\n  }),\n});\n","import { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useLocation } from 'react-router-dom-v5-compat';\nimport { useAsyncFn, useInterval } from 'react-use';\n\nimport { urlUtil } from '@grafana/data';\nimport { Button, LinkButton, Stack, withErrorBoundary } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { useDispatch } from 'app/types';\n\nimport { CombinedRuleNamespace } from '../../../../../types/unified-alerting';\nimport { LogMessages, logInfo, trackRuleListNavigation } from '../../Analytics';\nimport { shouldUsePrometheusRulesPrimary } from '../../featureToggles';\nimport { AlertingAction, useAlertingAbility } from '../../hooks/useAbilities';\nimport { useCombinedRuleNamespaces } from '../../hooks/useCombinedRuleNamespaces';\nimport { useFilteredRules, useRulesFilter } from '../../hooks/useFilteredRules';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { fetchAllPromAndRulerRulesAction, fetchAllPromRulesAction, fetchRulerRulesAction } from '../../state/actions';\nimport { RULE_LIST_POLL_INTERVAL_MS } from '../../utils/constants';\nimport { getAllRulesSourceNames, GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { AlertingPageWrapper } from '../AlertingPageWrapper';\nimport RulesFilter from '../rules/Filter/RulesFilter';\nimport { NoRulesSplash } from '../rules/NoRulesCTA';\nimport { INSTANCES_DISPLAY_LIMIT } from '../rules/RuleDetails';\nimport { RuleListErrors } from '../rules/RuleListErrors';\nimport { RuleListGroupView } from '../rules/RuleListGroupView';\nimport { RuleListStateView } from '../rules/RuleListStateView';\nimport { RuleStats } from '../rules/RuleStats';\n\nconst VIEWS = {\n  groups: RuleListGroupView,\n  state: RuleListStateView,\n};\n\n// make sure we ask for 1 more so we show the \"show x more\" button\nconst LIMIT_ALERTS = INSTANCES_DISPLAY_LIMIT + 1;\n\nconst prometheusRulesPrimary = shouldUsePrometheusRulesPrimary();\n\nconst RuleListV1 = () => {\n  const dispatch = useDispatch();\n  const rulesDataSourceNames = useMemo(getAllRulesSourceNames, []);\n  const [expandAll, setExpandAll] = useState(false);\n\n  const onFilterCleared = useCallback(() => setExpandAll(false), []);\n\n  const [queryParams] = useQueryParams();\n  const { filterState, hasActiveFilters } = useRulesFilter();\n\n  const queryParamView = queryParams.view as keyof typeof VIEWS;\n  const view = VIEWS[queryParamView] ? queryParamView : 'groups';\n\n  const ViewComponent = VIEWS[view];\n\n  const promRuleRequests = useUnifiedAlertingSelector((state) => state.promRules);\n  const rulerRuleRequests = useUnifiedAlertingSelector((state) => state.rulerRules);\n\n  const loading = rulesDataSourceNames.some(\n    (name) => promRuleRequests[name]?.loading || rulerRuleRequests[name]?.loading\n  );\n\n  const promRequests = Object.entries(promRuleRequests);\n  const rulerRequests = Object.entries(rulerRuleRequests);\n\n  const allPromLoaded = promRequests.every(\n    ([_, state]) => state.dispatched && (state?.result !== undefined || state?.error !== undefined)\n  );\n  const allRulerLoaded = rulerRequests.every(\n    ([_, state]) => state.dispatched && (state?.result !== undefined || state?.error !== undefined)\n  );\n\n  const allPromEmpty = promRequests.every(([_, state]) => state.dispatched && state?.result?.length === 0);\n\n  const allRulerEmpty = rulerRequests.every(([_, state]) => {\n    const rulerRules = Object.entries(state?.result ?? {});\n    const noRules = rulerRules.every(([_, result]) => result?.length === 0);\n    return noRules && state.dispatched;\n  });\n\n  const limitAlerts = hasActiveFilters ? undefined : LIMIT_ALERTS;\n  // Trigger data refresh only when the RULE_LIST_POLL_INTERVAL_MS elapsed since the previous load FINISHED\n  const [_, fetchRules] = useAsyncFn(async () => {\n    if (!loading) {\n      if (prometheusRulesPrimary) {\n        await dispatch(fetchRulerRulesAction({ rulesSourceName: GRAFANA_RULES_SOURCE_NAME }));\n        await dispatch(fetchAllPromRulesAction(false, { limitAlerts }));\n      } else {\n        await dispatch(fetchAllPromAndRulerRulesAction(false, { limitAlerts }));\n      }\n    }\n  }, [loading, limitAlerts, dispatch]);\n\n  useEffect(() => {\n    trackRuleListNavigation().catch(() => {});\n  }, []);\n\n  // fetch rules, then poll every RULE_LIST_POLL_INTERVAL_MS\n  useEffect(() => {\n    if (prometheusRulesPrimary) {\n      dispatch(fetchRulerRulesAction({ rulesSourceName: GRAFANA_RULES_SOURCE_NAME }));\n      dispatch(fetchAllPromRulesAction(false, { limitAlerts }));\n    } else {\n      dispatch(fetchAllPromAndRulerRulesAction(false, { limitAlerts }));\n    }\n  }, [dispatch, limitAlerts]);\n  useInterval(fetchRules, RULE_LIST_POLL_INTERVAL_MS);\n\n  // Show splash only when we loaded all of the data sources and none of them has alerts\n  const hasNoAlertRulesCreatedYet =\n    allPromLoaded && allPromEmpty && promRequests.length > 0 && allRulerEmpty && allRulerLoaded;\n  const hasAlertRulesCreated = !hasNoAlertRulesCreatedYet;\n\n  const combinedNamespaces: CombinedRuleNamespace[] = useCombinedRuleNamespaces();\n  const filteredNamespaces = useFilteredRules(combinedNamespaces, filterState);\n  return (\n    // We don't want to show the Loading... indicator for the whole page.\n    // We show separate indicators for Grafana-managed and Cloud rules\n    <AlertingPageWrapper navId=\"alert-list\" isLoading={false} actions={hasAlertRulesCreated && <CreateAlertButton />}>\n      <RuleListErrors />\n      <RulesFilter onClear={onFilterCleared} />\n      {hasAlertRulesCreated && (\n        <Stack direction=\"row\" alignItems=\"center\">\n          {view === 'groups' && hasActiveFilters && (\n            <Button\n              icon={expandAll ? 'angle-double-up' : 'angle-double-down'}\n              variant=\"secondary\"\n              onClick={() => setExpandAll(!expandAll)}\n            >\n              {expandAll ? 'Collapse all' : 'Expand all'}\n            </Button>\n          )}\n          <RuleStats namespaces={filteredNamespaces} />\n        </Stack>\n      )}\n      {hasNoAlertRulesCreatedYet && <NoRulesSplash />}\n      {hasAlertRulesCreated && <ViewComponent expandAll={expandAll} namespaces={filteredNamespaces} />}\n    </AlertingPageWrapper>\n  );\n};\n\nexport default withErrorBoundary(RuleListV1, { style: 'page' });\n\nexport function CreateAlertButton() {\n  const [createRuleSupported, createRuleAllowed] = useAlertingAbility(AlertingAction.CreateAlertRule);\n  const [createCloudRuleSupported, createCloudRuleAllowed] = useAlertingAbility(AlertingAction.CreateExternalAlertRule);\n\n  const location = useLocation();\n\n  const canCreateCloudRules = createCloudRuleSupported && createCloudRuleAllowed;\n\n  const canCreateGrafanaRules = createRuleSupported && createRuleAllowed;\n\n  if (canCreateGrafanaRules || canCreateCloudRules) {\n    return (\n      <LinkButton\n        href={urlUtil.renderUrl('alerting/new/alerting', { returnTo: location.pathname + location.search })}\n        icon=\"plus\"\n        onClick={() => logInfo(LogMessages.alertRuleFromScratch)}\n      >\n        New alert rule\n      </LinkButton>\n    );\n  }\n  return null;\n}\n","import { useMemo } from 'react';\n\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { CombinedRule, CombinedRuleNamespace } from 'app/types/unified-alerting';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\n\nimport { getFiltersFromUrlParams } from '../../utils/misc';\nimport { isAlertingRule } from '../../utils/rules';\n\nimport { RuleListStateSection } from './RuleListStateSection';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n}\n\ntype GroupedRules = Record<PromAlertingRuleState, CombinedRule[]>;\n\nexport const RuleListStateView = ({ namespaces }: Props) => {\n  const filters = getFiltersFromUrlParams(useQueryParams()[0]);\n\n  const groupedRules = useMemo(() => {\n    const result: GroupedRules = {\n      [PromAlertingRuleState.Firing]: [],\n      [PromAlertingRuleState.Inactive]: [],\n      [PromAlertingRuleState.Pending]: [],\n    };\n\n    namespaces.forEach((namespace) =>\n      namespace.groups.forEach((group) =>\n        group.rules.forEach((rule) => {\n          // We might hit edge cases where there type = alerting, but there is no state.\n          // In this case, we shouldn't try to group these alerts in the state view\n          // Even though we handle this at the API layer, this is a last catch point for any edge cases\n          if (rule.promRule && isAlertingRule(rule.promRule) && rule.promRule.state) {\n            result[rule.promRule.state].push(rule);\n          }\n        })\n      )\n    );\n\n    Object.values(result).forEach((rules) => rules.sort((a, b) => a.name.localeCompare(b.name)));\n\n    return result;\n  }, [namespaces]);\n  return (\n    <>\n      {(!filters.alertState || filters.alertState === PromAlertingRuleState.Firing) && (\n        <RuleListStateSection state={PromAlertingRuleState.Firing} rules={groupedRules[PromAlertingRuleState.Firing]} />\n      )}\n      {(!filters.alertState || filters.alertState === PromAlertingRuleState.Pending) && (\n        <RuleListStateSection\n          state={PromAlertingRuleState.Pending}\n          rules={groupedRules[PromAlertingRuleState.Pending]}\n        />\n      )}\n      {(!filters.alertState || filters.alertState === PromAlertingRuleState.Inactive) && (\n        <RuleListStateSection\n          defaultCollapsed={filters.alertState !== PromAlertingRuleState.Inactive}\n          state={PromAlertingRuleState.Inactive}\n          rules={groupedRules[PromAlertingRuleState.Inactive]}\n        />\n      )}\n    </>\n  );\n};\n","import { lazy, Suspense } from 'react';\n\nimport { config } from '@grafana/runtime';\n\nimport RuleListV1 from './components/rule-list/RuleList.v1';\nconst RuleListV2 = lazy(() => import('./components/rule-list/RuleList.v2'));\n\nconst RuleList = () => {\n  const newView = config.featureToggles.alertingListViewV2;\n\n  return <Suspense>{newView ? <RuleListV2 /> : <RuleListV1 />}</Suspense>;\n};\n\nexport default RuleList;\n","import { chain, filter } from 'lodash';\nimport { PropsWithChildren } from 'react';\n\nimport {\n  Abilities,\n  Action,\n  AlertingAction,\n  AlertmanagerAction,\n  useAlertingAbilities,\n  useAllAlertmanagerAbilities,\n} from '../hooks/useAbilities';\n\ninterface AuthorizeProps extends PropsWithChildren {\n  actions: AlertmanagerAction[] | AlertingAction[];\n}\n\nexport const Authorize = ({ actions, children }: AuthorizeProps) => {\n  const alertmanagerActions = filter(actions, isAlertmanagerAction) as AlertmanagerAction[];\n  const alertSourceActions = filter(actions, isAlertingAction) as AlertingAction[];\n\n  if (alertmanagerActions.length) {\n    return <AuthorizeAlertmanager actions={alertmanagerActions}>{children}</AuthorizeAlertmanager>;\n  }\n\n  if (alertSourceActions.length) {\n    return <AuthorizeAlertsource actions={alertSourceActions}>{children}</AuthorizeAlertsource>;\n  }\n\n  return null;\n};\n\ninterface ActionsProps<T extends Action> extends PropsWithChildren {\n  actions: T[];\n}\n\nconst AuthorizeAlertmanager = ({ actions, children }: ActionsProps<AlertmanagerAction>) => {\n  const alertmanagerAbilties = useAllAlertmanagerAbilities();\n  const allowed = actionsAllowed(alertmanagerAbilties, actions);\n\n  if (allowed) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n\nconst AuthorizeAlertsource = ({ actions, children }: ActionsProps<AlertingAction>) => {\n  const alertSourceAbilities = useAlertingAbilities();\n  const allowed = actionsAllowed(alertSourceAbilities, actions);\n\n  if (allowed) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n\n// TODO add some authorize helper components for alert source and individual alert rules\n\n// check if some action is allowed from the abilities\nfunction actionsAllowed<T extends Action>(abilities: Abilities<T>, actions: T[]) {\n  return chain(abilities)\n    .pick(actions)\n    .values()\n    .value()\n    .some(([_supported, allowed]) => allowed === true);\n}\n\nfunction isAlertmanagerAction(action: AlertmanagerAction) {\n  return Object.values(AlertmanagerAction).includes(action);\n}\n\nfunction isAlertingAction(action: AlertingAction) {\n  return Object.values(AlertingAction).includes(action);\n}\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, Text, Toggletip, useStyles2, Stack } from '@grafana/ui';\n\ninterface NeedHelpInfoProps {\n  contentText: string | JSX.Element;\n  externalLink?: string;\n  linkText?: string;\n  title?: string;\n}\nexport function NeedHelpInfo({ contentText, externalLink, linkText, title = 'Need help?' }: NeedHelpInfoProps) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Toggletip\n      content={<div className={styles.mutedText}>{contentText}</div>}\n      title={\n        <Stack gap={0.5} direction=\"row\" alignItems=\"center\">\n          <Icon name=\"question-circle\" />\n          {title}\n        </Stack>\n      }\n      footer={\n        externalLink ? (\n          <a href={externalLink} target=\"_blank\" rel=\"noreferrer\">\n            <Stack direction=\"row\" gap={0.5} alignItems=\"center\">\n              <Text color=\"link\">\n                {linkText} <Icon size=\"sm\" name=\"external-link-alt\" />\n              </Text>\n            </Stack>\n          </a>\n        ) : undefined\n      }\n      closeButton={true}\n      placement=\"bottom-start\"\n    >\n      <div className={styles.helpInfo}>\n        <Stack direction=\"row\" alignItems=\"center\" gap={0.5}>\n          <Icon name=\"question-circle\" size=\"sm\" />\n          <Text variant=\"bodySmall\" color=\"primary\">\n            Need help?\n          </Text>\n        </Stack>\n      </div>\n    </Toggletip>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  mutedText: css({\n    color: theme.colors.text.secondary,\n    fontSize: theme.typography.size.sm,\n  }),\n  helpInfo: css({\n    cursor: 'pointer',\n    textDecoration: 'underline',\n  }),\n});\n","import { css, cx } from '@emotion/css';\nimport * as React from 'react';\nimport { ReactElement } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { FieldSet, InlineSwitch, Stack, Text, useStyles2 } from '@grafana/ui';\n\nexport interface RuleEditorSectionProps {\n  title: string;\n  stepNo: number;\n  description?: string | ReactElement;\n  fullWidth?: boolean;\n  switchMode?: {\n    isAdvancedMode: boolean;\n    setAdvancedMode: (isAdvanced: boolean) => void;\n  };\n}\n\nexport const RuleEditorSection = ({\n  title,\n  stepNo,\n  children,\n  fullWidth = false,\n  description,\n  switchMode,\n}: React.PropsWithChildren<RuleEditorSectionProps>) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <div className={styles.parent}>\n      <FieldSet\n        className={cx(fullWidth && styles.fullWidth)}\n        label={\n          <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\">\n            <Text variant=\"h3\">\n              {stepNo}. {title}\n            </Text>\n            {switchMode && (\n              <Text variant=\"bodySmall\">\n                <InlineSwitch\n                  id=\"query-and-expressions-advanced-options\"\n                  value={switchMode.isAdvancedMode}\n                  onChange={(event) => {\n                    switchMode.setAdvancedMode(event.currentTarget.checked);\n                  }}\n                  label=\"Advanced options\"\n                  showLabel\n                  transparent\n                  className={styles.reverse}\n                />\n              </Text>\n            )}\n          </Stack>\n        }\n      >\n        <Stack direction=\"column\">\n          {description && <div className={styles.description}>{description}</div>}\n          {children}\n        </Stack>\n      </FieldSet>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  parent: css({\n    display: 'flex',\n    flexDirection: 'row',\n    border: `solid 1px ${theme.colors.border.weak}`,\n    borderRadius: theme.shape.radius.default,\n    padding: `${theme.spacing(2)} ${theme.spacing(3)}`,\n  }),\n  description: css({\n    marginTop: `-${theme.spacing(2)}`,\n  }),\n  fullWidth: css({\n    width: '100%',\n  }),\n  reverse: css({\n    flexDirection: 'row-reverse',\n    gap: theme.spacing(1),\n  }),\n});\n","import { IconName, Tooltip, LinkButton, Button } from '@grafana/ui';\nimport { PopoverContent, TooltipPlacement } from '@grafana/ui/src/components/Tooltip';\n\ninterface Props {\n  tooltip: PopoverContent;\n  icon: IconName;\n  className?: string;\n  tooltipPlacement?: TooltipPlacement;\n  to?: string;\n  target?: string;\n  onClick?: () => void;\n  'data-testid'?: string;\n}\n\nexport const ActionIcon = ({\n  tooltip,\n  icon,\n  to,\n  target,\n  onClick,\n  className,\n  tooltipPlacement = 'top',\n  ...rest\n}: Props) => {\n  const ariaLabel = typeof tooltip === 'string' ? tooltip : undefined;\n\n  return (\n    <Tooltip content={tooltip} placement={tooltipPlacement}>\n      {to ? (\n        <LinkButton\n          variant=\"secondary\"\n          fill=\"text\"\n          icon={icon}\n          href={to}\n          size=\"sm\"\n          target={target}\n          {...rest}\n          aria-label={ariaLabel}\n        />\n      ) : (\n        <Button\n          className={className}\n          variant=\"secondary\"\n          fill=\"text\"\n          size=\"sm\"\n          icon={icon}\n          type=\"button\"\n          onClick={onClick}\n          {...rest}\n          aria-label={ariaLabel}\n        />\n      )}\n    </Tooltip>\n  );\n};\n","import { useState } from 'react';\nimport { PopValueActionMeta, RemoveValueActionMeta } from 'react-select';\n\nimport {\n  DataSourceInstanceSettings,\n  getDataSourceUID,\n  isUnsignedPluginSignature,\n  SelectableValue,\n} from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { getDataSourceSrv, DataSourcePickerState, DataSourcePickerProps } from '@grafana/runtime';\nimport { ExpressionDatasourceRef } from '@grafana/runtime/src/utils/DataSourceWithBackend';\nimport { ActionMeta, Stack, PluginSignatureBadge, MultiSelect } from '@grafana/ui';\n\nimport { isDataSourceManagingAlerts } from '../../utils/datasource';\n\nexport interface MultipleDataSourcePickerProps extends Omit<DataSourcePickerProps, 'onChange' | 'current'> {\n  onChange: (ds: DataSourceInstanceSettings, action: 'add' | 'remove') => void;\n  current: string[] | undefined;\n}\n\nexport const MultipleDataSourcePicker = (props: MultipleDataSourcePickerProps) => {\n  const dataSourceSrv = getDataSourceSrv();\n\n  const [state, setState] = useState<DataSourcePickerState>();\n\n  const onChange = (items: Array<SelectableValue<string>>, actionMeta: ActionMeta) => {\n    if (actionMeta.action === 'clear' && props.onClear) {\n      props.onClear();\n      return;\n    }\n\n    const selectedItem = items[items.length - 1];\n\n    let dataSourceName, action: 'add' | 'remove';\n\n    if (actionMeta.action === 'pop-value' || actionMeta.action === 'remove-value') {\n      const castedActionMeta:\n        | RemoveValueActionMeta<SelectableValue<string>>\n        | PopValueActionMeta<SelectableValue<string>> = actionMeta;\n      dataSourceName = castedActionMeta.removedValue?.value;\n      action = 'remove';\n    } else {\n      dataSourceName = selectedItem.value;\n      action = 'add';\n    }\n\n    const dsSettings = dataSourceSrv.getInstanceSettings(dataSourceName);\n\n    if (dsSettings) {\n      props.onChange(dsSettings, action);\n      setState({ error: undefined });\n    }\n  };\n\n  const getCurrentValue = (): Array<SelectableValue<string>> | undefined => {\n    const { current, hideTextValue, noDefault } = props;\n    if (!current && noDefault) {\n      return;\n    }\n\n    return current?.map((dataSourceName: string) => {\n      const ds = dataSourceSrv.getInstanceSettings(dataSourceName);\n      if (ds) {\n        return {\n          label: ds.name.slice(0, 37),\n          value: ds.name,\n          imgUrl: ds.meta.info.logos.small,\n          hideText: hideTextValue,\n          meta: ds.meta,\n        };\n      }\n\n      const uid = getDataSourceUID(dataSourceName);\n\n      if (uid === ExpressionDatasourceRef.uid || uid === ExpressionDatasourceRef.name) {\n        return { label: uid, value: uid, hideText: hideTextValue };\n      }\n\n      return {\n        label: (uid ?? 'no name') + ' - not found',\n        value: uid ?? undefined,\n        imgUrl: '',\n        hideText: hideTextValue,\n      };\n    });\n  };\n\n  const getDataSourceOptions = () => {\n    const { alerting, tracing, metrics, mixed, dashboard, variables, annotations, pluginId, type, filter, logs } =\n      props;\n\n    const dataSources = dataSourceSrv.getList({\n      alerting,\n      tracing,\n      metrics,\n      logs,\n      dashboard,\n      mixed,\n      variables,\n      annotations,\n      pluginId,\n      filter,\n      type,\n    });\n\n    const alertManagingDs = dataSources.filter(isDataSourceManagingAlerts).map((ds) => ({\n      value: ds.name,\n      label: `${ds.name}${ds.isDefault ? ' (default)' : ''}`,\n      imgUrl: ds.meta.info.logos.small,\n      meta: ds.meta,\n    }));\n\n    const nonAlertManagingDs = dataSources\n      .filter((ds) => !isDataSourceManagingAlerts(ds))\n      .map((ds) => ({\n        value: ds.name,\n        label: `${ds.name}${ds.isDefault ? ' (default)' : ''}`,\n        imgUrl: ds.meta.info.logos.small,\n        meta: ds.meta,\n      }));\n\n    const groupedOptions = [\n      { label: 'Data sources with configured alert rules', options: alertManagingDs, expanded: true },\n      { label: 'Other data sources', options: nonAlertManagingDs, expanded: true },\n    ];\n\n    return groupedOptions;\n  };\n\n  const {\n    autoFocus,\n    onBlur,\n    onClear,\n    openMenuOnFocus,\n    placeholder,\n    width,\n    inputId,\n    disabled = false,\n    isLoading = false,\n  } = props;\n\n  const options = getDataSourceOptions();\n  const value = getCurrentValue();\n  const isClearable = typeof onClear === 'function';\n\n  return (\n    <div data-testid={selectors.components.DataSourcePicker.container}>\n      <MultiSelect\n        isLoading={isLoading}\n        disabled={disabled}\n        data-testid={selectors.components.DataSourcePicker.inputV2}\n        inputId={inputId || 'data-source-picker'}\n        className=\"ds-picker select-container\"\n        isClearable={isClearable}\n        backspaceRemovesValue={true}\n        onChange={onChange}\n        options={options}\n        autoFocus={autoFocus}\n        onBlur={onBlur}\n        width={width}\n        openMenuOnFocus={openMenuOnFocus}\n        maxMenuHeight={500}\n        placeholder={placeholder}\n        noOptionsMessage=\"No datasources found\"\n        value={value ?? []}\n        invalid={Boolean(state?.error) || Boolean(props.invalid)}\n        getOptionLabel={(o) => {\n          if (o.meta && isUnsignedPluginSignature(o.meta.signature) && o !== value) {\n            return (\n              <Stack alignItems=\"center\" justifyContent=\"space-between\">\n                <span>{o.label}</span> <PluginSignatureBadge status={o.meta.signature} />\n              </Stack>\n            );\n          }\n          return o.label || '';\n        }}\n      />\n    </div>\n  );\n};\n","import { css } from '@emotion/css';\nimport { useEffect, useRef, useState } from 'react';\nimport { useForm } from 'react-hook-form';\n\nimport { DataSourceInstanceSettings, GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Button, Field, Icon, Input, Label, RadioButtonGroup, Stack, Tooltip, useStyles2 } from '@grafana/ui';\nimport { DashboardPicker } from 'app/core/components/Select/DashboardPicker';\nimport { contextSrv } from 'app/core/core';\nimport { Trans } from 'app/core/internationalization';\nimport { ContactPointSelector } from 'app/features/alerting/unified/components/notification-policies/ContactPointSelector';\nimport { AccessControlAction } from 'app/types';\nimport { PromAlertingRuleState, PromRuleType } from 'app/types/unified-alerting-dto';\n\nimport {\n  LogMessages,\n  logInfo,\n  trackRulesListViewChange,\n  trackRulesSearchComponentInteraction,\n  trackRulesSearchInputInteraction,\n} from '../../../Analytics';\nimport { useRulesFilter } from '../../../hooks/useFilteredRules';\nimport { useURLSearchParams } from '../../../hooks/useURLSearchParams';\nimport { useAlertingHomePageExtensions } from '../../../plugins/useAlertingHomePageExtensions';\nimport { RuleHealth } from '../../../search/rulesSearchParser';\nimport { AlertmanagerProvider } from '../../../state/AlertmanagerContext';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../../utils/datasource';\nimport { alertStateToReadable } from '../../../utils/rules';\nimport { PopupCard } from '../../HoverCard';\nimport { MultipleDataSourcePicker } from '../MultipleDataSourcePicker';\n\nconst ViewOptions: SelectableValue[] = [\n  {\n    icon: 'folder',\n    label: 'Grouped',\n    value: 'grouped',\n  },\n  {\n    icon: 'list-ul',\n    label: 'List',\n    value: 'list',\n  },\n  {\n    icon: 'heart-rate',\n    label: 'State',\n    value: 'state',\n  },\n];\n\nconst RuleTypeOptions: SelectableValue[] = [\n  {\n    label: 'Alert ',\n    value: PromRuleType.Alerting,\n  },\n  {\n    label: 'Recording ',\n    value: PromRuleType.Recording,\n  },\n];\n\nconst RuleHealthOptions: SelectableValue[] = [\n  { label: 'Ok', value: RuleHealth.Ok },\n  { label: 'No Data', value: RuleHealth.NoData },\n  { label: 'Error', value: RuleHealth.Error },\n];\n\ninterface RulesFilerProps {\n  onClear?: () => void;\n}\n\nconst RuleStateOptions = Object.entries(PromAlertingRuleState).map(([key, value]) => ({\n  label: alertStateToReadable(value),\n  value,\n}));\n\nconst RulesFilter = ({ onClear = () => undefined }: RulesFilerProps) => {\n  const styles = useStyles2(getStyles);\n  const [queryParams, updateQueryParams] = useURLSearchParams();\n  const { pluginsFilterEnabled } = usePluginsFilterStatus();\n  const { filterState, hasActiveFilters, searchQuery, setSearchQuery, updateFilters } = useRulesFilter();\n\n  // This key is used to force a rerender on the inputs when the filters are cleared\n  const [filterKey, setFilterKey] = useState<number>(Math.floor(Math.random() * 100));\n  const dataSourceKey = `dataSource-${filterKey}`;\n  const queryStringKey = `queryString-${filterKey}`;\n\n  const searchQueryRef = useRef<HTMLInputElement | null>(null);\n  const { handleSubmit, register, setValue } = useForm<{ searchQuery: string }>({\n    defaultValues: { searchQuery },\n  });\n  const { ref, ...rest } = register('searchQuery');\n\n  useEffect(() => {\n    setValue('searchQuery', searchQuery);\n  }, [searchQuery, setValue]);\n\n  const handleDataSourceChange = (dataSourceValue: DataSourceInstanceSettings, action: 'add' | 'remove') => {\n    const dataSourceNames =\n      action === 'add'\n        ? [...filterState.dataSourceNames].concat([dataSourceValue.name])\n        : filterState.dataSourceNames.filter((name) => name !== dataSourceValue.name);\n\n    updateFilters({\n      ...filterState,\n      dataSourceNames,\n    });\n\n    setFilterKey((key) => key + 1);\n    trackRulesSearchComponentInteraction('dataSourceNames');\n  };\n\n  const handleDashboardChange = (dashboardUid: string | undefined) => {\n    updateFilters({ ...filterState, dashboardUid });\n    trackRulesSearchComponentInteraction('dashboardUid');\n  };\n\n  const clearDataSource = () => {\n    updateFilters({ ...filterState, dataSourceNames: [] });\n    setFilterKey((key) => key + 1);\n  };\n\n  const handleAlertStateChange = (value: PromAlertingRuleState) => {\n    logInfo(LogMessages.clickingAlertStateFilters);\n    updateFilters({ ...filterState, ruleState: value });\n    trackRulesSearchComponentInteraction('ruleState');\n  };\n\n  const handleRuleTypeChange = (ruleType: PromRuleType) => {\n    updateFilters({ ...filterState, ruleType });\n    trackRulesSearchComponentInteraction('ruleType');\n  };\n\n  const handleRuleHealthChange = (ruleHealth: RuleHealth) => {\n    updateFilters({ ...filterState, ruleHealth });\n    trackRulesSearchComponentInteraction('ruleHealth');\n  };\n\n  const handleClearFiltersClick = () => {\n    setSearchQuery(undefined);\n    onClear();\n\n    setTimeout(() => setFilterKey(filterKey + 1), 100);\n  };\n\n  const handleViewChange = (view: string) => {\n    updateQueryParams({ view });\n    trackRulesListViewChange({ view });\n  };\n\n  const handleContactPointChange = (contactPoint: string) => {\n    updateFilters({ ...filterState, contactPoint });\n    trackRulesSearchComponentInteraction('contactPoint');\n  };\n\n  const canRenderContactPointSelector =\n    (contextSrv.hasPermission(AccessControlAction.AlertingReceiversRead) &&\n      config.featureToggles.alertingSimplifiedRouting) ??\n    false;\n  const searchIcon = <Icon name={'search'} />;\n\n  return (\n    <div className={styles.container}>\n      <Stack direction=\"column\" gap={1}>\n        <Stack direction=\"row\" gap={1} wrap=\"wrap\">\n          <Field\n            className={styles.dsPickerContainer}\n            label={\n              <Label htmlFor=\"data-source-picker\">\n                <Stack gap={0.5} alignItems=\"center\">\n                  <span>Search by data sources</span>\n                  <Tooltip\n                    content={\n                      <div>\n                        <p>\n                          Data sources containing configured alert rules are Mimir or Loki data sources where alert\n                          rules are stored and evaluated in the data source itself.\n                        </p>\n                        <p>\n                          In these data sources, you can select Manage alerts via Alerting UI to be able to manage these\n                          alert rules in the Grafana UI as well as in the data source where they were configured.\n                        </p>\n                      </div>\n                    }\n                  >\n                    <Icon\n                      id=\"data-source-picker-inline-help\"\n                      name=\"info-circle\"\n                      size=\"sm\"\n                      title=\"Search by data sources help\"\n                    />\n                  </Tooltip>\n                </Stack>\n              </Label>\n            }\n          >\n            <MultipleDataSourcePicker\n              key={dataSourceKey}\n              alerting\n              noDefault\n              placeholder=\"All data sources\"\n              current={filterState.dataSourceNames}\n              onChange={handleDataSourceChange}\n              onClear={clearDataSource}\n            />\n          </Field>\n\n          <Field\n            className={styles.dashboardPickerContainer}\n            label={<Label htmlFor=\"filters-dashboard-picker\">Dashboard</Label>}\n          >\n            {/* The key prop is to clear the picker value */}\n            {/* DashboardPicker doesn't do that itself when value is undefined */}\n            <DashboardPicker\n              inputId=\"filters-dashboard-picker\"\n              key={filterState.dashboardUid ? 'dashboard-defined' : 'dashboard-not-defined'}\n              value={filterState.dashboardUid}\n              onChange={(value) => handleDashboardChange(value?.uid)}\n              isClearable\n              cacheOptions\n            />\n          </Field>\n\n          <div>\n            <Label>State</Label>\n            <RadioButtonGroup\n              options={RuleStateOptions}\n              value={filterState.ruleState}\n              onChange={handleAlertStateChange}\n            />\n          </div>\n          <div>\n            <Label>Rule type</Label>\n            <RadioButtonGroup options={RuleTypeOptions} value={filterState.ruleType} onChange={handleRuleTypeChange} />\n          </div>\n          <div>\n            <Label>Health</Label>\n            <RadioButtonGroup\n              options={RuleHealthOptions}\n              value={filterState.ruleHealth}\n              onChange={handleRuleHealthChange}\n            />\n          </div>\n          {canRenderContactPointSelector && (\n            <AlertmanagerProvider accessType={'notification'} alertmanagerSourceName={GRAFANA_RULES_SOURCE_NAME}>\n              <Stack direction=\"column\" gap={0}>\n                <Field\n                  label={\n                    <Label htmlFor=\"contactPointFilter\">\n                      <Trans i18nKey=\"alerting.contactPointFilter.label\">Contact point</Trans>\n                    </Label>\n                  }\n                >\n                  <ContactPointSelector\n                    selectedContactPointName={filterState.contactPoint}\n                    selectProps={{\n                      inputId: 'contactPointFilter',\n                      width: 40,\n                      onChange: (selectValue) => {\n                        handleContactPointChange(selectValue?.value?.name!);\n                      },\n                      isClearable: true,\n                    }}\n                  />\n                </Field>\n              </Stack>\n            </AlertmanagerProvider>\n          )}\n          {pluginsFilterEnabled && (\n            <div>\n              <Label>Plugin rules</Label>\n              <RadioButtonGroup<'hide'>\n                options={[\n                  { label: 'Show', value: undefined },\n                  { label: 'Hide', value: 'hide' },\n                ]}\n                value={filterState.plugins}\n                onChange={(value) => updateFilters({ ...filterState, plugins: value })}\n              />\n            </div>\n          )}\n        </Stack>\n\n        <Stack direction=\"column\" gap={1}>\n          <Stack direction=\"row\" gap={1}>\n            <form\n              className={styles.searchInput}\n              onSubmit={handleSubmit((data) => {\n                setSearchQuery(data.searchQuery);\n                searchQueryRef.current?.blur();\n                trackRulesSearchInputInteraction({ oldQuery: searchQuery, newQuery: data.searchQuery });\n              })}\n            >\n              <Field\n                label={\n                  <Label htmlFor=\"rulesSearchInput\">\n                    <Stack gap={0.5} alignItems=\"center\">\n                      <span>Search</span>\n                      <PopupCard content={<SearchQueryHelp />}>\n                        <Icon name=\"info-circle\" size=\"sm\" tabIndex={0} title=\"Search help\" />\n                      </PopupCard>\n                    </Stack>\n                  </Label>\n                }\n              >\n                <Input\n                  id=\"rulesSearchInput\"\n                  key={queryStringKey}\n                  prefix={searchIcon}\n                  ref={(e) => {\n                    ref(e);\n                    searchQueryRef.current = e;\n                  }}\n                  {...rest}\n                  placeholder=\"Search\"\n                  data-testid=\"search-query-input\"\n                />\n              </Field>\n              <input type=\"submit\" hidden />\n            </form>\n            <div>\n              <Label>View as</Label>\n              <RadioButtonGroup\n                options={ViewOptions}\n                value={queryParams.get('view') ?? ViewOptions[0].value}\n                onChange={handleViewChange}\n              />\n            </div>\n          </Stack>\n          {hasActiveFilters && (\n            <div>\n              <Button fullWidth={false} icon=\"times\" variant=\"secondary\" onClick={handleClearFiltersClick}>\n                Clear filters\n              </Button>\n            </div>\n          )}\n        </Stack>\n      </Stack>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css({\n      marginBottom: theme.spacing(1),\n    }),\n    dsPickerContainer: css({\n      width: theme.spacing(60),\n      flexGrow: 0,\n      margin: 0,\n    }),\n    dashboardPickerContainer: css({\n      minWidth: theme.spacing(50),\n    }),\n    searchInput: css({\n      flex: 1,\n      margin: 0,\n    }),\n  };\n};\n\nfunction SearchQueryHelp() {\n  const styles = useStyles2(helpStyles);\n\n  return (\n    <div>\n      <div>Search syntax allows to query alert rules by the parameters defined below.</div>\n      <hr />\n      <div className={styles.grid}>\n        <div>Filter type</div>\n        <div>Expression</div>\n        <HelpRow title=\"Datasources\" expr=\"datasource:mimir datasource:prometheus\" />\n        <HelpRow title=\"Folder/Namespace\" expr=\"namespace:global\" />\n        <HelpRow title=\"Group\" expr=\"group:cpu-usage\" />\n        <HelpRow title=\"Rule\" expr='rule:\"cpu 80%\"' />\n        <HelpRow title=\"Labels\" expr=\"label:team=A label:cluster=a1\" />\n        <HelpRow title=\"State\" expr=\"state:firing|normal|pending\" />\n        <HelpRow title=\"Type\" expr=\"type:alerting|recording\" />\n        <HelpRow title=\"Health\" expr=\"health:ok|nodata|error\" />\n        <HelpRow title=\"Dashboard UID\" expr=\"dashboard:eadde4c7-54e6-4964-85c0-484ab852fd04\" />\n        <HelpRow title=\"Contact point\" expr=\"contactPoint:slack\" />\n      </div>\n    </div>\n  );\n}\n\nfunction HelpRow({ title, expr }: { title: string; expr: string }) {\n  const styles = useStyles2(helpStyles);\n\n  return (\n    <>\n      <div>{title}</div>\n      <code className={styles.code}>{expr}</code>\n    </>\n  );\n}\n\nconst helpStyles = (theme: GrafanaTheme2) => ({\n  grid: css({\n    display: 'grid',\n    gridTemplateColumns: 'max-content auto',\n    gap: theme.spacing(1),\n    alignItems: 'center',\n  }),\n  code: css({\n    display: 'block',\n    textAlign: 'center',\n  }),\n});\n\nfunction usePluginsFilterStatus() {\n  const { components } = useAlertingHomePageExtensions();\n  return { pluginsFilterEnabled: components.length > 0 };\n}\n\nexport default RulesFilter;\n","import { Suspense, lazy } from 'react';\n\nimport { config } from '@grafana/runtime';\n\nimport RulesFilterV1 from './RulesFilter.v1';\n\nconst RulesFilterV2 = lazy(() => import('./RulesFilter.v2'));\n\ninterface RulesFilerProps {\n  onClear?: () => void;\n}\n\nconst RulesFilter = (props: RulesFilerProps) => {\n  const newView = config.featureToggles.alertingFilterV2;\n  return <Suspense>{newView ? <RulesFilterV2 {...props} /> : <RulesFilterV1 {...props} />}</Suspense>;\n};\n\nexport default RulesFilter;\n","import { EmptyState, LinkButton, Stack, TextLink } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\nimport { useRulesAccess } from '../../utils/accessControlHooks';\n\nexport const NoRulesSplash = () => {\n  const { canCreateGrafanaRules, canCreateCloudRules } = useRulesAccess();\n  const canCreateAnything = canCreateGrafanaRules || canCreateCloudRules;\n\n  return (\n    <div>\n      <EmptyState\n        message=\"You haven't created any rules yet\"\n        variant=\"call-to-action\"\n        button={\n          canCreateAnything ? (\n            <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"center\">\n              {canCreateAnything && (\n                <LinkButton variant=\"primary\" icon=\"plus\" size=\"lg\" href=\"alerting/new/alerting\">\n                  <Trans i18nKey=\"alerting.list-view.empty.new-alert-rule\">New alert rule</Trans>\n                </LinkButton>\n              )}\n              {canCreateCloudRules && (\n                <LinkButton variant=\"primary\" icon=\"plus\" size=\"lg\" href=\"alerting/new/recording\">\n                  <Trans i18nKey=\"alerting.list-view.empty.new-recording-rule\">New recording rule</Trans>\n                </LinkButton>\n              )}\n            </Stack>\n          ) : null\n        }\n      >\n        <>\n          <Trans i18nKey=\"alerting.list-view.empty.provisioning\">\n            You can also define rules through file provisioning or Terraform.{' '}\n            <TextLink\n              href=\"https://grafana.com/docs/grafana/latest/alerting/set-up/provision-alerting-resources/\"\n              external\n            >\n              Learn more\n            </TextLink>\n          </Trans>\n        </>\n      </EmptyState>\n    </div>\n  );\n};\n","import { css } from '@emotion/css';\nimport { SerializedError } from '@reduxjs/toolkit';\nimport pluralize from 'pluralize';\nimport { useMemo, ReactElement, useState, FC } from 'react';\nimport { useLocalStorage } from 'react-use';\n\nimport { DataSourceInstanceSettings, GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Button, Tooltip, useStyles2 } from '@grafana/ui';\n\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { getRulesDataSources, GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { makeDataSourceLink } from '../../utils/misc';\nimport { isRulerNotSupportedResponse } from '../../utils/rules';\n\nexport function RuleListErrors(): ReactElement {\n  const [expanded, setExpanded] = useState(false);\n  const [closed, setClosed] = useLocalStorage('grafana.unifiedalerting.hideErrors', false);\n  const dataSourceConfigRequests = useUnifiedAlertingSelector((state) => state.dataSources);\n  const promRuleRequests = useUnifiedAlertingSelector((state) => state.promRules);\n  const rulerRuleRequests = useUnifiedAlertingSelector((state) => state.rulerRules);\n  const styles = useStyles2(getStyles);\n\n  const errors = useMemo((): JSX.Element[] => {\n    const [dataSourceConfigErrors, promRequestErrors, rulerRequestErrors] = [\n      dataSourceConfigRequests,\n      promRuleRequests,\n      rulerRuleRequests,\n    ].map((requests) =>\n      getRulesDataSources().reduce<Array<{ error: SerializedError; dataSource: DataSourceInstanceSettings }>>(\n        (result, dataSource) => {\n          const error = requests[dataSource.name]?.error;\n          if (requests[dataSource.name] && error && !isRulerNotSupportedResponse(requests[dataSource.name])) {\n            return [...result, { dataSource, error }];\n          }\n          return result;\n        },\n        []\n      )\n    );\n    const grafanaPromError = promRuleRequests[GRAFANA_RULES_SOURCE_NAME]?.error;\n    const grafanaRulerError = rulerRuleRequests[GRAFANA_RULES_SOURCE_NAME]?.error;\n\n    const result: JSX.Element[] = [];\n\n    if (grafanaPromError) {\n      result.push(<>Failed to load Grafana rules state: {grafanaPromError.message || 'Unknown error.'}</>);\n    }\n    if (grafanaRulerError) {\n      result.push(<>Failed to load Grafana rules config: {grafanaRulerError.message || 'Unknown error.'}</>);\n    }\n\n    dataSourceConfigErrors.forEach(({ dataSource, error }) => {\n      result.push(\n        <>\n          Failed to load the data source configuration for{' '}\n          <a href={makeDataSourceLink(dataSource.uid)} className={styles.dsLink}>\n            {dataSource.name}\n          </a>\n          : {error.message || 'Unknown error.'}\n        </>\n      );\n    });\n\n    promRequestErrors.forEach(({ dataSource, error }) =>\n      result.push(\n        <>\n          Failed to load rules state from{' '}\n          <a href={makeDataSourceLink(dataSource.uid)} className={styles.dsLink}>\n            {dataSource.name}\n          </a>\n          : {error.message || 'Unknown error.'}\n        </>\n      )\n    );\n\n    rulerRequestErrors.forEach(({ dataSource, error }) =>\n      result.push(\n        <>\n          Failed to load rules config from{' '}\n          <a href={makeDataSourceLink(dataSource.uid)} className={styles.dsLink}>\n            {dataSource.name}\n          </a>\n          : {error.message || 'Unknown error.'}\n        </>\n      )\n    );\n\n    return result;\n  }, [dataSourceConfigRequests, promRuleRequests, rulerRuleRequests, styles.dsLink]);\n\n  return (\n    <>\n      {!!errors.length && closed && (\n        <ErrorSummaryButton count={errors.length} onClick={() => setClosed((closed) => !closed)} />\n      )}\n      {!!errors.length && !closed && (\n        <Alert\n          data-testid=\"cloud-rulessource-errors\"\n          title=\"Errors loading rules\"\n          severity=\"error\"\n          onRemove={() => setClosed(true)}\n        >\n          {expanded && errors.map((item, idx) => <div key={idx}>{item}</div>)}\n          {!expanded && (\n            <>\n              <div>{errors[0]}</div>\n              {errors.length >= 2 && (\n                <Button\n                  className={styles.moreButton}\n                  fill=\"text\"\n                  icon=\"angle-right\"\n                  size=\"sm\"\n                  onClick={() => setExpanded(true)}\n                >\n                  {errors.length - 1} more {pluralize('error', errors.length - 1)}\n                </Button>\n              )}\n            </>\n          )}\n        </Alert>\n      )}\n    </>\n  );\n}\n\ninterface ErrorSummaryProps {\n  count: number;\n  onClick: () => void;\n}\n\nconst ErrorSummaryButton: FC<ErrorSummaryProps> = ({ count, onClick }) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.floatRight}>\n      <Tooltip content=\"Show all errors\" placement=\"bottom\">\n        <Button fill=\"text\" variant=\"destructive\" icon=\"exclamation-triangle\" onClick={onClick}>\n          {count > 1 ? <>{count} errors</> : <>1 error</>}\n        </Button>\n      </Tooltip>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  moreButton: css({\n    padding: 0,\n  }),\n  floatRight: css({\n    display: 'flex',\n    justifyContent: 'flex-end',\n  }),\n  dsLink: css({\n    fontWeight: theme.typography.fontWeightBold,\n  }),\n});\n","import { PluginExtensionPoints } from '@grafana/data';\nimport { usePluginComponents } from '@grafana/runtime';\n\nexport function useAlertingHomePageExtensions() {\n  return usePluginComponents({\n    extensionPointId: PluginExtensionPoints.AlertingHomePage,\n    limitPerPlugin: 1,\n  });\n}\n","import { useEffect, useRef } from 'react';\nvar useInterval = function (callback, delay) {\n    var savedCallback = useRef(function () { });\n    useEffect(function () {\n        savedCallback.current = callback;\n    });\n    useEffect(function () {\n        if (delay !== null) {\n            var interval_1 = setInterval(function () { return savedCallback.current(); }, delay || 0);\n            return function () { return clearInterval(interval_1); };\n        }\n        return undefined;\n    }, [delay]);\n};\nexport default useInterval;\n"],"names":["useDeleteRuleGroupFromNamespaceMutation","alertRuleApi","useLazyDiscoverDsFeaturesQuery","featureDiscoveryApi","useDeleteRuleGroup","deleteRuleGroup","discoverDataSourceFeature","useAsync","ruleGroupIdentifier","dataSourceName","namespaceName","groupName","rulerConfig","result","GrafanaRuleFolderExporter","folder","onClose","activeTab","setActiveTab","GrafanaExportDrawer","GrafanaRuleFolderExportPreview","exportFormat","exportFolderDefinition","isFetching","LoadingPlaceholder","downloadFileName","FileExportPreview","GrafanaRuleGroupExporter","folderUid","GrafanaRuleGroupExportPreview","ruleGroupTextDefinition","ReorderCloudGroupModal","props","styles","getStyles","group","namespace","operations","setOperations","reorderRulesInGroup","reorderState","isUpdating","ruleGroup","loadingRules","rulesList","setRulesList","onDragEnd","swapOperation","draft","newOrderedRules","updateRulesOrder","rulesWithUID","rulerRule","Modal","ModalHeader","provided","_snapshot","rubric","ListItem","droppableProvided","rule","index","Button","isClone","isDragging","Badge","Icon","Tooltip","theme","RulesGroup","expandAll","viewMode","rulesSource","isEditingGroup","setIsEditingGroup","isDeletingGroup","setIsDeletingGroup","isReorderingGroup","setIsReorderingGroup","isExporting","setIsExporting","isCollapsed","setIsCollapsed","canEditRules","hasRuler","rulerRulesLoaded","useHasRuler","folderUID","useFolder","isDeleting","isFederated","isProvisioned","isListView","isGroupView","deleteGroup","actionIcons","Stack","Spinner","baseUrl","ActionIcon","RuleLocation","closeEditModal","saved","CollapseToggle","selectors","FolderIcon","CloudSourceLogo","RulesTable","ConfirmModal","useCombinedGroupNamespace","namespaces","ns","g","CloudRules","dsConfigs","useUnifiedAlertingSelector","state","promRules","rulesDataSources","groupsWithNamespaces","dataSourcesLoading","ds","hasSomeResults","hasDataSourcesConfigured","hasDataSourcesLoading","hasNamespaces","numberOfPages","onPageChange","page","pageItems","usePagination","Text","CreateRecordingRuleButton","Pagination","createCloudRuleSupported","createCloudRuleAllowed","location","url","GrafanaRulesExporter","GrafanaRulesExportPreview","rulesDefinition","GrafanaRules","queryParams","useQueryParams","prom","ruler","loading","hasResult","wantsListView","namespacesFormat","exportRulesSupported","exportRulesAllowed","canExportRules","showExportDrawer","toggleShowExportDrawer","useToggle","hasGrafanaAlerts","grafanaRecordingRulesEnabled","config","RuleListGroupView","grafanaNamespaces","cloudNamespaces","sorted","a","b","Authorize","RuleListStateSection","rules","defaultCollapsed","collapsed","setCollapsed","VIEWS","filters","groupedRules","LIMIT_ALERTS","prometheusRulesPrimary","RuleListV1","dispatch","rulesDataSourceNames","setExpandAll","onFilterCleared","filterState","hasActiveFilters","queryParamView","view","ViewComponent","promRuleRequests","rulerRuleRequests","name","promRequests","rulerRequests","allPromLoaded","_","allRulerLoaded","allPromEmpty","allRulerEmpty","limitAlerts","fetchRules","useAsyncFn","useInterval","hasNoAlertRulesCreatedYet","hasAlertRulesCreated","combinedNamespaces","useCombinedRuleNamespaces","filteredNamespaces","useFilteredRules","AlertingPageWrapper","CreateAlertButton","RuleListErrors","RulesFilter","RuleStats","createRuleSupported","createRuleAllowed","RuleListV2","newView","actions","children","alertmanagerActions","isAlertmanagerAction","alertSourceActions","isAlertingAction","AuthorizeAlertmanager","AuthorizeAlertsource","alertmanagerAbilties","actionsAllowed","alertSourceAbilities","abilities","_supported","allowed","action","NeedHelpInfo","contentText","externalLink","linkText","title","RuleEditorSection","stepNo","fullWidth","description","switchMode","event","tooltip","icon","to","target","onClick","className","tooltipPlacement","rest","ariaLabel","MultipleDataSourcePicker","dataSourceSrv","setState","onChange","items","actionMeta","selectedItem","dsSettings","getCurrentValue","current","hideTextValue","noDefault","uid","getDataSourceOptions","alerting","tracing","metrics","mixed","dashboard","variables","annotations","pluginId","type","filter","logs","dataSources","alertManagingDs","nonAlertManagingDs","autoFocus","onBlur","onClear","openMenuOnFocus","placeholder","width","inputId","disabled","isLoading","options","value","isClearable","o","PluginSignatureBadge","ViewOptions","RuleTypeOptions","RuleHealthOptions","RuleStateOptions","key","updateQueryParams","useURLSearchParams","pluginsFilterEnabled","usePluginsFilterStatus","searchQuery","setSearchQuery","updateFilters","filterKey","setFilterKey","dataSourceKey","queryStringKey","searchQueryRef","handleSubmit","register","setValue","ref","handleDataSourceChange","dataSourceValue","dataSourceNames","handleDashboardChange","dashboardUid","clearDataSource","handleAlertStateChange","handleRuleTypeChange","ruleType","handleRuleHealthChange","ruleHealth","handleClearFiltersClick","handleViewChange","handleContactPointChange","contactPoint","canRenderContactPointSelector","searchIcon","Field","Label","DashboardPicker","RadioButtonGroup","ContactPointSelector","selectValue","data","SearchQueryHelp","Input","e","helpStyles","HelpRow","expr","components","useAlertingHomePageExtensions","RulesFilterV2","NoRulesSplash","canCreateGrafanaRules","canCreateCloudRules","canCreateAnything","expanded","setExpanded","closed","setClosed","dataSourceConfigRequests","errors","dataSourceConfigErrors","promRequestErrors","rulerRequestErrors","requests","dataSource","error","grafanaPromError","grafanaRulerError","ErrorSummaryButton","item","idx","count","callback","delay","savedCallback","interval_1"],"sourceRoot":""}