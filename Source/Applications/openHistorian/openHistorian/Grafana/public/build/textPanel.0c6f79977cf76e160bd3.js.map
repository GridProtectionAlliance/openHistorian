{"version":3,"file":"textPanel.0c6f79977cf76e160bd3.js","mappings":"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","sources":["webpack://grafana/./node_modules/dangerously-set-html-content/src/index.js","webpack://grafana/./public/app/plugins/panel/text/panelcfg.gen.ts","webpack://grafana/./public/app/plugins/panel/text/TextPanel.tsx","webpack://grafana/./public/app/plugins/panel/text/TextPanelEditor.tsx","webpack://grafana/./public/app/plugins/panel/text/textPanelMigrationHandler.ts","webpack://grafana/./public/app/plugins/panel/text/module.tsx"],"sourcesContent":["'use client'\n\nconst { createElement, useEffect, useRef } = require('react')\n\nfunction DangerouslySetHtmlContent({\n  html,\n  dangerouslySetInnerHTML,\n  allowRerender,\n  ...rest\n}) {\n  // We remove 'dangerouslySetInnerHTML' from props passed to the div\n  const divRef = useRef(null)\n  const isFirstRender = useRef(true)\n\n  useEffect(() => {\n    if (!html || !divRef.current) throw new Error(\"html prop can't be null\")\n    if (!isFirstRender.current) return\n    isFirstRender.current = Boolean(allowRerender)\n\n    const slotHtml = document.createRange().createContextualFragment(html) // Create a 'tiny' document and parse the html string\n    divRef.current.innerHTML = '' // Clear the container\n    divRef.current.appendChild(slotHtml) // Append the new content\n  }, [html, divRef])\n\n  return createElement('div', { ...rest, ref: divRef })\n}\n\nmodule.exports = DangerouslySetHtmlContent\n","// Code generated - EDITING IS FUTILE. DO NOT EDIT.\n//\n// Generated by:\n//     public/app/plugins/gen.go\n// Using jennies:\n//     TSTypesJenny\n//     PluginTsTypesJenny\n//\n// Run 'make gen-cue' from repository root to regenerate.\n\nexport enum TextMode {\n  Code = 'code',\n  HTML = 'html',\n  Markdown = 'markdown',\n}\n\nexport enum CodeLanguage {\n  Go = 'go',\n  Html = 'html',\n  Json = 'json',\n  Markdown = 'markdown',\n  Plaintext = 'plaintext',\n  Sql = 'sql',\n  Typescript = 'typescript',\n  Xml = 'xml',\n  Yaml = 'yaml',\n}\n\nexport const defaultCodeLanguage: CodeLanguage = CodeLanguage.Plaintext;\n\nexport interface CodeOptions {\n  /**\n   * The language passed to monaco code editor\n   */\n  language: CodeLanguage;\n  showLineNumbers: boolean;\n  showMiniMap: boolean;\n}\n\nexport const defaultCodeOptions: Partial<CodeOptions> = {\n  language: CodeLanguage.Plaintext,\n  showLineNumbers: false,\n  showMiniMap: false,\n};\n\nexport interface Options {\n  code?: CodeOptions;\n  content: string;\n  mode: TextMode;\n}\n\nexport const defaultOptions: Partial<Options> = {\n  content: `# Title\n\nFor markdown syntax help: [commonmark.org/help](https://commonmark.org/help/)`,\n  mode: TextMode.Markdown,\n};\n","import { css, cx } from '@emotion/css';\nimport DangerouslySetHtmlContent from 'dangerously-set-html-content';\nimport { useState } from 'react';\nimport { useDebounce } from 'react-use';\n\nimport { GrafanaTheme2, PanelProps, renderTextPanelMarkdown, textUtil, InterpolateFunction } from '@grafana/data';\nimport { CustomScrollbar, CodeEditor, useStyles2 } from '@grafana/ui';\nimport config from 'app/core/config';\n\nimport { defaultCodeOptions, Options, TextMode } from './panelcfg.gen';\n\nexport interface Props extends PanelProps<Options> {}\n\nexport function TextPanel(props: Props) {\n  const styles = useStyles2(getStyles);\n  const [processed, setProcessed] = useState<Options>({\n    mode: props.options.mode,\n    content: processContent(props.options, props.replaceVariables, config.disableSanitizeHtml),\n  });\n\n  useDebounce(\n    () => {\n      const { options, replaceVariables } = props;\n      const content = processContent(options, replaceVariables, config.disableSanitizeHtml);\n      if (content !== processed.content || options.mode !== processed.mode) {\n        setProcessed({\n          mode: options.mode,\n          content,\n        });\n      }\n    },\n    100,\n    [props]\n  );\n\n  if (processed.mode === TextMode.Code) {\n    const code = props.options.code ?? defaultCodeOptions;\n    return (\n      <CodeEditor\n        key={`${code.showLineNumbers}/${code.showMiniMap}`} // will reinit-on change\n        value={processed.content}\n        language={code.language ?? defaultCodeOptions.language!}\n        width={props.width}\n        height={props.height}\n        containerStyles={styles.codeEditorContainer}\n        showMiniMap={code.showMiniMap}\n        showLineNumbers={code.showLineNumbers}\n        readOnly={true} // future\n      />\n    );\n  }\n\n  return (\n    <CustomScrollbar autoHeightMin=\"100%\" className={styles.containStrict}>\n      <DangerouslySetHtmlContent\n        allowRerender\n        html={processed.content}\n        className={styles.markdown}\n        data-testid=\"TextPanel-converted-content\"\n      />\n    </CustomScrollbar>\n  );\n}\n\nfunction processContent(options: Options, interpolate: InterpolateFunction, disableSanitizeHtml: boolean): string {\n  let { mode, content } = options;\n\n  // Variables must be interpolated before content is converted to markdown so using variables\n  // in URLs work properly\n  content = interpolate(content, {}, options.code?.language === 'json' ? 'json' : 'html');\n\n  if (!content) {\n    return ' ';\n  }\n\n  switch (mode) {\n    case TextMode.Code:\n      break; // nothing\n    case TextMode.HTML:\n      if (!disableSanitizeHtml) {\n        content = textUtil.sanitizeTextPanelContent(content);\n      }\n      break;\n    case TextMode.Markdown:\n    default:\n      // default to markdown\n      content = renderTextPanelMarkdown(content, {\n        noSanitize: disableSanitizeHtml,\n      });\n  }\n\n  return content;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  codeEditorContainer: css`\n    .monaco-editor .margin,\n    .monaco-editor-background {\n      background-color: ${theme.colors.background.primary};\n    }\n  `,\n  markdown: cx(\n    'markdown-html',\n    css`\n      height: 100%;\n    `\n  ),\n  containStrict: css({\n    contain: 'strict',\n  }),\n});\n","import { css, cx } from '@emotion/css';\nimport { useMemo } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaTheme2, StandardEditorProps } from '@grafana/data';\nimport {\n  CodeEditor,\n  useStyles2,\n  CodeEditorSuggestionItem,\n  variableSuggestionToCodeEditorSuggestion,\n} from '@grafana/ui';\n\nimport { Options, TextMode } from './panelcfg.gen';\n\nexport const TextPanelEditor = ({ value, onChange, context }: StandardEditorProps<string, {}, Options>) => {\n  const language = useMemo(() => context.options?.mode ?? TextMode.Markdown, [context]);\n  const styles = useStyles2(getStyles);\n\n  const getSuggestions = (): CodeEditorSuggestionItem[] => {\n    if (!context.getSuggestions) {\n      return [];\n    }\n    return context.getSuggestions().map((v) => variableSuggestionToCodeEditorSuggestion(v));\n  };\n\n  return (\n    <div className={cx(styles.editorBox)}>\n      <AutoSizer disableHeight>\n        {({ width }) => {\n          if (width === 0) {\n            return null;\n          }\n          return (\n            <CodeEditor\n              value={value}\n              onBlur={onChange}\n              onSave={onChange}\n              language={language}\n              width={width}\n              showMiniMap={false}\n              showLineNumbers={false}\n              height=\"500px\"\n              getSuggestions={getSuggestions}\n            />\n          );\n        }}\n      </AutoSizer>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  editorBox: css`\n    label: editorBox;\n    border: 1px solid ${theme.colors.border.medium};\n    border-radius: ${theme.shape.radius.default};\n    margin: ${theme.spacing(0.5)} 0;\n    width: 100%;\n  `,\n});\n","import { PanelModel } from '@grafana/data';\n\nimport { TextMode, Options } from './panelcfg.gen';\n\nexport const textPanelMigrationHandler = (panel: PanelModel<Options>): Partial<Options> => {\n  const previousVersion = parseFloat(panel.pluginVersion || '6.1');\n  let options = panel.options;\n\n  // Migrates old Angular based text panel props to new props\n  if (panel.hasOwnProperty('content') && panel.hasOwnProperty('mode')) {\n    const oldTextPanel: any = panel;\n    const content = oldTextPanel.content;\n    const mode: TextMode = oldTextPanel.mode;\n\n    delete oldTextPanel.content;\n    delete oldTextPanel.mode;\n\n    if (previousVersion < 7.1) {\n      options = { content, mode };\n    }\n  }\n\n  // The 'text' mode has been removed so we need to update any panels still using it to markdown\n  const modes = [TextMode.Code, TextMode.HTML, TextMode.Markdown];\n  if (!modes.find((f) => f === options.mode)) {\n    options = { ...options, mode: TextMode.Markdown };\n  }\n\n  return options;\n};\n","import { PanelPlugin } from '@grafana/data';\n\nimport { TextPanel } from './TextPanel';\nimport { TextPanelEditor } from './TextPanelEditor';\nimport { CodeLanguage, defaultCodeOptions, defaultOptions, Options, TextMode } from './panelcfg.gen';\nimport { textPanelMigrationHandler } from './textPanelMigrationHandler';\n\nexport const plugin = new PanelPlugin<Options>(TextPanel)\n  .setPanelOptions((builder) => {\n    builder\n      .addRadio({\n        path: 'mode',\n        name: 'Mode',\n        settings: {\n          options: [\n            { value: TextMode.Markdown, label: 'Markdown' },\n            { value: TextMode.HTML, label: 'HTML' },\n            { value: TextMode.Code, label: 'Code' },\n          ],\n        },\n        defaultValue: defaultOptions.mode,\n      })\n      .addSelect({\n        path: 'code.language',\n        name: 'Language',\n        settings: {\n          options: Object.values(CodeLanguage).map((v) => ({\n            value: v,\n            label: v,\n          })),\n        },\n        defaultValue: defaultCodeOptions.language,\n        showIf: (v) => v.mode === TextMode.Code,\n      })\n      .addBooleanSwitch({\n        path: 'code.showLineNumbers',\n        name: 'Show line numbers',\n        defaultValue: defaultCodeOptions.showLineNumbers,\n        showIf: (v) => v.mode === TextMode.Code,\n      })\n      .addBooleanSwitch({\n        path: 'code.showMiniMap',\n        name: 'Show mini map',\n        defaultValue: defaultCodeOptions.showMiniMap,\n        showIf: (v) => v.mode === TextMode.Code,\n      })\n      .addCustomEditor({\n        id: 'content',\n        path: 'content',\n        name: 'Content',\n        editor: TextPanelEditor,\n        defaultValue: defaultOptions.content,\n      });\n  })\n  .setMigrationHandler(textPanelMigrationHandler);\n"],"names":["createElement","useEffect","useRef","DangerouslySetHtmlContent","html","dangerouslySetInnerHTML","allowRerender","rest","divRef","isFirstRender","slotHtml","module","TextMode","CodeLanguage","defaultCodeLanguage","defaultCodeOptions","defaultOptions","TextPanel","props","styles","getStyles","processed","setProcessed","processContent","config","useDebounce","options","replaceVariables","content","code","CodeEditor","CustomScrollbar","interpolate","disableSanitizeHtml","mode","theme","TextPanelEditor","value","onChange","context","language","getSuggestions","v","width","textPanelMigrationHandler","panel","previousVersion","oldTextPanel","f","PanelPlugin","builder"],"sourceRoot":""}