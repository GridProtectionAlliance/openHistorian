{"version":3,"file":"alertListPanel.6d48cbdd01af1e33e62c.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/components/AlertLabel.tsx","webpack://grafana/./public/app/plugins/panel/alertlist/GroupByWithLoading.tsx","webpack://grafana/./public/app/plugins/panel/alertlist/util.ts","webpack://grafana/./public/app/plugins/panel/alertlist/AlertInstances.tsx","webpack://grafana/./public/app/plugins/panel/alertlist/unified-alerting/GroupedView.tsx","webpack://grafana/./public/app/plugins/panel/alertlist/unified-alerting/UngroupedView.tsx","webpack://grafana/./public/app/plugins/panel/alertlist/UnifiedAlertList.tsx","webpack://grafana/./public/app/plugins/panel/alertlist/module.tsx"],"sourcesContent":["import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { IconButton, useStyles2 } from '@grafana/ui';\n\ninterface Props {\n  labelKey: string;\n  value: string;\n  operator?: string;\n  onRemoveLabel?: () => void;\n}\n\nexport const AlertLabel = ({ labelKey, value, operator = '=', onRemoveLabel }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.wrapper}>\n      {labelKey}\n      {operator}\n      {value}\n      {!!onRemoveLabel && <IconButton name=\"times\" size=\"xs\" onClick={onRemoveLabel} tooltip=\"Remove label\" />}\n    </div>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css({\n    padding: theme.spacing(0.5, 1),\n    borderRadius: theme.shape.radius.default,\n    border: `solid 1px ${theme.colors.border.medium}`,\n    fontSize: theme.typography.bodySmall.fontSize,\n    backgroundColor: theme.colors.background.secondary,\n    fontWeight: theme.typography.fontWeightBold,\n    color: theme.colors.text.primary,\n    display: 'inline-block',\n    lineHeight: '1.2',\n  }),\n});\n","import { isEmpty, uniq } from 'lodash';\nimport { useEffect, useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Icon, MultiSelect } from '@grafana/ui';\nimport { useUnifiedAlertingSelector } from 'app/features/alerting/unified/hooks/useUnifiedAlertingSelector';\nimport { fetchAllPromRulesAction } from 'app/features/alerting/unified/state/actions';\nimport {\n  isAsyncRequestMapSlicePending,\n  isAsyncRequestMapSliceSettled,\n} from 'app/features/alerting/unified/utils/redux';\nimport { useDispatch } from 'app/types';\nimport { AlertingRule } from 'app/types/unified-alerting';\nimport { PromRuleType } from 'app/types/unified-alerting-dto';\n\nimport { fetchPromRulesAction } from '../../../features/alerting/unified/state/actions';\nimport { isPrivateLabelKey } from '../../../features/alerting/unified/utils/labels';\n\ninterface Props {\n  id: string;\n  defaultValue: SelectableValue<string>;\n  onChange: (keys: string[]) => void;\n  dataSource?: string;\n}\n\nexport const GroupBy = (props: Props) => {\n  const { onChange, id, defaultValue, dataSource } = props;\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (dataSource) {\n      dataSource && dispatch(fetchPromRulesAction({ rulesSourceName: dataSource }));\n    } else {\n      dispatch(fetchAllPromRulesAction());\n    }\n  }, [dispatch, dataSource]);\n\n  const promRulesByDatasource = useUnifiedAlertingSelector((state) => state.promRules);\n\n  const allRequestsReady = isAsyncRequestMapSliceSettled(promRulesByDatasource);\n  const loading = isAsyncRequestMapSlicePending(promRulesByDatasource);\n\n  const labels = useMemo(() => {\n    if (isEmpty(promRulesByDatasource)) {\n      return [];\n    }\n\n    if (!allRequestsReady) {\n      return [];\n    }\n\n    const allLabels = Object.keys(promRulesByDatasource)\n      .flatMap((datasource) => promRulesByDatasource[datasource].result ?? [])\n      .flatMap((rules) => rules.groups)\n      .flatMap((group) => group.rules.filter((rule): rule is AlertingRule => rule.type === PromRuleType.Alerting))\n      .flatMap((rule) => rule.alerts ?? [])\n      .map((alert) => Object.keys(alert.labels ?? {}))\n      .flatMap((labels) => labels.filter((label) => !isPrivateLabelKey(label)));\n\n    return uniq(allLabels);\n  }, [allRequestsReady, promRulesByDatasource]);\n\n  return (\n    <MultiSelect<string>\n      id={id}\n      isLoading={loading}\n      defaultValue={defaultValue}\n      aria-label={'group by label keys'}\n      placeholder=\"Group by\"\n      prefix={<Icon name={'tag-alt'} />}\n      onChange={(items) => {\n        onChange(items.map((item) => item.value ?? ''));\n      }}\n      options={labels.map<SelectableValue>((key) => ({\n        label: key,\n        value: key,\n      }))}\n    />\n  );\n};\n","import { isEmpty } from 'lodash';\n\nimport { Labels } from '@grafana/data';\nimport { labelsMatchMatchers } from 'app/features/alerting/unified/utils/alertmanager';\nimport { parsePromQLStyleMatcherLooseSafe } from 'app/features/alerting/unified/utils/matchers';\nimport { Alert, hasAlertState } from 'app/types/unified-alerting';\nimport { GrafanaAlertState, PromAlertingRuleState } from 'app/types/unified-alerting-dto';\n\nimport { UnifiedAlertListOptions } from './types';\n\nfunction hasLabelFilter(alertInstanceLabelFilter: string, labels: Labels) {\n  const matchers = parsePromQLStyleMatcherLooseSafe(alertInstanceLabelFilter);\n  return labelsMatchMatchers(labels, matchers);\n}\n\nexport function filterAlerts(\n  options: Pick<UnifiedAlertListOptions, 'stateFilter' | 'alertInstanceLabelFilter'>,\n  alerts: Alert[]\n): Alert[] {\n  const { stateFilter, alertInstanceLabelFilter } = options;\n\n  if (isEmpty(stateFilter)) {\n    return alerts;\n  }\n\n  return alerts.filter((alert) => {\n    return (\n      ((stateFilter.firing &&\n        (hasAlertState(alert, GrafanaAlertState.Alerting) || hasAlertState(alert, PromAlertingRuleState.Firing))) ||\n        (stateFilter.pending &&\n          (hasAlertState(alert, GrafanaAlertState.Pending) || hasAlertState(alert, PromAlertingRuleState.Pending))) ||\n        (stateFilter.noData && hasAlertState(alert, GrafanaAlertState.NoData)) ||\n        (stateFilter.normal && hasAlertState(alert, GrafanaAlertState.Normal)) ||\n        (stateFilter.error && hasAlertState(alert, GrafanaAlertState.Error)) ||\n        (stateFilter.inactive && hasAlertState(alert, PromAlertingRuleState.Inactive))) &&\n      (alertInstanceLabelFilter ? hasLabelFilter(options.alertInstanceLabelFilter, alert.labels) : true)\n    );\n  });\n}\n","import { css, cx } from '@emotion/css';\nimport { noop } from 'lodash';\nimport pluralize from 'pluralize';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { GrafanaTheme2, PanelProps } from '@grafana/data';\nimport { Button, clearButtonStyles, Icon, useStyles2 } from '@grafana/ui';\nimport { AlertInstancesTable } from 'app/features/alerting/unified/components/rules/AlertInstancesTable';\nimport { INSTANCES_DISPLAY_LIMIT } from 'app/features/alerting/unified/components/rules/RuleDetails';\nimport { sortAlerts } from 'app/features/alerting/unified/utils/misc';\nimport { Alert, CombinedRule } from 'app/types/unified-alerting';\n\nimport { DEFAULT_PER_PAGE_PAGINATION } from '../../../core/constants';\n\nimport { GroupMode, UnifiedAlertListOptions } from './types';\nimport { filterAlerts } from './util';\n\ninterface Props {\n  rule?: CombinedRule;\n  alerts: Alert[];\n  options: PanelProps<UnifiedAlertListOptions>['options'];\n  grafanaTotalInstances?: number;\n  grafanaFilteredInstancesTotal?: number;\n  handleInstancesLimit?: (limit: boolean) => void;\n  limitInstances?: boolean;\n}\n\nexport const AlertInstances = ({\n  rule,\n  alerts,\n  options,\n  grafanaTotalInstances,\n  handleInstancesLimit,\n  limitInstances,\n  grafanaFilteredInstancesTotal,\n}: Props) => {\n  // when custom grouping is enabled, we will always uncollapse the list of alert instances\n  const defaultShowInstances = options.groupMode === GroupMode.Custom ? true : options.showInstances;\n  const [displayInstances, setDisplayInstances] = useState<boolean>(defaultShowInstances);\n  const styles = useStyles2(getStyles);\n  const clearButton = useStyles2(clearButtonStyles);\n\n  const toggleDisplayInstances = useCallback(() => {\n    setDisplayInstances((display) => !display);\n  }, []);\n\n  // TODO Filtering instances here has some implications\n  // If a rule has 0 instances after filtering there is no way not to show that rule\n  const filteredAlerts = useMemo(\n    (): Alert[] => filterAlerts(options, sortAlerts(options.sortOrder, alerts)) ?? [],\n    [alerts, options]\n  );\n  const isGrafanaAlert = grafanaTotalInstances !== undefined;\n\n  const hiddenInstancesForGrafanaAlerts =\n    grafanaTotalInstances && grafanaFilteredInstancesTotal ? grafanaTotalInstances - grafanaFilteredInstancesTotal : 0;\n  const hiddenInstancesForNonGrafanaAlerts = alerts.length - filteredAlerts.length;\n\n  const hiddenInstances = isGrafanaAlert ? hiddenInstancesForGrafanaAlerts : hiddenInstancesForNonGrafanaAlerts;\n\n  const uncollapsible = filteredAlerts.length > 0;\n  const toggleShowInstances = uncollapsible ? toggleDisplayInstances : noop;\n\n  useEffect(() => {\n    if (filteredAlerts.length === 0) {\n      setDisplayInstances(false);\n    }\n  }, [filteredAlerts]);\n\n  const onShowAllClick = async () => {\n    if (!handleInstancesLimit) {\n      return;\n    }\n    handleInstancesLimit(false);\n    setDisplayInstances(true);\n  };\n\n  const onShowLimitedClick = async () => {\n    if (!handleInstancesLimit) {\n      return;\n    }\n    handleInstancesLimit(true);\n    setDisplayInstances(true);\n  };\n  const totalInstancesGrafana = limitInstances ? grafanaFilteredInstancesTotal : filteredAlerts.length;\n  const totalInstancesNotGrafana = filteredAlerts.length;\n  const totalInstancesNumber = isGrafanaAlert ? totalInstancesGrafana : totalInstancesNotGrafana;\n\n  const limitStatus = limitInstances\n    ? `Showing ${INSTANCES_DISPLAY_LIMIT} of ${grafanaTotalInstances} instances`\n    : `Showing all ${grafanaTotalInstances} instances`;\n\n  const limitButtonLabel = limitInstances\n    ? 'View all instances'\n    : `Limit the result to ${INSTANCES_DISPLAY_LIMIT} instances`;\n\n  const instancesLimitedAndOverflowed =\n    grafanaTotalInstances &&\n    INSTANCES_DISPLAY_LIMIT === filteredAlerts.length &&\n    grafanaTotalInstances > filteredAlerts.length;\n  const instancesNotLimitedAndoverflowed =\n    grafanaTotalInstances && INSTANCES_DISPLAY_LIMIT < filteredAlerts.length && !limitInstances;\n\n  const footerRow =\n    instancesLimitedAndOverflowed || instancesNotLimitedAndoverflowed ? (\n      <div className={styles.footerRow}>\n        <div>{limitStatus}</div>\n        {\n          <Button size=\"sm\" variant=\"secondary\" onClick={limitInstances ? onShowAllClick : onShowLimitedClick}>\n            {limitButtonLabel}\n          </Button>\n        }\n      </div>\n    ) : undefined;\n\n  return (\n    <div>\n      {options.groupMode === GroupMode.Default && (\n        <button\n          className={cx(clearButton, uncollapsible ? styles.clickable : '')}\n          onClick={() => toggleShowInstances()}\n        >\n          {uncollapsible && <Icon name={displayInstances ? 'angle-down' : 'angle-right'} size={'md'} />}\n          <span>{`${totalInstancesNumber} ${pluralize('instance', totalInstancesNumber)}`}</span>\n          {hiddenInstances > 0 && <span>, {`${hiddenInstances} hidden by filters`}</span>}\n        </button>\n      )}\n      {displayInstances && (\n        <AlertInstancesTable\n          rule={rule}\n          instances={filteredAlerts}\n          pagination={{ itemsPerPage: 2 * DEFAULT_PER_PAGE_PAGINATION }}\n          footerRow={footerRow}\n        />\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  clickable: css`\n    cursor: pointer;\n  `,\n  footerRow: css`\n    display: flex;\n    flex-direction: column;\n    gap: ${theme.spacing(1)};\n    justify-content: space-between;\n    align-items: center;\n    width: 100%;\n  `,\n});\n","import { useMemo } from 'react';\n\nimport { useStyles2 } from '@grafana/ui';\nimport { AlertLabel } from 'app/features/alerting/unified/components/AlertLabel';\nimport { getAlertingRule } from 'app/features/alerting/unified/utils/rules';\nimport { Alert } from 'app/types/unified-alerting';\n\nimport { CombinedRuleWithLocation } from '../../../../types/unified-alerting';\nimport { AlertInstances } from '../AlertInstances';\nimport { getStyles } from '../UnifiedAlertList';\nimport { UnifiedAlertListOptions } from '../types';\nimport { filterAlerts } from '../util';\n\ntype Props = {\n  rules: CombinedRuleWithLocation[];\n  options: UnifiedAlertListOptions;\n};\n\ntype RuleWithAlerts = {\n  rule?: CombinedRuleWithLocation;\n  alerts: Alert[];\n};\n\nexport const UNGROUPED_KEY = '__ungrouped__';\n\nconst GroupedModeView = ({ rules, options }: Props) => {\n  const styles = useStyles2(getStyles);\n  const groupBy = options.groupBy;\n\n  const groupedRules = useMemo<Map<string, RuleWithAlerts>>(() => {\n    const groupedRules = new Map<string, RuleWithAlerts>();\n\n    const hasInstancesWithMatchingLabels = (rule: CombinedRuleWithLocation) =>\n      groupBy ? alertHasEveryLabelForCombinedRules(rule, groupBy) : true;\n\n    rules.forEach((rule) => {\n      const alertingRule = getAlertingRule(rule);\n      const hasInstancesMatching = hasInstancesWithMatchingLabels(rule);\n\n      (alertingRule?.alerts ?? []).forEach((alert) => {\n        const mapKey = hasInstancesMatching ? createMapKey(groupBy, alert.labels) : UNGROUPED_KEY;\n\n        const existingAlerts = groupedRules.get(mapKey)?.alerts ?? [];\n        groupedRules.set(mapKey, { rule, alerts: [...existingAlerts, alert] });\n      });\n    });\n\n    // move the \"UNGROUPED\" key to the last item in the Map, items are shown in insertion order\n    const ungrouped = groupedRules.get(UNGROUPED_KEY)?.alerts ?? [];\n    groupedRules.delete(UNGROUPED_KEY);\n    groupedRules.set(UNGROUPED_KEY, { alerts: ungrouped });\n\n    // Remove groups having no instances\n    // This is different from filtering Rules without instances that we do in UnifiedAlertList\n    const filteredGroupedRules = Array.from(groupedRules.entries()).reduce(\n      (acc, [groupKey, { rule, alerts: groupAlerts }]) => {\n        const filteredAlerts = filterAlerts(options, groupAlerts);\n        if (filteredAlerts.length > 0) {\n          acc.set(groupKey, { rule, alerts: filteredAlerts });\n        }\n\n        return acc;\n      },\n      new Map<string, RuleWithAlerts>()\n    );\n\n    return filteredGroupedRules;\n  }, [groupBy, rules, options]);\n\n  return (\n    <>\n      {Array.from(groupedRules).map(([key, { rule, alerts }]) => (\n        <li className={styles.alertRuleItem} key={key} data-testid={key}>\n          <div>\n            <div className={styles.customGroupDetails}>\n              <div className={styles.alertLabels}>\n                {key !== UNGROUPED_KEY &&\n                  parseMapKey(key).map(([key, value]) => <AlertLabel key={key} labelKey={key} value={value} />)}\n                {key === UNGROUPED_KEY && 'No grouping'}\n              </div>\n            </div>\n            <AlertInstances rule={rule} alerts={alerts} options={options} />\n          </div>\n        </li>\n      ))}\n    </>\n  );\n};\n\nfunction createMapKey(groupBy: string[], labels: Record<string, string>): string {\n  return new URLSearchParams(groupBy.map((key) => [key, labels[key]])).toString();\n}\n\nfunction parseMapKey(key: string): Array<[string, string]> {\n  return [...new URLSearchParams(key)];\n}\n\nfunction alertHasEveryLabelForCombinedRules(rule: CombinedRuleWithLocation, groupByKeys: string[]) {\n  const alertingRule = getAlertingRule(rule);\n  return groupByKeys.every((key) => {\n    return (alertingRule?.alerts ?? []).some((alert) => alert.labels[key]);\n  });\n}\n\nexport default GroupedModeView;\n","import { css, cx } from '@emotion/css';\nimport { useLocation } from 'react-use';\n\nimport { GrafanaTheme2, intervalToAbbreviatedDurationString } from '@grafana/data';\nimport { Icon, Stack, useStyles2 } from '@grafana/ui';\nimport alertDef from 'app/features/alerting/state/alertDef';\nimport { Spacer } from 'app/features/alerting/unified/components/Spacer';\nimport { fromCombinedRule, stringifyIdentifier } from 'app/features/alerting/unified/utils/rule-id';\nimport {\n  alertStateToReadable,\n  alertStateToState,\n  getFirstActiveAt,\n  isAlertingRule,\n} from 'app/features/alerting/unified/utils/rules';\nimport { createRelativeUrl } from 'app/features/alerting/unified/utils/url';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\n\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../../../features/alerting/unified/utils/datasource';\nimport { AlertInstanceTotalState, AlertingRule, CombinedRuleWithLocation } from '../../../../types/unified-alerting';\nimport { AlertInstances } from '../AlertInstances';\nimport { getStyles } from '../UnifiedAlertList';\nimport { UnifiedAlertListOptions } from '../types';\n\ntype Props = {\n  rules: CombinedRuleWithLocation[];\n  options: UnifiedAlertListOptions;\n  handleInstancesLimit?: (limit: boolean) => void;\n  limitInstances: boolean;\n  hideViewRuleLinkText?: boolean;\n};\n\nfunction getGrafanaInstancesTotal(totals: Partial<Record<AlertInstanceTotalState, number>>) {\n  return Object.values(totals)\n    .filter((total) => total !== undefined)\n    .reduce((total, currentTotal) => total + currentTotal, 0);\n}\n\nconst UngroupedModeView = ({ rules, options, handleInstancesLimit, limitInstances, hideViewRuleLinkText }: Props) => {\n  const styles = useStyles2(getStyles);\n  const stateStyle = useStyles2(getStateTagStyles);\n  const { href: returnTo } = useLocation();\n\n  const rulesToDisplay = rules.length <= options.maxItems ? rules : rules.slice(0, options.maxItems);\n\n  return (\n    <>\n      <ol className={styles.alertRuleList}>\n        {rulesToDisplay.map((ruleWithLocation, index) => {\n          const { namespaceName, groupName, dataSourceName } = ruleWithLocation;\n          const alertingRule: AlertingRule | undefined = isAlertingRule(ruleWithLocation.promRule)\n            ? ruleWithLocation.promRule\n            : undefined;\n          const firstActiveAt = getFirstActiveAt(alertingRule);\n          const indentifier = fromCombinedRule(ruleWithLocation.dataSourceName, ruleWithLocation);\n          const strIndentifier = stringifyIdentifier(indentifier);\n\n          const grafanaInstancesTotal =\n            ruleWithLocation.dataSourceName === GRAFANA_RULES_SOURCE_NAME\n              ? getGrafanaInstancesTotal(ruleWithLocation.instanceTotals)\n              : undefined;\n          const grafanaFilteredInstancesTotal =\n            ruleWithLocation.dataSourceName === GRAFANA_RULES_SOURCE_NAME\n              ? getGrafanaInstancesTotal(ruleWithLocation.filteredInstanceTotals)\n              : undefined;\n\n          const href = createRelativeUrl(\n            `/alerting/${encodeURIComponent(dataSourceName)}/${encodeURIComponent(strIndentifier)}/view`,\n            { returnTo: returnTo ?? '' }\n          );\n          if (alertingRule) {\n            return (\n              <li\n                className={styles.alertRuleItem}\n                key={`alert-${namespaceName}-${groupName}-${ruleWithLocation.name}-${index}`}\n              >\n                <div className={stateStyle.icon}>\n                  <Icon\n                    name={alertDef.getStateDisplayModel(alertingRule.state).iconClass}\n                    className={stateStyle[alertStateToState(alertingRule.state)]}\n                    size={'lg'}\n                  />\n                </div>\n                <div className={styles.alertNameWrapper}>\n                  <div className={styles.instanceDetails}>\n                    <Stack direction=\"row\" gap={1}>\n                      <div className={styles.alertName} title={ruleWithLocation.name}>\n                        {ruleWithLocation.name}\n                      </div>\n                      <Spacer />\n                      {href && (\n                        <a\n                          href={href}\n                          target=\"__blank\"\n                          className={styles.link}\n                          rel=\"noopener\"\n                          aria-label=\"View alert rule\"\n                        >\n                          <span className={cx({ [styles.hidden]: hideViewRuleLinkText })}>View alert rule</span>\n                          <Icon name={'external-link-alt'} size=\"sm\" />\n                        </a>\n                      )}\n                    </Stack>\n                    <div className={styles.alertDuration}>\n                      <span className={stateStyle[alertStateToState(alertingRule.state)]}>\n                        {alertStateToReadable(alertingRule.state)}\n                      </span>{' '}\n                      {firstActiveAt && alertingRule.state !== PromAlertingRuleState.Inactive && (\n                        <>\n                          for{' '}\n                          <span>\n                            {intervalToAbbreviatedDurationString({\n                              start: firstActiveAt,\n                              end: Date.now(),\n                            })}\n                          </span>\n                        </>\n                      )}\n                    </div>\n                  </div>\n                  <AlertInstances\n                    rule={ruleWithLocation}\n                    alerts={alertingRule.alerts ?? []}\n                    options={options}\n                    grafanaTotalInstances={grafanaInstancesTotal}\n                    grafanaFilteredInstancesTotal={grafanaFilteredInstancesTotal}\n                    handleInstancesLimit={handleInstancesLimit}\n                    limitInstances={limitInstances}\n                  />\n                </div>\n              </li>\n            );\n          } else {\n            return null;\n          }\n        })}\n      </ol>\n    </>\n  );\n};\n\nconst getStateTagStyles = (theme: GrafanaTheme2) => ({\n  common: css`\n    width: 70px;\n    text-align: center;\n    align-self: stretch;\n\n    display: inline-block;\n    color: white;\n    border-radius: ${theme.shape.radius.default};\n    font-size: ${theme.typography.bodySmall.fontSize};\n    text-transform: capitalize;\n    line-height: 1.2;\n    flex-shrink: 0;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n  `,\n  icon: css`\n    margin-top: ${theme.spacing(2.5)};\n    align-self: flex-start;\n  `,\n  good: css`\n    color: ${theme.colors.success.main};\n  `,\n  bad: css`\n    color: ${theme.colors.error.main};\n  `,\n  warning: css`\n    color: ${theme.colors.warning.main};\n  `,\n  neutral: css`\n    color: ${theme.colors.secondary.main};\n  `,\n  info: css`\n    color: ${theme.colors.primary.main};\n  `,\n});\n\nexport default UngroupedModeView;\n","import { css } from '@emotion/css';\nimport { sortBy } from 'lodash';\nimport { useEffect, useMemo } from 'react';\nimport { useEffectOnce, useToggle } from 'react-use';\n\nimport { GrafanaTheme2, PanelProps } from '@grafana/data';\nimport { TimeRangeUpdatedEvent } from '@grafana/runtime';\nimport {\n  Alert,\n  BigValue,\n  BigValueGraphMode,\n  BigValueJustifyMode,\n  BigValueTextMode,\n  CustomScrollbar,\n  LoadingPlaceholder,\n  useStyles2,\n} from '@grafana/ui';\nimport { config } from 'app/core/config';\nimport alertDef from 'app/features/alerting/state/alertDef';\nimport { alertRuleApi } from 'app/features/alerting/unified/api/alertRuleApi';\nimport { INSTANCES_DISPLAY_LIMIT } from 'app/features/alerting/unified/components/rules/RuleDetails';\nimport { useCombinedRuleNamespaces } from 'app/features/alerting/unified/hooks/useCombinedRuleNamespaces';\nimport { useUnifiedAlertingSelector } from 'app/features/alerting/unified/hooks/useUnifiedAlertingSelector';\nimport {\n  fetchAllPromAndRulerRulesAction,\n  fetchPromAndRulerRulesAction,\n} from 'app/features/alerting/unified/state/actions';\nimport { Annotation } from 'app/features/alerting/unified/utils/constants';\nimport { GRAFANA_DATASOURCE_NAME, GRAFANA_RULES_SOURCE_NAME } from 'app/features/alerting/unified/utils/datasource';\nimport { parsePromQLStyleMatcherLooseSafe } from 'app/features/alerting/unified/utils/matchers';\nimport {\n  isAsyncRequestMapSlicePartiallyDispatched,\n  isAsyncRequestMapSlicePartiallyFulfilled,\n  isAsyncRequestMapSlicePending,\n} from 'app/features/alerting/unified/utils/redux';\nimport { flattenCombinedRules, getFirstActiveAt } from 'app/features/alerting/unified/utils/rules';\nimport { getDashboardSrv } from 'app/features/dashboard/services/DashboardSrv';\nimport { DashboardModel } from 'app/features/dashboard/state';\nimport { Matcher } from 'app/plugins/datasource/alertmanager/types';\nimport { ThunkDispatch, useDispatch } from 'app/types';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\n\nimport { AlertingAction, useAlertingAbility } from '../../../features/alerting/unified/hooks/useAbilities';\nimport { getAlertingRule } from '../../../features/alerting/unified/utils/rules';\nimport { AlertingRule, CombinedRuleWithLocation } from '../../../types/unified-alerting';\n\nimport { GroupMode, SortOrder, StateFilter, UnifiedAlertListOptions, ViewMode } from './types';\nimport GroupedModeView from './unified-alerting/GroupedView';\nimport UngroupedModeView from './unified-alerting/UngroupedView';\nimport { filterAlerts } from './util';\n\nfunction getStateList(state: StateFilter) {\n  const reducer = (list: string[], [stateKey, value]: [string, boolean]) => {\n    if (Boolean(value)) {\n      return [...list, stateKey];\n    } else {\n      return list;\n    }\n  };\n  return Object.entries(state).reduce(reducer, []);\n}\n\nconst fetchPromAndRuler = ({\n  dispatch,\n  limitInstances,\n  matcherList,\n  dataSourceName,\n  stateList,\n}: {\n  dispatch: ThunkDispatch;\n  limitInstances: boolean;\n  matcherList?: Matcher[] | undefined;\n  dataSourceName?: string;\n  stateList: string[];\n}) => {\n  if (dataSourceName) {\n    dispatch(\n      fetchPromAndRulerRulesAction({\n        rulesSourceName: dataSourceName,\n        limitAlerts: limitInstances ? INSTANCES_DISPLAY_LIMIT : undefined,\n        matcher: matcherList,\n        state: stateList,\n      })\n    );\n  } else {\n    dispatch(\n      fetchAllPromAndRulerRulesAction(false, {\n        limitAlerts: limitInstances ? INSTANCES_DISPLAY_LIMIT : undefined,\n        matcher: matcherList,\n        state: stateList,\n      })\n    );\n  }\n};\n\nfunction UnifiedAlertList(props: PanelProps<UnifiedAlertListOptions>) {\n  const dispatch = useDispatch();\n  const [limitInstances, toggleLimit] = useToggle(true);\n  const [, gmaViewAllowed] = useAlertingAbility(AlertingAction.ViewAlertRule);\n\n  const { usePrometheusRulesByNamespaceQuery } = alertRuleApi;\n\n  const promRulesRequests = useUnifiedAlertingSelector((state) => state.promRules);\n  const rulerRulesRequests = useUnifiedAlertingSelector((state) => state.rulerRules);\n\n  const somePromRulesDispatched = isAsyncRequestMapSlicePartiallyDispatched(promRulesRequests);\n\n  const hideViewRuleLinkText = props.width < 320;\n\n  // backwards compat for \"Inactive\" state filter\n  useEffect(() => {\n    if (props.options.stateFilter.inactive === true) {\n      props.options.stateFilter.normal = true; // enable the normal filter\n    }\n    props.options.stateFilter.inactive = undefined; // now disable inactive\n  }, [props.options.stateFilter]);\n\n  let dashboard: DashboardModel | undefined = undefined;\n\n  useEffectOnce(() => {\n    dashboard = getDashboardSrv().getCurrent();\n  });\n\n  const stateList = useMemo(() => getStateList(props.options.stateFilter), [props.options.stateFilter]);\n  const { options, replaceVariables } = props;\n  const dataSourceName =\n    options.datasource === GRAFANA_DATASOURCE_NAME ? GRAFANA_RULES_SOURCE_NAME : options.datasource;\n  const parsedOptions: UnifiedAlertListOptions = {\n    ...props.options,\n    alertName: replaceVariables(options.alertName),\n    alertInstanceLabelFilter: replaceVariables(options.alertInstanceLabelFilter),\n  };\n\n  const matcherList = useMemo(\n    () => parsePromQLStyleMatcherLooseSafe(parsedOptions.alertInstanceLabelFilter),\n    [parsedOptions.alertInstanceLabelFilter]\n  );\n\n  // If the datasource is not defined we should NOT skip the query\n  // Undefined dataSourceName means that there is no datasource filter applied and we should fetch all the rules\n  const shouldFetchGrafanaRules = (!dataSourceName || dataSourceName === GRAFANA_RULES_SOURCE_NAME) && gmaViewAllowed;\n\n  //For grafana managed rules, get the result using RTK Query to avoid the need of using the redux store\n  //See https://github.com/grafana/grafana/pull/70482\n  const {\n    currentData: grafanaPromRules = [],\n    isLoading: grafanaRulesLoading,\n    refetch: refetchGrafanaPromRules,\n  } = usePrometheusRulesByNamespaceQuery(\n    {\n      limitAlerts: limitInstances ? INSTANCES_DISPLAY_LIMIT : undefined,\n      matcher: matcherList,\n      state: stateList,\n    },\n    { skip: !shouldFetchGrafanaRules }\n  );\n\n  useEffect(() => {\n    //we need promRules and rulerRules for getting the uid when creating the alert link in panel in case of being a rulerRule.\n    if (!promRulesRequests.loading) {\n      fetchPromAndRuler({ dispatch, limitInstances, matcherList, dataSourceName, stateList });\n    }\n    const sub = dashboard?.events.subscribe(TimeRangeUpdatedEvent, () => {\n      if (shouldFetchGrafanaRules) {\n        refetchGrafanaPromRules();\n      }\n\n      if (!dataSourceName || dataSourceName !== GRAFANA_RULES_SOURCE_NAME) {\n        fetchPromAndRuler({ dispatch, limitInstances, matcherList, dataSourceName, stateList });\n      }\n    });\n    return () => {\n      sub?.unsubscribe();\n    };\n  }, [\n    dispatch,\n    dashboard,\n    matcherList,\n    stateList,\n    limitInstances,\n    dataSourceName,\n    refetchGrafanaPromRules,\n    shouldFetchGrafanaRules,\n    promRulesRequests.loading,\n  ]);\n\n  const handleInstancesLimit = (limit: boolean) => {\n    if (limit) {\n      fetchPromAndRuler({ dispatch, limitInstances, matcherList, dataSourceName, stateList });\n      toggleLimit(true);\n    } else {\n      fetchPromAndRuler({ dispatch, limitInstances: false, matcherList, dataSourceName, stateList });\n      toggleLimit(false);\n    }\n  };\n\n  const combinedRules = useCombinedRuleNamespaces(undefined, grafanaPromRules);\n\n  const someRulerRulesDispatched = isAsyncRequestMapSlicePartiallyDispatched(rulerRulesRequests);\n  const haveResults = isAsyncRequestMapSlicePartiallyFulfilled(promRulesRequests);\n\n  const dispatched = somePromRulesDispatched || someRulerRulesDispatched;\n  const loading = isAsyncRequestMapSlicePending(promRulesRequests);\n\n  const styles = useStyles2(getStyles);\n\n  const flattenedCombinedRules = flattenCombinedRules(combinedRules);\n  const order = props.options.sortOrder;\n\n  const rules = useMemo(\n    () => filterRules(props, sortRules(order, flattenedCombinedRules)),\n    [flattenedCombinedRules, order, props]\n  );\n\n  const noAlertsMessage = rules.length === 0 ? 'No alerts matching filters' : undefined;\n\n  const renderLoading = grafanaRulesLoading || (dispatched && loading && !haveResults);\n\n  const havePreviousResults = Object.values(promRulesRequests).some((state) => state.result);\n\n  return (\n    <CustomScrollbar autoHeightMin=\"100%\" autoHeightMax=\"100%\">\n      <div className={styles.container}>\n        {havePreviousResults && noAlertsMessage && <div className={styles.noAlertsMessage}>{noAlertsMessage}</div>}\n        {havePreviousResults && (\n          <section>\n            {props.options.viewMode === ViewMode.Stat && (\n              <BigValue\n                width={props.width}\n                height={props.height}\n                graphMode={BigValueGraphMode.None}\n                textMode={BigValueTextMode.Auto}\n                justifyMode={BigValueJustifyMode.Auto}\n                theme={config.theme2}\n                value={{ text: `${rules.length}`, numeric: rules.length }}\n              />\n            )}\n            {props.options.viewMode === ViewMode.List && props.options.groupMode === GroupMode.Custom && (\n              <GroupedModeView rules={rules} options={parsedOptions} />\n            )}\n            {props.options.viewMode === ViewMode.List && props.options.groupMode === GroupMode.Default && (\n              <UngroupedModeView\n                rules={rules}\n                options={parsedOptions}\n                handleInstancesLimit={handleInstancesLimit}\n                limitInstances={limitInstances}\n                hideViewRuleLinkText={hideViewRuleLinkText}\n              />\n            )}\n          </section>\n        )}\n        {/* loading moved here to avoid twitching  */}\n        {renderLoading && <LoadingPlaceholder text=\"Loading...\" />}\n      </div>\n    </CustomScrollbar>\n  );\n}\n\nfunction sortRules(sortOrder: SortOrder, rules: CombinedRuleWithLocation[]) {\n  if (sortOrder === SortOrder.Importance) {\n    // @ts-ignore\n    return sortBy(rules, (rule) => alertDef.alertStateSortScore[rule.state]);\n  } else if (sortOrder === SortOrder.TimeAsc) {\n    return sortBy(rules, (rule) => {\n      //at this point rules are all AlertingRule, this check is only needed for Typescript checks\n      const alertingRule: AlertingRule | undefined = getAlertingRule(rule) ?? undefined;\n      return getFirstActiveAt(alertingRule) || new Date();\n    });\n  } else if (sortOrder === SortOrder.TimeDesc) {\n    return sortBy(rules, (rule) => {\n      //at this point rules are all AlertingRule, this check is only needed for Typescript checks\n      const alertingRule: AlertingRule | undefined = getAlertingRule(rule) ?? undefined;\n      return getFirstActiveAt(alertingRule) || new Date();\n    }).reverse();\n  }\n  const result = sortBy(rules, (rule) => rule.name.toLowerCase());\n  if (sortOrder === SortOrder.AlphaDesc) {\n    result.reverse();\n  }\n\n  return result;\n}\n\nfunction filterRules(props: PanelProps<UnifiedAlertListOptions>, rules: CombinedRuleWithLocation[]) {\n  const { options, replaceVariables } = props;\n\n  let filteredRules = [...rules];\n  if (options.dashboardAlerts) {\n    const dashboardUid = getDashboardSrv().getCurrent()?.uid;\n    filteredRules = filteredRules.filter(({ annotations = {} }) =>\n      Object.entries(annotations).some(([key, value]) => key === Annotation.dashboardUID && value === dashboardUid)\n    );\n  }\n  if (options.alertName) {\n    const replacedName = replaceVariables(options.alertName);\n    filteredRules = filteredRules.filter(({ name }) =>\n      name.toLocaleLowerCase().includes(replacedName.toLocaleLowerCase())\n    );\n  }\n\n  filteredRules = filteredRules.filter((rule) => {\n    const alertingRule = getAlertingRule(rule);\n    if (!alertingRule) {\n      return false;\n    }\n    return (\n      (options.stateFilter.firing && alertingRule.state === PromAlertingRuleState.Firing) ||\n      (options.stateFilter.pending && alertingRule.state === PromAlertingRuleState.Pending) ||\n      (options.stateFilter.normal && alertingRule.state === PromAlertingRuleState.Inactive)\n    );\n  });\n\n  if (options.folder) {\n    filteredRules = filteredRules.filter((rule) => {\n      return rule.namespaceName === options.folder.title;\n    });\n  }\n  if (options.datasource) {\n    const isGrafanaDS = options.datasource === GRAFANA_DATASOURCE_NAME;\n\n    filteredRules = filteredRules.filter(\n      isGrafanaDS\n        ? ({ dataSourceName }) => dataSourceName === GRAFANA_RULES_SOURCE_NAME\n        : ({ dataSourceName }) => dataSourceName === options.datasource\n    );\n  }\n\n  // Remove rules having 0 instances\n  // AlertInstances filters instances and we need to prevent situation\n  // when we display a rule with 0 instances\n  filteredRules = filteredRules.reduce<CombinedRuleWithLocation[]>((rules, rule) => {\n    const alertingRule = getAlertingRule(rule);\n    const filteredAlerts = alertingRule\n      ? filterAlerts(\n          {\n            stateFilter: options.stateFilter,\n            alertInstanceLabelFilter: replaceVariables(options.alertInstanceLabelFilter),\n          },\n          alertingRule.alerts ?? []\n        )\n      : [];\n    if (filteredAlerts.length) {\n      // We intentionally don't set alerts to filteredAlerts\n      // because later we couldn't display that some alerts are hidden (ref AlertInstances filtering)\n      rules.push(rule);\n    }\n    return rules;\n  }, []);\n\n  return filteredRules;\n}\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  cardContainer: css`\n    padding: ${theme.spacing(0.5)} 0 ${theme.spacing(0.25)} 0;\n    line-height: ${theme.typography.body.lineHeight};\n    margin-bottom: 0px;\n  `,\n  container: css`\n    overflow-y: auto;\n    height: 100%;\n  `,\n  alertRuleList: css`\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-between;\n    list-style-type: none;\n  `,\n  alertRuleItem: css`\n    display: flex;\n    align-items: center;\n    width: 100%;\n    height: 100%;\n    background: ${theme.colors.background.secondary};\n    padding: ${theme.spacing(0.5)} ${theme.spacing(1)};\n    border-radius: ${theme.shape.radius.default};\n    margin-bottom: ${theme.spacing(0.5)};\n\n    gap: ${theme.spacing(2)};\n  `,\n  alertName: css`\n    font-size: ${theme.typography.h6.fontSize};\n    font-weight: ${theme.typography.fontWeightBold};\n\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  `,\n  alertNameWrapper: css`\n    display: flex;\n    flex: 1;\n    flex-wrap: nowrap;\n    flex-direction: column;\n\n    min-width: 100px;\n  `,\n  alertLabels: css`\n    > * {\n      margin-right: ${theme.spacing(0.5)};\n    }\n  `,\n  alertDuration: css`\n    font-size: ${theme.typography.bodySmall.fontSize};\n  `,\n  alertRuleItemText: css`\n    font-weight: ${theme.typography.fontWeightBold};\n    font-size: ${theme.typography.bodySmall.fontSize};\n    margin: 0;\n  `,\n  alertRuleItemTime: css`\n    color: ${theme.colors.text.secondary};\n    font-weight: normal;\n    white-space: nowrap;\n  `,\n  alertRuleItemInfo: css`\n    font-weight: normal;\n    flex-grow: 2;\n    display: flex;\n    align-items: flex-end;\n  `,\n  noAlertsMessage: css`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n    height: 100%;\n  `,\n  alertIcon: css`\n    margin-right: ${theme.spacing(0.5)};\n  `,\n  instanceDetails: css`\n    min-width: 1px;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  `,\n  customGroupDetails: css`\n    margin-bottom: ${theme.spacing(0.5)};\n  `,\n  link: css`\n    word-break: break-all;\n    color: ${theme.colors.primary.text};\n    display: flex;\n    align-items: center;\n    gap: ${theme.spacing(1)};\n  `,\n  hidden: css`\n    display: none;\n  `,\n});\n\nexport function UnifiedAlertListPanel(props: PanelProps<UnifiedAlertListOptions>) {\n  const [, gmaReadAllowed] = useAlertingAbility(AlertingAction.ViewAlertRule);\n  const [, externalReadAllowed] = useAlertingAbility(AlertingAction.ViewExternalAlertRule);\n\n  if (!gmaReadAllowed && !externalReadAllowed) {\n    return (\n      <Alert title=\"Permission required\">Sorry, you do not have the required permissions to read alert rules</Alert>\n    );\n  }\n\n  return <UnifiedAlertList {...props} />;\n}\n","import { DataSourceInstanceSettings, PanelPlugin } from '@grafana/data';\nimport { Button, Stack } from '@grafana/ui';\nimport { OldFolderPicker } from 'app/core/components/Select/OldFolderPicker';\nimport { DataSourcePicker } from 'app/features/datasources/components/picker/DataSourcePicker';\nimport { PermissionLevelString } from 'app/types';\n\nimport { GRAFANA_DATASOURCE_NAME } from '../../../features/alerting/unified/utils/datasource';\n\nimport { GroupBy } from './GroupByWithLoading';\nimport { UnifiedAlertListPanel } from './UnifiedAlertList';\nimport { UnifiedAlertListOptions, ViewMode, GroupMode, SortOrder } from './types';\n\nconst unifiedAlertList = new PanelPlugin<UnifiedAlertListOptions>(UnifiedAlertListPanel).setPanelOptions((builder) => {\n  builder\n    .addRadio({\n      path: 'viewMode',\n      name: 'View mode',\n      description: 'Toggle between list view and stat view',\n      defaultValue: ViewMode.List,\n      settings: {\n        options: [\n          { label: 'List', value: ViewMode.List },\n          { label: 'Stat', value: ViewMode.Stat },\n        ],\n      },\n      category: ['Options'],\n    })\n    .addRadio({\n      path: 'groupMode',\n      name: 'Group mode',\n      description: 'How alert instances should be grouped',\n      defaultValue: GroupMode.Default,\n      settings: {\n        options: [\n          { value: GroupMode.Default, label: 'Default grouping' },\n          { value: GroupMode.Custom, label: 'Custom grouping' },\n        ],\n      },\n      category: ['Options'],\n    })\n    .addCustomEditor({\n      path: 'groupBy',\n      name: 'Group by',\n      description: 'Filter alerts using label querying',\n      id: 'groupBy',\n      defaultValue: [],\n      showIf: (options) => options.groupMode === GroupMode.Custom,\n      category: ['Options'],\n      editor: (props) => {\n        return (\n          <GroupBy\n            id={props.id ?? 'groupBy'}\n            defaultValue={props.value.map((value: string) => ({ label: value, value }))}\n            onChange={props.onChange}\n            dataSource={props.context.options.datasource}\n          />\n        );\n      },\n    })\n    .addNumberInput({\n      name: 'Max items',\n      path: 'maxItems',\n      description: 'Maximum alerts to display',\n      defaultValue: 20,\n      category: ['Options'],\n    })\n    .addSelect({\n      name: 'Sort order',\n      path: 'sortOrder',\n      description: 'Sort order of alerts and alert instances',\n      settings: {\n        options: [\n          { label: 'Alphabetical (asc)', value: SortOrder.AlphaAsc },\n          { label: 'Alphabetical (desc)', value: SortOrder.AlphaDesc },\n          { label: 'Importance', value: SortOrder.Importance },\n          { label: 'Time (asc)', value: SortOrder.TimeAsc },\n          { label: 'Time (desc)', value: SortOrder.TimeDesc },\n        ],\n      },\n      defaultValue: SortOrder.AlphaAsc,\n      category: ['Options'],\n    })\n    .addBooleanSwitch({\n      path: 'dashboardAlerts',\n      name: 'Alerts linked to this dashboard',\n      description: 'Only show alerts linked to this dashboard',\n      defaultValue: false,\n      category: ['Options'],\n    })\n    .addTextInput({\n      path: 'alertName',\n      name: 'Alert name',\n      description: 'Filter for alerts containing this text',\n      defaultValue: '',\n      category: ['Filter'],\n    })\n    .addTextInput({\n      path: 'alertInstanceLabelFilter',\n      name: 'Alert instance label',\n      description: 'Filter alert instances using label querying, ex: {severity=\"critical\", instance=~\"cluster-us-.+\"}',\n      defaultValue: '',\n      category: ['Filter'],\n    })\n    .addCustomEditor({\n      path: 'datasource',\n      name: 'Datasource',\n      description: 'Filter from alert source',\n      id: 'datasource',\n      defaultValue: null,\n      editor: function RenderDatasourcePicker(props) {\n        return (\n          <Stack gap={1}>\n            <DataSourcePicker\n              {...props}\n              type={['prometheus', 'loki', 'grafana']}\n              noDefault\n              current={props.value}\n              onChange={(ds: DataSourceInstanceSettings) => props.onChange(ds.name)}\n            />\n            <Button variant=\"secondary\" onClick={() => props.onChange(null)}>\n              Clear\n            </Button>\n          </Stack>\n        );\n      },\n      category: ['Filter'],\n    })\n    .addCustomEditor({\n      showIf: (options) => options.datasource === GRAFANA_DATASOURCE_NAME || !Boolean(options.datasource),\n      path: 'folder',\n      name: 'Folder',\n      description: 'Filter for alerts in the selected folder (only for Grafana alerts)',\n      id: 'folder',\n      defaultValue: null,\n      editor: function RenderFolderPicker(props) {\n        return (\n          <OldFolderPicker\n            enableReset={true}\n            showRoot={false}\n            allowEmpty={true}\n            initialTitle={props.value?.title}\n            initialFolderUid={props.value?.uid}\n            permissionLevel={PermissionLevelString.View}\n            onClear={() => props.onChange('')}\n            {...props}\n          />\n        );\n      },\n      category: ['Filter'],\n    })\n    .addBooleanSwitch({\n      path: 'stateFilter.firing',\n      name: 'Alerting / Firing',\n      defaultValue: true,\n      category: ['Alert state filter'],\n    })\n    .addBooleanSwitch({\n      path: 'stateFilter.pending',\n      name: 'Pending',\n      defaultValue: true,\n      category: ['Alert state filter'],\n    })\n    .addBooleanSwitch({\n      path: 'stateFilter.noData',\n      name: 'No Data',\n      defaultValue: false,\n      category: ['Alert state filter'],\n    })\n    .addBooleanSwitch({\n      path: 'stateFilter.normal',\n      name: 'Normal',\n      defaultValue: false,\n      category: ['Alert state filter'],\n    })\n    .addBooleanSwitch({\n      path: 'stateFilter.error',\n      name: 'Error',\n      defaultValue: true,\n      category: ['Alert state filter'],\n    });\n});\n\nexport const plugin = unifiedAlertList;\n"],"names":["AlertLabel","labelKey","value","operator","onRemoveLabel","styles","getStyles","theme","GroupBy","props","onChange","id","defaultValue","dataSource","dispatch","promRulesByDatasource","useUnifiedAlertingSelector","state","allRequestsReady","loading","labels","allLabels","datasource","rules","group","rule","alert","label","Icon","items","item","key","hasLabelFilter","alertInstanceLabelFilter","matchers","filterAlerts","options","alerts","stateFilter","AlertInstances","grafanaTotalInstances","handleInstancesLimit","limitInstances","grafanaFilteredInstancesTotal","defaultShowInstances","displayInstances","setDisplayInstances","clearButton","toggleDisplayInstances","display","filteredAlerts","isGrafanaAlert","hiddenInstancesForGrafanaAlerts","hiddenInstancesForNonGrafanaAlerts","hiddenInstances","uncollapsible","toggleShowInstances","onShowAllClick","onShowLimitedClick","totalInstancesGrafana","totalInstancesNotGrafana","totalInstancesNumber","limitStatus","limitButtonLabel","instancesLimitedAndOverflowed","instancesNotLimitedAndoverflowed","footerRow","Button","AlertInstancesTable","UNGROUPED_KEY","GroupedModeView","groupBy","groupedRules","hasInstancesWithMatchingLabels","alertHasEveryLabelForCombinedRules","alertingRule","hasInstancesMatching","mapKey","createMapKey","existingAlerts","ungrouped","acc","groupKey","groupAlerts","parseMapKey","groupByKeys","getGrafanaInstancesTotal","totals","total","currentTotal","UngroupedModeView","hideViewRuleLinkText","stateStyle","getStateTagStyles","returnTo","useLocation","rulesToDisplay","ruleWithLocation","index","namespaceName","groupName","dataSourceName","firstActiveAt","indentifier","strIndentifier","grafanaInstancesTotal","href","alertDef","Stack","Spacer","getStateList","reducer","list","stateKey","fetchPromAndRuler","matcherList","stateList","UnifiedAlertList","toggleLimit","useToggle","gmaViewAllowed","usePrometheusRulesByNamespaceQuery","alertRuleApi","promRulesRequests","rulerRulesRequests","somePromRulesDispatched","dashboard","useEffectOnce","replaceVariables","parsedOptions","shouldFetchGrafanaRules","grafanaPromRules","grafanaRulesLoading","refetchGrafanaPromRules","sub","limit","combinedRules","useCombinedRuleNamespaces","someRulerRulesDispatched","haveResults","dispatched","flattenedCombinedRules","order","filterRules","sortRules","noAlertsMessage","renderLoading","havePreviousResults","CustomScrollbar","BigValue","config","LoadingPlaceholder","sortOrder","result","filteredRules","dashboardUid","annotations","replacedName","name","isGrafanaDS","UnifiedAlertListPanel","gmaReadAllowed","externalReadAllowed","Alert","PanelPlugin","builder","DataSourcePicker","ds","OldFolderPicker"],"sourceRoot":""}