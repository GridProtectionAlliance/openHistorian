{"version":3,"file":"livePanel.db4e0c38c4c7ff721d69.js","mappings":"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","sources":["webpack://grafana/./public/app/features/live/info.ts","webpack://grafana/./public/app/plugins/panel/live/LiveChannelEditor.tsx","webpack://grafana/./public/app/plugins/panel/live/types.ts","webpack://grafana/./public/app/plugins/panel/live/LivePublish.tsx","webpack://grafana/./public/app/plugins/panel/live/LivePanel.tsx","webpack://grafana/./public/app/plugins/panel/live/module.tsx","webpack://grafana/./public/app/plugins/panel/table/TablePanel.tsx","webpack://grafana/./public/app/plugins/panel/table/migrations.ts"],"sourcesContent":["import { SelectableValue, dataFrameFromJSON } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\n\ninterface ChannelInfo {\n  channel: string;\n  minute_rate: number; //\n  data: unknown; // the last payload\n}\n\ninterface ManagedChannels {\n  channels: ChannelInfo[];\n}\n\ninterface ChannelSelectionInfo {\n  channels: Array<SelectableValue<string>>;\n  channelFields: Record<string, Array<SelectableValue<string>>>;\n}\n\nexport async function getManagedChannelInfo(): Promise<ChannelSelectionInfo> {\n  return getBackendSrv()\n    .get<ManagedChannels>('api/live/list')\n    .then((v) => {\n      const channelInfo = v.channels ?? [];\n      const channelFields: Record<string, Array<SelectableValue<string>>> = {};\n      const channels: Array<SelectableValue<string>> = channelInfo.map((c) => {\n        if (c.data) {\n          const distinctFields = new Set<string>();\n          const frame = dataFrameFromJSON(c.data);\n          for (const f of frame.fields) {\n            distinctFields.add(f.name);\n          }\n          channelFields[c.channel] = Array.from(distinctFields).map((n) => ({\n            value: n,\n            label: n,\n          }));\n        }\n        return {\n          value: c.channel,\n          label: c.channel + ' [' + c.minute_rate + ' msg/min]',\n        };\n      });\n      return { channelFields, channels };\n    });\n}\n","import { css } from '@emotion/css';\nimport { useEffect, useMemo, useState } from 'react';\n\nimport {\n  LiveChannelScope,\n  LiveChannelAddress,\n  SelectableValue,\n  StandardEditorProps,\n  GrafanaTheme2,\n  parseLiveChannelAddress,\n} from '@grafana/data';\nimport { Select, Alert, Label, stylesFactory } from '@grafana/ui';\nimport { config } from 'app/core/config';\nimport { getManagedChannelInfo } from 'app/features/live/info';\n\nimport { LivePanelOptions } from './types';\n\ntype Props = StandardEditorProps<Partial<LiveChannelAddress>, {}, LivePanelOptions>;\n\nconst scopes: Array<SelectableValue<LiveChannelScope>> = [\n  { label: 'Grafana', value: LiveChannelScope.Grafana, description: 'Core grafana live features' },\n  { label: 'Data Sources', value: LiveChannelScope.DataSource, description: 'Data sources with live support' },\n  { label: 'Plugins', value: LiveChannelScope.Plugin, description: 'Plugins with live support' },\n  { label: 'Stream', value: LiveChannelScope.Stream, description: 'data streams (eg, influx style)' },\n];\n\nexport function LiveChannelEditor(props: Props) {\n  const [channels, setChannels] = useState<Array<SelectableValue<string>>>([]);\n  const [namespaces, paths] = useMemo(() => {\n    const namespaces: Array<SelectableValue<string>> = [];\n    const paths: Array<SelectableValue<string>> = [];\n    const scope = props.value.scope;\n    const namespace = props.value.namespace;\n    if (!scope?.length) {\n      return [namespaces, paths];\n    }\n    const used: Record<string, boolean> = {};\n\n    for (let channel of channels) {\n      const addr = parseLiveChannelAddress(channel.value);\n      if (!addr || addr.scope !== scope) {\n        continue;\n      }\n\n      if (!used[addr.namespace]) {\n        namespaces.push({\n          value: addr.namespace,\n          label: addr.namespace,\n        });\n        used[addr.namespace] = true;\n      }\n\n      if (namespace?.length && namespace === addr.namespace) {\n        paths.push({\n          ...channel,\n          value: addr.path,\n        });\n      }\n    }\n    return [namespaces, paths];\n  }, [channels, props.value.scope, props.value.namespace]);\n\n  useEffect(() => {\n    getManagedChannelInfo().then((v) => {\n      setChannels(v.channels);\n    });\n  }, [props.value.scope]);\n\n  const onScopeChanged = (v: SelectableValue<LiveChannelScope>) => {\n    if (v.value) {\n      props.onChange({\n        scope: v.value,\n        namespace: undefined,\n        path: undefined,\n      });\n    }\n  };\n\n  const onNamespaceChanged = (v: SelectableValue<string>) => {\n    props.onChange({\n      scope: props.value?.scope,\n      namespace: v?.value,\n      path: undefined,\n    });\n  };\n\n  const onPathChanged = (v: SelectableValue<string>) => {\n    const { value, onChange } = props;\n    onChange({\n      scope: value.scope,\n      namespace: value.namespace,\n      path: v?.value,\n    });\n  };\n\n  const { scope, namespace, path } = props.value;\n  const style = getStyles(config.theme2);\n\n  return (\n    <>\n      <Alert title=\"Grafana Live\" severity=\"info\">\n        This supports real-time event streams in grafana core. This feature is under heavy development. Expect the\n        intefaces and structures to change as this becomes more production ready.\n      </Alert>\n\n      <div>\n        <div className={style.dropWrap}>\n          <Label>Scope</Label>\n          <Select options={scopes} value={scopes.find((s) => s.value === scope)} onChange={onScopeChanged} />\n        </div>\n\n        {scope && (\n          <div className={style.dropWrap}>\n            <Label>Namespace</Label>\n            <Select\n              options={namespaces}\n              value={\n                namespaces.find((s) => s.value === namespace) ??\n                (namespace ? { label: namespace, value: namespace } : undefined)\n              }\n              onChange={onNamespaceChanged}\n              allowCustomValue={true}\n              backspaceRemovesValue={true}\n              isClearable={true}\n            />\n          </div>\n        )}\n\n        {scope && namespace && (\n          <div className={style.dropWrap}>\n            <Label>Path</Label>\n            <Select\n              options={paths}\n              value={findPathOption(paths, path)}\n              onChange={onPathChanged}\n              allowCustomValue={true}\n              backspaceRemovesValue={true}\n              isClearable={true}\n            />\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n\nfunction findPathOption(paths: Array<SelectableValue<string>>, path?: string): SelectableValue<string> | undefined {\n  const v = paths.find((s) => s.value === path);\n  if (v) {\n    return v;\n  }\n  if (path) {\n    return { label: path, value: path };\n  }\n  return undefined;\n}\n\nconst getStyles = stylesFactory((theme: GrafanaTheme2) => ({\n  dropWrap: css`\n    margin-bottom: ${theme.spacing(1)};\n  `,\n}));\n","import { LiveChannelAddress } from '@grafana/data';\n\nexport enum MessageDisplayMode {\n  Raw = 'raw', // Raw JSON string\n  JSON = 'json', // formatted JSON\n  Auto = 'auto', // pick a good display\n  None = 'none', // do not display\n}\n\nexport enum MessagePublishMode {\n  None = 'none', // do not display\n  JSON = 'json', // formatted JSON\n  Influx = 'influx', // influx line protocol\n}\n\nexport interface LivePanelOptions {\n  channel?: LiveChannelAddress;\n  display?: MessageDisplayMode;\n  publish?: MessagePublishMode;\n  message?: string | object; // likely JSON\n}\n","import { useMemo } from 'react';\n\nimport { LiveChannelAddress, isValidLiveChannelAddress } from '@grafana/data';\nimport { getBackendSrv, getGrafanaLiveSrv } from '@grafana/runtime';\nimport { CodeEditor, Button } from '@grafana/ui';\n\nimport { MessagePublishMode } from './types';\n\ninterface Props {\n  height: number;\n  addr?: LiveChannelAddress;\n  mode: MessagePublishMode;\n  body?: string | object;\n  onSave: (v: string | object) => void;\n}\n\nexport function LivePublish({ height, mode, body, addr, onSave }: Props) {\n  const txt = useMemo(() => {\n    if (mode === MessagePublishMode.JSON) {\n      return body ? JSON.stringify(body, null, 2) : '{ }';\n    }\n    return body == null ? '' : `${body}`;\n  }, [mode, body]);\n\n  const doSave = (v: string) => {\n    if (mode === MessagePublishMode.JSON) {\n      onSave(JSON.parse(v));\n    } else {\n      onSave(v);\n    }\n  };\n\n  const onPublishClicked = async () => {\n    if (mode === MessagePublishMode.Influx) {\n      if (addr?.scope !== 'stream') {\n        alert('expected stream scope!');\n        return;\n      }\n      return getBackendSrv().post(`api/live/push/${addr.namespace}`, body);\n    }\n\n    if (!isValidLiveChannelAddress(addr)) {\n      alert('invalid address');\n      return;\n    }\n\n    const rsp = await getGrafanaLiveSrv().publish(addr, body);\n    console.log('onPublishClicked (response from publish)', rsp);\n  };\n\n  return (\n    <>\n      <CodeEditor\n        height={height - 32}\n        language={mode === MessagePublishMode.JSON ? 'json' : 'text'}\n        value={txt}\n        onBlur={doSave}\n        onSave={doSave}\n        showMiniMap={false}\n        showLineNumbers={true}\n      />\n      <div style={{ height: 32 }}>\n        <Button onClick={onPublishClicked}>Publish</Button>\n      </div>\n    </>\n  );\n}\n","import { css, cx } from '@emotion/css';\nimport { isEqual } from 'lodash';\nimport { PureComponent } from 'react';\nimport { Unsubscribable, PartialObserver } from 'rxjs';\n\nimport {\n  GrafanaTheme2,\n  PanelProps,\n  LiveChannelStatusEvent,\n  isValidLiveChannelAddress,\n  LiveChannelEvent,\n  isLiveChannelStatusEvent,\n  isLiveChannelMessageEvent,\n  LiveChannelConnectionState,\n  PanelData,\n  LoadingState,\n  applyFieldOverrides,\n  LiveChannelAddress,\n  StreamingDataFrame,\n} from '@grafana/data';\nimport { config, getGrafanaLiveSrv } from '@grafana/runtime';\nimport { Alert, stylesFactory, JSONFormatter, CustomScrollbar } from '@grafana/ui';\n\nimport { TablePanel } from '../table/TablePanel';\n\nimport { LivePublish } from './LivePublish';\nimport { LivePanelOptions, MessageDisplayMode, MessagePublishMode } from './types';\n\ninterface Props extends PanelProps<LivePanelOptions> {}\n\ninterface State {\n  error?: unknown;\n  addr?: LiveChannelAddress;\n  status?: LiveChannelStatusEvent;\n  message?: unknown;\n  changed: number;\n}\n\nexport class LivePanel extends PureComponent<Props, State> {\n  private readonly isValid: boolean;\n  subscription?: Unsubscribable;\n  styles = getStyles(config.theme2);\n\n  constructor(props: Props) {\n    super(props);\n\n    this.isValid = !!getGrafanaLiveSrv();\n    this.state = { changed: 0 };\n  }\n\n  async componentDidMount() {\n    this.loadChannel();\n  }\n\n  componentWillUnmount() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  componentDidUpdate(prevProps: Props): void {\n    if (this.props.options?.channel !== prevProps.options?.channel) {\n      this.loadChannel();\n    }\n  }\n\n  streamObserver: PartialObserver<LiveChannelEvent> = {\n    next: (event: LiveChannelEvent) => {\n      if (isLiveChannelStatusEvent(event)) {\n        this.setState({ status: event, changed: Date.now() });\n      } else if (isLiveChannelMessageEvent(event)) {\n        this.setState({ message: event.message, changed: Date.now() });\n      } else {\n        console.log('ignore', event);\n      }\n    },\n  };\n\n  unsubscribe = () => {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n      this.subscription = undefined;\n    }\n  };\n\n  async loadChannel() {\n    const addr = this.props.options?.channel;\n    if (!isValidLiveChannelAddress(addr)) {\n      console.log('INVALID', addr);\n      this.unsubscribe();\n      this.setState({\n        addr: undefined,\n      });\n      return;\n    }\n\n    if (isEqual(addr, this.state.addr)) {\n      console.log('Same channel', this.state.addr);\n      return;\n    }\n\n    const live = getGrafanaLiveSrv();\n    if (!live) {\n      console.log('INVALID', addr);\n      this.unsubscribe();\n      this.setState({\n        addr: undefined,\n      });\n      return;\n    }\n    this.unsubscribe();\n\n    console.log('LOAD', addr);\n\n    // Subscribe to new events\n    try {\n      this.subscription = live.getStream(addr).subscribe(this.streamObserver);\n      this.setState({ addr, error: undefined });\n    } catch (err) {\n      this.setState({ addr: undefined, error: err });\n    }\n  }\n\n  renderNotEnabled() {\n    const preformatted = `[feature_toggles]\n    enable = live`;\n    return (\n      <Alert title=\"Grafana Live\" severity=\"info\">\n        <p>Grafana live requires a feature flag to run</p>\n\n        <b>custom.ini:</b>\n        <pre>{preformatted}</pre>\n      </Alert>\n    );\n  }\n\n  renderMessage(height: number) {\n    const { options } = this.props;\n    const { message } = this.state;\n\n    if (!message) {\n      return (\n        <div>\n          <h4>Waiting for data:</h4>\n          {options.channel?.scope}/{options.channel?.namespace}/{options.channel?.path}\n        </div>\n      );\n    }\n\n    if (options.display === MessageDisplayMode.JSON) {\n      return <JSONFormatter json={message} open={5} />;\n    }\n\n    if (options.display === MessageDisplayMode.Auto) {\n      if (message instanceof StreamingDataFrame) {\n        const data: PanelData = {\n          series: applyFieldOverrides({\n            data: [message],\n            theme: config.theme2,\n            replaceVariables: (v: string) => v,\n            fieldConfig: {\n              defaults: {},\n              overrides: [],\n            },\n          }),\n          state: LoadingState.Streaming,\n        } as PanelData;\n        const props: PanelProps = {\n          ...this.props,\n          options: { frameIndex: 0, showHeader: true },\n        };\n        return <TablePanel {...props} data={data} height={height} />;\n      }\n    }\n\n    return <pre>{JSON.stringify(message)}</pre>;\n  }\n\n  renderPublish(height: number) {\n    const { options } = this.props;\n    return (\n      <LivePublish\n        height={height}\n        body={options.message}\n        mode={options.publish ?? MessagePublishMode.JSON}\n        onSave={(message) => this.props.onOptionsChange({ ...options, message })}\n        addr={this.state.addr}\n      />\n    );\n  }\n\n  renderStatus() {\n    const { status } = this.state;\n    if (status?.state === LiveChannelConnectionState.Connected) {\n      return; // nothing\n    }\n\n    let statusClass = '';\n    if (status) {\n      statusClass = this.styles.status[status.state];\n    }\n    return <div className={cx(statusClass, this.styles.statusWrap)}>{status?.state}</div>;\n  }\n\n  renderBody() {\n    const { status } = this.state;\n    const { options, height } = this.props;\n    const publish = options.publish === MessagePublishMode.JSON || options.publish === MessagePublishMode.Influx;\n\n    if (publish) {\n      if (options.display === MessageDisplayMode.None) {\n        return this.renderPublish(height);\n      }\n\n      // Both message and publish\n      const halfHeight = height / 2;\n      return (\n        <div>\n          <div style={{ height: halfHeight, overflow: 'hidden' }}>\n            <CustomScrollbar autoHeightMin=\"100%\" autoHeightMax=\"100%\">\n              {this.renderMessage(halfHeight)}\n            </CustomScrollbar>\n          </div>\n          <div>{this.renderPublish(halfHeight)}</div>\n        </div>\n      );\n    }\n    if (options.display === MessageDisplayMode.None) {\n      return <pre>{JSON.stringify(status)}</pre>;\n    }\n\n    // Only message\n    return (\n      <div style={{ overflow: 'hidden', height }}>\n        <CustomScrollbar autoHeightMin=\"100%\" autoHeightMax=\"100%\">\n          {this.renderMessage(height)}\n        </CustomScrollbar>\n      </div>\n    );\n  }\n\n  render() {\n    if (!this.isValid) {\n      return this.renderNotEnabled();\n    }\n    const { addr, error } = this.state;\n    if (!addr) {\n      return (\n        <Alert title=\"Grafana Live\" severity=\"info\">\n          Use the panel editor to pick a channel\n        </Alert>\n      );\n    }\n    if (error) {\n      return (\n        <div>\n          <h2>ERROR</h2>\n          <div>{JSON.stringify(error)}</div>\n        </div>\n      );\n    }\n    return (\n      <>\n        {this.renderStatus()}\n        {this.renderBody()}\n      </>\n    );\n  }\n}\n\nconst getStyles = stylesFactory((theme: GrafanaTheme2) => ({\n  statusWrap: css`\n    margin: auto;\n    position: absolute;\n    top: 0;\n    right: 0;\n    background: ${theme.components.panel.background};\n    padding: 10px;\n    z-index: ${theme.zIndex.modal};\n  `,\n  status: {\n    [LiveChannelConnectionState.Pending]: css`\n      border: 1px solid ${theme.v1.palette.orange};\n    `,\n    [LiveChannelConnectionState.Connected]: css`\n      border: 1px solid ${theme.colors.success.main};\n    `,\n    [LiveChannelConnectionState.Connecting]: css`\n      border: 1px solid ${theme.v1.palette.brandWarning};\n    `,\n    [LiveChannelConnectionState.Disconnected]: css`\n      border: 1px solid ${theme.colors.warning.main};\n    `,\n    [LiveChannelConnectionState.Shutdown]: css`\n      border: 1px solid ${theme.colors.error.main};\n    `,\n    [LiveChannelConnectionState.Invalid]: css`\n      border: 1px solid red;\n    `,\n  },\n}));\n","import { PanelPlugin } from '@grafana/data';\n\nimport { LiveChannelEditor } from './LiveChannelEditor';\nimport { LivePanel } from './LivePanel';\nimport { LivePanelOptions, MessageDisplayMode, MessagePublishMode } from './types';\n\nexport const plugin = new PanelPlugin<LivePanelOptions>(LivePanel).setPanelOptions((builder) => {\n  builder.addCustomEditor({\n    category: ['Channel'],\n    id: 'channel',\n    path: 'channel',\n    name: 'Channel',\n    editor: LiveChannelEditor,\n    defaultValue: {},\n  });\n\n  builder\n    .addRadio({\n      path: 'display',\n      name: 'Show message',\n      description: 'Display the last message received on this channel',\n      settings: {\n        options: [\n          { value: MessageDisplayMode.Raw, label: 'Raw Text' },\n          { value: MessageDisplayMode.JSON, label: 'JSON' },\n          { value: MessageDisplayMode.Auto, label: 'Auto' },\n          { value: MessageDisplayMode.None, label: 'None' },\n        ],\n      },\n      defaultValue: MessageDisplayMode.JSON,\n    })\n    .addRadio({\n      path: 'publish',\n      name: 'Publish',\n      description: 'Display a form to publish values',\n      settings: {\n        options: [\n          { value: MessagePublishMode.None, label: 'None' },\n          { value: MessagePublishMode.JSON, label: 'JSON' },\n          { value: MessagePublishMode.Influx, label: 'Influx' },\n        ],\n      },\n      defaultValue: MessagePublishMode.None,\n    });\n});\n","import { css } from '@emotion/css';\n\nimport {\n  DashboardCursorSync,\n  DataFrame,\n  FieldMatcherID,\n  getFrameDisplayName,\n  PanelProps,\n  SelectableValue,\n} from '@grafana/data';\nimport { config, PanelDataErrorView } from '@grafana/runtime';\nimport { Select, Table, usePanelContext, useTheme2 } from '@grafana/ui';\nimport { TableSortByFieldState } from '@grafana/ui/src/components/Table/types';\n\nimport { hasDeprecatedParentRowIndex, migrateFromParentRowIndexToNestedFrames } from './migrations';\nimport { Options } from './panelcfg.gen';\n\ninterface Props extends PanelProps<Options> {}\n\nexport function TablePanel(props: Props) {\n  const { data, height, width, options, fieldConfig, id, timeRange } = props;\n\n  const theme = useTheme2();\n  const panelContext = usePanelContext();\n  const frames = hasDeprecatedParentRowIndex(data.series)\n    ? migrateFromParentRowIndexToNestedFrames(data.series)\n    : data.series;\n  const count = frames?.length;\n  const hasFields = frames.some((frame) => frame.fields.length > 0);\n  const currentIndex = getCurrentFrameIndex(frames, options);\n  const main = frames[currentIndex];\n\n  let tableHeight = height;\n\n  if (!count || !hasFields) {\n    return <PanelDataErrorView panelId={id} fieldConfig={fieldConfig} data={data} />;\n  }\n\n  if (count > 1) {\n    const inputHeight = theme.spacing.gridSize * theme.components.height.md;\n    const padding = theme.spacing.gridSize;\n\n    tableHeight = height - inputHeight - padding;\n  }\n\n  const enableSharedCrosshair = panelContext.sync && panelContext.sync() !== DashboardCursorSync.Off;\n\n  const tableElement = (\n    <Table\n      height={tableHeight}\n      width={width}\n      data={main}\n      noHeader={!options.showHeader}\n      showTypeIcons={options.showTypeIcons}\n      resizable={true}\n      initialSortBy={options.sortBy}\n      onSortByChange={(sortBy) => onSortByChange(sortBy, props)}\n      onColumnResize={(displayName, resizedWidth) => onColumnResize(displayName, resizedWidth, props)}\n      onCellFilterAdded={panelContext.onAddAdHocFilter}\n      footerOptions={options.footer}\n      enablePagination={options.footer?.enablePagination}\n      cellHeight={options.cellHeight}\n      timeRange={timeRange}\n      enableSharedCrosshair={config.featureToggles.tableSharedCrosshair && enableSharedCrosshair}\n      fieldConfig={fieldConfig}\n    />\n  );\n\n  if (count === 1) {\n    return tableElement;\n  }\n\n  const names = frames.map((frame, index) => {\n    return {\n      label: getFrameDisplayName(frame),\n      value: index,\n    };\n  });\n\n  return (\n    <div className={tableStyles.wrapper}>\n      {tableElement}\n      <div className={tableStyles.selectWrapper}>\n        <Select options={names} value={names[currentIndex]} onChange={(val) => onChangeTableSelection(val, props)} />\n      </div>\n    </div>\n  );\n}\n\nfunction getCurrentFrameIndex(frames: DataFrame[], options: Options) {\n  return options.frameIndex > 0 && options.frameIndex < frames.length ? options.frameIndex : 0;\n}\n\nfunction onColumnResize(fieldDisplayName: string, width: number, props: Props) {\n  const { fieldConfig } = props;\n  const { overrides } = fieldConfig;\n\n  const matcherId = FieldMatcherID.byName;\n  const propId = 'custom.width';\n\n  // look for existing override\n  const override = overrides.find((o) => o.matcher.id === matcherId && o.matcher.options === fieldDisplayName);\n\n  if (override) {\n    // look for existing property\n    const property = override.properties.find((prop) => prop.id === propId);\n    if (property) {\n      property.value = width;\n    } else {\n      override.properties.push({ id: propId, value: width });\n    }\n  } else {\n    overrides.push({\n      matcher: { id: matcherId, options: fieldDisplayName },\n      properties: [{ id: propId, value: width }],\n    });\n  }\n\n  props.onFieldConfigChange({\n    ...fieldConfig,\n    overrides,\n  });\n}\n\nfunction onSortByChange(sortBy: TableSortByFieldState[], props: Props) {\n  props.onOptionsChange({\n    ...props.options,\n    sortBy,\n  });\n}\n\nfunction onChangeTableSelection(val: SelectableValue<number>, props: Props) {\n  props.onOptionsChange({\n    ...props.options,\n    frameIndex: val.value || 0,\n  });\n}\n\nconst tableStyles = {\n  wrapper: css`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    height: 100%;\n  `,\n  selectWrapper: css`\n    padding: 8px 8px 0px 8px;\n  `,\n};\n","import { omitBy, isNil, isNumber, defaultTo, groupBy } from 'lodash';\n\nimport {\n  PanelModel,\n  FieldMatcherID,\n  ConfigOverrideRule,\n  ThresholdsMode,\n  ThresholdsConfig,\n  FieldConfig,\n  DataFrame,\n  FieldType,\n} from '@grafana/data';\nimport { ReduceTransformerOptions } from '@grafana/data/src/transformations/transformers/reduce';\n\nimport { Options } from './panelcfg.gen';\n\n/**\n * At 7.0, the `table` panel was swapped from an angular implementation to a react one.\n * The models do not match, so this process will delegate to the old implementation when\n * a saved table configuration exists.\n */\nexport const tableMigrationHandler = (panel: PanelModel<Options>): Partial<Options> => {\n  // Table was saved as an angular table, lets just swap to the 'table-old' panel\n  if (!panel.pluginVersion && 'columns' in panel) {\n    console.log('Was angular table', panel);\n  }\n\n  // Nothing changed\n  return panel.options;\n};\n\nconst transformsMap = {\n  timeseries_to_rows: 'seriesToRows',\n  timeseries_to_columns: 'seriesToColumns',\n  timeseries_aggregations: 'reduce',\n  table: 'merge',\n};\n\nconst columnsMap = {\n  avg: 'mean',\n  min: 'min',\n  max: 'max',\n  total: 'sum',\n  current: 'lastNotNull',\n  count: 'count',\n};\n\nconst colorModeMap = {\n  cell: 'color-background',\n  row: 'color-background',\n  value: 'color-text',\n};\n\ntype Transformations = keyof typeof transformsMap;\n\ntype Transformation = {\n  id: string;\n  options: ReduceTransformerOptions;\n};\n\ntype Columns = keyof typeof columnsMap;\n\ntype Column = {\n  value: Columns;\n  text: string;\n};\n\ntype ColorModes = keyof typeof colorModeMap;\n\nconst generateThresholds = (thresholds: string[], colors: string[]) => {\n  return [-Infinity, ...thresholds].map((threshold, idx) => ({\n    color: colors[idx],\n    value: isNumber(threshold) ? threshold : parseInt(threshold, 10),\n  }));\n};\n\nconst migrateTransformations = (\n  panel: PanelModel<Partial<Options>>,\n  oldOpts: { columns: any; transform: Transformations }\n) => {\n  const transformations: Transformation[] = panel.transformations ?? [];\n  if (Object.keys(transformsMap).includes(oldOpts.transform)) {\n    const opts: ReduceTransformerOptions = {\n      reducers: [],\n    };\n    if (oldOpts.transform === 'timeseries_aggregations') {\n      opts.includeTimeField = false;\n      opts.reducers = oldOpts.columns.map((column: Column) => columnsMap[column.value]);\n    }\n    transformations.push({\n      id: transformsMap[oldOpts.transform],\n      options: opts,\n    });\n  }\n  return transformations;\n};\n\ntype Style = {\n  unit: string;\n  type: string;\n  alias: string;\n  decimals: number;\n  colors: string[];\n  colorMode: ColorModes;\n  pattern: string;\n  thresholds: string[];\n  align?: string;\n  dateFormat: string;\n  link: boolean;\n  linkTargetBlank?: boolean;\n  linkTooltip?: string;\n  linkUrl?: string;\n};\n\nconst migrateTableStyleToOverride = (style: Style) => {\n  const fieldMatcherId = /^\\/.*\\/$/.test(style.pattern) ? FieldMatcherID.byRegexp : FieldMatcherID.byName;\n  const override: ConfigOverrideRule = {\n    matcher: {\n      id: fieldMatcherId,\n      options: style.pattern,\n    },\n    properties: [],\n  };\n\n  if (style.alias) {\n    override.properties.push({\n      id: 'displayName',\n      value: style.alias,\n    });\n  }\n\n  if (style.unit) {\n    override.properties.push({\n      id: 'unit',\n      value: style.unit,\n    });\n  }\n\n  if (style.decimals) {\n    override.properties.push({\n      id: 'decimals',\n      value: style.decimals,\n    });\n  }\n\n  if (style.type === 'date') {\n    override.properties.push({\n      id: 'unit',\n      value: `time: ${style.dateFormat}`,\n    });\n  }\n\n  if (style.type === 'hidden') {\n    override.properties.push({\n      id: 'custom.hidden',\n      value: true,\n    });\n  }\n\n  if (style.link) {\n    override.properties.push({\n      id: 'links',\n      value: [\n        {\n          title: defaultTo(style.linkTooltip, ''),\n          url: defaultTo(style.linkUrl, ''),\n          targetBlank: defaultTo(style.linkTargetBlank, false),\n        },\n      ],\n    });\n  }\n\n  if (style.colorMode) {\n    override.properties.push({\n      id: 'custom.cellOptions',\n      value: {\n        type: colorModeMap[style.colorMode],\n      },\n    });\n  }\n\n  if (style.align) {\n    override.properties.push({\n      id: 'custom.align',\n      value: style.align === 'auto' ? null : style.align,\n    });\n  }\n\n  if (style.thresholds?.length) {\n    override.properties.push({\n      id: 'thresholds',\n      value: {\n        mode: ThresholdsMode.Absolute,\n        steps: generateThresholds(style.thresholds, style.colors),\n      },\n    });\n  }\n\n  return override;\n};\n\nconst migrateDefaults = (prevDefaults: Style) => {\n  let defaults: FieldConfig = {\n    custom: {},\n  };\n  if (prevDefaults) {\n    defaults = omitBy(\n      {\n        unit: prevDefaults.unit,\n        decimals: prevDefaults.decimals,\n        displayName: prevDefaults.alias,\n        custom: {\n          align: prevDefaults.align === 'auto' ? null : prevDefaults.align,\n        },\n      },\n      isNil\n    );\n\n    if (prevDefaults.thresholds.length) {\n      const thresholds: ThresholdsConfig = {\n        mode: ThresholdsMode.Absolute,\n        steps: generateThresholds(prevDefaults.thresholds, prevDefaults.colors),\n      };\n      defaults.thresholds = thresholds;\n    }\n\n    if (prevDefaults.colorMode) {\n      defaults.custom.cellOptions = {\n        type: colorModeMap[prevDefaults.colorMode],\n      };\n    }\n  }\n  return defaults;\n};\n\n/**\n * This is called when the panel changes from another panel\n */\nexport const tablePanelChangedHandler = (\n  panel: PanelModel<Partial<Options>>,\n  prevPluginId: string,\n  prevOptions: any\n) => {\n  // Changing from angular table panel\n  if (prevPluginId === 'table-old' && prevOptions.angular) {\n    const oldOpts = prevOptions.angular;\n    const transformations = migrateTransformations(panel, oldOpts);\n    const prevDefaults = oldOpts.styles.find((style: any) => style.pattern === '/.*/');\n    const defaults = migrateDefaults(prevDefaults);\n    const overrides = oldOpts.styles.filter((style: any) => style.pattern !== '/.*/').map(migrateTableStyleToOverride);\n\n    panel.transformations = transformations;\n    panel.fieldConfig = {\n      defaults,\n      overrides,\n    };\n  }\n\n  return {};\n};\n\nconst getMainFrames = (frames: DataFrame[] | null) => {\n  return frames?.filter((df) => df.meta?.custom?.parentRowIndex === undefined) || [frames?.[0]];\n};\n\n/**\n * In 9.3 meta.custom.parentRowIndex was introduced to support sub-tables.\n * In 10.2 meta.custom.parentRowIndex was deprecated in favor of FieldType.nestedFrames, which supports multiple nested frames.\n * Migrate DataFrame[] from using meta.custom.parentRowIndex to using FieldType.nestedFrames\n */\nexport const migrateFromParentRowIndexToNestedFrames = (frames: DataFrame[] | null) => {\n  const migratedFrames: DataFrame[] = [];\n  const mainFrames = getMainFrames(frames).filter(\n    (frame: DataFrame | undefined): frame is DataFrame => !!frame && frame.length !== 0\n  );\n\n  mainFrames?.forEach((frame) => {\n    const subFrames = frames?.filter((df) => frame.refId === df.refId && df.meta?.custom?.parentRowIndex !== undefined);\n    const subFramesGrouped = groupBy(subFrames, (frame: DataFrame) => frame.meta?.custom?.parentRowIndex);\n    const subFramesByIndex = Object.keys(subFramesGrouped).map((key) => subFramesGrouped[key]);\n    const migratedFrame = { ...frame };\n\n    if (subFrames && subFrames.length > 0) {\n      migratedFrame.fields.push({\n        name: 'nested',\n        type: FieldType.nestedFrames,\n        config: {},\n        values: subFramesByIndex,\n      });\n    }\n    migratedFrames.push(migratedFrame);\n  });\n\n  return migratedFrames;\n};\n\nexport const hasDeprecatedParentRowIndex = (frames: DataFrame[] | null) => {\n  return frames?.some((df) => df.meta?.custom?.parentRowIndex !== undefined);\n};\n"],"names":["getManagedChannelInfo","v","channelInfo","channelFields","channels","c","distinctFields","frame","f","n","scopes","LiveChannelEditor","props","setChannels","namespaces","paths","scope","namespace","used","channel","addr","onScopeChanged","onNamespaceChanged","onPathChanged","value","onChange","path","style","getStyles","config","Alert","Label","Select","s","findPathOption","stylesFactory","theme","MessageDisplayMode","MessagePublishMode","LivePublish","height","mode","body","onSave","txt","doSave","onPublishClicked","rsp","CodeEditor","Button","LivePanel","event","prevProps","live","err","options","message","JSONFormatter","StreamingDataFrame","data","TablePanel","status","statusClass","halfHeight","CustomScrollbar","error","PanelPlugin","builder","width","fieldConfig","id","timeRange","panelContext","frames","count","hasFields","currentIndex","getCurrentFrameIndex","main","tableHeight","inputHeight","padding","enableSharedCrosshair","tableElement","sortBy","onSortByChange","displayName","resizedWidth","onColumnResize","names","index","tableStyles","val","onChangeTableSelection","fieldDisplayName","overrides","matcherId","propId","override","o","property","prop","tableMigrationHandler","panel","transformsMap","columnsMap","colorModeMap","generateThresholds","thresholds","colors","threshold","idx","migrateTransformations","oldOpts","transformations","opts","column","migrateTableStyleToOverride","migrateDefaults","prevDefaults","defaults","tablePanelChangedHandler","prevPluginId","prevOptions","getMainFrames","df","migrateFromParentRowIndexToNestedFrames","migratedFrames","subFrames","subFramesGrouped","subFramesByIndex","key","migratedFrame","hasDeprecatedParentRowIndex"],"sourceRoot":""}