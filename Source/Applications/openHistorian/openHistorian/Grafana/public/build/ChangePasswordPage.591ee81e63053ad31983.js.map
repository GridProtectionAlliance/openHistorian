{"version":3,"sources":["webpack:///./public/app/features/profile/ChangePasswordForm.tsx","webpack:///./public/app/features/profile/ChangePasswordPage.tsx","webpack:///./public/app/core/utils/UserProvider.tsx","webpack:///./public/app/core/components/ForgottenPassword/ChangePasswordPage.tsx"],"names":["ChangePasswordForm","onChangePassword","isSaving","ldapEnabled","config","authProxyEnabled","className","css","onSubmit","register","errors","getValues","label","invalid","oldPassword","error","message","type","name","ref","required","newPassword","validate","confirm","v","confirmNew","old","variant","disabled","href","appSubUrl","ChangePasswordPage","navModel","this","props","states","changePassword","Contents","PureComponent","hot","module","connect","state","getNavModel","navIndex","UserProvider","teams","orgs","sessions","loadingStates","loadUser","loadTeams","loadOrgs","loadSessions","updateUserProfile","updateUserOrg","payload","setState","getBackendSrv","put","get","user","Object","keys","length","then","sort","a","b","Number","isActive","map","session","id","seenAt","dateTimeFormatTimeAgo","createdAt","dateTimeFormat","format","clientIp","browser","browserVersion","os","osVersion","device","revokeUserSession","tokenId","post","authTokenId","filter","setUserOrg","org","orgId","window","location","finally","catch","e","console","userId","children","api"],"mappings":"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","file":"ChangePasswordPage.591ee81e63053ad31983.js","sourcesContent":["import React, { FC } from 'react';\nimport config from 'app/core/config';\nimport { Button, LinkButton, Form, Field, Input, HorizontalGroup } from '@grafana/ui';\nimport { ChangePasswordFields } from 'app/core/utils/UserProvider';\nimport { css } from 'emotion';\n\nexport interface Props {\n  isSaving: boolean;\n  onChangePassword: (payload: ChangePasswordFields) => void;\n}\n\nexport const ChangePasswordForm: FC<Props> = ({ onChangePassword, isSaving }) => {\n  const { ldapEnabled, authProxyEnabled } = config;\n\n  if (ldapEnabled || authProxyEnabled) {\n    return <p>You cannot change password when ldap or auth proxy authentication is enabled.</p>;\n  }\n  return (\n    <div\n      className={css`\n        max-width: 400px;\n      `}\n    >\n      <Form onSubmit={onChangePassword}>\n        {({ register, errors, getValues }) => {\n          return (\n            <>\n              <Field label=\"Old password\" invalid={!!errors.oldPassword} error={errors?.oldPassword?.message}>\n                <Input type=\"password\" name=\"oldPassword\" ref={register({ required: 'Old password is required' })} />\n              </Field>\n\n              <Field label=\"New password\" invalid={!!errors.newPassword} error={errors?.newPassword?.message}>\n                <Input\n                  type=\"password\"\n                  name=\"newPassword\"\n                  ref={register({\n                    required: 'New password is required',\n                    validate: {\n                      confirm: v => v === getValues().confirmNew || 'Passwords must match',\n                      old: v => v !== getValues().oldPassword || `New password can't be the same as the old one.`,\n                    },\n                  })}\n                />\n              </Field>\n\n              <Field label=\"Confirm password\" invalid={!!errors.confirmNew} error={errors?.confirmNew?.message}>\n                <Input\n                  type=\"password\"\n                  name=\"confirmNew\"\n                  ref={register({\n                    required: 'New password confirmation is required',\n                    validate: v => v === getValues().newPassword || 'Passwords must match',\n                  })}\n                />\n              </Field>\n              <HorizontalGroup>\n                <Button variant=\"primary\" disabled={isSaving}>\n                  Change Password\n                </Button>\n                <LinkButton variant=\"secondary\" href={`${config.appSubUrl}/profile`}>\n                  Cancel\n                </LinkButton>\n              </HorizontalGroup>\n            </>\n          );\n        }}\n      </Form>\n    </div>\n  );\n};\n","import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport { StoreState } from 'app/types';\nimport { NavModel } from '@grafana/data';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { UserProvider } from 'app/core/utils/UserProvider';\nimport Page from 'app/core/components/Page/Page';\nimport { ChangePasswordForm } from './ChangePasswordForm';\n\nexport interface Props {\n  navModel: NavModel;\n}\n\nexport class ChangePasswordPage extends PureComponent<Props> {\n  render() {\n    const { navModel } = this.props;\n    return (\n      <Page navModel={navModel}>\n        <UserProvider>\n          {({ changePassword }, states) => (\n            <Page.Contents>\n              <h3 className=\"page-sub-heading\">Change Your Password</h3>\n              <ChangePasswordForm onChangePassword={changePassword} isSaving={states.changePassword} />\n            </Page.Contents>\n          )}\n        </UserProvider>\n      </Page>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, `change-password`),\n  };\n}\n\nconst mapDispatchToProps = {};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(ChangePasswordPage));\n","import React, { PureComponent } from 'react';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { User, Team, UserOrg, UserSession } from 'app/types';\nimport { config } from 'app/core/config';\nimport { dateTimeFormat, dateTimeFormatTimeAgo } from '@grafana/data';\n\nexport interface UserAPI {\n  changePassword: (changePassword: ChangePasswordFields) => void;\n  updateUserProfile: (profile: ProfileUpdateFields) => void;\n  loadUser: () => void;\n  loadTeams: () => void;\n  loadOrgs: () => void;\n  loadSessions: () => void;\n  setUserOrg: (org: UserOrg) => void;\n  revokeUserSession: (tokenId: number) => void;\n}\n\nexport interface LoadingStates {\n  changePassword: boolean;\n  loadUser: boolean;\n  loadTeams: boolean;\n  loadOrgs: boolean;\n  loadSessions: boolean;\n  updateUserProfile: boolean;\n  updateUserOrg: boolean;\n}\n\nexport interface ChangePasswordFields {\n  oldPassword: string;\n  newPassword: string;\n  confirmNew: string;\n}\n\nexport interface ProfileUpdateFields {\n  name: string;\n  email: string;\n  login: string;\n}\n\nexport interface Props {\n  userId?: number; // passed, will load user on mount\n  children: (\n    api: UserAPI,\n    states: LoadingStates,\n    teams: Team[],\n    orgs: UserOrg[],\n    sessions: UserSession[],\n    user?: User\n  ) => JSX.Element;\n}\n\nexport interface State {\n  user?: User;\n  teams: Team[];\n  orgs: UserOrg[];\n  sessions: UserSession[];\n  loadingStates: LoadingStates;\n}\n\nexport class UserProvider extends PureComponent<Props, State> {\n  state: State = {\n    teams: [] as Team[],\n    orgs: [] as UserOrg[],\n    sessions: [] as UserSession[],\n    loadingStates: {\n      changePassword: false,\n      loadUser: true,\n      loadTeams: false,\n      loadOrgs: false,\n      loadSessions: false,\n      updateUserProfile: false,\n      updateUserOrg: false,\n    },\n  };\n\n  componentWillMount() {\n    if (this.props.userId) {\n      this.loadUser();\n    }\n  }\n\n  changePassword = async (payload: ChangePasswordFields) => {\n    this.setState({ loadingStates: { ...this.state.loadingStates, changePassword: true } });\n    await getBackendSrv().put('/api/user/password', payload);\n    this.setState({ loadingStates: { ...this.state.loadingStates, changePassword: false } });\n  };\n\n  loadUser = async () => {\n    this.setState({\n      loadingStates: { ...this.state.loadingStates, loadUser: true },\n    });\n    const user = await getBackendSrv().get('/api/user');\n    this.setState({ user, loadingStates: { ...this.state.loadingStates, loadUser: Object.keys(user).length === 0 } });\n  };\n\n  loadTeams = async () => {\n    this.setState({\n      loadingStates: { ...this.state.loadingStates, loadTeams: true },\n    });\n    const teams = await getBackendSrv().get('/api/user/teams');\n    this.setState({ teams, loadingStates: { ...this.state.loadingStates, loadTeams: false } });\n  };\n\n  loadOrgs = async () => {\n    this.setState({\n      loadingStates: { ...this.state.loadingStates, loadOrgs: true },\n    });\n    const orgs = await getBackendSrv().get('/api/user/orgs');\n    this.setState({ orgs, loadingStates: { ...this.state.loadingStates, loadOrgs: false } });\n  };\n\n  loadSessions = async () => {\n    this.setState({\n      loadingStates: { ...this.state.loadingStates, loadSessions: true },\n    });\n\n    await getBackendSrv()\n      .get('/api/user/auth-tokens')\n      .then((sessions: UserSession[]) => {\n        sessions = sessions\n          // Show active sessions first\n          .sort((a, b) => Number(b.isActive) - Number(a.isActive))\n          .map((session: UserSession) => {\n            return {\n              id: session.id,\n              isActive: session.isActive,\n              seenAt: dateTimeFormatTimeAgo(session.seenAt),\n              createdAt: dateTimeFormat(session.createdAt, { format: 'MMMM DD, YYYY' }),\n              clientIp: session.clientIp,\n              browser: session.browser,\n              browserVersion: session.browserVersion,\n              os: session.os,\n              osVersion: session.osVersion,\n              device: session.device,\n            };\n          });\n\n        this.setState({ sessions, loadingStates: { ...this.state.loadingStates, loadSessions: false } });\n      });\n  };\n\n  revokeUserSession = async (tokenId: number) => {\n    await getBackendSrv()\n      .post('/api/user/revoke-auth-token', {\n        authTokenId: tokenId,\n      })\n      .then(() => {\n        const sessions = this.state.sessions.filter((session: UserSession) => {\n          return session.id !== tokenId;\n        });\n\n        this.setState({ sessions });\n      });\n  };\n\n  setUserOrg = async (org: UserOrg) => {\n    this.setState({\n      loadingStates: { ...this.state.loadingStates, updateUserOrg: true },\n    });\n    await getBackendSrv()\n      .post('/api/user/using/' + org.orgId, {})\n      .then(() => {\n        window.location.href = config.appSubUrl + '/profile';\n      })\n      .finally(() => {\n        this.setState({ loadingStates: { ...this.state.loadingStates, updateUserOrg: false } });\n      });\n  };\n\n  updateUserProfile = async (payload: ProfileUpdateFields) => {\n    this.setState({ loadingStates: { ...this.state.loadingStates, updateUserProfile: true } });\n    await getBackendSrv()\n      .put('/api/user', payload)\n      .then(this.loadUser)\n      .catch(e => console.error(e))\n      .finally(() => {\n        this.setState({ loadingStates: { ...this.state.loadingStates, updateUserProfile: false } });\n      });\n  };\n\n  render() {\n    const { children } = this.props;\n    const { loadingStates, teams, orgs, sessions, user } = this.state;\n\n    const api: UserAPI = {\n      changePassword: this.changePassword,\n      loadUser: this.loadUser,\n      loadTeams: this.loadTeams,\n      loadOrgs: this.loadOrgs,\n      loadSessions: this.loadSessions,\n      revokeUserSession: this.revokeUserSession,\n      updateUserProfile: this.updateUserProfile,\n      setUserOrg: this.setUserOrg,\n    };\n\n    return <>{children(api, loadingStates, teams, orgs, sessions, user)}</>;\n  }\n}\n\nexport default UserProvider;\n","import React, { FC } from 'react';\nimport { LoginLayout, InnerBox } from '../Login/LoginLayout';\nimport { ChangePassword } from './ChangePassword';\nimport LoginCtrl from '../Login/LoginCtrl';\n\nexport const ChangePasswordPage: FC = () => {\n  return (\n    <LoginLayout>\n      <InnerBox>\n        <LoginCtrl>{({ changePassword }) => <ChangePassword onSubmit={changePassword} />}</LoginCtrl>\n      </InnerBox>\n    </LoginLayout>\n  );\n};\n\nexport default ChangePasswordPage;\n"],"sourceRoot":""}