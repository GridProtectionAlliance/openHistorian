{"version":3,"sources":["webpack:///./public/app/plugins/datasource/mixed/MixedDataSource.ts","webpack:///./public/app/plugins/datasource/mixed/module.ts"],"names":["MixedDatasource","instanceSettings","request","queries","targets","filter","t","datasource","length","of","data","sets","groupBy","mixed","key","dsName","push","getDataSourceSrv","get","scopedVars","this","batchQueries","runningQueries","isQueryable","map","query","i","from","pipe","mergeMap","api","dsRequest","cloneDeep","requestId","response","state","LoadingState","Loading","catchError","err","toDataQueryError","message","name","Error","error","forkJoin","finalizeResponses","mergeAll","Promise","resolve","Array","isArray","responses","find","Done","DataSourceApi"],"mappings":"03CAeO,IAOMA,EAAb,YACE,WAAYC,GAA8C,O,4FAAA,+BAClDA,I,UAFV,O,kOAAA,M,EAAA,G,EAAA,6BAKQC,GAEJ,IAAMC,EAAUD,EAAQE,QAAQC,QAAO,SAAAC,GACrC,MAf+B,gBAexBA,EAAEC,cAGX,IAAKJ,EAAQK,OACX,OAAOC,YAAG,CAAEC,KAAM,KAIpB,IAAMC,EAAuCC,IAAQT,EAAS,cACxDU,EAA0B,GAEhC,IAAK,IAAMC,KAAOH,EAAM,CACtB,IAAMP,EAAUO,EAAKG,GACfC,EAASX,EAAQ,GAAGG,WAE1BM,EAAMG,KAAK,CACTT,WAAYU,6BAAmBC,IAAIH,EAAQb,EAAQiB,YACnDf,YAIJ,OAAOgB,KAAKC,aAAaR,EAAOX,KA7BpC,mCAgCeW,EAAyBX,GACpC,IAAMoB,EAAiBT,EAAMR,OAAOe,KAAKG,aAAaC,KAAI,SAACC,EAAOC,GAAR,OACxDC,YAAKF,EAAMlB,YAAYqB,KACrBC,aAAS,SAACC,GACR,IAAMC,EAAYC,IAAU9B,GAI5B,OAHA6B,EAAUE,UAAV,gBAA+BP,EAA/B,YAAoCK,EAAUE,WAAa,IAC3DF,EAAU3B,QAAUqB,EAAMrB,QAEnBuB,YAAKG,EAAIL,MAAMM,IAAYH,KAChCJ,aAAI,SAAAU,GACF,O,+VAAA,IACKA,EADL,CAEExB,KAAMwB,EAASxB,MAAQ,GACvByB,MAAOC,eAAaC,QACpBvB,IAAK,SAAF,OAAWY,EAAX,YAAgBQ,EAASpB,KAAO,SAGvCwB,aAAW,SAAAC,GAKT,OAJAA,EAAMC,2BAAiBD,IAEnBE,QAAJ,UAAiBX,EAAIY,KAArB,aAA8BH,EAAIE,SAE3BhC,YAAG,CACRC,KAAM,GACNyB,MAAOC,eAAaO,MACpBC,MAAOL,EACPzB,IAAK,SAAF,OAAWY,EAAX,YAAgBK,EAAUE,WAAa,iBAQtD,OAAOY,YAASvB,GAAgBM,KAAKJ,YAAIJ,KAAK0B,mBAAoBC,iBAlEtE,uCAsEI,OAAOC,QAAQC,QAAQ,MAtE3B,kCAyEsBxB,GAClB,OAAOA,GAASyB,MAAMC,QAAQ1B,EAAMrB,UAAYqB,EAAMrB,QAAQI,OAAS,IA1E3E,wCA6E4B4C,GAAqD,IACrE5C,EAAW4C,EAAX5C,OAER,GAAe,IAAXA,EACF,OAAO4C,EAGT,IAAMR,EAAQQ,EAAUC,MAAK,SAAAnB,GAAQ,OAAIA,EAASC,QAAUC,eAAaO,SAOzE,OANIC,EACFQ,EAAUpC,KAAK4B,GAEfQ,EAAU5C,EAAS,GAAG2B,MAAQC,eAAakB,KAGtCF,O,2BA3FX,GAAqCG,iBCtBrC","file":"mixedPlugin.591ee81e63053ad31983.js","sourcesContent":["import cloneDeep from 'lodash/cloneDeep';\nimport groupBy from 'lodash/groupBy';\nimport { forkJoin, from, Observable, of } from 'rxjs';\nimport { catchError, map, mergeAll, mergeMap } from 'rxjs/operators';\n\nimport {\n  DataQuery,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  LoadingState,\n} from '@grafana/data';\nimport { getDataSourceSrv, toDataQueryError } from '@grafana/runtime';\n\nexport const MIXED_DATASOURCE_NAME = '-- Mixed --';\n\nexport interface BatchedQueries {\n  datasource: Promise<DataSourceApi>;\n  targets: DataQuery[];\n}\n\nexport class MixedDatasource extends DataSourceApi<DataQuery> {\n  constructor(instanceSettings: DataSourceInstanceSettings) {\n    super(instanceSettings);\n  }\n\n  query(request: DataQueryRequest<DataQuery>): Observable<DataQueryResponse> {\n    // Remove any invalid queries\n    const queries = request.targets.filter(t => {\n      return t.datasource !== MIXED_DATASOURCE_NAME;\n    });\n\n    if (!queries.length) {\n      return of({ data: [] } as DataQueryResponse); // nothing\n    }\n\n    // Build groups of queries to run in parallel\n    const sets: { [key: string]: DataQuery[] } = groupBy(queries, 'datasource');\n    const mixed: BatchedQueries[] = [];\n\n    for (const key in sets) {\n      const targets = sets[key];\n      const dsName = targets[0].datasource;\n\n      mixed.push({\n        datasource: getDataSourceSrv().get(dsName, request.scopedVars),\n        targets,\n      });\n    }\n\n    return this.batchQueries(mixed, request);\n  }\n\n  batchQueries(mixed: BatchedQueries[], request: DataQueryRequest<DataQuery>): Observable<DataQueryResponse> {\n    const runningQueries = mixed.filter(this.isQueryable).map((query, i) =>\n      from(query.datasource).pipe(\n        mergeMap((api: DataSourceApi) => {\n          const dsRequest = cloneDeep(request);\n          dsRequest.requestId = `mixed-${i}-${dsRequest.requestId || ''}`;\n          dsRequest.targets = query.targets;\n\n          return from(api.query(dsRequest)).pipe(\n            map(response => {\n              return {\n                ...response,\n                data: response.data || [],\n                state: LoadingState.Loading,\n                key: `mixed-${i}-${response.key || ''}`,\n              } as DataQueryResponse;\n            }),\n            catchError(err => {\n              err = toDataQueryError(err);\n\n              err.message = `${api.name}: ${err.message}`;\n\n              return of({\n                data: [],\n                state: LoadingState.Error,\n                error: err,\n                key: `mixed-${i}-${dsRequest.requestId || ''}`,\n              });\n            })\n          );\n        })\n      )\n    );\n\n    return forkJoin(runningQueries).pipe(map(this.finalizeResponses), mergeAll());\n  }\n\n  testDatasource() {\n    return Promise.resolve({});\n  }\n\n  private isQueryable(query: BatchedQueries): boolean {\n    return query && Array.isArray(query.targets) && query.targets.length > 0;\n  }\n\n  private finalizeResponses(responses: DataQueryResponse[]): DataQueryResponse[] {\n    const { length } = responses;\n\n    if (length === 0) {\n      return responses;\n    }\n\n    const error = responses.find(response => response.state === LoadingState.Error);\n    if (error) {\n      responses.push(error); // adds the first found error entry so error shows up in the panel\n    } else {\n      responses[length - 1].state = LoadingState.Done;\n    }\n\n    return responses;\n  }\n}\n","import { MixedDatasource } from './MixedDataSource';\nexport { MixedDatasource, MixedDatasource as Datasource };\n"],"sourceRoot":""}