{"version":3,"file":"Connections.0e146ac311628bb44de3.js","mappings":"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","sources":["webpack://grafana/./.yarn/__virtual__/@grafana-data-virtual-adf1e43f85/1/packages/grafana-data/src/types/config.ts","webpack://grafana/./public/app/core/components/PageActionBar/PageActionBar.tsx","webpack://grafana/./public/app/features/connections/tabs/ConnectData/CardGrid/CardGrid.tsx","webpack://grafana/./public/app/features/connections/tabs/ConnectData/CategoryHeader/CategoryHeader.tsx","webpack://grafana/./public/app/features/connections/tabs/ConnectData/NoAccessModal/NoAccessModal.tsx","webpack://grafana/./public/app/features/connections/tabs/ConnectData/NoResults/NoResults.tsx","webpack://grafana/./public/app/features/connections/tabs/ConnectData/Search/Search.tsx","webpack://grafana/./public/app/features/connections/tabs/ConnectData/ConnectData.tsx","webpack://grafana/./public/app/features/connections/pages/ConnectDataPage.tsx","webpack://grafana/./public/app/features/connections/pages/DataSourceDetailsPage.tsx","webpack://grafana/./public/app/features/connections/pages/DataSourcesListPage.tsx","webpack://grafana/./public/app/features/connections/hooks/useDataSourceSettingsNav.ts","webpack://grafana/./public/app/features/connections/pages/DataSourceDashboardsPage.tsx","webpack://grafana/./public/app/features/connections/pages/EditDataSourcePage.tsx","webpack://grafana/./public/app/features/connections/pages/NewDataSourcePage.tsx","webpack://grafana/./public/app/features/connections/Connections.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceAddButton.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceDashboards.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourcesListHeader.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourcesList.tsx","webpack://grafana/./public/app/features/datasources/components/BasicSettings.tsx","webpack://grafana/./public/app/features/datasources/components/ButtonRow.tsx","webpack://grafana/./public/app/features/datasources/components/CloudInfoBox.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceReadOnlyMessage.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceLoadError.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceMissingRightsMessage.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourcePluginConfigPage.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourcePluginSettings.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourcePluginState.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceTestingStatus.tsx","webpack://grafana/./public/app/features/datasources/components/EditDataSource.tsx","webpack://grafana/./public/app/features/plugins/components/PluginsErrorsInfo.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceTypeCard.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceTypeCardList.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceCategories.tsx","webpack://grafana/./public/app/features/datasources/components/NewDataSource.tsx","webpack://grafana/./public/app/features/plugins/components/PluginStateInfo.tsx"],"sourcesContent":["import { SystemDateFormatSettings } from '../datetime';\nimport { MapLayerOptions } from '../geo/layer';\nimport { GrafanaTheme2 } from '../themes';\n\nimport { DataSourceInstanceSettings } from './datasource';\nimport { FeatureToggles } from './featureToggles.gen';\nimport { PanelPluginMeta } from './panel';\n\nimport { GrafanaTheme, IconName, NavLinkDTO, OrgRole } from '.';\n\n/**\n * Describes the build information that will be available via the Grafana configuration.\n *\n * @public\n */\nexport interface BuildInfo {\n  version: string;\n  commit: string;\n  env: string;\n  edition: GrafanaEdition;\n  latestVersion: string;\n  hasUpdate: boolean;\n  hideVersion: boolean;\n}\n\n/**\n * @internal\n */\nexport enum GrafanaEdition {\n  OpenSource = 'Open Source',\n  Pro = 'Pro',\n  Enterprise = 'Enterprise',\n}\n\n/**\n * Describes the license information about the current running instance of Grafana.\n *\n * @public\n */\nexport interface LicenseInfo {\n  expiry: number;\n  licenseUrl: string;\n  stateInfo: string;\n  edition: GrafanaEdition;\n  enabledFeatures: { [key: string]: boolean };\n  trialExpiry?: number;\n}\n\n/**\n * Describes Sentry integration config\n *\n * @public\n */\nexport interface SentryConfig {\n  enabled: boolean;\n  dsn: string;\n  customEndpoint: string;\n  sampleRate: number;\n}\n\n/**\n * Describes GrafanaJavascriptAgentConfig integration config\n *\n * @public\n */\nexport interface GrafanaJavascriptAgentConfig {\n  enabled: boolean;\n  customEndpoint: string;\n  errorInstrumentalizationEnabled: boolean;\n  consoleInstrumentalizationEnabled: boolean;\n  webVitalsInstrumentalizationEnabled: boolean;\n  apiKey: string;\n}\n\nexport interface UnifiedAlertingConfig {\n  minInterval: string;\n}\n\n/** Supported OAuth services\n *\n * @public\n */\nexport type OAuth =\n  | 'github'\n  | 'gitlab'\n  | 'google'\n  | 'generic_oauth'\n  // | 'grafananet' Deprecated. Key always changed to \"grafana_com\"\n  | 'grafana_com'\n  | 'azuread'\n  | 'okta';\n\n/** Map of enabled OAuth services and their respective names\n *\n * @public\n */\nexport type OAuthSettings = Partial<Record<OAuth, { name: string; icon?: IconName }>>;\n\n/**\n * Information needed for analytics providers\n *\n * @internal\n */\nexport interface AnalyticsSettings {\n  identifier: string;\n  intercomIdentifier?: string;\n}\n\n/** Current user info included in bootData\n *\n * @internal\n */\nexport interface CurrentUserDTO {\n  isSignedIn: boolean;\n  id: number;\n  externalUserId: string;\n  login: string;\n  email: string;\n  name: string;\n  theme: string; // dark | light | system\n  orgCount: number;\n  orgId: number;\n  orgName: string;\n  orgRole: OrgRole | '';\n  isGrafanaAdmin: boolean;\n  gravatarUrl: string;\n  timezone: string;\n  weekStart: string;\n  locale: string;\n  language: string;\n  permissions?: Record<string, boolean>;\n  analytics: AnalyticsSettings;\n\n  /** @deprecated Use theme instead */\n  lightTheme: boolean;\n}\n\n/** Contains essential user and config info\n *\n * @internal\n */\nexport interface BootData {\n  user: CurrentUserDTO;\n  settings: GrafanaConfig;\n  navTree: NavLinkDTO[];\n  themePaths: {\n    light: string;\n    dark: string;\n  };\n}\n\n/**\n * Describes all the different Grafana configuration values available for an instance.\n *\n * @internal\n */\nexport interface GrafanaConfig {\n  isPublicDashboardView: boolean;\n  snapshotEnabled: boolean;\n  datasources: { [str: string]: DataSourceInstanceSettings };\n  panels: { [key: string]: PanelPluginMeta };\n  auth: AuthSettings;\n  minRefreshInterval: string;\n  appSubUrl: string;\n  windowTitlePrefix: string;\n  buildInfo: BuildInfo;\n  newPanelTitle: string;\n  bootData: BootData;\n  externalUserMngLinkUrl: string;\n  externalUserMngLinkName: string;\n  externalUserMngInfo: string;\n  allowOrgCreate: boolean;\n  disableLoginForm: boolean;\n  defaultDatasource: string;\n  alertingEnabled: boolean;\n  alertingErrorOrTimeout: string;\n  alertingNoDataOrNullValues: string;\n  alertingMinInterval: number;\n  authProxyEnabled: boolean;\n  exploreEnabled: boolean;\n  queryHistoryEnabled: boolean;\n  helpEnabled: boolean;\n  profileEnabled: boolean;\n  ldapEnabled: boolean;\n  sigV4AuthEnabled: boolean;\n  azureAuthEnabled: boolean;\n  samlEnabled: boolean;\n  autoAssignOrg: boolean;\n  verifyEmailEnabled: boolean;\n  oauth: OAuthSettings;\n  rbacEnabled: boolean;\n  disableUserSignUp: boolean;\n  loginHint: string;\n  passwordHint: string;\n  loginError?: string;\n  viewersCanEdit: boolean;\n  editorsCanAdmin: boolean;\n  disableSanitizeHtml: boolean;\n  liveEnabled: boolean;\n  /** @deprecated Use `theme2` instead. */\n  theme: GrafanaTheme;\n  theme2: GrafanaTheme2;\n  anonymousEnabled: boolean;\n  featureToggles: FeatureToggles;\n  licenseInfo: LicenseInfo;\n  http2Enabled: boolean;\n  dateFormats?: SystemDateFormatSettings;\n  sentry: SentryConfig;\n  grafanaJavascriptAgent: GrafanaJavascriptAgentConfig;\n  customTheme?: any;\n  geomapDefaultBaseLayer?: MapLayerOptions;\n  geomapDisableCustomBaseLayer?: boolean;\n  unifiedAlertingEnabled: boolean;\n  unifiedAlerting: UnifiedAlertingConfig;\n  angularSupportEnabled: boolean;\n  feedbackLinksEnabled: boolean;\n  secretsManagerPluginEnabled: boolean;\n  supportBundlesEnabled: boolean;\n  googleAnalyticsId: string | undefined;\n  googleAnalytics4Id: string | undefined;\n  googleAnalytics4SendManualPageViews: boolean;\n  rudderstackWriteKey: string | undefined;\n  rudderstackDataPlaneUrl: string | undefined;\n  rudderstackSdkUrl: string | undefined;\n  rudderstackConfigUrl: string | undefined;\n}\n\nexport interface AuthSettings {\n  OAuthSkipOrgRoleUpdateSync?: boolean;\n  SAMLSkipOrgRoleSync?: boolean;\n  LDAPSkipOrgRoleSync?: boolean;\n  JWTAuthSkipOrgRoleSync?: boolean;\n  GrafanaComSkipOrgRoleSync?: boolean;\n  GithubSkipOrgRoleSync?: boolean;\n  GitLabSkipOrgRoleSync?: boolean;\n  OktaSkipOrgRoleSync?: boolean;\n  AzureADSkipOrgRoleSync?: boolean;\n  GoogleSkipOrgRoleSync?: boolean;\n  GenericOAuthSkipOrgRoleSync?: boolean;\n  DisableSyncLock?: boolean;\n}\n","import React, { PureComponent } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { LinkButton, FilterInput } from '@grafana/ui';\n\nimport { SortPicker } from '../Select/SortPicker';\n\nexport interface Props {\n  searchQuery: string;\n  setSearchQuery: (value: string) => void;\n  linkButton?: { href: string; title: string; disabled?: boolean };\n  target?: string;\n  placeholder?: string;\n  sortPicker?: {\n    onChange: (sortValue: SelectableValue) => void;\n    value?: string;\n    getSortOptions?: () => Promise<SelectableValue[]>;\n  };\n}\n\nexport default class PageActionBar extends PureComponent<Props> {\n  render() {\n    const {\n      searchQuery,\n      linkButton,\n      setSearchQuery,\n      target,\n      placeholder = 'Search by name or type',\n      sortPicker,\n    } = this.props;\n    const linkProps: typeof LinkButton.defaultProps = { href: linkButton?.href, disabled: linkButton?.disabled };\n\n    if (target) {\n      linkProps.target = target;\n    }\n\n    return (\n      <div className=\"page-action-bar\">\n        <div className=\"gf-form gf-form--grow\">\n          <FilterInput value={searchQuery} onChange={setSearchQuery} placeholder={placeholder} />\n        </div>\n        {sortPicker && (\n          <SortPicker\n            onChange={sortPicker.onChange}\n            value={sortPicker.value}\n            getSortOptions={sortPicker.getSortOptions}\n          />\n        )}\n        {linkButton && <LinkButton {...linkProps}>{linkButton.title}</LinkButton>}\n      </div>\n    );\n  }\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Card, useStyles2 } from '@grafana/ui';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  sourcesList: css`\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));\n    gap: 12px;\n    list-style: none;\n    margin-bottom: 80px;\n  `,\n  card: css`\n    height: 90px;\n    padding: 0px 24px;\n    margin-bottom: 0;\n  `,\n  cardContent: css`\n    display: flex;\n    align-items: center;\n  `,\n  logoWrapper: css`\n    display: flex;\n    justify-content: center;\n    margin-right: 8px;\n    width: 32px;\n    height: 32px;\n    img {\n      max-width: 100%;\n      max-height: 100%;\n      align-self: center;\n    }\n  `,\n  label: css`\n    color: ${theme.colors.text.primary};\n    margin-bottom: 0;\n  `,\n});\n\nexport type CardGridItem = { id: string; name: string; description: string; url: string; logo?: string };\nexport interface CardGridProps {\n  items: CardGridItem[];\n  onClickItem?: (e: React.MouseEvent<HTMLElement>, item: CardGridItem) => void;\n}\n\nexport const CardGrid = ({ items, onClickItem }: CardGridProps) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <ul className={styles.sourcesList}>\n      {items.map((item) => (\n        <Card\n          key={item.id}\n          className={styles.card}\n          href={item.url}\n          onClick={(e) => {\n            if (onClickItem) {\n              onClickItem(e, item);\n            }\n          }}\n        >\n          <Card.Heading>\n            <div className={styles.cardContent}>\n              {item.logo && (\n                <div className={styles.logoWrapper}>\n                  <img src={item.logo} alt={`logo of ${item.name}`} />\n                </div>\n              )}\n              <h4 className={styles.label}>{item.name}</h4>\n            </div>\n          </Card.Heading>\n        </Card>\n      ))}\n    </ul>\n  );\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2, IconName } from '@grafana/data';\nimport { Icon, useStyles2 } from '@grafana/ui';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  categoryHeader: css`\n    align-items: center;\n    display: flex;\n    margin-bottom: 24px;\n  `,\n  categoryLabel: css`\n    margin-bottom: 0px;\n    margin-left: 8px;\n  `,\n});\n\ntype Props = { iconName: IconName; label: string };\n\nexport const CategoryHeader = ({ iconName, label }: Props) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <div className={styles.categoryHeader}>\n      <Icon name={iconName} size=\"xl\" />\n      <h3 className={styles.categoryLabel}>{label}</h3>\n    </div>\n  );\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2, Modal, Icon, Button } from '@grafana/ui';\n\nimport { type CardGridItem } from '../CardGrid';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  modal: css`\n    width: 500px;\n  `,\n  modalContent: css`\n    overflow: visible;\n    color: ${theme.colors.text.secondary};\n\n    a {\n      color: ${theme.colors.text.link};\n    }\n  `,\n  description: css`\n    margin-bottom: ${theme.spacing(2)};\n  `,\n  bottomSection: css`\n    display: flex;\n    border-top: 1px solid ${theme.colors.border.weak};\n    padding-top: ${theme.spacing(3)};\n    margin-top: ${theme.spacing(3)};\n  `,\n  actionsSection: css`\n    display: flex;\n    justify-content: end;\n    margin-top: ${theme.spacing(3)};\n  `,\n  warningIcon: css`\n    color: ${theme.colors.warning.main};\n    padding-right: ${theme.spacing()};\n    margin-top: ${theme.spacing(0.25)};\n  `,\n  header: css`\n    display: flex;\n    align-items: center;\n  `,\n  headerTitle: css`\n    margin: 0;\n  `,\n  headerLogo: css`\n    margin-right: ${theme.spacing(2)};\n    width: 32px;\n    height: 32px;\n  `,\n});\n\nexport type NoAccessModalProps = {\n  item: CardGridItem;\n  isOpen: boolean;\n  onDismiss: () => void;\n};\n\nexport function NoAccessModal({ item, isOpen, onDismiss }: NoAccessModalProps) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Modal\n      className={styles.modal}\n      contentClassName={styles.modalContent}\n      title={<NoAccessModalHeader item={item} />}\n      isOpen={isOpen}\n      onDismiss={onDismiss}\n    >\n      <div>\n        <div>\n          {item.description && <div className={styles.description}>{item.description}</div>}\n          <div>\n            Links\n            <br />\n            <a\n              href={`https://grafana.com/grafana/plugins/${item.id}`}\n              title={`${item.name} on Grafana.com`}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              {item.name}\n            </a>\n          </div>\n        </div>\n        <div className={styles.bottomSection}>\n          <div className={styles.warningIcon}>\n            <Icon name=\"exclamation-triangle\" />\n          </div>\n          <div>\n            <p>\n              Editors cannot add new connections. You may check to see if it is already configured in{' '}\n              <a href=\"/connections/your-connections\">Your Connections</a>.\n            </p>\n            <p>To add a new connection, contact your Grafana admin.</p>\n          </div>\n        </div>\n        <div className={styles.actionsSection}>\n          <Button onClick={onDismiss}>Okay</Button>\n        </div>\n      </div>\n    </Modal>\n  );\n}\n\nexport function NoAccessModalHeader({ item }: { item: CardGridItem }) {\n  const styles = useStyles2(getStyles);\n  return (\n    <div>\n      <div className={styles.header}>\n        {item.logo && <img className={styles.headerLogo} src={item.logo} alt={`logo of ${item.name}`} />}\n        <h4 className={styles.headerTitle}>{item.name}</h4>\n      </div>\n    </div>\n  );\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { useStyles2 } from '@grafana/ui';\n\nconst getStyles = () => ({\n  noResults: css`\n    text-align: center;\n    padding: 50px 0;\n    font-style: italic;\n  `,\n});\n\nexport const NoResults = () => {\n  const styles = useStyles2(getStyles);\n\n  return <p className={styles.noResults}>No results matching your query were found.</p>;\n};\n","import { css } from '@emotion/css';\nimport React, { FC } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, Input, useStyles2 } from '@grafana/ui';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  searchContainer: css`\n    display: flex;\n    margin: 16px 0;\n    justify-content: space-between;\n\n    position: sticky;\n    top: 0;\n    background-color: ${theme.colors.background.primary};\n    z-index: 2;\n    padding: ${theme.spacing(2)};\n    margin: 0 -${theme.spacing(2)};\n  `,\n});\n\nexport const Search: FC<{ onChange: (e: React.FormEvent<HTMLInputElement>) => void }> = ({ onChange }) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.searchContainer}>\n      <Input onChange={onChange} prefix={<Icon name=\"search\" />} placeholder=\"Search all\" aria-label=\"Search all\" />\n    </div>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { useMemo, useState } from 'react';\n\nimport { PluginType } from '@grafana/data';\nimport { useStyles2, LoadingPlaceholder } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\nimport { useGetAllWithFilters } from 'app/features/plugins/admin/state/hooks';\nimport { AccessControlAction } from 'app/types';\n\nimport { ROUTES } from '../../constants';\n\nimport { CardGrid, type CardGridItem } from './CardGrid';\nimport { CategoryHeader } from './CategoryHeader';\nimport { NoAccessModal } from './NoAccessModal';\nimport { NoResults } from './NoResults';\nimport { Search } from './Search';\n\nconst getStyles = () => ({\n  spacer: css`\n    height: 16px;\n  `,\n  modal: css`\n    width: 500px;\n  `,\n  modalContent: css`\n    overflow: visible;\n  `,\n});\n\nexport function ConnectData() {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [isNoAccessModalOpen, setIsNoAccessModalOpen] = useState(false);\n  const [focusedItem, setFocusedItem] = useState<CardGridItem | null>(null);\n  const styles = useStyles2(getStyles);\n  const canCreateDataSources = contextSrv.hasPermission(AccessControlAction.DataSourcesCreate);\n\n  const handleSearchChange = (e: React.FormEvent<HTMLInputElement>) => {\n    setSearchTerm(e.currentTarget.value.toLowerCase());\n  };\n\n  const { isLoading, error, plugins } = useGetAllWithFilters({\n    query: searchTerm,\n    filterBy: '',\n    filterByType: PluginType.datasource,\n  });\n\n  const cardGridItems = useMemo(\n    () =>\n      plugins.map((plugin) => ({\n        id: plugin.id,\n        name: plugin.name,\n        description: plugin.description,\n        logo: plugin.info.logos.small,\n        url: ROUTES.DataSourcesDetails.replace(':id', plugin.id),\n      })),\n    [plugins]\n  );\n\n  const onClickCardGridItem = (e: React.MouseEvent<HTMLElement>, item: CardGridItem) => {\n    if (!canCreateDataSources) {\n      e.preventDefault();\n      e.stopPropagation();\n\n      openModal(item);\n    }\n  };\n\n  const openModal = (item: CardGridItem) => {\n    setIsNoAccessModalOpen(true);\n    setFocusedItem(item);\n  };\n\n  const closeModal = () => {\n    setIsNoAccessModalOpen(false);\n    setFocusedItem(null);\n  };\n\n  const showNoResults = useMemo(() => !isLoading && !error && plugins.length < 1, [isLoading, error, plugins]);\n\n  return (\n    <>\n      {focusedItem && <NoAccessModal item={focusedItem} isOpen={isNoAccessModalOpen} onDismiss={closeModal} />}\n      <Search onChange={handleSearchChange} />\n      {/* We need this extra spacing when there are no filters */}\n      <div className={styles.spacer} />\n      <CategoryHeader iconName=\"database\" label=\"Data sources\" />\n      {isLoading ? (\n        <LoadingPlaceholder text=\"Loading...\" />\n      ) : !!error ? (\n        <p>Error: {error.message}</p>\n      ) : (\n        <CardGrid items={cardGridItems} onClickItem={onClickCardGridItem} />\n      )}\n      {showNoResults && <NoResults />}\n    </>\n  );\n}\n","import * as React from 'react';\n\nimport { Page } from 'app/core/components/Page/Page';\n\nimport { ConnectData } from '../tabs/ConnectData';\n\nexport function ConnectDataPage() {\n  return (\n    <Page navId={'connections-connect-data'}>\n      <Page.Contents>\n        <ConnectData />\n      </Page.Contents>\n    </Page>\n  );\n}\n","import * as React from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { Alert, Badge } from '@grafana/ui';\nimport { PluginDetailsPage } from 'app/features/plugins/admin/components/PluginDetailsPage';\nimport { StoreState, useSelector, AppNotificationSeverity } from 'app/types';\n\nimport { ROUTES } from '../constants';\n\nexport function DataSourceDetailsPage() {\n  const overrideNavId = 'standalone-plugin-page-/connections/connect-data';\n  const { id } = useParams<{ id: string }>();\n  const navIndex = useSelector((state: StoreState) => state.navIndex);\n  const isConnectDataPageOverriden = Boolean(navIndex[overrideNavId]);\n  const navId = isConnectDataPageOverriden ? overrideNavId : 'connections-connect-data'; // The nav id changes (gets a prefix) if it is overriden by a plugin\n\n  return (\n    <PluginDetailsPage\n      pluginId={id}\n      navId={navId}\n      notFoundComponent={<NotFoundDatasource />}\n      notFoundNavModel={{\n        text: 'Unknown datasource',\n        subTitle: 'No datasource with this ID could be found.',\n        active: true,\n      }}\n    />\n  );\n}\n\nfunction NotFoundDatasource() {\n  const { id } = useParams<{ id: string }>();\n\n  return (\n    <Alert severity={AppNotificationSeverity.Warning} title=\"\">\n      Maybe you mistyped the URL or the plugin with the id <Badge text={id} color=\"orange\" /> is unavailable.\n      <br />\n      To see a list of available datasources please <a href={ROUTES.ConnectData}>click here</a>.\n    </Alert>\n  );\n}\n","import * as React from 'react';\n\nimport { config } from '@grafana/runtime';\nimport { Page } from 'app/core/components/Page/Page';\nimport { DataSourceAddButton } from 'app/features/datasources/components/DataSourceAddButton';\nimport { DataSourcesList } from 'app/features/datasources/components/DataSourcesList';\nimport { getDataSourcesCount } from 'app/features/datasources/state';\nimport { StoreState, useSelector } from 'app/types';\n\nexport function DataSourcesListPage() {\n  const dataSourcesCount = useSelector(({ dataSources }: StoreState) => getDataSourcesCount(dataSources));\n\n  const actions = config.featureToggles.topnav && dataSourcesCount > 0 ? <DataSourceAddButton /> : undefined;\n  return (\n    <Page navId={'connections-your-connections-datasources'} actions={actions}>\n      <Page.Contents>\n        <DataSourcesList />\n      </Page.Contents>\n    </Page>\n  );\n}\n","import { useLocation, useParams } from 'react-router-dom';\n\nimport {\n  useDataSource,\n  useDataSourceSettingsNav as useDataSourceSettingsNavOriginal,\n} from 'app/features/datasources/state/hooks';\nimport { useGetSingle } from 'app/features/plugins/admin/state/hooks';\n\n// We are extending the original useDataSourceSettingsNav in the following ways:\n// - changing the URL of the nav items to point to Connections\n// - setting the parent nav item\nexport function useDataSourceSettingsNav(pageId?: string) {\n  const { uid } = useParams<{ uid: string }>();\n  const location = useLocation();\n  const datasource = useDataSource(uid);\n  const datasourcePlugin = useGetSingle(datasource.type);\n  const params = new URLSearchParams(location.search);\n  const nav = useDataSourceSettingsNavOriginal(uid, pageId || params.get('page'));\n  const pageNav = {\n    ...nav.main,\n    text: datasource.name,\n    subTitle: `Type: ${datasourcePlugin?.name}`,\n    active: true,\n    children: (nav.main.children || []).map((navModelItem) => ({\n      ...navModelItem,\n      url: navModelItem.url?.replace('datasources/edit/', '/connections/your-connections/datasources/edit/'),\n    })),\n  };\n\n  return {\n    navId: 'connections-your-connections-datasources',\n    pageNav,\n  };\n}\n","import * as React from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { Page } from 'app/core/components/Page/Page';\nimport { DataSourceDashboards } from 'app/features/datasources/components/DataSourceDashboards';\n\nimport { useDataSourceSettingsNav } from '../hooks/useDataSourceSettingsNav';\n\nexport function DataSourceDashboardsPage() {\n  const { uid } = useParams<{ uid: string }>();\n  const { navId, pageNav } = useDataSourceSettingsNav('dashboards');\n\n  return (\n    <Page navId={navId} pageNav={pageNav}>\n      <Page.Contents>\n        <DataSourceDashboards uid={uid} />\n      </Page.Contents>\n    </Page>\n  );\n}\n","import * as React from 'react';\nimport { useLocation, useParams } from 'react-router-dom';\n\nimport { Page } from 'app/core/components/Page/Page';\nimport { EditDataSource } from 'app/features/datasources/components/EditDataSource';\n\nimport { useDataSourceSettingsNav } from '../hooks/useDataSourceSettingsNav';\n\nexport function EditDataSourcePage() {\n  const { uid } = useParams<{ uid: string }>();\n  const location = useLocation();\n  const params = new URLSearchParams(location.search);\n  const pageId = params.get('page');\n  const { navId, pageNav } = useDataSourceSettingsNav();\n\n  return (\n    <Page navId={navId} pageNav={pageNav}>\n      <Page.Contents>\n        <EditDataSource uid={uid} pageId={pageId} />\n      </Page.Contents>\n    </Page>\n  );\n}\n","import * as React from 'react';\n\nimport { Page } from 'app/core/components/Page/Page';\nimport { NewDataSource } from 'app/features/datasources/components/NewDataSource';\n\nexport function NewDataSourcePage() {\n  return (\n    <Page\n      navId={'connections-your-connections-datasources'}\n      pageNav={{ text: 'Add data source', subTitle: 'Choose a data source type', active: true }}\n    >\n      <Page.Contents>\n        <NewDataSource />\n      </Page.Contents>\n    </Page>\n  );\n}\n","import * as React from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\n\nimport { NavLandingPage } from 'app/core/components/AppChrome/NavLandingPage';\nimport { DataSourcesRoutesContext } from 'app/features/datasources/state';\nimport { StoreState, useSelector } from 'app/types';\n\nimport { ROUTES } from './constants';\nimport {\n  ConnectDataPage,\n  DataSourceDashboardsPage,\n  DataSourceDetailsPage,\n  DataSourcesListPage,\n  EditDataSourcePage,\n  NewDataSourcePage,\n} from './pages';\n\nexport default function Connections() {\n  const navIndex = useSelector((state: StoreState) => state.navIndex);\n  const isConnectDataPageOverriden = Boolean(navIndex['standalone-plugin-page-/connections/connect-data']);\n\n  const YourConnectionsPage =\n    navIndex['connections-your-connections'].children && navIndex['connections-your-connections'].children?.length > 1\n      ? () => <NavLandingPage navId=\"connections-your-connections\" />\n      : () => <Redirect to={ROUTES.DataSources} />;\n\n  return (\n    <DataSourcesRoutesContext.Provider\n      value={{\n        New: ROUTES.DataSourcesNew,\n        List: ROUTES.DataSources,\n        Edit: ROUTES.DataSourcesEdit,\n        Dashboards: ROUTES.DataSourcesDashboards,\n      }}\n    >\n      <Switch>\n        {/* Redirect to \"Connect data\" by default */}\n        <Route exact sensitive path={ROUTES.Base} component={() => <Redirect to={ROUTES.ConnectData} />} />\n        <Route exact sensitive path={ROUTES.YourConnections} component={YourConnectionsPage} />\n        <Route exact sensitive path={ROUTES.DataSources} component={DataSourcesListPage} />\n        <Route exact sensitive path={ROUTES.DataSourcesDetails} component={DataSourceDetailsPage} />\n        <Route exact sensitive path={ROUTES.DataSourcesNew} component={NewDataSourcePage} />\n        <Route exact sensitive path={ROUTES.DataSourcesEdit} component={EditDataSourcePage} />\n        <Route exact sensitive path={ROUTES.DataSourcesDashboards} component={DataSourceDashboardsPage} />\n\n        {/* \"Connect data\" page - we don't register a route in case a plugin already registers a standalone page for it */}\n        {!isConnectDataPageOverriden && <Route exact sensitive path={ROUTES.ConnectData} component={ConnectDataPage} />}\n\n        {/* Not found */}\n        <Route component={() => <Redirect to=\"/notfound\" />} />\n      </Switch>\n    </DataSourcesRoutesContext.Provider>\n  );\n}\n","import React from 'react';\n\nimport { config } from '@grafana/runtime';\nimport { LinkButton } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction } from 'app/types';\n\nimport { useDataSourcesRoutes } from '../state';\n\nexport function DataSourceAddButton(): JSX.Element | null {\n  const canCreateDataSource = contextSrv.hasPermission(AccessControlAction.DataSourcesCreate);\n  const dataSourcesRoutes = useDataSourcesRoutes();\n\n  return canCreateDataSource ? (\n    <LinkButton icon=\"plus\" href={config.appSubUrl + dataSourcesRoutes.New}>\n      Add new data source\n    </LinkButton>\n  ) : null;\n}\n","import React, { useEffect } from 'react';\n\nimport PageLoader from 'app/core/components/PageLoader/PageLoader';\nimport { importDashboard, removeDashboard } from 'app/features/dashboard/state/actions';\nimport { loadPluginDashboards } from 'app/features/plugins/admin/state/actions';\nimport { PluginDashboard, StoreState, useDispatch, useSelector } from 'app/types';\n\nimport DashboardTable from '../components/DashboardsTable';\nimport { useLoadDataSource } from '../state';\n\nexport type Props = {\n  // The UID of the data source\n  uid: string;\n};\n\nexport function DataSourceDashboards({ uid }: Props) {\n  useLoadDataSource(uid);\n\n  const dispatch = useDispatch();\n  const dataSource = useSelector((s: StoreState) => s.dataSources.dataSource);\n  const dashboards = useSelector((s: StoreState) => s.plugins.dashboards);\n  const isLoading = useSelector((s: StoreState) => s.plugins.isLoadingPluginDashboards);\n\n  useEffect(() => {\n    // Load plugin dashboards only when the datasource has loaded\n    if (dataSource.id > 0) {\n      dispatch(loadPluginDashboards());\n    }\n  }, [dispatch, dataSource]);\n\n  const onImportDashboard = (dashboard: PluginDashboard, overwrite: boolean) => {\n    dispatch(\n      importDashboard(\n        {\n          pluginId: dashboard.pluginId,\n          path: dashboard.path,\n          overwrite,\n          inputs: [\n            {\n              name: '*',\n              type: 'datasource',\n              pluginId: dataSource.type,\n              value: dataSource.name,\n            },\n          ],\n        },\n        dashboard.title\n      )\n    );\n  };\n\n  const onRemoveDashboard = ({ uid }: PluginDashboard) => {\n    dispatch(removeDashboard(uid));\n  };\n\n  return (\n    <DataSourceDashboardsView\n      dashboards={dashboards}\n      isLoading={isLoading}\n      onImportDashboard={onImportDashboard}\n      onRemoveDashboard={onRemoveDashboard}\n    />\n  );\n}\n\nexport type ViewProps = {\n  isLoading: boolean;\n  dashboards: PluginDashboard[];\n  onImportDashboard: (dashboard: PluginDashboard, overwrite: boolean) => void;\n  onRemoveDashboard: (dashboard: PluginDashboard) => void;\n};\n\nexport const DataSourceDashboardsView = ({\n  isLoading,\n  dashboards,\n  onImportDashboard,\n  onRemoveDashboard,\n}: ViewProps) => {\n  if (isLoading) {\n    return <PageLoader />;\n  }\n\n  return <DashboardTable dashboards={dashboards} onImport={onImportDashboard} onRemove={onRemoveDashboard} />;\n};\n","import React, { useCallback } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport PageActionBar from 'app/core/components/PageActionBar/PageActionBar';\nimport { contextSrv } from 'app/core/core';\nimport { StoreState, useSelector, useDispatch, AccessControlAction } from 'app/types';\n\nimport {\n  getDataSourcesSearchQuery,\n  getDataSourcesSort,\n  setDataSourcesSearchQuery,\n  setIsSortAscending,\n  useDataSourcesRoutes,\n} from '../state';\n\nconst ascendingSortValue = 'alpha-asc';\nconst descendingSortValue = 'alpha-desc';\n\nconst sortOptions = [\n  // We use this unicode 'en dash' character (U+2013), because it looks nicer\n  // than simple dash in this context. This is also used in the response of\n  // the `sorting` endpoint, which is used in the search dashboard page.\n  { label: 'Sort by A–Z', value: ascendingSortValue },\n  { label: 'Sort by Z–A', value: descendingSortValue },\n];\n\nexport function DataSourcesListHeader() {\n  const dispatch = useDispatch();\n  const setSearchQuery = useCallback((q: string) => dispatch(setDataSourcesSearchQuery(q)), [dispatch]);\n  const searchQuery = useSelector(({ dataSources }: StoreState) => getDataSourcesSearchQuery(dataSources));\n\n  // TODO remove this logic adding the link button once topnav is live\n  // instead use the actions in DataSourcesListPage\n  const canCreateDataSource = contextSrv.hasPermission(AccessControlAction.DataSourcesCreate);\n  const dataSourcesRoutes = useDataSourcesRoutes();\n  const isTopnav = config.featureToggles.topnav;\n  const linkButton =\n    !isTopnav && canCreateDataSource\n      ? {\n          href: dataSourcesRoutes.New,\n          title: 'Add new data source',\n        }\n      : undefined;\n\n  const setSort = useCallback(\n    (sort: SelectableValue) => dispatch(setIsSortAscending(sort.value === ascendingSortValue)),\n    [dispatch]\n  );\n  const isSortAscending = useSelector(({ dataSources }: StoreState) => getDataSourcesSort(dataSources));\n\n  const sortPicker = {\n    onChange: setSort,\n    value: isSortAscending ? ascendingSortValue : descendingSortValue,\n    getSortOptions: () => Promise.resolve(sortOptions),\n  };\n\n  return (\n    <PageActionBar\n      searchQuery={searchQuery}\n      setSearchQuery={setSearchQuery}\n      key=\"action-bar\"\n      sortPicker={sortPicker}\n      linkButton={linkButton}\n    />\n  );\n}\n","import { css } from '@emotion/css';\nimport React, { useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport { DataSourceSettings, GrafanaTheme2 } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { LinkButton, Card, Tag, useStyles2 } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport PageLoader from 'app/core/components/PageLoader/PageLoader';\nimport { contextSrv } from 'app/core/core';\nimport { StoreState, AccessControlAction, useSelector } from 'app/types';\n\nimport { getDataSources, getDataSourcesCount, useDataSourcesRoutes, useLoadDataSources } from '../state';\nimport { trackCreateDashboardClicked, trackExploreClicked, trackDataSourcesListViewed } from '../tracking';\nimport { constructDataSourceExploreUrl } from '../utils';\n\nimport { DataSourcesListHeader } from './DataSourcesListHeader';\n\nexport function DataSourcesList() {\n  const { isLoading } = useLoadDataSources();\n\n  const dataSources = useSelector((state) => getDataSources(state.dataSources));\n  const dataSourcesCount = useSelector(({ dataSources }: StoreState) => getDataSourcesCount(dataSources));\n  const hasCreateRights = contextSrv.hasPermission(AccessControlAction.DataSourcesCreate);\n  const hasWriteRights = contextSrv.hasPermission(AccessControlAction.DataSourcesWrite);\n  const hasExploreRights = contextSrv.hasPermission(AccessControlAction.DataSourcesExplore);\n\n  return (\n    <DataSourcesListView\n      dataSources={dataSources}\n      dataSourcesCount={dataSourcesCount}\n      isLoading={isLoading}\n      hasCreateRights={hasCreateRights}\n      hasWriteRights={hasWriteRights}\n      hasExploreRights={hasExploreRights}\n    />\n  );\n}\n\nexport type ViewProps = {\n  dataSources: DataSourceSettings[];\n  dataSourcesCount: number;\n  isLoading: boolean;\n  hasCreateRights: boolean;\n  hasWriteRights: boolean;\n  hasExploreRights: boolean;\n};\n\nexport function DataSourcesListView({\n  dataSources,\n  dataSourcesCount,\n  isLoading,\n  hasCreateRights,\n  hasWriteRights,\n  hasExploreRights,\n}: ViewProps) {\n  const styles = useStyles2(getStyles);\n  const dataSourcesRoutes = useDataSourcesRoutes();\n  const location = useLocation();\n\n  useEffect(() => {\n    trackDataSourcesListViewed({\n      grafana_version: config.buildInfo.version,\n      path: location.pathname,\n    });\n  }, [location]);\n\n  if (isLoading) {\n    return <PageLoader />;\n  }\n\n  if (dataSourcesCount === 0) {\n    return (\n      <EmptyListCTA\n        buttonDisabled={!hasCreateRights}\n        title=\"No data sources defined\"\n        buttonIcon=\"database\"\n        buttonLink={dataSourcesRoutes.New}\n        buttonTitle=\"Add data source\"\n        proTip=\"You can also define data sources through configuration files.\"\n        proTipLink=\"http://docs.grafana.org/administration/provisioning/#datasources?utm_source=grafana_ds_list\"\n        proTipLinkTitle=\"Learn more\"\n        proTipTarget=\"_blank\"\n      />\n    );\n  }\n\n  return (\n    <>\n      {/* List Header */}\n      <DataSourcesListHeader />\n\n      {/* List */}\n      <ul className={styles.list}>\n        {dataSources.map((dataSource) => {\n          const dsLink = config.appSubUrl + dataSourcesRoutes.Edit.replace(/:uid/gi, dataSource.uid);\n          return (\n            <li key={dataSource.uid}>\n              <Card href={hasWriteRights ? dsLink : undefined}>\n                <Card.Heading>{dataSource.name}</Card.Heading>\n                <Card.Figure>\n                  <img src={dataSource.typeLogoUrl} alt=\"\" height=\"40px\" width=\"40px\" className={styles.logo} />\n                </Card.Figure>\n                <Card.Meta>\n                  {[\n                    dataSource.typeName,\n                    dataSource.url,\n                    dataSource.isDefault && <Tag key=\"default-tag\" name={'default'} colorIndex={1} />,\n                  ]}\n                </Card.Meta>\n                <Card.Tags>\n                  {/* Build Dashboard */}\n                  <LinkButton\n                    icon=\"apps\"\n                    fill=\"outline\"\n                    variant=\"secondary\"\n                    href={`dashboard/new-with-ds/${dataSource.uid}`}\n                    onClick={() => {\n                      trackCreateDashboardClicked({\n                        grafana_version: config.buildInfo.version,\n                        datasource_uid: dataSource.uid,\n                        plugin_name: dataSource.typeName,\n                        path: location.pathname,\n                      });\n                    }}\n                  >\n                    Build a dashboard\n                  </LinkButton>\n\n                  {/* Explore */}\n                  {hasExploreRights && (\n                    <LinkButton\n                      icon=\"compass\"\n                      fill=\"outline\"\n                      variant=\"secondary\"\n                      className={styles.button}\n                      href={constructDataSourceExploreUrl(dataSource)}\n                      onClick={() => {\n                        trackExploreClicked({\n                          grafana_version: config.buildInfo.version,\n                          datasource_uid: dataSource.uid,\n                          plugin_name: dataSource.typeName,\n                          path: location.pathname,\n                        });\n                      }}\n                    >\n                      Explore\n                    </LinkButton>\n                  )}\n                </Card.Tags>\n              </Card>\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    list: css({\n      listStyle: 'none',\n      display: 'grid',\n      // gap: '8px', Add back when legacy support for old Card interface is dropped\n    }),\n    logo: css({\n      objectFit: 'contain',\n    }),\n    button: css({\n      marginLeft: theme.spacing(2),\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { InlineField, InlineSwitch, Input, Badge, useStyles2 } from '@grafana/ui';\n\nexport interface Props {\n  dataSourceName: string;\n  isDefault: boolean;\n  onNameChange: (name: string) => void;\n  onDefaultChange: (value: boolean) => void;\n  alertingSupported: boolean;\n  disabled?: boolean;\n}\n\nexport function BasicSettings({\n  dataSourceName,\n  isDefault,\n  onDefaultChange,\n  onNameChange,\n  alertingSupported,\n  disabled,\n}: Props) {\n  return (\n    <>\n      <AlertingEnabled enabled={alertingSupported} />\n\n      <div className=\"gf-form-group\" aria-label=\"Datasource settings page basic settings\">\n        <div className=\"gf-form-inline\">\n          {/* Name */}\n          <div className=\"gf-form max-width-30\">\n            <InlineField\n              label=\"Name\"\n              tooltip=\"The name is used when you select the data source in panels. The default data source is\n              'preselected in new panels.\"\n              grow\n              disabled={disabled}\n            >\n              <Input\n                id=\"basic-settings-name\"\n                type=\"text\"\n                value={dataSourceName}\n                placeholder=\"Name\"\n                onChange={(event) => onNameChange(event.currentTarget.value)}\n                required\n                aria-label={selectors.pages.DataSource.name}\n              />\n            </InlineField>\n          </div>\n\n          {/* Is Default */}\n          <InlineField label=\"Default\" labelWidth={8} disabled={disabled}>\n            <InlineSwitch\n              id=\"basic-settings-default\"\n              value={isDefault}\n              onChange={(event: React.FormEvent<HTMLInputElement>) => {\n                onDefaultChange(event.currentTarget.checked);\n              }}\n            />\n          </InlineField>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport function AlertingEnabled({ enabled }: { enabled: boolean }) {\n  const styles = useStyles2(getStyles);\n  return (\n    <div className={styles.badge}>\n      {enabled ? (\n        <Badge color=\"green\" icon=\"check-circle\" text=\"Alerting supported\" />\n      ) : (\n        <Badge color=\"orange\" icon=\"exclamation-triangle\" text=\"Alerting not supported\" />\n      )}\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  badge: css`\n    margin-bottom: ${theme.spacing(2)};\n  `,\n});\n","import React from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Button, LinkButton } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction } from 'app/types';\n\nexport interface Props {\n  exploreUrl: string;\n  canSave: boolean;\n  canDelete: boolean;\n  onDelete: () => void;\n  onSubmit: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  onTest: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n}\n\nexport function ButtonRow({ canSave, canDelete, onDelete, onSubmit, onTest, exploreUrl }: Props) {\n  const canExploreDataSources = contextSrv.hasPermission(AccessControlAction.DataSourcesExplore);\n\n  return (\n    <div className=\"gf-form-button-row\">\n      <Button variant=\"secondary\" fill=\"solid\" type=\"button\" onClick={() => history.back()}>\n        Back\n      </Button>\n      <LinkButton variant=\"secondary\" fill=\"solid\" href={exploreUrl} disabled={!canExploreDataSources}>\n        Explore\n      </LinkButton>\n      <Button\n        type=\"button\"\n        variant=\"destructive\"\n        disabled={!canDelete}\n        onClick={onDelete}\n        aria-label={selectors.pages.DataSource.delete}\n      >\n        Delete\n      </Button>\n      {canSave && (\n        <Button\n          type=\"submit\"\n          variant=\"primary\"\n          disabled={!canSave}\n          onClick={(event) => onSubmit(event)}\n          aria-label={selectors.pages.DataSource.saveAndTest}\n        >\n          Save &amp; test\n        </Button>\n      )}\n      {!canSave && (\n        <Button variant=\"primary\" onClick={onTest}>\n          Test\n        </Button>\n      )}\n    </div>\n  );\n}\n","import React from 'react';\n\nimport { DataSourceSettings } from '@grafana/data';\nimport { GrafanaEdition } from '@grafana/data/src/types/config';\nimport { Alert } from '@grafana/ui';\nimport { LocalStorageValueProvider } from 'app/core/components/LocalStorageValueProvider';\nimport { config } from 'app/core/config';\n\nconst LOCAL_STORAGE_KEY = 'datasources.settings.cloudInfoBox.isDismissed';\n\nexport interface Props {\n  dataSource: DataSourceSettings;\n}\n\nexport function CloudInfoBox({ dataSource }: Props) {\n  let mainDS = '';\n  let extraDS = '';\n\n  // don't show for already configured data sources or provisioned data sources\n  if (dataSource.readOnly || (dataSource.version ?? 0) > 2) {\n    return null;\n  }\n\n  // Skip showing this info box in some editions\n  if (config.buildInfo.edition !== GrafanaEdition.OpenSource) {\n    return null;\n  }\n\n  switch (dataSource.type) {\n    case 'prometheus':\n      mainDS = 'Prometheus';\n      extraDS = 'Loki';\n      break;\n    case 'loki':\n      mainDS = 'Loki';\n      extraDS = 'Prometheus';\n      break;\n    default:\n      return null;\n  }\n\n  return (\n    <LocalStorageValueProvider<boolean> storageKey={LOCAL_STORAGE_KEY} defaultValue={false}>\n      {(isDismissed, onDismiss) => {\n        if (isDismissed) {\n          return null;\n        }\n        return (\n          <Alert\n            title={`Configure your ${mainDS} data source below`}\n            severity=\"info\"\n            bottomSpacing={4}\n            onRemove={() => {\n              onDismiss(true);\n            }}\n          >\n            Or skip the effort and get {mainDS} (and {extraDS}) as fully-managed, scalable, and hosted data sources from\n            Grafana Labs with the{' '}\n            <a\n              className=\"external-link\"\n              href={`https://grafana.com/signup/cloud/connect-account?src=grafana-oss&cnt=${dataSource.type}-settings`}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              title=\"The free plan includes 10k active metrics and 50gb storage.\"\n            >\n              free-forever Grafana Cloud plan\n            </a>\n            .\n          </Alert>\n        );\n      }}\n    </LocalStorageValueProvider>\n  );\n}\n","import React from 'react';\n\nimport { selectors as e2eSelectors } from '@grafana/e2e-selectors';\nimport { Alert } from '@grafana/ui';\n\nexport const readOnlyMessage =\n  'This data source was added by config and cannot be modified using the UI. Please contact your server admin to update this data source.';\n\nexport function DataSourceReadOnlyMessage() {\n  return (\n    <Alert aria-label={e2eSelectors.pages.DataSource.readOnly} severity=\"info\" title=\"Provisioned data source\">\n      {readOnlyMessage}\n    </Alert>\n  );\n}\n","import React from 'react';\n\nimport { Button } from '@grafana/ui';\n\nimport { DataSourceRights } from '../types';\n\nimport { DataSourceReadOnlyMessage } from './DataSourceReadOnlyMessage';\n\nexport type Props = {\n  dataSourceRights: DataSourceRights;\n  onDelete: () => void;\n};\n\nexport function DataSourceLoadError({ dataSourceRights, onDelete }: Props) {\n  const { readOnly, hasDeleteRights } = dataSourceRights;\n  const canDelete = !readOnly && hasDeleteRights;\n  const navigateBack = () => history.back();\n\n  return (\n    <>\n      {readOnly && <DataSourceReadOnlyMessage />}\n\n      <div className=\"gf-form-button-row\">\n        {canDelete && (\n          <Button type=\"submit\" variant=\"destructive\" onClick={onDelete}>\n            Delete\n          </Button>\n        )}\n\n        <Button variant=\"secondary\" fill=\"outline\" type=\"button\" onClick={navigateBack}>\n          Back\n        </Button>\n      </div>\n    </>\n  );\n}\n","import React from 'react';\n\nimport { Alert } from '@grafana/ui';\n\nexport const missingRightsMessage =\n  'You are not allowed to modify this data source. Please contact your server admin to update this data source.';\n\nexport function DataSourceMissingRightsMessage() {\n  return (\n    <Alert severity=\"info\" title=\"Missing rights\">\n      {missingRightsMessage}\n    </Alert>\n  );\n}\n","import React from 'react';\n\nimport { GenericDataSourcePlugin } from '../types';\n\nexport type Props = {\n  plugin?: GenericDataSourcePlugin | null;\n  pageId: string;\n};\n\nexport function DataSourcePluginConfigPage({ plugin, pageId }: Props) {\n  if (!plugin || !plugin.configPages) {\n    return null;\n  }\n\n  const page = plugin.configPages.find(({ id }) => id === pageId);\n\n  if (page) {\n    // TODO: Investigate if any plugins are using this? We should change this interface\n    return <page.body plugin={plugin} query={{}} />;\n  }\n\n  return <div>Page not found: {page}</div>;\n}\n","import { cloneDeep } from 'lodash';\nimport React, { PureComponent } from 'react';\n\nimport { DataSourcePluginMeta, DataSourceSettings } from '@grafana/data';\nimport { AngularComponent, getAngularLoader } from '@grafana/runtime';\n\nimport { GenericDataSourcePlugin } from '../types';\n\nexport interface Props {\n  plugin: GenericDataSourcePlugin;\n  dataSource: DataSourceSettings;\n  dataSourceMeta: DataSourcePluginMeta;\n  onModelChange: (dataSource: DataSourceSettings) => void;\n}\n\nexport class DataSourcePluginSettings extends PureComponent<Props> {\n  element: HTMLDivElement | null = null;\n  component?: AngularComponent;\n  scopeProps: {\n    ctrl: { datasourceMeta: DataSourcePluginMeta; current: DataSourceSettings };\n    onModelChanged: (dataSource: DataSourceSettings) => void;\n  };\n\n  constructor(props: Props) {\n    super(props);\n\n    this.scopeProps = {\n      ctrl: { datasourceMeta: props.dataSourceMeta, current: cloneDeep(props.dataSource) },\n      onModelChanged: this.onModelChanged,\n    };\n    this.onModelChanged = this.onModelChanged.bind(this);\n  }\n\n  componentDidMount() {\n    const { plugin } = this.props;\n\n    if (!this.element) {\n      return;\n    }\n\n    if (!plugin.components.ConfigEditor) {\n      // React editor is not specified, let's render angular editor\n      // How to approach this better? Introduce ReactDataSourcePlugin interface and typeguard it here?\n      const loader = getAngularLoader();\n      const template = '<plugin-component type=\"datasource-config-ctrl\" />';\n\n      this.component = loader.load(this.element, this.scopeProps, template);\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { plugin } = this.props;\n    if (!plugin.components.ConfigEditor && this.props.dataSource !== prevProps.dataSource) {\n      this.scopeProps.ctrl.current = cloneDeep(this.props.dataSource);\n\n      this.component?.digest();\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.component) {\n      this.component.destroy();\n    }\n  }\n\n  onModelChanged = (dataSource: DataSourceSettings) => {\n    this.props.onModelChange(dataSource);\n  };\n\n  render() {\n    const { plugin, dataSource } = this.props;\n\n    if (!plugin) {\n      return null;\n    }\n\n    return (\n      <div ref={(element) => (this.element = element)}>\n        {plugin.components.ConfigEditor &&\n          React.createElement(plugin.components.ConfigEditor, {\n            options: dataSource,\n            onOptionsChange: this.onModelChanged,\n          })}\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport { PluginState } from '@grafana/data';\nimport { PluginStateInfo } from 'app/features/plugins/components/PluginStateInfo';\n\nexport type Props = {\n  state?: PluginState;\n};\n\nexport function DataSourcePluginState({ state }: Props) {\n  return (\n    <div className=\"gf-form\">\n      <div className=\"gf-form-label width-10\">Plugin state</div>\n      <div className=\"gf-form-label gf-form-label--transparent\">\n        <PluginStateInfo state={state} />\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\n\nimport { selectors as e2eSelectors } from '@grafana/e2e-selectors';\nimport { TestingStatus } from '@grafana/runtime';\nimport { Alert } from '@grafana/ui';\n\nexport type Props = {\n  testingStatus?: TestingStatus;\n};\n\nexport function DataSourceTestingStatus({ testingStatus }: Props) {\n  const isError = testingStatus?.status === 'error';\n  const message = testingStatus?.message;\n  const detailsMessage = testingStatus?.details?.message;\n  const detailsVerboseMessage = testingStatus?.details?.verboseMessage;\n\n  if (message) {\n    return (\n      <div className=\"gf-form-group p-t-2\">\n        <Alert\n          severity={isError ? 'error' : 'success'}\n          title={message}\n          aria-label={e2eSelectors.pages.DataSource.alert}\n        >\n          {testingStatus?.details && (\n            <>\n              {detailsMessage}\n              {detailsVerboseMessage ? (\n                <details style={{ whiteSpace: 'pre-wrap' }}>{detailsVerboseMessage}</details>\n              ) : null}\n            </>\n          )}\n        </Alert>\n      </div>\n    );\n  }\n\n  return null;\n}\n","import { AnyAction } from '@reduxjs/toolkit';\nimport React from 'react';\n\nimport {\n  DataSourcePluginContextProvider,\n  DataSourcePluginMeta,\n  DataSourceSettings as DataSourceSettingsType,\n} from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport PageLoader from 'app/core/components/PageLoader/PageLoader';\nimport { DataSourceSettingsState, useDispatch } from 'app/types';\n\nimport {\n  dataSourceLoaded,\n  setDataSourceName,\n  setIsDefault,\n  useDataSource,\n  useDataSourceExploreUrl,\n  useDataSourceMeta,\n  useDataSourceRights,\n  useDataSourceSettings,\n  useDeleteLoadedDataSource,\n  useInitDataSourceSettings,\n  useTestDataSource,\n  useUpdateDatasource,\n} from '../state';\nimport { DataSourceRights } from '../types';\n\nimport { BasicSettings } from './BasicSettings';\nimport { ButtonRow } from './ButtonRow';\nimport { CloudInfoBox } from './CloudInfoBox';\nimport { DataSourceLoadError } from './DataSourceLoadError';\nimport { DataSourceMissingRightsMessage } from './DataSourceMissingRightsMessage';\nimport { DataSourcePluginConfigPage } from './DataSourcePluginConfigPage';\nimport { DataSourcePluginSettings } from './DataSourcePluginSettings';\nimport { DataSourcePluginState } from './DataSourcePluginState';\nimport { DataSourceReadOnlyMessage } from './DataSourceReadOnlyMessage';\nimport { DataSourceTestingStatus } from './DataSourceTestingStatus';\n\nexport type Props = {\n  // The ID of the data source\n  uid: string;\n  // The ID of the custom datasource setting page\n  pageId?: string | null;\n};\n\nexport function EditDataSource({ uid, pageId }: Props) {\n  useInitDataSourceSettings(uid);\n\n  const dispatch = useDispatch();\n  const dataSource = useDataSource(uid);\n  const dataSourceMeta = useDataSourceMeta(dataSource.type);\n  const dataSourceSettings = useDataSourceSettings();\n  const dataSourceRights = useDataSourceRights(uid);\n  const exploreUrl = useDataSourceExploreUrl(uid);\n  const onDelete = useDeleteLoadedDataSource();\n  const onTest = useTestDataSource(uid);\n  const onUpdate = useUpdateDatasource();\n  const onDefaultChange = (value: boolean) => dispatch(setIsDefault(value));\n  const onNameChange = (name: string) => dispatch(setDataSourceName(name));\n  const onOptionsChange = (ds: DataSourceSettingsType) => dispatch(dataSourceLoaded(ds));\n\n  return (\n    <EditDataSourceView\n      pageId={pageId}\n      dataSource={dataSource}\n      dataSourceMeta={dataSourceMeta}\n      dataSourceSettings={dataSourceSettings}\n      dataSourceRights={dataSourceRights}\n      exploreUrl={exploreUrl}\n      onDelete={onDelete}\n      onDefaultChange={onDefaultChange}\n      onNameChange={onNameChange}\n      onOptionsChange={onOptionsChange}\n      onTest={onTest}\n      onUpdate={onUpdate}\n    />\n  );\n}\n\nexport type ViewProps = {\n  pageId?: string | null;\n  dataSource: DataSourceSettingsType;\n  dataSourceMeta: DataSourcePluginMeta;\n  dataSourceSettings: DataSourceSettingsState;\n  dataSourceRights: DataSourceRights;\n  exploreUrl: string;\n  onDelete: () => void;\n  onDefaultChange: (isDefault: boolean) => AnyAction;\n  onNameChange: (name: string) => AnyAction;\n  onOptionsChange: (dataSource: DataSourceSettingsType) => AnyAction;\n  onTest: () => void;\n  onUpdate: (dataSource: DataSourceSettingsType) => Promise<DataSourceSettingsType>;\n};\n\nexport function EditDataSourceView({\n  pageId,\n  dataSource,\n  dataSourceMeta,\n  dataSourceSettings,\n  dataSourceRights,\n  exploreUrl,\n  onDelete,\n  onDefaultChange,\n  onNameChange,\n  onOptionsChange,\n  onTest,\n  onUpdate,\n}: ViewProps) {\n  const { plugin, loadError, testingStatus, loading } = dataSourceSettings;\n  const { readOnly, hasWriteRights, hasDeleteRights } = dataSourceRights;\n  const hasDataSource = dataSource.id > 0;\n\n  const dsi = getDataSourceSrv()?.getInstanceSettings(dataSource.uid);\n\n  const hasAlertingEnabled = Boolean(dsi?.meta?.alerting ?? false);\n  const isAlertManagerDatasource = dsi?.type === 'alertmanager';\n  const alertingSupported = hasAlertingEnabled || isAlertManagerDatasource;\n\n  const onSubmit = async (e: React.MouseEvent<HTMLButtonElement> | React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    await onUpdate({ ...dataSource });\n\n    onTest();\n  };\n\n  if (loadError) {\n    return <DataSourceLoadError dataSourceRights={dataSourceRights} onDelete={onDelete} />;\n  }\n\n  if (loading) {\n    return <PageLoader />;\n  }\n\n  // TODO - is this needed?\n  if (!hasDataSource || !dsi) {\n    return null;\n  }\n\n  if (pageId) {\n    return (\n      <DataSourcePluginContextProvider instanceSettings={dsi}>\n        <DataSourcePluginConfigPage pageId={pageId} plugin={plugin} />\n      </DataSourcePluginContextProvider>\n    );\n  }\n\n  return (\n    <form onSubmit={onSubmit}>\n      {!hasWriteRights && <DataSourceMissingRightsMessage />}\n      {readOnly && <DataSourceReadOnlyMessage />}\n      {dataSourceMeta.state && <DataSourcePluginState state={dataSourceMeta.state} />}\n\n      <CloudInfoBox dataSource={dataSource} />\n\n      <BasicSettings\n        dataSourceName={dataSource.name}\n        isDefault={dataSource.isDefault}\n        onDefaultChange={onDefaultChange}\n        onNameChange={onNameChange}\n        alertingSupported={alertingSupported}\n        disabled={readOnly || !hasWriteRights}\n      />\n\n      {plugin && (\n        <DataSourcePluginContextProvider instanceSettings={dsi}>\n          <DataSourcePluginSettings\n            plugin={plugin}\n            dataSource={dataSource}\n            dataSourceMeta={dataSourceMeta}\n            onModelChange={onOptionsChange}\n          />\n        </DataSourcePluginContextProvider>\n      )}\n\n      <DataSourceTestingStatus testingStatus={testingStatus} />\n\n      <ButtonRow\n        onSubmit={onSubmit}\n        onDelete={onDelete}\n        onTest={onTest}\n        exploreUrl={exploreUrl}\n        canSave={!readOnly && hasWriteRights}\n        canDelete={!readOnly && hasDeleteRights}\n      />\n    </form>\n  );\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2, PluginErrorCode, PluginSignatureStatus } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { HorizontalGroup, InfoBox, List, PluginSignatureBadge, useStyles2 } from '@grafana/ui';\n\nimport { useGetErrors, useFetchStatus } from '../admin/state/hooks';\n\nexport function PluginsErrorsInfo() {\n  const errors = useGetErrors();\n  const { isLoading } = useFetchStatus();\n  const styles = useStyles2(getStyles);\n\n  if (isLoading || errors.length === 0) {\n    return null;\n  }\n\n  return (\n    <InfoBox\n      aria-label={selectors.pages.PluginsList.signatureErrorNotice}\n      severity=\"warning\"\n      urlTitle=\"Read more about plugin signing\"\n      url=\"https://grafana.com/docs/grafana/latest/plugins/plugin-signatures/\"\n    >\n      <div>\n        <p>\n          Unsigned plugins were found during plugin initialization. Grafana Labs cannot guarantee the integrity of these\n          plugins. We recommend only using signed plugins.\n        </p>\n        The following plugins are disabled and not shown in the list below:\n        <List\n          items={errors}\n          className={styles.list}\n          renderItem={(error) => (\n            <div className={styles.wrapper}>\n              <HorizontalGroup spacing=\"sm\" justify=\"flex-start\" align=\"center\">\n                <strong>{error.pluginId}</strong>\n                <PluginSignatureBadge\n                  status={mapPluginErrorCodeToSignatureStatus(error.errorCode)}\n                  className={styles.badge}\n                />\n              </HorizontalGroup>\n            </div>\n          )}\n        />\n      </div>\n    </InfoBox>\n  );\n}\n\nfunction mapPluginErrorCodeToSignatureStatus(code: PluginErrorCode) {\n  switch (code) {\n    case PluginErrorCode.invalidSignature:\n      return PluginSignatureStatus.invalid;\n    case PluginErrorCode.missingSignature:\n      return PluginSignatureStatus.missing;\n    case PluginErrorCode.modifiedSignature:\n      return PluginSignatureStatus.modified;\n    default:\n      return PluginSignatureStatus.missing;\n  }\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    list: css({\n      listStyleType: 'circle',\n    }),\n    wrapper: css({\n      marginTop: theme.spacing(1),\n    }),\n    badge: css({\n      marginTop: 0,\n    }),\n  };\n}\n","import { css, cx } from '@emotion/css';\nimport React from 'react';\n\nimport { DataSourcePluginMeta, GrafanaTheme2 } from '@grafana/data';\nimport { selectors as e2eSelectors } from '@grafana/e2e-selectors';\nimport { Card, LinkButton, PluginSignatureBadge, useStyles2 } from '@grafana/ui';\n\nexport type Props = {\n  dataSourcePlugin: DataSourcePluginMeta;\n  onClick: () => void;\n};\n\nexport function DataSourceTypeCard({ onClick, dataSourcePlugin }: Props) {\n  const isPhantom = dataSourcePlugin.module === 'phantom';\n  const isClickable = !isPhantom && !dataSourcePlugin.unlicensed;\n  const learnMoreLink = dataSourcePlugin.info?.links?.length > 0 ? dataSourcePlugin.info.links[0] : null;\n  const learnMoreLinkTarget = learnMoreLink?.target ?? '_blank';\n\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Card className={cx(styles.card, 'card-parent')} onClick={isClickable ? onClick : () => {}}>\n      {/* Name */}\n      <Card.Heading\n        className={styles.heading}\n        aria-label={e2eSelectors.pages.AddDataSource.dataSourcePluginsV2(dataSourcePlugin.name)}\n      >\n        {dataSourcePlugin.name}\n      </Card.Heading>\n\n      {/* Logo */}\n      <Card.Figure align=\"center\" className={styles.figure}>\n        <img className={styles.logo} src={dataSourcePlugin.info.logos.small} alt=\"\" />\n      </Card.Figure>\n\n      <Card.Description className={styles.description}>{dataSourcePlugin.info.description}</Card.Description>\n\n      {/* Signature */}\n      {!isPhantom && (\n        <Card.Meta className={styles.meta}>\n          <PluginSignatureBadge status={dataSourcePlugin.signature} />\n        </Card.Meta>\n      )}\n\n      {/* Learn more */}\n      <Card.Actions className={styles.actions}>\n        {learnMoreLink && (\n          <LinkButton\n            aria-label={`${dataSourcePlugin.name}, learn more.`}\n            href={`${learnMoreLink.url}?utm_source=grafana_add_ds`}\n            onClick={(e) => e.stopPropagation()}\n            rel=\"noopener\"\n            target={learnMoreLinkTarget}\n            variant=\"secondary\"\n          >\n            {learnMoreLink.name}\n          </LinkButton>\n        )}\n      </Card.Actions>\n    </Card>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    heading: css({\n      fontSize: theme.v1.typography.heading.h5,\n      fontWeight: 'inherit',\n    }),\n    figure: css({\n      width: 'inherit',\n      marginRight: '0px',\n      '> img': {\n        width: theme.spacing(7),\n      },\n    }),\n    meta: css({\n      marginTop: '6px',\n      position: 'relative',\n    }),\n    description: css({\n      margin: '0px',\n      fontSize: theme.typography.size.sm,\n    }),\n    actions: css({\n      position: 'relative',\n      alignSelf: 'center',\n      marginTop: '0px',\n      opacity: 0,\n\n      '.card-parent:hover &, .card-parent:focus-within &': {\n        opacity: 1,\n      },\n    }),\n    card: css({\n      gridTemplateAreas: `\n        \"Figure   Heading   Actions\"\n        \"Figure Description Actions\"\n        \"Figure    Meta     Actions\"\n        \"Figure     -       Actions\"`,\n    }),\n    logo: css({\n      marginRight: theme.v1.spacing.lg,\n      marginLeft: theme.v1.spacing.sm,\n      width: theme.spacing(7),\n      maxHeight: theme.spacing(7),\n    }),\n  };\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { DataSourcePluginMeta } from '@grafana/data';\nimport { List } from '@grafana/ui';\n\nimport { DataSourceTypeCard } from './DataSourceTypeCard';\n\nexport type Props = {\n  // The list of data-source plugins to display\n  dataSourcePlugins: DataSourcePluginMeta[];\n  // Called when a data-source plugin is clicked on in the list\n  onClickDataSourceType: (dataSource: DataSourcePluginMeta) => void;\n};\n\nexport function DataSourceTypeCardList({ dataSourcePlugins, onClickDataSourceType }: Props) {\n  if (!dataSourcePlugins || !dataSourcePlugins.length) {\n    return null;\n  }\n\n  return (\n    <List\n      items={dataSourcePlugins}\n      getItemKey={(item) => item.id.toString()}\n      renderItem={(item) => <DataSourceTypeCard dataSourcePlugin={item} onClick={() => onClickDataSourceType(item)} />}\n      className={css`\n        > li {\n          margin-bottom: 2px;\n        }\n      `}\n    />\n  );\n}\n","import React from 'react';\n\nimport { DataSourcePluginMeta } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { LinkButton } from '@grafana/ui';\nimport { DataSourcePluginCategory } from 'app/types';\n\nimport { ROUTES } from '../../connections/constants';\n\nimport { DataSourceTypeCardList } from './DataSourceTypeCardList';\n\nexport type Props = {\n  // The list of data-source plugin categories to display\n  categories: DataSourcePluginCategory[];\n\n  // Called when a data-source plugin is clicked on in the list\n  onClickDataSourceType: (dataSource: DataSourcePluginMeta) => void;\n};\n\nexport function DataSourceCategories({ categories, onClickDataSourceType }: Props) {\n  const moreDataSourcesLink = config.featureToggles.dataConnectionsConsole\n    ? `${ROUTES.ConnectData}?cat=data-source`\n    : '/plugins?filterBy=all&filterByType=datasource&utm_source=grafana_add_ds';\n\n  return (\n    <>\n      {/* Categories */}\n      {categories.map(({ id, title, plugins }) => (\n        <div className=\"add-data-source-category\" key={id}>\n          <div className=\"add-data-source-category__header\" id={id}>\n            {title}\n          </div>\n          <DataSourceTypeCardList dataSourcePlugins={plugins} onClickDataSourceType={onClickDataSourceType} />\n        </div>\n      ))}\n\n      {/* Find more */}\n      <div className=\"add-data-source-more\">\n        <LinkButton variant=\"secondary\" href={moreDataSourcesLink} target=\"_self\" rel=\"noopener\">\n          Find more data source plugins\n        </LinkButton>\n      </div>\n    </>\n  );\n}\n","import React from 'react';\nimport { AnyAction } from 'redux';\n\nimport { DataSourcePluginMeta } from '@grafana/data';\nimport { LinkButton, FilterInput } from '@grafana/ui';\nimport PageLoader from 'app/core/components/PageLoader/PageLoader';\nimport { PluginsErrorsInfo } from 'app/features/plugins/components/PluginsErrorsInfo';\nimport { DataSourcePluginCategory, StoreState, useDispatch, useSelector } from 'app/types';\n\nimport { DataSourceCategories } from '../components/DataSourceCategories';\nimport { DataSourceTypeCardList } from '../components/DataSourceTypeCardList';\nimport {\n  useAddDatasource,\n  useLoadDataSourcePlugins,\n  getFilteredDataSourcePlugins,\n  setDataSourceTypeSearchQuery,\n  useDataSourcesRoutes,\n} from '../state';\n\nexport function NewDataSource() {\n  useLoadDataSourcePlugins();\n\n  const dispatch = useDispatch();\n  const filteredDataSources = useSelector((s: StoreState) => getFilteredDataSourcePlugins(s.dataSources));\n  const searchQuery = useSelector((s: StoreState) => s.dataSources.dataSourceTypeSearchQuery);\n  const isLoadingDatasourcePlugins = useSelector((s: StoreState) => s.dataSources.isLoadingDataSourcePlugins);\n  const dataSourceCategories = useSelector((s: StoreState) => s.dataSources.categories);\n  const onAddDataSource = useAddDatasource();\n  const onSetSearchQuery = (q: string) => dispatch(setDataSourceTypeSearchQuery(q));\n\n  return (\n    <NewDataSourceView\n      dataSources={filteredDataSources}\n      dataSourceCategories={dataSourceCategories}\n      searchQuery={searchQuery}\n      isLoading={isLoadingDatasourcePlugins}\n      onAddDataSource={onAddDataSource}\n      onSetSearchQuery={onSetSearchQuery}\n    />\n  );\n}\n\nexport type ViewProps = {\n  dataSources: DataSourcePluginMeta[];\n  dataSourceCategories: DataSourcePluginCategory[];\n  searchQuery: string;\n  isLoading: boolean;\n  onAddDataSource: (dataSource: DataSourcePluginMeta) => void;\n  onSetSearchQuery: (q: string) => AnyAction;\n};\n\nexport function NewDataSourceView({\n  dataSources,\n  dataSourceCategories,\n  searchQuery,\n  isLoading,\n  onAddDataSource,\n  onSetSearchQuery,\n}: ViewProps) {\n  const dataSourcesRoutes = useDataSourcesRoutes();\n\n  if (isLoading) {\n    return <PageLoader />;\n  }\n\n  return (\n    <>\n      {/* Search */}\n      <div className=\"page-action-bar\">\n        <FilterInput value={searchQuery} onChange={onSetSearchQuery} placeholder=\"Filter by name or type\" />\n        <div className=\"page-action-bar__spacer\" />\n        <LinkButton href={dataSourcesRoutes.List} fill=\"outline\" variant=\"secondary\" icon=\"arrow-left\">\n          Cancel\n        </LinkButton>\n      </div>\n\n      {/* Show any plugin errors while not searching for anything specific */}\n      {!searchQuery && <PluginsErrorsInfo />}\n\n      {/* Search results */}\n      <div>\n        {searchQuery && (\n          <DataSourceTypeCardList dataSourcePlugins={dataSources} onClickDataSourceType={onAddDataSource} />\n        )}\n        {!searchQuery && (\n          <DataSourceCategories categories={dataSourceCategories} onClickDataSourceType={onAddDataSource} />\n        )}\n      </div>\n    </>\n  );\n}\n","import React from 'react';\n\nimport { PluginState } from '@grafana/data';\nimport { Badge, BadgeProps } from '@grafana/ui';\n\ninterface Props {\n  state?: PluginState;\n}\n\nexport const PluginStateInfo = (props: Props) => {\n  const display = getFeatureStateInfo(props.state);\n\n  if (!display) {\n    return null;\n  }\n\n  return <Badge color={display.color} title={display.tooltip} text={display.text} icon={display.icon} />;\n};\n\nfunction getFeatureStateInfo(state?: PluginState): BadgeProps | null {\n  switch (state) {\n    case PluginState.deprecated:\n      return {\n        text: 'Deprecated',\n        color: 'red',\n        tooltip: `This feature is deprecated and will be removed in a future release`,\n      };\n    case PluginState.alpha:\n      return {\n        text: 'Alpha',\n        color: 'blue',\n        tooltip: `This feature is experimental and future updates might not be backward compatible`,\n      };\n    case PluginState.beta:\n      return {\n        text: 'Beta',\n        color: 'blue',\n        tooltip: `This feature is close to complete but not fully tested`,\n      };\n    default:\n      return null;\n  }\n}\n"],"names":["GrafanaEdition","PageActionBar","searchQuery","linkButton","setSearchQuery","target","placeholder","sortPicker","linkProps","getStyles","theme","CardGrid","items","onClickItem","styles","item","Card","e","CategoryHeader","iconName","label","Icon","NoAccessModal","isOpen","onDismiss","Modal","NoAccessModalHeader","Button","NoResults","Search","onChange","Input","ConnectData","searchTerm","setSearchTerm","isNoAccessModalOpen","setIsNoAccessModalOpen","focusedItem","setFocusedItem","canCreateDataSources","handleSearchChange","isLoading","error","plugins","cardGridItems","plugin","onClickCardGridItem","openModal","closeModal","showNoResults","LoadingPlaceholder","ConnectDataPage","Page","DataSourceDetailsPage","overrideNavId","id","navIndex","state","navId","PluginDetailsPage","NotFoundDatasource","Alert","Badge","DataSourcesListPage","dataSourcesCount","dataSources","actions","config","DataSourceAddButton","DataSourcesList","useDataSourceSettingsNav","pageId","uid","location","datasource","datasourcePlugin","params","nav","navModelItem","DataSourceDashboardsPage","pageNav","DataSourceDashboards","EditDataSourcePage","EditDataSource","NewDataSourcePage","NewDataSource","Connections","isConnectDataPageOverriden","YourConnectionsPage","NavLandingPage","canCreateDataSource","dataSourcesRoutes","dispatch","dataSource","s","dashboards","onImportDashboard","dashboard","overwrite","onRemoveDashboard","DataSourceDashboardsView","ascendingSortValue","descendingSortValue","sortOptions","DataSourcesListHeader","q","setSort","sort","isSortAscending","hasCreateRights","hasWriteRights","hasExploreRights","DataSourcesListView","PageLoader","EmptyListCTA","dsLink","Tag","BasicSettings","dataSourceName","isDefault","onDefaultChange","onNameChange","alertingSupported","disabled","AlertingEnabled","InlineField","event","selectors","enabled","ButtonRow","canSave","canDelete","onDelete","onSubmit","onTest","exploreUrl","canExploreDataSources","LOCAL_STORAGE_KEY","CloudInfoBox","mainDS","extraDS","LocalStorageValueProvider","isDismissed","readOnlyMessage","DataSourceReadOnlyMessage","DataSourceLoadError","dataSourceRights","readOnly","hasDeleteRights","navigateBack","missingRightsMessage","DataSourceMissingRightsMessage","DataSourcePluginConfigPage","page","DataSourcePluginSettings","props","loader","template","prevProps","element","DataSourcePluginState","PluginStateInfo","DataSourceTestingStatus","testingStatus","isError","message","detailsMessage","detailsVerboseMessage","dataSourceMeta","dataSourceSettings","onUpdate","value","name","onOptionsChange","ds","EditDataSourceView","loadError","loading","hasDataSource","dsi","hasAlertingEnabled","isAlertManagerDatasource","DataSourcePluginContextProvider","PluginsErrorsInfo","errors","InfoBox","List","PluginSignatureBadge","mapPluginErrorCodeToSignatureStatus","code","DataSourceTypeCard","onClick","dataSourcePlugin","isPhantom","isClickable","learnMoreLink","learnMoreLinkTarget","DataSourceTypeCardList","dataSourcePlugins","onClickDataSourceType","DataSourceCategories","categories","moreDataSourcesLink","title","filteredDataSources","isLoadingDatasourcePlugins","dataSourceCategories","onAddDataSource","onSetSearchQuery","NewDataSourceView","FilterInput","display","getFeatureStateInfo"],"sourceRoot":""}