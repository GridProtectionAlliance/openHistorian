{"version":3,"sources":["webpack:///./public/app/features/datasources/DataSourceDashboards.tsx","webpack:///./public/app/core/selectors/location.ts","webpack:///./public/app/features/datasources/state/selectors.ts","webpack:///./public/app/features/datasources/DashboardsTable.tsx"],"names":["DataSourceDashboards","_super","_this","apply","this","arguments","onImport","dashboard","overwrite","_a","props","dataSource","importDashboard","data","pluginId","path","inputs","push","name","type","value","title","onRemove","removeDashboard","importedUri","tslib__WEBPACK_IMPORTED_MODULE_0__","prototype","componentDidMount","loadDataSource","pageId","_b","sent","loadPluginDashboards","render","dashboards","navModel","isLoading","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","app_core_components_Page_Page__WEBPACK_IMPORTED_MODULE_4__","Contents","_DashboardsTable__WEBPACK_IMPORTED_MODULE_5__","react__WEBPACK_IMPORTED_MODULE_1__","mapDispatchToProps","_dashboard_state_actions__WEBPACK_IMPORTED_MODULE_10__","_state_actions__WEBPACK_IMPORTED_MODULE_8__","_plugins_state_actions__WEBPACK_IMPORTED_MODULE_9__","__webpack_exports__","Object","react_hot_loader__WEBPACK_IMPORTED_MODULE_2__","module","react_redux__WEBPACK_IMPORTED_MODULE_3__","state","app_core_selectors_location__WEBPACK_IMPORTED_MODULE_7__","location","app_core_selectors_navModel__WEBPACK_IMPORTED_MODULE_6__","navIndex","plugins","_state_selectors__WEBPACK_IMPORTED_MODULE_11__","dataSources","isLoadingPluginDashboards","__webpack_require__","d","getRouteParamsId","getRouteParamsPage","routeParams","id","page","getDataSources","getDataSourceTypes","getDataSource","getDataSourceMeta","getDataSourcesSearchQuery","getDataSourcesLayoutMode","getDataSourcesCount","regex","RegExp","searchQuery","filter","test","database","dataSourceTypeSearchQuery","dataSourceTypes","dataSourceId","parseInt","dataSourceMeta","layoutMode","dataSourcesCount","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","className","map","index","key","dashboardId","imported","href","importedUrl","style","textAlign","onClick","revision","importedRevision","buttonText"],"mappings":"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","file":"DataSourceDashboards.3932bda029d2299a9d96.js","sourcesContent":["// Libraries\nimport React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\n\n// Components\nimport Page from 'app/core/components/Page/Page';\nimport DashboardTable from './DashboardsTable';\n\n// Actions & Selectors\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { getRouteParamsId } from 'app/core/selectors/location';\nimport { loadDataSource } from './state/actions';\nimport { loadPluginDashboards } from '../plugins/state/actions';\nimport { importDashboard, removeDashboard } from '../dashboard/state/actions';\nimport { getDataSource } from './state/selectors';\n\n// Types\nimport { PluginDashboard, StoreState } from 'app/types';\nimport { DataSourceSettings } from '@grafana/ui';\nimport { NavModel } from '@grafana/data';\n\nexport interface Props {\n  navModel: NavModel;\n  dashboards: PluginDashboard[];\n  dataSource: DataSourceSettings;\n  pageId: number;\n  importDashboard: typeof importDashboard;\n  loadDataSource: typeof loadDataSource;\n  loadPluginDashboards: typeof loadPluginDashboards;\n  removeDashboard: typeof removeDashboard;\n  isLoading: boolean;\n}\n\nexport class DataSourceDashboards extends PureComponent<Props> {\n  async componentDidMount() {\n    const { loadDataSource, pageId } = this.props;\n\n    await loadDataSource(pageId);\n    this.props.loadPluginDashboards();\n  }\n\n  onImport = (dashboard: PluginDashboard, overwrite: boolean) => {\n    const { dataSource, importDashboard } = this.props;\n    const data: any = {\n      pluginId: dashboard.pluginId,\n      path: dashboard.path,\n      overwrite,\n      inputs: [],\n    };\n\n    if (dataSource) {\n      data.inputs.push({\n        name: '*',\n        type: 'datasource',\n        pluginId: dataSource.type,\n        value: dataSource.name,\n      });\n    }\n\n    importDashboard(data, dashboard.title);\n  };\n\n  onRemove = (dashboard: PluginDashboard) => {\n    this.props.removeDashboard(dashboard.importedUri);\n  };\n\n  render() {\n    const { dashboards, navModel, isLoading } = this.props;\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={isLoading}>\n          <DashboardTable\n            dashboards={dashboards}\n            onImport={(dashboard, overwrite) => this.onImport(dashboard, overwrite)}\n            onRemove={dashboard => this.onRemove(dashboard)}\n          />\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState) {\n  const pageId = getRouteParamsId(state.location);\n  return {\n    navModel: getNavModel(state.navIndex, `datasource-dashboards-${pageId}`),\n    pageId: pageId,\n    dashboards: state.plugins.dashboards,\n    dataSource: getDataSource(state.dataSources, pageId),\n    isLoading: state.plugins.isLoadingPluginDashboards,\n  };\n}\n\nconst mapDispatchToProps = {\n  importDashboard,\n  loadDataSource,\n  loadPluginDashboards,\n  removeDashboard,\n};\n\nexport default hot(module)(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(DataSourceDashboards)\n);\n","import { LocationState } from 'app/types';\n\nexport const getRouteParamsId = (state: LocationState) => state.routeParams.id;\nexport const getRouteParamsPage = (state: LocationState) => state.routeParams.page;\n","import { DataSourceSettings, DataSourcePluginMeta } from '@grafana/ui';\nimport { DataSourcesState } from '../../../types/datasources';\nimport { UrlQueryValue } from '@grafana/runtime';\n\nexport const getDataSources = (state: DataSourcesState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  return state.dataSources.filter((dataSource: DataSourceSettings) => {\n    return regex.test(dataSource.name) || regex.test(dataSource.database);\n  });\n};\n\nexport const getDataSourceTypes = (state: DataSourcesState) => {\n  const regex = new RegExp(state.dataSourceTypeSearchQuery, 'i');\n\n  return state.dataSourceTypes.filter((type: DataSourcePluginMeta) => {\n    return regex.test(type.name);\n  });\n};\n\nexport const getDataSource = (state: DataSourcesState, dataSourceId: UrlQueryValue): DataSourceSettings | null => {\n  if (state.dataSource.id === parseInt(dataSourceId as string, 10)) {\n    return state.dataSource;\n  }\n  return {} as DataSourceSettings;\n};\n\nexport const getDataSourceMeta = (state: DataSourcesState, type: string): DataSourcePluginMeta => {\n  if (state.dataSourceMeta.id === type) {\n    return state.dataSourceMeta;\n  }\n\n  return {} as DataSourcePluginMeta;\n};\n\nexport const getDataSourcesSearchQuery = (state: DataSourcesState) => state.searchQuery;\nexport const getDataSourcesLayoutMode = (state: DataSourcesState) => state.layoutMode;\nexport const getDataSourcesCount = (state: DataSourcesState) => state.dataSourcesCount;\n","import React, { FC } from 'react';\nimport { PluginDashboard } from '../../types';\n\nexport interface Props {\n  dashboards: PluginDashboard[];\n  onImport: (dashboard: PluginDashboard, overwrite: boolean) => void;\n  onRemove: (dashboard: PluginDashboard) => void;\n}\n\nconst DashboardsTable: FC<Props> = ({ dashboards, onImport, onRemove }) => {\n  function buttonText(dashboard: PluginDashboard) {\n    return dashboard.revision !== dashboard.importedRevision ? 'Update' : 'Re-import';\n  }\n\n  return (\n    <table className=\"filter-table\">\n      <tbody>\n        {dashboards.map((dashboard, index) => {\n          return (\n            <tr key={`${dashboard.dashboardId}-${index}`}>\n              <td className=\"width-1\">\n                <i className=\"gicon gicon-dashboard\" />\n              </td>\n              <td>\n                {dashboard.imported ? (\n                  <a href={dashboard.importedUrl}>{dashboard.title}</a>\n                ) : (\n                  <span>{dashboard.title}</span>\n                )}\n              </td>\n              <td style={{ textAlign: 'right' }}>\n                {!dashboard.imported ? (\n                  <button className=\"btn btn-secondary btn-small\" onClick={() => onImport(dashboard, false)}>\n                    Import\n                  </button>\n                ) : (\n                  <button className=\"btn btn-secondary btn-small\" onClick={() => onImport(dashboard, true)}>\n                    {buttonText(dashboard)}\n                  </button>\n                )}\n                {dashboard.imported && (\n                  <button className=\"btn btn-danger btn-small\" onClick={() => onRemove(dashboard)}>\n                    <i className=\"fa fa-trash\" />\n                  </button>\n                )}\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nexport default DashboardsTable;\n"],"sourceRoot":""}