{"version":3,"sources":["webpack:///./public/app/features/org/OrgProfile.tsx","webpack:///./public/app/features/org/OrgDetailsPage.tsx","webpack:///./public/app/core/components/SharedPreferences/SharedPreferences.tsx","webpack:///./public/app/features/org/state/actions.ts"],"names":["OrgProfile","onSubmit","orgName","defaultValues","register","label","name","type","ref","required","OrgDetailsPage","onUpdateOrganization","props","setOrganizationName","updateOrganization","this","loadOrganization","navModel","organization","isLoading","Object","keys","length","Contents","resourceUri","PureComponent","mapDispatchToProps","hot","module","connect","state","getNavModel","navIndex","themes","value","SharedPreferences","backendSrv","onSubmitForm","homeDashboardId","theme","timezone","put","window","location","reload","onThemeChanged","setState","onTimeZoneChanged","onHomeDashboardChanged","dashboardId","getFullDashName","dashboard","folderTitle","title","dashboards","get","prefs","search","starred","defaultDashboardHit","id","tags","uid","uri","url","folderId","folderUid","folderUrl","isStarred","slug","items","find","d","dashboardIds","missing","push","styles","getStyles","options","item","onChange","className","labelText","content","getOptionValue","i","getOptionLabel","placeholder","aria-label","selectors","components","TimeZonePicker","container","includeInternal","variant","stylesFactory","css","dependencies","getBackendSrv","dispatch","organizationResponse","organizationLoaded","getStore","updateConfigurationSubtitle"],"mappings":"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","file":"OrgDetailsPage.591ee81e63053ad31983.js","sourcesContent":["import React, { FC } from 'react';\nimport { Input, Field, FieldSet, Button, Form } from '@grafana/ui';\n\nexport interface Props {\n  orgName: string;\n  onSubmit: (orgName: string) => void;\n}\n\ninterface FormDTO {\n  orgName: string;\n}\n\nconst OrgProfile: FC<Props> = ({ onSubmit, orgName }) => {\n  return (\n    <Form defaultValues={{ orgName }} onSubmit={({ orgName }: FormDTO) => onSubmit(orgName)}>\n      {({ register }) => (\n        <FieldSet label=\"Organization profile\">\n          <Field label=\"Organization name\">\n            <Input name=\"orgName\" type=\"text\" ref={register({ required: true })} />\n          </Field>\n\n          <Button type=\"submit\">Update organization name</Button>\n        </FieldSet>\n      )}\n    </Form>\n  );\n};\n\nexport default OrgProfile;\n","import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport { NavModel } from '@grafana/data';\n\nimport Page from 'app/core/components/Page/Page';\nimport OrgProfile from './OrgProfile';\nimport SharedPreferences from 'app/core/components/SharedPreferences/SharedPreferences';\nimport { loadOrganization, updateOrganization } from './state/actions';\nimport { Organization, StoreState } from 'app/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { setOrganizationName } from './state/reducers';\nimport { VerticalGroup } from '@grafana/ui';\n\nexport interface Props {\n  navModel: NavModel;\n  organization: Organization;\n  loadOrganization: typeof loadOrganization;\n  setOrganizationName: typeof setOrganizationName;\n  updateOrganization: typeof updateOrganization;\n}\n\nexport class OrgDetailsPage extends PureComponent<Props> {\n  async componentDidMount() {\n    await this.props.loadOrganization();\n  }\n\n  onUpdateOrganization = (orgName: string) => {\n    this.props.setOrganizationName(orgName);\n    this.props.updateOrganization();\n  };\n\n  render() {\n    const { navModel, organization } = this.props;\n    const isLoading = Object.keys(organization).length === 0;\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={isLoading}>\n          {!isLoading && (\n            <VerticalGroup>\n              <OrgProfile onSubmit={this.onUpdateOrganization} orgName={organization.name} />\n              <SharedPreferences resourceUri=\"org\" />\n            </VerticalGroup>\n          )}\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, 'org-settings'),\n    organization: state.organization.organization,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadOrganization,\n  setOrganizationName,\n  updateOrganization,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(OrgDetailsPage));\n","import React, { PureComponent } from 'react';\nimport { css } from 'emotion';\n\nimport {\n  Select,\n  Field,\n  Form,\n  Tooltip,\n  Icon,\n  stylesFactory,\n  Label,\n  Button,\n  RadioButtonGroup,\n  FieldSet,\n  TimeZonePicker,\n} from '@grafana/ui';\nimport { SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport { DashboardSearchHit, DashboardSearchItemType } from 'app/features/search/types';\nimport { backendSrv } from 'app/core/services/backend_srv';\n\nexport interface Props {\n  resourceUri: string;\n}\n\nexport interface State {\n  homeDashboardId: number;\n  theme: string;\n  timezone: string;\n  dashboards: DashboardSearchHit[];\n}\n\nconst themes: SelectableValue[] = [\n  { value: '', label: 'Default' },\n  { value: 'dark', label: 'Dark' },\n  { value: 'light', label: 'Light' },\n];\n\nexport class SharedPreferences extends PureComponent<Props, State> {\n  backendSrv = backendSrv;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      homeDashboardId: 0,\n      theme: '',\n      timezone: '',\n      dashboards: [],\n    };\n  }\n\n  async componentDidMount() {\n    const prefs = await backendSrv.get(`/api/${this.props.resourceUri}/preferences`);\n    const dashboards = await backendSrv.search({ starred: true });\n    const defaultDashboardHit: DashboardSearchHit = {\n      id: 0,\n      title: 'Default',\n      tags: [],\n      type: '' as DashboardSearchItemType,\n      uid: '',\n      uri: '',\n      url: '',\n      folderId: 0,\n      folderTitle: '',\n      folderUid: '',\n      folderUrl: '',\n      isStarred: false,\n      slug: '',\n      items: [],\n    };\n\n    if (prefs.homeDashboardId > 0 && !dashboards.find(d => d.id === prefs.homeDashboardId)) {\n      const missing = await backendSrv.search({ dashboardIds: [prefs.homeDashboardId] });\n      if (missing && missing.length > 0) {\n        dashboards.push(missing[0]);\n      }\n    }\n\n    this.setState({\n      homeDashboardId: prefs.homeDashboardId,\n      theme: prefs.theme,\n      timezone: prefs.timezone,\n      dashboards: [defaultDashboardHit, ...dashboards],\n    });\n  }\n\n  onSubmitForm = async () => {\n    const { homeDashboardId, theme, timezone } = this.state;\n\n    await backendSrv.put(`/api/${this.props.resourceUri}/preferences`, {\n      homeDashboardId,\n      theme,\n      timezone,\n    });\n    window.location.reload();\n  };\n\n  onThemeChanged = (value: string) => {\n    this.setState({ theme: value });\n  };\n\n  onTimeZoneChanged = (timezone: string) => {\n    if (!timezone) {\n      return;\n    }\n    this.setState({ timezone: timezone });\n  };\n\n  onHomeDashboardChanged = (dashboardId: number) => {\n    this.setState({ homeDashboardId: dashboardId });\n  };\n\n  getFullDashName = (dashboard: DashboardSearchHit) => {\n    if (typeof dashboard.folderTitle === 'undefined' || dashboard.folderTitle === '') {\n      return dashboard.title;\n    }\n    return dashboard.folderTitle + ' / ' + dashboard.title;\n  };\n\n  render() {\n    const { theme, timezone, homeDashboardId, dashboards } = this.state;\n    const styles = getStyles();\n\n    return (\n      <Form onSubmit={this.onSubmitForm}>\n        {() => {\n          return (\n            <FieldSet label=\"Preferences\">\n              <Field label=\"UI Theme\">\n                <RadioButtonGroup\n                  options={themes}\n                  value={themes.find(item => item.value === theme)?.value}\n                  onChange={this.onThemeChanged}\n                />\n              </Field>\n\n              <Field\n                label={\n                  <Label>\n                    <span className={styles.labelText}>Home Dashboard</span>\n                    <Tooltip content=\"Not finding dashboard you want? Star it first, then it should appear in this select box.\">\n                      <Icon name=\"info-circle\" />\n                    </Tooltip>\n                  </Label>\n                }\n              >\n                <Select\n                  value={dashboards.find(dashboard => dashboard.id === homeDashboardId)}\n                  getOptionValue={i => i.id}\n                  getOptionLabel={this.getFullDashName}\n                  onChange={(dashboard: DashboardSearchHit) => this.onHomeDashboardChanged(dashboard.id)}\n                  options={dashboards}\n                  placeholder=\"Choose default dashboard\"\n                />\n              </Field>\n\n              <Field label=\"Timezone\" aria-label={selectors.components.TimeZonePicker.container}>\n                <TimeZonePicker includeInternal={true} value={timezone} onChange={this.onTimeZoneChanged} />\n              </Field>\n              <div className=\"gf-form-button-row\">\n                <Button variant=\"primary\">Save</Button>\n              </div>\n            </FieldSet>\n          );\n        }}\n      </Form>\n    );\n  }\n}\n\nexport default SharedPreferences;\n\nconst getStyles = stylesFactory(() => {\n  return {\n    labelText: css`\n      margin-right: 6px;\n    `,\n  };\n});\n","import { ThunkResult } from 'app/types';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { organizationLoaded } from './reducers';\nimport { updateConfigurationSubtitle } from 'app/core/actions';\n\ntype OrganizationDependencies = { getBackendSrv: typeof getBackendSrv };\n\nexport function loadOrganization(\n  dependencies: OrganizationDependencies = { getBackendSrv: getBackendSrv }\n): ThunkResult<any> {\n  return async dispatch => {\n    const organizationResponse = await dependencies.getBackendSrv().get('/api/org');\n    dispatch(organizationLoaded(organizationResponse));\n\n    return organizationResponse;\n  };\n}\n\nexport function updateOrganization(\n  dependencies: OrganizationDependencies = { getBackendSrv: getBackendSrv }\n): ThunkResult<any> {\n  return async (dispatch, getStore) => {\n    const organization = getStore().organization.organization;\n\n    await dependencies.getBackendSrv().put('/api/org', { name: organization.name });\n\n    dispatch(updateConfigurationSubtitle(organization.name));\n    dispatch(loadOrganization(dependencies));\n  };\n}\n"],"sourceRoot":""}