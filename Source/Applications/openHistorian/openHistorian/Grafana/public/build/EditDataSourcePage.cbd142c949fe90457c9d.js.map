{"version":3,"file":"EditDataSourcePage.cbd142c949fe90457c9d.js","mappings":"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","sources":["webpack://grafana/./.yarn/__virtual__/@grafana-data-virtual-adf1e43f85/1/packages/grafana-data/src/types/config.ts","webpack://grafana/./public/app/features/datasources/components/BasicSettings.tsx","webpack://grafana/./public/app/features/datasources/components/ButtonRow.tsx","webpack://grafana/./public/app/features/datasources/components/CloudInfoBox.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceReadOnlyMessage.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceLoadError.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceMissingRightsMessage.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourcePluginConfigPage.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourcePluginSettings.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourcePluginState.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceTestingStatus.tsx","webpack://grafana/./public/app/features/datasources/components/EditDataSource.tsx","webpack://grafana/./public/app/features/datasources/pages/EditDataSourcePage.tsx","webpack://grafana/./public/app/features/datasources/state/contexts.ts","webpack://grafana/./public/app/features/datasources/state/hooks.ts","webpack://grafana/./public/app/features/plugins/components/PluginStateInfo.tsx"],"sourcesContent":["import { SystemDateFormatSettings } from '../datetime';\nimport { MapLayerOptions } from '../geo/layer';\nimport { GrafanaTheme2 } from '../themes';\n\nimport { DataSourceInstanceSettings } from './datasource';\nimport { FeatureToggles } from './featureToggles.gen';\nimport { PanelPluginMeta } from './panel';\n\nimport { GrafanaTheme, IconName, NavLinkDTO, OrgRole } from '.';\n\n/**\n * Describes the build information that will be available via the Grafana configuration.\n *\n * @public\n */\nexport interface BuildInfo {\n  version: string;\n  commit: string;\n  env: string;\n  edition: GrafanaEdition;\n  latestVersion: string;\n  hasUpdate: boolean;\n  hideVersion: boolean;\n}\n\n/**\n * @internal\n */\nexport enum GrafanaEdition {\n  OpenSource = 'Open Source',\n  Pro = 'Pro',\n  Enterprise = 'Enterprise',\n}\n\n/**\n * Describes the license information about the current running instance of Grafana.\n *\n * @public\n */\nexport interface LicenseInfo {\n  expiry: number;\n  licenseUrl: string;\n  stateInfo: string;\n  edition: GrafanaEdition;\n  enabledFeatures: { [key: string]: boolean };\n  trialExpiry?: number;\n}\n\n/**\n * Describes Sentry integration config\n *\n * @public\n */\nexport interface SentryConfig {\n  enabled: boolean;\n  dsn: string;\n  customEndpoint: string;\n  sampleRate: number;\n}\n\n/**\n * Describes GrafanaJavascriptAgentConfig integration config\n *\n * @public\n */\nexport interface GrafanaJavascriptAgentConfig {\n  enabled: boolean;\n  customEndpoint: string;\n  errorInstrumentalizationEnabled: boolean;\n  consoleInstrumentalizationEnabled: boolean;\n  webVitalsInstrumentalizationEnabled: boolean;\n  apiKey: string;\n}\n\nexport interface UnifiedAlertingConfig {\n  minInterval: string;\n}\n\n/** Supported OAuth services\n *\n * @public\n */\nexport type OAuth =\n  | 'github'\n  | 'gitlab'\n  | 'google'\n  | 'generic_oauth'\n  // | 'grafananet' Deprecated. Key always changed to \"grafana_com\"\n  | 'grafana_com'\n  | 'azuread'\n  | 'okta';\n\n/** Map of enabled OAuth services and their respective names\n *\n * @public\n */\nexport type OAuthSettings = Partial<Record<OAuth, { name: string; icon?: IconName }>>;\n\n/**\n * Information needed for analytics providers\n *\n * @internal\n */\nexport interface AnalyticsSettings {\n  identifier: string;\n  intercomIdentifier?: string;\n}\n\n/** Current user info included in bootData\n *\n * @internal\n */\nexport interface CurrentUserDTO {\n  isSignedIn: boolean;\n  id: number;\n  externalUserId: string;\n  login: string;\n  email: string;\n  name: string;\n  theme: string; // dark | light | system\n  orgCount: number;\n  orgId: number;\n  orgName: string;\n  orgRole: OrgRole | '';\n  isGrafanaAdmin: boolean;\n  gravatarUrl: string;\n  timezone: string;\n  weekStart: string;\n  locale: string;\n  language: string;\n  permissions?: Record<string, boolean>;\n  analytics: AnalyticsSettings;\n\n  /** @deprecated Use theme instead */\n  lightTheme: boolean;\n}\n\n/** Contains essential user and config info\n *\n * @internal\n */\nexport interface BootData {\n  user: CurrentUserDTO;\n  settings: GrafanaConfig;\n  navTree: NavLinkDTO[];\n  themePaths: {\n    light: string;\n    dark: string;\n  };\n}\n\n/**\n * Describes all the different Grafana configuration values available for an instance.\n *\n * @internal\n */\nexport interface GrafanaConfig {\n  isPublicDashboardView: boolean;\n  snapshotEnabled: boolean;\n  datasources: { [str: string]: DataSourceInstanceSettings };\n  panels: { [key: string]: PanelPluginMeta };\n  auth: AuthSettings;\n  minRefreshInterval: string;\n  appSubUrl: string;\n  windowTitlePrefix: string;\n  buildInfo: BuildInfo;\n  newPanelTitle: string;\n  bootData: BootData;\n  externalUserMngLinkUrl: string;\n  externalUserMngLinkName: string;\n  externalUserMngInfo: string;\n  allowOrgCreate: boolean;\n  disableLoginForm: boolean;\n  defaultDatasource: string;\n  alertingEnabled: boolean;\n  alertingErrorOrTimeout: string;\n  alertingNoDataOrNullValues: string;\n  alertingMinInterval: number;\n  authProxyEnabled: boolean;\n  exploreEnabled: boolean;\n  queryHistoryEnabled: boolean;\n  helpEnabled: boolean;\n  profileEnabled: boolean;\n  ldapEnabled: boolean;\n  sigV4AuthEnabled: boolean;\n  azureAuthEnabled: boolean;\n  samlEnabled: boolean;\n  autoAssignOrg: boolean;\n  verifyEmailEnabled: boolean;\n  oauth: OAuthSettings;\n  rbacEnabled: boolean;\n  disableUserSignUp: boolean;\n  loginHint: string;\n  passwordHint: string;\n  loginError?: string;\n  viewersCanEdit: boolean;\n  editorsCanAdmin: boolean;\n  disableSanitizeHtml: boolean;\n  liveEnabled: boolean;\n  /** @deprecated Use `theme2` instead. */\n  theme: GrafanaTheme;\n  theme2: GrafanaTheme2;\n  anonymousEnabled: boolean;\n  featureToggles: FeatureToggles;\n  licenseInfo: LicenseInfo;\n  http2Enabled: boolean;\n  dateFormats?: SystemDateFormatSettings;\n  sentry: SentryConfig;\n  grafanaJavascriptAgent: GrafanaJavascriptAgentConfig;\n  customTheme?: any;\n  geomapDefaultBaseLayer?: MapLayerOptions;\n  geomapDisableCustomBaseLayer?: boolean;\n  unifiedAlertingEnabled: boolean;\n  unifiedAlerting: UnifiedAlertingConfig;\n  angularSupportEnabled: boolean;\n  feedbackLinksEnabled: boolean;\n  secretsManagerPluginEnabled: boolean;\n  supportBundlesEnabled: boolean;\n  googleAnalyticsId: string | undefined;\n  googleAnalytics4Id: string | undefined;\n  googleAnalytics4SendManualPageViews: boolean;\n  rudderstackWriteKey: string | undefined;\n  rudderstackDataPlaneUrl: string | undefined;\n  rudderstackSdkUrl: string | undefined;\n  rudderstackConfigUrl: string | undefined;\n}\n\nexport interface AuthSettings {\n  OAuthSkipOrgRoleUpdateSync?: boolean;\n  SAMLSkipOrgRoleSync?: boolean;\n  LDAPSkipOrgRoleSync?: boolean;\n  JWTAuthSkipOrgRoleSync?: boolean;\n  GrafanaComSkipOrgRoleSync?: boolean;\n  GithubSkipOrgRoleSync?: boolean;\n  GitLabSkipOrgRoleSync?: boolean;\n  OktaSkipOrgRoleSync?: boolean;\n  AzureADSkipOrgRoleSync?: boolean;\n  GoogleSkipOrgRoleSync?: boolean;\n  GenericOAuthSkipOrgRoleSync?: boolean;\n  DisableSyncLock?: boolean;\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { InlineField, InlineSwitch, Input, Badge, useStyles2 } from '@grafana/ui';\n\nexport interface Props {\n  dataSourceName: string;\n  isDefault: boolean;\n  onNameChange: (name: string) => void;\n  onDefaultChange: (value: boolean) => void;\n  alertingSupported: boolean;\n  disabled?: boolean;\n}\n\nexport function BasicSettings({\n  dataSourceName,\n  isDefault,\n  onDefaultChange,\n  onNameChange,\n  alertingSupported,\n  disabled,\n}: Props) {\n  return (\n    <>\n      <AlertingEnabled enabled={alertingSupported} />\n\n      <div className=\"gf-form-group\" aria-label=\"Datasource settings page basic settings\">\n        <div className=\"gf-form-inline\">\n          {/* Name */}\n          <div className=\"gf-form max-width-30\">\n            <InlineField\n              label=\"Name\"\n              tooltip=\"The name is used when you select the data source in panels. The default data source is\n              'preselected in new panels.\"\n              grow\n              disabled={disabled}\n            >\n              <Input\n                id=\"basic-settings-name\"\n                type=\"text\"\n                value={dataSourceName}\n                placeholder=\"Name\"\n                onChange={(event) => onNameChange(event.currentTarget.value)}\n                required\n                aria-label={selectors.pages.DataSource.name}\n              />\n            </InlineField>\n          </div>\n\n          {/* Is Default */}\n          <InlineField label=\"Default\" labelWidth={8} disabled={disabled}>\n            <InlineSwitch\n              id=\"basic-settings-default\"\n              value={isDefault}\n              onChange={(event: React.FormEvent<HTMLInputElement>) => {\n                onDefaultChange(event.currentTarget.checked);\n              }}\n            />\n          </InlineField>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport function AlertingEnabled({ enabled }: { enabled: boolean }) {\n  const styles = useStyles2(getStyles);\n  return (\n    <div className={styles.badge}>\n      {enabled ? (\n        <Badge color=\"green\" icon=\"check-circle\" text=\"Alerting supported\" />\n      ) : (\n        <Badge color=\"orange\" icon=\"exclamation-triangle\" text=\"Alerting not supported\" />\n      )}\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  badge: css`\n    margin-bottom: ${theme.spacing(2)};\n  `,\n});\n","import React from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Button, LinkButton } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction } from 'app/types';\n\nexport interface Props {\n  exploreUrl: string;\n  canSave: boolean;\n  canDelete: boolean;\n  onDelete: () => void;\n  onSubmit: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  onTest: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n}\n\nexport function ButtonRow({ canSave, canDelete, onDelete, onSubmit, onTest, exploreUrl }: Props) {\n  const canExploreDataSources = contextSrv.hasPermission(AccessControlAction.DataSourcesExplore);\n\n  return (\n    <div className=\"gf-form-button-row\">\n      <Button variant=\"secondary\" fill=\"solid\" type=\"button\" onClick={() => history.back()}>\n        Back\n      </Button>\n      <LinkButton variant=\"secondary\" fill=\"solid\" href={exploreUrl} disabled={!canExploreDataSources}>\n        Explore\n      </LinkButton>\n      <Button\n        type=\"button\"\n        variant=\"destructive\"\n        disabled={!canDelete}\n        onClick={onDelete}\n        aria-label={selectors.pages.DataSource.delete}\n      >\n        Delete\n      </Button>\n      {canSave && (\n        <Button\n          type=\"submit\"\n          variant=\"primary\"\n          disabled={!canSave}\n          onClick={(event) => onSubmit(event)}\n          aria-label={selectors.pages.DataSource.saveAndTest}\n        >\n          Save &amp; test\n        </Button>\n      )}\n      {!canSave && (\n        <Button variant=\"primary\" onClick={onTest}>\n          Test\n        </Button>\n      )}\n    </div>\n  );\n}\n","import React from 'react';\n\nimport { DataSourceSettings } from '@grafana/data';\nimport { GrafanaEdition } from '@grafana/data/src/types/config';\nimport { Alert } from '@grafana/ui';\nimport { LocalStorageValueProvider } from 'app/core/components/LocalStorageValueProvider';\nimport { config } from 'app/core/config';\n\nconst LOCAL_STORAGE_KEY = 'datasources.settings.cloudInfoBox.isDismissed';\n\nexport interface Props {\n  dataSource: DataSourceSettings;\n}\n\nexport function CloudInfoBox({ dataSource }: Props) {\n  let mainDS = '';\n  let extraDS = '';\n\n  // don't show for already configured data sources or provisioned data sources\n  if (dataSource.readOnly || (dataSource.version ?? 0) > 2) {\n    return null;\n  }\n\n  // Skip showing this info box in some editions\n  if (config.buildInfo.edition !== GrafanaEdition.OpenSource) {\n    return null;\n  }\n\n  switch (dataSource.type) {\n    case 'prometheus':\n      mainDS = 'Prometheus';\n      extraDS = 'Loki';\n      break;\n    case 'loki':\n      mainDS = 'Loki';\n      extraDS = 'Prometheus';\n      break;\n    default:\n      return null;\n  }\n\n  return (\n    <LocalStorageValueProvider<boolean> storageKey={LOCAL_STORAGE_KEY} defaultValue={false}>\n      {(isDismissed, onDismiss) => {\n        if (isDismissed) {\n          return null;\n        }\n        return (\n          <Alert\n            title={`Configure your ${mainDS} data source below`}\n            severity=\"info\"\n            bottomSpacing={4}\n            onRemove={() => {\n              onDismiss(true);\n            }}\n          >\n            Or skip the effort and get {mainDS} (and {extraDS}) as fully-managed, scalable, and hosted data sources from\n            Grafana Labs with the{' '}\n            <a\n              className=\"external-link\"\n              href={`https://grafana.com/signup/cloud/connect-account?src=grafana-oss&cnt=${dataSource.type}-settings`}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              title=\"The free plan includes 10k active metrics and 50gb storage.\"\n            >\n              free-forever Grafana Cloud plan\n            </a>\n            .\n          </Alert>\n        );\n      }}\n    </LocalStorageValueProvider>\n  );\n}\n","import React from 'react';\n\nimport { selectors as e2eSelectors } from '@grafana/e2e-selectors';\nimport { Alert } from '@grafana/ui';\n\nexport const readOnlyMessage =\n  'This data source was added by config and cannot be modified using the UI. Please contact your server admin to update this data source.';\n\nexport function DataSourceReadOnlyMessage() {\n  return (\n    <Alert aria-label={e2eSelectors.pages.DataSource.readOnly} severity=\"info\" title=\"Provisioned data source\">\n      {readOnlyMessage}\n    </Alert>\n  );\n}\n","import React from 'react';\n\nimport { Button } from '@grafana/ui';\n\nimport { DataSourceRights } from '../types';\n\nimport { DataSourceReadOnlyMessage } from './DataSourceReadOnlyMessage';\n\nexport type Props = {\n  dataSourceRights: DataSourceRights;\n  onDelete: () => void;\n};\n\nexport function DataSourceLoadError({ dataSourceRights, onDelete }: Props) {\n  const { readOnly, hasDeleteRights } = dataSourceRights;\n  const canDelete = !readOnly && hasDeleteRights;\n  const navigateBack = () => history.back();\n\n  return (\n    <>\n      {readOnly && <DataSourceReadOnlyMessage />}\n\n      <div className=\"gf-form-button-row\">\n        {canDelete && (\n          <Button type=\"submit\" variant=\"destructive\" onClick={onDelete}>\n            Delete\n          </Button>\n        )}\n\n        <Button variant=\"secondary\" fill=\"outline\" type=\"button\" onClick={navigateBack}>\n          Back\n        </Button>\n      </div>\n    </>\n  );\n}\n","import React from 'react';\n\nimport { Alert } from '@grafana/ui';\n\nexport const missingRightsMessage =\n  'You are not allowed to modify this data source. Please contact your server admin to update this data source.';\n\nexport function DataSourceMissingRightsMessage() {\n  return (\n    <Alert severity=\"info\" title=\"Missing rights\">\n      {missingRightsMessage}\n    </Alert>\n  );\n}\n","import React from 'react';\n\nimport { GenericDataSourcePlugin } from '../types';\n\nexport type Props = {\n  plugin?: GenericDataSourcePlugin | null;\n  pageId: string;\n};\n\nexport function DataSourcePluginConfigPage({ plugin, pageId }: Props) {\n  if (!plugin || !plugin.configPages) {\n    return null;\n  }\n\n  const page = plugin.configPages.find(({ id }) => id === pageId);\n\n  if (page) {\n    // TODO: Investigate if any plugins are using this? We should change this interface\n    return <page.body plugin={plugin} query={{}} />;\n  }\n\n  return <div>Page not found: {page}</div>;\n}\n","import { cloneDeep } from 'lodash';\nimport React, { PureComponent } from 'react';\n\nimport { DataSourcePluginMeta, DataSourceSettings } from '@grafana/data';\nimport { AngularComponent, getAngularLoader } from '@grafana/runtime';\n\nimport { GenericDataSourcePlugin } from '../types';\n\nexport interface Props {\n  plugin: GenericDataSourcePlugin;\n  dataSource: DataSourceSettings;\n  dataSourceMeta: DataSourcePluginMeta;\n  onModelChange: (dataSource: DataSourceSettings) => void;\n}\n\nexport class DataSourcePluginSettings extends PureComponent<Props> {\n  element: HTMLDivElement | null = null;\n  component?: AngularComponent;\n  scopeProps: {\n    ctrl: { datasourceMeta: DataSourcePluginMeta; current: DataSourceSettings };\n    onModelChanged: (dataSource: DataSourceSettings) => void;\n  };\n\n  constructor(props: Props) {\n    super(props);\n\n    this.scopeProps = {\n      ctrl: { datasourceMeta: props.dataSourceMeta, current: cloneDeep(props.dataSource) },\n      onModelChanged: this.onModelChanged,\n    };\n    this.onModelChanged = this.onModelChanged.bind(this);\n  }\n\n  componentDidMount() {\n    const { plugin } = this.props;\n\n    if (!this.element) {\n      return;\n    }\n\n    if (!plugin.components.ConfigEditor) {\n      // React editor is not specified, let's render angular editor\n      // How to approach this better? Introduce ReactDataSourcePlugin interface and typeguard it here?\n      const loader = getAngularLoader();\n      const template = '<plugin-component type=\"datasource-config-ctrl\" />';\n\n      this.component = loader.load(this.element, this.scopeProps, template);\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { plugin } = this.props;\n    if (!plugin.components.ConfigEditor && this.props.dataSource !== prevProps.dataSource) {\n      this.scopeProps.ctrl.current = cloneDeep(this.props.dataSource);\n\n      this.component?.digest();\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.component) {\n      this.component.destroy();\n    }\n  }\n\n  onModelChanged = (dataSource: DataSourceSettings) => {\n    this.props.onModelChange(dataSource);\n  };\n\n  render() {\n    const { plugin, dataSource } = this.props;\n\n    if (!plugin) {\n      return null;\n    }\n\n    return (\n      <div ref={(element) => (this.element = element)}>\n        {plugin.components.ConfigEditor &&\n          React.createElement(plugin.components.ConfigEditor, {\n            options: dataSource,\n            onOptionsChange: this.onModelChanged,\n          })}\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport { PluginState } from '@grafana/data';\nimport { PluginStateInfo } from 'app/features/plugins/components/PluginStateInfo';\n\nexport type Props = {\n  state?: PluginState;\n};\n\nexport function DataSourcePluginState({ state }: Props) {\n  return (\n    <div className=\"gf-form\">\n      <div className=\"gf-form-label width-10\">Plugin state</div>\n      <div className=\"gf-form-label gf-form-label--transparent\">\n        <PluginStateInfo state={state} />\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\n\nimport { selectors as e2eSelectors } from '@grafana/e2e-selectors';\nimport { TestingStatus } from '@grafana/runtime';\nimport { Alert } from '@grafana/ui';\n\nexport type Props = {\n  testingStatus?: TestingStatus;\n};\n\nexport function DataSourceTestingStatus({ testingStatus }: Props) {\n  const isError = testingStatus?.status === 'error';\n  const message = testingStatus?.message;\n  const detailsMessage = testingStatus?.details?.message;\n  const detailsVerboseMessage = testingStatus?.details?.verboseMessage;\n\n  if (message) {\n    return (\n      <div className=\"gf-form-group p-t-2\">\n        <Alert\n          severity={isError ? 'error' : 'success'}\n          title={message}\n          aria-label={e2eSelectors.pages.DataSource.alert}\n        >\n          {testingStatus?.details && (\n            <>\n              {detailsMessage}\n              {detailsVerboseMessage ? (\n                <details style={{ whiteSpace: 'pre-wrap' }}>{detailsVerboseMessage}</details>\n              ) : null}\n            </>\n          )}\n        </Alert>\n      </div>\n    );\n  }\n\n  return null;\n}\n","import { AnyAction } from '@reduxjs/toolkit';\nimport React from 'react';\n\nimport {\n  DataSourcePluginContextProvider,\n  DataSourcePluginMeta,\n  DataSourceSettings as DataSourceSettingsType,\n} from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport PageLoader from 'app/core/components/PageLoader/PageLoader';\nimport { DataSourceSettingsState, useDispatch } from 'app/types';\n\nimport {\n  dataSourceLoaded,\n  setDataSourceName,\n  setIsDefault,\n  useDataSource,\n  useDataSourceExploreUrl,\n  useDataSourceMeta,\n  useDataSourceRights,\n  useDataSourceSettings,\n  useDeleteLoadedDataSource,\n  useInitDataSourceSettings,\n  useTestDataSource,\n  useUpdateDatasource,\n} from '../state';\nimport { DataSourceRights } from '../types';\n\nimport { BasicSettings } from './BasicSettings';\nimport { ButtonRow } from './ButtonRow';\nimport { CloudInfoBox } from './CloudInfoBox';\nimport { DataSourceLoadError } from './DataSourceLoadError';\nimport { DataSourceMissingRightsMessage } from './DataSourceMissingRightsMessage';\nimport { DataSourcePluginConfigPage } from './DataSourcePluginConfigPage';\nimport { DataSourcePluginSettings } from './DataSourcePluginSettings';\nimport { DataSourcePluginState } from './DataSourcePluginState';\nimport { DataSourceReadOnlyMessage } from './DataSourceReadOnlyMessage';\nimport { DataSourceTestingStatus } from './DataSourceTestingStatus';\n\nexport type Props = {\n  // The ID of the data source\n  uid: string;\n  // The ID of the custom datasource setting page\n  pageId?: string | null;\n};\n\nexport function EditDataSource({ uid, pageId }: Props) {\n  useInitDataSourceSettings(uid);\n\n  const dispatch = useDispatch();\n  const dataSource = useDataSource(uid);\n  const dataSourceMeta = useDataSourceMeta(dataSource.type);\n  const dataSourceSettings = useDataSourceSettings();\n  const dataSourceRights = useDataSourceRights(uid);\n  const exploreUrl = useDataSourceExploreUrl(uid);\n  const onDelete = useDeleteLoadedDataSource();\n  const onTest = useTestDataSource(uid);\n  const onUpdate = useUpdateDatasource();\n  const onDefaultChange = (value: boolean) => dispatch(setIsDefault(value));\n  const onNameChange = (name: string) => dispatch(setDataSourceName(name));\n  const onOptionsChange = (ds: DataSourceSettingsType) => dispatch(dataSourceLoaded(ds));\n\n  return (\n    <EditDataSourceView\n      pageId={pageId}\n      dataSource={dataSource}\n      dataSourceMeta={dataSourceMeta}\n      dataSourceSettings={dataSourceSettings}\n      dataSourceRights={dataSourceRights}\n      exploreUrl={exploreUrl}\n      onDelete={onDelete}\n      onDefaultChange={onDefaultChange}\n      onNameChange={onNameChange}\n      onOptionsChange={onOptionsChange}\n      onTest={onTest}\n      onUpdate={onUpdate}\n    />\n  );\n}\n\nexport type ViewProps = {\n  pageId?: string | null;\n  dataSource: DataSourceSettingsType;\n  dataSourceMeta: DataSourcePluginMeta;\n  dataSourceSettings: DataSourceSettingsState;\n  dataSourceRights: DataSourceRights;\n  exploreUrl: string;\n  onDelete: () => void;\n  onDefaultChange: (isDefault: boolean) => AnyAction;\n  onNameChange: (name: string) => AnyAction;\n  onOptionsChange: (dataSource: DataSourceSettingsType) => AnyAction;\n  onTest: () => void;\n  onUpdate: (dataSource: DataSourceSettingsType) => Promise<DataSourceSettingsType>;\n};\n\nexport function EditDataSourceView({\n  pageId,\n  dataSource,\n  dataSourceMeta,\n  dataSourceSettings,\n  dataSourceRights,\n  exploreUrl,\n  onDelete,\n  onDefaultChange,\n  onNameChange,\n  onOptionsChange,\n  onTest,\n  onUpdate,\n}: ViewProps) {\n  const { plugin, loadError, testingStatus, loading } = dataSourceSettings;\n  const { readOnly, hasWriteRights, hasDeleteRights } = dataSourceRights;\n  const hasDataSource = dataSource.id > 0;\n\n  const dsi = getDataSourceSrv()?.getInstanceSettings(dataSource.uid);\n\n  const hasAlertingEnabled = Boolean(dsi?.meta?.alerting ?? false);\n  const isAlertManagerDatasource = dsi?.type === 'alertmanager';\n  const alertingSupported = hasAlertingEnabled || isAlertManagerDatasource;\n\n  const onSubmit = async (e: React.MouseEvent<HTMLButtonElement> | React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    await onUpdate({ ...dataSource });\n\n    onTest();\n  };\n\n  if (loadError) {\n    return <DataSourceLoadError dataSourceRights={dataSourceRights} onDelete={onDelete} />;\n  }\n\n  if (loading) {\n    return <PageLoader />;\n  }\n\n  // TODO - is this needed?\n  if (!hasDataSource || !dsi) {\n    return null;\n  }\n\n  if (pageId) {\n    return (\n      <DataSourcePluginContextProvider instanceSettings={dsi}>\n        <DataSourcePluginConfigPage pageId={pageId} plugin={plugin} />\n      </DataSourcePluginContextProvider>\n    );\n  }\n\n  return (\n    <form onSubmit={onSubmit}>\n      {!hasWriteRights && <DataSourceMissingRightsMessage />}\n      {readOnly && <DataSourceReadOnlyMessage />}\n      {dataSourceMeta.state && <DataSourcePluginState state={dataSourceMeta.state} />}\n\n      <CloudInfoBox dataSource={dataSource} />\n\n      <BasicSettings\n        dataSourceName={dataSource.name}\n        isDefault={dataSource.isDefault}\n        onDefaultChange={onDefaultChange}\n        onNameChange={onNameChange}\n        alertingSupported={alertingSupported}\n        disabled={readOnly || !hasWriteRights}\n      />\n\n      {plugin && (\n        <DataSourcePluginContextProvider instanceSettings={dsi}>\n          <DataSourcePluginSettings\n            plugin={plugin}\n            dataSource={dataSource}\n            dataSourceMeta={dataSourceMeta}\n            onModelChange={onOptionsChange}\n          />\n        </DataSourcePluginContextProvider>\n      )}\n\n      <DataSourceTestingStatus testingStatus={testingStatus} />\n\n      <ButtonRow\n        onSubmit={onSubmit}\n        onDelete={onDelete}\n        onTest={onTest}\n        exploreUrl={exploreUrl}\n        canSave={!readOnly && hasWriteRights}\n        canDelete={!readOnly && hasDeleteRights}\n      />\n    </form>\n  );\n}\n","import React from 'react';\n\nimport { Page } from 'app/core/components/Page/Page';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\n\nimport { EditDataSource } from '../components/EditDataSource';\nimport { useDataSourceSettingsNav } from '../state';\n\nexport interface Props extends GrafanaRouteComponentProps<{ uid: string }> {}\n\nexport function EditDataSourcePage(props: Props) {\n  const uid = props.match.params.uid;\n  const params = new URLSearchParams(props.location.search);\n  const pageId = params.get('page');\n  const nav = useDataSourceSettingsNav(uid, pageId);\n\n  return (\n    <Page navId=\"datasources\" pageNav={nav.main}>\n      <Page.Contents>\n        <EditDataSource uid={uid} pageId={pageId} />\n      </Page.Contents>\n    </Page>\n  );\n}\n\nexport default EditDataSourcePage;\n","import { createContext } from 'react';\n\nimport { DATASOURCES_ROUTES } from '../constants';\nimport { DataSourcesRoutes } from '../types';\n\n// The purpose of this context is to be able to override the data-sources routes (used for links for example) used under\n// the app/features/datasources modules, so we can reuse them more easily in different parts of the application (e.g. under Connections)\nexport const DataSourcesRoutesContext = createContext<DataSourcesRoutes>(DATASOURCES_ROUTES);\n","import { useContext, useEffect } from 'react';\n\nimport { DataSourcePluginMeta, DataSourceSettings, NavModelItem } from '@grafana/data';\nimport { cleanUpAction } from 'app/core/actions/cleanUp';\nimport appEvents from 'app/core/app_events';\nimport { contextSrv } from 'app/core/core';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { AccessControlAction, useDispatch, useSelector } from 'app/types';\nimport { ShowConfirmModalEvent } from 'app/types/events';\n\nimport { DataSourceRights } from '../types';\nimport { constructDataSourceExploreUrl } from '../utils';\n\nimport {\n  initDataSourceSettings,\n  testDataSource,\n  loadDataSource,\n  loadDataSources,\n  loadDataSourcePlugins,\n  addDataSource,\n  updateDataSource,\n  deleteLoadedDataSource,\n} from './actions';\nimport { DataSourcesRoutesContext } from './contexts';\nimport { getDataSourceLoadingNav, buildNavModel, getDataSourceNav } from './navModel';\nimport { initialDataSourceSettingsState } from './reducers';\nimport { getDataSource, getDataSourceMeta } from './selectors';\n\nexport const useInitDataSourceSettings = (uid: string) => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(initDataSourceSettings(uid));\n\n    return function cleanUp() {\n      dispatch(\n        cleanUpAction({\n          cleanupAction: (state) => (state.dataSourceSettings = initialDataSourceSettingsState),\n        })\n      );\n    };\n  }, [uid, dispatch]);\n};\n\nexport const useTestDataSource = (uid: string) => {\n  const dispatch = useDispatch();\n  const dataSourcesRoutes = useDataSourcesRoutes();\n\n  return () => dispatch(testDataSource(uid, dataSourcesRoutes.Edit));\n};\n\nexport const useLoadDataSources = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector((state) => state.dataSources.isLoadingDataSources);\n  const dataSources = useSelector((state) => state.dataSources.dataSources);\n\n  useEffect(() => {\n    dispatch(loadDataSources());\n  }, [dispatch]);\n\n  return { isLoading, dataSources };\n};\n\nexport const useLoadDataSource = (uid: string) => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(loadDataSource(uid));\n  }, [dispatch, uid]);\n};\n\nexport const useLoadDataSourcePlugins = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(loadDataSourcePlugins());\n  }, [dispatch]);\n};\n\nexport const useAddDatasource = () => {\n  const dispatch = useDispatch();\n  const dataSourcesRoutes = useDataSourcesRoutes();\n\n  return (plugin: DataSourcePluginMeta) => {\n    dispatch(addDataSource(plugin, dataSourcesRoutes.Edit));\n  };\n};\n\nexport const useUpdateDatasource = () => {\n  const dispatch = useDispatch();\n\n  return async (dataSource: DataSourceSettings) => dispatch(updateDataSource(dataSource));\n};\n\nexport const useDeleteLoadedDataSource = () => {\n  const dispatch = useDispatch();\n  const { name } = useSelector((state) => state.dataSources.dataSource);\n\n  return () => {\n    appEvents.publish(\n      new ShowConfirmModalEvent({\n        title: 'Delete',\n        text: `Are you sure you want to delete the \"${name}\" data source?`,\n        yesText: 'Delete',\n        icon: 'trash-alt',\n        onConfirm: () => dispatch(deleteLoadedDataSource()),\n      })\n    );\n  };\n};\n\nexport const useDataSource = (uid: string) => {\n  return useSelector((state) => getDataSource(state.dataSources, uid));\n};\n\nexport const useDataSourceExploreUrl = (uid: string) => {\n  const dataSource = useDataSource(uid);\n  return constructDataSourceExploreUrl(dataSource);\n};\n\nexport const useDataSourceMeta = (pluginType: string): DataSourcePluginMeta => {\n  return useSelector((state) => getDataSourceMeta(state.dataSources, pluginType));\n};\n\nexport const useDataSourceSettings = () => {\n  return useSelector((state) => state.dataSourceSettings);\n};\n\nexport const useDataSourceSettingsNav = (dataSourceId: string, pageId: string | null) => {\n  const dataSource = useDataSource(dataSourceId);\n  const { plugin, loadError, loading } = useDataSourceSettings();\n  const navIndex = useSelector((state) => state.navIndex);\n  const navIndexId = pageId ? `datasource-${pageId}-${dataSourceId}` : `datasource-settings-${dataSourceId}`;\n\n  if (loadError) {\n    const node: NavModelItem = {\n      text: loadError,\n      subTitle: 'Data Source Error',\n      icon: 'exclamation-triangle',\n    };\n\n    return {\n      node: node,\n      main: node,\n    };\n  }\n\n  if (loading || !plugin) {\n    return getNavModel(navIndex, navIndexId, getDataSourceLoadingNav('settings'));\n  }\n\n  return getNavModel(navIndex, navIndexId, getDataSourceNav(buildNavModel(dataSource, plugin), pageId || 'settings'));\n};\n\nexport const useDataSourceRights = (uid: string): DataSourceRights => {\n  const dataSource = useDataSource(uid);\n  const readOnly = dataSource.readOnly === true;\n  const hasWriteRights = contextSrv.hasPermissionInMetadata(AccessControlAction.DataSourcesWrite, dataSource);\n  const hasDeleteRights = contextSrv.hasPermissionInMetadata(AccessControlAction.DataSourcesDelete, dataSource);\n\n  return {\n    readOnly,\n    hasWriteRights,\n    hasDeleteRights,\n  };\n};\n\nexport const useDataSourcesRoutes = () => {\n  return useContext(DataSourcesRoutesContext);\n};\n","import React from 'react';\n\nimport { PluginState } from '@grafana/data';\nimport { Badge, BadgeProps } from '@grafana/ui';\n\ninterface Props {\n  state?: PluginState;\n}\n\nexport const PluginStateInfo = (props: Props) => {\n  const display = getFeatureStateInfo(props.state);\n\n  if (!display) {\n    return null;\n  }\n\n  return <Badge color={display.color} title={display.tooltip} text={display.text} icon={display.icon} />;\n};\n\nfunction getFeatureStateInfo(state?: PluginState): BadgeProps | null {\n  switch (state) {\n    case PluginState.deprecated:\n      return {\n        text: 'Deprecated',\n        color: 'red',\n        tooltip: `This feature is deprecated and will be removed in a future release`,\n      };\n    case PluginState.alpha:\n      return {\n        text: 'Alpha',\n        color: 'blue',\n        tooltip: `This feature is experimental and future updates might not be backward compatible`,\n      };\n    case PluginState.beta:\n      return {\n        text: 'Beta',\n        color: 'blue',\n        tooltip: `This feature is close to complete but not fully tested`,\n      };\n    default:\n      return null;\n  }\n}\n"],"names":["GrafanaEdition","BasicSettings","dataSourceName","isDefault","onDefaultChange","onNameChange","alertingSupported","disabled","AlertingEnabled","InlineField","Input","event","selectors","enabled","styles","getStyles","Badge","theme","ButtonRow","canSave","canDelete","onDelete","onSubmit","onTest","exploreUrl","canExploreDataSources","Button","LOCAL_STORAGE_KEY","CloudInfoBox","dataSource","mainDS","extraDS","LocalStorageValueProvider","isDismissed","onDismiss","Alert","readOnlyMessage","DataSourceReadOnlyMessage","DataSourceLoadError","dataSourceRights","readOnly","hasDeleteRights","navigateBack","missingRightsMessage","DataSourceMissingRightsMessage","DataSourcePluginConfigPage","plugin","pageId","page","id","DataSourcePluginSettings","props","loader","template","prevProps","element","DataSourcePluginState","state","PluginStateInfo","DataSourceTestingStatus","testingStatus","isError","message","detailsMessage","detailsVerboseMessage","EditDataSource","uid","dispatch","dataSourceMeta","dataSourceSettings","onUpdate","value","name","onOptionsChange","ds","EditDataSourceView","loadError","loading","hasWriteRights","hasDataSource","dsi","hasAlertingEnabled","isAlertManagerDatasource","e","PageLoader","DataSourcePluginContextProvider","EditDataSourcePage","nav","DataSourcesRoutesContext","useInitDataSourceSettings","useTestDataSource","dataSourcesRoutes","useDataSourcesRoutes","useLoadDataSources","isLoading","dataSources","useLoadDataSource","useLoadDataSourcePlugins","useAddDatasource","useUpdateDatasource","useDeleteLoadedDataSource","useDataSource","useDataSourceExploreUrl","useDataSourceMeta","pluginType","useDataSourceSettings","useDataSourceSettingsNav","dataSourceId","navIndex","navIndexId","node","useDataSourceRights","display","getFeatureStateInfo"],"sourceRoot":""}