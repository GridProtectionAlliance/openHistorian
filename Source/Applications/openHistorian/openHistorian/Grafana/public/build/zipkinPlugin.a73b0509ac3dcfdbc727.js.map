{"version":3,"file":"zipkinPlugin.a73b0509ac3dcfdbc727.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/NodeGraphSettings.tsx","webpack://grafana/./public/app/core/components/TraceToMetrics/TraceToMetricsSettings.tsx","webpack://grafana/./public/app/core/utils/tracing.ts","webpack://grafana/./public/app/plugins/datasource/zipkin/ConfigEditor.tsx","webpack://grafana/./public/app/plugins/datasource/zipkin/constants.ts","webpack://grafana/./public/app/plugins/datasource/zipkin/QueryField.tsx","webpack://grafana/./public/app/plugins/datasource/zipkin/utils/graphTransform.ts","webpack://grafana/./public/app/plugins/datasource/zipkin/datasource.ts","webpack://grafana/./public/app/plugins/datasource/zipkin/module.ts","webpack://grafana/./public/app/plugins/datasource/zipkin/utils/transforms.ts","webpack://grafana/./.yarn/__virtual__/react-use-virtual-720cbd4f86/3/opt/drone/yarncache/react-use-npm-17.4.0-0ef4521544-0889da919b.zip/node_modules/react-use/esm/useMount.js"],"sourcesContent":["import { css } from '@emotion/css';\nimport React from 'react';\n\nimport {\n  DataSourceJsonData,\n  DataSourcePluginOptionsEditorProps,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { InlineField, InlineFieldRow, InlineSwitch } from '@grafana/ui';\n\nexport interface NodeGraphOptions {\n  enabled?: boolean;\n}\n\nexport interface NodeGraphData extends DataSourceJsonData {\n  nodeGraph?: NodeGraphOptions;\n}\n\ninterface Props extends DataSourcePluginOptionsEditorProps<NodeGraphData> {}\n\nexport function NodeGraphSettings({ options, onOptionsChange }: Props) {\n  return (\n    <div className={styles.container}>\n      <h3 className=\"page-heading\">Node graph</h3>\n      <InlineFieldRow className={styles.row}>\n        <InlineField\n          tooltip=\"Displays the node graph above the trace view. Default: disabled\"\n          label=\"Enable node graph\"\n          labelWidth={26}\n        >\n          <InlineSwitch\n            id=\"enableNodeGraph\"\n            value={options.jsonData.nodeGraph?.enabled}\n            onChange={(event: React.SyntheticEvent<HTMLInputElement>) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'nodeGraph', {\n                ...options.jsonData.nodeGraph,\n                enabled: event.currentTarget.checked,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n    </div>\n  );\n}\n\nconst styles = {\n  container: css`\n    label: container;\n    width: 100%;\n  `,\n  row: css`\n    label: row;\n    align-items: baseline;\n  `,\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport {\n  DataSourceJsonData,\n  DataSourcePluginOptionsEditorProps,\n  GrafanaTheme2,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { Button, InlineField, InlineFieldRow, Input, useStyles2 } from '@grafana/ui';\n\nimport { TagMappingInput } from '../TraceToLogs/TagMappingInput';\n\nexport interface TraceToMetricsOptions {\n  datasourceUid?: string;\n  tags?: Array<{ key: string; value: string }>;\n  queries: TraceToMetricQuery[];\n  spanStartTimeShift?: string;\n  spanEndTimeShift?: string;\n}\n\nexport interface TraceToMetricQuery {\n  name?: string;\n  query?: string;\n}\n\nexport interface TraceToMetricsData extends DataSourceJsonData {\n  tracesToMetrics?: TraceToMetricsOptions;\n}\n\ninterface Props extends DataSourcePluginOptionsEditorProps<TraceToMetricsData> {}\n\nexport function TraceToMetricsSettings({ options, onOptionsChange }: Props) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={css({ width: '100%' })}>\n      <h3 className=\"page-heading\">Trace to metrics</h3>\n\n      <div className={styles.infoText}>Navigate from a trace span to the selected data source&apos;s metrics.</div>\n\n      <InlineFieldRow className={styles.row}>\n        <InlineField\n          tooltip=\"The Prometheus data source the trace is going to navigate to\"\n          label=\"Data source\"\n          labelWidth={26}\n        >\n          <DataSourcePicker\n            inputId=\"trace-to-metrics-data-source-picker\"\n            pluginId=\"prometheus\"\n            current={options.jsonData.tracesToMetrics?.datasourceUid}\n            noDefault={true}\n            width={40}\n            onChange={(ds) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n                ...options.jsonData.tracesToMetrics,\n                datasourceUid: ds.uid,\n              })\n            }\n          />\n        </InlineField>\n        {options.jsonData.tracesToMetrics?.datasourceUid ? (\n          <Button\n            type=\"button\"\n            variant=\"secondary\"\n            size=\"sm\"\n            fill=\"text\"\n            onClick={() => {\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n                ...options.jsonData.tracesToMetrics,\n                datasourceUid: undefined,\n              });\n            }}\n          >\n            Clear\n          </Button>\n        ) : null}\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField\n          label=\"Span start time shift\"\n          labelWidth={26}\n          grow\n          tooltip=\"Shifts the start time of the span. Default: 0 (Time units can be used here, for example: 5s, -1m, 3h)\"\n        >\n          <Input\n            type=\"text\"\n            placeholder=\"0\"\n            width={40}\n            onChange={(v) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n                ...options.jsonData.tracesToMetrics,\n                spanStartTimeShift: v.currentTarget.value,\n              })\n            }\n            value={options.jsonData.tracesToMetrics?.spanStartTimeShift || ''}\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField\n          label=\"Span end time shift\"\n          labelWidth={26}\n          grow\n          tooltip=\"Shifts the end time of the span. Default: 0 (Time units can be used here, for example: 5s, -1m, 3h)\"\n        >\n          <Input\n            type=\"text\"\n            placeholder=\"0\"\n            width={40}\n            onChange={(v) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n                ...options.jsonData.tracesToMetrics,\n                spanEndTimeShift: v.currentTarget.value,\n              })\n            }\n            value={options.jsonData.tracesToMetrics?.spanEndTimeShift || ''}\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField tooltip=\"Tags that will be used in the metrics query\" label=\"Tags\" labelWidth={26}>\n          <TagMappingInput\n            values={options.jsonData.tracesToMetrics?.tags ?? []}\n            onChange={(v) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n                ...options.jsonData.tracesToMetrics,\n                tags: v,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      {options.jsonData.tracesToMetrics?.queries?.map((query, i) => (\n        <div key={i} className={styles.queryRow}>\n          <InlineField label=\"Link Label\" labelWidth={26} tooltip=\"Descriptive label for the linked query\">\n            <Input\n              label=\"Link Label\"\n              type=\"text\"\n              allowFullScreen\n              value={query.name}\n              width={40}\n              onChange={(e) => {\n                let newQueries = options.jsonData.tracesToMetrics?.queries.slice() ?? [];\n                newQueries[i].name = e.currentTarget.value;\n                updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n                  ...options.jsonData.tracesToMetrics,\n                  queries: newQueries,\n                });\n              }}\n            />\n          </InlineField>\n          <InlineField\n            label=\"Query\"\n            labelWidth={10}\n            tooltip=\"The Prometheus query that will run when navigating from a trace to metrics. Interpolate tags using the `$__tags` keyword\"\n            grow\n          >\n            <Input\n              label=\"Query\"\n              type=\"text\"\n              allowFullScreen\n              value={query.query}\n              onChange={(e) => {\n                let newQueries = options.jsonData.tracesToMetrics?.queries.slice() ?? [];\n                newQueries[i].query = e.currentTarget.value;\n                updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n                  ...options.jsonData.tracesToMetrics,\n                  queries: newQueries,\n                });\n              }}\n            />\n          </InlineField>\n\n          <Button\n            variant=\"destructive\"\n            title=\"Remove query\"\n            icon=\"times\"\n            type=\"button\"\n            onClick={() => {\n              let newQueries = options.jsonData.tracesToMetrics?.queries.slice();\n              newQueries?.splice(i, 1);\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n                ...options.jsonData.tracesToMetrics,\n                queries: newQueries,\n              });\n            }}\n          />\n        </div>\n      ))}\n\n      <Button\n        variant=\"secondary\"\n        title=\"Add query\"\n        icon=\"plus\"\n        type=\"button\"\n        onClick={() => {\n          updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n            ...options.jsonData.tracesToMetrics,\n            queries: [...(options.jsonData.tracesToMetrics?.queries ?? []), { query: '' }],\n          });\n        }}\n      >\n        Add query\n      </Button>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  infoText: css`\n    padding-bottom: ${theme.spacing(2)};\n    color: ${theme.colors.text.secondary};\n  `,\n  row: css`\n    label: row;\n    align-items: baseline;\n  `,\n  queryRow: css`\n    display: flex;\n  `,\n});\n","/**\n * Get non overlapping duration of the ranges as they can overlap or have gaps.\n */\nimport { FieldType, MutableDataFrame, NodeGraphDataFrameFieldNames as Fields } from '@grafana/data';\n\nexport function getNonOverlappingDuration(ranges: Array<[number, number]>): number {\n  ranges.sort((a, b) => a[0] - b[0]);\n  const mergedRanges = ranges.reduce<Array<[number, number]>>((acc, range) => {\n    if (!acc.length) {\n      return [range];\n    }\n    const tail = acc.slice(-1)[0];\n    const [prevStart, prevEnd] = tail;\n    const [start, end] = range;\n    if (end < prevEnd) {\n      // In this case the range is completely inside the prev range so we can just ignore it.\n      return acc;\n    }\n\n    if (start > prevEnd) {\n      // There is no overlap so we can just add it to stack\n      return [...acc, range];\n    }\n\n    // We know there is overlap and current range ends later than previous so we can just extend the range\n    return [...acc.slice(0, -1), [prevStart, end]];\n  }, []);\n\n  return mergedRanges.reduce((acc, range) => {\n    return acc + (range[1] - range[0]);\n  }, 0);\n}\n\n/**\n * Returns a map of the spans with children array for easier processing. It will also contain empty spans in case\n * span is missing but other spans are its children. This is more generic because it needs to allow iterating over\n * both arrays and dataframe views.\n */\nexport function makeSpanMap<T>(getSpan: (index: number) => { span: T; id: string; parentIds: string[] } | undefined): {\n  [id: string]: { span: T; children: string[] };\n} {\n  const spanMap: { [id: string]: { span?: T; children: string[] } } = {};\n\n  let span;\n  for (let index = 0; (span = getSpan(index)), !!span; index++) {\n    if (!spanMap[span.id]) {\n      spanMap[span.id] = {\n        span: span.span,\n        children: [],\n      };\n    } else {\n      spanMap[span.id].span = span.span;\n    }\n\n    for (const parentId of span.parentIds) {\n      if (parentId) {\n        if (!spanMap[parentId]) {\n          spanMap[parentId] = {\n            span: undefined,\n            children: [span.id],\n          };\n        } else {\n          spanMap[parentId].children.push(span.id);\n        }\n      }\n    }\n  }\n  return spanMap as { [id: string]: { span: T; children: string[] } };\n}\n\nexport function getStats(duration: number, traceDuration: number, selfDuration: number) {\n  return {\n    main: `${toFixedNoTrailingZeros(duration)}ms (${toFixedNoTrailingZeros((duration / traceDuration) * 100)}%)`,\n    secondary: `${toFixedNoTrailingZeros(selfDuration)}ms (${toFixedNoTrailingZeros(\n      (selfDuration / duration) * 100\n    )}%)`,\n  };\n}\n\nfunction toFixedNoTrailingZeros(n: number) {\n  return parseFloat(n.toFixed(2));\n}\n\n/**\n * Create default frames used when returning data for node graph.\n */\nexport function makeFrames() {\n  const nodesFrame = new MutableDataFrame({\n    fields: [\n      { name: Fields.id, type: FieldType.string },\n      { name: Fields.title, type: FieldType.string },\n      { name: Fields.subTitle, type: FieldType.string },\n      { name: Fields.mainStat, type: FieldType.string, config: { displayName: 'Total time (% of trace)' } },\n      { name: Fields.secondaryStat, type: FieldType.string, config: { displayName: 'Self time (% of total)' } },\n      {\n        name: Fields.color,\n        type: FieldType.number,\n        config: { color: { mode: 'continuous-GrYlRd' }, displayName: 'Self time / Trace duration' },\n      },\n    ],\n    meta: {\n      preferredVisualisationType: 'nodeGraph',\n    },\n  });\n\n  const edgesFrame = new MutableDataFrame({\n    fields: [\n      { name: Fields.id, type: FieldType.string },\n      { name: Fields.target, type: FieldType.string },\n      { name: Fields.source, type: FieldType.string },\n    ],\n    meta: {\n      preferredVisualisationType: 'nodeGraph',\n    },\n  });\n\n  return [nodesFrame, edgesFrame];\n}\n","import React from 'react';\n\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { DataSourceHttpSettings, SecureSocksProxySettings } from '@grafana/ui';\nimport { NodeGraphSettings } from 'app/core/components/NodeGraphSettings';\nimport { TraceToLogsSettings } from 'app/core/components/TraceToLogs/TraceToLogsSettings';\nimport { TraceToMetricsSettings } from 'app/core/components/TraceToMetrics/TraceToMetricsSettings';\nimport { SpanBarSettings } from 'app/features/explore/TraceView/components';\n\nexport type Props = DataSourcePluginOptionsEditorProps;\n\nexport const ConfigEditor = ({ options, onOptionsChange }: Props) => {\n  return (\n    <>\n      <DataSourceHttpSettings\n        defaultUrl=\"http://localhost:9411\"\n        dataSourceConfig={options}\n        showAccessOptions={false}\n        onChange={onOptionsChange}\n      />\n\n      {config.featureToggles.secureSocksDatasourceProxy && (\n        <SecureSocksProxySettings options={options} onOptionsChange={onOptionsChange} />\n      )}\n\n      <div className=\"gf-form-group\">\n        <TraceToLogsSettings options={options} onOptionsChange={onOptionsChange} />\n      </div>\n\n      {config.featureToggles.traceToMetrics ? (\n        <div className=\"gf-form-group\">\n          <TraceToMetricsSettings options={options} onOptionsChange={onOptionsChange} />\n        </div>\n      ) : null}\n\n      <div className=\"gf-form-group\">\n        <NodeGraphSettings options={options} onOptionsChange={onOptionsChange} />\n      </div>\n\n      <div className=\"gf-form-group\">\n        <SpanBarSettings options={options} onOptionsChange={onOptionsChange} />\n      </div>\n    </>\n  );\n};\n","export const apiPrefix = '/api/v2';\n","import { css } from '@emotion/css';\nimport { fromPairs } from 'lodash';\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { useAsyncFn, useMount, useMountedState } from 'react-use';\nimport { AsyncState } from 'react-use/lib/useAsyncFn';\n\nimport { GrafanaTheme2, QueryEditorProps } from '@grafana/data';\nimport {\n  ButtonCascader,\n  CascaderOption,\n  FileDropzone,\n  InlineField,\n  InlineFieldRow,\n  RadioButtonGroup,\n  useTheme2,\n  QueryField,\n  useStyles2,\n} from '@grafana/ui';\nimport { notifyApp } from 'app/core/actions';\nimport { createErrorNotification } from 'app/core/copy/appNotification';\nimport { dispatch } from 'app/store/store';\n\nimport { apiPrefix } from './constants';\nimport { ZipkinDatasource } from './datasource';\nimport { ZipkinQuery, ZipkinQueryType, ZipkinSpan } from './types';\n\ntype Props = QueryEditorProps<ZipkinDatasource, ZipkinQuery>;\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    tracesCascader: css({\n      label: 'tracesCascader',\n      marginRight: theme.spacing(1),\n    }),\n  };\n};\n\nexport const ZipkinQueryField = ({ query, onChange, onRunQuery, datasource }: Props) => {\n  const serviceOptions = useServices(datasource);\n  const theme = useTheme2();\n  const styles = useStyles2(getStyles);\n  const { onLoadOptions, allOptions } = useLoadOptions(datasource);\n\n  const onSelectTrace = useCallback(\n    (values: string[], selectedOptions: CascaderOption[]) => {\n      if (selectedOptions.length === 3) {\n        const traceID = selectedOptions[2].value;\n        onChange({ ...query, query: traceID });\n        onRunQuery();\n      }\n    },\n    [onChange, onRunQuery, query]\n  );\n\n  const onChangeQuery = (value: string) => {\n    const nextQuery = { ...query, query: value };\n    onChange(nextQuery);\n  };\n\n  let cascaderOptions = useMapToCascaderOptions(serviceOptions, allOptions);\n\n  return (\n    <>\n      <InlineFieldRow>\n        <InlineField label=\"Query type\">\n          <RadioButtonGroup<ZipkinQueryType>\n            options={[\n              { value: 'traceID', label: 'TraceID' },\n              { value: 'upload', label: 'JSON File' },\n            ]}\n            value={query.queryType || 'traceID'}\n            onChange={(v) =>\n              onChange({\n                ...query,\n                queryType: v,\n              })\n            }\n            size=\"md\"\n          />\n        </InlineField>\n      </InlineFieldRow>\n      {query.queryType === 'upload' ? (\n        <div className={css({ padding: theme.spacing(2) })}>\n          <FileDropzone\n            options={{ multiple: false }}\n            onLoad={(result) => {\n              datasource.uploadedJson = result;\n              onRunQuery();\n            }}\n          />\n        </div>\n      ) : (\n        <InlineFieldRow>\n          <ButtonCascader\n            options={cascaderOptions}\n            onChange={onSelectTrace}\n            loadData={onLoadOptions}\n            variant=\"secondary\"\n            buttonProps={{ className: styles.tracesCascader }}\n          >\n            Traces\n          </ButtonCascader>\n          <div className=\"gf-form gf-form--grow flex-shrink-1 min-width-15\">\n            <QueryField\n              query={query.query}\n              onChange={onChangeQuery}\n              onRunQuery={onRunQuery}\n              placeholder={'Insert Trace ID (run with Shift+Enter)'}\n              portalOrigin=\"zipkin\"\n            />\n          </div>\n        </InlineFieldRow>\n      )}\n    </>\n  );\n};\n\n// Exported for tests\nexport function useServices(datasource: ZipkinDatasource): AsyncState<CascaderOption[]> {\n  const url = `${apiPrefix}/services`;\n\n  const [servicesOptions, fetch] = useAsyncFn(async (): Promise<CascaderOption[]> => {\n    try {\n      const services: string[] | null = await datasource.metadataRequest(url);\n      if (services) {\n        return services.sort().map((service) => ({\n          label: service,\n          value: service,\n          isLeaf: false,\n        }));\n      }\n      return [];\n    } catch (error) {\n      const errorToShow = error instanceof Error ? error : 'An unknown error occurred';\n      dispatch(notifyApp(createErrorNotification('Failed to load services from Zipkin', errorToShow)));\n      throw error;\n    }\n  }, [datasource]);\n\n  useMount(() => {\n    // We should probably call this periodically to get new services after mount.\n    fetch();\n  });\n\n  return servicesOptions;\n}\n\ntype OptionsState = {\n  [serviceName: string]: {\n    [spanName: string]: {\n      [traceId: string]: string;\n    };\n  };\n};\n\n// Exported for tests\nexport function useLoadOptions(datasource: ZipkinDatasource) {\n  const isMounted = useMountedState();\n  const [allOptions, setAllOptions] = useState({} as OptionsState);\n\n  const [, fetchSpans] = useAsyncFn(\n    async function findSpans(service: string): Promise<void> {\n      const url = `${apiPrefix}/spans`;\n      try {\n        // The response of this should have been full ZipkinSpan objects based on API docs but is just list\n        // of span names.\n        // TODO: check if this is some issue of version used or something else\n        const response: string[] = await datasource.metadataRequest(url, { serviceName: service });\n        if (isMounted()) {\n          setAllOptions((state) => {\n            const spanOptions = fromPairs(response.map((span: string) => [span, undefined]));\n            return {\n              ...state,\n              [service]: spanOptions as any,\n            };\n          });\n        }\n      } catch (error) {\n        const errorToShow = error instanceof Error ? error : 'An unknown error occurred';\n        dispatch(notifyApp(createErrorNotification('Failed to load spans from Zipkin', errorToShow)));\n        throw error;\n      }\n    },\n    [datasource, allOptions]\n  );\n\n  const [, fetchTraces] = useAsyncFn(\n    async function findTraces(serviceName: string, spanName: string): Promise<void> {\n      const url = `${apiPrefix}/traces`;\n      const search = {\n        serviceName,\n        spanName,\n        // See other params and default here https://zipkin.io/zipkin-api/#/default/get_traces\n      };\n      try {\n        // This should return just root traces as there isn't any nesting\n        const traces: ZipkinSpan[][] = await datasource.metadataRequest(url, search);\n        if (isMounted()) {\n          const newTraces = traces.length\n            ? fromPairs(\n                traces.map((trace) => {\n                  const rootSpan = trace.find((span) => !span.parentId)!;\n\n                  return [`${rootSpan.name} [${Math.floor(rootSpan.duration / 1000)} ms]`, rootSpan.traceId];\n                })\n              )\n            : noTracesOptions;\n\n          setAllOptions((state) => {\n            const spans = state[serviceName];\n            return {\n              ...state,\n              [serviceName]: {\n                ...spans,\n                [spanName]: newTraces,\n              },\n            };\n          });\n        }\n      } catch (error) {\n        const errorToShow = error instanceof Error ? error : 'An unknown error occurred';\n        dispatch(notifyApp(createErrorNotification('Failed to load spans from Zipkin', errorToShow)));\n        throw error;\n      }\n    },\n    [datasource]\n  );\n\n  const onLoadOptions = useCallback(\n    (selectedOptions: CascaderOption[]) => {\n      const service = selectedOptions[0].value;\n      if (selectedOptions.length === 1) {\n        fetchSpans(service);\n      } else if (selectedOptions.length === 2) {\n        const spanName = selectedOptions[1].value;\n        fetchTraces(service, spanName);\n      }\n    },\n    [fetchSpans, fetchTraces]\n  );\n\n  return {\n    onLoadOptions,\n    allOptions,\n  };\n}\n\nfunction useMapToCascaderOptions(services: AsyncState<CascaderOption[]>, allOptions: OptionsState) {\n  return useMemo(() => {\n    let cascaderOptions: CascaderOption[] = [];\n\n    if (services.value && services.value.length) {\n      cascaderOptions = services.value.map((services) => {\n        return {\n          ...services,\n          children:\n            allOptions[services.value] &&\n            Object.keys(allOptions[services.value]).map((spanName) => {\n              return {\n                label: spanName,\n                value: spanName,\n                isLeaf: false,\n                children:\n                  allOptions[services.value][spanName] &&\n                  Object.keys(allOptions[services.value][spanName]).map((traceName) => {\n                    return {\n                      label: traceName,\n                      value: allOptions[services.value][spanName][traceName],\n                    };\n                  }),\n              };\n            }),\n        };\n      });\n    } else if (services.value && !services.value.length) {\n      cascaderOptions = noTracesFoundOptions;\n    }\n\n    return cascaderOptions;\n  }, [services, allOptions]);\n}\n\nconst NO_TRACES_KEY = '__NO_TRACES__';\nconst noTracesFoundOptions = [\n  {\n    label: 'No traces found',\n    value: 'no_traces',\n    isLeaf: true,\n\n    // Cannot be disabled because then cascader shows 'loading' for some reason.\n    // disabled: true,\n  },\n];\n\nconst noTracesOptions = {\n  '[No traces in time range]': NO_TRACES_KEY,\n};\n","import { DataFrame, NodeGraphDataFrameFieldNames as Fields } from '@grafana/data';\n\nimport { getNonOverlappingDuration, getStats, makeFrames, makeSpanMap } from '../../../../core/utils/tracing';\nimport { ZipkinSpan } from '../types';\n\ninterface Node {\n  [Fields.id]: string;\n  [Fields.title]: string;\n  [Fields.subTitle]: string;\n  [Fields.mainStat]: string;\n  [Fields.secondaryStat]: string;\n  [Fields.color]: number;\n}\n\ninterface Edge {\n  [Fields.id]: string;\n  [Fields.target]: string;\n  [Fields.source]: string;\n}\n\nexport function createGraphFrames(data: ZipkinSpan[]): DataFrame[] {\n  const { nodes, edges } = convertTraceToGraph(data);\n  const [nodesFrame, edgesFrame] = makeFrames();\n\n  for (const node of nodes) {\n    nodesFrame.add(node);\n  }\n\n  for (const edge of edges) {\n    edgesFrame.add(edge);\n  }\n\n  return [nodesFrame, edgesFrame];\n}\n\nfunction convertTraceToGraph(spans: ZipkinSpan[]): { nodes: Node[]; edges: Edge[] } {\n  const nodes: Node[] = [];\n  const edges: Edge[] = [];\n\n  const traceDuration = findTraceDuration(spans);\n  const spanMap = makeSpanMap((index) => {\n    if (index >= spans.length) {\n      return undefined;\n    }\n    return {\n      span: spans[index],\n      id: spans[index].id,\n      parentIds: spans[index].parentId ? [spans[index].parentId!] : [],\n    };\n  });\n\n  for (const span of spans) {\n    const ranges: Array<[number, number]> = spanMap[span.id].children.map((c) => {\n      const span = spanMap[c].span;\n      return [span.timestamp, span.timestamp + span.duration];\n    });\n    const childrenDuration = getNonOverlappingDuration(ranges);\n    const selfDuration = span.duration - childrenDuration;\n    const stats = getStats(span.duration / 1000, traceDuration / 1000, selfDuration / 1000);\n\n    nodes.push({\n      [Fields.id]: span.id,\n      [Fields.title]: span.localEndpoint?.serviceName || span.remoteEndpoint?.serviceName || 'unknown',\n      [Fields.subTitle]: span.name,\n      [Fields.mainStat]: stats.main,\n      [Fields.secondaryStat]: stats.secondary,\n      [Fields.color]: selfDuration / traceDuration,\n    });\n\n    if (span.parentId && spanMap[span.parentId].span) {\n      edges.push({\n        [Fields.id]: span.parentId + '--' + span.id,\n        [Fields.target]: span.id,\n        [Fields.source]: span.parentId,\n      });\n    }\n  }\n\n  return { nodes, edges };\n}\n\n/**\n * Get the duration of the whole trace as it isn't a part of the response data.\n * Note: Seems like this should be the same as just longest span, but this is probably safer.\n */\nfunction findTraceDuration(spans: ZipkinSpan[]): number {\n  let traceEndTime = 0;\n  let traceStartTime = Infinity;\n\n  for (const span of spans) {\n    if (span.timestamp < traceStartTime) {\n      traceStartTime = span.timestamp;\n    }\n\n    if (span.timestamp + span.duration > traceEndTime) {\n      traceEndTime = span.timestamp + span.duration;\n    }\n  }\n  return traceEndTime - traceStartTime;\n}\n","import { lastValueFrom, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport {\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  DataSourceJsonData,\n  FieldType,\n  MutableDataFrame,\n  ScopedVars,\n} from '@grafana/data';\nimport { BackendSrvRequest, FetchResponse, getBackendSrv, getTemplateSrv, TemplateSrv } from '@grafana/runtime';\nimport { NodeGraphOptions } from 'app/core/components/NodeGraphSettings';\nimport { SpanBarOptions } from 'app/features/explore/TraceView/components';\n\nimport { serializeParams } from '../../../core/utils/fetch';\n\nimport { apiPrefix } from './constants';\nimport { ZipkinQuery, ZipkinSpan } from './types';\nimport { createGraphFrames } from './utils/graphTransform';\nimport { transformResponse } from './utils/transforms';\n\nexport interface ZipkinJsonData extends DataSourceJsonData {\n  nodeGraph?: NodeGraphOptions;\n}\n\nexport class ZipkinDatasource extends DataSourceApi<ZipkinQuery, ZipkinJsonData> {\n  uploadedJson: string | ArrayBuffer | null = null;\n  nodeGraph?: NodeGraphOptions;\n  spanBar?: SpanBarOptions;\n  constructor(\n    private instanceSettings: DataSourceInstanceSettings<ZipkinJsonData>,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv()\n  ) {\n    super(instanceSettings);\n    this.nodeGraph = instanceSettings.jsonData.nodeGraph;\n  }\n\n  query(options: DataQueryRequest<ZipkinQuery>): Observable<DataQueryResponse> {\n    const target = options.targets[0];\n    if (target.queryType === 'upload') {\n      if (!this.uploadedJson) {\n        return of({ data: [] });\n      }\n\n      try {\n        const traceData = JSON.parse(this.uploadedJson as string);\n        return of(responseToDataQueryResponse({ data: traceData }, this.nodeGraph?.enabled));\n      } catch (error) {\n        return of({ error: { message: 'JSON is not valid Zipkin format' }, data: [] });\n      }\n    }\n\n    if (target.query) {\n      const query = this.applyVariables(target, options.scopedVars);\n      return this.request<ZipkinSpan[]>(`${apiPrefix}/trace/${encodeURIComponent(query.query)}`).pipe(\n        map((res) => responseToDataQueryResponse(res, this.nodeGraph?.enabled))\n      );\n    }\n    return of(emptyDataQueryResponse);\n  }\n\n  async metadataRequest(url: string, params?: Record<string, any>): Promise<any> {\n    const res = await lastValueFrom(this.request(url, params, { hideFromInspector: true }));\n    return res.data;\n  }\n\n  async testDatasource(): Promise<{ status: string; message: string }> {\n    await this.metadataRequest(`${apiPrefix}/services`);\n    return { status: 'success', message: 'Data source is working' };\n  }\n\n  getQueryDisplayText(query: ZipkinQuery): string {\n    return query.query;\n  }\n\n  interpolateVariablesInQueries(queries: ZipkinQuery[], scopedVars: ScopedVars): ZipkinQuery[] {\n    if (!queries || queries.length === 0) {\n      return [];\n    }\n\n    return queries.map((query) => {\n      return {\n        ...query,\n        datasource: this.getRef(),\n        ...this.applyVariables(query, scopedVars),\n      };\n    });\n  }\n\n  applyVariables(query: ZipkinQuery, scopedVars: ScopedVars) {\n    const expandedQuery = { ...query };\n\n    return {\n      ...expandedQuery,\n      query: this.templateSrv.replace(query.query ?? '', scopedVars),\n    };\n  }\n\n  private request<T = any>(\n    apiUrl: string,\n    data?: any,\n    options?: Partial<BackendSrvRequest>\n  ): Observable<FetchResponse<T>> {\n    const params = data ? serializeParams(data) : '';\n    const url = `${this.instanceSettings.url}${apiUrl}${params.length ? `?${params}` : ''}`;\n    const req = {\n      ...options,\n      url,\n    };\n\n    return getBackendSrv().fetch<T>(req);\n  }\n}\n\nfunction responseToDataQueryResponse(response: { data: ZipkinSpan[] }, nodeGraph = false): DataQueryResponse {\n  let data = response?.data ? [transformResponse(response?.data)] : [];\n  if (nodeGraph) {\n    data.push(...createGraphFrames(response?.data));\n  }\n  return {\n    data,\n  };\n}\n\nconst emptyDataQueryResponse = {\n  data: [\n    new MutableDataFrame({\n      fields: [\n        {\n          name: 'trace',\n          type: FieldType.trace,\n          values: [],\n        },\n      ],\n      meta: {\n        preferredVisualisationType: 'trace',\n        custom: {\n          traceFormat: 'zipkin',\n        },\n      },\n    }),\n  ],\n};\n","import { DataSourcePlugin } from '@grafana/data';\n\nimport { ConfigEditor } from './ConfigEditor';\nimport { ZipkinQueryField } from './QueryField';\nimport { ZipkinDatasource } from './datasource';\n\nexport const plugin = new DataSourcePlugin(ZipkinDatasource)\n  .setQueryEditor(ZipkinQueryField)\n  .setConfigEditor(ConfigEditor);\n","import { identity } from 'lodash';\n\nimport { DataFrame, FieldType, MutableDataFrame, TraceKeyValuePair, TraceLog, TraceSpanRow } from '@grafana/data';\n\nimport { ZipkinAnnotation, ZipkinEndpoint, ZipkinSpan } from '../types';\n\n/**\n * Transforms response to Grafana trace data frame.\n */\nexport function transformResponse(zSpans: ZipkinSpan[]): DataFrame {\n  const spanRows = zSpans.map(transformSpan);\n  const frame = new MutableDataFrame({\n    fields: [\n      { name: 'traceID', type: FieldType.string },\n      { name: 'spanID', type: FieldType.string },\n      { name: 'parentSpanID', type: FieldType.string },\n      { name: 'operationName', type: FieldType.string },\n      { name: 'serviceName', type: FieldType.string },\n      { name: 'serviceTags', type: FieldType.other },\n      { name: 'startTime', type: FieldType.number },\n      { name: 'duration', type: FieldType.number },\n      { name: 'logs', type: FieldType.other },\n      { name: 'tags', type: FieldType.other },\n    ],\n    meta: {\n      preferredVisualisationType: 'trace',\n      custom: {\n        traceFormat: 'zipkin',\n      },\n    },\n  });\n\n  for (const span of spanRows) {\n    frame.add(span);\n  }\n\n  return frame;\n}\n\nfunction transformSpan(span: ZipkinSpan): TraceSpanRow {\n  const row = {\n    traceID: span.traceId,\n    spanID: span.id,\n    parentSpanID: span.parentId,\n    operationName: span.name,\n    serviceName: span.localEndpoint?.serviceName || span.remoteEndpoint?.serviceName || 'unknown',\n    serviceTags: serviceTags(span),\n    startTime: span.timestamp / 1000,\n    duration: span.duration / 1000,\n    logs: span.annotations?.map(transformAnnotation) ?? [],\n    tags: Object.keys(span.tags || {}).reduce<TraceKeyValuePair[]>((acc, key) => {\n      // If tag is error we remap it to simple boolean so that the trace ui will show an error icon.\n      if (key === 'error') {\n        acc.push({\n          key: 'error',\n          value: true,\n        });\n\n        acc.push({\n          key: 'errorValue',\n          value: span.tags!['error'],\n        });\n        return acc;\n      }\n      acc.push({ key, value: span.tags![key] });\n      return acc;\n    }, []),\n  };\n\n  if (span.kind) {\n    row.tags = [\n      {\n        key: 'kind',\n        value: span.kind,\n      },\n      ...(row.tags ?? []),\n    ];\n  }\n\n  if (span.shared) {\n    row.tags = [\n      {\n        key: 'shared',\n        value: span.shared,\n      },\n      ...(row.tags ?? []),\n    ];\n  }\n\n  return row;\n}\n\n/**\n * Maps annotations as a log as that seems to be the closest thing.\n * See https://zipkin.io/zipkin-api/#/default/get_trace__traceId_\n */\nfunction transformAnnotation(annotation: ZipkinAnnotation): TraceLog {\n  return {\n    timestamp: annotation.timestamp,\n    fields: [\n      {\n        key: 'annotation',\n        value: annotation.value,\n      },\n    ],\n  };\n}\n\nfunction serviceTags(span: ZipkinSpan): TraceKeyValuePair[] {\n  const endpoint = span.localEndpoint || span.remoteEndpoint;\n  if (!endpoint) {\n    return [];\n  }\n  return [\n    valueToTag('ipv4', endpoint.ipv4),\n    valueToTag('ipv6', endpoint.ipv6),\n    valueToTag('port', endpoint.port),\n    valueToTag('endpointType', span.localEndpoint ? 'local' : 'remote'),\n  ].filter(identity) as TraceKeyValuePair[];\n}\n\nfunction valueToTag<T>(key: string, value: T): TraceKeyValuePair<T> | undefined {\n  if (!value) {\n    return undefined;\n  }\n  return {\n    key,\n    value,\n  };\n}\n\n/**\n * Transforms data frame to Zipkin response\n */\nexport const transformToZipkin = (data: MutableDataFrame): ZipkinSpan[] => {\n  let response: ZipkinSpan[] = [];\n\n  for (let i = 0; i < data.length; i++) {\n    const span = data.get(i);\n    response.push({\n      traceId: span.traceID,\n      parentId: span.parentSpanID,\n      name: span.operationName,\n      id: span.spanID,\n      timestamp: span.startTime * 1000,\n      duration: span.duration * 1000,\n      ...getEndpoint(span),\n      annotations: span.logs.length\n        ? span.logs.map((l: TraceLog) => ({ timestamp: l.timestamp, value: l.fields[0].value }))\n        : undefined,\n      tags: span.tags.length\n        ? span.tags\n            .filter((t: TraceKeyValuePair) => t.key !== 'kind' && t.key !== 'endpointType' && t.key !== 'shared')\n            .reduce((tags: { [key: string]: string }, t: TraceKeyValuePair) => {\n              if (t.key === 'error') {\n                return {\n                  ...tags,\n                  [t.key]: span.tags.find((t: TraceKeyValuePair) => t.key === 'errorValue').value || '',\n                };\n              }\n              return { ...tags, [t.key]: t.value };\n            }, {})\n        : undefined,\n      kind: span.tags.find((t: TraceKeyValuePair) => t.key === 'kind')?.value,\n      shared: span.tags.find((t: TraceKeyValuePair) => t.key === 'shared')?.value,\n    });\n  }\n\n  return response;\n};\n\n// Returns remote or local endpoint object\nconst getEndpoint = (span: any): { [key: string]: ZipkinEndpoint } | undefined => {\n  const key =\n    span.serviceTags.find((t: TraceKeyValuePair) => t.key === 'endpointType')?.value === 'local'\n      ? 'localEndpoint'\n      : 'remoteEndpoint';\n  return span.serviceName !== 'unknown'\n    ? {\n        [key]: {\n          serviceName: span.serviceName,\n          ipv4: span.serviceTags.find((t: TraceKeyValuePair) => t.key === 'ipv4')?.value,\n          ipv6: span.serviceTags.find((t: TraceKeyValuePair) => t.key === 'ipv6')?.value,\n          port: span.serviceTags.find((t: TraceKeyValuePair) => t.key === 'port')?.value,\n        },\n      }\n    : undefined;\n};\n","import useEffectOnce from './useEffectOnce';\nvar useMount = function (fn) {\n    useEffectOnce(function () {\n        fn();\n    });\n};\nexport default useMount;\n"],"names":["NodeGraphSettings","options","onOptionsChange","styles","event","TraceToMetricsSettings","getStyles","ds","v","query","i","e","newQueries","theme","getNonOverlappingDuration","ranges","a","b","acc","range","tail","prevStart","prevEnd","start","end","makeSpanMap","getSpan","spanMap","span","index","parentId","getStats","duration","traceDuration","selfDuration","toFixedNoTrailingZeros","n","makeFrames","nodesFrame","edgesFrame","ConfigEditor","DataSourceHttpSettings","config","SecureSocksProxySettings","TraceToLogsSettings","apiPrefix","ZipkinQueryField","onChange","onRunQuery","datasource","serviceOptions","useServices","onLoadOptions","allOptions","useLoadOptions","onSelectTrace","values","selectedOptions","traceID","onChangeQuery","value","nextQuery","cascaderOptions","useMapToCascaderOptions","InlineFieldRow","InlineField","RadioButtonGroup","FileDropzone","result","ButtonCascader","QueryField","url","servicesOptions","fetch","useAsyncFn","services","service","error","errorToShow","useMount","isMounted","useMountedState","setAllOptions","fetchSpans","response","state","spanOptions","fetchTraces","serviceName","spanName","search","traces","newTraces","trace","rootSpan","noTracesOptions","spans","traceName","noTracesFoundOptions","NO_TRACES_KEY","createGraphFrames","data","nodes","edges","convertTraceToGraph","node","edge","findTraceDuration","c","childrenDuration","stats","traceEndTime","traceStartTime","ZipkinDatasource","instanceSettings","templateSrv","target","of","traceData","responseToDataQueryResponse","map","res","emptyDataQueryResponse","params","lastValueFrom","queries","scopedVars","apiUrl","req","nodeGraph","MutableDataFrame","transformResponse","zSpans","spanRows","transformSpan","frame","row","serviceTags","transformAnnotation","key","annotation","endpoint","valueToTag","transformToZipkin","getEndpoint","l","t","tags","fn"],"sourceRoot":""}