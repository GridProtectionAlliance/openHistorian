{"version":3,"sources":["webpack:///./public/app/features/admin/state/apis.ts","webpack:///./public/app/features/admin/ServerStats.tsx"],"names":["getServerStats","getBackendSrv","get","res","name","value","users","admins","editors","viewers","activeUsers","activeAdmins","activeEditors","activeViewers","activeSessions","dashboards","orgs","playlists","snapshots","tags","stars","alerts","console","error","ServerStats","state","stats","isLoading","this","props","setState","navModel","Contents","className","map","StatItem","PureComponent","stat","key","hot","module","connect","getNavModel","navIndex"],"mappings":"uQAOO,IAAMA,EAAc,e,EAAA,G,EAAA,yBAAG,4HAERC,0BAAgBC,IAAI,mBAFZ,cAEpBC,EAFoB,yBAGnB,CACL,CAAEC,KAAM,cAAeC,MAAOF,EAAIG,OAClC,CAAEF,KAAM,eAAgBC,MAAOF,EAAII,QACnC,CAAEH,KAAM,gBAAiBC,MAAOF,EAAIK,SACpC,CAAEJ,KAAM,gBAAiBC,MAAOF,EAAIM,SACpC,CAAEL,KAAM,mCAAoCC,MAAOF,EAAIO,aACvD,CAAEN,KAAM,oCAAqCC,MAAOF,EAAIQ,cACxD,CAAEP,KAAM,qCAAsCC,MAAOF,EAAIS,eACzD,CAAER,KAAM,qCAAsCC,MAAOF,EAAIU,eACzD,CAAET,KAAM,kBAAmBC,MAAOF,EAAIW,gBACtC,CAAEV,KAAM,mBAAoBC,MAAOF,EAAIY,YACvC,CAAEX,KAAM,aAAcC,MAAOF,EAAIa,MACjC,CAAEZ,KAAM,kBAAmBC,MAAOF,EAAIc,WACtC,CAAEb,KAAM,kBAAmBC,MAAOF,EAAIe,WACtC,CAAEd,KAAM,uBAAwBC,MAAOF,EAAIgB,MAC3C,CAAEf,KAAM,2BAA4BC,MAAOF,EAAIiB,OAC/C,CAAEhB,KAAM,eAAgBC,MAAOF,EAAIkB,UAnBX,sCAsB1BC,QAAQC,MAAR,MAtB0B,6D,+KAAH,sD,orCCYpB,IAAMC,EAAb,6KACEC,MAAe,CACbC,MAAO,GACPC,WAAW,GAHf,E,YAAA,S,kOAAA,M,EAAA,G,EAAA,iC,EAAA,qJAQ0BC,KAAKC,MAAM7B,iBARrC,OAQY0B,EARZ,OASME,KAAKE,SAAS,CAAEJ,QAAOC,WAAW,IATxC,gDAWML,QAAQC,MAAR,MAXN,0D,8KAAA,4EAeW,IACCQ,EAAaH,KAAKC,MAAlBE,SADD,EAEsBH,KAAKH,MAA1BC,EAFD,EAECA,MAAOC,EAFR,EAEQA,UAEf,OACE,kBAAC,IAAD,CAAMI,SAAUA,GACd,kBAAC,IAAKC,SAAN,CAAeL,UAAWA,GACxB,2BAAOM,UAAU,4BACf,+BACE,4BACE,oCACA,uCAGJ,+BAAQP,EAAMQ,IAAIC,Y,2BA7B9B,GAAiCC,iBAqCjC,SAASD,EAASE,GAChB,OACE,wBAAIC,IAAKD,EAAKjC,MACZ,4BAAKiC,EAAKjC,MACV,4BAAKiC,EAAKhC,QAUDkC,wBAAIC,EAAJD,CAAYE,mBALH,SAAChB,GAAD,MAAwB,CAC9CM,SAAUW,YAAYjB,EAAMkB,SAAU,gBACtC3C,eAAgBA,OAGSyC,CAAyBjB,K","file":"ServerStats.591ee81e63053ad31983.js","sourcesContent":["import { getBackendSrv } from '@grafana/runtime';\n\nexport interface ServerStat {\n  name: string;\n  value: number;\n}\n\nexport const getServerStats = async (): Promise<ServerStat[]> => {\n  try {\n    const res = await getBackendSrv().get('api/admin/stats');\n    return [\n      { name: 'Total users', value: res.users },\n      { name: 'Total admins', value: res.admins },\n      { name: 'Total editors', value: res.editors },\n      { name: 'Total viewers', value: res.viewers },\n      { name: 'Active users (seen last 30 days)', value: res.activeUsers },\n      { name: 'Active admins (seen last 30 days)', value: res.activeAdmins },\n      { name: 'Active editors (seen last 30 days)', value: res.activeEditors },\n      { name: 'Active viewers (seen last 30 days)', value: res.activeViewers },\n      { name: 'Active sessions', value: res.activeSessions },\n      { name: 'Total dashboards', value: res.dashboards },\n      { name: 'Total orgs', value: res.orgs },\n      { name: 'Total playlists', value: res.playlists },\n      { name: 'Total snapshots', value: res.snapshots },\n      { name: 'Total dashboard tags', value: res.tags },\n      { name: 'Total starred dashboards', value: res.stars },\n      { name: 'Total alerts', value: res.alerts },\n    ];\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n","import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport { StoreState } from 'app/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { getServerStats, ServerStat } from './state/apis';\nimport Page from 'app/core/components/Page/Page';\nimport { NavModel } from '@grafana/data';\n\ninterface Props {\n  navModel: NavModel;\n  getServerStats: () => Promise<ServerStat[]>;\n}\n\ninterface State {\n  stats: ServerStat[];\n  isLoading: boolean;\n}\n\nexport class ServerStats extends PureComponent<Props, State> {\n  state: State = {\n    stats: [],\n    isLoading: true,\n  };\n\n  async componentDidMount() {\n    try {\n      const stats = await this.props.getServerStats();\n      this.setState({ stats, isLoading: false });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  render() {\n    const { navModel } = this.props;\n    const { stats, isLoading } = this.state;\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={isLoading}>\n          <table className=\"filter-table form-inline\">\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Value</th>\n              </tr>\n            </thead>\n            <tbody>{stats.map(StatItem)}</tbody>\n          </table>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nfunction StatItem(stat: ServerStat) {\n  return (\n    <tr key={stat.name}>\n      <td>{stat.name}</td>\n      <td>{stat.value}</td>\n    </tr>\n  );\n}\n\nconst mapStateToProps = (state: StoreState) => ({\n  navModel: getNavModel(state.navIndex, 'server-stats'),\n  getServerStats: getServerStats,\n});\n\nexport default hot(module)(connect(mapStateToProps)(ServerStats));\n"],"sourceRoot":""}