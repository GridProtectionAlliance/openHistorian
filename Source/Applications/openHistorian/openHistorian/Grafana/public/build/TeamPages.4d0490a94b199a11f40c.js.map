{"version":3,"sources":["webpack:///./public/app/features/teams/state/selectors.ts","webpack:///./public/app/core/components/FilterInput/FilterInput.tsx","webpack:///./public/app/features/teams/TeamSettings.tsx","webpack:///./public/app/features/teams/TeamGroupSync.tsx","webpack:///./public/app/core/components/WithFeatureToggle.tsx","webpack:///./public/app/features/teams/TeamMemberRow.tsx","webpack:///./public/app/features/teams/TeamMembers.tsx","webpack:///./public/app/features/teams/state/actions.ts","webpack:///./public/app/features/teams/TeamPages.tsx","webpack:///./public/app/features/teams/state/navModel.ts"],"names":["__webpack_require__","d","__webpack_exports__","getSearchQuery","getSearchMemberQuery","getTeamGroups","getTeamsCount","getTeam","getTeams","getTeamMembers","isSignedInUserTeamAdmin","isPermissionTeamAdmin","app_types__WEBPACK_IMPORTED_MODULE_0__","state","searchQuery","searchMemberQuery","groups","teams","length","currentTeamId","team","id","parseInt","regex","RegExp","filter","test","name","members","member","login","email","config","signedInUser","editorsCanAdmin","userInMembers","find","m","userId","permission","Member","isAdmin","isGrafanaAdmin","orgRole","Admin","userIsTeamAdmin","FilterInput","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_grafana_data__WEBPACK_IMPORTED_MODULE_1__","Object","props","ref","a","createElement","className","labelClassName","type","inputClassName","value","onChange","event","target","placeholder","TeamSettings","_super","_this","call","this","onChangeName","setState","onChangeEmail","onUpdate","_a","preventDefault","updateTeam","tslib__WEBPACK_IMPORTED_MODULE_0__","prototype","render","react__WEBPACK_IMPORTED_MODULE_1___default","onSubmit","_grafana_ui__WEBPACK_IMPORTED_MODULE_3__","required","tooltip","app_core_components_SharedPreferences_SharedPreferences__WEBPACK_IMPORTED_MODULE_4__","resourceUri","Component","mapDispatchToProps","_state_actions__WEBPACK_IMPORTED_MODULE_5__","react_redux__WEBPACK_IMPORTED_MODULE_2__","teamId","app_core_selectors_location__WEBPACK_IMPORTED_MODULE_6__","location","_state_selectors__WEBPACK_IMPORTED_MODULE_7__","headerTooltip","TeamGroupSync","onToggleAdding","isAdding","onNewGroupIdChanged","newGroupId","onAddGroup","addTeamGroup","onRemoveGroup","group","removeTeamGroup","groupId","componentDidMount","fetchTeamGroups","loadTeamGroups","sent","isNewGroupValid","renderGroup","key","style","width","onClick","_grafana_ui__WEBPACK_IMPORTED_MODULE_4__","placement","content","app_core_components_Animations_SlideDown__WEBPACK_IMPORTED_MODULE_3__","in","disabled","app_core_components_EmptyListCTA_EmptyListCTA__WEBPACK_IMPORTED_MODULE_7__","buttonIcon","title","buttonTitle","proTip","proTipLinkTitle","proTipLink","proTipTarget","map","react__WEBPACK_IMPORTED_MODULE_1__","_state_selectors__WEBPACK_IMPORTED_MODULE_6__","WithFeatureToggle","featureToggle","children","react_default","Fragment","TeamMemberRow_TeamMemberRow","TeamMemberRow","onPermissionChange","item","updatedTeamMember","tslib_es6","updateTeamMember","renderLabels","bind","renderPermissions","onRemoveMember","removeTeamMember","signedInUserIsTeamAdmin","types","dp","src","isSearchable","options","label","labels","TagBadge","removeIcon","count","syncEnabled","avatarUrl","size","onConfirm","react","actions","teams_TeamMemberRow","es","TeamMembers_TeamMembers","TeamMembers","onSearchQueryChange","setSearchMemberQuery","onUserSelected","user","newTeamMember","onAddUserToTeam","addTeamMember","isTeamAdmin","selectors","SlideDown","UserPicker","onSelected","TeamMembers_mapDispatchToProps","reducers","context_srv","loadTeams","dispatch","_grafana_runtime__WEBPACK_IMPORTED_MODULE_1__","get","perpage","page","response","_reducers__WEBPACK_IMPORTED_MODULE_4__","loadTeam","app_core_actions__WEBPACK_IMPORTED_MODULE_2__","_navModel__WEBPACK_IMPORTED_MODULE_3__","loadTeamMembers","getStore","post","delete","put","encodeURIComponent","deleteTeam","PageTypes","TeamPages","textsAreEqual","text1","text2","toLocaleLowerCase","hideTabsFromNonTeamAdmin","navModel","main","navItem","text","Members","hideFromTabs","isLoading","isSyncEnabled","app_core_config__WEBPACK_IMPORTED_MODULE_5__","licenseInfo","hasLicense","fetchTeam","_b","getCurrentPage","pages","currentPage","pageName","lodash__WEBPACK_IMPORTED_MODULE_3___default","includes","renderPage","_TeamMembers__WEBPACK_IMPORTED_MODULE_7__","Settings","_TeamSettings__WEBPACK_IMPORTED_MODULE_8__","GroupSync","_TeamGroupSync__WEBPACK_IMPORTED_MODULE_9__","_state_selectors__WEBPACK_IMPORTED_MODULE_11__","app_core_components_Page_Page__WEBPACK_IMPORTED_MODULE_6__","Contents","keys","_state_actions__WEBPACK_IMPORTED_MODULE_10__","react_hot_loader__WEBPACK_IMPORTED_MODULE_4__","module","_core_selectors_location__WEBPACK_IMPORTED_MODULE_14__","teamLoadingNav","_state_navModel__WEBPACK_IMPORTED_MODULE_12__","app_core_selectors_navModel__WEBPACK_IMPORTED_MODULE_13__","navIndex","app_core_services_context_srv__WEBPACK_IMPORTED_MODULE_15__","buildNavModel","img","subTitle","url","breadcrumbs","active","icon","app_core_config__WEBPACK_IMPORTED_MODULE_2__","push","getTeamLoadingNav","node","memberCount","app_types__WEBPACK_IMPORTED_MODULE_1__","_c","next","done","child","indexOf"],"mappings":"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","file":"TeamPages.4d0490a94b199a11f40c.js","sourcesContent":["import { Team, TeamsState, TeamState, TeamMember, OrgRole, TeamPermissionLevel } from 'app/types';\nimport { User } from 'app/core/services/context_srv';\n\nexport const getSearchQuery = (state: TeamsState) => state.searchQuery;\nexport const getSearchMemberQuery = (state: TeamState) => state.searchMemberQuery;\nexport const getTeamGroups = (state: TeamState) => state.groups;\nexport const getTeamsCount = (state: TeamsState) => state.teams.length;\n\nexport const getTeam = (state: TeamState, currentTeamId: any): Team | null => {\n  if (state.team.id === parseInt(currentTeamId, 10)) {\n    return state.team;\n  }\n\n  return null;\n};\n\nexport const getTeams = (state: TeamsState) => {\n  const regex = RegExp(state.searchQuery, 'i');\n\n  return state.teams.filter(team => {\n    return regex.test(team.name);\n  });\n};\n\nexport const getTeamMembers = (state: TeamState) => {\n  const regex = RegExp(state.searchMemberQuery, 'i');\n\n  return state.members.filter(member => {\n    return regex.test(member.login) || regex.test(member.email) || regex.test(member.name);\n  });\n};\n\nexport interface Config {\n  members: TeamMember[];\n  editorsCanAdmin: boolean;\n  signedInUser: User;\n}\n\nexport const isSignedInUserTeamAdmin = (config: Config): boolean => {\n  const { members, signedInUser, editorsCanAdmin } = config;\n  const userInMembers = members.find(m => m.userId === signedInUser.id);\n  const permission = userInMembers ? userInMembers.permission : TeamPermissionLevel.Member;\n\n  return isPermissionTeamAdmin({ permission, signedInUser, editorsCanAdmin });\n};\n\nexport interface PermissionConfig {\n  permission: TeamPermissionLevel;\n  editorsCanAdmin: boolean;\n  signedInUser: User;\n}\n\nexport const isPermissionTeamAdmin = (config: PermissionConfig): boolean => {\n  const { permission, signedInUser, editorsCanAdmin } = config;\n  const isAdmin = signedInUser.isGrafanaAdmin || signedInUser.orgRole === OrgRole.Admin;\n  const userIsTeamAdmin = permission === TeamPermissionLevel.Admin;\n  const isSignedInUserTeamAdmin = isAdmin || userIsTeamAdmin;\n\n  return isSignedInUserTeamAdmin || !editorsCanAdmin;\n};\n","import React, { forwardRef } from 'react';\nimport { escapeStringForRegex, unEscapeStringFromRegex } from '@grafana/data';\n\nexport interface Props {\n  value: string | undefined;\n  placeholder?: string;\n  labelClassName?: string;\n  inputClassName?: string;\n  onChange: (value: string) => void;\n}\n\nexport const FilterInput = forwardRef<HTMLInputElement, Props>((props, ref) => (\n  <label className={props.labelClassName}>\n    <input\n      ref={ref}\n      type=\"text\"\n      className={props.inputClassName}\n      value={unEscapeStringFromRegex(props.value)}\n      onChange={event => props.onChange(escapeStringForRegex(event.target.value))}\n      placeholder={props.placeholder ? props.placeholder : null}\n    />\n    <i className=\"gf-form-input-icon fa fa-search\" />\n  </label>\n));\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { FormLabel, Input } from '@grafana/ui';\n\nimport { SharedPreferences } from 'app/core/components/SharedPreferences/SharedPreferences';\nimport { updateTeam } from './state/actions';\nimport { getRouteParamsId } from 'app/core/selectors/location';\nimport { getTeam } from './state/selectors';\nimport { Team } from 'app/types';\n\nexport interface Props {\n  team: Team;\n  updateTeam: typeof updateTeam;\n}\n\ninterface State {\n  name: string;\n  email: string;\n}\n\nexport class TeamSettings extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      name: props.team.name,\n      email: props.team.email,\n    };\n  }\n\n  onChangeName = (event: any) => {\n    this.setState({ name: event.target.value });\n  };\n\n  onChangeEmail = (event: any) => {\n    this.setState({ email: event.target.value });\n  };\n\n  onUpdate = (event: any) => {\n    const { name, email } = this.state;\n    event.preventDefault();\n    this.props.updateTeam(name, email);\n  };\n\n  render() {\n    const { team } = this.props;\n    const { name, email } = this.state;\n\n    return (\n      <div>\n        <h3 className=\"page-sub-heading\">Team Settings</h3>\n        <form name=\"teamDetailsForm\" className=\"gf-form-group\" onSubmit={this.onUpdate}>\n          <div className=\"gf-form max-width-30\">\n            <FormLabel>Name</FormLabel>\n            <Input\n              type=\"text\"\n              required\n              value={name}\n              className=\"gf-form-input max-width-22\"\n              onChange={this.onChangeName}\n            />\n          </div>\n\n          <div className=\"gf-form max-width-30\">\n            <FormLabel tooltip=\"This is optional and is primarily used to set the team profile avatar (via gravatar service)\">\n              Email\n            </FormLabel>\n            <Input\n              type=\"email\"\n              className=\"gf-form-input max-width-22\"\n              value={email}\n              placeholder=\"team@email.com\"\n              onChange={this.onChangeEmail}\n            />\n          </div>\n\n          <div className=\"gf-form-button-row\">\n            <button type=\"submit\" className=\"btn btn-primary\">\n              Update\n            </button>\n          </div>\n        </form>\n        <SharedPreferences resourceUri={`teams/${team.id}`} />\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state: any) {\n  const teamId = getRouteParamsId(state.location);\n\n  return {\n    team: getTeam(state.team, teamId),\n  };\n}\n\nconst mapDispatchToProps = {\n  updateTeam,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamSettings);\n","import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\n\nimport { SlideDown } from 'app/core/components/Animations/SlideDown';\nimport { Input, Tooltip } from '@grafana/ui';\n\nimport { TeamGroup } from '../../types';\nimport { addTeamGroup, loadTeamGroups, removeTeamGroup } from './state/actions';\nimport { getTeamGroups } from './state/selectors';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\n\nexport interface Props {\n  groups: TeamGroup[];\n  loadTeamGroups: typeof loadTeamGroups;\n  addTeamGroup: typeof addTeamGroup;\n  removeTeamGroup: typeof removeTeamGroup;\n}\n\ninterface State {\n  isAdding: boolean;\n  newGroupId?: string;\n}\n\nconst headerTooltip = `Sync LDAP or OAuth groups with your Grafana teams.`;\n\nexport class TeamGroupSync extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { isAdding: false, newGroupId: '' };\n  }\n\n  componentDidMount() {\n    this.fetchTeamGroups();\n  }\n\n  async fetchTeamGroups() {\n    await this.props.loadTeamGroups();\n  }\n\n  onToggleAdding = () => {\n    this.setState({ isAdding: !this.state.isAdding });\n  };\n\n  onNewGroupIdChanged = (event: any) => {\n    this.setState({ newGroupId: event.target.value });\n  };\n\n  onAddGroup = (event: any) => {\n    event.preventDefault();\n    this.props.addTeamGroup(this.state.newGroupId);\n    this.setState({ isAdding: false, newGroupId: '' });\n  };\n\n  onRemoveGroup = (group: TeamGroup) => {\n    this.props.removeTeamGroup(group.groupId);\n  };\n\n  isNewGroupValid() {\n    return this.state.newGroupId.length > 1;\n  }\n\n  renderGroup(group: TeamGroup) {\n    return (\n      <tr key={group.groupId}>\n        <td>{group.groupId}</td>\n        <td style={{ width: '1%' }}>\n          <a className=\"btn btn-danger btn-small\" onClick={() => this.onRemoveGroup(group)}>\n            <i className=\"fa fa-remove\" />\n          </a>\n        </td>\n      </tr>\n    );\n  }\n\n  render() {\n    const { isAdding, newGroupId } = this.state;\n    const groups = this.props.groups;\n\n    return (\n      <div>\n        <div className=\"page-action-bar\">\n          <h3 className=\"page-sub-heading\">External group sync</h3>\n          <Tooltip placement=\"auto\" content={headerTooltip}>\n            <div className=\"page-sub-heading-icon\">\n              <i className=\"gicon gicon-question gicon--has-hover\" />\n            </div>\n          </Tooltip>\n          <div className=\"page-action-bar__spacer\" />\n          {groups.length > 0 && (\n            <button className=\"btn btn-primary pull-right\" onClick={this.onToggleAdding}>\n              <i className=\"fa fa-plus\" /> Add group\n            </button>\n          )}\n        </div>\n\n        <SlideDown in={isAdding}>\n          <div className=\"cta-form\">\n            <button className=\"cta-form__close btn btn-transparent\" onClick={this.onToggleAdding}>\n              <i className=\"fa fa-close\" />\n            </button>\n            <h5>Add External Group</h5>\n            <form className=\"gf-form-inline\" onSubmit={this.onAddGroup}>\n              <div className=\"gf-form\">\n                <Input\n                  type=\"text\"\n                  className=\"gf-form-input width-30\"\n                  value={newGroupId}\n                  onChange={this.onNewGroupIdChanged}\n                  placeholder=\"cn=ops,ou=groups,dc=grafana,dc=org\"\n                />\n              </div>\n\n              <div className=\"gf-form\">\n                <button className=\"btn btn-primary gf-form-btn\" type=\"submit\" disabled={!this.isNewGroupValid()}>\n                  Add group\n                </button>\n              </div>\n            </form>\n          </div>\n        </SlideDown>\n\n        {groups.length === 0 && !isAdding && (\n          <EmptyListCTA\n            onClick={this.onToggleAdding}\n            buttonIcon=\"gicon gicon-team\"\n            title=\"There are no external groups to sync with\"\n            buttonTitle=\"Add Group\"\n            proTip={headerTooltip}\n            proTipLinkTitle=\"Learn more\"\n            proTipLink=\"http://docs.grafana.org/auth/enhanced_ldap/\"\n            proTipTarget=\"_blank\"\n          />\n        )}\n\n        {groups.length > 0 && (\n          <div className=\"admin-list-table\">\n            <table className=\"filter-table filter-table--hover form-inline\">\n              <thead>\n                <tr>\n                  <th>External Group ID</th>\n                  <th style={{ width: '1%' }} />\n                </tr>\n              </thead>\n              <tbody>{groups.map(group => this.renderGroup(group))}</tbody>\n            </table>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state: any) {\n  return {\n    groups: getTeamGroups(state.team),\n  };\n}\n\nconst mapDispatchToProps = {\n  loadTeamGroups,\n  addTeamGroup,\n  removeTeamGroup,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamGroupSync);\n","import React, { FunctionComponent } from 'react';\n\nexport interface Props {\n  featureToggle: boolean;\n}\n\nexport const WithFeatureToggle: FunctionComponent<Props> = ({ featureToggle, children }) => {\n  if (featureToggle === true) {\n    return <>{children}</>;\n  }\n\n  return null;\n};\n","import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { Select, DeleteButton } from '@grafana/ui';\nimport { SelectableValue } from '@grafana/data';\n\nimport { TeamMember, teamsPermissionLevels, TeamPermissionLevel } from 'app/types';\nimport { WithFeatureToggle } from 'app/core/components/WithFeatureToggle';\nimport { updateTeamMember, removeTeamMember } from './state/actions';\nimport { TagBadge } from 'app/core/components/TagFilter/TagBadge';\n\nexport interface Props {\n  member: TeamMember;\n  syncEnabled: boolean;\n  editorsCanAdmin: boolean;\n  signedInUserIsTeamAdmin: boolean;\n  removeTeamMember?: typeof removeTeamMember;\n  updateTeamMember?: typeof updateTeamMember;\n}\n\nexport class TeamMemberRow extends PureComponent<Props> {\n  constructor(props: Props) {\n    super(props);\n    this.renderLabels = this.renderLabels.bind(this);\n    this.renderPermissions = this.renderPermissions.bind(this);\n  }\n\n  onRemoveMember(member: TeamMember) {\n    this.props.removeTeamMember(member.userId);\n  }\n\n  onPermissionChange = (item: SelectableValue<TeamPermissionLevel>, member: TeamMember) => {\n    const permission = item.value;\n    const updatedTeamMember = { ...member, permission };\n\n    this.props.updateTeamMember(updatedTeamMember);\n  };\n\n  renderPermissions(member: TeamMember) {\n    const { editorsCanAdmin, signedInUserIsTeamAdmin } = this.props;\n    const value = teamsPermissionLevels.find(dp => dp.value === member.permission);\n\n    return (\n      <WithFeatureToggle featureToggle={editorsCanAdmin}>\n        <td className=\"width-5 team-permissions\">\n          <div className=\"gf-form\">\n            {signedInUserIsTeamAdmin && (\n              <Select\n                isSearchable={false}\n                options={teamsPermissionLevels}\n                onChange={item => this.onPermissionChange(item, member)}\n                className=\"gf-form-select-box__control--menu-right\"\n                value={value}\n              />\n            )}\n            {!signedInUserIsTeamAdmin && <span>{value.label}</span>}\n          </div>\n        </td>\n      </WithFeatureToggle>\n    );\n  }\n\n  renderLabels(labels: string[]) {\n    if (!labels) {\n      return <td />;\n    }\n\n    return (\n      <td>\n        {labels.map(label => (\n          <TagBadge key={label} label={label} removeIcon={false} count={0} onClick={() => {}} />\n        ))}\n      </td>\n    );\n  }\n\n  render() {\n    const { member, syncEnabled, signedInUserIsTeamAdmin } = this.props;\n    return (\n      <tr key={member.userId}>\n        <td className=\"width-4 text-center\">\n          <img className=\"filter-table__avatar\" src={member.avatarUrl} />\n        </td>\n        <td>{member.login}</td>\n        <td>{member.email}</td>\n        <td>{member.name}</td>\n        {this.renderPermissions(member)}\n        {syncEnabled && this.renderLabels(member.labels)}\n        <td className=\"text-right\">\n          <DeleteButton size=\"sm\" disabled={!signedInUserIsTeamAdmin} onConfirm={() => this.onRemoveMember(member)} />\n        </td>\n      </tr>\n    );\n  }\n}\n\nfunction mapStateToProps(state: any) {\n  return {};\n}\n\nconst mapDispatchToProps = {\n  removeTeamMember,\n  updateTeamMember,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamMemberRow);\n","import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { SlideDown } from 'app/core/components/Animations/SlideDown';\nimport { UserPicker } from 'app/core/components/Select/UserPicker';\nimport { TagBadge } from 'app/core/components/TagFilter/TagBadge';\nimport { TeamMember, User } from 'app/types';\nimport { addTeamMember } from './state/actions';\nimport { getSearchMemberQuery, isSignedInUserTeamAdmin } from './state/selectors';\nimport { FilterInput } from 'app/core/components/FilterInput/FilterInput';\nimport { WithFeatureToggle } from 'app/core/components/WithFeatureToggle';\nimport { config } from 'app/core/config';\nimport { contextSrv, User as SignedInUser } from 'app/core/services/context_srv';\nimport TeamMemberRow from './TeamMemberRow';\nimport { setSearchMemberQuery } from './state/reducers';\n\nexport interface Props {\n  members: TeamMember[];\n  searchMemberQuery: string;\n  addTeamMember: typeof addTeamMember;\n  setSearchMemberQuery: typeof setSearchMemberQuery;\n  syncEnabled: boolean;\n  editorsCanAdmin?: boolean;\n  signedInUser?: SignedInUser;\n}\n\nexport interface State {\n  isAdding: boolean;\n  newTeamMember?: User;\n}\n\nexport class TeamMembers extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { isAdding: false, newTeamMember: null };\n  }\n\n  onSearchQueryChange = (value: string) => {\n    this.props.setSearchMemberQuery(value);\n  };\n\n  onToggleAdding = () => {\n    this.setState({ isAdding: !this.state.isAdding });\n  };\n\n  onUserSelected = (user: User) => {\n    this.setState({ newTeamMember: user });\n  };\n\n  onAddUserToTeam = async () => {\n    this.props.addTeamMember(this.state.newTeamMember.id);\n    this.setState({ newTeamMember: null });\n  };\n\n  renderLabels(labels: string[]) {\n    if (!labels) {\n      return <td />;\n    }\n\n    return (\n      <td>\n        {labels.map(label => (\n          <TagBadge key={label} label={label} removeIcon={false} count={0} onClick={() => {}} />\n        ))}\n      </td>\n    );\n  }\n\n  render() {\n    const { isAdding } = this.state;\n    const { searchMemberQuery, members, syncEnabled, editorsCanAdmin, signedInUser } = this.props;\n    const isTeamAdmin = isSignedInUserTeamAdmin({ members, editorsCanAdmin, signedInUser });\n\n    return (\n      <div>\n        <div className=\"page-action-bar\">\n          <div className=\"gf-form gf-form--grow\">\n            <FilterInput\n              labelClassName=\"gf-form--has-input-icon gf-form--grow\"\n              inputClassName=\"gf-form-input\"\n              placeholder=\"Search members\"\n              value={searchMemberQuery}\n              onChange={this.onSearchQueryChange}\n            />\n          </div>\n\n          <div className=\"page-action-bar__spacer\" />\n\n          <button\n            className=\"btn btn-primary pull-right\"\n            onClick={this.onToggleAdding}\n            disabled={isAdding || !isTeamAdmin}\n          >\n            Add member\n          </button>\n        </div>\n\n        <SlideDown in={isAdding}>\n          <div className=\"cta-form\">\n            <button className=\"cta-form__close btn btn-transparent\" onClick={this.onToggleAdding}>\n              <i className=\"fa fa-close\" />\n            </button>\n            <h5>Add team member</h5>\n            <div className=\"gf-form-inline\">\n              <UserPicker onSelected={this.onUserSelected} className=\"min-width-30\" />\n              {this.state.newTeamMember && (\n                <button className=\"btn btn-primary gf-form-btn\" type=\"submit\" onClick={this.onAddUserToTeam}>\n                  Add to team\n                </button>\n              )}\n            </div>\n          </div>\n        </SlideDown>\n\n        <div className=\"admin-list-table\">\n          <table className=\"filter-table filter-table--hover form-inline\">\n            <thead>\n              <tr>\n                <th />\n                <th>Login</th>\n                <th>Email</th>\n                <th>Name</th>\n                <WithFeatureToggle featureToggle={editorsCanAdmin}>\n                  <th>Permission</th>\n                </WithFeatureToggle>\n                {syncEnabled && <th />}\n                <th style={{ width: '1%' }} />\n              </tr>\n            </thead>\n            <tbody>\n              {members &&\n                members.map(member => (\n                  <TeamMemberRow\n                    key={member.userId}\n                    member={member}\n                    syncEnabled={syncEnabled}\n                    editorsCanAdmin={editorsCanAdmin}\n                    signedInUserIsTeamAdmin={isTeamAdmin}\n                  />\n                ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state: any) {\n  return {\n    searchMemberQuery: getSearchMemberQuery(state.team),\n    editorsCanAdmin: config.editorsCanAdmin, // this makes the feature toggle mockable/controllable from tests,\n    signedInUser: contextSrv.user, // this makes the feature toggle mockable/controllable from tests,\n  };\n}\n\nconst mapDispatchToProps = {\n  addTeamMember,\n  setSearchMemberQuery,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamMembers);\n","import { getBackendSrv } from '@grafana/runtime';\n\nimport { TeamMember, ThunkResult } from 'app/types';\nimport { updateNavIndex } from 'app/core/actions';\nimport { buildNavModel } from './navModel';\nimport { teamGroupsLoaded, teamLoaded, teamMembersLoaded, teamsLoaded } from './reducers';\n\nexport function loadTeams(): ThunkResult<void> {\n  return async dispatch => {\n    const response = await getBackendSrv().get('/api/teams/search', { perpage: 1000, page: 1 });\n    dispatch(teamsLoaded(response.teams));\n  };\n}\n\nexport function loadTeam(id: number): ThunkResult<void> {\n  return async dispatch => {\n    const response = await getBackendSrv().get(`/api/teams/${id}`);\n    dispatch(teamLoaded(response));\n    dispatch(updateNavIndex(buildNavModel(response)));\n  };\n}\n\nexport function loadTeamMembers(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    const response = await getBackendSrv().get(`/api/teams/${team.id}/members`);\n    dispatch(teamMembersLoaded(response));\n  };\n}\n\nexport function addTeamMember(id: number): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().post(`/api/teams/${team.id}/members`, { userId: id });\n    dispatch(loadTeamMembers());\n  };\n}\n\nexport function removeTeamMember(id: number): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().delete(`/api/teams/${team.id}/members/${id}`);\n    dispatch(loadTeamMembers());\n  };\n}\n\nexport function updateTeam(name: string, email: string): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().put(`/api/teams/${team.id}`, { name, email });\n    dispatch(loadTeam(team.id));\n  };\n}\n\nexport function loadTeamGroups(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    const response = await getBackendSrv().get(`/api/teams/${team.id}/groups`);\n    dispatch(teamGroupsLoaded(response));\n  };\n}\n\nexport function addTeamGroup(groupId: string): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().post(`/api/teams/${team.id}/groups`, { groupId: groupId });\n    dispatch(loadTeamGroups());\n  };\n}\n\nexport function removeTeamGroup(groupId: string): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().delete(`/api/teams/${team.id}/groups/${encodeURIComponent(groupId)}`);\n    dispatch(loadTeamGroups());\n  };\n}\n\nexport function deleteTeam(id: number): ThunkResult<void> {\n  return async dispatch => {\n    await getBackendSrv().delete(`/api/teams/${id}`);\n    dispatch(loadTeams());\n  };\n}\n\nexport function updateTeamMember(member: TeamMember): ThunkResult<void> {\n  return async dispatch => {\n    await getBackendSrv().put(`/api/teams/${member.teamId}/members/${member.userId}`, {\n      permission: member.permission,\n    });\n    dispatch(loadTeamMembers());\n  };\n}\n","import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\nimport { hot } from 'react-hot-loader';\nimport config from 'app/core/config';\nimport Page from 'app/core/components/Page/Page';\nimport TeamMembers from './TeamMembers';\nimport TeamSettings from './TeamSettings';\nimport TeamGroupSync from './TeamGroupSync';\nimport { Team, TeamMember } from 'app/types';\nimport { loadTeam, loadTeamMembers } from './state/actions';\nimport { getTeam, getTeamMembers, isSignedInUserTeamAdmin } from './state/selectors';\nimport { getTeamLoadingNav } from './state/navModel';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { getRouteParamsId, getRouteParamsPage } from '../../core/selectors/location';\nimport { contextSrv, User } from 'app/core/services/context_srv';\nimport { NavModel } from '@grafana/data';\n\nexport interface Props {\n  team: Team;\n  loadTeam: typeof loadTeam;\n  loadTeamMembers: typeof loadTeamMembers;\n  teamId: number;\n  pageName: string;\n  navModel: NavModel;\n  members?: TeamMember[];\n  editorsCanAdmin?: boolean;\n  signedInUser?: User;\n}\n\ninterface State {\n  isSyncEnabled: boolean;\n  isLoading: boolean;\n}\n\nenum PageTypes {\n  Members = 'members',\n  Settings = 'settings',\n  GroupSync = 'groupsync',\n}\n\nexport class TeamPages extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      isLoading: false,\n      isSyncEnabled: config.licenseInfo.hasLicense,\n    };\n  }\n\n  async componentDidMount() {\n    await this.fetchTeam();\n  }\n\n  async fetchTeam() {\n    const { loadTeam, teamId } = this.props;\n    this.setState({ isLoading: true });\n    const team = await loadTeam(teamId);\n    await this.props.loadTeamMembers();\n    this.setState({ isLoading: false });\n    return team;\n  }\n\n  getCurrentPage() {\n    const pages = ['members', 'settings', 'groupsync'];\n    const currentPage = this.props.pageName;\n    return _.includes(pages, currentPage) ? currentPage : pages[0];\n  }\n\n  textsAreEqual = (text1: string, text2: string) => {\n    if (!text1 && !text2) {\n      return true;\n    }\n\n    if (!text1 || !text2) {\n      return false;\n    }\n\n    return text1.toLocaleLowerCase() === text2.toLocaleLowerCase();\n  };\n\n  hideTabsFromNonTeamAdmin = (navModel: NavModel, isSignedInUserTeamAdmin: boolean) => {\n    if (!isSignedInUserTeamAdmin && navModel.main && navModel.main.children) {\n      navModel.main.children\n        .filter(navItem => !this.textsAreEqual(navItem.text, PageTypes.Members))\n        .map(navItem => {\n          navItem.hideFromTabs = true;\n        });\n    }\n\n    return navModel;\n  };\n\n  renderPage(isSignedInUserTeamAdmin: boolean) {\n    const { isSyncEnabled } = this.state;\n    const { members } = this.props;\n    const currentPage = this.getCurrentPage();\n\n    switch (currentPage) {\n      case PageTypes.Members:\n        return <TeamMembers syncEnabled={isSyncEnabled} members={members} />;\n\n      case PageTypes.Settings:\n        return isSignedInUserTeamAdmin && <TeamSettings />;\n      case PageTypes.GroupSync:\n        return isSignedInUserTeamAdmin && isSyncEnabled && <TeamGroupSync />;\n    }\n\n    return null;\n  }\n\n  render() {\n    const { team, navModel, members, editorsCanAdmin, signedInUser } = this.props;\n    const isTeamAdmin = isSignedInUserTeamAdmin({ members, editorsCanAdmin, signedInUser });\n\n    return (\n      <Page navModel={this.hideTabsFromNonTeamAdmin(navModel, isTeamAdmin)}>\n        <Page.Contents isLoading={this.state.isLoading}>\n          {team && Object.keys(team).length !== 0 && this.renderPage(isTeamAdmin)}\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nfunction mapStateToProps(state: any) {\n  const teamId = getRouteParamsId(state.location);\n  const pageName = getRouteParamsPage(state.location) || 'members';\n  const teamLoadingNav = getTeamLoadingNav(pageName as string);\n  const navModel = getNavModel(state.navIndex, `team-${pageName}-${teamId}`, teamLoadingNav);\n  const team = getTeam(state.team, teamId);\n  const members = getTeamMembers(state.team);\n\n  return {\n    navModel,\n    teamId: teamId,\n    pageName: pageName,\n    team,\n    members,\n    editorsCanAdmin: config.editorsCanAdmin, // this makes the feature toggle mockable/controllable from tests,\n    signedInUser: contextSrv.user, // this makes the feature toggle mockable/controllable from tests,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadTeam,\n  loadTeamMembers,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(TeamPages));\n","import { Team, TeamPermissionLevel } from 'app/types';\nimport config from 'app/core/config';\nimport { NavModelItem, NavModel } from '@grafana/data';\n\nexport function buildNavModel(team: Team): NavModelItem {\n  const navModel = {\n    img: team.avatarUrl,\n    id: 'team-' + team.id,\n    subTitle: 'Manage members & settings',\n    url: '',\n    text: team.name,\n    breadcrumbs: [{ title: 'Teams', url: 'org/teams' }],\n    children: [\n      {\n        active: false,\n        icon: 'gicon gicon-team',\n        id: `team-members-${team.id}`,\n        text: 'Members',\n        url: `org/teams/edit/${team.id}/members`,\n      },\n      {\n        active: false,\n        icon: 'fa fa-fw fa-sliders',\n        id: `team-settings-${team.id}`,\n        text: 'Settings',\n        url: `org/teams/edit/${team.id}/settings`,\n      },\n    ],\n  };\n\n  if (config.licenseInfo.hasLicense) {\n    navModel.children.push({\n      active: false,\n      icon: 'fa fa-fw fa-refresh',\n      id: `team-groupsync-${team.id}`,\n      text: 'External group sync',\n      url: `org/teams/edit/${team.id}/groupsync`,\n    });\n  }\n\n  return navModel;\n}\n\nexport function getTeamLoadingNav(pageName: string): NavModel {\n  const main = buildNavModel({\n    avatarUrl: 'public/img/user_profile.png',\n    id: 1,\n    name: 'Loading',\n    email: 'loading',\n    memberCount: 0,\n    permission: TeamPermissionLevel.Member,\n  });\n\n  let node: NavModelItem;\n\n  // find active page\n  for (const child of main.children) {\n    if (child.id.indexOf(pageName) > 0) {\n      child.active = true;\n      node = child;\n      break;\n    }\n  }\n\n  return {\n    main: main,\n    node: node,\n  };\n}\n"],"sourceRoot":""}