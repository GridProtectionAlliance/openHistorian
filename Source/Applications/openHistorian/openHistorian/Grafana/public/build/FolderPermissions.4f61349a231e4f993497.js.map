{"version":3,"file":"FolderPermissions.4f61349a231e4f993497.js","mappings":"6QAeA,SAASA,EAAgBC,EAAmBC,EAAmB,CAC7D,MAAMC,EAAMD,EAAM,MAAM,OAAO,IAC/B,MAAO,CACL,IAAAC,EACA,WAAS,MAAYF,EAAM,SAAU,sBAAsBE,OAAO,KAAc,CAAC,CAAC,CACpF,CACF,CAEA,MAAMC,EAAqB,CACzB,eAAc,IAChB,EAEMC,KAAY,WAAQL,EAAiBI,CAAkB,EAGhDE,EAAiC,CAAC,CAAE,IAAAH,EAAK,eAAAI,EAAgB,QAAAC,CAAQ,IAAa,IACzF,aAAU,IAAM,CACdD,EAAeJ,CAAG,CACpB,EAAG,CAACI,EAAgBJ,CAAG,CAAC,EAExB,MAAMM,EAAoB,mBAAyB,6CAA2C,EAE9F,OACE,gBAAC,IAAI,CAAC,MAAM,oBAAoB,QAASD,EAAQ,MAC/C,gBAAC,kBACC,gBAAC,IAAW,CAAC,SAAS,UAAU,WAAYL,EAAK,kBAAAM,CAAA,CAAsC,CACzF,CACF,CAEJ,EAEA,EAAeJ,EAAUC,CAA8B,C,wNCrBvD,MAAMN,EAAkB,CAACC,EAAmBC,IAAoB,CAC9D,MAAMC,EAAMD,EAAM,MAAM,OAAO,IAC/B,MAAO,CACL,WAAS,MAAYD,EAAM,SAAU,sBAAsBE,OAAO,KAAc,CAAC,CAAC,EAClF,UAAWA,EACX,OAAQF,EAAM,MAChB,CACF,EAEMG,EAAqB,CACzB,eAAc,KACd,qBAAoB,IACpB,uBAAsB,KACtB,uBAAsB,KACtB,oBAAmB,IACrB,EAEMC,KAAY,WAAQL,EAAiBI,CAAkB,EAQtD,MAAMM,UAA0B,eAA4B,CACjE,YAAYR,EAAc,CACxB,MAAMA,CAAK,EAYb,0BAAuB,IAAM,CAC3B,KAAK,SAAS,CAAE,SAAU,EAAK,CAAC,CAClC,EAEA,kBAAgBS,GAAuB,CACrC,KAAK,MAAM,uBAAuBA,CAAI,CACxC,EAEA,yBAAsB,CAACA,EAAoBC,IAA2B,CACpE,KAAK,MAAM,uBAAuBD,EAAMC,CAAK,CAC/C,EAEA,qBAAmBC,GACV,KAAK,MAAM,oBAAoBA,CAAO,EAG/C,2BAAwB,IAAM,CAC5B,KAAK,SAAS,CAAE,SAAU,EAAM,CAAC,CACnC,EA5BE,KAAK,MAAQ,CACX,SAAU,EACZ,CACF,CAEA,mBAAoB,CAClB,KAAK,MAAM,eAAe,KAAK,MAAM,SAAS,EAC9C,KAAK,MAAM,qBAAqB,KAAK,MAAM,SAAS,CACtD,CAsBA,QAAS,CACP,KAAM,CAAE,QAAAL,EAAS,OAAAM,CAAO,EAAI,KAAK,MAC3B,CAAE,SAAAC,CAAS,EAAI,KAAK,MAE1B,GAAID,EAAO,KAAO,EAChB,OACE,gBAAC,IAAI,CAAC,MAAM,oBAAoB,QAASN,EAAQ,MAC/C,gBAAC,cAAc,UAAW,IACxB,gBAAC,WAAK,CACR,CACF,EAIJ,MAAMQ,EAAa,CAAE,MAAOF,EAAO,MAAO,IAAKA,EAAO,IAAK,GAAIA,EAAO,EAAG,EAEzE,OACE,gBAAC,IAAI,CAAC,MAAM,SAAS,QAASN,EAAQ,MACpC,gBAAC,kBACC,gBAAC,OAAI,UAAU,mBACb,gBAAC,MAAG,UAAU,oBAAmB,oBAAkB,EACnD,gBAAC,IAAO,CAAC,UAAU,OAAO,QAAS,gBAAC,IAAe,IAAC,GAClD,gBAAC,IAAI,CAAC,UAAU,wCAAwC,KAAK,iBAAkB,EACjF,EACA,gBAAC,OAAI,UAAU,yBAA0B,GACzC,gBAAC,KAAM,CAAC,UAAU,aAAa,QAAS,KAAK,qBAAsB,SAAUO,CAAA,EAAU,gBAEvF,CACF,EACA,gBAAC,IAAS,CAAC,GAAIA,CAAA,EACb,gBAAC,IAAa,CAAC,gBAAiB,KAAK,gBAAiB,SAAU,KAAK,sBAAuB,CAC9F,EACA,gBAAC,KACC,MAAOD,EAAO,YACd,aAAc,KAAK,aACnB,oBAAqB,KAAK,oBAC1B,WAAY,GACZ,WAAAE,CAAA,CACF,CACF,CACF,CAEJ,CACF,CAEA,QAAeX,EAAUK,CAAiB,C","sources":["webpack://grafana/./public/app/features/folders/AccessControlFolderPermissions.tsx","webpack://grafana/./public/app/features/folders/FolderPermissions.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { Permissions } from 'app/core/components/AccessControl';\nimport { Page } from 'app/core/components/Page/Page';\nimport { contextSrv } from 'app/core/core';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { AccessControlAction, StoreState } from 'app/types';\n\nimport { getFolderByUid } from './state/actions';\nimport { getLoadingNav } from './state/navModel';\n\ninterface RouteProps extends GrafanaRouteComponentProps<{ uid: string }> {}\n\nfunction mapStateToProps(state: StoreState, props: RouteProps) {\n  const uid = props.match.params.uid;\n  return {\n    uid: uid,\n    pageNav: getNavModel(state.navIndex, `folder-permissions-${uid}`, getLoadingNav(1)),\n  };\n}\n\nconst mapDispatchToProps = {\n  getFolderByUid,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport type Props = ConnectedProps<typeof connector>;\n\nexport const AccessControlFolderPermissions = ({ uid, getFolderByUid, pageNav }: Props) => {\n  useEffect(() => {\n    getFolderByUid(uid);\n  }, [getFolderByUid, uid]);\n\n  const canSetPermissions = contextSrv.hasPermission(AccessControlAction.FoldersPermissionsWrite);\n\n  return (\n    <Page navId=\"dashboards/browse\" pageNav={pageNav.main}>\n      <Page.Contents>\n        <Permissions resource=\"folders\" resourceId={uid} canSetPermissions={canSetPermissions} />\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default connector(AccessControlFolderPermissions);\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { Tooltip, Icon, Button } from '@grafana/ui';\nimport { SlideDown } from 'app/core/components/Animations/SlideDown';\nimport { Page } from 'app/core/components/Page/Page';\nimport AddPermission from 'app/core/components/PermissionList/AddPermission';\nimport PermissionList from 'app/core/components/PermissionList/PermissionList';\nimport PermissionsInfo from 'app/core/components/PermissionList/PermissionsInfo';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { StoreState } from 'app/types';\nimport { DashboardAcl, PermissionLevel, NewDashboardAclItem } from 'app/types/acl';\n\nimport {\n  getFolderByUid,\n  getFolderPermissions,\n  updateFolderPermission,\n  removeFolderPermission,\n  addFolderPermission,\n} from './state/actions';\nimport { getLoadingNav } from './state/navModel';\n\nexport interface OwnProps extends GrafanaRouteComponentProps<{ uid: string }> {}\n\nconst mapStateToProps = (state: StoreState, props: OwnProps) => {\n  const uid = props.match.params.uid;\n  return {\n    pageNav: getNavModel(state.navIndex, `folder-permissions-${uid}`, getLoadingNav(1)),\n    folderUid: uid,\n    folder: state.folder,\n  };\n};\n\nconst mapDispatchToProps = {\n  getFolderByUid,\n  getFolderPermissions,\n  updateFolderPermission,\n  removeFolderPermission,\n  addFolderPermission,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport interface State {\n  isAdding: boolean;\n}\n\nexport class FolderPermissions extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      isAdding: false,\n    };\n  }\n\n  componentDidMount() {\n    this.props.getFolderByUid(this.props.folderUid);\n    this.props.getFolderPermissions(this.props.folderUid);\n  }\n\n  onOpenAddPermissions = () => {\n    this.setState({ isAdding: true });\n  };\n\n  onRemoveItem = (item: DashboardAcl) => {\n    this.props.removeFolderPermission(item);\n  };\n\n  onPermissionChanged = (item: DashboardAcl, level: PermissionLevel) => {\n    this.props.updateFolderPermission(item, level);\n  };\n\n  onAddPermission = (newItem: NewDashboardAclItem) => {\n    return this.props.addFolderPermission(newItem);\n  };\n\n  onCancelAddPermission = () => {\n    this.setState({ isAdding: false });\n  };\n\n  render() {\n    const { pageNav, folder } = this.props;\n    const { isAdding } = this.state;\n\n    if (folder.id === 0) {\n      return (\n        <Page navId=\"dashboards/browse\" pageNav={pageNav.main}>\n          <Page.Contents isLoading={true}>\n            <span />\n          </Page.Contents>\n        </Page>\n      );\n    }\n\n    const folderInfo = { title: folder.title, url: folder.url, id: folder.id };\n\n    return (\n      <Page navId=\"browse\" pageNav={pageNav.main}>\n        <Page.Contents>\n          <div className=\"page-action-bar\">\n            <h3 className=\"page-sub-heading\">Folder Permissions</h3>\n            <Tooltip placement=\"auto\" content={<PermissionsInfo />}>\n              <Icon className=\"icon--has-hover page-sub-heading-icon\" name=\"question-circle\" />\n            </Tooltip>\n            <div className=\"page-action-bar__spacer\" />\n            <Button className=\"pull-right\" onClick={this.onOpenAddPermissions} disabled={isAdding}>\n              Add Permission\n            </Button>\n          </div>\n          <SlideDown in={isAdding}>\n            <AddPermission onAddPermission={this.onAddPermission} onCancel={this.onCancelAddPermission} />\n          </SlideDown>\n          <PermissionList\n            items={folder.permissions}\n            onRemoveItem={this.onRemoveItem}\n            onPermissionChanged={this.onPermissionChanged}\n            isFetching={false}\n            folderInfo={folderInfo}\n          />\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nexport default connector(FolderPermissions);\n"],"names":["mapStateToProps","state","props","uid","mapDispatchToProps","connector","AccessControlFolderPermissions","getFolderByUid","pageNav","canSetPermissions","FolderPermissions","item","level","newItem","folder","isAdding","folderInfo"],"sourceRoot":""}