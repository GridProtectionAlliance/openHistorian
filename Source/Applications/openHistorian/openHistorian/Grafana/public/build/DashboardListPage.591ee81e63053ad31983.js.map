{"version":3,"sources":["webpack:///./public/app/features/search/components/DashboardListPage.tsx","webpack:///./public/app/features/search/loaders.ts"],"names":["DashboardListPage","memo","navModel","uid","url","useAsync","startsWith","activeChildId","main","icon","id","subTitle","text","breadcrumbs","title","children","active","backendSrv","getFolderByUid","then","folder","folderTitle","folderUrl","dashTab","find","child","canAdmin","model","loadFolderPage","path","locationUtil","stripBaseFromUrl","location","pathname","getLocationSrv","update","pageNavModel","Promise","resolve","loading","value","Page","Contents","isLoading","ManageDashboards","connect","state","getNavModel","navIndex","getRouteParams","getUrl"],"mappings":"i9BAkBO,IAAMA,EAA+BC,gBAAK,YAA4B,MAAzBC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,IAAKC,EAAU,EAAVA,IAAU,EAChDC,aAAyD,WAClF,OAAKF,GAAQC,EAAIE,WAAW,eCjBF,SAACH,EAAaI,GAC1C,IAAML,EAAmC,CACvCM,KAAM,CACJC,KAAM,cACNC,GAAI,gBACJC,SAAU,yCACVP,IAAK,GACLQ,KAAM,GACNC,YAAa,CAAC,CAAEC,MAAO,aAAcV,IAAK,eAC1CW,SAAU,CACR,CACEC,OAA0B,6BAAlBT,EACRE,KAAM,WACNC,GAAI,2BACJE,KAAM,aACNR,IAAK,cAEP,CACEY,OAA0B,8BAAlBT,EACRE,KAAM,OACNC,GAAI,4BACJE,KAAM,cACNR,IAAK,0BAEP,CACEY,OAA0B,2BAAlBT,EACRE,KAAM,MACNC,GAAI,yBACJE,KAAM,WACNR,IAAK,0BAMb,OAAOa,IAAWC,eAAef,GAAKgB,MAAK,SAAAC,GACzC,IAAMC,EAAcD,EAAON,MACrBQ,EAAYF,EAAOhB,IACzBF,EAASM,KAAKI,KAAOS,EAErB,IAAME,EAAUrB,EAASM,KAAKO,SAAUS,MAAK,SAACC,GAAD,MAA6B,6BAAbA,EAAMf,OACnEa,EAASnB,IAAMkB,EAEXF,EAAOM,WACOxB,EAASM,KAAKO,SAAUS,MAAK,SAACC,GAAD,MAA6B,8BAAbA,EAAMf,MAC1DN,IAAMkB,EAAY,eAEPpB,EAASM,KAAKO,SAAUS,MAAK,SAACC,GAAD,MAA6B,2BAAbA,EAAMf,MAC1DN,IAAMkB,EAAY,aAE/BpB,EAASM,KAAKO,SAAW,CAACQ,GAG5B,MAAO,CAAEH,SAAQO,MAAOzB,MDhCjB0B,CAAezB,EAAM,4BAA4BgB,MAAK,YAAuB,IAApBC,EAAoB,EAApBA,OAAQO,EAAY,EAAZA,MAChEE,EAAOC,eAAaC,iBAAiBX,EAAOhB,KAMlD,OAJIyB,IAASG,SAASC,UACpBC,2BAAiBC,OAAO,CAAEN,SAGrB,CAAET,SAAQgB,aAAc,EAAF,GAAOlC,EAAP,GAAoByB,OAV1CU,QAAQC,QAAQ,CAAEF,aAAclC,MAYxC,CAACC,IAdIoC,EADmE,EACnEA,QAASC,EAD0D,EAC1DA,MAgBjB,OACE,kBAACC,EAAA,EAAD,CAAMvC,SAAQ,UAAEsC,aAAF,EAAEA,EAAOJ,oBAAT,QAAyBlC,GACrC,kBAACuC,EAAA,EAAKC,SAAN,CAAeC,UAAWJ,GACxB,kBAACK,EAAA,EAAD,CAAkBxB,OAAQoB,aAAF,EAAEA,EAAOpB,cAc1ByB,6BARiD,SAAAC,GAC9D,MAAO,CACL5C,SAAU6C,YAAYD,EAAME,SAAU,qBACtC7C,IAAK8C,YAAeH,EAAMd,UAAU7B,IACpCC,IAAK8C,YAAOJ,EAAMd,aAIPa,CAAyB7C","file":"DashboardListPage.591ee81e63053ad31983.js","sourcesContent":["import React, { FC, memo } from 'react';\nimport { useAsync } from 'react-use';\nimport { connect, MapStateToProps } from 'react-redux';\nimport { NavModel, locationUtil } from '@grafana/data';\nimport { getLocationSrv } from '@grafana/runtime';\nimport { FolderDTO, StoreState } from 'app/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { getRouteParams, getUrl } from 'app/core/selectors/location';\nimport Page from 'app/core/components/Page/Page';\nimport { loadFolderPage } from '../loaders';\nimport ManageDashboards from './ManageDashboards';\n\ninterface Props {\n  navModel: NavModel;\n  uid?: string;\n  url: string;\n}\n\nexport const DashboardListPage: FC<Props> = memo(({ navModel, uid, url }) => {\n  const { loading, value } = useAsync<{ folder?: FolderDTO; pageNavModel: NavModel }>(() => {\n    if (!uid || !url.startsWith('/dashboards')) {\n      return Promise.resolve({ pageNavModel: navModel });\n    }\n\n    return loadFolderPage(uid!, 'manage-folder-dashboards').then(({ folder, model }) => {\n      const path = locationUtil.stripBaseFromUrl(folder.url);\n\n      if (path !== location.pathname) {\n        getLocationSrv().update({ path });\n      }\n\n      return { folder, pageNavModel: { ...navModel, ...model } };\n    });\n  }, [uid]);\n\n  return (\n    <Page navModel={value?.pageNavModel ?? navModel}>\n      <Page.Contents isLoading={loading}>\n        <ManageDashboards folder={value?.folder} />\n      </Page.Contents>\n    </Page>\n  );\n});\n\nconst mapStateToProps: MapStateToProps<Props, {}, StoreState> = state => {\n  return {\n    navModel: getNavModel(state.navIndex, 'manage-dashboards'),\n    uid: getRouteParams(state.location).uid as string | undefined,\n    url: getUrl(state.location),\n  };\n};\n\nexport default connect(mapStateToProps)(DashboardListPage);\n","import { backendSrv } from 'app/core/services/backend_srv';\nimport { NavModel } from '@grafana/data';\n\nexport const loadFolderPage = (uid: string, activeChildId: string) => {\n  const navModel: Pick<NavModel, 'main'> = {\n    main: {\n      icon: 'folder-open',\n      id: 'manage-folder',\n      subTitle: 'Manage folder dashboards & permissions',\n      url: '',\n      text: '',\n      breadcrumbs: [{ title: 'Dashboards', url: 'dashboards' }],\n      children: [\n        {\n          active: activeChildId === 'manage-folder-dashboards',\n          icon: 'th-large',\n          id: 'manage-folder-dashboards',\n          text: 'Dashboards',\n          url: 'dashboards',\n        },\n        {\n          active: activeChildId === 'manage-folder-permissions',\n          icon: 'lock',\n          id: 'manage-folder-permissions',\n          text: 'Permissions',\n          url: 'dashboards/permissions',\n        },\n        {\n          active: activeChildId === 'manage-folder-settings',\n          icon: 'cog',\n          id: 'manage-folder-settings',\n          text: 'Settings',\n          url: 'dashboards/settings',\n        },\n      ],\n    },\n  };\n\n  return backendSrv.getFolderByUid(uid).then(folder => {\n    const folderTitle = folder.title;\n    const folderUrl = folder.url;\n    navModel.main.text = folderTitle;\n\n    const dashTab = navModel.main.children!.find((child: any) => child.id === 'manage-folder-dashboards');\n    dashTab!.url = folderUrl;\n\n    if (folder.canAdmin) {\n      const permTab = navModel.main.children!.find((child: any) => child.id === 'manage-folder-permissions');\n      permTab!.url = folderUrl + '/permissions';\n\n      const settingsTab = navModel.main.children!.find((child: any) => child.id === 'manage-folder-settings');\n      settingsTab!.url = folderUrl + '/settings';\n    } else {\n      navModel.main.children = [dashTab!];\n    }\n\n    return { folder, model: navModel };\n  });\n};\n"],"sourceRoot":""}