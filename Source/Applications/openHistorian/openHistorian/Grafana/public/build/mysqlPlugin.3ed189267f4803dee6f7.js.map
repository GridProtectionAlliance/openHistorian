{"version":3,"file":"mysqlPlugin.3ed189267f4803dee6f7.js","mappings":"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","sources":["webpack://grafana/./public/app/plugins/datasource/mysql/mysql_query_model.ts","webpack://grafana/./public/app/plugins/datasource/mysql/response_parser.ts","webpack://grafana/./public/app/plugins/datasource/mysql/datasource.ts","webpack://grafana/./public/app/plugins/datasource/mysql/meta_query.ts","webpack://grafana/./public/app/plugins/datasource/mysql/sql_part.ts","webpack://grafana/./public/app/plugins/datasource/mysql/query_ctrl.ts","webpack://grafana/./public/app/plugins/datasource/mysql/module.ts"],"sourcesContent":["import { find, map } from 'lodash';\n\nimport { ScopedVars } from '@grafana/data';\nimport { TemplateSrv } from '@grafana/runtime';\n\nexport default class MySQLQueryModel {\n  target: any;\n  templateSrv: any;\n  scopedVars: any;\n\n  /** @ngInject */\n  constructor(target: any, templateSrv?: TemplateSrv, scopedVars?: ScopedVars) {\n    this.target = target;\n    this.templateSrv = templateSrv;\n    this.scopedVars = scopedVars;\n\n    target.format = target.format || 'time_series';\n    target.timeColumn = target.timeColumn || 'time';\n    target.metricColumn = target.metricColumn || 'none';\n\n    target.group = target.group || [];\n    target.where = target.where || [{ type: 'macro', name: '$__timeFilter', params: [] }];\n    target.select = target.select || [[{ type: 'column', params: ['value'] }]];\n\n    // handle pre query gui panels gracefully\n    if (!('rawQuery' in this.target)) {\n      if ('rawSql' in target) {\n        // pre query gui panel\n        target.rawQuery = true;\n      } else {\n        // new panel\n        target.rawQuery = false;\n      }\n    }\n\n    // give interpolateQueryStr access to this\n    this.interpolateQueryStr = this.interpolateQueryStr.bind(this);\n  }\n\n  // remove identifier quoting from identifier to use in metadata queries\n  unquoteIdentifier(value: string) {\n    if (value[0] === '\"' && value[value.length - 1] === '\"') {\n      return value.substring(1, value.length - 1).replace(/\"\"/g, '\"');\n    } else {\n      return value;\n    }\n  }\n\n  quoteIdentifier(value: string) {\n    return '\"' + value.replace(/\"/g, '\"\"') + '\"';\n  }\n\n  quoteLiteral(value: string) {\n    return \"'\" + value.replace(/'/g, \"''\") + \"'\";\n  }\n\n  escapeLiteral(value: any) {\n    return String(value).replace(/'/g, \"''\");\n  }\n\n  hasTimeGroup() {\n    return find(this.target.group, (g: any) => g.type === 'time');\n  }\n\n  hasMetricColumn() {\n    return this.target.metricColumn !== 'none';\n  }\n\n  interpolateQueryStr(value: string, variable: { multi: any; includeAll: any }, defaultFormatFn: any) {\n    // if no multi or include all do not regexEscape\n    if (!variable.multi && !variable.includeAll) {\n      return this.escapeLiteral(value);\n    }\n\n    if (typeof value === 'string') {\n      return this.quoteLiteral(value);\n    }\n\n    const escapedValues = map(value, this.quoteLiteral);\n    return escapedValues.join(',');\n  }\n\n  render(interpolate?: boolean) {\n    const target = this.target;\n\n    // new query with no table set yet\n    if (!this.target.rawQuery && !('table' in this.target)) {\n      return '';\n    }\n\n    if (!target.rawQuery) {\n      target.rawSql = this.buildQuery();\n    }\n\n    if (interpolate) {\n      return this.templateSrv.replace(target.rawSql, this.scopedVars, this.interpolateQueryStr);\n    } else {\n      return target.rawSql;\n    }\n  }\n\n  hasUnixEpochTimecolumn() {\n    return ['int', 'bigint', 'double'].indexOf(this.target.timeColumnType) > -1;\n  }\n\n  buildTimeColumn(alias = true) {\n    const timeGroup = this.hasTimeGroup();\n    let query;\n    let macro = '$__timeGroup';\n\n    if (timeGroup) {\n      let args;\n      if (timeGroup.params.length > 1 && timeGroup.params[1] !== 'none') {\n        args = timeGroup.params.join(',');\n      } else {\n        args = timeGroup.params[0];\n      }\n      if (this.hasUnixEpochTimecolumn()) {\n        macro = '$__unixEpochGroup';\n      }\n      if (alias) {\n        macro += 'Alias';\n      }\n      query = macro + '(' + this.target.timeColumn + ',' + args + ')';\n    } else {\n      query = this.target.timeColumn;\n      if (alias) {\n        query += ' AS \"time\"';\n      }\n    }\n\n    return query;\n  }\n\n  buildMetricColumn() {\n    if (this.hasMetricColumn()) {\n      return this.target.metricColumn + ' AS metric';\n    }\n\n    return '';\n  }\n\n  buildValueColumns() {\n    let query = '';\n    for (const column of this.target.select) {\n      query += ',\\n  ' + this.buildValueColumn(column);\n    }\n\n    return query;\n  }\n\n  buildValueColumn(column: any) {\n    let query = '';\n\n    const columnName: any = find(column, (g: any) => g.type === 'column');\n    query = columnName.params[0];\n\n    const aggregate: any = find(column, (g: any) => g.type === 'aggregate');\n\n    if (aggregate) {\n      const func = aggregate.params[0];\n      query = func + '(' + query + ')';\n    }\n\n    const alias: any = find(column, (g: any) => g.type === 'alias');\n    if (alias) {\n      query += ' AS ' + this.quoteIdentifier(alias.params[0]);\n    }\n\n    return query;\n  }\n\n  buildWhereClause() {\n    let query = '';\n    const conditions = map(this.target.where, (tag, index) => {\n      switch (tag.type) {\n        case 'macro':\n          return tag.name + '(' + this.target.timeColumn + ')';\n          break;\n        case 'expression':\n          return tag.params.join(' ');\n          break;\n      }\n    });\n\n    if (conditions.length > 0) {\n      query = '\\nWHERE\\n  ' + conditions.join(' AND\\n  ');\n    }\n\n    return query;\n  }\n\n  buildGroupClause() {\n    let query = '';\n    let groupSection = '';\n\n    for (let i = 0; i < this.target.group.length; i++) {\n      const part = this.target.group[i];\n      if (i > 0) {\n        groupSection += ', ';\n      }\n      if (part.type === 'time') {\n        groupSection += '1';\n      } else {\n        groupSection += part.params[0];\n      }\n    }\n\n    if (groupSection.length) {\n      query = '\\nGROUP BY ' + groupSection;\n      if (this.hasMetricColumn()) {\n        query += ',2';\n      }\n    }\n    return query;\n  }\n\n  buildQuery() {\n    let query = 'SELECT';\n\n    query += '\\n  ' + this.buildTimeColumn();\n    if (this.hasMetricColumn()) {\n      query += ',\\n  ' + this.buildMetricColumn();\n    }\n    query += this.buildValueColumns();\n\n    query += '\\nFROM ' + this.target.table;\n\n    query += this.buildWhereClause();\n    query += this.buildGroupClause();\n\n    query += '\\nORDER BY ' + this.buildTimeColumn(false);\n\n    return query;\n  }\n}\n","import { uniqBy } from 'lodash';\n\nimport { AnnotationEvent, DataFrame, MetricFindValue } from '@grafana/data';\nimport { BackendDataSourceResponse, FetchResponse, toDataQueryResponse } from '@grafana/runtime';\n\nexport default class ResponseParser {\n  transformMetricFindResponse(raw: FetchResponse<BackendDataSourceResponse>): MetricFindValue[] {\n    const frames = toDataQueryResponse(raw).data as DataFrame[];\n\n    if (!frames || !frames.length) {\n      return [];\n    }\n\n    const frame = frames[0];\n\n    const values: MetricFindValue[] = [];\n    const textField = frame.fields.find((f) => f.name === '__text');\n    const valueField = frame.fields.find((f) => f.name === '__value');\n\n    if (textField && valueField) {\n      for (let i = 0; i < textField.values.length; i++) {\n        values.push({ text: '' + textField.values.get(i), value: '' + valueField.values.get(i) });\n      }\n    } else {\n      values.push(\n        ...frame.fields\n          .flatMap((f) => f.values.toArray())\n          .map((v) => ({\n            text: v,\n          }))\n      );\n    }\n\n    return uniqBy(values, 'text');\n  }\n\n  async transformAnnotationResponse(options: any, data: BackendDataSourceResponse): Promise<AnnotationEvent[]> {\n    const frames = toDataQueryResponse({ data: data }).data as DataFrame[];\n    if (!frames || !frames.length) {\n      return [];\n    }\n    const frame = frames[0];\n    const timeField = frame.fields.find((f) => f.name === 'time' || f.name === 'time_sec');\n\n    if (!timeField) {\n      throw new Error('Missing mandatory time column (with time column alias) in annotation query');\n    }\n\n    if (frame.fields.find((f) => f.name === 'title')) {\n      throw new Error('The title column for annotations is deprecated, now only a column named text is returned');\n    }\n\n    const timeEndField = frame.fields.find((f) => f.name === 'timeend');\n    const textField = frame.fields.find((f) => f.name === 'text');\n    const tagsField = frame.fields.find((f) => f.name === 'tags');\n\n    const list: AnnotationEvent[] = [];\n    for (let i = 0; i < frame.length; i++) {\n      const timeEnd = timeEndField && timeEndField.values.get(i) ? Math.floor(timeEndField.values.get(i)) : undefined;\n      list.push({\n        annotation: options.annotation,\n        time: Math.floor(timeField.values.get(i)),\n        timeEnd,\n        text: textField && textField.values.get(i) ? textField.values.get(i) : '',\n        tags:\n          tagsField && tagsField.values.get(i)\n            ? tagsField.values\n                .get(i)\n                .trim()\n                .split(/\\s*,\\s*/)\n            : [],\n      });\n    }\n\n    return list;\n  }\n}\n","import { map as _map } from 'lodash';\nimport { lastValueFrom, of } from 'rxjs';\nimport { catchError, map, mapTo } from 'rxjs/operators';\n\nimport { AnnotationEvent, DataSourceInstanceSettings, MetricFindValue, ScopedVars } from '@grafana/data';\nimport { BackendDataSourceResponse, DataSourceWithBackend, FetchResponse, getBackendSrv } from '@grafana/runtime';\nimport { toTestingStatus } from '@grafana/runtime/src/utils/queryResponse';\nimport { getTemplateSrv, TemplateSrv } from 'app/features/templating/template_srv';\nimport MySQLQueryModel from 'app/plugins/datasource/mysql/mysql_query_model';\n\nimport { getSearchFilterScopedVar } from '../../../features/variables/utils';\n\nimport ResponseParser from './response_parser';\nimport { MySQLOptions, MySQLQuery, MysqlQueryForInterpolation } from './types';\n\nexport class MysqlDatasource extends DataSourceWithBackend<MySQLQuery, MySQLOptions> {\n  id: any;\n  name: any;\n  responseParser: ResponseParser;\n  queryModel: MySQLQueryModel;\n  interval: string;\n\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<MySQLOptions>,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv()\n  ) {\n    super(instanceSettings);\n    this.name = instanceSettings.name;\n    this.id = instanceSettings.id;\n    this.responseParser = new ResponseParser();\n    this.queryModel = new MySQLQueryModel({});\n    const settingsData = instanceSettings.jsonData || ({} as MySQLOptions);\n    this.interval = settingsData.timeInterval || '1m';\n  }\n\n  interpolateVariable = (value: string | string[] | number, variable: any) => {\n    if (typeof value === 'string') {\n      if (variable.multi || variable.includeAll) {\n        const result = this.queryModel.quoteLiteral(value);\n        return result;\n      } else {\n        return value;\n      }\n    }\n\n    if (typeof value === 'number') {\n      return value;\n    }\n\n    const quotedValues = _map(value, (v: any) => {\n      return this.queryModel.quoteLiteral(v);\n    });\n    return quotedValues.join(',');\n  };\n\n  interpolateVariablesInQueries(\n    queries: MysqlQueryForInterpolation[],\n    scopedVars: ScopedVars\n  ): MysqlQueryForInterpolation[] {\n    let expandedQueries = queries;\n    if (queries && queries.length > 0) {\n      expandedQueries = queries.map((query) => {\n        const expandedQuery = {\n          ...query,\n          datasource: this.getRef(),\n          rawSql: this.templateSrv.replace(query.rawSql, scopedVars, this.interpolateVariable),\n          rawQuery: true,\n        };\n        return expandedQuery;\n      });\n    }\n    return expandedQueries;\n  }\n\n  filterQuery(query: MySQLQuery): boolean {\n    return !query.hide;\n  }\n\n  applyTemplateVariables(target: MySQLQuery, scopedVars: ScopedVars): Record<string, any> {\n    const queryModel = new MySQLQueryModel(target, this.templateSrv, scopedVars);\n    return {\n      refId: target.refId,\n      datasource: this.getRef(),\n      rawSql: queryModel.render(this.interpolateVariable as any),\n      format: target.format,\n    };\n  }\n\n  async annotationQuery(options: any): Promise<AnnotationEvent[]> {\n    if (!options.annotation.rawQuery) {\n      return Promise.reject({\n        message: 'Query missing in annotation definition',\n      });\n    }\n\n    const query = {\n      refId: options.annotation.name,\n      datasource: this.getRef(),\n      rawSql: this.templateSrv.replace(options.annotation.rawQuery, options.scopedVars, this.interpolateVariable),\n      format: 'table',\n    };\n\n    return lastValueFrom(\n      getBackendSrv()\n        .fetch<BackendDataSourceResponse>({\n          url: '/api/ds/query',\n          method: 'POST',\n          data: {\n            from: options.range.from.valueOf().toString(),\n            to: options.range.to.valueOf().toString(),\n            queries: [query],\n          },\n          requestId: options.annotation.name,\n        })\n        .pipe(\n          map(\n            async (res: FetchResponse<BackendDataSourceResponse>) =>\n              await this.responseParser.transformAnnotationResponse(options, res.data)\n          )\n        )\n    );\n  }\n\n  metricFindQuery(query: string, optionalOptions: any): Promise<MetricFindValue[]> {\n    let refId = 'tempvar';\n    if (optionalOptions && optionalOptions.variable && optionalOptions.variable.name) {\n      refId = optionalOptions.variable.name;\n    }\n\n    const rawSql = this.templateSrv.replace(\n      query,\n      getSearchFilterScopedVar({ query, wildcardChar: '%', options: optionalOptions }),\n      this.interpolateVariable\n    );\n\n    const interpolatedQuery = {\n      refId: refId,\n      datasource: this.getRef(),\n      rawSql,\n      format: 'table',\n    };\n\n    const range = optionalOptions?.range;\n\n    return lastValueFrom(\n      getBackendSrv()\n        .fetch<BackendDataSourceResponse>({\n          url: '/api/ds/query',\n          method: 'POST',\n          data: {\n            from: range?.from?.valueOf()?.toString(),\n            to: range?.to?.valueOf()?.toString(),\n            queries: [interpolatedQuery],\n          },\n          requestId: refId,\n        })\n        .pipe(\n          map((rsp) => {\n            return this.responseParser.transformMetricFindResponse(rsp);\n          }),\n          catchError((err) => {\n            return of([]);\n          })\n        )\n    );\n  }\n\n  testDatasource(): Promise<any> {\n    return lastValueFrom(\n      getBackendSrv()\n        .fetch({\n          url: '/api/ds/query',\n          method: 'POST',\n          data: {\n            from: '5m',\n            to: 'now',\n            queries: [\n              {\n                refId: 'A',\n                intervalMs: 1,\n                maxDataPoints: 1,\n                datasource: this.getRef(),\n                rawSql: 'SELECT 1',\n                format: 'table',\n              },\n            ],\n          },\n        })\n        .pipe(\n          mapTo({ status: 'success', message: 'Database Connection OK' }),\n          catchError((err) => {\n            return of(toTestingStatus(err));\n          })\n        )\n    );\n  }\n\n  targetContainsTemplate(target: any) {\n    let rawSql = '';\n\n    if (target.rawQuery) {\n      rawSql = target.rawSql;\n    } else {\n      const query = new MySQLQueryModel(target);\n      rawSql = query.buildQuery();\n    }\n\n    rawSql = rawSql.replace('$__', '');\n\n    return this.templateSrv.containsTemplate(rawSql);\n  }\n}\n","export class MysqlMetaQuery {\n  constructor(private target: any, private queryModel: any) {}\n\n  getOperators(datatype: string) {\n    switch (datatype) {\n      case 'double':\n      case 'float': {\n        return ['=', '!=', '<', '<=', '>', '>='];\n      }\n      case 'text':\n      case 'tinytext':\n      case 'mediumtext':\n      case 'longtext':\n      case 'varchar':\n      case 'char': {\n        return ['=', '!=', '<', '<=', '>', '>=', 'IN', 'NOT IN', 'LIKE', 'NOT LIKE'];\n      }\n      default: {\n        return ['=', '!=', '<', '<=', '>', '>=', 'IN', 'NOT IN'];\n      }\n    }\n  }\n\n  // quote identifier as literal to use in metadata queries\n  quoteIdentAsLiteral(value: string) {\n    return this.queryModel.quoteLiteral(this.queryModel.unquoteIdentifier(value));\n  }\n\n  findMetricTable() {\n    // query that returns first table found that has a timestamp(tz) column and a float column\n    const query = `\n  SELECT\n    table_name as table_name,\n    ( SELECT\n        column_name as column_name\n      FROM information_schema.columns c\n      WHERE\n        c.table_schema = t.table_schema AND\n        c.table_name = t.table_name AND\n        c.data_type IN ('timestamp', 'datetime')\n      ORDER BY ordinal_position LIMIT 1\n    ) AS time_column,\n    ( SELECT\n        column_name AS column_name\n      FROM information_schema.columns c\n      WHERE\n        c.table_schema = t.table_schema AND\n        c.table_name = t.table_name AND\n        c.data_type IN('float', 'int', 'bigint')\n      ORDER BY ordinal_position LIMIT 1\n    ) AS value_column\n  FROM information_schema.tables t\n  WHERE\n    t.table_schema = database() AND\n    EXISTS\n    ( SELECT 1\n      FROM information_schema.columns c\n      WHERE\n        c.table_schema = t.table_schema AND\n        c.table_name = t.table_name AND\n        c.data_type IN ('timestamp', 'datetime')\n    ) AND\n    EXISTS\n    ( SELECT 1\n      FROM information_schema.columns c\n      WHERE\n        c.table_schema = t.table_schema AND\n        c.table_name = t.table_name AND\n        c.data_type IN('float', 'int', 'bigint')\n    )\n  LIMIT 1\n;`;\n    return query;\n  }\n\n  buildTableConstraint(table: string) {\n    let query = '';\n\n    // check for schema qualified table\n    if (table.includes('.')) {\n      const parts = table.split('.');\n      query = 'table_schema = ' + this.quoteIdentAsLiteral(parts[0]);\n      query += ' AND table_name = ' + this.quoteIdentAsLiteral(parts[1]);\n      return query;\n    } else {\n      query = 'table_schema = database() AND table_name = ' + this.quoteIdentAsLiteral(table);\n\n      return query;\n    }\n  }\n\n  buildTableQuery() {\n    return 'SELECT table_name FROM information_schema.tables WHERE table_schema = database() ORDER BY table_name';\n  }\n\n  buildColumnQuery(type?: string) {\n    let query = 'SELECT column_name FROM information_schema.columns WHERE ';\n    query += this.buildTableConstraint(this.target.table);\n\n    switch (type) {\n      case 'time': {\n        query += \" AND data_type IN ('timestamp','datetime','bigint','int','double','float')\";\n        break;\n      }\n      case 'metric': {\n        query += \" AND data_type IN ('text','tinytext','mediumtext','longtext','varchar','char')\";\n        break;\n      }\n      case 'value': {\n        query += \" AND data_type IN ('bigint','int','smallint','mediumint','tinyint','double','decimal','float')\";\n        query += ' AND column_name <> ' + this.quoteIdentAsLiteral(this.target.timeColumn);\n        break;\n      }\n      case 'group': {\n        query += \" AND data_type IN ('text','tinytext','mediumtext','longtext','varchar','char')\";\n        break;\n      }\n    }\n\n    query += ' ORDER BY column_name';\n\n    return query;\n  }\n\n  buildValueQuery(column: string) {\n    let query = 'SELECT DISTINCT QUOTE(' + column + ')';\n    query += ' FROM ' + this.target.table;\n    query += ' WHERE $__timeFilter(' + this.target.timeColumn + ')';\n    query += ' ORDER BY 1 LIMIT 100';\n    return query;\n  }\n\n  buildDatatypeQuery(column: string) {\n    let query = `\nSELECT data_type\nFROM information_schema.columns\nWHERE `;\n    query += ' table_name = ' + this.quoteIdentAsLiteral(this.target.table);\n    query += ' AND column_name = ' + this.quoteIdentAsLiteral(column);\n    return query;\n  }\n}\n","import { SqlPartDef, SqlPart } from 'app/angular/components/sql_part/sql_part';\n\nconst index: any[] = [];\n\nfunction createPart(part: any): any {\n  const def = index[part.type];\n  if (!def) {\n    return null;\n  }\n\n  return new SqlPart(part, def);\n}\n\nfunction register(options: any) {\n  index[options.type] = new SqlPartDef(options);\n}\n\nregister({\n  type: 'column',\n  style: 'label',\n  params: [{ type: 'column', dynamicLookup: true }],\n  defaultParams: ['value'],\n});\n\nregister({\n  type: 'expression',\n  style: 'expression',\n  label: 'Expr:',\n  params: [\n    { name: 'left', type: 'string', dynamicLookup: true },\n    { name: 'op', type: 'string', dynamicLookup: true },\n    { name: 'right', type: 'string', dynamicLookup: true },\n  ],\n  defaultParams: ['value', '=', 'value'],\n});\n\nregister({\n  type: 'macro',\n  style: 'label',\n  label: 'Macro:',\n  params: [],\n  defaultParams: [],\n});\n\nregister({\n  type: 'aggregate',\n  style: 'label',\n  params: [\n    {\n      name: 'name',\n      type: 'string',\n      options: ['avg', 'count', 'min', 'max', 'sum', 'stddev', 'variance'],\n    },\n  ],\n  defaultParams: ['avg'],\n});\n\nregister({\n  type: 'alias',\n  style: 'label',\n  params: [{ name: 'name', type: 'string', quote: 'double' }],\n  defaultParams: ['alias'],\n});\n\nregister({\n  type: 'time',\n  style: 'function',\n  label: 'time',\n  params: [\n    {\n      name: 'interval',\n      type: 'interval',\n      options: ['$__interval', '1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n    {\n      name: 'fill',\n      type: 'string',\n      options: ['none', 'NULL', 'previous', '0'],\n    },\n  ],\n  defaultParams: ['$__interval', 'none'],\n});\n\nexport default {\n  create: createPart,\n};\n","import { auto } from 'angular';\nimport { clone, filter, find, findIndex, indexOf, map } from 'lodash';\n\nimport { PanelEvents, QueryResultMeta } from '@grafana/data';\nimport { TemplateSrv } from '@grafana/runtime';\nimport { SqlPart } from 'app/angular/components/sql_part/sql_part';\nimport appEvents from 'app/core/app_events';\nimport { VariableWithMultiSupport } from 'app/features/variables/types';\nimport { QueryCtrl } from 'app/plugins/sdk';\n\nimport { ShowConfirmModalEvent } from '../../../types/events';\n\nimport { MysqlMetaQuery } from './meta_query';\nimport MySQLQueryModel from './mysql_query_model';\nimport sqlPart from './sql_part';\n\nconst defaultQuery = `SELECT\n  UNIX_TIMESTAMP(<time_column>) as time_sec,\n  <value column> as value,\n  <series name column> as metric\nFROM <table name>\nWHERE $__timeFilter(time_column)\nORDER BY <time_column> ASC\n`;\n\nexport class MysqlQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  formats: any[];\n  lastQueryError?: string;\n  showHelp!: boolean;\n\n  queryModel: MySQLQueryModel;\n  metaBuilder: MysqlMetaQuery;\n  lastQueryMeta?: QueryResultMeta;\n  tableSegment: any;\n  whereAdd: any;\n  timeColumnSegment: any;\n  metricColumnSegment: any;\n  selectMenu: any[] = [];\n  selectParts: SqlPart[][] = [];\n  groupParts: SqlPart[] = [];\n  whereParts: SqlPart[] = [];\n  groupAdd: any;\n\n  /** @ngInject */\n  constructor(\n    $scope: any,\n    $injector: auto.IInjectorService,\n    private templateSrv: TemplateSrv,\n    private uiSegmentSrv: any\n  ) {\n    super($scope, $injector);\n\n    this.target = this.target;\n    this.queryModel = new MySQLQueryModel(this.target, templateSrv, this.panel.scopedVars);\n    this.metaBuilder = new MysqlMetaQuery(this.target, this.queryModel);\n    this.updateProjection();\n\n    this.formats = [\n      { text: 'Time series', value: 'time_series' },\n      { text: 'Table', value: 'table' },\n    ];\n\n    if (!this.target.rawSql) {\n      // special handling when in table panel\n      if (this.panelCtrl.panel.type === 'table') {\n        this.target.format = 'table';\n        this.target.rawSql = 'SELECT 1';\n        this.target.rawQuery = true;\n      } else {\n        this.target.rawSql = defaultQuery;\n        this.datasource.metricFindQuery(this.metaBuilder.findMetricTable()).then((result: any) => {\n          if (result.length > 0) {\n            this.target.table = result[0].text;\n            let segment = this.uiSegmentSrv.newSegment(this.target.table);\n            this.tableSegment.html = segment.html;\n            this.tableSegment.value = segment.value;\n\n            this.target.timeColumn = result[1].text;\n            segment = this.uiSegmentSrv.newSegment(this.target.timeColumn);\n            this.timeColumnSegment.html = segment.html;\n            this.timeColumnSegment.value = segment.value;\n\n            this.target.timeColumnType = 'timestamp';\n            this.target.select = [[{ type: 'column', params: [result[2].text] }]];\n            this.updateProjection();\n            this.updateRawSqlAndRefresh();\n          }\n        });\n      }\n    }\n\n    if (!this.target.table) {\n      this.tableSegment = uiSegmentSrv.newSegment({ value: 'select table', fake: true });\n    } else {\n      this.tableSegment = uiSegmentSrv.newSegment(this.target.table);\n    }\n\n    this.timeColumnSegment = uiSegmentSrv.newSegment(this.target.timeColumn);\n    this.metricColumnSegment = uiSegmentSrv.newSegment(this.target.metricColumn);\n\n    this.buildSelectMenu();\n    this.whereAdd = this.uiSegmentSrv.newPlusButton();\n    this.groupAdd = this.uiSegmentSrv.newPlusButton();\n\n    this.panelCtrl.events.on(PanelEvents.dataReceived, this.onDataReceived.bind(this), $scope);\n    this.panelCtrl.events.on(PanelEvents.dataError, this.onDataError.bind(this), $scope);\n  }\n\n  updateRawSqlAndRefresh() {\n    if (!this.target.rawQuery) {\n      this.target.rawSql = this.queryModel.buildQuery();\n    }\n\n    this.panelCtrl.refresh();\n  }\n\n  updateProjection() {\n    this.selectParts = map(this.target.select, (parts: any) => {\n      return map(parts, sqlPart.create).filter((n) => n);\n    });\n    this.whereParts = map(this.target.where, sqlPart.create).filter((n) => n);\n    this.groupParts = map(this.target.group, sqlPart.create).filter((n) => n);\n  }\n\n  updatePersistedParts() {\n    this.target.select = map(this.selectParts, (selectParts) => {\n      return map(selectParts, (part: any) => {\n        return { type: part.def.type, datatype: part.datatype, params: part.params };\n      });\n    });\n    this.target.where = map(this.whereParts, (part: any) => {\n      return { type: part.def.type, datatype: part.datatype, name: part.name, params: part.params };\n    });\n    this.target.group = map(this.groupParts, (part: any) => {\n      return { type: part.def.type, datatype: part.datatype, params: part.params };\n    });\n  }\n\n  buildSelectMenu() {\n    const aggregates = {\n      text: 'Aggregate Functions',\n      value: 'aggregate',\n      submenu: [\n        { text: 'Average', value: 'avg' },\n        { text: 'Count', value: 'count' },\n        { text: 'Maximum', value: 'max' },\n        { text: 'Minimum', value: 'min' },\n        { text: 'Sum', value: 'sum' },\n        { text: 'Standard deviation', value: 'stddev' },\n        { text: 'Variance', value: 'variance' },\n      ],\n    };\n\n    this.selectMenu.push(aggregates);\n    this.selectMenu.push({ text: 'Alias', value: 'alias' });\n    this.selectMenu.push({ text: 'Column', value: 'column' });\n  }\n\n  toggleEditorMode() {\n    if (this.target.rawQuery) {\n      appEvents.publish(\n        new ShowConfirmModalEvent({\n          title: 'Warning',\n          text2: 'Switching to query builder may overwrite your raw SQL.',\n          icon: 'exclamation-triangle',\n          yesText: 'Switch',\n          onConfirm: () => {\n            // This could be called from React, so wrap in $evalAsync.\n            // Will then either run as part of the current digest cycle or trigger a new one.\n            this.$scope.$evalAsync(() => {\n              this.target.rawQuery = !this.target.rawQuery;\n            });\n          },\n        })\n      );\n    } else {\n      // This could be called from React, so wrap in $evalAsync.\n      // Will then either run as part of the current digest cycle or trigger a new one.\n      this.$scope.$evalAsync(() => {\n        this.target.rawQuery = !this.target.rawQuery;\n      });\n    }\n  }\n\n  resetPlusButton(button: { html: any; value: any }) {\n    const plusButton = this.uiSegmentSrv.newPlusButton();\n    button.html = plusButton.html;\n    button.value = plusButton.value;\n  }\n\n  getTableSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildTableQuery())\n      .then(this.transformToSegments({}))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  tableChanged() {\n    this.target.table = this.tableSegment.value;\n    this.target.where = [];\n    this.target.group = [];\n    this.updateProjection();\n\n    const segment = this.uiSegmentSrv.newSegment('none');\n    this.metricColumnSegment.html = segment.html;\n    this.metricColumnSegment.value = segment.value;\n    this.target.metricColumn = 'none';\n\n    const task1 = this.datasource.metricFindQuery(this.metaBuilder.buildColumnQuery('time')).then((result: any) => {\n      // check if time column is still valid\n      if (result.length > 0 && !find(result, (r: any) => r.text === this.target.timeColumn)) {\n        const segment = this.uiSegmentSrv.newSegment(result[0].text);\n        this.timeColumnSegment.html = segment.html;\n        this.timeColumnSegment.value = segment.value;\n      }\n      return this.timeColumnChanged(false);\n    });\n    const task2 = this.datasource.metricFindQuery(this.metaBuilder.buildColumnQuery('value')).then((result: any) => {\n      if (result.length > 0) {\n        this.target.select = [[{ type: 'column', params: [result[0].text] }]];\n        this.updateProjection();\n      }\n    });\n\n    Promise.all([task1, task2]).then(() => {\n      this.updateRawSqlAndRefresh();\n    });\n  }\n\n  getTimeColumnSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('time'))\n      .then(this.transformToSegments({}))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  timeColumnChanged(refresh?: boolean) {\n    this.target.timeColumn = this.timeColumnSegment.value;\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildDatatypeQuery(this.target.timeColumn))\n      .then((result: any) => {\n        if (result.length === 1) {\n          if (this.target.timeColumnType !== result[0].text) {\n            this.target.timeColumnType = result[0].text;\n          }\n          let partModel;\n          if (this.queryModel.hasUnixEpochTimecolumn()) {\n            partModel = sqlPart.create({ type: 'macro', name: '$__unixEpochFilter', params: [] });\n          } else {\n            partModel = sqlPart.create({ type: 'macro', name: '$__timeFilter', params: [] });\n          }\n\n          if (this.whereParts.length >= 1 && this.whereParts[0].def.type === 'macro') {\n            // replace current macro\n            this.whereParts[0] = partModel;\n          } else {\n            this.whereParts.splice(0, 0, partModel);\n          }\n        }\n\n        this.updatePersistedParts();\n        if (refresh !== false) {\n          this.updateRawSqlAndRefresh();\n        }\n      });\n  }\n\n  getMetricColumnSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('metric'))\n      .then(this.transformToSegments({ addNone: true }))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  metricColumnChanged() {\n    this.target.metricColumn = this.metricColumnSegment.value;\n    this.updateRawSqlAndRefresh();\n  }\n\n  onDataReceived(dataList: any) {\n    this.lastQueryError = undefined;\n    this.lastQueryMeta = dataList[0]?.meta;\n  }\n\n  onDataError(err: any) {\n    if (err.data && err.data.results) {\n      const queryRes = err.data.results[this.target.refId];\n      if (queryRes) {\n        this.lastQueryError = queryRes.error;\n      }\n    }\n  }\n\n  transformToSegments(config: any) {\n    return (results: any) => {\n      const segments = map(results, (segment) => {\n        return this.uiSegmentSrv.newSegment({\n          value: segment.text,\n          expandable: segment.expandable,\n        });\n      });\n\n      if (config.addTemplateVars) {\n        for (const variable of this.templateSrv.getVariables()) {\n          let value;\n          value = '$' + variable.name;\n          if (config.templateQuoter && (variable as unknown as VariableWithMultiSupport).multi === false) {\n            value = config.templateQuoter(value);\n          }\n\n          segments.unshift(\n            this.uiSegmentSrv.newSegment({\n              type: 'template',\n              value: value,\n              expandable: true,\n            })\n          );\n        }\n      }\n\n      if (config.addNone) {\n        segments.unshift(this.uiSegmentSrv.newSegment({ type: 'template', value: 'none', expandable: true }));\n      }\n\n      return segments;\n    };\n  }\n\n  findAggregateIndex(selectParts: any) {\n    return findIndex(selectParts, (p: any) => p.def.type === 'aggregate' || p.def.type === 'percentile');\n  }\n\n  findWindowIndex(selectParts: any) {\n    return findIndex(selectParts, (p: any) => p.def.type === 'window' || p.def.type === 'moving_window');\n  }\n\n  addSelectPart(selectParts: any[], item: { value: any }, subItem: { type: any; value: any }) {\n    let partType = item.value;\n    if (subItem && subItem.type) {\n      partType = subItem.type;\n    }\n    let partModel = sqlPart.create({ type: partType });\n    if (subItem) {\n      partModel.params[0] = subItem.value;\n    }\n    let addAlias = false;\n\n    switch (partType) {\n      case 'column':\n        const parts = map(selectParts, (part: any) => {\n          return sqlPart.create({ type: part.def.type, params: clone(part.params) });\n        });\n        this.selectParts.push(parts);\n        break;\n      case 'percentile':\n      case 'aggregate':\n        // add group by if no group by yet\n        if (this.target.group.length === 0) {\n          this.addGroup('time', '$__interval');\n        }\n        const aggIndex = this.findAggregateIndex(selectParts);\n        if (aggIndex !== -1) {\n          // replace current aggregation\n          selectParts[aggIndex] = partModel;\n        } else {\n          selectParts.splice(1, 0, partModel);\n        }\n        if (!find(selectParts, (p: any) => p.def.type === 'alias')) {\n          addAlias = true;\n        }\n        break;\n      case 'moving_window':\n      case 'window':\n        const windowIndex = this.findWindowIndex(selectParts);\n        if (windowIndex !== -1) {\n          // replace current window function\n          selectParts[windowIndex] = partModel;\n        } else {\n          const aggIndex = this.findAggregateIndex(selectParts);\n          if (aggIndex !== -1) {\n            selectParts.splice(aggIndex + 1, 0, partModel);\n          } else {\n            selectParts.splice(1, 0, partModel);\n          }\n        }\n        if (!find(selectParts, (p: any) => p.def.type === 'alias')) {\n          addAlias = true;\n        }\n        break;\n      case 'alias':\n        addAlias = true;\n        break;\n    }\n\n    if (addAlias) {\n      // set initial alias name to column name\n      partModel = sqlPart.create({ type: 'alias', params: [selectParts[0].params[0].replace(/\"/g, '')] });\n      if (selectParts[selectParts.length - 1].def.type === 'alias') {\n        selectParts[selectParts.length - 1] = partModel;\n      } else {\n        selectParts.push(partModel);\n      }\n    }\n\n    this.updatePersistedParts();\n    this.updateRawSqlAndRefresh();\n  }\n\n  removeSelectPart(selectParts: any, part: { def: { type: string } }) {\n    if (part.def.type === 'column') {\n      // remove all parts of column unless its last column\n      if (this.selectParts.length > 1) {\n        const modelsIndex = indexOf(this.selectParts, selectParts);\n        this.selectParts.splice(modelsIndex, 1);\n      }\n    } else {\n      const partIndex = indexOf(selectParts, part);\n      selectParts.splice(partIndex, 1);\n    }\n\n    this.updatePersistedParts();\n  }\n\n  handleSelectPartEvent(selectParts: any, part: { def: any }, evt: { name: any }) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        switch (part.def.type) {\n          // case 'aggregate':\n          //   return this.datasource\n          //     .metricFindQuery(this.metaBuilder.buildAggregateQuery())\n          //     .then(this.transformToSegments({}))\n          //     .catch(this.handleQueryError.bind(this));\n          case 'column':\n            return this.datasource\n              .metricFindQuery(this.metaBuilder.buildColumnQuery('value'))\n              .then(this.transformToSegments({}))\n              .catch(this.handleQueryError.bind(this));\n        }\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'action': {\n        this.removeSelectPart(selectParts, part);\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return Promise.resolve([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  handleGroupPartEvent(part: any, index: any, evt: { name: any }) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        return this.datasource\n          .metricFindQuery(this.metaBuilder.buildColumnQuery())\n          .then(this.transformToSegments({}))\n          .catch(this.handleQueryError.bind(this));\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'action': {\n        this.removeGroup(part, index);\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return Promise.resolve([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  addGroup(partType: string, value: string) {\n    let params = [value];\n    if (partType === 'time') {\n      params = ['$__interval', 'none'];\n    }\n    const partModel = sqlPart.create({ type: partType, params: params });\n\n    if (partType === 'time') {\n      // put timeGroup at start\n      this.groupParts.splice(0, 0, partModel);\n    } else {\n      this.groupParts.push(partModel);\n    }\n\n    // add aggregates when adding group by\n    for (const selectParts of this.selectParts) {\n      if (!selectParts.some((part) => part.def.type === 'aggregate')) {\n        const aggregate = sqlPart.create({ type: 'aggregate', params: ['avg'] });\n        selectParts.splice(1, 0, aggregate);\n        if (!selectParts.some((part) => part.def.type === 'alias')) {\n          const alias = sqlPart.create({ type: 'alias', params: [selectParts[0].part.params[0]] });\n          selectParts.push(alias);\n        }\n      }\n    }\n\n    this.updatePersistedParts();\n  }\n\n  removeGroup(part: { def: { type: string } }, index: number) {\n    if (part.def.type === 'time') {\n      // remove aggregations\n      this.selectParts = map(this.selectParts, (s: any) => {\n        return filter(s, (part: any) => {\n          if (part.def.type === 'aggregate' || part.def.type === 'percentile') {\n            return false;\n          }\n          return true;\n        });\n      });\n    }\n\n    this.groupParts.splice(index, 1);\n    this.updatePersistedParts();\n  }\n\n  handleWherePartEvent(whereParts: any, part: any, evt: any, index: any) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        switch (evt.param.name) {\n          case 'left':\n            return this.datasource\n              .metricFindQuery(this.metaBuilder.buildColumnQuery())\n              .then(this.transformToSegments({}))\n              .catch(this.handleQueryError.bind(this));\n          case 'right':\n            if (['int', 'bigint', 'double', 'datetime'].indexOf(part.datatype) > -1) {\n              // don't do value lookups for numerical fields\n              return Promise.resolve([]);\n            } else {\n              return this.datasource\n                .metricFindQuery(this.metaBuilder.buildValueQuery(part.params[0]))\n                .then(\n                  this.transformToSegments({\n                    addTemplateVars: true,\n                    templateQuoter: (v: string) => {\n                      return this.queryModel.quoteLiteral(v);\n                    },\n                  })\n                )\n                .catch(this.handleQueryError.bind(this));\n            }\n          case 'op':\n            return Promise.resolve(this.uiSegmentSrv.newOperators(this.metaBuilder.getOperators(part.datatype)));\n          default:\n            return Promise.resolve([]);\n        }\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.datasource.metricFindQuery(this.metaBuilder.buildDatatypeQuery(part.params[0])).then((d: any) => {\n          if (d.length === 1) {\n            part.datatype = d[0].text;\n          }\n        });\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'action': {\n        // remove element\n        whereParts.splice(index, 1);\n        this.updatePersistedParts();\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return Promise.resolve([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  getWhereOptions() {\n    const options = [];\n    if (this.queryModel.hasUnixEpochTimecolumn()) {\n      options.push(this.uiSegmentSrv.newSegment({ type: 'macro', value: '$__unixEpochFilter' }));\n    } else {\n      options.push(this.uiSegmentSrv.newSegment({ type: 'macro', value: '$__timeFilter' }));\n    }\n    options.push(this.uiSegmentSrv.newSegment({ type: 'expression', value: 'Expression' }));\n    return Promise.resolve(options);\n  }\n\n  addWhereAction(part: any, index: number) {\n    switch (this.whereAdd.type) {\n      case 'macro': {\n        const partModel = sqlPart.create({ type: 'macro', name: this.whereAdd.value, params: [] });\n        if (this.whereParts.length >= 1 && this.whereParts[0].def.type === 'macro') {\n          // replace current macro\n          this.whereParts[0] = partModel;\n        } else {\n          this.whereParts.splice(0, 0, partModel);\n        }\n        break;\n      }\n      default: {\n        this.whereParts.push(sqlPart.create({ type: 'expression', params: ['value', '=', 'value'] }));\n      }\n    }\n\n    this.updatePersistedParts();\n    this.resetPlusButton(this.whereAdd);\n    this.updateRawSqlAndRefresh();\n  }\n\n  getGroupOptions() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('group'))\n      .then((tags: any) => {\n        const options = [];\n        if (!this.queryModel.hasTimeGroup()) {\n          options.push(this.uiSegmentSrv.newSegment({ type: 'time', value: 'time($__interval,none)' }));\n        }\n        for (const tag of tags) {\n          options.push(this.uiSegmentSrv.newSegment({ type: 'column', value: tag.text }));\n        }\n        return options;\n      })\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  addGroupAction() {\n    switch (this.groupAdd.value) {\n      default: {\n        this.addGroup(this.groupAdd.type, this.groupAdd.value);\n      }\n    }\n\n    this.resetPlusButton(this.groupAdd);\n    this.updateRawSqlAndRefresh();\n  }\n\n  handleQueryError(err: any): any[] {\n    this.error = err.message || 'Failed to issue metric query';\n    return [];\n  }\n}\n","import { DataSourcePlugin } from '@grafana/data';\n\nimport {\n  createChangeHandler,\n  createResetHandler,\n  PasswordFieldEnum,\n} from '../../../features/datasources/passwordHandlers';\n\nimport { MysqlDatasource } from './datasource';\nimport { MysqlQueryCtrl } from './query_ctrl';\nimport { MySQLQuery } from './types';\n\nclass MysqlConfigCtrl {\n  static templateUrl = 'partials/config.html';\n  current: any;\n  onPasswordReset: ReturnType<typeof createResetHandler>;\n  onPasswordChange: ReturnType<typeof createChangeHandler>;\n\n  constructor() {\n    this.onPasswordReset = createResetHandler(this, PasswordFieldEnum.Password);\n    this.onPasswordChange = createChangeHandler(this, PasswordFieldEnum.Password);\n  }\n}\n\nconst defaultQuery = `SELECT\n    UNIX_TIMESTAMP(<time_column>) as time_sec,\n    <text_column> as text,\n    <tags_column> as tags\n  FROM <table name>\n  WHERE $__timeFilter(time_column)\n  ORDER BY <time_column> ASC\n  LIMIT 100\n  `;\n\nclass MysqlAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n\n  declare annotation: any;\n\n  /** @ngInject */\n  constructor($scope: any) {\n    this.annotation = $scope.ctrl.annotation;\n    this.annotation.rawQuery = this.annotation.rawQuery || defaultQuery;\n  }\n}\n\nexport {\n  MysqlDatasource,\n  MysqlDatasource as Datasource,\n  MysqlQueryCtrl as QueryCtrl,\n  MysqlConfigCtrl as ConfigCtrl,\n  MysqlAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n\nexport const plugin = new DataSourcePlugin<MysqlDatasource, MySQLQuery>(MysqlDatasource)\n  .setQueryCtrl(MysqlQueryCtrl)\n  .setConfigCtrl(MysqlConfigCtrl)\n  .setAnnotationQueryCtrl(MysqlAnnotationsQueryCtrl);\n"],"names":["MySQLQueryModel","constructor","target","templateSrv","scopedVars","this","format","timeColumn","metricColumn","group","where","type","name","params","select","rawQuery","interpolateQueryStr","bind","unquoteIdentifier","value","length","substring","replace","quoteIdentifier","quoteLiteral","escapeLiteral","String","hasTimeGroup","find","g","hasMetricColumn","variable","defaultFormatFn","multi","includeAll","map","join","render","interpolate","rawSql","buildQuery","hasUnixEpochTimecolumn","indexOf","timeColumnType","buildTimeColumn","alias","timeGroup","query","macro","args","buildMetricColumn","buildValueColumns","column","buildValueColumn","aggregate","buildWhereClause","conditions","tag","index","buildGroupClause","groupSection","i","part","table","ResponseParser","transformMetricFindResponse","raw","frames","toDataQueryResponse","data","frame","values","textField","fields","f","valueField","push","text","get","flatMap","toArray","v","uniqBy","options","timeField","Error","timeEndField","tagsField","list","timeEnd","Math","floor","undefined","annotation","time","tags","trim","split","MysqlDatasource","DataSourceWithBackend","instanceSettings","getTemplateSrv","super","queryModel","_map","id","responseParser","settingsData","jsonData","interval","timeInterval","interpolateVariablesInQueries","queries","expandedQueries","datasource","getRef","interpolateVariable","filterQuery","hide","applyTemplateVariables","refId","Promise","reject","message","lastValueFrom","getBackendSrv","fetch","url","method","from","range","valueOf","toString","to","requestId","pipe","async","transformAnnotationResponse","res","metricFindQuery","optionalOptions","getSearchFilterScopedVar","wildcardChar","interpolatedQuery","rsp","catchError","err","of","testDatasource","intervalMs","maxDataPoints","mapTo","status","toTestingStatus","targetContainsTemplate","containsTemplate","MysqlMetaQuery","getOperators","datatype","quoteIdentAsLiteral","findMetricTable","buildTableConstraint","includes","parts","buildTableQuery","buildColumnQuery","buildValueQuery","buildDatatypeQuery","register","SqlPartDef","style","dynamicLookup","defaultParams","label","quote","create","def","SqlPart","MysqlQueryCtrl","QueryCtrl","$scope","$injector","uiSegmentSrv","panel","metaBuilder","updateProjection","formats","panelCtrl","then","result","segment","newSegment","tableSegment","html","timeColumnSegment","updateRawSqlAndRefresh","fake","metricColumnSegment","buildSelectMenu","whereAdd","newPlusButton","groupAdd","events","on","PanelEvents","onDataReceived","onDataError","refresh","selectParts","sqlPart","filter","n","whereParts","groupParts","updatePersistedParts","selectMenu","submenu","toggleEditorMode","appEvents","ShowConfirmModalEvent","title","text2","icon","yesText","onConfirm","$evalAsync","resetPlusButton","button","plusButton","getTableSegments","transformToSegments","catch","handleQueryError","tableChanged","task1","r","timeColumnChanged","task2","all","getTimeColumnSegments","partModel","splice","getMetricColumnSegments","addNone","metricColumnChanged","dataList","lastQueryError","lastQueryMeta","meta","results","queryRes","error","config","segments","expandable","addTemplateVars","getVariables","templateQuoter","unshift","findAggregateIndex","findIndex","p","findWindowIndex","addSelectPart","item","subItem","partType","addAlias","clone","addGroup","aggIndex","windowIndex","removeSelectPart","modelsIndex","partIndex","handleSelectPartEvent","evt","resolve","handleGroupPartEvent","removeGroup","some","s","handleWherePartEvent","param","newOperators","d","getWhereOptions","addWhereAction","getGroupOptions","addGroupAction","MysqlConfigCtrl","onPasswordReset","createResetHandler","PasswordFieldEnum","onPasswordChange","createChangeHandler","MysqlAnnotationsQueryCtrl","ctrl","plugin","DataSourcePlugin","setQueryCtrl","setConfigCtrl","setAnnotationQueryCtrl"],"sourceRoot":""}