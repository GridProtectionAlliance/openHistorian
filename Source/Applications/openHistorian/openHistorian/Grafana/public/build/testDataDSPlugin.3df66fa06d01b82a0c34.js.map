{"version":3,"file":"testDataDSPlugin.3df66fa06d01b82a0c34.js","mappings":"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ACAnK,KAAK0B,IAAD,CAAUlD,MAAOkD,EAAG5C,MAAO4C,MAEpB2I,EAAa,CACxB,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACArK,KAAK0B,IAAD,CAAUlD,MAAOkD,EAAG5C,MAAO4C,M,qCC/HjC,IAAIe,EAAQ,EAyBL,SAAS8H,IAEd,OADA9H,GAASA,EAAQ+H,KAAKC,MAAsB,EAAhBD,KAAKE,WAAiBC,EAAM1G,OACjD0G,EAAMlI,GAWf,MAAMkI,EAAQ,CACZ,KACA,OACA,MACA,KACA,YACA,KACA,QACA,OACA,cACA,UACA,MACA,aACA,cACA,aACA,WACA,QACA,WACA,OACA,UACA,KACA,OACA,YACA,YACA,OACA,YACA,aACA,MACA,YACA,YACA,OACA,KACA,QACA,MACA,UACA,WACA,WACA,QACA,KACA,MACA,UACA,KACA,UACA,OACA,KACA,QACA,SACA,QACA,UACA,MACA,KACA,WACA,aACA,MACA,SACA,UACA,MACA,SACA,QACA,MACA,WACA,QACA,SACA,QACA,UACA,MACA,QACA,KACA,OACA,SACA,UACA,SACA,WACA,QACA,WACA,YACA,MACA,QACA,QACA,cACA,aACA,QACA,YACA,KACA,MACA,WACA,UACA,MACA,QACA,iBACA,QACA,UACA,KACA,KACA,aACA,cACA,OACA,KACA,YACA,MACA,aACA,SACA,QACA,QACA,MACA,UACA,IACA,WACA,WACA,KACA,MACA,aACA,eACA,UACA,QACA,cACA,MACA,cACA,YACA,aACA,YC5IWC,EAAqC,CAChD7K,KAAM,SACN8K,MAAO,IACPC,OAAQ,IACRC,MAAO,IACPC,MAAO,GAGF,SAASC,EAAU5L,EAAuB6L,GAC/C,MAAM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","sources":["webpack://grafana/./public/app/plugins/datasource/testdata/ConfigEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/StreamingClientEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/RandomWalkEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/CSVContentEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/CSVFileEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/constants.ts","webpack://grafana/./public/app/plugins/datasource/testdata/components/CSVWaveEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/ErrorEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/GrafanaLiveEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/NodeGraphEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/PredictablePulseEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/RawFrameEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/SimulationSchemaForm.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/SimulationQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/USAQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/LogIpsum.ts","webpack://grafana/./public/app/plugins/datasource/testdata/runStreams.ts","webpack://grafana/./public/app/plugins/datasource/testdata/QueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/TestInfoTab.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/metricTree.ts","webpack://grafana/./public/app/plugins/datasource/testdata/testData/serviceMapResponse.ts","webpack://grafana/./public/app/plugins/datasource/testdata/nodeGraphUtils.ts","webpack://grafana/./public/app/plugins/datasource/testdata/variables.ts","webpack://grafana/./public/app/plugins/datasource/testdata/datasource.ts","webpack://grafana/./public/app/plugins/datasource/testdata/module.tsx"],"sourcesContent":["// Libraries\nimport React, { PureComponent } from 'react';\n\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\n\ntype Props = DataSourcePluginOptionsEditorProps<any>;\n\n/**\n * Empty Config Editor -- settings to save\n */\nexport class ConfigEditor extends PureComponent<Props> {\n  render() {\n    return <div />;\n  }\n}\n","import React, { ChangeEvent } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { InlineField, InlineFieldRow, Input, Select } from '@grafana/ui';\n\nimport { EditorProps } from '../QueryEditor';\nimport { StreamingQuery } from '../types';\n\nconst streamingClientFields = [\n  { label: 'Speed (ms)', id: 'speed', placeholder: 'value', min: 10, step: 10 },\n  { label: 'Spread', id: 'spread', placeholder: 'value', min: 0.5, step: 0.1 },\n  { label: 'Noise', id: 'noise', placeholder: 'value', min: 0, step: 0.1 },\n  { label: 'Bands', id: 'bands', placeholder: 'bands', min: 0, step: 1 },\n];\n\nconst types = [\n  { value: 'signal', label: 'Signal' },\n  { value: 'logs', label: 'Logs' },\n  { value: 'fetch', label: 'Fetch' },\n];\n\nexport const StreamingClientEditor = ({ onChange, query }: EditorProps) => {\n  const onSelectChange = ({ value }: SelectableValue) => {\n    onChange({ target: { name: 'type', value } });\n  };\n\n  // Convert values to numbers before saving\n  const onInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    onChange({ target: { name, value: Number(value) } });\n  };\n\n  return (\n    <InlineFieldRow>\n      <InlineField label=\"Type\" labelWidth={14}>\n        <Select width={32} onChange={onSelectChange} defaultValue={types[0]} options={types} />\n      </InlineField>\n      {query?.stream?.type === 'signal' &&\n        streamingClientFields.map(({ label, id, min, step, placeholder }) => {\n          return (\n            <InlineField label={label} labelWidth={14} key={id}>\n              <Input\n                width={32}\n                type=\"number\"\n                id={`stream.${id}-${query.refId}`}\n                name={id}\n                min={min}\n                step={step}\n                value={query.stream?.[id as keyof StreamingQuery]}\n                placeholder={placeholder}\n                onChange={onInputChange}\n              />\n            </InlineField>\n          );\n        })}\n\n      {query?.stream?.type === 'fetch' && (\n        <InlineField label=\"URL\" labelWidth={14} grow>\n          <Input\n            type=\"text\"\n            name=\"url\"\n            id={`stream.url-${query.refId}`}\n            value={query?.stream?.url}\n            placeholder=\"Fetch URL\"\n            onChange={onChange}\n          />\n        </InlineField>\n      )}\n    </InlineFieldRow>\n  );\n};\n","import React from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { InlineField, InlineFieldRow, Input } from '@grafana/ui';\n\nimport { EditorProps } from '../QueryEditor';\nimport { TestDataQuery } from '../types';\n\nconst randomWalkFields = [\n  { label: 'Series count', id: 'seriesCount', placeholder: '1', min: 1, step: 1 },\n  { label: 'Start value', id: 'startValue', placeholder: 'auto', step: 1 },\n  { label: 'Min', id: 'min', placeholder: 'none', step: 0.1 },\n  { label: 'Max', id: 'max', placeholder: 'none', step: 0.1 },\n  { label: 'Spread', id: 'spread', placeholder: '1', min: 0.5, step: 0.1 },\n  { label: 'Noise', id: 'noise', placeholder: '0', min: 0, step: 0.1 },\n  {\n    label: 'Drop (%)',\n    id: 'drop',\n    placeholder: '0',\n    min: 0,\n    max: 100,\n    step: 1,\n    tooltip: 'Exclude some percent (chance) points',\n  },\n];\n\nconst testSelectors = selectors.components.DataSource.TestData.QueryTab;\ntype Selector = 'max' | 'min' | 'noise' | 'seriesCount' | 'spread' | 'startValue' | 'drop';\n\nexport const RandomWalkEditor = ({ onChange, query }: EditorProps) => {\n  return (\n    <InlineFieldRow>\n      {randomWalkFields.map(({ label, id, min, step, placeholder, tooltip }) => {\n        const selector = testSelectors?.[id as Selector];\n        return (\n          <InlineField label={label} labelWidth={14} key={id} aria-label={selector} tooltip={tooltip}>\n            <Input\n              width={32}\n              name={id}\n              type=\"number\"\n              id={`randomWalk-${id}-${query.refId}`}\n              min={min}\n              step={step}\n              value={(query as any)[id as keyof TestDataQuery] || placeholder}\n              placeholder={placeholder}\n              onChange={onChange}\n            />\n          </InlineField>\n        );\n      })}\n    </InlineFieldRow>\n  );\n};\n","import React from 'react';\n\nimport { CodeEditor } from '@grafana/ui';\n\nimport { EditorProps } from '../QueryEditor';\n\nexport const CSVContentEditor = ({ onChange, query }: EditorProps) => {\n  const onSaveCSV = (csvContent: string) => {\n    onChange({ ...query, csvContent });\n  };\n\n  return (\n    <CodeEditor\n      height={300}\n      language=\"csv\"\n      value={query.csvContent ?? ''}\n      onBlur={onSaveCSV}\n      onSave={onSaveCSV}\n      showMiniMap={false}\n      showLineNumbers={true}\n    />\n  );\n};\n","import React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { InlineField, InlineFieldRow, Select } from '@grafana/ui';\n\nimport { EditorProps } from '../QueryEditor';\n\nexport const CSVFileEditor = ({ onChange, query }: EditorProps) => {\n  const onChangeFileName = ({ value }: SelectableValue<string>) => {\n    onChange({ ...query, csvFileName: value });\n  };\n\n  const files = [\n    'flight_info_by_state.csv',\n    'population_by_state.csv',\n    'gdp_per_capita.csv',\n    'js_libraries.csv',\n    'ohlc_dogecoin.csv',\n    'weight_height.csv',\n    'browser_marketshare.csv',\n  ].map((name) => ({ label: name, value: name }));\n\n  return (\n    <InlineFieldRow>\n      <InlineField label=\"File\" labelWidth={14}>\n        <Select\n          width={32}\n          onChange={onChangeFileName}\n          placeholder=\"Select csv file\"\n          options={files}\n          value={files.find((f) => f.value === query.csvFileName)}\n        />\n      </InlineField>\n    </InlineFieldRow>\n  );\n};\n","import { CSVWave, TestDataQuery } from './types';\n\nexport const defaultPulseQuery: any = {\n  timeStep: 60,\n  onCount: 3,\n  onValue: 2,\n  offCount: 3,\n  offValue: 1,\n};\n\nexport const defaultCSVWaveQuery: CSVWave[] = [\n  {\n    timeStep: 60,\n    valuesCSV: '0,0,2,2,1,1',\n  },\n];\n\nexport const defaultQuery: TestDataQuery = {\n  scenarioId: 'random_walk',\n  refId: '',\n};\n","import React, { PureComponent, useState } from 'react';\n\nimport { Button, InlineField, InlineFieldRow, Input } from '@grafana/ui';\n\nimport { defaultCSVWaveQuery } from '../constants';\nimport type { CSVWave } from '../types';\n\ninterface WavesProps {\n  waves?: CSVWave[];\n  onChange: (waves: CSVWave[]) => void;\n}\n\ninterface WaveProps {\n  wave: CSVWave;\n  index: number;\n  last: boolean;\n  onChange: (index: number, wave?: CSVWave) => void;\n  onAdd: () => void;\n}\n\nconst CSVWaveEditor = (props: WaveProps) => {\n  const { wave, last, index, onAdd, onChange } = props;\n  const [valuesCSV, setValuesCSV] = useState(wave.valuesCSV || '');\n  const [labels, setLabels] = useState(wave.labels || '');\n  const [name, setName] = useState(wave.name || '');\n  const onAction = () => {\n    if (last) {\n      onAdd();\n    } else {\n      onChange(index, undefined);\n    }\n  };\n  const onValueChange = <K extends keyof CSVWave, V extends CSVWave[K]>(key: K, value: V) => {\n    onChange(index, { ...wave, [key]: value });\n  };\n  const onKeyDown = (evt: React.KeyboardEvent<HTMLInputElement>) => {\n    if (evt.key === 'Enter') {\n      onValueChange('valuesCSV', valuesCSV);\n    }\n  };\n\n  return (\n    <InlineFieldRow>\n      <InlineField\n        label={'Values'}\n        grow\n        tooltip=\"Comma separated values. Each value may be an int, float, or null and must not be empty. Whitespace and trailing commas are removed\"\n      >\n        <Input\n          value={valuesCSV}\n          placeholder={'CSV values'}\n          onChange={(e) => setValuesCSV(e.currentTarget.value)}\n          autoFocus={true}\n          onBlur={() => onValueChange('valuesCSV', valuesCSV)}\n          onKeyDown={onKeyDown}\n        />\n      </InlineField>\n      <InlineField label={'Step'} tooltip=\"The number of seconds between datapoints.\">\n        <Input\n          value={wave.timeStep}\n          type=\"number\"\n          placeholder={'60'}\n          width={10}\n          onChange={(e) => onValueChange('timeStep', e.currentTarget.valueAsNumber)}\n        />\n      </InlineField>\n      <InlineField label={'Name'}>\n        <Input\n          value={name}\n          placeholder={'name'}\n          width={10}\n          onChange={(e) => setName(e.currentTarget.value)}\n          onBlur={() => onValueChange('name', name)}\n        />\n      </InlineField>\n      <InlineField label={'Labels'}>\n        <Input\n          value={labels}\n          placeholder={'labels'}\n          width={12}\n          onChange={(e) => setLabels(e.currentTarget.value)}\n          onBlur={() => onValueChange('labels', labels)}\n        />\n      </InlineField>\n      <Button icon={last ? 'plus' : 'minus'} variant=\"secondary\" onClick={onAction} />\n    </InlineFieldRow>\n  );\n};\n\nexport class CSVWavesEditor extends PureComponent<WavesProps> {\n  onChange = (index: number, wave?: CSVWave) => {\n    let waves = [...(this.props.waves ?? defaultCSVWaveQuery)];\n    if (wave) {\n      waves[index] = { ...wave };\n    } else {\n      // remove the element\n      waves.splice(index, 1);\n    }\n    this.props.onChange(waves);\n  };\n\n  onAdd = () => {\n    const waves = [...(this.props.waves ?? defaultCSVWaveQuery)];\n    waves.push({ ...defaultCSVWaveQuery[0] });\n    this.props.onChange(waves);\n  };\n\n  render() {\n    let waves = this.props.waves ?? defaultCSVWaveQuery;\n    if (!waves.length) {\n      waves = defaultCSVWaveQuery;\n    }\n\n    return (\n      <>\n        {waves.map((wave, index) => (\n          <CSVWaveEditor\n            key={`${index}/${wave.valuesCSV}`}\n            wave={wave}\n            index={index}\n            onAdd={this.onAdd}\n            onChange={this.onChange}\n            last={index === waves.length - 1}\n          />\n        ))}\n      </>\n    );\n  }\n}\n","import React from 'react';\n\nimport { InlineField, InlineFieldRow, Select } from '@grafana/ui';\n\nimport { EditorProps } from '../QueryEditor';\n\nconst ERROR_OPTIONS = [\n  {\n    label: 'Server panic',\n    value: 'server_panic',\n  },\n  {\n    label: 'Frontend exception',\n    value: 'frontend_exception',\n  },\n  {\n    label: 'Frontend observable',\n    value: 'frontend_observable',\n  },\n];\n\nconst FrontendErrorQueryEditor: React.FC<EditorProps> = ({ query, onChange }) => {\n  return (\n    <InlineFieldRow>\n      <InlineField labelWidth={14} label=\"Error type\">\n        <Select\n          options={ERROR_OPTIONS}\n          value={query.errorType}\n          onChange={(v) => {\n            onChange({ ...query, errorType: v.value });\n          }}\n        />\n      </InlineField>\n    </InlineFieldRow>\n  );\n};\n\nexport default FrontendErrorQueryEditor;\n","import React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { InlineField, InlineFieldRow, Select } from '@grafana/ui';\n\nimport { EditorProps } from '../QueryEditor';\n\nconst liveTestDataChannels = [\n  {\n    label: 'random-2s-stream',\n    value: 'random-2s-stream',\n    description: 'Random stream with points every 2s',\n  },\n  {\n    label: 'random-flakey-stream',\n    value: 'random-flakey-stream',\n    description: 'Stream that returns data in random intervals',\n  },\n  {\n    label: 'random-labeled-stream',\n    value: 'random-labeled-stream',\n    description: 'Value with moving labels',\n  },\n  {\n    label: 'random-20Hz-stream',\n    value: 'random-20Hz-stream',\n    description: 'Random stream with points in 20Hz',\n  },\n];\n\nexport const GrafanaLiveEditor = ({ onChange, query }: EditorProps) => {\n  const onChannelChange = ({ value }: SelectableValue<string>) => {\n    onChange({ ...query, channel: value });\n  };\n\n  return (\n    <InlineFieldRow>\n      <InlineField label=\"Channel\" labelWidth={14}>\n        <Select\n          width={32}\n          onChange={onChannelChange}\n          placeholder=\"Select channel\"\n          options={liveTestDataChannels}\n          value={liveTestDataChannels.find((f) => f.value === query.channel)}\n        />\n      </InlineField>\n    </InlineFieldRow>\n  );\n};\n","import React from 'react';\n\nimport { Input, InlineFieldRow, InlineField, Select } from '@grafana/ui';\n\nimport { NodesQuery, TestDataQuery } from '../types';\n\nexport interface Props {\n  onChange: (value: NodesQuery) => void;\n  query: TestDataQuery;\n}\nexport function NodeGraphEditor({ query, onChange }: Props) {\n  const type = query.nodes?.type || 'random';\n  return (\n    <InlineFieldRow>\n      <InlineField label=\"Data type\" labelWidth={14}>\n        <Select<NodesQuery['type']>\n          options={options.map((o) => ({\n            label: o,\n            value: o,\n          }))}\n          value={options.find((item) => item === type)}\n          onChange={(value) => onChange({ ...query.nodes, type: value.value! })}\n          width={32}\n        />\n      </InlineField>\n      {type === 'random' && (\n        <InlineField label=\"Count\" labelWidth={14}>\n          <Input\n            type=\"number\"\n            name=\"count\"\n            value={query.nodes?.count}\n            width={32}\n            onChange={(e) =>\n              onChange({ ...query.nodes, count: e.currentTarget.value ? parseInt(e.currentTarget.value, 10) : 0 })\n            }\n            placeholder=\"10\"\n          />\n        </InlineField>\n      )}\n    </InlineFieldRow>\n  );\n}\n\nconst options: Array<NodesQuery['type']> = ['random', 'response'];\n","import React, { ChangeEvent } from 'react';\n\nimport { InlineField, InlineFieldRow, Input } from '@grafana/ui';\n\nimport { EditorProps } from '../QueryEditor';\nimport { PulseWaveQuery } from '../types';\n\nconst fields = [\n  { label: 'Step', id: 'timeStep', placeholder: '60', tooltip: 'The number of seconds between datapoints.' },\n  {\n    label: 'On Count',\n    id: 'onCount',\n    placeholder: '3',\n    tooltip: 'The number of values within a cycle, at the start of the cycle, that should have the onValue.',\n  },\n  { label: 'Off Count', id: 'offCount', placeholder: '6', tooltip: 'The number of offValues within the cycle.' },\n  {\n    label: 'On Value',\n    id: 'onValue',\n    placeholder: '1',\n    tooltip: 'The value for \"on values\", may be an int, float, or null.',\n  },\n  {\n    label: 'Off Value',\n    id: 'offValue',\n    placeholder: '1',\n    tooltip: 'The value for \"off values\", may be a int, float, or null.',\n  },\n];\n\nexport const PredictablePulseEditor = ({ onChange, query }: EditorProps) => {\n  // Convert values to numbers before saving\n  const onInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n\n    onChange({ target: { name, value: Number(value) } });\n  };\n\n  return (\n    <InlineFieldRow>\n      {fields.map(({ label, id, placeholder, tooltip }) => {\n        return (\n          <InlineField label={label} labelWidth={14} key={id} tooltip={tooltip}>\n            <Input\n              width={32}\n              type=\"number\"\n              name={id}\n              id={`pulseWave.${id}-${query.refId}`}\n              value={query.pulseWave?.[id as keyof PulseWaveQuery]}\n              placeholder={placeholder}\n              onChange={onInputChange}\n            />\n          </InlineField>\n        );\n      })}\n    </InlineFieldRow>\n  );\n};\n","import { isArray } from 'lodash';\nimport React, { useState } from 'react';\n\nimport { dataFrameToJSON, toDataFrame, toDataFrameDTO } from '@grafana/data';\nimport { toDataQueryResponse } from '@grafana/runtime';\nimport { Alert, CodeEditor } from '@grafana/ui';\n\nimport { EditorProps } from '../QueryEditor';\n\nexport const RawFrameEditor = ({ onChange, query }: EditorProps) => {\n  const [error, setError] = useState<string>();\n  const [warning, setWarning] = useState<string>();\n\n  const onSaveFrames = (rawFrameContent: string) => {\n    try {\n      const json = JSON.parse(rawFrameContent);\n      if (isArray(json)) {\n        setError(undefined);\n        setWarning(undefined);\n        onChange({ ...query, rawFrameContent });\n        return;\n      }\n\n      let data: any = undefined;\n\n      // Copy paste from panel json\n      if (isArray(json.series) && json.state) {\n        data = json.series.map((v: any) => toDataFrameDTO(toDataFrame(v)));\n      } else {\n        // Chek if it is a copy of the raw resuls\n        const v = toDataQueryResponse({ data: json });\n        if (v.data?.length && !v.error) {\n          data = v.data.map((f) => dataFrameToJSON(f));\n        }\n      }\n\n      if (data) {\n        console.log('Original', json);\n        console.log('Save', data);\n        setError(undefined);\n        setWarning('Converted to direct frame result');\n        onChange({ ...query, rawFrameContent: JSON.stringify(data, null, 2) });\n        return;\n      }\n\n      setError('Unable to read dataframes in text');\n    } catch (e) {\n      console.log('Error parsing json', e);\n      setError('Enter JSON array of data frames (or raw query results body)');\n      setWarning(undefined);\n    }\n  };\n\n  return (\n    <>\n      {error && <Alert title={error} severity=\"error\" />}\n      {warning && <Alert title={warning} severity=\"warning\" />}\n      <CodeEditor\n        height={300}\n        language=\"json\"\n        value={query.rawFrameContent ?? '[]'}\n        onBlur={onSaveFrames}\n        onSave={onSaveFrames}\n        showMiniMap={true}\n        showLineNumbers={true}\n      />\n    </>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { FormEvent, useState, ChangeEvent } from 'react';\n\nimport { DataFrameSchema, FieldSchema, GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2, TextArea, InlineField, Input, FieldSet, InlineSwitch } from '@grafana/ui';\n\ninterface SchemaFormProps {\n  config: Record<string, any>;\n  schema: DataFrameSchema;\n  onChange: (config: Record<string, any>) => void;\n}\n\nconst renderInput = (field: FieldSchema, onChange: SchemaFormProps['onChange'], config: SchemaFormProps['config']) => {\n  switch (field.type) {\n    case 'number':\n      return (\n        <Input\n          type=\"number\"\n          defaultValue={config?.[field.name]}\n          onChange={(e: FormEvent<HTMLInputElement>) => {\n            const newValue = e.currentTarget.valueAsNumber;\n            onChange({ ...config, [field.name]: newValue });\n          }}\n        />\n      );\n    case 'boolean':\n      return (\n        <InlineSwitch\n          value={config?.[field.name] ?? true}\n          onChange={() => {\n            onChange({ ...config, [field.name]: !config[field.name] });\n          }}\n        />\n      );\n    default:\n      return (\n        <Input\n          type=\"string\"\n          value={config?.[field.name]}\n          onChange={(e: ChangeEvent<HTMLInputElement>) => {\n            const newValue = e.target.value;\n            onChange({ ...config, [field.name]: newValue });\n          }}\n        />\n      );\n  }\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    jsonView: css`\n      margin-bottom: ${theme.spacing(1)};\n    `,\n  };\n};\n\nexport const SimulationSchemaForm = ({ config, schema, onChange }: SchemaFormProps) => {\n  const [jsonView, setJsonView] = useState<boolean>(false);\n\n  const styles = useStyles2(getStyles);\n\n  const onUpdateTextArea = (event: FormEvent<HTMLTextAreaElement>) => {\n    const element = event.target as HTMLInputElement;\n    onChange(JSON.parse(element.value));\n  };\n\n  return (\n    <FieldSet label=\"Config\">\n      <InlineSwitch\n        className={styles.jsonView}\n        label=\"JSON View\"\n        showLabel\n        value={jsonView}\n        onChange={() => setJsonView(!jsonView)}\n      />\n      {jsonView ? (\n        <TextArea defaultValue={JSON.stringify(config, null, 2)} rows={7} onChange={onUpdateTextArea} />\n      ) : (\n        <>\n          {schema.fields.map((field) => (\n            <InlineField label={field.name} key={field.name} labelWidth={14}>\n              {renderInput(field, onChange, config)}\n            </InlineField>\n          ))}\n        </>\n      )}\n    </FieldSet>\n  );\n};\n","import React, { FormEvent, useMemo, useState } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { DataFrameJSON, SelectableValue } from '@grafana/data';\nimport { InlineField, InlineFieldRow, InlineSwitch, Input, Label, Select } from '@grafana/ui';\n\nimport { EditorProps } from '../QueryEditor';\nimport { SimulationQuery } from '../types';\n\nimport { SimulationSchemaForm } from './SimulationSchemaForm';\n\n// Type         string      `json:\"type\"`\n// Name         string      `json:\"name\"`\n// Description  string      `json:\"description\"`\n// OnlyForward  bool        `json:\"forward\"`\n// ConfigFields *data.Frame `json:\"config\"`\n\ninterface SimInfo {\n  type: string;\n  name: string;\n  description: string;\n  forward: boolean;\n  config: DataFrameJSON;\n}\n\nexport const SimulationQueryEditor = ({ onChange, query, ds }: EditorProps) => {\n  const simQuery = query.sim ?? ({} as SimulationQuery);\n  const simKey = simQuery.key ?? ({} as typeof simQuery.key);\n  // keep track of updated config state to pass down to form\n  const [cfgValue, setCfgValue] = useState<Record<string, any>>({});\n\n  // This only changes once\n  const info = useAsync(async () => {\n    const v = (await ds.getResource('sims')) as SimInfo[];\n    return {\n      sims: v,\n      options: v.map((s) => ({ label: s.name, value: s.type, description: s.description })),\n    };\n  }, [ds]);\n\n  const current = useMemo(() => {\n    const type = simKey.type;\n    if (!type || !info.value) {\n      return {};\n    }\n    return {\n      details: info.value.sims.find((v) => v.type === type),\n      option: info.value.options.find((v) => v.value === type),\n    };\n  }, [info.value, simKey?.type]);\n\n  let config = useAsync(async () => {\n    let path = simKey.type + '/' + simKey.tick + 'hz';\n    if (simKey.uid) {\n      path += '/' + simKey.uid;\n    }\n    let config = (await ds.getResource('sim/' + path))?.config;\n    setCfgValue(config.value);\n    return config;\n  }, [simKey.type, simKey.tick, simKey.uid]);\n\n  const onUpdateKey = (key: typeof simQuery.key) => {\n    onChange({ ...query, sim: { ...simQuery, key } });\n  };\n\n  const onUIDChanged = (e: FormEvent<HTMLInputElement>) => {\n    const { value } = e.target as HTMLInputElement;\n    onUpdateKey({ ...simKey, uid: value ?? undefined });\n  };\n\n  const onTickChanged = (e: FormEvent<HTMLInputElement>) => {\n    const tick = e.currentTarget.valueAsNumber;\n    onUpdateKey({ ...simKey, tick });\n  };\n\n  const onTypeChange = (v: SelectableValue<string>) => {\n    onUpdateKey({ ...simKey, type: v.value! });\n  };\n\n  const onToggleStream = () => {\n    onChange({ ...query, sim: { ...simQuery, stream: !simQuery.stream } });\n  };\n\n  const onToggleLast = () => {\n    onChange({ ...query, sim: { ...simQuery, last: !simQuery.last } });\n  };\n\n  const onSchemaFormChange = (config: Record<string, any>) => {\n    let path = simKey.type + '/' + simKey.tick + 'hz';\n    if (simKey.uid) {\n      path += '/' + simKey.uid;\n    }\n    ds.postResource('sim/' + path, config).then((res) => {\n      setCfgValue(res.config);\n    });\n  };\n  return (\n    <>\n      <InlineFieldRow>\n        <InlineField labelWidth={14} label=\"Simulation\" tooltip=\"\">\n          <Select\n            isLoading={info.loading}\n            options={info.value?.options ?? []}\n            value={current.option}\n            onChange={onTypeChange}\n            width={32}\n          />\n        </InlineField>\n      </InlineFieldRow>\n      <InlineFieldRow>\n        <InlineField labelWidth={14} label=\"Stream\" tooltip=\"connect to the live channel\">\n          <InlineSwitch value={Boolean(simQuery.stream)} onChange={onToggleStream} />\n        </InlineField>\n\n        <InlineField label=\"Interval\" tooltip=\"the rate a simulation will spit out events\">\n          <Input\n            width={10}\n            type=\"number\"\n            value={simKey.tick}\n            onChange={onTickChanged}\n            min={1 / 10}\n            max={50}\n            suffix=\"hz\"\n          />\n        </InlineField>\n\n        <InlineField label=\"Last\" tooltip=\"Only return the last value\">\n          <Label>\n            <InlineSwitch value={Boolean(simQuery.last)} onChange={onToggleLast} />\n          </Label>\n        </InlineField>\n        <InlineField label=\"UID\" tooltip=\"A UID will allow multiple simulations to run at the same time\">\n          <Input type=\"text\" placeholder=\"optional\" value={simQuery.key.uid} onChange={onUIDChanged} />\n        </InlineField>\n      </InlineFieldRow>\n      <SimulationSchemaForm\n        onChange={onSchemaFormChange}\n        config={cfgValue ?? config.value}\n        schema={current.details?.config.schema ?? { fields: [] }}\n      />\n    </>\n  );\n};\n","import React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { InlineFieldRow, InlineField, Select, MultiSelect, Input } from '@grafana/ui';\n\nimport { USAQuery } from '../types';\n\nexport interface Props {\n  onChange: (value: USAQuery) => void;\n  query: USAQuery;\n}\n\nexport function USAQueryEditor({ query, onChange }: Props) {\n  return (\n    <>\n      <InlineFieldRow>\n        <InlineField labelWidth={14} label=\"Mode\">\n          <Select\n            options={usaQueryModes}\n            onChange={(v) => {\n              onChange({ ...query, mode: v.value });\n            }}\n            width={32}\n            value={usaQueryModes.find((ep) => ep.value === query.mode)}\n          />\n        </InlineField>\n        <InlineField label=\"Period\">\n          <Input\n            value={query.period}\n            placeholder={'30m'}\n            onChange={(v) => {\n              onChange({ ...query, period: v.currentTarget.value });\n            }}\n          />\n        </InlineField>\n      </InlineFieldRow>\n      <InlineFieldRow>\n        <InlineField labelWidth={14} label=\"Fields\">\n          <MultiSelect\n            options={fieldNames}\n            onChange={(vals: SelectableValue[]) => {\n              onChange({ ...query, fields: vals.map((v) => v.value) });\n            }}\n            width={32}\n            placeholder=\"all\"\n            value={query.fields}\n          />\n        </InlineField>\n        <InlineField label=\"States\" grow>\n          <MultiSelect\n            options={stateNames}\n            onChange={(vals: SelectableValue[]) => {\n              onChange({ ...query, states: vals.map((v) => v.value) });\n            }}\n            placeholder=\"all\"\n            value={query.states}\n          />\n        </InlineField>\n      </InlineFieldRow>\n    </>\n  );\n}\n\nexport const usaQueryModes = [\n  'values-as-rows',\n  'values-as-fields',\n  'values-as-labeled-fields',\n  'timeseries',\n  'timeseries-wide',\n].map((f) => ({ label: f, value: f }));\n\nexport const fieldNames = [\n  'foo',\n  'bar',\n  'baz', // all short\n].map((f) => ({ label: f, value: f }));\n\nexport const stateNames = [\n  'AL',\n  'AK',\n  'AZ',\n  'AR',\n  'CA',\n  'CO',\n  'CT',\n  'DE',\n  'DC',\n  'FL',\n  'GA',\n  'HI',\n  'ID',\n  'IL',\n  'IN',\n  'IA',\n  'KS',\n  'KY',\n  'LA',\n  'ME',\n  'MT',\n  'NE',\n  'NV',\n  'NH',\n  'NJ',\n  'NM',\n  'NY',\n  'NC',\n  'ND',\n  'OH',\n  'OK',\n  'OR',\n  'MD',\n  'MA',\n  'MI',\n  'MN',\n  'MS',\n  'MO',\n  'PA',\n  'RI',\n  'SC',\n  'SD',\n  'TN',\n  'TX',\n  'UT',\n  'VT',\n  'VA',\n  'WA',\n  'WV',\n  'WI',\n  'WY',\n].map((f) => ({ label: f, value: f }));\n","import { LogLevel } from '@grafana/data';\n\nlet index = 0;\n\nexport function getRandomLogLevel(): LogLevel {\n  const v = Math.random();\n  if (v > 0.9) {\n    return LogLevel.critical;\n  }\n  if (v > 0.8) {\n    return LogLevel.error;\n  }\n  if (v > 0.7) {\n    return LogLevel.warning;\n  }\n  if (v > 0.4) {\n    return LogLevel.info;\n  }\n  if (v > 0.3) {\n    return LogLevel.debug;\n  }\n  if (v > 0.1) {\n    return LogLevel.trace;\n  }\n  return LogLevel.unknown;\n}\n\nexport function getNextWord() {\n  index = (index + Math.floor(Math.random() * 5)) % words.length;\n  return words[index];\n}\n\nexport function getRandomLine(length = 60) {\n  let line = getNextWord();\n  while (line.length < length) {\n    line += ' ' + getNextWord();\n  }\n  return line;\n}\n\nconst words = [\n  'At',\n  'vero',\n  'eos',\n  'et',\n  'accusamus',\n  'et',\n  'iusto',\n  'odio',\n  'dignissimos',\n  'ducimus',\n  'qui',\n  'blanditiis',\n  'praesentium',\n  'voluptatum',\n  'deleniti',\n  'atque',\n  'corrupti',\n  'quos',\n  'dolores',\n  'et',\n  'quas',\n  'molestias',\n  'excepturi',\n  'sint',\n  'occaecati',\n  'cupiditate',\n  'non',\n  'provident',\n  'similique',\n  'sunt',\n  'in',\n  'culpa',\n  'qui',\n  'officia',\n  'deserunt',\n  'mollitia',\n  'animi',\n  'id',\n  'est',\n  'laborum',\n  'et',\n  'dolorum',\n  'fuga',\n  'Et',\n  'harum',\n  'quidem',\n  'rerum',\n  'facilis',\n  'est',\n  'et',\n  'expedita',\n  'distinctio',\n  'Nam',\n  'libero',\n  'tempore',\n  'cum',\n  'soluta',\n  'nobis',\n  'est',\n  'eligendi',\n  'optio',\n  'cumque',\n  'nihil',\n  'impedit',\n  'quo',\n  'minus',\n  'id',\n  'quod',\n  'maxime',\n  'placeat',\n  'facere',\n  'possimus',\n  'omnis',\n  'voluptas',\n  'assumenda',\n  'est',\n  'omnis',\n  'dolor',\n  'repellendus',\n  'Temporibus',\n  'autem',\n  'quibusdam',\n  'et',\n  'aut',\n  'officiis',\n  'debitis',\n  'aut',\n  'rerum',\n  'necessitatibus',\n  'saepe',\n  'eveniet',\n  'ut',\n  'et',\n  'voluptates',\n  'repudiandae',\n  'sint',\n  'et',\n  'molestiae',\n  'non',\n  'recusandae',\n  'Itaque',\n  'earum',\n  'rerum',\n  'hic',\n  'tenetur',\n  'a',\n  'sapiente',\n  'delectus',\n  'ut',\n  'aut',\n  'reiciendis',\n  'voluptatibus',\n  'maiores',\n  'alias',\n  'consequatur',\n  'aut',\n  'perferendis',\n  'doloribus',\n  'asperiores',\n  'repellat',\n];\n","import { defaults } from 'lodash';\nimport { Observable } from 'rxjs';\n\nimport {\n  DataQueryRequest,\n  DataQueryResponse,\n  FieldType,\n  CircularDataFrame,\n  CSVReader,\n  Field,\n  LoadingState,\n  DataFrameSchema,\n  DataFrameData,\n} from '@grafana/data';\nimport { liveTimer } from 'app/features/dashboard/dashgrid/liveTimer';\nimport { StreamingDataFrame } from 'app/features/live/data/StreamingDataFrame';\n\nimport { getRandomLine } from './LogIpsum';\nimport { TestDataQuery, StreamingQuery } from './types';\n\nexport const defaultStreamQuery: StreamingQuery = {\n  type: 'signal',\n  speed: 250, // ms\n  spread: 3.5,\n  noise: 2.2,\n  bands: 1,\n};\n\nexport function runStream(target: TestDataQuery, req: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n  const query = defaults(target.stream, defaultStreamQuery);\n  if ('signal' === query.type) {\n    return runSignalStream(target, query, req);\n  }\n  if ('logs' === query.type) {\n    return runLogsStream(target, query, req);\n  }\n  if ('fetch' === query.type) {\n    return runFetchStream(target, query, req);\n  }\n  throw new Error(`Unknown Stream Type: ${query.type}`);\n}\n\nexport function runSignalStream(\n  target: TestDataQuery,\n  query: StreamingQuery,\n  req: DataQueryRequest<TestDataQuery>\n): Observable<DataQueryResponse> {\n  return new Observable<DataQueryResponse>((subscriber) => {\n    const streamId = `signal-${req.panelId}-${target.refId}`;\n    const maxDataPoints = req.maxDataPoints || 1000;\n\n    const schema: DataFrameSchema = {\n      refId: target.refId,\n      fields: [\n        { name: 'time', type: FieldType.time },\n        { name: target.alias ?? 'value', type: FieldType.number },\n      ],\n    };\n\n    const { spread, speed, bands = 0, noise } = query;\n    for (let i = 0; i < bands; i++) {\n      const suffix = bands > 1 ? ` ${i + 1}` : '';\n      schema.fields.push({ name: 'Min' + suffix, type: FieldType.number });\n      schema.fields.push({ name: 'Max' + suffix, type: FieldType.number });\n    }\n\n    const frame = StreamingDataFrame.fromDataFrameJSON({ schema }, { maxLength: maxDataPoints });\n\n    let value = Math.random() * 100;\n    let timeoutId: any = null;\n    let lastSent = -1;\n\n    const addNextRow = (time: number) => {\n      value += (Math.random() - 0.5) * spread;\n\n      const data: DataFrameData = {\n        values: [[time], [value]],\n      };\n\n      let min = value;\n      let max = value;\n\n      for (let i = 0; i < bands; i++) {\n        min = min - Math.random() * noise;\n        max = max + Math.random() * noise;\n\n        data.values.push([min]);\n        data.values.push([max]);\n      }\n\n      const event = { data };\n      return frame.push(event);\n    };\n\n    // Fill the buffer on init\n    if (true) {\n      let time = Date.now() - maxDataPoints * speed;\n      for (let i = 0; i < maxDataPoints; i++) {\n        addNextRow(time);\n        time += speed;\n      }\n    }\n\n    const pushNextEvent = () => {\n      addNextRow(Date.now());\n\n      const elapsed = liveTimer.lastUpdate - lastSent;\n      if (elapsed > 1000 || liveTimer.ok) {\n        subscriber.next({\n          data: [frame],\n          key: streamId,\n          state: LoadingState.Streaming,\n        });\n        lastSent = liveTimer.lastUpdate;\n      }\n\n      timeoutId = setTimeout(pushNextEvent, speed);\n    };\n\n    // Send first event in 5ms\n    setTimeout(pushNextEvent, 5);\n\n    return () => {\n      console.log('unsubscribing to stream ' + streamId);\n      clearTimeout(timeoutId);\n    };\n  });\n}\n\nexport function runLogsStream(\n  target: TestDataQuery,\n  query: StreamingQuery,\n  req: DataQueryRequest<TestDataQuery>\n): Observable<DataQueryResponse> {\n  return new Observable<DataQueryResponse>((subscriber) => {\n    const streamId = `logs-${req.panelId}-${target.refId}`;\n    const maxDataPoints = req.maxDataPoints || 1000;\n\n    const data = new CircularDataFrame({\n      append: 'tail',\n      capacity: maxDataPoints,\n    });\n    data.refId = target.refId;\n    data.name = target.alias || 'Logs ' + target.refId;\n    data.addField({ name: 'line', type: FieldType.string });\n    data.addField({ name: 'time', type: FieldType.time });\n    data.meta = { preferredVisualisationType: 'logs' };\n\n    const { speed } = query;\n\n    let timeoutId: any = null;\n\n    const pushNextEvent = () => {\n      data.fields[0].values.add(Date.now());\n      data.fields[1].values.add(getRandomLine());\n\n      subscriber.next({\n        data: [data],\n        key: streamId,\n      });\n\n      timeoutId = setTimeout(pushNextEvent, speed);\n    };\n\n    // Send first event in 5ms\n    setTimeout(pushNextEvent, 5);\n\n    return () => {\n      console.log('unsubscribing to stream ' + streamId);\n      clearTimeout(timeoutId);\n    };\n  });\n}\n\nexport function runFetchStream(\n  target: TestDataQuery,\n  query: StreamingQuery,\n  req: DataQueryRequest<TestDataQuery>\n): Observable<DataQueryResponse> {\n  return new Observable<DataQueryResponse>((subscriber) => {\n    const streamId = `fetch-${req.panelId}-${target.refId}`;\n    const maxDataPoints = req.maxDataPoints || 1000;\n\n    let data = new CircularDataFrame({\n      append: 'tail',\n      capacity: maxDataPoints,\n    });\n    data.refId = target.refId;\n    data.name = target.alias || 'Fetch ' + target.refId;\n\n    let reader: ReadableStreamReader<Uint8Array>;\n    const csv = new CSVReader({\n      callback: {\n        onHeader: (fields: Field[]) => {\n          // Clear any existing fields\n          if (data.fields.length) {\n            data = new CircularDataFrame({\n              append: 'tail',\n              capacity: maxDataPoints,\n            });\n            data.refId = target.refId;\n            data.name = 'Fetch ' + target.refId;\n          }\n          for (const field of fields) {\n            data.addField(field);\n          }\n        },\n        onRow: (row: any[]) => {\n          data.add(row);\n        },\n      },\n    });\n\n    const processChunk = (value: ReadableStreamDefaultReadResult<Uint8Array>): any => {\n      if (value.value) {\n        const text = new TextDecoder().decode(value.value);\n        csv.readCSV(text);\n      }\n\n      subscriber.next({\n        data: [data],\n        key: streamId,\n        state: value.done ? LoadingState.Done : LoadingState.Streaming,\n      });\n\n      if (value.done) {\n        console.log('Finished stream');\n        subscriber.complete(); // necessary?\n        return;\n      }\n\n      return reader.read().then(processChunk);\n    };\n\n    if (!query.url) {\n      throw new Error('query.url is not defined');\n    }\n\n    fetch(new Request(query.url)).then((response) => {\n      if (response.body) {\n        reader = response.body.getReader();\n        reader.read().then(processChunk);\n      }\n    });\n\n    return () => {\n      // Cancel fetch?\n      console.log('unsubscribing to stream ' + streamId);\n    };\n  });\n}\n","import React, { ChangeEvent, FormEvent, useMemo } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { QueryEditorProps, SelectableValue } from '@grafana/data';\nimport { selectors as editorSelectors } from '@grafana/e2e-selectors';\nimport { InlineField, InlineFieldRow, InlineSwitch, Input, Select, TextArea } from '@grafana/ui';\n\nimport { RandomWalkEditor, StreamingClientEditor } from './components';\nimport { CSVContentEditor } from './components/CSVContentEditor';\nimport { CSVFileEditor } from './components/CSVFileEditor';\nimport { CSVWavesEditor } from './components/CSVWaveEditor';\nimport ErrorEditor from './components/ErrorEditor';\nimport { GrafanaLiveEditor } from './components/GrafanaLiveEditor';\nimport { NodeGraphEditor } from './components/NodeGraphEditor';\nimport { PredictablePulseEditor } from './components/PredictablePulseEditor';\nimport { RawFrameEditor } from './components/RawFrameEditor';\nimport { SimulationQueryEditor } from './components/SimulationQueryEditor';\nimport { USAQueryEditor, usaQueryModes } from './components/USAQueryEditor';\nimport { defaultCSVWaveQuery, defaultPulseQuery, defaultQuery } from './constants';\nimport { TestDataDataSource } from './datasource';\nimport { defaultStreamQuery } from './runStreams';\nimport { CSVWave, NodesQuery, TestDataQuery, USAQuery } from './types';\n\nconst showLabelsFor = ['random_walk', 'predictable_pulse'];\nconst endpoints = [\n  { value: 'datasources', label: 'Data Sources' },\n  { value: 'search', label: 'Search' },\n  { value: 'annotations', label: 'Annotations' },\n];\n\nconst selectors = editorSelectors.components.DataSource.TestData.QueryTab;\n\nexport interface EditorProps {\n  onChange: (value: any) => void;\n  query: TestDataQuery;\n  ds: TestDataDataSource;\n}\n\nexport type Props = QueryEditorProps<TestDataDataSource, TestDataQuery>;\n\nexport const QueryEditor = ({ query, datasource, onChange, onRunQuery }: Props) => {\n  query = { ...defaultQuery, ...query };\n\n  const { loading, value: scenarioList } = useAsync(async () => {\n    // migrate manual_entry (unusable since 7, removed in 8)\n    if (query.scenarioId === 'manual_entry' && (query as any).points) {\n      let csvContent = 'Time,Value\\n';\n      for (const point of (query as any).points) {\n        csvContent += `${point[1]},${point[0]}\\n`;\n      }\n      onChange({\n        refId: query.refId,\n        datasource: query.datasource,\n        scenarioId: 'csv_content',\n        csvContent,\n      });\n    }\n\n    const vals = await datasource.getScenarios();\n    const hideAlias = ['simulation'];\n    return vals.map((v) => ({\n      ...v,\n      hideAliasField: hideAlias.includes(v.id),\n    }));\n  }, []);\n\n  const onUpdate = (query: TestDataQuery) => {\n    onChange(query);\n    onRunQuery();\n  };\n\n  const currentScenario = useMemo(\n    () => scenarioList?.find((scenario) => scenario.id === query.scenarioId),\n    [scenarioList, query]\n  );\n  const scenarioId = currentScenario?.id;\n  const description = currentScenario?.description;\n\n  const onScenarioChange = (item: SelectableValue<string>) => {\n    const scenario = scenarioList?.find((sc) => sc.id === item.value);\n\n    if (!scenario) {\n      return;\n    }\n\n    // Clear model from existing props that belong to other scenarios\n    const update: TestDataQuery = {\n      scenarioId: item.value!,\n      refId: query.refId,\n      alias: query.alias,\n      datasource: query.datasource,\n    };\n\n    if (scenario.stringInput) {\n      update.stringInput = scenario.stringInput;\n    }\n\n    switch (scenario.id) {\n      case 'grafana_api':\n        update.stringInput = 'datasources';\n        break;\n      case 'streaming_client':\n        update.stream = defaultStreamQuery;\n        break;\n      case 'live':\n        update.channel = 'random-2s-stream'; // default stream\n        break;\n      case 'simulation':\n        update.sim = { key: { type: 'flight', tick: 10 } }; // default stream\n        break;\n      case 'predictable_pulse':\n        update.pulseWave = defaultPulseQuery;\n        break;\n      case 'predictable_csv_wave':\n        update.csvWave = defaultCSVWaveQuery;\n        break;\n      case 'usa':\n        update.usa = {\n          mode: usaQueryModes[0].value,\n        };\n    }\n\n    onUpdate(update);\n  };\n\n  const onInputChange = (e: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value, type } = e.target as HTMLInputElement | HTMLTextAreaElement;\n    let newValue: any = value;\n\n    if (type === 'number') {\n      newValue = Number(value);\n    }\n\n    if (name === 'levelColumn') {\n      newValue = (e.target as HTMLInputElement).checked;\n    }\n\n    onUpdate({ ...query, [name]: newValue });\n  };\n\n  const onFieldChange = (field: string) => (e: ChangeEvent<HTMLInputElement>) => {\n    const { name, value, type } = e.target as HTMLInputElement;\n    let newValue: any = value;\n\n    if (type === 'number') {\n      newValue = Number(value);\n    }\n\n    onUpdate({ ...query, [field]: { ...(query as any)[field], [name]: newValue } });\n  };\n\n  const onEndPointChange = ({ value }: SelectableValue) => {\n    onUpdate({ ...query, stringInput: value });\n  };\n\n  const onStreamClientChange = onFieldChange('stream');\n  const onPulseWaveChange = onFieldChange('pulseWave');\n  const onUSAStatsChange = (usa?: USAQuery) => {\n    onUpdate({ ...query, usa });\n  };\n\n  const onCSVWaveChange = (csvWave?: CSVWave[]) => {\n    onUpdate({ ...query, csvWave });\n  };\n\n  const options = useMemo(\n    () =>\n      (scenarioList || [])\n        .map((item) => ({ label: item.name, value: item.id }))\n        .sort((a, b) => a.label.localeCompare(b.label)),\n    [scenarioList]\n  );\n  const showLabels = useMemo(() => showLabelsFor.includes(query.scenarioId ?? ''), [query]);\n\n  if (loading) {\n    return null;\n  }\n\n  return (\n    <>\n      <InlineFieldRow aria-label={selectors.scenarioSelectContainer}>\n        <InlineField labelWidth={14} label=\"Scenario\">\n          <Select\n            inputId={`test-data-scenario-select-${query.refId}`}\n            options={options}\n            value={options.find((item) => item.value === query.scenarioId)}\n            onChange={onScenarioChange}\n            width={32}\n          />\n        </InlineField>\n        {currentScenario?.stringInput && (\n          <InlineField label=\"String Input\">\n            <Input\n              width={32}\n              id={`stringInput-${query.refId}`}\n              name=\"stringInput\"\n              placeholder={query.stringInput}\n              value={query.stringInput}\n              onChange={onInputChange}\n            />\n          </InlineField>\n        )}\n        {Boolean(!currentScenario?.hideAliasField) && (\n          <InlineField label=\"Alias\" labelWidth={14}>\n            <Input\n              width={32}\n              id={`alias-${query.refId}`}\n              type=\"text\"\n              placeholder=\"optional\"\n              pattern='[^<>&\\\\\"]+'\n              name=\"alias\"\n              value={query.alias}\n              onChange={onInputChange}\n            />\n          </InlineField>\n        )}\n        {showLabels && (\n          <InlineField\n            label=\"Labels\"\n            labelWidth={14}\n            tooltip={\n              <>\n                Set labels using a key=value syntax:\n                <br />\n                {`{ key = \"value\", key2 = \"value\" }`}\n                <br />\n                key=&quot;value&quot;, key2=&quot;value&quot;\n                <br />\n                key=value, key2=value\n                <br />\n              </>\n            }\n          >\n            <Input\n              width={32}\n              id={`labels-${query.refId}`}\n              name=\"labels\"\n              onChange={onInputChange}\n              value={query?.labels}\n              placeholder=\"key=value, key2=value2\"\n            />\n          </InlineField>\n        )}\n      </InlineFieldRow>\n\n      {scenarioId === 'random_walk' && <RandomWalkEditor onChange={onInputChange} query={query} ds={datasource} />}\n      {scenarioId === 'streaming_client' && (\n        <StreamingClientEditor onChange={onStreamClientChange} query={query} ds={datasource} />\n      )}\n      {scenarioId === 'live' && <GrafanaLiveEditor onChange={onUpdate} query={query} ds={datasource} />}\n      {scenarioId === 'simulation' && <SimulationQueryEditor onChange={onUpdate} query={query} ds={datasource} />}\n      {scenarioId === 'raw_frame' && <RawFrameEditor onChange={onUpdate} query={query} ds={datasource} />}\n      {scenarioId === 'csv_file' && <CSVFileEditor onChange={onUpdate} query={query} ds={datasource} />}\n      {scenarioId === 'csv_content' && <CSVContentEditor onChange={onUpdate} query={query} ds={datasource} />}\n      {scenarioId === 'logs' && (\n        <InlineFieldRow>\n          <InlineField label=\"Lines\" labelWidth={14}>\n            <Input\n              type=\"number\"\n              name=\"lines\"\n              value={query.lines}\n              width={32}\n              onChange={onInputChange}\n              placeholder=\"10\"\n            />\n          </InlineField>\n          <InlineField label=\"Level\" labelWidth={14}>\n            <InlineSwitch onChange={onInputChange} name=\"levelColumn\" value={!!query.levelColumn} />\n          </InlineField>\n        </InlineFieldRow>\n      )}\n\n      {scenarioId === 'usa' && <USAQueryEditor onChange={onUSAStatsChange} query={query.usa ?? {}} />}\n      {scenarioId === 'grafana_api' && (\n        <InlineField labelWidth={14} label=\"Endpoint\">\n          <Select\n            options={endpoints}\n            onChange={onEndPointChange}\n            width={32}\n            value={endpoints.find((ep) => ep.value === query.stringInput)}\n          />\n        </InlineField>\n      )}\n\n      {scenarioId === 'arrow' && (\n        <InlineField grow>\n          <TextArea\n            name=\"stringInput\"\n            value={query.stringInput}\n            rows={10}\n            placeholder=\"Copy base64 text data from query result\"\n            onChange={onInputChange}\n          />\n        </InlineField>\n      )}\n\n      {scenarioId === 'predictable_pulse' && (\n        <PredictablePulseEditor onChange={onPulseWaveChange} query={query} ds={datasource} />\n      )}\n      {scenarioId === 'predictable_csv_wave' && <CSVWavesEditor onChange={onCSVWaveChange} waves={query.csvWave} />}\n      {scenarioId === 'node_graph' && (\n        <NodeGraphEditor onChange={(val: NodesQuery) => onChange({ ...query, nodes: val })} query={query} />\n      )}\n      {scenarioId === 'server_error_500' && <ErrorEditor onChange={onUpdate} query={query} ds={datasource} />}\n\n      {description && <p>{description}</p>}\n    </>\n  );\n};\n","// Libraries\nimport React, { PureComponent } from 'react';\n\nimport { PluginConfigPageProps, DataSourcePluginMeta, DataSourceJsonData } from '@grafana/data';\nimport { LinkButton } from '@grafana/ui';\n\n// Types\n\ninterface Props extends PluginConfigPageProps<DataSourcePluginMeta<DataSourceJsonData>> {}\n\nexport class TestInfoTab extends PureComponent<Props> {\n  constructor(props: Props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div>\n        See github for more information about setting up a reproducible test environment.\n        <br />\n        <br />\n        <LinkButton\n          variant=\"secondary\"\n          href=\"https://github.com/grafana/grafana/tree/main/devenv\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          GitHub\n        </LinkButton>\n        <br />\n      </div>\n    );\n  }\n}\n","export interface TreeNode {\n  name: string;\n  children: TreeNode[];\n}\n\n/*\n *  Builds a nested tree like\n *  [\n *    {\n *      name: 'A',\n *      children: [\n *        { name: 'AA', children: [] },\n *        { name: 'AB', children: [] },\n *      ]\n *    }\n *  ]\n */\nfunction buildMetricTree(parent: string, depth: number): TreeNode[] {\n  const chars = ['A', 'B', 'C'];\n  const children: TreeNode[] = [];\n\n  if (depth > 5) {\n    return [];\n  }\n\n  for (const letter of chars) {\n    const nodeName = `${parent}${letter}`;\n    children.push({\n      name: nodeName,\n      children: buildMetricTree(nodeName, depth + 1),\n    });\n  }\n\n  return children;\n}\n\nfunction queryTree(children: TreeNode[], query: string[], queryIndex: number): TreeNode[] {\n  if (queryIndex >= query.length) {\n    return children;\n  }\n\n  if (query[queryIndex] === '*') {\n    return children;\n  }\n\n  const nodeQuery = query[queryIndex];\n  let result: TreeNode[] = [];\n  let namesToMatch = [nodeQuery];\n\n  // handle glob queries\n  if (nodeQuery.startsWith('{')) {\n    namesToMatch = nodeQuery.replace(/\\{|\\}/g, '').split(',');\n  }\n\n  for (const node of children) {\n    for (const nameToMatch of namesToMatch) {\n      if (nameToMatch.indexOf('*') !== -1) {\n        const pattern = nameToMatch.replace('*', '');\n        const regex = new RegExp(`^${pattern}.*`, 'gi');\n        if (regex.test(node.name)) {\n          result = result.concat(queryTree([node], query, queryIndex + 1));\n        }\n      } else if (node.name === nameToMatch) {\n        result = result.concat(queryTree(node.children, query, queryIndex + 1));\n      }\n    }\n  }\n\n  return result;\n}\n\nexport function queryMetricTree(query: string): TreeNode[] {\n  if (query.indexOf('value') === 0) {\n    return [{ name: query, children: [] }];\n  }\n\n  const children = buildMetricTree('', 0);\n  return queryTree(children, query.split('.'), 0);\n}\n","import { FieldColorModeId, FieldType, PreferredVisualisationType, NodeGraphDataFrameFieldNames } from '@grafana/data';\n\nexport const nodes = {\n  fields: [\n    {\n      name: NodeGraphDataFrameFieldNames.id,\n      type: FieldType.string,\n      config: {\n        links: [\n          {\n            title: 'Traces/All',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'service(id(name: \"${__data.fields.name}\", type: \"${__data.fields.type}\"))',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n          {\n            title: 'Traces/OK',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'service(id(name: \"${__data.fields.name}\", type: \"${__data.fields.type}\")) { ok = true }',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n          {\n            title: 'Traces/Errors',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'service(id(name: \"${__data.fields.name}\", type: \"${__data.fields.type}\")) { error = true }',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n          {\n            title: 'Traces/Faults',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'service(id(name: \"${__data.fields.name}\", type: \"${__data.fields.type}\")) { fault = true }',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n        ],\n      },\n      values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.title,\n      type: FieldType.string,\n      config: { displayName: 'Name' },\n      values: [\n        'auth',\n        'products',\n        'customers',\n        'orders',\n        'products',\n        'orders',\n        'api',\n        'shipping',\n        'orders',\n        'execute-api',\n        'shipping',\n        'www',\n        'api',\n        'www',\n        'products',\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.subTitle,\n      type: FieldType.string,\n      config: { displayName: 'Type' },\n      values: [\n        'Compute',\n        'SQL',\n        'SQL',\n        'SQL',\n        'remote',\n        'Function',\n        'Compute',\n        'Function',\n        'Function',\n        'remote',\n        'Function',\n        'Compute',\n        'client',\n        'client',\n        'Compute',\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.mainStat,\n      type: FieldType.number,\n      config: { unit: 'ms/t', displayName: 'Average response time' },\n      values: [\n        3.5394042646735553, 15.906441318223264, 4.913011921591567, 7.4163203042094095, 1092, 22.85961441405067,\n        56.135855729084696, 4.45946191601527, 12.818300278280843, 4.25, 12.565442646791492, 77.63447512700567,\n        40.387096774193544, 77.63447512700567, 27.648950187374872,\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.secondaryStat,\n      type: FieldType.number,\n      config: { unit: 't/min', displayName: 'Transactions per minute' },\n      values: [\n        50.56317154501667, 682.4, 512.8416666666667, 125.64444444444445, 0.005585812037424941, 137.59722222222223,\n        300.0527777777778, 30.582348853370394, 125.77222222222223, 0.028706417080318163, 30.582348853370394, 165.675,\n        0.100021510002151, 165.675, 162.33055555555555,\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.arc + 'success',\n      type: FieldType.number,\n      config: { color: { mode: FieldColorModeId.Fixed, fixedColor: 'green' }, displayName: 'Sucesss' },\n      values: [\n        0.9338865684765882, 1, 1, 1, 0.5, 1, 0.9901128505170387, 0.9069260134520997, 1, 0, 0.9069260134520997,\n        0.9624432037288534, 0, 0.9624432037288534, 0.9824945669843769,\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.arc + 'faults',\n      type: FieldType.number,\n      config: { color: { mode: FieldColorModeId.Fixed, fixedColor: 'red' }, displayName: 'Faults' },\n      values: [\n        0, 0, 0, 0, 0.5, 0, 0.009479813736472288, 0, 0, 0, 0, 0.017168821152524185, 0, 0.017168821152524185,\n        0.01750543301562313,\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.arc + 'errors',\n      type: FieldType.number,\n      config: { color: { mode: FieldColorModeId.Fixed, fixedColor: 'semi-dark-yellow' }, displayName: 'Errors' },\n      values: [\n        0.06611343152341174, 0, 0, 0, 0, 0, 0.0004073357464890436, 0.09307398654790038, 0, 1, 0.09307398654790038,\n        0.02038797511862247, 1, 0.02038797511862247, 0,\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.arc + 'throttled',\n      type: FieldType.number,\n      config: { color: { mode: FieldColorModeId.Fixed, fixedColor: 'purple' }, displayName: 'Throttled' },\n      values: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    },\n  ],\n  meta: { preferredVisualisationType: 'nodeGraph' as PreferredVisualisationType },\n  name: 'nodes',\n};\n\nexport const edges = {\n  fields: [\n    {\n      name: NodeGraphDataFrameFieldNames.id,\n      type: FieldType.string,\n      config: {\n        links: [\n          {\n            title: 'Traces/All',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'edge(\"${__data.fields.sourceName}\", \"${__data.fields.targetName}\")',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n          {\n            title: 'Traces/OK',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'edge(\"${__data.fields.sourceName}\", \"${__data.fields.targetName}\") { ok = true }',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n          {\n            title: 'Traces/Errors',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'edge(\"${__data.fields.sourceName}\", \"${__data.fields.targetName}\") { error = true }',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n          {\n            title: 'Traces/Faults',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'edge(\"${__data.fields.sourceName}\", \"${__data.fields.targetName}\") { fault = true }',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n        ],\n      },\n      values: [\n        '0__2',\n        '5__8',\n        '6__0',\n        '6__5',\n        '6__9',\n        '6__2',\n        '6__14',\n        '6__4',\n        '8__3',\n        '10__7',\n        '11__0',\n        '11__6',\n        '12__6',\n        '13__11',\n        '14__1',\n        '14__2',\n        '14__10',\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.source,\n      type: FieldType.string,\n      config: {},\n      values: [0, 5, 6, 6, 6, 6, 6, 6, 8, 10, 11, 11, 12, 13, 14, 14, 14],\n    },\n    {\n      name: 'sourceName',\n      type: FieldType.string,\n      config: {},\n      values: [\n        'auth',\n        'orders',\n        'api',\n        'api',\n        'api',\n        'api',\n        'api',\n        'api',\n        'orders',\n        'shipping',\n        'www',\n        'www',\n        'api',\n        'www',\n        'products',\n        'products',\n        'products',\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.target,\n      type: FieldType.string,\n      config: {},\n      values: [2, 8, 0, 5, 9, 2, 14, 4, 3, 7, 0, 6, 6, 11, 1, 2, 10],\n    },\n    {\n      name: 'targetName',\n      type: FieldType.string,\n      config: {},\n      values: [\n        'customers',\n        'orders',\n        'auth',\n        'orders',\n        'execute-api',\n        'customers',\n        'products',\n        'products',\n        'orders',\n        'shipping',\n        'auth',\n        'api',\n        'api',\n        'www',\n        'products',\n        'customers',\n        'shipping',\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.mainStat,\n      type: FieldType.string,\n      config: { displayName: 'Response percentage' },\n      values: [\n        'Success 100.00%',\n        'Success 100.00%',\n        'Success 100.00%',\n        'Success 100.00%',\n        'Errors 100.00%',\n        'Success 100.00%',\n        'Faults 1.75%',\n        'Faults 50.00%',\n        'Success 100.00%',\n        'Errors 9.31%',\n        'Errors 6.62%',\n        'Faults 1.13%',\n        'Errors 100.00%',\n        'Faults 1.72%',\n        'Success 100.00%',\n        'Success 100.00%',\n        'Faults 9.30%',\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.secondaryStat,\n      type: FieldType.number,\n      config: { unit: 't/min', displayName: 'Transactions per minute' },\n      values: [\n        50.56317154501667, 125.77222222222223, 0.03333333333333333, 137.59722222222223, 0.022222222222222223,\n        299.96666666666664, 162.33055555555555, 0.005555555555555556, 125.64444444444445, 30.582348853370394,\n        50.51111111111111, 299.9166666666667, 0.100021510002151, 165.675, 682.4, 162.33055555555555, 30.558333333333334,\n      ],\n    },\n  ],\n  meta: { preferredVisualisationType: 'nodeGraph' as PreferredVisualisationType },\n  name: 'edges',\n};\n","import {\n  ArrayVector,\n  FieldColorModeId,\n  FieldDTO,\n  FieldType,\n  MutableDataFrame,\n  NodeGraphDataFrameFieldNames,\n} from '@grafana/data';\n\nimport { nodes, edges } from './testData/serviceMapResponse';\n\nexport function generateRandomNodes(count = 10) {\n  const nodes = [];\n\n  const root = {\n    id: '0',\n    title: 'root',\n    subTitle: 'client',\n    success: 1,\n    error: 0,\n    stat1: Math.random(),\n    stat2: Math.random(),\n    edges: [] as any[],\n  };\n  nodes.push(root);\n  const nodesWithoutMaxEdges = [root];\n\n  const maxEdges = 3;\n\n  for (let i = 1; i < count; i++) {\n    const node = makeRandomNode(i);\n    nodes.push(node);\n    const sourceIndex = Math.floor(Math.random() * Math.floor(nodesWithoutMaxEdges.length - 1));\n    const source = nodesWithoutMaxEdges[sourceIndex];\n    source.edges.push(node.id);\n    if (source.edges.length >= maxEdges) {\n      nodesWithoutMaxEdges.splice(sourceIndex, 1);\n    }\n    nodesWithoutMaxEdges.push(node);\n  }\n\n  // Add some random edges to create possible cycle\n  const additionalEdges = Math.floor(count / 2);\n  for (let i = 0; i <= additionalEdges; i++) {\n    const sourceIndex = Math.floor(Math.random() * Math.floor(nodes.length - 1));\n    const targetIndex = Math.floor(Math.random() * Math.floor(nodes.length - 1));\n    if (sourceIndex === targetIndex || nodes[sourceIndex].id === '0' || nodes[sourceIndex].id === '0') {\n      continue;\n    }\n\n    nodes[sourceIndex].edges.push(nodes[sourceIndex].id);\n  }\n\n  const nodeFields: Record<string, Omit<FieldDTO, 'name'> & { values: ArrayVector }> = {\n    [NodeGraphDataFrameFieldNames.id]: {\n      values: new ArrayVector(),\n      type: FieldType.string,\n    },\n    [NodeGraphDataFrameFieldNames.title]: {\n      values: new ArrayVector(),\n      type: FieldType.string,\n    },\n    [NodeGraphDataFrameFieldNames.subTitle]: {\n      values: new ArrayVector(),\n      type: FieldType.string,\n    },\n    [NodeGraphDataFrameFieldNames.mainStat]: {\n      values: new ArrayVector(),\n      type: FieldType.number,\n      config: { displayName: 'Transactions per second' },\n    },\n    [NodeGraphDataFrameFieldNames.secondaryStat]: {\n      values: new ArrayVector(),\n      type: FieldType.number,\n      config: { displayName: 'Average duration' },\n    },\n    [NodeGraphDataFrameFieldNames.arc + 'success']: {\n      values: new ArrayVector(),\n      type: FieldType.number,\n      config: { color: { fixedColor: 'green', mode: FieldColorModeId.Fixed }, displayName: 'Success' },\n    },\n    [NodeGraphDataFrameFieldNames.arc + 'errors']: {\n      values: new ArrayVector(),\n      type: FieldType.number,\n      config: { color: { fixedColor: 'red', mode: FieldColorModeId.Fixed }, displayName: 'Errors' },\n    },\n  };\n\n  const nodeFrame = new MutableDataFrame({\n    name: 'nodes',\n    fields: Object.keys(nodeFields).map((key) => ({\n      ...nodeFields[key],\n      name: key,\n    })),\n    meta: { preferredVisualisationType: 'nodeGraph' },\n  });\n\n  const edgeFields: any = {\n    [NodeGraphDataFrameFieldNames.id]: {\n      values: new ArrayVector(),\n      type: FieldType.string,\n    },\n    [NodeGraphDataFrameFieldNames.source]: {\n      values: new ArrayVector(),\n      type: FieldType.string,\n    },\n    [NodeGraphDataFrameFieldNames.target]: {\n      values: new ArrayVector(),\n      type: FieldType.string,\n    },\n  };\n\n  const edgesFrame = new MutableDataFrame({\n    name: 'edges',\n    fields: Object.keys(edgeFields).map((key) => ({\n      ...edgeFields[key],\n      name: key,\n    })),\n    meta: { preferredVisualisationType: 'nodeGraph' },\n  });\n\n  const edgesSet = new Set();\n  for (const node of nodes) {\n    nodeFields.id.values.add(node.id);\n    nodeFields.title.values.add(node.title);\n    nodeFields[NodeGraphDataFrameFieldNames.subTitle].values.add(node.subTitle);\n    nodeFields[NodeGraphDataFrameFieldNames.mainStat].values.add(node.stat1);\n    nodeFields[NodeGraphDataFrameFieldNames.secondaryStat].values.add(node.stat2);\n    nodeFields.arc__success.values.add(node.success);\n    nodeFields.arc__errors.values.add(node.error);\n    for (const edge of node.edges) {\n      const id = `${node.id}--${edge}`;\n      // We can have duplicate edges when we added some more by random\n      if (edgesSet.has(id)) {\n        continue;\n      }\n      edgesSet.add(id);\n      edgeFields.id.values.add(`${node.id}--${edge}`);\n      edgeFields.source.values.add(node.id);\n      edgeFields.target.values.add(edge);\n    }\n  }\n\n  return [nodeFrame, edgesFrame];\n}\n\nfunction makeRandomNode(index: number) {\n  const success = Math.random();\n  const error = 1 - success;\n  return {\n    id: index.toString(),\n    title: `service:${index}`,\n    subTitle: 'service',\n    success,\n    error,\n    stat1: Math.random(),\n    stat2: Math.random(),\n    edges: [],\n  };\n}\n\nexport function savedNodesResponse(): any {\n  return [new MutableDataFrame(nodes), new MutableDataFrame(edges)];\n}\n","import { StandardVariableQuery, StandardVariableSupport } from '@grafana/data';\n\nimport { TestDataDataSource } from './datasource';\nimport { TestDataQuery } from './types';\n\nexport class TestDataVariableSupport extends StandardVariableSupport<TestDataDataSource> {\n  toDataQuery(query: StandardVariableQuery): TestDataQuery {\n    return {\n      refId: 'TestDataDataSource-QueryVariable',\n      stringInput: query.query,\n      scenarioId: 'variables-query',\n      csvWave: undefined,\n    };\n  }\n}\n","import { from, merge, Observable, of, throwError } from 'rxjs';\nimport { delay } from 'rxjs/operators';\n\nimport {\n  AnnotationEvent,\n  ArrayDataFrame,\n  DataFrame,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  DataTopic,\n  LiveChannelScope,\n  LoadingState,\n  TimeRange,\n  ScopedVars,\n  toDataFrame,\n} from '@grafana/data';\nimport { DataSourceWithBackend, getBackendSrv, getGrafanaLiveSrv, getTemplateSrv, TemplateSrv } from '@grafana/runtime';\nimport { getSearchFilterScopedVar } from 'app/features/variables/utils';\n\nimport { queryMetricTree } from './metricTree';\nimport { generateRandomNodes, savedNodesResponse } from './nodeGraphUtils';\nimport { runStream } from './runStreams';\nimport { Scenario, TestDataQuery } from './types';\nimport { TestDataVariableSupport } from './variables';\n\nexport class TestDataDataSource extends DataSourceWithBackend<TestDataQuery> {\n  scenariosCache?: Promise<Scenario[]>;\n\n  constructor(\n    instanceSettings: DataSourceInstanceSettings,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv()\n  ) {\n    super(instanceSettings);\n    this.variables = new TestDataVariableSupport();\n  }\n\n  query(options: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n    const backendQueries: TestDataQuery[] = [];\n    const streams: Array<Observable<DataQueryResponse>> = [];\n\n    // Start streams and prepare queries\n    for (const target of options.targets) {\n      if (target.hide) {\n        continue;\n      }\n\n      this.resolveTemplateVariables(target, options.scopedVars);\n\n      switch (target.scenarioId) {\n        case 'live':\n          streams.push(runGrafanaLiveQuery(target, options));\n          break;\n        case 'streaming_client':\n          streams.push(runStream(target, options));\n          break;\n        case 'grafana_api':\n          streams.push(runGrafanaAPI(target, options));\n          break;\n        case 'annotations':\n          streams.push(this.annotationDataTopicTest(target, options));\n          break;\n        case 'variables-query':\n          streams.push(this.variablesQuery(target, options));\n          break;\n        case 'node_graph':\n          streams.push(this.nodesQuery(target, options));\n          break;\n        case 'raw_frame':\n          streams.push(this.rawFrameQuery(target, options));\n          break;\n        case 'server_error_500':\n          // this now has an option where it can return/throw an error from the frontend.\n          // if it doesn't, send it to the backend where it might panic there :)\n          const query = this.serverErrorQuery(target, options);\n          query ? streams.push(query) : backendQueries.push(target);\n          break;\n        // Unusable since 7, removed in 8\n        case 'manual_entry': {\n          let csvContent = 'Time,Value\\n';\n          if ((target as any).points) {\n            for (const point of (target as any).points) {\n              csvContent += `${point[1]},${point[0]}\\n`;\n            }\n          }\n          target.scenarioId = 'csv_content';\n          target.csvContent = csvContent;\n        }\n\n        default:\n          backendQueries.push(target);\n      }\n    }\n\n    if (backendQueries.length) {\n      const backendOpts = {\n        ...options,\n        targets: backendQueries,\n      };\n      streams.push(super.query(backendOpts));\n    }\n\n    if (streams.length === 0) {\n      return of({ data: [] });\n    }\n\n    return merge(...streams);\n  }\n\n  resolveTemplateVariables(query: TestDataQuery, scopedVars: ScopedVars) {\n    if (query.labels) {\n      query.labels = this.templateSrv.replace(query.labels, scopedVars);\n    }\n    if (query.alias) {\n      query.alias = this.templateSrv.replace(query.alias, scopedVars);\n    }\n    if (query.scenarioId) {\n      query.scenarioId = this.templateSrv.replace(query.scenarioId, scopedVars);\n    }\n    if (query.stringInput) {\n      query.stringInput = this.templateSrv.replace(query.stringInput, scopedVars);\n    }\n    if (query.csvContent) {\n      query.csvContent = this.templateSrv.replace(query.csvContent, scopedVars);\n    }\n    if (query.rawFrameContent) {\n      query.rawFrameContent = this.templateSrv.replace(query.rawFrameContent, scopedVars);\n    }\n  }\n\n  annotationDataTopicTest(target: TestDataQuery, req: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n    const events = this.buildFakeAnnotationEvents(req.range, 50);\n    const dataFrame = new ArrayDataFrame(events);\n    dataFrame.meta = { dataTopic: DataTopic.Annotations };\n\n    return of({ key: target.refId, data: [dataFrame] }).pipe(delay(100));\n  }\n\n  buildFakeAnnotationEvents(range: TimeRange, count: number): AnnotationEvent[] {\n    let timeWalker = range.from.valueOf();\n    const to = range.to.valueOf();\n    const events = [];\n    const step = (to - timeWalker) / count;\n\n    for (let i = 0; i < count; i++) {\n      events.push({\n        time: timeWalker,\n        text: 'This is the text, <a href=\"https://grafana.com\">Grafana.com</a>',\n        tags: ['text', 'server'],\n      });\n      timeWalker += step;\n    }\n\n    return events;\n  }\n\n  annotationQuery(options: any) {\n    return Promise.resolve(this.buildFakeAnnotationEvents(options.range, 10));\n  }\n\n  getQueryDisplayText(query: TestDataQuery) {\n    const scenario = query.scenarioId ?? 'Default scenario';\n\n    if (query.alias) {\n      return scenario + ' as ' + query.alias;\n    }\n\n    return scenario;\n  }\n\n  testDatasource() {\n    return Promise.resolve({\n      status: 'success',\n      message: 'Data source is working',\n    });\n  }\n\n  getScenarios(): Promise<Scenario[]> {\n    if (!this.scenariosCache) {\n      this.scenariosCache = this.getResource('scenarios');\n    }\n\n    return this.scenariosCache;\n  }\n\n  variablesQuery(target: TestDataQuery, options: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n    const query = target.stringInput ?? '';\n    const interpolatedQuery = this.templateSrv.replace(\n      query,\n      getSearchFilterScopedVar({ query, wildcardChar: '*', options: options.scopedVars })\n    );\n    const children = queryMetricTree(interpolatedQuery);\n    const items = children.map((item) => ({ value: item.name, text: item.name }));\n    const dataFrame = new ArrayDataFrame(items);\n\n    return of({ data: [dataFrame] }).pipe(delay(100));\n  }\n\n  nodesQuery(target: TestDataQuery, options: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n    const type = target.nodes?.type || 'random';\n    let frames: DataFrame[];\n    switch (type) {\n      case 'random':\n        frames = generateRandomNodes(target.nodes?.count);\n        break;\n      case 'response':\n        frames = savedNodesResponse();\n        break;\n      default:\n        throw new Error(`Unknown node_graph sub type ${type}`);\n    }\n\n    return of({ data: frames }).pipe(delay(100));\n  }\n\n  rawFrameQuery(target: TestDataQuery, options: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n    try {\n      const data = JSON.parse(target.rawFrameContent ?? '[]').map((v: any) => {\n        const f = toDataFrame(v);\n        f.refId = target.refId;\n        return f;\n      });\n      return of({ data, state: LoadingState.Done }).pipe(delay(100));\n    } catch (ex) {\n      return of({\n        data: [],\n        error: ex instanceof Error ? ex : new Error('Unkown error'),\n      }).pipe(delay(100));\n    }\n  }\n\n  serverErrorQuery(\n    target: TestDataQuery,\n    options: DataQueryRequest<TestDataQuery>\n  ): Observable<DataQueryResponse> | null {\n    const { errorType } = target;\n    console.log(\"we're here!\", target);\n\n    if (errorType === 'server_panic') {\n      return null;\n    }\n\n    const stringInput = target.stringInput ?? '';\n    if (stringInput === '') {\n      if (errorType === 'frontend_exception') {\n        throw new Error('Scenario threw an exception in the frontend because the input was empty.');\n      } else {\n        return throwError(() => new Error('Scenario returned an error because the input was empty.'));\n      }\n    }\n\n    return null;\n  }\n}\n\nfunction runGrafanaAPI(target: TestDataQuery, req: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n  const url = `/api/${target.stringInput}`;\n  return from(\n    getBackendSrv()\n      .get(url)\n      .then((res) => {\n        const frame = new ArrayDataFrame(res);\n        return {\n          state: LoadingState.Done,\n          data: [frame],\n        };\n      })\n  );\n}\n\nlet liveQueryCounter = 1000;\n\nfunction runGrafanaLiveQuery(\n  target: TestDataQuery,\n  req: DataQueryRequest<TestDataQuery>\n): Observable<DataQueryResponse> {\n  if (!target.channel) {\n    throw new Error(`Missing channel config`);\n  }\n  return getGrafanaLiveSrv().getDataStream({\n    addr: {\n      scope: LiveChannelScope.Plugin,\n      namespace: 'testdata',\n      path: target.channel,\n    },\n    key: `testStream.${liveQueryCounter++}`,\n  });\n}\n","import { DataSourcePlugin } from '@grafana/data';\n\nimport { ConfigEditor } from './ConfigEditor';\nimport { QueryEditor } from './QueryEditor';\nimport { TestInfoTab } from './TestInfoTab';\nimport { TestDataDataSource } from './datasource';\n\nclass TestDataAnnotationsQueryCtrl {\n  annotation: any;\n  constructor() {}\n  static template = '<h2>Annotation scenario</h2>';\n}\n\nexport const plugin = new DataSourcePlugin(TestDataDataSource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor)\n  .setAnnotationQueryCtrl(TestDataAnnotationsQueryCtrl)\n  .addConfigPage({\n    title: 'Setup',\n    icon: 'list-ul',\n    body: TestInfoTab,\n    id: 'setup',\n  });\n"],"names":["ConfigEditor","PureComponent","render","streamingClientFields","label","id","placeholder","min","step","types","value","StreamingClientEditor","onChange","query","onInputChange","e","name","target","Number","InlineFieldRow","InlineField","labelWidth","Select","width","defaultValue","options","stream","type","map","Input","refId","grow","url","randomWalkFields","max","tooltip","testSelectors","selectors","RandomWalkEditor","selector","CSVContentEditor","onSaveCSV","csvContent","CodeEditor","height","language","onBlur","onSave","showMiniMap","showLineNumbers","CSVFileEditor","files","csvFileName","find","f","defaultPulseQuery","timeStep","onCount","onValue","offCount","offValue","defaultCSVWaveQuery","valuesCSV","defaultQuery","scenarioId","CSVWaveEditor","props","wave","last","index","onAdd","setValuesCSV","useState","labels","setLabels","setName","onValueChange","key","currentTarget","autoFocus","onKeyDown","evt","valueAsNumber","Button","icon","variant","onClick","undefined","CSVWavesEditor","waves","this","splice","push","length","ERROR_OPTIONS","errorType","v","liveTestDataChannels","description","GrafanaLiveEditor","channel","NodeGraphEditor","nodes","o","item","count","parseInt","fields","PredictablePulseEditor","pulseWave","RawFrameEditor","error","setError","warning","setWarning","onSaveFrames","rawFrameContent","json","JSON","parse","isArray","data","series","state","toDataFrameDTO","toDataFrame","toDataQueryResponse","dataFrameToJSON","console","log","stringify","Alert","title","severity","renderInput","field","config","newValue","InlineSwitch","getStyles","theme","jsonView","css","spacing","SimulationSchemaForm","schema","setJsonView","styles","useStyles2","FieldSet","className","showLabel","TextArea","rows","event","element","SimulationQueryEditor","ds","simQuery","sim","simKey","cfgValue","setCfgValue","info","useAsync","async","getResource","sims","s","current","useMemo","details","option","path","tick","uid","onUpdateKey","isLoading","loading","Boolean","suffix","Label","postResource","then","res","USAQueryEditor","usaQueryModes","mode","ep","period","MultiSelect","fieldNames","vals","stateNames","states","getNextWord","Math","floor","random","words","defaultStreamQuery","speed","spread","noise","bands","runStream","req","defaults","Observable","subscriber","streamId","panelId","maxDataPoints","FieldType","alias","i","frame","StreamingDataFrame","maxLength","timeoutId","lastSent","addNextRow","time","values","Date","now","pushNextEvent","liveTimer","next","LoadingState","setTimeout","clearTimeout","runSignalStream","CircularDataFrame","append","capacity","addField","meta","preferredVisualisationType","add","line","getRandomLine","runLogsStream","reader","csv","CSVReader","callback","onHeader","onRow","row","processChunk","text","TextDecoder","decode","readCSV","done","complete","read","Error","fetch","Request","response","body","getReader","runFetchStream","showLabelsFor","endpoints","editorSelectors","TestInfoTab","constructor","super","LinkButton","href","rel","buildMetricTree","parent","depth","chars","children","letter","nodeName","queryTree","queryIndex","nodeQuery","result","namesToMatch","startsWith","replace","split","node","nameToMatch","indexOf","pattern","RegExp","test","concat","queryMetricTree","NodeGraphDataFrameFieldNames","links","internal","queryType","datasourceUid","datasourceName","displayName","unit","color","FieldColorModeId","fixedColor","edges","makeRandomNode","success","toString","subTitle","stat1","stat2","TestDataVariableSupport","StandardVariableSupport","toDataQuery","stringInput","csvWave","TestDataDataSource","DataSourceWithBackend","instanceSettings","templateSrv","getTemplateSrv","variables","backendQueries","streams","targets","hide","resolveTemplateVariables","scopedVars","runGrafanaLiveQuery","runGrafanaAPI","annotationDataTopicTest","variablesQuery","nodesQuery","rawFrameQuery","serverErrorQuery","points","point","backendOpts","of","merge","events","buildFakeAnnotationEvents","range","dataFrame","ArrayDataFrame","dataTopic","DataTopic","pipe","delay","timeWalker","from","valueOf","to","tags","annotationQuery","Promise","resolve","getQueryDisplayText","scenario","testDatasource","status","message","getScenarios","scenariosCache","items","getSearchFilterScopedVar","wildcardChar","frames","root","nodesWithoutMaxEdges","maxEdges","sourceIndex","source","additionalEdges","nodeFields","ArrayVector","nodeFrame","MutableDataFrame","Object","keys","edgeFields","edgesFrame","edgesSet","Set","arc__success","arc__errors","edge","has","generateRandomNodes","ex","throwError","getBackendSrv","get","liveQueryCounter","getGrafanaLiveSrv","getDataStream","addr","scope","LiveChannelScope","namespace","TestDataAnnotationsQueryCtrl","plugin","DataSourcePlugin","setConfigEditor","setQueryEditor","datasource","onRunQuery","scenarioList","hideAlias","hideAliasField","includes","onUpdate","currentScenario","checked","onFieldChange","onStreamClientChange","onPulseWaveChange","sort","a","b","localeCompare","showLabels","scenarioSelectContainer","inputId","sc","update","usa","lines","levelColumn","val","ErrorEditor","setAnnotationQueryCtrl","addConfigPage"],"sourceRoot":""}