{"version":3,"file":"AlertSilences.e3218f16c6aed730db2b.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/components/silences/Matchers.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/NoSilencesCTA.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilencedAlertsTableRow.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilencedAlertsTable.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilenceDetails.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilenceStateTag.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilencesFilter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilencesTable.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useSilenceNavData.ts","webpack://grafana/./public/app/features/alerting/unified/Silences.tsx","webpack://grafana/./public/app/features/alerting/unified/components/Authorize.tsx","webpack://grafana/./public/app/features/alerting/unified/components/CollapseToggle.tsx","webpack://grafana/./public/app/features/alerting/unified/components/GrafanaAlertmanagerDeliveryWarning.tsx","webpack://grafana/./public/app/features/alerting/unified/styles/table.ts"],"sourcesContent":["import { css } from '@emotion/css';\n\nimport { TagList, useStyles2 } from '@grafana/ui';\nimport { Matcher } from 'app/plugins/datasource/alertmanager/types';\n\nimport { matcherToOperator } from '../../utils/alertmanager';\n\ntype MatchersProps = { matchers: Matcher[] };\n\nexport const Matchers = ({ matchers }: MatchersProps) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <div>\n      <TagList\n        className={styles.tags}\n        tags={matchers.map((matcher) => `${matcher.name}${matcherToOperator(matcher)}${matcher.value}`)}\n      />\n    </div>\n  );\n};\n\nconst getStyles = () => ({\n  tags: css({\n    justifyContent: 'flex-start',\n  }),\n});\n","import { CallToActionCard, EmptyState, LinkButton } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\nimport { contextSrv } from 'app/core/services/context_srv';\n\nimport { getInstancesPermissions } from '../../utils/access-control';\nimport { makeAMLink } from '../../utils/misc';\n\ntype Props = {\n  alertManagerSourceName: string;\n};\n\nexport const NoSilencesSplash = ({ alertManagerSourceName }: Props) => {\n  const permissions = getInstancesPermissions(alertManagerSourceName);\n\n  if (contextSrv.hasPermission(permissions.create)) {\n    return (\n      <EmptyState\n        variant=\"call-to-action\"\n        button={\n          <LinkButton href={makeAMLink('alerting/silence/new', alertManagerSourceName)} icon=\"bell-slash\" size=\"lg\">\n            <Trans i18nKey=\"silences.empty-state.button-title\">Create silence</Trans>\n          </LinkButton>\n        }\n        message={t('silences.empty-state.title', \"You haven't created any silences yet\")}\n      />\n    );\n  }\n  return <CallToActionCard callToActionElement={<div />} message=\"No silences found.\" />;\n};\n","import { useState } from 'react';\n\nimport { intervalToAbbreviatedDurationString } from '@grafana/data';\nimport { AlertmanagerAlert } from 'app/plugins/datasource/alertmanager/types';\n\nimport { AlertLabels } from '../AlertLabels';\nimport { CollapseToggle } from '../CollapseToggle';\n\nimport { AmAlertStateTag } from './AmAlertStateTag';\n\ninterface Props {\n  alert: AlertmanagerAlert;\n  className?: string;\n}\n\nexport const SilencedAlertsTableRow = ({ alert, className }: Props) => {\n  const [isCollapsed, setIsCollapsed] = useState(true);\n\n  const duration = intervalToAbbreviatedDurationString({\n    start: new Date(alert.startsAt),\n    end: new Date(alert.endsAt),\n  });\n  const alertName = Object.entries(alert.labels).reduce((name, [labelKey, labelValue]) => {\n    if (labelKey === 'alertname' || labelKey === '__alert_rule_title__') {\n      name = labelValue;\n    }\n    return name;\n  }, '');\n  return (\n    <>\n      <tr className={className}>\n        <td>\n          <CollapseToggle isCollapsed={isCollapsed} onToggle={(collapsed) => setIsCollapsed(collapsed)} />\n        </td>\n        <td>\n          <AmAlertStateTag state={alert.status.state} />\n        </td>\n        <td>for {duration}</td>\n        <td>{alertName}</td>\n      </tr>\n      {!isCollapsed && (\n        <tr className={className}>\n          <td></td>\n          <td colSpan={5}>\n            <AlertLabels labels={alert.labels} size=\"sm\" />\n          </td>\n        </tr>\n      )}\n    </>\n  );\n};\n","import { css, cx } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\nimport { AlertmanagerAlert } from 'app/plugins/datasource/alertmanager/types';\n\nimport { getAlertTableStyles } from '../../styles/table';\n\nimport { SilencedAlertsTableRow } from './SilencedAlertsTableRow';\n\ninterface Props {\n  silencedAlerts: AlertmanagerAlert[];\n}\n\nconst SilencedAlertsTable = ({ silencedAlerts }: Props) => {\n  const tableStyles = useStyles2(getAlertTableStyles);\n  const styles = useStyles2(getStyles);\n\n  if (!!silencedAlerts.length) {\n    return (\n      <table className={cx(tableStyles.table, styles.tableMargin)}>\n        <colgroup>\n          <col className={tableStyles.colExpand} />\n          <col className={styles.colState} />\n          <col />\n          <col className={styles.colName} />\n        </colgroup>\n        <thead>\n          <tr>\n            <th></th>\n            <th>\n              <Trans i18nKey=\"silences-table.header.state\">State</Trans>\n            </th>\n            <th></th>\n            <th>\n              <Trans i18nKey=\"silences-table.header.alert-name\">Alert name</Trans>\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {silencedAlerts.map((alert, index) => {\n            return (\n              <SilencedAlertsTableRow\n                key={alert.fingerprint}\n                alert={alert}\n                className={index % 2 === 0 ? tableStyles.evenRow : ''}\n              />\n            );\n          })}\n        </tbody>\n      </table>\n    );\n  } else {\n    return null;\n  }\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  tableMargin: css({\n    marginBottom: theme.spacing(1),\n  }),\n  colState: css({\n    width: '110px',\n  }),\n  colName: css({\n    width: '65%',\n  }),\n});\n\nexport default SilencedAlertsTable;\n","import { css } from '@emotion/css';\n\nimport { dateMath, GrafanaTheme2, intervalToAbbreviatedDurationString } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport SilencedAlertsTable from './SilencedAlertsTable';\nimport { SilenceTableItem } from './SilencesTable';\n\ninterface Props {\n  silence: SilenceTableItem;\n}\n\nexport const SilenceDetails = ({ silence }: Props) => {\n  const { startsAt, endsAt, comment, createdBy, silencedAlerts } = silence;\n  const styles = useStyles2(getStyles);\n\n  const dateDisplayFormat = 'YYYY-MM-DD HH:mm';\n  const startsAtDate = dateMath.parse(startsAt);\n  const endsAtDate = dateMath.parse(endsAt);\n  const duration = intervalToAbbreviatedDurationString({ start: new Date(startsAt), end: new Date(endsAt) });\n  return (\n    <div className={styles.container}>\n      <div className={styles.title}>Comment</div>\n      <div>{comment}</div>\n      <div className={styles.title}>Schedule</div>\n      <div>{`${startsAtDate?.format(dateDisplayFormat)} - ${endsAtDate?.format(dateDisplayFormat)}`}</div>\n      <div className={styles.title}>Duration</div>\n      <div>{duration}</div>\n      <div className={styles.title}>Created by</div>\n      <div>{createdBy}</div>\n      {Array.isArray(silencedAlerts) && (\n        <>\n          <div className={styles.title}>Affected alerts</div>\n          <SilencedAlertsTable silencedAlerts={silencedAlerts} />\n        </>\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css({\n    display: 'grid',\n    gridTemplateColumns: '1fr 9fr',\n    gridRowGap: '1rem',\n    paddingBottom: theme.spacing(2),\n  }),\n  title: css({\n    color: theme.colors.text.primary,\n  }),\n  row: css({\n    margin: theme.spacing(1, 0),\n  }),\n});\n","import { SilenceState } from 'app/plugins/datasource/alertmanager/types';\n\nimport { State, StateTag } from '../StateTag';\n\nconst silenceStateToState: Record<SilenceState, State> = {\n  [SilenceState.Active]: 'good',\n  [SilenceState.Expired]: 'neutral',\n  [SilenceState.Pending]: 'neutral',\n};\n\ninterface Props {\n  state: SilenceState;\n}\n\nexport const SilenceStateTag = ({ state }: Props) => <StateTag state={silenceStateToState[state]}>{state}</StateTag>;\n","import { css } from '@emotion/css';\nimport { debounce, uniqueId } from 'lodash';\nimport { FormEvent, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Field, Icon, Input, Label, Tooltip, useStyles2, Stack } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\n\nimport { parsePromQLStyleMatcherLoose } from '../../utils/matchers';\nimport { getSilenceFiltersFromUrlParams } from '../../utils/misc';\n\nconst getQueryStringKey = () => uniqueId('query-string-');\n\nexport const SilencesFilter = () => {\n  const [queryStringKey, setQueryStringKey] = useState(getQueryStringKey());\n  const [queryParams, setQueryParams] = useQueryParams();\n  const { queryString } = getSilenceFiltersFromUrlParams(queryParams);\n  const styles = useStyles2(getStyles);\n\n  const handleQueryStringChange = debounce((e: FormEvent<HTMLInputElement>) => {\n    const target = e.target as HTMLInputElement;\n    setQueryParams({ queryString: target.value || null });\n  }, 400);\n\n  const clearFilters = () => {\n    setQueryParams({\n      queryString: null,\n      silenceState: null,\n    });\n    setTimeout(() => setQueryStringKey(getQueryStringKey()));\n  };\n\n  let inputValid = queryString && queryString.length > 3;\n  try {\n    if (!queryString) {\n      inputValid = true;\n    } else {\n      parsePromQLStyleMatcherLoose(queryString);\n    }\n  } catch (err) {\n    inputValid = false;\n  }\n\n  return (\n    <div className={styles.flexRow}>\n      <Field\n        className={styles.rowChild}\n        label={\n          <Label>\n            <Stack gap={0.5}>\n              <span>Search by matchers</span>\n              <Tooltip\n                content={\n                  <div>\n                    Filter silences by using a comma separated list of matchers, e.g.:\n                    <pre>severity=critical, env=production</pre>\n                  </div>\n                }\n              >\n                <Icon name=\"info-circle\" size=\"sm\" />\n              </Tooltip>\n            </Stack>\n          </Label>\n        }\n        invalid={!inputValid}\n        error={!inputValid ? 'Query must use valid matcher syntax' : null}\n      >\n        <Input\n          key={queryStringKey}\n          className={styles.searchInput}\n          prefix={<Icon name=\"search\" />}\n          onChange={handleQueryStringChange}\n          defaultValue={queryString ?? ''}\n          placeholder=\"Search\"\n          data-testid=\"search-query-input\"\n        />\n      </Field>\n\n      {queryString && (\n        <div className={styles.rowChild}>\n          <Button variant=\"secondary\" icon=\"times\" onClick={clearFilters}>\n            Clear filters\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  searchInput: css({\n    width: '360px',\n  }),\n  flexRow: css({\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'flex-end',\n    paddingBottom: theme.spacing(3),\n    borderBottom: `1px solid ${theme.colors.border.medium}`,\n  }),\n  rowChild: css({\n    marginRight: theme.spacing(1),\n    marginBottom: 0,\n    maxHeight: '52px',\n  }),\n  fieldLabel: css({\n    fontSize: '12px',\n    fontWeight: 500,\n  }),\n});\n","import { css } from '@emotion/css';\nimport { useMemo } from 'react';\n\nimport { GrafanaTheme2, dateMath } from '@grafana/data';\nimport {\n  Alert,\n  CollapsableSection,\n  Divider,\n  Icon,\n  Link,\n  LinkButton,\n  LoadingPlaceholder,\n  Stack,\n  useStyles2,\n} from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { Trans } from 'app/core/internationalization';\nimport { alertSilencesApi } from 'app/features/alerting/unified/api/alertSilencesApi';\nimport { featureDiscoveryApi } from 'app/features/alerting/unified/api/featureDiscoveryApi';\nimport { MATCHER_ALERT_RULE_UID, SILENCES_POLL_INTERVAL_MS } from 'app/features/alerting/unified/utils/constants';\nimport { GRAFANA_RULES_SOURCE_NAME, getDatasourceAPIUid } from 'app/features/alerting/unified/utils/datasource';\nimport { AlertmanagerAlert, Silence, SilenceState } from 'app/plugins/datasource/alertmanager/types';\n\nimport { alertmanagerApi } from '../../api/alertmanagerApi';\nimport { AlertmanagerAction, useAlertmanagerAbility } from '../../hooks/useAbilities';\nimport { parsePromQLStyleMatcherLooseSafe } from '../../utils/matchers';\nimport { getSilenceFiltersFromUrlParams, makeAMLink, stringifyErrorLike } from '../../utils/misc';\nimport { Authorize } from '../Authorize';\nimport { DynamicTable, DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\n\nimport { Matchers } from './Matchers';\nimport { NoSilencesSplash } from './NoSilencesCTA';\nimport { SilenceDetails } from './SilenceDetails';\nimport { SilenceStateTag } from './SilenceStateTag';\nimport { SilencesFilter } from './SilencesFilter';\n\nexport interface SilenceTableItem extends Silence {\n  silencedAlerts: AlertmanagerAlert[] | undefined;\n}\n\ntype SilenceTableColumnProps = DynamicTableColumnProps<SilenceTableItem>;\ntype SilenceTableItemProps = DynamicTableItemProps<SilenceTableItem>;\ninterface Props {\n  alertManagerSourceName: string;\n}\n\nconst API_QUERY_OPTIONS = { pollingInterval: SILENCES_POLL_INTERVAL_MS, refetchOnFocus: true };\n\nconst SilencesTable = ({ alertManagerSourceName }: Props) => {\n  const [previewAlertsSupported, previewAlertsAllowed] = useAlertmanagerAbility(\n    AlertmanagerAction.PreviewSilencedInstances\n  );\n  const canPreview = previewAlertsSupported && previewAlertsAllowed;\n\n  const { data: alertManagerAlerts = [], isLoading: amAlertsIsLoading } =\n    alertmanagerApi.endpoints.getAlertmanagerAlerts.useQuery(\n      { amSourceName: alertManagerSourceName, filter: { silenced: true, active: true, inhibited: true } },\n      { ...API_QUERY_OPTIONS, skip: !canPreview }\n    );\n\n  const {\n    data: silences = [],\n    isLoading,\n    error,\n  } = alertSilencesApi.endpoints.getSilences.useQuery(\n    { datasourceUid: getDatasourceAPIUid(alertManagerSourceName), ruleMetadata: true, accessControl: true },\n    API_QUERY_OPTIONS\n  );\n\n  const { currentData: amFeatures } = featureDiscoveryApi.useDiscoverAmFeaturesQuery(\n    { amSourceName: alertManagerSourceName ?? '' },\n    { skip: !alertManagerSourceName }\n  );\n\n  const mimirLazyInitError =\n    stringifyErrorLike(error).includes('the Alertmanager is not configured') && amFeatures?.lazyConfigInit;\n\n  const styles = useStyles2(getStyles);\n  const [queryParams] = useQueryParams();\n  const filteredSilencesNotExpired = useFilteredSilences(silences, false);\n  const filteredSilencesExpired = useFilteredSilences(silences, true);\n\n  const { silenceState: silenceStateInParams } = getSilenceFiltersFromUrlParams(queryParams);\n  const showExpiredFromUrl = silenceStateInParams === SilenceState.Expired;\n\n  const itemsNotExpired = useMemo((): SilenceTableItemProps[] => {\n    const findSilencedAlerts = (id: string) => {\n      return alertManagerAlerts.filter((alert) => alert.status.silencedBy.includes(id));\n    };\n    return filteredSilencesNotExpired.map((silence) => {\n      const silencedAlerts = canPreview ? findSilencedAlerts(silence.id) : undefined;\n      return {\n        id: silence.id,\n        data: { ...silence, silencedAlerts },\n      };\n    });\n  }, [filteredSilencesNotExpired, alertManagerAlerts, canPreview]);\n\n  const itemsExpired = useMemo((): SilenceTableItemProps[] => {\n    const findSilencedAlerts = (id: string) => {\n      return alertManagerAlerts.filter((alert) => alert.status.silencedBy.includes(id));\n    };\n    return filteredSilencesExpired.map((silence) => {\n      const silencedAlerts = canPreview ? findSilencedAlerts(silence.id) : undefined;\n      return {\n        id: silence.id,\n        data: { ...silence, silencedAlerts },\n      };\n    });\n  }, [filteredSilencesExpired, alertManagerAlerts, canPreview]);\n\n  if (isLoading || amAlertsIsLoading) {\n    return <LoadingPlaceholder text=\"Loading silences...\" />;\n  }\n\n  if (mimirLazyInitError) {\n    return (\n      <Alert title=\"The selected Alertmanager has no configuration\" severity=\"warning\">\n        <Trans i18nKey=\"silences.table.noConfig\">\n          Create a new contact point to create a configuration using the default values or contact your administrator to\n          set up the Alertmanager.\n        </Trans>\n      </Alert>\n    );\n  }\n\n  if (error) {\n    const errMessage = stringifyErrorLike(error) || 'Unknown error.';\n    return (\n      <Alert severity=\"error\" title=\"Error loading silences\">\n        {errMessage}\n      </Alert>\n    );\n  }\n\n  return (\n    <div data-testid=\"silences-table\">\n      {!!silences.length && (\n        <Stack direction=\"column\">\n          <SilencesFilter />\n          <Authorize actions={[AlertmanagerAction.CreateSilence]}>\n            <Stack justifyContent=\"end\">\n              <LinkButton href={makeAMLink('/alerting/silence/new', alertManagerSourceName)} icon=\"plus\">\n                <Trans i18nKey=\"silences.table.add-silence-button\">Add Silence</Trans>\n              </LinkButton>\n            </Stack>\n          </Authorize>\n          <SilenceList\n            items={itemsNotExpired}\n            alertManagerSourceName={alertManagerSourceName}\n            dataTestId=\"not-expired-table\"\n          />\n          {itemsExpired.length > 0 && (\n            <CollapsableSection label={`Expired silences (${itemsExpired.length})`} isOpen={showExpiredFromUrl}>\n              <div className={styles.callout}>\n                <Icon className={styles.calloutIcon} name=\"info-circle\" />\n                <span>\n                  <Trans i18nKey=\"silences.table.expired-silences\">\n                    Expired silences are automatically deleted after 5 days.\n                  </Trans>\n                </span>\n              </div>\n              <SilenceList\n                items={itemsExpired}\n                alertManagerSourceName={alertManagerSourceName}\n                dataTestId=\"expired-table\"\n              />\n            </CollapsableSection>\n          )}\n        </Stack>\n      )}\n      {!silences.length && <NoSilencesSplash alertManagerSourceName={alertManagerSourceName} />}\n    </div>\n  );\n};\n\nfunction SilenceList({\n  items,\n  alertManagerSourceName,\n  dataTestId,\n}: {\n  items: SilenceTableItemProps[];\n  alertManagerSourceName: string;\n  dataTestId: string;\n}) {\n  const columns = useColumns(alertManagerSourceName);\n  if (!!items.length) {\n    return (\n      <DynamicTable\n        pagination={{ itemsPerPage: 25 }}\n        items={items}\n        cols={columns}\n        isExpandable\n        dataTestId={dataTestId}\n        renderExpandedContent={({ data }) => {\n          return (\n            <>\n              <Divider />\n              <SilenceDetails silence={data} />\n            </>\n          );\n        }}\n      />\n    );\n  } else {\n    return <Trans i18nKey=\"silences.table.no-matching-silences\">No matching silences found;</Trans>;\n  }\n}\n\nconst useFilteredSilences = (silences: Silence[], expired = false) => {\n  const [queryParams] = useQueryParams();\n  return useMemo(() => {\n    const { queryString } = getSilenceFiltersFromUrlParams(queryParams);\n    const silenceIdsString = queryParams?.silenceIds;\n    return silences.filter((silence) => {\n      if (typeof silenceIdsString === 'string') {\n        const idsIncluded = silenceIdsString.split(',').includes(silence.id);\n        if (!idsIncluded) {\n          return false;\n        }\n      }\n      if (queryString) {\n        const matchers = parsePromQLStyleMatcherLooseSafe(queryString);\n        const matchersMatch = matchers.every((matcher) =>\n          silence.matchers?.some(\n            ({ name, value, isEqual, isRegex }) =>\n              matcher.name === name &&\n              matcher.value === value &&\n              matcher.isEqual === isEqual &&\n              matcher.isRegex === isRegex\n          )\n        );\n        if (!matchersMatch) {\n          return false;\n        }\n      }\n      if (expired) {\n        return silence.status.state === SilenceState.Expired;\n      } else {\n        return silence.status.state !== SilenceState.Expired;\n      }\n    });\n  }, [queryParams, silences, expired]);\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  callout: css({\n    backgroundColor: theme.colors.background.secondary,\n    borderTop: `3px solid ${theme.colors.info.border}`,\n    borderRadius: theme.shape.radius.default,\n    height: '62px',\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n\n    '& > *': {\n      marginLeft: theme.spacing(1),\n    },\n  }),\n  calloutIcon: css({\n    color: theme.colors.info.text,\n  }),\n});\n\nfunction useColumns(alertManagerSourceName: string) {\n  const [updateSupported, updateAllowed] = useAlertmanagerAbility(AlertmanagerAction.UpdateSilence);\n  const [expireSilence] = alertSilencesApi.endpoints.expireSilence.useMutation();\n  const isGrafanaFlavoredAlertmanager = alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME;\n\n  return useMemo((): SilenceTableColumnProps[] => {\n    const handleExpireSilenceClick = (silenceId: string) => {\n      expireSilence({ datasourceUid: getDatasourceAPIUid(alertManagerSourceName), silenceId });\n    };\n    const columns: SilenceTableColumnProps[] = [\n      {\n        id: 'state',\n        label: 'State',\n        renderCell: function renderStateTag({ data: { status } }) {\n          return <SilenceStateTag state={status.state} />;\n        },\n        size: 3,\n      },\n      {\n        id: 'alert-rule',\n        label: 'Alert rule targeted',\n        renderCell: function renderAlertRuleLink({ data: { metadata } }) {\n          return metadata?.rule_title ? (\n            <Link\n              href={`/alerting/grafana/${metadata?.rule_uid}/view?returnTo=${encodeURIComponent('/alerting/silences')}`}\n            >\n              {metadata.rule_title}\n            </Link>\n          ) : (\n            'None'\n          );\n        },\n        size: 8,\n      },\n      {\n        id: 'matchers',\n        label: 'Matching labels',\n        renderCell: function renderMatchers({ data: { matchers } }) {\n          const filteredMatchers = matchers?.filter((matcher) => matcher.name !== MATCHER_ALERT_RULE_UID) || [];\n          return <Matchers matchers={filteredMatchers} />;\n        },\n        size: 7,\n      },\n      {\n        id: 'alerts',\n        label: 'Alerts silenced',\n        renderCell: function renderSilencedAlerts({ data: { silencedAlerts } }) {\n          return <span data-testid=\"alerts\">{Array.isArray(silencedAlerts) ? silencedAlerts.length : '-'}</span>;\n        },\n        size: 2,\n      },\n      {\n        id: 'schedule',\n        label: 'Schedule',\n        renderCell: function renderSchedule({ data: { startsAt, endsAt } }) {\n          const startsAtDate = dateMath.parse(startsAt);\n          const endsAtDate = dateMath.parse(endsAt);\n          const dateDisplayFormat = 'YYYY-MM-DD HH:mm';\n          return `${startsAtDate?.format(dateDisplayFormat)} - ${endsAtDate?.format(dateDisplayFormat)}`;\n        },\n        size: 7,\n      },\n    ];\n    if (updateSupported) {\n      columns.push({\n        id: 'actions',\n        label: 'Actions',\n        renderCell: function renderActions({ data: silence }) {\n          const isExpired = silence.status.state === SilenceState.Expired;\n\n          const canCreate = silence?.accessControl?.create;\n          const canWrite = silence?.accessControl?.write;\n\n          const canRecreate = isExpired && (isGrafanaFlavoredAlertmanager ? canCreate : updateAllowed);\n          const canEdit = !isExpired && (isGrafanaFlavoredAlertmanager ? canWrite : updateAllowed);\n\n          return (\n            <Stack gap={0.5} wrap=\"wrap\">\n              {canRecreate && (\n                <LinkButton\n                  title=\"Recreate\"\n                  size=\"sm\"\n                  variant=\"secondary\"\n                  icon=\"sync\"\n                  href={makeAMLink(`/alerting/silence/${silence.id}/edit`, alertManagerSourceName)}\n                >\n                  <Trans i18nKey=\"silences.table.recreate-button\">Recreate</Trans>\n                </LinkButton>\n              )}\n              {canEdit && (\n                <>\n                  <LinkButton\n                    title=\"Unsilence\"\n                    size=\"sm\"\n                    variant=\"secondary\"\n                    icon=\"bell\"\n                    onClick={() => handleExpireSilenceClick(silence.id)}\n                  >\n                    <Trans i18nKey=\"silences.table.unsilence-button\">Unsilence</Trans>\n                  </LinkButton>\n                  <LinkButton\n                    title=\"Edit\"\n                    size=\"sm\"\n                    variant=\"secondary\"\n                    icon=\"pen\"\n                    href={makeAMLink(`/alerting/silence/${silence.id}/edit`, alertManagerSourceName)}\n                  >\n                    <Trans i18nKey=\"silences.table.edit-button\">Edit</Trans>\n                  </LinkButton>\n                </>\n              )}\n            </Stack>\n          );\n        },\n        size: 5,\n      });\n    }\n    return columns;\n  }, [alertManagerSourceName, expireSilence, isGrafanaFlavoredAlertmanager, updateAllowed, updateSupported]);\n}\nexport default SilencesTable;\n","import { useEffect, useState } from 'react';\nimport { useMatch } from 'react-router-dom-v5-compat';\n\nimport { NavModelItem } from '@grafana/data';\n\nconst defaultPageNav: Partial<NavModelItem> = {\n  icon: 'bell-slash',\n};\n\nexport function useSilenceNavData() {\n  const [pageNav, setPageNav] = useState<NavModelItem | undefined>();\n  const isNewPath = useMatch('/alerting/silence/new');\n  const isEditPath = useMatch('/alerting/silence/:id/edit');\n\n  useEffect(() => {\n    if (isNewPath) {\n      setPageNav({\n        ...defaultPageNav,\n        id: 'silence-new',\n        text: 'Silence alert rule',\n        subTitle: 'Configure silences to stop notifications from a particular alert rule',\n      });\n    } else if (isEditPath) {\n      setPageNav({\n        ...defaultPageNav,\n        id: 'silence-edit',\n        text: 'Edit silence',\n        subTitle: 'Recreate existing silence to stop notifications from a particular alert rule',\n      });\n    }\n  }, [isEditPath, isNewPath]);\n\n  return pageNav;\n}\n","import { Route, Switch } from 'react-router-dom';\nimport { useLocation } from 'react-router-dom-v5-compat';\n\nimport { withErrorBoundary } from '@grafana/ui';\nimport {\n  defaultsFromQuery,\n  getDefaultSilenceFormValues,\n} from 'app/features/alerting/unified/components/silences/utils';\nimport { MATCHER_ALERT_RULE_UID } from 'app/features/alerting/unified/utils/constants';\nimport { parseQueryParamMatchers } from 'app/features/alerting/unified/utils/matchers';\n\nimport { AlertmanagerPageWrapper } from './components/AlertingPageWrapper';\nimport { GrafanaAlertmanagerDeliveryWarning } from './components/GrafanaAlertmanagerDeliveryWarning';\nimport ExistingSilenceEditor, { SilencesEditor } from './components/silences/SilencesEditor';\nimport SilencesTable from './components/silences/SilencesTable';\nimport { useSilenceNavData } from './hooks/useSilenceNavData';\nimport { useAlertmanager } from './state/AlertmanagerContext';\n\nconst Silences = () => {\n  const { selectedAlertmanager } = useAlertmanager();\n\n  if (!selectedAlertmanager) {\n    return null;\n  }\n\n  return (\n    <>\n      <GrafanaAlertmanagerDeliveryWarning currentAlertmanager={selectedAlertmanager} />\n      <Switch>\n        <Route exact path=\"/alerting/silences\">\n          <SilencesTable alertManagerSourceName={selectedAlertmanager} />\n        </Route>\n        <Route exact path=\"/alerting/silence/new\">\n          <SilencesEditorComponent selectedAlertmanager={selectedAlertmanager} />\n        </Route>\n        <Route exact path=\"/alerting/silence/:id/edit\">\n          <ExistingSilenceEditor alertManagerSourceName={selectedAlertmanager} />\n        </Route>\n      </Switch>\n    </>\n  );\n};\n\nfunction SilencesPage() {\n  const pageNav = useSilenceNavData();\n\n  return (\n    <AlertmanagerPageWrapper navId=\"silences\" pageNav={pageNav} accessType=\"instance\">\n      <Silences />\n    </AlertmanagerPageWrapper>\n  );\n}\n\nexport default withErrorBoundary(SilencesPage, { style: 'page' });\n\ntype SilencesEditorComponentProps = {\n  selectedAlertmanager: string;\n};\nconst SilencesEditorComponent = ({ selectedAlertmanager }: SilencesEditorComponentProps) => {\n  const location = useLocation();\n  const queryParams = new URLSearchParams(location.search);\n\n  const potentialAlertRuleMatcher = parseQueryParamMatchers(queryParams.getAll('matcher')).find(\n    (m) => m.name === MATCHER_ALERT_RULE_UID\n  );\n\n  const potentialRuleUid = potentialAlertRuleMatcher?.value;\n\n  const formValues = getDefaultSilenceFormValues(defaultsFromQuery(queryParams));\n\n  return (\n    <SilencesEditor formValues={formValues} alertManagerSourceName={selectedAlertmanager} ruleUid={potentialRuleUid} />\n  );\n};\n","import { chain, filter } from 'lodash';\nimport { PropsWithChildren } from 'react';\n\nimport {\n  Abilities,\n  Action,\n  AlertingAction,\n  AlertmanagerAction,\n  useAlertingAbilities,\n  useAllAlertmanagerAbilities,\n} from '../hooks/useAbilities';\n\ninterface AuthorizeProps extends PropsWithChildren {\n  actions: AlertmanagerAction[] | AlertingAction[];\n}\n\nexport const Authorize = ({ actions, children }: AuthorizeProps) => {\n  const alertmanagerActions = filter(actions, isAlertmanagerAction) as AlertmanagerAction[];\n  const alertSourceActions = filter(actions, isAlertingAction) as AlertingAction[];\n\n  if (alertmanagerActions.length) {\n    return <AuthorizeAlertmanager actions={alertmanagerActions}>{children}</AuthorizeAlertmanager>;\n  }\n\n  if (alertSourceActions.length) {\n    return <AuthorizeAlertsource actions={alertSourceActions}>{children}</AuthorizeAlertsource>;\n  }\n\n  return null;\n};\n\ninterface ActionsProps<T extends Action> extends PropsWithChildren {\n  actions: T[];\n}\n\nconst AuthorizeAlertmanager = ({ actions, children }: ActionsProps<AlertmanagerAction>) => {\n  const alertmanagerAbilties = useAllAlertmanagerAbilities();\n  const allowed = actionsAllowed(alertmanagerAbilties, actions);\n\n  if (allowed) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n\nconst AuthorizeAlertsource = ({ actions, children }: ActionsProps<AlertingAction>) => {\n  const alertSourceAbilities = useAlertingAbilities();\n  const allowed = actionsAllowed(alertSourceAbilities, actions);\n\n  if (allowed) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n\n// TODO add some authorize helper components for alert source and individual alert rules\n\n// check if some action is allowed from the abilities\nfunction actionsAllowed<T extends Action>(abilities: Abilities<T>, actions: T[]) {\n  return chain(abilities)\n    .pick(actions)\n    .values()\n    .value()\n    .some(([_supported, allowed]) => allowed === true);\n}\n\nfunction isAlertmanagerAction(action: AlertmanagerAction) {\n  return Object.values(AlertmanagerAction).includes(action);\n}\n\nfunction isAlertingAction(action: AlertingAction) {\n  return Object.values(AlertingAction).includes(action);\n}\n","import { HTMLAttributes } from 'react';\n\nimport { IconSize, Button } from '@grafana/ui';\n\ninterface Props extends HTMLAttributes<HTMLButtonElement> {\n  isCollapsed: boolean;\n  onToggle: (isCollapsed: boolean) => void;\n  // Todo: this should be made compulsory for a11y purposes\n  idControlled?: string;\n  size?: IconSize;\n  className?: string;\n  text?: string;\n}\n\nexport const CollapseToggle = ({\n  isCollapsed,\n  onToggle,\n  idControlled,\n  className,\n  text,\n  size = 'xl',\n  ...restOfProps\n}: Props) => {\n  return (\n    <Button\n      type=\"button\"\n      fill=\"text\"\n      variant=\"secondary\"\n      aria-expanded={!isCollapsed}\n      aria-controls={idControlled}\n      className={className}\n      icon={isCollapsed ? 'angle-right' : 'angle-down'}\n      onClick={() => onToggle(!isCollapsed)}\n      {...restOfProps}\n    >\n      {text}\n    </Button>\n  );\n};\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data/src';\nimport { Alert, useStyles2 } from '@grafana/ui/src';\n\nimport { AlertmanagerChoice } from '../../../../plugins/datasource/alertmanager/types';\nimport { alertmanagerApi } from '../api/alertmanagerApi';\nimport { AlertingAction, useAlertingAbility } from '../hooks/useAbilities';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\ninterface GrafanaAlertmanagerDeliveryWarningProps {\n  currentAlertmanager: string;\n}\n\nexport function GrafanaAlertmanagerDeliveryWarning({ currentAlertmanager }: GrafanaAlertmanagerDeliveryWarningProps) {\n  const styles = useStyles2(getStyles);\n  const externalAlertmanager = currentAlertmanager !== GRAFANA_RULES_SOURCE_NAME;\n\n  const [readConfigurationStatusSupported, readConfigurationStatusAllowed] = useAlertingAbility(\n    AlertingAction.ReadConfigurationStatus\n  );\n  const canReadConfigurationStatus = readConfigurationStatusSupported && readConfigurationStatusAllowed;\n\n  const { currentData: amChoiceStatus } = alertmanagerApi.endpoints.getGrafanaAlertingConfigurationStatus.useQuery(\n    undefined,\n    {\n      skip: externalAlertmanager || !canReadConfigurationStatus,\n    }\n  );\n\n  const interactsWithExternalAMs =\n    amChoiceStatus?.alertmanagersChoice &&\n    [AlertmanagerChoice.External, AlertmanagerChoice.All].includes(amChoiceStatus?.alertmanagersChoice);\n\n  if (!interactsWithExternalAMs || externalAlertmanager) {\n    return null;\n  }\n\n  const hasActiveExternalAMs = amChoiceStatus.numExternalAlertmanagers > 0;\n\n  if (amChoiceStatus.alertmanagersChoice === AlertmanagerChoice.External) {\n    return (\n      <Alert title=\"Grafana alerts are not delivered to Grafana Alertmanager\">\n        Grafana is configured to send alerts to external Alertmanagers only. Changing Grafana Alertmanager configuration\n        will not affect delivery of your alerts.\n        <div className={styles.adminHint}>\n          To change your Alertmanager setup, go to the Alerting Admin page. If you do not have access, contact your\n          Administrator.\n        </div>\n      </Alert>\n    );\n  }\n\n  if (amChoiceStatus.alertmanagersChoice === AlertmanagerChoice.All && hasActiveExternalAMs) {\n    return (\n      <Alert title=\"You have additional Alertmanagers to configure\" severity=\"warning\">\n        Ensure you make configuration changes in the correct Alertmanagers; both internal and external. Changing one\n        will not affect the others.\n        <div className={styles.adminHint}>\n          To change your Alertmanager setup, go to the Alerting Admin page. If you do not have access, contact your\n          Administrator.\n        </div>\n      </Alert>\n    );\n  }\n\n  return null;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  adminHint: css({\n    fontSize: theme.typography.bodySmall.fontSize,\n    fontWeight: theme.typography.bodySmall.fontWeight,\n  }),\n});\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nexport const getAlertTableStyles = (theme: GrafanaTheme2) => ({\n  table: css({\n    width: '100%',\n    borderRadius: theme.shape.radius.default,\n    border: `solid 1px ${theme.colors.border.weak}`,\n    backgroundColor: theme.colors.background.secondary,\n\n    th: {\n      padding: theme.spacing(1),\n    },\n\n    td: {\n      padding: `0 ${theme.spacing(1)}`,\n    },\n\n    tr: {\n      height: '38px',\n    },\n  }),\n  evenRow: css({\n    backgroundColor: theme.colors.background.primary,\n  }),\n  colExpand: css({\n    width: '36px',\n  }),\n  nameCell: css({\n    gap: theme.spacing(1),\n  }),\n  actionsCell: css({\n    textAlign: 'right',\n    width: '1%',\n    whiteSpace: 'nowrap',\n\n    '& > * + *': {\n      marginLeft: theme.spacing(0.5),\n    },\n  }),\n});\n"],"names":["Matchers","matchers","styles","getStyles","TagList","matcher","NoSilencesSplash","alertManagerSourceName","permissions","EmptyState","CallToActionCard","SilencedAlertsTableRow","alert","className","isCollapsed","setIsCollapsed","duration","alertName","name","labelKey","labelValue","CollapseToggle","collapsed","AmAlertStateTag","AlertLabels","SilencedAlertsTable","silencedAlerts","tableStyles","index","theme","SilenceDetails","silence","startsAt","endsAt","comment","createdBy","dateDisplayFormat","startsAtDate","endsAtDate","silenceStateToState","SilenceStateTag","state","StateTag","getQueryStringKey","SilencesFilter","queryStringKey","setQueryStringKey","queryParams","setQueryParams","useQueryParams","queryString","handleQueryStringChange","e","target","clearFilters","inputValid","Field","Label","Stack","Tooltip","Icon","Input","Button","API_QUERY_OPTIONS","SilencesTable","previewAlertsSupported","previewAlertsAllowed","canPreview","alertManagerAlerts","amAlertsIsLoading","alertmanagerApi","silences","isLoading","error","alertSilencesApi","amFeatures","featureDiscoveryApi","mimirLazyInitError","filteredSilencesNotExpired","useFilteredSilences","filteredSilencesExpired","silenceStateInParams","showExpiredFromUrl","itemsNotExpired","findSilencedAlerts","id","itemsExpired","LoadingPlaceholder","Alert","errMessage","Authorize","SilenceList","CollapsableSection","items","dataTestId","columns","useColumns","DynamicTable","data","Divider","expired","silenceIdsString","value","isEqual","isRegex","updateSupported","updateAllowed","expireSilence","isGrafanaFlavoredAlertmanager","handleExpireSilenceClick","silenceId","status","metadata","Link","filteredMatchers","isExpired","canCreate","canWrite","canRecreate","canEdit","defaultPageNav","useSilenceNavData","pageNav","setPageNav","isNewPath","isEditPath","Silences","selectedAlertmanager","GrafanaAlertmanagerDeliveryWarning","SilencesEditorComponent","SilencesPage","location","potentialRuleUid","m","formValues","SilencesEditor","actions","children","alertmanagerActions","isAlertmanagerAction","alertSourceActions","isAlertingAction","AuthorizeAlertmanager","AuthorizeAlertsource","alertmanagerAbilties","actionsAllowed","alertSourceAbilities","abilities","_supported","allowed","action","onToggle","idControlled","text","size","restOfProps","currentAlertmanager","externalAlertmanager","readConfigurationStatusSupported","readConfigurationStatusAllowed","canReadConfigurationStatus","amChoiceStatus","hasActiveExternalAMs","getAlertTableStyles"],"sourceRoot":""}