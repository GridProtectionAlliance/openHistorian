{"version":3,"file":"AlertingSettings.51e2844c4b5205461122.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/components/settings/AlertmanagerConfig.tsx","webpack://grafana/./public/app/features/alerting/unified/api/dataSourcesApi.ts","webpack://grafana/./public/app/features/alerting/unified/hooks/useExternalAmSelector.ts","webpack://grafana/./public/app/features/alerting/unified/utils/settings.ts","webpack://grafana/./public/app/features/alerting/unified/components/settings/hooks.tsx","webpack://grafana/./public/app/features/alerting/unified/components/settings/SettingsContext.tsx","webpack://grafana/./public/app/features/alerting/unified/components/settings/VersionManager.tsx","webpack://grafana/./public/app/features/alerting/unified/components/settings/ConfigurationDrawer.tsx","webpack://grafana/./public/app/features/alerting/unified/components/settings/AlertmanagerCard.tsx","webpack://grafana/./public/app/features/alerting/unified/components/settings/ExternalAlertmanagers.tsx","webpack://grafana/./public/app/features/alerting/unified/components/settings/InternalAlertmanager.tsx","webpack://grafana/./public/app/features/alerting/unified/Settings.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertmanagerConfig.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport { useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Button, CodeEditor, ConfirmModal, Stack, useStyles2 } from '@grafana/ui';\n\nimport { reportFormErrors } from '../../Analytics';\nimport { useAlertmanagerConfig } from '../../hooks/useAlertmanagerConfig';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { GRAFANA_RULES_SOURCE_NAME, isVanillaPrometheusAlertManagerDataSource } from '../../utils/datasource';\nimport { Spacer } from '../Spacer';\n\nexport interface FormValues {\n  configJSON: string;\n}\n\ninterface Props {\n  alertmanagerName: string;\n  onDismiss: () => void;\n  onSave: (dataSourceName: string, oldConfig: string, newConfig: string) => void;\n  onReset: (dataSourceName: string) => void;\n}\n\nexport default function AlertmanagerConfig({ alertmanagerName, onDismiss, onSave, onReset }: Props): JSX.Element {\n  const { loading: isDeleting, error: deletingError } = useUnifiedAlertingSelector((state) => state.deleteAMConfig);\n  const { loading: isSaving, error: savingError } = useUnifiedAlertingSelector((state) => state.saveAMConfig);\n  const [showResetConfirmation, setShowResetConfirmation] = useState(false);\n\n  // ⚠️ provisioned data sources should not prevent the configuration from being edited\n  const immutableDataSource = alertmanagerName ? isVanillaPrometheusAlertManagerDataSource(alertmanagerName) : false;\n  const readOnly = immutableDataSource;\n\n  const isGrafanaManagedAlertmanager = alertmanagerName === GRAFANA_RULES_SOURCE_NAME;\n  const styles = useStyles2(getStyles);\n\n  const {\n    currentData: config,\n    error: loadingError,\n    isSuccess: isLoadingSuccessful,\n    isLoading: isLoadingConfig,\n  } = useAlertmanagerConfig(alertmanagerName);\n\n  const defaultValues = {\n    configJSON: config ? JSON.stringify(config, null, 2) : '',\n  };\n\n  const {\n    register,\n    setValue,\n    setError,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<FormValues>({\n    defaultValues,\n  });\n\n  // make sure we update the configJSON field when we receive a response from the `useAlertmanagerConfig` hook\n  useEffect(() => {\n    if (config) {\n      setValue('configJSON', JSON.stringify(config, null, 2));\n    }\n  }, [config, setValue]);\n\n  useEffect(() => {\n    if (savingError) {\n      setError('configJSON', { type: 'deps', message: savingError.message });\n    }\n  }, [savingError, setError]);\n\n  useEffect(() => {\n    if (deletingError) {\n      setError('configJSON', { type: 'deps', message: deletingError.message });\n    }\n  }, [deletingError, setError]);\n\n  // manually register the config field with validation\n  // @TODO sometimes the value doesn't get registered – find out why\n  register('configJSON', {\n    required: { value: true, message: 'Configuration cannot be empty' },\n    validate: (value: string) => {\n      try {\n        JSON.parse(value);\n        return true;\n      } catch (e) {\n        return e instanceof Error ? e.message : 'JSON is invalid';\n      }\n    },\n  });\n\n  const handleSave = handleSubmit((values: FormValues) => {\n    onSave(alertmanagerName, defaultValues.configJSON, values.configJSON);\n  }, reportFormErrors);\n\n  const isOperating = isLoadingConfig || isDeleting || isSaving;\n\n  /* loading error, if this fails don't bother rendering the form */\n  if (loadingError) {\n    return (\n      <Alert severity=\"error\" title=\"Failed to load Alertmanager configuration\">\n        {loadingError.message ?? 'An unknown error occurred.'}\n      </Alert>\n    );\n  }\n\n  /* resetting configuration state */\n  if (isDeleting) {\n    return (\n      <Alert severity=\"info\" title=\"Resetting Alertmanager configuration\">\n        Resetting configuration, this might take a while.\n      </Alert>\n    );\n  }\n\n  const confirmationText = isGrafanaManagedAlertmanager\n    ? `Are you sure you want to reset configuration for the Grafana Alertmanager? Contact points and notification policies will be reset to their defaults.`\n    : `Are you sure you want to reset configuration for \"${alertmanagerName}\"? Contact points and notification policies will be reset to their defaults.`;\n\n  return (\n    <div className={styles.container}>\n      {/* form error state */}\n      {errors.configJSON && (\n        <Alert severity=\"error\" title=\"Oops, something went wrong\">\n          {errors.configJSON.message || 'An unknown error occurred.'}\n        </Alert>\n      )}\n\n      {isLoadingSuccessful && (\n        <div className={styles.content}>\n          <AutoSizer>\n            {({ height, width }) => (\n              <CodeEditor\n                language=\"json\"\n                width={width}\n                height={height}\n                showLineNumbers={true}\n                monacoOptions={{\n                  scrollBeyondLastLine: false,\n                }}\n                value={defaultValues.configJSON}\n                showMiniMap={false}\n                onSave={(value) => setValue('configJSON', value)}\n                onBlur={(value) => setValue('configJSON', value)}\n                readOnly={isOperating}\n              />\n            )}\n          </AutoSizer>\n        </div>\n      )}\n\n      <Stack justifyContent=\"flex-end\">\n        {!readOnly && (\n          <Button variant=\"destructive\" onClick={() => setShowResetConfirmation(true)} disabled={isOperating}>\n            Reset\n          </Button>\n        )}\n        <Spacer />\n        <Button variant=\"secondary\" onClick={() => onDismiss()} disabled={isOperating}>\n          Cancel\n        </Button>\n        {!readOnly && (\n          <Button variant=\"primary\" onClick={handleSave} disabled={isOperating}>\n            Save\n          </Button>\n        )}\n      </Stack>\n      <ConfirmModal\n        isOpen={showResetConfirmation}\n        title=\"Reset Alertmanager configuration\"\n        body={confirmationText}\n        confirmText=\"Yes, reset configuration\"\n        onConfirm={() => {\n          onReset(alertmanagerName);\n          setShowResetConfirmation(false);\n        }}\n        onDismiss={() => {\n          setShowResetConfirmation(false);\n        }}\n      />\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css({\n    display: 'flex',\n    flexDirection: 'column',\n    height: '100%',\n    gap: theme.spacing(2),\n  }),\n  content: css({\n    flex: '1 1 100%',\n  }),\n});\n","import { DataSourceSettings } from '@grafana/data';\n\nimport { alertingApi } from './alertingApi';\n\nexport const dataSourcesApi = alertingApi.injectEndpoints({\n  endpoints: (build) => ({\n    getAllDataSourceSettings: build.query<DataSourceSettings[], void>({\n      query: () => ({ url: 'api/datasources' }),\n      // we'll create individual cache entries for each datasource UID\n      providesTags: (result) => {\n        return result ? result.map(({ uid }) => ({ type: 'DataSourceSettings', id: uid })) : ['DataSourceSettings'];\n      },\n    }),\n    getDataSourceSettingsForUID: build.query<DataSourceSettings, string>({\n      query: (uid) => ({ url: `api/datasources/uid/${uid}` }),\n      providesTags: (_result, _error, uid) => [{ type: 'DataSourceSettings', id: uid }],\n    }),\n    updateDataSourceSettingsForUID: build.mutation<unknown, { uid: string; settings: DataSourceSettings }>({\n      query: ({ uid, settings }) => ({\n        url: `api/datasources/uid/${uid}`,\n        method: 'PUT',\n        data: settings,\n        showSuccessAlert: false,\n      }),\n      // we need to invalidate the settings for a single Datasource because otherwise the backend will complain\n      // about it already having been edited by another user – edits are tracked with a version number\n      invalidatesTags: (_result, _error, args) => [{ type: 'DataSourceSettings', id: args.uid }],\n    }),\n  }),\n});\n","import { DataSourceSettings } from '@grafana/data';\nimport {\n  AlertManagerDataSourceJsonData,\n  ExternalAlertmanagersConnectionStatus,\n} from 'app/plugins/datasource/alertmanager/types';\n\nimport { alertmanagerApi } from '../api/alertmanagerApi';\nimport { dataSourcesApi } from '../api/dataSourcesApi';\nimport { isAlertmanagerDataSource } from '../utils/datasource';\n\nexport type ConnectionStatus = 'active' | 'pending' | 'dropped' | 'inconclusive' | 'uninterested' | 'unknown';\n\nexport interface ExternalAlertmanagerDataSourceWithStatus {\n  dataSourceSettings: DataSourceSettings<AlertManagerDataSourceJsonData>;\n  status: ConnectionStatus;\n}\n\ninterface UseExternalDataSourceAlertmanagersProps {\n  refetchOnMountOrArgChange?: boolean;\n}\n\n/**\n * Returns all configured Alertmanager data sources and their connection status with the internal ruler\n */\nexport function useExternalDataSourceAlertmanagers({\n  refetchOnMountOrArgChange = false,\n}: UseExternalDataSourceAlertmanagersProps = {}): ExternalAlertmanagerDataSourceWithStatus[] {\n  // firstly we'll fetch the settings for all datasources and filter for \"alertmanager\" type\n  const { alertmanagerDataSources } = dataSourcesApi.endpoints.getAllDataSourceSettings.useQuery(undefined, {\n    refetchOnReconnect: true,\n    // we will refetch the list of data sources every time the component is rendered so we always show fresh data after a user\n    // may have made changes to a data source and came back to the list\n    refetchOnMountOrArgChange,\n    selectFromResult: (result) => {\n      const alertmanagerDataSources = result.currentData?.filter(isAlertmanagerDataSource) ?? [];\n      return { ...result, alertmanagerDataSources };\n    },\n  });\n\n  // we'll also fetch the configuration for which Alertmanagers we are forwarding Grafana-managed alerts too\n  const { currentData: externalAlertmanagers } = alertmanagerApi.endpoints.getExternalAlertmanagers.useQuery(\n    undefined,\n    { refetchOnReconnect: true, refetchOnMountOrArgChange }\n  );\n\n  if (!alertmanagerDataSources) {\n    return [];\n  }\n\n  return alertmanagerDataSources.map<ExternalAlertmanagerDataSourceWithStatus>((dataSourceSettings) => {\n    const status = externalAlertmanagers\n      ? determineAlertmanagerConnectionStatus(externalAlertmanagers, dataSourceSettings)\n      : 'unknown';\n\n    return {\n      dataSourceSettings,\n      status,\n    };\n  });\n}\n\n// using the information from /api/v1/ngalert/alertmanagers we should derive the connection status of a single data source\nfunction determineAlertmanagerConnectionStatus(\n  externalAlertmanagers: ExternalAlertmanagersConnectionStatus,\n  dataSourceSettings: DataSourceSettings<AlertManagerDataSourceJsonData>\n): ConnectionStatus {\n  const isInterestedInAlerts = dataSourceSettings.jsonData.handleGrafanaManagedAlerts;\n  if (!isInterestedInAlerts) {\n    return 'uninterested';\n  }\n\n  const isActive =\n    externalAlertmanagers?.activeAlertManagers.some((am) => {\n      return isAlertmanagerMatchByURL(dataSourceSettings.url, am.url);\n    }) ?? [];\n\n  const isDropped =\n    externalAlertmanagers?.droppedAlertManagers.some((am) => {\n      return isAlertmanagerMatchByURL(dataSourceSettings.url, am.url);\n    }) ?? [];\n\n  // the Alertmanager is being adopted (pending) if it is interested in handling alerts but not in either \"active\" or \"dropped\"\n  const isPending = !isActive && !isDropped;\n  if (isPending) {\n    return 'pending';\n  }\n\n  // Multiple Alertmanagers of the same URL may exist (e.g. with different credentials)\n  // Alertmanager response only contains URLs, so when the URL exists in both active and dropped, we are not able\n  // to distinguish which is which, resulting in an inconclusive status.\n  const isInconclusive = isActive && isDropped;\n  if (isInconclusive) {\n    return 'inconclusive';\n  }\n\n  // if we get here, it's neither \"uninterested\", nor \"inconclusive\" nor \"pending\"\n  if (isActive) {\n    return 'active';\n  } else if (isDropped) {\n    return 'dropped';\n  }\n\n  return 'unknown';\n}\n\n// the vanilla Alertmanager and Mimir Alertmanager mount their API endpoints on different sub-paths\n// Cortex also uses the same paths as Mimir\nconst MIMIR_ALERTMANAGER_PATH = '/alertmanager/api/v2/alerts';\nconst VANILLA_ALERTMANAGER_PATH = '/api/v2/alerts';\n\n// when using the Mimir Alertmanager, those paths are mounted under \"/alertmanager\"\nfunction isAlertmanagerMatchByURL(dataSourceUrl: string, alertmanagerUrl: string) {\n  const normalizedUrl = normalizeDataSourceURL(dataSourceUrl);\n\n  const prometheusAlertmanagerMatch = alertmanagerUrl === `${normalizedUrl}${VANILLA_ALERTMANAGER_PATH}`;\n  const mimirAlertmanagerMatch = alertmanagerUrl === `${normalizedUrl}${MIMIR_ALERTMANAGER_PATH}`;\n\n  return prometheusAlertmanagerMatch || mimirAlertmanagerMatch;\n}\n\n// Grafana prepends the http protocol if there isn't one, but it doesn't store that in the datasource settings\nexport function normalizeDataSourceURL(url: string) {\n  const hasProtocol = new RegExp('^[^:]*://').test(url);\n  const urlWithProtocol = hasProtocol ? url : `http://${url}`;\n\n  // replace trailing slashes\n  return urlWithProtocol.replace(/\\/+$/, '');\n}\n","import { AlertmanagerChoice, GrafanaAlertingConfiguration } from 'app/plugins/datasource/alertmanager/types';\n\n// if we have either \"internal\" or \"both\" configured this means the internal Alertmanager is receiving Grafana-managed alerts\nexport const isInternalAlertmanagerInterestedInAlerts = (config?: GrafanaAlertingConfiguration): boolean => {\n  if (!config) {\n    // The backend doesn't have a configuration record in a new Grafana instance until the user has interacted with the configuration page.\n    // For that reason, in case of no configuration, we assume that the internal Alertmanager is interested in alerts.\n    return true;\n  }\n  switch (config.alertmanagersChoice) {\n    case AlertmanagerChoice.Internal:\n    case AlertmanagerChoice.All:\n      return true;\n    case AlertmanagerChoice.External:\n    default:\n      return false;\n  }\n};\n","import { produce } from 'immer';\n\nimport { dataSourcesApi } from '../../api/dataSourcesApi';\nimport { isAlertmanagerDataSource } from '../../utils/datasource';\n\nexport const useEnableOrDisableHandlingGrafanaManagedAlerts = () => {\n  const [getSettings, getSettingsState] = dataSourcesApi.endpoints.getDataSourceSettingsForUID.useLazyQuery();\n  const [updateSettings, updateSettingsState] = dataSourcesApi.endpoints.updateDataSourceSettingsForUID.useMutation();\n\n  const enableOrDisable = async (uid: string, handleGrafanaManagedAlerts: boolean) => {\n    const existingSettings = await getSettings(uid).unwrap();\n    if (!isAlertmanagerDataSource(existingSettings)) {\n      throw new Error(`Data source with UID ${uid} is not an Alertmanager data source`);\n    }\n\n    const newSettings = produce(existingSettings, (draft) => {\n      draft.jsonData.handleGrafanaManagedAlerts = handleGrafanaManagedAlerts;\n    });\n\n    updateSettings({ uid, settings: newSettings });\n  };\n\n  const enable = (uid: string) => enableOrDisable(uid, true);\n  const disable = (uid: string) => enableOrDisable(uid, false);\n\n  const loadingState = {\n    isLoading: getSettingsState.isLoading || updateSettingsState.isLoading,\n    isError: getSettingsState.isError || updateSettingsState.isError,\n    error: getSettingsState.error || updateSettingsState.error,\n    data: updateSettingsState.data,\n  };\n\n  return [enable, disable, loadingState] as const;\n};\n","import { debounce, union, without } from 'lodash';\nimport { createContext, useContext, PropsWithChildren, useEffect, useRef } from 'react';\n\nimport { AppEvents } from '@grafana/data';\nimport { config, getAppEvents } from '@grafana/runtime';\nimport { AlertmanagerChoice, GrafanaAlertingConfiguration } from 'app/plugins/datasource/alertmanager/types';\nimport { dispatch } from 'app/store/store';\n\nimport { alertmanagerApi } from '../../api/alertmanagerApi';\nimport { dataSourcesApi } from '../../api/dataSourcesApi';\nimport {\n  ExternalAlertmanagerDataSourceWithStatus,\n  useExternalDataSourceAlertmanagers,\n} from '../../hooks/useExternalAmSelector';\nimport { deleteAlertManagerConfigAction, updateAlertManagerConfigAction } from '../../state/actions';\nimport { GRAFANA_RULES_SOURCE_NAME, isAlertmanagerDataSourceInterestedInAlerts } from '../../utils/datasource';\nimport { isInternalAlertmanagerInterestedInAlerts } from '../../utils/settings';\n\nimport { useEnableOrDisableHandlingGrafanaManagedAlerts } from './hooks';\n\nconst appEvents = getAppEvents();\n\ninterface Context {\n  configuration?: GrafanaAlertingConfiguration;\n  externalAlertmanagerDataSourcesWithStatus: ExternalAlertmanagerDataSourceWithStatus[];\n\n  isLoading: boolean;\n  isUpdating: boolean;\n\n  // for enabling / disabling Alertmanager datasources as additional receivers\n  enableAlertmanager: (uid: string) => void;\n  disableAlertmanager: (uid: string) => void;\n\n  // for updating or resetting the configuration for an Alertmanager\n  updateAlertmanagerSettings: (name: string, oldConfig: string, newConfig: string) => void;\n  resetAlertmanagerSettings: (name: string) => void;\n\n  // this feature toggle is for disabling the \"send to external Alertmanagers\" feature\n  forwardingDisabled: boolean;\n}\n\nconst SettingsContext = createContext<Context | undefined>(undefined);\nconst isInternalAlertmanager = (uid: string) => uid === GRAFANA_RULES_SOURCE_NAME;\n\nexport const SettingsProvider = (props: PropsWithChildren) => {\n  // this list will keep track of Alertmanager UIDs (including internal) that are interested in receiving alert instances\n  // this will be used to infer the correct \"delivery mode\" and update the correct list of datasources with \"wantsAlertsReceived\"\n  const interestedAlertmanagers: string[] = [];\n\n  const forwardingDisabled = config.featureToggles.alertingDisableSendAlertsExternal === true;\n\n  const { currentData: configuration, isLoading: isLoadingConfiguration } =\n    alertmanagerApi.endpoints.getGrafanaAlertingConfiguration.useQuery();\n\n  const [updateConfiguration, updateConfigurationState] =\n    alertmanagerApi.endpoints.updateGrafanaAlertingConfiguration.useMutation();\n  const [enableGrafanaManagedAlerts, disableGrafanaManagedAlerts, enableOrDisableHandlingGrafanaManagedAlertsState] =\n    useEnableOrDisableHandlingGrafanaManagedAlerts();\n\n  // we will alwayw refetch because a user could edit a data source and come back to this page\n  const externalAlertmanagersWithStatus = useExternalDataSourceAlertmanagers({ refetchOnMountOrArgChange: true });\n\n  const interestedInternal = isInternalAlertmanagerInterestedInAlerts(configuration);\n  if (interestedInternal) {\n    interestedAlertmanagers.push(GRAFANA_RULES_SOURCE_NAME);\n  }\n\n  externalAlertmanagersWithStatus\n    .filter((dataSource) => isAlertmanagerDataSourceInterestedInAlerts(dataSource.dataSourceSettings))\n    .forEach((alertmanager) => {\n      interestedAlertmanagers.push(alertmanager.dataSourceSettings.uid);\n    });\n\n  const enableAlertmanager = (uid: string) => {\n    const updatedInterestedAlertmanagers = union([uid], interestedAlertmanagers); // union will give us a unique array of uids\n    const newDeliveryMode = determineDeliveryMode(updatedInterestedAlertmanagers);\n    if (newDeliveryMode === null) {\n      return;\n    }\n\n    if (newDeliveryMode !== configuration?.alertmanagersChoice) {\n      updateConfiguration({ alertmanagersChoice: newDeliveryMode });\n    }\n\n    if (!isInternalAlertmanager(uid)) {\n      enableGrafanaManagedAlerts(uid);\n    }\n  };\n\n  const disableAlertmanager = (uid: string) => {\n    const updatedInterestedAlertmanagers = without(interestedAlertmanagers, uid);\n    const newDeliveryMode = determineDeliveryMode(updatedInterestedAlertmanagers);\n    if (newDeliveryMode === null) {\n      return;\n    }\n\n    if (newDeliveryMode !== configuration?.alertmanagersChoice) {\n      updateConfiguration({ alertmanagersChoice: newDeliveryMode });\n    }\n\n    if (!isInternalAlertmanager(uid)) {\n      disableGrafanaManagedAlerts(uid);\n    }\n  };\n\n  const updateAlertmanagerSettings = (alertManagerName: string, oldConfig: string, newConfig: string): void => {\n    dispatch(\n      updateAlertManagerConfigAction({\n        newConfig: JSON.parse(newConfig),\n        oldConfig: JSON.parse(oldConfig),\n        alertManagerSourceName: alertManagerName,\n        successMessage: 'Alertmanager configuration updated.',\n      })\n    );\n  };\n\n  const resetAlertmanagerSettings = (alertmanagerName: string) => {\n    dispatch(deleteAlertManagerConfigAction(alertmanagerName));\n  };\n\n  const value: Context = {\n    configuration,\n    forwardingDisabled,\n    externalAlertmanagerDataSourcesWithStatus: externalAlertmanagersWithStatus,\n\n    enableAlertmanager,\n    disableAlertmanager,\n\n    isLoading: isLoadingConfiguration,\n    isUpdating: updateConfigurationState.isLoading || enableOrDisableHandlingGrafanaManagedAlertsState.isLoading,\n\n    // CRUD for Alertmanager settings\n    updateAlertmanagerSettings,\n    resetAlertmanagerSettings,\n  };\n\n  return <SettingsContext.Provider value={value}>{props.children}</SettingsContext.Provider>;\n};\n\nfunction determineDeliveryMode(interestedAlertmanagers: string[]): AlertmanagerChoice | null {\n  const containsInternalAlertmanager = interestedAlertmanagers.some((uid) => uid === GRAFANA_RULES_SOURCE_NAME);\n  const containsExternalAlertmanager = interestedAlertmanagers.some((uid) => uid !== GRAFANA_RULES_SOURCE_NAME);\n\n  if (containsInternalAlertmanager && containsExternalAlertmanager) {\n    return AlertmanagerChoice.All;\n  }\n\n  if (!containsInternalAlertmanager && containsExternalAlertmanager) {\n    return AlertmanagerChoice.External;\n  }\n\n  if (containsInternalAlertmanager && !containsExternalAlertmanager) {\n    return AlertmanagerChoice.Internal;\n  }\n\n  // if we get here we probably have no targets at all and that's not supposed to be possible.\n  appEvents.publish({\n    type: AppEvents.alertError.name,\n    payload: ['You need to have at least one Alertmanager to receive alerts.'],\n  });\n\n  return null;\n}\n\nexport function useSettings() {\n  const context = useContext(SettingsContext);\n\n  if (context === undefined) {\n    throw new Error('useSettings must be used within a SettingsContext');\n  }\n\n  // we'll automatically re-fetch the Alertmanager connection status while any Alertmanagers are pending by invalidating the cache entry\n  const debouncedUpdateStatus = debounce(() => {\n    dispatch(dataSourcesApi.util.invalidateTags(['AlertmanagerConnectionStatus']));\n  }, 3000);\n  const refetchAlertmanagerConnectionStatus = useRef(debouncedUpdateStatus);\n\n  const hasPendingAlertmanagers = context.externalAlertmanagerDataSourcesWithStatus.some(\n    ({ status }) => status === 'pending'\n  );\n  if (hasPendingAlertmanagers) {\n    refetchAlertmanagerConnectionStatus.current();\n  }\n\n  useEffect(() => {\n    debouncedUpdateStatus.cancel();\n  }, [debouncedUpdateStatus]);\n\n  return context;\n}\n","import { css } from '@emotion/css';\nimport { chain, omit } from 'lodash';\nimport moment from 'moment';\nimport { useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport {\n  Alert,\n  Badge,\n  Button,\n  CellProps,\n  Column,\n  ConfirmModal,\n  InteractiveTable,\n  Stack,\n  Text,\n  useStyles2,\n} from '@grafana/ui';\nimport { DiffViewer } from 'app/features/dashboard-scene/settings/version-history/DiffViewer';\nimport { jsonDiff } from 'app/features/dashboard-scene/settings/version-history/utils';\nimport { AlertManagerCortexConfig } from 'app/plugins/datasource/alertmanager/types';\n\nimport { alertmanagerApi } from '../../api/alertmanagerApi';\nimport { stringifyErrorLike } from '../../utils/misc';\nimport { Spacer } from '../Spacer';\n\nconst VERSIONS_PAGE_SIZE = 30;\n\ninterface AlertmanagerConfigurationVersionManagerProps {\n  alertmanagerName: string;\n}\n\ntype Diff = {\n  added: number;\n  removed: number;\n};\n\ntype VersionData = {\n  id: string;\n  lastAppliedAt: string;\n  diff: Diff;\n};\n\ninterface ConfigWithDiff extends AlertManagerCortexConfig {\n  diff: Diff;\n}\n\nconst AlertmanagerConfigurationVersionManager = ({\n  alertmanagerName,\n}: AlertmanagerConfigurationVersionManagerProps) => {\n  // we'll track the ID of the version we want to restore\n  const [activeRestoreVersion, setActiveRestoreVersion] = useState<number | undefined>(undefined);\n  const [confirmRestore, setConfirmRestore] = useState(false);\n\n  // in here we'll track the configs we are comparing\n  const [activeComparison, setActiveComparison] = useState<[left: string, right: string] | undefined>(undefined);\n\n  const {\n    currentData: historicalConfigs = [],\n    isLoading,\n    error,\n  } = alertmanagerApi.endpoints.getAlertmanagerConfigurationHistory.useQuery(undefined);\n\n  const [resetAlertManagerConfigToOldVersion, restoreVersionState] =\n    alertmanagerApi.endpoints.resetAlertmanagerConfigurationToOldVersion.useMutation();\n\n  const showConfirmation = () => {\n    setConfirmRestore(true);\n  };\n\n  const hideConfirmation = () => {\n    setConfirmRestore(false);\n  };\n\n  const restoreVersion = (id: number) => {\n    setActiveComparison(undefined);\n    setActiveRestoreVersion(undefined);\n\n    resetAlertManagerConfigToOldVersion({ id });\n  };\n\n  if (error) {\n    return <Alert title=\"Failed to load configuration history\">{stringifyErrorLike(error)}</Alert>;\n  }\n\n  if (isLoading) {\n    return 'Loading...';\n  }\n\n  if (!historicalConfigs.length) {\n    return 'No previous configurations';\n  }\n\n  // with this function we'll compute the diff with the previous version; that way the user can get some idea of how many lines where changed in each update that was applied\n  const previousVersions: ConfigWithDiff[] = historicalConfigs.map((config, index) => {\n    const latestConfig = historicalConfigs[0];\n    const priorConfig = historicalConfigs[index];\n\n    return {\n      ...config,\n      diff: priorConfig ? computeConfigDiff(config, latestConfig) : { added: 0, removed: 0 },\n    };\n  });\n\n  const rows: VersionData[] = previousVersions.map((version) => ({\n    id: String(version.id ?? 0),\n    lastAppliedAt: version.last_applied ?? 'unknown',\n    diff: version.diff,\n  }));\n\n  const columns: Array<Column<VersionData>> = [\n    {\n      id: 'lastAppliedAt',\n      header: 'Last applied',\n      cell: LastAppliedCell,\n    },\n    {\n      id: 'diff',\n      disableGrow: true,\n      cell: ({ row, value }) => {\n        const isLatestConfiguration = row.index === 0;\n        if (isLatestConfiguration) {\n          return null;\n        }\n\n        return (\n          <Stack alignItems=\"baseline\" gap={0.5}>\n            <Text color=\"success\" variant=\"bodySmall\">\n              +{value.added}\n            </Text>\n            <Text color=\"error\" variant=\"bodySmall\">\n              -{value.removed}\n            </Text>\n          </Stack>\n        );\n      },\n    },\n    {\n      id: 'actions',\n      disableGrow: true,\n      cell: ({ row }) => {\n        const isFirstItem = row.index === 0;\n        const versionID = Number(row.id);\n\n        return (\n          <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"flex-end\">\n            {isFirstItem ? (\n              <Badge text=\"Latest\" color=\"blue\" />\n            ) : (\n              <>\n                <Button\n                  variant=\"secondary\"\n                  size=\"sm\"\n                  icon=\"code-branch\"\n                  fill=\"outline\"\n                  onClick={() => {\n                    const latestConfiguration = historicalConfigs[0];\n                    const historicalConfiguration = historicalConfigs[row.index];\n\n                    const left = normalizeConfig(latestConfiguration);\n                    const right = normalizeConfig(historicalConfiguration);\n\n                    setActiveRestoreVersion(versionID);\n                    setActiveComparison([JSON.stringify(left, null, 2), JSON.stringify(right, null, 2)]);\n                  }}\n                >\n                  Compare\n                </Button>\n                <Button\n                  variant=\"secondary\"\n                  size=\"sm\"\n                  icon=\"history\"\n                  onClick={() => {\n                    setActiveRestoreVersion(versionID);\n                    showConfirmation();\n                  }}\n                  disabled={restoreVersionState.isLoading}\n                >\n                  Restore\n                </Button>\n              </>\n            )}\n          </Stack>\n        );\n      },\n    },\n  ];\n\n  if (restoreVersionState.isLoading) {\n    return (\n      <Alert severity=\"info\" title=\"Restoring Alertmanager configuration\">\n        This might take a while...\n      </Alert>\n    );\n  }\n\n  return (\n    <>\n      {activeComparison ? (\n        <CompareVersions\n          left={activeComparison[0]}\n          right={activeComparison[1]}\n          disabled={restoreVersionState.isLoading}\n          onCancel={() => {\n            setActiveRestoreVersion(undefined);\n            setActiveComparison(undefined);\n            hideConfirmation();\n          }}\n          onConfirm={() => {\n            showConfirmation();\n          }}\n        />\n      ) : (\n        <InteractiveTable pageSize={VERSIONS_PAGE_SIZE} columns={columns} data={rows} getRowId={(row) => row.id} />\n      )}\n      {/* TODO make this modal persist while restore is in progress */}\n      <ConfirmModal\n        isOpen={confirmRestore}\n        title={'Restore Version'}\n        body={'Are you sure you want to restore the configuration to this version? All unsaved changes will be lost.'}\n        confirmText={'Yes, restore configuration'}\n        onConfirm={() => {\n          if (activeRestoreVersion) {\n            restoreVersion(activeRestoreVersion);\n          }\n\n          hideConfirmation();\n        }}\n        onDismiss={() => hideConfirmation()}\n      />\n    </>\n  );\n};\n\ninterface CompareVersionsProps {\n  left: string;\n  right: string;\n\n  disabled?: boolean;\n  onCancel: () => void;\n  onConfirm: () => void;\n}\n\nfunction CompareVersions({ left, right, disabled = false, onCancel, onConfirm }: CompareVersionsProps) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.drawerWrapper}>\n      <div className={styles.diffWrapper}>\n        {/*\n          we're hiding the line numbers because the historical snapshots will have certain parts of the config hidden (ex. auto-generated policies)\n          so the line numbers will not match up with what you can see in the JSON modal tab\n        */}\n        <DiffViewer newValue={left} oldValue={right} hideLineNumbers={true} />\n      </div>\n      <Stack direction=\"row\" alignItems=\"center\">\n        <Spacer />\n        <Button variant=\"secondary\" onClick={onCancel} disabled={disabled}>\n          Return\n        </Button>\n        <Button icon=\"history\" variant=\"primary\" onClick={onConfirm} disabled={disabled}>\n          Restore\n        </Button>\n      </Stack>\n    </div>\n  );\n}\n\nconst LastAppliedCell = ({ value }: CellProps<VersionData>) => {\n  const date = moment(value);\n\n  return (\n    <Stack direction=\"row\" alignItems=\"center\">\n      {date.toLocaleString()}\n      <Text variant=\"bodySmall\" color=\"secondary\">\n        {date.fromNow()}\n      </Text>\n    </Stack>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  drawerWrapper: css({\n    maxHeight: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    gap: theme.spacing(1),\n  }),\n  diffWrapper: css({\n    overflowY: 'auto',\n  }),\n});\n\n// these props are part of the historical config response but not the current config, so we remove them for fair comparison\nfunction normalizeConfig(config: AlertManagerCortexConfig) {\n  return omit(config, ['id', 'last_applied']);\n}\n\nfunction computeConfigDiff(json1: AlertManagerCortexConfig, json2: AlertManagerCortexConfig): Diff {\n  const cleanedJson1 = normalizeConfig(json1);\n  const cleanedJson2 = normalizeConfig(json2);\n\n  const diff = jsonDiff(cleanedJson1, cleanedJson2);\n  const added = chain(diff)\n    .values()\n    .flatMap()\n    .filter((operation) => operation.op === 'add' || operation.op === 'replace' || operation.op === 'move')\n    .sumBy((operation) => operation.endLineNumber - operation.startLineNumber + 1)\n    .value();\n\n  const removed = chain(diff)\n    .values()\n    .flatMap()\n    .filter((operation) => operation.op === 'remove' || operation.op === 'replace')\n    .sumBy((operation) => operation.endLineNumber - operation.startLineNumber + 1)\n    .value();\n\n  return {\n    added,\n    removed,\n  };\n}\n\nexport { AlertmanagerConfigurationVersionManager };\n","import { useCallback, useMemo, useState } from 'react';\n\nimport { Drawer, Tab, TabsBar } from '@grafana/ui';\n\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\n\nimport AlertmanagerConfig from './AlertmanagerConfig';\nimport { useSettings } from './SettingsContext';\nimport { AlertmanagerConfigurationVersionManager } from './VersionManager';\n\ntype ActiveTab = 'configuration' | 'versions';\n\nexport function useEditConfigurationDrawer() {\n  const [activeTab, setActiveTab] = useState<ActiveTab>('configuration');\n  const [dataSourceName, setDataSourceName] = useState<string | undefined>();\n  const [open, setOpen] = useState(false);\n  const { updateAlertmanagerSettings, resetAlertmanagerSettings } = useSettings();\n\n  const showConfiguration = (dataSourceName: string) => {\n    setDataSourceName(dataSourceName);\n    setOpen(true);\n  };\n\n  const handleDismiss = useCallback(() => {\n    setActiveTab('configuration');\n    setOpen(false);\n  }, []);\n\n  const drawer = useMemo(() => {\n    if (!open) {\n      return null;\n    }\n\n    const isGrafanaAlertmanager = dataSourceName === GRAFANA_RULES_SOURCE_NAME;\n    const title = isGrafanaAlertmanager ? 'Internal Grafana Alertmanager' : dataSourceName;\n\n    // @todo check copy\n    return (\n      <Drawer\n        onClose={handleDismiss}\n        title={title}\n        subtitle=\"Edit the Alertmanager configuration\"\n        tabs={\n          <TabsBar>\n            <Tab\n              label=\"JSON Model\"\n              key=\"configuration\"\n              icon=\"arrow\"\n              active={activeTab === 'configuration'}\n              onChangeTab={() => setActiveTab('configuration')}\n            />\n            <Tab\n              label=\"Versions\"\n              key=\"versions\"\n              icon=\"history\"\n              active={activeTab === 'versions'}\n              onChangeTab={() => setActiveTab('versions')}\n              hidden={!isGrafanaAlertmanager}\n            />\n          </TabsBar>\n        }\n      >\n        {activeTab === 'configuration' && dataSourceName && (\n          <AlertmanagerConfig\n            alertmanagerName={dataSourceName}\n            onDismiss={handleDismiss}\n            onSave={updateAlertmanagerSettings}\n            onReset={resetAlertmanagerSettings}\n          />\n        )}\n        {activeTab === 'versions' && dataSourceName && (\n          <AlertmanagerConfigurationVersionManager alertmanagerName={dataSourceName} />\n        )}\n      </Drawer>\n    );\n  }, [open, dataSourceName, handleDismiss, activeTab, updateAlertmanagerSettings, resetAlertmanagerSettings]);\n\n  return [drawer, showConfiguration, handleDismiss] as const;\n}\n","import { capitalize } from 'lodash';\n\nimport { Badge, Button, Card, Stack, Text, TextLink } from '@grafana/ui';\n\nimport { ConnectionStatus } from '../../hooks/useExternalAmSelector';\nimport { ProvisioningBadge } from '../Provisioning';\nimport { WithReturnButton } from '../WithReturnButton';\n\ninterface Props {\n  name: string;\n  href?: string;\n  url?: string;\n  logo?: string;\n  provisioned?: boolean;\n  readOnly?: boolean;\n  showStatus?: boolean;\n  implementation?: string;\n  receiving?: boolean;\n  status?: ConnectionStatus;\n  // functions\n  onEditConfiguration: () => void;\n  onDisable?: () => void;\n  onEnable?: () => void;\n}\n\nexport function AlertmanagerCard({\n  name,\n  href,\n  url,\n  logo = 'public/app/plugins/datasource/alertmanager/img/logo.svg',\n  provisioned = false,\n  readOnly = provisioned,\n  showStatus = true,\n  implementation,\n  receiving = false,\n  status = 'unknown',\n  onEditConfiguration,\n  onEnable,\n  onDisable,\n}: Props) {\n  const showActions = !provisioned && Boolean(onEnable) && Boolean(onDisable);\n\n  return (\n    <Card data-testid={`alertmanager-card-${name}`}>\n      <Card.Heading>\n        <Stack alignItems=\"center\" gap={1}>\n          {href ? (\n            <WithReturnButton\n              title=\"Alerting settings\"\n              component={\n                <TextLink href={href} inline={false}>\n                  {name}\n                </TextLink>\n              }\n            />\n          ) : (\n            name\n          )}\n          {provisioned && <ProvisioningBadge />}\n        </Stack>\n      </Card.Heading>\n      <Card.Figure>\n        <img alt={`logo for ${name}`} src={logo} />\n      </Card.Figure>\n\n      {/* sadly we have to resort to \"mimicking\" the Card.Description in here because \"<div>\"s can not be child elements of \"<p>\" – which is what the description element wrapper is */}\n      <Card.Meta>\n        <Stack direction=\"column\" gap={1} alignItems=\"flex-start\">\n          <Card.Meta>\n            {implementation && capitalize(implementation)}\n            {url && url}\n          </Card.Meta>\n          {/* if forwarding is diabled, still show status for the \"canonical\" Alertmanager */}\n          {showStatus ? (\n            <>\n              {!receiving ? (\n                <Text variant=\"bodySmall\">Not receiving Grafana managed alerts</Text>\n              ) : (\n                <>\n                  {status === 'pending' && <Badge text=\"Activation in progress\" color=\"orange\" />}\n                  {status === 'active' && <Badge text=\"Receiving Grafana-managed alerts\" color=\"green\" />}\n                  {status === 'dropped' && <Badge text=\"Failed to adopt Alertmanager\" color=\"red\" />}\n                  {status === 'inconclusive' && <Badge text=\"Inconclusive\" color=\"orange\" />}\n                </>\n              )}\n            </>\n          ) : null}\n        </Stack>\n      </Card.Meta>\n\n      {/* we'll use the \"tags\" area to append buttons and actions */}\n      <Card.Tags>\n        <Stack direction=\"row\" gap={1}>\n          {/* ⚠️ provisioned Data sources cannot have their \"enable\" / \"disable\" actions but we should still allow editing of the configuration */}\n          <Button onClick={onEditConfiguration} icon={readOnly ? 'eye' : 'edit'} variant=\"secondary\" fill=\"outline\">\n            {readOnly ? 'View configuration' : 'Edit configuration'}\n          </Button>\n          {showActions ? (\n            <>\n              {receiving ? (\n                <Button icon=\"times\" variant=\"destructive\" fill=\"outline\" onClick={onDisable}>\n                  Disable\n                </Button>\n              ) : (\n                <Button icon=\"check\" variant=\"secondary\" fill=\"outline\" onClick={onEnable}>\n                  Enable\n                </Button>\n              )}\n            </>\n          ) : null}\n        </Stack>\n      </Card.Tags>\n    </Card>\n  );\n}\n","import { Stack } from '@grafana/ui';\nimport { DATASOURCES_ROUTES } from 'app/features/datasources/constants';\nimport { AlertmanagerChoice } from 'app/plugins/datasource/alertmanager/types';\n\nimport { ExternalAlertmanagerDataSourceWithStatus } from '../../hooks/useExternalAmSelector';\nimport {\n  isAlertmanagerDataSourceInterestedInAlerts,\n  isProvisionedDataSource,\n  isVanillaPrometheusAlertManagerDataSource,\n} from '../../utils/datasource';\nimport { createRelativeUrl } from '../../utils/url';\n\nimport { AlertmanagerCard } from './AlertmanagerCard';\nimport { useSettings } from './SettingsContext';\n\ninterface Props {\n  onEditConfiguration: (dataSourceName: string) => void;\n}\n\nexport const ExternalAlertmanagers = ({ onEditConfiguration }: Props) => {\n  const {\n    externalAlertmanagerDataSourcesWithStatus,\n    configuration,\n    enableAlertmanager,\n    disableAlertmanager,\n    forwardingDisabled,\n  } = useSettings();\n\n  // determine if the alertmanger is receiving alerts\n  // this is true if Grafana is configured to send to either \"both\" or \"external\" and the Alertmanager datasource _wants_ to receive alerts.\n  const isReceivingGrafanaAlerts = (\n    externalDataSourceAlertmanager: ExternalAlertmanagerDataSourceWithStatus\n  ): boolean => {\n    const sendingToExternal = [AlertmanagerChoice.All, AlertmanagerChoice.External].some(\n      (choice) => configuration?.alertmanagersChoice === choice\n    );\n    const wantsAlertsReceived = isAlertmanagerDataSourceInterestedInAlerts(\n      externalDataSourceAlertmanager.dataSourceSettings\n    );\n\n    return sendingToExternal && wantsAlertsReceived;\n  };\n\n  return (\n    <Stack direction=\"column\" gap={0}>\n      {externalAlertmanagerDataSourcesWithStatus.map((alertmanager) => {\n        const { uid, name, jsonData, url } = alertmanager.dataSourceSettings;\n        const { status } = alertmanager;\n\n        const isReceiving = isReceivingGrafanaAlerts(alertmanager);\n        const isProvisioned = isProvisionedDataSource(alertmanager.dataSourceSettings);\n        const isReadOnly = isVanillaPrometheusAlertManagerDataSource(alertmanager.dataSourceSettings.name);\n        // typescript on next line is wrong, as DATASOURCES_ROUTES.Edit is a RelativeUrl type, and replacing :uid with uid makes still a RelativeUrl\n        // @ts-ignore\n        const detailHref = createRelativeUrl(DATASOURCES_ROUTES.Edit.replace(/:uid/gi, uid));\n\n        const handleEditConfiguration = () => onEditConfiguration(name);\n        const handleEnable = forwardingDisabled ? undefined : () => enableAlertmanager(uid);\n        const handleDisable = forwardingDisabled ? undefined : () => disableAlertmanager(uid);\n\n        return (\n          <AlertmanagerCard\n            key={uid}\n            name={name}\n            href={detailHref}\n            url={url}\n            provisioned={isProvisioned}\n            readOnly={isReadOnly}\n            showStatus={!forwardingDisabled}\n            implementation={jsonData.implementation ?? 'Prometheus'}\n            receiving={isReceiving}\n            status={status}\n            onEditConfiguration={handleEditConfiguration}\n            onDisable={handleDisable}\n            onEnable={handleEnable}\n          />\n        );\n      })}\n    </Stack>\n  );\n};\n","import { ConnectionStatus } from '../../hooks/useExternalAmSelector';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { isInternalAlertmanagerInterestedInAlerts } from '../../utils/settings';\n\nimport { AlertmanagerCard } from './AlertmanagerCard';\nimport { useSettings } from './SettingsContext';\n\ninterface Props {\n  onEditConfiguration: (dataSourceName: string) => void;\n}\n\nconst BUILTIN_ALERTMANAGER_NAME = 'Grafana built-in';\n\nexport default function InternalAlertmanager({ onEditConfiguration }: Props) {\n  const { configuration, enableAlertmanager, disableAlertmanager, forwardingDisabled } = useSettings();\n\n  const isReceiving = isInternalAlertmanagerInterestedInAlerts(configuration);\n  const status: ConnectionStatus = isReceiving ? 'active' : 'uninterested';\n\n  const handleEditConfiguration = () => onEditConfiguration(GRAFANA_RULES_SOURCE_NAME);\n  const handleEnable = forwardingDisabled ? undefined : () => enableAlertmanager(GRAFANA_RULES_SOURCE_NAME);\n  const handleDisable = forwardingDisabled ? undefined : () => disableAlertmanager(GRAFANA_RULES_SOURCE_NAME);\n\n  return (\n    <AlertmanagerCard\n      name={BUILTIN_ALERTMANAGER_NAME}\n      logo=\"public/img/grafana_icon.svg\"\n      status={status}\n      receiving={isReceiving}\n      onEditConfiguration={handleEditConfiguration}\n      onEnable={handleEnable}\n      onDisable={handleDisable}\n    />\n  );\n}\n","import { LinkButton, Stack, Text } from '@grafana/ui';\n\nimport { AlertingPageWrapper } from './components/AlertingPageWrapper';\nimport { WithReturnButton } from './components/WithReturnButton';\nimport { useEditConfigurationDrawer } from './components/settings/ConfigurationDrawer';\nimport { ExternalAlertmanagers } from './components/settings/ExternalAlertmanagers';\nimport InternalAlertmanager from './components/settings/InternalAlertmanager';\nimport { SettingsProvider, useSettings } from './components/settings/SettingsContext';\n\nexport default function SettingsPage() {\n  return (\n    <SettingsProvider>\n      <SettingsContent />\n    </SettingsProvider>\n  );\n}\n\nfunction SettingsContent() {\n  const [configurationDrawer, showConfiguration] = useEditConfigurationDrawer();\n  const { isLoading } = useSettings();\n\n  return (\n    <AlertingPageWrapper\n      navId=\"alerting-admin\"\n      isLoading={isLoading}\n      actions={[\n        <WithReturnButton\n          key=\"add-alertmanager\"\n          title=\"Alerting settings\"\n          component={\n            <LinkButton href=\"/connections/datasources/alertmanager\" icon=\"plus\" variant=\"primary\">\n              Add new Alertmanager\n            </LinkButton>\n          }\n        />,\n      ]}\n    >\n      <Stack direction=\"column\" gap={2}>\n        {/* Grafana built-in Alertmanager */}\n        <Text variant=\"h5\">Built-in Alertmanager</Text>\n        <InternalAlertmanager onEditConfiguration={showConfiguration} />\n        {/* other (external Alertmanager data sources we have added to Grafana such as vanilla, Mimir, Cortex) */}\n        <Text variant=\"h5\">Other Alertmanagers</Text>\n        <ExternalAlertmanagers onEditConfiguration={showConfiguration} />\n      </Stack>\n      {configurationDrawer}\n    </AlertingPageWrapper>\n  );\n}\n","import { SerializedError } from '@reduxjs/toolkit';\n\nimport { alertmanagerApi } from '../api/alertmanagerApi';\n\ntype Options = {\n  refetchOnFocus: boolean;\n  refetchOnReconnect: boolean;\n};\n\n// TODO refactor this so we can just call \"alertmanagerApi.endpoints.getAlertmanagerConfiguration\" everywhere\n// and remove this hook since it adds little value\nexport function useAlertmanagerConfig(amSourceName?: string, options?: Options) {\n  const fetchConfig = alertmanagerApi.endpoints.getAlertmanagerConfiguration.useQuery(amSourceName ?? '', {\n    // we'll disable cache by default to prevent overwriting other changes made since last fetch\n    refetchOnMountOrArgChange: true,\n    ...options,\n    skip: !amSourceName,\n  });\n\n  return {\n    ...fetchConfig,\n    // TODO refactor to get rid of this type assertion\n    error: fetchConfig.error as SerializedError,\n  };\n}\n"],"names":["AlertmanagerConfig","alertmanagerName","onDismiss","onSave","onReset","isDeleting","deletingError","useUnifiedAlertingSelector","state","isSaving","savingError","showResetConfirmation","setShowResetConfirmation","readOnly","isGrafanaManagedAlertmanager","styles","getStyles","config","loadingError","isLoadingSuccessful","isLoadingConfig","useAlertmanagerConfig","defaultValues","register","setValue","setError","handleSubmit","errors","value","e","handleSave","values","isOperating","Alert","confirmationText","height","width","CodeEditor","Stack","Button","Spacer","ConfirmModal","theme","dataSourcesApi","alertingApi","build","result","uid","_result","_error","settings","args","useExternalDataSourceAlertmanagers","refetchOnMountOrArgChange","alertmanagerDataSources","externalAlertmanagers","alertmanagerApi","dataSourceSettings","status","determineAlertmanagerConnectionStatus","isActive","am","isAlertmanagerMatchByURL","isDropped","MIMIR_ALERTMANAGER_PATH","VANILLA_ALERTMANAGER_PATH","dataSourceUrl","alertmanagerUrl","normalizedUrl","normalizeDataSourceURL","prometheusAlertmanagerMatch","mimirAlertmanagerMatch","url","isInternalAlertmanagerInterestedInAlerts","useEnableOrDisableHandlingGrafanaManagedAlerts","getSettings","getSettingsState","updateSettings","updateSettingsState","enableOrDisable","handleGrafanaManagedAlerts","existingSettings","newSettings","draft","enable","disable","loadingState","SettingsContext","isInternalAlertmanager","SettingsProvider","props","interestedAlertmanagers","forwardingDisabled","configuration","isLoadingConfiguration","updateConfiguration","updateConfigurationState","enableGrafanaManagedAlerts","disableGrafanaManagedAlerts","enableOrDisableHandlingGrafanaManagedAlertsState","externalAlertmanagersWithStatus","dataSource","alertmanager","enableAlertmanager","updatedInterestedAlertmanagers","newDeliveryMode","determineDeliveryMode","disableAlertmanager","updateAlertmanagerSettings","alertManagerName","oldConfig","newConfig","resetAlertmanagerSettings","containsInternalAlertmanager","containsExternalAlertmanager","useSettings","context","debouncedUpdateStatus","refetchAlertmanagerConnectionStatus","VERSIONS_PAGE_SIZE","AlertmanagerConfigurationVersionManager","activeRestoreVersion","setActiveRestoreVersion","confirmRestore","setConfirmRestore","activeComparison","setActiveComparison","historicalConfigs","isLoading","error","resetAlertManagerConfigToOldVersion","restoreVersionState","showConfirmation","hideConfirmation","restoreVersion","id","rows","index","latestConfig","priorConfig","computeConfigDiff","version","columns","LastAppliedCell","row","Text","isFirstItem","versionID","Badge","latestConfiguration","historicalConfiguration","left","normalizeConfig","right","CompareVersions","InteractiveTable","disabled","onCancel","onConfirm","DiffViewer","date","json1","json2","cleanedJson1","cleanedJson2","diff","added","operation","removed","useEditConfigurationDrawer","activeTab","setActiveTab","dataSourceName","setDataSourceName","open","setOpen","showConfiguration","handleDismiss","isGrafanaAlertmanager","title","Drawer","TabsBar","Tab","AlertmanagerCard","name","href","logo","provisioned","showStatus","implementation","receiving","onEditConfiguration","onEnable","onDisable","showActions","Card","WithReturnButton","TextLink","Provisioning","ExternalAlertmanagers","externalAlertmanagerDataSourcesWithStatus","isReceivingGrafanaAlerts","externalDataSourceAlertmanager","sendingToExternal","choice","wantsAlertsReceived","jsonData","isReceiving","isProvisioned","isReadOnly","detailHref","handleEditConfiguration","handleEnable","handleDisable","BUILTIN_ALERTMANAGER_NAME","InternalAlertmanager","SettingsPage","SettingsContent","configurationDrawer","AlertingPageWrapper","amSourceName","options","fetchConfig"],"sourceRoot":""}