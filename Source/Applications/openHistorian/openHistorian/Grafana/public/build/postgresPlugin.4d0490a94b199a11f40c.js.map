{"version":3,"sources":["webpack:///./public/app/plugins/datasource/postgres/response_parser.ts","webpack:///./public/app/plugins/datasource/postgres/postgres_query.ts","webpack:///./public/app/plugins/datasource/postgres/datasource.ts","webpack:///./public/app/plugins/datasource/postgres/meta_query.ts","webpack:///./public/app/plugins/datasource/postgres/sql_part.ts","webpack:///./public/app/plugins/datasource/postgres/query_ctrl.ts","webpack:///./public/app/plugins/datasource/postgres/config_ctrl.ts","webpack:///./public/app/plugins/datasource/postgres/module.ts","webpack:///./public/app/features/datasources/utils/passwordHandlers.ts","webpack:///./public/app/core/components/sql_part/sql_part.ts"],"names":["ResponseParser","prototype","processQueryResult","res","data","results","key","queryRes","series","_c","e_1","Object","tslib_es6","_d","next","done","value","push","target","name","datapoints","points","refId","meta","tables","_e","e_2","_f","table","type","parseMetricFindQueryResult","length","rowCount","columns","rows","textColIndex","this","findColIndex","valueColIndex","transformToKeyValueList","transformToSimpleList","i","containsKey","text","j","indexOf","lodash_default","a","map","colName","transformAnnotationResponse","options","annotation","timeColumnIndex","timeEndColumnIndex","textColumnIndex","tagsColumnIndex","Promise","reject","message","list","row","timeEnd","Math","floor","undefined","time","title","tags","trim","split","PostgresQuery","templateSrv","scopedVars","format","timeColumn","metricColumn","group","where","params","select","rawQuery","interpolateQueryStr","bind","$inject","unquoteIdentifier","substring","replace","quoteIdentifier","String","quoteLiteral","escapeLiteral","hasTimeGroup","find","g","hasMetricColumn","variable","defaultFormatFn","multi","includeAll","join","render","interpolate","rawSql","buildQuery","hasUnixEpochTimecolumn","timeColumnType","buildTimeColumn","alias","query","timeGroup","macro","args","buildMetricColumn","_a","_b","column","buildValueColumn","aggregate","windows","func","overParts","over","curr","prev","buildWhereClause","_this","conditions","tag","index","buildGroupClause","groupSection","part","buildValueColumns","datasource_PostgresDatasource","PostgresDatasource","instanceSettings","backendSrv","timeSrv","queryModel","v","id","jsonData","responseParser","response_parser","postgres_query","interval","timeInterval","interpolateVariablesInQueries","queries","expandedQueries","datasource","interpolateVariable","filter","targets","hide","intervalMs","maxDataPoints","datasourceId","resolve","datasourceRequest","url","from","range","valueOf","toString","to","then","annotationQuery","metricFindQuery","optionalOptions","templating_variable","wildcardChar","interpolatedQuery","timeRange","method","getVersion","getTimescaleDBVersion","testDatasource","status","catch","err","log","targetContainsTemplate","variableExists","PostgresMetaQuery","getOperators","datatype","quoteIdentAsLiteral","findMetricTable","buildSchemaConstraint","buildTableConstraint","includes","parts","buildTableQuery","buildColumnQuery","buildValueQuery","buildDatatypeQuery","buildAggregateQuery","sql_part_index","register","sql_part","style","dynamicLookup","defaultParams","label","quote","postgres_sql_part","def","defaultQuery","query_ctrl_PostgresQueryCtrl","_super","PostgresQueryCtrl","$scope","$injector","uiSegmentSrv","call","panel","metaBuilder","updateProjection","formats","panelCtrl","result","segment","newSegment","tableSegment","html","timeColumnSegment","updateRawSqlAndRefresh","fake","metricColumnSegment","buildSelectMenu","whereAdd","newPlusButton","events","on","src","dataReceived","onDataReceived","dataError","onDataError","refresh","selectParts","create","n","whereParts","groupParts","updatePersistedParts","selectMenu","aggregates","timescaledb","submenu","postgresVersion","toggleEditorMode","emit","types","showConfirmModal","text2","yesText","onConfirm","resetPlusButton","button","plusButton","getTableSegments","transformToSegments","handleQueryError","tableChanged","r","segment_1","timeColumnChanged","all","task1","task2","getTimeColumnSegments","partModel","splice","getMetricColumnSegments","addNone","metricColumnChanged","dataList","lastQueryMeta","lastQueryError","anySeriesFromQuery","error","expandable","variables","config","templateQuoter","unshift","segments","findAggregateIndex","findIndex","p","findWindowIndex","addSelectPart","item","subItem","partType","clone","addGroup","aggIndex","addAlias","windowIndex","aggIndex_1","removeSelectPart","modelsIndex","partIndex","handleSelectPartEvent","evt","handleGroupPartEvent","removeGroup","some","s","handleWherePartEvent","addTemplateVars","newOperators","d","getWhereOptions","addWhereAction","getGroupOptions","e_3","tags_1","tags_1_1","addGroupAction","groupAdd","templateUrl","passwordHandlers","__webpack_require__","PostgresConfigCtrl","datasourceSrv","postgresVersions","current","sslmode","showTimescaleDBHelp","autoDetectFeatures","onPasswordReset","Password","onPasswordChange","loadDatasource","ds","version","Number","major","trunc","minor","toggleTimescaleDBHelp","__webpack_exports__","PostgresAnnotationsQueryCtrl","config_ctrl_PostgresConfigCtrl","module_defaultQuery","QjE0","module","PasswordFieldEnum","createChangeHandler","createResetHandler","ctrl","field","event","preventDefault","secureJsonFields","secureJsonData","XXK+","SqlPartDef","SqlPart","lodash__WEBPACK_IMPORTED_MODULE_0__","lodash__WEBPACK_IMPORTED_MODULE_0___default","toUpperCase","wrapOpen","wrapClose","separator","updateParam","strValue","optional"],"mappings":"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","file":"postgresPlugin.4d0490a94b199a11f40c.js","sourcesContent":["import _ from 'lodash';\n\nexport default class ResponseParser {\n  processQueryResult(res: any) {\n    const data: any[] = [];\n\n    if (!res.data.results) {\n      return { data: data };\n    }\n\n    for (const key in res.data.results) {\n      const queryRes = res.data.results[key];\n\n      if (queryRes.series) {\n        for (const series of queryRes.series) {\n          data.push({\n            target: series.name,\n            datapoints: series.points,\n            refId: queryRes.refId,\n            meta: queryRes.meta,\n          });\n        }\n      }\n\n      if (queryRes.tables) {\n        for (const table of queryRes.tables) {\n          table.type = 'table';\n          table.refId = queryRes.refId;\n          table.meta = queryRes.meta;\n          data.push(table);\n        }\n      }\n    }\n\n    return { data: data };\n  }\n\n  parseMetricFindQueryResult(refId: string, results: any) {\n    if (!results || results.data.length === 0 || results.data.results[refId].meta.rowCount === 0) {\n      return [];\n    }\n\n    const columns = results.data.results[refId].tables[0].columns;\n    const rows = results.data.results[refId].tables[0].rows;\n    const textColIndex = this.findColIndex(columns, '__text');\n    const valueColIndex = this.findColIndex(columns, '__value');\n\n    if (columns.length === 2 && textColIndex !== -1 && valueColIndex !== -1) {\n      return this.transformToKeyValueList(rows, textColIndex, valueColIndex);\n    }\n\n    return this.transformToSimpleList(rows);\n  }\n\n  transformToKeyValueList(rows: any, textColIndex: number, valueColIndex: number) {\n    const res = [];\n\n    for (let i = 0; i < rows.length; i++) {\n      if (!this.containsKey(res, rows[i][textColIndex])) {\n        res.push({\n          text: rows[i][textColIndex],\n          value: rows[i][valueColIndex],\n        });\n      }\n    }\n\n    return res;\n  }\n\n  transformToSimpleList(rows: any[][]) {\n    const res = [];\n\n    for (let i = 0; i < rows.length; i++) {\n      for (let j = 0; j < rows[i].length; j++) {\n        const value = rows[i][j];\n        if (res.indexOf(value) === -1) {\n          res.push(value);\n        }\n      }\n    }\n\n    return _.map(res, value => {\n      return { text: value };\n    });\n  }\n\n  findColIndex(columns: any[], colName: string) {\n    for (let i = 0; i < columns.length; i++) {\n      if (columns[i].text === colName) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  containsKey(res: any, key: any) {\n    for (let i = 0; i < res.length; i++) {\n      if (res[i].text === key) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  transformAnnotationResponse(options: any, data: any) {\n    const table = data.data.results[options.annotation.name].tables[0];\n\n    let timeColumnIndex = -1;\n    let timeEndColumnIndex = -1;\n    const titleColumnIndex = -1;\n    let textColumnIndex = -1;\n    let tagsColumnIndex = -1;\n\n    for (let i = 0; i < table.columns.length; i++) {\n      if (table.columns[i].text === 'time') {\n        timeColumnIndex = i;\n      } else if (table.columns[i].text === 'timeend') {\n        timeEndColumnIndex = i;\n      } else if (table.columns[i].text === 'text') {\n        textColumnIndex = i;\n      } else if (table.columns[i].text === 'tags') {\n        tagsColumnIndex = i;\n      }\n    }\n\n    if (timeColumnIndex === -1) {\n      return Promise.reject({\n        message: 'Missing mandatory time column in annotation query.',\n      });\n    }\n\n    const list = [];\n    for (let i = 0; i < table.rows.length; i++) {\n      const row = table.rows[i];\n      const timeEnd =\n        timeEndColumnIndex !== -1 && row[timeEndColumnIndex] ? Math.floor(row[timeEndColumnIndex]) : undefined;\n      list.push({\n        annotation: options.annotation,\n        time: Math.floor(row[timeColumnIndex]),\n        timeEnd,\n        title: row[titleColumnIndex],\n        text: row[textColumnIndex],\n        tags: row[tagsColumnIndex] ? row[tagsColumnIndex].trim().split(/\\s*,\\s*/) : [],\n      });\n    }\n\n    return list;\n  }\n}\n","import _ from 'lodash';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport { ScopedVars } from '@grafana/data';\n\nexport default class PostgresQuery {\n  target: any;\n  templateSrv: any;\n  scopedVars: any;\n\n  /** @ngInject */\n  constructor(target: any, templateSrv?: TemplateSrv, scopedVars?: ScopedVars) {\n    this.target = target;\n    this.templateSrv = templateSrv;\n    this.scopedVars = scopedVars;\n\n    target.format = target.format || 'time_series';\n    target.timeColumn = target.timeColumn || 'time';\n    target.metricColumn = target.metricColumn || 'none';\n\n    target.group = target.group || [];\n    target.where = target.where || [{ type: 'macro', name: '$__timeFilter', params: [] }];\n    target.select = target.select || [[{ type: 'column', params: ['value'] }]];\n\n    // handle pre query gui panels gracefully\n    if (!('rawQuery' in this.target)) {\n      if ('rawSql' in target) {\n        // pre query gui panel\n        target.rawQuery = true;\n      } else {\n        // new panel\n        target.rawQuery = false;\n      }\n    }\n\n    // give interpolateQueryStr access to this\n    this.interpolateQueryStr = this.interpolateQueryStr.bind(this);\n  }\n\n  // remove identifier quoting from identifier to use in metadata queries\n  unquoteIdentifier(value: string) {\n    if (value[0] === '\"' && value[value.length - 1] === '\"') {\n      return value.substring(1, value.length - 1).replace(/\"\"/g, '\"');\n    } else {\n      return value;\n    }\n  }\n\n  quoteIdentifier(value: any) {\n    return '\"' + String(value).replace(/\"/g, '\"\"') + '\"';\n  }\n\n  quoteLiteral(value: any) {\n    return \"'\" + String(value).replace(/'/g, \"''\") + \"'\";\n  }\n\n  escapeLiteral(value: any) {\n    return String(value).replace(/'/g, \"''\");\n  }\n\n  hasTimeGroup() {\n    return _.find(this.target.group, (g: any) => g.type === 'time');\n  }\n\n  hasMetricColumn() {\n    return this.target.metricColumn !== 'none';\n  }\n\n  interpolateQueryStr(value: any, variable: { multi: any; includeAll: any }, defaultFormatFn: any) {\n    // if no multi or include all do not regexEscape\n    if (!variable.multi && !variable.includeAll) {\n      return this.escapeLiteral(value);\n    }\n\n    if (typeof value === 'string') {\n      return this.quoteLiteral(value);\n    }\n\n    const escapedValues = _.map(value, this.quoteLiteral);\n    return escapedValues.join(',');\n  }\n\n  render(interpolate?: any) {\n    const target = this.target;\n\n    // new query with no table set yet\n    if (!this.target.rawQuery && !('table' in this.target)) {\n      return '';\n    }\n\n    if (!target.rawQuery) {\n      target.rawSql = this.buildQuery();\n    }\n\n    if (interpolate) {\n      return this.templateSrv.replace(target.rawSql, this.scopedVars, this.interpolateQueryStr);\n    } else {\n      return target.rawSql;\n    }\n  }\n\n  hasUnixEpochTimecolumn() {\n    return ['int4', 'int8', 'float4', 'float8', 'numeric'].indexOf(this.target.timeColumnType) > -1;\n  }\n\n  buildTimeColumn(alias = true) {\n    const timeGroup = this.hasTimeGroup();\n    let query;\n    let macro = '$__timeGroup';\n\n    if (timeGroup) {\n      let args;\n      if (timeGroup.params.length > 1 && timeGroup.params[1] !== 'none') {\n        args = timeGroup.params.join(',');\n      } else {\n        args = timeGroup.params[0];\n      }\n      if (this.hasUnixEpochTimecolumn()) {\n        macro = '$__unixEpochGroup';\n      }\n      if (alias) {\n        macro += 'Alias';\n      }\n      query = macro + '(' + this.target.timeColumn + ',' + args + ')';\n    } else {\n      query = this.target.timeColumn;\n      if (alias) {\n        query += ' AS \"time\"';\n      }\n    }\n\n    return query;\n  }\n\n  buildMetricColumn() {\n    if (this.hasMetricColumn()) {\n      return this.target.metricColumn + ' AS metric';\n    }\n\n    return '';\n  }\n\n  buildValueColumns() {\n    let query = '';\n    for (const column of this.target.select) {\n      query += ',\\n  ' + this.buildValueColumn(column);\n    }\n\n    return query;\n  }\n\n  buildValueColumn(column: any) {\n    let query = '';\n\n    const columnName: any = _.find(column, (g: any) => g.type === 'column');\n    query = columnName.params[0];\n\n    const aggregate: any = _.find(column, (g: any) => g.type === 'aggregate' || g.type === 'percentile');\n    const windows: any = _.find(column, (g: any) => g.type === 'window' || g.type === 'moving_window');\n\n    if (aggregate) {\n      const func = aggregate.params[0];\n      switch (aggregate.type) {\n        case 'aggregate':\n          if (func === 'first' || func === 'last') {\n            query = func + '(' + query + ',' + this.target.timeColumn + ')';\n          } else {\n            query = func + '(' + query + ')';\n          }\n          break;\n        case 'percentile':\n          query = func + '(' + aggregate.params[1] + ') WITHIN GROUP (ORDER BY ' + query + ')';\n          break;\n      }\n    }\n\n    if (windows) {\n      const overParts = [];\n      if (this.hasMetricColumn()) {\n        overParts.push('PARTITION BY ' + this.target.metricColumn);\n      }\n      overParts.push('ORDER BY ' + this.buildTimeColumn(false));\n\n      const over = overParts.join(' ');\n      let curr: string;\n      let prev: string;\n      switch (windows.type) {\n        case 'window':\n          switch (windows.params[0]) {\n            case 'delta':\n              curr = query;\n              prev = 'lag(' + curr + ') OVER (' + over + ')';\n              query = curr + ' - ' + prev;\n              break;\n            case 'increase':\n              curr = query;\n              prev = 'lag(' + curr + ') OVER (' + over + ')';\n              query = '(CASE WHEN ' + curr + ' >= ' + prev + ' THEN ' + curr + ' - ' + prev;\n              query += ' WHEN ' + prev + ' IS NULL THEN NULL ELSE ' + curr + ' END)';\n              break;\n            case 'rate':\n              let timeColumn = this.target.timeColumn;\n              if (aggregate) {\n                timeColumn = 'min(' + timeColumn + ')';\n              }\n\n              curr = query;\n              prev = 'lag(' + curr + ') OVER (' + over + ')';\n              query = '(CASE WHEN ' + curr + ' >= ' + prev + ' THEN ' + curr + ' - ' + prev;\n              query += ' WHEN ' + prev + ' IS NULL THEN NULL ELSE ' + curr + ' END)';\n              query += '/extract(epoch from ' + timeColumn + ' - lag(' + timeColumn + ') OVER (' + over + '))';\n              break;\n            default:\n              query = windows.params[0] + '(' + query + ') OVER (' + over + ')';\n              break;\n          }\n          break;\n        case 'moving_window':\n          query = windows.params[0] + '(' + query + ') OVER (' + over + ' ROWS ' + windows.params[1] + ' PRECEDING)';\n          break;\n      }\n    }\n\n    const alias: any = _.find(column, (g: any) => g.type === 'alias');\n    if (alias) {\n      query += ' AS ' + this.quoteIdentifier(alias.params[0]);\n    }\n\n    return query;\n  }\n\n  buildWhereClause() {\n    let query = '';\n    const conditions = _.map(this.target.where, (tag, index) => {\n      switch (tag.type) {\n        case 'macro':\n          return tag.name + '(' + this.target.timeColumn + ')';\n          break;\n        case 'expression':\n          return tag.params.join(' ');\n          break;\n      }\n    });\n\n    if (conditions.length > 0) {\n      query = '\\nWHERE\\n  ' + conditions.join(' AND\\n  ');\n    }\n\n    return query;\n  }\n\n  buildGroupClause() {\n    let query = '';\n    let groupSection = '';\n\n    for (let i = 0; i < this.target.group.length; i++) {\n      const part = this.target.group[i];\n      if (i > 0) {\n        groupSection += ', ';\n      }\n      if (part.type === 'time') {\n        groupSection += '1';\n      } else {\n        groupSection += part.params[0];\n      }\n    }\n\n    if (groupSection.length) {\n      query = '\\nGROUP BY ' + groupSection;\n      if (this.hasMetricColumn()) {\n        query += ',2';\n      }\n    }\n    return query;\n  }\n\n  buildQuery() {\n    let query = 'SELECT';\n\n    query += '\\n  ' + this.buildTimeColumn();\n    if (this.hasMetricColumn()) {\n      query += ',\\n  ' + this.buildMetricColumn();\n    }\n    query += this.buildValueColumns();\n\n    query += '\\nFROM ' + this.target.table;\n\n    query += this.buildWhereClause();\n    query += this.buildGroupClause();\n\n    query += '\\nORDER BY 1';\n    if (this.hasMetricColumn()) {\n      query += ',2';\n    }\n\n    return query;\n  }\n}\n","import _ from 'lodash';\nimport ResponseParser from './response_parser';\nimport PostgresQuery from 'app/plugins/datasource/postgres/postgres_query';\nimport { BackendSrv } from 'app/core/services/backend_srv';\nimport { ScopedVars } from '@grafana/data';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport { TimeSrv } from 'app/features/dashboard/services/TimeSrv';\n//Types\nimport { PostgresQueryForInterpolation } from './types';\nimport { getSearchFilterScopedVar } from '../../../features/templating/variable';\n\nexport class PostgresDatasource {\n  id: any;\n  name: any;\n  jsonData: any;\n  responseParser: ResponseParser;\n  queryModel: PostgresQuery;\n  interval: string;\n\n  /** @ngInject */\n  constructor(\n    instanceSettings: { name: any; id?: any; jsonData?: any },\n    private backendSrv: BackendSrv,\n    private templateSrv: TemplateSrv,\n    private timeSrv: TimeSrv\n  ) {\n    this.name = instanceSettings.name;\n    this.id = instanceSettings.id;\n    this.jsonData = instanceSettings.jsonData;\n    this.responseParser = new ResponseParser();\n    this.queryModel = new PostgresQuery({});\n    this.interval = (instanceSettings.jsonData || {}).timeInterval || '1m';\n  }\n\n  interpolateVariable = (value: string, variable: { multi: any; includeAll: any }) => {\n    if (typeof value === 'string') {\n      if (variable.multi || variable.includeAll) {\n        return this.queryModel.quoteLiteral(value);\n      } else {\n        return value;\n      }\n    }\n\n    if (typeof value === 'number') {\n      return value;\n    }\n\n    const quotedValues = _.map(value, v => {\n      return this.queryModel.quoteLiteral(v);\n    });\n    return quotedValues.join(',');\n  };\n\n  interpolateVariablesInQueries(\n    queries: PostgresQueryForInterpolation[],\n    scopedVars: ScopedVars\n  ): PostgresQueryForInterpolation[] {\n    let expandedQueries = queries;\n    if (queries && queries.length > 0) {\n      expandedQueries = queries.map(query => {\n        const expandedQuery = {\n          ...query,\n          datasource: this.name,\n          rawSql: this.templateSrv.replace(query.rawSql, scopedVars, this.interpolateVariable),\n        };\n        return expandedQuery;\n      });\n    }\n    return expandedQueries;\n  }\n\n  query(options: any) {\n    const queries = _.filter(options.targets, target => {\n      return target.hide !== true;\n    }).map(target => {\n      const queryModel = new PostgresQuery(target, this.templateSrv, options.scopedVars);\n\n      return {\n        refId: target.refId,\n        intervalMs: options.intervalMs,\n        maxDataPoints: options.maxDataPoints,\n        datasourceId: this.id,\n        rawSql: queryModel.render(this.interpolateVariable),\n        format: target.format,\n      };\n    });\n\n    if (queries.length === 0) {\n      return Promise.resolve({ data: [] });\n    }\n\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: options.range.from.valueOf().toString(),\n          to: options.range.to.valueOf().toString(),\n          queries: queries,\n        },\n      })\n      .then(this.responseParser.processQueryResult);\n  }\n\n  annotationQuery(options: any) {\n    if (!options.annotation.rawQuery) {\n      return Promise.reject({\n        message: 'Query missing in annotation definition',\n      });\n    }\n\n    const query = {\n      refId: options.annotation.name,\n      datasourceId: this.id,\n      rawSql: this.templateSrv.replace(options.annotation.rawQuery, options.scopedVars, this.interpolateVariable),\n      format: 'table',\n    };\n\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: {\n          from: options.range.from.valueOf().toString(),\n          to: options.range.to.valueOf().toString(),\n          queries: [query],\n        },\n      })\n      .then((data: any) => this.responseParser.transformAnnotationResponse(options, data));\n  }\n\n  metricFindQuery(query: string, optionalOptions: { variable?: any; searchFilter?: string }) {\n    let refId = 'tempvar';\n    if (optionalOptions && optionalOptions.variable && optionalOptions.variable.name) {\n      refId = optionalOptions.variable.name;\n    }\n\n    const rawSql = this.templateSrv.replace(\n      query,\n      getSearchFilterScopedVar({ query, wildcardChar: '%', options: optionalOptions }),\n      this.interpolateVariable\n    );\n\n    const interpolatedQuery = {\n      refId: refId,\n      datasourceId: this.id,\n      rawSql,\n      format: 'table',\n    };\n\n    const range = this.timeSrv.timeRange();\n    const data = {\n      queries: [interpolatedQuery],\n      from: range.from.valueOf().toString(),\n      to: range.to.valueOf().toString(),\n    };\n\n    return this.backendSrv\n      .datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: data,\n      })\n      .then((data: any) => this.responseParser.parseMetricFindQueryResult(refId, data));\n  }\n\n  getVersion() {\n    return this.metricFindQuery(\"SELECT current_setting('server_version_num')::int/100\", {});\n  }\n\n  getTimescaleDBVersion() {\n    return this.metricFindQuery(\"SELECT extversion FROM pg_extension WHERE extname = 'timescaledb'\", {});\n  }\n\n  testDatasource() {\n    return this.metricFindQuery('SELECT 1', {})\n      .then((res: any) => {\n        return { status: 'success', message: 'Database Connection OK' };\n      })\n      .catch((err: any) => {\n        console.log(err);\n        if (err.data && err.data.message) {\n          return { status: 'error', message: err.data.message };\n        } else {\n          return { status: 'error', message: err.status };\n        }\n      });\n  }\n\n  targetContainsTemplate(target: any) {\n    let rawSql = '';\n\n    if (target.rawQuery) {\n      rawSql = target.rawSql;\n    } else {\n      const query = new PostgresQuery(target);\n      rawSql = query.buildQuery();\n    }\n\n    rawSql = rawSql.replace('$__', '');\n\n    return this.templateSrv.variableExists(rawSql);\n  }\n}\n","import QueryModel from './postgres_query';\n\nexport class PostgresMetaQuery {\n  constructor(private target: { table: string; timeColumn: string }, private queryModel: QueryModel) {}\n\n  getOperators(datatype: string) {\n    switch (datatype) {\n      case 'float4':\n      case 'float8': {\n        return ['=', '!=', '<', '<=', '>', '>='];\n      }\n      case 'text':\n      case 'varchar':\n      case 'char': {\n        return ['=', '!=', '<', '<=', '>', '>=', 'IN', 'NOT IN', 'LIKE', 'NOT LIKE', '~', '~*', '!~', '!~*'];\n      }\n      default: {\n        return ['=', '!=', '<', '<=', '>', '>=', 'IN', 'NOT IN'];\n      }\n    }\n  }\n\n  // quote identifier as literal to use in metadata queries\n  quoteIdentAsLiteral(value: string) {\n    return this.queryModel.quoteLiteral(this.queryModel.unquoteIdentifier(value));\n  }\n\n  findMetricTable() {\n    // query that returns first table found that has a timestamp(tz) column and a float column\n    let query = `\nSELECT\n\tquote_ident(table_name) as table_name,\n\t( SELECT\n\t    quote_ident(column_name) as column_name\n\t  FROM information_schema.columns c\n    WHERE\n      c.table_schema = t.table_schema AND\n      c.table_name = t.table_name AND\n      udt_name IN ('timestamptz','timestamp')\n    ORDER BY ordinal_position LIMIT 1\n  ) AS time_column,\n  ( SELECT\n      quote_ident(column_name) AS column_name\n    FROM information_schema.columns c\n    WHERE\n      c.table_schema = t.table_schema AND\n      c.table_name = t.table_name AND\n      udt_name='float8'\n    ORDER BY ordinal_position LIMIT 1\n  ) AS value_column\nFROM information_schema.tables t\nWHERE `;\n    query += this.buildSchemaConstraint();\n    query += ` AND\n  EXISTS\n  ( SELECT 1\n    FROM information_schema.columns c\n    WHERE\n      c.table_schema = t.table_schema AND\n      c.table_name = t.table_name AND\n      udt_name IN ('timestamptz','timestamp')\n  ) AND\n  EXISTS\n  ( SELECT 1\n    FROM information_schema.columns c\n    WHERE\n      c.table_schema = t.table_schema AND\n      c.table_name = t.table_name AND\n      udt_name='float8'\n  )\nLIMIT 1\n;`;\n    return query;\n  }\n\n  buildSchemaConstraint() {\n    const query = `\ntable_schema IN (\n  SELECT\n    CASE WHEN trim(s[i]) = '\"$user\"' THEN user ELSE trim(s[i]) END\n  FROM\n    generate_series(\n      array_lower(string_to_array(current_setting('search_path'),','),1),\n      array_upper(string_to_array(current_setting('search_path'),','),1)\n    ) as i,\n    string_to_array(current_setting('search_path'),',') s\n)`;\n    return query;\n  }\n\n  buildTableConstraint(table: string) {\n    let query = '';\n\n    // check for schema qualified table\n    if (table.includes('.')) {\n      const parts = table.split('.');\n      query = 'table_schema = ' + this.quoteIdentAsLiteral(parts[0]);\n      query += ' AND table_name = ' + this.quoteIdentAsLiteral(parts[1]);\n      return query;\n    } else {\n      query = this.buildSchemaConstraint();\n      query += ' AND table_name = ' + this.quoteIdentAsLiteral(table);\n\n      return query;\n    }\n  }\n\n  buildTableQuery() {\n    let query = 'SELECT quote_ident(table_name) FROM information_schema.tables WHERE ';\n    query += this.buildSchemaConstraint();\n    query += ' ORDER BY table_name';\n    return query;\n  }\n\n  buildColumnQuery(type?: string) {\n    let query = 'SELECT quote_ident(column_name) FROM information_schema.columns WHERE ';\n    query += this.buildTableConstraint(this.target.table);\n\n    switch (type) {\n      case 'time': {\n        query +=\n          \" AND data_type IN ('timestamp without time zone','timestamp with time zone','bigint','integer','double precision','real')\";\n        break;\n      }\n      case 'metric': {\n        query += \" AND data_type IN ('text','character','character varying')\";\n        break;\n      }\n      case 'value': {\n        query += \" AND data_type IN ('bigint','integer','double precision','real')\";\n        query += ' AND column_name <> ' + this.quoteIdentAsLiteral(this.target.timeColumn);\n        break;\n      }\n      case 'group': {\n        query += \" AND data_type IN ('text','character','character varying')\";\n        break;\n      }\n    }\n\n    query += ' ORDER BY column_name';\n\n    return query;\n  }\n\n  buildValueQuery(column: string) {\n    let query = 'SELECT DISTINCT quote_literal(' + column + ')';\n    query += ' FROM ' + this.target.table;\n    query += ' WHERE $__timeFilter(' + this.target.timeColumn + ')';\n    query += ' AND ' + column + ' IS NOT NULL';\n    query += ' ORDER BY 1 LIMIT 100';\n    return query;\n  }\n\n  buildDatatypeQuery(column: string) {\n    let query = 'SELECT udt_name FROM information_schema.columns WHERE ';\n    query += this.buildTableConstraint(this.target.table);\n    query += ' AND column_name = ' + this.quoteIdentAsLiteral(column);\n    return query;\n  }\n\n  buildAggregateQuery() {\n    let query = 'SELECT DISTINCT proname FROM pg_aggregate ';\n    query += 'INNER JOIN pg_proc ON pg_aggregate.aggfnoid = pg_proc.oid ';\n    query += 'INNER JOIN pg_type ON pg_type.oid=pg_proc.prorettype ';\n    query += \"WHERE pronargs=1 AND typname IN ('float8') AND aggkind='n' ORDER BY 1\";\n    return query;\n  }\n}\n","import { SqlPartDef, SqlPart } from 'app/core/components/sql_part/sql_part';\n\nconst index: any[] = [];\n\nfunction createPart(part: any): any {\n  const def = index[part.type];\n  if (!def) {\n    return null;\n  }\n\n  return new SqlPart(part, def);\n}\n\nfunction register(options: any) {\n  index[options.type] = new SqlPartDef(options);\n}\n\nregister({\n  type: 'column',\n  style: 'label',\n  params: [{ type: 'column', dynamicLookup: true }],\n  defaultParams: ['value'],\n});\n\nregister({\n  type: 'expression',\n  style: 'expression',\n  label: 'Expr:',\n  params: [\n    { name: 'left', type: 'string', dynamicLookup: true },\n    { name: 'op', type: 'string', dynamicLookup: true },\n    { name: 'right', type: 'string', dynamicLookup: true },\n  ],\n  defaultParams: ['value', '=', 'value'],\n});\n\nregister({\n  type: 'macro',\n  style: 'label',\n  label: 'Macro:',\n  params: [],\n  defaultParams: [],\n});\n\nregister({\n  type: 'aggregate',\n  style: 'label',\n  params: [\n    {\n      name: 'name',\n      type: 'string',\n      options: ['avg', 'count', 'min', 'max', 'sum', 'stddev', 'variance'],\n    },\n  ],\n  defaultParams: ['avg'],\n});\n\nregister({\n  type: 'percentile',\n  label: 'Aggregate:',\n  style: 'label',\n  params: [\n    {\n      name: 'name',\n      type: 'string',\n      options: ['percentile_cont', 'percentile_disc'],\n    },\n    {\n      name: 'fraction',\n      type: 'number',\n      options: ['0.5', '0.75', '0.9', '0.95', '0.99'],\n    },\n  ],\n  defaultParams: ['percentile_cont', '0.95'],\n});\n\nregister({\n  type: 'alias',\n  style: 'label',\n  params: [{ name: 'name', type: 'string', quote: 'double' }],\n  defaultParams: ['alias'],\n});\n\nregister({\n  type: 'time',\n  style: 'function',\n  label: 'time',\n  params: [\n    {\n      name: 'interval',\n      type: 'interval',\n      options: ['$__interval', '1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n    {\n      name: 'fill',\n      type: 'string',\n      options: ['none', 'NULL', 'previous', '0'],\n    },\n  ],\n  defaultParams: ['$__interval', 'none'],\n});\n\nregister({\n  type: 'window',\n  style: 'label',\n  params: [\n    {\n      name: 'function',\n      type: 'string',\n      options: ['delta', 'increase', 'rate', 'sum'],\n    },\n  ],\n  defaultParams: ['increase'],\n});\n\nregister({\n  type: 'moving_window',\n  style: 'label',\n  label: 'Moving Window:',\n  params: [\n    {\n      name: 'function',\n      type: 'string',\n      options: ['avg'],\n    },\n    {\n      name: 'window_size',\n      type: 'number',\n      options: ['3', '5', '7', '10', '20'],\n    },\n  ],\n  defaultParams: ['avg', '5'],\n});\n\nexport default {\n  create: createPart,\n};\n","import _ from 'lodash';\nimport appEvents from 'app/core/app_events';\nimport { PostgresMetaQuery } from './meta_query';\nimport { QueryCtrl } from 'app/plugins/sdk';\nimport { SqlPart } from 'app/core/components/sql_part/sql_part';\nimport PostgresQuery from './postgres_query';\nimport sqlPart from './sql_part';\nimport { auto } from 'angular';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport { CoreEvents } from 'app/types';\nimport { PanelEvents } from '@grafana/data';\n\nexport interface QueryMeta {\n  sql: string;\n}\n\nconst defaultQuery = `SELECT\n  $__time(time_column),\n  value1\nFROM\n  metric_table\nWHERE\n  $__timeFilter(time_column)\n`;\n\nexport class PostgresQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  showLastQuerySQL: boolean;\n  formats: any[];\n  queryModel: PostgresQuery;\n  metaBuilder: PostgresMetaQuery;\n  lastQueryMeta: QueryMeta;\n  lastQueryError: string;\n  showHelp: boolean;\n  tableSegment: any;\n  whereAdd: any;\n  timeColumnSegment: any;\n  metricColumnSegment: any;\n  selectMenu: any[];\n  selectParts: SqlPart[][];\n  groupParts: SqlPart[];\n  whereParts: SqlPart[];\n  groupAdd: any;\n\n  /** @ngInject */\n  constructor(\n    $scope: any,\n    $injector: auto.IInjectorService,\n    private templateSrv: TemplateSrv,\n    private uiSegmentSrv: any\n  ) {\n    super($scope, $injector);\n    this.target = this.target;\n    this.queryModel = new PostgresQuery(this.target, templateSrv, this.panel.scopedVars);\n    this.metaBuilder = new PostgresMetaQuery(this.target, this.queryModel);\n    this.updateProjection();\n\n    this.formats = [\n      { text: 'Time series', value: 'time_series' },\n      { text: 'Table', value: 'table' },\n    ];\n\n    if (!this.target.rawSql) {\n      // special handling when in table panel\n      if (this.panelCtrl.panel.type === 'table') {\n        this.target.format = 'table';\n        this.target.rawSql = 'SELECT 1';\n        this.target.rawQuery = true;\n      } else {\n        this.target.rawSql = defaultQuery;\n        this.datasource.metricFindQuery(this.metaBuilder.findMetricTable()).then((result: any) => {\n          if (result.length > 0) {\n            this.target.table = result[0].text;\n            let segment = this.uiSegmentSrv.newSegment(this.target.table);\n            this.tableSegment.html = segment.html;\n            this.tableSegment.value = segment.value;\n\n            this.target.timeColumn = result[1].text;\n            segment = this.uiSegmentSrv.newSegment(this.target.timeColumn);\n            this.timeColumnSegment.html = segment.html;\n            this.timeColumnSegment.value = segment.value;\n\n            this.target.timeColumnType = 'timestamp';\n            this.target.select = [[{ type: 'column', params: [result[2].text] }]];\n            this.updateProjection();\n            this.updateRawSqlAndRefresh();\n          }\n        });\n      }\n    }\n\n    if (!this.target.table) {\n      this.tableSegment = uiSegmentSrv.newSegment({ value: 'select table', fake: true });\n    } else {\n      this.tableSegment = uiSegmentSrv.newSegment(this.target.table);\n    }\n\n    this.timeColumnSegment = uiSegmentSrv.newSegment(this.target.timeColumn);\n    this.metricColumnSegment = uiSegmentSrv.newSegment(this.target.metricColumn);\n\n    this.buildSelectMenu();\n    this.whereAdd = this.uiSegmentSrv.newPlusButton();\n    this.groupAdd = this.uiSegmentSrv.newPlusButton();\n\n    this.panelCtrl.events.on(PanelEvents.dataReceived, this.onDataReceived.bind(this), $scope);\n    this.panelCtrl.events.on(PanelEvents.dataError, this.onDataError.bind(this), $scope);\n  }\n\n  updateRawSqlAndRefresh() {\n    if (!this.target.rawQuery) {\n      this.target.rawSql = this.queryModel.buildQuery();\n    }\n\n    this.panelCtrl.refresh();\n  }\n\n  updateProjection() {\n    this.selectParts = _.map(this.target.select, (parts: any) => {\n      return _.map(parts, sqlPart.create).filter(n => n);\n    });\n    this.whereParts = _.map(this.target.where, sqlPart.create).filter(n => n);\n    this.groupParts = _.map(this.target.group, sqlPart.create).filter(n => n);\n  }\n\n  updatePersistedParts() {\n    this.target.select = _.map(this.selectParts, selectParts => {\n      return _.map(selectParts, (part: any) => {\n        return { type: part.def.type, datatype: part.datatype, params: part.params };\n      });\n    });\n    this.target.where = _.map(this.whereParts, (part: any) => {\n      return { type: part.def.type, datatype: part.datatype, name: part.name, params: part.params };\n    });\n    this.target.group = _.map(this.groupParts, (part: any) => {\n      return { type: part.def.type, datatype: part.datatype, params: part.params };\n    });\n  }\n\n  buildSelectMenu() {\n    this.selectMenu = [];\n    const aggregates = {\n      text: 'Aggregate Functions',\n      value: 'aggregate',\n      submenu: [\n        { text: 'Average', value: 'avg' },\n        { text: 'Count', value: 'count' },\n        { text: 'Maximum', value: 'max' },\n        { text: 'Minimum', value: 'min' },\n        { text: 'Sum', value: 'sum' },\n        { text: 'Standard deviation', value: 'stddev' },\n        { text: 'Variance', value: 'variance' },\n      ],\n    };\n\n    // first and last aggregate are timescaledb specific\n    if (this.datasource.jsonData.timescaledb === true) {\n      aggregates.submenu.push({ text: 'First', value: 'first' });\n      aggregates.submenu.push({ text: 'Last', value: 'last' });\n    }\n\n    this.selectMenu.push(aggregates);\n\n    // ordered set aggregates require postgres 9.4+\n    if (this.datasource.jsonData.postgresVersion >= 904) {\n      const aggregates2 = {\n        text: 'Ordered-Set Aggregate Functions',\n        value: 'percentile',\n        submenu: [\n          { text: 'Percentile (continuous)', value: 'percentile_cont' },\n          { text: 'Percentile (discrete)', value: 'percentile_disc' },\n        ],\n      };\n      this.selectMenu.push(aggregates2);\n    }\n\n    const windows = {\n      text: 'Window Functions',\n      value: 'window',\n      submenu: [\n        { text: 'Delta', value: 'delta' },\n        { text: 'Increase', value: 'increase' },\n        { text: 'Rate', value: 'rate' },\n        { text: 'Sum', value: 'sum' },\n        { text: 'Moving Average', value: 'avg', type: 'moving_window' },\n      ],\n    };\n    this.selectMenu.push(windows);\n\n    this.selectMenu.push({ text: 'Alias', value: 'alias' });\n    this.selectMenu.push({ text: 'Column', value: 'column' });\n  }\n\n  toggleEditorMode() {\n    if (this.target.rawQuery) {\n      appEvents.emit(CoreEvents.showConfirmModal, {\n        title: 'Warning',\n        text2: 'Switching to query builder may overwrite your raw SQL.',\n        icon: 'fa-exclamation',\n        yesText: 'Switch',\n        onConfirm: () => {\n          this.target.rawQuery = !this.target.rawQuery;\n        },\n      });\n    } else {\n      this.target.rawQuery = !this.target.rawQuery;\n    }\n  }\n\n  resetPlusButton(button: { html: any; value: any }) {\n    const plusButton = this.uiSegmentSrv.newPlusButton();\n    button.html = plusButton.html;\n    button.value = plusButton.value;\n  }\n\n  getTableSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildTableQuery())\n      .then(this.transformToSegments({}))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  tableChanged() {\n    this.target.table = this.tableSegment.value;\n    this.target.where = [];\n    this.target.group = [];\n    this.updateProjection();\n\n    const segment = this.uiSegmentSrv.newSegment('none');\n    this.metricColumnSegment.html = segment.html;\n    this.metricColumnSegment.value = segment.value;\n    this.target.metricColumn = 'none';\n\n    const task1 = this.datasource.metricFindQuery(this.metaBuilder.buildColumnQuery('time')).then((result: any) => {\n      // check if time column is still valid\n      if (result.length > 0 && !_.find(result, (r: any) => r.text === this.target.timeColumn)) {\n        const segment = this.uiSegmentSrv.newSegment(result[0].text);\n        this.timeColumnSegment.html = segment.html;\n        this.timeColumnSegment.value = segment.value;\n      }\n      return this.timeColumnChanged(false);\n    });\n    const task2 = this.datasource.metricFindQuery(this.metaBuilder.buildColumnQuery('value')).then((result: any) => {\n      if (result.length > 0) {\n        this.target.select = [[{ type: 'column', params: [result[0].text] }]];\n        this.updateProjection();\n      }\n    });\n\n    Promise.all([task1, task2]).then(() => {\n      this.updateRawSqlAndRefresh();\n    });\n  }\n\n  getTimeColumnSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('time'))\n      .then(this.transformToSegments({}))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  timeColumnChanged(refresh?: boolean) {\n    this.target.timeColumn = this.timeColumnSegment.value;\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildDatatypeQuery(this.target.timeColumn))\n      .then((result: any) => {\n        if (result.length === 1) {\n          if (this.target.timeColumnType !== result[0].text) {\n            this.target.timeColumnType = result[0].text;\n          }\n          let partModel;\n          if (this.queryModel.hasUnixEpochTimecolumn()) {\n            partModel = sqlPart.create({ type: 'macro', name: '$__unixEpochFilter', params: [] });\n          } else {\n            partModel = sqlPart.create({ type: 'macro', name: '$__timeFilter', params: [] });\n          }\n\n          if (this.whereParts.length >= 1 && this.whereParts[0].def.type === 'macro') {\n            // replace current macro\n            this.whereParts[0] = partModel;\n          } else {\n            this.whereParts.splice(0, 0, partModel);\n          }\n        }\n\n        this.updatePersistedParts();\n        if (refresh !== false) {\n          this.updateRawSqlAndRefresh();\n        }\n      });\n  }\n\n  getMetricColumnSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('metric'))\n      .then(this.transformToSegments({ addNone: true }))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  metricColumnChanged() {\n    this.target.metricColumn = this.metricColumnSegment.value;\n    this.updateRawSqlAndRefresh();\n  }\n\n  onDataReceived(dataList: any) {\n    this.lastQueryMeta = null;\n    this.lastQueryError = null;\n    console.log('postgres query data received', dataList);\n\n    const anySeriesFromQuery: any = _.find(dataList, { refId: this.target.refId });\n    if (anySeriesFromQuery) {\n      this.lastQueryMeta = anySeriesFromQuery.meta;\n    }\n  }\n\n  onDataError(err: any) {\n    if (err.data && err.data.results) {\n      const queryRes = err.data.results[this.target.refId];\n      if (queryRes) {\n        this.lastQueryMeta = queryRes.meta;\n        this.lastQueryError = queryRes.error;\n      }\n    }\n  }\n\n  transformToSegments(config: { addNone?: any; addTemplateVars?: any; templateQuoter?: any }) {\n    return (results: any) => {\n      const segments = _.map(results, segment => {\n        return this.uiSegmentSrv.newSegment({\n          value: segment.text,\n          expandable: segment.expandable,\n        });\n      });\n\n      if (config.addTemplateVars) {\n        for (const variable of this.templateSrv.variables) {\n          let value;\n          value = '$' + variable.name;\n          if (config.templateQuoter && variable.multi === false) {\n            value = config.templateQuoter(value);\n          }\n\n          segments.unshift(\n            this.uiSegmentSrv.newSegment({\n              type: 'template',\n              value: value,\n              expandable: true,\n            })\n          );\n        }\n      }\n\n      if (config.addNone) {\n        segments.unshift(this.uiSegmentSrv.newSegment({ type: 'template', value: 'none', expandable: true }));\n      }\n\n      return segments;\n    };\n  }\n\n  findAggregateIndex(selectParts: any) {\n    return _.findIndex(selectParts, (p: any) => p.def.type === 'aggregate' || p.def.type === 'percentile');\n  }\n\n  findWindowIndex(selectParts: any) {\n    return _.findIndex(selectParts, (p: any) => p.def.type === 'window' || p.def.type === 'moving_window');\n  }\n\n  addSelectPart(selectParts: any[], item: { value: any }, subItem: { type: any; value: any }) {\n    let partType = item.value;\n    if (subItem && subItem.type) {\n      partType = subItem.type;\n    }\n    let partModel = sqlPart.create({ type: partType });\n    if (subItem) {\n      partModel.params[0] = subItem.value;\n    }\n    let addAlias = false;\n\n    switch (partType) {\n      case 'column':\n        const parts = _.map(selectParts, (part: any) => {\n          return sqlPart.create({ type: part.def.type, params: _.clone(part.params) });\n        });\n        this.selectParts.push(parts);\n        break;\n      case 'percentile':\n      case 'aggregate':\n        // add group by if no group by yet\n        if (this.target.group.length === 0) {\n          this.addGroup('time', '$__interval');\n        }\n        const aggIndex = this.findAggregateIndex(selectParts);\n        if (aggIndex !== -1) {\n          // replace current aggregation\n          selectParts[aggIndex] = partModel;\n        } else {\n          selectParts.splice(1, 0, partModel);\n        }\n        if (!_.find(selectParts, (p: any) => p.def.type === 'alias')) {\n          addAlias = true;\n        }\n        break;\n      case 'moving_window':\n      case 'window':\n        const windowIndex = this.findWindowIndex(selectParts);\n        if (windowIndex !== -1) {\n          // replace current window function\n          selectParts[windowIndex] = partModel;\n        } else {\n          const aggIndex = this.findAggregateIndex(selectParts);\n          if (aggIndex !== -1) {\n            selectParts.splice(aggIndex + 1, 0, partModel);\n          } else {\n            selectParts.splice(1, 0, partModel);\n          }\n        }\n        if (!_.find(selectParts, (p: any) => p.def.type === 'alias')) {\n          addAlias = true;\n        }\n        break;\n      case 'alias':\n        addAlias = true;\n        break;\n    }\n\n    if (addAlias) {\n      // set initial alias name to column name\n      partModel = sqlPart.create({ type: 'alias', params: [selectParts[0].params[0].replace(/\"/g, '')] });\n      if (selectParts[selectParts.length - 1].def.type === 'alias') {\n        selectParts[selectParts.length - 1] = partModel;\n      } else {\n        selectParts.push(partModel);\n      }\n    }\n\n    this.updatePersistedParts();\n    this.updateRawSqlAndRefresh();\n  }\n\n  removeSelectPart(selectParts: any, part: { def: { type: string } }) {\n    if (part.def.type === 'column') {\n      // remove all parts of column unless its last column\n      if (this.selectParts.length > 1) {\n        const modelsIndex = _.indexOf(this.selectParts, selectParts);\n        this.selectParts.splice(modelsIndex, 1);\n      }\n    } else {\n      const partIndex = _.indexOf(selectParts, part);\n      selectParts.splice(partIndex, 1);\n    }\n\n    this.updatePersistedParts();\n  }\n\n  handleSelectPartEvent(selectParts: any, part: { def: any }, evt: { name: any }) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        switch (part.def.type) {\n          case 'aggregate':\n            return this.datasource\n              .metricFindQuery(this.metaBuilder.buildAggregateQuery())\n              .then(this.transformToSegments({}))\n              .catch(this.handleQueryError.bind(this));\n          case 'column':\n            return this.datasource\n              .metricFindQuery(this.metaBuilder.buildColumnQuery('value'))\n              .then(this.transformToSegments({}))\n              .catch(this.handleQueryError.bind(this));\n        }\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'action': {\n        this.removeSelectPart(selectParts, part);\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return Promise.resolve([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  handleGroupPartEvent(part: any, index: any, evt: { name: any }) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        return this.datasource\n          .metricFindQuery(this.metaBuilder.buildColumnQuery())\n          .then(this.transformToSegments({}))\n          .catch(this.handleQueryError.bind(this));\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'action': {\n        this.removeGroup(part, index);\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return Promise.resolve([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  addGroup(partType: string, value: string) {\n    let params = [value];\n    if (partType === 'time') {\n      params = ['$__interval', 'none'];\n    }\n    const partModel = sqlPart.create({ type: partType, params: params });\n\n    if (partType === 'time') {\n      // put timeGroup at start\n      this.groupParts.splice(0, 0, partModel);\n    } else {\n      this.groupParts.push(partModel);\n    }\n\n    // add aggregates when adding group by\n    for (const selectParts of this.selectParts) {\n      if (!selectParts.some(part => part.def.type === 'aggregate')) {\n        const aggregate = sqlPart.create({ type: 'aggregate', params: ['avg'] });\n        selectParts.splice(1, 0, aggregate);\n        if (!selectParts.some(part => part.def.type === 'alias')) {\n          const alias = sqlPart.create({ type: 'alias', params: [selectParts[0].part.params[0]] });\n          selectParts.push(alias);\n        }\n      }\n    }\n\n    this.updatePersistedParts();\n  }\n\n  removeGroup(part: { def: { type: string } }, index: number) {\n    if (part.def.type === 'time') {\n      // remove aggregations\n      this.selectParts = _.map(this.selectParts, (s: any) => {\n        return _.filter(s, (part: any) => {\n          if (part.def.type === 'aggregate' || part.def.type === 'percentile') {\n            return false;\n          }\n          return true;\n        });\n      });\n    }\n\n    this.groupParts.splice(index, 1);\n    this.updatePersistedParts();\n  }\n\n  handleWherePartEvent(whereParts: any, part: any, evt: any, index: any) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        switch (evt.param.name) {\n          case 'left':\n            return this.datasource\n              .metricFindQuery(this.metaBuilder.buildColumnQuery())\n              .then(this.transformToSegments({}))\n              .catch(this.handleQueryError.bind(this));\n          case 'right':\n            if (['int4', 'int8', 'float4', 'float8', 'timestamp', 'timestamptz'].indexOf(part.datatype) > -1) {\n              // don't do value lookups for numerical fields\n              return Promise.resolve([]);\n            } else {\n              return this.datasource\n                .metricFindQuery(this.metaBuilder.buildValueQuery(part.params[0]))\n                .then(\n                  this.transformToSegments({\n                    addTemplateVars: true,\n                    templateQuoter: (v: string) => {\n                      return this.queryModel.quoteLiteral(v);\n                    },\n                  })\n                )\n                .catch(this.handleQueryError.bind(this));\n            }\n          case 'op':\n            return Promise.resolve(this.uiSegmentSrv.newOperators(this.metaBuilder.getOperators(part.datatype)));\n          default:\n            return Promise.resolve([]);\n        }\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.datasource.metricFindQuery(this.metaBuilder.buildDatatypeQuery(part.params[0])).then((d: any) => {\n          if (d.length === 1) {\n            part.datatype = d[0].text;\n          }\n        });\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'action': {\n        // remove element\n        whereParts.splice(index, 1);\n        this.updatePersistedParts();\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return Promise.resolve([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  getWhereOptions() {\n    const options = [];\n    if (this.queryModel.hasUnixEpochTimecolumn()) {\n      options.push(this.uiSegmentSrv.newSegment({ type: 'macro', value: '$__unixEpochFilter' }));\n    } else {\n      options.push(this.uiSegmentSrv.newSegment({ type: 'macro', value: '$__timeFilter' }));\n    }\n    options.push(this.uiSegmentSrv.newSegment({ type: 'expression', value: 'Expression' }));\n    return Promise.resolve(options);\n  }\n\n  addWhereAction(part: any, index: any) {\n    switch (this.whereAdd.type) {\n      case 'macro': {\n        const partModel = sqlPart.create({ type: 'macro', name: this.whereAdd.value, params: [] });\n        if (this.whereParts.length >= 1 && this.whereParts[0].def.type === 'macro') {\n          // replace current macro\n          this.whereParts[0] = partModel;\n        } else {\n          this.whereParts.splice(0, 0, partModel);\n        }\n        break;\n      }\n      default: {\n        this.whereParts.push(sqlPart.create({ type: 'expression', params: ['value', '=', 'value'] }));\n      }\n    }\n\n    this.updatePersistedParts();\n    this.resetPlusButton(this.whereAdd);\n    this.updateRawSqlAndRefresh();\n  }\n\n  getGroupOptions() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('group'))\n      .then((tags: any) => {\n        const options = [];\n        if (!this.queryModel.hasTimeGroup()) {\n          options.push(this.uiSegmentSrv.newSegment({ type: 'time', value: 'time($__interval,none)' }));\n        }\n        for (const tag of tags) {\n          options.push(this.uiSegmentSrv.newSegment({ type: 'column', value: tag.text }));\n        }\n        return options;\n      })\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  addGroupAction() {\n    switch (this.groupAdd.value) {\n      default: {\n        this.addGroup(this.groupAdd.type, this.groupAdd.value);\n      }\n    }\n\n    this.resetPlusButton(this.groupAdd);\n    this.updateRawSqlAndRefresh();\n  }\n\n  handleQueryError(err: any): any[] {\n    this.error = err.message || 'Failed to issue metric query';\n    return [];\n  }\n}\n","import _ from 'lodash';\nimport {\n  createChangeHandler,\n  createResetHandler,\n  PasswordFieldEnum,\n} from '../../../features/datasources/utils/passwordHandlers';\nimport DatasourceSrv from 'app/features/plugins/datasource_srv';\n\nexport class PostgresConfigCtrl {\n  static templateUrl = 'partials/config.html';\n\n  current: any;\n  datasourceSrv: any;\n  showTimescaleDBHelp: boolean;\n  onPasswordReset: ReturnType<typeof createResetHandler>;\n  onPasswordChange: ReturnType<typeof createChangeHandler>;\n\n  /** @ngInject */\n  constructor($scope: any, datasourceSrv: DatasourceSrv) {\n    this.datasourceSrv = datasourceSrv;\n    this.current.jsonData.sslmode = this.current.jsonData.sslmode || 'verify-full';\n    this.current.jsonData.postgresVersion = this.current.jsonData.postgresVersion || 903;\n    this.showTimescaleDBHelp = false;\n    this.autoDetectFeatures();\n    this.onPasswordReset = createResetHandler(this, PasswordFieldEnum.Password);\n    this.onPasswordChange = createChangeHandler(this, PasswordFieldEnum.Password);\n  }\n\n  autoDetectFeatures() {\n    if (!this.current.id) {\n      return;\n    }\n\n    this.datasourceSrv.loadDatasource(this.current.name).then((ds: any) => {\n      return ds.getVersion().then((version: any) => {\n        version = Number(version[0].text);\n\n        // timescaledb is only available for 9.6+\n        if (version >= 906) {\n          ds.getTimescaleDBVersion().then((version: any) => {\n            if (version.length === 1) {\n              this.current.jsonData.timescaledb = true;\n            }\n          });\n        }\n\n        const major = Math.trunc(version / 100);\n        const minor = version % 100;\n        let name = String(major);\n        if (version < 1000) {\n          name = String(major) + '.' + String(minor);\n        }\n        if (!_.find(this.postgresVersions, (p: any) => p.value === version)) {\n          this.postgresVersions.push({ name: name, value: version });\n        }\n        this.current.jsonData.postgresVersion = version;\n      });\n    });\n  }\n\n  toggleTimescaleDBHelp() {\n    this.showTimescaleDBHelp = !this.showTimescaleDBHelp;\n  }\n\n  // the value portion is derived from postgres server_version_num/100\n  postgresVersions = [\n    { name: '9.3', value: 903 },\n    { name: '9.4', value: 904 },\n    { name: '9.5', value: 905 },\n    { name: '9.6', value: 906 },\n    { name: '10', value: 1000 },\n  ];\n}\n","import { PostgresDatasource } from './datasource';\nimport { PostgresQueryCtrl } from './query_ctrl';\nimport { PostgresConfigCtrl } from './config_ctrl';\n\nconst defaultQuery = `SELECT\n  extract(epoch from time_column) AS time,\n  text_column as text,\n  tags_column as tags\nFROM\n  metric_table\nWHERE\n  $__timeFilter(time_column)\n`;\n\nclass PostgresAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n\n  annotation: any;\n\n  /** @ngInject */\n  constructor() {\n    this.annotation.rawQuery = this.annotation.rawQuery || defaultQuery;\n  }\n}\n\nexport {\n  PostgresDatasource,\n  PostgresDatasource as Datasource,\n  PostgresQueryCtrl as QueryCtrl,\n  PostgresConfigCtrl as ConfigCtrl,\n  PostgresAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n","/**\n * Set of handlers for secure password field in Angular components. They handle backward compatibility with\n * passwords stored in plain text fields.\n */\n\nimport { SyntheticEvent } from 'react';\n\nexport enum PasswordFieldEnum {\n  Password = 'password',\n  BasicAuthPassword = 'basicAuthPassword',\n}\n\n/**\n * Basic shape for settings controllers in at the moment mostly angular datasource plugins.\n */\nexport type Ctrl = {\n  current: {\n    secureJsonFields: {\n      [key: string]: boolean;\n    };\n    secureJsonData?: {\n      [key: string]: string;\n    };\n    password?: string;\n    basicAuthPassword?: string;\n  };\n};\n\nexport const createResetHandler = (ctrl: Ctrl, field: PasswordFieldEnum) => (\n  event: SyntheticEvent<HTMLInputElement>\n) => {\n  event.preventDefault();\n  // Reset also normal plain text password to remove it and only save it in secureJsonData.\n  ctrl.current[field] = null;\n  ctrl.current.secureJsonFields[field] = false;\n  ctrl.current.secureJsonData = ctrl.current.secureJsonData || {};\n  ctrl.current.secureJsonData[field] = '';\n};\n\nexport const createChangeHandler = (ctrl: any, field: PasswordFieldEnum) => (\n  event: SyntheticEvent<HTMLInputElement>\n) => {\n  ctrl.current.secureJsonData = ctrl.current.secureJsonData || {};\n  ctrl.current.secureJsonData[field] = event.currentTarget.value;\n};\n","import _ from 'lodash';\n\nexport class SqlPartDef {\n  type: string;\n  style: string;\n  label: string;\n  params: any[];\n  defaultParams: any[];\n  wrapOpen: string;\n  wrapClose: string;\n  separator: string;\n\n  constructor(options: any) {\n    this.type = options.type;\n    if (options.label) {\n      this.label = options.label;\n    } else {\n      this.label = this.type[0].toUpperCase() + this.type.substring(1) + ':';\n    }\n    this.style = options.style;\n    if (this.style === 'function') {\n      this.wrapOpen = '(';\n      this.wrapClose = ')';\n      this.separator = ', ';\n    } else {\n      this.wrapOpen = ' ';\n      this.wrapClose = ' ';\n      this.separator = ' ';\n    }\n    this.params = options.params;\n    this.defaultParams = options.defaultParams;\n  }\n}\n\nexport class SqlPart {\n  part: any;\n  def: SqlPartDef;\n  params: any[];\n  label: string;\n  name: string;\n  datatype: string;\n\n  constructor(part: any, def: any) {\n    this.part = part;\n    this.def = def;\n    if (!this.def) {\n      throw { message: 'Could not find sql part ' + part.type };\n    }\n\n    this.datatype = part.datatype;\n\n    if (part.name) {\n      this.name = part.name;\n      this.label = def.label + ' ' + part.name;\n    } else {\n      this.name = '';\n      this.label = def.label;\n    }\n\n    part.params = part.params || _.clone(this.def.defaultParams);\n    this.params = part.params;\n  }\n\n  updateParam(strValue: string, index: number) {\n    // handle optional parameters\n    if (strValue === '' && this.def.params[index].optional) {\n      this.params.splice(index, 1);\n    } else {\n      this.params[index] = strValue;\n    }\n\n    this.part.params = this.params;\n  }\n}\n"],"sourceRoot":""}