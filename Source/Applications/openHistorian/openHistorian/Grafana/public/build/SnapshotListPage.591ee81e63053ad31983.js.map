{"version":3,"sources":["webpack:///./public/app/features/manage-dashboards/components/SnapshotListTable.tsx","webpack:///./public/app/features/manage-dashboards/state/selectors.ts","webpack:///./public/app/features/manage-dashboards/SnapshotListPage.tsx"],"names":["SnapshotListTable","url","useState","snapshots","setSnapshots","removeSnapshot","setRemoveSnapshot","getSnapshots","useCallback","getBackendSrv","get","then","result","baseUrl","window","location","href","replace","map","snapshot","externalUrl","key","doRemoveSnapshot","filter","ss","delete","noop","concat","useEffect","className","style","width","name","external","variant","size","icon","onClick","isOpen","title","body","confirmText","onDismiss","undefined","onConfirm","getDashboardNavModel","state","getUrl","navModel","getNavModel","navIndex","nav","node","main","children","find","item","active","SnapshotListPage","Page","Contents","connect"],"mappings":"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","file":"SnapshotListPage.591ee81e63053ad31983.js","sourcesContent":["import React, { FC, useState, useCallback, useEffect } from 'react';\nimport { ConfirmModal, Button, LinkButton } from '@grafana/ui';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { noop } from 'rxjs';\nimport { Snapshot } from '../types';\n\ninterface Props {\n  url: string;\n}\n\nexport const SnapshotListTable: FC<Props> = ({ url }) => {\n  const [snapshots, setSnapshots] = useState<Snapshot[]>([]);\n  const [removeSnapshot, setRemoveSnapshot] = useState<Snapshot | undefined>();\n\n  const getSnapshots = useCallback(async () => {\n    await getBackendSrv()\n      .get('/api/dashboard/snapshots')\n      .then((result: Snapshot[]) => {\n        const absUrl = window.location.href;\n        const baseUrl = absUrl.replace(url, '');\n        const snapshots = result.map(snapshot => ({\n          ...snapshot,\n          url: snapshot.externalUrl || `${baseUrl}/dashboard/snapshot/${snapshot.key}`,\n        }));\n        setSnapshots(snapshots);\n      });\n  }, []);\n\n  const doRemoveSnapshot = useCallback(\n    async (snapshot: Snapshot) => {\n      setSnapshots(snapshots.filter(ss => ss.key !== snapshot.key));\n      await getBackendSrv()\n        .delete(`/api/snapshots/${snapshot.key}`)\n        .then(noop, () => {\n          setSnapshots(snapshots.concat(snapshot));\n        });\n    },\n    [snapshots]\n  );\n\n  useEffect(() => {\n    getSnapshots();\n  }, []);\n\n  return (\n    <div className=\"page-container page-body\">\n      <table className=\"filter-table\">\n        <thead>\n          <tr>\n            <th>\n              <strong>Name</strong>\n            </th>\n            <th>\n              <strong>Snapshot url</strong>\n            </th>\n            <th style={{ width: '70px' }}></th>\n            <th style={{ width: '30px' }}></th>\n            <th style={{ width: '25px' }}></th>\n          </tr>\n        </thead>\n        <tbody>\n          {snapshots.map((snapshot, key) => {\n            return (\n              <tr key={key}>\n                <td>\n                  <a href={snapshot.url}>{snapshot.name}</a>\n                </td>\n                <td>\n                  <a href={snapshot.url}>{snapshot.url}</a>\n                </td>\n                <td>{snapshot.external && <span className=\"query-keyword\">External</span>}</td>\n                <td className=\"text-center\">\n                  <LinkButton href={snapshot.url} variant=\"secondary\" size=\"sm\" icon=\"eye\">\n                    View\n                  </LinkButton>\n                </td>\n                <td className=\"text-right\">\n                  <Button variant=\"destructive\" size=\"sm\" icon=\"times\" onClick={() => setRemoveSnapshot(snapshot)} />\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n\n      <ConfirmModal\n        isOpen={!!removeSnapshot}\n        icon=\"trash-alt\"\n        title=\"Delete\"\n        body={`Are you sure you want to delete '${removeSnapshot?.name}'?`}\n        confirmText=\"Delete\"\n        onDismiss={() => setRemoveSnapshot(undefined)}\n        onConfirm={() => {\n          doRemoveSnapshot(removeSnapshot!);\n          setRemoveSnapshot(undefined);\n        }}\n      />\n    </div>\n  );\n};\n","import { NavModel } from '@grafana/data';\nimport { StoreState } from 'app/types';\nimport { getUrl } from 'app/core/selectors/location';\nimport { getNavModel } from 'app/core/selectors/navModel';\n\nexport const getDashboardNavModel = (state: StoreState): NavModel => {\n  const url = getUrl(state.location);\n  const navModel = getNavModel(state.navIndex, 'dashboards');\n  const nav = { ...navModel };\n  const node = nav.main.children?.find(item => item.url === url);\n\n  if (node) {\n    nav.node = node;\n  }\n\n  // This needs to be copied to avoid mutating the store in a selector\n  nav.main.children = [...navModel.main.children];\n\n  for (const item of nav.main.children) {\n    item.active = false;\n\n    if (item.url === nav.node.url) {\n      item.active = true;\n    }\n  }\n\n  return nav;\n};\n","import React, { FC } from 'react';\nimport { MapStateToProps, connect } from 'react-redux';\nimport { NavModel } from '@grafana/data';\nimport Page from 'app/core/components/Page/Page';\nimport { getUrl } from 'app/core/selectors/location';\nimport { StoreState } from 'app/types';\nimport { SnapshotListTable } from './components/SnapshotListTable';\nimport { getDashboardNavModel } from './state/selectors';\n\ninterface Props {\n  navModel: NavModel;\n  url: string;\n}\n\nexport const SnapshotListPage: FC<Props> = ({ navModel, url }) => {\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        <SnapshotListTable url={url} />\n      </Page.Contents>\n    </Page>\n  );\n};\n\nconst mapStateToProps: MapStateToProps<Props, {}, StoreState> = (state: StoreState) => ({\n  navModel: getDashboardNavModel(state),\n  url: getUrl(state.location),\n});\n\nexport default connect(mapStateToProps)(SnapshotListPage);\n"],"sourceRoot":""}