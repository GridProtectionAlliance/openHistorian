{"version":3,"file":"OrgDetailsPage.f2d6e9a7af4d0c5295ed.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/SharedPreferences/SharedPreferences.tsx","webpack://grafana/./public/app/features/org/OrgProfile.tsx","webpack://grafana/./public/app/features/org/OrgDetailsPage.tsx","webpack://grafana/./public/app/features/org/state/actions.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport { t, Trans } from '@lingui/macro';\nimport React, { PureComponent } from 'react';\n\nimport { FeatureState, SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { config } from '@grafana/runtime';\nimport {\n  Button,\n  Field,\n  FieldSet,\n  Form,\n  Icon,\n  Label,\n  RadioButtonGroup,\n  Select,\n  stylesFactory,\n  TimeZonePicker,\n  Tooltip,\n  WeekStartPicker,\n  FeatureBadge,\n} from '@grafana/ui';\nimport { ENGLISH_US, FRENCH_FRANCE, SPANISH_SPAIN } from 'app/core/internationalization/constants';\nimport { PreferencesService } from 'app/core/services/PreferencesService';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport { DashboardSearchItem, DashboardSearchItemType } from 'app/features/search/types';\n\nimport { UserPreferencesDTO } from '../../../types';\n\nexport interface Props {\n  resourceUri: string;\n  disabled?: boolean;\n}\n\nexport type State = UserPreferencesDTO & {\n  dashboards: DashboardSearchItem[];\n};\n\nconst themes: SelectableValue[] = [\n  { value: '', label: t({ id: 'shared-preferences.theme.default-label', message: 'Default' }) },\n  { value: 'dark', label: t({ id: 'shared-preferences.theme.dark-label', message: 'Dark' }) },\n  { value: 'light', label: t({ id: 'shared-preferences.theme.light-label', message: 'Light' }) },\n];\n\nconst languages: Array<SelectableValue<string>> = [\n  {\n    value: '',\n    label: t({\n      id: 'common.locale.default',\n      message: 'Default',\n    }),\n  },\n  {\n    value: ENGLISH_US,\n    label: t({\n      id: 'common.locale.en',\n      message: 'English',\n    }),\n  },\n  {\n    value: SPANISH_SPAIN,\n    label: t({\n      id: 'common.locale.es',\n      message: 'Spanish',\n    }),\n  },\n  {\n    value: FRENCH_FRANCE,\n    label: t({\n      id: 'common.locale.fr',\n      message: 'French',\n    }),\n  },\n];\n\nconst i18nFlag = Boolean(config.featureToggles.internationalization);\n\nconst DEFAULT_DASHBOARD_HOME: DashboardSearchItem = {\n  title: 'Default',\n  tags: [],\n  type: '' as DashboardSearchItemType,\n  uid: undefined,\n  uri: '',\n  url: '',\n  folderId: 0,\n  folderTitle: '',\n  folderUid: '',\n  folderUrl: '',\n  isStarred: false,\n  slug: '',\n  items: [],\n};\n\nexport class SharedPreferences extends PureComponent<Props, State> {\n  service: PreferencesService;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.service = new PreferencesService(props.resourceUri);\n    this.state = {\n      homeDashboardUID: DEFAULT_DASHBOARD_HOME.uid,\n      theme: '',\n      timezone: '',\n      weekStart: '',\n      locale: '',\n      dashboards: [],\n      queryHistory: { homeTab: '' },\n    };\n  }\n\n  async componentDidMount() {\n    const prefs = await this.service.load();\n    const dashboards = await backendSrv.search({ starred: true });\n\n    if (prefs.homeDashboardUID && !dashboards.find((d) => d.uid === prefs.homeDashboardUID)) {\n      const missingDash = await backendSrv.search({ dashboardUIDs: prefs.homeDashboardUID });\n\n      if (missingDash.length > 0) {\n        dashboards.push(missingDash[0]);\n      }\n    }\n\n    this.setState({\n      homeDashboardUID: prefs.homeDashboardUID,\n      theme: prefs.theme,\n      timezone: prefs.timezone,\n      weekStart: prefs.weekStart,\n      locale: prefs.locale,\n      dashboards: [DEFAULT_DASHBOARD_HOME, ...dashboards],\n      queryHistory: prefs.queryHistory,\n    });\n  }\n\n  onSubmitForm = async () => {\n    const { homeDashboardUID, theme, timezone, weekStart, locale, queryHistory } = this.state;\n    await this.service.update({ homeDashboardUID, theme, timezone, weekStart, locale, queryHistory });\n    window.location.reload();\n  };\n\n  onThemeChanged = (value: string) => {\n    this.setState({ theme: value });\n  };\n\n  onTimeZoneChanged = (timezone?: string) => {\n    if (!timezone) {\n      return;\n    }\n    this.setState({ timezone: timezone });\n  };\n\n  onWeekStartChanged = (weekStart: string) => {\n    this.setState({ weekStart: weekStart });\n  };\n\n  onHomeDashboardChanged = (dashboardUID: string) => {\n    this.setState({ homeDashboardUID: dashboardUID });\n  };\n\n  onLocaleChanged = (locale: string) => {\n    this.setState({ locale });\n  };\n\n  getFullDashName = (dashboard: SelectableValue<DashboardSearchItem>) => {\n    if (typeof dashboard.folderTitle === 'undefined' || dashboard.folderTitle === '') {\n      return dashboard.title;\n    }\n    return dashboard.folderTitle + ' / ' + dashboard.title;\n  };\n\n  render() {\n    const { theme, timezone, weekStart, homeDashboardUID, locale, dashboards } = this.state;\n    const { disabled } = this.props;\n    const styles = getStyles();\n\n    const homeDashboardTooltip = (\n      <Tooltip\n        content={\n          <Trans id=\"shared-preferences.fields.home-dashboard-tooltip\">\n            Not finding the dashboard you want? Star it first, then it should appear in this select box.\n          </Trans>\n        }\n      >\n        <Icon name=\"info-circle\" />\n      </Tooltip>\n    );\n\n    return (\n      <Form onSubmit={this.onSubmitForm}>\n        {() => {\n          return (\n            <FieldSet label={<Trans id=\"shared-preferences.title\">Preferences</Trans>} disabled={disabled}>\n              <Field label={t({ id: 'shared-preferences.fields.theme-label', message: 'UI Theme' })}>\n                <RadioButtonGroup\n                  options={themes}\n                  value={themes.find((item) => item.value === theme)?.value}\n                  onChange={this.onThemeChanged}\n                />\n              </Field>\n\n              <Field\n                label={\n                  <Label htmlFor=\"home-dashboard-select\">\n                    <span className={styles.labelText}>\n                      <Trans id=\"shared-preferences.fields.home-dashboard-label\">Home Dashboard</Trans>\n                    </span>\n\n                    {homeDashboardTooltip}\n                  </Label>\n                }\n                data-testid=\"User preferences home dashboard drop down\"\n              >\n                <Select\n                  value={dashboards.find((dashboard) => dashboard.uid === homeDashboardUID)}\n                  getOptionValue={(i) => i.uid}\n                  getOptionLabel={this.getFullDashName}\n                  onChange={(dashboard: SelectableValue<DashboardSearchItem>) =>\n                    this.onHomeDashboardChanged(dashboard.uid)\n                  }\n                  options={dashboards}\n                  placeholder={t({\n                    id: 'shared-preferences.fields.home-dashboard-placeholder',\n                    message: 'Choose default dashboard',\n                  })}\n                  inputId=\"home-dashboard-select\"\n                />\n              </Field>\n\n              <Field\n                label={t({ id: 'shared-dashboard.fields.timezone-label', message: 'Timezone' })}\n                data-testid={selectors.components.TimeZonePicker.containerV2}\n              >\n                <TimeZonePicker\n                  includeInternal={true}\n                  value={timezone}\n                  onChange={this.onTimeZoneChanged}\n                  inputId=\"shared-preferences-timezone-picker\"\n                />\n              </Field>\n\n              <Field\n                label={t({ id: 'shared-preferences.fields.week-start-label', message: 'Week start' })}\n                data-testid={selectors.components.WeekStartPicker.containerV2}\n              >\n                <WeekStartPicker\n                  value={weekStart}\n                  onChange={this.onWeekStartChanged}\n                  inputId={'shared-preferences-week-start-picker'}\n                />\n              </Field>\n\n              {i18nFlag ? (\n                <Field\n                  label={\n                    <Label htmlFor=\"locale-select\">\n                      <span className={styles.labelText}>\n                        <Trans id=\"shared-preferences.fields.locale-label\">Language</Trans>\n                      </span>\n                      <FeatureBadge featureState={FeatureState.alpha} />\n                    </Label>\n                  }\n                  data-testid=\"User preferences language drop down\"\n                >\n                  <Select\n                    value={languages.find((lang) => lang.value === locale)}\n                    onChange={(locale: SelectableValue<string>) => this.onLocaleChanged(locale.value ?? '')}\n                    options={languages}\n                    placeholder={t({\n                      id: 'shared-preferences.fields.locale-placeholder',\n                      message: 'Choose language',\n                    })}\n                    inputId=\"locale-select\"\n                  />\n                </Field>\n              ) : null}\n\n              <div className=\"gf-form-button-row\">\n                <Button\n                  type=\"submit\"\n                  variant=\"primary\"\n                  data-testid={selectors.components.UserProfile.preferencesSaveButton}\n                >\n                  <Trans id=\"common.save\">Save</Trans>\n                </Button>\n              </div>\n            </FieldSet>\n          );\n        }}\n      </Form>\n    );\n  }\n}\n\nexport default SharedPreferences;\n\nconst getStyles = stylesFactory(() => {\n  return {\n    labelText: css`\n      margin-right: 6px;\n    `,\n  };\n});\n","import React, { FC } from 'react';\n\nimport { Input, Field, FieldSet, Button, Form } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction } from 'app/types';\n\nexport interface Props {\n  orgName: string;\n  onSubmit: (orgName: string) => void;\n}\n\ninterface FormDTO {\n  orgName: string;\n}\n\nconst OrgProfile: FC<Props> = ({ onSubmit, orgName }) => {\n  const canWriteOrg = contextSrv.hasPermission(AccessControlAction.OrgsWrite);\n\n  return (\n    <Form defaultValues={{ orgName }} onSubmit={({ orgName }: FormDTO) => onSubmit(orgName)}>\n      {({ register }) => (\n        <FieldSet label=\"Organization profile\" disabled={!canWriteOrg}>\n          <Field label=\"Organization name\">\n            <Input id=\"org-name-input\" type=\"text\" {...register('orgName', { required: true })} />\n          </Field>\n\n          <Button type=\"submit\">Update organization name</Button>\n        </FieldSet>\n      )}\n    </Form>\n  );\n};\n\nexport default OrgProfile;\n","import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\n\nimport { NavModel } from '@grafana/data';\nimport { VerticalGroup } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport SharedPreferences from 'app/core/components/SharedPreferences/SharedPreferences';\nimport { contextSrv } from 'app/core/core';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { AccessControlAction, Organization, StoreState } from 'app/types';\n\nimport OrgProfile from './OrgProfile';\nimport { loadOrganization, updateOrganization } from './state/actions';\nimport { setOrganizationName } from './state/reducers';\n\nexport interface Props {\n  navModel: NavModel;\n  organization: Organization;\n  loadOrganization: typeof loadOrganization;\n  setOrganizationName: typeof setOrganizationName;\n  updateOrganization: typeof updateOrganization;\n}\n\nexport class OrgDetailsPage extends PureComponent<Props> {\n  async componentDidMount() {\n    await this.props.loadOrganization();\n  }\n\n  onUpdateOrganization = (orgName: string) => {\n    this.props.setOrganizationName(orgName);\n    this.props.updateOrganization();\n  };\n\n  render() {\n    const { navModel, organization } = this.props;\n    const isLoading = Object.keys(organization).length === 0;\n    const canReadOrg = contextSrv.hasPermission(AccessControlAction.OrgsRead);\n    const canReadPreferences = contextSrv.hasPermission(AccessControlAction.OrgsPreferencesRead);\n    const canWritePreferences = contextSrv.hasPermission(AccessControlAction.OrgsPreferencesWrite);\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={isLoading}>\n          {!isLoading && (\n            <VerticalGroup spacing=\"lg\">\n              {canReadOrg && <OrgProfile onSubmit={this.onUpdateOrganization} orgName={organization.name} />}\n              {canReadPreferences && <SharedPreferences resourceUri=\"org\" disabled={!canWritePreferences} />}\n            </VerticalGroup>\n          )}\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, 'org-settings'),\n    organization: state.organization.organization,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadOrganization,\n  setOrganizationName,\n  updateOrganization,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OrgDetailsPage);\n","import { getBackendSrv } from '@grafana/runtime';\nimport { updateConfigurationSubtitle } from 'app/core/actions';\nimport { ThunkResult } from 'app/types';\n\nimport { organizationLoaded, userOrganizationsLoaded } from './reducers';\n\ntype OrganizationDependencies = { getBackendSrv: typeof getBackendSrv };\n\nexport function loadOrganization(\n  dependencies: OrganizationDependencies = { getBackendSrv: getBackendSrv }\n): ThunkResult<any> {\n  return async (dispatch) => {\n    const organizationResponse = await dependencies.getBackendSrv().get('/api/org');\n    dispatch(organizationLoaded(organizationResponse));\n\n    return organizationResponse;\n  };\n}\n\nexport function updateOrganization(\n  dependencies: OrganizationDependencies = { getBackendSrv: getBackendSrv }\n): ThunkResult<any> {\n  return async (dispatch, getStore) => {\n    const organization = getStore().organization.organization;\n\n    await dependencies.getBackendSrv().put('/api/org', { name: organization.name });\n\n    dispatch(updateConfigurationSubtitle(organization.name));\n    dispatch(loadOrganization(dependencies));\n  };\n}\n\nexport function setUserOrganization(\n  orgId: number,\n  dependencies: OrganizationDependencies = { getBackendSrv: getBackendSrv }\n): ThunkResult<any> {\n  return async (dispatch) => {\n    const organizationResponse = await dependencies.getBackendSrv().post('/api/user/using/' + orgId);\n\n    dispatch(updateConfigurationSubtitle(organizationResponse.name));\n  };\n}\n\nexport function createOrganization(\n  newOrg: { name: string },\n  dependencies: OrganizationDependencies = { getBackendSrv: getBackendSrv }\n): ThunkResult<any> {\n  return async (dispatch) => {\n    const result = await dependencies.getBackendSrv().post('/api/orgs/', newOrg);\n\n    dispatch(setUserOrganization(result.orgId));\n  };\n}\n\nexport function getUserOrganizations(\n  dependencies: OrganizationDependencies = { getBackendSrv: getBackendSrv }\n): ThunkResult<any> {\n  return async (dispatch) => {\n    const result = await dependencies.getBackendSrv().get('/api/user/orgs');\n    dispatch(userOrganizationsLoaded(result));\n\n    return result;\n  };\n}\n"],"names":["themes","value","label","id","languages","ENGLISH_US","SPANISH_SPAIN","FRENCH_FRANCE","i18nFlag","Boolean","config","DEFAULT_DASHBOARD_HOME","title","tags","type","uid","undefined","uri","url","folderId","folderTitle","folderUid","folderUrl","isStarred","slug","items","SharedPreferences","PureComponent","constructor","props","super","async","homeDashboardUID","theme","timezone","weekStart","locale","queryHistory","this","state","service","update","window","location","reload","setState","dashboardUID","dashboard","PreferencesService","resourceUri","dashboards","homeTab","prefs","load","backendSrv","starred","find","d","missingDash","dashboardUIDs","length","push","render","disabled","styles","getStyles","homeDashboardTooltip","Tooltip","content","Icon","name","Form","onSubmit","onSubmitForm","FieldSet","Field","RadioButtonGroup","options","item","onChange","onThemeChanged","Label","htmlFor","className","labelText","Select","getOptionValue","i","getOptionLabel","getFullDashName","onHomeDashboardChanged","placeholder","inputId","selectors","TimeZonePicker","includeInternal","onTimeZoneChanged","WeekStartPicker","onWeekStartChanged","FeatureBadge","featureState","FeatureState","lang","onLocaleChanged","Button","variant","stylesFactory","css","orgName","canWriteOrg","contextSrv","AccessControlAction","defaultValues","register","Input","required","OrgDetailsPage","setOrganizationName","updateOrganization","loadOrganization","navModel","organization","isLoading","Object","keys","canReadOrg","canReadPreferences","canWritePreferences","Page","VerticalGroup","spacing","onUpdateOrganization","mapDispatchToProps","connect","getNavModel","navIndex","dependencies","getBackendSrv","organizationResponse","get","dispatch","organizationLoaded","getStore","put","updateConfigurationSubtitle","setUserOrganization","orgId","post","createOrganization","newOrg","getUserOrganizations","result","userOrganizationsLoaded"],"sourceRoot":""}