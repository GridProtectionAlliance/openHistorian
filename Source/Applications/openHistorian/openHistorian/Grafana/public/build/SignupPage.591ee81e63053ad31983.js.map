{"version":3,"sources":["webpack:///./public/app/core/components/Signup/Signup.tsx","webpack:///./public/app/core/components/Signup/SignupPage.tsx"],"names":["Signup","connect","state","email","location","routeParams","toString","code","props","onSubmit","formData","name","confirm","getBackendSrv","post","username","orgName","password","catch","err","msg","data","message","appEvents","emit","AppEvents","alertWarning","window","href","getConfig","appSubUrl","defaultValues","errors","register","getValues","label","placeholder","ref","invalid","error","type","required","pattern","value","autoAssignOrg","verifyEmailEnabled","autoFocus","validate","v","variant","SignupPage","LoginLayout"],"mappings":"yUAwBA,IAqGaA,EAASC,mBALmD,SAACC,GAAD,cAAwB,CAC/FC,MAAK,UAAED,EAAME,SAASC,YAAYF,aAA7B,aAAE,EAAkCG,WACzCC,KAAI,UAAEL,EAAME,SAASC,YAAYE,YAA7B,aAAE,EAAiCD,cAGnBL,EArGwB,SAAAO,GAC5C,IAAMC,EAAQ,e,EAAA,G,EAAA,yBAAG,WAAOC,GAAP,sFACO,KAAlBA,EAASC,aACJD,EAASC,YAEXD,EAASE,QAJD,SAMQC,0BACpBC,KAAK,yBAA0B,CAC9BX,MAAOO,EAASP,MAChBI,KAAMG,EAASH,KACfQ,SAAUL,EAASP,MACnBa,QAASN,EAASM,QAClBC,SAAUP,EAASO,SACnBN,KAAMD,EAASC,OAEhBO,OAAM,SAAAC,GAAO,MACNC,GAAM,UAAAD,EAAIE,YAAJ,eAAUC,UAAWH,EACjCI,IAAUC,KAAKC,YAAUC,aAAc,CAACN,OAjB7B,OAoBO,2BApBP,OAoBFb,OACXoB,OAAOvB,SAASwB,KAAOC,cAAYC,UAAY,gCAEjDH,OAAOvB,SAASwB,KAAOC,cAAYC,UAAY,IAvBhC,0C,+KAAH,sDA0BRC,EAAgB,CACpB5B,MAAOK,EAAML,MACbI,KAAMC,EAAMD,MAGd,OACE,kBAAC,OAAD,CAAMwB,cAAeA,EAAetB,SAAUA,IAC3C,sBAAGuB,EAAH,EAAGA,OAAQC,EAAX,EAAWA,SAAUC,EAArB,EAAqBA,UAArB,OACC,oCACE,kBAAC,QAAD,CAAOC,MAAM,aACX,kBAAC,QAAD,CAAOxB,KAAK,OAAOyB,YAAY,aAAaC,IAAKJ,KAEnD,kBAAC,QAAD,CAAOE,MAAM,QAAQG,UAAWN,EAAO7B,MAAOoC,MAAK,UAAEP,EAAO7B,aAAT,aAAE,EAAcmB,SACjE,kBAAC,QAAD,CACEX,KAAK,QACL6B,KAAK,QACLJ,YAAY,QACZC,IAAKJ,EAAS,CACZQ,SAAU,oBACVC,QAAS,CACPC,MAAO,YACPrB,QAAS,0BAKfO,cAAYe,eACZ,kBAAC,QAAD,CAAOT,MAAM,aACX,kBAAC,QAAD,CAAOxB,KAAK,UAAUyB,YAAY,YAAYC,IAAKJ,KAGtDJ,cAAYgB,oBACX,kBAAC,QAAD,CAAOV,MAAM,gDACX,kBAAC,QAAD,CAAOxB,KAAK,OAAO0B,IAAKJ,EAAUG,YAAY,UAGlD,kBAAC,QAAD,CAAOD,MAAM,WAAWG,UAAWN,EAAOf,SAAUsB,MAAOP,aAAF,YAAEA,EAAQf,gBAAV,aAAE,EAAkBK,SAC3E,kBAAC,QAAD,CACEwB,WAAS,EACTN,KAAK,WACL7B,KAAK,WACL0B,IAAKJ,EAAS,CACZQ,SAAU,4BAIhB,kBAAC,QAAD,CAAON,MAAM,mBAAmBG,UAAWN,EAAOpB,QAAS2B,MAAOP,aAAF,YAAEA,EAAQpB,eAAV,aAAE,EAAiBU,SACjF,kBAAC,QAAD,CACEkB,KAAK,WACL7B,KAAK,UACL0B,IAAKJ,EAAS,CACZQ,SAAU,iCACVM,SAAU,SAAAC,GAAC,OAAIA,IAAMd,IAAYjB,UAAY,8BAKnD,kBAAC,kBAAD,KACE,kBAAC,SAAD,CAAQuB,KAAK,UAAb,UACA,kBAAC,aAAD,CAAYS,QAAQ,OAAOrB,KAAMC,cAAYC,UAAY,UAAzD,yBC9GZ,2CAIO,IAAMoB,EAAiB,WAC5B,OACE,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,KACE,kBAACnD,EAAD,SAMOkD","file":"SignupPage.591ee81e63053ad31983.js","sourcesContent":["import React, { FC } from 'react';\nimport { connect, MapStateToProps } from 'react-redux';\nimport { StoreState } from 'app/types';\nimport { Form, Field, Input, Button, HorizontalGroup, LinkButton } from '@grafana/ui';\nimport { getConfig } from 'app/core/config';\nimport { getBackendSrv } from '@grafana/runtime';\nimport appEvents from 'app/core/app_events';\nimport { AppEvents } from '@grafana/data';\n\ninterface SignupDTO {\n  name?: string;\n  email: string;\n  username: string;\n  orgName?: string;\n  password: string;\n  code: string;\n  confirm?: string;\n}\n\ninterface ConnectedProps {\n  email?: string;\n  code?: string;\n}\n\nconst SignupUnconnected: FC<ConnectedProps> = props => {\n  const onSubmit = async (formData: SignupDTO) => {\n    if (formData.name === '') {\n      delete formData.name;\n    }\n    delete formData.confirm;\n\n    const response = await getBackendSrv()\n      .post('/api/user/signup/step2', {\n        email: formData.email,\n        code: formData.code,\n        username: formData.email,\n        orgName: formData.orgName,\n        password: formData.password,\n        name: formData.name,\n      })\n      .catch(err => {\n        const msg = err.data?.message || err;\n        appEvents.emit(AppEvents.alertWarning, [msg]);\n      });\n\n    if (response.code === 'redirect-to-select-org') {\n      window.location.href = getConfig().appSubUrl + '/profile/select-org?signup=1';\n    }\n    window.location.href = getConfig().appSubUrl + '/';\n  };\n\n  const defaultValues = {\n    email: props.email,\n    code: props.code,\n  };\n\n  return (\n    <Form defaultValues={defaultValues} onSubmit={onSubmit}>\n      {({ errors, register, getValues }) => (\n        <>\n          <Field label=\"Your name\">\n            <Input name=\"name\" placeholder=\"(optional)\" ref={register} />\n          </Field>\n          <Field label=\"Email\" invalid={!!errors.email} error={errors.email?.message}>\n            <Input\n              name=\"email\"\n              type=\"email\"\n              placeholder=\"Email\"\n              ref={register({\n                required: 'Email is required',\n                pattern: {\n                  value: /^\\S+@\\S+$/,\n                  message: 'Email is invalid',\n                },\n              })}\n            />\n          </Field>\n          {!getConfig().autoAssignOrg && (\n            <Field label=\"Org. name\">\n              <Input name=\"orgName\" placeholder=\"Org. name\" ref={register} />\n            </Field>\n          )}\n          {getConfig().verifyEmailEnabled && (\n            <Field label=\"Email verification code (sent to your email)\">\n              <Input name=\"code\" ref={register} placeholder=\"Code\" />\n            </Field>\n          )}\n          <Field label=\"Password\" invalid={!!errors.password} error={errors?.password?.message}>\n            <Input\n              autoFocus\n              type=\"password\"\n              name=\"password\"\n              ref={register({\n                required: 'Password is required',\n              })}\n            />\n          </Field>\n          <Field label=\"Confirm password\" invalid={!!errors.confirm} error={errors?.confirm?.message}>\n            <Input\n              type=\"password\"\n              name=\"confirm\"\n              ref={register({\n                required: 'Confirmed password is required',\n                validate: v => v === getValues().password || 'Passwords must match!',\n              })}\n            />\n          </Field>\n\n          <HorizontalGroup>\n            <Button type=\"submit\">Submit</Button>\n            <LinkButton variant=\"link\" href={getConfig().appSubUrl + '/login'}>\n              Back to login\n            </LinkButton>\n          </HorizontalGroup>\n        </>\n      )}\n    </Form>\n  );\n};\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, {}, StoreState> = (state: StoreState) => ({\n  email: state.location.routeParams.email?.toString(),\n  code: state.location.routeParams.code?.toString(),\n});\n\nexport const Signup = connect(mapStateToProps)(SignupUnconnected);\n","import React, { FC } from 'react';\nimport { LoginLayout, InnerBox } from '../Login/LoginLayout';\nimport { Signup } from './Signup';\n\nexport const SignupPage: FC = () => {\n  return (\n    <LoginLayout>\n      <InnerBox>\n        <Signup />\n      </InnerBox>\n    </LoginLayout>\n  );\n};\n\nexport default SignupPage;\n"],"sourceRoot":""}