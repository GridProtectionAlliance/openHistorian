{"version":3,"file":"8373.f869d2868f13f771a388.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/CustomAnnotationHeaderField.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/AnnotationHeaderField.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/DashboardAnnotationField.tsx","webpack://grafana/./public/app/features/alerting/unified/api/dashboardApi.ts","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/useDashboardQuery.ts","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/DashboardPicker.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/AnnotationsStep.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/NeedHelpInfo.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/RuleEditorSection.tsx","webpack://grafana/./public/app/features/alerting/unified/api/labelsApi.ts","webpack://grafana/./public/app/features/alerting/unified/components/AlertLabelDropdown.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/labels/LabelsButtons.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/labels/LabelsField.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/useAlertRuleSuggestions.tsx"],"sourcesContent":["import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Input, useStyles2 } from '@grafana/ui';\n\ninterface CustomAnnotationHeaderFieldProps {\n  field: { onChange: () => void; onBlur: () => void; value: string; name: string };\n}\n\nconst CustomAnnotationHeaderField = ({ field }: CustomAnnotationHeaderFieldProps) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div>\n      <span className={styles.annotationTitle}>Custom annotation name and content</span>\n      <Input\n        placeholder=\"Enter custom annotation name...\"\n        width={18}\n        {...field}\n        className={styles.customAnnotationInput}\n      />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  annotationTitle: css({\n    color: theme.colors.text.primary,\n    marginBottom: '3px',\n  }),\n\n  customAnnotationInput: css({\n    marginTop: '5px',\n    width: '100%',\n  }),\n});\n\nexport default CustomAnnotationHeaderField;\n","import { FieldArrayWithId, useFormContext, Controller } from 'react-hook-form';\n\nimport { Text, Stack } from '@grafana/ui';\n\nimport { RuleFormValues } from '../../types/rule-form';\nimport { Annotation, annotationDescriptions, annotationLabels } from '../../utils/constants';\n\nimport CustomAnnotationHeaderField from './CustomAnnotationHeaderField';\n\nconst AnnotationHeaderField = ({\n  annotationField,\n  annotations,\n  annotation,\n  index,\n}: {\n  annotationField: FieldArrayWithId<RuleFormValues, 'annotations', 'id'>;\n  annotations: Array<{ key: string; value: string }>;\n  annotation: Annotation;\n  index: number;\n}) => {\n  const { control } = useFormContext<RuleFormValues>();\n\n  return (\n    <Stack direction=\"column\" gap={0}>\n      <label>\n        {\n          <Controller\n            name={`annotations.${index}.key`}\n            defaultValue={annotationField.key}\n            render={({ field: { ref, ...field } }) => {\n              if (!annotationLabels[annotation]) {\n                return <CustomAnnotationHeaderField field={field} />;\n              }\n\n              let label;\n\n              switch (annotationField.key) {\n                case Annotation.dashboardUID:\n                  label = 'Dashboard and panel';\n                  break;\n                case Annotation.panelID:\n                  label = '';\n                  break;\n                default:\n                  label = annotationLabels[annotation] && annotationLabels[annotation] + ' (optional)';\n              }\n\n              return (\n                <span data-testid={`annotation-key-${index}`}>\n                  <Text color=\"primary\" variant=\"bodySmall\">\n                    {label}\n                  </Text>\n                </span>\n              );\n            }}\n            control={control}\n            rules={{ required: { value: !!annotations[index]?.value, message: 'Required.' } }}\n          />\n        }\n      </label>\n      <Text variant=\"bodySmall\" color=\"secondary\">\n        {annotationDescriptions[annotation]}\n      </Text>\n    </Stack>\n  );\n};\n\nexport default AnnotationHeaderField;\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, useStyles2 } from '@grafana/ui';\nimport { DashboardDataDTO } from 'app/types';\n\nimport { makeDashboardLink, makePanelLink } from '../../utils/misc';\n\nimport { PanelDTO } from './DashboardPicker';\n\nconst DashboardAnnotationField = ({\n  dashboard,\n  panel,\n  dashboardUid,\n  panelId,\n  onEditClick,\n  onDeleteClick,\n}: {\n  dashboard?: DashboardDataDTO;\n  panel?: PanelDTO;\n  dashboardUid: string; //fallback\n  panelId: string; //fallback\n  onEditClick: () => void;\n  onDeleteClick: () => void;\n}) => {\n  const styles = useStyles2(getStyles);\n\n  const dashboardLink = makeDashboardLink(dashboard?.uid || dashboardUid);\n  const panelLink = makePanelLink(dashboard?.uid || dashboardUid, panel?.id?.toString() || panelId);\n  return (\n    <div className={styles.container}>\n      {dashboard && (\n        <a\n          href={dashboardLink}\n          className={styles.link}\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          data-testid=\"dashboard-annotation\"\n        >\n          {dashboard.title} <Icon name={'external-link-alt'} />\n        </a>\n      )}\n\n      {!dashboard && <span className={styles.noLink}>Dashboard {dashboardUid} </span>}\n\n      {panel && (\n        <a href={panelLink} className={styles.link} target=\"_blank\" rel=\"noreferrer\" data-testid=\"panel-annotation\">\n          {panel.title || '<No title>'} <Icon name={'external-link-alt'} />\n        </a>\n      )}\n\n      {!panel && <span className={styles.noLink}> - Panel {panelId}</span>}\n\n      {(dashboard || panel) && (\n        <>\n          <Icon name={'pen'} onClick={onEditClick} className={styles.icon} />\n          <Icon name={'trash-alt'} onClick={onDeleteClick} className={styles.icon} />\n        </>\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css({\n    marginTop: '5px',\n  }),\n\n  noLink: css({\n    color: theme.colors.text.secondary,\n  }),\n  link: css({\n    color: theme.colors.text.link,\n    marginRight: theme.spacing(1.5),\n  }),\n\n  icon: css({\n    marginRight: theme.spacing(1),\n    cursor: 'pointer',\n  }),\n});\n\nexport default DashboardAnnotationField;\n","import { DashboardDTO } from '../../../../types';\nimport { DashboardSearchItem } from '../../../search/types';\n\nimport { alertingApi } from './alertingApi';\n\nexport const dashboardApi = alertingApi.injectEndpoints({\n  endpoints: (build) => ({\n    search: build.query<DashboardSearchItem[], { query?: string }>({\n      query: ({ query }) => {\n        const params = new URLSearchParams({ type: 'dash-db', limit: '1000', page: '1', sort: 'name_sort' });\n        if (query) {\n          params.set('query', query);\n        }\n\n        return { url: `/api/search?${params.toString()}` };\n      },\n    }),\n    dashboard: build.query<DashboardDTO, { uid: string }>({\n      query: ({ uid }) => ({ url: `/api/dashboards/uid/${uid}` }),\n    }),\n  }),\n});\n","import memoizeOne from 'memoize-one';\n\nimport { DashboardDTO } from '../../../../../types';\nimport { DashboardModel } from '../../../../dashboard/state';\nimport { dashboardApi } from '../../api/dashboardApi';\n\nconst convertToDashboardModel = memoizeOne((dashboardDTO: DashboardDTO) => {\n  // RTKQuery freezes all returned objects. DashboardModel constructor runs migrations which might change the internal object\n  // Hence we need to add structuredClone to make a deep copy of the API response object\n  const { dashboard, meta } = structuredClone(dashboardDTO);\n  return new DashboardModel(dashboard, meta);\n});\n\nexport function useDashboardQuery(dashboardUid?: string) {\n  const queryData = dashboardApi.endpoints.dashboard.useQuery(\n    { uid: dashboardUid ?? '' },\n    {\n      skip: !dashboardUid,\n      selectFromResult: ({ currentData, data, ...rest }) => ({\n        dashboardModel: currentData ? convertToDashboardModel(currentData) : undefined,\n        ...rest,\n      }),\n    }\n  );\n\n  return queryData;\n}\n","import { css, cx } from '@emotion/css';\nimport { noop } from 'lodash';\nimport { CSSProperties, useCallback, useMemo, useState } from 'react';\nimport { useDebounce } from 'react-use';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { FixedSizeList } from 'react-window';\n\nimport { GrafanaTheme2 } from '@grafana/data/src';\nimport {\n  Alert,\n  Button,\n  clearButtonStyles,\n  FilterInput,\n  Icon,\n  LoadingPlaceholder,\n  Modal,\n  Tooltip,\n  useStyles2,\n} from '@grafana/ui';\n\nimport { DashboardModel } from '../../../../dashboard/state';\nimport { dashboardApi } from '../../api/dashboardApi';\n\nimport { useDashboardQuery } from './useDashboardQuery';\n\nexport interface PanelDTO {\n  id?: number;\n  title?: string;\n  type: string;\n  collapsed?: boolean;\n}\n\nfunction panelSort(a: PanelDTO, b: PanelDTO) {\n  if (a.title && b.title) {\n    return a.title.localeCompare(b.title);\n  }\n  if (a.title && !b.title) {\n    return 1;\n  } else if (!a.title && b.title) {\n    return -1;\n  }\n\n  return 0;\n}\n\ninterface DashboardPickerProps {\n  isOpen: boolean;\n  dashboardUid?: string;\n  panelId?: number;\n  onChange: (dashboardUid: string, panelId: number) => void;\n  onDismiss: () => void;\n}\n\nexport const DashboardPicker = ({ dashboardUid, panelId, isOpen, onChange, onDismiss }: DashboardPickerProps) => {\n  const styles = useStyles2(getPickerStyles);\n\n  const [selectedDashboardUid, setSelectedDashboardUid] = useState(dashboardUid);\n  const [selectedPanelId, setSelectedPanelId] = useState(panelId);\n\n  const [dashboardFilter, setDashboardFilter] = useState('');\n  const [debouncedDashboardFilter, setDebouncedDashboardFilter] = useState('');\n\n  const [panelFilter, setPanelFilter] = useState('');\n  const { useSearchQuery } = dashboardApi;\n\n  const { currentData: filteredDashboards = [], isFetching: isDashSearchFetching } = useSearchQuery({\n    query: debouncedDashboardFilter,\n  });\n  const { dashboardModel, isFetching: isDashboardFetching } = useDashboardQuery(selectedDashboardUid);\n\n  const handleDashboardChange = useCallback((dashboardUid: string) => {\n    setSelectedDashboardUid(dashboardUid);\n    setSelectedPanelId(undefined);\n  }, []);\n\n  const allDashboardPanels = getVisualPanels(dashboardModel);\n\n  const filteredPanels =\n    allDashboardPanels\n      .filter((panel) => panel.title?.toLowerCase().includes(panelFilter.toLowerCase()))\n      .sort(panelSort) ?? [];\n\n  const currentPanel: PanelDTO | undefined = allDashboardPanels.find(\n    (panel: PanelDTO) => isValidPanel(panel) && panel.id?.toString() === selectedPanelId\n  );\n\n  const selectedDashboardIndex = useMemo(() => {\n    return filteredDashboards.map((dashboard) => dashboard.uid).indexOf(selectedDashboardUid ?? '');\n  }, [filteredDashboards, selectedDashboardUid]);\n\n  const isDefaultSelection = dashboardUid && dashboardUid === selectedDashboardUid;\n  const selectedDashboardIsInPageResult = selectedDashboardIndex >= 0;\n\n  const scrollToItem = useCallback(\n    (node: FixedSizeList) => {\n      const canScroll = selectedDashboardIndex >= 0;\n\n      if (isDefaultSelection && canScroll) {\n        node?.scrollToItem(selectedDashboardIndex, 'smart');\n      }\n    },\n    [isDefaultSelection, selectedDashboardIndex]\n  );\n\n  useDebounce(\n    () => {\n      setDebouncedDashboardFilter(dashboardFilter);\n    },\n    500,\n    [dashboardFilter]\n  );\n\n  const DashboardRow = ({ index, style }: { index: number; style?: CSSProperties }) => {\n    const dashboard = filteredDashboards[index];\n    const isSelected = selectedDashboardUid === dashboard.uid;\n\n    return (\n      <button\n        type=\"button\"\n        title={dashboard.title}\n        style={style}\n        className={cx(styles.rowButton, { [styles.rowOdd]: index % 2 === 1, [styles.rowSelected]: isSelected })}\n        onClick={() => handleDashboardChange(dashboard.uid)}\n      >\n        <div className={cx(styles.dashboardTitle, styles.rowButtonTitle)}>{dashboard.title}</div>\n        <div className={styles.dashboardFolder}>\n          <Icon name=\"folder\" /> {dashboard.folderTitle ?? 'Dashboards'}\n        </div>\n      </button>\n    );\n  };\n\n  const PanelRow = ({ index, style }: { index: number; style: CSSProperties }) => {\n    const panel = filteredPanels[index];\n    const panelTitle = panel.title || '<No title>';\n    const isSelected = Boolean(panel.id) && selectedPanelId === panel.id;\n    const isAlertingCompatible = panel.type === 'graph' || panel.type === 'timeseries';\n    const disabled = !isValidPanel(panel);\n\n    return (\n      <button\n        type=\"button\"\n        style={style}\n        disabled={disabled}\n        className={cx(styles.rowButton, styles.panelButton, {\n          [styles.rowOdd]: index % 2 === 1,\n          [styles.rowSelected]: isSelected,\n        })}\n        onClick={() => (disabled ? noop : setSelectedPanelId(panel.id))}\n      >\n        <div className={styles.rowButtonTitle} title={panelTitle}>\n          {panelTitle}\n        </div>\n        {!isAlertingCompatible && !disabled && (\n          <Tooltip content=\"The alert tab and alert annotations are only supported on graph and timeseries panels.\">\n            <Icon name=\"exclamation-triangle\" className={styles.warnIcon} data-testid=\"warning-icon\" />\n          </Tooltip>\n        )}\n        {disabled && (\n          <Tooltip content=\"This panel does not have a valid identifier.\">\n            <Icon name=\"info-circle\" data-testid=\"info-icon\" />\n          </Tooltip>\n        )}\n      </button>\n    );\n  };\n\n  return (\n    <Modal\n      title=\"Select dashboard and panel\"\n      closeOnEscape\n      isOpen={isOpen}\n      onDismiss={onDismiss}\n      className={styles.modal}\n      contentClassName={styles.modalContent}\n    >\n      {/* This alert shows if the selected dashboard is not found in the first page of dashboards */}\n      {!selectedDashboardIsInPageResult && dashboardUid && dashboardModel && (\n        <Alert title=\"Current selection\" severity=\"info\" topSpacing={0} bottomSpacing={1} className={styles.modalAlert}>\n          <div>\n            Dashboard: {dashboardModel.title} ({dashboardModel.uid}) in folder{' '}\n            {dashboardModel.meta?.folderTitle ?? 'Dashboards'}\n          </div>\n          {currentPanel && (\n            <div>\n              Panel: {currentPanel.title} ({currentPanel.id})\n            </div>\n          )}\n        </Alert>\n      )}\n      <div className={styles.container}>\n        <FilterInput\n          value={dashboardFilter}\n          onChange={setDashboardFilter}\n          title=\"Search dashboard\"\n          placeholder=\"Search dashboard\"\n          autoFocus\n        />\n        <FilterInput value={panelFilter} onChange={setPanelFilter} title=\"Search panel\" placeholder=\"Search panel\" />\n\n        <div className={styles.column}>\n          {isDashSearchFetching && (\n            <LoadingPlaceholder text=\"Loading dashboards...\" className={styles.loadingPlaceholder} />\n          )}\n\n          {!isDashSearchFetching && (\n            <AutoSizer>\n              {({ height, width }) => (\n                <FixedSizeList\n                  ref={scrollToItem}\n                  itemSize={50}\n                  height={height}\n                  width={width}\n                  itemCount={filteredDashboards.length}\n                >\n                  {DashboardRow}\n                </FixedSizeList>\n              )}\n            </AutoSizer>\n          )}\n        </div>\n\n        <div className={styles.column}>\n          {!selectedDashboardUid && !isDashboardFetching && (\n            <div className={styles.selectDashboardPlaceholder}>\n              <div>Select a dashboard to get a list of available panels</div>\n            </div>\n          )}\n          {isDashboardFetching && (\n            <LoadingPlaceholder text=\"Loading dashboard...\" className={styles.loadingPlaceholder} />\n          )}\n\n          {selectedDashboardUid && !isDashboardFetching && (\n            <AutoSizer>\n              {({ width, height }) => (\n                <FixedSizeList itemSize={32} height={height} width={width} itemCount={filteredPanels.length}>\n                  {PanelRow}\n                </FixedSizeList>\n              )}\n            </AutoSizer>\n          )}\n        </div>\n      </div>\n      <Modal.ButtonRow>\n        <Button type=\"button\" variant=\"secondary\" onClick={onDismiss} fill=\"text\">\n          Cancel\n        </Button>\n        <Button\n          type=\"button\"\n          variant=\"primary\"\n          disabled={!(selectedDashboardUid && selectedPanelId)}\n          onClick={() => {\n            if (selectedDashboardUid && selectedPanelId) {\n              onChange(selectedDashboardUid, selectedPanelId);\n            }\n          }}\n        >\n          Confirm\n        </Button>\n      </Modal.ButtonRow>\n    </Modal>\n  );\n};\n\nexport function getVisualPanels(dashboardModel: DashboardModel | undefined) {\n  if (!dashboardModel) {\n    return [];\n  }\n\n  const panelsWithoutRows = dashboardModel.panels.filter((panel) => panel.type !== 'row');\n  const panelsNestedInRows = dashboardModel.panels\n    .filter((rowPanel) => rowPanel.collapsed)\n    .flatMap((collapsedRow) => collapsedRow.panels ?? []);\n\n  const allDashboardPanels = [...panelsWithoutRows, ...panelsNestedInRows];\n  return allDashboardPanels;\n}\n\nconst isValidPanel = (panel: PanelDTO): boolean => {\n  const hasValidID = typeof panel.id === 'number';\n  const isValidPanelType = typeof panel.type === 'string';\n  const isLibraryPanel = 'libraryPanel' in panel;\n\n  return hasValidID && (isValidPanelType || isLibraryPanel);\n};\n\nconst getPickerStyles = (theme: GrafanaTheme2) => {\n  const clearButton = clearButtonStyles(theme);\n\n  return {\n    container: css({\n      display: 'grid',\n      gridTemplateColumns: '1fr 1fr',\n      gridTemplateRows: 'min-content auto',\n      gap: theme.spacing(2),\n      flex: 1,\n    }),\n    column: css({\n      flex: '1 1 auto',\n    }),\n    dashboardTitle: css({\n      height: '22px',\n      fontWeight: theme.typography.fontWeightBold,\n    }),\n    dashboardFolder: css({\n      height: '20px',\n      fontSize: theme.typography.bodySmall.fontSize,\n      color: theme.colors.text.secondary,\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'flex-start',\n      columnGap: theme.spacing(1),\n      alignItems: 'center',\n    }),\n    rowButton: css(clearButton, {\n      padding: theme.spacing(0.5),\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      textAlign: 'left',\n      whiteSpace: 'nowrap',\n      cursor: 'pointer',\n      border: '2px solid transparent',\n\n      '&:disabled': {\n        cursor: 'not-allowed',\n        color: theme.colors.text.disabled,\n      },\n    }),\n    rowButtonTitle: css({\n      textOverflow: 'ellipsis',\n      overflow: 'hidden',\n    }),\n    rowSelected: css({\n      borderColor: theme.colors.primary.border,\n    }),\n    rowOdd: css({\n      backgroundColor: theme.colors.background.secondary,\n    }),\n    panelButton: css({\n      display: 'flex',\n      gap: theme.spacing(1),\n      justifyContent: 'space-between',\n      alignItems: 'center',\n    }),\n    loadingPlaceholder: css({\n      height: '100%',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n    }),\n    selectDashboardPlaceholder: css({\n      width: '100%',\n      height: '100%',\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      textAlign: 'center',\n      fontWeight: theme.typography.fontWeightBold,\n    }),\n    modal: css({\n      height: '100%',\n    }),\n    modalContent: css({\n      flex: 1,\n      display: 'flex',\n      flexDirection: 'column',\n    }),\n    modalAlert: css({\n      flexGrow: 0,\n    }),\n    warnIcon: css({\n      fill: theme.colors.warning.main,\n    }),\n  };\n};\n","import { css, cx } from '@emotion/css';\nimport { produce } from 'immer';\nimport { useEffect, useState } from 'react';\nimport { useFieldArray, useFormContext } from 'react-hook-form';\nimport { useToggle } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Field, Input, Stack, Text, TextArea, useStyles2 } from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { DashboardModel } from '../../../../dashboard/state';\nimport { RuleFormValues } from '../../types/rule-form';\nimport { Annotation, annotationLabels } from '../../utils/constants';\n\nimport AnnotationHeaderField from './AnnotationHeaderField';\nimport DashboardAnnotationField from './DashboardAnnotationField';\nimport { DashboardPicker, getVisualPanels, PanelDTO } from './DashboardPicker';\nimport { NeedHelpInfo } from './NeedHelpInfo';\nimport { RuleEditorSection } from './RuleEditorSection';\nimport { useDashboardQuery } from './useDashboardQuery';\n\nconst AnnotationsStep = () => {\n  const styles = useStyles2(getStyles);\n  const [showPanelSelector, setShowPanelSelector] = useToggle(false);\n\n  const {\n    control,\n    register,\n    watch,\n    formState: { errors },\n    setValue,\n  } = useFormContext<RuleFormValues>();\n  const annotations = watch('annotations');\n\n  const { fields, append, remove } = useFieldArray({ control, name: 'annotations' });\n\n  const selectedDashboardUid = annotations.find((annotation) => annotation.key === Annotation.dashboardUID)?.value;\n  const selectedPanelId = Number(annotations.find((annotation) => annotation.key === Annotation.panelID)?.value);\n\n  const [selectedDashboard, setSelectedDashboard] = useState<DashboardModel | undefined>(undefined);\n  const [selectedPanel, setSelectedPanel] = useState<PanelDTO | undefined>(undefined);\n\n  const { dashboardModel, isFetching: isDashboardFetching } = useDashboardQuery(selectedDashboardUid);\n\n  useEffect(() => {\n    if (isDashboardFetching || !dashboardModel) {\n      return;\n    }\n\n    setSelectedDashboard(dashboardModel);\n\n    const allPanels = getVisualPanels(dashboardModel);\n    const currentPanel = allPanels.find((panel) => panel.id === selectedPanelId);\n    setSelectedPanel(currentPanel);\n  }, [selectedPanelId, dashboardModel, isDashboardFetching]);\n\n  const setSelectedDashboardAndPanelId = (dashboardUid: string, panelId: number) => {\n    const updatedAnnotations = produce(annotations, (draft) => {\n      const dashboardAnnotation = draft.find((a) => a.key === Annotation.dashboardUID);\n      const panelAnnotation = draft.find((a) => a.key === Annotation.panelID);\n\n      if (dashboardAnnotation) {\n        dashboardAnnotation.value = dashboardUid;\n      } else {\n        draft.push({ key: Annotation.dashboardUID, value: dashboardUid });\n      }\n\n      if (panelAnnotation) {\n        panelAnnotation.value = panelId.toString();\n      } else {\n        draft.push({ key: Annotation.panelID, value: panelId.toString() });\n      }\n    });\n\n    setValue('annotations', updatedAnnotations);\n    setShowPanelSelector(false);\n  };\n\n  const handleDeleteDashboardAnnotation = () => {\n    const updatedAnnotations = annotations.filter(\n      (a) => a.key !== Annotation.dashboardUID && a.key !== Annotation.panelID\n    );\n    setValue('annotations', updatedAnnotations);\n    setSelectedDashboard(undefined);\n    setSelectedPanel(undefined);\n  };\n\n  const handleEditDashboardAnnotation = () => {\n    setShowPanelSelector(true);\n  };\n\n  function getAnnotationsSectionDescription() {\n    return (\n      <Stack direction=\"row\" gap={0.5} alignItems=\"center\">\n        <Text variant=\"bodySmall\" color=\"secondary\">\n          <Trans i18nKey=\"alerting.annotations.description\">Add more context to your alert notifications.</Trans>\n        </Text>\n        <NeedHelpInfo\n          contentText={`Annotations add metadata to provide more information on the alert in your alert notification messages.\n          For example, add a Summary annotation to tell you which value caused the alert to fire or which server it happened on.\n          Annotations can contain a combination of text and template code.`}\n          title=\"Annotations\"\n        />\n      </Stack>\n    );\n  }\n\n  return (\n    <RuleEditorSection\n      stepNo={5}\n      title={t('alerting.annotations.title', 'Configure notification message')}\n      description={getAnnotationsSectionDescription()}\n      fullWidth\n    >\n      <Stack direction=\"column\" gap={1}>\n        {fields.map((annotationField, index: number) => {\n          const isUrl = annotations[index]?.key?.toLocaleLowerCase().endsWith('url');\n          const ValueInputComponent = isUrl ? Input : TextArea;\n          // eslint-disable-next-line\n          const annotation = annotationField.key as Annotation;\n          return (\n            <div key={annotationField.id} className={styles.flexRow}>\n              <div>\n                <AnnotationHeaderField\n                  annotationField={annotationField}\n                  annotations={annotations}\n                  annotation={annotation}\n                  index={index}\n                />\n                {selectedDashboardUid && selectedPanelId && annotationField.key === Annotation.dashboardUID && (\n                  <DashboardAnnotationField\n                    dashboard={selectedDashboard}\n                    panel={selectedPanel}\n                    dashboardUid={selectedDashboardUid.toString()}\n                    panelId={selectedPanelId.toString()}\n                    onEditClick={handleEditDashboardAnnotation}\n                    onDeleteClick={handleDeleteDashboardAnnotation}\n                  />\n                )}\n\n                {\n                  <div className={styles.annotationValueContainer}>\n                    <Field\n                      hidden={\n                        annotationField.key === Annotation.dashboardUID || annotationField.key === Annotation.panelID\n                      }\n                      className={cx(styles.flexRowItemMargin, styles.field)}\n                      invalid={!!errors.annotations?.[index]?.value?.message}\n                      error={errors.annotations?.[index]?.value?.message}\n                    >\n                      <ValueInputComponent\n                        data-testid={`annotation-value-${index}`}\n                        className={cx(styles.annotationValueInput, { [styles.textarea]: !isUrl })}\n                        {...register(`annotations.${index}.value`)}\n                        placeholder={\n                          isUrl\n                            ? 'https://'\n                            : (annotationField.key && `Enter a ${annotationField.key}...`) ||\n                              'Enter custom annotation content...'\n                        }\n                        defaultValue={annotationField.value}\n                      />\n                    </Field>\n                    {!annotationLabels[annotation] && (\n                      <Button\n                        type=\"button\"\n                        className={styles.deleteAnnotationButton}\n                        aria-label=\"delete annotation\"\n                        icon=\"trash-alt\"\n                        variant=\"secondary\"\n                        onClick={() => remove(index)}\n                      />\n                    )}\n                  </div>\n                }\n              </div>\n            </div>\n          );\n        })}\n        <Stack direction=\"row\" gap={1}>\n          <div className={styles.addAnnotationsButtonContainer}>\n            <Button\n              icon=\"plus\"\n              type=\"button\"\n              variant=\"secondary\"\n              onClick={() => {\n                append({ key: '', value: '' });\n              }}\n            >\n              Add custom annotation\n            </Button>\n            {!selectedDashboard && (\n              <Button type=\"button\" variant=\"secondary\" icon=\"dashboard\" onClick={() => setShowPanelSelector(true)}>\n                Link dashboard and panel\n              </Button>\n            )}\n          </div>\n        </Stack>\n        {showPanelSelector && (\n          <DashboardPicker\n            isOpen={true}\n            dashboardUid={selectedDashboardUid}\n            panelId={selectedPanelId}\n            onChange={setSelectedDashboardAndPanelId}\n            onDismiss={() => setShowPanelSelector(false)}\n          />\n        )}\n      </Stack>\n    </RuleEditorSection>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  annotationValueInput: css({\n    width: '394px',\n  }),\n  textarea: css({\n    height: '76px',\n  }),\n  addAnnotationsButtonContainer: css({\n    marginTop: theme.spacing(1),\n    gap: theme.spacing(1),\n    display: 'flex',\n  }),\n  field: css({\n    marginBottom: theme.spacing(0.5),\n  }),\n  flexRow: css({\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'flex-start',\n  }),\n  flexRowItemMargin: css({\n    marginTop: theme.spacing(1),\n  }),\n  deleteAnnotationButton: css({\n    display: 'inline-block',\n    marginTop: '10px',\n    marginLeft: '10px',\n  }),\n\n  annotationTitle: css({\n    color: theme.colors.text.primary,\n    marginBottom: '3px',\n  }),\n\n  annotationContainer: css({\n    marginTop: '5px',\n  }),\n\n  annotationDescription: css({\n    color: theme.colors.text.secondary,\n  }),\n\n  annotationValueContainer: css({\n    display: 'flex',\n  }),\n});\n\nexport default AnnotationsStep;\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, Text, Toggletip, useStyles2, Stack } from '@grafana/ui';\n\ninterface NeedHelpInfoProps {\n  contentText: string | JSX.Element;\n  externalLink?: string;\n  linkText?: string;\n  title?: string;\n}\nexport function NeedHelpInfo({ contentText, externalLink, linkText, title = 'Need help?' }: NeedHelpInfoProps) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Toggletip\n      content={<div className={styles.mutedText}>{contentText}</div>}\n      title={\n        <Stack gap={0.5} direction=\"row\" alignItems=\"center\">\n          <Icon name=\"question-circle\" />\n          {title}\n        </Stack>\n      }\n      footer={\n        externalLink ? (\n          <a href={externalLink} target=\"_blank\" rel=\"noreferrer\">\n            <Stack direction=\"row\" gap={0.5} alignItems=\"center\">\n              <Text color=\"link\">\n                {linkText} <Icon size=\"sm\" name=\"external-link-alt\" />\n              </Text>\n            </Stack>\n          </a>\n        ) : undefined\n      }\n      closeButton={true}\n      placement=\"bottom-start\"\n    >\n      <div className={styles.helpInfo}>\n        <Stack direction=\"row\" alignItems=\"center\" gap={0.5}>\n          <Icon name=\"question-circle\" size=\"sm\" />\n          <Text variant=\"bodySmall\" color=\"primary\">\n            Need help?\n          </Text>\n        </Stack>\n      </div>\n    </Toggletip>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  mutedText: css({\n    color: theme.colors.text.secondary,\n    fontSize: theme.typography.size.sm,\n  }),\n  helpInfo: css({\n    cursor: 'pointer',\n    textDecoration: 'underline',\n  }),\n});\n","import { css, cx } from '@emotion/css';\nimport * as React from 'react';\nimport { ReactElement } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { FieldSet, InlineSwitch, Stack, Text, useStyles2 } from '@grafana/ui';\n\nexport interface RuleEditorSectionProps {\n  title: string;\n  stepNo: number;\n  description?: string | ReactElement;\n  fullWidth?: boolean;\n  switchMode?: {\n    isAdvancedMode: boolean;\n    setAdvancedMode: (isAdvanced: boolean) => void;\n  };\n}\n\nexport const RuleEditorSection = ({\n  title,\n  stepNo,\n  children,\n  fullWidth = false,\n  description,\n  switchMode,\n}: React.PropsWithChildren<RuleEditorSectionProps>) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <div className={styles.parent}>\n      <FieldSet\n        className={cx(fullWidth && styles.fullWidth)}\n        label={\n          <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\">\n            <Text variant=\"h3\">\n              {stepNo}. {title}\n            </Text>\n            {switchMode && (\n              <Text variant=\"bodySmall\">\n                <InlineSwitch\n                  id=\"query-and-expressions-advanced-options\"\n                  value={switchMode.isAdvancedMode}\n                  onChange={(event) => {\n                    switchMode.setAdvancedMode(event.currentTarget.checked);\n                  }}\n                  label=\"Advanced options\"\n                  showLabel\n                  transparent\n                  className={styles.reverse}\n                />\n              </Text>\n            )}\n          </Stack>\n        }\n      >\n        <Stack direction=\"column\">\n          {description && <div className={styles.description}>{description}</div>}\n          {children}\n        </Stack>\n      </FieldSet>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  parent: css({\n    display: 'flex',\n    flexDirection: 'row',\n    border: `solid 1px ${theme.colors.border.weak}`,\n    borderRadius: theme.shape.radius.default,\n    padding: `${theme.spacing(2)} ${theme.spacing(3)}`,\n  }),\n  description: css({\n    marginTop: `-${theme.spacing(2)}`,\n  }),\n  fullWidth: css({\n    width: '100%',\n  }),\n  reverse: css({\n    flexDirection: 'row-reverse',\n    gap: theme.spacing(1),\n  }),\n});\n","import { SupportedPlugin } from '../types/pluginBridges';\n\nimport { alertingApi } from './alertingApi';\n\nexport interface LabelItem {\n  id: string;\n  name: string;\n  prescribed: boolean;\n}\n\nexport interface LabelKeyAndValues {\n  labelKey: LabelItem;\n  values: LabelItem[];\n}\n\nexport const labelsApi = alertingApi.injectEndpoints({\n  endpoints: (build) => ({\n    getLabels: build.query<LabelItem[], void>({\n      query: () => ({\n        url: `/api/plugins/${SupportedPlugin.Labels}/resources/v1/labels/keys`,\n      }),\n      providesTags: ['GrafanaLabels'],\n    }),\n    getLabelValues: build.query<LabelKeyAndValues, { key: string }>({\n      query: ({ key }) => ({\n        url: `/api/plugins/${SupportedPlugin.Labels}/resources/v1/labels/name/${key}`,\n      }),\n      providesTags: ['GrafanaLabels'],\n    }),\n  }),\n});\n","import { css } from '@emotion/css';\nimport { forwardRef, FC } from 'react';\nimport { createFilter, GroupBase, OptionsOrGroups } from 'react-select';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Field, Select, useStyles2 } from '@grafana/ui';\n\nexport interface AlertLabelDropdownProps {\n  onChange: (newValue: SelectableValue<string>) => void;\n  onOpenMenu?: () => void;\n  options: SelectableValue[];\n  defaultValue?: SelectableValue;\n  type: 'key' | 'value';\n}\nconst _customFilter = createFilter({ ignoreCase: false });\nfunction customFilter(opt: SelectableValue, searchQuery: string) {\n  return _customFilter(\n    {\n      label: opt.label ?? '',\n      value: opt.value ?? '',\n      data: {},\n    },\n    searchQuery\n  );\n}\n\nconst handleIsValidNewOption = (\n  inputValue: string,\n  _: SelectableValue<string> | null,\n  options: OptionsOrGroups<SelectableValue<string>, GroupBase<SelectableValue<string>>>\n) => {\n  const exactValueExists = options.some((el) => el.label === inputValue);\n  const valueIsNotEmpty = inputValue.trim().length;\n  return !Boolean(exactValueExists) && Boolean(valueIsNotEmpty);\n};\n\nconst AlertLabelDropdown: FC<AlertLabelDropdownProps> = forwardRef<HTMLDivElement, AlertLabelDropdownProps>(\n  function LabelPicker({ onChange, options, defaultValue, type, onOpenMenu = () => {} }, ref) {\n    const styles = useStyles2(getStyles);\n\n    return (\n      <div ref={ref}>\n        <Field disabled={false} data-testid={`alertlabel-${type}-picker`} className={styles.resetMargin}>\n          <Select<string>\n            placeholder={`Choose ${type}`}\n            width={29}\n            className=\"ds-picker select-container\"\n            backspaceRemovesValue={false}\n            onChange={onChange}\n            onOpenMenu={onOpenMenu}\n            filterOption={customFilter}\n            isValidNewOption={handleIsValidNewOption}\n            options={options}\n            maxMenuHeight={500}\n            noOptionsMessage=\"No labels found\"\n            defaultValue={defaultValue}\n            allowCustomValue\n          />\n        </Field>\n      </div>\n    );\n  }\n);\n\nconst getStyles = () => ({\n  resetMargin: css({ marginBottom: 0 }),\n});\n\nexport default AlertLabelDropdown;\n","import { UseFieldArrayRemove } from 'react-hook-form';\n\nimport { Button } from '@grafana/ui';\n\ninterface RemoveButtonProps {\n  remove: UseFieldArrayRemove;\n  index: number;\n}\nexport function RemoveButton({ remove, index }: RemoveButtonProps) {\n  return (\n    <Button\n      aria-label=\"delete label\"\n      icon=\"trash-alt\"\n      data-testid={`delete-label-${index}`}\n      variant=\"secondary\"\n      onClick={() => {\n        remove(index);\n      }}\n    />\n  );\n}\n\ninterface AddButtonProps {\n  append: () => void;\n}\nexport function AddButton({ append }: AddButtonProps) {\n  return (\n    <Button icon=\"plus\" type=\"button\" variant=\"secondary\" onClick={append}>\n      Add more\n    </Button>\n  );\n}\n","import { css, cx } from '@emotion/css';\nimport { FC, useCallback, useMemo, useState } from 'react';\nimport { Controller, FormProvider, useFieldArray, useForm, useFormContext } from 'react-hook-form';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { Button, Field, InlineLabel, Input, LoadingPlaceholder, Space, Stack, Text, useStyles2 } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { labelsApi } from '../../../api/labelsApi';\nimport { usePluginBridge } from '../../../hooks/usePluginBridge';\nimport { SupportedPlugin } from '../../../types/pluginBridges';\nimport { RuleFormType, RuleFormValues } from '../../../types/rule-form';\nimport { isPrivateLabelKey } from '../../../utils/labels';\nimport { isRecordingRuleByType } from '../../../utils/rules';\nimport AlertLabelDropdown from '../../AlertLabelDropdown';\nimport { AlertLabels } from '../../AlertLabels';\nimport { NeedHelpInfo } from '../NeedHelpInfo';\nimport { useAlertRuleSuggestions } from '../useAlertRuleSuggestions';\n\nimport { AddButton, RemoveButton } from './LabelsButtons';\n\nconst useGetOpsLabelsKeys = (skip: boolean) => {\n  const { currentData, isLoading: isloadingLabels } = labelsApi.endpoints.getLabels.useQuery(undefined, {\n    skip,\n  });\n  return { loading: isloadingLabels, labelsOpsKeys: currentData };\n};\n\nfunction mapLabelsToOptions(\n  items: Iterable<string> = [],\n  labelsInSubForm?: Array<{ key: string; value: string }>\n): Array<SelectableValue<string>> {\n  const existingKeys = new Set(labelsInSubForm ? labelsInSubForm.map((label) => label.key) : []);\n  return Array.from(items, (item) => ({ label: item, value: item, isDisabled: existingKeys.has(item) }));\n}\n\nexport interface LabelsInRuleProps {\n  labels: Array<{ key: string; value: string }>;\n}\n\nexport const LabelsInRule = ({ labels }: LabelsInRuleProps) => {\n  const labelsObj: Record<string, string> = labels.reduce((acc: Record<string, string>, label) => {\n    if (label.key) {\n      acc[label.key] = label.value;\n    }\n    return acc;\n  }, {});\n\n  return <AlertLabels labels={labelsObj} />;\n};\n\nexport type LabelsSubformValues = {\n  labelsInSubform: Array<{ key: string; value: string }>;\n};\n\nexport interface LabelsSubFormProps {\n  dataSourceName: string;\n  initialLabels: Array<{ key: string; value: string }>;\n  onClose: (\n    labelsToUodate?: Array<{\n      key: string;\n      value: string;\n    }>\n  ) => void;\n}\n\nexport function LabelsSubForm({ dataSourceName, onClose, initialLabels }: LabelsSubFormProps) {\n  const styles = useStyles2(getStyles);\n  const { watch } = useFormContext<RuleFormValues>();\n  const type = watch('type') ?? RuleFormType.grafana;\n\n  const onSave = (labels: LabelsSubformValues) => {\n    onClose(labels.labelsInSubform);\n  };\n  const onCancel = () => {\n    onClose();\n  };\n  // default values for the subform are the initial labels\n  const defaultValues: LabelsSubformValues = useMemo(() => {\n    return { labelsInSubform: initialLabels };\n  }, [initialLabels]);\n\n  const formAPI = useForm<LabelsSubformValues>({ defaultValues });\n  return (\n    <FormProvider {...formAPI}>\n      <form onSubmit={formAPI.handleSubmit(onSave)}>\n        <Stack direction=\"column\" gap={4}>\n          <Text>{getLabelText(type)}</Text>\n          <Stack direction=\"column\" gap={1}>\n            <LabelsWithSuggestions dataSourceName={dataSourceName} />\n            <Space v={2} />\n            <LabelsInRule labels={formAPI.watch('labelsInSubform')} />\n            <Space v={1} />\n            <div className={styles.confirmButton}>\n              <Button type=\"button\" variant=\"secondary\" onClick={onCancel}>\n                Cancel\n              </Button>\n              <Button type=\"submit\">Save</Button>\n            </div>\n          </Stack>\n        </Stack>\n      </form>\n    </FormProvider>\n  );\n}\n\nconst isKeyAllowed = (labelKey: string) => !isPrivateLabelKey(labelKey);\n\nexport function useCombinedLabels(\n  dataSourceName: string,\n  labelsPluginInstalled: boolean,\n  loadingLabelsPlugin: boolean,\n  labelsInSubform: Array<{ key: string; value: string }>,\n  selectedKey: string\n) {\n  // ------- Get labels keys and their values from existing alerts\n  const { isLoading, labels: labelsByKeyFromExisingAlerts } = useAlertRuleSuggestions(dataSourceName);\n  // ------- Get only the keys from the ops labels, as we will fetch the values for the keys once the key is selected.\n  const { loading: isLoadingLabels, labelsOpsKeys = [] } = useGetOpsLabelsKeys(\n    !labelsPluginInstalled || loadingLabelsPlugin\n  );\n  //------ Convert the labelsOpsKeys to the same format as the labelsByKeyFromExisingAlerts\n  const labelsByKeyOps = useMemo(() => {\n    return labelsOpsKeys.reduce((acc: Record<string, Set<string>>, label) => {\n      acc[label.name] = new Set();\n      return acc;\n    }, {});\n  }, [labelsOpsKeys]);\n\n  //------- Convert the keys from the ops labels to options for the dropdown\n  const keysFromGopsLabels = useMemo(() => {\n    return mapLabelsToOptions(Object.keys(labelsByKeyOps).filter(isKeyAllowed), labelsInSubform);\n  }, [labelsByKeyOps, labelsInSubform]);\n\n  //------- Convert the keys from the existing alerts to options for the dropdown\n  const keysFromExistingAlerts = useMemo(() => {\n    return mapLabelsToOptions(Array.from(labelsByKeyFromExisingAlerts.keys()).filter(isKeyAllowed), labelsInSubform);\n  }, [labelsByKeyFromExisingAlerts, labelsInSubform]);\n\n  // create two groups of labels, one for ops and one for custom\n  const groupedOptions = [\n    {\n      label: 'From alerts',\n      options: keysFromExistingAlerts,\n      expanded: true,\n    },\n    {\n      label: 'From system',\n      options: keysFromGopsLabels,\n      expanded: true,\n    },\n  ];\n\n  const selectedKeyIsFromAlerts = labelsByKeyFromExisingAlerts.has(selectedKey);\n  const selectedKeyIsFromOps = labelsByKeyOps[selectedKey] !== undefined && labelsByKeyOps[selectedKey]?.size > 0;\n  const selectedKeyDoesNotExist = !selectedKeyIsFromAlerts && !selectedKeyIsFromOps;\n\n  const valuesAlreadyFetched = !selectedKeyIsFromAlerts && labelsByKeyOps[selectedKey]?.size > 0;\n\n  // Only fetch the values for the selected key if it is from ops and the values are not already fetched (the selected key is not in the labelsByKeyOps object)\n  const {\n    currentData: valuesData,\n    isLoading: isLoadingValues = false,\n    error,\n  } = labelsApi.endpoints.getLabelValues.useQuery(\n    { key: selectedKey },\n    {\n      skip:\n        !labelsPluginInstalled ||\n        !selectedKey ||\n        selectedKeyIsFromAlerts ||\n        valuesAlreadyFetched ||\n        selectedKeyDoesNotExist,\n    }\n  );\n\n  // these are the values for the selected key in case it is from ops\n  const valuesFromSelectedGopsKey = useMemo(() => {\n    // if it is from alerts, we need to fetch the values from the existing alerts\n    if (selectedKeyIsFromAlerts) {\n      return [];\n    }\n    // in case of a label from ops, we need to fetch the values from the plugin\n    // fetch values from ops only if there is no value for the key\n    const valuesForSelectedKey = labelsByKeyOps[selectedKey];\n    const valuesAlreadyFetched = valuesForSelectedKey?.size > 0;\n    if (valuesAlreadyFetched) {\n      return mapLabelsToOptions(valuesForSelectedKey);\n    }\n    if (!isLoadingValues && valuesData?.values?.length && !error) {\n      const values = valuesData?.values.map((value) => value.name);\n      labelsByKeyOps[selectedKey] = new Set(values);\n      return mapLabelsToOptions(values);\n    }\n    return [];\n  }, [selectedKeyIsFromAlerts, labelsByKeyOps, selectedKey, isLoadingValues, valuesData, error]);\n\n  const getValuesForLabel = useCallback(\n    (key: string) => {\n      if (!isKeyAllowed(key)) {\n        return [];\n      }\n\n      // values from existing alerts will take precedence over values from ops\n      if (selectedKeyIsFromAlerts || !labelsPluginInstalled) {\n        return mapLabelsToOptions(labelsByKeyFromExisingAlerts.get(key));\n      }\n      return valuesFromSelectedGopsKey;\n    },\n    [labelsByKeyFromExisingAlerts, labelsPluginInstalled, valuesFromSelectedGopsKey, selectedKeyIsFromAlerts]\n  );\n\n  return {\n    loading: isLoading || isLoadingLabels,\n    keysFromExistingAlerts,\n    groupedOptions,\n    getValuesForLabel,\n  };\n}\n\n/*\n  We will suggest labels from two sources: existing alerts and ops labels.\n  We only will suggest labels from ops if the grafana-labels-app plugin is installed\n  This component is only used by the alert rule form.\n  */\nexport interface LabelsWithSuggestionsProps {\n  dataSourceName: string;\n}\n\nexport function LabelsWithSuggestions({ dataSourceName }: LabelsWithSuggestionsProps) {\n  const styles = useStyles2(getStyles);\n  const {\n    control,\n    watch,\n    formState: { errors },\n  } = useFormContext<LabelsSubformValues>();\n\n  const labelsInSubform = watch('labelsInSubform');\n  const { fields, remove, append } = useFieldArray({ control, name: 'labelsInSubform' });\n  const appendLabel = useCallback(() => {\n    append({ key: '', value: '' });\n  }, [append]);\n\n  // check if the labels plugin is installed\n  const { installed: labelsPluginInstalled = false, loading: loadingLabelsPlugin } = usePluginBridge(\n    SupportedPlugin.Labels\n  );\n  const [selectedKey, setSelectedKey] = useState('');\n\n  const { loading, keysFromExistingAlerts, groupedOptions, getValuesForLabel } = useCombinedLabels(\n    dataSourceName,\n    labelsPluginInstalled,\n    loadingLabelsPlugin,\n    labelsInSubform,\n    selectedKey\n  );\n\n  const values = useMemo(() => {\n    return getValuesForLabel(selectedKey);\n  }, [selectedKey, getValuesForLabel]);\n\n  const isLoading = loading || loadingLabelsPlugin;\n\n  return (\n    <>\n      {isLoading && <LoadingPlaceholder text=\"Loading existing labels\" />}\n      {!isLoading && (\n        <Stack direction=\"column\" gap={1} alignItems=\"flex-start\">\n          {fields.map((field, index) => {\n            return (\n              <div key={field.id} className={cx(styles.flexRow, styles.centerAlignRow)}>\n                <Field\n                  className={styles.labelInput}\n                  invalid={Boolean(errors.labelsInSubform?.[index]?.key?.message)}\n                  error={errors.labelsInSubform?.[index]?.key?.message}\n                  data-testid={`labelsInSubform-key-${index}`}\n                >\n                  <Controller\n                    name={`labelsInSubform.${index}.key`}\n                    control={control}\n                    rules={{ required: Boolean(labelsInSubform[index]?.value) ? 'Required.' : false }}\n                    render={({ field: { onChange, ref, ...rest } }) => {\n                      return (\n                        <AlertLabelDropdown\n                          {...rest}\n                          defaultValue={field.key ? { label: field.key, value: field.key } : undefined}\n                          options={labelsPluginInstalled ? groupedOptions : keysFromExistingAlerts}\n                          onChange={(newValue: SelectableValue) => {\n                            onChange(newValue.value);\n                            setSelectedKey(newValue.value);\n                          }}\n                          type=\"key\"\n                        />\n                      );\n                    }}\n                  />\n                </Field>\n                <InlineLabel className={styles.equalSign}>=</InlineLabel>\n                <Field\n                  className={styles.labelInput}\n                  invalid={Boolean(errors.labelsInSubform?.[index]?.value?.message)}\n                  error={errors.labelsInSubform?.[index]?.value?.message}\n                  data-testid={`labelsInSubform-value-${index}`}\n                >\n                  <Controller\n                    control={control}\n                    name={`labelsInSubform.${index}.value`}\n                    rules={{ required: Boolean(labelsInSubform[index]?.value) ? 'Required.' : false }}\n                    render={({ field: { onChange, ref, ...rest } }) => {\n                      return (\n                        <AlertLabelDropdown\n                          {...rest}\n                          defaultValue={field.value ? { label: field.value, value: field.value } : undefined}\n                          options={values}\n                          onChange={(newValue: SelectableValue) => {\n                            onChange(newValue.value);\n                          }}\n                          onOpenMenu={() => {\n                            setSelectedKey(labelsInSubform[index].key);\n                          }}\n                          type=\"value\"\n                        />\n                      );\n                    }}\n                  />\n                </Field>\n\n                <RemoveButton index={index} remove={remove} />\n              </div>\n            );\n          })}\n          <AddButton append={appendLabel} />\n        </Stack>\n      )}\n    </>\n  );\n}\n\nexport const LabelsWithoutSuggestions: FC = () => {\n  const styles = useStyles2(getStyles);\n  const {\n    register,\n    control,\n    watch,\n    formState: { errors },\n  } = useFormContext<RuleFormValues>();\n\n  const labels = watch('labels');\n  const { fields, remove, append } = useFieldArray({ control, name: 'labels' });\n  const appendLabel = useCallback(() => {\n    append({ key: '', value: '' });\n  }, [append]);\n\n  return (\n    <>\n      {fields.map((field, index) => {\n        return (\n          <div key={field.id}>\n            <div className={cx(styles.flexRow, styles.centerAlignRow)} data-testid=\"alertlabel-input-wrapper\">\n              <Field\n                className={styles.labelInput}\n                invalid={!!errors.labels?.[index]?.key?.message}\n                error={errors.labels?.[index]?.key?.message}\n              >\n                <Input\n                  {...register(`labels.${index}.key`, {\n                    required: { value: !!labels[index]?.value, message: 'Required.' },\n                  })}\n                  placeholder=\"key\"\n                  data-testid={`label-key-${index}`}\n                  defaultValue={field.key}\n                />\n              </Field>\n              <InlineLabel className={styles.equalSign}>=</InlineLabel>\n              <Field\n                className={styles.labelInput}\n                invalid={!!errors.labels?.[index]?.value?.message}\n                error={errors.labels?.[index]?.value?.message}\n              >\n                <Input\n                  {...register(`labels.${index}.value`, {\n                    required: { value: !!labels[index]?.key, message: 'Required.' },\n                  })}\n                  placeholder=\"value\"\n                  data-testid={`label-value-${index}`}\n                  defaultValue={field.value}\n                />\n              </Field>\n              <RemoveButton index={index} remove={remove} />\n            </div>\n          </div>\n        );\n      })}\n      <AddButton append={appendLabel} />\n    </>\n  );\n};\n\nfunction LabelsField() {\n  const { watch } = useFormContext<RuleFormValues>();\n  const type = watch('type') ?? RuleFormType.grafana;\n\n  return (\n    <div>\n      <Stack direction=\"column\" gap={1}>\n        <Text element=\"h5\">Labels</Text>\n        <Stack direction={'row'} gap={1}>\n          <Text variant=\"bodySmall\" color=\"secondary\">\n            {getLabelText(type)}\n          </Text>\n          <NeedHelpInfo\n            contentText=\"The dropdown only displays labels that you have previously used for alerts.\n            Select a label from the options below or type in a new one.\"\n            title=\"Labels\"\n          />\n        </Stack>\n      </Stack>\n      <LabelsWithoutSuggestions />\n    </div>\n  );\n}\n\nfunction getLabelText(type: RuleFormType) {\n  const isRecordingRule = type ? isRecordingRuleByType(type) : false;\n  const text = isRecordingRule\n    ? t('alerting.alertform.labels.recording', 'Add labels to your rule.')\n    : t(\n        'alerting.alertform.labels.alerting',\n        'Add labels to your rule for searching, silencing, or routing to a notification policy.'\n      );\n  return text;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    flexColumn: css({\n      display: 'flex',\n      flexDirection: 'column',\n    }),\n    flexRow: css({\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'flex-start',\n    }),\n    centerAlignRow: css({\n      alignItems: 'center',\n      gap: theme.spacing(0.5),\n    }),\n    equalSign: css({\n      alignSelf: 'flex-start',\n      width: '28px',\n      justifyContent: 'center',\n      margin: 0,\n    }),\n    labelInput: css({\n      width: '175px',\n      margin: 0,\n    }),\n    confirmButton: css({\n      display: 'flex',\n      flexDirection: 'row',\n      gap: theme.spacing(1),\n      marginLeft: 'auto',\n    }),\n  };\n};\n\nexport default LabelsField;\n","import { useEffect, useMemo } from 'react';\n\nimport { RuleNamespace } from 'app/types/unified-alerting';\nimport { RulerRulesConfigDTO } from 'app/types/unified-alerting-dto';\n\nimport { alertRuleApi } from '../../api/alertRuleApi';\nimport { featureDiscoveryApi } from '../../api/featureDiscoveryApi';\nimport { shouldUsePrometheusRulesPrimary } from '../../featureToggles';\n\nconst { usePrometheusRuleNamespacesQuery, useLazyRulerRulesQuery } = alertRuleApi;\nconst { useDiscoverDsFeaturesQuery } = featureDiscoveryApi;\n\nconst prometheusRulesPrimary = shouldUsePrometheusRulesPrimary();\nconst emptyRulerConfig: RulerRulesConfigDTO = {};\n\nexport function useAlertRuleSuggestions(rulesSourceName: string) {\n  const { data: features, isLoading: isFeaturesLoading } = useDiscoverDsFeaturesQuery({ rulesSourceName });\n\n  // emptyRulerConfig is used to prevent from triggering  labels' useMemo all the time\n  // rulerRules = {} creates a new object and triggers useMemo to recalculate labels\n  const [fetchRulerRules, { data: rulerRules = emptyRulerConfig, isLoading: isRulerRulesLoading }] =\n    useLazyRulerRulesQuery();\n\n  const { data: promNamespaces = [], isLoading: isPrometheusRulesLoading } = usePrometheusRuleNamespacesQuery(\n    { ruleSourceName: rulesSourceName },\n    { skip: !prometheusRulesPrimary }\n  );\n\n  useEffect(() => {\n    if (features?.rulerConfig && !prometheusRulesPrimary) {\n      fetchRulerRules({ rulerConfig: features.rulerConfig });\n    }\n  }, [features?.rulerConfig, fetchRulerRules]);\n\n  const namespaceGroups = useMemo(() => {\n    if (isPrometheusRulesLoading || isRulerRulesLoading) {\n      return new Map<string, string[]>();\n    }\n\n    if (prometheusRulesPrimary) {\n      return promNamespacesToNamespaceGroups(promNamespaces);\n    }\n\n    return rulerRulesToNamespaceGroups(rulerRules);\n  }, [promNamespaces, rulerRules, isPrometheusRulesLoading, isRulerRulesLoading]);\n\n  const labels = useMemo(() => {\n    if (isPrometheusRulesLoading || isRulerRulesLoading) {\n      return new Map<string, Set<string>>();\n    }\n\n    if (prometheusRulesPrimary) {\n      return promNamespacesToLabels(promNamespaces);\n    }\n\n    return rulerRulesToLabels(rulerRules);\n  }, [promNamespaces, rulerRules, isPrometheusRulesLoading, isRulerRulesLoading]);\n\n  return { namespaceGroups, labels, isLoading: isPrometheusRulesLoading || isRulerRulesLoading || isFeaturesLoading };\n}\n\nfunction promNamespacesToNamespaceGroups(promNamespaces: RuleNamespace[]) {\n  const groups = new Map<string, string[]>();\n  promNamespaces.forEach((namespace) => {\n    groups.set(\n      namespace.name,\n      namespace.groups.map((group) => group.name)\n    );\n  });\n  return groups;\n}\n\nfunction rulerRulesToNamespaceGroups(rulerConfig: RulerRulesConfigDTO) {\n  const result = new Map<string, string[]>();\n  Object.entries(rulerConfig).forEach(([namespace, groups]) => {\n    result.set(\n      namespace,\n      groups.map((group) => group.name)\n    );\n  });\n  return result;\n}\n\nfunction promNamespacesToLabels(promNamespace: RuleNamespace[]) {\n  const rules = promNamespace.flatMap((namespace) => namespace.groups).flatMap((group) => group.rules);\n\n  return rules.reduce((result, rule) => {\n    if (!rule.labels) {\n      return result;\n    }\n\n    Object.entries(rule.labels).forEach(([labelKey, labelValue]) => {\n      if (!labelKey || !labelValue) {\n        return;\n      }\n\n      const labelEntry = result.get(labelKey);\n      if (labelEntry) {\n        labelEntry.add(labelValue);\n      } else {\n        result.set(labelKey, new Set([labelValue]));\n      }\n    });\n    return result;\n  }, new Map<string, Set<string>>());\n}\n\nfunction rulerRulesToLabels(rulerConfig: RulerRulesConfigDTO) {\n  const result = new Map<string, Set<string>>();\n\n  const rules = Object.entries(rulerConfig)\n    .flatMap(([_, groups]) => groups)\n    .flatMap((group) => group.rules);\n\n  return rules.reduce((result, rule) => {\n    if (!rule.labels) {\n      return result;\n    }\n\n    Object.entries(rule.labels).forEach(([labelKey, labelValue]) => {\n      if (!labelKey || !labelValue) {\n        return;\n      }\n\n      const labelEntry = result.get(labelKey);\n      if (labelEntry) {\n        labelEntry.add(labelValue);\n      } else {\n        result.set(labelKey, new Set([labelValue]));\n      }\n    });\n    return result;\n  }, result);\n}\n"],"names":["CustomAnnotationHeaderField","field","styles","getStyles","Input","theme","annotationField","annotations","annotation","index","control","Stack","ref","label","Text","DashboardAnnotationField","dashboard","panel","dashboardUid","panelId","onEditClick","onDeleteClick","dashboardLink","panelLink","Icon","dashboardApi","alertingApi","build","query","params","uid","convertToDashboardModel","dashboardDTO","meta","useDashboardQuery","currentData","data","rest","panelSort","a","b","DashboardPicker","isOpen","onChange","onDismiss","getPickerStyles","selectedDashboardUid","setSelectedDashboardUid","selectedPanelId","setSelectedPanelId","dashboardFilter","setDashboardFilter","debouncedDashboardFilter","setDebouncedDashboardFilter","panelFilter","setPanelFilter","useSearchQuery","filteredDashboards","isDashSearchFetching","dashboardModel","isDashboardFetching","handleDashboardChange","allDashboardPanels","getVisualPanels","filteredPanels","currentPanel","isValidPanel","selectedDashboardIndex","isDefaultSelection","selectedDashboardIsInPageResult","scrollToItem","node","canScroll","useDebounce","DashboardRow","style","isSelected","PanelRow","panelTitle","isAlertingCompatible","disabled","Tooltip","Modal","Alert","FilterInput","LoadingPlaceholder","height","width","Button","panelsWithoutRows","panelsNestedInRows","rowPanel","collapsedRow","hasValidID","isValidPanelType","isLibraryPanel","clearButton","AnnotationsStep","showPanelSelector","setShowPanelSelector","useToggle","register","watch","errors","setValue","fields","append","remove","selectedDashboard","setSelectedDashboard","selectedPanel","setSelectedPanel","setSelectedDashboardAndPanelId","updatedAnnotations","draft","dashboardAnnotation","panelAnnotation","handleDeleteDashboardAnnotation","handleEditDashboardAnnotation","getAnnotationsSectionDescription","NeedHelpInfo","RuleEditorSection","isUrl","ValueInputComponent","TextArea","Field","contentText","externalLink","linkText","title","stepNo","children","fullWidth","description","switchMode","event","labelsApi","key","_customFilter","customFilter","opt","searchQuery","handleIsValidNewOption","inputValue","_","options","exactValueExists","el","valueIsNotEmpty","AlertLabelDropdown","defaultValue","type","onOpenMenu","Select","RemoveButton","AddButton","useGetOpsLabelsKeys","skip","isloadingLabels","mapLabelsToOptions","items","labelsInSubForm","existingKeys","item","LabelsInRule","labels","labelsObj","acc","AlertLabels","LabelsSubForm","dataSourceName","onClose","initialLabels","onSave","onCancel","defaultValues","formAPI","getLabelText","LabelsWithSuggestions","Space","isKeyAllowed","labelKey","useCombinedLabels","labelsPluginInstalled","loadingLabelsPlugin","labelsInSubform","selectedKey","isLoading","labelsByKeyFromExisingAlerts","useAlertRuleSuggestions","isLoadingLabels","labelsOpsKeys","labelsByKeyOps","keysFromGopsLabels","keysFromExistingAlerts","groupedOptions","selectedKeyIsFromAlerts","selectedKeyIsFromOps","selectedKeyDoesNotExist","valuesAlreadyFetched","valuesData","isLoadingValues","error","valuesFromSelectedGopsKey","valuesForSelectedKey","values","value","getValuesForLabel","appendLabel","usePluginBridge","setSelectedKey","loading","newValue","InlineLabel","LabelsWithoutSuggestions","LabelsField","usePrometheusRuleNamespacesQuery","useLazyRulerRulesQuery","useDiscoverDsFeaturesQuery","prometheusRulesPrimary","emptyRulerConfig","rulesSourceName","features","isFeaturesLoading","fetchRulerRules","rulerRules","isRulerRulesLoading","promNamespaces","isPrometheusRulesLoading","namespaceGroups","promNamespacesToNamespaceGroups","rulerRulesToNamespaceGroups","promNamespacesToLabels","rulerRulesToLabels","groups","namespace","group","rulerConfig","result","promNamespace","rule","labelValue","labelEntry"],"sourceRoot":""}