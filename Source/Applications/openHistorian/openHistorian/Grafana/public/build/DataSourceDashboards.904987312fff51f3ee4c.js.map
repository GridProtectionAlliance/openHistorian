{"version":3,"file":"DataSourceDashboards.904987312fff51f3ee4c.js","mappings":"yJAcO,SAASA,EAAgB,CAAE,WAAAC,EAAY,SAAAC,EAAU,SAAAC,CAAS,EAAU,CACzE,SAASC,EAAWC,EAA4B,CAC9C,OAAOA,EAAU,WAAaA,EAAU,iBAAmB,SAAW,WACxE,CAEA,OACE,gBAAC,SAAM,UAAU,gBACf,gBAAC,aACEJ,EAAW,IAAI,CAACI,EAAWC,IAExB,gBAAC,MAAG,IAAK,GAAGD,EAAU,eAAeC,GAAA,EACnC,gBAAC,MAAG,UAAU,WACZ,gBAAC,IAAI,CAAC,KAAK,MAAO,EACpB,EACA,gBAAC,UACED,EAAU,SACT,gBAAC,KAAE,KAAMA,EAAU,aAAcA,EAAU,KAAM,EAEjD,gBAAC,YAAMA,EAAU,KAAM,CAE3B,EACA,gBAAC,MAAG,MAAO,CAAE,UAAW,OAAQ,GAC5BA,EAAU,SAKV,gBAAC,KAAM,CAAC,QAAQ,YAAY,KAAK,KAAK,QAAS,IAAMH,EAASG,EAAW,EAAI,GAC1ED,EAAWC,CAAS,CACvB,EANA,gBAAC,KAAM,CAAC,QAAQ,YAAY,KAAK,KAAK,QAAS,IAAMH,EAASG,EAAW,EAAK,GAAG,QAEjF,EAMDA,EAAU,UACT,gBAAC,MACC,aAAW,mBACX,KAAK,YACL,QAAQ,cACR,KAAK,KACL,QAAS,IAAMF,EAASE,CAAS,EACnC,CAEJ,CACF,CAEH,CACH,CACF,CAEJ,CAEA,QAAeL,C,kHChDR,SAASO,EAAqB,CAAE,IAAAC,CAAI,EAAU,IACnD,MAAkBA,CAAG,EAErB,MAAMC,KAAW,eAAY,EACvBC,KAAa,eAAaC,GAAkBA,EAAE,YAAY,UAAU,EACpEV,KAAa,eAAaU,GAAkBA,EAAE,QAAQ,UAAU,EAChEC,KAAY,eAAaD,GAAkBA,EAAE,QAAQ,yBAAyB,KAEpF,aAAU,IAAM,CAEVD,EAAW,GAAK,GAClBD,KAAS,MAAqB,CAAC,CAEnC,EAAG,CAACA,EAAUC,CAAU,CAAC,EAEzB,MAAMG,EAAoB,CAACR,EAA4BS,IAAuB,CAC5EL,KACE,MACE,CACE,SAAUJ,EAAU,SACpB,KAAMA,EAAU,KAChB,UAAAS,EACA,OAAQ,CACN,CACE,KAAM,IACN,KAAM,aACN,SAAUJ,EAAW,KACrB,MAAOA,EAAW,IACpB,CACF,CACF,EACAL,EAAU,KACZ,CACF,CACF,EAEMU,EAAoB,CAAC,CAAE,IAAAP,CAAI,IAAuB,CACtDC,KAAS,MAAgBD,CAAG,CAAC,CAC/B,EAEA,OACE,gBAACQ,EAAA,CACC,WAAAf,EACA,UAAAW,EACA,kBAAAC,EACA,kBAAAE,CAAA,CACF,CAEJ,CASO,MAAMC,EAA2B,CAAC,CACvC,UAAAJ,EACA,WAAAX,EACA,kBAAAY,EACA,kBAAAE,CACF,IACMH,EACK,gBAAC,IAAU,IAAC,EAGd,gBAAC,IAAc,CAAC,WAAAX,EAAwB,SAAUY,EAAmB,SAAUE,CAAA,CAAmB,C,8HCxEpG,SAASE,EAAyBC,EAAc,CACrD,MAAMV,EAAMU,EAAM,MAAM,OAAO,IACzBC,KAAM,MAAyBX,EAAK,YAAY,EAEtD,OACE,gBAAC,IAAI,CAAC,MAAM,cAAc,QAASW,EAAI,MACrC,gBAAC,kBACC,gBAAC,IAAoB,CAAC,IAAAX,CAAA,CAAU,CAClC,CACF,CAEJ,CAEA,QAAeS,C,4DChBR,MAAMG,KAA2B,iBAAiC,GAAkB,C,oTCqBpF,MAAMC,EAA6Bb,GAAgB,CACxD,MAAMC,KAAW,eAAY,KAE7B,aAAU,KACRA,KAAS,MAAuBD,CAAG,CAAC,EAE7B,UAAmB,CACxBC,KACE,KAAc,CACZ,cAAgBa,GAAWA,EAAM,mBAAqB,IACxD,CAAC,CACH,CACF,GACC,CAACd,EAAKC,CAAQ,CAAC,CACpB,EAEac,EAAqBf,GAAgB,CAChD,MAAMC,KAAW,eAAY,EACvBe,EAAoBC,EAAqB,EAE/C,MAAO,IAAMhB,KAAS,MAAeD,EAAKgB,EAAkB,IAAI,CAAC,CACnE,EAEaE,EAAqB,IAAM,CACtC,MAAMjB,KAAW,eAAY,EACvBG,KAAY,eAAaU,GAAUA,EAAM,YAAY,oBAAoB,EACzEK,KAAc,eAAaL,GAAUA,EAAM,YAAY,WAAW,EAExE,sBAAU,IAAM,CACdb,KAAS,MAAgB,CAAC,CAC5B,EAAG,CAACA,CAAQ,CAAC,EAEN,CAAE,UAAAG,EAAW,YAAAe,CAAY,CAClC,EAEaC,EAAqBpB,GAAgB,CAChD,MAAMC,KAAW,eAAY,KAE7B,aAAU,IAAM,CACdA,KAAS,MAAeD,CAAG,CAAC,CAC9B,EAAG,CAACC,EAAUD,CAAG,CAAC,CACpB,EAEaqB,EAA2B,IAAM,CAC5C,MAAMpB,KAAW,eAAY,KAE7B,aAAU,IAAM,CACdA,KAAS,MAAsB,CAAC,CAClC,EAAG,CAACA,CAAQ,CAAC,CACf,EAEaqB,EAAmB,IAAM,CACpC,MAAMrB,KAAW,eAAY,EACvBe,EAAoBC,EAAqB,EAE/C,OAAQM,GAAiC,CACvCtB,KAAS,MAAcsB,EAAQP,EAAkB,IAAI,CAAC,CACxD,CACF,EAEaQ,EAAsB,IAAM,CACvC,MAAMvB,KAAW,eAAY,EAE7B,MAAO,OAAOC,GAAmCD,KAAS,MAAiBC,CAAU,CAAC,CACxF,EAEauB,EAA4B,IAAM,CAC7C,MAAMxB,KAAW,eAAY,EACvB,CAAE,KAAAyB,CAAK,KAAI,eAAaZ,GAAUA,EAAM,YAAY,UAAU,EAEpE,MAAO,IAAM,CACX,YACE,IAAI,KAAsB,CACxB,MAAO,SACP,KAAM,wCAAwCY,kBAC9C,QAAS,SACT,KAAM,YACN,UAAW,IAAMzB,KAAS,MAAuB,CAAC,CACpD,CAAC,CACH,CACF,CACF,EAEa0B,EAAiB3B,MACrB,eAAac,MAAU,MAAcA,EAAM,YAAad,CAAG,CAAC,EAGxD4B,EAA2B5B,GAAgB,CACtD,MAAME,EAAayB,EAAc3B,CAAG,EACpC,SAAO,MAA8BE,CAAU,CACjD,EAEa2B,EAAqBC,MACzB,eAAahB,MAAU,MAAkBA,EAAM,YAAagB,CAAU,CAAC,EAGnEC,EAAwB,OAC5B,eAAajB,GAAUA,EAAM,kBAAkB,EAG3CkB,EAA2B,CAACC,EAAsBC,IAA0B,CACvF,MAAMhC,EAAayB,EAAcM,CAAY,EACvC,CAAE,OAAAV,EAAQ,UAAAY,EAAW,QAAAC,CAAQ,EAAIL,EAAsB,EACvDM,KAAW,eAAavB,GAAUA,EAAM,QAAQ,EAChDwB,EAAaJ,EAAS,cAAcA,KAAUD,IAAiB,uBAAuBA,IAE5F,GAAIE,EAAW,CACb,MAAMI,EAAqB,CACzB,KAAMJ,EACN,SAAU,oBACV,KAAM,sBACR,EAEA,MAAO,CACL,KAAAI,EACA,KAAMA,CACR,CACF,CAEA,OAAIH,GAAW,CAACb,KACP,MAAYc,EAAUC,KAAY,MAAwB,UAAU,CAAC,KAGvE,MAAYD,EAAUC,KAAY,SAAiB,MAAcpC,EAAYqB,CAAM,EAAGW,GAAU,UAAU,CAAC,CACpH,EAEaM,EAAuBxC,GAAkC,CACpE,MAAME,EAAayB,EAAc3B,CAAG,EAC9ByC,EAAWvC,EAAW,WAAa,GACnCwC,EAAiB,6BAAmC,uCAAsCxC,CAAU,EACpGyC,EAAkB,6BAAmC,wCAAuCzC,CAAU,EAE5G,MAAO,CACL,SAAAuC,EACA,eAAAC,EACA,gBAAAC,CACF,CACF,EAEa1B,EAAuB,OAC3B,cAAW,GAAwB,C","sources":["webpack://grafana/./public/app/features/datasources/components/DashboardsTable.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceDashboards.tsx","webpack://grafana/./public/app/features/datasources/pages/DataSourceDashboardsPage.tsx","webpack://grafana/./public/app/features/datasources/state/contexts.ts","webpack://grafana/./public/app/features/datasources/state/hooks.ts"],"sourcesContent":["import React from 'react';\n\nimport { Button, Icon } from '@grafana/ui';\nimport { PluginDashboard } from 'app/types';\n\nexport interface Props {\n  // List of plugin dashboards to show in the table\n  dashboards: PluginDashboard[];\n  // Callback used when the user clicks on importing a dashboard\n  onImport: (dashboard: PluginDashboard, overwrite: boolean) => void;\n  // Callback used when the user clicks on removing a dashboard\n  onRemove: (dashboard: PluginDashboard) => void;\n}\n\nexport function DashboardsTable({ dashboards, onImport, onRemove }: Props) {\n  function buttonText(dashboard: PluginDashboard) {\n    return dashboard.revision !== dashboard.importedRevision ? 'Update' : 'Re-import';\n  }\n\n  return (\n    <table className=\"filter-table\">\n      <tbody>\n        {dashboards.map((dashboard, index) => {\n          return (\n            <tr key={`${dashboard.dashboardId}-${index}`}>\n              <td className=\"width-1\">\n                <Icon name=\"apps\" />\n              </td>\n              <td>\n                {dashboard.imported ? (\n                  <a href={dashboard.importedUrl}>{dashboard.title}</a>\n                ) : (\n                  <span>{dashboard.title}</span>\n                )}\n              </td>\n              <td style={{ textAlign: 'right' }}>\n                {!dashboard.imported ? (\n                  <Button variant=\"secondary\" size=\"sm\" onClick={() => onImport(dashboard, false)}>\n                    Import\n                  </Button>\n                ) : (\n                  <Button variant=\"secondary\" size=\"sm\" onClick={() => onImport(dashboard, true)}>\n                    {buttonText(dashboard)}\n                  </Button>\n                )}\n                {dashboard.imported && (\n                  <Button\n                    aria-label=\"Delete dashboard\"\n                    icon=\"trash-alt\"\n                    variant=\"destructive\"\n                    size=\"sm\"\n                    onClick={() => onRemove(dashboard)}\n                  />\n                )}\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n\nexport default DashboardsTable;\n","import React, { useEffect } from 'react';\n\nimport PageLoader from 'app/core/components/PageLoader/PageLoader';\nimport { importDashboard, removeDashboard } from 'app/features/dashboard/state/actions';\nimport { loadPluginDashboards } from 'app/features/plugins/admin/state/actions';\nimport { PluginDashboard, StoreState, useDispatch, useSelector } from 'app/types';\n\nimport DashboardTable from '../components/DashboardsTable';\nimport { useLoadDataSource } from '../state';\n\nexport type Props = {\n  // The UID of the data source\n  uid: string;\n};\n\nexport function DataSourceDashboards({ uid }: Props) {\n  useLoadDataSource(uid);\n\n  const dispatch = useDispatch();\n  const dataSource = useSelector((s: StoreState) => s.dataSources.dataSource);\n  const dashboards = useSelector((s: StoreState) => s.plugins.dashboards);\n  const isLoading = useSelector((s: StoreState) => s.plugins.isLoadingPluginDashboards);\n\n  useEffect(() => {\n    // Load plugin dashboards only when the datasource has loaded\n    if (dataSource.id > 0) {\n      dispatch(loadPluginDashboards());\n    }\n  }, [dispatch, dataSource]);\n\n  const onImportDashboard = (dashboard: PluginDashboard, overwrite: boolean) => {\n    dispatch(\n      importDashboard(\n        {\n          pluginId: dashboard.pluginId,\n          path: dashboard.path,\n          overwrite,\n          inputs: [\n            {\n              name: '*',\n              type: 'datasource',\n              pluginId: dataSource.type,\n              value: dataSource.name,\n            },\n          ],\n        },\n        dashboard.title\n      )\n    );\n  };\n\n  const onRemoveDashboard = ({ uid }: PluginDashboard) => {\n    dispatch(removeDashboard(uid));\n  };\n\n  return (\n    <DataSourceDashboardsView\n      dashboards={dashboards}\n      isLoading={isLoading}\n      onImportDashboard={onImportDashboard}\n      onRemoveDashboard={onRemoveDashboard}\n    />\n  );\n}\n\nexport type ViewProps = {\n  isLoading: boolean;\n  dashboards: PluginDashboard[];\n  onImportDashboard: (dashboard: PluginDashboard, overwrite: boolean) => void;\n  onRemoveDashboard: (dashboard: PluginDashboard) => void;\n};\n\nexport const DataSourceDashboardsView = ({\n  isLoading,\n  dashboards,\n  onImportDashboard,\n  onRemoveDashboard,\n}: ViewProps) => {\n  if (isLoading) {\n    return <PageLoader />;\n  }\n\n  return <DashboardTable dashboards={dashboards} onImport={onImportDashboard} onRemove={onRemoveDashboard} />;\n};\n","import React from 'react';\n\nimport { Page } from 'app/core/components/Page/Page';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\n\nimport { DataSourceDashboards } from '../components/DataSourceDashboards';\nimport { useDataSourceSettingsNav } from '../state';\n\nexport interface Props extends GrafanaRouteComponentProps<{ uid: string }> {}\n\nexport function DataSourceDashboardsPage(props: Props) {\n  const uid = props.match.params.uid;\n  const nav = useDataSourceSettingsNav(uid, 'dashboards');\n\n  return (\n    <Page navId=\"datasources\" pageNav={nav.main}>\n      <Page.Contents>\n        <DataSourceDashboards uid={uid} />\n      </Page.Contents>\n    </Page>\n  );\n}\n\nexport default DataSourceDashboardsPage;\n","import { createContext } from 'react';\n\nimport { DATASOURCES_ROUTES } from '../constants';\nimport { DataSourcesRoutes } from '../types';\n\n// The purpose of this context is to be able to override the data-sources routes (used for links for example) used under\n// the app/features/datasources modules, so we can reuse them more easily in different parts of the application (e.g. under Connections)\nexport const DataSourcesRoutesContext = createContext<DataSourcesRoutes>(DATASOURCES_ROUTES);\n","import { useContext, useEffect } from 'react';\n\nimport { DataSourcePluginMeta, DataSourceSettings, NavModelItem } from '@grafana/data';\nimport { cleanUpAction } from 'app/core/actions/cleanUp';\nimport appEvents from 'app/core/app_events';\nimport { contextSrv } from 'app/core/core';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { AccessControlAction, useDispatch, useSelector } from 'app/types';\nimport { ShowConfirmModalEvent } from 'app/types/events';\n\nimport { DataSourceRights } from '../types';\nimport { constructDataSourceExploreUrl } from '../utils';\n\nimport {\n  initDataSourceSettings,\n  testDataSource,\n  loadDataSource,\n  loadDataSources,\n  loadDataSourcePlugins,\n  addDataSource,\n  updateDataSource,\n  deleteLoadedDataSource,\n} from './actions';\nimport { DataSourcesRoutesContext } from './contexts';\nimport { getDataSourceLoadingNav, buildNavModel, getDataSourceNav } from './navModel';\nimport { initialDataSourceSettingsState } from './reducers';\nimport { getDataSource, getDataSourceMeta } from './selectors';\n\nexport const useInitDataSourceSettings = (uid: string) => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(initDataSourceSettings(uid));\n\n    return function cleanUp() {\n      dispatch(\n        cleanUpAction({\n          cleanupAction: (state) => (state.dataSourceSettings = initialDataSourceSettingsState),\n        })\n      );\n    };\n  }, [uid, dispatch]);\n};\n\nexport const useTestDataSource = (uid: string) => {\n  const dispatch = useDispatch();\n  const dataSourcesRoutes = useDataSourcesRoutes();\n\n  return () => dispatch(testDataSource(uid, dataSourcesRoutes.Edit));\n};\n\nexport const useLoadDataSources = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector((state) => state.dataSources.isLoadingDataSources);\n  const dataSources = useSelector((state) => state.dataSources.dataSources);\n\n  useEffect(() => {\n    dispatch(loadDataSources());\n  }, [dispatch]);\n\n  return { isLoading, dataSources };\n};\n\nexport const useLoadDataSource = (uid: string) => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(loadDataSource(uid));\n  }, [dispatch, uid]);\n};\n\nexport const useLoadDataSourcePlugins = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(loadDataSourcePlugins());\n  }, [dispatch]);\n};\n\nexport const useAddDatasource = () => {\n  const dispatch = useDispatch();\n  const dataSourcesRoutes = useDataSourcesRoutes();\n\n  return (plugin: DataSourcePluginMeta) => {\n    dispatch(addDataSource(plugin, dataSourcesRoutes.Edit));\n  };\n};\n\nexport const useUpdateDatasource = () => {\n  const dispatch = useDispatch();\n\n  return async (dataSource: DataSourceSettings) => dispatch(updateDataSource(dataSource));\n};\n\nexport const useDeleteLoadedDataSource = () => {\n  const dispatch = useDispatch();\n  const { name } = useSelector((state) => state.dataSources.dataSource);\n\n  return () => {\n    appEvents.publish(\n      new ShowConfirmModalEvent({\n        title: 'Delete',\n        text: `Are you sure you want to delete the \"${name}\" data source?`,\n        yesText: 'Delete',\n        icon: 'trash-alt',\n        onConfirm: () => dispatch(deleteLoadedDataSource()),\n      })\n    );\n  };\n};\n\nexport const useDataSource = (uid: string) => {\n  return useSelector((state) => getDataSource(state.dataSources, uid));\n};\n\nexport const useDataSourceExploreUrl = (uid: string) => {\n  const dataSource = useDataSource(uid);\n  return constructDataSourceExploreUrl(dataSource);\n};\n\nexport const useDataSourceMeta = (pluginType: string): DataSourcePluginMeta => {\n  return useSelector((state) => getDataSourceMeta(state.dataSources, pluginType));\n};\n\nexport const useDataSourceSettings = () => {\n  return useSelector((state) => state.dataSourceSettings);\n};\n\nexport const useDataSourceSettingsNav = (dataSourceId: string, pageId: string | null) => {\n  const dataSource = useDataSource(dataSourceId);\n  const { plugin, loadError, loading } = useDataSourceSettings();\n  const navIndex = useSelector((state) => state.navIndex);\n  const navIndexId = pageId ? `datasource-${pageId}-${dataSourceId}` : `datasource-settings-${dataSourceId}`;\n\n  if (loadError) {\n    const node: NavModelItem = {\n      text: loadError,\n      subTitle: 'Data Source Error',\n      icon: 'exclamation-triangle',\n    };\n\n    return {\n      node: node,\n      main: node,\n    };\n  }\n\n  if (loading || !plugin) {\n    return getNavModel(navIndex, navIndexId, getDataSourceLoadingNav('settings'));\n  }\n\n  return getNavModel(navIndex, navIndexId, getDataSourceNav(buildNavModel(dataSource, plugin), pageId || 'settings'));\n};\n\nexport const useDataSourceRights = (uid: string): DataSourceRights => {\n  const dataSource = useDataSource(uid);\n  const readOnly = dataSource.readOnly === true;\n  const hasWriteRights = contextSrv.hasPermissionInMetadata(AccessControlAction.DataSourcesWrite, dataSource);\n  const hasDeleteRights = contextSrv.hasPermissionInMetadata(AccessControlAction.DataSourcesDelete, dataSource);\n\n  return {\n    readOnly,\n    hasWriteRights,\n    hasDeleteRights,\n  };\n};\n\nexport const useDataSourcesRoutes = () => {\n  return useContext(DataSourcesRoutesContext);\n};\n"],"names":["DashboardsTable","dashboards","onImport","onRemove","buttonText","dashboard","index","DataSourceDashboards","uid","dispatch","dataSource","s","isLoading","onImportDashboard","overwrite","onRemoveDashboard","DataSourceDashboardsView","DataSourceDashboardsPage","props","nav","DataSourcesRoutesContext","useInitDataSourceSettings","state","useTestDataSource","dataSourcesRoutes","useDataSourcesRoutes","useLoadDataSources","dataSources","useLoadDataSource","useLoadDataSourcePlugins","useAddDatasource","plugin","useUpdateDatasource","useDeleteLoadedDataSource","name","useDataSource","useDataSourceExploreUrl","useDataSourceMeta","pluginType","useDataSourceSettings","useDataSourceSettingsNav","dataSourceId","pageId","loadError","loading","navIndex","navIndexId","node","useDataSourceRights","readOnly","hasWriteRights","hasDeleteRights"],"sourceRoot":""}