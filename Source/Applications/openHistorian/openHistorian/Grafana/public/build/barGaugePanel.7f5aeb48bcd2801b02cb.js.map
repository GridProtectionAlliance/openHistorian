{"version":3,"file":"barGaugePanel.7f5aeb48bcd2801b02cb.js","mappings":"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","sources":["webpack://grafana/./public/app/plugins/panel/bargauge/BarGaugeMigrations.ts","webpack://grafana/./public/app/plugins/panel/bargauge/suggestions.ts","webpack://grafana/./public/app/plugins/panel/bargauge/module.tsx"],"sourcesContent":["import { PanelModel } from '@grafana/data';\nimport { sharedSingleStatMigrationHandler } from '@grafana/ui';\n\nimport { Options } from './panelcfg.gen';\n\nexport const barGaugePanelMigrationHandler = (panel: PanelModel<Options>): Partial<Options> => {\n  return sharedSingleStatMigrationHandler(panel);\n};\n","import { VisualizationSuggestionsBuilder, VizOrientation } from '@grafana/data';\nimport { BarGaugeDisplayMode } from '@grafana/ui';\nimport { SuggestionName } from 'app/types/suggestions';\n\nimport { Options } from './panelcfg.gen';\n\nexport class BarGaugeSuggestionsSupplier {\n  getSuggestionsForData(builder: VisualizationSuggestionsBuilder) {\n    const { dataSummary } = builder;\n\n    if (!dataSummary.hasData || !dataSummary.hasNumberField) {\n      return;\n    }\n\n    const list = builder.getListAppender<Options, {}>({\n      name: '',\n      pluginId: 'bargauge',\n      options: {},\n      fieldConfig: {\n        defaults: {\n          custom: {},\n        },\n        overrides: [],\n      },\n    });\n\n    // This is probably not a good option for many numeric fields\n    if (dataSummary.numberFieldCount > 50) {\n      return;\n    }\n\n    // To use show individual row values we also need a string field to give each value a name\n    if (dataSummary.hasStringField && dataSummary.frameCount === 1 && dataSummary.rowCountTotal < 30) {\n      list.append({\n        name: SuggestionName.BarGaugeBasic,\n        options: {\n          reduceOptions: {\n            values: true,\n            calcs: [],\n          },\n          displayMode: BarGaugeDisplayMode.Basic,\n          orientation: VizOrientation.Horizontal,\n        },\n        fieldConfig: {\n          defaults: {\n            color: {\n              mode: 'continuous-GrYlRd',\n            },\n          },\n          overrides: [],\n        },\n      });\n\n      list.append({\n        name: SuggestionName.BarGaugeLCD,\n        options: {\n          reduceOptions: {\n            values: true,\n            calcs: [],\n          },\n          displayMode: BarGaugeDisplayMode.Lcd,\n          orientation: VizOrientation.Horizontal,\n        },\n        fieldConfig: {\n          defaults: {\n            color: {\n              mode: 'continuous-GrYlRd',\n            },\n          },\n          overrides: [],\n        },\n      });\n    } else {\n      list.append({\n        name: SuggestionName.BarGaugeBasic,\n        options: {\n          displayMode: BarGaugeDisplayMode.Basic,\n          orientation: VizOrientation.Horizontal,\n          reduceOptions: {\n            values: false,\n            calcs: ['lastNotNull'],\n          },\n        },\n        fieldConfig: {\n          defaults: {\n            color: {\n              mode: 'continuous-GrYlRd',\n            },\n          },\n          overrides: [],\n        },\n      });\n\n      list.append({\n        name: SuggestionName.BarGaugeLCD,\n        options: {\n          displayMode: BarGaugeDisplayMode.Lcd,\n          orientation: VizOrientation.Horizontal,\n          reduceOptions: {\n            values: false,\n            calcs: ['lastNotNull'],\n          },\n        },\n        fieldConfig: {\n          defaults: {\n            color: {\n              mode: 'continuous-GrYlRd',\n            },\n          },\n          overrides: [],\n        },\n      });\n    }\n  }\n}\n","import { PanelPlugin, VizOrientation } from '@grafana/data';\nimport { BarGaugeDisplayMode, BarGaugeNamePlacement, BarGaugeSizing, BarGaugeValueMode } from '@grafana/schema';\nimport { commonOptionsBuilder, sharedSingleStatPanelChangedHandler } from '@grafana/ui';\n\nimport { addOrientationOption, addStandardDataReduceOptions } from '../stat/common';\n\nimport { barGaugePanelMigrationHandler } from './BarGaugeMigrations';\nimport { BarGaugePanel } from './BarGaugePanel';\nimport { Options, defaultOptions } from './panelcfg.gen';\nimport { BarGaugeSuggestionsSupplier } from './suggestions';\n\nexport const plugin = new PanelPlugin<Options>(BarGaugePanel)\n  .useFieldConfig()\n  .setPanelOptions((builder) => {\n    addStandardDataReduceOptions(builder);\n    addOrientationOption(builder);\n    commonOptionsBuilder.addLegendOptions(builder, true, false);\n    commonOptionsBuilder.addTextSizeOptions(builder);\n\n    builder\n      .addRadio({\n        path: 'displayMode',\n        name: 'Display mode',\n        settings: {\n          options: [\n            { value: BarGaugeDisplayMode.Gradient, label: 'Gradient' },\n            { value: BarGaugeDisplayMode.Lcd, label: 'Retro LCD' },\n            { value: BarGaugeDisplayMode.Basic, label: 'Basic' },\n          ],\n        },\n        defaultValue: defaultOptions.displayMode,\n      })\n      .addRadio({\n        path: 'valueMode',\n        name: 'Value display',\n        settings: {\n          options: [\n            { value: BarGaugeValueMode.Color, label: 'Value color' },\n            { value: BarGaugeValueMode.Text, label: 'Text color' },\n            { value: BarGaugeValueMode.Hidden, label: 'Hidden' },\n          ],\n        },\n        defaultValue: defaultOptions.valueMode,\n      })\n      .addRadio({\n        path: 'namePlacement',\n        name: 'Name placement',\n        settings: {\n          options: [\n            { value: BarGaugeNamePlacement.Auto, label: 'Auto' },\n            { value: BarGaugeNamePlacement.Top, label: 'Top' },\n            { value: BarGaugeNamePlacement.Left, label: 'Left' },\n            { value: BarGaugeNamePlacement.Hidden, label: 'Hidden' },\n          ],\n        },\n        defaultValue: defaultOptions.namePlacement,\n        showIf: (options) => options.orientation !== VizOrientation.Vertical,\n      })\n      .addRadio({\n        path: 'namePlacement',\n        name: 'Name placement',\n        settings: {\n          options: [\n            { value: BarGaugeNamePlacement.Auto, label: 'Auto' },\n            { value: BarGaugeNamePlacement.Hidden, label: 'Hidden' },\n          ],\n        },\n        defaultValue: defaultOptions.namePlacement,\n        showIf: (options) => options.orientation === VizOrientation.Vertical,\n      })\n      .addBooleanSwitch({\n        path: 'showUnfilled',\n        name: 'Show unfilled area',\n        description: 'When enabled renders the unfilled region as gray',\n        defaultValue: defaultOptions.showUnfilled,\n        showIf: (options) => options.displayMode !== 'lcd',\n      })\n      .addRadio({\n        path: 'sizing',\n        name: 'Bar size',\n        settings: {\n          options: [\n            { value: BarGaugeSizing.Auto, label: 'Auto' },\n            { value: BarGaugeSizing.Manual, label: 'Manual' },\n          ],\n        },\n        defaultValue: defaultOptions.sizing,\n      })\n      .addSliderInput({\n        path: 'minVizWidth',\n        name: 'Min width',\n        description: 'Minimum column width (vertical orientation)',\n        defaultValue: defaultOptions.minVizWidth,\n        settings: {\n          min: 0,\n          max: 300,\n          step: 1,\n        },\n        showIf: (options) =>\n          options.sizing === BarGaugeSizing.Manual &&\n          (options.orientation === VizOrientation.Auto || options.orientation === VizOrientation.Vertical),\n      })\n      .addSliderInput({\n        path: 'minVizHeight',\n        name: 'Min height',\n        description: 'Minimum row height (horizontal orientation)',\n        defaultValue: defaultOptions.minVizHeight,\n        settings: {\n          min: 0,\n          max: 300,\n          step: 1,\n        },\n        showIf: (options) =>\n          options.sizing === BarGaugeSizing.Manual &&\n          (options.orientation === VizOrientation.Auto || options.orientation === VizOrientation.Horizontal),\n      })\n      .addSliderInput({\n        path: 'maxVizHeight',\n        name: 'Max height',\n        description: 'Maximum row height (horizontal orientation)',\n        defaultValue: defaultOptions.maxVizHeight,\n        settings: {\n          min: 0,\n          max: 300,\n          step: 1,\n        },\n        showIf: (options) =>\n          options.sizing === BarGaugeSizing.Manual &&\n          (options.orientation === VizOrientation.Auto || options.orientation === VizOrientation.Horizontal),\n      });\n  })\n  .setPanelChangeHandler(sharedSingleStatPanelChangedHandler)\n  .setMigrationHandler(barGaugePanelMigrationHandler)\n  .setSuggestionsSupplier(new BarGaugeSuggestionsSupplier());\n"],"names":["barGaugePanelMigrationHandler","panel","BarGaugeSuggestionsSupplier","builder","dataSummary","list","PanelPlugin","BarGaugePanel","options"],"sourceRoot":""}