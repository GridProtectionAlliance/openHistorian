{"version":3,"file":"OrgDetailsPage.f3a8f66389aab2e8fb7a.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/SharedPreferences/SharedPreferences.tsx","webpack://grafana/./public/app/features/org/OrgProfile.tsx","webpack://grafana/./public/app/features/org/OrgDetailsPage.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\n\nimport { FeatureState, SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { config, reportInteraction } from '@grafana/runtime';\nimport { Preferences as UserPreferencesDTO } from '@grafana/schema/src/raw/preferences/x/preferences_types.gen';\nimport {\n  Button,\n  Field,\n  FieldSet,\n  Form,\n  Label,\n  RadioButtonGroup,\n  Select,\n  stylesFactory,\n  TimeZonePicker,\n  WeekStartPicker,\n  FeatureBadge,\n} from '@grafana/ui';\nimport { DashboardPicker } from 'app/core/components/Select/DashboardPicker';\nimport { t, Trans } from 'app/core/internationalization';\nimport { LANGUAGES } from 'app/core/internationalization/constants';\nimport { PreferencesService } from 'app/core/services/PreferencesService';\n\nexport interface Props {\n  resourceUri: string;\n  disabled?: boolean;\n  preferenceType: 'org' | 'team' | 'user';\n  onConfirm?: () => Promise<boolean>;\n}\n\nexport type State = UserPreferencesDTO;\n\nfunction getLanguageOptions(): Array<SelectableValue<string>> {\n  const languageOptions = LANGUAGES.map((v) => ({\n    value: v.code,\n    label: v.name,\n  }));\n\n  const options = [\n    {\n      value: '',\n      label: t('common.locale.default', 'Default'),\n    },\n    ...languageOptions,\n  ];\n\n  return options;\n}\n\nconst i18nFlag = Boolean(config.featureToggles.internationalization);\n\nexport class SharedPreferences extends PureComponent<Props, State> {\n  service: PreferencesService;\n  themeOptions: SelectableValue[];\n\n  constructor(props: Props) {\n    super(props);\n\n    this.service = new PreferencesService(props.resourceUri);\n    this.state = {\n      theme: '',\n      timezone: '',\n      weekStart: '',\n      language: '',\n      queryHistory: { homeTab: '' },\n    };\n\n    this.themeOptions = [\n      { value: '', label: t('shared-preferences.theme.default-label', 'Default') },\n      { value: 'dark', label: t('shared-preferences.theme.dark-label', 'Dark') },\n      { value: 'light', label: t('shared-preferences.theme.light-label', 'Light') },\n      { value: 'system', label: t('shared-preferences.theme.system-label', 'System') },\n    ];\n  }\n\n  async componentDidMount() {\n    const prefs = await this.service.load();\n\n    this.setState({\n      homeDashboardUID: prefs.homeDashboardUID,\n      theme: prefs.theme,\n      timezone: prefs.timezone,\n      weekStart: prefs.weekStart,\n      language: prefs.language,\n      queryHistory: prefs.queryHistory,\n    });\n  }\n\n  onSubmitForm = async () => {\n    const confirmationResult = this.props.onConfirm ? await this.props.onConfirm() : true;\n\n    if (confirmationResult) {\n      const { homeDashboardUID, theme, timezone, weekStart, language, queryHistory } = this.state;\n      await this.service.update({ homeDashboardUID, theme, timezone, weekStart, language, queryHistory });\n      window.location.reload();\n    }\n  };\n\n  onThemeChanged = (value: string) => {\n    this.setState({ theme: value });\n  };\n\n  onTimeZoneChanged = (timezone?: string) => {\n    if (!timezone) {\n      return;\n    }\n    this.setState({ timezone: timezone });\n  };\n\n  onWeekStartChanged = (weekStart: string) => {\n    this.setState({ weekStart: weekStart });\n  };\n\n  onHomeDashboardChanged = (dashboardUID: string) => {\n    this.setState({ homeDashboardUID: dashboardUID });\n  };\n\n  onLanguageChanged = (language: string) => {\n    this.setState({ language });\n\n    reportInteraction('grafana_preferences_language_changed', {\n      toLanguage: language,\n      preferenceType: this.props.preferenceType,\n    });\n  };\n\n  render() {\n    const { theme, timezone, weekStart, homeDashboardUID, language } = this.state;\n    const { disabled } = this.props;\n    const styles = getStyles();\n    const languages = getLanguageOptions();\n    let currentThemeOption = this.themeOptions[0].value;\n    if (theme?.length) {\n      currentThemeOption = this.themeOptions.find((item) => item.value === theme)?.value;\n    }\n\n    return (\n      <Form onSubmit={this.onSubmitForm}>\n        {() => {\n          return (\n            <FieldSet label={<Trans i18nKey=\"shared-preferences.title\">Preferences</Trans>} disabled={disabled}>\n              <Field label={t('shared-preferences.fields.theme-label', 'UI Theme')}>\n                <RadioButtonGroup\n                  options={this.themeOptions}\n                  value={currentThemeOption}\n                  onChange={this.onThemeChanged}\n                />\n              </Field>\n\n              <Field\n                label={\n                  <Label htmlFor=\"home-dashboard-select\">\n                    <span className={styles.labelText}>\n                      <Trans i18nKey=\"shared-preferences.fields.home-dashboard-label\">Home Dashboard</Trans>\n                    </span>\n                  </Label>\n                }\n                data-testid=\"User preferences home dashboard drop down\"\n              >\n                <DashboardPicker\n                  value={homeDashboardUID}\n                  onChange={(v) => this.onHomeDashboardChanged(v?.uid ?? '')}\n                  defaultOptions={true}\n                  isClearable={true}\n                  placeholder={t('shared-preferences.fields.home-dashboard-placeholder', 'Default dashboard')}\n                  inputId=\"home-dashboard-select\"\n                />\n              </Field>\n\n              <Field\n                label={t('shared-dashboard.fields.timezone-label', 'Timezone')}\n                data-testid={selectors.components.TimeZonePicker.containerV2}\n              >\n                <TimeZonePicker\n                  includeInternal={true}\n                  value={timezone}\n                  onChange={this.onTimeZoneChanged}\n                  inputId=\"shared-preferences-timezone-picker\"\n                />\n              </Field>\n\n              <Field\n                label={t('shared-preferences.fields.week-start-label', 'Week start')}\n                data-testid={selectors.components.WeekStartPicker.containerV2}\n              >\n                <WeekStartPicker\n                  value={weekStart || ''}\n                  onChange={this.onWeekStartChanged}\n                  inputId={'shared-preferences-week-start-picker'}\n                />\n              </Field>\n\n              {i18nFlag ? (\n                <Field\n                  label={\n                    <Label htmlFor=\"locale-select\">\n                      <span className={styles.labelText}>\n                        <Trans i18nKey=\"shared-preferences.fields.locale-label\">Language</Trans>\n                      </span>\n                      <FeatureBadge featureState={FeatureState.beta} />\n                    </Label>\n                  }\n                  data-testid=\"User preferences language drop down\"\n                >\n                  <Select\n                    value={languages.find((lang) => lang.value === language)}\n                    onChange={(lang: SelectableValue<string>) => this.onLanguageChanged(lang.value ?? '')}\n                    options={languages}\n                    placeholder={t('shared-preferences.fields.locale-placeholder', 'Choose language')}\n                    inputId=\"locale-select\"\n                  />\n                </Field>\n              ) : null}\n\n              <div className=\"gf-form-button-row\">\n                <Button\n                  type=\"submit\"\n                  variant=\"primary\"\n                  data-testid={selectors.components.UserProfile.preferencesSaveButton}\n                >\n                  <Trans i18nKey=\"common.save\">Save</Trans>\n                </Button>\n              </div>\n            </FieldSet>\n          );\n        }}\n      </Form>\n    );\n  }\n}\n\nexport default SharedPreferences;\n\nconst getStyles = stylesFactory(() => {\n  return {\n    labelText: css`\n      margin-right: 6px;\n    `,\n  };\n});\n","import React from 'react';\n\nimport { Input, Field, FieldSet, Button, Form } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction } from 'app/types';\n\nexport interface Props {\n  orgName: string;\n  onSubmit: (orgName: string) => void;\n}\n\ninterface FormDTO {\n  orgName: string;\n}\n\nconst OrgProfile = ({ onSubmit, orgName }: Props) => {\n  const canWriteOrg = contextSrv.hasPermission(AccessControlAction.OrgsWrite);\n\n  return (\n    <Form defaultValues={{ orgName }} onSubmit={({ orgName }: FormDTO) => onSubmit(orgName)}>\n      {({ register }) => (\n        <FieldSet label=\"Organization profile\" disabled={!canWriteOrg}>\n          <Field label=\"Organization name\">\n            <Input id=\"org-name-input\" type=\"text\" {...register('orgName', { required: true })} />\n          </Field>\n\n          <Button type=\"submit\">Update organization name</Button>\n        </FieldSet>\n      )}\n    </Form>\n  );\n};\n\nexport default OrgProfile;\n","import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\n\nimport { NavModel } from '@grafana/data';\nimport { VerticalGroup } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport SharedPreferences from 'app/core/components/SharedPreferences/SharedPreferences';\nimport { appEvents, contextSrv } from 'app/core/core';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { AccessControlAction, Organization, StoreState } from 'app/types';\nimport { ShowConfirmModalEvent } from 'app/types/events';\n\nimport OrgProfile from './OrgProfile';\nimport { loadOrganization, updateOrganization } from './state/actions';\nimport { setOrganizationName } from './state/reducers';\n\nexport interface Props {\n  navModel: NavModel;\n  organization: Organization;\n  loadOrganization: typeof loadOrganization;\n  setOrganizationName: typeof setOrganizationName;\n  updateOrganization: typeof updateOrganization;\n}\n\nexport class OrgDetailsPage extends PureComponent<Props> {\n  async componentDidMount() {\n    await this.props.loadOrganization();\n  }\n\n  onUpdateOrganization = (orgName: string) => {\n    this.props.setOrganizationName(orgName);\n    this.props.updateOrganization();\n  };\n\n  handleConfirm = () => {\n    return new Promise<boolean>((resolve) => {\n      appEvents.publish(\n        new ShowConfirmModalEvent({\n          title: 'Confirm preferences update',\n          text: 'This will update the preferences for the whole organization. Are you sure you want to update the preferences?',\n          yesText: 'Save',\n          yesButtonVariant: 'primary',\n          onConfirm: async () => resolve(true),\n          onDismiss: async () => resolve(false),\n        })\n      );\n    });\n  };\n\n  render() {\n    const { navModel, organization } = this.props;\n    const isLoading = Object.keys(organization).length === 0;\n    const canReadOrg = contextSrv.hasPermission(AccessControlAction.OrgsRead);\n    const canReadPreferences = contextSrv.hasPermission(AccessControlAction.OrgsPreferencesRead);\n    const canWritePreferences = contextSrv.hasPermission(AccessControlAction.OrgsPreferencesWrite);\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={isLoading}>\n          {!isLoading && (\n            <VerticalGroup spacing=\"lg\">\n              {canReadOrg && <OrgProfile onSubmit={this.onUpdateOrganization} orgName={organization.name} />}\n              {canReadPreferences && (\n                <SharedPreferences\n                  resourceUri=\"org\"\n                  disabled={!canWritePreferences}\n                  preferenceType=\"org\"\n                  onConfirm={this.handleConfirm}\n                />\n              )}\n            </VerticalGroup>\n          )}\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, 'org-settings'),\n    organization: state.organization.organization,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadOrganization,\n  setOrganizationName,\n  updateOrganization,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OrgDetailsPage);\n"],"names":["getLanguageOptions","languageOptions","v","i18nFlag","SharedPreferences","props","homeDashboardUID","theme","timezone","weekStart","language","queryHistory","value","dashboardUID","prefs","disabled","styles","getStyles","languages","currentThemeOption","item","lang","onSubmit","orgName","canWriteOrg","Form","register","FieldSet","Field","Input","Button","OrgDetailsPage","resolve","navModel","organization","isLoading","canReadOrg","canReadPreferences","canWritePreferences","Page","mapStateToProps","state","mapDispatchToProps"],"sourceRoot":""}