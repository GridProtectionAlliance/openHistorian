{"version":3,"file":"3594.dc4cfbc076b258a70da9.js","mappings":"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","sources":["webpack://grafana/./public/app/core/hooks/useCleanup.ts","webpack://grafana/./public/app/features/alerting/unified/components/contact-points/templates/EditorColumnHeader.tsx","webpack://grafana/./node_modules/date-fns/subDays.mjs","webpack://grafana/./node_modules/date-fns/addMinutes.mjs","webpack://grafana/./node_modules/date-fns/addHours.mjs","webpack://grafana/./node_modules/date-fns/subHours.mjs","webpack://grafana/./public/app/features/alerting/unified/components/receivers/AlertInstanceModalSelector.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/TemplateData.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/TemplateDataDocs.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/GenerateAlertDataModal.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/PayloadEditor.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/TemplateForm.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/TemplatePreview.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/usePreviewTemplate.ts","webpack://grafana/./public/app/features/alerting/unified/components/rules/state-history/common.ts"],"sourcesContent":["import { useEffect, useRef } from 'react';\n\nimport { useDispatch } from 'app/types';\n\nimport { cleanUpAction, CleanUpAction } from '../actions/cleanUp';\n\nexport function useCleanup(cleanupAction: CleanUpAction) {\n  const dispatch = useDispatch();\n  //bit of a hack to unburden user from having to wrap stateSelcetor in a useCallback. Otherwise cleanup would happen on every render\n  const selectorRef = useRef(cleanupAction);\n  selectorRef.current = cleanupAction;\n  useEffect(() => {\n    return () => {\n      dispatch(cleanUpAction({ cleanupAction: selectorRef.current }));\n    };\n  }, [dispatch]);\n}\n","import { css } from '@emotion/css';\nimport * as React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Label, Stack, useStyles2 } from '@grafana/ui';\n\nexport function EditorColumnHeader({ label, actions }: { label: string; actions?: React.ReactNode }) {\n  const styles = useStyles2(editorColumnStyles);\n\n  return (\n    <div className={styles.container}>\n      <Label className={styles.label}>{label}</Label>\n      <Stack direction=\"row\" gap={1}>\n        {actions}\n      </Stack>\n    </div>\n  );\n}\n\nexport const editorColumnStyles = (theme: GrafanaTheme2) => ({\n  container: css({\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: theme.spacing(1, 2),\n    backgroundColor: theme.colors.background.secondary,\n    borderBottom: `1px solid ${theme.colors.border.medium}`,\n  }),\n  label: css({\n    margin: 0,\n  }),\n});\n","import { addDays } from \"./addDays.mjs\";\n\n/**\n * @name subDays\n * @category Day Helpers\n * @summary Subtract the specified number of days from the given date.\n *\n * @description\n * Subtract the specified number of days from the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of days to be subtracted.\n *\n * @returns The new date with the days subtracted\n *\n * @example\n * // Subtract 10 days from 1 September 2014:\n * const result = subDays(new Date(2014, 8, 1), 10)\n * //=> Fri Aug 22 2014 00:00:00\n */\nexport function subDays(date, amount) {\n  return addDays(date, -amount);\n}\n\n// Fallback for modularized imports:\nexport default subDays;\n","import { addMilliseconds } from \"./addMilliseconds.mjs\";\nimport { millisecondsInMinute } from \"./constants.mjs\";\n\n/**\n * @name addMinutes\n * @category Minute Helpers\n * @summary Add the specified number of minutes to the given date.\n *\n * @description\n * Add the specified number of minutes to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of minutes to be added.\n *\n * @returns The new date with the minutes added\n *\n * @example\n * // Add 30 minutes to 10 July 2014 12:00:00:\n * const result = addMinutes(new Date(2014, 6, 10, 12, 0), 30)\n * //=> Thu Jul 10 2014 12:30:00\n */\nexport function addMinutes(date, amount) {\n  return addMilliseconds(date, amount * millisecondsInMinute);\n}\n\n// Fallback for modularized imports:\nexport default addMinutes;\n","import { addMilliseconds } from \"./addMilliseconds.mjs\";\nimport { millisecondsInHour } from \"./constants.mjs\";\n\n/**\n * @name addHours\n * @category Hour Helpers\n * @summary Add the specified number of hours to the given date.\n *\n * @description\n * Add the specified number of hours to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of hours to be added.\n *\n * @returns The new date with the hours added\n *\n * @example\n * // Add 2 hours to 10 July 2014 23:00:00:\n * const result = addHours(new Date(2014, 6, 10, 23, 0), 2)\n * //=> Fri Jul 11 2014 01:00:00\n */\nexport function addHours(date, amount) {\n  return addMilliseconds(date, amount * millisecondsInHour);\n}\n\n// Fallback for modularized imports:\nexport default addHours;\n","import { addHours } from \"./addHours.mjs\";\n\n/**\n * @name subHours\n * @category Hour Helpers\n * @summary Subtract the specified number of hours from the given date.\n *\n * @description\n * Subtract the specified number of hours from the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of hours to be subtracted.\n *\n * @returns The new date with the hours subtracted\n *\n * @example\n * // Subtract 2 hours from 11 July 2014 01:00:00:\n * const result = subHours(new Date(2014, 6, 11, 1, 0), 2)\n * //=> Thu Jul 10 2014 23:00:00\n */\nexport function subHours(date, amount) {\n  return addHours(date, -amount);\n}\n\n// Fallback for modularized imports:\nexport default subHours;\n","import { css, cx } from '@emotion/css';\nimport { CSSProperties, useCallback, useMemo, useState } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { FixedSizeList } from 'react-window';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport {\n  Button,\n  clearButtonStyles,\n  FilterInput,\n  LoadingPlaceholder,\n  Modal,\n  Tooltip,\n  useStyles2,\n  Icon,\n  Tag,\n} from '@grafana/ui';\nimport { AlertmanagerAlert, TestTemplateAlert } from 'app/plugins/datasource/alertmanager/types';\n\nimport { alertmanagerApi } from '../../api/alertmanagerApi';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { arrayLabelsToObject, labelsToTags, objectLabelsToArray } from '../../utils/labels';\nimport { extractCommonLabels, omitLabels } from '../rules/state-history/common';\n\nexport function AlertInstanceModalSelector({\n  onSelect,\n  isOpen,\n  onClose,\n}: {\n  onSelect: (alerts: TestTemplateAlert[]) => void;\n  isOpen: boolean;\n  onClose: () => void;\n}) {\n  const styles = useStyles2(getStyles);\n\n  const [selectedRule, setSelectedRule] = useState<string>();\n  const [selectedInstances, setSelectedInstances] = useState<AlertmanagerAlert[] | null>(null);\n  const { useGetAlertmanagerAlertsQuery } = alertmanagerApi;\n\n  const {\n    currentData: result = [],\n    isFetching: loading,\n    isError: error,\n  } = useGetAlertmanagerAlertsQuery({\n    amSourceName: GRAFANA_RULES_SOURCE_NAME,\n    filter: {\n      inhibited: true,\n      silenced: true,\n      active: true,\n    },\n  });\n\n  const [ruleFilter, setRuleFilter] = useState('');\n\n  const rulesWithInstances: Record<string, AlertmanagerAlert[]> = useMemo(() => {\n    const rules: Record<string, AlertmanagerAlert[]> = {};\n    if (!loading && result) {\n      result.forEach((instance) => {\n        if (!rules[instance.labels.alertname]) {\n          rules[instance.labels.alertname] = [];\n        }\n        rules[instance.labels.alertname].push(instance);\n      });\n    }\n    return rules;\n  }, [loading, result]);\n\n  const handleRuleChange = useCallback((rule: string) => {\n    setSelectedRule(rule);\n    setSelectedInstances(null);\n  }, []);\n\n  const filteredRules: Record<string, AlertmanagerAlert[]> = useMemo(() => {\n    const filteredRules = Object.keys(rulesWithInstances).filter((rule) =>\n      rule.toLowerCase().includes(ruleFilter.toLowerCase())\n    );\n    const filteredRulesObject: Record<string, AlertmanagerAlert[]> = {};\n    filteredRules.forEach((rule) => {\n      filteredRulesObject[rule] = rulesWithInstances[rule];\n    });\n    return filteredRulesObject;\n  }, [rulesWithInstances, ruleFilter]);\n\n  if (error) {\n    return null;\n  }\n\n  const filteredRulesKeys = Object.keys(filteredRules || []);\n\n  const RuleRow = ({ index, style }: { index: number; style?: CSSProperties }) => {\n    if (!filteredRules) {\n      return null;\n    }\n    const ruleName = filteredRulesKeys[index];\n\n    const isSelected = ruleName === selectedRule;\n\n    return (\n      <button\n        type=\"button\"\n        title={ruleName}\n        style={style}\n        className={cx(styles.rowButton, { [styles.rowOdd]: index % 2 === 1, [styles.rowSelected]: isSelected })}\n        onClick={() => handleRuleChange(ruleName)}\n      >\n        <div className={cx(styles.ruleTitle, styles.rowButtonTitle)}>{ruleName}</div>\n        <div className={styles.alertFolder}>\n          <>\n            <Icon name=\"folder\" /> {filteredRules[ruleName][0].labels.grafana_folder ?? ''}\n          </>\n        </div>\n      </button>\n    );\n  };\n\n  const getAlertUniqueLabels = (allAlerts: AlertmanagerAlert[], currentAlert: AlertmanagerAlert) => {\n    const allLabels = allAlerts.map((alert) => alert.labels);\n    const labelsAsArray = allLabels.map(objectLabelsToArray);\n\n    const ruleCommonLabels = extractCommonLabels(labelsAsArray);\n    const alertUniqueLabels = omitLabels(objectLabelsToArray(currentAlert.labels), ruleCommonLabels);\n\n    const tags = alertUniqueLabels.length\n      ? labelsToTags(arrayLabelsToObject(alertUniqueLabels))\n      : labelsToTags(currentAlert.labels);\n\n    return tags;\n  };\n\n  const InstanceRow = ({ index, style }: { index: number; style: CSSProperties }) => {\n    const alerts = useMemo(() => (selectedRule ? rulesWithInstances[selectedRule] : []), []);\n    const alert = alerts[index];\n    const isSelected = selectedInstances?.includes(alert);\n    const tags = useMemo(() => getAlertUniqueLabels(alerts, alert), [alerts, alert]);\n\n    const handleSelectInstances = () => {\n      if (isSelected && selectedInstances) {\n        setSelectedInstances(selectedInstances.filter((instance) => instance !== alert));\n        return;\n      }\n      setSelectedInstances([...(selectedInstances || []), alert]);\n    };\n\n    return (\n      <button\n        type=\"button\"\n        style={style}\n        className={cx(styles.rowButton, styles.instanceButton, {\n          [styles.rowOdd]: index % 2 === 1,\n          [styles.rowSelected]: isSelected,\n        })}\n        onClick={handleSelectInstances}\n      >\n        <div className={styles.rowButtonTitle} title={alert.labels.alertname}>\n          <Tooltip placement=\"bottom\" content={<pre>{JSON.stringify(alert, null, 2)}</pre>} theme={'info'}>\n            <div>\n              {tags.map((tag, index) => (\n                <Tag key={index} name={tag} className={styles.tag} />\n              ))}\n            </div>\n          </Tooltip>\n        </div>\n      </button>\n    );\n  };\n\n  const handleConfirm = () => {\n    const instances: TestTemplateAlert[] =\n      selectedInstances?.map((instance: AlertmanagerAlert) => {\n        const alert: TestTemplateAlert = {\n          status: 'firing',\n          annotations: instance.annotations,\n          labels: instance.labels,\n          startsAt: instance.startsAt,\n          endsAt: instance.endsAt,\n          generatorURL: instance.generatorURL,\n          fingerprint: instance.fingerprint,\n        };\n        return alert;\n      }) || [];\n\n    onSelect(instances);\n    resetState();\n  };\n\n  const resetState = () => {\n    setSelectedRule(undefined);\n    setSelectedInstances(null);\n    setRuleFilter('');\n    handleSearchRules('');\n  };\n\n  const onDismiss = () => {\n    resetState();\n    onClose();\n  };\n\n  const handleSearchRules = (filter: string) => {\n    setRuleFilter(filter);\n  };\n\n  return (\n    <div>\n      <Modal\n        title=\"Select alert instances\"\n        className={styles.modal}\n        closeOnEscape\n        isOpen={isOpen}\n        onDismiss={onDismiss}\n        contentClassName={styles.modalContent}\n      >\n        <div className={styles.container}>\n          <FilterInput\n            value={ruleFilter}\n            onChange={handleSearchRules}\n            title=\"Search alert rule\"\n            placeholder=\"Search alert rule\"\n            autoFocus\n          />\n          <div>{(selectedRule && 'Select one or more instances from the list below') || ''}</div>\n\n          <div className={styles.column}>\n            {loading && <LoadingPlaceholder text=\"Loading rules...\" className={styles.loadingPlaceholder} />}\n\n            {!loading && (\n              <AutoSizer>\n                {({ height, width }) => (\n                  <FixedSizeList itemSize={50} height={height} width={width} itemCount={filteredRulesKeys.length}>\n                    {RuleRow}\n                  </FixedSizeList>\n                )}\n              </AutoSizer>\n            )}\n          </div>\n\n          <div className={styles.column}>\n            {!selectedRule && !loading && (\n              <div className={styles.selectedRulePlaceholder}>\n                <div>Select an alert rule to get a list of available firing instances</div>\n              </div>\n            )}\n            {loading && <LoadingPlaceholder text=\"Loading rule...\" className={styles.loadingPlaceholder} />}\n\n            {selectedRule && rulesWithInstances[selectedRule].length && !loading && (\n              <AutoSizer>\n                {({ width, height }) => (\n                  <FixedSizeList\n                    itemSize={32}\n                    height={height}\n                    width={width}\n                    itemCount={rulesWithInstances[selectedRule].length || 0}\n                  >\n                    {InstanceRow}\n                  </FixedSizeList>\n                )}\n              </AutoSizer>\n            )}\n          </div>\n        </div>\n        <Modal.ButtonRow>\n          <Button type=\"button\" variant=\"secondary\" onClick={onDismiss}>\n            Cancel\n          </Button>\n          <Button\n            type=\"button\"\n            variant=\"primary\"\n            disabled={!(selectedRule && selectedInstances)}\n            onClick={() => {\n              if (selectedRule && selectedInstances) {\n                handleConfirm();\n              }\n            }}\n          >\n            Add alert data to payload\n          </Button>\n        </Modal.ButtonRow>\n      </Modal>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  const clearButton = clearButtonStyles(theme);\n\n  return {\n    container: css({\n      display: 'grid',\n      gridTemplateColumns: '1fr 1.5fr',\n      gridTemplateRows: 'min-content auto',\n      gap: theme.spacing(2),\n      flex: 1,\n    }),\n\n    tag: css({\n      margin: '5px',\n    }),\n\n    column: css({\n      flex: '1 1 auto',\n    }),\n\n    alertLabels: css({\n      overflowX: 'auto',\n      height: '32px',\n    }),\n    ruleTitle: css({\n      height: '22px',\n      fontWeight: theme.typography.fontWeightBold,\n    }),\n    rowButton: css(clearButton, {\n      padding: theme.spacing(0.5),\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      textAlign: 'left',\n      whiteSpace: 'nowrap',\n      cursor: 'pointer',\n      border: '2px solid transparent',\n\n      '&:disabled': {\n        cursor: 'not-allowed',\n        color: theme.colors.text.disabled,\n      },\n    }),\n    rowButtonTitle: css({\n      overflowX: 'auto',\n    }),\n    rowSelected: css({\n      borderColor: theme.colors.primary.border,\n    }),\n    rowOdd: css({\n      backgroundColor: theme.colors.background.secondary,\n    }),\n    instanceButton: css({\n      display: 'flex',\n      gap: theme.spacing(1),\n      justifyContent: 'space-between',\n      alignItems: 'center',\n    }),\n    loadingPlaceholder: css({\n      height: '100%',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n    }),\n    selectedRulePlaceholder: css({\n      width: '100%',\n      height: '100%',\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      textAlign: 'center',\n      fontWeight: theme.typography.fontWeightBold,\n    }),\n    modal: css({\n      height: '100%',\n    }),\n    modalContent: css({\n      flex: 1,\n      display: 'flex',\n      flexDirection: 'column',\n    }),\n    modalAlert: css({\n      flexGrow: 0,\n    }),\n    warnIcon: css({\n      fill: theme.colors.warning.main,\n    }),\n    labels: css({\n      justifyContent: 'flex-start',\n    }),\n    alertFolder: css({\n      height: '20px',\n      fontSize: theme.typography.bodySmall.fontSize,\n      color: theme.colors.text.secondary,\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'flex-start',\n      columnGap: theme.spacing(1),\n      alignItems: 'center',\n    }),\n  };\n};\n","export interface TemplateDataItem {\n  name: string;\n  type: string;\n  notes: string;\n}\n\ninterface TemplateFunctionItem {\n  name: string;\n  args?: '[]string';\n  returns: 'KeyValue' | '[]string';\n  notes?: string;\n}\n\nexport const GlobalTemplateData: TemplateDataItem[] = [\n  {\n    name: 'Receiver',\n    type: 'string',\n    notes: 'Name of the contact point that the notification is being sent to.',\n  },\n  {\n    name: 'Status',\n    type: 'string',\n    notes: 'firing if at least one alert is firing, otherwise resolved',\n  },\n  {\n    name: 'Alerts',\n    type: '[]Alert',\n    notes: 'List of alert objects that are included in this notification.',\n  },\n  {\n    name: 'Alerts.Firing',\n    type: '[]Alert',\n    notes: 'List of firing alerts',\n  },\n  {\n    name: 'Alerts.Resolved',\n    type: '[]Alert',\n    notes: 'List of resolved alerts',\n  },\n  {\n    name: 'GroupLabels',\n    type: 'KeyValue',\n    notes: 'Labels these alerts were grouped by.',\n  },\n  {\n    name: 'CommonLabels',\n    type: 'KeyValue',\n    notes: 'Labels common to all the alerts included in this notification.',\n  },\n  {\n    name: 'CommonAnnotations',\n    type: 'KeyValue',\n    notes: 'Annotations common to all the alerts included in this notification.',\n  },\n  {\n    name: 'ExternalURL',\n    type: 'string',\n    notes: 'Back link to the Grafana that sent the notification.',\n  },\n];\n\nexport const AlertTemplatePreviewData: TemplateDataItem[] = [\n  {\n    name: 'labels',\n    type: 'Object{}',\n    notes: 'Set of labels attached to the alert.',\n  },\n  {\n    name: 'annotations',\n    type: 'Object{}',\n    notes: 'Set of annotations attached to the alert.',\n  },\n  {\n    name: 'startsAt',\n    type: 'string (ISO8601)',\n    notes: 'Time the alert started firing.',\n  },\n  {\n    name: 'endsAt',\n    type: 'string (ISO8601)',\n    notes: 'Time the alert ends firing.',\n  },\n];\n\nexport const AlertTemplateData: TemplateDataItem[] = [\n  {\n    name: 'Status',\n    type: 'string',\n    notes: 'firing or resolved.',\n  },\n  {\n    name: 'Labels',\n    type: 'KeyValue',\n    notes: 'Set of labels attached to the alert.',\n  },\n  {\n    name: 'Annotations',\n    type: 'KeyValue',\n    notes: 'Set of annotations attached to the alert.',\n  },\n  {\n    name: 'Values',\n    type: 'KeyValue',\n    notes:\n      'The values of all instant queries, reduce and math expressions, and classic conditions for the alert. It does not contain time series data.',\n  },\n  {\n    name: 'StartsAt',\n    type: 'time.Time',\n    notes: 'Time the alert started firing.',\n  },\n  {\n    name: 'EndsAt',\n    type: 'time.Time',\n    notes:\n      'Only set if the end time of an alert is known. Otherwise set to a configurable timeout period from the time since the last alert was received.',\n  },\n  {\n    name: 'GeneratorURL',\n    type: 'string',\n    notes: 'A back link to Grafana or external Alertmanager.',\n  },\n  {\n    name: 'SilenceURL',\n    type: 'string',\n    notes: 'Link to Grafana silence for with labels for this alert pre-filled. Only for Grafana managed alerts.',\n  },\n  {\n    name: 'DashboardURL',\n    type: 'string',\n    notes: 'Link to Grafana dashboard, if alert rule belongs to one. Only for Grafana managed alerts.',\n  },\n  {\n    name: 'PanelURL',\n    type: 'string',\n    notes: 'Link to Grafana dashboard panel, if alert rule belongs to one. Only for Grafana managed alerts.',\n  },\n  {\n    name: 'Fingerprint',\n    type: 'string',\n    notes: 'Fingerprint that can be used to identify the alert.',\n  },\n  {\n    name: 'ValueString',\n    type: 'string',\n    notes: 'String that contains the labels and value of each reduced expression in the alert.',\n  },\n];\n\nexport const KeyValueTemplateFunctions: TemplateFunctionItem[] = [\n  {\n    name: 'SortedPairs',\n    returns: 'KeyValue',\n    notes: 'Returns sorted list of key & value string pairs',\n  },\n  {\n    name: 'Remove',\n    args: '[]string',\n    returns: 'KeyValue',\n    notes: 'Returns a copy of the Key/Value map without the given keys.',\n  },\n  {\n    name: 'Names',\n    returns: '[]string',\n    notes: 'List of label names',\n  },\n  {\n    name: 'Values',\n    returns: '[]string',\n    notes: 'List of label values',\n  },\n];\n\nexport const KeyValueCodeSnippet = `{\n  \"summary\": \"alert summary\",\n  \"description\": \"alert description\"\n}\n`;\n","import { css } from '@emotion/css';\nimport * as React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2, Stack } from '@grafana/ui';\n\nimport { PopupCard } from '../HoverCard';\n\nimport {\n  AlertTemplateData,\n  GlobalTemplateData,\n  KeyValueCodeSnippet,\n  KeyValueTemplateFunctions,\n  TemplateDataItem,\n} from './TemplateData';\n\nexport function TemplateDataDocs() {\n  const styles = useStyles2(getTemplateDataDocsStyles);\n\n  const AlertTemplateDataTable = (\n    <TemplateDataTable\n      caption={\n        <h4 className={styles.header}>\n          Alert template data <span>Available only when in the context of an Alert (e.g. inside .Alerts loop)</span>\n        </h4>\n      }\n      dataItems={AlertTemplateData}\n    />\n  );\n\n  return (\n    <Stack gap={2}>\n      <TemplateDataTable\n        caption={<h4 className={styles.header}>Template Data</h4>}\n        dataItems={GlobalTemplateData}\n        typeRenderer={(type) =>\n          type === '[]Alert' ? (\n            <PopupCard content={AlertTemplateDataTable}>\n              <div className={styles.interactiveType}>{type}</div>\n            </PopupCard>\n          ) : type === 'KeyValue' ? (\n            <PopupCard content={<KeyValueTemplateDataTable />}>\n              <div className={styles.interactiveType}>{type}</div>\n            </PopupCard>\n          ) : (\n            type\n          )\n        }\n      />\n    </Stack>\n  );\n}\n\nconst getTemplateDataDocsStyles = (theme: GrafanaTheme2) => ({\n  header: css({\n    color: theme.colors.text.primary,\n\n    span: {\n      color: theme.colors.text.secondary,\n      fontSize: theme.typography.bodySmall.fontSize,\n    },\n  }),\n  interactiveType: css({\n    color: theme.colors.text.link,\n  }),\n});\n\ninterface TemplateDataTableProps {\n  dataItems: TemplateDataItem[];\n  caption?: JSX.Element | string;\n  typeRenderer?: (type: TemplateDataItem['type']) => React.ReactNode;\n}\n\nexport function TemplateDataTable({ dataItems, caption, typeRenderer }: TemplateDataTableProps) {\n  const styles = useStyles2(getTemplateDataTableStyles);\n\n  return (\n    <table className={styles.table}>\n      {caption && <caption>{caption}</caption>}\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Type</th>\n          <th>Notes</th>\n        </tr>\n      </thead>\n      <tbody>\n        {dataItems.map(({ name, type, notes }, index) => (\n          <tr key={index}>\n            <td>{name}</td>\n            <td>{typeRenderer ? typeRenderer(type) : type}</td>\n            <td>{notes}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nfunction KeyValueTemplateDataTable() {\n  const tableStyles = useStyles2(getTemplateDataTableStyles);\n\n  return (\n    <div>\n      KeyValue is a set of key/value string pairs that represent labels and annotations.\n      <pre>\n        <code>{KeyValueCodeSnippet}</code>\n      </pre>\n      <table className={tableStyles.table}>\n        <caption>Key-value methods</caption>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Arguments</th>\n            <th>Returns</th>\n            <th>Notes</th>\n          </tr>\n        </thead>\n        <tbody>\n          {KeyValueTemplateFunctions.map(({ name, args, returns, notes }) => (\n            <tr key={name}>\n              <td>{name}</td>\n              <td>{args}</td>\n              <td>{returns}</td>\n              <td>{notes}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nconst getTemplateDataTableStyles = (theme: GrafanaTheme2) => ({\n  table: css({\n    borderCollapse: 'collapse',\n    width: '100%',\n\n    caption: {\n      captionSide: 'top',\n    },\n\n    'td, th': {\n      padding: theme.spacing(1, 1),\n    },\n\n    thead: {\n      fontWeight: theme.typography.fontWeightBold,\n    },\n\n    'tbody tr:nth-child(2n + 1)': {\n      backgroundColor: theme.colors.background.secondary,\n    },\n\n    'tbody td:nth-child(1)': {\n      fontWeight: theme.typography.fontWeightBold,\n    },\n\n    'tbody td:nth-child(2)': {\n      fontStyle: 'italic',\n    },\n  }),\n});\n","import { css } from '@emotion/css';\nimport { addDays, subDays } from 'date-fns';\nimport { uniqueId } from 'lodash';\nimport { useState } from 'react';\nimport { FormProvider, useForm } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Card, Modal, RadioButtonGroup, Stack, useStyles2 } from '@grafana/ui';\nimport { TestTemplateAlert } from 'app/plugins/datasource/alertmanager/types';\n\nimport { KeyValueField } from '../../../api/templateApi';\nimport AnnotationsStep from '../../rule-editor/AnnotationsStep';\nimport LabelsField from '../../rule-editor/labels/LabelsField';\n\ninterface Props {\n  isOpen: boolean;\n  onDismiss: () => void;\n  onAccept: (alerts: TestTemplateAlert[]) => void;\n}\n\ninterface FormFields {\n  annotations: KeyValueField[];\n  labels: KeyValueField[];\n  status: 'firing' | 'resolved';\n}\n\nconst defaultValues: FormFields = {\n  annotations: [{ key: '', value: '' }],\n  labels: [{ key: '', value: '' }],\n  status: 'firing',\n};\n\nexport const GenerateAlertDataModal = ({ isOpen, onDismiss, onAccept }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const [alerts, setAlerts] = useState<TestTemplateAlert[]>([]);\n\n  const formMethods = useForm<FormFields>({ defaultValues, mode: 'onBlur' });\n  const annotations = formMethods.watch('annotations');\n  const labels = formMethods.watch('labels');\n  const [status, setStatus] = useState<'firing' | 'resolved'>('firing');\n\n  const onAdd = () => {\n    const alert: TestTemplateAlert = {\n      annotations: annotations\n        .filter(({ key, value }) => !!key && !!value)\n        .reduce((acc, { key, value }) => {\n          return { ...acc, [key]: value };\n        }, {}),\n      labels: labels\n        .filter(({ key, value }) => !!key && !!value)\n        .reduce((acc, { key, value }) => {\n          return { ...acc, [key]: value };\n        }, {}),\n      startsAt: '2023-04-01T00:00:00Z',\n      endsAt: status === 'firing' ? addDays(new Date(), 1).toISOString() : subDays(new Date(), 1).toISOString(),\n      status,\n      fingerprint: uniqueId('fingerprint_'),\n    };\n    setAlerts((alerts) => [...alerts, alert]);\n    formMethods.reset();\n  };\n\n  const onSubmit = () => {\n    onAccept(alerts);\n    setAlerts([]);\n    formMethods.reset();\n    setStatus('firing');\n  };\n\n  const labelsOrAnnotationsAdded = () => {\n    const someLabels = labels.some((lb) => lb.key !== '' && lb.value !== '');\n    const someAnnotations = annotations.some((ann) => ann.key !== '' && ann.value !== '');\n    return someLabels || someAnnotations;\n  };\n\n  type AlertOption = {\n    label: string;\n    value: 'firing' | 'resolved';\n  };\n  const alertOptions: AlertOption[] = [\n    {\n      label: 'Firing',\n      value: 'firing',\n    },\n    { label: 'Resolved', value: 'resolved' },\n  ];\n\n  return (\n    <Modal onDismiss={onDismiss} isOpen={isOpen} title={'Add custom alerts'}>\n      <FormProvider {...formMethods}>\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            formMethods.reset();\n            setStatus('firing');\n          }}\n        >\n          <>\n            <Card>\n              <Stack direction=\"column\" gap={1}>\n                <div className={styles.section}>\n                  <AnnotationsStep />\n                </div>\n                <div className={styles.section}>\n                  <LabelsField />\n                </div>\n                <div className={styles.flexWrapper}>\n                  <RadioButtonGroup value={status} options={alertOptions} onChange={(value) => setStatus(value)} />\n                  <Button\n                    onClick={onAdd}\n                    className={styles.onAddButton}\n                    icon=\"plus-circle\"\n                    type=\"button\"\n                    variant=\"secondary\"\n                    disabled={!labelsOrAnnotationsAdded()}\n                  >\n                    Add alert data\n                  </Button>\n                </div>\n              </Stack>\n            </Card>\n          </>\n          <div className={styles.onSubmitWrapper}></div>\n          {alerts.length > 0 && (\n            <Stack direction=\"column\" gap={1}>\n              <h5> Review alert data to add to the payload:</h5>\n              <pre className={styles.result} data-testid=\"payloadJSON\">\n                {JSON.stringify(alerts, null, 2)}\n              </pre>\n            </Stack>\n          )}\n          <div className={styles.onSubmitWrapper}>\n            <Modal.ButtonRow>\n              <Button onClick={onSubmit} disabled={alerts.length === 0} className={styles.onSubmitButton}>\n                Add alert data to payload\n              </Button>\n            </Modal.ButtonRow>\n          </div>\n        </form>\n      </FormProvider>\n    </Modal>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  section: css({\n    marginBottom: theme.spacing(2),\n  }),\n  onAddButton: css({\n    flex: 'none',\n    width: 'fit-content',\n    paddingRight: theme.spacing(1),\n    marginLeft: 'auto',\n  }),\n  flexWrapper: css({\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  }),\n  onSubmitWrapper: css({\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'baseline',\n    justifyContent: 'flex-end',\n  }),\n  onSubmitButton: css({\n    marginLeft: theme.spacing(2),\n  }),\n  result: css({\n    width: '570px',\n    height: '363px',\n  }),\n});\n","import { css, cx } from '@emotion/css';\nimport { useState } from 'react';\nimport * as React from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, CodeEditor, Dropdown, Menu, Stack, Toggletip, useStyles2 } from '@grafana/ui';\nimport { TestTemplateAlert } from 'app/plugins/datasource/alertmanager/types';\n\nimport { EditorColumnHeader } from '../contact-points/templates/EditorColumnHeader';\n\nimport { AlertInstanceModalSelector } from './AlertInstanceModalSelector';\nimport { AlertTemplatePreviewData } from './TemplateData';\nimport { TemplateDataTable } from './TemplateDataDocs';\nimport { GenerateAlertDataModal } from './form/GenerateAlertDataModal';\n\nexport const RESET_TO_DEFAULT = 'Reset to defaults';\n\nexport function PayloadEditor({\n  payload,\n  setPayload,\n  defaultPayload,\n  setPayloadFormatError,\n  payloadFormatError,\n  className,\n}: {\n  payload: string;\n  defaultPayload: string;\n  setPayload: React.Dispatch<React.SetStateAction<string>>;\n  setPayloadFormatError: (value: React.SetStateAction<string | null>) => void;\n  payloadFormatError: string | null;\n  className?: string;\n}) {\n  const styles = useStyles2(getStyles);\n  const onReset = () => {\n    setPayload(defaultPayload);\n  };\n\n  const [isEditingAlertData, setIsEditingAlertData] = useState(false);\n\n  const onCloseEditAlertModal = () => {\n    setIsEditingAlertData(false);\n  };\n\n  const errorInPayloadJson = payloadFormatError !== null;\n\n  const validatePayload = () => {\n    try {\n      const payloadObj = JSON.parse(payload);\n      JSON.stringify([...payloadObj]); // check if it's iterable, in order to be able to add more data\n      setPayloadFormatError(null);\n    } catch (e) {\n      setPayloadFormatError(e instanceof Error ? e.message : 'Invalid JSON.');\n      throw e;\n    }\n  };\n\n  const onOpenEditAlertModal = () => {\n    try {\n      validatePayload();\n      setIsEditingAlertData(true);\n    } catch (e) {}\n  };\n\n  const onOpenAlertSelectorModal = () => {\n    try {\n      validatePayload();\n      setIsAlertSelectorOpen(true);\n    } catch (e) {}\n  };\n\n  const onAddAlertList = (alerts: TestTemplateAlert[]) => {\n    onCloseEditAlertModal();\n    setIsAlertSelectorOpen(false);\n    setPayload((payload) => {\n      const payloadObj = JSON.parse(payload);\n      return JSON.stringify([...payloadObj, ...alerts], undefined, 2);\n    });\n  };\n\n  const [isAlertSelectorOpen, setIsAlertSelectorOpen] = useState(false);\n\n  return (\n    <>\n      <div className={cx(styles.wrapper, className)}>\n        <EditorColumnHeader\n          label=\"Payload\"\n          actions={\n            <Stack direction=\"row\" alignItems=\"center\" gap={0.5}>\n              <Dropdown\n                overlay={\n                  <Menu>\n                    <Menu.Item\n                      label=\"Use existing alert instances\"\n                      disabled={errorInPayloadJson}\n                      onClick={onOpenAlertSelectorModal}\n                    />\n                    <Menu.Item\n                      label=\"Add custom alert instance\"\n                      disabled={errorInPayloadJson}\n                      onClick={onOpenEditAlertModal}\n                    />\n                    <Menu.Divider />\n                    <Menu.Item label={RESET_TO_DEFAULT} onClick={onReset} destructive />\n                  </Menu>\n                }\n              >\n                <Button variant=\"secondary\" size=\"sm\" icon=\"angle-down\">\n                  Edit payload\n                </Button>\n              </Dropdown>\n              <Toggletip content={<AlertTemplateDataTable />} placement=\"top\" fitContent>\n                <Button variant=\"secondary\" fill=\"outline\" size=\"sm\" icon=\"question-circle\">\n                  Help\n                </Button>\n              </Toggletip>\n            </Stack>\n          }\n        />\n\n        <div className={styles.editorWrapper}>\n          <AutoSizer>\n            {({ width, height }) => (\n              <CodeEditor\n                containerStyles={styles.editorContainer}\n                width={width}\n                height={height}\n                language={'json'}\n                showLineNumbers={true}\n                showMiniMap={false}\n                value={payload}\n                readOnly={false}\n                onBlur={setPayload}\n                monacoOptions={{\n                  scrollBeyondLastLine: false,\n                }}\n              />\n            )}\n          </AutoSizer>\n        </div>\n      </div>\n\n      <GenerateAlertDataModal isOpen={isEditingAlertData} onDismiss={onCloseEditAlertModal} onAccept={onAddAlertList} />\n\n      <AlertInstanceModalSelector\n        onSelect={onAddAlertList}\n        isOpen={isAlertSelectorOpen}\n        onClose={() => setIsAlertSelectorOpen(false)}\n      />\n    </>\n  );\n}\nconst AlertTemplateDataTable = () => {\n  return <TemplateDataTable dataItems={AlertTemplatePreviewData} />;\n};\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css({\n    display: 'flex',\n    flexDirection: 'column',\n    height: '100%',\n  }),\n  tooltip: css({\n    paddingLeft: theme.spacing(1),\n  }),\n  label: css({\n    margin: 0,\n  }),\n  editorWrapper: css({\n    flex: 1,\n  }),\n  editorContainer: css({\n    width: 'fit-content',\n    border: 'none',\n  }),\n  templateDataDocsHeader: css({\n    color: theme.colors.text.primary,\n\n    span: {\n      color: theme.colors.text.secondary,\n      fontSize: theme.typography.bodySmall.fontSize,\n    },\n  }),\n});\n","import { css, cx } from '@emotion/css';\nimport { addMinutes, subDays, subHours } from 'date-fns';\nimport { Location } from 'history';\nimport { useMemo, useRef, useState } from 'react';\nimport { FormProvider, useForm } from 'react-hook-form';\nimport { useToggle } from 'react-use';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config as runtimeConfig, isFetchError, locationService } from '@grafana/runtime';\nimport {\n  Alert,\n  Button,\n  FieldSet,\n  Input,\n  LinkButton,\n  useStyles2,\n  Stack,\n  useSplitter,\n  Drawer,\n  InlineField,\n  Box,\n} from '@grafana/ui';\nimport { usePageToolbar } from 'app/core/components/Page/Page';\nimport { useAppNotification } from 'app/core/copy/appNotification';\nimport { useCleanup } from 'app/core/hooks/useCleanup';\nimport { ActiveTab as ContactPointsActiveTabs } from 'app/features/alerting/unified/components/contact-points/ContactPoints';\nimport { TestTemplateAlert } from 'app/plugins/datasource/alertmanager/types';\n\nimport { AppChromeUpdate } from '../../../../../core/components/AppChrome/AppChromeUpdate';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { makeAMLink, stringifyErrorLike } from '../../utils/misc';\nimport { initialAsyncRequestState } from '../../utils/redux';\nimport { ProvisionedResource, ProvisioningAlert } from '../Provisioning';\nimport { EditorColumnHeader } from '../contact-points/templates/EditorColumnHeader';\nimport {\n  NotificationTemplate,\n  useCreateNotificationTemplate,\n  useNotificationTemplateMetadata,\n  useUpdateNotificationTemplate,\n  useValidateNotificationTemplate,\n} from '../contact-points/useNotificationTemplates';\n\nimport { PayloadEditor } from './PayloadEditor';\nimport { TemplateDataDocs } from './TemplateDataDocs';\nimport { TemplateEditor } from './TemplateEditor';\nimport { TemplatePreview } from './TemplatePreview';\nimport { snippets } from './editor/templateDataSuggestions';\n\nexport interface TemplateFormValues {\n  title: string;\n  content: string;\n}\n\nexport const defaults: TemplateFormValues = Object.freeze({\n  title: '',\n  content: '',\n});\n\ninterface Props {\n  originalTemplate?: NotificationTemplate;\n  prefill?: TemplateFormValues;\n  alertmanager: string;\n}\n\nexport const isDuplicating = (location: Location) => location.pathname.endsWith('/duplicate');\n\n/**\n * We're going for this type of layout, but with the ability to resize the columns.\n * To achieve this, we're using the useSplitter hook from Grafana UI twice.\n * The first hook is for the vertical splitter between the template editor and the payload editor.\n * The second hook is for the horizontal splitter between the template editor and the preview.\n * If we're using a vanilla Alertmanager source, we don't show the payload editor nor the preview but we still use the splitter at 100/0.\n *\n * ┌───────────────────┐┌───────────┐\n * │ Template          ││ Preview   │\n * │                   ││           │\n * │                   ││           │\n * │                   ││           │\n * └───────────────────┘│           │\n * ┌───────────────────┐│           │\n * │ Payload           ││           │\n * │                   ││           │\n * │                   ││           │\n * │                   ││           │\n * └───────────────────┘└───────────┘\n */\nexport const TemplateForm = ({ originalTemplate, prefill, alertmanager }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const appNotification = useAppNotification();\n\n  const createNewTemplate = useCreateNotificationTemplate({ alertmanager });\n  const updateTemplate = useUpdateNotificationTemplate({ alertmanager });\n  const { titleIsUnique } = useValidateNotificationTemplate({ alertmanager, originalTemplate });\n\n  useCleanup((state) => (state.unifiedAlerting.saveAMConfig = initialAsyncRequestState));\n  const formRef = useRef<HTMLFormElement>(null);\n  const isGrafanaAlertManager = alertmanager === GRAFANA_RULES_SOURCE_NAME;\n\n  const { error } = useUnifiedAlertingSelector((state) => state.saveAMConfig);\n\n  const [cheatsheetOpened, toggleCheatsheetOpened] = useToggle(false);\n\n  const [payload, setPayload] = useState(defaultPayloadString);\n  const [payloadFormatError, setPayloadFormatError] = useState<string | null>(null);\n\n  const { isProvisioned } = useNotificationTemplateMetadata(originalTemplate);\n  const originalTemplatePrefill: TemplateFormValues | undefined = originalTemplate\n    ? { title: originalTemplate.title, content: originalTemplate.content }\n    : undefined;\n\n  // splitter for template and payload editor\n  const columnSplitter = useSplitter({\n    direction: 'column',\n    // if Grafana Alertmanager, split 50/50, otherwise 100/0 because there is no payload editor\n    initialSize: isGrafanaAlertManager ? 0.5 : 1,\n    dragPosition: 'middle',\n  });\n\n  // splitter for template editor and preview\n  const rowSplitter = useSplitter({\n    direction: 'row',\n    // if Grafana Alertmanager, split 60/40, otherwise 100/0 because there is no preview\n    initialSize: isGrafanaAlertManager ? 0.6 : 1,\n    dragPosition: 'middle',\n  });\n\n  const formApi = useForm<TemplateFormValues>({\n    mode: 'onSubmit',\n    defaultValues: prefill ?? originalTemplatePrefill ?? defaults,\n  });\n  const {\n    handleSubmit,\n    register,\n    formState: { errors, isSubmitting },\n    getValues,\n    setValue,\n    watch,\n  } = formApi;\n\n  const submit = async (values: TemplateFormValues) => {\n    const returnLink = makeAMLink('/alerting/notifications', alertmanager, {\n      tab: ContactPointsActiveTabs.NotificationTemplates,\n    });\n\n    try {\n      if (!originalTemplate) {\n        await createNewTemplate({ templateValues: values });\n      } else {\n        await updateTemplate({ template: originalTemplate, patch: values });\n      }\n      appNotification.success('Template saved', `Template ${values.title} has been saved`);\n      locationService.push(returnLink);\n    } catch (error) {\n      appNotification.error('Error saving template', stringifyErrorLike(error));\n    }\n  };\n\n  const actionButtons = useMemo(\n    () => (\n      <Stack>\n        <Button onClick={() => formRef.current?.requestSubmit()} variant=\"primary\" size=\"sm\" disabled={isSubmitting}>\n          Save\n        </Button>\n        <LinkButton\n          disabled={isSubmitting}\n          href={makeAMLink('alerting/notifications', alertmanager, {\n            tab: ContactPointsActiveTabs.NotificationTemplates,\n          })}\n          variant=\"secondary\"\n          size=\"sm\"\n        >\n          Cancel\n        </LinkButton>\n      </Stack>\n    ),\n    [alertmanager, isSubmitting]\n  );\n\n  usePageToolbar(actionButtons);\n\n  return (\n    <>\n      <FormProvider {...formApi}>\n        {!runtimeConfig.featureToggles.singleTopNav && <AppChromeUpdate actions={actionButtons} />}\n        <form onSubmit={handleSubmit(submit)} ref={formRef} className={styles.form} aria-label=\"Template form\">\n          {/* error message */}\n          {error && (\n            <Alert severity=\"error\" title=\"Error saving template\">\n              {error.message || (isFetchError(error) && error.data?.message) || String(error)}\n            </Alert>\n          )}\n          {/* warning about provisioned template */}\n          {isProvisioned && (\n            <Box grow={0}>\n              <ProvisioningAlert resource={ProvisionedResource.Template} />\n            </Box>\n          )}\n\n          {/* name field for the template */}\n          <FieldSet disabled={isProvisioned} className={styles.fieldset}>\n            <InlineField\n              label=\"Template name\"\n              error={errors?.title?.message}\n              invalid={!!errors.title?.message}\n              required\n              className={styles.nameField}\n            >\n              <Input\n                {...register('title', {\n                  required: { value: true, message: 'Required.' },\n                  validate: { titleIsUnique },\n                })}\n                placeholder=\"Give your template a title\"\n                width={42}\n                autoFocus={true}\n                id=\"new-template-name\"\n              />\n            </InlineField>\n\n            {/* editor layout */}\n            <div {...rowSplitter.containerProps} className={styles.contentContainer}>\n              <div {...rowSplitter.primaryProps}>\n                {/* template content and payload editor column – full height and half-width */}\n                <div {...columnSplitter.containerProps} className={styles.contentField}>\n                  {/* template editor */}\n                  <div {...columnSplitter.primaryProps}>\n                    {/* primaryProps will set \"minHeight: min-content;\" so we have to make sure to apply minHeight to the child */}\n                    <div className={cx(styles.flexColumn, styles.containerWithBorderAndRadius, styles.minEditorSize)}>\n                      <EditorColumnHeader\n                        label=\"Template\"\n                        actions={\n                          <Button\n                            icon=\"question-circle\"\n                            size=\"sm\"\n                            fill=\"outline\"\n                            variant=\"secondary\"\n                            onClick={toggleCheatsheetOpened}\n                          >\n                            Help\n                          </Button>\n                        }\n                      />\n                      <Box flex={1}>\n                        <AutoSizer>\n                          {({ width, height }) => (\n                            <TemplateEditor\n                              value={getValues('content')}\n                              onBlur={(value) => setValue('content', value)}\n                              containerStyles={styles.editorContainer}\n                              width={width}\n                              height={height}\n                            />\n                          )}\n                        </AutoSizer>\n                      </Box>\n                    </div>\n                  </div>\n                  {/* payload editor – only available for Grafana Alertmanager */}\n                  {isGrafanaAlertManager && (\n                    <>\n                      <div {...columnSplitter.splitterProps} />\n                      <div {...columnSplitter.secondaryProps}>\n                        <div\n                          className={cx(\n                            styles.containerWithBorderAndRadius,\n                            styles.minEditorSize,\n                            styles.payloadEditor,\n                            styles.flexFull\n                          )}\n                        >\n                          <PayloadEditor\n                            payload={payload}\n                            defaultPayload={defaultPayloadString}\n                            setPayload={setPayload}\n                            setPayloadFormatError={setPayloadFormatError}\n                            payloadFormatError={payloadFormatError}\n                          />\n                        </div>\n                      </div>\n                    </>\n                  )}\n                </div>\n              </div>\n              {/* preview column – full height and half-width */}\n              {isGrafanaAlertManager && (\n                <>\n                  <div {...rowSplitter.secondaryProps}>\n                    <div {...rowSplitter.splitterProps}></div>\n                    <TemplatePreview\n                      payload={payload}\n                      templateName={watch('title')}\n                      setPayloadFormatError={setPayloadFormatError}\n                      payloadFormatError={payloadFormatError}\n                      className={cx(styles.templatePreview, styles.minEditorSize)}\n                    />\n                  </div>\n                </>\n              )}\n            </div>\n          </FieldSet>\n        </form>\n      </FormProvider>\n      {cheatsheetOpened && (\n        <Drawer title=\"Templating cheat sheet\" onClose={toggleCheatsheetOpened} size=\"lg\">\n          <TemplatingCheatSheet />\n        </Drawer>\n      )}\n    </>\n  );\n};\n\nfunction TemplatingBasics() {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Alert title=\"How to\" severity=\"info\">\n      <Stack direction=\"row\">\n        <div>\n          Grafana uses Go templating language to create notification messages.\n          <br />\n          To find out more about templating please visit our documentation.\n        </div>\n        <div>\n          <LinkButton\n            href=\"https://grafana.com/docs/grafana/latest/alerting/manage-notifications/template-notifications/\"\n            target=\"_blank\"\n            icon=\"external-link-alt\"\n            variant=\"secondary\"\n          >\n            Templating documentation\n          </LinkButton>\n        </div>\n      </Stack>\n\n      <div className={styles.snippets}>\n        For auto-completion of common templating code, type the following keywords in the content editor:\n        <div className={styles.code}>\n          {Object.values(snippets)\n            .map((s) => s.label)\n            .join(', ')}\n        </div>\n      </div>\n    </Alert>\n  );\n}\n\nfunction TemplatingCheatSheet() {\n  return (\n    <Stack direction=\"column\" gap={1}>\n      <TemplatingBasics />\n      <TemplateDataDocs />\n    </Stack>\n  );\n}\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  const narrowScreenQuery = theme.breakpoints.down('md');\n\n  return {\n    flexFull: css({\n      flex: 1,\n    }),\n    minEditorSize: css({\n      minHeight: 300,\n      minWidth: 300,\n    }),\n    payloadEditor: css({\n      minHeight: 0,\n    }),\n    containerWithBorderAndRadius: css({\n      borderRadius: theme.shape.radius.default,\n      border: `1px solid ${theme.colors.border.medium}`,\n    }),\n    flexColumn: css({\n      display: 'flex',\n      flex: 1,\n      flexDirection: 'column',\n    }),\n    form: css({\n      label: 'template-form',\n      height: '100%',\n      display: 'flex',\n      flexDirection: 'column',\n    }),\n    fieldset: css({\n      label: 'template-fieldset',\n      flex: 1,\n      display: 'flex',\n      flexDirection: 'column',\n    }),\n    label: css({\n      margin: 0,\n    }),\n    nameField: css({\n      marginBottom: theme.spacing(1),\n    }),\n    contentContainer: css({\n      flex: 1,\n      display: 'flex',\n      flexDirection: 'row',\n    }),\n    contentField: css({\n      display: 'flex',\n      flexDirection: 'column',\n      flex: 1,\n      marginBottom: 0,\n    }),\n    templatePreview: css({\n      flex: 1,\n      display: 'flex',\n    }),\n    templatePayload: css({\n      flex: 1,\n    }),\n    editorContainer: css({\n      width: 'fit-content',\n      border: 'none',\n    }),\n    payloadCollapseButton: css({\n      backgroundColor: theme.colors.info.transparent,\n      margin: 0,\n      [narrowScreenQuery]: {\n        display: 'none',\n      },\n    }),\n    snippets: css({\n      marginTop: theme.spacing(2),\n      fontSize: theme.typography.bodySmall.fontSize,\n    }),\n    code: css({\n      color: theme.colors.text.secondary,\n      fontWeight: theme.typography.fontWeightBold,\n    }),\n  };\n};\n\nconst defaultPayload: TestTemplateAlert[] = [\n  {\n    status: 'firing',\n    annotations: {\n      summary: 'Instance instance1 has been down for more than 5 minutes',\n    },\n    labels: {\n      alertname: 'InstanceDown',\n      instance: 'instance1',\n    },\n    startsAt: subDays(new Date(), 1).toISOString(),\n    endsAt: addMinutes(new Date(), 5).toISOString(),\n    fingerprint: 'a5331f0d5a9d81d4',\n    generatorURL: 'http://grafana.com/alerting/grafana/cdeqmlhvflz40f/view',\n  },\n  {\n    status: 'resolved',\n    annotations: {\n      summary: 'CPU usage above 90%',\n    },\n    labels: {\n      alertname: 'CpuUsage',\n      instance: 'instance1',\n    },\n    startsAt: subHours(new Date(), 4).toISOString(),\n    endsAt: new Date().toISOString(),\n    fingerprint: 'b77d941310f9d381',\n    generatorURL: 'http://grafana.com/alerting/grafana/oZSMdGj7z/view',\n  },\n];\n\nexport const defaultPayloadString = JSON.stringify(defaultPayload, null, 2);\n","import { css, cx } from '@emotion/css';\nimport { compact, uniqueId } from 'lodash';\nimport * as React from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Box, Button, useStyles2 } from '@grafana/ui';\n\nimport { TemplatePreviewErrors, TemplatePreviewResponse, TemplatePreviewResult } from '../../api/templateApi';\nimport { stringifyErrorLike } from '../../utils/misc';\nimport { EditorColumnHeader } from '../contact-points/templates/EditorColumnHeader';\n\nimport type { TemplateFormValues } from './TemplateForm';\nimport { usePreviewTemplate } from './usePreviewTemplate';\n\nexport function TemplatePreview({\n  payload,\n  templateName,\n  payloadFormatError,\n  setPayloadFormatError,\n  className,\n}: {\n  payload: string;\n  templateName: string;\n  payloadFormatError: string | null;\n  setPayloadFormatError: (value: React.SetStateAction<string | null>) => void;\n  className?: string;\n}) {\n  const styles = useStyles2(getStyles);\n\n  const { watch } = useFormContext<TemplateFormValues>();\n\n  const templateContent = watch('content');\n\n  const {\n    data,\n    isLoading,\n    onPreview,\n    error: previewError,\n  } = usePreviewTemplate(templateContent, templateName, payload, setPayloadFormatError);\n  const previewToRender = getPreviewResults(previewError, payloadFormatError, data);\n\n  return (\n    <div className={cx(styles.container, className)}>\n      <EditorColumnHeader\n        label=\"Preview\"\n        actions={\n          <Button\n            disabled={isLoading}\n            icon=\"sync\"\n            aria-label=\"Refresh preview\"\n            onClick={onPreview}\n            size=\"sm\"\n            variant=\"secondary\"\n          >\n            Refresh\n          </Button>\n        }\n      />\n      <Box flex={1}>\n        <AutoSizer disableWidth>\n          {({ height }) => <div className={styles.viewerContainer({ height })}>{previewToRender}</div>}\n        </AutoSizer>\n      </Box>\n    </div>\n  );\n}\n\nfunction PreviewResultViewer({ previews }: { previews: TemplatePreviewResult[] }) {\n  const styles = useStyles2(getStyles);\n  // If there is only one template, we don't need to show the name\n  const singleTemplate = previews.length === 1;\n\n  return (\n    <ul className={styles.viewer.container}>\n      {previews.map((preview) => (\n        <li className={styles.viewer.box} key={preview.name}>\n          {singleTemplate ? null : <header className={styles.viewer.header}>{preview.name}</header>}\n          <pre className={styles.viewer.pre}>{preview.text ?? '<Empty>'}</pre>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nfunction PreviewErrorViewer({ errors }: { errors: TemplatePreviewErrors[] }) {\n  return errors.map((error) => (\n    <Alert key={uniqueId('errors-list')} title={compact([error.name, error.kind]).join(' – ')}>\n      {error.message}\n    </Alert>\n  ));\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css({\n    label: 'template-preview-container',\n    display: 'flex',\n    flexDirection: 'column',\n    borderRadius: theme.shape.radius.default,\n    border: `1px solid ${theme.colors.border.medium}`,\n  }),\n  viewerContainer: ({ height }: { height: number }) =>\n    css({\n      height,\n      overflow: 'auto',\n      backgroundColor: theme.colors.background.primary,\n    }),\n  viewer: {\n    container: css({\n      display: 'flex',\n      flexDirection: 'column',\n      height: 'inherit',\n    }),\n    box: css({\n      display: 'flex',\n      flexDirection: 'column',\n      borderBottom: `1px solid ${theme.colors.border.medium}`,\n      height: 'inherit',\n    }),\n    header: css({\n      fontSize: theme.typography.bodySmall.fontSize,\n      padding: theme.spacing(1, 2),\n      borderBottom: `1px solid ${theme.colors.border.medium}`,\n      backgroundColor: theme.colors.background.secondary,\n    }),\n    errorText: css({\n      color: theme.colors.error.text,\n    }),\n    pre: css({\n      backgroundColor: 'transparent',\n      margin: 0,\n      border: 'none',\n      padding: theme.spacing(2),\n    }),\n  },\n});\n\nexport function getPreviewResults(\n  previewError: unknown | undefined,\n  payloadFormatError: string | null,\n  data: TemplatePreviewResponse | undefined\n): JSX.Element {\n  // ERRORS IN JSON OR IN REQUEST (endpoint not available, for example)\n  const previewErrorRequest = previewError ? stringifyErrorLike(previewError) : undefined;\n  const errorToRender = payloadFormatError || previewErrorRequest;\n\n  //PREVIEW : RESULTS AND ERRORS\n  const previewResponseResults = data?.results ?? [];\n  const previewResponseErrors = data?.errors;\n\n  return (\n    <>\n      {errorToRender && (\n        <Alert severity=\"error\" title=\"Error\">\n          {errorToRender}\n        </Alert>\n      )}\n      {previewResponseErrors && <PreviewErrorViewer errors={previewResponseErrors} />}\n      {previewResponseResults && <PreviewResultViewer previews={previewResponseResults} />}\n    </>\n  );\n}\n","import { useCallback, useEffect } from 'react';\n\nimport { AlertField, usePreviewTemplateMutation } from '../../api/templateApi';\n\nexport function usePreviewTemplate(\n  templateContent: string,\n  templateName: string,\n  payload: string,\n  setPayloadFormatError: (value: React.SetStateAction<string | null>) => void\n) {\n  const [trigger, { data, error, isLoading }] = usePreviewTemplateMutation();\n\n  const onPreview = useCallback(() => {\n    try {\n      const alertList: AlertField[] = JSON.parse(payload);\n      JSON.stringify([...alertList]); // check if it's iterable, in order to be able to add more data\n      trigger({ template: templateContent, alerts: alertList, name: templateName });\n      setPayloadFormatError(null);\n    } catch (e) {\n      setPayloadFormatError(e instanceof Error ? e.message : 'Invalid JSON.');\n    }\n  }, [templateContent, templateName, payload, setPayloadFormatError, trigger]);\n\n  useEffect(() => onPreview(), [onPreview]);\n\n  return { data, error, isLoading, onPreview };\n}\n","import { isEqual, uniqBy } from 'lodash';\n\nimport { GrafanaAlertStateWithReason } from 'app/types/unified-alerting-dto';\n\nexport interface Line {\n  previous: GrafanaAlertStateWithReason;\n  current: GrafanaAlertStateWithReason;\n  values?: Record<string, number>;\n  labels?: Record<string, string>;\n  fingerprint?: string;\n  ruleUID?: string;\n}\n\nexport interface LogRecord {\n  timestamp: number;\n  line: Line;\n}\n\nexport type Label = [string, string];\n\n// omit \"common\" labels from \"labels\"\nexport function omitLabels(labels: Label[], common: Label[]): Label[] {\n  return labels.filter((label) => {\n    return !common.find((commonLabel) => JSON.stringify(commonLabel) === JSON.stringify(label));\n  });\n}\n\n// find all common labels by looking at which ones occur in every record, then create a unique array of items for those\nexport function extractCommonLabels(labels: Label[][]): Label[] {\n  const flatLabels = labels.flatMap((label) => label);\n\n  const commonLabels = uniqBy(\n    flatLabels.filter((label) => {\n      const count = flatLabels.filter((l) => isEqual(label, l)).length;\n      return count === Object.keys(labels).length;\n    }),\n    (label) => JSON.stringify(label)\n  );\n\n  return commonLabels;\n}\n"],"names":["useCleanup","cleanupAction","dispatch","selectorRef","EditorColumnHeader","label","actions","styles","editorColumnStyles","theme","subDays","date","amount","addDays","addMinutes","addMilliseconds","addHours","subHours","AlertInstanceModalSelector","onSelect","isOpen","onClose","getStyles","selectedRule","setSelectedRule","selectedInstances","setSelectedInstances","useGetAlertmanagerAlertsQuery","alertmanagerApi","result","loading","error","ruleFilter","setRuleFilter","rulesWithInstances","rules","instance","handleRuleChange","rule","filteredRules","filteredRulesObject","filteredRulesKeys","RuleRow","index","style","ruleName","isSelected","Icon","getAlertUniqueLabels","allAlerts","currentAlert","labelsAsArray","alert","ruleCommonLabels","alertUniqueLabels","labels","InstanceRow","alerts","tags","handleSelectInstances","Tooltip","tag","Tag","handleConfirm","instances","resetState","handleSearchRules","onDismiss","filter","Modal","FilterInput","LoadingPlaceholder","height","width","Button","clearButton","GlobalTemplateData","AlertTemplatePreviewData","AlertTemplateData","KeyValueTemplateFunctions","KeyValueCodeSnippet","TemplateDataDocs","getTemplateDataDocsStyles","AlertTemplateDataTable","TemplateDataTable","Stack","type","KeyValueTemplateDataTable","dataItems","caption","typeRenderer","getTemplateDataTableStyles","name","notes","tableStyles","args","returns","defaultValues","GenerateAlertDataModal","onAccept","setAlerts","formMethods","annotations","status","setStatus","onAdd","key","value","acc","onSubmit","labelsOrAnnotationsAdded","someLabels","lb","someAnnotations","ann","alertOptions","e","Card","AnnotationsStep","LabelsField","RadioButtonGroup","RESET_TO_DEFAULT","PayloadEditor","payload","setPayload","defaultPayload","setPayloadFormatError","payloadFormatError","className","onReset","isEditingAlertData","setIsEditingAlertData","onCloseEditAlertModal","errorInPayloadJson","validatePayload","payloadObj","onOpenEditAlertModal","onOpenAlertSelectorModal","setIsAlertSelectorOpen","onAddAlertList","isAlertSelectorOpen","Dropdown","Menu","Toggletip","CodeEditor","defaults","isDuplicating","location","TemplateForm","originalTemplate","prefill","alertmanager","appNotification","createNewTemplate","updateTemplate","titleIsUnique","state","formRef","isGrafanaAlertManager","useUnifiedAlertingSelector","cheatsheetOpened","toggleCheatsheetOpened","useToggle","defaultPayloadString","isProvisioned","originalTemplatePrefill","columnSplitter","useSplitter","rowSplitter","formApi","handleSubmit","register","errors","isSubmitting","getValues","setValue","watch","submit","values","returnLink","ContactPoints","actionButtons","AppChromeUpdate","Alert","Box","Provisioning","FieldSet","InlineField","Input","TemplateEditor","TemplatePreview","Drawer","TemplatingCheatSheet","TemplatingBasics","s","narrowScreenQuery","templateName","templateContent","data","isLoading","onPreview","previewError","previewToRender","getPreviewResults","PreviewResultViewer","previews","singleTemplate","preview","PreviewErrorViewer","previewErrorRequest","errorToRender","previewResponseResults","previewResponseErrors","usePreviewTemplate","trigger","alertList","omitLabels","common","commonLabel","extractCommonLabels","flatLabels","l"],"sourceRoot":""}