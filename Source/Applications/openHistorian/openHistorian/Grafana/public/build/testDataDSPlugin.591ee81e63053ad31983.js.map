{"version":3,"sources":["webpack:///./public/app/plugins/datasource/testdata/metricTree.ts","webpack:///./public/app/plugins/datasource/testdata/LogIpsum.ts","webpack:///./public/app/plugins/datasource/testdata/runStreams.ts","webpack:///./public/app/plugins/datasource/testdata/datasource.ts","webpack:///./public/app/plugins/datasource/testdata/TestInfoTab.tsx","webpack:///./public/app/plugins/datasource/testdata/ConfigEditor.tsx","webpack:///./public/app/plugins/datasource/testdata/components/StreamingClientEditor.tsx","webpack:///./public/app/plugins/datasource/testdata/components/ManualEntryEditor.tsx","webpack:///./public/app/plugins/datasource/testdata/components/RandomWalkEditor.tsx","webpack:///./public/app/plugins/datasource/testdata/components/PredictablePulseEditor.tsx","webpack:///./public/app/plugins/datasource/testdata/components/CSVWaveEditor.tsx","webpack:///./public/app/plugins/datasource/testdata/constants.ts","webpack:///./public/app/plugins/datasource/testdata/components/GrafanaLiveEditor.tsx","webpack:///./public/app/plugins/datasource/testdata/QueryEditor.tsx","webpack:///./public/app/plugins/datasource/testdata/module.tsx"],"names":["queryMetricTree","query","indexOf","name","children","queryTree","queryIndex","length","nodeQuery","result","namesToMatch","startsWith","replace","split","node","nameToMatch","pattern","RegExp","test","concat","buildMetricTree","parent","depth","letter","nodeName","push","index","getNextWord","Math","floor","random","words","defaultQuery","type","speed","spread","noise","bands","runStream","target","req","defaults","stream","Observable","subscriber","streamId","panelId","refId","maxDataPoints","data","CircularDataFrame","append","capacity","alias","addField","FieldType","time","number","i","suffix","value","timeoutId","addNextRow","idx","fields","values","add","min","max","Date","now","setTimeout","pushNextEvent","next","key","console","log","clearTimeout","runSignalStream","string","meta","preferredVisualisationType","line","getRandomLine","runLogsStream","reader","csv","CSVReader","callback","onHeader","field","onRow","row","processChunk","text","TextDecoder","decode","readCSV","state","done","LoadingState","Done","Streaming","complete","read","then","url","Error","fetch","Request","response","body","getReader","runFetchStream","TestDataDataSource","instanceSettings","templateSrv","getTemplateSrv","options","queries","streams","targets","hide","scenarioId","runGrafanaLiveQuery","runGrafanaAPI","runArrowFile","this","annotationDataTopicTest","intervalMs","datasourceId","id","scopedVars","getBackendSrv","method","from","range","valueOf","toString","to","pipe","map","res","processQueryResult","merge","error","undefined","results","tables","table","set","series","datapoints","points","tags","message","observer","events","buildFakeAnnotationEvents","dataFrame","ArrayDataFrame","dataTopic","DataTopic","Annotations","count","timeWalker","step","Promise","resolve","status","get","reject","items","getSearchFilterScopedVar","wildcardChar","item","DataSourceApi","stringInput","base64StringToArrowTable","frame","arrowTableToDataFrame","e","warn","toDataQueryError","of","requestId","liveQueryCounter","channel","getLiveMeasurementsObserver","scope","LiveChannelScope","Grafana","namespace","path","TestInfoTab","props","className","href","rel","PureComponent","ConfigEditor","streamingClientFields","label","placeholder","types","StreamingClientEditor","onChange","onInputChange","Number","labelWidth","width","defaultValue","grow","ManualEntryEditor","onRunQuery","point","dateTime","format","onSubmit","newPointTime","dateMath","parse","newPointValue","sort","a","b","maxWidth","register","control","selectedPoint","watch","ref","variant","as","Select","onClick","setValue","filter","_","deletePoint","randomWalkFields","testSelectors","selectors","components","DataSource","TestData","QueryTab","RandomWalkEditor","selector","aria-label","tooltip","PredictablePulseEditor","pulseWave","CSVWaveEditor","csvWave","defaultStreamQuery","timeStep","onCount","onValue","offCount","offValue","valuesCSV","lines","liveTestDataChannels","description","GrafanaLiveEditor","find","f","showLabelsFor","endpoints","numberFields","editorSelectors","TestDataAnnotationsQueryCtrl","template","plugin","DataSourcePlugin","setConfigEditor","setQueryEditor","datasource","useAsync","getScenarios","loading","scenarioList","onUpdate","useEffect","currentScenario","useMemo","scenario","newValue","levelColumn","checked","includes","onFieldChange","formattedValue","onStreamClientChange","onPulseWaveChange","onCSVWaveChange","localeCompare","showLabels","scenarioSelectContainer","sc","update","labels","ep","rows","setAnnotationQueryCtrl","addConfigPage","title","icon"],"mappings":"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","file":"testDataDSPlugin.591ee81e63053ad31983.js","sourcesContent":["export interface TreeNode {\n  name: string;\n  children: TreeNode[];\n}\n\n/*\n *  Builds a nested tree like\n *  [\n *    {\n *      name: 'A',\n *      children: [\n *        { name: 'AA', children: [] },\n *        { name: 'AB', children: [] },\n *      ]\n *    }\n *  ]\n */\nfunction buildMetricTree(parent: string, depth: number): TreeNode[] {\n  const chars = ['A', 'B', 'C'];\n  const children: TreeNode[] = [];\n\n  if (depth > 5) {\n    return [];\n  }\n\n  for (const letter of chars) {\n    const nodeName = `${parent}${letter}`;\n    children.push({\n      name: nodeName,\n      children: buildMetricTree(nodeName, depth + 1),\n    });\n  }\n\n  return children;\n}\n\nfunction queryTree(children: TreeNode[], query: string[], queryIndex: number): TreeNode[] {\n  if (queryIndex >= query.length) {\n    return children;\n  }\n\n  if (query[queryIndex] === '*') {\n    return children;\n  }\n\n  const nodeQuery = query[queryIndex];\n  let result: TreeNode[] = [];\n  let namesToMatch = [nodeQuery];\n\n  // handle glob queries\n  if (nodeQuery.startsWith('{')) {\n    namesToMatch = nodeQuery.replace(/\\{|\\}/g, '').split(',');\n  }\n\n  for (const node of children) {\n    for (const nameToMatch of namesToMatch) {\n      if (nameToMatch.indexOf('*') !== -1) {\n        const pattern = nameToMatch.replace('*', '');\n        const regex = new RegExp(`^${pattern}.*`, 'gi');\n        if (regex.test(node.name)) {\n          result = result.concat(queryTree([node], query, queryIndex + 1));\n        }\n      } else if (node.name === nameToMatch) {\n        result = result.concat(queryTree(node.children, query, queryIndex + 1));\n      }\n    }\n  }\n\n  return result;\n}\n\nexport function queryMetricTree(query: string): TreeNode[] {\n  if (query.indexOf('value') === 0) {\n    return [{ name: query, children: [] }];\n  }\n\n  const children = buildMetricTree('', 0);\n  return queryTree(children, query.split('.'), 0);\n}\n","import { LogLevel } from '@grafana/data';\n\nlet index = 0;\n\nexport function getRandomLogLevel(): LogLevel {\n  const v = Math.random();\n  if (v > 0.9) {\n    return LogLevel.critical;\n  }\n  if (v > 0.8) {\n    return LogLevel.error;\n  }\n  if (v > 0.7) {\n    return LogLevel.warning;\n  }\n  if (v > 0.4) {\n    return LogLevel.info;\n  }\n  if (v > 0.3) {\n    return LogLevel.debug;\n  }\n  if (v > 0.1) {\n    return LogLevel.trace;\n  }\n  return LogLevel.unknown;\n}\n\nexport function getNextWord() {\n  index = (index + Math.floor(Math.random() * 5)) % words.length;\n  return words[index];\n}\n\nexport function getRandomLine(length = 60) {\n  let line = getNextWord();\n  while (line.length < length) {\n    line += ' ' + getNextWord();\n  }\n  return line;\n}\n\nconst words = [\n  'At',\n  'vero',\n  'eos',\n  'et',\n  'accusamus',\n  'et',\n  'iusto',\n  'odio',\n  'dignissimos',\n  'ducimus',\n  'qui',\n  'blanditiis',\n  'praesentium',\n  'voluptatum',\n  'deleniti',\n  'atque',\n  'corrupti',\n  'quos',\n  'dolores',\n  'et',\n  'quas',\n  'molestias',\n  'excepturi',\n  'sint',\n  'occaecati',\n  'cupiditate',\n  'non',\n  'provident',\n  'similique',\n  'sunt',\n  'in',\n  'culpa',\n  'qui',\n  'officia',\n  'deserunt',\n  'mollitia',\n  'animi',\n  'id',\n  'est',\n  'laborum',\n  'et',\n  'dolorum',\n  'fuga',\n  'Et',\n  'harum',\n  'quidem',\n  'rerum',\n  'facilis',\n  'est',\n  'et',\n  'expedita',\n  'distinctio',\n  'Nam',\n  'libero',\n  'tempore',\n  'cum',\n  'soluta',\n  'nobis',\n  'est',\n  'eligendi',\n  'optio',\n  'cumque',\n  'nihil',\n  'impedit',\n  'quo',\n  'minus',\n  'id',\n  'quod',\n  'maxime',\n  'placeat',\n  'facere',\n  'possimus',\n  'omnis',\n  'voluptas',\n  'assumenda',\n  'est',\n  'omnis',\n  'dolor',\n  'repellendus',\n  'Temporibus',\n  'autem',\n  'quibusdam',\n  'et',\n  'aut',\n  'officiis',\n  'debitis',\n  'aut',\n  'rerum',\n  'necessitatibus',\n  'saepe',\n  'eveniet',\n  'ut',\n  'et',\n  'voluptates',\n  'repudiandae',\n  'sint',\n  'et',\n  'molestiae',\n  'non',\n  'recusandae',\n  'Itaque',\n  'earum',\n  'rerum',\n  'hic',\n  'tenetur',\n  'a',\n  'sapiente',\n  'delectus',\n  'ut',\n  'aut',\n  'reiciendis',\n  'voluptatibus',\n  'maiores',\n  'alias',\n  'consequatur',\n  'aut',\n  'perferendis',\n  'doloribus',\n  'asperiores',\n  'repellat',\n];\n","import { defaults } from 'lodash';\nimport { Observable } from 'rxjs';\n\nimport {\n  DataQueryRequest,\n  DataQueryResponse,\n  FieldType,\n  CircularDataFrame,\n  CSVReader,\n  Field,\n  LoadingState,\n} from '@grafana/data';\n\nimport { TestDataQuery, StreamingQuery } from './types';\nimport { getRandomLine } from './LogIpsum';\n\nexport const defaultQuery: StreamingQuery = {\n  type: 'signal',\n  speed: 250, // ms\n  spread: 3.5,\n  noise: 2.2,\n  bands: 1,\n};\n\nexport function runStream(target: TestDataQuery, req: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n  const query = defaults(target.stream, defaultQuery);\n  if ('signal' === query.type) {\n    return runSignalStream(target, query, req);\n  }\n  if ('logs' === query.type) {\n    return runLogsStream(target, query, req);\n  }\n  if ('fetch' === query.type) {\n    return runFetchStream(target, query, req);\n  }\n  throw new Error(`Unknown Stream Type: ${query.type}`);\n}\n\nexport function runSignalStream(\n  target: TestDataQuery,\n  query: StreamingQuery,\n  req: DataQueryRequest<TestDataQuery>\n): Observable<DataQueryResponse> {\n  return new Observable<DataQueryResponse>(subscriber => {\n    const streamId = `signal-${req.panelId}-${target.refId}`;\n    const maxDataPoints = req.maxDataPoints || 1000;\n\n    const data = new CircularDataFrame({\n      append: 'tail',\n      capacity: maxDataPoints,\n    });\n    data.refId = target.refId;\n    data.name = target.alias || 'Signal ' + target.refId;\n    data.addField({ name: 'time', type: FieldType.time });\n    data.addField({ name: 'value', type: FieldType.number });\n\n    const { spread, speed, bands = 0, noise } = query;\n\n    for (let i = 0; i < bands; i++) {\n      const suffix = bands > 1 ? ` ${i + 1}` : '';\n      data.addField({ name: 'Min' + suffix, type: FieldType.number });\n      data.addField({ name: 'Max' + suffix, type: FieldType.number });\n    }\n\n    let value = Math.random() * 100;\n    let timeoutId: any = null;\n\n    const addNextRow = (time: number) => {\n      value += (Math.random() - 0.5) * spread;\n\n      let idx = 0;\n      data.fields[idx++].values.add(time);\n      data.fields[idx++].values.add(value);\n\n      let min = value;\n      let max = value;\n\n      for (let i = 0; i < bands; i++) {\n        min = min - Math.random() * noise;\n        max = max + Math.random() * noise;\n\n        data.fields[idx++].values.add(min);\n        data.fields[idx++].values.add(max);\n      }\n    };\n\n    // Fill the buffer on init\n    if (true) {\n      let time = Date.now() - maxDataPoints * speed;\n      for (let i = 0; i < maxDataPoints; i++) {\n        addNextRow(time);\n        time += speed;\n      }\n    }\n\n    const pushNextEvent = () => {\n      addNextRow(Date.now());\n      subscriber.next({\n        data: [data],\n        key: streamId,\n      });\n\n      timeoutId = setTimeout(pushNextEvent, speed);\n    };\n\n    // Send first event in 5ms\n    setTimeout(pushNextEvent, 5);\n\n    return () => {\n      console.log('unsubscribing to stream ' + streamId);\n      clearTimeout(timeoutId);\n    };\n  });\n}\n\nexport function runLogsStream(\n  target: TestDataQuery,\n  query: StreamingQuery,\n  req: DataQueryRequest<TestDataQuery>\n): Observable<DataQueryResponse> {\n  return new Observable<DataQueryResponse>(subscriber => {\n    const streamId = `logs-${req.panelId}-${target.refId}`;\n    const maxDataPoints = req.maxDataPoints || 1000;\n\n    const data = new CircularDataFrame({\n      append: 'tail',\n      capacity: maxDataPoints,\n    });\n    data.refId = target.refId;\n    data.name = target.alias || 'Logs ' + target.refId;\n    data.addField({ name: 'line', type: FieldType.string });\n    data.addField({ name: 'time', type: FieldType.time });\n    data.meta = { preferredVisualisationType: 'logs' };\n\n    const { speed } = query;\n\n    let timeoutId: any = null;\n\n    const pushNextEvent = () => {\n      data.values.time.add(Date.now());\n      data.values.line.add(getRandomLine());\n\n      subscriber.next({\n        data: [data],\n        key: streamId,\n      });\n\n      timeoutId = setTimeout(pushNextEvent, speed);\n    };\n\n    // Send first event in 5ms\n    setTimeout(pushNextEvent, 5);\n\n    return () => {\n      console.log('unsubscribing to stream ' + streamId);\n      clearTimeout(timeoutId);\n    };\n  });\n}\n\nexport function runFetchStream(\n  target: TestDataQuery,\n  query: StreamingQuery,\n  req: DataQueryRequest<TestDataQuery>\n): Observable<DataQueryResponse> {\n  return new Observable<DataQueryResponse>(subscriber => {\n    const streamId = `fetch-${req.panelId}-${target.refId}`;\n    const maxDataPoints = req.maxDataPoints || 1000;\n\n    let data = new CircularDataFrame({\n      append: 'tail',\n      capacity: maxDataPoints,\n    });\n    data.refId = target.refId;\n    data.name = target.alias || 'Fetch ' + target.refId;\n\n    let reader: ReadableStreamReader<Uint8Array>;\n    const csv = new CSVReader({\n      callback: {\n        onHeader: (fields: Field[]) => {\n          // Clear any existing fields\n          if (data.fields.length) {\n            data = new CircularDataFrame({\n              append: 'tail',\n              capacity: maxDataPoints,\n            });\n            data.refId = target.refId;\n            data.name = 'Fetch ' + target.refId;\n          }\n          for (const field of fields) {\n            data.addField(field);\n          }\n        },\n        onRow: (row: any[]) => {\n          data.add(row);\n        },\n      },\n    });\n\n    const processChunk = (value: ReadableStreamReadResult<Uint8Array>): any => {\n      if (value.value) {\n        const text = new TextDecoder().decode(value.value);\n        csv.readCSV(text);\n      }\n\n      subscriber.next({\n        data: [data],\n        key: streamId,\n        state: value.done ? LoadingState.Done : LoadingState.Streaming,\n      });\n\n      if (value.done) {\n        console.log('Finished stream');\n        subscriber.complete(); // necessary?\n        return;\n      }\n\n      return reader.read().then(processChunk);\n    };\n\n    if (!query.url) {\n      throw new Error('query.url is not defined');\n    }\n\n    fetch(new Request(query.url)).then(response => {\n      if (response.body) {\n        reader = response.body.getReader();\n        reader.read().then(processChunk);\n      }\n    });\n\n    return () => {\n      // Cancel fetch?\n      console.log('unsubscribing to stream ' + streamId);\n    };\n  });\n}\n","import set from 'lodash/set';\n\nimport {\n  ArrayDataFrame,\n  arrowTableToDataFrame,\n  base64StringToArrowTable,\n  DataFrame,\n  DataQueryError,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  LoadingState,\n  MetricFindValue,\n  TableData,\n  TimeSeries,\n  TimeRange,\n  DataTopic,\n  AnnotationEvent,\n  LiveChannelScope,\n} from '@grafana/data';\nimport { Scenario, TestDataQuery } from './types';\nimport {\n  getBackendSrv,\n  toDataQueryError,\n  getTemplateSrv,\n  TemplateSrv,\n  getLiveMeasurementsObserver,\n} from '@grafana/runtime';\nimport { queryMetricTree } from './metricTree';\nimport { from, merge, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { runStream } from './runStreams';\nimport { getSearchFilterScopedVar } from 'app/features/variables/utils';\n\ntype TestData = TimeSeries | TableData;\n\nexport class TestDataDataSource extends DataSourceApi<TestDataQuery> {\n  constructor(\n    instanceSettings: DataSourceInstanceSettings,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv()\n  ) {\n    super(instanceSettings);\n  }\n\n  query(options: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n    const queries: any[] = [];\n    const streams: Array<Observable<DataQueryResponse>> = [];\n\n    // Start streams and prepare queries\n    for (const target of options.targets) {\n      if (target.hide) {\n        continue;\n      }\n\n      switch (target.scenarioId) {\n        case 'live':\n          streams.push(runGrafanaLiveQuery(target, options));\n          break;\n        case 'streaming_client':\n          streams.push(runStream(target, options));\n          break;\n        case 'grafana_api':\n          streams.push(runGrafanaAPI(target, options));\n          break;\n        case 'arrow':\n          streams.push(runArrowFile(target, options));\n          break;\n        case 'annotations':\n          streams.push(this.annotationDataTopicTest(target, options));\n          break;\n        default:\n          queries.push({\n            ...target,\n            intervalMs: options.intervalMs,\n            maxDataPoints: options.maxDataPoints,\n            datasourceId: this.id,\n            alias: this.templateSrv.replace(target.alias || '', options.scopedVars),\n          });\n      }\n    }\n\n    if (queries.length) {\n      const stream = getBackendSrv()\n        .fetch({\n          method: 'POST',\n          url: '/api/tsdb/query',\n          data: {\n            from: options.range.from.valueOf().toString(),\n            to: options.range.to.valueOf().toString(),\n            queries: queries,\n          },\n        })\n        .pipe(map(res => this.processQueryResult(queries, res)));\n\n      streams.push(stream);\n    }\n\n    return merge(...streams);\n  }\n\n  processQueryResult(queries: any, res: any): DataQueryResponse {\n    const data: TestData[] = [];\n    let error: DataQueryError | undefined = undefined;\n\n    for (const query of queries) {\n      const results = res.data.results[query.refId];\n\n      for (const t of results.tables || []) {\n        const table = t as TableData;\n        table.refId = query.refId;\n        table.name = query.alias;\n\n        if (query.scenarioId === 'logs') {\n          set(table, 'meta.preferredVisualisationType', 'logs');\n        }\n\n        data.push(table);\n      }\n\n      for (const series of results.series || []) {\n        data.push({ target: series.name, datapoints: series.points, refId: query.refId, tags: series.tags });\n      }\n\n      if (results.error) {\n        error = {\n          message: results.error,\n        };\n      }\n    }\n\n    return { data, error };\n  }\n\n  annotationDataTopicTest(target: TestDataQuery, req: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n    return new Observable<DataQueryResponse>(observer => {\n      const events = this.buildFakeAnnotationEvents(req.range, 10);\n      const dataFrame = new ArrayDataFrame(events);\n      dataFrame.meta = { dataTopic: DataTopic.Annotations };\n\n      observer.next({ key: target.refId, data: [dataFrame] });\n    });\n  }\n\n  buildFakeAnnotationEvents(range: TimeRange, count: number): AnnotationEvent[] {\n    let timeWalker = range.from.valueOf();\n    const to = range.to.valueOf();\n    const events = [];\n    const step = (to - timeWalker) / count;\n\n    for (let i = 0; i < count; i++) {\n      events.push({\n        time: timeWalker,\n        text: 'This is the text, <a href=\"https://grafana.com\">Grafana.com</a>',\n        tags: ['text', 'server'],\n      });\n      timeWalker += step;\n    }\n\n    return events;\n  }\n\n  annotationQuery(options: any) {\n    return Promise.resolve(this.buildFakeAnnotationEvents(options.range, 10));\n  }\n\n  getQueryDisplayText(query: TestDataQuery) {\n    if (query.alias) {\n      return query.scenarioId + ' as ' + query.alias;\n    }\n    return query.scenarioId;\n  }\n\n  testDatasource() {\n    return Promise.resolve({\n      status: 'success',\n      message: 'Data source is working',\n    });\n  }\n\n  getScenarios(): Promise<Scenario[]> {\n    return getBackendSrv().get('/api/tsdb/testdata/scenarios');\n  }\n\n  metricFindQuery(query: string, options: any) {\n    return new Promise<MetricFindValue[]>((resolve, reject) => {\n      setTimeout(() => {\n        const interpolatedQuery = this.templateSrv.replace(\n          query,\n          getSearchFilterScopedVar({ query, wildcardChar: '*', options })\n        );\n        const children = queryMetricTree(interpolatedQuery);\n        const items = children.map(item => ({ value: item.name, text: item.name }));\n        resolve(items);\n      }, 100);\n    });\n  }\n}\n\nfunction runArrowFile(target: TestDataQuery, req: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n  let data: DataFrame[] = [];\n  if (target.stringInput && target.stringInput.length > 10) {\n    try {\n      const table = base64StringToArrowTable(target.stringInput);\n      const frame = arrowTableToDataFrame(table);\n      frame.refId = target.refId;\n      data = [frame];\n    } catch (e) {\n      console.warn('Error reading saved arrow', e);\n      const error = toDataQueryError(e);\n      error.refId = target.refId;\n      return of({ state: LoadingState.Error, error, data });\n    }\n  }\n  return of({ state: LoadingState.Done, data, key: req.requestId + target.refId });\n}\n\nfunction runGrafanaAPI(target: TestDataQuery, req: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n  const url = `/api/${target.stringInput}`;\n  return from(\n    getBackendSrv()\n      .get(url)\n      .then(res => {\n        const frame = new ArrayDataFrame(res);\n        return {\n          state: LoadingState.Done,\n          data: [frame],\n        };\n      })\n  );\n}\n\nlet liveQueryCounter = 1000;\n\nfunction runGrafanaLiveQuery(\n  target: TestDataQuery,\n  req: DataQueryRequest<TestDataQuery>\n): Observable<DataQueryResponse> {\n  if (!target.channel) {\n    throw new Error(`Missing channel config`);\n  }\n  return getLiveMeasurementsObserver(\n    {\n      scope: LiveChannelScope.Grafana,\n      namespace: 'testdata',\n      path: target.channel,\n    },\n    `testStream.${liveQueryCounter++}`\n  );\n}\n","// Libraries\nimport React, { PureComponent } from 'react';\n\n// Types\nimport { PluginConfigPageProps, DataSourcePluginMeta, DataSourceJsonData } from '@grafana/data';\n\ninterface Props extends PluginConfigPageProps<DataSourcePluginMeta<DataSourceJsonData>> {}\n\nexport class TestInfoTab extends PureComponent<Props> {\n  constructor(props: Props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div>\n        See github for more information about setting up a reproducible test environment.\n        <br />\n        <br />\n        <a\n          className=\"btn btn-inverse\"\n          href=\"https://github.com/grafana/grafana/tree/master/devenv\"\n          target=\"_blank\"\n          rel=\"noopener\"\n        >\n          GitHub\n        </a>\n        <br />\n      </div>\n    );\n  }\n}\n","// Libraries\nimport React, { PureComponent } from 'react';\n\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\n\ntype Props = DataSourcePluginOptionsEditorProps<any>;\n\n/**\n * Empty Config Editor -- settings to save\n */\nexport class ConfigEditor extends PureComponent<Props> {\n  render() {\n    return <div />;\n  }\n}\n","import React, { ChangeEvent } from 'react';\nimport { InlineField, InlineFieldRow, Input, Select } from '@grafana/ui';\nimport { SelectableValue } from '@grafana/data';\nimport { EditorProps } from '../QueryEditor';\nimport { StreamingQuery } from '../types';\n\nconst streamingClientFields = [\n  { label: 'Speed (ms)', id: 'speed', placeholder: 'value', min: 10, step: 10 },\n  { label: 'Spread', id: 'spread', placeholder: 'value', min: 0.5, step: 0.1 },\n  { label: 'Noise', id: 'noise', placeholder: 'value', min: 0, step: 0.1 },\n  { label: 'Bands', id: 'bands', placeholder: 'bands', min: 0, step: 1 },\n];\n\nconst types = [\n  { value: 'signal', label: 'Signal' },\n  { value: 'logs', label: 'Logs' },\n  { value: 'fetch', label: 'Fetch' },\n];\n\nexport const StreamingClientEditor = ({ onChange, query }: EditorProps) => {\n  const onSelectChange = ({ value }: SelectableValue) => {\n    onChange({ target: { name: 'type', value } });\n  };\n\n  // Convert values to numbers before saving\n  const onInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    onChange({ target: { name, value: Number(value) } });\n  };\n\n  return (\n    <InlineFieldRow>\n      <InlineField label=\"Type\" labelWidth={14}>\n        <Select width={32} onChange={onSelectChange} defaultValue={types[0]} options={types} />\n      </InlineField>\n      {query?.stream?.type === 'signal' &&\n        streamingClientFields.map(({ label, id, min, step, placeholder }) => {\n          return (\n            <InlineField label={label} labelWidth={14} key={id}>\n              <Input\n                width={32}\n                type=\"number\"\n                id={`stream.${id}-${query.refId}`}\n                name={id}\n                min={min}\n                step={step}\n                value={query.stream?.[id as keyof StreamingQuery]}\n                placeholder={placeholder}\n                onChange={onInputChange}\n              />\n            </InlineField>\n          );\n        })}\n\n      {query?.stream?.type === 'fetch' && (\n        <InlineField label=\"URL\" labelWidth={14} grow>\n          <Input\n            type=\"text\"\n            name=\"url\"\n            id={`stream.url-${query.refId}`}\n            value={query?.stream?.url}\n            placeholder=\"Fetch URL\"\n            onChange={onChange}\n          />\n        </InlineField>\n      )}\n    </InlineFieldRow>\n  );\n};\n","import React from 'react';\nimport { dateMath, dateTime, SelectableValue } from '@grafana/data';\nimport { Form, InlineField, InlineFieldRow, Input, InputControl, Select, Button } from '@grafana/ui';\nimport { EditorProps } from '../QueryEditor';\nimport { NewPoint } from '../types';\n\nexport interface Props extends EditorProps {\n  onRunQuery: () => void;\n}\n\nexport const ManualEntryEditor = ({ onChange, query, onRunQuery }: Props) => {\n  const addPoint = (point: NewPoint) => {\n    const newPointTime = dateMath.parse(point.newPointTime);\n    const points = [...query.points, [Number(point.newPointValue), newPointTime!.valueOf()]].sort(\n      (a, b) => a[1] - b[1]\n    );\n    onChange({ ...query, points });\n    onRunQuery();\n  };\n\n  const deletePoint = (point: SelectableValue) => {\n    const points = query.points.filter((_, index) => index !== point.value);\n    onChange({ ...query, points });\n    onRunQuery();\n  };\n\n  const points = query.points.map((point, index) => {\n    return {\n      label: dateTime(point[1]).format('MMMM Do YYYY, H:mm:ss') + ' : ' + point[0],\n      value: index,\n    };\n  });\n\n  return (\n    <Form onSubmit={addPoint} maxWidth=\"none\">\n      {({ register, control, watch }) => {\n        const selectedPoint = watch('selectedPoint') as SelectableValue;\n        return (\n          <InlineFieldRow>\n            <InlineField label=\"New value\" labelWidth={14}>\n              <Input\n                width={32}\n                type=\"number\"\n                placeholder=\"value\"\n                id={`newPointValue-${query.refId}`}\n                name=\"newPointValue\"\n                ref={register}\n              />\n            </InlineField>\n            <InlineField label=\"Time\" labelWidth={14}>\n              <Input\n                width={32}\n                id={`newPointTime-${query.refId}`}\n                placeholder=\"time\"\n                name=\"newPointTime\"\n                ref={register}\n                defaultValue={dateTime().format()}\n              />\n            </InlineField>\n            <InlineField>\n              <Button variant=\"secondary\">Add</Button>\n            </InlineField>\n            <InlineField label=\"All values\">\n              <InputControl\n                control={control}\n                as={Select}\n                options={points}\n                width={32}\n                name=\"selectedPoint\"\n                onChange={value => value[0]}\n                placeholder=\"Select point\"\n              />\n            </InlineField>\n\n            {selectedPoint?.value !== undefined && (\n              <InlineField>\n                <Button\n                  type=\"button\"\n                  variant=\"destructive\"\n                  onClick={() => {\n                    control.setValue('selectedPoint', [{ value: undefined, label: 'Select value' }]);\n                    deletePoint(selectedPoint);\n                  }}\n                >\n                  Delete\n                </Button>\n              </InlineField>\n            )}\n          </InlineFieldRow>\n        );\n      }}\n    </Form>\n  );\n};\n","import React from 'react';\nimport { InlineField, InlineFieldRow, Input } from '@grafana/ui';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { EditorProps } from '../QueryEditor';\nimport { TestDataQuery } from '../types';\n\nconst randomWalkFields = [\n  { label: 'Series count', id: 'seriesCount', placeholder: '1', min: 1, step: 1 },\n  { label: 'Start value', id: 'startValue', placeholder: 'auto', step: 1 },\n  { label: 'Spread', id: 'spread', placeholder: '1', min: 0.5, step: 0.1 },\n  { label: 'Noise', id: 'noise', placeholder: '0', min: 0, step: 0.1 },\n  { label: 'Min', id: 'min', placeholder: 'none', step: 0.1 },\n  { label: 'Max', id: 'max', placeholder: 'none', step: 0.1 },\n];\n\nconst testSelectors = selectors.components.DataSource.TestData.QueryTab;\ntype Selector = 'max' | 'min' | 'noise' | 'seriesCount' | 'spread' | 'startValue';\n\nexport const RandomWalkEditor = ({ onChange, query }: EditorProps) => {\n  return (\n    <InlineFieldRow>\n      {randomWalkFields.map(({ label, id, min, step, placeholder }) => {\n        const selector = testSelectors?.[id as Selector];\n        return (\n          <InlineField label={label} labelWidth={14} key={id} aria-label={selector}>\n            <Input\n              width={32}\n              name={id}\n              type=\"number\"\n              id={`randomWalk-${id}-${query.refId}`}\n              min={min}\n              step={step}\n              value={query[id as keyof TestDataQuery] || placeholder}\n              placeholder={placeholder}\n              onChange={onChange}\n            />\n          </InlineField>\n        );\n      })}\n    </InlineFieldRow>\n  );\n};\n","import React, { ChangeEvent } from 'react';\nimport { EditorProps } from '../QueryEditor';\nimport { InlineField, InlineFieldRow, Input } from '@grafana/ui';\nimport { PulseWaveQuery } from '../types';\n\nconst fields = [\n  { label: 'Step', id: 'timeStep', placeholder: '60', tooltip: 'The number of seconds between datapoints.' },\n  {\n    label: 'On Count',\n    id: 'onCount',\n    placeholder: '3',\n    tooltip: 'The number of values within a cycle, at the start of the cycle, that should have the onValue.',\n  },\n  { label: 'Off Count', id: 'offCount', placeholder: '6', tooltip: 'The number of offValues within the cycle.' },\n  {\n    label: 'On Value',\n    id: 'onValue',\n    placeholder: '1',\n    tooltip: 'The value for \"on values\", may be an int, float, or null.',\n  },\n  {\n    label: 'Off Value',\n    id: 'offValue',\n    placeholder: '1',\n    tooltip: 'The value for \"off values\", may be a int, float, or null.',\n  },\n];\n\nexport const PredictablePulseEditor = ({ onChange, query }: EditorProps) => {\n  // Convert values to numbers before saving\n  const onInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n\n    onChange({ target: { name, value: Number(value) } });\n  };\n\n  return (\n    <InlineFieldRow>\n      {fields.map(({ label, id, placeholder, tooltip }) => {\n        return (\n          <InlineField label={label} labelWidth={14} key={id} tooltip={tooltip}>\n            <Input\n              width={32}\n              type=\"number\"\n              name={id}\n              id={`pulseWave.${id}-${query.refId}`}\n              value={query.pulseWave?.[id as keyof PulseWaveQuery]}\n              placeholder={placeholder}\n              onChange={onInputChange}\n            />\n          </InlineField>\n        );\n      })}\n    </InlineFieldRow>\n  );\n};\n","import React from 'react';\nimport { EditorProps } from '../QueryEditor';\nimport { InlineField, InlineFieldRow, Input } from '@grafana/ui';\n\nconst fields = [\n  {\n    label: 'Step',\n    type: 'number',\n    id: 'timeStep',\n    placeholder: '60',\n    tooltip: 'The number of seconds between datapoints.',\n  },\n  {\n    label: 'CSV Values',\n    type: 'text',\n    id: 'valuesCSV',\n    placeholder: '1,2,3,4',\n    tooltip:\n      'Comma separated values. Each value may be an int, float, or null and must not be empty. Whitespace and trailing commas are removed.',\n  },\n];\nexport const CSVWaveEditor = ({ onChange, query }: EditorProps) => {\n  return (\n    <InlineFieldRow>\n      {fields.map(({ label, id, type, placeholder, tooltip }, index) => {\n        const grow = index === fields.length - 1;\n        return (\n          <InlineField label={label} labelWidth={14} key={id} tooltip={tooltip} grow={grow}>\n            <Input\n              width={grow ? undefined : 32}\n              type={type}\n              name={id}\n              id={`csvWave.${id}-${query.refId}`}\n              value={query.csvWave?.[id]}\n              placeholder={placeholder}\n              onChange={onChange}\n            />\n          </InlineField>\n        );\n      })}\n    </InlineFieldRow>\n  );\n};\n","import { defaultQuery as defaultStreamQuery } from './runStreams';\nimport { TestDataQuery } from './types';\n\nexport const defaultPulse: any = {\n  timeStep: 60,\n  onCount: 3,\n  onValue: 2,\n  offCount: 3,\n  offValue: 1,\n};\n\nexport const defaultCSVWave: any = {\n  timeStep: 60,\n  valuesCSV: '0,0,2,2,1,1',\n};\n\nexport const defaultQuery: TestDataQuery = {\n  points: [],\n  stream: defaultStreamQuery,\n  pulseWave: defaultPulse,\n  csvWave: defaultCSVWave,\n  stringInput: '',\n  scenarioId: 'random_walk',\n  lines: 10,\n  refId: '',\n  alias: '',\n};\n","import React from 'react';\nimport { InlineField, InlineFieldRow, Select } from '@grafana/ui';\nimport { SelectableValue } from '@grafana/data';\nimport { EditorProps } from '../QueryEditor';\n\nconst liveTestDataChannels = [\n  {\n    label: 'random-2s-stream',\n    value: 'random-2s-stream',\n    description: 'Random stream with points every 2s',\n  },\n  {\n    label: 'random-flakey-stream',\n    value: 'random-flakey-stream',\n    description: 'Stream that returns data in random intervals',\n  },\n];\n\nexport const GrafanaLiveEditor = ({ onChange, query }: EditorProps) => {\n  const onChannelChange = ({ value }: SelectableValue<string>) => {\n    onChange({ ...query, channel: value });\n  };\n\n  return (\n    <InlineFieldRow>\n      <InlineField label=\"Channel\" labelWidth={14}>\n        <Select\n          width={32}\n          onChange={onChannelChange}\n          placeholder=\"Select channel\"\n          options={liveTestDataChannels}\n          value={liveTestDataChannels.find(f => f.value === query.channel)}\n        />\n      </InlineField>\n    </InlineFieldRow>\n  );\n};\n","// Libraries\nimport React, { ChangeEvent, FormEvent, useMemo, useEffect } from 'react';\nimport { useAsync } from 'react-use';\n\n// Components\nimport { selectors as editorSelectors } from '@grafana/e2e-selectors';\nimport { Input, InlineFieldRow, InlineField, Select, TextArea, Switch } from '@grafana/ui';\nimport { QueryEditorProps, SelectableValue } from '@grafana/data';\nimport { StreamingClientEditor, ManualEntryEditor, RandomWalkEditor } from './components';\n\n// Types\nimport { TestDataDataSource } from './datasource';\nimport { TestDataQuery, Scenario } from './types';\nimport { PredictablePulseEditor } from './components/PredictablePulseEditor';\nimport { CSVWaveEditor } from './components/CSVWaveEditor';\nimport { defaultQuery } from './constants';\nimport { GrafanaLiveEditor } from './components/GrafanaLiveEditor';\n\nconst showLabelsFor = ['random_walk', 'predictable_pulse', 'predictable_csv_wave'];\nconst endpoints = [\n  { value: 'datasources', label: 'Data Sources' },\n  { value: 'search', label: 'Search' },\n  { value: 'annotations', label: 'Annotations' },\n];\n\n// Fields that need to be transformed to numbers\nconst numberFields = ['lines', 'seriesCount', 'timeStep'];\n\nconst selectors = editorSelectors.components.DataSource.TestData.QueryTab;\n\nexport interface EditorProps {\n  onChange: (value: any) => void;\n  query: TestDataQuery;\n}\n\nexport type Props = QueryEditorProps<TestDataDataSource, TestDataQuery>;\n\nexport const QueryEditor = ({ query, datasource, onChange, onRunQuery }: Props) => {\n  query = { ...defaultQuery, ...query };\n\n  const { loading, value: scenarioList } = useAsync<Scenario[]>(async () => {\n    return datasource.getScenarios();\n  }, []);\n\n  const onUpdate = (query: TestDataQuery) => {\n    onChange(query);\n    onRunQuery();\n  };\n\n  useEffect(() => {\n    onUpdate(query);\n  }, []);\n\n  const currentScenario = useMemo(() => scenarioList?.find(scenario => scenario.id === query.scenarioId), [\n    scenarioList,\n    query,\n  ]);\n  const scenarioId = currentScenario?.id;\n\n  const onScenarioChange = (item: SelectableValue<string>) => {\n    const scenario = scenarioList?.find(sc => sc.id === item.value);\n\n    if (!scenario) {\n      return;\n    }\n\n    const update = { ...query, scenarioId: item.value! };\n\n    if (scenario.stringInput) {\n      update.stringInput = scenario.stringInput;\n    }\n\n    if (scenario.id === 'grafana_api') {\n      update.stringInput = 'datasources';\n    } else if (scenario.id === 'streaming_client') {\n      update.stringInput = '';\n    } else if (scenario.id === 'live') {\n      if (!update.channel) {\n        update.channel = 'random-2s-stream'; // default stream\n      }\n    }\n\n    onUpdate(update);\n  };\n\n  const onInputChange = (e: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target as HTMLInputElement | HTMLTextAreaElement;\n    let newValue: Partial<TestDataQuery> = { [name]: value };\n\n    if (name === 'levelColumn') {\n      newValue = { levelColumn: (e.target as HTMLInputElement).checked };\n    } else if (numberFields.includes(name)) {\n      newValue = { [name]: Number(value) };\n    }\n\n    onUpdate({ ...query, ...newValue });\n  };\n\n  const onFieldChange = (field: string) => (e: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target as HTMLInputElement;\n    const formattedValue = numberFields.includes(name) ? Number(value) : value;\n    onUpdate({ ...query, [field]: { ...query[field as keyof TestDataQuery], [name]: formattedValue } });\n  };\n\n  const onEndPointChange = ({ value }: SelectableValue) => {\n    onUpdate({ ...query, stringInput: value });\n  };\n\n  const onStreamClientChange = onFieldChange('stream');\n  const onPulseWaveChange = onFieldChange('pulseWave');\n  const onCSVWaveChange = onFieldChange('csvWave');\n\n  const options = useMemo(\n    () =>\n      (scenarioList || [])\n        .map(item => ({ label: item.name, value: item.id }))\n        .sort((a, b) => a.label.localeCompare(b.label)),\n    [scenarioList]\n  );\n  const showLabels = useMemo(() => showLabelsFor.includes(query.scenarioId), [query]);\n\n  if (loading) {\n    return null;\n  }\n\n  return (\n    <>\n      <InlineFieldRow aria-label={selectors.scenarioSelectContainer}>\n        <InlineField labelWidth={14} label=\"Scenario\">\n          <Select\n            options={options}\n            value={options.find(item => item.value === query.scenarioId)}\n            onChange={onScenarioChange}\n            width={32}\n          />\n        </InlineField>\n        {currentScenario?.stringInput && (\n          <InlineField label=\"String Input\">\n            <Input\n              width={32}\n              id={`stringInput-${query.refId}`}\n              name=\"stringInput\"\n              placeholder={query.stringInput}\n              value={query.stringInput}\n              onChange={onInputChange}\n            />\n          </InlineField>\n        )}\n        <InlineField label=\"Alias\" labelWidth={14}>\n          <Input\n            width={32}\n            id={`alias-${query.refId}`}\n            type=\"text\"\n            placeholder=\"optional\"\n            pattern='[^<>&\\\\\"]+'\n            name=\"alias\"\n            value={query.alias}\n            onChange={onInputChange}\n          />\n        </InlineField>\n        {showLabels && (\n          <InlineField\n            label=\"Labels\"\n            labelWidth={14}\n            tooltip={\n              <>\n                Set labels using a key=value syntax:\n                <br />\n                {`{ key = \"value\", key2 = \"value\" }`}\n                <br />\n                key=\"value\", key2=\"value\"\n                <br />\n                key=value, key2=value\n                <br />\n              </>\n            }\n          >\n            <Input\n              width={32}\n              id={`labels-${query.refId}`}\n              name=\"labels\"\n              onChange={onInputChange}\n              value={query?.labels}\n              placeholder=\"key=value, key2=value2\"\n            />\n          </InlineField>\n        )}\n      </InlineFieldRow>\n\n      {scenarioId === 'manual_entry' && <ManualEntryEditor onChange={onUpdate} query={query} onRunQuery={onRunQuery} />}\n      {scenarioId === 'random_walk' && <RandomWalkEditor onChange={onInputChange} query={query} />}\n      {scenarioId === 'streaming_client' && <StreamingClientEditor onChange={onStreamClientChange} query={query} />}\n      {scenarioId === 'live' && <GrafanaLiveEditor onChange={onUpdate} query={query} />}\n      {scenarioId === 'logs' && (\n        <InlineFieldRow>\n          <InlineField label=\"Lines\" labelWidth={14}>\n            <Input\n              type=\"number\"\n              name=\"lines\"\n              value={query.lines}\n              width={32}\n              onChange={onInputChange}\n              placeholder=\"10\"\n            />\n          </InlineField>\n          <InlineField label=\"Level\" labelWidth={14}>\n            <Switch onChange={onInputChange} name=\"levelColumn\" value={!!query.levelColumn} />\n          </InlineField>\n        </InlineFieldRow>\n      )}\n\n      {scenarioId === 'grafana_api' && (\n        <InlineField labelWidth={14} label=\"Endpoint\">\n          <Select\n            options={endpoints}\n            onChange={onEndPointChange}\n            width={32}\n            value={endpoints.find(ep => ep.value === query.stringInput)}\n          />\n        </InlineField>\n      )}\n\n      {scenarioId === 'arrow' && (\n        <InlineField grow>\n          <TextArea\n            name=\"stringInput\"\n            value={query.stringInput}\n            rows={10}\n            placeholder=\"Copy base64 text data from query result\"\n            onChange={onInputChange}\n          />\n        </InlineField>\n      )}\n\n      {scenarioId === 'predictable_pulse' && <PredictablePulseEditor onChange={onPulseWaveChange} query={query} />}\n      {scenarioId === 'predictable_csv_wave' && <CSVWaveEditor onChange={onCSVWaveChange} query={query} />}\n    </>\n  );\n};\n","import { DataSourcePlugin } from '@grafana/data';\nimport { TestDataDataSource } from './datasource';\nimport { TestInfoTab } from './TestInfoTab';\nimport { ConfigEditor } from './ConfigEditor';\nimport { QueryEditor } from './QueryEditor';\n\nclass TestDataAnnotationsQueryCtrl {\n  annotation: any;\n  constructor() {}\n  static template = '<h2>Annotation scenario</h2>';\n}\n\nexport const plugin = new DataSourcePlugin(TestDataDataSource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor)\n  .setAnnotationQueryCtrl(TestDataAnnotationsQueryCtrl)\n  .addConfigPage({\n    title: 'Setup',\n    icon: 'list-ul',\n    body: TestInfoTab,\n    id: 'setup',\n  });\n"],"sourceRoot":""}