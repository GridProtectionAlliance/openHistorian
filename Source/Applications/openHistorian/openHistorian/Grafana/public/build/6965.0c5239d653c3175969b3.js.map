{"version":3,"file":"6965.0c5239d653c3175969b3.js","mappings":"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","sources":["webpack://grafana/./public/app/plugins/panel/heatmap/ExemplarModalHeader.tsx","webpack://grafana/./public/app/plugins/panel/timeseries/plugins/ExemplarMarker.tsx","webpack://grafana/./public/app/plugins/panel/timeseries/plugins/ExemplarsPlugin.tsx","webpack://grafana/./public/app/plugins/panel/timeseries/plugins/ThresholdDragHandle.tsx","webpack://grafana/./public/app/plugins/panel/timeseries/plugins/ThresholdControlsPlugin.tsx"],"sourcesContent":["import { CSSProperties } from 'react';\nimport * as React from 'react';\n\nimport { CloseButton } from 'app/core/components/CloseButton/CloseButton';\n\nexport function ExemplarModalHeader(props: { onClick: () => void; style?: React.CSSProperties }) {\n  const defaultStyle: CSSProperties = {\n    position: 'relative',\n    top: 'auto',\n    right: 'auto',\n    marginRight: 0,\n  };\n\n  return (\n    <div\n      style={{\n        width: '100%',\n        display: 'flex',\n        justifyContent: 'flex-end',\n        paddingBottom: '6px',\n      }}\n    >\n      <CloseButton onClick={props.onClick} style={props.style ?? defaultStyle} />\n    </div>\n  );\n}\n","import { css, cx } from '@emotion/css';\nimport {\n  autoUpdate,\n  flip,\n  safePolygon,\n  shift,\n  useDismiss,\n  useFloating,\n  useHover,\n  useInteractions,\n} from '@floating-ui/react';\nimport { CSSProperties, useCallback, useEffect, useState } from 'react';\nimport * as React from 'react';\n\nimport { DataFrame, DataFrameFieldIndex, Field, formattedValueToString, GrafanaTheme2, LinkModel } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { TimeZone } from '@grafana/schema';\nimport { Portal, UPlotConfigBuilder, useStyles2 } from '@grafana/ui';\nimport { DisplayValue } from 'app/features/visualization/data-hover/DataHoverView';\nimport { ExemplarHoverView } from 'app/features/visualization/data-hover/ExemplarHoverView';\n\nimport { ExemplarModalHeader } from '../../heatmap/ExemplarModalHeader';\n\ninterface ExemplarMarkerProps {\n  timeZone: TimeZone;\n  dataFrame: DataFrame;\n  dataFrameFieldIndex: DataFrameFieldIndex;\n  config: UPlotConfigBuilder;\n  exemplarColor?: string;\n  clickedExemplarFieldIndex: DataFrameFieldIndex | undefined;\n  setClickedExemplarFieldIndex: React.Dispatch<DataFrameFieldIndex | undefined>;\n}\n\nexport const ExemplarMarker = ({\n  timeZone,\n  dataFrame,\n  dataFrameFieldIndex,\n  config,\n  exemplarColor,\n  clickedExemplarFieldIndex,\n  setClickedExemplarFieldIndex,\n}: ExemplarMarkerProps) => {\n  const styles = useStyles2(getExemplarMarkerStyles);\n  const [isOpen, setIsOpen] = useState(false);\n  const [isLocked, setIsLocked] = useState(false);\n\n  // the order of middleware is important!\n  const middleware = [\n    flip({\n      fallbackAxisSideDirection: 'end',\n      // see https://floating-ui.com/docs/flip#combining-with-shift\n      crossAxis: false,\n      boundary: document.body,\n    }),\n    shift(),\n  ];\n\n  const { context, refs, floatingStyles } = useFloating({\n    open: isOpen,\n    placement: 'bottom',\n    onOpenChange: setIsOpen,\n    middleware,\n    whileElementsMounted: autoUpdate,\n    strategy: 'fixed',\n  });\n\n  const dismiss = useDismiss(context);\n  const hover = useHover(context, {\n    handleClose: safePolygon(),\n    enabled: clickedExemplarFieldIndex === undefined,\n  });\n\n  const { getReferenceProps, getFloatingProps } = useInteractions([dismiss, hover]);\n\n  useEffect(() => {\n    if (\n      !(\n        clickedExemplarFieldIndex?.fieldIndex === dataFrameFieldIndex.fieldIndex &&\n        clickedExemplarFieldIndex?.frameIndex === dataFrameFieldIndex.frameIndex\n      )\n    ) {\n      setIsLocked(false);\n    }\n  }, [clickedExemplarFieldIndex, dataFrameFieldIndex]);\n\n  const getSymbol = () => {\n    const symbols = [\n      <rect\n        fill={exemplarColor}\n        key=\"diamond\"\n        x=\"3.38672\"\n        width=\"4.78985\"\n        height=\"4.78985\"\n        transform=\"rotate(45 3.38672 0)\"\n      />,\n      <path\n        fill={exemplarColor}\n        key=\"x\"\n        d=\"M1.94444 3.49988L0 5.44432L1.55552 6.99984L3.49996 5.05539L5.4444 6.99983L6.99992 5.44431L5.05548 3.49988L6.99983 1.55552L5.44431 0L3.49996 1.94436L1.5556 0L8.42584e-05 1.55552L1.94444 3.49988Z\"\n      />,\n      <path fill={exemplarColor} key=\"triangle\" d=\"M4 0L7.4641 6H0.535898L4 0Z\" />,\n      <rect fill={exemplarColor} key=\"rectangle\" width=\"5\" height=\"5\" />,\n      <path\n        fill={exemplarColor}\n        key=\"pentagon\"\n        d=\"M3 0.5L5.85317 2.57295L4.76336 5.92705H1.23664L0.146831 2.57295L3 0.5Z\"\n      />,\n      <path\n        fill={exemplarColor}\n        key=\"plus\"\n        d=\"m2.35672,4.2425l0,2.357l1.88558,0l0,-2.357l2.3572,0l0,-1.88558l-2.3572,0l0,-2.35692l-1.88558,0l0,2.35692l-2.35672,0l0,1.88558l2.35672,0z\"\n      />,\n    ];\n\n    return symbols[dataFrameFieldIndex.frameIndex % symbols.length];\n  };\n\n  const lockExemplarModal = () => {\n    setIsLocked(true);\n  };\n\n  const renderMarker = useCallback(() => {\n    //Put fields with links on the top\n    const fieldsWithLinks =\n      dataFrame.fields.filter((field) => field.config.links?.length && field.config.links?.length > 0) || [];\n    const orderedDataFrameFields = [\n      ...fieldsWithLinks,\n      ...dataFrame.fields.filter((field) => !fieldsWithLinks.includes(field)),\n    ];\n\n    const onClose = () => {\n      setIsLocked(false);\n      setIsOpen(false);\n      setClickedExemplarFieldIndex(undefined);\n    };\n\n    let displayValues: DisplayValue[] = [];\n    let links: LinkModel[] | undefined = [];\n    orderedDataFrameFields.map((field: Field, i) => {\n      const value = field.values[dataFrameFieldIndex.fieldIndex];\n\n      if (field.config.links?.length) {\n        links?.push(...(field.getLinks?.({ valueRowIndex: dataFrameFieldIndex.fieldIndex }) || []));\n      }\n\n      const fieldDisplay = field.display ? field.display(value) : { text: `${value}`, numeric: +value };\n\n      displayValues.push({\n        name: field.name,\n        value,\n        valueString: formattedValueToString(fieldDisplay),\n        highlight: false,\n      });\n    });\n\n    const exemplarHeaderCustomStyle: CSSProperties = {\n      position: 'relative',\n      top: '35px',\n      right: '5px',\n      marginRight: 0,\n    };\n\n    return (\n      <div className={styles.tooltip} ref={refs.setFloating} style={floatingStyles} {...getFloatingProps()}>\n        {isLocked && <ExemplarModalHeader onClick={onClose} style={exemplarHeaderCustomStyle} />}\n        <ExemplarHoverView displayValues={displayValues} links={links} />\n      </div>\n    );\n  }, [\n    dataFrame.fields,\n    dataFrameFieldIndex,\n    styles,\n    isLocked,\n    setClickedExemplarFieldIndex,\n    floatingStyles,\n    getFloatingProps,\n    refs.setFloating,\n  ]);\n\n  const seriesColor = config\n    .getSeries()\n    .find((s) => s.props.dataFrameFieldIndex?.frameIndex === dataFrameFieldIndex.frameIndex)?.props.lineColor;\n\n  const onExemplarClick = () => {\n    setClickedExemplarFieldIndex(dataFrameFieldIndex);\n    lockExemplarModal();\n  };\n\n  return (\n    <>\n      <div\n        ref={refs.setReference}\n        className={styles.markerWrapper}\n        data-testid={selectors.components.DataSource.Prometheus.exemplarMarker}\n        role=\"button\"\n        tabIndex={0}\n        {...getReferenceProps()}\n        onClick={onExemplarClick}\n        onKeyDown={(e: React.KeyboardEvent) => {\n          if (e.key === 'Enter') {\n            onExemplarClick();\n          }\n        }}\n      >\n        <svg\n          viewBox=\"0 0 7 7\"\n          width=\"7\"\n          height=\"7\"\n          style={{ fill: seriesColor }}\n          className={cx(styles.marble, (isOpen || isLocked) && styles.activeMarble)}\n        >\n          {getSymbol()}\n        </svg>\n      </div>\n      {(isOpen || isLocked) && <Portal>{renderMarker()}</Portal>}\n    </>\n  );\n};\n\nconst getExemplarMarkerStyles = (theme: GrafanaTheme2) => {\n  const bg = theme.isDark ? theme.v1.palette.dark2 : theme.v1.palette.white;\n  const headerBg = theme.isDark ? theme.v1.palette.dark9 : theme.v1.palette.gray5;\n  const shadowColor = theme.isDark ? theme.v1.palette.black : theme.v1.palette.white;\n  const tableBgOdd = theme.isDark ? theme.v1.palette.dark3 : theme.v1.palette.gray6;\n\n  return {\n    markerWrapper: css({\n      padding: '0 4px 4px 4px',\n      width: '8px',\n      height: '8px',\n      boxSizing: 'content-box',\n      transform: 'translate3d(-50%, 0, 0)',\n      '&:hover': {\n        '> svg': {\n          transform: 'scale(1.3)',\n          opacity: 1,\n          filter: 'drop-shadow(0 0 8px rgba(0, 0, 0, 0.5))',\n        },\n      },\n    }),\n    marker: css({\n      width: 0,\n      height: 0,\n      borderLeft: '4px solid transparent',\n      borderRight: '4px solid transparent',\n      borderBottom: `4px solid ${theme.v1.palette.red}`,\n      pointerEvents: 'none',\n    }),\n    wrapper: css({\n      background: bg,\n      border: `1px solid ${headerBg}`,\n      borderRadius: theme.shape.borderRadius(2),\n      boxShadow: `0 0 20px ${shadowColor}`,\n      padding: theme.spacing(1),\n    }),\n    exemplarsTable: css({\n      width: '100%',\n      'tr td': {\n        padding: '5px 10px',\n        whiteSpace: 'nowrap',\n        borderBottom: `4px solid ${theme.components.panel.background}`,\n      },\n      tr: {\n        backgroundColor: theme.colors.background.primary,\n        '&:nth-child(even)': {\n          backgroundColor: tableBgOdd,\n        },\n      },\n    }),\n    valueWrapper: css({\n      display: 'flex',\n      flexDirection: 'row',\n      flexWrap: 'wrap',\n      columnGap: theme.spacing(1),\n      '> span': {\n        flexGrow: 0,\n      },\n      '> *': {\n        flex: '1 1',\n        alignSelf: 'center',\n      },\n    }),\n    tooltip: css({\n      background: 'none',\n      padding: 0,\n      overflowY: 'auto',\n      maxHeight: '95vh',\n    }),\n    header: css({\n      background: headerBg,\n      padding: '6px 10px',\n      display: 'flex',\n    }),\n    title: css({\n      fontWeight: theme.typography.fontWeightMedium,\n      paddingRight: theme.spacing(2),\n      overflow: 'hidden',\n      display: 'inline-block',\n      whiteSpace: 'nowrap',\n      textOverflow: 'ellipsis',\n      flexGrow: 1,\n    }),\n    body: css({\n      fontWeight: theme.typography.fontWeightMedium,\n      borderRadius: theme.shape.borderRadius(2),\n      overflow: 'hidden',\n    }),\n    marble: css({\n      display: 'block',\n      opacity: 0.5,\n      [theme.transitions.handleMotion('no-preference')]: {\n        transition: 'transform 0.15s ease-out',\n      },\n    }),\n    activeMarble: css({\n      transform: 'scale(1.3)',\n      opacity: 1,\n      filter: 'drop-shadow(0 0 8px rgba(0, 0, 0, 0.5))',\n    }),\n  };\n};\n","import { useCallback, useLayoutEffect, useRef, useState } from 'react';\nimport uPlot from 'uplot';\n\nimport {\n  DataFrame,\n  DataFrameFieldIndex,\n  Labels,\n  TIME_SERIES_TIME_FIELD_NAME,\n  TIME_SERIES_VALUE_FIELD_NAME,\n  TimeZone,\n} from '@grafana/data';\nimport { FIXED_UNIT, EventsCanvas, UPlotConfigBuilder } from '@grafana/ui';\n\nimport { ExemplarMarker } from './ExemplarMarker';\n\ninterface ExemplarsPluginProps {\n  config: UPlotConfigBuilder;\n  exemplars: DataFrame[];\n  timeZone: TimeZone;\n  visibleSeries?: VisibleExemplarLabels;\n}\n\nexport const ExemplarsPlugin = ({ exemplars, timeZone, config, visibleSeries }: ExemplarsPluginProps) => {\n  const plotInstance = useRef<uPlot>();\n\n  const [lockedExemplarFieldIndex, setLockedExemplarFieldIndex] = useState<DataFrameFieldIndex | undefined>();\n\n  useLayoutEffect(() => {\n    config.addHook('init', (u) => {\n      plotInstance.current = u;\n    });\n  }, [config]);\n\n  const mapExemplarToXYCoords = useCallback((dataFrame: DataFrame, dataFrameFieldIndex: DataFrameFieldIndex) => {\n    const time = dataFrame.fields.find((f) => f.name === TIME_SERIES_TIME_FIELD_NAME);\n    const value = dataFrame.fields.find((f) => f.name === TIME_SERIES_VALUE_FIELD_NAME);\n\n    if (!time || !value || !plotInstance.current) {\n      return undefined;\n    }\n\n    // Filter x, y scales out\n    const yScale =\n      Object.keys(plotInstance.current.scales).find((scale) => !['x', 'y'].some((key) => key === scale)) ?? FIXED_UNIT;\n\n    const yMin = plotInstance.current.scales[yScale].min;\n    const yMax = plotInstance.current.scales[yScale].max;\n\n    let y = value.values[dataFrameFieldIndex.fieldIndex];\n    // To not to show exemplars outside of the graph we set the y value to min if it is smaller and max if it is bigger than the size of the graph\n    if (yMin != null && y < yMin) {\n      y = yMin;\n    }\n\n    if (yMax != null && y > yMax) {\n      y = yMax;\n    }\n\n    return {\n      x: plotInstance.current.valToPos(time.values[dataFrameFieldIndex.fieldIndex], 'x'),\n      y: plotInstance.current.valToPos(y, yScale),\n    };\n  }, []);\n\n  const renderMarker = useCallback(\n    (dataFrame: DataFrame, dataFrameFieldIndex: DataFrameFieldIndex) => {\n      const showMarker =\n        visibleSeries !== undefined ? showExemplarMarker(visibleSeries, dataFrame, dataFrameFieldIndex) : true;\n\n      const markerColor =\n        visibleSeries !== undefined ? getExemplarColor(dataFrame, dataFrameFieldIndex, visibleSeries) : undefined;\n\n      if (!showMarker) {\n        return <></>;\n      }\n\n      return (\n        <ExemplarMarker\n          setClickedExemplarFieldIndex={setLockedExemplarFieldIndex}\n          clickedExemplarFieldIndex={lockedExemplarFieldIndex}\n          timeZone={timeZone}\n          dataFrame={dataFrame}\n          dataFrameFieldIndex={dataFrameFieldIndex}\n          config={config}\n          exemplarColor={markerColor}\n        />\n      );\n    },\n    [config, timeZone, visibleSeries, setLockedExemplarFieldIndex, lockedExemplarFieldIndex]\n  );\n\n  return (\n    <EventsCanvas\n      config={config}\n      id=\"exemplars\"\n      events={exemplars}\n      renderEventMarker={renderMarker}\n      mapEventToXYCoords={mapExemplarToXYCoords}\n    />\n  );\n};\n\nexport type VisibleExemplarLabels = { labels: LabelWithExemplarUIData[]; totalSeriesCount: number };\n/**\n * Get labels that are currently visible/active in the legend\n */\nexport const getVisibleLabels = (config: UPlotConfigBuilder, frames: DataFrame[] | null): VisibleExemplarLabels => {\n  const visibleSeries = config.series.filter((series) => series.props.show);\n  const visibleLabels: LabelWithExemplarUIData[] = [];\n  if (frames?.length) {\n    visibleSeries.forEach((plotInstance) => {\n      const frameIndex = plotInstance.props?.dataFrameFieldIndex?.frameIndex;\n      const fieldIndex = plotInstance.props?.dataFrameFieldIndex?.fieldIndex;\n\n      if (frameIndex !== undefined && fieldIndex !== undefined) {\n        const field = frames[frameIndex]?.fields[fieldIndex];\n        if (field?.labels) {\n          // Note that this may be an empty object in the case of a metric being rendered with no labels\n          visibleLabels.push({\n            labels: field.labels,\n            color: plotInstance.props?.lineColor ?? '',\n          });\n        }\n      }\n    });\n  }\n\n  return { labels: visibleLabels, totalSeriesCount: config.series.length };\n};\n\ninterface LabelWithExemplarUIData {\n  labels: Labels;\n  color?: string;\n}\n\n/**\n * Get color of active series in legend\n */\nconst getExemplarColor = (\n  dataFrame: DataFrame,\n  dataFrameFieldIndex: DataFrameFieldIndex,\n  visibleLabels: VisibleExemplarLabels\n) => {\n  let exemplarColor;\n  visibleLabels.labels.some((visibleLabel) => {\n    const labelKeys = Object.keys(visibleLabel.labels);\n    const fields = dataFrame.fields.filter((field) => {\n      return labelKeys.find((labelKey) => labelKey === field.name);\n    });\n    if (fields.length) {\n      const hasMatch = fields.every((field, index, fields) => {\n        const value = field.values[dataFrameFieldIndex.fieldIndex];\n        return visibleLabel.labels[field.name] === value;\n      });\n\n      if (hasMatch) {\n        exemplarColor = visibleLabel.color;\n        return true;\n      }\n    }\n    return false;\n  });\n  return exemplarColor;\n};\n\n/**\n * Determine if the current exemplar marker is filtered by what series are selected in the legend UI\n */\nconst showExemplarMarker = (\n  visibleSeries: VisibleExemplarLabels,\n  dataFrame: DataFrame,\n  dataFrameFieldIndex: DataFrameFieldIndex\n) => {\n  let showMarker = false;\n  // If all series are visible, don't filter any exemplars\n  if (visibleSeries.labels.length === visibleSeries.totalSeriesCount) {\n    showMarker = true;\n  } else {\n    visibleSeries.labels.some((visibleLabel) => {\n      // Get the label names\n      const labelKeys = Object.keys(visibleLabel.labels);\n\n      // If there aren't any labels, the graph is only displaying a single series with exemplars, let's show all exemplars in this case as well\n      if (Object.keys(visibleLabel.labels).length === 0) {\n        showMarker = true;\n      } else {\n        // If there are labels, lets only show the exemplars with labels associated with series that are currently visible\n        const fields = dataFrame.fields.filter((field) => {\n          return labelKeys.find((labelKey) => labelKey === field.name);\n        });\n\n        if (fields.length) {\n          // Check to see if at least one value matches each field\n          showMarker = visibleSeries.labels.some((series) => {\n            return Object.keys(series.labels).every((label) => {\n              const value = series.labels[label];\n              return fields.find((field) => field.values[dataFrameFieldIndex.fieldIndex] === value);\n            });\n          });\n        }\n      }\n      return showMarker;\n    });\n  }\n  return showMarker;\n};\n","import { css } from '@emotion/css';\nimport { noop } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport Draggable, { DraggableBounds } from 'react-draggable';\n\nimport { Threshold, GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2, useTheme2 } from '@grafana/ui';\n\ntype OutOfBounds = 'top' | 'bottom' | 'none';\n\ninterface ThresholdDragHandleProps {\n  step: Threshold;\n  y: number;\n  dragBounds: DraggableBounds;\n  mapPositionToValue: (y: number) => number;\n  onChange?: (value: number) => void;\n  formatValue: (value: number) => string;\n}\n\nexport const ThresholdDragHandle = ({\n  step,\n  y,\n  dragBounds,\n  mapPositionToValue,\n  formatValue,\n  onChange,\n}: ThresholdDragHandleProps) => {\n  const theme = useTheme2();\n  let yPos = y;\n  let outOfBounds: OutOfBounds = 'none';\n\n  if (y < (dragBounds.top ?? 0)) {\n    outOfBounds = 'top';\n  }\n\n  // there seems to be a 22px offset at the bottom where the threshold line is still drawn\n  // this is probably offset by the size of the x-axis component\n  if (y > (dragBounds.bottom ?? 0) + 22) {\n    outOfBounds = 'bottom';\n  }\n\n  if (outOfBounds === 'bottom') {\n    yPos = dragBounds.bottom ?? y;\n  }\n\n  if (outOfBounds === 'top') {\n    yPos = dragBounds.top ?? y;\n  }\n\n  const disabled = typeof onChange !== 'function';\n  const styles = useStyles2(getStyles, step, outOfBounds, disabled);\n  const [currentValue, setCurrentValue] = useState(step.value);\n\n  const textColor = useMemo(() => {\n    return theme.colors.getContrastText(theme.visualization.getColorByName(step.color));\n  }, [step.color, theme]);\n\n  return (\n    <Draggable\n      axis=\"y\"\n      grid={[1, 1]}\n      disabled={disabled}\n      onStop={\n        disabled\n          ? noop\n          : (_e, d) => {\n              onChange(mapPositionToValue(d.lastY));\n              // as of https://github.com/react-grid-layout/react-draggable/issues/390#issuecomment-623237835\n              return false;\n            }\n      }\n      onDrag={(_e, d) => setCurrentValue(mapPositionToValue(d.lastY))}\n      position={{ x: 0, y: yPos }}\n      bounds={dragBounds}\n    >\n      <div className={styles.handle} style={{ color: textColor }}>\n        <span className={styles.handleText}>{formatValue(currentValue)}</span>\n      </div>\n    </Draggable>\n  );\n};\n\nThresholdDragHandle.displayName = 'ThresholdDragHandle';\n\nconst getStyles = (theme: GrafanaTheme2, step: Threshold, outOfBounds: OutOfBounds, disabled?: boolean) => {\n  const mainColor = theme.visualization.getColorByName(step.color);\n  const arrowStyles = getArrowStyles(outOfBounds);\n  const isOutOfBounds = outOfBounds !== 'none';\n\n  return {\n    handle: css`\n      display: flex;\n      align-items: center;\n      position: absolute;\n      left: 0;\n      width: calc(100% - 9px);\n      height: 18px;\n      margin-top: -9px;\n      border-color: ${mainColor};\n      cursor: ${disabled ? 'initial' : 'grab'};\n      border-top-right-radius: ${theme.shape.radius.default};\n      border-bottom-right-radius: ${theme.shape.radius.default};\n      ${isOutOfBounds &&\n      css`\n        margin-top: 0;\n        border-radius: ${theme.shape.radius.default};\n      `}\n      background: ${mainColor};\n      font-size: ${theme.typography.bodySmall.fontSize};\n      &:before {\n        ${arrowStyles};\n      }\n    `,\n    handleText: css`\n      text-align: center;\n      width: 100%;\n      display: block;\n      text-overflow: ellipsis;\n      white-space: nowrap;\n      overflow: hidden;\n    `,\n  };\n};\n\nfunction getArrowStyles(outOfBounds: OutOfBounds) {\n  const inBounds = outOfBounds === 'none';\n\n  const triangle = (size: number) => css`\n    content: '';\n    position: absolute;\n\n    bottom: 0;\n    top: 0;\n    width: 0;\n    height: 0;\n    left: 0;\n\n    border-right-style: solid;\n    border-right-width: ${size}px;\n    border-right-color: inherit;\n    border-top: ${size}px solid transparent;\n    border-bottom: ${size}px solid transparent;\n  `;\n\n  if (inBounds) {\n    return css`\n      ${triangle(9)};\n      left: -9px;\n    `;\n  }\n\n  if (outOfBounds === 'top') {\n    return css`\n      ${triangle(5)};\n      left: calc(50% - 2.5px);\n      top: -7px;\n      transform: rotate(90deg);\n    `;\n  }\n\n  if (outOfBounds === 'bottom') {\n    return css`\n      ${triangle(5)};\n      left: calc(50% - 2.5px);\n      top: calc(100% - 2.5px);\n      transform: rotate(-90deg);\n    `;\n  }\n\n  return '';\n}\n","import { useState, useLayoutEffect, useMemo, useRef } from 'react';\nimport uPlot from 'uplot';\n\nimport { FieldConfigSource, ThresholdsConfig, getValueFormat, FieldType } from '@grafana/data';\nimport { UPlotConfigBuilder } from '@grafana/ui';\nimport { buildScaleKey } from '@grafana/ui/src/components/uPlot/internal';\n\nimport { ThresholdDragHandle } from './ThresholdDragHandle';\n\nconst GUTTER_SIZE = 60;\n\ninterface ThresholdControlsPluginProps {\n  config: UPlotConfigBuilder;\n  fieldConfig: FieldConfigSource;\n  onThresholdsChange?: (thresholds: ThresholdsConfig) => void;\n}\n\nexport const ThresholdControlsPlugin = ({ config, fieldConfig, onThresholdsChange }: ThresholdControlsPluginProps) => {\n  const plotInstance = useRef<uPlot>();\n  const [renderToken, setRenderToken] = useState(0);\n\n  useLayoutEffect(() => {\n    config.setPadding([0, GUTTER_SIZE, 0, 0]);\n\n    config.addHook('init', (u) => {\n      plotInstance.current = u;\n    });\n    // render token required to re-render handles when resizing uPlot\n    config.addHook('draw', () => {\n      setRenderToken((s) => s + 1);\n    });\n  }, [config]);\n\n  const thresholdHandles = useMemo(() => {\n    const plot = plotInstance.current;\n\n    if (!plot) {\n      return null;\n    }\n    const thresholds = fieldConfig.defaults.thresholds;\n    if (!thresholds) {\n      return null;\n    }\n    const scale = buildScaleKey(fieldConfig.defaults, FieldType.number);\n\n    const decimals = fieldConfig.defaults.decimals;\n    const handles = [];\n\n    for (let i = 0; i < thresholds.steps.length; i++) {\n      const step = thresholds.steps[i];\n      const yPos = plot.valToPos(step.value, scale);\n\n      if (Number.isNaN(yPos) || !Number.isFinite(yPos)) {\n        continue;\n      }\n\n      const height = plot.bbox.height / window.devicePixelRatio;\n\n      const isEditable = typeof onThresholdsChange === 'function';\n\n      const onChange = isEditable\n        ? (value: number) => {\n            const nextSteps = [\n              ...thresholds.steps.slice(0, i),\n              ...thresholds.steps.slice(i + 1),\n              { ...thresholds.steps[i], value },\n            ].sort((a, b) => a.value - b.value);\n\n            onThresholdsChange({\n              ...thresholds,\n              steps: nextSteps,\n            });\n          }\n        : undefined;\n\n      const handle = (\n        <ThresholdDragHandle\n          key={`${step.value}-${i}`}\n          step={step}\n          y={yPos}\n          dragBounds={{ top: 0, bottom: height }}\n          mapPositionToValue={(y) => plot.posToVal(y, scale)}\n          formatValue={(v) => getValueFormat(scale)(v, decimals).text}\n          onChange={onChange}\n        />\n      );\n\n      handles.push(handle);\n    }\n\n    return handles;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [renderToken, fieldConfig, onThresholdsChange]);\n\n  if (!plotInstance.current) {\n    return null;\n  }\n\n  return (\n    <div\n      style={{\n        position: 'absolute',\n        overflow: 'visible',\n        left: `${(plotInstance.current.bbox.left + plotInstance.current.bbox.width) / window.devicePixelRatio}px`,\n        top: `${plotInstance.current.bbox.top / window.devicePixelRatio}px`,\n        width: `${GUTTER_SIZE}px`,\n        height: `${plotInstance.current.bbox.height / window.devicePixelRatio}px`,\n      }}\n    >\n      {thresholdHandles}\n    </div>\n  );\n};\n\nThresholdControlsPlugin.displayName = 'ThresholdControlsPlugin';\n"],"names":["ExemplarModalHeader","props","defaultStyle","CloseButton","ExemplarMarker","timeZone","dataFrame","dataFrameFieldIndex","config","exemplarColor","clickedExemplarFieldIndex","setClickedExemplarFieldIndex","styles","getExemplarMarkerStyles","isOpen","setIsOpen","isLocked","setIsLocked","middleware","context","refs","floatingStyles","dismiss","hover","getReferenceProps","getFloatingProps","getSymbol","symbols","lockExemplarModal","renderMarker","fieldsWithLinks","field","orderedDataFrameFields","onClose","displayValues","links","i","value","fieldDisplay","exemplarHeaderCustomStyle","ExemplarHoverView","seriesColor","s","onExemplarClick","selectors","e","Portal","theme","bg","headerBg","shadowColor","tableBgOdd","ExemplarsPlugin","exemplars","visibleSeries","plotInstance","lockedExemplarFieldIndex","setLockedExemplarFieldIndex","u","mapExemplarToXYCoords","time","f","yScale","scale","key","yMin","yMax","y","showMarker","showExemplarMarker","markerColor","getExemplarColor","EventsCanvas","getVisibleLabels","frames","series","visibleLabels","frameIndex","fieldIndex","visibleLabel","labelKeys","fields","labelKey","index","label","ThresholdDragHandle","step","dragBounds","mapPositionToValue","formatValue","onChange","yPos","outOfBounds","disabled","getStyles","currentValue","setCurrentValue","textColor","_e","d","mainColor","arrowStyles","getArrowStyles","isOutOfBounds","inBounds","triangle","size","GUTTER_SIZE","ThresholdControlsPlugin","fieldConfig","onThresholdsChange","renderToken","setRenderToken","thresholdHandles","plot","thresholds","decimals","handles","height","nextSteps","a","b","handle","v"],"sourceRoot":""}