{"version":3,"file":"SoloPanelPageOld.d95e3159fd334b9b625e.js","mappings":"kSAsBA,MAAMA,EAAmBC,IAAuB,CAC9C,UAAWA,EAAM,UAAU,SAAS,CACtC,GAEMC,EAAqB,CACzB,cAAa,IACf,EAEMC,KAAY,WAAQH,EAAiBE,CAAkB,EAUhDE,EAAgB,CAAC,CAAE,MAAAC,EAAO,YAAAC,EAAa,UAAAC,EAAW,cAAAC,CAAc,IAAa,CACxF,KAAM,CAACC,EAAOC,CAAQ,KAAI,YAAyB,IAAI,EACjD,CAACC,EAAUC,CAAW,KAAI,YAAS,EAAK,EACxC,CAAE,YAAAC,CAAY,KAAI,MAAW,EAE7B,CAAE,KAAAC,EAAM,IAAAC,EAAK,KAAAC,CAAK,KAAI,KAAU,KAEtC,aAAU,IAAM,CACdR,EAAc,CACZ,QAASM,EACT,OAAQC,EACR,QAASC,EACT,UAAWX,EAAM,UACjB,OAAQ,GACR,cAAeQ,CACjB,CAAC,CACH,EAAG,CAACC,EAAMC,EAAKC,EAAMX,EAAM,UAAWG,EAAeK,CAAW,CAAC,EAEjE,MAAMI,KAAa,eAAY,IACtB,SAASX,EAAY,SAAW,IAAK,EAAE,EAC7C,CAACA,EAAY,OAAO,CAAC,EAExB,sBAAU,IAAM,CACd,GAAIC,EAAW,CACb,MAAME,EAAQF,EAAU,gBAAgBD,EAAY,OAAO,EAE3D,GAAI,CAACG,EAAO,CACVG,EAAY,EAAI,EAChB,MACF,CAEIH,GACFF,EAAU,cAAcE,CAAK,EAE/BC,EAASD,CAAK,EACdF,EAAU,cAAcE,CAAK,CAC/B,CACF,EAAG,CAACF,EAAWD,EAAY,OAAO,CAAC,KAGjC,OAACY,EAAA,CACC,UAAAX,EACA,SAAAI,EACA,MAAAF,EACA,QAASQ,EAAW,EACpB,SAAUX,EAAY,SACxB,CAEJ,EAQaY,EAAY,CAAC,CAAE,UAAAX,EAAW,SAAAI,EAAU,MAAAF,EAAO,QAAAU,EAAS,SAAAC,CAAS,IAAsB,CAC9F,MAAMC,KAAS,MAAWC,CAAS,EACnC,OAAIX,KACK,OAAC,IAAK,CAAC,SAAS,QAAQ,MAAO,iBAAiBQ,CAAO,aAAc,EAG1E,CAACV,GAAS,CAACF,KACN,OAAC,OAAI,4CAAgC,KAI5C,OAAC,OAAI,UAAWc,EAAO,UACrB,mBAAC,KAAS,CACP,UAAC,CAAE,MAAAE,EAAO,OAAAC,CAAO,IACZD,IAAU,EACL,QAGP,OAAC,KACC,SAAUd,EAAM,IAChB,MAAAc,EACA,OAAAC,EACA,UAAAjB,EACA,MAAAE,EACA,UAAW,GACX,UAAW,GACX,KAAM,GACN,SAAAW,EACA,SAAU,GACZ,CAEJ,CACF,EACF,CAEJ,EAEA,EAAejB,EAAUC,CAAa,EAEhCkB,EAAaG,IAA0B,CAC3C,aAAW,OAAI,CACb,SAAU,QACV,OAAQ,EACR,MAAO,EACP,OAAQ,EACR,KAAM,EACN,IAAK,EACL,MAAO,OACP,OAAQ,MACV,CAAC,CACH,E","sources":["webpack://grafana/./public/app/features/dashboard/containers/SoloPanelPage.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport { useCallback, useEffect, useState } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { useParams } from 'react-router-dom-v5-compat';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, useStyles2 } from '@grafana/ui';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { DashboardModel, PanelModel } from 'app/features/dashboard/state';\nimport { StoreState } from 'app/types';\n\nimport { useGrafana } from '../../../core/context/GrafanaContext';\nimport { DashboardPanel } from '../dashgrid/DashboardPanel';\nimport { initDashboard } from '../state/initDashboard';\n\nexport interface DashboardPageRouteParams {\n  uid?: string;\n  type?: string;\n  slug?: string;\n}\n\nconst mapStateToProps = (state: StoreState) => ({\n  dashboard: state.dashboard.getModel(),\n});\n\nconst mapDispatchToProps = {\n  initDashboard,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = GrafanaRouteComponentProps<DashboardPageRouteParams, { panelId: string; timezone?: string }> &\n  ConnectedProps<typeof connector>;\n\nexport interface State {\n  panel: PanelModel | null;\n  notFound: boolean;\n}\n\nexport const SoloPanelPage = ({ route, queryParams, dashboard, initDashboard }: Props) => {\n  const [panel, setPanel] = useState<State['panel']>(null);\n  const [notFound, setNotFound] = useState(false);\n  const { keybindings } = useGrafana();\n\n  const { slug, uid, type } = useParams();\n\n  useEffect(() => {\n    initDashboard({\n      urlSlug: slug,\n      urlUid: uid,\n      urlType: type,\n      routeName: route.routeName,\n      fixUrl: false,\n      keybindingSrv: keybindings,\n    });\n  }, [slug, uid, type, route.routeName, initDashboard, keybindings]);\n\n  const getPanelId = useCallback(() => {\n    return parseInt(queryParams.panelId ?? '0', 10);\n  }, [queryParams.panelId]);\n\n  useEffect(() => {\n    if (dashboard) {\n      const panel = dashboard.getPanelByUrlId(queryParams.panelId);\n\n      if (!panel) {\n        setNotFound(true);\n        return;\n      }\n\n      if (panel) {\n        dashboard.exitViewPanel(panel);\n      }\n      setPanel(panel);\n      dashboard.initViewPanel(panel);\n    }\n  }, [dashboard, queryParams.panelId]);\n\n  return (\n    <SoloPanel\n      dashboard={dashboard}\n      notFound={notFound}\n      panel={panel}\n      panelId={getPanelId()}\n      timezone={queryParams.timezone}\n    />\n  );\n};\n\nexport interface SoloPanelProps extends State {\n  dashboard: DashboardModel | null;\n  panelId: number;\n  timezone?: string;\n}\n\nexport const SoloPanel = ({ dashboard, notFound, panel, panelId, timezone }: SoloPanelProps) => {\n  const styles = useStyles2(getStyles);\n  if (notFound) {\n    return <Alert severity=\"error\" title={`Panel with id ${panelId} not found`} />;\n  }\n\n  if (!panel || !dashboard) {\n    return <div>Loading & initializing dashboard</div>;\n  }\n\n  return (\n    <div className={styles.container}>\n      <AutoSizer>\n        {({ width, height }) => {\n          if (width === 0) {\n            return null;\n          }\n          return (\n            <DashboardPanel\n              stateKey={panel.key}\n              width={width}\n              height={height}\n              dashboard={dashboard}\n              panel={panel}\n              isEditing={false}\n              isViewing={true}\n              lazy={false}\n              timezone={timezone}\n              hideMenu={true}\n            />\n          );\n        }}\n      </AutoSizer>\n    </div>\n  );\n};\n\nexport default connector(SoloPanelPage);\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css({\n    position: 'fixed',\n    bottom: 0,\n    right: 0,\n    margin: 0,\n    left: 0,\n    top: 0,\n    width: '100%',\n    height: '100%',\n  }),\n});\n"],"names":["mapStateToProps","state","mapDispatchToProps","connector","SoloPanelPage","route","queryParams","dashboard","initDashboard","panel","setPanel","notFound","setNotFound","keybindings","slug","uid","type","getPanelId","SoloPanel","panelId","timezone","styles","getStyles","width","height","theme"],"sourceRoot":""}