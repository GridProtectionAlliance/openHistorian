{"version":3,"file":"MuteTimings.c84d3cfa3eac28f2c31a.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/utils/mute-timings.ts","webpack://grafana/./public/app/features/alerting/unified/components/mute-timings/MuteTimingTimeRange.tsx","webpack://grafana/./public/app/features/alerting/unified/components/mute-timings/MuteTimingTimeInterval.tsx","webpack://grafana/./public/app/features/alerting/unified/components/mute-timings/MuteTimingForm.tsx","webpack://grafana/./public/app/features/alerting/unified/MuteTimings.tsx","webpack://grafana/./public/app/features/alerting/unified/components/Provisioning.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertManagerSourceName.ts","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertManagerSources.ts"],"sourcesContent":["import { omitBy, isUndefined } from 'lodash';\n\nimport { MuteTimeInterval, TimeInterval } from 'app/plugins/datasource/alertmanager/types';\n\nimport { MuteTimingFields, MuteTimingIntervalFields } from '../types/mute-timing-form';\n\nexport const DAYS_OF_THE_WEEK = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];\n\nexport const MONTHS = [\n  'january',\n  'february',\n  'march',\n  'april',\n  'may',\n  'june',\n  'july',\n  'august',\n  'september',\n  'october',\n  'november',\n  'december',\n];\n\nexport const defaultTimeInterval: MuteTimingIntervalFields = {\n  times: [{ start_time: '', end_time: '' }],\n  weekdays: '',\n  days_of_month: '',\n  months: '',\n  years: '',\n};\n\nexport const validateArrayField = (value: string, validateValue: (input: string) => boolean, invalidText: string) => {\n  if (value) {\n    return (\n      value\n        .split(',')\n        .map((x) => x.trim())\n        .every((entry) => entry.split(':').every(validateValue)) || invalidText\n    );\n  } else {\n    return true;\n  }\n};\n\nconst convertStringToArray = (str: string) => {\n  return str ? str.split(',').map((s) => s.trim()) : undefined;\n};\n\nexport const createMuteTiming = (fields: MuteTimingFields): MuteTimeInterval => {\n  const timeIntervals: TimeInterval[] = fields.time_intervals.map(\n    ({ times, weekdays, days_of_month, months, years }) => {\n      const interval = {\n        times: times.filter(({ start_time, end_time }) => !!start_time && !!end_time),\n        weekdays: convertStringToArray(weekdays)?.map((v) => v.toLowerCase()),\n        days_of_month: convertStringToArray(days_of_month),\n        months: convertStringToArray(months),\n        years: convertStringToArray(years),\n      };\n\n      return omitBy(interval, isUndefined);\n    }\n  );\n\n  return {\n    name: fields.name,\n    time_intervals: timeIntervals,\n  };\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\nimport { useFieldArray, useFormContext } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Field, InlineFieldRow, InlineField, Input, Button, IconButton, useStyles2 } from '@grafana/ui';\n\nimport { MuteTimingFields } from '../../types/mute-timing-form';\n\ninterface Props {\n  intervalIndex: number;\n}\n\nexport const MuteTimingTimeRange = ({ intervalIndex }: Props) => {\n  const styles = useStyles2(getStyles);\n  const { register, formState } = useFormContext<MuteTimingFields>();\n\n  const {\n    fields: timeRanges,\n    append: addTimeRange,\n    remove: removeTimeRange,\n  } = useFieldArray<MuteTimingFields>({\n    name: `time_intervals.${intervalIndex}.times`,\n  });\n\n  const validateTime = (timeString: string) => {\n    if (!timeString) {\n      return true;\n    }\n    const [hour, minutes] = timeString.split(':').map((x) => parseInt(x, 10));\n    const isHourValid = hour >= 0 && hour < 25;\n    const isMinuteValid = minutes > -1 && minutes < 60;\n    const isTimeValid = hour === 24 ? minutes === 0 : isHourValid && isMinuteValid;\n\n    return isTimeValid || 'Time is invalid';\n  };\n\n  const formErrors = formState.errors.time_intervals?.[intervalIndex];\n  const timeRangeInvalid = formErrors?.times?.some((value) => value?.start_time || value?.end_time) ?? false;\n\n  return (\n    <div>\n      <Field\n        className={styles.field}\n        label=\"Time range\"\n        description=\"The time inclusive of the starting time and exclusive of the end time in UTC\"\n        invalid={timeRangeInvalid}\n        error={timeRangeInvalid ? 'Times must be between 00:00 and 24:00 UTC' : ''}\n      >\n        <>\n          {timeRanges.map((timeRange, index) => {\n            return (\n              <div className={styles.timeRange} key={timeRange.id}>\n                <InlineFieldRow>\n                  <InlineField label=\"Start time\" invalid={!!formErrors?.times?.[index]?.start_time}>\n                    <Input\n                      {...register(`time_intervals.${intervalIndex}.times.${index}.start_time`, {\n                        validate: validateTime,\n                      })}\n                      className={styles.timeRangeInput}\n                      // @ts-ignore react-hook-form doesn't handle nested field arrays well\n                      defaultValue={timeRange.start_time}\n                      placeholder=\"HH:MM\"\n                      data-testid=\"mute-timing-starts-at\"\n                    />\n                  </InlineField>\n                  <InlineField label=\"End time\" invalid={!!formErrors?.times?.[index]?.end_time}>\n                    <Input\n                      {...register(`time_intervals.${intervalIndex}.times.${index}.end_time`, {\n                        validate: validateTime,\n                      })}\n                      className={styles.timeRangeInput}\n                      // @ts-ignore react-hook-form doesn't handle nested field arrays well\n                      defaultValue={timeRange.end_time}\n                      placeholder=\"HH:MM\"\n                      data-testid=\"mute-timing-ends-at\"\n                    />\n                  </InlineField>\n                  <IconButton\n                    className={styles.deleteTimeRange}\n                    title={'Remove'}\n                    name={'trash-alt'}\n                    type=\"button\"\n                    onClick={(e) => {\n                      e.preventDefault();\n                      removeTimeRange(index);\n                    }}\n                  />\n                </InlineFieldRow>\n              </div>\n            );\n          })}\n        </>\n      </Field>\n      <Button\n        className={styles.addTimeRange}\n        variant=\"secondary\"\n        type=\"button\"\n        icon={'plus'}\n        onClick={() => addTimeRange({ start_time: '', end_time: '' })}\n      >\n        Add another time range\n      </Button>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  field: css`\n    margin-bottom: 0;\n  `,\n  timeRange: css`\n    margin-bottom: ${theme.spacing(1)};\n  `,\n  timeRangeInput: css`\n    width: 120px;\n  `,\n  deleteTimeRange: css`\n    margin: ${theme.spacing(1)} 0 0 ${theme.spacing(0.5)};\n  `,\n  addTimeRange: css`\n    margin-bottom: ${theme.spacing(2)};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\nimport { useFormContext, useFieldArray } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Input, Field, FieldSet, useStyles2 } from '@grafana/ui';\n\nimport { MuteTimingFields } from '../../types/mute-timing-form';\nimport { DAYS_OF_THE_WEEK, MONTHS, validateArrayField, defaultTimeInterval } from '../../utils/mute-timings';\n\nimport { MuteTimingTimeRange } from './MuteTimingTimeRange';\n\nexport const MuteTimingTimeInterval = () => {\n  const styles = useStyles2(getStyles);\n  const { formState, register } = useFormContext();\n  const {\n    fields: timeIntervals,\n    append: addTimeInterval,\n    remove: removeTimeInterval,\n  } = useFieldArray<MuteTimingFields>({\n    name: 'time_intervals',\n  });\n\n  return (\n    <FieldSet className={styles.timeIntervalLegend} label=\"Time intervals\">\n      <>\n        <p>\n          A time interval is a definition for a moment in time. All fields are lists, and at least one list element must\n          be satisfied to match the field. If a field is left blank, any moment of time will match the field. For an\n          instant of time to match a complete time interval, all fields must match. A mute timing can contain multiple\n          time intervals.\n        </p>\n        {timeIntervals.map((timeInterval, timeIntervalIndex) => {\n          const errors = formState.errors;\n          return (\n            <div key={timeInterval.id} className={styles.timeIntervalSection}>\n              <MuteTimingTimeRange intervalIndex={timeIntervalIndex} />\n              <Field\n                label=\"Days of the week\"\n                error={errors.time_intervals?.[timeIntervalIndex]?.weekdays?.message ?? ''}\n                invalid={!!errors.time_intervals?.[timeIntervalIndex]?.weekdays}\n              >\n                <Input\n                  {...register(`time_intervals.${timeIntervalIndex}.weekdays`, {\n                    validate: (value) =>\n                      validateArrayField(\n                        value,\n                        (day) => DAYS_OF_THE_WEEK.includes(day.toLowerCase()),\n                        'Invalid day of the week'\n                      ),\n                  })}\n                  className={styles.input}\n                  data-testid=\"mute-timing-weekdays\"\n                  // @ts-ignore react-hook-form doesn't handle nested field arrays well\n                  defaultValue={timeInterval.weekdays}\n                  placeholder=\"Example: monday, tuesday:thursday\"\n                />\n              </Field>\n              <Field\n                label=\"Days of the month\"\n                description=\"The days of the month, 1-31, of a month. Negative values can be used to represent days which begin at the end of the month\"\n                invalid={!!errors.time_intervals?.[timeIntervalIndex]?.days_of_month}\n                error={errors.time_intervals?.[timeIntervalIndex]?.days_of_month?.message}\n              >\n                <Input\n                  {...register(`time_intervals.${timeIntervalIndex}.days_of_month`, {\n                    validate: (value) =>\n                      validateArrayField(\n                        value,\n                        (day) => {\n                          const parsedDay = parseInt(day, 10);\n                          return (parsedDay > -31 && parsedDay < 0) || (parsedDay > 0 && parsedDay < 32);\n                        },\n                        'Invalid day'\n                      ),\n                  })}\n                  className={styles.input}\n                  // @ts-ignore react-hook-form doesn't handle nested field arrays well\n                  defaultValue={timeInterval.days_of_month}\n                  placeholder=\"Example: 1, 14:16, -1\"\n                  data-testid=\"mute-timing-days\"\n                />\n              </Field>\n              <Field\n                label=\"Months\"\n                description=\"The months of the year in either numerical or the full calendar month\"\n                invalid={!!errors.time_intervals?.[timeIntervalIndex]?.months}\n                error={errors.time_intervals?.[timeIntervalIndex]?.months?.message}\n              >\n                <Input\n                  {...register(`time_intervals.${timeIntervalIndex}.months`, {\n                    validate: (value) =>\n                      validateArrayField(\n                        value,\n                        (month) => MONTHS.includes(month) || (parseInt(month, 10) < 13 && parseInt(month, 10) > 0),\n                        'Invalid month'\n                      ),\n                  })}\n                  className={styles.input}\n                  placeholder=\"Example: 1:3, may:august, december\"\n                  // @ts-ignore react-hook-form doesn't handle nested field arrays well\n                  defaultValue={timeInterval.months}\n                  data-testid=\"mute-timing-months\"\n                />\n              </Field>\n              <Field\n                label=\"Years\"\n                invalid={!!errors.time_intervals?.[timeIntervalIndex]?.years}\n                error={errors.time_intervals?.[timeIntervalIndex]?.years?.message ?? ''}\n              >\n                <Input\n                  {...register(`time_intervals.${timeIntervalIndex}.years`, {\n                    validate: (value) => validateArrayField(value, (year) => /^\\d{4}$/.test(year), 'Invalid year'),\n                  })}\n                  className={styles.input}\n                  placeholder=\"Example: 2021:2022, 2030\"\n                  // @ts-ignore react-hook-form doesn't handle nested field arrays well\n                  defaultValue={timeInterval.years}\n                  data-testid=\"mute-timing-years\"\n                />\n              </Field>\n              <Button\n                type=\"button\"\n                variant=\"destructive\"\n                icon=\"trash-alt\"\n                onClick={() => removeTimeInterval(timeIntervalIndex)}\n              >\n                Remove time interval\n              </Button>\n            </div>\n          );\n        })}\n        <Button\n          type=\"button\"\n          variant=\"secondary\"\n          className={styles.removeTimeIntervalButton}\n          onClick={() => {\n            addTimeInterval(defaultTimeInterval);\n          }}\n          icon=\"plus\"\n        >\n          Add another time interval\n        </Button>\n      </>\n    </FieldSet>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  input: css`\n    width: 400px;\n  `,\n  timeIntervalLegend: css`\n    legend {\n      font-size: 1.25rem;\n    }\n  `,\n  timeIntervalSection: css`\n    background-color: ${theme.colors.background.secondary};\n    padding: ${theme.spacing(1)};\n    margin-bottom: ${theme.spacing(1)};\n  `,\n  removeTimeIntervalButton: css`\n    margin-top: ${theme.spacing(1)};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { useMemo } from 'react';\nimport { FormProvider, useForm } from 'react-hook-form';\n\nimport { GrafanaTheme2, NavModelItem } from '@grafana/data';\nimport { Alert, Field, FieldSet, Input, Button, LinkButton, useStyles2 } from '@grafana/ui';\nimport {\n  AlertmanagerConfig,\n  AlertManagerCortexConfig,\n  MuteTimeInterval,\n} from 'app/plugins/datasource/alertmanager/types';\nimport { useDispatch } from 'app/types';\n\nimport { useAlertManagerSourceName } from '../../hooks/useAlertManagerSourceName';\nimport { useAlertManagersByPermission } from '../../hooks/useAlertManagerSources';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { updateAlertManagerConfigAction } from '../../state/actions';\nimport { MuteTimingFields } from '../../types/mute-timing-form';\nimport { renameMuteTimings } from '../../utils/alertmanager';\nimport { makeAMLink } from '../../utils/misc';\nimport { createMuteTiming, defaultTimeInterval } from '../../utils/mute-timings';\nimport { initialAsyncRequestState } from '../../utils/redux';\nimport { AlertManagerPicker } from '../AlertManagerPicker';\nimport { AlertingPageWrapper } from '../AlertingPageWrapper';\nimport { ProvisionedResource, ProvisioningAlert } from '../Provisioning';\n\nimport { MuteTimingTimeInterval } from './MuteTimingTimeInterval';\n\ninterface Props {\n  muteTiming?: MuteTimeInterval;\n  showError?: boolean;\n  provenance?: string;\n}\n\nconst useDefaultValues = (muteTiming?: MuteTimeInterval): MuteTimingFields => {\n  return useMemo(() => {\n    const defaultValues = {\n      name: '',\n      time_intervals: [defaultTimeInterval],\n    };\n\n    if (!muteTiming) {\n      return defaultValues;\n    }\n\n    const intervals = muteTiming.time_intervals.map((interval) => ({\n      times: interval.times ?? defaultTimeInterval.times,\n      weekdays: interval?.weekdays?.join(', ') ?? defaultTimeInterval.weekdays,\n      days_of_month: interval?.days_of_month?.join(', ') ?? defaultTimeInterval.days_of_month,\n      months: interval?.months?.join(', ') ?? defaultTimeInterval.months,\n      years: interval?.years?.join(', ') ?? defaultTimeInterval.years,\n    }));\n\n    return {\n      name: muteTiming.name,\n      time_intervals: intervals,\n    };\n  }, [muteTiming]);\n};\n\nconst defaultPageNav: Partial<NavModelItem> = {\n  icon: 'sitemap',\n  breadcrumbs: [{ title: 'Notification Policies', url: 'alerting/routes' }],\n};\n\nconst MuteTimingForm = ({ muteTiming, showError, provenance }: Props) => {\n  const dispatch = useDispatch();\n  const alertManagers = useAlertManagersByPermission('notification');\n  const [alertManagerSourceName, setAlertManagerSourceName] = useAlertManagerSourceName(alertManagers);\n  const styles = useStyles2(getStyles);\n\n  const defaultAmCortexConfig = { alertmanager_config: {}, template_files: {} };\n  const amConfigs = useUnifiedAlertingSelector((state) => state.amConfigs);\n  const { result = defaultAmCortexConfig, loading } =\n    (alertManagerSourceName && amConfigs[alertManagerSourceName]) || initialAsyncRequestState;\n\n  const config: AlertmanagerConfig = result?.alertmanager_config ?? {};\n  const defaultValues = useDefaultValues(muteTiming);\n  const formApi = useForm({ defaultValues });\n\n  const onSubmit = (values: MuteTimingFields) => {\n    const newMuteTiming = createMuteTiming(values);\n\n    const muteTimings = muteTiming\n      ? config?.mute_time_intervals?.filter(({ name }) => name !== muteTiming.name)\n      : config.mute_time_intervals;\n\n    const newConfig: AlertManagerCortexConfig = {\n      ...result,\n      alertmanager_config: {\n        ...config,\n        route:\n          muteTiming && newMuteTiming.name !== muteTiming.name\n            ? renameMuteTimings(newMuteTiming.name, muteTiming.name, config.route ?? {})\n            : config.route,\n        mute_time_intervals: [...(muteTimings || []), newMuteTiming],\n      },\n    };\n\n    dispatch(\n      updateAlertManagerConfigAction({\n        newConfig,\n        oldConfig: result,\n        alertManagerSourceName: alertManagerSourceName!,\n        successMessage: 'Mute timing saved',\n        redirectPath: '/alerting/routes/',\n      })\n    );\n  };\n\n  return (\n    <AlertingPageWrapper\n      pageId=\"am-routes\"\n      pageNav={{\n        ...defaultPageNav,\n        id: muteTiming ? 'alert-policy-edit' : 'alert-policy-new',\n        text: muteTiming ? 'Edit mute timing' : 'Add mute timing',\n      }}\n    >\n      <AlertManagerPicker\n        current={alertManagerSourceName}\n        onChange={setAlertManagerSourceName}\n        disabled\n        dataSources={alertManagers}\n      />\n      {provenance && <ProvisioningAlert resource={ProvisionedResource.MuteTiming} />}\n      {result && !loading && (\n        <FormProvider {...formApi}>\n          <form onSubmit={formApi.handleSubmit(onSubmit)} data-testid=\"mute-timing-form\">\n            {showError && <Alert title=\"No matching mute timing found\" />}\n            <FieldSet label={'Create mute timing'} disabled={Boolean(provenance)}>\n              <Field\n                required\n                label=\"Name\"\n                description=\"A unique name for the mute timing\"\n                invalid={!!formApi.formState.errors?.name}\n                error={formApi.formState.errors.name?.message}\n              >\n                <Input\n                  {...formApi.register('name', {\n                    required: true,\n                    validate: (value) => {\n                      if (!muteTiming) {\n                        const existingMuteTiming = config?.mute_time_intervals?.find(({ name }) => value === name);\n                        return existingMuteTiming ? `Mute timing already exists for \"${value}\"` : true;\n                      }\n                      return value.length > 0 || 'Name is required';\n                    },\n                  })}\n                  className={styles.input}\n                  data-testid={'mute-timing-name'}\n                />\n              </Field>\n              <MuteTimingTimeInterval />\n              <LinkButton\n                type=\"button\"\n                variant=\"secondary\"\n                href={makeAMLink('/alerting/routes/', alertManagerSourceName)}\n              >\n                Cancel\n              </LinkButton>\n              <Button type=\"submit\" className={styles.submitButton}>\n                {muteTiming ? 'Save' : 'Submit'}\n              </Button>\n            </FieldSet>\n          </form>\n        </FormProvider>\n      )}\n    </AlertingPageWrapper>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  input: css`\n    width: 400px;\n  `,\n  submitButton: css`\n    margin-left: ${theme.spacing(1)};\n  `,\n});\n\nexport default MuteTimingForm;\n","import React, { useCallback, useEffect } from 'react';\nimport { Route, Redirect, Switch } from 'react-router-dom';\n\nimport { Alert, LoadingPlaceholder } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { MuteTimeInterval } from 'app/plugins/datasource/alertmanager/types';\nimport { useDispatch } from 'app/types';\n\nimport MuteTimingForm from './components/mute-timings/MuteTimingForm';\nimport { useAlertManagerSourceName } from './hooks/useAlertManagerSourceName';\nimport { useAlertManagersByPermission } from './hooks/useAlertManagerSources';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { fetchAlertManagerConfigAction } from './state/actions';\nimport { initialAsyncRequestState } from './utils/redux';\n\nconst MuteTimings = () => {\n  const [queryParams] = useQueryParams();\n  const dispatch = useDispatch();\n  const alertManagers = useAlertManagersByPermission('notification');\n  const [alertManagerSourceName] = useAlertManagerSourceName(alertManagers);\n\n  const amConfigs = useUnifiedAlertingSelector((state) => state.amConfigs);\n\n  const fetchConfig = useCallback(() => {\n    if (alertManagerSourceName) {\n      dispatch(fetchAlertManagerConfigAction(alertManagerSourceName));\n    }\n  }, [alertManagerSourceName, dispatch]);\n\n  useEffect(() => {\n    fetchConfig();\n  }, [fetchConfig]);\n\n  const { result, error, loading } =\n    (alertManagerSourceName && amConfigs[alertManagerSourceName]) || initialAsyncRequestState;\n\n  const config = result?.alertmanager_config;\n\n  const getMuteTimingByName = useCallback(\n    (id: string): MuteTimeInterval | undefined => {\n      const timing = config?.mute_time_intervals?.find(({ name }: MuteTimeInterval) => name === id);\n\n      if (timing) {\n        const provenance = (config?.muteTimeProvenances ?? {})[timing.name];\n\n        return {\n          ...timing,\n          provenance,\n        };\n      }\n\n      return timing;\n    },\n    [config]\n  );\n\n  return (\n    <>\n      {loading && <LoadingPlaceholder text=\"Loading mute timing\" />}\n      {error && !loading && (\n        <Alert severity=\"error\" title={`Error loading Alertmanager config for ${alertManagerSourceName}`}>\n          {error.message || 'Unknown error.'}\n        </Alert>\n      )}\n      {result && !error && (\n        <Switch>\n          <Route exact path=\"/alerting/routes/mute-timing/new\">\n            <MuteTimingForm />\n          </Route>\n          <Route exact path=\"/alerting/routes/mute-timing/edit\">\n            {() => {\n              if (queryParams['muteName']) {\n                const muteTiming = getMuteTimingByName(String(queryParams['muteName']));\n                const provenance = muteTiming?.provenance;\n\n                return <MuteTimingForm muteTiming={muteTiming} showError={!muteTiming} provenance={provenance} />;\n              }\n              return <Redirect to=\"/alerting/routes\" />;\n            }}\n          </Route>\n        </Switch>\n      )}\n    </>\n  );\n};\n\nexport default MuteTimings;\n","import React from 'react';\n\nimport { Alert, Badge } from '@grafana/ui';\n\nexport enum ProvisionedResource {\n  ContactPoint = 'contact point',\n  Template = 'template',\n  MuteTiming = 'mute timing',\n  AlertRule = 'alert rule',\n  RootNotificationPolicy = 'root notification policy',\n}\n\ninterface ProvisioningAlertProps {\n  resource: ProvisionedResource;\n}\n\nexport const ProvisioningAlert = ({ resource }: ProvisioningAlertProps) => {\n  return (\n    <Alert title={`This ${resource} cannot be edited through the UI`} severity=\"info\">\n      This {resource} has been provisioned, that means it was created by config. Please contact your server admin to\n      update this {resource}.\n    </Alert>\n  );\n};\n\nexport const ProvisioningBadge = () => {\n  return <Badge text={'Provisioned'} color={'purple'} />;\n};\n","import { useCallback } from 'react';\n\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport store from 'app/core/store';\n\nimport { ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, ALERTMANAGER_NAME_QUERY_KEY } from '../utils/constants';\nimport { AlertManagerDataSource, GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\nfunction useIsAlertManagerAvailable(availableAlertManagers: AlertManagerDataSource[]) {\n  return useCallback(\n    (alertManagerName: string) => {\n      const availableAlertManagersNames = availableAlertManagers.map((am) => am.name);\n      return availableAlertManagersNames.includes(alertManagerName);\n    },\n    [availableAlertManagers]\n  );\n}\n\n/* This will return am name either from query params or from local storage or a default (grafana).\n * Due to RBAC permissions Grafana Managed Alert manager or external alert managers may not be available\n * In the worst case neither GMA nor external alert manager is available\n */\nexport function useAlertManagerSourceName(\n  availableAlertManagers: AlertManagerDataSource[]\n): [string | undefined, (alertManagerSourceName: string) => void] {\n  const [queryParams, updateQueryParams] = useQueryParams();\n  const isAlertManagerAvailable = useIsAlertManagerAvailable(availableAlertManagers);\n\n  const update = useCallback(\n    (alertManagerSourceName: string) => {\n      if (!isAlertManagerAvailable(alertManagerSourceName)) {\n        return;\n      }\n      if (alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME) {\n        store.delete(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: null });\n      } else {\n        store.set(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, alertManagerSourceName);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: alertManagerSourceName });\n      }\n    },\n    [updateQueryParams, isAlertManagerAvailable]\n  );\n\n  const querySource = queryParams[ALERTMANAGER_NAME_QUERY_KEY];\n\n  if (querySource && typeof querySource === 'string') {\n    if (isAlertManagerAvailable(querySource)) {\n      return [querySource, update];\n    } else {\n      // non existing alertmanager\n      return [undefined, update];\n    }\n  }\n\n  const storeSource = store.get(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n  if (storeSource && typeof storeSource === 'string' && isAlertManagerAvailable(storeSource)) {\n    update(storeSource);\n    return [storeSource, update];\n  }\n\n  if (isAlertManagerAvailable(GRAFANA_RULES_SOURCE_NAME)) {\n    return [GRAFANA_RULES_SOURCE_NAME, update];\n  }\n\n  return [undefined, update];\n}\n","import { useMemo } from 'react';\n\nimport { getAlertManagerDataSourcesByPermission } from '../utils/datasource';\n\nexport function useAlertManagersByPermission(accessType: 'instance' | 'notification') {\n  return useMemo(() => getAlertManagerDataSourcesByPermission(accessType), [accessType]);\n}\n"],"names":["DAYS_OF_THE_WEEK","MONTHS","defaultTimeInterval","validateArrayField","value","validateValue","invalidText","x","entry","convertStringToArray","str","s","createMuteTiming","fields","timeIntervals","times","weekdays","days_of_month","months","years","interval","start_time","end_time","v","MuteTimingTimeRange","intervalIndex","styles","getStyles","register","formState","timeRanges","addTimeRange","removeTimeRange","validateTime","timeString","hour","minutes","isHourValid","isMinuteValid","formErrors","timeRangeInvalid","Field","timeRange","index","InlineFieldRow","InlineField","Input","IconButton","e","Button","theme","MuteTimingTimeInterval","addTimeInterval","removeTimeInterval","FieldSet","timeInterval","timeIntervalIndex","errors","day","parsedDay","month","year","useDefaultValues","muteTiming","defaultValues","intervals","defaultPageNav","MuteTimingForm","showError","provenance","dispatch","alertManagers","alertManagerSourceName","setAlertManagerSourceName","useAlertManagerSourceName","defaultAmCortexConfig","amConfigs","useUnifiedAlertingSelector","state","result","loading","config","formApi","onSubmit","values","newMuteTiming","muteTimings","name","newConfig","AlertingPageWrapper","AlertManagerPicker","Provisioning","Alert","queryParams","useQueryParams","fetchConfig","error","getMuteTimingByName","id","timing","LoadingPlaceholder","ProvisionedResource","ProvisioningAlert","resource","ProvisioningBadge","useIsAlertManagerAvailable","availableAlertManagers","alertManagerName","am","updateQueryParams","isAlertManagerAvailable","update","querySource","storeSource","useAlertManagersByPermission","accessType"],"sourceRoot":""}