{"version":3,"sources":["webpack:///./public/app/core/components/OrgActionBar/OrgActionBar.tsx","webpack:///./public/app/features/plugins/PluginListItem.tsx","webpack:///./public/app/features/plugins/PluginList.tsx","webpack:///./public/app/features/plugins/PluginListPage.tsx","webpack:///./public/app/features/plugins/PluginsErrorsInfo.tsx","webpack:///./public/app/features/plugins/state/selectors.ts"],"names":["OrgActionBar","this","props","searchQuery","linkButton","setSearchQuery","target","linkProps","href","className","labelClassName","inputClassName","value","onChange","placeholder","title","PureComponent","PluginListItem","plugin","aria-label","selectors","pages","PluginsList","listItem","id","type","PluginSignatureBadge","status","signature","hasUpdate","bs-tooltip","src","info","logos","small","name","author","PluginList","plugins","list","map","index","key","PluginListPage","hasFetched","navModel","setPluginsSearchQuery","loadPlugins","useAsync","page","Contents","isLoading","query","mapDispatchToProps","hot","module","connect","state","getNavModel","navIndex","getPlugins","getPluginsSearchQuery","loadPluginsErrors","PluginsErrorsInfo","errors","getAllPluginsErrors","children","theme","useTheme","loading","length","signatureErrorNotice","severity","urlTitle","url","items","css","renderItem","e","spacing","sm","justify","align","pluginId","mapPluginErrorCodeToSignatureStatus","errorCode","regex","RegExp","filter","item","test","description"],"mappings":"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","file":"PluginListPage.591ee81e63053ad31983.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport { FilterInput } from '../FilterInput/FilterInput';\nimport { LinkButton } from '@grafana/ui';\n\nexport interface Props {\n  searchQuery: string;\n  setSearchQuery: (value: string) => {};\n  linkButton: { href: string; title: string };\n  target?: string;\n}\n\nexport default class OrgActionBar extends PureComponent<Props> {\n  render() {\n    const { searchQuery, linkButton, setSearchQuery, target } = this.props;\n    const linkProps = { href: linkButton.href };\n\n    if (target) {\n      (linkProps as any).target = target;\n    }\n\n    return (\n      <div className=\"page-action-bar\">\n        <div className=\"gf-form gf-form--grow\">\n          <FilterInput\n            labelClassName=\"gf-form--has-input-icon\"\n            inputClassName=\"gf-form-input width-20\"\n            value={searchQuery}\n            onChange={setSearchQuery}\n            placeholder={'Search by name or type'}\n          />\n        </div>\n        <div className=\"page-action-bar__spacer\" />\n        <LinkButton {...linkProps}>{linkButton.title}</LinkButton>\n      </div>\n    );\n  }\n}\n","import React, { FC } from 'react';\nimport { PluginMeta } from '@grafana/data';\nimport { PluginSignatureBadge } from './PluginSignatureBadge';\nimport { selectors } from '@grafana/e2e-selectors';\n\ninterface Props {\n  plugin: PluginMeta;\n}\n\nconst PluginListItem: FC<Props> = props => {\n  const { plugin } = props;\n\n  return (\n    <li className=\"card-item-wrapper\" aria-label={selectors.pages.PluginsList.listItem}>\n      <a className=\"card-item\" href={`plugins/${plugin.id}/`}>\n        <div className=\"card-item-header\">\n          <div className=\"card-item-type\">{plugin.type}</div>\n          <PluginSignatureBadge status={plugin.signature} />\n          {plugin.hasUpdate && (\n            <div className=\"card-item-notice\">\n              <span bs-tooltip=\"plugin.latestVersion\">Update available!</span>\n            </div>\n          )}\n        </div>\n        <div className=\"card-item-body\">\n          <figure className=\"card-item-figure\">\n            <img src={plugin.info.logos.small} />\n          </figure>\n          <div className=\"card-item-details\">\n            <div className=\"card-item-name\">{plugin.name}</div>\n            <div className=\"card-item-sub-name\">{`By ${plugin.info.author.name}`}</div>\n          </div>\n        </div>\n      </a>\n    </li>\n  );\n};\n\nexport default PluginListItem;\n","import React, { FC } from 'react';\nimport PluginListItem from './PluginListItem';\nimport { PluginMeta } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\n\ninterface Props {\n  plugins: PluginMeta[];\n}\n\nconst PluginList: FC<Props> = props => {\n  const { plugins } = props;\n\n  return (\n    <section className=\"card-section card-list-layout-list\">\n      <ol className=\"card-list\" aria-label={selectors.pages.PluginsList.list}>\n        {plugins.map((plugin, index) => {\n          return <PluginListItem plugin={plugin} key={`${plugin.name}-${index}`} />;\n        })}\n      </ol>\n    </section>\n  );\n};\n\nexport default PluginList;\n","import React from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport Page from 'app/core/components/Page/Page';\nimport OrgActionBar from 'app/core/components/OrgActionBar/OrgActionBar';\nimport PluginList from './PluginList';\nimport { loadPlugins } from './state/actions';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { getPlugins, getPluginsSearchQuery } from './state/selectors';\nimport { NavModel, PluginMeta } from '@grafana/data';\nimport { StoreState } from 'app/types';\nimport { setPluginsSearchQuery } from './state/reducers';\nimport { useAsync } from 'react-use';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { PluginsErrorsInfo } from './PluginsErrorsInfo';\n\nexport interface Props {\n  navModel: NavModel;\n  plugins: PluginMeta[];\n  searchQuery: string;\n  hasFetched: boolean;\n  loadPlugins: typeof loadPlugins;\n  setPluginsSearchQuery: typeof setPluginsSearchQuery;\n}\n\nexport const PluginListPage: React.FC<Props> = ({\n  hasFetched,\n  navModel,\n  plugins,\n  setPluginsSearchQuery,\n  searchQuery,\n  loadPlugins,\n}) => {\n  useAsync(async () => {\n    loadPlugins();\n  }, [loadPlugins]);\n\n  const linkButton = {\n    href: 'https://grafana.com/plugins?utm_source=grafana_plugin_list',\n    title: 'Find more plugins on Grafana.com',\n  };\n\n  return (\n    <Page navModel={navModel} aria-label={selectors.pages.PluginsList.page}>\n      <Page.Contents isLoading={!hasFetched}>\n        <>\n          <OrgActionBar\n            searchQuery={searchQuery}\n            setSearchQuery={query => setPluginsSearchQuery(query)}\n            linkButton={linkButton}\n            target=\"_blank\"\n          />\n\n          <PluginsErrorsInfo>\n            <>\n              <br />\n              <p>\n                Note that <strong>unsigned front-end datasource and panel plugins</strong> are still usable, but this is\n                subject to change in the upcoming releases of Grafana\n              </p>\n            </>\n          </PluginsErrorsInfo>\n          {hasFetched && plugins && <PluginList plugins={plugins} />}\n        </>\n      </Page.Contents>\n    </Page>\n  );\n};\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, 'plugins'),\n    plugins: getPlugins(state.plugins),\n    searchQuery: getPluginsSearchQuery(state.plugins),\n    hasFetched: state.plugins.hasFetched,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadPlugins,\n  setPluginsSearchQuery,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(PluginListPage));\n","import React from 'react';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { HorizontalGroup, InfoBox, List, useTheme } from '@grafana/ui';\nimport { mapPluginErrorCodeToSignatureStatus, PluginSignatureBadge } from './PluginSignatureBadge';\nimport { StoreState } from '../../types';\nimport { getAllPluginsErrors } from './state/selectors';\nimport { loadPlugins, loadPluginsErrors } from './state/actions';\nimport useAsync from 'react-use/lib/useAsync';\nimport { connect, MapDispatchToProps, MapStateToProps } from 'react-redux';\nimport { hot } from 'react-hot-loader';\nimport { PluginError } from '@grafana/data';\nimport { css } from 'emotion';\n\ninterface ConnectedProps {\n  errors: PluginError[];\n}\n\ninterface DispatchProps {\n  loadPluginsErrors: typeof loadPluginsErrors;\n}\n\ninterface OwnProps {\n  children?: React.ReactNode;\n}\n\ntype PluginsErrorsInfoProps = ConnectedProps & DispatchProps & OwnProps;\n\nexport const PluginsErrorsInfoUnconnected: React.FC<PluginsErrorsInfoProps> = ({\n  loadPluginsErrors,\n  errors,\n  children,\n}) => {\n  const theme = useTheme();\n\n  const { loading } = useAsync(async () => {\n    await loadPluginsErrors();\n  }, [loadPlugins]);\n\n  if (loading || errors.length === 0) {\n    return null;\n  }\n  return (\n    <InfoBox\n      aria-label={selectors.pages.PluginsList.signatureErrorNotice}\n      severity=\"warning\"\n      urlTitle=\"Read more about plugin signing\"\n      url=\"https://grafana.com/docs/grafana/latest/plugins/plugin-signatures/\"\n    >\n      <div>\n        <p>\n          We have encountered{' '}\n          <a href=\"https://grafana.com/docs/grafana/latest/developers/plugins/backend/\" target=\"_blank\">\n            data source backend plugins\n          </a>{' '}\n          that are unsigned. Grafana Labs cannot guarantee the integrity of unsigned plugins and recommends using signed\n          plugins only.\n        </p>\n        The following plugins are disabled and not shown in the list below:\n        <List\n          items={errors}\n          className={css`\n            list-style-type: circle;\n          `}\n          renderItem={e => (\n            <div\n              className={css`\n                margin-top: ${theme.spacing.sm};\n              `}\n            >\n              <HorizontalGroup spacing=\"sm\" justify=\"flex-start\" align=\"center\">\n                <strong>{e.pluginId}</strong>\n                <PluginSignatureBadge\n                  status={mapPluginErrorCodeToSignatureStatus(e.errorCode)}\n                  className={css`\n                    margin-top: 0;\n                  `}\n                />\n              </HorizontalGroup>\n            </div>\n          )}\n        />\n        {children}\n      </div>\n    </InfoBox>\n  );\n};\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, OwnProps, StoreState> = (state: StoreState) => {\n  return {\n    errors: getAllPluginsErrors(state.plugins),\n  };\n};\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, OwnProps> = {\n  loadPluginsErrors,\n};\n\nexport const PluginsErrorsInfo = hot(module)(\n  connect(mapStateToProps, mapDispatchToProps)(PluginsErrorsInfoUnconnected)\n);\n","import { PluginsState } from 'app/types/plugins';\n\nexport const getPlugins = (state: PluginsState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  return state.plugins.filter(item => {\n    return regex.test(item.name) || regex.test(item.info.author.name) || regex.test(item.info.description);\n  });\n};\nexport const getAllPluginsErrors = (state: PluginsState) => {\n  return state.errors;\n};\n\nexport const getPluginsSearchQuery = (state: PluginsState) => state.searchQuery;\n"],"sourceRoot":""}