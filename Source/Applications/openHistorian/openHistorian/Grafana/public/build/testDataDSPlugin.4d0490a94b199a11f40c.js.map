{"version":3,"sources":["webpack:///./public/app/plugins/datasource/testdata/metricTree.ts","webpack:///./public/app/plugins/datasource/testdata/LogIpsum.ts","webpack:///./public/app/plugins/datasource/testdata/runStreams.ts","webpack:///./public/app/plugins/datasource/testdata/datasource.ts","webpack:///./public/app/plugins/datasource/testdata/query_ctrl.ts","webpack:///./public/app/plugins/datasource/testdata/TestInfoTab.tsx","webpack:///./public/app/plugins/datasource/testdata/ConfigEditor.tsx","webpack:///./public/app/plugins/datasource/testdata/module.tsx"],"names":["queryMetricTree","query","queryTree","children","queryIndex","length","nodeQuery","result","namesToMatch","startsWith","replace","split","children_1","Object","tslib_es6","children_1_1","next","done","node","value","namesToMatch_1","e_3","namesToMatch_1_1","nameToMatch","indexOf","pattern","RegExp","test","name","concat","buildMetricTree","parent","depth","chars_1","chars_1_1","nodeName","push","LogIpsum_index","getNextWord","Math","floor","random","words","defaultQuery","type","speed","spread","noise","bands","runStream","target","req","lodash","stream","Observable","subscriber","streamId","panelId","refId","maxDataPoints","data","src","append","capacity","alias","addField","time","number","i","suffix","timeoutId","addNextRow","idx","fields","values","add","min","max","Date","now","pushNextEvent","key","setTimeout","console","log","clearTimeout","runSignalStream","string","line","getRandomLine","runLogsStream","reader","csv","callback","onHeader","fields_1","fields_1_1","field","onRow","row","processChunk","text","TextDecoder","decode","readCSV","state","Done","Streaming","complete","read","then","fetch","Request","url","response","body","getReader","runFetchStream","Error","datasource_TestDataDataSource","_super","TestDataDataSource","instanceSettings","call","this","prototype","options","_this","queries","streams","_b","targets","_c","hide","scenarioId","intervalMs","datasourceId","id","template_srv","backend_srv","datasourceRequest","method","from","range","valueOf","toString","to","requestId","res","processQueryResult","merge","apply","error","undefined","queries_1","queries_1_1","results","_d","tables","_e","table","_f","e_4","series","_g","datapoints","points","tags","message","annotationQuery","timeWalker","events","step","annotation","Promise","resolve","getQueryDisplayText","testDatasource","status","getScenarios","get","metricFindQuery","reject","items","variable","wildcardChar","map","item","defaultPulse","timeStep","onCount","onValue","offCount","offValue","defaultCSVWave","valuesCSV","showLabelsFor","query_ctrl_TestDataQueryCtrl","TestDataQueryCtrl","$scope","$injector","showLabels","scenarioList","newPointTime","selectedPoint","includes","$inject","getPoints","lodash_default","a","point","index","format","pointSelected","option","deletePoint","splice","refresh","addPoint","parse","newPointValue","sortBy","p","$onInit","scenario","find","scenarioChanged","stringInput","defaults","pulseWave","csvWave","streamChanged","templateUrl","sdk","TestInfoTab_TestInfoTab","props","TestInfoTab","render","react_default","createElement","className","href","rel","ConfigEditor_ConfigEditor","arguments","ConfigEditor","__webpack_require__","d","__webpack_exports__","module_plugin","TestDataAnnotationsQueryCtrl","template","setConfigEditor","setQueryCtrl","setAnnotationQueryCtrl","addConfigPage","title","icon"],"mappings":"2IAuEO,SAASA,EAAgBC,GAE9B,OArCF,SAASC,EAAUC,EAAsBF,EAAiBG,eACxD,GAAIA,GAAcH,EAAMI,OACtB,OAAOF,EAGT,GAA0B,MAAtBF,EAAMG,GACR,OAAOD,EAGT,IAAMG,EAAYL,EAAMG,GACpBG,EAAqB,GACrBC,EAAe,CAACF,GAGhBA,EAAUG,WAAW,OACvBD,EAAeF,EAAUI,QAAQ,SAAU,IAAIC,MAAM,UAGvD,IAAmB,IAAAC,EAAAC,OAAAC,EAAA,SAAAD,CAAAV,GAAQY,EAAAH,EAAAI,QAAAD,EAAAE,KAAAF,EAAAH,EAAAI,OAAE,CAAxB,IAAME,EAAIH,EAAAI,UACb,IAA0B,IAAAC,GAAAC,OAAA,EAAAR,OAAAC,EAAA,SAAAD,CAAAL,IAAYc,EAAAF,EAAAJ,QAAAM,EAAAL,KAAAK,EAAAF,EAAAJ,OAAE,CAAnC,IAAMO,EAAWD,EAAAH,MACpB,IAAkC,IAA9BI,EAAYC,QAAQ,KAAa,CACnC,IAAMC,EAAUF,EAAYb,QAAQ,IAAK,IAC3B,IAAIgB,OAAO,IAAID,EAAO,KAAM,MAChCE,KAAKT,EAAKU,QAClBrB,EAASA,EAAOsB,OAAO3B,EAAU,CAACgB,GAAOjB,EAAOG,EAAa,UAEtDc,EAAKU,OAASL,IACvBhB,EAASA,EAAOsB,OAAO3B,EAAUgB,EAAKf,SAAUF,EAAOG,EAAa,0MAK1E,OAAOG,EAKAL,CAxDT,SAAS4B,EAAgBC,EAAgBC,WAEjC7B,EAAuB,GAE7B,GAAI6B,EAAQ,EACV,MAAO,OAGT,IAAqB,IAAAC,EAAApB,OAAAC,EAAA,SAAAD,CAPP,CAAC,IAAK,IAAK,MAOCqB,EAAAD,EAAAjB,QAAAkB,EAAAjB,KAAAiB,EAAAD,EAAAjB,OAAE,CAAvB,IACGmB,EAAW,GAAGJ,EADLG,EAAAf,MAEfhB,EAASiC,KAAK,CACZR,KAAMO,EACNhC,SAAU2B,EAAgBK,EAAUH,EAAQ,uGAIhD,OAAO7B,EAuCU2B,CAAgB,GAAI,GACV7B,EAAMU,MAAM,KAAM,gECvE3C0B,EAAQ,EAyBL,SAASC,IAEd,OADAD,GAASA,EAAQE,KAAKC,MAAsB,EAAhBD,KAAKE,WAAiBC,EAAMrC,OACjDqC,EAAML,GAWf,IAAMK,EAAQ,CACZ,KACA,OACA,MACA,KACA,YACA,KACA,QACA,OACA,cACA,UACA,MACA,aACA,cACA,aACA,WACA,QACA,WACA,OACA,UACA,KACA,OACA,YACA,YACA,OACA,YACA,aACA,MACA,YACA,YACA,OACA,KACA,QACA,MACA,UACA,WACA,WACA,QACA,KACA,MACA,UACA,KACA,UACA,OACA,KACA,QACA,SACA,QACA,UACA,MACA,KACA,WACA,aACA,MACA,SACA,UACA,MACA,SACA,QACA,MACA,WACA,QACA,SACA,QACA,UACA,MACA,QACA,KACA,OACA,SACA,UACA,SACA,WACA,QACA,WACA,YACA,MACA,QACA,QACA,cACA,aACA,QACA,YACA,KACA,MACA,WACA,UACA,MACA,QACA,iBACA,QACA,UACA,KACA,KACA,aACA,cACA,OACA,KACA,YACA,MACA,aACA,SACA,QACA,QACA,MACA,UACA,IACA,WACA,WACA,KACA,MACA,aACA,eACA,UACA,QACA,cACA,MACA,cACA,YACA,aACA,YChJWC,EAA+B,CAC1CC,KAAM,SACNC,MAAO,IACPC,OAAQ,IACRC,MAAO,IACPC,MAAO,GAGF,SAASC,EAAUC,EAAuBC,GAC/C,IAAMlD,EAAQY,OAAAuC,EAAA,SAAAvC,CAASqC,EAAOG,OAAQV,GACtC,GAAI,WAAa1C,EAAM2C,KACrB,OAWG,SACLM,EACAjD,EACAkD,GAEA,OAAO,IAAIG,EAAA,EAA8B,SAAAC,GACvC,IAAMC,EAAW,UAAUL,EAAIM,QAAO,IAAIP,EAAOQ,MAC3CC,EAAgBR,EAAIQ,eAAiB,IAErCC,EAAO,IAAIC,EAAA,kBAAkB,CACjCC,OAAQ,OACRC,SAAUJ,IAEZC,EAAKF,MAAQR,EAAOQ,MACpBE,EAAKhC,KAAOsB,EAAOc,OAAS,UAAYd,EAAOQ,MAC/CE,EAAKK,SAAS,CAAErC,KAAM,OAAQgB,KAAMiB,EAAA,UAAUK,OAC9CN,EAAKK,SAAS,CAAErC,KAAM,QAASgB,KAAMiB,EAAA,UAAUM,SAI/C,IAFQ,IAAArB,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","file":"testDataDSPlugin.4d0490a94b199a11f40c.js","sourcesContent":["export interface TreeNode {\n  name: string;\n  children: TreeNode[];\n}\n\n/*\n *  Builds a nested tree like\n *  [\n *    {\n *      name: 'A',\n *      children: [\n *        { name: 'AA', children: [] },\n *        { name: 'AB', children: [] },\n *      ]\n *    }\n *  ]\n */\nfunction buildMetricTree(parent: string, depth: number): TreeNode[] {\n  const chars = ['A', 'B', 'C'];\n  const children: TreeNode[] = [];\n\n  if (depth > 3) {\n    return [];\n  }\n\n  for (const letter of chars) {\n    const nodeName = `${parent}${letter}`;\n    children.push({\n      name: nodeName,\n      children: buildMetricTree(nodeName, depth + 1),\n    });\n  }\n\n  return children;\n}\n\nfunction queryTree(children: TreeNode[], query: string[], queryIndex: number): TreeNode[] {\n  if (queryIndex >= query.length) {\n    return children;\n  }\n\n  if (query[queryIndex] === '*') {\n    return children;\n  }\n\n  const nodeQuery = query[queryIndex];\n  let result: TreeNode[] = [];\n  let namesToMatch = [nodeQuery];\n\n  // handle glob queries\n  if (nodeQuery.startsWith('{')) {\n    namesToMatch = nodeQuery.replace(/\\{|\\}/g, '').split(',');\n  }\n\n  for (const node of children) {\n    for (const nameToMatch of namesToMatch) {\n      if (nameToMatch.indexOf('*') !== -1) {\n        const pattern = nameToMatch.replace('*', '');\n        const regex = new RegExp(`^${pattern}.*`, 'gi');\n        if (regex.test(node.name)) {\n          result = result.concat(queryTree([node], query, queryIndex + 1));\n        }\n      } else if (node.name === nameToMatch) {\n        result = result.concat(queryTree(node.children, query, queryIndex + 1));\n      }\n    }\n  }\n\n  return result;\n}\n\nexport function queryMetricTree(query: string): TreeNode[] {\n  const children = buildMetricTree('', 0);\n  return queryTree(children, query.split('.'), 0);\n}\n","import { LogLevel } from '@grafana/data';\n\nlet index = 0;\n\nexport function getRandomLogLevel(): LogLevel {\n  const v = Math.random();\n  if (v > 0.9) {\n    return LogLevel.critical;\n  }\n  if (v > 0.8) {\n    return LogLevel.error;\n  }\n  if (v > 0.7) {\n    return LogLevel.warning;\n  }\n  if (v > 0.4) {\n    return LogLevel.info;\n  }\n  if (v > 0.3) {\n    return LogLevel.debug;\n  }\n  if (v > 0.1) {\n    return LogLevel.trace;\n  }\n  return LogLevel.unknown;\n}\n\nexport function getNextWord() {\n  index = (index + Math.floor(Math.random() * 5)) % words.length;\n  return words[index];\n}\n\nexport function getRandomLine(length = 60) {\n  let line = getNextWord();\n  while (line.length < length) {\n    line += ' ' + getNextWord();\n  }\n  return line;\n}\n\nconst words = [\n  'At',\n  'vero',\n  'eos',\n  'et',\n  'accusamus',\n  'et',\n  'iusto',\n  'odio',\n  'dignissimos',\n  'ducimus',\n  'qui',\n  'blanditiis',\n  'praesentium',\n  'voluptatum',\n  'deleniti',\n  'atque',\n  'corrupti',\n  'quos',\n  'dolores',\n  'et',\n  'quas',\n  'molestias',\n  'excepturi',\n  'sint',\n  'occaecati',\n  'cupiditate',\n  'non',\n  'provident',\n  'similique',\n  'sunt',\n  'in',\n  'culpa',\n  'qui',\n  'officia',\n  'deserunt',\n  'mollitia',\n  'animi',\n  'id',\n  'est',\n  'laborum',\n  'et',\n  'dolorum',\n  'fuga',\n  'Et',\n  'harum',\n  'quidem',\n  'rerum',\n  'facilis',\n  'est',\n  'et',\n  'expedita',\n  'distinctio',\n  'Nam',\n  'libero',\n  'tempore',\n  'cum',\n  'soluta',\n  'nobis',\n  'est',\n  'eligendi',\n  'optio',\n  'cumque',\n  'nihil',\n  'impedit',\n  'quo',\n  'minus',\n  'id',\n  'quod',\n  'maxime',\n  'placeat',\n  'facere',\n  'possimus',\n  'omnis',\n  'voluptas',\n  'assumenda',\n  'est',\n  'omnis',\n  'dolor',\n  'repellendus',\n  'Temporibus',\n  'autem',\n  'quibusdam',\n  'et',\n  'aut',\n  'officiis',\n  'debitis',\n  'aut',\n  'rerum',\n  'necessitatibus',\n  'saepe',\n  'eveniet',\n  'ut',\n  'et',\n  'voluptates',\n  'repudiandae',\n  'sint',\n  'et',\n  'molestiae',\n  'non',\n  'recusandae',\n  'Itaque',\n  'earum',\n  'rerum',\n  'hic',\n  'tenetur',\n  'a',\n  'sapiente',\n  'delectus',\n  'ut',\n  'aut',\n  'reiciendis',\n  'voluptatibus',\n  'maiores',\n  'alias',\n  'consequatur',\n  'aut',\n  'perferendis',\n  'doloribus',\n  'asperiores',\n  'repellat',\n];\n","import { defaults } from 'lodash';\nimport { Observable } from 'rxjs';\n\nimport {\n  DataQueryRequest,\n  DataQueryResponse,\n  FieldType,\n  CircularDataFrame,\n  CSVReader,\n  Field,\n  LoadingState,\n} from '@grafana/data';\n\nimport { TestDataQuery, StreamingQuery } from './types';\nimport { getRandomLine } from './LogIpsum';\n\nexport const defaultQuery: StreamingQuery = {\n  type: 'signal',\n  speed: 250, // ms\n  spread: 3.5,\n  noise: 2.2,\n  bands: 1,\n};\n\nexport function runStream(target: TestDataQuery, req: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n  const query = defaults(target.stream, defaultQuery);\n  if ('signal' === query.type) {\n    return runSignalStream(target, query, req);\n  }\n  if ('logs' === query.type) {\n    return runLogsStream(target, query, req);\n  }\n  if ('fetch' === query.type) {\n    return runFetchStream(target, query, req);\n  }\n  throw new Error(`Unknown Stream Type: ${query.type}`);\n}\n\nexport function runSignalStream(\n  target: TestDataQuery,\n  query: StreamingQuery,\n  req: DataQueryRequest<TestDataQuery>\n): Observable<DataQueryResponse> {\n  return new Observable<DataQueryResponse>(subscriber => {\n    const streamId = `signal-${req.panelId}-${target.refId}`;\n    const maxDataPoints = req.maxDataPoints || 1000;\n\n    const data = new CircularDataFrame({\n      append: 'tail',\n      capacity: maxDataPoints,\n    });\n    data.refId = target.refId;\n    data.name = target.alias || 'Signal ' + target.refId;\n    data.addField({ name: 'time', type: FieldType.time });\n    data.addField({ name: 'value', type: FieldType.number });\n\n    const { spread, speed, bands, noise } = query;\n\n    for (let i = 0; i < bands; i++) {\n      const suffix = bands > 1 ? ` ${i + 1}` : '';\n      data.addField({ name: 'Min' + suffix, type: FieldType.number });\n      data.addField({ name: 'Max' + suffix, type: FieldType.number });\n    }\n\n    let value = Math.random() * 100;\n    let timeoutId: any = null;\n\n    const addNextRow = (time: number) => {\n      value += (Math.random() - 0.5) * spread;\n\n      let idx = 0;\n      data.fields[idx++].values.add(time);\n      data.fields[idx++].values.add(value);\n\n      let min = value;\n      let max = value;\n\n      for (let i = 0; i < bands; i++) {\n        min = min - Math.random() * noise;\n        max = max + Math.random() * noise;\n\n        data.fields[idx++].values.add(min);\n        data.fields[idx++].values.add(max);\n      }\n    };\n\n    // Fill the buffer on init\n    if (true) {\n      let time = Date.now() - maxDataPoints * speed;\n      for (let i = 0; i < maxDataPoints; i++) {\n        addNextRow(time);\n        time += speed;\n      }\n    }\n\n    const pushNextEvent = () => {\n      addNextRow(Date.now());\n      subscriber.next({\n        data: [data],\n        key: streamId,\n      });\n\n      timeoutId = setTimeout(pushNextEvent, speed);\n    };\n\n    // Send first event in 5ms\n    setTimeout(pushNextEvent, 5);\n\n    return () => {\n      console.log('unsubscribing to stream ' + streamId);\n      clearTimeout(timeoutId);\n    };\n  });\n}\n\nexport function runLogsStream(\n  target: TestDataQuery,\n  query: StreamingQuery,\n  req: DataQueryRequest<TestDataQuery>\n): Observable<DataQueryResponse> {\n  return new Observable<DataQueryResponse>(subscriber => {\n    const streamId = `logs-${req.panelId}-${target.refId}`;\n    const maxDataPoints = req.maxDataPoints || 1000;\n\n    const data = new CircularDataFrame({\n      append: 'tail',\n      capacity: maxDataPoints,\n    });\n    data.refId = target.refId;\n    data.name = target.alias || 'Logs ' + target.refId;\n    data.addField({ name: 'time', type: FieldType.time });\n    data.addField({ name: 'line', type: FieldType.string });\n\n    const { speed } = query;\n\n    let timeoutId: any = null;\n\n    const pushNextEvent = () => {\n      data.values.time.add(Date.now());\n      data.values.line.add(getRandomLine());\n\n      subscriber.next({\n        data: [data],\n        key: streamId,\n      });\n\n      timeoutId = setTimeout(pushNextEvent, speed);\n    };\n\n    // Send first event in 5ms\n    setTimeout(pushNextEvent, 5);\n\n    return () => {\n      console.log('unsubscribing to stream ' + streamId);\n      clearTimeout(timeoutId);\n    };\n  });\n}\n\nexport function runFetchStream(\n  target: TestDataQuery,\n  query: StreamingQuery,\n  req: DataQueryRequest<TestDataQuery>\n): Observable<DataQueryResponse> {\n  return new Observable<DataQueryResponse>(subscriber => {\n    const streamId = `fetch-${req.panelId}-${target.refId}`;\n    const maxDataPoints = req.maxDataPoints || 1000;\n\n    let data = new CircularDataFrame({\n      append: 'tail',\n      capacity: maxDataPoints,\n    });\n    data.refId = target.refId;\n    data.name = target.alias || 'Fetch ' + target.refId;\n\n    let reader: ReadableStreamReader<Uint8Array>;\n    const csv = new CSVReader({\n      callback: {\n        onHeader: (fields: Field[]) => {\n          // Clear any existing fields\n          if (data.fields.length) {\n            data = new CircularDataFrame({\n              append: 'tail',\n              capacity: maxDataPoints,\n            });\n            data.refId = target.refId;\n            data.name = 'Fetch ' + target.refId;\n          }\n          for (const field of fields) {\n            data.addField(field);\n          }\n        },\n        onRow: (row: any[]) => {\n          data.add(row);\n        },\n      },\n    });\n\n    const processChunk = (value: ReadableStreamReadResult<Uint8Array>): any => {\n      if (value.value) {\n        const text = new TextDecoder().decode(value.value);\n        csv.readCSV(text);\n      }\n\n      subscriber.next({\n        data: [data],\n        key: streamId,\n        state: value.done ? LoadingState.Done : LoadingState.Streaming,\n      });\n\n      if (value.done) {\n        console.log('Finished stream');\n        subscriber.complete(); // necessary?\n        return;\n      }\n\n      return reader.read().then(processChunk);\n    };\n\n    fetch(new Request(query.url)).then(response => {\n      reader = response.body.getReader();\n      reader.read().then(processChunk);\n    });\n\n    return () => {\n      // Cancel fetch?\n      console.log('unsubscribing to stream ' + streamId);\n    };\n  });\n}\n","import {\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  MetricFindValue,\n  TableData,\n  TimeSeries,\n  DataQueryError,\n} from '@grafana/data';\nimport { Scenario, TestDataQuery } from './types';\nimport { getBackendSrv } from 'app/core/services/backend_srv';\nimport { queryMetricTree } from './metricTree';\nimport { from, merge, Observable } from 'rxjs';\nimport { runStream } from './runStreams';\nimport templateSrv from 'app/features/templating/template_srv';\nimport { getSearchFilterScopedVar } from '../../../features/templating/variable';\n\ntype TestData = TimeSeries | TableData;\n\nexport class TestDataDataSource extends DataSourceApi<TestDataQuery> {\n  constructor(instanceSettings: DataSourceInstanceSettings) {\n    super(instanceSettings);\n  }\n\n  query(options: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n    const queries: any[] = [];\n    const streams: Array<Observable<DataQueryResponse>> = [];\n\n    // Start streams and prepare queries\n    for (const target of options.targets) {\n      if (target.hide) {\n        continue;\n      }\n      if (target.scenarioId === 'streaming_client') {\n        streams.push(runStream(target, options));\n      } else {\n        queries.push({\n          ...target,\n          intervalMs: options.intervalMs,\n          maxDataPoints: options.maxDataPoints,\n          datasourceId: this.id,\n          alias: templateSrv.replace(target.alias || ''),\n        });\n      }\n    }\n\n    if (queries.length) {\n      const req: Promise<DataQueryResponse> = getBackendSrv()\n        .datasourceRequest({\n          method: 'POST',\n          url: '/api/tsdb/query',\n          data: {\n            from: options.range.from.valueOf().toString(),\n            to: options.range.to.valueOf().toString(),\n            queries: queries,\n          },\n          // This sets up a cancel token\n          requestId: options.requestId,\n        })\n        .then((res: any) => this.processQueryResult(queries, res));\n\n      streams.push(from(req));\n    }\n\n    return merge(...streams);\n  }\n\n  processQueryResult(queries: any, res: any): DataQueryResponse {\n    const data: TestData[] = [];\n    let error: DataQueryError | undefined = undefined;\n\n    for (const query of queries) {\n      const results = res.data.results[query.refId];\n\n      for (const t of results.tables || []) {\n        const table = t as TableData;\n        table.refId = query.refId;\n        table.name = query.alias;\n        data.push(table);\n      }\n\n      for (const series of results.series || []) {\n        data.push({ target: series.name, datapoints: series.points, refId: query.refId, tags: series.tags });\n      }\n\n      if (results.error) {\n        error = {\n          message: results.error,\n        };\n      }\n    }\n\n    return { data, error };\n  }\n\n  annotationQuery(options: any) {\n    let timeWalker = options.range.from.valueOf();\n    const to = options.range.to.valueOf();\n    const events = [];\n    const eventCount = 10;\n    const step = (to - timeWalker) / eventCount;\n\n    for (let i = 0; i < eventCount; i++) {\n      events.push({\n        annotation: options.annotation,\n        time: timeWalker,\n        text: 'This is the text, <a href=\"https://grafana.com\">Grafana.com</a>',\n        tags: ['text', 'server'],\n      });\n      timeWalker += step;\n    }\n    return Promise.resolve(events);\n  }\n\n  getQueryDisplayText(query: TestDataQuery) {\n    if (query.alias) {\n      return query.scenarioId + ' as ' + query.alias;\n    }\n    return query.scenarioId;\n  }\n\n  testDatasource() {\n    return Promise.resolve({\n      status: 'success',\n      message: 'Data source is working',\n    });\n  }\n\n  getScenarios(): Promise<Scenario[]> {\n    return getBackendSrv().get('/api/tsdb/testdata/scenarios');\n  }\n\n  metricFindQuery(query: string, options: any) {\n    return new Promise<MetricFindValue[]>((resolve, reject) => {\n      setTimeout(() => {\n        const interpolatedQuery = templateSrv.replace(\n          query,\n          getSearchFilterScopedVar({ query, wildcardChar: '*', options })\n        );\n        const children = queryMetricTree(interpolatedQuery);\n        const items = children.map(item => ({ value: item.name, text: item.name }));\n        resolve(items);\n      }, 100);\n    });\n  }\n}\n","import _ from 'lodash';\nimport { dateMath, dateTime } from '@grafana/data';\nimport { e2e } from '@grafana/e2e';\n\nimport { QueryCtrl } from 'app/plugins/sdk';\nimport { defaultQuery } from './runStreams';\nimport { getBackendSrv } from 'app/core/services/backend_srv';\n\nexport const defaultPulse: any = {\n  timeStep: 60,\n  onCount: 3,\n  onValue: 2,\n  offCount: 3,\n  offValue: 1,\n};\n\nexport const defaultCSVWave: any = {\n  timeStep: 60,\n  valuesCSV: '0,0,2,2,1,1',\n};\n\nconst showLabelsFor = ['random_walk', 'predictable_pulse', 'predictable_csv_wave'];\n\nexport class TestDataQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  scenarioList: any;\n  scenario: any;\n  newPointValue: number;\n  newPointTime: any;\n  selectedPoint: any;\n\n  showLabels = false;\n  selectors: typeof e2e.pages.Dashboard.Panels.DataSource.TestData.QueryTab.selectors;\n\n  /** @ngInject */\n  constructor($scope: any, $injector: any) {\n    super($scope, $injector);\n\n    this.target.scenarioId = this.target.scenarioId || 'random_walk';\n    this.scenarioList = [];\n    this.newPointTime = dateTime();\n    this.selectedPoint = { text: 'Select point', value: null };\n    this.showLabels = showLabelsFor.includes(this.target.scenarioId);\n    this.selectors = e2e.pages.Dashboard.Panels.DataSource.TestData.QueryTab.selectors;\n  }\n\n  getPoints() {\n    return _.map(this.target.points, (point, index) => {\n      return {\n        text: dateTime(point[1]).format('MMMM Do YYYY, H:mm:ss') + ' : ' + point[0],\n        value: index,\n      };\n    });\n  }\n\n  pointSelected(option: any) {\n    this.selectedPoint = option;\n  }\n\n  deletePoint() {\n    this.target.points.splice(this.selectedPoint.value, 1);\n    this.selectedPoint = { text: 'Select point', value: null };\n    this.refresh();\n  }\n\n  addPoint() {\n    this.target.points = this.target.points || [];\n    this.newPointTime = dateMath.parse(this.newPointTime);\n    this.target.points.push([this.newPointValue, this.newPointTime.valueOf()]);\n    this.target.points = _.sortBy(this.target.points, p => p[1]);\n    this.refresh();\n  }\n\n  $onInit() {\n    return getBackendSrv()\n      .get('/api/tsdb/testdata/scenarios')\n      .then((res: any) => {\n        this.scenarioList = res;\n        this.scenario = _.find(this.scenarioList, { id: this.target.scenarioId });\n      });\n  }\n\n  scenarioChanged() {\n    this.scenario = _.find(this.scenarioList, { id: this.target.scenarioId });\n    this.target.stringInput = this.scenario.stringInput;\n    this.showLabels = showLabelsFor.includes(this.target.scenarioId);\n\n    if (this.target.scenarioId === 'manual_entry') {\n      this.target.points = this.target.points || [];\n    } else {\n      delete this.target.points;\n    }\n\n    if (this.target.scenarioId === 'streaming_client') {\n      this.target.stream = _.defaults(this.target.stream || {}, defaultQuery);\n    } else {\n      delete this.target.stream;\n    }\n\n    if (this.target.scenarioId === 'predictable_pulse') {\n      this.target.pulseWave = _.defaults(this.target.pulseWave || {}, defaultPulse);\n    } else {\n      delete this.target.pulseWave;\n    }\n\n    if (this.target.scenarioId === 'predictable_csv_wave') {\n      this.target.csvWave = _.defaults(this.target.csvWave || {}, defaultCSVWave);\n    } else {\n      delete this.target.csvWave;\n    }\n\n    this.refresh();\n  }\n\n  streamChanged() {\n    this.refresh();\n  }\n}\n","// Libraries\nimport React, { PureComponent } from 'react';\n\n// Types\nimport { PluginConfigPageProps, DataSourcePluginMeta, DataSourceJsonData } from '@grafana/data';\n\ninterface Props extends PluginConfigPageProps<DataSourcePluginMeta<DataSourceJsonData>> {}\n\nexport class TestInfoTab extends PureComponent<Props> {\n  constructor(props: Props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div>\n        See github for more information about setting up a reproducable test environment.\n        <br />\n        <br />\n        <a\n          className=\"btn btn-inverse\"\n          href=\"https://github.com/grafana/grafana/tree/master/devenv\"\n          target=\"_blank\"\n          rel=\"noopener\"\n        >\n          Github\n        </a>\n        <br />\n      </div>\n    );\n  }\n}\n","// Libraries\nimport React, { PureComponent } from 'react';\n\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\n\ntype Props = DataSourcePluginOptionsEditorProps<any>;\n\n/**\n * Empty Config Editor -- settings to save\n */\nexport class ConfigEditor extends PureComponent<Props> {\n  render() {\n    return <div />;\n  }\n}\n","import { DataSourcePlugin } from '@grafana/data';\nimport { TestDataDataSource } from './datasource';\nimport { TestDataQueryCtrl } from './query_ctrl';\nimport { TestInfoTab } from './TestInfoTab';\nimport { ConfigEditor } from './ConfigEditor';\n\nclass TestDataAnnotationsQueryCtrl {\n  annotation: any;\n  constructor() {}\n  static template = '<h2>Annotation scenario</h2>';\n}\n\nexport const plugin = new DataSourcePlugin(TestDataDataSource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryCtrl(TestDataQueryCtrl)\n  .setAnnotationQueryCtrl(TestDataAnnotationsQueryCtrl)\n  .addConfigPage({\n    title: 'Setup',\n    icon: 'fa fa-list-alt',\n    body: TestInfoTab,\n    id: 'setup',\n  });\n"],"sourceRoot":""}