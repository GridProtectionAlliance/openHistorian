{"version":3,"file":"DataSourceDashboards.010ef8fb1a8393c5f104.js","mappings":"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","sources":["webpack://grafana/./public/app/features/datasources/components/DashboardsTable.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceDashboards.tsx","webpack://grafana/./public/app/features/datasources/pages/DataSourceDashboardsPage.tsx","webpack://grafana/./public/app/features/datasources/state/contexts.ts","webpack://grafana/./public/app/features/datasources/state/hooks.ts"],"sourcesContent":["import React from 'react';\n\nimport { Button, Icon } from '@grafana/ui';\nimport { PluginDashboard } from 'app/types';\n\nexport interface Props {\n  // List of plugin dashboards to show in the table\n  dashboards: PluginDashboard[];\n  // Callback used when the user clicks on importing a dashboard\n  onImport: (dashboard: PluginDashboard, overwrite: boolean) => void;\n  // Callback used when the user clicks on removing a dashboard\n  onRemove: (dashboard: PluginDashboard) => void;\n}\n\nexport function DashboardsTable({ dashboards, onImport, onRemove }: Props) {\n  function buttonText(dashboard: PluginDashboard) {\n    return dashboard.revision !== dashboard.importedRevision ? 'Update' : 'Re-import';\n  }\n\n  return (\n    <table className=\"filter-table\">\n      <tbody>\n        {dashboards.map((dashboard, index) => {\n          return (\n            <tr key={`${dashboard.dashboardId}-${index}`}>\n              <td className=\"width-1\">\n                <Icon name=\"apps\" />\n              </td>\n              <td>\n                {dashboard.imported ? (\n                  <a href={dashboard.importedUrl}>{dashboard.title}</a>\n                ) : (\n                  <span>{dashboard.title}</span>\n                )}\n              </td>\n              <td style={{ textAlign: 'right' }}>\n                {!dashboard.imported ? (\n                  <Button variant=\"secondary\" size=\"sm\" onClick={() => onImport(dashboard, false)}>\n                    Import\n                  </Button>\n                ) : (\n                  <Button variant=\"secondary\" size=\"sm\" onClick={() => onImport(dashboard, true)}>\n                    {buttonText(dashboard)}\n                  </Button>\n                )}\n                {dashboard.imported && (\n                  <Button\n                    aria-label=\"Delete dashboard\"\n                    icon=\"trash-alt\"\n                    variant=\"destructive\"\n                    size=\"sm\"\n                    onClick={() => onRemove(dashboard)}\n                  />\n                )}\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n\nexport default DashboardsTable;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport PageLoader from 'app/core/components/PageLoader/PageLoader';\nimport { importDashboard, removeDashboard } from 'app/features/dashboard/state/actions';\nimport { loadPluginDashboards } from 'app/features/plugins/admin/state/actions';\nimport { PluginDashboard, StoreState } from 'app/types';\n\nimport DashboardTable from '../components/DashboardsTable';\nimport { useLoadDataSource } from '../state';\n\nexport type Props = {\n  // The UID of the data source\n  uid: string;\n};\n\nexport function DataSourceDashboards({ uid }: Props) {\n  useLoadDataSource(uid);\n\n  const dispatch = useDispatch();\n  const dataSource = useSelector((s: StoreState) => s.dataSources.dataSource);\n  const dashboards = useSelector((s: StoreState) => s.plugins.dashboards);\n  const isLoading = useSelector((s: StoreState) => s.plugins.isLoadingPluginDashboards);\n\n  useEffect(() => {\n    // Load plugin dashboards only when the datasource has loaded\n    if (dataSource.id > 0) {\n      dispatch(loadPluginDashboards());\n    }\n  }, [dispatch, dataSource]);\n\n  const onImportDashboard = (dashboard: PluginDashboard, overwrite: boolean) => {\n    dispatch(\n      importDashboard(\n        {\n          pluginId: dashboard.pluginId,\n          path: dashboard.path,\n          overwrite,\n          inputs: [\n            {\n              name: '*',\n              type: 'datasource',\n              pluginId: dataSource.type,\n              value: dataSource.name,\n            },\n          ],\n        },\n        dashboard.title\n      )\n    );\n  };\n\n  const onRemoveDashboard = ({ uid }: PluginDashboard) => {\n    dispatch(removeDashboard(uid));\n  };\n\n  return (\n    <DataSourceDashboardsView\n      dashboards={dashboards}\n      isLoading={isLoading}\n      onImportDashboard={onImportDashboard}\n      onRemoveDashboard={onRemoveDashboard}\n    />\n  );\n}\n\nexport type ViewProps = {\n  isLoading: boolean;\n  dashboards: PluginDashboard[];\n  onImportDashboard: (dashboard: PluginDashboard, overwrite: boolean) => void;\n  onRemoveDashboard: (dashboard: PluginDashboard) => void;\n};\n\nexport const DataSourceDashboardsView = ({\n  isLoading,\n  dashboards,\n  onImportDashboard,\n  onRemoveDashboard,\n}: ViewProps) => {\n  if (isLoading) {\n    return <PageLoader />;\n  }\n\n  return <DashboardTable dashboards={dashboards} onImport={onImportDashboard} onRemove={onRemoveDashboard} />;\n};\n","import React from 'react';\n\nimport { Page } from 'app/core/components/Page/Page';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\n\nimport { DataSourceDashboards } from '../components/DataSourceDashboards';\n\nexport interface Props extends GrafanaRouteComponentProps<{ uid: string }> {}\n\nexport function DataSourceDashboardsPage(props: Props) {\n  const uid = props.match.params.uid;\n\n  return (\n    <Page navId={`datasource-dashboards-${uid}`}>\n      <Page.Contents>\n        <DataSourceDashboards uid={uid} />\n      </Page.Contents>\n    </Page>\n  );\n}\n\nexport default DataSourceDashboardsPage;\n","import { createContext } from 'react';\n\nimport { DATASOURCES_ROUTES } from '../constants';\nimport { DataSourcesRoutes } from '../types';\n\n// The purpose of this context is to be able to override the data-sources routes (used for links for example) used under\n// the app/features/datasources modules, so we can reuse them more easily in different parts of the application (e.g. under Data Connections)\nexport const DataSourcesRoutesContext = createContext<DataSourcesRoutes>(DATASOURCES_ROUTES);\n","import { useContext, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { DataSourcePluginMeta, DataSourceSettings, urlUtil } from '@grafana/data';\nimport { cleanUpAction } from 'app/core/actions/cleanUp';\nimport appEvents from 'app/core/app_events';\nimport { contextSrv } from 'app/core/core';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { AccessControlAction, StoreState } from 'app/types';\nimport { ShowConfirmModalEvent } from 'app/types/events';\n\nimport { DataSourceRights } from '../types';\n\nimport {\n  initDataSourceSettings,\n  testDataSource,\n  loadDataSource,\n  loadDataSources,\n  loadDataSourcePlugins,\n  addDataSource,\n  updateDataSource,\n  deleteLoadedDataSource,\n} from './actions';\nimport { DataSourcesRoutesContext } from './contexts';\nimport { getDataSourceLoadingNav, buildNavModel, getDataSourceNav } from './navModel';\nimport { getDataSource, getDataSourceMeta } from './selectors';\n\nexport const useInitDataSourceSettings = (uid: string) => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(initDataSourceSettings(uid));\n\n    return function cleanUp() {\n      dispatch(\n        cleanUpAction({\n          stateSelector: (state) => state.dataSourceSettings,\n        })\n      );\n    };\n  }, [uid, dispatch]);\n};\n\nexport const useTestDataSource = (uid: string) => {\n  const dispatch = useDispatch();\n\n  return () => dispatch(testDataSource(uid));\n};\n\nexport const useLoadDataSources = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(loadDataSources());\n  }, [dispatch]);\n};\n\nexport const useLoadDataSource = (uid: string) => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(loadDataSource(uid));\n  }, [dispatch, uid]);\n};\n\nexport const useLoadDataSourcePlugins = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(loadDataSourcePlugins());\n  }, [dispatch]);\n};\n\nexport const useAddDatasource = () => {\n  const dispatch = useDispatch();\n  const dataSourcesRoutes = useDataSourcesRoutes();\n\n  return (plugin: DataSourcePluginMeta) => {\n    dispatch(addDataSource(plugin, dataSourcesRoutes.Edit));\n  };\n};\n\nexport const useUpdateDatasource = () => {\n  const dispatch = useDispatch();\n\n  return (dataSource: DataSourceSettings) => dispatch(updateDataSource(dataSource));\n};\n\nexport const useDeleteLoadedDataSource = () => {\n  const dispatch = useDispatch();\n  const { name } = useSelector((state: StoreState) => state.dataSources.dataSource);\n\n  return () => {\n    appEvents.publish(\n      new ShowConfirmModalEvent({\n        title: 'Delete',\n        text: `Are you sure you want to delete the \"${name}\" data source?`,\n        yesText: 'Delete',\n        icon: 'trash-alt',\n        onConfirm: () => dispatch(deleteLoadedDataSource()),\n      })\n    );\n  };\n};\n\nexport const useDataSource = (uid: string) => {\n  return useSelector((state: StoreState) => getDataSource(state.dataSources, uid));\n};\n\nexport const useDataSourceExploreUrl = (uid: string) => {\n  const dataSource = useDataSource(uid);\n  const exploreState = JSON.stringify({ datasource: dataSource.name, context: 'explore' });\n  const exploreUrl = urlUtil.renderUrl('/explore', { left: exploreState });\n\n  return exploreUrl;\n};\n\nexport const useDataSourceMeta = (pluginType: string): DataSourcePluginMeta => {\n  return useSelector((state: StoreState) => getDataSourceMeta(state.dataSources, pluginType));\n};\n\nexport const useDataSourceSettings = () => {\n  return useSelector((state: StoreState) => state.dataSourceSettings);\n};\n\nexport const useDataSourceSettingsNav = (dataSourceId: string, pageId: string | null) => {\n  const dataSource = useDataSource(dataSourceId);\n  const { plugin, loadError, loading } = useDataSourceSettings();\n  const navIndex = useSelector((state: StoreState) => state.navIndex);\n  const navIndexId = pageId ? `datasource-page-${pageId}` : `datasource-settings-${dataSourceId}`;\n\n  if (loadError) {\n    const node = {\n      text: loadError,\n      subTitle: 'Data Source Error',\n      icon: 'exclamation-triangle',\n    };\n\n    return {\n      node: node,\n      main: node,\n    };\n  }\n\n  if (loading || !plugin) {\n    return getNavModel(navIndex, navIndexId, getDataSourceLoadingNav('settings'));\n  }\n\n  return getNavModel(navIndex, navIndexId, getDataSourceNav(buildNavModel(dataSource, plugin), pageId || 'settings'));\n};\n\nexport const useDataSourceRights = (uid: string): DataSourceRights => {\n  const dataSource = useDataSource(uid);\n  const readOnly = dataSource.readOnly === true;\n  const hasWriteRights = contextSrv.hasPermissionInMetadata(AccessControlAction.DataSourcesWrite, dataSource);\n  const hasDeleteRights = contextSrv.hasPermissionInMetadata(AccessControlAction.DataSourcesDelete, dataSource);\n\n  return {\n    readOnly,\n    hasWriteRights,\n    hasDeleteRights,\n  };\n};\n\nexport const useDataSourcesRoutes = () => {\n  return useContext(DataSourcesRoutesContext);\n};\n"],"names":["dashboards","onImport","onRemove","buttonText","dashboard","revision","importedRevision","className","map","index","Icon","name","imported","href","importedUrl","title","style","textAlign","Button","variant","size","onClick","icon","dashboardId","DataSourceDashboards","uid","useLoadDataSource","dispatch","useDispatch","dataSource","useSelector","s","dataSources","plugins","isLoading","isLoadingPluginDashboards","useEffect","id","loadPluginDashboards","DataSourceDashboardsView","onImportDashboard","overwrite","importDashboard","pluginId","path","inputs","type","value","onRemoveDashboard","removeDashboard","PageLoader","DataSourceDashboardsPage","props","match","params","Page","navId","DataSourcesRoutesContext","createContext","DATASOURCES_ROUTES","useInitDataSourceSettings","initDataSourceSettings","cleanUpAction","stateSelector","state","dataSourceSettings","useTestDataSource","testDataSource","useLoadDataSources","loadDataSources","loadDataSource","useLoadDataSourcePlugins","loadDataSourcePlugins","useAddDatasource","dataSourcesRoutes","useDataSourcesRoutes","plugin","addDataSource","Edit","useUpdateDatasource","updateDataSource","useDeleteLoadedDataSource","appEvents","ShowConfirmModalEvent","text","yesText","onConfirm","deleteLoadedDataSource","useDataSource","getDataSource","useDataSourceExploreUrl","exploreState","JSON","stringify","datasource","context","urlUtil","left","useDataSourceMeta","pluginType","getDataSourceMeta","useDataSourceSettings","useDataSourceSettingsNav","dataSourceId","pageId","loadError","loading","navIndex","navIndexId","node","subTitle","main","getNavModel","getDataSourceLoadingNav","getDataSourceNav","buildNavModel","useDataSourceRights","readOnly","hasWriteRights","contextSrv","AccessControlAction","hasDeleteRights","useContext"],"sourceRoot":""}