{"version":3,"sources":["webpack:///./public/app/features/datasources/state/buildCategories.ts","webpack:///./public/app/features/datasources/state/actions.ts","webpack:///./public/app/core/components/FilterInput/FilterInput.tsx","webpack:///./public/app/features/datasources/NewDataSourcePage.tsx","webpack:///./public/app/features/datasources/state/navModel.ts","webpack:///./public/app/features/datasources/state/selectors.ts"],"names":["buildCategories","plugins","categories","id","title","categoryIndex","pluginIndex","enterprisePlugins","getPhantomPlugin","name","description","imgUrl","categories_1","Object","tslib_es6","categories_1_1","next","done","category","value","plugin","find","item","info","links","_b","e_5","_c","push","plugins_1","plugins_1_1","categories_2","categories_2_1","type","src","datasource","module","baseUrl","logos","small","large","author","url","screenshots","updated","version","enterprisePlugins_1","e_4","enterprisePlugins_1_1","sortPlugins","sortingRules","prometheus","graphite","loki","mysql","postgres","gcloud","sort","a","b","aSort","bSort","options","initDataSourceSettings","pageId","dependencies","loadDataSource","getDataSource","selectors","getDataSourceMeta","importDataSourcePlugin","plugin_loader","dispatch","getState","isNaN","reducers","Error","_a","sent","dataSourceSettings","dataSource","dataSources","dataSourceMeta","importedPlugin","console","log","err_1","testDataSource","dataSourceName","getDatasourceSrv","datasource_srv","getBackendSrv","backend_srv","get","dsApi","testDatasource","withNoBackendCache","result","message","err_2","statusText","loadDataSources","_this","this","response","PluginSettingsCache","pluginInfo","actions","navModel","addDataSource","getStore","newInstance","access","isDefault","length","nameExits","nameHasSuffix","getNewName","digit","getLastDigit","findNewName","post","path","loadDataSourcePlugins","enabled","updateDataSource","put","updateFrontendSettings","deleteDataSource","delete","filter","toLowerCase","then","settings","config","datasources","defaultDatasource","init","endsWith","parseInt","slice","__webpack_require__","d","__webpack_exports__","FilterInput","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_grafana_data__WEBPACK_IMPORTED_MODULE_1__","props","ref","createElement","className","labelClassName","inputClassName","onChange","event","target","placeholder","NewDataSourcePage","_super","apply","arguments","onDataSourceTypeClicked","onSearchQueryChange","setDataSourceTypeSearchQuery","onLearnMoreClick","evt","stopPropagation","tslib__WEBPACK_IMPORTED_MODULE_0__","prototype","componentDidMount","searchInput","focus","renderPlugins","react__WEBPACK_IMPORTED_MODULE_1___default","_grafana_ui__WEBPACK_IMPORTED_MODULE_5__","items","getItemKey","toString","renderItem","DataSourceTypeCard","onClick","renderCategories","Fragment","map","key","href","rel","render","isLoading","searchQuery","app_core_components_Page_Page__WEBPACK_IMPORTED_MODULE_7__","Contents","app_core_components_FilterInput_FilterInput__WEBPACK_IMPORTED_MODULE_10__","elem","react__WEBPACK_IMPORTED_MODULE_1__","isPhantom","learnMoreLink","mainClassName","classnames__WEBPACK_IMPORTED_MODULE_2___default","add-data-source-item--phantom","aria-label","_grafana_e2e__WEBPACK_IMPORTED_MODULE_6__","pages","AddDataSource","dataSourcePlugins","getNavModel","main","icon","text","subTitle","node","mapDispatchToProps","_state_actions__WEBPACK_IMPORTED_MODULE_8__","_state_reducers__WEBPACK_IMPORTED_MODULE_11__","react_hot_loader__WEBPACK_IMPORTED_MODULE_4__","react_redux__WEBPACK_IMPORTED_MODULE_3__","state","_state_selectors__WEBPACK_IMPORTED_MODULE_9__","dataSourceTypeSearchQuery","isLoadingDataSources","buildNavModel","pluginMeta","meta","img","breadcrumbs","children","active","configPages","page","includes","undefined","include","app_core_config__WEBPACK_IMPORTED_MODULE_2__","licenseInfo","hasLicense","getDataSourceLoadingNav","pageName","basicAuth","basicAuthUser","basicAuthPassword","withCredentials","database","jsonData","authType","defaultRegion","orgId","password","readOnly","typeLogoUrl","user","child","indexOf","getDataSources","getDataSourcePlugins","getDataSourcesSearchQuery","getDataSourcesLayoutMode","getDataSourcesCount","regex","RegExp","test","dataSourceId","layoutMode","dataSourcesCount"],"mappings":"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","file":"NewDataSourcePage.4d0490a94b199a11f40c.js","sourcesContent":["import { DataSourcePluginMeta, PluginType } from '@grafana/data';\nimport { DataSourcePluginCategory } from 'app/types';\n\nexport function buildCategories(plugins: DataSourcePluginMeta[]): DataSourcePluginCategory[] {\n  const categories: DataSourcePluginCategory[] = [\n    { id: 'tsdb', title: 'Time series databases', plugins: [] },\n    { id: 'logging', title: 'Logging & document databases', plugins: [] },\n    { id: 'sql', title: 'SQL', plugins: [] },\n    { id: 'cloud', title: 'Cloud', plugins: [] },\n    { id: 'enterprise', title: 'Enterprise plugins', plugins: [] },\n    { id: 'other', title: 'Others', plugins: [] },\n  ];\n\n  const categoryIndex: Record<string, DataSourcePluginCategory> = {};\n  const pluginIndex: Record<string, DataSourcePluginMeta> = {};\n  const enterprisePlugins = getEnterprisePhantomPlugins();\n\n  // build indices\n  for (const category of categories) {\n    categoryIndex[category.id] = category;\n  }\n\n  for (const plugin of plugins) {\n    // Force category for enterprise plugins\n    if (enterprisePlugins.find(item => item.id === plugin.id)) {\n      plugin.category = 'enterprise';\n    }\n\n    // Fix link name\n    if (plugin.info.links) {\n      for (const link of plugin.info.links) {\n        link.name = 'Learn more';\n      }\n    }\n\n    const category = categories.find(item => item.id === plugin.category) || categoryIndex['other'];\n    category.plugins.push(plugin);\n    // add to plugin index\n    pluginIndex[plugin.id] = plugin;\n  }\n\n  for (const category of categories) {\n    // add phantom plugin\n    if (category.id === 'cloud') {\n      category.plugins.push(getGrafanaCloudPhantomPlugin());\n    }\n\n    // add phantom plugins\n    if (category.id === 'enterprise') {\n      for (const plugin of enterprisePlugins) {\n        if (!pluginIndex[plugin.id]) {\n          category.plugins.push(plugin);\n        }\n      }\n    }\n\n    sortPlugins(category.plugins);\n  }\n\n  return categories;\n}\n\nfunction sortPlugins(plugins: DataSourcePluginMeta[]) {\n  const sortingRules: { [id: string]: number } = {\n    prometheus: 100,\n    graphite: 95,\n    loki: 90,\n    mysql: 80,\n    postgres: 79,\n    gcloud: -1,\n  };\n\n  plugins.sort((a, b) => {\n    const aSort = sortingRules[a.id] || 0;\n    const bSort = sortingRules[b.id] || 0;\n    if (aSort > bSort) {\n      return -1;\n    }\n    if (aSort < bSort) {\n      return 1;\n    }\n\n    return a.name > b.name ? -1 : 1;\n  });\n}\n\nfunction getEnterprisePhantomPlugins(): DataSourcePluginMeta[] {\n  return [\n    getPhantomPlugin({\n      id: 'grafana-splunk-datasource',\n      name: 'Splunk',\n      description: 'Visualize & explore Splunk logs',\n      imgUrl: 'public/img/plugins/splunk_logo_128.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-oracle-datasource',\n      name: 'Oracle',\n      description: 'Visualize & explore Oracle SQL',\n      imgUrl: 'public/img/plugins/oracle.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-dynatrace-datasource',\n      name: 'Dynatrace',\n      description: 'Visualize & explore Dynatrace data',\n      imgUrl: 'public/img/plugins/dynatrace.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-servicenow-datasource',\n      description: 'ServiceNow integration & data source',\n      name: 'ServiceNow',\n      imgUrl: 'public/img/plugins/servicenow.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-datadog-datasource',\n      description: 'DataDog integration & data source',\n      name: 'DataDog',\n      imgUrl: 'public/img/plugins/datadog.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-newrelic-datasource',\n      description: 'New Relic integration & data source',\n      name: 'New Relic',\n      imgUrl: 'public/img/plugins/newrelic.svg',\n    }),\n  ];\n}\n\nfunction getGrafanaCloudPhantomPlugin(): DataSourcePluginMeta {\n  return {\n    id: 'gcloud',\n    name: 'Grafana Cloud',\n    type: PluginType.datasource,\n    module: 'phantom',\n    baseUrl: '',\n    info: {\n      description: 'Hosted Graphite, Prometheus and Loki',\n      logos: { small: 'public/img/grafana_icon.svg', large: 'asd' },\n      author: { name: 'Grafana Labs' },\n      links: [\n        {\n          url: 'https://grafana.com/products/cloud/',\n          name: 'Learn more',\n        },\n      ],\n      screenshots: [],\n      updated: '2019-05-10',\n      version: '1.0.0',\n    },\n  };\n}\n\ninterface GetPhantomPluginOptions {\n  id: string;\n  name: string;\n  description: string;\n  imgUrl: string;\n}\n\nfunction getPhantomPlugin(options: GetPhantomPluginOptions): DataSourcePluginMeta {\n  return {\n    id: options.id,\n    name: options.name,\n    type: PluginType.datasource,\n    module: 'phantom',\n    baseUrl: '',\n    info: {\n      description: options.description,\n      logos: { small: options.imgUrl, large: options.imgUrl },\n      author: { name: 'Grafana Labs' },\n      links: [\n        {\n          url: 'https://grafana.com/grafana/plugins/' + options.id,\n          name: 'Install now',\n        },\n      ],\n      screenshots: [],\n      updated: '2019-05-10',\n      version: '1.0.0',\n    },\n  };\n}\n","import config from '../../../core/config';\nimport { getBackendSrv } from 'app/core/services/backend_srv';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { updateLocation, updateNavIndex } from 'app/core/actions';\nimport { buildNavModel } from './navModel';\nimport { DataSourcePluginMeta, DataSourceSettings } from '@grafana/data';\nimport { DataSourcePluginCategory, ThunkResult, ThunkDispatch } from 'app/types';\nimport { getPluginSettings } from 'app/features/plugins/PluginSettingsCache';\nimport { importDataSourcePlugin } from 'app/features/plugins/plugin_loader';\nimport {\n  dataSourceLoaded,\n  dataSourceMetaLoaded,\n  dataSourcePluginsLoad,\n  dataSourcePluginsLoaded,\n  dataSourcesLoaded,\n  initDataSourceSettingsFailed,\n  initDataSourceSettingsSucceeded,\n  testDataSourceStarting,\n  testDataSourceSucceeded,\n  testDataSourceFailed,\n} from './reducers';\nimport { buildCategories } from './buildCategories';\nimport { getDataSource, getDataSourceMeta } from './selectors';\nimport { getDataSourceSrv } from '@grafana/runtime';\n\nexport interface DataSourceTypesLoadedPayload {\n  plugins: DataSourcePluginMeta[];\n  categories: DataSourcePluginCategory[];\n}\n\nexport interface InitDataSourceSettingDependencies {\n  loadDataSource: typeof loadDataSource;\n  getDataSource: typeof getDataSource;\n  getDataSourceMeta: typeof getDataSourceMeta;\n  importDataSourcePlugin: typeof importDataSourcePlugin;\n}\n\nexport interface TestDataSourceDependencies {\n  getDatasourceSrv: typeof getDataSourceSrv;\n  getBackendSrv: typeof getBackendSrv;\n}\n\nexport const initDataSourceSettings = (\n  pageId: number,\n  dependencies: InitDataSourceSettingDependencies = {\n    loadDataSource,\n    getDataSource,\n    getDataSourceMeta,\n    importDataSourcePlugin,\n  }\n): ThunkResult<void> => {\n  return async (dispatch: ThunkDispatch, getState) => {\n    if (isNaN(pageId)) {\n      dispatch(initDataSourceSettingsFailed(new Error('Invalid ID')));\n      return;\n    }\n\n    try {\n      await dispatch(dependencies.loadDataSource(pageId));\n      if (getState().dataSourceSettings.plugin) {\n        return;\n      }\n\n      const dataSource = dependencies.getDataSource(getState().dataSources, pageId);\n      const dataSourceMeta = dependencies.getDataSourceMeta(getState().dataSources, dataSource.type);\n      const importedPlugin = await dependencies.importDataSourcePlugin(dataSourceMeta);\n\n      dispatch(initDataSourceSettingsSucceeded(importedPlugin));\n    } catch (err) {\n      console.log('Failed to import plugin module', err);\n      dispatch(initDataSourceSettingsFailed(err));\n    }\n  };\n};\n\nexport const testDataSource = (\n  dataSourceName: string,\n  dependencies: TestDataSourceDependencies = {\n    getDatasourceSrv,\n    getBackendSrv,\n  }\n): ThunkResult<void> => {\n  return async (dispatch: ThunkDispatch, getState) => {\n    const dsApi = await dependencies.getDatasourceSrv().get(dataSourceName);\n\n    if (!dsApi.testDatasource) {\n      return;\n    }\n\n    dispatch(testDataSourceStarting());\n\n    dependencies.getBackendSrv().withNoBackendCache(async () => {\n      try {\n        const result = await dsApi.testDatasource();\n\n        dispatch(testDataSourceSucceeded(result));\n      } catch (err) {\n        let message = '';\n\n        if (err.statusText) {\n          message = 'HTTP Error ' + err.statusText;\n        } else {\n          message = err.message;\n        }\n\n        dispatch(testDataSourceFailed({ message }));\n      }\n    });\n  };\n};\n\nexport function loadDataSources(): ThunkResult<void> {\n  return async dispatch => {\n    const response = await getBackendSrv().get('/api/datasources');\n    dispatch(dataSourcesLoaded(response));\n  };\n}\n\nexport function loadDataSource(id: number): ThunkResult<void> {\n  return async dispatch => {\n    const dataSource = await getBackendSrv().get(`/api/datasources/${id}`);\n    const pluginInfo = (await getPluginSettings(dataSource.type)) as DataSourcePluginMeta;\n    const plugin = await importDataSourcePlugin(pluginInfo);\n\n    dispatch(dataSourceLoaded(dataSource));\n    dispatch(dataSourceMetaLoaded(pluginInfo));\n    dispatch(updateNavIndex(buildNavModel(dataSource, plugin)));\n  };\n}\n\nexport function addDataSource(plugin: DataSourcePluginMeta): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    await dispatch(loadDataSources());\n\n    const dataSources = getStore().dataSources.dataSources;\n\n    const newInstance = {\n      name: plugin.name,\n      type: plugin.id,\n      access: 'proxy',\n      isDefault: dataSources.length === 0,\n    };\n\n    if (nameExits(dataSources, newInstance.name)) {\n      newInstance.name = findNewName(dataSources, newInstance.name);\n    }\n\n    const result = await getBackendSrv().post('/api/datasources', newInstance);\n    dispatch(updateLocation({ path: `/datasources/edit/${result.id}` }));\n  };\n}\n\nexport function loadDataSourcePlugins(): ThunkResult<void> {\n  return async dispatch => {\n    dispatch(dataSourcePluginsLoad());\n    const plugins = await getBackendSrv().get('/api/plugins', { enabled: 1, type: 'datasource' });\n    const categories = buildCategories(plugins);\n    dispatch(dataSourcePluginsLoaded({ plugins, categories }));\n  };\n}\n\nexport function updateDataSource(dataSource: DataSourceSettings): ThunkResult<void> {\n  return async dispatch => {\n    await getBackendSrv().put(`/api/datasources/${dataSource.id}`, dataSource);\n    await updateFrontendSettings();\n    return dispatch(loadDataSource(dataSource.id));\n  };\n}\n\nexport function deleteDataSource(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const dataSource = getStore().dataSources.dataSource;\n    await getBackendSrv().delete(`/api/datasources/${dataSource.id}`);\n    await updateFrontendSettings();\n    dispatch(updateLocation({ path: '/datasources' }));\n  };\n}\n\ninterface ItemWithName {\n  name: string;\n}\n\nexport function nameExits(dataSources: ItemWithName[], name: string) {\n  return (\n    dataSources.filter(dataSource => {\n      return dataSource.name.toLowerCase() === name.toLowerCase();\n    }).length > 0\n  );\n}\n\nexport function findNewName(dataSources: ItemWithName[], name: string) {\n  // Need to loop through current data sources to make sure\n  // the name doesn't exist\n  while (nameExits(dataSources, name)) {\n    // If there's a duplicate name that doesn't end with '-x'\n    // we can add -1 to the name and be done.\n    if (!nameHasSuffix(name)) {\n      name = `${name}-1`;\n    } else {\n      // if there's a duplicate name that ends with '-x'\n      // we can try to increment the last digit until the name is unique\n\n      // remove the 'x' part and replace it with the new number\n      name = `${getNewName(name)}${incrementLastDigit(getLastDigit(name))}`;\n    }\n  }\n\n  return name;\n}\n\nfunction updateFrontendSettings() {\n  return getBackendSrv()\n    .get('/api/frontend/settings')\n    .then((settings: any) => {\n      config.datasources = settings.datasources;\n      config.defaultDatasource = settings.defaultDatasource;\n      getDatasourceSrv().init();\n    });\n}\n\nfunction nameHasSuffix(name: string) {\n  return name.endsWith('-', name.length - 1);\n}\n\nfunction getLastDigit(name: string) {\n  return parseInt(name.slice(-1), 10);\n}\n\nfunction incrementLastDigit(digit: number) {\n  return isNaN(digit) ? 1 : digit + 1;\n}\n\nfunction getNewName(name: string) {\n  return name.slice(0, name.length - 1);\n}\n","import React, { forwardRef } from 'react';\nimport { escapeStringForRegex, unEscapeStringFromRegex } from '@grafana/data';\n\nexport interface Props {\n  value: string | undefined;\n  placeholder?: string;\n  labelClassName?: string;\n  inputClassName?: string;\n  onChange: (value: string) => void;\n}\n\nexport const FilterInput = forwardRef<HTMLInputElement, Props>((props, ref) => (\n  <label className={props.labelClassName}>\n    <input\n      ref={ref}\n      type=\"text\"\n      className={props.inputClassName}\n      value={unEscapeStringFromRegex(props.value)}\n      onChange={event => props.onChange(escapeStringForRegex(event.target.value))}\n      placeholder={props.placeholder ? props.placeholder : null}\n    />\n    <i className=\"gf-form-input-icon fa fa-search\" />\n  </label>\n));\n","import React, { FC, PureComponent } from 'react';\nimport classNames from 'classnames';\nimport { connect } from 'react-redux';\nimport { hot } from 'react-hot-loader';\nimport { DataSourcePluginMeta, NavModel } from '@grafana/data';\nimport { List } from '@grafana/ui';\nimport { e2e } from '@grafana/e2e';\n\nimport Page from 'app/core/components/Page/Page';\nimport { DataSourcePluginCategory, StoreState } from 'app/types';\nimport { addDataSource, loadDataSourcePlugins } from './state/actions';\nimport { getDataSourcePlugins } from './state/selectors';\nimport { FilterInput } from 'app/core/components/FilterInput/FilterInput';\nimport { setDataSourceTypeSearchQuery } from './state/reducers';\n\nexport interface Props {\n  navModel: NavModel;\n  plugins: DataSourcePluginMeta[];\n  categories: DataSourcePluginCategory[];\n  isLoading: boolean;\n  addDataSource: typeof addDataSource;\n  loadDataSourcePlugins: typeof loadDataSourcePlugins;\n  searchQuery: string;\n  setDataSourceTypeSearchQuery: typeof setDataSourceTypeSearchQuery;\n}\n\nclass NewDataSourcePage extends PureComponent<Props> {\n  searchInput: HTMLElement;\n\n  componentDidMount() {\n    this.props.loadDataSourcePlugins();\n    this.searchInput.focus();\n  }\n\n  onDataSourceTypeClicked = (plugin: DataSourcePluginMeta) => {\n    this.props.addDataSource(plugin);\n  };\n\n  onSearchQueryChange = (value: string) => {\n    this.props.setDataSourceTypeSearchQuery(value);\n  };\n\n  renderPlugins(plugins: DataSourcePluginMeta[]) {\n    if (!plugins || !plugins.length) {\n      return null;\n    }\n\n    return (\n      <List\n        items={plugins}\n        getItemKey={item => item.id.toString()}\n        renderItem={item => (\n          <DataSourceTypeCard\n            plugin={item}\n            onClick={() => this.onDataSourceTypeClicked(item)}\n            onLearnMoreClick={this.onLearnMoreClick}\n          />\n        )}\n      />\n    );\n  }\n\n  onLearnMoreClick = (evt: React.SyntheticEvent<HTMLElement>) => {\n    evt.stopPropagation();\n  };\n\n  renderCategories() {\n    const { categories } = this.props;\n\n    return (\n      <>\n        {categories.map(category => (\n          <div className=\"add-data-source-category\" key={category.id}>\n            <div className=\"add-data-source-category__header\">{category.title}</div>\n            {this.renderPlugins(category.plugins)}\n          </div>\n        ))}\n        <div className=\"add-data-source-more\">\n          <a\n            className=\"btn btn-inverse\"\n            href=\"https://grafana.com/plugins?type=datasource&utm_source=grafana_add_ds\"\n            target=\"_blank\"\n            rel=\"noopener\"\n          >\n            Find more data source plugins on grafana.com\n          </a>\n        </div>\n      </>\n    );\n  }\n\n  render() {\n    const { navModel, isLoading, searchQuery, plugins } = this.props;\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={isLoading}>\n          <div className=\"page-action-bar\">\n            <div className=\"gf-form gf-form--grow\">\n              <FilterInput\n                ref={elem => (this.searchInput = elem)}\n                labelClassName=\"gf-form--has-input-icon\"\n                inputClassName=\"gf-form-input width-30\"\n                value={searchQuery}\n                onChange={this.onSearchQueryChange}\n                placeholder=\"Filter by name or type\"\n              />\n            </div>\n            <div className=\"page-action-bar__spacer\" />\n            <a className=\"btn btn-secondary\" href=\"datasources\">\n              Cancel\n            </a>\n          </div>\n          <div>\n            {searchQuery && this.renderPlugins(plugins)}\n            {!searchQuery && this.renderCategories()}\n          </div>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\ninterface DataSourceTypeCardProps {\n  plugin: DataSourcePluginMeta;\n  onClick: () => void;\n  onLearnMoreClick: (evt: React.SyntheticEvent<HTMLElement>) => void;\n}\n\nconst DataSourceTypeCard: FC<DataSourceTypeCardProps> = props => {\n  const { plugin, onLearnMoreClick } = props;\n  const isPhantom = plugin.module === 'phantom';\n  const onClick = !isPhantom ? props.onClick : () => {};\n\n  // find first plugin info link\n  const learnMoreLink = plugin.info.links && plugin.info.links.length > 0 ? plugin.info.links[0] : null;\n  const mainClassName = classNames('add-data-source-item', {\n    'add-data-source-item--phantom': isPhantom,\n  });\n\n  return (\n    <div\n      className={mainClassName}\n      onClick={onClick}\n      aria-label={e2e.pages.AddDataSource.selectors.dataSourcePlugins(plugin.name)}\n    >\n      <img className=\"add-data-source-item-logo\" src={plugin.info.logos.small} />\n      <div className=\"add-data-source-item-text-wrapper\">\n        <span className=\"add-data-source-item-text\">{plugin.name}</span>\n        {plugin.info.description && <span className=\"add-data-source-item-desc\">{plugin.info.description}</span>}\n      </div>\n      <div className=\"add-data-source-item-actions\">\n        {learnMoreLink && (\n          <a\n            className=\"btn btn-inverse\"\n            href={`${learnMoreLink.url}?utm_source=grafana_add_ds`}\n            target=\"_blank\"\n            rel=\"noopener\"\n            onClick={onLearnMoreClick}\n          >\n            {learnMoreLink.name} <i className=\"fa fa-external-link add-datasource-item-actions__btn-icon\" />\n          </a>\n        )}\n        {!isPhantom && <button className=\"btn btn-primary\">Select</button>}\n      </div>\n    </div>\n  );\n};\n\nexport function getNavModel(): NavModel {\n  const main = {\n    icon: 'gicon gicon-add-datasources',\n    id: 'datasource-new',\n    text: 'Add data source',\n    href: 'datasources/new',\n    subTitle: 'Choose a data source type',\n  };\n\n  return {\n    main: main,\n    node: main,\n  };\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(),\n    plugins: getDataSourcePlugins(state.dataSources),\n    searchQuery: state.dataSources.dataSourceTypeSearchQuery,\n    categories: state.dataSources.categories,\n    isLoading: state.dataSources.isLoadingDataSources,\n  };\n}\n\nconst mapDispatchToProps = {\n  addDataSource,\n  loadDataSourcePlugins,\n  setDataSourceTypeSearchQuery,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(NewDataSourcePage));\n","import { DataSourceSettings, PluginType, PluginInclude, NavModel, NavModelItem } from '@grafana/data';\nimport config from 'app/core/config';\nimport { GenericDataSourcePlugin } from '../settings/PluginSettings';\n\nexport function buildNavModel(dataSource: DataSourceSettings, plugin: GenericDataSourcePlugin): NavModelItem {\n  const pluginMeta = plugin.meta;\n\n  const navModel = {\n    img: pluginMeta.info.logos.large,\n    id: 'datasource-' + dataSource.id,\n    subTitle: `Type: ${pluginMeta.name}`,\n    url: '',\n    text: dataSource.name,\n    breadcrumbs: [{ title: 'Data Sources', url: 'datasources' }],\n    children: [\n      {\n        active: false,\n        icon: 'fa fa-fw fa-sliders',\n        id: `datasource-settings-${dataSource.id}`,\n        text: 'Settings',\n        url: `datasources/edit/${dataSource.id}/`,\n      },\n    ],\n  };\n\n  if (plugin.configPages) {\n    for (const page of plugin.configPages) {\n      navModel.children.push({\n        active: false,\n        text: page.title,\n        icon: page.icon,\n        url: `datasources/edit/${dataSource.id}/?page=${page.id}`,\n        id: `datasource-page-${page.id}`,\n      });\n    }\n  }\n\n  if (pluginMeta.includes && hasDashboards(pluginMeta.includes)) {\n    navModel.children.push({\n      active: false,\n      icon: 'fa fa-fw fa-th-large',\n      id: `datasource-dashboards-${dataSource.id}`,\n      text: 'Dashboards',\n      url: `datasources/edit/${dataSource.id}/dashboards`,\n    });\n  }\n\n  if (config.licenseInfo.hasLicense) {\n    navModel.children.push({\n      active: false,\n      icon: 'fa fa-fw fa-lock',\n      id: `datasource-permissions-${dataSource.id}`,\n      text: 'Permissions',\n      url: `datasources/edit/${dataSource.id}/permissions`,\n    });\n  }\n\n  return navModel;\n}\n\nexport function getDataSourceLoadingNav(pageName: string): NavModel {\n  const main = buildNavModel(\n    {\n      access: '',\n      basicAuth: false,\n      basicAuthUser: '',\n      basicAuthPassword: '',\n      withCredentials: false,\n      database: '',\n      id: 1,\n      isDefault: false,\n      jsonData: { authType: 'credentials', defaultRegion: 'eu-west-2' },\n      name: 'Loading',\n      orgId: 1,\n      password: '',\n      readOnly: false,\n      type: 'Loading',\n      typeLogoUrl: 'public/img/icn-datasource.svg',\n      url: '',\n      user: '',\n    },\n    {\n      meta: {\n        id: '1',\n        type: PluginType.datasource,\n        name: '',\n        info: {\n          author: {\n            name: '',\n            url: '',\n          },\n          description: '',\n          links: [{ name: '', url: '' }],\n          logos: {\n            large: '',\n            small: '',\n          },\n          screenshots: [],\n          updated: '',\n          version: '',\n        },\n        includes: [],\n        module: '',\n        baseUrl: '',\n      },\n    } as GenericDataSourcePlugin\n  );\n\n  let node: NavModelItem;\n\n  // find active page\n  for (const child of main.children) {\n    if (child.id.indexOf(pageName) > 0) {\n      child.active = true;\n      node = child;\n      break;\n    }\n  }\n\n  return {\n    main: main,\n    node: node,\n  };\n}\n\nfunction hasDashboards(includes: PluginInclude[]): boolean {\n  return (\n    includes.find(include => {\n      return include.type === 'dashboard';\n    }) !== undefined\n  );\n}\n","import { DataSourceSettings, DataSourcePluginMeta } from '@grafana/data';\nimport { DataSourcesState } from '../../../types/datasources';\nimport { UrlQueryValue } from '@grafana/runtime';\n\nexport const getDataSources = (state: DataSourcesState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  return state.dataSources.filter((dataSource: DataSourceSettings) => {\n    return regex.test(dataSource.name) || regex.test(dataSource.database);\n  });\n};\n\nexport const getDataSourcePlugins = (state: DataSourcesState) => {\n  const regex = new RegExp(state.dataSourceTypeSearchQuery, 'i');\n\n  return state.plugins.filter((type: DataSourcePluginMeta) => {\n    return regex.test(type.name);\n  });\n};\n\nexport const getDataSource = (state: DataSourcesState, dataSourceId: UrlQueryValue): DataSourceSettings | null => {\n  if (state.dataSource.id === parseInt(dataSourceId as string, 10)) {\n    return state.dataSource;\n  }\n  return {} as DataSourceSettings;\n};\n\nexport const getDataSourceMeta = (state: DataSourcesState, type: string): DataSourcePluginMeta => {\n  if (state.dataSourceMeta.id === type) {\n    return state.dataSourceMeta;\n  }\n\n  return {} as DataSourcePluginMeta;\n};\n\nexport const getDataSourcesSearchQuery = (state: DataSourcesState) => state.searchQuery;\nexport const getDataSourcesLayoutMode = (state: DataSourcesState) => state.layoutMode;\nexport const getDataSourcesCount = (state: DataSourcesState) => state.dataSourcesCount;\n"],"sourceRoot":""}