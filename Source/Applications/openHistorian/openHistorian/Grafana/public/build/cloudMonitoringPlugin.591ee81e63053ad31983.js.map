{"version":3,"sources":["webpack:///./public/app/plugins/datasource/cloud-monitoring/api.ts","webpack:///./public/app/plugins/datasource/cloud-monitoring/CloudMonitoringMetricFindQuery.ts","webpack:///./public/app/plugins/datasource/cloud-monitoring/datasource.ts","webpack:///./public/app/plugins/datasource/cloud-monitoring/config_ctrl.ts","webpack:///./public/app/plugins/datasource/cloud-monitoring/annotations_query_ctrl.ts","webpack:///./public/app/plugins/datasource/cloud-monitoring/components/VariableQueryEditor.tsx","webpack:///./public/app/plugins/datasource/cloud-monitoring/module.ts"],"names":["Api","baseUrl","this","cache","defaultOptions","useCache","responseMap","res","path","options","getBackendSrv","datasourceRequest","url","method","response","responsePropName","match","data","map","appEvents","emit","CoreEvents","dsRequestError","error","formatCloudMonitoringError","projectName","CloudMonitoringMetricFindQuery","datasource","query","getDefaultProject","selectedQueryType","MetricFindQueryTypes","Projects","Services","MetricTypes","LabelKeys","LabelValues","ResourceTypes","Aligners","AlignmentPeriods","Aggregations","SLOServices","SLO","Selectors","handleProjectsQuery","handleServiceQuery","handleMetricTypesQuery","handleLabelKeysQuery","handleLabelValuesQuery","handleResourceTypeQuery","handleAlignersQuery","handleAlignmentPeriodQuery","handleAggregationQuery","handleSLOServicesQuery","handleSLOQuery","handleSelectorQuery","console","getProjects","projects","s","text","label","value","expandable","getMetricTypes","metricDescriptors","services","extractServicesFromMetricDescriptors","serviceShortName","service","selectedService","getMetricTypesByService","templateSrv","replace","displayName","type","selectedMetricType","getLabelKeys","labelKeys","toFindQueryResult","labelKey","getLabels","labels","interpolatedKey","values","hasOwnProperty","descriptor","find","m","getAlignmentOptionsByMetric","valueType","metricKind","getAggregationOptionsByMetric","getSLOServices","selectedSLOService","getServiceLevelObjectives","slos","selectors","alignmentPeriods","x","isString","CloudMonitoringDatasource","instanceSettings","getTemplateSrv","timeSrv","getTimeSrv","authenticationType","jsonData","api","API","result","getTimeSeries","results","Object","forEach","queryRes","series","unit","resolvePanelUnitFromTargets","targets","timeSerie","target","name","datapoints","points","refId","meta","df","toDataFrame","fields","field","deepLink","length","config","links","title","targetBlank","push","ensureGCEDefaultProject","annotation","queries","datasourceId","id","view","crossSeriesReducer","perSeriesAligner","metricType","scopedVars","tags","filters","interpolateFilters","post","from","range","valueOf","toString","to","tables","rows","v","time","Date","parse","cloudMonitoringMetricFindQuery","execute","migrateQuery","filter","shouldRunQuery","q","prepareTimeSeriesQuery","intervalMs","groupBys","queryType","QueryType","METRICS","metricQuery","interpolateGroupBys","timeRange","defaultErrorMessage","test","status","message","statusText","_","code","then","getGCEDefaultProject","defaultProject","catch","err","gceDefaultProject","get","split","serviceId","Promise","resolve","interpolateProps","p","goal","projectId","hide","rest","key","maxLines","metric","object","entries","reduce","acc","sloQuery","selectorName","sloId","completeFilter","chunk","operator","condition","flatten","interpolatedGroupBys","gb","interpolated","Array","isArray","concat","every","t","cloudMonitoringUnitMappings","getVariables","DataSourceApi","CloudMonitoringConfigCtrl","datasourceSrv","validationErrors","defaultAuthenticationType","AuthType","JWT","current","secureJsonData","secureJsonFields","authenticationTypes","authTypes","jwt","privateKey","private_key","tokenUri","token_uri","clientEmail","client_email","project_id","resetValidationMessages","inputDataValid","json","jsonText","validateJwt","save","e","JSON","originalEvent","clipboardData","getData","assign","templateUrl","CloudMonitoringAnnotationsQueryCtrl","onQueryChange","bind","CloudMonitoringVariableQueryEditor","props","queryTypes","defaults","metricTypes","sloServices","loading","onPropsChange","state","queryModel","onChange","some","setState","prevProps","prevState","selecQueryTypeChanged","selectSLOServiceChanged","l","templateVariables","insertTemplateVariables","onValueChange","onProjectChange","onServiceChange","onMetricTypeChange","onLabelKeyChange","className","onQueryTypeChange","renderQueryTypeSwitch","PureComponent","plugin","DataSourcePlugin","setQueryEditor","QueryEditor","setConfigCtrl","setAnnotationQueryCtrl","setVariableQueryEditor"],"mappings":"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","file":"cloudMonitoringPlugin.591ee81e63053ad31983.js","sourcesContent":["import appEvents from 'app/core/app_events';\nimport { CoreEvents } from 'app/types';\nimport { SelectableValue } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\n\nimport { formatCloudMonitoringError } from './functions';\nimport { MetricDescriptor } from './types';\n\ninterface Options {\n  responseMap?: (res: any) => SelectableValue<string> | MetricDescriptor;\n  baseUrl?: string;\n  useCache?: boolean;\n}\n\nexport default class Api {\n  cache: { [key: string]: Array<SelectableValue<string>> };\n  defaultOptions: Options;\n\n  constructor(private baseUrl: string) {\n    this.cache = {};\n    this.defaultOptions = {\n      useCache: true,\n      responseMap: (res: any) => res,\n      baseUrl: this.baseUrl,\n    };\n  }\n\n  async get(path: string, options?: Options): Promise<Array<SelectableValue<string>> | MetricDescriptor[]> {\n    try {\n      const { useCache, responseMap, baseUrl } = { ...this.defaultOptions, ...options };\n\n      if (useCache && this.cache[path]) {\n        return this.cache[path];\n      }\n\n      const response = await getBackendSrv().datasourceRequest({\n        url: baseUrl + path,\n        method: 'GET',\n      });\n\n      const responsePropName = path.match(/([^\\/]*)\\/*$/)![1];\n      let res = [];\n      if (response && response.data && response.data[responsePropName]) {\n        res = response.data[responsePropName].map(responseMap);\n      }\n\n      if (useCache) {\n        this.cache[path] = res;\n      }\n\n      return res;\n    } catch (error) {\n      appEvents.emit(CoreEvents.dsRequestError, { error: { data: { error: formatCloudMonitoringError(error) } } });\n      return [];\n    }\n  }\n\n  async post(data: { [key: string]: any }) {\n    return getBackendSrv().datasourceRequest({\n      url: '/api/tsdb/query',\n      method: 'POST',\n      data,\n    });\n  }\n\n  async test(projectName: string) {\n    return getBackendSrv().datasourceRequest({\n      url: `${this.baseUrl}${projectName}/metricDescriptors`,\n      method: 'GET',\n    });\n  }\n}\n","import isString from 'lodash/isString';\nimport { alignmentPeriods, ValueTypes, MetricKind, selectors } from './constants';\nimport CloudMonitoringDatasource from './datasource';\nimport { MetricFindQueryTypes, VariableQueryData } from './types';\nimport { SelectableValue } from '@grafana/data';\nimport {\n  getMetricTypesByService,\n  getAlignmentOptionsByMetric,\n  getAggregationOptionsByMetric,\n  extractServicesFromMetricDescriptors,\n  getLabelKeys,\n} from './functions';\n\nexport default class CloudMonitoringMetricFindQuery {\n  constructor(private datasource: CloudMonitoringDatasource) {}\n\n  async execute(query: VariableQueryData) {\n    try {\n      if (!query.projectName) {\n        query.projectName = this.datasource.getDefaultProject();\n      }\n\n      switch (query.selectedQueryType) {\n        case MetricFindQueryTypes.Projects:\n          return this.handleProjectsQuery();\n        case MetricFindQueryTypes.Services:\n          return this.handleServiceQuery(query);\n        case MetricFindQueryTypes.MetricTypes:\n          return this.handleMetricTypesQuery(query);\n        case MetricFindQueryTypes.LabelKeys:\n          return this.handleLabelKeysQuery(query);\n        case MetricFindQueryTypes.LabelValues:\n          return this.handleLabelValuesQuery(query);\n        case MetricFindQueryTypes.ResourceTypes:\n          return this.handleResourceTypeQuery(query);\n        case MetricFindQueryTypes.Aligners:\n          return this.handleAlignersQuery(query);\n        case MetricFindQueryTypes.AlignmentPeriods:\n          return this.handleAlignmentPeriodQuery();\n        case MetricFindQueryTypes.Aggregations:\n          return this.handleAggregationQuery(query);\n        case MetricFindQueryTypes.SLOServices:\n          return this.handleSLOServicesQuery(query);\n        case MetricFindQueryTypes.SLO:\n          return this.handleSLOQuery(query);\n        case MetricFindQueryTypes.Selectors:\n          return this.handleSelectorQuery();\n        default:\n          return [];\n      }\n    } catch (error) {\n      console.error(`Could not run CloudMonitoringMetricFindQuery ${query}`, error);\n      return [];\n    }\n  }\n\n  async handleProjectsQuery() {\n    const projects = await this.datasource.getProjects();\n    return (projects as SelectableValue<string>).map((s: { label: string; value: string }) => ({\n      text: s.label,\n      value: s.value,\n      expandable: true,\n    }));\n  }\n\n  async handleServiceQuery({ projectName }: VariableQueryData) {\n    const metricDescriptors = await this.datasource.getMetricTypes(projectName);\n    const services: any[] = extractServicesFromMetricDescriptors(metricDescriptors);\n    return services.map(s => ({\n      text: s.serviceShortName,\n      value: s.service,\n      expandable: true,\n    }));\n  }\n\n  async handleMetricTypesQuery({ selectedService, projectName }: VariableQueryData) {\n    if (!selectedService) {\n      return [];\n    }\n    const metricDescriptors = await this.datasource.getMetricTypes(projectName);\n    return getMetricTypesByService(metricDescriptors, this.datasource.templateSrv.replace(selectedService)).map(\n      (s: any) => ({\n        text: s.displayName,\n        value: s.type,\n        expandable: true,\n      })\n    );\n  }\n\n  async handleLabelKeysQuery({ selectedMetricType, projectName }: VariableQueryData) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const labelKeys = await getLabelKeys(this.datasource, selectedMetricType, projectName);\n    return labelKeys.map(this.toFindQueryResult);\n  }\n\n  async handleLabelValuesQuery({ selectedMetricType, labelKey, projectName }: VariableQueryData) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const refId = 'handleLabelValuesQuery';\n    const labels = await this.datasource.getLabels(selectedMetricType, refId, projectName, [labelKey]);\n    const interpolatedKey = this.datasource.templateSrv.replace(labelKey);\n    const values = labels.hasOwnProperty(interpolatedKey) ? labels[interpolatedKey] : [];\n    return values.map(this.toFindQueryResult);\n  }\n\n  async handleResourceTypeQuery({ selectedMetricType, projectName }: VariableQueryData) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const refId = 'handleResourceTypeQueryQueryType';\n    const labels = await this.datasource.getLabels(selectedMetricType, refId, projectName);\n    return labels['resource.type'].map(this.toFindQueryResult);\n  }\n\n  async handleAlignersQuery({ selectedMetricType, projectName }: VariableQueryData) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const metricDescriptors = await this.datasource.getMetricTypes(projectName);\n    const descriptor = metricDescriptors.find(\n      (m: any) => m.type === this.datasource.templateSrv.replace(selectedMetricType)\n    );\n\n    if (!descriptor) {\n      return [];\n    }\n\n    return getAlignmentOptionsByMetric(descriptor.valueType, descriptor.metricKind).map(this.toFindQueryResult);\n  }\n\n  async handleAggregationQuery({ selectedMetricType, projectName }: VariableQueryData) {\n    if (!selectedMetricType) {\n      return [];\n    }\n\n    const metricDescriptors = await this.datasource.getMetricTypes(projectName);\n    const descriptor = metricDescriptors.find(\n      (m: any) => m.type === this.datasource.templateSrv.replace(selectedMetricType)\n    );\n\n    if (!descriptor) {\n      return [];\n    }\n\n    return getAggregationOptionsByMetric(descriptor.valueType as ValueTypes, descriptor.metricKind as MetricKind).map(\n      this.toFindQueryResult\n    );\n  }\n\n  async handleSLOServicesQuery({ projectName }: VariableQueryData) {\n    const services = await this.datasource.getSLOServices(projectName);\n    return services.map(this.toFindQueryResult);\n  }\n\n  async handleSLOQuery({ selectedSLOService, projectName }: VariableQueryData) {\n    const slos = await this.datasource.getServiceLevelObjectives(projectName, selectedSLOService);\n    return slos.map(this.toFindQueryResult);\n  }\n\n  async handleSelectorQuery() {\n    return selectors.map(this.toFindQueryResult);\n  }\n\n  handleAlignmentPeriodQuery() {\n    return alignmentPeriods.map(this.toFindQueryResult);\n  }\n\n  toFindQueryResult(x: any) {\n    return isString(x) ? { text: x, expandable: true } : { ...x, expandable: true };\n  }\n}\n","import _ from 'lodash';\n\nimport {\n  DataQueryRequest,\n  DataQueryResponseData,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  ScopedVars,\n  SelectableValue,\n  toDataFrame,\n} from '@grafana/data';\nimport { getTemplateSrv, TemplateSrv } from 'app/features/templating/template_srv';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\n\nimport {\n  CloudMonitoringQuery,\n  MetricDescriptor,\n  CloudMonitoringOptions,\n  Filter,\n  VariableQueryData,\n  QueryType,\n} from './types';\nimport { cloudMonitoringUnitMappings } from './constants';\nimport API from './api';\nimport CloudMonitoringMetricFindQuery from './CloudMonitoringMetricFindQuery';\n\nexport default class CloudMonitoringDatasource extends DataSourceApi<CloudMonitoringQuery, CloudMonitoringOptions> {\n  api: API;\n  authenticationType: string;\n\n  constructor(\n    private instanceSettings: DataSourceInstanceSettings<CloudMonitoringOptions>,\n    public templateSrv: TemplateSrv = getTemplateSrv(),\n    private readonly timeSrv: TimeSrv = getTimeSrv()\n  ) {\n    super(instanceSettings);\n    this.authenticationType = instanceSettings.jsonData.authenticationType || 'jwt';\n    this.api = new API(`${instanceSettings.url!}/cloudmonitoring/v3/projects/`);\n  }\n\n  get variables() {\n    return this.templateSrv.getVariables().map(v => `$${v.name}`);\n  }\n\n  async query(options: DataQueryRequest<CloudMonitoringQuery>): Promise<DataQueryResponseData> {\n    const result: DataQueryResponseData[] = [];\n    const data = await this.getTimeSeries(options);\n    if (data.results) {\n      Object.values(data.results).forEach((queryRes: any) => {\n        if (!queryRes.series) {\n          return;\n        }\n        const unit = this.resolvePanelUnitFromTargets(options.targets);\n        queryRes.series.forEach((series: any) => {\n          let timeSerie: any = {\n            target: series.name,\n            datapoints: series.points,\n            refId: queryRes.refId,\n            meta: queryRes.meta,\n          };\n          if (unit) {\n            timeSerie = { ...timeSerie, unit };\n          }\n          const df = toDataFrame(timeSerie);\n\n          for (const field of df.fields) {\n            if (queryRes.meta?.deepLink && queryRes.meta?.deepLink.length > 0) {\n              field.config.links = [\n                {\n                  url: queryRes.meta?.deepLink,\n                  title: 'View in Metrics Explorer',\n                  targetBlank: true,\n                },\n              ];\n            }\n          }\n          result.push(df);\n        });\n      });\n      return { data: result };\n    } else {\n      return { data: [] };\n    }\n  }\n\n  async annotationQuery(options: any) {\n    await this.ensureGCEDefaultProject();\n    const annotation = options.annotation;\n    const queries = [\n      {\n        refId: 'annotationQuery',\n        type: 'annotationQuery',\n        datasourceId: this.id,\n        view: 'FULL',\n        crossSeriesReducer: 'REDUCE_NONE',\n        perSeriesAligner: 'ALIGN_NONE',\n        metricType: this.templateSrv.replace(annotation.target.metricType, options.scopedVars || {}),\n        title: this.templateSrv.replace(annotation.target.title, options.scopedVars || {}),\n        text: this.templateSrv.replace(annotation.target.text, options.scopedVars || {}),\n        tags: this.templateSrv.replace(annotation.target.tags, options.scopedVars || {}),\n        projectName: this.templateSrv.replace(\n          annotation.target.projectName ? annotation.target.projectName : this.getDefaultProject(),\n          options.scopedVars || {}\n        ),\n        filters: this.interpolateFilters(annotation.target.filters || [], options.scopedVars),\n      },\n    ];\n\n    const { data } = await this.api.post({\n      from: options.range.from.valueOf().toString(),\n      to: options.range.to.valueOf().toString(),\n      queries,\n    });\n\n    const results = data.results['annotationQuery'].tables[0].rows.map((v: any) => {\n      return {\n        annotation: annotation,\n        time: Date.parse(v[0]),\n        title: v[1],\n        tags: [],\n        text: v[3],\n      } as any;\n    });\n\n    return results;\n  }\n\n  async metricFindQuery(query: VariableQueryData) {\n    await this.ensureGCEDefaultProject();\n    const cloudMonitoringMetricFindQuery = new CloudMonitoringMetricFindQuery(this);\n    return cloudMonitoringMetricFindQuery.execute(query);\n  }\n\n  async getTimeSeries(options: DataQueryRequest<CloudMonitoringQuery>) {\n    await this.ensureGCEDefaultProject();\n    const queries = options.targets\n      .map(this.migrateQuery)\n      .filter(this.shouldRunQuery)\n      .map(q => this.prepareTimeSeriesQuery(q, options.scopedVars))\n      .map(q => ({ ...q, intervalMs: options.intervalMs, type: 'timeSeriesQuery' }));\n\n    if (queries.length > 0) {\n      const { data } = await this.api.post({\n        from: options.range.from.valueOf().toString(),\n        to: options.range.to.valueOf().toString(),\n        queries,\n      });\n      return data;\n    } else {\n      return { results: [] };\n    }\n  }\n\n  async getLabels(metricType: string, refId: string, projectName: string, groupBys?: string[]) {\n    const response = await this.getTimeSeries({\n      targets: [\n        {\n          refId,\n          datasourceId: this.id,\n          queryType: QueryType.METRICS,\n          metricQuery: {\n            projectName: this.templateSrv.replace(projectName),\n            metricType: this.templateSrv.replace(metricType),\n            groupBys: this.interpolateGroupBys(groupBys || [], {}),\n            crossSeriesReducer: 'REDUCE_NONE',\n            view: 'HEADERS',\n          },\n        },\n      ],\n      range: this.timeSrv.timeRange(),\n    } as DataQueryRequest<CloudMonitoringQuery>);\n    const result = response.results[refId];\n    return result && result.meta ? result.meta.labels : {};\n  }\n\n  async testDatasource() {\n    let status, message;\n    const defaultErrorMessage = 'Cannot connect to Google Cloud Monitoring API';\n    try {\n      await this.ensureGCEDefaultProject();\n      const response = await this.api.test(this.getDefaultProject());\n      if (response.status === 200) {\n        status = 'success';\n        message = 'Successfully queried the Google Cloud Monitoring API.';\n      } else {\n        status = 'error';\n        message = response.statusText ? response.statusText : defaultErrorMessage;\n      }\n    } catch (error) {\n      status = 'error';\n      if (_.isString(error)) {\n        message = error;\n      } else {\n        message = 'Google Cloud Monitoring: ';\n        message += error.statusText ? error.statusText : defaultErrorMessage;\n        if (error.data && error.data.error && error.data.error.code) {\n          message += ': ' + error.data.error.code + '. ' + error.data.error.message;\n        }\n      }\n    } finally {\n      return {\n        status,\n        message,\n      };\n    }\n  }\n\n  async getGCEDefaultProject() {\n    return this.api\n      .post({\n        queries: [\n          {\n            refId: 'getGCEDefaultProject',\n            type: 'getGCEDefaultProject',\n            datasourceId: this.id,\n          },\n        ],\n      })\n      .then(({ data }) => {\n        return data && data.results && data.results.getGCEDefaultProject && data.results.getGCEDefaultProject.meta\n          ? data.results.getGCEDefaultProject.meta.defaultProject\n          : '';\n      })\n      .catch(err => {\n        throw err.data.error;\n      });\n  }\n\n  getDefaultProject(): string {\n    const { defaultProject, authenticationType, gceDefaultProject } = this.instanceSettings.jsonData;\n    if (authenticationType === 'gce') {\n      return gceDefaultProject || '';\n    }\n\n    return defaultProject || '';\n  }\n\n  async ensureGCEDefaultProject() {\n    const { authenticationType, gceDefaultProject } = this.instanceSettings.jsonData;\n    if (authenticationType === 'gce' && !gceDefaultProject) {\n      this.instanceSettings.jsonData.gceDefaultProject = await this.getGCEDefaultProject();\n    }\n  }\n\n  async getMetricTypes(projectName: string): Promise<MetricDescriptor[]> {\n    if (!projectName) {\n      return [];\n    }\n\n    return this.api.get(`${this.templateSrv.replace(projectName)}/metricDescriptors`, {\n      responseMap: (m: any) => {\n        const [service] = m.type.split('/');\n        const [serviceShortName] = service.split('.');\n        m.service = service;\n        m.serviceShortName = serviceShortName;\n        m.displayName = m.displayName || m.type;\n\n        return m;\n      },\n    }) as Promise<MetricDescriptor[]>;\n  }\n\n  async getSLOServices(projectName: string): Promise<Array<SelectableValue<string>>> {\n    return this.api.get(`${this.templateSrv.replace(projectName)}/services`, {\n      responseMap: ({ name }: { name: string }) => ({\n        value: name.match(/([^\\/]*)\\/*$/)![1],\n        label: name.match(/([^\\/]*)\\/*$/)![1],\n      }),\n    });\n  }\n\n  async getServiceLevelObjectives(projectName: string, serviceId: string): Promise<Array<SelectableValue<string>>> {\n    if (!serviceId) {\n      return Promise.resolve([]);\n    }\n    let { projectName: p, serviceId: s } = this.interpolateProps({ projectName, serviceId });\n    return this.api.get(`${p}/services/${s}/serviceLevelObjectives`, {\n      responseMap: ({ name, displayName, goal }: { name: string; displayName: string; goal: number }) => ({\n        value: name.match(/([^\\/]*)\\/*$/)![1],\n        label: displayName,\n        goal,\n      }),\n    });\n  }\n\n  async getProjects() {\n    return this.api.get(`projects`, {\n      responseMap: ({ projectId, name }: { projectId: string; name: string }) => ({\n        value: projectId,\n        label: name,\n      }),\n      baseUrl: `${this.instanceSettings.url!}/cloudresourcemanager/v1/`,\n    });\n  }\n\n  migrateQuery(query: CloudMonitoringQuery): CloudMonitoringQuery {\n    if (!query.hasOwnProperty('metricQuery')) {\n      const { hide, refId, datasource, key, queryType, maxLines, metric, ...rest } = query as any;\n      return {\n        refId,\n        hide,\n        queryType: QueryType.METRICS,\n        metricQuery: {\n          ...rest,\n          view: rest.view || 'FULL',\n        },\n      };\n    }\n    return query;\n  }\n\n  interpolateProps<T extends Record<string, any>>(object: T, scopedVars: ScopedVars = {}): T {\n    return Object.entries(object).reduce((acc, [key, value]) => {\n      return {\n        ...acc,\n        [key]: value && _.isString(value) ? this.templateSrv.replace(value, scopedVars) : value,\n      };\n    }, {} as T);\n  }\n\n  shouldRunQuery(query: CloudMonitoringQuery): boolean {\n    if (query.hide) {\n      return false;\n    }\n\n    if (query.queryType && query.queryType === QueryType.SLO && query.sloQuery) {\n      const { selectorName, serviceId, sloId, projectName } = query.sloQuery;\n      return !!selectorName && !!serviceId && !!sloId && !!projectName;\n    }\n\n    const { metricType } = query.metricQuery;\n\n    return !!metricType;\n  }\n\n  prepareTimeSeriesQuery(\n    { metricQuery, refId, queryType, sloQuery }: CloudMonitoringQuery,\n    scopedVars: ScopedVars\n  ): CloudMonitoringQuery {\n    return {\n      datasourceId: this.id,\n      refId,\n      queryType,\n      metricQuery: {\n        ...this.interpolateProps(metricQuery, scopedVars),\n        projectName: this.templateSrv.replace(\n          metricQuery.projectName ? metricQuery.projectName : this.getDefaultProject(),\n          scopedVars\n        ),\n        filters: this.interpolateFilters(metricQuery.filters || [], scopedVars),\n        groupBys: this.interpolateGroupBys(metricQuery.groupBys || [], scopedVars),\n        view: metricQuery.view || 'FULL',\n      },\n      sloQuery: sloQuery && this.interpolateProps(sloQuery, scopedVars),\n    };\n  }\n\n  interpolateVariablesInQueries(queries: CloudMonitoringQuery[], scopedVars: ScopedVars): CloudMonitoringQuery[] {\n    return queries.map(query => this.prepareTimeSeriesQuery(query, scopedVars));\n  }\n\n  interpolateFilters(filters: string[], scopedVars: ScopedVars) {\n    const completeFilter = _.chunk(filters, 4)\n      .map(([key, operator, value, condition]) => ({\n        key,\n        operator,\n        value,\n        ...(condition && { condition }),\n      }))\n      .reduce((res, filter) => (filter.value ? [...res, filter] : res), []);\n\n    const filterArray = _.flatten(\n      completeFilter.map(({ key, operator, value, condition }: Filter) => [\n        this.templateSrv.replace(key, scopedVars || {}),\n        operator,\n        this.templateSrv.replace(value, scopedVars || {}, 'regex'),\n        ...(condition ? [condition] : []),\n      ])\n    );\n\n    return filterArray || [];\n  }\n\n  interpolateGroupBys(groupBys: string[], scopedVars: {}): string[] {\n    let interpolatedGroupBys: string[] = [];\n    (groupBys || []).forEach(gb => {\n      const interpolated = this.templateSrv.replace(gb, scopedVars || {}, 'csv').split(',');\n      if (Array.isArray(interpolated)) {\n        interpolatedGroupBys = interpolatedGroupBys.concat(interpolated);\n      } else {\n        interpolatedGroupBys.push(interpolated);\n      }\n    });\n    return interpolatedGroupBys;\n  }\n\n  resolvePanelUnitFromTargets(targets: any) {\n    let unit;\n    if (targets.length > 0 && targets.every((t: any) => t.unit === targets[0].unit)) {\n      if (cloudMonitoringUnitMappings.hasOwnProperty(targets[0].unit!)) {\n        // @ts-ignore\n        unit = cloudMonitoringUnitMappings[targets[0].unit];\n      }\n    }\n    return unit;\n  }\n}\n","import DatasourceSrv from 'app/features/plugins/datasource_srv';\nimport { AuthType, authTypes } from './types';\n\nexport interface JWT {\n  private_key: string;\n  token_uri: string;\n  client_email: string;\n  project_id: string;\n}\n\nexport class CloudMonitoringConfigCtrl {\n  static templateUrl = 'public/app/plugins/datasource/cloud-monitoring/partials/config.html';\n  datasourceSrv: DatasourceSrv;\n  current: any;\n  meta: any;\n  jsonText: string;\n  validationErrors: string[] = [];\n  inputDataValid: boolean;\n  authenticationTypes: Array<{ key: AuthType; value: string }>;\n  defaultAuthenticationType: string;\n  name: string;\n\n  /** @ngInject */\n  constructor(datasourceSrv: DatasourceSrv) {\n    this.defaultAuthenticationType = AuthType.JWT;\n    this.datasourceSrv = datasourceSrv;\n    this.name = this.meta.name;\n    this.current.jsonData = this.current.jsonData || {};\n    this.current.jsonData.authenticationType = this.current.jsonData.authenticationType\n      ? this.current.jsonData.authenticationType\n      : this.defaultAuthenticationType;\n    this.current.secureJsonData = this.current.secureJsonData || {};\n    this.current.secureJsonFields = this.current.secureJsonFields || {};\n    this.authenticationTypes = authTypes;\n  }\n\n  save(jwt: JWT) {\n    this.current.secureJsonData.privateKey = jwt.private_key;\n    this.current.jsonData.tokenUri = jwt.token_uri;\n    this.current.jsonData.clientEmail = jwt.client_email;\n    this.current.jsonData.defaultProject = jwt.project_id;\n  }\n\n  validateJwt(jwt: JWT) {\n    this.resetValidationMessages();\n    if (!jwt.private_key || jwt.private_key.length === 0) {\n      this.validationErrors.push('Private key field missing in JWT file.');\n    }\n\n    if (!jwt.token_uri || jwt.token_uri.length === 0) {\n      this.validationErrors.push('Token URI field missing in JWT file.');\n    }\n\n    if (!jwt.client_email || jwt.client_email.length === 0) {\n      this.validationErrors.push('Client Email field missing in JWT file.');\n    }\n\n    if (!jwt.project_id || jwt.project_id.length === 0) {\n      this.validationErrors.push('Project Id field missing in JWT file.');\n    }\n\n    if (this.validationErrors.length === 0) {\n      this.inputDataValid = true;\n      return true;\n    }\n\n    return false;\n  }\n\n  onUpload(json: JWT) {\n    this.jsonText = '';\n    if (this.validateJwt(json)) {\n      this.save(json);\n    }\n  }\n\n  onPasteJwt(e: any) {\n    try {\n      const json = JSON.parse(e.originalEvent.clipboardData.getData('text/plain') || this.jsonText);\n      if (this.validateJwt(json)) {\n        this.save(json);\n      }\n    } catch (error) {\n      this.resetValidationMessages();\n      this.validationErrors.push(`Invalid json: ${error.message}`);\n    }\n  }\n\n  resetValidationMessages() {\n    this.validationErrors = [];\n    this.inputDataValid = false;\n    this.jsonText = '';\n\n    this.current.jsonData = Object.assign({}, { authenticationType: this.current.jsonData.authenticationType });\n    this.current.secureJsonData = {};\n    this.current.secureJsonFields = {};\n  }\n}\n","import { AnnotationTarget } from './types';\n\nexport class CloudMonitoringAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n  annotation: any;\n\n  constructor() {\n    this.annotation.target = this.annotation.target || {};\n    this.onQueryChange = this.onQueryChange.bind(this);\n  }\n\n  onQueryChange(target: AnnotationTarget) {\n    Object.assign(this.annotation.target, target);\n  }\n}\n","import React, { PureComponent } from 'react';\nimport { VariableQueryProps } from 'app/types/plugins';\nimport { SimpleSelect } from './';\nimport { extractServicesFromMetricDescriptors, getLabelKeys, getMetricTypes } from '../functions';\nimport { MetricFindQueryTypes, VariableQueryData } from '../types';\n\nexport class CloudMonitoringVariableQueryEditor extends PureComponent<VariableQueryProps, VariableQueryData> {\n  queryTypes: Array<{ value: string; name: string }> = [\n    { value: MetricFindQueryTypes.Projects, name: 'Projects' },\n    { value: MetricFindQueryTypes.Services, name: 'Services' },\n    { value: MetricFindQueryTypes.MetricTypes, name: 'Metric Types' },\n    { value: MetricFindQueryTypes.LabelKeys, name: 'Label Keys' },\n    { value: MetricFindQueryTypes.LabelValues, name: 'Label Values' },\n    { value: MetricFindQueryTypes.ResourceTypes, name: 'Resource Types' },\n    { value: MetricFindQueryTypes.Aggregations, name: 'Aggregations' },\n    { value: MetricFindQueryTypes.Aligners, name: 'Aligners' },\n    { value: MetricFindQueryTypes.AlignmentPeriods, name: 'Alignment Periods' },\n    { value: MetricFindQueryTypes.Selectors, name: 'Selectors' },\n    { value: MetricFindQueryTypes.SLOServices, name: 'SLO Services' },\n    { value: MetricFindQueryTypes.SLO, name: 'Service Level Objectives (SLO)' },\n  ];\n\n  defaults: VariableQueryData = {\n    selectedQueryType: this.queryTypes[0].value,\n    metricDescriptors: [],\n    selectedService: '',\n    selectedMetricType: '',\n    labels: [],\n    labelKey: '',\n    metricTypes: [],\n    services: [],\n    sloServices: [],\n    selectedSLOService: '',\n    projects: [],\n    projectName: '',\n    loading: true,\n  };\n\n  constructor(props: VariableQueryProps) {\n    super(props);\n    this.state = Object.assign(\n      this.defaults,\n      { projectName: this.props.datasource.getDefaultProject() },\n      this.props.query\n    );\n  }\n\n  async componentDidMount() {\n    const projects = await this.props.datasource.getProjects();\n    const metricDescriptors = await this.props.datasource.getMetricTypes(\n      this.props.query.projectName || this.props.datasource.getDefaultProject()\n    );\n    const services = extractServicesFromMetricDescriptors(metricDescriptors).map((m: any) => ({\n      value: m.service,\n      name: m.serviceShortName,\n    }));\n\n    let selectedService = '';\n    if (services.some(s => s.value === this.props.templateSrv.replace(this.state.selectedService))) {\n      selectedService = this.state.selectedService;\n    } else if (services && services.length > 0) {\n      selectedService = services[0].value;\n    }\n\n    const { metricTypes, selectedMetricType } = getMetricTypes(\n      metricDescriptors,\n      this.state.selectedMetricType,\n      this.props.templateSrv.replace(this.state.selectedMetricType),\n      this.props.templateSrv.replace(selectedService)\n    );\n\n    const sloServices = await this.props.datasource.getSLOServices(this.state.projectName);\n\n    const state: any = {\n      services,\n      selectedService,\n      metricTypes,\n      selectedMetricType,\n      metricDescriptors,\n      projects: projects.map(({ value, label }: any) => ({ value, name: label })),\n      ...(await this.getLabels(selectedMetricType, this.state.projectName)),\n      sloServices: sloServices.map(({ value, label }: any) => ({ value, name: label })),\n      loading: false,\n    };\n    this.setState(state, () => this.onPropsChange());\n  }\n\n  onPropsChange = () => {\n    const { metricDescriptors, labels, metricTypes, services, ...queryModel } = this.state;\n    const query = this.queryTypes.find(q => q.value === this.state.selectedQueryType)!;\n    this.props.onChange(queryModel, `Google Cloud Monitoring - ${query.name}`);\n  };\n\n  async onQueryTypeChange(queryType: string) {\n    const state: any = {\n      selectedQueryType: queryType,\n      ...(await this.getLabels(this.state.selectedMetricType, this.state.projectName, queryType)),\n    };\n\n    this.setState(state);\n  }\n\n  async onProjectChange(projectName: string) {\n    const metricDescriptors = await this.props.datasource.getMetricTypes(projectName);\n    const labels = await this.getLabels(this.state.selectedMetricType, projectName);\n    const { metricTypes, selectedMetricType } = getMetricTypes(\n      metricDescriptors,\n      this.state.selectedMetricType,\n      this.props.templateSrv.replace(this.state.selectedMetricType),\n      this.props.templateSrv.replace(this.state.selectedService)\n    );\n\n    const sloServices = await this.props.datasource.getSLOServices(projectName);\n\n    this.setState({\n      ...labels,\n      metricTypes,\n      selectedMetricType,\n      metricDescriptors,\n      projectName,\n      sloServices: sloServices.map(({ value, label }: any) => ({ value, name: label })),\n    });\n  }\n\n  async onServiceChange(service: string) {\n    const { metricTypes, selectedMetricType } = getMetricTypes(\n      this.state.metricDescriptors,\n      this.state.selectedMetricType,\n      this.props.templateSrv.replace(this.state.selectedMetricType),\n      this.props.templateSrv.replace(service)\n    );\n    const state: any = {\n      selectedService: service,\n      metricTypes,\n      selectedMetricType,\n      ...(await this.getLabels(selectedMetricType, this.state.projectName)),\n    };\n    this.setState(state);\n  }\n\n  async onMetricTypeChange(metricType: string) {\n    const state: any = {\n      selectedMetricType: metricType,\n      ...(await this.getLabels(metricType, this.state.projectName)),\n    };\n    this.setState(state);\n  }\n\n  onLabelKeyChange(labelKey: string) {\n    this.setState({ labelKey }, () => this.onPropsChange());\n  }\n\n  componentDidUpdate(prevProps: Readonly<VariableQueryProps>, prevState: Readonly<VariableQueryData>) {\n    const selecQueryTypeChanged = prevState.selectedQueryType !== this.state.selectedQueryType;\n    const selectSLOServiceChanged = this.state.selectedSLOService !== prevState.selectedSLOService;\n    if (selecQueryTypeChanged || selectSLOServiceChanged) {\n      this.onPropsChange();\n    }\n  }\n\n  async getLabels(selectedMetricType: string, projectName: string, selectedQueryType = this.state.selectedQueryType) {\n    let result = { labels: this.state.labels, labelKey: this.state.labelKey };\n    if (selectedMetricType && selectedQueryType === MetricFindQueryTypes.LabelValues) {\n      const labels = await getLabelKeys(this.props.datasource, selectedMetricType, projectName);\n      const labelKey = labels.some(l => l === this.props.templateSrv.replace(this.state.labelKey))\n        ? this.state.labelKey\n        : labels[0];\n      result = { labels, labelKey };\n    }\n    return result;\n  }\n\n  insertTemplateVariables(options: any) {\n    const templateVariables = this.props.templateSrv.getVariables().map((v: any) => ({\n      name: `$${v.name}`,\n      value: `$${v.name}`,\n    }));\n    return [...templateVariables, ...options];\n  }\n\n  renderQueryTypeSwitch(queryType: string) {\n    switch (queryType) {\n      case MetricFindQueryTypes.MetricTypes:\n        return (\n          <>\n            <SimpleSelect\n              value={this.state.projectName}\n              options={this.insertTemplateVariables(this.state.projects)}\n              onValueChange={e => this.onProjectChange(e.target.value)}\n              label=\"Project\"\n            />\n            <SimpleSelect\n              value={this.state.selectedService}\n              options={this.insertTemplateVariables(this.state.services)}\n              onValueChange={e => this.onServiceChange(e.target.value)}\n              label=\"Service\"\n            />\n          </>\n        );\n      case MetricFindQueryTypes.LabelKeys:\n      case MetricFindQueryTypes.LabelValues:\n      case MetricFindQueryTypes.ResourceTypes:\n        return (\n          <>\n            <SimpleSelect\n              value={this.state.projectName}\n              options={this.insertTemplateVariables(this.state.projects)}\n              onValueChange={e => this.onProjectChange(e.target.value)}\n              label=\"Project\"\n            />\n            <SimpleSelect\n              value={this.state.selectedService}\n              options={this.insertTemplateVariables(this.state.services)}\n              onValueChange={e => this.onServiceChange(e.target.value)}\n              label=\"Service\"\n            />\n            <SimpleSelect\n              value={this.state.selectedMetricType}\n              options={this.insertTemplateVariables(this.state.metricTypes)}\n              onValueChange={e => this.onMetricTypeChange(e.target.value)}\n              label=\"Metric Type\"\n            />\n            {queryType === MetricFindQueryTypes.LabelValues && (\n              <SimpleSelect\n                value={this.state.labelKey}\n                options={this.insertTemplateVariables(this.state.labels.map(l => ({ value: l, name: l })))}\n                onValueChange={e => this.onLabelKeyChange(e.target.value)}\n                label=\"Label Key\"\n              />\n            )}\n          </>\n        );\n      case MetricFindQueryTypes.Aligners:\n      case MetricFindQueryTypes.Aggregations:\n        return (\n          <>\n            <SimpleSelect\n              value={this.state.selectedService}\n              options={this.insertTemplateVariables(this.state.services)}\n              onValueChange={e => this.onServiceChange(e.target.value)}\n              label=\"Service\"\n            />\n            <SimpleSelect\n              value={this.state.selectedMetricType}\n              options={this.insertTemplateVariables(this.state.metricTypes)}\n              onValueChange={e => this.onMetricTypeChange(e.target.value)}\n              label=\"Metric Type\"\n            />\n          </>\n        );\n      case MetricFindQueryTypes.SLOServices:\n        return (\n          <>\n            <SimpleSelect\n              value={this.state.projectName}\n              options={this.insertTemplateVariables(this.state.projects)}\n              onValueChange={e => this.onProjectChange(e.target.value)}\n              label=\"Project\"\n            />\n          </>\n        );\n\n      case MetricFindQueryTypes.SLO:\n        return (\n          <>\n            <SimpleSelect\n              value={this.state.projectName}\n              options={this.insertTemplateVariables(this.state.projects)}\n              onValueChange={e => this.onProjectChange(e.target.value)}\n              label=\"Project\"\n            />\n            <SimpleSelect\n              value={this.state.selectedSLOService}\n              options={this.insertTemplateVariables(this.state.sloServices)}\n              onValueChange={e => {\n                this.setState({\n                  ...this.state,\n                  selectedSLOService: e.target.value,\n                });\n              }}\n              label=\"SLO Service\"\n            />\n          </>\n        );\n      default:\n        return '';\n    }\n  }\n\n  render() {\n    if (this.state.loading) {\n      return (\n        <div className=\"gf-form max-width-21\">\n          <span className=\"gf-form-label width-10 query-keyword\">Query Type</span>\n          <div className=\"gf-form-select-wrapper max-width-12\">\n            <select className=\"gf-form-input\">\n              <option>Loading...</option>\n            </select>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <>\n        <SimpleSelect\n          value={this.state.selectedQueryType}\n          options={this.queryTypes}\n          onValueChange={e => this.onQueryTypeChange(e.target.value)}\n          label=\"Query Type\"\n        />\n        {this.renderQueryTypeSwitch(this.state.selectedQueryType)}\n      </>\n    );\n  }\n}\n","import { DataSourcePlugin } from '@grafana/data';\nimport CloudMonitoringDatasource from './datasource';\nimport { QueryEditor } from './components/QueryEditor';\nimport { CloudMonitoringConfigCtrl } from './config_ctrl';\nimport { CloudMonitoringAnnotationsQueryCtrl } from './annotations_query_ctrl';\nimport { CloudMonitoringVariableQueryEditor } from './components/VariableQueryEditor';\nimport { CloudMonitoringQuery } from './types';\n\nexport const plugin = new DataSourcePlugin<CloudMonitoringDatasource, CloudMonitoringQuery>(CloudMonitoringDatasource)\n  .setQueryEditor(QueryEditor)\n  .setConfigCtrl(CloudMonitoringConfigCtrl)\n  .setAnnotationQueryCtrl(CloudMonitoringAnnotationsQueryCtrl)\n  .setVariableQueryEditor(CloudMonitoringVariableQueryEditor);\n"],"sourceRoot":""}