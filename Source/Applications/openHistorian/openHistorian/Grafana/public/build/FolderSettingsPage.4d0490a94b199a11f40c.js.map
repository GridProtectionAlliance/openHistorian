{"version":3,"sources":["webpack:///./public/app/features/folders/state/actions.ts","webpack:///./public/app/features/folders/FolderSettingsPage.tsx","webpack:///./public/app/features/folders/state/navModel.ts"],"names":["getFolderByUid","uid","_this","this","dispatch","Object","tslib__WEBPACK_IMPORTED_MODULE_0__","app_core_services_backend_srv__WEBPACK_IMPORTED_MODULE_2__","folder","_a","sent","_reducers__WEBPACK_IMPORTED_MODULE_6__","app_core_actions__WEBPACK_IMPORTED_MODULE_3__","_navModel__WEBPACK_IMPORTED_MODULE_4__","saveFolder","put","title","version","res","app_core_app_events__WEBPACK_IMPORTED_MODULE_5__","emit","_grafana_data__WEBPACK_IMPORTED_MODULE_1__","alertSuccess","path","url","deleteFolder","getFolderPermissions","get","permissions","toUpdateItem","item","userId","teamId","role","permission","updateFolderPermission","itemToUpdate","level","getStore","itemsToUpdate","_b","next","done","value","inherited","updated","push","post","items","_d","removeFolderPermission","itemToDelete","addFolderPermission","newItem","FolderSettingsPage","_super","props","call","onTitleChange","evt","setFolderTitle","target","onSave","preventDefault","stopPropagation","setState","isLoading","onDelete","app_core_app_events__WEBPACK_IMPORTED_MODULE_6__","app_types__WEBPACK_IMPORTED_MODULE_8__","showConfirmModal","text","icon","yesText","onConfirm","state","prototype","componentDidMount","folderUid","render","navModel","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","app_core_components_Page_Page__WEBPACK_IMPORTED_MODULE_5__","Contents","className","name","onSubmit","_grafana_ui__WEBPACK_IMPORTED_MODULE_4__","type","onChange","disabled","canSave","hasChanged","onClick","react__WEBPACK_IMPORTED_MODULE_1__","mapDispatchToProps","_state_actions__WEBPACK_IMPORTED_MODULE_9__","_state_reducers__WEBPACK_IMPORTED_MODULE_11__","__webpack_exports__","react_hot_loader__WEBPACK_IMPORTED_MODULE_2__","module","react_redux__WEBPACK_IMPORTED_MODULE_3__","location","routeParams","app_core_selectors_navModel__WEBPACK_IMPORTED_MODULE_7__","navIndex","_state_navModel__WEBPACK_IMPORTED_MODULE_10__","buildNavModel","id","subTitle","breadcrumbs","children","active","getLoadingNav","tabIndex","main","node","__webpack_require__","d"],"mappings":"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","file":"FolderSettingsPage.4d0490a94b199a11f40c.js","sourcesContent":["import { AppEvents } from '@grafana/data';\n\nimport { getBackendSrv } from 'app/core/services/backend_srv';\nimport { FolderState, ThunkResult } from 'app/types';\nimport { DashboardAcl, DashboardAclUpdateDTO, NewDashboardAclItem, PermissionLevel } from 'app/types/acl';\n\nimport { updateLocation, updateNavIndex } from 'app/core/actions';\nimport { buildNavModel } from './navModel';\nimport appEvents from 'app/core/app_events';\nimport { loadFolder, loadFolderPermissions } from './reducers';\n\nexport function getFolderByUid(uid: string): ThunkResult<void> {\n  return async dispatch => {\n    const folder = await getBackendSrv().getFolderByUid(uid);\n    dispatch(loadFolder(folder));\n    dispatch(updateNavIndex(buildNavModel(folder)));\n  };\n}\n\nexport function saveFolder(folder: FolderState): ThunkResult<void> {\n  return async dispatch => {\n    const res = await getBackendSrv().put(`/api/folders/${folder.uid}`, {\n      title: folder.title,\n      version: folder.version,\n    });\n\n    // this should be redux action at some point\n    appEvents.emit(AppEvents.alertSuccess, ['Folder saved']);\n\n    dispatch(updateLocation({ path: `${res.url}/settings` }));\n  };\n}\n\nexport function deleteFolder(uid: string): ThunkResult<void> {\n  return async dispatch => {\n    await getBackendSrv().deleteFolder(uid, true);\n    dispatch(updateLocation({ path: `dashboards` }));\n  };\n}\n\nexport function getFolderPermissions(uid: string): ThunkResult<void> {\n  return async dispatch => {\n    const permissions = await getBackendSrv().get(`/api/folders/${uid}/permissions`);\n    dispatch(loadFolderPermissions(permissions));\n  };\n}\n\nfunction toUpdateItem(item: DashboardAcl): DashboardAclUpdateDTO {\n  return {\n    userId: item.userId,\n    teamId: item.teamId,\n    role: item.role,\n    permission: item.permission,\n  };\n}\n\nexport function updateFolderPermission(itemToUpdate: DashboardAcl, level: PermissionLevel): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const folder = getStore().folder;\n    const itemsToUpdate = [];\n\n    for (const item of folder.permissions) {\n      if (item.inherited) {\n        continue;\n      }\n\n      const updated = toUpdateItem(item);\n\n      // if this is the item we want to update, update it's permission\n      if (itemToUpdate === item) {\n        updated.permission = level;\n      }\n\n      itemsToUpdate.push(updated);\n    }\n\n    await getBackendSrv().post(`/api/folders/${folder.uid}/permissions`, { items: itemsToUpdate });\n    await dispatch(getFolderPermissions(folder.uid));\n  };\n}\n\nexport function removeFolderPermission(itemToDelete: DashboardAcl): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const folder = getStore().folder;\n    const itemsToUpdate = [];\n\n    for (const item of folder.permissions) {\n      if (item.inherited || item === itemToDelete) {\n        continue;\n      }\n      itemsToUpdate.push(toUpdateItem(item));\n    }\n\n    await getBackendSrv().post(`/api/folders/${folder.uid}/permissions`, { items: itemsToUpdate });\n    await dispatch(getFolderPermissions(folder.uid));\n  };\n}\n\nexport function addFolderPermission(newItem: NewDashboardAclItem): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const folder = getStore().folder;\n    const itemsToUpdate = [];\n\n    for (const item of folder.permissions) {\n      if (item.inherited) {\n        continue;\n      }\n      itemsToUpdate.push(toUpdateItem(item));\n    }\n\n    itemsToUpdate.push({\n      userId: newItem.userId,\n      teamId: newItem.teamId,\n      role: newItem.role,\n      permission: newItem.permission,\n    });\n\n    await getBackendSrv().post(`/api/folders/${folder.uid}/permissions`, { items: itemsToUpdate });\n    await dispatch(getFolderPermissions(folder.uid));\n  };\n}\n","import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport { NavModel } from '@grafana/data';\nimport { Input } from '@grafana/ui';\nimport Page from 'app/core/components/Page/Page';\nimport appEvents from 'app/core/app_events';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { CoreEvents, FolderState, StoreState } from 'app/types';\nimport { deleteFolder, getFolderByUid, saveFolder } from './state/actions';\nimport { getLoadingNav } from './state/navModel';\nimport { setFolderTitle } from './state/reducers';\n\nexport interface Props {\n  navModel: NavModel;\n  folderUid: string;\n  folder: FolderState;\n  getFolderByUid: typeof getFolderByUid;\n  setFolderTitle: typeof setFolderTitle;\n  saveFolder: typeof saveFolder;\n  deleteFolder: typeof deleteFolder;\n}\n\nexport interface State {\n  isLoading: boolean;\n}\n\nexport class FolderSettingsPage extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      isLoading: false,\n    };\n  }\n\n  componentDidMount() {\n    this.props.getFolderByUid(this.props.folderUid);\n  }\n\n  onTitleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    this.props.setFolderTitle(evt.target.value);\n  };\n\n  onSave = async (evt: React.FormEvent<HTMLFormElement>) => {\n    evt.preventDefault();\n    evt.stopPropagation();\n    this.setState({ isLoading: true });\n    await this.props.saveFolder(this.props.folder);\n    this.setState({ isLoading: false });\n  };\n\n  onDelete = (evt: React.MouseEvent<HTMLButtonElement>) => {\n    evt.stopPropagation();\n    evt.preventDefault();\n\n    appEvents.emit(CoreEvents.showConfirmModal, {\n      title: 'Delete',\n      text: `Do you want to delete this folder and all its dashboards?`,\n      icon: 'fa-trash',\n      yesText: 'Delete',\n      onConfirm: () => {\n        this.props.deleteFolder(this.props.folder.uid);\n      },\n    });\n  };\n\n  render() {\n    const { navModel, folder } = this.props;\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={this.state.isLoading}>\n          <h3 className=\"page-sub-heading\">Folder Settings</h3>\n\n          <div className=\"section gf-form-group\">\n            <form name=\"folderSettingsForm\" onSubmit={this.onSave}>\n              <div className=\"gf-form\">\n                <label className=\"gf-form-label width-7\">Name</label>\n                <Input\n                  type=\"text\"\n                  className=\"gf-form-input width-30\"\n                  value={folder.title}\n                  onChange={this.onTitleChange}\n                />\n              </div>\n              <div className=\"gf-form-button-row\">\n                <button type=\"submit\" className=\"btn btn-primary\" disabled={!folder.canSave || !folder.hasChanged}>\n                  Save\n                </button>\n                <button className=\"btn btn-danger\" onClick={this.onDelete} disabled={!folder.canSave}>\n                  Delete\n                </button>\n              </div>\n            </form>\n          </div>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nconst mapStateToProps = (state: StoreState) => {\n  const uid = state.location.routeParams.uid;\n\n  return {\n    navModel: getNavModel(state.navIndex, `folder-settings-${uid}`, getLoadingNav(2)),\n    folderUid: uid,\n    folder: state.folder,\n  };\n};\n\nconst mapDispatchToProps = {\n  getFolderByUid,\n  saveFolder,\n  setFolderTitle,\n  deleteFolder,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(FolderSettingsPage));\n","import { FolderDTO } from 'app/types';\nimport { NavModelItem, NavModel } from '@grafana/data';\n\nexport function buildNavModel(folder: FolderDTO): NavModelItem {\n  return {\n    icon: 'fa fa-folder-open',\n    id: 'manage-folder',\n    subTitle: 'Manage folder dashboards & permissions',\n    url: '',\n    text: folder.title,\n    breadcrumbs: [{ title: 'Dashboards', url: 'dashboards' }],\n    children: [\n      {\n        active: false,\n        icon: 'fa fa-fw fa-th-large',\n        id: `folder-dashboards-${folder.uid}`,\n        text: 'Dashboards',\n        url: folder.url,\n      },\n      {\n        active: false,\n        icon: 'fa fa-fw fa-lock',\n        id: `folder-permissions-${folder.uid}`,\n        text: 'Permissions',\n        url: `${folder.url}/permissions`,\n      },\n      {\n        active: false,\n        icon: 'gicon gicon-cog',\n        id: `folder-settings-${folder.uid}`,\n        text: 'Settings',\n        url: `${folder.url}/settings`,\n      },\n    ],\n  };\n}\n\nexport function getLoadingNav(tabIndex: number): NavModel {\n  const main = buildNavModel({\n    id: 1,\n    uid: 'loading',\n    title: 'Loading',\n    url: 'url',\n    canSave: false,\n    version: 0,\n  });\n\n  main.children[tabIndex].active = true;\n\n  return {\n    main: main,\n    node: main.children[tabIndex],\n  };\n}\n"],"sourceRoot":""}