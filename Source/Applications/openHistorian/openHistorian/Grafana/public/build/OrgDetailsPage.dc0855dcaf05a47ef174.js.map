{"version":3,"file":"OrgDetailsPage.dc0855dcaf05a47ef174.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/Form/Form.tsx","webpack://grafana/./public/app/core/components/SharedPreferences/SharedPreferences.tsx","webpack://grafana/./public/app/features/org/OrgProfile.tsx","webpack://grafana/./public/app/features/org/OrgDetailsPage.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport { HTMLProps, useEffect } from 'react';\nimport * as React from 'react';\nimport {\n  useForm,\n  Mode,\n  DefaultValues,\n  SubmitHandler,\n  FieldValues,\n  UseFormReturn,\n  FieldErrors,\n  FieldPath,\n} from 'react-hook-form';\n\nexport type FormAPI<T extends FieldValues> = Omit<UseFormReturn<T>, 'handleSubmit'> & {\n  errors: FieldErrors<T>;\n};\n\ninterface FormProps<T extends FieldValues> extends Omit<HTMLProps<HTMLFormElement>, 'onSubmit' | 'children'> {\n  validateOn?: Mode;\n  validateOnMount?: boolean;\n  validateFieldsOnMount?: FieldPath<T> | Array<FieldPath<T>>;\n  defaultValues?: DefaultValues<T>;\n  onSubmit: SubmitHandler<T>;\n  children: (api: FormAPI<T>) => React.ReactNode;\n  /** Sets max-width for container. Use it instead of setting individual widths on inputs.*/\n  maxWidth?: number | 'none';\n}\n\nexport function Form<T extends FieldValues>({\n  defaultValues,\n  onSubmit,\n  validateOnMount = false,\n  validateFieldsOnMount,\n  children,\n  validateOn = 'onSubmit',\n  maxWidth = 600,\n  ...htmlProps\n}: FormProps<T>) {\n  const { handleSubmit, trigger, formState, ...rest } = useForm<T>({\n    mode: validateOn,\n    defaultValues,\n  });\n\n  useEffect(() => {\n    if (validateOnMount) {\n      trigger(validateFieldsOnMount);\n    }\n  }, [trigger, validateFieldsOnMount, validateOnMount]);\n\n  return (\n    <form\n      className={css({\n        maxWidth: maxWidth !== 'none' ? maxWidth + 'px' : maxWidth,\n        width: '100%',\n      })}\n      onSubmit={handleSubmit(onSubmit)}\n      {...htmlProps}\n    >\n      {children({ errors: formState.errors, formState, trigger, ...rest })}\n    </form>\n  );\n}\n","import { css } from '@emotion/css';\nimport { PureComponent } from 'react';\nimport * as React from 'react';\n\nimport { FeatureState, getBuiltInThemes, ThemeRegistryItem } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { config, reportInteraction } from '@grafana/runtime';\nimport { Preferences as UserPreferencesDTO } from '@grafana/schema/src/raw/preferences/x/preferences_types.gen';\nimport {\n  Button,\n  Field,\n  FieldSet,\n  Label,\n  stylesFactory,\n  TimeZonePicker,\n  WeekStartPicker,\n  FeatureBadge,\n} from '@grafana/ui';\nimport { Combobox, ComboboxOption } from '@grafana/ui/src/unstable';\nimport { DashboardPicker } from 'app/core/components/Select/DashboardPicker';\nimport { t, Trans } from 'app/core/internationalization';\nimport { LANGUAGES, PSEUDO_LOCALE } from 'app/core/internationalization/constants';\nimport { PreferencesService } from 'app/core/services/PreferencesService';\nimport { changeTheme } from 'app/core/services/theme';\n\nexport interface Props {\n  resourceUri: string;\n  disabled?: boolean;\n  preferenceType: 'org' | 'team' | 'user';\n  onConfirm?: () => Promise<boolean>;\n}\n\nexport type State = UserPreferencesDTO;\n\nfunction getLanguageOptions(): ComboboxOption[] {\n  const languageOptions = LANGUAGES.map((v) => ({\n    value: v.code,\n    label: v.name,\n  })).sort((a, b) => {\n    if (a.value === PSEUDO_LOCALE) {\n      return 1;\n    }\n\n    if (b.value === PSEUDO_LOCALE) {\n      return -1;\n    }\n\n    return a.label.localeCompare(b.label);\n  });\n\n  const options = [\n    {\n      value: '',\n      label: t('common.locale.default', 'Default'),\n    },\n    ...languageOptions,\n  ];\n\n  return options;\n}\n\nexport class SharedPreferences extends PureComponent<Props, State> {\n  service: PreferencesService;\n  themeOptions: ComboboxOption[];\n\n  constructor(props: Props) {\n    super(props);\n\n    this.service = new PreferencesService(props.resourceUri);\n    this.state = {\n      theme: '',\n      timezone: '',\n      weekStart: '',\n      language: '',\n      queryHistory: { homeTab: '' },\n      navbar: { bookmarkUrls: [] },\n    };\n\n    this.themeOptions = getBuiltInThemes(config.featureToggles.extraThemes).map((theme) => ({\n      value: theme.id,\n      label: getTranslatedThemeName(theme),\n    }));\n\n    // Add default option\n    this.themeOptions.unshift({ value: '', label: t('shared-preferences.theme.default-label', 'Default') });\n  }\n\n  async componentDidMount() {\n    const prefs = await this.service.load();\n\n    this.setState({\n      homeDashboardUID: prefs.homeDashboardUID,\n      theme: prefs.theme,\n      timezone: prefs.timezone,\n      weekStart: prefs.weekStart,\n      language: prefs.language,\n      queryHistory: prefs.queryHistory,\n      navbar: prefs.navbar,\n    });\n  }\n\n  onSubmitForm = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const confirmationResult = this.props.onConfirm ? await this.props.onConfirm() : true;\n\n    if (confirmationResult) {\n      const { homeDashboardUID, theme, timezone, weekStart, language, queryHistory, navbar } = this.state;\n      await this.service.update({ homeDashboardUID, theme, timezone, weekStart, language, queryHistory, navbar });\n      window.location.reload();\n    }\n  };\n\n  onThemeChanged = (value: ComboboxOption<string> | null) => {\n    if (!value) {\n      return;\n    }\n    this.setState({ theme: value.value });\n\n    if (value.value) {\n      changeTheme(value.value, true);\n    }\n  };\n\n  onTimeZoneChanged = (timezone?: string) => {\n    if (typeof timezone !== 'string') {\n      return;\n    }\n    this.setState({ timezone: timezone });\n  };\n\n  onWeekStartChanged = (weekStart: string) => {\n    this.setState({ weekStart: weekStart });\n  };\n\n  onHomeDashboardChanged = (dashboardUID: string) => {\n    this.setState({ homeDashboardUID: dashboardUID });\n  };\n\n  onLanguageChanged = (language: string) => {\n    this.setState({ language });\n\n    reportInteraction('grafana_preferences_language_changed', {\n      toLanguage: language,\n      preferenceType: this.props.preferenceType,\n    });\n  };\n\n  render() {\n    const { theme, timezone, weekStart, homeDashboardUID, language } = this.state;\n    const { disabled } = this.props;\n    const styles = getStyles();\n    const languages = getLanguageOptions();\n    const currentThemeOption = this.themeOptions.find((x) => x.value === theme) ?? this.themeOptions[0];\n\n    return (\n      <form onSubmit={this.onSubmitForm} className={styles.form}>\n        <FieldSet label={<Trans i18nKey=\"shared-preferences.title\">Preferences</Trans>} disabled={disabled}>\n          <Field label={t('shared-preferences.fields.theme-label', 'Interface theme')}>\n            <Combobox\n              options={this.themeOptions}\n              value={currentThemeOption.value}\n              onChange={this.onThemeChanged}\n              id=\"shared-preferences-theme-select\"\n            />\n          </Field>\n\n          <Field\n            label={\n              <Label htmlFor=\"home-dashboard-select\">\n                <span className={styles.labelText}>\n                  <Trans i18nKey=\"shared-preferences.fields.home-dashboard-label\">Home Dashboard</Trans>\n                </span>\n              </Label>\n            }\n            data-testid=\"User preferences home dashboard drop down\"\n          >\n            <DashboardPicker\n              value={homeDashboardUID}\n              onChange={(v) => this.onHomeDashboardChanged(v?.uid ?? '')}\n              defaultOptions={true}\n              isClearable={true}\n              placeholder={t('shared-preferences.fields.home-dashboard-placeholder', 'Default dashboard')}\n              inputId=\"home-dashboard-select\"\n            />\n          </Field>\n\n          <Field\n            label={t('shared-dashboard.fields.timezone-label', 'Timezone')}\n            data-testid={selectors.components.TimeZonePicker.containerV2}\n          >\n            <TimeZonePicker\n              includeInternal={true}\n              value={timezone}\n              onChange={this.onTimeZoneChanged}\n              inputId=\"shared-preferences-timezone-picker\"\n            />\n          </Field>\n\n          <Field\n            label={t('shared-preferences.fields.week-start-label', 'Week start')}\n            data-testid={selectors.components.WeekStartPicker.containerV2}\n          >\n            <WeekStartPicker\n              value={weekStart || ''}\n              onChange={this.onWeekStartChanged}\n              inputId={'shared-preferences-week-start-picker'}\n            />\n          </Field>\n\n          <Field\n            label={\n              <Label htmlFor=\"locale-select\">\n                <span className={styles.labelText}>\n                  <Trans i18nKey=\"shared-preferences.fields.locale-label\">Language</Trans>\n                </span>\n                <FeatureBadge featureState={FeatureState.beta} />\n              </Label>\n            }\n            data-testid=\"User preferences language drop down\"\n          >\n            <Combobox\n              value={languages.find((lang) => lang.value === language)?.value || ''}\n              onChange={(lang: ComboboxOption | null) => this.onLanguageChanged(lang?.value ?? '')}\n              options={languages}\n              placeholder={t('shared-preferences.fields.locale-placeholder', 'Choose language')}\n              id=\"locale-select\"\n            />\n          </Field>\n        </FieldSet>\n        <Button type=\"submit\" variant=\"primary\" data-testid={selectors.components.UserProfile.preferencesSaveButton}>\n          <Trans i18nKey=\"common.save\">Save</Trans>\n        </Button>\n      </form>\n    );\n  }\n}\n\nexport default SharedPreferences;\n\nconst getStyles = stylesFactory(() => {\n  return {\n    labelText: css({\n      marginRight: '6px',\n    }),\n    form: css({\n      width: '100%',\n      maxWidth: '600px',\n    }),\n  };\n});\n\nfunction getTranslatedThemeName(theme: ThemeRegistryItem) {\n  switch (theme.id) {\n    case 'dark':\n      return t('shared.preferences.theme.dark-label', 'Dark');\n    case 'light':\n      return t('shared.preferences.theme.light-label', 'Light');\n    case 'system':\n      return t('shared.preferences.theme.system-label', 'System preference');\n    default:\n      return theme.name;\n  }\n}\n","import { Input, Field, FieldSet, Button } from '@grafana/ui';\nimport { Form } from 'app/core/components/Form/Form';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction } from 'app/types';\n\nexport interface Props {\n  orgName: string;\n  onSubmit: (orgName: string) => void;\n}\n\ninterface FormDTO {\n  orgName: string;\n}\n\nconst OrgProfile = ({ onSubmit, orgName }: Props) => {\n  const canWriteOrg = contextSrv.hasPermission(AccessControlAction.OrgsWrite);\n\n  return (\n    <Form defaultValues={{ orgName }} onSubmit={({ orgName }: FormDTO) => onSubmit(orgName)}>\n      {({ register }) => (\n        <FieldSet label=\"Organization profile\" disabled={!canWriteOrg}>\n          <Field label=\"Organization name\">\n            <Input id=\"org-name-input\" type=\"text\" {...register('orgName', { required: true })} />\n          </Field>\n\n          <Button type=\"submit\">Update organization name</Button>\n        </FieldSet>\n      )}\n    </Form>\n  );\n};\n\nexport default OrgProfile;\n","import { PureComponent } from 'react';\nimport { ConnectedProps, connect } from 'react-redux';\n\nimport { Stack } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport SharedPreferences from 'app/core/components/SharedPreferences/SharedPreferences';\nimport { appEvents, contextSrv } from 'app/core/core';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { AccessControlAction, StoreState } from 'app/types';\nimport { ShowConfirmModalEvent } from 'app/types/events';\n\nimport OrgProfile from './OrgProfile';\nimport { loadOrganization, updateOrganization } from './state/actions';\nimport { setOrganizationName } from './state/reducers';\n\ninterface OwnProps {}\n\nexport class OrgDetailsPage extends PureComponent<Props> {\n  async componentDidMount() {\n    await this.props.loadOrganization();\n  }\n\n  onUpdateOrganization = (orgName: string) => {\n    this.props.setOrganizationName(orgName);\n    this.props.updateOrganization();\n  };\n\n  handleConfirm = () => {\n    return new Promise<boolean>((resolve) => {\n      appEvents.publish(\n        new ShowConfirmModalEvent({\n          title: 'Confirm preferences update',\n          text: 'This will update the preferences for the whole organization. Are you sure you want to update the preferences?',\n          yesText: 'Save',\n          yesButtonVariant: 'primary',\n          onConfirm: async () => resolve(true),\n          onDismiss: async () => resolve(false),\n        })\n      );\n    });\n  };\n\n  render() {\n    const { navModel, organization } = this.props;\n    const isLoading = Object.keys(organization).length === 0;\n    const canReadOrg = contextSrv.hasPermission(AccessControlAction.OrgsRead);\n    const canReadPreferences = contextSrv.hasPermission(AccessControlAction.OrgsPreferencesRead);\n    const canWritePreferences = contextSrv.hasPermission(AccessControlAction.OrgsPreferencesWrite);\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={isLoading}>\n          {!isLoading && (\n            <Stack direction=\"column\" gap={3}>\n              {canReadOrg && <OrgProfile onSubmit={this.onUpdateOrganization} orgName={organization.name} />}\n              {canReadPreferences && (\n                <SharedPreferences\n                  resourceUri=\"org\"\n                  disabled={!canWritePreferences}\n                  preferenceType=\"org\"\n                  onConfirm={this.handleConfirm}\n                />\n              )}\n            </Stack>\n          )}\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, 'org-settings'),\n    organization: state.organization.organization,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadOrganization,\n  setOrganizationName,\n  updateOrganization,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport default connector(OrgDetailsPage);\n"],"names":["Form","defaultValues","onSubmit","validateOnMount","validateFieldsOnMount","children","validateOn","maxWidth","htmlProps","handleSubmit","trigger","formState","rest","getLanguageOptions","languageOptions","v","a","b","SharedPreferences","props","event","homeDashboardUID","theme","timezone","weekStart","language","queryHistory","navbar","value","dashboardUID","getTranslatedThemeName","prefs","disabled","styles","getStyles","languages","currentThemeOption","x","lang","orgName","canWriteOrg","register","FieldSet","Field","Input","Button","OrgDetailsPage","resolve","navModel","organization","isLoading","canReadOrg","canReadPreferences","canWritePreferences","Page","Stack","mapStateToProps","state","mapDispatchToProps"],"sourceRoot":""}