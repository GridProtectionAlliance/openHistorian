{"version":3,"sources":["webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/time_grain_converter.ts","webpack:///./public/app/features/explore/slate-plugins/prism/index.tsx","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/editor/typeahead.tsx","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/editor/query_field.tsx","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/editor/kusto/kusto.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/editor/KustoQueryField.tsx","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/editor/editor_component.tsx","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/query_ctrl.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_monitor/url_builder.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_monitor/response_parser.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_monitor/supported_namespaces.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_monitor/azure_monitor_datasource.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/app_insights/app_insights_querystring_builder.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/log_analytics/querystring_builder.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/app_insights/response_parser.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/app_insights/app_insights_datasource.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_log_analytics/response_parser.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/datasource.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_log_analytics/azure_log_analytics_datasource.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/AzureCredentialsForm.tsx","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MonitorConfig.tsx","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/AnalyticsConfig.tsx","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/InsightsConfig.tsx","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/ConfigEditor.tsx","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/annotations_query_ctrl.ts","webpack:///./public/app/plugins/datasource/grafana-azure-monitor-datasource/module.tsx"],"names":["TimeGrainConverter","createISO8601Duration","timeGrain","timeGrainUnit","lodash_default","a","includes","toUpperCase","createISO8601DurationFromInterval","interval","slice","length","unit","indexOf","toMinutes","findClosestTimeGrain","allowedTimeGrains","timeGrains","filter","o","closest","intervalMs","kbn","interval_to_ms","i","createTimeGrainFromISO8601Duration","duration","offset","substring","value","timeUnitToText","text","createKbnUnitFromISO8601Duration","timeUnitToKbn","TOKEN_MARK","PrismPlugin","_a","definition","language","prism_default","languages","renderDecoration","props","editor","next","children","decoration","type","className","data","get","react_default","createElement","decorateNode","node","texts","getTexts","toArray","tstring","map","t","join","grammar","tokens","tokenize","decorations","startText","shift","endText","startOffset","endOffset","start","processToken","token","acc","types","alias","content","newlines","split","end","available","remaining","range","createDecoration","anchor","key","focus","push","_b","tslib_es6","_c","done","tokens_1","tokens_1_1","typeahead_TypeaheadItem","_super","TypeaheadItem","_this","apply","this","arguments","getRef","el","prototype","componentDidUpdate","prevProps","isSelected","offsetParent","container","offsetTop","scrollTop","offsetHeight","scrollIntoView","render","hint","label","onClickItem","ref","onClick","PureComponent","typeahead_TypeaheadGroup","TypeaheadGroup","items","selected","item","display","typeahead","Typeahead","groupedItems","menuRef","selectedItems","g","flattenSuggestions","s","reduce","concat","getInitialValue","query","slate_es","create","document","lines","line","nodes","query_field_Portal","Portal","call","index","prefix","classList","add","body","appendChild","componentWillUnmount","removeChild","react_dom_default","createPortal","Component","query_field","QueryField","context","keybindingSrv","Object","onChange","changed","state","setState","requestAnimationFrame","onTypeahead","onChangeQuery","request","url","fetch","onQueryChange","slate_plain_serializer_es","serialize","onKeyDown","event","typeaheadIndex","suggestions","keyboardEvent","menuEl","preventDefault","stopPropagation","resetTypeahead","ctrlKey","flattenedSuggestions","suggestion","Math","abs","applyTypeahead","max","change","callback","typeaheadPrefix","typeaheadContext","handleBlur","onBlur","resetTimer","setTimeout","restoreEscapeKeyBinding","handleFocus","onFocus","removeEscapeKeyBinding","updateMenu","menu","window","getSelection","anchorNode","parentElement","rect","getBoundingClientRect","scrollX","scrollY","screenHeight","innerHeight","menuLeft_1","left","menuTop_1","top","height","menuHeight_1","style","opacity","maxHeight","removeAttribute","renderMenu","portalPrefix","selectedIndex","selectedKeys","prismDefinition","prismLanguage","plugins","braces","clear","runner","handler","onPressEnter","newline","labelKeys","labelValues","initialQuery","componentDidMount","clearTimeout","unbind","setupGlobal","slate_react_es","autoCorrect","placeholder","spellCheck","operatorTokens","functionTokens","KEYWORDS","grafanaMacros","tokenizer","comment","pattern","lookbehind","greedy","function-context","inside","RegExp","builtin","f","string","keyword","boolean","number","operator","punctuation","variable","argument","kusto","TYPEAHEAD_DELAY","defaultSchema","Databases","Default","cleanText","replace","trim","wrapText","KustoQueryField","force","selection","wrapperNode","isBlurred","getRangeAt","textContent","prefix_1","substr","modelOffset","anchorOffset","modelPrefix","anchorText","suggestionGroups","wrapperClasses","contains","getColumnSuggestions","match","getFunctionSuggestions","getTableSuggestions","db","getDBFromDatabaseFunction","console","log","normalizeQuery","schema","fetchSchema","getInitialSuggestions","getKeywordSuggestions","str","exec","getLastWord","results_1","toLowerCase","filteredSuggestions","group","skipFilter","c","prefixMatch","typeaheadText","suggestionText","nextChar","src","getNextCharacter","backward","deleteBackwards","suffixLength","forward","deleteBackward","deleteForward","insertText","moveForward","debounce_default","Tables","Name","table","getTableFromContext","tableSchema","OrderedColumns","Type","normalizedQuery","getSchema","sent","defaultSchemaTemplate","castSchema","editor_component_Editor","Editor","edited","execute","variables","editor_KustoQueryField","templateVariables","defaultProps","react","core_module","directive","reactDirective","watchDepth","query_ctrl_AzureMonitorQueryCtrl","AzureMonitorQueryCtrl","$scope","$injector","templateSrv","defaultDropdownValue","defaults","queryType","resourceGroup","metricDefinition","resourceName","metricNamespace","metricName","dimensionFilter","resultFormat","datasource","azureLogAnalyticsDatasource","defaultOrFirstWorkspace","rawQuery","rawQueryString","groupBy","timeGrainType","xaxis","yaxis","spliton","getWorkspaces","target","subscription","then","list","workspaces","azureLogAnalytics","workspace","catch","handleQueryCtrlError","bind","getAzureLogAnalyticsSchema","onLogAnalyticsQueryChange","nextQuery","onLogAnalyticsQueryExecute","panelCtrl","refresh","onAppInsightsQueryChange","appInsights","onAppInsightsQueryExecute","getAppInsightsQuerySchema","appInsightsDatasource","getQuerySchema","defaultsDeep","migrateTimeGrains","migrateToFromTimes","migrateToDefaultNamespace","events","on","onDataReceived","onDataError","resultFormats","getSubscriptions","$inject","dataList","lastQueryError","undefined","lastQuery","anySeriesFromQuery","find","refId","meta","err","error","innererror","message","azureMonitor","time_grain_converter","onMetricNameChange","allowedTimeGrainsMs","convertTimeGrainsToMs","panel","scopedVars","onQueryTypeChange","azureMonitorDatasource","isConfigured","subs","subscriptions","logAnalyticsSubscriptionId","subscriptionId","onSubscriptionChange","aggregation","dimensions","dimension","getResourceGroups","getMetricDefinitions","getResourceNames","getMetricNamespaces","getMetricNames","onResourceGroupChange","onMetricDefinitionChange","onResourceNameChange","onMetricNamespacesChange","getMetricMetadata","metadata","aggOptions","supportedAggTypes","primaryAggType","supportedTimeGrains","forEach","tg","getAutoInterval","getBuiltInIntervalValue","name","configurable","getAppInsightsAutoInterval","getAppInsightsMetricNames","getAppInsightsColumns","onAppInsightsColumnChange","onAppInsightsMetricNameChange","getAppInsightsMetricMetadata","aggData","groupByOptions","supportedGroupBy","getAppInsightsGroupBySegments","option","resetAppInsightsGroupBy","updateTimeGrainType","toggleEditorMode","templateUrl","sdk","UrlBuilder","buildAzureMonitorGetMetricNamespacesUrl","baseUrl","apiVersion","rn","service","lastIndexOf","buildAzureMonitorGetMetricNamesUrl","encodeURIComponent","ResponseParser","parseResponseValues","result","textFieldName","valueFieldName","parseResourceNames","parseMetadata","defaultAggTypes","metricData","primaryAggregationType","supportedAggregationTypes","parseTimeGrains","metricAvailabilities","parseDimensions","avail","isDimensionRequired","localizedValue","parseSubscriptions","SupportedNamespaces","cloudName","supportedMetricNamespaces","AzureMonitorDatasource","instanceSettings","backendSrv","apiPreviewVersion","id","jsonData","supported_namespaces","options","targets","hide","toString","datasourceId","format","queries","datasourceRequest","from","valueOf","to","Promise","resolve","results","queryRes","series","timeSerie","datapoints","points","grafana_data_src","annotationQuery","metricFindQuery","resourceGroupsQueryWithSub","toVariable","metricDefinitionsQuery","metricDefinitionsQueryWithSub","resourceNamesQuery","resourceNamesQueryWithSub","metricNamespaceQuery","metricNamespaceQueryWithSub","metricNamesQuery","metricNamesQueryWithSub","metric","route","doRequest","response_parser","shouldHardcodeBlobStorage","startsWith","url_builder","testDatasource","isValidConfigField","tenantId","status","clientId","response","title","statusText","code","field","maxRetries","AppInsightsQuerystringBuilder","grafanaInterval","setAggregation","setGroupBy","setInterval","setFilter","generate","querystring","utc","LogAnalyticsQuerystringBuilder","defaultTimeField","queryString","macroRegexp","p1","p2","getMultiContains","escape","getTimeFilter","getFrom","getUntil","uriString","startOf","toISOString","rangeRaw","Date","now","until","timeFieldArg","timeField","inputs","firstCommaIndex","templateVar","v","parseQueryResult","columns","raw","yaxises","Columns","rows","Rows","parseRawQueryResultRow","parseQueryResultRow","columnsForDropdown","column","ColumnName","xaxisColumn","findIndex","yaxisesSplit","yaxisColumns","splitonColumn","convertTimestamp","row","yaxisColumn","yaxisName","bucket","findOrCreateBucket","epoch","dateTimeToEpoch","isSingleValue","getMetricFieldKey","aggField","getKeyForAggregationField","hasSegmentsField","segments","j","getTargetName","dataTarget","segment","segmentName","segmentValue","prop","isObject","g1","g2","obj","keys","without","dataObj","intersection","dateTimeValue","parseMetricNames","metrics","toTextValueList","Error","defaultAggregation","supportedAggregations","all","parseGroupBys","parseQuerySchema","columnTable","columnName","columnType","values","AppInsightsDatasource","$q","version","logAnalyticsColumns","applicationId","appInsightsAppId","generated","querystringBuilder","querystring_builder","maxDataPoints","app_insights_querystring_builder","encodeURI","doQueries","promises","app_insights_response_parser","flattened","appInsightsGroupByQuery","getGroupBys","method","tables","parseTimeSeriesResult","parseTableResult","timeIndex","metricIndex","valueIndex","col","parseToVariables","queryResult","flattenDeep","transformToAnnotations","textIndex","tagsIndex","annotation","time","floor","tags","parseSchemaResult","createSchemaDatabaseWithTables","createSchemaTables","Functions","createSchemaFunctions","e_1","e_2","_d","_e","_f","convertToKustoColumn","e_3","functions","func","Body","DocString","displayName","Folder","category","FunctionKind","InputParameters","azure_log_analytics_datasource","AzureLogAnalyticsDatasource","azureLogAnalyticsSameAs","logAnalyticsDefaultWorkspace","setWorkspaceUrl","azureCloud","azureMonitorUrl","workspaceListUrl","val","properties","customerId","interpolateVariable","azure_log_analytics_response_parser","getDefaultOrFirstWorkspace","buildQuery","multi","includeAll","reject","validationError","isValidConfig","ws","config","getErrorMessage","logAnalyticsTenantId","logAnalyticsClientId","Datasource","azure_monitor_datasource","azureMonitorOptions","appInsightsOptions","azureLogAnalyticsOptions","amPromise","aiPromise","alaPromise","cloneDeep","flatten","aiResult","amResult","alaResult","upperFirst","getAzureLogAnalyticsWorkspaces","AzureCredentialsForm","selectedAzureCloud","selectedSubscription","clientSecret","clientSecretConfigured","getDerivedStateFromProps","nextProps","prevState","azureCloudOptions","subscriptionOptions","onAzureCloudChange","onSubscriptionSelectChange","onTenantIdChange","onClientIdChange","onClientSecretChange","onResetClientSecret","onLoadSubscriptions","Fragment","tooltip","defaultValue","disabled","variant","size","hasRequiredFields","MonitorConfig","onAzureCloudSelect","onDatasourceUpdate","editorJsonData","editorSecureJsonData","secureJsonFields","onSubscriptionSelect","datasourceConfig","azureClouds","AzureCredentialsForm_AzureCredentialsForm","AnalyticsConfig","onLogAnalyticsTenantIdChange","onLogAnalyticsClientIdChange","onLogAnalyticsClientSecretChange","logAnalyticsClientSecret","onLogAnalyticsResetClientSecret","onLogAnalyticsSubscriptionSelect","logAnalyticsSubscription","onWorkspaceSelectChange","onAzureLogAnalyticsSameAsChange","logAnalyticsSubscriptions","logAnalyticsWorkspaces","addtlAttrs","checked","onLoadWorkspaces","hasWorkspaceRequiredFields","backend_srv","__webpack_require__","InsightsConfig","onAppInsightsAppIdChange","onAppInsightsApiKeyChange","appInsightsApiKey","onAppInsightsResetApiKey","m","l","k","secureJsonData","hasOwnProperty","onOptionsChange","logAnalyticsHasNecessaryCredentials","put","updateDatasource","sameAs","ConfigEditor","keyFill","template_srv","init","MonitorConfig_MonitorConfig","onConfigUpdate","AnalyticsConfig_AnalyticsConfig","InsightsConfig_InsightsConfig","initDropdowns","bustCache","defineProperty","AzureMonitorAnnotationsQueryCtrl","enumerable","d","__webpack_exports__","module_plugin"],"mappings":"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DACD,iEAEC,CACA,qCACA,kCACA,gCACA,wBACA,2CACA,mDACA,uCACA,oCACA,4CACA,yCACA,+BACA,oCACA,4BACA,yCACA,6BACA,yCACA,sCACA,gCACA,8BACA,uCACA,4BACA,4BACA,sCACA,kCACA,6BACA,sCACA,mCACA,wCACA,2CACA,yCACA,kDACA,gCACA,2CACA,uDACA,+BACA,yDACA,2CACA,wCACA,6BACA,kCACA,kCACA,qCACA,iCACA,oCACA,iDACA,iDACA,kDACA,kDACA,4BACA,sBACA,4BACA,mDACD,qEAEC,CACA,qCACA,gCACA,wBACA,2CACA,mDACA,oCACA,4CACA,+BACA,oCACA,4BACA,yCACA,gCACA,8BACA,uCACA,4BACA,sCACA,kCACA,6BACA,sCACA,mCACA,wCACA,2CACA,yCACA,kDACA,gCACA,2CACA,uDACA,+BACA,yDACA,2CACA,wCACA,6BACA,kCACA,kCACA,qCACA,iCACA,oCACA,iDACA,iDACA,kDACA,kDACA,0CACA,4BACA,sBACA,4BACA,mDACD,mEAEC,CACA,qCACA,gCACA,wBACA,2CACA,mDACA,uCACA,oCACA,4CACA,yCACA,+BACA,oCACA,4BACA,yCACA,gCACA,uCACA,4BACA,4BACA,sCACA,kCACA,6BACA,sCACA,mCACA,wCACA,2CACA,yCACA,kDACA,gCACA,2CACA,uDACA,+BACA,yDACA,wCACA,6BACA,kCACA,kCACA,qCACA,iCACA,oCACA,iDACA,iDACA,kDACA,kDACA,0CACA,4BACA,sBACA,4BACA,mDACD,kDAQJ,SAFe3Z,UAAAtD,IAAA,WACb,OAAAkD,KAAA+Z,0BAAA/Z,KAAA8Z,YACFD,EALqB,kBC/MJ,oBAGNG,EAAUC,EAAYC,EAAA1J,GACtBxQ,KAAAia,mBAhBVja,KAAAka,WAAaA,EACbla,KAAAwQ,cAOAxQ,KAAAqY,WAAA,aAEArY,KAAAma,kBAAA,qBAQEna,KAAKyQ,qBAAsB,SAC3BzQ,KAAK+Z,0BAAiB,GACtB/Z,KAAKoa,GAAAH,EAAYG,GACjBpa,KAAKwV,eAAcyE,EAAcI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","file":"azureMonitorPlugin.3932bda029d2299a9d96.js","sourcesContent":["import _ from 'lodash';\nimport kbn from 'app/core/utils/kbn';\n\nexport default class TimeGrainConverter {\n  static createISO8601Duration(timeGrain: string | number, timeGrainUnit: any) {\n    const timeIntervals = ['hour', 'minute', 'h', 'm'];\n    if (_.includes(timeIntervals, timeGrainUnit)) {\n      return `PT${timeGrain}${timeGrainUnit[0].toUpperCase()}`;\n    }\n\n    return `P${timeGrain}${timeGrainUnit[0].toUpperCase()}`;\n  }\n\n  static createISO8601DurationFromInterval(interval: string) {\n    const timeGrain = +interval.slice(0, interval.length - 1);\n    const unit = interval[interval.length - 1];\n\n    if (interval.indexOf('ms') > -1) {\n      return TimeGrainConverter.createISO8601Duration(1, 'm');\n    }\n\n    if (interval[interval.length - 1] === 's') {\n      let toMinutes = (timeGrain * 60) % 60;\n\n      if (toMinutes < 1) {\n        toMinutes = 1;\n      }\n\n      return TimeGrainConverter.createISO8601Duration(toMinutes, 'm');\n    }\n\n    return TimeGrainConverter.createISO8601Duration(timeGrain, unit);\n  }\n\n  static findClosestTimeGrain(interval: any, allowedTimeGrains: string[]) {\n    const timeGrains = _.filter(allowedTimeGrains, o => o !== 'auto');\n\n    let closest = timeGrains[0];\n    const intervalMs = kbn.interval_to_ms(interval);\n\n    for (let i = 0; i < timeGrains.length; i++) {\n      // abs (num - val) < abs (num - curr):\n      if (intervalMs > kbn.interval_to_ms(timeGrains[i])) {\n        if (i + 1 < timeGrains.length) {\n          closest = timeGrains[i + 1];\n        } else {\n          closest = timeGrains[i];\n        }\n      }\n    }\n\n    return closest;\n  }\n\n  static createTimeGrainFromISO8601Duration(duration: string) {\n    let offset = 1;\n    if (duration.substring(0, 2) === 'PT') {\n      offset = 2;\n    }\n\n    const value = duration.substring(offset, duration.length - 1);\n    const unit = duration.substring(duration.length - 1);\n\n    return value + ' ' + TimeGrainConverter.timeUnitToText(+value, unit);\n  }\n\n  static timeUnitToText(value: number, unit: string) {\n    let text = '';\n\n    if (unit === 'S') {\n      text = 'second';\n    }\n    if (unit === 'M') {\n      text = 'minute';\n    }\n    if (unit === 'H') {\n      text = 'hour';\n    }\n    if (unit === 'D') {\n      text = 'day';\n    }\n\n    if (value > 1) {\n      return text + 's';\n    }\n\n    return text;\n  }\n\n  static createKbnUnitFromISO8601Duration(duration: string) {\n    if (duration === 'auto') {\n      return 'auto';\n    }\n\n    let offset = 1;\n    if (duration.substring(0, 2) === 'PT') {\n      offset = 2;\n    }\n\n    const value = duration.substring(offset, duration.length - 1);\n    const unit = duration.substring(duration.length - 1);\n\n    return value + TimeGrainConverter.timeUnitToKbn(+value, unit);\n  }\n\n  static timeUnitToKbn(value: number, unit: string) {\n    if (unit === 'S') {\n      return 's';\n    }\n    if (unit === 'M') {\n      return 'm';\n    }\n    if (unit === 'H') {\n      return 'h';\n    }\n    if (unit === 'D') {\n      return 'd';\n    }\n\n    return '';\n  }\n}\n","import React from 'react';\nimport Prism from 'prismjs';\nimport { Decoration } from 'slate';\nimport { Editor } from '@grafana/slate-react';\n\nconst TOKEN_MARK = 'prism-token';\n\nexport function setPrismTokens(language: string, field: string | number, values: any, alias = 'variable') {\n  Prism.languages[language][field] = {\n    alias,\n    pattern: new RegExp(`(?:^|\\\\s)(${values.join('|')})(?:$|\\\\s)`),\n  };\n}\n\n/**\n * Code-highlighting plugin based on Prism and\n * https://github.com/ianstormtaylor/slate/blob/master/examples/code-highlighting/index.js\n *\n * (Adapted to handle nested grammar definitions.)\n */\n\nexport default function PrismPlugin({ definition, language }: { definition: any; language: string }) {\n  if (definition) {\n    // Don't override exising modified definitions\n    Prism.languages[language] = Prism.languages[language] || definition;\n  }\n\n  return {\n    /**\n     * Render a Slate mark with appropiate CSS class names\n     *\n     * @param {Object} props\n     * @return {Element}\n     */\n\n    renderDecoration(props: any, editor: Editor, next: () => any): JSX.Element {\n      const { children, decoration } = props;\n      // Only apply spans to marks identified by this plugin\n      if (decoration.type !== TOKEN_MARK) {\n        return next();\n      }\n      const className = `token ${decoration.data.get('types')}`;\n      return <span className={className}>{children}</span>;\n    },\n\n    /**\n     * Decorate code blocks with Prism.js highlighting.\n     *\n     * @param {Node} node\n     * @return {Array}\n     */\n\n    decorateNode(node: any, editor: Editor, next: () => any): any[] {\n      if (node.type !== 'paragraph') {\n        return [];\n      }\n\n      const texts = node.getTexts().toArray();\n      const tstring = texts.map((t: { text: any }) => t.text).join('\\n');\n      const grammar = Prism.languages[language];\n      const tokens = Prism.tokenize(tstring, grammar);\n      const decorations: Decoration[] = [];\n      let startText = texts.shift();\n      let endText = startText;\n      let startOffset = 0;\n      let endOffset = 0;\n      let start = 0;\n\n      function processToken(token: any, acc?: string) {\n        // Accumulate token types down the tree\n        const types = `${acc || ''} ${token.type || ''} ${token.alias || ''}`;\n\n        // Add mark for token node\n        if (typeof token === 'string' || typeof token.content === 'string') {\n          startText = endText;\n          startOffset = endOffset;\n\n          const content = typeof token === 'string' ? token : token.content;\n          const newlines = content.split('\\n').length - 1;\n          const length = content.length - newlines;\n          const end = start + length;\n\n          let available = startText.text.length - startOffset;\n          let remaining = length;\n\n          endOffset = startOffset + remaining;\n\n          while (available < remaining) {\n            endText = texts.shift();\n            remaining = length - available;\n            available = endText.text.length;\n            endOffset = remaining;\n          }\n\n          // Inject marks from up the tree (acc) as well\n          if (typeof token !== 'string' || acc) {\n            const range = node.createDecoration({\n              anchor: {\n                key: startText.key,\n                offset: startOffset,\n              },\n              focus: {\n                key: endText.key,\n                offset: endOffset,\n              },\n              type: TOKEN_MARK,\n              data: { types },\n            });\n\n            decorations.push(range);\n          }\n\n          start = end;\n        } else if (token.content && token.content.length) {\n          // Tokens can be nested\n          for (const subToken of token.content) {\n            processToken(subToken, types);\n          }\n        }\n      }\n\n      // Process top-level tokens\n      for (const token of tokens) {\n        processToken(token);\n      }\n\n      return decorations;\n    },\n  };\n}\n","import React from 'react';\n\nfunction scrollIntoView(el: any) {\n  if (!el || !el.offsetParent) {\n    return;\n  }\n  const container = el.offsetParent;\n  if (el.offsetTop > container.scrollTop + container.offsetHeight || el.offsetTop < container.scrollTop) {\n    container.scrollTop = el.offsetTop - container.offsetTop;\n  }\n}\n\nclass TypeaheadItem extends React.PureComponent<any, any> {\n  el: any;\n  componentDidUpdate(prevProps: any) {\n    if (this.props.isSelected && !prevProps.isSelected) {\n      scrollIntoView(this.el);\n    }\n  }\n\n  getRef = (el: any) => {\n    this.el = el;\n  };\n\n  render() {\n    const { hint, isSelected, label, onClickItem } = this.props;\n    const className = isSelected ? 'typeahead-item typeahead-item__selected' : 'typeahead-item';\n    const onClick = () => onClickItem(label);\n    return (\n      <li ref={this.getRef} className={className} onClick={onClick}>\n        {label}\n        {hint && isSelected ? <div className=\"typeahead-item-hint\">{hint}</div> : null}\n      </li>\n    );\n  }\n}\n\nclass TypeaheadGroup extends React.PureComponent<any, any> {\n  render() {\n    const { items, label, selected, onClickItem } = this.props;\n    return (\n      <li className=\"typeahead-group\">\n        <div className=\"typeahead-group__title\">{label}</div>\n        <ul className=\"typeahead-group__list\">\n          {items.map((item: any) => {\n            const text = typeof item === 'object' ? item.text : item;\n            const label = typeof item === 'object' ? item.display || item.text : item;\n            return (\n              <TypeaheadItem\n                key={text}\n                onClickItem={onClickItem}\n                isSelected={selected.indexOf(text) > -1}\n                hint={item.hint}\n                label={label}\n              />\n            );\n          })}\n        </ul>\n      </li>\n    );\n  }\n}\n\nclass Typeahead extends React.PureComponent<any, any> {\n  render() {\n    const { groupedItems, menuRef, selectedItems, onClickItem } = this.props;\n    return (\n      <ul className=\"typeahead\" ref={menuRef}>\n        {groupedItems.map((g: any) => (\n          <TypeaheadGroup key={g.label} onClickItem={onClickItem} selected={selectedItems} {...g} />\n        ))}\n      </ul>\n    );\n  }\n}\n\nexport default Typeahead;\n","import PluginPrism from 'app/features/explore/slate-plugins/prism';\nimport BracesPlugin from 'app/features/explore/slate-plugins/braces';\nimport ClearPlugin from 'app/features/explore/slate-plugins/clear';\nimport NewlinePlugin from 'app/features/explore/slate-plugins/newline';\nimport RunnerPlugin from 'app/features/explore/slate-plugins/runner';\n\nimport Typeahead from './typeahead';\nimport { getKeybindingSrv, KeybindingSrv } from 'app/core/services/keybindingSrv';\n\nimport { Block, Document, Text, Value, Editor as CoreEditor } from 'slate';\nimport { Editor } from '@grafana/slate-react';\nimport Plain from 'slate-plain-serializer';\nimport ReactDOM from 'react-dom';\nimport React from 'react';\nimport _ from 'lodash';\n\nfunction flattenSuggestions(s: any) {\n  return s ? s.reduce((acc: any, g: any) => acc.concat(g.items), []) : [];\n}\n\nexport const makeFragment = (text: string) => {\n  const lines = text.split('\\n').map((line: any) =>\n    Block.create({\n      type: 'paragraph',\n      nodes: [Text.create(line)],\n    } as any)\n  );\n\n  const fragment = Document.create({\n    nodes: lines,\n  });\n  return fragment;\n};\n\nexport const getInitialValue = (query: string) => Value.create({ document: makeFragment(query) });\n\nclass Portal extends React.Component<any, any> {\n  node: any;\n\n  constructor(props: any) {\n    super(props);\n    const { index = 0, prefix = 'query' } = props;\n    this.node = document.createElement('div');\n    this.node.classList.add(`slate-typeahead`, `slate-typeahead-${prefix}-${index}`);\n    document.body.appendChild(this.node);\n  }\n\n  componentWillUnmount() {\n    document.body.removeChild(this.node);\n  }\n\n  render() {\n    return ReactDOM.createPortal(this.props.children, this.node);\n  }\n}\n\nclass QueryField extends React.Component<any, any> {\n  menuEl: any;\n  plugins: any;\n  resetTimer: any;\n  keybindingSrv: KeybindingSrv = getKeybindingSrv();\n\n  constructor(props: any, context: any) {\n    super(props, context);\n\n    const { prismDefinition = {}, prismLanguage = 'kusto' } = props;\n\n    this.plugins = [\n      BracesPlugin(),\n      ClearPlugin(),\n      RunnerPlugin({ handler: props.onPressEnter }),\n      NewlinePlugin(),\n      PluginPrism({ definition: prismDefinition, language: prismLanguage }),\n    ];\n\n    this.state = {\n      labelKeys: {},\n      labelValues: {},\n      suggestions: [],\n      typeaheadIndex: 0,\n      typeaheadPrefix: '',\n      value: getInitialValue(props.initialQuery || ''),\n    };\n  }\n\n  componentDidMount() {\n    this.updateMenu();\n  }\n\n  componentWillUnmount() {\n    this.restoreEscapeKeyBinding();\n    clearTimeout(this.resetTimer);\n  }\n\n  componentDidUpdate() {\n    this.updateMenu();\n  }\n\n  onChange = ({ value }: { value: Value }) => {\n    const changed = value.document !== this.state.value.document;\n    this.setState({ value }, () => {\n      if (changed) {\n        // call typeahead only if query changed\n        requestAnimationFrame(() => this.onTypeahead());\n        this.onChangeQuery();\n      }\n    });\n  };\n\n  request = (url?: string) => {\n    if (this.props.request) {\n      return this.props.request(url);\n    }\n    return fetch(url);\n  };\n\n  onChangeQuery = () => {\n    // Send text change to parent\n    const { onQueryChange } = this.props;\n    if (onQueryChange) {\n      onQueryChange(Plain.serialize(this.state.value));\n    }\n  };\n\n  onKeyDown = (event: Event, editor: CoreEditor, next: Function) => {\n    const { typeaheadIndex, suggestions } = this.state;\n    const keyboardEvent = event as KeyboardEvent;\n\n    switch (keyboardEvent.key) {\n      case 'Escape': {\n        if (this.menuEl) {\n          keyboardEvent.preventDefault();\n          keyboardEvent.stopPropagation();\n          this.resetTypeahead();\n          return true;\n        }\n        break;\n      }\n\n      case ' ': {\n        if (keyboardEvent.ctrlKey) {\n          keyboardEvent.preventDefault();\n          this.onTypeahead(true);\n          return true;\n        }\n        break;\n      }\n\n      case 'Tab':\n      case 'Enter': {\n        if (this.menuEl) {\n          // Dont blur input\n          keyboardEvent.preventDefault();\n          if (!suggestions || !suggestions.length) {\n            return next();\n          }\n\n          // Get the currently selected suggestion\n          const flattenedSuggestions = flattenSuggestions(suggestions);\n          const selected = Math.abs(typeaheadIndex);\n          const selectedIndex = selected % flattenedSuggestions.length || 0;\n          const suggestion = flattenedSuggestions[selectedIndex];\n\n          return this.applyTypeahead(editor, suggestion);\n        }\n        break;\n      }\n\n      case 'ArrowDown': {\n        if (this.menuEl) {\n          // Select next suggestion\n          keyboardEvent.preventDefault();\n          this.setState({ typeaheadIndex: typeaheadIndex + 1 });\n        }\n        break;\n      }\n\n      case 'ArrowUp': {\n        if (this.menuEl) {\n          // Select previous suggestion\n          keyboardEvent.preventDefault();\n          this.setState({ typeaheadIndex: Math.max(0, typeaheadIndex - 1) });\n        }\n        break;\n      }\n\n      default: {\n        // console.log('default key', event.key, event.which, event.charCode, event.locale, data.key);\n        break;\n      }\n    }\n    return next();\n  };\n\n  onTypeahead = (change = false, item?: any): boolean | void => {\n    return change;\n  };\n\n  applyTypeahead = (\n    editor?: CoreEditor,\n    suggestion?: { text: any; type: string; deleteBackwards: any }\n  ): { value: Value } => {\n    return { value: new Value() };\n  };\n\n  resetTypeahead = (callback?: () => void) => {\n    this.setState(\n      {\n        suggestions: [],\n        typeaheadIndex: 0,\n        typeaheadPrefix: '',\n        typeaheadContext: null,\n      },\n      callback\n    );\n  };\n\n  handleBlur = () => {\n    const { onBlur } = this.props;\n    // If we dont wait here, menu clicks wont work because the menu\n    // will be gone.\n    this.resetTimer = setTimeout(this.resetTypeahead, 100);\n    if (onBlur) {\n      onBlur();\n    }\n    this.restoreEscapeKeyBinding();\n  };\n\n  handleFocus = () => {\n    const { onFocus } = this.props;\n    if (onFocus) {\n      onFocus();\n    }\n    // Don't go back to dashboard if Escape pressed inside the editor.\n    this.removeEscapeKeyBinding();\n  };\n\n  removeEscapeKeyBinding() {\n    this.keybindingSrv.unbind('esc', 'keydown');\n  }\n\n  restoreEscapeKeyBinding() {\n    this.keybindingSrv.setupGlobal();\n  }\n\n  onClickItem = (item: any) => {\n    const { suggestions } = this.state;\n    if (!suggestions || suggestions.length === 0) {\n      return;\n    }\n\n    // Manually triggering change\n    const change = this.applyTypeahead();\n    this.onChange(change);\n  };\n\n  updateMenu = () => {\n    const { suggestions } = this.state;\n    const menu = this.menuEl;\n    const selection = window.getSelection();\n    const node = selection.anchorNode;\n\n    // No menu, nothing to do\n    if (!menu) {\n      return;\n    }\n\n    // No suggestions or blur, remove menu\n    const hasSuggesstions = suggestions && suggestions.length > 0;\n    if (!hasSuggesstions) {\n      menu.removeAttribute('style');\n      return;\n    }\n\n    // Align menu overlay to editor node\n    if (node && node.parentElement) {\n      // Read from DOM\n      const rect = node.parentElement.getBoundingClientRect();\n      const scrollX = window.scrollX;\n      const scrollY = window.scrollY;\n      const screenHeight = window.innerHeight;\n\n      const menuLeft = rect.left + scrollX - 2;\n      const menuTop = rect.top + scrollY + rect.height + 4;\n      const menuHeight = screenHeight - menuTop - 10;\n\n      // Write DOM\n      requestAnimationFrame(() => {\n        menu.style.opacity = 1;\n        menu.style.top = `${menuTop}px`;\n        menu.style.left = `${menuLeft}px`;\n        menu.style.maxHeight = `${menuHeight}px`;\n      });\n    }\n  };\n\n  menuRef = (el: any) => {\n    this.menuEl = el;\n  };\n\n  renderMenu = () => {\n    const { portalPrefix } = this.props;\n    const { suggestions } = this.state;\n    const hasSuggesstions = suggestions && suggestions.length > 0;\n    if (!hasSuggesstions) {\n      return null;\n    }\n\n    // Guard selectedIndex to be within the length of the suggestions\n    let selectedIndex = Math.max(this.state.typeaheadIndex, 0);\n    const flattenedSuggestions = flattenSuggestions(suggestions);\n    selectedIndex = selectedIndex % flattenedSuggestions.length || 0;\n    const selectedKeys = (flattenedSuggestions.length > 0 ? [flattenedSuggestions[selectedIndex]] : []).map(i =>\n      typeof i === 'object' ? i.text : i\n    );\n\n    // Create typeahead in DOM root so we can later position it absolutely\n    return (\n      <Portal prefix={portalPrefix}>\n        <Typeahead\n          menuRef={this.menuRef}\n          selectedItems={selectedKeys}\n          onClickItem={this.onClickItem}\n          groupedItems={suggestions}\n        />\n      </Portal>\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"slate-query-field\">\n        {this.renderMenu()}\n        <Editor\n          autoCorrect={false}\n          onBlur={this.handleBlur}\n          onKeyDown={this.onKeyDown}\n          onChange={this.onChange}\n          onFocus={this.handleFocus}\n          placeholder={this.props.placeholder}\n          plugins={this.plugins}\n          spellCheck={false}\n          value={this.state.value}\n        />\n      </div>\n    );\n  }\n}\n\nexport default QueryField;\n","/* tslint:disable:max-line-length */\nexport const operatorTokens = [\n  { text: '!between', hint: 'Matches the input that is outside the inclusive range.' },\n  { text: 'as', hint: \"Binds a name to the operator's input tabular expression.\" },\n  { text: 'between', hint: 'Matches the input that is inside the inclusive range.' },\n  {\n    text: 'consume',\n    hint:\n      'The `consume` operator consumes the tabular data stream handed to it. It is\\r\\nmostly used for triggering the query side-effect without actually returning\\r\\nthe results back to the caller.',\n  },\n  { text: 'count', hint: 'Returns the number of records in the input record set.' },\n  { text: 'datatable', hint: 'Returns a table whose schema and values are defined in the query itself.' },\n  {\n    text: 'distinct',\n    hint: 'Produces a table with the distinct combination of the provided columns of the input table.',\n  },\n  { text: 'evaluate', hint: 'Invokes a service-side query extension (plugin).' },\n  { text: 'extend', hint: 'Create calculated columns and append them to the result set.' },\n  {\n    text: 'externaldata',\n    hint:\n      'Returns a table whose schema is defined in the query itself, and whose data is read from an external raw file.',\n  },\n  {\n    text: 'facet',\n    hint:\n      'Returns a set of tables, one for each specified column.\\r\\nEach table specifies the list of values taken by its column.\\r\\nAn additional table can be created by using the `with` clause.',\n  },\n  { text: 'find', hint: 'Finds rows that match a predicate across a set of tables.' },\n  { text: 'fork', hint: 'Runs multiple consumer operators in parallel.' },\n  { text: 'getschema', hint: 'Produce a table that represents a tabular schema of the input.' },\n  { text: 'in', hint: 'Filters a recordset based on the provided set of values.' },\n  { text: 'invoke', hint: 'Invokes lambda that receives the source of `invoke` as tabular parameter argument.' },\n  {\n    text: 'join',\n    hint:\n      'Merge the rows of two tables to form a new table by matching values of the specified column(s) from each table.',\n  },\n  { text: 'limit', hint: 'Return up to the specified number of rows.' },\n  { text: 'make-series', hint: 'Create series of specified aggregated values along specified axis.' },\n  { text: 'mvexpand', hint: 'Expands multi-value array or property bag.' },\n  { text: 'order', hint: 'Sort the rows of the input table into order by one or more columns.' },\n  { text: 'parse', hint: 'Evaluates a string expression and parses its value into one or more calculated columns.' },\n  {\n    text: 'print',\n    hint:\n      'Evaluates one or more scalar expressions and inserts the results (as a single-row table with as many columns as there are expressions) into the output.',\n  },\n  { text: 'project', hint: 'Select the columns to include, rename or drop, and insert new computed columns.' },\n  { text: 'project-away', hint: 'Select what  columns to exclude from the input.' },\n  { text: 'project-rename', hint: 'Renames columns in the result output.' },\n  { text: 'range', hint: 'Generates a single-column table of values.' },\n  { text: 'reduce', hint: 'Groups a set of strings together based on values similarity.' },\n  { text: 'render', hint: 'Instructs the user agent to render the results of the query in a particular way.' },\n  { text: 'sample', hint: 'Returns up to the specified number of random rows from the input table.' },\n  {\n    text: 'sample-distinct',\n    hint:\n      'Returns a single column that contains up to the specified number of distinct values of the requested column.',\n  },\n  { text: 'search', hint: 'The search operator provides a multi-table/multi-column search experience.' },\n  { text: 'serialize', hint: 'Marks that order of the input row set is safe for window functions usage.' },\n  { text: 'sort', hint: 'Sort the rows of the input table into order by one or more columns.' },\n  { text: 'summarize', hint: 'Produces a table that aggregates the content of the input table.' },\n  { text: 'take', hint: 'Return up to the specified number of rows.' },\n  { text: 'top', hint: 'Returns the first *N* records sorted by the specified columns.' },\n  {\n    text: 'top-hitters',\n    hint: 'Returns an approximation of the first *N* results (assuming skewed distribution of the input).',\n  },\n  {\n    text: 'top-nested',\n    hint: 'Produces hierarchical top results, where each level is a drill-down based on previous level values.',\n  },\n  { text: 'union', hint: 'Takes two or more tables and returns the rows of all of them.' },\n  { text: 'where', hint: 'Filters a table to the subset of rows that satisfy a predicate.' },\n];\n\nexport const functionTokens = [\n  { text: 'abs', hint: 'Calculates the absolute value of the input.' },\n  {\n    text: 'acos',\n    hint:\n      'Returns the angle whose cosine is the specified number (the inverse operation of [`cos()`](cosfunction.md)) .',\n  },\n  { text: 'ago', hint: 'Subtracts the given timespan from the current UTC clock time.' },\n  { text: 'any', hint: 'Returns random non-empty value from the specified expression values.' },\n  {\n    text: 'arg_max',\n    hint:\n      'Finds a row in the group that maximizes *ExprToMaximize*, and returns the value of *ExprToReturn* (or `*` to return the entire row).',\n  },\n  {\n    text: 'arg_min',\n    hint:\n      'Finds a row in the group that minimizes *ExprToMinimize*, and returns the value of *ExprToReturn* (or `*` to return the entire row).',\n  },\n  {\n    text: 'argmax',\n    hint:\n      'Finds a row in the group that maximizes *ExprToMaximize*, and returns the value of *ExprToReturn* (or `*` to return the entire row).',\n  },\n  {\n    text: 'argmin',\n    hint:\n      'Finds a row in the group that minimizes *ExprToMinimize*, and returns the value of *ExprToReturn* (or `*` to return the entire row).',\n  },\n  { text: 'array_concat', hint: 'Concatenates a number of dynamic arrays to a single array.' },\n  { text: 'array_length', hint: 'Calculates the number of elements in a dynamic array.' },\n  { text: 'array_slice', hint: 'Extracts a slice of a dynamic array.' },\n  {\n    text: 'array_split',\n    hint:\n      'Splits an array to multiple arrays according to the split indices and packs the generated array in a dynamic array.',\n  },\n  {\n    text: 'asin',\n    hint: 'Returns the angle whose sine is the specified number (the inverse operation of [`sin()`](sinfunction.md)) .',\n  },\n  {\n    text: 'assert',\n    hint: 'Checks for a condition; if the condition is false, outputs error messages and fails the query.',\n  },\n  {\n    text: 'atan',\n    hint:\n      'Returns the angle whose tangent is the specified number (the inverse operation of [`tan()`](tanfunction.md)) .',\n  },\n  {\n    text: 'atan2',\n    hint:\n      'Calculates the angle, in radians, between the positive x-axis and the ray from the origin to the point (y, x).',\n  },\n  { text: 'avg', hint: 'Calculates the average of *Expr* across the group.' },\n  {\n    text: 'avgif',\n    hint:\n      'Calculates the [average](avg-aggfunction.md) of *Expr* across the group for which *Predicate* evaluates to `true`.',\n  },\n  { text: 'bag_keys', hint: 'Enumerates all the root keys in a dynamic property-bag object.' },\n  { text: 'base64_decodestring', hint: 'Decodes a base64 string to a UTF-8 string' },\n  { text: 'base64_encodestring', hint: 'Encodes a string as base64 string' },\n  { text: 'beta_cdf', hint: 'Returns the standard cumulative beta distribution function.' },\n  { text: 'beta_inv', hint: 'Returns the inverse of the beta cumulative probability beta density function.' },\n  { text: 'beta_pdf', hint: 'Returns the probability density beta function.' },\n  { text: 'bin', hint: 'Rounds values down to an integer multiple of a given bin size.' },\n  {\n    text: 'bin_at',\n    hint:\n      \"Rounds values down to a fixed-size 'bin', with control over the bin's starting point.\\r\\n(See also [`bin function`](./binfunction.md).)\",\n  },\n  {\n    text: 'bin_auto',\n    hint:\n      \"Rounds values down to a fixed-size 'bin', with control over the bin size and starting point provided by a query property.\",\n  },\n  { text: 'binary_and', hint: 'Returns a result of the bitwise `and` operation between two values.' },\n  { text: 'binary_not', hint: 'Returns a bitwise negation of the input value.' },\n  { text: 'binary_or', hint: 'Returns a result of the bitwise `or` operation of the two values.' },\n  { text: 'binary_shift_left', hint: 'Returns binary shift left operation on a pair of numbers.' },\n  { text: 'binary_shift_right', hint: 'Returns binary shift right operation on a pair of numbers.' },\n  { text: 'binary_xor', hint: 'Returns a result of the bitwise `xor` operation of the two values.' },\n  { text: 'buildschema', hint: 'Returns the minimal schema that admits all values of *DynamicExpr*.' },\n  {\n    text: 'case',\n    hint: 'Evaluates a list of predicates and returns the first result expression whose predicate is satisfied.',\n  },\n  {\n    text: 'ceiling',\n    hint: 'Calculates the smallest integer greater than, or equal to, the specified numeric expression.',\n  },\n  { text: 'cluster', hint: 'Changes the reference of the query to a remote cluster.' },\n  {\n    text: 'coalesce',\n    hint: 'Evaluates a list of expressions and returns the first non-null (or non-empty for string) expression.',\n  },\n  { text: 'cos', hint: 'Returns the cosine function.' },\n  { text: 'cot', hint: 'Calculates the trigonometric cotangent of the specified angle, in radians.' },\n  {\n    text: 'count',\n    hint:\n      'Returns a count of the records per summarization group (or in total if summarization is done without grouping).',\n  },\n  { text: 'countif', hint: 'Returns a count of rows for which *Predicate* evaluates to `true`.' },\n  {\n    text: 'countof',\n    hint: 'Counts occurrences of a substring in a string. Plain string matches may overlap; regex matches do not.',\n  },\n  { text: 'current_principal', hint: 'Returns the current principal running this query.' },\n  {\n    text: 'cursor_after',\n    hint: 'A predicate over the records of a table to compare their ingestion time\\r\\nagainst a database cursor.',\n  },\n  {\n    text: 'cursor_before_or_at',\n    hint: 'A predicate over the records of a table to compare their ingestion time\\r\\nagainst a database cursor.',\n  },\n  { text: 'database', hint: 'Changes the reference of the query to a specific database within the cluster scope.' },\n  {\n    text: 'datetime_add',\n    hint:\n      'Calculates a new [datetime](./scalar-data-types/datetime.md) from a specified datepart multiplied by a specified amount, added to a specified [datetime](./scalar-data-types/datetime.md).',\n  },\n  {\n    text: 'datetime_diff',\n    hint: 'Calculates calendarian difference between two [datetime](./scalar-data-types/datetime.md) values.',\n  },\n  { text: 'datetime_part', hint: 'Extracts the requested date part as an integer value.' },\n  { text: 'dayofmonth', hint: 'Returns the integer number representing the day number of the given month' },\n  { text: 'dayofweek', hint: 'Returns the integer number of days since the preceding Sunday, as a `timespan`.' },\n  { text: 'dayofyear', hint: 'Returns the integer number represents the day number of the given year.' },\n  { text: 'dcount', hint: 'Returns an estimate of the number of distinct values of *Expr* in the group.' },\n  {\n    text: 'dcount_hll',\n    hint:\n      'Calculates the dcount from hll results (which was generated by [hll](hll-aggfunction.md) or [hll_merge](hll-merge-aggfunction.md)).',\n  },\n  {\n    text: 'dcountif',\n    hint:\n      'Returns an estimate of the number of distinct values of *Expr* of rows for which *Predicate* evaluates to `true`.',\n  },\n  {\n    text: 'degrees',\n    hint:\n      'Converts angle value in radians into value in degrees, using formula `degrees = (180 / PI ) * angle_in_radians`',\n  },\n  { text: 'distance', hint: 'Returns the distance between two points in meters.' },\n  { text: 'endofday', hint: 'Returns the end of the day containing the date, shifted by an offset, if provided.' },\n  { text: 'endofmonth', hint: 'Returns the end of the month containing the date, shifted by an offset, if provided.' },\n  { text: 'endofweek', hint: 'Returns the end of the week containing the date, shifted by an offset, if provided.' },\n  { text: 'endofyear', hint: 'Returns the end of the year containing the date, shifted by an offset, if provided.' },\n  {\n    text: 'estimate_data_size',\n    hint: 'Returns an estimated data size of the selected columns of the tabular expression.',\n  },\n  { text: 'exp', hint: 'The base-e exponential function of x, which is e raised to the power x: e^x.' },\n  {\n    text: 'exp10',\n    hint: 'The base-10 exponential function of x, which is 10 raised to the power x: 10^x.  \\r\\n**Syntax**',\n  },\n  { text: 'exp2', hint: 'The base-2 exponential function of x, which is 2 raised to the power x: 2^x.' },\n  {\n    text: 'extent_id',\n    hint: 'Returns a unique identifier that identifies the data shard (\"extent\") that the current record resides in.',\n  },\n  {\n    text: 'extent_tags',\n    hint:\n      'Returns a dynamic array with the [tags](../management/extents-overview.md#extent-tagging) of the data shard (\"extent\") that the current record resides in.',\n  },\n  { text: 'extract', hint: 'Get a match for a [regular expression](./re2.md) from a text string.' },\n  { text: 'extract_all', hint: 'Get all matches for a [regular expression](./re2.md) from a text string.' },\n  { text: 'extractjson', hint: 'Get a specified element out of a JSON text using a path expression.' },\n  { text: 'floor', hint: 'An alias for [`bin()`](binfunction.md).' },\n  { text: 'format_datetime', hint: 'Formats a datetime parameter based on the format pattern parameter.' },\n  { text: 'format_timespan', hint: 'Formats a timespan parameter based on the format pattern parameter.' },\n  { text: 'gamma', hint: 'Computes [gamma function](https://en.wikipedia.org/wiki/Gamma_function)' },\n  { text: 'getmonth', hint: 'Get the month number (1-12) from a datetime.' },\n  { text: 'gettype', hint: 'Returns the runtime type of its single argument.' },\n  { text: 'getyear', hint: 'Returns the year part of the `datetime` argument.' },\n  { text: 'hash', hint: 'Returns a hash value for the input value.' },\n  { text: 'hash_sha256', hint: 'Returns a sha256 hash value for the input value.' },\n  { text: 'hll', hint: 'Calculates the Intermediate results of [dcount](dcount-aggfunction.md) across the group.' },\n  {\n    text: 'hll_merge',\n    hint: 'Merges hll results (scalar version of the aggregate version [`hll_merge()`](hll-merge-aggfunction.md)).',\n  },\n  { text: 'hourofday', hint: 'Returns the integer number representing the hour number of the given date' },\n  {\n    text: 'iff',\n    hint:\n      'Evaluates the first argument (the predicate), and returns the value of either the second or third arguments, depending on whether the predicate evaluated to `true` (second) or `false` (third).',\n  },\n  {\n    text: 'iif',\n    hint:\n      'Evaluates the first argument (the predicate), and returns the value of either the second or third arguments, depending on whether the predicate evaluated to `true` (second) or `false` (third).',\n  },\n  {\n    text: 'indexof',\n    hint: 'Function reports the zero-based index of the first occurrence of a specified string within input string.',\n  },\n  { text: 'ingestion_time', hint: \"Retrieves the record's `$IngestionTime` hidden `datetime` column, or null.\" },\n  {\n    text: 'iscolumnexists',\n    hint:\n      'Returns a boolean value indicating if the given string argument exists in the schema produced by the preceding tabular operator.',\n  },\n  { text: 'isempty', hint: 'Returns `true` if the argument is an empty string or is null.' },\n  { text: 'isfinite', hint: 'Returns whether input is a finite value (is neither infinite nor NaN).' },\n  { text: 'isinf', hint: 'Returns whether input is an infinite (positive or negative) value.' },\n  { text: 'isnan', hint: 'Returns whether input is Not-a-Number (NaN) value.' },\n  { text: 'isnotempty', hint: 'Returns `true` if the argument is not an empty string nor it is a null.' },\n  { text: 'isnotnull', hint: 'Returns `true` if the argument is not null.' },\n  {\n    text: 'isnull',\n    hint:\n      'Evaluates its sole argument and returns a `bool` value indicating if the argument evaluates to a null value.',\n  },\n  { text: 'log', hint: 'Returns the natural logarithm function.' },\n  { text: 'log10', hint: 'Returns the common (base-10) logarithm function.' },\n  { text: 'log2', hint: 'Returns the base-2 logarithm function.' },\n  {\n    text: 'loggamma',\n    hint: 'Computes log of absolute value of the [gamma function](https://en.wikipedia.org/wiki/Gamma_function)',\n  },\n  {\n    text: 'make_datetime',\n    hint: 'Creates a [datetime](./scalar-data-types/datetime.md) scalar value from the specified date and time.',\n  },\n  {\n    text: 'make_dictionary',\n    hint: 'Returns a `dynamic` (JSON) property-bag (dictionary) of all the values of *Expr* in the group.',\n  },\n  { text: 'make_string', hint: 'Returns the string generated by the Unicode characters.' },\n  {\n    text: 'make_timespan',\n    hint: 'Creates a [timespan](./scalar-data-types/timespan.md) scalar value from the specified time period.',\n  },\n  { text: 'makelist', hint: 'Returns a `dynamic` (JSON) array of all the values of *Expr* in the group.' },\n  {\n    text: 'makeset',\n    hint: 'Returns a `dynamic` (JSON) array of the set of distinct values that *Expr* takes in the group.',\n  },\n  {\n    text: 'materialize',\n    hint:\n      'Allows caching a sub-query result during the time of query execution in a way that other subqueries can reference the partial result.',\n  },\n  { text: 'max', hint: 'Returns the maximum value across the group.' },\n  { text: 'max_of', hint: 'Returns the maximum value of several evaluated numeric expressions.' },\n  {\n    text: 'merge_tdigests',\n    hint:\n      'Merges tdigest results (scalar version of the aggregate version [`merge_tdigests()`](merge-tdigests-aggfunction.md)).',\n  },\n  { text: 'min', hint: 'Returns the minimum value agross the group.' },\n  { text: 'min_of', hint: 'Returns the minimum value of several evaluated numeric expressions.' },\n  { text: 'monthofyear', hint: 'Returns the integer number represents the month number of the given year.' },\n  {\n    text: 'next',\n    hint:\n      'Returns the value of a column in a row that it at some offset following the\\r\\ncurrent row in a [serialized row set](./windowsfunctions.md#serialized-row-set).',\n  },\n  { text: 'not', hint: 'Reverses the value of its `bool` argument.' },\n  {\n    text: 'now',\n    hint:\n      'Returns the current UTC clock time, optionally offset by a given timespan.\\r\\nThis function can be used multiple times in a statement and the clock time being referenced will be the same for all instances.',\n  },\n  { text: 'pack', hint: 'Creates a `dynamic` object (property bag) from a list of names and values.' },\n  {\n    text: 'pack_all',\n    hint: 'Creates a `dynamic` object (property bag) from all the columns of the tabular expression.',\n  },\n  { text: 'pack_array', hint: 'Packs all input values into a dynamic array.' },\n  { text: 'parse_ipv4', hint: 'Converts input to integer (signed 64-bit) number representation.' },\n  {\n    text: 'parse_json',\n    hint:\n      'Interprets a `string` as a [JSON value](https://json.org/)) and returns the value as [`dynamic`](./scalar-data-types/dynamic.md). \\r\\nIt is superior to using [extractjson() function](./extractjsonfunction.md)\\r\\nwhen you need to extract more than one element of a JSON compound object.',\n  },\n  {\n    text: 'parse_path',\n    hint:\n      'Parses a file path `string` and returns a [`dynamic`](./scalar-data-types/dynamic.md) object that contains the following parts of the path: \\r\\nScheme, RootPath, DirectoryPath, DirectoryName, FileName, Extension, AlternateDataStreamName.\\r\\nIn addition to the simple paths with both types of slashes, supports paths with schemas (e.g. \"file://...\"), shared paths (e.g. \"\\\\\\\\shareddrive\\\\users...\"), long paths (e.g \"\\\\\\\\?\\\\C:...\"\"), alternate data streams (e.g. \"file1.exe:file2.exe\")',\n  },\n  {\n    text: 'parse_url',\n    hint:\n      'Parses an absolute URL `string` and returns a [`dynamic`](./scalar-data-types/dynamic.md) object contains all parts of the URL (Scheme, Host, Port, Path, Username, Password, Query Parameters, Fragment).',\n  },\n  {\n    text: 'parse_urlquery',\n    hint:\n      'Parses a url query `string` and returns a [`dynamic`](./scalar-data-types/dynamic.md) object contains the Query parameters.',\n  },\n  {\n    text: 'parse_user_agent',\n    hint:\n      \"Interprets a user-agent string, which identifies the user's browser and provides certain system details to servers hosting the websites the user visits. The result is returned as [`dynamic`](./scalar-data-types/dynamic.md).\",\n  },\n  { text: 'parse_version', hint: 'Converts input string representation of version to a comparable decimal number.' },\n  {\n    text: 'parse_xml',\n    hint:\n      'Interprets a `string` as a XML value, converts the value to a [JSON value](https://json.org/) and returns the value as  [`dynamic`](./scalar-data-types/dynamic.md).',\n  },\n  {\n    text: 'percentile',\n    hint:\n      'Returns an estimate for the specified [nearest-rank percentile](#nearest-rank-percentile) of the population defined by *Expr*. \\r\\nThe accuracy depends on the density of population in the region of the percentile.',\n  },\n  {\n    text: 'percentile_tdigest',\n    hint:\n      'Calculates the percentile result from tdigest results (which was generated by [tdigest](tdigest-aggfunction.md) or [merge-tdigests](merge-tdigests-aggfunction.md))',\n  },\n  {\n    text: 'percentrank_tdigest',\n    hint:\n      \"Calculates the approximate rank of the value in a set where rank is expressed as percentage of set's size. \\r\\nThis function can be viewed as the inverse of the percentile.\",\n  },\n  { text: 'pi', hint: 'Returns the constant value of Pi (π).' },\n  { text: 'point', hint: 'Returns a dynamic array representation of a point.' },\n  { text: 'pow', hint: 'Returns a result of raising to power' },\n  {\n    text: 'prev',\n    hint:\n      'Returns the value of a column in a row that it at some offset prior to the\\r\\ncurrent row in a [serialized row set](./windowsfunctions.md#serialized-row-set).',\n  },\n  {\n    text: 'radians',\n    hint:\n      'Converts angle value in degrees into value in radians, using formula `radians = (PI / 180 ) * angle_in_degrees`',\n  },\n  { text: 'rand', hint: 'Returns a random number.' },\n  { text: 'range', hint: 'Generates a dynamic array holding a series of equally-spaced values.' },\n  { text: 'repeat', hint: 'Generates a dynamic array holding a series of equal values.' },\n  { text: 'replace', hint: 'Replace all regex matches with another string.' },\n  { text: 'reverse', hint: 'Function makes reverse of input string.' },\n  { text: 'round', hint: 'Returns the rounded source to the specified precision.' },\n  {\n    text: 'row_cumsum',\n    hint:\n      'Calculates the cumulative sum of a column in a [serialized row set](./windowsfunctions.md#serialized-row-set).',\n  },\n  {\n    text: 'row_number',\n    hint:\n      \"Returns the current row's index in a [serialized row set](./windowsfunctions.md#serialized-row-set).\\r\\nThe row index starts by default at `1` for the first row, and is incremented by `1` for each additional row.\\r\\nOptionally, the row index can start at a different value than `1`.\\r\\nAdditionally, the row index may be reset according to some provided predicate.\",\n  },\n  { text: 'series_add', hint: 'Calculates the element-wise addition of two numeric series inputs.' },\n  { text: 'series_decompose', hint: 'Applies a decomposition transformation on a series.' },\n  {\n    text: 'series_decompose_anomalies',\n    hint:\n      'Anomaly Detection based on series decomposition (refer to [series_decompose()](series-decomposefunction.md))',\n  },\n  { text: 'series_decompose_forecast', hint: 'Forecast based on series decomposition.' },\n  { text: 'series_divide', hint: 'Calculates the element-wise division of two numeric series inputs.' },\n  {\n    text: 'series_equals',\n    hint: 'Calculates the element-wise equals (`==`) logic operation of two numeric series inputs.',\n  },\n  { text: 'series_fill_backward', hint: 'Performs backward fill interpolation of missing values in a series.' },\n  { text: 'series_fill_const', hint: 'Replaces missing values in a series with a specified constant value.' },\n  { text: 'series_fill_forward', hint: 'Performs forward fill interpolation of missing values in a series.' },\n  { text: 'series_fill_linear', hint: 'Performs linear interpolation of missing values in a series.' },\n  { text: 'series_fir', hint: 'Applies a Finite Impulse Response filter on a series.' },\n  {\n    text: 'series_fit_2lines',\n    hint: 'Applies two segments linear regression on a series, returning multiple columns.',\n  },\n  {\n    text: 'series_fit_2lines_dynamic',\n    hint: 'Applies two segments linear regression on a series, returning dynamic object.',\n  },\n  { text: 'series_fit_line', hint: 'Applies linear regression on a series, returning multiple columns.' },\n  { text: 'series_fit_line_dynamic', hint: 'Applies linear regression on a series, returning dynamic object.' },\n  {\n    text: 'series_greater',\n    hint: 'Calculates the element-wise greater (`>`) logic operation of two numeric series inputs.',\n  },\n  {\n    text: 'series_greater_equals',\n    hint: 'Calculates the element-wise greater or equals (`>=`) logic operation of two numeric series inputs.',\n  },\n  { text: 'series_iir', hint: 'Applies a Infinite Impulse Response filter on a series.' },\n  { text: 'series_less', hint: 'Calculates the element-wise less (`<`) logic operation of two numeric series inputs.' },\n  {\n    text: 'series_less_equals',\n    hint: 'Calculates the element-wise less or equal (`<=`) logic operation of two numeric series inputs.',\n  },\n  { text: 'series_multiply', hint: 'Calculates the element-wise multiplication of two numeric series inputs.' },\n  {\n    text: 'series_not_equals',\n    hint: 'Calculates the element-wise not equals (`!=`) logic operation of two numeric series inputs.',\n  },\n  { text: 'series_outliers', hint: 'Scores anomaly points in a series.' },\n  { text: 'series_periods_detect', hint: 'Finds the most significant periods that exist in a time series.' },\n  {\n    text: 'series_periods_validate',\n    hint: 'Checks whether a time series contains periodic patterns of given lengths.',\n  },\n  {\n    text: 'series_seasonal',\n    hint: 'Calculates the seasonal component of a series according to the detected or given seasonal period.',\n  },\n  { text: 'series_stats', hint: 'Returns statistics for a series in multiple columns.' },\n  { text: 'series_stats_dynamic', hint: 'Returns statistics for a series in dynamic object.' },\n  { text: 'series_subtract', hint: 'Calculates the element-wise subtraction of two numeric series inputs.' },\n  { text: 'sign', hint: 'Sign of a numeric expression' },\n  { text: 'sin', hint: 'Returns the sine function.' },\n  {\n    text: 'split',\n    hint:\n      'Splits a given string according to a given delimiter and returns a string array with the contained substrings.',\n  },\n  { text: 'sqrt', hint: 'Returns the square root function.' },\n  { text: 'startofday', hint: 'Returns the start of the day containing the date, shifted by an offset, if provided.' },\n  {\n    text: 'startofmonth',\n    hint: 'Returns the start of the month containing the date, shifted by an offset, if provided.',\n  },\n  {\n    text: 'startofweek',\n    hint: 'Returns the start of the week containing the date, shifted by an offset, if provided.',\n  },\n  {\n    text: 'startofyear',\n    hint: 'Returns the start of the year containing the date, shifted by an offset, if provided.',\n  },\n  {\n    text: 'stdev',\n    hint:\n      'Calculates the standard deviation of *Expr* across the group, considering the group as a [sample](https://en.wikipedia.org/wiki/Sample_%28statistics%29).',\n  },\n  {\n    text: 'stdevif',\n    hint:\n      'Calculates the [stdev](stdev-aggfunction.md) of *Expr* across the group for which *Predicate* evaluates to `true`.',\n  },\n  {\n    text: 'stdevp',\n    hint:\n      'Calculates the standard deviation of *Expr* across the group, considering the group as a [population](https://en.wikipedia.org/wiki/Statistical_population).',\n  },\n  { text: 'strcat', hint: 'Concatenates between 1 and 64 arguments.' },\n  { text: 'strcat_array', hint: 'Creates a concatenated string of array values using specified delimiter.' },\n  {\n    text: 'strcat_delim',\n    hint: 'Concatenates between 2 and 64 arguments, with delimiter, provided as first argument.',\n  },\n  { text: 'strcmp', hint: 'Compares two strings.' },\n  { text: 'string_size', hint: 'Returns the size, in bytes, of the input string.' },\n  { text: 'strlen', hint: 'Returns the length, in characters, of the input string.' },\n  { text: 'strrep', hint: 'Repeats given [string](./scalar-data-types/string.md) provided amount of times.' },\n  {\n    text: 'substring',\n    hint: 'Extracts a substring from a source string starting from some index to the end of the string.',\n  },\n  { text: 'sum', hint: 'Calculates the sum of *Expr* across the group.' },\n  { text: 'sumif', hint: 'Returns a sum of *Expr* for which *Predicate* evaluates to `true`.' },\n  { text: 'table', hint: 'References specific table using an query-time evaluated string-expression.' },\n  { text: 'tan', hint: 'Returns the tangent function.' },\n  {\n    text: 'tdigest',\n    hint: 'Calculates the Intermediate results of [`percentiles()`](percentiles-aggfunction.md) across the group.',\n  },\n  {\n    text: 'tdigest_merge',\n    hint:\n      'Merges tdigest results (scalar version of the aggregate version [`tdigest_merge()`](tdigest-merge-aggfunction.md)).',\n  },\n  { text: 'tobool', hint: 'Converts input to boolean (signed 8-bit) representation.' },\n  { text: 'todatetime', hint: 'Converts input to [datetime](./scalar-data-types/datetime.md) scalar.' },\n  { text: 'todecimal', hint: 'Converts input to decimal number representation.' },\n  {\n    text: 'todouble',\n    hint: 'Converts the input to a value of type `real`. (`todouble()` and `toreal()` are synonyms.)',\n  },\n  {\n    text: 'todynamic',\n    hint:\n      'Interprets a `string` as a [JSON value](https://json.org/) and returns the value as [`dynamic`](./scalar-data-types/dynamic.md).',\n  },\n  { text: 'toguid', hint: 'Converts input to [`guid`](./scalar-data-types/guid.md) representation.' },\n  { text: 'tohex', hint: 'Converts input to a hexadecimal string.' },\n  { text: 'toint', hint: 'Converts input to integer (signed 32-bit) number representation.' },\n  { text: 'tolong', hint: 'Converts input to long (signed 64-bit) number representation.' },\n  { text: 'tolower', hint: 'Converts input string to lower case.' },\n  { text: 'toscalar', hint: 'Returns a scalar constant value of the evaluated expression.' },\n  { text: 'tostring', hint: 'Converts input to a string representation.' },\n  { text: 'totimespan', hint: 'Converts input  to [timespan](./scalar-data-types/timespan.md) scalar.' },\n  { text: 'toupper', hint: 'Converts a string to upper case.' },\n  {\n    text: 'translate',\n    hint:\n      \"Replaces a set of characters ('searchList') with another set of characters ('replacementList') in a given a string.\\r\\nThe function searches for characters in the 'searchList' and replaces them with the corresponding characters in 'replacementList'\",\n  },\n  { text: 'treepath', hint: 'Enumerates all the path expressions that identify leaves in a dynamic object.' },\n  { text: 'trim', hint: 'Removes all leading and trailing matches of the specified regular expression.' },\n  { text: 'trim_end', hint: 'Removes trailing match of the specified regular expression.' },\n  { text: 'trim_start', hint: 'Removes leading match of the specified regular expression.' },\n  { text: 'url_decode', hint: 'The function converts encoded URL into a to regular URL representation.' },\n  {\n    text: 'url_encode',\n    hint: 'The function converts characters of the input URL into a format that can be transmitted over the Internet.',\n  },\n  {\n    text: 'variance',\n    hint:\n      'Calculates the variance of *Expr* across the group, considering the group as a [sample](https://en.wikipedia.org/wiki/Sample_%28statistics%29).',\n  },\n  {\n    text: 'varianceif',\n    hint:\n      'Calculates the [variance](variance-aggfunction.md) of *Expr* across the group for which *Predicate* evaluates to `true`.',\n  },\n  {\n    text: 'variancep',\n    hint:\n      'Calculates the variance of *Expr* across the group, considering the group as a [population](https://en.wikipedia.org/wiki/Statistical_population).',\n  },\n  { text: 'weekofyear', hint: 'Returns the integer number represents the week number.' },\n  {\n    text: 'welch_test',\n    hint: 'Computes the p_value of the [Welch-test function](https://en.wikipedia.org/wiki/Welch%27s_t-test)',\n  },\n  {\n    text: 'zip',\n    hint:\n      'The `zip` function accepts any number of `dynamic` arrays, and returns an\\r\\narray whose elements are each an array holding the elements of the input\\r\\narrays of the same index.',\n  },\n];\n\nexport const KEYWORDS = [\n  'by',\n  'on',\n  'contains',\n  'notcontains',\n  'containscs',\n  'notcontainscs',\n  'startswith',\n  'has',\n  'matches',\n  'regex',\n  'true',\n  'false',\n  'and',\n  'or',\n  'typeof',\n  'int',\n  'string',\n  'date',\n  'datetime',\n  'time',\n  'long',\n  'real',\n  '​boolean',\n  'bool',\n];\n\nexport const grafanaMacros = [\n  {\n    text: '$__timeFilter',\n    display: '$__timeFilter()',\n    hint: 'Macro that uses the selected timerange in Grafana to filter the query.',\n  },\n  {\n    text: '$__timeTo',\n    display: '$__timeTo()',\n    hint: 'Returns the From datetime from the Grafana picker. Example: datetime(2018-06-05T20:09:58.907Z).',\n  },\n  {\n    text: '$__timeFrom',\n    display: '$__timeFrom()',\n    hint: 'Returns the From datetime from the Grafana picker. Example: datetime(2018-06-05T18:09:58.907Z).',\n  },\n  {\n    text: '$__escapeMulti',\n    display: '$__escapeMulti()',\n    hint: 'Macro to escape multi-value template variables that contain illegal characters.',\n  },\n  { text: '$__contains', display: '$__contains()', hint: 'Macro for multi-value template variables.' },\n];\n\n// Kusto operators\n// export const OPERATORS = ['+', '-', '*', '/', '>', '<', '==', '<>', '<=', '>=', '~', '!~'];\n\nexport const DURATION = ['SECONDS', 'MINUTES', 'HOURS', 'DAYS', 'WEEKS', 'MONTHS', 'YEARS'];\n\nconst tokenizer = {\n  comment: {\n    pattern: /(^|[^\\\\:])\\/\\/.*/,\n    lookbehind: true,\n    greedy: true,\n  },\n  'function-context': {\n    pattern: /[a-z0-9_]+\\([^)]*\\)?/i,\n    inside: {},\n  },\n  duration: {\n    pattern: new RegExp(`${DURATION.join('?|')}?`, 'i'),\n    alias: 'number',\n  },\n  builtin: new RegExp(`\\\\b(?:${functionTokens.map(f => f.text).join('|')})(?=\\\\s*\\\\()`, 'i'),\n  string: {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true,\n  },\n  keyword: new RegExp(`\\\\b(?:${KEYWORDS.join('|')}|${operatorTokens.map(f => f.text).join('|')}|\\\\*)\\\\b`, 'i'),\n  boolean: /\\b(?:true|false)\\b/,\n  number: /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n  operator: /-|\\+|\\*|\\/|>|<|==|<=?|>=?|<>|!~|~|=|\\|/,\n  punctuation: /[{};(),.:]/,\n  variable: /(\\[\\[(.+?)\\]\\])|(\\$(.+?))\\b/,\n};\n\ntokenizer['function-context'].inside = {\n  argument: {\n    pattern: /[a-z0-9_]+(?=:)/i,\n    alias: 'symbol',\n  },\n  duration: tokenizer.duration,\n  number: tokenizer.number,\n  builtin: tokenizer.builtin,\n  string: tokenizer.string,\n  variable: tokenizer.variable,\n};\n\n// console.log(tokenizer.builtin);\n\nexport default tokenizer;\n\n// function escapeRegExp(str: string): string {\n//   return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n// }\n","import _ from 'lodash';\nimport Plain from 'slate-plain-serializer';\n\nimport QueryField from './query_field';\nimport debounce from 'lodash/debounce';\nimport { DOMUtil } from '@grafana/ui';\nimport { Editor as CoreEditor } from 'slate';\n\nimport { KEYWORDS, functionTokens, operatorTokens, grafanaMacros } from './kusto/kusto';\n// import '../sass/editor.base.scss';\n\nconst TYPEAHEAD_DELAY = 100;\n\ninterface Suggestion {\n  text: string;\n  deleteBackwards?: number;\n  type?: string;\n}\n\ninterface SuggestionGroup {\n  label: string;\n  items: Suggestion[];\n  prefixMatch?: boolean;\n  skipFilter?: boolean;\n}\n\ninterface KustoSchema {\n  Databases: {\n    Default?: KustoDBSchema;\n  };\n  Plugins?: any[];\n}\n\ninterface KustoDBSchema {\n  Name?: string;\n  Functions?: any;\n  Tables?: any;\n}\n\nconst defaultSchema: any = () => ({\n  Databases: {\n    Default: {},\n  },\n});\n\nconst cleanText = (s: string) => s.replace(/[{}[\\]=\"(),!~+\\-*/^%]/g, '').trim();\nconst wrapText = (text: string) => ({ text });\n\nexport default class KustoQueryField extends QueryField {\n  fields: any;\n  events: any;\n  schema: KustoSchema;\n\n  constructor(props: any, context: any) {\n    super(props, context);\n    this.schema = defaultSchema();\n\n    this.onTypeahead = debounce(this.onTypeahead, TYPEAHEAD_DELAY);\n  }\n\n  componentDidMount() {\n    super.componentDidMount();\n    this.fetchSchema();\n  }\n\n  onTypeahead = (force = false) => {\n    const selection = window.getSelection();\n    if (selection.anchorNode) {\n      const wrapperNode = selection.anchorNode.parentElement;\n      if (wrapperNode === null) {\n        return;\n      }\n      const editorNode = wrapperNode.closest('.slate-query-field');\n      if (!editorNode || this.state.value.isBlurred) {\n        // Not inside this editor\n        return;\n      }\n\n      // DOM ranges\n      const range = selection.getRangeAt(0);\n      const text = selection.anchorNode.textContent;\n      if (text === null) {\n        return;\n      }\n      const offset = range.startOffset;\n      let prefix = cleanText(text.substr(0, offset));\n\n      // Model ranges\n      const modelOffset = this.state.value.anchorOffset;\n      const modelPrefix = this.state.value.anchorText.text.slice(0, modelOffset);\n\n      // Determine candidates by context\n      let suggestionGroups: SuggestionGroup[] = [];\n      const wrapperClasses = wrapperNode.classList;\n      let typeaheadContext: string | null = null;\n\n      // Built-in functions\n      if (wrapperClasses.contains('function-context')) {\n        typeaheadContext = 'context-function';\n        suggestionGroups = this.getColumnSuggestions();\n\n        // where\n      } else if (modelPrefix.match(/(where\\s(\\w+\\b)?$)/i)) {\n        typeaheadContext = 'context-where';\n        suggestionGroups = this.getColumnSuggestions();\n\n        // summarize by\n      } else if (modelPrefix.match(/(summarize\\s(\\w+\\b)?$)/i)) {\n        typeaheadContext = 'context-summarize';\n        suggestionGroups = this.getFunctionSuggestions();\n      } else if (modelPrefix.match(/(summarize\\s(.+\\s)?by\\s+([^,\\s]+,\\s*)*([^,\\s]+\\b)?$)/i)) {\n        typeaheadContext = 'context-summarize-by';\n        suggestionGroups = this.getColumnSuggestions();\n\n        // order by, top X by, ... by ...\n      } else if (modelPrefix.match(/(by\\s+([^,\\s]+,\\s*)*([^,\\s]+\\b)?$)/i)) {\n        typeaheadContext = 'context-by';\n        suggestionGroups = this.getColumnSuggestions();\n\n        // join\n      } else if (modelPrefix.match(/(on\\s(.+\\b)?$)/i)) {\n        typeaheadContext = 'context-join-on';\n        suggestionGroups = this.getColumnSuggestions();\n      } else if (modelPrefix.match(/(join\\s+(\\(\\s+)?(\\w+\\b)?$)/i)) {\n        typeaheadContext = 'context-join';\n        suggestionGroups = this.getTableSuggestions();\n\n        // distinct\n      } else if (modelPrefix.match(/(distinct\\s(.+\\b)?$)/i)) {\n        typeaheadContext = 'context-distinct';\n        suggestionGroups = this.getColumnSuggestions();\n\n        // database()\n      } else if (modelPrefix.match(/(database\\(\\\"(\\w+)\\\"\\)\\.(.+\\b)?$)/i)) {\n        typeaheadContext = 'context-database-table';\n        const db = this.getDBFromDatabaseFunction(modelPrefix);\n        console.log(db);\n        suggestionGroups = this.getTableSuggestions(db);\n        prefix = prefix.replace('.', '');\n\n        // new\n      } else if (normalizeQuery(Plain.serialize(this.state.value)).match(/^\\s*\\w*$/i)) {\n        typeaheadContext = 'context-new';\n        if (this.schema) {\n          suggestionGroups = this.getInitialSuggestions();\n        } else {\n          this.fetchSchema();\n          setTimeout(this.onTypeahead, 0);\n          return;\n        }\n\n        // built-in\n      } else if (prefix && !wrapperClasses.contains('argument') && !force) {\n        // Use only last typed word as a prefix for searching\n        if (modelPrefix.match(/\\s$/i)) {\n          prefix = '';\n          return;\n        }\n        prefix = getLastWord(prefix);\n        typeaheadContext = 'context-builtin';\n        suggestionGroups = this.getKeywordSuggestions();\n      } else if (force === true) {\n        typeaheadContext = 'context-builtin-forced';\n        if (modelPrefix.match(/\\s$/i)) {\n          prefix = '';\n        }\n        suggestionGroups = this.getKeywordSuggestions();\n      }\n\n      let results = 0;\n      prefix = prefix.toLowerCase();\n      const filteredSuggestions = suggestionGroups\n        .map(group => {\n          if (group.items && prefix && !group.skipFilter) {\n            group.items = group.items.filter(c => c.text.length >= prefix.length);\n            if (group.prefixMatch) {\n              group.items = group.items.filter(c => c.text.toLowerCase().indexOf(prefix) === 0);\n            } else {\n              group.items = group.items.filter(c => c.text.toLowerCase().indexOf(prefix) > -1);\n            }\n          }\n          results += group.items.length;\n          return group;\n        })\n        .filter(group => group.items.length > 0);\n\n      // console.log('onTypeahead', selection.anchorNode, wrapperClasses, text, offset, prefix, typeaheadContext);\n      // console.log('onTypeahead', prefix, typeaheadContext, force);\n\n      this.setState({\n        typeaheadPrefix: prefix,\n        typeaheadContext,\n        typeaheadText: text,\n        suggestions: results > 0 ? filteredSuggestions : [],\n      });\n    }\n  };\n\n  applyTypeahead = (editor: CoreEditor, suggestion: { text: any; type: string; deleteBackwards: any }): CoreEditor => {\n    const { typeaheadPrefix, typeaheadContext, typeaheadText } = this.state;\n    let suggestionText = suggestion.text || suggestion;\n    const move = 0;\n\n    // Modify suggestion based on context\n\n    const nextChar = DOMUtil.getNextCharacter();\n    if (suggestion.type === 'function') {\n      if (!nextChar || nextChar !== '(') {\n        suggestionText += '(';\n      }\n    } else if (typeaheadContext === 'context-function') {\n      if (!nextChar || nextChar !== ')') {\n        suggestionText += ')';\n      }\n    } else {\n      if (!nextChar || nextChar !== ' ') {\n        suggestionText += ' ';\n      }\n    }\n\n    // Remove the current, incomplete text and replace it with the selected suggestion\n    const backward = suggestion.deleteBackwards || typeaheadPrefix.length;\n    const text = cleanText(typeaheadText);\n    const suffixLength = text.length - typeaheadPrefix.length;\n    const offset = typeaheadText.indexOf(typeaheadPrefix);\n    const midWord = typeaheadPrefix && ((suffixLength > 0 && offset > -1) || suggestionText === typeaheadText);\n    const forward = midWord ? suffixLength + offset : 0;\n\n    this.resetTypeahead(() =>\n      editor\n        .deleteBackward(backward)\n        .deleteForward(forward)\n        .insertText(suggestionText)\n        .moveForward(move)\n        .focus()\n    );\n\n    return editor;\n  };\n\n  // private _getFieldsSuggestions(): SuggestionGroup[] {\n  //   return [\n  //     {\n  //       prefixMatch: true,\n  //       label: 'Fields',\n  //       items: this.fields.map(wrapText)\n  //     },\n  //     {\n  //       prefixMatch: true,\n  //       label: 'Variables',\n  //       items: this.props.templateVariables.map(wrapText)\n  //     }\n  //   ];\n  // }\n\n  // private _getAfterFromSuggestions(): SuggestionGroup[] {\n  //   return [\n  //     {\n  //       skipFilter: true,\n  //       label: 'Events',\n  //       items: this.events.map(wrapText)\n  //     },\n  //     {\n  //       prefixMatch: true,\n  //       label: 'Variables',\n  //       items: this.props.templateVariables\n  //         .map(wrapText)\n  //         .map(suggestion => {\n  //           suggestion.deleteBackwards = 0;\n  //           return suggestion;\n  //         })\n  //     }\n  //   ];\n  // }\n\n  // private _getAfterSelectSuggestions(): SuggestionGroup[] {\n  //   return [\n  //     {\n  //       prefixMatch: true,\n  //       label: 'Fields',\n  //       items: this.fields.map(wrapText)\n  //     },\n  //     {\n  //       prefixMatch: true,\n  //       label: 'Functions',\n  //       items: FUNCTIONS.map((s: any) => { s.type = 'function'; return s; })\n  //     },\n  //     {\n  //       prefixMatch: true,\n  //       label: 'Variables',\n  //       items: this.props.templateVariables.map(wrapText)\n  //     }\n  //   ];\n  // }\n\n  private getInitialSuggestions(): SuggestionGroup[] {\n    return this.getTableSuggestions();\n  }\n\n  private getKeywordSuggestions(): SuggestionGroup[] {\n    return [\n      {\n        prefixMatch: true,\n        label: 'Keywords',\n        items: KEYWORDS.map(wrapText),\n      },\n      {\n        prefixMatch: true,\n        label: 'Operators',\n        items: operatorTokens,\n      },\n      {\n        prefixMatch: true,\n        label: 'Functions',\n        items: functionTokens.map((s: any) => {\n          s.type = 'function';\n          return s;\n        }),\n      },\n      {\n        prefixMatch: true,\n        label: 'Macros',\n        items: grafanaMacros.map((s: any) => {\n          s.type = 'function';\n          return s;\n        }),\n      },\n      {\n        prefixMatch: true,\n        label: 'Tables',\n        items: _.map(this.schema.Databases.Default.Tables, (t: any) => ({ text: t.Name })),\n      },\n    ];\n  }\n\n  private getFunctionSuggestions(): SuggestionGroup[] {\n    return [\n      {\n        prefixMatch: true,\n        label: 'Functions',\n        items: functionTokens.map((s: any) => {\n          s.type = 'function';\n          return s;\n        }),\n      },\n      {\n        prefixMatch: true,\n        label: 'Macros',\n        items: grafanaMacros.map((s: any) => {\n          s.type = 'function';\n          return s;\n        }),\n      },\n    ];\n  }\n\n  getTableSuggestions(db = 'Default'): SuggestionGroup[] {\n    // @ts-ignore\n    if (this.schema.Databases[db]) {\n      return [\n        {\n          prefixMatch: true,\n          label: 'Tables',\n          // @ts-ignore\n          items: _.map(this.schema.Databases[db].Tables, (t: any) => ({ text: t.Name })),\n        },\n      ];\n    } else {\n      return [];\n    }\n  }\n\n  private getColumnSuggestions(): SuggestionGroup[] {\n    const table = this.getTableFromContext();\n    if (table) {\n      const tableSchema = this.schema.Databases.Default.Tables[table];\n      if (tableSchema) {\n        return [\n          {\n            prefixMatch: true,\n            label: 'Fields',\n            items: _.map(tableSchema.OrderedColumns, (f: any) => ({\n              text: f.Name,\n              hint: f.Type,\n            })),\n          },\n        ];\n      }\n    }\n    return [];\n  }\n\n  private getTableFromContext() {\n    const query = Plain.serialize(this.state.value);\n    const tablePattern = /^\\s*(\\w+)\\s*|/g;\n    const normalizedQuery = normalizeQuery(query);\n    const match = tablePattern.exec(normalizedQuery);\n    if (match && match.length > 1 && match[0] && match[1]) {\n      return match[1];\n    } else {\n      return null;\n    }\n  }\n\n  private getDBFromDatabaseFunction(prefix: string) {\n    const databasePattern = /database\\(\\\"(\\w+)\\\"\\)/gi;\n    const match = databasePattern.exec(prefix);\n    if (match && match.length > 1 && match[0] && match[1]) {\n      return match[1];\n    } else {\n      return null;\n    }\n  }\n\n  private async fetchSchema() {\n    let schema = await this.props.getSchema();\n    if (schema) {\n      if (schema.Type === 'AppInsights') {\n        schema = castSchema(schema);\n      }\n      this.schema = schema;\n    } else {\n      this.schema = defaultSchema();\n    }\n  }\n}\n\n/**\n * Cast schema from App Insights to default Kusto schema\n */\nfunction castSchema(schema: any) {\n  const defaultSchemaTemplate = defaultSchema();\n  defaultSchemaTemplate.Databases.Default = schema;\n  return defaultSchemaTemplate;\n}\n\nfunction normalizeQuery(query: string): string {\n  const commentPattern = /\\/\\/.*$/gm;\n  let normalizedQuery = query.replace(commentPattern, '');\n  normalizedQuery = normalizedQuery.replace('\\n', ' ');\n  return normalizedQuery;\n}\n\nfunction getLastWord(str: string): string {\n  const lastWordPattern = /(?:.*\\s)?([^\\s]+\\s*)$/gi;\n  const match = lastWordPattern.exec(str);\n  if (match && match.length > 1) {\n    return match[1];\n  }\n  return '';\n}\n","import KustoQueryField from './KustoQueryField';\nimport Kusto from './kusto/kusto';\n\nimport React, { Component } from 'react';\nimport coreModule from 'app/core/core_module';\n\ninterface EditorProps {\n  index: number;\n  placeholder?: string;\n  change: (value: string, index: number) => void;\n  variables: () => string[] | string[];\n  getSchema?: () => Promise<any>;\n  execute?: () => void;\n  query?: string;\n}\n\nclass Editor extends Component<EditorProps, any> {\n  static defaultProps = {\n    placeholder: 'Enter a query',\n  };\n\n  constructor(props: EditorProps) {\n    super(props);\n    this.state = {\n      edited: false,\n      query: props.query || '',\n    };\n  }\n\n  onChangeQuery = (value: any) => {\n    const { index, change } = this.props;\n    const { query } = this.state;\n    const edited = query !== value;\n    this.setState({ edited, query: value });\n    if (change) {\n      change(value, index);\n    }\n  };\n\n  onPressEnter = () => {\n    const { execute } = this.props;\n    if (execute) {\n      execute();\n    }\n  };\n\n  render() {\n    const { variables, getSchema, placeholder } = this.props;\n    const { edited, query } = this.state;\n\n    return (\n      <div className=\"gf-form-input\" style={{ height: 'auto' }}>\n        <KustoQueryField\n          initialQuery={edited ? null : query}\n          onPressEnter={this.onPressEnter}\n          onQueryChange={this.onChangeQuery}\n          prismLanguage=\"kusto\"\n          prismDefinition={Kusto}\n          placeholder={placeholder}\n          templateVariables={variables}\n          getSchema={getSchema}\n        />\n      </div>\n    );\n  }\n}\n\ncoreModule.directive('kustoEditor', [\n  'reactDirective',\n  reactDirective => {\n    return reactDirective(Editor, [\n      'change',\n      'database',\n      'execute',\n      'query',\n      'variables',\n      'placeholder',\n      ['getSchema', { watchDepth: 'reference' }],\n    ]);\n  },\n]);\n","import _ from 'lodash';\nimport { QueryCtrl } from 'app/plugins/sdk';\n// import './css/query_editor.css';\nimport TimegrainConverter from './time_grain_converter';\nimport './editor/editor_component';\nimport kbn from 'app/core/utils/kbn';\n\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport { auto } from 'angular';\nimport { DataFrame } from '@grafana/data';\n\nexport interface ResultFormat {\n  text: string;\n  value: string;\n}\n\nexport class AzureMonitorQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  defaultDropdownValue = 'select';\n\n  target: {\n    refId: string;\n    queryType: string;\n    subscription: string;\n    azureMonitor: {\n      resourceGroup: string;\n      resourceName: string;\n      metricDefinition: string;\n      metricNamespace: string;\n      metricName: string;\n      dimensionFilter: string;\n      timeGrain: string;\n      timeGrainUnit: string;\n      timeGrains: Array<{ text: string; value: string }>;\n      allowedTimeGrainsMs: number[];\n      dimensions: any[];\n      dimension: any;\n      aggregation: string;\n      aggOptions: string[];\n    };\n    azureLogAnalytics: {\n      query: string;\n      resultFormat: string;\n      workspace: string;\n    };\n    appInsights: {\n      metricName: string;\n      rawQuery: boolean;\n      rawQueryString: string;\n      groupBy: string;\n      timeGrainType: string;\n      xaxis: string;\n      yaxis: string;\n      spliton: string;\n      aggOptions: string[];\n      aggregation: string;\n      groupByOptions: string[];\n      timeGrainUnit: string;\n      timeGrain: string;\n    };\n  };\n\n  defaults = {\n    queryType: 'Azure Monitor',\n    azureMonitor: {\n      resourceGroup: this.defaultDropdownValue,\n      metricDefinition: this.defaultDropdownValue,\n      resourceName: this.defaultDropdownValue,\n      metricNamespace: this.defaultDropdownValue,\n      metricName: this.defaultDropdownValue,\n      dimensionFilter: '*',\n      timeGrain: 'auto',\n    },\n    azureLogAnalytics: {\n      query: [\n        '//change this example to create your own time series query',\n        '<table name>                                                              ' +\n          '//the table to query (e.g. Usage, Heartbeat, Perf)',\n        '| where $__timeFilter(TimeGenerated)                                      ' +\n          '//this is a macro used to show the full chart’s time range, choose the datetime column here',\n        '| summarize count() by <group by column>, bin(TimeGenerated, $__interval) ' +\n          '//change “group by column” to a column in your table, such as “Computer”. ' +\n          'The $__interval macro is used to auto-select the time grain. Can also use 1h, 5m etc.',\n        '| order by TimeGenerated asc',\n      ].join('\\n'),\n      resultFormat: 'time_series',\n      workspace:\n        this.datasource && this.datasource.azureLogAnalyticsDatasource\n          ? this.datasource.azureLogAnalyticsDatasource.defaultOrFirstWorkspace\n          : '',\n    },\n    appInsights: {\n      metricName: this.defaultDropdownValue,\n      rawQuery: false,\n      rawQueryString: '',\n      groupBy: 'none',\n      timeGrainType: 'auto',\n      xaxis: 'timestamp',\n      yaxis: '',\n      spliton: '',\n    },\n  };\n\n  resultFormats: ResultFormat[];\n  workspaces: any[];\n  showHelp: boolean;\n  showLastQuery: boolean;\n  lastQuery: string;\n  lastQueryError?: string;\n  subscriptions: Array<{ text: string; value: string }>;\n\n  /** @ngInject */\n  constructor($scope: any, $injector: auto.IInjectorService, private templateSrv: TemplateSrv) {\n    super($scope, $injector);\n\n    _.defaultsDeep(this.target, this.defaults);\n\n    this.migrateTimeGrains();\n\n    this.migrateToFromTimes();\n\n    this.migrateToDefaultNamespace();\n\n    this.panelCtrl.events.on('data-received', this.onDataReceived.bind(this), $scope);\n    this.panelCtrl.events.on('data-error', this.onDataError.bind(this), $scope);\n    this.resultFormats = [{ text: 'Time series', value: 'time_series' }, { text: 'Table', value: 'table' }];\n    this.getSubscriptions();\n    if (this.target.queryType === 'Azure Log Analytics') {\n      this.getWorkspaces();\n    }\n  }\n\n  onDataReceived(dataList: DataFrame[]) {\n    this.lastQueryError = undefined;\n    this.lastQuery = '';\n\n    const anySeriesFromQuery: any = _.find(dataList, { refId: this.target.refId });\n    if (anySeriesFromQuery && anySeriesFromQuery.meta) {\n      this.lastQuery = anySeriesFromQuery.meta.query;\n    }\n  }\n\n  onDataError(err: any) {\n    this.handleQueryCtrlError(err);\n  }\n\n  handleQueryCtrlError(err: any) {\n    if (err.query && err.query.refId && err.query.refId !== this.target.refId) {\n      return;\n    }\n\n    if (err.error && err.error.data && err.error.data.error && err.error.data.error.innererror) {\n      if (err.error.data.error.innererror.innererror) {\n        this.lastQueryError = err.error.data.error.innererror.innererror.message;\n      } else {\n        this.lastQueryError = err.error.data.error.innererror.message;\n      }\n    } else if (err.error && err.error.data && err.error.data.error) {\n      this.lastQueryError = err.error.data.error.message;\n    } else if (err.error && err.error.data) {\n      this.lastQueryError = err.error.data.message;\n    } else if (err.data && err.data.error) {\n      this.lastQueryError = err.data.error.message;\n    } else if (err.data && err.data.message) {\n      this.lastQueryError = err.data.message;\n    } else {\n      this.lastQueryError = err;\n    }\n  }\n\n  migrateTimeGrains() {\n    if (this.target.azureMonitor.timeGrainUnit) {\n      if (this.target.azureMonitor.timeGrain !== 'auto') {\n        this.target.azureMonitor.timeGrain = TimegrainConverter.createISO8601Duration(\n          this.target.azureMonitor.timeGrain,\n          this.target.azureMonitor.timeGrainUnit\n        );\n      }\n\n      delete this.target.azureMonitor.timeGrainUnit;\n      this.onMetricNameChange();\n    }\n\n    if (\n      this.target.azureMonitor.timeGrains &&\n      this.target.azureMonitor.timeGrains.length > 0 &&\n      (!this.target.azureMonitor.allowedTimeGrainsMs || this.target.azureMonitor.allowedTimeGrainsMs.length === 0)\n    ) {\n      this.target.azureMonitor.allowedTimeGrainsMs = this.convertTimeGrainsToMs(this.target.azureMonitor.timeGrains);\n    }\n  }\n\n  migrateToFromTimes() {\n    this.target.azureLogAnalytics.query = this.target.azureLogAnalytics.query.replace(/\\$__from\\s/gi, '$__timeFrom() ');\n    this.target.azureLogAnalytics.query = this.target.azureLogAnalytics.query.replace(/\\$__to\\s/gi, '$__timeTo() ');\n  }\n\n  async migrateToDefaultNamespace() {\n    if (\n      this.target.azureMonitor.metricNamespace &&\n      this.target.azureMonitor.metricNamespace !== this.defaultDropdownValue &&\n      this.target.azureMonitor.metricDefinition\n    ) {\n      return;\n    }\n\n    this.target.azureMonitor.metricNamespace = this.target.azureMonitor.metricDefinition;\n  }\n\n  replace(variable: string) {\n    return this.templateSrv.replace(variable, this.panelCtrl.panel.scopedVars);\n  }\n\n  onQueryTypeChange() {\n    if (this.target.queryType === 'Azure Log Analytics') {\n      return this.getWorkspaces();\n    }\n  }\n\n  getSubscriptions() {\n    if (!this.datasource.azureMonitorDatasource.isConfigured()) {\n      return;\n    }\n\n    return this.datasource.azureMonitorDatasource.getSubscriptions().then((subs: any) => {\n      this.subscriptions = subs;\n      if (!this.target.subscription && this.target.queryType === 'Azure Monitor') {\n        this.target.subscription = this.datasource.azureMonitorDatasource.subscriptionId;\n      } else if (!this.target.subscription && this.target.queryType === 'Azure Log Analytics') {\n        this.target.subscription = this.datasource.azureLogAnalyticsDatasource.logAnalyticsSubscriptionId;\n      }\n\n      if (!this.target.subscription && this.subscriptions.length > 0) {\n        this.target.subscription = this.subscriptions[0].value;\n      }\n\n      return this.subscriptions;\n    });\n  }\n\n  onSubscriptionChange() {\n    if (this.target.queryType === 'Azure Log Analytics') {\n      return this.getWorkspaces();\n    }\n\n    if (this.target.queryType === 'Azure Monitor') {\n      this.target.azureMonitor.resourceGroup = this.defaultDropdownValue;\n      this.target.azureMonitor.metricDefinition = this.defaultDropdownValue;\n      this.target.azureMonitor.resourceName = this.defaultDropdownValue;\n      this.target.azureMonitor.metricName = this.defaultDropdownValue;\n      this.target.azureMonitor.aggregation = '';\n      this.target.azureMonitor.timeGrains = [];\n      this.target.azureMonitor.timeGrain = '';\n      this.target.azureMonitor.dimensions = [];\n      this.target.azureMonitor.dimension = '';\n    }\n  }\n\n  /* Azure Monitor Section */\n  getResourceGroups(query: any) {\n    if (this.target.queryType !== 'Azure Monitor' || !this.datasource.azureMonitorDatasource.isConfigured()) {\n      return;\n    }\n\n    return this.datasource\n      .getResourceGroups(\n        this.replace(this.target.subscription || this.datasource.azureMonitorDatasource.subscriptionId)\n      )\n      .catch(this.handleQueryCtrlError.bind(this));\n  }\n\n  getMetricDefinitions(query: any) {\n    if (\n      this.target.queryType !== 'Azure Monitor' ||\n      !this.target.azureMonitor.resourceGroup ||\n      this.target.azureMonitor.resourceGroup === this.defaultDropdownValue\n    ) {\n      return;\n    }\n    return this.datasource\n      .getMetricDefinitions(\n        this.replace(this.target.subscription || this.datasource.azureMonitorDatasource.subscriptionId),\n        this.replace(this.target.azureMonitor.resourceGroup)\n      )\n      .catch(this.handleQueryCtrlError.bind(this));\n  }\n\n  getResourceNames(query: any) {\n    if (\n      this.target.queryType !== 'Azure Monitor' ||\n      !this.target.azureMonitor.resourceGroup ||\n      this.target.azureMonitor.resourceGroup === this.defaultDropdownValue ||\n      !this.target.azureMonitor.metricDefinition ||\n      this.target.azureMonitor.metricDefinition === this.defaultDropdownValue\n    ) {\n      return;\n    }\n\n    return this.datasource\n      .getResourceNames(\n        this.replace(this.target.subscription || this.datasource.azureMonitorDatasource.subscriptionId),\n        this.replace(this.target.azureMonitor.resourceGroup),\n        this.replace(this.target.azureMonitor.metricDefinition)\n      )\n      .catch(this.handleQueryCtrlError.bind(this));\n  }\n\n  getMetricNamespaces() {\n    if (\n      this.target.queryType !== 'Azure Monitor' ||\n      !this.target.azureMonitor.resourceGroup ||\n      this.target.azureMonitor.resourceGroup === this.defaultDropdownValue ||\n      !this.target.azureMonitor.metricDefinition ||\n      this.target.azureMonitor.metricDefinition === this.defaultDropdownValue ||\n      !this.target.azureMonitor.resourceName ||\n      this.target.azureMonitor.resourceName === this.defaultDropdownValue\n    ) {\n      return;\n    }\n\n    return this.datasource\n      .getMetricNamespaces(\n        this.replace(this.target.subscription || this.datasource.azureMonitorDatasource.subscriptionId),\n        this.replace(this.target.azureMonitor.resourceGroup),\n        this.replace(this.target.azureMonitor.metricDefinition),\n        this.replace(this.target.azureMonitor.resourceName)\n      )\n      .catch(this.handleQueryCtrlError.bind(this));\n  }\n\n  getMetricNames() {\n    if (\n      this.target.queryType !== 'Azure Monitor' ||\n      !this.target.azureMonitor.resourceGroup ||\n      this.target.azureMonitor.resourceGroup === this.defaultDropdownValue ||\n      !this.target.azureMonitor.metricDefinition ||\n      this.target.azureMonitor.metricDefinition === this.defaultDropdownValue ||\n      !this.target.azureMonitor.resourceName ||\n      this.target.azureMonitor.resourceName === this.defaultDropdownValue ||\n      !this.target.azureMonitor.metricNamespace ||\n      this.target.azureMonitor.metricNamespace === this.defaultDropdownValue\n    ) {\n      return;\n    }\n\n    return this.datasource\n      .getMetricNames(\n        this.replace(this.target.subscription || this.datasource.azureMonitorDatasource.subscriptionId),\n        this.replace(this.target.azureMonitor.resourceGroup),\n        this.replace(this.target.azureMonitor.metricDefinition),\n        this.replace(this.target.azureMonitor.resourceName),\n        this.replace(this.target.azureMonitor.metricNamespace)\n      )\n      .catch(this.handleQueryCtrlError.bind(this));\n  }\n\n  onResourceGroupChange() {\n    this.target.azureMonitor.metricDefinition = this.defaultDropdownValue;\n    this.target.azureMonitor.resourceName = this.defaultDropdownValue;\n    this.target.azureMonitor.metricNamespace = this.defaultDropdownValue;\n    this.target.azureMonitor.metricName = this.defaultDropdownValue;\n    this.target.azureMonitor.aggregation = '';\n    this.target.azureMonitor.timeGrains = [];\n    this.target.azureMonitor.timeGrain = '';\n    this.target.azureMonitor.dimensions = [];\n    this.target.azureMonitor.dimension = '';\n    this.refresh();\n  }\n\n  onMetricDefinitionChange() {\n    this.target.azureMonitor.resourceName = this.defaultDropdownValue;\n    this.target.azureMonitor.metricNamespace = this.defaultDropdownValue;\n    this.target.azureMonitor.metricName = this.defaultDropdownValue;\n    this.target.azureMonitor.aggregation = '';\n    this.target.azureMonitor.timeGrains = [];\n    this.target.azureMonitor.timeGrain = '';\n    this.target.azureMonitor.dimensions = [];\n    this.target.azureMonitor.dimension = '';\n  }\n\n  onResourceNameChange() {\n    this.target.azureMonitor.metricNamespace = this.defaultDropdownValue;\n    this.target.azureMonitor.metricName = this.defaultDropdownValue;\n    this.target.azureMonitor.aggregation = '';\n    this.target.azureMonitor.timeGrains = [];\n    this.target.azureMonitor.timeGrain = '';\n    this.target.azureMonitor.dimensions = [];\n    this.target.azureMonitor.dimension = '';\n    this.refresh();\n  }\n\n  onMetricNamespacesChange() {\n    this.target.azureMonitor.metricName = this.defaultDropdownValue;\n    this.target.azureMonitor.dimensions = [];\n    this.target.azureMonitor.dimension = '';\n  }\n\n  onMetricNameChange() {\n    if (!this.target.azureMonitor.metricName || this.target.azureMonitor.metricName === this.defaultDropdownValue) {\n      return;\n    }\n\n    return this.datasource\n      .getMetricMetadata(\n        this.replace(this.target.subscription),\n        this.replace(this.target.azureMonitor.resourceGroup),\n        this.replace(this.target.azureMonitor.metricDefinition),\n        this.replace(this.target.azureMonitor.resourceName),\n        this.replace(this.target.azureMonitor.metricNamespace),\n        this.replace(this.target.azureMonitor.metricName)\n      )\n      .then((metadata: any) => {\n        this.target.azureMonitor.aggOptions = metadata.supportedAggTypes || [metadata.primaryAggType];\n        this.target.azureMonitor.aggregation = metadata.primaryAggType;\n        this.target.azureMonitor.timeGrains = [{ text: 'auto', value: 'auto' }].concat(metadata.supportedTimeGrains);\n        this.target.azureMonitor.timeGrain = 'auto';\n\n        this.target.azureMonitor.allowedTimeGrainsMs = this.convertTimeGrainsToMs(metadata.supportedTimeGrains || []);\n\n        this.target.azureMonitor.dimensions = metadata.dimensions;\n        if (metadata.dimensions.length > 0) {\n          this.target.azureMonitor.dimension = metadata.dimensions[0].value;\n        }\n        return this.refresh();\n      })\n      .catch(this.handleQueryCtrlError.bind(this));\n  }\n\n  convertTimeGrainsToMs(timeGrains: Array<{ text: string; value: string }>) {\n    const allowedTimeGrainsMs: number[] = [];\n    timeGrains.forEach((tg: any) => {\n      if (tg.value !== 'auto') {\n        allowedTimeGrainsMs.push(kbn.interval_to_ms(TimegrainConverter.createKbnUnitFromISO8601Duration(tg.value)));\n      }\n    });\n    return allowedTimeGrainsMs;\n  }\n\n  getAutoInterval() {\n    if (this.target.azureMonitor.timeGrain === 'auto') {\n      return TimegrainConverter.findClosestTimeGrain(\n        this.templateSrv.getBuiltInIntervalValue(),\n        _.map(this.target.azureMonitor.timeGrains, o =>\n          TimegrainConverter.createKbnUnitFromISO8601Duration(o.value)\n        ) || ['1m', '5m', '15m', '30m', '1h', '6h', '12h', '1d']\n      );\n    }\n\n    return '';\n  }\n\n  /* Azure Log Analytics */\n\n  getWorkspaces = () => {\n    return this.datasource.azureLogAnalyticsDatasource\n      .getWorkspaces(this.target.subscription)\n      .then((list: any[]) => {\n        this.workspaces = list;\n        if (list.length > 0 && !this.target.azureLogAnalytics.workspace) {\n          this.target.azureLogAnalytics.workspace = list[0].value;\n        }\n      })\n      .catch(this.handleQueryCtrlError.bind(this));\n  };\n\n  getAzureLogAnalyticsSchema = () => {\n    return this.getWorkspaces()\n      .then(() => {\n        return this.datasource.azureLogAnalyticsDatasource.getSchema(this.target.azureLogAnalytics.workspace);\n      })\n      .catch(this.handleQueryCtrlError.bind(this));\n  };\n\n  onLogAnalyticsQueryChange = (nextQuery: string) => {\n    this.target.azureLogAnalytics.query = nextQuery;\n  };\n\n  onLogAnalyticsQueryExecute = () => {\n    this.panelCtrl.refresh();\n  };\n\n  get templateVariables() {\n    return this.templateSrv.variables.map(t => '$' + t.name);\n  }\n\n  /* Application Insights Section */\n\n  getAppInsightsAutoInterval() {\n    const interval = this.templateSrv.getBuiltInIntervalValue();\n    if (interval[interval.length - 1] === 's') {\n      return '1m';\n    }\n    return interval;\n  }\n\n  getAppInsightsMetricNames() {\n    if (!this.datasource.appInsightsDatasource.isConfigured()) {\n      return;\n    }\n\n    return this.datasource.getAppInsightsMetricNames().catch(this.handleQueryCtrlError.bind(this));\n  }\n\n  getAppInsightsColumns() {\n    return this.datasource.getAppInsightsColumns(this.target.refId);\n  }\n\n  onAppInsightsColumnChange() {\n    return this.refresh();\n  }\n\n  onAppInsightsMetricNameChange() {\n    if (!this.target.appInsights.metricName || this.target.appInsights.metricName === this.defaultDropdownValue) {\n      return;\n    }\n\n    return this.datasource\n      .getAppInsightsMetricMetadata(this.replace(this.target.appInsights.metricName))\n      .then((aggData: { supportedAggTypes: string[]; supportedGroupBy: string[]; primaryAggType: string }) => {\n        this.target.appInsights.aggOptions = aggData.supportedAggTypes;\n        this.target.appInsights.groupByOptions = aggData.supportedGroupBy;\n        this.target.appInsights.aggregation = aggData.primaryAggType;\n        return this.refresh();\n      })\n      .catch(this.handleQueryCtrlError.bind(this));\n  }\n\n  onAppInsightsQueryChange = (nextQuery: string) => {\n    this.target.appInsights.rawQueryString = nextQuery;\n  };\n\n  onAppInsightsQueryExecute = () => {\n    return this.refresh();\n  };\n\n  getAppInsightsQuerySchema = () => {\n    return this.datasource.appInsightsDatasource.getQuerySchema().catch(this.handleQueryCtrlError.bind(this));\n  };\n\n  getAppInsightsGroupBySegments(query: any) {\n    return _.map(this.target.appInsights.groupByOptions, option => {\n      return { text: option, value: option };\n    });\n  }\n\n  resetAppInsightsGroupBy() {\n    this.target.appInsights.groupBy = 'none';\n    this.refresh();\n  }\n\n  updateTimeGrainType() {\n    if (this.target.appInsights.timeGrainType === 'specific') {\n      this.target.appInsights.timeGrain = '1';\n      this.target.appInsights.timeGrainUnit = 'minute';\n    } else {\n      this.target.appInsights.timeGrain = '';\n    }\n    this.refresh();\n  }\n\n  toggleEditorMode() {\n    this.target.appInsights.rawQuery = !this.target.appInsights.rawQuery;\n  }\n}\n","export default class UrlBuilder {\n  static buildAzureMonitorGetMetricNamespacesUrl(\n    baseUrl: string,\n    subscriptionId: string,\n    resourceGroup: string,\n    metricDefinition: string,\n    resourceName: string,\n    apiVersion: string\n  ) {\n    if ((metricDefinition.match(/\\//g) || []).length > 1) {\n      const rn = resourceName.split('/');\n      const service = metricDefinition.substring(metricDefinition.lastIndexOf('/') + 1);\n      const md = metricDefinition.substring(0, metricDefinition.lastIndexOf('/'));\n      return (\n        `${baseUrl}/${subscriptionId}/resourceGroups/${resourceGroup}/providers/${md}/${rn[0]}/${service}/${rn[1]}` +\n        `/providers/microsoft.insights/metricNamespaces?api-version=${apiVersion}`\n      );\n    }\n\n    return (\n      `${baseUrl}/${subscriptionId}/resourceGroups/${resourceGroup}/providers/${metricDefinition}/${resourceName}` +\n      `/providers/microsoft.insights/metricNamespaces?api-version=${apiVersion}`\n    );\n  }\n\n  static buildAzureMonitorGetMetricNamesUrl(\n    baseUrl: string,\n    subscriptionId: string,\n    resourceGroup: string,\n    metricDefinition: string,\n    resourceName: string,\n    metricNamespace: string,\n    apiVersion: string\n  ) {\n    if ((metricDefinition.match(/\\//g) || []).length > 1) {\n      const rn = resourceName.split('/');\n      const service = metricDefinition.substring(metricDefinition.lastIndexOf('/') + 1);\n      const md = metricDefinition.substring(0, metricDefinition.lastIndexOf('/'));\n      return (\n        `${baseUrl}/${subscriptionId}/resourceGroups/${resourceGroup}/providers/${md}/${rn[0]}/${service}/${rn[1]}` +\n        `/providers/microsoft.insights/metricdefinitions?api-version=${apiVersion}&metricnamespace=${encodeURIComponent(\n          metricNamespace\n        )}`\n      );\n    }\n\n    return (\n      `${baseUrl}/${subscriptionId}/resourceGroups/${resourceGroup}/providers/${metricDefinition}/${resourceName}` +\n      `/providers/microsoft.insights/metricdefinitions?api-version=${apiVersion}&metricnamespace=${encodeURIComponent(\n        metricNamespace\n      )}`\n    );\n  }\n}\n","import _ from 'lodash';\nimport TimeGrainConverter from '../time_grain_converter';\nexport default class ResponseParser {\n  static parseResponseValues(\n    result: any,\n    textFieldName: string,\n    valueFieldName: string\n  ): Array<{ text: string; value: string }> {\n    const list: Array<{ text: string; value: string }> = [];\n\n    if (!result) {\n      return list;\n    }\n\n    for (let i = 0; i < result.data.value.length; i++) {\n      if (!_.find(list, ['value', _.get(result.data.value[i], valueFieldName)])) {\n        const value = _.get(result.data.value[i], valueFieldName);\n        const text = _.get(result.data.value[i], textFieldName, value);\n\n        list.push({\n          text: text,\n          value: value,\n        });\n      }\n    }\n    return list;\n  }\n\n  static parseResourceNames(result: any, metricDefinition: string): Array<{ text: string; value: string }> {\n    const list: Array<{ text: string; value: string }> = [];\n\n    if (!result) {\n      return list;\n    }\n\n    for (let i = 0; i < result.data.value.length; i++) {\n      if (result.data.value[i].type === metricDefinition) {\n        list.push({\n          text: result.data.value[i].name,\n          value: result.data.value[i].name,\n        });\n      }\n    }\n\n    return list;\n  }\n\n  static parseMetadata(result: any, metricName: string) {\n    const defaultAggTypes = ['None', 'Average', 'Minimum', 'Maximum', 'Total', 'Count'];\n\n    if (!result) {\n      return {\n        primaryAggType: '',\n        supportedAggTypes: defaultAggTypes,\n        supportedTimeGrains: [],\n        dimensions: [],\n      };\n    }\n\n    const metricData: any = _.find(result.data.value, o => {\n      return _.get(o, 'name.value') === metricName;\n    });\n\n    return {\n      primaryAggType: metricData.primaryAggregationType,\n      supportedAggTypes: metricData.supportedAggregationTypes || defaultAggTypes,\n      supportedTimeGrains: ResponseParser.parseTimeGrains(metricData.metricAvailabilities || []),\n      dimensions: ResponseParser.parseDimensions(metricData),\n    };\n  }\n\n  static parseTimeGrains(metricAvailabilities: any[]): Array<{ text: string; value: string }> {\n    const timeGrains: any[] = [];\n    if (!metricAvailabilities) {\n      return timeGrains;\n    }\n\n    metricAvailabilities.forEach(avail => {\n      if (avail.timeGrain) {\n        timeGrains.push({\n          text: TimeGrainConverter.createTimeGrainFromISO8601Duration(avail.timeGrain),\n          value: avail.timeGrain,\n        });\n      }\n    });\n    return timeGrains;\n  }\n\n  static parseDimensions(metricData: any): Array<{ text: string; value: string }> {\n    const dimensions: Array<{ text: string; value: string }> = [];\n    if (!metricData.dimensions || metricData.dimensions.length === 0) {\n      return dimensions;\n    }\n\n    if (!metricData.isDimensionRequired) {\n      dimensions.push({ text: 'None', value: 'None' });\n    }\n\n    for (let i = 0; i < metricData.dimensions.length; i++) {\n      const text = metricData.dimensions[i].localizedValue;\n      const value = metricData.dimensions[i].value;\n\n      dimensions.push({\n        text: !text ? value : text,\n        value: value,\n      });\n    }\n    return dimensions;\n  }\n\n  static parseSubscriptions(result: any): Array<{ text: string; value: string }> {\n    const list: Array<{ text: string; value: string }> = [];\n\n    if (!result) {\n      return list;\n    }\n\n    const valueFieldName = 'subscriptionId';\n    const textFieldName = 'displayName';\n    for (let i = 0; i < result.data.value.length; i++) {\n      if (!_.find(list, ['value', _.get(result.data.value[i], valueFieldName)])) {\n        list.push({\n          text: `${_.get(result.data.value[i], textFieldName)} - ${_.get(result.data.value[i], valueFieldName)}`,\n          value: _.get(result.data.value[i], valueFieldName),\n        });\n      }\n    }\n\n    return list;\n  }\n}\n","export default class SupportedNamespaces {\n  supportedMetricNamespaces: any = {\n    azuremonitor: [\n      'Microsoft.AnalysisServices/servers',\n      'Microsoft.ApiManagement/service',\n      'Microsoft.Automation/automationAccounts',\n      'Microsoft.Batch/batchAccounts',\n      'Microsoft.Cache/redis',\n      'Microsoft.ClassicCompute/virtualMachines',\n      'Microsoft.ClassicCompute/domainNames/slots/roles',\n      'Microsoft.CognitiveServices/accounts',\n      'Microsoft.Compute/virtualMachines',\n      'Microsoft.Compute/virtualMachineScaleSets',\n      'Microsoft.ContainerInstance/containerGroups',\n      'Microsoft.ContainerRegistry/registries',\n      'Microsoft.ContainerService/managedClusters',\n      'Microsoft.CustomerInsights/hubs',\n      'Microsoft.DataBoxEdge/dataBoxEdgeDevices',\n      'Microsoft.DataFactory/datafactories',\n      'Microsoft.DataFactory/factories',\n      'Microsoft.DataLakeAnalytics/accounts',\n      'Microsoft.DataLakeStore/accounts',\n      'Microsoft.DBforMariaDB/servers',\n      'Microsoft.DBforMySQL/servers',\n      'Microsoft.DBforPostgreSQL/servers',\n      'Microsoft.Devices/IotHubs',\n      'Microsoft.Devices/provisioningServices',\n      'Microsoft.DocumentDB/databaseAccounts',\n      'Microsoft.EventGrid/topics',\n      'Microsoft.EventGrid/eventSubscriptions',\n      'Microsoft.EventGrid/extensionTopics',\n      'Microsoft.EventHub/namespaces',\n      'Microsoft.EventHub/clusters',\n      'Microsoft.HDInsight/clusters',\n      'Microsoft.Insights/AutoscaleSettings',\n      'Microsoft.Insights/components',\n      'Microsoft.KeyVault/vaults',\n      'Microsoft.Kusto/clusters',\n      'Microsoft.LocationBasedServices/accounts',\n      'Microsoft.Logic/workflows',\n      'Microsoft.Logic/integrationServiceEnvironments',\n      'Microsoft.NetApp/netAppAccounts/capacityPools',\n      'Microsoft.NetApp/netAppAccounts/capacityPools/Volumes',\n      'Microsoft.Network/networkInterfaces',\n      'Microsoft.Network/loadBalancers',\n      'Microsoft.Network/dnsZones',\n      'Microsoft.Network/publicIPAddresses',\n      'Microsoft.Network/azureFirewalls',\n      'Microsoft.Network/applicationGateways',\n      'Microsoft.Network/virtualNetworkGateways',\n      'Microsoft.Network/expressRouteCircuits',\n      'Microsoft.Network/expressRouteCircuits/Peerings',\n      'Microsoft.Network/connections',\n      'Microsoft.Network/trafficManagerProfiles',\n      'Microsoft.Network/networkWatchers/connectionMonitors',\n      'Microsoft.Network/frontdoors',\n      'Microsoft.NotificationHubs/namespaces/notificationHubs',\n      'Microsoft.OperationalInsights/workspaces',\n      'Microsoft.PowerBIDedicated/capacities',\n      'Microsoft.Relay/namespaces',\n      'Microsoft.Search/searchServices',\n      'Microsoft.ServiceBus/namespaces',\n      'Microsoft.Sql/servers/databases',\n      'Microsoft.Sql/servers/elasticPools',\n      'Microsoft.Sql/managedInstances',\n      'Microsoft.Storage/storageAccounts',\n      'Microsoft.Storage/storageAccounts/blobServices',\n      'Microsoft.Storage/storageAccounts/fileServices',\n      'Microsoft.Storage/storageAccounts/queueServices',\n      'Microsoft.Storage/storageAccounts/tableServices',\n      'Microsoft.StorageSync/storageSyncServices',\n      'Microsoft.StorageSync/storageSyncServices/syncGroups',\n      'Microsoft.StorageSync/storageSyncServices/syncGroups/serverEndpoints',\n      'Microsoft.StorageSync/storageSyncServices/registeredServers',\n      'Microsoft.StreamAnalytics/streamingJobs',\n      'Microsoft.Web/serverfarms',\n      'Microsoft.Web/sites',\n      'Microsoft.Web/sites/slots',\n      'Microsoft.Web/hostingEnvironments/multiRolePools',\n      'Microsoft.Web/hostingEnvironments/workerPools',\n    ],\n    govazuremonitor: [\n      'Microsoft.AnalysisServices/servers',\n      'Microsoft.ApiManagement/service',\n      'Microsoft.Batch/batchAccounts',\n      'Microsoft.Cache/redis',\n      'Microsoft.ClassicCompute/virtualMachines',\n      'Microsoft.ClassicCompute/domainNames/slots/roles',\n      'Microsoft.CognitiveServices/accounts',\n      'Microsoft.Compute/virtualMachines',\n      'Microsoft.Compute/virtualMachineScaleSets',\n      'Microsoft.ContainerRegistry/registries',\n      'Microsoft.DBforMySQL/servers',\n      'Microsoft.DBforPostgreSQL/servers',\n      'Microsoft.Devices/IotHubs',\n      'Microsoft.Devices/provisioningServices',\n      'Microsoft.EventGrid/topics',\n      'Microsoft.EventGrid/eventSubscriptions',\n      'Microsoft.EventGrid/extensionTopics',\n      'Microsoft.EventHub/namespaces',\n      'Microsoft.EventHub/clusters',\n      'Microsoft.Insights/AutoscaleSettings',\n      'Microsoft.KeyVault/vaults',\n      'Microsoft.Logic/workflows',\n      'Microsoft.Network/networkInterfaces',\n      'Microsoft.Network/loadBalancers',\n      'Microsoft.Network/dnsZones',\n      'Microsoft.Network/publicIPAddresses',\n      'Microsoft.Network/azureFirewalls',\n      'Microsoft.Network/applicationGateways',\n      'Microsoft.Network/virtualNetworkGateways',\n      'Microsoft.Network/expressRouteCircuits',\n      'Microsoft.Network/expressRouteCircuits/Peerings',\n      'Microsoft.Network/connections',\n      'Microsoft.Network/trafficManagerProfiles',\n      'Microsoft.Network/networkWatchers/connectionMonitors',\n      'Microsoft.Network/frontdoors',\n      'Microsoft.NotificationHubs/namespaces/notificationHubs',\n      'Microsoft.OperationalInsights/workspaces',\n      'Microsoft.PowerBIDedicated/capacities',\n      'Microsoft.Relay/namespaces',\n      'Microsoft.ServiceBus/namespaces',\n      'Microsoft.Sql/servers/databases',\n      'Microsoft.Sql/servers/elasticPools',\n      'Microsoft.Sql/managedInstances',\n      'Microsoft.Storage/storageAccounts',\n      'Microsoft.Storage/storageAccounts/blobServices',\n      'Microsoft.Storage/storageAccounts/fileServices',\n      'Microsoft.Storage/storageAccounts/queueServices',\n      'Microsoft.Storage/storageAccounts/tableServices',\n      'Microsoft.Web/serverfarms',\n      'Microsoft.Web/sites',\n      'Microsoft.Web/sites/slots',\n      'Microsoft.Web/hostingEnvironments/multiRolePools',\n      'Microsoft.Web/hostingEnvironments/workerPools',\n    ],\n    germanyazuremonitor: [\n      'Microsoft.AnalysisServices/servers',\n      'Microsoft.Batch/batchAccounts',\n      'Microsoft.Cache/redis',\n      'Microsoft.ClassicCompute/virtualMachines',\n      'Microsoft.ClassicCompute/domainNames/slots/roles',\n      'Microsoft.Compute/virtualMachines',\n      'Microsoft.Compute/virtualMachineScaleSets',\n      'Microsoft.DBforMySQL/servers',\n      'Microsoft.DBforPostgreSQL/servers',\n      'Microsoft.Devices/IotHubs',\n      'Microsoft.Devices/provisioningServices',\n      'Microsoft.EventHub/namespaces',\n      'Microsoft.EventHub/clusters',\n      'Microsoft.Insights/AutoscaleSettings',\n      'Microsoft.KeyVault/vaults',\n      'Microsoft.Network/networkInterfaces',\n      'Microsoft.Network/loadBalancers',\n      'Microsoft.Network/dnsZones',\n      'Microsoft.Network/publicIPAddresses',\n      'Microsoft.Network/azureFirewalls',\n      'Microsoft.Network/applicationGateways',\n      'Microsoft.Network/virtualNetworkGateways',\n      'Microsoft.Network/expressRouteCircuits',\n      'Microsoft.Network/expressRouteCircuits/Peerings',\n      'Microsoft.Network/connections',\n      'Microsoft.Network/trafficManagerProfiles',\n      'Microsoft.Network/networkWatchers/connectionMonitors',\n      'Microsoft.Network/frontdoors',\n      'Microsoft.NotificationHubs/namespaces/notificationHubs',\n      'Microsoft.OperationalInsights/workspaces',\n      'Microsoft.PowerBIDedicated/capacities',\n      'Microsoft.Relay/namespaces',\n      'Microsoft.ServiceBus/namespaces',\n      'Microsoft.Sql/servers/databases',\n      'Microsoft.Sql/servers/elasticPools',\n      'Microsoft.Sql/managedInstances',\n      'Microsoft.Storage/storageAccounts',\n      'Microsoft.Storage/storageAccounts/blobServices',\n      'Microsoft.Storage/storageAccounts/fileServices',\n      'Microsoft.Storage/storageAccounts/queueServices',\n      'Microsoft.Storage/storageAccounts/tableServices',\n      'Microsoft.StreamAnalytics/streamingJobs',\n      'Microsoft.Web/serverfarms',\n      'Microsoft.Web/sites',\n      'Microsoft.Web/sites/slots',\n      'Microsoft.Web/hostingEnvironments/multiRolePools',\n      'Microsoft.Web/hostingEnvironments/workerPools',\n    ],\n    chinaazuremonitor: [\n      'Microsoft.AnalysisServices/servers',\n      'Microsoft.Batch/batchAccounts',\n      'Microsoft.Cache/redis',\n      'Microsoft.ClassicCompute/virtualMachines',\n      'Microsoft.ClassicCompute/domainNames/slots/roles',\n      'Microsoft.CognitiveServices/accounts',\n      'Microsoft.Compute/virtualMachines',\n      'Microsoft.Compute/virtualMachineScaleSets',\n      'Microsoft.ContainerRegistry/registries',\n      'Microsoft.DBforMySQL/servers',\n      'Microsoft.DBforPostgreSQL/servers',\n      'Microsoft.Devices/IotHubs',\n      'Microsoft.Devices/provisioningServices',\n      'Microsoft.EventHub/namespaces',\n      'Microsoft.Insights/AutoscaleSettings',\n      'Microsoft.KeyVault/vaults',\n      'Microsoft.Logic/workflows',\n      'Microsoft.Network/networkInterfaces',\n      'Microsoft.Network/loadBalancers',\n      'Microsoft.Network/dnsZones',\n      'Microsoft.Network/publicIPAddresses',\n      'Microsoft.Network/azureFirewalls',\n      'Microsoft.Network/applicationGateways',\n      'Microsoft.Network/virtualNetworkGateways',\n      'Microsoft.Network/expressRouteCircuits',\n      'Microsoft.Network/expressRouteCircuits/Peerings',\n      'Microsoft.Network/connections',\n      'Microsoft.Network/trafficManagerProfiles',\n      'Microsoft.Network/networkWatchers/connectionMonitors',\n      'Microsoft.Network/frontdoors',\n      'Microsoft.NotificationHubs/namespaces/notificationHubs',\n      'Microsoft.PowerBIDedicated/capacities',\n      'Microsoft.Relay/namespaces',\n      'Microsoft.ServiceBus/namespaces',\n      'Microsoft.Sql/servers/databases',\n      'Microsoft.Sql/servers/elasticPools',\n      'Microsoft.Sql/managedInstances',\n      'Microsoft.Storage/storageAccounts',\n      'Microsoft.Storage/storageAccounts/blobServices',\n      'Microsoft.Storage/storageAccounts/fileServices',\n      'Microsoft.Storage/storageAccounts/queueServices',\n      'Microsoft.Storage/storageAccounts/tableServices',\n      'Microsoft.StreamAnalytics/streamingJobs',\n      'Microsoft.Web/serverfarms',\n      'Microsoft.Web/sites',\n      'Microsoft.Web/sites/slots',\n      'Microsoft.Web/hostingEnvironments/multiRolePools',\n      'Microsoft.Web/hostingEnvironments/workerPools',\n    ],\n  };\n\n  constructor(private cloudName: string) {}\n\n  get(): string[] {\n    return this.supportedMetricNamespaces[this.cloudName];\n  }\n}\n","import _ from 'lodash';\nimport UrlBuilder from './url_builder';\nimport ResponseParser from './response_parser';\nimport SupportedNamespaces from './supported_namespaces';\nimport TimegrainConverter from '../time_grain_converter';\nimport {\n  AzureMonitorQuery,\n  AzureDataSourceJsonData,\n  AzureMonitorMetricDefinitionsResponse,\n  AzureMonitorResourceGroupsResponse,\n} from '../types';\nimport { DataQueryRequest, DataQueryResponseData, DataSourceInstanceSettings } from '@grafana/ui';\n\nimport { TimeSeries, toDataFrame } from '@grafana/data';\nimport { BackendSrv } from 'app/core/services/backend_srv';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\n\nexport default class AzureMonitorDatasource {\n  apiVersion = '2018-01-01';\n  apiPreviewVersion = '2017-12-01-preview';\n  id: number;\n  subscriptionId: string;\n  baseUrl: string;\n  resourceGroup: string;\n  resourceName: string;\n  url: string;\n  defaultDropdownValue = 'select';\n  cloudName: string;\n  supportedMetricNamespaces: string[] = [];\n\n  /** @ngInject */\n  constructor(\n    private instanceSettings: DataSourceInstanceSettings<AzureDataSourceJsonData>,\n    private backendSrv: BackendSrv,\n    private templateSrv: TemplateSrv\n  ) {\n    this.id = instanceSettings.id;\n    this.subscriptionId = instanceSettings.jsonData.subscriptionId;\n    this.cloudName = instanceSettings.jsonData.cloudName || 'azuremonitor';\n    this.baseUrl = `/${this.cloudName}/subscriptions`;\n    this.url = instanceSettings.url;\n\n    this.supportedMetricNamespaces = new SupportedNamespaces(this.cloudName).get();\n  }\n\n  isConfigured(): boolean {\n    return !!this.subscriptionId && this.subscriptionId.length > 0;\n  }\n\n  async query(options: DataQueryRequest<AzureMonitorQuery>): Promise<DataQueryResponseData[]> {\n    const queries = _.filter(options.targets, item => {\n      return (\n        item.hide !== true &&\n        item.azureMonitor.resourceGroup &&\n        item.azureMonitor.resourceGroup !== this.defaultDropdownValue &&\n        item.azureMonitor.resourceName &&\n        item.azureMonitor.resourceName !== this.defaultDropdownValue &&\n        item.azureMonitor.metricDefinition &&\n        item.azureMonitor.metricDefinition !== this.defaultDropdownValue &&\n        item.azureMonitor.metricName &&\n        item.azureMonitor.metricName !== this.defaultDropdownValue\n      );\n    }).map(target => {\n      const item = target.azureMonitor;\n\n      // fix for timeGrainUnit which is a deprecated/removed field name\n      if (item.timeGrainUnit && item.timeGrain !== 'auto') {\n        item.timeGrain = TimegrainConverter.createISO8601Duration(item.timeGrain, item.timeGrainUnit);\n      }\n\n      const subscriptionId = this.templateSrv.replace(target.subscription || this.subscriptionId, options.scopedVars);\n      const resourceGroup = this.templateSrv.replace(item.resourceGroup, options.scopedVars);\n      const resourceName = this.templateSrv.replace(item.resourceName, options.scopedVars);\n      const metricNamespace = this.templateSrv.replace(item.metricNamespace, options.scopedVars);\n      const metricDefinition = this.templateSrv.replace(item.metricDefinition, options.scopedVars);\n      const timeGrain = this.templateSrv.replace((item.timeGrain || '').toString(), options.scopedVars);\n      const aggregation = this.templateSrv.replace(item.aggregation, options.scopedVars);\n\n      return {\n        refId: target.refId,\n        intervalMs: options.intervalMs,\n        datasourceId: this.id,\n        subscription: subscriptionId,\n        queryType: 'Azure Monitor',\n        type: 'timeSeriesQuery',\n        raw: false,\n        azureMonitor: {\n          resourceGroup: resourceGroup,\n          resourceName: resourceName,\n          metricDefinition: metricDefinition,\n          timeGrain: timeGrain,\n          allowedTimeGrainsMs: item.allowedTimeGrainsMs,\n          metricName: this.templateSrv.replace(item.metricName, options.scopedVars),\n          metricNamespace:\n            metricNamespace && metricNamespace !== this.defaultDropdownValue ? metricNamespace : metricDefinition,\n          aggregation: aggregation,\n          dimension: this.templateSrv.replace(item.dimension, options.scopedVars),\n          dimensionFilter: this.templateSrv.replace(item.dimensionFilter, options.scopedVars),\n          alias: item.alias,\n          format: target.format,\n        },\n      };\n    });\n\n    if (!queries || queries.length === 0) {\n      return Promise.resolve([]);\n    }\n\n    const { data } = await this.backendSrv.datasourceRequest({\n      url: '/api/tsdb/query',\n      method: 'POST',\n      data: {\n        from: options.range.from.valueOf().toString(),\n        to: options.range.to.valueOf().toString(),\n        queries,\n      },\n    });\n\n    const result: DataQueryResponseData[] = [];\n    if (data.results) {\n      Object['values'](data.results).forEach((queryRes: any) => {\n        if (!queryRes.series) {\n          return;\n        }\n        queryRes.series.forEach((series: any) => {\n          const timeSerie: TimeSeries = {\n            target: series.name,\n            datapoints: series.points,\n            refId: queryRes.refId,\n            meta: queryRes.meta,\n          };\n          result.push(toDataFrame(timeSerie));\n        });\n      });\n      return result;\n    }\n\n    return Promise.resolve([]);\n  }\n\n  annotationQuery(options: any) {}\n\n  metricFindQuery(query: string) {\n    const subscriptionsQuery = query.match(/^Subscriptions\\(\\)/i);\n    if (subscriptionsQuery) {\n      return this.getSubscriptions();\n    }\n\n    const resourceGroupsQuery = query.match(/^ResourceGroups\\(\\)/i);\n    if (resourceGroupsQuery) {\n      return this.getResourceGroups(this.subscriptionId);\n    }\n\n    const resourceGroupsQueryWithSub = query.match(/^ResourceGroups\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/i);\n    if (resourceGroupsQueryWithSub) {\n      return this.getResourceGroups(this.toVariable(resourceGroupsQueryWithSub[1]));\n    }\n\n    const metricDefinitionsQuery = query.match(/^Namespaces\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/i);\n    if (metricDefinitionsQuery) {\n      if (!metricDefinitionsQuery[3]) {\n        return this.getMetricDefinitions(this.subscriptionId, this.toVariable(metricDefinitionsQuery[1]));\n      }\n    }\n\n    const metricDefinitionsQueryWithSub = query.match(/^Namespaces\\(([^,]+?),\\s?([^,]+?)\\)/i);\n    if (metricDefinitionsQueryWithSub) {\n      return this.getMetricDefinitions(\n        this.toVariable(metricDefinitionsQueryWithSub[1]),\n        this.toVariable(metricDefinitionsQueryWithSub[2])\n      );\n    }\n\n    const resourceNamesQuery = query.match(/^ResourceNames\\(([^,]+?),\\s?([^,]+?)\\)/i);\n    if (resourceNamesQuery) {\n      const resourceGroup = this.toVariable(resourceNamesQuery[1]);\n      const metricDefinition = this.toVariable(resourceNamesQuery[2]);\n      return this.getResourceNames(this.subscriptionId, resourceGroup, metricDefinition);\n    }\n\n    const resourceNamesQueryWithSub = query.match(/^ResourceNames\\(([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/i);\n    if (resourceNamesQueryWithSub) {\n      const subscription = this.toVariable(resourceNamesQueryWithSub[1]);\n      const resourceGroup = this.toVariable(resourceNamesQueryWithSub[2]);\n      const metricDefinition = this.toVariable(resourceNamesQueryWithSub[3]);\n      return this.getResourceNames(subscription, resourceGroup, metricDefinition);\n    }\n\n    const metricNamespaceQuery = query.match(/^MetricNamespace\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?)\\)/i);\n    if (metricNamespaceQuery) {\n      const resourceGroup = this.toVariable(metricNamespaceQuery[1]);\n      const metricDefinition = this.toVariable(metricNamespaceQuery[2]);\n      const resourceName = this.toVariable(metricNamespaceQuery[3]);\n      return this.getMetricNamespaces(this.subscriptionId, resourceGroup, metricDefinition, resourceName);\n    }\n\n    const metricNamespaceQueryWithSub = query.match(\n      /^metricnamespace\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?([^,]+?)\\)/i\n    );\n    if (metricNamespaceQueryWithSub) {\n      const subscription = this.toVariable(metricNamespaceQueryWithSub[1]);\n      const resourceGroup = this.toVariable(metricNamespaceQueryWithSub[2]);\n      const metricDefinition = this.toVariable(metricNamespaceQueryWithSub[3]);\n      const resourceName = this.toVariable(metricNamespaceQueryWithSub[4]);\n      console.log(metricNamespaceQueryWithSub);\n      return this.getMetricNamespaces(subscription, resourceGroup, metricDefinition, resourceName);\n    }\n\n    const metricNamesQuery = query.match(/^MetricNames\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?([^,]+?)\\)/i);\n    if (metricNamesQuery) {\n      if (metricNamesQuery[3].indexOf(',') === -1) {\n        const resourceGroup = this.toVariable(metricNamesQuery[1]);\n        const metricDefinition = this.toVariable(metricNamesQuery[2]);\n        const resourceName = this.toVariable(metricNamesQuery[3]);\n        const metricNamespace = this.toVariable(metricNamesQuery[4]);\n        return this.getMetricNames(this.subscriptionId, resourceGroup, metricDefinition, resourceName, metricNamespace);\n      }\n    }\n\n    const metricNamesQueryWithSub = query.match(\n      /^MetricNames\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/i\n    );\n\n    if (metricNamesQueryWithSub) {\n      const subscription = this.toVariable(metricNamesQueryWithSub[1]);\n      const resourceGroup = this.toVariable(metricNamesQueryWithSub[2]);\n      const metricDefinition = this.toVariable(metricNamesQueryWithSub[3]);\n      const resourceName = this.toVariable(metricNamesQueryWithSub[4]);\n      const metricNamespace = this.toVariable(metricNamesQueryWithSub[5]);\n      return this.getMetricNames(subscription, resourceGroup, metricDefinition, resourceName, metricNamespace);\n    }\n\n    return undefined;\n  }\n\n  toVariable(metric: string) {\n    return this.templateSrv.replace((metric || '').trim());\n  }\n\n  getSubscriptions(route?: string) {\n    const url = `/${route || this.cloudName}/subscriptions?api-version=2019-03-01`;\n    return this.doRequest(url).then((result: any) => {\n      return ResponseParser.parseSubscriptions(result);\n    });\n  }\n\n  getResourceGroups(subscriptionId: string) {\n    const url = `${this.baseUrl}/${subscriptionId}/resourceGroups?api-version=${this.apiVersion}`;\n    return this.doRequest(url).then((result: AzureMonitorResourceGroupsResponse) => {\n      return ResponseParser.parseResponseValues(result, 'name', 'name');\n    });\n  }\n\n  getMetricDefinitions(subscriptionId: string, resourceGroup: string) {\n    const url = `${this.baseUrl}/${subscriptionId}/resourceGroups/${resourceGroup}/resources?api-version=${\n      this.apiVersion\n    }`;\n    return this.doRequest(url)\n      .then((result: AzureMonitorMetricDefinitionsResponse) => {\n        return ResponseParser.parseResponseValues(result, 'type', 'type');\n      })\n      .then((result: any) => {\n        return _.filter(result, t => {\n          for (let i = 0; i < this.supportedMetricNamespaces.length; i++) {\n            if (t.value.toLowerCase() === this.supportedMetricNamespaces[i].toLowerCase()) {\n              return true;\n            }\n          }\n\n          return false;\n        });\n      })\n      .then((result: any) => {\n        let shouldHardcodeBlobStorage = false;\n        for (let i = 0; i < result.length; i++) {\n          if (result[i].value === 'Microsoft.Storage/storageAccounts') {\n            shouldHardcodeBlobStorage = true;\n            break;\n          }\n        }\n\n        if (shouldHardcodeBlobStorage) {\n          result.push({\n            text: 'Microsoft.Storage/storageAccounts/blobServices',\n            value: 'Microsoft.Storage/storageAccounts/blobServices',\n          });\n          result.push({\n            text: 'Microsoft.Storage/storageAccounts/fileServices',\n            value: 'Microsoft.Storage/storageAccounts/fileServices',\n          });\n          result.push({\n            text: 'Microsoft.Storage/storageAccounts/tableServices',\n            value: 'Microsoft.Storage/storageAccounts/tableServices',\n          });\n          result.push({\n            text: 'Microsoft.Storage/storageAccounts/queueServices',\n            value: 'Microsoft.Storage/storageAccounts/queueServices',\n          });\n        }\n\n        return result;\n      });\n  }\n\n  getResourceNames(subscriptionId: string, resourceGroup: string, metricDefinition: string) {\n    const url = `${this.baseUrl}/${subscriptionId}/resourceGroups/${resourceGroup}/resources?api-version=${\n      this.apiVersion\n    }`;\n\n    return this.doRequest(url).then((result: any) => {\n      if (!_.startsWith(metricDefinition, 'Microsoft.Storage/storageAccounts/')) {\n        return ResponseParser.parseResourceNames(result, metricDefinition);\n      }\n\n      const list = ResponseParser.parseResourceNames(result, 'Microsoft.Storage/storageAccounts');\n      for (let i = 0; i < list.length; i++) {\n        list[i].text += '/default';\n        list[i].value += '/default';\n      }\n\n      return list;\n    });\n  }\n\n  getMetricNamespaces(subscriptionId: string, resourceGroup: string, metricDefinition: string, resourceName: string) {\n    const url = UrlBuilder.buildAzureMonitorGetMetricNamespacesUrl(\n      this.baseUrl,\n      subscriptionId,\n      resourceGroup,\n      metricDefinition,\n      resourceName,\n      this.apiPreviewVersion\n    );\n\n    return this.doRequest(url).then((result: any) => {\n      return ResponseParser.parseResponseValues(result, 'name', 'properties.metricNamespaceName');\n    });\n  }\n\n  getMetricNames(\n    subscriptionId: string,\n    resourceGroup: string,\n    metricDefinition: string,\n    resourceName: string,\n    metricNamespace: string\n  ) {\n    const url = UrlBuilder.buildAzureMonitorGetMetricNamesUrl(\n      this.baseUrl,\n      subscriptionId,\n      resourceGroup,\n      metricDefinition,\n      resourceName,\n      metricNamespace,\n      this.apiVersion\n    );\n\n    return this.doRequest(url).then((result: any) => {\n      return ResponseParser.parseResponseValues(result, 'name.localizedValue', 'name.value');\n    });\n  }\n\n  getMetricMetadata(\n    subscriptionId: string,\n    resourceGroup: string,\n    metricDefinition: string,\n    resourceName: string,\n    metricNamespace: string,\n    metricName: string\n  ) {\n    const url = UrlBuilder.buildAzureMonitorGetMetricNamesUrl(\n      this.baseUrl,\n      subscriptionId,\n      resourceGroup,\n      metricDefinition,\n      resourceName,\n      metricNamespace,\n      this.apiVersion\n    );\n\n    return this.doRequest(url).then((result: any) => {\n      return ResponseParser.parseMetadata(result, metricName);\n    });\n  }\n\n  testDatasource() {\n    if (!this.isValidConfigField(this.instanceSettings.jsonData.tenantId)) {\n      return {\n        status: 'error',\n        message: 'The Tenant Id field is required.',\n      };\n    }\n\n    if (!this.isValidConfigField(this.instanceSettings.jsonData.clientId)) {\n      return {\n        status: 'error',\n        message: 'The Client Id field is required.',\n      };\n    }\n\n    const url = `/${this.cloudName}/subscriptions?api-version=2019-03-01`;\n    return this.doRequest(url)\n      .then((response: any) => {\n        if (response.status === 200) {\n          return {\n            status: 'success',\n            message: 'Successfully queried the Azure Monitor service.',\n            title: 'Success',\n          };\n        }\n\n        return {\n          status: 'error',\n          message: 'Returned http status code ' + response.status,\n        };\n      })\n      .catch((error: any) => {\n        let message = 'Azure Monitor: ';\n        message += error.statusText ? error.statusText + ': ' : '';\n\n        if (error.data && error.data.error && error.data.error.code) {\n          message += error.data.error.code + '. ' + error.data.error.message;\n        } else if (error.data && error.data.error) {\n          message += error.data.error;\n        } else if (error.data) {\n          message += error.data;\n        } else {\n          message += 'Cannot connect to Azure Monitor REST API.';\n        }\n        return {\n          status: 'error',\n          message: message,\n        };\n      });\n  }\n\n  isValidConfigField(field: string) {\n    return field && field.length > 0;\n  }\n\n  doRequest(url: string, maxRetries = 1) {\n    return this.backendSrv\n      .datasourceRequest({\n        url: this.url + url,\n        method: 'GET',\n      })\n      .catch((error: any) => {\n        if (maxRetries > 0) {\n          return this.doRequest(url, maxRetries - 1);\n        }\n\n        throw error;\n      });\n  }\n}\n","import TimeGrainConverter from '../time_grain_converter';\n\nexport default class AppInsightsQuerystringBuilder {\n  aggregation = '';\n  groupBy = '';\n  timeGrainType = '';\n  timeGrain = '';\n  timeGrainUnit = '';\n  filter = '';\n\n  constructor(private from: any, private to: any, public grafanaInterval: any) {}\n\n  setAggregation(aggregation: string) {\n    this.aggregation = aggregation;\n  }\n\n  setGroupBy(groupBy: string) {\n    this.groupBy = groupBy;\n  }\n\n  setInterval(timeGrainType: string, timeGrain: any, timeGrainUnit: string) {\n    this.timeGrainType = timeGrainType;\n    this.timeGrain = timeGrain;\n    this.timeGrainUnit = timeGrainUnit;\n  }\n\n  setFilter(filter: string) {\n    this.filter = filter;\n  }\n\n  generate() {\n    let querystring = `timespan=${this.from.utc().format()}/${this.to.utc().format()}`;\n\n    if (this.aggregation && this.aggregation.length > 0) {\n      querystring += `&aggregation=${this.aggregation}`;\n    }\n\n    if (this.groupBy && this.groupBy.length > 0) {\n      querystring += `&segment=${this.groupBy}`;\n    }\n\n    if (this.timeGrainType === 'specific' && this.timeGrain && this.timeGrainUnit) {\n      querystring += `&interval=${TimeGrainConverter.createISO8601Duration(this.timeGrain, this.timeGrainUnit)}`;\n    }\n\n    if (this.timeGrainType === 'auto') {\n      querystring += `&interval=${TimeGrainConverter.createISO8601DurationFromInterval(this.grafanaInterval)}`;\n    }\n\n    if (this.filter) {\n      querystring += `&filter=${this.filter}`;\n    }\n\n    return querystring;\n  }\n}\n","import { dateTime } from '@grafana/data';\n\nexport default class LogAnalyticsQuerystringBuilder {\n  constructor(public rawQueryString: string, public options: any, public defaultTimeField: any) {}\n\n  generate() {\n    let queryString = this.rawQueryString;\n    const macroRegexp = /\\$__([_a-zA-Z0-9]+)\\(([^\\)]*)\\)/gi;\n    queryString = queryString.replace(macroRegexp, (match, p1, p2) => {\n      if (p1 === 'contains') {\n        return this.getMultiContains(p2);\n      }\n\n      return match;\n    });\n\n    queryString = queryString.replace(/\\$__escapeMulti\\(('[^]*')\\)/gi, (match, p1) => this.escape(p1));\n\n    if (this.options) {\n      queryString = queryString.replace(macroRegexp, (match, p1, p2) => {\n        if (p1 === 'timeFilter') {\n          return this.getTimeFilter(p2, this.options);\n        }\n        if (p1 === 'timeFrom') {\n          return this.getFrom(this.options);\n        }\n        if (p1 === 'timeTo') {\n          return this.getUntil(this.options);\n        }\n\n        return match;\n      });\n      queryString = queryString.replace(/\\$__interval/gi, this.options.interval);\n    }\n    const rawQuery = queryString;\n    queryString = encodeURIComponent(queryString);\n    const uriString = `query=${queryString}`;\n\n    return { uriString, rawQuery };\n  }\n\n  getFrom(options: any) {\n    const from = options.range.from;\n    return `datetime(${dateTime(from)\n      .startOf('minute')\n      .toISOString()})`;\n  }\n\n  getUntil(options: any) {\n    if (options.rangeRaw.to === 'now') {\n      const now = Date.now();\n      return `datetime(${dateTime(now)\n        .startOf('minute')\n        .toISOString()})`;\n    } else {\n      const until = options.range.to;\n      return `datetime(${dateTime(until)\n        .startOf('minute')\n        .toISOString()})`;\n    }\n  }\n\n  getTimeFilter(timeFieldArg: any, options: any) {\n    const timeField = timeFieldArg || this.defaultTimeField;\n    if (options.rangeRaw.to === 'now') {\n      return `${timeField} >= ${this.getFrom(options)}`;\n    } else {\n      return `${timeField}  >= ${this.getFrom(options)} and ${timeField} <= ${this.getUntil(options)}`;\n    }\n  }\n\n  getMultiContains(inputs: string) {\n    const firstCommaIndex = inputs.indexOf(',');\n    const field = inputs.substring(0, firstCommaIndex);\n    const templateVar = inputs.substring(inputs.indexOf(',') + 1);\n\n    if (templateVar && templateVar.toLowerCase().trim() === 'all') {\n      return '1 == 1';\n    }\n\n    return `${field.trim()} in (${templateVar.trim()})`;\n  }\n\n  escape(inputs: string) {\n    return inputs\n      .substring(1, inputs.length - 1)\n      .split(`','`)\n      .map(v => `@'${v}'`)\n      .join(', ');\n  }\n}\n","import _ from 'lodash';\nimport { dateTime } from '@grafana/data';\n\nexport default class ResponseParser {\n  constructor(private results: any) {}\n\n  parseQueryResult() {\n    let data: any = [];\n    let columns: any = [];\n    for (let i = 0; i < this.results.length; i++) {\n      if (this.results[i].query.raw) {\n        const xaxis = this.results[i].query.xaxis;\n        const yaxises = this.results[i].query.yaxis;\n        const spliton = this.results[i].query.spliton;\n        columns = this.results[i].result.data.Tables[0].Columns;\n        const rows = this.results[i].result.data.Tables[0].Rows;\n        data = _.concat(\n          data,\n          this.parseRawQueryResultRow(this.results[i].query, columns, rows, xaxis, yaxises, spliton)\n        );\n      } else {\n        const value = this.results[i].result.data.value;\n        const alias = this.results[i].query.alias;\n        data = _.concat(data, this.parseQueryResultRow(this.results[i].query, value, alias));\n      }\n    }\n    return data;\n  }\n\n  parseRawQueryResultRow(query: any, columns: any, rows: any, xaxis: string, yaxises: string, spliton: string) {\n    const data: any[] = [];\n    const columnsForDropdown = _.map(columns, column => ({ text: column.ColumnName, value: column.ColumnName }));\n\n    const xaxisColumn = columns.findIndex((column: any) => column.ColumnName === xaxis);\n    const yaxisesSplit = yaxises.split(',');\n    const yaxisColumns: any = {};\n    _.forEach(yaxisesSplit, yaxis => {\n      yaxisColumns[yaxis] = columns.findIndex((column: any) => column.ColumnName === yaxis);\n    });\n    const splitonColumn = columns.findIndex((column: any) => column.ColumnName === spliton);\n    const convertTimestamp = xaxis === 'timestamp';\n\n    _.forEach(rows, row => {\n      _.forEach(yaxisColumns, (yaxisColumn, yaxisName) => {\n        const bucket =\n          splitonColumn === -1\n            ? ResponseParser.findOrCreateBucket(data, yaxisName)\n            : ResponseParser.findOrCreateBucket(data, row[splitonColumn]);\n        const epoch = convertTimestamp ? ResponseParser.dateTimeToEpoch(row[xaxisColumn]) : row[xaxisColumn];\n        bucket.datapoints.push([row[yaxisColumn], epoch]);\n        bucket.refId = query.refId;\n        bucket.query = query.query;\n        bucket.columnsForDropdown = columnsForDropdown;\n      });\n    });\n\n    return data;\n  }\n\n  parseQueryResultRow(query: any, value: any, alias: string) {\n    const data: any[] = [];\n\n    if (ResponseParser.isSingleValue(value)) {\n      const metricName = ResponseParser.getMetricFieldKey(value);\n      const aggField = ResponseParser.getKeyForAggregationField(value[metricName]);\n      const epoch = ResponseParser.dateTimeToEpoch(value.end);\n      data.push({\n        target: metricName,\n        datapoints: [[value[metricName][aggField], epoch]],\n        refId: query.refId,\n        query: query.query,\n      });\n      return data;\n    }\n\n    const groupedBy = ResponseParser.hasSegmentsField(value.segments[0]);\n    if (!groupedBy) {\n      const metricName = ResponseParser.getMetricFieldKey(value.segments[0]);\n      const dataTarget = ResponseParser.findOrCreateBucket(data, metricName);\n\n      for (let i = 0; i < value.segments.length; i++) {\n        const epoch = ResponseParser.dateTimeToEpoch(value.segments[i].end);\n        const aggField: string = ResponseParser.getKeyForAggregationField(value.segments[i][metricName]);\n\n        dataTarget.datapoints.push([value.segments[i][metricName][aggField], epoch]);\n      }\n      dataTarget.refId = query.refId;\n      dataTarget.query = query.query;\n    } else {\n      for (let i = 0; i < value.segments.length; i++) {\n        const epoch = ResponseParser.dateTimeToEpoch(value.segments[i].end);\n\n        for (let j = 0; j < value.segments[i].segments.length; j++) {\n          const metricName = ResponseParser.getMetricFieldKey(value.segments[i].segments[j]);\n          const aggField = ResponseParser.getKeyForAggregationField(value.segments[i].segments[j][metricName]);\n          const target = this.getTargetName(value.segments[i].segments[j], alias);\n\n          const bucket = ResponseParser.findOrCreateBucket(data, target);\n          bucket.datapoints.push([value.segments[i].segments[j][metricName][aggField], epoch]);\n          bucket.refId = query.refId;\n          bucket.meta = {\n            query: query.query,\n          };\n        }\n      }\n    }\n\n    return data;\n  }\n\n  getTargetName(segment: { [x: string]: string }, alias: string) {\n    let metric = '';\n    let segmentName = '';\n    let segmentValue = '';\n    for (const prop in segment) {\n      if (_.isObject(segment[prop])) {\n        metric = prop;\n      } else {\n        segmentName = prop;\n        segmentValue = segment[prop];\n      }\n    }\n\n    if (alias) {\n      const regex = /\\{\\{([\\s\\S]+?)\\}\\}/g;\n      return alias.replace(regex, (match, g1, g2) => {\n        const group = g1 || g2;\n\n        if (group === 'metric') {\n          return metric;\n        } else if (group === 'groupbyname') {\n          return segmentName;\n        } else if (group === 'groupbyvalue') {\n          return segmentValue;\n        }\n\n        return match;\n      });\n    }\n\n    return metric + `{${segmentName}=\"${segmentValue}\"}`;\n  }\n\n  static isSingleValue(value: any) {\n    return !ResponseParser.hasSegmentsField(value);\n  }\n\n  static findOrCreateBucket(data: any[], target: string) {\n    let dataTarget: any = _.find(data, ['target', target]);\n    if (!dataTarget) {\n      dataTarget = { target: target, datapoints: [] };\n      data.push(dataTarget);\n    }\n\n    return dataTarget;\n  }\n\n  static hasSegmentsField(obj: any) {\n    const keys = _.keys(obj);\n    return _.indexOf(keys, 'segments') > -1;\n  }\n\n  static getMetricFieldKey(segment: { [x: string]: any }) {\n    const keys = _.keys(segment);\n\n    return _.filter(_.without(keys, 'start', 'end'), key => {\n      return _.isObject(segment[key]);\n    })[0];\n  }\n\n  static getKeyForAggregationField(dataObj: any): string {\n    const keys = _.keys(dataObj);\n    return _.intersection(keys, ['sum', 'avg', 'min', 'max', 'count', 'unique'])[0];\n  }\n\n  static dateTimeToEpoch(dateTimeValue: any) {\n    return dateTime(dateTimeValue).valueOf();\n  }\n\n  static parseMetricNames(result: { data: { metrics: any } }) {\n    const keys = _.keys(result.data.metrics);\n\n    return ResponseParser.toTextValueList(keys);\n  }\n\n  parseMetadata(metricName: string) {\n    const metric = this.results.data.metrics[metricName];\n\n    if (!metric) {\n      throw Error('No data found for metric: ' + metricName);\n    }\n\n    return {\n      primaryAggType: metric.defaultAggregation,\n      supportedAggTypes: metric.supportedAggregations,\n      supportedGroupBy: metric.supportedGroupBy.all,\n    };\n  }\n\n  parseGroupBys() {\n    return ResponseParser.toTextValueList(this.results.supportedGroupBy);\n  }\n\n  parseQuerySchema() {\n    const result: any = {\n      Type: 'AppInsights',\n      Tables: {},\n    };\n    if (this.results && this.results.data && this.results.data.Tables) {\n      for (let i = 0; i < this.results.data.Tables[0].Rows.length; i++) {\n        const column = this.results.data.Tables[0].Rows[i];\n        const columnTable = column[0];\n        const columnName = column[1];\n        const columnType = column[2];\n        if (result.Tables[columnTable]) {\n          result.Tables[columnTable].OrderedColumns.push({ Name: columnName, Type: columnType });\n        } else {\n          result.Tables[columnTable] = {\n            Name: columnTable,\n            OrderedColumns: [{ Name: columnName, Type: columnType }],\n          };\n        }\n      }\n    }\n    return result;\n  }\n\n  static toTextValueList(values: any) {\n    const list: any[] = [];\n    for (let i = 0; i < values.length; i++) {\n      list.push({\n        text: values[i],\n        value: values[i],\n      });\n    }\n    return list;\n  }\n}\n","import _ from 'lodash';\nimport AppInsightsQuerystringBuilder from './app_insights_querystring_builder';\nimport LogAnalyticsQuerystringBuilder from '../log_analytics/querystring_builder';\nimport ResponseParser from './response_parser';\nimport { DataSourceInstanceSettings } from '@grafana/ui';\nimport { AzureDataSourceJsonData } from '../types';\nimport { BackendSrv } from 'app/core/services/backend_srv';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport { IQService } from 'angular';\n\nexport interface LogAnalyticsColumn {\n  text: string;\n  value: string;\n}\nexport default class AppInsightsDatasource {\n  id: number;\n  url: string;\n  baseUrl: string;\n  version = 'beta';\n  applicationId: string;\n  logAnalyticsColumns: { [key: string]: LogAnalyticsColumn[] } = {};\n\n  /** @ngInject */\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<AzureDataSourceJsonData>,\n    private backendSrv: BackendSrv,\n    private templateSrv: TemplateSrv,\n    private $q: IQService\n  ) {\n    this.id = instanceSettings.id;\n    this.applicationId = instanceSettings.jsonData.appInsightsAppId;\n    this.baseUrl = `/appinsights/${this.version}/apps/${this.applicationId}`;\n    this.url = instanceSettings.url;\n  }\n\n  isConfigured(): boolean {\n    return !!this.applicationId && this.applicationId.length > 0;\n  }\n\n  query(options: any) {\n    const queries = _.filter(options.targets, item => {\n      return item.hide !== true;\n    }).map(target => {\n      const item = target.appInsights;\n      if (item.rawQuery) {\n        const querystringBuilder = new LogAnalyticsQuerystringBuilder(\n          this.templateSrv.replace(item.rawQueryString, options.scopedVars),\n          options,\n          'timestamp'\n        );\n        const generated = querystringBuilder.generate();\n\n        const url = `${this.baseUrl}/query?${generated.uriString}`;\n\n        return {\n          refId: target.refId,\n          intervalMs: options.intervalMs,\n          maxDataPoints: options.maxDataPoints,\n          datasourceId: this.id,\n          url: url,\n          format: options.format,\n          alias: item.alias,\n          query: generated.rawQuery,\n          xaxis: item.xaxis,\n          yaxis: item.yaxis,\n          spliton: item.spliton,\n          raw: true,\n        };\n      } else {\n        const querystringBuilder = new AppInsightsQuerystringBuilder(\n          options.range.from,\n          options.range.to,\n          options.interval\n        );\n\n        if (item.groupBy !== 'none') {\n          querystringBuilder.setGroupBy(this.templateSrv.replace(item.groupBy, options.scopedVars));\n        }\n        querystringBuilder.setAggregation(item.aggregation);\n        querystringBuilder.setInterval(\n          item.timeGrainType,\n          this.templateSrv.replace(item.timeGrain, options.scopedVars),\n          item.timeGrainUnit\n        );\n\n        querystringBuilder.setFilter(this.templateSrv.replace(item.filter || ''));\n\n        const url = `${this.baseUrl}/metrics/${this.templateSrv.replace(\n          encodeURI(item.metricName),\n          options.scopedVars\n        )}?${querystringBuilder.generate()}`;\n\n        return {\n          refId: target.refId,\n          intervalMs: options.intervalMs,\n          maxDataPoints: options.maxDataPoints,\n          datasourceId: this.id,\n          url: url,\n          format: options.format,\n          alias: item.alias,\n          xaxis: '',\n          yaxis: '',\n          spliton: '',\n          raw: false,\n        };\n      }\n    });\n\n    if (!queries || queries.length === 0) {\n      // @ts-ignore\n      return;\n    }\n\n    const promises = this.doQueries(queries);\n\n    return this.$q\n      .all(promises)\n      .then(results => {\n        return new ResponseParser(results).parseQueryResult();\n      })\n      .then(results => {\n        const flattened: any[] = [];\n\n        for (let i = 0; i < results.length; i++) {\n          if (results[i].columnsForDropdown) {\n            this.logAnalyticsColumns[results[i].refId] = results[i].columnsForDropdown;\n          }\n          flattened.push(results[i]);\n        }\n\n        return flattened;\n      });\n  }\n\n  doQueries(queries: any) {\n    return _.map(queries, query => {\n      return this.doRequest(query.url)\n        .then((result: any) => {\n          return {\n            result: result,\n            query: query,\n          };\n        })\n        .catch((err: any) => {\n          throw {\n            error: err,\n            query: query,\n          };\n        });\n    });\n  }\n\n  annotationQuery(options: any) {}\n\n  metricFindQuery(query: string) {\n    const appInsightsMetricNameQuery = query.match(/^AppInsightsMetricNames\\(\\)/i);\n    if (appInsightsMetricNameQuery) {\n      return this.getMetricNames();\n    }\n\n    const appInsightsGroupByQuery = query.match(/^AppInsightsGroupBys\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/i);\n    if (appInsightsGroupByQuery) {\n      const metricName = appInsightsGroupByQuery[1];\n      return this.getGroupBys(this.templateSrv.replace(metricName));\n    }\n\n    return undefined;\n  }\n\n  testDatasource() {\n    const url = `${this.baseUrl}/metrics/metadata`;\n    return this.doRequest(url)\n      .then((response: any) => {\n        if (response.status === 200) {\n          return {\n            status: 'success',\n            message: 'Successfully queried the Application Insights service.',\n            title: 'Success',\n          };\n        }\n\n        return {\n          status: 'error',\n          message: 'Returned http status code ' + response.status,\n        };\n      })\n      .catch((error: any) => {\n        let message = 'Application Insights: ';\n        message += error.statusText ? error.statusText + ': ' : '';\n\n        if (error.data && error.data.error && error.data.error.code === 'PathNotFoundError') {\n          message += 'Invalid Application Id for Application Insights service.';\n        } else if (error.data && error.data.error) {\n          message += error.data.error.code + '. ' + error.data.error.message;\n        } else {\n          message += 'Cannot connect to Application Insights REST API.';\n        }\n\n        return {\n          status: 'error',\n          message: message,\n        };\n      });\n  }\n\n  doRequest(url: any, maxRetries = 1) {\n    return this.backendSrv\n      .datasourceRequest({\n        url: this.url + url,\n        method: 'GET',\n      })\n      .catch((error: any) => {\n        if (maxRetries > 0) {\n          return this.doRequest(url, maxRetries - 1);\n        }\n\n        throw error;\n      });\n  }\n\n  getMetricNames() {\n    const url = `${this.baseUrl}/metrics/metadata`;\n    return this.doRequest(url).then(ResponseParser.parseMetricNames);\n  }\n\n  getMetricMetadata(metricName: string) {\n    const url = `${this.baseUrl}/metrics/metadata`;\n    return this.doRequest(url).then((result: any) => {\n      return new ResponseParser(result).parseMetadata(metricName);\n    });\n  }\n\n  getGroupBys(metricName: string) {\n    return this.getMetricMetadata(metricName).then((result: any) => {\n      return new ResponseParser(result).parseGroupBys();\n    });\n  }\n\n  getQuerySchema() {\n    const url = `${this.baseUrl}/query/schema`;\n    return this.doRequest(url).then((result: any) => {\n      const schema = new ResponseParser(result).parseQuerySchema();\n      // console.log(schema);\n      return schema;\n    });\n  }\n}\n","import _ from 'lodash';\nimport { dateTime } from '@grafana/data';\nimport {\n  AzureLogsVariable,\n  AzureLogsTableData,\n  KustoDatabase,\n  KustoFunction,\n  KustoTable,\n  KustoSchema,\n  KustoColumn,\n} from '../types';\nimport { TimeSeries, AnnotationEvent } from '@grafana/data';\n\nexport default class ResponseParser {\n  columns: string[];\n  constructor(private results: any) {}\n\n  parseQueryResult(): any {\n    let data: any[] = [];\n    let columns: any[] = [];\n    for (let i = 0; i < this.results.length; i++) {\n      if (this.results[i].result.data.tables.length === 0) {\n        continue;\n      }\n      columns = this.results[i].result.data.tables[0].columns;\n      const rows = this.results[i].result.data.tables[0].rows;\n\n      if (this.results[i].query.resultFormat === 'time_series') {\n        data = _.concat(data, this.parseTimeSeriesResult(this.results[i].query, columns, rows));\n      } else {\n        data = _.concat(data, this.parseTableResult(this.results[i].query, columns, rows));\n      }\n    }\n\n    return data;\n  }\n\n  parseTimeSeriesResult(query: { refId: string; query: any }, columns: any[], rows: any): TimeSeries[] {\n    const data: TimeSeries[] = [];\n    let timeIndex = -1;\n    let metricIndex = -1;\n    let valueIndex = -1;\n\n    for (let i = 0; i < columns.length; i++) {\n      if (timeIndex === -1 && columns[i].type === 'datetime') {\n        timeIndex = i;\n      }\n\n      if (metricIndex === -1 && columns[i].type === 'string') {\n        metricIndex = i;\n      }\n\n      if (valueIndex === -1 && ['int', 'long', 'real', 'double'].indexOf(columns[i].type) > -1) {\n        valueIndex = i;\n      }\n    }\n\n    if (timeIndex === -1) {\n      throw new Error('No datetime column found in the result. The Time Series format requires a time column.');\n    }\n\n    _.forEach(rows, row => {\n      const epoch = ResponseParser.dateTimeToEpoch(row[timeIndex]);\n      const metricName = metricIndex > -1 ? row[metricIndex] : columns[valueIndex].name;\n      const bucket = ResponseParser.findOrCreateBucket(data, metricName);\n      bucket.datapoints.push([row[valueIndex], epoch]);\n      bucket.refId = query.refId;\n      bucket.meta = {\n        query: query.query,\n      };\n    });\n\n    return data;\n  }\n\n  parseTableResult(query: { refId: string; query: string }, columns: any[], rows: any[]): AzureLogsTableData {\n    const tableResult: AzureLogsTableData = {\n      type: 'table',\n      columns: _.map(columns, col => {\n        return { text: col.name, type: col.type };\n      }),\n      rows: rows,\n      refId: query.refId,\n      meta: {\n        query: query.query,\n      },\n    };\n\n    return tableResult;\n  }\n\n  parseToVariables(): AzureLogsVariable[] {\n    const queryResult = this.parseQueryResult();\n\n    const variables: AzureLogsVariable[] = [];\n    _.forEach(queryResult, result => {\n      _.forEach(_.flattenDeep(result.rows), row => {\n        variables.push({\n          text: row,\n          value: row,\n        } as AzureLogsVariable);\n      });\n    });\n\n    return variables;\n  }\n\n  transformToAnnotations(options: any) {\n    const queryResult = this.parseQueryResult();\n\n    const list: AnnotationEvent[] = [];\n\n    _.forEach(queryResult, result => {\n      let timeIndex = -1;\n      let textIndex = -1;\n      let tagsIndex = -1;\n\n      for (let i = 0; i < result.columns.length; i++) {\n        if (timeIndex === -1 && result.columns[i].type === 'datetime') {\n          timeIndex = i;\n        }\n\n        if (textIndex === -1 && result.columns[i].text.toLowerCase() === 'text') {\n          textIndex = i;\n        }\n\n        if (tagsIndex === -1 && result.columns[i].text.toLowerCase() === 'tags') {\n          tagsIndex = i;\n        }\n      }\n\n      _.forEach(result.rows, row => {\n        list.push({\n          annotation: options.annotation,\n          time: Math.floor(ResponseParser.dateTimeToEpoch(row[timeIndex])),\n          text: row[textIndex] ? row[textIndex].toString() : '',\n          tags: row[tagsIndex] ? row[tagsIndex].trim().split(/\\s*,\\s*/) : [],\n        });\n      });\n    });\n\n    return list;\n  }\n\n  parseSchemaResult(): KustoSchema {\n    return {\n      Plugins: [\n        {\n          Name: 'pivot',\n        },\n      ],\n      Databases: this.createSchemaDatabaseWithTables(),\n    };\n  }\n\n  createSchemaDatabaseWithTables(): { [key: string]: KustoDatabase } {\n    const databases = {\n      Default: {\n        Name: 'Default',\n        Tables: this.createSchemaTables(),\n        Functions: this.createSchemaFunctions(),\n      },\n    };\n\n    return databases;\n  }\n\n  createSchemaTables(): { [key: string]: KustoTable } {\n    const tables: { [key: string]: KustoTable } = {};\n\n    for (const table of this.results.tables) {\n      tables[table.name] = {\n        Name: table.name,\n        OrderedColumns: [],\n      };\n      for (const col of table.columns) {\n        tables[table.name].OrderedColumns.push(this.convertToKustoColumn(col));\n      }\n    }\n\n    return tables;\n  }\n\n  convertToKustoColumn(col: any): KustoColumn {\n    return {\n      Name: col.name,\n      Type: col.type,\n    };\n  }\n\n  createSchemaFunctions(): { [key: string]: KustoFunction } {\n    const functions: { [key: string]: KustoFunction } = {};\n\n    for (const func of this.results.functions) {\n      functions[func.name] = {\n        Name: func.name,\n        Body: func.body,\n        DocString: func.displayName,\n        Folder: func.category,\n        FunctionKind: 'Unknown',\n        InputParameters: [],\n        OutputColumns: [],\n      };\n    }\n\n    return functions;\n  }\n\n  static findOrCreateBucket(data: TimeSeries[], target: any): TimeSeries {\n    let dataTarget: any = _.find(data, ['target', target]);\n    if (!dataTarget) {\n      dataTarget = { target: target, datapoints: [], refId: '', query: '' };\n      data.push(dataTarget);\n    }\n\n    return dataTarget;\n  }\n\n  static dateTimeToEpoch(dateTimeValue: any) {\n    return dateTime(dateTimeValue).valueOf();\n  }\n}\n","import _ from 'lodash';\nimport AzureMonitorDatasource from './azure_monitor/azure_monitor_datasource';\nimport AppInsightsDatasource from './app_insights/app_insights_datasource';\nimport AzureLogAnalyticsDatasource from './azure_log_analytics/azure_log_analytics_datasource';\nimport { AzureMonitorQuery, AzureDataSourceJsonData } from './types';\nimport { DataSourceApi, DataQueryRequest, DataSourceInstanceSettings } from '@grafana/ui';\nimport { BackendSrv } from 'app/core/services/backend_srv';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport { IQService } from 'angular';\n\nexport default class Datasource extends DataSourceApi<AzureMonitorQuery, AzureDataSourceJsonData> {\n  azureMonitorDatasource: AzureMonitorDatasource;\n  appInsightsDatasource: AppInsightsDatasource;\n  azureLogAnalyticsDatasource: AzureLogAnalyticsDatasource;\n\n  /** @ngInject */\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<AzureDataSourceJsonData>,\n    private backendSrv: BackendSrv,\n    private templateSrv: TemplateSrv,\n    private $q: IQService\n  ) {\n    super(instanceSettings);\n    this.azureMonitorDatasource = new AzureMonitorDatasource(instanceSettings, this.backendSrv, this.templateSrv);\n    this.appInsightsDatasource = new AppInsightsDatasource(\n      instanceSettings,\n      this.backendSrv,\n      this.templateSrv,\n      this.$q\n    );\n\n    this.azureLogAnalyticsDatasource = new AzureLogAnalyticsDatasource(\n      instanceSettings,\n      this.backendSrv,\n      this.templateSrv\n    );\n  }\n\n  async query(options: DataQueryRequest<AzureMonitorQuery>) {\n    const promises: any[] = [];\n    const azureMonitorOptions = _.cloneDeep(options);\n    const appInsightsOptions = _.cloneDeep(options);\n    const azureLogAnalyticsOptions = _.cloneDeep(options);\n\n    azureMonitorOptions.targets = _.filter(azureMonitorOptions.targets, ['queryType', 'Azure Monitor']);\n    appInsightsOptions.targets = _.filter(appInsightsOptions.targets, ['queryType', 'Application Insights']);\n    azureLogAnalyticsOptions.targets = _.filter(azureLogAnalyticsOptions.targets, ['queryType', 'Azure Log Analytics']);\n\n    if (azureMonitorOptions.targets.length > 0) {\n      const amPromise = this.azureMonitorDatasource.query(azureMonitorOptions);\n      if (amPromise) {\n        promises.push(amPromise);\n      }\n    }\n\n    if (appInsightsOptions.targets.length > 0) {\n      const aiPromise = this.appInsightsDatasource.query(appInsightsOptions);\n      if (aiPromise) {\n        promises.push(aiPromise);\n      }\n    }\n\n    if (azureLogAnalyticsOptions.targets.length > 0) {\n      const alaPromise = this.azureLogAnalyticsDatasource.query(azureLogAnalyticsOptions);\n      if (alaPromise) {\n        promises.push(alaPromise);\n      }\n    }\n\n    if (promises.length === 0) {\n      return this.$q.when({ data: [] });\n    }\n\n    return Promise.all(promises).then(results => {\n      return { data: _.flatten(results) };\n    });\n  }\n\n  async annotationQuery(options: any) {\n    return this.azureLogAnalyticsDatasource.annotationQuery(options);\n  }\n\n  async metricFindQuery(query: string) {\n    if (!query) {\n      return Promise.resolve([]);\n    }\n\n    const aiResult = this.appInsightsDatasource.metricFindQuery(query);\n    if (aiResult) {\n      return aiResult;\n    }\n\n    const amResult = this.azureMonitorDatasource.metricFindQuery(query);\n    if (amResult) {\n      return amResult;\n    }\n\n    const alaResult = this.azureLogAnalyticsDatasource.metricFindQuery(query);\n    if (alaResult) {\n      return alaResult;\n    }\n\n    return Promise.resolve([]);\n  }\n\n  async testDatasource() {\n    const promises: any[] = [];\n\n    if (this.azureMonitorDatasource.isConfigured()) {\n      promises.push(this.azureMonitorDatasource.testDatasource());\n    }\n\n    if (this.appInsightsDatasource.isConfigured()) {\n      promises.push(this.appInsightsDatasource.testDatasource());\n    }\n\n    if (this.azureLogAnalyticsDatasource.isConfigured()) {\n      promises.push(this.azureLogAnalyticsDatasource.testDatasource());\n    }\n\n    if (promises.length === 0) {\n      return {\n        status: 'error',\n        message: `Nothing configured. At least one of the API's must be configured.`,\n        title: 'Error',\n      };\n    }\n\n    return Promise.all(promises).then(results => {\n      let status = 'success';\n      let message = '';\n\n      for (let i = 0; i < results.length; i++) {\n        if (results[i].status !== 'success') {\n          status = results[i].status;\n        }\n        message += `${i + 1}. ${results[i].message} `;\n      }\n\n      return {\n        status: status,\n        message: message,\n        title: _.upperFirst(status),\n      };\n    });\n  }\n\n  /* Azure Monitor REST API methods */\n  getResourceGroups(subscriptionId: string) {\n    return this.azureMonitorDatasource.getResourceGroups(subscriptionId);\n  }\n\n  getMetricDefinitions(subscriptionId: string, resourceGroup: string) {\n    return this.azureMonitorDatasource.getMetricDefinitions(subscriptionId, resourceGroup);\n  }\n\n  getResourceNames(subscriptionId: string, resourceGroup: string, metricDefinition: string) {\n    return this.azureMonitorDatasource.getResourceNames(subscriptionId, resourceGroup, metricDefinition);\n  }\n\n  getMetricNames(\n    subscriptionId: string,\n    resourceGroup: string,\n    metricDefinition: string,\n    resourceName: string,\n    metricNamespace: string\n  ) {\n    return this.azureMonitorDatasource.getMetricNames(\n      subscriptionId,\n      resourceGroup,\n      metricDefinition,\n      resourceName,\n      metricNamespace\n    );\n  }\n\n  getMetricNamespaces(subscriptionId: string, resourceGroup: string, metricDefinition: string, resourceName: string) {\n    return this.azureMonitorDatasource.getMetricNamespaces(\n      subscriptionId,\n      resourceGroup,\n      metricDefinition,\n      resourceName\n    );\n  }\n\n  getMetricMetadata(\n    subscriptionId: string,\n    resourceGroup: string,\n    metricDefinition: string,\n    resourceName: string,\n    metricNamespace: string,\n    metricName: string\n  ) {\n    return this.azureMonitorDatasource.getMetricMetadata(\n      subscriptionId,\n      resourceGroup,\n      metricDefinition,\n      resourceName,\n      metricNamespace,\n      metricName\n    );\n  }\n\n  /* Application Insights API method */\n  getAppInsightsMetricNames() {\n    return this.appInsightsDatasource.getMetricNames();\n  }\n\n  getAppInsightsMetricMetadata(metricName: string) {\n    return this.appInsightsDatasource.getMetricMetadata(metricName);\n  }\n\n  getAppInsightsColumns(refId: string | number) {\n    return this.appInsightsDatasource.logAnalyticsColumns[refId];\n  }\n\n  /*Azure Log Analytics */\n  getAzureLogAnalyticsWorkspaces(subscriptionId: string) {\n    return this.azureLogAnalyticsDatasource.getWorkspaces(subscriptionId);\n  }\n\n  getSubscriptions() {\n    return this.azureMonitorDatasource.getSubscriptions();\n  }\n}\n","import _ from 'lodash';\nimport LogAnalyticsQuerystringBuilder from '../log_analytics/querystring_builder';\nimport ResponseParser from './response_parser';\nimport { AzureMonitorQuery, AzureDataSourceJsonData } from '../types';\nimport { DataQueryRequest, DataSourceInstanceSettings } from '@grafana/ui';\nimport { BackendSrv } from 'app/core/services/backend_srv';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\n\nexport default class AzureLogAnalyticsDatasource {\n  id: number;\n  url: string;\n  baseUrl: string;\n  applicationId: string;\n  azureMonitorUrl: string;\n  defaultOrFirstWorkspace: string;\n  subscriptionId: string;\n\n  /** @ngInject */\n  constructor(\n    private instanceSettings: DataSourceInstanceSettings<AzureDataSourceJsonData>,\n    private backendSrv: BackendSrv,\n    private templateSrv: TemplateSrv\n  ) {\n    this.id = instanceSettings.id;\n    this.baseUrl = this.instanceSettings.jsonData.azureLogAnalyticsSameAs\n      ? '/sameasloganalyticsazure'\n      : `/loganalyticsazure`;\n    this.url = instanceSettings.url;\n    this.defaultOrFirstWorkspace = this.instanceSettings.jsonData.logAnalyticsDefaultWorkspace;\n\n    this.setWorkspaceUrl();\n  }\n\n  isConfigured(): boolean {\n    return (\n      (!!this.instanceSettings.jsonData.logAnalyticsSubscriptionId &&\n        this.instanceSettings.jsonData.logAnalyticsSubscriptionId.length > 0) ||\n      !!this.instanceSettings.jsonData.azureLogAnalyticsSameAs\n    );\n  }\n\n  setWorkspaceUrl() {\n    if (!!this.instanceSettings.jsonData.subscriptionId || !!this.instanceSettings.jsonData.azureLogAnalyticsSameAs) {\n      this.subscriptionId = this.instanceSettings.jsonData.subscriptionId;\n      const azureCloud = this.instanceSettings.jsonData.cloudName || 'azuremonitor';\n      this.azureMonitorUrl = `/${azureCloud}/subscriptions`;\n    } else {\n      this.subscriptionId = this.instanceSettings.jsonData.logAnalyticsSubscriptionId;\n      this.azureMonitorUrl = `/workspacesloganalytics/subscriptions`;\n    }\n  }\n\n  getWorkspaces(subscription: string) {\n    const subscriptionId = this.templateSrv.replace(subscription || this.subscriptionId);\n\n    const workspaceListUrl =\n      this.azureMonitorUrl +\n      `/${subscriptionId}/providers/Microsoft.OperationalInsights/workspaces?api-version=2017-04-26-preview`;\n    return this.doRequest(workspaceListUrl).then((response: any) => {\n      return (\n        _.map(response.data.value, val => {\n          return { text: val.name, value: val.properties.customerId };\n        }) || []\n      );\n    });\n  }\n\n  getSchema(workspace: string) {\n    if (!workspace) {\n      return Promise.resolve();\n    }\n    const url = `${this.baseUrl}/${workspace}/metadata`;\n\n    return this.doRequest(url).then((response: any) => {\n      return new ResponseParser(response.data).parseSchemaResult();\n    });\n  }\n\n  async query(options: DataQueryRequest<AzureMonitorQuery>) {\n    const queries = _.filter(options.targets, item => {\n      return item.hide !== true;\n    }).map(target => {\n      const item = target.azureLogAnalytics;\n\n      const querystringBuilder = new LogAnalyticsQuerystringBuilder(\n        this.templateSrv.replace(item.query, options.scopedVars, this.interpolateVariable),\n        options,\n        'TimeGenerated'\n      );\n      const generated = querystringBuilder.generate();\n\n      const workspace = this.templateSrv.replace(item.workspace, options.scopedVars);\n\n      const url = `${this.baseUrl}/${workspace}/query?${generated.uriString}`;\n\n      return {\n        refId: target.refId,\n        intervalMs: options.intervalMs,\n        maxDataPoints: options.maxDataPoints,\n        datasourceId: this.id,\n        url: url,\n        query: generated.rawQuery,\n        format: target.format,\n        resultFormat: item.resultFormat,\n      };\n    });\n\n    if (!queries || queries.length === 0) {\n      return;\n    }\n\n    const promises = this.doQueries(queries);\n\n    return Promise.all(promises).then(results => {\n      return new ResponseParser(results).parseQueryResult();\n    });\n  }\n\n  metricFindQuery(query: string) {\n    return this.getDefaultOrFirstWorkspace().then((workspace: any) => {\n      const queries: any[] = this.buildQuery(query, null, workspace);\n\n      const promises = this.doQueries(queries);\n\n      return Promise.all(promises)\n        .then(results => {\n          return new ResponseParser(results).parseToVariables();\n        })\n        .catch(err => {\n          if (\n            err.error &&\n            err.error.data &&\n            err.error.data.error &&\n            err.error.data.error.innererror &&\n            err.error.data.error.innererror.innererror\n          ) {\n            throw { message: err.error.data.error.innererror.innererror.message };\n          } else if (err.error && err.error.data && err.error.data.error) {\n            throw { message: err.error.data.error.message };\n          }\n        });\n    });\n  }\n\n  private buildQuery(query: string, options: any, workspace: any) {\n    const querystringBuilder = new LogAnalyticsQuerystringBuilder(\n      this.templateSrv.replace(query, {}, this.interpolateVariable),\n      options,\n      'TimeGenerated'\n    );\n    const querystring = querystringBuilder.generate().uriString;\n    const url = `${this.baseUrl}/${workspace}/query?${querystring}`;\n    const queries: any[] = [];\n    queries.push({\n      datasourceId: this.id,\n      url: url,\n      resultFormat: 'table',\n    });\n    return queries;\n  }\n\n  interpolateVariable(value: string, variable: { multi: any; includeAll: any }) {\n    if (typeof value === 'string') {\n      if (variable.multi || variable.includeAll) {\n        return \"'\" + value + \"'\";\n      } else {\n        return value;\n      }\n    }\n\n    if (typeof value === 'number') {\n      return value;\n    }\n\n    const quotedValues = _.map(value, val => {\n      if (typeof value === 'number') {\n        return value;\n      }\n\n      return \"'\" + val + \"'\";\n    });\n    return quotedValues.join(',');\n  }\n\n  getDefaultOrFirstWorkspace() {\n    if (this.defaultOrFirstWorkspace) {\n      return Promise.resolve(this.defaultOrFirstWorkspace);\n    }\n\n    return this.getWorkspaces(this.subscriptionId).then((workspaces: any[]) => {\n      this.defaultOrFirstWorkspace = workspaces[0].value;\n      return this.defaultOrFirstWorkspace;\n    });\n  }\n\n  annotationQuery(options: any) {\n    if (!options.annotation.rawQuery) {\n      return Promise.reject({\n        message: 'Query missing in annotation definition',\n      });\n    }\n\n    const queries: any[] = this.buildQuery(options.annotation.rawQuery, options, options.annotation.workspace);\n\n    const promises = this.doQueries(queries);\n\n    return Promise.all(promises).then(results => {\n      const annotations = new ResponseParser(results).transformToAnnotations(options);\n      return annotations;\n    });\n  }\n\n  doQueries(queries: any[]) {\n    return _.map(queries, query => {\n      return this.doRequest(query.url)\n        .then((result: any) => {\n          return {\n            result: result,\n            query: query,\n          };\n        })\n        .catch((err: any) => {\n          throw {\n            error: err,\n            query: query,\n          };\n        });\n    });\n  }\n\n  doRequest(url: string, maxRetries = 1) {\n    return this.backendSrv\n      .datasourceRequest({\n        url: this.url + url,\n        method: 'GET',\n      })\n      .catch((error: any) => {\n        if (maxRetries > 0) {\n          return this.doRequest(url, maxRetries - 1);\n        }\n\n        throw error;\n      });\n  }\n\n  testDatasource() {\n    const validationError = this.isValidConfig();\n    if (validationError) {\n      return validationError;\n    }\n\n    return this.getDefaultOrFirstWorkspace()\n      .then((ws: any) => {\n        const url = `${this.baseUrl}/${ws}/metadata`;\n\n        return this.doRequest(url);\n      })\n      .then((response: any) => {\n        if (response.status === 200) {\n          return {\n            status: 'success',\n            message: 'Successfully queried the Azure Log Analytics service.',\n            title: 'Success',\n          };\n        }\n\n        return {\n          status: 'error',\n          message: 'Returned http status code ' + response.status,\n        };\n      })\n      .catch((error: any) => {\n        let message = 'Azure Log Analytics: ';\n        if (error.config && error.config.url && error.config.url.indexOf('workspacesloganalytics') > -1) {\n          message = 'Azure Log Analytics requires access to Azure Monitor but had the following error: ';\n        }\n\n        message = this.getErrorMessage(message, error);\n\n        return {\n          status: 'error',\n          message: message,\n        };\n      });\n  }\n\n  private getErrorMessage(message: string, error: any) {\n    message += error.statusText ? error.statusText + ': ' : '';\n    if (error.data && error.data.error && error.data.error.code) {\n      message += error.data.error.code + '. ' + error.data.error.message;\n    } else if (error.data && error.data.error) {\n      message += error.data.error;\n    } else if (error.data) {\n      message += error.data;\n    } else {\n      message += 'Cannot connect to Azure Log Analytics REST API.';\n    }\n    return message;\n  }\n\n  isValidConfig() {\n    if (this.instanceSettings.jsonData.azureLogAnalyticsSameAs) {\n      return undefined;\n    }\n\n    if (!this.isValidConfigField(this.instanceSettings.jsonData.logAnalyticsSubscriptionId)) {\n      return {\n        status: 'error',\n        message: 'The Subscription Id field is required.',\n      };\n    }\n\n    if (!this.isValidConfigField(this.instanceSettings.jsonData.logAnalyticsTenantId)) {\n      return {\n        status: 'error',\n        message: 'The Tenant Id field is required.',\n      };\n    }\n\n    if (!this.isValidConfigField(this.instanceSettings.jsonData.logAnalyticsClientId)) {\n      return {\n        status: 'error',\n        message: 'The Client Id field is required.',\n      };\n    }\n\n    return undefined;\n  }\n\n  isValidConfigField(field: string) {\n    return field && field.length > 0;\n  }\n}\n","import React, { ChangeEvent, PureComponent } from 'react';\nimport { SelectableValue } from '@grafana/data';\nimport { Input, FormLabel, Select, Button } from '@grafana/ui';\n\nexport interface Props {\n  selectedAzureCloud?: string;\n  selectedSubscription?: string;\n  azureCloudOptions?: SelectableValue[];\n  tenantId: string;\n  clientId: string;\n  clientSecret: string;\n  clientSecretConfigured: boolean;\n  subscriptionOptions?: SelectableValue[];\n  onAzureCloudChange?: (value: SelectableValue<string>) => void;\n  onSubscriptionSelectChange?: (value: SelectableValue<string>) => void;\n  onTenantIdChange: (tenantId: string) => void;\n  onClientIdChange: (clientId: string) => void;\n  onClientSecretChange: (clientSecret: string) => void;\n  onResetClientSecret: () => void;\n  onLoadSubscriptions?: () => void;\n}\n\nexport interface State {\n  selectedAzureCloud?: string;\n  selectedSubscription: string;\n  tenantId: string;\n  clientId: string;\n  clientSecret: string;\n  clientSecretConfigured: boolean;\n}\n\nexport class AzureCredentialsForm extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    const {\n      selectedAzureCloud,\n      selectedSubscription,\n      tenantId,\n      clientId,\n      clientSecret,\n      clientSecretConfigured,\n    } = this.props;\n\n    this.state = {\n      selectedAzureCloud,\n      selectedSubscription,\n      tenantId,\n      clientId,\n      clientSecret,\n      clientSecretConfigured,\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps: Props, prevState: Props) {\n    const { selectedAzureCloud, tenantId, clientId, clientSecret, clientSecretConfigured } = nextProps;\n    return {\n      selectedAzureCloud,\n      tenantId,\n      clientId,\n      clientSecret,\n      clientSecretConfigured,\n    };\n  }\n\n  render() {\n    const {\n      azureCloudOptions,\n      subscriptionOptions,\n      onAzureCloudChange,\n      onSubscriptionSelectChange,\n      onTenantIdChange,\n      onClientIdChange,\n      onClientSecretChange,\n      onResetClientSecret,\n      onLoadSubscriptions,\n    } = this.props;\n    const {\n      selectedAzureCloud,\n      selectedSubscription,\n      tenantId,\n      clientId,\n      clientSecret,\n      clientSecretConfigured,\n    } = this.state;\n    const hasRequiredFields = tenantId && clientId && (clientSecret || clientSecretConfigured);\n    const hasSubscriptions = onLoadSubscriptions && subscriptionOptions;\n    return (\n      <>\n        <div className=\"gf-form-group\">\n          {azureCloudOptions && (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <FormLabel className=\"width-12\" tooltip=\"Choose an Azure Cloud.\">\n                  Azure Cloud\n                </FormLabel>\n                <Select\n                  className=\"width-15\"\n                  value={azureCloudOptions.find(azureCloud => azureCloud.value === selectedAzureCloud)}\n                  options={azureCloudOptions}\n                  defaultValue={selectedAzureCloud}\n                  onChange={onAzureCloudChange}\n                />\n              </div>\n            </div>\n          )}\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <FormLabel className=\"width-12\">Directory (tenant) ID</FormLabel>\n              <div className=\"width-15\">\n                <Input\n                  className=\"width-30\"\n                  placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n                  value={tenantId}\n                  onChange={(event: ChangeEvent<HTMLInputElement>) => onTenantIdChange(event.target.value)}\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <FormLabel className=\"width-12\">Application (client) ID</FormLabel>\n              <div className=\"width-15\">\n                <Input\n                  className=\"width-30\"\n                  placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n                  value={clientId}\n                  onChange={(event: ChangeEvent<HTMLInputElement>) => onClientIdChange(event.target.value)}\n                />\n              </div>\n            </div>\n          </div>\n          {clientSecretConfigured ? (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <FormLabel className=\"width-12\">Client Secret</FormLabel>\n                <Input className=\"width-25\" placeholder=\"configured\" disabled={true} />\n              </div>\n              <div className=\"gf-form\">\n                <div className=\"max-width-30 gf-form-inline\">\n                  <Button variant=\"secondary\" type=\"button\" onClick={onResetClientSecret}>\n                    reset\n                  </Button>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <FormLabel className=\"width-12\">Client Secret</FormLabel>\n                <div className=\"width-15\">\n                  <Input\n                    className=\"width-30\"\n                    placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n                    value={clientSecret}\n                    onChange={(event: ChangeEvent<HTMLInputElement>) => onClientSecretChange(event.target.value)}\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n          {hasSubscriptions && (\n            <>\n              <div className=\"gf-form-inline\">\n                <div className=\"gf-form\">\n                  <FormLabel className=\"width-12\">Default Subscription</FormLabel>\n                  <div className=\"width-25\">\n                    <Select\n                      value={subscriptionOptions.find(subscription => subscription.value === selectedSubscription)}\n                      options={subscriptionOptions}\n                      defaultValue={selectedSubscription}\n                      onChange={onSubscriptionSelectChange}\n                    />\n                  </div>\n                </div>\n              </div>\n              <div className=\"gf-form-inline\">\n                <div className=\"gf-form\">\n                  <div className=\"max-width-30 gf-form-inline\">\n                    <Button\n                      variant=\"secondary\"\n                      size=\"sm\"\n                      type=\"button\"\n                      onClick={onLoadSubscriptions}\n                      disabled={!hasRequiredFields}\n                    >\n                      Load Subscriptions\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </>\n          )}\n        </div>\n      </>\n    );\n  }\n}\n\nexport default AzureCredentialsForm;\n","import React, { PureComponent } from 'react';\nimport { SelectableValue } from '@grafana/data';\nimport { AzureCredentialsForm } from './AzureCredentialsForm';\n\nexport interface Props {\n  datasourceConfig: any;\n  subscriptions: SelectableValue[];\n  onDatasourceUpdate: (config: any) => void;\n  onLoadSubscriptions: () => void;\n}\n\nexport interface State {\n  config: any;\n  azureClouds: SelectableValue[];\n  subscriptions: SelectableValue[];\n}\n\nexport class MonitorConfig extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    const { datasourceConfig } = this.props;\n\n    this.state = {\n      config: datasourceConfig,\n      azureClouds: [\n        { value: 'azuremonitor', label: 'Azure' },\n        { value: 'govazuremonitor', label: 'Azure US Government' },\n        { value: 'germanyazuremonitor', label: 'Azure Germany' },\n        { value: 'chinaazuremonitor', label: 'Azure China' },\n      ],\n      subscriptions: [],\n    };\n  }\n\n  static getDerivedStateFromProps(props: Props, state: State) {\n    return {\n      ...state,\n      config: props.datasourceConfig,\n      subscriptions: props.subscriptions,\n    };\n  }\n\n  onAzureCloudSelect = (cloudName: SelectableValue<string>) => {\n    this.props.onDatasourceUpdate({\n      ...this.state.config,\n      jsonData: {\n        ...this.state.config.jsonData,\n        cloudName,\n      },\n    });\n  };\n\n  onTenantIdChange = (tenantId: string) => {\n    this.props.onDatasourceUpdate({\n      ...this.state.config,\n      editorJsonData: {\n        ...this.state.config.editorJsonData,\n        tenantId,\n      },\n    });\n  };\n\n  onClientIdChange = (clientId: string) => {\n    this.props.onDatasourceUpdate({\n      ...this.state.config,\n      editorJsonData: {\n        ...this.state.config.editorJsonData,\n        clientId,\n      },\n    });\n  };\n\n  onClientSecretChange = (clientSecret: string) => {\n    this.props.onDatasourceUpdate({\n      ...this.state.config,\n      editorSecureJsonData: {\n        ...this.state.config.editorSecureJsonData,\n        clientSecret,\n      },\n    });\n  };\n\n  onResetClientSecret = () => {\n    this.props.onDatasourceUpdate({\n      ...this.state.config,\n      version: this.state.config.version + 1,\n      secureJsonFields: {\n        ...this.state.config.secureJsonFields,\n        clientSecret: false,\n      },\n    });\n  };\n\n  onSubscriptionSelect = (subscription: SelectableValue<string>) => {\n    this.props.onDatasourceUpdate({\n      ...this.state.config,\n      editorJsonData: {\n        ...this.state.config.editorJsonData,\n        subscriptionId: subscription.value,\n      },\n    });\n  };\n\n  render() {\n    const { azureClouds, config, subscriptions } = this.state;\n    return (\n      <>\n        <h3 className=\"page-heading\">Azure Monitor Details</h3>\n        <AzureCredentialsForm\n          selectedAzureCloud={config.jsonData.cloudName}\n          azureCloudOptions={azureClouds}\n          subscriptionOptions={subscriptions}\n          selectedSubscription={config.editorJsonData.subscriptionId}\n          tenantId={config.editorJsonData.tenantId}\n          clientId={config.editorJsonData.clientId}\n          clientSecret={config.editorSecureJsonData.clientSecret}\n          clientSecretConfigured={config.secureJsonFields.clientSecret}\n          onAzureCloudChange={this.onAzureCloudSelect}\n          onSubscriptionSelectChange={this.onSubscriptionSelect}\n          onTenantIdChange={this.onTenantIdChange}\n          onClientIdChange={this.onClientIdChange}\n          onClientSecretChange={this.onClientSecretChange}\n          onResetClientSecret={this.onResetClientSecret}\n          onLoadSubscriptions={this.props.onLoadSubscriptions}\n        />\n      </>\n    );\n  }\n}\n\nexport default MonitorConfig;\n","import React, { PureComponent } from 'react';\nimport { SelectableValue } from '@grafana/data';\nimport { AzureCredentialsForm } from './AzureCredentialsForm';\nimport { Switch, FormLabel, Select, Button } from '@grafana/ui';\n\nexport interface Props {\n  datasourceConfig: any;\n  logAnalyticsSubscriptions: SelectableValue[];\n  logAnalyticsWorkspaces: SelectableValue[];\n  onDatasourceUpdate: (config: any) => void;\n  onLoadSubscriptions: (type?: string) => void;\n  onLoadWorkspaces: (type?: string) => void;\n}\n\nexport interface State {\n  config: any;\n  logAnalyticsSubscriptions: SelectableValue[];\n  logAnalyticsWorkspaces: SelectableValue[];\n}\n\nexport class AnalyticsConfig extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    const { datasourceConfig } = this.props;\n\n    this.state = {\n      config: datasourceConfig,\n      logAnalyticsSubscriptions: [],\n      logAnalyticsWorkspaces: [],\n    };\n  }\n\n  static getDerivedStateFromProps(props: Props, state: State) {\n    return {\n      ...state,\n      config: props.datasourceConfig,\n      logAnalyticsSubscriptions: props.logAnalyticsSubscriptions,\n      logAnalyticsWorkspaces: props.logAnalyticsWorkspaces,\n    };\n  }\n\n  onLogAnalyticsTenantIdChange = (logAnalyticsTenantId: string) => {\n    this.props.onDatasourceUpdate({\n      ...this.state.config,\n      editorJsonData: {\n        ...this.state.config.editorJsonData,\n        logAnalyticsTenantId,\n      },\n    });\n  };\n\n  onLogAnalyticsClientIdChange = (logAnalyticsClientId: string) => {\n    this.props.onDatasourceUpdate({\n      ...this.state.config,\n      editorJsonData: {\n        ...this.state.config.editorJsonData,\n        logAnalyticsClientId,\n      },\n    });\n  };\n\n  onLogAnalyticsClientSecretChange = (logAnalyticsClientSecret: string) => {\n    this.props.onDatasourceUpdate({\n      ...this.state.config,\n      editorSecureJsonData: {\n        ...this.state.config.editorSecureJsonData,\n        logAnalyticsClientSecret,\n      },\n    });\n  };\n\n  onLogAnalyticsResetClientSecret = () => {\n    this.props.onDatasourceUpdate({\n      ...this.state.config,\n      version: this.state.config.version + 1,\n      secureJsonFields: { ...this.state.config.secureJsonFields, logAnalyticsClientSecret: false },\n    });\n  };\n\n  onLogAnalyticsSubscriptionSelect = (logAnalyticsSubscription: SelectableValue<string>) => {\n    this.props.onDatasourceUpdate({\n      ...this.state.config,\n      editorJsonData: {\n        ...this.state.config.editorJsonData,\n        logAnalyticsSubscriptionId: logAnalyticsSubscription.value,\n      },\n    });\n  };\n\n  onWorkspaceSelectChange = (logAnalyticsDefaultWorkspace: SelectableValue<string>) => {\n    this.props.onDatasourceUpdate({\n      ...this.state.config,\n      editorJsonData: {\n        ...this.state.config.editorJsonData,\n        logAnalyticsDefaultWorkspace: logAnalyticsDefaultWorkspace.value,\n      },\n    });\n  };\n\n  onAzureLogAnalyticsSameAsChange = (azureLogAnalyticsSameAs: boolean) => {\n    this.props.onDatasourceUpdate({\n      ...this.state.config,\n      jsonData: {\n        ...this.state.config.jsonData,\n        azureLogAnalyticsSameAs,\n      },\n    });\n  };\n\n  hasWorkspaceRequiredFields = () => {\n    const {\n      config: { editorJsonData, editorSecureJsonData, jsonData, secureJsonFields },\n    } = this.state;\n\n    if (jsonData.azureLogAnalyticsSameAs) {\n      return (\n        editorJsonData.tenantId &&\n        editorJsonData.clientId &&\n        editorJsonData.subscriptionId &&\n        (editorSecureJsonData.clientSecret || secureJsonFields.clientSecret)\n      );\n    }\n\n    return (\n      editorJsonData.logAnalyticsTenantId.length &&\n      editorJsonData.logAnalyticsClientId.length &&\n      editorJsonData.logAnalyticsSubscriptionId &&\n      (secureJsonFields.logAnalyticsClientSecret || editorSecureJsonData.logAnalyticsClientSecret)\n    );\n  };\n\n  render() {\n    const {\n      config: { editorJsonData, editorSecureJsonData, jsonData, secureJsonFields },\n      logAnalyticsSubscriptions,\n      logAnalyticsWorkspaces,\n    } = this.state;\n\n    const addtlAttrs = {\n      ...(jsonData.azureLogAnalyticsSameAs && {\n        tooltip: 'Workspaces are pulled from default subscription selected above.',\n      }),\n    };\n    return (\n      <>\n        <h3 className=\"page-heading\">Azure Log Analytics API Details</h3>\n        <Switch\n          label=\"Same details as Azure Monitor API\"\n          checked={jsonData.azureLogAnalyticsSameAs}\n          onChange={event => this.onAzureLogAnalyticsSameAsChange(!jsonData.azureLogAnalyticsSameAs)}\n          {...addtlAttrs}\n        />\n        {!jsonData.azureLogAnalyticsSameAs && (\n          <AzureCredentialsForm\n            subscriptionOptions={logAnalyticsSubscriptions}\n            selectedSubscription={editorJsonData.logAnalyticsSubscriptionId}\n            tenantId={editorJsonData.logAnalyticsTenantId}\n            clientId={editorJsonData.logAnalyticsClientId}\n            clientSecret={editorSecureJsonData.logAnalyticsClientSecret}\n            clientSecretConfigured={secureJsonFields.logAnalyticsClientSecret}\n            onSubscriptionSelectChange={this.onLogAnalyticsSubscriptionSelect}\n            onTenantIdChange={this.onLogAnalyticsTenantIdChange}\n            onClientIdChange={this.onLogAnalyticsClientIdChange}\n            onClientSecretChange={this.onLogAnalyticsClientSecretChange}\n            onResetClientSecret={this.onLogAnalyticsResetClientSecret}\n            onLoadSubscriptions={() => this.props.onLoadSubscriptions('workspacesloganalytics')}\n          />\n        )}\n        <div className=\"gf-form-group\">\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <FormLabel\n                className=\"width-12\"\n                tooltip=\"Choose the default/preferred Workspace for Azure Log Analytics queries.\"\n              >\n                Default Workspace\n              </FormLabel>\n              <div className=\"width-25\">\n                <Select\n                  value={logAnalyticsWorkspaces.find(\n                    workspace => workspace.value === editorJsonData.logAnalyticsDefaultWorkspace\n                  )}\n                  options={logAnalyticsWorkspaces}\n                  defaultValue={editorJsonData.logAnalyticsDefaultWorkspace}\n                  onChange={this.onWorkspaceSelectChange}\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <div className=\"max-width-30 gf-form-inline\">\n                <Button\n                  variant=\"secondary\"\n                  size=\"sm\"\n                  type=\"button\"\n                  onClick={() => this.props.onLoadWorkspaces()}\n                  disabled={!this.hasWorkspaceRequiredFields()}\n                >\n                  Load Workspaces\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default AnalyticsConfig;\n","import React, { PureComponent } from 'react';\nimport { FormLabel, Button, Input } from '@grafana/ui';\n\nexport interface Props {\n  datasourceConfig: any;\n  onDatasourceUpdate: (config: any) => void;\n}\n\nexport interface State {\n  config: any;\n}\n\nexport class InsightsConfig extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    const { datasourceConfig } = this.props;\n\n    this.state = {\n      config: datasourceConfig,\n    };\n  }\n\n  static getDerivedStateFromProps(props: Props, state: State) {\n    return {\n      ...state,\n      config: props.datasourceConfig,\n    };\n  }\n\n  onAppInsightsAppIdChange = (appInsightsAppId: string) => {\n    this.props.onDatasourceUpdate({\n      ...this.state.config,\n      editorJsonData: {\n        ...this.state.config.editorJsonData,\n        appInsightsAppId,\n      },\n    });\n  };\n\n  onAppInsightsApiKeyChange = (appInsightsApiKey: string) => {\n    this.props.onDatasourceUpdate({\n      ...this.state.config,\n      editorSecureJsonData: {\n        ...this.state.config.editorSecureJsonData,\n        appInsightsApiKey,\n      },\n    });\n  };\n\n  onAppInsightsResetApiKey = () => {\n    this.props.onDatasourceUpdate({\n      ...this.state.config,\n      version: this.state.config.version + 1,\n      secureJsonFields: {\n        ...this.state.config.secureJsonFields,\n        appInsightsApiKey: false,\n      },\n    });\n  };\n\n  render() {\n    const { config } = this.state;\n    return (\n      <>\n        <h3 className=\"page-heading\">Application Insights Details</h3>\n        <div className=\"gf-form-group\">\n          {config.secureJsonFields.appInsightsApiKey ? (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <FormLabel className=\"width-12\">API Key</FormLabel>\n                <Input className=\"width-25\" placeholder=\"configured\" disabled={true} />\n              </div>\n              <div className=\"gf-form\">\n                <div className=\"max-width-30 gf-form-inline\">\n                  <Button variant=\"secondary\" type=\"button\" onClick={this.onAppInsightsResetApiKey}>\n                    reset\n                  </Button>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <FormLabel className=\"width-12\">API Key</FormLabel>\n                <div className=\"width-15\">\n                  <Input\n                    className=\"width-30\"\n                    placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n                    value={config.editorSecureJsonData.appInsightsApiKey}\n                    onChange={event => this.onAppInsightsApiKeyChange(event.target.value)}\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <FormLabel className=\"width-12\">Application ID</FormLabel>\n              <div className=\"width-15\">\n                <Input\n                  className=\"width-30\"\n                  value={config.editorJsonData.appInsightsAppId}\n                  onChange={event => this.onAppInsightsAppIdChange(event.target.value)}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default InsightsConfig;\n","import React, { PureComponent } from 'react';\nimport { SelectableValue } from '@grafana/data';\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/ui';\nimport { MonitorConfig } from './components/MonitorConfig';\nimport { AnalyticsConfig } from './components/AnalyticsConfig';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport { getBackendSrv, BackendSrv } from 'app/core/services/backend_srv';\nimport AzureMonitorDatasource from './azure_monitor/azure_monitor_datasource';\nimport AzureLogAnalyticsDatasource from './azure_log_analytics/azure_log_analytics_datasource';\nimport { InsightsConfig } from './components/InsightsConfig';\n\nexport type Props = DataSourcePluginOptionsEditorProps<any>;\n\nexport interface State {\n  config: any;\n  subscriptions: SelectableValue[];\n  logAnalyticsSubscriptions: SelectableValue[];\n  logAnalyticsWorkspaces: SelectableValue[];\n}\n\nexport class ConfigEditor extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    const { options } = this.props;\n\n    this.state = {\n      config: ConfigEditor.keyFill(options),\n      subscriptions: [],\n      logAnalyticsSubscriptions: [],\n      logAnalyticsWorkspaces: [],\n    };\n\n    this.backendSrv = getBackendSrv();\n    this.templateSrv = new TemplateSrv();\n\n    if (options.id) {\n      this.state.config.url = '/api/datasources/proxy/' + options.id;\n      this.init();\n    }\n\n    this.updateDatasource(this.state.config);\n  }\n\n  static getDerivedStateFromProps(props: Props, state: State) {\n    return {\n      ...state,\n      config: ConfigEditor.keyFill(props.options),\n    };\n  }\n\n  static keyFill = (options: any) => {\n    options.jsonData.cloudName = options.jsonData.cloudName || 'azuremonitor';\n\n    if (!options.jsonData.hasOwnProperty('azureLogAnalyticsSameAs')) {\n      options.jsonData.azureLogAnalyticsSameAs = true;\n    }\n\n    if (!options.hasOwnProperty('editorSecureJsonData')) {\n      options.editorSecureJsonData = {\n        clientSecret: '',\n        logAnalyticsClientSecret: '',\n        appInsightsApiKey: '',\n      };\n    }\n\n    if (!options.hasOwnProperty('editorJsonData')) {\n      options.editorJsonData = {\n        clientId: options.jsonData.clientId || '',\n        tenantId: options.jsonData.tenantId || '',\n        subscriptionId: options.jsonData.subscriptionId || '',\n        logAnalyticsClientId: options.jsonData.logAnalyticsClientId || '',\n        logAnalyticsDefaultWorkspace: options.jsonData.logAnalyticsDefaultWorkspace || '',\n        logAnalyticsTenantId: options.jsonData.logAnalyticsTenantId || '',\n        logAnalyticsSubscriptionId: options.jsonData.logAnalyticsSubscriptionId || '',\n        appInsightsAppId: options.jsonData.appInsightsAppId || '',\n      };\n    }\n\n    if (!options.hasOwnProperty('secureJsonFields')) {\n      options.secureJsonFields = {\n        clientSecret: false,\n        logAnalyticsClientSecret: false,\n        appInsightsApiKey: false,\n      };\n    }\n\n    return options;\n  };\n\n  backendSrv: BackendSrv = null;\n  templateSrv: TemplateSrv = null;\n\n  init = async () => {\n    await this.getSubscriptions();\n\n    if (!this.state.config.jsonData.azureLogAnalyticsSameAs) {\n      await this.getLogAnalyticsSubscriptions();\n    }\n  };\n\n  updateDatasource = async (config: any) => {\n    for (const j in config.jsonData) {\n      if (config.jsonData[j].length === 0) {\n        delete config.jsonData[j];\n      }\n    }\n\n    for (const k in config.secureJsonData) {\n      if (config.secureJsonData[k].length === 0) {\n        delete config.secureJsonData[k];\n      }\n    }\n\n    for (const m in config.editorJsonData) {\n      if (!config.hasOwnProperty('jsonData')) {\n        config.jsonData = {};\n      }\n      if (config.editorJsonData[m].length === 0) {\n        if (config.hasOwnProperty('jsonData') && config.jsonData.hasOwnProperty(m)) {\n          delete config.jsonData[m];\n        }\n      } else {\n        config.jsonData[m] = config.editorJsonData[m];\n      }\n    }\n\n    for (const l in config.editorSecureJsonData) {\n      if (!config.hasOwnProperty('secureJsonData')) {\n        config.secureJsonData = {};\n      }\n      if (config.editorSecureJsonData[l].length === 0) {\n        if (config.hasOwnProperty('secureJsonData') && config.secureJsonData.hasOwnProperty(l)) {\n          delete config.secureJsonData[l];\n        }\n      } else {\n        config.secureJsonData[l] = config.editorSecureJsonData[l];\n      }\n    }\n\n    this.props.onOptionsChange({\n      ...config,\n    });\n  };\n\n  hasNecessaryCredentials = () => {\n    if (!this.state.config.secureJsonFields.clientSecret && !this.state.config.editorSecureJsonData.clientSecret) {\n      return false;\n    }\n\n    if (!this.state.config.jsonData.clientId || !this.state.config.jsonData.tenantId) {\n      return false;\n    }\n\n    return true;\n  };\n\n  logAnalyticsHasNecessaryCredentials = () => {\n    if (\n      !this.state.config.secureJsonFields.logAnalyticsClientSecret &&\n      !this.state.config.editorSecureJsonData.logAnalyticsClientSecret\n    ) {\n      return false;\n    }\n\n    if (!this.state.config.jsonData.logAnalyticsClientId || !this.state.config.jsonData.logAnalyticsTenantId) {\n      return false;\n    }\n\n    return true;\n  };\n\n  onConfigUpdate = (config: any) => {\n    this.updateDatasource(config);\n  };\n\n  onLoadSubscriptions = async (type?: string) => {\n    await this.backendSrv.put(`/api/datasources/${this.state.config.id}`, this.state.config).then(() => {\n      this.updateDatasource({\n        ...this.state.config,\n        version: this.state.config.version + 1,\n      });\n    });\n\n    if (type && type === 'workspacesloganalytics') {\n      this.getLogAnalyticsSubscriptions();\n    } else {\n      this.getSubscriptions();\n    }\n  };\n\n  getSubscriptions = async () => {\n    if (!this.hasNecessaryCredentials()) {\n      return;\n    }\n\n    const azureMonitorDatasource = new AzureMonitorDatasource(this.state.config, this.backendSrv, this.templateSrv);\n\n    let subscriptions = (await azureMonitorDatasource.getSubscriptions()) || [];\n    subscriptions = subscriptions.map((subscription: any) => {\n      return {\n        value: subscription.value,\n        label: subscription.text,\n      };\n    });\n\n    if (subscriptions && subscriptions.length > 0) {\n      this.setState({ subscriptions });\n\n      this.state.config.editorJsonData.subscriptionId =\n        this.state.config.editorJsonData.subscriptionId || subscriptions[0].value;\n    }\n\n    if (this.state.config.editorJsonData.subscriptionId && this.state.config.jsonData.azureLogAnalyticsSameAs) {\n      await this.getWorkspaces();\n    }\n  };\n\n  getLogAnalyticsSubscriptions = async () => {\n    if (!this.logAnalyticsHasNecessaryCredentials()) {\n      return;\n    }\n\n    const azureMonitorDatasource = new AzureMonitorDatasource(this.state.config, this.backendSrv, this.templateSrv);\n\n    let logAnalyticsSubscriptions = (await azureMonitorDatasource.getSubscriptions('workspacesloganalytics')) || [];\n    logAnalyticsSubscriptions = logAnalyticsSubscriptions.map((subscription: any) => {\n      return {\n        value: subscription.value,\n        label: subscription.text,\n      };\n    });\n\n    if (logAnalyticsSubscriptions && logAnalyticsSubscriptions.length > 0) {\n      this.setState({ logAnalyticsSubscriptions });\n\n      this.state.config.editorJsonData.logAnalyticsSubscriptionId =\n        this.state.config.editorJsonData.logAnalyticsSubscriptionId || logAnalyticsSubscriptions[0].value;\n    }\n\n    if (this.state.config.editorJsonData.logAnalyticsSubscriptionId) {\n      await this.getWorkspaces();\n    }\n  };\n\n  getWorkspaces = async () => {\n    const sameAs =\n      this.state.config.jsonData.azureLogAnalyticsSameAs && this.state.config.editorJsonData.subscriptionId;\n    if (!sameAs && !this.state.config.editorJsonData.logAnalyticsSubscriptionId) {\n      return;\n    }\n\n    const azureLogAnalyticsDatasource = new AzureLogAnalyticsDatasource(\n      this.state.config,\n      this.backendSrv,\n      this.templateSrv\n    );\n\n    let logAnalyticsWorkspaces = await azureLogAnalyticsDatasource.getWorkspaces(\n      sameAs\n        ? this.state.config.editorJsonData.subscriptionId\n        : this.state.config.editorJsonData.logAnalyticsSubscriptionId\n    );\n    logAnalyticsWorkspaces = logAnalyticsWorkspaces.map((workspace: any) => {\n      return {\n        value: workspace.value,\n        label: workspace.text,\n      };\n    });\n\n    if (logAnalyticsWorkspaces.length > 0) {\n      this.setState({ logAnalyticsWorkspaces });\n\n      this.state.config.editorJsonData.logAnalyticsDefaultWorkspace =\n        this.state.config.editorJsonData.logAnalyticsDefaultWorkspace || logAnalyticsWorkspaces[0].value;\n    }\n  };\n\n  render() {\n    const { config, subscriptions, logAnalyticsSubscriptions, logAnalyticsWorkspaces } = this.state;\n\n    return (\n      <>\n        <MonitorConfig\n          datasourceConfig={config}\n          subscriptions={subscriptions}\n          onLoadSubscriptions={this.onLoadSubscriptions}\n          onDatasourceUpdate={this.onConfigUpdate}\n        />\n\n        <AnalyticsConfig\n          datasourceConfig={config}\n          logAnalyticsWorkspaces={logAnalyticsWorkspaces}\n          logAnalyticsSubscriptions={logAnalyticsSubscriptions}\n          onLoadSubscriptions={this.onLoadSubscriptions}\n          onDatasourceUpdate={this.onConfigUpdate}\n          onLoadWorkspaces={this.getWorkspaces}\n        />\n\n        <InsightsConfig datasourceConfig={config} onDatasourceUpdate={this.onConfigUpdate} />\n      </>\n    );\n  }\n}\n\nexport default ConfigEditor;\n","import { TemplateSrv } from 'app/features/templating/template_srv';\n\nexport class AzureMonitorAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n  datasource: any;\n  annotation: any;\n  workspaces: any[];\n  subscriptions: Array<{ text: string; value: string }>;\n\n  defaultQuery =\n    '<your table>\\n| where $__timeFilter() \\n| project TimeGenerated, Text=YourTitleColumn, Tags=\"tag1,tag2\"';\n\n  /** @ngInject */\n  constructor(private templateSrv: TemplateSrv) {\n    this.annotation.queryType = this.annotation.queryType || 'Azure Log Analytics';\n    this.annotation.rawQuery = this.annotation.rawQuery || this.defaultQuery;\n    this.initDropdowns();\n  }\n\n  async initDropdowns() {\n    await this.getSubscriptions();\n    await this.getWorkspaces();\n  }\n\n  async getSubscriptions() {\n    if (!this.datasource.azureMonitorDatasource.isConfigured()) {\n      return;\n    }\n\n    return this.datasource.azureMonitorDatasource.getSubscriptions().then((subs: any[]) => {\n      this.subscriptions = subs;\n\n      if (!this.annotation.subscription && this.annotation.queryType === 'Azure Log Analytics') {\n        this.annotation.subscription = this.datasource.azureLogAnalyticsDatasource.subscriptionId;\n      }\n\n      if (!this.annotation.subscription && this.subscriptions.length > 0) {\n        this.annotation.subscription = this.subscriptions[0].value;\n      }\n    });\n  }\n\n  async getWorkspaces(bustCache?: boolean) {\n    if (!bustCache && this.workspaces && this.workspaces.length > 0) {\n      return this.workspaces;\n    }\n\n    return this.datasource\n      .getAzureLogAnalyticsWorkspaces(this.annotation.subscription)\n      .then((list: any[]) => {\n        this.workspaces = list;\n        if (list.length > 0 && !this.annotation.workspace) {\n          this.annotation.workspace = list[0].value;\n        }\n        return this.workspaces;\n      })\n      .catch(() => {});\n  }\n\n  getAzureLogAnalyticsSchema = () => {\n    return this.getWorkspaces()\n      .then(() => {\n        return this.datasource.azureLogAnalyticsDatasource.getSchema(this.annotation.workspace);\n      })\n      .catch(() => {});\n  };\n\n  onSubscriptionChange = () => {\n    this.getWorkspaces(true);\n  };\n\n  onLogAnalyticsQueryChange = (nextQuery: string) => {\n    this.annotation.rawQuery = nextQuery;\n  };\n\n  get templateVariables() {\n    return this.templateSrv.variables.map((t: any) => '$' + t.name);\n  }\n}\n","import { DataSourcePlugin } from '@grafana/ui';\nimport { AzureMonitorQueryCtrl } from './query_ctrl';\nimport Datasource from './datasource';\nimport { ConfigEditor } from './ConfigEditor';\nimport { AzureMonitorAnnotationsQueryCtrl } from './annotations_query_ctrl';\n\nexport const plugin = new DataSourcePlugin(Datasource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryCtrl(AzureMonitorQueryCtrl)\n  .setAnnotationQueryCtrl(AzureMonitorAnnotationsQueryCtrl);\n"],"sourceRoot":""}