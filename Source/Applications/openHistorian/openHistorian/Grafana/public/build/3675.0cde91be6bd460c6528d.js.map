{"version":3,"file":"3675.0cde91be6bd460c6528d.js","mappings":"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","sources":["webpack://grafana/./public/app/features/admin/CrawlerStartButton.tsx","webpack://grafana/./public/app/features/admin/CrawlerStatus.tsx","webpack://grafana/./public/app/features/admin/ServerStats.tsx","webpack://grafana/./public/app/features/admin/state/apis.tsx","webpack://grafana/./public/app/features/admin/LicenseChrome.tsx","webpack://grafana/./public/app/features/admin/UpgradePage.tsx","webpack://grafana/./public/app/features/plugins/admin/components/Loader.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { getBackendSrv, config } from '@grafana/runtime';\nimport { Button, CodeEditor, Modal, useTheme2 } from '@grafana/ui';\n\nexport const CrawlerStartButton = () => {\n  const styles = getStyles(useTheme2());\n  const [open, setOpen] = useState(false);\n  const [body, setBody] = useState({\n    mode: 'thumbs',\n    theme: config.theme2.isLight ? 'light' : 'dark',\n  });\n  const onDismiss = () => setOpen(false);\n  const doStart = () => {\n    getBackendSrv()\n      .post('/api/admin/crawler/start', body)\n      .then((v) => {\n        console.log('GOT', v);\n        onDismiss();\n      });\n  };\n\n  return (\n    <>\n      <Modal title={'Start crawler'} isOpen={open} onDismiss={onDismiss}>\n        <div className={styles.wrap}>\n          <CodeEditor\n            height={200}\n            value={JSON.stringify(body, null, 2) ?? ''}\n            showLineNumbers={false}\n            readOnly={false}\n            language=\"json\"\n            showMiniMap={false}\n            onBlur={(text: string) => {\n              setBody(JSON.parse(text)); // force JSON?\n            }}\n          />\n        </div>\n        <Modal.ButtonRow>\n          <Button type=\"submit\" onClick={doStart}>\n            Start\n          </Button>\n          <Button variant=\"secondary\" onClick={onDismiss}>\n            Cancel\n          </Button>\n        </Modal.ButtonRow>\n      </Modal>\n\n      <Button onClick={() => setOpen(true)} variant=\"primary\">\n        Start\n      </Button>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrap: css`\n      border: 2px solid #111;\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\n\nimport { GrafanaTheme2, isLiveChannelMessageEvent, isLiveChannelStatusEvent, LiveChannelScope } from '@grafana/data';\nimport { getBackendSrv, getGrafanaLiveSrv } from '@grafana/runtime';\nimport { Button, useTheme2 } from '@grafana/ui';\n\nimport { CrawlerStartButton } from './CrawlerStartButton';\n\ninterface CrawlerStatusMessage {\n  state: string;\n  started: string;\n  finished: string;\n  complete: number;\n  queue: number;\n  last: string;\n}\n\nexport const CrawlerStatus = () => {\n  const styles = getStyles(useTheme2());\n  const [status, setStatus] = useState<CrawlerStatusMessage>();\n\n  useEffect(() => {\n    const subscription = getGrafanaLiveSrv()\n      .getStream<CrawlerStatusMessage>({\n        scope: LiveChannelScope.Grafana,\n        namespace: 'broadcast',\n        path: 'crawler',\n      })\n      .subscribe({\n        next: (evt) => {\n          if (isLiveChannelMessageEvent(evt)) {\n            setStatus(evt.message);\n          } else if (isLiveChannelStatusEvent(evt)) {\n            setStatus(evt.message);\n          }\n        },\n      });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, []);\n\n  if (!status) {\n    return (\n      <div className={styles.wrap}>\n        No status (never run)\n        <br />\n        <CrawlerStartButton />\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.wrap}>\n      <pre>{JSON.stringify(status, null, 2)}</pre>\n      {status.state !== 'running' && <CrawlerStartButton />}\n      {status.state !== 'stopped' && (\n        <Button\n          variant=\"secondary\"\n          onClick={() => {\n            getBackendSrv().post('/api/admin/crawler/stop');\n          }}\n        >\n          Stop\n        </Button>\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrap: css`\n      border: 4px solid red;\n    `,\n    running: css`\n      border: 4px solid green;\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { CardContainer, LinkButton, useStyles2 } from '@grafana/ui';\nimport { AccessControlAction } from 'app/types';\n\nimport { contextSrv } from '../../core/services/context_srv';\nimport { Loader } from '../plugins/admin/components/Loader';\n\nimport { CrawlerStatus } from './CrawlerStatus';\nimport { getServerStats, ServerStat } from './state/apis';\n\nexport const ServerStats = () => {\n  const [stats, setStats] = useState<ServerStat | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const styles = useStyles2(getStyles);\n\n  const hasAccessToDataSources = contextSrv.hasAccess(AccessControlAction.DataSourcesRead, contextSrv.isGrafanaAdmin);\n  const hasAccessToAdminUsers = contextSrv.hasAccess(AccessControlAction.UsersRead, contextSrv.isGrafanaAdmin);\n\n  useEffect(() => {\n    if (contextSrv.hasAccess(AccessControlAction.ActionServerStatsRead, contextSrv.isGrafanaAdmin)) {\n      setIsLoading(true);\n      getServerStats().then((stats) => {\n        setStats(stats);\n        setIsLoading(false);\n      });\n    }\n  }, []);\n\n  if (!contextSrv.hasAccess(AccessControlAction.ActionServerStatsRead, contextSrv.isGrafanaAdmin)) {\n    return null;\n  }\n\n  return (\n    <>\n      <h2 className={styles.title}>Instance statistics</h2>\n      {isLoading ? (\n        <div className={styles.loader}>\n          <Loader text={'Loading instance stats...'} />\n        </div>\n      ) : stats ? (\n        <div className={styles.row}>\n          <StatCard\n            content={[\n              { name: 'Dashboards (starred)', value: `${stats.dashboards} (${stats.stars})` },\n              { name: 'Tags', value: stats.tags },\n              { name: 'Playlists', value: stats.playlists },\n              { name: 'Snapshots', value: stats.snapshots },\n            ]}\n            footer={\n              <LinkButton href={'/dashboards'} variant={'secondary'}>\n                Manage dashboards\n              </LinkButton>\n            }\n          />\n\n          <div className={styles.doubleRow}>\n            <StatCard\n              content={[{ name: 'Data sources', value: stats.datasources }]}\n              footer={\n                hasAccessToDataSources && (\n                  <LinkButton href={'/datasources'} variant={'secondary'}>\n                    Manage data sources\n                  </LinkButton>\n                )\n              }\n            />\n            <StatCard\n              content={[{ name: 'Alerts', value: stats.alerts }]}\n              footer={\n                <LinkButton href={'/alerting/list'} variant={'secondary'}>\n                  Alerts\n                </LinkButton>\n              }\n            />\n          </div>\n          <StatCard\n            content={[\n              { name: 'Organisations', value: stats.orgs },\n              { name: 'Users total', value: stats.users },\n              { name: 'Active users in last 30 days', value: stats.activeUsers },\n              { name: 'Active sessions', value: stats.activeSessions },\n            ]}\n            footer={\n              hasAccessToAdminUsers && (\n                <LinkButton href={'/admin/users'} variant={'secondary'}>\n                  Manage users\n                </LinkButton>\n              )\n            }\n          />\n        </div>\n      ) : (\n        <p className={styles.notFound}>No stats found.</p>\n      )}\n\n      {config.featureToggles.dashboardPreviews && config.featureToggles.dashboardPreviewsAdmin && <CrawlerStatus />}\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    title: css`\n      margin-bottom: ${theme.spacing(4)};\n    `,\n    row: css`\n      display: flex;\n      justify-content: space-between;\n      width: 100%;\n\n      & > div:not(:last-of-type) {\n        margin-right: ${theme.spacing(2)};\n      }\n\n      & > div {\n        width: 33.3%;\n      }\n    `,\n    doubleRow: css`\n      display: flex;\n      flex-direction: column;\n\n      & > div:first-of-type {\n        margin-bottom: ${theme.spacing(2)};\n      }\n    `,\n\n    loader: css`\n      height: 290px;\n    `,\n\n    notFound: css`\n      font-size: ${theme.typography.h6.fontSize};\n      text-align: center;\n      height: 290px;\n    `,\n  };\n};\n\ntype StatCardProps = {\n  content: Array<Record<string, number | string>>;\n  footer?: JSX.Element | boolean;\n};\n\nconst StatCard = ({ content, footer }: StatCardProps) => {\n  const styles = useStyles2(getCardStyles);\n  return (\n    <CardContainer className={styles.container} disableHover>\n      <div className={styles.inner}>\n        <div className={styles.content}>\n          {content.map((item) => {\n            return (\n              <div key={item.name} className={styles.row}>\n                <span>{item.name}</span>\n                <span>{item.value}</span>\n              </div>\n            );\n          })}\n        </div>\n        {footer && <div>{footer}</div>}\n      </div>\n    </CardContainer>\n  );\n};\n\nconst getCardStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      padding: ${theme.spacing(2)};\n    `,\n    inner: css`\n      display: flex;\n      flex-direction: column;\n      width: 100%;\n    `,\n    content: css`\n      flex: 1 0 auto;\n    `,\n    row: css`\n      display: flex;\n      justify-content: space-between;\n      width: 100%;\n      margin-bottom: ${theme.spacing(2)};\n      align-items: center;\n    `,\n  };\n};\n","import { getBackendSrv } from '@grafana/runtime';\n\nexport interface ServerStat {\n  activeAdmins: number;\n  activeEditors: number;\n  activeSessions: number;\n  activeUsers: number;\n  activeViewers: number;\n  admins: number;\n  alerts: number;\n  dashboards: number;\n  datasources: number;\n  editors: number;\n  orgs: number;\n  playlists: number;\n  snapshots: number;\n  stars: number;\n  tags: number;\n  users: number;\n  viewers: number;\n}\n\nexport const getServerStats = async (): Promise<ServerStat | null> => {\n  return getBackendSrv()\n    .get('api/admin/stats')\n    .catch((err) => {\n      console.error(err);\n      return null;\n    });\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme } from '@grafana/data';\nimport { stylesFactory, useTheme } from '@grafana/ui';\n\nconst title = { fontWeight: 500, fontSize: '26px', lineHeight: '123%' };\n\nconst getStyles = stylesFactory((theme: GrafanaTheme) => {\n  const backgroundUrl = theme.isDark ? 'public/img/licensing/header_dark.svg' : 'public/img/licensing/header_light.svg';\n  const footerBg = theme.isDark ? theme.palette.dark9 : theme.palette.gray6;\n\n  return {\n    container: css`\n      padding: 36px 79px;\n      background: ${theme.colors.panelBg};\n    `,\n    footer: css`\n      text-align: center;\n      padding: 16px;\n      background: ${footerBg};\n    `,\n    header: css`\n      height: 137px;\n      padding: 40px 0 0 79px;\n      position: relative;\n      background: url('${backgroundUrl}') right;\n    `,\n  };\n});\n\ninterface Props {\n  header: string;\n  subheader?: string;\n  editionNotice?: string;\n  children?: React.ReactNode;\n}\n\nexport function LicenseChrome({ header, editionNotice, subheader, children }: Props) {\n  const theme = useTheme();\n  const styles = getStyles(theme);\n\n  return (\n    <>\n      <div className={styles.header}>\n        <h2 style={title}>{header}</h2>\n        {subheader && <h3>{subheader}</h3>}\n\n        <Circle\n          size=\"128px\"\n          style={{\n            boxShadow: '0px 0px 24px rgba(24, 58, 110, 0.45)',\n            background: '#0A1C36',\n            position: 'absolute',\n            top: '19px',\n            left: '71%',\n          }}\n        >\n          <img\n            src=\"public/img/grafana_icon.svg\"\n            alt=\"Grafana\"\n            width=\"80px\"\n            style={{ position: 'absolute', left: '23px', top: '20px' }}\n          />\n        </Circle>\n      </div>\n\n      <div className={styles.container}>{children}</div>\n\n      {editionNotice && <div className={styles.footer}>{editionNotice}</div>}\n    </>\n  );\n}\n\ninterface CircleProps {\n  size: string;\n  style?: React.CSSProperties;\n}\n\nexport const Circle: React.FC<CircleProps> = ({ size, style, children }) => {\n  return (\n    <div\n      style={{\n        width: size,\n        height: size,\n        position: 'absolute',\n        bottom: 0,\n        right: 0,\n        borderRadius: '50%',\n        ...style,\n      }}\n    >\n      {children}\n    </div>\n  );\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nimport { GrafanaTheme2, NavModel } from '@grafana/data';\nimport { LinkButton, useStyles2 } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\n\nimport { getNavModel } from '../../core/selectors/navModel';\nimport { StoreState } from '../../types';\n\nimport { LicenseChrome } from './LicenseChrome';\nimport { ServerStats } from './ServerStats';\n\ninterface Props {\n  navModel: NavModel;\n}\n\nexport function UpgradePage({ navModel }: Props) {\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        <ServerStats />\n        <UpgradeInfo\n          editionNotice=\"You are running the open-source version of Grafana.\n        You have to install the Enterprise edition in order enable Enterprise features.\"\n        />\n      </Page.Contents>\n    </Page>\n  );\n}\n\nconst titleStyles = { fontWeight: 500, fontSize: '26px', lineHeight: '123%' };\n\ninterface UpgradeInfoProps {\n  editionNotice?: string;\n}\n\nexport const UpgradeInfo: React.FC<UpgradeInfoProps> = ({ editionNotice }) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <>\n      <h2 className={styles.title}>Enterprise license</h2>\n      <LicenseChrome header=\"Grafana Enterprise\" subheader=\"Get your free trial\" editionNotice={editionNotice}>\n        <div className={styles.column}>\n          <FeatureInfo />\n          <ServiceInfo />\n        </div>\n      </LicenseChrome>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    column: css`\n      display: grid;\n      grid-template-columns: 100%;\n      column-gap: 20px;\n      row-gap: 40px;\n\n      @media (min-width: 1050px) {\n        grid-template-columns: 50% 50%;\n      }\n    `,\n    title: css`\n      margin: ${theme.spacing(4)} 0;\n    `,\n  };\n};\n\nconst GetEnterprise: React.FC = () => {\n  return (\n    <div style={{ marginTop: '40px', marginBottom: '30px' }}>\n      <h2 style={titleStyles}>Get Grafana Enterprise</h2>\n      <CallToAction />\n      <p style={{ paddingTop: '12px' }}>\n        You can use the trial version for free for 30 days. We will remind you about it five days before the trial\n        period ends.\n      </p>\n    </div>\n  );\n};\n\nconst CallToAction: React.FC = () => {\n  return (\n    <LinkButton\n      variant=\"primary\"\n      size=\"lg\"\n      href=\"https://grafana.com/contact?about=grafana-enterprise&utm_source=grafana-upgrade-page\"\n    >\n      Contact us and get a free trial\n    </LinkButton>\n  );\n};\n\nconst ServiceInfo: React.FC = () => {\n  return (\n    <div>\n      <h4>At your service</h4>\n\n      <List>\n        <Item title=\"Enterprise Plugins\" image=\"public/img/licensing/plugin_enterprise.svg\" />\n        <Item title=\"Critical SLA: 2 hours\" image=\"public/img/licensing/sla.svg\" />\n        <Item title=\"Unlimited Expert Support\" image=\"public/img/licensing/customer_support.svg\">\n          24 x 7 x 365 support via\n          <List nested={true}>\n            <Item title=\"Email\" />\n            <Item title=\"Private Slack channel\" />\n            <Item title=\"Phone\" />\n          </List>\n        </Item>\n        <Item title=\"Hand-in-hand support\" image=\"public/img/licensing/handinhand_support.svg\">\n          in the upgrade process\n        </Item>\n      </List>\n\n      <div style={{ marginTop: '20px' }}>\n        <strong>Also included:</strong>\n        <br />\n        Indemnification, working with Grafana Labs on future prioritization, and training from the core Grafana team.\n      </div>\n\n      <GetEnterprise />\n    </div>\n  );\n};\n\nconst FeatureInfo: React.FC = () => {\n  return (\n    <div style={{ paddingRight: '11px' }}>\n      <h4>Enhanced functionality</h4>\n      <FeatureListing />\n    </div>\n  );\n};\n\nconst FeatureListing: React.FC = () => {\n  return (\n    <List>\n      <Item title=\"Data source permissions\" />\n      <Item title=\"Reporting\" />\n      <Item title=\"SAML authentication\" />\n      <Item title=\"Enhanced LDAP integration\" />\n      <Item title=\"Team Sync\">LDAP, GitHub OAuth, Auth Proxy, Okta</Item>\n      <Item title=\"White labeling\" />\n      <Item title=\"Auditing\" />\n      <Item title=\"Settings updates at runtime\" />\n      <Item title=\"Grafana usage insights\">\n        <List nested={true}>\n          <Item title=\"Sort dashboards by popularity in search\" />\n          <Item title=\"Find unused dashboards\" />\n          <Item title=\"Dashboard usage stats drawer\" />\n          <Item title=\"Dashboard presence indicators\" />\n        </List>\n      </Item>\n      <Item title=\"Enterprise plugins\">\n        <List nested={true}>\n          <Item title=\"Oracle\" />\n          <Item title=\"Splunk\" />\n          <Item title=\"Service Now\" />\n          <Item title=\"Dynatrace\" />\n          <Item title=\"New Relic\" />\n          <Item title=\"DataDog\" />\n          <Item title=\"AppDynamics\" />\n          <Item title=\"SAP HANA®\" />\n          <Item title=\"Gitlab\" />\n          <Item title=\"Honeycomb\" />\n          <Item title=\"Jira\" />\n          <Item title=\"MongoDB\" />\n          <Item title=\"Salesforce\" />\n          <Item title=\"Snowflake\" />\n          <Item title=\"Wavefront\" />\n        </List>\n      </Item>\n    </List>\n  );\n};\n\ninterface ListProps {\n  nested?: boolean;\n}\n\nconst List: React.FC<ListProps> = ({ children, nested }) => {\n  const listStyle = css`\n    display: flex;\n    flex-direction: column;\n    padding-top: 8px;\n\n    > div {\n      margin-bottom: ${nested ? 0 : 8}px;\n    }\n  `;\n\n  return <div className={listStyle}>{children}</div>;\n};\n\ninterface ItemProps {\n  title: string;\n  image?: string;\n}\n\nconst Item: React.FC<ItemProps> = ({ children, title, image }) => {\n  const imageUrl = image ? image : 'public/img/licensing/checkmark.svg';\n  const itemStyle = css`\n    display: flex;\n\n    > img {\n      display: block;\n      height: 22px;\n      flex-grow: 0;\n      padding-right: 12px;\n    }\n  `;\n  const titleStyle = css`\n    font-weight: 500;\n    line-height: 1.7;\n  `;\n\n  return (\n    <div className={itemStyle}>\n      <img src={imageUrl} alt=\"\" />\n      <div>\n        <div className={titleStyle}>{title}</div>\n        {children}\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: StoreState) => ({\n  navModel: getNavModel(state.navIndex, 'upgrading'),\n});\n\nexport default connect(mapStateToProps)(UpgradePage);\n","import React from 'react';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\n\nexport interface Props {\n  text?: string;\n}\n\nexport const Loader = ({ text = 'Loading...' }: Props) => {\n  return (\n    <div className=\"page-loader-wrapper\">\n      <LoadingPlaceholder text={text} />\n    </div>\n  );\n};\n"],"names":["CrawlerStartButton","styles","getStyles","useTheme2","open","setOpen","useState","body","setBody","mode","theme","config","onDismiss","Modal","title","isOpen","className","wrap","CodeEditor","height","value","JSON","stringify","showLineNumbers","readOnly","language","showMiniMap","onBlur","text","parse","Button","type","onClick","getBackendSrv","post","then","v","console","log","variant","css","CrawlerStatus","status","setStatus","useEffect","subscription","getGrafanaLiveSrv","getStream","scope","LiveChannelScope","namespace","path","subscribe","next","evt","isLiveChannelMessageEvent","isLiveChannelStatusEvent","message","unsubscribe","state","running","ServerStats","stats","setStats","isLoading","setIsLoading","useStyles2","hasAccessToDataSources","contextSrv","AccessControlAction","hasAccessToAdminUsers","async","get","catch","err","error","getServerStats","loader","Loader","row","StatCard","content","name","dashboards","stars","tags","playlists","snapshots","footer","LinkButton","href","doubleRow","datasources","alerts","orgs","users","activeUsers","activeSessions","notFound","spacing","typography","h6","fontSize","getCardStyles","CardContainer","container","disableHover","inner","map","item","fontWeight","lineHeight","stylesFactory","backgroundUrl","isDark","footerBg","palette","dark9","gray6","colors","panelBg","header","LicenseChrome","editionNotice","subheader","children","useTheme","style","Circle","size","boxShadow","background","position","top","left","src","alt","width","bottom","right","borderRadius","UpgradePage","navModel","Page","UpgradeInfo","titleStyles","column","FeatureInfo","ServiceInfo","GetEnterprise","marginTop","marginBottom","CallToAction","paddingTop","List","Item","image","nested","paddingRight","FeatureListing","listStyle","imageUrl","itemStyle","titleStyle","connect","getNavModel","navIndex","LoadingPlaceholder"],"sourceRoot":""}