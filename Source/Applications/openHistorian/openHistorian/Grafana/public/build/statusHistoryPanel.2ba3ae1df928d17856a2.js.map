{"version":3,"file":"statusHistoryPanel.2ba3ae1df928d17856a2.js","mappings":"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","sources":["webpack://grafana/./public/app/plugins/panel/status-history/StatusHistoryPanel.tsx","webpack://grafana/./public/app/plugins/panel/status-history/panelcfg.gen.ts","webpack://grafana/./public/app/plugins/panel/status-history/suggestions.ts","webpack://grafana/./public/app/plugins/panel/status-history/module.tsx"],"sourcesContent":["import { useMemo, useState } from 'react';\n\nimport { DashboardCursorSync, PanelProps } from '@grafana/data';\nimport { EventBusPlugin, TooltipDisplayMode, TooltipPlugin2, usePanelContext, useTheme2 } from '@grafana/ui';\nimport { TimeRange2, TooltipHoverMode } from '@grafana/ui/src/components/uPlot/plugins/TooltipPlugin2';\nimport { TimelineChart } from 'app/core/components/TimelineChart/TimelineChart';\nimport {\n  prepareTimelineFields,\n  prepareTimelineLegendItems,\n  TimelineMode,\n} from 'app/core/components/TimelineChart/utils';\n\nimport { StateTimelineTooltip2 } from '../state-timeline/StateTimelineTooltip2';\nimport { AnnotationsPlugin2 } from '../timeseries/plugins/AnnotationsPlugin2';\nimport { OutsideRangePlugin } from '../timeseries/plugins/OutsideRangePlugin';\nimport { getTimezones } from '../timeseries/utils';\n\nimport { Options } from './panelcfg.gen';\n\ninterface TimelinePanelProps extends PanelProps<Options> {}\n\n/**\n * @alpha\n */\nexport const StatusHistoryPanel = ({\n  data,\n  timeRange,\n  timeZone,\n  options,\n  width,\n  height,\n  replaceVariables,\n  onChangeTimeRange,\n}: TimelinePanelProps) => {\n  const theme = useTheme2();\n\n  // temp range set for adding new annotation set by TooltipPlugin2, consumed by AnnotationPlugin2\n  const [newAnnotationRange, setNewAnnotationRange] = useState<TimeRange2 | null>(null);\n  const { sync, eventsScope, canAddAnnotations, dataLinkPostProcessor, eventBus } = usePanelContext();\n  const cursorSync = sync?.() ?? DashboardCursorSync.Off;\n\n  const enableAnnotationCreation = Boolean(canAddAnnotations && canAddAnnotations());\n\n  const { frames, warn } = useMemo(\n    () => prepareTimelineFields(data.series, false, timeRange, theme),\n    [data.series, timeRange, theme]\n  );\n\n  const legendItems = useMemo(\n    () => prepareTimelineLegendItems(frames, options.legend, theme),\n    [frames, options.legend, theme]\n  );\n\n  const timezones = useMemo(() => getTimezones(options.timezone, timeZone), [options.timezone, timeZone]);\n\n  if (!frames || warn) {\n    return (\n      <div className=\"panel-empty\">\n        <p>{warn ?? 'No data found in response'}</p>\n      </div>\n    );\n  }\n\n  // Status grid requires some space between values\n  if (frames[0].length > width / 2) {\n    return (\n      <div className=\"panel-empty\">\n        <p>\n          Too many points to visualize properly. <br />\n          Update the query to return fewer points. <br />({frames[0].length} points received)\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <TimelineChart\n      theme={theme}\n      frames={frames}\n      structureRev={data.structureRev}\n      timeRange={timeRange}\n      timeZone={timezones}\n      width={width}\n      height={height}\n      legendItems={legendItems}\n      {...options}\n      mode={TimelineMode.Samples}\n      replaceVariables={replaceVariables}\n      dataLinkPostProcessor={dataLinkPostProcessor}\n      cursorSync={cursorSync}\n    >\n      {(builder, alignedFrame) => {\n        return (\n          <>\n            {cursorSync !== DashboardCursorSync.Off && (\n              <EventBusPlugin config={builder} eventBus={eventBus} frame={alignedFrame} />\n            )}\n            {options.tooltip.mode !== TooltipDisplayMode.None && (\n              <TooltipPlugin2\n                config={builder}\n                hoverMode={\n                  options.tooltip.mode === TooltipDisplayMode.Multi ? TooltipHoverMode.xAll : TooltipHoverMode.xOne\n                }\n                queryZoom={onChangeTimeRange}\n                syncMode={cursorSync}\n                syncScope={eventsScope}\n                render={(u, dataIdxs, seriesIdx, isPinned, dismiss, timeRange2, viaSync) => {\n                  if (enableAnnotationCreation && timeRange2 != null) {\n                    setNewAnnotationRange(timeRange2);\n                    dismiss();\n                    return;\n                  }\n\n                  const annotate = () => {\n                    let xVal = u.posToVal(u.cursor.left!, 'x');\n\n                    setNewAnnotationRange({ from: xVal, to: xVal });\n                    dismiss();\n                  };\n\n                  return (\n                    <StateTimelineTooltip2\n                      series={alignedFrame}\n                      dataIdxs={dataIdxs}\n                      seriesIdx={seriesIdx}\n                      mode={viaSync ? TooltipDisplayMode.Multi : options.tooltip.mode}\n                      sortOrder={options.tooltip.sort}\n                      isPinned={isPinned}\n                      timeRange={timeRange}\n                      annotate={enableAnnotationCreation ? annotate : undefined}\n                      withDuration={false}\n                      maxHeight={options.tooltip.maxHeight}\n                      replaceVariables={replaceVariables}\n                    />\n                  );\n                }}\n                maxWidth={options.tooltip.maxWidth}\n              />\n            )}\n            <AnnotationsPlugin2\n              annotations={data.annotations ?? []}\n              config={builder}\n              timeZone={timeZone}\n              newRange={newAnnotationRange}\n              setNewRange={setNewAnnotationRange}\n              canvasRegionRendering={false}\n            />\n            <OutsideRangePlugin config={builder} onChangeTimeRange={onChangeTimeRange} />\n          </>\n        );\n      }}\n    </TimelineChart>\n  );\n};\n","// Code generated - EDITING IS FUTILE. DO NOT EDIT.\n//\n// Generated by:\n//     public/app/plugins/gen.go\n// Using jennies:\n//     TSTypesJenny\n//     PluginTsTypesJenny\n//\n// Run 'make gen-cue' from repository root to regenerate.\n\nimport * as ui from '@grafana/schema';\n\nexport interface Options extends ui.OptionsWithLegend, ui.OptionsWithTooltip, ui.OptionsWithTimezones {\n  /**\n   * Controls the column width\n   */\n  colWidth?: number;\n  /**\n   * Set the height of the rows\n   */\n  rowHeight: number;\n  /**\n   * Show values on the columns\n   */\n  showValue: ui.VisibilityMode;\n}\n\nexport const defaultOptions: Partial<Options> = {\n  colWidth: 0.9,\n  rowHeight: 0.9,\n  showValue: ui.VisibilityMode.Auto,\n};\n\nexport interface FieldConfig extends ui.HideableFieldConfig {\n  fillOpacity?: number;\n  lineWidth?: number;\n}\n\nexport const defaultFieldConfig: Partial<FieldConfig> = {\n  fillOpacity: 70,\n  lineWidth: 1,\n};\n","import { FieldColorModeId, VisualizationSuggestionsBuilder } from '@grafana/data';\nimport { SuggestionName } from 'app/types/suggestions';\n\nimport { Options, FieldConfig } from './panelcfg.gen';\n\nexport class StatusHistorySuggestionsSupplier {\n  getSuggestionsForData(builder: VisualizationSuggestionsBuilder) {\n    const { dataSummary: ds } = builder;\n\n    if (!ds.hasData) {\n      return;\n    }\n\n    // This panel needs a time field and a string or number field\n    if (!ds.hasTimeField || (!ds.hasStringField && !ds.hasNumberField)) {\n      return;\n    }\n\n    // If there are many series then they won't fit on y-axis so this panel is not good fit\n    if (ds.numberFieldCount >= 30) {\n      return;\n    }\n\n    // if there a lot of data points for each series then this is not a good match\n    if (ds.rowCountMax > 100) {\n      return;\n    }\n\n    // Probably better ways to filter out this by inspecting the types of string values so view this as temporary\n    if (ds.preferredVisualisationType === 'logs') {\n      return;\n    }\n\n    const list = builder.getListAppender<Options, FieldConfig>({\n      name: '',\n      pluginId: 'status-history',\n      options: {},\n      fieldConfig: {\n        defaults: {\n          color: {\n            mode: FieldColorModeId.ContinuousGrYlRd,\n          },\n          custom: {},\n        },\n        overrides: [],\n      },\n      cardOptions: {\n        previewModifier: (s) => {\n          s.options!.colWidth = 0.7;\n        },\n      },\n    });\n\n    list.append({ name: SuggestionName.StatusHistory });\n  }\n}\n","import { FieldColorModeId, FieldConfigProperty, PanelPlugin } from '@grafana/data';\nimport { VisibilityMode } from '@grafana/schema';\nimport { commonOptionsBuilder } from '@grafana/ui';\n\nimport { StatusHistoryPanel } from './StatusHistoryPanel';\nimport { Options, FieldConfig, defaultFieldConfig } from './panelcfg.gen';\nimport { StatusHistorySuggestionsSupplier } from './suggestions';\n\nexport const plugin = new PanelPlugin<Options, FieldConfig>(StatusHistoryPanel)\n  .useFieldConfig({\n    standardOptions: {\n      [FieldConfigProperty.Color]: {\n        settings: {\n          byValueSupport: true,\n        },\n        defaultValue: {\n          mode: FieldColorModeId.Thresholds,\n        },\n      },\n    },\n    useCustomConfig: (builder) => {\n      builder\n        .addSliderInput({\n          path: 'lineWidth',\n          name: 'Line width',\n          defaultValue: defaultFieldConfig.lineWidth,\n          settings: {\n            min: 0,\n            max: 10,\n            step: 1,\n          },\n        })\n        .addSliderInput({\n          path: 'fillOpacity',\n          name: 'Fill opacity',\n          defaultValue: defaultFieldConfig.fillOpacity,\n          settings: {\n            min: 0,\n            max: 100,\n            step: 1,\n          },\n        });\n\n      commonOptionsBuilder.addHideFrom(builder);\n    },\n  })\n  .setPanelOptions((builder) => {\n    builder\n      .addRadio({\n        path: 'showValue',\n        name: 'Show values',\n        settings: {\n          options: [\n            { value: VisibilityMode.Auto, label: 'Auto' },\n            { value: VisibilityMode.Always, label: 'Always' },\n            { value: VisibilityMode.Never, label: 'Never' },\n          ],\n        },\n        defaultValue: VisibilityMode.Auto,\n      })\n      .addSliderInput({\n        path: 'rowHeight',\n        name: 'Row height',\n        defaultValue: 0.9,\n        settings: {\n          min: 0,\n          max: 1,\n          step: 0.01,\n        },\n      })\n      .addSliderInput({\n        path: 'colWidth',\n        name: 'Column width',\n        defaultValue: 0.9,\n        settings: {\n          min: 0,\n          max: 1,\n          step: 0.01,\n        },\n      });\n\n    commonOptionsBuilder.addLegendOptions(builder, false);\n    commonOptionsBuilder.addTooltipOptions(builder);\n  })\n  .setSuggestionsSupplier(new StatusHistorySuggestionsSupplier())\n  .setDataSupport({ annotations: true });\n"],"names":["StatusHistoryPanel","data","timeRange","timeZone","options","width","height","replaceVariables","onChangeTimeRange","theme","newAnnotationRange","setNewAnnotationRange","sync","eventsScope","canAddAnnotations","dataLinkPostProcessor","eventBus","cursorSync","enableAnnotationCreation","frames","warn","legendItems","timezones","TimelineChart","builder","alignedFrame","EventBusPlugin","TooltipPlugin2","u","dataIdxs","seriesIdx","isPinned","dismiss","timeRange2","viaSync","annotate","xVal","StateTimelineTooltip2","AnnotationsPlugin2","OutsideRangePlugin","defaultOptions","defaultFieldConfig","StatusHistorySuggestionsSupplier","ds","s","PanelPlugin"],"sourceRoot":""}