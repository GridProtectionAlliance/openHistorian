{"version":3,"file":"tempoPlugin.5054b4d635f2fb0afb9c.js","mappings":"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","sources":["webpack://grafana/./public/app/plugins/datasource/tempo/language_provider.ts","webpack://grafana/./public/app/plugins/datasource/tempo/syntax.ts","webpack://grafana/./public/app/plugins/datasource/tempo/QueryEditor/NativeSearch.tsx","webpack://grafana/./public/app/plugins/datasource/tempo/QueryEditor/utils.ts","webpack://grafana/./public/app/plugins/datasource/tempo/QueryEditor/ServiceGraphSection.tsx","webpack://grafana/./public/app/plugins/datasource/tempo/QueryEditor/QueryField.tsx","webpack://grafana/./public/app/plugins/datasource/tempo/configuration/LokiSearchSettings.tsx","webpack://grafana/./public/app/plugins/datasource/tempo/configuration/SearchSettings.tsx","webpack://grafana/./public/app/plugins/datasource/tempo/configuration/ServiceGraphSettings.tsx","webpack://grafana/./public/app/plugins/datasource/tempo/datasource.ts","webpack://grafana/./public/app/plugins/datasource/tempo/module.ts","webpack://grafana/./public/app/plugins/datasource/tempo/configuration/ConfigEditor.tsx","webpack://grafana/./public/app/plugins/datasource/tempo/CheatSheet.tsx"],"sourcesContent":["import { Value } from 'slate';\n\nimport { HistoryItem, LanguageProvider, SelectableValue } from '@grafana/data';\nimport { CompletionItemGroup, TypeaheadInput, TypeaheadOutput } from '@grafana/ui';\n\nimport { TempoDatasource } from './datasource';\n\nexport default class TempoLanguageProvider extends LanguageProvider {\n  datasource: TempoDatasource;\n  tags?: string[];\n  constructor(datasource: TempoDatasource, initialValues?: any) {\n    super();\n\n    this.datasource = datasource;\n    Object.assign(this, initialValues);\n  }\n\n  request = async (url: string, params = {}) => {\n    const res = await this.datasource.metadataRequest(url, params);\n    return res?.data;\n  };\n\n  start = async () => {\n    await this.fetchTags();\n    return [];\n  };\n\n  async fetchTags() {\n    const response = await this.request('/api/search/tags', []);\n    this.tags = response.tagNames;\n  }\n\n  provideCompletionItems = async (\n    { prefix, text, value, labelKey, wrapperClasses }: TypeaheadInput,\n    context: { history: Array<HistoryItem<any>> } = { history: [] }\n  ): Promise<TypeaheadOutput> => {\n    const emptyResult: TypeaheadOutput = { suggestions: [] };\n\n    if (!value) {\n      return emptyResult;\n    }\n\n    const query = value.endText.getText();\n    const isValue = query[query.indexOf(text) - 1] === '=';\n    if (isValue || text === '=') {\n      return this.getTagValueCompletionItems(value);\n    }\n    return this.getTagsCompletionItems();\n  };\n\n  getTagsCompletionItems = (): TypeaheadOutput => {\n    const { tags } = this;\n    const suggestions: CompletionItemGroup[] = [];\n\n    if (tags?.length) {\n      suggestions.push({\n        label: `Tag`,\n        items: tags.map((tag) => ({ label: tag })),\n      });\n    }\n\n    return { suggestions };\n  };\n\n  async getTagValueCompletionItems(value: Value) {\n    const tags = value.endText.getText().split(' ');\n\n    let tagName = tags[tags.length - 1] ?? '';\n    tagName = tagName.split('=')[0];\n\n    const response = await this.request(`/api/search/tag/${tagName}/values`, []);\n    const suggestions: CompletionItemGroup[] = [];\n\n    if (response && response.tagValues) {\n      suggestions.push({\n        label: `Tag Values`,\n        items: response.tagValues.map((tagValue: string) => ({ label: tagValue })),\n      });\n    }\n    return { suggestions };\n  }\n\n  async getOptions(tag: string): Promise<Array<SelectableValue<string>>> {\n    const response = await this.request(`/api/search/tag/${tag}/values`);\n    let options: Array<SelectableValue<string>> = [];\n\n    if (response && response.tagValues) {\n      options = response.tagValues.map((v: string) => ({\n        value: v,\n        label: v,\n      }));\n    }\n\n    return options;\n  }\n}\n","import { Grammar } from 'prismjs';\n\nexport const tokenizer: Grammar = {\n  key: {\n    pattern: /[^\\s]+(?==)/,\n    alias: 'attr-name',\n  },\n  operator: /[=]/,\n  value: [\n    {\n      pattern: /\"(.+)\"/,\n    },\n    {\n      pattern: /[^\\s]+/,\n    },\n  ],\n};\n","import { css } from '@emotion/css';\nimport Prism from 'prismjs';\nimport React, { useCallback, useState, useEffect, useMemo } from 'react';\nimport { Node } from 'slate';\n\nimport { GrafanaTheme2, isValidGoDuration, SelectableValue, toOption } from '@grafana/data';\nimport { FetchError, getTemplateSrv, isFetchError, TemplateSrv } from '@grafana/runtime';\nimport {\n  InlineFieldRow,\n  InlineField,\n  Input,\n  QueryField,\n  SlatePrism,\n  BracesPlugin,\n  TypeaheadInput,\n  TypeaheadOutput,\n  Alert,\n  useStyles2,\n  fuzzyMatch,\n  Select,\n} from '@grafana/ui';\nimport { notifyApp } from 'app/core/actions';\nimport { createErrorNotification } from 'app/core/copy/appNotification';\nimport { dispatch } from 'app/store/store';\n\nimport { TempoDatasource, TempoQuery } from '../datasource';\nimport TempoLanguageProvider from '../language_provider';\nimport { tokenizer } from '../syntax';\n\ninterface Props {\n  datasource: TempoDatasource;\n  query: TempoQuery;\n  onChange: (value: TempoQuery) => void;\n  onBlur?: () => void;\n  onRunQuery: () => void;\n}\n\nconst PRISM_LANGUAGE = 'tempo';\nconst durationPlaceholder = 'e.g. 1.2s, 100ms';\nconst plugins = [\n  BracesPlugin(),\n  SlatePrism({\n    onlyIn: (node: Node) => node.object === 'block' && node.type === 'code_block',\n    getSyntax: () => PRISM_LANGUAGE,\n  }),\n];\n\nPrism.languages[PRISM_LANGUAGE] = tokenizer;\n\nconst NativeSearch = ({ datasource, query, onChange, onBlur, onRunQuery }: Props) => {\n  const styles = useStyles2(getStyles);\n  const languageProvider = useMemo(() => new TempoLanguageProvider(datasource), [datasource]);\n  const [hasSyntaxLoaded, setHasSyntaxLoaded] = useState(false);\n  const [serviceOptions, setServiceOptions] = useState<Array<SelectableValue<string>>>();\n  const [spanOptions, setSpanOptions] = useState<Array<SelectableValue<string>>>();\n  const [error, setError] = useState<Error | FetchError | null>(null);\n  const [inputErrors, setInputErrors] = useState<{ [key: string]: boolean }>({});\n  const [isLoading, setIsLoading] = useState<{\n    serviceName: boolean;\n    spanName: boolean;\n  }>({\n    serviceName: false,\n    spanName: false,\n  });\n\n  const loadOptions = useCallback(\n    async (name: string, query = '') => {\n      const lpName = name === 'serviceName' ? 'service.name' : 'name';\n      setIsLoading((prevValue) => ({ ...prevValue, [name]: true }));\n\n      try {\n        const options = await languageProvider.getOptions(lpName);\n        const filteredOptions = options.filter((item) => (item.value ? fuzzyMatch(item.value, query).found : false));\n        return filteredOptions;\n      } catch (error) {\n        if (isFetchError(error) && error?.status === 404) {\n          setError(error);\n        } else if (error instanceof Error) {\n          dispatch(notifyApp(createErrorNotification('Error', error)));\n        }\n        return [];\n      } finally {\n        setIsLoading((prevValue) => ({ ...prevValue, [name]: false }));\n      }\n    },\n    [languageProvider]\n  );\n\n  useEffect(() => {\n    const fetchOptions = async () => {\n      try {\n        const [services, spans] = await Promise.all([loadOptions('serviceName'), loadOptions('spanName')]);\n        if (query.serviceName && getTemplateSrv().containsTemplate(query.serviceName)) {\n          services.push(toOption(query.serviceName));\n        }\n        setServiceOptions(services);\n        if (query.spanName && getTemplateSrv().containsTemplate(query.spanName)) {\n          spans.push(toOption(query.spanName));\n        }\n        setSpanOptions(spans);\n      } catch (error) {\n        // Display message if Tempo is connected but search 404's\n        if (isFetchError(error) && error?.status === 404) {\n          setError(error);\n        } else if (error instanceof Error) {\n          dispatch(notifyApp(createErrorNotification('Error', error)));\n        }\n      }\n    };\n    fetchOptions();\n  }, [languageProvider, loadOptions, query.serviceName, query.spanName]);\n\n  useEffect(() => {\n    const fetchTags = async () => {\n      try {\n        await languageProvider.start();\n        setHasSyntaxLoaded(true);\n      } catch (error) {\n        if (error instanceof Error) {\n          dispatch(notifyApp(createErrorNotification('Error', error)));\n        }\n      }\n    };\n    fetchTags();\n  }, [languageProvider]);\n\n  const onTypeahead = async (typeahead: TypeaheadInput): Promise<TypeaheadOutput> => {\n    return await languageProvider.provideCompletionItems(typeahead);\n  };\n\n  const cleanText = (text: string) => {\n    const splittedText = text.split(/\\s+(?=([^\"]*\"[^\"]*\")*[^\"]*$)/g);\n    if (splittedText.length > 1) {\n      return splittedText[splittedText.length - 1];\n    }\n    return text;\n  };\n\n  const onKeyDown = (keyEvent: React.KeyboardEvent) => {\n    if (keyEvent.key === 'Enter' && (keyEvent.shiftKey || keyEvent.ctrlKey)) {\n      onRunQuery();\n    }\n  };\n\n  const templateSrv: TemplateSrv = getTemplateSrv();\n\n  return (\n    <>\n      <div className={styles.container}>\n        <InlineFieldRow>\n          <InlineField label=\"Service Name\" labelWidth={14} grow>\n            <Select\n              inputId=\"service\"\n              options={serviceOptions}\n              onOpenMenu={() => {\n                loadOptions('serviceName');\n              }}\n              isLoading={isLoading.serviceName}\n              value={serviceOptions?.find((v) => v?.value === query.serviceName) || undefined}\n              onChange={(v) => {\n                onChange({\n                  ...query,\n                  serviceName: v?.value || undefined,\n                });\n              }}\n              placeholder=\"Select a service\"\n              isClearable\n              onKeyDown={onKeyDown}\n              aria-label={'select-service-name'}\n              allowCustomValue={true}\n            />\n          </InlineField>\n        </InlineFieldRow>\n        <InlineFieldRow>\n          <InlineField label=\"Span Name\" labelWidth={14} grow>\n            <Select\n              inputId=\"spanName\"\n              options={spanOptions}\n              onOpenMenu={() => {\n                loadOptions('spanName');\n              }}\n              isLoading={isLoading.spanName}\n              value={spanOptions?.find((v) => v?.value === query.spanName) || undefined}\n              onChange={(v) => {\n                onChange({\n                  ...query,\n                  spanName: v?.value || undefined,\n                });\n              }}\n              placeholder=\"Select a span\"\n              isClearable\n              onKeyDown={onKeyDown}\n              aria-label={'select-span-name'}\n              allowCustomValue={true}\n            />\n          </InlineField>\n        </InlineFieldRow>\n        <InlineFieldRow>\n          <InlineField label=\"Tags\" labelWidth={14} grow tooltip=\"Values should be in the logfmt format.\">\n            <QueryField\n              additionalPlugins={plugins}\n              query={query.search}\n              onTypeahead={onTypeahead}\n              onBlur={onBlur}\n              onChange={(value) => {\n                onChange({\n                  ...query,\n                  search: value,\n                });\n              }}\n              placeholder=\"http.status_code=200 error=true\"\n              cleanText={cleanText}\n              onRunQuery={onRunQuery}\n              syntaxLoaded={hasSyntaxLoaded}\n              portalOrigin=\"tempo\"\n            />\n          </InlineField>\n        </InlineFieldRow>\n        <InlineFieldRow>\n          <InlineField label=\"Min Duration\" invalid={!!inputErrors.minDuration} labelWidth={14} grow>\n            <Input\n              id=\"minDuration\"\n              value={query.minDuration || ''}\n              placeholder={durationPlaceholder}\n              onBlur={() => {\n                const templatedMinDuration = templateSrv.replace(query.minDuration ?? '');\n                if (query.minDuration && !isValidGoDuration(templatedMinDuration)) {\n                  setInputErrors({ ...inputErrors, minDuration: true });\n                } else {\n                  setInputErrors({ ...inputErrors, minDuration: false });\n                }\n              }}\n              onChange={(v) =>\n                onChange({\n                  ...query,\n                  minDuration: v.currentTarget.value,\n                })\n              }\n              onKeyDown={onKeyDown}\n            />\n          </InlineField>\n        </InlineFieldRow>\n        <InlineFieldRow>\n          <InlineField label=\"Max Duration\" invalid={!!inputErrors.maxDuration} labelWidth={14} grow>\n            <Input\n              id=\"maxDuration\"\n              value={query.maxDuration || ''}\n              placeholder={durationPlaceholder}\n              onBlur={() => {\n                const templatedMaxDuration = templateSrv.replace(query.maxDuration ?? '');\n                if (query.maxDuration && !isValidGoDuration(templatedMaxDuration)) {\n                  setInputErrors({ ...inputErrors, maxDuration: true });\n                } else {\n                  setInputErrors({ ...inputErrors, maxDuration: false });\n                }\n              }}\n              onChange={(v) =>\n                onChange({\n                  ...query,\n                  maxDuration: v.currentTarget.value,\n                })\n              }\n              onKeyDown={onKeyDown}\n            />\n          </InlineField>\n        </InlineFieldRow>\n        <InlineFieldRow>\n          <InlineField\n            label=\"Limit\"\n            invalid={!!inputErrors.limit}\n            labelWidth={14}\n            grow\n            tooltip=\"Maximum numbers of returned results\"\n          >\n            <Input\n              id=\"limit\"\n              value={query.limit || ''}\n              type=\"number\"\n              onChange={(v) => {\n                let limit = v.currentTarget.value ? parseInt(v.currentTarget.value, 10) : undefined;\n                if (limit && (!Number.isInteger(limit) || limit <= 0)) {\n                  setInputErrors({ ...inputErrors, limit: true });\n                } else {\n                  setInputErrors({ ...inputErrors, limit: false });\n                }\n\n                onChange({\n                  ...query,\n                  limit: v.currentTarget.value ? parseInt(v.currentTarget.value, 10) : undefined,\n                });\n              }}\n              onKeyDown={onKeyDown}\n            />\n          </InlineField>\n        </InlineFieldRow>\n      </div>\n      {error ? (\n        <Alert title=\"Unable to connect to Tempo search\" severity=\"info\" className={styles.alert}>\n          Please ensure that Tempo is configured with search enabled. If you would like to hide this tab, you can\n          configure it in the <a href={`/datasources/edit/${datasource.uid}`}>datasource settings</a>.\n        </Alert>\n      ) : null}\n    </>\n  );\n};\n\nexport default NativeSearch;\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    max-width: 500px;\n  `,\n  alert: css`\n    max-width: 75ch;\n    margin-top: ${theme.spacing(2)};\n  `,\n});\n","import { DataSourceApi } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\n\nexport async function getDS(uid?: string): Promise<DataSourceApi | undefined> {\n  if (!uid) {\n    return undefined;\n  }\n\n  const dsSrv = getDataSourceSrv();\n  try {\n    return await dsSrv.get(uid);\n  } catch (error) {\n    console.error('Failed to load data source', error);\n    return undefined;\n  }\n}\n","import { css } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\nimport useAsync from 'react-use/lib/useAsync';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Alert, InlineField, InlineFieldRow, useStyles2 } from '@grafana/ui';\n\nimport { AdHocFilter } from '../../../../features/variables/adhoc/picker/AdHocFilter';\nimport { AdHocVariableFilter } from '../../../../features/variables/types';\nimport { PrometheusDatasource } from '../../prometheus/datasource';\nimport { TempoQuery } from '../datasource';\n\nimport { getDS } from './utils';\n\nexport function ServiceGraphSection({\n  graphDatasourceUid,\n  query,\n  onChange,\n}: {\n  graphDatasourceUid?: string;\n  query: TempoQuery;\n  onChange: (value: TempoQuery) => void;\n}) {\n  const styles = useStyles2(getStyles);\n\n  const dsState = useAsync(() => getDS(graphDatasourceUid), [graphDatasourceUid]);\n\n  // Check if service graph metrics are being collected. If not, displays a warning\n  const [hasKeys, setHasKeys] = useState<boolean | undefined>(undefined);\n  useEffect(() => {\n    async function fn(ds: PrometheusDatasource) {\n      const keys = await ds.getTagKeys({\n        series: [\n          'traces_service_graph_request_server_seconds_sum',\n          'traces_service_graph_request_total',\n          'traces_service_graph_request_failed_total',\n        ],\n      });\n      setHasKeys(Boolean(keys.length));\n    }\n    if (!dsState.loading && dsState.value) {\n      fn(dsState.value as PrometheusDatasource);\n    }\n  }, [dsState]);\n\n  if (dsState.loading) {\n    return null;\n  }\n\n  const ds = dsState.value as PrometheusDatasource;\n\n  if (!graphDatasourceUid) {\n    return <div className=\"text-warning\">Please set up a service graph datasource in the datasource settings.</div>;\n  }\n\n  if (graphDatasourceUid && !ds) {\n    return (\n      <div className=\"text-warning\">\n        Service graph datasource is configured but the data source no longer exists. Please configure existing data\n        source to use the service graph functionality.\n      </div>\n    );\n  }\n  const filters = queryToFilter(query.serviceMapQuery || '');\n\n  return (\n    <div>\n      <InlineFieldRow>\n        <InlineField label=\"Filter\" labelWidth={14} grow>\n          <AdHocFilter\n            datasource={{ uid: graphDatasourceUid }}\n            filters={filters}\n            getTagKeysOptions={{\n              series: config.featureToggles.tempoApmTable\n                ? ['traces_service_graph_request_total', 'traces_spanmetrics_calls_total']\n                : ['traces_service_graph_request_total'],\n            }}\n            addFilter={(filter: AdHocVariableFilter) => {\n              onChange({\n                ...query,\n                serviceMapQuery: filtersToQuery([...filters, filter]),\n              });\n            }}\n            removeFilter={(index: number) => {\n              const newFilters = [...filters];\n              newFilters.splice(index, 1);\n              onChange({ ...query, serviceMapQuery: filtersToQuery(newFilters) });\n            }}\n            changeFilter={(index: number, filter: AdHocVariableFilter) => {\n              const newFilters = [...filters];\n              newFilters.splice(index, 1, filter);\n              onChange({ ...query, serviceMapQuery: filtersToQuery(newFilters) });\n            }}\n          />\n        </InlineField>\n      </InlineFieldRow>\n      {hasKeys === false ? (\n        <Alert title=\"No service graph data found\" severity=\"info\" className={styles.alert}>\n          Please ensure that service graph metrics are set up correctly according to the{' '}\n          <a\n            target=\"_blank\"\n            rel=\"noreferrer noopener\"\n            href=\"https://grafana.com/docs/tempo/next/grafana-agent/service-graphs/\"\n          >\n            Tempo documentation\n          </a>\n          .\n        </Alert>\n      ) : null}\n    </div>\n  );\n}\n\nfunction queryToFilter(query: string): AdHocVariableFilter[] {\n  let match;\n  let filters: AdHocVariableFilter[] = [];\n  const re = /([\\w_]+)(=|!=|<|>|=~|!~)\"(.*?)\"/g;\n  while ((match = re.exec(query)) !== null) {\n    filters.push({\n      key: match[1],\n      operator: match[2],\n      value: match[3],\n      condition: '',\n    });\n  }\n  return filters;\n}\n\nfunction filtersToQuery(filters: AdHocVariableFilter[]): string {\n  return `{${filters.map((f) => `${f.key}${f.operator}\"${f.value}\"`).join(',')}}`;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  alert: css`\n    max-width: 75ch;\n    margin-top: ${theme.spacing(2)};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\nimport useAsync from 'react-use/lib/useAsync';\n\nimport { QueryEditorProps, SelectableValue } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport {\n  FileDropzone,\n  InlineField,\n  InlineFieldRow,\n  InlineLabel,\n  QueryField,\n  RadioButtonGroup,\n  Themeable2,\n  withTheme2,\n} from '@grafana/ui';\n\nimport { LokiQueryField } from '../../loki/components/LokiQueryField';\nimport { LokiDatasource } from '../../loki/datasource';\nimport { LokiQuery } from '../../loki/types';\nimport { TempoDatasource, TempoQuery, TempoQueryType } from '../datasource';\n\nimport NativeSearch from './NativeSearch';\nimport { ServiceGraphSection } from './ServiceGraphSection';\nimport { getDS } from './utils';\n\ninterface Props extends QueryEditorProps<TempoDatasource, TempoQuery>, Themeable2 {}\n\nconst DEFAULT_QUERY_TYPE: TempoQueryType = 'traceId';\n\nclass TempoQueryFieldComponent extends React.PureComponent<Props> {\n  constructor(props: Props) {\n    super(props);\n  }\n\n  async componentDidMount() {\n    // Set initial query type to ensure traceID field appears\n    if (!this.props.query.queryType) {\n      this.props.onChange({\n        ...this.props.query,\n        queryType: DEFAULT_QUERY_TYPE,\n      });\n    }\n  }\n\n  onChangeLinkedQuery = (value: LokiQuery) => {\n    const { query, onChange } = this.props;\n    onChange({\n      ...query,\n      linkedQuery: { ...value, refId: 'linked' },\n    });\n  };\n\n  onRunLinkedQuery = () => {\n    this.props.onRunQuery();\n  };\n\n  onClearResults = () => {\n    // Run clear query to clear results\n    const { onChange, query, onRunQuery } = this.props;\n    onChange({\n      ...query,\n      queryType: 'clear',\n    });\n    onRunQuery();\n  };\n\n  render() {\n    const { query, onChange, datasource, app } = this.props;\n\n    const logsDatasourceUid = datasource.getLokiSearchDS();\n\n    const graphDatasourceUid = datasource.serviceMap?.datasourceUid;\n\n    const queryTypeOptions: Array<SelectableValue<TempoQueryType>> = [\n      { value: 'traceId', label: 'TraceID' },\n      { value: 'upload', label: 'JSON file' },\n      { value: 'serviceMap', label: 'Service Graph' },\n    ];\n\n    if (!datasource?.search?.hide) {\n      queryTypeOptions.unshift({ value: 'nativeSearch', label: 'Search' });\n    }\n\n    if (logsDatasourceUid) {\n      if (datasource?.search?.hide) {\n        // Place at beginning as Search if no native search\n        queryTypeOptions.unshift({ value: 'search', label: 'Search' });\n      } else {\n        // Place at end as Loki Search if native search is enabled\n        queryTypeOptions.push({ value: 'search', label: 'Loki Search' });\n      }\n    }\n\n    return (\n      <>\n        <InlineFieldRow>\n          <InlineField label=\"Query type\">\n            <RadioButtonGroup<TempoQueryType>\n              options={queryTypeOptions}\n              value={query.queryType}\n              onChange={(v) => {\n                reportInteraction('grafana_traces_query_type_changed', {\n                  datasourceType: 'tempo',\n                  app: app ?? '',\n                  newQueryType: v,\n                  previousQueryType: query.queryType ?? '',\n                });\n\n                this.onClearResults();\n\n                onChange({\n                  ...query,\n                  queryType: v,\n                });\n              }}\n              size=\"md\"\n            />\n          </InlineField>\n        </InlineFieldRow>\n        {query.queryType === 'search' && (\n          <SearchSection\n            logsDatasourceUid={logsDatasourceUid}\n            query={query}\n            onRunQuery={this.onRunLinkedQuery}\n            onChange={this.onChangeLinkedQuery}\n          />\n        )}\n        {query.queryType === 'nativeSearch' && (\n          <NativeSearch\n            datasource={this.props.datasource}\n            query={query}\n            onChange={onChange}\n            onBlur={this.props.onBlur}\n            onRunQuery={this.props.onRunQuery}\n          />\n        )}\n        {query.queryType === 'upload' && (\n          <div className={css({ padding: this.props.theme.spacing(2) })}>\n            <FileDropzone\n              options={{ multiple: false }}\n              onLoad={(result) => {\n                this.props.datasource.uploadedJson = result;\n                this.props.onRunQuery();\n              }}\n            />\n          </div>\n        )}\n        {query.queryType === 'traceId' && (\n          <InlineFieldRow>\n            <InlineField label=\"Trace ID\" labelWidth={14} grow>\n              <QueryField\n                query={query.query}\n                onChange={(val) => {\n                  onChange({\n                    ...query,\n                    query: val,\n                    queryType: 'traceId',\n                    linkedQuery: undefined,\n                  });\n                }}\n                onBlur={this.props.onBlur}\n                onRunQuery={this.props.onRunQuery}\n                placeholder={'Enter a Trace ID (run with Shift+Enter)'}\n                portalOrigin=\"tempo\"\n              />\n            </InlineField>\n          </InlineFieldRow>\n        )}\n        {query.queryType === 'serviceMap' && (\n          <ServiceGraphSection graphDatasourceUid={graphDatasourceUid} query={query} onChange={onChange} />\n        )}\n      </>\n    );\n  }\n}\n\ninterface SearchSectionProps {\n  logsDatasourceUid?: string;\n  onChange: (value: LokiQuery) => void;\n  onRunQuery: () => void;\n  query: TempoQuery;\n}\nfunction SearchSection({ logsDatasourceUid, onChange, onRunQuery, query }: SearchSectionProps) {\n  const dsState = useAsync(() => getDS(logsDatasourceUid), [logsDatasourceUid]);\n  if (dsState.loading) {\n    return null;\n  }\n\n  const ds = dsState.value as LokiDatasource;\n\n  if (ds) {\n    return (\n      <>\n        <InlineLabel>Tempo uses {ds.name} to find traces.</InlineLabel>\n        <LokiQueryField\n          datasource={ds}\n          onChange={onChange}\n          onRunQuery={onRunQuery}\n          query={query.linkedQuery ?? ({ refId: 'linked' } as any)}\n          history={[]}\n        />\n      </>\n    );\n  }\n\n  if (!logsDatasourceUid) {\n    return <div className=\"text-warning\">Please set up a Loki search datasource in the datasource settings.</div>;\n  }\n\n  if (logsDatasourceUid && !ds) {\n    return (\n      <div className=\"text-warning\">\n        Loki search datasource is configured but the data source no longer exists. Please configure existing data source\n        to use the search.\n      </div>\n    );\n  }\n\n  return null;\n}\n\nexport const TempoQueryField = withTheme2(TempoQueryFieldComponent);\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { DataSourcePluginOptionsEditorProps, GrafanaTheme, updateDatasourcePluginJsonDataOption } from '@grafana/data';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { Button, InlineField, InlineFieldRow, useStyles } from '@grafana/ui';\n\nimport { TempoJsonData } from '../datasource';\n\ninterface Props extends DataSourcePluginOptionsEditorProps<TempoJsonData> {}\n\nexport function LokiSearchSettings({ options, onOptionsChange }: Props) {\n  const styles = useStyles(getStyles);\n\n  // Default to the trace to logs datasource if configured and loki search was enabled\n  // but only if jsonData.lokiSearch hasn't been set\n  const legacyDatasource =\n    options.jsonData.tracesToLogs?.lokiSearch !== false ? options.jsonData.tracesToLogs?.datasourceUid : undefined;\n  if (legacyDatasource && options.jsonData.lokiSearch === undefined) {\n    updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'lokiSearch', {\n      datasourceUid: legacyDatasource,\n    });\n  }\n\n  return (\n    <div className={css({ width: '100%' })}>\n      <h3 className=\"page-heading\">Loki Search</h3>\n\n      <div className={styles.infoText}>\n        Select a Loki datasource to search for traces. Derived fields must be configured in the Loki data source.\n      </div>\n\n      <InlineFieldRow className={styles.row}>\n        <InlineField tooltip=\"The Loki data source with the service graph data\" label=\"Data source\" labelWidth={26}>\n          <DataSourcePicker\n            inputId=\"loki-search-data-source-picker\"\n            pluginId=\"loki\"\n            current={options.jsonData.lokiSearch?.datasourceUid}\n            noDefault={true}\n            width={40}\n            onChange={(ds) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'lokiSearch', {\n                datasourceUid: ds.uid,\n              })\n            }\n          />\n        </InlineField>\n        {options.jsonData.lokiSearch?.datasourceUid ? (\n          <Button\n            type={'button'}\n            variant={'secondary'}\n            size={'sm'}\n            fill={'text'}\n            onClick={() => {\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'lokiSearch', {\n                datasourceUid: undefined,\n              });\n            }}\n          >\n            Clear\n          </Button>\n        ) : null}\n      </InlineFieldRow>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  infoText: css`\n    label: infoText;\n    padding-bottom: ${theme.spacing.md};\n    color: ${theme.colors.textSemiWeak};\n  `,\n\n  row: css`\n    label: row;\n    align-items: baseline;\n  `,\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { DataSourcePluginOptionsEditorProps, GrafanaTheme, updateDatasourcePluginJsonDataOption } from '@grafana/data';\nimport { InlineField, InlineFieldRow, InlineSwitch, useStyles } from '@grafana/ui';\n\nimport { TempoJsonData } from '../datasource';\n\ninterface Props extends DataSourcePluginOptionsEditorProps<TempoJsonData> {}\n\nexport function SearchSettings({ options, onOptionsChange }: Props) {\n  const styles = useStyles(getStyles);\n\n  return (\n    <div className={styles.container}>\n      <h3 className=\"page-heading\">Search</h3>\n      <InlineFieldRow className={styles.row}>\n        <InlineField tooltip=\"Removes the Search tab from the Tempo query editor.\" label=\"Hide search\" labelWidth={26}>\n          <InlineSwitch\n            id=\"hideSearch\"\n            value={options.jsonData.search?.hide}\n            onChange={(event: React.SyntheticEvent<HTMLInputElement>) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'search', {\n                ...options.jsonData.search,\n                hide: event.currentTarget.checked,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  container: css`\n    label: container;\n    width: 100%;\n  `,\n  row: css`\n    label: row;\n    align-items: baseline;\n  `,\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { DataSourcePluginOptionsEditorProps, GrafanaTheme, updateDatasourcePluginJsonDataOption } from '@grafana/data';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { Button, InlineField, InlineFieldRow, useStyles } from '@grafana/ui';\n\nimport { TempoJsonData } from '../datasource';\n\ninterface Props extends DataSourcePluginOptionsEditorProps<TempoJsonData> {}\n\nexport function ServiceGraphSettings({ options, onOptionsChange }: Props) {\n  const styles = useStyles(getStyles);\n\n  return (\n    <div className={css({ width: '100%' })}>\n      <h3 className=\"page-heading\">Service Graph</h3>\n\n      <div className={styles.infoText}>\n        To allow querying service graph data you have to select a Prometheus instance where the data is stored.\n      </div>\n\n      <InlineFieldRow className={styles.row}>\n        <InlineField\n          tooltip=\"The Prometheus data source with the service graph data\"\n          label=\"Data source\"\n          labelWidth={26}\n        >\n          <DataSourcePicker\n            inputId=\"service-graph-data-source-picker\"\n            pluginId=\"prometheus\"\n            current={options.jsonData.serviceMap?.datasourceUid}\n            noDefault={true}\n            width={40}\n            onChange={(ds) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'serviceMap', {\n                datasourceUid: ds.uid,\n              })\n            }\n          />\n        </InlineField>\n        {options.jsonData.serviceMap?.datasourceUid ? (\n          <Button\n            type={'button'}\n            variant={'secondary'}\n            size={'sm'}\n            fill={'text'}\n            onClick={() => {\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'serviceMap', {\n                datasourceUid: undefined,\n              });\n            }}\n          >\n            Clear\n          </Button>\n        ) : null}\n      </InlineFieldRow>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  infoText: css`\n    label: infoText;\n    padding-bottom: ${theme.spacing.md};\n    color: ${theme.colors.textSemiWeak};\n  `,\n\n  row: css`\n    label: row;\n    align-items: baseline;\n  `,\n});\n","import { identity, pick, pickBy, groupBy, startCase } from 'lodash';\nimport { EMPTY, from, merge, Observable, of, throwError } from 'rxjs';\nimport { catchError, concatMap, map, mergeMap, toArray } from 'rxjs/operators';\n\nimport {\n  DataQuery,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataQueryResponseData,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  DataSourceJsonData,\n  FieldType,\n  isValidGoDuration,\n  LoadingState,\n  ScopedVars,\n} from '@grafana/data';\nimport {\n  config,\n  BackendSrvRequest,\n  DataSourceWithBackend,\n  getBackendSrv,\n  reportInteraction,\n  TemplateSrv,\n  getTemplateSrv,\n} from '@grafana/runtime';\nimport { SpanBarOptions } from '@jaegertracing/jaeger-ui-components';\nimport { NodeGraphOptions } from 'app/core/components/NodeGraphSettings';\nimport { TraceToLogsOptions } from 'app/core/components/TraceToLogs/TraceToLogsSettings';\nimport { serializeParams } from 'app/core/utils/fetch';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\n\nimport { LokiOptions, LokiQuery } from '../loki/types';\nimport { PrometheusDatasource } from '../prometheus/datasource';\nimport { PromQuery } from '../prometheus/types';\n\nimport {\n  failedMetric,\n  histogramMetric,\n  mapPromMetricsToServiceMap,\n  serviceMapMetrics,\n  totalsMetric,\n  rateMetric,\n  durationMetric,\n  errorRateMetric,\n  defaultTableFilter,\n} from './graphTransform';\nimport {\n  transformTrace,\n  transformTraceList,\n  transformFromOTLP as transformFromOTEL,\n  createTableFrameFromSearch,\n} from './resultTransformer';\n\n// search = Loki search, nativeSearch = Tempo search for backwards compatibility\nexport type TempoQueryType = 'search' | 'traceId' | 'serviceMap' | 'upload' | 'nativeSearch' | 'clear';\n\nexport interface TempoJsonData extends DataSourceJsonData {\n  tracesToLogs?: TraceToLogsOptions;\n  serviceMap?: {\n    datasourceUid?: string;\n  };\n  search?: {\n    hide?: boolean;\n  };\n  nodeGraph?: NodeGraphOptions;\n  lokiSearch?: {\n    datasourceUid?: string;\n  };\n  spanBar?: {\n    tag: string;\n  };\n}\n\nexport interface TempoQuery extends DataQuery {\n  query: string;\n  // Query to find list of traces, e.g., via Loki\n  linkedQuery?: LokiQuery;\n  search: string;\n  queryType: TempoQueryType;\n  serviceName?: string;\n  spanName?: string;\n  minDuration?: string;\n  maxDuration?: string;\n  limit?: number;\n  serviceMapQuery?: string;\n}\n\ninterface SearchQueryParams {\n  minDuration?: string;\n  maxDuration?: string;\n  limit?: number;\n  tags: string;\n  start?: number;\n  end?: number;\n}\n\nexport const DEFAULT_LIMIT = 20;\n\nexport class TempoDatasource extends DataSourceWithBackend<TempoQuery, TempoJsonData> {\n  tracesToLogs?: TraceToLogsOptions;\n  serviceMap?: {\n    datasourceUid?: string;\n  };\n  search?: {\n    hide?: boolean;\n  };\n  nodeGraph?: NodeGraphOptions;\n  lokiSearch?: {\n    datasourceUid?: string;\n  };\n  uploadedJson?: string | ArrayBuffer | null = null;\n  spanBar?: SpanBarOptions;\n\n  constructor(\n    private instanceSettings: DataSourceInstanceSettings<TempoJsonData>,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv()\n  ) {\n    super(instanceSettings);\n    this.tracesToLogs = instanceSettings.jsonData.tracesToLogs;\n    this.serviceMap = instanceSettings.jsonData.serviceMap;\n    this.search = instanceSettings.jsonData.search;\n    this.nodeGraph = instanceSettings.jsonData.nodeGraph;\n    this.lokiSearch = instanceSettings.jsonData.lokiSearch;\n  }\n\n  query(options: DataQueryRequest<TempoQuery>): Observable<DataQueryResponse> {\n    const subQueries: Array<Observable<DataQueryResponse>> = [];\n    const filteredTargets = options.targets.filter((target) => !target.hide);\n    const targets: { [type: string]: TempoQuery[] } = groupBy(filteredTargets, (t) => t.queryType || 'traceId');\n\n    if (targets.clear) {\n      return of({ data: [], state: LoadingState.Done });\n    }\n\n    const logsDatasourceUid = this.getLokiSearchDS();\n\n    // Run search queries on linked datasource\n    if (logsDatasourceUid && targets.search?.length > 0) {\n      reportInteraction('grafana_traces_loki_search_queried', {\n        datasourceType: 'tempo',\n        app: options.app ?? '',\n        linkedQueryExpr: targets.search[0].linkedQuery?.expr ?? '',\n      });\n\n      const dsSrv = getDatasourceSrv();\n      subQueries.push(\n        from(dsSrv.get(logsDatasourceUid)).pipe(\n          mergeMap((linkedDatasource: DataSourceApi) => {\n            // Wrap linked query into a data request based on original request\n            const linkedRequest: DataQueryRequest = { ...options, targets: targets.search.map((t) => t.linkedQuery!) };\n            // Find trace matchers in derived fields of the linked datasource that's identical to this datasource\n            const settings: DataSourceInstanceSettings<LokiOptions> = (linkedDatasource as any).instanceSettings;\n            const traceLinkMatcher: string[] =\n              settings.jsonData.derivedFields\n                ?.filter((field) => field.datasourceUid === this.uid && field.matcherRegex)\n                .map((field) => field.matcherRegex) || [];\n\n            if (!traceLinkMatcher || traceLinkMatcher.length === 0) {\n              return throwError(\n                () =>\n                  new Error(\n                    'No Loki datasource configured for search. Set up Derived Fields for traces in a Loki datasource settings and link it to this Tempo datasource.'\n                  )\n              );\n            } else {\n              return (linkedDatasource.query(linkedRequest) as Observable<DataQueryResponse>).pipe(\n                map((response) =>\n                  response.error ? response : transformTraceList(response, this.uid, this.name, traceLinkMatcher)\n                )\n              );\n            }\n          })\n        )\n      );\n    }\n\n    if (targets.nativeSearch?.length) {\n      try {\n        reportInteraction('grafana_traces_search_queried', {\n          datasourceType: 'tempo',\n          app: options.app ?? '',\n          serviceName: targets.nativeSearch[0].serviceName ?? '',\n          spanName: targets.nativeSearch[0].spanName ?? '',\n          resultLimit: targets.nativeSearch[0].limit ?? '',\n          search: targets.nativeSearch[0].search ?? '',\n        });\n\n        const timeRange = { startTime: options.range.from.unix(), endTime: options.range.to.unix() };\n        const query = this.applyVariables(targets.nativeSearch[0], options.scopedVars);\n        const searchQuery = this.buildSearchQuery(query, timeRange);\n        subQueries.push(\n          this._request('/api/search', searchQuery).pipe(\n            map((response) => {\n              return {\n                data: [createTableFrameFromSearch(response.data.traces, this.instanceSettings)],\n              };\n            }),\n            catchError((error) => {\n              return of({ error: { message: error.data.message }, data: [] });\n            })\n          )\n        );\n      } catch (error) {\n        return of({ error: { message: error instanceof Error ? error.message : 'Unknown error occurred' }, data: [] });\n      }\n    }\n\n    if (targets.upload?.length) {\n      if (this.uploadedJson) {\n        reportInteraction('grafana_traces_json_file_uploaded', {\n          datasourceType: 'tempo',\n          app: options.app ?? '',\n        });\n\n        const jsonData = JSON.parse(this.uploadedJson as string);\n        const isTraceData = jsonData.batches;\n        const isServiceGraphData =\n          Array.isArray(jsonData) && jsonData.some((df) => df?.meta?.preferredVisualisationType === 'nodeGraph');\n\n        if (isTraceData) {\n          subQueries.push(of(transformFromOTEL(jsonData.batches, this.nodeGraph?.enabled)));\n        } else if (isServiceGraphData) {\n          subQueries.push(of({ data: jsonData, state: LoadingState.Done }));\n        } else {\n          subQueries.push(of({ error: { message: 'Unable to parse uploaded data.' }, data: [] }));\n        }\n      } else {\n        subQueries.push(of({ data: [], state: LoadingState.Done }));\n      }\n    }\n\n    if (this.serviceMap?.datasourceUid && targets.serviceMap?.length > 0) {\n      reportInteraction('grafana_traces_service_graph_queried', {\n        datasourceType: 'tempo',\n        app: options.app ?? '',\n        serviceMapQuery: targets.serviceMap[0].serviceMapQuery ?? '',\n      });\n\n      const dsId = this.serviceMap.datasourceUid;\n      const tempoDsUid = this.uid;\n      if (config.featureToggles.tempoApmTable) {\n        subQueries.push(\n          serviceMapQuery(options, dsId, tempoDsUid).pipe(\n            concatMap((result) =>\n              rateQuery(options, result, dsId).pipe(\n                concatMap((result) => errorAndDurationQuery(options, result, dsId, tempoDsUid))\n              )\n            )\n          )\n        );\n      } else {\n        subQueries.push(serviceMapQuery(options, dsId, tempoDsUid));\n      }\n    }\n\n    if (targets.traceId?.length > 0) {\n      reportInteraction('grafana_traces_traceID_queried', {\n        datasourceType: 'tempo',\n        app: options.app ?? '',\n        query: targets.traceId[0].query ?? '',\n      });\n\n      subQueries.push(this.handleTraceIdQuery(options, targets.traceId));\n    }\n\n    return merge(...subQueries);\n  }\n\n  applyTemplateVariables(query: TempoQuery, scopedVars: ScopedVars): Record<string, any> {\n    return this.applyVariables(query, scopedVars);\n  }\n\n  interpolateVariablesInQueries(queries: TempoQuery[], scopedVars: ScopedVars): TempoQuery[] {\n    if (!queries || queries.length === 0) {\n      return [];\n    }\n\n    return queries.map((query) => {\n      return {\n        ...query,\n        datasource: this.getRef(),\n        ...this.applyVariables(query, scopedVars),\n      };\n    });\n  }\n\n  applyVariables(query: TempoQuery, scopedVars: ScopedVars) {\n    const expandedQuery = { ...query };\n\n    if (query.linkedQuery) {\n      expandedQuery.linkedQuery = {\n        ...query.linkedQuery,\n        expr: this.templateSrv.replace(query.linkedQuery?.expr ?? '', scopedVars),\n      };\n    }\n\n    return {\n      ...expandedQuery,\n      query: this.templateSrv.replace(query.query ?? '', scopedVars),\n      serviceName: this.templateSrv.replace(query.serviceName ?? '', scopedVars),\n      spanName: this.templateSrv.replace(query.spanName ?? '', scopedVars),\n      search: this.templateSrv.replace(query.search ?? '', scopedVars),\n      minDuration: this.templateSrv.replace(query.minDuration ?? '', scopedVars),\n      maxDuration: this.templateSrv.replace(query.maxDuration ?? '', scopedVars),\n    };\n  }\n\n  /**\n   * Handles the simplest of the queries where we have just a trace id and return trace data for it.\n   * @param options\n   * @param targets\n   * @private\n   */\n  private handleTraceIdQuery(\n    options: DataQueryRequest<TempoQuery>,\n    targets: TempoQuery[]\n  ): Observable<DataQueryResponse> {\n    const validTargets = targets.filter((t) => t.query).map((t) => ({ ...t, query: t.query.trim() }));\n    if (!validTargets.length) {\n      return EMPTY;\n    }\n\n    const traceRequest: DataQueryRequest<TempoQuery> = { ...options, targets: validTargets };\n    return super.query(traceRequest).pipe(\n      map((response) => {\n        if (response.error) {\n          return response;\n        }\n        return transformTrace(response, this.nodeGraph?.enabled);\n      })\n    );\n  }\n\n  async metadataRequest(url: string, params = {}) {\n    return await this._request(url, params, { method: 'GET', hideFromInspector: true }).toPromise();\n  }\n\n  private _request(apiUrl: string, data?: any, options?: Partial<BackendSrvRequest>): Observable<Record<string, any>> {\n    const params = data ? serializeParams(data) : '';\n    const url = `${this.instanceSettings.url}${apiUrl}${params.length ? `?${params}` : ''}`;\n    const req = { ...options, url };\n\n    return getBackendSrv().fetch(req);\n  }\n\n  async testDatasource(): Promise<any> {\n    const options: BackendSrvRequest = {\n      headers: {},\n      method: 'GET',\n      url: `${this.instanceSettings.url}/api/echo`,\n    };\n    const response = await getBackendSrv().fetch<any>(options).toPromise();\n\n    if (response?.ok) {\n      return { status: 'success', message: 'Data source is working' };\n    }\n  }\n\n  getQueryDisplayText(query: TempoQuery) {\n    if (query.queryType === 'nativeSearch') {\n      let result = [];\n      for (const key of ['serviceName', 'spanName', 'search', 'minDuration', 'maxDuration', 'limit']) {\n        if (query.hasOwnProperty(key) && query[key as keyof TempoQuery]) {\n          result.push(`${startCase(key)}: ${query[key as keyof TempoQuery]}`);\n        }\n      }\n      return result.join(', ');\n    }\n    return query.query;\n  }\n\n  buildSearchQuery(query: TempoQuery, timeRange?: { startTime: number; endTime?: number }): SearchQueryParams {\n    let tags = query.search ?? '';\n\n    let tempoQuery = pick(query, ['minDuration', 'maxDuration', 'limit']);\n    // Remove empty properties\n    tempoQuery = pickBy(tempoQuery, identity);\n\n    if (query.serviceName) {\n      tags += ` service.name=\"${query.serviceName}\"`;\n    }\n    if (query.spanName) {\n      tags += ` name=\"${query.spanName}\"`;\n    }\n\n    // Set default limit\n    if (!tempoQuery.limit) {\n      tempoQuery.limit = DEFAULT_LIMIT;\n    }\n\n    // Validate query inputs and remove spaces if valid\n    if (tempoQuery.minDuration) {\n      tempoQuery.minDuration = this.templateSrv.replace(tempoQuery.minDuration ?? '');\n      if (!isValidGoDuration(tempoQuery.minDuration)) {\n        throw new Error('Please enter a valid min duration.');\n      }\n      tempoQuery.minDuration = tempoQuery.minDuration.replace(/\\s/g, '');\n    }\n    if (tempoQuery.maxDuration) {\n      tempoQuery.maxDuration = this.templateSrv.replace(tempoQuery.maxDuration ?? '');\n      if (!isValidGoDuration(tempoQuery.maxDuration)) {\n        throw new Error('Please enter a valid max duration.');\n      }\n      tempoQuery.maxDuration = tempoQuery.maxDuration.replace(/\\s/g, '');\n    }\n\n    if (!Number.isInteger(tempoQuery.limit) || tempoQuery.limit <= 0) {\n      throw new Error('Please enter a valid limit.');\n    }\n\n    let searchQuery: SearchQueryParams = { tags, ...tempoQuery };\n\n    if (timeRange) {\n      searchQuery.start = timeRange.startTime;\n      searchQuery.end = timeRange.endTime;\n    }\n\n    return searchQuery;\n  }\n\n  async getServiceGraphLabels() {\n    const ds = await getDatasourceSrv().get(this.serviceMap!.datasourceUid);\n    return ds.getTagKeys!();\n  }\n\n  async getServiceGraphLabelValues(key: string) {\n    const ds = await getDatasourceSrv().get(this.serviceMap!.datasourceUid);\n    return ds.getTagValues!({ key });\n  }\n\n  // Get linked loki search datasource. Fall back to legacy loki search/trace to logs config\n  getLokiSearchDS = (): string | undefined => {\n    const legacyLogsDatasourceUid =\n      this.tracesToLogs?.lokiSearch !== false && this.lokiSearch === undefined\n        ? this.tracesToLogs?.datasourceUid\n        : undefined;\n    return this.lokiSearch?.datasourceUid ?? legacyLogsDatasourceUid;\n  };\n}\n\nfunction queryPrometheus(request: DataQueryRequest<PromQuery>, datasourceUid: string) {\n  return from(getDatasourceSrv().get(datasourceUid)).pipe(\n    mergeMap((ds) => {\n      return (ds as PrometheusDatasource).query(request);\n    })\n  );\n}\n\nfunction serviceMapQuery(request: DataQueryRequest<TempoQuery>, datasourceUid: string, tempoDatasourceUid: string) {\n  const serviceMapRequest = makePromServiceMapRequest(request);\n\n  return queryPrometheus(serviceMapRequest, datasourceUid).pipe(\n    // Just collect all the responses first before processing into node graph data\n    toArray(),\n    map((responses: DataQueryResponse[]) => {\n      const errorRes = responses.find((res) => !!res.error);\n      if (errorRes) {\n        throw new Error(errorRes.error!.message);\n      }\n\n      const { nodes, edges } = mapPromMetricsToServiceMap(responses, request.range);\n      nodes.fields[0].config = getFieldConfig(\n        datasourceUid,\n        tempoDatasourceUid,\n        '__data.fields.id',\n        '__data.fields[0]'\n      );\n      edges.fields[0].config = getFieldConfig(\n        datasourceUid,\n        tempoDatasourceUid,\n        '__data.fields.target',\n        '__data.fields.target',\n        '__data.fields.source'\n      );\n\n      return {\n        data: [nodes, edges],\n        state: LoadingState.Done,\n      };\n    })\n  );\n}\n\nfunction rateQuery(\n  request: DataQueryRequest<TempoQuery>,\n  serviceMapResponse: DataQueryResponse,\n  datasourceUid: string\n) {\n  const serviceMapRequest = makePromServiceMapRequest(request);\n  serviceMapRequest.targets = makeApmRequest([buildExpr(rateMetric, defaultTableFilter, request)]);\n\n  return queryPrometheus(serviceMapRequest, datasourceUid).pipe(\n    toArray(),\n    map((responses: DataQueryResponse[]) => {\n      const errorRes = responses.find((res) => !!res.error);\n      if (errorRes) {\n        throw new Error(errorRes.error!.message);\n      }\n      return {\n        data: [responses[0]?.data ?? [], serviceMapResponse.data[0], serviceMapResponse.data[1]],\n        state: LoadingState.Done,\n      };\n    })\n  );\n}\n\n// we need the response from the rate query to get the rate span_name(s),\n// -> which determine the errorRate/duration span_name(s) we need to query\nfunction errorAndDurationQuery(\n  request: DataQueryRequest<TempoQuery>,\n  rateResponse: DataQueryResponse,\n  datasourceUid: string,\n  tempoDatasourceUid: string\n) {\n  let apmMetrics = [];\n  let errorRateBySpanName = '';\n  let durationsBySpanName: string[] = [];\n  const spanNames = rateResponse.data[0][0]?.fields[1]?.values.toArray() ?? [];\n\n  if (spanNames.length > 0) {\n    errorRateBySpanName = buildExpr(errorRateMetric, 'span_name=~\"' + spanNames.join('|') + '\"', request);\n    apmMetrics.push(errorRateBySpanName);\n    spanNames.map((name: string) => {\n      const metric = buildExpr(durationMetric, 'span_name=~\"' + name + '\"', request);\n      durationsBySpanName.push(metric);\n      apmMetrics.push(metric);\n    });\n  }\n\n  const serviceMapRequest = makePromServiceMapRequest(request);\n  serviceMapRequest.targets = makeApmRequest(apmMetrics);\n\n  return queryPrometheus(serviceMapRequest, datasourceUid).pipe(\n    // Just collect all the responses first before processing into node graph data\n    toArray(),\n    map((errorAndDurationResponse: DataQueryResponse[]) => {\n      const errorRes = errorAndDurationResponse.find((res) => !!res.error);\n      if (errorRes) {\n        throw new Error(errorRes.error!.message);\n      }\n\n      const apmTable = getApmTable(\n        request,\n        rateResponse,\n        errorAndDurationResponse[0],\n        errorRateBySpanName,\n        durationsBySpanName,\n        datasourceUid,\n        tempoDatasourceUid\n      );\n\n      if (apmTable.fields.length === 0) {\n        return {\n          data: [rateResponse.data[1], rateResponse.data[2]],\n          state: LoadingState.Done,\n        };\n      }\n\n      return {\n        data: [apmTable, rateResponse.data[1], rateResponse.data[2]],\n        state: LoadingState.Done,\n      };\n    })\n  );\n}\n\nfunction makePromLink(title: string, expr: string, datasourceUid: string, instant: boolean) {\n  return {\n    url: '',\n    title,\n    internal: {\n      query: {\n        expr: expr,\n        range: !instant,\n        exemplar: !instant,\n        instant: instant,\n      } as PromQuery,\n      datasourceUid,\n      datasourceName: getDatasourceSrv().getDataSourceSettingsByUid(datasourceUid)?.name ?? '',\n    },\n  };\n}\n\nexport function getFieldConfig(\n  datasourceUid: string,\n  tempoDatasourceUid: string,\n  targetField: string,\n  tempoField: string,\n  sourceField?: string\n) {\n  sourceField = sourceField ? `client=\"\\${${sourceField}}\",` : '';\n  return {\n    links: [\n      makePromLink(\n        'Request rate',\n        `sum by (client, server)(rate(${totalsMetric}{${sourceField}server=\"\\${${targetField}}\"}[$__rate_interval]))`,\n        datasourceUid,\n        false\n      ),\n      makePromLink(\n        'Request histogram',\n        `histogram_quantile(0.9, sum(rate(${histogramMetric}{${sourceField}server=\"\\${${targetField}}\"}[$__rate_interval])) by (le, client, server))`,\n        datasourceUid,\n        false\n      ),\n      makePromLink(\n        'Failed request rate',\n        `sum by (client, server)(rate(${failedMetric}{${sourceField}server=\"\\${${targetField}}\"}[$__rate_interval]))`,\n        datasourceUid,\n        false\n      ),\n      makeTempoLink('View traces', `\\${${tempoField}}`, '', tempoDatasourceUid),\n    ],\n  };\n}\n\nexport function makeTempoLink(title: string, serviceName: string, spanName: string, datasourceUid: string) {\n  let query = { queryType: 'nativeSearch' } as TempoQuery;\n  if (serviceName !== '') {\n    query.serviceName = serviceName;\n  }\n  if (spanName !== '') {\n    query.spanName = spanName;\n  }\n\n  return {\n    url: '',\n    title,\n    internal: {\n      query,\n      datasourceUid,\n      datasourceName: getDatasourceSrv().getDataSourceSettingsByUid(datasourceUid)?.name ?? '',\n    },\n  };\n}\n\nfunction makePromServiceMapRequest(options: DataQueryRequest<TempoQuery>): DataQueryRequest<PromQuery> {\n  return {\n    ...options,\n    targets: serviceMapMetrics.map((metric) => {\n      return {\n        refId: metric,\n        // options.targets[0] is not correct here, but not sure what should happen if you have multiple queries for\n        // service map at the same time anyway\n        expr: `rate(${metric}${options.targets[0].serviceMapQuery || ''}[$__range])`,\n        instant: true,\n      };\n    }),\n  };\n}\n\nfunction getApmTable(\n  request: DataQueryRequest<TempoQuery>,\n  rateResponse: DataQueryResponse,\n  secondResponse: DataQueryResponse,\n  errorRateBySpanName: string,\n  durationsBySpanName: string[],\n  datasourceUid: string,\n  tempoDatasourceUid: string\n) {\n  let df: any = { fields: [] };\n  const rate = rateResponse.data[0]?.filter((x: { refId: string }) => {\n    return x.refId === buildExpr(rateMetric, defaultTableFilter, request);\n  });\n  const errorRate = secondResponse.data.filter((x) => {\n    return x.refId === errorRateBySpanName;\n  });\n  const duration = secondResponse.data.filter((x) => {\n    return durationsBySpanName.includes(x.refId);\n  });\n\n  if (rate.length > 0 && rate[0].fields?.length > 2) {\n    df.fields.push({\n      ...rate[0].fields[1],\n      name: 'Name',\n      config: {\n        filterable: false,\n      },\n    });\n\n    df.fields.push({\n      ...rate[0].fields[2],\n      name: 'Rate',\n      config: {\n        links: [\n          makePromLink(\n            'Rate',\n            buildLinkExpr(buildExpr(rateMetric, 'span_name=\"${__data.fields[0]}\"', request)),\n            datasourceUid,\n            false\n          ),\n        ],\n        decimals: 2,\n      },\n    });\n\n    df.fields.push({\n      ...rate[0].fields[2],\n      name: ' ',\n      labels: null,\n      config: {\n        color: {\n          mode: 'continuous-BlPu',\n        },\n        custom: {\n          displayMode: 'lcd-gauge',\n        },\n        decimals: 3,\n      },\n    });\n  }\n\n  if (errorRate.length > 0 && errorRate[0].fields?.length > 2) {\n    const errorRateNames = errorRate[0].fields[1]?.values.toArray() ?? [];\n    const errorRateValues = errorRate[0].fields[2]?.values.toArray() ?? [];\n    let errorRateObj: any = {};\n    errorRateNames.map((name: string, index: number) => {\n      errorRateObj[name] = { value: errorRateValues[index] };\n    });\n\n    const values = getRateAlignedValues({ ...rate }, errorRateObj);\n\n    df.fields.push({\n      ...errorRate[0].fields[2],\n      name: 'Error Rate',\n      values: values,\n      config: {\n        links: [\n          makePromLink(\n            'Error Rate',\n            buildLinkExpr(buildExpr(errorRateMetric, 'span_name=\"${__data.fields[0]}\"', request)),\n            datasourceUid,\n            false\n          ),\n        ],\n        decimals: 2,\n      },\n    });\n\n    df.fields.push({\n      ...errorRate[0].fields[2],\n      name: '  ',\n      values: values,\n      labels: null,\n      config: {\n        color: {\n          mode: 'continuous-RdYlGr',\n        },\n        custom: {\n          displayMode: 'lcd-gauge',\n        },\n        decimals: 3,\n      },\n    });\n  }\n\n  if (duration.length > 0 && duration[0].fields?.length > 1) {\n    let durationObj: any = {};\n    duration.map((d) => {\n      const delimiter = d.refId?.includes('span_name=~\"') ? 'span_name=~\"' : 'span_name=\"';\n      const name = d.refId?.split(delimiter)[1].split('\"}')[0];\n      durationObj[name] = { value: d.fields[1].values.toArray()[0] };\n    });\n\n    df.fields.push({\n      ...duration[0].fields[1],\n      name: 'Duration (p90)',\n      values: getRateAlignedValues({ ...rate }, durationObj),\n      config: {\n        links: [\n          makePromLink(\n            'Duration',\n            buildLinkExpr(buildExpr(durationMetric, 'span_name=\"${__data.fields[0]}\"', request)),\n            datasourceUid,\n            false\n          ),\n        ],\n        unit: 's',\n      },\n    });\n  }\n\n  if (df.fields.length > 0 && df.fields[0].values) {\n    df.fields.push({\n      name: 'Links',\n      type: FieldType.string,\n      values: df.fields[0].values.map(() => {\n        return 'Tempo';\n      }),\n      config: {\n        links: [makeTempoLink('Tempo', '', `\\${__data.fields[0]}`, tempoDatasourceUid)],\n      },\n    });\n  }\n\n  return df;\n}\n\nexport function buildExpr(\n  metric: { expr: string; params: string[] },\n  extraParams: string,\n  request: DataQueryRequest<TempoQuery>\n) {\n  let serviceMapQuery = request.targets[0]?.serviceMapQuery?.replace('{', '').replace('}', '') ?? '';\n  // map serviceGraph metric tags to APM metric tags\n  serviceMapQuery = serviceMapQuery.replace('client', 'service').replace('server', 'service');\n  const metricParams = serviceMapQuery.includes('span_name')\n    ? metric.params.concat(serviceMapQuery)\n    : metric.params\n        .concat(serviceMapQuery)\n        .concat(extraParams)\n        .filter((item: string) => item);\n  return metric.expr.replace('{}', '{' + metricParams.join(',') + '}');\n}\n\nexport function buildLinkExpr(expr: string) {\n  // don't want top 5 or by span name in links\n  expr = expr.replace('topk(5, ', '').replace(' by (span_name))', '');\n  return expr.replace('__range', '__rate_interval');\n}\n\n// query result frames can come back in any order\n// here we align the table col values to the same row name (rateName) across the table\nexport function getRateAlignedValues(\n  rateResp: DataQueryResponseData[],\n  objToAlign: { [x: string]: { value: string } }\n) {\n  const rateNames = rateResp[0]?.fields[1]?.values.toArray() ?? [];\n  let values: string[] = [];\n\n  for (let i = 0; i < rateNames.length; i++) {\n    if (Object.keys(objToAlign).includes(rateNames[i])) {\n      values.push(objToAlign[rateNames[i]].value);\n    } else {\n      values.push('0');\n    }\n  }\n\n  return values;\n}\n\nexport function makeApmRequest(metrics: any[]) {\n  return metrics.map((metric) => {\n    return {\n      refId: metric,\n      expr: metric,\n      instant: true,\n    };\n  });\n}\n","import { DataSourcePlugin } from '@grafana/data';\n\nimport CheatSheet from './CheatSheet';\nimport { TempoQueryField } from './QueryEditor/QueryField';\nimport { ConfigEditor } from './configuration/ConfigEditor';\nimport { TempoDatasource } from './datasource';\n\nexport const plugin = new DataSourcePlugin(TempoDatasource)\n  .setQueryEditor(TempoQueryField)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditorHelp(CheatSheet);\n","import React from 'react';\n\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { DataSourceHttpSettings } from '@grafana/ui';\nimport { SpanBarSettings } from '@jaegertracing/jaeger-ui-components';\nimport { NodeGraphSettings } from 'app/core/components/NodeGraphSettings';\nimport { TraceToLogsSettings } from 'app/core/components/TraceToLogs/TraceToLogsSettings';\nimport { TraceToMetricsSettings } from 'app/core/components/TraceToMetrics/TraceToMetricsSettings';\n\nimport { LokiSearchSettings } from './LokiSearchSettings';\nimport { SearchSettings } from './SearchSettings';\nimport { ServiceGraphSettings } from './ServiceGraphSettings';\n\nexport type Props = DataSourcePluginOptionsEditorProps;\n\nexport const ConfigEditor: React.FC<Props> = ({ options, onOptionsChange }) => {\n  return (\n    <>\n      <DataSourceHttpSettings\n        defaultUrl=\"http://tempo\"\n        dataSourceConfig={options}\n        showAccessOptions={false}\n        onChange={onOptionsChange}\n      />\n\n      <div className=\"gf-form-group\">\n        <TraceToLogsSettings options={options} onOptionsChange={onOptionsChange} />\n      </div>\n\n      {config.featureToggles.traceToMetrics ? (\n        <div className=\"gf-form-group\">\n          <TraceToMetricsSettings options={options} onOptionsChange={onOptionsChange} />\n        </div>\n      ) : null}\n\n      <div className=\"gf-form-group\">\n        <ServiceGraphSettings options={options} onOptionsChange={onOptionsChange} />\n      </div>\n\n      <div className=\"gf-form-group\">\n        <SearchSettings options={options} onOptionsChange={onOptionsChange} />\n      </div>\n\n      <div className=\"gf-form-group\">\n        <NodeGraphSettings options={options} onOptionsChange={onOptionsChange} />\n      </div>\n\n      <div className=\"gf-form-group\">\n        <LokiSearchSettings options={options} onOptionsChange={onOptionsChange} />\n      </div>\n\n      <div className=\"gf-form-group\">\n        <SpanBarSettings options={options} onOptionsChange={onOptionsChange} />\n      </div>\n    </>\n  );\n};\n","import React from 'react';\n\nexport default function CheatSheet() {\n  return (\n    <div>\n      <h2 id=\"tempo-cheat-sheet\">Tempo Cheat Sheet</h2>\n      <p>\n        Tempo is a trace id lookup store. Enter a trace id in the above field and hit “Run Query” to retrieve your\n        trace. Tempo is generally paired with other datasources such as Loki or Prometheus to find traces.\n      </p>\n      <p>\n        Here are some{' '}\n        <a href=\"https://grafana.com/docs/tempo/latest/guides/instrumentation/\" target=\"blank\">\n          instrumentation examples\n        </a>{' '}\n        to get you started with trace discovery through logs and metrics (exemplars).\n      </p>\n    </div>\n  );\n}\n"],"names":["TempoLanguageProvider","LanguageProvider","constructor","datasource","initialValues","super","async","url","params","res","metadataRequest","data","this","fetchTags","prefix","text","value","labelKey","wrapperClasses","emptyResult","suggestions","query","endText","getText","isValue","indexOf","getTagValueCompletionItems","getTagsCompletionItems","tags","length","push","label","items","map","tag","Object","assign","response","request","tagNames","split","tagName","tagValues","tagValue","options","v","PRISM_LANGUAGE","durationPlaceholder","plugins","BracesPlugin","SlatePrism","onlyIn","node","object","type","getSyntax","Prism","key","pattern","alias","operator","onChange","onBlur","onRunQuery","styles","useStyles2","getStyles","languageProvider","useMemo","hasSyntaxLoaded","setHasSyntaxLoaded","useState","serviceOptions","setServiceOptions","spanOptions","setSpanOptions","error","setError","inputErrors","setInputErrors","isLoading","setIsLoading","serviceName","spanName","loadOptions","useCallback","name","lpName","prevValue","getOptions","filter","item","fuzzyMatch","found","isFetchError","status","Error","dispatch","notifyApp","createErrorNotification","useEffect","services","spans","Promise","all","getTemplateSrv","containsTemplate","toOption","fetchOptions","start","onKeyDown","keyEvent","shiftKey","ctrlKey","templateSrv","className","container","InlineFieldRow","InlineField","labelWidth","grow","Select","inputId","onOpenMenu","find","undefined","placeholder","isClearable","allowCustomValue","tooltip","QueryField","additionalPlugins","search","onTypeahead","provideCompletionItems","typeahead","cleanText","splittedText","syntaxLoaded","portalOrigin","invalid","minDuration","Input","id","templatedMinDuration","replace","isValidGoDuration","currentTarget","maxDuration","templatedMaxDuration","limit","parseInt","Number","isInteger","Alert","title","severity","alert","href","uid","theme","css","spacing","getDS","dsSrv","getDataSourceSrv","get","console","ServiceGraphSection","graphDatasourceUid","dsState","useAsync","hasKeys","setHasKeys","loading","ds","keys","getTagKeys","series","Boolean","fn","filters","match","re","exec","condition","queryToFilter","serviceMapQuery","AdHocFilter","getTagKeysOptions","config","addFilter","filtersToQuery","removeFilter","index","newFilters","splice","changeFilter","target","rel","f","join","TempoQueryFieldComponent","React","props","linkedQuery","refId","queryType","render","app","logsDatasourceUid","getLokiSearchDS","serviceMap","datasourceUid","queryTypeOptions","hide","unshift","RadioButtonGroup","reportInteraction","datasourceType","newQueryType","previousQueryType","onClearResults","size","SearchSection","onRunLinkedQuery","onChangeLinkedQuery","padding","FileDropzone","multiple","onLoad","result","uploadedJson","val","InlineLabel","LokiQueryField","history","TempoQueryField","withTheme2","LokiSearchSettings","onOptionsChange","useStyles","legacyDatasource","jsonData","tracesToLogs","lokiSearch","updateDatasourcePluginJsonDataOption","width","infoText","row","DataSourcePicker","pluginId","current","noDefault","Button","variant","fill","onClick","md","colors","textSemiWeak","SearchSettings","InlineSwitch","event","checked","ServiceGraphSettings","TempoDatasource","DataSourceWithBackend","instanceSettings","legacyLogsDatasourceUid","nodeGraph","subQueries","filteredTargets","targets","groupBy","t","clear","of","state","LoadingState","linkedQueryExpr","expr","getDatasourceSrv","from","pipe","mergeMap","linkedDatasource","linkedRequest","traceLinkMatcher","derivedFields","field","matcherRegex","transformTraceList","throwError","nativeSearch","resultLimit","timeRange","startTime","range","unix","endTime","to","applyVariables","scopedVars","searchQuery","buildSearchQuery","_request","createTableFrameFromSearch","traces","catchError","message","upload","JSON","parse","isTraceData","batches","isServiceGraphData","Array","isArray","some","df","meta","preferredVisualisationType","transformFromOTEL","enabled","dsId","tempoDsUid","concatMap","serviceMapResponse","serviceMapRequest","makePromServiceMapRequest","makeApmRequest","buildExpr","rateMetric","defaultTableFilter","queryPrometheus","toArray","responses","errorRes","rateQuery","rateResponse","tempoDatasourceUid","apmMetrics","errorRateBySpanName","durationsBySpanName","spanNames","fields","values","errorRateMetric","metric","durationMetric","errorAndDurationResponse","apmTable","secondResponse","rate","x","errorRate","duration","includes","filterable","links","makePromLink","buildLinkExpr","decimals","labels","color","mode","custom","displayMode","errorRateNames","errorRateValues","errorRateObj","getRateAlignedValues","durationObj","d","delimiter","unit","FieldType","makeTempoLink","getApmTable","errorAndDurationQuery","traceId","handleTraceIdQuery","merge","applyTemplateVariables","interpolateVariablesInQueries","queries","getRef","expandedQuery","validTargets","trim","EMPTY","traceRequest","transformTrace","method","hideFromInspector","toPromise","apiUrl","serializeParams","req","getBackendSrv","fetch","headers","ok","getQueryDisplayText","hasOwnProperty","startCase","tempoQuery","pick","pickBy","identity","end","getTagValues","nodes","edges","mapPromMetricsToServiceMap","getFieldConfig","instant","internal","exemplar","datasourceName","getDataSourceSettingsByUid","targetField","tempoField","sourceField","totalsMetric","histogramMetric","failedMetric","serviceMapMetrics","extraParams","metricParams","concat","rateResp","objToAlign","rateNames","i","metrics","plugin","DataSourcePlugin","setQueryEditor","setConfigEditor","DataSourceHttpSettings","defaultUrl","dataSourceConfig","showAccessOptions","TraceToLogsSettings","TraceToMetricsSettings","NodeGraphSettings","setQueryEditorHelp"],"sourceRoot":""}