{"version":3,"sources":["webpack:///./public/app/features/dashboard/containers/SoloPanelPage.tsx"],"names":["SoloPanelPage","_super","_this","apply","this","arguments","state","panel","notFound","Object","tslib__WEBPACK_IMPORTED_MODULE_0__","prototype","componentDidMount","_a","props","$injector","$scope","urlUid","urlType","urlSlug","routeInfo","initDashboard","fixUrl","componentDidUpdate","prevProps","urlPanelId","dashboard","panelId","parseInt","expandParentRowFor","getPanelById","setState","render","_b","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","className","_dashgrid_DashboardPanel__WEBPACK_IMPORTED_MODULE_4__","isEditing","isFullscreen","isInView","react__WEBPACK_IMPORTED_MODULE_1__","mapDispatchToProps","_state_initDashboard__WEBPACK_IMPORTED_MODULE_5__","__webpack_exports__","react_hot_loader__WEBPACK_IMPORTED_MODULE_2__","module","react_redux__WEBPACK_IMPORTED_MODULE_3__","location","routeParams","uid","slug","type","query","model"],"mappings":"gPAgCAA,EAAA,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAA,OAAAD,KAAAE,MAAAC,KAAAC,YAAAD,YACEF,EAAAI,MAAe,CACbC,MAAO,KACPC,UAAU,KA4Dd,OA/DmCC,OAAAC,EAAA,UAAAD,CAAAT,EAAAC,GAMjCD,EAAAW,UAAAC,kBAAA,WACQ,IAAAC,EAAAT,KAAAU,MAAEC,EAAAF,EAAAE,UAAWC,EAAAH,EAAAG,OAAQC,EAAAJ,EAAAI,OAAQC,EAAAL,EAAAK,QAASC,EAAAN,EAAAM,QAASC,EAAAP,EAAAO,UAErDhB,KAAKU,MAAMO,cAAc,CACvBN,UAAWA,EACXC,OAAQA,EACRG,QAASA,EACTF,OAAQA,EACRC,QAASA,EACTE,UAAWA,EACXE,QAAQ,KAIZtB,EAAAW,UAAAY,mBAAA,SAAmBC,GACX,IAAAX,EAAAT,KAAAU,MAAEW,EAAAZ,EAAAY,WAAYC,EAAAb,EAAAa,UAEpB,GAAKA,IAKAF,EAAUE,UAAW,CACxB,IAAMC,EAAUC,SAASH,EAAY,IAGrCC,EAAUG,mBAAmBF,GAE7B,IAAMpB,EAAQmB,EAAUI,aAAaH,GAErC,IAAKpB,EAEH,YADAH,KAAK2B,SAAS,CAAEvB,UAAU,IAI5BJ,KAAK2B,SAAS,CAAExB,MAAKA,MAIzBP,EAAAW,UAAAqB,OAAA,WACQ,IAAAnB,EAAAT,KAAAU,MAAEW,EAAAZ,EAAAY,WAAYC,EAAAb,EAAAa,UACdO,EAAA7B,KAAAE,MAAEE,EAAAyB,EAAAzB,SAAUD,EAAA0B,EAAA1B,MAElB,OAAIC,EACK0B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sCAAmCZ,gBAGtDlB,EAKH2B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAACE,EAAA,EAAc,CAACZ,UAAWA,EAAWnB,MAAOA,EAAOgC,WAAW,EAAOC,cAAc,EAAOC,UAAU,KALhGP,EAAAC,EAAAC,cAAA,gDASbpC,EA/DA,CAAmC0C,EAAA,WAyE7BC,EAAqB,CACzBtB,cAAauB,EAAA,GAGAC,EAAA,QAAApC,OAAAqC,EAAA,IAAArC,CAAIsC,EAAJ,CAAYtC,OAAAuC,EAAA,QAAAvC,CAZH,SAACH,GAAsB,OAC7CW,OAAQX,EAAM2C,SAASC,YAAYC,IACnChC,QAASb,EAAM2C,SAASC,YAAYE,KACpClC,QAASZ,EAAM2C,SAASC,YAAYG,KACpC5B,WAAYnB,EAAM2C,SAASK,MAAM3B,QACjCD,UAAWpB,EAAMoB,UAAU6B,QAOuBZ,EAAzBlC,CAA6CT","file":"SoloPanelPage.4d0490a94b199a11f40c.js","sourcesContent":["// Libraries\nimport React, { Component } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\n\n// Components\nimport { DashboardPanel } from '../dashgrid/DashboardPanel';\n\n// Redux\nimport { initDashboard } from '../state/initDashboard';\n\n// Types\nimport { StoreState, DashboardRouteInfo } from 'app/types';\nimport { PanelModel, DashboardModel } from 'app/features/dashboard/state';\n\ninterface Props {\n  urlPanelId: string;\n  urlUid?: string;\n  urlSlug?: string;\n  urlType?: string;\n  $scope: any;\n  $injector: any;\n  routeInfo: DashboardRouteInfo;\n  initDashboard: typeof initDashboard;\n  dashboard: DashboardModel | null;\n}\n\ninterface State {\n  panel: PanelModel | null;\n  notFound: boolean;\n}\n\nexport class SoloPanelPage extends Component<Props, State> {\n  state: State = {\n    panel: null,\n    notFound: false,\n  };\n\n  componentDidMount() {\n    const { $injector, $scope, urlUid, urlType, urlSlug, routeInfo } = this.props;\n\n    this.props.initDashboard({\n      $injector: $injector,\n      $scope: $scope,\n      urlSlug: urlSlug,\n      urlUid: urlUid,\n      urlType: urlType,\n      routeInfo: routeInfo,\n      fixUrl: false,\n    });\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { urlPanelId, dashboard } = this.props;\n\n    if (!dashboard) {\n      return;\n    }\n\n    // we just got the dashboard!\n    if (!prevProps.dashboard) {\n      const panelId = parseInt(urlPanelId, 10);\n\n      // need to expand parent row if this panel is inside a row\n      dashboard.expandParentRowFor(panelId);\n\n      const panel = dashboard.getPanelById(panelId);\n\n      if (!panel) {\n        this.setState({ notFound: true });\n        return;\n      }\n\n      this.setState({ panel });\n    }\n  }\n\n  render() {\n    const { urlPanelId, dashboard } = this.props;\n    const { notFound, panel } = this.state;\n\n    if (notFound) {\n      return <div className=\"alert alert-error\">Panel with id {urlPanelId} not found</div>;\n    }\n\n    if (!panel) {\n      return <div>Loading & initializing dashboard</div>;\n    }\n\n    return (\n      <div className=\"panel-solo\">\n        <DashboardPanel dashboard={dashboard} panel={panel} isEditing={false} isFullscreen={false} isInView={true} />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: StoreState) => ({\n  urlUid: state.location.routeParams.uid,\n  urlSlug: state.location.routeParams.slug,\n  urlType: state.location.routeParams.type,\n  urlPanelId: state.location.query.panelId,\n  dashboard: state.dashboard.model as DashboardModel,\n});\n\nconst mapDispatchToProps = {\n  initDashboard,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(SoloPanelPage));\n"],"sourceRoot":""}