{"version":3,"file":"ServiceAccountCreatePage.acf6b2d3db88f74c6c72.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/Form/Form.tsx","webpack://grafana/./public/app/core/components/RolePicker/UserRolePicker.tsx","webpack://grafana/./public/app/features/admin/OrgRolePicker.tsx","webpack://grafana/./public/app/features/serviceaccounts/ServiceAccountCreatePage.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport { HTMLProps, useEffect } from 'react';\nimport * as React from 'react';\nimport {\n  useForm,\n  Mode,\n  DefaultValues,\n  SubmitHandler,\n  FieldValues,\n  UseFormReturn,\n  FieldErrors,\n  FieldPath,\n} from 'react-hook-form';\n\nexport type FormAPI<T extends FieldValues> = Omit<UseFormReturn<T>, 'handleSubmit'> & {\n  errors: FieldErrors<T>;\n};\n\ninterface FormProps<T extends FieldValues> extends Omit<HTMLProps<HTMLFormElement>, 'onSubmit' | 'children'> {\n  validateOn?: Mode;\n  validateOnMount?: boolean;\n  validateFieldsOnMount?: FieldPath<T> | Array<FieldPath<T>>;\n  defaultValues?: DefaultValues<T>;\n  onSubmit: SubmitHandler<T>;\n  children: (api: FormAPI<T>) => React.ReactNode;\n  /** Sets max-width for container. Use it instead of setting individual widths on inputs.*/\n  maxWidth?: number | 'none';\n}\n\nexport function Form<T extends FieldValues>({\n  defaultValues,\n  onSubmit,\n  validateOnMount = false,\n  validateFieldsOnMount,\n  children,\n  validateOn = 'onSubmit',\n  maxWidth = 600,\n  ...htmlProps\n}: FormProps<T>) {\n  const { handleSubmit, trigger, formState, ...rest } = useForm<T>({\n    mode: validateOn,\n    defaultValues,\n  });\n\n  useEffect(() => {\n    if (validateOnMount) {\n      trigger(validateFieldsOnMount);\n    }\n  }, [trigger, validateFieldsOnMount, validateOnMount]);\n\n  return (\n    <form\n      className={css({\n        maxWidth: maxWidth !== 'none' ? maxWidth + 'px' : maxWidth,\n        width: '100%',\n      })}\n      onSubmit={handleSubmit(onSubmit)}\n      {...htmlProps}\n    >\n      {children({ errors: formState.errors, formState, trigger, ...rest })}\n    </form>\n  );\n}\n","import { useEffect } from 'react';\nimport { useAsyncFn } from 'react-use';\n\nimport { contextSrv } from 'app/core/core';\nimport { Role, OrgRole, AccessControlAction } from 'app/types';\n\nimport { RolePicker } from './RolePicker';\nimport { fetchUserRoles, updateUserRoles } from './api';\n\nexport interface Props {\n  basicRole: OrgRole;\n  roles?: Role[];\n  userId: number;\n  orgId?: number;\n  onBasicRoleChange: (newRole: OrgRole) => void;\n  roleOptions: Role[];\n  disabled?: boolean;\n  basicRoleDisabled?: boolean;\n  basicRoleDisabledMessage?: string;\n  /**\n   * Set whether the component should send a request with the new roles to the\n   * backend in UserRolePicker.onRolesChange (apply=false), or call {@link onApplyRoles}\n   * with the updated list of roles (apply=true).\n   *\n   * Besides it sets the RolePickerMenu's Button title to\n   *   * `Update` in case apply equals false\n   *   * `Apply` in case apply equals true\n   *\n   * @default false\n   */\n  apply?: boolean;\n  onApplyRoles?: (newRoles: Role[], userId: number, orgId: number | undefined) => void;\n  pendingRoles?: Role[];\n  maxWidth?: string | number;\n  width?: string | number;\n  isLoading?: boolean;\n}\n\nexport const UserRolePicker = ({\n  basicRole,\n  roles,\n  userId,\n  orgId,\n  onBasicRoleChange,\n  roleOptions,\n  disabled,\n  basicRoleDisabled,\n  basicRoleDisabledMessage,\n  apply = false,\n  onApplyRoles,\n  pendingRoles,\n  maxWidth,\n  width,\n  isLoading,\n}: Props) => {\n  const [{ loading, value: appliedRoles = roles || [] }, getUserRoles] = useAsyncFn(async () => {\n    try {\n      if (roles) {\n        return roles;\n      }\n      if (apply && Boolean(pendingRoles?.length)) {\n        return pendingRoles;\n      }\n\n      if (contextSrv.hasPermission(AccessControlAction.ActionUserRolesList) && userId > 0) {\n        return await fetchUserRoles(userId, orgId);\n      }\n    } catch (e) {\n      // TODO handle error\n      console.error('Error loading options');\n    }\n    return [];\n  }, [orgId, userId, pendingRoles, roles]);\n\n  useEffect(() => {\n    // only load roles when there is an Org selected\n    if (orgId) {\n      getUserRoles();\n    }\n  }, [getUserRoles, orgId]);\n\n  const onRolesChange = async (roles: Role[]) => {\n    if (!apply) {\n      await updateUserRoles(roles, userId, orgId);\n      await getUserRoles();\n    } else if (onApplyRoles) {\n      onApplyRoles(roles, userId, orgId);\n    }\n  };\n\n  const canUpdateRoles =\n    contextSrv.hasPermission(AccessControlAction.ActionUserRolesAdd) &&\n    contextSrv.hasPermission(AccessControlAction.ActionUserRolesRemove);\n\n  return (\n    <RolePicker\n      appliedRoles={appliedRoles}\n      basicRole={basicRole}\n      onRolesChange={onRolesChange}\n      onBasicRoleChange={onBasicRoleChange}\n      roleOptions={roleOptions}\n      isLoading={loading || isLoading}\n      disabled={disabled}\n      basicRoleDisabled={basicRoleDisabled}\n      basicRoleDisabledMessage={basicRoleDisabledMessage}\n      showBasicRole\n      apply={apply}\n      canUpdateRoles={canUpdateRoles}\n      maxWidth={maxWidth}\n      width={width}\n    />\n  );\n};\n","import { OrgRole } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\ninterface Props {\n  value: OrgRole;\n  disabled?: boolean;\n  'aria-label'?: string;\n  inputId?: string;\n  onChange: (role: OrgRole) => void;\n  autoFocus?: boolean;\n  width?: number | 'auto';\n}\n\nconst basicRoles = Object.values(OrgRole).filter((r) => r !== OrgRole.None);\nconst options = basicRoles.map((r) => ({ label: r, value: r }));\n\nexport function OrgRolePicker({ value, onChange, 'aria-label': ariaLabel, inputId, autoFocus, ...restProps }: Props) {\n  return (\n    <Select\n      inputId={inputId}\n      value={value}\n      options={options}\n      onChange={(val) => onChange(val.value ?? OrgRole.None)}\n      placeholder=\"Choose role...\"\n      aria-label={ariaLabel}\n      autoFocus={autoFocus}\n      {...restProps}\n    />\n  );\n}\n","import { useCallback, useEffect, useState } from 'react';\n\nimport { getBackendSrv, locationService } from '@grafana/runtime';\nimport { Button, Input, Field, FieldSet } from '@grafana/ui';\nimport { Form } from 'app/core/components/Form/Form';\nimport { Page } from 'app/core/components/Page/Page';\nimport { UserRolePicker } from 'app/core/components/RolePicker/UserRolePicker';\nimport { fetchRoleOptions, updateUserRoles } from 'app/core/components/RolePicker/api';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction, OrgRole, Role, ServiceAccountCreateApiResponse, ServiceAccountDTO } from 'app/types';\n\nimport { OrgRolePicker } from '../admin/OrgRolePicker';\n\nexport interface Props {}\n\nconst createServiceAccount = async (sa: ServiceAccountDTO) => {\n  const result = await getBackendSrv().post('/api/serviceaccounts/', sa);\n  await contextSrv.fetchUserPermissions();\n  return result;\n};\n\nconst updateServiceAccount = async (id: number, sa: ServiceAccountDTO) =>\n  getBackendSrv().patch(`/api/serviceaccounts/${id}`, sa);\n\nexport const ServiceAccountCreatePage = ({}: Props): JSX.Element => {\n  const [roleOptions, setRoleOptions] = useState<Role[]>([]);\n  const [pendingRoles, setPendingRoles] = useState<Role[]>([]);\n\n  const currentOrgId = contextSrv.user.orgId;\n  const [serviceAccount, setServiceAccount] = useState<ServiceAccountDTO>({\n    id: 0,\n    orgId: contextSrv.user.orgId,\n    role: contextSrv.licensedAccessControlEnabled() ? OrgRole.None : OrgRole.Viewer,\n    tokens: 0,\n    name: '',\n    login: '',\n    isDisabled: false,\n    createdAt: '',\n    teams: [],\n  });\n\n  useEffect(() => {\n    async function fetchOptions() {\n      try {\n        if (contextSrv.hasPermission(AccessControlAction.ActionRolesList)) {\n          let options = await fetchRoleOptions(currentOrgId);\n          setRoleOptions(options);\n        }\n      } catch (e) {\n        console.error('Error loading options', e);\n      }\n    }\n    if (contextSrv.licensedAccessControlEnabled()) {\n      fetchOptions();\n    }\n  }, [currentOrgId]);\n\n  const onSubmit = useCallback(\n    async (data: ServiceAccountDTO) => {\n      data.role = serviceAccount.role;\n      const response = await createServiceAccount(data);\n      try {\n        const newAccount: ServiceAccountCreateApiResponse = {\n          avatarUrl: response.avatarUrl,\n          id: response.id,\n          isDisabled: response.isDisabled,\n          login: response.login,\n          name: response.name,\n          orgId: response.orgId,\n          role: response.role,\n          tokens: response.tokens,\n        };\n        await updateServiceAccount(response.id, data);\n        if (\n          contextSrv.licensedAccessControlEnabled() &&\n          contextSrv.hasPermission(AccessControlAction.ActionUserRolesAdd) &&\n          contextSrv.hasPermission(AccessControlAction.ActionUserRolesRemove)\n        ) {\n          await updateUserRoles(pendingRoles, newAccount.id, newAccount.orgId);\n        }\n      } catch (e) {\n        console.error(e);\n      }\n      locationService.push(`/org/serviceaccounts/${response.id}`);\n    },\n    [serviceAccount.role, pendingRoles]\n  );\n\n  const onRoleChange = (role: OrgRole) => {\n    setServiceAccount({\n      ...serviceAccount,\n      role: role,\n    });\n  };\n\n  const onPendingRolesUpdate = (roles: Role[], userId: number, orgId: number | undefined) => {\n    // keep the new role assignments for user\n    setPendingRoles(roles);\n  };\n\n  return (\n    <Page navId=\"serviceaccounts\" pageNav={{ text: 'Create service account' }}>\n      <Page.Contents>\n        <Form onSubmit={onSubmit} validateOn=\"onSubmit\">\n          {({ register, errors }) => {\n            return (\n              <>\n                <FieldSet>\n                  <Field\n                    label=\"Display name\"\n                    required\n                    invalid={!!errors.name}\n                    error={errors.name ? 'Display name is required' : undefined}\n                  >\n                    <Input id=\"display-name-input\" {...register('name', { required: true })} autoFocus />\n                  </Field>\n                  <Field label=\"Role\">\n                    {contextSrv.licensedAccessControlEnabled() ? (\n                      <UserRolePicker\n                        apply\n                        userId={serviceAccount.id || 0}\n                        orgId={serviceAccount.orgId}\n                        basicRole={serviceAccount.role}\n                        onBasicRoleChange={onRoleChange}\n                        roleOptions={roleOptions}\n                        onApplyRoles={onPendingRolesUpdate}\n                        pendingRoles={pendingRoles}\n                        maxWidth=\"100%\"\n                      />\n                    ) : (\n                      <OrgRolePicker aria-label=\"Role\" value={serviceAccount.role} onChange={onRoleChange} />\n                    )}\n                  </Field>\n                </FieldSet>\n                <Button type=\"submit\">Create</Button>\n              </>\n            );\n          }}\n        </Form>\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default ServiceAccountCreatePage;\n"],"names":["Form","defaultValues","onSubmit","validateOnMount","validateFieldsOnMount","children","validateOn","maxWidth","htmlProps","handleSubmit","trigger","formState","rest","UserRolePicker","basicRole","roles","userId","orgId","onBasicRoleChange","roleOptions","disabled","basicRoleDisabled","basicRoleDisabledMessage","apply","onApplyRoles","pendingRoles","width","isLoading","loading","appliedRoles","getUserRoles","onRolesChange","canUpdateRoles","options","OrgRolePicker","value","onChange","ariaLabel","inputId","autoFocus","restProps","val","createServiceAccount","sa","result","updateServiceAccount","id","ServiceAccountCreatePage","setRoleOptions","setPendingRoles","currentOrgId","serviceAccount","setServiceAccount","fetchOptions","e","data","response","newAccount","onRoleChange","role","onPendingRolesUpdate","register","errors"],"sourceRoot":""}